{"context": "\n\n\u30dd\u30fc\u30ab\u30fc\u4f5c\u308a\u3067 Swift 3 \u306e\u7a7a\u6c17\u3092\u611f\u3058\u308b(\u5f8c\u534a)\n\n\u26c4\ud83c\udf84\ud83c\udf81\ud83c\udf82\ud83c\udf85\ud83c\udf82\ud83c\udf81\ud83c\udf84\u26c4\n\u3081\u308a\u30fc\u3055\u3093\u305f\u3055\u3093\u2757\n\n\u3053\u3093\u306b\u3061\u306f Liaro \u306e 131e55 \u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u3001\u524d\u534a\u304b\u3089\u306e\u7d9a\u304d\u306e\u3082\u306e\u3067\u3001Swift 3 \u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4e0a\u3067\u52d5\u304f\u7c21\u5358\u306a\u30dd\u30fc\u30ab\u30fc\u3092\u4f5c\u308b\u6d41\u308c\u3092\u66f8\u3044\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001Swift \u305d\u306e2 Advent Calendar 2016\u306e25\u65e5\u76ee\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\u30c8\u30ea\u306b\u3057\u3066\u306f\u306a\u3041\u611f\u304c\u3042\u308b\u8a18\u4e8b\u3067\u3059\u304c\u305d\u306e2\u3060\u3057\u3044\u3063\u304b\u3068\u3044\u3046\u8efd\u3044\u6c17\u6301\u3061\u3067\u66f8\u304d\u307e\u3059(\u3066\u3078)\n\n\u958b\u767a\u74b0\u5883\n\nSwift 3.0.1\nXcode 8.1\nmacOS 10.12.1\n\n\n\u958b\u767a\u306e\u6d41\u308c\n\u4ee5\u4e0b\u306e\u6d41\u308c\u3067\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u9805\u76ee1\u304b\u30897\u306f\u524d\u534a\u3067\u7d42\u3048\u3066\u3044\u307e\u3059\u306e\u3067\u4eca\u56de\u306f\u9805\u76ee8\u304b\u3089\u3068\u306a\u308a\u307e\u3059\u3002\n\nXcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 (\u524d\u534a)\n\u30ab\u30fc\u30c9\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53 (\u524d\u534a)\n\u30ab\u30fc\u30c9\u306e\u8868\u793a (\u524d\u534a)\n\u30ab\u30fc\u30c9\u306e\u6bd4\u8f03 (\u524d\u534a)\n\u5c71\u672d\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53 (\u524d\u534a)\n\u624b\u672d\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53 (\u524d\u534a)\n\u5f79\u3092\u7ba1\u7406\u3059\u308b\u5217\u6319\u578b (\u524d\u534a)\n\u5f79\u5224\u5b9a\u306e\u5b9f\u88c5\n\u30dd\u30fc\u30ab\u30fc\u306e\u5b9f\u88c5\n\n\u3067\u306f\u5f79\u5224\u5b9a\u306e\u5b9f\u88c5\u304b\u3089\u2757\n\n\u5f79\u5224\u5b9a\u306e\u5b9f\u88c5\n\u5f79\u5224\u5b9a\u3092\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u3001\u3068\u308a\u3042\u3048\u305a\u5404\u5f79\u306e\u95a2\u4fc2\u3092\u6574\u7406\u3057\u3066\u307f\u307e\u3059\u3002\n\u3058\u3083\u3093\u3002\n\n\u56f3\u304b\u3089\u3001\u30dd\u30fc\u30ab\u30fc\u306e\u5f79\u306f\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u300d\u3068\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u306e\u3075\u305f\u3064\u306b\u5206\u985e\u3067\u304d\u3001\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u306f\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8(A, K, Q, J, 10 \u306b\u3088\u308b\u30b9\u30c8\u30ec\u30fc\u30c8)\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u306e3\u3064\u3092\u5224\u5b9a\u3067\u304d\u308c\u3070\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u30674\u3064\u5168\u3066\u3092\u5224\u5b9a\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u5bfe\u3057\u3066\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u300d\u306f\u4ee5\u4e0b\u306e\u8868\u306e\u3088\u3046\u306b\u3001\u624b\u672d\u3092\u540c\u3058\u30e9\u30f3\u30af\u5225\u306b\u5206\u3051\u3066\u305d\u308c\u305e\u308c\u306e\u679a\u6570\u3092\u898b\u308c\u3070\u5224\u5b9a\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n\n\n\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\n\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\n\u4f8b\n\n\n\n\n\u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\n4, 1\n[\u2663\ufe0fA \u2666\ufe0fA \u2665\ufe0fA \u2660\ufe0fA] [\u2665\ufe0fK]\n\n\n\u30d5\u30eb\u30cf\u30a6\u30b9\n3, 2\n[\u2663\ufe0fA \u2666\ufe0fA \u2665\ufe0fA] [\u2660\ufe0f2 \u2665\ufe0f2]\n\n\n\u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\n3, 1, 1\n[\u2663\ufe0fA \u2666\ufe0fA \u2665\ufe0fA] [\u2660\ufe0f2] [\u2665\ufe0fK]\n\n\n\u30c4\u30fc\u30da\u30a2\n2, 2, 1\n[\u2663\ufe0fA \u2666\ufe0fA] [\u2665\ufe0f2 \u2660\ufe0f2] [\u2665\ufe0fK]\n\n\n\u30ef\u30f3\u30da\u30a2\n2, 1, 1, 1\n[\u2663\ufe0fA \u2666\ufe0fA] [\u2665\ufe0f2] [\u2660\ufe0f3] [\u2665\ufe0fK]\n\n\n\n\u3068\u3001\u8a00\u3046\u308f\u3051\u3067\u3001\u5f79\u5224\u5b9a\u5b9f\u88c5\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u9806\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u306e\u53d6\u5f97\n\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u306e\u5224\u5b9a\n\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u306e\u5224\u5b9a\n\n\u5f79\u5224\u5b9a\u306b\u95a2\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3061\u3083\u3093\u3068\u52d5\u304f\u306e\u304b\u602a\u3057\u3044\u306e\u3067\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u4eca\u307e\u3067\u306b\u4f5c\u6210\u3057\u305f Suit.swift\u3001Rank.swift\u3001Card.swift\u3001PokerHand.swift \u3092 PokerCLITests \u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u305d\u308c\u305e\u308c\u30c1\u30a7\u30c3\u30af\u3092\u3044\u308c\u307e\u3059\u3002(\u56f3\u306e\u4e00\u756a\u4e0b)\n\n\n\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u306e\u53d6\u5f97\n\u3067\u306f\u307e\u305a\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u306e\u53d6\u5f97\u304b\u3089\u3067\u3059\u3002 PokerHand \u5217\u6319\u578b\u306b static \u306a\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nPokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n\n    // \u30b3\u30b3\u2757\n    static func countsBySameRank(cards: [Card]) -> [Int] {\n        // \u30ab\u30fc\u30c9\u304c\u4f55\u679a\u304b\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard !cards.isEmpty else {\n            return [0]\n        }\n\n        var cards = cards\n        var counts: [Int] = []\n\n        // 1\u679a\u76ee\u304b\u3089\u9806\u306b\u305d\u306e\u30ab\u30fc\u30c9\u3068\u540c\u3058\u30e9\u30f3\u30af\u306e\u30ab\u30fc\u30c9\u3092\u624b\u672d\u304b\u3089\u62bd\u51fa\u3057\u679a\u6570\u3092\u6570\u3048\u3066\u3044\u304f\n        // \u62bd\u51fa\u3055\u308c\u305f\u30ab\u30fc\u30c9\u306f\u624b\u672d\u304b\u3089\u9664\u3044\u3066\u3044\u304d\u624b\u672d\u304c\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u308f\u308a\n        while !cards.isEmpty {\n            let card = cards.first!\n            let sameRankCards = cards.filter({ $0.rank == card.rank })\n            cards = cards.filter({ $0.rank != card.rank })\n            counts.append(sameRankCards.count)\n        }\n\n        // \u964d\u9806\u306b\u30bd\u30fc\u30c8\n        counts.sort(by: { $0 > $1 })\n\n        return counts\n    }\n\n\n    init(cards: [Card]) { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n}\n\n\n\u82f1\u8a9e\u304c\u5408\u3063\u3066\u308b\u304b\u5fae\u5999\u3067\u3059\u304c PokerHand.countsBySameRank(cards: [Card]) -> [Int] \u3068\u5b9a\u7fa9\u3057\u3001\u6e21\u3055\u308c\u305f5\u679a\u306e\u30ab\u30fc\u30c9\u306e\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u3092\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u7c21\u5358\u306b\u3001\u5168\u3066\u306e\u5f79\u306e\u624b\u672d\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u3001PokerHand.countsBySameRank(cards: [Card]) -> [Int] \u304c\u671f\u5f85\u901a\u308a\u306b\u52d5\u304f\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u300d\u306f\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u306e\u5404\u679a\u6570\u306e\u901a\u308a\u306b\u3001\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u3068\ud83d\udc37\u306f [1, 1, 1, 1, 1] \u3068\u306a\u3063\u3066\u307b\u3057\u3044\u3067\u3059\u3002\n\nPokerCLITests.swift\nimport XCTest\n@testable import PokerCLI\n\nclass PokerCLITests: XCTestCase {\n\n    // \u30b3\u30b3\u2757\n\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f J||\u2666\ufe0f 3||\u2665\ufe0f Q| \ud83d\udc37\u624b\u672d\n    let highCardCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .jack), Card(suit: .diamond, rank: .three), Card(suit: .heart, rank: .queen)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f 3||\u2665\ufe0f Q| \u30ef\u30f3\u30da\u30a2\u624b\u672d\n    let onePairCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .three), Card(suit: .heart, rank: .queen)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f 2||\u2665\ufe0f Q| \u30c4\u30fc\u30da\u30a2\u624b\u672d\n    let twoPairCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .two), Card(suit: .heart, rank: .queen)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f A||\u2665\ufe0f Q| \u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\u624b\u672d\n    let threeOfAKindCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .ace), Card(suit: .heart, rank: .queen)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f 3||\u2666\ufe0f 4||\u2665\ufe0f 5] \u30b9\u30c8\u30ec\u30fc\u30c8\u624b\u672d\n    let straightCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .three), Card(suit: .diamond, rank: .four), Card(suit: .heart, rank: .five)]\n    // |\u2663\ufe0f A||\u2663\ufe0f10||\u2665\ufe0f J||\u2666\ufe0f Q||\u2665\ufe0f K| \u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u624b\u672d\n    let aceHighStraightCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .ten), Card(suit: .heart, rank: .jack), Card(suit: .diamond, rank: .queen), Card(suit: .heart, rank: .king)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 3||\u2663\ufe0f 5||\u2663\ufe0f J||\u2663\ufe0f K| \u30d5\u30e9\u30c3\u30b7\u30e5\u624b\u672d\n    let flushCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .three), Card(suit: .club, rank: .jack), Card(suit: .club, rank: .four), Card(suit: .club, rank: .king)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f A||\u2665\ufe0f 2| \u30d5\u30eb\u30cf\u30a6\u30b9\u624b\u672d\n    let fullHouseCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .ace), Card(suit: .heart, rank: .two)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f A||\u2660\ufe0f A| \u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\u624b\u672d\n    let fourOfAKindCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .ace), Card(suit: .spade, rank: .ace)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2663\ufe0f 3||\u2663\ufe0f 4||\u2663\ufe0f 5| \u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u624b\u672d\n    let straightFlushCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .club, rank: .three), Card(suit: .club, rank: .four), Card(suit: .club, rank: .five)]\n    // |\u2663\ufe0f A||\u2663\ufe0f10||\u2663\ufe0f J||\u2663\ufe0f Q||\u2663\ufe0f K| \u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u624b\u672d\n    let royalFlushCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .ten), Card(suit: .club, rank: .jack), Card(suit: .club, rank: .queen), Card(suit: .club, rank: .king)]\n\n    override func setUp() { /* \u7701\u7565 */ }\n    override func tearDown() { /* \u7701\u7565 */ }\n\n    // \u30b3\u30b3\u2757\n    func testCountsBySameRank() {\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: highCardCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: onePairCards), [2, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: twoPairCards), [2, 2, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: threeOfAKindCards), [3, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: straightCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: aceHighStraightCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: flushCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: fullHouseCards), [3, 2])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: fourOfAKindCards), [4, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: straightFlushCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: royalFlushCards), [1, 1, 1, 1, 1])\n    }\n}\n\n\n\n\u3067\u306f\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u3066\u307f\u307e\u3059\u3002\n\n\u5de6\u4e0a\u306b\u3000\u2705 \u304c\u3064\u3044\u3066\u3044\u308b\u306e\u3067\u30c6\u30b9\u30c8\u304c\u901a\u308a\u307e\u3057\u305f\u3002\u96d1\u306a\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u3059\u304c\u3001PokerHand.countsBySameRank(cards: [Card]) -> [Int] \u306f\u3068\u308a\u3042\u3048\u305a\u671f\u5f85\u3069\u304a\u308a\u306b\u52d5\u3044\u3066\u3044\u305d\u3046\u3067\u3059\u3002\u3053\u306e\u6d41\u308c\u3067\u4ed6\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u9577\u304f\u306a\u308b\u306e\u3067\u4ee5\u964d\u306f\u30c6\u30b9\u30c8\u7d50\u679c\u306e\u307f\u8f09\u305b\u307e\u3059\u3002\n\n\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u306e\u5224\u5b9a\n\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u306e\u53d6\u5f97\u304c\u3067\u304d\u305f\u3089\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u300d\u3067\u3042\u308b\u30ef\u30f3\u30da\u30a2\u3001\u30c4\u30fc\u30da\u30a2\u3001\u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\u3001\u30d5\u30eb\u30cf\u30a6\u30b9\u3001\u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\u306f\u5168\u3066\u78ba\u5b9a\u3067\u304d\u307e\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u308c\u3089\u306e\u5f79\u306e\u5224\u5b9a\u3092 PokerHand \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf init \u306b\u8ffd\u8a18\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nPokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n\n    init(cards: [Card]) {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            self = .highCard\n            return\n        }\n\n        // \u30b3\u30b3\u2757\n        let counts = PokerHand.countsBySameRank(cards: cards)\n\n        if counts == [2, 1, 1, 1] {\n            self = .onePair\n        }\n        else if counts == [2, 2, 1] {\n            self = .twoPair\n        }\n        else if counts == [3, 1, 1] {\n            self = .threeOfAKind\n        }\n        else if counts == [3, 2] {\n            self = .fullHouse\n        }\n        else if counts == [4, 1] {\n            self = .fourOfAKind\n        }\n        else {\n            self = .highCard\n        }\n    }\n}\n\n\n(\u00b4-`).\uff61oO( switch \u3067\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u306b\u914d\u5217\u3067\u306f\u3067\u304d\u306a\u3044\u69d8\u5b50\u2753\u8ab0\u304b\u6559\u3048\u3066\u304f\u3060\u3055\u3044...)\n\n\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\u3053\u3053\u304b\u3089\u306f\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u306e\u5224\u5b9a\u3067\u3059\u3002\n\u307e\u305a\u306f\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u5358\u7d14\u306a\u30b9\u30c8\u30ec\u30fc\u30c8\u306e\u5224\u5b9a\u306f\u624b\u672d\u304c\u9023\u756a\u304b\u3069\u3046\u304b\u3092\u898b\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u304c A, K, Q, J, 10 \u306e\u5834\u5408\u306f A \u304c\u3061\u3087\u3063\u3068\u90aa\u9b54\u306a\u306e\u3067\u5358\u7d14\u306b\u3053\u306e5\u3064\u5168\u3066\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\nPokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n\n    // \u30b3\u30b3\u2757\n    static func containsAceHighStraight(cards: [Card]) -> Bool {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            return false\n        }\n\n        // \u30e9\u30f3\u30af\u306e\u964d\u9806\u306b\u30bd\u30fc\u30c8\n        let cards = cards.sorted { $0.rank.rawValue > $1.rank.rawValue }\n\n        // K, Q, J, 10, A \u306a\u3089\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u3002\u9055\u3046\u306a\u3089\u542b\u307e\u306a\u3044\u3002\n        if cards[0].rank == .king\n            && cards[1].rank == .queen\n            && cards[2].rank == .jack\n            && cards[3].rank == .ten\n            && cards[4].rank == .ace {\n\n            return true\n        }\n\n        return false\n    }\n\n    init(cards: [Card]) { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n}\n\n\n\u6e21\u3055\u308c\u305f\u30ab\u30fc\u30c95\u679a\u306b\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u306e\u5f79\u3092\u542b\u3080\u306a\u3089 true\u3001\u542b\u307e\u306a\u3044\u306a\u3089 false \u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u5f79\u306f\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n\n\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3068\u306a\u3089\u306a\u3044\u30b9\u30c8\u30ec\u30fc\u30c8\u306e\u5224\u5b9a\u306f\u5358\u7d14\u306b\u9023\u756a\u306b\u306a\u308b\u304b\u3092\u898b\u308c\u3070\u826f\u3044\u3067\u3059\u306d\u3002\n\nPokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsAceHighStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n\n    // \u30b3\u30b3\u2757\n    static func containsStraight(cards: [Card]) -> Bool {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            return false\n        }\n\n        // \u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3060\u3063\u305f\u3089\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u3068\u3057\u3066\u7d42\u4e86\u3002\n        if PokerHand.containsAceHighStraight(cards: cards) {\n            return true\n        }\n\n        // \u30e9\u30f3\u30af\u306e\u964d\u9806\u306b\u30bd\u30fc\u30c8\n        let cards = cards.sorted { $0.rank.rawValue > $1.rank.rawValue }\n\n        // 1\u679a\u76ee\u304b\u30894\u679a\u76ee\u307e\u3067\u305d\u308c\u305e\u308c\u6ce8\u76ee\u3057\u3066\u3044\u304f\u3002\n        // \u5168\u3066\u300c\u6ce8\u76ee\u3057\u305f\u30ab\u30fc\u30c9\u306e\u6570\u5b57\u304c\u6b21\u306e\u30ab\u30fc\u30c9\u306e\u6570\u5b57\u306e\uff11\u5927\u304d\u3044\u6570\u300d\u306a\u3089\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u3002\n        // \u9055\u3046\u306a\u3089\u542b\u307e\u306a\u3044\u3002\n        for i in 0..<cards.count - 1 {\n            if cards[i].rank.rawValue == cards[i + 1].rank.rawValue + 1 {\n                continue\n            }\n\n            return false\n        }\n\n        return true\n    }\n\n    init(cards: [Card]) { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n}\n\n\n\u3082\u3063\u3068\u4e0a\u624b\u3044\u65b9\u6cd5\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u304c\u3001\u9023\u756a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u306e\u5834\u5408\u3082\u30b9\u30c8\u30ec\u30fc\u30c8\u306a\u306e\u3067\u3001\u5148\u306b\u4f5c\u3063\u305f PokerHand.containsAceHighStraight(cards: [Card]) -> Bool \u3092\u4f7f\u3063\u3066\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u5f79\u306f\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n\n\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\u542b\u3080\u304b\u3069\u3046\u304b\u5224\u5b9a\u6700\u5f8c\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u5224\u5b9a\u3044\u304d\u307e\u3059\u3002\u5f79\u5224\u5b9a\u306e\u4e2d\u3067\u4e00\u756a\u7c21\u5358\u305d\u3046\u3067\u3059\u3002\n\nPokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsAceHighStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n\n    // \u30b3\u30b3\u2757\n    static func containsFlush(cards: [Card]) -> Bool {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            return false\n        }\n\n        // 1\u679a\u76ee\u306e\u30b9\u30fc\u30c8\u3092\u7528\u610f\u3057\u3001\u624b\u672d\u304b\u3089\u305d\u306e\u30b9\u30fc\u30c8\u3068\u540c\u3058\u30b9\u30fc\u30c8\u3092\u6301\u3064\u30ab\u30fc\u30c9\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\n        // \u624b\u672d\u306e\u679a\u6570\u3068\u540c\u3058\u306a\u3089\u5168\u90e8\u540c\u3058\u30b9\u30fc\u30c8\u306a\u306e\u3067\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u3002\u9055\u3046\u306a\u3089\u542b\u307e\u306a\u3044\u3002\n        let suit = cards[0].suit\n        return cards.filter({ $0.suit == suit }).count == cards.count\n    }\n\n    init(cards: [Card]) { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n}\n\n\n1\u679a\u76ee\u306e\u30b9\u30fc\u30c8\u3068\u540c\u3058\u30b9\u30fc\u30c8\u3092\u6301\u3064\u30ab\u30fc\u30c9\u3092\u62bd\u51fa\u3057\u3066\u3001\u5143\u306e\u624b\u672d\u306e\u6570\u3068\u540c\u3058\u306a\u3089\u5168\u90e8\u540c\u3058\u30b9\u30fc\u30c8\u3067\u3057\u3087\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u5f79\u306f\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n\n\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u306e\u5224\u5b9a\n\u3053\u3053\u307e\u3067\u3067\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u3067\u3042\u308b\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u5168\u3066\u78ba\u5b9a\u3067\u304d\u307e\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u308c\u3089\u306e\u5f79\u306e\u5224\u5b9a\u3092 PokerHand \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf init \u306b\u8ffd\u8a18\u3057\u3066\u5f79\u5224\u5b9a\u3092\u5b8c\u6210\u3055\u305b\u307e\u3057\u3087\u3046\u3002\n\nPokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsAceHighStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsFlush(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n\n    init(cards: [Card]) {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            self = .highCard\n            return\n        }\n\n        let counts = PokerHand.countsBySameRank(cards: cards)\n\n        if counts == [2, 1, 1, 1] {\n            self = .onePair\n        }\n        else if counts == [2, 2, 1] {\n            self = .twoPair\n        }\n        else if counts == [3, 1, 1] {\n            self = .threeOfAKind\n        }\n        else if counts == [3, 2] {\n            self = .fullHouse\n        }\n        else if counts == [4, 1] {\n            self = .fourOfAKind\n        }\n        // \u30b3\u30b3\u2757\n        else if PokerHand.containsFlush(cards: cards) {\n            if PokerHand.containsAceHighStraight(cards: cards) {\n                self = .royalFlush\n            }\n            else if PokerHand.containsStraight(cards: cards) {\n                self = .straightFlush\n            }\n            else {\n                self = .flush\n            }\n        }\n        else if PokerHand.containsStraight(cards: cards) {\n            self = .straight\n        }\n        else {\n            self = .highCard\n        }\n    }\n}\n\n\n\u307e\u305a \u30b3\u30b3\u2757 \u307e\u3067\u5230\u9054\u3059\u308b\u306e\u306f\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u304c\u5168\u30661\u679a\u3001\u3064\u307e\u308a\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u624b\u672d\u306e\u3068\u304d\u3067\u3059\u3002\u3053\u3053\u304b\u3089\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u5834\u5408\u306f\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u30a8\u30fc\u30b9\u30cf\u30a4\u3067\u306a\u3044\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u306a\u3089\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3060\u3051\u306a\u3089\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u78ba\u5b9a\u3067\u304d\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u307e\u305a\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u306a\u3089\u30b9\u30c8\u30ec\u30fc\u30c8\u3068\u78ba\u5b9a\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3082\u30b9\u30c8\u30ec\u30fc\u30c8\u3082\u542b\u307e\u306a\u3044\u306e\u306a\u3089\ud83d\udc37\u3068\u78ba\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3067\u5f79\u5224\u5b9a\u306f\u5b8c\u6210\u3057\u305f\u306f\u305a\u3067\u3059\u3002\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u624b\u672d\u306b\u76f8\u5f53\u3059\u308b PokerHand \u306e\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002(\u4f8b\u3048\u3070\u30ef\u30f3\u30da\u30a2\u306e\u624b\u672d\u3067 PokerHand \u3092\u751f\u6210\u3059\u308b\u3068\u5217\u6319\u578b\u306e\u5024\u306f .onePair)\n\n\u30fe(\u0e51\u2579\u25e1\u2579)\uff89\u201d\u3044\u3048\u30fc\u3044\n\n\u30dd\u30fc\u30ab\u30fc\u306e\u5b9f\u88c5\n\u3084\u3063\u3068\u3060\u30fc\uff01\u3084\u3063\u3068\u30dd\u30fc\u30ab\u30fc\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002main.swift \u306b\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3088\u30fc\u3002\n\nmain.swift\nprint(\"\u30dd\u30fc\u30ab\u30fc\u3092\u59cb\u3081\u307e\u3059\u2757\")\n\nvar deck = Deck()\ndeck.shuffle()\n\nvar hand = Hand(cards: deck.draw(count: 5)!)\nprint()\nprint(\"\u3042\u306a\u305f\u306e\u624b\u672d: \", hand)\n\nprint()\nprint(\"\u4f55\u679a\u76ee\u306e\u624b\u672d\u3092\u4ea4\u63db\u3057\u307e\u3059\u304b\u2753(\u534a\u89d2\u6570\u5b57\u3001\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a)\")\nprint(\"(\u4ea4\u63db\u3057\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u5165\u529b\u305b\u305a\u306b\u30a8\u30f3\u30bf\u30fc)\")\n\n// \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4e0a\u3067\u5165\u529b\u5f85\u3061\u306b\u306a\u308a\u30a8\u30f3\u30bf\u30fc\u3092\u62bc\u3059\u307e\u3067\u505c\u6b62\u3059\u308b\nprint(\"> \", terminator: \"\")\nlet input = readLine(strippingNewline: true)\n\n// \u4f55\u304b\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u308c\u3070\u4ea4\u63db\u3067\u304d\u308b\u304b\u3082\nif let input = input, input.characters.count > 0 {\n\n    // \u4f55\u679a\u76ee\u306e\u30ab\u30fc\u30c9\u3092\u6368\u3066\u308b\u304b\u3092\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u4fdd\u5b58\n    var discardIndices: [Int] = []\n\n    // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3063\u305f\u914d\u5217\u3068\u3057\u305d\u308c\u305e\u308c\u898b\u3066\u3044\u304f\n    for separatedString in input.components(separatedBy: \" \") {\n\n        // Int\u306b\u5909\u63db\u3067\u304d\u3066\u30011\u4ee5\u4e0a5\u4ee5\u4e0b\u306e\u6570\u5b57\u306a\u3089\u8a31\u53ef\n        if let number = Int(separatedString), 1...5 ~= number {\n\n            // \u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u6271\u3046\u305f\u30811\u6e1b\u3089\u3057\u305f\u3082\u306e\u3092\u8ffd\u52a0\n            discardIndices.append(number - 1)\n        }\n    }\n\n    // \u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u91cd\u8907\u3092\u9664\u304f\n    discardIndices = Array(Set(discardIndices))\n\n    // \u7a7a\u3067\u306a\u3051\u308c\u3070\u624b\u672d\u3092\u4ea4\u63db\u3059\u308b\n    if !discardIndices.isEmpty {\n        hand.replace(\n            discardIndices: discardIndices,\n            newCards: deck.draw(count: discardIndices.count)!\n        )\n\n        print()\n        print(\"\u3042\u306a\u305f\u306e\u624b\u672d: \", hand)\n    }\n}\n\nprint()\nprint(PokerHand(cards: hand.cards), \"\u3067\u3057\u305f\u2757\")\nprint()\n\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u826f\u3044\u3067\u3057\u3087\u3046\u2757\n\u3055\u3063\u305d\u304f\u4f55\u56de\u304b\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u304a\u304a\n\n\u4ea4\u63db\u3057\u306a\u3044\u5834\u5408\u3082\u52d5\u3044\u3066\u3044\u305d\u3046\ud83d\ude03\n\n\u60dc\u3057\u3044\u3076\u30fc\ud83d\udc37\n\n\u03a3(\u30fb\u2200\u30fb\uff1b)\n\n\u304a\u308f\u308a\u306b\n\u524d\u534a\u3001\u5f8c\u534a(\u672c\u8a18\u4e8b)\u3068\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u7d14\u7c8b\u306a Swift 3 \u3092\u4f7f\u3063\u3066\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u52d5\u304f\u30dd\u30fc\u30ab\u30fc\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u30b8\u30e7\u30fc\u30ab\u30fc\u3092\u542b\u3093\u3067\u3044\u306a\u3044\u306e\u3067\u30dd\u30fc\u30ab\u30fc\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u53c2\u8003\u306b\u306a\u308b\u304b\u306f\u602a\u3057\u3044\u3068\u3053\u308d\u3067\u3059\u304c Swift 3 \u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308b\u306e\u304b\u301c\u3068\u3044\u3046\u7a7a\u6c17\u3060\u3051\u3067\u3082\u611f\u3058\u3066\u3082\u3089\u3048\u3066\u3044\u305f\u3089\u5b09\u3057\u3044\u3067\u3059\u3002\n\u307e\u305f\u3001\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30dd\u30fc\u30ab\u30fc\u306e\u5168\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub 131e55/PokerCLI \u306b\u3066\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3054\u89a7\u304f\u3060\u3055\u3044\ud83d\ude03\n\u3053\u308c\u3092\u304d\u3063\u304b\u3051\u306b Swift \u306b\u89e6\u308c\u3066\u307f\u3088\u3046\u304b\u306a\u3068\u3044\u3046\u4eba\u304c\u5897\u3048\u3066\u304f\u308c\u305f\u3089\u3044\u3044\u306a\u3041\u30fe(\u0e51\u2579\u25e1\u2579)\uff89\u201d\n\n\u304a\u307e\u3051\n\nomake.swift\nimport Foundation\n\nfunc omake() {\n    print(\"\u6700\u521d\u306e\u624b\u672d\u3067\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u51fa\u3059\u305e\u3044\")\n\n    var count = 1\n    var pokerHand = PokerHand.highCard\n    let start = Date().timeIntervalSince1970\n\n    while pokerHand != .royalFlush {\n\n        var deck = Deck()\n        deck.shuffle()\n\n        let hand = Hand(cards: deck.draw(count: 5)!)\n        pokerHand = PokerHand(cards: hand.cards)\n\n        let elapsed = (Date().timeIntervalSince1970 - start)\n        print(\"\\(count)\u56de\u76ee\u2757\", hand, pokerHand, \"(\\(elapsed) \u79d2\u7d4c\u904e)\")\n\n        count += 1\n    }\n\n    print(\"\u6700\u521d\u306e\u624b\u672d\u3067\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u51fa\u3057\u305f\u305e\u3044\u2757\")\n    print()\n}\n\n\n\n\n# \u30dd\u30fc\u30ab\u30fc\u4f5c\u308a\u3067 Swift 3 \u306e\u7a7a\u6c17\u3092\u611f\u3058\u308b(\u5f8c\u534a)\n</br>\n\n\u26c4\ud83c\udf84\ud83c\udf81\ud83c\udf82\ud83c\udf85\ud83c\udf82\ud83c\udf81\ud83c\udf84\u26c4\n\u3081\u308a\u30fc\u3055\u3093\u305f\u3055\u3093\u2757\n</br>\n\n\u3053\u3093\u306b\u3061\u306f [Liaro](http://company.liaro.me) \u306e [131e55](https://twitter.com/131e55) \u3067\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[\u524d\u534a](http://qiita.com/131e55/items/ed45a68f94d09c0e793a)\u304b\u3089\u306e\u7d9a\u304d\u306e\u3082\u306e\u3067\u3001Swift 3 \u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4e0a\u3067\u52d5\u304f\u7c21\u5358\u306a\u30dd\u30fc\u30ab\u30fc\u3092\u4f5c\u308b\u6d41\u308c\u3092\u66f8\u3044\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001[Swift \u305d\u306e2 Advent Calendar 2016](http://qiita.com/advent-calendar/2016/swift2)\u306e25\u65e5\u76ee\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\u30c8\u30ea\u306b\u3057\u3066\u306f\u306a\u3041\u611f\u304c\u3042\u308b\u8a18\u4e8b\u3067\u3059\u304c\u305d\u306e2\u3060\u3057\u3044\u3063\u304b\u3068\u3044\u3046\u8efd\u3044\u6c17\u6301\u3061\u3067\u66f8\u304d\u307e\u3059(\u3066\u3078)\n\n# \u958b\u767a\u74b0\u5883\n\n- Swift 3.0.1\n- Xcode 8.1\n- macOS 10.12.1\n\n# \u958b\u767a\u306e\u6d41\u308c\n\n\u4ee5\u4e0b\u306e\u6d41\u308c\u3067\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u9805\u76ee1\u304b\u30897\u306f[\u524d\u534a](http://qiita.com/131e55/items/ed45a68f94d09c0e793a)\u3067\u7d42\u3048\u3066\u3044\u307e\u3059\u306e\u3067\u4eca\u56de\u306f\u9805\u76ee8\u304b\u3089\u3068\u306a\u308a\u307e\u3059\u3002\n\n1. Xcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 (\u524d\u534a)\n1. \u30ab\u30fc\u30c9\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53 (\u524d\u534a)\n1. \u30ab\u30fc\u30c9\u306e\u8868\u793a (\u524d\u534a)\n1. \u30ab\u30fc\u30c9\u306e\u6bd4\u8f03 (\u524d\u534a)\n1. \u5c71\u672d\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53 (\u524d\u534a)\n1. \u624b\u672d\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53 (\u524d\u534a)\n1. \u5f79\u3092\u7ba1\u7406\u3059\u308b\u5217\u6319\u578b (\u524d\u534a)\n1. \u5f79\u5224\u5b9a\u306e\u5b9f\u88c5\n1. \u30dd\u30fc\u30ab\u30fc\u306e\u5b9f\u88c5\n\n\u3067\u306f\u5f79\u5224\u5b9a\u306e\u5b9f\u88c5\u304b\u3089\u2757\n\n# \u5f79\u5224\u5b9a\u306e\u5b9f\u88c5\n\n\u5f79\u5224\u5b9a\u3092\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u3001\u3068\u308a\u3042\u3048\u305a\u5404\u5f79\u306e\u95a2\u4fc2\u3092\u6574\u7406\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3058\u3083\u3093\u3002\n\n<img width=\"450\" alt=\"PokerHands.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/a9077b31-7bd1-4e15-bcec-b251c74ce28c.png\">\n\n\u56f3\u304b\u3089\u3001\u30dd\u30fc\u30ab\u30fc\u306e\u5f79\u306f\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u300d\u3068\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u306e\u3075\u305f\u3064\u306b\u5206\u985e\u3067\u304d\u3001\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u306f\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8(A, K, Q, J, 10 \u306b\u3088\u308b\u30b9\u30c8\u30ec\u30fc\u30c8)\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u306e3\u3064\u3092\u5224\u5b9a\u3067\u304d\u308c\u3070\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u30674\u3064\u5168\u3066\u3092\u5224\u5b9a\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u5bfe\u3057\u3066\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u300d\u306f\u4ee5\u4e0b\u306e\u8868\u306e\u3088\u3046\u306b\u3001\u624b\u672d\u3092\u540c\u3058\u30e9\u30f3\u30af\u5225\u306b\u5206\u3051\u3066\u305d\u308c\u305e\u308c\u306e\u679a\u6570\u3092\u898b\u308c\u3070\u5224\u5b9a\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n<a name=\"table_SameRankHands\"></a>\n\n|\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79|\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570|\u4f8b|\n|:--|:--|:--|\n|\u30d5\u30a9\u30fc\u30ab\u30fc\u30c9|4, 1|[\u2663\ufe0fA \u2666\ufe0fA \u2665\ufe0fA \u2660\ufe0fA] [\u2665\ufe0fK]|\n|\u30d5\u30eb\u30cf\u30a6\u30b9|3, 2|[\u2663\ufe0fA \u2666\ufe0fA \u2665\ufe0fA] [\u2660\ufe0f2 \u2665\ufe0f2]|\n|\u30b9\u30ea\u30fc\u30ab\u30fc\u30c9|3, 1, 1|[\u2663\ufe0fA \u2666\ufe0fA \u2665\ufe0fA] [\u2660\ufe0f2] [\u2665\ufe0fK]|\n|\u30c4\u30fc\u30da\u30a2|2, 2, 1|[\u2663\ufe0fA \u2666\ufe0fA] [\u2665\ufe0f2 \u2660\ufe0f2] [\u2665\ufe0fK]|\n|\u30ef\u30f3\u30da\u30a2|2, 1, 1, 1|[\u2663\ufe0fA \u2666\ufe0fA] [\u2665\ufe0f2] [\u2660\ufe0f3] [\u2665\ufe0fK]|\n\n\u3068\u3001\u8a00\u3046\u308f\u3051\u3067\u3001\u5f79\u5224\u5b9a\u5b9f\u88c5\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u9806\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n- \u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u306e\u53d6\u5f97\n- \u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u306e\u5224\u5b9a\n- \u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n- \u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n- \u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n- \u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u306e\u5224\u5b9a\n\n\u5f79\u5224\u5b9a\u306b\u95a2\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3061\u3083\u3093\u3068\u52d5\u304f\u306e\u304b\u602a\u3057\u3044\u306e\u3067\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u4eca\u307e\u3067\u306b\u4f5c\u6210\u3057\u305f `Suit.swift`\u3001`Rank.swift`\u3001`Card.swift`\u3001`PokerHand.swift` \u3092 `PokerCLITests` \u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u305d\u308c\u305e\u308c\u30c1\u30a7\u30c3\u30af\u3092\u3044\u308c\u307e\u3059\u3002(\u56f3\u306e\u4e00\u756a\u4e0b)\n\n<img width=\"264\" alt=\"\u30c6\u30b9\u30c8\u6e96\u5099.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/03a01708-a3f2-92c9-9e4a-8c2f1b25c33c.png\">\n\n## \u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u306e\u53d6\u5f97\n\n\u3067\u306f\u307e\u305a\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u306e\u53d6\u5f97\u304b\u3089\u3067\u3059\u3002 `PokerHand` \u5217\u6319\u578b\u306b `static` \u306a\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```swift:PokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n\n    // \u30b3\u30b3\u2757\n    static func countsBySameRank(cards: [Card]) -> [Int] {\n        // \u30ab\u30fc\u30c9\u304c\u4f55\u679a\u304b\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard !cards.isEmpty else {\n            return [0]\n        }\n\n        var cards = cards\n        var counts: [Int] = []\n\n        // 1\u679a\u76ee\u304b\u3089\u9806\u306b\u305d\u306e\u30ab\u30fc\u30c9\u3068\u540c\u3058\u30e9\u30f3\u30af\u306e\u30ab\u30fc\u30c9\u3092\u624b\u672d\u304b\u3089\u62bd\u51fa\u3057\u679a\u6570\u3092\u6570\u3048\u3066\u3044\u304f\n        // \u62bd\u51fa\u3055\u308c\u305f\u30ab\u30fc\u30c9\u306f\u624b\u672d\u304b\u3089\u9664\u3044\u3066\u3044\u304d\u624b\u672d\u304c\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u308f\u308a\n        while !cards.isEmpty {\n            let card = cards.first!\n            let sameRankCards = cards.filter({ $0.rank == card.rank })\n            cards = cards.filter({ $0.rank != card.rank })\n            counts.append(sameRankCards.count)\n        }\n\n        // \u964d\u9806\u306b\u30bd\u30fc\u30c8\n        counts.sort(by: { $0 > $1 })\n\n        return counts\n    }\n\n\n    init(cards: [Card]) { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n}\n```\n\n\u82f1\u8a9e\u304c\u5408\u3063\u3066\u308b\u304b\u5fae\u5999\u3067\u3059\u304c `PokerHand.countsBySameRank(cards: [Card]) -> [Int]` \u3068\u5b9a\u7fa9\u3057\u3001\u6e21\u3055\u308c\u305f5\u679a\u306e\u30ab\u30fc\u30c9\u306e\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u3092\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u7c21\u5358\u306b\u3001\u5168\u3066\u306e\u5f79\u306e\u624b\u672d\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u3001`PokerHand.countsBySameRank(cards: [Card]) -> [Int]` \u304c\u671f\u5f85\u901a\u308a\u306b\u52d5\u304f\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u300d\u306f[\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u306e\u5404\u679a\u6570](#table_SameRankHands)\u306e\u901a\u308a\u306b\u3001\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u3068\ud83d\udc37\u306f `[1, 1, 1, 1, 1]` \u3068\u306a\u3063\u3066\u307b\u3057\u3044\u3067\u3059\u3002\n\n```swift:PokerCLITests.swift\nimport XCTest\n@testable import PokerCLI\n\nclass PokerCLITests: XCTestCase {\n\n    // \u30b3\u30b3\u2757\n    \n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f J||\u2666\ufe0f 3||\u2665\ufe0f Q| \ud83d\udc37\u624b\u672d\n    let highCardCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .jack), Card(suit: .diamond, rank: .three), Card(suit: .heart, rank: .queen)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f 3||\u2665\ufe0f Q| \u30ef\u30f3\u30da\u30a2\u624b\u672d\n    let onePairCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .three), Card(suit: .heart, rank: .queen)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f 2||\u2665\ufe0f Q| \u30c4\u30fc\u30da\u30a2\u624b\u672d\n    let twoPairCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .two), Card(suit: .heart, rank: .queen)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f A||\u2665\ufe0f Q| \u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\u624b\u672d\n    let threeOfAKindCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .ace), Card(suit: .heart, rank: .queen)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f 3||\u2666\ufe0f 4||\u2665\ufe0f 5] \u30b9\u30c8\u30ec\u30fc\u30c8\u624b\u672d\n    let straightCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .three), Card(suit: .diamond, rank: .four), Card(suit: .heart, rank: .five)]\n    // |\u2663\ufe0f A||\u2663\ufe0f10||\u2665\ufe0f J||\u2666\ufe0f Q||\u2665\ufe0f K| \u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u624b\u672d\n    let aceHighStraightCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .ten), Card(suit: .heart, rank: .jack), Card(suit: .diamond, rank: .queen), Card(suit: .heart, rank: .king)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 3||\u2663\ufe0f 5||\u2663\ufe0f J||\u2663\ufe0f K| \u30d5\u30e9\u30c3\u30b7\u30e5\u624b\u672d\n    let flushCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .three), Card(suit: .club, rank: .jack), Card(suit: .club, rank: .four), Card(suit: .club, rank: .king)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f A||\u2665\ufe0f 2| \u30d5\u30eb\u30cf\u30a6\u30b9\u624b\u672d\n    let fullHouseCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .ace), Card(suit: .heart, rank: .two)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2665\ufe0f A||\u2666\ufe0f A||\u2660\ufe0f A| \u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\u624b\u672d\n    let fourOfAKindCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .heart, rank: .ace), Card(suit: .diamond, rank: .ace), Card(suit: .spade, rank: .ace)]\n    // |\u2663\ufe0f A||\u2663\ufe0f 2||\u2663\ufe0f 3||\u2663\ufe0f 4||\u2663\ufe0f 5| \u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u624b\u672d\n    let straightFlushCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .two), Card(suit: .club, rank: .three), Card(suit: .club, rank: .four), Card(suit: .club, rank: .five)]\n    // |\u2663\ufe0f A||\u2663\ufe0f10||\u2663\ufe0f J||\u2663\ufe0f Q||\u2663\ufe0f K| \u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u624b\u672d\n    let royalFlushCards = [Card(suit: .club, rank: .ace), Card(suit: .club, rank: .ten), Card(suit: .club, rank: .jack), Card(suit: .club, rank: .queen), Card(suit: .club, rank: .king)]\n\n    override func setUp() { /* \u7701\u7565 */ }\n    override func tearDown() { /* \u7701\u7565 */ }\n\n    // \u30b3\u30b3\u2757\n    func testCountsBySameRank() {\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: highCardCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: onePairCards), [2, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: twoPairCards), [2, 2, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: threeOfAKindCards), [3, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: straightCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: aceHighStraightCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: flushCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: fullHouseCards), [3, 2])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: fourOfAKindCards), [4, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: straightFlushCards), [1, 1, 1, 1, 1])\n        XCTAssertEqual(PokerHand.countsBySameRank(cards: royalFlushCards), [1, 1, 1, 1, 1])\n    }\n}\n\n```\n\n\u3067\u306f\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u3066\u307f\u307e\u3059\u3002\n\n<img width=\"600\" alt=\"\u30c6\u30b9\u30c8\u7d50\u679c.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/af61c239-a647-7119-f4fc-4c90823e5a74.png\">\n\n\u5de6\u4e0a\u306b\u3000`\u2705` \u304c\u3064\u3044\u3066\u3044\u308b\u306e\u3067\u30c6\u30b9\u30c8\u304c\u901a\u308a\u307e\u3057\u305f\u3002\u96d1\u306a\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u3059\u304c\u3001`PokerHand.countsBySameRank(cards: [Card]) -> [Int]` \u306f\u3068\u308a\u3042\u3048\u305a\u671f\u5f85\u3069\u304a\u308a\u306b\u52d5\u3044\u3066\u3044\u305d\u3046\u3067\u3059\u3002\u3053\u306e\u6d41\u308c\u3067\u4ed6\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u9577\u304f\u306a\u308b\u306e\u3067\u4ee5\u964d\u306f\u30c6\u30b9\u30c8\u7d50\u679c\u306e\u307f\u8f09\u305b\u307e\u3059\u3002\n\n## \u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u306e\u5224\u5b9a\n\n\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u306e\u53d6\u5f97\u304c\u3067\u304d\u305f\u3089\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u3080\u5f79\u300d\u3067\u3042\u308b\u30ef\u30f3\u30da\u30a2\u3001\u30c4\u30fc\u30da\u30a2\u3001\u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\u3001\u30d5\u30eb\u30cf\u30a6\u30b9\u3001\u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\u306f\u5168\u3066\u78ba\u5b9a\u3067\u304d\u307e\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u308c\u3089\u306e\u5f79\u306e\u5224\u5b9a\u3092 `PokerHand` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf `init` \u306b\u8ffd\u8a18\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n```swift:PokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n   \n    init(cards: [Card]) {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            self = .highCard\n            return\n        }\n\n        // \u30b3\u30b3\u2757\n        let counts = PokerHand.countsBySameRank(cards: cards)\n\n        if counts == [2, 1, 1, 1] {\n            self = .onePair\n        }\n        else if counts == [2, 2, 1] {\n            self = .twoPair\n        }\n        else if counts == [3, 1, 1] {\n            self = .threeOfAKind\n        }\n        else if counts == [3, 2] {\n            self = .fullHouse\n        }\n        else if counts == [4, 1] {\n            self = .fourOfAKind\n        }\n        else {\n            self = .highCard\n        }\n    }\n}\n```\n\n(\u00b4-\\`).\uff61oO( `switch` \u3067\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u306b\u914d\u5217\u3067\u306f\u3067\u304d\u306a\u3044\u69d8\u5b50\u2753\u8ab0\u304b\u6559\u3048\u3066\u304f\u3060\u3055\u3044...)\n\n## \u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\n\u3053\u3053\u304b\u3089\u306f\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u306e\u5224\u5b9a\u3067\u3059\u3002\n\n\u307e\u305a\u306f\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u5358\u7d14\u306a\u30b9\u30c8\u30ec\u30fc\u30c8\u306e\u5224\u5b9a\u306f\u624b\u672d\u304c\u9023\u756a\u304b\u3069\u3046\u304b\u3092\u898b\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u304c `A, K, Q, J, 10` \u306e\u5834\u5408\u306f `A` \u304c\u3061\u3087\u3063\u3068\u90aa\u9b54\u306a\u306e\u3067\u5358\u7d14\u306b\u3053\u306e5\u3064\u5168\u3066\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```swift:PokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    \n    // \u30b3\u30b3\u2757\n    static func containsAceHighStraight(cards: [Card]) -> Bool {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            return false\n        }\n\n        // \u30e9\u30f3\u30af\u306e\u964d\u9806\u306b\u30bd\u30fc\u30c8\n        let cards = cards.sorted { $0.rank.rawValue > $1.rank.rawValue }\n\n        // K, Q, J, 10, A \u306a\u3089\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u3002\u9055\u3046\u306a\u3089\u542b\u307e\u306a\u3044\u3002\n        if cards[0].rank == .king\n            && cards[1].rank == .queen\n            && cards[2].rank == .jack\n            && cards[3].rank == .ten\n            && cards[4].rank == .ace {\n\n            return true\n        }\n        \n        return false\n    }\n    \n    init(cards: [Card]) { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n}\n```\n\n\u6e21\u3055\u308c\u305f\u30ab\u30fc\u30c95\u679a\u306b\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u306e\u5f79\u3092\u542b\u3080\u306a\u3089 `true`\u3001\u542b\u307e\u306a\u3044\u306a\u3089 `false` \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u5f79\u306f\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n<img width=\"600\" alt=\"AceHighStraight\u30c6\u30b9\u30c8\u7d50\u679c\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/a6f3978b-4797-2c6c-3598-c7ad931c819b.png\">\n\n## \u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\n\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3068\u306a\u3089\u306a\u3044\u30b9\u30c8\u30ec\u30fc\u30c8\u306e\u5224\u5b9a\u306f\u5358\u7d14\u306b\u9023\u756a\u306b\u306a\u308b\u304b\u3092\u898b\u308c\u3070\u826f\u3044\u3067\u3059\u306d\u3002\n\n```swift:PokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsAceHighStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    \n    // \u30b3\u30b3\u2757\n    static func containsStraight(cards: [Card]) -> Bool {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            return false\n        }\n\n        // \u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3060\u3063\u305f\u3089\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u3068\u3057\u3066\u7d42\u4e86\u3002\n        if PokerHand.containsAceHighStraight(cards: cards) {\n            return true\n        }\n\n        // \u30e9\u30f3\u30af\u306e\u964d\u9806\u306b\u30bd\u30fc\u30c8\n        let cards = cards.sorted { $0.rank.rawValue > $1.rank.rawValue }\n\n        // 1\u679a\u76ee\u304b\u30894\u679a\u76ee\u307e\u3067\u305d\u308c\u305e\u308c\u6ce8\u76ee\u3057\u3066\u3044\u304f\u3002\n        // \u5168\u3066\u300c\u6ce8\u76ee\u3057\u305f\u30ab\u30fc\u30c9\u306e\u6570\u5b57\u304c\u6b21\u306e\u30ab\u30fc\u30c9\u306e\u6570\u5b57\u306e\uff11\u5927\u304d\u3044\u6570\u300d\u306a\u3089\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u3002\n        // \u9055\u3046\u306a\u3089\u542b\u307e\u306a\u3044\u3002\n        for i in 0..<cards.count - 1 {\n            if cards[i].rank.rawValue == cards[i + 1].rank.rawValue + 1 {\n                continue\n            }\n\n            return false\n        }\n\n        return true\n    }\n    \n    init(cards: [Card]) { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n}\n```\n\n\u3082\u3063\u3068\u4e0a\u624b\u3044\u65b9\u6cd5\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u304c\u3001\u9023\u756a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u306e\u5834\u5408\u3082\u30b9\u30c8\u30ec\u30fc\u30c8\u306a\u306e\u3067\u3001\u5148\u306b\u4f5c\u3063\u305f `PokerHand.containsAceHighStraight(cards: [Card]) -> Bool` \u3092\u4f7f\u3063\u3066\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u5f79\u306f\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n<img width=\"600\" alt=\"Straight\u30c6\u30b9\u30c8\u7d50\u679c\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/348f6122-cd26-80c0-26c7-5231fa2fcb2e.png\">\n\n## \u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n\n\u542b\u3080\u304b\u3069\u3046\u304b\u5224\u5b9a\u6700\u5f8c\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u5224\u5b9a\u3044\u304d\u307e\u3059\u3002\u5f79\u5224\u5b9a\u306e\u4e2d\u3067\u4e00\u756a\u7c21\u5358\u305d\u3046\u3067\u3059\u3002\n\n```swift:PokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsAceHighStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    \n    // \u30b3\u30b3\u2757\n    static func containsFlush(cards: [Card]) -> Bool {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            return false\n        }\n\n        // 1\u679a\u76ee\u306e\u30b9\u30fc\u30c8\u3092\u7528\u610f\u3057\u3001\u624b\u672d\u304b\u3089\u305d\u306e\u30b9\u30fc\u30c8\u3068\u540c\u3058\u30b9\u30fc\u30c8\u3092\u6301\u3064\u30ab\u30fc\u30c9\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\n        // \u624b\u672d\u306e\u679a\u6570\u3068\u540c\u3058\u306a\u3089\u5168\u90e8\u540c\u3058\u30b9\u30fc\u30c8\u306a\u306e\u3067\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u3002\u9055\u3046\u306a\u3089\u542b\u307e\u306a\u3044\u3002\n        let suit = cards[0].suit\n        return cards.filter({ $0.suit == suit }).count == cards.count\n    }\n    \n    init(cards: [Card]) { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n}\n```\n\n1\u679a\u76ee\u306e\u30b9\u30fc\u30c8\u3068\u540c\u3058\u30b9\u30fc\u30c8\u3092\u6301\u3064\u30ab\u30fc\u30c9\u3092\u62bd\u51fa\u3057\u3066\u3001\u5143\u306e\u624b\u672d\u306e\u6570\u3068\u540c\u3058\u306a\u3089\u5168\u90e8\u540c\u3058\u30b9\u30fc\u30c8\u3067\u3057\u3087\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u5f79\u306f\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n<img width=\"600\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-05 18.06.49.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/9650f6d5-894d-548a-6208-736f09c4a531.png\">\n\n## \u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u306e\u5224\u5b9a\n\n\u3053\u3053\u307e\u3067\u3067\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u300c\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u5f79\u300d\u3067\u3042\u308b\u30b9\u30c8\u30ec\u30fc\u30c8\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u5168\u3066\u78ba\u5b9a\u3067\u304d\u307e\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u308c\u3089\u306e\u5f79\u306e\u5224\u5b9a\u3092 `PokerHand` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf `init` \u306b\u8ffd\u8a18\u3057\u3066\u5f79\u5224\u5b9a\u3092\u5b8c\u6210\u3055\u305b\u307e\u3057\u3087\u3046\u3002\n\n```swift:PokerHand.swift\nenum PokerHand: CustomStringConvertible {\n\n    case highCard\n    /* \u9577\u3044\u306e\u3067\u7701\u7565 */\n    case royalFlush\n\n    var description: String { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func countsBySameRank(cards: [Card]) -> [Int] { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsAceHighStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsStraight(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n    static func containsFlush(cards: [Card]) -> Bool { /* \u9577\u3044\u306e\u3067\u7701\u7565 */ }\n\n    init(cards: [Card]) {\n        // \u30ab\u30fc\u30c9\u304c5\u679a\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\n        guard cards.count == 5 else {\n            self = .highCard\n            return\n        }\n\n        let counts = PokerHand.countsBySameRank(cards: cards)\n\n        if counts == [2, 1, 1, 1] {\n            self = .onePair\n        }\n        else if counts == [2, 2, 1] {\n            self = .twoPair\n        }\n        else if counts == [3, 1, 1] {\n            self = .threeOfAKind\n        }\n        else if counts == [3, 2] {\n            self = .fullHouse\n        }\n        else if counts == [4, 1] {\n            self = .fourOfAKind\n        }\n        // \u30b3\u30b3\u2757\n        else if PokerHand.containsFlush(cards: cards) {\n            if PokerHand.containsAceHighStraight(cards: cards) {\n                self = .royalFlush\n            }\n            else if PokerHand.containsStraight(cards: cards) {\n                self = .straightFlush\n            }\n            else {\n                self = .flush\n            }\n        }\n        else if PokerHand.containsStraight(cards: cards) {\n            self = .straight\n        }\n        else {\n            self = .highCard\n        }\n    }\n}\n```\n\n\u307e\u305a `\u30b3\u30b3\u2757` \u307e\u3067\u5230\u9054\u3059\u308b\u306e\u306f\u540c\u3058\u30e9\u30f3\u30af\u5225\u306e\u679a\u6570\u304c\u5168\u30661\u679a\u3001\u3064\u307e\u308a\u540c\u3058\u30e9\u30f3\u30af\u3092\u542b\u307e\u306a\u3044\u624b\u672d\u306e\u3068\u304d\u3067\u3059\u3002\u3053\u3053\u304b\u3089\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u30a8\u30fc\u30b9\u30cf\u30a4\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u5834\u5408\u306f\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u30a8\u30fc\u30b9\u30cf\u30a4\u3067\u306a\u3044\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u306a\u3089\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3060\u3051\u306a\u3089\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u78ba\u5b9a\u3067\u304d\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u542b\u307e\u305a\u30b9\u30c8\u30ec\u30fc\u30c8\u3092\u542b\u3080\u306a\u3089\u30b9\u30c8\u30ec\u30fc\u30c8\u3068\u78ba\u5b9a\u3001\u30d5\u30e9\u30c3\u30b7\u30e5\u3082\u30b9\u30c8\u30ec\u30fc\u30c8\u3082\u542b\u307e\u306a\u3044\u306e\u306a\u3089\ud83d\udc37\u3068\u78ba\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u5f79\u5224\u5b9a\u306f\u5b8c\u6210\u3057\u305f\u306f\u305a\u3067\u3059\u3002\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u624b\u672d\u306b\u76f8\u5f53\u3059\u308b `PokerHand` \u306e\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002(\u4f8b\u3048\u3070\u30ef\u30f3\u30da\u30a2\u306e\u624b\u672d\u3067 `PokerHand` \u3092\u751f\u6210\u3059\u308b\u3068\u5217\u6319\u578b\u306e\u5024\u306f `.onePair`)\n\n<img width=\"898\" alt=\"PokerHand\u30c6\u30b9\u30c8\u7d50\u679c.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/5bf41992-d61e-d1fb-c93f-6c32f438a72e.png\">\n\n\u30fe(\u0e51\u2579\u25e1\u2579)\uff89\u201d\u3044\u3048\u30fc\u3044\n\n# \u30dd\u30fc\u30ab\u30fc\u306e\u5b9f\u88c5\n\n\u3084\u3063\u3068\u3060\u30fc\uff01\u3084\u3063\u3068\u30dd\u30fc\u30ab\u30fc\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002`main.swift` \u306b\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3088\u30fc\u3002\n\n```swift:main.swift\nprint(\"\u30dd\u30fc\u30ab\u30fc\u3092\u59cb\u3081\u307e\u3059\u2757\")\n\nvar deck = Deck()\ndeck.shuffle()\n\nvar hand = Hand(cards: deck.draw(count: 5)!)\nprint()\nprint(\"\u3042\u306a\u305f\u306e\u624b\u672d: \", hand)\n\nprint()\nprint(\"\u4f55\u679a\u76ee\u306e\u624b\u672d\u3092\u4ea4\u63db\u3057\u307e\u3059\u304b\u2753(\u534a\u89d2\u6570\u5b57\u3001\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a)\")\nprint(\"(\u4ea4\u63db\u3057\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u5165\u529b\u305b\u305a\u306b\u30a8\u30f3\u30bf\u30fc)\")\n\n// \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4e0a\u3067\u5165\u529b\u5f85\u3061\u306b\u306a\u308a\u30a8\u30f3\u30bf\u30fc\u3092\u62bc\u3059\u307e\u3067\u505c\u6b62\u3059\u308b\nprint(\"> \", terminator: \"\")\nlet input = readLine(strippingNewline: true)\n\n// \u4f55\u304b\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u308c\u3070\u4ea4\u63db\u3067\u304d\u308b\u304b\u3082\nif let input = input, input.characters.count > 0 {\n\n    // \u4f55\u679a\u76ee\u306e\u30ab\u30fc\u30c9\u3092\u6368\u3066\u308b\u304b\u3092\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u4fdd\u5b58\n    var discardIndices: [Int] = []\n\n    // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3063\u305f\u914d\u5217\u3068\u3057\u305d\u308c\u305e\u308c\u898b\u3066\u3044\u304f\n    for separatedString in input.components(separatedBy: \" \") {\n\n        // Int\u306b\u5909\u63db\u3067\u304d\u3066\u30011\u4ee5\u4e0a5\u4ee5\u4e0b\u306e\u6570\u5b57\u306a\u3089\u8a31\u53ef\n        if let number = Int(separatedString), 1...5 ~= number {\n\n            // \u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u6271\u3046\u305f\u30811\u6e1b\u3089\u3057\u305f\u3082\u306e\u3092\u8ffd\u52a0\n            discardIndices.append(number - 1)\n        }\n    }\n\n    // \u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u91cd\u8907\u3092\u9664\u304f\n    discardIndices = Array(Set(discardIndices))\n\n    // \u7a7a\u3067\u306a\u3051\u308c\u3070\u624b\u672d\u3092\u4ea4\u63db\u3059\u308b\n    if !discardIndices.isEmpty {\n        hand.replace(\n            discardIndices: discardIndices,\n            newCards: deck.draw(count: discardIndices.count)!\n        )\n\n        print()\n        print(\"\u3042\u306a\u305f\u306e\u624b\u672d: \", hand)\n    }\n}\n\nprint()\nprint(PokerHand(cards: hand.cards), \"\u3067\u3057\u305f\u2757\")\nprint()\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u826f\u3044\u3067\u3057\u3087\u3046\u2757\n\n\u3055\u3063\u305d\u304f\u4f55\u56de\u304b\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n<img width=\"350\" alt=\"PokerCLI\u5b9f\u884c1.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/12417ae1-bffa-ffb4-108c-06e110504931.png\">\n\n\u304a\u304a\n\n<img width=\"350\" alt=\"PokerCLI\u5b9f\u884c2.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/97b10fb6-e16e-6b51-4e34-5983e2733155.png\">\n\n\u4ea4\u63db\u3057\u306a\u3044\u5834\u5408\u3082\u52d5\u3044\u3066\u3044\u305d\u3046\ud83d\ude03\n\n<img width=\"350\" alt=\"PokerCLI\u5b9f\u884c3.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/98da8cee-e924-0e2e-ffe0-8b9c7834dc05.png\">\n\n\u60dc\u3057\u3044\u3076\u30fc\ud83d\udc37\n\n<img width=\"350\" alt=\"PokerCLI\u5b9f\u884c4.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/3e0e0019-1b69-67c1-4bd6-d8a69d95ccb0.png\">\n\n\u03a3(\u30fb\u2200\u30fb\uff1b)\n\n# \u304a\u308f\u308a\u306b\n\n[\u524d\u534a](http://qiita.com/131e55/items/ed45a68f94d09c0e793a)\u3001\u5f8c\u534a(\u672c\u8a18\u4e8b)\u3068\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u7d14\u7c8b\u306a Swift 3 \u3092\u4f7f\u3063\u3066\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u52d5\u304f\u30dd\u30fc\u30ab\u30fc\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u30b8\u30e7\u30fc\u30ab\u30fc\u3092\u542b\u3093\u3067\u3044\u306a\u3044\u306e\u3067\u30dd\u30fc\u30ab\u30fc\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u53c2\u8003\u306b\u306a\u308b\u304b\u306f\u602a\u3057\u3044\u3068\u3053\u308d\u3067\u3059\u304c Swift 3 \u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308b\u306e\u304b\u301c\u3068\u3044\u3046\u7a7a\u6c17\u3060\u3051\u3067\u3082\u611f\u3058\u3066\u3082\u3089\u3048\u3066\u3044\u305f\u3089\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30dd\u30fc\u30ab\u30fc\u306e\u5168\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub [131e55/PokerCLI](https://github.com/131e55/PokerCLI) \u306b\u3066\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3054\u89a7\u304f\u3060\u3055\u3044\ud83d\ude03\n\n\u3053\u308c\u3092\u304d\u3063\u304b\u3051\u306b Swift \u306b\u89e6\u308c\u3066\u307f\u3088\u3046\u304b\u306a\u3068\u3044\u3046\u4eba\u304c\u5897\u3048\u3066\u304f\u308c\u305f\u3089\u3044\u3044\u306a\u3041\u30fe(\u0e51\u2579\u25e1\u2579)\uff89\u201d\n\n# \u304a\u307e\u3051\n\n```swift:omake.swift\nimport Foundation\n\nfunc omake() {\n    print(\"\u6700\u521d\u306e\u624b\u672d\u3067\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u51fa\u3059\u305e\u3044\")\n\n    var count = 1\n    var pokerHand = PokerHand.highCard\n    let start = Date().timeIntervalSince1970\n\n    while pokerHand != .royalFlush {\n\n        var deck = Deck()\n        deck.shuffle()\n\n        let hand = Hand(cards: deck.draw(count: 5)!)\n        pokerHand = PokerHand(cards: hand.cards)\n\n        let elapsed = (Date().timeIntervalSince1970 - start)\n        print(\"\\(count)\u56de\u76ee\u2757\", hand, pokerHand, \"(\\(elapsed) \u79d2\u7d4c\u904e)\")\n\n        count += 1\n    }\n\n    print(\"\u6700\u521d\u306e\u624b\u672d\u3067\u30ed\u30a4\u30e4\u30eb\u30b9\u30c8\u30ec\u30fc\u30c8\u30d5\u30e9\u30c3\u30b7\u30e5\u3092\u51fa\u3057\u305f\u305e\u3044\u2757\")\n    print()\n}\n```\n\n<img width=\"500\" alt=\"omake1\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/68a8094b-65c6-cf6c-7ca9-351e6d860946.png\">\n\n<img width=\"500\" alt=\"omake2\" src=\"https://qiita-image-store.s3.amazonaws.com/0/104039/7e824b0a-d9b5-93f3-b2f9-65968d519283.png\">\n", "tags": ["Swift", "Swift3.0", "MacOSX", "Xcode", "Poker"]}