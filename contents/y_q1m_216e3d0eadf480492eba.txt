{"context": "\n\n\u6982\u8981\n\u81ea\u4f5c\u306e\u30c4\u30fc\u30eb\u3067\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\u969b\u3001 Reactive Extensions \u306b RxJava \u3068 Reactor Core \u306e\u3069\u3061\u3089\u3092\u4f7f\u3046\u304b\u691c\u8a0e\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u3001\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u306e JMH \u3092 Gradle \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u4f7f\u3044\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u306e\u7528\u9014\u3067\u306f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u7d50\u679c\u306b\u5927\u5dee\u304c\u306a\u304f\u3001\u597d\u304d\u306a\u65b9\u3092\u4f7f\u3048\u3070\u3088\u3044\u3068\u5224\u65ad\u3059\u308b\u306b\u81f3\u308a\u307e\u3057\u305f\u3002\n\u6c17\u306b\u306a\u308b\u70b9\u3084\u8aa4\u3063\u3066\u3044\u308b\u7b87\u6240\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3001\u30b3\u30e1\u30f3\u30c8\u3084\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5f62\u3067\u304a\u5bc4\u305b\u304f\u3060\u3055\u3044\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u60f3\u5b9a\u8aad\u8005\nGradle \u3092\u4f7f\u3063\u3066 JMH \u3067\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3057\u305f\u3044\u304c\u3001\u307e\u3060\u3084\u3063\u305f\u3053\u3068\u306e\u306a\u3044 Java \u958b\u767a\u8005\n\n\u3053\u306e\u8a18\u4e8b\u3067\u89e6\u308c\u308b\u3053\u3068\nJMH \u3092 Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f7f\u3063\u3066\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\n\n\u3053\u306e\u8a18\u4e8b\u3067\u89e6\u308c\u306a\u3044\u3053\u3068\n\nReactive Extensions \u306e\u610f\u7fa9\u3084\u305d\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\nGradle \u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\nMaven \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306e JMH \u5229\u7528\u306b\u3064\u3044\u3066\n\n\n\n\u80cc\u666f\nRxJava \u3067\u5b9f\u88c5\u3057\u305f\u51e6\u7406\u306b\u5bfe\u3057\u3001\u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 RxJava \u304b\u3089 Reactor Core \u306b\u5909\u66f4\u3059\u308b\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3001\u300c\u4fee\u6b63\u306e\u524d\u5f8c\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u60aa\u5316\u3057\u306a\u3044\u300d\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002RxJava \u3068 Reactor Core \u306f\u3069\u3061\u3089\u3082 Reactive Extensions \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u306e\u5fc5\u8981\u6027\n\u300c\u4fee\u6b63\u306e\u524d\u5f8c\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u60aa\u5316\u3057\u306a\u3044\u300d\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4fee\u6b63\u306e\u524d\u5f8c\u3067\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8a08\u6e2c\u3057\u3066\u6bd4\u8f03\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u904e\u65e5\u8aad\u3093\u3060\u300e\u95d8\u3046\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u300f(G.\u30d1\u30b9\u30ab\u30eb\u30fb\u30b6\u30ab\u30ea\u30fc \u8457,\u5c71\u5ca1\u6d0b\u4e00 \u8a33 \u65e5\u7d4cBP\u793e/ISBN-13: 978-4822247577)\u3068\u3044\u3046\u5c0f\u8aac\u3067\u3001\u30de\u30a4\u30b1\u30eb\u30fb\u30a2\u30d6\u30e9\u30c3\u30b7\u30e5(Michael Abrash)\u306e\u767a\u8a00\u3068\u3057\u3066\u6b21\u306e\u8a00\u8449\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u300c\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306b\u5168\u529b\u3092\u3064\u304f\u3057\u305f\u5f8c\u3001\u6539\u5584\u306e\u5ea6\u5408\u3044\u3092\u6e2c\u5b9a\u3059\u3079\u304d\u3060\u3002\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3057\u306a\u3051\u308c\u3070\u3001\u30b3\u30fc\u30c9\u304c\u826f\u304f\u306a\u3063\u305f\u306f\u305a\u3060\u3068\u63a8\u6e2c\u3057\u3066\u3044\u308b\u306b\u3059\u304e\u306a\u3044\u3002\u63a8\u6e2c\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u306f\u3001\u304a\u305d\u3089\u304f\u306f\u3001\u4e00\u6d41\u306e\u30b3\u30fc\u30c9\u306f\u66f8\u3051\u306a\u3044\u3060\u308d\u3046\u300d\n\n\u305f\u3060\u3001Java \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u306f\u4e00\u7b4b\u7e04\u3067\u3044\u304b\u306a\u3044\u3053\u3068\u3067\u826f\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u4e16\u306e\u4e2d\u306b\u306f\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u306e\u529b\u3092\u501f\u308a\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u4eca\u56de\u306f JMH \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\nJMH \u3068\u306f\nOpenJDK \u306e\u30b5\u30a4\u30c8\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u304b\u3064\u3066\u306f\u81ea\u5206\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3089\u3057\u3044\u3067\u3059\u304c\u3001\u4eca\u306f Maven Central \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f9d\u5b58\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u540d\u79f0\u306f MVNREPOSITORY \u306b\u3088\u308b\u3068 \"Java Microbenchmark Harness\" \u306e\u30a2\u30af\u30ed\u30cb\u30e0\u306e\u3088\u3046\u3067\u3059\u3002\nJJUG CCC 2016 Spring \u306e\u300cEclipse Collections\u3067\u5b66\u3076\u30b3\u30fc\u30c9\u54c1\u8cea\u5411\u4e0a\u306e\u52d8\u6240\u300d\u3067\u4f3a\u3063\u305f\u8a71\u3060\u3068\u3001\u4e0b\u8a18\u306e\u7279\u5fb4\u304c\u3042\u308b\u305d\u3046\u3067\u3059\u3002\n1. JVM \u306e\u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u3092 Framework \u304c\u9069\u5207\u306b\u3084\u3063\u3066\u304f\u308c\u308b\n2. \u8a2d\u5b9a\u3092\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u3067\u66f8\u3051\u308b\n\n\u30e9\u30a4\u30bb\u30f3\u30b9\nGPL v2.0 \u3068\u306e\u3053\u3068\u3067\u3059\u3002\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u914d\u5e03\u7269\u306b\u542b\u3081\u308b\u3053\u3068\u306f\u57fa\u672c\u7684\u306b\u306a\u3044\u306e\u3067\u3001\u5927\u62b5\u306e\u30b1\u30fc\u30b9\u3067\u306f\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7279\u6b8a\u306a\u5229\u7528\u6cd5\u3092\u63a1\u308b\u5834\u5408\u306f\u7559\u610f\u3057\u3066\u304a\u304f\u3068\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u306f\n\u3054\u304f\u5c0f\u3055\u3044\u5358\u4f4d\u3067\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u3092\u3053\u3046\u547c\u3073\u307e\u3059\u3002\n\n\u9069\u7528\u4f8b\n\u300eJava\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u300f (Scott Oaks\u3000\u8457\u3001Acroquest Technology\u682a\u5f0f\u4f1a\u793e\u3000\u76e3\u8a33\u3001\u5bfa\u7530 \u4f73\u592e\u3000\u76e3\u8a33\u3001\u7267\u91ce \u8061\u3000\u8a33 \u30aa\u30e9\u30a4\u30ea\u30fc\u30fb\u30b8\u30e3\u30d1\u30f3/ ISBN978-4-87311-718-8) \u306b\u3088\u308b\u3068\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\nSynchronized\u30e1\u30bd\u30c3\u30c9\u3068\u305d\u3046\u3067\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u6bd4\u8f03\n\u30b9\u30ec\u30c3\u30c9\u306e\u751f\u6210\u30fb\u518d\u5229\u7528\u3067\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u6bd4\u8f03\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u884c\u6642\u9593\u6bd4\u8f03\n\n\n\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u6b63\u3057\u304f\u8a18\u8ff0\u3059\u308b\u306e\u306f\u56f0\u96e3\n\u300eJava\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u300f\u306b\u3088\u308c\u3070\u3001\u6b21\u306e\u7406\u7531\u3067\u6b63\u78ba\u306a\u8a18\u8ff0\u304c\u96e3\u3057\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n1. \u51e6\u7406\u7d50\u679c\u3092\u5229\u7528\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\n\n\u51e6\u7406\u7d50\u679c\u3092\u4f7f\u308f\u306a\u3044\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6700\u9069\u5316\u3067\u51e6\u7406\u90e8\u5206\u3092\u524a\u3063\u3066\u3057\u307e\u3044\u304b\u306d\u306a\u3044\n\u51e6\u7406\u7d50\u679c\u3092\u5165\u308c\u308b\u5909\u6570\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u3057\u3066 volatile \u3092\u3064\u3051\u308b(\u7b2c9\u7ae0)\n\n\n2. \u4e0d\u8981\u306a\u51e6\u7406\u3092\u5165\u308c\u3066\u306f\u3044\u3051\u306a\u3044\nRandom \u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308b\u306e\u306f\u6642\u9593\u8a08\u6e2c\u90e8\u5206\u306e\u5916\u306b\u7f6e\u304f\n\n3. \u6b63\u3057\u3044\u5165\u529b\u306b\u57fa\u3065\u3044\u3066\u6e2c\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u2026\u2026 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u691c\u67fb\u3082\u5916\u5074\u3067\u3084\u308b\n\n4. \u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u304c\u91cd\u8981\n\n\n\u5b9f\u884c\u74b0\u5883\n\n\n\nOS\nWindows10\n\n\n\n\nJava SE\n1.8.0_91\n\n\nGradle\n2.12\n\n\nJMH\n1.12\n\n\n\n\n\nJMH \u5c0e\u5165\n\n(\u4efb\u610f) \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u4eca\u56de\u306f\u5bfe\u8c61\u3068\u3059\u308b\u51e6\u7406\u3092\u5225\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5207\u308a\u51fa\u3057\u3066\u8a08\u6e2c\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u5bfe\u8c61\u3068\u3059\u308b\u30af\u30e9\u30b9\u306f\u4e0b\u8a18\u306e2\u3064\u3067\u3059\u3002\n\njp.toastkid.name.reactor.NameLoader.java\njp.toastkid.name.rxjava.NameLoader.java\n\n\u3084\u3063\u3066\u3044\u308b\u51e6\u7406\u3068\u3057\u3066\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n1\u884c\u306b1\u3064\u306e JSON \u3092\u8a18\u8ff0\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u884c\u8aad\u307f\u8fbc\u3080\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u308b\n1\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u3001Jackson \u306e ObjectReader \u3092\u4f7f\u3063\u3066 NameInformation \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\n2 \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 List \u306b\u683c\u7d0d\n2 \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6301\u3063\u3066\u3044\u308b nationality \u3068\u3044\u3046 String \u3092 Set \u306b\u683c\u7d0d\n\n\nJMH Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u5c0e\u5165\nGradle \u3067 JMH \u3092\u52d5\u304b\u3059\u306b\u306f JMH Gradle \u30d7\u30e9\u30b0\u30a4\u30f3 \u3092\u4f7f\u3046\u306e\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u6ce8\u610f\u70b9\n\u3053\u306e JMH \u30d7\u30e9\u30b0\u30a4\u30f3\u3001 \u79c1\u304c\u4f7f\u304a\u3046\u3068\u601d\u3063\u305f\u969b\u306b\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e README \u901a\u308a\u306b\u4f9d\u5b58\u3092\u8ffd\u52a0\u3057\u305f\u3089\u4f9d\u5b58\u89e3\u6c7a\u3067\u304d\u305a\u3001\u4e0b\u8a18\u306e\u901a\u308a\u306b build.gradle \u306b\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u4f9d\u5b58\u89e3\u6c7a\nbuildscript {\n  repositories {\n    maven {\n      url \"https://plugins.gradle.org/m2/\"\n    }\n  }\n  dependencies {\n    classpath \"me.champeau.gradle:jmh-gradle-plugin:0.3.1\"\n  }\n}\n\napply plugin: \"me.champeau.gradle.jmh\"\n\n\n\nJMH \u30aa\u30d7\u30b7\u30e7\u30f3\n\u304a\u597d\u307f\u3067 JMH \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\nJMH\u30aa\u30d7\u30b7\u30e7\u30f3\njmh {\n    jmhVersion = '1.12'\n    warmupIterations = 5\n    iterations = 20\n    fork = 2\n    benchmarkMode = ['thrpt']\n    failOnError = true\n}\n\njmhJar {\n    destinationDir = projectDir\n}\n\n\n\u4f7f\u3048\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306f README \u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u3001\u305d\u306e\u307e\u307e\u5199\u3057\u307e\u3059\u3002\n\n\n\nname\nsample\ndescription\n\n\n\n\ninclude\n'some regular expression'\ninclude pattern (regular expression) for benchmarks to be executed\n\n\nexclude\n'some regular expression'\nexclude pattern (regular expression) for benchmarks to be executed\n\n\niterations\n10\nNumber of measurement iterations to do.\n\n\nbenchmarkMode\n['thrpt','ss']\nBenchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]\n\n\nbatchSize\n1\nBatch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)\n\n\nfork\n2\nHow many times to forks a single benchmark. Use 0 to disable forking altogether\n\n\nfailOnError\nfalse\nShould JMH fail immediately if any benchmark had experienced the unrecoverable error?\n\n\nforceGC\nfalse\nShould JMH force GC between iterations?\n\n\njvm\n'myjvm'\nCustom JVM to use when forking.\n\n\njvmArgs\n\n'Custom JVM args to use when forking.'\n\n\njvmArgsAppend\n\n'Custom JVM args to use when forking (append these)'\n\n\njvmArgsPrepend\n\n'Custom JVM args to use when forking (prepend these)'\n\n\nhumanOutputFile\nproject.file(\"${project.buildDir}/reports/jmh/human.txt\")\nhuman-readable output file\n\n\nresultsFile\nproject.file(\"${project.buildDir}/reports/jmh/results.txt\")\nresults file\n\n\noperationsPerInvocation\n10\nOperations per invocation.\n\n\nbenchmarkParameters\n[:]\nBenchmark parameters.\n\n\nprofilers\n[]\nUse profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]\n\n\ntimeOnIteration\n'1s'\nTime to spend at each measurement iteration.\n\n\nresultFormat\n'CSV'\nResult format type (one of CSV, JSON, NONE, SCSV, TEXT)\n\n\nsynchronizeIterations\nfalse\nSynchronize iterations?\n\n\nthreads\n4\nNumber of worker threads to run with.\n\n\nthreadGroups\n[2,3,4]\nOverride thread group distribution for asymmetric benchmarks.\n\n\ntimeout\n'1s'\nTimeout for benchmark iteration.\n\n\ntimeUnit\n'ms'\nOutput time unit. Available time units are: [m, s, ms, us, ns].\n\n\nverbosity\n'NORMAL'\nVerbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]\n\n\nwarmup\n'1s'\nTime to spend at each warmup iteration.\n\n\nwarmupBatchSize\n10\nWarmup batch size: number of benchmark method calls per operation.\n\n\nwarmupForks\n0\nHow many warmup forks to make for a single benchmark. 0 to disable warmup forks.\n\n\nwarmupIterations\n1\nNumber of warmup iterations to do.\n\n\nwarmupMode\n'INDI'\nWarmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].\n\n\nwarmupBenchmarks\n['.*Warmup']\nWarmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.\n\n\nzip64\ntrue\nUse ZIP64 format for bigger archives\n\n\njmhVersion\n'1.12'\nSpecifies JMH version\n\n\nincludeTests\ntrue\nAllows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.\n\n\nduplicateClassesStrategy\n'fail'\nStrategy to apply when encountring duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)\n\n\n\nJMH \u306e\u5b9f\u884c\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\n\n\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c4\u30fc\u30eb\u3001JMH\u3092\u8a66\u3059\n\n\u307e\u305f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3001\u3069\u3046\u3044\u3046\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u308b\u306e\u304b\u3092\u8abf\u3079\u308b\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u5bfe\u8c61\u3068\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306b @Benchmark \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u4e0e\n\n\u6700\u7d42\u7684\u306a\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u30af\u30e9\u30b9\nJMH \u306e Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u3001 \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u306e\u30af\u30e9\u30b9\u3092 src/jmh/java \u4ee5\u4e0b\u306b\u7f6e\u304b\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\nLoaderBenchmark.java\nimport java.util.concurrent.TimeUnit;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.State;\n\n@State(Scope.Thread)\n@OutputTimeUnit(TimeUnit.MILLISECONDS)\npublic class LoaderBenchmark {\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    public void reactor() {\n        final jp.toastkid.name.reactor.App m = new jp.toastkid.name.reactor.App();\n        System.out.print(\"rec.1 names: \" + m.firstNames.size());\n        System.out.print(\"rec.2 names: \" + m.familyNames.size());\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    public void rxjava() {\n        final jp.toastkid.name.rxjava.App m = new jp.toastkid.name.rxjava.App();\n        System.out.print(\"rxj.1 names: \" + m.firstNames.size());\n        System.out.print(\"rxj.2 names: \" + m.familyNames.size());\n    }\n\n}\n\n\n\n\u4fee\u6b63\u7b87\u6240\n\nJMH Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u8ffd\u52a0\n\u30bd\u30fc\u30b9\u30d5\u30a9\u30eb\u30c0 src/jmh/java \u3092\u8ffd\u52a0\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u30af\u30e9\u30b9 LoaderBenchmark \u306e\u8ffd\u52a0\nJMH \u306e Main \u3068\u5e72\u6e09\u3059\u308b\u30af\u30e9\u30b9\u540d Main \u3092 App \u306b\u4fee\u6b63\n\n\n\n\u5b9f\u884c\n\u6e96\u5099\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001$ gradle clean jmh \u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u7d42\u4e86\u3059\u308b\u307e\u3067\u3057\u3070\u3057\u5f85\u3061\u307e\u3057\u3087\u3046\u3002\n\n\u5b9f\u884c\u7d50\u679c\n$ gradle clean jmh\n:clean\n:compileJava\n:processResources\n:classes\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:compileJmhJava\n:processJmhResources UP-TO-DATE\n:jmhClasses\n:jmhRunBytecodeGenerator\nProcessing 1 classes from /path/to/jmh_example/build/classes/jmh with \"reflection\" generator\nWriting out Java source to /path/to/jmh_example/build/jmh-generated-sources and resources to /path/to/jmh_example/build/jmh-generated-classes\n:jmhCompileGeneratedClasses\n:jmhJar\n:jmh\n# JMH 1.12 (released 128 days ago, please consider updating!)\n# VM version: JDK 1.8.0_91, VM 25.91-b14\n# VM invoker: C:/Program Files/Java/jdk1.8.0_91/jre/bin/java.exe\n# VM options: -Dfile.encoding=windows-31j -Duser.country=JP -Duser.language=ja -Duser.variant\n# Warmup: 5 iterations, 1 s each\n# Measurement: 20 iterations, 1 s each\n# Timeout: 10 min per iteration\n# Threads: 1 thread, will synchronize iterations\n# Benchmark mode: Throughput, ops/time\n# Benchmark: jp.toastkid.name.LoaderBenchmark.reactor\n\n# Run progress: 0.00% complete, ETA 00:01:40\n# Fork: 1 of 2\n# Warmup Iteration   1: rec.1 (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\n# Warmup Iteration   5: rec.1 (\u7701\u7565)\nIteration   1: rec.1 names: (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\nIteration  20: rec.1 names: (\u7701\u7565)\n\n# Run progress: 25.00% complete, ETA 00:01:17\n# Fork: 2 of 2\n# Warmup Iteration   1: rec.1 (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\n# Warmup Iteration   5: rec.1 (\u7701\u7565)\n\nIteration   1: rec.1 names: (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\nIteration  20: rec.1 names: (\u7701\u7565)\n\n\nResult \"reactor\":\n  0.060 \u00b1(99.9%) 0.003 ops/ms [Average]\n  (min, avg, max) = (0.050, 0.060, 0.075), stdev = 0.005\n  CI (99.9%): [0.057, 0.063] (assumes normal distribution)\n\n\n# JMH 1.12 (released 128 days ago, please consider updating!)\n# VM version: JDK 1.8.0_91, VM 25.91-b14\n# VM invoker: C:/Program Files/Java/jdk1.8.0_91/jre/bin/java.exe\n# VM options: -Dfile.encoding=windows-31j -Duser.country=JP -Duser.language=ja -Duser.variant\n# Warmup: 5 iterations, 1 s each\n# Measurement: 20 iterations, 1 s each\n# Timeout: 10 min per iteration\n# Threads: 1 thread, will synchronize iterations\n# Benchmark mode: Throughput, ops/time\n# Benchmark: jp.toastkid.name.LoaderBenchmark.rxjava\n\n# Run progress: 50.00% complete, ETA 00:00:51\n# Fork: 1 of 2\n# Warmup Iteration   1: rxj.1 (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\n# Warmup Iteration   5: rxj.1 (\u7701\u7565)\nIteration   1: (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\nIteration  20: (\u7701\u7565)\n\n# Run progress: 75.00% complete, ETA 00:00:25\n# Fork: 2 of 2\n# Warmup Iteration   1: (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\n# Warmup Iteration   5: (\u7701\u7565)\nIteration   1: rxj.1 (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\nIteration  20: rxj.1 (\u7701\u7565)\n\n\nResult \"rxjava\":\n  0.059 \u00b1(99.9%) 0.002 ops/ms [Average]\n  (min, avg, max) = (0.047, 0.059, 0.064), stdev = 0.004\n  CI (99.9%): [0.057, 0.061] (assumes normal distribution)\n\n\n# Run complete. Total time: 00:01:43\n\nBenchmark                 Mode  Cnt  Score   Error   Units\nLoaderBenchmark.reactor  thrpt   40  0.060 \u00b1 0.003  ops/ms\nLoaderBenchmark.rxjava   thrpt   40  0.059 \u00b1 0.002  ops/ms\n\nBenchmark result is saved to build/reports/jmh/results.txt\n\nBUILD SUCCESSFUL\n\nTotal time: 1 mins 54.1 secs\n\n\n\n\u7d50\u679c\u306e\u78ba\u8a8d\n\u6700\u7d42\u7684\u306a\u7d50\u679c\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n\nBenchmark\nMode\nCnt\nScore\nError\nUnits\n\n\n\n\nLoaderBenchmark.reactor\nthrpt\n40\n0.060\n\u00b1 0.003\nops/ms\n\n\nLoaderBenchmark.rxjava\nthrpt\n40\n0.059\n\u00b1 0.002\nops/ms\n\n\n\n\u3053\u306e\u7d50\u679c\u304b\u3089\u30012\u3064\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7279\u6bb5\u306e\u6027\u80fd\u5dee\u304c\u306a\u3044\u3053\u3068\u304c\u4f3a\u3048\u307e\u3059\u3002\n\n\u751f\u6210\u3055\u308c\u305f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30b3\u30fc\u30c9\nJMH \u7528\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u6a19\u6e96\u8a2d\u5b9a\u3067\u3059\u3068 build/jmh-generated-sources \u4ee5\u4e0b\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u4e3b\u306b\u30af\u30e9\u30b9\u540d_\u30e1\u30bd\u30c3\u30c9\u540d_jmhTest.java \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\u3068\u3001\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u5b9f\u65bd\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8997\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\u307e\u3068\u3081\nGradle \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5b9f\u88c5\u3057\u305f\u51e6\u7406\u306b\u5bfe\u3057\u3001 JMH \u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8a08\u6e2c\u3057\u30012\u3064\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306e\u5b9f\u88c5\u9593\u306b\u5927\u304d\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5dee\u304c\u898b\u3089\u308c\u306a\u3044\u3068\u5224\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u666e\u6bb5 Java \u3067\u306e\u958b\u767a\u6642\u306b\u611f\u3058\u3066\u3044\u308b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u7591\u554f\u304c\u3042\u308c\u3070\u3001JMH \u3067\u306e\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u5b9f\u884c\u3057\u3066\u3001\u305d\u306e\u7591\u554f\u3092\u89e3\u6d88\u3059\u308b\u3068\u3001\u3088\u308a\u3088\u3044 Java \u3068\u306e\u4ed8\u304d\u5408\u3044\u65b9\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n\n\u53c2\u8003\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f GitHub Repository \u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\u3054\u8208\u5473\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u305d\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u66f8\u7c4d\n\u300eJava\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u300f (Scott Oaks\u3000\u8457\u3001Acroquest Technology\u682a\u5f0f\u4f1a\u793e\u3000\u76e3\u8a33\u3001\u5bfa\u7530 \u4f73\u592e\u3000\u76e3\u8a33\u3001\u7267\u91ce \u8061\u3000\u8a33 \u30aa\u30e9\u30a4\u30ea\u30fc\u30fb\u30b8\u30e3\u30d1\u30f3/ ISBN978-4-87311-718-8) \n\n\u5bfe\u8c61\u8aad\u8005\n\u300eJava\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u300f\u306e\u540c\u66f8\u7c4d\u4e2d\u3088\u308a\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8ffd\u6c42\u3059\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u3084\u958b\u767a\u8005\nJVM \u81ea\u4f53\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u8208\u5473\u304c\u3042\u308a\u3001\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306a\u3057\u3067 JVM \u306e\u632f\u308b\u821e\u3044\u3092\u5909\u3048\u305f\u3044\u4eba\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5206\u6790\u3092\u3053\u308c\u304b\u3089\u59cb\u3081\u308b\u4eba\n\n\n\u30ea\u30f3\u30af\n\nhow to write a small benchmark of getbytes with jmh?\nJava\u306e\u30d9\u30f3\u30c1\u30c4\u30fc\u30eb\u3001JMH\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u8a08\u6e2c\u3057\u3066\u307f\u308b\n\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c4\u30fc\u30eb\u3001JMH\u3092\u8a66\u3059\n\n\n\n\u304a\u307e\u3051\n\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u306e\u5b9f\u884c jar \u4f5c\u6210\n\u3053\u3053\u307e\u3067\u8ff0\u3079\u305f\u901a\u308a\u3001 JMH \u3067\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306f\u3001Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u7528\u3044\u308c\u3070 $ gradle jmh \u30b3\u30de\u30f3\u30c9\u3060\u3051\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n$ gradle jmhJar \u30b3\u30de\u30f3\u30c9\u3067 jmh \u7528\u306e executable jar \u3092\u751f\u6210\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306e\u5834\u5408\u306f jmx_example-0.0.1-jmh.jar \u3068\u3044\u3046 jar \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u305d\u306e jar \u3092 -jar \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u3066\u52d5\u304b\u3059\u3053\u3068\u3067\u3082\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306f\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u3002\n\n\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\u4f8b\n$ java -jar jmx_example-0.0.1-jmh.jar -wi 5 -i 5 -f 1  -bm ss -tu ms\n\n\n\nMethod parameters should be @State classes.\n@Benchmark \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u305f\u30e1\u30bd\u30c3\u30c9\u3067\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u307e\u3059\u3002\nMethod parameters should be @State classes.\n   [org.openjdk.jmh.generators.reflection.RFMethodInfo@3feba861]\n\n:jmhRunBytecodeGenerator FAILED\n\n\u79c1\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u3069\u3046\u3082 String \u5f15\u6570\u306e\u3042\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305d\u3046\u3068\u3059\u308b\u3068\u30c0\u30e1\u306a\u3088\u3046\u3067\u3057\u305f\u3002\u4ed5\u65b9\u306a\u3044\u306e\u3067\u5f15\u6570\u306a\u3057\u306e\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u3042\u308a\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8fc2\u56de\u3057\u3066\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n# \u6982\u8981\n\u81ea\u4f5c\u306e\u30c4\u30fc\u30eb\u3067\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\u969b\u3001 Reactive Extensions \u306b [RxJava](https://github.com/ReactiveX/RxJava) \u3068 [Reactor Core](https://github.com/reactor/reactor-core) \u306e\u3069\u3061\u3089\u3092\u4f7f\u3046\u304b\u691c\u8a0e\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u3001\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u306e JMH \u3092 Gradle \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u4f7f\u3044\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u306e\u7528\u9014\u3067\u306f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u7d50\u679c\u306b\u5927\u5dee\u304c\u306a\u304f\u3001\u597d\u304d\u306a\u65b9\u3092\u4f7f\u3048\u3070\u3088\u3044\u3068\u5224\u65ad\u3059\u308b\u306b\u81f3\u308a\u307e\u3057\u305f\u3002\n\n\u6c17\u306b\u306a\u308b\u70b9\u3084\u8aa4\u3063\u3066\u3044\u308b\u7b87\u6240\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3001\u30b3\u30e1\u30f3\u30c8\u3084\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5f62\u3067\u304a\u5bc4\u305b\u304f\u3060\u3055\u3044\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n## \u60f3\u5b9a\u8aad\u8005\nGradle \u3092\u4f7f\u3063\u3066 JMH \u3067\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3057\u305f\u3044\u304c\u3001\u307e\u3060\u3084\u3063\u305f\u3053\u3068\u306e\u306a\u3044 Java \u958b\u767a\u8005\n\n## \u3053\u306e\u8a18\u4e8b\u3067\u89e6\u308c\u308b\u3053\u3068\nJMH \u3092 Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f7f\u3063\u3066\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\n\n## \u3053\u306e\u8a18\u4e8b\u3067\u89e6\u308c\u306a\u3044\u3053\u3068\n- Reactive Extensions \u306e\u610f\u7fa9\u3084\u305d\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\n- Gradle \u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\n- Maven \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306e JMH \u5229\u7528\u306b\u3064\u3044\u3066\n\n----\n\n# \u80cc\u666f\nRxJava \u3067\u5b9f\u88c5\u3057\u305f\u51e6\u7406\u306b\u5bfe\u3057\u3001\u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 RxJava \u304b\u3089 Reactor Core \u306b\u5909\u66f4\u3059\u308b\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3001\u300c\u4fee\u6b63\u306e\u524d\u5f8c\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u60aa\u5316\u3057\u306a\u3044\u300d\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002RxJava \u3068 Reactor Core \u306f\u3069\u3061\u3089\u3082 Reactive Extensions \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n## \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u306e\u5fc5\u8981\u6027\n\u300c\u4fee\u6b63\u306e\u524d\u5f8c\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u60aa\u5316\u3057\u306a\u3044\u300d\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4fee\u6b63\u306e\u524d\u5f8c\u3067\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8a08\u6e2c\u3057\u3066\u6bd4\u8f03\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u904e\u65e5\u8aad\u3093\u3060\u300e[\u95d8\u3046\u30d7\u30ed\u30b0\u30e9\u30de\u30fc](http://iss.ndl.go.jp/books/R100000002-I000010411798-00)\u300f(G.\u30d1\u30b9\u30ab\u30eb\u30fb\u30b6\u30ab\u30ea\u30fc \u8457,\u5c71\u5ca1\u6d0b\u4e00 \u8a33 \u65e5\u7d4cBP\u793e/ISBN-13: 978-4822247577)\u3068\u3044\u3046\u5c0f\u8aac\u3067\u3001\u30de\u30a4\u30b1\u30eb\u30fb\u30a2\u30d6\u30e9\u30c3\u30b7\u30e5([Michael Abrash](https://en.wikipedia.org/wiki/Michael_Abrash))\u306e\u767a\u8a00\u3068\u3057\u3066\u6b21\u306e\u8a00\u8449\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n> \u300c\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306b\u5168\u529b\u3092\u3064\u304f\u3057\u305f\u5f8c\u3001\u6539\u5584\u306e\u5ea6\u5408\u3044\u3092\u6e2c\u5b9a\u3059\u3079\u304d\u3060\u3002\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3057\u306a\u3051\u308c\u3070\u3001\u30b3\u30fc\u30c9\u304c\u826f\u304f\u306a\u3063\u305f\u306f\u305a\u3060\u3068\u63a8\u6e2c\u3057\u3066\u3044\u308b\u306b\u3059\u304e\u306a\u3044\u3002\u63a8\u6e2c\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u306f\u3001\u304a\u305d\u3089\u304f\u306f\u3001\u4e00\u6d41\u306e\u30b3\u30fc\u30c9\u306f\u66f8\u3051\u306a\u3044\u3060\u308d\u3046\u300d\n\n\u305f\u3060\u3001Java \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u306f\u4e00\u7b4b\u7e04\u3067\u3044\u304b\u306a\u3044\u3053\u3068\u3067\u826f\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u4e16\u306e\u4e2d\u306b\u306f\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u306e\u529b\u3092\u501f\u308a\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u4eca\u56de\u306f JMH \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n## [JMH](http://openjdk.java.net/projects/code-tools/jmh/) \u3068\u306f\nOpenJDK \u306e\u30b5\u30a4\u30c8\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u304b\u3064\u3066\u306f\u81ea\u5206\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3089\u3057\u3044\u3067\u3059\u304c\u3001\u4eca\u306f [Maven Central \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059](http://search.maven.org/#artifactdetails%7Corg.openjdk.jmh%7Cjmh-core%7C1.12%7Cjar)\u306e\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f9d\u5b58\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u540d\u79f0\u306f [MVNREPOSITORY](https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-parent/1.5) \u306b\u3088\u308b\u3068 \"<b>J</b>ava <b>M</b>icrobenchmark <b>H</b>arness\" \u306e\u30a2\u30af\u30ed\u30cb\u30e0\u306e\u3088\u3046\u3067\u3059\u3002\n\nJJUG CCC 2016 Spring \u306e\u300c[Eclipse Collections\u3067\u5b66\u3076\u30b3\u30fc\u30c9\u54c1\u8cea\u5411\u4e0a\u306e\u52d8\u6240](http://www.goldmansachs.com/gs-collections/documents/2016-05-21_JJUG_CCC.pdf#search=%27Eclipse+Collections+%E5%8B%98%E6%89%80%27)\u300d\u3067\u4f3a\u3063\u305f\u8a71\u3060\u3068\u3001\u4e0b\u8a18\u306e\u7279\u5fb4\u304c\u3042\u308b\u305d\u3046\u3067\u3059\u3002\n1. JVM \u306e\u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u3092 Framework \u304c\u9069\u5207\u306b\u3084\u3063\u3066\u304f\u308c\u308b\n2. \u8a2d\u5b9a\u3092\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u3067\u66f8\u3051\u308b\n\n## \u30e9\u30a4\u30bb\u30f3\u30b9\n[GPL v2.0](http://hg.openjdk.java.net/code-tools/jmh/file/448bd18c85f6/jmh-core-benchmarks/src/main/LICENSE) \u3068\u306e\u3053\u3068\u3067\u3059\u3002\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u914d\u5e03\u7269\u306b\u542b\u3081\u308b\u3053\u3068\u306f\u57fa\u672c\u7684\u306b\u306a\u3044\u306e\u3067\u3001\u5927\u62b5\u306e\u30b1\u30fc\u30b9\u3067\u306f\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7279\u6b8a\u306a\u5229\u7528\u6cd5\u3092\u63a1\u308b\u5834\u5408\u306f\u7559\u610f\u3057\u3066\u304a\u304f\u3068\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n## \u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u306f\n\u3054\u304f\u5c0f\u3055\u3044\u5358\u4f4d\u3067\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u3092\u3053\u3046\u547c\u3073\u307e\u3059\u3002\n\n### \u9069\u7528\u4f8b\n[\u300eJava\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u300f](https://www.oreilly.co.jp/books/9784873117188/) (Scott Oaks\u3000\u8457\u3001Acroquest Technology\u682a\u5f0f\u4f1a\u793e\u3000\u76e3\u8a33\u3001\u5bfa\u7530 \u4f73\u592e\u3000\u76e3\u8a33\u3001\u7267\u91ce \u8061\u3000\u8a33 \u30aa\u30e9\u30a4\u30ea\u30fc\u30fb\u30b8\u30e3\u30d1\u30f3/ ISBN978-4-87311-718-8) \u306b\u3088\u308b\u3068\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\n1. Synchronized\u30e1\u30bd\u30c3\u30c9\u3068\u305d\u3046\u3067\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u6bd4\u8f03\n2. \u30b9\u30ec\u30c3\u30c9\u306e\u751f\u6210\u30fb\u518d\u5229\u7528\u3067\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u6bd4\u8f03\n3. \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u884c\u6642\u9593\u6bd4\u8f03\n\n### \u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u6b63\u3057\u304f\u8a18\u8ff0\u3059\u308b\u306e\u306f\u56f0\u96e3\n\u300eJava\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u300f\u306b\u3088\u308c\u3070\u3001\u6b21\u306e\u7406\u7531\u3067\u6b63\u78ba\u306a\u8a18\u8ff0\u304c\u96e3\u3057\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n#### 1. \u51e6\u7406\u7d50\u679c\u3092\u5229\u7528\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\n- \u51e6\u7406\u7d50\u679c\u3092\u4f7f\u308f\u306a\u3044\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6700\u9069\u5316\u3067\u51e6\u7406\u90e8\u5206\u3092\u524a\u3063\u3066\u3057\u307e\u3044\u304b\u306d\u306a\u3044\n- \u51e6\u7406\u7d50\u679c\u3092\u5165\u308c\u308b\u5909\u6570\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u3057\u3066 ```volatile``` \u3092\u3064\u3051\u308b(\u7b2c9\u7ae0)\n\n#### 2. \u4e0d\u8981\u306a\u51e6\u7406\u3092\u5165\u308c\u3066\u306f\u3044\u3051\u306a\u3044\nRandom \u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308b\u306e\u306f\u6642\u9593\u8a08\u6e2c\u90e8\u5206\u306e\u5916\u306b\u7f6e\u304f\n\n#### 3. \u6b63\u3057\u3044\u5165\u529b\u306b\u57fa\u3065\u3044\u3066\u6e2c\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u2026\u2026 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u691c\u67fb\u3082\u5916\u5074\u3067\u3084\u308b\n\n#### 4. \u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u304c\u91cd\u8981\n\n----\n\n# \u5b9f\u884c\u74b0\u5883\n\n| OS | Windows10\n|:---|:---\n| Java SE | 1.8.0_91\n| Gradle  | 2.12\n| JMH     | 1.12\n\n----\n\n# JMH \u5c0e\u5165\n\n## (\u4efb\u610f) \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u4eca\u56de\u306f\u5bfe\u8c61\u3068\u3059\u308b\u51e6\u7406\u3092\u5225\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5207\u308a\u51fa\u3057\u3066\u8a08\u6e2c\u3057\u307e\u3059\u3002[\u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8](https://github.com/toastkidjp/jmh_example/tree/qiita)\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u5bfe\u8c61\u3068\u3059\u308b\u30af\u30e9\u30b9\u306f\u4e0b\u8a18\u306e2\u3064\u3067\u3059\u3002\n\n1. [jp.toastkid.name.reactor.NameLoader.java](https://github.com/toastkidjp/jmh_example/blob/qiita/src/main/java/jp/toastkid/name/reactor/NameLoader.java)\n2. [jp.toastkid.name.rxjava.NameLoader.java](https://github.com/toastkidjp/jmh_example/blob/qiita/src/main/java/jp/toastkid/name/rxjava/NameLoader.java)\n\n\u3084\u3063\u3066\u3044\u308b\u51e6\u7406\u3068\u3057\u3066\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n1. 1\u884c\u306b1\u3064\u306e JSON \u3092\u8a18\u8ff0\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u884c\u8aad\u307f\u8fbc\u3080\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u308b\n2. 1\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u3001Jackson \u306e ObjectReader \u3092\u4f7f\u3063\u3066 [NameInformation](https://github.com/toastkidjp/jmh_example/blob/qiita/src/main/java/jp/toastkid/name/NameInformation.java) \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\n3. 2 \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 List \u306b\u683c\u7d0d\n4. 2 \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6301\u3063\u3066\u3044\u308b nationality \u3068\u3044\u3046 String \u3092 Set \u306b\u683c\u7d0d\n\n## JMH Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u5c0e\u5165\nGradle \u3067 JMH \u3092\u52d5\u304b\u3059\u306b\u306f [JMH Gradle \u30d7\u30e9\u30b0\u30a4\u30f3](https://github.com/melix/jmh-gradle-plugin) \u3092\u4f7f\u3046\u306e\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n### \u6ce8\u610f\u70b9\n\u3053\u306e JMH \u30d7\u30e9\u30b0\u30a4\u30f3\u3001 \u79c1\u304c\u4f7f\u304a\u3046\u3068\u601d\u3063\u305f\u969b\u306b\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e [README](https://github.com/melix/jmh-gradle-plugin/blob/72f6c7e9efcef53b9540cae8941dd6813e57dd74/README.adoc) \u901a\u308a\u306b\u4f9d\u5b58\u3092\u8ffd\u52a0\u3057\u305f\u3089\u4f9d\u5b58\u89e3\u6c7a\u3067\u304d\u305a\u3001\u4e0b\u8a18\u306e\u901a\u308a\u306b build.gradle \u306b\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n```groovy:\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u4f9d\u5b58\u89e3\u6c7a\nbuildscript {\n  repositories {\n    maven {\n      url \"https://plugins.gradle.org/m2/\"\n    }\n  }\n  dependencies {\n    classpath \"me.champeau.gradle:jmh-gradle-plugin:0.3.1\"\n  }\n}\n\napply plugin: \"me.champeau.gradle.jmh\"\n```\n\n### JMH \u30aa\u30d7\u30b7\u30e7\u30f3\n\u304a\u597d\u307f\u3067 JMH \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n```groovy:JMH\u30aa\u30d7\u30b7\u30e7\u30f3\njmh {\n    jmhVersion = '1.12'\n    warmupIterations = 5\n    iterations = 20\n    fork = 2\n    benchmarkMode = ['thrpt']\n    failOnError = true\n}\n\njmhJar {\n    destinationDir = projectDir\n}\n```\n\n\u4f7f\u3048\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306f README \u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u3001\u305d\u306e\u307e\u307e\u5199\u3057\u307e\u3059\u3002\n\n| name | sample | description\n|:---|:---|:---\n| include| 'some regular expression' | include pattern (regular expression) for benchmarks to be executed\n| exclude| 'some regular expression' | exclude pattern (regular expression) for benchmarks to be executed\n| iterations| 10 | Number of measurement iterations to do.\n| benchmarkMode| ['thrpt','ss'] | Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]\n| batchSize| 1 | Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)\n| fork| 2 | How many times to forks a single benchmark. Use 0 to disable forking altogether\n| failOnError| false | Should JMH fail immediately if any benchmark had experienced the unrecoverable error?\n| forceGC| false | Should JMH force GC between iterations?\n| jvm| 'myjvm' | Custom JVM to use when forking.\n| jvmArgs| | 'Custom JVM args to use when forking.'\n| jvmArgsAppend| | 'Custom JVM args to use when forking (append these)'\n| jvmArgsPrepend| | 'Custom JVM args to use when forking (prepend these)'\n| humanOutputFile| project.file(\"${project.buildDir}/reports/jmh/human.txt\") | human-readable output file\n| resultsFile| project.file(\"${project.buildDir}/reports/jmh/results.txt\") | results file\n| operationsPerInvocation| 10 | Operations per invocation.\n| benchmarkParameters|  [:] | Benchmark parameters.\n| profilers| [] | Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]\n| timeOnIteration| '1s' | Time to spend at each measurement iteration.\n| resultFormat| 'CSV' | Result format type (one of CSV, JSON, NONE, SCSV, TEXT)\n| synchronizeIterations| false | Synchronize iterations?\n| threads| 4 | Number of worker threads to run with.\n| threadGroups| [2,3,4] | Override thread group distribution for asymmetric benchmarks.\n| timeout| '1s' | Timeout for benchmark iteration.\n| timeUnit| 'ms' | Output time unit. Available time units are: [m, s, ms, us, ns].\n| verbosity| 'NORMAL' | Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]\n| warmup| '1s' | Time to spend at each warmup iteration.\n| warmupBatchSize| 10 | Warmup batch size: number of benchmark method calls per operation.\n| warmupForks| 0 | How many warmup forks to make for a single benchmark. 0 to disable warmup forks.\n| warmupIterations| 1 | Number of warmup iterations to do.\n| warmupMode| 'INDI' | Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].\n| warmupBenchmarks| ['.*Warmup'] | Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.\n| zip64| true | Use ZIP64 format for bigger archives\n| jmhVersion| '1.12' | Specifies JMH version\n| includeTests| true | Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.\n| duplicateClassesStrategy| 'fail' | Strategy to apply when encountring duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)\n\nJMH \u306e\u5b9f\u884c\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\n\n- [\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c4\u30fc\u30eb\u3001JMH\u3092\u8a66\u3059](http://d.hatena.ne.jp/Kazuhira/20140102/1388662362)\n\n\u307e\u305f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002[\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9](http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/)\u3092\u898b\u3066\u3001\u3069\u3046\u3044\u3046\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u308b\u306e\u304b\u3092\u8abf\u3079\u308b\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n## \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u5bfe\u8c61\u3068\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306b @Benchmark \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u4e0e\n\n## \u6700\u7d42\u7684\u306a\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u30af\u30e9\u30b9\nJMH \u306e Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u3001 \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u306e\u30af\u30e9\u30b9\u3092 ```src/jmh/java``` \u4ee5\u4e0b\u306b\u7f6e\u304b\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\n```java:LoaderBenchmark.java\nimport java.util.concurrent.TimeUnit;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.State;\n\n@State(Scope.Thread)\n@OutputTimeUnit(TimeUnit.MILLISECONDS)\npublic class LoaderBenchmark {\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    public void reactor() {\n        final jp.toastkid.name.reactor.App m = new jp.toastkid.name.reactor.App();\n        System.out.print(\"rec.1 names: \" + m.firstNames.size());\n        System.out.print(\"rec.2 names: \" + m.familyNames.size());\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    public void rxjava() {\n        final jp.toastkid.name.rxjava.App m = new jp.toastkid.name.rxjava.App();\n        System.out.print(\"rxj.1 names: \" + m.firstNames.size());\n        System.out.print(\"rxj.2 names: \" + m.familyNames.size());\n    }\n\n}\n```\n\n### \u4fee\u6b63\u7b87\u6240\n\n1. JMH Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u8ffd\u52a0\n2. \u30bd\u30fc\u30b9\u30d5\u30a9\u30eb\u30c0 ```src/jmh/java``` \u3092\u8ffd\u52a0\n3. \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u30af\u30e9\u30b9 LoaderBenchmark \u306e\u8ffd\u52a0\n4. JMH \u306e Main \u3068\u5e72\u6e09\u3059\u308b\u30af\u30e9\u30b9\u540d Main \u3092 App \u306b\u4fee\u6b63\n\n----\n\n# \u5b9f\u884c\n\u6e96\u5099\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001```$ gradle clean jmh``` \u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u7d42\u4e86\u3059\u308b\u307e\u3067\u3057\u3070\u3057\u5f85\u3061\u307e\u3057\u3087\u3046\u3002\n\n```:\u5b9f\u884c\u7d50\u679c\n$ gradle clean jmh\n:clean\n:compileJava\n:processResources\n:classes\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:compileJmhJava\n:processJmhResources UP-TO-DATE\n:jmhClasses\n:jmhRunBytecodeGenerator\nProcessing 1 classes from /path/to/jmh_example/build/classes/jmh with \"reflection\" generator\nWriting out Java source to /path/to/jmh_example/build/jmh-generated-sources and resources to /path/to/jmh_example/build/jmh-generated-classes\n:jmhCompileGeneratedClasses\n:jmhJar\n:jmh\n# JMH 1.12 (released 128 days ago, please consider updating!)\n# VM version: JDK 1.8.0_91, VM 25.91-b14\n# VM invoker: C:/Program Files/Java/jdk1.8.0_91/jre/bin/java.exe\n# VM options: -Dfile.encoding=windows-31j -Duser.country=JP -Duser.language=ja -Duser.variant\n# Warmup: 5 iterations, 1 s each\n# Measurement: 20 iterations, 1 s each\n# Timeout: 10 min per iteration\n# Threads: 1 thread, will synchronize iterations\n# Benchmark mode: Throughput, ops/time\n# Benchmark: jp.toastkid.name.LoaderBenchmark.reactor\n\n# Run progress: 0.00% complete, ETA 00:01:40\n# Fork: 1 of 2\n# Warmup Iteration   1: rec.1 (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\n# Warmup Iteration   5: rec.1 (\u7701\u7565)\nIteration   1: rec.1 names: (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\nIteration  20: rec.1 names: (\u7701\u7565)\n\n# Run progress: 25.00% complete, ETA 00:01:17\n# Fork: 2 of 2\n# Warmup Iteration   1: rec.1 (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\n# Warmup Iteration   5: rec.1 (\u7701\u7565)\n\nIteration   1: rec.1 names: (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\nIteration  20: rec.1 names: (\u7701\u7565)\n\n\nResult \"reactor\":\n  0.060 \u00b1(99.9%) 0.003 ops/ms [Average]\n  (min, avg, max) = (0.050, 0.060, 0.075), stdev = 0.005\n  CI (99.9%): [0.057, 0.063] (assumes normal distribution)\n\n\n# JMH 1.12 (released 128 days ago, please consider updating!)\n# VM version: JDK 1.8.0_91, VM 25.91-b14\n# VM invoker: C:/Program Files/Java/jdk1.8.0_91/jre/bin/java.exe\n# VM options: -Dfile.encoding=windows-31j -Duser.country=JP -Duser.language=ja -Duser.variant\n# Warmup: 5 iterations, 1 s each\n# Measurement: 20 iterations, 1 s each\n# Timeout: 10 min per iteration\n# Threads: 1 thread, will synchronize iterations\n# Benchmark mode: Throughput, ops/time\n# Benchmark: jp.toastkid.name.LoaderBenchmark.rxjava\n\n# Run progress: 50.00% complete, ETA 00:00:51\n# Fork: 1 of 2\n# Warmup Iteration   1: rxj.1 (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\n# Warmup Iteration   5: rxj.1 (\u7701\u7565)\nIteration   1: (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\nIteration  20: (\u7701\u7565)\n\n# Run progress: 75.00% complete, ETA 00:00:25\n# Fork: 2 of 2\n# Warmup Iteration   1: (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\n# Warmup Iteration   5: (\u7701\u7565)\nIteration   1: rxj.1 (\u7701\u7565)\n\u2026\u2026\u4e2d\u7565\u2026\u2026\nIteration  20: rxj.1 (\u7701\u7565)\n\n\nResult \"rxjava\":\n  0.059 \u00b1(99.9%) 0.002 ops/ms [Average]\n  (min, avg, max) = (0.047, 0.059, 0.064), stdev = 0.004\n  CI (99.9%): [0.057, 0.061] (assumes normal distribution)\n\n\n# Run complete. Total time: 00:01:43\n\nBenchmark                 Mode  Cnt  Score   Error   Units\nLoaderBenchmark.reactor  thrpt   40  0.060 \u00b1 0.003  ops/ms\nLoaderBenchmark.rxjava   thrpt   40  0.059 \u00b1 0.002  ops/ms\n\nBenchmark result is saved to build/reports/jmh/results.txt\n\nBUILD SUCCESSFUL\n\nTotal time: 1 mins 54.1 secs\n```\n\n## \u7d50\u679c\u306e\u78ba\u8a8d\n\u6700\u7d42\u7684\u306a\u7d50\u679c\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n| Benchmark | Mode | Cnt | Score | Error | Units\n|:---|:---|---:|---:|---:|---:\n| LoaderBenchmark.reactor  | thrpt | 40 | 0.060 | \u00b1 0.003 | ops/ms\n| LoaderBenchmark.rxjava   | thrpt | 40 | 0.059 | \u00b1 0.002 | ops/ms\n\n\u3053\u306e\u7d50\u679c\u304b\u3089\u30012\u3064\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7279\u6bb5\u306e\u6027\u80fd\u5dee\u304c\u306a\u3044\u3053\u3068\u304c\u4f3a\u3048\u307e\u3059\u3002\n\n## \u751f\u6210\u3055\u308c\u305f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30b3\u30fc\u30c9\nJMH \u7528\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u6a19\u6e96\u8a2d\u5b9a\u3067\u3059\u3068 ```build/jmh-generated-sources``` \u4ee5\u4e0b\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u4e3b\u306b```\u30af\u30e9\u30b9\u540d_\u30e1\u30bd\u30c3\u30c9\u540d_jmhTest.java``` \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\u3068\u3001\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u5b9f\u65bd\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8997\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n----\n\n# \u307e\u3068\u3081\nGradle \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5b9f\u88c5\u3057\u305f\u51e6\u7406\u306b\u5bfe\u3057\u3001 JMH \u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8a08\u6e2c\u3057\u30012\u3064\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306e\u5b9f\u88c5\u9593\u306b\u5927\u304d\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5dee\u304c\u898b\u3089\u308c\u306a\u3044\u3068\u5224\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u666e\u6bb5 Java \u3067\u306e\u958b\u767a\u6642\u306b\u611f\u3058\u3066\u3044\u308b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u7591\u554f\u304c\u3042\u308c\u3070\u3001JMH \u3067\u306e\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u5b9f\u884c\u3057\u3066\u3001\u305d\u306e\u7591\u554f\u3092\u89e3\u6d88\u3059\u308b\u3068\u3001\u3088\u308a\u3088\u3044 Java \u3068\u306e\u4ed8\u304d\u5408\u3044\u65b9\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n----\n\n# \u53c2\u8003\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f [GitHub Repository](https://github.com/toastkidjp/jmh_example/tree/qiita) \u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\u3054\u8208\u5473\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u305d\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n## \u66f8\u7c4d\n[\u300eJava\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u300f](https://www.oreilly.co.jp/books/9784873117188/) (Scott Oaks\u3000\u8457\u3001Acroquest Technology\u682a\u5f0f\u4f1a\u793e\u3000\u76e3\u8a33\u3001\u5bfa\u7530 \u4f73\u592e\u3000\u76e3\u8a33\u3001\u7267\u91ce \u8061\u3000\u8a33 \u30aa\u30e9\u30a4\u30ea\u30fc\u30fb\u30b8\u30e3\u30d1\u30f3/ ISBN978-4-87311-718-8) \n\n### \u5bfe\u8c61\u8aad\u8005\n\u300eJava\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u300f\u306e\u540c\u66f8\u7c4d\u4e2d\u3088\u308a\n\n1. \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8ffd\u6c42\u3059\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u3084\u958b\u767a\u8005\n2. JVM \u81ea\u4f53\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u8208\u5473\u304c\u3042\u308a\u3001\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306a\u3057\u3067 JVM \u306e\u632f\u308b\u821e\u3044\u3092\u5909\u3048\u305f\u3044\u4eba\n3. \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5206\u6790\u3092\u3053\u308c\u304b\u3089\u59cb\u3081\u308b\u4eba\n\n## \u30ea\u30f3\u30af\n- [how to write a small benchmark of getbytes with jmh?](http://stackoverflow.com/questions/29213440/how-to-write-a-small-benchmark-of-getbytes-with-jmh)\n- [Java\u306e\u30d9\u30f3\u30c1\u30c4\u30fc\u30eb\u3001JMH\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u8a08\u6e2c\u3057\u3066\u307f\u308b](http://qiita.com/deaf_tadashi/items/19ed0529b5c8e1937f4f)\n- [\u30de\u30a4\u30af\u30ed\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c4\u30fc\u30eb\u3001JMH\u3092\u8a66\u3059](http://d.hatena.ne.jp/Kazuhira/20140102/1388662362)\n\n\n----\n# \u304a\u307e\u3051\n\n## \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u306e\u5b9f\u884c jar \u4f5c\u6210\n\u3053\u3053\u307e\u3067\u8ff0\u3079\u305f\u901a\u308a\u3001 JMH \u3067\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306f\u3001Gradle \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u7528\u3044\u308c\u3070 ```$ gradle jmh``` \u30b3\u30de\u30f3\u30c9\u3060\u3051\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n```$ gradle jmhJar``` \u30b3\u30de\u30f3\u30c9\u3067 jmh \u7528\u306e executable jar \u3092\u751f\u6210\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306e\u5834\u5408\u306f ```jmx_example-0.0.1-jmh.jar``` \u3068\u3044\u3046 jar \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u305d\u306e jar \u3092 -jar \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u3066\u52d5\u304b\u3059\u3053\u3068\u3067\u3082\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306f\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u3002\n\n```:\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\u4f8b\n$ java -jar jmx_example-0.0.1-jmh.jar -wi 5 -i 5 -f 1  -bm ss -tu ms\n```\n\n### Method parameters should be @State classes.\n@Benchmark \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u305f\u30e1\u30bd\u30c3\u30c9\u3067\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u307e\u3059\u3002\n\n```\nMethod parameters should be @State classes.\n   [org.openjdk.jmh.generators.reflection.RFMethodInfo@3feba861]\n\n:jmhRunBytecodeGenerator FAILED\n```\n\n\u79c1\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u3069\u3046\u3082 String \u5f15\u6570\u306e\u3042\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305d\u3046\u3068\u3059\u308b\u3068\u30c0\u30e1\u306a\u3088\u3046\u3067\u3057\u305f\u3002\u4ed5\u65b9\u306a\u3044\u306e\u3067\u5f15\u6570\u306a\u3057\u306e\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u3042\u308a\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8fc2\u56de\u3057\u3066\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n", "tags": ["Java", "jmh", "Reactor", "RxJava"]}