{"context": " More than 1 year has passed since last update.\u30d6\u30ec\u30bc\u30f3\u30cf\u30e0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u3066\u3001Ruby-Processing \u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\nbresenham.rb\nload_library :vecmath\n\n# \u53c2\u8003\n#\n# \u30d7\u30ec\u30bc\u30f3\u30cf\u30e0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# http://aidiary.hatenablog.com/entry/20050402/1251514618\n\ndef setup\n  size 400, 400\nend\n\n# \u30d7\u30ec\u30bc\u30f3\u30cf\u30e0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\n# fm \u304b\u3089 to \u3078\u306e\u30e9\u30a4\u30f3\u3092\u6c42\u3081\u308b\ndef build_line(fm, to)\n  next_x = fm.x\n  next_y = fm.y\n  delta_x = to.x - fm.x\n  delta_y = to.y - fm.y\n\n  step_x = delta_x < 0 ? -1 : 1\n  step_y = delta_y < 0 ? -1 : 1\n\n  delta_x = (delta_x * 2).abs\n  delta_y = (delta_y * 2).abs\n\n  line =[Vec2D.new(next_x, next_y)]\n\n  if delta_x > delta_y\n    fraction = delta_y - delta_x / 2\n    while next_x != to.x\n      if fraction >= 0\n        next_y += step_y\n        fraction -= delta_x\n      end\n      next_x += step_x\n      fraction += delta_y\n      line << Vec2D.new(next_x, next_y)\n    end\n  else\n    fraction = delta_x - delta_y / 2\n    while next_y != to.y\n      if fraction >= 0\n        next_x += step_x\n        fraction -= delta_y\n      end\n      next_y += step_y\n      fraction += delta_x\n      line << Vec2D.new(next_x, next_y)\n    end\n  end\n  line\nend\n\ndef draw\n  background 255\n\n  translate width/2, height/2\n\n  n = 15 # \u30c9\u30c3\u30c8\u3072\u3068\u3064\u5206\u306e\u30b5\u30a4\u30ba\n  rows = height / n\n  cols = width / n\n\n  rect_mode CENTER\n  no_fill\n  stroke 60\n  for i in 0..rows\n    for j in 0..cols\n      rect (j-cols/2) * n, (i-rows/2) * n, n, n\n    end\n  end\n\n  x = mouse_x - width/2 + n/2\n  y = mouse_y - height/2 + n/2\n  fm = Vec2D.new(0, 0)\n  to = Vec2D.new(x / n, y / n)\n  line = build_line(fm, to)\n  if line\n    fill(100)\n    line.each {|v|\n      rect v.x * n, v.y * n, n, n\n    }\n  end\n\n  # \u30de\u30a6\u30b9\u306e\u4f4d\u7f6e\u307e\u3067 line() \u3067\u76f4\u7dda\u63cf\u753b(\u30d6\u30ec\u30bc\u30f3\u30cf\u30e0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u306e\u6bd4\u8f03\u7528)\n  stroke 0x28, 0x28, 0xcc\n  stroke_width 2\n  line 0, 0, mouse_x - width/2, mouse_y - height/2\n  stroke 0\n  stroke_width 1\nend\n\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ rp5 run bresenham.rb\n\n\n\u30ea\u30f3\u30af\n\nBresenham's Algorithm in JRubyArt\n\n\n[\u30d6\u30ec\u30bc\u30f3\u30cf\u30e0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0](http://aidiary.hatenablog.com/entry/20050402/1251514618) \u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u3066\u3001Ruby-Processing \u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n![bresenham.gif](https://qiita-image-store.s3.amazonaws.com/0/1900/afcde4bb-c029-732c-cf37-c017771a9f54.gif \"bresenham.gif\")\n\n```ruby:bresenham.rb\nload_library :vecmath\n\n# \u53c2\u8003\n#\n# \u30d7\u30ec\u30bc\u30f3\u30cf\u30e0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# http://aidiary.hatenablog.com/entry/20050402/1251514618\n\ndef setup\n  size 400, 400\nend\n\n# \u30d7\u30ec\u30bc\u30f3\u30cf\u30e0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\n# fm \u304b\u3089 to \u3078\u306e\u30e9\u30a4\u30f3\u3092\u6c42\u3081\u308b\ndef build_line(fm, to)\n  next_x = fm.x\n  next_y = fm.y\n  delta_x = to.x - fm.x\n  delta_y = to.y - fm.y\n\n  step_x = delta_x < 0 ? -1 : 1\n  step_y = delta_y < 0 ? -1 : 1\n\n  delta_x = (delta_x * 2).abs\n  delta_y = (delta_y * 2).abs\n\n  line =[Vec2D.new(next_x, next_y)]\n\n  if delta_x > delta_y\n    fraction = delta_y - delta_x / 2\n    while next_x != to.x\n      if fraction >= 0\n        next_y += step_y\n        fraction -= delta_x\n      end\n      next_x += step_x\n      fraction += delta_y\n      line << Vec2D.new(next_x, next_y)\n    end\n  else\n    fraction = delta_x - delta_y / 2\n    while next_y != to.y\n      if fraction >= 0\n        next_x += step_x\n        fraction -= delta_y\n      end\n      next_y += step_y\n      fraction += delta_x\n      line << Vec2D.new(next_x, next_y)\n    end\n  end\n  line\nend\n\ndef draw\n  background 255\n\n  translate width/2, height/2\n\n  n = 15 # \u30c9\u30c3\u30c8\u3072\u3068\u3064\u5206\u306e\u30b5\u30a4\u30ba\n  rows = height / n\n  cols = width / n\n\n  rect_mode CENTER\n  no_fill\n  stroke 60\n  for i in 0..rows\n    for j in 0..cols\n      rect (j-cols/2) * n, (i-rows/2) * n, n, n\n    end\n  end\n\n  x = mouse_x - width/2 + n/2\n  y = mouse_y - height/2 + n/2\n  fm = Vec2D.new(0, 0)\n  to = Vec2D.new(x / n, y / n)\n  line = build_line(fm, to)\n  if line\n    fill(100)\n    line.each {|v|\n      rect v.x * n, v.y * n, n, n\n    }\n  end\n\n  # \u30de\u30a6\u30b9\u306e\u4f4d\u7f6e\u307e\u3067 line() \u3067\u76f4\u7dda\u63cf\u753b(\u30d6\u30ec\u30bc\u30f3\u30cf\u30e0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u306e\u6bd4\u8f03\u7528)\n  stroke 0x28, 0x28, 0xcc\n  stroke_width 2\n  line 0, 0, mouse_x - width/2, mouse_y - height/2\n  stroke 0\n  stroke_width 1\nend\n```\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\n$ rp5 run bresenham.rb\n```\n\n## \u30ea\u30f3\u30af\n\n- [Bresenham's Algorithm in JRubyArt](http://learning-ruby-processing.blogspot.jp/2015/09/bresenhams-algorithm-in-jrubyart.html?spref=tw)\n\n\n", "tags": ["Ruby-Processing", "processing"]}