{"context": " More than 1 year has passed since last update.SPARQL 1.1 Query Lanuage 17.4 Function Definitions \u306e\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u629c\u7c8b\u3057\u305f\u5099\u5fd8\u9332\n\nFunctional Forms\n\n\nbound\nxsd:boolean  BOUND (variable var)\n\n\n\nIF\nrdfTerm  IF (expression1, expression2, expression3)\n\n\n\nCOALESCE\nrdfTerm  COALESCE(expression, ....)\n\n\n\nNOT_EXISTS_and_EXISTS\n xsd:boolean  NOT EXISTS { pattern }\n xsd:boolean  EXISTS { pattern }\n\n\n\nlogical-or\n xsd:boolean  xsd:boolean left || xsd:boolean right\n\n\n\nlogical-and\n xsd:boolean  xsd:boolean left && xsd:boolean right\n\n\n\nRDFterm-equal\n xsd:boolean  RDF term term1 = RDF term term2\n\n\n\nsameTerm\n xsd:boolean  sameTerm (RDF term term1, RDF term term2)\n\n\n\nIN\nboolean  rdfTerm IN (expression, ...)\n\n\n\nNOT_IN\nboolean  rdfTerm NOT IN (expression, ...)\n\n\n\nFunctions on RDF Terms\n\n\nisIRI\n xsd:boolean  isIRI (RDF term term)\n xsd:boolean  isURI (RDF term term)\n\n\n\nisBlank\n xsd:boolean  isBlank (RDF term term)\n\n\n\nisLiteral\n xsd:boolean  isLiteral (RDF term term)\n\n\n\nisNumeric\n xsd:boolean  isNumeric (RDF term term)\n\n\n\nstr\n simple literal  STR (literal ltrl)\n simple literal  STR (IRI rsrc)\n\n\n\n\nlang\n simple literal  LANG (literal ltrl)\n\n\n\n\ndatatype\n iri  DATATYPE (literal literal)\n\n\n\n\nIRI\n iri  IRI(simple literal)\n iri  IRI(xsd:string)\n iri  IRI(iri)\n iri  URI(simple literal)\n iri  URI(xsd:string)\n iri  URI(iri)\n\n\n\nBNODE\nblank node  BNODE()\nblank node  BNODE(simple literal)\nblank node  BNODE(xsd:string)\n\n\n\nSTRDT\nliteral  STRDT(simple literal lexicalForm, IRI datatypeIRI)\n\n\n\nSTRLANG\nliteral  STRLANG(simple literal lexicalForm, simple literal langTag)\n\n\n\nUUID\niri  UUID()\n\n\n\nSTRUUID\nsimple literal  STRUUID()\n\n\n\nFunctions on Strings\n\n\nSTRLEN\nxsd:integer  STRLEN(string literal str)\n\n\n\nSUBSTR\nstring literal  SUBSTR(string literal source, xsd:integer startingLoc)\nstring literal  SUBSTR(string literal source, xsd:integer startingLoc, xsd:integer length)\n\n\n\nUCASE\nstring literal  UCASE(string literal str)\n\n\n\nLCASE\nstring literal  LCASE(string literal str)\n\n\n\nSTRSTARTS\nxsd:boolean  STRSTARTS(string literal arg1, string literal arg2)\n\n\n\nSTRENDS\nxsd:boolean  STRENDS(string literal arg1, string literal arg2)\n\n\n\nCONTAINS\nxsd:boolean  CONTAINS(string literal arg1, string literal arg2)\n\n\n\nSTRBEFORE\nliteral  STRBEFORE(string literal arg1, string literal arg2)\n\n\n\nSTRAFTER\nliteral  STRAFTER(string literal arg1, string literal arg2)\n\n\n\nENCODE_FOR_URI\nsimple literal  ENCODE_FOR_URI(string literal ltrl)\n\n\n\nCONCAT\nstring literal  CONCAT(string literal ltrl1 ... string literal ltrln)\n\n\n\nlangMatches\n xsd:boolean  langMatches (simple literal language-tag, simple literal language-range)\n\n\n\n\nREGEX\n xsd:boolean  REGEX (string literal text, simple literal pattern)\n xsd:boolean  REGEX (string literal text, simple literal pattern, simple literal flags)\n\n\n\n\nREPLACE\n string literal  REPLACE (string literal arg, simple literal pattern, simple literal replacement )\n string literal  REPLACE (string literal arg, simple literal pattern, simple literal replacement,  simple literal flags)\n\n\n\nFunctions on Numerics\n\n\nabs\n numeric  ABS (numeric term)\n\n\n\nround\n numeric  ROUND (numeric term)\n\n\n\nceil\n numeric  CEIL (numeric term)\n\n\n\nfloor\n numeric  FLOOR (numeric term)\n\n\n\nRAND\n xsd:double  RAND ( )\n\n\n\nFunctions on Dates and Times\n\n\nnow\n xsd:dateTime  NOW ()\n\n\n\nyear\n xsd:integer  YEAR (xsd:dateTime arg)\n\n\n\nmonth\n xsd:integer  MONTH (xsd:dateTime arg)\n\n\n\nday\n xsd:integer  DAY (xsd:dateTime arg)\n\n\n\nhours\n xsd:integer  HOURS (xsd:dateTime arg)\n\n\n\nminutes\n xsd:integer  MINUTES (xsd:dateTime arg)\n\n\n\nseconds\n xsd:decimal  SECONDS (xsd:dateTime arg)\n\n\n\ntimezone\n xsd:dayTimeDuration  TIMEZONE (xsd:dateTime arg)\n\n\n\ntz\n simple literal  TZ (xsd:dateTime arg)\n\n\n\nHash Functions\n\n\nMD5\n simple literal  MD5 (simple literal arg)\n simple literal  MD5 (xsd:string arg)\n\n\n\nSHA1\n simple literal  SHA1 (simple literal arg)\n simple literal  SHA1 (xsd:string arg)\n\n\n\nSHA256\n simple literal  SHA256 (simple literal arg)\n simple literal  SHA256 (xsd:string arg)\n\n\n\nSHA384\n simple literal  SHA384 (simple literal arg)\n simple literal  SHA384 (xsd:string arg)\n\n\n\nSHA512\n simple literal  SHA512 (simple literal arg)\n simple literal  SHA512 (xsd:string arg)\n\n\n[SPARQL 1.1 Query Lanuage 17.4 Function Definitions](http://www.w3.org/TR/sparql11-query/#SparqlOps) \u306e\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u629c\u7c8b\u3057\u305f\u5099\u5fd8\u9332\n\n# [Functional Forms](http://www.w3.org/TR/sparql11-query/#func-forms)\n\n```:bound\nxsd:boolean  BOUND (variable var)\n```\n\n```:IF\nrdfTerm  IF (expression1, expression2, expression3)\n```\n\n```:COALESCE\nrdfTerm  COALESCE(expression, ....)\n```\n\n```:NOT_EXISTS_and_EXISTS\n xsd:boolean  NOT EXISTS { pattern }\n xsd:boolean  EXISTS { pattern }\n```\n\n```:logical-or\n xsd:boolean  xsd:boolean left || xsd:boolean right\n```\n\n```:logical-and\n xsd:boolean  xsd:boolean left && xsd:boolean right\n```\n\n```:RDFterm-equal\n xsd:boolean  RDF term term1 = RDF term term2\n```\n\n```:sameTerm\n xsd:boolean  sameTerm (RDF term term1, RDF term term2)\n```\n\n```:IN\nboolean  rdfTerm IN (expression, ...)\n```\n\n```:NOT_IN\nboolean  rdfTerm NOT IN (expression, ...)\n```\n\n# [Functions on RDF Terms](http://www.w3.org/TR/sparql11-query/#func-rdfTerms)\n\n```:isIRI\n xsd:boolean  isIRI (RDF term term)\n xsd:boolean  isURI (RDF term term)\n```\n\n```:isBlank\n xsd:boolean  isBlank (RDF term term)\n```\n\n```:isLiteral\n xsd:boolean  isLiteral (RDF term term)\n```\n\n```:isNumeric\n xsd:boolean  isNumeric (RDF term term)\n```\n\n```:str\n simple literal  STR (literal ltrl)\n simple literal  STR (IRI rsrc)\n\n```\n\n```:lang\n simple literal  LANG (literal ltrl)\n\n```\n\n```:datatype\n iri  DATATYPE (literal literal)\n\n```\n\n```:IRI\n iri  IRI(simple literal)\n iri  IRI(xsd:string)\n iri  IRI(iri)\n iri  URI(simple literal)\n iri  URI(xsd:string)\n iri  URI(iri)\n```\n\n```:BNODE\nblank node  BNODE()\nblank node  BNODE(simple literal)\nblank node  BNODE(xsd:string)\n```\n\n```:STRDT\nliteral  STRDT(simple literal lexicalForm, IRI datatypeIRI)\n```\n\n```:STRLANG\nliteral  STRLANG(simple literal lexicalForm, simple literal langTag)\n```\n\n```:UUID\niri  UUID()\n```\n\n```:STRUUID\nsimple literal  STRUUID()\n```\n\n# [Functions on Strings](http://www.w3.org/TR/sparql11-query/#func-strings)\n\n```:STRLEN\nxsd:integer  STRLEN(string literal str)\n```\n\n```:SUBSTR\nstring literal  SUBSTR(string literal source, xsd:integer startingLoc)\nstring literal  SUBSTR(string literal source, xsd:integer startingLoc, xsd:integer length)\n```\n\n```:UCASE\nstring literal  UCASE(string literal str)\n```\n\n```:LCASE\nstring literal  LCASE(string literal str)\n```\n\n```:STRSTARTS\nxsd:boolean  STRSTARTS(string literal arg1, string literal arg2)\n```\n\n```:STRENDS\nxsd:boolean  STRENDS(string literal arg1, string literal arg2)\n```\n\n```:CONTAINS\nxsd:boolean  CONTAINS(string literal arg1, string literal arg2)\n```\n\n```:STRBEFORE\nliteral  STRBEFORE(string literal arg1, string literal arg2)\n```\n\n```:STRAFTER\nliteral  STRAFTER(string literal arg1, string literal arg2)\n```\n\n```:ENCODE_FOR_URI\nsimple literal  ENCODE_FOR_URI(string literal ltrl)\n```\n\n```:CONCAT\nstring literal  CONCAT(string literal ltrl1 ... string literal ltrln)\n```\n\n```:langMatches\n xsd:boolean  langMatches (simple literal language-tag, simple literal language-range)\n\n```\n\n```:REGEX\n xsd:boolean  REGEX (string literal text, simple literal pattern)\n xsd:boolean  REGEX (string literal text, simple literal pattern, simple literal flags)\n\n```\n\n```:REPLACE\n string literal  REPLACE (string literal arg, simple literal pattern, simple literal replacement )\n string literal  REPLACE (string literal arg, simple literal pattern, simple literal replacement,  simple literal flags)\n```\n\n# [Functions on Numerics](http://www.w3.org/TR/sparql11-query/#func-numerics)\n\n```:abs\n numeric  ABS (numeric term)\n```\n\n```:round\n numeric  ROUND (numeric term)\n```\n\n```:ceil\n numeric  CEIL (numeric term)\n```\n\n```:floor\n numeric  FLOOR (numeric term)\n```\n\n```:RAND\n xsd:double  RAND ( )\n```\n\n# [Functions on Dates and Times](http://www.w3.org/TR/sparql11-query/#func-date-time)\n\n```:now\n xsd:dateTime  NOW ()\n```\n\n```:year\n xsd:integer  YEAR (xsd:dateTime arg)\n```\n\n```:month\n xsd:integer  MONTH (xsd:dateTime arg)\n```\n\n```:day\n xsd:integer  DAY (xsd:dateTime arg)\n```\n\n```:hours\n xsd:integer  HOURS (xsd:dateTime arg)\n```\n\n```:minutes\n xsd:integer  MINUTES (xsd:dateTime arg)\n```\n\n```:seconds\n xsd:decimal  SECONDS (xsd:dateTime arg)\n```\n\n```:timezone\n xsd:dayTimeDuration  TIMEZONE (xsd:dateTime arg)\n```\n\n```:tz\n simple literal  TZ (xsd:dateTime arg)\n```\n\n# [Hash Functions](http://www.w3.org/TR/sparql11-query/#func-hash)\n\n```:MD5\n simple literal  MD5 (simple literal arg)\n simple literal  MD5 (xsd:string arg)\n```\n\n```:SHA1\n simple literal  SHA1 (simple literal arg)\n simple literal  SHA1 (xsd:string arg)\n```\n\n```:SHA256\n simple literal  SHA256 (simple literal arg)\n simple literal  SHA256 (xsd:string arg)\n```\n\n```:SHA384\n simple literal  SHA384 (simple literal arg)\n simple literal  SHA384 (xsd:string arg)\n```\n\n```:SHA512\n simple literal  SHA512 (simple literal arg)\n simple literal  SHA512 (xsd:string arg)\n```\n", "tags": ["SPARQL"]}