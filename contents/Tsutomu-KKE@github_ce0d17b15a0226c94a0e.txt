{"context": "\n\n \u306f\u3058\u3081\u306b\n\u300c\u7d44\u5408\u305b\u6700\u9069\u5316\u3092\u4f7f\u304a\u3046\u300d\u3067\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u306e\u89e3\u6cd5\u3068\u3057\u3066\u3001\u300c\u8caa\u6b32\u6cd5\u306f\u826f\u3044\u65b9\u6cd5\u3067\u3042\u308b\u6700\u9069\u3067\u306f\u306a\u3044\u300d\u3068\u3044\u3044\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306e\u3068\u3053\u308d\u3001\u3069\u3046\u306a\u3093\u3060\u308d\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u78ba\u304b\u3081\u3066\u307f\u307e\u3059\u3002\n\n \u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u3092Python\u3067\u89e3\u304f\n\n\u30a2\u30a4\u30c6\u30e0\u306f100\u500b\u3068\u3057\u307e\u3059\u3002\n\u30a2\u30a4\u30c6\u30e0\u306e\u5927\u304d\u3055\u306f\u3001(0.1, 1.0)\u306e\u4e00\u69d8\u4e71\u6570\u3068\u3057\u307e\u3059\u3002\n\u30a2\u30a4\u30c6\u30e0\u306e\u4fa1\u5024\u306f\u3001\u5927\u304d\u3055\u306b\u5bfe\u6570\u6b63\u898f\u4e71\u6570\u3092\u639b\u3051\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u5bb9\u91cf\u30920.1\u523b\u307f\u3067\u5909\u3048\u3066\u3001\u7e70\u308a\u8fd4\u3057\u89e3\u304d\u307e\u3059\u3002\n\u7d50\u679c\u3092matplotlib\u3067\u56f3\u793a\u3057\u307e\u3059\u3002\n\n\n \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\npython\n%matplotlib inline\nimport math, numpy as np, matplotlib.pyplot as plt\nfrom pulp import *\nnp.random.seed(1)\nn = 100 # \u30a2\u30a4\u30c6\u30e0\u6570\nsiz = np.random.uniform(0.1, 1.0, n)\nprf = siz * np.random.lognormal(1, 0.1, n)\neff = prf / siz\nsiz, prf, eff = np.array([siz, prf, eff]).T[eff.argsort()].T\nr1, r2, p1, p2 = [], [], [], []\n\n\n\n \u8fd1\u4f3c\u89e3\u6cd5(\u8caa\u6b32\u6cd5)\u306e\u7d50\u679c\n\u8caa\u6b32\u6cd5\u3067\u306f\u3001\u52b9\u7387(\u4fa1\u5024/\u5927\u304d\u3055)\u306e\u826f\u3044\u9806\u306b\u8abf\u3079\u3066\u3044\u304d\u3001\u5bb9\u91cf\u3092\u8d85\u904e\u3057\u306a\u3044\u3088\u3046\u306b\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\npython\nfor sz in range(math.ceil(sum(siz)*10)):\n    v, r, rm = 0, [], sz / 10\n    for i in range(len(siz)-1, -1, -1):\n        r.append(int(rm < siz[i]))\n        if r[-1] == 0:\n            rm -= siz[i]\n            v += prf[i]\n    r1.append(list(reversed(r)))\n    p1.append(v)\nplt.imshow(np.array(r1).T, cmap='gray')\n\n\n\n\n538\u56de\u89e3\u3044\u3066 \u6570\u30df\u30ea\u79d2\u3067\u3057\u305f\u3002\n\u7e26\u306f\u52b9\u7387\u306e\u826f\u3044\u9806\u306e\u30a2\u30a4\u30c6\u30e0\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u6a2a\u306f\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u5bb9\u91cf\u00d710\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u9ed2\u304c\u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3001\u767d\u304c\u9078\u629e\u3055\u308c\u306a\u304b\u3063\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u8868\u3057\u307e\u3059\u3002\n\u8caa\u6b32\u6cd5\u306f\u3001\u52b9\u7387\u306e\u826f\u3044\u9806\u306b\u8a70\u3081\u308b\u306e\u3067\u3001\u6bd4\u8f03\u7684\u5883\u754c\u304c\u306f\u3063\u304d\u308a\u3057\u307e\u3059\u3002\n\n\n \u53b3\u5bc6\u89e3\u6cd5\u306e\u7d50\u679c\npulp\u3067\u6df7\u5408\u6574\u6570\u6700\u9069\u5316\u554f\u984c\u3068\u3057\u3066\u89e3\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\npython\nm = LpProblem(sense=LpMaximize)\nv = [LpVariable('v%d'%i, cat=LpBinary) for i in range(len(siz))]\nm += lpDot(prf, v)\ne = lpDot(siz, v) <= 1\nm += e\nr = []\nfor sz in range(math.ceil(sum(siz)*10)):\n    e.changeRHS(sz / 10)\n    m.solve()\n    r2.append([1 - int(value(x)) for x in v])\n    p2.append(value(m.objective))\nplt.imshow(np.array(r2).T, cmap='gray')\n\n\n\n\n538\u56de\u89e3\u3044\u3066 Gurobi 6.5.1\u306716\u79d2\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306eCBC\u3067\u306f58\u79d2\u3067\u3057\u305f\u3002\n\u5883\u754c\u4ed8\u8fd1\u3067\u767d\u3068\u9ed2\u304c\u6df7\u3058\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u52b9\u7387\u7684\u3067\u306a\u3044\u3082\u306e\u3092\u9078\u3093\u3060\u65b9\u304c\u5168\u4f53\u3068\u3057\u3066\u6700\u9069\u3067\u3042\u308b\u3053\u3068\u3092\u3042\u3089\u308f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n \u8caa\u6b32\u6cd5\u306e\u7cbe\u5ea6\n\u8caa\u6b32\u6cd5\u306e\u89e3\u306e\u5024\u3092\u53b3\u5bc6\u89e3\u306e\u5024\u3067\u5272\u3063\u305f\u3082\u306e\u3092\u30b0\u30e9\u30d5\u5316\u3057\u307e\u3059\u3002\u7e26\u304c\u6bd4\u3067\u3001\u6a2a\u304c\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u5bb9\u91cf\u00d710\u3067\u3059\u3002\n\npython\nplt.ylim((0, 1.1))\nplt.plot(np.array(p1[2:]) / np.array(p2[2:]))\n\n\n\n\u5bb9\u91cf\u304c\u5c0f\u3055\u304f\u3066\u3001\u5165\u308b\u30a2\u30a4\u30c6\u30e0\u6570\u304c\u5c11\u306a\u3044\u3068\u3001\u591a\u5c11\u3001\u8aa4\u5dee\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3042\u308b\u7a0b\u5ea6\u306e\u30a2\u30a4\u30c6\u30e0\u6570\u304c\u3042\u308c\u3070\u3001\u304b\u306a\u308a\u7cbe\u5ea6\u304c\u3088\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u4ee5\u4e0a\n# <i class='fa fa-wrench' /> \u306f\u3058\u3081\u306b\n\u300c[\u7d44\u5408\u305b\u6700\u9069\u5316\u3092\u4f7f\u304a\u3046](http://qiita.com/Tsutomu-KKE@github/items/bfbf4c185ed7004b5721)\u300d\u3067\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u306e\u89e3\u6cd5\u3068\u3057\u3066\u3001\u300c[\u8caa\u6b32\u6cd5](https://ja.wikipedia.org/wiki/%E8%B2%AA%E6%AC%B2%E6%B3%95)\u306f\u826f\u3044\u65b9\u6cd5\u3067\u3042\u308b\u6700\u9069\u3067\u306f\u306a\u3044\u300d\u3068\u3044\u3044\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306e\u3068\u3053\u308d\u3001\u3069\u3046\u306a\u3093\u3060\u308d\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u78ba\u304b\u3081\u3066\u307f\u307e\u3059\u3002\n\n# <i class='fa fa-wrench' /> \u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u3092Python\u3067\u89e3\u304f\n\n- \u30a2\u30a4\u30c6\u30e0\u306f100\u500b\u3068\u3057\u307e\u3059\u3002\n- \u30a2\u30a4\u30c6\u30e0\u306e\u5927\u304d\u3055\u306f\u3001(0.1, 1.0)\u306e\u4e00\u69d8\u4e71\u6570\u3068\u3057\u307e\u3059\u3002\n- \u30a2\u30a4\u30c6\u30e0\u306e\u4fa1\u5024\u306f\u3001\u5927\u304d\u3055\u306b\u5bfe\u6570\u6b63\u898f\u4e71\u6570\u3092\u639b\u3051\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n- \u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u5bb9\u91cf\u30920.1\u523b\u307f\u3067\u5909\u3048\u3066\u3001\u7e70\u308a\u8fd4\u3057\u89e3\u304d\u307e\u3059\u3002\n- \u7d50\u679c\u3092matplotlib\u3067\u56f3\u793a\u3057\u307e\u3059\u3002\n\n# <i class='fa fa-wrench' /> \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n```py3:python\n%matplotlib inline\nimport math, numpy as np, matplotlib.pyplot as plt\nfrom pulp import *\nnp.random.seed(1)\nn = 100 # \u30a2\u30a4\u30c6\u30e0\u6570\nsiz = np.random.uniform(0.1, 1.0, n)\nprf = siz * np.random.lognormal(1, 0.1, n)\neff = prf / siz\nsiz, prf, eff = np.array([siz, prf, eff]).T[eff.argsort()].T\nr1, r2, p1, p2 = [], [], [], []\n```\n\n# <i class='fa fa-wrench' /> \u8fd1\u4f3c\u89e3\u6cd5(\u8caa\u6b32\u6cd5)\u306e\u7d50\u679c\n\n\u8caa\u6b32\u6cd5\u3067\u306f\u3001\u52b9\u7387(\u4fa1\u5024/\u5927\u304d\u3055)\u306e\u826f\u3044\u9806\u306b\u8abf\u3079\u3066\u3044\u304d\u3001\u5bb9\u91cf\u3092\u8d85\u904e\u3057\u306a\u3044\u3088\u3046\u306b\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n```py3:python\nfor sz in range(math.ceil(sum(siz)*10)):\n    v, r, rm = 0, [], sz / 10\n    for i in range(len(siz)-1, -1, -1):\n        r.append(int(rm < siz[i]))\n        if r[-1] == 0:\n            rm -= siz[i]\n            v += prf[i]\n    r1.append(list(reversed(r)))\n    p1.append(v)\nplt.imshow(np.array(r1).T, cmap='gray')\n```\n\n![figure_1-1.png](https://qiita-image-store.s3.amazonaws.com/0/13955/8482fef3-cbfb-9a14-e88c-79853a4edda2.png)\n\n- 538\u56de\u89e3\u3044\u3066 \u6570\u30df\u30ea\u79d2\u3067\u3057\u305f\u3002\n- \u7e26\u306f\u52b9\u7387\u306e\u826f\u3044\u9806\u306e\u30a2\u30a4\u30c6\u30e0\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u6a2a\u306f\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u5bb9\u91cf\u00d710\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n- \u9ed2\u304c\u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3001\u767d\u304c\u9078\u629e\u3055\u308c\u306a\u304b\u3063\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u8868\u3057\u307e\u3059\u3002\n- \u8caa\u6b32\u6cd5\u306f\u3001\u52b9\u7387\u306e\u826f\u3044\u9806\u306b\u8a70\u3081\u308b\u306e\u3067\u3001\u6bd4\u8f03\u7684\u5883\u754c\u304c\u306f\u3063\u304d\u308a\u3057\u307e\u3059\u3002\n\n# <i class='fa fa-wrench' /> \u53b3\u5bc6\u89e3\u6cd5\u306e\u7d50\u679c\npulp\u3067\u6df7\u5408\u6574\u6570\u6700\u9069\u5316\u554f\u984c\u3068\u3057\u3066\u89e3\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3:python\nm = LpProblem(sense=LpMaximize)\nv = [LpVariable('v%d'%i, cat=LpBinary) for i in range(len(siz))]\nm += lpDot(prf, v)\ne = lpDot(siz, v) <= 1\nm += e\nr = []\nfor sz in range(math.ceil(sum(siz)*10)):\n    e.changeRHS(sz / 10)\n    m.solve()\n    r2.append([1 - int(value(x)) for x in v])\n    p2.append(value(m.objective))\nplt.imshow(np.array(r2).T, cmap='gray')\n```\n\n![napsack.png](https://qiita-image-store.s3.amazonaws.com/0/13955/348e82c0-b35a-dd65-4c17-43e6c8a29852.png)\n\n- 538\u56de\u89e3\u3044\u3066 Gurobi 6.5.1\u306716\u79d2\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306eCBC\u3067\u306f58\u79d2\u3067\u3057\u305f\u3002\n- \u5883\u754c\u4ed8\u8fd1\u3067\u767d\u3068\u9ed2\u304c\u6df7\u3058\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u52b9\u7387\u7684\u3067\u306a\u3044\u3082\u306e\u3092\u9078\u3093\u3060\u65b9\u304c\u5168\u4f53\u3068\u3057\u3066\u6700\u9069\u3067\u3042\u308b\u3053\u3068\u3092\u3042\u3089\u308f\u3057\u3066\u3044\u307e\u3059\u3002\n\n# <i class='fa fa-wrench' /> \u8caa\u6b32\u6cd5\u306e\u7cbe\u5ea6\n\u8caa\u6b32\u6cd5\u306e\u89e3\u306e\u5024\u3092\u53b3\u5bc6\u89e3\u306e\u5024\u3067\u5272\u3063\u305f\u3082\u306e\u3092\u30b0\u30e9\u30d5\u5316\u3057\u307e\u3059\u3002\u7e26\u304c\u6bd4\u3067\u3001\u6a2a\u304c\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u5bb9\u91cf\u00d710\u3067\u3059\u3002\n\n```py3:python\nplt.ylim((0, 1.1))\nplt.plot(np.array(p1[2:]) / np.array(p2[2:]))\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/971bcbeb-d010-a778-b6e8-548ee4b4327b.png)\n\n\u5bb9\u91cf\u304c\u5c0f\u3055\u304f\u3066\u3001\u5165\u308b\u30a2\u30a4\u30c6\u30e0\u6570\u304c\u5c11\u306a\u3044\u3068\u3001\u591a\u5c11\u3001\u8aa4\u5dee\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3042\u308b\u7a0b\u5ea6\u306e\u30a2\u30a4\u30c6\u30e0\u6570\u304c\u3042\u308c\u3070\u3001\u304b\u306a\u308a\u7cbe\u5ea6\u304c\u3088\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0a\n", "tags": ["Python", "\u7d44\u5408\u305b\u6700\u9069\u5316", "\u6700\u9069\u5316", "\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c"]}