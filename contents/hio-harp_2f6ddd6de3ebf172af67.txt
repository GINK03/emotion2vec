{"tags": ["SICP"], "context": "\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #7 (1.3.1 ~ 1.3.2)\n\u524d\u56de: \u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #6 (1.2.6, \u7df4\u7fd2\u554f\u984c1.25~1.29), \u304f\u30fc\u3080\u6c0f\u306e\u307e\u3068\u3081, \u81ea\u5206\u306e\u307e\u3068\u3081\n\n1.3 \u9ad8\u968e\u624b\u7d9a\u304d\u306b\u3088\u308b\u62bd\u8c61\u306e\u5b9a\u5f0f\u5316\n\n1.3.1 \u5f15\u6570\u3068\u3057\u3066\u306e\u624b\u7d9a\u304d\n; [sec-1.3.1.scm]\n(define (sec-1.3.1)\n    (display \"(sum-cubes 1 10) ==> \")\n    (display (sum-cubes 1 10))\n    (newline)\n    (display \"(sum-integers 1 10) ==> \")\n    (display (sum-integers 1 10))\n    (newline)\n    (display \"(* 8 (pi-sum 1 1000)) ==> \")\n    (display (* 8 (pi-sum 1 1000)))\n    (newline)\n    (display \"(integral cube 0 1 0.01) ==> \")\n    (display (integral cube 0 1 0.001))\n    (newline)\n    (display \"(integral cube 0 1 0.001) ==> \")\n    (display (integral cube 0 1 0.0001))\n    (newline)\n    #t)\n\n\n(define (sum term a next b)\n    (if (> a b)\n        0\n        (+ (term a)\n            (sum term (next a) next b))))\n\n\n(define (cube a)\n    (* a a a))\n\n\n(define (inc n) (+ n 1))\n(define (sum-cubes a b)\n    (sum cube a inc b))\n\n\n(define (identity x) x)\n(define (sum-integers a b)\n    (sum identity a inc b))\n\n\n(define (pi-sum a b)\n    (define (pi-term x)\n        (/ 1.0 (* x (+ x 2))))\n    (define (pi-next x)\n        (+ x 4))\n    (sum pi-term a pi-next b))\n\n\n(define (integral f a b dx)\n    (define (add-dx x)\n        (+ x dx))\n    (* (sum f (+ a (/ dx 2.0)) add-dx b)\n        dx))\n\ngosh> (sec-1.3.1)\n(sum-cubes 1 10) ==> 3025\n(sum-integers 1 10) ==> 55\n(* 8 (pi-sum 1 1000)) ==> 3.139592655589783\n(integral cube 0 1 0.01) ==> 0.249999875000001\n(integral cube 0 1 0.001) ==> 0.24999999874993412\n#t\n\n\nex-1.29 \u30b7\u30f3\u30d7\u30bd\u30f3\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u305f\u5b9a\u7a4d\u5206\n; [ex-1.29.scm]\n(load \"./sec-1.3.1\")\n\n(define (ex-1.29)\n    (display (simpson's-rule cube 0 1 100))\n    (newline)\n    (display (simpson's-rule cube 0 1 1000))\n    (newline)\n    #t)\n\n(define (simpson's-rule f a b n)\n    (define h (/ (- b a) n))\n    (define (y k)\n        (f (+ a (* k h))))\n    (define (my-term k)\n        (cond\n            ((= k 0) (y k))\n            ((= k n) (y n))\n            ((odd? k) (* 4 (y k)))\n            (else (* 2 (y k)))))\n    (define my-sum\n        (sum my-term 0 inc n))\n    (/ (* h my-sum) 3))\n\ngosh> (load \"./ex-1.29\")\n#t\ngosh> (ex-1.29)\n1/4\n1/4\n#t\n\n\u306a\u305c\u304b\u3074\u3063\u305f\u308a $\\frac{1}{4}$ \u306b\u30fb\u03c9\u30fb\uff1b\n\nex-1.30 \u7dda\u5f62\u53cd\u5fa9\u306b\u3088\u308b sum \u306e\u518d\u5b9f\u88c5\n; [ex-1.30.scm]\n(load \"./ex-1.29\")\n\n(define (ex-1.30)\n    (ex-1.29))\n\n(define (sum term a next b)\n    (define (iter a result)\n        ; (display (list a result)) (newline)\n        (if (> a b)\n            result\n            (iter (next a) (+ result (term a)))))\n    (iter a 0))\n\ngosh> (load \"./ex-1.30\")\n#t\ngosh> (ex-1.30)\n1/4\n1/4\n#t\n\n\nex-1.31 \u03a0 (product) \u306e\u5b9f\u88c5\n\nex-1.31 (a) \u7dda\u5f62\u53cd\u5fa9\u3067\u306e\u5b9f\u88c5\n; [ex-1.31-a.scm]\n(load \"./sec-1.3.1\")\n\n(define (ex-1.31-a)\n    (display \"10! = \")\n    (display (factorial 10))\n    (newline)\n    (display \"pi-product 1 1000 = \")\n    (display (pi-product 1 1000))\n    (newline)\n    #t)\n\n\n(define (product term a next b)\n    (define (iter x result)\n        (if (> x b )\n            result\n            (iter (next x) (* result (term x)))))\n    (iter a 1.0))\n\n\n(define (factorial n)\n    (product identity 1 inc n))\n\n\n(define (pi-product a b)\n    (define (pi-term i)\n        (define k (* i 2))\n        (/ (* k (+ k 2))\n            (square (+ k 1))))\n    (* 4 (product pi-term a inc b)))\n\ngosh> (load \"./ex-1.31-a\")\n#t\ngosh> (ex-1.31-a)\n10! = 3628800.0\npi-product 1 1000 = 3.1423773650938855\n#t\n\n\nex-1.31 (b) \u7dda\u5f62\u518d\u5e30\u3067\u306e\u5b9f\u88c5\n; [ex-1.31-b.scm]\n(load \"./ex-1.31-a\")\n\n(define (ex-1.31-b)\n    (ex-1.31-a))\n\n(define (product term a next b)\n    (if (> a b)\n        1.0\n        (* (term a)\n            (product term (next a) next b))))\n\ngosh> (load \"./ex-1.31-b\")\n#t\ngosh> (ex-1.31-b)\n10! = 3628800.0\npi-product 1 1000 = 3.142377365093882\n#t\n\n\nex-1.32 \u96c6\u7a4d\u95a2\u6570 (accumulate)\n\nex-1.32 (a) \u53cd\u5fa9\u518d\u5e30\u3067\u306e\u5b9f\u88c5\n; [ex-1.32-a.scm]\n(load \"./ex-1.30\")\n\n(define (ex-1.32-a)\n    (sec-1.3.1)\n    (ex-1.30)\n    #t)\n\n\n(define (accumulate combiner null-value term a next b)\n    (define (iter x result)\n        (if (> x b )\n            result\n            (iter (next x) (combiner result (term x)))))\n    (iter a null-value))\n\n(define (sum term a next b)\n    (accumulate + 0 term a next b))\n\n\n(define (product term a next b)\n    (accumulate * 1.0 term a next b))\n\ngosh> (ex-1.32-a)\n(sum-cubes 1 10) ==> 3025\n(sum-integers 1 10) ==> 55\n(* 8 (pi-sum 1 1000)) ==> 3.139592655589782\n1/4\n1/4\n#t\n\n\nex-1.32 (b) \u7dda\u5f62\u518d\u5e30\u3067\u306e\u5b9f\u88c5\n; [ex-1.32-b.scm]\n(load \"./ex-1.32-a\")\n\n\n(define (ex-1.32-b)\n    (ex-1.32-a))\n\n\n(define (accumulate combiner null-value term a next b)\n    (if (> a b )\n        null-value\n        (combiner (term a)\n            (accumulate combiner null-value term (next a) next b))))\n\ngosh> (ex-1.32-b)\n(sum-cubes 1 10) ==> 3025\n(sum-integers 1 10) ==> 55\n(* 8 (pi-sum 1 1000)) ==> 3.139592655589783\n1/4\n1/4\n#t\n\n\nex-1.33 filtered-accumulate\n\na. a \u304b\u3089 b \u306e\u533a\u9593\u306e\u7d20\u6570\u306e\u4e8c\u4e57\u306e\u548c (\u3059\u3067\u306b prime? \u8ff0\u8a9e\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u3059\u308b)\nb. n \u3068\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b n \u672a\u6e80\u306e\u3059\u3079\u3066\u306e\u6b63\u306e\u6574\u6570 (\u3064\u307e\u308a\u3001 gcd(i, n) = 1 \u3068\u306a\u308b\u3059\u3079\u3066\u306e\u6574\u6570 i < n) \u306e\u7a4d\n\n; [ex-1.33.scm]\n(define (ex-1.33)\n    (display \"(ex-1.33-a 2 10) ==> \")\n    (display (ex-1.33-a 2 10))\n    (newline)\n    (display \"(ex-1.33-b 10) ==> \")\n    (display (ex-1.33-b 10))\n    (newline)\n    #t)\n\n\n(define (ex-1.33-a a b)\n    (filtered-accumulate prime? + 0 cube a inc b))\n\n\n(define (ex-1.33-b n)\n    (define (relatively-prime-to-n? i)\n        (= (gcd i n) 1))\n    (filtered-accumulate relatively-prime-to-n? * 1.0 identity 1 inc (- n 1)))\n\n\n(define (filtered-accumulate filter combiner null-value term a next b)\n    (define (iter x result)\n    (display (list x result))(newline)\n        (if (> x b )\n            result\n            (iter (next x)\n                (if (filter x)\n                    (combiner result (term x))\n                    result))))\n    (display (list \"enter: \" filter combiner null-value term a next b))(newline)\n    (iter a null-value))\n\n\n\n(define (cube x) (* x x x))\n(define (inc x) (+ x 1))\n(define (identity x) x)\n\n\n(define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\n\n(define (smallest-divisor n)\n    (find-divisor n 2))\n(define (find-divisor n test-divisor)\n    ;(sys-nanosleep 1000000)\n    ;(display \"!\")\n    (cond\n        ((> (square test-divisor) n)\n            ;(display \"[prime:step:\")\n            ;(display (- test-divisor 1))\n            ;(display \"]\")\n            ;(newline)\n            n)\n        ((divides? test-divisor n)\n            ;(display \"[div:step:\")\n            ;(display (- test-divisor 1))\n            ;(display \"]\")\n            ;(newline)\n            test-divisor)\n        (else (find-divisor n (+ test-divisor 1)))))\n(define (divides? a b)\n    (= (remainder b a) 0))\n(define (square a) (* a a))\n\n(define (prime? n)\n    (= n (smallest-divisor n)))\n\ngosh> (ex-1.33)\n(ex-1.33-a 2 10) ==> 503\n(ex-1.33-b 10) ==> 189.0\n#t\n\n(a)\n\u521d\u671f\u5024 0\n\u6dfb\u5b57 2, \u7d20\u6570=yes, term=2*2*2=8,  result=8\n\u6dfb\u5b57 3, \u7d20\u6570=yes, term=3*3*3=27, result=35\n\u6dfb\u5b57 4, \u7d20\u6570=no\n\u6dfb\u5b57 5, \u7d20\u6570=yes, term=5*5*5=125, result=160\n\u6dfb\u5b57 6, \u7d20\u6570=no\n\u6dfb\u5b57 7, \u7d20\u6570=yes, term=7*7*7=343, result=503\n\u6dfb\u5b57 8, \u7d20\u6570=no\n\u6dfb\u5b57 9, \u7d20\u6570=no\n\u6dfb\u5b57 10, \u7d20\u6570=no\n\n(b)\n\u521d\u671f\u5024 1\n\u6dfb\u5b57 1, 10\u3068\u4e92\u3044\u306b\u7d20=yes, result=1*1=1\n\u6dfb\u5b57 2, 10\u3068\u4e92\u3044\u306b\u7d20=no,\n\u6dfb\u5b57 3, 10\u3068\u4e92\u3044\u306b\u7d20=yes, result=1*3=3\n\u6dfb\u5b57 4, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\u6dfb\u5b57 5, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\u6dfb\u5b57 6, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\u6dfb\u5b57 7, 10\u3068\u4e92\u3044\u306b\u7d20=yes, result=3*7=21\n\u6dfb\u5b57 8, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\u6dfb\u5b57 9, 10\u3068\u4e92\u3044\u306b\u7d20=yes, result=21*9=189\n\u6dfb\u5b57 10, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\n\n1.3.2 lambda \u3092\u4f7f\u3063\u3066\u624b\u7d9a\u304d\u3092\u69cb\u7bc9\u3059\u308b\nlambda \u3068 let \u3088\u3046\u3084\u304f\u3064\u304b\u3048\u308b\uff01\u30fb\u30ee\u30fb*\n\nex-1.34. (f f) \u306e\u5b9f\u884c\u7d50\u679c\n\u4e88\u60f3:\n(f f)\n==> ; (define (f g) (g 2))\n==> (f 2)\n==> ; (define (f g) (g 2))\n==> (2 2)\n==> ;\u6570\u5024\u306f\u6f14\u7b97\u5b50\u306b\u306a\u308c\u306a\u3044\u306e\u3067\u30a8\u30e9\u30fc\n\n\u5b9f\u969b:\n; [ex-1.34.scm]\n(define (ex-1.34)\n    (f f))\n\n\n(define (f g) (g 2))\n\ngosh> (ex-1.34)\n*** ERROR: invalid application: (2 2)\n\n[\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #7 (1.3.1 ~ 1.3.2)](http://ladiespp.connpass.com/event/29144/)\n\n\u524d\u56de: [\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #6](http://ladiespp.connpass.com/event/28089/) (1.2.6, \u7df4\u7fd2\u554f\u984c1.25~1.29), [\u304f\u30fc\u3080\u6c0f\u306e\u307e\u3068\u3081](http://qiita.com/cocodrips/items/3ab87b16c341085da18d), [\u81ea\u5206\u306e\u307e\u3068\u3081](http://qiita.com/hio-harp/items/9955bf218c6c7de9193e)\n\n\n## 1.3 \u9ad8\u968e\u624b\u7d9a\u304d\u306b\u3088\u308b\u62bd\u8c61\u306e\u5b9a\u5f0f\u5316\n\n## 1.3.1 \u5f15\u6570\u3068\u3057\u3066\u306e\u624b\u7d9a\u304d\n\n```scm\n; [sec-1.3.1.scm]\n(define (sec-1.3.1)\n\t(display \"(sum-cubes 1 10) ==> \")\n\t(display (sum-cubes 1 10))\n\t(newline)\n\t(display \"(sum-integers 1 10) ==> \")\n\t(display (sum-integers 1 10))\n\t(newline)\n\t(display \"(* 8 (pi-sum 1 1000)) ==> \")\n\t(display (* 8 (pi-sum 1 1000)))\n\t(newline)\n\t(display \"(integral cube 0 1 0.01) ==> \")\n\t(display (integral cube 0 1 0.001))\n\t(newline)\n\t(display \"(integral cube 0 1 0.001) ==> \")\n\t(display (integral cube 0 1 0.0001))\n\t(newline)\n\t#t)\n\n\n(define (sum term a next b)\n\t(if (> a b)\n\t\t0\n\t\t(+ (term a)\n\t\t\t(sum term (next a) next b))))\n\n\n(define (cube a)\n\t(* a a a))\n\n\n(define (inc n) (+ n 1))\n(define (sum-cubes a b)\n\t(sum cube a inc b))\n\n\n(define (identity x) x)\n(define (sum-integers a b)\n\t(sum identity a inc b))\n\n\n(define (pi-sum a b)\n\t(define (pi-term x)\n\t\t(/ 1.0 (* x (+ x 2))))\n\t(define (pi-next x)\n\t\t(+ x 4))\n\t(sum pi-term a pi-next b))\n\n\n(define (integral f a b dx)\n\t(define (add-dx x)\n\t\t(+ x dx))\n\t(* (sum f (+ a (/ dx 2.0)) add-dx b)\n\t\tdx))\n```\n\n```scm\ngosh> (sec-1.3.1)\n(sum-cubes 1 10) ==> 3025\n(sum-integers 1 10) ==> 55\n(* 8 (pi-sum 1 1000)) ==> 3.139592655589783\n(integral cube 0 1 0.01) ==> 0.249999875000001\n(integral cube 0 1 0.001) ==> 0.24999999874993412\n#t\n```\n\n### ex-1.29 \u30b7\u30f3\u30d7\u30bd\u30f3\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u305f\u5b9a\u7a4d\u5206\n\n```scm\n; [ex-1.29.scm]\n(load \"./sec-1.3.1\")\n\n(define (ex-1.29)\n\t(display (simpson's-rule cube 0 1 100))\n\t(newline)\n\t(display (simpson's-rule cube 0 1 1000))\n\t(newline)\n\t#t)\n\n(define (simpson's-rule f a b n)\n\t(define h (/ (- b a) n))\n\t(define (y k)\n\t\t(f (+ a (* k h))))\n\t(define (my-term k)\n\t\t(cond\n\t\t\t((= k 0) (y k))\n\t\t\t((= k n) (y n))\n\t\t\t((odd? k) (* 4 (y k)))\n\t\t\t(else (* 2 (y k)))))\n\t(define my-sum\n\t\t(sum my-term 0 inc n))\n\t(/ (* h my-sum) 3))\n```\n\n```scm\ngosh> (load \"./ex-1.29\")\n#t\ngosh> (ex-1.29)\n1/4\n1/4\n#t\n```\n\n\u306a\u305c\u304b\u3074\u3063\u305f\u308a $\\frac{1}{4}$ \u306b\u30fb\u03c9\u30fb\uff1b\n\n### ex-1.30 \u7dda\u5f62\u53cd\u5fa9\u306b\u3088\u308b sum \u306e\u518d\u5b9f\u88c5\n\n```scm\n; [ex-1.30.scm]\n(load \"./ex-1.29\")\n\n(define (ex-1.30)\n\t(ex-1.29))\n\n(define (sum term a next b)\n\t(define (iter a result)\n\t\t; (display (list a result)) (newline)\n\t\t(if (> a b)\n\t\t\tresult\n\t\t\t(iter (next a) (+ result (term a)))))\n\t(iter a 0))\n```\n\n```scm\ngosh> (load \"./ex-1.30\")\n#t\ngosh> (ex-1.30)\n1/4\n1/4\n#t\n```\n\n## ex-1.31 \u03a0 (product) \u306e\u5b9f\u88c5\n\n### ex-1.31 (a) \u7dda\u5f62\u53cd\u5fa9\u3067\u306e\u5b9f\u88c5\n\n```scm\n; [ex-1.31-a.scm]\n(load \"./sec-1.3.1\")\n\n(define (ex-1.31-a)\n\t(display \"10! = \")\n\t(display (factorial 10))\n\t(newline)\n\t(display \"pi-product 1 1000 = \")\n\t(display (pi-product 1 1000))\n\t(newline)\n\t#t)\n\n\n(define (product term a next b)\n\t(define (iter x result)\n\t\t(if (> x b )\n\t\t\tresult\n\t\t\t(iter (next x) (* result (term x)))))\n\t(iter a 1.0))\n\n\n(define (factorial n)\n\t(product identity 1 inc n))\n\n\n(define (pi-product a b)\n\t(define (pi-term i)\n\t\t(define k (* i 2))\n\t\t(/ (* k (+ k 2))\n\t\t\t(square (+ k 1))))\n\t(* 4 (product pi-term a inc b)))\n```\n\n```scm\ngosh> (load \"./ex-1.31-a\")\n#t\ngosh> (ex-1.31-a)\n10! = 3628800.0\npi-product 1 1000 = 3.1423773650938855\n#t\n```\n\n### ex-1.31 (b) \u7dda\u5f62\u518d\u5e30\u3067\u306e\u5b9f\u88c5\n\n```scm\n; [ex-1.31-b.scm]\n(load \"./ex-1.31-a\")\n\n(define (ex-1.31-b)\n\t(ex-1.31-a))\n\n(define (product term a next b)\n\t(if (> a b)\n\t\t1.0\n\t\t(* (term a)\n\t\t\t(product term (next a) next b))))\n```\n\n```scm\ngosh> (load \"./ex-1.31-b\")\n#t\ngosh> (ex-1.31-b)\n10! = 3628800.0\npi-product 1 1000 = 3.142377365093882\n#t\n```\n\n## ex-1.32 \u96c6\u7a4d\u95a2\u6570 (accumulate)\n\n### ex-1.32 (a) \u53cd\u5fa9\u518d\u5e30\u3067\u306e\u5b9f\u88c5\n\n```scm\n; [ex-1.32-a.scm]\n(load \"./ex-1.30\")\n\n(define (ex-1.32-a)\n\t(sec-1.3.1)\n\t(ex-1.30)\n\t#t)\n\n\n(define (accumulate combiner null-value term a next b)\n\t(define (iter x result)\n\t\t(if (> x b )\n\t\t\tresult\n\t\t\t(iter (next x) (combiner result (term x)))))\n\t(iter a null-value))\n\n(define (sum term a next b)\n\t(accumulate + 0 term a next b))\n\n\n(define (product term a next b)\n\t(accumulate * 1.0 term a next b))\n```\n\n```scm\ngosh> (ex-1.32-a)\n(sum-cubes 1 10) ==> 3025\n(sum-integers 1 10) ==> 55\n(* 8 (pi-sum 1 1000)) ==> 3.139592655589782\n1/4\n1/4\n#t\n```\n\n### ex-1.32 (b) \u7dda\u5f62\u518d\u5e30\u3067\u306e\u5b9f\u88c5\n\n```scm\n; [ex-1.32-b.scm]\n(load \"./ex-1.32-a\")\n\n\n(define (ex-1.32-b)\n\t(ex-1.32-a))\n\n\n(define (accumulate combiner null-value term a next b)\n\t(if (> a b )\n\t\tnull-value\n\t\t(combiner (term a)\n\t\t\t(accumulate combiner null-value term (next a) next b))))\n```\n\n```scm\ngosh> (ex-1.32-b)\n(sum-cubes 1 10) ==> 3025\n(sum-integers 1 10) ==> 55\n(* 8 (pi-sum 1 1000)) ==> 3.139592655589783\n1/4\n1/4\n#t\n```\n\n## ex-1.33 filtered-accumulate\n\n> a. *a* \u304b\u3089 *b* \u306e\u533a\u9593\u306e\u7d20\u6570\u306e\u4e8c\u4e57\u306e\u548c (\u3059\u3067\u306b `prime?` \u8ff0\u8a9e\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u3059\u308b)\n\n> b. *n* \u3068\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b *n* \u672a\u6e80\u306e\u3059\u3079\u3066\u306e\u6b63\u306e\u6574\u6570 (\u3064\u307e\u308a\u3001 `gcd(i, n) = 1` \u3068\u306a\u308b\u3059\u3079\u3066\u306e\u6574\u6570 `i < n`) \u306e\u7a4d\n\n\n```scm\n; [ex-1.33.scm]\n(define (ex-1.33)\n\t(display \"(ex-1.33-a 2 10) ==> \")\n\t(display (ex-1.33-a 2 10))\n\t(newline)\n\t(display \"(ex-1.33-b 10) ==> \")\n\t(display (ex-1.33-b 10))\n\t(newline)\n\t#t)\n\n\n(define (ex-1.33-a a b)\n\t(filtered-accumulate prime? + 0 cube a inc b))\n\n\n(define (ex-1.33-b n)\n\t(define (relatively-prime-to-n? i)\n\t\t(= (gcd i n) 1))\n\t(filtered-accumulate relatively-prime-to-n? * 1.0 identity 1 inc (- n 1)))\n\n\n(define (filtered-accumulate filter combiner null-value term a next b)\n\t(define (iter x result)\n\t(display (list x result))(newline)\n\t\t(if (> x b )\n\t\t\tresult\n\t\t\t(iter (next x)\n\t\t\t\t(if (filter x)\n\t\t\t\t\t(combiner result (term x))\n\t\t\t\t\tresult))))\n\t(display (list \"enter: \" filter combiner null-value term a next b))(newline)\n\t(iter a null-value))\n\n\n\n(define (cube x) (* x x x))\n(define (inc x) (+ x 1))\n(define (identity x) x)\n\n\n(define (gcd a b)\n\t(if (= b 0)\n\t\ta\n\t\t(gcd b (remainder a b))))\n\n\n(define (smallest-divisor n)\n\t(find-divisor n 2))\n(define (find-divisor n test-divisor)\n\t;(sys-nanosleep 1000000)\n\t;(display \"!\")\n\t(cond\n\t\t((> (square test-divisor) n)\n\t\t\t;(display \"[prime:step:\")\n\t\t\t;(display (- test-divisor 1))\n\t\t\t;(display \"]\")\n\t\t\t;(newline)\n\t\t\tn)\n\t\t((divides? test-divisor n)\n\t\t\t;(display \"[div:step:\")\n\t\t\t;(display (- test-divisor 1))\n\t\t\t;(display \"]\")\n\t\t\t;(newline)\n\t\t\ttest-divisor)\n\t\t(else (find-divisor n (+ test-divisor 1)))))\n(define (divides? a b)\n\t(= (remainder b a) 0))\n(define (square a) (* a a))\n\n(define (prime? n)\n\t(= n (smallest-divisor n)))\n```\n\n```scm\ngosh> (ex-1.33)\n(ex-1.33-a 2 10) ==> 503\n(ex-1.33-b 10) ==> 189.0\n#t\n```\n\n```\n(a)\n\u521d\u671f\u5024 0\n\u6dfb\u5b57 2, \u7d20\u6570=yes, term=2*2*2=8,  result=8\n\u6dfb\u5b57 3, \u7d20\u6570=yes, term=3*3*3=27, result=35\n\u6dfb\u5b57 4, \u7d20\u6570=no\n\u6dfb\u5b57 5, \u7d20\u6570=yes, term=5*5*5=125, result=160\n\u6dfb\u5b57 6, \u7d20\u6570=no\n\u6dfb\u5b57 7, \u7d20\u6570=yes, term=7*7*7=343, result=503\n\u6dfb\u5b57 8, \u7d20\u6570=no\n\u6dfb\u5b57 9, \u7d20\u6570=no\n\u6dfb\u5b57 10, \u7d20\u6570=no\n```\n\n```\n(b)\n\u521d\u671f\u5024 1\n\u6dfb\u5b57 1, 10\u3068\u4e92\u3044\u306b\u7d20=yes, result=1*1=1\n\u6dfb\u5b57 2, 10\u3068\u4e92\u3044\u306b\u7d20=no,\n\u6dfb\u5b57 3, 10\u3068\u4e92\u3044\u306b\u7d20=yes, result=1*3=3\n\u6dfb\u5b57 4, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\u6dfb\u5b57 5, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\u6dfb\u5b57 6, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\u6dfb\u5b57 7, 10\u3068\u4e92\u3044\u306b\u7d20=yes, result=3*7=21\n\u6dfb\u5b57 8, 10\u3068\u4e92\u3044\u306b\u7d20=no\n\u6dfb\u5b57 9, 10\u3068\u4e92\u3044\u306b\u7d20=yes, result=21*9=189\n\u6dfb\u5b57 10, 10\u3068\u4e92\u3044\u306b\u7d20=no\n```\n\n## 1.3.2 `lambda` \u3092\u4f7f\u3063\u3066\u624b\u7d9a\u304d\u3092\u69cb\u7bc9\u3059\u308b\n\n`lambda` \u3068 `let` \u3088\u3046\u3084\u304f\u3064\u304b\u3048\u308b\uff01\u30fb\u30ee\u30fb*\n\n## ex-1.34. `(f f)` \u306e\u5b9f\u884c\u7d50\u679c\n\n\u4e88\u60f3:\n\n```scm\n(f f)\n==> ; (define (f g) (g 2))\n==> (f 2)\n==> ; (define (f g) (g 2))\n==> (2 2)\n==> ;\u6570\u5024\u306f\u6f14\u7b97\u5b50\u306b\u306a\u308c\u306a\u3044\u306e\u3067\u30a8\u30e9\u30fc\n```\n\n\u5b9f\u969b:\n\n```scm\n; [ex-1.34.scm]\n(define (ex-1.34)\n\t(f f))\n\n\n(define (f g) (g 2))\n```\n\n```scm\ngosh> (ex-1.34)\n*** ERROR: invalid application: (2 2)\n```\n"}