{"tags": ["incubator", "Phalcon", "PHP"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nphalcon php\u306e\u691c\u8a3c\u4e2d\u3067\u3059\u3002\ncurl\u3092\u4f7f\u3063\u305fhttp\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u304b\u3063\u3066\u3069\u3046\u3084\u308b\u3093\u3060\u308d\uff1f\u3068\u601d\u3044\u3001\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u308b\u3068\u3001Request\u30af\u30e9\u30b9\u306f\u5b58\u5728\u3059\u308b\u306e\u3067\u3059\u304c\u3001\n\u3053\u308c\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97\u3060\u3063\u305f\u308a\u3092\u62c5\u3046\u30e2\u30ce\u3067\u3069\u3046\u3082\u9055\u3046\u306a\u3068\u3002\n\u3067\u3001phalcon\u306egithub\u3092\u898b\u305f\u3068\u3053\u308d\u3001incubator\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3088\u3046\u3067\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n\u3053\u3053\u3067\u306f\u300csample-phalcon\u300d\u3068\u3044\u3046\u540d\u79f0\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n$ phalcon project sample-phalcon\n\nPhalcon DevTools (1.3.4)\n\n\n  Success: Controller \"index\" was successfully created.\n\n\n  Success: Project 'sample-phalcon' was successfully created.\n\n\nincubator\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u81ea\u5206\u306e\u74b0\u5883\u306ephalcon\u304cver1.x\u7cfb\u306a\u306e\u3067\u3001README\u306b\u5f93\u3063\u3066ver1.3.5\u3092\u5165\u308c\u3066\u307f\u308b\u3002\n$ cd sample-phalcon/\n$ curl -sS https://getcomposer.org/installer | php\n$ vim composer.json\n$ cat composer.json\n{\n  \"require\": {\n    \"phalcon/incubator\": \"~1.3.5\"\n  }\n}\n$ php composer.phar install\n\n\nBootstrap(cli.php)\u3092\u66f8\u304f\n\u30d0\u30c3\u30c1(Task)\u5b9f\u884c\u7528\u306eBootstrap\u3092\u66f8\u304f\u3002\n\u66f8\u304d\u65b9\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u304c\u3042\u308b\u3002\n\u3053\u308c\u306b\u3001incubator\u306eREADME\u306b\u8a18\u8f09\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\u3092\u8ffd\u8a18\u3059\u308c\u3070OK\n$ vim app/cli.php\n\n\ncli.php\n<?php\n\n use Phalcon\\DI\\FactoryDefault\\CLI as CliDI,\n     Phalcon\\CLI\\Console as ConsoleApp;\n\n define('VERSION', '1.0.0');\n\n //Using the CLI factory default services container\n $di = new CliDI();\n\n // Define path to application directory\n defined('APPLICATION_PATH')\n || define('APPLICATION_PATH', realpath(dirname(__FILE__)));\n\n /**\n  * Register the autoloader and tell it to register the tasks directory\n  */\n $loader = new \\Phalcon\\Loader();\n $loader->registerDirs(\n     array(\n         APPLICATION_PATH . '/tasks'\n     )\n );\n\n$loader->registerNamespaces(array(\n    'Phalcon' => __DIR__.'/../vendor/phalcon/incubator/Library/Phalcon/',\n));\n\n $loader->register();\n\n // Load the configuration file (if any)\n if(is_readable(APPLICATION_PATH . '/config/config.php')) {\n     $config = include APPLICATION_PATH . '/config/config.php';\n     $di->set('config', $config);\n }\n\n //Create a console application\n $console = new ConsoleApp();\n $console->setDI($di);\n\n /**\n * Process the console arguments\n */\n $arguments = array();\n foreach($argv as $k => $arg) {\n     if($k == 1) {\n         $arguments['task'] = $arg;\n     } elseif($k == 2) {\n         $arguments['action'] = $arg;\n     } elseif($k >= 3) {\n        $arguments['params'][] = $arg;\n     }\n }\n\n // define global constants for the current task and action\n define('CURRENT_TASK', (isset($argv[1]) ? $argv[1] : null));\n define('CURRENT_ACTION', (isset($argv[2]) ? $argv[2] : null));\n\n try {\n     // handle incoming arguments\n     $console->handle($arguments);\n }\n catch (\\Phalcon\\Exception $e) {\n     echo $e->getMessage();\n     exit(255);\n }\n\n\n\nTask\u30af\u30e9\u30b9\u3092\u4f5c\u6210\n\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308bTask\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\nHttp Client\u306eRequest\u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\u306fREADME\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n$ mkdir -p app/tasks\n$ vim app/tasks/RequestsampleTask.php\n\n\nRequestsampleTask.php\n<?php\n\nuse Phalcon\\Http\\Client\\Request;\n\nclass RequestSampleTask extends \\Phalcon\\CLI\\Task\n{\n    const RSS_URL = 'http://feeds.feedburner.com/mtl/feed';\n\n    public function mainAction() {\n\n        $response = $this->getResponse(self::RSS_URL);\n        $response = $this->parseResponse($response);\n\n        print_r($response);\n    }\n\n    private function getResponse($url) {\n\n        $provider  = Request::getProvider();\n        $provider->setBaseUri($url);\n        return $provider->get('', array());\n    }\n\n    private function parseResponse($response) {\n\n        return simplexml_load_string($response->body);\n    }\n}\n\n\n\n\u5b9f\u884c\n$ php app/cli.php Requestsample\n\n\u6210\u529f\u3059\u308c\u3070RSS\u30d5\u30a3\u30fc\u30c9\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\n##\u6982\u8981\nphalcon php\u306e\u691c\u8a3c\u4e2d\u3067\u3059\u3002\ncurl\u3092\u4f7f\u3063\u305fhttp\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u304b\u3063\u3066\u3069\u3046\u3084\u308b\u3093\u3060\u308d\uff1f\u3068\u601d\u3044\u3001\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u308b\u3068\u3001[Request\u30af\u30e9\u30b9](http://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request.html)\u306f\u5b58\u5728\u3059\u308b\u306e\u3067\u3059\u304c\u3001\n\u3053\u308c\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97\u3060\u3063\u305f\u308a\u3092\u62c5\u3046\u30e2\u30ce\u3067\u3069\u3046\u3082\u9055\u3046\u306a\u3068\u3002\n\u3067\u3001[phalcon\u306egithub](https://github.com/phalcon/)\u3092\u898b\u305f\u3068\u3053\u308d\u3001[incubator](https://github.com/phalcon/incubator)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3088\u3046\u3067\u3002\n\n##\u30b5\u30f3\u30d7\u30eb\u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n\u3053\u3053\u3067\u306f\u300csample-phalcon\u300d\u3068\u3044\u3046\u540d\u79f0\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```\n$ phalcon project sample-phalcon\n\nPhalcon DevTools (1.3.4)\n\n\n  Success: Controller \"index\" was successfully created.\n\n\n  Success: Project 'sample-phalcon' was successfully created.\n```\n\n##incubator\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u81ea\u5206\u306e\u74b0\u5883\u306ephalcon\u304cver1.x\u7cfb\u306a\u306e\u3067\u3001README\u306b\u5f93\u3063\u3066ver1.3.5\u3092\u5165\u308c\u3066\u307f\u308b\u3002\n\n```\n$ cd sample-phalcon/\n$ curl -sS https://getcomposer.org/installer | php\n$ vim composer.json\n$ cat composer.json\n{\n  \"require\": {\n    \"phalcon/incubator\": \"~1.3.5\"\n  }\n}\n$ php composer.phar install\n```\n\n##Bootstrap(cli.php)\u3092\u66f8\u304f\n\u30d0\u30c3\u30c1(Task)\u5b9f\u884c\u7528\u306eBootstrap\u3092\u66f8\u304f\u3002\n\u66f8\u304d\u65b9\u306f[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.phalconphp.com/en/latest/reference/cli.html#tasks)\u306b\u8a18\u8f09\u304c\u3042\u308b\u3002\n\u3053\u308c\u306b\u3001[incubator\u306eREADME](https://github.com/phalcon/incubator#autoloading-from-the-incubator)\u306b\u8a18\u8f09\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\u3092\u8ffd\u8a18\u3059\u308c\u3070OK\n\n```\n$ vim app/cli.php\n```\n\n```php:cli.php\n<?php\n\n use Phalcon\\DI\\FactoryDefault\\CLI as CliDI,\n     Phalcon\\CLI\\Console as ConsoleApp;\n\n define('VERSION', '1.0.0');\n\n //Using the CLI factory default services container\n $di = new CliDI();\n\n // Define path to application directory\n defined('APPLICATION_PATH')\n || define('APPLICATION_PATH', realpath(dirname(__FILE__)));\n\n /**\n  * Register the autoloader and tell it to register the tasks directory\n  */\n $loader = new \\Phalcon\\Loader();\n $loader->registerDirs(\n     array(\n         APPLICATION_PATH . '/tasks'\n     )\n );\n\n$loader->registerNamespaces(array(\n    'Phalcon' => __DIR__.'/../vendor/phalcon/incubator/Library/Phalcon/',\n));\n\n $loader->register();\n\n // Load the configuration file (if any)\n if(is_readable(APPLICATION_PATH . '/config/config.php')) {\n     $config = include APPLICATION_PATH . '/config/config.php';\n     $di->set('config', $config);\n }\n\n //Create a console application\n $console = new ConsoleApp();\n $console->setDI($di);\n\n /**\n * Process the console arguments\n */\n $arguments = array();\n foreach($argv as $k => $arg) {\n     if($k == 1) {\n         $arguments['task'] = $arg;\n     } elseif($k == 2) {\n         $arguments['action'] = $arg;\n     } elseif($k >= 3) {\n        $arguments['params'][] = $arg;\n     }\n }\n\n // define global constants for the current task and action\n define('CURRENT_TASK', (isset($argv[1]) ? $argv[1] : null));\n define('CURRENT_ACTION', (isset($argv[2]) ? $argv[2] : null));\n\n try {\n     // handle incoming arguments\n     $console->handle($arguments);\n }\n catch (\\Phalcon\\Exception $e) {\n     echo $e->getMessage();\n     exit(255);\n }\n```\n\n##Task\u30af\u30e9\u30b9\u3092\u4f5c\u6210\n\n\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308bTask\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\nHttp Client\u306eRequest\u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\u306f[README](https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Http/Client)\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n\n```\n$ mkdir -p app/tasks\n$ vim app/tasks/RequestsampleTask.php\n```\n\n```php:RequestsampleTask.php\n<?php\n\nuse Phalcon\\Http\\Client\\Request;\n\nclass RequestSampleTask extends \\Phalcon\\CLI\\Task\n{\n    const RSS_URL = 'http://feeds.feedburner.com/mtl/feed';\n\n    public function mainAction() {\n\n        $response = $this->getResponse(self::RSS_URL);\n        $response = $this->parseResponse($response);\n\n        print_r($response);\n    }\n\n    private function getResponse($url) {\n\n        $provider  = Request::getProvider();\n        $provider->setBaseUri($url);\n        return $provider->get('', array());\n    }\n\n    private function parseResponse($response) {\n\n        return simplexml_load_string($response->body);\n    }\n}\n```\n\n##\u5b9f\u884c\n```\n$ php app/cli.php Requestsample\n```\n\u6210\u529f\u3059\u308c\u3070RSS\u30d5\u30a3\u30fc\u30c9\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n"}