{"context": "\n\n\u306f\u3058\u3081\u306b\n\u300cFPGA+SoC+Linux\u306e\u30d6\u30fc\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9(ZYNQ+U-Boot-SPL\u7de8)\u300d\u3067\u3001U-Boot-spl(U-Boot Second Program Loader)\u3092\u30b9\u30c6\u30fc\u30b8\uff11\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u3068\u3057\u3066 Linux \u3092\u30d6\u30fc\u30c8\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u305d\u306e\u969b\u3001\u3061\u3087\u3063\u3068\u554f\u984c\u306b\u306a\u3063\u305f\u306e\u304c PL \u5468\u308a\u306e\u8a2d\u5b9a\u3067\u3059\u3002\nPL\u5468\u308a\u306e\u8a2d\u5b9a\u3092PL\u306e\u30c7\u30b6\u30a4\u30f3\u6642\u306b\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u4f7f\u3046\u5834\u5408\u3001PL\u5074\u306e\u30c7\u30b6\u30a4\u30f3\u3092\u5909\u66f4\u3059\u308b\u5ea6\u306b boot.bin(U-Boot-SPL) \u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059(PL\u5468\u308a\u306e\u8a2d\u5b9a\u304c\u5909\u308f\u3089\u306a\u3044\u5834\u5408\u306f\u9664\u304f)\u3002\n\u307e\u305f\u3001PL\u5468\u308a\u306e\u8a2d\u5b9a\u3092 U-Boot \u304c\u3059\u3067\u306b\u5b9a\u7fa9\u6e08\u307f\u306e\u3082\u306e\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u5834\u5408\u306f\u3001boot.bin(U-Boot-SPL)\u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001PL\u5468\u308a\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001U-Boot \u306e mw (memory write) \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u76f4\u63a5 Zynq \u306e\u30ec\u30b8\u30b9\u30bf\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u306b\u3088\u3063\u3066 PL\u5468\u308a\u306e\u8a2d\u5b9a\u3092\u5909\u3048\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001Zynq \u306e\u30ec\u30b8\u30b9\u30bf\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u306e\u3067\u3001\u3051\u3063\u3053\u3046\u5371\u967a\u3067\u3059\u3002\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2 \u3084 PLL \u306b\u8a73\u3057\u3044\u4eba\u5411\u3051\u3067\u3059\u3002\n\u30ec\u30b8\u30b9\u30bf\u7b49\u306e\u8a73\u7d30\u306f\u300cZynq-7000 Technical Reference Manual\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f Xilinx \u793e\u304b\u3089 UG585(User Guide 585)\u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nPL\u5468\u308a\u306e\u8a2d\u5b9a\u30ec\u30b8\u30b9\u30bf\nZynq \u3067 PL \u5468\u308a\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u306a\u30ec\u30b8\u30b9\u30bf\u306f\u3001\u304a\u305d\u3089\u304f\u3001\u30af\u30ed\u30c3\u30af\u306e\u8a2d\u5b9a\u3068\u30ea\u30bb\u30c3\u30c8\u51fa\u529b\u5236\u5fa1\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u308c\u3089\u3092\u8a2d\u5b9a\u3059\u308b\u30ec\u30b8\u30b9\u30bf\u306f System Level Control Registers (slcr) \u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3046\u3061 FPGA \u306e\u30af\u30ed\u30c3\u30af\u306e\u8a2d\u5b9a\u3068\u30ea\u30bb\u30c3\u30c8\u51fa\u529b\u306e\u5236\u5fa1\u3092\u884c\u3046\u30ec\u30b8\u30b9\u30bf\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n\n\nRegister Name\nAddress\nWidth\nType\nDescription\n\n\n\n\nFPGA0_CLK_CTRL\n0xF8000170\n32\nrw\nPL Clock 0 Output control\n\n\nFPGA1_CLK_CTRL\n0xF8000180\n32\nrw\nPL Clock 1 Output control\n\n\nFPGA2_CLK_CTRL\n0xF8000190\n32\nrw\nPL Clock 2 Output control\n\n\nFPGA3_CLK_CTRL\n0xF80001A0\n32\nrw\nPL Clock 3 Output control\n\n\nFPGA_RST_CTRL\n0xF8000240\n32\nrw\nFPGA Software Reset Control\n\n\n\n\nFPGA[0-3]_CLK_CTRL\n\nName        : FPGA[0-3]_CLK_CTRL\nAddress     : 0xF8000170, 0xF8000180, 0xF8000190, 0xF80001A0\nWidth       : 32\nAccess Type : rw(Read and Write)\nDescription : PL Clock [0-3] Output control\n\n\n\n\nField Name\nBits\nType\nDescription\n\n\n\n\nDIVISOR1\n25:20\nrw\nProvides the divisor used to divide the source clock to generate the required generated clock frequency. Second cascade divide\n\n\nDIVISOR0\n13:08\nrw\nProvides the divisor used to divide the source clock to generate the required generated clock frequency. First cascade divide\n\n\nSRCSEL\n05:04\nrw\nSelect the source used to generate the clock:0x: Source for generated clock is IO PLL.10: Source for generated clock is ARM PLL.11: Source for generated clock is DDR PLL.\n\n\n\n\nFPGA_RST_CTRL\n\nName        : FPGA_RST_CTRL\nAddress     : 0xF8000240\nWidth       : 32\nAccess Type : rw(Read and Write)\nDescription : FPGA Software Reset Control\n\n\n\n\nField Name\nBits\nType\nDescription\n\n\n\n\nFPGA3_OUT_RST\n3\nrw\nPL Reset 3 (FCLKRESETN3 output signal). Refer to the PS7 wrapper in EDK for possible signal inversion. Logic level on the FCLKRESETN3 signal:0: De-assert reset (High logic level).1: Assert Reset (Low logic state)\n\n\nFPGA2_OUT_RST\n2\nrw\nPL Reset 2 (FCLKRESETN2 output signal). Refer to the PS7 wrapper in EDK for possible signal inversion. Logic level on the FCLKRESETN2 signal:0: De-assert reset (High logic level).1: Assert Reset (Low logic state)\n\n\nFPGA1_OUT_RST\n1\nrw\nPL Reset 1 (FCLKRESETN1 output signal). Refer to the PS7 wrapper in EDK for possible signal inversion. Logic level on the FCLKRESETN1 signal:0: De-assert reset (High logic level).1: Assert Reset (Low logic state)\n\n\nFPGA0_OUT_RST\n0\nrw\nPL Reset 0 (FCLKRESETN0 output signal). Refer to the PS7 wrapper in EDK for possible signal inversion. Logic level on the FCLKRESETN0 signal:0: De-assert reset (High logic level).1: Assert Reset (Low logic state)\n\n\n\n\n\u3069\u306e\u3088\u3046\u306a\u5024\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3044\u304b\n\nU-Boot \u304c\u5b9a\u7fa9\u6e08\u307f\u306e\u5024(ZYBO\u306e\u5834\u5408)\n\u6700\u65b0\u306e U-Boot \u3092 Zynq \u7528\u306b\u30d3\u30eb\u30c9\u3057\u305f\u5834\u5408\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30af\u30ed\u30c3\u30af\u306e\u5468\u6ce2\u6570\u3092 U-Boot \u306e clk dump \u30b3\u30de\u30f3\u30c9\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nZynq> clk dump\nclk             frequency\n    armpll          1300000000\n    ddrpll          1050000000\n     iopll          1000000000\n cpu_6or4x           650000000\n cpu_3or2x           325000000\n    cpu_2x           216666666\n    cpu_1x           108333333\n    ddr_2x           350000000\n    ddr_3x           525000000\n       dci            10096154\n     lqspi           200000000\n       smc            21666667\n      pcap           200000000\n      gem0           125000000\n      gem1            16666667\n     fclk0           100000000\n     fclk1           175000000\n     fclk2            12264151\n     fclk3           100000000\n     sdio0            50000000\n     sdio1            50000000\n     uart0            50000000\n     uart1            50000000\n      spi0            15873016\n      spi1            15873016\n usb0_aper           108333333\n usb1_aper           108333333\n gem0_aper           108333333\n gem1_aper           108333333\nsdio0_aper           108333333\nsdio1_aper           108333333\n spi0_aper           108333333\n spi1_aper           108333333\n can0_aper           108333333\n can1_aper           108333333\n i2c0_aper           108333333\n i2c1_aper           108333333\nuart0_aper           108333333\nuart1_aper           108333333\n gpio_aper           108333333\nlqspi_aper           108333333\n  smc_aper           108333333\n   dbg_trc            66666667\n   dbg_apb            66666667\n\n\u3053\u308c\u306b\u3088\u308b\u3068\u30af\u30ed\u30c3\u30af\u306e\u5468\u6ce2\u6570\u306f\u6b21\u306e\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\n\nclk\nfrequency\n\n\n\n\nARMPLL\n1300MHz\n\n\nDDRPLL\n1050MHz\n\n\nIOPLL\n1000MHz\n\n\nFPGA0\n100MHz\n\n\nFPGA1\n175MHz\n\n\nFPGA2\n123MHz\n\n\nFPGA3\n100MHz\n\n\n\n\u6b21\u306b U-Boot \u304c\u30ec\u30b8\u30b9\u30bf\u306b\u3069\u306e\u3088\u3046\u306a\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u304b\u898b\u308b\u3068\u3001\u6b21\u306e\u69d8\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\nRegister Name\nAddress\nU-Boot Def Value\nDescription\n\n\n\n\nFPGA0_CLK_CTRL\n0xF8000170\n0x00100A00\nPL Clock 0 Output control\n\n\nFPGA1_CLK_CTRL\n0xF8000180\n0x00100630\nPL Clock 1 Output control\n\n\nFPGA2_CLK_CTRL\n0xF8000190\n0x00203520\nPL Clock 2 Output control\n\n\nFPGA3_CLK_CTRL\n0xF80001A0\n0x00100A00\nPL Clock 3 Output control\n\n\nFPGA_RST_CTRL\n0xF8000240\n0x00000000\nFPGA Software Reset Control\n\n\n\nFPGA0_CLK_CTRL \u3067\u306f\u3001\u30bd\u30fc\u30b9\u306e PLL \u306b IOPLL\u3001DIVISOR0 \u306b 10\u3001DIVISOR1 \u306b 1 \u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001PL Clock 0 \u306e\u5468\u6ce2\u6570\u306f (1GHz(=IOPLL\u306e\u5468\u6ce2\u6570)\u00f710(=DIVISOR0\u306e\u5024))\u00f7(1(=DIVISOR1\u306e\u5024))\u3067100MHz\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5468\u6ce2\u6570\u306b\u5bfe\u5fdc\u3057\u305f\u8a2d\u5b9a\u5024\n\u4f8b\u3048\u3070 PL Clock 0 \u306b 125MHz \u3092\u8a2d\u5b9a\u3057\u305f\u3051\u308c\u3070\u3001FPGA0_CLK_CTRL \u306b 0x00100800(SRCSEL=IOPLL\u3001DIVISOR0=8\u3001DIVISOR1=1)\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001Zynq \u306e\u3053\u306e PLL \u306e\u4ed5\u69d8\u4e0a\u3001\u30bd\u30fc\u30b9\u306e\u5468\u6ce2\u6570\u306e\u6574\u6570\u5206\u306e\uff11\u306e\u5468\u6ce2\u6570\u3057\u304b\u8a2d\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002\n\u4f8b\u3048\u3070 ZYBO \u306e\u5834\u5408\u3001PL CLock 0 \u306b 133MHz \u3092\u8a2d\u5b9a\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3082\u3001\u7121\u7406\u3067\u3059\u3002\u4e00\u756a\u8fd1\u3044\u306e\u306f\u3001131.25MHz=((1050MHz(=DDRPLL\u306e\u5468\u6ce2\u6570)\u00f78)\u00f71)\u3067\u3001FPGA0_CLK_CTRL \u306b 0x00100803(SRCSEL=DDRPLL\u3001DIVISOR0=8\u3001DIVISOR1=1)\u3092\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3067\u3057\u3087\u3046\u3002\n\n\u305d\u306e\u4ed6\u306e\u30dc\u30fc\u30c9\u306e\u5834\u5408\n\u3053\u3053\u3067\u306f ZYBO \u306e\u4f8b\u3092\u3042\u3052\u307e\u3057\u305f\u304c\u3001ARMPLL\u3001DDRPLL\u3001IOPLL\u306e\u5468\u6ce2\u6570\u306f\u30dc\u30fc\u30c9\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\n\u53c2\u8003\u307e\u3067\u306b\u3001\u5224\u308b\u7bc4\u56f2\u3067\u8abf\u3079\u3066\u898b\u305f\u3068\u3053\u308d\u6b21\u306e\u69d8\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n\nBoard Name\nInput Freq\nARMPLL Mult\nARMPLL Freq\nDDRPLL Mult\nDDRPLL Freq\nIOPLL Mult\nIOPLL Freq\n\n\n\n\nZC706\n33.3333MHz\n40\n1333.333MHz\n32\n1066.667MHz\n30\n1000MHz\n\n\nZC702\n33.3333MHz\n40\n1333.333MHz\n32\n1066.667MHz\n30\n1000MHz\n\n\nZedBoard\n33.3333MHz\n40\n1333.333MHz\n32\n1066.667MHz\n30\n1000MHz\n\n\nZYBO\n50MHz\n26\n1300.000MHz\n21\n1050.000MHz\n20\n1000MHz\n\n\n\n\n\u30ec\u30b8\u30b9\u30bf\u3078\u306e\u66f8\u304d\u8fbc\u307f\n\u7d20\u76f4\u306b mw(memory write) \u30b3\u30de\u30f3\u30c9\u306b\u30a2\u30c9\u30ec\u30b9\u3068\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u66f8\u304d\u8fbc\u307f\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u304c\u3089 Zynq \u306e\u5834\u5408\u306f\u305d\u3046\u3044\u3046\u308f\u3051\u306b\u306f\u3044\u304d\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u306e\u3082\u3001Zynq \u306e System Level Control Registers(slcr) \u306f\u3001\u4e07\u304c\u4e00\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66b4\u8d70\u3057\u3066\u3082\u30ec\u30b8\u30b9\u30bf\u306b\u5909\u306a\u5024\u304c\u66f8\u304d\u8fbc\u307e\u308c\u306a\u3044\u3088\u3046\u306b\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u304c\u304b\u3051\u3089\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u5236\u5fa1\u3059\u308b\u30ec\u30b8\u30b9\u30bf\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n\n\nRegister Name\nAddress\nWidth\nType\nDescription\n\n\n\n\nSLCR_LOCK\n0xF8000004\n32\nwo\nSLCR Write Protection Lock\n\n\nSLCR_UNLOCK\n0xF8000008\n32\nwo\nSLCR Write Protection UnLock\n\n\n\n\nSLCR_LOCK\n\nName        : SLCR_LOCK\nAddress     : 0xF8000004\nWidth       : 32\nAccess Type : wo(Write Only)\nDescription : SLCR Write Protection Lock\n\n\n\n\nField Name\nBits\nType\nDescription\n\n\n\n\nLOCK_KEY\n15:0\nwo\nWrite the lock key, 0x767B, to write protect the slcr registers:  all slcr registers, 0xF800_0000 to 0xF800_0B74,  are write protected until the unlock key is written to the SLCR_UNLOCK register. A read of this register returns zero.\n\n\n\n\nSLCR_UNLOCK\n\nName        : SLCR_UNLOCK\nAddress     : 0xF8000008\nWidth       : 32\nAccess Type : wo(Write Only)\nDescription : SLCR Write Protection Unlock\n\n\n\n\nField Name\nBits\nType\nDescription\n\n\n\n\nUNLOCK_KEY\n15:0\nwo\nWrite the unlock key, 0xDF0D, to enable writes to the slcr registers. All slcr registers, 0xF800_0000 to 0xF800_0B74,  are writeable until locked using the SLCR_LOCK register. A read of this register returns zero.\n\n\n\n\n\u66f8\u304d\u8fbc\u307f\u306e\u624b\u9806\n\u3064\u307e\u308a\u3001FPGA0_CLK_CTRL \u3084 FPGA_RST_CTRL \u306b\u5024\u3092\u66f8\u304d\u8fbc\u3080\u524d\u306b SLCR_UNLOCK(0xF8000008) \u306b 0xDF0D \u3092\u66f8\u3044\u3066\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u30ec\u30b8\u30b9\u30bf\u3078\u306e\u66f8\u304d\u8fbc\u307f\u304c\u7d42\u308f\u3063\u305f\u3089 SLCR_LOCK(0xF8000004) \u306b 0x767B \u3092\u66f8\u3044\u3066\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n\nuEnv.txt \u306e\u4f8b\nU-Boot \u304c\u30d6\u30fc\u30c8\u6642\u306b\u5b9f\u884c\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f uEnv.txt \u3092\u4f7f\u3044\u307e\u3059\u304c\u3001U-Boot \u306b\u306f\u4ed6\u306b\u3082\u5c02\u7528\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u4f7f\u3063\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\nuEnv.txt\nslcr_unlock_cmd=mw.l 0xF8000008 0xDF0D\nslcr_lock_cmd=mw.l 0xF8000004 0x767B\nfpga_set_cmd=run slcr_unlock_cmd && mw.l 0xF8000170 0x00101400 && run slcr_lock_cmd\nfpga_load_cmd=fatload mmc 0 0x03000000 design.bit && fpga loadb 0 0x03000000 $filesize\nlinux_load_cmd=fatload mmc 0 0x03000000 zImage && fatload mmc 0 0x02A00000 devicetree.dtb\nlinux_boot_cmd=bootz 0x03000000 - 0x02A00000\nuenvcmd=run fpga_load_cmd && run fpga_set_cmd && run linux_load_cmd && run linux_boot_cmd\n\n\n\nslcr_unlock_cmd=mw.l 0xF8000008 0xDF0D\nSystem Levec Control Registers \u306e\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u89e3\u9664\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\nslcr_lock_cmd=mw.l 0xF8000004 0x767B\nSystem Levec Control Registers \u306e\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u30bb\u30c3\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\nfpga_set_cmd=run slcr_unlock_cmd && mw.l 0xF8000170 0x00101400 && run slcr_lock_cmd\nPL Clock \u3092\u30bb\u30c3\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\n\u3053\u3053\u3067\u306f FPGA0_CLK_CTRL \u306b 50MHz=(SRCSEL=IOPLL(1GHz),DIVISOR0=20,DIVISOR1=1)\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\nfpga_load_cmd=fatload mmc 0 0x03000000 design.bit && fpga loadb 0 0x03000000 $filesize\nFPGA\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u30d5\u30a1\u30a4\u30eb(\u3053\u3053\u3067\u306fdesign.bit)\u3092 FPGA \u306b\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\nlinux_load_cmd=fatload mmc 0 0x03000000 zImage && fatload mmc 0 0x02A00000 devicetree.dtb\nLinux Kernel\u306e\u30a4\u30e1\u30fc\u30b8\u30d5\u30a1\u30a4\u30eb(zImage)\u3068Device Tree Blob(devicetree.dtb)\u3092\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\nlinux_boot_cmd=bootz 0x03000000 - 0x02A00000\n\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u3057\u305f Linux Kernel \u3068 Device Tree Blob \u3092\u4f7f\u3063\u3066\u30d6\u30fc\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\nuenvcmd=run fpga_load_cmd && run fpga_set_cmd && run linux_load_cmd && run linux_boot_cmd\nFPGA\u306e\u30ed\u30fc\u30c9\u3001FPGA\u306e\u8a2d\u5b9a\u3001Linux \u306e\u30ed\u30fc\u30c9\u3068\u30d6\u30fc\u30c8\u3092\u884c\u3046\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\n\u30d6\u30fc\u30c8\u306e\u969b\u3001uEnv.txt \u306b uenvcmd \u304c\u3042\u308b\u3068\u81ea\u52d5\u7684\u306b\u3053\u306e\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u306a\u304a\u3001uenvcmd \u304c\u3042\u308b\u7a0b\u5ea6\u306e\u6587\u5b57\u6570(256?)\u4ee5\u4e0a\u3060\u3068\u30d6\u30fc\u30c8\u306b\u5931\u6557\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u53c2\u8003\n\nFPGA+SoC+Linux\u30d6\u30fc\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9(\u6982\u8981)\nFPGA+SoC+Linux\u306e\u30d6\u30fc\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9(ZYNQ+Vivado\u7de8)\nFPGA+SoC+Linux\u306e\u30d6\u30fc\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9(ZYNQ+U-Boot-SPL\u7de8)\nZynq-7000 Technical Reference Manual\n\n# \u306f\u3058\u3081\u306b\n\n[\u300cFPGA+SoC+Linux\u306e\u30d6\u30fc\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9(ZYNQ+U-Boot-SPL\u7de8)\u300d](http://qiita.com/ikwzm/items/efacec8d8e0744e17d45)\u3067\u3001U-Boot-spl(U-Boot Second Program Loader)\u3092\u30b9\u30c6\u30fc\u30b8\uff11\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u3068\u3057\u3066 Linux \u3092\u30d6\u30fc\u30c8\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u305d\u306e\u969b\u3001\u3061\u3087\u3063\u3068\u554f\u984c\u306b\u306a\u3063\u305f\u306e\u304c PL \u5468\u308a\u306e\u8a2d\u5b9a\u3067\u3059\u3002\n\nPL\u5468\u308a\u306e\u8a2d\u5b9a\u3092PL\u306e\u30c7\u30b6\u30a4\u30f3\u6642\u306b\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u4f7f\u3046\u5834\u5408\u3001PL\u5074\u306e\u30c7\u30b6\u30a4\u30f3\u3092\u5909\u66f4\u3059\u308b\u5ea6\u306b boot.bin(U-Boot-SPL) \u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059(PL\u5468\u308a\u306e\u8a2d\u5b9a\u304c\u5909\u308f\u3089\u306a\u3044\u5834\u5408\u306f\u9664\u304f)\u3002\n\n\u307e\u305f\u3001PL\u5468\u308a\u306e\u8a2d\u5b9a\u3092 U-Boot \u304c\u3059\u3067\u306b\u5b9a\u7fa9\u6e08\u307f\u306e\u3082\u306e\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u5834\u5408\u306f\u3001boot.bin(U-Boot-SPL)\u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001PL\u5468\u308a\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u305d\u3053\u3067\u3001U-Boot \u306e mw (memory write) \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u76f4\u63a5 Zynq \u306e\u30ec\u30b8\u30b9\u30bf\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u306b\u3088\u3063\u3066 PL\u5468\u308a\u306e\u8a2d\u5b9a\u3092\u5909\u3048\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u306a\u304a\u3001Zynq \u306e\u30ec\u30b8\u30b9\u30bf\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u306e\u3067\u3001\u3051\u3063\u3053\u3046\u5371\u967a\u3067\u3059\u3002\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2 \u3084 PLL \u306b\u8a73\u3057\u3044\u4eba\u5411\u3051\u3067\u3059\u3002\n\u30ec\u30b8\u30b9\u30bf\u7b49\u306e\u8a73\u7d30\u306f\u300cZynq-7000 Technical Reference Manual\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f Xilinx \u793e\u304b\u3089 UG585(User Guide 585)\u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n# PL\u5468\u308a\u306e\u8a2d\u5b9a\u30ec\u30b8\u30b9\u30bf\n\nZynq \u3067 PL \u5468\u308a\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u306a\u30ec\u30b8\u30b9\u30bf\u306f\u3001\u304a\u305d\u3089\u304f\u3001\u30af\u30ed\u30c3\u30af\u306e\u8a2d\u5b9a\u3068\u30ea\u30bb\u30c3\u30c8\u51fa\u529b\u5236\u5fa1\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u3092\u8a2d\u5b9a\u3059\u308b\u30ec\u30b8\u30b9\u30bf\u306f System Level Control Registers (slcr) \u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3046\u3061 FPGA \u306e\u30af\u30ed\u30c3\u30af\u306e\u8a2d\u5b9a\u3068\u30ea\u30bb\u30c3\u30c8\u51fa\u529b\u306e\u5236\u5fa1\u3092\u884c\u3046\u30ec\u30b8\u30b9\u30bf\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n| Register Name |  Address | Width | Type | Description                 |\n|:-------------:|:---------|:-----:|:----:|:----------------------------|\n|FPGA0_CLK_CTRL |0xF8000170|   32  |  rw  |PL Clock 0 Output control    |\n|FPGA1_CLK_CTRL |0xF8000180|   32  |  rw  |PL Clock 1 Output control    |\n|FPGA2_CLK_CTRL |0xF8000190|   32  |  rw  |PL Clock 2 Output control    |\n|FPGA3_CLK_CTRL |0xF80001A0|   32  |  rw  |PL Clock 3 Output control    |\n|FPGA_RST_CTRL  |0xF8000240|   32  |  rw  |FPGA Software Reset Control  |\n\n## FPGA\\[0-3\\]_CLK_CTRL\n\n - Name        : FPGA\\[0-3\\]_CLK_CTRL\n - Address     : 0xF8000170, 0xF8000180, 0xF8000190, 0xF80001A0\n - Width       : 32\n - Access Type : rw(Read and Write)\n - Description : PL Clock \\[0-3\\] Output control\n\n| Field Name | Bits|Type|Description|\n|:-----------|:---:|:--:|:----------|\n| DIVISOR1   |25:20| rw |Provides the divisor used to divide the source clock to generate the required generated clock frequency. Second cascade divide |\n| DIVISOR0   |13:08| rw |Provides the divisor used to divide the source clock to generate the required generated clock frequency. First cascade divide  |\n| SRCSEL     |05:04| rw | Select the source used to generate the clock:<br>0x: Source for generated clock is IO PLL.<br>10: Source for generated clock is ARM PLL.<br>11: Source for generated clock is DDR PLL. |\n\n## FPGA_RST_CTRL\n\n - Name        : FPGA_RST_CTRL\n - Address     : 0xF8000240\n - Width       : 32\n - Access Type : rw(Read and Write)\n - Description : FPGA Software Reset Control\n \n|  Field Name | Bits|Type|Description|\n|:------------|:---:|:--:|:----------|\n|FPGA3_OUT_RST|  3  | rw |PL Reset 3 (FCLKRESETN3 output signal). Refer to the PS7 wrapper in EDK for possible signal inversion. Logic level on the FCLKRESETN3 signal:<br>0: De-assert reset (High logic level).<br>1: Assert Reset (Low logic state) |\n|FPGA2_OUT_RST|  2  | rw |PL Reset 2 (FCLKRESETN2 output signal). Refer to the PS7 wrapper in EDK for possible signal inversion. Logic level on the FCLKRESETN2 signal:<br>0: De-assert reset (High logic level).<br>1: Assert Reset (Low logic state) |\n|FPGA1_OUT_RST|  1  | rw |PL Reset 1 (FCLKRESETN1 output signal). Refer to the PS7 wrapper in EDK for possible signal inversion. Logic level on the FCLKRESETN1 signal:<br>0: De-assert reset (High logic level).<br>1: Assert Reset (Low logic state) |\n|FPGA0_OUT_RST|  0  | rw |PL Reset 0 (FCLKRESETN0 output signal). Refer to the PS7 wrapper in EDK for possible signal inversion. Logic level on the FCLKRESETN0 signal:<br>0: De-assert reset (High logic level).<br>1: Assert Reset (Low logic state) |\n\n# \u3069\u306e\u3088\u3046\u306a\u5024\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3044\u304b\n\n## U-Boot \u304c\u5b9a\u7fa9\u6e08\u307f\u306e\u5024(ZYBO\u306e\u5834\u5408)\n\n\u6700\u65b0\u306e U-Boot \u3092 Zynq \u7528\u306b\u30d3\u30eb\u30c9\u3057\u305f\u5834\u5408\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30af\u30ed\u30c3\u30af\u306e\u5468\u6ce2\u6570\u3092 U-Boot \u306e clk dump \u30b3\u30de\u30f3\u30c9\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n````\nZynq> clk dump\nclk             frequency\n    armpll          1300000000\n    ddrpll          1050000000\n     iopll          1000000000\n cpu_6or4x           650000000\n cpu_3or2x           325000000\n    cpu_2x           216666666\n    cpu_1x           108333333\n    ddr_2x           350000000\n    ddr_3x           525000000\n       dci            10096154\n     lqspi           200000000\n       smc            21666667\n      pcap           200000000\n      gem0           125000000\n      gem1            16666667\n     fclk0           100000000\n     fclk1           175000000\n     fclk2            12264151\n     fclk3           100000000\n     sdio0            50000000\n     sdio1            50000000\n     uart0            50000000\n     uart1            50000000\n      spi0            15873016\n      spi1            15873016\n usb0_aper           108333333\n usb1_aper           108333333\n gem0_aper           108333333\n gem1_aper           108333333\nsdio0_aper           108333333\nsdio1_aper           108333333\n spi0_aper           108333333\n spi1_aper           108333333\n can0_aper           108333333\n can1_aper           108333333\n i2c0_aper           108333333\n i2c1_aper           108333333\nuart0_aper           108333333\nuart1_aper           108333333\n gpio_aper           108333333\nlqspi_aper           108333333\n  smc_aper           108333333\n   dbg_trc            66666667\n   dbg_apb            66666667\n````\n\n\u3053\u308c\u306b\u3088\u308b\u3068\u30af\u30ed\u30c3\u30af\u306e\u5468\u6ce2\u6570\u306f\u6b21\u306e\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n|clk   | frequency |\n|:----:|----------:|\n|ARMPLL|   1300MHz |\n|DDRPLL|   1050MHz |\n|IOPLL |   1000MHz |\n|FPGA0 |    100MHz |\n|FPGA1 |    175MHz |\n|FPGA2 |    123MHz |\n|FPGA3 |    100MHz |\n\n\u6b21\u306b U-Boot \u304c\u30ec\u30b8\u30b9\u30bf\u306b\u3069\u306e\u3088\u3046\u306a\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u304b\u898b\u308b\u3068\u3001\u6b21\u306e\u69d8\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n| Register Name |  Address | U-Boot Def Value | Description                 |\n|:-------------:|:---------|:-----------------|:----------------------------|\n|FPGA0_CLK_CTRL |0xF8000170| 0x00100A00       |PL Clock 0 Output control    |\n|FPGA1_CLK_CTRL |0xF8000180| 0x00100630       |PL Clock 1 Output control    |\n|FPGA2_CLK_CTRL |0xF8000190| 0x00203520       |PL Clock 2 Output control    |\n|FPGA3_CLK_CTRL |0xF80001A0| 0x00100A00       |PL Clock 3 Output control    |\n|FPGA_RST_CTRL  |0xF8000240| 0x00000000       |FPGA Software Reset Control  |\n\nFPGA0_CLK_CTRL \u3067\u306f\u3001\u30bd\u30fc\u30b9\u306e PLL \u306b IOPLL\u3001DIVISOR0 \u306b 10\u3001DIVISOR1 \u306b 1 \u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001PL Clock 0 \u306e\u5468\u6ce2\u6570\u306f (1GHz(=IOPLL\u306e\u5468\u6ce2\u6570)\u00f710(=DIVISOR0\u306e\u5024))\u00f7(1(=DIVISOR1\u306e\u5024))\u3067100MHz\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n## \u5468\u6ce2\u6570\u306b\u5bfe\u5fdc\u3057\u305f\u8a2d\u5b9a\u5024\n\n\u4f8b\u3048\u3070 PL Clock 0 \u306b 125MHz \u3092\u8a2d\u5b9a\u3057\u305f\u3051\u308c\u3070\u3001FPGA0_CLK_CTRL \u306b 0x00100800(SRCSEL=IOPLL\u3001DIVISOR0=8\u3001DIVISOR1=1)\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001Zynq \u306e\u3053\u306e PLL \u306e\u4ed5\u69d8\u4e0a\u3001\u30bd\u30fc\u30b9\u306e\u5468\u6ce2\u6570\u306e\u6574\u6570\u5206\u306e\uff11\u306e\u5468\u6ce2\u6570\u3057\u304b\u8a2d\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002\n\u4f8b\u3048\u3070 ZYBO \u306e\u5834\u5408\u3001PL CLock 0 \u306b 133MHz \u3092\u8a2d\u5b9a\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3082\u3001\u7121\u7406\u3067\u3059\u3002\u4e00\u756a\u8fd1\u3044\u306e\u306f\u3001131.25MHz=((1050MHz(=DDRPLL\u306e\u5468\u6ce2\u6570)\u00f78)\u00f71)\u3067\u3001FPGA0_CLK_CTRL \u306b 0x00100803(SRCSEL=DDRPLL\u3001DIVISOR0=8\u3001DIVISOR1=1)\u3092\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3067\u3057\u3087\u3046\u3002\n\n\n## \u305d\u306e\u4ed6\u306e\u30dc\u30fc\u30c9\u306e\u5834\u5408\n\n\u3053\u3053\u3067\u306f ZYBO \u306e\u4f8b\u3092\u3042\u3052\u307e\u3057\u305f\u304c\u3001ARMPLL\u3001DDRPLL\u3001IOPLL\u306e\u5468\u6ce2\u6570\u306f\u30dc\u30fc\u30c9\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\n\u53c2\u8003\u307e\u3067\u306b\u3001\u5224\u308b\u7bc4\u56f2\u3067\u8abf\u3079\u3066\u898b\u305f\u3068\u3053\u308d\u6b21\u306e\u69d8\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n| Board Name | Input Freq | ARMPLL Mult | ARMPLL Freq | DDRPLL Mult | DDRPLL Freq | IOPLL Mult  | IOPLL Freq  |\n|:----------:|:-----------|:------------|:------------|:------------|:------------|:------------|:------------|\n| ZC706      | 33.3333MHz | 40          | 1333.333MHz | 32          | 1066.667MHz | 30          | 1000MHz     |\n| ZC702      | 33.3333MHz | 40          | 1333.333MHz | 32          | 1066.667MHz | 30          | 1000MHz     |\n| ZedBoard   | 33.3333MHz | 40          | 1333.333MHz | 32          | 1066.667MHz | 30          | 1000MHz     |\n| ZYBO       | 50MHz      | 26          | 1300.000MHz | 21          | 1050.000MHz | 20          | 1000MHz     |\n\n\n# \u30ec\u30b8\u30b9\u30bf\u3078\u306e\u66f8\u304d\u8fbc\u307f\n\n\u7d20\u76f4\u306b mw(memory write) \u30b3\u30de\u30f3\u30c9\u306b\u30a2\u30c9\u30ec\u30b9\u3068\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u66f8\u304d\u8fbc\u307f\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u304c\u3089 Zynq \u306e\u5834\u5408\u306f\u305d\u3046\u3044\u3046\u308f\u3051\u306b\u306f\u3044\u304d\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u306e\u3082\u3001Zynq \u306e System Level Control Registers(slcr) \u306f\u3001\u4e07\u304c\u4e00\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66b4\u8d70\u3057\u3066\u3082\u30ec\u30b8\u30b9\u30bf\u306b\u5909\u306a\u5024\u304c\u66f8\u304d\u8fbc\u307e\u308c\u306a\u3044\u3088\u3046\u306b\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u304c\u304b\u3051\u3089\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u5236\u5fa1\u3059\u308b\u30ec\u30b8\u30b9\u30bf\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n| Register Name |  Address | Width | Type | Description                 |\n|:-------------:|:---------|:-----:|:----:|:----------------------------|\n|SLCR_LOCK      |0xF8000004|   32  |  wo  |SLCR Write Protection Lock   |\n|SLCR_UNLOCK    |0xF8000008|   32  |  wo  |SLCR Write Protection UnLock |\n\n## SLCR_LOCK\n\n - Name        : SLCR_LOCK\n - Address     : 0xF8000004\n - Width       : 32\n - Access Type : wo(Write Only)\n - Description : SLCR Write Protection Lock\n\n| Field Name | Bits|Type|Description|\n|:-----------|:---:|:--:|:----------|\n| LOCK_KEY   | 15:0| wo | Write the lock key, 0x767B, to write protect the slcr registers: <br> all slcr registers, 0xF800_0000 to 0xF800_0B74, <br> are write protected until the unlock key is written to the SLCR_UNLOCK register. <br>A read of this register returns zero.|\n\n## SLCR_UNLOCK\n\n - Name        : SLCR_UNLOCK\n - Address     : 0xF8000008\n - Width       : 32\n - Access Type : wo(Write Only)\n - Description : SLCR Write Protection Unlock\n\n| Field Name | Bits|Type|Description|\n|:-----------|:---:|:--:|:----------|\n| UNLOCK_KEY | 15:0| wo | Write the unlock key, 0xDF0D, to enable writes to the slcr registers.<br> All slcr registers, 0xF800_0000 to 0xF800_0B74, <br> are writeable until locked using the SLCR_LOCK register. <br>A read of this register returns zero.|\n\n## \u66f8\u304d\u8fbc\u307f\u306e\u624b\u9806\n\n\u3064\u307e\u308a\u3001FPGA0_CLK_CTRL \u3084 FPGA_RST_CTRL \u306b\u5024\u3092\u66f8\u304d\u8fbc\u3080\u524d\u306b SLCR_UNLOCK(0xF8000008) \u306b 0xDF0D \u3092\u66f8\u3044\u3066\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u30ec\u30b8\u30b9\u30bf\u3078\u306e\u66f8\u304d\u8fbc\u307f\u304c\u7d42\u308f\u3063\u305f\u3089 SLCR_LOCK(0xF8000004) \u306b 0x767B \u3092\u66f8\u3044\u3066\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n\n## uEnv.txt \u306e\u4f8b\n\nU-Boot \u304c\u30d6\u30fc\u30c8\u6642\u306b\u5b9f\u884c\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f uEnv.txt \u3092\u4f7f\u3044\u307e\u3059\u304c\u3001U-Boot \u306b\u306f\u4ed6\u306b\u3082\u5c02\u7528\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u4f7f\u3063\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\n````u-boot:uEnv.txt\nslcr_unlock_cmd=mw.l 0xF8000008 0xDF0D\nslcr_lock_cmd=mw.l 0xF8000004 0x767B\nfpga_set_cmd=run slcr_unlock_cmd && mw.l 0xF8000170 0x00101400 && run slcr_lock_cmd\nfpga_load_cmd=fatload mmc 0 0x03000000 design.bit && fpga loadb 0 0x03000000 $filesize\nlinux_load_cmd=fatload mmc 0 0x03000000 zImage && fatload mmc 0 0x02A00000 devicetree.dtb\nlinux_boot_cmd=bootz 0x03000000 - 0x02A00000\nuenvcmd=run fpga_load_cmd && run fpga_set_cmd && run linux_load_cmd && run linux_boot_cmd\n````\n\n- slcr_unlock_cmd=mw.l 0xF8000008 0xDF0D      \n  System Levec Control Registers \u306e\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u89e3\u9664\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\n- slcr_lock_cmd=mw.l 0xF8000004 0x767B   \n  System Levec Control Registers \u306e\u30e9\u30a4\u30c8\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u3092\u30bb\u30c3\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\n- fpga_set_cmd=run slcr_unlock_cmd && mw.l 0xF8000170 0x00101400 && run slcr_lock_cmd   \n  PL Clock \u3092\u30bb\u30c3\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002   \n  \u3053\u3053\u3067\u306f FPGA0_CLK_CTRL \u306b 50MHz=(SRCSEL=IOPLL(1GHz),DIVISOR0=20,DIVISOR1=1)\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n- fpga_load_cmd=fatload mmc 0 0x03000000 design.bit && fpga loadb 0 0x03000000 $filesize   \n  FPGA\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u30d5\u30a1\u30a4\u30eb(\u3053\u3053\u3067\u306fdesign.bit)\u3092 FPGA \u306b\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\n- linux_load_cmd=fatload mmc 0 0x03000000 zImage && fatload mmc 0 0x02A00000 devicetree.dtb   \n  Linux Kernel\u306e\u30a4\u30e1\u30fc\u30b8\u30d5\u30a1\u30a4\u30eb(zImage)\u3068Device Tree Blob(devicetree.dtb)\u3092\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\n- linux_boot_cmd=bootz 0x03000000 - 0x02A00000   \n  \u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u3057\u305f Linux Kernel \u3068 Device Tree Blob \u3092\u4f7f\u3063\u3066\u30d6\u30fc\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002\n- uenvcmd=run fpga_load_cmd && run fpga_set_cmd && run linux_load_cmd && run linux_boot_cmd   \n  FPGA\u306e\u30ed\u30fc\u30c9\u3001FPGA\u306e\u8a2d\u5b9a\u3001Linux \u306e\u30ed\u30fc\u30c9\u3068\u30d6\u30fc\u30c8\u3092\u884c\u3046\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3002   \n  \u30d6\u30fc\u30c8\u306e\u969b\u3001uEnv.txt \u306b uenvcmd \u304c\u3042\u308b\u3068\u81ea\u52d5\u7684\u306b\u3053\u306e\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002   \n  \u306a\u304a\u3001uenvcmd \u304c\u3042\u308b\u7a0b\u5ea6\u306e\u6587\u5b57\u6570(256?)\u4ee5\u4e0a\u3060\u3068\u30d6\u30fc\u30c8\u306b\u5931\u6557\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n## \u53c2\u8003\n\n\n* [FPGA+SoC+Linux\u30d6\u30fc\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9(\u6982\u8981)](http://qiita.com/ikwzm/items/b4ccae34cf554c80d1b4)\n* [FPGA+SoC+Linux\u306e\u30d6\u30fc\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9(ZYNQ+Vivado\u7de8)](http://qiita.com/ikwzm/items/1614c35233e1836c7a26)\n* [FPGA+SoC+Linux\u306e\u30d6\u30fc\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9(ZYNQ+U-Boot-SPL\u7de8)](http://qiita.com/ikwzm/items/efacec8d8e0744e17d45)\n* [Zynq-7000 Technical Reference Manual](http://www.xilinx.com/support/documentation/user_guides/ug585-Zynq-7000-TRM.pdf)\n", "tags": ["U-boot", "FPGA", "zynq"]}