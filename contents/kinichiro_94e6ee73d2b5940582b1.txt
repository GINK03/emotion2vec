{"context": "libtls \u306f OpenBSD \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c LibreSSL \u306b\u65b0\u898f\u8ffd\u52a0\u3057\u305f TLS \u901a\u4fe1\u7528\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 API \u3067\u3059\u3002\nlibtls \u306f\u30b7\u30f3\u30d7\u30eb\u306a API \u306a\u306e\u3067\u898b\u901a\u3057\u306e\u826f\u3044 TLS \u901a\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001libtls \u3092\u4f7f\u3063\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\n\u306f\u3058\u3081\u306b\nlibtls \u306f\u3001OpenSSL \u3068 API \u4e92\u63db\u3092\u57fa\u672c\u65b9\u91dd\u3068\u3057\u3066\u3044\u308b LibreSSL \u306b\u3001\u5168\u304f\u5225\u306e API \u4f53\u7cfb\u3068\u3057\u3066\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002libtls \u306f\u5185\u90e8\u3067\u306f OpenSSL \u306e API \u3067\u3042\u308b SSL_xxx() \u3092\u30b3\u30fc\u30eb\u3057\u3066\u3044\u308b\u306e\u3067\u3001OpenSSL API \u306e\u30e9\u30c3\u30d1\u30fc\u3068\u3082\u8a00\u3048\u307e\u3059\u304c\u3001\u7169\u96d1\u306a\u90e8\u5206\u3092\u3046\u307e\u304f\u96a0\u853d\u3057\u3066\u3044\u308b\u306e\u3067\u898b\u901a\u3057\u306e\u826f\u3044 API \u4f53\u7cfb\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nOpenBSD \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f TLS \u901a\u4fe1\u3092\u5fc5\u8981\u3068\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067 libtls \u3092\u4f7f\u3044\u59cb\u3081\u3066\u3044\u307e\u3059\u3002httpd \u306f libtls \u3092\u4f7f\u3063\u305f\u30b5\u30fc\u30d0\u5074\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\u3067\u3059\u3057\u3001nc(netcat) \u30b3\u30de\u30f3\u30c9\u3082 libtls \u3067\u66f8\u304d\u76f4\u3055\u308c\u3066 LibreSSL \u30dd\u30fc\u30bf\u30d6\u30eb\u7248\u306b\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\nlibtls \u306e API \u306f tls_ \u3067\u59cb\u307e\u308b\u95a2\u6570\u540d\u3067\u7d71\u4e00\u3055\u308c\u3066\u304a\u308a\u3001\u30e9\u30a4\u30d6\u30e9\u30ea libtls.* \u3092\u30ea\u30f3\u30af\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002libtls \u306f LibreSSL \u306b\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nlibtls \u306e\u60c5\u5831\nlibtls \u306e API \u306f man tls_init \u3067\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u53c2\u7167\u3067\u304d\u307e\u3059\u3002\n\n\u74b0\u5883\n\u4eca\u56de\u306e\u78ba\u8a8d\u306f CentOS7(x86_64) \u3067\u884c\u3044\u307e\u3057\u305f\u3002\nLibreSSL \u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a /usr/local/ \u914d\u4e0b\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n# wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.4.1.tar.gz\n# tar xf libressl-2.4.1.tar.gz\n# cd libressl-2.4.1/\n# ./configure\n# make check\n# sudo make install\n# export LD_LIBRARY_PATH=/usr/local/lib\n\n\nlibtls \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 \u30d7\u30ed\u30b0\u30e9\u30e0 \u306e\u4f8b\n\u6700\u521d\u306b\u3001HTTP \u30b5\u30fc\u30d0\u306b TLS \u901a\u4fe1\u3067 GET \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u308b\u3060\u3051\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 \u30d7\u30ed\u30b0\u30e9\u30e0 \u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nlibtls_client1.c\n#include <stdio.h>\n#include <string.h>\n#include <err.h>\n#include <tls.h>\n\nint\nmain(int argc, char *argv[])\n{\n    struct tls *ctx = NULL;\n    ssize_t len;\n    unsigned char buf[BUFSIZ];\n\n    if (argc < 3) {\n        fprintf(stderr, \"usage: %s host port\\n\", argv[0]);\n        return(1);\n    }\n\n    /*\n    ** (1) libtls \u306e\u521d\u671f\u5316\n    */\n\n    if (tls_init() != 0)\n        err(1, \"tls_init:\");\n\n    /*\n    ** (2) TLS \u901a\u4fe1\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u751f\u6210\n    */\n\n    if ((ctx = tls_client()) == NULL)\n        err(1, \"tls_client:\");\n\n    /*\n    ** (3) HTTP \u30b5\u30fc\u30d0\u306b TLS \u63a5\u7d9a\n    */\n\n    if (tls_connect(ctx, argv[1], argv[2]) != 0)\n        err(1, \"tls_connect: %s\", tls_error(ctx));\n\n    /*\n    ** (4) HTTP \u8981\u6c42\u3092 TLS \u3067\u9001\u4fe1\n    */\n\n    sprintf(buf, \"GET / HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n\", argv[1]);\n\n    if((len = tls_write(ctx, buf, strlen(buf))) < 0)\n        err(1, \"tls_write: %s\", tls_error(ctx));\n\n    /*\n    ** (5) HTTP \u5fdc\u7b54\u3092 TLS \u3067\u53d7\u4fe1\n    */\n\n    while ((len = tls_read(ctx, buf, sizeof(buf))) > 0) {\n        if (len == TLS_WANT_POLLIN || len == TLS_WANT_POLLOUT)\n            continue;\n        if (len < 0)\n            err(1, \"tls_read: %s\", tls_error(ctx));\n        else\n            printf(\"%*.*s\", (int)len, (int)len, buf);\n    }\n\n    /*\n    ** (6) TLS \u63a5\u7d9a\u3092\u30af\u30ed\u30fc\u30ba\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u89e3\u653e\n    */\n\n    if (tls_close(ctx) != 0)\n        err(1, \"tls_close: %s\", tls_error(ctx));\n    tls_free(ctx);\n\n    return(0);\n}\n\n\n\u3053\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e Makefile \u3067 make -f make1.mk \u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\nmake1.mk\nall :: libtls_client1\n\nlibtls_client1 : libtls_client1.o\n    $(CC) -g -o $@ $^ -L/usr/local/lib -ltls -lssl -lcrypto\n\n.c.o :\n    $(CC) -g -c -o $@ $< -I/usr/local/include\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b HTTP \u30b5\u30fc\u30d0\u304b\u3089\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306e HTML \u3092 https \u3067\u53d6\u3063\u3066\u6765\u307e\u3059\u3002\n# ./libtls_client1 www.openbsd.org 443\nHTTP/1.0 200 OK\nConnection: close\nContent-Length: 4642\nContent-Type: text/html\nDate: Thu, 16 Jun 2016 11:12:10 GMT\nLast-Modified: Wed, 18 May 2016 22:08:02 GMT\nServer: OpenBSD httpd\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n    <title>OpenBSD</title>\n... (\u7565) ...\n</html>\nlibtls_client: tls_close: EOF without close notify: Success\n# \n\nlibtls \u306f\u30b7\u30f3\u30d7\u30eb\u306a\u306e\u3067\u3001API \u306e\u4f7f\u3044\u65b9\u306b\u982d\u3092\u60a9\u307e\u305b\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3002\nlibtls \u3092\u4f7f\u3046\u3068 TLS \u901a\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u306e\u304c\u7c21\u5358\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3082\u3046\u5c11\u3057\u9ad8\u5ea6\u306a\u8981\u6c42\u3078\u306e\u5bfe\u5fdc\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001libtls \u306e\u57fa\u790e\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u6700\u5c0f\u9650\u306e API \u3060\u3051\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u6b21\u306b\u3001\u3082\u3046\u5c11\u3057\u9ad8\u5ea6\u306a\u8981\u6c42\u3078\u306e\u5bfe\u5fdc\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\n\u4e0a\u306e\u4f8b\u306f\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u5168\u3066 libtls \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u304a\u4efb\u305b\u3067\u3057\u305f\u3002\nlibtls \u3067\u3053\u308c\u3089\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u304b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u4f8b\u3067\u3059\u304c\u3001\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u306b\u306f tls_config_xxx() \u30b7\u30ea\u30fc\u30ba\u306e API \u3092\u4f7f\u3044\u307e\u3059\u3002\n...\n    /*\n    ** \u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u6697\u53f7\u5316\u65b9\u5f0f\u306e\u6307\u5b9a\n    */\n\n    if ((cfg = tls_config_new()) == NULL)\n        err(1, \"tls_config_new:\");\n\n    if (tls_config_parse_protocols(&protocols, \"all\") != 0)\n        err(1, \"tls_config_parse_protocols: %s\", tls_error(ctx));\n\n    tls_config_set_protocols(cfg, protocols);\n\n    if (tls_config_set_ciphers(cfg, \"CAMELLIA:AESGCM\") != 0)\n        err(1, \"tls_config_set_ciphers: %s\", tls_error(ctx));\n\n    if (tls_configure(ctx, cfg) != 0)\n        err(1, \"tls_configure: %s\", tls_error(ctx));\n...\n\ntls_config_new() \u3067 cfg \u3092\u4f5c\u3063\u3066\u304a\u304d\u3001tls_config_xxx() \u30b7\u30ea\u30fc\u30ba\u306e API \u3067\u7a2e\u3005\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u3001tls_configure() \u3067\u8a2d\u5b9a\u3092\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u7d50\u3073\u3064\u3051\u308b\u3068\u3044\u3046\u624b\u9806\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3092 \"all\" \u3068\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u306f \"tlsv1.0,tlsv1.1,tlsv1.2\" \u3068\u540c\u3058\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002\n\u6697\u53f7\u5316\u65b9\u5f0f\u306f \"CAMELLIA:AESGCM\" \u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u4f8b\u306b\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001CA\u8a3c\u660e\u66f8\u306e\u8a2d\u5b9a\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u306e\u8a2d\u5b9a\u3001\u79d8\u5bc6\u9375\u306e\u8a2d\u5b9a\u3001\u7b49\u3082 tls_config_xxx() \u30b7\u30ea\u30fc\u30ba\u306e API \u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nTLS \u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u5f97\u308b\u65b9\u6cd5\nTLS \u901a\u4fe1\u306f\u5b9f\u969b\u306e\u9001\u53d7\u4fe1\u304c\u59cb\u307e\u308b\u524d\u306b\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u3088\u3063\u3066\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u30b5\u30fc\u30d0\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u9593\u3067\u53d6\u308a\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\u53d6\u308a\u6c7a\u3081\u306b\u3088\u308a\u6c7a\u5b9a\u3057\u305f\u306e\u304c\u3001\u3069\u3093\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3069\u3093\u306a\u6697\u53f7\u5316\u65b9\u5f0f\u306a\u306e\u304b\u7b49\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u5f97\u308b libtls API \u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u4f8b\u3067\u3059\u3002libtls \u306f\u3053\u308c\u3089\u306e\u60c5\u5831\u3092\u5f97\u308b API \u3092\u7528\u610f\u3057\u3066\u304a\u308a\u3001\u4f7f\u7528\u4e2d\u306e\u6709\u52b9\u306a ctx \u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n...\n    if ((p = tls_peer_cert_issuer(ctx)) == NULL)\n        err(1, \"tls_peer_cert_issuer: %s\", tls_error(ctx));\n    printf(\"tls_peer_cert_issuer: %s\\n\", p);\n\n    if ((p = tls_peer_cert_subject(ctx)) == NULL)\n        err(1, \"tls_peer_cert_subject: %s\", tls_error(ctx));\n    printf(\"tls_peer_cert_subject: %s\\n\", p);\n...\n    if ((p = tls_conn_version(ctx)) == NULL)\n        err(1, \"tls_conn_version: %s\", tls_error(ctx));\n    printf(\"tls_conn_version: %s\\n\", p);\n\n    if ((p = tls_conn_cipher(ctx)) == NULL)\n        err(1, \"tls_conn_cipher: %s\", tls_error(ctx));\n    printf(\"tls_conn_cipher: %s\\n\", p);\n...\n\n\u3053\u308c\u3089\u306e API \u306f TLS \u306e\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u304c\u884c\u308f\u308c\u305f\u5f8c\u3067\u306a\u3044\u3068\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002\nlibtls \u306b\u304a\u3044\u3066\u306f\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306f tls_read() \u3084 tls_write() \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u81ea\u52d5\u7684\u306b\u80cc\u5f8c\u3067\u884c\u308f\u308c\u307e\u3059\u304c\u3001\u660e\u793a\u7684\u306b\u884c\u3044\u305f\u3044\u5834\u5408\u306f tls_handshake() \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3082\u3046\u5c11\u3057\u9ad8\u5ea6\u306a\u8981\u6c42\u306b\u5bfe\u5fdc\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u6307\u5b9a\u3057\u3001TLS \u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\nlibtls_client2.c\n#include <stdio.h>\n#include <string.h>\n#include <err.h>\n#include <tls.h>\n\nint dump_session_info(struct tls *ctx, const char *name);\n\nint\nmain(int argc, char *argv[])\n{\n    struct tls *ctx = NULL;\n    struct tls_config *cfg = NULL;\n    uint32_t protocols;\n    ssize_t len;\n    unsigned char buf[BUFSIZ];\n\n    if (argc < 3) {\n        fprintf(stderr, \"usage: %s host port\\n\", argv[0]);\n        return(1);\n    }\n\n    /*\n    ** (1) libtls \u306e\u521d\u671f\u5316\n    */\n\n    if (tls_init() != 0)\n        err(1, \"tls_init:\");\n\n    /*\n    ** (2) TLS \u901a\u4fe1\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u751f\u6210\n    */\n\n    if ((ctx = tls_client()) == NULL)\n        err(1, \"tls_client:\");\n\n    /*\n    ** \u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u6697\u53f7\u5316\u65b9\u5f0f\u306e\u6307\u5b9a\n    */\n\n    if ((cfg = tls_config_new()) == NULL)\n        err(1, \"tls_config_new:\");\n\n    if (tls_config_parse_protocols(&protocols, \"all\") != 0)\n        err(1, \"tls_config_parse_protocols: %s\", tls_error(ctx));\n\n    tls_config_set_protocols(cfg, protocols);\n\n    if (tls_config_set_ciphers(cfg, \"CAMELLIA:AESGCM\") != 0)\n        err(1, \"tls_config_set_ciphers: %s\", tls_error(ctx));\n\n    if (tls_configure(ctx, cfg) != 0)\n        err(1, \"tls_configure: %s\", tls_error(ctx));\n\n    /*\n    ** (3) HTTP \u30b5\u30fc\u30d0\u306b TLS \u63a5\u7d9a\n    */\n\n    if (tls_connect(ctx, argv[1], argv[2]) != 0)\n        err(1, \"tls_connect: %s\", tls_error(ctx));\n\n    /*\n    ** (4) HTTP \u8981\u6c42\u3092 TLS \u3067\u9001\u4fe1\n    */\n\n    sprintf(buf, \"GET / HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n\", argv[1]);\n\n    if((len = tls_write(ctx, buf, strlen(buf))) < 0)\n        err(1, \"tls_write: %s\", tls_error(ctx));\n\n    /*\n    ** \u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u306e\u30c0\u30f3\u30d7\n    */\n\n    dump_session_info(ctx, argv[1]);\n\n    /*\n    ** (5) HTTP \u5fdc\u7b54\u3092 TLS \u3067\u53d7\u4fe1\n    */\n\n    while ((len = tls_read(ctx, buf, sizeof(buf))) > 0) {\n        if (len == TLS_WANT_POLLIN || len == TLS_WANT_POLLOUT)\n            continue;\n        if (len < 0)\n            err(1, \"tls_read: %s\", tls_error(ctx));\n        else\n            printf(\"%*.*s\", (int)len, (int)len, buf);\n    }\n\n    /*\n    ** (6) TLS \u63a5\u7d9a\u3092\u30af\u30ed\u30fc\u30ba\u3001cfg\u3068\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u89e3\u653e\n    */\n\n    if (tls_close(ctx) != 0)\n        err(1, \"tls_close: %s\", tls_error(ctx));\n    tls_config_free(cfg);\n    tls_free(ctx);\n\n    return(0);\n}\n\n\n\u4ee5\u4e0b\u306f TLS \u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nlibtls_util.c\n#include <stdio.h>\n#include <time.h>\n#include <err.h>\n#include <tls.h>\n\nint\ndump_session_info(struct tls *ctx, const char *name)\n{\n    const char *p;\n    time_t time;\n    struct tm *tm;\n\n    if (tls_peer_cert_provided(ctx) == 1)\n        printf(\"tls_peer_cert_provided: YES\\n\");\n    else {\n        printf(\"tls_peer_cert_provided: NO\\n\");\n        return(-1);\n    }\n\n    if (tls_peer_cert_contains_name(ctx, name) == 1)\n        printf(\"tls_peer_cert_contains_name: %s\\n\", name);\n    else\n        printf(\"tls_peer_cert_contains_name: invalid\\n\");\n\n    if ((p = tls_peer_cert_issuer(ctx)) == NULL)\n        err(1, \"tls_peer_cert_issuer: %s\", tls_error(ctx));\n    printf(\"tls_peer_cert_issuer: %s\\n\", p);\n\n    if ((p = tls_peer_cert_subject(ctx)) == NULL)\n        err(1, \"tls_peer_cert_subject: %s\", tls_error(ctx));\n    printf(\"tls_peer_cert_subject: %s\\n\", p);\n\n    if ((p = tls_peer_cert_hash(ctx)) == NULL)\n        err(1, \"tls_peer_cert_hash: %s\", tls_error(ctx));\n    printf(\"tls_peer_cert_hash: %s\\n\", p);\n\n    if ((time = tls_peer_cert_notbefore(ctx)) < 0)\n        err(1, \"tls_peer_cert_notbefore: %s\", tls_error(ctx));\n    tm = localtime(&time);\n    printf(\"tls_peer_cert_notbefore: %04d/%02d/%02d %02d:%02d:%02d\\n\",\n        1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday,\n        tm->tm_hour, tm->tm_min, tm->tm_sec);\n\n    if ((time = tls_peer_cert_notafter(ctx)) < 0)\n        err(1, \"tls_peer_cert_notafter: %s\", tls_error(ctx));\n    tm = localtime(&time);\n    printf(\"tls_peer_cert_notafter: %04d/%02d/%02d %02d:%02d:%02d\\n\",\n        1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday,\n        tm->tm_hour, tm->tm_min, tm->tm_sec);\n\n    if ((p = tls_conn_version(ctx)) == NULL)\n        err(1, \"tls_conn_version: %s\", tls_error(ctx));\n    printf(\"tls_conn_version: %s\\n\", p);\n\n    if ((p = tls_conn_cipher(ctx)) == NULL)\n        err(1, \"tls_conn_cipher: %s\", tls_error(ctx));\n    printf(\"tls_conn_cipher: %s\\n\", p);\n\n    return(0);\n}\n\n\n\u3053\u308c\u3089\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e Makefile \u3067 make -f make2.mk \u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\nmake2.mk\nall :: libtls_client2\n\nlibtls_client2 : libtls_client2.o libtls_util.o\n    $(CC) -g -o $@ $^ -L/usr/local/lib -ltls -lssl -lcrypto\n\n.c.o :\n    $(CC) -g -c -o $@ $< -I/usr/local/include\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b HTTP \u30b5\u30fc\u30d0\u3068\u306e\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u3088\u308a\u5165\u624b\u3057\u305f\u8a3c\u660e\u66f8\u306e\u60c5\u5831\u3084\u3001\u53d6\u308a\u6c7a\u3081\u3089\u308c\u305f\u30d7\u30ed\u30c8\u30b3\u30eb(TLSv1.2)\u3068\u6697\u53f7\u5316\u65b9\u5f0f(ECDHE-RSA-AES256-GCM-SHA384)\u306e\u60c5\u5831\u304c\u5f97\u3089\u308c\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n# ./libtls_client2 www.openbsd.org 443\ntls_peer_cert_provided: YES\ntls_peer_cert_contains_name: www.openbsd.org\ntls_peer_cert_issuer: /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3\ntls_peer_cert_subject: /CN=www.openbsd.org\ntls_peer_cert_hash: SHA256:b8d17ff36a985d8cd511281e96a2365d20d5e3bf72e6e2abba583f0ccf70fbb4\ntls_peer_cert_notbefore: 2016/05/09 13:50:00\ntls_peer_cert_notafter: 2016/08/07 13:50:00\ntls_conn_version: TLSv1.2\ntls_conn_cipher: ECDHE-RSA-AES256-GCM-SHA384\nHTTP/1.0 200 OK\nConnection: close\nContent-Length: 4642\nContent-Type: text/html\nDate: Thu, 16 Jun 2016 14:27:31 GMT\nLast-Modified: Wed, 18 May 2016 22:08:02 GMT\nServer: OpenBSD httpd\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n    <title>OpenBSD</title>\n... (\u7565) ...\n</html>\nlibtls_client2: tls_close: EOF without close notify: Success\n#\n\n\n\u307e\u3068\u3081\nLibreSSL \u306e libtls API \u3092\u4f7f\u3063\u305f TLS \u901a\u4fe1\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\nTLS \u901a\u4fe1\u51e6\u7406\u3092 libtls \u306b\u4efb\u305b\u308b\u3053\u3068\u3067\u898b\u901a\u3057\u306e\u826f\u3044\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306b\u8a71\u3092\u7d5e\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30b5\u30fc\u30d0\u5074\u3067\u3082\u540c\u69d8\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u307e\u3059\u3002\n[libtls](http://man.openbsd.org/?query=tls_init) \u306f OpenBSD \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c LibreSSL \u306b\u65b0\u898f\u8ffd\u52a0\u3057\u305f TLS \u901a\u4fe1\u7528\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 API \u3067\u3059\u3002\nlibtls \u306f\u30b7\u30f3\u30d7\u30eb\u306a API \u306a\u306e\u3067\u898b\u901a\u3057\u306e\u826f\u3044 TLS \u901a\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001libtls \u3092\u4f7f\u3063\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n---\n\n# \u306f\u3058\u3081\u306b\nlibtls \u306f\u3001[OpenSSL](https://www.openssl.org/) \u3068 API \u4e92\u63db\u3092\u57fa\u672c\u65b9\u91dd\u3068\u3057\u3066\u3044\u308b [LibreSSL](http://www.libressl.org/) \u306b\u3001\u5168\u304f\u5225\u306e API \u4f53\u7cfb\u3068\u3057\u3066\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002libtls \u306f\u5185\u90e8\u3067\u306f OpenSSL \u306e API \u3067\u3042\u308b `SSL_xxx()` \u3092\u30b3\u30fc\u30eb\u3057\u3066\u3044\u308b\u306e\u3067\u3001OpenSSL API \u306e\u30e9\u30c3\u30d1\u30fc\u3068\u3082\u8a00\u3048\u307e\u3059\u304c\u3001\u7169\u96d1\u306a\u90e8\u5206\u3092\u3046\u307e\u304f\u96a0\u853d\u3057\u3066\u3044\u308b\u306e\u3067\u898b\u901a\u3057\u306e\u826f\u3044 API \u4f53\u7cfb\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n[OpenBSD \u30d7\u30ed\u30b8\u30a7\u30af\u30c8](https://www.openbsd.org/)\u306f TLS \u901a\u4fe1\u3092\u5fc5\u8981\u3068\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067 libtls \u3092\u4f7f\u3044\u59cb\u3081\u3066\u3044\u307e\u3059\u3002httpd \u306f libtls \u3092\u4f7f\u3063\u305f\u30b5\u30fc\u30d0\u5074\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\u3067\u3059\u3057\u3001nc(netcat) \u30b3\u30de\u30f3\u30c9\u3082 libtls \u3067\u66f8\u304d\u76f4\u3055\u308c\u3066 LibreSSL \u30dd\u30fc\u30bf\u30d6\u30eb\u7248\u306b\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\nlibtls \u306e API \u306f `tls_` \u3067\u59cb\u307e\u308b\u95a2\u6570\u540d\u3067\u7d71\u4e00\u3055\u308c\u3066\u304a\u308a\u3001\u30e9\u30a4\u30d6\u30e9\u30ea `libtls.*` \u3092\u30ea\u30f3\u30af\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002libtls \u306f LibreSSL \u306b\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n## libtls \u306e\u60c5\u5831\nlibtls \u306e API \u306f `man tls_init` \u3067\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u53c2\u7167\u3067\u304d\u307e\u3059\u3002\n\n## \u74b0\u5883\n\u4eca\u56de\u306e\u78ba\u8a8d\u306f CentOS7(x86_64) \u3067\u884c\u3044\u307e\u3057\u305f\u3002\nLibreSSL \u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a /usr/local/ \u914d\u4e0b\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\n```shell-session\n# wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.4.1.tar.gz\n# tar xf libressl-2.4.1.tar.gz\n# cd libressl-2.4.1/\n# ./configure\n# make check\n# sudo make install\n# export LD_LIBRARY_PATH=/usr/local/lib\n```\n\n# libtls \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 \u30d7\u30ed\u30b0\u30e9\u30e0 \u306e\u4f8b\n\u6700\u521d\u306b\u3001HTTP \u30b5\u30fc\u30d0\u306b TLS \u901a\u4fe1\u3067 GET \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u308b\u3060\u3051\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 \u30d7\u30ed\u30b0\u30e9\u30e0 \u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n```c:libtls_client1.c\n#include <stdio.h>\n#include <string.h>\n#include <err.h>\n#include <tls.h>\n\nint\nmain(int argc, char *argv[])\n{\n\tstruct tls *ctx = NULL;\n\tssize_t len;\n\tunsigned char buf[BUFSIZ];\n\n\tif (argc < 3) {\n\t\tfprintf(stderr, \"usage: %s host port\\n\", argv[0]);\n\t\treturn(1);\n\t}\n\n\t/*\n\t** (1) libtls \u306e\u521d\u671f\u5316\n\t*/\n\n\tif (tls_init() != 0)\n\t\terr(1, \"tls_init:\");\n\n\t/*\n\t** (2) TLS \u901a\u4fe1\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u751f\u6210\n\t*/\n\n\tif ((ctx = tls_client()) == NULL)\n\t\terr(1, \"tls_client:\");\n\n\t/*\n\t** (3) HTTP \u30b5\u30fc\u30d0\u306b TLS \u63a5\u7d9a\n\t*/\n\n\tif (tls_connect(ctx, argv[1], argv[2]) != 0)\n\t\terr(1, \"tls_connect: %s\", tls_error(ctx));\n\n\t/*\n\t** (4) HTTP \u8981\u6c42\u3092 TLS \u3067\u9001\u4fe1\n\t*/\n\n\tsprintf(buf, \"GET / HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n\", argv[1]);\n\n\tif((len = tls_write(ctx, buf, strlen(buf))) < 0)\n\t\terr(1, \"tls_write: %s\", tls_error(ctx));\n\n\t/*\n\t** (5) HTTP \u5fdc\u7b54\u3092 TLS \u3067\u53d7\u4fe1\n\t*/\n\n\twhile ((len = tls_read(ctx, buf, sizeof(buf))) > 0) {\n\t\tif (len == TLS_WANT_POLLIN || len == TLS_WANT_POLLOUT)\n\t\t\tcontinue;\n\t\tif (len < 0)\n\t\t\terr(1, \"tls_read: %s\", tls_error(ctx));\n\t\telse\n\t\t\tprintf(\"%*.*s\", (int)len, (int)len, buf);\n\t}\n\n\t/*\n\t** (6) TLS \u63a5\u7d9a\u3092\u30af\u30ed\u30fc\u30ba\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u89e3\u653e\n\t*/\n\n\tif (tls_close(ctx) != 0)\n\t\terr(1, \"tls_close: %s\", tls_error(ctx));\n\ttls_free(ctx);\n\n\treturn(0);\n}\n```\n\n\u3053\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e Makefile \u3067 `make -f make1.mk` \u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\n```bash:make1.mk\nall :: libtls_client1\n\nlibtls_client1 : libtls_client1.o\n\t$(CC) -g -o $@ $^ -L/usr/local/lib -ltls -lssl -lcrypto\n\n.c.o :\n\t$(CC) -g -c -o $@ $< -I/usr/local/include\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b HTTP \u30b5\u30fc\u30d0\u304b\u3089\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306e HTML \u3092 https \u3067\u53d6\u3063\u3066\u6765\u307e\u3059\u3002\n\n```shell-session\n# ./libtls_client1 www.openbsd.org 443\nHTTP/1.0 200 OK\nConnection: close\nContent-Length: 4642\nContent-Type: text/html\nDate: Thu, 16 Jun 2016 11:12:10 GMT\nLast-Modified: Wed, 18 May 2016 22:08:02 GMT\nServer: OpenBSD httpd\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n    <title>OpenBSD</title>\n... (\u7565) ...\n</html>\nlibtls_client: tls_close: EOF without close notify: Success\n# \n```\n\nlibtls \u306f\u30b7\u30f3\u30d7\u30eb\u306a\u306e\u3067\u3001API \u306e\u4f7f\u3044\u65b9\u306b\u982d\u3092\u60a9\u307e\u305b\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3002\nlibtls \u3092\u4f7f\u3046\u3068 TLS \u901a\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u306e\u304c\u7c21\u5358\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u3082\u3046\u5c11\u3057\u9ad8\u5ea6\u306a\u8981\u6c42\u3078\u306e\u5bfe\u5fdc\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001libtls \u306e\u57fa\u790e\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u6700\u5c0f\u9650\u306e API \u3060\u3051\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u6b21\u306b\u3001\u3082\u3046\u5c11\u3057\u9ad8\u5ea6\u306a\u8981\u6c42\u3078\u306e\u5bfe\u5fdc\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n## \u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\n\u4e0a\u306e\u4f8b\u306f\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u5168\u3066 libtls \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u304a\u4efb\u305b\u3067\u3057\u305f\u3002\nlibtls \u3067\u3053\u308c\u3089\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u304b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u4f8b\u3067\u3059\u304c\u3001\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u306b\u306f `tls_config_xxx()` \u30b7\u30ea\u30fc\u30ba\u306e API \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```c\n...\n    /*\n\t** \u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u6697\u53f7\u5316\u65b9\u5f0f\u306e\u6307\u5b9a\n\t*/\n\n\tif ((cfg = tls_config_new()) == NULL)\n\t\terr(1, \"tls_config_new:\");\n\n\tif (tls_config_parse_protocols(&protocols, \"all\") != 0)\n\t\terr(1, \"tls_config_parse_protocols: %s\", tls_error(ctx));\n\n\ttls_config_set_protocols(cfg, protocols);\n\n\tif (tls_config_set_ciphers(cfg, \"CAMELLIA:AESGCM\") != 0)\n\t\terr(1, \"tls_config_set_ciphers: %s\", tls_error(ctx));\n\n\tif (tls_configure(ctx, cfg) != 0)\n\t\terr(1, \"tls_configure: %s\", tls_error(ctx));\n...\n```\n\n`tls_config_new()` \u3067 cfg \u3092\u4f5c\u3063\u3066\u304a\u304d\u3001`tls_config_xxx()` \u30b7\u30ea\u30fc\u30ba\u306e API \u3067\u7a2e\u3005\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u3001`tls_configure()` \u3067\u8a2d\u5b9a\u3092\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u7d50\u3073\u3064\u3051\u308b\u3068\u3044\u3046\u624b\u9806\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3092 \"all\" \u3068\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u306f \"tlsv1.0,tlsv1.1,tlsv1.2\" \u3068\u540c\u3058\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002\n\u6697\u53f7\u5316\u65b9\u5f0f\u306f \"CAMELLIA:AESGCM\" \u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u4f8b\u306b\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001CA\u8a3c\u660e\u66f8\u306e\u8a2d\u5b9a\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u306e\u8a2d\u5b9a\u3001\u79d8\u5bc6\u9375\u306e\u8a2d\u5b9a\u3001\u7b49\u3082 `tls_config_xxx()` \u30b7\u30ea\u30fc\u30ba\u306e API \u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## TLS \u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u5f97\u308b\u65b9\u6cd5\nTLS \u901a\u4fe1\u306f\u5b9f\u969b\u306e\u9001\u53d7\u4fe1\u304c\u59cb\u307e\u308b\u524d\u306b\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u3088\u3063\u3066\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u30b5\u30fc\u30d0\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u9593\u3067\u53d6\u308a\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\u53d6\u308a\u6c7a\u3081\u306b\u3088\u308a\u6c7a\u5b9a\u3057\u305f\u306e\u304c\u3001\u3069\u3093\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3069\u3093\u306a\u6697\u53f7\u5316\u65b9\u5f0f\u306a\u306e\u304b\u7b49\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u5f97\u308b libtls API \u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u4f8b\u3067\u3059\u3002libtls \u306f\u3053\u308c\u3089\u306e\u60c5\u5831\u3092\u5f97\u308b API \u3092\u7528\u610f\u3057\u3066\u304a\u308a\u3001\u4f7f\u7528\u4e2d\u306e\u6709\u52b9\u306a ctx \u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```c\n...\n\tif ((p = tls_peer_cert_issuer(ctx)) == NULL)\n\t\terr(1, \"tls_peer_cert_issuer: %s\", tls_error(ctx));\n\tprintf(\"tls_peer_cert_issuer: %s\\n\", p);\n\n\tif ((p = tls_peer_cert_subject(ctx)) == NULL)\n\t\terr(1, \"tls_peer_cert_subject: %s\", tls_error(ctx));\n\tprintf(\"tls_peer_cert_subject: %s\\n\", p);\n...\n\tif ((p = tls_conn_version(ctx)) == NULL)\n\t\terr(1, \"tls_conn_version: %s\", tls_error(ctx));\n\tprintf(\"tls_conn_version: %s\\n\", p);\n\n\tif ((p = tls_conn_cipher(ctx)) == NULL)\n\t\terr(1, \"tls_conn_cipher: %s\", tls_error(ctx));\n\tprintf(\"tls_conn_cipher: %s\\n\", p);\n...\n```\n\n\u3053\u308c\u3089\u306e API \u306f TLS \u306e\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u304c\u884c\u308f\u308c\u305f\u5f8c\u3067\u306a\u3044\u3068\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002\nlibtls \u306b\u304a\u3044\u3066\u306f\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306f `tls_read()` \u3084 `tls_write()` \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u81ea\u52d5\u7684\u306b\u80cc\u5f8c\u3067\u884c\u308f\u308c\u307e\u3059\u304c\u3001\u660e\u793a\u7684\u306b\u884c\u3044\u305f\u3044\u5834\u5408\u306f `tls_handshake()` \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u3082\u3046\u5c11\u3057\u9ad8\u5ea6\u306a\u8981\u6c42\u306b\u5bfe\u5fdc\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u6307\u5b9a\u3057\u3001TLS \u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c:libtls_client2.c\n#include <stdio.h>\n#include <string.h>\n#include <err.h>\n#include <tls.h>\n\nint dump_session_info(struct tls *ctx, const char *name);\n\nint\nmain(int argc, char *argv[])\n{\n\tstruct tls *ctx = NULL;\n\tstruct tls_config *cfg = NULL;\n\tuint32_t protocols;\n\tssize_t len;\n\tunsigned char buf[BUFSIZ];\n\n\tif (argc < 3) {\n\t\tfprintf(stderr, \"usage: %s host port\\n\", argv[0]);\n\t\treturn(1);\n\t}\n\n\t/*\n\t** (1) libtls \u306e\u521d\u671f\u5316\n\t*/\n\n\tif (tls_init() != 0)\n\t\terr(1, \"tls_init:\");\n\n\t/*\n\t** (2) TLS \u901a\u4fe1\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u751f\u6210\n\t*/\n\n\tif ((ctx = tls_client()) == NULL)\n\t\terr(1, \"tls_client:\");\n\n\t/*\n\t** \u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u6697\u53f7\u5316\u65b9\u5f0f\u306e\u6307\u5b9a\n\t*/\n\n\tif ((cfg = tls_config_new()) == NULL)\n\t\terr(1, \"tls_config_new:\");\n\n\tif (tls_config_parse_protocols(&protocols, \"all\") != 0)\n\t\terr(1, \"tls_config_parse_protocols: %s\", tls_error(ctx));\n\n\ttls_config_set_protocols(cfg, protocols);\n\n\tif (tls_config_set_ciphers(cfg, \"CAMELLIA:AESGCM\") != 0)\n\t\terr(1, \"tls_config_set_ciphers: %s\", tls_error(ctx));\n\n\tif (tls_configure(ctx, cfg) != 0)\n\t\terr(1, \"tls_configure: %s\", tls_error(ctx));\n\n\t/*\n\t** (3) HTTP \u30b5\u30fc\u30d0\u306b TLS \u63a5\u7d9a\n\t*/\n\n\tif (tls_connect(ctx, argv[1], argv[2]) != 0)\n\t\terr(1, \"tls_connect: %s\", tls_error(ctx));\n\n\t/*\n\t** (4) HTTP \u8981\u6c42\u3092 TLS \u3067\u9001\u4fe1\n\t*/\n\n\tsprintf(buf, \"GET / HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n\", argv[1]);\n\n\tif((len = tls_write(ctx, buf, strlen(buf))) < 0)\n\t\terr(1, \"tls_write: %s\", tls_error(ctx));\n\n\t/*\n\t** \u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u306e\u30c0\u30f3\u30d7\n\t*/\n\n\tdump_session_info(ctx, argv[1]);\n\n\t/*\n\t** (5) HTTP \u5fdc\u7b54\u3092 TLS \u3067\u53d7\u4fe1\n\t*/\n\n\twhile ((len = tls_read(ctx, buf, sizeof(buf))) > 0) {\n\t\tif (len == TLS_WANT_POLLIN || len == TLS_WANT_POLLOUT)\n\t\t\tcontinue;\n\t\tif (len < 0)\n\t\t\terr(1, \"tls_read: %s\", tls_error(ctx));\n\t\telse\n\t\t\tprintf(\"%*.*s\", (int)len, (int)len, buf);\n\t}\n\n\t/*\n\t** (6) TLS \u63a5\u7d9a\u3092\u30af\u30ed\u30fc\u30ba\u3001cfg\u3068\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u89e3\u653e\n\t*/\n\n\tif (tls_close(ctx) != 0)\n\t\terr(1, \"tls_close: %s\", tls_error(ctx));\n\ttls_config_free(cfg);\n\ttls_free(ctx);\n\n\treturn(0);\n}\n```\n\n\u4ee5\u4e0b\u306f TLS \u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```c:libtls_util.c\n#include <stdio.h>\n#include <time.h>\n#include <err.h>\n#include <tls.h>\n\nint\ndump_session_info(struct tls *ctx, const char *name)\n{\n\tconst char *p;\n\ttime_t time;\n\tstruct tm *tm;\n\n\tif (tls_peer_cert_provided(ctx) == 1)\n\t\tprintf(\"tls_peer_cert_provided: YES\\n\");\n\telse {\n\t\tprintf(\"tls_peer_cert_provided: NO\\n\");\n\t\treturn(-1);\n\t}\n\t\n\tif (tls_peer_cert_contains_name(ctx, name) == 1)\n\t\tprintf(\"tls_peer_cert_contains_name: %s\\n\", name);\n\telse\n\t\tprintf(\"tls_peer_cert_contains_name: invalid\\n\");\n\n\tif ((p = tls_peer_cert_issuer(ctx)) == NULL)\n\t\terr(1, \"tls_peer_cert_issuer: %s\", tls_error(ctx));\n\tprintf(\"tls_peer_cert_issuer: %s\\n\", p);\n\n\tif ((p = tls_peer_cert_subject(ctx)) == NULL)\n\t\terr(1, \"tls_peer_cert_subject: %s\", tls_error(ctx));\n\tprintf(\"tls_peer_cert_subject: %s\\n\", p);\n\n\tif ((p = tls_peer_cert_hash(ctx)) == NULL)\n\t\terr(1, \"tls_peer_cert_hash: %s\", tls_error(ctx));\n\tprintf(\"tls_peer_cert_hash: %s\\n\", p);\n\n\tif ((time = tls_peer_cert_notbefore(ctx)) < 0)\n\t\terr(1, \"tls_peer_cert_notbefore: %s\", tls_error(ctx));\n\ttm = localtime(&time);\n\tprintf(\"tls_peer_cert_notbefore: %04d/%02d/%02d %02d:%02d:%02d\\n\",\n\t\t1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday,\n\t\ttm->tm_hour, tm->tm_min, tm->tm_sec);\n\n\tif ((time = tls_peer_cert_notafter(ctx)) < 0)\n\t\terr(1, \"tls_peer_cert_notafter: %s\", tls_error(ctx));\n\ttm = localtime(&time);\n\tprintf(\"tls_peer_cert_notafter: %04d/%02d/%02d %02d:%02d:%02d\\n\",\n\t\t1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday,\n\t\ttm->tm_hour, tm->tm_min, tm->tm_sec);\n\n\tif ((p = tls_conn_version(ctx)) == NULL)\n\t\terr(1, \"tls_conn_version: %s\", tls_error(ctx));\n\tprintf(\"tls_conn_version: %s\\n\", p);\n\n\tif ((p = tls_conn_cipher(ctx)) == NULL)\n\t\terr(1, \"tls_conn_cipher: %s\", tls_error(ctx));\n\tprintf(\"tls_conn_cipher: %s\\n\", p);\n\n\treturn(0);\n}\n```\n\n\u3053\u308c\u3089\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e Makefile \u3067 `make -f make2.mk` \u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\n```bash:make2.mk\nall :: libtls_client2\n\nlibtls_client2 : libtls_client2.o libtls_util.o\n\t$(CC) -g -o $@ $^ -L/usr/local/lib -ltls -lssl -lcrypto\n\n.c.o :\n\t$(CC) -g -c -o $@ $< -I/usr/local/include\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b HTTP \u30b5\u30fc\u30d0\u3068\u306e\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u3088\u308a\u5165\u624b\u3057\u305f\u8a3c\u660e\u66f8\u306e\u60c5\u5831\u3084\u3001\u53d6\u308a\u6c7a\u3081\u3089\u308c\u305f\u30d7\u30ed\u30c8\u30b3\u30eb(TLSv1.2)\u3068\u6697\u53f7\u5316\u65b9\u5f0f(ECDHE-RSA-AES256-GCM-SHA384)\u306e\u60c5\u5831\u304c\u5f97\u3089\u308c\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n```shell-session\n# ./libtls_client2 www.openbsd.org 443\ntls_peer_cert_provided: YES\ntls_peer_cert_contains_name: www.openbsd.org\ntls_peer_cert_issuer: /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3\ntls_peer_cert_subject: /CN=www.openbsd.org\ntls_peer_cert_hash: SHA256:b8d17ff36a985d8cd511281e96a2365d20d5e3bf72e6e2abba583f0ccf70fbb4\ntls_peer_cert_notbefore: 2016/05/09 13:50:00\ntls_peer_cert_notafter: 2016/08/07 13:50:00\ntls_conn_version: TLSv1.2\ntls_conn_cipher: ECDHE-RSA-AES256-GCM-SHA384\nHTTP/1.0 200 OK\nConnection: close\nContent-Length: 4642\nContent-Type: text/html\nDate: Thu, 16 Jun 2016 14:27:31 GMT\nLast-Modified: Wed, 18 May 2016 22:08:02 GMT\nServer: OpenBSD httpd\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n    <title>OpenBSD</title>\n... (\u7565) ...\n</html>\nlibtls_client2: tls_close: EOF without close notify: Success\n#\n```\n\n# \u307e\u3068\u3081\nLibreSSL \u306e libtls API \u3092\u4f7f\u3063\u305f TLS \u901a\u4fe1\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\nTLS \u901a\u4fe1\u51e6\u7406\u3092 libtls \u306b\u4efb\u305b\u308b\u3053\u3068\u3067\u898b\u901a\u3057\u306e\u826f\u3044\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306b\u8a71\u3092\u7d5e\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30b5\u30fc\u30d0\u5074\u3067\u3082\u540c\u69d8\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u307e\u3059\u3002\n", "tags": ["libressl", "libtls", "OpenBSD", "TLS"]}