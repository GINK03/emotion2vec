{"context": "MVP(Model-View-Presenter)\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u6d41\u884c\u3063\u3066\u307e\u3059\u306d!\nMVP\u306f\u30c6\u30b9\u30bf\u30d6\u30eb\u3067\u3042\u308b\u3053\u3068\u304c1\u3064\u306e\u30a6\u30ea\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c, \u5b9f\u969b\u306bPresenter\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u66f8\u304f\u304b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059.\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f https://github.com/satoshun-example/AndroidTestSample \u306b\u4e0a\u3052\u3066\u3042\u308b\u306e\u3067, \u826f\u304b\u3063\u305f\u3089\u898b\u3066\u4e0b\u3055\u3044.\n\n\u4f7f\u3046\u30c4\u30fc\u30eb/\u30e9\u30a4\u30d6\u30e9\u30ea\n\nJUnit4\nMockito\n\n\n\u4eca\u56de, \u30c6\u30b9\u30c8\u66f8\u304d\u305f\u3044\u7b87\u6240\n\u4eca\u56de\u306f, MainPresenter\u30af\u30e9\u30b9\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059.\npublic class MainPresenter implements MainContract.Presenter {\n\n    @NonNull\n    private final UserDataSource dataSource;\n\n    @NonNull\n    private final MainContract.View view;\n\n    public MainPresenter(@NonNull UserDataSource dataSource, @NonNull MainContract.View view) {\n        this.dataSource = dataSource;\n        this.view = view;\n    }\n\n    @Override\n    public void start() {\n        view.showLoadingIndicator();\n\n        dataSource.getUser(new UserDataSource.Callback() {\n            @Override\n            public void onUserLoaded(@NonNull User user) {\n                view.hideLoadingIndicator();\n                view.showUser(user);\n            }\n\n            @Override\n            public void onNotAvailable() {\n                view.hideLoadingIndicator();\n                view.showNoUser();\n            }\n        });\n    }\n}\n\npublic interface MainContract {\n\n    interface View {\n        void showUser(@NonNull User user);\n\n        void showNoUser();\n\n        void showLoadingIndicator();\n\n        void hideLoadingIndicator();\n    }\n\n    interface Presenter {\n        void start();\n    }\n}\n\npublic interface UserDataSource {\n    interface Callback {\n        void onUserLoaded(@NonNull User user);\n\n        void onNotAvailable();\n    }\n\n    void getUser(@NonNull Callback callback);\n}\n\nUserDataSource\u306f\u30e2\u30c7\u30eb\u3060\u3068\u601d\u3063\u3066\u4e0b\u3055\u3044.\nUserPresenter\u306f, UserDataSource, MainContract.View\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u53d7\u3051\u53d6\u308a, 2\u3064\u306e\u30af\u30e9\u30b9\u3092\u9069\u5207\u306b\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u308b\u30af\u30e9\u30b9\u3068\u306a\u308a\u307e\u3059.\n\u4eca\u56de\u306e\u5834\u5408, UserPresenter#start\u304c\u30b3\u30fc\u30eb\u3055\u308c\u305f\u6642, UserDataSource\u304b\u3089\u30c7\u30fc\u30bf\u3092\u975e\u540c\u671f\u306b\u53d6\u5f97\u3057, View\u306b\u5024\u3092\u8fd4\u3059\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u3044\u307e\u3059.\n\n\u975e\u540c\u671f\u306aAPI\u3092\u3069\u3046\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u8868\u73fe\u3059\u308b\u304b\n\u50d5\u306e\u8a00\u8a9e\u80fd\u529b\u3067\u306f\u8aac\u660e\u304c\u96e3\u3057\u3044\u306e\u3067, \u6700\u521d\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059.\npublic class MainPresenterTest {\n\n    @Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();\n\n    @Mock\n    private UserDataSource dataSource;\n\n    @Mock\n    private MainContract.View view;\n\n    @Captor\n    private ArgumentCaptor<UserDataSource.Callback> callbackCaptor;\n\n    @Test\n    public void showUser_successNetworkAccess() throws Exception {\n        MainPresenter presenter = new MainPresenter(dataSource, view);\n        User dummyUser = new User(\"dummy\", \"dummy\");\n\n        presenter.start();\n\n        verify(dataSource).getUser(callbackCaptor.capture());\n        callbackCaptor.getValue().onUserLoaded(dummyUser);\n\n        verify(view, times(1)).showUser(dummyUser);\n    }\n\n    @Test\n    public void showNoUser_failureNetworkAccess() throws Exception {\n        MainPresenter presenter = new MainPresenter(dataSource, view);\n\n        presenter.start();\n\n        verify(dataSource).getUser(callbackCaptor.capture());\n        callbackCaptor.getValue().onNotAvailable();\n\n        verify(view, times(1)).showNoUser();\n    }\n}\n\n\u203b JUnit4, Mockito\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059.\nverify(dataSource).getUser(callbackCaptor.capture());\u3067Callback\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057, \u53d6\u5f97\u3057\u305fCallback\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eonUserLoaded or onNotAvailable\u30e1\u30bd\u30c3\u30c9\u3092\u30b3\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067, \u975e\u540c\u671fAPI\u304c\u6210\u529f or \u5931\u6557\u3092\u8868\u73fe\u3057\u307e\u3059.\n\u305d\u3057\u3066, \u6210\u529f\u3057\u305f\u5834\u5408\u306fshowUser\u30e1\u30bd\u30c3\u30c9\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u306f\u305a\u306a\u306e\u3067, verify(view, times(1)).showUser(dummyUser);\u3068\u8868\u73fe\u3057\u307e\u3059. (times(1)\u306f\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059. \u50d5\u306f1\u56de\u3057\u304b\u547c\u3070\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306b\u66f8\u304f\u306e\u304c\u597d\u307e\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059)\n\u3053\u308c\u3067, MainPresenter\u306e\u975e\u540c\u671fAPI\u5468\u308a\u306e\u30c6\u30b9\u30c8\u304c\u66f8\u3051\u307e\u3057\u305f!\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306f, Presenter\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f.\n\u3053\u3053\u3092\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u3088\u3068\u304b, \u304a\u524d\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306f\u9593\u9055\u3063\u3066\u3044\u308b! \u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u305c\u3072\u6559\u3048\u3066\u4e0b\u3055\u3044(/\u03c9\u30fb\uff3c)\nMVP(Model-View-Presenter)\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u6d41\u884c\u3063\u3066\u307e\u3059\u306d!\n\nMVP\u306f\u30c6\u30b9\u30bf\u30d6\u30eb\u3067\u3042\u308b\u3053\u3068\u304c1\u3064\u306e\u30a6\u30ea\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c, \u5b9f\u969b\u306bPresenter\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u66f8\u304f\u304b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059.\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f https://github.com/satoshun-example/AndroidTestSample \u306b\u4e0a\u3052\u3066\u3042\u308b\u306e\u3067, \u826f\u304b\u3063\u305f\u3089\u898b\u3066\u4e0b\u3055\u3044.\n\n\n## \u4f7f\u3046\u30c4\u30fc\u30eb/\u30e9\u30a4\u30d6\u30e9\u30ea\n\n- JUnit4\n- Mockito\n\n\n## \u4eca\u56de, \u30c6\u30b9\u30c8\u66f8\u304d\u305f\u3044\u7b87\u6240\n\n\u4eca\u56de\u306f, `MainPresenter`\u30af\u30e9\u30b9\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059.\n\n```java\npublic class MainPresenter implements MainContract.Presenter {\n\n    @NonNull\n    private final UserDataSource dataSource;\n\n    @NonNull\n    private final MainContract.View view;\n\n    public MainPresenter(@NonNull UserDataSource dataSource, @NonNull MainContract.View view) {\n        this.dataSource = dataSource;\n        this.view = view;\n    }\n\n    @Override\n    public void start() {\n        view.showLoadingIndicator();\n\n        dataSource.getUser(new UserDataSource.Callback() {\n            @Override\n            public void onUserLoaded(@NonNull User user) {\n                view.hideLoadingIndicator();\n                view.showUser(user);\n            }\n\n            @Override\n            public void onNotAvailable() {\n                view.hideLoadingIndicator();\n                view.showNoUser();\n            }\n        });\n    }\n}\n```\n\n```java\npublic interface MainContract {\n\n    interface View {\n        void showUser(@NonNull User user);\n\n        void showNoUser();\n\n        void showLoadingIndicator();\n\n        void hideLoadingIndicator();\n    }\n\n    interface Presenter {\n        void start();\n    }\n}\n```\n\n```\npublic interface UserDataSource {\n    interface Callback {\n        void onUserLoaded(@NonNull User user);\n\n        void onNotAvailable();\n    }\n\n    void getUser(@NonNull Callback callback);\n}\n```\n\n`UserDataSource`\u306f\u30e2\u30c7\u30eb\u3060\u3068\u601d\u3063\u3066\u4e0b\u3055\u3044.\n\n`UserPresenter`\u306f, `UserDataSource`, `MainContract.View`\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u53d7\u3051\u53d6\u308a, 2\u3064\u306e\u30af\u30e9\u30b9\u3092\u9069\u5207\u306b\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u308b\u30af\u30e9\u30b9\u3068\u306a\u308a\u307e\u3059.\n\n\u4eca\u56de\u306e\u5834\u5408, `UserPresenter#start`\u304c\u30b3\u30fc\u30eb\u3055\u308c\u305f\u6642, `UserDataSource`\u304b\u3089\u30c7\u30fc\u30bf\u3092\u975e\u540c\u671f\u306b\u53d6\u5f97\u3057, `View`\u306b\u5024\u3092\u8fd4\u3059\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u3044\u307e\u3059.\n\n\n## \u975e\u540c\u671f\u306aAPI\u3092\u3069\u3046\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u8868\u73fe\u3059\u308b\u304b\n\n\u50d5\u306e\u8a00\u8a9e\u80fd\u529b\u3067\u306f\u8aac\u660e\u304c\u96e3\u3057\u3044\u306e\u3067, \u6700\u521d\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059.\n\n```java\npublic class MainPresenterTest {\n\n    @Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();\n\n    @Mock\n    private UserDataSource dataSource;\n\n    @Mock\n    private MainContract.View view;\n\n    @Captor\n    private ArgumentCaptor<UserDataSource.Callback> callbackCaptor;\n\n    @Test\n    public void showUser_successNetworkAccess() throws Exception {\n        MainPresenter presenter = new MainPresenter(dataSource, view);\n        User dummyUser = new User(\"dummy\", \"dummy\");\n\n        presenter.start();\n\n        verify(dataSource).getUser(callbackCaptor.capture());\n        callbackCaptor.getValue().onUserLoaded(dummyUser);\n\n        verify(view, times(1)).showUser(dummyUser);\n    }\n\n    @Test\n    public void showNoUser_failureNetworkAccess() throws Exception {\n        MainPresenter presenter = new MainPresenter(dataSource, view);\n\n        presenter.start();\n\n        verify(dataSource).getUser(callbackCaptor.capture());\n        callbackCaptor.getValue().onNotAvailable();\n\n        verify(view, times(1)).showNoUser();\n    }\n}\n```\n\n\u203b JUnit4, Mockito\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059.\n\n`verify(dataSource).getUser(callbackCaptor.capture());`\u3067Callback\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057, \u53d6\u5f97\u3057\u305fCallback\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eonUserLoaded or onNotAvailable\u30e1\u30bd\u30c3\u30c9\u3092\u30b3\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067, \u975e\u540c\u671fAPI\u304c\u6210\u529f or \u5931\u6557\u3092\u8868\u73fe\u3057\u307e\u3059.\n\n\u305d\u3057\u3066, \u6210\u529f\u3057\u305f\u5834\u5408\u306fshowUser\u30e1\u30bd\u30c3\u30c9\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u306f\u305a\u306a\u306e\u3067, `verify(view, times(1)).showUser(dummyUser);`\u3068\u8868\u73fe\u3057\u307e\u3059. (times(1)\u306f\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059. \u50d5\u306f1\u56de\u3057\u304b\u547c\u3070\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306b\u66f8\u304f\u306e\u304c\u597d\u307e\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059)\n\n\u3053\u308c\u3067, MainPresenter\u306e\u975e\u540c\u671fAPI\u5468\u308a\u306e\u30c6\u30b9\u30c8\u304c\u66f8\u3051\u307e\u3057\u305f!\n\n\n## \u307e\u3068\u3081\n\n\u4eca\u56de\u306f, Presenter\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f.\n\u3053\u3053\u3092\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u3088\u3068\u304b, \u304a\u524d\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306f\u9593\u9055\u3063\u3066\u3044\u308b! \u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u305c\u3072\u6559\u3048\u3066\u4e0b\u3055\u3044(/\u03c9\u30fb\uff3c)\n", "tags": ["Android", "Mockito"]}