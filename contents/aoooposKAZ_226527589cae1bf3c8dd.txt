{"context": " More than 1 year has passed since last update.\u3088\u3046\u306a\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u306e\u3067\u3001StackOverflow\u306e\u5185\u5bb9\u3092\u53c2\u8003\u306b\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u25a0\u52d5\u6a5f\n\u30fbDistinct\u306e\u5f15\u6570\u306b\u3001OrderBy\u7b49\u3068\u540c\u69d8\u306b\u30e9\u30e0\u30c0\u5f0f\u3092\u5f15\u6570\u3068\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u4f7f\u3044\u305f\u304b\u3063\u305f\u3002\n\u30fb\u3057\u304b\u3057\u3001Distinct\u306e\u5f15\u6570\u306fIEqualityComparer(Of TSource)\u3067\u3057\u304b\u53d6\u308c\u306a\u3044\u3002\n\u30fbGroupBy\u3067\u306f\u30e9\u30e0\u30c0\u5f0f\u3092\u5f15\u6570\u306b\u53d6\u308c\u308b\u306e\u3067\u7406\u60f3\u306b\u8fd1\u3044\u3051\u3069\u3001\u6b21\u306e\u7406\u7531\u306b\u3088\u308a\u69cb\u6587\u304c\u5197\u9577\u306b\u306a\u308b\u305f\u3081\u306a\u3093\u3068\u3082\u3002\u3002\n\u3000\u3000\u30fb\u623b\u308a\u5024\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u304c\u7d5e\u308a\u8fbc\u3093\u3060\u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u3057\u304b\u6301\u305f\u306a\u3044\u533f\u540d\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff1f\n\u3000\u3000\u3000\u306b\u306a\u308b(SQL\u306eGROUP BY\u306e\u30a4\u30e1\u30fc\u30b8)\n\u3000\u3000\u3000\u21d2\u5f8c\u7d9a\u51e6\u7406\u306b\u3066\u3001\u7d5e\u308a\u8fbc\u307f\u8981\u7d20\u3068\u306f\u5225\u306e\u8981\u7d20\u3067\u3054\u306b\u3087\u3054\u306b\u3087\u3057\u305f\u3044\u5834\u5408\u4e0d\u4fbf\u3002\n\u3000\u3000\u30fb\u30ea\u30b9\u30c8\u8981\u7d20\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u3067\u3057\u304b\u7d5e\u308a\u8fbc\u3081\u306a\u3044\n\u3000\u3000\u3000\u21d2\u30ea\u30b9\u30c8\u8981\u7d20\u304c\u8f9e\u66f8\u578b\u306e\u5834\u5408\u3001\u4e8b\u524d\u306b\u7d5e\u8fbc\u307f\u7528\u306e\u30af\u30e9\u30b9\u578b\u3078\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u25a0\u53c2\u8003\nStackOverflow\u306e\u56de\u7b54\u306b\u3066C#\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308bDistinctBy\u95a2\u6570\u3092\nVB.NET\u3067IEnumerable\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3002\nhttp://stackoverflow.com/questions/1300088/distinct-with-lambda\n\u25a0\u5b9f\u88c5\n\nImports System.Runtime.CompilerServices\n\nModule EnumerableExtention\n\n    'IEnumerable\u578b\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\n    <Extension()> _\n    Public Iterator Function DistinctBy(Of TSource, TKey)(ByVal source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of TSource)\n        Dim knownKeys As New HashSet(Of TKey)\n\n        For Each element As TSource In source\n            If knownKeys.Add(keySelector(element)) Then\n                Yield element\n            End If\n        Next\n    End Function\n\nEnd Module\n\n\u25a0\u4f7f\u3044\u65b9\n\u30fbDictionary\u306e\u914d\u5217\u3092\u5358\u4e00\u5316\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\n    <TestMethod()> _\n    Public Sub DistinctByTest_Dictinary()\n\n        Const KEY_CODE As String = \"Code\"\n        Const KEY_VALUE As String = \"Value\"\n\n        Dim list = New List(Of Dictionary(Of String, String)) From _\n                        { _\n                         New Dictionary(Of String, String) From {{KEY_CODE, \"A\"}, {KEY_VALUE, \"\u3042\u3042\u3042\"}}, _\n                         New Dictionary(Of String, String) From {{KEY_CODE, \"B\"}, {KEY_VALUE, \"\u3073\u3073\u3073\"}}, _\n                         New Dictionary(Of String, String) From {{KEY_CODE, \"A\"}, {KEY_VALUE, \"\u3042\u3042\u3042\"}}, _\n                         New Dictionary(Of String, String) From {{KEY_CODE, \"C\"}, {KEY_VALUE, \"\u3057\u3057\u3057\"}} _\n                        }\n\n        Dim codeEqualA = Function(item As Dictionary(Of String, String))\n                              Return item(KEY_CODE) = \"A\"\n                          End Function\n\n        Assert.AreEqual(2, list.FindAll(codeEqualA).Count)\n\n        Dim result = list.DistinctBy(Function(item) item(KEY_CODE)).ToList\n\n        Assert.AreEqual(1, result.FindAll(codeEqualA).Count)\n    End Sub\n\n\u30fb\u8907\u6570\u9805\u76ee\u3067\u5358\u4e00\u5316\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\n    Private Class CodeValue\n        Public Property Code As String\n        Public Property Code2 As String\n        Public Property Value As String\n    End Class\n\n    <TestMethod()> _\n    Public Sub DistinctByTest_Class()\n        Dim list = New List(Of CodeValue) From _\n            { _\n             New CodeValue With {.Code = \"A\", .Code2 = \"A\", .Value = \"\u3042\u3042\u3042\"}, _\n             New CodeValue With {.Code = \"A\", .Code2 = \"B\", .Value = \"\u3042\u3042\u3073\"}, _\n             New CodeValue With {.Code = \"B\", .Code2 = \"A\", .Value = \"\u3073\u3073\u3042\"}, _\n             New CodeValue With {.Code = \"B\", .Code2 = \"B\", .Value = \"\u3073\u3073\u3073\"}, _\n             New CodeValue With {.Code = \"A\", .Code2 = \"A\", .Value = \"\u3042\u3042\u3042\"}, _\n             New CodeValue With {.Code = \"C\", .Code2 = \"C\", .Value = \"\u3057\u3057\u3057\"} _\n            }\n\n        Dim codeEqualA = Function(item As CodeValue)\n                             Return item.Code = \"A\"\n                         End Function\n\n        Assert.AreEqual(3, list.FindAll(codeEqualA).Count)\n\n        '\u8907\u6570\u9805\u76ee(Code + Code2 \u306e\u7d44\u307f\u5408\u308f\u305b)\u3067\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u3082\u53ef\u80fd\n        Dim result = list.DistinctBy(Function(item) New With {Key item.Code, _\n                                                              Key item.Code2}).ToList\n\n        Assert.AreEqual(2, result.FindAll(codeEqualA).Count)\n    End Sub\n\n\u3088\u3046\u306a\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u306e\u3067\u3001StackOverflow\u306e\u5185\u5bb9\u3092\u53c2\u8003\u306b\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n\u25a0\u52d5\u6a5f\n\u30fbDistinct\u306e\u5f15\u6570\u306b\u3001OrderBy\u7b49\u3068\u540c\u69d8\u306b\u30e9\u30e0\u30c0\u5f0f\u3092\u5f15\u6570\u3068\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u4f7f\u3044\u305f\u304b\u3063\u305f\u3002\n\u30fb\u3057\u304b\u3057\u3001Distinct\u306e\u5f15\u6570\u306fIEqualityComparer(Of TSource)\u3067\u3057\u304b\u53d6\u308c\u306a\u3044\u3002\n\u30fbGroupBy\u3067\u306f\u30e9\u30e0\u30c0\u5f0f\u3092\u5f15\u6570\u306b\u53d6\u308c\u308b\u306e\u3067\u7406\u60f3\u306b\u8fd1\u3044\u3051\u3069\u3001\u6b21\u306e\u7406\u7531\u306b\u3088\u308a\u69cb\u6587\u304c\u5197\u9577\u306b\u306a\u308b\u305f\u3081\u306a\u3093\u3068\u3082\u3002\u3002\n\u3000\u3000\u30fb\u623b\u308a\u5024\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u304c\u7d5e\u308a\u8fbc\u3093\u3060\u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u3057\u304b\u6301\u305f\u306a\u3044\u533f\u540d\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff1f\n\u3000\u3000\u3000\u306b\u306a\u308b(SQL\u306eGROUP BY\u306e\u30a4\u30e1\u30fc\u30b8)\n\u3000\u3000\u3000\u21d2\u5f8c\u7d9a\u51e6\u7406\u306b\u3066\u3001\u7d5e\u308a\u8fbc\u307f\u8981\u7d20\u3068\u306f\u5225\u306e\u8981\u7d20\u3067\u3054\u306b\u3087\u3054\u306b\u3087\u3057\u305f\u3044\u5834\u5408\u4e0d\u4fbf\u3002\n\u3000\u3000\u30fb\u30ea\u30b9\u30c8\u8981\u7d20\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u3067\u3057\u304b\u7d5e\u308a\u8fbc\u3081\u306a\u3044\n\u3000\u3000\u3000\u21d2\u30ea\u30b9\u30c8\u8981\u7d20\u304c\u8f9e\u66f8\u578b\u306e\u5834\u5408\u3001\u4e8b\u524d\u306b\u7d5e\u8fbc\u307f\u7528\u306e\u30af\u30e9\u30b9\u578b\u3078\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u25a0\u53c2\u8003\nStackOverflow\u306e\u56de\u7b54\u306b\u3066C#\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308bDistinctBy\u95a2\u6570\u3092\nVB.NET\u3067IEnumerable\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3002\n\nhttp://stackoverflow.com/questions/1300088/distinct-with-lambda\n\n\u25a0\u5b9f\u88c5\n\n```vbnet\n\nImports System.Runtime.CompilerServices\n\nModule EnumerableExtention\n\n    'IEnumerable\u578b\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\n    <Extension()> _\n    Public Iterator Function DistinctBy(Of TSource, TKey)(ByVal source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of TSource)\n        Dim knownKeys As New HashSet(Of TKey)\n\n        For Each element As TSource In source\n            If knownKeys.Add(keySelector(element)) Then\n                Yield element\n            End If\n        Next\n    End Function\n\nEnd Module\n```\n\u25a0\u4f7f\u3044\u65b9\n\n\u30fbDictionary\u306e\u914d\u5217\u3092\u5358\u4e00\u5316\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\n\n```vbnet\n    <TestMethod()> _\n    Public Sub DistinctByTest_Dictinary()\n\n        Const KEY_CODE As String = \"Code\"\n        Const KEY_VALUE As String = \"Value\"\n\n        Dim list = New List(Of Dictionary(Of String, String)) From _\n                        { _\n                         New Dictionary(Of String, String) From {{KEY_CODE, \"A\"}, {KEY_VALUE, \"\u3042\u3042\u3042\"}}, _\n                         New Dictionary(Of String, String) From {{KEY_CODE, \"B\"}, {KEY_VALUE, \"\u3073\u3073\u3073\"}}, _\n                         New Dictionary(Of String, String) From {{KEY_CODE, \"A\"}, {KEY_VALUE, \"\u3042\u3042\u3042\"}}, _\n                         New Dictionary(Of String, String) From {{KEY_CODE, \"C\"}, {KEY_VALUE, \"\u3057\u3057\u3057\"}} _\n                        }\n\n        Dim codeEqualA = Function(item As Dictionary(Of String, String))\n                              Return item(KEY_CODE) = \"A\"\n                          End Function\n\n        Assert.AreEqual(2, list.FindAll(codeEqualA).Count)\n\n        Dim result = list.DistinctBy(Function(item) item(KEY_CODE)).ToList\n\n        Assert.AreEqual(1, result.FindAll(codeEqualA).Count)\n    End Sub\n```\n\n\u30fb\u8907\u6570\u9805\u76ee\u3067\u5358\u4e00\u5316\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\n\n```vbnet\n    Private Class CodeValue\n        Public Property Code As String\n        Public Property Code2 As String\n        Public Property Value As String\n    End Class\n\n    <TestMethod()> _\n    Public Sub DistinctByTest_Class()\n        Dim list = New List(Of CodeValue) From _\n            { _\n             New CodeValue With {.Code = \"A\", .Code2 = \"A\", .Value = \"\u3042\u3042\u3042\"}, _\n             New CodeValue With {.Code = \"A\", .Code2 = \"B\", .Value = \"\u3042\u3042\u3073\"}, _\n             New CodeValue With {.Code = \"B\", .Code2 = \"A\", .Value = \"\u3073\u3073\u3042\"}, _\n             New CodeValue With {.Code = \"B\", .Code2 = \"B\", .Value = \"\u3073\u3073\u3073\"}, _\n             New CodeValue With {.Code = \"A\", .Code2 = \"A\", .Value = \"\u3042\u3042\u3042\"}, _\n             New CodeValue With {.Code = \"C\", .Code2 = \"C\", .Value = \"\u3057\u3057\u3057\"} _\n            }\n\n        Dim codeEqualA = Function(item As CodeValue)\n                             Return item.Code = \"A\"\n                         End Function\n\n        Assert.AreEqual(3, list.FindAll(codeEqualA).Count)\n\n        '\u8907\u6570\u9805\u76ee(Code + Code2 \u306e\u7d44\u307f\u5408\u308f\u305b)\u3067\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u3082\u53ef\u80fd\n        Dim result = list.DistinctBy(Function(item) New With {Key item.Code, _\n                                                              Key item.Code2}).ToList\n\n        Assert.AreEqual(2, result.FindAll(codeEqualA).Count)\n    End Sub\n```\n", "tags": ["VB.Net"]}