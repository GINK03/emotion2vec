{"context": " More than 1 year has passed since last update.yumetodo\u6c0f\u304cC++11\u898f\u683c\u306e\u91cd\u8907\u3057\u306a\u3044\u4e71\u6570\u914d\u5217\u306e\u751f\u6210\u6cd5\u3092\u66f8\u3044\u3066\u3044\u305f\u306e\u3067\u3001C++14\u898f\u683c\u306e\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n#include <random>\n#include <vector>\n#include <iostream>\n\nauto random() {\n    std::random_device rnd;     // \u975e\u6c7a\u5b9a\u7684\u306a\u4e71\u6570\u751f\u6210\u5668\u3092\u751f\u6210\n    return std::mt19937 (rnd());     //  \u30e1\u30eb\u30bb\u30f3\u30cc\u30fb\u30c4\u30a4\u30b9\u30bf\u306e32\u30d3\u30c3\u30c8\u7248\u3001\u5f15\u6570\u306f\u521d\u671f\u30b7\u30fc\u30c9\u5024\n}\n\nauto make_rand_arr(const size_t size, int rand_min, int rand_max) {\n    std::vector<int> re(size);\n    std::uniform_int_distribution<int> rand(rand_min, rand_max);\n    auto mt = random();\n    for (auto& i : re) {\n        i = rand(mt);\n    }\n    bool is_all_no_conflict = false;\n    do {    \n        is_all_no_conflict = true;\n        for (auto j = re.begin(); j != re.end(); ++j) {\n            for (auto k = j + 1; k != re.end(); ++k) {\n                if (*k == *j) {\n                    *k = rand(mt);\n                    is_all_no_conflict = false;\n                }\n            }\n        }\n    } while (!is_all_no_conflict);\n    return re;\n}\n\n\u4f7f\u7528\u4f8b\nint main() {\n    const auto arr = make_rand_arr(12, 1, 1000);\n    for (auto i : arr) std::cout << i << \", \";\n    std::cout << std::endl;\n    return 0;\n}\n\nyumetodo\u6c0f\u304c[C++11\u898f\u683c\u306e\u91cd\u8907\u3057\u306a\u3044\u4e71\u6570\u914d\u5217\u306e\u751f\u6210\u6cd5](http://qiita.com/yumetodo/items/48d77f5d554df84f66f7)\u3092\u66f8\u3044\u3066\u3044\u305f\u306e\u3067\u3001C++14\u898f\u683c\u306e\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```cpp:\n#include <random>\n#include <vector>\n#include <iostream>\n\nauto random() {\n\tstd::random_device rnd;     // \u975e\u6c7a\u5b9a\u7684\u306a\u4e71\u6570\u751f\u6210\u5668\u3092\u751f\u6210\n\treturn std::mt19937 (rnd());     //  \u30e1\u30eb\u30bb\u30f3\u30cc\u30fb\u30c4\u30a4\u30b9\u30bf\u306e32\u30d3\u30c3\u30c8\u7248\u3001\u5f15\u6570\u306f\u521d\u671f\u30b7\u30fc\u30c9\u5024\n}\n\nauto make_rand_arr(const size_t size, int rand_min, int rand_max) {\n\tstd::vector<int> re(size);\n\tstd::uniform_int_distribution<int> rand(rand_min, rand_max);\n\tauto mt = random();\n\tfor (auto& i : re) {\n\t\ti = rand(mt);\n\t}\n\tbool is_all_no_conflict = false;\n\tdo {\t\n\t\tis_all_no_conflict = true;\n\t\tfor (auto j = re.begin(); j != re.end(); ++j) {\n\t\t\tfor (auto k = j + 1; k != re.end(); ++k) {\n\t\t\t\tif (*k == *j) {\n\t\t\t\t\t*k = rand(mt);\n\t\t\t\t\tis_all_no_conflict = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} while (!is_all_no_conflict);\n\treturn re;\n}\n```\n\u4f7f\u7528\u4f8b\n\n```cpp:\nint main() {\n\tconst auto arr = make_rand_arr(12, 1, 1000);\n\tfor (auto i : arr) std::cout << i << \", \";\n\tstd::cout << std::endl;\n\treturn 0;\n}\n```\n", "tags": ["C++", "C++14", "algorithm", "Random", "\u914d\u5217"]}