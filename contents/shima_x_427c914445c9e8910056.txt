{"context": " More than 1 year has passed since last update.\n\n\u52d5\u6a5f\n\u4eca\u307e\u3067\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u306b\u306f\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u3046\u4e8b\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u308d\u305d\u308d\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306b\u3082\u624b\u3092\u51fa\u3057\u3066\u307f\u308b\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u305f\u3060\u4eca\u56de\u306e\u4f8b\u306f\u3001\u5b63\u7bc0\u5468\u671f\u306a\u3069\u3078\u306e\u5206\u89e3\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u5e73\u6ed1\u5316\u3082\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u3054\u4e86\u627f\u4e0b\u3055\u3044\u3002\n\n\u53c2\u8003\u6587\u732e\n\n\n\u4e88\u6e2c\u306b\u3044\u304b\u3059\u7d71\u8a08\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u57fa\u672c\u2015\u30d9\u30a4\u30ba\u7d71\u8a08\u5165\u9580\u304b\u3089\u5fdc\u7528\u307e\u3067\n\n\n\u6642\u7cfb\u5217\u89e3\u6790\u5165\u9580\n\n\n\u300c\u4e88\u6e2c\u306b\u3044\u304b\u3059\u7d71\u8a08\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u57fa\u672c\u300d\u3060\u3051\u3067\u3082\u3001\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u3067\u3042\u308c\u3070\u5b9f\u88c5\u53ef\u80fd\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u6982\u8981\n\u72b6\u614b\u7a7a\u9593\u30e2\u30c7\u30eb\u306e\u4e00\u7a2e\u3067\u3059\u3002\u6642\u7cfb\u5217\u3092\u30b7\u30b9\u30c6\u30e0\u30e2\u30c7\u30eb\u3068\u89b3\u6e2c\u30e2\u30c7\u30eb\u3067\u8868\u73fe\u51fa\u6765\u308b\u3088\u3046\u306a\u30e2\u30ce\u3092\u72b6\u614b\u7a7a\u9593\u30e2\u30c7\u30eb\u3068\u547c\u3073\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u72b6\u614b\u7a7a\u9593\u30e2\u30c7\u30eb\u306f\u89b3\u6e2c\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u306e\u88cf\u5074\u306b\u3042\u308b\u72b6\u614b\uff08\u30e1\u30ab\u30cb\u30ba\u30e0\uff09\u3092\u7d44\u307f\u8fbc\u3080\u4e8b\u304c\u51fa\u6765\u308b\u30e2\u30c7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u3067\u7dda\u5f62\u3001\u30ac\u30a6\u30b9\u578b\u3067\u8a18\u8ff0\u3055\u308c\u305f\u30e2\u30ce\u304c\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u3002\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u306e\u6b20\u70b9\u3068\u3057\u3066\u306f\u3001\u30ce\u30a4\u30ba\u306b\u6b63\u898f\u5206\u5e03\u3092\u4eee\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6025\u6fc0\u306a\u5024\u306e\u5909\u5316\u3078\u306e\u5bfe\u5fdc\u304c\u96e3\u3057\u3044\u70b9\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u62e1\u5f35\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u306a\u3069\u304c\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u771f\u306e\u5206\u5e03\u304c\u591a\u5cf0\u6027\u306e\u5834\u5408\u306f\u826f\u3044\u8fd1\u4f3c\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\n\u4e00\u65b9\u3001\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306f\u3068\u3044\u3046\u3068\u3001\u5206\u5e03\u3092\u7c92\u5b50\u3067\u8fd1\u4f3c\u3059\u308b\u305f\u3081\u5206\u5e03\u304c\u591a\u5cf0\u6027\u306e\u5834\u5408\u306b\u3082\u5bfe\u5fdc\u304c\u53ef\u80fd\u3067\u3059\u3002\u305d\u3057\u3066\u3001\u305d\u306e\u8fd1\u4f3c\u306f\u5404\u7c92\u5b50\u306e\u6642\u9593\u767a\u5c55\u3068\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3068\u3044\u3046\uff12\u3064\u306e\u7c21\u5358\u306a\u64cd\u4f5c\u306b\u3088\u3063\u3066\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\uff12\u3064\u306e\u64cd\u4f5c\u306f\u3001\u4e88\u6e2c\u5206\u5e03\u3068\u30d5\u30a3\u30eb\u30bf\u5206\u5e03\u3092\u767a\u751f\u3055\u305b\u308b\u4e8b\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u304c\u5b9f\u969b\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u306f\u3001\u300c\u4e88\u6e2c\u306b\u3044\u304b\u3059\u7d71\u8a08\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u57fa\u672c\u300d\u306e76\u30da\u30fc\u30b8\u306e\u56f3\u3092\u3054\u89a7\u3044\u305f\u3060\u304f\u306e\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3067\u306f\u3001\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n\u53c2\u8003\u30b3\u30fc\u30c9\n# coding: utf-8\n\nfrom math import log, pow, sqrt\nimport numpy as np\nfrom scipy.stats import norm\nfrom numpy.random import uniform\nfrom multiprocessing import Pool\nimport matplotlib.pyplot as plt\n\n\nclass ParticleFilter:\n    alpha2 = 0.15 # \u30b7\u30b9\u30c6\u30e0\u30ce\u30a4\u30ba\u3068\u89b3\u6e2c\u30ce\u30a4\u30ba\u306e\u5206\u6563\u6bd4\n    sigma2 = pow(2,5) # \u30b7\u30b9\u30c6\u30e0\u30ce\u30a4\u30ba\u306e\u5206\u6563\n    log_likelihood = 0.0 # \u5bfe\u6570\u5c24\u5ea6\n    LSM = 0.0 # 2\u4e57\u8aa4\u5dee\n    TIME = 1\n    PR=8 \n\n    def __init__(self, PARTICLES_NUM):\n        self.PARTICLES_NUM = PARTICLES_NUM # \u7c92\u5b50\u306e\u6570\n        self.TEETH_OF_COMB = np.arange(0, 1, float(1.0)/self.PARTICLES_NUM) # \u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u4f7f\u7528\u3059\u308b\u6a2a\u6adb\uff08\u4f7f\u3044\u56de\u3059\uff09\n        self.weights = np.zeros(self.PARTICLES_NUM) # \u7c92\u5b50\u306e\u5358\u4f4d\u8cea\u91cf\uff08\u89b3\u6e2c\u30c7\u30fc\u30bf\u3078\u306e\u9069\u5408\u5ea6\uff09\n        self.particles = np.zeros(self.PARTICLES_NUM) # \u7c92\u5b50\n        self.predicted_particles = np.zeros(self.PARTICLES_NUM) # \u4e88\u6e2c\u5206\u5e03\uff08\u7c92\u5b50\uff09\n        np.random.seed(555)\n        self.predicted_value = []\n        self.filtered_value = []\n\n    def init_praticles_distribution(self):\n        \"\"\"initialize particles\n        x_0|0\n        \"\"\"\n        self.particles = norm.rvs(0,1,size=self.PARTICLES_NUM)\n\n    def get_system_noise(self):\n        \"\"\"v_t\"\"\"\n        return norm.rvs(0, self.alpha2*self.sigma2, size=self.PARTICLES_NUM)\n\n    def calc_pred_particles(self):\n        \"\"\"calculate system function\n        x_t|t-1\n        \"\"\"\n        return self.particles + self.get_system_noise()  \n\n    def calc_particles_weight(self,y):\n        \"\"\"calculate fitness probabilities between observation value and predicted value\n        w_t\n        \"\"\"\n        locs = self.calc_pred_particles()\n        self.predicted_particles = locs\n\n        self.weights = norm.pdf([y]*self.PARTICLES_NUM, loc=locs,\n                                scale=[sqrt(self.sigma2)]*self.PARTICLES_NUM)\n\n    def calc_likelihood(self):\n        \"\"\"alculate likelihood at that point\n        p(y_t|y_1:t-1)\n        \"\"\"\n        res = sum(self.weights)/self.PARTICLES_NUM\n        self.log_likelihood += log(res)\n#        return res\n\n    def normalize_weights(self):\n        \"\"\"wtilda_t\"\"\"\n        self.weights = self.weights/sum(self.weights)\n\n    def resample(self,y):\n        \"\"\"x_t|t\"\"\"\n        self.normalize_weights()\n\n        self.memorize_predicted_value()\n\n        # accumulate weight\n        cum = np.cumsum(self.weights)\n\n        # create roulette pointer \n        base = uniform(0,float(1.0)/self.PARTICLES_NUM)\n        pointers = self.TEETH_OF_COMB + base\n\n        # select particles\n        selected_idx = [np.where(cum>=p)[0][0] for p in pointers]\n        \"\"\"\n        pool = Pool(processes=self.PR)\n        selected_idx = pool.map(get_slected_particles_idx, ((cum,p) for p in pointers))\n        pool.close()\n        pool.join()     \n        \"\"\"\n\n#         print \"select\",selected_idx\n        self.particles = self.predicted_particles[selected_idx]                \n        self.memorize_filtered_value(selected_idx, y)\n\n\n    def memorize_predicted_value(self):\n        predicted_value = sum(self.predicted_particles*self.weights)\n        self.predicted_value.append(predicted_value)\n\n    def memorize_filtered_value(self, selected_idx, y):\n        filtered_value = sum(self.particles*self.weights[selected_idx])/sum(self.weights[selected_idx]) # /sum(self.weights[selected_idx])\u3092\u8ffd\u8a18\n        self.filtered_value.append(filtered_value)\n        self.calculate_LSM(y,filtered_value)\n\n    def calculate_LSM(self,y,filterd_value):\n        self.LSM += pow(y-filterd_value,2)\n\n    def ahead(self,y):\n        \"\"\"compute system model and observation model\"\"\"\n        print 'calculating time at %d' % self.TIME\n        self.calc_pred_particles()\n        self.calc_particles_weight(y)\n        self.calc_likelihood()\n        self.resample(y)\n        self.TIME += 1\n\ndef get_slected_particles_idx((cum,p)):\n    \"\"\"multiprocessing function\"\"\"\n    try:\n        return np.where(cum>=p)[0][0]\n\n    except Exception:\n        import sys\n        import traceback\n        sys.stderr.write(traceback.format_exc())    \n\nif __name__=='__main__':\n    pf = ParticleFilter(1000)\n    pf.init_praticles_distribution()\n\n    data = np.hstack((norm.rvs(0,1,size=20),norm.rvs(2,1,size=60),norm.rvs(-1,0.5,size=20)))\n\n    for d in data:\n        pf.ahead(d)\n    print 'log likelihood:', pf.log_likelihood\n    print 'LSM:', pf.LSM\n\n    rng = range(100)\n    plt.plot(rng,data,label=u\"training data\")\n    plt.plot(rng,pf.predicted_value,label=u\"predicted data\")\n    plt.plot(rng,pf.filtered_value,label=u\"filtered data\")\n    plt.xlabel('TIME',fontsize=18)\n    plt.ylabel('Value',fontsize=18)    \n    plt.legend() \n    plt.show()\n\n\n\u5b9f\u9a13\u7d50\u679c\n\u7c92\u5b50\u65705,100,1000\u3067\u5b9f\u9a13\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u7d50\u679c\u3092\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002\n\n\u7c92\u5b50\u65705\u306e\u5834\u5408\n\n\n\u7c92\u5b50\u6570100\u306e\u5834\u5408\n\n\n\u7c92\u5b50\u65701000\u306e\u5834\u5408\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u30b7\u30b9\u30c6\u30e0\u30ce\u30a4\u30ba\u304c\u6c7a\u3081\u6253\u3061\u3060\u3063\u305f\u306e\u3067\u3001\u3042\u307e\u308a\u826f\u3044\u7d50\u679c\u306f\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3067\u3059\u304c\u3001\u30c7\u30fc\u30bf\u306e\u30b8\u30e3\u30f3\u30d7\u3078\u306e\u5bfe\u5fdc\u306f\u51fa\u6765\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u51fa\u6765\u308b\u306e\u3068\u3001\u7c92\u5b50\u3092\u5897\u3084\u3057\u3066\u3044\u304f\u3068\u5f90\u3005\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u3066\u3044\u304f\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b2\u4e57\u8aa4\u5dee\u306f\u3001\u7c92\u5b50\u65705=366.39, \u7c92\u5b50\u6570100=32.18, \u7c92\u5b50\u65701000=20.45 \u3067\u3057\u305f\u3002\n\n\u307e\u3068\u3081\n\u67a0\u7d44\u307f\u306f\u3082\u306e\u3059\u3054\u304f\u5358\u7d14\u3067\u3001\u4eca\u56de\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u3082\u306e\u3067\u3042\u308c\u3070\u7c21\u5358\u306b\u4f5c\u308c\u308b\u4e8b\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u305f\u3060\u3001\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3042\u307e\u308a\u30b9\u30b4\u3055\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3067\u3059\u306d...\uff7d\uff90\uff8f\uff7e\uff9d\n\u30ce\u30a4\u30ba\u306e\u5206\u5e03\u3092\u6c7a\u3081\u6253\u3061\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u5b9f\u6e2c\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001\u4ee5\u524d\u4f5c\u3063\u3066\u3044\u305f\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306b\u79fb\u690d\u3057\u305f\u308a\u3057\u3066\u307f\u305f\u308a\u3001\u5b9f\u52d9\u3067\u4f7f\u7528\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u304a\u624b\u6570\u3067\u3059\u304c\u9593\u9055\u3044\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n\n\u8ffd\u8a18\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u8a18\u8f09\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u66f8\u304f\u306e\u3092\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3002\u3002\n\u3053\u306e\u8a18\u4e8b\u306b\u66f8\u3044\u305f\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306f\u4e00\u56de\u5dee\u5206\u306e\u30c8\u30ec\u30f3\u30c9\u30e2\u30c7\u30eb\u3067\u3001\n\u3000\u3000xt=xt\u22121+vt,vt\uff5eN(0,\u03b12\u03c32)xt=xt\u22121+vt,vt\uff5eN(0,\u03b12\u03c32)x_t=x_{t-1}+v_t,  v_t\uff5eN(0,\u03b1^2\u03c3^2)\n\u3000\u3000yt=xt+wt,wt\uff5eN(0,\u03c32)yt=xt+wt,wt\uff5eN(0,\u03c32)y_t=x_t+w_t,  w_t\uff5eN(0,\u03c3^2)\n\u3067\u8868\u3055\u308c\u307e\u3059\u3002\n\u305d\u308c\u3068\u3001\u8a18\u4e8b\u5185\u3067\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u3068\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u30b3\u30fc\u30c9\u5185\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u306f\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306e\u4e2d\u3067\u3082\u300c\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30d5\u30a3\u30eb\u30bf\u300d\u3068\u547c\u3070\u308c\u308b\u30e2\u30ce\u3067\u3001\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306e\u7279\u6b8a\u7cfb\u3067\u3059\u3002\n\u3053\u306e\u8fba\u308a\u306f\u6570\u7406\u30fb\u8a08\u7b97\u306e\u7d71\u8a08\u79d1\u5b66 (21\u4e16\u7d00\u306e\u7d71\u8a08\u79d1\u5b66)\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u56f3\u4e2d\u306e\u6570\u5024\u306b\u306f\u671f\u5f85\u5024\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff08\u5024\u3068\u6b63\u898f\u5316\u3055\u308c\u305f\u91cd\u307f\u306e\u7a4d\u548c\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u8aac\u660e\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3059\u304c...\uff09\u3002\n\u671f\u5f85\u5024\u3092\u4f7f\u7528\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u5206\u5e03\u3092\u898b\u3066\u6c7a\u3081\u3066\u9802\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u4e0a\u8ffd\u8a18\u3067\u3057\u305f\u3002\n\n\u8ffd\u8a182\n\u30d5\u30a3\u30eb\u30bf\u5206\u5e03\u306e\u751f\u6210\u306e\u671f\u5f85\u5024\u306e\u8a08\u7b97\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u304c\u9593\u9055\u3063\u3066\u304a\u308a\u307e\u3057\u305f\u3002\n\u5177\u4f53\u7684\u306b\u306f\u91cd\u307f\u306e\u7dcf\u548c\u3067\u9664\u3059\u308b\u306e\u3092\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\u8a02\u6b63\u3068\u304a\u8a6b\u3073\u7533\u3057\u4e0a\u3052\u307e\u3059m(__)m\n# \u52d5\u6a5f\n\u4eca\u307e\u3067\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u306b\u306f\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u3046\u4e8b\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u308d\u305d\u308d\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306b\u3082\u624b\u3092\u51fa\u3057\u3066\u307f\u308b\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u305f\u3060\u4eca\u56de\u306e\u4f8b\u306f\u3001\u5b63\u7bc0\u5468\u671f\u306a\u3069\u3078\u306e\u5206\u89e3\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u5e73\u6ed1\u5316\u3082\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u3054\u4e86\u627f\u4e0b\u3055\u3044\u3002\n\n# \u53c2\u8003\u6587\u732e\n\n* [\u4e88\u6e2c\u306b\u3044\u304b\u3059\u7d71\u8a08\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u57fa\u672c\u2015\u30d9\u30a4\u30ba\u7d71\u8a08\u5165\u9580\u304b\u3089\u5fdc\u7528\u307e\u3067](http://www.amazon.co.jp/gp/product/4061557955/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4061557955&linkCode=as2&tag=shimashimao06-22)<img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=shimashimao06-22&l=as2&o=9&a=4061557955\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\n* [\u6642\u7cfb\u5217\u89e3\u6790\u5165\u9580](http://www.amazon.co.jp/gp/product/4000054554/ref=as_li_tf_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4000054554&linkCode=as2&tag=shimashimao06-22)<img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=shimashimao06-22&l=as2&o=9&a=4000054554\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\n\n\u300c\u4e88\u6e2c\u306b\u3044\u304b\u3059\u7d71\u8a08\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u57fa\u672c\u300d\u3060\u3051\u3067\u3082\u3001\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u3067\u3042\u308c\u3070\u5b9f\u88c5\u53ef\u80fd\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u6982\u8981\n\u72b6\u614b\u7a7a\u9593\u30e2\u30c7\u30eb\u306e\u4e00\u7a2e\u3067\u3059\u3002\u6642\u7cfb\u5217\u3092\u30b7\u30b9\u30c6\u30e0\u30e2\u30c7\u30eb\u3068\u89b3\u6e2c\u30e2\u30c7\u30eb\u3067\u8868\u73fe\u51fa\u6765\u308b\u3088\u3046\u306a\u30e2\u30ce\u3092\u72b6\u614b\u7a7a\u9593\u30e2\u30c7\u30eb\u3068\u547c\u3073\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u72b6\u614b\u7a7a\u9593\u30e2\u30c7\u30eb\u306f\u89b3\u6e2c\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u306e\u88cf\u5074\u306b\u3042\u308b\u72b6\u614b\uff08\u30e1\u30ab\u30cb\u30ba\u30e0\uff09\u3092\u7d44\u307f\u8fbc\u3080\u4e8b\u304c\u51fa\u6765\u308b\u30e2\u30c7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u3067\u7dda\u5f62\u3001\u30ac\u30a6\u30b9\u578b\u3067\u8a18\u8ff0\u3055\u308c\u305f\u30e2\u30ce\u304c\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u3002\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u306e\u6b20\u70b9\u3068\u3057\u3066\u306f\u3001\u30ce\u30a4\u30ba\u306b\u6b63\u898f\u5206\u5e03\u3092\u4eee\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6025\u6fc0\u306a\u5024\u306e\u5909\u5316\u3078\u306e\u5bfe\u5fdc\u304c\u96e3\u3057\u3044\u70b9\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u62e1\u5f35\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u306a\u3069\u304c\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u771f\u306e\u5206\u5e03\u304c\u591a\u5cf0\u6027\u306e\u5834\u5408\u306f\u826f\u3044\u8fd1\u4f3c\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\n\u4e00\u65b9\u3001\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306f\u3068\u3044\u3046\u3068\u3001\u5206\u5e03\u3092\u7c92\u5b50\u3067\u8fd1\u4f3c\u3059\u308b\u305f\u3081\u5206\u5e03\u304c\u591a\u5cf0\u6027\u306e\u5834\u5408\u306b\u3082\u5bfe\u5fdc\u304c\u53ef\u80fd\u3067\u3059\u3002\u305d\u3057\u3066\u3001\u305d\u306e\u8fd1\u4f3c\u306f\u5404\u7c92\u5b50\u306e\u6642\u9593\u767a\u5c55\u3068\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3068\u3044\u3046\uff12\u3064\u306e\u7c21\u5358\u306a\u64cd\u4f5c\u306b\u3088\u3063\u3066\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\uff12\u3064\u306e\u64cd\u4f5c\u306f\u3001\u4e88\u6e2c\u5206\u5e03\u3068\u30d5\u30a3\u30eb\u30bf\u5206\u5e03\u3092\u767a\u751f\u3055\u305b\u308b\u4e8b\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u304c\u5b9f\u969b\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u306f\u3001\u300c\u4e88\u6e2c\u306b\u3044\u304b\u3059\u7d71\u8a08\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u57fa\u672c\u300d\u306e76\u30da\u30fc\u30b8\u306e\u56f3\u3092\u3054\u89a7\u3044\u305f\u3060\u304f\u306e\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3067\u306f\u3001\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n# \u53c2\u8003\u30b3\u30fc\u30c9\n```py:\n# coding: utf-8\n\nfrom math import log, pow, sqrt\nimport numpy as np\nfrom scipy.stats import norm\nfrom numpy.random import uniform\nfrom multiprocessing import Pool\nimport matplotlib.pyplot as plt\n\n\nclass ParticleFilter:\n    alpha2 = 0.15 # \u30b7\u30b9\u30c6\u30e0\u30ce\u30a4\u30ba\u3068\u89b3\u6e2c\u30ce\u30a4\u30ba\u306e\u5206\u6563\u6bd4\n    sigma2 = pow(2,5) # \u30b7\u30b9\u30c6\u30e0\u30ce\u30a4\u30ba\u306e\u5206\u6563\n    log_likelihood = 0.0 # \u5bfe\u6570\u5c24\u5ea6\n    LSM = 0.0 # 2\u4e57\u8aa4\u5dee\n    TIME = 1\n    PR=8 \n    \n    def __init__(self, PARTICLES_NUM):\n        self.PARTICLES_NUM = PARTICLES_NUM # \u7c92\u5b50\u306e\u6570\n        self.TEETH_OF_COMB = np.arange(0, 1, float(1.0)/self.PARTICLES_NUM) # \u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u4f7f\u7528\u3059\u308b\u6a2a\u6adb\uff08\u4f7f\u3044\u56de\u3059\uff09\n        self.weights = np.zeros(self.PARTICLES_NUM) # \u7c92\u5b50\u306e\u5358\u4f4d\u8cea\u91cf\uff08\u89b3\u6e2c\u30c7\u30fc\u30bf\u3078\u306e\u9069\u5408\u5ea6\uff09\n        self.particles = np.zeros(self.PARTICLES_NUM) # \u7c92\u5b50\n        self.predicted_particles = np.zeros(self.PARTICLES_NUM) # \u4e88\u6e2c\u5206\u5e03\uff08\u7c92\u5b50\uff09\n        np.random.seed(555)\n        self.predicted_value = []\n        self.filtered_value = []\n    \n    def init_praticles_distribution(self):\n        \"\"\"initialize particles\n        x_0|0\n        \"\"\"\n        self.particles = norm.rvs(0,1,size=self.PARTICLES_NUM)\n        \n    def get_system_noise(self):\n        \"\"\"v_t\"\"\"\n        return norm.rvs(0, self.alpha2*self.sigma2, size=self.PARTICLES_NUM)\n        \n    def calc_pred_particles(self):\n        \"\"\"calculate system function\n        x_t|t-1\n        \"\"\"\n        return self.particles + self.get_system_noise()  \n        \n    def calc_particles_weight(self,y):\n        \"\"\"calculate fitness probabilities between observation value and predicted value\n        w_t\n        \"\"\"\n        locs = self.calc_pred_particles()\n        self.predicted_particles = locs\n                  \n        self.weights = norm.pdf([y]*self.PARTICLES_NUM, loc=locs,\n                                scale=[sqrt(self.sigma2)]*self.PARTICLES_NUM)\n                  \n    def calc_likelihood(self):\n        \"\"\"alculate likelihood at that point\n        p(y_t|y_1:t-1)\n        \"\"\"\n        res = sum(self.weights)/self.PARTICLES_NUM\n        self.log_likelihood += log(res)\n#        return res\n      \n    def normalize_weights(self):\n        \"\"\"wtilda_t\"\"\"\n        self.weights = self.weights/sum(self.weights)\n      \n    def resample(self,y):\n        \"\"\"x_t|t\"\"\"\n        self.normalize_weights()\n\n        self.memorize_predicted_value()\n\n        # accumulate weight\n        cum = np.cumsum(self.weights)\n        \n        # create roulette pointer \n        base = uniform(0,float(1.0)/self.PARTICLES_NUM)\n        pointers = self.TEETH_OF_COMB + base\n        \n        # select particles\n        selected_idx = [np.where(cum>=p)[0][0] for p in pointers]\n        \"\"\"\n        pool = Pool(processes=self.PR)\n        selected_idx = pool.map(get_slected_particles_idx, ((cum,p) for p in pointers))\n        pool.close()\n        pool.join()     \n        \"\"\"\n\n#         print \"select\",selected_idx\n        self.particles = self.predicted_particles[selected_idx]                \n        self.memorize_filtered_value(selected_idx, y)\n        \n    \n    def memorize_predicted_value(self):\n        predicted_value = sum(self.predicted_particles*self.weights)\n        self.predicted_value.append(predicted_value)\n\n    def memorize_filtered_value(self, selected_idx, y):\n        filtered_value = sum(self.particles*self.weights[selected_idx])/sum(self.weights[selected_idx]) # /sum(self.weights[selected_idx])\u3092\u8ffd\u8a18\n        self.filtered_value.append(filtered_value)\n        self.calculate_LSM(y,filtered_value)\n\n    def calculate_LSM(self,y,filterd_value):\n        self.LSM += pow(y-filterd_value,2)\n\n    def ahead(self,y):\n        \"\"\"compute system model and observation model\"\"\"\n        print 'calculating time at %d' % self.TIME\n        self.calc_pred_particles()\n        self.calc_particles_weight(y)\n        self.calc_likelihood()\n        self.resample(y)\n        self.TIME += 1\n\ndef get_slected_particles_idx((cum,p)):\n    \"\"\"multiprocessing function\"\"\"\n    try:\n        return np.where(cum>=p)[0][0]\n    \n    except Exception:\n        import sys\n        import traceback\n        sys.stderr.write(traceback.format_exc())    \n\nif __name__=='__main__':\n    pf = ParticleFilter(1000)\n    pf.init_praticles_distribution()\n    \n    data = np.hstack((norm.rvs(0,1,size=20),norm.rvs(2,1,size=60),norm.rvs(-1,0.5,size=20)))\n    \n    for d in data:\n        pf.ahead(d)\n    print 'log likelihood:', pf.log_likelihood\n    print 'LSM:', pf.LSM\n    \n    rng = range(100)\n    plt.plot(rng,data,label=u\"training data\")\n    plt.plot(rng,pf.predicted_value,label=u\"predicted data\")\n    plt.plot(rng,pf.filtered_value,label=u\"filtered data\")\n    plt.xlabel('TIME',fontsize=18)\n    plt.ylabel('Value',fontsize=18)    \n    plt.legend() \n    plt.show()\n```\n\n# \u5b9f\u9a13\u7d50\u679c\n\u7c92\u5b50\u65705,100,1000\u3067\u5b9f\u9a13\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u7d50\u679c\u3092\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002\n\n## \u7c92\u5b50\u65705\u306e\u5834\u5408\n![result_5.png](https://qiita-image-store.s3.amazonaws.com/0/12767/4de5c726-b264-9139-0e67-cfdaf8a4ca94.png)\n\n## \u7c92\u5b50\u6570100\u306e\u5834\u5408\n![resutl_100.png](https://qiita-image-store.s3.amazonaws.com/0/12767/b849ced0-7c57-745d-e9e5-fda3f5fb0000.png)\n\n## \u7c92\u5b50\u65701000\u306e\u5834\u5408\n![resutlt_1000.png](https://qiita-image-store.s3.amazonaws.com/0/12767/eab9d354-0f01-8f04-4546-3c3776c5202e.png)\n\n## \u30b3\u30e1\u30f3\u30c8\n\u30b7\u30b9\u30c6\u30e0\u30ce\u30a4\u30ba\u304c\u6c7a\u3081\u6253\u3061\u3060\u3063\u305f\u306e\u3067\u3001\u3042\u307e\u308a\u826f\u3044\u7d50\u679c\u306f\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3067\u3059\u304c\u3001\u30c7\u30fc\u30bf\u306e\u30b8\u30e3\u30f3\u30d7\u3078\u306e\u5bfe\u5fdc\u306f\u51fa\u6765\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u51fa\u6765\u308b\u306e\u3068\u3001\u7c92\u5b50\u3092\u5897\u3084\u3057\u3066\u3044\u304f\u3068\u5f90\u3005\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u3066\u3044\u304f\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b2\u4e57\u8aa4\u5dee\u306f\u3001\u7c92\u5b50\u65705=366.39, \u7c92\u5b50\u6570100=32.18, \u7c92\u5b50\u65701000=20.45 \u3067\u3057\u305f\u3002\n\n# \u307e\u3068\u3081\n\u67a0\u7d44\u307f\u306f\u3082\u306e\u3059\u3054\u304f\u5358\u7d14\u3067\u3001\u4eca\u56de\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u3082\u306e\u3067\u3042\u308c\u3070\u7c21\u5358\u306b\u4f5c\u308c\u308b\u4e8b\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u305f\u3060\u3001\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3042\u307e\u308a\u30b9\u30b4\u3055\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3067\u3059\u306d...<l>\uff7d\uff90\uff8f\uff7e\uff9d</l>\n\u30ce\u30a4\u30ba\u306e\u5206\u5e03\u3092\u6c7a\u3081\u6253\u3061\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u5b9f\u6e2c\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001\u4ee5\u524d\u4f5c\u3063\u3066\u3044\u305f\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306b\u79fb\u690d\u3057\u305f\u308a\u3057\u3066\u307f\u305f\u308a\u3001\u5b9f\u52d9\u3067\u4f7f\u7528\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u304a\u624b\u6570\u3067\u3059\u304c\u9593\u9055\u3044\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n\n# \u8ffd\u8a18\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u8a18\u8f09\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u66f8\u304f\u306e\u3092\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3002\u3002\n\u3053\u306e\u8a18\u4e8b\u306b\u66f8\u3044\u305f\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306f\u4e00\u56de\u5dee\u5206\u306e\u30c8\u30ec\u30f3\u30c9\u30e2\u30c7\u30eb\u3067\u3001\n\u3000\u3000$x_t=x_{t-1}+v_t,  v_t\uff5eN(0,\u03b1^2\u03c3^2)$\n\u3000\u3000$y_t=x_t+w_t,  w_t\uff5eN(0,\u03c3^2)$\n\u3067\u8868\u3055\u308c\u307e\u3059\u3002\n\u305d\u308c\u3068\u3001\u8a18\u4e8b\u5185\u3067\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u3068\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u30b3\u30fc\u30c9\u5185\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u306f\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306e\u4e2d\u3067\u3082\u300c\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30d5\u30a3\u30eb\u30bf\u300d\u3068\u547c\u3070\u308c\u308b\u30e2\u30ce\u3067\u3001\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u306e\u7279\u6b8a\u7cfb\u3067\u3059\u3002\n\u3053\u306e\u8fba\u308a\u306f[\u6570\u7406\u30fb\u8a08\u7b97\u306e\u7d71\u8a08\u79d1\u5b66 (21\u4e16\u7d00\u306e\u7d71\u8a08\u79d1\u5b66)](http://www.amazon.co.jp/gp/product/4130440837/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4130440837&linkCode=as2&tag=shimashimao06-22)<img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=shimashimao06-22&l=as2&o=9&a=4130440837\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u56f3\u4e2d\u306e\u6570\u5024\u306b\u306f\u671f\u5f85\u5024\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff08\u5024\u3068\u6b63\u898f\u5316\u3055\u308c\u305f\u91cd\u307f\u306e\u7a4d\u548c\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u8aac\u660e\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3059\u304c...\uff09\u3002\n\u671f\u5f85\u5024\u3092\u4f7f\u7528\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u5206\u5e03\u3092\u898b\u3066\u6c7a\u3081\u3066\u9802\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u4e0a\u8ffd\u8a18\u3067\u3057\u305f\u3002\n\n# \u8ffd\u8a182\n\u30d5\u30a3\u30eb\u30bf\u5206\u5e03\u306e\u751f\u6210\u306e\u671f\u5f85\u5024\u306e\u8a08\u7b97\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u304c\u9593\u9055\u3063\u3066\u304a\u308a\u307e\u3057\u305f\u3002\n\u5177\u4f53\u7684\u306b\u306f\u91cd\u307f\u306e\u7dcf\u548c\u3067\u9664\u3059\u308b\u306e\u3092\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\u8a02\u6b63\u3068\u304a\u8a6b\u3073\u7533\u3057\u4e0a\u3052\u307e\u3059m(__)m", "tags": ["Python2.7", "\u6642\u7cfb\u5217\u89e3\u6790"]}