{"context": " More than 1 year has passed since last update.\n\n\u3010\u6b63\u89e3\u30c7\u30fc\u30bf\u3011L\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\n\n30\u65e5\u5f8c\u306e DAILY_ACTIVE_FLAG \u30ab\u30e9\u30e0\u306e\u5024  (1 or 0)\n\n\u3010\u8aac\u660e\u5909\u6570\u3011\n\n\u203b\u5404\u7a2e\u8abf\u67fb\u306e\u7d50\u679c\u3001\u624b\u6301\u3061\u306e\u4eee\u8aac\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\u300e\u65e5\u3005\u3001\u3069\u308c\u3060\u3051\u4ed6\u30e6\u30fc\u30b6\u3068\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u697d\u3057\u3093\u3060\u304b\u304c\u3001\u30b2\u30fc\u30e0\u7d99\u7d9a\u7387\u3092\u6c7a\u3081\u308b\u300f\n\u5177\u4f53\u7684\u306a\u6570\u5024\u3068\u3057\u3066\u3001\uff11\u65e5\u3001\uff13\u56de\u4ee5\u4e0a\u3001\u4ed6\u30e6\u30fc\u30b6\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3042\u3063\u305f\u304b\u3069\u3046\u304b\u3001\u304c\u95be\u5024\u306b\u306a\u308b\u3068\u3001\u524d\u6bb5\u306e\u96c6\u8a08\u3084\u5206\u6790\u304b\u3089\u3001\u660e\u3089\u304b\u306b\u306a\u3063\u305f\n\u4e0a\u8a18\u306b\u52a0\u3048\u3066\u3001\u4ed6\u306b\u91cd\u8981\u306aKPI\u306f\u3001\u4ee5\u4e0b\u306e\uff12\u70b9\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n(1) \u3042\u308b\u65e5\u306e\u30ab\u30fc\u30c9\u30fb\u30ac\u30c1\u30e3\u5f15\u3044\u305f\u5408\u8a08\u56de\u6570\uff08\u6709\u511f\u3001\u7121\u511f\u5408\u8a08\uff09CARD_GACHA_COUNT\n(2) \u3042\u308b\u65e5\u306e\u81ea\u5df1\u30b9\u30c6\u30fc\u30bf\u30b9\uff08\u4f53\u529b\u3001\u30e6\u30fc\u30b6\u4e2d\u306e\u76f8\u5bfe\u9806\u4f4d\u3001\u6240\u5c5e\u540c\u76df\u30fb\u9023\u5408\u30c1\u30fc\u30e0\u5168\u4f53\u306e\u72b6\u6cc1\u3001\u4fdd\u6709\u30ab\u30fc\u30c9\u6570\u306a\u3069\uff09\u95b2\u89a7\u753b\u9762\u30a2\u30af\u30bb\u30b9\u56de\u6570 STATUS_CHECK_COUNT\n\n\u305d\u3053\u3067\u300130\u65e5\u5f8c\u3001DAILY ACTIVE\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306e\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\uff13\u5909\u6570\u3092\u9078\u629e\u3057\u305f\u3002\n\n\n(1) CARD_GACHA_COUNT\n\n\n(2) STATUS_CHECK_COUNT\n\n\n(3) \u904e\u53bb14\u65e5\u9593\u306e (\u6628\u65e5\uff5e14\u65e5\u524d\u307e\u3067) FRIEND_ACTION_COUTNT \u306e\u884c\u52d5\u5c65\u6b74\u5024\n\n\u203b14\u65e5\u5206\u306eFRIEND_ACTION_COUTNT \u5b9f\u7e3e\u5024\u3092\u3001\u3072\u3068\u3064\u306e\u7dcf\u5408\u8a55\u4fa1\u5024\u306b\u307e\u3068\u3081\u3042\u3052\u308b\u969b\u306e\u5404\u65e5\u306e\u5b9f\u7e3e\u5024\u306e\u91cd\u307f\u3065\u3051\u4fc2\u6570\u306f\u3001\u3042\u308b\u65e5\u3092\u8d77\u70b9\u3068\u3057\u3066\u56fa\u5b9a\u3057\u305f\u4e0a\u3067\u8a08\u6e2c\u3055\u308c\u305f FRIEND_ACTION_COUTNT \u306e\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570\uff08R\u8a00\u8a9e\u306eacf()\u95a2\u6570\u3067\u7b97\u51fa\uff09\u3082\u3057\u304f\u306f (\u3042\u308b\u65e5\u3092\u8d77\u70b9\u3068\u3057\u3066\u56fa\u5b9a\u3057\u305f\u4e0a\u3067) ARIMA\u30e2\u30c7\u30eb \u3067\u63a8\u8a08\u3057\u305f\u504f\u81ea\u5df1\u56de\u5e30\u4fc2\u6570 \u3092 SQL\u5185\u306b\u30d9\u30bf\u6253\u3061\u3057\u3066\u30af\u30a8\u30ea\u5b9f\u884c\u6642\u306b\u7b97\u51fa\u3002\n\n\nSQL\n\n\n\u4e88\u6e2c\u5bfe\u8c61\u65e5\u3092\u3001\u6628\u65e5\u4ee5\u524d\u306e\u4efb\u610f\u306e\u65e5\u4ed8\u306b\u6307\u5b9a\u3057\u305f\u4e0a\u3067\u3001\u8fd4\u3055\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u3092 order by random() \u3057\u3066\u3001\u65e5\u4ed8\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3002\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u305f\u7d50\u679c\u306e\u3046\u3061\u300110000\u30ec\u30b3\u30fc\u30c9\u3060\u3051\u306blimit\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u3001\u30e9\u30f3\u30c0\u30e0\u65e5\u4ed8\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5f97\u308b\u3002\n\n\n\u63a8\u8a08\u5b9f\u884c\u65e5\u306f\u3001\u3053\u306e\u300c\u4e88\u6e2c\u5bfe\u8c61\u65e5\u300d\u306e30\u65e5\u524d\u306b\u30bb\u30c3\u30c8\u3059\u308b\u3002\n\n\nsql\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n\n\n\n\npostgreSQL(Redshift)\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp as (\n select estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n        Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, ----lag\u95a2\u6570\u3067\u53d6\u5f97\u3059\u308b\u30ab\u30e9\u30e0\u304c\u3059\u3079\u3066\uff08NULL\uff09\u3067\u306a\u304f\u683c\u7d0d\u3055\u308c\u308b\u65e5\u4ed8\uff08\uff1d\u30e2\u30c7\u30eb\u63a8\u8a08\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u767a\u751f\u65e5\uff09\n        prediction_target_future_tbl.USER_ID,\n        prediction_target_future_tbl.SEIKAI,\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end,as FRIEND_ACTION_COUTNT,\n         lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 8)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 9)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 10)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 11)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 12)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 13)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 14)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 15)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_15_AGO\nfrom  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\nON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n   AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45day) AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag\u95a2\u6570\u3067\u904e\u53bb14\u65e5\u9593\uff081\u65e5\u524d\uff5e14\u65e5\u524d\uff09\u30ec\u30b3\u30fc\u30c9\u3092\u4e0a\u306e\u884c\u304b\u3089\u305a\u3089\u3057\u3066\uff08\u304a\u308d\u3057\u3066\uff09\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n) select *\nfrom temp\norder by USER_ID, CREATE_TIME \n;\n\n\n\n1\u30e6\u30fc\u30b6\u3054\u3068\u306b\u300115\u884c\uff08\u5f53\u65e5\uff0b\u904e\u53bb14\u65e5\u9593\u5206\u306e\u30ec\u30b3\u30fc\u30c9\uff09\u304c\u53d6\u5f97\u3055\u308c\u308b\n\n\n\n\uff08 \u8d64\u67a0\u306e\u30ec\u30b3\u30fc\u30c9\uff08\uff11\u30e6\u30fc\u30b6\u3001\uff11\u884c\uff09\u3060\u3051\u6b32\u3057\u3044 )\n\n\n\n\n\u4e3b\u554f\u3044\u5408\u308f\u305b\u6587 \u306e where\u53e5\u306b\u3001\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308c\u3070OK\n\n\n\npostgreSQL(Redshift)\nWHERE CREATE_TIME = model_estimation_date\n\n\n\n\n\n\uff08 \u4ee5\u4e0b\u3067\u3082OK \uff09\n\n\nSQL\nWHERE CREATE_TIME = prediction_target_date + interval '-31 day'\n\n\n\n\npostgreSQL(Redshift)\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n SELECT estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n        Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, --lag\u95a2\u6570\u3067\u53d6\u5f97\u3059\u308b\u5168\u8aac\u660e\u5909\u6570\uff08\uff11\u65e5\u524d \u8aac\u660e\u5909\u6570\uff5e30\u65e5\u524d \u8aac\u660e\u5909\u6570\uff09\u306e\u5024\u304c\u3059\u3079\u3066\u683c\u7d0d\u3055\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u65e5\u4ed8\uff08\uff1d\u30e2\u30c7\u30eb\u63a8\u8a08\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u767a\u751f\u65e5\uff09\n        prediction_target_future_tbl.USER_ID,\n        prediction_target_future_tbl.SEIKAI,\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end,as FRIEND_ACTION_COUTNT,\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end as FRIEND_ACTION_COUTNT_AGOFLAG,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO,   \n FROM  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\n ON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n     AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n ORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n) SELECT *\nFROM temp\nWHERE CREATE_TIME = model_estimation_date --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\nORDER by USER_ID, CREATE_TIME \n;\n\n\n\n\n\n\u6700\u5f8c\u306b\u3001\u30e6\u30fc\u30b6\u7d99\u7d9a\u7387\uff08\uff1dL\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\uff09\u3092\u6c7a\u5b9a\u3059\u308b\u8aac\u660e\u529b\u304c\u5927\u304d\u3044\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u3001\u6ce8\u76ee\u3057\u3066\u3044\u308b \u4ed6\u30e6\u30fc\u30b6\u3068\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u5909\u6570\uff08\u904e\u53bb14\u65e5\u9593\u306e\u72b6\u6cc1\u304b\u3089\u5f71\u97ff\u3092\u53d7\u3051\u308b\u3068\u4eee\u5b9a\uff09\u3092\u3001\u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u5f62\u3067\u3001\u504f\u81ea\u5df1\u56de\u5e30\u4fc2\u6570\u3092\u30af\u30a8\u30ea\u306b\u66f8\u304d\u8fbc\u3093\u3067\u7b97\u51fa\n\n\npostgreSQL(Redshift)\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n SELECT estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n        Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, --lag\u95a2\u6570\u3067\u53d6\u5f97\u3059\u308b\u5168\u8aac\u660e\u5909\u6570\uff08\uff11\u65e5\u524d \u8aac\u660e\u5909\u6570\uff5e30\u65e5\u524d \u8aac\u660e\u5909\u6570\uff09\u306e\u5024\u304c\u3059\u3079\u3066\u683c\u7d0d\u3055\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u65e5\u4ed8\uff08\uff1d\u30e2\u30c7\u30eb\u63a8\u8a08\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u767a\u751f\u65e5\uff09\n        prediction_target_future_tbl.USER_ID,\n        prediction_target_future_tbl.SEIKAI,\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end as FRIEND_ACTION_COUTNT,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO,  \n FROM  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\n ON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n     AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n ORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n) SELECT *,\n          (10.5*FRIEND_ACTION_COUTNT_1_AGO + 3.2*FRIEND_ACTION_COUTNT_2_AGO + 2.1*FRIEND_ACTION_COUTNT_3_AGO  + 0.5*FRIEND_ACTION_COUTNT_4_AGO + 0.3*FRIEND_ACTION_COUTNT_5_AGO    --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n           + 0.2*FRIEND_ACTION_COUTNT_6_AGO + 12.3*FRIEND_ACTION_COUTNT_7_AGO + 20.4*FRIEND_ACTION_COUTNT_8_AGO + 2.9*FRIEND_ACTION_COUTNT_9_AGO + 1.2*FRIEND_ACTION_COUTNT_10_AGO --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n           + 0.01*FRIEND_ACTION_COUTNT_11_AGO + 0.35*FRIEND_ACTION_COUTNT_12_AGO + 0.22*FRIEND_ACTION_COUTNT_13_AGO + 12.3*FRIEND_ACTION_COUTNT_14_AGO) as score                 --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n  from temp\n  where CREATE_TIME = model_estimation_date  --\u3053\u3053\u304c\u5927\u4e8b\uff01\n  order by user_id, model_estimation_date --\u4e26\u3073\u66ff\u3048\u5217\u3092\u3001CREATE_TIME \u304b\u3089 model_estimation_date \u306b\u5909\u66f4\n;\n\n\n\nR\u8a00\u8a9e\u30b3\u30fc\u30c9\n\n\n\u30e9\u30f3\u30c0\u30e0\u30fb\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u306b\u6295\u5165\u3057\u305f\u5834\u5408\u306e\u4e88\u6e2c\u7cbe\u5ea6\u306e\u63a8\u8a08\n\n\nR\n\nsetwd(\"C:/HirofumiYashima/Desktop/Logistic_regression_model\")\n# list.files()\n\n\n#===\u30e2\u30c7\u30eb\u691c\u8a3c\uff08\u4f5c\u6210\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7cbe\u5ea6\u3092\u3001\u30e9\u30f3\u30c0\u30e0\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\uff09\n# model\u306f\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3067\u4f5c\u6210\u6e08\u307f\n\ndata.test <- read.csv(\"random_test_data_a.csv\", header=T)\n\ntest.predict <- predict(model, data.test, type=\"response\")\n\n# summary(test.predict)\n# head(test.predict)\n\ntest.result <- data.frame(seikai = data.test$seikai, predicted_values = test.predict)\n# head(test.result)\n\n# L\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u5024 (predicted_values) \u304c 0.7\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001Daily Active \u3060\u3063\u305f\u3068\u5b9a\u7fa9\n\ntest.result$predicted_values[test.result$predicted_values >= 0.7] <- 1\ntest.result$predicted_values[test.result$predicted_values < 0.7] <- 0\n\n\n#head(test.result)\n#  seikai predicted_values\n#1      1                1\n#2      1                1\n#3      0                0\n#4      0                0\n#5      0                0\n#6      0                0\n\n# \uff13\uff10\u65e5\u5f8c Daily Active\u3060\u3063\u305f\u304b\u5426\u304b\u306e\u5b9f\u73fe\u5024\uff09\u3068\u3001\n# \uff13\uff10\u65e5\u5f8c Daily Active\u8a72\u5426\u306e\u4e88\u6e2c\u5024 \u3092\u7a81\u304d\u5408\u305b\u3066\u3001\u8a72\u5f53\uff08\uff11\uff09\u3001\u975e\u8a72\u5f53\uff08\uff10\uff09\uff12\u884c\uff12\u5217\u306e\u8868\u306b\u3057\u3066\u4e88\u6e2c\u6b63\u89e3\u7387 \u3092\u96c6\u8a08 \uff08\u5bfe\u89d2\u6210\u5206\u306e\u4ef6\u6570\u304c\u3001\u6b63\u89e3\u4ef6\u6570\uff09\n\ntable(test.result$seikai, test.result$predicted_values)\n\n\n# \u5b9f\u73fe\u5024\u304cDaily Active \u3067\u3001\u4e88\u6e2c\u7387\u3082Daily Active\u3068\u8a00\u3044\u5f53\u3066\u3066\u3044\u305f\u4ef6\u6570\n# head(subset(test.result, (seikai==1 & predicted_values ==1)))\n\n# \u5b9f\u73fe\u5024\u304c\u975eDaily Active\u3067\u3001\u4e88\u6e2c\u7387\u3082\u975eDaily Active\u3068\u8a00\u3044\u5f53\u3066\u3066\u3044\u305f\u4ef6\u6570\n# head(subset(test.result, (seikai==0 & predicted_values ==0)))\n\n# nrow(subset(test.result, (seikai==1 & predicted_values ==1)))\n# nrow(subset(test.result, (seikai==0 & predicted_values ==0)))\n\nCV_prediction_success_count <- nrow(subset(test.result, (seikai==1 & predicted_values ==1))) \nNonCV_prediction_success_count <- nrow(subset(test.result, (seikai==0 & predicted_values ==0))) \nnrow_test_dataset <- nrow(data.test)\n\nprediction_success_ratio <-  (CV_prediction_success_count + NonCV_prediction_success_count)/nrow_test_dataset\nmessage = paste(\"\u6b63\u89e3\u7387:\", (round(prediction_success_ratio, 4)*100), \"%\")\nprint(message)\n\n\n\n\n\n\u3010 \u53c2\u8003 \u3011\n\n\n\u30e9\u30f3\u30c0\u30e0\u65e5\u4ed8\u3067\u306f\u306a\u304f\u3001\u300e\u4e88\u6e2c\u5bfe\u8c61\u65e5\u300f \u3092 \u7279\u5b9a\u306e\u65e5\u4ed8 \u306b\u7d5e\u308a\u305f\u3044\u5834\u5408\u306f\u3001 \u5192\u982d\u306e With\u53e5\u3067\u751f\u6210\u3059\u308b\uff08\u3042\u308b\u7a2e\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u30fb\u30d3\u30e5\u30fc\uff09prediction_target_future_tbl \u306e where\u53e5\u3092\u3001\u4ee5\u4e0b\u306b\u5909\u3048\u308b\u3060\u3051\u3067OK\n\n\uff08\u30e2\u30c7\u30eb\u63a8\u8a08\u65e5\u306e\u65e5\u4ed8\u306f\u3001\u4e0a\u8a18\u300e\u4e88\u6e2c\u65e5\u300f\u306e 30\u65e5\u524d \u306b\u81ea\u52d5\u3067\u30bb\u30c3\u30c8\u3055\u308c\u308b\uff09\n\n\npostgreSQL(Redshift)\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n      , USER_ID\n      , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME in ('2015-01-01', '2015-01-02', '2015-01-03', '2015-12-24', '2015-12-25', '2015-12-29', '2015-12-30', '2015-12-31')\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n\n\n\n\n\u306a\u304a\u3001\u300c\u7279\u5b9a\u306e\u65e5\u300d\u3092\u6307\u5b9a\u3059\u308b\u969b\u3001\u5e74(Year)\u306f\u554f\u308f\u305a\u306b\u3001\u6708(Month)\u3068\u65e5(Day)\u3060\u3051\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u304c\u4f7f\u3048\u308b\u3002\n\nWHERE (date_part(month, CREATE_TIME) = '1' and date_part(day, CREATE_TIME) in ('1', '2', '3')) \n     or (date_part(month, CREATE_TIME) = '12' and date_part(day, CREATE_TIME) in ('24', '25'))\n\n\n\n\u300e\u30e2\u30c7\u30eb\u63a8\u8a08\u65e5\u300f \u3092 \u7279\u5b9a\u306e\u65e5\u4ed8 \u306b\u7d5e\u308a\u305f\u3044\u5834\u5408\u306f\u3001 \u4e0a\u8a18\u306e where\u53e5 \u3067\u6307\u5b9a\u3059\u308b\u6761\u4ef6\u65e5\u3092\u3001\u300e\u30e2\u30c7\u30eb\u63a8\u8a08\u65e5\u306e30\u65e5\u5f8c\u300f\u306b\u3059\u308c\u3070\u3088\u3044\n\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME in (dateadd(day, 30,'2015-01-01'), dateadd(day, 30, '2015-01-02'), dateadd(day, 30, '2015-01-03'))\n\n\n\u52a0\u3048\u3066\u3001temp \uff08\u30a4\u30f3\u30e9\u30a4\u30f3\u30fb\u30d3\u30e5\u30fc\uff09\u306e\u65e5\u4ed8\u7bc4\u56f2\u3092\u3001\u4e88\u6e2c\u5bfe\u8c61\u65e5\u306e45\u65e5\u524d\uff5e31\u65e5\u524d\u306b\u3057\u3066\u3044\u305f\u3082\u306e\u3092\u300144\u65e5\u524d\uff5e30\u65e5\u524d\u306b\u5909\u66f4\u3059\u308b\u3002\n\nON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n   AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-44 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-30 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n), temp_2 as (\n\n\n###__\u3010\u6b63\u89e3\u30c7\u30fc\u30bf\u3011L\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570__\n30\u65e5\u5f8c\u306e DAILY_ACTIVE_FLAG \u30ab\u30e9\u30e0\u306e\u5024  (1 or 0)\n\n###__\u3010\u8aac\u660e\u5909\u6570\u3011__\n\n\u203b\u5404\u7a2e\u8abf\u67fb\u306e\u7d50\u679c\u3001\u624b\u6301\u3061\u306e\u4eee\u8aac\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\n\u300e\u65e5\u3005\u3001\u3069\u308c\u3060\u3051\u4ed6\u30e6\u30fc\u30b6\u3068\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u697d\u3057\u3093\u3060\u304b\u304c\u3001\u30b2\u30fc\u30e0\u7d99\u7d9a\u7387\u3092\u6c7a\u3081\u308b\u300f\n\n\u5177\u4f53\u7684\u306a\u6570\u5024\u3068\u3057\u3066\u3001\uff11\u65e5\u3001\uff13\u56de\u4ee5\u4e0a\u3001\u4ed6\u30e6\u30fc\u30b6\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3042\u3063\u305f\u304b\u3069\u3046\u304b\u3001\u304c\u95be\u5024\u306b\u306a\u308b\u3068\u3001\u524d\u6bb5\u306e\u96c6\u8a08\u3084\u5206\u6790\u304b\u3089\u3001\u660e\u3089\u304b\u306b\u306a\u3063\u305f\n\n\u4e0a\u8a18\u306b\u52a0\u3048\u3066\u3001\u4ed6\u306b\u91cd\u8981\u306aKPI\u306f\u3001\u4ee5\u4e0b\u306e\uff12\u70b9\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n___\n\n(1) \u3042\u308b\u65e5\u306e\u30ab\u30fc\u30c9\u30fb\u30ac\u30c1\u30e3\u5f15\u3044\u305f\u5408\u8a08\u56de\u6570\uff08\u6709\u511f\u3001\u7121\u511f\u5408\u8a08\uff09CARD_GACHA_COUNT\n\n(2) \u3042\u308b\u65e5\u306e\u81ea\u5df1\u30b9\u30c6\u30fc\u30bf\u30b9\uff08\u4f53\u529b\u3001\u30e6\u30fc\u30b6\u4e2d\u306e\u76f8\u5bfe\u9806\u4f4d\u3001\u6240\u5c5e\u540c\u76df\u30fb\u9023\u5408\u30c1\u30fc\u30e0\u5168\u4f53\u306e\u72b6\u6cc1\u3001\u4fdd\u6709\u30ab\u30fc\u30c9\u6570\u306a\u3069\uff09\u95b2\u89a7\u753b\u9762\u30a2\u30af\u30bb\u30b9\u56de\u6570 STATUS_CHECK_COUNT\n\n___\n\n__\u305d\u3053\u3067\u300130\u65e5\u5f8c\u3001DAILY ACTIVE\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306e\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\uff13\u5909\u6570\u3092\u9078\u629e\u3057\u305f\u3002__\n\n___\n\n####__(1) CARD_GACHA_COUNT__\n####__(2) STATUS_CHECK_COUNT__\n####__(3) \u904e\u53bb14\u65e5\u9593\u306e (\u6628\u65e5\uff5e14\u65e5\u524d\u307e\u3067) FRIEND_ACTION_COUTNT \u306e\u884c\u52d5\u5c65\u6b74\u5024__\n\n\u203b14\u65e5\u5206\u306eFRIEND_ACTION_COUTNT \u5b9f\u7e3e\u5024\u3092\u3001\u3072\u3068\u3064\u306e\u7dcf\u5408\u8a55\u4fa1\u5024\u306b\u307e\u3068\u3081\u3042\u3052\u308b\u969b\u306e\u5404\u65e5\u306e\u5b9f\u7e3e\u5024\u306e\u91cd\u307f\u3065\u3051\u4fc2\u6570\u306f\u3001\u3042\u308b\u65e5\u3092\u8d77\u70b9\u3068\u3057\u3066\u56fa\u5b9a\u3057\u305f\u4e0a\u3067\u8a08\u6e2c\u3055\u308c\u305f FRIEND_ACTION_COUTNT \u306e\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570\uff08R\u8a00\u8a9e\u306eacf()\u95a2\u6570\u3067\u7b97\u51fa\uff09\u3082\u3057\u304f\u306f (\u3042\u308b\u65e5\u3092\u8d77\u70b9\u3068\u3057\u3066\u56fa\u5b9a\u3057\u305f\u4e0a\u3067) ARIMA\u30e2\u30c7\u30eb \u3067\u63a8\u8a08\u3057\u305f\u504f\u81ea\u5df1\u56de\u5e30\u4fc2\u6570 \u3092 SQL\u5185\u306b\u30d9\u30bf\u6253\u3061\u3057\u3066\u30af\u30a8\u30ea\u5b9f\u884c\u6642\u306b\u7b97\u51fa\u3002\n\n___\n\n### __SQL__\n\n#### __\u4e88\u6e2c\u5bfe\u8c61\u65e5\u3092\u3001\u6628\u65e5\u4ee5\u524d\u306e\u4efb\u610f\u306e\u65e5\u4ed8\u306b\u6307\u5b9a\u3057\u305f\u4e0a\u3067\u3001\u8fd4\u3055\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u3092 order by random() \u3057\u3066\u3001\u65e5\u4ed8\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3002\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u305f\u7d50\u679c\u306e\u3046\u3061\u300110000\u30ec\u30b3\u30fc\u30c9\u3060\u3051\u306blimit\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u3001\u30e9\u30f3\u30c0\u30e0\u65e5\u4ed8\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5f97\u308b\u3002__\n\n#### __\u63a8\u8a08\u5b9f\u884c\u65e5\u306f\u3001\u3053\u306e\u300c\u4e88\u6e2c\u5bfe\u8c61\u65e5\u300d\u306e30\u65e5\u524d\u306b\u30bb\u30c3\u30c8\u3059\u308b\u3002__\n\n```{sql:sql}\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n```\n\n___\n\n\n```{sql:postgreSQL(Redshift)}\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp as (\n select estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n        Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, ----lag\u95a2\u6570\u3067\u53d6\u5f97\u3059\u308b\u30ab\u30e9\u30e0\u304c\u3059\u3079\u3066\uff08NULL\uff09\u3067\u306a\u304f\u683c\u7d0d\u3055\u308c\u308b\u65e5\u4ed8\uff08\uff1d\u30e2\u30c7\u30eb\u63a8\u8a08\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u767a\u751f\u65e5\uff09\n        prediction_target_future_tbl.USER_ID,\n        prediction_target_future_tbl.SEIKAI,\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end,as FRIEND_ACTION_COUTNT,\n         lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 8)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 9)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 10)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 11)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 12)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 13)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 14)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 15)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_15_AGO\nfrom  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\nON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n   AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45day) AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag\u95a2\u6570\u3067\u904e\u53bb14\u65e5\u9593\uff081\u65e5\u524d\uff5e14\u65e5\u524d\uff09\u30ec\u30b3\u30fc\u30c9\u3092\u4e0a\u306e\u884c\u304b\u3089\u305a\u3089\u3057\u3066\uff08\u304a\u308d\u3057\u3066\uff09\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n) select *\nfrom temp\norder by USER_ID, CREATE_TIME \n;\n```\n\n## __1\u30e6\u30fc\u30b6\u3054\u3068\u306b\u300115\u884c\uff08\u5f53\u65e5\uff0b\u904e\u53bb14\u65e5\u9593\u5206\u306e\u30ec\u30b3\u30fc\u30c9\uff09\u304c\u53d6\u5f97\u3055\u308c\u308b__\n![1.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/02777a91-5c95-1637-f148-9e62939fbb22.png)\n\n\n\n## __\uff08 \u8d64\u67a0\u306e\u30ec\u30b3\u30fc\u30c9\uff08\uff11\u30e6\u30fc\u30b6\u3001\uff11\u884c\uff09\u3060\u3051\u6b32\u3057\u3044 )__\n\n\n![2.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/20175f32-a2db-9a92-c33e-4e471a82fcb8.png)\n\n\n___\n\n\n## __\u4e3b\u554f\u3044\u5408\u308f\u305b\u6587 \u306e where\u53e5\u306b\u3001\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308c\u3070OK__\n\n>```{sql:postgreSQL(Redshift)}\n> WHERE CREATE_TIME = model_estimation_date\n>```\n\n___\n#### __\uff08 \u4ee5\u4e0b\u3067\u3082OK \uff09__\n\n```{sql:SQL}\nWHERE CREATE_TIME = prediction_target_date + interval '-31 day'\n```\n___\n\n\n```{sql:postgreSQL(Redshift)}\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n SELECT estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n        Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, --lag\u95a2\u6570\u3067\u53d6\u5f97\u3059\u308b\u5168\u8aac\u660e\u5909\u6570\uff08\uff11\u65e5\u524d \u8aac\u660e\u5909\u6570\uff5e30\u65e5\u524d \u8aac\u660e\u5909\u6570\uff09\u306e\u5024\u304c\u3059\u3079\u3066\u683c\u7d0d\u3055\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u65e5\u4ed8\uff08\uff1d\u30e2\u30c7\u30eb\u63a8\u8a08\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u767a\u751f\u65e5\uff09\n        prediction_target_future_tbl.USER_ID,\n        prediction_target_future_tbl.SEIKAI,\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end,as FRIEND_ACTION_COUTNT,\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end as FRIEND_ACTION_COUTNT_AGOFLAG,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO,   \n FROM  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\n ON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n     AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n ORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n) SELECT *\nFROM temp\nWHERE CREATE_TIME = model_estimation_date --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\nORDER by USER_ID, CREATE_TIME \n;\n```\n\n![3.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/878adbfd-4af4-939d-a27b-b9f6eec823b3.png)\n\n\n\n___\n\n\n### __\u6700\u5f8c\u306b\u3001\u30e6\u30fc\u30b6\u7d99\u7d9a\u7387\uff08\uff1dL\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\uff09\u3092\u6c7a\u5b9a\u3059\u308b\u8aac\u660e\u529b\u304c\u5927\u304d\u3044\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u3001\u6ce8\u76ee\u3057\u3066\u3044\u308b \u4ed6\u30e6\u30fc\u30b6\u3068\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u5909\u6570\uff08\u904e\u53bb14\u65e5\u9593\u306e\u72b6\u6cc1\u304b\u3089\u5f71\u97ff\u3092\u53d7\u3051\u308b\u3068\u4eee\u5b9a\uff09\u3092\u3001\u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u5f62\u3067\u3001\u504f\u81ea\u5df1\u56de\u5e30\u4fc2\u6570\u3092\u30af\u30a8\u30ea\u306b\u66f8\u304d\u8fbc\u3093\u3067\u7b97\u51fa__\n\n\n```{sql:postgreSQL(Redshift)}\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n SELECT estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n        Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, --lag\u95a2\u6570\u3067\u53d6\u5f97\u3059\u308b\u5168\u8aac\u660e\u5909\u6570\uff08\uff11\u65e5\u524d \u8aac\u660e\u5909\u6570\uff5e30\u65e5\u524d \u8aac\u660e\u5909\u6570\uff09\u306e\u5024\u304c\u3059\u3079\u3066\u683c\u7d0d\u3055\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u65e5\u4ed8\uff08\uff1d\u30e2\u30c7\u30eb\u63a8\u8a08\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u767a\u751f\u65e5\uff09\n        prediction_target_future_tbl.USER_ID,\n        prediction_target_future_tbl.SEIKAI,\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end as FRIEND_ACTION_COUTNT,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO,  \n FROM  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\n ON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n     AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n ORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n) SELECT *,\n          (10.5*FRIEND_ACTION_COUTNT_1_AGO + 3.2*FRIEND_ACTION_COUTNT_2_AGO + 2.1*FRIEND_ACTION_COUTNT_3_AGO  + 0.5*FRIEND_ACTION_COUTNT_4_AGO + 0.3*FRIEND_ACTION_COUTNT_5_AGO    --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n           + 0.2*FRIEND_ACTION_COUTNT_6_AGO + 12.3*FRIEND_ACTION_COUTNT_7_AGO + 20.4*FRIEND_ACTION_COUTNT_8_AGO + 2.9*FRIEND_ACTION_COUTNT_9_AGO + 1.2*FRIEND_ACTION_COUTNT_10_AGO --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n           + 0.01*FRIEND_ACTION_COUTNT_11_AGO + 0.35*FRIEND_ACTION_COUTNT_12_AGO + 0.22*FRIEND_ACTION_COUTNT_13_AGO + 12.3*FRIEND_ACTION_COUTNT_14_AGO) as score                 --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n  from temp\n  where CREATE_TIME = model_estimation_date  --\u3053\u3053\u304c\u5927\u4e8b\uff01\n  order by user_id, model_estimation_date --\u4e26\u3073\u66ff\u3048\u5217\u3092\u3001CREATE_TIME \u304b\u3089 model_estimation_date \u306b\u5909\u66f4\n;\n```\n\n\n## __R\u8a00\u8a9e\u30b3\u30fc\u30c9__\n#### __\u30e9\u30f3\u30c0\u30e0\u30fb\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u306b\u6295\u5165\u3057\u305f\u5834\u5408\u306e\u4e88\u6e2c\u7cbe\u5ea6\u306e\u63a8\u8a08__\n\n```{R:R}\n\nsetwd(\"C:/HirofumiYashima/Desktop/Logistic_regression_model\")\n# list.files()\n\n\n#===\u30e2\u30c7\u30eb\u691c\u8a3c\uff08\u4f5c\u6210\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7cbe\u5ea6\u3092\u3001\u30e9\u30f3\u30c0\u30e0\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\uff09\n# model\u306f\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3067\u4f5c\u6210\u6e08\u307f\n\ndata.test <- read.csv(\"random_test_data_a.csv\", header=T)\n\ntest.predict <- predict(model, data.test, type=\"response\")\n\n# summary(test.predict)\n# head(test.predict)\n\ntest.result <- data.frame(seikai = data.test$seikai, predicted_values = test.predict)\n# head(test.result)\n\n# L\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u5024 (predicted_values) \u304c 0.7\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001Daily Active \u3060\u3063\u305f\u3068\u5b9a\u7fa9\n\ntest.result$predicted_values[test.result$predicted_values >= 0.7] <- 1\ntest.result$predicted_values[test.result$predicted_values < 0.7] <- 0\n\n\n#head(test.result)\n#  seikai predicted_values\n#1      1                1\n#2      1                1\n#3      0                0\n#4      0                0\n#5      0                0\n#6      0                0\n\n# \uff13\uff10\u65e5\u5f8c Daily Active\u3060\u3063\u305f\u304b\u5426\u304b\u306e\u5b9f\u73fe\u5024\uff09\u3068\u3001\n# \uff13\uff10\u65e5\u5f8c Daily Active\u8a72\u5426\u306e\u4e88\u6e2c\u5024 \u3092\u7a81\u304d\u5408\u305b\u3066\u3001\u8a72\u5f53\uff08\uff11\uff09\u3001\u975e\u8a72\u5f53\uff08\uff10\uff09\uff12\u884c\uff12\u5217\u306e\u8868\u306b\u3057\u3066\u4e88\u6e2c\u6b63\u89e3\u7387 \u3092\u96c6\u8a08 \uff08\u5bfe\u89d2\u6210\u5206\u306e\u4ef6\u6570\u304c\u3001\u6b63\u89e3\u4ef6\u6570\uff09\n\ntable(test.result$seikai, test.result$predicted_values)\n\n\n# \u5b9f\u73fe\u5024\u304cDaily Active \u3067\u3001\u4e88\u6e2c\u7387\u3082Daily Active\u3068\u8a00\u3044\u5f53\u3066\u3066\u3044\u305f\u4ef6\u6570\n# head(subset(test.result, (seikai==1 & predicted_values ==1)))\n\n# \u5b9f\u73fe\u5024\u304c\u975eDaily Active\u3067\u3001\u4e88\u6e2c\u7387\u3082\u975eDaily Active\u3068\u8a00\u3044\u5f53\u3066\u3066\u3044\u305f\u4ef6\u6570\n# head(subset(test.result, (seikai==0 & predicted_values ==0)))\n\n# nrow(subset(test.result, (seikai==1 & predicted_values ==1)))\n# nrow(subset(test.result, (seikai==0 & predicted_values ==0)))\n\nCV_prediction_success_count <- nrow(subset(test.result, (seikai==1 & predicted_values ==1))) \nNonCV_prediction_success_count <- nrow(subset(test.result, (seikai==0 & predicted_values ==0))) \nnrow_test_dataset <- nrow(data.test)\n\nprediction_success_ratio <-  (CV_prediction_success_count + NonCV_prediction_success_count)/nrow_test_dataset\nmessage = paste(\"\u6b63\u89e3\u7387:\", (round(prediction_success_ratio, 4)*100), \"%\")\nprint(message)\n```\n\n___\n___\n\n\n## __\u3010 \u53c2\u8003 \u3011__\n\n### __\u30e9\u30f3\u30c0\u30e0\u65e5\u4ed8\u3067\u306f\u306a\u304f\u3001\u300e\u4e88\u6e2c\u5bfe\u8c61\u65e5\u300f \u3092 \u7279\u5b9a\u306e\u65e5\u4ed8 \u306b\u7d5e\u308a\u305f\u3044\u5834\u5408\u306f\u3001 \u5192\u982d\u306e With\u53e5\u3067\u751f\u6210\u3059\u308b\uff08\u3042\u308b\u7a2e\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u30fb\u30d3\u30e5\u30fc\uff09_prediction_target_future_tbl_ \u306e where\u53e5\u3092\u3001\u4ee5\u4e0b\u306b\u5909\u3048\u308b\u3060\u3051\u3067OK__ \n__\uff08\u30e2\u30c7\u30eb\u63a8\u8a08\u65e5\u306e\u65e5\u4ed8\u306f\u3001\u4e0a\u8a18\u300e\u4e88\u6e2c\u65e5\u300f\u306e 30\u65e5\u524d \u306b\u81ea\u52d5\u3067\u30bb\u30c3\u30c8\u3055\u308c\u308b\uff09__\n\n\n\n>```{sql:postgreSQL(Redshift)}\n> WITH prediction_target_future_tbl AS (\n> SELECT CREATE_TIME\n>       , USER_ID\n>       , DAILY_ACTIVE_FLAG AS SEIKAI\n> FROM USER_ACTION_LOG  \n> WHERE CREATE_TIME in ('2015-01-01', '2015-01-02', '2015-01-03', '2015-12-24', '2015-12-25', '2015-12-29', '2015-12-30', '2015-12-31')\n> ORDER BY RANDOM()\n> LIMIT 10000\n> ), temp AS (\n>```\n\n\n\n#### __\u306a\u304a\u3001\u300c\u7279\u5b9a\u306e\u65e5\u300d\u3092\u6307\u5b9a\u3059\u308b\u969b\u3001\u5e74(Year)\u306f\u554f\u308f\u305a\u306b\u3001\u6708(Month)\u3068\u65e5(Day)\u3060\u3051\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u304c\u4f7f\u3048\u308b\u3002__\n\n```\nWHERE (date_part(month, CREATE_TIME) = '1' and date_part(day, CREATE_TIME) in ('1', '2', '3')) \n     or (date_part(month, CREATE_TIME) = '12' and date_part(day, CREATE_TIME) in ('24', '25'))\n```\n\n___\n\n### __\u300e\u30e2\u30c7\u30eb\u63a8\u8a08\u65e5\u300f \u3092 \u7279\u5b9a\u306e\u65e5\u4ed8 \u306b\u7d5e\u308a\u305f\u3044\u5834\u5408\u306f\u3001 \u4e0a\u8a18\u306e where\u53e5 \u3067\u6307\u5b9a\u3059\u308b\u6761\u4ef6\u65e5\u3092\u3001\u300e\u30e2\u30c7\u30eb\u63a8\u8a08\u65e5\u306e30\u65e5\u5f8c\u300f\u306b\u3059\u308c\u3070\u3088\u3044__\n\n```\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME in (dateadd(day, 30,'2015-01-01'), dateadd(day, 30, '2015-01-02'), dateadd(day, 30, '2015-01-03'))\n```\n\n### __\u52a0\u3048\u3066\u3001_temp_ \uff08\u30a4\u30f3\u30e9\u30a4\u30f3\u30fb\u30d3\u30e5\u30fc\uff09\u306e\u65e5\u4ed8\u7bc4\u56f2\u3092\u3001\u4e88\u6e2c\u5bfe\u8c61\u65e5\u306e45\u65e5\u524d\uff5e31\u65e5\u524d\u306b\u3057\u3066\u3044\u305f\u3082\u306e\u3092\u300144\u65e5\u524d\uff5e30\u65e5\u524d\u306b\u5909\u66f4\u3059\u308b\u3002__\n\n\n```\nON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n   AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-44 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-30 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n), temp_2 as (\n```\n", "tags": ["SQL", "\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30", "\u30c7\u30fc\u30bf\u5206\u6790", "\u6642\u7cfb\u5217\u89e3\u6790", "R"]}