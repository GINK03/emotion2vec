{"tags": ["C++", "CMake", "OpenCL"], "context": " More than 1 year has passed since last update.CMake 3.1 \u3088\u308a\u3001OpenCL \u306e include path \u53ca\u3073 library path \u3092\u63a2\u7d22\u3057\u3066\u304f\u308c\u308b FindOpenCL.cmake \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f CMake \u3092\u4f7f\u3063\u3066 Makefile \u3092\u751f\u6210\u3057 OpenCL \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u74b0\u5883\n\n\n\n\n\n\n\n\n\nOS\nWindows 7 64bit\n\n\nGPU\nnVidia GeForce 750Ti\n\n\nCMake\n3.2.2\n\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\nVisual Studio 2013\n\n\n\n\nFindOpenCL.cmake \u306b\u3064\u3044\u3066\nOpenCL \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u63a2\u3059\u306b\u3042\u305f\u3063\u3066\u3001\u4f55\u304b\u3057\u3089\u74b0\u5883\u5909\u6570\u306a\u3069\u3067\u63a2\u7d22\u5148\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3068\u4e88\u60f3\u3067\u304d\u307e\u3059\u3002\u3068\u308a\u3042\u3048\u305a FindOpenCL.cmake \u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\nfind_path(OpenCL_INCLUDE_DIR\n  NAMES\n    CL/cl.h OpenCL/cl.h\n  PATHS\n    ENV \"PROGRAMFILES(X86)\"\n    ENV AMDAPPSDKROOT\n    ENV INTELOCLSDKROOT\n    ENV NVSDKCOMPUTE_ROOT\n    ENV CUDA_PATH\n    ENV ATISTREAMSDKROOT\n  PATH_SUFFIXES\n    include\n    OpenCL/common/inc\n    \"AMD APP/include\")\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30d9\u30f3\u30c0\u30fc\u5225\u306e\u74b0\u5883\u5909\u6570\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u4eca\u56de\u306f nVidia \u74b0\u5883\u3067\u3059\u306e\u3067 NVSDKCOMPUTE_ROOT \u3082\u3057\u304f\u306fCUDA_PATH \u3092\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3044\u3053\u3068\u304c\u5224\u308a\u307e\u3059\u3002\nFindOpenCL.cmake \u306f\u7d50\u679c\u3068\u3057\u3066\n\nOpenCL_FOUND\nOpenCL_INCLUDE_DIRS\nOpenCL_LIBRARIES\nOpenCL_VERSION_STRING\nOpenCL_VERSION_MAJOR\nOpenCL_VERSION_MINOR\n\n\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3088\u3063\u3066 CMakeLists.txt \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5229\u7528\u3059\u308c\u3070 OK \u3067\u3059\u3002\nfind_package(OpenCL REQUIRED)\ninclude_directories(${OpenCL_INCLUDE_DIRS})\nadd_executable(opencl_app src.cpp)\ntarget_link_libraries(opencl_app ${OpenCL_LIBRARIES})\n\n\n\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\n\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3088\u3046\u306a\u5358\u306b platform \u3068 device \u3092\u53d6\u5f97\u3059\u308b\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002\n\nmain.cpp\n#include <CL/cl.h>\n#include <iostream>\n\nint main(){\n    cl_uint num_platforms;\n    cl_platform_id platforms;\n    cl_int ret = clGetPlatformIDs(1, &platforms, &num_platforms);\n    if (ret != CL_SUCCESS){\n    std::cerr << \"Error: Can't get platform ids\" << std::endl;\n    return -1;\n    }\n\n    cl_device_id dev;\n    cl_uint num_devices;\n    ret = clGetDeviceIDs(platforms, CL_DEVICE_TYPE_GPU, 1, &dev, &num_devices);\n    if (ret != CL_SUCCESS){\n    std::cerr << \"Error: Can't get device ids\" << std::endl;\n    return -1;\n    }\n    return 0;\n}\n\n\n\u305d\u3057\u3066\u6b21\u306e CMakeLists.txt \u3092\u5229\u7528\u3057\u3066 Visual Studio \u306e sln \u3092\u751f\u6210\u3057\u307e\u3059\u3002\ncmake_minimum_required(VERSION 3.1)\n\nfind_package(OpenCL REQUIRED)\n\ninclude_directories(${OpenCL_INCLUDE_DIRS})\nadd_executable(opencl_test main.cpp)\ntarget_link_libraries(opencl_test ${OpenCL_LIBRARIES})\n\n\u5f8c\u306f GUI \u306a\u308a \u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089 CMake \u3092\u5b9f\u884c\u3059\u308c\u3070 OK \u3067\u3059\u3002\n\n\u307e\u3068\u3081\nCMake \u3092\u4f7f\u3063\u3066 OpenCL \u3092\u7528\u3044\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u7279\u306b GPU \u3092\u7528\u3044\u305f\u6f14\u7b97\u306a\u3069\u306f\u884c\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001OpenCL_VERSION_STRING \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u74b0\u5883\u306b\u5fdc\u3058\u3066\u7528\u3044\u308b kernel \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u3092\u5909\u66f4\u3059\u308b\u306a\u3069\u3001\u3088\u308a\u67d4\u8edf\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u304c\u53ef\u80fd\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u500b\u4eba\u7684\u306b\u306f\u3001\u898b\u3064\u304b\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d9\u30f3\u30c0\u30fc\u306a\u3069\u3082\u5b9a\u7fa9\u3057\u3066\u8fd4\u3057\u3066\u304f\u308c\u308b\u3068\u3001\u74b0\u5883\u4f9d\u5b58\u306e\u30b3\u30fc\u30c9\u3092 #ifdef \u3067\u5206\u3051\u308b\u306a\u3069\u3057\u3084\u3059\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n(OpenCL_LIBRARIES \u304b\u3089\u985e\u63a8\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c)\nCMake 3.1 \u3088\u308a\u3001OpenCL \u306e include path \u53ca\u3073 library path \u3092\u63a2\u7d22\u3057\u3066\u304f\u308c\u308b FindOpenCL.cmake \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f CMake \u3092\u4f7f\u3063\u3066 Makefile \u3092\u751f\u6210\u3057 OpenCL \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\n# \u74b0\u5883 #\n|            |                      |\n|------------|---------------------:|\n|         OS |      Windows 7 64bit |\n|        GPU | nVidia GeForce 750Ti |\n|      CMake |                3.2.2 |\n|  \u30b3\u30f3\u30d1\u30a4\u30e9 |   Visual Studio 2013 |\n\n# FindOpenCL.cmake \u306b\u3064\u3044\u3066 #\nOpenCL \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u63a2\u3059\u306b\u3042\u305f\u3063\u3066\u3001\u4f55\u304b\u3057\u3089\u74b0\u5883\u5909\u6570\u306a\u3069\u3067\u63a2\u7d22\u5148\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3068\u4e88\u60f3\u3067\u304d\u307e\u3059\u3002\u3068\u308a\u3042\u3048\u305a FindOpenCL.cmake \u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\n\n```cmake:\nfind_path(OpenCL_INCLUDE_DIR\n  NAMES\n    CL/cl.h OpenCL/cl.h\n  PATHS\n    ENV \"PROGRAMFILES(X86)\"\n    ENV AMDAPPSDKROOT\n    ENV INTELOCLSDKROOT\n    ENV NVSDKCOMPUTE_ROOT\n    ENV CUDA_PATH\n    ENV ATISTREAMSDKROOT\n  PATH_SUFFIXES\n    include\n    OpenCL/common/inc\n    \"AMD APP/include\")\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30d9\u30f3\u30c0\u30fc\u5225\u306e\u74b0\u5883\u5909\u6570\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u4eca\u56de\u306f nVidia \u74b0\u5883\u3067\u3059\u306e\u3067 ```NVSDKCOMPUTE_ROOT``` \u3082\u3057\u304f\u306f```CUDA_PATH``` \u3092\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3044\u3053\u3068\u304c\u5224\u308a\u307e\u3059\u3002\nFindOpenCL.cmake \u306f\u7d50\u679c\u3068\u3057\u3066\n\n- OpenCL_FOUND\n- OpenCL_INCLUDE_DIRS\n- OpenCL_LIBRARIES\n- OpenCL_VERSION_STRING\n- OpenCL_VERSION_MAJOR\n- OpenCL_VERSION_MINOR\n\n\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3088\u3063\u3066 CMakeLists.txt \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5229\u7528\u3059\u308c\u3070 OK \u3067\u3059\u3002\n\n```cmake:\nfind_package(OpenCL REQUIRED)\ninclude_directories(${OpenCL_INCLUDE_DIRS})\nadd_executable(opencl_app src.cpp)\ntarget_link_libraries(opencl_app ${OpenCL_LIBRARIES})\n```\n\n# \u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b #\n\n\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3088\u3046\u306a\u5358\u306b platform \u3068 device \u3092\u53d6\u5f97\u3059\u308b\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002\n\n```c++:main.cpp\n#include <CL/cl.h>\n#include <iostream>\n\nint main(){\n    cl_uint num_platforms;\n    cl_platform_id platforms;\n    cl_int ret = clGetPlatformIDs(1, &platforms, &num_platforms);\n    if (ret != CL_SUCCESS){\n\tstd::cerr << \"Error: Can't get platform ids\" << std::endl;\n\treturn -1;\n    }\n\n    cl_device_id dev;\n    cl_uint num_devices;\n    ret = clGetDeviceIDs(platforms, CL_DEVICE_TYPE_GPU, 1, &dev, &num_devices);\n    if (ret != CL_SUCCESS){\n\tstd::cerr << \"Error: Can't get device ids\" << std::endl;\n\treturn -1;\n    }\n    return 0;\n}\n```\n\n\u305d\u3057\u3066\u6b21\u306e CMakeLists.txt \u3092\u5229\u7528\u3057\u3066 Visual Studio \u306e sln \u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```cmake:\ncmake_minimum_required(VERSION 3.1)\n\nfind_package(OpenCL REQUIRED)\n\ninclude_directories(${OpenCL_INCLUDE_DIRS})\nadd_executable(opencl_test main.cpp)\ntarget_link_libraries(opencl_test ${OpenCL_LIBRARIES})\n```\n\n\u5f8c\u306f GUI \u306a\u308a \u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089 CMake \u3092\u5b9f\u884c\u3059\u308c\u3070 OK \u3067\u3059\u3002\n\n# \u307e\u3068\u3081 #\n\nCMake \u3092\u4f7f\u3063\u3066 OpenCL \u3092\u7528\u3044\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u7279\u306b GPU \u3092\u7528\u3044\u305f\u6f14\u7b97\u306a\u3069\u306f\u884c\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001OpenCL_VERSION_STRING \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u74b0\u5883\u306b\u5fdc\u3058\u3066\u7528\u3044\u308b kernel \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u3092\u5909\u66f4\u3059\u308b\u306a\u3069\u3001\u3088\u308a\u67d4\u8edf\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u304c\u53ef\u80fd\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u500b\u4eba\u7684\u306b\u306f\u3001\u898b\u3064\u304b\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d9\u30f3\u30c0\u30fc\u306a\u3069\u3082\u5b9a\u7fa9\u3057\u3066\u8fd4\u3057\u3066\u304f\u308c\u308b\u3068\u3001\u74b0\u5883\u4f9d\u5b58\u306e\u30b3\u30fc\u30c9\u3092 #ifdef \u3067\u5206\u3051\u308b\u306a\u3069\u3057\u3084\u3059\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n(OpenCL_LIBRARIES \u304b\u3089\u985e\u63a8\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c)\n"}