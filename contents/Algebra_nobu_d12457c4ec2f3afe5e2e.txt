{"context": "\u524d\u56de\u306e\u7d9a\u304d\nCustom widgets\n\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3092\u65e5\u672c\u8a9e\u3067\u3056\u3063\u304f\u308a\u3068\u307e\u3068\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3010\u30d0\u30fc\u30cb\u30f3\u30b0\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3011\n\nBurning_widget.py\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\n\nimport sys\nfrom PyQt5.QtWidgets import (QWidget, QSlider, QApplication, \n    QHBoxLayout, QVBoxLayout)\nfrom PyQt5.QtCore import QObject, Qt, pyqtSignal\nfrom PyQt5.QtGui import QPainter, QFont, QColor, QPen\n\n\nclass Communicate(QObject):\n\n    updateBW = pyqtSignal(int)\n\n\nclass BurningWidget(QWidget):\n\n    def __init__(self):      \n        super().__init__()\n\n        self.initUI()\n\n\n    def initUI(self):\n\n        # \u30d0\u30fc\u30cb\u30f3\u30b0\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u6700\u5c0f\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\n        self.setMinimumSize(1, 30)\n        # \u8272\u306e\u7740\u304f\u4f4d\u7f6e\u3092\u8a2d\u5b9a\n        self.value = 75\n        # \u76ee\u76db\u308a\u8a2d\u5b9a\n        self.num = [75, 150, 225, 300, 375, 450, 525, 600, 675]\n\n\n    def setValue(self, value):\n\n        self.value = value\n\n\n    def paintEvent(self, e):\n\n        qp = QPainter()\n        qp.begin(self)\n        self.drawWidget(qp)\n        qp.end()\n\n\n    def drawWidget(self, qp):\n\n        # \u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a\n        font = QFont('Serif', 7, QFont.Light)\n        qp.setFont(font)\n\n        # \u30d0\u30fc\u30cb\u30f3\u30b0\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u8a2d\u5b9a\n        size = self.size()\n        w = size.width()\n        h = size.height()\n\n        step = int(round(w / 10.0))\n\n        # \u8272\u4ed8\u3051\u3055\u308c\u308b\u5168\u4f53\u306e\u9818\u57df\n        till = int(((w / 750.0) * self.value))\n        # \u8d64\u3067\u8272\u4ed8\u3051\u3055\u308c\u308b\u9818\u57df\n        full = int(((w / 750.0) * 700))\n\n        # \u8d64\u3067\u8272\u4ed8\u3051\u3055\u308c\u308b\u9818\u57df\u306e\u8272\u8a2d\u5b9a\n        if self.value >= 700:\n\n            qp.setPen(QColor(255, 255, 255))\n            qp.setBrush(QColor(255, 255, 184))\n            qp.drawRect(0, 0, full, h)\n            qp.setPen(QColor(255, 175, 175))\n            qp.setBrush(QColor(255, 175, 175))\n            qp.drawRect(full, 0, till-full, h)\n\n        # \u8d64\u3067\u8272\u4ed8\u3051\u3055\u308c\u308b\u9818\u57df\u4ee5\u5916\u306e\u8272\u8a2d\u5b9a\n        else:\n\n            qp.setPen(QColor(255, 255, 255))\n            qp.setBrush(QColor(255, 255, 184))\n            qp.drawRect(0, 0, till, h)\n\n        # \u30d0\u30fc\u30cb\u30f3\u30b0\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u80cc\u666f\n        pen = QPen(QColor(20, 20, 20), 1, \n            Qt.SolidLine)\n\n        qp.setPen(pen)\n        qp.setBrush(Qt.NoBrush)\n        qp.drawRect(0, 0, w-1, h-1)\n\n        j = 0\n\n        # \u76ee\u76db\u308a\u3092\u66f8\u304f\n        for i in range(step, 10*step, step):\n\n            qp.drawLine(i, 0, i, 5)\n            metrics = qp.fontMetrics()\n            fw = metrics.width(str(self.num[j]))\n            qp.drawText(i-fw/2, h/2, str(self.num[j]))\n            j = j + 1\n\n\nclass Example(QWidget):\n\n    def __init__(self):\n        super().__init__()\n\n        self.initUI()\n\n\n    def initUI(self):      \n\n        sld = QSlider(Qt.Horizontal, self)\n        sld.setFocusPolicy(Qt.NoFocus)\n        sld.setRange(1, 750)\n        sld.setValue(75)\n        sld.setGeometry(30, 40, 150, 30)\n\n        self.c = Communicate()        \n        self.wid = BurningWidget()\n        self.c.updateBW[int].connect(self.wid.setValue)\n\n        # \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u79fb\u52d5\u3059\u308b\u3068changeValue\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n        sld.valueChanged[int].connect(self.changeValue)\n        hbox = QHBoxLayout()\n        hbox.addWidget(self.wid)\n        vbox = QVBoxLayout()\n        vbox.addStretch(1)\n        vbox.addLayout(hbox)\n        self.setLayout(vbox)\n\n        self.setGeometry(300, 300, 390, 210)\n        self.setWindowTitle('Burning widget')\n        self.show()\n\n\n    def changeValue(self, value):\n\n        # \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u73fe\u5728\u306e\u5024\u3092\u9001\u308b\n        self.c.updateBW.emit(value)        \n        self.wid.repaint()\n\n\nif __name__ == '__main__':\n\n    app = QApplication(sys.argv)\n    ex = Example()\n    sys.exit(app.exec_())\n\n\n\n\u6b21\u56de\u306fThe Tetris game\u3092\u3056\u3063\u304f\u308a\u8a66\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n[\u524d\u56de](http://qiita.com/Algebra_nobu/items/fec5c97bfbd6c3ff1f00)\u306e\u7d9a\u304d\n\n[Custom widgets](http://zetcode.com/gui/pyqt5/customwidgets/)\n\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3092\u65e5\u672c\u8a9e\u3067\u3056\u3063\u304f\u308a\u3068\u307e\u3068\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n#\u3010\u30d0\u30fc\u30cb\u30f3\u30b0\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3011\n```py3:Burning_widget.py\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\n\nimport sys\nfrom PyQt5.QtWidgets import (QWidget, QSlider, QApplication, \n    QHBoxLayout, QVBoxLayout)\nfrom PyQt5.QtCore import QObject, Qt, pyqtSignal\nfrom PyQt5.QtGui import QPainter, QFont, QColor, QPen\n\n\nclass Communicate(QObject):\n    \n    updateBW = pyqtSignal(int)\n\n\nclass BurningWidget(QWidget):\n  \n    def __init__(self):      \n        super().__init__()\n        \n        self.initUI()\n        \n        \n    def initUI(self):\n        \n        # \u30d0\u30fc\u30cb\u30f3\u30b0\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u6700\u5c0f\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\n        self.setMinimumSize(1, 30)\n        # \u8272\u306e\u7740\u304f\u4f4d\u7f6e\u3092\u8a2d\u5b9a\n        self.value = 75\n        # \u76ee\u76db\u308a\u8a2d\u5b9a\n        self.num = [75, 150, 225, 300, 375, 450, 525, 600, 675]\n\n\n    def setValue(self, value):\n\n        self.value = value\n\n\n    def paintEvent(self, e):\n      \n        qp = QPainter()\n        qp.begin(self)\n        self.drawWidget(qp)\n        qp.end()\n      \n      \n    def drawWidget(self, qp):\n      \n        # \u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a\n        font = QFont('Serif', 7, QFont.Light)\n        qp.setFont(font)\n\n        # \u30d0\u30fc\u30cb\u30f3\u30b0\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u8a2d\u5b9a\n        size = self.size()\n        w = size.width()\n        h = size.height()\n\n        step = int(round(w / 10.0))\n\n        # \u8272\u4ed8\u3051\u3055\u308c\u308b\u5168\u4f53\u306e\u9818\u57df\n        till = int(((w / 750.0) * self.value))\n        # \u8d64\u3067\u8272\u4ed8\u3051\u3055\u308c\u308b\u9818\u57df\n        full = int(((w / 750.0) * 700))\n\n        # \u8d64\u3067\u8272\u4ed8\u3051\u3055\u308c\u308b\u9818\u57df\u306e\u8272\u8a2d\u5b9a\n        if self.value >= 700:\n            \n            qp.setPen(QColor(255, 255, 255))\n            qp.setBrush(QColor(255, 255, 184))\n            qp.drawRect(0, 0, full, h)\n            qp.setPen(QColor(255, 175, 175))\n            qp.setBrush(QColor(255, 175, 175))\n            qp.drawRect(full, 0, till-full, h)\n            \n        # \u8d64\u3067\u8272\u4ed8\u3051\u3055\u308c\u308b\u9818\u57df\u4ee5\u5916\u306e\u8272\u8a2d\u5b9a\n        else:\n            \n            qp.setPen(QColor(255, 255, 255))\n            qp.setBrush(QColor(255, 255, 184))\n            qp.drawRect(0, 0, till, h)\n\n        # \u30d0\u30fc\u30cb\u30f3\u30b0\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u80cc\u666f\n        pen = QPen(QColor(20, 20, 20), 1, \n            Qt.SolidLine)\n            \n        qp.setPen(pen)\n        qp.setBrush(Qt.NoBrush)\n        qp.drawRect(0, 0, w-1, h-1)\n\n        j = 0\n\n        # \u76ee\u76db\u308a\u3092\u66f8\u304f\n        for i in range(step, 10*step, step):\n          \n            qp.drawLine(i, 0, i, 5)\n            metrics = qp.fontMetrics()\n            fw = metrics.width(str(self.num[j]))\n            qp.drawText(i-fw/2, h/2, str(self.num[j]))\n            j = j + 1\n            \n\nclass Example(QWidget):\n    \n    def __init__(self):\n        super().__init__()\n        \n        self.initUI()\n        \n        \n    def initUI(self):      \n\n        sld = QSlider(Qt.Horizontal, self)\n        sld.setFocusPolicy(Qt.NoFocus)\n        sld.setRange(1, 750)\n        sld.setValue(75)\n        sld.setGeometry(30, 40, 150, 30)\n\n        self.c = Communicate()        \n        self.wid = BurningWidget()\n        self.c.updateBW[int].connect(self.wid.setValue)\n\n        # \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u79fb\u52d5\u3059\u308b\u3068changeValue\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n        sld.valueChanged[int].connect(self.changeValue)\n        hbox = QHBoxLayout()\n        hbox.addWidget(self.wid)\n        vbox = QVBoxLayout()\n        vbox.addStretch(1)\n        vbox.addLayout(hbox)\n        self.setLayout(vbox)\n        \n        self.setGeometry(300, 300, 390, 210)\n        self.setWindowTitle('Burning widget')\n        self.show()\n        \n        \n    def changeValue(self, value):\n             \n        # \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u73fe\u5728\u306e\u5024\u3092\u9001\u308b\n        self.c.updateBW.emit(value)        \n        self.wid.repaint()\n        \n        \nif __name__ == '__main__':\n    \n    app = QApplication(sys.argv)\n    ex = Example()\n    sys.exit(app.exec_())\n```\n\n<img width=\"204\" alt=\"burning_widget.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/121997/50288293-ca0d-b83f-810a-754a46be1976.png\">\n\n\u6b21\u56de\u306f[The Tetris game](http://zetcode.com/gui/pyqt5/tetris/)\u3092\u3056\u3063\u304f\u308a\u8a66\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n", "tags": ["Python", "python3", "GUI", "PyQt5", "Windows8.1"]}