{"context": "JavaScript \u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3001C++ \u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u3067\u304d\u305f\u306e\u3067\u3001elisp \u3067\u3082\u66f8\u3044\u3066\u307f\u305f\u3002\n(defun calc-inner (exp tmp sum)\n  (if (null exp)\n      (+ sum tmp)\n    (let ((op (nth 0 exp))\n          (val (nth 1 exp))\n          (rest (nthcdr 2 exp)))\n      (pcase op\n        ((or `+ `-)\n             (calc-inner rest (funcall op val) (+ sum tmp)))\n        (t (let ((sign (if (> tmp 0) 1 -1)))\n             (calc-inner rest (+ (* tmp 10)\n                                 (* sign val)) sum)))))))\n\n(defun calc (exp)\n  (calc-inner (cdr exp) (car exp) 0))\n\n(defun dump (exp)\n  (mapconcat (lambda (term)\n               (pcase term\n                 ((or `+ `-)\n                  (format \" %s \" term))\n                 (`nil \"\")\n                 (t (number-to-string term)))) exp \"\"))\n\n(defun gen (src &optional acc)\n  (if (eq (length src) 1)\n      (princ (reverse (cons (car src) acc)))\n    (dolist (op '(+ - nil))\n      (gen (cdr src)\n           (cons op (cons (car src) acc))))))\n\n(with-temp-buffer\n  (let ((print-length nil)\n        (standard-output (current-buffer))\n        (standard-input (current-buffer))\n        (numbers (number-sequence 1 9))\n        result)\n    (gen numbers)\n    (goto-char (point-min))\n    (while (not (eobp))\n      (let ((exp (read)))\n        (when (eq (calc exp) 100)\n          (push (dump exp) result))))\n    result))\n\nEmacs \u306a\u3089\u3084\u3063\u3071\u308a\u30d0\u30c3\u30d5\u30a1\u3060\u3088\u306a\u30fc\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5b89\u76f4\u306b\u4e00\u6642\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3063\u3066\u5f0f\u306e\u751f\u6210\u3068\u8a55\u4fa1\u3092\u884c\u3063\u3066\u3044\u308b\u3002\u57fa\u672c\u7684\u306a\u30ed\u30b8\u30c3\u30af\u306f\u3069\u308c\u3082\u4e00\u7dd2\u3060\u3051\u3069\u3001elisp \u3060\u3068\u3060\u3044\u3076\u30ea\u30e9\u30c3\u30af\u30b9\u3057\u305f\u96f0\u56f2\u6c17\u3092\u611f\u3058\u308b\u306e\u306f\u6c17\u306e\u305b\u3044\u304b\u3057\u3089\u3002\n[JavaScript \u30d0\u30fc\u30b8\u30e7\u30f3](http://qiita.com/t-suwa/items/ec7ad2c72e0b97104b00)\u3068\u3001[C++ \u30d0\u30fc\u30b8\u30e7\u30f3](http://qiita.com/t-suwa/items/dff92b634205a6215d54)\u304c\u3067\u304d\u305f\u306e\u3067\u3001elisp \u3067\u3082\u66f8\u3044\u3066\u307f\u305f\u3002\n\n```el\n(defun calc-inner (exp tmp sum)\n  (if (null exp)\n      (+ sum tmp)\n    (let ((op (nth 0 exp))\n          (val (nth 1 exp))\n          (rest (nthcdr 2 exp)))\n      (pcase op\n        ((or `+ `-)\n             (calc-inner rest (funcall op val) (+ sum tmp)))\n        (t (let ((sign (if (> tmp 0) 1 -1)))\n             (calc-inner rest (+ (* tmp 10)\n                                 (* sign val)) sum)))))))\n\n(defun calc (exp)\n  (calc-inner (cdr exp) (car exp) 0))\n\n(defun dump (exp)\n  (mapconcat (lambda (term)\n               (pcase term\n                 ((or `+ `-)\n                  (format \" %s \" term))\n                 (`nil \"\")\n                 (t (number-to-string term)))) exp \"\"))\n\n(defun gen (src &optional acc)\n  (if (eq (length src) 1)\n      (princ (reverse (cons (car src) acc)))\n    (dolist (op '(+ - nil))\n      (gen (cdr src)\n           (cons op (cons (car src) acc))))))\n\n(with-temp-buffer\n  (let ((print-length nil)\n        (standard-output (current-buffer))\n        (standard-input (current-buffer))\n        (numbers (number-sequence 1 9))\n        result)\n    (gen numbers)\n    (goto-char (point-min))\n    (while (not (eobp))\n      (let ((exp (read)))\n        (when (eq (calc exp) 100)\n          (push (dump exp) result))))\n    result))\n```\n\nEmacs \u306a\u3089\u3084\u3063\u3071\u308a\u30d0\u30c3\u30d5\u30a1\u3060\u3088\u306a\u30fc\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5b89\u76f4\u306b\u4e00\u6642\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3063\u3066\u5f0f\u306e\u751f\u6210\u3068\u8a55\u4fa1\u3092\u884c\u3063\u3066\u3044\u308b\u3002\u57fa\u672c\u7684\u306a\u30ed\u30b8\u30c3\u30af\u306f\u3069\u308c\u3082\u4e00\u7dd2\u3060\u3051\u3069\u3001elisp \u3060\u3068\u3060\u3044\u3076\u30ea\u30e9\u30c3\u30af\u30b9\u3057\u305f\u96f0\u56f2\u6c17\u3092\u611f\u3058\u308b\u306e\u306f\u6c17\u306e\u305b\u3044\u304b\u3057\u3089\u3002\n", "tags": ["Emacs", "emacs-lisp", "\u30d7\u30ed\u30b0\u30e9\u30de\u5931\u683c"]}