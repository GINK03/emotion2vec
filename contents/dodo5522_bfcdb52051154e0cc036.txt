{"context": " More than 1 year has passed since last update.\u6587\u5b57\u5316\u3051\u89e3\u6d88\u6cd5\u3067\u7d39\u4ecb\u3057\u305fmatplotlib\u3067\u3059\u304c\u3001\u4f7f\u3044\u3053\u306a\u305b\u308b\u6c17\u304c\u5168\u304f\u3057\u306a\u3044\u306e\u304c\u6b63\u76f4\u306a\u3068\u3053\u308d\u3002\nplot\u95a2\u6570\u3060\u3051\u3067\u3082\u6307\u5b9a\u53ef\u80fd\u306a\u5f15\u6570\u306f\uff13\uff10\u4ee5\u4e0a\u304b\u306a\u3002\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot\nProperty    Description\nagg_filter  unknown\nalpha       float (0.0 transparent through 1.0 opaque)\nanimated    [True | False]\nantialiased or aa   [True | False]\naxes        an Axes instance\nclip_box    a matplotlib.transforms.Bbox instance\nclip_on     [True | False]\n...\n\n\u305d\u308c\u3067\u3044\u3066\u51fa\u6765\u4e0a\u304c\u308b\u306e\u306f\u3053\u3093\u306a\u30c0\u30b5\u3044\u30b0\u30e9\u30d5\u3002\n\n\u9811\u5f35\u308c\u3070\u7dba\u9e97\u306a\u30b0\u30e9\u30d5\u3082\u63cf\u753b\u3067\u304d\u308b\u307f\u305f\u3044\u306a\u3093\u3067\u3059\u3051\u3069\u3001\u3042\u307e\u308a\u5b66\u7fd2\u610f\u6b32\u304c\u6e67\u304d\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067seaborn\u306e\u51fa\u756a\u3067\u3059\u3002\nSeaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics.\n\n\u610f\u8a33\u3059\u308b\u3068\u3001matplotlib\u306ewrapper\u3068\u3057\u3066\u3088\u308a\u9ad8\u30ec\u30d9\u30eb\u306a\uff08\u62bd\u8c61\u5316\u3055\u308c\u305f\uff09\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u308b\u305d\u3046\u3067\u3059\u3002\nurllib\u306b\u5bfe\u3059\u308brequests\u30d1\u30c3\u30b1\u30fc\u30b8\u307f\u305f\u3044\u306a\u4f4d\u7f6e\u3065\u3051\u304b\u306a\u3002\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3082\u5927\u4e8b\u3067\u3059\u304c\u3001\u3053\u3093\u306aheatmap\u309210\u884c\u7a0b\u7a0b\u5ea6\u306e\u30b3\u30fc\u30c9\u3067\u63cf\u753b\u3067\u304d\u3066\u3057\u307e\u3046\u306a\u3089\u3001\u5b66\u7fd2\u610f\u6b32\u304c\u6e67\u3044\u3066\u304d\u307e\u3059\u3088\u306d\u3002\n\n\u3068\u306f\u8a00\u3048\u3001\u3044\u304d\u306a\u308aheatmap\u63cf\u304f\u3088\u3046\u306a\u5927\u305d\u3046\u306a\u30c7\u30fc\u30bf\u306f\u6301\u3061\u5408\u308f\u305b\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6211\u304c\u5bb6\u306e\u5bb6\u96fb\u88fd\u54c1\u306e\u6d88\u8cbb\u96fb\u529b\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n$ cat \u51b7\u8535\u5eab.csv \nNo.,DateTime,Watt,kWh\n    1,2015/03/02-23:25:44,58.9,0\n    2,2015/03/02-23:35:44,50.6,0.01\n    3,2015/03/02-23:45:44,50.3,0.02\n    4,2015/03/02-23:55:44,61.7,0.02\n    5,2015/03/03-00:05:44,72.4,0.03\n    6,2015/03/03-00:15:44,51.3,0.04\n    7,2015/03/03-00:25:44,47.7,0.05\n    8,2015/03/03-00:35:44,47.6,0.06\n    9,2015/03/03-00:45:44,20.2,0.06\n   10,2015/03/03-00:55:44,40.5,0.06\n\n\u3053\u308c\u306f\u30b5\u30f3\u30ef\u30b5\u30d7\u30e9\u30a4\u88fdTAP-TST10\u3067\u53d6\u5f97\u3057\u305f\u30ed\u30b0\u3067\u3059\u3002\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30ed\u30ae\u30f3\u30b0\u3067\u304d\u306a\u3044\u306e\u304c\u6b20\u70b9\u3067\u3059\u304c\u2026\u307e\u3041\u5b89\u3044\u306e\u3067\u3002\n\u3053\u308c\u3092pandas\u3067DataFrame\u5316\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\nimport pandas as pd\n\ndata = pd.read_csv(\"\u51b7\u8535\u5eab.csv\")\nprint(data)\n\n       No.             DateTime  Watt    kWh\n0        1  2015/03/02-23:25:44  58.9   0.00\n1        2  2015/03/02-23:35:44  50.6   0.01\n2        3  2015/03/02-23:45:44  50.3   0.02\n3        4  2015/03/02-23:55:44  61.7   0.02\n4        5  2015/03/03-00:05:44  72.4   0.03\n5        6  2015/03/03-00:15:44  51.3   0.04\n6        7  2015/03/03-00:25:44  47.7   0.05\n7        8  2015/03/03-00:35:44  47.6   0.06\n8        9  2015/03/03-00:45:44  20.2   0.06\n9       10  2015/03/03-00:55:44  40.5   0.06\n10      11  2015/03/03-01:05:44  59.4   0.07\n...\n[1441 rows x 4 columns]\n\nprint(data.DateTime)\n0       2015/03/02-23:25:44\n1       2015/03/02-23:35:44\n2       2015/03/02-23:45:44\n3       2015/03/02-23:55:44\n4       2015/03/03-00:05:44\n5       2015/03/03-00:15:44\n6       2015/03/03-00:25:44\n7       2015/03/03-00:35:44\n8       2015/03/03-00:45:44\n9       2015/03/03-00:55:44\n10      2015/03/03-01:05:44\n...\nName: DateTime, dtype: object\n\nprint(data['Watt'])\n0       58.9\n1       50.6\n2       50.3\n3       61.7\n4       72.4\n5       51.3\n6       47.7\n7       47.6\n8       20.2\n9       40.5\n10      59.4\nName: Watt, dtype: float64\n\n\u3053\u308c\u3092seaborn\u3067\u53ef\u8996\u5316\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\nimport seaborn as sns\nimport pandas as pd\n\ndata = pd.read_csv(\"\u51b7\u8535\u5eab.csv\")\n\n# \u6bd4\u8f03\u7684\u7c21\u5358\u306apointplot\u3092\u4f7f\u3046\nax = sns.pointplot(\n    x='DateTime',   # x\u8ef8\u306bDateTime\n    y='Watt',       # y\u8ef8\u306bWatt\n    data=data,      # DataFrame\u3092\u6307\u5b9a\n    markers=[''])   # data\u3092plot\u3059\u308b\u30de\u30fc\u30ab\u30fc\u3092\u975e\u8868\u793a\u306b\n\n# x\u8ef8\u65b9\u5411\u306e\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b\u306e\u30671\u65e5\u6bce\u306b\u30e9\u30d9\u30eb\u3092\u9593\u5f15\u304f\uff08\u30c7\u30fc\u30bf\u306f\u9593\u5f15\u304b\u306a\u3044\uff09\nxlabels = [datetime.split('-')[0]\n    if list(data.DateTime).index(datetime) % 144 is 0 else ''\n    for datetime in data.DateTime]\n\n# x\u8ef8\u30e9\u30d9\u30eb\u3092\u8a2d\u5b9a\uff06\u30e9\u30d9\u30eb\u8868\u793a\u309290\u5ea6\u56de\u8ee2\nax.set_xticklabels(xlabels, rotation='vertical')\n\n# png\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsns.plt.savefig('\u51b7\u8535\u5eab.png')\n\n\u30c7\u30fc\u30bf\u304c\u8a70\u307e\u308a\u3059\u304e\u3066\u307e\u3059\u306d\u2026\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3061\u3087\u3063\u3068\u9593\u5f15\u304d\u307e\u3059\u3002\ndata = pd.read_csv(\"\u51b7\u8535\u5eab.csv\")[:360]\n\n\u4eca\u5ea6\u306f\u3044\u3044\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u51b7\u8535\u5eab\u306e\u5b9a\u683c\u6d88\u8cbb\u96fb\u529b\u306f\u7d04110W\u3068\u8868\u8a18\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30d4\u30fc\u30af\u5024\u304c114.0W\u306a\u306e\u3092\u307f\u308b\u3068\u3001\u5927\u4f53\u30b9\u30da\u30c3\u30af\u901a\u308a\u3067\u3059\u306d\u3002\ndata.Watt.mean()\n44.557499999999997\n\ndata.Watt.min()\n2.2999999999999998\n\ndata.Watt.max()\n114.0\n\n\u6d88\u8cbb\u96fb\u529b\u91cf\u306f\uff1f\nimport seaborn as sns\nimport pandas as pd\n\ndata = pd.read_csv(\"\u51b7\u8535\u5eab.csv\")\n\n# \u6bd4\u8f03\u7684\u7c21\u5358\u306apointplot\u3092\u4f7f\u3046\nax = sns.pointplot(\n    x='DateTime',   # x\u8ef8\u306bDateTime\n    y='kWh',        # y\u8ef8\u306bkWh\uff08\u7a4d\u7b97\u6d88\u8cbb\u96fb\u529b\u91cf\uff09\n    data=data,      # DataFrame\u3092\u6307\u5b9a\n    markers=[''])   # data\u3092plot\u3059\u308b\u30de\u30fc\u30ab\u30fc\u3092\u975e\u8868\u793a\u306b\n\n# x\u8ef8\u65b9\u5411\u306e\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b\u306e\u30671\u65e5\u6bce\u306b\u30e9\u30d9\u30eb\u3092\u9593\u5f15\u304f\uff08\u30c7\u30fc\u30bf\u306f\u9593\u5f15\u304b\u306a\u3044\uff09\nxlabels = [datetime.split('-')[0]\n    if list(data.DateTime).index(datetime) % 144 is 0 else ''\n    for datetime in data.DateTime]\n\n# x\u8ef8\u30e9\u30d9\u30eb\u3092\u8a2d\u5b9a\uff06\u30e9\u30d9\u30eb\u8868\u793a\u309290\u5ea6\u56de\u8ee2\nax.set_xticklabels(xlabels, rotation='vertical')\n\n# png\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsns.plt.savefig('\u51b7\u8535\u5eabkWh.png')\n\n\n1kWh/\u65e5\u7a0b\u5ea6\u306e\u6d88\u8cbb\u96fb\u529b\u91cf\u306a\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\ndata.kWh.max() / 10.0\n1.0589999999999999\n\nseaborn\u306eAPI reference\u3084gallery\u3092\u898b\u308b\u3068\u3001\u30c6\u30f3\u30b7\u30e7\u30f3\u9ad8\u304f\u306a\u308a\u307e\u3059\u306d\u3002\n\u307e\u305a\u306f\u9053\u5177\u3092\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u3089\u306d\u3070\u3002\n\u6587\u5b57\u5316\u3051\u89e3\u6d88\u6cd5\u3067\u7d39\u4ecb\u3057\u305f[matplotlib](http://blog.rinka-blossom.com/matplotlibnohuontoshe-ding/)\u3067\u3059\u304c\u3001\u4f7f\u3044\u3053\u306a\u305b\u308b\u6c17\u304c\u5168\u304f\u3057\u306a\u3044\u306e\u304c\u6b63\u76f4\u306a\u3068\u3053\u308d\u3002\n\nplot\u95a2\u6570\u3060\u3051\u3067\u3082\u6307\u5b9a\u53ef\u80fd\u306a\u5f15\u6570\u306f\uff13\uff10\u4ee5\u4e0a\u304b\u306a\u3002\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot\n\n```\nProperty\tDescription\nagg_filter\tunknown\nalpha\t\tfloat (0.0 transparent through 1.0 opaque)\nanimated\t[True | False]\nantialiased or aa\t[True | False]\naxes\t\tan Axes instance\nclip_box\ta matplotlib.transforms.Bbox instance\nclip_on\t\t[True | False]\n...\n```\n\n\u305d\u308c\u3067\u3044\u3066\u51fa\u6765\u4e0a\u304c\u308b\u306e\u306f\u3053\u3093\u306a~~\u30c0\u30b5\u3044~~\u30b0\u30e9\u30d5\u3002\n![](https://farm6.staticflickr.com/5703/23439509492_98fdb9472a_z_d.jpg)\n\n\u9811\u5f35\u308c\u3070\u7dba\u9e97\u306a\u30b0\u30e9\u30d5\u3082\u63cf\u753b\u3067\u304d\u308b\u307f\u305f\u3044\u306a\u3093\u3067\u3059\u3051\u3069\u3001\u3042\u307e\u308a\u5b66\u7fd2\u610f\u6b32\u304c\u6e67\u304d\u307e\u305b\u3093\u3002\n\n\u305d\u3053\u3067[seaborn](http://stanford.edu/~mwaskom/software/seaborn/examples/index.html)\u306e\u51fa\u756a\u3067\u3059\u3002\n\n```\nSeaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics.\n```\n\n\u610f\u8a33\u3059\u308b\u3068\u3001matplotlib\u306ewrapper\u3068\u3057\u3066\u3088\u308a\u9ad8\u30ec\u30d9\u30eb\u306a\uff08\u62bd\u8c61\u5316\u3055\u308c\u305f\uff09\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u308b\u305d\u3046\u3067\u3059\u3002\n\nurllib\u306b\u5bfe\u3059\u308brequests\u30d1\u30c3\u30b1\u30fc\u30b8\u307f\u305f\u3044\u306a\u4f4d\u7f6e\u3065\u3051\u304b\u306a\u3002\n\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3082\u5927\u4e8b\u3067\u3059\u304c\u3001\u3053\u3093\u306aheatmap\u309210\u884c\u7a0b\u7a0b\u5ea6\u306e\u30b3\u30fc\u30c9\u3067\u63cf\u753b\u3067\u304d\u3066\u3057\u307e\u3046\u306a\u3089\u3001\u5b66\u7fd2\u610f\u6b32\u304c\u6e67\u3044\u3066\u304d\u307e\u3059\u3088\u306d\u3002\n\n![](http://stanford.edu/~mwaskom/software/seaborn/_images/structured_heatmap.png)\n\n\u3068\u306f\u8a00\u3048\u3001\u3044\u304d\u306a\u308aheatmap\u63cf\u304f\u3088\u3046\u306a\u5927\u305d\u3046\u306a\u30c7\u30fc\u30bf\u306f\u6301\u3061\u5408\u308f\u305b\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6211\u304c\u5bb6\u306e\u5bb6\u96fb\u88fd\u54c1\u306e\u6d88\u8cbb\u96fb\u529b\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\n$ cat \u51b7\u8535\u5eab.csv \nNo.,DateTime,Watt,kWh\n    1,2015/03/02-23:25:44,58.9,0\n    2,2015/03/02-23:35:44,50.6,0.01\n    3,2015/03/02-23:45:44,50.3,0.02\n    4,2015/03/02-23:55:44,61.7,0.02\n    5,2015/03/03-00:05:44,72.4,0.03\n    6,2015/03/03-00:15:44,51.3,0.04\n    7,2015/03/03-00:25:44,47.7,0.05\n    8,2015/03/03-00:35:44,47.6,0.06\n    9,2015/03/03-00:45:44,20.2,0.06\n   10,2015/03/03-00:55:44,40.5,0.06\n```\n\n\u3053\u308c\u306f\u30b5\u30f3\u30ef\u30b5\u30d7\u30e9\u30a4\u88fdTAP-TST10\u3067\u53d6\u5f97\u3057\u305f\u30ed\u30b0\u3067\u3059\u3002\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30ed\u30ae\u30f3\u30b0\u3067\u304d\u306a\u3044\u306e\u304c\u6b20\u70b9\u3067\u3059\u304c\u2026\u307e\u3041\u5b89\u3044\u306e\u3067\u3002\n\n\u3053\u308c\u3092pandas\u3067DataFrame\u5316\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```python\nimport pandas as pd\n\ndata = pd.read_csv(\"\u51b7\u8535\u5eab.csv\")\nprint(data)\n\n       No.             DateTime  Watt    kWh\n0        1  2015/03/02-23:25:44  58.9   0.00\n1        2  2015/03/02-23:35:44  50.6   0.01\n2        3  2015/03/02-23:45:44  50.3   0.02\n3        4  2015/03/02-23:55:44  61.7   0.02\n4        5  2015/03/03-00:05:44  72.4   0.03\n5        6  2015/03/03-00:15:44  51.3   0.04\n6        7  2015/03/03-00:25:44  47.7   0.05\n7        8  2015/03/03-00:35:44  47.6   0.06\n8        9  2015/03/03-00:45:44  20.2   0.06\n9       10  2015/03/03-00:55:44  40.5   0.06\n10      11  2015/03/03-01:05:44  59.4   0.07\n...\n[1441 rows x 4 columns]\n\nprint(data.DateTime)\n0       2015/03/02-23:25:44\n1       2015/03/02-23:35:44\n2       2015/03/02-23:45:44\n3       2015/03/02-23:55:44\n4       2015/03/03-00:05:44\n5       2015/03/03-00:15:44\n6       2015/03/03-00:25:44\n7       2015/03/03-00:35:44\n8       2015/03/03-00:45:44\n9       2015/03/03-00:55:44\n10      2015/03/03-01:05:44\n...\nName: DateTime, dtype: object\n\nprint(data['Watt'])\n0       58.9\n1       50.6\n2       50.3\n3       61.7\n4       72.4\n5       51.3\n6       47.7\n7       47.6\n8       20.2\n9       40.5\n10      59.4\nName: Watt, dtype: float64\n```\n\n\u3053\u308c\u3092seaborn\u3067\u53ef\u8996\u5316\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```python\nimport seaborn as sns\nimport pandas as pd\n\ndata = pd.read_csv(\"\u51b7\u8535\u5eab.csv\")\n\n# \u6bd4\u8f03\u7684\u7c21\u5358\u306apointplot\u3092\u4f7f\u3046\nax = sns.pointplot(\n    x='DateTime',   # x\u8ef8\u306bDateTime\n    y='Watt',       # y\u8ef8\u306bWatt\n    data=data,      # DataFrame\u3092\u6307\u5b9a\n    markers=[''])   # data\u3092plot\u3059\u308b\u30de\u30fc\u30ab\u30fc\u3092\u975e\u8868\u793a\u306b\n\n# x\u8ef8\u65b9\u5411\u306e\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b\u306e\u30671\u65e5\u6bce\u306b\u30e9\u30d9\u30eb\u3092\u9593\u5f15\u304f\uff08\u30c7\u30fc\u30bf\u306f\u9593\u5f15\u304b\u306a\u3044\uff09\nxlabels = [datetime.split('-')[0]\n    if list(data.DateTime).index(datetime) % 144 is 0 else ''\n    for datetime in data.DateTime]\n\n# x\u8ef8\u30e9\u30d9\u30eb\u3092\u8a2d\u5b9a\uff06\u30e9\u30d9\u30eb\u8868\u793a\u309290\u5ea6\u56de\u8ee2\nax.set_xticklabels(xlabels, rotation='vertical')\n\n# png\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsns.plt.savefig('\u51b7\u8535\u5eab.png')\n```\n\n\u30c7\u30fc\u30bf\u304c\u8a70\u307e\u308a\u3059\u304e\u3066\u307e\u3059\u306d\u2026\u3002\n![](https://farm2.staticflickr.com/1676/25041526554_79e0a9d504_z_d.jpg)\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3061\u3087\u3063\u3068\u9593\u5f15\u304d\u307e\u3059\u3002\n\n```python\ndata = pd.read_csv(\"\u51b7\u8535\u5eab.csv\")[:360]\n```\n\n\u4eca\u5ea6\u306f\u3044\u3044\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n![](https://farm2.staticflickr.com/1508/25041526534_c69459ff72_z_d.jpg)\n\n\u51b7\u8535\u5eab\u306e\u5b9a\u683c\u6d88\u8cbb\u96fb\u529b\u306f\u7d04110W\u3068\u8868\u8a18\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30d4\u30fc\u30af\u5024\u304c114.0W\u306a\u306e\u3092\u307f\u308b\u3068\u3001\u5927\u4f53\u30b9\u30da\u30c3\u30af\u901a\u308a\u3067\u3059\u306d\u3002\n\n```python\ndata.Watt.mean()\n44.557499999999997\n\ndata.Watt.min()\n2.2999999999999998\n\ndata.Watt.max()\n114.0\n```\n\n\u6d88\u8cbb\u96fb\u529b\u91cf\u306f\uff1f\n\n```python\nimport seaborn as sns\nimport pandas as pd\n\ndata = pd.read_csv(\"\u51b7\u8535\u5eab.csv\")\n\n# \u6bd4\u8f03\u7684\u7c21\u5358\u306apointplot\u3092\u4f7f\u3046\nax = sns.pointplot(\n    x='DateTime',   # x\u8ef8\u306bDateTime\n    y='kWh',        # y\u8ef8\u306bkWh\uff08\u7a4d\u7b97\u6d88\u8cbb\u96fb\u529b\u91cf\uff09\n    data=data,      # DataFrame\u3092\u6307\u5b9a\n    markers=[''])   # data\u3092plot\u3059\u308b\u30de\u30fc\u30ab\u30fc\u3092\u975e\u8868\u793a\u306b\n\n# x\u8ef8\u65b9\u5411\u306e\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b\u306e\u30671\u65e5\u6bce\u306b\u30e9\u30d9\u30eb\u3092\u9593\u5f15\u304f\uff08\u30c7\u30fc\u30bf\u306f\u9593\u5f15\u304b\u306a\u3044\uff09\nxlabels = [datetime.split('-')[0]\n    if list(data.DateTime).index(datetime) % 144 is 0 else ''\n    for datetime in data.DateTime]\n\n# x\u8ef8\u30e9\u30d9\u30eb\u3092\u8a2d\u5b9a\uff06\u30e9\u30d9\u30eb\u8868\u793a\u309290\u5ea6\u56de\u8ee2\nax.set_xticklabels(xlabels, rotation='vertical')\n\n# png\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsns.plt.savefig('\u51b7\u8535\u5eabkWh.png')\n```\n\n![](https://farm2.staticflickr.com/1522/25553923552_93778735e6_z_d.jpg)\n\n1kWh/\u65e5\u7a0b\u5ea6\u306e\u6d88\u8cbb\u96fb\u529b\u91cf\u306a\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n```python\ndata.kWh.max() / 10.0\n1.0589999999999999\n```\n\n[seaborn\u306eAPI reference](http://stanford.edu/~mwaskom/software/seaborn/api.html)\u3084[gallery](http://stanford.edu/~mwaskom/software/seaborn/examples/index.html)\u3092\u898b\u308b\u3068\u3001\u30c6\u30f3\u30b7\u30e7\u30f3\u9ad8\u304f\u306a\u308a\u307e\u3059\u306d\u3002\n\n\u307e\u305a\u306f\u9053\u5177\u3092\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u3089\u306d\u3070\u3002\n", "tags": ["Python", "seaborn", "matplotlib"]}