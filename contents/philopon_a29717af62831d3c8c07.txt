{"tags": ["Haskell", "ghc7.10.2", "optparse-applicative0.12.0.0"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u4ecaHaskell\u3067\u3044\u3061\u3070\u3093\u71b1\u3044\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u30d1\u30fc\u30b6\u3068\u3044\u3048\u3070\u3001optparse-applicative\u3067\u3059\u3088\u306d(\u8981\u51fa\u5178)\uff01\n\u4f55\u4e8b\u3082\u3064\u304b\u3063\u3066\u307f\u308b\u306e\u304c\u4e00\u756a\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3075\u308f\u3063\u3068\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff01\n\u6b21\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067import\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nimport Data.Monoid\nimport Data.Char\nimport Text.Read\nimport Options.Applicative\n\n\n\u5b9f\u88c5\n\n\u30c7\u30fc\u30bf\u578b\n\u6700\u521d\u306b\u60f3\u5b9a\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u8868\u73fe\u3059\u308b\u30c7\u30fc\u30bf\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\ndata Mode = Foo | Bar | Baz deriving (Show, Read, Enum, Bounded)\n\ndata Options = Options\n    { verbose        :: Bool\n    , limit          :: Int\n    , mode           :: Mode\n    , outputFileName :: String\n    , inputFiles     :: [FilePath]\n    } deriving Show\n\n\u3053\u306e\u304f\u3089\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u5165\u529b\u3060\u3051\u4f4d\u7f6e\u5f15\u6570\u3067\u53d6\u308b\u611f\u3058\u306e\u30b3\u30de\u30f3\u30c9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u30d8\u30eb\u30d7\u306b\u8868\u793a\u3055\u308c\u308b\u9806\u756a\u3068\u4e00\u81f4\u3059\u308b\u306e\u3067\u3001\u898b\u6804\u3048\u306e\u305f\u3081inputFiles\u3092\u6700\u5f8c\u306b\u3057\u307e\u3057\u305f\u3002\n\nParser\n\u3053\u308c\u3089\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3069\u306e\u3088\u3046\u306b\u53d7\u3051\u53d6\u308b\u304b\u3092\u5b9a\u7fa9\u3059\u308bParser\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u6700\u521d\u306fverbose\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u53d6\u308bParser\u3067\u3059\u3002\nverboseP :: Parser Bool\nverboseP = switch $ short 'v' <> long \"verbose\" <> help \"verbose mode\"\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\nswitch\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068True\u3001\u4e0e\u3048\u3089\u308c\u306a\u3044\u3068False\u3068\u306a\u308bParser\u3067\u3059\u3002\n\u3053\u306e\u5834\u5408\u3001-v\u307e\u305f\u306f--verbose\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068True\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\nswitch == flag False True\n\n\u306a\u306e\u3067\u3001Bool\u3067\u306f\u306a\u304f\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u3092\u4f7f\u7528\u3057\u305f\u3044\u6642\u306f\u3053\u3061\u3089\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\nMod\u306fMonoid\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067(<>)\u3067\u7e4b\u3044\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u3082\u3061\u308d\u3093\u5f8c\u8ff0\u306e\u3088\u3046\u306bmconcat\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u3055\u304f\u3055\u304f\u884c\u304d\u307e\u3057\u3087\u3046\u3002\u8aac\u660e\u306e\u90fd\u5408\u4e0a\u3001\u5148\u306blimitP\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\nlimitP :: Parser Int\nlimitP = option auto $ mconcat \n    [ short 'l', long \"limit\"\n    , help \"limit\"\n    , metavar \"INT\"\n    , value 0\n    , showDefault\n    ]\n\noption\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u751f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u5185\u90e8\u306e\u578b(\u3053\u306e\u5834\u5408\u306fInt)\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3059\u3002auto :: Read a => ReadM a\u306fRead\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5f93\u3063\u3066\u5909\u63db\u3057\u307e\u3059\u3002\n\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u305d\u306e\u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nvalue\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3059\u308b\u95a2\u6570\u3067\u3001showDefault\u304c\u30d8\u30eb\u30d7\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u305d\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u5fc5\u9808\u3068\u306a\u308a\u307e\u3059\u3002\nmetavar\u306f\u30d8\u30eb\u30d7\u4e2d\u3067\u306e\u30e1\u30bf\u5909\u6570\u3092\u6307\u5b9a\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\u3053\u306e\u5834\u5408\u3001\u30d8\u30eb\u30d7\u306e\u8868\u793a\u306f-l|--limit INT\u3068\u306a\u308a\u307e\u3059\u3002\noutputFileNameP :: Parser String\noutputFileNameP = strOption $ mconcat\n    [ short 'o', long \"output\"\n    , help \"output file\"\n    , metavar \"FILE\"\n    , value \"output.txt\"\n    , showDefaultWith id\n    ]\n\nshowDefault\u3060\u3068show\u95a2\u6570\u3092\u7528\u3044\u3066\u8868\u793a\u3059\u308b\u306e\u3067\u3001\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u8868\u793a\u3055\u305b\u306a\u3044\u305f\u3081\u306bshowDefaultWith\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\ninputFileP :: Parser FilePath\ninputFileP = strArgument $ mconcat\n    [ help \"input files\"\n    , metavar \"FILE\"\n    , action \"file\"\n    ]\n\ninputFilesP :: Parser [FilePath]\ninputFilesP = some inputFileP\n\nargument\u306f\u4f4d\u7f6e\u5f15\u6570\u3092\u4e00\u3064\u53d6\u308b\u95a2\u6570\u3067\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306b\u306foption\u3068\u540c\u69d8\u306bReadM a\u306e\u95a2\u6570\u3092\u53d6\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u6587\u5b57\u5217\u305d\u306e\u307e\u307e\u306a\u306e\u3067str\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nParser\u306fAlternative\u306a\u306e\u3067\u305d\u308c\u306bsome\u3092\u3064\u3051\u30661\u3064\u4ee5\u4e0a\u306e\u5f15\u6570\u3092\u53d6\u308b\u3088\u3046\u306b\u51fa\u6765\u307e\u3059\u3002\u3082\u3061\u308d\u30930\u500b\u4ee5\u4e0a\u306a\u3089many\u3067\u3059\u3002\ncompleter\u3067\u306f\u3069\u306e\u69d8\u306b\u88dc\u5b8c\u3092\u884c\u306a\u3046\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002String -> IO [String]\u3092wrap\u3057\u305fCompleter\u578b\u3092\u4e0e\u3048\u308b\u306e\u3067\u3059\u304c\u3001\u3044\u3061\u3044\u3061haskell\u3067\u66f8\u304f\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001bash\u306b\u304a\u307e\u304b\u305b\u3059\u308baction\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\naction\u306fbash\u306e\u7d44\u307f\u8fbc\u307f\u30b3\u30de\u30f3\u30c9compgen\u3092\u4f7f\u7528\u3057\u3066\u88dc\u5b8c\u5019\u88dc\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3001\u3053\u306e\u5834\u5408\u3067\u306fcompgen -A file -- \u5165\u529b\u306e\u7d50\u679c\u304c\u88dc\u5b8c\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\nmodeReader :: ReadM Mode\nmodeReader = str >>= \\s -> case s of\n    []   -> readerError \"no input\"\n    c:cs -> case readMaybe $ toUpper c : map toLower cs of\n        Nothing -> readerError $ \"unknown mode:\" ++ c:cs\n        Just m  -> return m\n\nmodeP :: Parser Mode\nmodeP = option modeReader $ mconcat\n    [ short 'm', long \"mode\"\n    , help \"mode\"\n    , value Foo\n    , showDefault\n    , metavar \"MODE\"\n    , completer $ listCompleter $ concatMap \n        ((\\s -> [s, map toLower s]) . show) [minBound .. maxBound :: Mode]\n    ]\n\n\u5f15\u6570\u3092\u5168\u3066\u5c0f\u6587\u5b57\u3067\u3082\u6307\u5b9a\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3001modeReader\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002ReadM\u306fMonad\u306a\u306e\u3067\u3053\u306e\u4f8b\u306e\u69d8\u306bRead\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306f\u5225\u306e\u51e6\u7406\u3092\u3059\u308b\u4e8b\u3082\u7c21\u5358\u306b\u51fa\u6765\u307e\u3059\u3002\n\u3055\u3066\u3001\u3053\u308c\u3089\u3092\u7e8f\u3081\u307e\u3057\u3087\u3046\u3002\noptionsP :: Parser Options\noptionsP = (<*>) helper $ \n    Options <$> verboseP <*> limitP <*> modeP <*> outputFileNameP <*> inputFilesP\n\nhelper\u306f\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e-h\u3068--help\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\nParserInfo\n\u3064\u3065\u3044\u3066info\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001ParserInfo\u3092\u69cb\u7bc9\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u306f\u3082\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u307f\u305f\u3044\u306a\u611f\u3058\u306a\u306e\u3067\u3055\u3089\u3063\u3068\u6d41\u3057\u307e\u3057\u3087\u3046\u3002\nmyParserInfo :: ParserInfo Options\nmyParserInfo = info optionsP $ mconcat \n    [ fullDesc\n    , progDesc \"test program.\"\n    , header \"header\"\n    , footer \"footer\"\n    , progDesc \"progDesc\"\n    ]\n\n\nfullDesc/briefDesc \u30d8\u30eb\u30d7\u306b\u8868\u793a\u3059\u308b\u60c5\u5831\u91cf\u3063\u307d\u3044\u3051\u3069\u73fe\u72b6\u4f7f\u308f\u308c\u3066\u306a\u3044\u3063\u307d\u3044\uff1f\nheader(Doc), footer(Doc), progDesc(Doc) \u305d\u308c\u305e\u308c\u306e\u4f4d\u7f6e\u306b\u8868\u793a\u3059\u308b\u8aac\u660e\u6587\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nfailureCode \u5f15\u6570\u306e\u30d1\u30fc\u30ba\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u8fd4\u3059\u7d42\u4e86\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nnoIntersperse \u3053\u308c\u3092\u4ed8\u3051\u3066\u304a\u304f\u3068\u3001\u4f4d\u7f6e\u5f15\u6570\u306e\u5f8c\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3068\u30d1\u30fc\u30ba\u306b\u5931\u6557\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u2026\u2026\u7684\u306a\u30cb\u30e5\u30a2\u30f3\u30b9\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u4e0a\u624b\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u672a\u78ba\u8a8d\u2026\u2026\n\n\nmain\n\u3042\u3068\u306f\u3053\u308c\u3092execParser\u306b\u4e0e\u3048\u308b\u3060\u3051\u3067\u3059\uff01\nmain :: IO ()\nmain = execParser myParserInfo >>= print\n\n\u307e\u305f\u3001customExecParser\u3092\u4f7f\u7528\u3059\u308c\u3070\u30aa\u30d7\u30b7\u30e7\u30f3\u30d1\u30fc\u30b6\u5168\u4f53\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u30d1\u30fc\u30ba\u306b\u5931\u6557\u3057\u305f\u6642\u306b\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\nmain = customExecParser (prefs showHelpOnError) myParserInfo >>= print\n\n\u306e\u69d8\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\u4f7f\u3063\u3066\u307f\u308b\n\u3055\u3042\u3001\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3001PATH\u306e\u901a\u3063\u305f\u3068\u3053\u308d\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff01\n\u30b3\u30fc\u30c9\u3092\u307e\u3068\u3081\u3066gist\u306b\u304a\u3044\u3066\u304a\u304d\u307e\u3059\u3002optparse.hs\n$ ghc -O2 -Wall optparse.hs\n$ cp optparse ~/bin\n\n\u7d9a\u3044\u3066\u3001bash\u88dc\u5b8c\u306e\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3061\u307e\u3059\u3002\u624b\u5143\u306eMac(OS X 10.9.4)\u306b\u3082\u3068\u304b\u3089\u5165\u3063\u3066\u3044\u308bbash(3.2.51(1)-release)\u3067\u306f\u4e0a\u624b\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001homebrew\u7b49\u3067\u65b0\u3057\u3044\u3082\u306e\u3092\u5165\u308c\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n$ bash --version\nGNU bash, \u30d0\u30fc\u30b8\u30e7\u30f3 4.3.18(1)-release (x86_64-apple-darwin13.3.0)\nCopyright (C) 2013 Free Software Foundation, Inc.\n\u30e9\u30a4\u30bb\u30f3\u30b9 GPLv3+: GNU GPL \u30d0\u30fc\u30b8\u30e7\u30f3 3 \u307e\u305f\u306f\u305d\u308c\u4ee5\u964d <http://gnu.org/licenses/gpl.html>\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n# \u88dc\u5b8c\n$ source <(optparse --bash-completion-script `which optparse`)\n\n\u3053\u308c\u3067\u88dc\u5b8c\u304c\u5229\u304f\u306e\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01\n$ optparse <TAB>\n--help                -o\n--limit               -v\n--mode                .DS_Store\n--output              cabal.sandbox.config\n--verbose             optparse\n-h                    optparse.hi\n-l                    optparse.hs\n-m                    optparse.o\n\n$ optparse --<TAB>\n--help     --limit    --mode     --output   --verbose\n\n$ optparse --mode <TAB>\nBar  Baz  Foo  bar  baz  foo\n\n\u307e\u305f\u3001\u5b9f\u884c\u7d50\u679c\u3082\u78ba\u304b\u3081\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n# argument\u304c\u4e00\u3064\u4ee5\u4e0a\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u7c21\u6613\u306eUsage\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\n$ optparse\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE]\n                [-o|--output FILE] FILE\n  progDesc\n\n# help\u8868\u793a\n$ optparse --help\nheader\n\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE]\n                [-o|--output FILE] FILE\n  progDesc\n\nAvailable options:\n  -h,--help                Show this help text\n  -v,--verbose             verbose mode\n  -l,--limit INT           limit (default: 0)\n  -m,--mode MODE           mode (default: Foo)\n  -o,--output FILE         output file (default: output.txt)\n  FILE                     input files\n\nfooter\n\n# \u6210\u529f\u4f8b\n$ optparse optparse.hs\nOptions {verbose = False, outputFileName = \"output.txt\", inputFiles = [\"optparse.hs\"], limit = 0, mode = Foo}\n\n$ optparse -l 3 -m baz -v -o qux optparse.hs optparse\nOptions {verbose = True, outputFileName = \"qux\", inputFiles = [\"optparse.hs\",\"optparse\"], limit = 3, mode = Baz}\n\n# \u5931\u6557\u4f8b\n$ optparse -l a\noption -l: cannot parse value `a'\n\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE]\n                [-o|--output FILE] FILE\n  progDesc\n\n$ optparse -m qux\noption -m: unknown mode: qux\n\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE]\n                [-o|--output FILE] FILE\n  progDesc\n\n\u5b8c\u74a7\u3067\u3059\u306d\uff01\n\n\u304a\u308f\u308a\u306b\n\u3055\u3089\u3063\u3068optparse-applicative\u306e\u3060\u3044\u305f\u3044\u306e\u6a5f\u80fd\u3092\u898b\u3066\u307e\u308f\u308a\u307e\u3057\u305f\u3002\n\u307b\u304b\u306b\u3082\u30b5\u30d6\u30b3\u30de\u30f3\u30c9(git\u30b3\u30de\u30f3\u30c9\u7b49\u306e\u69d8\u306a\u3082\u306e)\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\u306a\u3069\u3082\u3042\u308a\u307e\u3059\u306e\u3067\u5fc5\u8981\u306b\u5fdc\u3058\u3066github\u306eREADME.md\u3084haddock\u3092\u898b\u308c\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u304a\u307e\u3051\n\n\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u51e6\u7406\u306b\u5931\u6557\u3057\u305f\u6642\u306b\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3057\u305f\u3044\nOptions.Applicative.Extra\u3092\u4f7f\u3046\u3068\u30d1\u30fc\u30b6\u5168\u4f53\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\nmyParserPrefs :: ParserPrefs\nmyParserPrefs = defaultPrefs\n    { prefShowHelpOnError = True\n    }\n\nmain :: IO ()\nmain = customExecParser myParserPrefs myParserInfo >>= print\n\n$ optparse\nMissing: FILE\n\nheader\n\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE] [-o|--output FILE]\n           FILE\n  progDesc\n\nAvailable options:\n  -h,--help                Show this help text\n  -v,--verbose             verbose mode\n  -l,--limit INT           limit (default: 0)\n  -m,--mode MODE           mode (default: Foo)\n  -o,--output FILE         output file (default: output.txt)\n  FILE                     input files\n\nfooter\n\n\n\u53c2\u8003\n\nHackage: optparse-applicative: Utilities and combinators for parsing command line options \u3060\u3044\u305f\u3044Options.Applicative.Builder\u898b\u3066\u304a\u3051\u3070\u306a\u3093\u3068\u304b\u306a\u308b\nBash Completion \u00b7 pcapriotti/optparse-applicative Wiki\nBash Reference Manual: Programmable Completion Builtins\n\n\u306f\u3058\u3081\u306b\n===\n\u4ecaHaskell\u3067\u3044\u3061\u3070\u3093\u71b1\u3044\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u30d1\u30fc\u30b6\u3068\u3044\u3048\u3070\u3001optparse-applicative\u3067\u3059\u3088\u306d(\u8981\u51fa\u5178)\uff01\n\n\u4f55\u4e8b\u3082\u3064\u304b\u3063\u3066\u307f\u308b\u306e\u304c\u4e00\u756a\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3075\u308f\u3063\u3068\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff01\n\n\u6b21\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067import\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```hs\nimport Data.Monoid\nimport Data.Char\nimport Text.Read\nimport Options.Applicative\n```\n\n\u5b9f\u88c5\n===\n\u30c7\u30fc\u30bf\u578b\n---\n\u6700\u521d\u306b\u60f3\u5b9a\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u8868\u73fe\u3059\u308b\u30c7\u30fc\u30bf\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```hs\ndata Mode = Foo | Bar | Baz deriving (Show, Read, Enum, Bounded)\n\ndata Options = Options\n    { verbose        :: Bool\n    , limit          :: Int\n    , mode           :: Mode\n    , outputFileName :: String\n    , inputFiles     :: [FilePath]\n    } deriving Show\n```\n\n\u3053\u306e\u304f\u3089\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u5165\u529b\u3060\u3051\u4f4d\u7f6e\u5f15\u6570\u3067\u53d6\u308b\u611f\u3058\u306e\u30b3\u30de\u30f3\u30c9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u30d8\u30eb\u30d7\u306b\u8868\u793a\u3055\u308c\u308b\u9806\u756a\u3068\u4e00\u81f4\u3059\u308b\u306e\u3067\u3001\u898b\u6804\u3048\u306e\u305f\u3081`inputFiles`\u3092\u6700\u5f8c\u306b\u3057\u307e\u3057\u305f\u3002\n\nParser\n---\n\u3053\u308c\u3089\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3069\u306e\u3088\u3046\u306b\u53d7\u3051\u53d6\u308b\u304b\u3092\u5b9a\u7fa9\u3059\u308bParser\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u6700\u521d\u306fverbose\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u53d6\u308bParser\u3067\u3059\u3002\n\n```hs\nverboseP :: Parser Bool\nverboseP = switch $ short 'v' <> long \"verbose\" <> help \"verbose mode\"\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\n`switch`\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068True\u3001\u4e0e\u3048\u3089\u308c\u306a\u3044\u3068False\u3068\u306a\u308bParser\u3067\u3059\u3002\n\u3053\u306e\u5834\u5408\u3001-v\u307e\u305f\u306f--verbose\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068True\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\n\n```hs\nswitch == flag False True\n```\n\n\u306a\u306e\u3067\u3001`Bool`\u3067\u306f\u306a\u304f\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u3092\u4f7f\u7528\u3057\u305f\u3044\u6642\u306f\u3053\u3061\u3089\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n`Mod`\u306f`Monoid`\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067`(<>)`\u3067\u7e4b\u3044\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u3082\u3061\u308d\u3093\u5f8c\u8ff0\u306e\u3088\u3046\u306b`mconcat`\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n\u3055\u304f\u3055\u304f\u884c\u304d\u307e\u3057\u3087\u3046\u3002\u8aac\u660e\u306e\u90fd\u5408\u4e0a\u3001\u5148\u306b`limitP`\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\n\n```hs\nlimitP :: Parser Int\nlimitP = option auto $ mconcat \n    [ short 'l', long \"limit\"\n    , help \"limit\"\n    , metavar \"INT\"\n    , value 0\n    , showDefault\n    ]\n```\n\noption\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u751f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u5185\u90e8\u306e\u578b(\u3053\u306e\u5834\u5408\u306f`Int`)\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3059\u3002`auto :: Read a => ReadM a`\u306f`Read`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5f93\u3063\u3066\u5909\u63db\u3057\u307e\u3059\u3002\n\n\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u305d\u306e\u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n`value`\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3059\u308b\u95a2\u6570\u3067\u3001`showDefault`\u304c\u30d8\u30eb\u30d7\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u305d\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u5fc5\u9808\u3068\u306a\u308a\u307e\u3059\u3002\n`metavar`\u306f\u30d8\u30eb\u30d7\u4e2d\u3067\u306e\u30e1\u30bf\u5909\u6570\u3092\u6307\u5b9a\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n\u3053\u306e\u5834\u5408\u3001\u30d8\u30eb\u30d7\u306e\u8868\u793a\u306f`-l|--limit INT`\u3068\u306a\u308a\u307e\u3059\u3002\n\n```hs\noutputFileNameP :: Parser String\noutputFileNameP = strOption $ mconcat\n    [ short 'o', long \"output\"\n    , help \"output file\"\n    , metavar \"FILE\"\n    , value \"output.txt\"\n    , showDefaultWith id\n    ]\n```\n\n`showDefault`\u3060\u3068`show`\u95a2\u6570\u3092\u7528\u3044\u3066\u8868\u793a\u3059\u308b\u306e\u3067\u3001\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u8868\u793a\u3055\u305b\u306a\u3044\u305f\u3081\u306b`showDefaultWith`\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\n```hs\ninputFileP :: Parser FilePath\ninputFileP = strArgument $ mconcat\n    [ help \"input files\"\n    , metavar \"FILE\"\n    , action \"file\"\n    ]\n\ninputFilesP :: Parser [FilePath]\ninputFilesP = some inputFileP\n```\n\n`argument`\u306f\u4f4d\u7f6e\u5f15\u6570\u3092\u4e00\u3064\u53d6\u308b\u95a2\u6570\u3067\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306b\u306f`option`\u3068\u540c\u69d8\u306b`ReadM a`\u306e\u95a2\u6570\u3092\u53d6\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u6587\u5b57\u5217\u305d\u306e\u307e\u307e\u306a\u306e\u3067`str`\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n`Parser`\u306f`Alternative`\u306a\u306e\u3067\u305d\u308c\u306b`some`\u3092\u3064\u3051\u30661\u3064\u4ee5\u4e0a\u306e\u5f15\u6570\u3092\u53d6\u308b\u3088\u3046\u306b\u51fa\u6765\u307e\u3059\u3002\u3082\u3061\u308d\u30930\u500b\u4ee5\u4e0a\u306a\u3089`many`\u3067\u3059\u3002\n\n`completer`\u3067\u306f\u3069\u306e\u69d8\u306b\u88dc\u5b8c\u3092\u884c\u306a\u3046\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002`String -> IO [String]`\u3092wrap\u3057\u305f`Completer`\u578b\u3092\u4e0e\u3048\u308b\u306e\u3067\u3059\u304c\u3001\u3044\u3061\u3044\u3061haskell\u3067\u66f8\u304f\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001bash\u306b\u304a\u307e\u304b\u305b\u3059\u308b`action`\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n`action`\u306fbash\u306e\u7d44\u307f\u8fbc\u307f\u30b3\u30de\u30f3\u30c9`compgen`\u3092\u4f7f\u7528\u3057\u3066\u88dc\u5b8c\u5019\u88dc\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3001\u3053\u306e\u5834\u5408\u3067\u306f`compgen -A file -- \u5165\u529b`\u306e\u7d50\u679c\u304c\u88dc\u5b8c\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\n```hs\nmodeReader :: ReadM Mode\nmodeReader = str >>= \\s -> case s of\n    []   -> readerError \"no input\"\n    c:cs -> case readMaybe $ toUpper c : map toLower cs of\n        Nothing -> readerError $ \"unknown mode:\" ++ c:cs\n        Just m  -> return m\n\nmodeP :: Parser Mode\nmodeP = option modeReader $ mconcat\n    [ short 'm', long \"mode\"\n    , help \"mode\"\n    , value Foo\n    , showDefault\n    , metavar \"MODE\"\n    , completer $ listCompleter $ concatMap \n        ((\\s -> [s, map toLower s]) . show) [minBound .. maxBound :: Mode]\n    ]\n```\n\n\u5f15\u6570\u3092\u5168\u3066\u5c0f\u6587\u5b57\u3067\u3082\u6307\u5b9a\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3001`modeReader`\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002`ReadM`\u306f`Monad`\u306a\u306e\u3067\u3053\u306e\u4f8b\u306e\u69d8\u306b`Read`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306f\u5225\u306e\u51e6\u7406\u3092\u3059\u308b\u4e8b\u3082\u7c21\u5358\u306b\u51fa\u6765\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u3053\u308c\u3089\u3092\u7e8f\u3081\u307e\u3057\u3087\u3046\u3002\n\n```hs\noptionsP :: Parser Options\noptionsP = (<*>) helper $ \n    Options <$> verboseP <*> limitP <*> modeP <*> outputFileNameP <*> inputFilesP\n```\n\n`helper`\u306f\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e`-h`\u3068`--help`\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\nParserInfo\n---\n\u3064\u3065\u3044\u3066info\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001ParserInfo\u3092\u69cb\u7bc9\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u306f\u3082\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u307f\u305f\u3044\u306a\u611f\u3058\u306a\u306e\u3067\u3055\u3089\u3063\u3068\u6d41\u3057\u307e\u3057\u3087\u3046\u3002\n\n```hs\nmyParserInfo :: ParserInfo Options\nmyParserInfo = info optionsP $ mconcat \n    [ fullDesc\n    , progDesc \"test program.\"\n    , header \"header\"\n    , footer \"footer\"\n    , progDesc \"progDesc\"\n    ]\n```\n\n* fullDesc/briefDesc \u30d8\u30eb\u30d7\u306b\u8868\u793a\u3059\u308b\u60c5\u5831\u91cf\u3063\u307d\u3044\u3051\u3069\u73fe\u72b6\u4f7f\u308f\u308c\u3066\u306a\u3044\u3063\u307d\u3044\uff1f\n\n* header(Doc), footer(Doc), progDesc(Doc) \u305d\u308c\u305e\u308c\u306e\u4f4d\u7f6e\u306b\u8868\u793a\u3059\u308b\u8aac\u660e\u6587\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n* failureCode \u5f15\u6570\u306e\u30d1\u30fc\u30ba\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u8fd4\u3059\u7d42\u4e86\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n* noIntersperse \u3053\u308c\u3092\u4ed8\u3051\u3066\u304a\u304f\u3068\u3001\u4f4d\u7f6e\u5f15\u6570\u306e\u5f8c\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3068\u30d1\u30fc\u30ba\u306b\u5931\u6557\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u2026\u2026\u7684\u306a\u30cb\u30e5\u30a2\u30f3\u30b9\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u4e0a\u624b\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u672a\u78ba\u8a8d\u2026\u2026\n\nmain\n---\n\u3042\u3068\u306f\u3053\u308c\u3092`execParser`\u306b\u4e0e\u3048\u308b\u3060\u3051\u3067\u3059\uff01\n\n```hs\nmain :: IO ()\nmain = execParser myParserInfo >>= print\n```\n\n\u307e\u305f\u3001`customExecParser`\u3092\u4f7f\u7528\u3059\u308c\u3070\u30aa\u30d7\u30b7\u30e7\u30f3\u30d1\u30fc\u30b6\u5168\u4f53\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u30d1\u30fc\u30ba\u306b\u5931\u6557\u3057\u305f\u6642\u306b\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\n\n```hs\nmain = customExecParser (prefs showHelpOnError) myParserInfo >>= print\n```\n\n\u306e\u69d8\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\u4f7f\u3063\u3066\u307f\u308b\n===\n\u3055\u3042\u3001\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3001PATH\u306e\u901a\u3063\u305f\u3068\u3053\u308d\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff01\n\u30b3\u30fc\u30c9\u3092\u307e\u3068\u3081\u3066gist\u306b\u304a\u3044\u3066\u304a\u304d\u307e\u3059\u3002[optparse.hs](https://gist.github.com/philopon/1eaf571e69c2931cece5)\n\n```console:\n$ ghc -O2 -Wall optparse.hs\n$ cp optparse ~/bin\n```\n\n\u7d9a\u3044\u3066\u3001bash\u88dc\u5b8c\u306e\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3061\u307e\u3059\u3002\u624b\u5143\u306eMac(OS X 10.9.4)\u306b\u3082\u3068\u304b\u3089\u5165\u3063\u3066\u3044\u308bbash(3.2.51(1)-release)\u3067\u306f\u4e0a\u624b\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001homebrew\u7b49\u3067\u65b0\u3057\u3044\u3082\u306e\u3092\u5165\u308c\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```console:\n$ bash --version\nGNU bash, \u30d0\u30fc\u30b8\u30e7\u30f3 4.3.18(1)-release (x86_64-apple-darwin13.3.0)\nCopyright (C) 2013 Free Software Foundation, Inc.\n\u30e9\u30a4\u30bb\u30f3\u30b9 GPLv3+: GNU GPL \u30d0\u30fc\u30b8\u30e7\u30f3 3 \u307e\u305f\u306f\u305d\u308c\u4ee5\u964d <http://gnu.org/licenses/gpl.html>\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n# \u88dc\u5b8c\n$ source <(optparse --bash-completion-script `which optparse`)\n```\n\n\u3053\u308c\u3067\u88dc\u5b8c\u304c\u5229\u304f\u306e\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01\n\n```console:\n$ optparse <TAB>\n--help                -o\n--limit               -v\n--mode                .DS_Store\n--output              cabal.sandbox.config\n--verbose             optparse\n-h                    optparse.hi\n-l                    optparse.hs\n-m                    optparse.o\n\n$ optparse --<TAB>\n--help     --limit    --mode     --output   --verbose\n\n$ optparse --mode <TAB>\nBar  Baz  Foo  bar  baz  foo\n```\n\n\u307e\u305f\u3001\u5b9f\u884c\u7d50\u679c\u3082\u78ba\u304b\u3081\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```console:\n# argument\u304c\u4e00\u3064\u4ee5\u4e0a\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u7c21\u6613\u306eUsage\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\n$ optparse\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE]\n                [-o|--output FILE] FILE\n  progDesc\n\n# help\u8868\u793a\n$ optparse --help\nheader\n\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE]\n                [-o|--output FILE] FILE\n  progDesc\n\nAvailable options:\n  -h,--help                Show this help text\n  -v,--verbose             verbose mode\n  -l,--limit INT           limit (default: 0)\n  -m,--mode MODE           mode (default: Foo)\n  -o,--output FILE         output file (default: output.txt)\n  FILE                     input files\n\nfooter\n\n# \u6210\u529f\u4f8b\n$ optparse optparse.hs\nOptions {verbose = False, outputFileName = \"output.txt\", inputFiles = [\"optparse.hs\"], limit = 0, mode = Foo}\n\n$ optparse -l 3 -m baz -v -o qux optparse.hs optparse\nOptions {verbose = True, outputFileName = \"qux\", inputFiles = [\"optparse.hs\",\"optparse\"], limit = 3, mode = Baz}\n\n# \u5931\u6557\u4f8b\n$ optparse -l a\noption -l: cannot parse value `a'\n\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE]\n                [-o|--output FILE] FILE\n  progDesc\n\n$ optparse -m qux\noption -m: unknown mode: qux\n\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE]\n                [-o|--output FILE] FILE\n  progDesc\n```\n\n\u5b8c\u74a7\u3067\u3059\u306d\uff01\n\n\u304a\u308f\u308a\u306b\n===\n\u3055\u3089\u3063\u3068optparse-applicative\u306e\u3060\u3044\u305f\u3044\u306e\u6a5f\u80fd\u3092\u898b\u3066\u307e\u308f\u308a\u307e\u3057\u305f\u3002\n\u307b\u304b\u306b\u3082\u30b5\u30d6\u30b3\u30de\u30f3\u30c9(git\u30b3\u30de\u30f3\u30c9\u7b49\u306e\u69d8\u306a\u3082\u306e)\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\u306a\u3069\u3082\u3042\u308a\u307e\u3059\u306e\u3067\u5fc5\u8981\u306b\u5fdc\u3058\u3066github\u306eREADME.md\u3084haddock\u3092\u898b\u308c\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u304a\u307e\u3051\n==\n\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u51e6\u7406\u306b\u5931\u6557\u3057\u305f\u6642\u306b\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3057\u305f\u3044\n--\n[Options.Applicative.Extra](https://hackage.haskell.org/package/optparse-applicative-0.12.0.0/docs/Options-Applicative-Extra.html#t:ParserPrefs)\u3092\u4f7f\u3046\u3068\u30d1\u30fc\u30b6\u5168\u4f53\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\n```.hs\nmyParserPrefs :: ParserPrefs\nmyParserPrefs = defaultPrefs\n    { prefShowHelpOnError = True\n    }\n\nmain :: IO ()\nmain = customExecParser myParserPrefs myParserInfo >>= print\n```\n\n```console:\n$ optparse\nMissing: FILE\n\nheader\n\nUsage: optparse [-v|--verbose] [-l|--limit INT] [-m|--mode MODE] [-o|--output FILE]\n           FILE\n  progDesc\n\nAvailable options:\n  -h,--help                Show this help text\n  -v,--verbose             verbose mode\n  -l,--limit INT           limit (default: 0)\n  -m,--mode MODE           mode (default: Foo)\n  -o,--output FILE         output file (default: output.txt)\n  FILE                     input files\n\nfooter\n```\n\n\u53c2\u8003\n===\n* [Hackage: optparse-applicative: Utilities and combinators for parsing command line options](https://hackage.haskell.org/package/optparse-applicative) \u3060\u3044\u305f\u3044Options.Applicative.Builder\u898b\u3066\u304a\u3051\u3070\u306a\u3093\u3068\u304b\u306a\u308b\n\n* [Bash Completion \u00b7 pcapriotti/optparse-applicative Wiki](https://github.com/pcapriotti/optparse-applicative/wiki/Bash-Completion)\n\n* [Bash Reference Manual: Programmable Completion Builtins](http://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html)\n"}