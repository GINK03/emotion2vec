{"context": "Palallel.ForEach \u306b\u306f Func<T, Task> \u3092\u6e21\u305b\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u5185\u90e8\u3067\u975e\u540c\u671f\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u5834\u5408\u306f\u56f0\u3063\u3066\u3057\u307e\u3046\u3002Result \u3068\u308c\u3063\u3066\uff1f\nParallel.ForEach(Enumerable.Range(0, 10), new ParallelOptions { MaxDegreeOfParallelism = 3 },\n                 async i => // async void \u306b\u306a\u308b\u304b\u3089\u5b8c\u4e86\u3092\u5f85\u6a5f\u3057\u306a\u3044\uff01\n{\n    Console.WriteLine(await httpClient.GetStringAsync($\"http://sample.com/?hoge={i}\"));\n});\n\n\u540c\u6642\u5b9f\u884c\u6570\u306e\u5236\u5fa1\u304c\u4e0d\u8981\u3067\u3001\u6bd4\u8f03\u7684\u5c11\u91cf\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5bfe\u3057\u3066\u975e\u540c\u671f\u51e6\u7406\u3057\u3066\u5f85\u6a5f\u3059\u308b\u3060\u3051\u306a\u3089 Select \u3057\u3066 Task.WhenAll \u3067\u4e8b\u8db3\u308a\u308b\u306e\u3067\u3059\u304c\u3001\u540c\u6642\u5b9f\u884c\u6570\u3092\u5236\u5fa1\u3057\u305f\u304f\u306a\u3063\u3066\u304f\u308b\u3068 SemaphoreSlim \u3067\u72ec\u81ea\u306b\u8272\u3005\u3084\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u304f\u306a\u3063\u3066\u304d\u305f\u308a\u3067\u9762\u5012\uff08\u3053\u306e\u8fba\u308a\u306f\u8a18\u4e8b\u6700\u5f8c\u306e\u30ea\u30f3\u30af\u8a18\u4e8b\u3092\u53c2\u7167\uff09\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067 TPL Dataflow \u3092\u4f7f\u3046\u3068\u30b9\u30de\u30fc\u30c8\u306b\u89e3\u6c7a\u3067\u304d\u308b\u3089\u3057\u3044\u3051\u3069\u3001\u3044\u3064\u3082\u66f8\u304d\u65b9\u3092\u5fd8\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u30e1\u30e2\u3002\nNuGet \u304b\u3089 Microsoft.Tpl.Dataflow \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\nInstall-Package Microsoft.Tpl.Dataflow\n\nusing System.Threading.Tasks.Dataflow; \u3057\u3066\u4ee5\u4e0b\u306e\u69d8\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3002\npublic static class ParallelEx\n{\n    public static async Task ForEachAsync<T>(this IEnumerable<T> source, Func<T, Task> action, int maxDegreeOfParallelism)\n    {\n        var block = new ActionBlock<T>(action, new ExecutionDataflowBlockOptions\n        {\n            MaxDegreeOfParallelism = maxDegreeOfParallelism,\n        });\n\n        foreach (var item in source)\n        {\n            await block.SendAsync(item);\n        }\n\n        block.Complete(); // \u3053\u308c\u4ee5\u4e0a\u306f Send \u3057\u306a\u3044\u3088\u3001\u7684\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\n\n        await block.Completion; // \u5b8c\u4e86\u3092\u5f85\u6a5f\n    }\n}\n\nCancellationToken \u3092\u4f7f\u3046\u3068\u304b TaskScheduler \u3092\u6307\u5b9a\u3059\u308b\u3068\u304b\u304a\u597d\u307f\u3067\u3002\u79c1\u306f\u60c5\u5f31\u306a\u306e\u3067\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\nExecutionDataflowBlockOptions \u3054\u3068\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3068\u7121\u96e3\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3053\u3046\u3057\u3066\u304a\u304f\u3068\u3001\u547c\u3073\u51fa\u3057\u5074\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u305b\u308b\u3002\nawait Enumerable.Range(0, 10).ForEachAsync(async i =>\n{\n    Console.WriteLine(await httpClient.GetStringAsync($\"http://sample.com/?hoge={i}\"));\n\n}, maxDegreeOfParallelism: 3);\n\n\n\u95a2\u4fc2\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u8a18\u4e8b\n\n\u975e\u540c\u671f\u6642\u4ee3\u306eLINQ\nForEachAsync - \u975e\u540c\u671f\u306e\u5217\u6319\u306e\u65b9\u6cd5 Part2\n\u5c0f\u30cd\u30bf\uff1a\u91cd\u3044Select\u3092\u4f55\u3068\u304b\u3057\u3066\u307f\u305f\u3044\n\n`Palallel.ForEach` \u306b\u306f `Func<T, Task>` \u3092\u6e21\u305b\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u5185\u90e8\u3067\u975e\u540c\u671f\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u5834\u5408\u306f\u56f0\u3063\u3066\u3057\u307e\u3046\u3002~~`Result` \u3068\u308c\u3063\u3066\uff1f~~\n\n```csharp\nParallel.ForEach(Enumerable.Range(0, 10), new ParallelOptions { MaxDegreeOfParallelism = 3 },\n                 async i => // async void \u306b\u306a\u308b\u304b\u3089\u5b8c\u4e86\u3092\u5f85\u6a5f\u3057\u306a\u3044\uff01\n{\n    Console.WriteLine(await httpClient.GetStringAsync($\"http://sample.com/?hoge={i}\"));\n});\n```\n\n\u540c\u6642\u5b9f\u884c\u6570\u306e\u5236\u5fa1\u304c\u4e0d\u8981\u3067\u3001\u6bd4\u8f03\u7684\u5c11\u91cf\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5bfe\u3057\u3066\u975e\u540c\u671f\u51e6\u7406\u3057\u3066\u5f85\u6a5f\u3059\u308b\u3060\u3051\u306a\u3089 `Select` \u3057\u3066 `Task.WhenAll` \u3067\u4e8b\u8db3\u308a\u308b\u306e\u3067\u3059\u304c\u3001\u540c\u6642\u5b9f\u884c\u6570\u3092\u5236\u5fa1\u3057\u305f\u304f\u306a\u3063\u3066\u304f\u308b\u3068 `SemaphoreSlim` \u3067\u72ec\u81ea\u306b\u8272\u3005\u3084\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u304f\u306a\u3063\u3066\u304d\u305f\u308a\u3067\u9762\u5012\uff08\u3053\u306e\u8fba\u308a\u306f\u8a18\u4e8b\u6700\u5f8c\u306e\u30ea\u30f3\u30af\u8a18\u4e8b\u3092\u53c2\u7167\uff09\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067 TPL Dataflow \u3092\u4f7f\u3046\u3068\u30b9\u30de\u30fc\u30c8\u306b\u89e3\u6c7a\u3067\u304d\u308b\u3089\u3057\u3044\u3051\u3069\u3001\u3044\u3064\u3082\u66f8\u304d\u65b9\u3092\u5fd8\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u30e1\u30e2\u3002\n\nNuGet \u304b\u3089 Microsoft.Tpl.Dataflow \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\n```\nInstall-Package Microsoft.Tpl.Dataflow\n```\n\n`using System.Threading.Tasks.Dataflow;` \u3057\u3066\u4ee5\u4e0b\u306e\u69d8\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3002\n\n```csharp\npublic static class ParallelEx\n{\n    public static async Task ForEachAsync<T>(this IEnumerable<T> source, Func<T, Task> action, int maxDegreeOfParallelism)\n    {\n        var block = new ActionBlock<T>(action, new ExecutionDataflowBlockOptions\n        {\n            MaxDegreeOfParallelism = maxDegreeOfParallelism,\n        });\n\n        foreach (var item in source)\n        {\n            await block.SendAsync(item);\n        }\n\n        block.Complete(); // \u3053\u308c\u4ee5\u4e0a\u306f Send \u3057\u306a\u3044\u3088\u3001\u7684\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\n\n        await block.Completion; // \u5b8c\u4e86\u3092\u5f85\u6a5f\n    }\n}\n```\n\n`CancellationToken` \u3092\u4f7f\u3046\u3068\u304b `TaskScheduler` \u3092\u6307\u5b9a\u3059\u308b\u3068\u304b\u304a\u597d\u307f\u3067\u3002\u79c1\u306f\u60c5\u5f31\u306a\u306e\u3067\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n`ExecutionDataflowBlockOptions` \u3054\u3068\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3068\u7121\u96e3\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u3053\u3046\u3057\u3066\u304a\u304f\u3068\u3001\u547c\u3073\u51fa\u3057\u5074\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u305b\u308b\u3002\n\n```csharp\nawait Enumerable.Range(0, 10).ForEachAsync(async i =>\n{\n    Console.WriteLine(await httpClient.GetStringAsync($\"http://sample.com/?hoge={i}\"));\n\n}, maxDegreeOfParallelism: 3);\n```\n\n----\n\n\u95a2\u4fc2\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u8a18\u4e8b\n\n* [\u975e\u540c\u671f\u6642\u4ee3\u306eLINQ](http://neue.cc/2013/12/04_435.html)\n* [ForEachAsync - \u975e\u540c\u671f\u306e\u5217\u6319\u306e\u65b9\u6cd5 Part2](http://neue.cc/2014/03/14_448.html)\n* [\u5c0f\u30cd\u30bf\uff1a\u91cd\u3044Select\u3092\u4f55\u3068\u304b\u3057\u3066\u307f\u305f\u3044](http://qiita.com/NetSeed/items/052b5aee3941c2f7ae28)\n", "tags": ["C#", ".NET"]}