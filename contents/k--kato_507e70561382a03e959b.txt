{"context": " More than 1 year has passed since last update.\n\niciql\u3068\u306f\uff1f\n\u3000\n\u3000iciql\u306fJava\u306eO/R Mapping\u3067\uff0c\u7279\u5fb4\u306f\u8efd\u91cf\u306aSQL DSL(domain-specific language: \u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u8a00\u8a9e)\u3067\u3059\u3002\u3068\u3066\u3082\u53ef\u8aad\u6027\u304c\u9ad8\u3044\u6587\u6cd5\u304c\u9b45\u529b\u7684\u306a\u306e\u3067\uff0c\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3000\n\u3000\n\niciql SQL DSL\u306e\u4f8b\n\u3000iciql SQL DSL\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nIcliqlSampleMain.java\nSenryu t = new Senryu();\nList<Senryu> dbData =\n        db\n                .from(t)\n                .where(t.category).oneOf(\"09\", \"15\")\n                .and(t.sql).like(\"%SELECT%\")\n                .and(t.count).lessThan(1)\n                .orderByDesc(t.updatedate)\n                .orderBy(t.idSenryu)\n                .select();\n\n\n\u3000\n\u3000\u6b21\u306eSQL\u304c\u767a\u884c\u3055\u308c\u307e\u3059\u3002\n\nIcliqlSampleMain.sql\nSELECT *\nFROM   senryu\nWHERE  category IN( '09', '15' )\n   AND sql LIKE '%SELECT%'\n   AND count < 1\nORDER  BY updatedate DESC,\n          id_senryu \n\n\n\u3000\n\u3000\n\nFluent Interface\n\u3000iciql\u306e\u6587\u6cd5\u304c\u61d0\u304b\u3057\u3044\u958b\u767a\u8005\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u306f\uff0c2005\u5e74\u306bEric Evans\u3068Martin Fowler\u304c\u63d0\u5531\u3057\u305f\u300c\u6d41\u308c\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u300d(fluent interface)\u304c\u6e90\u6d41\u3067\uff0c2007\u5e74\u306bSeasar\u306eS2JDB\u306b\u63a1\u7528\u3055\u308c\u305f\u308a\uff0cRuby on Rails\u306eActive Record\uff0c\u6700\u8fd1\u3067\u306fScala\u306eSlick\u306a\u3069\uff0cWeb\u958b\u767a\u8005\u306b\u306f\u99b4\u67d3\u307f\u304c\u3042\u308b\u6587\u6cd5\u306e\u305f\u3081\u3067\u3059\u3002\n\u3000\n\u3000\n\nSQL DSL\u306e\u30e1\u30ea\u30c3\u30c8\n\u3000SQL DSL\u306e\u30e1\u30ea\u30c3\u30c8\u306f\uff0c\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5(type-safe)\u306e\u4e00\u8a00\u306b\u5c3d\u304d\u307e\u3059\u3002\n\u3000\n\u3000\u30c6\u30fc\u30d6\u30eb\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\u306b\uff0cJava\u3068SQL\u3068\u306e\u5883\u754c\u304c\u6587\u5b57\u5217\u306eORM\u3060\u3068\uff0c\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u307e\u3067\u6c17\u3065\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002SQL DSL\u3067\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\u306b\u8a18\u8ff0\u3059\u308b\u3068\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3067\u6c17\u3065\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3000\n\u3000\n\niciql\u306e\u30e1\u30ea\u30c3\u30c8\u3000\n\u3000iciql\u306e\u30e1\u30ea\u30c3\u30c8\u306f\uff0cjar\u30d5\u30a1\u30a4\u30eb\u3072\u3068\u3064\u3067\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n\njar\u30d5\u30a1\u30a4\u30eb\u3072\u3068\u3064\u3067\u8efd\u91cf\u52d5\u4f5c\uff08\u4f9d\u5b58\u306a\u3057\uff09\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u4e0d\u8981\nOSS\uff08\u6d3b\u767a\u3067\u306f\u306a\u3044\uff09\n\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\uff06\u6d41\u308c\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\nDB\u304b\u3089\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\u30c4\u30fc\u30eb\u3082\u3042\u308b\uff08\u516c\u5f0f\u30da\u30fc\u30b8\u306e\u89e3\u8aac\u306f\u53e4\u3044\uff09\n\u3000\n\n\n\u3000\u6d41\u308c\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\u306eJava ORM\u306f\uff0cS2JDBC\u3060\u3068Seasar\u4f9d\u5b58\uff0cjOOQ\u306f\u6709\u6599\u306a\u3069\uff0c\u305d\u308c\u305e\u308c\u504f\u308a\u304c\u3042\u308a\u307e\u3059\u3002iciql\u306f\u30d0\u30e9\u30f3\u30b9\u304c\u826f\u3044\u3067\u3059\u3002\n\u3000\n\u3000\n\nSQL DSL x Java 8 \u30e9\u30e0\u30c0\u5f0f\n\u3000\u30c6\u30fc\u30d6\u30eb\u30e2\u30c7\u30eb\u306eSQL DSL\u3068\u30e9\u30e0\u30c0\u5f0f\u3092\u7d44\u307f\u5408\u308f\u305b\u306f\uff0c\u30b3\u30fc\u30c9\u306e\u76f8\u6027\u304c\u826f\u304f\uff0c\u53ef\u8aad\u6027\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\n\u3000Java JDBC SQL\u5468\u308a\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u306b\u8208\u5473\u3092\u6301\u305f\u308c\u305f\u65b9\u306f\uff0cGitHub\u306b\u63b2\u8f09\u3057\u305ficiql x Java 8 \u30e9\u30e0\u30c0\u5f0f\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3082\u662f\u975e\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\nIcliqlSampleMain.java\npublic static void main(String[] args) {\n\n    Db db = null;\n\n    try {\n        /*==================================================\n         * Instantiating a Db\n         *==================================================*/\n        String url = \"jdbc:postgresql://localhost:5432/sqlsenryu\";\n        String user = \"sqlsenryu\";\n        String password = \"sqlsenryu\";\n        db = Db.open(url, user, password);\n\n        /*==================================================\n         * SQL DSL > Select Statements\n         *==================================================*/\n        Senryu t = new Senryu();\n        List<Senryu> dbData =\n                db\n                        .from(t)\n                        .where(t.category)\n                        .oneOf(\n                                CommonConst.Category.SQLite,\n                                CommonConst.Category.PostgreSQL)\n                        .and(t.sql).like(\"%SELECT%\")\n                        .and(t.count).lessThan(1)\n                        .orderByDesc(t.updatedate)\n                        .orderBy(t.idSenryu)\n                        .select();\n\n        /*==================================================\n         * Lambda Expression\n         *==================================================*/\n        dbData\n                .stream()\n                .filter(\n                        x -> x.category\n                                .equals(CommonConst.Category.PostgreSQL))\n                .forEach(y -> {\n                    print(y);\n                    update(y);\n                });\n\n        dbData\n                .stream()\n                .filter(x -> x.category.equals(CommonConst.Category.SQLite))\n                .forEach(y -> {\n                    print(y);\n                });\n\n        /*==================================================\n         * SQL DSL > Update Statements\n         *==================================================*/\n        db.updateAll(dbData);\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (db != null) db.close();\n    }\n}\n\nprivate static void update(Senryu senryu) {\n    senryu.updatedate = new Timestamp(System.currentTimeMillis());\n    senryu.count++;\n}\n\nprivate static void print(Senryu senryu) {\n    System.out.println(senryu.toString());\n}\n\n\n\n\u53c2\u8003\u8cc7\u6599\n\niciql, http://iciql.com/\n\nGitHub, iciql, https://github.com/gitblit/iciql\n\nSeasar2, \u300c\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5API\u300d, http://s2container.seasar.org/2.4/ja/s2jdbc_typesafe.html\n\njOOQ, http://www.jooq.org/\n\nSlick, http://slick.typesafe.com/\n\nMartin Fowler's Bliki,\u300c\u6d41\u308c\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u300d, http://capsctrl.que.jp/kdmsnr/wiki/bliki/?FluentInterface\n\n\n\n\u4ed8\u9332\n\niciql\u306e\u958b\u767a\u8005\u306f\uff0c\u3072\u3068\u3064\u306ewar\u30d5\u30a1\u30a4\u30eb\u30c7\u30d7\u30ed\u30a4\u3067Git\u30b5\u30fc\u30d0\u3092\u624b\u8efd\u306b\u69cb\u7bc9\u3067\u304d\u308b\"gitblit\"\u3092\u958b\u767a\u3057\u305fJames Moger\u6c0f\u3067\u3059\u30022011\u5e74\u306b\u516c\u958b\u3055\u308c\uff0c\u6700\u65b0\u30ea\u30ea\u30fc\u30b9\u306f2014-11-10\u306eVer.1.5.0\u3067\u3059\u3002\n\u3000\niciql\u306e\u8aad\u307f\u306f\u300c\u30a4\u30b7\u30ad\u30e5\u30a8\u30eb\u300d\u8aac\u3002 \u30a4\u30b7\u30ad\u30e5\u30a8\u30eb -> \u30b7\u30fc\u30af\u30a7\u30eb -> SQL\u3092\u6709\u529b\u8996\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\niciql\u306e\u30c6\u30fc\u30d6\u30eb\u30e2\u30c7\u30eb\u306f\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30fc\u30d6\u30eb\u3068\u30ab\u30e9\u30e0\u306e\u5c5e\u6027\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u30ec\u30b9\u304c\u826f\u3044\u3067\u3059\u3002\n\n\nSenryu.java\n@IQTable(\n        create = false,\n        name = \"senryu\",\n        memoryTable = false,\n        annotationsOnly = true,\n        inheritColumns = false)\npublic class Senryu {\n\n    @IQColumn(\n            primaryKey = true,\n            name = \"id_senryu\",\n            trim = false,\n            scale = 0,\n            length = 0,\n            nullable = false,\n            defaultValue = \"\",\n            autoIncrement = false)\n    public long idSenryu;\n\n    @IQColumn(\n            primaryKey = false,\n            name = \"category\",\n            trim = false,\n            scale = 0,\n            length = 2,\n            nullable = false,\n            defaultValue = \"\",\n            autoIncrement = false)\n    public String category;\n\n    public String toString() {\n        return String.format(\n                \"%d %s %s\",\n                idSenryu,\n                category);\n    }\n}\n\n\n\u3000\u2021SQL DSL\u4ee5\u524d\u306e\u4e16\u754c\u306f\u30fb\u30fb\u30fb\n\nPreparedStatementSampleMain.java\nStringBuffer  sql = new StringBuffer();\nsql.append(\"SELECT * \");\nsql.append(\"FROM   senryu \");\nsql.append(\"WHERE  category IN( ?, ? ) \");\nsql.append(\"   AND sql LIKE ? \");\nsql.append(\"   AND count < ? \");\nsql.append(\"ORDER  BY updatedate DESC, \");\nsql.append(\"          id_senryu\");\n\nPreparedStatement pstmt = conn.prepareStatement(sql);\n\npstmt.setString(1, \"09\");\npstmt.setString(2, \"15\");\npstmt.setString(3, \"%SELECT%\");\npstmt.setInt(4, 1);\n\n\n#iciql\u3068\u306f\uff1f\n\u3000\n\u3000iciql\u306fJava\u306eO/R Mapping\u3067\uff0c\u7279\u5fb4\u306f\u8efd\u91cf\u306aSQL DSL(domain-specific language: \u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u8a00\u8a9e)\u3067\u3059\u3002\u3068\u3066\u3082\u53ef\u8aad\u6027\u304c\u9ad8\u3044\u6587\u6cd5\u304c\u9b45\u529b\u7684\u306a\u306e\u3067\uff0c\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3000\n\u3000\n##iciql SQL DSL\u306e\u4f8b\n\n\u3000iciql SQL DSL\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java:IcliqlSampleMain.java\nSenryu t = new Senryu();\nList<Senryu> dbData =\n        db\n                .from(t)\n                .where(t.category).oneOf(\"09\", \"15\")\n                .and(t.sql).like(\"%SELECT%\")\n                .and(t.count).lessThan(1)\n                .orderByDesc(t.updatedate)\n                .orderBy(t.idSenryu)\n                .select();\n```\n\u3000\n\u3000\u6b21\u306eSQL\u304c\u767a\u884c\u3055\u308c\u307e\u3059\u3002\n\n```sql:IcliqlSampleMain.sql\nSELECT *\nFROM   senryu\nWHERE  category IN( '09', '15' )\n   AND sql LIKE '%SELECT%'\n   AND count < 1\nORDER  BY updatedate DESC,\n          id_senryu \n```\n\u3000\n\u3000\n##Fluent Interface\n\n\u3000iciql\u306e\u6587\u6cd5\u304c\u61d0\u304b\u3057\u3044\u958b\u767a\u8005\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u306f\uff0c2005\u5e74\u306bEric Evans\u3068Martin Fowler\u304c\u63d0\u5531\u3057\u305f\u300c\u6d41\u308c\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u300d(fluent interface)\u304c\u6e90\u6d41\u3067\uff0c2007\u5e74\u306bSeasar\u306eS2JDB\u306b\u63a1\u7528\u3055\u308c\u305f\u308a\uff0cRuby on Rails\u306eActive Record\uff0c\u6700\u8fd1\u3067\u306fScala\u306eSlick\u306a\u3069\uff0cWeb\u958b\u767a\u8005\u306b\u306f\u99b4\u67d3\u307f\u304c\u3042\u308b\u6587\u6cd5\u306e\u305f\u3081\u3067\u3059\u3002\n\u3000\n\u3000\n##SQL DSL\u306e\u30e1\u30ea\u30c3\u30c8\n\u3000SQL DSL\u306e\u30e1\u30ea\u30c3\u30c8\u306f\uff0c**\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5(type-safe)**\u306e\u4e00\u8a00\u306b\u5c3d\u304d\u307e\u3059\u3002\n\u3000\n\u3000\u30c6\u30fc\u30d6\u30eb\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\u306b\uff0cJava\u3068SQL\u3068\u306e\u5883\u754c\u304c\u6587\u5b57\u5217\u306eORM\u3060\u3068\uff0c**\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u307e\u3067\u6c17\u3065\u304b\u306a\u3044**\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002SQL DSL\u3067\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\u306b\u8a18\u8ff0\u3059\u308b\u3068\uff0c**\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3067\u6c17\u3065\u304f**\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\u3000\n\u3000\n##iciql\u306e\u30e1\u30ea\u30c3\u30c8\u3000\n\u3000iciql\u306e\u30e1\u30ea\u30c3\u30c8\u306f\uff0c**jar\u30d5\u30a1\u30a4\u30eb\u3072\u3068\u3064\u3067\u52d5\u4f5c\u3059\u308b**\u3053\u3068\u3067\u3059\u3002\n\n >0. jar\u30d5\u30a1\u30a4\u30eb\u3072\u3068\u3064\u3067\u8efd\u91cf\u52d5\u4f5c\uff08\u4f9d\u5b58\u306a\u3057\uff09\n >0. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u4e0d\u8981\n >0. OSS\uff08\u6d3b\u767a\u3067\u306f\u306a\u3044\uff09\n >0. \u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\uff06\u6d41\u308c\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n >0. DB\u304b\u3089\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\u30c4\u30fc\u30eb\u3082\u3042\u308b\uff08\u516c\u5f0f\u30da\u30fc\u30b8\u306e\u89e3\u8aac\u306f\u53e4\u3044\uff09\n\u3000\n\n\u3000\u6d41\u308c\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\u306eJava ORM\u306f\uff0cS2JDBC\u3060\u3068Seasar\u4f9d\u5b58\uff0cjOOQ\u306f\u6709\u6599\u306a\u3069\uff0c\u305d\u308c\u305e\u308c\u504f\u308a\u304c\u3042\u308a\u307e\u3059\u3002iciql\u306f\u30d0\u30e9\u30f3\u30b9\u304c\u826f\u3044\u3067\u3059\u3002\n\u3000\n\u3000\n#SQL DSL x Java 8 \u30e9\u30e0\u30c0\u5f0f\n\u3000\u30c6\u30fc\u30d6\u30eb\u30e2\u30c7\u30eb\u306eSQL DSL\u3068\u30e9\u30e0\u30c0\u5f0f\u3092\u7d44\u307f\u5408\u308f\u305b\u306f\uff0c\u30b3\u30fc\u30c9\u306e\u76f8\u6027\u304c\u826f\u304f\uff0c\u53ef\u8aad\u6027\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\n\n\u3000Java JDBC SQL\u5468\u308a\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u306b\u8208\u5473\u3092\u6301\u305f\u308c\u305f\u65b9\u306f\uff0cGitHub\u306b\u63b2\u8f09\u3057\u305f[iciql x Java 8 \u30e9\u30e0\u30c0\u5f0f\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/k--kato/iciql/blob/master/IciqlSample/src/com/iciql/sample/IcliqlSampleMain.java)\u3082\u662f\u975e\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n \n```java:IcliqlSampleMain.java\npublic static void main(String[] args) {\n\n    Db db = null;\n\n    try {\n        /*==================================================\n         * Instantiating a Db\n         *==================================================*/\n        String url = \"jdbc:postgresql://localhost:5432/sqlsenryu\";\n        String user = \"sqlsenryu\";\n        String password = \"sqlsenryu\";\n        db = Db.open(url, user, password);\n\n        /*==================================================\n         * SQL DSL > Select Statements\n         *==================================================*/\n        Senryu t = new Senryu();\n        List<Senryu> dbData =\n                db\n                        .from(t)\n                        .where(t.category)\n                        .oneOf(\n                                CommonConst.Category.SQLite,\n                                CommonConst.Category.PostgreSQL)\n                        .and(t.sql).like(\"%SELECT%\")\n                        .and(t.count).lessThan(1)\n                        .orderByDesc(t.updatedate)\n                        .orderBy(t.idSenryu)\n                        .select();\n\n        /*==================================================\n         * Lambda Expression\n         *==================================================*/\n        dbData\n                .stream()\n                .filter(\n                        x -> x.category\n                                .equals(CommonConst.Category.PostgreSQL))\n                .forEach(y -> {\n                    print(y);\n                    update(y);\n                });\n\n        dbData\n                .stream()\n                .filter(x -> x.category.equals(CommonConst.Category.SQLite))\n                .forEach(y -> {\n                    print(y);\n                });\n\n        /*==================================================\n         * SQL DSL > Update Statements\n         *==================================================*/\n        db.updateAll(dbData);\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (db != null) db.close();\n    }\n}\n\nprivate static void update(Senryu senryu) {\n    senryu.updatedate = new Timestamp(System.currentTimeMillis());\n    senryu.count++;\n}\n\nprivate static void print(Senryu senryu) {\n    System.out.println(senryu.toString());\n}\n```\n\n\n#\u53c2\u8003\u8cc7\u6599\n\n * iciql, [http://iciql.com/](http://iciql.com/)\n * GitHub, iciql, [https://github.com/gitblit/iciql](https://github.com/gitblit/iciql)\n * Seasar2, \u300c\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5API\u300d, [http://s2container.seasar.org/2.4/ja/s2jdbc_typesafe.html](http://s2container.seasar.org/2.4/ja/s2jdbc_typesafe.html)\n * jOOQ, [http://www.jooq.org/](http://www.jooq.org/)\n * Slick, [http://slick.typesafe.com/](http://slick.typesafe.com/)\n * Martin Fowler's Bliki,\u300c\u6d41\u308c\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u300d, [http://capsctrl.que.jp/kdmsnr/wiki/bliki/?FluentInterface](http://capsctrl.que.jp/kdmsnr/wiki/bliki/?FluentInterface)\n\n#\u4ed8\u9332\n\n * iciql\u306e\u958b\u767a\u8005\u306f\uff0c\u3072\u3068\u3064\u306ewar\u30d5\u30a1\u30a4\u30eb\u30c7\u30d7\u30ed\u30a4\u3067Git\u30b5\u30fc\u30d0\u3092\u624b\u8efd\u306b\u69cb\u7bc9\u3067\u304d\u308b\"gitblit\"\u3092\u958b\u767a\u3057\u305fJames Moger\u6c0f\u3067\u3059\u30022011\u5e74\u306b\u516c\u958b\u3055\u308c\uff0c\u6700\u65b0\u30ea\u30ea\u30fc\u30b9\u306f2014-11-10\u306eVer.1.5.0\u3067\u3059\u3002\n\u3000\n * iciql\u306e\u8aad\u307f\u306f\u300c\u30a4\u30b7\u30ad\u30e5\u30a8\u30eb\u300d\u8aac\u3002 \u30a4\u30b7\u30ad\u30e5\u30a8\u30eb -> \u30b7\u30fc\u30af\u30a7\u30eb -> SQL\u3092\u6709\u529b\u8996\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\n * iciql\u306e\u30c6\u30fc\u30d6\u30eb\u30e2\u30c7\u30eb\u306f\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30fc\u30d6\u30eb\u3068\u30ab\u30e9\u30e0\u306e\u5c5e\u6027\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u30ec\u30b9\u304c\u826f\u3044\u3067\u3059\u3002\n\n```sql:Senryu.java\n@IQTable(\n        create = false,\n        name = \"senryu\",\n        memoryTable = false,\n        annotationsOnly = true,\n        inheritColumns = false)\npublic class Senryu {\n\n    @IQColumn(\n            primaryKey = true,\n            name = \"id_senryu\",\n            trim = false,\n            scale = 0,\n            length = 0,\n            nullable = false,\n            defaultValue = \"\",\n            autoIncrement = false)\n    public long idSenryu;\n\n    @IQColumn(\n            primaryKey = false,\n            name = \"category\",\n            trim = false,\n            scale = 0,\n            length = 2,\n            nullable = false,\n            defaultValue = \"\",\n            autoIncrement = false)\n    public String category;\n\n    public String toString() {\n        return String.format(\n                \"%d %s %s\",\n                idSenryu,\n                category);\n    }\n}\n```\n\u3000\u2021SQL DSL\u4ee5\u524d\u306e\u4e16\u754c\u306f\u30fb\u30fb\u30fb\n\n```sql:PreparedStatementSampleMain.java\nStringBuffer  sql = new StringBuffer();\nsql.append(\"SELECT * \");\nsql.append(\"FROM   senryu \");\nsql.append(\"WHERE  category IN( ?, ? ) \");\nsql.append(\"   AND sql LIKE ? \");\nsql.append(\"   AND count < ? \");\nsql.append(\"ORDER  BY updatedate DESC, \");\nsql.append(\"          id_senryu\");\n\nPreparedStatement pstmt = conn.prepareStatement(sql);\n\npstmt.setString(1, \"09\");\npstmt.setString(2, \"15\");\npstmt.setString(3, \"%SELECT%\");\npstmt.setInt(4, 1);\n```\n", "tags": ["iciql1.5.0", "Java", "\u30e9\u30e0\u30c0\u5f0f", "java8"]}