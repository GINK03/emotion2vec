{"context": " More than 1 year has passed since last update.\u4e00\u6628\u65e5\u3001\u300c\u30d5\u30e9\u30af\u30bf\u30eb\u56f3\u5f62\u306e\u4e16\u754c\u3078\u306e\u3044\u3056\u306a\u3044\u300d(http://qiita.com/kiuyas/items/dee169b7fea69519a18d )\u3068\u3044\u3046\u304a\u984c\u3067Java\u7248\u306e\u300c\u30b3\u30c3\u30db\u66f2\u7dda\u300d\u3068\u300c\u30b7\u30a7\u30eb\u30d4\u30f3\u30b9\u30ad\u30fc\u306e\u30ae\u30e3\u30b9\u30b1\u30c3\u30c8\u300d\u3092\u63cf\u304f\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3001\u305d\u306e\u5f8c\u300c\u30d5\u30e9\u30af\u30bf\u30eb\u56f3\u5f62\u306e\u4e16\u754c\u3078\u306e\u3044\u3056\u306a\u3044(for C#)\u300d\u3068\u984c\u3057\u3066\u305d\u306eC#\u7248\u3092\u8f09\u305b\u307e\u3057\u305f\u304c\u3001\u7d9a\u304d\u307e\u3057\u3066\u305d\u306eVB.NET\u7248\u3092\u304a\u5c4a\u3051\u3057\u307e\u3059\u3002\n\n\u30b3\u30c3\u30db\u66f2\u7dda\n\nKochCurve\u3068\u3044\u3046\u540d\u524d\u3067Windows\u30d5\u30a9\u30fc\u30e0\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3001Form1.vb\u3092\u4ee5\u4e0b\u306e\u3082\u306e\u306b\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\nForm1.vb\nPublic Class Form1\n    Private Const PAI As Double = 3.1415926535893934\n\n    Private Const thetaOf60Degree As Double = 60 * PAI / 180\n\n    Private maxLevel As Integer = 4\n\n    Public Sub New()\n        InitializeComponent()\n\n        SetBounds(0, 0, 640, 480, BoundsSpecified.Size)\n        BackColor = Color.Black\n        Me.Text = \"\u30b3\u30c3\u30db\u66f2\u7dda\"\n    End Sub\n\n    Private Sub Form1_Paint(sender As System.Object, e As System.Windows.Forms.PaintEventArgs) Handles MyBase.Paint\n        DrawKochCurve(e.Graphics, 0, 100, 639, 100, 0)\n    End Sub\n\n    Private Sub DrawKochCurve(g As Graphics, x1 As Double, y1 As Double, x2 As Double, y2 As Double, level As Integer)\n        If level = maxLevel Then\n            g.DrawLine(Pens.Yellow, CInt(x1), CInt(479 - y1), CInt(x2), CInt(479 - y2))\n\n        Else\n            Dim vx As Double = (x2 - x1) / 3.0\n            Dim vy As Double = (y2 - y1) / 3.0\n\n            Dim xx1 As Double = x1 + vx\n            Dim yy1 As Double = y1 + vy\n\n            Dim v1 As Double() = Rotate(thetaOf60Degree, vx, vy)\n\n            Dim xx2 As Double = xx1 + v1(0)\n            Dim yy2 As Double = yy1 + v1(1)\n\n            Dim v2 As Double() = Rotate(-thetaOf60Degree, vx, vy)\n\n            Dim xx3 As Double = xx2 + v2(0)\n            Dim yy3 As Double = yy2 + v2(1)\n\n            level += 1\n\n            DrawKochCurve(g, x1, y1, xx1, yy1, level)\n            DrawKochCurve(g, xx1, yy1, xx2, yy2, level)\n            DrawKochCurve(g, xx2, yy2, xx3, yy3, level)\n            DrawKochCurve(g, xx3, yy3, x2, y2, level)\n\n        End If\n    End Sub\n\n    Private Function Rotate(theta As Double, x As Double, y As Double) As Double()\n        Dim sinTheta As Double = Math.Sin(theta)\n        Dim cosTheta As Double = Math.Cos(theta)\n        Dim x2 As Double = cosTheta * x - sinTheta * y\n        Dim y2 As Double = sinTheta * x + cosTheta * y\n        Return New Double() {x2, y2}\n    End Function\nEnd Class\n\n\n\n\u30b7\u30a7\u30eb\u30d4\u30f3\u30b9\u30ad\u30fc\u306e\u30ae\u30e3\u30b9\u30b1\u30c3\u30c8\n\nSierpinskiGasket\u3068\u3044\u3046\u540d\u524d\u3067Windows\u30d5\u30a9\u30fc\u30e0\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3001Form1.vb\u3092\u4ee5\u4e0b\u306e\u3082\u306e\u306b\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\nForm1.vb\nPublic Class Form1\n\n    Private maxLevel As Integer = 6\n\n    Public Sub New()\n        InitializeComponent()\n\n        SetBounds(0, 0, 640, 480, BoundsSpecified.Size)\n        BackColor = Color.Black\n        Me.Text = \"\u30b7\u30a7\u30eb\u30d4\u30f3\u30b9\u30ad\u30fc\u306e\u30ae\u30e3\u30b9\u30b1\u30c3\u30c8\"\n    End Sub\n    Private Sub Form1_Paint(sender As System.Object, e As System.Windows.Forms.PaintEventArgs) Handles MyBase.Paint\n        DrawSierpinskiGasket(e.Graphics, 319, 40, 30, 430, 609, 430, 0)\n    End Sub\n\n    Private Sub DrawSierpinskiGasket(g As Graphics, x1 As Double, y1 As Double, x2 As Double, y2 As Double, x3 As Double, y3 As Double, level As Integer)\n        If level = maxLevel Then\n            g.DrawLine(Pens.Lime, CInt(x1), CInt(y1), CInt(x2), CInt(y2))\n            g.DrawLine(Pens.Lime, CInt(x2), CInt(y2), CInt(x3), CInt(y3))\n            g.DrawLine(Pens.Lime, CInt(x3), CInt(y3), CInt(x1), CInt(y1))\n\n        Else\n            Dim xx1 As Double = (x1 + x2) / 2.0\n            Dim yy1 As Double = (y1 + y2) / 2.0\n            Dim xx2 As Double = (x2 + x3) / 2.0\n            Dim yy2 As Double = (y2 + y3) / 2.0\n            Dim xx3 As Double = (x3 + x1) / 2.0\n            Dim yy3 As Double = (y3 + y1) / 2.0\n\n            DrawSierpinskiGasket(g, x1, y1, xx1, yy1, xx3, yy3, level + 1)\n            DrawSierpinskiGasket(g, x2, y2, xx1, yy1, xx2, yy2, level + 1)\n            DrawSierpinskiGasket(g, x3, y3, xx3, yy3, xx2, yy2, level + 1)\n\n        End If\n    End Sub\nEnd Class\n\n\n\u6c17\u304c\u5411\u3044\u305f\u3089\u3001HTML5\u7248\u3068\u304b\u4f5c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3067\u306f\u3002\n\u4e00\u6628\u65e5\u3001\u300c\u30d5\u30e9\u30af\u30bf\u30eb\u56f3\u5f62\u306e\u4e16\u754c\u3078\u306e\u3044\u3056\u306a\u3044\u300d(http://qiita.com/kiuyas/items/dee169b7fea69519a18d )\u3068\u3044\u3046\u304a\u984c\u3067Java\u7248\u306e\u300c\u30b3\u30c3\u30db\u66f2\u7dda\u300d\u3068\u300c\u30b7\u30a7\u30eb\u30d4\u30f3\u30b9\u30ad\u30fc\u306e\u30ae\u30e3\u30b9\u30b1\u30c3\u30c8\u300d\u3092\u63cf\u304f\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3001\u305d\u306e\u5f8c\u300c\u30d5\u30e9\u30af\u30bf\u30eb\u56f3\u5f62\u306e\u4e16\u754c\u3078\u306e\u3044\u3056\u306a\u3044(for C#)\u300d\u3068\u984c\u3057\u3066\u305d\u306eC#\u7248\u3092\u8f09\u305b\u307e\u3057\u305f\u304c\u3001\u7d9a\u304d\u307e\u3057\u3066\u305d\u306eVB.NET\u7248\u3092\u304a\u5c4a\u3051\u3057\u307e\u3059\u3002\n\n##\u30b3\u30c3\u30db\u66f2\u7dda\n![KochCurveVB.PNG](https://qiita-image-store.s3.amazonaws.com/0/60722/9977ac7b-10f1-ec05-01d9-7cbf448e8f03.png)\n\nKochCurve\u3068\u3044\u3046\u540d\u524d\u3067Windows\u30d5\u30a9\u30fc\u30e0\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3001Form1.vb\u3092\u4ee5\u4e0b\u306e\u3082\u306e\u306b\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n```vbnet:Form1.vb\nPublic Class Form1\n    Private Const PAI As Double = 3.1415926535893934\n\n    Private Const thetaOf60Degree As Double = 60 * PAI / 180\n\n    Private maxLevel As Integer = 4\n\n    Public Sub New()\n        InitializeComponent()\n\n        SetBounds(0, 0, 640, 480, BoundsSpecified.Size)\n        BackColor = Color.Black\n        Me.Text = \"\u30b3\u30c3\u30db\u66f2\u7dda\"\n    End Sub\n\n    Private Sub Form1_Paint(sender As System.Object, e As System.Windows.Forms.PaintEventArgs) Handles MyBase.Paint\n        DrawKochCurve(e.Graphics, 0, 100, 639, 100, 0)\n    End Sub\n\n    Private Sub DrawKochCurve(g As Graphics, x1 As Double, y1 As Double, x2 As Double, y2 As Double, level As Integer)\n        If level = maxLevel Then\n            g.DrawLine(Pens.Yellow, CInt(x1), CInt(479 - y1), CInt(x2), CInt(479 - y2))\n\n        Else\n            Dim vx As Double = (x2 - x1) / 3.0\n            Dim vy As Double = (y2 - y1) / 3.0\n\n            Dim xx1 As Double = x1 + vx\n            Dim yy1 As Double = y1 + vy\n\n            Dim v1 As Double() = Rotate(thetaOf60Degree, vx, vy)\n\n            Dim xx2 As Double = xx1 + v1(0)\n            Dim yy2 As Double = yy1 + v1(1)\n\n            Dim v2 As Double() = Rotate(-thetaOf60Degree, vx, vy)\n\n            Dim xx3 As Double = xx2 + v2(0)\n            Dim yy3 As Double = yy2 + v2(1)\n\n            level += 1\n\n            DrawKochCurve(g, x1, y1, xx1, yy1, level)\n            DrawKochCurve(g, xx1, yy1, xx2, yy2, level)\n            DrawKochCurve(g, xx2, yy2, xx3, yy3, level)\n            DrawKochCurve(g, xx3, yy3, x2, y2, level)\n\n        End If\n    End Sub\n\n    Private Function Rotate(theta As Double, x As Double, y As Double) As Double()\n        Dim sinTheta As Double = Math.Sin(theta)\n        Dim cosTheta As Double = Math.Cos(theta)\n        Dim x2 As Double = cosTheta * x - sinTheta * y\n        Dim y2 As Double = sinTheta * x + cosTheta * y\n        Return New Double() {x2, y2}\n    End Function\nEnd Class\n```\n\n##\u30b7\u30a7\u30eb\u30d4\u30f3\u30b9\u30ad\u30fc\u306e\u30ae\u30e3\u30b9\u30b1\u30c3\u30c8\n![SierpinskiGasketVB.PNG](https://qiita-image-store.s3.amazonaws.com/0/60722/44372346-b860-52c8-aa0f-e1b72af67790.png)\n\nSierpinskiGasket\u3068\u3044\u3046\u540d\u524d\u3067Windows\u30d5\u30a9\u30fc\u30e0\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3001Form1.vb\u3092\u4ee5\u4e0b\u306e\u3082\u306e\u306b\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n```vbnet:Form1.vb\nPublic Class Form1\n\n    Private maxLevel As Integer = 6\n\n    Public Sub New()\n        InitializeComponent()\n\n        SetBounds(0, 0, 640, 480, BoundsSpecified.Size)\n        BackColor = Color.Black\n        Me.Text = \"\u30b7\u30a7\u30eb\u30d4\u30f3\u30b9\u30ad\u30fc\u306e\u30ae\u30e3\u30b9\u30b1\u30c3\u30c8\"\n    End Sub\n    Private Sub Form1_Paint(sender As System.Object, e As System.Windows.Forms.PaintEventArgs) Handles MyBase.Paint\n        DrawSierpinskiGasket(e.Graphics, 319, 40, 30, 430, 609, 430, 0)\n    End Sub\n\n    Private Sub DrawSierpinskiGasket(g As Graphics, x1 As Double, y1 As Double, x2 As Double, y2 As Double, x3 As Double, y3 As Double, level As Integer)\n        If level = maxLevel Then\n            g.DrawLine(Pens.Lime, CInt(x1), CInt(y1), CInt(x2), CInt(y2))\n            g.DrawLine(Pens.Lime, CInt(x2), CInt(y2), CInt(x3), CInt(y3))\n            g.DrawLine(Pens.Lime, CInt(x3), CInt(y3), CInt(x1), CInt(y1))\n\n        Else\n            Dim xx1 As Double = (x1 + x2) / 2.0\n            Dim yy1 As Double = (y1 + y2) / 2.0\n            Dim xx2 As Double = (x2 + x3) / 2.0\n            Dim yy2 As Double = (y2 + y3) / 2.0\n            Dim xx3 As Double = (x3 + x1) / 2.0\n            Dim yy3 As Double = (y3 + y1) / 2.0\n\n            DrawSierpinskiGasket(g, x1, y1, xx1, yy1, xx3, yy3, level + 1)\n            DrawSierpinskiGasket(g, x2, y2, xx1, yy1, xx2, yy2, level + 1)\n            DrawSierpinskiGasket(g, x3, y3, xx3, yy3, xx2, yy2, level + 1)\n\n        End If\n    End Sub\nEnd Class\n```\n\n\u6c17\u304c\u5411\u3044\u305f\u3089\u3001HTML5\u7248\u3068\u304b\u4f5c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3067\u306f\u3002\n", "tags": ["VB.Net", "\u30d5\u30e9\u30af\u30bf\u30eb\u56f3\u5f62"]}