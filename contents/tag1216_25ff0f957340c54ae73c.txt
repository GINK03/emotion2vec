{"context": " More than 1 year has passed since last update.\u65e2\u51fa\u3060\u3051\u3069\u300c1\u6642\u9593\u4ee5\u5185\u306b\u89e3\u3051\u306a\u3051\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30de\u5931\u683c\u3068\u306a\u3063\u3066\u3057\u307e\u30465\u3064\u306e\u554f\u984c\u304c\u8a71\u984c\u306b\u300d\u306e\u554f\u984c5\u3092Java8\u3067\u3084\u3063\u3066\u307f\u305f\u3002\n\n1,2,\u2026,9\u306e\u6570\u3092\u3053\u306e\u9806\u5e8f\u3067\u3001\u201d+\u201d\u3001\u201d-\u201c\u3001\u307e\u305f\u306f\u306a\u306a\u306b\u3082\u305b\u305a\u7d50\u679c\u304c100\u3068\u306a\u308b\u3042\u3089\u3086\u308b\u7d44\u5408\u305b\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8ff0\u305b\u3088\u3002\u4f8b\u3048\u3070\u30011 + 2 + 34 \u2013 5 + 67 \u2013 8 + 9 = 100\u3068\u306a\u308b\n\n    public static void main(String[] args) {\n        f(values(1, 9))\n                .filter(exp -> sum(exp) == 100)\n                .forEach(System.out::println);\n    }\n\n    /**\n     * s\u304b\u3089e\u307e\u3067\u306e\u9023\u7d9a\u3057\u305f\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\n     */\n    static List<Integer> values(int s, int e) {\n        return IntStream.rangeClosed(s, e)\n                .mapToObj(Integer::valueOf)\n                .collect(Collectors.toList());\n    }\n\n    /**\n     * \u6570\u5024\u306e\u30ea\u30b9\u30c8\u304b\u3089\u6570\u5f0f\u306e\u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u6210\u3057\u3066\u3001\u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u8fd4\u3059\u3002\n     * \u4f8b\uff1a[1, 2] -> [\"1 +2\",\u3000\"1 -2\",\u3000\"12\"]\n     */\n    static Stream<String> f(List<Integer> vals) {\n        if (vals.size() == 1) return Stream.of(vals.get(0).toString());\n        return Stream.of(\" +\", \" -\", \"\")\n                .flatMap(op -> f(vals.subList(1, vals.size()))\n                        .map(x -> vals.get(0).toString() + op + x)\n                );\n    }\n\n    /**\n     * \u5408\u8a08\u5024\u3092\u8fd4\u3059\u3002\n     */\n    static int sum(String exp) {\n        return Arrays.stream(exp.split(\" \"))\n                .mapToInt(Integer::parseInt)\n                .sum();\n    }\n\n\n\u7d50\u679c\n1 +2 +3 -4 +5 +6 +78 +9\n1 +2 +34 -5 +67 -8 +9\n1 +23 -4 +5 +6 +78 -9\n1 +23 -4 +56 +7 +8 +9\n12 +3 +4 +5 -6 -7 +89\n12 +3 -4 +5 +67 +8 +9\n12 -3 -4 +5 -6 +7 +89\n123 +4 -5 +67 -89\n123 +45 -67 +8 -9\n123 -4 -5 -6 -7 +8 -9\n123 -45 -67 +89\n\n\n\u65e2\u51fa\u3060\u3051\u3069\u300c[1\u6642\u9593\u4ee5\u5185\u306b\u89e3\u3051\u306a\u3051\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30de\u5931\u683c\u3068\u306a\u3063\u3066\u3057\u307e\u30465\u3064\u306e\u554f\u984c\u304c\u8a71\u984c\u306b](http://www.softantenna.com/wp/software/5-programming-problems/)\u300d\u306e\u554f\u984c5\u3092Java8\u3067\u3084\u3063\u3066\u307f\u305f\u3002\n\n> 1,2,\u2026,9\u306e\u6570\u3092\u3053\u306e\u9806\u5e8f\u3067\u3001\u201d+\u201d\u3001\u201d-\u201c\u3001\u307e\u305f\u306f\u306a\u306a\u306b\u3082\u305b\u305a\u7d50\u679c\u304c100\u3068\u306a\u308b\u3042\u3089\u3086\u308b\u7d44\u5408\u305b\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8ff0\u305b\u3088\u3002\u4f8b\u3048\u3070\u30011 + 2 + 34 \u2013 5 + 67 \u2013 8 + 9 = 100\u3068\u306a\u308b\n\n```java:\n    public static void main(String[] args) {\n        f(values(1, 9))\n                .filter(exp -> sum(exp) == 100)\n                .forEach(System.out::println);\n    }\n    \n    /**\n     * s\u304b\u3089e\u307e\u3067\u306e\u9023\u7d9a\u3057\u305f\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\n     */\n    static List<Integer> values(int s, int e) {\n        return IntStream.rangeClosed(s, e)\n                .mapToObj(Integer::valueOf)\n                .collect(Collectors.toList());\n    }\n    \n    /**\n     * \u6570\u5024\u306e\u30ea\u30b9\u30c8\u304b\u3089\u6570\u5f0f\u306e\u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u6210\u3057\u3066\u3001\u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u8fd4\u3059\u3002\n     * \u4f8b\uff1a[1, 2] -> [\"1 +2\",\u3000\"1 -2\",\u3000\"12\"]\n     */\n    static Stream<String> f(List<Integer> vals) {\n        if (vals.size() == 1) return Stream.of(vals.get(0).toString());\n        return Stream.of(\" +\", \" -\", \"\")\n                .flatMap(op -> f(vals.subList(1, vals.size()))\n                        .map(x -> vals.get(0).toString() + op + x)\n                );\n    }\n    \n    /**\n     * \u5408\u8a08\u5024\u3092\u8fd4\u3059\u3002\n     */\n    static int sum(String exp) {\n        return Arrays.stream(exp.split(\" \"))\n                .mapToInt(Integer::parseInt)\n                .sum();\n    }\n```\n\n```:\u7d50\u679c\n1 +2 +3 -4 +5 +6 +78 +9\n1 +2 +34 -5 +67 -8 +9\n1 +23 -4 +5 +6 +78 -9\n1 +23 -4 +56 +7 +8 +9\n12 +3 +4 +5 -6 -7 +89\n12 +3 -4 +5 +67 +8 +9\n12 -3 -4 +5 -6 +7 +89\n123 +4 -5 +67 -89\n123 +45 -67 +8 -9\n123 -4 -5 -6 -7 +8 -9\n123 -45 -67 +89\n```\n\n", "tags": ["java8", "Java"]}