{"context": "\n\n\u6982\u8981\n\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e C# \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5c11\u3057\u30a2\u30ec\u30f3\u30b8\u3057\u3066\u3001PowerShell \u304b\u3089\u5229\u7528\u3057\u3066\u307f\u305f\u3002\n\n\n[C#] \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u9ad8\u901f\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f (GetPixel/SetPixel vs BitmapData \u901f\u5ea6\u6bd4\u8f03) \u2013 \u7aef\u304f\u308c\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u5099\u5fd8\u9332:\uff09\n\n\n\n\n\n\n\u3053\u306e\u8a18\u4e8b\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068:\n\n\nC# \u3067\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\uff08\u30d0\u30a4\u30c8\u914d\u5217\uff09\u306b\u5909\u63db\u3057\u305f\u308a\u3001\u623b\u3057\u305f\u308a\u3059\u308b\u3002\n\nPowerShell \u3067\u3001\u753b\u50cf\u51e6\u7406\uff08\u30d4\u30af\u30bb\u30eb\u64cd\u4f5c\uff09\u3092\u884c\u3044\u3001\u52a0\u5de5\u3057\u305f\u753b\u50cf\u3092\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\n\nPowerShell \u3067\u624b\u8efd\u306b\u753b\u50cf\u51e6\u7406\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u3001\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\n\u30b3\u30fc\u30c9\n\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3068\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u9593\u306e\u5909\u63db\u51e6\u7406\u3092 C# \u3067\u8a18\u8ff0\u3059\u308b\n\n\u4eca\u56de\u306f\u3001\u4ee5\u4e0b\u306e 3 \u3064\u306e\u30af\u30e9\u30b9\u3092\u8a70\u3081\u8fbc\u3093\u3060\u540d\u524d\u7a7a\u9593 ImagingUtil \u3092\u7528\u610f\u3057\u305f\u3002\n\n\nRGBA \u306e\u30d0\u30a4\u30c8\u60c5\u5831\u3092\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e Pixel \u30af\u30e9\u30b9\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3068\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u9593\u306e\u5909\u63db\u51e6\u7406\u3092\u884c\u3046 BitmapConverter \u30af\u30e9\u30b9\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5f62\u5f0f ImageFormat \u3092\u6c7a\u5b9a\u3059\u308b ImageFormatResolver \u30af\u30e9\u30b9\n\n\n\n\nImagingUtil.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing System.Runtime.InteropServices;\n\nnamespace ImagingUtil\n{\n    // RGBA \u306e\u30d0\u30a4\u30c8\u60c5\u5831\u3092\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\n    public class Pixel\n    {\n        public byte a;\n        public byte r;\n        public byte g;\n        public byte b;\n\n        public Pixel(byte b, byte g, byte r, byte a)\n        {\n            this.a = a;\n            this.r = r;\n            this.g = g;\n            this.b = b;\n        }\n    }\n\n    // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3068\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u9593\u306e\u5909\u63db\u51e6\u7406\u3092\u884c\u3046\u30af\u30e9\u30b9\n    public static class BitmapConverter\n    {\n        // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\n        public static IList<Pixel> ConvertBitmapToPixels(Bitmap bitmap)\n        {\n            byte[] byteArray = null;\n            using (bitmap)\n            {\n                byteArray = ConvertBitmapToByteArray(bitmap);\n            }\n\n            var ret = new List<Pixel>();\n            for (var i = 0; i < byteArray.Length; i += 4)\n            {\n                ret.Add(new Pixel(byteArray[i + 0],\n                                  byteArray[i + 1],\n                                  byteArray[i + 2],\n                                  byteArray[i + 3]));\n            }\n            return ret;\n        }\n\n        // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3059\u308b\n        private static byte[] ConvertBitmapToByteArray(Bitmap bitmap)\n        {\n            var ret = new byte[bitmap.Width * bitmap.Height * 4];\n\n            BitmapData bitmapData = bitmap.LockBits(\n                    new Rectangle(0, 0, bitmap.Width, bitmap.Height),\n                    ImageLockMode.ReadOnly,\n                    PixelFormat.Format32bppArgb);\n\n            Marshal.Copy(bitmapData.Scan0, ret, 0, ret.Length);\n\n            bitmap.UnlockBits(bitmapData);\n\n            return ret;\n        }\n\n        // \u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u623b\u3059\n        public static Bitmap ConvertPixelsToBitmap(IList<Pixel> pixels, int width, int height)\n        {\n            var byteArray = new byte[width * height * 4];\n            var index = 0;\n            foreach (var pixel in pixels)\n            {\n                byteArray[index++] = pixel.b;\n                byteArray[index++] = pixel.g;\n                byteArray[index++] = pixel.r;\n                byteArray[index++] = pixel.a;\n            }\n            return ConvertByteArrayToBitmap(byteArray, width, height);\n        }\n\n        // \u30d0\u30a4\u30c8\u914d\u5217\u3092\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u623b\u3059\n        private static Bitmap ConvertByteArrayToBitmap(byte[] byteArray, int width, int height)\n        {\n            Bitmap ret = new Bitmap(width, height);\n\n            BitmapData bitmapData = ret.LockBits(\n                    new Rectangle(0, 0, ret.Width, ret.Height),\n                    ImageLockMode.ReadWrite,\n                    PixelFormat.Format32bppArgb);\n\n            Marshal.Copy(byteArray, 0, bitmapData.Scan0, byteArray.Length);\n\n            ret.UnlockBits(bitmapData);\n\n            return ret;\n        }\n    }\n\n    // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5f62\u5f0f ImageFormat \u3092\u6c7a\u5b9a\u3059\u308b\u30af\u30e9\u30b9\n    public static class ImageFormatResolver\n    {\n        // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u304b\u3089\u6c7a\u5b9a\u3059\u308b\n        public static ImageFormat ResolveFromExtension(string extension)\n        {\n            switch (extension.ToLower())\n            {\n                case \".bmp\": return ImageFormat.Bmp;\n                case \".gif\": return ImageFormat.Gif;\n                case \".jpg\":\n                case \".jpeg\": return ImageFormat.Jpeg;\n                case \".png\":\n                default: return ImageFormat.Png;\n            }\n        }\n    }\n}\n\n\n\n\u753b\u50cf\u51e6\u7406\u306e\u90e8\u5206\u3092 PowerShell \u3067\u8a18\u8ff0\u3059\u308b\n\n\u307e\u305a\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30c7\u30fc\u30bf\u3092\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u3002\n\n\n\u5909\u63db\u306b\u306f\u3001\u4e0a\u8a18\u306e ImagingUtil.BitmapConverter \u3092\u5229\u7528\u3059\u308b\u3002\n\u5143\u3068\u306a\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u3002\n\n\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u3002\n\n\n\u4eca\u56de\u306f\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u7c21\u5358\u306a\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\n\nRGB \u5024\u3092\u52a0\u7b97\u3057\u3066 3 \u3067\u5272\u308b\u3060\u3051:\n$grayValue = [byte](($pixel.r + $pixel.g + $pixel.b) / 3)\n\n\n\n\n\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u753b\u50cf\u30c7\u30fc\u30bf\u306b\u623b\u3059\u3002\n\u5909\u63db\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u306f\u3001\u5143\u3068\u306a\u3063\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u5834\u6240\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u672b\u5c3e\u306b \"_gray\" \u3068\u4ed8\u3051\u3066\u4fdd\u5b58\u3059\u308b\u3002\n\n\nConvertTo-Grayscale.ps1\nparam(\n    [Parameter(Mandatory = $true)]\n    [string]\n    $SourceImageFilePath\n)\n\n# \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u89e3\u6c7a\n$resolvedFilePath = Resolve-Path $SourceImageFilePath\n\n# \u753b\u50cf\u306e\u60c5\u5831\u3092\u53d6\u5f97\nAdd-Type -AssemblyName System.Drawing\n$sourceImage = [System.Drawing.Image]::FromFile($resolvedFilePath)\n$imageWidth = $sourceImage.Width\n$imageHeight = $sourceImage.Height\n\n# 'ImagingUtil.cs' \u3092\u30ed\u30fc\u30c9\n$thisDirectoryPath = Split-Path $MyInvocation.MyCommand.Path -Parent\nAdd-Type -Path (Join-Path $thisDirectoryPath 'ImagingUtil.cs') `\n         -ReferencedAssemblies System.Drawing\n\n# \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306b\u5909\u63db\n$pixels = [ImagingUtil.BitmapConverter]::ConvertBitmapToPixels($sourceImage)\nif ($sourceImage -ne $null)\n{\n    $sourceImage.Dispose()\n}\n\n# \u753b\u50cf\u51e6\u7406 \uff08\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\uff09\nforeach ($pixel in $pixels)\n{\n    $grayValue = [byte](($pixel.r + $pixel.g + $pixel.b) / 3)\n    $pixel.r = $grayValue\n    $pixel.g = $grayValue\n    $pixel.b = $grayValue\n}\n\n# \u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u753b\u50cf\u30c7\u30fc\u30bf\u306b\u623b\u3059\n$outputImage = [ImagingUtil.BitmapConverter]::ConvertPixelsToBitmap($pixels, $imageWidth, $imageHeight)\n\n# \u5909\u63db\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\uff08\u5143\u753b\u50cf\u3068\u540c\u3058\u5834\u6240\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u672b\u5c3e\u306b \"_gray\" \u3068\u4ed8\u3051\u3066\u4fdd\u5b58\uff09\n$outputFileLocation = Split-Path $resolvedFilePath -Parent\n$outputFileBaseName = (Get-ChildItem $resolvedFilePath).BaseName + \"_gray\"\n$outputFileExtention = (Get-ChildItem $resolvedFilePath).Extension\n$outputFileFullName = $outputFileBaseName + $outputFileExtention\n$outputFilePath = Join-Path $outputFileLocation $outputFileFullName\n$outputImageFormat = [ImagingUtil.ImageFormatResolver]::ResolveFromExtension($outputFileExtention)\n$outputImage.Save($outputFilePath, $outputImageFormat)\n\n\n\n\u5b9f\u884c\u7d50\u679c\nPS C:\\> & .\\ConvertTo-GrayScale.ps1 neko.jpg\n\n\n\u30d3\u30d5\u30a9\u30fc\nneko.jpg\n\n\n\u30a2\u30d5\u30bf\u30fc\nneko_gray.jpg\n\n\n\u8003\u5bdf\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306f PowerShell \u5074\u3067\u306e\u753b\u50cf\u51e6\u7406\u306e\u3057\u3084\u3059\u3055\u3092\u8003\u616e\u3057\u3066\u3001C# \u5074\u3067 byte[] \u3068 IList<Pixel> \u306e\u76f8\u4e92\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u305b\u3044\u3067\u51e6\u7406\u304c\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\n\n\n\u51e6\u7406\u901f\u5ea6\u3092\u6c17\u306b\u3059\u308b\u5834\u5408\u306f\u3001\u753b\u50cf\u51e6\u7406\u306e\u90e8\u5206\u3082 C# \u5074\u306b\u8a18\u8ff0\u3057\u3066\u3082\u3088\u3044\u304b\u3082\u3057\u308c\u306a\u3044\uff08PowerShell \u5074\u306f\u305d\u308c\u3089\u3092\u5229\u7528\u3059\u308b\u3060\u3051\u306b\u3059\u308b\uff09\u3002\n\n\n\n\n\u8ffd\u8a18\n\u753b\u50cf\u51e6\u7406\u306e\u3061\u3087\u3063\u3068\u51dd\u3063\u305f\u30ed\u30b8\u30c3\u30af\u3092 PowerShell \u3067\u66f8\u304f\u306e\u306f\u96e3\u3057\u3044\u3068\u3001\u4ed6\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u3063\u3066\u3044\u3066\u611f\u3058\u307e\u3057\u305f\u3002\u30ed\u30b8\u30c3\u30af\u3092 C# \u306b\u5bc4\u305b\u3066\u66f8\u3044\u305f\u7248\u3092\u3053\u3053\u306b\u8f09\u305b\u307e\u3059\u3002\n# \u6982\u8981\n- \u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e C# \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5c11\u3057\u30a2\u30ec\u30f3\u30b8\u3057\u3066\u3001PowerShell \u304b\u3089\u5229\u7528\u3057\u3066\u307f\u305f\u3002\n    - [[C#] \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u9ad8\u901f\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f (GetPixel/SetPixel vs BitmapData \u901f\u5ea6\u6bd4\u8f03) \u2013 \u7aef\u304f\u308c\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u5099\u5fd8\u9332:\uff09](http://www.84kure.com/blog/2014/07/13/c-%E3%83%93%E3%83%83%E3%83%88%E3%83%9E%E3%83%83%E3%83%97%E3%81%AB%E3%83%94%E3%82%AF%E3%82%BB%E3%83%AB%E5%8D%98%E4%BD%8D%E3%81%A7%E9%AB%98%E9%80%9F%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/)\n\n</br>\n\n- \u3053\u306e\u8a18\u4e8b\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068:\n    0. **C#** \u3067\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\uff08\u30d0\u30a4\u30c8\u914d\u5217\uff09\u306b\u5909\u63db\u3057\u305f\u308a\u3001\u623b\u3057\u305f\u308a\u3059\u308b\u3002\n    0. **PowerShell** \u3067\u3001\u753b\u50cf\u51e6\u7406\uff08\u30d4\u30af\u30bb\u30eb\u64cd\u4f5c\uff09\u3092\u884c\u3044\u3001\u52a0\u5de5\u3057\u305f\u753b\u50cf\u3092\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\n- PowerShell \u3067\u624b\u8efd\u306b\u753b\u50cf\u51e6\u7406\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u3001\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n# \u30b3\u30fc\u30c9\n## \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3068\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u9593\u306e\u5909\u63db\u51e6\u7406\u3092 C# \u3067\u8a18\u8ff0\u3059\u308b\n\n- \u4eca\u56de\u306f\u3001\u4ee5\u4e0b\u306e 3 \u3064\u306e\u30af\u30e9\u30b9\u3092\u8a70\u3081\u8fbc\u3093\u3060\u540d\u524d\u7a7a\u9593 **ImagingUtil** \u3092\u7528\u610f\u3057\u305f\u3002\n    0. RGBA \u306e\u30d0\u30a4\u30c8\u60c5\u5831\u3092\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e **Pixel** \u30af\u30e9\u30b9\n    0. \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3068\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u9593\u306e\u5909\u63db\u51e6\u7406\u3092\u884c\u3046 **BitmapConverter** \u30af\u30e9\u30b9\n    0. \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5f62\u5f0f [ImageFormat](https://msdn.microsoft.com/library/system.drawing.imaging.imageformat(v=\uff46vs.110).aspx) \u3092\u6c7a\u5b9a\u3059\u308b **ImageFormatResolver** \u30af\u30e9\u30b9\n\n```csharp:ImagingUtil.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing System.Runtime.InteropServices;\n\nnamespace ImagingUtil\n{\n    // RGBA \u306e\u30d0\u30a4\u30c8\u60c5\u5831\u3092\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\n    public class Pixel\n    {\n        public byte a;\n        public byte r;\n        public byte g;\n        public byte b;\n\n        public Pixel(byte b, byte g, byte r, byte a)\n        {\n            this.a = a;\n            this.r = r;\n            this.g = g;\n            this.b = b;\n        }\n    }\n\n    // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3068\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u9593\u306e\u5909\u63db\u51e6\u7406\u3092\u884c\u3046\u30af\u30e9\u30b9\n    public static class BitmapConverter\n    {\n        // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\n        public static IList<Pixel> ConvertBitmapToPixels(Bitmap bitmap)\n        {\n            byte[] byteArray = null;\n            using (bitmap)\n            {\n                byteArray = ConvertBitmapToByteArray(bitmap);\n            }\n\n            var ret = new List<Pixel>();\n            for (var i = 0; i < byteArray.Length; i += 4)\n            {\n                ret.Add(new Pixel(byteArray[i + 0],\n                                  byteArray[i + 1],\n                                  byteArray[i + 2],\n                                  byteArray[i + 3]));\n            }\n            return ret;\n        }\n\n        // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3059\u308b\n        private static byte[] ConvertBitmapToByteArray(Bitmap bitmap)\n        {\n            var ret = new byte[bitmap.Width * bitmap.Height * 4];\n\n            BitmapData bitmapData = bitmap.LockBits(\n                    new Rectangle(0, 0, bitmap.Width, bitmap.Height),\n                    ImageLockMode.ReadOnly,\n                    PixelFormat.Format32bppArgb);\n\n            Marshal.Copy(bitmapData.Scan0, ret, 0, ret.Length);\n\n            bitmap.UnlockBits(bitmapData);\n\n            return ret;\n        }\n\n        // \u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u623b\u3059\n        public static Bitmap ConvertPixelsToBitmap(IList<Pixel> pixels, int width, int height)\n        {\n            var byteArray = new byte[width * height * 4];\n            var index = 0;\n            foreach (var pixel in pixels)\n            {\n                byteArray[index++] = pixel.b;\n                byteArray[index++] = pixel.g;\n                byteArray[index++] = pixel.r;\n                byteArray[index++] = pixel.a;\n            }\n            return ConvertByteArrayToBitmap(byteArray, width, height);\n        }\n\n        // \u30d0\u30a4\u30c8\u914d\u5217\u3092\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u623b\u3059\n        private static Bitmap ConvertByteArrayToBitmap(byte[] byteArray, int width, int height)\n        {\n            Bitmap ret = new Bitmap(width, height);\n\n            BitmapData bitmapData = ret.LockBits(\n                    new Rectangle(0, 0, ret.Width, ret.Height),\n                    ImageLockMode.ReadWrite,\n                    PixelFormat.Format32bppArgb);\n\n            Marshal.Copy(byteArray, 0, bitmapData.Scan0, byteArray.Length);\n\n            ret.UnlockBits(bitmapData);\n\n            return ret;\n        }\n    }\n\n    // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5f62\u5f0f ImageFormat \u3092\u6c7a\u5b9a\u3059\u308b\u30af\u30e9\u30b9\n    public static class ImageFormatResolver\n    {\n        // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u304b\u3089\u6c7a\u5b9a\u3059\u308b\n        public static ImageFormat ResolveFromExtension(string extension)\n        {\n            switch (extension.ToLower())\n            {\n                case \".bmp\": return ImageFormat.Bmp;\n                case \".gif\": return ImageFormat.Gif;\n                case \".jpg\":\n                case \".jpeg\": return ImageFormat.Jpeg;\n                case \".png\":\n                default: return ImageFormat.Png;\n            }\n        }\n    }\n}\n```\n\n## \u753b\u50cf\u51e6\u7406\u306e\u90e8\u5206\u3092 PowerShell \u3067\u8a18\u8ff0\u3059\u308b\n0. \u307e\u305a\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30c7\u30fc\u30bf\u3092\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u3002\n    - \u5909\u63db\u306b\u306f\u3001\u4e0a\u8a18\u306e **ImagingUtil.BitmapConverter** \u3092\u5229\u7528\u3059\u308b\u3002\n    - \u5143\u3068\u306a\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u3002\n0. \u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u3002\n    - \u4eca\u56de\u306f\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u7c21\u5358\u306a\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n        - RGB \u5024\u3092\u52a0\u7b97\u3057\u3066 3 \u3067\u5272\u308b\u3060\u3051:\n\n            ```ps1\n            $grayValue = [byte](($pixel.r + $pixel.g + $pixel.b) / 3)\n            ```\n\n0. \u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u753b\u50cf\u30c7\u30fc\u30bf\u306b\u623b\u3059\u3002\n0. \u5909\u63db\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u306f\u3001\u5143\u3068\u306a\u3063\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u5834\u6240\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u672b\u5c3e\u306b **\"_gray\"** \u3068\u4ed8\u3051\u3066\u4fdd\u5b58\u3059\u308b\u3002\n\n```ps1:ConvertTo-Grayscale.ps1\nparam(\n    [Parameter(Mandatory = $true)]\n    [string]\n    $SourceImageFilePath\n)\n\n# \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u89e3\u6c7a\n$resolvedFilePath = Resolve-Path $SourceImageFilePath\n\n# \u753b\u50cf\u306e\u60c5\u5831\u3092\u53d6\u5f97\nAdd-Type -AssemblyName System.Drawing\n$sourceImage = [System.Drawing.Image]::FromFile($resolvedFilePath)\n$imageWidth = $sourceImage.Width\n$imageHeight = $sourceImage.Height\n\n# 'ImagingUtil.cs' \u3092\u30ed\u30fc\u30c9\n$thisDirectoryPath = Split-Path $MyInvocation.MyCommand.Path -Parent\nAdd-Type -Path (Join-Path $thisDirectoryPath 'ImagingUtil.cs') `\n         -ReferencedAssemblies System.Drawing\n\n# \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306b\u5909\u63db\n$pixels = [ImagingUtil.BitmapConverter]::ConvertBitmapToPixels($sourceImage)\nif ($sourceImage -ne $null)\n{\n    $sourceImage.Dispose()\n}\n\n# \u753b\u50cf\u51e6\u7406 \uff08\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\uff09\nforeach ($pixel in $pixels)\n{\n    $grayValue = [byte](($pixel.r + $pixel.g + $pixel.b) / 3)\n    $pixel.r = $grayValue\n    $pixel.g = $grayValue\n    $pixel.b = $grayValue\n}\n\n# \u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u753b\u50cf\u30c7\u30fc\u30bf\u306b\u623b\u3059\n$outputImage = [ImagingUtil.BitmapConverter]::ConvertPixelsToBitmap($pixels, $imageWidth, $imageHeight)\n\n# \u5909\u63db\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\uff08\u5143\u753b\u50cf\u3068\u540c\u3058\u5834\u6240\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u672b\u5c3e\u306b \"_gray\" \u3068\u4ed8\u3051\u3066\u4fdd\u5b58\uff09\n$outputFileLocation = Split-Path $resolvedFilePath -Parent\n$outputFileBaseName = (Get-ChildItem $resolvedFilePath).BaseName + \"_gray\"\n$outputFileExtention = (Get-ChildItem $resolvedFilePath).Extension\n$outputFileFullName = $outputFileBaseName + $outputFileExtention\n$outputFilePath = Join-Path $outputFileLocation $outputFileFullName\n$outputImageFormat = [ImagingUtil.ImageFormatResolver]::ResolveFromExtension($outputFileExtention)\n$outputImage.Save($outputFilePath, $outputImageFormat)\n```\n\n# \u5b9f\u884c\u7d50\u679c\n\n```\nPS C:\\> & .\\ConvertTo-GrayScale.ps1 neko.jpg\n```\n## \u30d3\u30d5\u30a9\u30fc\n[neko.jpg](https://www.pakutaso.com/20160532138post-7870.html)\n![neko.jpg](https://qiita-image-store.s3.amazonaws.com/0/155410/ad4933a6-e9eb-3421-faa8-66cb6e905486.jpeg)\n\n## \u30a2\u30d5\u30bf\u30fc\nneko_gray.jpg\n![neko_gray.jpg](https://qiita-image-store.s3.amazonaws.com/0/155410/7a35b671-80c1-67ee-d7d4-72c23c5aa6e8.jpeg)\n\n# \u8003\u5bdf\n\n- \u4eca\u56de\u306e\u4f8b\u3067\u306f PowerShell \u5074\u3067\u306e\u753b\u50cf\u51e6\u7406\u306e\u3057\u3084\u3059\u3055\u3092\u8003\u616e\u3057\u3066\u3001C# \u5074\u3067 `byte[]` \u3068 `IList<Pixel>` \u306e\u76f8\u4e92\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u305b\u3044\u3067\u51e6\u7406\u304c\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\n    - \u51e6\u7406\u901f\u5ea6\u3092\u6c17\u306b\u3059\u308b\u5834\u5408\u306f\u3001\u753b\u50cf\u51e6\u7406\u306e\u90e8\u5206\u3082 C# \u5074\u306b\u8a18\u8ff0\u3057\u3066\u3082\u3088\u3044\u304b\u3082\u3057\u308c\u306a\u3044\uff08PowerShell \u5074\u306f\u305d\u308c\u3089\u3092\u5229\u7528\u3059\u308b\u3060\u3051\u306b\u3059\u308b\uff09\u3002\n\n## \u8ffd\u8a18\n\u753b\u50cf\u51e6\u7406\u306e\u3061\u3087\u3063\u3068\u51dd\u3063\u305f\u30ed\u30b8\u30c3\u30af\u3092 PowerShell \u3067\u66f8\u304f\u306e\u306f\u96e3\u3057\u3044\u3068\u3001[\u4ed6\u306e\u30d5\u30a3\u30eb\u30bf](https://github.com/saggie/psimaging/blob/master/scripts/ImageProcesser.cs#L73-L95)\u3092\u4f5c\u3063\u3066\u3044\u3066\u611f\u3058\u307e\u3057\u305f\u3002\u30ed\u30b8\u30c3\u30af\u3092 C# \u306b\u5bc4\u305b\u3066\u66f8\u3044\u305f\u7248\u3092[\u3053\u3053](https://github.com/saggie/psimaging)\u306b\u8f09\u305b\u307e\u3059\u3002\n", "tags": ["PowerShell", "C#", "\u753b\u50cf\u51e6\u7406"]}