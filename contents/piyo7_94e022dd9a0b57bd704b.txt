{"context": " More than 1 year has passed since last update.\n\n\u5168\u3066\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u98a8\u306b\u66f8\u304d\u305f\u3044\n\u305f\u3068\u3048\u3070\u30011\u4ee5\u4e0a10\u4ee5\u4e0b\u306e\u6574\u6570\u5217\u2026\u2026\u304b\u3089\u5947\u6570\u3092\u53d6\u308a\u3060\u3057\u3066\u2026\u2026\u305d\u308c\u305e\u308c\u4e8c\u4e57\u3057\u305f\u2026\u2026\u5217\u304c\u6b32\u3057\u3044\u3068\u304d\u3001Scala\u306e\u3088\u3046\u306a\u95a2\u6570\u578b\u8a00\u8a9e\u3060\u3068\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u3055\u3089\u3063\u3068\u66f8\u3051\u307e\u3059\u3002\u3084\u308a\u305f\u3044\u6c17\u6301\u3061\u3092\u305d\u306e\u307e\u307e\u66f8\u3051\u308b\u306e\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\u3002\nval vec = (1 to 10).\n  filter(i => i % 2 != 0).\n  map(i => i * i).\n  toVector\n\nprint(vec.mkString(\",\")) // 1,9,25,49,81\n\nC++\u3067\u3082Boost.Range\u3092\u4f7f\u3046\u3068\u3001\nauto range = boost::irange(1, 10)\n  | boost::adaptors::filtered([](int i){ return i % 2 != 0; })\n  | boost::adaptors::transformed([](int i){ return i * i; })\n\nfor (int i : range) std::cout << i << \",\"; //  1,9,25,49,81,\n\n\u3068\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u98a8\u306b\u66f8\u3051\u307e\u3059\u3002\u521d\u3081\u3066\u898b\u308b\u3068\u672c\u5f53\u306bC++\u304b\u7591\u3063\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u8a18\u6cd5\u3067\u3059\u304c\u3001\u9ed2\u9b54\u8853\u3082\u3068\u3044\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u99c6\u4f7f\u3059\u308bBoost\u306a\u306e\u3067\u4f55\u304c\u51fa\u6765\u3066\u3082\u4e0d\u601d\u8b70\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306d  \n\u3055\u3066\u3001\u3059\u3050\u306b\u51e6\u7406\u3057\u304a\u3048\u308b\u306e\u3067\u3042\u308c\u3070Boost.Range\u306e\u4e16\u754c\u3067\u5b8c\u7d50\u3057\u307e\u3059\u304c\u3001\u3044\u3063\u305f\u3093\u8a55\u4fa1\u3057\u3066\u3057\u307e\u3063\u3066\u30b3\u30f3\u30c6\u30ca\u306b\u683c\u7d0d\u3057\u305f\u3044\u6642\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u6642\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u4f7f\u3063\u305f\u308a\u3001\nstd::vector<int> vec(std::begin(range), std::end(range));\n\n\u30b3\u30d4\u30fc\u95a2\u6570\u4f7f\u3063\u305f\u308a\u3001\nstd::vector<int> vec;\nboost::copy(range, std::back_inserter(vec));\n\n\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3069\u3046\u305b\u306a\u3089\u30b3\u30f3\u30c6\u30ca\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u98a8\u306b\u66f8\u304d\u305f\u3044\u3082\u306e\u3067\u3059\u3002\n\nBoost + Oven = \n\n\u9ad8\u6a4b\u6676\u3055\u3093\u306eBoost.Range\u62e1\u5f35\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3068\u3001\u30b3\u30f3\u30c6\u30ca\u5909\u63db\u3082\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u3002\u3059\u3054\u3044\uff01\n\u3053\u308c\u306f\u73fe\u5728Boost Formal Review Schedule\u306b\u8f09\u3063\u3066\u3044\u3066\u3001\u30de\u30fc\u30b8\u5f85\u3061\u306e\u3088\u3046\u3067\u3059\u3002\nboost\u5358\u4f53\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u3001\u3068\u3066\u3082\u5b09\u3057\u3044\u3067\u3059\u306d\u3002\nstd::vector<int> vec = boost::irange(1, 10)\n  | boost::adaptors::filtered([](int i){ return i % 2 != 0; })\n  | boost::adaptors::transformed([](int i){ return i * i; })\n  | boost::as_container; // !?\n\nboost::as_container\u306f\u3001PStade.Oven\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u306eoven::copied\u3092\u79fb\u690d\u3057\u305f\u3082\u306e\u3060\u305d\u3046\u3067\u3059\u3002\n\u3061\u306a\u307f\u306bPStade.Oven\u306e\u4f5c\u8005 @okomok \u3055\u3093\u306f\u3001Scala\u306e\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30easing\u306a\u3069\u3082\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\u3059\u3054\u3044\u2026\u2026\uff01\n\u95a2\u9023\u8a18\u4e8b\uff1a\u578b\u306b\u6570\u5024\u3092\u57cb\u3081\u3053\u3093\u3067\u307f\u3088\u3046\n\n\u81ea\u524d\u3067\u4f5c\u3063\u3066\u307f\u308b\n\u5b9f\u306fboost::as_container\u3092\u898b\u3064\u3051\u308b\u524d\u306b\u3001\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u3092\u8a66\u884c\u932f\u8aa4\u3057\u3066\u4f5c\u3063\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u53c2\u8003\u306b\u3057\u305f\u8a18\u4e8b\u306e\u3046\u3061\u300cC++ \u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3067\u304d\u308b\u3088\u300d\u300cinitializer_list(\u4eee)\u306e\u524d\u6e96\u5099 container_convertor\u300d\u304c\u9ad8\u6a4b\u6676\u3055\u3093\u306e\u30d6\u30ed\u30b0\u3060\u3063\u305f\u306e\u3067\u3001\u5148\u4eba\u306e\u8ecc\u8de1\u3092\u306a\u305e\u3063\u3066\u3044\u305f\u3060\u3051\u3067\u3057\u305f  \n\u3067\u3082\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u81ea\u524d\u3067\u4f5c\u3063\u305f\u65b9\u3082\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\u307e\u305aboost::adaptors\u306e\u5b9f\u88c5\u3092\u8997\u304d\u306a\u304c\u3089\u3001std::vector\u306b\u5909\u63db\u3059\u308bto_vec\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\nto_vec\u306f\u3001\u81ea\u524d\u306eoperator |\u3092\u547c\u3073\u3060\u3059\u306e\u5358\u306a\u308b\u30bf\u30b0\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306ftag dispatching\u3068\u547c\u3070\u308c\u308b\u624b\u6cd5\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n#include <boost/range/adaptor/filtered.hpp>\n#include <boost/range/adaptor/transformed.hpp>\n#include <boost/range/irange.hpp>\n#include <iterator>\n#include <vector>\n\n// \u81ea\u524d\u306eoperator|\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3067\u547c\u3073\u3060\u3059\u305f\u3081\u306e\u30bf\u30b0\nstruct ToVector {};\nToVector to_vec = ToVector();\n\ntemplate<\n  typename Range, // \u5236\u7d04\uff1avalue_type\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3001std::begin\u3068std::end\u547c\u3079\u308b\u3053\u3068\n  typename T = typename Range::value_type\n>\nstd::vector<T> operator | (\n  const Range& range,\n  ToVector // \u30bf\u30b0\n) {\n  return std::vector<T>(std::begin(range), std::end(range));\n}\n\nint main() {\n  std::vector<int> vec = boost::irange(1, 10)\n    | boost::adaptors::filtered([](int n){ return n % 2 != 0; })\n    | boost::adaptors::transformed([](int n){ return n * n; })\n    | to_vec; // \u3067\u304d\u305f\uff01\n\n  return 0;\n}\n\nhttp://melpon.org/wandbox/permlink/1WhNl4PGSPqHdsrU\n\u540c\u69d8\u306b\u3001\u5408\u8a08\u3057\u305f\u308a\u5e73\u5747\u53d6\u3063\u305f\u308a\u3059\u308breduce\u95a2\u6570\u306e\u30bf\u30b0\u3082\u4f5c\u308c\u307e\u3059\u3002\n\u3055\u3066\u3001\u3053\u308c\u3067boost::as_container\u3068\u540c\u7b49\u306e\u6a5f\u80fd\u304c\u5b9f\u73fe\u2026\u2026\u3067\u304d\u3066\u3044\u306a\u3044\u3067\u3059\u306d\u3002\nboost::as_container\u306e\u51c4\u3044\u3068\u3053\u308d\u306f\u3001\u5909\u63db\u3059\u308b\u5177\u4f53\u7684\u306a\u30b3\u30f3\u30c6\u30ca\u3092std::vector\u306b\u9650\u3089\u305astd::list\u3084std::deque\u306a\u3069\u4ee3\u5165\u5148\u306e\u578b\u3067\u9078\u3079\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u3001\u6697\u9ed9\u306e\u578b\u5909\u63db\u3092\u884c\u3046\u88dc\u52a9\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n#include <boost/range/adaptor/filtered.hpp>\n#include <boost/range/adaptor/transformed.hpp>\n#include <boost/range/irange.hpp>\n#include <iterator>\n#include <vector>\n\n// \u6697\u9ed9\u306e\u578b\u5909\u63db\u30af\u30e9\u30b9\ntemplate <typename Range>\nclass RangeConverter {\n  const Range& range_;\n\npublic:\n  RangeConverter(const Range& range): range_(range) {}\n\n  // \u6697\u9ed9\u306e\u578b\u5909\u63db\u95a2\u6570\n  template <\n    typename Target // \u5236\u7d04\uff1a\u5148\u982d\u3068\u672b\u5c3e\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u306b\u3088\u308b\u30b3\u30f3\u30b9\u30e9\u30af\u30bf\u304c\u3042\u308b\u3053\u3068\n  >\n  operator Target() const {\n    return Target(std::begin(range_), std::end(range_));\n  }\n};\n\nstruct ToContainer {};\nToContainer to_cont = ToContainer();\n\ntemplate<\n  typename Range,\n  typename T = typename Range::value_type\n>\nRangeConverter<Range> operator | (\n  const Range& range,\n  ToContainer\n) {\n  return RangeConverter<Range>(range); // \u5177\u4f53\u7684\u306a\u30b3\u30f3\u30c6\u30ca\u3078\u306e\u5909\u63db\u306fRangeConverter\u306b\u59d4\u306d\u308b\n}\n\nint main() {\n  std::vector<int> vec = boost::irange(1, 10)\n    | boost::adaptors::filtered([](int n){ return n % 2 != 0; })\n    | boost::adaptors::transformed([](int n){ return n * n; })\n    | to_cont; // \u3067\u304d\u305f\u2026\u2026\uff01\n\n  return 0;\n}\n\nhttp://melpon.org/wandbox/permlink/wFj5ZFOCUcvaos5g\n# \u5168\u3066\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u98a8\u306b\u66f8\u304d\u305f\u3044\n\n\u305f\u3068\u3048\u3070\u30011\u4ee5\u4e0a10\u4ee5\u4e0b\u306e\u6574\u6570\u5217\u2026\u2026\u304b\u3089\u5947\u6570\u3092\u53d6\u308a\u3060\u3057\u3066\u2026\u2026\u305d\u308c\u305e\u308c\u4e8c\u4e57\u3057\u305f\u2026\u2026\u5217\u304c\u6b32\u3057\u3044\u3068\u304d\u3001Scala\u306e\u3088\u3046\u306a\u95a2\u6570\u578b\u8a00\u8a9e\u3060\u3068\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u3055\u3089\u3063\u3068\u66f8\u3051\u307e\u3059\u3002\u3084\u308a\u305f\u3044\u6c17\u6301\u3061\u3092\u305d\u306e\u307e\u307e\u66f8\u3051\u308b\u306e\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\u3002\n\n```scala\nval vec = (1 to 10).\n  filter(i => i % 2 != 0).\n  map(i => i * i).\n  toVector\n\nprint(vec.mkString(\",\")) // 1,9,25,49,81\n```\n\nC++\u3067\u3082[Boost.Range](http://www.boost.org/doc/libs/1_57_0/libs/range/doc/html/index.html)\u3092\u4f7f\u3046\u3068\u3001\n\n```cpp\nauto range = boost::irange(1, 10)\n  | boost::adaptors::filtered([](int i){ return i % 2 != 0; })\n  | boost::adaptors::transformed([](int i){ return i * i; })\n\nfor (int i : range) std::cout << i << \",\"; //  1,9,25,49,81,\n```\n\n\u3068\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u98a8\u306b\u66f8\u3051\u307e\u3059\u3002\u521d\u3081\u3066\u898b\u308b\u3068\u672c\u5f53\u306bC++\u304b\u7591\u3063\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u8a18\u6cd5\u3067\u3059\u304c\u3001\u9ed2\u9b54\u8853\u3082\u3068\u3044\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u99c6\u4f7f\u3059\u308bBoost\u306a\u306e\u3067\u4f55\u304c\u51fa\u6765\u3066\u3082\u4e0d\u601d\u8b70\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306d :scream: \n\n\u3055\u3066\u3001\u3059\u3050\u306b\u51e6\u7406\u3057\u304a\u3048\u308b\u306e\u3067\u3042\u308c\u3070Boost.Range\u306e\u4e16\u754c\u3067\u5b8c\u7d50\u3057\u307e\u3059\u304c\u3001\u3044\u3063\u305f\u3093\u8a55\u4fa1\u3057\u3066\u3057\u307e\u3063\u3066\u30b3\u30f3\u30c6\u30ca\u306b\u683c\u7d0d\u3057\u305f\u3044\u6642\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u6642\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u4f7f\u3063\u305f\u308a\u3001\n\n```cpp\nstd::vector<int> vec(std::begin(range), std::end(range));\n```\n\n\u30b3\u30d4\u30fc\u95a2\u6570\u4f7f\u3063\u305f\u308a\u3001\n\n```cpp\nstd::vector<int> vec;\nboost::copy(range, std::back_inserter(vec));\n```\n\n\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3069\u3046\u305b\u306a\u3089\u30b3\u30f3\u30c6\u30ca\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u98a8\u306b\u66f8\u304d\u305f\u3044\u3082\u306e\u3067\u3059\u3002\n\n# Boost + Oven = :heart_eyes: \n\n\u9ad8\u6a4b\u6676\u3055\u3093\u306e[Boost.Range\u62e1\u5f35\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/faithandbrave/OvenToBoost)\u3092\u4f7f\u3046\u3068\u3001\u30b3\u30f3\u30c6\u30ca\u5909\u63db\u3082\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u3002\u3059\u3054\u3044\uff01\n\u3053\u308c\u306f\u73fe\u5728[Boost Formal Review Schedule](http://www.boost.org/community/review_schedule.html)\u306b\u8f09\u3063\u3066\u3044\u3066\u3001\u30de\u30fc\u30b8\u5f85\u3061\u306e\u3088\u3046\u3067\u3059\u3002\nboost\u5358\u4f53\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u3001\u3068\u3066\u3082\u5b09\u3057\u3044\u3067\u3059\u306d\u3002\n\n```cpp\nstd::vector<int> vec = boost::irange(1, 10)\n  | boost::adaptors::filtered([](int i){ return i % 2 != 0; })\n  | boost::adaptors::transformed([](int i){ return i * i; })\n  | boost::as_container; // !?\n```\n\n``` boost::as_container ```\u306f\u3001[PStade.Oven](http://p-stade.sourceforge.net/oven/doc/html/index.html)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u306e``` oven::copied ```\u3092\u79fb\u690d\u3057\u305f\u3082\u306e\u3060\u305d\u3046\u3067\u3059\u3002\n\u3061\u306a\u307f\u306bPStade.Oven\u306e\u4f5c\u8005 @okomok \u3055\u3093\u306f\u3001Scala\u306e\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30easing\u306a\u3069\u3082\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\u3059\u3054\u3044\u2026\u2026\uff01\n\n\u95a2\u9023\u8a18\u4e8b\uff1a[\u578b\u306b\u6570\u5024\u3092\u57cb\u3081\u3053\u3093\u3067\u307f\u3088\u3046](http://qiita.com/piyo7/items/5df3ad7e53216df5f65f)\n\n# \u81ea\u524d\u3067\u4f5c\u3063\u3066\u307f\u308b\n\n\u5b9f\u306f``` boost::as_container ```\u3092\u898b\u3064\u3051\u308b\u524d\u306b\u3001\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u3092\u8a66\u884c\u932f\u8aa4\u3057\u3066\u4f5c\u3063\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u53c2\u8003\u306b\u3057\u305f\u8a18\u4e8b\u306e\u3046\u3061\u300c[C++ \u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3067\u304d\u308b\u3088](http://faithandbrave.hateblo.jp/entry/20080529/1212051468)\u300d\u300c[initializer_list(\u4eee)\u306e\u524d\u6e96\u5099 container_convertor](http://faithandbrave.hateblo.jp/entry/20080222/1203670672)\u300d\u304c\u9ad8\u6a4b\u6676\u3055\u3093\u306e\u30d6\u30ed\u30b0\u3060\u3063\u305f\u306e\u3067\u3001\u5148\u4eba\u306e\u8ecc\u8de1\u3092\u306a\u305e\u3063\u3066\u3044\u305f\u3060\u3051\u3067\u3057\u305f :open_mouth: \n\u3067\u3082\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u81ea\u524d\u3067\u4f5c\u3063\u305f\u65b9\u3082\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u307e\u305a``` boost::adaptors ```\u306e\u5b9f\u88c5\u3092\u8997\u304d\u306a\u304c\u3089\u3001``` std::vector ```\u306b\u5909\u63db\u3059\u308b``` to_vec ```\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n``` to_vec ```\u306f\u3001\u81ea\u524d\u306e``` operator | ```\u3092\u547c\u3073\u3060\u3059\u306e\u5358\u306a\u308b\u30bf\u30b0\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306f[tag dispatching](http://www.boost.org/community/generic_programming.html#tag_dispatching)\u3068\u547c\u3070\u308c\u308b\u624b\u6cd5\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\n```cpp\n#include <boost/range/adaptor/filtered.hpp>\n#include <boost/range/adaptor/transformed.hpp>\n#include <boost/range/irange.hpp>\n#include <iterator>\n#include <vector>\n\n// \u81ea\u524d\u306eoperator|\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3067\u547c\u3073\u3060\u3059\u305f\u3081\u306e\u30bf\u30b0\nstruct ToVector {};\nToVector to_vec = ToVector();\n\ntemplate<\n  typename Range, // \u5236\u7d04\uff1avalue_type\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3001std::begin\u3068std::end\u547c\u3079\u308b\u3053\u3068\n  typename T = typename Range::value_type\n>\nstd::vector<T> operator | (\n  const Range& range,\n  ToVector // \u30bf\u30b0\n) {\n  return std::vector<T>(std::begin(range), std::end(range));\n}\n\nint main() {\n  std::vector<int> vec = boost::irange(1, 10)\n    | boost::adaptors::filtered([](int n){ return n % 2 != 0; })\n    | boost::adaptors::transformed([](int n){ return n * n; })\n    | to_vec; // \u3067\u304d\u305f\uff01\n\n  return 0;\n}\n```\nhttp://melpon.org/wandbox/permlink/1WhNl4PGSPqHdsrU\n\n\u540c\u69d8\u306b\u3001\u5408\u8a08\u3057\u305f\u308a\u5e73\u5747\u53d6\u3063\u305f\u308a\u3059\u308breduce\u95a2\u6570\u306e\u30bf\u30b0\u3082\u4f5c\u308c\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u3053\u308c\u3067``` boost::as_container ```\u3068\u540c\u7b49\u306e\u6a5f\u80fd\u304c\u5b9f\u73fe\u2026\u2026\u3067\u304d\u3066\u3044\u306a\u3044\u3067\u3059\u306d\u3002\n``` boost::as_container ```\u306e\u51c4\u3044\u3068\u3053\u308d\u306f\u3001\u5909\u63db\u3059\u308b\u5177\u4f53\u7684\u306a\u30b3\u30f3\u30c6\u30ca\u3092``` std::vector ```\u306b\u9650\u3089\u305a``` std::list ```\u3084``` std::deque ```\u306a\u3069\u4ee3\u5165\u5148\u306e\u578b\u3067\u9078\u3079\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u3001\u6697\u9ed9\u306e\u578b\u5909\u63db\u3092\u884c\u3046\u88dc\u52a9\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n```cpp\n#include <boost/range/adaptor/filtered.hpp>\n#include <boost/range/adaptor/transformed.hpp>\n#include <boost/range/irange.hpp>\n#include <iterator>\n#include <vector>\n\n// \u6697\u9ed9\u306e\u578b\u5909\u63db\u30af\u30e9\u30b9\ntemplate <typename Range>\nclass RangeConverter {\n  const Range& range_;\n\npublic:\n  RangeConverter(const Range& range): range_(range) {}\n\n  // \u6697\u9ed9\u306e\u578b\u5909\u63db\u95a2\u6570\n  template <\n    typename Target // \u5236\u7d04\uff1a\u5148\u982d\u3068\u672b\u5c3e\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u306b\u3088\u308b\u30b3\u30f3\u30b9\u30e9\u30af\u30bf\u304c\u3042\u308b\u3053\u3068\n  >\n  operator Target() const {\n    return Target(std::begin(range_), std::end(range_));\n  }\n};\n\nstruct ToContainer {};\nToContainer to_cont = ToContainer();\n\ntemplate<\n  typename Range,\n  typename T = typename Range::value_type\n>\nRangeConverter<Range> operator | (\n  const Range& range,\n  ToContainer\n) {\n  return RangeConverter<Range>(range); // \u5177\u4f53\u7684\u306a\u30b3\u30f3\u30c6\u30ca\u3078\u306e\u5909\u63db\u306fRangeConverter\u306b\u59d4\u306d\u308b\n}\n\nint main() {\n  std::vector<int> vec = boost::irange(1, 10)\n    | boost::adaptors::filtered([](int n){ return n % 2 != 0; })\n    | boost::adaptors::transformed([](int n){ return n * n; })\n    | to_cont; // \u3067\u304d\u305f\u2026\u2026\uff01\n\n  return 0;\n}\n```\nhttp://melpon.org/wandbox/permlink/wFj5ZFOCUcvaos5g\n", "tags": ["C++", "boost"]}