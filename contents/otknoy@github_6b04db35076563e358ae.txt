{"context": "\n\n\u80cc\u666f\n\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067 AV \u306e\u30bf\u30a4\u30c8\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3057\u3066\u307f\u308b\u3002\n\n\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u3060\u3044\u3076\u524d\u306bDMM \u306e API \u3092\u53e9\u3044\u3066 AV \u306e\u30bf\u30a4\u30c8\u30eb\u3092\u53ce\u96c6\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u305f\u3002\u3051\u3069\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3069\u3053\u306b\u884c\u3063\u305f\u306e\u304b\u601d\u3044\u3060\u305b\u306a\u3044\u30fb\u30fb\u30fb\u3002\n\u305d\u306e\u6642\u306b\u4f5c\u3063\u305f python \u3067 DMM API \u3092\u53e9\u304f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092 pypi \u3067\u516c\u958b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://pypi.python.org/pypi/dmm-search/0.2.1\n\u4eca\u3082\u52d5\u304f\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u6c17\u304c\u5411\u3044\u305f\u3068\u304d\u306b\u3067\u3082\u305d\u306e\u3042\u305f\u308a\u3092\u307e\u3068\u3081\u3066\u66f8\u304f\u3002\n\u4eca\u56de\u306f\u3001\u4ee5\u524d\u306b\u53ce\u96c6\u3057\u305f\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\n1\u884c\u306b1AV\u30bf\u30a4\u30c8\u30eb\u304c\u66f8\u304b\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\ngithub \u306b\u7f6e\u3044\u3068\u3044\u305f\u3002\nhttps://github.com/otknoy/markov_chain\n\nMeCab \u3067\u5f62\u614b\u7d20\u89e3\u6790\ndef tokenize(text):\n    m = MeCab.Tagger('-d /Users/otknoy/local/lib/mecab/dic/mecab-ipadic-neologd/')\n    m.parse('')\n\n    node = m.parseToNode(text)\n\n    terms = []\n    while node:\n        terms.append(node.surface)\n\n        node = node.next\n\n    return terms[1:-1]\n\n\u3053\u3093\u306a\u304b\u3093\u3058\u3002\n\u30c8\u30fc\u30af\u30ca\u30a4\u30ba\u3059\u308b\u3060\u3051\u3067\u3084\u3053\u3057\u3044\u51e6\u7406\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nmecab-ipadic-neologd \u4f7f\u3063\u3066\u307e\u3059\u3002\n\n\u30de\u30eb\u30b3\u30d5\u9023\u9396\n\u8ab0\u304b\u304c\u4f5c\u3063\u305f\u3084\u3064\u3092\u4f7f\u3063\u3066\u3082\u3088\u304b\u3063\u305f\u3051\u3069\u3001\u6700\u8fd1\u306f\u3042\u307e\u308a\u5bb6\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u4f5c\u3057\u3066\u307f\u305f\u3002\u8d85\u30b7\u30f3\u30d7\u30eb\u3002\ndef ngram(tokens, n=2):\n    tokens = tokens[:]\n    tokens.insert(0, '(BOS)')\n    tokens.append('(EOS)')\n\n    ret = []\n    for i in range(0, len(tokens)-n+1):\n        ret.append(tokens[i:i+n])\n    return ret\n\nclass MarkovChain:\n    def __init__(self):\n        self.chains = {}\n\n    def train(self, tokens):\n        bigram = ngram(tokens)\n\n        for s1, s2 in bigram:\n            self.chains.setdefault(s1, [])\n            self.chains[s1].append(s2)\n\n    def generate(self, bos='(BOS)'):\n        tokens = []\n\n        node = random.choice(self.chains[bos])\n        while node != '(EOS)':\n            tokens.append(node)\n\n            node = random.choice(self.chains[node])\n\n        return ' '.join(tokens)\n\n\n\u7d50\u679c\n\u3053\u3053\u3067\u306f\u898b\u305b\u3089\u308c\u306a\u3044\u3088\uff01\n\u7d33\u58eb\u306e\u7686\u69d8\u306f\u3053\u3061\u3089\u3078\u3069\u3046\u305e\u3002\n\u30aa\u30c8 \u30b3\u30ce \u5a18\u3002 \u3042 \u3041\u3063 !\n\n\u306a\u3093\u3060\u3053\u308c\u306f\u30fb\u30fb\u30fb\u3002\n\n\u8003\u5bdf\u3068\u304b\n\n\u305d\u308c\u3063\u307d\u3044\u30bf\u30a4\u30c8\u30eb\u306f\u81ea\u52d5\u751f\u6210\u3067\u304d\u308b\u3051\u3069\u3001\u305d\u308c\u3063\u307d\u3044\u3060\u3051\u3060\u3063\u305f\n\n\n\u305f\u307e\u306b\u3059\u3054\u304f\u305d\u308c\u3063\u307d\u3044\u30bf\u30a4\u30c8\u30eb\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u3051\u3069\u3001\u4eba\u9593\u304c\u5fc5\u6b7b\u306b\u89e3\u91c8\u3057\u3088\u3046\u3068\u3057\u305f\u7d50\u679c\u306b\u904e\u304e\u306a\u3044\u306e\u3060\u308d\u3046\nRNN \u3068\u304b\u4f7f\u3048\u3070\u3082\u3063\u3068\u30de\u30b7\u306b\u306a\u3093\u306e\u304b\u306a\uff1f\n\n\nAV \u30bf\u30a4\u30c8\u30eb\u306e\u5358\u8a9e\u983b\u5ea6\u3092\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u50d5\u306e\u8208\u5473\u304c\u306a\u3044\u30b8\u30e3\u30f3\u30eb\u306e\u5358\u8a9e\u304c\u7d50\u69cb\u4e0a\u4f4d\u306b\u591a\u3044\n\n\n\u8208\u5473\u304c\u306a\u3044\u5358\u8a9e\u306f\u843d\u3068\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u3044\u3044\u304b\u3082\n\u3057\u304b\u3057\u300c\u3053\u3093\u306a\u30b8\u30e3\u30f3\u30eb\u306e\u9700\u8981\u304c\u3042\u308b\u3093\u3060\u30fb\u30fb\u30fb\u300d\u3068\u3044\u3046\u65b0\u305f\u306a\u77e5\u898b\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u305f\n\n\n\u7d50\u679c\u306e\u5171\u6709\u304c\u56f0\u96e3 (\u8e8a\u8e87\u3057\u3066\u3057\u307e\u3046)\n\n## \u80cc\u666f\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u3053\u308c\u898b\u3066\u3001DMM API \u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3057\u305fAV\u306e\u30bf\u30a4\u30c8\u30eb3\u4e07\u4ef6\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u3042\u308b\u306e\u3092\u601d\u3044\u51fa\u3057\u305f\u3051\u3069\u306a\u3093\u304b\u3084\u308b\u304b\u3002DMM API\u30fbMeCab\u30fb\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067AV\u4f5c\u54c1\u306e\u7d39\u4ecb\u6587\u3092\u81ea\u52d5\u751f\u6210 on <a href=\"https://twitter.com/Qiita\">@Qiita</a> <a href=\"https://t.co/IFqGSHy2bM\">https://t.co/IFqGSHy2bM</a></p>&mdash; Naoya Otsuka (@otknoy) <a href=\"https://twitter.com/otknoy/status/711167321008570371\">2016\u5e743\u670819\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u5358\u8a9e\u983b\u5ea6\u3092\u6c42\u3081\u305f\u5f62\u8de1\u304c\u3042\u308b\u3051\u3069\u3001\u898b\u305b\u3089\u308c\u306a\u3044\u3088\uff01</p>&mdash; Naoya Otsuka (@otknoy) <a href=\"https://twitter.com/otknoy/status/711167895913431040\">2016\u5e743\u670819\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u653e\u7f6e\u3057\u3059\u304e\u3084\u3063\u305f\u306a\u30fb\u30fb\u30fb\u3002<a href=\"https://t.co/G0Esfh5ene\">https://t.co/G0Esfh5ene</a></p>&mdash; Naoya Otsuka (@otknoy) <a href=\"https://twitter.com/otknoy/status/711168299246039041\">2016\u5e743\u670819\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067 AV \u306e\u30bf\u30a4\u30c8\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3057\u3066\u307f\u308b\u3002\n\n\n## \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n\u3060\u3044\u3076\u524d\u306bDMM \u306e API \u3092\u53e9\u3044\u3066 AV \u306e\u30bf\u30a4\u30c8\u30eb\u3092\u53ce\u96c6\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u305f\u3002\u3051\u3069\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3069\u3053\u306b\u884c\u3063\u305f\u306e\u304b\u601d\u3044\u3060\u305b\u306a\u3044\u30fb\u30fb\u30fb\u3002\n\n\u305d\u306e\u6642\u306b\u4f5c\u3063\u305f python \u3067 DMM API \u3092\u53e9\u304f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092 pypi \u3067\u516c\u958b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://pypi.python.org/pypi/dmm-search/0.2.1\n\u4eca\u3082\u52d5\u304f\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u6c17\u304c\u5411\u3044\u305f\u3068\u304d\u306b\u3067\u3082\u305d\u306e\u3042\u305f\u308a\u3092\u307e\u3068\u3081\u3066\u66f8\u304f\u3002\n\n\u4eca\u56de\u306f\u3001\u4ee5\u524d\u306b\u53ce\u96c6\u3057\u305f\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\n1\u884c\u306b1AV\u30bf\u30a4\u30c8\u30eb\u304c\u66f8\u304b\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0\n\ngithub \u306b\u7f6e\u3044\u3068\u3044\u305f\u3002\nhttps://github.com/otknoy/markov_chain\n\n### MeCab \u3067\u5f62\u614b\u7d20\u89e3\u6790\n\n```python\ndef tokenize(text):\n    m = MeCab.Tagger('-d /Users/otknoy/local/lib/mecab/dic/mecab-ipadic-neologd/')\n    m.parse('')\n\n    node = m.parseToNode(text)\n\n    terms = []\n    while node:\n        terms.append(node.surface)\n\n        node = node.next\n\n\treturn terms[1:-1]\n```\n\n\u3053\u3093\u306a\u304b\u3093\u3058\u3002\n\u30c8\u30fc\u30af\u30ca\u30a4\u30ba\u3059\u308b\u3060\u3051\u3067\u3084\u3053\u3057\u3044\u51e6\u7406\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n[mecab-ipadic-neologd](https://github.com/neologd/mecab-ipadic-neologd) \u4f7f\u3063\u3066\u307e\u3059\u3002\n\n### \u30de\u30eb\u30b3\u30d5\u9023\u9396\n\n\u8ab0\u304b\u304c\u4f5c\u3063\u305f\u3084\u3064\u3092\u4f7f\u3063\u3066\u3082\u3088\u304b\u3063\u305f\u3051\u3069\u3001\u6700\u8fd1\u306f\u3042\u307e\u308a\u5bb6\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u4f5c\u3057\u3066\u307f\u305f\u3002\u8d85\u30b7\u30f3\u30d7\u30eb\u3002\n\n```python\ndef ngram(tokens, n=2):\n    tokens = tokens[:]\n    tokens.insert(0, '(BOS)')\n    tokens.append('(EOS)')\n\n    ret = []\n    for i in range(0, len(tokens)-n+1):\n        ret.append(tokens[i:i+n])\n    return ret\n\nclass MarkovChain:\n    def __init__(self):\n        self.chains = {}\n\n    def train(self, tokens):\n        bigram = ngram(tokens)\n\n        for s1, s2 in bigram:\n            self.chains.setdefault(s1, [])\n            self.chains[s1].append(s2)\n\n    def generate(self, bos='(BOS)'):\n        tokens = []\n\n        node = random.choice(self.chains[bos])\n        while node != '(EOS)':\n            tokens.append(node)\n\n            node = random.choice(self.chains[node])\n\n        return ' '.join(tokens)\n```\n\n## \u7d50\u679c\n\n\u3053\u3053\u3067\u306f\u898b\u305b\u3089\u308c\u306a\u3044\u3088\uff01\n\u7d33\u58eb\u306e\u7686\u69d8\u306f[\u3053\u3061\u3089](https://gist.github.com/otknoy/8ad52eccd1bfa3a89265)\u3078\u3069\u3046\u305e\u3002\n\n```\n\u30aa\u30c8 \u30b3\u30ce \u5a18\u3002 \u3042 \u3041\u3063 !\n```\n\u306a\u3093\u3060\u3053\u308c\u306f\u30fb\u30fb\u30fb\u3002\n\n## \u8003\u5bdf\u3068\u304b\n\n* \u305d\u308c\u3063\u307d\u3044\u30bf\u30a4\u30c8\u30eb\u306f\u81ea\u52d5\u751f\u6210\u3067\u304d\u308b\u3051\u3069\u3001\u305d\u308c\u3063\u307d\u3044\u3060\u3051\u3060\u3063\u305f\n    * \u305f\u307e\u306b\u3059\u3054\u304f\u305d\u308c\u3063\u307d\u3044\u30bf\u30a4\u30c8\u30eb\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u3051\u3069\u3001\u4eba\u9593\u304c\u5fc5\u6b7b\u306b\u89e3\u91c8\u3057\u3088\u3046\u3068\u3057\u305f\u7d50\u679c\u306b\u904e\u304e\u306a\u3044\u306e\u3060\u308d\u3046\n    * RNN \u3068\u304b\u4f7f\u3048\u3070\u3082\u3063\u3068\u30de\u30b7\u306b\u306a\u3093\u306e\u304b\u306a\uff1f\n* AV \u30bf\u30a4\u30c8\u30eb\u306e\u5358\u8a9e\u983b\u5ea6\u3092\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u50d5\u306e\u8208\u5473\u304c\u306a\u3044\u30b8\u30e3\u30f3\u30eb\u306e\u5358\u8a9e\u304c\u7d50\u69cb\u4e0a\u4f4d\u306b\u591a\u3044\n    * \u8208\u5473\u304c\u306a\u3044\u5358\u8a9e\u306f\u843d\u3068\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u3044\u3044\u304b\u3082\n    * \u3057\u304b\u3057\u300c\u3053\u3093\u306a\u30b8\u30e3\u30f3\u30eb\u306e\u9700\u8981\u304c\u3042\u308b\u3093\u3060\u30fb\u30fb\u30fb\u300d\u3068\u3044\u3046\u65b0\u305f\u306a\u77e5\u898b\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u305f\n* \u7d50\u679c\u306e\u5171\u6709\u304c\u56f0\u96e3 (\u8e8a\u8e87\u3057\u3066\u3057\u307e\u3046)\n\n\n\n", "tags": ["Python", "\u30de\u30eb\u30b3\u30d5\u9023\u9396", "mecab"]}