{"tags": ["Python2.7", "Twitter", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "MongoDB"], "context": " More than 1 year has passed since last update.Twitter\u89e3\u6790\u3092\u884c\u3046\u3046\u3048\u3067\u3084\u3063\u3066\u307f\u305f\u3044\u3053\u3068\u306e\uff11\u3064\u3068\u3057\u3066\u611f\u60c5\u5206\u6790\u304c\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u3067\u3059\u3088\u306d\uff1f\uff09\u8272\u3005\u306a\u624b\u6cd5\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u305d\u306e\u4e00\u756a\u7c21\u5358\u306a\u4f8b\u304b\u3089\u521d\u3081\u3066\u3060\u3093\u3060\u3093\u9ad8\u5ea6\u306b(\u3067\u304d\u308c\u3070)\u3057\u3066\u3044\u304f\u3068\u3044\u3046\u306e\u3092\u898b\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u5206\u6790\u5bfe\u8c61\u30c7\u30fc\u30bf\u306f\u4eca\u56de\u3082Twitter\u3068\u3057\u307e\u3059\u3002\u305f\u3060\u3001\u3044\u307e\u307e\u3067\u306fTwitter REST APIs\u3067\u53d6\u5f97\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306fTwitter Stream API\u3067\u3058\u3083\u3093\u3058\u3083\u304bTwitter\u30c7\u30fc\u30bf\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u304d\u3001\u305d\u308c\u306b\u5bfe\u3057\u3066\u611f\u60c5\u5206\u6790\u7d50\u679c\u3092\u6570\u5024\u5316\u3057\u3066\u5408\u308f\u305b\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nTwitter\u30c7\u30fc\u30bf\u3092mongodb\u306b\u53d6\u5f97\u3059\u308b\u5f53\u305f\u308a\u306e\u8aac\u660e\u306f\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3088\u3051\u308c\u3070\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n1. Twitter Stream API\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057mongoDB\u306b\u683c\u7d0d\u3059\u308b\u3002\n\n1-1. \u6e96\u5099\u7684\u306a\u3053\u3068\n\u307e\u305a\u306f\u4e0b\u3054\u3057\u3089\u3048\u3067\u3059\u3002\n\u5404\u7a2e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3001\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u7684\u306a\u95a2\u6570\u306e\u5ba3\u8a00\u3001DB\u3078\u306e\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\nfrom requests_oauthlib import OAuth1Session\nfrom requests.exceptions import ConnectionError, ReadTimeout, SSLError\nimport json, time, exceptions, sys, datetime, pytz, re, unicodedata, pymongo\nimport oauth2 as oauth\nimport urllib2 as urllib\nimport MeCab as mc\nfrom collections import defaultdict\nfrom pymongo import MongoClient\nfrom httplib import IncompleteRead\nimport numpy as np\n\nimport logging\nfrom logging import FileHandler, Formatter\nimport logging.config\n\nconnect = MongoClient('localhost', 27017)\ndb = connect.word_info\nposi_nega_dict = db.posi_nega_dict\ndb2 = connect.twitter\nstreamdata = db2.streamdata\n\ndef str_to_date_jp(str_date):\n    dts = datetime.datetime.strptime(str_date,'%a %b %d %H:%M:%S +0000 %Y')\n    return pytz.utc.localize(dts).astimezone(pytz.timezone('Asia/Tokyo'))\n\ndef mecab_analysis(sentence):\n    t = mc.Tagger('-Ochasen -d /usr/local/Cellar/mecab/0.996/lib/mecab/dic/mecab-ipadic-neologd/')\n    sentence = sentence.replace('\\n', ' ')\n    text = sentence.encode('utf-8') \n    node = t.parseToNode(text) \n    result_dict = defaultdict(list)\n    for i in range(140):  # \u30c4\u30a4\u30fc\u30c8\u306a\u306e\u3067MAX140\u6587\u5b57\n        if node.surface != \"\":  # \u30d8\u30c3\u30c0\u3068\u30d5\u30c3\u30bf\u3092\u9664\u5916\n            word_type = node.feature.split(\",\")[0]\n            if word_type in [\"\u5f62\u5bb9\u8a5e\", \"\u52d5\u8a5e\",\"\u540d\u8a5e\", \"\u526f\u8a5e\"]:\n                plain_word = node.feature.split(\",\")[6]\n                if plain_word !=\"*\":\n                    result_dict[word_type.decode('utf-8')].append(plain_word.decode('utf-8'))\n        node = node.next\n        if node is None:\n            break\n    return result_dict\n\ndef logger_setting():\n    import logging\n    from logging import FileHandler, Formatter\n    import logging.config\n\n    logging.config.fileConfig('logging_tw.conf')\n    logger = logging.getLogger('filelogger')\n    return logger\n\nlogger = logger_setting()\n\nKEYS = { # \u81ea\u5206\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u5165\u624b\u3057\u305f\u30ad\u30fc\u3092\u4e0b\u8a18\u306b\u8a18\u8f09\n        'consumer_key':'**********',\n        'consumer_secret':'**********',\n        'access_token':'**********',\n        'access_secret''**********',\n       }\n\n\n\u4eca\u56de\u3001\u30ed\u30b0\u306fLogger\u3092\u3064\u304b\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\u3092\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30ed\u30b0\u306e\u51fa\u529b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f\u4e0b\u8a18\u3067\u3059\u3002\n\nlogging_tw.conf\n# logging_tw.conf\n\n[loggers]\nkeys=root, filelogger\n\n[handlers]\nkeys= fileHandler \n\n[formatters]\nkeys=logFormatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=fileHandler\n\n[logger_filelogger]\nlevel=DEBUG\nhandlers=fileHandler\nqualname=filelogger\npropagate=0\n\n[handler_fileHandler]\nclass=handlers.RotatingFileHandler\nlevel=DEBUG\nformatter=logFormatter\nargs=('logging_tw.log',)\n\n[formatter_logFormatter]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)s\ndatefmt=\n\n\n\n1-2. \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u6c38\u7d9a\u5316\n\u6771\u5317\u5927\u5b66\u306e\u4e7e\u5148\u751f\u30fb\u5ca1\u5d0e\u5148\u751f\u306e\u7814\u7a76\u5ba4\u3067\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u3092\u4f7f\u3063\u3066\u611f\u60c5\u3092\u6570\u5024\u5316\u3057\u307e\u3059\u306e\u3067\u3001\u307e\u305a\u306f\n\n\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u7528\u8a00\u7de8\uff09ver.1.0\uff082008\u5e7412\u6708\u7248\uff09 wago.121808.pn\n\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u540d\u8a5e\u7de8\uff09ver.1.0\uff082008\u5e7412\u6708\u7248\uff09 pn.csv.m3.120408.trim\n\n\u3092\u3053\u3053\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066.py\u3068\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u7528\u8a00\u7de8\uff09\u306b\u95a2\u3057\u3066\u306f\u3001\u30dd\u30b8\u306e\u7528\u8a9e\u306f 1\u3001\u30cd\u30ac\u306e\u7528\u8a9e\u306f -1 \u3068\u6570\u5024\u5316\u3057\u3066mongodb\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u540d\u8a5e\u7de8\uff09\u306b\u3064\u3044\u3066\u306f\u3001p\u306e\u7528\u8a9e\u306f 1\u3001e\u306e\u7528\u8a9e\u306f 0\u3001n\u306e\u7528\u8a9e\u306f -1 \u3068\u6570\u5024\u5316\u3057\u3066\u540c\u3058\u304fmongodb\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u304c\u305d\u306e\u30b3\u30fc\u30c9\u3068\u306a\u308a\u307e\u3059\u3002\n# \u5358\u8a9e\u306e\u30dd\u30b8\u30fb\u30cd\u30ac\u8f9e\u66f8\u306emongoDB\u3078\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\n# \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u7528\u8a00\u7de8\uff09ver.1.0\uff082008\u5e7412\u6708\u7248\uff09\u3092mongodb\u3078\u30a4\u30f3\u30dd\u30fc\u30c8\n# \u30dd\u30b8\u306e\u7528\u8a9e\u306f 1 ,\u30cd\u30ac\u306e\u7528\u8a9e\u306f -1 \u3068\u6570\u5024\u5316\u3059\u308b\nwith open(\"wago.121808.pn.txt\", 'r') as f:\n    for l in f.readlines():\n        l = l.split('\\t')\n        l[1] = l[1].replace(\" \",\"\").replace('\\n','')\n        value = 1 if l[0].split('\uff08')[0]==\"\u30dd\u30b8\" else -1\n        posi_nega_dict.insert({\"word\":l[1].decode('utf-8'),\"value\":value})\n\n\n# \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u540d\u8a5e\u7de8\uff09ver.1.0\uff082008\u5e7412\u6708\u7248\uff09\u3092mongodb\u3078\u30a4\u30f3\u30dd\u30fc\u30c8\n# p\u306e\u7528\u8a9e\u306f 1 e\u306e\u7528\u8a9e\u306f 0 ,n\u306e\u7528\u8a9e\u306f -1 \u3068\u6570\u5024\u5316\u3059\u308b\nwith open(\"pn.csv.m3.120408.trim\", 'r') as f:\n    for l in f.readlines():\n        l = l.split('\\t')\n\n        if l[1]==\"p\":\n            value = 1\n        elif l[1]==\"e\":\n            value = 0\n        elif l[1]==\"n\":\n            value = -1\n\n        posi_nega_dict.insert({\"word\":l[0].decode('utf-8'),\"value\":value})  \n\n\n1-3. \u611f\u60c5\u5ea6\u3092\u6570\u5024\u5316\u3059\u308b\u51e6\u7406\n1-2\u3067\u5358\u8a9e\u6bce\u306e\u611f\u60c5\u5024\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5316\u3067\u304d\u305f\u306e\u3067\u3001\u6587\u7ae0\u3092\u611f\u60c5\u5024\u5316\u3067\u304d\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u4eca\u56de\u306f\u300c\u521d\u6b69\u7684\u306a\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u4f55\u3082\u51e6\u7406\u3092\u884c\u308f\u305a\u3001\n\n\u5358\u7d14\u306b\u6587\u4e2d\u306b\u542b\u307e\u308c\u308b\u5358\u8a9e\u3092\u305d\u308c\u305e\u308c\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u306b\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\n\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u306e\u6570\u5024\u3092\u5229\u7528\u3059\u308b\n\u4e0b\u8a18\u306e\u5f0f\u306b\u5f93\u3044\u3001\u6587\u7ae0\u306e\u611f\u60c5\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\uff08$x_i$\u306f\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u306b\u5b58\u5728\u3059\u308b\u5358\u8a9e\u306e\u611f\u60c5\u5024\u3001$n$\u306f\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u306b\u5b58\u5728\u3059\u308b\u5358\u8a9e\u6570\uff09\n\n{\\rm sentiment\\, value\\, of\\, the\\, sentence} \\, = \\, \\frac{1}{n}\\sum_{i=1}^{n} x_i \n\n\u306a\u306e\u3067\u3001-1 \u301c 1\u306e\u9593\u3067\u6587\u7ae0\u306e\u5358\u8a9e\u6570\u306b\u3088\u3089\u306a\u3044\u5f62\u3067\u611f\u60c5\u5024\u3092\u5c0e\u51fa\u3067\u304d\u3001\u6587\u7ae0\u9593\u306e\u6bd4\u8f03\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002\n\n# \u611f\u60c5\u5ea6\u306e\u8a2d\u5b9a(\u691c\u7d22\u9ad8\u901f\u5316\u306e\u305f\u3081\u30cf\u30c3\u30b7\u30e5\u691c\u7d22\u304c\u3067\u304d\u308b\u3088\u3046\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5165\u308c\u8fbc\u3080)\npn_dict = {data['word']: data['value'] for data in posi_nega_dict.find({},{'word':1,'value':1})}\n\ndef isexist_and_get_data(data, key):\n    return data[key] if key in data else None\n\n# -1 \u301c 1\u306e\u7bc4\u56f2\u3067\u4e0e\u3048\u3089\u308c\u305f\u6587\u7ae0\uff08\u5358\u8a9e\u30ea\u30b9\u30c8\uff09\u306b\u5bfe\u3059\u308b\u611f\u60c5\u5024\u3092\u8fd4\u3059\u3002(1: \u6700\u3082\u30dd\u30b8\u3001-1:\u6700\u3082\u30cd\u30ac)\ndef get_setntiment(word_list):\n    val = 0\n    score = 0\n    word_count = 0\n    val_list = []\n    for word in word_list:\n        val = isexist_and_get_data(pn_dict, word)\n        val_list.append(val)\n        if val is not None and val != 0: # \u898b\u3064\u304b\u308c\u3070\u30b9\u30b3\u30a2\u3092\u8db3\u3057\u5408\u308f\u305b\u3066\u5358\u8a9e\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n            score += val\n            word_count += 1\n\n    logger.debug(','.join(word_list).encode('utf-8'))       \n    logger.debug(val_list)\n    return score/float(word_count) if word_count != 0. else 0.\n\n\n1-4. Twitter Stream API\u304b\u3089\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nTwitter Stream API\u3088\u308a\u30c4\u30a4\u30fc\u30c8\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u30c4\u30a4\u30fc\u30c8\u3092\u30c0\u30a6\u30ed\u30fc\u30c9\u3057\u306a\u304c\u3089MeCab\u3067\u5f62\u614b\u7d20\u89e3\u6790\u3092\u3057\u3066\u5358\u8a9e\u3054\u3068\u306b\u30d0\u30e9\u30d0\u30e9\u306b\u3057\u3066\u540d\u8a5e\u3001\u52d5\u8a5e\u3001\u5f62\u5bb9\u8a5e\u3001\u526f\u8a5e\u3054\u3068\u306b\u30ea\u30b9\u30c8\u306b\u3057\u307e\u3059\u3002\u3044\u308f\u3086\u308bBag of Words\u3067\u3059\u306d\u3002\n\u3067\u3001\u305d\u306e\u5358\u8a9e\u305f\u3061\u306b\u5bfe\u3057\u3066\u3055\u304d\u307b\u3069\u5b9a\u7fa9\u3057\u305f\u95a2\u6570get_setntiment()\u3067\u611f\u60c5\u5024\u3092\u5c0e\u51fa\u3001\u3053\u308c\u3068\u5408\u308f\u305b\u3066mongodb\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n# ----- Stream\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30dd\u30fc\u30c8 ---------#\nconsumer = oauth.Consumer(key=KEYS['consumer_key'], secret=KEYS['consumer_secret'])\ntoken = oauth.Token(key=KEYS['access_token'], secret=KEYS['access_secret'])\n\nurl = 'https://stream.twitter.com/1.1/statuses/sample.json'\nparams = {}\n\nrequest = oauth.Request.from_consumer_and_token(consumer, token, http_url=url, parameters=params)\nrequest.sign_request(oauth.SignatureMethod_HMAC_SHA1(), consumer, token)\nres = urllib.urlopen(request.to_url())\n\ndef get_list_from_dict(result, key):\n    if key in result.keys():\n        result_list = result[key]\n    else:\n        result_list = []\n    return result_list\n\ncnt = 1\ntry:\n    for r in res:\n        data = json.loads(r)\n        if 'delete' in data.keys():\n            pass\n        else:    \n            if data['lang'] in ['ja']: #['ja','en','und']:\n                result = mecab_analysis(data['text'].replace('\\n',''))\n\n                noun_list      = get_list_from_dict(result, u'\u540d\u8a5e')\n                verb_list      = get_list_from_dict(result, u'\u52d5\u8a5e')\n                adjective_list = get_list_from_dict(result, u'\u5f62\u5bb9\u8a5e')\n                adverb_list    = get_list_from_dict(result, u'\u526f\u8a5e')\n\n                item = {'id':data['id'], 'screen_name': data['user']['screen_name'], \n                        'text':data['text'].replace('\\n',''), 'created_datetime':str_to_date_jp(data['created_at']),\\\n                       'verb':verb_list, 'adjective':adjective_list, 'noun': noun_list, 'adverb':adverb_list}\n                if 'lang' in data.keys():\n                    item['lang'] = data['lang']\n                else:\n                    item['lang'] = None\n\n                #\u611f\u60c5\u5206\u6790\u7d50\u679c\u3092\u8ffd\u52a0 ####################\n                word_list = [word for k in result.keys() for word in result[k] ]\n                item['sentiment'] = get_setntiment(word_list)\n\n                streamdata.insert(item)\n                if cnt%1000==0:\n                    logger.info(\"%d, \"%cnt)\n                cnt += 1\nexcept IncompleteRead as e:\n    logger.error( '=== \u30a8\u30e9\u30fc\u5185\u5bb9 ===')\n    logger.error(  'type:' + str(type(e)))\n    logger.error(  'args:' + str(e.args))\n    logger.error(  'message:' + str(e.message))\n    logger.error(  'e self:' + str(e))\n    try:\n        if type(e) == exceptions.KeyError:\n            logger.error( data.keys())\n    except:\n        pass\nexcept Exception as e:\n    logger.error( '=== \u30a8\u30e9\u30fc\u5185\u5bb9 ===')\n    logger.error( 'type:' + str(type(e)))\n    logger.error( 'args:' + str(e.args))\n    logger.error( 'message:' + str(e.message))\n    logger.error( 'e self:' + str(e))\n    try:\n        if type(e) == exceptions.KeyError:\n            logger.error( data.keys())\n    except:\n        pass \nexcept:\n    logger.error( \"error.\")\n\nlogger.info( \"finished.\")\n\n\n\u3053\u3053\u307e\u3067\u304c\u5358\u7d14\u306b\u5358\u8a9e\u3054\u3068\u306b\u611f\u60c5\u5024\u3092\u5272\u308a\u5f53\u3066\u3066\u5e73\u5747\u3092\u3068\u308b\u3068\u3044\u3046\u5358\u7d14\u306a\u65b9\u6cd5\u3067\u5206\u6790\u3092\u884c\u3046\u65b9\u6cd5\u3067\u3057\u305f\u3002\n\u4eca\u5f8c\u306e\u5c55\u958b\u3068\u3057\u3066\u306f\u3001\u3055\u3089\u306a\u308b\u524d\u51e6\u7406\u3068\u3057\u3066Spam\u5206\u985e\u3001\u307e\u305f\u3001\u73fe\u72b6\u3060\u3068\u5358\u8a9e\u9593\u306e\u95a2\u9023\u6027\u3092\u8003\u616e\u306b\u5165\u308c\u305f\u51e6\u7406\u304c\u8ab2\u984c\u3068\u306a\u308b\u3068\u8003\u3048\u3066\u3044\u307e\u3059\n\u7279\u306b\u300c\u53ef\u611b\u304f\u306a\u3044\u300d\u306e\u3088\u3046\u306a\u5358\u8a9e\u306f\u300c\u53ef\u611b\u3044\u300d\u3068\u300c\u306a\u3044\u300d\u306b\u5206\u304b\u308c\u3066\u3001\u300c\u306a\u3044\u300d\u304c\u5426\u5b9a\u306e\u305f\u3081\u3001\u300c\u53ef\u611b\u3044\u300d\u304c+1.0\u306e\u30dd\u30b8\u30c6\u30a3\u30d6\u8868\u73fe\u3092\u300c\u306a\u3044\u300d\u3067\u6253\u3061\u6d88\u3057\u3066-1.0\u3068\u3059\u308b\u3053\u3068\u304c\u81ea\u7136\u306a\u306e\u3067\u3059\u304c\u3001\u73fe\u72b6\u306f\u300c\u53ef\u611b\u3044\u300d\u3060\u3051\u304c\u51e6\u7406\u3055\u308c+1.0\u3068\u306a\u308a\u771f\u9006\u306e\u7d50\u679c\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\u3053\u308c\u3092\u6b63\u3057\u304f\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u300c\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u300d\u3068\u3044\u3046\u624b\u6cd5\u3067\u300c\u306a\u3044\u300d\u304c\u3069\u306e\u5358\u8a9e\u306b\u304b\u304b\u3063\u3066\u3044\u308b\u304b\u3092\u95a2\u9023\u3065\u3051\u3001\u89e3\u91c8\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u6b21\u306e\u7bc0\u3067\u305d\u306e\u4fc2\u308a\u53d7\u3051\u5206\u6790\u30e9\u30a4\u30d6\u30e9\u30eaCaboCha\u3092\u307e\u305a\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n2. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\n2-1. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30eaCaboCha\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3068\u3044\u3046\u3053\u3068\u3067\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30eaCaboCha http://taku910.github.io/cabocha/\u306eMac\u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u6271\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304b\u306a\u304b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u624b\u9593\u53d6\u3063\u305f\u306e\u3067\u3001\u53c2\u8003\u306b\u306a\u308c\u3070\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\nCaboCha\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nhttps://drive.google.com/folderview?id=0B4y35FiV1wh7cGRCUUJHVTNJRnM&usp=sharing#list\nCaboCha\u3092\u5165\u308c\u308b\u306b\u306fCRF+\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\nCRF+\u306e\u30da\u30fc\u30b8\nhttp://taku910.github.io/crfpp/#install\nCRF+\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nhttps://drive.google.com/folderview?id=0B4y35FiV1wh7fngteFhHQUN2Y1B5eUJBNHZUemJYQV9VWlBUb3JlX0xBdWVZTWtSbVBneU0&usp=drive_web#list\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u5f8c\u306f\u89e3\u51cd\u3057\u3066make & install\u3057\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u5fc5\u8981\u306a\u74b0\u5883\u5909\u6570\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u305d\u306e\u9069\u7528\u306b\u3064\u3044\u3066\u3082\u4e0b\u8a18\u3067\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\ntar zxfv CRF++-0.58.tar\ncd CRF++-0.58\n./configure \nmake\nsudo make install\n\nexport LIBRARY_PATH=\"/usr/local/include:/usr/local/lib:\"\nexport CPLUS_INCLUDE_PATH=\"/usr/local/include:/opt/local/include\"\nexport OBJC_INCLUDE_PATH=\"/usr/local/include:/opt/local/lib\"\n\nbrew tap homebrew/dupes\nbrew install libxml2 libxslt libiconv\nbrew link --force libxml2\nbrew link --force libxslt\nbrew link libiconv \u2014force\n\ntar zxf cabocha-0.69.tar.bz2\ncd cabocha-0.69\n./configure --with-mecab-config=`which mecab-config` --with-charset=UTF8\nmake\nmake check\nsudo make install\n\n#[output: install information]\n#.././install-sh -c -d '/usr/local/share/man/man1'\n#/usr/bin/install -c -m 644 cabocha.1 '/usr/local/share/man/man1'\n#./install-sh -c -d '/usr/local/bin'\n#/usr/bin/install -c cabocha-config '/usr/local/bin'\n#./install-sh -c -d '/usr/local/etc'\n#/usr/bin/install -c -m 644 cabocharc '/usr/local/etc'\n\ncd cabocha-0.69/python\npython setup.py install\n\ncp build/lib.macosx-10.10-intel-2.7/_CaboCha.so /Library/Python/2.7/site-packages\ncp build/lib.macosx-10.10-intel-2.7/CaboCha.py /Library/Python/2.7/site-packages\n\n\u4e0a\u8a18\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306f\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u306a\u304c\u3089\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\nCaboCha\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u30b5\u30a4\u30c8\nhttp://qiita.com/nezuq/items/f481f07fc0576b38e81d#1-10\nhttp://hotolab.net/blog/mac_mecab_cabocha/\nhttp://qiita.com/t_732_twit/items/a7956a170b1694f7ffc2\nhttp://blog.goo.ne.jp/inubuyo-tools/e/db7b43bbcfdc23a9ff2ad2f37a2c72df\nhttp://qiita.com/t_732_twit/items/a7956a170b1694f7ffc2\n\n2-2. CaboCha\u304a\u8a66\u3057\n\u304a\u8a66\u3057\u30c6\u30ad\u30b9\u30c8\u3067\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\nimport CaboCha\n\nc = CaboCha.Parser()\n\nsentence = \"\u6f31\u77f3\u306f\u3053\u306e\u672c\u3092\u9f8d\u4e4b\u4ecb\u3092\u898b\u305f\u5973\u6027\u306b\u6e21\u3057\u305f\u3002\"\n\ntree =  c.parse(sentence)\n\nprint tree.toString(CaboCha.FORMAT_TREE)\nprint tree.toString(CaboCha.FORMAT_LATTICE)\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u306f\u4e0b\u8a18\u3067\u3059\u3002\n\noutput\n  \u6f31\u77f3\u306f-----------D\n      \u3053\u306e-D       |\n        \u672c\u3092---D   |\n      \u9f8d\u4e4b\u4ecb\u3092-D   |\n            \u898b\u305f-D |\n            \u5973\u6027\u306b-D\n            \u6e21\u3057\u305f\u3002\nEOS\n\n* 0 6D 0/1 -2.475106\n\u6f31\u77f3  \u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4eba\u540d,\u540d,*,*,\u6f31\u77f3,\u30bd\u30a6\u30bb\u30ad,\u30bd\u30fc\u30bb\u30ad\n\u306f \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef\n* 1 2D 0/0 1.488413\n\u3053\u306e  \u9023\u4f53\u8a5e,*,*,*,*,*,\u3053\u306e,\u30b3\u30ce,\u30b3\u30ce\n* 2 4D 0/1 0.091699\n\u672c \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u672c,\u30db\u30f3,\u30db\u30f3\n\u3092 \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3092,\u30f2,\u30f2\n* 3 4D 0/1 2.266675\n\u9f8d\u4e4b\u4ecb   \u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4eba\u540d,\u540d,*,*,\u9f8d\u4e4b\u4ecb,\u30ea\u30e5\u30a6\u30ce\u30b9\u30b1,\u30ea\u30e5\u30fc\u30ce\u30b9\u30b1\n\u3092 \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3092,\u30f2,\u30f2\n* 4 5D 0/1 1.416783\n\u898b \u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e00\u6bb5,\u9023\u7528\u5f62,\u898b\u308b,\u30df,\u30df\n\u305f \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30bf,\u57fa\u672c\u5f62,\u305f,\u30bf,\u30bf\n* 5 6D 0/1 -2.475106\n\u5973\u6027  \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u5973\u6027,\u30b8\u30e7\u30bb\u30a4,\u30b8\u30e7\u30bb\u30a4\n\u306b \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u306b,\u30cb,\u30cb\n* 6 -1D 0/1 0.000000\n\u6e21\u3057  \u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e94\u6bb5\u30fb\u30b5\u884c,\u9023\u7528\u5f62,\u6e21\u3059,\u30ef\u30bf\u30b7,\u30ef\u30bf\u30b7\n\u305f \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30bf,\u57fa\u672c\u5f62,\u305f,\u30bf,\u30bf\n\u3002 \u8a18\u53f7,\u53e5\u70b9,*,*,*,*,\u3002,\u3002,\u3002\nEOS\n\n\n\n\"*\" \u304c\u3042\u308b\u884c\u304c\u5206\u6790\u7d50\u679c\u3067\u305d\u308c\u306b\u7d9a\u304f\u5e7e\u3064\u304b\u306e\u5358\u8a9e\u304c\u6587\u7bc0\u306b\u306a\u308a\u307e\u3059\u3002\n*\u306e\u6b21\u304c\u300c\u6587\u7bc0\u756a\u53f7\u300d\u3092\u8868\u3057\u307e\u3059\u3002\n\u305d\u306e\u6b21\u306f\u3001\u4fc2\u308a\u5148\u306e\u6587\u7bc0\u756a\u53f7\u3067\u3001\u4fc2\u308a\u5148\u304c\u306a\u3044\u5834\u5408\u306f-1\u306b\u306a\u308a\u307e\u3059\u3002\"D\"\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u826f\u3044\u3088\u3046\u3067\u3059\u3002\n\u6b21\u306e\uff12\u3064\u306e\u6570\u5b57\u306f\u4e3b\u8f9e/\u6a5f\u80fd\u8a9e\u306e\u4f4d\u7f6e\u3067\u3059\n\u6700\u5f8c\u306e\u6570\u5024\u306f\u4fc2\u308a\u95a2\u4fc2\u306e\u30b9\u30b3\u30a2\u4fc2\u308a\u3084\u3059\u3055\u306e\u5ea6\u5408\u3092\u793a\u3057\u307e\u3059. \u4e00\u822c\u306b\u5927\u304d\u306a\u5024\u307b\u3069\u4fc2\u308a\u3084\u3059\u3044\u3053\u3068\u3092\u8868\u3059\u3088\u3046\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u6700\u521d\u306e\u6587\u7bc0\u306f0\u306e\u300c\u6f31\u77f3\u306f\u300d\u3068\u306a\u308a\u3001\u4fc2\u308a\u5148\u306f6D\u306a\u306e\u3067\u300c\u6e21\u3057\u305f\u300d\u3068\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u306eCaboCha\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u307e\u3067\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u3053\u308c\u3092\u30c4\u30a4\u30fc\u30c8\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3092\u884c\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\u6587\u732e\u7b49\n\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8 - \u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4 - Tohoku University\n\u5c0f\u6797\u306e\u305e\u307f\uff0c\u4e7e\u5065\u592a\u90ce\uff0c\u677e\u672c\u88d5\u6cbb\uff0c\u7acb\u77f3\u5065\u4e8c\uff0c\u798f\u5cf6\u4fca\u4e00. \u610f\u898b\u62bd\u51fa\u306e\u305f\u3081\u306e\u8a55\u4fa1\u8868\u73fe\u306e\u53ce\u96c6. \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff0cVol.12, No.3, pp.203-222, 2005.\n\u6771\u5c71\u660c\u5f66, \u4e7e\u5065\u592a\u90ce, \u677e\u672c\u88d5\u6cbb, \u8ff0\u8a9e\u306e\u9078\u629e\u9078\u597d\u6027\u306b\u7740\u76ee\u3057\u305f\u540d\u8a5e\u8a55\u4fa1\u6975\u6027\u306e\u7372\u5f97, \u8a00\u8a9e\u51e6\u7406\u5b66\u4f1a\u7b2c14\u56de\u5e74\u6b21\u5927\u4f1a\u8ad6\u6587\u96c6, pp.584-587, 2008.\nTwitter\u89e3\u6790\u3092\u884c\u3046\u3046\u3048\u3067\u3084\u3063\u3066\u307f\u305f\u3044\u3053\u3068\u306e\uff11\u3064\u3068\u3057\u3066\u611f\u60c5\u5206\u6790\u304c\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u3067\u3059\u3088\u306d\uff1f\uff09\u8272\u3005\u306a\u624b\u6cd5\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u305d\u306e\u4e00\u756a\u7c21\u5358\u306a\u4f8b\u304b\u3089\u521d\u3081\u3066\u3060\u3093\u3060\u3093\u9ad8\u5ea6\u306b(\u3067\u304d\u308c\u3070)\u3057\u3066\u3044\u304f\u3068\u3044\u3046\u306e\u3092\u898b\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5206\u6790\u5bfe\u8c61\u30c7\u30fc\u30bf\u306f\u4eca\u56de\u3082Twitter\u3068\u3057\u307e\u3059\u3002\u305f\u3060\u3001\u3044\u307e\u307e\u3067\u306f[Twitter REST APIs](https://dev.twitter.com/rest/public)\u3067\u53d6\u5f97\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f[Twitter Stream API](https://dev.twitter.com/streaming/overview)\u3067\u3058\u3083\u3093\u3058\u3083\u304bTwitter\u30c7\u30fc\u30bf\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u304d\u3001\u305d\u308c\u306b\u5bfe\u3057\u3066\u611f\u60c5\u5206\u6790\u7d50\u679c\u3092\u6570\u5024\u5316\u3057\u3066\u5408\u308f\u305b\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\nTwitter\u30c7\u30fc\u30bf\u3092mongodb\u306b\u53d6\u5f97\u3059\u308b\u5f53\u305f\u308a\u306e\u8aac\u660e\u306f[\u4ee5\u524d\u306e\u8a18\u4e8b](http://qiita.com/kenmatsu4/items/23768cbe32fe381d54a2)\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3088\u3051\u308c\u3070\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n#1. Twitter Stream API\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057mongoDB\u306b\u683c\u7d0d\u3059\u308b\u3002#\n\n##1-1. \u6e96\u5099\u7684\u306a\u3053\u3068##\n\u307e\u305a\u306f\u4e0b\u3054\u3057\u3089\u3048\u3067\u3059\u3002\n\u5404\u7a2e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3001\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u7684\u306a\u95a2\u6570\u306e\u5ba3\u8a00\u3001DB\u3078\u306e\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n```py\nfrom requests_oauthlib import OAuth1Session\nfrom requests.exceptions import ConnectionError, ReadTimeout, SSLError\nimport json, time, exceptions, sys, datetime, pytz, re, unicodedata, pymongo\nimport oauth2 as oauth\nimport urllib2 as urllib\nimport MeCab as mc\nfrom collections import defaultdict\nfrom pymongo import MongoClient\nfrom httplib import IncompleteRead\nimport numpy as np\n\nimport logging\nfrom logging import FileHandler, Formatter\nimport logging.config\n\nconnect = MongoClient('localhost', 27017)\ndb = connect.word_info\nposi_nega_dict = db.posi_nega_dict\ndb2 = connect.twitter\nstreamdata = db2.streamdata\n\ndef str_to_date_jp(str_date):\n    dts = datetime.datetime.strptime(str_date,'%a %b %d %H:%M:%S +0000 %Y')\n    return pytz.utc.localize(dts).astimezone(pytz.timezone('Asia/Tokyo'))\n\ndef mecab_analysis(sentence):\n    t = mc.Tagger('-Ochasen -d /usr/local/Cellar/mecab/0.996/lib/mecab/dic/mecab-ipadic-neologd/')\n    sentence = sentence.replace('\\n', ' ')\n    text = sentence.encode('utf-8') \n    node = t.parseToNode(text) \n    result_dict = defaultdict(list)\n    for i in range(140):  # \u30c4\u30a4\u30fc\u30c8\u306a\u306e\u3067MAX140\u6587\u5b57\n        if node.surface != \"\":  # \u30d8\u30c3\u30c0\u3068\u30d5\u30c3\u30bf\u3092\u9664\u5916\n            word_type = node.feature.split(\",\")[0]\n            if word_type in [\"\u5f62\u5bb9\u8a5e\", \"\u52d5\u8a5e\",\"\u540d\u8a5e\", \"\u526f\u8a5e\"]:\n                plain_word = node.feature.split(\",\")[6]\n                if plain_word !=\"*\":\n                    result_dict[word_type.decode('utf-8')].append(plain_word.decode('utf-8'))\n        node = node.next\n        if node is None:\n            break\n    return result_dict\n\ndef logger_setting():\n    import logging\n    from logging import FileHandler, Formatter\n    import logging.config\n\n    logging.config.fileConfig('logging_tw.conf')\n    logger = logging.getLogger('filelogger')\n    return logger\n\nlogger = logger_setting()\n\nKEYS = { # \u81ea\u5206\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u5165\u624b\u3057\u305f\u30ad\u30fc\u3092\u4e0b\u8a18\u306b\u8a18\u8f09\n        'consumer_key':'**********',\n        'consumer_secret':'**********',\n        'access_token':'**********',\n        'access_secret''**********',\n       }\n```\n<br>\n\u4eca\u56de\u3001\u30ed\u30b0\u306fLogger\u3092\u3064\u304b\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\u3092\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30ed\u30b0\u306e\u51fa\u529b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f\u4e0b\u8a18\u3067\u3059\u3002\n\n```bash:logging_tw.conf\n# logging_tw.conf\n\n[loggers]\nkeys=root, filelogger\n\n[handlers]\nkeys= fileHandler \n\n[formatters]\nkeys=logFormatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=fileHandler\n\n[logger_filelogger]\nlevel=DEBUG\nhandlers=fileHandler\nqualname=filelogger\npropagate=0\n\n[handler_fileHandler]\nclass=handlers.RotatingFileHandler\nlevel=DEBUG\nformatter=logFormatter\nargs=('logging_tw.log',)\n\n[formatter_logFormatter]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)s\ndatefmt=\n```\n\n##1-2. \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u6c38\u7d9a\u5316##\n\n\u6771\u5317\u5927\u5b66\u306e[\u4e7e\u5148\u751f\u30fb\u5ca1\u5d0e\u5148\u751f\u306e\u7814\u7a76\u5ba4](http://www.cl.ecei.tohoku.ac.jp/index.php?Open%20Resources%2FJapanese%20Sentiment%20Polarity%20Dictionary)\u3067\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u3092\u4f7f\u3063\u3066\u611f\u60c5\u3092\u6570\u5024\u5316\u3057\u307e\u3059\u306e\u3067\u3001\u307e\u305a\u306f\n\n* \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u7528\u8a00\u7de8\uff09ver.1.0\uff082008\u5e7412\u6708\u7248\uff09 wago.121808.pn\n* \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u540d\u8a5e\u7de8\uff09ver.1.0\uff082008\u5e7412\u6708\u7248\uff09 pn.csv.m3.120408.trim\n\n\u3092[\u3053\u3053\u304b\u3089](http://www.cl.ecei.tohoku.ac.jp/index.php?Open%20Resources%2FJapanese%20Sentiment%20Polarity%20Dictionary#t6684569)\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066.py\u3068\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u7528\u8a00\u7de8\uff09\u306b\u95a2\u3057\u3066\u306f\u3001\u30dd\u30b8\u306e\u7528\u8a9e\u306f 1\u3001\u30cd\u30ac\u306e\u7528\u8a9e\u306f -1 \u3068\u6570\u5024\u5316\u3057\u3066mongodb\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u540d\u8a5e\u7de8\uff09\u306b\u3064\u3044\u3066\u306f\u3001p\u306e\u7528\u8a9e\u306f 1\u3001e\u306e\u7528\u8a9e\u306f 0\u3001n\u306e\u7528\u8a9e\u306f -1 \u3068\u6570\u5024\u5316\u3057\u3066\u540c\u3058\u304fmongodb\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u304c\u305d\u306e\u30b3\u30fc\u30c9\u3068\u306a\u308a\u307e\u3059\u3002\n\n```py\n# \u5358\u8a9e\u306e\u30dd\u30b8\u30fb\u30cd\u30ac\u8f9e\u66f8\u306emongoDB\u3078\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\n# \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u7528\u8a00\u7de8\uff09ver.1.0\uff082008\u5e7412\u6708\u7248\uff09\u3092mongodb\u3078\u30a4\u30f3\u30dd\u30fc\u30c8\n# \u30dd\u30b8\u306e\u7528\u8a9e\u306f 1 ,\u30cd\u30ac\u306e\u7528\u8a9e\u306f -1 \u3068\u6570\u5024\u5316\u3059\u308b\nwith open(\"wago.121808.pn.txt\", 'r') as f:\n    for l in f.readlines():\n        l = l.split('\\t')\n        l[1] = l[1].replace(\" \",\"\").replace('\\n','')\n        value = 1 if l[0].split('\uff08')[0]==\"\u30dd\u30b8\" else -1\n        posi_nega_dict.insert({\"word\":l[1].decode('utf-8'),\"value\":value})\n        \n\n# \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\uff08\u540d\u8a5e\u7de8\uff09ver.1.0\uff082008\u5e7412\u6708\u7248\uff09\u3092mongodb\u3078\u30a4\u30f3\u30dd\u30fc\u30c8\n# p\u306e\u7528\u8a9e\u306f 1 e\u306e\u7528\u8a9e\u306f 0 ,n\u306e\u7528\u8a9e\u306f -1 \u3068\u6570\u5024\u5316\u3059\u308b\nwith open(\"pn.csv.m3.120408.trim\", 'r') as f:\n    for l in f.readlines():\n        l = l.split('\\t')\n        \n        if l[1]==\"p\":\n            value = 1\n        elif l[1]==\"e\":\n            value = 0\n        elif l[1]==\"n\":\n            value = -1\n            \n        posi_nega_dict.insert({\"word\":l[0].decode('utf-8'),\"value\":value})  \n```\n\n##1-3. \u611f\u60c5\u5ea6\u3092\u6570\u5024\u5316\u3059\u308b\u51e6\u7406##\n\n1-2\u3067\u5358\u8a9e\u6bce\u306e\u611f\u60c5\u5024\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5316\u3067\u304d\u305f\u306e\u3067\u3001\u6587\u7ae0\u3092\u611f\u60c5\u5024\u5316\u3067\u304d\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u4eca\u56de\u306f\u300c\u521d\u6b69\u7684\u306a\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u4f55\u3082\u51e6\u7406\u3092\u884c\u308f\u305a\u3001\n\n1. \u5358\u7d14\u306b\u6587\u4e2d\u306b\u542b\u307e\u308c\u308b\u5358\u8a9e\u3092\u305d\u308c\u305e\u308c\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u306b\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\n2. \u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u306e\u6570\u5024\u3092\u5229\u7528\u3059\u308b\n3. \u4e0b\u8a18\u306e\u5f0f\u306b\u5f93\u3044\u3001\u6587\u7ae0\u306e\u611f\u60c5\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\uff08$x_i$\u306f\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u306b\u5b58\u5728\u3059\u308b\u5358\u8a9e\u306e\u611f\u60c5\u5024\u3001$n$\u306f\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8\u306b\u5b58\u5728\u3059\u308b\u5358\u8a9e\u6570\uff09\n\n```math\n{\\rm sentiment\\, value\\, of\\, the\\, sentence} \\, = \\, \\frac{1}{n}\\sum_{i=1}^{n} x_i \n```\n\u306a\u306e\u3067\u3001-1 \u301c 1\u306e\u9593\u3067\u6587\u7ae0\u306e\u5358\u8a9e\u6570\u306b\u3088\u3089\u306a\u3044\u5f62\u3067\u611f\u60c5\u5024\u3092\u5c0e\u51fa\u3067\u304d\u3001\u6587\u7ae0\u9593\u306e\u6bd4\u8f03\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002\n\n```py \n\n# \u611f\u60c5\u5ea6\u306e\u8a2d\u5b9a(\u691c\u7d22\u9ad8\u901f\u5316\u306e\u305f\u3081\u30cf\u30c3\u30b7\u30e5\u691c\u7d22\u304c\u3067\u304d\u308b\u3088\u3046\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5165\u308c\u8fbc\u3080)\npn_dict = {data['word']: data['value'] for data in posi_nega_dict.find({},{'word':1,'value':1})}\n\ndef isexist_and_get_data(data, key):\n    return data[key] if key in data else None\n\n# -1 \u301c 1\u306e\u7bc4\u56f2\u3067\u4e0e\u3048\u3089\u308c\u305f\u6587\u7ae0\uff08\u5358\u8a9e\u30ea\u30b9\u30c8\uff09\u306b\u5bfe\u3059\u308b\u611f\u60c5\u5024\u3092\u8fd4\u3059\u3002(1: \u6700\u3082\u30dd\u30b8\u3001-1:\u6700\u3082\u30cd\u30ac)\ndef get_setntiment(word_list):\n    val = 0\n    score = 0\n    word_count = 0\n    val_list = []\n    for word in word_list:\n        val = isexist_and_get_data(pn_dict, word)\n        val_list.append(val)\n        if val is not None and val != 0: # \u898b\u3064\u304b\u308c\u3070\u30b9\u30b3\u30a2\u3092\u8db3\u3057\u5408\u308f\u305b\u3066\u5358\u8a9e\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n            score += val\n            word_count += 1\n    \n    logger.debug(','.join(word_list).encode('utf-8'))       \n    logger.debug(val_list)\n    return score/float(word_count) if word_count != 0. else 0.\n```\n\n##1-4. Twitter Stream API\u304b\u3089\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 ##\n\nTwitter Stream API\u3088\u308a\u30c4\u30a4\u30fc\u30c8\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u30c4\u30a4\u30fc\u30c8\u3092\u30c0\u30a6\u30ed\u30fc\u30c9\u3057\u306a\u304c\u3089MeCab\u3067\u5f62\u614b\u7d20\u89e3\u6790\u3092\u3057\u3066\u5358\u8a9e\u3054\u3068\u306b\u30d0\u30e9\u30d0\u30e9\u306b\u3057\u3066\u540d\u8a5e\u3001\u52d5\u8a5e\u3001\u5f62\u5bb9\u8a5e\u3001\u526f\u8a5e\u3054\u3068\u306b\u30ea\u30b9\u30c8\u306b\u3057\u307e\u3059\u3002\u3044\u308f\u3086\u308bBag of Words\u3067\u3059\u306d\u3002\n\n\u3067\u3001\u305d\u306e\u5358\u8a9e\u305f\u3061\u306b\u5bfe\u3057\u3066\u3055\u304d\u307b\u3069\u5b9a\u7fa9\u3057\u305f\u95a2\u6570get_setntiment()\u3067\u611f\u60c5\u5024\u3092\u5c0e\u51fa\u3001\u3053\u308c\u3068\u5408\u308f\u305b\u3066mongodb\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n```py \n# ----- Stream\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30dd\u30fc\u30c8 ---------#\nconsumer = oauth.Consumer(key=KEYS['consumer_key'], secret=KEYS['consumer_secret'])\ntoken = oauth.Token(key=KEYS['access_token'], secret=KEYS['access_secret'])\n\nurl = 'https://stream.twitter.com/1.1/statuses/sample.json'\nparams = {}\n\nrequest = oauth.Request.from_consumer_and_token(consumer, token, http_url=url, parameters=params)\nrequest.sign_request(oauth.SignatureMethod_HMAC_SHA1(), consumer, token)\nres = urllib.urlopen(request.to_url())\n\ndef get_list_from_dict(result, key):\n    if key in result.keys():\n        result_list = result[key]\n    else:\n        result_list = []\n    return result_list\n\ncnt = 1\ntry:\n    for r in res:\n        data = json.loads(r)\n        if 'delete' in data.keys():\n            pass\n        else:    \n            if data['lang'] in ['ja']: #['ja','en','und']:\n                result = mecab_analysis(data['text'].replace('\\n',''))\n\n                noun_list      = get_list_from_dict(result, u'\u540d\u8a5e')\n                verb_list      = get_list_from_dict(result, u'\u52d5\u8a5e')\n                adjective_list = get_list_from_dict(result, u'\u5f62\u5bb9\u8a5e')\n                adverb_list    = get_list_from_dict(result, u'\u526f\u8a5e')\n\n                item = {'id':data['id'], 'screen_name': data['user']['screen_name'], \n                        'text':data['text'].replace('\\n',''), 'created_datetime':str_to_date_jp(data['created_at']),\\\n                       'verb':verb_list, 'adjective':adjective_list, 'noun': noun_list, 'adverb':adverb_list}\n                if 'lang' in data.keys():\n                    item['lang'] = data['lang']\n                else:\n                    item['lang'] = None\n                \n                #\u611f\u60c5\u5206\u6790\u7d50\u679c\u3092\u8ffd\u52a0 ####################\n                word_list = [word for k in result.keys() for word in result[k] ]\n                item['sentiment'] = get_setntiment(word_list)\n                \n                streamdata.insert(item)\n                if cnt%1000==0:\n                    logger.info(\"%d, \"%cnt)\n                cnt += 1\nexcept IncompleteRead as e:\n    logger.error( '=== \u30a8\u30e9\u30fc\u5185\u5bb9 ===')\n    logger.error(  'type:' + str(type(e)))\n    logger.error(  'args:' + str(e.args))\n    logger.error(  'message:' + str(e.message))\n    logger.error(  'e self:' + str(e))\n    try:\n        if type(e) == exceptions.KeyError:\n            logger.error( data.keys())\n    except:\n        pass\nexcept Exception as e:\n    logger.error( '=== \u30a8\u30e9\u30fc\u5185\u5bb9 ===')\n    logger.error( 'type:' + str(type(e)))\n    logger.error( 'args:' + str(e.args))\n    logger.error( 'message:' + str(e.message))\n    logger.error( 'e self:' + str(e))\n    try:\n        if type(e) == exceptions.KeyError:\n            logger.error( data.keys())\n    except:\n        pass \nexcept:\n    logger.error( \"error.\")\n\nlogger.info( \"finished.\")\n\n```\n\n\u3053\u3053\u307e\u3067\u304c\u5358\u7d14\u306b\u5358\u8a9e\u3054\u3068\u306b\u611f\u60c5\u5024\u3092\u5272\u308a\u5f53\u3066\u3066\u5e73\u5747\u3092\u3068\u308b\u3068\u3044\u3046\u5358\u7d14\u306a\u65b9\u6cd5\u3067\u5206\u6790\u3092\u884c\u3046\u65b9\u6cd5\u3067\u3057\u305f\u3002\n\u4eca\u5f8c\u306e\u5c55\u958b\u3068\u3057\u3066\u306f\u3001\u3055\u3089\u306a\u308b\u524d\u51e6\u7406\u3068\u3057\u3066Spam\u5206\u985e\u3001\u307e\u305f\u3001\u73fe\u72b6\u3060\u3068\u5358\u8a9e\u9593\u306e\u95a2\u9023\u6027\u3092\u8003\u616e\u306b\u5165\u308c\u305f\u51e6\u7406\u304c\u8ab2\u984c\u3068\u306a\u308b\u3068\u8003\u3048\u3066\u3044\u307e\u3059\n\u7279\u306b\u300c\u53ef\u611b\u304f\u306a\u3044\u300d\u306e\u3088\u3046\u306a\u5358\u8a9e\u306f\u300c\u53ef\u611b\u3044\u300d\u3068\u300c\u306a\u3044\u300d\u306b\u5206\u304b\u308c\u3066\u3001\u300c\u306a\u3044\u300d\u304c\u5426\u5b9a\u306e\u305f\u3081\u3001\u300c\u53ef\u611b\u3044\u300d\u304c+1.0\u306e\u30dd\u30b8\u30c6\u30a3\u30d6\u8868\u73fe\u3092\u300c\u306a\u3044\u300d\u3067\u6253\u3061\u6d88\u3057\u3066-1.0\u3068\u3059\u308b\u3053\u3068\u304c\u81ea\u7136\u306a\u306e\u3067\u3059\u304c\u3001\u73fe\u72b6\u306f\u300c\u53ef\u611b\u3044\u300d\u3060\u3051\u304c\u51e6\u7406\u3055\u308c+1.0\u3068\u306a\u308a\u771f\u9006\u306e\u7d50\u679c\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\n\u3053\u308c\u3092\u6b63\u3057\u304f\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u300c\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u300d\u3068\u3044\u3046\u624b\u6cd5\u3067\u300c\u306a\u3044\u300d\u304c\u3069\u306e\u5358\u8a9e\u306b\u304b\u304b\u3063\u3066\u3044\u308b\u304b\u3092\u95a2\u9023\u3065\u3051\u3001\u89e3\u91c8\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u6b21\u306e\u7bc0\u3067\u305d\u306e\u4fc2\u308a\u53d7\u3051\u5206\u6790\u30e9\u30a4\u30d6\u30e9\u30eaCaboCha\u3092\u307e\u305a\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#2. \u4fc2\u308a\u53d7\u3051\u89e3\u6790#\n\n##2-1. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30eaCaboCha\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb##\n\u3068\u3044\u3046\u3053\u3068\u3067\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30eaCaboCha [http://taku910.github.io/cabocha/] (http://taku910.github.io/cabocha/)\u306eMac\u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u6271\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304b\u306a\u304b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u624b\u9593\u53d6\u3063\u305f\u306e\u3067\u3001\u53c2\u8003\u306b\u306a\u308c\u3070\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n**CaboCha\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9**\n [https://drive.google.com/folderview?id=0B4y35FiV1wh7cGRCUUJHVTNJRnM&usp=sharing#list](https://drive.google.com/folderview?id=0B4y35FiV1wh7cGRCUUJHVTNJRnM&usp=sharing#list)\n\nCaboCha\u3092\u5165\u308c\u308b\u306b\u306fCRF+\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n**CRF+\u306e\u30da\u30fc\u30b8**\nhttp://taku910.github.io/crfpp/#install\n\n**CRF+\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9**\nhttps://drive.google.com/folderview?id=0B4y35FiV1wh7fngteFhHQUN2Y1B5eUJBNHZUemJYQV9VWlBUb3JlX0xBdWVZTWtSbVBneU0&usp=drive_web#list\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u5f8c\u306f\u89e3\u51cd\u3057\u3066make & install\u3057\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u5fc5\u8981\u306a\u74b0\u5883\u5909\u6570\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u305d\u306e\u9069\u7528\u306b\u3064\u3044\u3066\u3082\u4e0b\u8a18\u3067\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n```bash\ntar zxfv CRF++-0.58.tar\ncd CRF++-0.58\n./configure \nmake\nsudo make install\n\nexport LIBRARY_PATH=\"/usr/local/include:/usr/local/lib:\"\nexport CPLUS_INCLUDE_PATH=\"/usr/local/include:/opt/local/include\"\nexport OBJC_INCLUDE_PATH=\"/usr/local/include:/opt/local/lib\"\n\nbrew tap homebrew/dupes\nbrew install libxml2 libxslt libiconv\nbrew link --force libxml2\nbrew link --force libxslt\nbrew link libiconv \u2014force\n\ntar zxf cabocha-0.69.tar.bz2\ncd cabocha-0.69\n./configure --with-mecab-config=`which mecab-config` --with-charset=UTF8\nmake\nmake check\nsudo make install\n\n#[output: install information]\n#.././install-sh -c -d '/usr/local/share/man/man1'\n#/usr/bin/install -c -m 644 cabocha.1 '/usr/local/share/man/man1'\n#./install-sh -c -d '/usr/local/bin'\n#/usr/bin/install -c cabocha-config '/usr/local/bin'\n#./install-sh -c -d '/usr/local/etc'\n#/usr/bin/install -c -m 644 cabocharc '/usr/local/etc'\n\ncd cabocha-0.69/python\npython setup.py install\n\ncp build/lib.macosx-10.10-intel-2.7/_CaboCha.so /Library/Python/2.7/site-packages\ncp build/lib.macosx-10.10-intel-2.7/CaboCha.py /Library/Python/2.7/site-packages\n```\n\n\u4e0a\u8a18\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306f\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u306a\u304c\u3089\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n##CaboCha\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u30b5\u30a4\u30c8##\nhttp://qiita.com/nezuq/items/f481f07fc0576b38e81d#1-10\nhttp://hotolab.net/blog/mac_mecab_cabocha/\nhttp://qiita.com/t_732_twit/items/a7956a170b1694f7ffc2\nhttp://blog.goo.ne.jp/inubuyo-tools/e/db7b43bbcfdc23a9ff2ad2f37a2c72df\nhttp://qiita.com/t_732_twit/items/a7956a170b1694f7ffc2\n\n##2-2. CaboCha\u304a\u8a66\u3057##\n\n\u304a\u8a66\u3057\u30c6\u30ad\u30b9\u30c8\u3067\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py\nimport CaboCha\n\nc = CaboCha.Parser()\n\nsentence = \"\u6f31\u77f3\u306f\u3053\u306e\u672c\u3092\u9f8d\u4e4b\u4ecb\u3092\u898b\u305f\u5973\u6027\u306b\u6e21\u3057\u305f\u3002\"\n\ntree =  c.parse(sentence)\n\nprint tree.toString(CaboCha.FORMAT_TREE)\nprint tree.toString(CaboCha.FORMAT_LATTICE)\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u306f\u4e0b\u8a18\u3067\u3059\u3002\n\n```bash:output\n  \u6f31\u77f3\u306f-----------D\n      \u3053\u306e-D       |\n        \u672c\u3092---D   |\n      \u9f8d\u4e4b\u4ecb\u3092-D   |\n            \u898b\u305f-D |\n            \u5973\u6027\u306b-D\n            \u6e21\u3057\u305f\u3002\nEOS\n\n* 0 6D 0/1 -2.475106\n\u6f31\u77f3\t\u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4eba\u540d,\u540d,*,*,\u6f31\u77f3,\u30bd\u30a6\u30bb\u30ad,\u30bd\u30fc\u30bb\u30ad\n\u306f\t\u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef\n* 1 2D 0/0 1.488413\n\u3053\u306e\t\u9023\u4f53\u8a5e,*,*,*,*,*,\u3053\u306e,\u30b3\u30ce,\u30b3\u30ce\n* 2 4D 0/1 0.091699\n\u672c\t\u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u672c,\u30db\u30f3,\u30db\u30f3\n\u3092\t\u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3092,\u30f2,\u30f2\n* 3 4D 0/1 2.266675\n\u9f8d\u4e4b\u4ecb\t\u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4eba\u540d,\u540d,*,*,\u9f8d\u4e4b\u4ecb,\u30ea\u30e5\u30a6\u30ce\u30b9\u30b1,\u30ea\u30e5\u30fc\u30ce\u30b9\u30b1\n\u3092\t\u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3092,\u30f2,\u30f2\n* 4 5D 0/1 1.416783\n\u898b\t\u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e00\u6bb5,\u9023\u7528\u5f62,\u898b\u308b,\u30df,\u30df\n\u305f\t\u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30bf,\u57fa\u672c\u5f62,\u305f,\u30bf,\u30bf\n* 5 6D 0/1 -2.475106\n\u5973\u6027\t\u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u5973\u6027,\u30b8\u30e7\u30bb\u30a4,\u30b8\u30e7\u30bb\u30a4\n\u306b\t\u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u306b,\u30cb,\u30cb\n* 6 -1D 0/1 0.000000\n\u6e21\u3057\t\u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e94\u6bb5\u30fb\u30b5\u884c,\u9023\u7528\u5f62,\u6e21\u3059,\u30ef\u30bf\u30b7,\u30ef\u30bf\u30b7\n\u305f\t\u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30bf,\u57fa\u672c\u5f62,\u305f,\u30bf,\u30bf\n\u3002\t\u8a18\u53f7,\u53e5\u70b9,*,*,*,*,\u3002,\u3002,\u3002\nEOS\n\n```\n\n\"*\" \u304c\u3042\u308b\u884c\u304c\u5206\u6790\u7d50\u679c\u3067\u305d\u308c\u306b\u7d9a\u304f\u5e7e\u3064\u304b\u306e\u5358\u8a9e\u304c\u6587\u7bc0\u306b\u306a\u308a\u307e\u3059\u3002\n\n*\u306e\u6b21\u304c\u300c\u6587\u7bc0\u756a\u53f7\u300d\u3092\u8868\u3057\u307e\u3059\u3002\n\u305d\u306e\u6b21\u306f\u3001\u4fc2\u308a\u5148\u306e\u6587\u7bc0\u756a\u53f7\u3067\u3001\u4fc2\u308a\u5148\u304c\u306a\u3044\u5834\u5408\u306f-1\u306b\u306a\u308a\u307e\u3059\u3002\"D\"\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u826f\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u6b21\u306e\uff12\u3064\u306e\u6570\u5b57\u306f\u4e3b\u8f9e/\u6a5f\u80fd\u8a9e\u306e\u4f4d\u7f6e\u3067\u3059\n\n\u6700\u5f8c\u306e\u6570\u5024\u306f\u4fc2\u308a\u95a2\u4fc2\u306e\u30b9\u30b3\u30a2\u4fc2\u308a\u3084\u3059\u3055\u306e\u5ea6\u5408\u3092\u793a\u3057\u307e\u3059. \u4e00\u822c\u306b\u5927\u304d\u306a\u5024\u307b\u3069\u4fc2\u308a\u3084\u3059\u3044\u3053\u3068\u3092\u8868\u3059\u3088\u3046\u3067\u3059\u3002\n\n\u306a\u306e\u3067\u3001\u6700\u521d\u306e\u6587\u7bc0\u306f0\u306e\u300c\u6f31\u77f3\u306f\u300d\u3068\u306a\u308a\u3001\u4fc2\u308a\u5148\u306f6D\u306a\u306e\u3067\u300c\u6e21\u3057\u305f\u300d\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u306eCaboCha\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u307e\u3067\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u3053\u308c\u3092\u30c4\u30a4\u30fc\u30c8\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3092\u884c\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n##\u53c2\u8003\u6587\u732e\u7b49##\n[\u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8 - \u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4 - Tohoku University](http://www.cl.ecei.tohoku.ac.jp/index.php?Open%20Resources%2FJapanese%20Sentiment%20Polarity%20Dictionary)\n\u5c0f\u6797\u306e\u305e\u307f\uff0c\u4e7e\u5065\u592a\u90ce\uff0c\u677e\u672c\u88d5\u6cbb\uff0c\u7acb\u77f3\u5065\u4e8c\uff0c\u798f\u5cf6\u4fca\u4e00. \u610f\u898b\u62bd\u51fa\u306e\u305f\u3081\u306e\u8a55\u4fa1\u8868\u73fe\u306e\u53ce\u96c6. \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff0cVol.12, No.3, pp.203-222, 2005.\n\u6771\u5c71\u660c\u5f66, \u4e7e\u5065\u592a\u90ce, \u677e\u672c\u88d5\u6cbb, \u8ff0\u8a9e\u306e\u9078\u629e\u9078\u597d\u6027\u306b\u7740\u76ee\u3057\u305f\u540d\u8a5e\u8a55\u4fa1\u6975\u6027\u306e\u7372\u5f97, \u8a00\u8a9e\u51e6\u7406\u5b66\u4f1a\u7b2c14\u56de\u5e74\u6b21\u5927\u4f1a\u8ad6\u6587\u96c6, pp.584-587, 2008.\n"}