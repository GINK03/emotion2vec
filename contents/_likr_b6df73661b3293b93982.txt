{"context": " More than 1 year has passed since last update.\u57f7\u7b46\u8005\u306e\u5fd9\u3057\u3055\u304c\uff1c\u52a0\u901f\uff1e\u3055\u308c\u3066\u308b\u6c17\u304c\u3059\u308bGPGPU Advent Calendar\u306e13\u65e5\u76ee\u3067\u3059\u3002\n\u300cGPGPU\u3067\u3053\u3093\u306a\u306e\u901f\u304f\u3057\u3066\u307f\u305f\u300d\u3063\u3066\u3044\u3046\u30cd\u30bf\u304c\u307e\u3060\u5c11\u306a\u3044\u306e\u3067\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u95a2\u897fGPGPU\u52c9\u5f37\u4f1a #2\u306b\u3066\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u30bf\u30a4\u30c8\u30eb\u3067\u767a\u8868\u3092\u884c\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u305d\u308c\u3068\u306f\u7570\u306a\u3063\u305f\u30a2\u30d7\u30ed\u30fc\u30c1\u306e\u5185\u5bb9\u3067\u3059\u3002\n\n\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3068\u306f\nWikipedia\u5148\u751f\u306e\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u306e\u30da\u30fc\u30b8\u306b\u3088\u308b\u3068\u3053\u3046\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u5bb9\u91cf C \u306e\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u304c\u4e00\u3064\u3068\u3001n \u500b\u306e\u54c1\u7269\uff08\u5404\u3005\u3001\u4fa1\u5024 p_i, \u5bb9\u7a4d c_i\uff09\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u5bb9\u91cf C \u3092\u8d85\u3048\u306a\u3044\u7bc4\u56f2\u3067\u3044\u304f\u3064\u304b\u306e\u54c1\u7269\u3092\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b\u8a70\u3081\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b\u5165\u308c\u305f\u54c1\u7269\u306e\u4fa1\u5024\u306e\u548c\u3092\u6700\u5927\u5316\u3059\u308b\u306b\u306f\u3069\u306e\u54c1\u7269\u3092\u9078\u3079\u3070\u3088\u3044\u304b\n\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7cfb\u3067\u306f\u3088\u308a\u5358\u7d14\u306b\u3001\u6700\u5927\u5316\u3055\u308c\u305f\u4fa1\u5024\u306e\u548c(\u6700\u9069\u5024\u3084\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u3068\u547c\u3070\u308c\u307e\u3059)\u3092\u6c42\u3081\u3088\u3068\u3044\u3046\u554f\u984c\u304c\u51fa\u984c\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u3001SPOJ 3321\u306a\u3093\u304b\u306f\u305d\u306e\u4f8b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3092\u89e3\u304f\u4ee3\u8868\u7684\u306a\u65b9\u6cd5\u306f\u52d5\u7684\u8a08\u753b\u6cd5\u3068\u3044\u3063\u3066\u3001Web\u4e0a\u3067\u3082\u305f\u304f\u3055\u3093\u89e3\u8aac\u304c\u3042\u308b\u307b\u304b\u3001\u3053\u308c\u306b\u3064\u3044\u3066\u8f09\u3063\u3066\u308b\u30ab\u30b8\u30e5\u30a2\u30eb\u306a\u66f8\u7c4d\u3068\u3057\u3066\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\u30c1\u30e3\u30ec\u30f3\u30b8\u30d6\u30c3\u30af\u3042\u305f\u308a\u304c\u6709\u540d\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3068\u308a\u3042\u3048\u305aGPGPU\u3067\u89e3\u3044\u3066\u307f\u308b\n\u3068\u308a\u3042\u3048\u305a\u5f8c\u8005\u306e\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u3060\u3051\u3092\u6c42\u3081\u308b\u30d1\u30bf\u30fc\u30f3\u306eCPU\u7248\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u30b6\u30c3\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002Item\u69cb\u9020\u4f53\u306f\u4ee5\u964d\u306e\u30bd\u30fc\u30b9\u3067\u5171\u901a\u3067\u3059\u3002\n\nCPU\u7248\nstruct Item\n{\n    int p;\n    int c;\n};\n\n\nint cpu_dp(const int n, const Item* items, const int C)\n{\n    std::vector<int> buffer(C + 1);\n    for (int j = 0; j < n; ++j) {\n        const Item item = items[j];\n        for (int i = C; i >= item.c; --i) {\n            const int v0 = buffer[i];\n            const int v1 = buffer[i - item.c] + item.p;\n            if (v1 > v0) {\n                buffer[i] = v1;\n            }\n        }\n    }\n    return buffer.back();\n}\n\n\n\u3055\u3089\u306b\u30b5\u30af\u30c3\u3068GPU\u7248\u3082\u5b9f\u88c5\u3057\u307e\u3059\u3002\u74b0\u5883\u306fCUDA+Thrust\u3067\u3059\u3002\n\nGPU\u7248\nconst int THREAD_NUM = 512;\n\n\n__global__ void dp_step(\n        const int* buffer0,\n        int* buffer1,\n        const Item item,\n        const int C)\n{\n    const int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (item.c <= i && i <= C) {\n        const int v0 = buffer0[i];\n        const int v1 = buffer0[i - item.c] + item.p;\n        buffer1[i] = max(v0, v1);\n    }\n}\n\n\nint cuda_dp(const int n, const Item* items, const int C)\n{\n    const int size = C + 1;\n    thrust::device_vector<int> buffer0(size, 0);\n    thrust::device_vector<int> buffer1(size, 0);\n\n    const int thread_num = THREAD_NUM;\n    const int block_num = size / thread_num + (size % thread_num != 0);\n    for (int j = 0; j < n; ++j) {\n        dp_step<<<block_num, thread_num>>>(\n                thrust::raw_pointer_cast(buffer0.data()),\n                thrust::raw_pointer_cast(buffer1.data()),\n                items[j], C);\n        buffer0.swap(buffer1);\n    }\n    return buffer0.back();\n}\n\n\n\u8a08\u7b97\u6642\u9593\u306e\u6bd4\u8f03\u3092\u3057\u307e\u3059\u3002\u4f7f\u7528\u3057\u305f\u30de\u30b7\u30f3\u306eCPU\u304cXeon W3520\u3001GPU\u304cTesla C2050\u3067\u3059\u3002\u307e\u305f\u3001\u8a08\u7b97\u3059\u308b\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u306f\u54c1\u7269\u6570n\u304c10,000\u500b\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306e\u5bb9\u91cfC\u304c\u7d042,500,000\u306e\u307b\u3093\u306e\u3061\u3087\u3063\u3068\u5927\u304d\u306a\u554f\u984c\u3067\u3059\u3002\n\n\n\n\u89e3\u6cd5\n\u8a08\u7b97\u6642\u9593\uff08\u79d2\uff09\n\n\n\n\nCPU\n33.751\n\n\nGPU\n2.179\n\n\n\n\u8a08\u7b97\u6642\u9593\u306e\u5dee\u304c15.5\u500d\u3068\u3088\u304f\u3042\u308a\u305d\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u89e3\u306e\u30c8\u30ec\u30fc\u30b9\n\u3053\u3053\u307e\u3067\u3067\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u306f\u305d\u3053\u305d\u3053\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\u3067\u306f\u3001\u6700\u521d\u306e\u554f\u984c\u5b9a\u7fa9\u306b\u623b\u3063\u3066\u300c\u3069\u306e\u54c1\u7269\u3092\u9078\u3079\u3070\u3088\u3044\u304b\u300d\u307e\u3067\u6c42\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5927\u7b4b\u306f\u305d\u308c\u305e\u308c\u4e0a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\nCPU\u7248\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u3042\u308a\uff09\nint cpu_dp_sol(const int n, const Item* items, const int C)\n{\n    std::vector<int> buffer(C + 1);\n    const int solution_size = n / 32 + (n % 32 != 0);\n    std::vector<std::vector<int> > solution(solution_size, std::vector<int>(C + 1));\n    int sol_index = 0;\n    for (int j = 0; j < n; ++j) {\n        const Item item = items[j];\n        for (int i = C; i >= item.c; --i) {\n            solution[sol_index][i] <<= 1;\n            const int v0 = buffer[i];\n            const int v1 = buffer[i - item.c] + item.p;\n            if (v1 > v0) {\n                buffer[i] = v1;\n                solution[sol_index][i] &= 1;\n            }\n        }\n        if (j % 32 == 31) {\n            ++sol_index;\n        }\n    }\n    return buffer.back();\n}\n\n\n\nGPU\u7248\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u3042\u308a\uff09\n__global__ void dp_sol_step(\n        const int* buffer0,\n        int* buffer1,\n        const Item item,\n        const int C,\n        int* solution)\n{\n    const int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (item.c <= i && i <= C) {\n        const int v0 = buffer0[i];\n        const int v1 = buffer0[i - item.c] + item.p;\n        buffer1[i] = max(v0, v1);\n        solution[i] = (solution[i] << 1) & (v1 > v0);\n    }\n}\n\n\nint cuda_dp_sol(const int n, const Item* items, const int C)\n{\n    const int size = C + 1;\n    thrust::device_vector<int> buffer0(size, 0);\n    thrust::device_vector<int> buffer1(size, 0);\n    thrust::device_vector<int> solution(size, 0);\n    const int solution_size = n / 32 + (n % 32 != 0);\n    std::vector<std::vector<int> > host_solution(solution_size, std::vector<int>(size));\n\n    const int thread_num = THREAD_NUM;\n    const int block_num = size / thread_num + (size % thread_num != 0);\n    int sol_index = 0;\n    for (int j = 0; j < n; ++j) {\n        dp_sol_step<<<block_num, thread_num>>>(\n                thrust::raw_pointer_cast(buffer0.data()),\n                thrust::raw_pointer_cast(buffer1.data()),\n                items[j], C,\n                thrust::raw_pointer_cast(solution.data()));\n        if (j % 32 == 31) {\n            thrust::copy_n(solution.begin(), size, host_solution[sol_index].begin());\n            ++sol_index;\n        }\n        buffer0.swap(buffer1);\n    }\n    thrust::copy_n(solution.begin(), size, host_solution[sol_index].begin());\n    return buffer0.back();\n}\n\n\nsolution\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u89e3\u3092\u5fa9\u5143\u3059\u308b\u51e6\u7406\u306f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001CPU\u7248GPU\u7248\u5171\u901a\u306b\u306a\u308b\u306e\u3067\u6c17\u306b\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u8a08\u7b97\u6642\u9593\u306f\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n\n\u89e3\u6cd5\n\u8a08\u7b97\u6642\u9593\uff08\u79d2\uff09\n\n\n\n\nCPU\n82.563\n\n\nGPU\n31.648\n\n\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u3092\u6c42\u3081\u308b\u5834\u5408\u3068\u6bd4\u8f03\u3057\u3066\u5927\u91cf\u306e\u30db\u30b9\u30c8\u5074\u30e1\u30e2\u30ea\u3068\u30c7\u30fc\u30bf\u8ee2\u9001\u3092\u5fc5\u8981\u3068\u3057\u3001GPU\u306e\u5834\u5408\u3067\u3082\u8a08\u7b97\u6642\u9593\u304c\u5927\u5e45\u306b\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u305d\u308c\u306b\u3057\u3066\u3082\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u3066\u3044\u308b\u6c17\u306f\u3057\u307e\u3059\u304c\u3001\u30db\u30b9\u30c8\u5074\u306e\u74b0\u5883\u3082\u5f71\u97ff\u3057\u3066\u308b\u3088\u3046\u3067\u3001\u3053\u308c\u3082\u3053\u306e\u8a18\u4e8b\u306e\u672c\u7b4b\u3067\u306f\u306a\u3044\u306e\u3067\u653e\u7f6e\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u89e3\u306e\u30c8\u30ec\u30fc\u30b9\u3092\u9ad8\u901f\u5316\u3059\u308b\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u57fa\u672c\u306f\u300c\u9045\u3044\u90e8\u5206\u3092\u901f\u304f\u3059\u308b\u300d\u3053\u3068\u3067\u3059\u3002\u89e3\u306e\u30c8\u30ec\u30fc\u30b9\u306b\u306f\u89e3\u60c5\u5831\u306e\u4fdd\u6301\u3084\u8ee2\u9001\u306b\u5927\u5e45\u306a\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u3066\u3001\u5b9f\u88c5\u9762\u3067\u306e\u9ad8\u901f\u5316\u306f\u3042\u307e\u308a\u671f\u5f85\u3067\u304d\u306a\u3055\u305d\u3046\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5de5\u592b\u3092\u3057\u3001\u6839\u672c\u7684\u306b\u4fdd\u6301\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u89e3\u60c5\u5831\u3092\u6e1b\u3089\u3059\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3067\u306f\u3001\u54c1\u7269\u3092\u3042\u3089\u304b\u3058\u3081\u3001\u4fa1\u5024\u3092\u5bb9\u7a4d\u3067\u5272\u3063\u305f\u5024\uff08\u52b9\u7528\u5024\uff09\u3067\u30bd\u30fc\u30c8\u3057\u3066\u304a\u304f\u3068\u3001\u52b9\u7528\u5024\u306e\u5927\u304d\u3044\u5074\u306e\u5927\u90e8\u5206\u306e\u54c1\u7269\u306f\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306b\u8a70\u3081\u308b\u54c1\u7269\u3068\u3057\u3066\u9078\u3070\u308c\u3001\u9006\u306b\u5c0f\u3055\u3044\u5074\u306e\u5927\u90e8\u5206\u306f\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306b\u8a70\u3081\u3089\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u7d4c\u9a13\u7684\u306b\u308f\u304b\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u89b3\u5bdf\u306b\u57fa\u3065\u3051\u3070\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3067\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u54c1\u7269\u306e\u500b\u6570\u306f\u5168\u54c1\u7269\u306e\u500b\u6570\u3068\u6bd4\u3079\u308b\u3068\u975e\u5e38\u306b\u5c11\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u3001\u3053\u306e\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u54c1\u7269\u306e\u90e8\u5206\u3092\u30b3\u30a2\u3068\u547c\u3073\u307e\u3059\u3002\n\u30b3\u30a2\u306e\u8003\u3048\u65b9\u3092\u4f7f\u3046\u3068\u3001\u6700\u521d\u306b\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u3092\u6c42\u3081\u308c\u3070\u3001\u30b3\u30a2\u306e\u5468\u308a\u306e\u5c11\u6570\u306e\u54c1\u7269\u3067\u3060\u3051\u89e3\u306e\u30c8\u30ec\u30fc\u30b9\u3092\u884c\u3048\u3070\u3088\u304f\u306a\u308a\u3001\u8a08\u7b97\u6642\u9593\u3082\u6d88\u8cbb\u3059\u308b\u30e1\u30e2\u30ea\u91cf\u3082\u5927\u5e45\u306b\u6291\u3048\u3089\u308c\u308b\u3067\u3057\u3087\u3046\u3002\u30b3\u30a2\u306e\u30b5\u30a4\u30ba\u306f\u54c1\u7269\u6570\u304c10000\u3050\u3089\u3044\u3060\u3068sqrt(n) ~ 2 * sqrt(n)\u3050\u3089\u3044\u3042\u308c\u3070\u5341\u5206\u3067\u3059\u3002\n\nGPU\u7248\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u6539\u826f\uff09\nstruct ItemComparator\n{\n    __host__ __device__ bool operator()(const Item& item1, const Item& item2)\n    {\n        return item1.p * item2.c > item2.p * item1.c;\n    }\n};\n\n\nint cuda_dp_core(const int n, const Item* items, const int C)\n{\n    const int opt = cuda_dp(n, items, C);\n\n    thrust::device_vector<Item> dev_items(items, items + n);\n    thrust::sort(dev_items.begin(), dev_items.end(), ItemComparator());\n    thrust::host_vector<Item> host_items(dev_items);\n\n    int s;\n    int sum_c = 0;\n    for (int j = 0; j < n; ++j) {\n        sum_c += host_items[j].c;\n        if (sum_c > C) {\n            s = j;\n            break;\n        }\n    }\n\n    int delta = (int)std::sqrt(n);\n    const int core_inc = 10;\n    int core_opt;\n    do  {\n        const int core_size = delta * 2;\n        const Item* core_start =\n            thrust::raw_pointer_cast(host_items.data()) + s - delta;\n\n        int p_offset = 0;\n        int core_C = C;\n        const int stop = s - delta;\n        for (int j = 0; j < stop; ++j) {\n            p_offset += host_items[j].p;\n            core_C -= host_items[j].c;\n        }\n\n        core_opt = cuda_dp(core_size, core_start, core_C) + p_offset;\n\n        delta += core_inc;\n    } while (core_opt != opt);\n    return opt;\n}\n\n\n\u5b9f\u884c\u6642\u9593\u3092\u3053\u308c\u307e\u3067\u306e2\u3064\u306eGPU\u7248\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\n\n\u89e3\u6cd5\n\u8a08\u7b97\u6642\u9593\uff08\u79d2\uff09\n\n\n\n\nGPU\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u306a\u3057\uff09\n2.179\n\n\nGPU\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u3042\u308a\uff09\n31.648\n\n\nGPU\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u6539\u826f\uff09\n2.184\n\n\n\n\u89e3\u30c8\u30ec\u30fc\u30b9\u306b\u304b\u304b\u308b\u6642\u9593\u304c\u5927\u5e45\u306b\u77ed\u7e2e\u3055\u308c\u3066\u3001\u89e3\u30c8\u30ec\u30fc\u30b9\u306a\u3057\u306e\u5834\u5408\u3068\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3082\u3046\u3061\u3087\u3063\u3068\u3072\u306d\u3063\u305f\u3089\u8ad6\u6587\u3068\u304b\u306b\u3082\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u3067\u3059\u304b\u306d\u3002\uff08\u9069\u5f53\n\n\u6700\u5f8c\u306b\nGPGPU\u3001\u3072\u3044\u3066\u306f\u5e83\u7fa9\u306eHPC\u306b\u306f\u3001\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u77e5\u8b58\u3060\u3051\u3067\u306a\u304f\u554f\u984c\u9818\u57df\u306e\u77e5\u8b58\u3082\u91cd\u8981\u3060\u3068\u611f\u3058\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u610f\u5473\u3067\u3082\u3001\u30d7\u30ed\u30bb\u30c3\u30b5\u3084\u4e26\u5217\u8a08\u7b97\u306e\u5c02\u9580\u5bb6\u304c\u4e16\u306e\u3042\u3089\u3086\u308b\u554f\u984c\u9818\u57df\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9ad8\u901f\u5316\u3059\u308b\u3068\u3044\u3063\u305f\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3067\u3001\u9006\u306b\u554f\u984c\u9818\u57df\u306e\u5c02\u9580\u5bb6\u304c\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u77e5\u8b58\u3092\u6301\u3063\u3066\u81ea\u5206\u306e\u554f\u984c\u9818\u57df\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9ad8\u901f\u5316\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3068\u79c1\u306f\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u8fd1\u5e74\u306eGPGPU\u306e\u6587\u5316\u306f\u554f\u984c\u9818\u57df\u306e\u5c02\u9580\u5bb6\u306bHPC\u306e\u9580\u53e3\u3092\u5e83\u3052\u3066\u304f\u308c\u305f\u3068\u3044\u3046\u70b9\u3067\u975e\u5e38\u306b\u5927\u304d\u306a\u5f79\u5272\u3092\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3002Xeon Phi\u3068\u304b\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u5f8c\u306eGPGPU\u306e\u52d5\u5411\u3082\u307e\u3060\u307e\u3060\u697d\u3057\u307f\u3067\u3059\u306d\u3002\n\n\u57f7\u7b46\u8005\u306e\u5fd9\u3057\u3055\u304c\uff1c\u52a0\u901f\uff1e\u3055\u308c\u3066\u308b\u6c17\u304c\u3059\u308b[GPGPU Advent Calendar](http://atnd.org/events/34539)\u306e13\u65e5\u76ee\u3067\u3059\u3002\n\n\u300cGPGPU\u3067\u3053\u3093\u306a\u306e\u901f\u304f\u3057\u3066\u307f\u305f\u300d\u3063\u3066\u3044\u3046\u30cd\u30bf\u304c\u307e\u3060\u5c11\u306a\u3044\u306e\u3067\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002[\u95a2\u897fGPGPU\u52c9\u5f37\u4f1a #2](http://connpass.com/event/865/)\u306b\u3066\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u30bf\u30a4\u30c8\u30eb\u3067\u767a\u8868\u3092\u884c\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u305d\u308c\u3068\u306f\u7570\u306a\u3063\u305f\u30a2\u30d7\u30ed\u30fc\u30c1\u306e\u5185\u5bb9\u3067\u3059\u3002\n\n# \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3068\u306f\n\n[Wikipedia\u5148\u751f\u306e\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u306e\u30da\u30fc\u30b8](http://ja.wikipedia.org/wiki/%E3%83%8A%E3%83%83%E3%83%97%E3%82%B5%E3%83%83%E3%82%AF%E5%95%8F%E9%A1%8C)\u306b\u3088\u308b\u3068\u3053\u3046\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n> \u5bb9\u91cf C \u306e\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u304c\u4e00\u3064\u3068\u3001n \u500b\u306e\u54c1\u7269\uff08\u5404\u3005\u3001\u4fa1\u5024 p_i, \u5bb9\u7a4d c_i\uff09\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u5bb9\u91cf C \u3092\u8d85\u3048\u306a\u3044\u7bc4\u56f2\u3067\u3044\u304f\u3064\u304b\u306e\u54c1\u7269\u3092\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b\u8a70\u3081\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b\u5165\u308c\u305f\u54c1\u7269\u306e\u4fa1\u5024\u306e\u548c\u3092\u6700\u5927\u5316\u3059\u308b\u306b\u306f\u3069\u306e\u54c1\u7269\u3092\u9078\u3079\u3070\u3088\u3044\u304b\n\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7cfb\u3067\u306f\u3088\u308a\u5358\u7d14\u306b\u3001\u6700\u5927\u5316\u3055\u308c\u305f\u4fa1\u5024\u306e\u548c(\u6700\u9069\u5024\u3084\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u3068\u547c\u3070\u308c\u307e\u3059)\u3092\u6c42\u3081\u3088\u3068\u3044\u3046\u554f\u984c\u304c\u51fa\u984c\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u3001[SPOJ 3321](http://www.spoj.com/problems/KNAPSACK/)\u306a\u3093\u304b\u306f\u305d\u306e\u4f8b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3092\u89e3\u304f\u4ee3\u8868\u7684\u306a\u65b9\u6cd5\u306f\u52d5\u7684\u8a08\u753b\u6cd5\u3068\u3044\u3063\u3066\u3001Web\u4e0a\u3067\u3082\u305f\u304f\u3055\u3093\u89e3\u8aac\u304c\u3042\u308b\u307b\u304b\u3001\u3053\u308c\u306b\u3064\u3044\u3066\u8f09\u3063\u3066\u308b\u30ab\u30b8\u30e5\u30a2\u30eb\u306a\u66f8\u7c4d\u3068\u3057\u3066\u306f[\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\u30c1\u30e3\u30ec\u30f3\u30b8\u30d6\u30c3\u30af](http://www.amazon.co.jp/dp/4839941068)\u3042\u305f\u308a\u304c\u6709\u540d\u3067\u3057\u3087\u3046\u304b\u3002\n\n# \u3068\u308a\u3042\u3048\u305aGPGPU\u3067\u89e3\u3044\u3066\u307f\u308b\n\n\u3068\u308a\u3042\u3048\u305a\u5f8c\u8005\u306e\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u3060\u3051\u3092\u6c42\u3081\u308b\u30d1\u30bf\u30fc\u30f3\u306eCPU\u7248\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u30b6\u30c3\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002Item\u69cb\u9020\u4f53\u306f\u4ee5\u964d\u306e\u30bd\u30fc\u30b9\u3067\u5171\u901a\u3067\u3059\u3002\n\n```c++:CPU\u7248\nstruct Item\n{\n    int p;\n    int c;\n};\n\n\nint cpu_dp(const int n, const Item* items, const int C)\n{\n    std::vector<int> buffer(C + 1);\n    for (int j = 0; j < n; ++j) {\n        const Item item = items[j];\n        for (int i = C; i >= item.c; --i) {\n            const int v0 = buffer[i];\n            const int v1 = buffer[i - item.c] + item.p;\n            if (v1 > v0) {\n                buffer[i] = v1;\n            }\n        }\n    }\n    return buffer.back();\n}\n```\n\n\u3055\u3089\u306b\u30b5\u30af\u30c3\u3068GPU\u7248\u3082\u5b9f\u88c5\u3057\u307e\u3059\u3002\u74b0\u5883\u306fCUDA+Thrust\u3067\u3059\u3002\n\n```c++:GPU\u7248\nconst int THREAD_NUM = 512;\n\n\n__global__ void dp_step(\n        const int* buffer0,\n        int* buffer1,\n        const Item item,\n        const int C)\n{\n    const int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (item.c <= i && i <= C) {\n        const int v0 = buffer0[i];\n        const int v1 = buffer0[i - item.c] + item.p;\n        buffer1[i] = max(v0, v1);\n    }\n}\n\n\nint cuda_dp(const int n, const Item* items, const int C)\n{\n    const int size = C + 1;\n    thrust::device_vector<int> buffer0(size, 0);\n    thrust::device_vector<int> buffer1(size, 0);\n\n    const int thread_num = THREAD_NUM;\n    const int block_num = size / thread_num + (size % thread_num != 0);\n    for (int j = 0; j < n; ++j) {\n        dp_step<<<block_num, thread_num>>>(\n                thrust::raw_pointer_cast(buffer0.data()),\n                thrust::raw_pointer_cast(buffer1.data()),\n                items[j], C);\n        buffer0.swap(buffer1);\n    }\n    return buffer0.back();\n}\n```\n\n\u8a08\u7b97\u6642\u9593\u306e\u6bd4\u8f03\u3092\u3057\u307e\u3059\u3002\u4f7f\u7528\u3057\u305f\u30de\u30b7\u30f3\u306eCPU\u304cXeon W3520\u3001GPU\u304cTesla C2050\u3067\u3059\u3002\u307e\u305f\u3001\u8a08\u7b97\u3059\u308b\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u306f\u54c1\u7269\u6570n\u304c10,000\u500b\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306e\u5bb9\u91cfC\u304c\u7d042,500,000\u306e\u307b\u3093\u306e\u3061\u3087\u3063\u3068\u5927\u304d\u306a\u554f\u984c\u3067\u3059\u3002\n\n| \u89e3\u6cd5 | \u8a08\u7b97\u6642\u9593\uff08\u79d2\uff09 |\n|:-:|:-:|\n| CPU | 33.751 |\n| GPU | 2.179 |\n\n\u8a08\u7b97\u6642\u9593\u306e\u5dee\u304c15.5\u500d\u3068\u3088\u304f\u3042\u308a\u305d\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n# \u89e3\u306e\u30c8\u30ec\u30fc\u30b9\n\n\u3053\u3053\u307e\u3067\u3067\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u306f\u305d\u3053\u305d\u3053\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\u3067\u306f\u3001\u6700\u521d\u306e\u554f\u984c\u5b9a\u7fa9\u306b\u623b\u3063\u3066\u300c\u3069\u306e\u54c1\u7269\u3092\u9078\u3079\u3070\u3088\u3044\u304b\u300d\u307e\u3067\u6c42\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5927\u7b4b\u306f\u305d\u308c\u305e\u308c\u4e0a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\n```c++:CPU\u7248\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u3042\u308a\uff09\nint cpu_dp_sol(const int n, const Item* items, const int C)\n{\n    std::vector<int> buffer(C + 1);\n    const int solution_size = n / 32 + (n % 32 != 0);\n    std::vector<std::vector<int> > solution(solution_size, std::vector<int>(C + 1));\n    int sol_index = 0;\n    for (int j = 0; j < n; ++j) {\n        const Item item = items[j];\n        for (int i = C; i >= item.c; --i) {\n            solution[sol_index][i] <<= 1;\n            const int v0 = buffer[i];\n            const int v1 = buffer[i - item.c] + item.p;\n            if (v1 > v0) {\n                buffer[i] = v1;\n                solution[sol_index][i] &= 1;\n            }\n        }\n        if (j % 32 == 31) {\n            ++sol_index;\n        }\n    }\n    return buffer.back();\n}\n```\n\n\n```c++:GPU\u7248\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u3042\u308a\uff09\n__global__ void dp_sol_step(\n        const int* buffer0,\n        int* buffer1,\n        const Item item,\n        const int C,\n        int* solution)\n{\n    const int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (item.c <= i && i <= C) {\n        const int v0 = buffer0[i];\n        const int v1 = buffer0[i - item.c] + item.p;\n        buffer1[i] = max(v0, v1);\n        solution[i] = (solution[i] << 1) & (v1 > v0);\n    }\n}\n\n\nint cuda_dp_sol(const int n, const Item* items, const int C)\n{\n    const int size = C + 1;\n    thrust::device_vector<int> buffer0(size, 0);\n    thrust::device_vector<int> buffer1(size, 0);\n    thrust::device_vector<int> solution(size, 0);\n    const int solution_size = n / 32 + (n % 32 != 0);\n    std::vector<std::vector<int> > host_solution(solution_size, std::vector<int>(size));\n\n    const int thread_num = THREAD_NUM;\n    const int block_num = size / thread_num + (size % thread_num != 0);\n    int sol_index = 0;\n    for (int j = 0; j < n; ++j) {\n        dp_sol_step<<<block_num, thread_num>>>(\n                thrust::raw_pointer_cast(buffer0.data()),\n                thrust::raw_pointer_cast(buffer1.data()),\n                items[j], C,\n                thrust::raw_pointer_cast(solution.data()));\n        if (j % 32 == 31) {\n            thrust::copy_n(solution.begin(), size, host_solution[sol_index].begin());\n            ++sol_index;\n        }\n        buffer0.swap(buffer1);\n    }\n    thrust::copy_n(solution.begin(), size, host_solution[sol_index].begin());\n    return buffer0.back();\n}\n```\n\nsolution\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u89e3\u3092\u5fa9\u5143\u3059\u308b\u51e6\u7406\u306f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001CPU\u7248GPU\u7248\u5171\u901a\u306b\u306a\u308b\u306e\u3067\u6c17\u306b\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u8a08\u7b97\u6642\u9593\u306f\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n| \u89e3\u6cd5 | \u8a08\u7b97\u6642\u9593\uff08\u79d2\uff09 |\n|:-:|:-:|\n| CPU | 82.563 |\n| GPU | 31.648 |\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u3092\u6c42\u3081\u308b\u5834\u5408\u3068\u6bd4\u8f03\u3057\u3066\u5927\u91cf\u306e\u30db\u30b9\u30c8\u5074\u30e1\u30e2\u30ea\u3068\u30c7\u30fc\u30bf\u8ee2\u9001\u3092\u5fc5\u8981\u3068\u3057\u3001GPU\u306e\u5834\u5408\u3067\u3082\u8a08\u7b97\u6642\u9593\u304c\u5927\u5e45\u306b\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u305d\u308c\u306b\u3057\u3066\u3082\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u3066\u3044\u308b\u6c17\u306f\u3057\u307e\u3059\u304c\u3001\u30db\u30b9\u30c8\u5074\u306e\u74b0\u5883\u3082\u5f71\u97ff\u3057\u3066\u308b\u3088\u3046\u3067\u3001\u3053\u308c\u3082\u3053\u306e\u8a18\u4e8b\u306e\u672c\u7b4b\u3067\u306f\u306a\u3044\u306e\u3067\u653e\u7f6e\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n# \u89e3\u306e\u30c8\u30ec\u30fc\u30b9\u3092\u9ad8\u901f\u5316\u3059\u308b\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u57fa\u672c\u306f\u300c\u9045\u3044\u90e8\u5206\u3092\u901f\u304f\u3059\u308b\u300d\u3053\u3068\u3067\u3059\u3002\u89e3\u306e\u30c8\u30ec\u30fc\u30b9\u306b\u306f\u89e3\u60c5\u5831\u306e\u4fdd\u6301\u3084\u8ee2\u9001\u306b\u5927\u5e45\u306a\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u3066\u3001\u5b9f\u88c5\u9762\u3067\u306e\u9ad8\u901f\u5316\u306f\u3042\u307e\u308a\u671f\u5f85\u3067\u304d\u306a\u3055\u305d\u3046\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5de5\u592b\u3092\u3057\u3001\u6839\u672c\u7684\u306b\u4fdd\u6301\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u89e3\u60c5\u5831\u3092\u6e1b\u3089\u3059\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3067\u306f\u3001\u54c1\u7269\u3092\u3042\u3089\u304b\u3058\u3081\u3001\u4fa1\u5024\u3092\u5bb9\u7a4d\u3067\u5272\u3063\u305f\u5024\uff08\u52b9\u7528\u5024\uff09\u3067\u30bd\u30fc\u30c8\u3057\u3066\u304a\u304f\u3068\u3001\u52b9\u7528\u5024\u306e\u5927\u304d\u3044\u5074\u306e\u5927\u90e8\u5206\u306e\u54c1\u7269\u306f\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306b\u8a70\u3081\u308b\u54c1\u7269\u3068\u3057\u3066\u9078\u3070\u308c\u3001\u9006\u306b\u5c0f\u3055\u3044\u5074\u306e\u5927\u90e8\u5206\u306f\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306b\u8a70\u3081\u3089\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u7d4c\u9a13\u7684\u306b\u308f\u304b\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u89b3\u5bdf\u306b\u57fa\u3065\u3051\u3070\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3067\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u54c1\u7269\u306e\u500b\u6570\u306f\u5168\u54c1\u7269\u306e\u500b\u6570\u3068\u6bd4\u3079\u308b\u3068\u975e\u5e38\u306b\u5c11\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u3001\u3053\u306e\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u54c1\u7269\u306e\u90e8\u5206\u3092\u30b3\u30a2\u3068\u547c\u3073\u307e\u3059\u3002\n\n\u30b3\u30a2\u306e\u8003\u3048\u65b9\u3092\u4f7f\u3046\u3068\u3001\u6700\u521d\u306b\u6700\u9069\u76ee\u7684\u95a2\u6570\u5024\u3092\u6c42\u3081\u308c\u3070\u3001\u30b3\u30a2\u306e\u5468\u308a\u306e\u5c11\u6570\u306e\u54c1\u7269\u3067\u3060\u3051\u89e3\u306e\u30c8\u30ec\u30fc\u30b9\u3092\u884c\u3048\u3070\u3088\u304f\u306a\u308a\u3001\u8a08\u7b97\u6642\u9593\u3082\u6d88\u8cbb\u3059\u308b\u30e1\u30e2\u30ea\u91cf\u3082\u5927\u5e45\u306b\u6291\u3048\u3089\u308c\u308b\u3067\u3057\u3087\u3046\u3002\u30b3\u30a2\u306e\u30b5\u30a4\u30ba\u306f\u54c1\u7269\u6570\u304c10000\u3050\u3089\u3044\u3060\u3068sqrt(n) ~ 2 * sqrt(n)\u3050\u3089\u3044\u3042\u308c\u3070\u5341\u5206\u3067\u3059\u3002\n\n```c++:GPU\u7248\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u6539\u826f\uff09\nstruct ItemComparator\n{\n    __host__ __device__ bool operator()(const Item& item1, const Item& item2)\n    {\n        return item1.p * item2.c > item2.p * item1.c;\n    }\n};\n\n\nint cuda_dp_core(const int n, const Item* items, const int C)\n{\n    const int opt = cuda_dp(n, items, C);\n\n    thrust::device_vector<Item> dev_items(items, items + n);\n    thrust::sort(dev_items.begin(), dev_items.end(), ItemComparator());\n    thrust::host_vector<Item> host_items(dev_items);\n\n    int s;\n    int sum_c = 0;\n    for (int j = 0; j < n; ++j) {\n        sum_c += host_items[j].c;\n        if (sum_c > C) {\n            s = j;\n            break;\n        }\n    }\n\n    int delta = (int)std::sqrt(n);\n    const int core_inc = 10;\n    int core_opt;\n    do  {\n        const int core_size = delta * 2;\n        const Item* core_start =\n            thrust::raw_pointer_cast(host_items.data()) + s - delta;\n    \n        int p_offset = 0;\n        int core_C = C;\n        const int stop = s - delta;\n        for (int j = 0; j < stop; ++j) {\n            p_offset += host_items[j].p;\n            core_C -= host_items[j].c;\n        }\n\n        core_opt = cuda_dp(core_size, core_start, core_C) + p_offset;\n\n        delta += core_inc;\n    } while (core_opt != opt);\n    return opt;\n}\n```\n\n\u5b9f\u884c\u6642\u9593\u3092\u3053\u308c\u307e\u3067\u306e2\u3064\u306eGPU\u7248\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n| \u89e3\u6cd5 | \u8a08\u7b97\u6642\u9593\uff08\u79d2\uff09 |\n|:-:|:-:|\n| GPU\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u306a\u3057\uff09 | 2.179 |\n| GPU\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u3042\u308a\uff09 | 31.648 |\n| GPU\uff08\u89e3\u30c8\u30ec\u30fc\u30b9\u6539\u826f\uff09 | 2.184 |\n\n\u89e3\u30c8\u30ec\u30fc\u30b9\u306b\u304b\u304b\u308b\u6642\u9593\u304c\u5927\u5e45\u306b\u77ed\u7e2e\u3055\u308c\u3066\u3001\u89e3\u30c8\u30ec\u30fc\u30b9\u306a\u3057\u306e\u5834\u5408\u3068\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3082\u3046\u3061\u3087\u3063\u3068\u3072\u306d\u3063\u305f\u3089\u8ad6\u6587\u3068\u304b\u306b\u3082\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u3067\u3059\u304b\u306d\u3002\uff08\u9069\u5f53\n\n# \u6700\u5f8c\u306b\n\nGPGPU\u3001\u3072\u3044\u3066\u306f\u5e83\u7fa9\u306eHPC\u306b\u306f\u3001\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u77e5\u8b58\u3060\u3051\u3067\u306a\u304f\u554f\u984c\u9818\u57df\u306e\u77e5\u8b58\u3082\u91cd\u8981\u3060\u3068\u611f\u3058\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u610f\u5473\u3067\u3082\u3001\u30d7\u30ed\u30bb\u30c3\u30b5\u3084\u4e26\u5217\u8a08\u7b97\u306e\u5c02\u9580\u5bb6\u304c\u4e16\u306e\u3042\u3089\u3086\u308b\u554f\u984c\u9818\u57df\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9ad8\u901f\u5316\u3059\u308b\u3068\u3044\u3063\u305f\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3067\u3001\u9006\u306b\u554f\u984c\u9818\u57df\u306e\u5c02\u9580\u5bb6\u304c\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u77e5\u8b58\u3092\u6301\u3063\u3066\u81ea\u5206\u306e\u554f\u984c\u9818\u57df\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9ad8\u901f\u5316\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3068\u79c1\u306f\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u8fd1\u5e74\u306eGPGPU\u306e\u6587\u5316\u306f\u554f\u984c\u9818\u57df\u306e\u5c02\u9580\u5bb6\u306bHPC\u306e\u9580\u53e3\u3092\u5e83\u3052\u3066\u304f\u308c\u305f\u3068\u3044\u3046\u70b9\u3067\u975e\u5e38\u306b\u5927\u304d\u306a\u5f79\u5272\u3092\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3002Xeon Phi\u3068\u304b\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u5f8c\u306eGPGPU\u306e\u52d5\u5411\u3082\u307e\u3060\u307e\u3060\u697d\u3057\u307f\u3067\u3059\u306d\u3002", "tags": ["CUDA", "GPGPU"]}