{"context": "\n\n\u6982\u8981\n\u3000ryouka0122\u3055\u3093\u306e\u6b21\u306e\u8a18\u4e8b\u3092\u898b\u3066\u9583\u304d\u307e\u3057\u305f\u3002\u300e\u3053\u308c\u306fSTL\u306e\u3044\u3044\u7df4\u7fd2\u554f\u984c\u306b\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u300f\u3068\u2026\u2026\n\u3000\u3000\u6570\u5f0f\u3068\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u95a2\u4fc2\n\u203b\u4ee5\u4e0b\u306b\u767b\u5834\u3059\u308b\u6570\u5f0f\u306f\u4e0a\u8a18\u8a18\u4e8b\u3088\u308a\u5f15\u7528\u3057\u3066\u3044\u307e\u3059\n\u203b\u4ee5\u4e0b\u306b\u4f7f\u7528\u3059\u308b\u914d\u5217\u306e\u5909\u6570\u540d\u306fdata\u3001\u8981\u7d20\u6570\u306fN\u3068\u3057\u307e\u3059\n\n\u57fa\u672c\u7d71\u8a08\u91cf\n\n\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024 / max, min\n\\begin{align}\nx_M&=\\max_{i=1,...,N} {x_i}\\\\\\\nx_m&=\\min_{i=1,...,N} {x_i}\n\\end{align}\n$${\\begin{align}\nx_M&=\\max_{i=1,...,N} {x_i}\\\\\\\nx_m&=\\min_{i=1,...,N} {x_i}\n\\end{align}\n}$$\n#include <algorithm>\n\n// max_element\u306f\u6700\u5927\u5024\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n// \u3086\u3048\u306b*\u6f14\u7b97\u5b50\u3067\u6700\u5927\u5024\u306e\u5024\u306b\u5909\u63db\u3057\u3066\u3044\u308b\nconst auto max = *std::max_element(std::begin(data), std::end(data));\n// \u6700\u5c0f\u5024\u3092\u53d6\u5f97\u3059\u308b\nconst auto min = *std::min_element(std::begin(data), std::end(data));\n// \u7d50\u679c\u3092\u8868\u793a\u3059\u308b\nstd::cout << \"\u6700\u5927\u5024\uff1a\" << max << std::endl;\nstd::cout << \"\u6700\u5c0f\u5024\uff1a\" << min << std::endl;\n\n\n\u7dcf\u548c / Summation\nS=\\sum_{i=1}^{N}x_i\n$${S=\\sum_{i=1}^{N}x_i\n}$$\n#include <numeric>\n\n// accumulate\u306f\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\n// (data\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\u306a\u3089\u7b2c\u4e09\u5f15\u6570\u30920.0\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b)\nconst auto sum = std::accumulate(std::begin(data), std::end(data), 0);\nstd::cout << \"\u7dcf\u548c\uff1a\" << sum << std::endl;\n\n\n\u5e73\u5747 / Average, Mean\n\\bar{X}=\\frac{1}{N}\\sum_{i=1}^{N}x_i\n$${\\bar{X}=\\frac{1}{N}\\sum_{i=1}^{N}x_i\n}$$\n#include <numeric>\n\n// std::size\u306fC++17\u4ee5\u964d\u3067\u4f7f\u7528\u53ef\u80fd\n// \u305d\u308c\u4ee5\u524d\u306e\u5834\u5408\u3001data\u3092std::vector\u3084std::array\u306a\u3069\u306e\n// \u30b3\u30f3\u30c6\u30ca\u3067\u5b9a\u7fa9\u3057\u3001data.size()\u3068\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\nconst auto ave = std::accumulate(std::begin(data), std::end(data), 0.0) / std::size(data);\nstd::cout << \"\u5e73\u5747\uff1a\" << ave << std::endl;\n\n\n\u6a19\u672c\u5206\u6563 / Variance\n\u3000\u6a19\u672c\u5206\u6563\u306e\u5143\u3005\u306e\u5b9a\u7fa9\u306f1\u884c\u76ee\u3067\u3059\u304c\u3001\u5f0f\u5909\u5f62\u306b\u3088\u308a\u7c21\u7565\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3000\u3057\u304b\u3057\u3001\u4e00\u756a\u4e0b\u306e\u5f0f\u306f\u300c\u5143\u306e\u30c7\u30fc\u30bf\u306e\u4e8c\u4e57\u548c\u300d\u3084\u300c\u5e73\u5747\u5024\u306e\u4e8c\u4e57\u300d\u304c\u5927\u304d\u306a\u6570\u5024\u3068\u306a\u3063\u305f\u5834\u5408\u3001\u8a08\u7b97\u8aa4\u5dee\u304c\u5143\u3005\u306e\u5b9a\u7fa9\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002Welford\u306e\u65b9\u6cd5(\u6f38\u5316\u5f0f\u3092\u7d44\u3080\u65b9\u6cd5)\u306b\u3088\u3063\u3066\u89e3\u6c7a\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u7d20\u76f4\u306b2\u901a\u308a\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3000\u306a\u304a\u3001\u300c\u5206\u6563\u300d\u306b\u306f\u4ed6\u306b\u4e0d\u504f\u5206\u6563\u3082\u3042\u308a\u3001\u300c$\\frac{1}{N}\\sum_{i=1}^{N}(x_i-\\bar{x})^2$\u300d\u306a\u3068\u3053\u308d\u3001\u300c$\\frac{1}{N-1}\\sum_{i=1}^{N}(x_i-\\bar{x})^2$\u300d\u306b\u3057\u305f\u3082\u306e\u3068\u306a\u308a\u307e\u3059\u3002\u306a\u305c2\u7a2e\u985e\u3042\u308b\u304b\u306e\u8a73\u3057\u3044\u89e3\u8aac\u306f\u3053\u3061\u3089\u3002\n\\begin{align}\nVar&=\\frac{1}{N}\\sum_{i=1}^{N}(x_i-\\bar{x})^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}(x_i^2-2x_i\\bar{x}+\\bar{x}^2)\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-\\frac{2}{N}\\sum_{i=1}^{N}x_i\\bar{x}+\\frac{1}{N}\\sum_{i=1}^{N}\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-2\\bar{x}\\frac{1}{N}\\sum_{i=1}^{N}x_i+\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-2\\bar{x}^2+\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-\\bar{x}^2\\\\\n\\end{align}\n$${\\begin{align}\nVar&=\\frac{1}{N}\\sum_{i=1}^{N}(x_i-\\bar{x})^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}(x_i^2-2x_i\\bar{x}+\\bar{x}^2)\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-\\frac{2}{N}\\sum_{i=1}^{N}x_i\\bar{x}+\\frac{1}{N}\\sum_{i=1}^{N}\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-2\\bar{x}\\frac{1}{N}\\sum_{i=1}^{N}x_i+\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-2\\bar{x}^2+\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-\\bar{x}^2\\\\\n\\end{align}\n}$$\n#include <numeric>\n\n{\n    // 1\u3064\u76ee\u306e\u624b\u6cd5(accumulate\u7248)\u3000\u203byumetodo\u3055\u3093\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\n    // \u7b2c\u56db\u5f15\u6570\u306b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30e9\u30e0\u30c0\u5f0f\u3092\u6e21\u305b\u3070\u52a0\u7b97\u4ee5\u5916\u306e\u6f14\u7b97\u3082\u53ef\u80fd\n    // (\u4e0b\u30b3\u30fc\u30c9\u3067\u306f\u5f15\u6570\u306esum\u304c\u76f4\u524d\u306e\u7d50\u679c\u30fbe\u304c\u305d\u306e\u6bb5\u968e\u3067\u8aad\u307f\u8fbc\u3093\u3060\u914d\u5217\u306e\u8981\u7d20)\n    const auto ave = std::accumulate(std::begin(data), std::end(data), 0.0) / std::size(data);\n    const auto var = std::accumulate(std::begin(data), std::end(data), 0.0, [ave](double sum, const auto& e){\n        const auto temp = e - ave;\n        return sum + temp * temp;\n    }) / std::size(data);\n    std::cout << \"\u5206\u6563\uff1a\" << var << std::endl;\n}\n{\n    // 1\u3064\u76ee\u306e\u624b\u6cd5(transform\uff06inner_product\u7248)\n    // transform\u306f\u5404\u8981\u7d20\u3092\u51e6\u7406\u30fbinner_product\u306f\u5185\u7a4d\u8a08\u7b97\n    const auto ave = std::accumulate(std::begin(data), std::end(data), 0.0) / std::size(data);\n    std::transform(std::begin(data), std::end(data), std::begin(data), [ave](const auto &e){return e - ave;});\n    const auto var = std::inner_product(std::begin(data), std::end(data), std::begin(data), 0.0) / std::size(data);\n}\n{\n    // 2\u3064\u76ee\u306e\u65b9\u6cd5\u3000\u203bakinomyoga\u3055\u3093\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\n    const auto ave = std::accumulate(std::begin(data), std::end(data), 0.0) / std::size(data);\n    const auto var = std::inner_product(std::begin(data), std::end(data), std::begin(data), 0.0) / std::size(data) - ave * ave;\n    std::cout << \"\u5206\u6563\uff1a\" << var << std::endl;\n}\n{\n    // 2\u3064\u76ee\u306e\u65b9\u6cd5\u3000\u203b_EnumHack\u3055\u3093\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\n    // \u30b3\u30f3\u30c6\u30ca\u30921\u56de\u8d70\u67fb\u3059\u308b\u3060\u3051\u3067OK\u306b\u3059\u308b\n    double ave = 0.0, var = 0.0;\n    for(const auto &x : data){\n        ave += x;\n        var += x * x;\n    }\n    ave /= std::size(data);\n    var = var / std::size(data) - ave * ave;\n    std::cout << \"\u5206\u6563\uff1a\" << var << std::endl;\n}\n\n\n\u6a19\u6e96\u504f\u5dee / Standard Deviation\n\u3000\u6bcd\u6a19\u6e96\u504f\u5dee\u306f\u6a19\u672c\u5206\u6563\u306e\u5e73\u65b9\u6839\u3001\u6a19\u672c\u6a19\u6e96\u504f\u5dee\u306f\u4e0d\u504f\u5206\u6563\u306e\u5e73\u65b9\u6839\u3067\u3059\u3002\u5f0f\u30fb\u30b3\u30fc\u30c9\u7565\u3002\n\n\u4e2d\u592e\u5024 / Median\n\u3000\u8981\u3059\u308b\u306b\u30c7\u30fc\u30bf\u96c6\u56e3\u306e\u771f\u3093\u4e2d\u3092\u53d6\u3063\u3066\u304f\u308c\u3070\u3044\u3044\u3060\u3051\u3067\u3059\u304c\u3001\u30c7\u30fc\u30bf\u6570\u304c\u5076\u6570\u306a\u3089\u96a3\u63a52\u9805\u306e\u5e73\u5747\u5024\u3092\u53d6\u308a\u307e\u3059\u3002\n#include <algorithm>\n\nstd::sort(std::begin(data), std::end(data));\nsize_t median_index = std::size(data) / 2;\ndouble median = (std::size(data) % 2 == 0\n    ? static_cast<double>(data[median_index] + data[median_index - 1]) / 2\n    : data[median_index]);\nstd::cout << \"\u4e2d\u592e\u5024\uff1a\" << median << std::endl;\n\n\n\u6700\u983b\u5024 / Mode\n\u3000\u5024\u306e\u7bc4\u56f2\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u5225\u306b\u30d7\u30fc\u30eb\u3092\u7528\u610f\u3059\u308c\u3070$O(N)$\u306e\u8a08\u7b97\u91cf\u3067\u6e08\u307f\u307e\u3059\u3002\n\u203b\u3053\u306e\u9805\u3067\u306f\u4fbf\u5b9c\u4e0a\u3001\u96c6\u8a08\u5bfe\u8c61\u3092unsigned int\u3068\u4eee\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u81ea\u52d5\u3067\u5224\u5b9a\u3055\u305b\u308b\u5834\u5408\u3001typename decltype(data)::value_type\u3068\u3059\u308c\u3070\u96c6\u8a08\u5bfe\u8c61\u306e\u578b\u304c\u3001\n\u3000typename decltype(data)::iterator\u3068\u3059\u308c\u3070\u96c6\u8a08\u5bfe\u8c61\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059)\n#include <algorithm>\n\n// \u96c6\u8a08\u3059\u308b\nstd::vector<size_t> count(256, 0); //\u4e00\u4f8b\nfor(const auto &x : data){\n    ++count[x];\n}\n// \u6700\u5927\u5024\u306e\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u308a\u51fa\u3059\nauto max_iterator = std::max_element(count.begin(), count.end());\nsize_t mode = std::distance(count.begin(), max_iterator);\nstd::cout << \"\u6700\u983b\u5024\uff1a\" << mode << std::endl;\n\n\u3000\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001std::unordered_map<\u5024,\u30ab\u30a6\u30f3\u30c8>\u3068\u3057\u3066\u304b\u3089\u30ab\u30a6\u30f3\u30c8\u306e\u6700\u5927\u5024\u3092\u5168\u8d70\u67fb\u3059\u308b\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u3044\u3067\u3057\u3087\u3046\u3002\u3053\u3061\u3089\u3082\u8a08\u7b97\u91cf\u306f$O(N)$\u3067\u3059(\u30cf\u30c3\u30b7\u30e5\u304c\u52a3\u5316\u3057\u3066\u306a\u3044\u5834\u5408)\u3002\n#include <algorithm>\n#include <unordered_map>\n\n// \u96c6\u8a08\u3059\u308b\nstd::unordered_map<unsigned int, size_t> hash;\nfor(const auto &x : data){\n    if(hash.find(x) != hash.end()){\n        ++hash.at(x);\n    }else{\n        hash[x] = 1;\n    }\n}\n// \u6700\u5927\u5024\u306e\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u308a\u51fa\u3059\n// \u5225\u9014\u6bd4\u8f03\u95a2\u6570\u3092\u66f8\u304d\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u30e9\u30e0\u30c0\u5f0f\u306b\u3057\u305f\n// (\u30e9\u30e0\u30c0\u5f0f\u306e\u5f15\u6570\u3067auto\u304c\u4f7f\u3048\u308b\u306e\u306fC++14\u304b\u3089)\nauto max_iterator2 = std::max_element(hash.begin(), hash.end(),\n    [](const auto &a, const auto &b) -> bool {\n        return (a.second < b.second);\n    }\n);\nint mode = max_iterator2->first;\nstd::cout << \"\u6700\u983b\u5024\uff1a\" << mode << std::endl;\n\n\u3000\u307e\u305f\u3001\u30c7\u30fc\u30bf\u3092\u4e8b\u524d\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001\u5148\u982d\u304b\u3089\u898b\u3066\u3044\u3063\u305f\u969b\u306b\u300c\u9023\u7d9a\u3059\u308b\u6570\u300d\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u6700\u983b\u5024\u3092\u63a2\u3059\u4f5c\u6226\u3082\u3042\u308a\u307e\u3059(_EnumHack\u3055\u3093\u306e\u30a2\u30a4\u30c7\u30a3\u30a2)\u3002\n\u3000\u3053\u3061\u3089\u306f\u30bd\u30fc\u30c8\u3059\u308b\u6642\u70b9\u3067$O(N\\log N)$\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c(\u30ab\u30a6\u30f3\u30c8\u90e8\u5206\u3082\u7d50\u5c40\u306f$O(N\\log N)$\u306b\u306a\u308b)\u3001\u300c\u5225\u9014\u30d7\u30fc\u30eb\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u300d\u3068\u3044\u3063\u305f\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\n\u203b_EnumHack\u3055\u3093\u304b\u3089\u306e\u30b3\u30e1\u30f3\u30c8\uff1a\n\n\u306f\u3058\u3081\u306b\u3001std::adjacent_find\u3067\u96a3\u63a5\u3059\u308b\u8981\u7d20\u304c\u7b49\u3057\u3044\u5834\u6240\u307e\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u307e\u3059\u3002\n\u6b21\u306b\u305d\u306e\u8981\u7d20\u3088\u308a\u5024\u304c\u5927\u304d\u3044\u8981\u7d20\u3092std::upper_bound\u3067\u4e8c\u5206\u63a2\u7d22\u3057\u307e\u3059\u3002\n\u6700\u5f8c\u306bstd::distance\u3092\u4f7f\u3063\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8ddd\u96e2\uff08\u3059\u306a\u308f\u3061\u9023\u7d9a\u3059\u308b\u6570\u306e\u30ab\u30a6\u30f3\u30c8\uff09\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u30b3\u30f3\u30c6\u30ca\u306e\u7d42\u7aef\u307e\u3067\u7e70\u308a\u8fd4\u3057\u3066\u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u5927\u304d\u304b\u3063\u305f\u8981\u7d20\u3092mode\u3068\u3059\u308b\u3068\u3044\u3046\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5225\u306b\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u7528\u610f\uff08\u305d\u3057\u3066\u305d\u308c\u306b\u30a2\u30af\u30bb\u30b9\uff09\u3059\u308b\u30b3\u30b9\u30c8\u306f\u99ac\u9e7f\u306b\u306a\u3089\u306a\u3044\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u8981\u7d20\u3092std::adjacent_find\u3067\u3064\u304e\u3064\u304e\u306b\u8aad\u307f\u98db\u3070\u3057\u306a\u304c\u3089\u3001\u9023\u7d9a\u3057\u305f\u8981\u7d20\u3092\u4e8c\u5206\u63a2\u7d22\u3067\u30ab\u30a6\u30f3\u30c8\u3057\u3064\u3064\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u3092\u56f3\u308b\u6226\u7565\u3092\u601d\u3044\u3064\u304d\u307e\u3057\u305f\u3002\n\n#include <algorithm>\n#include <vector>\n#include <iostream>\n\nstd::sort(std::begin(data),std::end(data));\ntypename decltype(data)::value_type mode{};\nsize_t n{},count{1};\nfor(auto iter = std::adjacent_find(std::begin(data), std::end(data)),\n                last = std::end(data),\n                next = std::end(data);\n    iter != last;\n){\n    next = std::upper_bound(iter, last, *iter);\n    count = std::distance(iter,next);\n    if( n < count ) n = count, mode = *iter;\n    iter = std::adjacent_find(next, last);\n}\nstd::cout << \"\u6700\u983b\u5024\uff1a\" << mode << std::endl;\n\n\n\u6b63\u898f\u5316 / Normalization\n\u3000\u7d71\u8a08\u306e\u5206\u91ce\u306b\u304a\u3051\u308b\u6b63\u898f\u5316(\u6a19\u6e96\u5316)\u3068\u306f\u3001\u3056\u3063\u304f\u308a\u8a00\u3048\u3070\u6b21\u306e\u5f0f\u3092\u30c7\u30fc\u30bf\u96c6\u56e3\u5168\u4f53\u306b\u65bd\u3059\u3053\u3068\u3067\u3059(\u03c3\u306f\u6bcd\u6a19\u6e96\u504f\u5dee)\u3002\u3053\u306e\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u30c7\u30fc\u30bf\u96c6\u56e3\u304c\u300c\u5e73\u5747\u50240\u30fb\u6a19\u672c\u5206\u65631\u300d\u3068\u306a\u308a\u307e\u3059\u3002\u8a73\u3057\u3044\u610f\u5473\u306f\u6b21\u306e\u8a18\u4e8b\u306a\u3069\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\u7d71\u8a08\u5b66\u306b\u304a\u3051\u308b\u6a19\u6e96\u5316 - \u30d0\u30a4\u30aa\u30a4\u30f3\u30d5\u30a9\u30de\u30c6\u30a3\u30af\u30b9\u5165\u9580\n\\tilde{x}_i=\\frac{x_i-\\bar{x}}{\\sigma}\n$${\\tilde{x}_i=\\frac{x_i-\\bar{x}}{\\sigma}\n}$$\n#include <algorithm>\n#include <vector>\n\n// \u65e2\u306b\u5e73\u5747\u5024ave\u3068\u6a19\u6e96\u504f\u5deesd\u304c\u8a08\u7b97\u3055\u308c\u3066\u3044\u308b\u3068\u3059\u308b\nstd::vector<double> norm_data(std::size(data));\nstd::transform(std::begin(data), std::end(data), norm_data.begin(), [&ave, &sd](const auto &e){\n    return (e - ave) / sd;\n});\n\n\n\u6700\u5f8c\u306b\n\u3000STL\u3092\u4f7f\u3048\u3070\u3053\u3093\u306a\u306b\u3082\u30b3\u30fc\u30c9\u304c\u30c8\u30ea\u30c3\uff4b\u2026\u2026\uff79\uff9e\uff8c\uff9d\uff79\uff9e\uff8c\uff9d\u3001\u7dba\u9e97\u306b\u306a\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\u8a18\u4e8b\n\u5fd8\u308c\u304c\u3061\u306a C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\n# \u6982\u8981\n\u3000ryouka0122\u3055\u3093\u306e\u6b21\u306e\u8a18\u4e8b\u3092\u898b\u3066\u9583\u304d\u307e\u3057\u305f\u3002\u300e\u3053\u308c\u306fSTL\u306e\u3044\u3044\u7df4\u7fd2\u554f\u984c\u306b\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u300f\u3068\u2026\u2026\n\u3000\u3000[\u6570\u5f0f\u3068\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u95a2\u4fc2](http://qiita.com/ryouka0122/items/3027b833b451e8660a26)\n\n\u203b\u4ee5\u4e0b\u306b\u767b\u5834\u3059\u308b\u6570\u5f0f\u306f\u4e0a\u8a18\u8a18\u4e8b\u3088\u308a\u5f15\u7528\u3057\u3066\u3044\u307e\u3059\n\u203b\u4ee5\u4e0b\u306b\u4f7f\u7528\u3059\u308b\u914d\u5217\u306e\u5909\u6570\u540d\u306fdata\u3001\u8981\u7d20\u6570\u306fN\u3068\u3057\u307e\u3059\n\n# \u57fa\u672c\u7d71\u8a08\u91cf\n## \u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024 / max, min\n```math\n\\begin{align}\nx_M&=\\max_{i=1,...,N} {x_i}\\\\\\\nx_m&=\\min_{i=1,...,N} {x_i}\n\\end{align}\n```\n```cpp\n#include <algorithm>\n\n// max_element\u306f\u6700\u5927\u5024\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n// \u3086\u3048\u306b*\u6f14\u7b97\u5b50\u3067\u6700\u5927\u5024\u306e\u5024\u306b\u5909\u63db\u3057\u3066\u3044\u308b\nconst auto max = *std::max_element(std::begin(data), std::end(data));\n// \u6700\u5c0f\u5024\u3092\u53d6\u5f97\u3059\u308b\nconst auto min = *std::min_element(std::begin(data), std::end(data));\n// \u7d50\u679c\u3092\u8868\u793a\u3059\u308b\nstd::cout << \"\u6700\u5927\u5024\uff1a\" << max << std::endl;\nstd::cout << \"\u6700\u5c0f\u5024\uff1a\" << min << std::endl;\n```\n\n## \u7dcf\u548c / Summation\n```math\nS=\\sum_{i=1}^{N}x_i\n```\n```cpp\n#include <numeric>\n\n// accumulate\u306f\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\n// (data\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\u306a\u3089\u7b2c\u4e09\u5f15\u6570\u30920.0\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b)\nconst auto sum = std::accumulate(std::begin(data), std::end(data), 0);\nstd::cout << \"\u7dcf\u548c\uff1a\" << sum << std::endl;\n```\n\n## \u5e73\u5747 / Average, Mean\n```math\n\\bar{X}=\\frac{1}{N}\\sum_{i=1}^{N}x_i\n```\n\n```cpp\n#include <numeric>\n\n// std::size\u306fC++17\u4ee5\u964d\u3067\u4f7f\u7528\u53ef\u80fd\n// \u305d\u308c\u4ee5\u524d\u306e\u5834\u5408\u3001data\u3092std::vector\u3084std::array\u306a\u3069\u306e\n// \u30b3\u30f3\u30c6\u30ca\u3067\u5b9a\u7fa9\u3057\u3001data.size()\u3068\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\nconst auto ave = std::accumulate(std::begin(data), std::end(data), 0.0) / std::size(data);\nstd::cout << \"\u5e73\u5747\uff1a\" << ave << std::endl;\n```\n\n## \u6a19\u672c\u5206\u6563 / Variance\n\u3000\u6a19\u672c\u5206\u6563\u306e\u5143\u3005\u306e\u5b9a\u7fa9\u306f1\u884c\u76ee\u3067\u3059\u304c\u3001\u5f0f\u5909\u5f62\u306b\u3088\u308a\u7c21\u7565\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3000\u3057\u304b\u3057\u3001\u4e00\u756a\u4e0b\u306e\u5f0f\u306f\u300c\u5143\u306e\u30c7\u30fc\u30bf\u306e\u4e8c\u4e57\u548c\u300d\u3084\u300c\u5e73\u5747\u5024\u306e\u4e8c\u4e57\u300d\u304c\u5927\u304d\u306a\u6570\u5024\u3068\u306a\u3063\u305f\u5834\u5408\u3001\u8a08\u7b97\u8aa4\u5dee\u304c\u5143\u3005\u306e\u5b9a\u7fa9\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002[Welford\u306e\u65b9\u6cd5(\u6f38\u5316\u5f0f\u3092\u7d44\u3080\u65b9\u6cd5)](https://qpp.bitbucket.io/post/variance/?)\u306b\u3088\u3063\u3066\u89e3\u6c7a\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u7d20\u76f4\u306b2\u901a\u308a\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3000\u306a\u304a\u3001\u300c\u5206\u6563\u300d\u306b\u306f\u4ed6\u306b\u4e0d\u504f\u5206\u6563\u3082\u3042\u308a\u3001\u300c$\\frac{1}{N}\\sum_{i=1}^{N}(x_i-\\bar{x})^2$\u300d\u306a\u3068\u3053\u308d\u3001\u300c$\\frac{1}{N-1}\\sum_{i=1}^{N}(x_i-\\bar{x})^2$\u300d\u306b\u3057\u305f\u3082\u306e\u3068\u306a\u308a\u307e\u3059\u3002[\u306a\u305c2\u7a2e\u985e\u3042\u308b\u304b\u306e\u8a73\u3057\u3044\u89e3\u8aac\u306f\u3053\u3061\u3089](http://stat.biopapyrus.net/statistic/var.html)\u3002\n\n```math\n\\begin{align}\nVar&=\\frac{1}{N}\\sum_{i=1}^{N}(x_i-\\bar{x})^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}(x_i^2-2x_i\\bar{x}+\\bar{x}^2)\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-\\frac{2}{N}\\sum_{i=1}^{N}x_i\\bar{x}+\\frac{1}{N}\\sum_{i=1}^{N}\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-2\\bar{x}\\frac{1}{N}\\sum_{i=1}^{N}x_i+\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-2\\bar{x}^2+\\bar{x}^2\\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}x_i^2-\\bar{x}^2\\\\\n\\end{align}\n```\n\n```cpp\n#include <numeric>\n\n{\n\t// 1\u3064\u76ee\u306e\u624b\u6cd5(accumulate\u7248)\u3000\u203byumetodo\u3055\u3093\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\n\t// \u7b2c\u56db\u5f15\u6570\u306b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30e9\u30e0\u30c0\u5f0f\u3092\u6e21\u305b\u3070\u52a0\u7b97\u4ee5\u5916\u306e\u6f14\u7b97\u3082\u53ef\u80fd\n\t// (\u4e0b\u30b3\u30fc\u30c9\u3067\u306f\u5f15\u6570\u306esum\u304c\u76f4\u524d\u306e\u7d50\u679c\u30fbe\u304c\u305d\u306e\u6bb5\u968e\u3067\u8aad\u307f\u8fbc\u3093\u3060\u914d\u5217\u306e\u8981\u7d20)\n\tconst auto ave = std::accumulate(std::begin(data), std::end(data), 0.0) / std::size(data);\n\tconst auto var = std::accumulate(std::begin(data), std::end(data), 0.0, [ave](double sum, const auto& e){\n\t\tconst auto temp = e - ave;\n\t\treturn sum + temp * temp;\n\t}) / std::size(data);\n\tstd::cout << \"\u5206\u6563\uff1a\" << var << std::endl;\n}\n{\n\t// 1\u3064\u76ee\u306e\u624b\u6cd5(transform\uff06inner_product\u7248)\n\t// transform\u306f\u5404\u8981\u7d20\u3092\u51e6\u7406\u30fbinner_product\u306f\u5185\u7a4d\u8a08\u7b97\n\tconst auto ave = std::accumulate(std::begin(data), std::end(data), 0.0) / std::size(data);\n\tstd::transform(std::begin(data), std::end(data), std::begin(data), [ave](const auto &e){return e - ave;});\n\tconst auto var = std::inner_product(std::begin(data), std::end(data), std::begin(data), 0.0) / std::size(data);\n}\n{\n\t// 2\u3064\u76ee\u306e\u65b9\u6cd5\u3000\u203bakinomyoga\u3055\u3093\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\n\tconst auto ave = std::accumulate(std::begin(data), std::end(data), 0.0) / std::size(data);\n\tconst auto var = std::inner_product(std::begin(data), std::end(data), std::begin(data), 0.0) / std::size(data) - ave * ave;\n\tstd::cout << \"\u5206\u6563\uff1a\" << var << std::endl;\n}\n{\n\t// 2\u3064\u76ee\u306e\u65b9\u6cd5\u3000\u203b_EnumHack\u3055\u3093\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\n\t// \u30b3\u30f3\u30c6\u30ca\u30921\u56de\u8d70\u67fb\u3059\u308b\u3060\u3051\u3067OK\u306b\u3059\u308b\n\tdouble ave = 0.0, var = 0.0;\n\tfor(const auto &x : data){\n\t\tave += x;\n\t\tvar += x * x;\n\t}\n\tave /= std::size(data);\n\tvar = var / std::size(data) - ave * ave;\n\tstd::cout << \"\u5206\u6563\uff1a\" << var << std::endl;\n}\n```\n\n## \u6a19\u6e96\u504f\u5dee / Standard Deviation\n\u3000\u6bcd\u6a19\u6e96\u504f\u5dee\u306f\u6a19\u672c\u5206\u6563\u306e\u5e73\u65b9\u6839\u3001\u6a19\u672c\u6a19\u6e96\u504f\u5dee\u306f\u4e0d\u504f\u5206\u6563\u306e\u5e73\u65b9\u6839\u3067\u3059\u3002\u5f0f\u30fb\u30b3\u30fc\u30c9\u7565\u3002\n\n## \u4e2d\u592e\u5024 / Median\n\u3000\u8981\u3059\u308b\u306b\u30c7\u30fc\u30bf\u96c6\u56e3\u306e\u771f\u3093\u4e2d\u3092\u53d6\u3063\u3066\u304f\u308c\u3070\u3044\u3044\u3060\u3051\u3067\u3059\u304c\u3001\u30c7\u30fc\u30bf\u6570\u304c\u5076\u6570\u306a\u3089\u96a3\u63a52\u9805\u306e\u5e73\u5747\u5024\u3092\u53d6\u308a\u307e\u3059\u3002\n\n```cpp\n#include <algorithm>\n\nstd::sort(std::begin(data), std::end(data));\nsize_t median_index = std::size(data) / 2;\ndouble median = (std::size(data) % 2 == 0\n\t? static_cast<double>(data[median_index] + data[median_index - 1]) / 2\n\t: data[median_index]);\nstd::cout << \"\u4e2d\u592e\u5024\uff1a\" << median << std::endl;\n```\n\n## \u6700\u983b\u5024 / Mode\n\u3000\u5024\u306e\u7bc4\u56f2\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u5225\u306b\u30d7\u30fc\u30eb\u3092\u7528\u610f\u3059\u308c\u3070$O(N)$\u306e\u8a08\u7b97\u91cf\u3067\u6e08\u307f\u307e\u3059\u3002\n\n\u203b\u3053\u306e\u9805\u3067\u306f\u4fbf\u5b9c\u4e0a\u3001\u96c6\u8a08\u5bfe\u8c61\u3092unsigned int\u3068\u4eee\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u81ea\u52d5\u3067\u5224\u5b9a\u3055\u305b\u308b\u5834\u5408\u3001`typename decltype(data)::value_type`\u3068\u3059\u308c\u3070\u96c6\u8a08\u5bfe\u8c61\u306e\u578b\u304c\u3001\n\u3000`typename decltype(data)::iterator`\u3068\u3059\u308c\u3070\u96c6\u8a08\u5bfe\u8c61\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059)\n\n```cpp\n#include <algorithm>\n\n// \u96c6\u8a08\u3059\u308b\nstd::vector<size_t> count(256, 0); //\u4e00\u4f8b\nfor(const auto &x : data){\n\t++count[x];\n}\n// \u6700\u5927\u5024\u306e\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u308a\u51fa\u3059\nauto max_iterator = std::max_element(count.begin(), count.end());\nsize_t mode = std::distance(count.begin(), max_iterator);\nstd::cout << \"\u6700\u983b\u5024\uff1a\" << mode << std::endl;\n```\n\n\u3000\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`std::unordered_map<\u5024,\u30ab\u30a6\u30f3\u30c8>`\u3068\u3057\u3066\u304b\u3089\u30ab\u30a6\u30f3\u30c8\u306e\u6700\u5927\u5024\u3092\u5168\u8d70\u67fb\u3059\u308b\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u3044\u3067\u3057\u3087\u3046\u3002\u3053\u3061\u3089\u3082\u8a08\u7b97\u91cf\u306f$O(N)$\u3067\u3059(\u30cf\u30c3\u30b7\u30e5\u304c\u52a3\u5316\u3057\u3066\u306a\u3044\u5834\u5408)\u3002\n\n```cpp\n#include <algorithm>\n#include <unordered_map>\n\n// \u96c6\u8a08\u3059\u308b\nstd::unordered_map<unsigned int, size_t> hash;\nfor(const auto &x : data){\n\tif(hash.find(x) != hash.end()){\n\t\t++hash.at(x);\n\t}else{\n\t\thash[x] = 1;\n\t}\n}\n// \u6700\u5927\u5024\u306e\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u308a\u51fa\u3059\n// \u5225\u9014\u6bd4\u8f03\u95a2\u6570\u3092\u66f8\u304d\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u30e9\u30e0\u30c0\u5f0f\u306b\u3057\u305f\n// (\u30e9\u30e0\u30c0\u5f0f\u306e\u5f15\u6570\u3067auto\u304c\u4f7f\u3048\u308b\u306e\u306fC++14\u304b\u3089)\nauto max_iterator2 = std::max_element(hash.begin(), hash.end(),\n\t[](const auto &a, const auto &b) -> bool {\n\t\treturn (a.second < b.second);\n\t}\n);\nint mode = max_iterator2->first;\nstd::cout << \"\u6700\u983b\u5024\uff1a\" << mode << std::endl;\n```\n\n\u3000\u307e\u305f\u3001\u30c7\u30fc\u30bf\u3092\u4e8b\u524d\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001\u5148\u982d\u304b\u3089\u898b\u3066\u3044\u3063\u305f\u969b\u306b\u300c\u9023\u7d9a\u3059\u308b\u6570\u300d\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u6700\u983b\u5024\u3092\u63a2\u3059\u4f5c\u6226\u3082\u3042\u308a\u307e\u3059([_EnumHack](http://qiita.com/_EnumHack)\u3055\u3093\u306e\u30a2\u30a4\u30c7\u30a3\u30a2)\u3002\n\u3000\u3053\u3061\u3089\u306f\u30bd\u30fc\u30c8\u3059\u308b\u6642\u70b9\u3067$O(N\\log N)$\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c(\u30ab\u30a6\u30f3\u30c8\u90e8\u5206\u3082\u7d50\u5c40\u306f$O(N\\log N)$\u306b\u306a\u308b)\u3001\u300c\u5225\u9014\u30d7\u30fc\u30eb\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u300d\u3068\u3044\u3063\u305f\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u203b[_EnumHack](http://qiita.com/_EnumHack)\u3055\u3093\u304b\u3089\u306e\u30b3\u30e1\u30f3\u30c8\uff1a\n>\u306f\u3058\u3081\u306b\u3001`std::adjacent_find`\u3067\u96a3\u63a5\u3059\u308b\u8981\u7d20\u304c\u7b49\u3057\u3044\u5834\u6240\u307e\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u307e\u3059\u3002\n\u6b21\u306b\u305d\u306e\u8981\u7d20\u3088\u308a\u5024\u304c\u5927\u304d\u3044\u8981\u7d20\u3092`std::upper_bound`\u3067\u4e8c\u5206\u63a2\u7d22\u3057\u307e\u3059\u3002\n\u6700\u5f8c\u306b`std::distance`\u3092\u4f7f\u3063\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8ddd\u96e2\uff08\u3059\u306a\u308f\u3061\u9023\u7d9a\u3059\u308b\u6570\u306e\u30ab\u30a6\u30f3\u30c8\uff09\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u30b3\u30f3\u30c6\u30ca\u306e\u7d42\u7aef\u307e\u3067\u7e70\u308a\u8fd4\u3057\u3066\u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u5927\u304d\u304b\u3063\u305f\u8981\u7d20\u3092mode\u3068\u3059\u308b\u3068\u3044\u3046\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n>\u5225\u306b\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u7528\u610f\uff08\u305d\u3057\u3066\u305d\u308c\u306b\u30a2\u30af\u30bb\u30b9\uff09\u3059\u308b\u30b3\u30b9\u30c8\u306f\u99ac\u9e7f\u306b\u306a\u3089\u306a\u3044\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u8981\u7d20\u3092`std::adjacent_find`\u3067\u3064\u304e\u3064\u304e\u306b\u8aad\u307f\u98db\u3070\u3057\u306a\u304c\u3089\u3001\u9023\u7d9a\u3057\u305f\u8981\u7d20\u3092\u4e8c\u5206\u63a2\u7d22\u3067\u30ab\u30a6\u30f3\u30c8\u3057\u3064\u3064\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u3092\u56f3\u308b\u6226\u7565\u3092\u601d\u3044\u3064\u304d\u307e\u3057\u305f\u3002\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <iostream>\n\nstd::sort(std::begin(data),std::end(data));\ntypename decltype(data)::value_type mode{};\nsize_t n{},count{1};\nfor(auto iter = std::adjacent_find(std::begin(data), std::end(data)),\n                last = std::end(data),\n                next = std::end(data);\n    iter != last;\n){\n    next = std::upper_bound(iter, last, *iter);\n    count = std::distance(iter,next);\n    if( n < count ) n = count, mode = *iter;\n    iter = std::adjacent_find(next, last);\n}\nstd::cout << \"\u6700\u983b\u5024\uff1a\" << mode << std::endl;\n```\n\n## \u6b63\u898f\u5316 / Normalization\n\u3000\u7d71\u8a08\u306e\u5206\u91ce\u306b\u304a\u3051\u308b\u6b63\u898f\u5316(\u6a19\u6e96\u5316)\u3068\u306f\u3001\u3056\u3063\u304f\u308a\u8a00\u3048\u3070\u6b21\u306e\u5f0f\u3092\u30c7\u30fc\u30bf\u96c6\u56e3\u5168\u4f53\u306b\u65bd\u3059\u3053\u3068\u3067\u3059(`\u03c3`\u306f\u6bcd\u6a19\u6e96\u504f\u5dee)\u3002\u3053\u306e\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u30c7\u30fc\u30bf\u96c6\u56e3\u304c\u300c\u5e73\u5747\u50240\u30fb\u6a19\u672c\u5206\u65631\u300d\u3068\u306a\u308a\u307e\u3059\u3002\u8a73\u3057\u3044\u610f\u5473\u306f\u6b21\u306e\u8a18\u4e8b\u306a\u3069\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n [\u7d71\u8a08\u5b66\u306b\u304a\u3051\u308b\u6a19\u6e96\u5316 - \u30d0\u30a4\u30aa\u30a4\u30f3\u30d5\u30a9\u30de\u30c6\u30a3\u30af\u30b9\u5165\u9580](http://bio-info.biz/statistics/element_standardization.html)\n\n```math\n\\tilde{x}_i=\\frac{x_i-\\bar{x}}{\\sigma}\n```\n\n```cpp\n#include <algorithm>\n#include <vector>\n\n// \u65e2\u306b\u5e73\u5747\u5024ave\u3068\u6a19\u6e96\u504f\u5deesd\u304c\u8a08\u7b97\u3055\u308c\u3066\u3044\u308b\u3068\u3059\u308b\nstd::vector<double> norm_data(std::size(data));\nstd::transform(std::begin(data), std::end(data), norm_data.begin(), [&ave, &sd](const auto &e){\n\treturn (e - ave) / sd;\n});\n```\n\n# \u6700\u5f8c\u306b\n\u3000STL\u3092\u4f7f\u3048\u3070\u3053\u3093\u306a\u306b\u3082\u30b3\u30fc\u30c9\u304c\u30c8\u30ea\u30c3\uff4b\u2026\u2026\uff79\uff9e\uff8c\uff9d\uff79\uff9e\uff8c\uff9d\u3001\u7dba\u9e97\u306b\u306a\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n# \u53c2\u8003\u8a18\u4e8b\n [\u5fd8\u308c\u304c\u3061\u306a C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9](http://qiita.com/shirakawa4756/items/f4cc65c6b2b412b10c0c)\n", "tags": ["C++", "\u6570\u5f0f", "\u7d71\u8a08", "STL"]}