{"tags": ["AndroidWear"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u30022/3\u304b\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002\n1/3\u2190\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n2/3\u3067\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u306f\u4e00\u65e6\u524a\u9664\u3057\u3066\u3001\u4ee3\u308f\u308a\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3057\u3087\u3046\u3002\nImplement the Service and Callback Methods\u306b\u3088\u308b\u3068\u3001Watch face\u4f5c\u6210\u306e\u305f\u3081\u306e\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u3001\u5b9f\u88c5\u3059\u308b\u3079\u304dkey methods\u306e\u6982\u8981\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\u306a\u304a\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u9ed2\u3044\u753b\u9762\u306e\u307f\u304c\u51fa\u307e\u3059\u3002\n\u4f55\u3082\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5f53\u7136\u3067\u3059\u304c\u2026\u2026\npublic class AnalogWatchFaceService extends CanvasWatchFaceService {\n\n    @Override\n    public Engine onCreateEngine() {\n        /* provide your watch face implementation */\n        return new Engine();\n    }\n\n    /* implement service callback methods */\n    private class Engine extends CanvasWatchFaceService.Engine {\n\n        @Override\n        public void onCreate(SurfaceHolder holder) {\n            /* initialize your watch face */\n        }\n\n        @Override\n        public void onPropertiesChanged(Bundle properties) {\n            /* get device features (burn-in, low-bit ambient) */\n        }\n\n        @Override\n        public void onTimeTick() {\n            /* the time changed */\n        }\n\n        @Override\n        public void onAmbientModeChanged(boolean inAmbientMode) {\n            /* the wearable switched between modes */\n        }\n\n        @Override\n        public void onDraw(Canvas canvas, Rect bounds) {\n            /* draw your watch face */\n        }\n\n        @Override\n        public void onVisibilityChanged(boolean visible) {\n            /* the watch face became visible or invisible */\n        }\n    }\n}\n\n\n\u80cc\u666f\u3092\u3064\u3051\u308b\n\u6700\u521d\u306b\u3001\u80cc\u666f\u7528\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\n  private class Engine extends CanvasWatchFaceService.Engine {\n\n    Bitmap mBackgroundBitmap;\n    Bitmap mBackgroundScaledBitmap;\n\n    ...\n\n\u6b21\u306b\u3001\u4e0a\u8a18\u5909\u6570\u3078\u80cc\u666f\u753b\u50cf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n    @Override\n    public void onCreate(SurfaceHolder holder) {\n            /* initialize your watch face */\n\n      Resources resources = AnalogWatchFaceService.this.getResources();\n      Drawable backgroundDrawable = resources.getDrawable(R.drawable.bg, null);\n      mBackgroundBitmap = ((BitmapDrawable) backgroundDrawable).getBitmap();\n\n      ...\n\n\u6700\u5f8c\u306b\u3001\u80cc\u666f\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\u7528\u610f\u3057\u305f\u80cc\u666f\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u304c\u753b\u9762\u306e\u89e3\u50cf\u5ea6\u3068\u5408\u308f\u306a\u3044\u5834\u5408\u3001createScaledBitmap\u3092\u4f7f\u7528\u3057\u3066\u7e2e\u5c3a\u3092\u5408\u308f\u305b\u3066\u304b\u3089\u3001\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\n    @Override\n    public void onDraw(Canvas canvas, Rect bounds) {\n            /* draw your watch face */\n\n      int width = bounds.width();\n      int height = bounds.height();\n\n      // Draw the background, scaled to fit.\n      if (mBackgroundScaledBitmap == null\n          || mBackgroundScaledBitmap.getWidth() != width\n          || mBackgroundScaledBitmap.getHeight() != height) {\n        mBackgroundScaledBitmap = Bitmap.createScaledBitmap(mBackgroundBitmap,\n            width, height, true /* filter */);\n      }\n      canvas.drawBitmap(mBackgroundScaledBitmap, 0, 0, null);\n\n    }\n\nwear\u2192res\u2192drawable\u306b\u3001\u80cc\u666f\u753b\u50cf\u306b\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u308c\u307e\u3057\u3087\u3046\u3002(hoge.png\u7b49)\n\u305d\u306e\u5f8c\u30012\u3064\u4e0a\u306e\u30b3\u30fc\u30c9\u306b\u3042\u308b\"R.drawable.bg\"\u3092\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u5408\u308f\u305b\u3066\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n(hoge.png\u306a\u3089\u3001\"R.drawable.hoge\"\u306b\u306a\u308a\u307e\u3059)\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3067\u306f\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u753b\u50cf\u3092\u5909\u3048\u308b\u65b9\u6cd5\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u7f8e\u5973\u6642\u8a08\u3092\u4f5c\u308d\u3046\uff01Android Wear\u958b\u767a\u5165\u9580 30\u5206\u3067\u4f5c\u308b\u76e4\u9762\u30a2\u30d7\u30ea\n\n\n\u6642\u91dd\u3001\u5206\u91dd\u3001\u79d2\u91dd\u3092\u52a0\u3048\u308b\n\u3072\u3068\u307e\u305a\u3001\u52d5\u304b\u306a\u3044\u6642\u8a08\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u6700\u521d\u306b\u3001\u5404\u91dd\u7528\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\n  private class Engine extends CanvasWatchFaceService.Engine {\n\n    Paint mHourPaint;\n    Paint mMinutePaint;\n    Paint mSecondPaint;\n\n    Time mTime;\n\n    ...\n\n\u6b21\u306b\u3001\u4e0a\u8a18\u5909\u6570\u3078\u5404\u91dd\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n    @Override\n    public void onCreate(SurfaceHolder holder) {\n            /* initialize your watch face */\n\n      ...\n\n      //Paint\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3057\u3066\u3001\u5909\u6570\u306b\u8a2d\u5b9a\u3059\u308b\n      mHourPaint = new Paint();\n      //\u8272\u3092\u8a2d\u5b9a\u3059\u308b\n      mHourPaint.setARGB(255, 200, 200, 200);\n      //\u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a\u3059\u308b\n      mHourPaint.setStrokeWidth(5.f);\n      //\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u51e6\u7406\u3092\u8a2d\u5b9a\u3059\u308b\n      mHourPaint.setAntiAlias(true);\n      //\u7dda\u306e\u89d2\u306e\u5f62\u3092\u8a2d\u5b9a\u3059\u308b\n      mHourPaint.setStrokeCap(Paint.Cap.ROUND);\n\n      mMinutePaint = new Paint();\n      mMinutePaint.setARGB(255, 200, 200, 200);\n      mMinutePaint.setStrokeWidth(3.f);\n      mMinutePaint.setAntiAlias(true);\n      mMinutePaint.setStrokeCap(Paint.Cap.ROUND);\n\n      mSecondPaint = new Paint();\n      mSecondPaint.setARGB(255, 255, 0, 0);\n      mSecondPaint.setStrokeWidth(2.f);\n      mSecondPaint.setAntiAlias(true);\n      mSecondPaint.setStrokeCap(Paint.Cap.ROUND);\n\n      mTime = new Time();\n\n      ...\n\n\n\u6700\u5f8c\u306b\u3001\u4f5c\u6210\u3057\u305f\u5404\u91dd\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n@Override\n    public void onDraw(Canvas canvas, Rect bounds) {\n            /* draw your watch face */\n\n      ...\n\n      // Find the center. Ignore the window insets so that, on round watches\n      // with a \"chin\", the watch face is centered on the entire screen, not\n      // just the usable portion.\n      float centerX = width / 2f;\n      float centerY = height / 2f;\n\n      // Compute rotations and lengths for the clock hands.\n      float secRot = mTime.second / 30f * (float) Math.PI;\n      int minutes = mTime.minute;\n      float minRot = minutes / 30f * (float) Math.PI;\n      float hrRot = ((mTime.hour + (minutes / 60f)) / 6f) * (float) Math.PI;\n\n      float secLength = centerX - 20;\n      float minLength = centerX - 40;\n      float hrLength = centerX - 80;\n\n      // Draw hands.\n      float secX = (float) Math.sin(secRot) * secLength;\n      float secY = (float) -Math.cos(secRot) * secLength;\n      canvas.drawLine(centerX, centerY, centerX + secX, centerY +\n          secY, mSecondPaint);\n\n      float minX = (float) Math.sin(minRot) * minLength;\n      float minY = (float) -Math.cos(minRot) * minLength;\n      canvas.drawLine(centerX, centerY, centerX + minX, centerY + minY,\n          mMinutePaint);\n\n      float hrX = (float) Math.sin(hrRot) * hrLength;\n      float hrY = (float) -Math.cos(hrRot) * hrLength;\n      canvas.drawLine(centerX, centerY, centerX + hrX, centerY + hrY,\n          mHourPaint);\n\n    ...\n\n\nCanvas\u30af\u30e9\u30b9\u306b\u304a\u3044\u3066\u306f\u3001\u5e73\u9762\u306e\u5de6\u4e0a\u5ea7\u6a19\u3092(0,0)\u3068\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u3053\u3053\u307e\u3067\u3092\u8a18\u8ff0\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u52d5\u304b\u306a\u3044\u6642\u8a08\u304c\u5b8c\u6210\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u4e0a\u8a18\u3067\u4f7f\u7528\u3057\u3066\u3044\u308bTime\u30af\u30e9\u30b9\u306f\u3001API level 22\u3067\u306fdeprecated\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u4eca\u5f8c\u306fCalendar\u3001GregorianCalendar\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u6642\u8a08\u3092\u52d5\u304b\u3059\n\u307e\u305a\u3001\u76e4\u9762\u66f4\u65b0\u306e\u983b\u5ea6\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u79d2\u91dd\u306f\u901a\u5e381\u79d2\u306b1\u56de\u52d5\u304f\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u983b\u5ea6\u30821\u79d2\u306b1\u5ea6\u3068\u3057\u307e\u3059\u3002\n\u983b\u5ea6\u3092\u6c7a\u5b9a\u3057\u305f\u3089\u3001\u5909\u6570\"INTERACTIVE_UPDATE_RATE_MS\"\u306b\u983b\u5ea6\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u76e4\u9762\u66f4\u65b0\u306e\u983b\u5ea6\u306b\u4fc2\u308b\u79d2\u6570\u3092\u30df\u30ea\u79d2\u306b\u5909\u63db\u3057\u3001\u5f53\u8a72\u5909\u6570\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u30021\n\npublic class AnalogWatchFaceService extends CanvasWatchFaceService {\n\n  private static final long INTERACTIVE_UPDATE_RATE_MS = TimeUnit.SECONDS.toMillis(1);\n\n ...\n\n\n\u4ee5\u4e0b\u4f5c\u6210\u4e2d\n\n\n\n\n\u3053\u3053\u3092\"5\"\u306b\u3059\u308b\u3068\u3001\u76e4\u9762\u66f4\u65b0\u306e\u983b\u5ea6\u306f5\u79d2\u306b1\u5ea6\u3068\u306a\u308a\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n[2/3](http://qiita.com/eoppp/items/dc602fae65bc71a69d83)\u304b\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002\n[1/3](http://qiita.com/eoppp/items/e6f2a0783810026e4d56)\u2190\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n#\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n\n[2/3](http://qiita.com/eoppp/items/dc602fae65bc71a69d83)\u3067\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u306f\u4e00\u65e6\u524a\u9664\u3057\u3066\u3001\u4ee3\u308f\u308a\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3057\u3087\u3046\u3002\n\n[Implement the Service and Callback Methods](https://developer.android.com/training/wearables/watch-faces/service.html#CallbackMethods)\u306b\u3088\u308b\u3068\u3001Watch face\u4f5c\u6210\u306e\u305f\u3081\u306e\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u3001\u5b9f\u88c5\u3059\u308b\u3079\u304dkey methods\u306e\u6982\u8981\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n\u306a\u304a\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u9ed2\u3044\u753b\u9762\u306e\u307f\u304c\u51fa\u307e\u3059\u3002\n\u4f55\u3082\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5f53\u7136\u3067\u3059\u304c\u2026\u2026\n\n```\npublic class AnalogWatchFaceService extends CanvasWatchFaceService {\n\n    @Override\n    public Engine onCreateEngine() {\n        /* provide your watch face implementation */\n        return new Engine();\n    }\n\n    /* implement service callback methods */\n    private class Engine extends CanvasWatchFaceService.Engine {\n\n        @Override\n        public void onCreate(SurfaceHolder holder) {\n            /* initialize your watch face */\n        }\n\n        @Override\n        public void onPropertiesChanged(Bundle properties) {\n            /* get device features (burn-in, low-bit ambient) */\n        }\n\n        @Override\n        public void onTimeTick() {\n            /* the time changed */\n        }\n\n        @Override\n        public void onAmbientModeChanged(boolean inAmbientMode) {\n            /* the wearable switched between modes */\n        }\n\n        @Override\n        public void onDraw(Canvas canvas, Rect bounds) {\n            /* draw your watch face */\n        }\n\n        @Override\n        public void onVisibilityChanged(boolean visible) {\n            /* the watch face became visible or invisible */\n        }\n    }\n}\n```\n\n##\u80cc\u666f\u3092\u3064\u3051\u308b\n\n\u6700\u521d\u306b\u3001\u80cc\u666f\u7528\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\n```\n  private class Engine extends CanvasWatchFaceService.Engine {\n\n    Bitmap mBackgroundBitmap;\n    Bitmap mBackgroundScaledBitmap;\n\n    ...\n```\n\n\u6b21\u306b\u3001\u4e0a\u8a18\u5909\u6570\u3078\u80cc\u666f\u753b\u50cf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```\n    @Override\n    public void onCreate(SurfaceHolder holder) {\n            /* initialize your watch face */\n\n      Resources resources = AnalogWatchFaceService.this.getResources();\n      Drawable backgroundDrawable = resources.getDrawable(R.drawable.bg, null);\n      mBackgroundBitmap = ((BitmapDrawable) backgroundDrawable).getBitmap();\n\n      ...\n```\n\n\u6700\u5f8c\u306b\u3001\u80cc\u666f\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\u7528\u610f\u3057\u305f\u80cc\u666f\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u304c\u753b\u9762\u306e\u89e3\u50cf\u5ea6\u3068\u5408\u308f\u306a\u3044\u5834\u5408\u3001createScaledBitmap\u3092\u4f7f\u7528\u3057\u3066\u7e2e\u5c3a\u3092\u5408\u308f\u305b\u3066\u304b\u3089\u3001\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n    @Override\n    public void onDraw(Canvas canvas, Rect bounds) {\n            /* draw your watch face */\n\n      int width = bounds.width();\n      int height = bounds.height();\n\n      // Draw the background, scaled to fit.\n      if (mBackgroundScaledBitmap == null\n          || mBackgroundScaledBitmap.getWidth() != width\n          || mBackgroundScaledBitmap.getHeight() != height) {\n        mBackgroundScaledBitmap = Bitmap.createScaledBitmap(mBackgroundBitmap,\n            width, height, true /* filter */);\n      }\n      canvas.drawBitmap(mBackgroundScaledBitmap, 0, 0, null);\n\n    }\n```\n\nwear\u2192res\u2192drawable\u306b\u3001\u80cc\u666f\u753b\u50cf\u306b\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u308c\u307e\u3057\u3087\u3046\u3002(hoge.png\u7b49)\n\u305d\u306e\u5f8c\u30012\u3064\u4e0a\u306e\u30b3\u30fc\u30c9\u306b\u3042\u308b\"R.drawable.bg\"\u3092\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u5408\u308f\u305b\u3066\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n(hoge.png\u306a\u3089\u3001\"R.drawable.hoge\"\u306b\u306a\u308a\u307e\u3059)\n\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3067\u306f\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u753b\u50cf\u3092\u5909\u3048\u308b\u65b9\u6cd5\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n>[\u7f8e\u5973\u6642\u8a08\u3092\u4f5c\u308d\u3046\uff01Android Wear\u958b\u767a\u5165\u9580 30\u5206\u3067\u4f5c\u308b\u76e4\u9762\u30a2\u30d7\u30ea](http://blog.btrax.com/jp/2014/12/16/develop-watch-face/)\n\n##\u6642\u91dd\u3001\u5206\u91dd\u3001\u79d2\u91dd\u3092\u52a0\u3048\u308b\n\n\u3072\u3068\u307e\u305a\u3001\u52d5\u304b\u306a\u3044\u6642\u8a08\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u6700\u521d\u306b\u3001\u5404\u91dd\u7528\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\n```\n  private class Engine extends CanvasWatchFaceService.Engine {\n\n    Paint mHourPaint;\n    Paint mMinutePaint;\n    Paint mSecondPaint;\n\n    Time mTime;\n\n    ...\n```\n\n\u6b21\u306b\u3001\u4e0a\u8a18\u5909\u6570\u3078\u5404\u91dd\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```\n    @Override\n    public void onCreate(SurfaceHolder holder) {\n            /* initialize your watch face */\n\n      ...\n\n      //Paint\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3057\u3066\u3001\u5909\u6570\u306b\u8a2d\u5b9a\u3059\u308b\n      mHourPaint = new Paint();\n      //\u8272\u3092\u8a2d\u5b9a\u3059\u308b\n      mHourPaint.setARGB(255, 200, 200, 200);\n      //\u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a\u3059\u308b\n      mHourPaint.setStrokeWidth(5.f);\n      //\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u51e6\u7406\u3092\u8a2d\u5b9a\u3059\u308b\n      mHourPaint.setAntiAlias(true);\n      //\u7dda\u306e\u89d2\u306e\u5f62\u3092\u8a2d\u5b9a\u3059\u308b\n      mHourPaint.setStrokeCap(Paint.Cap.ROUND);\n\n      mMinutePaint = new Paint();\n      mMinutePaint.setARGB(255, 200, 200, 200);\n      mMinutePaint.setStrokeWidth(3.f);\n      mMinutePaint.setAntiAlias(true);\n      mMinutePaint.setStrokeCap(Paint.Cap.ROUND);\n\n      mSecondPaint = new Paint();\n      mSecondPaint.setARGB(255, 255, 0, 0);\n      mSecondPaint.setStrokeWidth(2.f);\n      mSecondPaint.setAntiAlias(true);\n      mSecondPaint.setStrokeCap(Paint.Cap.ROUND);\n\n      mTime = new Time();\n\n      ...\n\n```\n\n\u6700\u5f8c\u306b\u3001\u4f5c\u6210\u3057\u305f\u5404\u91dd\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\n```\n@Override\n    public void onDraw(Canvas canvas, Rect bounds) {\n            /* draw your watch face */\n\n      ...\n\n      // Find the center. Ignore the window insets so that, on round watches\n      // with a \"chin\", the watch face is centered on the entire screen, not\n      // just the usable portion.\n      float centerX = width / 2f;\n      float centerY = height / 2f;\n\n      // Compute rotations and lengths for the clock hands.\n      float secRot = mTime.second / 30f * (float) Math.PI;\n      int minutes = mTime.minute;\n      float minRot = minutes / 30f * (float) Math.PI;\n      float hrRot = ((mTime.hour + (minutes / 60f)) / 6f) * (float) Math.PI;\n\n      float secLength = centerX - 20;\n      float minLength = centerX - 40;\n      float hrLength = centerX - 80;\n\n      // Draw hands.\n      float secX = (float) Math.sin(secRot) * secLength;\n      float secY = (float) -Math.cos(secRot) * secLength;\n      canvas.drawLine(centerX, centerY, centerX + secX, centerY +\n          secY, mSecondPaint);\n\n      float minX = (float) Math.sin(minRot) * minLength;\n      float minY = (float) -Math.cos(minRot) * minLength;\n      canvas.drawLine(centerX, centerY, centerX + minX, centerY + minY,\n          mMinutePaint);\n\n      float hrX = (float) Math.sin(hrRot) * hrLength;\n      float hrY = (float) -Math.cos(hrRot) * hrLength;\n      canvas.drawLine(centerX, centerY, centerX + hrX, centerY + hrY,\n          mHourPaint);\n\n    ...\n\n```\n\nCanvas\u30af\u30e9\u30b9\u306b\u304a\u3044\u3066\u306f\u3001\u5e73\u9762\u306e\u5de6\u4e0a\u5ea7\u6a19\u3092(0,0)\u3068\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\u3053\u3053\u307e\u3067\u3092\u8a18\u8ff0\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u52d5\u304b\u306a\u3044\u6642\u8a08\u304c\u5b8c\u6210\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u4e0a\u8a18\u3067\u4f7f\u7528\u3057\u3066\u3044\u308bTime\u30af\u30e9\u30b9\u306f\u3001API level 22\u3067\u306fdeprecated\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u4eca\u5f8c\u306fCalendar\u3001GregorianCalendar\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002\n\n##\u6642\u8a08\u3092\u52d5\u304b\u3059\n\n\u307e\u305a\u3001\u76e4\u9762\u66f4\u65b0\u306e\u983b\u5ea6\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u79d2\u91dd\u306f\u901a\u5e381\u79d2\u306b1\u56de\u52d5\u304f\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u983b\u5ea6\u30821\u79d2\u306b1\u5ea6\u3068\u3057\u307e\u3059\u3002\n\n\u983b\u5ea6\u3092\u6c7a\u5b9a\u3057\u305f\u3089\u3001\u5909\u6570\"INTERACTIVE_UPDATE_RATE_MS\"\u306b\u983b\u5ea6\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u76e4\u9762\u66f4\u65b0\u306e\u983b\u5ea6\u306b\u4fc2\u308b\u79d2\u6570\u3092\u30df\u30ea\u79d2\u306b\u5909\u63db\u3057\u3001\u5f53\u8a72\u5909\u6570\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002[^1]\n[^1]: \u3053\u3053\u3092\"5\"\u306b\u3059\u308b\u3068\u3001\u76e4\u9762\u66f4\u65b0\u306e\u983b\u5ea6\u306f5\u79d2\u306b1\u5ea6\u3068\u306a\u308a\u307e\u3059\u3002\n<br />\n\n```\npublic class AnalogWatchFaceService extends CanvasWatchFaceService {\n\n  private static final long INTERACTIVE_UPDATE_RATE_MS = TimeUnit.SECONDS.toMillis(1);\n\n ...\n\n```\n\n\n\n\u4ee5\u4e0b\u4f5c\u6210\u4e2d\n"}