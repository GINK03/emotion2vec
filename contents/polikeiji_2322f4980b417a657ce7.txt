{"tags": ["Python", "ImageMagick", "GIF\u30a2\u30cb\u30e1", "\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8", "pillow"], "context": " More than 1 year has passed since last update.\n\u7279\u306b\u610f\u5473\u306a\u304f\u3001\u8907\u6570\u306e\u753b\u50cf\u304b\u3089\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u306eGIF\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308bPython\u3092\u66f8\u3044\u305f\u3093\u3067\u3001\u4f7f\u3044\u9053\u3082\u7279\u306b\u7121\u3044\u3093\u3067\u3053\u3053\u306b\u66f8\u3044\u3068\u304f\u3002\n\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u306f\u3001\u982d\u304c\u56de\u308b\u3088\u3046\u306b\uff18\u679a\u306e\u5199\u771f\u3092\u4f7f\u3063\u3066\u3001\u300cpolikej#\u300d\u306e\u6587\u5b57\u3092\u4f7f\u3063\u3066\u751f\u6210\u3057\u307e\u3057\u305f\u3002\n\u30bf\u30a4\u30eb\u72b6\u306b\u4e26\u3079\u308b\u753b\u50cf\u306e\u6570\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u8272\u30fb\u30b5\u30a4\u30ba\u306a\u3069\u3092\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u5192\u982d\u306e\u5927\u6587\u5b57\u5909\u6570\u3067\u6307\u5b9a\u3057\u3066\u307e\u3059\u3002\n\uff08\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u306f\u3001\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5c11\u3057\u3044\u3058\u3063\u3066\u4f5c\u3063\u3066\u307e\u3059\u3002\uff09\n\u30d5\u30a9\u30f3\u30c8\u306e\u30d1\u30b9\u306f\u3001OSX\u3060\u3068Font Book\u3068\u304b\u3067\u3001\u7b49\u5e45\u30d5\u30a9\u30f3\u30c8\u3092\u8abf\u3079\u3066\u3001\u53f3\u30af\u30ea\u30c3\u30af\u3067Finder\u8868\u793a\u3067\u5206\u304b\u308b\u3002\n\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u5316\u306bPillow\u3001GIF\u30a2\u30cb\u751f\u6210\u306bImageMagick\u304c\u5fc5\u8981\u3067\u3059\u3002\nMac\u4f7f\u3063\u3066\u308c\u3093\u3067\u3001pip\u3068brew\u3067\u3001\u305d\u308c\u305e\u308c\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307e\u3059\u3002\nfrom PIL import Image, ImageDraw, ImageFont\nimport os.path\nimport os\nimport commands\n\n\nFONT_SIZE = 12\nGRID_SIZE = (3, 2)\nFONT_COLOR_SET = (\"#ffffff\", \"#000000\")\nFONT_PATH = '\u30d5\u30a9\u30f3\u30c8\uff08\u7b49\u5e45\uff09\u306e\u30d1\u30b9'\nIMAGE_NAMES = [\n    'f0.png',\n    'f1.png',\n    'f2.png',\n    'f3.png',\n    'f4.png',\n    'f5.png',\n    'f6.png',\n    'f7.png',\n]\n\nFONT_COLOR, FONT_BACKGROUND_COLOR = FONT_COLOR_SET\nCOLUMNS, ROWS = GRID_SIZE\n\n\ndef image2ascii(input_image):\n\n    original_width, original_height = input_image.size\n\n    width = original_width * COLUMNS\n    height = original_height * ROWS\n\n    character, line = \"\", []\n    font = ImageFont.truetype(FONT_PATH, FONT_SIZE, encoding=\"utf-8\")\n    input_pix = input_image.load()\n    output_image = Image.new(\"RGBA\", (width, height), FONT_BACKGROUND_COLOR)\n    draw = ImageDraw.Draw(output_image)\n\n    font_width, font_height = font.getsize(\"#\")\n\n    margin_width = width % font_width\n    margin_height = height % font_height\n\n    offset_x = int(round(margin_width / 2))\n    offset_y = int(round(margin_height / 2))\n\n    for row in range(ROWS):\n        for y in range(offset_y, original_height - offset_y, font_height):\n            line = []\n            for column in range(COLUMNS):\n                for x in range(offset_x, original_width - offset_x, font_width):\n                    r, g, b, _ = input_pix[x - offset_x, y - offset_y]\n                    gray = r * 0.2126 + g * 0.7152 + b * 0.0722\n                    \"polikeiji\"\n                    if gray > 130:\n                        character = \" \"\n                    elif gray > 100:\n                        character = \"i\"\n                    elif gray > 90:\n                        character = \"l\"\n                    elif gray > 80:\n                        character = \"j\"\n                    elif gray > 60:\n                        character = \"o\"\n                    elif gray > 50:\n                        character = \"e\"\n                    elif gray > 40:\n                        character = \"p\"\n                    elif gray > 30:\n                        character = \"k\"\n                    else:\n                        character = \"#\"\n                    line.append(character)\n            draw.text((offset_x, y + row * original_height), \"\".join(line), font = font, fill = FONT_COLOR)\n    return output_image\n\nif __name__ == \"__main__\":\n    directory_name = os.path.dirname(IMAGE_NAMES[0])\n    if directory_name != '':\n        directory_name = directory_name + \"/\"\n    ascii_image_directory = \"{0}ascii_{1}_{2}x{3}_{4}_{5}\".format(\n        directory_name, FONT_SIZE, ROWS, COLUMNS, FONT_COLOR, FONT_BACKGROUND_COLOR)\n\n    for image_name in IMAGE_NAMES:\n        print \"Input image: {0}\".format(image_name)\n\n        with Image.open(image_name) as input_image:\n            output_image = image2ascii(input_image)\n\n            file_name, extension = os.path.splitext(os.path.basename(image_name))\n\n            ascii_image_name = \"{0}/ascii_{1}_{2}x{3}_{4}{5}\".format(\n                ascii_image_directory,\n                FONT_SIZE, ROWS, COLUMNS, file_name, extension)\n\n            ascii_image_directory = os.path.dirname(ascii_image_name)\n            if not os.path.exists(ascii_image_directory):\n                os.makedirs(ascii_image_directory)\n\n            output_image.save(ascii_image_name)\n\n            print \"Output image: {0}\".format(ascii_image_name)\n\n    make_gif_animation_command = \"convert -delay 10 -loop 0 {0}/*.png {0}/{1}.gif\".format(\n        ascii_image_directory, os.path.basename(ascii_image_directory))\n\n    print commands.getoutput(make_gif_animation_command)\n\n\nPillow\u3067\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u751f\u6210\n\u30b3\u30fc\u30c9\u3082\u542b\u3081\u3066\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u307e\u3059\u3002\n\u753b\u50cf\u3092\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u8abf\u3079\u3066\u3001\u8f1d\u5ea6\u306b\u5fdc\u3058\u3066\u6587\u5b57\u3092\u5272\u308a\u5f53\u3066\u308b\u611f\u3058\u3002\n\u30d5\u30a9\u30f3\u30c8\u306b\u3088\u3063\u3066\u30011\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u304c\u9055\u3046\u3093\u3067\u3001\u4e8b\u524d\u306b1\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u3092\u8abf\u3079\u3066\u3001\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u304c\u4e2d\u592e\u5bc4\u305b\u306b\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u3066\u308b\u3002\n\u3042\u3068\u3067\u3001\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3067\u753b\u50cf\u3092\u6307\u5b9a\u3057\u3066\u3001ImageMagick\u3067GIF\u30a2\u30cb\u3092\u4f5c\u3063\u3066\u308b\u3093\u3067\u3001\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u5316\u3057\u305f\u753b\u50cf\u306f\u4e00\u500b\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u307e\u3068\u3081\u3066\u4fdd\u5b58\u3057\u3066\u308b\u3002\n\nImageMagick\u3067Gif\u30a2\u30cb\u751f\u6210\n\u5358\u306bconvert\u30b3\u30de\u30f3\u30c9\u3067\u751f\u6210\u3002\nconvert -delay 10 -loop 0 {\u30d5\u30a9\u30eb\u30c0}/*.png {\u30d5\u30a9\u30eb\u30c0}/output.gif\n\ndelay\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306a\u3093\u3068\u306a\u304f\u30b9\u30d4\u30fc\u30c9\u306f\u5909\u308f\u308b\u3051\u3069\u3001\u30d3\u30e5\u30fc\u30ef\u30fc\u306b\u3088\u3063\u3066\u901f\u5ea6\u304c\u9055\u3046\u3063\u307d\u304f\u3001\u53b3\u5bc6\u306bFPS\u3068\u304b\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044\u3063\u307d\u3044\u3002\nPython\u3067GIF\u30a2\u30cb\u4f5c\u308c\u306a\u3044\u306e\u304b\u306a\u3001\u3068\u601d\u3063\u305f\u3051\u3069\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u3044 or \u9762\u5012\u81ed\u305d\u3046\u3060\u3063\u305f\u3002\nstackoverflow\u3002\n\n![\u30b5\u30f3\u30d7\u30eb](https://49.media.tumblr.com/4a2238c9b81e2a331e6d4b2ca35306a0/tumblr_nzjgtpRlI31s0c5hro1_1280.gif)\n\n\u7279\u306b\u610f\u5473\u306a\u304f\u3001\u8907\u6570\u306e\u753b\u50cf\u304b\u3089\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u306eGIF\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308bPython\u3092\u66f8\u3044\u305f\u3093\u3067\u3001\u4f7f\u3044\u9053\u3082\u7279\u306b\u7121\u3044\u3093\u3067\u3053\u3053\u306b\u66f8\u3044\u3068\u304f\u3002\n\n\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u306f\u3001\u982d\u304c\u56de\u308b\u3088\u3046\u306b\uff18\u679a\u306e\u5199\u771f\u3092\u4f7f\u3063\u3066\u3001\u300cpolikej#\u300d\u306e\u6587\u5b57\u3092\u4f7f\u3063\u3066\u751f\u6210\u3057\u307e\u3057\u305f\u3002\n\u30bf\u30a4\u30eb\u72b6\u306b\u4e26\u3079\u308b\u753b\u50cf\u306e\u6570\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u8272\u30fb\u30b5\u30a4\u30ba\u306a\u3069\u3092\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u5192\u982d\u306e\u5927\u6587\u5b57\u5909\u6570\u3067\u6307\u5b9a\u3057\u3066\u307e\u3059\u3002\n\uff08\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u306f\u3001\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5c11\u3057\u3044\u3058\u3063\u3066\u4f5c\u3063\u3066\u307e\u3059\u3002\uff09\n\n\u30d5\u30a9\u30f3\u30c8\u306e\u30d1\u30b9\u306f\u3001OSX\u3060\u3068`Font Book`\u3068\u304b\u3067\u3001\u7b49\u5e45\u30d5\u30a9\u30f3\u30c8\u3092\u8abf\u3079\u3066\u3001\u53f3\u30af\u30ea\u30c3\u30af\u3067Finder\u8868\u793a\u3067\u5206\u304b\u308b\u3002\n\n\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u5316\u306b[Pillow](http://pillow.readthedocs.org/en/3.0.x/index.html)\u3001GIF\u30a2\u30cb\u751f\u6210\u306b[ImageMagick](http://www.imagemagick.org/script/index.php)\u304c\u5fc5\u8981\u3067\u3059\u3002\nMac\u4f7f\u3063\u3066\u308c\u3093\u3067\u3001pip\u3068brew\u3067\u3001\u305d\u308c\u305e\u308c\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307e\u3059\u3002\n\n```py\nfrom PIL import Image, ImageDraw, ImageFont\nimport os.path\nimport os\nimport commands\n\n\nFONT_SIZE = 12\nGRID_SIZE = (3, 2)\nFONT_COLOR_SET = (\"#ffffff\", \"#000000\")\nFONT_PATH = '\u30d5\u30a9\u30f3\u30c8\uff08\u7b49\u5e45\uff09\u306e\u30d1\u30b9'\nIMAGE_NAMES = [\n    'f0.png',\n    'f1.png',\n    'f2.png',\n    'f3.png',\n    'f4.png',\n    'f5.png',\n    'f6.png',\n    'f7.png',\n]\n\nFONT_COLOR, FONT_BACKGROUND_COLOR = FONT_COLOR_SET\nCOLUMNS, ROWS = GRID_SIZE\n\n\ndef image2ascii(input_image):\n\n    original_width, original_height = input_image.size\n\n    width = original_width * COLUMNS\n    height = original_height * ROWS\n\n    character, line = \"\", []\n    font = ImageFont.truetype(FONT_PATH, FONT_SIZE, encoding=\"utf-8\")\n    input_pix = input_image.load()\n    output_image = Image.new(\"RGBA\", (width, height), FONT_BACKGROUND_COLOR)\n    draw = ImageDraw.Draw(output_image)\n\n    font_width, font_height = font.getsize(\"#\")\n\n    margin_width = width % font_width\n    margin_height = height % font_height\n\n    offset_x = int(round(margin_width / 2))\n    offset_y = int(round(margin_height / 2))\n\n    for row in range(ROWS):\n        for y in range(offset_y, original_height - offset_y, font_height):\n            line = []\n            for column in range(COLUMNS):\n                for x in range(offset_x, original_width - offset_x, font_width):\n                    r, g, b, _ = input_pix[x - offset_x, y - offset_y]\n                    gray = r * 0.2126 + g * 0.7152 + b * 0.0722\n                    \"polikeiji\"\n                    if gray > 130:\n                        character = \" \"\n                    elif gray > 100:\n                        character = \"i\"\n                    elif gray > 90:\n                        character = \"l\"\n                    elif gray > 80:\n                        character = \"j\"\n                    elif gray > 60:\n                        character = \"o\"\n                    elif gray > 50:\n                        character = \"e\"\n                    elif gray > 40:\n                        character = \"p\"\n                    elif gray > 30:\n                        character = \"k\"\n                    else:\n                        character = \"#\"\n                    line.append(character)\n            draw.text((offset_x, y + row * original_height), \"\".join(line), font = font, fill = FONT_COLOR)\n    return output_image\n\nif __name__ == \"__main__\":\n    directory_name = os.path.dirname(IMAGE_NAMES[0])\n    if directory_name != '':\n        directory_name = directory_name + \"/\"\n    ascii_image_directory = \"{0}ascii_{1}_{2}x{3}_{4}_{5}\".format(\n        directory_name, FONT_SIZE, ROWS, COLUMNS, FONT_COLOR, FONT_BACKGROUND_COLOR)\n\n    for image_name in IMAGE_NAMES:\n        print \"Input image: {0}\".format(image_name)\n\n        with Image.open(image_name) as input_image:\n            output_image = image2ascii(input_image)\n         \n            file_name, extension = os.path.splitext(os.path.basename(image_name))\n    \n            ascii_image_name = \"{0}/ascii_{1}_{2}x{3}_{4}{5}\".format(\n                ascii_image_directory,\n                FONT_SIZE, ROWS, COLUMNS, file_name, extension)\n\n            ascii_image_directory = os.path.dirname(ascii_image_name)\n            if not os.path.exists(ascii_image_directory):\n                os.makedirs(ascii_image_directory)\n    \n            output_image.save(ascii_image_name)\n\n            print \"Output image: {0}\".format(ascii_image_name)\n\n    make_gif_animation_command = \"convert -delay 10 -loop 0 {0}/*.png {0}/{1}.gif\".format(\n        ascii_image_directory, os.path.basename(ascii_image_directory))\n\n    print commands.getoutput(make_gif_animation_command)\n```\n\n\n# Pillow\u3067\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u751f\u6210\n\n\u30b3\u30fc\u30c9\u3082\u542b\u3081\u3066[\u3053\u3061\u3089](http://d.hatena.ne.jp/xef/20120920/p1)\u3092\u53c2\u8003\u306b\u3057\u3066\u307e\u3059\u3002\n\u753b\u50cf\u3092\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u8abf\u3079\u3066\u3001\u8f1d\u5ea6\u306b\u5fdc\u3058\u3066\u6587\u5b57\u3092\u5272\u308a\u5f53\u3066\u308b\u611f\u3058\u3002\n\n\u30d5\u30a9\u30f3\u30c8\u306b\u3088\u3063\u3066\u30011\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u304c\u9055\u3046\u3093\u3067\u3001\u4e8b\u524d\u306b1\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u3092\u8abf\u3079\u3066\u3001\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u304c\u4e2d\u592e\u5bc4\u305b\u306b\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u3066\u308b\u3002\n\n\u3042\u3068\u3067\u3001\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3067\u753b\u50cf\u3092\u6307\u5b9a\u3057\u3066\u3001ImageMagick\u3067GIF\u30a2\u30cb\u3092\u4f5c\u3063\u3066\u308b\u3093\u3067\u3001\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u5316\u3057\u305f\u753b\u50cf\u306f\u4e00\u500b\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u307e\u3068\u3081\u3066\u4fdd\u5b58\u3057\u3066\u308b\u3002\n\n\n# ImageMagick\u3067Gif\u30a2\u30cb\u751f\u6210\n\n\u5358\u306bconvert\u30b3\u30de\u30f3\u30c9\u3067\u751f\u6210\u3002\n\n```bash\nconvert -delay 10 -loop 0 {\u30d5\u30a9\u30eb\u30c0}/*.png {\u30d5\u30a9\u30eb\u30c0}/output.gif\n```\n\ndelay\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306a\u3093\u3068\u306a\u304f\u30b9\u30d4\u30fc\u30c9\u306f\u5909\u308f\u308b\u3051\u3069\u3001\u30d3\u30e5\u30fc\u30ef\u30fc\u306b\u3088\u3063\u3066\u901f\u5ea6\u304c\u9055\u3046\u3063\u307d\u304f\u3001\u53b3\u5bc6\u306bFPS\u3068\u304b\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044\u3063\u307d\u3044\u3002\n\nPython\u3067GIF\u30a2\u30cb\u4f5c\u308c\u306a\u3044\u306e\u304b\u306a\u3001\u3068\u601d\u3063\u305f\u3051\u3069\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u3044 or \u9762\u5012\u81ed\u305d\u3046\u3060\u3063\u305f\u3002\n[stackoverflow](http://stackoverflow.com/questions/753190/programmatically-generate-video-or-animated-gif-in-python)\u3002\n"}