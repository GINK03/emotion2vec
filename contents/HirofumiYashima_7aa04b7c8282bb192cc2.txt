{"context": "\n\n\u5b9f\u88c5\u3059\u308b\u95a2\u6570 \u306e \u4ed5\u69d8\n\n\n\n\u5b9a\u7fa9\u3057\u305fN-gram\u95a2\u6570 \u3092 \u63a2\u7d22\u6587\u5b57\u5217\uff08String\u578b\uff09 \u306e \u9577\u3055 N\uff08Int\u578b\uff09 \u306b \u9069\u7528 \u3057\u3066\u3001\u5f97\u3089\u308c\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\uff08[String]\u578b\uff09\u306b\u3001\u63a2\u7d22\u6587\u5b57\u5217\u3068\u5b8c\u5168\u4e00\u81f4\u3059\u308b\u8981\u7d20 \u304c \u3042\u308b\u304b \u3092 \u691c\u7d22\u3059\u308b\u3002\n\u691c\u7d22\u7d50\u679c \u3092\u3001Boolean\u578b\u3067 \u8fd4\u3059\u3002\n\n\n\n\u4f5c\u6210 \u3057\u305f grep\u95a2\u6570\n\n\n\u95a2\u6570\u5b9a\u7fa9\n\n\nGHCi\nPrelude Data.List> let string_has_pattern_or_not pattern_string string_object = let n = length pattern_string\nPrelude Data.List|                                                                  ngram_partial_string_list = ngrams n string_object\nPrelude Data.List|                                                                  in exist_pattern_in_string pattern_string ngram_partial_string_list\nPrelude Data.List|                                                                      where ngrams :: Int -> [a] -> [[a]]\nPrelude Data.List|                                                                            ngrams n l = take (length l - (n - 1)) . map (take n) . tails $ l\nPrelude Data.List|                                                                            exist_pattern_in_string pattern object_string = elem True boolean_list\nPrelude Data.List|                                                                              where boolean_list = map (==pattern) object_string \nPrelude Data.List| \nPrelude Data.List> \n\n\n\n\u95a2\u6570\u306e\u578b \u3092 \u78ba\u8a8d\n\n\nGHCi\nPrelude Data.List> :t string_has_pattern_or_not \nstring_has_pattern_or_not :: Eq a => [a] -> [a] -> Bool\nPrelude Data.List>\n\n\n\n\u6319\u52d5\u78ba\u8a8d\n\n\uff08\u7d50\u679c\uff09\u554f\u984c\u306a\u3057\n\nGHCi\nPrelude Data.List> string_has_pattern_or_not \"\u6587\u5b57\" \"\u3053\u306e\u6587\u5b57\u5217\"\nTrue\nPrelude Data.List>\n\n\n\nGHCi\nPrelude Data.List> string_has_pattern_or_not \"\u6587\u5b57\" \"\u3053\u306e\u5217\"\nFalse\nPrelude Data.List> \n\n\n\uff08 \u5b9f\u884c\u753b\u9762 \uff09\n\n\n\n\uff08 \u53c2\u8003 \uff09\u4f5c\u6210\u904e\u7a0b\u306e\u30e1\u30e2\n\n\n\uff11. \u63a2\u7d22\u6587\u5b57\u5217 \u306e \u9577\u3055 \u53d6\u5f97\uff08\u5909\u6570\u675f\u7e1b\uff09\n\nString \u306f [Char] \u306a\u306e\u3067\u3001String \u306e \u9577\u3055\uff08\u8981\u7d20\u6570\uff09\u3092 \u5909\u6570 n \u306b\u675f\u7e1b\u3059\u308b\u3002\n\nlet n = length \"\u63a2\u7d22\u6587\u5b57\u5217\"\n\n\nGHCi\nPrelude> \nPrelude> let n = length \"\u63a2\u7d22\u6587\u5b57\u5217\"\nPrelude> n\n5\nPrelude> \nPrelude> putStrLn \"\u65e5\u672c\u8a9e\"\n\u65e5\u672c\u8a9e\nPrelude> \nPrelude> print \"\u65e5\u672c\u8a9e\"\n\"\\26085\\26412\\35486\"\nPrelude> \n\n\n\n\uff08 \u53c2\u8003 \uff09Haskell \u3067 UTF-8 \u65e5\u672c\u8a9e\u6587\u5b57\u5217 \u51fa\u529b\n\nHatena Blog foobardam\u306e\u30d7\u30ed\u30b0 (2012/10.22) \u300cHaskell\u3068UTF\uff18\u3067\u306e\u65e5\u672c\u8a9e\u6587\u5b57\u5217\u306e\u53d6\u6271\u3044\u300d\n\n\n\n2. N-gram \u95a2\u6570 \u3092 \u5b9a\u7fa9\n\nN-gram\u3057\u3066\u3001String -> [String] \u3092 \u8fd4\u3059 N-gram\u95a2\u6570 \u3092 \u5b9a\u7fa9\u3059\u308b\n\nHatena Blog \u3080\u3063\u3053\u306e\u30d6\u30ed\u30b0 \uff082016/10/15\uff09 \u300cHaskell\u3067N-gram\u300d\nStackExchange, Function to get NGrams fast in Haskell\n\n\n\nString \u306f\u3001[Char]\u578b\n\n\u306a\u306e\u3067\u3001\n\n[String] \u306f\u3001[[Char]]\u578b\n\n\u3067 \u3042\u308b\u3002\n\n\nngrams :: Int -> [a] -> [[a]]\nngrams n l = take (length l - (n - 1)) . map (take n) . tails $ l\n\n\ntails\u95a2\u6570\u306f\u3001List.tails\nimport Data.List \u304c \u5fc5\u8981\n\nHatena::Group::Haskell \u7d50\u57ce\u6d69\u306eHaskell\u65e5\u8a18 \uff082006/6/1\uff09 \u300ctails\u95a2\u6570\u300d\nHatena::Diary kurotora\uff082014/07_29\uff09\u300cHaskell\u672c\u3092\u8aad\u3093\u30606\u300d\n\n\nGHCi\nPrelude> \nPrelude> let ngrams :: Int -> [a] -> [[a]]\nPrelude|     ngrams n l = take (length l - (n - 1)) . map (take n) . tails $ l\nPrelude| \n\n<interactive>:81:61:\n    Not in scope: \u2018tails\u2019\n    Perhaps you meant \u2018tail\u2019 (imported from Prelude)\nPrelude>\n\n\n\nGHCi\nPrelude> import List.tails\n\n<interactive>:1:8: parse error on input \u2018List.tails\u2019\nPrelude> \n\n\n\nGHCi\nPrelude> \nPrelude> import Data.List\nPrelude Data.List> let ngrams :: Int -> [a] -> [[a]]\nPrelude Data.List|     ngrams n l = take (length l - (n - 1)) . map (take n) . tails $ l\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> :t ngrams\nngrams :: Int -> [a] -> [[a]]\nPrelude Data.List> \n\n\n\nGHCi\nPrelude Data.List> ngrams 2 \"Hello\"\n[\"He\",\"el\",\"ll\",\"lo\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 3 \"Hello\"\n[\"Hel\",\"ell\",\"llo\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 4 \"Hello\"\n[\"Hell\",\"ello\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 5 \"Hello\"\n[\"Hello\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 1 \"Hello\"\n[\"H\",\"e\",\"l\",\"l\",\"o\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 6 \"Hello\"\n[]\nPrelude Data.List> \nPrelude Data.List> ngrams 0 \"Hello\"\n[\"\",\"\",\"\",\"\",\"\",\"\"]\nPrelude Data.List> \nPrelude Data.List> ngrams -1 \"Hello\"\n\n<interactive>:109:1:\n    Non type-variable argument\n      in the constraint: Num (Int -> [a] -> [[a]])\n    (Use FlexibleContexts to permit this)\n    When checking that \u2018it\u2019 has the inferred type\n      it :: forall a.\n            (Num (Int -> [a] -> [[a]]), Num ([Char] -> Int -> [a] -> [[a]])) =>\n            Int -> [a] -> [[a]]\nPrelude Data.List> \n\n\n\n3. \u5bfe\u8c61\u6587\u5b57\u5217\u3092\u3001\u63a2\u7d22\u6587\u5b57\u5217\u306e\u6587\u5b57\u6570\u305a\u3064\u3001\uff11\u6587\u5b57\u305a\u3089\u3057\u306a\u304c\u3089\u5207\u308a\u51fa\u3059\n\n\n \u95a2\u6570 ngrams \u3092\u4f7f\u3046\u3068\u304d\u306b\u3001N\u306e\u6570\u3092\u3001\u4e0a\u8a18\u306en\u306b\u3059\u308b\u3002\n\n\nlet ngram_list = ngrams n \"\u8abf\u67fb\u5bfe\u8c61\u6587\u5b57\u5217\"\n\n\nGHCi\nPrelude Data.List> let ngram_list = ngrams 2 \"\u3053\u306e\u6587\u5b57\u5217\u306b\u63a2\u3057\u305f\u3044\u6587\u5b57\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\"\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> ngram_list\n[\"\\12371\\12398\",\"\\12398\\25991\",\"\\25991\\23383\",\"\\23383\\21015\",\"\\21015\\12395\",\"\\12395\\25506\",\"\\25506\\12375\",\"\\12375\\12383\",\"\\12383\\12356\",\"\\12356\\25991\",\"\\25991\\23383\",\"\\23383\\12364\",\"\\12364\\12354\",\"\\12354\\12427\",\"\\12427\\12363\",\"\\12363\\12393\",\"\\12393\\12358\",\"\\12358\\12363\",\"\\12363\\12290\"]\nPrelude Data.List>\n\n\nunlines::[a] -> a \u3092 \u9069\u7528\u3057\u3066\u3001[String] \u3092 String \u306b \u5909\u63db\u3059\u308b\n\nHome \u6280\u8853\u30e1\u30e2(\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a) \u306f\u3059\u3051\u308b\u3067\u904a\u3076  \u300cHaskell \u6587\u5b57\u5217\u300d\n\n\nlines :: String -> [String]\n\u6587\u5b57\u5217\u3092\u884c\u306e\u96c6\u307e\u308a(\u30ea\u30b9\u30c8)\u306b\u5206\u5272\u3057\u307e\u3059\u3002\u7d50\u679c\u306e\u5404\u6587\u5b57\u5217\u306b\u306f, \u6539\u884c\u6587\u5b57 '\\n' \u306f\u542b\u307e\u308c\u307e\u305b\u3093\u3002\n\u305f\u3060\u3057, \u5143\u306e\u6587\u5b57\u5217\u306e\u672b\u5c3e\u306e\u6539\u884c\u6587\u5b57\u306f\u5358\u306b\u9664\u53bb\u3055\u308c\u308b\u305f\u3081, \u5143\u306e\u6587\u5b57\u5217\u306b\u53b3\u5bc6\u306b\u5fa9\u5143\u3067\u304d\u308b\u3088\u3046\u306b\u306f\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\n\nGHCi\nPrelude Data.List> putStrLn (unlines ngram_list)\n\u3053\u306e\n\u306e\u6587\n\u6587\u5b57\n\u5b57\u5217\n\u5217\u306b\n\u306b\u63a2\n\u63a2\u3057\n\u3057\u305f\n\u305f\u3044\n\u3044\u6587\n\u6587\u5b57\n\u5b57\u304c\n\u304c\u3042\n\u3042\u308b\n\u308b\u304b\n\u304b\u3069\n\u3069\u3046\n\u3046\u304b\n\u304b\u3002\n\nPrelude Data.List> \n\n\n\n\n\uff08 \u4ee5\u4e0b \u306f \u5931\u6557 \uff09\u548c\u6587\u6587\u5b57\u304c\u51fa\u529b\u3055\u308c\u306a\u3044\n\n\nGHCi\nPrelude Data.List> print ngram_list\n[\"\\12371\\12398\",\"\\12398\\25991\",\"\\25991\\23383\",\"\\23383\\21015\",\"\\21015\\12395\",\"\\12395\\25506\",\"\\25506\\12375\",\"\\12375\\12383\",\"\\12383\\12356\",\"\\12356\\25991\",\"\\25991\\23383\",\"\\23383\\12364\",\"\\12364\\12354\",\"\\12354\\12427\",\"\\12427\\12363\",\"\\12363\\12393\",\"\\12393\\12358\",\"\\12358\\12363\",\"\\12363\\12290\"]\nPrelude Data.List> \nPrelude Data.List> map print ngram_list\n\n<interactive>:60:1:\n    No instance for (Show (IO ())) arising from a use of \u2018print\u2019\n    In a stmt of an interactive GHCi command: print it\nPrelude Data.List> \nPrelude Data.List> map putStrLn ngram_list\n\n<interactive>:62:1:\n    No instance for (Show (IO ())) arising from a use of \u2018print\u2019\n    In a stmt of an interactive GHCi command: print it\nPrelude Data.List> \n\n\n\n\n4. \u4e0a\u8a18\u6587\u5b57\u5217\u306e\u5404\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u63a2\u7d22\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3059\u308b\u6587\u5b57\u5217\u304c\u3042\u308b\u304bBoolean\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n4-1. elem\u95a2\u6570\n\nGHCi\nPrelude Data.List> elem \"\u6587\u5b57\" [\"\u3053\u306e\", \"\u6587\u5b57\", \"\u5217\"]\nTrue\nPrelude Data.List> \nPrelude Data.List> elem \"\u6587\u5b57\" [\"\u3053\u306e\", \"\u5217\"]\nFalse\nPrelude Data.List> \n\n\n\nGHCi\nPrelude Data.List> map (==\"\u6587\u5b57\") [\"\u3053\u306e\", \"\u6587\u5b57\", \"\u5217\"]\n[False,True,False]\nPrelude Data.List> \nPrelude Data.List> let search_word = \"\u6587\u5b57\"\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> map (==search_word) [\"\u3053\u306e\", \"\u6587\u5b57\", \"\u5217\"]\n[False,True,False]\nPrelude Data.List> \n\n\n\nboolean\u95a2\u6570 \u3092 map \u3092\u4f7f\u3063\u3066\u3001\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3054\u3068 \u306b \u9069\u7528\u3059\u308b\u65b9\u6cd5\n\nlet check_word = \"\u63a2\u7d22\u6587\u5b57\u5217\"\nmap (==check_word) ngram_list\n\n\nGHCi\nPrelude> map (==1) [1, 2]\n[True,False]\nPrelude> \n\n\n\nGHCi\nPrelude> let check_word = \"Tokyo\"\nPrelude| \nPrelude> \nPrelude> map (==check_word) [\"Nagoya\", \"Tokyo\", \"Osaka\"]\n[False,True,False]\nPrelude> \n\n\n\nGHCi\nPrelude> elem True [False,True,False]\nTrue\nPrelude> \n\n\n\nGHCi\nPrelude> elem True (map (==check_word) [\"Nagoya\", \"Tokyo\", \"Osaka\"])\nTrue\nPrelude> \n\n\n\nGHCi\nPrelude> let test_list = [\"Nagoya\", \"Tokyo\", \"Osaka\"] \nPrelude> \nPrelude> elem True (map (==check_word) test_list)\nTrue\nPrelude> \n\n\n\n\nGHCi\nPrelude> let show_elem :: [String] -> String\nPrelude|     show_elem [] = \"\"\nPrelude|     show_elem (x:xs) = x ++ (show_elem xs)\nPrelude|     otherwise = \"\"\nPrelude| \nPrelude>\n\n\n\nGHCi\nPrelude> show_elem [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\"abcde\"\nPrelude> \n\n\n'\u898b\u3064\u3051\u305f\u3044\u6587\u5b57\u5217' \u304c\u3001[[Char]] \u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u3001\n'\u898b\u3064\u3051\u305f\u3044\u6587\u5b57\u5217' 'elem' (ngrams n \"\u8abf\u3079\u308b\u5bfe\u8c61\u306e\u6587\u5b57\u5217\"\n\u3067\u63a2\u7d22\u3057\u3066\u3001\u8a72\u5f53\u3059\u308b\u8981\u7d20\u306e\u6709\u7121 \u3092\u3001TRUE | FALSE \u3067 \u8fd4\u3059\u3002\n\n\n\u3010 \u305d\u306e\u4ed6 \u306e grep\u95a2\u6570 \u5b9f\u88c5\u4f8b \u3011\n\n\n\u6b63\u898f\u8868\u73fe\u30e2\u30b8\u30e5\u30fc\u30eb \u3092 \u7528\u3044\u305f\u5b9f\u88c5 \u304c \u4e00\u822c\u7684 \u304b\u3002\n\n\nHatena::Diary \u307f\u305a\u3074\u30fc\u65e5\u8a18\uff082008/10/9)\u300cHaskell\u3067grep\u300d\nGitHub yujihamaguchi/gist:b1564b7ae345494069b7\nHatena Blog yunomu\u306e\u30d6\u30ed\u30b0\uff082012/03/10)\n\u300cParsec\u3092\u4f7f\u3063\u3066\u6b63\u898f\u8868\u73fe\u306e\u4ee3\u308f\u308a\u306b\u30d1\u30fc\u30b5\u3092\u4e0e\u3048\u308bgrep\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u308bHaskell\u300d\n\n##__\u5b9f\u88c5\u3059\u308b\u95a2\u6570 \u306e \u4ed5\u69d8__\n\n___\n\n* \u5b9a\u7fa9\u3057\u305fN-gram\u95a2\u6570 \u3092 \u63a2\u7d22\u6587\u5b57\u5217\uff08_String_\u578b\uff09 \u306e \u9577\u3055 N\uff08_Int_\u578b\uff09 \u306b \u9069\u7528 \u3057\u3066\u3001\u5f97\u3089\u308c\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\uff08_[String]_\u578b\uff09\u306b\u3001\u63a2\u7d22\u6587\u5b57\u5217\u3068\u5b8c\u5168\u4e00\u81f4\u3059\u308b\u8981\u7d20 \u304c \u3042\u308b\u304b \u3092 \u691c\u7d22\u3059\u308b\u3002\n\n* \u691c\u7d22\u7d50\u679c \u3092\u3001_Boolean_\u578b\u3067 \u8fd4\u3059\u3002\n\n___\n\n##__\u4f5c\u6210 \u3057\u305f grep\u95a2\u6570__\n\n* __\u95a2\u6570\u5b9a\u7fa9__\n\n```{haskell:GHCi}\nPrelude Data.List> let string_has_pattern_or_not pattern_string string_object = let n = length pattern_string\nPrelude Data.List|                                                                  ngram_partial_string_list = ngrams n string_object\nPrelude Data.List|                                                                  in exist_pattern_in_string pattern_string ngram_partial_string_list\nPrelude Data.List|                                                                      where ngrams :: Int -> [a] -> [[a]]\nPrelude Data.List|                                                                            ngrams n l = take (length l - (n - 1)) . map (take n) . tails $ l\nPrelude Data.List|                                                                            exist_pattern_in_string pattern object_string = elem True boolean_list\nPrelude Data.List|                                                                              where boolean_list = map (==pattern) object_string \nPrelude Data.List| \nPrelude Data.List> \n```\n\n* __\u95a2\u6570\u306e\u578b \u3092 \u78ba\u8a8d__\n\n```{haskell:GHCi}\nPrelude Data.List> :t string_has_pattern_or_not \nstring_has_pattern_or_not :: Eq a => [a] -> [a] -> Bool\nPrelude Data.List>\n```\n\n* __\u6319\u52d5\u78ba\u8a8d__\n\n__\uff08\u7d50\u679c\uff09\u554f\u984c\u306a\u3057__\n\n\n```{haskell:GHCi}\nPrelude Data.List> string_has_pattern_or_not \"\u6587\u5b57\" \"\u3053\u306e\u6587\u5b57\u5217\"\nTrue\nPrelude Data.List>\n```\n\n```{haskell:GHCi}\nPrelude Data.List> string_has_pattern_or_not \"\u6587\u5b57\" \"\u3053\u306e\u5217\"\nFalse\nPrelude Data.List> \n```\n\n\uff08 \u5b9f\u884c\u753b\u9762 \uff09\n\n<img width=\"1012\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-27 23.52.10.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/79da13e1-4467-1459-3967-97056dec16ee.png\">\n\n___\n\n\n##__\uff08 \u53c2\u8003 \uff09\u4f5c\u6210\u904e\u7a0b\u306e\u30e1\u30e2__\n\n####__\uff11. \u63a2\u7d22\u6587\u5b57\u5217 \u306e \u9577\u3055 \u53d6\u5f97\uff08\u5909\u6570\u675f\u7e1b\uff09__\nString \u306f [Char] \u306a\u306e\u3067\u3001String \u306e \u9577\u3055\uff08\u8981\u7d20\u6570\uff09\u3092 \u5909\u6570 n \u306b\u675f\u7e1b\u3059\u308b\u3002\n\n> let n = length \"\u63a2\u7d22\u6587\u5b57\u5217\"\n\n```{haskell:GHCi}\nPrelude> \nPrelude> let n = length \"\u63a2\u7d22\u6587\u5b57\u5217\"\nPrelude> n\n5\nPrelude> \nPrelude> putStrLn \"\u65e5\u672c\u8a9e\"\n\u65e5\u672c\u8a9e\nPrelude> \nPrelude> print \"\u65e5\u672c\u8a9e\"\n\"\\26085\\26412\\35486\"\nPrelude> \n```\n\n___\n\n__\uff08 \u53c2\u8003 \uff09Haskell \u3067 UTF-8 \u65e5\u672c\u8a9e\u6587\u5b57\u5217 \u51fa\u529b__\n\n* [Hatena Blog foobardam\u306e\u30d7\u30ed\u30b0 (2012/10.22) \u300cHaskell\u3068UTF\uff18\u3067\u306e\u65e5\u672c\u8a9e\u6587\u5b57\u5217\u306e\u53d6\u6271\u3044\u300d](http://foobardam.hatenablog.com/entry/2012/10/22/125452)\n\n___\n\n####__2. N-gram \u95a2\u6570 \u3092 \u5b9a\u7fa9__\n\nN-gram\u3057\u3066\u3001String -> [String] \u3092 \u8fd4\u3059 N-gram\u95a2\u6570 \u3092 \u5b9a\u7fa9\u3059\u308b\n\n* [Hatena Blog \u3080\u3063\u3053\u306e\u30d6\u30ed\u30b0 \uff082016/10/15\uff09 \u300cHaskell\u3067N-gram\u300d](http://mukko.hateblo.jp/entry/2016/10/15/133844)\n* [StackExchange, _Function to get NGrams fast in Haskell_](http://codereview.stackexchange.com/questions/70023/function-to-get-ngrams-fast-in-haskell)\n\n___\n\n* String \u306f\u3001[Char]\u578b\n\n\u306a\u306e\u3067\u3001\n\n* [String] \u306f\u3001[[Char]]\u578b\n\n\u3067 \u3042\u308b\u3002\n\n___\n\n>```{haskell:}\n> ngrams :: Int -> [a] -> [[a]]\n> ngrams n l = take (length l - (n - 1)) . map (take n) . tails $ l\n>```\n\ntails\u95a2\u6570\u306f\u3001List.tails\nimport Data.List \u304c \u5fc5\u8981\n\n* [Hatena::Group::Haskell \u7d50\u57ce\u6d69\u306eHaskell\u65e5\u8a18 \uff082006/6/1\uff09 \u300ctails\u95a2\u6570\u300d](http://haskell.g.hatena.ne.jp/hyuki/20060601/tails)\n* [Hatena::Diary kurotora\uff082014/07_29\uff09\u300cHaskell\u672c\u3092\u8aad\u3093\u30606\u300d](http://d.hatena.ne.jp/tora691/20140729/1405906716)\n\n\n```{haskell:GHCi}\nPrelude> \nPrelude> let ngrams :: Int -> [a] -> [[a]]\nPrelude|     ngrams n l = take (length l - (n - 1)) . map (take n) . tails $ l\nPrelude| \n\n<interactive>:81:61:\n    Not in scope: \u2018tails\u2019\n    Perhaps you meant \u2018tail\u2019 (imported from Prelude)\nPrelude>\n```\n\n\n```{haskell:GHCi}\nPrelude> import List.tails\n\n<interactive>:1:8: parse error on input \u2018List.tails\u2019\nPrelude> \n```\n\n\n```{haskell:GHCi}\nPrelude> \nPrelude> import Data.List\nPrelude Data.List> let ngrams :: Int -> [a] -> [[a]]\nPrelude Data.List|     ngrams n l = take (length l - (n - 1)) . map (take n) . tails $ l\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> :t ngrams\nngrams :: Int -> [a] -> [[a]]\nPrelude Data.List> \n```\n\n\n```{haskell:GHCi}\nPrelude Data.List> ngrams 2 \"Hello\"\n[\"He\",\"el\",\"ll\",\"lo\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 3 \"Hello\"\n[\"Hel\",\"ell\",\"llo\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 4 \"Hello\"\n[\"Hell\",\"ello\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 5 \"Hello\"\n[\"Hello\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 1 \"Hello\"\n[\"H\",\"e\",\"l\",\"l\",\"o\"]\nPrelude Data.List> \nPrelude Data.List> ngrams 6 \"Hello\"\n[]\nPrelude Data.List> \nPrelude Data.List> ngrams 0 \"Hello\"\n[\"\",\"\",\"\",\"\",\"\",\"\"]\nPrelude Data.List> \nPrelude Data.List> ngrams -1 \"Hello\"\n\n<interactive>:109:1:\n    Non type-variable argument\n      in the constraint: Num (Int -> [a] -> [[a]])\n    (Use FlexibleContexts to permit this)\n    When checking that \u2018it\u2019 has the inferred type\n      it :: forall a.\n            (Num (Int -> [a] -> [[a]]), Num ([Char] -> Int -> [a] -> [[a]])) =>\n            Int -> [a] -> [[a]]\nPrelude Data.List> \n```\n\n\n####__3. \u5bfe\u8c61\u6587\u5b57\u5217\u3092\u3001\u63a2\u7d22\u6587\u5b57\u5217\u306e\u6587\u5b57\u6570\u305a\u3064\u3001\uff11\u6587\u5b57\u305a\u3089\u3057\u306a\u304c\u3089\u5207\u308a\u51fa\u3059__\n\n*  \u95a2\u6570 ngrams \u3092\u4f7f\u3046\u3068\u304d\u306b\u3001N\u306e\u6570\u3092\u3001\u4e0a\u8a18\u306en\u306b\u3059\u308b\u3002\n\n> let ngram_list = ngrams n \"\u8abf\u67fb\u5bfe\u8c61\u6587\u5b57\u5217\"\n\n```{haskell:GHCi}\nPrelude Data.List> let ngram_list = ngrams 2 \"\u3053\u306e\u6587\u5b57\u5217\u306b\u63a2\u3057\u305f\u3044\u6587\u5b57\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\"\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> ngram_list\n[\"\\12371\\12398\",\"\\12398\\25991\",\"\\25991\\23383\",\"\\23383\\21015\",\"\\21015\\12395\",\"\\12395\\25506\",\"\\25506\\12375\",\"\\12375\\12383\",\"\\12383\\12356\",\"\\12356\\25991\",\"\\25991\\23383\",\"\\23383\\12364\",\"\\12364\\12354\",\"\\12354\\12427\",\"\\12427\\12363\",\"\\12363\\12393\",\"\\12393\\12358\",\"\\12358\\12363\",\"\\12363\\12290\"]\nPrelude Data.List>\n```\n\n__unlines::[a] -> a \u3092 \u9069\u7528\u3057\u3066\u3001[String] \u3092 String \u306b \u5909\u63db\u3059\u308b__\n\n* [Home \u6280\u8853\u30e1\u30e2(\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a) \u306f\u3059\u3051\u308b\u3067\u904a\u3076  \u300cHaskell \u6587\u5b57\u5217\u300d](http://www.nslabs.jp/haskell-string.rhtml)\n\n> lines :: String -> [String]\n>\n> \u6587\u5b57\u5217\u3092\u884c\u306e\u96c6\u307e\u308a(\u30ea\u30b9\u30c8)\u306b\u5206\u5272\u3057\u307e\u3059\u3002\u7d50\u679c\u306e\u5404\u6587\u5b57\u5217\u306b\u306f, \u6539\u884c\u6587\u5b57 '\\n' \u306f\u542b\u307e\u308c\u307e\u305b\u3093\u3002\n> \u305f\u3060\u3057, \u5143\u306e\u6587\u5b57\u5217\u306e\u672b\u5c3e\u306e\u6539\u884c\u6587\u5b57\u306f\u5358\u306b\u9664\u53bb\u3055\u308c\u308b\u305f\u3081, \u5143\u306e\u6587\u5b57\u5217\u306b\u53b3\u5bc6\u306b\u5fa9\u5143\u3067\u304d\u308b\u3088\u3046\u306b\u306f\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\n\n```{haskell:GHCi}\nPrelude Data.List> putStrLn (unlines ngram_list)\n\u3053\u306e\n\u306e\u6587\n\u6587\u5b57\n\u5b57\u5217\n\u5217\u306b\n\u306b\u63a2\n\u63a2\u3057\n\u3057\u305f\n\u305f\u3044\n\u3044\u6587\n\u6587\u5b57\n\u5b57\u304c\n\u304c\u3042\n\u3042\u308b\n\u308b\u304b\n\u304b\u3069\n\u3069\u3046\n\u3046\u304b\n\u304b\u3002\n\nPrelude Data.List> \n```\n\n___\n\n####__\uff08 \u4ee5\u4e0b \u306f \u5931\u6557 \uff09\u548c\u6587\u6587\u5b57\u304c\u51fa\u529b\u3055\u308c\u306a\u3044__\n\n```{haskell:GHCi}\nPrelude Data.List> print ngram_list\n[\"\\12371\\12398\",\"\\12398\\25991\",\"\\25991\\23383\",\"\\23383\\21015\",\"\\21015\\12395\",\"\\12395\\25506\",\"\\25506\\12375\",\"\\12375\\12383\",\"\\12383\\12356\",\"\\12356\\25991\",\"\\25991\\23383\",\"\\23383\\12364\",\"\\12364\\12354\",\"\\12354\\12427\",\"\\12427\\12363\",\"\\12363\\12393\",\"\\12393\\12358\",\"\\12358\\12363\",\"\\12363\\12290\"]\nPrelude Data.List> \nPrelude Data.List> map print ngram_list\n\n<interactive>:60:1:\n    No instance for (Show (IO ())) arising from a use of \u2018print\u2019\n    In a stmt of an interactive GHCi command: print it\nPrelude Data.List> \nPrelude Data.List> map putStrLn ngram_list\n\n<interactive>:62:1:\n    No instance for (Show (IO ())) arising from a use of \u2018print\u2019\n    In a stmt of an interactive GHCi command: print it\nPrelude Data.List> \n```\n\n___\n\n####__4. \u4e0a\u8a18\u6587\u5b57\u5217\u306e\u5404\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u63a2\u7d22\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3059\u308b\u6587\u5b57\u5217\u304c\u3042\u308b\u304bBoolean\u30c1\u30a7\u30c3\u30af\u3059\u308b__\n\n\n__4-1. elem\u95a2\u6570__\n\n```{haskell:GHCi}\nPrelude Data.List> elem \"\u6587\u5b57\" [\"\u3053\u306e\", \"\u6587\u5b57\", \"\u5217\"]\nTrue\nPrelude Data.List> \nPrelude Data.List> elem \"\u6587\u5b57\" [\"\u3053\u306e\", \"\u5217\"]\nFalse\nPrelude Data.List> \n```\n\n```{haskell:GHCi}\nPrelude Data.List> map (==\"\u6587\u5b57\") [\"\u3053\u306e\", \"\u6587\u5b57\", \"\u5217\"]\n[False,True,False]\nPrelude Data.List> \nPrelude Data.List> let search_word = \"\u6587\u5b57\"\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> map (==search_word) [\"\u3053\u306e\", \"\u6587\u5b57\", \"\u5217\"]\n[False,True,False]\nPrelude Data.List> \n```\n\n___\n\n__boolean\u95a2\u6570 \u3092 map \u3092\u4f7f\u3063\u3066\u3001\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3054\u3068 \u306b \u9069\u7528\u3059\u308b\u65b9\u6cd5__\n\n>let check_word = \"\u63a2\u7d22\u6587\u5b57\u5217\"\n>map (==check_word) ngram_list\n\n\n```{haskell:GHCi}\nPrelude> map (==1) [1, 2]\n[True,False]\nPrelude> \n```\n\n```{haskell:GHCi}\nPrelude> let check_word = \"Tokyo\"\nPrelude| \nPrelude> \nPrelude> map (==check_word) [\"Nagoya\", \"Tokyo\", \"Osaka\"]\n[False,True,False]\nPrelude> \n```\n\n\n```{haskell:GHCi}\nPrelude> elem True [False,True,False]\nTrue\nPrelude> \n```\n\n\n```{haskell:GHCi}\nPrelude> elem True (map (==check_word) [\"Nagoya\", \"Tokyo\", \"Osaka\"])\nTrue\nPrelude> \n```\n\n\n```{haskell:GHCi}\nPrelude> let test_list = [\"Nagoya\", \"Tokyo\", \"Osaka\"] \nPrelude> \nPrelude> elem True (map (==check_word) test_list)\nTrue\nPrelude> \n```\n\n\n___\n\n\n```{haskell:GHCi}\nPrelude> let show_elem :: [String] -> String\nPrelude|     show_elem [] = \"\"\nPrelude|     show_elem (x:xs) = x ++ (show_elem xs)\nPrelude|     otherwise = \"\"\nPrelude| \nPrelude>\n```\n\n```{haskell:GHCi} \nPrelude> show_elem [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\"abcde\"\nPrelude> \n```\n\n\n\n'\u898b\u3064\u3051\u305f\u3044\u6587\u5b57\u5217' \u304c\u3001[[Char]] \u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u3001\n'\u898b\u3064\u3051\u305f\u3044\u6587\u5b57\u5217' 'elem' (ngrams n \"\u8abf\u3079\u308b\u5bfe\u8c61\u306e\u6587\u5b57\u5217\"\n\n\u3067\u63a2\u7d22\u3057\u3066\u3001\u8a72\u5f53\u3059\u308b\u8981\u7d20\u306e\u6709\u7121 \u3092\u3001TRUE | FALSE \u3067 \u8fd4\u3059\u3002\n\n___\n\n##__\u3010 \u305d\u306e\u4ed6 \u306e grep\u95a2\u6570 \u5b9f\u88c5\u4f8b \u3011__\n\n####__\u6b63\u898f\u8868\u73fe\u30e2\u30b8\u30e5\u30fc\u30eb \u3092 \u7528\u3044\u305f\u5b9f\u88c5 \u304c \u4e00\u822c\u7684 \u304b\u3002__\n\n* [Hatena::Diary \u307f\u305a\u3074\u30fc\u65e5\u8a18\uff082008/10/9)\u300cHaskell\u3067grep\u300d](http://d.hatena.ne.jp/mzp/20081009/grep)\n* [GitHub yujihamaguchi/gist:b1564b7ae345494069b7](https://gist.github.com/yujihamaguchi/b1564b7ae345494069b7)\n* [Hatena Blog yunomu\u306e\u30d6\u30ed\u30b0\uff082012/03/10)\n\u300cParsec\u3092\u4f7f\u3063\u3066\u6b63\u898f\u8868\u73fe\u306e\u4ee3\u308f\u308a\u306b\u30d1\u30fc\u30b5\u3092\u4e0e\u3048\u308bgrep\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u308bHaskell\u300d](http://yunomu.hatenablog.jp/entry/2012/03/10/183434)\n", "tags": ["Haskell", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "NLP", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "\u95a2\u6570\u578b\u8a00\u8a9e"]}