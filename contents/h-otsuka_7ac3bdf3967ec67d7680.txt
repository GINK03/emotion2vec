{"context": "\n\n\u6982\u8981\nOpenStack \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\u3068\u3057\u3066\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b Swift \u3068 Ceph \u306b\u3064\u3044\u3066\nSSL \u3092\u4f7f\u7528\u3057\u305f S3 API \u901a\u4fe1\u3092\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u65b9\u6cd5\u3092\nMiranis OpenStack 9.0\uff08\u4ee5\u4e0b\u3001MOS9.0\uff09\u3092\u30d9\u30fc\u30b9\u306b\u8aac\u660e\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nradosgw \u306f keystone \u9023\u643a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30b7\u30b9\u30c6\u30e0\u69cb\u6210\n\u4eca\u56de\u306f\u3001OpenStack \u74b0\u5883\u3092Swift\u30b9\u30c8\u30ec\u30fc\u30b8\u7528\uff08env-swift\uff09\u3068Ceph\u30b9\u30c8\u30ec\u30fc\u30b8\u7528\uff08env-ceph\uff09\u306e\uff12\u30d1\u30bf\u30fc\u30f3\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nSwift API \u5185\u90e8\u69cb\u6210\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c haproxy \u306e VIP \u306b\u5bfe\u3057\u3066 API \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\nhaproxy \u306e\u5b9a\u7fa9\u306b\u5f93\u3044\u3001swift proxy \u3078\u632f\u308a\u5206\u3051\nSwift Proxy \u304c Keystone \u9023\u643a\u306b\u3088\u308a\u8a8d\u8a3c\u3092\u884c\u3046\n\u8a8d\u8a3c\u306b\u554f\u984c\u306a\u3044\u5834\u5408\u3001Swfit Object Cluster \u3078\u30a2\u30af\u30bb\u30b9\n\n\nCeph API \u5185\u90e8\u69cb\u6210\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c haproxy \u306e VIP \u306b\u5bfe\u3057\u3066 API \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\nhaproxy \u306e\u5b9a\u7fa9\u306b\u5f93\u3044\u3001Apache \u3078\u632f\u308a\u5206\u3051\napache \u306e\u5b9a\u7fa9\u306b\u5f93\u3044\u3001radosgw \u3078\u30d5\u30a9\u30ef\u30fc\u30c9\nradosgw \u304c Keystone \u9023\u643a\u306b\u3088\u308a\u8a8d\u8a3c\u3092\u884c\u3046\n\u8a8d\u8a3c\u306b\u554f\u984c\u306a\u3044\u5834\u5408\u3001RADOS \u3078 NATIVE \u901a\u4fe1\u3067\u30a2\u30af\u30bb\u30b9\n\n\n\u8a2d\u5b9a\u624b\u9806\n\nSwift\n\nS3 \u4e92\u63db API\n\n\u30a2\u30af\u30bb\u30b9\u30e6\u30fc\u30b6\u767b\u9332\nkeystone \u306b S3 API \u30a2\u30af\u30bb\u30b9\u3067\u4f7f\u7528\u3059\u308b EC2 \u8a8d\u8a3c\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n# openstack ec2 credentials create --project admin --user admin\n+------------+----------------------------------+\n| Field      | Value                            |\n+------------+----------------------------------+\n| access     | <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000|\n| project_id | 3e56084d91a24e09af421a51db75ad49 |\n| secret     | <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000|\n| trust_id   | None                             |\n| user_id    | 9a13c4bcf29243a5aaefe9deca7ebaf6 |\n+------------+----------------------------------+\n\n\nApache Proxy \u63a5\u7d9a\u8a31\u53ef\n@@ -35,7 +35,7 @@\n   RequestReadTimeout header=0,MinRate=500 body=0,MinRate=500\n   <Proxy *>\n     Order Deny,Allow\n-        Allow from 10.20.0.2\n+        Allow from all\n         Deny from all\n   </Proxy>\n\nroot@swift-controller01:/etc# /etc/init.d/apache2 restart\n\n\nSSL \u5bfe\u5fdc\n\nhaproxy \u8a2d\u5b9a\nOS \u306e 'haproxy' \u30e6\u30fc\u30b6\u3092 'ssl-cert' \u30b0\u30eb\u30fc\u30d7\u306b\u6240\u5c5e\u3055\u305b\u307e\u3059\u3002\n# adduser haproxy ssl-cert\n\n# id haproxy\nuid=109(haproxy) gid=116(haproxy) groups=116(haproxy),110(ssl-cert)\n\n\nSSL \u8a3c\u660e\u66f8\u767b\u9332\n\u6b21\u306b SSL \u8a3c\u660e\u66f8\u3092\u30b5\u30fc\u30d0\u4e0a\u306e '/etc/ssl/private/haproxy/' \u914d\u4e0b\u306b\u914d\u7f6e\u3057\u3001\u6a29\u9650\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bSSL \u8a3c\u660e\u66f8\u3001\u30c1\u30a7\u30fc\u30f3\u8a3c\u660e\u66f8\u3001\u79d8\u5bc6\u9375\u3092\uff11\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u305f\u5f8c\u3001\n'\u30d5\u30a1\u30a4\u30eb\u540d\u3092 haproxy.pem'\u306b\u5909\u66f4\u3057\u3001'/etc/ssl/private/haproxy/' \u914d\u4e0b\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002\n-----BEGIN CERTIFICATE-----\n<SSL \u8a3c\u660e\u66f8>\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n<\u30c1\u30a7\u30fc\u30f3\u8a3c\u660e\u66f8>\n-----END CERTIFICATE-----\n-----BEGIN PRIVATE KEY-----\n<\u79d8\u5bc6\u9375>\n-----END PRIVATE KEY-----\n\n# chown -R root:haproxy /etc/ssl/private/\n# chmod g+x /etc/ssl/private/\n\n# ls -la /etc/ssl/private/\n-rw-r----- 1 root haproxy 1679 Sep 13 05:08 /etc/ssl/private/haproxy.key\n-rw-r----- 1 root haproxy 5168 Sep 13 05:08 /etc/ssl/private/haproxy.pem\n\nSSL \u306e\u30dd\u30fc\u30c8\u756a\u53f7\u306f '443' \u306b\u8a2d\u5b9a\u3057\u3001SSL \u8a3c\u660e\u66f8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u4eca\u56de\u3001http \u901a\u4fe1\u306f\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u308b\u72b6\u614b\u3067\u6b8b\u3057\u3001\n\u307e\u305f\u3001haproxy \u3068 radosgw \u9593\u306e\u901a\u4fe1\u306f\u3001http \u3068\u306a\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n/etc/haproxy/conf.d/130-object-storage.cfg\n@@ -2,7 +2,9 @@\n listen object-storage\n   bind 10.16.11.2:8080\n   bind 192.168.75.3:8080\n+  bind *:443 ssl crt /etc/ssl/private/haproxy.pem no-sslv3\n   http-request  set-header X-Forwarded-Proto https if { ssl_fc }\n+  mode http\n   option  httpchk HEAD /healthcheck HTTP/1.0\n   option  httplog\n   option  httpclose\n\n\n\u6700\u5f8c\u306b\u8a2d\u5b9a\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u518d\u8d77\u52d5\u3057\u307e\u3059\u3002\n# crm resource restart clone_p_haproxy\n# service haproxy restart\n\n\nCeph\n\nS3 \u4e92\u63db API\uff08keystone \u9023\u643a\uff09\n\nkeystone \u9023\u643a\n\u4eca\u56de\u306f\u3001radosgw \u3068 keystone \u3092\u9023\u643a\u3055\u305b\u308b\u305f\u3081\u3001\n\u307e\u305a\u3001ceph.conf \u3092\u958b\u304d\u3001rgw_keystone_* \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n/etc/ceph/ceph.conf\n[client.radosgw.gateway]\nrgw_keystone_accepted_roles = _member_, Member, admin, swiftoperator\nkeyring = /etc/ceph/keyring.radosgw.gateway\nrgw_frontends = fastcgi socket_port=9000 socket_host=127.0.0.1\nrgw_socket_path = /tmp/radosgw.sock\nrgw_keystone_revocation_interval = 1000000\nrgw_keystone_url = http://<keystone haproxy vip>:35357\nrgw_keystone_admin_token = <keystone \u7ba1\u7406\u8005\u30c8\u30fc\u30af\u30f3>\nhost = ceph-controller01\nrgw_dns_name = *.domain.tld\nrgw_print_continue = True\nrgw_keystone_token_cache_size = 10\nrgw_data = /var/lib/ceph/radosgw\nuser = www-data\n\n\nrgw_s3_auth_use_keystone \u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n\n/etc/ceph/ceph.conf\n@@ -27,6 +27,7 @@\n rbd_cache = True\n\n [client.radosgw.gateway]\n+rgw_s3_auth_use_keystone = true\n rgw_keystone_accepted_roles = _member_, Member, admin, swiftoperator\n keyring = /etc/ceph/keyring.radosgw.gateway\n rgw_frontends = fastcgi socket_port=9000 socket_host=127.0.0.1\n\n\n\u8a2d\u5b9a\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u3001radosgw \u3092\u4e00\u5ea6\u518d\u8d77\u52d5\u3057\u3066 keystone \u9023\u643a\u306f\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n# /etc/init.d/radosgw restart\n\n\n\u30a2\u30af\u30bb\u30b9\u30e6\u30fc\u30b6\u767b\u9332\n\u7d9a\u3051\u3066\u3001keystone \u306b S3 API \u30a2\u30af\u30bb\u30b9\u3067\u4f7f\u7528\u3059\u308b EC2 \u8a8d\u8a3c\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n# openstack ec2 credentials create --project admin --user admin\n+------------+----------------------------------+\n| Field      | Value                            |\n+------------+----------------------------------+\n| access     | <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000|\n| project_id | 7a964fe86daa4148a7d4c34b42746233 |\n| secret     | <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000|\n| trust_id   | None                             |\n| user_id    | 7c2b6158cfe7468b9a47a538f55c56f8 |\n+------------+----------------------------------+\n\n\nSSL \u5bfe\u5fdc\n\nhaproxy \u8a2d\u5b9a\nOS \u306e 'haproxy' \u30e6\u30fc\u30b6\u3092 'ssl-cert' \u30b0\u30eb\u30fc\u30d7\u306b\u6240\u5c5e\u3055\u305b\u307e\u3059\u3002\n# adduser haproxy ssl-cert\n\n# id haproxy\nuid=109(haproxy) gid=116(haproxy) groups=116(haproxy),110(ssl-cert)\n\n\nSSL \u8a3c\u660e\u66f8\u767b\u9332\n\u6b21\u306b SSL \u8a3c\u660e\u66f8\u3092\u30b5\u30fc\u30d0\u4e0a\u306e '/etc/ssl/private/haproxy/' \u914d\u4e0b\u306b\u914d\u7f6e\u3057\u3001\u6a29\u9650\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n# chmod 640 /etc/ssl/private/haproxy*\n# chown root:ssl-cert /etc/ssl/private/haproxy*\n\n# ls -la /etc/ssl/private/haproxy*\n-rw-r----- 1 root haproxy 1679 Sep 13 02:17 /etc/ssl/private/haproxy.key\n-rw-r----- 1 root haproxy 5168 Sep 13 00:58 /etc/ssl/private/haproxy.pem\n\nSSL \u306e\u30dd\u30fc\u30c8\u756a\u53f7\u306f '443' \u306b\u8a2d\u5b9a\u3057\u3001SSL \u8a3c\u660e\u66f8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u4eca\u56de\u3001http \u901a\u4fe1\u306f\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u308b\u72b6\u614b\u3067\u6b8b\u3057\u3001\n\u307e\u305f\u3001haproxy \u3068 radosgw \u9593\u306e\u901a\u4fe1\u306f\u3001http \u3068\u306a\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n/etc/haproxy/conf.d/130-object-storage.cfg\n@@ -1,8 +1,10 @@\n\n listen object-storage\n   bind 172.16.101.2:8080\n   bind 192.168.76.3:8080\n+  bind *:443 ssl crt /etc/ssl/private/haproxy.pem no-sslv3\n   http-request  set-header X-Forwarded-Proto https if { ssl_fc }\n+  mode http\n   option  httplog\n   option  httpchk HEAD /\n   option  http-server-close\n\n\n\u6700\u5f8c\u306b\u8a2d\u5b9a\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u518d\u8d77\u52d5\u3057\u307e\u3059\u3002\n# crm resource restart clone_p_haproxy\n\n\n\u78ba\u8a8d\u624b\u9806\n\u4eca\u56de\u306f\u3001Python boto \u3092\u4f7f\u7528\u3057\u305f S3 API \u78ba\u8a8d\u7528\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3001\n\u30d0\u30b1\u30c3\u30c8\u306e\u53d6\u5f97\u30fb\u4f5c\u6210\u30fb\u524a\u9664\u306b\u3064\u3044\u3066\u3001\u78ba\u8a8d\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nCeph S3 \u4e92\u63db API (HTTP)\nubuntu@work:~$ ./s3test_ceph.py\n=============================================================\nS3 API TEST\n    Host:       192.168.76.3\n    Port:       8080\n    Secure:     False\n    Bucket:     hoge\n=============================================================\n* Deleting Bucket..\n* Bucket was deleted.\n* Bucket was created.\n-------------------------------------------------------------\nhoge    2016-09-13T05:43:07.000Z\n=============================================================\n\n\n\nCeph S3 \u4e92\u63db API (HTTPS)\nubuntu@work:~$ ./s3test_ceph2.py\n=============================================================\nS3 API TEST\n    Host:       192.168.76.3\n    Port:       443\n    Secure:     True\n    Bucket:     hoge\n=============================================================\n* Deleting Bucket..\n* Bucket was deleted.\n* Bucket was created.\n-------------------------------------------------------------\nhoge    2016-09-13T05:43:13.000Z\n=============================================================\n\n\n\nSwift S3 \u4e92\u63db API (HTTP)\n$ ./s3test_swift.py\n=============================================================\nS3 API TEST\n    Host:       192.168.75.3\n    Port:       8080\n    Secure:     False\n    Bucket:     hoge\n=============================================================\n* Deleting Bucket..\n* Bucket was deleted.\n* Bucket was created.\n-------------------------------------------------------------\nhoge    2009-02-03T16:45:09.000Z\n=============================================================\n\n\n\nSwift S3 \u4e92\u63db API (HTTPS)\n$ ./s3test_swift2.py\n=============================================================\nS3 API TEST\n    Host:       192.168.75.3\n    Port:       443\n    Secure:     True\n    Bucket:     hoge\n=============================================================\n* Deleting Bucket..\n* Bucket was deleted.\n* Bucket was created.\n-------------------------------------------------------------\nhoge    2009-02-03T16:45:09.000Z\n=============================================================\n\n\n\n\n\u3010\u53c2\u8003\u3011\u78ba\u8a8d\u7528\u30b9\u30af\u30ea\u30d7\u30c8\n\u4ee5\u4e0b\u306b\u78ba\u8a8d\u7528\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u63b2\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\nCeph S3 \u4e92\u63db API (HTTP)\n\ns3test_ceph.py\n#!/usr/bin/python\nimport sys\nimport boto\nimport boto.s3.connection\n\nACCESS_KEY = <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\nSECRET_KEY = <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\n\nHOST = '192.168.76.3'\nPORT = 8080\nIS_SECURE = False\n\n#connect to rados gateway\nconn = boto.connect_s3(\n    aws_access_key_id = ACCESS_KEY,\n    aws_secret_access_key = SECRET_KEY,\n    port = PORT,\n    host = HOST,\n    is_secure=IS_SECURE, # uncommmnt if you are not using ssl\n    calling_format = boto.s3.connection.OrdinaryCallingFormat(),\n)\n\nargv = sys.argv\n\nif (len(argv) == 2):\n    bucket_name = argv[1]\nelse:\n    bucket_name = 'hoge'\n\nprint \"=============================================================\"\nprint \"S3 API TEST\"\nprint \"    Host:\\t{host}\".format(host = HOST,)\nprint \"    Port:\\t{port}\".format(port = PORT,)\nprint \"    Secure:\\t{secure}\".format(secure = IS_SECURE,)\nprint \"    Bucket:\\t{name}\".format(name = bucket_name,)\nprint \"=============================================================\"\n\n#delete bucket\nfor bucket in conn.get_all_buckets():\n    if bucket.name == bucket_name:\n        try:\n            print \"* Deleting Bucket..\".format(\n                name = bucket.name,\n            )\n            conn.delete_bucket(bucket_name)\n            print \"* Bucket was deleted.\"\n        except:\n            print \"* Bucket Contains Keys.\"\n\n            full_bucket = conn.get_bucket(n)\n            print \"* Deleting keys...\"\n            for key in full_bucket.list():\n                key.delete()\n            print \"* Keys deleted. Deleting Bucket..\"\n            conn.delete_bucket(n)\n            print \"* Bucket was deleted.\"\n\n#create bucket\nconn.create_bucket(bucket_name)\nprint \"* Bucket was created.\".format(\n    name = bucket_name,\n)\n\nprint \"-------------------------------------------------------------\"\n\n#get bucket list\nfor bucket in conn.get_all_buckets():\n    print \"{name}\\t{created}\".format(\n        name = bucket.name,\n        created = bucket.creation_date,\n    )\n\nprint \"=============================================================\"\n\n\n\n\nCeph S3 \u4e92\u63db API (HTTPS)\n\ns3test_ceph2.py\n#!/usr/bin/python\nimport sys\nimport boto\nimport boto.s3.connection\n\nACCESS_KEY = <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\nSECRET_KEY = <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\n\nHOST = '192.168.76.3'\nPORT = 443\nIS_SECURE = True\n\n#connect to rados gateway\nconn = boto.connect_s3(\n    aws_access_key_id = ACCESS_KEY,\n    aws_secret_access_key = SECRET_KEY,\n    port = PORT,\n    host = HOST,\n    is_secure=IS_SECURE, # uncommmnt if you are not using ssl\n    calling_format = boto.s3.connection.OrdinaryCallingFormat(),\n)\n\nargv = sys.argv\n\nif (len(argv) == 2):\n    bucket_name = argv[1]\nelse:\n    bucket_name = 'hoge'\n\nprint \"=============================================================\"\nprint \"S3 API TEST\"\nprint \"    Host:\\t{host}\".format(host = HOST,)\nprint \"    Port:\\t{port}\".format(port = PORT,)\nprint \"    Secure:\\t{secure}\".format(secure = IS_SECURE,)\nprint \"    Bucket:\\t{name}\".format(name = bucket_name,)\nprint \"=============================================================\"\n\n#delete bucket\nfor bucket in conn.get_all_buckets():\n    if bucket.name == bucket_name:\n        try:\n            print \"* Deleting Bucket..\".format(\n                name = bucket.name,\n            )\n            conn.delete_bucket(bucket_name)\n            print \"* Bucket was deleted.\"\n        except:\n            print \"* Bucket Contains Keys.\"\n\n            full_bucket = conn.get_bucket(n)\n            print \"* Deleting keys...\"\n            for key in full_bucket.list():\n                key.delete()\n            print \"* Keys deleted. Deleting Bucket..\"\n            conn.delete_bucket(n)\n            print \"* Bucket was deleted.\"\n\n#create bucket\nconn.create_bucket(bucket_name)\nprint \"* Bucket was created.\".format(\n    name = bucket_name,\n)\n\nprint \"-------------------------------------------------------------\"\n\n#get bucket list\nfor bucket in conn.get_all_buckets():\n    print \"{name}\\t{created}\".format(\n        name = bucket.name,\n        created = bucket.creation_date,\n    )\n\nprint \"=============================================================\"\n\n\n\n\nSwift S3 \u4e92\u63db API (HTTP)\n\ns3test_swift.py\n#!/usr/bin/python\nimport sys\nimport boto\nimport boto.s3.connection\n\nACCESS_KEY = <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\nSECRET_KEY = <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\n\nHOST = '192.168.75.3'\nPORT = 8080\nIS_SECURE = False\n\n#connect to rados gateway\nconn = boto.connect_s3(\n    aws_access_key_id = ACCESS_KEY,\n    aws_secret_access_key = SECRET_KEY,\n    port = PORT,\n    host = HOST,\n    is_secure=IS_SECURE, # uncommmnt if you are not using ssl\n    calling_format = boto.s3.connection.OrdinaryCallingFormat(),\n)\n\nargv = sys.argv\n\nif (len(argv) == 2):\n    bucket_name = argv[1]\nelse:\n    bucket_name = 'hoge'\n\nprint \"=============================================================\"\nprint \"S3 API TEST\"\nprint \"    Host:\\t{host}\".format(host = HOST,)\nprint \"    Port:\\t{port}\".format(port = PORT,)\nprint \"    Secure:\\t{secure}\".format(secure = IS_SECURE,)\nprint \"    Bucket:\\t{name}\".format(name = bucket_name,)\nprint \"=============================================================\"\n\n#delete bucket\nfor bucket in conn.get_all_buckets():\n    if bucket.name == bucket_name:\n        try:\n            print \"* Deleting Bucket..\".format(\n                name = bucket.name,\n            )\n            conn.delete_bucket(bucket_name)\n            print \"* Bucket was deleted.\"\n        except:\n            print \"* Bucket Contains Keys.\"\n\n            full_bucket = conn.get_bucket(n)\n            print \"* Deleting keys...\"\n            for key in full_bucket.list():\n                key.delete()\n            print \"* Keys deleted. Deleting Bucket..\"\n            conn.delete_bucket(n)\n            print \"* Bucket was deleted.\"\n\n#create bucket\nconn.create_bucket(bucket_name)\nprint \"* Bucket was created.\".format(\n    name = bucket_name,\n)\n\nprint \"-------------------------------------------------------------\"\n\n#get bucket list\nfor bucket in conn.get_all_buckets():\n    print \"{name}\\t{created}\".format(\n        name = bucket.name,\n        created = bucket.creation_date,\n    )\n\nprint \"=============================================================\"\n\n\n\n\nSwift S3 \u4e92\u63db API (HTTPS)\n\ns3test_swift2.py\n#!/usr/bin/python\nimport sys\nimport boto\nimport boto.s3.connection\n\nACCESS_KEY = <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\nSECRET_KEY = <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\n\nHOST = '192.168.75.3'\nPORT = 443\nIS_SECURE = True\n\n#connect to rados gateway\nconn = boto.connect_s3(\n    aws_access_key_id = ACCESS_KEY,\n    aws_secret_access_key = SECRET_KEY,\n    port = PORT,\n    host = HOST,\n    is_secure=IS_SECURE, # uncommmnt if you are not using ssl\n    calling_format = boto.s3.connection.OrdinaryCallingFormat(),\n)\n\nargv = sys.argv\n\nif (len(argv) == 2):\n    bucket_name = argv[1]\nelse:\n    bucket_name = 'hoge'\n\nprint \"=============================================================\"\nprint \"S3 API TEST\"\nprint \"    Host:\\t{host}\".format(host = HOST,)\nprint \"    Port:\\t{port}\".format(port = PORT,)\nprint \"    Secure:\\t{secure}\".format(secure = IS_SECURE,)\nprint \"    Bucket:\\t{name}\".format(name = bucket_name,)\nprint \"=============================================================\"\n\n#delete bucket\nfor bucket in conn.get_all_buckets():\n    if bucket.name == bucket_name:\n        try:\n            print \"* Deleting Bucket..\".format(\n                name = bucket.name,\n            )\n            conn.delete_bucket(bucket_name)\n            print \"* Bucket was deleted.\"\n        except:\n            print \"* Bucket Contains Keys.\"\n\n            full_bucket = conn.get_bucket(n)\n            print \"* Deleting keys...\"\n            for key in full_bucket.list():\n                key.delete()\n            print \"* Keys deleted. Deleting Bucket..\"\n            conn.delete_bucket(n)\n            print \"* Bucket was deleted.\"\n\n#create bucket\nconn.create_bucket(bucket_name)\nprint \"* Bucket was created.\".format(\n    name = bucket_name,\n)\n\nprint \"-------------------------------------------------------------\"\n\n#get bucket list\nfor bucket in conn.get_all_buckets():\n    print \"{name}\\t{created}\".format(\n        name = bucket.name,\n        created = bucket.creation_date,\n    )\n\nprint \"=============================================================\"\n\n\n\n\n# \u6982\u8981\nOpenStack \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\u3068\u3057\u3066\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b Swift \u3068 Ceph \u306b\u3064\u3044\u3066\nSSL \u3092\u4f7f\u7528\u3057\u305f S3 API \u901a\u4fe1\u3092\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u65b9\u6cd5\u3092\nMiranis OpenStack 9.0\uff08\u4ee5\u4e0b\u3001MOS9.0\uff09\u3092\u30d9\u30fc\u30b9\u306b\u8aac\u660e\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nradosgw \u306f keystone \u9023\u643a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u30b7\u30b9\u30c6\u30e0\u69cb\u6210\n\u4eca\u56de\u306f\u3001OpenStack \u74b0\u5883\u3092Swift\u30b9\u30c8\u30ec\u30fc\u30b8\u7528\uff08env-swift\uff09\u3068Ceph\u30b9\u30c8\u30ec\u30fc\u30b8\u7528\uff08env-ceph\uff09\u306e\uff12\u30d1\u30bf\u30fc\u30f3\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/129198/fedfc597-db8b-2a9f-d60b-d17cb526176a.png\" width=\"600px\" />\n\n## Swift API \u5185\u90e8\u69cb\u6210\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/129198/f8222cce-a2f8-31ea-6950-302078655ddd.png\" width=\"400px\" />\n\n1. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c haproxy \u306e VIP \u306b\u5bfe\u3057\u3066 API \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\n1. haproxy \u306e\u5b9a\u7fa9\u306b\u5f93\u3044\u3001swift proxy \u3078\u632f\u308a\u5206\u3051\n1. Swift Proxy \u304c Keystone \u9023\u643a\u306b\u3088\u308a\u8a8d\u8a3c\u3092\u884c\u3046\n1. \u8a8d\u8a3c\u306b\u554f\u984c\u306a\u3044\u5834\u5408\u3001Swfit Object Cluster \u3078\u30a2\u30af\u30bb\u30b9\n\n## Ceph API \u5185\u90e8\u69cb\u6210\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/129198/ab9c08c7-6569-2e22-67ac-98fa9a83e619.png\" width=\"500px\" />\n\n1. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c haproxy \u306e VIP \u306b\u5bfe\u3057\u3066 API \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\n1. haproxy \u306e\u5b9a\u7fa9\u306b\u5f93\u3044\u3001Apache \u3078\u632f\u308a\u5206\u3051\n1. apache \u306e\u5b9a\u7fa9\u306b\u5f93\u3044\u3001radosgw \u3078\u30d5\u30a9\u30ef\u30fc\u30c9\n1. radosgw \u304c Keystone \u9023\u643a\u306b\u3088\u308a\u8a8d\u8a3c\u3092\u884c\u3046\n1. \u8a8d\u8a3c\u306b\u554f\u984c\u306a\u3044\u5834\u5408\u3001RADOS \u3078 NATIVE \u901a\u4fe1\u3067\u30a2\u30af\u30bb\u30b9\n\n# \u8a2d\u5b9a\u624b\u9806\n## Swift\n### S3 \u4e92\u63db API\n#### \u30a2\u30af\u30bb\u30b9\u30e6\u30fc\u30b6\u767b\u9332\nkeystone \u306b S3 API \u30a2\u30af\u30bb\u30b9\u3067\u4f7f\u7528\u3059\u308b EC2 \u8a8d\u8a3c\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\n```\n# openstack ec2 credentials create --project admin --user admin\n+------------+----------------------------------+\n| Field      | Value                            |\n+------------+----------------------------------+\n| access     | <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000|\n| project_id | 3e56084d91a24e09af421a51db75ad49 |\n| secret     | <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000|\n| trust_id   | None                             |\n| user_id    | 9a13c4bcf29243a5aaefe9deca7ebaf6 |\n+------------+----------------------------------+\n```\n\n#### Apache Proxy \u63a5\u7d9a\u8a31\u53ef\n\n```text\n@@ -35,7 +35,7 @@\n   RequestReadTimeout header=0,MinRate=500 body=0,MinRate=500\n   <Proxy *>\n     Order Deny,Allow\n-        Allow from 10.20.0.2\n+        Allow from all\n         Deny from all\n   </Proxy>\n\nroot@swift-controller01:/etc# /etc/init.d/apache2 restart\n```\n\n### SSL \u5bfe\u5fdc\n#### haproxy \u8a2d\u5b9a\nOS \u306e 'haproxy' \u30e6\u30fc\u30b6\u3092 'ssl-cert' \u30b0\u30eb\u30fc\u30d7\u306b\u6240\u5c5e\u3055\u305b\u307e\u3059\u3002\n\n```\n# adduser haproxy ssl-cert\n\n# id haproxy\nuid=109(haproxy) gid=116(haproxy) groups=116(haproxy),110(ssl-cert)\n```\n\n#### SSL \u8a3c\u660e\u66f8\u767b\u9332\n\u6b21\u306b SSL \u8a3c\u660e\u66f8\u3092\u30b5\u30fc\u30d0\u4e0a\u306e '/etc/ssl/private/haproxy/' \u914d\u4e0b\u306b\u914d\u7f6e\u3057\u3001\u6a29\u9650\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bSSL \u8a3c\u660e\u66f8\u3001\u30c1\u30a7\u30fc\u30f3\u8a3c\u660e\u66f8\u3001\u79d8\u5bc6\u9375\u3092\uff11\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u305f\u5f8c\u3001\n'\u30d5\u30a1\u30a4\u30eb\u540d\u3092 haproxy.pem'\u306b\u5909\u66f4\u3057\u3001'/etc/ssl/private/haproxy/' \u914d\u4e0b\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002\n\n```\n-----BEGIN CERTIFICATE-----\n<SSL \u8a3c\u660e\u66f8>\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n<\u30c1\u30a7\u30fc\u30f3\u8a3c\u660e\u66f8>\n-----END CERTIFICATE-----\n-----BEGIN PRIVATE KEY-----\n<\u79d8\u5bc6\u9375>\n-----END PRIVATE KEY-----\n```\n\n```\n# chown -R root:haproxy /etc/ssl/private/\n# chmod g+x /etc/ssl/private/\n\n# ls -la /etc/ssl/private/\n-rw-r----- 1 root haproxy 1679 Sep 13 05:08 /etc/ssl/private/haproxy.key\n-rw-r----- 1 root haproxy 5168 Sep 13 05:08 /etc/ssl/private/haproxy.pem\n```\n\nSSL \u306e\u30dd\u30fc\u30c8\u756a\u53f7\u306f '443' \u306b\u8a2d\u5b9a\u3057\u3001SSL \u8a3c\u660e\u66f8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u4eca\u56de\u3001http \u901a\u4fe1\u306f\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u308b\u72b6\u614b\u3067\u6b8b\u3057\u3001\n\u307e\u305f\u3001haproxy \u3068 radosgw \u9593\u306e\u901a\u4fe1\u306f\u3001http \u3068\u306a\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```text:/etc/haproxy/conf.d/130-object-storage.cfg\n@@ -2,7 +2,9 @@\n listen object-storage\n   bind 10.16.11.2:8080\n   bind 192.168.75.3:8080\n+  bind *:443 ssl crt /etc/ssl/private/haproxy.pem no-sslv3\n   http-request  set-header X-Forwarded-Proto https if { ssl_fc }\n+  mode http\n   option  httpchk HEAD /healthcheck HTTP/1.0\n   option  httplog\n   option  httpclose\n```\n\n\u6700\u5f8c\u306b\u8a2d\u5b9a\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u518d\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```\n# crm resource restart clone_p_haproxy\n# service haproxy restart\n```\n\n## Ceph\n### S3 \u4e92\u63db API\uff08keystone \u9023\u643a\uff09\n#### keystone \u9023\u643a\n\u4eca\u56de\u306f\u3001radosgw \u3068 keystone \u3092\u9023\u643a\u3055\u305b\u308b\u305f\u3081\u3001\n\u307e\u305a\u3001ceph.conf \u3092\u958b\u304d\u3001`rgw_keystone_*` \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```/etc/ceph/ceph.conf\n[client.radosgw.gateway]\nrgw_keystone_accepted_roles = _member_, Member, admin, swiftoperator\nkeyring = /etc/ceph/keyring.radosgw.gateway\nrgw_frontends = fastcgi socket_port=9000 socket_host=127.0.0.1\nrgw_socket_path = /tmp/radosgw.sock\nrgw_keystone_revocation_interval = 1000000\nrgw_keystone_url = http://<keystone haproxy vip>:35357\nrgw_keystone_admin_token = <keystone \u7ba1\u7406\u8005\u30c8\u30fc\u30af\u30f3>\nhost = ceph-controller01\nrgw_dns_name = *.domain.tld\nrgw_print_continue = True\nrgw_keystone_token_cache_size = 10\nrgw_data = /var/lib/ceph/radosgw\nuser = www-data\n```\n\n`rgw_s3_auth_use_keystone` \u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n\n```/etc/ceph/ceph.conf\n@@ -27,6 +27,7 @@\n rbd_cache = True\n\n [client.radosgw.gateway]\n+rgw_s3_auth_use_keystone = true\n rgw_keystone_accepted_roles = _member_, Member, admin, swiftoperator\n keyring = /etc/ceph/keyring.radosgw.gateway\n rgw_frontends = fastcgi socket_port=9000 socket_host=127.0.0.1\n```\n\n\u8a2d\u5b9a\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u3001radosgw \u3092\u4e00\u5ea6\u518d\u8d77\u52d5\u3057\u3066 keystone \u9023\u643a\u306f\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\n```\n# /etc/init.d/radosgw restart\n```\n\n#### \u30a2\u30af\u30bb\u30b9\u30e6\u30fc\u30b6\u767b\u9332\n\u7d9a\u3051\u3066\u3001keystone \u306b S3 API \u30a2\u30af\u30bb\u30b9\u3067\u4f7f\u7528\u3059\u308b EC2 \u8a8d\u8a3c\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\n```\n# openstack ec2 credentials create --project admin --user admin\n+------------+----------------------------------+\n| Field      | Value                            |\n+------------+----------------------------------+\n| access     | <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000|\n| project_id | 7a964fe86daa4148a7d4c34b42746233 |\n| secret     | <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000|\n| trust_id   | None                             |\n| user_id    | 7c2b6158cfe7468b9a47a538f55c56f8 |\n+------------+----------------------------------+\n```\n\n### SSL \u5bfe\u5fdc\n#### haproxy \u8a2d\u5b9a\nOS \u306e 'haproxy' \u30e6\u30fc\u30b6\u3092 'ssl-cert' \u30b0\u30eb\u30fc\u30d7\u306b\u6240\u5c5e\u3055\u305b\u307e\u3059\u3002\n\n```\n# adduser haproxy ssl-cert\n\n# id haproxy\nuid=109(haproxy) gid=116(haproxy) groups=116(haproxy),110(ssl-cert)\n```\n\n#### SSL \u8a3c\u660e\u66f8\u767b\u9332\n\u6b21\u306b SSL \u8a3c\u660e\u66f8\u3092\u30b5\u30fc\u30d0\u4e0a\u306e '/etc/ssl/private/haproxy/' \u914d\u4e0b\u306b\u914d\u7f6e\u3057\u3001\u6a29\u9650\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```\n# chmod 640 /etc/ssl/private/haproxy*\n# chown root:ssl-cert /etc/ssl/private/haproxy*\n\n# ls -la /etc/ssl/private/haproxy*\n-rw-r----- 1 root haproxy 1679 Sep 13 02:17 /etc/ssl/private/haproxy.key\n-rw-r----- 1 root haproxy 5168 Sep 13 00:58 /etc/ssl/private/haproxy.pem\n```\n\nSSL \u306e\u30dd\u30fc\u30c8\u756a\u53f7\u306f '443' \u306b\u8a2d\u5b9a\u3057\u3001SSL \u8a3c\u660e\u66f8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u4eca\u56de\u3001http \u901a\u4fe1\u306f\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u308b\u72b6\u614b\u3067\u6b8b\u3057\u3001\n\u307e\u305f\u3001haproxy \u3068 radosgw \u9593\u306e\u901a\u4fe1\u306f\u3001http \u3068\u306a\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```text:/etc/haproxy/conf.d/130-object-storage.cfg\n@@ -1,8 +1,10 @@\n\n listen object-storage\n   bind 172.16.101.2:8080\n   bind 192.168.76.3:8080\n+  bind *:443 ssl crt /etc/ssl/private/haproxy.pem no-sslv3\n   http-request  set-header X-Forwarded-Proto https if { ssl_fc }\n+  mode http\n   option  httplog\n   option  httpchk HEAD /\n   option  http-server-close\n```\n\n\u6700\u5f8c\u306b\u8a2d\u5b9a\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u518d\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```\n# crm resource restart clone_p_haproxy\n```\n\n# \u78ba\u8a8d\u624b\u9806\n\u4eca\u56de\u306f\u3001Python boto \u3092\u4f7f\u7528\u3057\u305f S3 API \u78ba\u8a8d\u7528\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3001\n\u30d0\u30b1\u30c3\u30c8\u306e\u53d6\u5f97\u30fb\u4f5c\u6210\u30fb\u524a\u9664\u306b\u3064\u3044\u3066\u3001\u78ba\u8a8d\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n- Ceph S3 \u4e92\u63db API (HTTP)\n\n    ```\n    ubuntu@work:~$ ./s3test_ceph.py\n    =============================================================\n    S3 API TEST\n        Host:       192.168.76.3\n        Port:       8080\n        Secure:     False\n        Bucket:     hoge\n    =============================================================\n    * Deleting Bucket..\n    * Bucket was deleted.\n    * Bucket was created.\n    -------------------------------------------------------------\n    hoge    2016-09-13T05:43:07.000Z\n    =============================================================\n    ```\n\n- Ceph S3 \u4e92\u63db API (HTTPS)\n\n    ```\n    ubuntu@work:~$ ./s3test_ceph2.py\n    =============================================================\n    S3 API TEST\n        Host:       192.168.76.3\n        Port:       443\n        Secure:     True\n        Bucket:     hoge\n    =============================================================\n    * Deleting Bucket..\n    * Bucket was deleted.\n    * Bucket was created.\n    -------------------------------------------------------------\n    hoge    2016-09-13T05:43:13.000Z\n    =============================================================\n    ```\n\n- Swift S3 \u4e92\u63db API (HTTP)\n\n    ```\n    $ ./s3test_swift.py\n    =============================================================\n    S3 API TEST\n        Host:       192.168.75.3\n        Port:       8080\n        Secure:     False\n        Bucket:     hoge\n    =============================================================\n    * Deleting Bucket..\n    * Bucket was deleted.\n    * Bucket was created.\n    -------------------------------------------------------------\n    hoge    2009-02-03T16:45:09.000Z\n    =============================================================\n    ```\n\n- Swift S3 \u4e92\u63db API (HTTPS)\n\n    ```\n    $ ./s3test_swift2.py\n    =============================================================\n    S3 API TEST\n        Host:       192.168.75.3\n        Port:       443\n        Secure:     True\n        Bucket:     hoge\n    =============================================================\n    * Deleting Bucket..\n    * Bucket was deleted.\n    * Bucket was created.\n    -------------------------------------------------------------\n    hoge    2009-02-03T16:45:09.000Z\n    =============================================================\n    ```\n\n# \u3010\u53c2\u8003\u3011\u78ba\u8a8d\u7528\u30b9\u30af\u30ea\u30d7\u30c8\n\u4ee5\u4e0b\u306b\u78ba\u8a8d\u7528\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u63b2\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n- Ceph S3 \u4e92\u63db API (HTTP)\n\n    ```python:s3test_ceph.py\n    #!/usr/bin/python\n    import sys\n    import boto\n    import boto.s3.connection\n\n    ACCESS_KEY = <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\n    SECRET_KEY = <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\n\n    HOST = '192.168.76.3'\n    PORT = 8080\n    IS_SECURE = False\n\n    #connect to rados gateway\n    conn = boto.connect_s3(\n        aws_access_key_id = ACCESS_KEY,\n        aws_secret_access_key = SECRET_KEY,\n        port = PORT,\n        host = HOST,\n        is_secure=IS_SECURE, # uncommmnt if you are not using ssl\n        calling_format = boto.s3.connection.OrdinaryCallingFormat(),\n    )\n\n    argv = sys.argv\n\n    if (len(argv) == 2):\n        bucket_name = argv[1]\n    else:\n        bucket_name = 'hoge'\n\n    print \"=============================================================\"\n    print \"S3 API TEST\"\n    print \"    Host:\\t{host}\".format(host = HOST,)\n    print \"    Port:\\t{port}\".format(port = PORT,)\n    print \"    Secure:\\t{secure}\".format(secure = IS_SECURE,)\n    print \"    Bucket:\\t{name}\".format(name = bucket_name,)\n    print \"=============================================================\"\n\n    #delete bucket\n    for bucket in conn.get_all_buckets():\n        if bucket.name == bucket_name:\n            try:\n                print \"* Deleting Bucket..\".format(\n                    name = bucket.name,\n                )\n                conn.delete_bucket(bucket_name)\n                print \"* Bucket was deleted.\"\n            except:\n                print \"* Bucket Contains Keys.\"\n\n                full_bucket = conn.get_bucket(n)\n                print \"* Deleting keys...\"\n                for key in full_bucket.list():\n                    key.delete()\n                print \"* Keys deleted. Deleting Bucket..\"\n                conn.delete_bucket(n)\n                print \"* Bucket was deleted.\"\n\n    #create bucket\n    conn.create_bucket(bucket_name)\n    print \"* Bucket was created.\".format(\n        name = bucket_name,\n    )\n\n    print \"-------------------------------------------------------------\"\n\n    #get bucket list\n    for bucket in conn.get_all_buckets():\n        print \"{name}\\t{created}\".format(\n            name = bucket.name,\n            created = bucket.creation_date,\n        )\n\n    print \"=============================================================\"\n    ```\n\n-  Ceph S3 \u4e92\u63db API (HTTPS)\n\n    ```python:s3test_ceph2.py\n    #!/usr/bin/python\n    import sys\n    import boto\n    import boto.s3.connection\n\n    ACCESS_KEY = <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\n    SECRET_KEY = <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\n\n    HOST = '192.168.76.3'\n    PORT = 443\n    IS_SECURE = True\n\n    #connect to rados gateway\n    conn = boto.connect_s3(\n        aws_access_key_id = ACCESS_KEY,\n        aws_secret_access_key = SECRET_KEY,\n        port = PORT,\n        host = HOST,\n        is_secure=IS_SECURE, # uncommmnt if you are not using ssl\n        calling_format = boto.s3.connection.OrdinaryCallingFormat(),\n    )\n\n    argv = sys.argv\n\n    if (len(argv) == 2):\n        bucket_name = argv[1]\n    else:\n        bucket_name = 'hoge'\n\n    print \"=============================================================\"\n    print \"S3 API TEST\"\n    print \"    Host:\\t{host}\".format(host = HOST,)\n    print \"    Port:\\t{port}\".format(port = PORT,)\n    print \"    Secure:\\t{secure}\".format(secure = IS_SECURE,)\n    print \"    Bucket:\\t{name}\".format(name = bucket_name,)\n    print \"=============================================================\"\n\n    #delete bucket\n    for bucket in conn.get_all_buckets():\n        if bucket.name == bucket_name:\n            try:\n                print \"* Deleting Bucket..\".format(\n                    name = bucket.name,\n                )\n                conn.delete_bucket(bucket_name)\n                print \"* Bucket was deleted.\"\n            except:\n                print \"* Bucket Contains Keys.\"\n\n                full_bucket = conn.get_bucket(n)\n                print \"* Deleting keys...\"\n                for key in full_bucket.list():\n                    key.delete()\n                print \"* Keys deleted. Deleting Bucket..\"\n                conn.delete_bucket(n)\n                print \"* Bucket was deleted.\"\n\n    #create bucket\n    conn.create_bucket(bucket_name)\n    print \"* Bucket was created.\".format(\n        name = bucket_name,\n    )\n\n    print \"-------------------------------------------------------------\"\n\n    #get bucket list\n    for bucket in conn.get_all_buckets():\n        print \"{name}\\t{created}\".format(\n            name = bucket.name,\n            created = bucket.creation_date,\n        )\n\n    print \"=============================================================\"\n    ```\n\n- Swift S3 \u4e92\u63db API (HTTP)\n\n    ```python:s3test_swift.py\n    #!/usr/bin/python\n    import sys\n    import boto\n    import boto.s3.connection\n\n    ACCESS_KEY = <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\n    SECRET_KEY = <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\n\n    HOST = '192.168.75.3'\n    PORT = 8080\n    IS_SECURE = False\n\n    #connect to rados gateway\n    conn = boto.connect_s3(\n        aws_access_key_id = ACCESS_KEY,\n        aws_secret_access_key = SECRET_KEY,\n        port = PORT,\n        host = HOST,\n        is_secure=IS_SECURE, # uncommmnt if you are not using ssl\n        calling_format = boto.s3.connection.OrdinaryCallingFormat(),\n    )\n\n    argv = sys.argv\n\n    if (len(argv) == 2):\n        bucket_name = argv[1]\n    else:\n        bucket_name = 'hoge'\n\n    print \"=============================================================\"\n    print \"S3 API TEST\"\n    print \"    Host:\\t{host}\".format(host = HOST,)\n    print \"    Port:\\t{port}\".format(port = PORT,)\n    print \"    Secure:\\t{secure}\".format(secure = IS_SECURE,)\n    print \"    Bucket:\\t{name}\".format(name = bucket_name,)\n    print \"=============================================================\"\n\n    #delete bucket\n    for bucket in conn.get_all_buckets():\n        if bucket.name == bucket_name:\n            try:\n                print \"* Deleting Bucket..\".format(\n                    name = bucket.name,\n                )\n                conn.delete_bucket(bucket_name)\n                print \"* Bucket was deleted.\"\n            except:\n                print \"* Bucket Contains Keys.\"\n\n                full_bucket = conn.get_bucket(n)\n                print \"* Deleting keys...\"\n                for key in full_bucket.list():\n                    key.delete()\n                print \"* Keys deleted. Deleting Bucket..\"\n                conn.delete_bucket(n)\n                print \"* Bucket was deleted.\"\n\n    #create bucket\n    conn.create_bucket(bucket_name)\n    print \"* Bucket was created.\".format(\n        name = bucket_name,\n    )\n\n    print \"-------------------------------------------------------------\"\n\n    #get bucket list\n    for bucket in conn.get_all_buckets():\n        print \"{name}\\t{created}\".format(\n            name = bucket.name,\n            created = bucket.creation_date,\n        )\n\n    print \"=============================================================\"\n    ```\n\n- Swift S3 \u4e92\u63db API (HTTPS)\n\n    ```python:s3test_swift2.py\n    #!/usr/bin/python\n    import sys\n    import boto\n    import boto.s3.connection\n\n    ACCESS_KEY = <\u30a2\u30af\u30bb\u30b9\u30ad\u30fc>\n    SECRET_KEY = <\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc>\n\n    HOST = '192.168.75.3'\n    PORT = 443\n    IS_SECURE = True\n\n    #connect to rados gateway\n    conn = boto.connect_s3(\n        aws_access_key_id = ACCESS_KEY,\n        aws_secret_access_key = SECRET_KEY,\n        port = PORT,\n        host = HOST,\n        is_secure=IS_SECURE, # uncommmnt if you are not using ssl\n        calling_format = boto.s3.connection.OrdinaryCallingFormat(),\n    )\n\n    argv = sys.argv\n\n    if (len(argv) == 2):\n        bucket_name = argv[1]\n    else:\n        bucket_name = 'hoge'\n\n    print \"=============================================================\"\n    print \"S3 API TEST\"\n    print \"    Host:\\t{host}\".format(host = HOST,)\n    print \"    Port:\\t{port}\".format(port = PORT,)\n    print \"    Secure:\\t{secure}\".format(secure = IS_SECURE,)\n    print \"    Bucket:\\t{name}\".format(name = bucket_name,)\n    print \"=============================================================\"\n\n    #delete bucket\n    for bucket in conn.get_all_buckets():\n        if bucket.name == bucket_name:\n            try:\n                print \"* Deleting Bucket..\".format(\n                    name = bucket.name,\n                )\n                conn.delete_bucket(bucket_name)\n                print \"* Bucket was deleted.\"\n            except:\n                print \"* Bucket Contains Keys.\"\n\n                full_bucket = conn.get_bucket(n)\n                print \"* Deleting keys...\"\n                for key in full_bucket.list():\n                    key.delete()\n                print \"* Keys deleted. Deleting Bucket..\"\n                conn.delete_bucket(n)\n                print \"* Bucket was deleted.\"\n\n    #create bucket\n    conn.create_bucket(bucket_name)\n    print \"* Bucket was created.\".format(\n        name = bucket_name,\n    )\n\n    print \"-------------------------------------------------------------\"\n\n    #get bucket list\n    for bucket in conn.get_all_buckets():\n        print \"{name}\\t{created}\".format(\n            name = bucket.name,\n            created = bucket.creation_date,\n        )\n\n    print \"=============================================================\"\n    ```\n", "tags": ["openstack", "Swift", "Ceph", "Miranits", "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8"]}