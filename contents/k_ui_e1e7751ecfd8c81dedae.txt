{"context": " More than 1 year has passed since last update.JMockit \u3092\u306a\u306b\u3082\u8003\u3048\u305a\u306b\u4f7f\u3046\u3068\u3001\u671f\u5f85\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u304c\u3042\u3063\u3066\u3082\u3046\u3063\u304b\u308a\u30c6\u30b9\u30c8\u304c\u901a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3002\n\u4f8b\u3048\u3070:\n@Test\npublic void doTest(@Mocked final URL mockUrl) throws Exception {\n\n    new NonStrictExpectations() {\n        {\n            mockUrl.getProtocol();\n            result = \"http\";\n            mintimes = 0;\n        }\n    };\n\n    //\n\n    System.out.println(mockUrl.getProtocol()); // => http\n    System.out.println(mockUrl.getFile()); // => null\n    System.out.println(mockUrl.getPort()); // => 0\n\n    // \u30c6\u30b9\u30c8\u304c\u6210\u529f\u3057\u3066\u3057\u307e\u3046\n}\n\n\u3053\u306e getFile() \u3084 getPort() \u306e\u69d8\u306b\u3001\u671f\u5f85\u3057\u3066\u3044\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u547c\u3093\u3067\u3082\u6c17\u3065\u304b\u305a\u3001\u30c6\u30b9\u30c8\u304c\u7d42\u308f\u3063\u3066\u3057\u307e\u3046\u3002\n\u3053\u3046\u3044\u3063\u305f\u671f\u5f85\u3057\u306a\u3044\u547c\u3073\u51fa\u3057\u3092\u691c\u51fa\u3057\u30c6\u30b9\u30c8\u5931\u6557\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u30c6\u30b9\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u6700\u5f8c\u306b FullVerification \u3092\u547c\u3073\u307e\u3057\u3087\u3046:\n@Test\npublic void doTest(@Mocked final URL mockUrl) throws Exception {\n\n    new NonStrictExpectations() {\n        {\n            mockUrl.getProtocol();\n            result = \"http\";\n            times = 1;\n        }\n    };\n\n    //\n\n    System.out.println(mockUrl.getProtocol()); // => http\n    System.out.println(mockUrl.getFile()); // => null\n    System.out.println(mockUrl.getPort()); // => 0\n\n    // \u2193\u8ffd\u52a0\n\n    new FullVerifications() { };\n    // => \u4f8b\u5916\u304c\u767a\u751f mockit.internal.UnexpectedInvocation: Unexpected invocation of: java.net.URL#getFile() on mock instance: java.net.URL@21801b\n}\n\n\u3053\u306e\u5834\u5408\u3001Expectations (or NoStrictExpectations) \u3067 times \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001 FullVerifications \u3067\u6307\u5b9a\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u5197\u9577\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u3002\n\u3057\u304b\u3057\u3001\u7d50\u5c40\u3001\u30b9\u30bf\u30d6\u7684\u306a\u6319\u52d5\u3092\u3055\u305b\u305f\u3044\u6642\u306f\u3001FullVerifications \u306b\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044:\n@Test\npublic void doTest(@Mocked final URL mockUrl) throws Exception {\n\n    new NonStrictExpectations() {\n        {\n            mockUrl.getProtocol();\n            result = \"http\";\n        }\n    };\n\n    //\n\n    System.out.println(mockUrl.getProtocol()); // => http\n    // #getProtocol() \u3092\u4f55\u5ea6\u547c\u3093\u3067\u3082\u5927\u4e08\u592b\n\n    //\n\n    new FullVerifications() { // \u2193\u3053\u3053\u306b\u66f8\u304f\n        {\n            mockUrl.getProtocol();\n            minTimes = 0;\n        }\n    };\n}\n\n\u3053\u306e\u5e45\u306e\u3042\u308b\u547c\u3073\u51fa\u3057\u56de\u6570\u306e\u5b9a\u7fa9 (minTimes \u3068\u304b maxTimes) \u3082\u4e0a\u306e Expectations \u306b\u66f8\u3051\u305f\u3089\u697d\u306a\u306e\u306a\u3041\u3002\n\u3053\u306e\u8fba\u306f EasyMock \u306e\u65b9\u304c\u30b9\u30de\u30fc\u30c8\u306b\u5b9a\u7fa9\u3067\u304d\u3066\u3044\u308b\u6c17\u304c\u3059\u308b\u3002\n[JMockit][] \u3092\u306a\u306b\u3082\u8003\u3048\u305a\u306b\u4f7f\u3046\u3068\u3001\u671f\u5f85\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u304c\u3042\u3063\u3066\u3082\u3046\u3063\u304b\u308a\u30c6\u30b9\u30c8\u304c\u901a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3002\n\n\u4f8b\u3048\u3070:\n\n```java\n@Test\npublic void doTest(@Mocked final URL mockUrl) throws Exception {\n\n\tnew NonStrictExpectations() {\n\t\t{\n\t\t\tmockUrl.getProtocol();\n\t\t\tresult = \"http\";\n\t\t\tmintimes = 0;\n\t\t}\n\t};\n\n\t//\n\n\tSystem.out.println(mockUrl.getProtocol()); // => http\n\tSystem.out.println(mockUrl.getFile()); // => null\n\tSystem.out.println(mockUrl.getPort()); // => 0\n\n\t// \u30c6\u30b9\u30c8\u304c\u6210\u529f\u3057\u3066\u3057\u307e\u3046\n}\n```\n\n\u3053\u306e `getFile()` \u3084 `getPort()` \u306e\u69d8\u306b\u3001\u671f\u5f85\u3057\u3066\u3044\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u547c\u3093\u3067\u3082\u6c17\u3065\u304b\u305a\u3001\u30c6\u30b9\u30c8\u304c\u7d42\u308f\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u3053\u3046\u3044\u3063\u305f\u671f\u5f85\u3057\u306a\u3044\u547c\u3073\u51fa\u3057\u3092\u691c\u51fa\u3057\u30c6\u30b9\u30c8\u5931\u6557\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u30c6\u30b9\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u6700\u5f8c\u306b [FullVerification][] \u3092\u547c\u3073\u307e\u3057\u3087\u3046:\n\n```java\n@Test\npublic void doTest(@Mocked final URL mockUrl) throws Exception {\n\n\tnew NonStrictExpectations() {\n\t\t{\n\t\t\tmockUrl.getProtocol();\n\t\t\tresult = \"http\";\n\t\t\ttimes = 1;\n\t\t}\n\t};\n\n\t//\n\n\tSystem.out.println(mockUrl.getProtocol()); // => http\n\tSystem.out.println(mockUrl.getFile()); // => null\n\tSystem.out.println(mockUrl.getPort()); // => 0\n\n\t// \u2193\u8ffd\u52a0\n\n\tnew FullVerifications() { };\n\t// => \u4f8b\u5916\u304c\u767a\u751f mockit.internal.UnexpectedInvocation: Unexpected invocation of: java.net.URL#getFile() on mock instance: java.net.URL@21801b\n}\n```\n\n\u3053\u306e\u5834\u5408\u3001`Expectations` (or `NoStrictExpectations`) \u3067 `times` \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001 `FullVerifications` \u3067\u6307\u5b9a\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u5197\u9577\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u3002\n\n\u3057\u304b\u3057\u3001\u7d50\u5c40\u3001\u30b9\u30bf\u30d6\u7684\u306a\u6319\u52d5\u3092\u3055\u305b\u305f\u3044\u6642\u306f\u3001`FullVerifications` \u306b\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044:\n\n```java\n@Test\npublic void doTest(@Mocked final URL mockUrl) throws Exception {\n\n\tnew NonStrictExpectations() {\n\t\t{\n\t\t\tmockUrl.getProtocol();\n\t\t\tresult = \"http\";\n\t\t}\n\t};\n\n\t//\n\n\tSystem.out.println(mockUrl.getProtocol()); // => http\n\t// #getProtocol() \u3092\u4f55\u5ea6\u547c\u3093\u3067\u3082\u5927\u4e08\u592b\n\n\t//\n\n\tnew FullVerifications() { // \u2193\u3053\u3053\u306b\u66f8\u304f\n\t\t{\n\t\t\tmockUrl.getProtocol();\n\t\t\tminTimes = 0;\n\t\t}\n\t};\n}\n```\n\n\u3053\u306e\u5e45\u306e\u3042\u308b\u547c\u3073\u51fa\u3057\u56de\u6570\u306e\u5b9a\u7fa9 (`minTimes` \u3068\u304b `maxTimes`) \u3082\u4e0a\u306e `Expectations` \u306b\u66f8\u3051\u305f\u3089\u697d\u306a\u306e\u306a\u3041\u3002\n\u3053\u306e\u8fba\u306f [EasyMock][] \u306e\u65b9\u304c\u30b9\u30de\u30fc\u30c8\u306b\u5b9a\u7fa9\u3067\u304d\u3066\u3044\u308b\u6c17\u304c\u3059\u308b\u3002\n\n[JMockit]: https://code.google.com/p/jmockit/\n[FullVerification]: http://jmockit.googlecode.com/svn/trunk/www/tutorial/BehaviorBasedTesting.html#FullVerification\n[EasyMock]: http://easymock.org/", "tags": ["Java", "jMockit", "JUnit"]}