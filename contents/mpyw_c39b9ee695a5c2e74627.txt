{"context": " More than 1 year has passed since last update.\n\n\u3053\u308c\u306f\u4f55\uff1f\n\nfilter_input_array \u95a2\u6570\u306e\u60dc\u3057\u3044\u3068\u3053\u308d\u3092\u4f7f\u3044\u3084\u3059\u304f\u3001\u5b89\u5168\u306b\u3057\u305f\u5f37\u5316\u7248\u3067\u3059\u3002\n\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u308b\u5909\u6570\u540d\u3092\u591a\u6b21\u5143\u914d\u5217\u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\ncURL\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306b\u95a2\u3059\u308b\u554f\u984c\u306e\u89e3\u6c7a\u7b56\u3068\u3057\u3066PHP\u516c\u5f0f\u304c\u63a1\u7528\u3057\u305f\u8449\u8981\u7d20\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u5c02\u7528\u306e\u30af\u30e9\u30b9\u3092\u7528\u610f\u3059\u308b\u3068\u3044\u3046\u624b\u6bb5\u3092\u771f\u4f3c\u3066\u3001\u4efb\u610f\u306e\u30d5\u30a3\u30eb\u30bf\u306b\u3088\u308b\u518d\u5e30\u7684\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u53ef\u80fd\u306b\u3057\u307e\u3057\u305f\u3002\uff08\u8a73\u3057\u304f\u306f \u300cPHP\u3067cURL\u306e\u30af\u30bd\u4ed5\u69d8 \"@\" \u3092\u56de\u907f\u3059\u308b\u300d \u3067\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\uff09\n\nfilter_input_simple \u95a2\u6570\u3068\u306e\u6bd4\u8f03\n\n\n\n\nfilter_input_simple\nfilter_input_array_recursive\n\n\n\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9(\u521d\u56de\u30b3\u30fc\u30eb\u6642)\n\u25b3\n\u25cb\n\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9(2\u56de\u76ee\u4ee5\u964d)\n\u25ce\n\u25cb\n\n\n\u30cd\u30b9\u30c8\u3057\u305f\u914d\u5217\u3078\u306e\u5bfe\u5fdc\n\u25ce\n\u25ce\n\n\n\u30cd\u30b9\u30c8\u3057\u305f\u4efb\u610f\u306e\u914d\u5217\u3078\u306e\u5bfe\u5fdc\n\u00d7\n\u25ce\n\n\n\n\n\u30af\u30e9\u30b9\u3068\u95a2\u6570\u306e\u5b9a\u7fa9\n\n\nFilterObject \u30af\u30e9\u30b9\n\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\n\npublic __construct(int $filter = FILTER_DEFAULT, mixed $options = FILTER_REQUIRE_SCALAR)\n\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\n\n\n$filter\n\nfilter_input \u95a2\u6570\u306e\u5f15\u6570\u3068\u540c\u69d8\u3067\u3059\u3002\n\n$options\n\nfilter_input \u95a2\u6570\u306e\u5f15\u6570\u3068\u540c\u69d8\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n/**\n * Object for filter_input_array_recursive().\n */\nclass FilterObject {\n\n    private $filter;\n    private $options;\n\n    /**\n     * Constructor.\n     * \n     * @param int   $filter  same as ones for filter_input().\n     * @param mixed $options same as ones for filter_input().\n     */\n    public function __construct($filter = FILTER_DEFAULT, $options = FILTER_REQUIRE_SCALAR) {\n        $this->filter  = $filter;\n        $this->options = $options;\n    }\n\n    public function getFilter() {\n        return $this->filter;\n    }\n\n    public function getOptions() {\n        return $this->options;\n    }\n\n}\n\n\nfilter_input_array_recursive \u95a2\u6570\n\n\n\u30b7\u30b0\u30cd\u30c1\u30e3\n\narray filter_input_array_recursive(int $type, array $filters)\n\n\n\u5f15\u6570\n\n\n$type\n\nINPUT_GET INPUT_POST INPUT_COOKIE INPUT_REQUEST \u306e\u3044\u305a\u308c\u304b\u3002\n\n$filters\n\n\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306e\u8981\u7d20\u3067\u69cb\u6210\u3055\u308c\u308b\u914d\u5217\u3002\n\"name\u5c5e\u6027\u5024\" => FilterObject\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n\n\u914d\u5217\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\nFilterObject\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4ee5\u5916\u3092\u6e21\u3057\u305f\u5834\u5408\u3001 new FilterObject \u3067\u751f\u6210\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n\n\n\u8fd4\u308a\u5024\n\n\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n/**\n * Apply filter_input() recursively.\n * \n * @param int   $type    INPUT_GET, INPUT_POST, INPUT_COOKIE or INPUT_REQUEST.\n * @param array $filters Multi-demensional array,\n *                       which contains FilterObject for each leaf.\n * @return array\n */\nfunction filter_input_array_recursive($type, array $filters) {\n    static $recursive_static;\n    static $flag_match;\n    static $is_not_array;\n    static $filter_array;\n    static $types;\n    if (!$flag_match) {\n        /* initialize static variables */\n        $types = array(\n            INPUT_GET     => $_GET,\n            INPUT_POST    => $_POST,\n            INPUT_COOKIE  => $_COOKIE,\n            INPUT_REQUEST => $_REQUEST,\n        );\n        $flag_match = function ($v, $f) {\n            return (int)(isset($v['flags']) ? $v['flags'] : $v) & $f;\n        };\n        $is_not_array = function ($v) {\n            return !is_array($v);\n        };\n        $filter_array = function ($v) {\n            return !is_array($v) ? $v : false;\n        };\n    }\n    $recursive = $recursive_static;\n    if (!$recursive) {\n        /* only for first loop */\n        $type = (int)$type;\n        if (!isset($types[$type])) {\n            throw new \\InvalidArgumentException(\n                'unknown super global var type'\n            );\n        }\n        $var = $types[$type];\n        $recursive_static = true;\n    } else {\n        /* after first loop */\n        $var = $type;\n    }\n    $ret = array();\n    foreach ($filters as $key => $value) {\n        if (is_array($value)) {\n            // apply child filters\n            $ret[$key] = filter_input_array_recursive(\n                isset($var[$key]) ? $var[$key] : array(),\n                $value\n            );\n        } else {\n            if (!($value instanceof FilterObject)) {\n                // create default FilterObject for invalid leaf\n                $value = new FilterObject;\n            }\n            $filter = $value->getFilter();\n            $options = $value->getOptions();\n            // check if key exists...\n            // true  -> apply filter_var() with supplied filter and options\n            // false -> regard as null\n            try {\n                $ret[$key] = \n                    isset($var[$key]) ?\n                    filter_var($var[$key], $filter, $options) :\n                    null\n                ;\n            } catch (Exception $e) {\n                $recursive_static = false;\n                throw $e;\n            }\n            if ($flag_match($options, FILTER_FORCE_ARRAY | FILTER_REQUIRE_ARRAY)) {\n                // differently from filter_input(),\n                // this function prevent unexpected non-array value\n                // or multi-demensional array\n                if ($flag_match($options, FILTER_FORCE_ARRAY)) {\n                    // eliminate arrays\n                    $ret[$key] = array_filter((array)$ret[$key], $is_not_array);\n                } else {\n                    // change arrays into false\n                    $ret[$key] = array_map($filter_array, (array)$ret[$key]);\n                }\n            }\n        }\n    }\n    if (!$recursive) {\n        /* only for first loop */\n        $recursive_static = false;\n    }\n    return $ret;\n}\n\n\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n$_POST['foo']['bar']['validated_float'] = '1,234.213';\n$_POST['foo']['forced_1d_array']        = array('a', array('b'), 'c');\n$_POST['foo']['required_1d_array']      = array('a', array('b'), 'c');\n$_POST['foo']['required_scalar']        = array('a', array('b'), 'c');\n\nvar_dump(filter_input_array_recursive(INPUT_POST, array(\n    'foo' => array(\n        'bar' => array(\n            'validated_float' => new FilterObject(\n                FILTER_VALIDATE_FLOAT,\n                array(\n                    'options' => array(\n                        'min_range' => 1234,\n                        'max_range' => 1235,\n                    ),\n                    'flags' => FILTER_FLAG_ALLOW_THOUSAND,\n                )\n            ),\n        ),\n        'forced_1d_array'   => new FilterObject(FILTER_DEFAULT, FILTER_FORCE_ARRAY),\n        'required_1d_array' => new FilterObject(FILTER_DEFAULT, FILTER_REQUIRE_ARRAY),\n        'required_scalar'   => null,\n    ),\n)));\n\n\n\u5b9f\u884c\u7d50\u679c\n\narray(1) {\n  [\"foo\"]=>\n  array(4) {\n    [\"bar\"]=>\n    array(1) {\n      [\"validated_float\"]=>\n      float(1234.213)\n    }\n    [\"forced_1d_array\"]=>\n    array(2) {\n      [0]=>\n      string(1) \"a\"\n      [2]=>\n      string(1) \"c\"\n    }\n    [\"required_1d_array\"]=>\n    array(3) {\n      [0]=>\n      string(1) \"a\"\n      [1]=>\n      bool(false)\n      [2]=>\n      string(1) \"c\"\n    }\n    [\"required_scalar\"]=>\n    bool(false)\n  }\n}\n\n# **\u3053\u308c\u306f\u4f55\uff1f**\n\n**[filter_input_array](http://www.php.net/manual/ja/function.filter-input-array.php)** \u95a2\u6570\u306e\u60dc\u3057\u3044\u3068\u3053\u308d\u3092\u4f7f\u3044\u3084\u3059\u304f\u3001\u5b89\u5168\u306b\u3057\u305f\u5f37\u5316\u7248\u3067\u3059\u3002\n\n**\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u308b\u5909\u6570\u540d\u3092\u591a\u6b21\u5143\u914d\u5217\u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002**\n\ncURL\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306b\u95a2\u3059\u308b\u554f\u984c\u306e\u89e3\u6c7a\u7b56\u3068\u3057\u3066PHP\u516c\u5f0f\u304c\u63a1\u7528\u3057\u305f<ins>\u8449\u8981\u7d20\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u5c02\u7528\u306e\u30af\u30e9\u30b9\u3092\u7528\u610f\u3059\u308b</ins>\u3068\u3044\u3046\u624b\u6bb5\u3092\u771f\u4f3c\u3066\u3001\u4efb\u610f\u306e\u30d5\u30a3\u30eb\u30bf\u306b\u3088\u308b\u518d\u5e30\u7684\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u53ef\u80fd\u306b\u3057\u307e\u3057\u305f\u3002\uff08\u8a73\u3057\u304f\u306f **[\u300cPHP\u3067cURL\u306e\u30af\u30bd\u4ed5\u69d8 \"@\" \u3092\u56de\u907f\u3059\u308b\u300d](http://qiita.com/mpyw/items/c2d2f9cf67072e926721)** \u3067\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\uff09\n\n# **[filter_input_simple](http://qiita.com/mpyw/items/5a7242269f51dfabc973)** \u95a2\u6570\u3068\u306e\u6bd4\u8f03\n\n|| **[filter_input_simple](http://qiita.com/mpyw/items/5a7242269f51dfabc973)** | **[filter_input_array_recursive](http://qiita.com/mpyw/items/c39b9ee695a5c2e74627)** |\n|:--:|:---:|:---:|  \n| \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9(\u521d\u56de\u30b3\u30fc\u30eb\u6642) | \u25b3 | \u25cb | \n| \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9(2\u56de\u76ee\u4ee5\u964d) | \u25ce | \u25cb |\n| \u30cd\u30b9\u30c8\u3057\u305f\u914d\u5217\u3078\u306e\u5bfe\u5fdc | \u25ce | \u25ce |\n| \u30cd\u30b9\u30c8\u3057\u305f\u4efb\u610f\u306e\u914d\u5217\u3078\u306e\u5bfe\u5fdc | \u00d7 | \u25ce |\n\n# **\u30af\u30e9\u30b9\u3068\u95a2\u6570\u306e\u5b9a\u7fa9**\n\n## **FilterObject \u30af\u30e9\u30b9**\n\n### **\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30b7\u30b0\u30cd\u30c1\u30e3**\n\n```php\npublic __construct(int $filter = FILTER_DEFAULT, mixed $options = FILTER_REQUIRE_SCALAR)\n```\n\n### **\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570**\n\n#### *$filter*\n\n**[filter_input](http://www.php.net/manual/ja/function.filter-input.php)** \u95a2\u6570\u306e\u5f15\u6570\u3068\u540c\u69d8\u3067\u3059\u3002\n\n#### *$options*\n\n**[filter_input](http://www.php.net/manual/ja/function.filter-input.php)** \u95a2\u6570\u306e\u5f15\u6570\u3068\u540c\u69d8\u3067\u3059\u3002\n\n### **\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9**\n\n```php\n/**\n * Object for filter_input_array_recursive().\n */\nclass FilterObject {\n    \n    private $filter;\n    private $options;\n    \n    /**\n     * Constructor.\n     * \n     * @param int   $filter  same as ones for filter_input().\n     * @param mixed $options same as ones for filter_input().\n     */\n    public function __construct($filter = FILTER_DEFAULT, $options = FILTER_REQUIRE_SCALAR) {\n        $this->filter  = $filter;\n        $this->options = $options;\n    }\n    \n    public function getFilter() {\n        return $this->filter;\n    }\n    \n    public function getOptions() {\n        return $this->options;\n    }\n    \n}\n```\n\n## **filter_input_array_recursive \u95a2\u6570**\n\n### **\u30b7\u30b0\u30cd\u30c1\u30e3**\n\n```php\narray filter_input_array_recursive(int $type, array $filters)\n```\n\n### **\u5f15\u6570**\n\n#### *$type*\n\n`INPUT_GET` `INPUT_POST` `INPUT_COOKIE` `INPUT_REQUEST` \u306e\u3044\u305a\u308c\u304b\u3002\n\n#### *$filters*\n\n\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306e\u8981\u7d20\u3067\u69cb\u6210\u3055\u308c\u308b\u914d\u5217\u3002\n\n```\n\"name\u5c5e\u6027\u5024\" => FilterObject\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n```\n\n- \u914d\u5217\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n- FilterObject\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4ee5\u5916\u3092\u6e21\u3057\u305f\u5834\u5408\u3001 `new FilterObject` \u3067\u751f\u6210\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n\n### **\u8fd4\u308a\u5024**\n\n\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n### **\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9**\n\n```php\n/**\n * Apply filter_input() recursively.\n * \n * @param int   $type    INPUT_GET, INPUT_POST, INPUT_COOKIE or INPUT_REQUEST.\n * @param array $filters Multi-demensional array,\n *                       which contains FilterObject for each leaf.\n * @return array\n */\nfunction filter_input_array_recursive($type, array $filters) {\n    static $recursive_static;\n    static $flag_match;\n    static $is_not_array;\n    static $filter_array;\n    static $types;\n    if (!$flag_match) {\n        /* initialize static variables */\n        $types = array(\n            INPUT_GET     => $_GET,\n            INPUT_POST    => $_POST,\n            INPUT_COOKIE  => $_COOKIE,\n            INPUT_REQUEST => $_REQUEST,\n        );\n        $flag_match = function ($v, $f) {\n            return (int)(isset($v['flags']) ? $v['flags'] : $v) & $f;\n        };\n        $is_not_array = function ($v) {\n            return !is_array($v);\n        };\n        $filter_array = function ($v) {\n            return !is_array($v) ? $v : false;\n        };\n    }\n    $recursive = $recursive_static;\n    if (!$recursive) {\n        /* only for first loop */\n        $type = (int)$type;\n        if (!isset($types[$type])) {\n            throw new \\InvalidArgumentException(\n                'unknown super global var type'\n            );\n        }\n        $var = $types[$type];\n        $recursive_static = true;\n    } else {\n        /* after first loop */\n        $var = $type;\n    }\n    $ret = array();\n    foreach ($filters as $key => $value) {\n        if (is_array($value)) {\n            // apply child filters\n            $ret[$key] = filter_input_array_recursive(\n                isset($var[$key]) ? $var[$key] : array(),\n                $value\n            );\n        } else {\n            if (!($value instanceof FilterObject)) {\n                // create default FilterObject for invalid leaf\n                $value = new FilterObject;\n            }\n            $filter = $value->getFilter();\n            $options = $value->getOptions();\n            // check if key exists...\n            // true  -> apply filter_var() with supplied filter and options\n            // false -> regard as null\n            try {\n                $ret[$key] = \n                    isset($var[$key]) ?\n                    filter_var($var[$key], $filter, $options) :\n                    null\n                ;\n            } catch (Exception $e) {\n                $recursive_static = false;\n                throw $e;\n            }\n            if ($flag_match($options, FILTER_FORCE_ARRAY | FILTER_REQUIRE_ARRAY)) {\n                // differently from filter_input(),\n                // this function prevent unexpected non-array value\n                // or multi-demensional array\n                if ($flag_match($options, FILTER_FORCE_ARRAY)) {\n                    // eliminate arrays\n                    $ret[$key] = array_filter((array)$ret[$key], $is_not_array);\n                } else {\n                    // change arrays into false\n                    $ret[$key] = array_map($filter_array, (array)$ret[$key]);\n                }\n            }\n        }\n    }\n    if (!$recursive) {\n        /* only for first loop */\n        $recursive_static = false;\n    }\n    return $ret;\n}\n```\n\n# **\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9**\n\n## **\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9**\n\n```php\n$_POST['foo']['bar']['validated_float'] = '1,234.213';\n$_POST['foo']['forced_1d_array']        = array('a', array('b'), 'c');\n$_POST['foo']['required_1d_array']      = array('a', array('b'), 'c');\n$_POST['foo']['required_scalar']        = array('a', array('b'), 'c');\n\nvar_dump(filter_input_array_recursive(INPUT_POST, array(\n    'foo' => array(\n        'bar' => array(\n            'validated_float' => new FilterObject(\n                FILTER_VALIDATE_FLOAT,\n                array(\n                    'options' => array(\n                        'min_range' => 1234,\n                        'max_range' => 1235,\n                    ),\n                    'flags' => FILTER_FLAG_ALLOW_THOUSAND,\n                )\n            ),\n        ),\n        'forced_1d_array'   => new FilterObject(FILTER_DEFAULT, FILTER_FORCE_ARRAY),\n        'required_1d_array' => new FilterObject(FILTER_DEFAULT, FILTER_REQUIRE_ARRAY),\n        'required_scalar'   => null,\n    ),\n)));\n```\n\n## **\u5b9f\u884c\u7d50\u679c**\n\n```php\narray(1) {\n  [\"foo\"]=>\n  array(4) {\n    [\"bar\"]=>\n    array(1) {\n      [\"validated_float\"]=>\n      float(1234.213)\n    }\n    [\"forced_1d_array\"]=>\n    array(2) {\n      [0]=>\n      string(1) \"a\"\n      [2]=>\n      string(1) \"c\"\n    }\n    [\"required_1d_array\"]=>\n    array(3) {\n      [0]=>\n      string(1) \"a\"\n      [1]=>\n      bool(false)\n      [2]=>\n      string(1) \"c\"\n    }\n    [\"required_scalar\"]=>\n    bool(false)\n  }\n}\n```\n\n", "tags": ["PHP5.3", "\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3"]}