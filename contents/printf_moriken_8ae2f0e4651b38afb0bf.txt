{"context": " More than 1 year has passed since last update.\n\n\u6ce2\u5f62\u304b\u3089 PeriodicWave \u3092\u4f5c\u308b\nWeb Audio API \u306b\u304a\u3044\u3066 Oscillator \u3067\u30ab\u30b9\u30bf\u30e0\u6ce2\u5f62\u3092\u4f5c\u308b\u306b\u306f PeriodicWave \u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u3092\u5272\u308a\u5f53\u3066\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nPeriodicWave \u3092\u4f5c\u308b\u306b\u306f\u500d\u97f3\u69cb\u6210\u3092\u8868\u3059 2 \u3064\u306e\u914d\u5217\u3067\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u6ce2\u5f62\u304b\u3089\u4f5c\u308b\u969b\u306f\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db(DFT)\u3092\u901a\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f DFT \u3067\u306f\u306a\u304f FFT \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u610f\u5473\u306f\u540c\u3058\u3067\u3059\u3002\n// \u6ce2\u5f62(\u3053\u3053\u3067\u306f\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b sine \u6ce2\u5f62)\nconst buffer = new Float32Array(2048);\nfor(let i=0, l=buffer.length; ++i) {\n    buffer[i] = Math.sin( Math.PI * 2 * i / 2048 );\n}\n\n// \u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3067\u500d\u97f3\u69cb\u6210\u306b\u5909\u63db\nconst fdata = fft(buffer);\n\n// PeriodicWave \u3092\u4f5c\u308b\nconst ctx = new AudioContext();\nconst periodic = ctx.createPeriodicWave(...fdata);\n\n\n// \u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u3059\u308b\u51fd\u6570\nfunction fft(input) {\n    let n = input.length, theta = 2 * Math.PI / n,\n        ar = new Float32Array(n), ai = new Float32Array(n),\n        m, mh, i, j, k, irev,\n        wr, wi, xr, xi,\n        cos = Math.cos, sin = Math.sin;\n\n    for(i=0; i<n; ++i) {\n        ar[i] = input[i];\n    }\n\n    // scrambler\n    i=0;\n    for(j=1; j<n-1; ++j) {\n        for(k = n>>1; k>(i ^= k); k>>=1);\n        if(j<i) {\n            xr = ar[j];\n            xi = ai[j];\n            ar[j] = ar[i];\n            ai[j] = ai[i];\n            ar[i] = xr;\n            ai[i] = xi;\n        }\n    }\n    for(mh=1; (m = mh << 1) <= n; mh=m) {\n        irev = 0;\n        for(i=0; i<n; i+=m) {\n            wr = cos(theta * irev);\n            wi = sin(theta * irev);\n            for(k=n>>2; k > (irev ^= k); k>>=1);\n            for(j=i; j<mh+i; ++j) {\n                k = j + mh;\n                xr = ar[j] - ar[k];\n                xi = ai[j] - ai[k];\n                ar[j] += ar[k];\n                ai[j] += ai[k];\n                ar[k] = wr * xr - wi * xi;\n                ai[k] = wr * xi + wi * xr;\n            }\n        }\n    }\n\n    // remove DC offset\n    ar[0] = ai[0] = 0;\n\n    return [ar, ai];\n}\n\n// 3\u79d2\u9593\u518d\u751f\u3059\u308b\u51fd\u6570\nfunction play() {\n    const osc = ctx.createOscillator();\n    osc.setPeriodicWave(periodic);\n    osc.connect(ctx.destination);\n\n    osc.start(ctx.currentTime);\n    osc.stop(ctx.currentTime + 3.0);\n}\n\n(FFT \u306e\u30b3\u30fc\u30c9\u306f http://www.kuma-de.com/blog/2008-08-31/82 \u3092\u53c2\u8003)\n\n\u97f3\u91cf\u306e\u554f\u984c\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u4f7f\u3044 PeriodicWave \u3092\u4f5c\u3063\u3066\u5272\u308a\u5f53\u3066\u305f Oscillator \u3068\u3001\u5143\u306e\u6ce2\u5f62\u3092 SourceBuffer \u3092\u4f7f\u3063\u3066\u518d\u751f\u3057\u305f\u5834\u5408\u3068\u3067\u306f\u97f3\u91cf\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f PeriodicWave \u306e Wave Generation \u304c\nx(t) = \\sum_{k=1}^{L-1} \\left(a[k]\\cos2\\pi k t + b[k]\\sin2\\pi k t\\right)\n\n(http://webaudio.github.io/web-audio-api/#waveform-generation \u3088\u308a\u5f15\u7528)\n\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u632f\u5e45\u306e\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3068\u97f3\u91cf\u306e\u95a2\u4fc2\u6027\u306b\u3064\u3044\u3066\u306e\u898f\u5b9a\u304c\u306a\u3044\u305f\u3081\u3001\u5404\u30d6\u30e9\u30a6\u30b6\u306e\u5b9f\u88c5\u4f9d\u5b58\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u307e\u305f\u3082\u3046 1 \u3064\u306e\u8981\u56e0\u3068\u3057\u3066 PeriodicWave \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6a19\u6e96\u5316\u3092\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u3082\u97f3\u91cf\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u307e\u3059\u3002\u307e\u305a\u9006\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3067\u5143\u306e\u6ce2\u5f62\u306e\u5f62\u306b\u3057\u3001\u305d\u3057\u3066\u305d\u306e\u6700\u5927\u5024\u3067\u5272\u308b\u3053\u3068\u3067\u6a19\u6e96\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\\tilde{x}(n) = \\sum_{k=1}^{L-1} \\left(a[k]\\cos\\frac{2\\pi k n}{N} + b[k]\\sin\\frac{2\\pi k n}{N}\\right) \\\\\\\nf = \\max_{n = 0, \\ldots, N - 1} |\\tilde{x}(n)| \\\\\\\n\\hat{x}(n) = \\frac{\\tilde{x}(n)}{f}\n\n(http://webaudio.github.io/web-audio-api/#waveform-normalization \u3088\u308a\u5f15\u7528)\n\u3088\u3063\u3066 Oscillator \u306e\u97f3\u91cf\u3092 BufferSource \u306b\u5408\u308f\u305b\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3059\u3002\n\n2\u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\n\u89e3\u6c7a\u3059\u308b\u306b\u306f\u5b9f\u9a13\u3068\u691c\u8a3c\u3092\u7e70\u308a\u8fd4\u3059\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u7d50\u679c\u4ee5\u4e0b\u306e 2 \u3064\u306e\u65b9\u6cd5\u304c\u305d\u308c\u3063\u307d\u3044\u97f3\u91cf\u306b\u306a\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\ndisableNormalization \u30d5\u30e9\u30b0\u3092\u4f7f\u3046\u5834\u5408\n\u6700\u65b0\u306e Web Audio API \u306e\u4ed5\u69d8\u3067\u306f PeriodicWave \u306e\u6a19\u6e96\u5316\u3092\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u4eca\u306e\u30d6\u30e9\u30a6\u30b6\u3060\u3068 Google Chrome Canary \u3067\u8a66\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nctx.createPeriodicWave(real, imag, {disableNormalization: true});\n\n\u3053\u306e\u3068\u304d\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u306e\u6b63\u898f\u5316\u4fc2\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b 2/N \u306b\u3059\u308b\u3068\u97f3\u91cf\u304c\u5408\u3044\u307e\u3059\u3002\n\nfft.js\n// \u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u3059\u308b\u51fd\u6570 (2/N\u500d\u3057\u3066\u3044\u308b)\nfunction fft(input) {\n    let n = input.length, theta = 2 * Math.PI / n,\n        ar = new Float32Array(n), ai = new Float32Array(n),\n        m, mh, i, j, k, irev,\n        wr, wi, xr, xi,\n        cos = Math.cos, sin = Math.sin;\n\n    for(i=0; i<n; ++i) {\n        ar[i] = input[i];\n    }\n\n    // scrambler\n    i=0;\n    for(j=1; j<n-1; ++j) {\n        for(k = n>>1; k>(i ^= k); k>>=1);\n        if(j<i) {\n            xr = ar[j];\n            xi = ai[j];\n            ar[j] = ar[i];\n            ai[j] = ai[i];\n            ar[i] = xr;\n            ai[i] = xi;\n        }\n    }\n    for(mh=1; (m = mh << 1) <= n; mh=m) {\n        irev = 0;\n        for(i=0; i<n; i+=m) {\n            wr = cos(theta * irev);\n            wi = sin(theta * irev);\n            for(k=n>>2; k > (irev ^= k); k>>=1);\n            for(j=i; j<mh+i; ++j) {\n                k = j + mh;\n                xr = ar[j] - ar[k];\n                xi = ai[j] - ai[k];\n                ar[j] += ar[k];\n                ai[j] += ai[k];\n                ar[k] = wr * xr - wi * xi;\n                ai[k] = wr * xi + wi * xr;\n            }\n        }\n    }\n\n    // remove DC offset\n    ar[0] = ai[0] = 0;\n\n    // *** \u8ffd\u52a0 ***\n    for(i=0; i<n; ++i) {\n        ar[i] *= 2 / n;\n        ai[i] *= 2 / n;\n    }\n\n    return [ar, ai];\n}\n\n\n\nGain \u3092\u4f7f\u3046\u65b9\u6cd5\n\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3059\u308b\u524d\u306e\u6ce2\u5f62\u306e\u632f\u5e45\u306e 2 \u500d\u306e\u5024\u3092\u5272\u308a\u5f53\u3066\u305f Gain \u3092 Oscillator \u306b\u7e4b\u3052\u308b\u3084\u308a\u65b9\u3067\u3059\u3002 \n\u3053\u306e\u65b9\u6cd5\u3060\u3068 disableNormalization \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u30d6\u30e9\u30a6\u30b6\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\n// \u6ce2\u5f62\u306e\u632f\u5e45\u3092\u5f97\u308b\nlet amplitude = 0;\nfor(let i=0, temp; i<buffer.length; ++i) {\n    temp = Math.abs(buffer[i]);\n    if(temp > amplitude)    amplitude = temp;\n}\n\n// 3\u79d2\u9593\u518d\u751f\u3059\u308b\u51fd\u6570\nfunction Play() {\n    const osc = ctx.createOscillator(), gainNode = ctx.createGain();\n    osc.setPeriodicWave(periodic);\n    osc.connect(gainNode);\n\n    gainNode.gain.value = 2 * amplitude;\n    gainNode.connect(ctx.destination);\n\n    osc.start(ctx.currentTime);\n    osc.stop(ctx.currentTime + 3.0);\n}\n\n\n2\u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u306e\u7b49\u4fa1\u6027\nGain \u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u898b\u3066\u3082\u3089\u3046\u3068\u5510\u7a81\u306b\u6ce2\u5f62\u3092 2 \u500d\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e 2 \u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u306f\u7b49\u4fa1\u3067\u3059\u3002\n\u5143\u306e\u6ce2\u5f62\u306e\u914d\u5217\uff08\u6570\u5217\uff09\u3092 A[n] \u3068\u5b9a\u7fa9\u3059\u308b\u3068\u3001Gain \u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u5f97\u305f amplitude \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\namplitude := \\max_{n = 0, \\ldots, N - 1} | \\ A[n] \\ | \\ \\cdots \\! \\cdots (1)\n\n\u4e00\u65b9\u3067 disableNormalization \u30d5\u30e9\u30b0\u3092\u4f7f\u3046\u65b9\u6cd5\u306b\u304a\u3044\u3066\u3001\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u306e\u6b63\u898f\u5316\u4fc2\u6570\u306f 2/N \u3067\u3001\u97f3\u91cf\u306e\u554f\u984c\u3067\u6307\u6458\u3057\u305f\u3088\u3046\u306b PeriodicWave \u306e\u6a19\u6e96\u5316\u3067\u4f7f\u308f\u308c\u308b\u9006\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3067\u306f\u6b63\u898f\u5316\u4fc2\u6570\u304c 1 \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3088\u3063\u3066\u6ce2\u5f62\u3092\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db FN\u3001\u9006\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db FN-1 \u306b\u9806\u306b\u9069\u7528\u3055\u305b\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305f\u3060\u3057\u5358\u7d14\u306b\u6ce2\u5f62\u3092\u9806\u306b\u9069\u7528\u3055\u305b\u305f\u5834\u5408\u3001\u6ce2\u5f62\u306b N \u3092\u304b\u3051\u305f\u3053\u3068\u3068\u6052\u7b49\u7684\u306b\u7b49\u3057\u3044\u3053\u3068\u3068\u3001\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3001\u9006\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u306f\u6ce2\u5f62\u3092\u4f4e\u6570\u500d\u3057\u305f\u6642\u3001\u305d\u306e\u5b9a\u6570\u3092\u5916\u306b\u3060\u305b\u308b\u3053\u3068\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\\begin{eqnarray}\nF_N^{-1} ( \\ F_N ( \\ A[n] \\ ) \\ ) &=& N \\cdot 1 \\cdot \\frac{2}{N} A[n] \\\\\n                                  &=& 2 \\ A[n]\n\\end{eqnarray}\n\n\u5f93\u3063\u3066\u3001\u3053\u306e\u6642\u306e\u6ce2\u5f62\u306e\u632f\u5e45 f \u306f\n\\begin{eqnarray}\nf &=& \\max_{n = 0, \\ldots, N - 1} | \\ 2 \\ A[n] \\ | \\\\\n  &=& 2 \\cdot \\max_{n = 0, \\ldots, N - 1} | \\ A[n] \\ | \\ \\cdots \\! \\cdots (2)\n\\end{eqnarray}\n\n(1), (2) \u3088\u308a\nf = 2 \\cdot amplitude\n\n\u3088\u3063\u3066 Gain \u3092\u4f7f\u3046\u65b9\u6cd5\u306f disableNormalization \u30d5\u30e9\u30b0\u3092\u4f7f\u3046\u65b9\u6cd5\u306b\u5bfe\u3057\u3066\u3001\u6ce2\u5f62\u306e\u632f\u5e45\u3092\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u97f3\u91cf\u3092\u540c\u3058\u306b\u3057\u3066\u3044\u308b\u3068\u8a00\u3048\u308b\u306e\u3067\u30012 \u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u306f\u7b49\u4fa1\u3067\u3059\u3002\n\n\u95a2\u9023\u30ea\u30f3\u30af\njsdo.it \u306b\u66f8\u3044\u305f\u5b9f\u9a13\u3001\u691c\u8a3c\u7528\u30b3\u30fc\u30c9\nhttp://jsdo.it/Moriken/sfDX/\nStack Overflow \u306b\u6295\u7a3f\u3057\u305f\u8cea\u554f\nhttp://stackoverflow.com/questions/32402804/play-buffer-by-periodicwave-in-web-audio-api-can-i-set-gain-as-loud-as-buffer\n# \u6ce2\u5f62\u304b\u3089 PeriodicWave \u3092\u4f5c\u308b\n\nWeb Audio API \u306b\u304a\u3044\u3066 Oscillator \u3067\u30ab\u30b9\u30bf\u30e0\u6ce2\u5f62\u3092\u4f5c\u308b\u306b\u306f PeriodicWave \u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u3092\u5272\u308a\u5f53\u3066\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nPeriodicWave \u3092\u4f5c\u308b\u306b\u306f\u500d\u97f3\u69cb\u6210\u3092\u8868\u3059 2 \u3064\u306e\u914d\u5217\u3067\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u6ce2\u5f62\u304b\u3089\u4f5c\u308b\u969b\u306f\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db(DFT)\u3092\u901a\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f DFT \u3067\u306f\u306a\u304f FFT \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u610f\u5473\u306f\u540c\u3058\u3067\u3059\u3002\n\n```js\n// \u6ce2\u5f62(\u3053\u3053\u3067\u306f\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b sine \u6ce2\u5f62)\nconst buffer = new Float32Array(2048);\nfor(let i=0, l=buffer.length; ++i) {\n    buffer[i] = Math.sin( Math.PI * 2 * i / 2048 );\n}\n\n// \u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3067\u500d\u97f3\u69cb\u6210\u306b\u5909\u63db\nconst fdata = fft(buffer);\n\n// PeriodicWave \u3092\u4f5c\u308b\nconst ctx = new AudioContext();\nconst periodic = ctx.createPeriodicWave(...fdata);\n\n\n// \u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u3059\u308b\u51fd\u6570\nfunction fft(input) {\n    let n = input.length, theta = 2 * Math.PI / n,\n        ar = new Float32Array(n), ai = new Float32Array(n),\n        m, mh, i, j, k, irev,\n        wr, wi, xr, xi,\n        cos = Math.cos, sin = Math.sin;\n\n    for(i=0; i<n; ++i) {\n        ar[i] = input[i];\n    }\n\n    // scrambler\n    i=0;\n    for(j=1; j<n-1; ++j) {\n        for(k = n>>1; k>(i ^= k); k>>=1);\n        if(j<i) {\n            xr = ar[j];\n            xi = ai[j];\n            ar[j] = ar[i];\n            ai[j] = ai[i];\n            ar[i] = xr;\n            ai[i] = xi;\n        }\n    }\n    for(mh=1; (m = mh << 1) <= n; mh=m) {\n        irev = 0;\n        for(i=0; i<n; i+=m) {\n            wr = cos(theta * irev);\n            wi = sin(theta * irev);\n            for(k=n>>2; k > (irev ^= k); k>>=1);\n            for(j=i; j<mh+i; ++j) {\n                k = j + mh;\n                xr = ar[j] - ar[k];\n                xi = ai[j] - ai[k];\n                ar[j] += ar[k];\n                ai[j] += ai[k];\n                ar[k] = wr * xr - wi * xi;\n                ai[k] = wr * xi + wi * xr;\n            }\n        }\n    }\n    \n    // remove DC offset\n    ar[0] = ai[0] = 0;\n        \n    return [ar, ai];\n}\n\n// 3\u79d2\u9593\u518d\u751f\u3059\u308b\u51fd\u6570\nfunction play() {\n\tconst osc = ctx.createOscillator();\n\tosc.setPeriodicWave(periodic);\n\tosc.connect(ctx.destination);\n\n\tosc.start(ctx.currentTime);\n\tosc.stop(ctx.currentTime + 3.0);\n}\n```\n\n(FFT \u306e\u30b3\u30fc\u30c9\u306f http://www.kuma-de.com/blog/2008-08-31/82 \u3092\u53c2\u8003)\n\n# \u97f3\u91cf\u306e\u554f\u984c\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u4f7f\u3044 PeriodicWave \u3092\u4f5c\u3063\u3066\u5272\u308a\u5f53\u3066\u305f Oscillator \u3068\u3001\u5143\u306e\u6ce2\u5f62\u3092 SourceBuffer \u3092\u4f7f\u3063\u3066\u518d\u751f\u3057\u305f\u5834\u5408\u3068\u3067\u306f\u97f3\u91cf\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f PeriodicWave \u306e Wave Generation \u304c\n\n```math\nx(t) = \\sum_{k=1}^{L-1} \\left(a[k]\\cos2\\pi k t + b[k]\\sin2\\pi k t\\right)\n```\n(http://webaudio.github.io/web-audio-api/#waveform-generation \u3088\u308a\u5f15\u7528)\n\n\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u632f\u5e45\u306e\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3068\u97f3\u91cf\u306e\u95a2\u4fc2\u6027\u306b\u3064\u3044\u3066\u306e\u898f\u5b9a\u304c\u306a\u3044\u305f\u3081\u3001\u5404\u30d6\u30e9\u30a6\u30b6\u306e\u5b9f\u88c5\u4f9d\u5b58\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u307e\u305f\u3082\u3046 1 \u3064\u306e\u8981\u56e0\u3068\u3057\u3066 PeriodicWave \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6a19\u6e96\u5316\u3092\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u3082\u97f3\u91cf\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u307e\u3059\u3002\u307e\u305a\u9006\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3067\u5143\u306e\u6ce2\u5f62\u306e\u5f62\u306b\u3057\u3001\u305d\u3057\u3066\u305d\u306e\u6700\u5927\u5024\u3067\u5272\u308b\u3053\u3068\u3067\u6a19\u6e96\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n```math\n\\tilde{x}(n) = \\sum_{k=1}^{L-1} \\left(a[k]\\cos\\frac{2\\pi k n}{N} + b[k]\\sin\\frac{2\\pi k n}{N}\\right) \\\\\\\nf = \\max_{n = 0, \\ldots, N - 1} |\\tilde{x}(n)| \\\\\\\n\\hat{x}(n) = \\frac{\\tilde{x}(n)}{f}\n```\n(http://webaudio.github.io/web-audio-api/#waveform-normalization \u3088\u308a\u5f15\u7528)\n\n\u3088\u3063\u3066 Oscillator \u306e\u97f3\u91cf\u3092 BufferSource \u306b\u5408\u308f\u305b\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3059\u3002\n\n# 2\u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\n\n\u89e3\u6c7a\u3059\u308b\u306b\u306f\u5b9f\u9a13\u3068\u691c\u8a3c\u3092\u7e70\u308a\u8fd4\u3059\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u7d50\u679c\u4ee5\u4e0b\u306e 2 \u3064\u306e\u65b9\u6cd5\u304c\u305d\u308c\u3063\u307d\u3044\u97f3\u91cf\u306b\u306a\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n## disableNormalization \u30d5\u30e9\u30b0\u3092\u4f7f\u3046\u5834\u5408\n\n\u6700\u65b0\u306e Web Audio API \u306e\u4ed5\u69d8\u3067\u306f PeriodicWave \u306e\u6a19\u6e96\u5316\u3092\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u4eca\u306e\u30d6\u30e9\u30a6\u30b6\u3060\u3068 Google Chrome Canary \u3067\u8a66\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```js\nctx.createPeriodicWave(real, imag, {disableNormalization: true});\n```\n\n\u3053\u306e\u3068\u304d\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u306e\u6b63\u898f\u5316\u4fc2\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b 2/N \u306b\u3059\u308b\u3068\u97f3\u91cf\u304c\u5408\u3044\u307e\u3059\u3002\n\n```js:fft.js\n// \u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u3059\u308b\u51fd\u6570 (2/N\u500d\u3057\u3066\u3044\u308b)\nfunction fft(input) {\n    let n = input.length, theta = 2 * Math.PI / n,\n        ar = new Float32Array(n), ai = new Float32Array(n),\n        m, mh, i, j, k, irev,\n        wr, wi, xr, xi,\n        cos = Math.cos, sin = Math.sin;\n\n    for(i=0; i<n; ++i) {\n        ar[i] = input[i];\n    }\n\n    // scrambler\n    i=0;\n    for(j=1; j<n-1; ++j) {\n        for(k = n>>1; k>(i ^= k); k>>=1);\n        if(j<i) {\n            xr = ar[j];\n            xi = ai[j];\n            ar[j] = ar[i];\n            ai[j] = ai[i];\n            ar[i] = xr;\n            ai[i] = xi;\n        }\n    }\n    for(mh=1; (m = mh << 1) <= n; mh=m) {\n        irev = 0;\n        for(i=0; i<n; i+=m) {\n            wr = cos(theta * irev);\n            wi = sin(theta * irev);\n            for(k=n>>2; k > (irev ^= k); k>>=1);\n            for(j=i; j<mh+i; ++j) {\n                k = j + mh;\n                xr = ar[j] - ar[k];\n                xi = ai[j] - ai[k];\n                ar[j] += ar[k];\n                ai[j] += ai[k];\n                ar[k] = wr * xr - wi * xi;\n                ai[k] = wr * xi + wi * xr;\n            }\n        }\n    }\n    \n    // remove DC offset\n    ar[0] = ai[0] = 0;\n    \n    // *** \u8ffd\u52a0 ***\n    for(i=0; i<n; ++i) {\n        ar[i] *= 2 / n;\n        ai[i] *= 2 / n;\n    }\n    \n    return [ar, ai];\n}\n```\n\n## Gain \u3092\u4f7f\u3046\u65b9\u6cd5\n\n\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3059\u308b\u524d\u306e\u6ce2\u5f62\u306e\u632f\u5e45\u306e 2 \u500d\u306e\u5024\u3092\u5272\u308a\u5f53\u3066\u305f Gain \u3092 Oscillator \u306b\u7e4b\u3052\u308b\u3084\u308a\u65b9\u3067\u3059\u3002 \n\u3053\u306e\u65b9\u6cd5\u3060\u3068 disableNormalization \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u30d6\u30e9\u30a6\u30b6\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\n\n```js\n// \u6ce2\u5f62\u306e\u632f\u5e45\u3092\u5f97\u308b\nlet amplitude = 0;\nfor(let i=0, temp; i<buffer.length; ++i) {\n\ttemp = Math.abs(buffer[i]);\n\tif(temp > amplitude)\tamplitude = temp;\n}\n\n// 3\u79d2\u9593\u518d\u751f\u3059\u308b\u51fd\u6570\nfunction Play() {\n\tconst osc = ctx.createOscillator(), gainNode = ctx.createGain();\n\tosc.setPeriodicWave(periodic);\n\tosc.connect(gainNode);\n\n\tgainNode.gain.value = 2 * amplitude;\n\tgainNode.connect(ctx.destination);\n\n\tosc.start(ctx.currentTime);\n\tosc.stop(ctx.currentTime + 3.0);\n}\n```\n\n## 2\u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u306e\u7b49\u4fa1\u6027\n\nGain \u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u898b\u3066\u3082\u3089\u3046\u3068\u5510\u7a81\u306b\u6ce2\u5f62\u3092 2 \u500d\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e 2 \u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u306f\u7b49\u4fa1\u3067\u3059\u3002\n\n\u5143\u306e\u6ce2\u5f62\u306e\u914d\u5217\uff08\u6570\u5217\uff09\u3092 A[n] \u3068\u5b9a\u7fa9\u3059\u308b\u3068\u3001Gain \u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u5f97\u305f amplitude \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n```math\namplitude := \\max_{n = 0, \\ldots, N - 1} | \\ A[n] \\ | \\ \\cdots \\! \\cdots (1)\n```\n\n\u4e00\u65b9\u3067 disableNormalization \u30d5\u30e9\u30b0\u3092\u4f7f\u3046\u65b9\u6cd5\u306b\u304a\u3044\u3066\u3001\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u306e\u6b63\u898f\u5316\u4fc2\u6570\u306f 2/N \u3067\u3001\u97f3\u91cf\u306e\u554f\u984c\u3067\u6307\u6458\u3057\u305f\u3088\u3046\u306b PeriodicWave \u306e\u6a19\u6e96\u5316\u3067\u4f7f\u308f\u308c\u308b\u9006\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3067\u306f\u6b63\u898f\u5316\u4fc2\u6570\u304c 1 \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3088\u3063\u3066\u6ce2\u5f62\u3092\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db F<sub>N</sub>\u3001\u9006\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db F<sub>N</sub><sup>-1</sup> \u306b\u9806\u306b\u9069\u7528\u3055\u305b\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305f\u3060\u3057\u5358\u7d14\u306b\u6ce2\u5f62\u3092\u9806\u306b\u9069\u7528\u3055\u305b\u305f\u5834\u5408\u3001\u6ce2\u5f62\u306b N \u3092\u304b\u3051\u305f\u3053\u3068\u3068\u6052\u7b49\u7684\u306b\u7b49\u3057\u3044\u3053\u3068\u3068\u3001\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3001\u9006\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u306f\u6ce2\u5f62\u3092\u4f4e\u6570\u500d\u3057\u305f\u6642\u3001\u305d\u306e\u5b9a\u6570\u3092\u5916\u306b\u3060\u305b\u308b\u3053\u3068\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```math\n\\begin{eqnarray}\nF_N^{-1} ( \\ F_N ( \\ A[n] \\ ) \\ ) &=& N \\cdot 1 \\cdot \\frac{2}{N} A[n] \\\\\n                                  &=& 2 \\ A[n]\n\\end{eqnarray}\n```\n\n\u5f93\u3063\u3066\u3001\u3053\u306e\u6642\u306e\u6ce2\u5f62\u306e\u632f\u5e45 f \u306f\n\n```math\n\\begin{eqnarray}\nf &=& \\max_{n = 0, \\ldots, N - 1} | \\ 2 \\ A[n] \\ | \\\\\n  &=& 2 \\cdot \\max_{n = 0, \\ldots, N - 1} | \\ A[n] \\ | \\ \\cdots \\! \\cdots (2)\n\\end{eqnarray}\n```\n\n(1), (2) \u3088\u308a\n\n```math\nf = 2 \\cdot amplitude\n```\n\n\u3088\u3063\u3066 Gain \u3092\u4f7f\u3046\u65b9\u6cd5\u306f disableNormalization \u30d5\u30e9\u30b0\u3092\u4f7f\u3046\u65b9\u6cd5\u306b\u5bfe\u3057\u3066\u3001\u6ce2\u5f62\u306e\u632f\u5e45\u3092\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u97f3\u91cf\u3092\u540c\u3058\u306b\u3057\u3066\u3044\u308b\u3068\u8a00\u3048\u308b\u306e\u3067\u30012 \u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u306f\u7b49\u4fa1\u3067\u3059\u3002\n\n# \u95a2\u9023\u30ea\u30f3\u30af\n\njsdo.it \u306b\u66f8\u3044\u305f\u5b9f\u9a13\u3001\u691c\u8a3c\u7528\u30b3\u30fc\u30c9\nhttp://jsdo.it/Moriken/sfDX/\n\nStack Overflow \u306b\u6295\u7a3f\u3057\u305f\u8cea\u554f\nhttp://stackoverflow.com/questions/32402804/play-buffer-by-periodicwave-in-web-audio-api-can-i-set-gain-as-loud-as-buffer\n", "tags": ["JavaScript", "WebAudioAPI"]}