{"context": " More than 1 year has passed since last update.\n\n\u554f\u984c\nTCP\u3092\u7528\u3044\u305f\u30b5\u30fc\u30d0\u3092\u4f5c\u308b\u5834\u5408\u3001listen()\u3059\u308b\u30bd\u30b1\u30c3\u30c8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u9001\u53d7\u4fe1\u3092\u884c\u3046\u30bd\u30b1\u30c3\u30c8\u306f\u5225\u306b\u51fa\u6765\u308b\u3002\n\u305d\u306e\u70ba\u3001epoll\u3084libev, libuv\u306a\u3069\u3092\u7528\u3044\u308c\u3070\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u305f\u69cb\u9020\u4f53\u306e\u30ea\u30b9\u30c8\u306a\u3069\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u60c5\u5831\u306b\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u304c\u53ef\u80fd\u3060\u3002\n\u3057\u304b\u3057UDP\u306e\u30b5\u30fc\u30d0\u3092\u4f5c\u308b\u5834\u5408\u3001\u30cd\u30c3\u30c8\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u308b\u3068listen()\u3068\u3044\u3046\u304b\u5f85\u3061\u53d7\u3051\u308b\u30bd\u30b1\u30c3\u30c8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u9001\u53d7\u4fe1\u3092\u884c\u3046\u30bd\u30b1\u30c3\u30c8\u304c\u540c\u3058\u3082\u306e\u3057\u304b\u51fa\u3066\u3053\u306a\u3044\u3002\n\u3053\u306e\u5834\u5408\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u305f\u69cb\u9020\u4f53\u306e\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3057\u3001\u4f55\u304b\u53d7\u4fe1\u3059\u308b\u305f\u3073\u306b\u3069\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u53d7\u4fe1\u3057\u305f\u306e\u304b\u3092\u30ea\u30b9\u30c8\u304b\u3089\u63a2\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u30ea\u30b9\u30c8\u3092\u5168\u90e8\u63a2\u3057\u3066\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u3060\u3051\u3001\u65b0\u898f\u306e\u901a\u4fe1\u3060\u3068\u8a8d\u8b58\u51fa\u6765\u308b\u3002\n\u52b9\u7387\u304c\u60aa\u3044\u3053\u3068\u3053\u306e\u4e0a\u306a\u3044\u3002\n\n\u89e3\u6c7a\u65b9\u6cd5\nconnect() system call\u306f\u3001\u5b9f\u306fUDP\u306b\u3082\u4f7f\u3048\u308b\u3002\n\u826f\u304f\u3042\u308b\u306e\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u4f8b\u3060\u3002\nUDP\u3060\u3051\u308c\u3069\u3082\u4e00\u304b\u6240\u3057\u304b\u901a\u4fe1\u3057\u306a\u3044\u5834\u5408\u3001connect()\u3092\u4f7f\u3046\u3053\u3068\u3067\u901a\u4fe1\u5148\u3092\u675f\u7e1b\u3057\u3001\u305d\u306e\u5f8c\u306e\u901a\u4fe1\u3067\u306fsend()\u3084recv()\u306a\u3069\u306e\u5b9b\u5148\u3092\u6307\u5b9a\u3057\u306a\u3044\u30bf\u30a4\u30d7\u306esystem call\u3092\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\u305d\u3057\u3066\u3053\u306econnect()\u306f\u3055\u3089\u306b\u30b5\u30fc\u30d0\u5074\u3067\u4f7f\u3046\u3068\u3001TCP\u306e\u30b5\u30fc\u30d0\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u3053\u3068\u304c\u53ef\u80fd\u306a\u306e\u3060\u3002\n\nTCP\u306elisten()\u306b\u76f8\u5f53\u3059\u308b\u30bd\u30b1\u30c3\u30c8\u3067bind()\u3057\u3066recvfrom()\u3092\u3057\u3066\u5f85\u3064\u3002\nrecvfrom()\u3057\u305f\u3089\u3001\u65b0\u305f\u306b\u30bd\u30b1\u30c3\u30c8\u3092socket()\u3067\u751f\u6210\u3059\u308b\u3002\n\u65b0\u305f\u306a\u30bd\u30b1\u30c3\u30c8\u306b\u3001listen()\u3057\u3066\u3044\u308b\u30bd\u30b1\u30c3\u30c8\u3068\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u3092bind()\u3059\u308b\u3002\n\u3055\u3089\u306brecvfrom()\u3057\u3066\u53d6\u5f97\u3057\u305f\u76f8\u624b\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u3057\u3001connect()\u3059\u308b\u3002\n\u3042\u3068\u306fTCP\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u65b0\u305f\u306a\u30bd\u30b1\u30c3\u30c8\u306b\u5bfe\u3057send()/recv()\u306a\u3069\u3067\u9001\u53d7\u4fe1\u3092\u884c\u3046\u3002\n\n\u65b0\u3057\u3044\u30bd\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3057\u3066bind()\u3057\u3001connect()\u3059\u308b\u3060\u3051\u3067TCP\u306e\u30b5\u30fc\u30d0\u3068\u540c\u3058\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u306e\u3060\u3002\n\u305f\u3060\u3057\u3001\u3059\u3079\u3066\u306e\u30bd\u30b1\u30c3\u30c8\u3067\nconst int on = 1;\nsetsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (const void*)&on, (socklen_t)sizeof(on));\n\n\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u9069\u7528\u4f8b\nUDP\u30b5\u30fc\u30d0\u306e\u826f\u304f\u3042\u308b\u4f8b\u306e\u4e00\u3064\u3067\u3042\u308becho\u30b5\u30fc\u30d0\u306e\u3088\u3046\u306b1\u30ea\u30af\u30a8\u30b9\u30c81\u30ec\u30b9\u30dd\u30f3\u30b9\u3067\u51e6\u7406\u304c\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u3082\u306e\u306b\u306f\u3053\u306e\u5b9f\u88c5\u306f\u3042\u307e\u308a\u5fc5\u8981\u304c\u306a\u3044\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u4f55\u56de\u304b\u9001\u53d7\u4fe1\u3092\u884c\u3044\u3001\u307e\u305f\u540c\u6642\u306b\u8907\u6570\u306e\u63a5\u7d9a\u5148\u3068\u901a\u4fe1\u304c\u767a\u751f\u3059\u308b\u3088\u3046\u306a\u72b6\u6cc1\u3067\u5a01\u529b\u3092\u767a\u63ee\u3059\u308b\u3002\nOpenVPN\u306e\u3088\u3046\u306aVPN\u30b5\u30fc\u30d0\u306b\u4f7f\u3063\u305f\u308a\u3001MQTT\u306e\u30b5\u30fc\u30d0\u306b\u4f7f\u3063\u305f\u308a\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\nserver.c\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <sys/select.h>\n#include <errno.h>\n\nint accept_handle(int cfd, struct sockaddr_in *local)\n{\n    struct sockaddr_in remote;\n    socklen_t remote_len;\n    char buff[128];\n    int fd;\n    int err;\n    const int on = 1, off = 0;\n\n    remote_len = sizeof(remote);\n    err = recvfrom(cfd, buff, sizeof(buff), 0, (struct sockaddr *)&remote, &remote_len);\n    if (err < 0) {\n        goto out;\n    }\n\n    fd = socket(AF_INET, SOCK_DGRAM, 0);\n    if (fd < 0) {\n        goto out;\n    }\n\n    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (const void*)&on, (socklen_t)sizeof(on));\n\n    err = bind(fd, (struct sockaddr *)local, sizeof(*local));\n    if (err != 0) {\n        goto out;\n    }\n\n    err = connect(fd, (struct sockaddr *)&remote, remote_len);\n    if (err != 0) {\n        goto out;\n    }\n\n    printf(\"accepted connection from fd=%d %s:%d\\n\", fd, inet_ntop(AF_INET, &remote.sin_addr, buff, INET6_ADDRSTRLEN), ntohs(remote.sin_port));\n\n    send(fd, buff, sizeof(buff), 0);\n\n    return fd;\n\nout:\n    printf(\"%s(): error occurred errno=%d\\n\", __func__, errno);\n    return -1;\n}\n\nint main(void)\n{\n    int err;\n    struct sockaddr_in local;\n    struct sockaddr_in remote;\n    socklen_t remote_len;\n    int fd;\n    fd_set rfds;\n    int fds[10] = { -1 };\n    size_t i = 0;\n    const int on = 1, off = 0;\n    size_t loop_max = sizeof(fds) / sizeof(fds[0]);\n    int maxfd = -1;\n    char buff[128];\n\n    fd = socket(AF_INET, SOCK_DGRAM, 0);\n    if (fd < 0) {\n        goto out;\n    }\n\n    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (const void*)&on, (socklen_t)sizeof(on));\n\n    inet_pton(AF_INET, \"0.0.0.0\", &local.sin_addr);\n    local.sin_port = htons(28385);\n\n    err = bind(fd, (struct sockaddr *)&local, sizeof(local));\n    if (err != 0) {\n        goto out;\n    }\n\n    for (i = 0; i < loop_max; ++i) {\n        fds[i] = -1;\n    }\n    while (1) {\n        maxfd = fd;\n        FD_ZERO(&rfds);\n        FD_SET(fd, &rfds);\n        for (i = 0; i < loop_max; ++i) {\n            if (fds[i] != -1) {\n                FD_SET(fds[i], &rfds);\n                if (maxfd < fds[i]) {\n                    maxfd = fds[i];\n                }\n            }\n        }\n        err = select(maxfd + 1, &rfds, NULL, NULL, NULL);\n        if (err < 0) {\n            goto out;\n        }\n        for (i = 0; i < loop_max; ++i) {\n            if (fds[i] != -1 && FD_ISSET(fds[i], &rfds)) {\n                remote_len = sizeof(remote);\n                err = recv(fds[i], buff, sizeof(buff), 0);\n                if (err < 0) {\n                    printf(\"close from %d\\n\", fds[i]);\n                    fds[i] = -1;\n                }\n                else {\n                    printf(\"recvfrom %d\\n\", fds[i]);\n                    send(fds[i], buff, sizeof(buff), 0);\n                }\n            }\n        }\n        if (FD_ISSET(fd, &rfds)) {\n            for (i = 0; i < loop_max; ++i) {\n                if (fds[i] == -1) {\n                    fds[i] = accept_handle(fd, &local);\n                    break;\n                }\n            }\n        }\n    }\n\n    return 0;\n\nout:\n    return -1;\n}\n\n\n\nclient.c\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <sys/select.h>\n\nint main(void)\n{\n    int err;\n    struct sockaddr_in remote;\n    socklen_t remote_len;\n    int fd;\n    fd_set rfds;\n    int fds[10] = { -1 };\n    size_t i = 0;\n    const int on = 1, off = 0;\n    size_t loop_max = sizeof(fds) / sizeof(fds[0]);\n    int maxfd = -1;\n    char buff[128];\n\n    fd = socket(AF_INET, SOCK_DGRAM, 0);\n    if (fd < 0) {\n        goto out;\n    }\n\n    inet_pton(AF_INET, \"127.0.0.1\", &remote.sin_addr);\n    remote.sin_port = htons(28385);\n\n    err = connect(fd, (struct sockaddr *)&remote, sizeof(remote));\n    if (err != 0) {\n        goto out;\n    }\n\n    printf(\"connected\\n\");\n\n    sendto(fd, buff, sizeof(buff), 0, (struct sockaddr *)&remote, sizeof(remote));\n    recv(fd, buff, sizeof(buff), 0);\n\n    sendto(fd, buff, sizeof(buff), 0, (struct sockaddr *)&remote, sizeof(remote));\n    recv(fd, buff, sizeof(buff), 0);\n\n    return 0;\n\nout:\n    printf(\"error occurred\\n\");\n    return -1;\n}\n\n\n\u554f\u984c\n----\n\nTCP\u3092\u7528\u3044\u305f\u30b5\u30fc\u30d0\u3092\u4f5c\u308b\u5834\u5408\u3001listen()\u3059\u308b\u30bd\u30b1\u30c3\u30c8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u9001\u53d7\u4fe1\u3092\u884c\u3046\u30bd\u30b1\u30c3\u30c8\u306f\u5225\u306b\u51fa\u6765\u308b\u3002\n\u305d\u306e\u70ba\u3001epoll\u3084libev, libuv\u306a\u3069\u3092\u7528\u3044\u308c\u3070\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u305f\u69cb\u9020\u4f53\u306e\u30ea\u30b9\u30c8\u306a\u3069\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u60c5\u5831\u306b\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u304c\u53ef\u80fd\u3060\u3002\n\n\u3057\u304b\u3057UDP\u306e\u30b5\u30fc\u30d0\u3092\u4f5c\u308b\u5834\u5408\u3001\u30cd\u30c3\u30c8\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u308b\u3068listen()\u3068\u3044\u3046\u304b\u5f85\u3061\u53d7\u3051\u308b\u30bd\u30b1\u30c3\u30c8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u9001\u53d7\u4fe1\u3092\u884c\u3046\u30bd\u30b1\u30c3\u30c8\u304c\u540c\u3058\u3082\u306e\u3057\u304b\u51fa\u3066\u3053\u306a\u3044\u3002\n\u3053\u306e\u5834\u5408\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u305f\u69cb\u9020\u4f53\u306e\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3057\u3001\u4f55\u304b\u53d7\u4fe1\u3059\u308b\u305f\u3073\u306b\u3069\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u53d7\u4fe1\u3057\u305f\u306e\u304b\u3092\u30ea\u30b9\u30c8\u304b\u3089\u63a2\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u30ea\u30b9\u30c8\u3092\u5168\u90e8\u63a2\u3057\u3066\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u3060\u3051\u3001\u65b0\u898f\u306e\u901a\u4fe1\u3060\u3068\u8a8d\u8b58\u51fa\u6765\u308b\u3002\n\n\u52b9\u7387\u304c\u60aa\u3044\u3053\u3068\u3053\u306e\u4e0a\u306a\u3044\u3002\n\n\u89e3\u6c7a\u65b9\u6cd5\n----\nconnect() system call\u306f\u3001\u5b9f\u306fUDP\u306b\u3082\u4f7f\u3048\u308b\u3002\n\u826f\u304f\u3042\u308b\u306e\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u4f8b\u3060\u3002\nUDP\u3060\u3051\u308c\u3069\u3082\u4e00\u304b\u6240\u3057\u304b\u901a\u4fe1\u3057\u306a\u3044\u5834\u5408\u3001connect()\u3092\u4f7f\u3046\u3053\u3068\u3067\u901a\u4fe1\u5148\u3092\u675f\u7e1b\u3057\u3001\u305d\u306e\u5f8c\u306e\u901a\u4fe1\u3067\u306fsend()\u3084recv()\u306a\u3069\u306e\u5b9b\u5148\u3092\u6307\u5b9a\u3057\u306a\u3044\u30bf\u30a4\u30d7\u306esystem call\u3092\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n\u305d\u3057\u3066\u3053\u306econnect()\u306f\u3055\u3089\u306b\u30b5\u30fc\u30d0\u5074\u3067\u4f7f\u3046\u3068\u3001TCP\u306e\u30b5\u30fc\u30d0\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u3053\u3068\u304c\u53ef\u80fd\u306a\u306e\u3060\u3002\n\n1. TCP\u306elisten()\u306b\u76f8\u5f53\u3059\u308b\u30bd\u30b1\u30c3\u30c8\u3067bind()\u3057\u3066recvfrom()\u3092\u3057\u3066\u5f85\u3064\u3002\n1. recvfrom()\u3057\u305f\u3089\u3001\u65b0\u305f\u306b\u30bd\u30b1\u30c3\u30c8\u3092socket()\u3067\u751f\u6210\u3059\u308b\u3002\n1. \u65b0\u305f\u306a\u30bd\u30b1\u30c3\u30c8\u306b\u3001listen()\u3057\u3066\u3044\u308b\u30bd\u30b1\u30c3\u30c8\u3068\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u3092bind()\u3059\u308b\u3002\n1. \u3055\u3089\u306brecvfrom()\u3057\u3066\u53d6\u5f97\u3057\u305f\u76f8\u624b\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u3057\u3001connect()\u3059\u308b\u3002\n1. \u3042\u3068\u306fTCP\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u65b0\u305f\u306a\u30bd\u30b1\u30c3\u30c8\u306b\u5bfe\u3057send()/recv()\u306a\u3069\u3067\u9001\u53d7\u4fe1\u3092\u884c\u3046\u3002\n\n\u65b0\u3057\u3044\u30bd\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3057\u3066bind()\u3057\u3001connect()\u3059\u308b\u3060\u3051\u3067TCP\u306e\u30b5\u30fc\u30d0\u3068\u540c\u3058\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u306e\u3060\u3002\n\u305f\u3060\u3057\u3001\u3059\u3079\u3066\u306e\u30bd\u30b1\u30c3\u30c8\u3067\n\n```\nconst int on = 1;\nsetsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (const void*)&on, (socklen_t)sizeof(on));\n```\n\n\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u9069\u7528\u4f8b\n----\nUDP\u30b5\u30fc\u30d0\u306e\u826f\u304f\u3042\u308b\u4f8b\u306e\u4e00\u3064\u3067\u3042\u308becho\u30b5\u30fc\u30d0\u306e\u3088\u3046\u306b1\u30ea\u30af\u30a8\u30b9\u30c81\u30ec\u30b9\u30dd\u30f3\u30b9\u3067\u51e6\u7406\u304c\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u3082\u306e\u306b\u306f\u3053\u306e\u5b9f\u88c5\u306f\u3042\u307e\u308a\u5fc5\u8981\u304c\u306a\u3044\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u4f55\u56de\u304b\u9001\u53d7\u4fe1\u3092\u884c\u3044\u3001\u307e\u305f\u540c\u6642\u306b\u8907\u6570\u306e\u63a5\u7d9a\u5148\u3068\u901a\u4fe1\u304c\u767a\u751f\u3059\u308b\u3088\u3046\u306a\u72b6\u6cc1\u3067\u5a01\u529b\u3092\u767a\u63ee\u3059\u308b\u3002\nOpenVPN\u306e\u3088\u3046\u306aVPN\u30b5\u30fc\u30d0\u306b\u4f7f\u3063\u305f\u308a\u3001MQTT\u306e\u30b5\u30fc\u30d0\u306b\u4f7f\u3063\u305f\u308a\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n----\n\n```server.c\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <sys/select.h>\n#include <errno.h>\n\nint accept_handle(int cfd, struct sockaddr_in *local)\n{\n\tstruct sockaddr_in remote;\n\tsocklen_t remote_len;\n\tchar buff[128];\n\tint fd;\n\tint err;\n\tconst int on = 1, off = 0;\n\n\tremote_len = sizeof(remote);\n\terr = recvfrom(cfd, buff, sizeof(buff), 0, (struct sockaddr *)&remote, &remote_len);\n\tif (err < 0) {\n\t\tgoto out;\n\t}\n\n\tfd = socket(AF_INET, SOCK_DGRAM, 0);\n\tif (fd < 0) {\n\t\tgoto out;\n\t}\n\n\tsetsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (const void*)&on, (socklen_t)sizeof(on));\n\n\terr = bind(fd, (struct sockaddr *)local, sizeof(*local));\n\tif (err != 0) {\n\t\tgoto out;\n\t}\n\n\terr = connect(fd, (struct sockaddr *)&remote, remote_len);\n\tif (err != 0) {\n\t\tgoto out;\n\t}\n\n\tprintf(\"accepted connection from fd=%d %s:%d\\n\", fd, inet_ntop(AF_INET, &remote.sin_addr, buff, INET6_ADDRSTRLEN), ntohs(remote.sin_port));\n\n\tsend(fd, buff, sizeof(buff), 0);\n\n\treturn fd;\n\nout:\n\tprintf(\"%s(): error occurred errno=%d\\n\", __func__, errno);\n\treturn -1;\n}\n\nint main(void)\n{\n\tint err;\n\tstruct sockaddr_in local;\n\tstruct sockaddr_in remote;\n\tsocklen_t remote_len;\n\tint fd;\n\tfd_set rfds;\n\tint fds[10] = { -1 };\n\tsize_t i = 0;\n\tconst int on = 1, off = 0;\n\tsize_t loop_max = sizeof(fds) / sizeof(fds[0]);\n\tint maxfd = -1;\n\tchar buff[128];\n\n\tfd = socket(AF_INET, SOCK_DGRAM, 0);\n\tif (fd < 0) {\n\t\tgoto out;\n\t}\n\n\tsetsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (const void*)&on, (socklen_t)sizeof(on));\n\n\tinet_pton(AF_INET, \"0.0.0.0\", &local.sin_addr);\n\tlocal.sin_port = htons(28385);\n\n\terr = bind(fd, (struct sockaddr *)&local, sizeof(local));\n\tif (err != 0) {\n\t\tgoto out;\n\t}\n\n\tfor (i = 0; i < loop_max; ++i) {\n\t\tfds[i] = -1;\n\t}\n\twhile (1) {\n\t\tmaxfd = fd;\n\t\tFD_ZERO(&rfds);\n\t\tFD_SET(fd, &rfds);\n\t\tfor (i = 0; i < loop_max; ++i) {\n\t\t\tif (fds[i] != -1) {\n\t\t\t\tFD_SET(fds[i], &rfds);\n\t\t\t\tif (maxfd < fds[i]) {\n\t\t\t\t\tmaxfd = fds[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\terr = select(maxfd + 1, &rfds, NULL, NULL, NULL);\n\t\tif (err < 0) {\n\t\t\tgoto out;\n\t\t}\n\t\tfor (i = 0; i < loop_max; ++i) {\n\t\t\tif (fds[i] != -1 && FD_ISSET(fds[i], &rfds)) {\n\t\t\t\tremote_len = sizeof(remote);\n\t\t\t\terr = recv(fds[i], buff, sizeof(buff), 0);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tprintf(\"close from %d\\n\", fds[i]);\n\t\t\t\t\tfds[i] = -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprintf(\"recvfrom %d\\n\", fds[i]);\n\t\t\t\t\tsend(fds[i], buff, sizeof(buff), 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (FD_ISSET(fd, &rfds)) {\n\t\t\tfor (i = 0; i < loop_max; ++i) {\n\t\t\t\tif (fds[i] == -1) {\n\t\t\t\t\tfds[i] = accept_handle(fd, &local);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n\nout:\n\treturn -1;\n}\n```\n\n```client.c\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <sys/select.h>\n\nint main(void)\n{\n\tint err;\n\tstruct sockaddr_in remote;\n\tsocklen_t remote_len;\n\tint fd;\n\tfd_set rfds;\n\tint fds[10] = { -1 };\n\tsize_t i = 0;\n\tconst int on = 1, off = 0;\n\tsize_t loop_max = sizeof(fds) / sizeof(fds[0]);\n\tint maxfd = -1;\n\tchar buff[128];\n\n\tfd = socket(AF_INET, SOCK_DGRAM, 0);\n\tif (fd < 0) {\n\t\tgoto out;\n\t}\n\n\tinet_pton(AF_INET, \"127.0.0.1\", &remote.sin_addr);\n\tremote.sin_port = htons(28385);\n\n\terr = connect(fd, (struct sockaddr *)&remote, sizeof(remote));\n\tif (err != 0) {\n\t\tgoto out;\n\t}\n\n\tprintf(\"connected\\n\");\n\n\tsendto(fd, buff, sizeof(buff), 0, (struct sockaddr *)&remote, sizeof(remote));\n\trecv(fd, buff, sizeof(buff), 0);\n\n\tsendto(fd, buff, sizeof(buff), 0, (struct sockaddr *)&remote, sizeof(remote));\n\trecv(fd, buff, sizeof(buff), 0);\n\n\treturn 0;\n\nout:\n\tprintf(\"error occurred\\n\");\n\treturn -1;\n}\n```\n", "tags": ["udp", "server", "connect"]}