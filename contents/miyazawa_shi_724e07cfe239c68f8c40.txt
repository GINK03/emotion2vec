{"context": "\n\n\u306f\u3058\u3081\u306b\nRaspberry Pi\u306e\u62e1\u5f35\u30bb\u30c3\u30c8\u306eLazurite Pi Gateway\u3092\u4f7f\u7528\u3059\u308b\u3068\u304d\u306e\u30e1\u30e2\n\n\u4f7f\u7528\u6a5f\u5668\nRaspberry  Pi\u3000\u30001\u500b\nLazurite Pi Gateway   1\u500b\nLuzurite    1\u500b\n\nRuby \u3067\u9001\u53d7\u4fe1\n\n\u9001\u4fe1\u30b5\u30f3\u30d7\u30eb\nRuby\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u306b\u79fb\u52d5\n$cd ruby\n\nruby \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u306b\u4ee5\u4e0b\u306e3\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\nBinaryMonitor.rb\u3000\u3000\u3000SendTest.rb\u3000\u3000\u3000SerialMonitor.rb\nSendTest.rb \u306e\u5185\u5bb9\u3092\u7de8\u96c6\u3059\u308b\n\nSendTest.rb\n#! /usr/bin/ruby\n# -*- coding: utf-8; mode: ruby -*-\n# Function:\n#   Lazurite Sub-GHz/Lazurite Pi Gateway Sample program\n#   SerialMonitor.rb\n\nrequire 'net/http'\nrequire 'date'\n##\n# BP3596 API\n##\nclass BP3596PipeApi\n  ##\n  # func   : Read the data from the receiving pipe\n  # input  : Receive pipe fp\n  # return : Receive data\n  ##\n  def write_device(fp,data)\n    ret = select(nil, [fp], nil, 0.1)\n    begin\n      len = fp.write(data);\n    rescue\n      raise EACK\n    end\n    return len;\n  end\n  def read_device(fp)\n    # Data reception wait (timeout = 100ms)\n    ret = select([fp], nil, nil, 0.1)\n\n    # Reads the size of the received data\n    len = fp.read(2)\n    if ((len == \"\") || (len == nil)) then # read result is empty\n      return -1\n    end\n    size =  len.unpack(\"S*\")[0]\n\n    # The received data is read\n    recv_buf = fp.read(size)\n    if ((recv_buf == \"\") || (recv_buf == nil)) then # read result is empty\n      return -1\n    end\n\n    return recv_buf\n  end\n  def BinaryMonitor(raw)\n    len = raw.length\n    header = raw.unpack(\"H4\")[0]\n\n    # unsupported format\n    if header != \"21a8\" then\n      unsupported_format(raw)\n      return\n    end\n\n    # supported format\n    seq = raw[2].unpack(\"H2\")[0]\n\n    # PANID\n    myPanid = raw[3..4].unpack(\"S*\")[0]\n\n    # RX Address\n    rxAddr = raw[5..6].unpack(\"S*\")[0]\n\n    # TX Address\n    txAddr = raw[7..8].unpack(\"S*\")[0]\n\n    # \n    print(sprintf(\"PANID=0x%04X, rxAddr=0x%04X, txAddr=0x%04X, DATA:: \",myPanid, rxAddr, txAddr))\n\n    for num in 9..len-2 do\n      print(raw[num].unpack(\"H*\")[0],\" \")\n    end\n    print(\"\\n\") end\n\n  # printing unsupported format\n  def unsupported_format(raw)\n    data = raw.unpack(\"H*\")\n    print(\"unsupported format::\",data,\"\\n\")\n  end\nend\n\n##\n# Main function\n##\nclass MainFunction\n  ### Variable definition\n  bp3596_dev  = \"/dev/bp3596\" # Receiving pipe\n  finish_flag = 0             # Finish flag\n\n  # Process at the time of SIGINT Receiving\n  Signal.trap(:INT){\n    finish_flag=1\n  }\n\n  # Open the Receiving pipe\n  bp3596_fp = open(bp3596_dev, \"rb\")\n  bp3596_wr = open(bp3596_dev, \"wb\")\n\n  p bp3596_wr\n\n  bp_api = BP3596PipeApi.new\n  data = [0xa821,0x00,0xabcd,0x8e35,0x87a4,\"hello\"].pack(\"scsssa*\")\n  p data\n  for i in 0..100 do\n    if finish_flag == 1\n        next\n    end\n    begin\n      status = bp_api.write_device(bp3596_wr,data)\n      p status\n    rescue\n      print(\"does not receive ack\\n\")\n    end\n  end\n  bp3596_fp.close\n  bp3596_wr.close\nend\n\n\n\n103\u884c\u76ee\u3092\u7de8\u96c6\n  data = [0xa821,0x00,0xabcd,0x8e35,0x87a4,\"hello\"].pack(\"scsssa*\")\n\n0x8e35 \u306e\u90e8\u5206\u3092\u9001\u4fe1\u5148\u6a5f\u5668\u306e\u30c7\u30d0\u30a4\u30b9\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\n\"hello\" \u306e\u90e8\u5206\u3092\u9001\u4fe1\u3057\u305f\u3044\u6587\u5b57\u5217\u306b\u5909\u66f4\u3059\u308b\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u52b9\n\u30c9\u30e9\u30a4\u30d0\u306e\u6709\u52b9\u3092\u3057\u3066\u304b\u3089sudo\u6a29\u9650\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3002\n$sudo insmod ~/driver/sub-ghz/DRV_802154.ko\n$sudo ruby SendTest.rb\n\n\n\u53d7\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30c9\u30e9\u30a4\u30d0\u3092\u6709\u52b9\u306b\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092sudo\u6a29\u9650\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u9001\u3089\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3057\u3066\u304f\u308c\u308b\npi@raspberrypi ~/ruby $sudo insmod ~/driver/sub-ghz/DRV_802154.ko\npi@raspberrypi ~/ruby $ sudo ruby recive.rb\n\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\n\n\n\u53d7\u4fe1\u3000\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7de8\u96c6\n\nSerialMonitor.rb\n#! /usr/bin/ruby\n# -*- coding: utf-8; mode: ruby -*-\n# Function:\n#   Lazurite Sub-GHz/Lazurite Pi Gateway Sample program\n#   SerialMonitor.rb\n\nrequire 'net/http'\nrequire 'date'\n\n##\n# BP3596 API\n##\nclass BP3596PipeApi\n  ##\n  # func   : Read the data from the receiving pipe\n  # input  : Receive pipe fp\n  # return : Receive data\n  ##\n  def read_device(fp)\n    # Data reception wait (timeout = 100ms)\n    ret = select([fp], nil, nil, 0.1)\n\n    # Reads the size of the received data\n    len = fp.read(2)\n    if ((len == \"\") || (len == nil)) then # read result is empty\n      return -1\n    end\n    size =  len.unpack(\"S*\")[0]\n\n    # The received data is read\n    recv_buf = fp.read(size)\n    if ((recv_buf == \"\") || (recv_buf == nil)) then # read result is empty\n      return -1\n    end\n\n    return recv_buf\n  end\n  def print_raw(raw)\n    fc = raw.unpack(\"H*\")\n    len = raw.length\n    print(len,\"bytes: \",fc,\"\\r\\n\")\n  end\n  def print_raw2(raw)\n    len = raw.length\n    header = raw.unpack(\"H4\")[0]\n\n    # unsupported format\n    if header != \"21a8\" then\n      unsupported_format(raw)\n      return\n    end\n\n    # supported format\n    seq = raw[2].unpack(\"H2\")[0]\n\n    # PANID\n    myPanid = raw[3..4].unpack(\"S*\")[0]\n\n    # RX Address\n    rxAddr = raw[5..6].unpack(\"S*\")[0]\n\n    # TX Address\n    txAddr = raw[7..8].unpack(\"S*\")[0]\n\n    #\n    str_buf = raw[9..len-2].unpack(\"Z*\")[0]\n    print(sprintf(\"PANID=0x%04X, rxAddr=0x%04X, txAddr=0x%04X, Strings:: %s\",myPanid,rxAddr,txAddr,str_buf))\n  end\n\n  # printing unsupported format\n  def unsupported_format(raw)\n    data = raw.unpack(\"H*\")\n    print(\"unsupported format::\",data,\"\\n\")\n  end\nend\n\n##\n# Main function\n##\nclass MainFunction\n  ### Variable definition\n  bp3596_dev  = \"/dev/bp3596\" # Receiving pipe\n  finish_flag = 0             # Finish flag\n\n  # Process at the time of SIGINT Receiving\n  Signal.trap(:INT){\n    finish_flag=1\n  }\n\n  # Open the Receiving pipe\n  bp3596_fp = open(bp3596_dev, \"rb\")\n\n  bp_api = BP3596PipeApi.new\n\n\n  # Loop until it receives a SIGINT\n  while finish_flag==0 do\n    # Read device\n    recv_buf = bp_api.read_device(bp3596_fp)\n    if recv_buf == -1\n      next\n    end\n    # Create a transmit buffer from the receive buffer\n    bp_api.print_raw2(recv_buf)\n  end\n  # Close the Receiving pipe\n  bp3596_fp.close\nend\n\n\n\n\u53d7\u4fe1\u3057\u305f\u6587\u5b57\u5217\u3000(67\u884c)\nprint(sprintf(\"PANID=0x%04X, rxAddr=0x%04X, txAddr=0x%04X, Strings:: %s\",myPanid,rxAddr,txAddr,str_buf))\n\n\u53d7\u4fe1\u3055\u308c\u305f\u6587\u5b57\u5217\u306f\u3000str_buf \u5909\u6570\u306b\u4fdd\u5b58\u3055\u308c\u308b\u3002\n\u306a\u306e\u3067\u3001\u53d7\u4fe1\u3057\u305f\u7d50\u679c\u3088\u308a\u5236\u5fa1\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u3001\nprint(sprintf(\"PANID=0x%04X, rxAddr=0x%04X, txAddr=0x%04X, Strings:: %s\",myPanid,rxAddr,txAddr,str_buf))\nif str_buf == \"hello\\r\\n\"\n  p \"hello\"\n\nelsif str_buf == \"world\\r\\n\"\n  p \"world\"\nend\n\n\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3088\u3044\u3002\n\n\u53c2\u8003URL\nLazurite Pi Gateway\uff08\u30e9\u30ba\u30e9\u30a4\u30c8 \u30d1\u30a4 \u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\uff09\nGithub  Lapis Semiconductor\n#\u306f\u3058\u3081\u306b\nRaspberry Pi\u306e\u62e1\u5f35\u30bb\u30c3\u30c8\u306eLazurite Pi Gateway\u3092\u4f7f\u7528\u3059\u308b\u3068\u304d\u306e\u30e1\u30e2\n\n#\u4f7f\u7528\u6a5f\u5668\nRaspberry  Pi\u3000\u30001\u500b\nLazurite Pi Gateway   1\u500b\nLuzurite    1\u500b\n\n#Ruby \u3067\u9001\u53d7\u4fe1\n##\u9001\u4fe1\u30b5\u30f3\u30d7\u30eb\nRuby\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u306b\u79fb\u52d5\n\n```\n$cd ruby\n```\nruby \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u306b\u4ee5\u4e0b\u306e3\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\nBinaryMonitor.rb\u3000\u3000\u3000SendTest.rb\u3000\u3000\u3000SerialMonitor.rb\n\nSendTest.rb \u306e\u5185\u5bb9\u3092\u7de8\u96c6\u3059\u308b\n\n```ruby:SendTest.rb\n#! /usr/bin/ruby\n# -*- coding: utf-8; mode: ruby -*-\n# Function:\n#   Lazurite Sub-GHz/Lazurite Pi Gateway Sample program\n#   SerialMonitor.rb\n\nrequire 'net/http'\nrequire 'date'\n##\n# BP3596 API\n##\nclass BP3596PipeApi\n  ##\n  # func   : Read the data from the receiving pipe\n  # input  : Receive pipe fp\n  # return : Receive data\n  ##\n  def write_device(fp,data)\n    ret = select(nil, [fp], nil, 0.1)\n\tbegin\n\t  len = fp.write(data);\n\trescue\n\t  raise EACK\n\tend\n\treturn len;\n  end\n  def read_device(fp)\n    # Data reception wait (timeout = 100ms)\n    ret = select([fp], nil, nil, 0.1)\n\n    # Reads the size of the received data\n    len = fp.read(2)\n    if ((len == \"\") || (len == nil)) then # read result is empty\n      return -1\n    end\n    size =  len.unpack(\"S*\")[0]\n\n    # The received data is read\n    recv_buf = fp.read(size)\n    if ((recv_buf == \"\") || (recv_buf == nil)) then # read result is empty\n      return -1\n\tend\n\n    return recv_buf\n  end\n  def BinaryMonitor(raw)\n    len = raw.length\n    header = raw.unpack(\"H4\")[0]\n\n\t# unsupported format\n\tif header != \"21a8\" then\n\t  unsupported_format(raw)\n\t  return\n\tend\n\n\t# supported format\n    seq = raw[2].unpack(\"H2\")[0]\n\n\t# PANID\n    myPanid = raw[3..4].unpack(\"S*\")[0]\n\n\t# RX Address\n\trxAddr = raw[5..6].unpack(\"S*\")[0]\n\n\t# TX Address\n\ttxAddr = raw[7..8].unpack(\"S*\")[0]\n\n\t# \n\tprint(sprintf(\"PANID=0x%04X, rxAddr=0x%04X, txAddr=0x%04X, DATA:: \",myPanid, rxAddr, txAddr))\n\n\tfor num in 9..len-2 do\n\t  print(raw[num].unpack(\"H*\")[0],\" \")\n    end\n\tprint(\"\\n\") end\n\n  # printing unsupported format\n  def unsupported_format(raw)\n    data = raw.unpack(\"H*\")\n\tprint(\"unsupported format::\",data,\"\\n\")\n  end\nend\n\n##\n# Main function\n##\nclass MainFunction\n  ### Variable definition\n  bp3596_dev  = \"/dev/bp3596\" # Receiving pipe\n  finish_flag = 0             # Finish flag\n\n  # Process at the time of SIGINT Receiving\n  Signal.trap(:INT){\n    finish_flag=1\n  }\n\n  # Open the Receiving pipe\n  bp3596_fp = open(bp3596_dev, \"rb\")\n  bp3596_wr = open(bp3596_dev, \"wb\")\n\n  p bp3596_wr\n\n  bp_api = BP3596PipeApi.new\n  data = [0xa821,0x00,0xabcd,0x8e35,0x87a4,\"hello\"].pack(\"scsssa*\")\n  p data\n  for i in 0..100 do\n\tif finish_flag == 1\n\t\tnext\n\tend\n\tbegin\n      status = bp_api.write_device(bp3596_wr,data)\n      p status\n\trescue\n\t  print(\"does not receive ack\\n\")\n\tend\n  end\n  bp3596_fp.close\n  bp3596_wr.close\nend\n```\n\n###103\u884c\u76ee\u3092\u7de8\u96c6\n```\n  data = [0xa821,0x00,0xabcd,0x8e35,0x87a4,\"hello\"].pack(\"scsssa*\")\n```\n\n```0x8e35``` \u306e\u90e8\u5206\u3092\u9001\u4fe1\u5148\u6a5f\u5668\u306e\u30c7\u30d0\u30a4\u30b9\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\n```\"hello\"``` \u306e\u90e8\u5206\u3092\u9001\u4fe1\u3057\u305f\u3044\u6587\u5b57\u5217\u306b\u5909\u66f4\u3059\u308b\n\n###\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u52b9\n\u30c9\u30e9\u30a4\u30d0\u306e\u6709\u52b9\u3092\u3057\u3066\u304b\u3089sudo\u6a29\u9650\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n```bash\n$sudo insmod ~/driver/sub-ghz/DRV_802154.ko\n$sudo ruby SendTest.rb\n```\n\n##\u53d7\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30c9\u30e9\u30a4\u30d0\u3092\u6709\u52b9\u306b\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092sudo\u6a29\u9650\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u9001\u3089\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3057\u3066\u304f\u308c\u308b\n\n```bash\npi@raspberrypi ~/ruby $sudo insmod ~/driver/sub-ghz/DRV_802154.ko\npi@raspberrypi ~/ruby $ sudo ruby recive.rb\n\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\nPANID=0xABCD, rxAddr=0x668C, txAddr=0x5F5A, Strings:: Welcome to Lazurite Sub-GHz\n```\n\n##\u53d7\u4fe1\u3000\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7de8\u96c6\n\n```ruby:SerialMonitor.rb\n#! /usr/bin/ruby\n# -*- coding: utf-8; mode: ruby -*-\n# Function:\n#   Lazurite Sub-GHz/Lazurite Pi Gateway Sample program\n#   SerialMonitor.rb\n\nrequire 'net/http'\nrequire 'date'\n\n##\n# BP3596 API\n##\nclass BP3596PipeApi\n  ##\n  # func   : Read the data from the receiving pipe\n  # input  : Receive pipe fp\n  # return : Receive data\n  ##\n  def read_device(fp)\n    # Data reception wait (timeout = 100ms)\n    ret = select([fp], nil, nil, 0.1)\n\n    # Reads the size of the received data\n    len = fp.read(2)\n    if ((len == \"\") || (len == nil)) then # read result is empty\n      return -1\n    end\n    size =  len.unpack(\"S*\")[0]\n\n    # The received data is read\n    recv_buf = fp.read(size)\n    if ((recv_buf == \"\") || (recv_buf == nil)) then # read result is empty\n      return -1\n    end\n\n    return recv_buf\n  end\n  def print_raw(raw)\n    fc = raw.unpack(\"H*\")\n    len = raw.length\n    print(len,\"bytes: \",fc,\"\\r\\n\")\n  end\n  def print_raw2(raw)\n    len = raw.length\n    header = raw.unpack(\"H4\")[0]\n\n    # unsupported format\n    if header != \"21a8\" then\n      unsupported_format(raw)\n      return\n    end\n\n    # supported format\n    seq = raw[2].unpack(\"H2\")[0]\n\n    # PANID\n    myPanid = raw[3..4].unpack(\"S*\")[0]\n\n    # RX Address\n    rxAddr = raw[5..6].unpack(\"S*\")[0]\n\n    # TX Address\n    txAddr = raw[7..8].unpack(\"S*\")[0]\n\n    #\n    str_buf = raw[9..len-2].unpack(\"Z*\")[0]\n    print(sprintf(\"PANID=0x%04X, rxAddr=0x%04X, txAddr=0x%04X, Strings:: %s\",myPanid,rxAddr,txAddr,str_buf))\n  end\n\n  # printing unsupported format\n  def unsupported_format(raw)\n    data = raw.unpack(\"H*\")\n    print(\"unsupported format::\",data,\"\\n\")\n  end\nend\n\n##\n# Main function\n##\nclass MainFunction\n  ### Variable definition\n  bp3596_dev  = \"/dev/bp3596\" # Receiving pipe\n  finish_flag = 0             # Finish flag\n\n  # Process at the time of SIGINT Receiving\n  Signal.trap(:INT){\n    finish_flag=1\n  }\n\n  # Open the Receiving pipe\n  bp3596_fp = open(bp3596_dev, \"rb\")\n\n  bp_api = BP3596PipeApi.new\n\n\n  # Loop until it receives a SIGINT\n  while finish_flag==0 do\n    # Read device\n    recv_buf = bp_api.read_device(bp3596_fp)\n    if recv_buf == -1\n      next\n    end\n    # Create a transmit buffer from the receive buffer\n    bp_api.print_raw2(recv_buf)\n  end\n  # Close the Receiving pipe\n  bp3596_fp.close\nend\n```\n\n###\u53d7\u4fe1\u3057\u305f\u6587\u5b57\u5217\u3000(67\u884c)\n\n```ruby\nprint(sprintf(\"PANID=0x%04X, rxAddr=0x%04X, txAddr=0x%04X, Strings:: %s\",myPanid,rxAddr,txAddr,str_buf))\n```\n\u53d7\u4fe1\u3055\u308c\u305f\u6587\u5b57\u5217\u306f\u3000str_buf \u5909\u6570\u306b\u4fdd\u5b58\u3055\u308c\u308b\u3002\n\u306a\u306e\u3067\u3001\u53d7\u4fe1\u3057\u305f\u7d50\u679c\u3088\u308a\u5236\u5fa1\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u3001\n\n```ruby\nprint(sprintf(\"PANID=0x%04X, rxAddr=0x%04X, txAddr=0x%04X, Strings:: %s\",myPanid,rxAddr,txAddr,str_buf))\nif str_buf == \"hello\\r\\n\"\n  p \"hello\"\n  \nelsif str_buf == \"world\\r\\n\"\n  p \"world\"\nend\n```\n\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3088\u3044\u3002\n\n\n#\u53c2\u8003URL\n[Lazurite Pi Gateway\uff08\u30e9\u30ba\u30e9\u30a4\u30c8 \u30d1\u30a4 \u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\uff09](http://www.lapis-semi.com/lazurite-jp/products/lazurite-pi-gateway)\n\n[Github  Lapis Semiconductor](https://github.com/LAPIS-Lazurite)\n", "tags": ["Lazurite", "RaspberryPi", "Ruby", "Home@KAIT"]}