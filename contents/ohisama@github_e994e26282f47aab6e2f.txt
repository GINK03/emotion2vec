{"context": "\n\n\u6982\u8981\njsdo\u3067shadertoy\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3044\u3002\n\u65e5\u4ed8\u30c7\u30fc\u30bf\u3082\u4f7f\u3044\u305f\u3044\u3002\n\n\u6210\u679c\u7269\nhttp://jsdo.it/ohisama1/Iy2H\n\n\u5199\u771f\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nprecision mediump float;\nuniform vec2 iResolution;\nuniform float iGlobalTime;\nuniform vec4 iMouse;    \nuniform sampler2D iChannel0;\nuniform vec4 iDate;    \n\nconst float kCharBlank = 12.0;\nconst float kCharMinus = 11.0;\nconst float kCharDecimalPoint = 10.0;\n#ifndef BITMAP_VERSION\nfloat InRect(const in vec2 vUV, const in vec4 vRect)\n{\n    vec2 vTestMin = step(vRect.xy, vUV.xy);\n    vec2 vTestMax = step(vUV.xy, vRect.zw); \n    vec2 vTest = vTestMin * vTestMax;\n    return vTest.x * vTest.y;\n}\nfloat SampleDigit(const in float fDigit, const in vec2 vUV)\n{\n    const float x0 = 0.0 / 4.0;\n    const float x1 = 1.0 / 4.0;\n    const float x2 = 2.0 / 4.0;\n    const float x3 = 3.0 / 4.0;\n    const float x4 = 4.0 / 4.0;\n    const float y0 = 0.0 / 5.0;\n    const float y1 = 1.0 / 5.0;\n    const float y2 = 2.0 / 5.0;\n    const float y3 = 3.0 / 5.0;\n    const float y4 = 4.0 / 5.0;\n    const float y5 = 5.0 / 5.0;\n    vec4 vRect0 = vec4(0.0);\n    vec4 vRect1 = vec4(0.0);\n    vec4 vRect2 = vec4(0.0);\n    if (fDigit < 0.5) // 0\n    {\n        vRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y1, x2, y4);\n    }\n    else if (fDigit < 1.5) // 1\n    {\n        vRect0 = vec4(x1, y0, x2, y5); \n        vRect1 = vec4(x0, y0, x0, y0);\n    }\n    else if (fDigit < 2.5) // 2\n    {\n        vRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x0, y3, x2, y4); \n        vRect2 = vec4(x1, y1, x3, y2);\n    }\n    else if (fDigit < 3.5) // 3\n    {\n        vRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x0, y3, x2, y4); \n        vRect2 = vec4(x0, y1, x2, y2);\n    }\n    else if (fDigit < 4.5) // 4\n    {\n        vRect0 = vec4(x0, y1, x2, y5); \n        vRect1 = vec4(x1, y2, x2, y5); \n        vRect2 = vec4(x2, y0, x3, y3);\n    }\n    else if (fDigit < 5.5) // 5\n    {\n        vRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y3, x3, y4); \n        vRect2 = vec4(x0, y1, x2, y2);\n    }\n    else if (fDigit < 6.5) // 6\n    {\n        vRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y3, x3, y4); \n        vRect2 = vec4(x1, y1, x2, y2);\n    }\n    else if (fDigit < 7.5) // 7\n    {\n        vRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x0, y0, x2, y4);\n    }\n    else if (fDigit < 8.5) // 8\n    {\n        vRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y1, x2, y2); \n        vRect2 = vec4(x1, y3, x2, y4);\n    }\n    else if (fDigit < 9.5) // 9\n    {\n        vRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y3, x2, y4); \n        vRect2 = vec4(x0, y1, x2, y2);\n    }\n    else if (fDigit < 10.5) // '.'\n    {\n        vRect0 = vec4(x1, y0, x2, y1);\n    }\n    else if (fDigit < 11.5) // '-'\n    {\n        vRect0 = vec4(x0, y2, x3, y3);\n    }   \n    float fResult = InRect(vUV, vRect0) + InRect(vUV, vRect1) + InRect(vUV, vRect2);\n    return mod(fResult, 2.0);\n}\n#else\nfloat SampleDigit(const in float fDigit, const in vec2 vUV)\n{       \n    if (vUV.x < 0.0) return 0.0;\n    if (vUV.y < 0.0) return 0.0;\n    if (vUV.x >= 1.0) return 0.0;\n    if (vUV.y >= 1.0) return 0.0;\n    float fDigitBinary = 0.0;\n    if (fDigit < 0.5) // 0\n    {\n        fDigitBinary = 7.0 + 5.0 * 16.0 + 5.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;\n    }\n    else if (fDigit < 1.5) // 1\n    {\n        fDigitBinary = 2.0 + 2.0 * 16.0 + 2.0 * 256.0 + 2.0 * 4096.0 + 2.0 * 65536.0;\n    }\n    else if (fDigit < 2.5) // 2\n    {\n        fDigitBinary = 7.0 + 1.0 * 16.0 + 7.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;\n    }\n    else if (fDigit < 3.5) // 3\n    {\n        fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;\n    }\n    else if (fDigit < 4.5) // 4\n    {\n        fDigitBinary = 4.0 + 7.0 * 16.0 + 5.0 * 256.0 + 1.0 * 4096.0 + 1.0 * 65536.0;\n    }\n    else if (fDigit < 5.5) // 5\n    {\n        fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 1.0 * 4096.0 + 7.0 * 65536.0;\n    }\n    else if (fDigit < 6.5) // 6\n    {\n        fDigitBinary = 7.0 + 5.0 * 16.0 + 7.0 * 256.0 + 1.0 * 4096.0 + 7.0 * 65536.0;\n    }\n    else if (fDigit < 7.5) // 7\n    {\n        fDigitBinary = 4.0 + 4.0 * 16.0 + 4.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;\n    }\n    else if (fDigit < 8.5) // 8\n    {\n        fDigitBinary = 7.0 + 5.0 * 16.0 + 7.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;\n    }\n    else if (fDigit < 9.5) // 9\n    {\n        fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;\n    }\n    else if (fDigit < 10.5) // '.'\n    {\n        fDigitBinary = 2.0 + 0.0 * 16.0 + 0.0 * 256.0 + 0.0 * 4096.0 + 0.0 * 65536.0;\n    }\n    else if (fDigit < 11.5) // '-'\n    {\n        fDigitBinary = 0.0 + 0.0 * 16.0 + 7.0 * 256.0 + 0.0 * 4096.0 + 0.0 * 65536.0;\n    }\n    vec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n    float fIndex = vPixel.x + (vPixel.y * 4.0);\n    return mod(floor(fDigitBinary / pow(2.0, fIndex)), 2.0);\n}\n#endif\nfloat PrintValue(const in vec2 vStringCharCoords, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n    float fAbsValue = abs(fValue);\n    float fStringCharIndex = floor(vStringCharCoords.x);\n    float fLog10Value = log2(fAbsValue) / log2(10.0);\n    float fBiggestDigitIndex = max(floor(fLog10Value), 0.0);\n    float fDigitCharacter = kCharBlank;\n    float fDigitIndex = fMaxDigits - fStringCharIndex;\n    if (fDigitIndex > (-fDecimalPlaces - 1.5))\n    {\n        if (fDigitIndex > fBiggestDigitIndex)\n        {\n            if (fValue < 0.0)\n            {\n                if (fDigitIndex < (fBiggestDigitIndex + 1.5))\n                {\n                    fDigitCharacter = kCharMinus;\n                }\n            }\n        }\n        else\n        {       \n            if (fDigitIndex == -1.0)\n            {\n                if (fDecimalPlaces > 0.0)\n                {\n                    fDigitCharacter = kCharDecimalPoint;\n                }\n            }\n            else\n            {\n                if (fDigitIndex < 0.0)\n                {\n                    fDigitIndex += 1.0;\n                }\n                float fDigitValue = (fAbsValue / (pow(10.0, fDigitIndex)));\n                fDigitCharacter = mod(floor(0.0001 + fDigitValue), 10.0);\n            }       \n        }\n    }\n    vec2 vCharPos = vec2(fract(vStringCharCoords.x), vStringCharCoords.y);\n    return SampleDigit(fDigitCharacter, vCharPos);  \n}\nfloat PrintValue(in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n    return PrintValue((fragCoord.xy - vPixelCoords) / vFontSize, fValue, fMaxDigits, fDecimalPlaces);\n}\nfloat GetCurve(float x)\n{\n    return sin(x * 3.14159 * 4.0);\n}\nfloat GetCurveDeriv(float x) \n{ \n    return 3.14159 * 4.0 * cos(x * 3.14159 * 4.0); \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 vColour = vec3(0.0);\n    vec2 vFontSize = vec2(8.0, 15.0);\n    if (abs(fragCoord.y - iResolution.y * 0.5) < 1.0)\n    {\n        vColour = vec3(0.25);\n    }\n    float fCurveX = fragCoord.x / iResolution.x;\n    float fSinY = (GetCurve(fCurveX) * 0.25 + 0.5) * iResolution.y;\n    float fSinYdX = (GetCurveDeriv(fCurveX) * 0.25) * iResolution.y / iResolution.x;\n    float fDistanceToCurve = abs(fSinY - fragCoord.y) / sqrt(1.0+fSinYdX*fSinYdX);\n    float fSetPixel = fDistanceToCurve - 1.0;\n    vColour = mix(vec3(1.0, 0.0, 0.0), vColour, clamp(fSetPixel, 0.0, 1.0));    \n    float fValue4 = GetCurve(iMouse.x / iResolution.x);\n    float fPixelYCoord = (fValue4 * 0.25 + 0.5) * iResolution.y;\n    float fDistToPointA = length( vec2(iMouse.x, fPixelYCoord) - fragCoord.xy) - 4.0;\n    vColour = mix(vColour, vec3(0.0, 0.0, 1.0), (1.0 - clamp(fDistToPointA, 0.0, 1.0)));\n    float fDistToPointB = length( vec2(iMouse.x, iMouse.y) - fragCoord.xy) - 4.0;\n    vColour = mix(vColour, vec3(0.0, 1.0, 0.0), (1.0 - clamp(fDistToPointB, 0.0, 1.0)));\n    vec2 vPixelCoord4 = vec2(iMouse.x, fPixelYCoord) + vec2(4.0, 4.0);\n    float fDigits = 1.0;\n    float fDecimalPlaces = 2.0;\n    float fIsDigit4 = PrintValue(fragCoord, vPixelCoord4, vFontSize, fValue4, fDigits, fDecimalPlaces);\n    vColour = mix( vColour, vec3(0.0, 0.0, 1.0), fIsDigit4);\n    vec2 vPixelCoord1 = vec2(96.0, 5.0);\n    float fValue1 = iGlobalTime;\n    fDigits = 6.0;\n    float fIsDigit1 = PrintValue(fragCoord, vPixelCoord1, vFontSize, fValue1, fDigits, fDecimalPlaces);\n    vColour = mix(vColour, vec3(0.0, 1.0, 1.0), fIsDigit1);\n    vColour = mix(vColour, vec3(1.0, 1.0, 0.0), PrintValue(fragCoord, vec2(0.0, 5.0), vFontSize, iDate.x, 4.0, 0.0));\n    vColour = mix(vColour, vec3(1.0, 1.0, 0.0), PrintValue(fragCoord, vec2(0.0 + 48.0, 5.0), vFontSize, iDate.y + 1.0, 2.0, 0.0));\n    vColour = mix(vColour, vec3(1.0, 1.0, 0.0), PrintValue(fragCoord, vec2(0.0 + 72.0, 5.0), vFontSize, iDate.z, 2.0, 0.0));\n    vColour = mix(vColour, vec3(1.0, 0.0, 1.0), PrintValue(fragCoord, vec2(184.0, 5.0), vFontSize, mod(iDate.w / (60.0 * 60.0), 12.0), 2.0, 0.0));\n    vColour = mix(vColour, vec3(1.0, 0.0, 1.0), PrintValue(fragCoord, vec2(184.0 + 24.0, 5.0), vFontSize, mod(iDate.w / 60.0, 60.0), 2.0, 0.0));\n    vColour = mix(vColour, vec3(1.0, 0.0, 1.0), PrintValue(fragCoord, vec2(184.0 + 48.0, 5.0), vFontSize, mod(iDate.w, 60.0), 2.0, 0.0));\n    if (iMouse.x > 0.0)\n    {\n        vec2 vPixelCoord2 = iMouse.xy + vec2(-52.0, 6.0);\n        float fValue2 = iMouse.x / iResolution.x;\n        fDigits = 1.0;\n        fDecimalPlaces = 3.0;\n        float fIsDigit2 = PrintValue(fragCoord, vPixelCoord2, vFontSize, fValue2, fDigits, fDecimalPlaces);\n        vColour = mix( vColour, vec3(0.0, 1.0, 0.0), fIsDigit2);\n        vec2 vPixelCoord3 = iMouse.xy + vec2(0.0, 6.0);\n        float fValue3 = iMouse.y / iResolution.y;\n        fDigits = 1.0;\n        float fIsDigit3 = PrintValue(fragCoord, vPixelCoord3, vFontSize, fValue3, fDigits, fDecimalPlaces);\n        vColour = mix(vColour, vec3(0.0, 1.0, 0.0), fIsDigit3);\n    }\n    fragColor = vec4(vColour,1.0);\n}\n\nvoid main() \n{\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n    mainImage(color, gl_FragCoord.xy);\n    color.w = 1.0;\n    gl_FragColor = color;\n}   \n\n\n\u8aac\u660e\niDate\u3092\u5b9f\u88c5\u3057\u305f\u3002\nDate\u3092uniform4fv\u3067\u6d41\u3057\u8fbc\u3080\u3002\n#\u6982\u8981\njsdo\u3067shadertoy\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3044\u3002\n\u65e5\u4ed8\u30c7\u30fc\u30bf\u3082\u4f7f\u3044\u305f\u3044\u3002\n#\u6210\u679c\u7269\nhttp://jsdo.it/ohisama1/Iy2H\n#\u5199\u771f\n![d.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/cb4fc92e-b4e7-1e51-efd5-9446c3ac9295.jpeg)\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\nprecision mediump float;\nuniform vec2 iResolution;\nuniform float iGlobalTime;\nuniform vec4 iMouse;    \nuniform sampler2D iChannel0;\nuniform vec4 iDate;    \n    \nconst float kCharBlank = 12.0;\nconst float kCharMinus = 11.0;\nconst float kCharDecimalPoint = 10.0;\n#ifndef BITMAP_VERSION\nfloat InRect(const in vec2 vUV, const in vec4 vRect)\n{\n\tvec2 vTestMin = step(vRect.xy, vUV.xy);\n\tvec2 vTestMax = step(vUV.xy, vRect.zw);\t\n\tvec2 vTest = vTestMin * vTestMax;\n\treturn vTest.x * vTest.y;\n}\nfloat SampleDigit(const in float fDigit, const in vec2 vUV)\n{\n\tconst float x0 = 0.0 / 4.0;\n\tconst float x1 = 1.0 / 4.0;\n\tconst float x2 = 2.0 / 4.0;\n\tconst float x3 = 3.0 / 4.0;\n\tconst float x4 = 4.0 / 4.0;\n\tconst float y0 = 0.0 / 5.0;\n\tconst float y1 = 1.0 / 5.0;\n\tconst float y2 = 2.0 / 5.0;\n\tconst float y3 = 3.0 / 5.0;\n\tconst float y4 = 4.0 / 5.0;\n\tconst float y5 = 5.0 / 5.0;\n\tvec4 vRect0 = vec4(0.0);\n\tvec4 vRect1 = vec4(0.0);\n\tvec4 vRect2 = vec4(0.0);\n\tif (fDigit < 0.5) // 0\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y1, x2, y4);\n\t}\n\telse if (fDigit < 1.5) // 1\n\t{\n\t\tvRect0 = vec4(x1, y0, x2, y5); \n        vRect1 = vec4(x0, y0, x0, y0);\n\t}\n\telse if (fDigit < 2.5) // 2\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x0, y3, x2, y4); \n        vRect2 = vec4(x1, y1, x3, y2);\n\t}\n\telse if (fDigit < 3.5) // 3\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x0, y3, x2, y4); \n        vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if (fDigit < 4.5) // 4\n\t{\n\t\tvRect0 = vec4(x0, y1, x2, y5); \n        vRect1 = vec4(x1, y2, x2, y5); \n        vRect2 = vec4(x2, y0, x3, y3);\n\t}\n\telse if (fDigit < 5.5) // 5\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y3, x3, y4); \n        vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if (fDigit < 6.5) // 6\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y3, x3, y4); \n        vRect2 = vec4(x1, y1, x2, y2);\n\t}\n\telse if (fDigit < 7.5) // 7\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x0, y0, x2, y4);\n\t}\n\telse if (fDigit < 8.5) // 8\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y1, x2, y2); \n        vRect2 = vec4(x1, y3, x2, y4);\n\t}\n\telse if (fDigit < 9.5) // 9\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); \n        vRect1 = vec4(x1, y3, x2, y4); \n        vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if (fDigit < 10.5) // '.'\n\t{\n\t\tvRect0 = vec4(x1, y0, x2, y1);\n\t}\n\telse if (fDigit < 11.5) // '-'\n\t{\n\t\tvRect0 = vec4(x0, y2, x3, y3);\n\t}\t\n\tfloat fResult = InRect(vUV, vRect0) + InRect(vUV, vRect1) + InRect(vUV, vRect2);\n\treturn mod(fResult, 2.0);\n}\n#else\nfloat SampleDigit(const in float fDigit, const in vec2 vUV)\n{\t\t\n\tif (vUV.x < 0.0) return 0.0;\n\tif (vUV.y < 0.0) return 0.0;\n\tif (vUV.x >= 1.0) return 0.0;\n\tif (vUV.y >= 1.0) return 0.0;\n\tfloat fDigitBinary = 0.0;\n\tif (fDigit < 0.5) // 0\n\t{\n\t\tfDigitBinary = 7.0 + 5.0 * 16.0 + 5.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;\n\t}\n\telse if (fDigit < 1.5) // 1\n\t{\n\t\tfDigitBinary = 2.0 + 2.0 * 16.0 + 2.0 * 256.0 + 2.0 * 4096.0 + 2.0 * 65536.0;\n\t}\n\telse if (fDigit < 2.5) // 2\n\t{\n\t\tfDigitBinary = 7.0 + 1.0 * 16.0 + 7.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;\n\t}\n\telse if (fDigit < 3.5) // 3\n\t{\n\t\tfDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;\n\t}\n\telse if (fDigit < 4.5) // 4\n\t{\n\t\tfDigitBinary = 4.0 + 7.0 * 16.0 + 5.0 * 256.0 + 1.0 * 4096.0 + 1.0 * 65536.0;\n\t}\n\telse if (fDigit < 5.5) // 5\n\t{\n\t\tfDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 1.0 * 4096.0 + 7.0 * 65536.0;\n\t}\n\telse if (fDigit < 6.5) // 6\n\t{\n\t\tfDigitBinary = 7.0 + 5.0 * 16.0 + 7.0 * 256.0 + 1.0 * 4096.0 + 7.0 * 65536.0;\n\t}\n\telse if (fDigit < 7.5) // 7\n\t{\n\t\tfDigitBinary = 4.0 + 4.0 * 16.0 + 4.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;\n\t}\n\telse if (fDigit < 8.5) // 8\n\t{\n\t\tfDigitBinary = 7.0 + 5.0 * 16.0 + 7.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;\n\t}\n\telse if (fDigit < 9.5) // 9\n\t{\n\t\tfDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;\n\t}\n\telse if (fDigit < 10.5) // '.'\n\t{\n\t\tfDigitBinary = 2.0 + 0.0 * 16.0 + 0.0 * 256.0 + 0.0 * 4096.0 + 0.0 * 65536.0;\n\t}\n\telse if (fDigit < 11.5) // '-'\n\t{\n\t\tfDigitBinary = 0.0 + 0.0 * 16.0 + 7.0 * 256.0 + 0.0 * 4096.0 + 0.0 * 65536.0;\n\t}\n\tvec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n\tfloat fIndex = vPixel.x + (vPixel.y * 4.0);\n\treturn mod(floor(fDigitBinary / pow(2.0, fIndex)), 2.0);\n}\n#endif\nfloat PrintValue(const in vec2 vStringCharCoords, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n\tfloat fAbsValue = abs(fValue);\n\tfloat fStringCharIndex = floor(vStringCharCoords.x);\n\tfloat fLog10Value = log2(fAbsValue) / log2(10.0);\n\tfloat fBiggestDigitIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitCharacter = kCharBlank;\n\tfloat fDigitIndex = fMaxDigits - fStringCharIndex;\n\tif (fDigitIndex > (-fDecimalPlaces - 1.5))\n\t{\n\t\tif (fDigitIndex > fBiggestDigitIndex)\n\t\t{\n\t\t\tif (fValue < 0.0)\n\t\t\t{\n\t\t\t\tif (fDigitIndex < (fBiggestDigitIndex + 1.5))\n\t\t\t\t{\n\t\t\t\t\tfDigitCharacter = kCharMinus;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\t\t\n\t\t\tif (fDigitIndex == -1.0)\n\t\t\t{\n\t\t\t\tif (fDecimalPlaces > 0.0)\n\t\t\t\t{\n\t\t\t\t\tfDigitCharacter = kCharDecimalPoint;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (fDigitIndex < 0.0)\n\t\t\t\t{\n\t\t\t\t\tfDigitIndex += 1.0;\n\t\t\t\t}\n\t\t\t\tfloat fDigitValue = (fAbsValue / (pow(10.0, fDigitIndex)));\n\t\t\t\tfDigitCharacter = mod(floor(0.0001 + fDigitValue), 10.0);\n    \t\t}\t\t\n\t\t}\n\t}\n\tvec2 vCharPos = vec2(fract(vStringCharCoords.x), vStringCharCoords.y);\n\treturn SampleDigit(fDigitCharacter, vCharPos);\t\n}\nfloat PrintValue(in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n\treturn PrintValue((fragCoord.xy - vPixelCoords) / vFontSize, fValue, fMaxDigits, fDecimalPlaces);\n}\nfloat GetCurve(float x)\n{\n\treturn sin(x * 3.14159 * 4.0);\n}\nfloat GetCurveDeriv(float x) \n{ \n\treturn 3.14159 * 4.0 * cos(x * 3.14159 * 4.0); \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec3 vColour = vec3(0.0);\n\tvec2 vFontSize = vec2(8.0, 15.0);\n\tif (abs(fragCoord.y - iResolution.y * 0.5) < 1.0)\n\t{\n\t\tvColour = vec3(0.25);\n\t}\n\tfloat fCurveX = fragCoord.x / iResolution.x;\n\tfloat fSinY = (GetCurve(fCurveX) * 0.25 + 0.5) * iResolution.y;\n\tfloat fSinYdX = (GetCurveDeriv(fCurveX) * 0.25) * iResolution.y / iResolution.x;\n\tfloat fDistanceToCurve = abs(fSinY - fragCoord.y) / sqrt(1.0+fSinYdX*fSinYdX);\n\tfloat fSetPixel = fDistanceToCurve - 1.0;\n    vColour = mix(vec3(1.0, 0.0, 0.0), vColour, clamp(fSetPixel, 0.0, 1.0));\t\n\tfloat fValue4 = GetCurve(iMouse.x / iResolution.x);\n\tfloat fPixelYCoord = (fValue4 * 0.25 + 0.5) * iResolution.y;\n\tfloat fDistToPointA = length( vec2(iMouse.x, fPixelYCoord) - fragCoord.xy) - 4.0;\n\tvColour = mix(vColour, vec3(0.0, 0.0, 1.0), (1.0 - clamp(fDistToPointA, 0.0, 1.0)));\n\tfloat fDistToPointB = length( vec2(iMouse.x, iMouse.y) - fragCoord.xy) - 4.0;\n\tvColour = mix(vColour, vec3(0.0, 1.0, 0.0), (1.0 - clamp(fDistToPointB, 0.0, 1.0)));\n\tvec2 vPixelCoord4 = vec2(iMouse.x, fPixelYCoord) + vec2(4.0, 4.0);\n\tfloat fDigits = 1.0;\n\tfloat fDecimalPlaces = 2.0;\n\tfloat fIsDigit4 = PrintValue(fragCoord, vPixelCoord4, vFontSize, fValue4, fDigits, fDecimalPlaces);\n\tvColour = mix( vColour, vec3(0.0, 0.0, 1.0), fIsDigit4);\n\tvec2 vPixelCoord1 = vec2(96.0, 5.0);\n\tfloat fValue1 = iGlobalTime;\n\tfDigits = 6.0;\n\tfloat fIsDigit1 = PrintValue(fragCoord, vPixelCoord1, vFontSize, fValue1, fDigits, fDecimalPlaces);\n\tvColour = mix(vColour, vec3(0.0, 1.0, 1.0), fIsDigit1);\n\tvColour = mix(vColour, vec3(1.0, 1.0, 0.0), PrintValue(fragCoord, vec2(0.0, 5.0), vFontSize, iDate.x, 4.0, 0.0));\n\tvColour = mix(vColour, vec3(1.0, 1.0, 0.0), PrintValue(fragCoord, vec2(0.0 + 48.0, 5.0), vFontSize, iDate.y + 1.0, 2.0, 0.0));\n\tvColour = mix(vColour, vec3(1.0, 1.0, 0.0), PrintValue(fragCoord, vec2(0.0 + 72.0, 5.0), vFontSize, iDate.z, 2.0, 0.0));\n\tvColour = mix(vColour, vec3(1.0, 0.0, 1.0), PrintValue(fragCoord, vec2(184.0, 5.0), vFontSize, mod(iDate.w / (60.0 * 60.0), 12.0), 2.0, 0.0));\n\tvColour = mix(vColour, vec3(1.0, 0.0, 1.0), PrintValue(fragCoord, vec2(184.0 + 24.0, 5.0), vFontSize, mod(iDate.w / 60.0, 60.0), 2.0, 0.0));\n\tvColour = mix(vColour, vec3(1.0, 0.0, 1.0), PrintValue(fragCoord, vec2(184.0 + 48.0, 5.0), vFontSize, mod(iDate.w, 60.0), 2.0, 0.0));\n\tif (iMouse.x > 0.0)\n\t{\n\t\tvec2 vPixelCoord2 = iMouse.xy + vec2(-52.0, 6.0);\n\t\tfloat fValue2 = iMouse.x / iResolution.x;\n\t\tfDigits = 1.0;\n\t\tfDecimalPlaces = 3.0;\n\t\tfloat fIsDigit2 = PrintValue(fragCoord, vPixelCoord2, vFontSize, fValue2, fDigits, fDecimalPlaces);\n\t\tvColour = mix( vColour, vec3(0.0, 1.0, 0.0), fIsDigit2);\n\t\tvec2 vPixelCoord3 = iMouse.xy + vec2(0.0, 6.0);\n\t\tfloat fValue3 = iMouse.y / iResolution.y;\n\t\tfDigits = 1.0;\n\t\tfloat fIsDigit3 = PrintValue(fragCoord, vPixelCoord3, vFontSize, fValue3, fDigits, fDecimalPlaces);\n\t\tvColour = mix(vColour, vec3(0.0, 1.0, 0.0), fIsDigit3);\n\t}\n\tfragColor = vec4(vColour,1.0);\n}\n\nvoid main() \n{\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n    mainImage(color, gl_FragCoord.xy);\n    color.w = 1.0;\n    gl_FragColor = color;\n}   \n```\n#\u8aac\u660e\niDate\u3092\u5b9f\u88c5\u3057\u305f\u3002\nDate\u3092uniform4fv\u3067\u6d41\u3057\u8fbc\u3080\u3002\n", "tags": ["jsdo", "shadertoy", "GLSL", "WebGL"]}