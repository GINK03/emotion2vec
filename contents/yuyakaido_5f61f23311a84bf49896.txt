{"context": "\n\n\u306f\u3058\u3081\u306b\nRxJava Advent Calendar 2016\u306e17\u65e5\u76ee\u3067\u3059\u3002\n\u307f\u306a\u3055\u3093\u3001RxJava\u4f7f\u3063\u3066\u307e\u3059\u304b\uff1f\u79c1\u306f\u500b\u4eba\u3067\u3082\u4ed5\u4e8b\u3067\u3082\u30ac\u30c3\u30c4\u30ea\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001RxJava\u3092\u4f7f\u3063\u305fAndroid\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u95a2\u3057\u3066\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u79c1\u306f\u300cError Handing in RxJava\u300d\u3068\u3044\u3046\u30bf\u30a4\u30c8\u30eb\u3067 DroidKaigi 2017\u306b\u767b\u58c7\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u767a\u8868\u4e88\u5b9a\u306e\u5185\u5bb9\u3092\u3056\u3063\u304f\u308a\u3068\u307e\u3068\u3081\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u3046Operator\u306e\u7d39\u4ecb\nRxJava\u306b\u306f\u3044\u304f\u3064\u304b\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u7528\u306e\u4ee5\u4e0b\u306e\u3088\u3046\u306aOperator\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nonError\nonErrorReturn\nonErrorResumeNext\nretry\nretryWhen\n\n\nonError\n\u3053\u308c\u306f\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u3067\u6295\u3052\u3089\u308c\u305fExceptioin\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306eOperator\u3067\u3059\u3002\n        Observable observable = Observable.just(0);\n        observable\n                .map(new Func1() {\n                    @Override\n                    public Object call(Object o) {\n                        throw new RuntimeException();\n                    }\n                })\n                .subscribe(new Subscriber() {\n                    @Override\n                    public void onCompleted() {}\n\n                    @Override\n                    public void onError(Throwable e) {}\n\n                    @Override\n                    public void onNext(Object o) {}\n                });\n\nmap\u5185\u3067throw\u3057\u305fException\u304conError\u306b\u6e21\u3063\u3066\u304d\u307e\u3059\u3002\n\nonErrorReturn\n\u3053\u308c\u306fException\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u4ee3\u308f\u308a\u306e\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u305f\u3081\u306eOperator\u3067\u3059\u3002\n        Observable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .onErrorReturn(new Func1<Throwable, Integer>() {\n                    @Override\n                    public Integer call(Throwable throwable) {\n                        return 10;\n                    }\n                })\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n\nmap\u5185\u3067Exception\u304cthrow\u3055\u308c\u308b\u3068\u3001onErrorReturn\u304c\u767a\u706b\u3057\u3001\u4ee3\u308f\u308a\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u300c10\u300d\u304c\u8fd4\u308a\u307e\u3059\u3002\n\nonErrorResumeNext\n\u3053\u308c\u306fException\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u4ee3\u308f\u308a\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6d41\u3059\u305f\u3081\u306eOperator\u3067\u3059\u3002\n        Observable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .onErrorResumeNext(new Func1<Throwable, Observable<? extends Integer>>() {\n                    @Override\n                    public Observable<? extends Integer> call(Throwable throwable) {\n                        return Observable.just(0);\n                    }\n                })\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n\nmap\u5185\u3067Exception\u304cthrow\u3055\u308c\u308b\u3068\u3001onErrorResumeNext\u304c\u767a\u706b\u3057\u3001\u4ee3\u308f\u308a\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u300cObservable.just(0)\u300d\u304c\u8fd4\u308a\u307e\u3059\u3002\n\nretry\n\u3053\u308c\u306fException\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u305f\u3081\u306eOperator\u3067\u3059\u3002\nObservable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .retry()\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n\nmap\u5185\u3067Exception\u304cthrow\u3055\u308c\u308b\u3068\u3001\u901a\u5e38\u306f\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u307e\u3059\u304c\u3001retry\u3092\u66f8\u304f\u3053\u3068\u3067\u518d\u5ea6subscribe\u3055\u308c\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u7121\u9650\u306b\u30ea\u30c8\u30e9\u30a4\u3055\u308c\u308b\u307e\u3059\u304c\u3001\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3001\u901a\u5e38\u306f\u30ea\u30c8\u30e9\u30a4\u4e0a\u9650\u3092\u8a2d\u5b9a\u3057\u305f\u65b9\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\nretryWhen\nretryWhen\u306f\u5c11\u3057\u5206\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u30c8\u30ea\u30ac\u30fc\u3068\u306a\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8fd4\u3059\u305f\u3081\u306eOperator\u3067\u3059\u3002\nretry\u306e\u5834\u5408\u306fException\u304c\u6295\u3052\u3089\u308c\u305f\u77ac\u9593\u306b\u30ea\u30c8\u30e9\u30a4\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u304c\u3001retryWhen\u3092\u4f7f\u3046\u3053\u3068\u306710\u79d2\u5f85\u3063\u3066\u304b\u3089\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u3068\u3044\u3046\u3068\u3044\u3063\u305f\u5177\u5408\u306b\u30ea\u30c8\u30e9\u30a4\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u300210\u79d2\u5f85\u3063\u3066\u304b\u3089\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\nObservable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {\n                    @Override\n                    public Observable<?> call(Observable<? extends Throwable> observable) {\n                        return observable.flatMap(new Func1<Throwable, Observable<?>>() {\n                            @Override\n                            public Observable<?> call(Throwable throwable) {\n                                return Observable.timer(10, TimeUnit.SECONDS);\n                            }\n                        });\n                    }\n                })\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n\n\n\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\nAndroid\u30a2\u30d7\u30ea\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u304c\u3088\u304f\u7528\u3044\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u3092RxJava\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nToast\u3092\u8868\u793a\u3059\u308b\n\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u5c0b\u306d\u308b\n\n\nToast\u3092\u8868\u793a\u3059\u308b\n\u3053\u308c\u306f\u7c21\u5358\u3067\u3059\u306d\u3002onError\u3067Toast\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n        Observable observable = Observable.just(0);\n        observable\n                .map(new Func1() {\n                    @Override\n                    public Object call(Object o) {\n                        throw new RuntimeException();\n                    }\n                })\n                .subscribe(new Subscriber() {\n                    @Override\n                    public void onCompleted() {}\n\n                    @Override\n                    public void onError(Throwable e) {\n                        Toast.makeText(getApplicationContext(), \"Error\", Toast.LENGTH_SHORT).show();\n                    }\n\n                    @Override\n                    public void onNext(Object o) {}\n                });\n\n\n\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u5c0b\u306d\u308b\n\u3053\u308c\u306f\u5148\u7a0b\u7d39\u4ecb\u3057\u305fretryWhen\u3092\u4f7f\u3044\u307e\u3059\u3002retryWhen\u5185\u3067Snackbar\u3092\u7528\u3044\u3066\u30e6\u30fc\u30b6\u30fc\u306b\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5c0b\u306d\u307e\u3059\u3002\n        Observable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {\n                    @Override\n                    public Observable<?> call(Observable<? extends Throwable> observable) {\n                        return observable.flatMap(new Func1<Throwable, Observable<?>>() {\n                            @Override\n                            public Observable<?> call(Throwable throwable) {\n                                return Observable.create(new Observable.OnSubscribe<Void>() {\n                                    @Override\n                                    public void call(final Subscriber<? super Void> subscriber) {\n                                        Snackbar snackbar = Snackbar.make(view, \"Retry?\", Snackbar.LENGTH_INDEFINITE);\n                                        snackbar.setAction(\"Yes\", new View.OnClickListener() {\n                                            @Override\n                                            public void onClick(View view) {\n                                                subscriber.onNext(null);\n                                            }\n                                        });\n                                        snackbar.show();\n                                    }\n                                });\n                            }\n                        });\n                    }\n                })\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u7528\u306eOperator\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\nonError\n\n\nException\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\nonErrorReturn\n\n\nExceptioin\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u4ee3\u308f\u308a\u306e\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n\n\nonErrorResumeNext\n\n\nException\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u4ee3\u308f\u308a\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6d41\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n\n\nretry\n\n\nException\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\nretryWhen\n\n\n\u30ea\u30c8\u30e9\u30a4\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\n\n\u4e0a\u8a18\u306eOperator\u3092\u8e0f\u307e\u3048\u3066\u3001Android\u3067\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\nToast\u3092\u8868\u793a\u3059\u308b\n\n\nonError\u3067Toast\u3092\u8868\u793a\u3059\u308b\n\n\n\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u5c0b\u306d\u308b\n\n\nretryWhen\u3068Snackbar\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\n\n\n\n\u3053\u306e\u4ed6\u306b\u3082\u30b3\u30e1\u30f3\u30c8\u306a\u3069\u3044\u305f\u3060\u3051\u308c\u3070\u5b9f\u88c5\u4f8b\u3092\u8ffd\u8a18\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u826f\u3044RxJava\u30e9\u30a4\u30d5\u3092\uff01\n# \u306f\u3058\u3081\u306b\n[RxJava Advent Calendar 2016](http://qiita.com/advent-calendar/2016/rxjava)\u306e17\u65e5\u76ee\u3067\u3059\u3002\n\n\u307f\u306a\u3055\u3093\u3001RxJava\u4f7f\u3063\u3066\u307e\u3059\u304b\uff1f\u79c1\u306f\u500b\u4eba\u3067\u3082\u4ed5\u4e8b\u3067\u3082\u30ac\u30c3\u30c4\u30ea\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001RxJava\u3092\u4f7f\u3063\u305fAndroid\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u95a2\u3057\u3066\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u79c1\u306f\u300cError Handing in RxJava\u300d\u3068\u3044\u3046\u30bf\u30a4\u30c8\u30eb\u3067 [DroidKaigi 2017](https://droidkaigi.github.io/2017/)\u306b\u767b\u58c7\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u767a\u8868\u4e88\u5b9a\u306e\u5185\u5bb9\u3092\u3056\u3063\u304f\u308a\u3068\u307e\u3068\u3081\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u3046Operator\u306e\u7d39\u4ecb\nRxJava\u306b\u306f\u3044\u304f\u3064\u304b\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u7528\u306e\u4ee5\u4e0b\u306e\u3088\u3046\u306aOperator\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n- onError\n- onErrorReturn\n- onErrorResumeNext\n- retry\n- retryWhen\n\n## onError\n\u3053\u308c\u306f\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u3067\u6295\u3052\u3089\u308c\u305fExceptioin\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306eOperator\u3067\u3059\u3002\n\n```java\n        Observable observable = Observable.just(0);\n        observable\n                .map(new Func1() {\n                    @Override\n                    public Object call(Object o) {\n                        throw new RuntimeException();\n                    }\n                })\n                .subscribe(new Subscriber() {\n                    @Override\n                    public void onCompleted() {}\n\n                    @Override\n                    public void onError(Throwable e) {}\n\n                    @Override\n                    public void onNext(Object o) {}\n                });\n```\n\nmap\u5185\u3067throw\u3057\u305fException\u304conError\u306b\u6e21\u3063\u3066\u304d\u307e\u3059\u3002\n\n## onErrorReturn\n\u3053\u308c\u306fException\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u4ee3\u308f\u308a\u306e\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u305f\u3081\u306eOperator\u3067\u3059\u3002\n\n```java\n        Observable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .onErrorReturn(new Func1<Throwable, Integer>() {\n                    @Override\n                    public Integer call(Throwable throwable) {\n                        return 10;\n                    }\n                })\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n```\n\nmap\u5185\u3067Exception\u304cthrow\u3055\u308c\u308b\u3068\u3001onErrorReturn\u304c\u767a\u706b\u3057\u3001\u4ee3\u308f\u308a\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u300c10\u300d\u304c\u8fd4\u308a\u307e\u3059\u3002\n\n## onErrorResumeNext\n\u3053\u308c\u306fException\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u4ee3\u308f\u308a\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6d41\u3059\u305f\u3081\u306eOperator\u3067\u3059\u3002\n\n```java\n        Observable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .onErrorResumeNext(new Func1<Throwable, Observable<? extends Integer>>() {\n                    @Override\n                    public Observable<? extends Integer> call(Throwable throwable) {\n                        return Observable.just(0);\n                    }\n                })\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n```\n\nmap\u5185\u3067Exception\u304cthrow\u3055\u308c\u308b\u3068\u3001onErrorResumeNext\u304c\u767a\u706b\u3057\u3001\u4ee3\u308f\u308a\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u300cObservable.just(0)\u300d\u304c\u8fd4\u308a\u307e\u3059\u3002\n\n## retry\n\u3053\u308c\u306fException\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u305f\u3081\u306eOperator\u3067\u3059\u3002\n\n```java\nObservable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .retry()\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n```\n\nmap\u5185\u3067Exception\u304cthrow\u3055\u308c\u308b\u3068\u3001\u901a\u5e38\u306f\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u307e\u3059\u304c\u3001retry\u3092\u66f8\u304f\u3053\u3068\u3067\u518d\u5ea6subscribe\u3055\u308c\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u7121\u9650\u306b\u30ea\u30c8\u30e9\u30a4\u3055\u308c\u308b\u307e\u3059\u304c\u3001\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3001\u901a\u5e38\u306f\u30ea\u30c8\u30e9\u30a4\u4e0a\u9650\u3092\u8a2d\u5b9a\u3057\u305f\u65b9\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\n## retryWhen\nretryWhen\u306f\u5c11\u3057\u5206\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u30c8\u30ea\u30ac\u30fc\u3068\u306a\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8fd4\u3059\u305f\u3081\u306eOperator\u3067\u3059\u3002\nretry\u306e\u5834\u5408\u306fException\u304c\u6295\u3052\u3089\u308c\u305f\u77ac\u9593\u306b\u30ea\u30c8\u30e9\u30a4\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u304c\u3001retryWhen\u3092\u4f7f\u3046\u3053\u3068\u306710\u79d2\u5f85\u3063\u3066\u304b\u3089\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u3068\u3044\u3046\u3068\u3044\u3063\u305f\u5177\u5408\u306b\u30ea\u30c8\u30e9\u30a4\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u300210\u79d2\u5f85\u3063\u3066\u304b\u3089\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```java\nObservable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {\n                    @Override\n                    public Observable<?> call(Observable<? extends Throwable> observable) {\n                        return observable.flatMap(new Func1<Throwable, Observable<?>>() {\n                            @Override\n                            public Observable<?> call(Throwable throwable) {\n                                return Observable.timer(10, TimeUnit.SECONDS);\n                            }\n                        });\n                    }\n                })\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n```\n\n# \u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\nAndroid\u30a2\u30d7\u30ea\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u304c\u3088\u304f\u7528\u3044\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u3092RxJava\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n- Toast\u3092\u8868\u793a\u3059\u308b\n- \u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u5c0b\u306d\u308b\n\n## Toast\u3092\u8868\u793a\u3059\u308b\n\u3053\u308c\u306f\u7c21\u5358\u3067\u3059\u306d\u3002onError\u3067Toast\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```java\n        Observable observable = Observable.just(0);\n        observable\n                .map(new Func1() {\n                    @Override\n                    public Object call(Object o) {\n                        throw new RuntimeException();\n                    }\n                })\n                .subscribe(new Subscriber() {\n                    @Override\n                    public void onCompleted() {}\n\n                    @Override\n                    public void onError(Throwable e) {\n                        Toast.makeText(getApplicationContext(), \"Error\", Toast.LENGTH_SHORT).show();\n                    }\n\n                    @Override\n                    public void onNext(Object o) {}\n                });\n```\n\n## \u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u5c0b\u306d\u308b\n\u3053\u308c\u306f\u5148\u7a0b\u7d39\u4ecb\u3057\u305fretryWhen\u3092\u4f7f\u3044\u307e\u3059\u3002retryWhen\u5185\u3067Snackbar\u3092\u7528\u3044\u3066\u30e6\u30fc\u30b6\u30fc\u306b\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5c0b\u306d\u307e\u3059\u3002\n\n```java\n        Observable<Integer> observable = Observable.just(0);\n        observable\n                .map(new Func1<Integer, Integer>() {\n                    @Override\n                    public Integer call(Integer integer) {\n                        throw new RuntimeException();\n                    }\n                })\n                .retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {\n                    @Override\n                    public Observable<?> call(Observable<? extends Throwable> observable) {\n                        return observable.flatMap(new Func1<Throwable, Observable<?>>() {\n                            @Override\n                            public Observable<?> call(Throwable throwable) {\n                                return Observable.create(new Observable.OnSubscribe<Void>() {\n                                    @Override\n                                    public void call(final Subscriber<? super Void> subscriber) {\n                                        Snackbar snackbar = Snackbar.make(view, \"Retry?\", Snackbar.LENGTH_INDEFINITE);\n                                        snackbar.setAction(\"Yes\", new View.OnClickListener() {\n                                            @Override\n                                            public void onClick(View view) {\n                                                subscriber.onNext(null);\n                                            }\n                                        });\n                                        snackbar.show();\n                                    }\n                                });\n                            }\n                        });\n                    }\n                })\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer integer) {}\n                });\n```\n\n# \u307e\u3068\u3081\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u7528\u306eOperator\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\n- onError\n    - Exception\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n- onErrorReturn\n    - Exceptioin\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u4ee3\u308f\u308a\u306e\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n- onErrorResumeNext\n    - Exception\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u4ee3\u308f\u308a\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6d41\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n- retry\n    - Exception\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u306b\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n- retryWhen\n    - \u30ea\u30c8\u30e9\u30a4\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\u4e0a\u8a18\u306eOperator\u3092\u8e0f\u307e\u3048\u3066\u3001Android\u3067\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\n- Toast\u3092\u8868\u793a\u3059\u308b\n    - onError\u3067Toast\u3092\u8868\u793a\u3059\u308b\n- \u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u5c0b\u306d\u308b\n    - retryWhen\u3068Snackbar\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\n\n\u3053\u306e\u4ed6\u306b\u3082\u30b3\u30e1\u30f3\u30c8\u306a\u3069\u3044\u305f\u3060\u3051\u308c\u3070\u5b9f\u88c5\u4f8b\u3092\u8ffd\u8a18\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u826f\u3044RxJava\u30e9\u30a4\u30d5\u3092\uff01\n", "tags": ["RxJava", "Android"]}