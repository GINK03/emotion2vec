{"context": "\n\n\u6982\u8981\nSpark\u3067\u3001sc.textFile, rdd.saveAsTextFile\u3042\u305f\u308a\u306f\u8272\u3005\u306a\u30b5\u30f3\u30d7\u30eb\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u4ed6\u306e\u4f8b\u306f\u3042\u307e\u308a\u898b\u306a\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u3084\u308a\u304b\u305f\nPath#getFileSystem(sc.hadoopConfiguration)\u3092\u4f7f\u3046\n\u30d5\u30a1\u30a4\u30eb\u306e\u5b58\u5728\u78ba\u8a8d\n    val path = \"s3://hoge\"\n    val fsPath = new Path(path)\n    val fsOut = fsPath.getFileSystem(sc.hadoopConfiguration)\n    if (fsOut.exists(fsPath)) {\n      println(s\"input path found. path: $path\")\n    }else{\n      println(s\"input path not found. path: $path\")\n    }\n\n\u524a\u9664\u3002\n    val path = \"s3://hoge\"\n    val fsPath = new Path(path)\n    val fsOut = fsPath.getFileSystem(sc.hadoopConfiguration)\n    if (fsOut.exists(fsPath)) {\n      fsOut.delete(fsPath, true)\n      println(s\"deleted. path: $path\")\n    }\n\n\n\u6ce8\u610f\nsc.textFile \u306a\u3069\u3082\u305d\u3046\u3060\u304c\u3001s3\u3092\u4f7f\u304a\u3046\u3068\u601d\u3046\u3068Hadoop\u30af\u30e9\u30b9\u30bf\u306b\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u304c\u3055\u308c\u3066\u3044\u3066\u3001\u30af\u30e9\u30b9\u30d1\u30b9\u3082\u901a\u3063\u3066\u308b\u5fc5\u8981\u304c\u3042\u308b\u69d8\u5b50\u3002(s3, s3n\u30b9\u30ad\u30fc\u30de\u3092\u4f7f\u3046\u5834\u5408)\n\ncore-site.xml\n<property>\n  <name>fs.s3.impl</name>\n  <value>org.apache.hadoop.fs.s3.S3FileSystem</value>\n</property>\n\n<property>\n  <name>fs.s3n.impl</name>\n  <value>org.apache.hadoop.fs.s3native.NativeS3FileSystem</value>\n</property>\n\n\n\ncore-site.xml\n<property>\n  <name>fs.s3.awsAccessKeyId</name>\n  <value>some id</value>\n</property>\n\n<property>\n  <name>fs.s3n.awsAccessKeyId</name>\n  <value>some id</value>\n</property>\n\n<property>\n  <name>fs.s3.awsSecretAccessKey</name>\n  <value>some key</value>\n</property>\n\n<property>\n  <name>fs.s3n.awsSecretAccessKey</name>\n  <value>some key</value>\n</property>\n\n\n\nTODO\n\n.crc\u30d5\u30a1\u30a4\u30eb\u306f\u3069\u3046\u3044\u3046\u3068\u304d\u306b\u4f5c\u3089\u308c\u308b\u3093\u3060\u308d\u3046\u3002\nlocal\u306espark-submit\u3067s3\u306b\u7e4b\u3054\u3046\u3068\u3059\u308b\u3068ClassNotFoundException\u3067\u843d\u3061\u308b\u3002\n\n\nSpark\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f org.apache.hadoop.fs.s3native.NativeS3FileSystem \u304c\u5165\u3063\u3066\u306a\u3044\u3002\nJar\u3092\u8ffd\u52a0\u3059\u308c\u3070\u666e\u901a\u306b\u52d5\u304d\u305d\u3046\u3002\n\n\n\n\n## \u6982\u8981\nSpark\u3067\u3001`sc.textFile`, `rdd.saveAsTextFile`\u3042\u305f\u308a\u306f\u8272\u3005\u306a\u30b5\u30f3\u30d7\u30eb\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u4ed6\u306e\u4f8b\u306f\u3042\u307e\u308a\u898b\u306a\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n## \u3084\u308a\u304b\u305f\n\n`Path#getFileSystem(sc.hadoopConfiguration)`\u3092\u4f7f\u3046\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u5b58\u5728\u78ba\u8a8d\n\n```scala\n    val path = \"s3://hoge\"\n    val fsPath = new Path(path)\n    val fsOut = fsPath.getFileSystem(sc.hadoopConfiguration)\n    if (fsOut.exists(fsPath)) {\n      println(s\"input path found. path: $path\")\n    }else{\n      println(s\"input path not found. path: $path\")\n    }\n```\n\n\u524a\u9664\u3002\n\n```scala\n    val path = \"s3://hoge\"\n    val fsPath = new Path(path)\n    val fsOut = fsPath.getFileSystem(sc.hadoopConfiguration)\n    if (fsOut.exists(fsPath)) {\n      fsOut.delete(fsPath, true)\n      println(s\"deleted. path: $path\")\n    }\n```\n\n## \u6ce8\u610f\n\n`sc.textFile` \u306a\u3069\u3082\u305d\u3046\u3060\u304c\u3001s3\u3092\u4f7f\u304a\u3046\u3068\u601d\u3046\u3068Hadoop\u30af\u30e9\u30b9\u30bf\u306b\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u304c\u3055\u308c\u3066\u3044\u3066\u3001\u30af\u30e9\u30b9\u30d1\u30b9\u3082\u901a\u3063\u3066\u308b\u5fc5\u8981\u304c\u3042\u308b\u69d8\u5b50\u3002(s3, s3n\u30b9\u30ad\u30fc\u30de\u3092\u4f7f\u3046\u5834\u5408)\n\n```xml:core-site.xml\n<property>\n  <name>fs.s3.impl</name>\n  <value>org.apache.hadoop.fs.s3.S3FileSystem</value>\n</property>\n\n<property>\n  <name>fs.s3n.impl</name>\n  <value>org.apache.hadoop.fs.s3native.NativeS3FileSystem</value>\n</property>\n```\n\n```xml:core-site.xml\n<property>\n  <name>fs.s3.awsAccessKeyId</name>\n  <value>some id</value>\n</property>\n\n<property>\n  <name>fs.s3n.awsAccessKeyId</name>\n  <value>some id</value>\n</property>\n\n<property>\n  <name>fs.s3.awsSecretAccessKey</name>\n  <value>some key</value>\n</property>\n\n<property>\n  <name>fs.s3n.awsSecretAccessKey</name>\n  <value>some key</value>\n</property>\n```\n\n## TODO\n\n- .crc\u30d5\u30a1\u30a4\u30eb\u306f\u3069\u3046\u3044\u3046\u3068\u304d\u306b\u4f5c\u3089\u308c\u308b\u3093\u3060\u308d\u3046\u3002\n- local\u306espark-submit\u3067s3\u306b\u7e4b\u3054\u3046\u3068\u3059\u308b\u3068ClassNotFoundException\u3067\u843d\u3061\u308b\u3002\n  - Spark\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f `org.apache.hadoop.fs.s3native.NativeS3FileSystem` \u304c\u5165\u3063\u3066\u306a\u3044\u3002\n  - Jar\u3092\u8ffd\u52a0\u3059\u308c\u3070\u666e\u901a\u306b\u52d5\u304d\u305d\u3046\u3002\n", "tags": ["Spark", "hadoop", "S3", "EMR"]}