{"context": "iTerm\u306e\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u5185\u306b\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u308b\u6a5f\u80fd\u304c\u3064\u3044\u3066\u3044\u308b\u3002\n\n(\u516c\u5f0f\u30da\u30fc\u30b8\u306e\u753b\u50cf\u3092\u8ee2\u8f09)\n\u753b\u50cf\u51e6\u7406\u306a\u3069\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u5909\u66f4\u3092\u52a0\u3048\u3066\u5b9f\u884c\u3059\u308b\u306e\u3092\u7e70\u308a\u8fd4\u3057\u3066\u4f55\u5ea6\u3082\u8a66\u884c\u932f\u8aa4\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3002\u305d\u3046\u3044\u3046\u3068\u304d\u306b\u3001iTerm\u306e\u753b\u50cf\u8868\u793a\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3068\u9ad8\u901f\u306b\u30c8\u30e9\u30a4\u30a2\u30f3\u30c9\u30a8\u30e9\u30fc\u3067\u304d\u3066\u6357\u308b\u3002\n\u305f\u3068\u3048\u3070\u3001\u753b\u50cf\u304b\u3089\u9854\u8a8d\u8b58\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3059\u308b\u3002\u3053\u306e\u3068\u304d\u3001\u6a19\u6e96\u51fa\u529b\u306b\u753b\u50cf\u30d0\u30a4\u30ca\u30ea\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3002\nimport cv2\nimport sys\n\npath = sys.argv[1]\n\ncascade_file = \"/usr/local/Cellar/opencv/2.4.12_2/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml\"\n\nimage = cv2.imread(path)\ncascade = cv2.CascadeClassifier(cascade_file)\nfaces = cascade.detectMultiScale(image)\n\n(x, y, w, h) = faces[0]\n\nflag, buf = cv2.imencode('.png', image[y:y+h, x:x+w])\nprint(buf.tobytes())\n\npipe\u3057\u3066\u753b\u50cf\u8868\u793a\u30b3\u30de\u30f3\u30c9\u306b\u6d41\u3059\u3068iTerm\u5185\u306b\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u308b\u3002\u753b\u50cf\u3092\u540d\u524d\u3092\u3064\u3051\u3066\u4fdd\u5b58\u3057\u305f\u308a\u3001GUI\u3067\u8868\u793a\u3057\u305f\u308a\u3059\u308b\u51e6\u7406\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u66f8\u304b\u305a\u306b\u3059\u3080\u3002\npython face_detect.py ~/Downloads/trump.jpg | term-img\n\n\nterm-img \u3068\u3044\u3046npm\u3067\u5165\u308b\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u516c\u5f0f\u306eimgcat\u30b3\u30de\u30f3\u30c9\u3067\u3082\u540c\u3058\u3060\u3068\u601d\u3046\u3002\n\u753b\u50cf\u3092\u4fdd\u5b58\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u6a19\u6e96\u51fa\u529b\u3092\u4fdd\u5b58\u3059\u308c\u3070\u3044\u3044\u3002\n\npython face_detect.py ~/Downloads/trump.jpg > president.jpg\n\n\n\u307b\u304b\u306e\u30b3\u30de\u30f3\u30c9\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\n\u9854\u304c\u3067\u304b\u3059\u304e\u308b\u304b\u3089\u5c0f\u3055\u304f\u3057\u305f\u3044\u3068\u304d\u3082\u3042\u308b\u3068\u601d\u3046\u3002\u305d\u3046\u3044\u3046\u3068\u304d\u306f\u3001\u305f\u3068\u3048\u3070 imagemagick\u306bpipe\u304b\u3089\u6d41\u3059\u3053\u3068\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3002\npython face_detect.py ~/Downloads/trump.jpg | convert -resize 200x200 - jpg:- | term-img\n\n\n\u30b0\u30ea\u30c3\u30c1\u3057\u305f\u304f\u306a\u3063\u305f\u3068\u304d\n\u6025\u306b\u30a2\u30fc\u30c8\u306a\u6c17\u5206\u306b\u306a\u3063\u305f\u3068\u304d\u306f\u3001\u305d\u306e\u3042\u3068\u306bsed\u306b\u6d41\u3057\u3066\u753b\u50cf\u3092\u58ca\u305b\u3070\u3044\u3044\u3002\npython face_detect.py ~/Downloads/trump.jpg | convert -resize 64x64 - jpg:- | sed 's/0/1/g' | term-img\n\n\n\u305f\u304f\u3055\u3093\u30b0\u30ea\u30c3\u30c1\u3057\u305f\u304f\u306a\u3063\u305f\u3068\u304d\n\u3055\u3089\u306b\u7834\u58ca\u885d\u52d5\u3092\u6291\u3048\u3089\u308c\u306a\u304f\u306a\u3063\u305f\u3068\u304d\u306b\u306f\u3001for\u6587\u3067\u56de\u3059\u3068\u305d\u306e\u307e\u307e\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u3066\u9ad8\u901f\u306b\u7834\u58ca\u3055\u308c\u305f\u753b\u50cf\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\nfor i in $(seq 1 9); do python face_detect.py ~/Downloads/trump.jpg | convert -resize 64x64 - jpg:- | sed \"s/0/$i/g\" | term-img; done\n\niTerm\u306e\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f\u3001[\u30bf\u30fc\u30df\u30ca\u30eb\u5185\u306b\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u308b\u6a5f\u80fd](https://www.iterm2.com/documentation-images.html)\u304c\u3064\u3044\u3066\u3044\u308b\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/275/6b1ec702-6caf-13b4-68b6-9839283b176d.png)\n([\u516c\u5f0f\u30da\u30fc\u30b8](https://www.iterm2.com/documentation-images.html)\u306e\u753b\u50cf\u3092\u8ee2\u8f09)\n\n\u753b\u50cf\u51e6\u7406\u306a\u3069\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u5909\u66f4\u3092\u52a0\u3048\u3066\u5b9f\u884c\u3059\u308b\u306e\u3092\u7e70\u308a\u8fd4\u3057\u3066\u4f55\u5ea6\u3082\u8a66\u884c\u932f\u8aa4\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3002\u305d\u3046\u3044\u3046\u3068\u304d\u306b\u3001iTerm\u306e\u753b\u50cf\u8868\u793a\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3068\u9ad8\u901f\u306b\u30c8\u30e9\u30a4\u30a2\u30f3\u30c9\u30a8\u30e9\u30fc\u3067\u304d\u3066\u6357\u308b\u3002\n\n\u305f\u3068\u3048\u3070\u3001\u753b\u50cf\u304b\u3089\u9854\u8a8d\u8b58\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3059\u308b\u3002\u3053\u306e\u3068\u304d\u3001**\u6a19\u6e96\u51fa\u529b\u306b\u753b\u50cf\u30d0\u30a4\u30ca\u30ea\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3002**\n\n```python\nimport cv2\nimport sys\n\npath = sys.argv[1]\n\ncascade_file = \"/usr/local/Cellar/opencv/2.4.12_2/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml\"\n\nimage = cv2.imread(path)\ncascade = cv2.CascadeClassifier(cascade_file)\nfaces = cascade.detectMultiScale(image)\n\n(x, y, w, h) = faces[0]\n\nflag, buf = cv2.imencode('.png', image[y:y+h, x:x+w])\nprint(buf.tobytes())\n```\n\npipe\u3057\u3066\u753b\u50cf\u8868\u793a\u30b3\u30de\u30f3\u30c9\u306b\u6d41\u3059\u3068iTerm\u5185\u306b\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u308b\u3002\u753b\u50cf\u3092\u540d\u524d\u3092\u3064\u3051\u3066\u4fdd\u5b58\u3057\u305f\u308a\u3001GUI\u3067\u8868\u793a\u3057\u305f\u308a\u3059\u308b\u51e6\u7406\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u66f8\u304b\u305a\u306b\u3059\u3080\u3002\n\n```\npython face_detect.py ~/Downloads/trump.jpg | term-img\n```\n![image](https://qiita-image-store.s3.amazonaws.com/0/275/5d020b20-dc90-a96c-ce72-eaf9925afa8c.png)\n\n[term-img](https://github.com/sindresorhus/term-img-cli) \u3068\u3044\u3046npm\u3067\u5165\u308b\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u516c\u5f0f\u306eimgcat\u30b3\u30de\u30f3\u30c9\u3067\u3082\u540c\u3058\u3060\u3068\u601d\u3046\u3002\n\n\u753b\u50cf\u3092\u4fdd\u5b58\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u6a19\u6e96\u51fa\u529b\u3092\u4fdd\u5b58\u3059\u308c\u3070\u3044\u3044\u3002\n```\npython face_detect.py ~/Downloads/trump.jpg > president.jpg\n```\n\n## \u307b\u304b\u306e\u30b3\u30de\u30f3\u30c9\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\n\u9854\u304c\u3067\u304b\u3059\u304e\u308b\u304b\u3089\u5c0f\u3055\u304f\u3057\u305f\u3044\u3068\u304d\u3082\u3042\u308b\u3068\u601d\u3046\u3002\u305d\u3046\u3044\u3046\u3068\u304d\u306f\u3001\u305f\u3068\u3048\u3070 imagemagick\u306bpipe\u304b\u3089\u6d41\u3059\u3053\u3068\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3002\n\n`python face_detect.py ~/Downloads/trump.jpg | convert -resize 200x200 - jpg:- | term-img`\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/275/15a36872-6d5e-c986-fcbd-47937cc8c923.png)\n\n## \u30b0\u30ea\u30c3\u30c1\u3057\u305f\u304f\u306a\u3063\u305f\u3068\u304d\n\u6025\u306b\u30a2\u30fc\u30c8\u306a\u6c17\u5206\u306b\u306a\u3063\u305f\u3068\u304d\u306f\u3001\u305d\u306e\u3042\u3068\u306bsed\u306b\u6d41\u3057\u3066\u753b\u50cf\u3092\u58ca\u305b\u3070\u3044\u3044\u3002\n\n`python face_detect.py ~/Downloads/trump.jpg | convert -resize 64x64 - jpg:- | sed 's/0/1/g' | term-img`\n![image](https://qiita-image-store.s3.amazonaws.com/0/275/7b1a9bab-7c5b-2c33-70c2-59034359d05d.png)\n\n## \u305f\u304f\u3055\u3093\u30b0\u30ea\u30c3\u30c1\u3057\u305f\u304f\u306a\u3063\u305f\u3068\u304d\n\u3055\u3089\u306b\u7834\u58ca\u885d\u52d5\u3092\u6291\u3048\u3089\u308c\u306a\u304f\u306a\u3063\u305f\u3068\u304d\u306b\u306f\u3001for\u6587\u3067\u56de\u3059\u3068\u305d\u306e\u307e\u307e\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u3066\u9ad8\u901f\u306b\u7834\u58ca\u3055\u308c\u305f\u753b\u50cf\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\n`for i in $(seq 1 9); do python face_detect.py ~/Downloads/trump.jpg | convert -resize 64x64 - jpg:- | sed \"s/0/$i/g\" | term-img; done`\n![image](https://qiita-image-store.s3.amazonaws.com/0/275/8a35e68d-d07d-1aa6-8cab-12e7424ab3b3.png)\n", "tags": ["Terminal", "Python"]}