{"tags": ["\u4fe1\u53f7\u51e6\u7406", "Python", "scipy"], "context": " More than 1 year has passed since last update.numpy\u306e\u52c9\u5f37\u3092\u517c\u306d\u3066\u4e45\u3057\u3076\u308a\u306bICA\u3068\u304b\u66f8\u3044\u3066\u307f\u305f.\n\u4f7f\u3063\u3066\u307f\u308b\u3068,\u6848\u5916array\u3084\u3089matrix\u3084\u3089\u306e\u53d6\u308a\u6271\u3044\u304c\u9762\u5012\u3067\u3059\u306d.\n\u306a\u3093\u304b\u826f\u3044\u65b9\u6cd5\u306f\u3042\u308b\u3093\u3060\u308d\u3046\u304b\uff1f\n\nfast_ica.py\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport scipy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef g( val, alpha = 0.01 ):\n    return np.tanh( alpha * val )\n\ndef gd( val, alpha = 0.01 ):\n    return alpha * ( 1.0 - np.asarray( np.tanh( alpha * val ) ) )\n\ndef sym_orth( sig ):\n    a,b,c = np.linalg.svd( sig * sig.T )\n    return np.dot( np.dot( a, np.dot( np.diag( np.sqrt( 1./ b ) ), c ) ), sig )\n\ndef fast_ica( sig ):\n    m,n = sig.shape\n\n    #\u767d\u8272\u5316\n    u,s,v = np.linalg.svd( sig, full_matrices=False)\n    v = np.sqrt( n ) * v\n\n    #\u5206\u96e2\u30d5\u30a3\u30eb\u30bf\u306e\u521d\u671f\u5316\n    w = np.random.rand( m, m )\n    w = w / np.matrix( [ [ np.linalg.norm( w[ :, x ] ) ] * m for x in xrange( m ) ] ).T\n    w = sym_orth( w )\n\n    #ICA\n    err = 1.0\n    it = 0\n    max_iter = 3000\n    while 1e-12 < min( err , it < max_iter ):\n        last_w = w\n        w1 =  np.dot( v , g( np.dot( w.T , v ) ).T )\n        w2 = np.multiply( np.dot( gd( np.dot( w.T, v ) ), np.ones( (n, 1 ) ) ) , w )\n        w = ( w1 - w2 ) / n\n        w = sym_orth( w )\n        err = np.sum( np.abs( np.abs(w) - np.abs(last_w) ) )\n        it += 1\n\n    #0\u756a\u76ee\u306e\u4fe1\u53f7\u306e\u30b2\u30a4\u30f3\u3092\u57fa\u6e96\u306b\u5206\u96e2\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u6210\n    W = np.dot( np.diag( np.ravel( u[0,] ) ), np.dot( np.diag( s ) , w.T ) )\n    return np.dot( W, v )  / np.sqrt( n )\n\ndef main():\n    #\u30b9\u30fc\u30d1\u30fc\u30ac\u30a6\u30b7\u30a2\u30f3\u306a\u5206\u5e03\u3060\u3057\u30e9\u30d7\u30e9\u30b9\u5206\u5e03\u3067\n    s = np.random.laplace( 0., 1.0, ( 2, 10000 ) )\n    a = np.asmatrix( np.random.rand( 2,2 ) )\n    x = a * s\n    y = np.asarray( fast_ica( x ) )\n    plt.scatter( y[0,], y[1,] )\n    plt.show()\n    return\n\nif __name__ == '__main__':\n    main()\n\n\nnumpy\u306e\u52c9\u5f37\u3092\u517c\u306d\u3066\u4e45\u3057\u3076\u308a\u306bICA\u3068\u304b\u66f8\u3044\u3066\u307f\u305f.\n\u4f7f\u3063\u3066\u307f\u308b\u3068,\u6848\u5916array\u3084\u3089matrix\u3084\u3089\u306e\u53d6\u308a\u6271\u3044\u304c\u9762\u5012\u3067\u3059\u306d.\n\u306a\u3093\u304b\u826f\u3044\u65b9\u6cd5\u306f\u3042\u308b\u3093\u3060\u308d\u3046\u304b\uff1f\n\n```python:fast_ica.py\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport scipy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef g( val, alpha = 0.01 ):\n    return np.tanh( alpha * val )\n\ndef gd( val, alpha = 0.01 ):\n    return alpha * ( 1.0 - np.asarray( np.tanh( alpha * val ) ) )\n\ndef sym_orth( sig ):\n    a,b,c = np.linalg.svd( sig * sig.T )\n    return np.dot( np.dot( a, np.dot( np.diag( np.sqrt( 1./ b ) ), c ) ), sig )\n\ndef fast_ica( sig ):\n    m,n = sig.shape\n\n    #\u767d\u8272\u5316\n    u,s,v = np.linalg.svd( sig, full_matrices=False)\n    v = np.sqrt( n ) * v\n\n    #\u5206\u96e2\u30d5\u30a3\u30eb\u30bf\u306e\u521d\u671f\u5316\n    w = np.random.rand( m, m )\n    w = w / np.matrix( [ [ np.linalg.norm( w[ :, x ] ) ] * m for x in xrange( m ) ] ).T\n    w = sym_orth( w )\n\n    #ICA\n    err = 1.0\n    it = 0\n    max_iter = 3000\n    while 1e-12 < min( err , it < max_iter ):\n        last_w = w\n        w1 =  np.dot( v , g( np.dot( w.T , v ) ).T )\n        w2 = np.multiply( np.dot( gd( np.dot( w.T, v ) ), np.ones( (n, 1 ) ) ) , w )\n        w = ( w1 - w2 ) / n\n        w = sym_orth( w )\n        err = np.sum( np.abs( np.abs(w) - np.abs(last_w) ) )\n        it += 1\n\n    #0\u756a\u76ee\u306e\u4fe1\u53f7\u306e\u30b2\u30a4\u30f3\u3092\u57fa\u6e96\u306b\u5206\u96e2\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u6210\n    W = np.dot( np.diag( np.ravel( u[0,] ) ), np.dot( np.diag( s ) , w.T ) )\n    return np.dot( W, v )  / np.sqrt( n )\n\ndef main():\n    #\u30b9\u30fc\u30d1\u30fc\u30ac\u30a6\u30b7\u30a2\u30f3\u306a\u5206\u5e03\u3060\u3057\u30e9\u30d7\u30e9\u30b9\u5206\u5e03\u3067\n    s = np.random.laplace( 0., 1.0, ( 2, 10000 ) )\n    a = np.asmatrix( np.random.rand( 2,2 ) )\n    x = a * s\n    y = np.asarray( fast_ica( x ) )\n    plt.scatter( y[0,], y[1,] )\n    plt.show()\n    return\n\nif __name__ == '__main__':\n    main()\n```"}