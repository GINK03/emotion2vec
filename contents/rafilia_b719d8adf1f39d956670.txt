{"context": " More than 1 year has passed since last update.\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u5272\u308a\u8fbc\u307f\u3092\u767a\u751f\u3055\u305b\u3001\n\u30c9\u30e9\u30a4\u30d0\u304c\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u3067\u5bfe\u5fdc\u51e6\u7406\u3092\u884c\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\nQEMU\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\u4e2d(test_pci_init)\u306birq \u304c\u5fc5\u8981\u3068\u306a\u308b\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n// test_pci_init \u4e2d\n    pci_conf = pdev->config;\n    pci_conf[PCI_INTERRUPT_PIN] = 1; /* if 0 no interrupt pin */\n\n\u5272\u308a\u8fbc\u307f\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\u306fpci_conf[PCI_INTERRUPT_PIN]\u306b0\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001PCI\u30c7\u30d0\u30a4\u30b9\u306e\u5272\u308a\u8fbc\u307f\u7dda\u306f4\u672c(A-D, 1-4\u306b\u5bfe\u5fdc)\u304b\u3089\u9078\u629e\u3067\u304d\u307e\u3059\u304c\u3001\n\u3053\u306e\u3042\u305f\u308a\u306fPCI\u30d6\u30ea\u30c3\u30b8\u304c\u9069\u5f53\u306b\u51e6\u7406\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u8003\u3048\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u5272\u308a\u8fbc\u307f\u7dda\u306e\u4f7f\u7528\u306b\u306f\ninclude/hw/pci/pci.h \u3092\u898b\u308b\u3068 pci_irq_assert \u3084\u3001pci_irq_deassert \u3068\n\u3044\u3063\u305f\u95a2\u6570\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u3092\u5229\u7528\u3057\u3001\u5fc5\u8981\u306a\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3089\nirq \u3092\u4e0a\u3052\u3066\u3001\u30c9\u30e9\u30a4\u30d0\u304b\u3089\u89e3\u9664\u306e\u4fe1\u53f7\u304c\u6765\u305f\u3089\u4e0b\u308d\u3059\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u7570\u306a\u308b\u7a2e\u985e\u306e\u5272\u308a\u8fbc\u307f\u30921\u3064\u306eirq \u3067\u884c\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3001\u5272\u308a\u8fbc\u307f\u3092\u30de\u30b9\u30af\u3092\n\u7528\u610f\u3057\u3066\u3044\u307e\u3059(TestPCIState \u306einitmask \u5909\u6570)\u3002\n\u3053\u308c\u306b\u30d3\u30c3\u30c8\u3092\u7acb\u3066\u308b\u3053\u3068\u3067\u3069\u306e\u5272\u308a\u8fbc\u307f\u51e6\u7406\u304c\u5fc5\u8981\u304b\u3092\u30c9\u30e9\u30a4\u30d0\u306b\u5224\u65ad\u3055\u305b\u307e\u3059\u3002\n    void test_do_something(TestPCIState *s) \n    {\n        PCIDevice *pdev = PCI_DEVICE(s);\n\n        tprintf(\"called\\n\");\n\n        s->intmask |= INT_DO;\n        // raise irq line\n        pci_irq_assert(pdev);\n    }\n\n    void test_down_irq(TestPCIState *s) \n    {\n        PCIDevice *pdev = PCI_DEVICE(s);\n\n        // down irq line\n        pci_irq_deassert(pdev);\n    }\n\n// test_pci_pio_write\u306e\u4e00\u90e8\n    case TEST_DO:\n        test_do_something(s);\n        break;\n\n    case TEST_DOWN_IRQ:\n        test_down_irq(s);\n        break;\n\n\n\u30c7\u30d0\u30a4\u30b9\u30cf\u30f3\u30c9\u30e9\nprobe \u95a2\u6570\u4e2d\u3067request_irq \u95a2\u6570\u306b\u3088\u308a\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\n// test_pci_probe \u4e2d\n    err = request_irq(irq, test_pci_handler, 0, DRIVER_TEST_NAME, pdev);\n\n// test_pci_remobe \u4e2d\n    free_irq(dev_data->pdev->irq, dev_data->pdev);\n\n\u5272\u308a\u8fbc\u307f\u51e6\u7406\u306f\u30b9\u30ea\u30fc\u30d7\u304c\u3067\u304d\u305a\u3001\u307e\u305f\u4ed6\u304b\u3089\u306e\u5272\u308a\u8fbc\u307f\u3092\u53d7\u3051\u308b\u3053\u3068\u3082\u306a\u3044\u305f\u3081\n\u95a2\u6570\u304c\u7d42\u308f\u308b\u307e\u3067\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5207\u308a\u66ff\u308f\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001\u51e6\u7406\u306f\n\u3067\u304d\u308b\u3060\u3051\u77ed\u304f\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u3088\u3063\u3066\u3001\u4e00\u822c\u306b\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u81ea\u4f53\u3067\u306f\n\u5272\u308a\u8fbc\u307f\u306e\u7a2e\u985e\u306e\u691c\u77e5\u306a\u3069\u57fa\u672c\u7684\u306a\u51e6\u7406\u3092\u884c\u3044\u3001\u305d\u306e\u4ed6\u306e\u51e6\u7406\u306f\n\u30bf\u30b9\u30af\u30ec\u30c3\u30c8\u304b\u30ef\u30fc\u30af\u30ad\u30e5\u30fc\u306b\u4efb\u305b\u307e\u3059\u3002\n\u30bf\u30b9\u30af\u30ec\u30c3\u30c8\u4e2d\u3067\u306f\u30b9\u30ea\u30fc\u30d7\u304c\u51fa\u6765\u307e\u305b\u3093\u304c\u3001\u4ed6\u304b\u3089\u306e\u5272\u308a\u8fbc\u307f\u306f\u53ef\u80fd\u3067\u3059\u3002\n\u4e00\u65b9\u30ef\u30fc\u30af\u30ad\u30e5\u30fc\u3067\u306f\u30b9\u30ea\u30fc\u30d7\u304c\u4f7f\u7528\u53ef\u80fd\u3067\u3001\u30bb\u30de\u30d5\u30a9\u306a\u3069\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u30bf\u30b9\u30af\u30ec\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n// interrupt handler\nvoid test_do_tasklet(unsigned long unused_data)\n{\n    tprintk(\"tasklet called\\n\");\n}\n\nDECLARE_TASKLET(test_tasklet, test_do_tasklet, 0); // no data\n\nirqreturn_t test_pci_handler(int irq, void *dev_id)\n{\n    struct pci_dev *pdev = dev_id;\n    char intmask;\n\n    tprintk(\"irq handler called\\n\");\n\n    intmask = inb(dev_data->pio_base + TEST_GET_INTMASK);\n    if(intmask & INT_DO) {\n        // register tasklet\n        tasklet_schedule(&test_tasklet);\n    }\n\n    outb(0, dev_data->pio_base + TEST_SET_INTMASK);\n\n    // down irq line\n    outl(0, dev_data->pio_base + TEST_DOWN_IRQ);\n\n    return IRQ_HANDLED; \n}\n\n// ioctl\u306e\u4e00\u90e8\n    case TEST_CMD_DOSOMETHING :\n                outl(0, dev_data->pio_base + TEST_DO);\n                break;\n\nDECLARE_TASKLET \u306b\u3088\u308a\u30bf\u30b9\u30af\u30ec\u30c3\u30c8\u3092\u5ba3\u8a00\u3057\u3001\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u4e2d\u3067tasklet_schedule\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u306f\u307e\u305a\u5272\u308a\u8fbc\u307f\u30de\u30b9\u30af\u306e\u60c5\u5831\u3092\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u53d7\u3051\u53d6\u308a\u3001\n\u5bfe\u5fdc\u3059\u308b\u5272\u308a\u8fbc\u307f\u51e6\u7406\u304c\u3042\u308c\u3070\u305d\u308c\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u3092\u7d42\u4e86\u3059\u308b\u524d\u306b\u5272\u308a\u8fbc\u307f\u30de\u30b9\u30af\u3092\u66f4\u65b0\u3057\u3001\nIRQ\u7dda\u3092\u4e0b\u3052\u308b\u69d8\u306b\u30c7\u30d0\u30a4\u30b9\u3078\u6307\u793a\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001IRQ\u7dda\u306f\u8907\u6570\u306e\u30c7\u30d0\u30a4\u30b9\u3067\u5171\u6709\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3042\u308a\n(request_irq \u95a2\u6570\u306e\u7b2c\u4e09\u5f15\u6570\u306f\u30d5\u30e9\u30b0\u3067\u3042\u308a\u3001\u305d\u3053\u306b\nIRQ_SHARED \u3092\u6307\u5b9a\u3059\u308b)\u3001\n\u5272\u308a\u8fbc\u307f\u30de\u30b9\u30af\u3092\u4f7f\u7528\u3057\u3066\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u304b\u5224\u65ad\u3059\u308b\u3053\u3068\u306f\u305d\u306e\u5834\u5408\u306b\u3082\u4f7f\u3048\u307e\u3059\u3002\n\u5272\u308a\u8fbc\u307f\u3092\u51e6\u7406\u3057\u305f\u5834\u5408\u306f IRQ_HANDLED \u3092\u623b\u308a\u5024\u3068\u3057\u307e\u3059\u3002\nIRQ\u7dda\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u5272\u308a\u8fbc\u307f\u304c\u81ea\u8eab\u306e\u3082\u306e\u3067\u306f\u306a\u304f\n\u51e6\u7406\u3092\u884c\u308f\u306a\u304b\u3063\u305f\u6642\u306f IRQ_NONE \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u30e6\u30fc\u30b6\u30d7\u30ed\u30b0\u30e9\u30e0\nioctl\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nvoid interrupt_test(int fd)\n{\n    test_ioctl_data *d;\n    d = malloc(sizeof(test_ioctl_data));\n\n    if(!d) exit(1);\n    printf(\"\\n---- start interrupt test ----\\n\");\n\n    ioctl(fd, TEST_CMD_DOSOMETHING, d);\n\n    printf(\"\\n---- end interrupt test ----\\n\");\n\n    free(d);\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ninterrupt_test \u306e\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n---- start interrupt test ----\n** (151) test_pci_uioctl     : _cmd:1074035458\n## (155) test_pci_pio_write  : addr 100, size 4\n## ( 45) test_do_something   : called\n** (269) test_pci_handler    : irq handler called\n## (118) test_pci_pio_read   : addr 21, size 1\n## (155) test_pci_pio_write  : addr 20, size 1\n## (155) test_pci_pio_write  : addr 104, size 4\n** (259) test_do_tasklet     : tasklet called\n\n---- end interrupt test ----\n\n\n\u306f\u3058\u3081: (1) \u4f5c\u3063\u305f\u3082\u306e\n\u524d: (6) \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c9I/O / ioctl \u306e\u4f7f\u7528\n\u6b21: (8) DMA\u306e\u8a2d\u5b9a\n\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u5272\u308a\u8fbc\u307f\u3092\u767a\u751f\u3055\u305b\u3001\n\u30c9\u30e9\u30a4\u30d0\u304c\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u3067\u5bfe\u5fdc\u51e6\u7406\u3092\u884c\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n# QEMU\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\u4e2d(test_pci_init)\u306birq \u304c\u5fc5\u8981\u3068\u306a\u308b\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\n```c\n// test_pci_init \u4e2d\n\tpci_conf = pdev->config;\n\tpci_conf[PCI_INTERRUPT_PIN] = 1; /* if 0 no interrupt pin */\n```\n\u5272\u308a\u8fbc\u307f\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\u306fpci_conf[PCI_INTERRUPT_PIN]\u306b0\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001PCI\u30c7\u30d0\u30a4\u30b9\u306e\u5272\u308a\u8fbc\u307f\u7dda\u306f4\u672c(A-D, 1-4\u306b\u5bfe\u5fdc)\u304b\u3089\u9078\u629e\u3067\u304d\u307e\u3059\u304c\u3001\n\u3053\u306e\u3042\u305f\u308a\u306fPCI\u30d6\u30ea\u30c3\u30b8\u304c\u9069\u5f53\u306b\u51e6\u7406\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u8003\u3048\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u5272\u308a\u8fbc\u307f\u7dda\u306e\u4f7f\u7528\u306b\u306f\ninclude/hw/pci/pci.h \u3092\u898b\u308b\u3068 pci_irq_assert \u3084\u3001pci_irq_deassert \u3068\n\u3044\u3063\u305f\u95a2\u6570\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u3092\u5229\u7528\u3057\u3001\u5fc5\u8981\u306a\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3089\nirq \u3092\u4e0a\u3052\u3066\u3001\u30c9\u30e9\u30a4\u30d0\u304b\u3089\u89e3\u9664\u306e\u4fe1\u53f7\u304c\u6765\u305f\u3089\u4e0b\u308d\u3059\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u7570\u306a\u308b\u7a2e\u985e\u306e\u5272\u308a\u8fbc\u307f\u30921\u3064\u306eirq \u3067\u884c\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3001\u5272\u308a\u8fbc\u307f\u3092\u30de\u30b9\u30af\u3092\n\u7528\u610f\u3057\u3066\u3044\u307e\u3059(TestPCIState \u306einitmask \u5909\u6570)\u3002\n\u3053\u308c\u306b\u30d3\u30c3\u30c8\u3092\u7acb\u3066\u308b\u3053\u3068\u3067\u3069\u306e\u5272\u308a\u8fbc\u307f\u51e6\u7406\u304c\u5fc5\u8981\u304b\u3092\u30c9\u30e9\u30a4\u30d0\u306b\u5224\u65ad\u3055\u305b\u307e\u3059\u3002\n\n```c\n\tvoid test_do_something(TestPCIState *s) \n\t{\n\t\tPCIDevice *pdev = PCI_DEVICE(s);\n\t\t\n\t\ttprintf(\"called\\n\");\n\t\n\t\ts->intmask |= INT_DO;\n\t\t// raise irq line\n\t\tpci_irq_assert(pdev);\n\t}\n\n\tvoid test_down_irq(TestPCIState *s) \n\t{\n\t\tPCIDevice *pdev = PCI_DEVICE(s);\n\t\t\n\t\t// down irq line\n\t\tpci_irq_deassert(pdev);\n\t}\n\n// test_pci_pio_write\u306e\u4e00\u90e8\n\tcase TEST_DO:\n\t\ttest_do_something(s);\n\t\tbreak;\n\n\tcase TEST_DOWN_IRQ:\n\t\ttest_down_irq(s);\n\t\tbreak;\n```\n\n\n# \u30c7\u30d0\u30a4\u30b9\u30cf\u30f3\u30c9\u30e9\nprobe \u95a2\u6570\u4e2d\u3067request_irq \u95a2\u6570\u306b\u3088\u308a\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c\n// test_pci_probe \u4e2d\n\terr = request_irq(irq, test_pci_handler, 0, DRIVER_TEST_NAME, pdev);\n\n// test_pci_remobe \u4e2d\n\tfree_irq(dev_data->pdev->irq, dev_data->pdev);\n```\n\u5272\u308a\u8fbc\u307f\u51e6\u7406\u306f\u30b9\u30ea\u30fc\u30d7\u304c\u3067\u304d\u305a\u3001\u307e\u305f\u4ed6\u304b\u3089\u306e\u5272\u308a\u8fbc\u307f\u3092\u53d7\u3051\u308b\u3053\u3068\u3082\u306a\u3044\u305f\u3081\n\u95a2\u6570\u304c\u7d42\u308f\u308b\u307e\u3067\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5207\u308a\u66ff\u308f\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001\u51e6\u7406\u306f\n\u3067\u304d\u308b\u3060\u3051\u77ed\u304f\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u3088\u3063\u3066\u3001\u4e00\u822c\u306b\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u81ea\u4f53\u3067\u306f\n\u5272\u308a\u8fbc\u307f\u306e\u7a2e\u985e\u306e\u691c\u77e5\u306a\u3069\u57fa\u672c\u7684\u306a\u51e6\u7406\u3092\u884c\u3044\u3001\u305d\u306e\u4ed6\u306e\u51e6\u7406\u306f\n\u30bf\u30b9\u30af\u30ec\u30c3\u30c8\u304b\u30ef\u30fc\u30af\u30ad\u30e5\u30fc\u306b\u4efb\u305b\u307e\u3059\u3002\n\n\u30bf\u30b9\u30af\u30ec\u30c3\u30c8\u4e2d\u3067\u306f\u30b9\u30ea\u30fc\u30d7\u304c\u51fa\u6765\u307e\u305b\u3093\u304c\u3001\u4ed6\u304b\u3089\u306e\u5272\u308a\u8fbc\u307f\u306f\u53ef\u80fd\u3067\u3059\u3002\n\u4e00\u65b9\u30ef\u30fc\u30af\u30ad\u30e5\u30fc\u3067\u306f\u30b9\u30ea\u30fc\u30d7\u304c\u4f7f\u7528\u53ef\u80fd\u3067\u3001\u30bb\u30de\u30d5\u30a9\u306a\u3069\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u30bf\u30b9\u30af\u30ec\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c\n// interrupt handler\nvoid test_do_tasklet(unsigned long unused_data)\n{\n\ttprintk(\"tasklet called\\n\");\n}\n\nDECLARE_TASKLET(test_tasklet, test_do_tasklet, 0); // no data\n\nirqreturn_t test_pci_handler(int irq, void *dev_id)\n{\n\tstruct pci_dev *pdev = dev_id;\n\tchar intmask;\n\n\ttprintk(\"irq handler called\\n\");\n\n\tintmask = inb(dev_data->pio_base + TEST_GET_INTMASK);\n\tif(intmask & INT_DO) {\n\t\t// register tasklet\n\t\ttasklet_schedule(&test_tasklet);\n\t}\n\n\toutb(0, dev_data->pio_base + TEST_SET_INTMASK);\n\n\t// down irq line\n\toutl(0, dev_data->pio_base + TEST_DOWN_IRQ);\n\n\treturn IRQ_HANDLED; \n}\n\n// ioctl\u306e\u4e00\u90e8\n\tcase TEST_CMD_DOSOMETHING :\n\t\t\t\toutl(0, dev_data->pio_base + TEST_DO);\n\t\t\t\tbreak;\n```\nDECLARE_TASKLET \u306b\u3088\u308a\u30bf\u30b9\u30af\u30ec\u30c3\u30c8\u3092\u5ba3\u8a00\u3057\u3001\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u4e2d\u3067tasklet_schedule\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u306f\u307e\u305a\u5272\u308a\u8fbc\u307f\u30de\u30b9\u30af\u306e\u60c5\u5831\u3092\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u53d7\u3051\u53d6\u308a\u3001\n\u5bfe\u5fdc\u3059\u308b\u5272\u308a\u8fbc\u307f\u51e6\u7406\u304c\u3042\u308c\u3070\u305d\u308c\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u3092\u7d42\u4e86\u3059\u308b\u524d\u306b\u5272\u308a\u8fbc\u307f\u30de\u30b9\u30af\u3092\u66f4\u65b0\u3057\u3001\nIRQ\u7dda\u3092\u4e0b\u3052\u308b\u69d8\u306b\u30c7\u30d0\u30a4\u30b9\u3078\u6307\u793a\u3057\u307e\u3059\u3002\n\n\u306a\u304a\u3001IRQ\u7dda\u306f\u8907\u6570\u306e\u30c7\u30d0\u30a4\u30b9\u3067\u5171\u6709\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3042\u308a\n(request_irq \u95a2\u6570\u306e\u7b2c\u4e09\u5f15\u6570\u306f\u30d5\u30e9\u30b0\u3067\u3042\u308a\u3001\u305d\u3053\u306b\nIRQ_SHARED \u3092\u6307\u5b9a\u3059\u308b)\u3001\n\u5272\u308a\u8fbc\u307f\u30de\u30b9\u30af\u3092\u4f7f\u7528\u3057\u3066\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u304b\u5224\u65ad\u3059\u308b\u3053\u3068\u306f\u305d\u306e\u5834\u5408\u306b\u3082\u4f7f\u3048\u307e\u3059\u3002\n\n\u5272\u308a\u8fbc\u307f\u3092\u51e6\u7406\u3057\u305f\u5834\u5408\u306f IRQ_HANDLED \u3092\u623b\u308a\u5024\u3068\u3057\u307e\u3059\u3002\nIRQ\u7dda\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u5272\u308a\u8fbc\u307f\u304c\u81ea\u8eab\u306e\u3082\u306e\u3067\u306f\u306a\u304f\n\u51e6\u7406\u3092\u884c\u308f\u306a\u304b\u3063\u305f\u6642\u306f IRQ_NONE \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n# \u30e6\u30fc\u30b6\u30d7\u30ed\u30b0\u30e9\u30e0\nioctl\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```c\nvoid interrupt_test(int fd)\n{\n\ttest_ioctl_data *d;\n\td = malloc(sizeof(test_ioctl_data));\n\n\tif(!d) exit(1);\n\tprintf(\"\\n---- start interrupt test ----\\n\");\n\n\tioctl(fd, TEST_CMD_DOSOMETHING, d);\n\n\tprintf(\"\\n---- end interrupt test ----\\n\");\n\n\tfree(d);\n}\n```\n\n# \u5b9f\u884c\u7d50\u679c\ninterrupt_test \u306e\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n---- start interrupt test ----\n** (151) test_pci_uioctl     : _cmd:1074035458\n## (155) test_pci_pio_write  : addr 100, size 4\n## ( 45) test_do_something   : called\n** (269) test_pci_handler    : irq handler called\n## (118) test_pci_pio_read   : addr 21, size 1\n## (155) test_pci_pio_write  : addr 20, size 1\n## (155) test_pci_pio_write  : addr 104, size 4\n** (259) test_do_tasklet     : tasklet called\n\n---- end interrupt test ----\n```\n\n---\n\u306f\u3058\u3081: [(1) \u4f5c\u3063\u305f\u3082\u306e]\n(http://qiita.com/rafilia/items/f7646d12212da2a85bd8)\n\n\u524d: [(6) \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c9I/O / ioctl \u306e\u4f7f\u7528]\n(http://qiita.com/rafilia/items/8f2ec3c612d4002c12c0)\n\u6b21: [(8) DMA\u306e\u8a2d\u5b9a]\n(http://qiita.com/rafilia/items/90bb23e7f4437bd2dd35)\n", "tags": ["QEMU"]}