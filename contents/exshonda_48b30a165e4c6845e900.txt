{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cTOPPERS/R2CA\u306b\u3088\u308b NCES IoT Base Shield \u306e\u57fa\u672c\u6a5f\u80fd(Wifi/SD)\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\nNCES IoT Base Shield \u306b\u3064\u3044\u3066\nNCES IoT Base Shield \u3068\u306f\uff0cR2CA\u7528\u306b\u4f5c\u6210\u3057\u305fArduino\u30b7\u30fc\u30eb\u30c9\u3067\u3059\uff0eESP8266\u306b\u3088\u308bWifi\u6a5f\u80fd(UART\u63a5\u7d9a)\u3068MicroSD\u30b9\u30ed\u30c3\u30c8(SPI\u63a5\u7d9a)\u3092\u5099\u3048\uff0cGrove System\u3068\u4e92\u63db\u306e\u30b3\u30cd\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u305f\u3081\uff0c\u5404\u7a2eGrove Module\u304c\u4f7f\u7528\u53ef\u80fd\u3067\u3059\uff0e\nArduino\u3068\u4e92\u63db\u306e\u30b3\u30cd\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u30dc\u30fc\u30c9\u3067\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u304c\uff0cIO\u306e\u30ec\u30d9\u30eb\u304c3.3V\u3057\u304b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cArduino UNO \u7b49\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\uff0e\nGrove\u7528\u306e\u30b3\u30cd\u30af\u30bf\u306f\uff0cVCC\u306f5V\u3092\u4f9b\u7d66\u3057\u4fe1\u53f7\u306f3.3V\u304b\u30895V\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\uff0e\n\nGrove\u30b3\u30cd\u30af\u30bf\u3092\u5b9f\u65bd\u3057\u306a\u3044\u5834\u5408\u306f\u5c0f\u578b\u306e\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u5199\u771f\u306f\u30ea\u30d3\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u30dc\u30fc\u30c9\u3067\u3059)\uff0e\n\n\n\u5fc5\u8981\u306a\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\nNCES IoT Base Shield\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u3053\u306e\u8a18\u4e8b\u3067\u8aac\u660e\u3057\u3066\u3044\u308b\u6a5f\u6750\u306b\u52a0\u3048\u3066\uff0cNCES IoT Base Shield \u304c\u5fc5\u8981\u3067\u3059\uff0e\u8fd1\u65e5\u4e2d\u306b\u3053\u3053\u3067\u8cfc\u5165\u3067\u304d\u308b\u4e88\u5b9a\u3067\u3059\uff0e\n\nWifi\nUART\u63a5\u7d9a\u306eESP8266\u306b\u3088\u308a\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0c\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e\u30d7\u30ed\u30b0\u30e9\n\u30e0\u3092\u305d\u306e\u307e\u307e\u52d5\u4f5c\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\n\nArduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : Wifi\u901a\u4fe1\nArduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : Wifi\u901a\u4fe1(\u30de\u30eb\u30c1\u30bf\u30b9\u30af)\nArduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : Milkcocoa\u3078\u306e\u63a5\u7d9a\n\n\nSD\nSPI\u63a5\u7d9a\u3067CS\u306f Digital Pin 10 \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cArduino\u306b\u4ed8\u5c5e\u306eSD\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\uff0cCS\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u306e\u5b9a\u7fa9\u309210\u306b\u5909\u66f4\u3059\u308b\u3068\u52d5\u4f5c\u3057\u307e\u3059\uff0e\n\nlibraries/SD/examples/DumpFile/DumpFile.ino\n// On the Ethernet Shield, CS is pin 4. Note that even if it's not\n// used as the CS pin, the hardware CS pin (10 on most Arduino boards,\n// 53 on the Mega) must be left as an output or the SD library\n// functions will not work.\nconst int chipSelect = 4;\n\n\nR2CA\u306e\u30b5\u30f3\u30d7\u30eb\u306fBasic\u30b5\u30f3\u30d7\u30eb\u3067SD_CARD\u3092\u6709\u52b9\u306b\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u51fa\u6765\u307e\u3059\uff0e\n\nexamples/Basic/r2ca_app.c\n//#define BLINK\n//#define toneMelody\n//#define USBUART\n//#define SERIALUSB\n//#define SERIAL5\n//#define ATTACHINTERRUPT\n//#define ANALOGWRITE\n//#define ANALOGREAD\n//#define RTC_ALARM\n/#define SD_CARD\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u81ea\u4f53\u306f DumpFile.ino \u3068\u540c\u7b49\u3067\uff0cFAT32\u3067\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3057\u305fmicroSD\u3092\u5dee\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\uff0c\u30a2\u30ca\u30ed\u30b0\u5165\u529b\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\"datalog.txt\"\u3068\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\uff0e\n\nexamples/Basic/r2ca_app.c\n/*\n  SD card datalogger\n\n This example shows how to log data from three analog sensors\n to an SD card using the SD library.\n\n The circuit:\n * analog sensors on analog ins 0, 1, and 2\n * SD card attached to SPI bus as follows:\n ** MOSI - pin 11\n ** MISO - pin 12\n ** CLK - pin 13\n ** CS - pin 4\n\n created  24 Nov 2010\n modified 9 Apr 2012\n by Tom Igoe\n\n This example code is in the public domain.\n\n */\n\n#include <SPI.h>\n#include <SD.h>\n\n// On the Ethernet Shield, CS is pin 4. Note that even if it's not\n// used as the CS pin, the hardware CS pin (10 on most Arduino boards,\n// 53 on the Mega) must be left as an output or the SD library\n// functions will not work.\nconst int chipSelect = 10;\n\nvoid setup()\n{\n  // Open serial communications and wait for port to open:\n  Serial.begin(115200);\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for Leonardo only\n  }\n\n  Serial.print(\"Initializing SD card...\");\n  // make sure that the default chip select pin is set to\n  // output, even if you don't use it:\n  // pinMode(10, OUTPUT);\n\n  // see if the card is present and can be initialized:\n  if (!SD.begin(chipSelect)) {\n    Serial.println(\"Card failed, or not present\");\n    // don't do anything more:\n    return;\n  }\n  Serial.println(\"card initialized.\");\n\n  if (SD.remove(\"datalog.txt\")) {\n    Serial.println(\"Delete datalog.txt\");\n  }    \n}\n\nvoid loop()\n{\n  // make a string for assembling the data to log:\n  String dataString = \"\";\n\n  // read three sensors and append to the string:\n  for (int analogPin = 0; analogPin < 3; analogPin++) {\n    int sensor = analogRead(analogPin);\n    dataString += String(sensor);\n    if (analogPin < 2) {\n      dataString += \",\";\n    }\n  }\n\n  File dataFile = SD.open(\"datalog.txt\");\n  if (dataFile) {    \n    Serial.println(\"=== data from file ===\");\n    while (dataFile.available()) {\n      Serial.write(dataFile.read());\n    }\n    dataFile.close();\n  }\n\n  // open the file. note that only one file can be open at a time,\n  // so you have to close this one before opening another.\n  dataFile = SD.open(\"datalog.txt\", FILE_WRITE);\n\n  // if the file is available, write to it:\n  if (dataFile) {\n    dataFile.println(dataString);\n    dataFile.close();\n    // print to the serial port too:\n    Serial.println(\"=== new data to file ===\");      \n    Serial.println(dataString);\n  }\n  // if the file isn't open, pop up an error:\n  else {\n    Serial.println(\"error opening datalog.txt\");\n  }\n  delay(4000);  \n}\n\n\n\n\u304a\u308f\u308a\u306b\nTOPPERS/R2CA\u306b\u3088\u308b NCES IoT Base Shield \u306e\u57fa\u672c\u6a5f\u80fd(Wifi/SD)\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\uff0eWifi/SD\u306b\u95a2\u3057\u3066\u306f\uff0c\u901a\u5e38\u306eArduino\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u7528\u51fa\u6765\u307e\u3059\uff0e\u307e\u305f\uff0cR2CA\u3067\u306f\u306a\u3044\u7d20\u306eArduino\u3067\u3082\u4f7f\u7528\u53ef\u80fd\u3067\u3059\uff0e\n#\u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cTOPPERS/R2CA\u306b\u3088\u308b NCES IoT Base Shield \u306e\u57fa\u672c\u6a5f\u80fd(Wifi/SD)\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\n\n#NCES IoT Base Shield \u306b\u3064\u3044\u3066\n\nNCES IoT Base Shield \u3068\u306f\uff0cR2CA\u7528\u306b\u4f5c\u6210\u3057\u305fArduino\u30b7\u30fc\u30eb\u30c9\u3067\u3059\uff0eESP8266\u306b\u3088\u308bWifi\u6a5f\u80fd(UART\u63a5\u7d9a)\u3068MicroSD\u30b9\u30ed\u30c3\u30c8(SPI\u63a5\u7d9a)\u3092\u5099\u3048\uff0c[Grove System] (http://www.seeedstudio.com/wiki/Grove_System)\u3068\u4e92\u63db\u306e\u30b3\u30cd\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u305f\u3081\uff0c\u5404\u7a2eGrove Module\u304c\u4f7f\u7528\u53ef\u80fd\u3067\u3059\uff0e\n\nArduino\u3068\u4e92\u63db\u306e\u30b3\u30cd\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u30dc\u30fc\u30c9\u3067\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u304c\uff0cIO\u306e\u30ec\u30d9\u30eb\u304c3.3V\u3057\u304b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cArduino UNO \u7b49\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\uff0e\n\nGrove\u7528\u306e\u30b3\u30cd\u30af\u30bf\u306f\uff0cVCC\u306f5V\u3092\u4f9b\u7d66\u3057\u4fe1\u53f7\u306f3.3V\u304b\u30895V\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\uff0e\n\n<img width=\"400\" alt=\"aFullSizeRender.jpg.jpg\" src=https://qiita-image-store.s3.amazonaws.com/0/106870/eb4174ef-d543-9256-bd75-598cd5280e1a.jpeg>\n\nGrove\u30b3\u30cd\u30af\u30bf\u3092\u5b9f\u65bd\u3057\u306a\u3044\u5834\u5408\u306f\u5c0f\u578b\u306e\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u5199\u771f\u306f\u30ea\u30d3\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u30dc\u30fc\u30c9\u3067\u3059)\uff0e\n\n<img width=\"400\" alt=\"aFullSizeRender.jpg.jpg\" src=https://qiita-image-store.s3.amazonaws.com/0/106870/1944d1eb-940b-2f5e-db93-f8c853f1a889.jpeg>\n\n#\u5fc5\u8981\u306a\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\n\nNCES IoT Base Shield\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u306f\uff0c[\u3053\u306e\u8a18\u4e8b](http://qiita.com/exshonda/items/093870ecdcda6c79678c)\u3067\u8aac\u660e\u3057\u3066\u3044\u308b\u6a5f\u6750\u306b\u52a0\u3048\u3066\uff0cNCES IoT Base Shield \u304c\u5fc5\u8981\u3067\u3059\uff0e\u8fd1\u65e5\u4e2d\u306b[\u3053\u3053](http://miconboard.thebase.in/)\u3067\u8cfc\u5165\u3067\u304d\u308b\u4e88\u5b9a\u3067\u3059\uff0e\n\n#Wifi\n\nUART\u63a5\u7d9a\u306eESP8266\u306b\u3088\u308a\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0c\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e\u30d7\u30ed\u30b0\u30e9\n\u30e0\u3092\u305d\u306e\u307e\u307e\u52d5\u4f5c\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\n\n- [Arduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : Wifi\u901a\u4fe1](http://qiita.com/exshonda/items/914b7df0efd36866fd98)\n- [Arduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : Wifi\u901a\u4fe1(\u30de\u30eb\u30c1\u30bf\u30b9\u30af)](http://qiita.com/exshonda/items/8f6b3c101e9c48336fd7)\n- [Arduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : Milkcocoa\u3078\u306e\u63a5\u7d9a](http://qiita.com/exshonda/items/5f84f50c15bcbbb178cd)\n\n#SD\n\nSPI\u63a5\u7d9a\u3067CS\u306f Digital Pin 10 \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cArduino\u306b\u4ed8\u5c5e\u306eSD\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\uff0cCS\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u306e\u5b9a\u7fa9\u309210\u306b\u5909\u66f4\u3059\u308b\u3068\u52d5\u4f5c\u3057\u307e\u3059\uff0e\n\n\n```libraries/SD/examples/DumpFile/DumpFile.ino\n// On the Ethernet Shield, CS is pin 4. Note that even if it's not\n// used as the CS pin, the hardware CS pin (10 on most Arduino boards,\n// 53 on the Mega) must be left as an output or the SD library\n// functions will not work.\nconst int chipSelect = 4;\n```\n\nR2CA\u306e\u30b5\u30f3\u30d7\u30eb\u306fBasic\u30b5\u30f3\u30d7\u30eb\u3067SD_CARD\u3092\u6709\u52b9\u306b\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u51fa\u6765\u307e\u3059\uff0e\n\n```examples/Basic/r2ca_app.c\n//#define BLINK\n//#define toneMelody\n//#define USBUART\n//#define SERIALUSB\n//#define SERIAL5\n//#define ATTACHINTERRUPT\n//#define ANALOGWRITE\n//#define ANALOGREAD\n//#define RTC_ALARM\n/#define SD_CARD\n```\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u81ea\u4f53\u306f DumpFile.ino \u3068\u540c\u7b49\u3067\uff0cFAT32\u3067\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3057\u305fmicroSD\u3092\u5dee\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\uff0c\u30a2\u30ca\u30ed\u30b0\u5165\u529b\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\"datalog.txt\"\u3068\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\uff0e\n\n```examples/Basic/r2ca_app.c\n/*\n  SD card datalogger\n\n This example shows how to log data from three analog sensors\n to an SD card using the SD library.\n\n The circuit:\n * analog sensors on analog ins 0, 1, and 2\n * SD card attached to SPI bus as follows:\n ** MOSI - pin 11\n ** MISO - pin 12\n ** CLK - pin 13\n ** CS - pin 4\n\n created  24 Nov 2010\n modified 9 Apr 2012\n by Tom Igoe\n\n This example code is in the public domain.\n\n */\n\n#include <SPI.h>\n#include <SD.h>\n\n// On the Ethernet Shield, CS is pin 4. Note that even if it's not\n// used as the CS pin, the hardware CS pin (10 on most Arduino boards,\n// 53 on the Mega) must be left as an output or the SD library\n// functions will not work.\nconst int chipSelect = 10;\n\nvoid setup()\n{\n  // Open serial communications and wait for port to open:\n  Serial.begin(115200);\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for Leonardo only\n  }\n\n  Serial.print(\"Initializing SD card...\");\n  // make sure that the default chip select pin is set to\n  // output, even if you don't use it:\n  // pinMode(10, OUTPUT);\n\n  // see if the card is present and can be initialized:\n  if (!SD.begin(chipSelect)) {\n    Serial.println(\"Card failed, or not present\");\n    // don't do anything more:\n    return;\n  }\n  Serial.println(\"card initialized.\");\n\n  if (SD.remove(\"datalog.txt\")) {\n    Serial.println(\"Delete datalog.txt\");\n  }    \n}\n\nvoid loop()\n{\n  // make a string for assembling the data to log:\n  String dataString = \"\";\n\n  // read three sensors and append to the string:\n  for (int analogPin = 0; analogPin < 3; analogPin++) {\n    int sensor = analogRead(analogPin);\n    dataString += String(sensor);\n    if (analogPin < 2) {\n      dataString += \",\";\n    }\n  }\n\n  File dataFile = SD.open(\"datalog.txt\");\n  if (dataFile) {    \n    Serial.println(\"=== data from file ===\");\n    while (dataFile.available()) {\n      Serial.write(dataFile.read());\n    }\n    dataFile.close();\n  }\n    \n  // open the file. note that only one file can be open at a time,\n  // so you have to close this one before opening another.\n  dataFile = SD.open(\"datalog.txt\", FILE_WRITE);\n\n  // if the file is available, write to it:\n  if (dataFile) {\n    dataFile.println(dataString);\n    dataFile.close();\n    // print to the serial port too:\n    Serial.println(\"=== new data to file ===\");      \n    Serial.println(dataString);\n  }\n  // if the file isn't open, pop up an error:\n  else {\n    Serial.println(\"error opening datalog.txt\");\n  }\n  delay(4000);  \n}\n\n```\n\n\n\u304a\u308f\u308a\u306b\n\nTOPPERS/R2CA\u306b\u3088\u308b NCES IoT Base Shield \u306e\u57fa\u672c\u6a5f\u80fd(Wifi/SD)\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\uff0eWifi/SD\u306b\u95a2\u3057\u3066\u306f\uff0c\u901a\u5e38\u306eArduino\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u7528\u51fa\u6765\u307e\u3059\uff0e\u307e\u305f\uff0cR2CA\u3067\u306f\u306a\u3044\u7d20\u306eArduino\u3067\u3082\u4f7f\u7528\u53ef\u80fd\u3067\u3059\uff0e\n", "tags": ["Arduino", "TOPPERS", "R2CA", "IoT", "RTOS"]}