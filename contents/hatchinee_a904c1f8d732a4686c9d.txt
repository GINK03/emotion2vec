{"context": "Mecab\u3067\u904a\u3093\u3067\u3066\u3001\u3044\u3044\u306e\u306a\u3044\u304b\u306a\u3063\u3066\u601d\u3063\u305f\u3089\u898b\u3064\u3051\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u30c6\u30ad\u30b9\u30c8\u3067\u3082CSV\u3067\u3082\u4f55\u3067\u3082\u826f\u3044\u3067\u3059\u304c\u3001\u91cd\u8907\u306e\u5b58\u5728\u3059\u308b\u3088\u3046\u306a\u30ea\u30b9\u30c8\u3067\u3001\u5404\u8981\u7d20\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u6570\u3048\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u305f\u3044\u3053\u3068\u306f\u307e\u308c\u306b\u3088\u304f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u8f9e\u66f8\u3092\u4f7f\u3063\u3066\u7d20\u76f4\u306b\u5b9f\u88c5\u3059\u308b\u3068\n\ndata = ['aaa', 'bbb', 'ccc', 'aaa', 'ddd']\n\nword_and_counts = {}\nfor word in data:\n    if word_and_counts.has_key(word):\n        word_and_counts[word] += 1\n    else:\n        word_and_counts[word] = 1\nfor w, c in sorted(word_and_counts.iteritems(), key=lambda x: x[1], reverse=True):\n    print w, c  # =>\n                #   aaa 2\n                #   bbb 1\n                #   ccc 1\n                #   ddd 1\n\n\u3068\u304b\u305d\u3093\u306a\u611f\u3058\u306e\u96f0\u56f2\u6c17\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u3046\u3044\u3046\u3068\u304dcollections\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u4fbf\u5229\u306a\u3093\u3067\u3059\u3088\u3002\n\u3064\u3046\u308f\u3051\u3067collections.Counter\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u306a\u304a\u3057\u307e\u3059\u3002\nfrom collections import Counter\n\ndata = ['aaa', 'bbb', 'ccc', 'aaa', 'ddd']\ncounter = Counter(data)\nfor word, cnt in counter.most_common():\n    print word, cnt # =>\n                    #   aaa 2\n                    #   bbb 1\n                    #   ccc 1\n                    #   ddd 1\n\n\u306a\u3093\u304b\u7c21\u6f54\u306b\u5b9f\u88c5\u51fa\u6765\u307e\u3057\u305f\u3002\u3057\u304b\u3082\u7d44\u307f\u8fbc\u307f\u306a\u306e\u3067\u65e9\u305d\u3046\u3067\u3059\u3002\n\u305d\u306e\u4e0a\u3001Counter\u306f\u4ed6\u306b\u3082\u5404\u7a2e\u6f14\u7b97\u5b50\u3084\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u3092\u305d\u306a\u3048\u3066\u3044\u307e\u3059\u3002\nfrom collections import Counter\n\ndataA = ['aaa', 'bbb', 'ccc', 'aaa', 'ddd']\ndataB = ['aaa', 'bbb', 'bbb', 'bbb', 'abc']\n\ncounterA = Counter(dataA)\ncounterB = Counter(dataB)\n\ncounter = counterA + counterB  # \u983b\u5ea6\u3092\u8db3\u3057\u5408\u308f\u305b\u3089\u308c\u308b\ncounterA.subtract(counterB)  # \u8981\u7d20\u306e\u5dee\u3092\u3068\u308b\uff08\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\uff09\ncounter.most_common(3)  # \u4e0a\u4f4d3\u8981\u7d20\u306e\u53d6\u5f97\uff08\u4e0a\u8a18\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u5f15\u6570n\u306e\u7701\u7565\u3092\u7701\u7565\u3059\u308c\u3070\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u964d\u9806\u3067\u53d6\u5f97\uff09\n# \u4ed6\u306b\u3082\u3044\u304f\u3064\u304b\n\n\u30cf\u30c3\u30b7\u30e5\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308c\u3070\u826f\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u4ed6\u306b\u3082\u306a\u3093\u304b\u3044\u3044\u611f\u3058\u306e\u4f7f\u3044\u9053\u304c\u3042\u308b\u304b\u3082\u3067\u3059\u306d\uff1f\n\u4ed6\u306b\u3082\u3001collections\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3044\u3044\u611f\u3058\u306b\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u4e00\u5ea6\u76ee\u3092\u901a\u3057\u3066\u304a\u304f\u3068\u305f\u307e\u306b\u5f79\u306b\u7acb\u3064\u6c17\u304c\u3057\u307e\u3059\u3002\n\u6700\u7d42\u7684\u306b\u3001Counter\u3092\u4f7f\u3063\u3066\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u305f\u30c4\u30a4\u30c3\u30bf\u30fc\u306e\u30c4\u30a4\u30fc\u30c8\u5c65\u6b74\u3067Mecab\u3063\u3066\u307f\u305f\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u306e\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n# -*- coding: utf-8 -*-\n\nfrom collections import Counter\nimport codecs\nimport json\n\nimport MeCab\n\n\n# \u30d0\u30c3\u30c9\u30ce\u30a6\u30cf\u30a6\u611f\u3042\u308b\u3051\u3069\u3001\u51fa\u529b\u7d50\u679c\u3092\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u305f\u3044\u3057\nimport sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n\n# codecs\u306funicode\u3092\u8fd4\u3059\n# \u4e00\u884c\u76ee\u306b\u4f59\u8a08\u306a\u8a18\u8ff0\u304c\u3042\u3063\u3066\u3060\u308b\u3044\u3057\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3060\u3057\u9762\u5012\u306a\u306e\u3067\u4e8b\u524d\u306b\u6d88\u3057\u3066\u304a\u3053\u3046\n_tweetfile = codecs.open('./data/js/tweets/2013_09.js', 'r', 'sjis')\ntweets = json.load(_tweetfile)\n# Mecab\u306fstr\u578b\u3057\u304b\u53d7\u3051\u4ed8\u3051\u306a\u3044\u306e\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\ntexts = (tw['text'].encode('utf-8') for tw in tweets)\n\ntagger = MeCab.Tagger('-Ochasen')\ncounter = Counter()\nfor text in texts:\n    nodes = tagger.parseToNode(text)\n    while nodes:\n        if nodes.feature.split(',')[0] == '\u540d\u8a5e':\n            word = nodes.surface.decode('utf-8')\n            counter[word] += 1\n        nodes = nodes.next\nfor word, cnt in counter.most_common():\n    print word, cnt\n\n\u540d\u8a5e\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3059\u308b\u90e8\u5206\u304c\u30c0\u30b5\u304b\u3063\u305f\u308a\u3001\u8a18\u53f7\u304c\u5165\u308a\u8fbc\u3093\u3060\u308a\u3057\u307e\u3059\u304c\u3072\u3068\u307e\u305a\u3044\u3044\u611f\u3058\u306b\u52d5\u304d\u307e\u3057\u305f\u3002\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\n\u3053\u3046\u3044\u3046\u5c0f\u6280\u3063\u307d\u3044\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u307f\u305f\u306e\u3067\u3088\u308d\u3057\u3051\u308c\u3070\u3069\u3046\u305e\u3000\uff08\u899a\u3048\u308b\u3060\u3051\u3067Python\u306e\u30b3\u30fc\u30c9\u304c\u5c11\u3057\u7dba\u9e97\u306b\u306a\u308b\u983b\u51fa\u30a4\u30c7\u30a3\u30aa\u30e0\uff09\nMecab\u3067\u904a\u3093\u3067\u3066\u3001\u3044\u3044\u306e\u306a\u3044\u304b\u306a\u3063\u3066\u601d\u3063\u305f\u3089\u898b\u3064\u3051\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\u30c6\u30ad\u30b9\u30c8\u3067\u3082CSV\u3067\u3082\u4f55\u3067\u3082\u826f\u3044\u3067\u3059\u304c\u3001\u91cd\u8907\u306e\u5b58\u5728\u3059\u308b\u3088\u3046\u306a\u30ea\u30b9\u30c8\u3067\u3001\u5404\u8981\u7d20\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u6570\u3048\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u305f\u3044\u3053\u3068\u306f\u307e\u308c\u306b\u3088\u304f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u8f9e\u66f8\u3092\u4f7f\u3063\u3066\u7d20\u76f4\u306b\u5b9f\u88c5\u3059\u308b\u3068\n\n```python\n\ndata = ['aaa', 'bbb', 'ccc', 'aaa', 'ddd']\n\nword_and_counts = {}\nfor word in data:\n    if word_and_counts.has_key(word):\n        word_and_counts[word] += 1\n    else:\n        word_and_counts[word] = 1\nfor w, c in sorted(word_and_counts.iteritems(), key=lambda x: x[1], reverse=True):\n    print w, c  # =>\n                #   aaa 2\n                #   bbb 1\n                #   ccc 1\n                #   ddd 1\n```\n\n\u3068\u304b\u305d\u3093\u306a\u611f\u3058\u306e\u96f0\u56f2\u6c17\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u3046\u3044\u3046\u3068\u304d[collections\u30e2\u30b8\u30e5\u30fc\u30eb](http://docs.python.jp/2/library/collections.html)\u304c\u4fbf\u5229\u306a\u3093\u3067\u3059\u3088\u3002\n\u3064\u3046\u308f\u3051\u3067collections.Counter\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u306a\u304a\u3057\u307e\u3059\u3002\n\n```python\nfrom collections import Counter\n\ndata = ['aaa', 'bbb', 'ccc', 'aaa', 'ddd']\ncounter = Counter(data)\nfor word, cnt in counter.most_common():\n    print word, cnt # =>\n                    #   aaa 2\n                    #   bbb 1\n                    #   ccc 1\n                    #   ddd 1\n```\n\n\u306a\u3093\u304b\u7c21\u6f54\u306b\u5b9f\u88c5\u51fa\u6765\u307e\u3057\u305f\u3002\u3057\u304b\u3082\u7d44\u307f\u8fbc\u307f\u306a\u306e\u3067\u65e9\u305d\u3046\u3067\u3059\u3002\n\u305d\u306e\u4e0a\u3001Counter\u306f\u4ed6\u306b\u3082\u5404\u7a2e\u6f14\u7b97\u5b50\u3084\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u3092\u305d\u306a\u3048\u3066\u3044\u307e\u3059\u3002\n\n```python\nfrom collections import Counter\n\ndataA = ['aaa', 'bbb', 'ccc', 'aaa', 'ddd']\ndataB = ['aaa', 'bbb', 'bbb', 'bbb', 'abc']\n\ncounterA = Counter(dataA)\ncounterB = Counter(dataB)\n\ncounter = counterA + counterB  # \u983b\u5ea6\u3092\u8db3\u3057\u5408\u308f\u305b\u3089\u308c\u308b\ncounterA.subtract(counterB)  # \u8981\u7d20\u306e\u5dee\u3092\u3068\u308b\uff08\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\uff09\ncounter.most_common(3)  # \u4e0a\u4f4d3\u8981\u7d20\u306e\u53d6\u5f97\uff08\u4e0a\u8a18\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u5f15\u6570n\u306e\u7701\u7565\u3092\u7701\u7565\u3059\u308c\u3070\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u964d\u9806\u3067\u53d6\u5f97\uff09\n# \u4ed6\u306b\u3082\u3044\u304f\u3064\u304b\n```\n\n\u30cf\u30c3\u30b7\u30e5\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308c\u3070\u826f\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u4ed6\u306b\u3082\u306a\u3093\u304b\u3044\u3044\u611f\u3058\u306e\u4f7f\u3044\u9053\u304c\u3042\u308b\u304b\u3082\u3067\u3059\u306d\uff1f\n\n\u4ed6\u306b\u3082\u3001collections\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3044\u3044\u611f\u3058\u306b\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u4e00\u5ea6\u76ee\u3092\u901a\u3057\u3066\u304a\u304f\u3068\u305f\u307e\u306b\u5f79\u306b\u7acb\u3064\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\n\u6700\u7d42\u7684\u306b\u3001Counter\u3092\u4f7f\u3063\u3066\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u305f\u30c4\u30a4\u30c3\u30bf\u30fc\u306e\u30c4\u30a4\u30fc\u30c8\u5c65\u6b74\u3067Mecab\u3063\u3066\u307f\u305f\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u306e\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```python\n# -*- coding: utf-8 -*-\n\nfrom collections import Counter\nimport codecs\nimport json\n\nimport MeCab\n\n\n# \u30d0\u30c3\u30c9\u30ce\u30a6\u30cf\u30a6\u611f\u3042\u308b\u3051\u3069\u3001\u51fa\u529b\u7d50\u679c\u3092\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u305f\u3044\u3057\nimport sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n\n# codecs\u306funicode\u3092\u8fd4\u3059\n# \u4e00\u884c\u76ee\u306b\u4f59\u8a08\u306a\u8a18\u8ff0\u304c\u3042\u3063\u3066\u3060\u308b\u3044\u3057\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3060\u3057\u9762\u5012\u306a\u306e\u3067\u4e8b\u524d\u306b\u6d88\u3057\u3066\u304a\u3053\u3046\n_tweetfile = codecs.open('./data/js/tweets/2013_09.js', 'r', 'sjis')\ntweets = json.load(_tweetfile)\n# Mecab\u306fstr\u578b\u3057\u304b\u53d7\u3051\u4ed8\u3051\u306a\u3044\u306e\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\ntexts = (tw['text'].encode('utf-8') for tw in tweets)\n\ntagger = MeCab.Tagger('-Ochasen')\ncounter = Counter()\nfor text in texts:\n    nodes = tagger.parseToNode(text)\n    while nodes:\n        if nodes.feature.split(',')[0] == '\u540d\u8a5e':\n            word = nodes.surface.decode('utf-8')\n            counter[word] += 1\n        nodes = nodes.next\nfor word, cnt in counter.most_common():\n    print word, cnt\n```\n\n\u540d\u8a5e\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3059\u308b\u90e8\u5206\u304c\u30c0\u30b5\u304b\u3063\u305f\u308a\u3001\u8a18\u53f7\u304c\u5165\u308a\u8fbc\u3093\u3060\u308a\u3057\u307e\u3059\u304c\u3072\u3068\u307e\u305a\u3044\u3044\u611f\u3058\u306b\u52d5\u304d\u307e\u3057\u305f\u3002\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\n------\n\n\u3053\u3046\u3044\u3046\u5c0f\u6280\u3063\u307d\u3044\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u307f\u305f\u306e\u3067\u3088\u308d\u3057\u3051\u308c\u3070\u3069\u3046\u305e\u3000\uff08[\u899a\u3048\u308b\u3060\u3051\u3067Python\u306e\u30b3\u30fc\u30c9\u304c\u5c11\u3057\u7dba\u9e97\u306b\u306a\u308b\u983b\u51fa\u30a4\u30c7\u30a3\u30aa\u30e0](http://hachibeechan.hateblo.jp/entry/Python-idiom-101)\uff09\n", "tags": ["Python", "mecab"]}