{"context": " More than 1 year has passed since last update.\u4fbf\u5229\u306a Enum \u578b\n\u3067\u3059\u304c\u3001 Web \u30a2\u30d7\u30ea\u3067\u4f7f\u3046\u5834\u5408\u306f O/R Mapper \u3067\u305d\u306e\u307e\u307e\u4f7f\u3044\u305f\u3044\u3067\u3059\u3088\u306d\u3002\nSQLAlchemy \u306f\u3001 TypeDecorator \u3092\u4f7f\u3063\u3066\u3001\u65e2\u5b58\u306e\u578b\u3092\u30e9\u30c3\u30d7\u3057\u305f\u72ec\u81ea\u578b\u3092\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 Integer \u3092\u30e9\u30c3\u30d7\u3057\u3066 Enum \u3092\u4fdd\u5b58\u3057\u3066\u307f\u307e\u3059\u3002\nfrom __future__ import print_function, division, absolute_import\nfrom sqlalchemy import Integer\nfrom sqlalchemy.types import TypeDecorator\n\n\nclass EnumType(TypeDecorator):\n    \"\"\"Store IntEnum as Integer\"\"\"\n\n    impl = Integer\n\n    def __init__(self, *args, **kwargs):\n        self.enum_class = kwargs.pop('enum_class')\n        TypeDecorator.__init__(self, *args, **kwargs)\n\n    def process_bind_param(self, value, dialect):\n        if value is not None:\n            if not isinstance(value, self.enum_class):\n                raise TypeError(\"Value should %s type\" % self.enum_class)\n            return value.value\n\n    def process_result_value(self, value, dialect):\n        if value is not None:\n            if not isinstance(value, int):\n                raise TypeError(\"value should have int type\")\n            return self.enum_class(value)\n\n\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570 enum_class \u3067\u6307\u5b9a\u3057\u305f Enum \u3092\u4fdd\u5b58\u3059\u308b\u5c02\u7528\u306e\u30ab\u30e9\u30e0\u578b\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nimport enum\nfrom sqlalchemy import Integer, Column, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n\nBase = declarative_base()\n\nColor = enum.Enum(\"Color\", \"red green yellow\")\n\nclass Light(Base):\n    __tablename__ = 'some_table'\n    id = Column(Integer, primary_key=True)\n    color = Column(EnumType(enum_class=Color))\n\n\nengine = create_engine('sqlite:///:memory:')\nBase.metadata.create_all(engine)\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n\nsession.add(Light(color=Color.red))\nsession.commit()\n\nfor L in session.query(Light).all():\n    print(L.id, L.color)\n\nsession.add(Light(color=42))\nsession.commit()\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3046\u306a\u308a\u307e\u3059\n1 Color.red\nTraceback (most recent call last):\n...\n  File \"enum_column_sample.py\", line 19, in process_bind_param\n    raise TypeError(\"Value should %s type\" % self.enum_class)\nsqlalchemy.exc.StatementError: Value should <enum 'Color'> type (original cause: TypeError: Value should <enum 'Color'> type) u'INSERT INTO some_table (color) VALUES (?)' [{'color': 42}]\n\n\u3053\u306e\u3088\u3046\u306b\u3001DB\u304b\u3089\u53d6\u5f97\u3057\u305f\u5024\u304c\u9069\u5207\u306b Enum \u306b\u623b\u308a\u307e\u3059\u3057\u3001 Enum \u3058\u3083\u306a\u3044\u6574\u6570\u5024\u306f Insert \u3067\u8e74\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n[\u4fbf\u5229\u306a Enum \u578b](http://qiita.com/methane/items/8612bdefd8fa4238cc44)\n\u3067\u3059\u304c\u3001 Web \u30a2\u30d7\u30ea\u3067\u4f7f\u3046\u5834\u5408\u306f O/R Mapper \u3067\u305d\u306e\u307e\u307e\u4f7f\u3044\u305f\u3044\u3067\u3059\u3088\u306d\u3002\n\nSQLAlchemy \u306f\u3001 `TypeDecorator` \u3092\u4f7f\u3063\u3066\u3001\u65e2\u5b58\u306e\u578b\u3092\u30e9\u30c3\u30d7\u3057\u305f\u72ec\u81ea\u578b\u3092\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 Integer \u3092\u30e9\u30c3\u30d7\u3057\u3066 Enum \u3092\u4fdd\u5b58\u3057\u3066\u307f\u307e\u3059\u3002\n\n```python\nfrom __future__ import print_function, division, absolute_import\nfrom sqlalchemy import Integer\nfrom sqlalchemy.types import TypeDecorator\n\n\nclass EnumType(TypeDecorator):\n    \"\"\"Store IntEnum as Integer\"\"\"\n\n    impl = Integer\n\n    def __init__(self, *args, **kwargs):\n        self.enum_class = kwargs.pop('enum_class')\n        TypeDecorator.__init__(self, *args, **kwargs)\n\n    def process_bind_param(self, value, dialect):\n        if value is not None:\n            if not isinstance(value, self.enum_class):\n                raise TypeError(\"Value should %s type\" % self.enum_class)\n            return value.value\n\n    def process_result_value(self, value, dialect):\n        if value is not None:\n            if not isinstance(value, int):\n                raise TypeError(\"value should have int type\")\n            return self.enum_class(value)\n```\n\n\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570 `enum_class` \u3067\u6307\u5b9a\u3057\u305f Enum \u3092\u4fdd\u5b58\u3059\u308b\u5c02\u7528\u306e\u30ab\u30e9\u30e0\u578b\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```python\nimport enum\nfrom sqlalchemy import Integer, Column, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n\nBase = declarative_base()\n\nColor = enum.Enum(\"Color\", \"red green yellow\")\n\nclass Light(Base):\n    __tablename__ = 'some_table'\n    id = Column(Integer, primary_key=True)\n    color = Column(EnumType(enum_class=Color))\n\n\nengine = create_engine('sqlite:///:memory:')\nBase.metadata.create_all(engine)\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n\nsession.add(Light(color=Color.red))\nsession.commit()\n\nfor L in session.query(Light).all():\n    print(L.id, L.color)\n\nsession.add(Light(color=42))\nsession.commit()\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3046\u306a\u308a\u307e\u3059\n\n```\n1 Color.red\nTraceback (most recent call last):\n...\n  File \"enum_column_sample.py\", line 19, in process_bind_param\n    raise TypeError(\"Value should %s type\" % self.enum_class)\nsqlalchemy.exc.StatementError: Value should <enum 'Color'> type (original cause: TypeError: Value should <enum 'Color'> type) u'INSERT INTO some_table (color) VALUES (?)' [{'color': 42}]\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001DB\u304b\u3089\u53d6\u5f97\u3057\u305f\u5024\u304c\u9069\u5207\u306b Enum \u306b\u623b\u308a\u307e\u3059\u3057\u3001 Enum \u3058\u3083\u306a\u3044\u6574\u6570\u5024\u306f Insert \u3067\u8e74\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002", "tags": ["Python", "sqlalchemy"]}