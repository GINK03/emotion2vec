{"context": " More than 1 year has passed since last update.\n\n\u6e96\u5099\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff06\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\nbrew install node\nnpm install -g react-native-cli\nreact-native init SampleApp\ncd SampleApp\nopen SampleApp.xcodeproj\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nindex.ios.js\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n */\n'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  Image,\n  ListView,\n  StyleSheet,\n  Text,\n  View,\n} = React;\n\n/**\n * For quota reasons we replaced the Rotten Tomatoes' API with a sample data of\n * their very own API that lives in React Native's Github repo.\n */\nvar REQUEST_URL = 'https://raw.githubusercontent.com/facebook/react-native/master/docs/MoviesExample.json';\n\nvar MOCKED_MOVIES_DATA = [\n  {title: 'Title', year: '2015', posters: {thumbnail: 'http://i.imgur.com/UePbdph.jpg'}},\n];\n\nvar SampleApp = React.createClass({\n  render: function() {\n    if (!this.state.loaded) {\n      return this.renderLoadingView();\n    }\n\n    return (\n      <ListView\n        dataSource={this.state.dataSource}\n        renderRow={this.renderMovie}\n        style={styles.listView}\n      />\n    );\n  },\n  renderLoadingView: function() {\n    return (\n      <View style={styles.container}>\n        <Text>\n          Loading movies...\n        </Text>\n      </View>\n    );\n  },\n  renderMovie: function(movie) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{uri: movie.posters.thumbnail}}\n          style={styles.thumbnail}\n        />\n        <View style={styles.rightContainer}>\n          <Text style={styles.title}>{movie.title}</Text>\n          <Text style={styles.year}>{movie.year}</Text>\n        </View>\n      </View>\n    );\n  },\n  getInitialState: function() {\n    return {\n      dataSource: new ListView.DataSource({\n        rowHasChanged: (row1, row2) => row1 !== row2,\n      }),\n      loaded: false,\n\n      // movies: null,\n    };\n  },\n  componentDidMount: function() {\n    this.fetchData();\n  },\n  fetchData: function() {\n    fetch(REQUEST_URL)\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.setState({\n          dataSource: this.state.dataSource.cloneWithRows(responseData.movies),\n          loaded: true,\n\n          // movies: responseData.movies,\n        });\n      })\n      .done();\n  },\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  rightContainer: {\n    flex: 1,\n  },\n  thumbnail: {\n    width: 53,\n    height: 81,\n  },\n  title: {\n    fontSize: 20,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  year: {\n    textAlign: 'center',\n  },\n  listView: {\n    paddingTop: 20,\n    backgroundColor: '#F5FCFF',\n  },\n});\n\nAppRegistry.registerComponent('SampleApp', () => SampleApp);\n\n\n\n\u8d77\u52d5\nXcode\u4e0a\u3067cmd+R\n\n## \u6e96\u5099\n\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff06\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n\n```bash\nbrew install node\nnpm install -g react-native-cli\nreact-native init SampleApp\ncd SampleApp\nopen SampleApp.xcodeproj\n```\n\n### \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```javascript:index.ios.js\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n */\n'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  Image,\n  ListView,\n  StyleSheet,\n  Text,\n  View,\n} = React;\n\n/**\n * For quota reasons we replaced the Rotten Tomatoes' API with a sample data of\n * their very own API that lives in React Native's Github repo.\n */\nvar REQUEST_URL = 'https://raw.githubusercontent.com/facebook/react-native/master/docs/MoviesExample.json';\n\nvar MOCKED_MOVIES_DATA = [\n  {title: 'Title', year: '2015', posters: {thumbnail: 'http://i.imgur.com/UePbdph.jpg'}},\n];\n\nvar SampleApp = React.createClass({\n  render: function() {\n    if (!this.state.loaded) {\n      return this.renderLoadingView();\n    }\n\n    return (\n      <ListView\n        dataSource={this.state.dataSource}\n        renderRow={this.renderMovie}\n        style={styles.listView}\n      />\n    );\n  },\n  renderLoadingView: function() {\n    return (\n      <View style={styles.container}>\n        <Text>\n          Loading movies...\n        </Text>\n      </View>\n    );\n  },\n  renderMovie: function(movie) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{uri: movie.posters.thumbnail}}\n          style={styles.thumbnail}\n        />\n        <View style={styles.rightContainer}>\n          <Text style={styles.title}>{movie.title}</Text>\n          <Text style={styles.year}>{movie.year}</Text>\n        </View>\n      </View>\n    );\n  },\n  getInitialState: function() {\n    return {\n      dataSource: new ListView.DataSource({\n        rowHasChanged: (row1, row2) => row1 !== row2,\n      }),\n      loaded: false,\n\n      // movies: null,\n    };\n  },\n  componentDidMount: function() {\n    this.fetchData();\n  },\n  fetchData: function() {\n    fetch(REQUEST_URL)\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.setState({\n          dataSource: this.state.dataSource.cloneWithRows(responseData.movies),\n          loaded: true,\n\n          // movies: responseData.movies,\n        });\n      })\n      .done();\n  },\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  rightContainer: {\n    flex: 1,\n  },\n  thumbnail: {\n    width: 53,\n    height: 81,\n  },\n  title: {\n    fontSize: 20,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  year: {\n    textAlign: 'center',\n  },\n  listView: {\n    paddingTop: 20,\n    backgroundColor: '#F5FCFF',\n  },\n});\n\nAppRegistry.registerComponent('SampleApp', () => SampleApp);\n```\n\n### \u8d77\u52d5\nXcode\u4e0a\u3067cmd+R\n", "tags": ["reactnative"]}