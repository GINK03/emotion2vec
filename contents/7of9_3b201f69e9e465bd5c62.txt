{"context": " More than 1 year has passed since last update.\u5b9f\u88c5: Unity 5.1.3-f1 on MacOS X 10.8.5\n\u52d5\u4f5c\u78ba\u8a8d: Windows 8.1 Pro (64bit)\n\n\u5165\u529b\u3057\u305f\u6587\u5b57\u3092\u8fd4\u3059echo server.\n<CR>\u3092\u53d7\u3051\u305f\u6642\u306b\u305d\u308c\u307e\u3067\u53d7\u4fe1\u3057\u305f\u6587\u5b57\u5217\u3092<CR><LF>\u4ed8\u304d\u3067\u8fd4\u3059\u3088\u3046\u306b\u5b9f\u88c5\u3057\u305f\u3002\n\ncode\nv0.1 @ github\n\u30dd\u30fc\u30c8\u30aa\u30fc\u30d7\u30f3\u3068\u30af\u30ed\u30fc\u30ba\u306fMyRs232cUtil.cs\u306b\u3066\u5b9f\u88c5\u3002\n\u53d7\u4fe1\u3068\u9001\u4fe1\u90e8\u5206\u306f\u4ee5\u4e0b\u3067\u5b9f\u88c5\u3002\n\nechoServerCS.cs\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.UI;\n\nusing System.Threading; // for Thread\nusing System.IO.Ports; // for RS-232C\n\nusing NS_MyRs232cUtil;\n\n/*\n * v0.1 2015/09/22\n *   - can echo back\n */ \n\npublic class echoServerCS : MonoBehaviour {\n\n    private static bool doStart = false;\n    private static bool doStop = false;\n    private Thread rcvThr;\n\n    public InputField IF_comname;\n    public Text T_status;\n    private SerialPort mySP;\n    private string accRcvd = \"\";\n\n    void Update () {\n        if (doStart) {\n            doStart = false;\n            bool res = MyRs232cUtil.Open (IF_comname.text, out mySP);\n            mySP.ReadTimeout = 1;\n            if (res == false) {\n                T_status.text = \"open fail\";\n                return;\n            }\n            mySP.Write(\">\");\n        }\n        if (doStop) {\n            doStop = false;\n            MyRs232cUtil.Close(ref mySP);\n            T_status.text = \"closed\";\n        }\n        if (mySP.IsOpen) {\n            byte rcv;\n            char tmp;\n            try {\n                rcv = (byte)mySP.ReadByte();\n                if (rcv != 255) {\n                    tmp = (char)rcv;\n                    if (tmp != 0x0d && tmp != 0x0a) { // not CRLF\n                        accRcvd = accRcvd + tmp.ToString();\n                    }\n                    if (tmp == 0x0d) { // CR\n                        mySP.WriteLine(accRcvd);\n                        T_status.text = \"has read:\" + accRcvd;\n                        accRcvd = \"\";\n                    }\n                }\n            } catch (System.Exception) {\n            }\n        }\n        Thread.Sleep (20); // without this app will freeze \n    }\n\n    public static void SetStart() {\n        doStart = true;\n    }\n    public static void SetStop() {\n        doStop = true;\n    }\n\n}\n\n\n\n\u4f7f\u7528\u4f8b\n\u4ee5\u4e0b\u3092\u7528\u610f\u3057\u305f\n1. USB-\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30b1\u30fc\u30d6\u30eb (VE488) x 2\u672c\n2. \u30af\u30ed\u30b9\u7528\u6cbb\u5177 (DSub-9pin x 2\u3092 TX, RX\u30af\u30ed\u30b9\u3067\u63a5\u7d9a. GND\u306f\u305d\u306e\u307e\u307e\u63a5\u7d9a)\n\u4e0a\u8a18\u3092Windows8.1\u3067\u4f7f\u7528\u3059\u308b\u3068\u3001COM3\u3068COM4\u3068\u3057\u3066\u304a\u4e92\u3044\u304c\u901a\u4fe1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\nCOM4\u5074\u3092TeraTerm\u306a\u3069\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u30bd\u30d5\u30c8\u3067\u7acb\u3061\u4e0a\u3052\u3066\u304a\u3044\u3066\u3001\u4e0a\u8a18\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u30d3\u30eb\u30c9\u3057\u305f.exe\u30d5\u30a1\u30a4\u30eb\u3092Windows 8.1\u5074\u3067\u5b9f\u884c\u3059\u308b\u3002\nStart\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3001echo server\u304c\u52d5\u4f5c\u3092\u59cb\u3081\u308b\u3002\nCOM4\u5074 (\u5165\u529b\u3059\u308b)\n\necho server\u5074 (COM3)\n\nCOM4\u3067\u6539\u884c\u307e\u3067\u5165\u529b\u3057\u305f\u6587\u5b57\u5217(\u4f8b abcdef)\u304cecho server\u306b\u3088\u308aecho back\u3055\u308c\u308b\u3002\u305f\u3060\u3057\u3001Unity\u30bd\u30d5\u30c8\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u3066\u3044\u308b\u6642\u306b\u8fd4\u7b54\u3059\u308b\u306e\u3067\u3001COM4\u5165\u529b\u5f8c\u306fUnity\u30bd\u30d5\u30c8\u5074\u3092\u30af\u30ea\u30c3\u30af\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\nUpdate()\u3067\u51e6\u7406\u3057\u3066\u3044\u308b\u305f\u3081\u3060\u3002\u30b9\u30ec\u30c3\u30c9\u306b\u3059\u308b\u306a\u308a\u3059\u308c\u3070\u3053\u306e\u3042\u305f\u308a\u306f\u6539\u5584\u3059\u308b\u3060\u308d\u3046\u3002\n\nv0.2 (Thread\u7248)\n(\u8ffd\u8a18 2015/09/23)\nUpdate()\u3067\u9001\u53d7\u4fe1\u3092\u3059\u308b\u3068\u5b9f\u884c\u30bd\u30d5\u30c8\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u306a\u3044\u6642\u306b\u9001\u53d7\u4fe1\u3067\u304d\u306a\u3044\u3002\u3053\u306e\u3042\u305f\u308a\u306f\u304a\u305d\u3089\u304f\u30b3\u30eb\u30fc\u30c1\u30f3\u306b\u3057\u3066\u3082\u540c\u3058\u3060\u308d\u3046\u3002\n\u30b9\u30ec\u30c3\u30c9\u306b\u5909\u66f4\u3057\u305f\u3082\u306e\u3092v0.2\u3068\u3057\u305f\u3002\nv0.2 @ github\n\u4e3b\u306a\u5909\u66f4\u70b9\u306f\u4ee5\u4e0b\u306e\uff12\u3064\u306e\u95a2\u6570\u3002\n...\n    private bool rcvAndEcho(ref SerialPort mySP) {\n        byte rcv;\n        char tmp;\n        bool hasRcvd = false;\n\n        try {\n            rcv = (byte)mySP.ReadByte();\n            if (rcv != 255) {\n                hasRcvd = true;\n\n                tmp = (char)rcv;\n                if (tmp != 0x0d && tmp != 0x0a) { // not CRLF\n                    accRcvd = accRcvd + tmp.ToString();\n                }\n                if (tmp == 0x0d) { // CR\n                    mySP.WriteLine(accRcvd);\n                    rcvdCRLF = true;\n                }\n            }\n        } catch (System.Exception) {\n        }\n\n        return hasRcvd;\n    }\n\n    private void FuncEcho() \n    {\n        Debug.Log (\"func echo start\");\n        bool res = MyRs232cUtil.Open (IF_comname.text, out mySP);\n        mySP.ReadTimeout = 1;\n        if (res == false) {\n            statusText = \"open fail\";\n            return;\n        }\n        statusText = IF_comname.text + \" : open\";\n        mySP.Write (\">\");\n\n        while (doStop == false) {\n            if (mySP != null && mySP.IsOpen) {\n                if (rcvAndEcho(ref mySP)) {\n                    statusText = \"has received: \" + accRcvd;\n                    if (rcvdCRLF) {\n                        rcvdCRLF = false;\n                        accRcvd = \"\";\n                    }\n                }\n            }\n            Thread.Sleep(20); // without this app may freeze\n        }\n        Debug.Log (\"func echo stop\");\n        MyRs232cUtil.Close(ref mySP);\n        statusText = IF_comname.text + \" : closed\";\n        doStop = false;\n    }\n...\n\n1\u3064\u6c17\u306b\u306a\u308b\u306e\u306fThread(20);\u3067\u5e38\u306b20msec\u5f85\u3063\u3066\u3044\u308b\u3053\u3068\u3002\n\u6587\u5b57\u5217\u53d7\u4fe1\u3092\u59cb\u3081\u305f\u3089\u300120msec\u5f85\u305f\u305a\u306b\u9023\u7d9a\u3067\u53d7\u4fe1\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u65b9\u304c\u3044\u3044\u3060\u308d\u3046\u3002\n```txt:\n\u5b9f\u88c5: Unity 5.1.3-f1 on MacOS X 10.8.5\n\u52d5\u4f5c\u78ba\u8a8d: Windows 8.1 Pro (64bit)\n```\n\n\u5165\u529b\u3057\u305f\u6587\u5b57\u3092\u8fd4\u3059echo server.\n`<CR>`\u3092\u53d7\u3051\u305f\u6642\u306b\u305d\u308c\u307e\u3067\u53d7\u4fe1\u3057\u305f\u6587\u5b57\u5217\u3092`<CR><LF>`\u4ed8\u304d\u3067\u8fd4\u3059\u3088\u3046\u306b\u5b9f\u88c5\u3057\u305f\u3002\n\n##code\n\n[v0.1 @ github](https://github.com/yasokada/unity-150920-rs232cEcho/releases/tag/v0.1)\n\n\u30dd\u30fc\u30c8\u30aa\u30fc\u30d7\u30f3\u3068\u30af\u30ed\u30fc\u30ba\u306f`MyRs232cUtil.cs`\u306b\u3066\u5b9f\u88c5\u3002\n\n\u53d7\u4fe1\u3068\u9001\u4fe1\u90e8\u5206\u306f\u4ee5\u4e0b\u3067\u5b9f\u88c5\u3002\n\n```echoServerCS.cs\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.UI;\n\nusing System.Threading; // for Thread\nusing System.IO.Ports; // for RS-232C\n\nusing NS_MyRs232cUtil;\n\n/*\n * v0.1 2015/09/22\n *   - can echo back\n */ \n\npublic class echoServerCS : MonoBehaviour {\n\n\tprivate static bool doStart = false;\n\tprivate static bool doStop = false;\n\tprivate Thread rcvThr;\n\t\n\tpublic InputField IF_comname;\n\tpublic Text T_status;\n\tprivate SerialPort mySP;\n\tprivate string accRcvd = \"\";\n\n\tvoid Update () {\n\t\tif (doStart) {\n\t\t\tdoStart = false;\n\t\t\tbool res = MyRs232cUtil.Open (IF_comname.text, out mySP);\n\t\t\tmySP.ReadTimeout = 1;\n\t\t\tif (res == false) {\n\t\t\t\tT_status.text = \"open fail\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmySP.Write(\">\");\n\t\t}\n\t\tif (doStop) {\n\t\t\tdoStop = false;\n\t\t\tMyRs232cUtil.Close(ref mySP);\n\t\t\tT_status.text = \"closed\";\n\t\t}\n\t\tif (mySP.IsOpen) {\n\t\t\tbyte rcv;\n\t\t\tchar tmp;\n\t\t\ttry {\n\t\t\t\trcv = (byte)mySP.ReadByte();\n\t\t\t\tif (rcv != 255) {\n\t\t\t\t\ttmp = (char)rcv;\n\t\t\t\t\tif (tmp != 0x0d && tmp != 0x0a) { // not CRLF\n\t\t\t\t\t\taccRcvd = accRcvd + tmp.ToString();\n\t\t\t\t\t}\n\t\t\t\t\tif (tmp == 0x0d) { // CR\n\t\t\t\t\t\tmySP.WriteLine(accRcvd);\n\t\t\t\t\t\tT_status.text = \"has read:\" + accRcvd;\n\t\t\t\t\t\taccRcvd = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (System.Exception) {\n\t\t\t}\n\t\t}\n\t\tThread.Sleep (20); // without this app will freeze \n\t}\n\n\tpublic static void SetStart() {\n\t\tdoStart = true;\n\t}\n\tpublic static void SetStop() {\n\t\tdoStop = true;\n\t}\n\t\n}\n```\n\n##\u4f7f\u7528\u4f8b\n\n\u4ee5\u4e0b\u3092\u7528\u610f\u3057\u305f\n1. USB-\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30b1\u30fc\u30d6\u30eb (VE488) x 2\u672c\n2. \u30af\u30ed\u30b9\u7528\u6cbb\u5177 (DSub-9pin x 2\u3092 TX, RX\u30af\u30ed\u30b9\u3067\u63a5\u7d9a. GND\u306f\u305d\u306e\u307e\u307e\u63a5\u7d9a)\n\n\u4e0a\u8a18\u3092Windows8.1\u3067\u4f7f\u7528\u3059\u308b\u3068\u3001COM3\u3068COM4\u3068\u3057\u3066\u304a\u4e92\u3044\u304c\u901a\u4fe1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\nCOM4\u5074\u3092TeraTerm\u306a\u3069\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u30bd\u30d5\u30c8\u3067\u7acb\u3061\u4e0a\u3052\u3066\u304a\u3044\u3066\u3001\u4e0a\u8a18\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u30d3\u30eb\u30c9\u3057\u305f.exe\u30d5\u30a1\u30a4\u30eb\u3092Windows 8.1\u5074\u3067\u5b9f\u884c\u3059\u308b\u3002\n\nStart\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3001echo server\u304c\u52d5\u4f5c\u3092\u59cb\u3081\u308b\u3002\n\n\n\nCOM4\u5074 (\u5165\u529b\u3059\u308b)\n![Win8x64pro.jpg](https://qiita-image-store.s3.amazonaws.com/0/32870/39ebc78c-8172-cf61-b11c-26a616a9cc15.jpeg)\n\necho server\u5074 (COM3)\n![Win8x64pro.jpg](https://qiita-image-store.s3.amazonaws.com/0/32870/93e5c01b-ec8f-293a-13fe-caa52b49046c.jpeg)\n\nCOM4\u3067\u6539\u884c\u307e\u3067\u5165\u529b\u3057\u305f\u6587\u5b57\u5217(\u4f8b abcdef)\u304cecho server\u306b\u3088\u308aecho back\u3055\u308c\u308b\u3002\u305f\u3060\u3057\u3001Unity\u30bd\u30d5\u30c8\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u3066\u3044\u308b\u6642\u306b\u8fd4\u7b54\u3059\u308b\u306e\u3067\u3001COM4\u5165\u529b\u5f8c\u306fUnity\u30bd\u30d5\u30c8\u5074\u3092\u30af\u30ea\u30c3\u30af\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\nUpdate()\u3067\u51e6\u7406\u3057\u3066\u3044\u308b\u305f\u3081\u3060\u3002\u30b9\u30ec\u30c3\u30c9\u306b\u3059\u308b\u306a\u308a\u3059\u308c\u3070\u3053\u306e\u3042\u305f\u308a\u306f\u6539\u5584\u3059\u308b\u3060\u308d\u3046\u3002\n\n## v0.2 (Thread\u7248)\n\n(\u8ffd\u8a18 2015/09/23)\n\nUpdate()\u3067\u9001\u53d7\u4fe1\u3092\u3059\u308b\u3068\u5b9f\u884c\u30bd\u30d5\u30c8\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u306a\u3044\u6642\u306b\u9001\u53d7\u4fe1\u3067\u304d\u306a\u3044\u3002\u3053\u306e\u3042\u305f\u308a\u306f\u304a\u305d\u3089\u304f\u30b3\u30eb\u30fc\u30c1\u30f3\u306b\u3057\u3066\u3082\u540c\u3058\u3060\u308d\u3046\u3002\n\u30b9\u30ec\u30c3\u30c9\u306b\u5909\u66f4\u3057\u305f\u3082\u306e\u3092v0.2\u3068\u3057\u305f\u3002\n\n[v0.2 @ github](https://github.com/yasokada/unity-150920-rs232cEcho/releases/tag/v0.2)\n\n\u4e3b\u306a\u5909\u66f4\u70b9\u306f\u4ee5\u4e0b\u306e\uff12\u3064\u306e\u95a2\u6570\u3002\n\n```csharp\n...\n\tprivate bool rcvAndEcho(ref SerialPort mySP) {\n\t\tbyte rcv;\n\t\tchar tmp;\n\t\tbool hasRcvd = false;\n\n\t\ttry {\n\t\t\trcv = (byte)mySP.ReadByte();\n\t\t\tif (rcv != 255) {\n\t\t\t\thasRcvd = true;\n\n\t\t\t\ttmp = (char)rcv;\n\t\t\t\tif (tmp != 0x0d && tmp != 0x0a) { // not CRLF\n\t\t\t\t\taccRcvd = accRcvd + tmp.ToString();\n\t\t\t\t}\n\t\t\t\tif (tmp == 0x0d) { // CR\n\t\t\t\t\tmySP.WriteLine(accRcvd);\n\t\t\t\t\trcvdCRLF = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (System.Exception) {\n\t\t}\n\n\t\treturn hasRcvd;\n\t}\n\n\tprivate void FuncEcho() \n\t{\n\t\tDebug.Log (\"func echo start\");\n\t\tbool res = MyRs232cUtil.Open (IF_comname.text, out mySP);\n\t\tmySP.ReadTimeout = 1;\n\t\tif (res == false) {\n\t\t\tstatusText = \"open fail\";\n\t\t\treturn;\n\t\t}\n\t\tstatusText = IF_comname.text + \" : open\";\n\t\tmySP.Write (\">\");\n\n\t\twhile (doStop == false) {\n\t\t\tif (mySP != null && mySP.IsOpen) {\n\t\t\t\tif (rcvAndEcho(ref mySP)) {\n\t\t\t\t\tstatusText = \"has received: \" + accRcvd;\n\t\t\t\t\tif (rcvdCRLF) {\n\t\t\t\t\t\trcvdCRLF = false;\n\t\t\t\t\t\taccRcvd = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tThread.Sleep(20); // without this app may freeze\n\t\t}\n\t\tDebug.Log (\"func echo stop\");\n\t\tMyRs232cUtil.Close(ref mySP);\n\t\tstatusText = IF_comname.text + \" : closed\";\n\t\tdoStop = false;\n\t}\n...\n```\n\n1\u3064\u6c17\u306b\u306a\u308b\u306e\u306fThread(20);\u3067\u5e38\u306b20msec\u5f85\u3063\u3066\u3044\u308b\u3053\u3068\u3002\n\n\u6587\u5b57\u5217\u53d7\u4fe1\u3092\u59cb\u3081\u305f\u3089\u300120msec\u5f85\u305f\u305a\u306b\u9023\u7d9a\u3067\u53d7\u4fe1\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u65b9\u304c\u3044\u3044\u3060\u308d\u3046\u3002\n\n\n", "tags": ["MyUnity", "RS232C", "networkApp"]}