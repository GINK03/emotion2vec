{"context": "\n\n\u306f\u3058\u3081\u306b\nC\u3067BASE64\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u3068\u3067\u30b3\u30fc\u30c9\u3092\u884c\u3046\u95a2\u6570\u3067\u3059\u3002\n\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3067\u3059\u3002\n\u52c9\u5f37\u3082\u304b\u306d\u3066\u3001\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nWikipedia\u306eBASE64\u306e\u89e3\u8aac\u3068\u3001RFC 4948\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u88c5\n\nbase64.c\n#include <stdlib.h>\n#include <string.h>\n#include \"base64.h\"\n\nstatic const char BASE64_TABLE[] = {\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n};\nstatic const char BASE64_TABLE_URL[] = {\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n};\nstatic const int BASE64_TABLE_LENGTH = {\n    sizeof(BASE64_TABLE) / sizeof(BASE64_TABLE[0]) - 1\n};\n\ntypedef struct tagBASE64_SPEC {\n    BASE64_TYPE type;\n    const char *table;\n    char pad;\n    int maxLineLength;\n    char *lineSep;\n    int lineSepLength;\n} BASE64_SPEC;\nstatic const BASE64_SPEC BASE64_SPECS[] = {\n    { BASE64_TYPE_STANDARD, BASE64_TABLE,     '=', 0,  NULL,   0 },\n    { BASE64_TYPE_MIME,     BASE64_TABLE,     '=', 76, \"\\r\\n\", 2 },\n    { BASE64_TYPE_URL,      BASE64_TABLE_URL, 0,   0,  NULL,   0 }\n};\nstatic const size_t BASE64_SPECS_LENGTH = {\n    sizeof(BASE64_SPECS) / sizeof(BASE64_SPECS[0])\n};\n\nchar *base64Encode(const char *data, const size_t size, const BASE64_TYPE type)\n{\n    BASE64_SPEC spec;\n    size_t length;\n    char *base64;\n    char *cursor;\n    int lineLength;\n    int i;\n    int j;\n\n    if (data == NULL) {\n        return NULL;\n    }\n\n    spec = BASE64_SPECS[0];\n    for (i = 0; i < (int)BASE64_SPECS_LENGTH; i++) {\n        if (BASE64_SPECS[i].type == type) {\n            spec = BASE64_SPECS[i];\n            break;\n        }\n    }\n\n    length = size * 4 / 3 + 3 + 1;\n    if (spec.maxLineLength > 0) {\n        length += size / spec.maxLineLength * spec.lineSepLength;\n    }\n    base64 = malloc(length);\n    if (base64 == NULL) {\n        return NULL;\n    }\n\n    cursor = base64;\n    lineLength = 0;\n    for (i = 0, j = size; j > 0; i += 3, j -= 3) {\n        if (spec.maxLineLength > 0) {\n            if (lineLength >= spec.maxLineLength) {\n                char *sep;\n\n                for (sep = spec.lineSep; *sep != 0; sep++) {\n                    *(cursor++) = *sep;\n                }\n                lineLength = 0;\n            }\n            lineLength += 4;\n        }\n\n        if (j == 1) {\n            *(cursor++) = spec.table[(data[i + 0] >> 2 & 0x3f)];\n            *(cursor++) = spec.table[(data[i + 0] << 4 & 0x30)];\n            *(cursor++) = spec.pad;\n            *(cursor++) = spec.pad;\n        }\n        else if (j == 2) {\n            *(cursor++) = spec.table[(data[i + 0] >> 2 & 0x3f)];\n            *(cursor++) = spec.table[(data[i + 0] << 4 & 0x30) | (data[i + 1] >> 4 & 0x0f)];\n            *(cursor++) = spec.table[(data[i + 1] << 2 & 0x3c)];\n            *(cursor++) = spec.pad;\n        }\n        else {\n            *(cursor++) = spec.table[(data[i + 0] >> 2 & 0x3f)];\n            *(cursor++) = spec.table[(data[i + 0] << 4 & 0x30) | (data[i + 1] >> 4 & 0x0f)];\n            *(cursor++) = spec.table[(data[i + 1] << 2 & 0x3c) | (data[i + 2] >> 6 & 0x03)];\n            *(cursor++) = spec.table[(data[i + 2] << 0 & 0x3f)];\n        }\n    }\n    *cursor = 0;\n\n    return base64;\n}\n\nchar *base64Decode(const char *base64, size_t *retSize, const BASE64_TYPE type)\n{\n    BASE64_SPEC spec;\n    char table[0x80];\n    size_t length;\n    char *data;\n    char *cursor;\n    int i;\n    int j;\n\n    if (base64 == NULL) {\n        return NULL;\n    }\n\n    spec = BASE64_SPECS[0];\n    for (i = 0; i < (int)BASE64_SPECS_LENGTH; i++) {\n        if (BASE64_SPECS[i].type == type) {\n            spec = BASE64_SPECS[i];\n            break;\n        }\n    }\n\n    length = strlen(base64);\n    data = malloc(length * 3 / 4 + 2 + 1);\n    if (data == NULL) {\n        return NULL;\n    }\n\n    memset(table, 0x80, sizeof(table));\n    for (i = 0; i < BASE64_TABLE_LENGTH; i++) {\n        table[spec.table[i] & 0x7f] = i;\n    }\n\n    cursor = data;\n    for (i = 0, j = 0; i < (int)length; i++, j = i % 4) {\n        char ch;\n\n        if (base64[i] == spec.pad) {\n            break;\n        }\n\n        ch = table[base64[i] & 0x7f];\n        if (ch & 0x80) {\n            continue;\n        }\n        if (j == 0) {\n            *cursor = ch << 2 & 0xfc;\n        }\n        else if (j == 1) {\n            *(cursor++) |= ch >> 4 & 0x03;\n            *cursor = ch << 4 & 0xf0;\n        }\n        else if (j == 2) {\n            *(cursor++) |= ch >> 2 & 0x0f;\n            *cursor = ch << 6 & 0xc0;\n        }\n        else {\n            *(cursor++) |= ch & 0x3f;\n        }\n    }\n    *cursor = 0;\n    *retSize = cursor - data;\n\n    return data;\n}\n\n\n\nbase64.h\n#ifndef __BASE64_H__\n#define __BASE64_H__\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n#if 0\n}\n#endif\n\ntypedef enum tagBASE64_TYPE {\n    BASE64_TYPE_STANDARD,\n    BASE64_TYPE_MIME,\n    BASE64_TYPE_URL\n} BASE64_TYPE;\n\nchar *base64Encode(const char *data, const size_t size, const BASE64_TYPE type);\nchar *base64Decode(const char *base64, size_t *retSize, const BASE64_TYPE type);\n\n#if 0\n{\n#endif\n#ifdef __cplusplus\n}\n#endif\n\n#endif // !__BASE64_H__\n\n\n\n\u5909\u66f4\n\n\n2017/01/16\n\n\nbase64url\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u51e6\u7406\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\u51e6\u7406\u7cfb\u306b\u3088\u308a\u6539\u884c\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u306a\u3044\u554f\u984c\u3092\u51e6\u7406\u3057\u307e\u3057\u305f\u3002\n\n\n\n\n\n\n\u4f7f\u3044\u65b9\n\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001base64Encode\u95a2\u6570\u306b\u30c7\u30fc\u30bfdata\u3068\u30c7\u30fc\u30bf\u30b5\u30a4\u30basize\u3001\u624b\u6cd5type\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u623b\u308a\u5024\u306fmalloc\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u306e\u3067\u3001\u4f7f\u7528\u5f8c\u306b\u306ffree\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001base64Decode\u95a2\u6570\u306b\u6587\u5b57\u5217base64\u3068\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306e\u8fd4\u5374\u5148retSize\u3001\u624b\u6cd5type\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u623b\u308a\u5024\u306fmalloc\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u306e\u3067\u3001\u4f7f\u7528\u5f8c\u306b\u306ffree\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u624b\u6cd5type\u306b\u306f\u3001BASE64\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u65b9\u6cd5\u3092\u6e21\u3057\u307e\u3059\u3002\n\u30bf\u30a4\u30d7BASE64_TYPE_MIME\u3067\u306f\u300176\u6587\u5b57\u6bce\u306b\u6539\u884c\u304c\u5165\u308a\u307e\u3059\u3002\n\u30bf\u30a4\u30d7BASE64_TYPE_URL\u3067\u306f\u3001URL\u30bb\u30fc\u30d5\u306abase64url\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002\n\n\u5de5\u592b\nBASE64\u306e\u30c7\u30b3\u30fc\u30c9\u306b\u969b\u3057\u3066\u3001\u9006\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u9006\u8fd4\u9084\u30c6\u30fc\u30d6\u30eb\u304c\u306a\u3044\u5834\u5408\u3067\u3082\u3001strchr\u306a\u3069\u3092\u7528\u3044\u3066\u7c21\u5358\u306b\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u304a\u305d\u3089\u304f\u5909\u63db\u30b9\u30d4\u30fc\u30c9\u304c\u3051\u305f\u9055\u3044\u306b\u9045\u304f\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\u672c\u6765\u3067\u3042\u308c\u3070\u3001\u9006\u8fd4\u9084\u30c6\u30fc\u30d6\u30eb\u3092\u30b3\u30fc\u30c9\u306b\u76f4\u63a5\u66f8\u3044\u3066\u3082\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u305b\u3044\u305c\u3044CPU\u306e\u30b9\u30c6\u30c3\u30d7\u6570\u304c\u6570\u767e\u5897\u3048\u308b\u3050\u3089\u3044\u3067\u3059\u306e\u3067\u3001\u4eca\u56de\u306f\u52d5\u7684\u306b\u751f\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30c6\u30b9\u30c8\n\nmain.c\n#include <assert.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include \"base64.h\"\n\ntypedef struct tagBASE64_TEST {\n    BASE64_TYPE type;\n    const char *data;\n    size_t size;\n    const char *base64;\n} BASE64_TEST;\nstatic const BASE64_TEST BASE64_TESTS[] = {\n    { BASE64_TYPE_STANDARD, \"\",       0, \"\" },\n    { BASE64_TYPE_STANDARD, \"f\",      1, \"Zg==\" },\n    { BASE64_TYPE_STANDARD, \"fo\",     2, \"Zm8=\" },\n    { BASE64_TYPE_STANDARD, \"foo\",    3, \"Zm9v\" },\n    { BASE64_TYPE_STANDARD, \"foob\",   4, \"Zm9vYg==\" },\n    { BASE64_TYPE_STANDARD, \"fooba\",  5, \"Zm9vYmE=\" },\n    { BASE64_TYPE_STANDARD, \"foobar\", 6, \"Zm9vYmFy\" },\n    { BASE64_TYPE_STANDARD, \">>>>>>\", 6, \"Pj4+Pj4+\" },\n    { BASE64_TYPE_STANDARD, \"??????\", 6, \"Pz8/Pz8/\" },\n    { BASE64_TYPE_MIME,     \">>>>>>\", 6, \"Pj4+Pj4+\" },\n    { BASE64_TYPE_MIME,     \"??????\", 6, \"Pz8/Pz8/\" },\n    { BASE64_TYPE_URL,      \">>>>>>\", 6, \"Pj4-Pj4-\" },\n    { BASE64_TYPE_URL,      \"??????\", 6, \"Pz8_Pz8_\" }\n};\nstatic const size_t BASE64_TESTS_LENGTH = {\n    sizeof(BASE64_TESTS) / sizeof(BASE64_TESTS[0])\n};\n\nint main(void) {\n    int i;\n\n    for (i = 0; i < (int)BASE64_TESTS_LENGTH; i++) {\n        BASE64_TEST test;\n        char *data;\n        char *base64;\n        size_t size;\n\n        test = BASE64_TESTS[i];\n\n        base64 = base64Encode(test.data, test.size, test.type);\n        printf(\"BASE64(\\\"%s\\\") = \\\"%s\\\"\\n\", test.data, base64);\n        assert(strcmp(base64, test.base64) == 0);\n\n        data = base64Decode(base64, &size, test.type);\n        printf(\"DATA(\\\"%s\\\") = \\\"%s\\\"\\n\", base64, data);\n        assert(size == test.size);\n        assert(memcmp(data, test.data, size) == 0);\n\n        free(base64);\n        free(data);\n    }\n\n    return 0;\n}\n\n\nBASE64(\"\") = \"\"\nDATA(\"\") = \"\"\nBASE64(\"f\") = \"Zg==\"\nDATA(\"Zg==\") = \"f\"\nBASE64(\"fo\") = \"Zm8=\"\nDATA(\"Zm8=\") = \"fo\"\nBASE64(\"foo\") = \"Zm9v\"\nDATA(\"Zm9v\") = \"foo\"\nBASE64(\"foob\") = \"Zm9vYg==\"\nDATA(\"Zm9vYg==\") = \"foob\"\nBASE64(\"fooba\") = \"Zm9vYmE=\"\nDATA(\"Zm9vYmE=\") = \"fooba\"\nBASE64(\"foobar\") = \"Zm9vYmFy\"\nDATA(\"Zm9vYmFy\") = \"foobar\"\nBASE64(\">>>>>>\") = \"Pj4+Pj4+\"\nDATA(\"Pj4+Pj4+\") = \">>>>>>\"\nBASE64(\"??????\") = \"Pz8/Pz8/\"\nDATA(\"Pz8/Pz8/\") = \"??????\"\nBASE64(\">>>>>>\") = \"Pj4+Pj4+\"\nDATA(\"Pj4+Pj4+\") = \">>>>>>\"\nBASE64(\"??????\") = \"Pz8/Pz8/\"\nDATA(\"Pz8/Pz8/\") = \"??????\"\nBASE64(\">>>>>>\") = \"Pj4-Pj4-\"\nDATA(\"Pj4-Pj4-\") = \">>>>>>\"\nBASE64(\"??????\") = \"Pz8_Pz8_\"\nDATA(\"Pz8_Pz8_\") = \"??????\"\n\nRFC 4648\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30d9\u30af\u30c8\u30eb\u304c\u3059\u3079\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3001\u30c7\u30b3\u30fc\u30c9\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001URL\u30bb\u30fc\u30d5\u306abase64url\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u3001\u30c7\u30b3\u30fc\u30c9\u3082\u6b63\u3057\u304f\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u3055\u3044\u3054\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u793a\u3057\u305f\u30b3\u30fc\u30c9\u306fWTFPL v2\u3068\u3057\u3066\u304a\u308a\u307e\u3059\u306e\u3067\u3001\u3054\u81ea\u7531\u306b\u4f7f\u3063\u3066\u3044\u305f\u3060\u3044\u3066\u5927\u4e08\u592b\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u4e00\u5207\u306e\u8cac\u4efb\u3092\u53d6\u308a\u304b\u306d\u307e\u3059\u306e\u3067\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002\n# \u306f\u3058\u3081\u306b\nC\u3067BASE64\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u3068\u3067\u30b3\u30fc\u30c9\u3092\u884c\u3046\u95a2\u6570\u3067\u3059\u3002\n\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3067\u3059\u3002\n\u52c9\u5f37\u3082\u304b\u306d\u3066\u3001\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nWikipedia\u306eBASE64\u306e\u89e3\u8aac\u3068\u3001RFC 4948\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u5b9f\u88c5\n```c:base64.c\n#include <stdlib.h>\n#include <string.h>\n#include \"base64.h\"\n\nstatic const char BASE64_TABLE[] = {\n\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n};\nstatic const char BASE64_TABLE_URL[] = {\n\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n};\nstatic const int BASE64_TABLE_LENGTH = {\n\tsizeof(BASE64_TABLE) / sizeof(BASE64_TABLE[0]) - 1\n};\n\ntypedef struct tagBASE64_SPEC {\n\tBASE64_TYPE type;\n\tconst char *table;\n\tchar pad;\n\tint maxLineLength;\n\tchar *lineSep;\n\tint lineSepLength;\n} BASE64_SPEC;\nstatic const BASE64_SPEC BASE64_SPECS[] = {\n\t{ BASE64_TYPE_STANDARD, BASE64_TABLE,     '=', 0,  NULL,   0 },\n\t{ BASE64_TYPE_MIME,     BASE64_TABLE,     '=', 76, \"\\r\\n\", 2 },\n\t{ BASE64_TYPE_URL,      BASE64_TABLE_URL, 0,   0,  NULL,   0 }\n};\nstatic const size_t BASE64_SPECS_LENGTH = {\n\tsizeof(BASE64_SPECS) / sizeof(BASE64_SPECS[0])\n};\n\nchar *base64Encode(const char *data, const size_t size, const BASE64_TYPE type)\n{\n\tBASE64_SPEC spec;\n\tsize_t length;\n\tchar *base64;\n\tchar *cursor;\n\tint lineLength;\n\tint i;\n\tint j;\n\n\tif (data == NULL) {\n\t\treturn NULL;\n\t}\n\n\tspec = BASE64_SPECS[0];\n\tfor (i = 0; i < (int)BASE64_SPECS_LENGTH; i++) {\n\t\tif (BASE64_SPECS[i].type == type) {\n\t\t\tspec = BASE64_SPECS[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlength = size * 4 / 3 + 3 + 1;\n\tif (spec.maxLineLength > 0) {\n\t\tlength += size / spec.maxLineLength * spec.lineSepLength;\n\t}\n\tbase64 = malloc(length);\n\tif (base64 == NULL) {\n\t\treturn NULL;\n\t}\n\n\tcursor = base64;\n\tlineLength = 0;\n\tfor (i = 0, j = size; j > 0; i += 3, j -= 3) {\n\t\tif (spec.maxLineLength > 0) {\n\t\t\tif (lineLength >= spec.maxLineLength) {\n\t\t\t\tchar *sep;\n\n\t\t\t\tfor (sep = spec.lineSep; *sep != 0; sep++) {\n\t\t\t\t\t*(cursor++) = *sep;\n\t\t\t\t}\n\t\t\t\tlineLength = 0;\n\t\t\t}\n\t\t\tlineLength += 4;\n\t\t}\n\n\t\tif (j == 1) {\n\t\t\t*(cursor++) = spec.table[(data[i + 0] >> 2 & 0x3f)];\n\t\t\t*(cursor++) = spec.table[(data[i + 0] << 4 & 0x30)];\n\t\t\t*(cursor++) = spec.pad;\n\t\t\t*(cursor++) = spec.pad;\n\t\t}\n\t\telse if (j == 2) {\n\t\t\t*(cursor++) = spec.table[(data[i + 0] >> 2 & 0x3f)];\n\t\t\t*(cursor++) = spec.table[(data[i + 0] << 4 & 0x30) | (data[i + 1] >> 4 & 0x0f)];\n\t\t\t*(cursor++) = spec.table[(data[i + 1] << 2 & 0x3c)];\n\t\t\t*(cursor++) = spec.pad;\n\t\t}\n\t\telse {\n\t\t\t*(cursor++) = spec.table[(data[i + 0] >> 2 & 0x3f)];\n\t\t\t*(cursor++) = spec.table[(data[i + 0] << 4 & 0x30) | (data[i + 1] >> 4 & 0x0f)];\n\t\t\t*(cursor++) = spec.table[(data[i + 1] << 2 & 0x3c) | (data[i + 2] >> 6 & 0x03)];\n\t\t\t*(cursor++) = spec.table[(data[i + 2] << 0 & 0x3f)];\n\t\t}\n\t}\n\t*cursor = 0;\n\n\treturn base64;\n}\n\nchar *base64Decode(const char *base64, size_t *retSize, const BASE64_TYPE type)\n{\n\tBASE64_SPEC spec;\n\tchar table[0x80];\n\tsize_t length;\n\tchar *data;\n\tchar *cursor;\n\tint i;\n\tint j;\n\n\tif (base64 == NULL) {\n\t\treturn NULL;\n\t}\n\n\tspec = BASE64_SPECS[0];\n\tfor (i = 0; i < (int)BASE64_SPECS_LENGTH; i++) {\n\t\tif (BASE64_SPECS[i].type == type) {\n\t\t\tspec = BASE64_SPECS[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlength = strlen(base64);\n\tdata = malloc(length * 3 / 4 + 2 + 1);\n\tif (data == NULL) {\n\t\treturn NULL;\n\t}\n\n\tmemset(table, 0x80, sizeof(table));\n\tfor (i = 0; i < BASE64_TABLE_LENGTH; i++) {\n\t\ttable[spec.table[i] & 0x7f] = i;\n\t}\n\n\tcursor = data;\n\tfor (i = 0, j = 0; i < (int)length; i++, j = i % 4) {\n\t\tchar ch;\n\n\t\tif (base64[i] == spec.pad) {\n\t\t\tbreak;\n\t\t}\n\n\t\tch = table[base64[i] & 0x7f];\n\t\tif (ch & 0x80) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (j == 0) {\n\t\t\t*cursor = ch << 2 & 0xfc;\n\t\t}\n\t\telse if (j == 1) {\n\t\t\t*(cursor++) |= ch >> 4 & 0x03;\n\t\t\t*cursor = ch << 4 & 0xf0;\n\t\t}\n\t\telse if (j == 2) {\n\t\t\t*(cursor++) |= ch >> 2 & 0x0f;\n\t\t\t*cursor = ch << 6 & 0xc0;\n\t\t}\n\t\telse {\n\t\t\t*(cursor++) |= ch & 0x3f;\n\t\t}\n\t}\n\t*cursor = 0;\n\t*retSize = cursor - data;\n\n\treturn data;\n}\n```\n\n```c:base64.h\n#ifndef __BASE64_H__\n#define __BASE64_H__\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n#if 0\n}\n#endif\n\ntypedef enum tagBASE64_TYPE {\n\tBASE64_TYPE_STANDARD,\n\tBASE64_TYPE_MIME,\n\tBASE64_TYPE_URL\n} BASE64_TYPE;\n\nchar *base64Encode(const char *data, const size_t size, const BASE64_TYPE type);\nchar *base64Decode(const char *base64, size_t *retSize, const BASE64_TYPE type);\n\n#if 0\n{\n#endif\n#ifdef __cplusplus\n}\n#endif\n\n#endif // !__BASE64_H__\n```\n\n- \u5909\u66f4\n    - 2017/01/16\n        - base64url\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u51e6\u7406\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n        - \u51e6\u7406\u7cfb\u306b\u3088\u308a\u6539\u884c\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u306a\u3044\u554f\u984c\u3092\u51e6\u7406\u3057\u307e\u3057\u305f\u3002\n\n# \u4f7f\u3044\u65b9\n\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001`base64Encode`\u95a2\u6570\u306b\u30c7\u30fc\u30bf`data`\u3068\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba`size`\u3001\u624b\u6cd5`type`\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u623b\u308a\u5024\u306f`malloc`\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u306e\u3067\u3001\u4f7f\u7528\u5f8c\u306b\u306f`free`\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001`base64Decode`\u95a2\u6570\u306b\u6587\u5b57\u5217`base64`\u3068\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306e\u8fd4\u5374\u5148`retSize`\u3001\u624b\u6cd5`type`\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u623b\u308a\u5024\u306f`malloc`\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u306e\u3067\u3001\u4f7f\u7528\u5f8c\u306b\u306f`free`\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u624b\u6cd5`type`\u306b\u306f\u3001BASE64\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u65b9\u6cd5\u3092\u6e21\u3057\u307e\u3059\u3002\n\u30bf\u30a4\u30d7`BASE64_TYPE_MIME`\u3067\u306f\u300176\u6587\u5b57\u6bce\u306b\u6539\u884c\u304c\u5165\u308a\u307e\u3059\u3002\n\u30bf\u30a4\u30d7`BASE64_TYPE_URL`\u3067\u306f\u3001URL\u30bb\u30fc\u30d5\u306abase64url\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002\n\n# \u5de5\u592b\nBASE64\u306e\u30c7\u30b3\u30fc\u30c9\u306b\u969b\u3057\u3066\u3001\u9006\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u9006\u8fd4\u9084\u30c6\u30fc\u30d6\u30eb\u304c\u306a\u3044\u5834\u5408\u3067\u3082\u3001`strchr`\u306a\u3069\u3092\u7528\u3044\u3066\u7c21\u5358\u306b\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u304a\u305d\u3089\u304f\u5909\u63db\u30b9\u30d4\u30fc\u30c9\u304c\u3051\u305f\u9055\u3044\u306b\u9045\u304f\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\u672c\u6765\u3067\u3042\u308c\u3070\u3001\u9006\u8fd4\u9084\u30c6\u30fc\u30d6\u30eb\u3092\u30b3\u30fc\u30c9\u306b\u76f4\u63a5\u66f8\u3044\u3066\u3082\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u305b\u3044\u305c\u3044CPU\u306e\u30b9\u30c6\u30c3\u30d7\u6570\u304c\u6570\u767e\u5897\u3048\u308b\u3050\u3089\u3044\u3067\u3059\u306e\u3067\u3001\u4eca\u56de\u306f\u52d5\u7684\u306b\u751f\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u30c6\u30b9\u30c8\n```c:main.c\n#include <assert.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include \"base64.h\"\n\ntypedef struct tagBASE64_TEST {\n\tBASE64_TYPE type;\n\tconst char *data;\n\tsize_t size;\n\tconst char *base64;\n} BASE64_TEST;\nstatic const BASE64_TEST BASE64_TESTS[] = {\n\t{ BASE64_TYPE_STANDARD, \"\",       0, \"\" },\n\t{ BASE64_TYPE_STANDARD, \"f\",      1, \"Zg==\" },\n\t{ BASE64_TYPE_STANDARD, \"fo\",     2, \"Zm8=\" },\n\t{ BASE64_TYPE_STANDARD, \"foo\",    3, \"Zm9v\" },\n\t{ BASE64_TYPE_STANDARD, \"foob\",   4, \"Zm9vYg==\" },\n\t{ BASE64_TYPE_STANDARD, \"fooba\",  5, \"Zm9vYmE=\" },\n\t{ BASE64_TYPE_STANDARD, \"foobar\", 6, \"Zm9vYmFy\" },\n\t{ BASE64_TYPE_STANDARD, \">>>>>>\", 6, \"Pj4+Pj4+\" },\n\t{ BASE64_TYPE_STANDARD, \"??????\", 6, \"Pz8/Pz8/\" },\n\t{ BASE64_TYPE_MIME,     \">>>>>>\", 6, \"Pj4+Pj4+\" },\n\t{ BASE64_TYPE_MIME,     \"??????\", 6, \"Pz8/Pz8/\" },\n\t{ BASE64_TYPE_URL,      \">>>>>>\", 6, \"Pj4-Pj4-\" },\n\t{ BASE64_TYPE_URL,      \"??????\", 6, \"Pz8_Pz8_\" }\n};\nstatic const size_t BASE64_TESTS_LENGTH = {\n\tsizeof(BASE64_TESTS) / sizeof(BASE64_TESTS[0])\n};\n\nint main(void) {\n\tint i;\n\n\tfor (i = 0; i < (int)BASE64_TESTS_LENGTH; i++) {\n\t\tBASE64_TEST test;\n\t\tchar *data;\n\t\tchar *base64;\n\t\tsize_t size;\n\n\t\ttest = BASE64_TESTS[i];\n\n\t\tbase64 = base64Encode(test.data, test.size, test.type);\n\t\tprintf(\"BASE64(\\\"%s\\\") = \\\"%s\\\"\\n\", test.data, base64);\n\t\tassert(strcmp(base64, test.base64) == 0);\n\n\t\tdata = base64Decode(base64, &size, test.type);\n\t\tprintf(\"DATA(\\\"%s\\\") = \\\"%s\\\"\\n\", base64, data);\n\t\tassert(size == test.size);\n\t\tassert(memcmp(data, test.data, size) == 0);\n\n\t\tfree(base64);\n\t\tfree(data);\n\t}\n\n\treturn 0;\n}\n```\n\n```c\nBASE64(\"\") = \"\"\nDATA(\"\") = \"\"\nBASE64(\"f\") = \"Zg==\"\nDATA(\"Zg==\") = \"f\"\nBASE64(\"fo\") = \"Zm8=\"\nDATA(\"Zm8=\") = \"fo\"\nBASE64(\"foo\") = \"Zm9v\"\nDATA(\"Zm9v\") = \"foo\"\nBASE64(\"foob\") = \"Zm9vYg==\"\nDATA(\"Zm9vYg==\") = \"foob\"\nBASE64(\"fooba\") = \"Zm9vYmE=\"\nDATA(\"Zm9vYmE=\") = \"fooba\"\nBASE64(\"foobar\") = \"Zm9vYmFy\"\nDATA(\"Zm9vYmFy\") = \"foobar\"\nBASE64(\">>>>>>\") = \"Pj4+Pj4+\"\nDATA(\"Pj4+Pj4+\") = \">>>>>>\"\nBASE64(\"??????\") = \"Pz8/Pz8/\"\nDATA(\"Pz8/Pz8/\") = \"??????\"\nBASE64(\">>>>>>\") = \"Pj4+Pj4+\"\nDATA(\"Pj4+Pj4+\") = \">>>>>>\"\nBASE64(\"??????\") = \"Pz8/Pz8/\"\nDATA(\"Pz8/Pz8/\") = \"??????\"\nBASE64(\">>>>>>\") = \"Pj4-Pj4-\"\nDATA(\"Pj4-Pj4-\") = \">>>>>>\"\nBASE64(\"??????\") = \"Pz8_Pz8_\"\nDATA(\"Pz8_Pz8_\") = \"??????\"\n```\n\nRFC 4648\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30d9\u30af\u30c8\u30eb\u304c\u3059\u3079\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3001\u30c7\u30b3\u30fc\u30c9\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001URL\u30bb\u30fc\u30d5\u306abase64url\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u3001\u30c7\u30b3\u30fc\u30c9\u3082\u6b63\u3057\u304f\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n# \u3055\u3044\u3054\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u793a\u3057\u305f\u30b3\u30fc\u30c9\u306fWTFPL v2\u3068\u3057\u3066\u304a\u308a\u307e\u3059\u306e\u3067\u3001\u3054\u81ea\u7531\u306b\u4f7f\u3063\u3066\u3044\u305f\u3060\u3044\u3066\u5927\u4e08\u592b\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u4e00\u5207\u306e\u8cac\u4efb\u3092\u53d6\u308a\u304b\u306d\u307e\u3059\u306e\u3067\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002\n", "tags": ["C", "base64"]}