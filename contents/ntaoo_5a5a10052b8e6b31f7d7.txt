{"context": "\n\nDCI architecture\nDCI Architecture\u3068\u306f\u3001MVC\u306eModel\u306b\u95a2\u3059\u308bArchitecture\u3002\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u304a\u3044\u3066\u30e6\u30fc\u30b6\u30fc(\u53ca\u3073\u30d7\u30ed\u30b0\u30e9\u30de\u30fc)\u304c\u76f4\u89b3\u7684\u306b\u601d\u3044\u6d6e\u304b\u3079\u308b\u30b7\u30b9\u30c6\u30e0\u306e\u632f\u308b\u821e\u3044\u306e\u30e1\u30f3\u30bf\u30eb\u30e2\u30c7\u30eb\u3092\u53ef\u8996\u5316\u3057\u3001\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u3053\u3080\u3053\u3068\u3092\u76ee\u6307\u3059\u3002\u5358\u72ec\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8cac\u52d9\u3092\u8d85\u3048\u308b\u30b7\u30b9\u30c6\u30e0\u306e\u8907\u96d1\u306a\u632f\u308b\u821e\u3044\u3092\u8868\u73fe\u3059\u308b\u3002\nDCI\u3067\u306f\u3001Context\u306e\u5185\u3067Data\u306bContext\u306b\u6cbf\u3063\u305fData\u306e\u632f\u308b\u821e\u3044(Role)\u3092\u878d\u5408\u3057\u3001\u4ed6\u306e\u540c\u69d8\u306bRole\u3092\u878d\u5408\u3057\u305fData\u3068\u5171\u306bContext\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u884c(interaction)\u3055\u305b\u308b\u3002\u307e\u305f\u3001Context\u306f\u8907\u6570\u306eContext\u3092\u633f\u308c\u5b50(nest)\u306b\u3057\u3066\u7d44\u7e54\u5316\u3059\u308b\u3053\u3068\u3067\u8907\u96d1\u306a\u632f\u308b\u821e\u3044\u3092\u5206\u5272\u7d71\u6cbb\u3059\u308b\u3002\nhttp://www.artima.com/articles/dci_vision.html\nhttp://d.hatena.ne.jp/digitalsoul/20100131/1264925022\nhttps://en.wikipedia.org/wiki/Data,_context_and_interaction\nDCI Architecture\u3092DDD\u306e\u6587\u8108\u306b\u5f53\u3066\u306f\u3081\u308b\u306a\u3089\u3070\u3001(Domain | Application) Service\u306e\u5b9f\u88c5\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nContext\u304a\u3088\u3073\u305d\u306eRole\u306fService\u306b\u76f8\u5f53\u3057\u3001Data\u306fEntity\u3001ValueObject\u3001Aggregates\u306e\u3044\u305a\u308c\u304b\u306b\u76f8\u5f53\u3059\u308b\u3060\u308d\u3046\u3002\n\u8a2d\u8a08\u306e\u969b\u306b\u306fDCI\u306e\u9069\u7528\u304c\u59a5\u5f53\u3067\u3042\u308b\u304b\u691c\u8a0e\u3057\u3001\u30e1\u30f3\u30bf\u30eb\u30e2\u30c7\u30eb\u306b\u3088\u304f\u9069\u5408\u3057\u30b3\u30fc\u30c9\u306e\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u308b\u306a\u3089\u3070\u63a1\u7528\u3059\u308b\u3002\nRole\u306e\u5b9f\u88c5\u65b9\u6cd5\u3068\u3057\u3066\u3001\u63d0\u5531\u8005\u306eTrygve\u306ftrait\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u3002\nDart\u306b\u304a\u3044\u3066Data\u306bRole\u3092\u878d\u5408\u3055\u305b\u308b\u306b\u306f\u3001proxy pattern\u3068mixin\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u306e\u304c\u59a5\u5f53\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n\u5b9f\u88c5\nhttps://gist.github.com/ntaoo/3e4d834369ee4cd773712d74f4c9b7ec\n\nData\nContext\u5185\u3067Role\u3068\u878d\u5408\u3059\u308b\u3053\u3068\u306b\u306a\u308bData\u3002\n// A Data class.\nclass D1 {\n  int fieldA;\n  final String fieldB;\n  D1(this.fieldA, this.fieldB);\n\n  void methodA() {\n    print('methodA');\n  }\n\n  String methodB() => 'methodB';\n}\n\n\nProxy\nContext\u5185\u3067\u306e\u307f\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u306bData\u306bRole\u3092\u878d\u5408\u3055\u305b\u308b\u52d5\u4f5c\u3092mixin\u3060\u3051\u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u305f\u3081\u3001Context\u5185\u3067\u306e\u307f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u305b\u308bData\u306eproxy(Data proxy)\u3092\u7528\u610f\u3057\u3001\u305d\u306eproxy\u306bRole\u3092mixin\u3059\u308b\u3002\n// Proxy implementation.\nclass DataProxy<D> {\n  InstanceMirror _im;\n  D get _data => _im.reflectee;\n  DataProxy(data) : _im = reflect(data);\n\n  Type get runtimeType => _data.runtimeType;\n\n  // Performs invocation on reflectee.\n  // With noSuchMethod, there's special rule that no analyzer complainants\n  // about missing members nor incorrect signatures of such members.\n  noSuchMethod(Invocation invocation) => _im.delegate(invocation);\n}\n\n\nRole\u306eMixin\nRole\u306e\u632f\u308b\u821e\u3044\u3092\u3053\u3053\u3067\u306fbehavior\u3068\u547c\u79f0\u3057\u3066\u3044\u308b\u3002Behavior\u3092DataProxy\u306bmixin\u9069\u7528(mixin application)\u3059\u308b\u3053\u3068\u3067Data\u306fRole\u3068\u878d\u5408\u3059\u308b\u3002\nMixin\u3092\u5ba3\u8a00\u3059\u308b\u306b\u306fclass\u5ba3\u8a00\u3092\u4f7f\u7528\u3059\u308b\u3002Dart\u3067\u306f\u3042\u3089\u3086\u308bclass\u5ba3\u8a00\u306b\u304a\u3044\u3066\u6697\u9ed9\u7684\u306b\u305d\u306einterface\u3068mixin\u304c\u5ba3\u8a00\u3055\u308c\u308b\u3002\n\u3053\u308c\u3089behavior\u306f\u5358\u72ec\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u305f\u3081abstract\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u3064\u3051\u3066\u304a\u304f\u3002\nimplements\u5ba3\u8a00\u306b\u3088\u308a\u3053\u308c\u3089\u306ebehavior\u306fData(\u3053\u3053\u3067\u306fDI)\u306eAPI\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3057\u3001Static analyzer\u306b\u3088\u308b\u9759\u7684\u89e3\u6790\u306e\u5bfe\u8c61\u3068\u306a\u308b\u3002\n// Behavior mixin.\nabstract class B1 implements D1 {\n  int get a => fieldA;\n  int getFieldA() => fieldA;\n}\n\n// Behavior mixin.\nabstract class B2 implements D1 {\n  // Methodful role.\n  int succOfFieldA() => fieldA + 1;\n  String concatMethodBWith(String s) => methodB() + s;\n\n  // Methodless role.\n  bool someBoolField = true;\n}\n\n\u3053\u308c\u3089\u306ebehavior\u306f\u5b9f\u969b\u306e\u696d\u52d9\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u3067\u306f\u4ed6\u306eRole\u3084domain model\u3092\u64cd\u4f5c\u3059\u308b\u3002\u305d\u306e\u969b\u3001behavior\u306e\u8a73\u7d30\u304c\u9069\u5207\u306bdomain model\u306b\u79fb\u8b72\u3055\u308c\u305a\u306b\u80a5\u5927\u5316\u3059\u308b\u3068transaction script\u306b\u8fd1\u3065\u3044\u3066\u3044\u304f\u306e\u3067\u6ce8\u610f\u3059\u308b\u3002\n\nMixin\u9069\u7528(mixin application)\n// Role is a DataProxy with behaviors.\nclass R1 = DataProxy<D1> with B1, B2;\n\nMixin\u9069\u7528\u306fwith\u533a\u3067\u5ba3\u8a00\u3059\u308b\u3002\u8907\u6570\u306eMixin\u3092\u5ba3\u8a00\u3059\u308b\u5834\u5408\u306f\u30ab\u30f3\u30de\u3067\u533a\u5207\u308b\u3002\n\u306a\u304a\u3001mixin\u9069\u7528\u306fSuperClass\u306b\u3055\u308c\u308b\u3002class C\u306f\u5fc5\u305aextends\u53e5\u3067\u660e\u793a\u7684\u306bSuperClass\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002mixin\u304c\u4e00\u3064\u306e\u5834\u5408\u3001class C extends Object with M\u306f\u3001\u5358\u306bclass C extends M\u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3053\u306eRole\u306e\u632f\u308b\u821e\u3044\u3092mixin\u9069\u7528\u3057\u305fDataProxy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u300cRole\u3092\u878d\u5408\u3057\u305fData\u300d\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u3002\u3053\u3053\u3067\u306f\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fbf\u5b9c\u7684\u306bRole\u3068\u547c\u79f0\u3059\u308b\u3002\n\nProxy\u3068\u3057\u3066\u306e\u632f\u308b\u821e\u3044\n\n\nRole\u306fData\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u6e80\u305f\u3059\u3002\n\nget runtimeType message\u306b\u306fData\u3067\u3042\u308b\u3068\u8fd4\u7b54\u3059\u308b\u3002\nRole\u306e\u771f\u306eType\u306fmirror API\u3067\u5224\u660e\u3059\u308b\u3002\nRole\u306f\u672c\u6765\u306eData\u3078\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092Data\u306b\u79fb\u8b72\u3059\u308b\u3002\n\n\nMixin application\u3068\u3057\u3066\u306e\u632f\u308b\u821e\u3044\n\n\nRole\u306ebehavior\u306fData\u306eMember(Field\u3068Method\u306e\u3053\u3068)\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\nRole\u306fbehavior\u3067\u5ba3\u8a00\u3057\u305ffield\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\n\n\n\ntest('Role should implement its data interface.', () {\n  expect(role is D1, isTrue);\n});\ntest('Role should pretend to be its data.', () {\n  expect(role.runtimeType, data.runtimeType);\n});\ntest('True type of a role should be revealed by mirrors API.', () {\n  var instanceMirror = reflect(role);\n  expect(instanceMirror.type.reflectedType, R1);\n});\ntest('Role should delegate missing invocations to its data.', () {\n  expect(role.fieldA, data.fieldA);\n  expect(role.fieldB, data.fieldB);\n  role.methodA(); // Prints.\n  expect(role.methodB(), data.methodB());\n});\ntest('Role should have its behaviors which can access the data members.',\n    () {\n  expect(role.a, data.fieldA);\n  expect(role.getFieldA(), data.fieldA);\n  expect(role.succOfFieldA(), data.fieldA + 1);\n  expect(role.concatMethodBWith(' + z'), data.methodB() + ' + z');\n});\ntest('Role should access a behavior field.', () {\n  expect(role.someBoolField, isTrue);\n  role.someBoolField = false;\n  expect(role.someBoolField, isFalse);\n});\n\n\u306a\u304a\u3001Static method(Class method)\u306f\u7d99\u627f\u3055\u308c\u306a\u3044\u305f\u3081\u3001Mixin\u3067\u3082\u7d99\u627f\u3055\u308c\u306a\u3044\u3002\u5f93\u3063\u3066\u3001mixin class\u3067static method\u3092\u5ba3\u8a00\u3057\u3066\u3082mixin application\u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u305f\u3081\u610f\u5473\u304c\u7121\u3044\u3002\n\u307e\u305f\u3001\u73fe\u72b6\u306e\u4ed5\u69d8\u3067\u306f\u3001class\u3092mixin\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u591a\u91cd\u7d99\u627f\u306e\u6df7\u4e71\u3092\u907f\u3051\u308b\u305f\u3081\u660e\u793a\u7684\u306bconstructor\u3092\u5ba3\u8a00\u3067\u304d\u306a\u3044\u3002\u9055\u53cd\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\u5168\u3066\u306eclass\u306f\u6697\u9ed9\u7684\u306b\u4e00\u3064\u306econstructor(\u4f8b\u3048\u3070C();)\u3092\u5ba3\u8a00\u3059\u308b\u304c\u3001mixin application\u3067\u306f\u305d\u308c\u306f\u7121\u8996\u3055\u308c\u308b\u3002\n\u300c\u5168\u3066\u306eclass\u306f\u6697\u9ed9\u7684\u306b\u4e00\u3064\u306econstructor\u3092\u5ba3\u8a00\u3059\u308b\u300d\u3068\u306f\u3001\u4f8b\u3048\u3070\u3001class C {}\u3068\u5ba3\u8a00\u3059\u308c\u3070\u3001C\u306fC(); constructor\u3092\u6697\u9ed9\u7684\u306b\u5ba3\u8a00\u3059\u308b\u3002\u5f93\u3063\u3066 new C();\u3067C\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3067\u304d\u308b\u3002\n\nMirror\u3068Reflectable\nDataProxy\u3067\u306fData\u306eAPI\u3092\u79fb\u8b72\u3059\u308b\u305f\u3081\u306bnoSuchMethod\u3068Mirror\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002noSuchMethod\u306f\u30ec\u30b7\u30fc\u30d0\u30fc\u304c\u7406\u89e3\u3067\u304d\u306a\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3057\u305f\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u308b\u3002Smalltalk\u306edoesNotUnderstand\u3002Ruby\u306emethod_missing\u3002Mirror\u3068\u306fDart\u306eReflection API\u3002\nDartVM\u3067\u5b9f\u884c\u305b\u305aJavaScript\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001Mirror\u3092\u4f7f\u7528\u3059\u308b\u3068TreeShaking\u3084Minification\u304c\u3046\u307e\u304f\u6a5f\u80fd\u305b\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u5f8c\u306e\u30b3\u30fc\u30c9\u30b5\u30a4\u30ba\u304c\u80a5\u5927\u5316\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001Mirror\u306e\u4ee3\u308f\u308a\u306bReflectable\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3002Reflectable\u3067\u306f\u5b9f\u884c\u6642\u306breflection\u3059\u308b\u306e\u3067\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u524d\u306breflection\u306b\u5fc5\u8981\u306a\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3092\u5909\u5f62\u3055\u305b\u308b\u3053\u3068\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u9759\u7684\u89e3\u6790\u3092\u652f\u63f4\u3059\u308b\u3002\u305f\u3060\u3057\u3001Mirror\u3068\u306f\u7570\u306a\u308a\u3001\u7279\u5225\u306aMeta Data(Reflection capability)\u3092\u5ba3\u8a00\u3057\u3001Reflection\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9(\u3053\u3053\u3067\u306fD1)\u3092\u4ed8\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nReflection\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\n\u3082\u3057Reflection\u306b\u3088\u308b\u30b3\u30fc\u30c9\u30b5\u30a4\u30ba\u306e\u5897\u52a0\u3068\u5b9f\u884c\u6642\u306e\u8a08\u7b97\u30b3\u30b9\u30c8\u306e\u5897\u52a0\u3092\u8a31\u5bb9\u3067\u304d\u306a\u3044\u5834\u5408\u3001Proxy\u306e\u4ee3\u308f\u308a\u306b\u6bce\u56deData\u306e\u5168\u3066\u306eMember\u306edelegation\u3092\u9759\u7684\u306b\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3059\u308b\u3002\nData\u306eAPI\u306e\u5909\u66f4\u306b\u5408\u308f\u305b\u3066API\u3092\u5909\u66f4\u3059\u308b\u624b\u9593\u306f\u5897\u3048\u308b\u304c\u3001implements\u3067Data\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308c\u3070Static analyzer\u306b\u3088\u308b\u9759\u7684\u89e3\u6790\u306e\u5bfe\u8c61\u306b\u306a\u308b\u305f\u3081\u3001Data\u306eAPI\u306e\u5909\u66f4\u6642\u306b\u3053\u306eclass\u306eAPI\u306e\u5909\u66f4\u3092\u5fd8\u308c\u308b\u30df\u30b9\u3092\u6291\u6b62\u3067\u304d\u308b\u3002\n// Declare base role instead of DataProxy.\nabstract class Role {\n  dynamic get _data;\n  Type get runtimeType => _data.runtimeType;\n}\n\n// Concrete role should implement interface of its data.\n// Static analyzer can warn missing implementations of its data.\nclass R2 extends Role with B1, B2 implements D1 {\n  final D1 _data;\n  R2(this._data);\n  int get fieldA => _data.fieldA;\n  set fieldA(int i) => _data.fieldA = i;\n  String get fieldB => _data.fieldB;\n  void methodA() => _data.methodA();\n  String methodB() => _data.methodB();\n}\n\n\nRef\nhttp://www.artima.com/articles/dci_vision.html\nhttp://d.hatena.ne.jp/digitalsoul/20100131/1264925022\nhttps://www.dartlang.org/articles/language/mixins\nhttps://www.amazon.com/Dart-Programming-Language-Gilad-Bracha-ebook/dp/B01929VVHU/\n\n# DCI architecture\n\nDCI Architecture\u3068\u306f\u3001MVC\u306eModel\u306b\u95a2\u3059\u308bArchitecture\u3002\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u304a\u3044\u3066\u30e6\u30fc\u30b6\u30fc(\u53ca\u3073\u30d7\u30ed\u30b0\u30e9\u30de\u30fc)\u304c\u76f4\u89b3\u7684\u306b\u601d\u3044\u6d6e\u304b\u3079\u308b\u30b7\u30b9\u30c6\u30e0\u306e\u632f\u308b\u821e\u3044\u306e\u30e1\u30f3\u30bf\u30eb\u30e2\u30c7\u30eb\u3092\u53ef\u8996\u5316\u3057\u3001\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u3053\u3080\u3053\u3068\u3092\u76ee\u6307\u3059\u3002\u5358\u72ec\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8cac\u52d9\u3092\u8d85\u3048\u308b\u30b7\u30b9\u30c6\u30e0\u306e\u8907\u96d1\u306a\u632f\u308b\u821e\u3044\u3092\u8868\u73fe\u3059\u308b\u3002\nDCI\u3067\u306f\u3001Context\u306e\u5185\u3067Data\u306bContext\u306b\u6cbf\u3063\u305fData\u306e\u632f\u308b\u821e\u3044(Role)\u3092\u878d\u5408\u3057\u3001\u4ed6\u306e\u540c\u69d8\u306bRole\u3092\u878d\u5408\u3057\u305fData\u3068\u5171\u306bContext\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u884c(interaction)\u3055\u305b\u308b\u3002\u307e\u305f\u3001Context\u306f\u8907\u6570\u306eContext\u3092\u633f\u308c\u5b50(nest)\u306b\u3057\u3066\u7d44\u7e54\u5316\u3059\u308b\u3053\u3068\u3067\u8907\u96d1\u306a\u632f\u308b\u821e\u3044\u3092\u5206\u5272\u7d71\u6cbb\u3059\u308b\u3002\n\nhttp://www.artima.com/articles/dci_vision.html\nhttp://d.hatena.ne.jp/digitalsoul/20100131/1264925022\nhttps://en.wikipedia.org/wiki/Data,_context_and_interaction\n\nDCI Architecture\u3092DDD\u306e\u6587\u8108\u306b\u5f53\u3066\u306f\u3081\u308b\u306a\u3089\u3070\u3001(Domain | Application) Service\u306e\u5b9f\u88c5\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nContext\u304a\u3088\u3073\u305d\u306eRole\u306fService\u306b\u76f8\u5f53\u3057\u3001Data\u306fEntity\u3001ValueObject\u3001Aggregates\u306e\u3044\u305a\u308c\u304b\u306b\u76f8\u5f53\u3059\u308b\u3060\u308d\u3046\u3002\n\u8a2d\u8a08\u306e\u969b\u306b\u306fDCI\u306e\u9069\u7528\u304c\u59a5\u5f53\u3067\u3042\u308b\u304b\u691c\u8a0e\u3057\u3001\u30e1\u30f3\u30bf\u30eb\u30e2\u30c7\u30eb\u306b\u3088\u304f\u9069\u5408\u3057\u30b3\u30fc\u30c9\u306e\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u308b\u306a\u3089\u3070\u63a1\u7528\u3059\u308b\u3002\n\n\nRole\u306e\u5b9f\u88c5\u65b9\u6cd5\u3068\u3057\u3066\u3001\u63d0\u5531\u8005\u306e[Trygve\u306ftrait\u3092\u63a8\u5968](http://www.artima.com/articles/dci_vision.html)\u3057\u3066\u3044\u308b\u3002\nDart\u306b\u304a\u3044\u3066Data\u306bRole\u3092\u878d\u5408\u3055\u305b\u308b\u306b\u306f\u3001proxy pattern\u3068mixin\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u306e\u304c\u59a5\u5f53\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n\n# \u5b9f\u88c5\n\nhttps://gist.github.com/ntaoo/3e4d834369ee4cd773712d74f4c9b7ec\n\n## Data\n\nContext\u5185\u3067Role\u3068\u878d\u5408\u3059\u308b\u3053\u3068\u306b\u306a\u308bData\u3002\n\n```dart\n// A Data class.\nclass D1 {\n  int fieldA;\n  final String fieldB;\n  D1(this.fieldA, this.fieldB);\n\n  void methodA() {\n    print('methodA');\n  }\n\n  String methodB() => 'methodB';\n}\n```\n\n## Proxy\n\nContext\u5185\u3067\u306e\u307f\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u306bData\u306bRole\u3092\u878d\u5408\u3055\u305b\u308b\u52d5\u4f5c\u3092mixin\u3060\u3051\u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u305f\u3081\u3001Context\u5185\u3067\u306e\u307f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u305b\u308bData\u306eproxy(Data proxy)\u3092\u7528\u610f\u3057\u3001\u305d\u306eproxy\u306bRole\u3092mixin\u3059\u308b\u3002\n\n```dart\n// Proxy implementation.\nclass DataProxy<D> {\n  InstanceMirror _im;\n  D get _data => _im.reflectee;\n  DataProxy(data) : _im = reflect(data);\n\n  Type get runtimeType => _data.runtimeType;\n\n  // Performs invocation on reflectee.\n  // With noSuchMethod, there's special rule that no analyzer complainants\n  // about missing members nor incorrect signatures of such members.\n  noSuchMethod(Invocation invocation) => _im.delegate(invocation);\n}\n```\n\n## Role\u306eMixin\n\nRole\u306e\u632f\u308b\u821e\u3044\u3092\u3053\u3053\u3067\u306fbehavior\u3068\u547c\u79f0\u3057\u3066\u3044\u308b\u3002Behavior\u3092DataProxy\u306bmixin\u9069\u7528(mixin application)\u3059\u308b\u3053\u3068\u3067Data\u306fRole\u3068\u878d\u5408\u3059\u308b\u3002\nMixin\u3092\u5ba3\u8a00\u3059\u308b\u306b\u306fclass\u5ba3\u8a00\u3092\u4f7f\u7528\u3059\u308b\u3002Dart\u3067\u306f\u3042\u3089\u3086\u308bclass\u5ba3\u8a00\u306b\u304a\u3044\u3066\u6697\u9ed9\u7684\u306b\u305d\u306einterface\u3068mixin\u304c\u5ba3\u8a00\u3055\u308c\u308b\u3002\n\u3053\u308c\u3089behavior\u306f\u5358\u72ec\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u305f\u3081abstract\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u3064\u3051\u3066\u304a\u304f\u3002\nimplements\u5ba3\u8a00\u306b\u3088\u308a\u3053\u308c\u3089\u306ebehavior\u306fData(\u3053\u3053\u3067\u306fDI)\u306eAPI\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3057\u3001Static analyzer\u306b\u3088\u308b\u9759\u7684\u89e3\u6790\u306e\u5bfe\u8c61\u3068\u306a\u308b\u3002\n\n```dart\n// Behavior mixin.\nabstract class B1 implements D1 {\n  int get a => fieldA;\n  int getFieldA() => fieldA;\n}\n\n// Behavior mixin.\nabstract class B2 implements D1 {\n  // Methodful role.\n  int succOfFieldA() => fieldA + 1;\n  String concatMethodBWith(String s) => methodB() + s;\n\n  // Methodless role.\n  bool someBoolField = true;\n}\n```\n\n\u3053\u308c\u3089\u306ebehavior\u306f\u5b9f\u969b\u306e\u696d\u52d9\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u3067\u306f\u4ed6\u306eRole\u3084domain model\u3092\u64cd\u4f5c\u3059\u308b\u3002\u305d\u306e\u969b\u3001behavior\u306e\u8a73\u7d30\u304c\u9069\u5207\u306bdomain model\u306b\u79fb\u8b72\u3055\u308c\u305a\u306b\u80a5\u5927\u5316\u3059\u308b\u3068transaction script\u306b\u8fd1\u3065\u3044\u3066\u3044\u304f\u306e\u3067\u6ce8\u610f\u3059\u308b\u3002\n\n## Mixin\u9069\u7528(mixin application)\n\n```dart\n// Role is a DataProxy with behaviors.\nclass R1 = DataProxy<D1> with B1, B2;\n```\nMixin\u9069\u7528\u306fwith\u533a\u3067\u5ba3\u8a00\u3059\u308b\u3002\u8907\u6570\u306eMixin\u3092\u5ba3\u8a00\u3059\u308b\u5834\u5408\u306f\u30ab\u30f3\u30de\u3067\u533a\u5207\u308b\u3002\n\n\u306a\u304a\u3001mixin\u9069\u7528\u306fSuperClass\u306b\u3055\u308c\u308b\u3002class C\u306f\u5fc5\u305aextends\u53e5\u3067\u660e\u793a\u7684\u306bSuperClass\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002mixin\u304c\u4e00\u3064\u306e\u5834\u5408\u3001`class C extends Object with M`\u306f\u3001\u5358\u306b`class C extends M`\u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3053\u306eRole\u306e\u632f\u308b\u821e\u3044\u3092mixin\u9069\u7528\u3057\u305fDataProxy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u300cRole\u3092\u878d\u5408\u3057\u305fData\u300d\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u3002\u3053\u3053\u3067\u306f\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fbf\u5b9c\u7684\u306bRole\u3068\u547c\u79f0\u3059\u308b\u3002\n\n* Proxy\u3068\u3057\u3066\u306e\u632f\u308b\u821e\u3044\n - Role\u306fData\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u6e80\u305f\u3059\u3002\n - `get runtimeType` message\u306b\u306fData\u3067\u3042\u308b\u3068\u8fd4\u7b54\u3059\u308b\u3002\n - Role\u306e\u771f\u306eType\u306fmirror API\u3067\u5224\u660e\u3059\u308b\u3002\n - Role\u306f\u672c\u6765\u306eData\u3078\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092Data\u306b\u79fb\u8b72\u3059\u308b\u3002\n* Mixin application\u3068\u3057\u3066\u306e\u632f\u308b\u821e\u3044\n - Role\u306ebehavior\u306fData\u306eMember(Field\u3068Method\u306e\u3053\u3068)\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\n - Role\u306fbehavior\u3067\u5ba3\u8a00\u3057\u305ffield\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\n\n```dart\ntest('Role should implement its data interface.', () {\n  expect(role is D1, isTrue);\n});\ntest('Role should pretend to be its data.', () {\n  expect(role.runtimeType, data.runtimeType);\n});\ntest('True type of a role should be revealed by mirrors API.', () {\n  var instanceMirror = reflect(role);\n  expect(instanceMirror.type.reflectedType, R1);\n});\ntest('Role should delegate missing invocations to its data.', () {\n  expect(role.fieldA, data.fieldA);\n  expect(role.fieldB, data.fieldB);\n  role.methodA(); // Prints.\n  expect(role.methodB(), data.methodB());\n});\ntest('Role should have its behaviors which can access the data members.',\n    () {\n  expect(role.a, data.fieldA);\n  expect(role.getFieldA(), data.fieldA);\n  expect(role.succOfFieldA(), data.fieldA + 1);\n  expect(role.concatMethodBWith(' + z'), data.methodB() + ' + z');\n});\ntest('Role should access a behavior field.', () {\n  expect(role.someBoolField, isTrue);\n  role.someBoolField = false;\n  expect(role.someBoolField, isFalse);\n});\n```\n\n\u306a\u304a\u3001Static method(Class method)\u306f\u7d99\u627f\u3055\u308c\u306a\u3044\u305f\u3081\u3001Mixin\u3067\u3082\u7d99\u627f\u3055\u308c\u306a\u3044\u3002\u5f93\u3063\u3066\u3001mixin class\u3067static method\u3092\u5ba3\u8a00\u3057\u3066\u3082mixin application\u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u305f\u3081\u610f\u5473\u304c\u7121\u3044\u3002\n\u307e\u305f\u3001\u73fe\u72b6\u306e\u4ed5\u69d8\u3067\u306f\u3001class\u3092mixin\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u591a\u91cd\u7d99\u627f\u306e\u6df7\u4e71\u3092\u907f\u3051\u308b\u305f\u3081\u660e\u793a\u7684\u306bconstructor\u3092\u5ba3\u8a00\u3067\u304d\u306a\u3044\u3002\u9055\u53cd\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\u5168\u3066\u306eclass\u306f\u6697\u9ed9\u7684\u306b\u4e00\u3064\u306econstructor(\u4f8b\u3048\u3070`C();`)\u3092\u5ba3\u8a00\u3059\u308b\u304c\u3001mixin application\u3067\u306f\u305d\u308c\u306f\u7121\u8996\u3055\u308c\u308b\u3002\n\u300c\u5168\u3066\u306eclass\u306f\u6697\u9ed9\u7684\u306b\u4e00\u3064\u306econstructor\u3092\u5ba3\u8a00\u3059\u308b\u300d\u3068\u306f\u3001\u4f8b\u3048\u3070\u3001`class C {}`\u3068\u5ba3\u8a00\u3059\u308c\u3070\u3001C\u306f`C();` constructor\u3092\u6697\u9ed9\u7684\u306b\u5ba3\u8a00\u3059\u308b\u3002\u5f93\u3063\u3066 `new C();`\u3067C\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3067\u304d\u308b\u3002\n\n\n### Mirror\u3068Reflectable\n\nDataProxy\u3067\u306fData\u306eAPI\u3092\u79fb\u8b72\u3059\u308b\u305f\u3081\u306bnoSuchMethod\u3068Mirror\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002noSuchMethod\u306f\u30ec\u30b7\u30fc\u30d0\u30fc\u304c\u7406\u89e3\u3067\u304d\u306a\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3057\u305f\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u308b\u3002Smalltalk\u306e`doesNotUnderstand`\u3002Ruby\u306e`method_missing`\u3002Mirror\u3068\u306fDart\u306eReflection API\u3002\nDartVM\u3067\u5b9f\u884c\u305b\u305aJavaScript\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001Mirror\u3092\u4f7f\u7528\u3059\u308b\u3068TreeShaking\u3084Minification\u304c\u3046\u307e\u304f\u6a5f\u80fd\u305b\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u5f8c\u306e\u30b3\u30fc\u30c9\u30b5\u30a4\u30ba\u304c\u80a5\u5927\u5316\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001Mirror\u306e\u4ee3\u308f\u308a\u306b[Reflectable\u30d1\u30c3\u30b1\u30fc\u30b8](https://github.com/dart-lang/reflectable)\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3002Reflectable\u3067\u306f\u5b9f\u884c\u6642\u306breflection\u3059\u308b\u306e\u3067\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u524d\u306breflection\u306b\u5fc5\u8981\u306a\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3092\u5909\u5f62\u3055\u305b\u308b\u3053\u3068\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u9759\u7684\u89e3\u6790\u3092\u652f\u63f4\u3059\u308b\u3002\u305f\u3060\u3057\u3001Mirror\u3068\u306f\u7570\u306a\u308a\u3001\u7279\u5225\u306aMeta Data(Reflection capability)\u3092\u5ba3\u8a00\u3057\u3001Reflection\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9(\u3053\u3053\u3067\u306fD1)\u3092\u4ed8\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n### Reflection\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\n\n\u3082\u3057Reflection\u306b\u3088\u308b\u30b3\u30fc\u30c9\u30b5\u30a4\u30ba\u306e\u5897\u52a0\u3068\u5b9f\u884c\u6642\u306e\u8a08\u7b97\u30b3\u30b9\u30c8\u306e\u5897\u52a0\u3092\u8a31\u5bb9\u3067\u304d\u306a\u3044\u5834\u5408\u3001Proxy\u306e\u4ee3\u308f\u308a\u306b\u6bce\u56deData\u306e\u5168\u3066\u306eMember\u306edelegation\u3092\u9759\u7684\u306b\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3059\u308b\u3002\nData\u306eAPI\u306e\u5909\u66f4\u306b\u5408\u308f\u305b\u3066API\u3092\u5909\u66f4\u3059\u308b\u624b\u9593\u306f\u5897\u3048\u308b\u304c\u3001`implements`\u3067Data\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308c\u3070Static analyzer\u306b\u3088\u308b\u9759\u7684\u89e3\u6790\u306e\u5bfe\u8c61\u306b\u306a\u308b\u305f\u3081\u3001Data\u306eAPI\u306e\u5909\u66f4\u6642\u306b\u3053\u306eclass\u306eAPI\u306e\u5909\u66f4\u3092\u5fd8\u308c\u308b\u30df\u30b9\u3092\u6291\u6b62\u3067\u304d\u308b\u3002\n\n```dart\n// Declare base role instead of DataProxy.\nabstract class Role {\n  dynamic get _data;\n  Type get runtimeType => _data.runtimeType;\n}\n\n// Concrete role should implement interface of its data.\n// Static analyzer can warn missing implementations of its data.\nclass R2 extends Role with B1, B2 implements D1 {\n  final D1 _data;\n  R2(this._data);\n  int get fieldA => _data.fieldA;\n  set fieldA(int i) => _data.fieldA = i;\n  String get fieldB => _data.fieldB;\n  void methodA() => _data.methodA();\n  String methodB() => _data.methodB();\n}\n```\n\n# Ref\n\nhttp://www.artima.com/articles/dci_vision.html\nhttp://d.hatena.ne.jp/digitalsoul/20100131/1264925022\nhttps://www.dartlang.org/articles/language/mixins\nhttps://www.amazon.com/Dart-Programming-Language-Gilad-Bracha-ebook/dp/B01929VVHU/\n", "tags": ["DCI", "Dart"]}