{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u5c11\u3057\u7279\u6b8a\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u304b\u3064\u3066 Map<K, V> \u306b\u30c7\u30fc\u30bf\u3092\u53ce\u3081\u308b\u969b\u3001V \u306e\u65b9\u306b\u300c\u540c\u4e00\u6027\u306f\u306a\u3044\u304c\u540c\u5024\u6027\u304c\u3042\u308b\u3082\u306e\u304c\u591a\u6570\u5b58\u5728\u3059\u308b\u300d\u3068\u3044\u3046\u72b6\u6cc1\u306b\u906d\u9047\u3057\u305f\u3053\u3068\u304c\u3042\u308b\u3002\u305d\u306e\u969b\u3001\u91cd\u8907\u6392\u9664(dedup)\u3092\u884c\u306a\u3044\u306a\u304c\u3089\u683c\u7d0d\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u30e1\u30e2\u30ea\u306e\u7bc0\u7d04\u3092\u884c\u306a\u3046\u3068\u3044\u3046\u30de\u30c3\u30d7\u306e\u5b9f\u88c5\u3092\u884c\u306a\u3063\u305f\u306e\u3067\u3001\u30e1\u30e2\u304c\u3066\u3089\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\n\u5b9f\u88c5\n\nDedupMap.java\n    public static class DedupMap<K, V> implements Map<K, V> {\n\n        private Map<V, K> reverse = new HashMap<V, K>();\n        private Map<K, V> map = new HashMap<K, V>();\n\n        @Override public void clear() {reverse.clear(); map.clear();}\n        @Override public boolean containsKey(Object arg0) {return map.containsKey(arg0);}\n        @Override public boolean containsValue(Object arg0) {return map.containsValue(arg0);}\n        @Override public Set<Entry<K, V>> entrySet() {return map.entrySet();}\n        @Override public V get(Object arg0) {return map.get(arg0);}\n        @Override public boolean isEmpty() {return map.isEmpty();}\n        @Override public Set<K> keySet() {return map.keySet();}\n        @Override public int size() {return map.size();}\n        @Override public Collection<V> values() {return map.values();}\n\n        private static class NoKeyFoundException extends Exception {}\n        private static final NoKeyFoundException noKeyFound = new NoKeyFoundException();\n        // \u9006\u5f15\u304d\u304c\u5931\u6557\u3059\u308b\u5ea6\u306b stack trace \u3092\u751f\u6210\u3059\u308b\u306e\u306f\u9045\u3044\u305f\u3081\u3001\u3042\u3089\u304b\u3058\u3081\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e\u751f\u6210\u3092\u884c\u306a\u3046\n\n        private K reverseLookup(V v) throws NoKeyFoundException {\n            for (Entry<K, V> entry : map.entrySet()) if (entry.getValue() == v) return entry.getKey();\n            throw noKeyFound; // \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3092\u30b9\u30ed\u30fc\n        }\n\n        @Override public V remove(Object k_) {\n            V v = map.remove(k_);\n            try {\n                    reverse.put(v, reverseLookup(v));\n            } catch (NoKeyFoundError e) {\n                    reverse.remove(v);\n            }\n            return v;\n        }\n\n        private V dedupScan(V value) {\n            if (! reverse.containsKey(value)) return value;\n            return map.get(reverse.get(value));\n        }\n\n        @Override public V put(K arg0, V arg1) {\n            V value = dedupScan(arg1);\n            reverse.put(value, arg0);\n            return map.put(arg0, value);\n        }\n\n        @Override public void putAll(Map<? extends K, ? extends V> m) {\n            for (Entry<? extends K, ? extends V> entry : m.entrySet()) put(entry.getKey(), entry.getValue());\n        }\n    }\n\n\n\n\u8ab2\u984c\nremove( ) \u304c\u30de\u30c3\u30d7\u306e\u5168\u4ef6\u691c\u7d22\u304c\u5165\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u9045\u3044\u306f\u305a\u3002\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u3067\u306f remove \u3092\u5168\u304f\u4f7f\u7528\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u8a73\u7d30\u306f\u4e0d\u660e\u3060\u304c\u4eca\u5f8c\u306e\u691c\u8a0e\u304c\u5fc5\u8981\u3068\u601d\u308f\u308c\u308b\u3002\n# \u306f\u3058\u3081\u306b\n\u5c11\u3057\u7279\u6b8a\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u304b\u3064\u3066 Map\\<K, V\\> \u306b\u30c7\u30fc\u30bf\u3092\u53ce\u3081\u308b\u969b\u3001V \u306e\u65b9\u306b\u300c\u540c\u4e00\u6027\u306f\u306a\u3044\u304c\u540c\u5024\u6027\u304c\u3042\u308b\u3082\u306e\u304c\u591a\u6570\u5b58\u5728\u3059\u308b\u300d\u3068\u3044\u3046\u72b6\u6cc1\u306b\u906d\u9047\u3057\u305f\u3053\u3068\u304c\u3042\u308b\u3002\u305d\u306e\u969b\u3001\u91cd\u8907\u6392\u9664(dedup)\u3092\u884c\u306a\u3044\u306a\u304c\u3089\u683c\u7d0d\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u30e1\u30e2\u30ea\u306e\u7bc0\u7d04\u3092\u884c\u306a\u3046\u3068\u3044\u3046\u30de\u30c3\u30d7\u306e\u5b9f\u88c5\u3092\u884c\u306a\u3063\u305f\u306e\u3067\u3001\u30e1\u30e2\u304c\u3066\u3089\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\n# \u5b9f\u88c5\n```Java:DedupMap.java\n\tpublic static class DedupMap<K, V> implements Map<K, V> {\n\n        private Map<V, K> reverse = new HashMap<V, K>();\n        private Map<K, V> map = new HashMap<K, V>();\n\n        @Override public void clear() {reverse.clear(); map.clear();}\n        @Override public boolean containsKey(Object arg0) {return map.containsKey(arg0);}\n        @Override public boolean containsValue(Object arg0) {return map.containsValue(arg0);}\n        @Override public Set<Entry<K, V>> entrySet() {return map.entrySet();}\n        @Override public V get(Object arg0) {return map.get(arg0);}\n        @Override public boolean isEmpty() {return map.isEmpty();}\n        @Override public Set<K> keySet() {return map.keySet();}\n        @Override public int size() {return map.size();}\n        @Override public Collection<V> values() {return map.values();}\n\n        private static class NoKeyFoundException extends Exception {}\n        private static final NoKeyFoundException noKeyFound = new NoKeyFoundException();\n        // \u9006\u5f15\u304d\u304c\u5931\u6557\u3059\u308b\u5ea6\u306b stack trace \u3092\u751f\u6210\u3059\u308b\u306e\u306f\u9045\u3044\u305f\u3081\u3001\u3042\u3089\u304b\u3058\u3081\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e\u751f\u6210\u3092\u884c\u306a\u3046\n\n        private K reverseLookup(V v) throws NoKeyFoundException {\n            for (Entry<K, V> entry : map.entrySet()) if (entry.getValue() == v) return entry.getKey();\n            throw noKeyFound; // \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3092\u30b9\u30ed\u30fc\n        }\n\n        @Override public V remove(Object k_) {\n            V v = map.remove(k_);\n            try {\n                    reverse.put(v, reverseLookup(v));\n            } catch (NoKeyFoundError e) {\n                    reverse.remove(v);\n            }\n            return v;\n        }\n\n        private V dedupScan(V value) {\n            if (! reverse.containsKey(value)) return value;\n            return map.get(reverse.get(value));\n        }\n\n        @Override public V put(K arg0, V arg1) {\n            V value = dedupScan(arg1);\n            reverse.put(value, arg0);\n            return map.put(arg0, value);\n        }\n\n        @Override public void putAll(Map<? extends K, ? extends V> m) {\n            for (Entry<? extends K, ? extends V> entry : m.entrySet()) put(entry.getKey(), entry.getValue());\n        }\n    }\n```\n\n# \u8ab2\u984c\nremove( ) \u304c\u30de\u30c3\u30d7\u306e\u5168\u4ef6\u691c\u7d22\u304c\u5165\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u9045\u3044\u306f\u305a\u3002\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u3067\u306f remove \u3092\u5168\u304f\u4f7f\u7528\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u8a73\u7d30\u306f\u4e0d\u660e\u3060\u304c\u4eca\u5f8c\u306e\u691c\u8a0e\u304c\u5fc5\u8981\u3068\u601d\u308f\u308c\u308b\u3002\n", "tags": ["Java", "map", "\u91cd\u8907\u6392\u9664"]}