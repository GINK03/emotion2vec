{"context": "\n\u52d5\u4f5c\u74b0\u5883\nXeon E5-2620 v4 (8\u30b3\u30a2) x 2\n32GB RAM\nCentOS 6.8 (64bit)\nopenmpi-1.8.x86_64 \u3068\u305d\u306e-devel\nmpich.x86_64 3.1-5.el6\u3068\u305d\u306e-devel\ngcc version 4.4.7 (\u3068gfortran)\nNCAR Command Language Version 6.3.0\nWRF v3.7.1\nGNU bash, version 4.1.2(1)-release (x86_64-redhat-linux-gnu)\nGNOME Terminal v2.31.3\n\n\nWRF(Weather Research and Forecasting Model)\u95a2\u9023\u3002\n\u95a2\u9023 http://qiita.com/7of9/items/050bec2ecd6e0b790165\nWPS\u51e6\u7406\u6642\u306elink_grib.csh\u30d5\u30a1\u30a4\u30eb\u306eSymbolic link\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb\u306e\u51e6\u7406\u304c\u4f7f\u3044\u52dd\u624b\u304c\u60aa\u3044\u306e\u3067\u3001\u81ea\u4f5c\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3088\u3046\u3068\u304b\u3068\u8003\u3048\u3066\u3044\u308b\u3002\nbash\u3067\u5b9f\u88c5\u3059\u308b\u304b\u3001Python\u3067\u5b9f\u88c5\u3059\u308b\u304b\u3002\n\u3068\u308a\u3042\u3048\u305abash\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\n\u5b9f\u88c5\u5185\u5bb9\nWPS\u306e\u51e6\u7406\u3067\u306f\u3001\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066AAA, ..., AAZ, ABA, ..., AZA, ... AZZ, BAA, ... ZZZ\u306esuffix\u3092\u4ed8\u3051\u308b\u3002\n\u305d\u306e\u51e6\u7406\u3092bash\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3002\n\n\u5f15\u6570: 0\u304b\u308917576-1 (26\u306e\u4e09\u4e57-1)\n\u5f15\u6570\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u6570(26)\u306b\u5bfe\u3059\u308b\u5270\u4f59\u3068\u5546\u3092\u6c42\u3081\u308b\n\n\n%\u6f14\u7b97\u5b50\u3068truncating integer division\u4f7f\u7528\n\n\nxxd\u3067\u7f6e\u63db\n\n\n\u53c2\u8003: http://stackoverflow.com/questions/890262/integer-ascii-value-to-character-in-bash-using-printf\n\n\n\n\n\nv0.1\n\ncode\n\n26_26_26_exec\n#!/bin/env bash\n\nNUM_ALPH=26 #  number of alphabet\nCHAR_A=65 #  ASCII character code for 'A'\n\nnum_inp=$1 #  input\n\nnum1=$((num_inp % NUM_ALPH + CHAR_A))\nnum2=$(((num_inp / NUM_ALPH) % NUM_ALPH + CHAR_A ))\nnum3=$(((num_inp / NUM_ALPH / NUM_ALPH) % NUM_ALPH + CHAR_A ))\n\nprintf '%x %x %x' {$num3,$num2,$num1}\necho # just for LF\nprintf '%x %x %x' {$num3,$num2,$num1} | xxd -r -p\necho # just for LF\n\n\n\n\u7d50\u679c\n$ bash 26_26_26_exec 25\n41 41 5a\nAAZ\n$ bash 26_26_26_exec 26\n41 42 41\nABA\n$ bash 26_26_26_exec 26\n41 42 41\nABA\n$ bash 26_26_26_exec 17576\n41 41 41\nAAA\n$ bash 26_26_26_exec 17575\n5a 5a 5a\nZZZ\n\n\nprint '%x'\u3068xxd\u306f\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u305f\u3002\nnum1,num2,num3\u306e\u8a08\u7b97\u306f\u30b9\u30de\u30fc\u30c8\u3067\u306f\u306a\u3044\u3002\n\nv0.3 > \u95a2\u6570\u5316+\u30c6\u30b9\u30c8\u95a2\u6570\n\u53c2\u8003: http://qiita.com/ymdymd/items/271e403adc67f08c8d70\n\n26_26_26_exec\n#!/bin/env bash\n\n# v0.3 Jan,30,2017\n#   - add Test_ToAlphabets\n# v0.2 Jan,30,2017\n#   - move to function\n# v0.1 Jan,30,2017\n#   - implemented in main \n#\n\nToAlphabets(){\n    NUM_ALPH=26 #  number of alphabet\n    CHAR_A=65 #  ASCII character code for 'A'\n\n    num_inp=$1 #  input\n\n    num1=$((num_inp % NUM_ALPH + CHAR_A))\n    num2=$(((num_inp / NUM_ALPH) % NUM_ALPH + CHAR_A ))\n    num3=$(((num_inp / NUM_ALPH / NUM_ALPH) % NUM_ALPH + CHAR_A ))\n\n    printf '%x %x %x' {$num3,$num2,$num1}\n    echo # just for LF\n    printf '%x %x %x' {$num3,$num2,$num1} | xxd -r -p\n    echo # just for LF\n}\n\nTest_ToAlphabets(){\n    for lines in `seq 31 41 592`;do\n        echo \"$lines:\"\n        ToAlphabets $lines\n    done\n}\n\n\n#Test_ToAlphabets\n\nToAlphabets $1\n\n\n```txt:\u52d5\u4f5c\u74b0\u5883\nXeon E5-2620 v4 (8\u30b3\u30a2) x 2\n32GB RAM\nCentOS 6.8 (64bit)\nopenmpi-1.8.x86_64 \u3068\u305d\u306e-devel\nmpich.x86_64 3.1-5.el6\u3068\u305d\u306e-devel\ngcc version 4.4.7 (\u3068gfortran)\nNCAR Command Language Version 6.3.0\nWRF v3.7.1\nGNU bash, version 4.1.2(1)-release (x86_64-redhat-linux-gnu)\nGNOME Terminal v2.31.3\n```\n\nWRF(Weather Research and Forecasting Model)\u95a2\u9023\u3002\n\n\u95a2\u9023 http://qiita.com/7of9/items/050bec2ecd6e0b790165\n\nWPS\u51e6\u7406\u6642\u306elink_grib.csh\u30d5\u30a1\u30a4\u30eb\u306eSymbolic link\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb\u306e\u51e6\u7406\u304c\u4f7f\u3044\u52dd\u624b\u304c\u60aa\u3044\u306e\u3067\u3001\u81ea\u4f5c\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3088\u3046\u3068\u304b\u3068\u8003\u3048\u3066\u3044\u308b\u3002\n\nbash\u3067\u5b9f\u88c5\u3059\u308b\u304b\u3001Python\u3067\u5b9f\u88c5\u3059\u308b\u304b\u3002\n\n\u3068\u308a\u3042\u3048\u305abash\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\n## \u5b9f\u88c5\u5185\u5bb9\n\nWPS\u306e\u51e6\u7406\u3067\u306f\u3001\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066`AAA, ..., AAZ, ABA, ..., AZA, ... AZZ, BAA, ... ZZZ`\u306esuffix\u3092\u4ed8\u3051\u308b\u3002\n\n\u305d\u306e\u51e6\u7406\u3092bash\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3002\n\n- \u5f15\u6570: 0\u304b\u308917576-1 (26\u306e\u4e09\u4e57-1)\n- \u5f15\u6570\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u6570(26)\u306b\u5bfe\u3059\u308b\u5270\u4f59\u3068\u5546\u3092\u6c42\u3081\u308b\n   - %\u6f14\u7b97\u5b50\u3068truncating integer division\u4f7f\u7528\n- xxd\u3067\u7f6e\u63db\n   - \u53c2\u8003: http://stackoverflow.com/questions/890262/integer-ascii-value-to-character-in-bash-using-printf\n\n## v0.1\n\n### code\n\n```bash:26_26_26_exec\n#!/bin/env bash\n\nNUM_ALPH=26 #  number of alphabet\nCHAR_A=65 #  ASCII character code for 'A'\n\nnum_inp=$1 #  input\n\nnum1=$((num_inp % NUM_ALPH + CHAR_A))\nnum2=$(((num_inp / NUM_ALPH) % NUM_ALPH + CHAR_A ))\nnum3=$(((num_inp / NUM_ALPH / NUM_ALPH) % NUM_ALPH + CHAR_A ))\n\nprintf '%x %x %x' {$num3,$num2,$num1}\necho # just for LF\nprintf '%x %x %x' {$num3,$num2,$num1} | xxd -r -p\necho # just for LF\n```\n\n\n```txt:\u7d50\u679c\n$ bash 26_26_26_exec 25\n41 41 5a\nAAZ\n$ bash 26_26_26_exec 26\n41 42 41\nABA\n$ bash 26_26_26_exec 26\n41 42 41\nABA\n$ bash 26_26_26_exec 17576\n41 41 41\nAAA\n$ bash 26_26_26_exec 17575\n5a 5a 5a\nZZZ\n```\n\nprint '%x'\u3068xxd\u306f\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u305f\u3002\n\nnum1,num2,num3\u306e\u8a08\u7b97\u306f\u30b9\u30de\u30fc\u30c8\u3067\u306f\u306a\u3044\u3002\n\n## v0.3 > \u95a2\u6570\u5316+\u30c6\u30b9\u30c8\u95a2\u6570\n\n\u53c2\u8003: http://qiita.com/ymdymd/items/271e403adc67f08c8d70\n\n```bash:26_26_26_exec\n#!/bin/env bash\n\n# v0.3 Jan,30,2017\n#   - add Test_ToAlphabets\n# v0.2 Jan,30,2017\n#   - move to function\n# v0.1 Jan,30,2017\n#   - implemented in main \n#\n\nToAlphabets(){\n\tNUM_ALPH=26 #  number of alphabet\n\tCHAR_A=65 #  ASCII character code for 'A'\n\n\tnum_inp=$1 #  input\n\n\tnum1=$((num_inp % NUM_ALPH + CHAR_A))\n\tnum2=$(((num_inp / NUM_ALPH) % NUM_ALPH + CHAR_A ))\n\tnum3=$(((num_inp / NUM_ALPH / NUM_ALPH) % NUM_ALPH + CHAR_A ))\n\n\tprintf '%x %x %x' {$num3,$num2,$num1}\n\techo # just for LF\n\tprintf '%x %x %x' {$num3,$num2,$num1} | xxd -r -p\n\techo # just for LF\n}\n\nTest_ToAlphabets(){\n\tfor lines in `seq 31 41 592`;do\n\t\techo \"$lines:\"\n\t\tToAlphabets $lines\n\tdone\n}\n\n\n#Test_ToAlphabets\n\nToAlphabets $1\n```\n\n\n", "tags": ["Bash", "WRF", "stringOperation", "numerationSystem"]}