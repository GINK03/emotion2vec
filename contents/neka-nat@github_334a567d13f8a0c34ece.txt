{"tags": ["Python", "Finance"], "context": "\n\npython\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\npython\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u79c1\u304c\u4eca\u56de\u8abf\u3079\u305f\u306e\u306f\u4ee5\u4e0b\u306e3\u3064\u3067\u3059\u3002\n\nzipline\nPyAlgoTrade\npybacktest\nbacktrader\n\n\nzipline\ngithub\u3067\u306f3\u3064\u306e\u4e2d\u3067\u4e00\u756a\u661f\u306e\u6570\u304c\u591a\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4f7f\u3044\u65b9\u306e\u53c2\u8003\u3068\u3057\u3066\u3001\u4f8b\u984c\u306b\u3082\u3042\u308bDMA\u3092\u4f7f\u3063\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\nimport pytz\nfrom datetime import datetime\nimport zipline as zp\n\nstart = datetime(1990, 1, 1, 0, 0, 0, 0, pytz.utc)\nend = datetime(2002, 1, 1, 0, 0, 0, 0, pytz.utc)\ndata = zp.utils.factory.load_from_yahoo(stocks=['AAPL'], indexes={}, start=start,\n                                        end=end, adjusted=False)\n\nclass DualMovingAverage(zp.TradingAlgorithm):\n    def initialize(self, short_window=100, long_window=400):\n        self.add_transform(zp.transforms.MovingAverage, 'short_mavg', ['price'],\n                           window_length=short_window)\n\n        self.add_transform(zp.transforms.MovingAverage, 'long_mavg', ['price'],\n                           window_length=long_window)\n        self.invested = False\n\n    def handle_data(self, data):\n        short_mavg = data['AAPL'].short_mavg['price']\n        long_mavg = data['AAPL'].long_mavg['price']\n        buy = False\n        sell = False\n\n        if short_mavg > long_mavg and not self.invested:\n            self.order('AAPL', 100)\n            self.invested = True\n            buy = True\n        elif short_mavg < long_mavg and self.invested:\n            self.order('AAPL', -100)\n            self.invested = False\n            sell = True\n\n        self.record(short_mavg=short_mavg,\n                    long_mavg=long_mavg,\n                    buy=buy,\n                    sell=sell)\n\n\nimport matplotlib.pyplot as plt\ndma = DualMovingAverage()\nperf = dma.run(data)\nfig = plt.figure()\nax1 = fig.add_subplot(211,  ylabel='Price in $')\ndata['AAPL'].plot(ax=ax1, color='r', lw=2.)\nperf[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n\nax1.plot(perf.ix[perf.buy].index, perf.short_mavg[perf.buy],\n         '^', markersize=10, color='m')\nax1.plot(perf.ix[perf.sell].index, perf.short_mavg[perf.sell],\n         'v', markersize=10, color='k')\n\nax2 = fig.add_subplot(212, ylabel='Portfolio value in $')\nperf.portfolio_value.plot(ax=ax2, lw=2.)\n\nax2.plot(perf.ix[perf.buy].index, perf.portfolio_value[perf.buy],\n         '^', markersize=10, color='m')\nax2.plot(perf.ix[perf.sell].index, perf.portfolio_value[perf.sell],\n         'v', markersize=10, color='k')\n\nplt.legend(loc=0)\nplt.gcf().set_size_inches(14, 10)\nplt.show()\n\n\n\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3068\u3001\u682a\u4fa1\u306e\u5c65\u6b74\u30c7\u30fc\u30bf\u306fzp.utils.factory.load_from_yahoo\u3068\u3044\u3046\u95a2\u6570\u3092\u7528\u3044\u3066\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306fpandas.DataFrame\u578b\u3067\u3001pandas\u3067\u53d6\u5f97\u3067\u304d\u308b\u682a\u4fa1\u30c7\u30fc\u30bf\u3068\u540c\u3058\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30e1\u30a4\u30f3\u90e8\u5206\u306fzp.TradingAlgorithm\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002handle_data\u95a2\u6570\u306e\u4e2d\u3067\u3001\u682a\u4fa1\u306e\u6642\u9593\u6bce\u306b\u884c\u3046\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u3066\u3001record\u95a2\u6570\u306b\u5024\u3092\u4ee3\u5165\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u7d50\u679c\u306e\u30b0\u30e9\u30d5\u5316\u7b49\u306e\u969b\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u304c\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u306b\u3064\u3044\u3066\u306fzipline\u81ea\u8eab\u3082\u3044\u304f\u3064\u304b\u6307\u6a19\u306e\u8a08\u7b97\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001ta-lib\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u3001\u3055\u3089\u306b\u69d8\u3005\u306a\u6307\u6a19\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nPyAlgoTrade\nzipline\u3068\u4f7f\u3044\u65b9\u306f\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u304c\u3001\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u306e\u30e9\u30a4\u30d6\u30c8\u30ec\u30fc\u30c9\u3084twitter\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u6271\u3048\u305f\u308a\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u3061\u3089\u3082samples\u306b\u3042\u308bBBands\u3092\u7528\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\nfrom pyalgotrade import strategy\nfrom pyalgotrade import plotter\nfrom pyalgotrade.tools import yahoofinance\nfrom pyalgotrade.technical import bollinger\nfrom pyalgotrade.stratanalyzer import sharpe\n\n\nclass BBands(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument, bBandsPeriod):\n        strategy.BacktestingStrategy.__init__(self, feed)\n        self.__instrument = instrument\n        self.__bbands = bollinger.BollingerBands(feed[instrument].getCloseDataSeries(), bBandsPeriod, 2)\n\n    def getBollingerBands(self):\n        return self.__bbands\n\n    def onBars(self, bars):\n        lower = self.__bbands.getLowerBand()[-1]\n        upper = self.__bbands.getUpperBand()[-1]\n        if lower is None:\n            return\n\n        shares = self.getBroker().getShares(self.__instrument)\n        bar = bars[self.__instrument]\n        if shares == 0 and bar.getClose() < lower:\n            sharesToBuy = int(self.getBroker().getCash(False) / bar.getClose())\n            self.marketOrder(self.__instrument, sharesToBuy)\n        elif shares > 0 and bar.getClose() > upper:\n            self.marketOrder(self.__instrument, -1*shares)\n\n\ndef main(plot):\n    instrument = \"yhoo\"\n    bBandsPeriod = 40\n\n    # Download the bars.\n    feed = yahoofinance.build_feed([instrument], 2011, 2012, \".\")\n\n    strat = BBands(feed, instrument, bBandsPeriod)\n    sharpeRatioAnalyzer = sharpe.SharpeRatio()\n    strat.attachAnalyzer(sharpeRatioAnalyzer)\n\n    if plot:\n        plt = plotter.StrategyPlotter(strat, True, True, True)\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"upper\", strat.getBollingerBands().getUpperBand())\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"middle\", strat.getBollingerBands().getMiddleBand())\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"lower\", strat.getBollingerBands().getLowerBand())\n\n    strat.run()\n    print \"Sharpe ratio: %.2f\" % sharpeRatioAnalyzer.getSharpeRatio(0.05)\n\n    if plot:\n        plt.plot()\n\n\nif __name__ == \"__main__\":\n    main(True)\n\n\nzipline\u3068\u540c\u3058\u3088\u3046\u306bstrategy.BacktestingStrategy\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3001\u30c8\u30ec\u30fc\u30c9\u306e\u30e1\u30a4\u30f3\u90e8\u5206\u3092\u4f5c\u308a\u307e\u3059\u3002zipline\u3068\u6bd4\u8f03\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30d7\u30ed\u30c3\u30c8\u7cfb\u306e\u95a2\u6570\u304c\u3044\u308d\u3044\u308d\u3068\u7528\u610f\u3055\u308c\u3044\u3066\u3001\u305d\u306e\u3078\u3093\u304c\u4fbf\u5229\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\n\npybacktest\n\u4e0a\u306e2\u3064\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u6bd4\u3079\u308b\u3068\u3001\u8efd\u91cf\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u5b9f\u969b\u306e\u4f8b\u984c\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\nimport pybacktest\nimport pandas as pd\n\nohlc = pybacktest.load_from_yahoo('SPY')\nohlc.tail()\n\nshort_ma = 50\nlong_ma = 200\n\nms = pd.rolling_mean(ohlc.C, short_ma)\nml = pd.rolling_mean(ohlc.C, long_ma)\n\nbuy = cover = (ms > ml) & (ms.shift() < ml.shift())  # ma cross up\nsell = short = (ms < ml) & (ms.shift() > ml.shift())  # ma cross down\n\nbt = pybacktest.Backtest(locals(), 'ma_cross')\n\nimport pylab\nbt.plot_trades()\npd.rolling_mean(ohlc.C, short_ma).plot(c='green')\npd.rolling_mean(ohlc.C, long_ma).plot(c='blue')\npylab.legend(loc='upper left')\npylab.show()\n\n\n\u4e0a\u306e2\u3064\u306b\u6bd4\u3079\u308b\u3068\u3001\u30b3\u30fc\u30c9\u304c\u77ed\u3044\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u5b9f\u969b\u306b\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3092\u884c\u3046\u30af\u30e9\u30b9\u304cpybacktest.Backtest\u3067\u3059\u304c\u3001\u305d\u306e\u524d\u306e\u90e8\u5206\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u8cb7\u3044\u3068\u58f2\u308a\u306e\u30b7\u30b0\u30ca\u30eb\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\n\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u306e\u8a08\u7b97\u306a\u3069\u306e\u6a5f\u80fd\u306f\u7528\u610f\u3055\u308c\u3066\u306a\u304f\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u6a5f\u80fd\u3092\u307e\u3068\u3081\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\n\nbacktrader\nfrom datetime import datetime\nimport backtrader as bt\n\nclass SmaCross(bt.SignalStrategy):\n    def __init__(self):\n        sma1, sma2 = bt.ind.SMA(period=10), bt.ind.SMA(period=30)\n        crossover = bt.ind.CrossOver(sma1, sma2)\n        self.signal_add(bt.SIGNAL_LONG, crossover)\n\ncerebro = bt.Cerebro()\ncerebro.addstrategy(SmaCross)\n\ndata0 = bt.feeds.YahooFinanceData(dataname='YHOO', fromdate=datetime(2011, 1, 1),\n                                  todate=datetime(2012, 12, 31))\ncerebro.adddata(data0)\n\ncerebro.run()\ncerebro.plot()\n\n\n\n\u305d\u306e\u4ed6\n\u305d\u306e\u4ed6\u3067\u898b\u3064\u3051\u305fpython\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\nultra-finance\nQSTK\n# python\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\npython\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u79c1\u304c\u4eca\u56de\u8abf\u3079\u305f\u306e\u306f\u4ee5\u4e0b\u306e3\u3064\u3067\u3059\u3002\n\n* [zipline](https://github.com/quantopian/zipline)\n* [PyAlgoTrade](https://github.com/gbeced/pyalgotrade)\n* [pybacktest](https://github.com/ematvey/pybacktest)\n* [backtrader](https://www.backtrader.com/)\n\n## zipline\ngithub\u3067\u306f3\u3064\u306e\u4e2d\u3067\u4e00\u756a\u661f\u306e\u6570\u304c\u591a\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4f7f\u3044\u65b9\u306e\u53c2\u8003\u3068\u3057\u3066\u3001\u4f8b\u984c\u306b\u3082\u3042\u308bDMA\u3092\u4f7f\u3063\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```py\nimport pytz\nfrom datetime import datetime\nimport zipline as zp\n\nstart = datetime(1990, 1, 1, 0, 0, 0, 0, pytz.utc)\nend = datetime(2002, 1, 1, 0, 0, 0, 0, pytz.utc)\ndata = zp.utils.factory.load_from_yahoo(stocks=['AAPL'], indexes={}, start=start,\n                                        end=end, adjusted=False)\n\nclass DualMovingAverage(zp.TradingAlgorithm):\n    def initialize(self, short_window=100, long_window=400):\n        self.add_transform(zp.transforms.MovingAverage, 'short_mavg', ['price'],\n                           window_length=short_window)\n\n        self.add_transform(zp.transforms.MovingAverage, 'long_mavg', ['price'],\n                           window_length=long_window)\n        self.invested = False\n\n    def handle_data(self, data):\n        short_mavg = data['AAPL'].short_mavg['price']\n        long_mavg = data['AAPL'].long_mavg['price']\n        buy = False\n        sell = False\n\n        if short_mavg > long_mavg and not self.invested:\n            self.order('AAPL', 100)\n            self.invested = True\n            buy = True\n        elif short_mavg < long_mavg and self.invested:\n            self.order('AAPL', -100)\n            self.invested = False\n            sell = True\n\n        self.record(short_mavg=short_mavg,\n                    long_mavg=long_mavg,\n                    buy=buy,\n                    sell=sell)\n\n\nimport matplotlib.pyplot as plt\ndma = DualMovingAverage()\nperf = dma.run(data)\nfig = plt.figure()\nax1 = fig.add_subplot(211,  ylabel='Price in $')\ndata['AAPL'].plot(ax=ax1, color='r', lw=2.)\nperf[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n\nax1.plot(perf.ix[perf.buy].index, perf.short_mavg[perf.buy],\n         '^', markersize=10, color='m')\nax1.plot(perf.ix[perf.sell].index, perf.short_mavg[perf.sell],\n         'v', markersize=10, color='k')\n\nax2 = fig.add_subplot(212, ylabel='Portfolio value in $')\nperf.portfolio_value.plot(ax=ax2, lw=2.)\n\nax2.plot(perf.ix[perf.buy].index, perf.portfolio_value[perf.buy],\n         '^', markersize=10, color='m')\nax2.plot(perf.ix[perf.sell].index, perf.portfolio_value[perf.sell],\n         'v', markersize=10, color='k')\n\nplt.legend(loc=0)\nplt.gcf().set_size_inches(14, 10)\nplt.show()\n```\n![zipline.png](https://qiita-image-store.s3.amazonaws.com/0/14516/ed793473-7d01-0096-36c8-bb357c4a13ad.png)\n\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3068\u3001\u682a\u4fa1\u306e\u5c65\u6b74\u30c7\u30fc\u30bf\u306f`zp.utils.factory.load_from_yahoo`\u3068\u3044\u3046\u95a2\u6570\u3092\u7528\u3044\u3066\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f`pandas.DataFrame`\u578b\u3067\u3001`pandas`\u3067\u53d6\u5f97\u3067\u304d\u308b\u682a\u4fa1\u30c7\u30fc\u30bf\u3068\u540c\u3058\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30e1\u30a4\u30f3\u90e8\u5206\u306f`zp.TradingAlgorithm`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002`handle_data`\u95a2\u6570\u306e\u4e2d\u3067\u3001\u682a\u4fa1\u306e\u6642\u9593\u6bce\u306b\u884c\u3046\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u3066\u3001`record`\u95a2\u6570\u306b\u5024\u3092\u4ee3\u5165\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u7d50\u679c\u306e\u30b0\u30e9\u30d5\u5316\u7b49\u306e\u969b\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u304c\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u306b\u3064\u3044\u3066\u306fzipline\u81ea\u8eab\u3082\u3044\u304f\u3064\u304b\u6307\u6a19\u306e\u8a08\u7b97\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001[ta-lib](http://ta-lib.org/)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u3001\u3055\u3089\u306b\u69d8\u3005\u306a\u6307\u6a19\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n## PyAlgoTrade\nzipline\u3068\u4f7f\u3044\u65b9\u306f\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u304c\u3001\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u306e\u30e9\u30a4\u30d6\u30c8\u30ec\u30fc\u30c9\u3084twitter\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u6271\u3048\u305f\u308a\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u3061\u3089\u3082samples\u306b\u3042\u308bBBands\u3092\u7528\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade import plotter\nfrom pyalgotrade.tools import yahoofinance\nfrom pyalgotrade.technical import bollinger\nfrom pyalgotrade.stratanalyzer import sharpe\n\n\nclass BBands(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument, bBandsPeriod):\n        strategy.BacktestingStrategy.__init__(self, feed)\n        self.__instrument = instrument\n        self.__bbands = bollinger.BollingerBands(feed[instrument].getCloseDataSeries(), bBandsPeriod, 2)\n\n    def getBollingerBands(self):\n        return self.__bbands\n\n    def onBars(self, bars):\n        lower = self.__bbands.getLowerBand()[-1]\n        upper = self.__bbands.getUpperBand()[-1]\n        if lower is None:\n            return\n\n        shares = self.getBroker().getShares(self.__instrument)\n        bar = bars[self.__instrument]\n        if shares == 0 and bar.getClose() < lower:\n            sharesToBuy = int(self.getBroker().getCash(False) / bar.getClose())\n            self.marketOrder(self.__instrument, sharesToBuy)\n        elif shares > 0 and bar.getClose() > upper:\n            self.marketOrder(self.__instrument, -1*shares)\n\n\ndef main(plot):\n    instrument = \"yhoo\"\n    bBandsPeriod = 40\n\n    # Download the bars.\n    feed = yahoofinance.build_feed([instrument], 2011, 2012, \".\")\n\n    strat = BBands(feed, instrument, bBandsPeriod)\n    sharpeRatioAnalyzer = sharpe.SharpeRatio()\n    strat.attachAnalyzer(sharpeRatioAnalyzer)\n\n    if plot:\n        plt = plotter.StrategyPlotter(strat, True, True, True)\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"upper\", strat.getBollingerBands().getUpperBand())\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"middle\", strat.getBollingerBands().getMiddleBand())\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"lower\", strat.getBollingerBands().getLowerBand())\n\n    strat.run()\n    print \"Sharpe ratio: %.2f\" % sharpeRatioAnalyzer.getSharpeRatio(0.05)\n\n    if plot:\n        plt.plot()\n\n\nif __name__ == \"__main__\":\n    main(True)\n```\n![pyalgotrade.png](https://qiita-image-store.s3.amazonaws.com/0/14516/73704e79-9f27-6c87-7ab4-e1cd1354956d.png)\n`zipline`\u3068\u540c\u3058\u3088\u3046\u306b`strategy.BacktestingStrategy`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3001\u30c8\u30ec\u30fc\u30c9\u306e\u30e1\u30a4\u30f3\u90e8\u5206\u3092\u4f5c\u308a\u307e\u3059\u3002`zipline`\u3068\u6bd4\u8f03\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30d7\u30ed\u30c3\u30c8\u7cfb\u306e\u95a2\u6570\u304c\u3044\u308d\u3044\u308d\u3068\u7528\u610f\u3055\u308c\u3044\u3066\u3001\u305d\u306e\u3078\u3093\u304c\u4fbf\u5229\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\n\n## pybacktest\n\u4e0a\u306e2\u3064\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u6bd4\u3079\u308b\u3068\u3001\u8efd\u91cf\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u5b9f\u969b\u306e\u4f8b\u984c\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```py\nimport pybacktest\nimport pandas as pd\n\nohlc = pybacktest.load_from_yahoo('SPY')\nohlc.tail()\n\nshort_ma = 50\nlong_ma = 200\n\nms = pd.rolling_mean(ohlc.C, short_ma)\nml = pd.rolling_mean(ohlc.C, long_ma)\n    \nbuy = cover = (ms > ml) & (ms.shift() < ml.shift())  # ma cross up\nsell = short = (ms < ml) & (ms.shift() > ml.shift())  # ma cross down\n\nbt = pybacktest.Backtest(locals(), 'ma_cross')\n\nimport pylab\nbt.plot_trades()\npd.rolling_mean(ohlc.C, short_ma).plot(c='green')\npd.rolling_mean(ohlc.C, long_ma).plot(c='blue')\npylab.legend(loc='upper left')\npylab.show()\n```\n![pybacktest.png](https://qiita-image-store.s3.amazonaws.com/0/14516/cb3d5ca4-7282-648c-4436-acdee67e0a0c.png)\n\u4e0a\u306e2\u3064\u306b\u6bd4\u3079\u308b\u3068\u3001\u30b3\u30fc\u30c9\u304c\u77ed\u3044\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u5b9f\u969b\u306b\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3092\u884c\u3046\u30af\u30e9\u30b9\u304c`pybacktest.Backtest`\u3067\u3059\u304c\u3001\u305d\u306e\u524d\u306e\u90e8\u5206\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u8cb7\u3044\u3068\u58f2\u308a\u306e\u30b7\u30b0\u30ca\u30eb\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\n\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u306e\u8a08\u7b97\u306a\u3069\u306e\u6a5f\u80fd\u306f\u7528\u610f\u3055\u308c\u3066\u306a\u304f\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u6a5f\u80fd\u3092\u307e\u3068\u3081\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\n\n## backtrader\n\n```py\nfrom datetime import datetime\nimport backtrader as bt\n    \nclass SmaCross(bt.SignalStrategy):\n    def __init__(self):\n        sma1, sma2 = bt.ind.SMA(period=10), bt.ind.SMA(period=30)\n        crossover = bt.ind.CrossOver(sma1, sma2)\n        self.signal_add(bt.SIGNAL_LONG, crossover)\n    \ncerebro = bt.Cerebro()\ncerebro.addstrategy(SmaCross)\n    \ndata0 = bt.feeds.YahooFinanceData(dataname='YHOO', fromdate=datetime(2011, 1, 1),\n                                  todate=datetime(2012, 12, 31))\ncerebro.adddata(data0)\n   \ncerebro.run()\ncerebro.plot()\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/154336/505a5137-3be6-6671-7819-a635aaff0140.png)\n\n\n## \u305d\u306e\u4ed6\n\u305d\u306e\u4ed6\u3067\u898b\u3064\u3051\u305fpython\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n[ultra-finance](https://code.google.com/p/ultra-finance/)\n[QSTK](http://wiki.quantsoftware.org/index.php?title=QuantSoftware_ToolKit)\n\n"}