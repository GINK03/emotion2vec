{"context": " More than 1 year has passed since last update.Processing\u306e\u97f3\u58f0\u30e9\u30a4\u30d6\u30e9\u30ea\u3001Minim\u3092\u7528\u3044\u3066\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u97f3\u3092\u5408\u6210\u3059\u308b\u305f\u3081\u306e\u899a\u3048\u66f8\u304d\u3002AudioSignal\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089generate()\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u5ea6\u306b\u51fa\u529b\u3059\u308b\u5185\u5bb9\u3092\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u66f8\u304d\u8fbc\u3093\u3067\u8fd4\u305b\u3070\u826f\u3044\u3002\n\u51fa\u529b\u3059\u308b\u97f3\u58f0\u306f -1.0f ~ 1.0f \u306e\u5024\u304b\u3089\u306a\u308bfloat\u914d\u5217\u306b\u66f8\u304d\u8fbc\u3080\u3002\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30fb\u30ec\u30fc\u30c8\u306b\u3088\u3063\u3066\u914d\u5217\u4e2d\u306e\uff11\u8981\u7d20\u304c\u5bfe\u5fdc\u3059\u308b\u6642\u9593\u306e\u9577\u3055\u304c\u5909\u5316\u3059\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n\u5b9f\u88c5\u4f8b\nimport ddf.minim.AudioOutput;\nimport ddf.minim.AudioSignal;\nimport ddf.minim.Minim;\n\n\n/**\n * \u6b63\u5f26\u6ce2\u3092\u767a\u751f\u3055\u305b\u308b\u30af\u30e9\u30b9\u3002\n */\nclass ToneGenerator implements AudioSignal {\n\n    /**\n     * \u5468\u6ce2\u6570\uff08Hz\uff09\u3002\n     */\n    float frequency;\n\n    /**\n     * \u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u66f8\u304d\u8fbc\u3093\u3060Float\u5024\u306e\u500b\u6570\u3002\n     */\n    int offset;\n\n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3002\n     * \n     * @param sampleRate \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30fb\u30ec\u30fc\u30c8\uff081/s\uff09\u3002\n     */\n    ToneGenerator(float sampleRate) {\n        this.sampleRate = sampleRate;\n        offset = 0;\n        frequency = 440.f;\n    }\n\n    /**\n     * \u30b9\u30c6\u30ec\u30aa\u97f3\u58f0\u3092\u5408\u6210\u3059\u308b\u3002\n     * \u5b9a\u671f\u7684\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u304b\u3089\u547c\u3070\u308c\u308b\u3002\n     *\n     * @param left \u5de6\u5074\u306e\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n     * @param left \u53f3\u5074\u306e\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n     */\n    public void generate(float[] left, float[] right) {\n        generate(left);\n        arraycopy(left, right);\n    }\n\n    /**\n     * \u30e2\u30ce\u30e9\u30eb\u97f3\u58f0\u3092\u5408\u6210\u3059\u308b\u3002\n     * \u5b9a\u671f\u7684\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u304b\u3089\u547c\u3070\u308c\u308b\u3002\n     *\n     * @param buffer \u51fa\u529b\u3059\u308b\u6ce2\u5f62\u3092\u66f8\u304d\u8fbc\u3080\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n     */\n    public void generate(float[] buffer) {\n        for(int i = 0; i < buffer.length; ++i) {\n            float t = 1.0f * (offset + i) / sampleRate;\n            float theta = TWO_PI * frequency * t;\n            buffer[i] = sin(theta);\n        }\n        offset += buffer.length;\n    }\n\n}\n\n\n/**\n * \u97f3\u58f0\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u3002\n */\nToneGenerator toneGenerator;\n\n\n/**\n * \u6e96\u5099\u3092\u3059\u308b\u3002\n */\nvoid setup() {\n    Minim minim = new Minim(this);\n    AudioOutput audioOutput = minim.getLineOut(Minim.MONO);\n\n    toneGenerator = new ToneGenerator(audioOutput.sampleRate());\n    audioOutput.addSignal(toneGenerator);\n}\n\n\nProcessing\u306e\u97f3\u58f0\u30e9\u30a4\u30d6\u30e9\u30ea\u3001Minim\u3092\u7528\u3044\u3066\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u97f3\u3092\u5408\u6210\u3059\u308b\u305f\u3081\u306e\u899a\u3048\u66f8\u304d\u3002AudioSignal\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089generate()\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u5ea6\u306b\u51fa\u529b\u3059\u308b\u5185\u5bb9\u3092\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u66f8\u304d\u8fbc\u3093\u3067\u8fd4\u305b\u3070\u826f\u3044\u3002\n\n\u51fa\u529b\u3059\u308b\u97f3\u58f0\u306f -1.0f ~ 1.0f \u306e\u5024\u304b\u3089\u306a\u308bfloat\u914d\u5217\u306b\u66f8\u304d\u8fbc\u3080\u3002\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30fb\u30ec\u30fc\u30c8\u306b\u3088\u3063\u3066\u914d\u5217\u4e2d\u306e\uff11\u8981\u7d20\u304c\u5bfe\u5fdc\u3059\u308b\u6642\u9593\u306e\u9577\u3055\u304c\u5909\u5316\u3059\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n```Java:\u5b9f\u88c5\u4f8b\nimport ddf.minim.AudioOutput;\nimport ddf.minim.AudioSignal;\nimport ddf.minim.Minim;\n\n\n/**\n * \u6b63\u5f26\u6ce2\u3092\u767a\u751f\u3055\u305b\u308b\u30af\u30e9\u30b9\u3002\n */\nclass ToneGenerator implements AudioSignal {\n\t\n\t/**\n\t * \u5468\u6ce2\u6570\uff08Hz\uff09\u3002\n\t */\n\tfloat frequency;\n\t\n\t/**\n\t * \u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u66f8\u304d\u8fbc\u3093\u3060Float\u5024\u306e\u500b\u6570\u3002\n\t */\n\tint offset;\n  \t\n  \t/**\n  \t * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3002\n  \t * \n  \t * @param sampleRate \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30fb\u30ec\u30fc\u30c8\uff081/s\uff09\u3002\n  \t */\n  \tToneGenerator(float sampleRate) {\n  \t\tthis.sampleRate = sampleRate;\n  \t\toffset = 0;\n  \t\tfrequency = 440.f;\n  \t}\n\t\n\t/**\n\t * \u30b9\u30c6\u30ec\u30aa\u97f3\u58f0\u3092\u5408\u6210\u3059\u308b\u3002\n\t * \u5b9a\u671f\u7684\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u304b\u3089\u547c\u3070\u308c\u308b\u3002\n\t *\n\t * @param left \u5de6\u5074\u306e\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n\t * @param left \u53f3\u5074\u306e\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n\t */\n\tpublic void generate(float[] left, float[] right) {\n\t\tgenerate(left);\n\t\tarraycopy(left, right);\n\t}\n  \t\n\t/**\n\t * \u30e2\u30ce\u30e9\u30eb\u97f3\u58f0\u3092\u5408\u6210\u3059\u308b\u3002\n\t * \u5b9a\u671f\u7684\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u304b\u3089\u547c\u3070\u308c\u308b\u3002\n\t *\n\t * @param buffer \u51fa\u529b\u3059\u308b\u6ce2\u5f62\u3092\u66f8\u304d\u8fbc\u3080\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n\t */\n  \tpublic void generate(float[] buffer) {\n  \t\tfor(int i = 0; i < buffer.length; ++i) {\n  \t\t\tfloat t = 1.0f * (offset + i) / sampleRate;\n\t\t\tfloat theta = TWO_PI * frequency * t;\n\t\t\tbuffer[i] = sin(theta);\n\t\t}\n\t\toffset += buffer.length;\n\t}\n\t\n}\n\n\n/**\n * \u97f3\u58f0\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u3002\n */\nToneGenerator toneGenerator;\n\n\n/**\n * \u6e96\u5099\u3092\u3059\u308b\u3002\n */\nvoid setup() {\n\tMinim minim = new Minim(this);\n\tAudioOutput audioOutput = minim.getLineOut(Minim.MONO);\n\t\n\ttoneGenerator = new ToneGenerator(audioOutput.sampleRate());\n\taudioOutput.addSignal(toneGenerator);\n}\n```\n", "tags": ["\u30b8\u30a7\u30cd\u30e9\u30c6\u30a3\u30d6\u30a2\u30fc\u30c8", "Minim", "\u97f3\u58f0", "processing"]}