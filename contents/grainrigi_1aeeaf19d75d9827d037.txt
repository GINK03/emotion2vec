{"context": "\u300cstd::function\u3092\u4f7f\u3046\u3068\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u666e\u901a\u306e\u95a2\u6570\u307f\u305f\u3044\u306b\u547c\u3079\u308b\uff01\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u898b\u3064\u3051\u305f\u3002\n\u81ea\u5206\u3082\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u305d\u3046\u3044\u3046\u611f\u3058\u3067\u6271\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3084\u308a\u65b9\u3092\u8abf\u3079\u3066\u307f\u305f\u3002\n\u307e\u305a\u3001\u3088\u304f\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3002\n#include <iostream>\n#include <functional>\n\nclass Hoge {\n    int val;\npublic:\n    Hoge(int v) : val{v} {}\n    int GetVal(void) const { return val; }\n};\n\nint main(void) {\n    Hoge hoge(1);\n    std::function<int()> GetValOfHoge = std::bind(&Hoge::GetVal, &hoge);\n    std::cout << GetValOfHoge() << std::endl;\n}\n\n/* result:\n1\n*/\n\nstd::bind\u3067\u7b2c\u4e00\u5f15\u6570\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3002\n\u3061\u306a\u307f\u306b\u5f15\u6570\u4ed8\u304d\u306e\u95a2\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u306b\u306f\u3001\n/* \u3053\u3093\u306a\u95a2\u6570\u306e\u5834\u5408 */\n   int Func(int, int, int) {}\n\n/* \u3053\u3093\u306a\u611f\u3058 */\n    std::function<int(int, int, int)> FuncOfHoge = std::bind(\n        &Hoge::Func,\n        &hoge,\n        std::placeholders::_1,\n        std::placeholders::_2,\n        std::placeholders::_3);\n\n\u3053\u306e\u3088\u3046\u306b\u305d\u308c\u305e\u308c\u306e\u5f15\u6570\u3092std::placeholders\u3092\u4f7f\u3063\u3066\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3002\u3061\u3087\u3063\u3068\u5197\u9577\u3060\u304c\u3001\u4ed5\u65b9\u306a\u3044\u3002\nstd::function\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3068\u4f55\u304c\u3044\u3044\u304b\u3068\u3044\u3046\u3068\u3001\u95a2\u6570\u306e\u5f15\u6570\u306b\u6e21\u305b\u305f\u308a\u3060\u3068\u304b\u3001\u30b3\u30f3\u30c6\u30ca\u306b\u3057\u307e\u3063\u3066\u304a\u3051\u305f\u308a\u3060\u3068\u304b\u3059\u308b\u3002\n\u4f8b\u3048\u3070std::vector\u306b\u683c\u7d0d\u3057\u3066\u304a\u3044\u3066\u307e\u3068\u3081\u3066\u547c\u3073\u51fa\u3059\u3001\u3044\u308f\u3086\u308bC#\u306e\u30de\u30eb\u30c1\u30ad\u30e3\u30b9\u30c8\u30c7\u30ea\u30b2\u30fc\u30c8\u307f\u305f\u3044\u306a\u611f\u3058\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3002(\u4eca\u56de\u81ea\u5206\u304c\u3057\u305f\u304b\u3063\u305f\u306e\u306f\u3053\u308c)\n\n\u3055\u3066\u3001\u3053\u308c\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u542b\u3081\u3044\u308d\u3093\u306a\u3068\u3053\u308d\u306b\u53d6\u308a\u307e\u308f\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u2026\u3068\u306a\u308b\u3068\u3053\u308d\u3060\u304c\u3001std::function\u306b\u95a2\u6570\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u65b9\u6cd5\u3063\u3066\u3082\u3046\u4e00\u3064\u3042\u308b\u3088\u306d\u3002\n\u307f\u3093\u306a\u5927\u597d\u304d\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u3002\n#include <iostream>\n#include <functional>\n\nclass Hoge {\n    int val;\npublic:\n    Hoge(int v) : val{v} {}\n    int GetVal(void) const { return val; }\n};\n\nint main(void) {\n    Hoge hoge(1);\n    std::function<int()> GetValOfHoge = [&]() { return hoge.GetVal(); };\n    std::cout << GetValOfHoge() << std::endl;\n}\n/* result:\n1\n*/\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u5916\u90e8\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u3001\u305d\u308c\u3092\u547c\u3073\u51fa\u3059\u3002\n\u76f4\u63a5\u7684\u3067\u306f\u306a\u3044\u3051\u3069\u3001\u6a5f\u80fd\u306f\u3055\u3063\u304d\u306estd::bind\u3092\u4f7f\u3063\u305f\u3082\u306e\u3068\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u3002\n\u3055\u3066\u30012\u3064\u65b9\u6cd5\u304c\u3042\u308b\u306a\u3089\u901f\u3044\u307b\u3046\u3092\u4f7f\u3044\u305f\u3044\u3088\u306d\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u6e2c\u3063\u3066\u307f\u308b\u3002\n#include <iostream>\n#include <chrono>\n#include <functional>\n\nclass Hoge {\n    int val;\npublic:\n    Hoge(int v) : val{v} {}\n    int GetVal(void) const { return val; }\n};\n\nconstexpr int LOOP_COUNT = 1000000;\n\nint main(void) {\n    using std::chrono::nanoseconds;\n    using std::chrono::duration_cast;\n    using std::chrono::high_resolution_clock;\n\n    Hoge hoge(1);\n    std::function<int()> GetVal_Bind = std::bind(&Hoge::GetVal, &hoge);\n    std::function<int()> GetVal_Lambda = [&]() { return hoge.GetVal(); };\n\n    //Measure std::bind\n    auto start = high_resolution_clock::now();\n    for(int i = 0; i < LOOP_COUNT; i++)\n        GetVal_Bind();\n    auto end = high_resolution_clock::now();\n\n    int count = duration_cast<nanoseconds>(end - start).count();\n\n    std::cout << \"std::bind\" << std::endl;\n    std::cout << \"total:\" << count << \"ns\" << std::endl;\n    std::cout << \"mean:\" << (float)count / (float)LOOP_COUNT << \"ns\" << std::endl;\n\n    //Measure lambda\n    start = high_resolution_clock::now();\n    for(int i = 0; i < LOOP_COUNT; i++)\n        GetVal_Lambda();\n    end = high_resolution_clock::now();\n\n    count = duration_cast<nanoseconds>(end - start).count();\n\n    std::cout << \"lambda\" << std::endl;\n    std::cout << \"total:\" << count << \"ns\" << std::endl;\n    std::cout << \"mean:\" << (float)count / (float)LOOP_COUNT << \"ns\" << std::endl;\n\n\n    return 0;\n}\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u3002\nstd::bind\ntotal:71158144ns\nmean:71.1581ns\nlambda\ntotal:36223729ns\nmean:36.2237ns\n\n\u610f\u5916\u306b\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u307b\u3046\u304c2\u500d\u8fd1\u304f\u901f\u3044\u3002\uff08\u306a\u304a\u6700\u9069\u5316\u306f\u5207\u3063\u3066\u3042\u308b\uff09\n\u3068\u3044\u3046\u3053\u3068\u3067std::function\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3068\u304d\u306f\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u304a\u3046\u3068\u601d\u3046\u3002\uff08\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u304c\u5982\u4f55\u7a0b\u304b\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u3067\u306f\u3042\u308b\u304c\u2026\uff09\n\n\u307e\u3068\u3081\n\u5df7\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u306e\u306bstd::bind\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u304c\u3088\u304f\u7d39\u4ecb\u3055\u308c\u308b\u304c\u3001\u5b9f\u306f\u30e9\u30e0\u30c0\u5f0f\u3067\u9593\u63a5\u7684\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u307b\u3046\u304c\u901f\u3044\u3002\n\u6700\u5f8c\u306b\u3001\u4e00\u5fdc\u691c\u8a3c\u74b0\u5883\u3092\u8f09\u305b\u3066\u304a\u304f\u3002\n\nCPU:Intel Xeon CPU E5640\n\u30e1\u30e2\u30ea:DDR3 12GB\nOS: Windows10\n\u30b3\u30f3\u30d1\u30a4\u30e9:MSVC 19.00.24215.1 (VS2015\u4ed8\u5c5e\u306ecl.exe)\n\n\u300cstd::function\u3092\u4f7f\u3046\u3068\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u666e\u901a\u306e\u95a2\u6570\u307f\u305f\u3044\u306b\u547c\u3079\u308b\uff01\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u898b\u3064\u3051\u305f\u3002\n\u81ea\u5206\u3082\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u305d\u3046\u3044\u3046\u611f\u3058\u3067\u6271\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3084\u308a\u65b9\u3092\u8abf\u3079\u3066\u307f\u305f\u3002\n\n\u307e\u305a\u3001\u3088\u304f\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3002\n\n```C++\n#include <iostream>\n#include <functional>\n\nclass Hoge {\n    int val;\npublic:\n    Hoge(int v) : val{v} {}\n    int GetVal(void) const { return val; }\n};\n\nint main(void) {\n    Hoge hoge(1);\n    std::function<int()> GetValOfHoge = std::bind(&Hoge::GetVal, &hoge);\n    std::cout << GetValOfHoge() << std::endl;\n}\n\n/* result:\n1\n*/\n```\n\nstd::bind\u3067\u7b2c\u4e00\u5f15\u6570\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3002\n\u3061\u306a\u307f\u306b\u5f15\u6570\u4ed8\u304d\u306e\u95a2\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u306b\u306f\u3001\n\n```C++\n/* \u3053\u3093\u306a\u95a2\u6570\u306e\u5834\u5408 */\n   int Func(int, int, int) {}\n\n/* \u3053\u3093\u306a\u611f\u3058 */\n    std::function<int(int, int, int)> FuncOfHoge = std::bind(\n        &Hoge::Func,\n        &hoge,\n        std::placeholders::_1,\n        std::placeholders::_2,\n        std::placeholders::_3);\n```\n\n\u3053\u306e\u3088\u3046\u306b\u305d\u308c\u305e\u308c\u306e\u5f15\u6570\u3092std::placeholders\u3092\u4f7f\u3063\u3066\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3002\u3061\u3087\u3063\u3068\u5197\u9577\u3060\u304c\u3001\u4ed5\u65b9\u306a\u3044\u3002\n\nstd::function\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3068\u4f55\u304c\u3044\u3044\u304b\u3068\u3044\u3046\u3068\u3001\u95a2\u6570\u306e\u5f15\u6570\u306b\u6e21\u305b\u305f\u308a\u3060\u3068\u304b\u3001\u30b3\u30f3\u30c6\u30ca\u306b\u3057\u307e\u3063\u3066\u304a\u3051\u305f\u308a\u3060\u3068\u304b\u3059\u308b\u3002\n\u4f8b\u3048\u3070std::vector\u306b\u683c\u7d0d\u3057\u3066\u304a\u3044\u3066\u307e\u3068\u3081\u3066\u547c\u3073\u51fa\u3059\u3001\u3044\u308f\u3086\u308bC#\u306e\u30de\u30eb\u30c1\u30ad\u30e3\u30b9\u30c8\u30c7\u30ea\u30b2\u30fc\u30c8\u307f\u305f\u3044\u306a\u611f\u3058\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3002(\u4eca\u56de\u81ea\u5206\u304c\u3057\u305f\u304b\u3063\u305f\u306e\u306f\u3053\u308c)\n<hr>\n\n\u3055\u3066\u3001\u3053\u308c\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u542b\u3081\u3044\u308d\u3093\u306a\u3068\u3053\u308d\u306b\u53d6\u308a\u307e\u308f\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u2026\u3068\u306a\u308b\u3068\u3053\u308d\u3060\u304c\u3001std::function\u306b\u95a2\u6570\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u65b9\u6cd5\u3063\u3066\u3082\u3046\u4e00\u3064\u3042\u308b\u3088\u306d\u3002\n\u307f\u3093\u306a\u5927\u597d\u304d\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u3002\n\n```C++\n#include <iostream>\n#include <functional>\n\nclass Hoge {\n    int val;\npublic:\n    Hoge(int v) : val{v} {}\n    int GetVal(void) const { return val; }\n};\n\nint main(void) {\n    Hoge hoge(1);\n    std::function<int()> GetValOfHoge = [&]() { return hoge.GetVal(); };\n    std::cout << GetValOfHoge() << std::endl;\n}\n/* result:\n1\n*/\n```\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u5916\u90e8\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u3001\u305d\u308c\u3092\u547c\u3073\u51fa\u3059\u3002\n\u76f4\u63a5\u7684\u3067\u306f\u306a\u3044\u3051\u3069\u3001\u6a5f\u80fd\u306f\u3055\u3063\u304d\u306estd::bind\u3092\u4f7f\u3063\u305f\u3082\u306e\u3068\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u3002\n\n\u3055\u3066\u30012\u3064\u65b9\u6cd5\u304c\u3042\u308b\u306a\u3089\u901f\u3044\u307b\u3046\u3092\u4f7f\u3044\u305f\u3044\u3088\u306d\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u6e2c\u3063\u3066\u307f\u308b\u3002\n\n```C++\n#include <iostream>\n#include <chrono>\n#include <functional>\n\nclass Hoge {\n    int val;\npublic:\n    Hoge(int v) : val{v} {}\n    int GetVal(void) const { return val; }\n};\n\nconstexpr int LOOP_COUNT = 1000000;\n\nint main(void) {\n\tusing std::chrono::nanoseconds;\n\tusing std::chrono::duration_cast;\n\tusing std::chrono::high_resolution_clock;\n\t\n    Hoge hoge(1);\n\tstd::function<int()> GetVal_Bind = std::bind(&Hoge::GetVal, &hoge);\n    std::function<int()> GetVal_Lambda = [&]() { return hoge.GetVal(); };\n\t\n\t//Measure std::bind\n\tauto start = high_resolution_clock::now();\n\tfor(int i = 0; i < LOOP_COUNT; i++)\n\t\tGetVal_Bind();\n\tauto end = high_resolution_clock::now();\n\t\n\tint count = duration_cast<nanoseconds>(end - start).count();\n\t\n\tstd::cout << \"std::bind\" << std::endl;\n\tstd::cout << \"total:\" << count << \"ns\" << std::endl;\n\tstd::cout << \"mean:\" << (float)count / (float)LOOP_COUNT << \"ns\" << std::endl;\n\t\n\t//Measure lambda\n\tstart = high_resolution_clock::now();\n\tfor(int i = 0; i < LOOP_COUNT; i++)\n\t\tGetVal_Lambda();\n\tend = high_resolution_clock::now();\n\t\n\tcount = duration_cast<nanoseconds>(end - start).count();\n\t\n\tstd::cout << \"lambda\" << std::endl;\n\tstd::cout << \"total:\" << count << \"ns\" << std::endl;\n\tstd::cout << \"mean:\" << (float)count / (float)LOOP_COUNT << \"ns\" << std::endl;\n\t\n\t\n\treturn 0;\n}\n```\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u3002\n\n```\nstd::bind\ntotal:71158144ns\nmean:71.1581ns\nlambda\ntotal:36223729ns\nmean:36.2237ns\n```\n\n\u610f\u5916\u306b\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u307b\u3046\u304c2\u500d\u8fd1\u304f\u901f\u3044\u3002\uff08\u306a\u304a\u6700\u9069\u5316\u306f\u5207\u3063\u3066\u3042\u308b\uff09\n\u3068\u3044\u3046\u3053\u3068\u3067std::function\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3068\u304d\u306f\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u304a\u3046\u3068\u601d\u3046\u3002\uff08\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u304c\u5982\u4f55\u7a0b\u304b\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u3067\u306f\u3042\u308b\u304c\u2026\uff09\n\n###\u307e\u3068\u3081\n\u5df7\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u306e\u306bstd::bind\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u304c\u3088\u304f\u7d39\u4ecb\u3055\u308c\u308b\u304c\u3001\u5b9f\u306f\u30e9\u30e0\u30c0\u5f0f\u3067\u9593\u63a5\u7684\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u307b\u3046\u304c\u901f\u3044\u3002\n\n\u6700\u5f8c\u306b\u3001\u4e00\u5fdc\u691c\u8a3c\u74b0\u5883\u3092\u8f09\u305b\u3066\u304a\u304f\u3002\n\n- CPU:Intel Xeon CPU E5640\n- \u30e1\u30e2\u30ea:DDR3 12GB\n- OS: Windows10\n- \u30b3\u30f3\u30d1\u30a4\u30e9:MSVC 19.00.24215.1 (VS2015\u4ed8\u5c5e\u306ecl.exe)\n", "tags": ["C++", "C++11"]}