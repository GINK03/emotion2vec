{"context": "\n\n\u6620\u50cf\u306e\u5e2f\u57df\u6307\u5b9a\n\n\u4ee5\u4e0b\u306e Youtube \u306e PC \u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u3042\u308b\u3088\u3046\u306b\u3001Adaptive \u306a\u6620\u50cf\u306e\u8996\u8074\u6642\u306b\u52d5\u753b\u30d7\u30ec\u30a4\u30e4\u30fc\u5074\u3067\u518d\u751f\u6642\u306e\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u305f\u3044\u30b1\u30fc\u30b9\u306f\u307e\u307e\u3042\u308b\n\n\n\nGoogleCast\u3067\u306e\u5b9f\u73fe\u65b9\u6cd5\n\nGoogleCast \u306e Receiver \u30a2\u30d7\u30ea\u3067\u3082 MPL \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u3068\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u306e\u9078\u629e\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u304c\u51fa\u6765\u308b\n\nMPL\u306e\u30ac\u30a4\u30c9 \u306e \u300cSet video/audio bitrates\u300d \u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8f09\u304c\u3042\u308b\u304c\u3053\u308c\u3060\u3051\u3060\u3068\u5c11\u3057\u5206\u304b\u308a\u8f9b\u3044\n\nhost.getQualityLevel = function(streamIndex, qualityLevel) {\n    if (streamIndex == videoStreamIndex && videoQualityIndex != -1) {\n        return videoQualityIndex;\n    } else if (streamIndex == audioStreamIndex && audioQualityIndex != -1) {\n        return audioQualityIndex;\n    } else {\n        return qualityLevel;\n    }\n};\n\n\nstreamIndex \u306f\u5404 Stream \u306b\u5272\u308a\u632f\u3089\u308c\u305f Index\n\n\n\u4f8b) \u6620\u50cf\u21920, \u97f3\u58f0\u21921, \u30ad\u30e3\u30d7\u30b7\u30e7\u30f3\u21922\n\n\nqualityLevel \u306f\u5404 Stream \u6bce\u306e\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\n\n\n\u4f8b) 720p\u21920, 480p\u21921, 360p\u21922, \u2026\n\n\nMPL \u306f\u5b9a\u671f\u7684\u306b\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3001\u73fe\u5728\u306e\u901a\u4fe1\u72b6\u6cc1\u304b\u3089\u5019\u88dc\u3068\u3057\u3066 qualityLevel \u3092\u63d0\u793a\u3057\u3066\u304f\u308b\n\n\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3068\u3001\u4f55\u3082\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u306a\u3044\u306e\u3068\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\n\n\n\nhost.getQualityLevel = function(streamIndex, qualityLevel) {\n    return qualityLevel;\n}\n\n\n\u3053\u3053\u3067 \u4efb\u610f\u306e qualityLevel \u306e Index \u3092\u8fd4\u5374\u3059\u308b\u3053\u3068\u3067\u518d\u751f\u3059\u308b\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u51fa\u6765\u308b\n\u30ac\u30a4\u30c9\u306b\u3042\u308b\u4f8b\u3060\u3068\u3001\u6620\u50cf\u3001\u97f3\u58f0\u3001\u305d\u308c\u305e\u308c\u3067\u4e88\u3081\u3069\u306e\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u304b\u3092 videoQualityIndex, audioQualityIndex \u3067\u6c7a\u3081\u3066\u304a\u3044\u3066\u56fa\u5b9a\u3067\u8fd4\u3059\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\n\n\nstreamIndex \u3068\u5404\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u306e\u78ba\u8a8d\n\n\u518d\u751f\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u6620\u50cf\u306b\u3064\u3044\u3066\u3001\u4e8b\u524d\u306b\u4f55\u756a\u76ee\u306e streamIndex \u304c\u6620\u50cf/\u97f3\u58f0\u306a\u306e\u304b\u3001\u4f55\u756a\u76ee\u306e qualityLevel \u304c\u3069\u306e\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u304b\u3001\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308b\n\u30ac\u30a4\u30c9\u306b\u306f\u8a18\u8f09\u3055\u308c\u3066\u3044\u306a\u3044\u304c\u3001\u4ee5\u4e0b\u306e onManifestReady \u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u53d6\u5f97\u51fa\u6765\u308b\n\nvar host = new cast.player.api.Host({\n    mediaElement: element, url: url\n});\nvar protocol = cast.player.api.CreateDashStreamingProtocol(mediaHost); // DASH\u306e\u5834\u5408\nhost.onManifestReady = function() {\n    for (var i = 0, count = protocol.getStreamCount(); i < count; i++) {\n        var streamIndex = i;\n        var streamInfo = protocol.getStreamInfo(i);\n        // ...\n    }\n};\n// ...\n\n\nstreamInfo \u306f StreamInfo \u578b\u306b\u306a\u3063\u3066\u3044\u3066\u3001Manifest \u3092\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u306e\u69d8\u3005\u306a\u60c5\u5831\u304c\u53d6\u308c\u308b\n\n\n\u3053\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3057\u3066\u304a\u3044\u3066\u3001\u5148\u306e getQualityLevel \u306e\u5224\u5b9a\u3067\u7528\u3044\u308b\n\n\n\n\n## \u6620\u50cf\u306e\u5e2f\u57df\u6307\u5b9a\n* \u4ee5\u4e0b\u306e Youtube \u306e PC \u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u3042\u308b\u3088\u3046\u306b\u3001Adaptive \u306a\u6620\u50cf\u306e\u8996\u8074\u6642\u306b\u52d5\u753b\u30d7\u30ec\u30a4\u30e4\u30fc\u5074\u3067\u518d\u751f\u6642\u306e\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u305f\u3044\u30b1\u30fc\u30b9\u306f\u307e\u307e\u3042\u308b\n\n![ss_20160708_091744s.png](https://qiita-image-store.s3.amazonaws.com/0/112602/5dbd3f61-79c4-4378-fa85-5c419dab6a82.png)\n\n\n## GoogleCast\u3067\u306e\u5b9f\u73fe\u65b9\u6cd5\n\n* GoogleCast \u306e Receiver \u30a2\u30d7\u30ea\u3067\u3082 MPL \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u3068\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u306e\u9078\u629e\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u304c\u51fa\u6765\u308b\n* [MPL\u306e\u30ac\u30a4\u30c9](https://developers.google.com/cast/docs/player) \u306e \u300cSet video/audio bitrates\u300d \u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8f09\u304c\u3042\u308b\u304c\u3053\u308c\u3060\u3051\u3060\u3068\u5c11\u3057\u5206\u304b\u308a\u8f9b\u3044\n\n```js\nhost.getQualityLevel = function(streamIndex, qualityLevel) {\n    if (streamIndex == videoStreamIndex && videoQualityIndex != -1) {\n        return videoQualityIndex;\n    } else if (streamIndex == audioStreamIndex && audioQualityIndex != -1) {\n        return audioQualityIndex;\n    } else {\n        return qualityLevel;\n    }\n};\n```\n\n* streamIndex \u306f\u5404 Stream \u306b\u5272\u308a\u632f\u3089\u308c\u305f Index\n    * \u4f8b) \u6620\u50cf\u21920, \u97f3\u58f0\u21921, \u30ad\u30e3\u30d7\u30b7\u30e7\u30f3\u21922\n* qualityLevel \u306f\u5404 Stream \u6bce\u306e\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\n    * \u4f8b) 720p\u21920, 480p\u21921, 360p\u21922, \u2026\n* MPL \u306f\u5b9a\u671f\u7684\u306b\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3001\u73fe\u5728\u306e\u901a\u4fe1\u72b6\u6cc1\u304b\u3089\u5019\u88dc\u3068\u3057\u3066 qualityLevel \u3092\u63d0\u793a\u3057\u3066\u304f\u308b\n  * \u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3068\u3001\u4f55\u3082\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u306a\u3044\u306e\u3068\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\n\n```js\nhost.getQualityLevel = function(streamIndex, qualityLevel) {\n    return qualityLevel;\n}\n```\n* \u3053\u3053\u3067 \u4efb\u610f\u306e qualityLevel \u306e Index \u3092\u8fd4\u5374\u3059\u308b\u3053\u3068\u3067\u518d\u751f\u3059\u308b\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u51fa\u6765\u308b\n* \u30ac\u30a4\u30c9\u306b\u3042\u308b\u4f8b\u3060\u3068\u3001\u6620\u50cf\u3001\u97f3\u58f0\u3001\u305d\u308c\u305e\u308c\u3067\u4e88\u3081\u3069\u306e\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u304b\u3092 videoQualityIndex, audioQualityIndex \u3067\u6c7a\u3081\u3066\u304a\u3044\u3066\u56fa\u5b9a\u3067\u8fd4\u3059\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\n\n### streamIndex \u3068\u5404\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u306e\u78ba\u8a8d\n\n* \u518d\u751f\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u6620\u50cf\u306b\u3064\u3044\u3066\u3001\u4e8b\u524d\u306b\u4f55\u756a\u76ee\u306e streamIndex \u304c\u6620\u50cf/\u97f3\u58f0\u306a\u306e\u304b\u3001\u4f55\u756a\u76ee\u306e qualityLevel \u304c\u3069\u306e\u30ec\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u304b\u3001\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308b\n* \u30ac\u30a4\u30c9\u306b\u306f\u8a18\u8f09\u3055\u308c\u3066\u3044\u306a\u3044\u304c\u3001\u4ee5\u4e0b\u306e onManifestReady \u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u53d6\u5f97\u51fa\u6765\u308b\n\n```javascript\nvar host = new cast.player.api.Host({\n    mediaElement: element, url: url\n});\nvar protocol = cast.player.api.CreateDashStreamingProtocol(mediaHost); // DASH\u306e\u5834\u5408\nhost.onManifestReady = function() {\n    for (var i = 0, count = protocol.getStreamCount(); i < count; i++) {\n        var streamIndex = i;\n        var streamInfo = protocol.getStreamInfo(i);\n        // ...\n    }\n};\n// ...\n```\n\n* streamInfo \u306f [StreamInfo](https://developers.google.com/cast/docs/reference/player/cast.player.api.StreamInfo) \u578b\u306b\u306a\u3063\u3066\u3044\u3066\u3001Manifest \u3092\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u306e\u69d8\u3005\u306a\u60c5\u5831\u304c\u53d6\u308c\u308b\n    * \u3053\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3057\u3066\u304a\u3044\u3066\u3001\u5148\u306e getQualityLevel \u306e\u5224\u5b9a\u3067\u7528\u3044\u308b\n", "tags": ["GoogleCast", "ChromeCast", "Receiver", "MediaPlayerLibrary"]}