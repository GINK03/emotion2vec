{"tags": ["Xcode8", "Swift", "swift3", "iOS", "iPhone"], "context": "Sanitizer \u3068\u3044\u3046\u82f1\u5358\u8a9e\u306f\u3042\u307e\u308a\u805e\u304d\u6163\u308c\u306a\u3044\u3067\u3059\u3088\u306d\u3002\u8f9e\u66f8\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u610f\u5473\u3067\u3059\u3002\nsanitizer\u306e\u610f\u5473 - \u82f1\u548c\u8f9e\u5178 Weblio\u8f9e\u66f8\n\n\u6e05\u6d44\u5264\u3001\u6e05\u6d44\u85ac\u3001\u6d88\u6bd2\u5264\u3001\u6d88\u6bd2\u85ac\u3001\u6bba\u83cc\u5264\u3001\u6bba\u83cc\u85ac\u3001\u30b5\u30cb\u30bf\u30a4\u30b6\u30fc\n\nXcode \u3067\u6271\u3046\u969b\u306e\u300cAddress/Thread Sanitizer\u300d\u306e\u548c\u8a33\u306f\u3001\u300c\u30e1\u30e2\u30ea\u30a2\u30c9\u30ec\u30b9\u30fb\u30b9\u30ec\u30c3\u30c9\u3078\u306e\u4e0d\u6b63\u30a2\u30af\u30bb\u30b9\u306e\u691c\u77e5\u6a5f\u69cb\u300d\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\nThread Sanitizer\u306fXcode 8\u3067\u3001Address Sanitizer\u306fXcode 7\u3067\u5c0e\u5165\u3055\u308c\u305f\u4ed5\u7d44\u307f\u3067\u3059\u3002\u305f\u3060\u3001Address Sanitizer\u306fXcode 7\u6642\u70b9\u3067\u306fObjective-C\u306e\u307f\u306e\u5bfe\u5fdc\u3067\u3001Swift\u5bfe\u5fdc\u306fXcode 8\u304b\u3089\u3067\u3059\u3002\u306a\u306e\u3067\u3001Swift\u3067\u6271\u3046\u3068\u3044\u3046\u89b3\u70b9\u3060\u3068\u3001\u3069\u3061\u3089\u3082Xcode 8\u304b\u3089\u306e\u6a5f\u80fd\u3068\u307f\u306a\u305b\u307e\u3059\u3002\n\u3069\u3061\u3089\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30ad\u30fc\u30e0\u8a2d\u5b9a\u306eDiagnostics\u30bf\u30d6\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001\u4e21\u65b9\u30aa\u30f3\u306b\u306f\u3067\u304d\u306a\u304b\u3063\u305f\u308a\u4ed6\u306e\u8a2d\u5b9a\u3068\u4e21\u7acb\u3067\u304d\u306a\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u3001\u305d\u308c\u305e\u308c\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nAddress Sanitizer\n\u4e0d\u6b63\u306a\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u3092\u8d77\u3053\u3059\u305f\u3081\u306b\u3001UnsafePointer\u3068\u3044\u3046\u3001\u3044\u304b\u306b\u3082\u5371\u967a\u305d\u3046\u306astruct\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u7b2c1\u30fb2\u5f15\u6570\u3092\u5358\u7d14\u306b\u8db3\u3057\u5408\u308f\u305b\u308badd(_:_:)\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001\u3053\u3061\u3089\u306f\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u6b63\u3057\u304f\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u554f\u984c\u7121\u304f\u52d5\u304d\u307e\u3059\u3002Unsafe\u3068\u3044\u3048\u3069\u3082\u3001\u5fc5\u8981\u306a\u7b87\u6240\u3067\u6b63\u3057\u3044\u4f7f\u3044\u65b9\u3092\u3059\u308b\u5206\u306b\u306f\u307e\u3063\u305f\u304f\u554f\u984c\u7121\u3044\u3067\u3059\u3002\nfunc add(_ x: UnsafePointer<Int>, _ y: UnsafePointer<Int>) -> Int {\n    return x.pointee + y.pointee\n}\n\nvar x = 1\nvar y = 2\nlet r = add(&x, &y) // \u2192 3\n\n(\u3082\u3061\u308d\u3093\u3001\u3053\u306eadd(_:_:)\u30e1\u30bd\u30c3\u30c9\u306f\u4f8b\u306e\u305f\u3081\u3067\u3042\u3063\u3066\u3001\u666e\u901aUnsafePointer\u306a\u3093\u3066\u4f7f\u3046\u5fc5\u8981\u306f\u307e\u3063\u305f\u304f\u7121\u3044\u3067\u3059\u304c\u3002)\n\u95a2\u6570\u5b9a\u7fa9\u3092\u3053\u3046\u5909\u3048\u3066\u3082\u7d50\u679c\u306f\u540c\u3058\u3067\u3059\u3002\nfunc add(_ x: UnsafePointer<Int>, _ y: UnsafePointer<Int>) -> Int {\n    return x[0] + y[0]\n}\n\n\u4e00\u65b9\u3001\u6b21\u306e\u3088\u3046\u306b\u5909\u3048\u308b\u3068\u3001r\u306f2\u306b\u5909\u308f\u308a\u307e\u3059\u3002\nfunc add(_ x: UnsafePointer<Int>, _ y: UnsafePointer<Int>) -> Int {\n    return x.pointee + y[1]\n}\n\nvar x = 1\nvar y = 2\nlet r = add(&x, &y) // \u2192 2\n\n\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30b9\u30bf\u30c3\u30af\u306e\u30e1\u30e2\u30ea\u306e\u4e0d\u6b63\u30a2\u30af\u30bb\u30b9\u3092\u3057\u3066\u304a\u308a\u3001\u3053\u306e\u6642\u306e\u5834\u5408y[1]\u304c\u76f4\u524d\u884c\u306ex\u306e\u5024\u306e1\u3068\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u540c\u69d8\u306b\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001r\u306f2018\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nvar x = 1\nvar \ud83d\udc36\ud83c\udf8d = 2017\nvar y = 2\nlet r = add(&x, &y) // \u2192 2018\n\n\u3053\u306e\u307e\u307e\u3057\u308c\u3063\u3068\u52d5\u3044\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u30e4\u30d0\u3044\u30d0\u30b0\u306b\u7e4b\u304c\u308a\u305d\u3046\u3067\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Address Sanitizer\u6a5f\u80fd\u3092\u30aa\u30f3\u306b\u3057\u3066\u307f\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u30d6\u30ec\u30fc\u30af\u3057\u3001\n\n\u6b21\u306e\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n===================================================================28390==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff5d47cd08 at pc 0x00010278373c bp 0x7fff5d47cbb0 sp 0x7fff5d47cba8READ of size 8 at 0x7fff5d47cd08 thread T0\n    #0 0x10278373b in TF9Sanitizer3addFTGSPSi_GSPSiSi AppDelegate.swift:12\n    #1 0x102783bf0 in _TFC9Sanitizer11AppDelegate11applicationfTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyPSb AppDelegate.swift:26\n    #2 0x102783daf in _TToFC9Sanitizer11AppDelegate11applicationfTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyPSb AppDelegate.swift\n    #3 0x10406c3c1 in -UIApplication _handleDelegateCallbacksWithOptions:isSuspended:restoreState:\n    #4 0x10406dd46 in -UIApplication _callInitializationDelegatesForMainScene:transitionContext:\n    #5 0x1040740ec in -UIApplication _runWithMainScene:transitionContext:completion:\n    #6 0x10407126c in -UIApplication workspaceDidEndTransaction:\n    #7 0x107e0e6ca in _FBSSERIALQUEUE_IS_CALLINGOUT_TO_A_BLOCK_ (FrontBoardServices+0x3b6ca)\n    #8 0x107e0e543 in -FBSSerialQueue _performNext\n    #9 0x107e0e8cc in -FBSSerialQueue _performNextFromRunLoopSource\n    #10 0x10674c760 in CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION (CoreFoundation+0x9b760)\n    #11 0x10673198b in CFRunLoopDoSources0 (CoreFoundation+0x8098b)\n    #12 0x106730e75 in __CFRunLoopRun (CoreFoundation+0x7fe75)\n    #13 0x106730883 in CFRunLoopRunSpecific (CoreFoundation+0x7f883)\n    #14 0x10406fae9 in -UIApplication _run\n    #15 0x104075c67 in UIApplicationMain (UIKit+0x27c67)\n    #16 0x102785102 in main AppDelegate.swift:16\n    #17 0x10767468c in start (libdyld.dylib+0x468c)\nAddress 0x7fff5d47cd08 is located in stack of thread T0 at offset 104 in frame\n    #0 0x1027839ef in _TFC9Sanitizer11AppDelegate11applicationfTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyPSb AppDelegate.swift:21\n  This frame has 4 object(s):\n    [32, 40) ''\n    [64, 72) ''\n    [96, 104) '' <== Memory access at offset 104 overflows this variable\n    [128, 144) ''\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\n      (longjmp and C++ exceptions are supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow AppDelegate.swift:12 in TF9Sanitizer3addFTGSPSiGSPSiSi\nShadow bytes around the buggy address:\n  0x1fffeba8f950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f990: 00 00 00 00 f1 f1 f1 f1 00 f2 f2 f2 00 f2 f2 f2\n=>0x1fffeba8f9a0: 00[f2]f2 f2 00 00 f3 f3 00 00 00 00 00 00 00 00\n  0x1fffeba8f9b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f9c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f9d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f9e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f9f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==28390==ABORTING\nAddressSanitizer report breakpoint hit. Use 'thread info -s' to get extended information about the report.\n(lldb) \n\n\u7279\u306b\u6b21\u306e\u30ed\u30b0\u306b\u3001Int\u306e\u30b5\u30a4\u30ba\u3092\u8d85\u3048\u305f\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u304c\u306a\u3055\u308c\u305f\u3053\u3068\u304c\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nThis frame has 4 object(s):\n    [32, 40) ''\n    [64, 72) ''\n    [96, 104) '' <== Memory access at offset 104 overflows this variable\n    [128, 144) ''\n\n\u901a\u5e38\u306e\u30a2\u30d7\u30ea\u958b\u767a\u3067\u306f\u3001\u305d\u3082\u305d\u3082UnsafePointer\u306a\u3069\u6271\u3046\u3053\u3068\u306f\u7a00\u3067\u3059\u304c\u3001\u305d\u308c\u3089\u3092\u3088\u304f\u6271\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u4f5c\u3063\u3066\u3044\u308b\u5834\u5408\u306a\u3069\u306f\u3001\u30df\u30b9\u30fb\u30d0\u30b0\u306e\u767a\u898b\u306b\u5f79\u7acb\u3061\u305d\u3046\u3067\u3059\u306d\u3002\n\nThread Sanitizer\n\u7d9a\u3044\u3066\u3001Thread Sanitizer\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306b\u3001Mono\u30af\u30e9\u30b9\u306e\u5358\u4e00\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9m\u306evalue\u66f8\u304d\u63db\u3048\u3092\u3001async(group:qos:flags:execute:)\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5225\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u307b\u307c\u540c\u6642\u306b\u884c\u3044\u307e\u3059\u3002\nclass Mono {\n    var value: Int = 0\n}\n\nlet m = Mono()\nDispatchQueue.global().async {\n    m.value = 1\n}\nDispatchQueue.global().async {\n    m.value = 2\n}\n\nThread Sanitizer\u6a5f\u80fd\u30aa\u30d5\u3067\u306f\u4f55\u3082\u8d77\u3053\u3089\u305a\u3001m.value\u306f\u6700\u7d42\u7684\u306b\u306f1\u304b2\u306b\u306a\u308a\u307e\u3059(\u5927\u62b52\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u304c\u4e0d\u5b9a)\u3002\n\u4e00\u65b9\u3001Thread Sanitizer\u6a5f\u80fd\u3092\u30aa\u30f3\u306b\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u30d6\u30ec\u30fc\u30af\u3057(Pause on issues\u3082\u30aa\u30f3\u306b\u3057\u305f\u6642\u306e\u307f)\u3001\n\n\u6b21\u306e\u8b66\u544a\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nWARNING: ThreadSanitizer: data race (pid=29835)==================\n  Write of size 8 at 0x7d080000d1b0 by thread T4:\n    #0 TFC9Sanitizer4Monos5valueSi AppDelegate.swift (Sanitizer+0x000100002927)\n    #1 _TFFC9Sanitizer11AppDelegate11applicationFTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyPSbU0_FT_T AppDelegate.swift:28 (Sanitizer+0x0001000035b8)\n    #2 _TPATFFC9Sanitizer11AppDelegate11applicationFTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP_SbU0_FT_T AppDelegate.swift (Sanitizer+0x00010000368e)\n    #3 _TTRXFoXFdCb__ AppDelegate.swift (Sanitizer+0x0001000033d5)\n    #4 tsan::invoke_and_release_block(void*) :223 (libclang_rt.tsan_iossim_dynamic.dylib+0x00000005c3fb)\n    #5 _dispatch_client_callout :159 (libdispatch.dylib+0x00000002c0cc)\n  Previous write of size 8 at 0x7d080000d1b0 by thread T2:\n    #0 _TFC9Sanitizer4Monos5valueSi AppDelegate.swift (Sanitizer+0x000100002927)\n    #1 _TFFC9Sanitizer11AppDelegate11applicationFTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyPSbU_FT_T_ AppDelegate.swift:25 (Sanitizer+0x000100003218)\n    #2 _TPATFFC9Sanitizer11AppDelegate11applicationFTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP_SbU_FT_T AppDelegate.swift (Sanitizer+0x00010000332e)\n    #3 _TTRXFoXFdCb__ AppDelegate.swift (Sanitizer+0x0001000033d5)\n    #4 _tsan::invoke_and_release_block(void*) :223 (libclang_rt.tsan_iossim_dynamic.dylib+0x00000005c3fb)\n    #5 dispatch_client_callout :159 (libdispatch.dylib+0x00000002c0cc)\n  Location is heap block of size 24 at 0x7d080000d1a0 allocated by main thread:\n    #0 malloc :223 (libclangrt.tsan_iossim_dynamic.dylib+0x0000000404ba)\n    #1 swift_slowAlloc :204 (libswiftCore.dylib+0x000000221b28)\n    #2 TFC9Sanitizer4MonoCfTS0 AppDelegate.swift (Sanitizer+0x0001000029e2)\n    #3 TFC9Sanitizer11AppDelegatecfT_S0 AppDelegate.swift:22 (Sanitizer+0x000100004415)\n    #4 TToFC9Sanitizer11AppDelegatecfT_S0 AppDelegate.swift (Sanitizer+0x000100004546)\n    #5 _UIApplicationMainPreparations :160 (UIKit+0x00000002835d)\n    #6 start :141 (libdyld.dylib+0x00000000468c)\n  Thread T4 (tid=2465144, running) created by thread T-1\n    [failed to restore the stack]\n  Thread T2 (tid=2465142, running) created by thread T-1\n    [failed to restore the stack]\nSUMMARY: ThreadSanitizer: data race AppDelegate.swift in _TFC9Sanitizer4Monos5valueSi\n==================ThreadSanitizer report breakpoint hit. Use 'thread info -s' to get extended information about the report.\n\u307e\u305f\u3001Xcode\u306e\u5de6\u30da\u30a4\u30f3\u306b\u3082\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u6b21\u306e\u3088\u3046\u306b\u30ed\u30c3\u30af\u51e6\u7406\u3092\u631f\u3080\u3068\u3001\u540c\u3058\u30ad\u30e5\u30fc\u3064\u307e\u308a\u540c\u3058\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3055\u308c\u308b\u306e\u3067\u3001Thread Sanitizer\u3067\u5f15\u3063\u304b\u304b\u3089\u306a\u304f\u306a\u308b\u3053\u3068\u3082\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\ud83d\udc40\nclass Mono {\n    private let lockQueue = DispatchQueue(label: \"lock serial queue\")\n    var _value: Int = 0\n    var value: Int {\n        get { return lockQueue.sync { _value } }\n        set { lockQueue.sync { _value = newValue } }\n    }\n}\n\n\u53c2\u8003: Swift 3\u3067\u306e\u540c\u671f\u51e6\u7406(\u6392\u4ed6\u5236\u5fa1)\u306e\u57fa\u672c - Qiita\n\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u306a\u3063\u3066\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3001\u610f\u56f3\u305b\u305a\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3057\u307e\u3063\u305f\u6642\u306e\u691c\u77e5\u306b\u826f\u3044\u611f\u3058\u306b\u4f7f\u3048\u305d\u3046\u3067\u3059\u306d\ud83d\udc40\n\n\u305d\u306e\u4ed6\u306e\u53c2\u8003\u30ea\u30f3\u30af\n\nAdvanced Debugging and the Address Sanitizer - WWDC 2015 - Videos - Apple Developer\nThread Sanitizer and Static Analysis - WWDC 2016 - Videos - Apple Developer\n\nPractical Swift | Eric Downey | Apress\n\n\u5927\u3044\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\n\n\n\n\ud83c\udf28Swift\u30ec\u30bf\u30fc #9\ud83c\udf28 \u2013 Swift\u30fbiOS\u30b3\u30e9\u30e0 \u2013 Medium\n\n\nUnderstanding Data Race Detection by Implementing it in Swift \u00b7 [Thinking inside a large box];\u306e\u8a18\u4e8b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\n\n\n\nmookmook radio \u00bb Blog Archive \u00bb \u718a\u8c37\u3068\u7e6a\u9762\u304c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30fc\u30c9\u306e\u5185\u304b\u3089\u8074\u3053\u3048\u3066\u304f\u308b\u58f0\u306b\u8033\u3092\u50be\u3051\u3066\u697d\u3057\u3080\u30e9\u30b8\u30aa #9\n\n\nunsafe\u7cfb API\u306e\u8a71\u3057\u3066\u307e\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n\n\nSanitizer \u3068\u3044\u3046\u82f1\u5358\u8a9e\u306f\u3042\u307e\u308a\u805e\u304d\u6163\u308c\u306a\u3044\u3067\u3059\u3088\u306d\u3002\u8f9e\u66f8\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u610f\u5473\u3067\u3059\u3002\n\n[sanitizer\u306e\u610f\u5473 - \u82f1\u548c\u8f9e\u5178 Weblio\u8f9e\u66f8](http://ejje.weblio.jp/content/sanitizer)\n> \u6e05\u6d44\u5264\u3001\u6e05\u6d44\u85ac\u3001\u6d88\u6bd2\u5264\u3001\u6d88\u6bd2\u85ac\u3001\u6bba\u83cc\u5264\u3001\u6bba\u83cc\u85ac\u3001\u30b5\u30cb\u30bf\u30a4\u30b6\u30fc\n\nXcode \u3067\u6271\u3046\u969b\u306e\u300cAddress/Thread Sanitizer\u300d\u306e\u548c\u8a33\u306f\u3001\u300c\u30e1\u30e2\u30ea\u30a2\u30c9\u30ec\u30b9\u30fb\u30b9\u30ec\u30c3\u30c9\u3078\u306e\u4e0d\u6b63\u30a2\u30af\u30bb\u30b9\u306e\u691c\u77e5\u6a5f\u69cb\u300d\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\n\nThread Sanitizer\u306fXcode 8\u3067\u3001Address Sanitizer\u306fXcode 7\u3067\u5c0e\u5165\u3055\u308c\u305f\u4ed5\u7d44\u307f\u3067\u3059\u3002\u305f\u3060\u3001Address Sanitizer\u306fXcode 7\u6642\u70b9\u3067\u306fObjective-C\u306e\u307f\u306e\u5bfe\u5fdc\u3067\u3001Swift\u5bfe\u5fdc\u306fXcode 8\u304b\u3089\u3067\u3059\u3002\u306a\u306e\u3067\u3001Swift\u3067\u6271\u3046\u3068\u3044\u3046\u89b3\u70b9\u3060\u3068\u3001\u3069\u3061\u3089\u3082Xcode 8\u304b\u3089\u306e\u6a5f\u80fd\u3068\u307f\u306a\u305b\u307e\u3059\u3002\n\n\u3069\u3061\u3089\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30ad\u30fc\u30e0\u8a2d\u5b9a\u306e`Diagnostics`\u30bf\u30d6\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001\u4e21\u65b9\u30aa\u30f3\u306b\u306f\u3067\u304d\u306a\u304b\u3063\u305f\u308a\u4ed6\u306e\u8a2d\u5b9a\u3068\u4e21\u7acb\u3067\u304d\u306a\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n![Screen Shot 2017-01-02 at 20.48.59.png](https://qiita-image-store.s3.amazonaws.com/0/19398/150f1cb8-7085-c6f1-71a9-0fad97b939ae.png \"Screen Shot 2017-01-02 at 20.48.59.png\")\n\n\n\u305d\u308c\u3067\u306f\u3001\u305d\u308c\u305e\u308c\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n# Address Sanitizer\n\n\u4e0d\u6b63\u306a\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u3092\u8d77\u3053\u3059\u305f\u3081\u306b\u3001[UnsafePointer](https://developer.apple.com/reference/swift/unsafepointer)\u3068\u3044\u3046\u3001\u3044\u304b\u306b\u3082\u5371\u967a\u305d\u3046\u306a`struct`\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u7b2c1\u30fb2\u5f15\u6570\u3092\u5358\u7d14\u306b\u8db3\u3057\u5408\u308f\u305b\u308b`add(_:_:)`\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u3053\u3061\u3089\u306f\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u6b63\u3057\u304f\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u554f\u984c\u7121\u304f\u52d5\u304d\u307e\u3059\u3002`Unsafe`\u3068\u3044\u3048\u3069\u3082\u3001\u5fc5\u8981\u306a\u7b87\u6240\u3067\u6b63\u3057\u3044\u4f7f\u3044\u65b9\u3092\u3059\u308b\u5206\u306b\u306f\u307e\u3063\u305f\u304f\u554f\u984c\u7121\u3044\u3067\u3059\u3002\n\n```swift\nfunc add(_ x: UnsafePointer<Int>, _ y: UnsafePointer<Int>) -> Int {\n    return x.pointee + y.pointee\n}\n\nvar x = 1\nvar y = 2\nlet r = add(&x, &y) // \u2192 3\n```\n\n(\u3082\u3061\u308d\u3093\u3001\u3053\u306e`add(_:_:)`\u30e1\u30bd\u30c3\u30c9\u306f\u4f8b\u306e\u305f\u3081\u3067\u3042\u3063\u3066\u3001\u666e\u901a`UnsafePointer`\u306a\u3093\u3066\u4f7f\u3046\u5fc5\u8981\u306f\u307e\u3063\u305f\u304f\u7121\u3044\u3067\u3059\u304c\u3002)\n\n\n\u95a2\u6570\u5b9a\u7fa9\u3092\u3053\u3046\u5909\u3048\u3066\u3082\u7d50\u679c\u306f\u540c\u3058\u3067\u3059\u3002\n\n```swift\nfunc add(_ x: UnsafePointer<Int>, _ y: UnsafePointer<Int>) -> Int {\n    return x[0] + y[0]\n}\n```\n\n\u4e00\u65b9\u3001\u6b21\u306e\u3088\u3046\u306b\u5909\u3048\u308b\u3068\u3001`r`\u306f2\u306b\u5909\u308f\u308a\u307e\u3059\u3002\n\n```swift\nfunc add(_ x: UnsafePointer<Int>, _ y: UnsafePointer<Int>) -> Int {\n    return x.pointee + y[1]\n}\n\nvar x = 1\nvar y = 2\nlet r = add(&x, &y) // \u2192 2\n```\n\n\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30b9\u30bf\u30c3\u30af\u306e\u30e1\u30e2\u30ea\u306e\u4e0d\u6b63\u30a2\u30af\u30bb\u30b9\u3092\u3057\u3066\u304a\u308a\u3001\u3053\u306e\u6642\u306e\u5834\u5408`y[1]`\u304c\u76f4\u524d\u884c\u306e`x`\u306e\u5024\u306e1\u3068\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u540c\u69d8\u306b\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001`r`\u306f2018\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```swift\nvar x = 1\nvar \ud83d\udc36\ud83c\udf8d = 2017\nvar y = 2\nlet r = add(&x, &y) // \u2192 2018\n```\n\n\u3053\u306e\u307e\u307e\u3057\u308c\u3063\u3068\u52d5\u3044\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u30e4\u30d0\u3044\u30d0\u30b0\u306b\u7e4b\u304c\u308a\u305d\u3046\u3067\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Address Sanitizer\u6a5f\u80fd\u3092\u30aa\u30f3\u306b\u3057\u3066\u307f\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u30d6\u30ec\u30fc\u30af\u3057\u3001\n\n![Screen Shot 2017-01-02 at 21.21.33.png](https://qiita-image-store.s3.amazonaws.com/0/19398/072c9485-2875-0cab-3dac-50c088d135e0.png \"Screen Shot 2017-01-02 at 21.21.33.png\")\n\n\u6b21\u306e\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\n<details><summary>===================================================================28390==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff5d47cd08 at pc 0x00010278373c bp 0x7fff5d47cbb0 sp 0x7fff5d47cba8</summary>READ of size 8 at 0x7fff5d47cd08 thread T0\n    #0 0x10278373b in _TF9Sanitizer3addFTGSPSi_GSPSi__Si AppDelegate.swift:12\n    #1 0x102783bf0 in _TFC9Sanitizer11AppDelegate11applicationfTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP____Sb AppDelegate.swift:26\n    #2 0x102783daf in _TToFC9Sanitizer11AppDelegate11applicationfTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP____Sb AppDelegate.swift\n    #3 0x10406c3c1 in -[UIApplication _handleDelegateCallbacksWithOptions:isSuspended:restoreState:] (UIKit+0x1e3c1)\n    #4 0x10406dd46 in -[UIApplication _callInitializationDelegatesForMainScene:transitionContext:] (UIKit+0x1fd46)\n    #5 0x1040740ec in -[UIApplication _runWithMainScene:transitionContext:completion:] (UIKit+0x260ec)\n    #6 0x10407126c in -[UIApplication workspaceDidEndTransaction:] (UIKit+0x2326c)\n    #7 0x107e0e6ca in __FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ (FrontBoardServices+0x3b6ca)\n    #8 0x107e0e543 in -[FBSSerialQueue _performNext] (FrontBoardServices+0x3b543)\n    #9 0x107e0e8cc in -[FBSSerialQueue _performNextFromRunLoopSource] (FrontBoardServices+0x3b8cc)\n    #10 0x10674c760 in __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ (CoreFoundation+0x9b760)\n    #11 0x10673198b in __CFRunLoopDoSources0 (CoreFoundation+0x8098b)\n    #12 0x106730e75 in __CFRunLoopRun (CoreFoundation+0x7fe75)\n    #13 0x106730883 in CFRunLoopRunSpecific (CoreFoundation+0x7f883)\n    #14 0x10406fae9 in -[UIApplication _run] (UIKit+0x21ae9)\n    #15 0x104075c67 in UIApplicationMain (UIKit+0x27c67)\n    #16 0x102785102 in main AppDelegate.swift:16\n    #17 0x10767468c in start (libdyld.dylib+0x468c)\nAddress 0x7fff5d47cd08 is located in stack of thread T0 at offset 104 in frame\n    #0 0x1027839ef in _TFC9Sanitizer11AppDelegate11applicationfTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP____Sb AppDelegate.swift:21\n  This frame has 4 object(s):\n    [32, 40) ''\n    [64, 72) ''\n    [96, 104) '' <== Memory access at offset 104 overflows this variable\n    [128, 144) ''\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow AppDelegate.swift:12 in _TF9Sanitizer3addFTGSPSi_GSPSi__Si\nShadow bytes around the buggy address:\n  0x1fffeba8f950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f990: 00 00 00 00 f1 f1 f1 f1 00 f2 f2 f2 00 f2 f2 f2\n=>0x1fffeba8f9a0: 00[f2]f2 f2 00 00 f3 f3 00 00 00 00 00 00 00 00\n  0x1fffeba8f9b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f9c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f9d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f9e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeba8f9f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==28390==ABORTING\nAddressSanitizer report breakpoint hit. Use 'thread info -s' to get extended information about the report.\n(lldb) \n</details>\n\n\n\u7279\u306b\u6b21\u306e\u30ed\u30b0\u306b\u3001Int\u306e\u30b5\u30a4\u30ba\u3092\u8d85\u3048\u305f\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u304c\u306a\u3055\u308c\u305f\u3053\u3068\u304c\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\nThis frame has 4 object(s):\n    [32, 40) ''\n    [64, 72) ''\n    [96, 104) '' <== Memory access at offset 104 overflows this variable\n    [128, 144) ''\n```\n\n\u901a\u5e38\u306e\u30a2\u30d7\u30ea\u958b\u767a\u3067\u306f\u3001\u305d\u3082\u305d\u3082`UnsafePointer`\u306a\u3069\u6271\u3046\u3053\u3068\u306f\u7a00\u3067\u3059\u304c\u3001\u305d\u308c\u3089\u3092\u3088\u304f\u6271\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u4f5c\u3063\u3066\u3044\u308b\u5834\u5408\u306a\u3069\u306f\u3001\u30df\u30b9\u30fb\u30d0\u30b0\u306e\u767a\u898b\u306b\u5f79\u7acb\u3061\u305d\u3046\u3067\u3059\u306d\u3002\n\n\n# Thread Sanitizer\n\n\u7d9a\u3044\u3066\u3001Thread Sanitizer\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u6b21\u306e\u3088\u3046\u306b\u3001`Mono`\u30af\u30e9\u30b9\u306e\u5358\u4e00\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9`m`\u306e`value`\u66f8\u304d\u63db\u3048\u3092\u3001`async(group:qos:flags:execute:)`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5225\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u307b\u307c\u540c\u6642\u306b\u884c\u3044\u307e\u3059\u3002\n\n```\nclass Mono {\n    var value: Int = 0\n}\n\nlet m = Mono()\nDispatchQueue.global().async {\n    m.value = 1\n}\nDispatchQueue.global().async {\n    m.value = 2\n}\n```\n\nThread Sanitizer\u6a5f\u80fd\u30aa\u30d5\u3067\u306f\u4f55\u3082\u8d77\u3053\u3089\u305a\u3001`m.value`\u306f\u6700\u7d42\u7684\u306b\u306f`1`\u304b`2`\u306b\u306a\u308a\u307e\u3059(\u5927\u62b5`2`\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u304c\u4e0d\u5b9a)\u3002\n\n\u4e00\u65b9\u3001Thread Sanitizer\u6a5f\u80fd\u3092\u30aa\u30f3\u306b\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u30d6\u30ec\u30fc\u30af\u3057(Pause on issues\u3082\u30aa\u30f3\u306b\u3057\u305f\u6642\u306e\u307f)\u3001\n\n\n![Screen Shot 2017-01-02 at 21.47.45.png](https://qiita-image-store.s3.amazonaws.com/0/19398/7962b700-bc1d-9539-8e05-420c77f97454.png \"Screen Shot 2017-01-02 at 21.47.45.png\")\n\n\u6b21\u306e\u8b66\u544a\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\n\n<details><summary>WARNING: ThreadSanitizer: data race (pid=29835)</summary>==================\n  Write of size 8 at 0x7d080000d1b0 by thread T4:\n    #0 _TFC9Sanitizer4Monos5valueSi AppDelegate.swift (Sanitizer+0x000100002927)\n    #1 _TFFC9Sanitizer11AppDelegate11applicationFTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP____SbU0_FT_T_ AppDelegate.swift:28 (Sanitizer+0x0001000035b8)\n    #2 _TPA__TFFC9Sanitizer11AppDelegate11applicationFTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP____SbU0_FT_T_ AppDelegate.swift (Sanitizer+0x00010000368e)\n    #3 _TTRXFo___XFdCb___ AppDelegate.swift (Sanitizer+0x0001000033d5)\n    #4 __tsan::invoke_and_release_block(void*) <null>:223 (libclang_rt.tsan_iossim_dynamic.dylib+0x00000005c3fb)\n    #5 _dispatch_client_callout <null>:159 (libdispatch.dylib+0x00000002c0cc)\n  Previous write of size 8 at 0x7d080000d1b0 by thread T2:\n    #0 _TFC9Sanitizer4Monos5valueSi AppDelegate.swift (Sanitizer+0x000100002927)\n    #1 _TFFC9Sanitizer11AppDelegate11applicationFTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP____SbU_FT_T_ AppDelegate.swift:25 (Sanitizer+0x000100003218)\n    #2 _TPA__TFFC9Sanitizer11AppDelegate11applicationFTCSo13UIApplication29didFinishLaunchingWithOptionsGSqGVs10DictionaryVSC29UIApplicationLaunchOptionsKeyP____SbU_FT_T_ AppDelegate.swift (Sanitizer+0x00010000332e)\n    #3 _TTRXFo___XFdCb___ AppDelegate.swift (Sanitizer+0x0001000033d5)\n    #4 __tsan::invoke_and_release_block(void*) <null>:223 (libclang_rt.tsan_iossim_dynamic.dylib+0x00000005c3fb)\n    #5 _dispatch_client_callout <null>:159 (libdispatch.dylib+0x00000002c0cc)\n  Location is heap block of size 24 at 0x7d080000d1a0 allocated by main thread:\n    #0 malloc <null>:223 (libclang_rt.tsan_iossim_dynamic.dylib+0x0000000404ba)\n    #1 swift_slowAlloc <null>:204 (libswiftCore.dylib+0x000000221b28)\n    #2 _TFC9Sanitizer4MonoCfT_S0_ AppDelegate.swift (Sanitizer+0x0001000029e2)\n    #3 _TFC9Sanitizer11AppDelegatecfT_S0_ AppDelegate.swift:22 (Sanitizer+0x000100004415)\n    #4 _TToFC9Sanitizer11AppDelegatecfT_S0_ AppDelegate.swift (Sanitizer+0x000100004546)\n    #5 _UIApplicationMainPreparations <null>:160 (UIKit+0x00000002835d)\n    #6 start <null>:141 (libdyld.dylib+0x00000000468c)\n  Thread T4 (tid=2465144, running) created by thread T-1\n    [failed to restore the stack]\n  Thread T2 (tid=2465142, running) created by thread T-1\n    [failed to restore the stack]\nSUMMARY: ThreadSanitizer: data race AppDelegate.swift in _TFC9Sanitizer4Monos5valueSi\n==================ThreadSanitizer report breakpoint hit. Use 'thread info -s' to get extended information about the report.</details>\n\n\u307e\u305f\u3001Xcode\u306e\u5de6\u30da\u30a4\u30f3\u306b\u3082\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n![Screen Shot 2017-01-02 at 21.56.50.png](https://qiita-image-store.s3.amazonaws.com/0/19398/9e829afa-bb31-6362-a6af-4c0c66ced921.png \"Screen Shot 2017-01-02 at 21.56.50.png\")\n\n\u307e\u305f\u3001\u6b21\u306e\u3088\u3046\u306b\u30ed\u30c3\u30af\u51e6\u7406\u3092\u631f\u3080\u3068\u3001\u540c\u3058\u30ad\u30e5\u30fc\u3064\u307e\u308a\u540c\u3058\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3055\u308c\u308b\u306e\u3067\u3001Thread Sanitizer\u3067\u5f15\u3063\u304b\u304b\u3089\u306a\u304f\u306a\u308b\u3053\u3068\u3082\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\ud83d\udc40\n\n```swift\nclass Mono {\n    private let lockQueue = DispatchQueue(label: \"lock serial queue\")\n    var _value: Int = 0\n    var value: Int {\n        get { return lockQueue.sync { _value } }\n        set { lockQueue.sync { _value = newValue } }\n    }\n}\n```\n\n\u53c2\u8003: [Swift 3\u3067\u306e\u540c\u671f\u51e6\u7406(\u6392\u4ed6\u5236\u5fa1)\u306e\u57fa\u672c - Qiita](http://qiita.com/mono0926/items/45413be5aa64128bc6d2)\n\n\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u306a\u3063\u3066\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3001\u610f\u56f3\u305b\u305a\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3057\u307e\u3063\u305f\u6642\u306e\u691c\u77e5\u306b\u826f\u3044\u611f\u3058\u306b\u4f7f\u3048\u305d\u3046\u3067\u3059\u306d\ud83d\udc40\n\n# \u305d\u306e\u4ed6\u306e\u53c2\u8003\u30ea\u30f3\u30af\n\n- [Advanced Debugging and the Address Sanitizer - WWDC 2015 - Videos - Apple Developer](https://developer.apple.com/videos/play/wwdc2015/413/)\n- [Thread Sanitizer and Static Analysis - WWDC 2016 - Videos - Apple Developer](https://developer.apple.com/videos/play/wwdc2016/412/)\n- [Practical Swift | Eric Downey | Apress](http://www.apress.com/la/book/9781484222799)\n\t- \u5927\u3044\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\n- [\ud83c\udf28Swift\u30ec\u30bf\u30fc #9\ud83c\udf28 \u2013 Swift\u30fbiOS\u30b3\u30e9\u30e0 \u2013 Medium](https://medium.com/swift-column/issue9-bf59df5a53ef#.bpi8zddxb)\n\t- [Understanding Data Race Detection by Implementing it in Swift \u00b7 [Thinking inside a large box];](http://blog.benjamin-encz.de/post/understanding-data-race-detection-by-implementing-in-swift/)\u306e\u8a18\u4e8b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\n- [mookmook radio \u00bb Blog Archive \u00bb \u718a\u8c37\u3068\u7e6a\u9762\u304c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30fc\u30c9\u306e\u5185\u304b\u3089\u8074\u3053\u3048\u3066\u304f\u308b\u58f0\u306b\u8033\u3092\u50be\u3051\u3066\u697d\u3057\u3080\u30e9\u30b8\u30aa #9](http://mookmookradio.podbean.com/e/%e7%86%8a%e8%b0%b7%e3%81%a8%e7%b9%aa%e9%9d%a2%e3%81%8c%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%82%b3%e3%83%bc-1482472780/)\n\t- `unsafe`\u7cfb API\u306e\u8a71\u3057\u3066\u307e\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\n"}