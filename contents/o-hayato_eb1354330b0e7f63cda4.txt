{"tags": ["Java", "Akka", "AkkaTestKit"], "context": " More than 1 year has passed since last update.\n\nAkka\u306eActor\u3092\u30c6\u30b9\u30c8\u3059\u308b\uff08Java\u7de8\uff09\nAkka\u306eActor\u3092\u30c6\u30b9\u30c8\u3057\u305f\u6642\u306e\u30e1\u30e2\u3002\n\u30e1\u30e2\u306a\u306e\u3067\u9593\u9055\u3063\u3066\u305f\u3089\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n\u4e8b\u524d\u6e96\u5099\n\n\u30c6\u30b9\u30c8\u3067\u4f7f\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30ebActor\nstatic class MyActor extends UntypedActor {\n  public void onReceive(Object o) throws Exception {\n    if (o.equals(\"say42\")) {\n      getSender().tell(42, getSelf());\n    } else if (o instanceof Exception) {\n      throw (Exception) o;\n    }\n  }\n  public boolean testMe() { return true; }\n}\n\n\nTIPS\n\n\u9069\u5f53\u306aActor\u3092\u4f5c\u308a\u305f\u3044\n@Test\npublic void testActor() {\n    new JavaTestKit(system) {{\n        final TestProbe worker = new TestProbe(system);\n        ActorRef workerActorRef = worker.ref(); // ActorRef\u3092\u53d6\u5f97\u3067\u304d\u308b\n    }};\n}\n\nActorRef\u3092\u5f15\u6570\u306b\u53d6\u308b\u30e1\u30bd\u30c3\u30c9\u3084\u3001ActorRef\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u3084\u308a\u53d6\u308a\u3059\u308b\u6642\u306b\u4f7f\u3046\n\nActor\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5185\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30c6\u30b9\u30c8\u3059\u308b\n@Test\npublic void demonstrateTestActorRef() {\n  final Props props = Props.create(MyActor.class);\n  final TestActorRef<MyActor> ref = TestActorRef.create(system, props, \"testA\");\n  final MyActor actor = ref.underlyingActor(); // Actor\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53d6\u5f97\n  assertTrue(actor.testMe());\n}\n\n\u901a\u5e38ActorRef\u304b\u3089\u306fActor\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u304c\u3001\nTestActorRef\u3092\u3064\u304b\u3046\u3068Actor\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u53d6\u5f97\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u5358\u4f53\u30c6\u30b9\u30c8\u3059\u308b\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u4fe1\u306e\u30c6\u30b9\u30c8\n@Test\npublic void testActorRef() {\n        new JavaTestKit(system) {{\n            final TestProbe aggregator = new TestProbe(system);\n\n            String message = \"test message\";\n            aggregator.ref().tell(message, getRef());\n            aggregator.expectMsg(message);\n            assertEquals(getRef(), aggregator.lastSender());\n        }};\n}\n\nTestProbe\u3092\u4f7f\u3063\u3066\u9069\u5f53\u306aActor\u3092\u4f5c\u308b\u3002\nActorRef\u3092\u53d6\u5f97\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u3066\u3001expectMsg\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u53d7\u4fe1\u3055\u308c\u305f\u3053\u3068\u306e\u30c6\u30b9\u30c8\u3092\u3059\u308b\u3002\nlastSender()\u3067\u3069\u3053\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u305f\u304b\u3082\u30c6\u30b9\u30c8\u51fa\u6765\u308b\n\nActor\u505c\u6b62\u6319\u52d5\u306e\u30c6\u30b9\u30c8\n@Test\npublic void testActorRef() {\n    new JavaTestKit(system) {{\n      final Props props = Props.create(MyActor.class);\n      final TestActorRef<MyActor> target = TestActorRef.create(system, props, \"testA\");\n\n      final JavaTestKit probe = new JavaTestKit(system);\n      probe.watch(target);\n      target.tell(PoisonPill.getInstance(), ActorRef.noSender());\n      final Terminated msg = probe.expectMsgClass(Terminated.class);\n      assertEquals(msg.getActor(), target);\n    }};\n}\n\ntarget\u3092JavaTestKit\u3067\u76e3\u8996\u3057\u3066\u304a\u3044\u3066\u3001PoisonPill\u3092\u9001\u308b\u3002\n\u305d\u306e\u3042\u3068\u3001Terminated\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\n\u5fdc\u7528\u3059\u308c\u3070\u3001\u4ed6\u306e\u30a2\u30af\u30bf\u30fc\u3092\u6bba\u3059\u3088\u3046\u306aReaper\u306e\u30c6\u30b9\u30c8\u3067\u3082\u4f7f\u3048\u305d\u3046\u3002\n\n\u53c2\u8003\n\nhttp://doc.akka.io/docs/akka/2.4.0/java/testing.html#Built-In_Assertions\nhttp://qiita.com/reoring/items/3baeac37ba0d63f39693\n\n# Akka\u306eActor\u3092\u30c6\u30b9\u30c8\u3059\u308b\uff08Java\u7de8\uff09\n\nAkka\u306eActor\u3092\u30c6\u30b9\u30c8\u3057\u305f\u6642\u306e\u30e1\u30e2\u3002\n\u30e1\u30e2\u306a\u306e\u3067\u9593\u9055\u3063\u3066\u305f\u3089\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n## \u4e8b\u524d\u6e96\u5099\n\n### \u30c6\u30b9\u30c8\u3067\u4f7f\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30ebActor\n\n```java\nstatic class MyActor extends UntypedActor {\n  public void onReceive(Object o) throws Exception {\n    if (o.equals(\"say42\")) {\n      getSender().tell(42, getSelf());\n    } else if (o instanceof Exception) {\n      throw (Exception) o;\n    }\n  }\n  public boolean testMe() { return true; }\n}\n```\n\n## TIPS\n\n### \u9069\u5f53\u306aActor\u3092\u4f5c\u308a\u305f\u3044\n\n```java\n@Test\npublic void testActor() {\n    new JavaTestKit(system) {{\n        final TestProbe worker = new TestProbe(system);\n        ActorRef workerActorRef = worker.ref(); // ActorRef\u3092\u53d6\u5f97\u3067\u304d\u308b\n    }};\n}\n```\n\nActorRef\u3092\u5f15\u6570\u306b\u53d6\u308b\u30e1\u30bd\u30c3\u30c9\u3084\u3001ActorRef\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u3084\u308a\u53d6\u308a\u3059\u308b\u6642\u306b\u4f7f\u3046\n\n## Actor\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5185\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\n```java\n@Test\npublic void demonstrateTestActorRef() {\n  final Props props = Props.create(MyActor.class);\n  final TestActorRef<MyActor> ref = TestActorRef.create(system, props, \"testA\");\n  final MyActor actor = ref.underlyingActor(); // Actor\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53d6\u5f97\n  assertTrue(actor.testMe());\n}\n```\n\n\u901a\u5e38ActorRef\u304b\u3089\u306fActor\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u304c\u3001\nTestActorRef\u3092\u3064\u304b\u3046\u3068Actor\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u53d6\u5f97\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u5358\u4f53\u30c6\u30b9\u30c8\u3059\u308b\n\n### \u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u4fe1\u306e\u30c6\u30b9\u30c8\n```java\n@Test\npublic void testActorRef() {\n        new JavaTestKit(system) {{\n            final TestProbe aggregator = new TestProbe(system);\n\n            String message = \"test message\";\n            aggregator.ref().tell(message, getRef());\n            aggregator.expectMsg(message);\n            assertEquals(getRef(), aggregator.lastSender());\n        }};\n}\n```\n\nTestProbe\u3092\u4f7f\u3063\u3066\u9069\u5f53\u306aActor\u3092\u4f5c\u308b\u3002\nActorRef\u3092\u53d6\u5f97\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u3066\u3001expectMsg\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u53d7\u4fe1\u3055\u308c\u305f\u3053\u3068\u306e\u30c6\u30b9\u30c8\u3092\u3059\u308b\u3002\nlastSender()\u3067\u3069\u3053\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u305f\u304b\u3082\u30c6\u30b9\u30c8\u51fa\u6765\u308b\n\n\n## Actor\u505c\u6b62\u6319\u52d5\u306e\u30c6\u30b9\u30c8\n\n```java\n@Test\npublic void testActorRef() {\n    new JavaTestKit(system) {{\n      final Props props = Props.create(MyActor.class);\n      final TestActorRef<MyActor> target = TestActorRef.create(system, props, \"testA\");\n\n      final JavaTestKit probe = new JavaTestKit(system);\n      probe.watch(target);\n      target.tell(PoisonPill.getInstance(), ActorRef.noSender());\n      final Terminated msg = probe.expectMsgClass(Terminated.class);\n      assertEquals(msg.getActor(), target);\n    }};\n}\n```\n\ntarget\u3092JavaTestKit\u3067\u76e3\u8996\u3057\u3066\u304a\u3044\u3066\u3001PoisonPill\u3092\u9001\u308b\u3002\n\u305d\u306e\u3042\u3068\u3001Terminated\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\n\u5fdc\u7528\u3059\u308c\u3070\u3001\u4ed6\u306e\u30a2\u30af\u30bf\u30fc\u3092\u6bba\u3059\u3088\u3046\u306aReaper\u306e\u30c6\u30b9\u30c8\u3067\u3082\u4f7f\u3048\u305d\u3046\u3002\n\n\n\n## \u53c2\u8003\n* http://doc.akka.io/docs/akka/2.4.0/java/testing.html#Built-In_Assertions\n* http://qiita.com/reoring/items/3baeac37ba0d63f39693\n"}