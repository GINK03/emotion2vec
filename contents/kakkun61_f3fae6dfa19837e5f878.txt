{"context": " More than 1 year has passed since last update.\n\n\u52e2\u3044\u3067\u66f8\u304f\n\u4eca\u304b\u3089\u30b3\u30fc\u30c9\u66f8\u304f\u306e\u306f\u3055\u3059\u304c\u306b\u30e0\u30ea\u306a\u306e\u3067\u3001\u904e\u53bb\u306e\u30b3\u30fc\u30c9\u3092\u5f15\u3063\u5f35\u308a\u51fa\u3057\u3066\u3001\u306a\u3093\u304b\u30b3\u30e1\u30f3\u30c8\u66f8\u304f\u3002\n\u6574\u5f62\u306f\u5f8c\u56de\u3057\u3002\n\n\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u306e\u3088\u3046\u306a\nTaPL 3\u7ae0\u306b\u51fa\u3066\u304d\u305f\u7c21\u6613\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u3068\u3044\u3046\u307b\u3069\u306e\u3082\u306e\u3067\u3082\u306a\u3044\u3082\u306e\u3002\n\u5024\u306f true, false, 0\u3002\u64cd\u4f5c\u306f succ, pred, iszero, if-then-else\u3002\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u8a00\u8a9e\u3002\n\u6b21\u306e\u3088\u3046\u306a\u5f0f\u3060\u3063\u305f\u3089\u3001\u305d\u306e\u6b21\u306e\u3088\u3046\u306a Rust \u306e\u5f0f\u3067\u8868\u308f\u3059\u3068\u3057\u3066\u3001\u305d\u306e Rust \u306e\u5f0f\u3092\u8a55\u4fa1\u3059\u308b\u3002\nif iszero pred succ 0\nthen succ succ succ 0\nelse pred 0\n\n@If(\n    @IsZero(@Pred(@Succ(@Zero))),\n    @Succ(@Succ(@Succ(@Zero))),\n    @Pred(@Zero)\n)\n\n\u5143\u3005\u3053\u306e\u30b3\u30fc\u30c9\u306f Haskell \u3067\u66f8\u3044\u3066\u3066\u3001Rust \u306b\u66f8\u304d\u63db\u3048\u305f\u3093\u3060\u3051\u3069\u3001\u304b\u306a\u308a1\u5bfe1\u3067\u5bfe\u5fdc\u3057\u305f\u3057\u3001Rust \u306f C \u3063\u307d\u3044\u6587\u6cd5\u3092\u6301\u3063\u305f\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u306e\u8a00\u8a9e\u3060\u3068\u3044\u3046\u8a8d\u8b58\u3002\nenum \u306f Haxe \u3068\u4f3c\u305f\u611f\u3058\u3067\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u3092\u4f5c\u308b\u3082\u306e\u3002\u3067\u3001match \u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3057\u3066\u306a\u3093\u3084\u304b\u3093\u3084\u3002\n\u30dd\u30a4\u30f3\u30bf\u30fc\u304c\u8907\u6570\u7a2e\u985e\u3042\u308b\u306e\u306f\u3001\u6700\u521d\u3064\u307e\u3065\u3044\u305f\u3057\u3001\u307e\u3060\u3064\u307e\u3065\u304f\u3068\u601d\u3046\u3002\n\u3061\u306a\u307f\u306b\u30010.8 \u304c\u3082\u3046\u51fa\u3066\u308b\u304b\u3089 0.7 \u306e\u3068\u304d\u306b\u66f8\u3044\u305f\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3082\u3046\u52d5\u304b\u306a\u3044\u304b\u3082\u306d\u3002\n\n\u30b3\u30fc\u30c9\u5168\u6587\n// Rust 0.7\n\nenum Term {\n    True, False, Zero,\n    Succ(@Term), Pred(@Term), IsZero(@Term),\n    If(@Term, @Term, @Term)\n}\n\nenum Value {\n    VTrue, VFalse, NV(@NumberValue)\n}\n\nenum NumberValue {\n    VZero, VSucc(@NumberValue)\n}\n\nfn eval(t: &Term) -> @Value {\n    match *t {\n        True  => @VTrue,\n        False => @VFalse,\n        Zero  => @NV(@VZero),\n        If(c, t, f) =>\n            match eval(c) {\n                @VTrue  => eval(t),\n                @VFalse => eval(f),\n                _       => fail!(\"\\\"if\\\"'s conditon is evaluated in non boolean.\")\n            },\n        Succ(t) =>\n            match eval(t) {\n                @NV(nv) => @NV(@VSucc(nv)),\n                _       => fail!(\"\\\"succ n\\\"'s \\\"n\\\" is evaluated in non number.\")\n            },\n        Pred(t) =>\n            match eval(t) {\n                @NV(@VZero)     => @NV(@VZero),\n                @NV(@VSucc(nv)) => @NV(nv),\n                _               => fail!(\"\\\"pred n\\\"'s \\\"n\\\" is evaluated in non number.\")\n            },\n        IsZero(t) =>\n            match eval(t) {\n                @NV(@VZero)    => @VTrue,\n                @NV(@VSucc(_)) => @VFalse,\n                _              => fail!(\"\\\"iszero n\\\"'s \\\"n\\\" is evaluated in non number.\")\n            }\n    }\n}\n\nfn pretty(v: &Value) -> ~str {\n    match *v {\n        VTrue  => ~\"True\",\n        VFalse => ~\"False\",\n        NV(nv) => fmt!(\"%d\", num(nv)).clone()\n    }\n}\n\nfn num(nv: &NumberValue) -> int {\n    match *nv {\n        VSucc(t) => num(t) + 1,\n        VZero    => 0\n    }\n}\n\nfn main() {\n    println(fmt!(\"%s\", pretty(eval(@True))));\n    println(fmt!(\"%s\", pretty(eval(@Succ(@Zero)))));\n    println(fmt!(\"%s\", pretty(eval(\n            @If(\n                @IsZero(@Pred(@Succ(@Zero))),\n                @Succ(@Succ(@Succ(@Zero))),\n                @Pred(@Zero)\n            )\n    ))));\n    println(fmt!(\"%s\", pretty(eval(\n            @IsZero(@Pred(@If(@True, @Succ(@Zero), @Zero)))\n    ))));\n}\n\nhttps://gist.github.com/kakkun61/6263240\n\n\u53c2\u8003\n\u5143\u306b\u3057\u305f Haskell \u306e\u30b3\u30fc\u30c9\u3002\uff08\u3053\u3063\u3061\u306e\u65b9\u304c\u8aad\u307f\u3084\u3059\u3044\u6c17\u306f\u3057\u3066\u308b\uff09\n# \u52e2\u3044\u3067\u66f8\u304f\n\n\u4eca\u304b\u3089\u30b3\u30fc\u30c9\u66f8\u304f\u306e\u306f\u3055\u3059\u304c\u306b\u30e0\u30ea\u306a\u306e\u3067\u3001\u904e\u53bb\u306e\u30b3\u30fc\u30c9\u3092\u5f15\u3063\u5f35\u308a\u51fa\u3057\u3066\u3001\u306a\u3093\u304b\u30b3\u30e1\u30f3\u30c8\u66f8\u304f\u3002\n\u6574\u5f62\u306f\u5f8c\u56de\u3057\u3002\n\n# \u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u306e\u3088\u3046\u306a\n\n[TaPL](http://www.amazon.co.jp/gp/product/4274069117/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4274069117&linkCode=as2&tag=kakkun61-22) 3\u7ae0\u306b\u51fa\u3066\u304d\u305f\u7c21\u6613\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u3068\u3044\u3046\u307b\u3069\u306e\u3082\u306e\u3067\u3082\u306a\u3044\u3082\u306e\u3002\n\n\u5024\u306f `true`, `false`, `0`\u3002\u64cd\u4f5c\u306f `succ`, `pred`, `iszero`, `if-then-else`\u3002\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u8a00\u8a9e\u3002\n\u6b21\u306e\u3088\u3046\u306a\u5f0f\u3060\u3063\u305f\u3089\u3001\u305d\u306e\u6b21\u306e\u3088\u3046\u306a Rust \u306e\u5f0f\u3067\u8868\u308f\u3059\u3068\u3057\u3066\u3001\u305d\u306e Rust \u306e\u5f0f\u3092\u8a55\u4fa1\u3059\u308b\u3002\n\n```\nif iszero pred succ 0\nthen succ succ succ 0\nelse pred 0\n```\n\n```rust\n@If(\n    @IsZero(@Pred(@Succ(@Zero))),\n    @Succ(@Succ(@Succ(@Zero))),\n    @Pred(@Zero)\n)\n```\n\n\u5143\u3005\u3053\u306e\u30b3\u30fc\u30c9\u306f Haskell \u3067\u66f8\u3044\u3066\u3066\u3001Rust \u306b\u66f8\u304d\u63db\u3048\u305f\u3093\u3060\u3051\u3069\u3001\u304b\u306a\u308a1\u5bfe1\u3067\u5bfe\u5fdc\u3057\u305f\u3057\u3001Rust \u306f C \u3063\u307d\u3044\u6587\u6cd5\u3092\u6301\u3063\u305f\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u306e\u8a00\u8a9e\u3060\u3068\u3044\u3046\u8a8d\u8b58\u3002\n\n`enum` \u306f Haxe \u3068\u4f3c\u305f\u611f\u3058\u3067\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u3092\u4f5c\u308b\u3082\u306e\u3002\u3067\u3001`match` \u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3057\u3066\u306a\u3093\u3084\u304b\u3093\u3084\u3002\n\n\u30dd\u30a4\u30f3\u30bf\u30fc\u304c\u8907\u6570\u7a2e\u985e\u3042\u308b\u306e\u306f\u3001\u6700\u521d\u3064\u307e\u3065\u3044\u305f\u3057\u3001\u307e\u3060\u3064\u307e\u3065\u304f\u3068\u601d\u3046\u3002\n\n\u3061\u306a\u307f\u306b\u30010.8 \u304c\u3082\u3046\u51fa\u3066\u308b\u304b\u3089 0.7 \u306e\u3068\u304d\u306b\u66f8\u3044\u305f\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3082\u3046\u52d5\u304b\u306a\u3044\u304b\u3082\u306d\u3002\n\n# \u30b3\u30fc\u30c9\u5168\u6587\n\n```rust\n// Rust 0.7\n\nenum Term {\n    True, False, Zero,\n    Succ(@Term), Pred(@Term), IsZero(@Term),\n    If(@Term, @Term, @Term)\n}\n \nenum Value {\n    VTrue, VFalse, NV(@NumberValue)\n}\n \nenum NumberValue {\n    VZero, VSucc(@NumberValue)\n}\n \nfn eval(t: &Term) -> @Value {\n    match *t {\n        True  => @VTrue,\n        False => @VFalse,\n        Zero  => @NV(@VZero),\n        If(c, t, f) =>\n            match eval(c) {\n                @VTrue  => eval(t),\n                @VFalse => eval(f),\n                _       => fail!(\"\\\"if\\\"'s conditon is evaluated in non boolean.\")\n            },\n        Succ(t) =>\n            match eval(t) {\n                @NV(nv) => @NV(@VSucc(nv)),\n                _       => fail!(\"\\\"succ n\\\"'s \\\"n\\\" is evaluated in non number.\")\n            },\n        Pred(t) =>\n            match eval(t) {\n                @NV(@VZero)     => @NV(@VZero),\n                @NV(@VSucc(nv)) => @NV(nv),\n                _               => fail!(\"\\\"pred n\\\"'s \\\"n\\\" is evaluated in non number.\")\n            },\n        IsZero(t) =>\n            match eval(t) {\n                @NV(@VZero)    => @VTrue,\n                @NV(@VSucc(_)) => @VFalse,\n                _              => fail!(\"\\\"iszero n\\\"'s \\\"n\\\" is evaluated in non number.\")\n            }\n    }\n}\n \nfn pretty(v: &Value) -> ~str {\n    match *v {\n        VTrue  => ~\"True\",\n        VFalse => ~\"False\",\n        NV(nv) => fmt!(\"%d\", num(nv)).clone()\n    }\n}\n \nfn num(nv: &NumberValue) -> int {\n    match *nv {\n        VSucc(t) => num(t) + 1,\n        VZero    => 0\n    }\n}\n \nfn main() {\n    println(fmt!(\"%s\", pretty(eval(@True))));\n    println(fmt!(\"%s\", pretty(eval(@Succ(@Zero)))));\n    println(fmt!(\"%s\", pretty(eval(\n            @If(\n                @IsZero(@Pred(@Succ(@Zero))),\n                @Succ(@Succ(@Succ(@Zero))),\n                @Pred(@Zero)\n            )\n    ))));\n    println(fmt!(\"%s\", pretty(eval(\n            @IsZero(@Pred(@If(@True, @Succ(@Zero), @Zero)))\n    ))));\n}\n```\n\nhttps://gist.github.com/kakkun61/6263240\n\n# \u53c2\u8003\n\n\u5143\u306b\u3057\u305f Haskell \u306e[\u30b3\u30fc\u30c9](https://gist.github.com/kakkun61/5754414)\u3002\uff08\u3053\u3063\u3061\u306e\u65b9\u304c\u8aad\u307f\u3084\u3059\u3044\u6c17\u306f\u3057\u3066\u308b\uff09", "tags": ["rust0.7"]}