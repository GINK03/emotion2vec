{"tags": ["ProjectEuler", "Python"], "context": " More than 1 year has passed since last update.\n\n\u554f\u984c\n\u5358\u4f4d\u5206\u6570\u3068\u306f\u5206\u5b50\u304c1\u306e\u5206\u6570\u3067\u3042\u308b. \u5206\u6bcd\u304c2\u304b\u308910\u306e\u5358\u4f4d\u5206\u6570\u309210\u9032\u6570\u3067\u8868\u8a18\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308b.\n1/2 = 0.5\n1/3 = 0.(3)\n1/4 = 0.25\n1/5 = 0.2\n1/6 = 0.1(6)\n1/7 = 0.(142857)\n1/8 = 0.125\n1/9 = 0.(1)\n1/10 = 0.1\n0.1(6)\u306f 0.166666... \u3068\u3044\u3046\u6570\u5b57\u3067\u3042\u308a, 1\u6841\u306e\u5faa\u74b0\u7bc0\u3092\u6301\u3064. 1/7 \u306e\u5faa\u74b0\u7bc0\u306f6\u6841\u3042\u308b.\nd < 1000 \u306a\u308b 1/d \u306e\u4e2d\u3067\u5c0f\u6570\u90e8\u306e\u5faa\u74b0\u7bc0\u304c\u6700\u3082\u9577\u304f\u306a\u308b\u3088\u3046\u306a d \u3092\u6c42\u3081\u3088.\nhttp://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%2026\n\n\u56de\u7b54\n(1) 1/d \u306e\u5c0f\u6570\u90e8\u306e\u5faa\u74b0\u7bc0\u306e\u9577\u3055\u306f\u3001d\u304c10^n-1\u3092\u5272\u308a\u5207\u308b\u6700\u5c0f\u306en\u3067\u3042\u308b\u70b9\u3002\n(2) 2,5\u7b49\u306e\u56e0\u5b50\u306f\u5c0f\u6570\u90e8\u306e\u5faa\u74b0\u8aac\u306e\u9577\u3055\u306b\u5bc4\u4e0e\u3057\u306a\u3044\u70b9\u3002\n\u306e2\u70b9\u3092\u524d\u63d0(\u88dc\u8db3\u53c2\u7167)\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002\nget_prime_boolean, get_prime_listm get_primes\u306e\u4e09\u70b9\u306fmymath\u306b\u53ce\u5bb9\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3063\u3061\u3092\u53c2\u7167\u3057\u3066\u3082\u3088\u3044\u3002\n\n\u30b3\u30fc\u30c9\ndef get_prime_boolean(max):\n    bool = [False,False]+[True]*(max-1)\n    bool[4::2] = [False] * (len(bool[4::2]))\n    p = 3\n    p_max = int(math.sqrt(max))+1\n    while p<=p_max:\n        if bool[p]:\n          bool[p*2::p] = [False] * (len(bool[p*2::p]))\n        p+=2\n    return bool\n\ndef get_prime_list(bool):\n    length = len(bool)\n    return [i for i in range(2,length) if bool[i]]\n\ndef get_primes(max):\n    bool = get_prime_boolean(max)\n    list = get_prime_list(bool)\n    return {'bool':bool,'list':list}\n\ndef pe26():\n  MAX = 1000\n  seq = range(MAX)\n  ans = seq[3::10] + seq[7::10] + seq[9::10] + seq[11::10]\n  t = 9\n  while len(ans) > 1:\n    i = 0\n    while i < len(ans):\n      if (t%ans[i]) == 0:\n        ans.pop(i)\n      else:\n        i += 1\n    t = t*10 + 9\n  print ans[0]\n  import math\n  print math.log(t,10)\n\npe26()\n\n\u554f\u984c\n---\n\u5358\u4f4d\u5206\u6570\u3068\u306f\u5206\u5b50\u304c1\u306e\u5206\u6570\u3067\u3042\u308b. \u5206\u6bcd\u304c2\u304b\u308910\u306e\u5358\u4f4d\u5206\u6570\u309210\u9032\u6570\u3067\u8868\u8a18\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308b.\n\n1/2 = 0.5\n1/3 = 0.(3)\n1/4 = 0.25\n1/5 = 0.2\n1/6 = 0.1(6)\n1/7 = 0.(142857)\n1/8 = 0.125\n1/9 = 0.(1)\n1/10 = 0.1\n\n0.1(6)\u306f 0.166666... \u3068\u3044\u3046\u6570\u5b57\u3067\u3042\u308a, 1\u6841\u306e\u5faa\u74b0\u7bc0\u3092\u6301\u3064. 1/7 \u306e\u5faa\u74b0\u7bc0\u306f6\u6841\u3042\u308b.\n\nd < 1000 \u306a\u308b 1/d \u306e\u4e2d\u3067\u5c0f\u6570\u90e8\u306e\u5faa\u74b0\u7bc0\u304c\u6700\u3082\u9577\u304f\u306a\u308b\u3088\u3046\u306a d \u3092\u6c42\u3081\u3088.\nhttp://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%2026\n\n\u56de\u7b54\n---\n(1) 1/d \u306e\u5c0f\u6570\u90e8\u306e\u5faa\u74b0\u7bc0\u306e\u9577\u3055\u306f\u3001d\u304c10^n-1\u3092\u5272\u308a\u5207\u308b\u6700\u5c0f\u306en\u3067\u3042\u308b\u70b9\u3002\n(2) 2,5\u7b49\u306e\u56e0\u5b50\u306f\u5c0f\u6570\u90e8\u306e\u5faa\u74b0\u8aac\u306e\u9577\u3055\u306b\u5bc4\u4e0e\u3057\u306a\u3044\u70b9\u3002\n\u306e2\u70b9\u3092\u524d\u63d0(\u88dc\u8db3\u53c2\u7167)\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002\nget_prime_boolean, get_prime_listm get_primes\u306e\u4e09\u70b9\u306fmymath\u306b\u53ce\u5bb9\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3063\u3061\u3092\u53c2\u7167\u3057\u3066\u3082\u3088\u3044\u3002\n\n\u30b3\u30fc\u30c9\n---\n\n```py\ndef get_prime_boolean(max):\n    bool = [False,False]+[True]*(max-1)\n    bool[4::2] = [False] * (len(bool[4::2]))\n    p = 3\n    p_max = int(math.sqrt(max))+1\n    while p<=p_max:\n        if bool[p]:\n          bool[p*2::p] = [False] * (len(bool[p*2::p]))\n        p+=2\n    return bool\n\ndef get_prime_list(bool):\n    length = len(bool)\n    return [i for i in range(2,length) if bool[i]]\n\ndef get_primes(max):\n    bool = get_prime_boolean(max)\n    list = get_prime_list(bool)\n    return {'bool':bool,'list':list}\n\ndef pe26():\n  MAX = 1000\n  seq = range(MAX)\n  ans = seq[3::10] + seq[7::10] + seq[9::10] + seq[11::10]\n  t = 9\n  while len(ans) > 1:\n    i = 0\n    while i < len(ans):\n      if (t%ans[i]) == 0:\n        ans.pop(i)\n      else:\n        i += 1\n    t = t*10 + 9\n  print ans[0]\n  import math\n  print math.log(t,10)\n\npe26()\n```\n"}