{"context": "Python\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eaKeras\u3092\u7528\u3044\u3066\u3001LSTM\u306e\u5b66\u7fd2\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u3084\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3001\u5b66\u7fd2\u30fb\u8a55\u4fa1\u3092\u5b9f\u88c5\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092TrayiLSTM.py,\n\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u5b9f\u884c\u3059\u308b\u30e1\u30a4\u30f3\u30af\u30e9\u30b9\u3092SingleGame.py\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n`` python:SingleGame.py \nfrom TrainLSTM import LSTM\nif name == 'main':\n    instance1 = LSTM(1, 2)\n    instance1.train()\n``\n'' python:TrainLSTM.py \nrom keras.callbacks import EarlyStopping\nfrom keras.layers.core import Dense, Activation\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential \nimport datetime\nfrom Load import ReadCSV\nfrom Graph import ShowGraph\nfrom Name import GameName\nclass LSTM():\n    def init(self, game, count):\n        self.game = game\n        self.count = count\n        self.time = []\n        print('LSTM:(' + str(game) + ', ' + str(count) + ')')\ndef train(self):\n    print(GameName.gameName[self.game] + ' - No.' + str(self.count+1) + ' training now starts.')\n\n    # Load training data from CSV file\n    loadTrain = ReadCSV(self.game)\n    loadTrain.read()\n    trainInput, trainOutput = loadTrain.reshape()\n    print('Training Data Loading Done.')\n\n    # Creation and training of model\n    hidden_neurons = 100\n    model = Sequential()  \n\n\nmodel.add(LSTM(hidden_neurons, batch_input_shape=(1, 1, 214), stateful=True))\n    model.add(Dense(1))  \n    model.add(Activation(\"sigmoid\"))  \n    model.compile(loss=\"mean_squared_error\", optimizer=\"rmsprop\", metrics=['accuracy'])\n\n    startTime = datetime.datetime.now()\n    early_stopping = EarlyStopping(monitor='val_loss', patience=200)\n    history = model.fit(trainInput, trainOutput, batch_size=1, nb_epoch=1, verbose=1, shuffle=False, validation_data=(trainInput, trainOutput), callbacks=[early_stopping]) \n    endTime = datetime.datetime.now()\n    self.time.append((endTime - startTime).total_seconds())\n\n\nEvaluation of model\n    predict = model.predict(trainInput, batch_size=1, verbose=0)\n\n\nShow graph\n    graph = ShowGraph(self.game, self.count)\n    graph.unvailHalf(trainInput)\n    graph.div(trainInput, trainOutput, predict)\n    graph.show()\n\n\nprint(history)\n''\nPython\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eaKeras\u3092\u7528\u3044\u3066\u3001LSTM\u306e\u5b66\u7fd2\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u3084\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3001\u5b66\u7fd2\u30fb\u8a55\u4fa1\u3092\u5b9f\u88c5\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092TrayiLSTM.py,\n\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u5b9f\u884c\u3059\u308b\u30e1\u30a4\u30f3\u30af\u30e9\u30b9\u3092SingleGame.py\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n`` python:SingleGame.py \nfrom TrainLSTM import LSTM\n\nif __name__ == '__main__':    \n    instance1 = LSTM(1, 2)\n    instance1.train()\n``\n\n\n'' python:TrainLSTM.py \nrom keras.callbacks import EarlyStopping\nfrom keras.layers.core import Dense, Activation  \nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential \nimport datetime\n\nfrom Load import ReadCSV\nfrom Graph import ShowGraph\nfrom Name import GameName\n\nclass LSTM():    \n    def __init__(self, game, count):\n        self.game = game\n        self.count = count\n        self.time = []\n        print('LSTM:(' + str(game) + ', ' + str(count) + ')')\n  \n    def train(self):\n        print(GameName.gameName[self.game] + ' - No.' + str(self.count+1) + ' training now starts.')\n        \n        # Load training data from CSV file\n        loadTrain = ReadCSV(self.game)\n        loadTrain.read()\n        trainInput, trainOutput = loadTrain.reshape()\n        print('Training Data Loading Done.')\n    \n        # Creation and training of model\n        hidden_neurons = 100\n        model = Sequential()  \n#         model.add(LSTM(hidden_neurons, batch_input_shape=(1, 1, 214), stateful=True))\n        model.add(Dense(1))  \n        model.add(Activation(\"sigmoid\"))  \n        model.compile(loss=\"mean_squared_error\", optimizer=\"rmsprop\", metrics=['accuracy'])\n        \n        startTime = datetime.datetime.now()\n        early_stopping = EarlyStopping(monitor='val_loss', patience=200)\n        history = model.fit(trainInput, trainOutput, batch_size=1, nb_epoch=1, verbose=1, shuffle=False, validation_data=(trainInput, trainOutput), callbacks=[early_stopping]) \n        endTime = datetime.datetime.now()\n        self.time.append((endTime - startTime).total_seconds())\n        \n#         Evaluation of model\n        predict = model.predict(trainInput, batch_size=1, verbose=0)\n \n#         Show graph     \n        graph = ShowGraph(self.game, self.count)\n        graph.unvailHalf(trainInput)\n        graph.div(trainInput, trainOutput, predict)\n        graph.show()\n        \n#             print(history)\n''\n", "tags": ["Keras", "Python", "TypeError"]}