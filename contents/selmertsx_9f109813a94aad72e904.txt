{"context": "\n\n\u7d4c\u7def\n\u6614 sidekiq \u3092\u4f7f\u3063\u3066\u3044\u305f\u3068\u304d\u3001\u975e\u540c\u671f\u5b9f\u884c\u3092\u3057\u305f\u3051\u308c\u3070 perform_async\n\u3092\u4f7f\u3046\u306e\u304c\u4e00\u822c\u7684\u3067\u3057\u305f\u3002\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u4eca\u56de\u4f7f\u304a\u3046\u3068\u3057\u305f\u3089\u4f7f\u3048\u305a....\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u8aad\u3093\u3067\u3082\u3001\u30b3\u30fc\u30c9\u8aad\u3093\u3067\u3082perform_async\u306f\u5b58\u5728\u3059\u308b\u3057...\u3002\nsidekiq_options\u3082\u4f7f\u3048\u306a\u3044\u306e\u3067\u56f0\u3063\u305f\u305e\uff01\u3068\u306a\u3063\u3066\u8272\u3005\u8abf\u3079\u307e\u3057\u305f\u3002\n\nsidekiq\u306elog\n\u307e\u305a\u306f\u5b9f\u884c\u6642\u306e log \u773a\u3081\u307e\u3059\u3088\u306d\u3002\u3068\u3044\u3046\u3053\u3068\u3067sidekiq\u306elog\u3092\u898b\u3066\u307f\u307e\u3057\u305f\u3002\n\u6614\u898b\u305f\u306e\u3068\u3001\u7d50\u69cb\u9055\u3046 log\u3063\u307d\u3044\u3002\u3053\u3053\u306b\u3042\u308b retry \u30d1\u30e9\u30e1\u30fc\u30bf\u3092false\u306b\u3057\u305f\u3044\u3002\n\u203b Rails\u306elog\u306f\u3042\u3093\u307e\u308a\u4f7f\u3048\u305d\u3046\u306b\u7121\u304b\u3063\u305f\u306e\u3067\u6d88\u3057\u3066\u307e\u3059\u3002\n\"lpush\" \"queue:default\" \"{\\\"class\\\":\\\n\"ActiveJob::QueueAdapters::SidekiqAdapter::JobWrapper\\\",\n\\\"wrapped\\\":\\\"MyJob\\\",\\\"queue\\\":\\\"default\\\",\\\"args\\\":\n[{\\\"job_class\\\":\\\"IntroduceNotifier\\\",\n\\\"job_id\\\":\\\"3829b424-7c3c-4f52-85ee-5b1d076a7937\\\"\n,\\\"queue_name\\\":\\\"default\\\",\n\\\"priority\\\":null,\\\"arguments\\\":[{\\\"subject_id\\\":1,\n\\\"branch_ids\\\":[1,2,5],\\\"_aj_symbol_keys\\\":[\\\"subject_id\\\",\n\\\"branch_ids\\\"]}],\\\"locale\\\":\\\"ja\\\"}],\n\\\"retry\\\":true,\\\"jid\\\":\\\"b3aefff2e53910b0e3862073\\\",\n\\\"created_at\\\":1487839214.219861,\n\\\"enqueued_at\\\":1487839214.220073}\"\n1487839214.221975 [0 127.0.0.1:64915] \"exec\"\n\n\nActiveJob\nActiveJob\u306e\u69cb\u6210\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nAcriveJob\n\n\nqueue_adapter.rb (\u3069\u306eadapter\u3092\u6307\u5b9a\u3059\u308b\u304b\u6c7a\u3081\u308b\u5f79\u5272)\nqueue_adapters.rb (\u5bfe\u5fdc\u3057\u3066\u3044\u308b adapter\u3092\u6301\u3063\u3066\u3044\u308b. resque\u3068\u304b)\n\n\nsidekiq_adapter.rb (sidekiq\u306eadapter )\nothers...\n\n\ncore.rb ( job\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u5f15\u6570\u3092\u6301\u3064 )\nconfigured_job.rb ( job\u306b\u5bfe\u3059\u308b wrapper\u3063\u307d\u3044\uff1f )\nencueuing.rb ( \u9069\u5207\u306aadapter\u306bqueuing\u3059\u308b\u5f79\u5272\u3092\u6301\u3064 )\nothers...\n\n\n\n\n\u8aad\u3080\u3079\u304d\u30dd\u30a4\u30f3\u30c8\njob\u306e\u5b9f\u884c\u306f\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u884c\u3046\u3002\nMyJob.set(wait: 10).perform_later\n\u3068\u306a\u308b\u3068\u3001set \u3067\u4f55\u306e object\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u304b\u3001\u628a\u63e1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\ngrep\u3057\u3066\u307f\u308b\u3068\u3001core.rb \u304c set method\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u3063\u305f.\n\ncore.rb\nmodule ActiveJob\n  module Core\n      ...\n      def set(options = {})\n        ConfiguredJob.new(self, options)\n      end\n\ncore.rb \u306f ConfiguredJob\u3092\u8fd4\u3057\u3066\u3044\u308b\u3063\u307d\u3044\u3067\u3059\u306d\u3002\n\nconfigured_job.rb\nmodule ActiveJob\n  class ConfiguredJob #:nodoc:\n    ...\n    def perform_later(*args)\n      @job_class.new(*args).enqueue @options\n    end\n\n\u3053\u3053\u3067\u3001job_class\u3063\u3066\u306a\u3093\u3060\u308d\u3063\u3066\u306a\u3063\u305f\u306e\u3067\u3001\u8af8\u3005\u78ba\u8a8d\u3002\nconsole\u3067\u78ba\u8a8d\u3057\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n[7] pry(main)> job = MyJob.set(wait: 10)\n=> #<ActiveJob::ConfiguredJob:0x007fcef2e5bd98\n @job_class=MyJob,\n @options={:wait=>10}>\n\n\u81ea\u5206\u305f\u3061\u3067\u8a2d\u5b9a\u3057\u305f MyJob\u3089\u3057\u3044\u3002\n\u3067\u3001MyJob\u306fApplicationJob\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u3001\nActiveJob::Base\u3067include\u3055\u308c\u3066\u3044\u308b method\u3092\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\n\u3068\u3044\u3046\u3068\u3053\u308d\u304b\u3089\u3001\u6b21\u306b\u8aad\u3080\u3079\u304d\u30dd\u30a4\u30f3\u30c8\u306f ActiveJob::Base\u3067\ninclude\u3055\u308c\u3066\u3044\u308bmodule\u306e\u4e2d\u3067 enqueue method\u3092\u6301\u3064\u3084\u3064\u306b\u306a\u308a\u307e\u3059\u3002\n\nenqueuing.rb\nmodule ActiveJob\n  module Enqueuing\n    def enqueue(options = {})\n      ....\n      run_callbacks :enqueue do\n        if scheduled_at\n          self.class.queue_adapter.enqueue_at self, scheduled_at\n        else\n          self.class.queue_adapter.enqueue self\n        end\n      end\n      self\n    end\n\nenqueuing.rb\u3092\u898b\u308b\u3068\u3001 queue_adapter\u306eenqueue method\u3092\u4f7f\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\u3068\u306e\u3053\u3068\u3067\u3001\u3088\u3046\u3084\u304f sidekiq_adapter\u3092\u898b\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u305f\u3002\n\nsidekiq_adapters.rb \u3068 sidekiq/client.rb\nmodule ActiveJob\n  module QueueAdapters\n    class SidekiqAdapter\n      def enqueue(job) #:nodoc:\n        #Sidekiq::Client does not support symbols as keys\n        job.provider_job_id = Sidekiq::Client.push \\\n          \"class\"   => JobWrapper,\n          \"wrapped\" => job.class.to_s,\n          \"queue\"   => job.queue_name,\n          \"args\"    => [ job.serialize ]\n      end\n      class JobWrapper #:nodoc:\n        include Sidekiq::Worker\n\n        def perform(job_data)\n          Base.execute job_data.merge(\"provider_job_id\" => jid)\n        end\n      end\n    end\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001serialize\u3059\u308b\u969b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b retry\u3092\u5165\u308c\u3089\u308c\u308c\u3070\u826f\u3055\u305d\u3046\u3002\n\u307e\u3067\u884c\u3063\u305f\u3002\u3068\u3053\u308d\u3067\u3001exception.rb \u3092\u8aad\u3093\u3060\u3089\u4e0b\u8a18\u306e\u3053\u3068\u304c\u5206\u304b\u3063\u305f\u3002\n\n\u8ffd\u8a18\nexception.rb \u3092\u8aad\u3093\u3060\u3068\u3053\u308d\u2193\u307f\u305f\u3044\u306a\u8a18\u8ff0\u304c\u3002\n\u3061\u306a\u307f\u306b master branch\u306b\u3057\u304b\u3044\u306a\u3044\u3063\u307d\u3044\u3002\n\u3053\u3044\u3064\u304cmerge\u3055\u308c\u305f\u3089\u3044\u3044\u306a\u3041\n# Discard the job with no attempts to retry, if the exception is raised. This is useful when the subject of the job,\n# like an Active Record, is no longer available, and the job is thus no longer relevant.\n#\n# ==== Example\n#\n#  class SearchIndexingJob < ActiveJob::Base\n#    discard_on ActiveJob::DeserializationError\n#\n#    def perform(record)\n#      # Will raise ActiveJob::DeserializationError if the record can't be deserialized\n#    end\n#  end\n\ndef discard_on(exception)\n  rescue_from exception do |error|\n    logger.error \"Discarded #{self.class} due to a #{exception}. The original exception was #{error.cause.inspect}.\"\n  end\nend\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4e0b\u306e\u3088\u3046\u306b job\u3092\u66f8\u3051\u3070\u826f\u3055\u305d\u3046\u3002\n# frozen_string_literal: true\nclass MyJob < ApplicationJob\n  discard_on StandardError\n\n\n\u304a\u307e\u3051\n\nqueue_adapter.rb\nsidekiq\u306eadapter\u3092\u6307\u5b9a\u3059\u308bclass\u3002\nrails\u306eapplication.rb\u3067 config.active_job.queue_adapter = :sidekiq \n\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f\u3053\u3053\u306e\u5024\u3002\n      def queue_adapter=(name_or_adapter_or_class)\n        self._queue_adapter = interpret_adapter(name_or_adapter_or_class)\n      end\n\n      private\n\n        def interpret_adapter(name_or_adapter_or_class)\n          case name_or_adapter_or_class\n          when Symbol, String\n            ActiveJob::QueueAdapters.lookup(name_or_adapter_or_class).new\n          else\n            if queue_adapter?(name_or_adapter_or_class)\n              name_or_adapter_or_class\n            else\n              raise ArgumentError\n            end\n          end\n        end\n\n## \u7d4c\u7def\n\u6614 sidekiq \u3092\u4f7f\u3063\u3066\u3044\u305f\u3068\u304d\u3001\u975e\u540c\u671f\u5b9f\u884c\u3092\u3057\u305f\u3051\u308c\u3070 perform_async\n\u3092\u4f7f\u3046\u306e\u304c\u4e00\u822c\u7684\u3067\u3057\u305f\u3002\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u4eca\u56de\u4f7f\u304a\u3046\u3068\u3057\u305f\u3089\u4f7f\u3048\u305a....\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u8aad\u3093\u3067\u3082\u3001\u30b3\u30fc\u30c9\u8aad\u3093\u3067\u3082perform_async\u306f\u5b58\u5728\u3059\u308b\u3057...\u3002\nsidekiq_options\u3082\u4f7f\u3048\u306a\u3044\u306e\u3067\u56f0\u3063\u305f\u305e\uff01\u3068\u306a\u3063\u3066\u8272\u3005\u8abf\u3079\u307e\u3057\u305f\u3002\n\n## sidekiq\u306elog\n\n\u307e\u305a\u306f\u5b9f\u884c\u6642\u306e log \u773a\u3081\u307e\u3059\u3088\u306d\u3002\u3068\u3044\u3046\u3053\u3068\u3067sidekiq\u306elog\u3092\u898b\u3066\u307f\u307e\u3057\u305f\u3002\n\u6614\u898b\u305f\u306e\u3068\u3001\u7d50\u69cb\u9055\u3046 log\u3063\u307d\u3044\u3002\u3053\u3053\u306b\u3042\u308b retry \u30d1\u30e9\u30e1\u30fc\u30bf\u3092false\u306b\u3057\u305f\u3044\u3002\n\n\u203b Rails\u306elog\u306f\u3042\u3093\u307e\u308a\u4f7f\u3048\u305d\u3046\u306b\u7121\u304b\u3063\u305f\u306e\u3067\u6d88\u3057\u3066\u307e\u3059\u3002\n\n```\n\"lpush\" \"queue:default\" \"{\\\"class\\\":\\\n\"ActiveJob::QueueAdapters::SidekiqAdapter::JobWrapper\\\",\n\\\"wrapped\\\":\\\"MyJob\\\",\\\"queue\\\":\\\"default\\\",\\\"args\\\":\n[{\\\"job_class\\\":\\\"IntroduceNotifier\\\",\n\\\"job_id\\\":\\\"3829b424-7c3c-4f52-85ee-5b1d076a7937\\\"\n,\\\"queue_name\\\":\\\"default\\\",\n\\\"priority\\\":null,\\\"arguments\\\":[{\\\"subject_id\\\":1,\n\\\"branch_ids\\\":[1,2,5],\\\"_aj_symbol_keys\\\":[\\\"subject_id\\\",\n\\\"branch_ids\\\"]}],\\\"locale\\\":\\\"ja\\\"}],\n\\\"retry\\\":true,\\\"jid\\\":\\\"b3aefff2e53910b0e3862073\\\",\n\\\"created_at\\\":1487839214.219861,\n\\\"enqueued_at\\\":1487839214.220073}\"\n1487839214.221975 [0 127.0.0.1:64915] \"exec\"\n```\n\n## ActiveJob\n\nActiveJob\u306e\u69cb\u6210\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n- AcriveJob\n  - queue_adapter.rb (\u3069\u306eadapter\u3092\u6307\u5b9a\u3059\u308b\u304b\u6c7a\u3081\u308b\u5f79\u5272)\n  - queue_adapters.rb (\u5bfe\u5fdc\u3057\u3066\u3044\u308b adapter\u3092\u6301\u3063\u3066\u3044\u308b. resque\u3068\u304b)\n      - sidekiq_adapter.rb (sidekiq\u306eadapter )\n      - others...\n  - core.rb ( job\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u5f15\u6570\u3092\u6301\u3064 )\n  - configured_job.rb ( job\u306b\u5bfe\u3059\u308b wrapper\u3063\u307d\u3044\uff1f )\n  - encueuing.rb ( \u9069\u5207\u306aadapter\u306bqueuing\u3059\u308b\u5f79\u5272\u3092\u6301\u3064 )\n  - others...\n\n## \u8aad\u3080\u3079\u304d\u30dd\u30a4\u30f3\u30c8\njob\u306e\u5b9f\u884c\u306f\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u884c\u3046\u3002\n`MyJob.set(wait: 10).perform_later `\n\n\u3068\u306a\u308b\u3068\u3001set \u3067\u4f55\u306e object\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u304b\u3001\u628a\u63e1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\ngrep\u3057\u3066\u307f\u308b\u3068\u3001core.rb \u304c set method\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u3063\u305f.\n\n### core.rb\n```ruby\nmodule ActiveJob\n  module Core\n      ...\n      def set(options = {})\n        ConfiguredJob.new(self, options)\n      end\n```\n\ncore.rb \u306f ConfiguredJob\u3092\u8fd4\u3057\u3066\u3044\u308b\u3063\u307d\u3044\u3067\u3059\u306d\u3002\n\n### configured_job.rb\n\n```ruby\nmodule ActiveJob\n  class ConfiguredJob #:nodoc:\n    ...\n    def perform_later(*args)\n      @job_class.new(*args).enqueue @options\n    end\n```\n\n\u3053\u3053\u3067\u3001job_class\u3063\u3066\u306a\u3093\u3060\u308d\u3063\u3066\u306a\u3063\u305f\u306e\u3067\u3001\u8af8\u3005\u78ba\u8a8d\u3002\n\nconsole\u3067\u78ba\u8a8d\u3057\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```ruby\n[7] pry(main)> job = MyJob.set(wait: 10)\n=> #<ActiveJob::ConfiguredJob:0x007fcef2e5bd98\n @job_class=MyJob,\n @options={:wait=>10}>\n```\n\n\u81ea\u5206\u305f\u3061\u3067\u8a2d\u5b9a\u3057\u305f MyJob\u3089\u3057\u3044\u3002\n\u3067\u3001MyJob\u306fApplicationJob\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u3001\nActiveJob::Base\u3067include\u3055\u308c\u3066\u3044\u308b method\u3092\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u3068\u3053\u308d\u304b\u3089\u3001\u6b21\u306b\u8aad\u3080\u3079\u304d\u30dd\u30a4\u30f3\u30c8\u306f ActiveJob::Base\u3067\ninclude\u3055\u308c\u3066\u3044\u308bmodule\u306e\u4e2d\u3067 enqueue method\u3092\u6301\u3064\u3084\u3064\u306b\u306a\u308a\u307e\u3059\u3002\n\n### enqueuing.rb\n\n```ruby\nmodule ActiveJob\n  module Enqueuing\n    def enqueue(options = {})\n      ....\n      run_callbacks :enqueue do\n        if scheduled_at\n          self.class.queue_adapter.enqueue_at self, scheduled_at\n        else\n          self.class.queue_adapter.enqueue self\n        end\n      end\n      self\n    end\n```\n\nenqueuing.rb\u3092\u898b\u308b\u3068\u3001 queue_adapter\u306eenqueue method\u3092\u4f7f\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\u3068\u306e\u3053\u3068\u3067\u3001\u3088\u3046\u3084\u304f sidekiq_adapter\u3092\u898b\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u305f\u3002\n\n### sidekiq_adapters.rb \u3068 sidekiq/client.rb\n\n```ruby\nmodule ActiveJob\n  module QueueAdapters\n    class SidekiqAdapter\n      def enqueue(job) #:nodoc:\n        #Sidekiq::Client does not support symbols as keys\n        job.provider_job_id = Sidekiq::Client.push \\\n          \"class\"   => JobWrapper,\n          \"wrapped\" => job.class.to_s,\n          \"queue\"   => job.queue_name,\n          \"args\"    => [ job.serialize ]\n      end\n      class JobWrapper #:nodoc:\n        include Sidekiq::Worker\n\n        def perform(job_data)\n          Base.execute job_data.merge(\"provider_job_id\" => jid)\n        end\n      end\n    end\n```\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001serialize\u3059\u308b\u969b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b retry\u3092\u5165\u308c\u3089\u308c\u308c\u3070\u826f\u3055\u305d\u3046\u3002\n\u307e\u3067\u884c\u3063\u305f\u3002\u3068\u3053\u308d\u3067\u3001exception.rb \u3092\u8aad\u3093\u3060\u3089\u4e0b\u8a18\u306e\u3053\u3068\u304c\u5206\u304b\u3063\u305f\u3002\n\n## \u8ffd\u8a18\nexception.rb \u3092\u8aad\u3093\u3060\u3068\u3053\u308d\u2193\u307f\u305f\u3044\u306a\u8a18\u8ff0\u304c\u3002\n\u3061\u306a\u307f\u306b master branch\u306b\u3057\u304b\u3044\u306a\u3044\u3063\u307d\u3044\u3002\n\u3053\u3044\u3064\u304cmerge\u3055\u308c\u305f\u3089\u3044\u3044\u306a\u3041\n\n```ruby\n# Discard the job with no attempts to retry, if the exception is raised. This is useful when the subject of the job,\n# like an Active Record, is no longer available, and the job is thus no longer relevant.\n#\n# ==== Example\n#\n#  class SearchIndexingJob < ActiveJob::Base\n#    discard_on ActiveJob::DeserializationError\n#\n#    def perform(record)\n#      # Will raise ActiveJob::DeserializationError if the record can't be deserialized\n#    end\n#  end\n\ndef discard_on(exception)\n  rescue_from exception do |error|\n    logger.error \"Discarded #{self.class} due to a #{exception}. The original exception was #{error.cause.inspect}.\"\n  end\nend\n\n```\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4e0b\u306e\u3088\u3046\u306b job\u3092\u66f8\u3051\u3070\u826f\u3055\u305d\u3046\u3002\n\n```ruby\n# frozen_string_literal: true\nclass MyJob < ApplicationJob\n  discard_on StandardError\n```\n\n## \u304a\u307e\u3051\n### queue_adapter.rb\nsidekiq\u306eadapter\u3092\u6307\u5b9a\u3059\u308bclass\u3002\nrails\u306eapplication.rb\u3067 `config.active_job.queue_adapter = :sidekiq` \n\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f\u3053\u3053\u306e\u5024\u3002\n\n```ruby\n      def queue_adapter=(name_or_adapter_or_class)\n        self._queue_adapter = interpret_adapter(name_or_adapter_or_class)\n      end\n\n      private\n\n        def interpret_adapter(name_or_adapter_or_class)\n          case name_or_adapter_or_class\n          when Symbol, String\n            ActiveJob::QueueAdapters.lookup(name_or_adapter_or_class).new\n          else\n            if queue_adapter?(name_or_adapter_or_class)\n              name_or_adapter_or_class\n            else\n              raise ArgumentError\n            end\n          end\n        end\n```\n", "tags": ["Rails", "ActiveJob", "sidekiq", "Ruby"]}