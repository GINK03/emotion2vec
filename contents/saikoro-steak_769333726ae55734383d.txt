{"context": "\n\n\u6982\u8981\nping\u306e\u5b9f\u88c5\u3092\u901a\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u306e\u6a29\u9650\u3092\u52c9\u5f37\u3057\u305f\u5099\u5fd8\u9332\u3002\n\n\u7591\u554f\nping\u30b3\u30de\u30f3\u30c9\u306fset-user-ID\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u822c\u30e6\u30fc\u30b6\u30fc\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u3067\u3082\u5b9f\u52b9ID\u304croot\u3067\u5b9f\u884c\u3055\u308c\u308b\u306f\u305a\u3060\u3068\u601d\u3063\u3066\u3044\u305f\u3002\u3068\u3053\u308d\u304cps\u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3057\u305f\u306a\u3089\u3070\u4ee5\u4e0b\u306e\u69d8\u306a\u7d50\u679c\u306b\u306a\u3063\u305f\u3002\u305d\u3046\u3001\u5b9f\u52b9ID\u304c\u4e00\u822c\u30e6\u30fc\u30b6\u30fc\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u305f\u3002\u306a\u305c\u3060\u308d\u3046\u30fb\u30fb\uff1f\n\n/bin/ping\n[root@localhost iputils-s20071127]# ll /bin/ping\n-rwsr-xr-x. 1 root root 40760  9\u6708 26 14:35 2013 /bin/ping\n\nset-user-ID\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u5b9f\u52b9ID\u304croot\u3067ping\u304c\u5b9f\u884c\u3055\u308c\u308b\u306f\u305a\u3060\u3068\u601d\u3063\u3066\u3044\u305f\u30fb\u30fb\n[vagrant@localhost ~]$ id\nuid=500(vagrant) gid=500(vagrant) \u6240\u5c5e\u30b0\u30eb\u30fc\u30d7=500(vagrant)\n\n[vagrant@localhost ~]$ /bin/ping 192.168.33.20\nPING 192.168.33.20 (192.168.33.20) 56(84) bytes of data.\n64 bytes from 192.168.33.20: icmp_seq=1 ttl=64 time=0.021 ms\n64 bytes from 192.168.33.20: icmp_seq=2 ttl=64 time=0.034 ms\n\nping\u5b9f\u884c\u3057\u305f\u307e\u307e\u3001\u4ee5\u4e0b\u3092\u5b9f\u884c\n[vagrant@localhost net]$ ps -eo uid,euid,fuid,suid,command  | grep [p]ing\n  500   500   500   500 ping 192.168.33.10\n\n\u5404ID\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3059\u3079\u3066vagrant\u30e6\u30fc\u30b6\u30fc\u306e\u5024\u306b\u3002ping\u306fset-user-ID\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u306e\u3067root\u306e\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3001\u3057\u304b\u3057vagrant\u30e6\u30fc\u30b6\u30fc\u306e\u5024\u3002\u306a\u305c\u3060\u308d\u3046\uff1f\n\n\u8a66\u3057\u305f\u74b0\u5883\n\nVagrant on Mac\nping\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u5165\u3063\u3066\u3044\u308bsrpm\u3092\u53d6\u5f97\u3002\n\n[root@localhost iputils-s20071127]# cat /etc/redhat-release\nCentOS release 6.5 (Final)\n[root@localhost iputils-s20071127]# which ping\n/bin/ping\n[root@localhost iputils-s20071127]# rpm -qf /bin/ping\niputils-20071127-17.el6_4.2.x86_64\n[root@localhost iputils-s20071127]#\n\n\n\u3000\u51e6\u7406\u307f\u3066\u307f\u305f\nping\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nping.c\n\nint main(int argc, char **argv)\n{\n  .\n  .\n  . \n  icmp_sock = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);\n\n  socket_errno = errno;\n\n  uid = getuid();\n  if (setuid(uid)) {\n    perror(\"ping: setuid\");\n    exit(-1);\n  }\n  .\n  .\n  .\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308c\u3070\u308f\u304b\u308a\u307e\u3057\u305f\u3002socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u5b9f\u884c\u3057\u305f\u5f8c\u306bgetuid\u3067\u81ea\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u30e6\u30fc\u30b6\u30fcID\u3092\u53d6\u5f97\u3057\u3066\u3001setuid\u3067\u81ea\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u52b9\u30e6\u30fc\u30b6\u30fcID\u3092\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\u3088\u3063\u3066ps\u30b3\u30de\u30f3\u30c9\u3067\u306fsetuid\u3055\u308c\u305f\u5f8c\u306e\u5024(vagrant\u30e6\u30fc\u30b6\u30fc)\u304c\u898b\u3048\u3066\u3044\u305f\u308f\u3051\u3067\u3059\u3002\n\nCentOS7\u306ePing\n[root@localhost iputils-s20121221]# cat /etc/redhat-release\nCentOS Linux release 7.1.1503 (Core)\n[root@localhost iputils-s20121221]# uname -r\n3.10.0-229.el7.x86_64\n[root@localhost iputils-s20121221]# which ping\n/bin/ping\n[root@localhost iputils-s20121221]# ll /bin/ping\n-rwxr-xr-x. 1 root root 44896  6\u6708 10  2014 /bin/ping\n\n\u4ed6\u306b\u3082centos7\u306e\u74b0\u5883\u3067\u898b\u3066\u307f\u307e\u3057\u305f\u3002\u3059\u308b\u3068centos7\u306eping\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3067\u306f\u30b1\u30fc\u30d1\u30d3\u30ea\u30c6\u30a3\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\nping.c\n        limit_capabilities();\n\n#ifdef USE_IDN\n        setlocale(LC_ALL, \"\");\n#endif\n\n        enable_capability_raw();\n\n        icmp_sock = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);\n        socket_errno = errno;\n\n        disable_capability_raw();\n\n\nsocket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u5b9f\u884c\u3059\u308b\u307e\u3048\u306benable_capability_raw()\u3067CAP_NET_RAW\u6a29\u9650\u3060\u3051\u3092\u4e0e\u3048\u3066\u3001socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u5f8c\u306bdisable_capability_raw()\u3067\u6a29\u9650\u3092\u30af\u30ea\u30a2\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3088\u3063\u3066set-user-ID\u3057\u3066\u3044\u306a\u3044\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3067\u3082socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u5b9f\u884c\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3057\u304b\u3057\u306a\u305ccent6\u3068cent7\u3067ping\u306e\u4f5c\u308a\u304c\u9055\u3046\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff1f\u3093\u30fc\u3001\u306a\u305c\u3067\u3057\u3087\u3046\u304b\u3002\u4e21\u8005\u3092\u898b\u308b\u3068cent\uff17\u306e\u307b\u3046\u304c\u6a29\u9650\u3092\u6700\u5c0f\u5316\u3067\u304d\u3066\u3044\u308b\u306e\u3067\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u7684\u306b\u671b\u307e\u3057\u3044\u3068\u3044\u3048\u307e\u3059\u3002\n\n\u95a2\u4fc2\u3042\u308a\u305d\u3046\u306a\u30ab\u30fc\u30cd\u30eb\u306e\u51e6\u7406\u3092\u307f\u3066\u307f\u305f\n\u30ab\u30fc\u30cd\u30eb:linux-2.6.32\n\nset-user-ID\u3092\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u7b87\u6240\nsys_execve() \u2192 do_execve \u304b\u3089\u306e\u5148\u3067\u547c\u3070\u308c\u3066\u3044\u308b\u3002\n\nfs/exec.c\n/*\n * Fill the binprm structure from the inode.\n * Check permissions, then read the first 128 (BINPRM_BUF_SIZE) bytes\n *\n * This may be called multiple times for binary chains (scripts for example).\n */\nint prepare_binprm(struct linux_binprm *bprm)\n{\n        umode_t mode;\n        struct inode * inode = bprm->file->f_path.dentry->d_inode;\n        int retval;\n\n        mode = inode->i_mode;\n        if (bprm->file->f_op == NULL)\n                return -EACCES;\n\n        /* clear any previous set[ug]id data from a previous binary */\n        bprm->cred->euid = current_euid();\n        bprm->cred->egid = current_egid();\n\n        if (!(bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID)) {\n                /* Set-uid? */\n                if (mode & S_ISUID) {\n                        bprm->per_clear |= PER_CLEAR_ON_SETID;\n                        bprm->cred->euid = inode->i_uid;\n                }\n\n                /* Set-gid? */\n                /*\n                 * If setgid is set but no group execute bit then this\n                 * is a candidate for mandatory locking, not a setgid\n                 * executable.\n                 */\n                if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {\n                        bprm->per_clear |= PER_CLEAR_ON_SETID;\n                        bprm->cred->egid = inode->i_gid;\n                }\n        }\n\n        /* fill in binprm security blob */\n        retval = security_bprm_set_creds(bprm);\n        if (retval)\n                return retval;\n        bprm->cred_prepared = 1;\n\n        memset(bprm->buf, 0, BINPRM_BUF_SIZE);\n        return kernel_read(bprm->file, 0, bprm->buf, BINPRM_BUF_SIZE);\n}\n\n\nlinux_binprm\n\ninclude/linux/binfmts.h\n/*\n * This structure is used to hold the arguments that are used when loading binaries.\n */\nstruct linux_binprm{\n        char buf[BINPRM_BUF_SIZE];\n#ifdef CONFIG_MMU\n        struct vm_area_struct *vma;\n#else\n# define MAX_ARG_PAGES  32\n        struct page *page[MAX_ARG_PAGES];\n#endif\n        struct mm_struct *mm;\n        unsigned long p; /* current top of mem */\n        unsigned int\n                cred_prepared:1,/* true if creds already prepared (multiple\n                                 * preps happen for interpreters) */\n                cap_effective:1;/* true if has elevated effective capabilities,\n                                 * false if not; except for init which inherits\n                                 * its parent's caps anyway */\n#ifdef __alpha__\n        unsigned int taso:1;\n#endif\n        unsigned int recursion_depth;\n        struct file * file;\n        struct cred *cred;      /* new credentials */\n        int unsafe;             /* how unsafe this exec is (mask of LSM_UNSAFE_*) */\n        unsigned int per_clear; /* bits to clear in current->personality */\n        int argc, envc;\n        char * filename;        /* Name of binary as seen by procps */\n        char * interp;          /* Name of the binary really executed. Most\n                                   of the time same as filename, but could be\n                                   different for binfmt_{misc,script} */\n        unsigned interp_flags;\n        unsigned interp_data;\n        unsigned long loader, exec;\n};\n\n\nset-user-ID\u306e\u5024\u3092\u53d6\u5f97\u3057\u3066linux_binprm\u306e\u69cb\u9020\u4f53\u306b\u5024\u3092\u5165\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002linux_binprm\u306f\u30b3\u30e1\u30f3\u30c8\u306b\u304b\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001execve\u3059\u308b\u6642\u306e\u5404\u7a2e\u60c5\u5831\u3092\u5165\u308c\u308b\u69cb\u9020\u4f53\u307f\u305f\u3044\u3067\u3059\u3002\u305d\u306e\u5f8c\u306bsecurity_bprm_set_creds\u3067\u6a29\u9650\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3057\u305f(\u30b1\u30fc\u30d1\u30d3\u30ea\u30c6\u30a3\u3082\u542b\u3080)\u3002\u3053\u306e\u5148\u3067\u901a\u5e38\u30e6\u30fc\u30b6\u30fc\u306e\u5b9f\u52b9ID\u3092set-user-ID\u306e\u5024\u3067\u6a29\u73fe\u306e\u4e0a\u66f8\u304d\u3092\u3057\u3066\u3044\u308b\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\uff1f\uff1fsecurity_bprm_set_creds\u306e\u5148\u306f\u3044\u3064\u304b\u8aad\u3093\u3067\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u95a2\u4fc2\u3042\u308a\u305d\u3046\u306a\u7b87\u6240\u3092\u898b\u3066\u307f\u307e\u3057\u305f\u3002\ntask_struc\u69cb\u9020\u4f53\u304b\u3089\u3072\u3082\u4ed8\u304f\u5404ID\u3002\n\ninclude/linux/cred.h\nstruct cred {\n\u30fb\n\u30fb\n\u30fb\n        uid_t           uid;            /* real UID of the task */\n        gid_t           gid;            /* real GID of the task */\n        uid_t           suid;           /* saved UID of the task */\n        gid_t           sgid;           /* saved GID of the task */\n        uid_t           euid;           /* effective UID of the task */\n        gid_t           egid;           /* effective GID of the task */\n        uid_t           fsuid;          /* UID for VFS ops */\n        gid_t           fsgid;          /* GID for VFS ops */\n        unsigned        securebits;     /* SUID-less security management \n\u30fb\n\u30fb\n\u30fb\n}\n\n\n\u3069\u3053\u304b\u3067\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u304b\u306a\u30fc\u3068\u601d\u3063\u3066\u307f\u3066\u307f\u307e\u3057\u305f\u3002do_execve()\u306e\u3055\u3089\u306b\u5148\u3067ELF\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u306bELF\u3092\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u3059\u308b\u51e6\u7406\u306e\u9014\u4e2d\u3067\u4f55\u304b\u6a29\u9650\u3092\u633f\u5165\u3057\u3066\u3044\u308b\u51e6\u7406\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\nfs/binfmt_elf.c\nstatic int\ncreate_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,\n                unsigned long load_addr, unsigned long interp_load_addr)\n{\n\u30fb\n\u30fb\n\u30fb\n/* Create the ELF interpreter info */\n        elf_info = (elf_addr_t *)current->mm->saved_auxv;\n        /* update AT_VECTOR_SIZE_BASE if the number of NEW_AUX_ENT() changes */\n#define NEW_AUX_ENT(id, val) \\\n        do { \\\n                elf_info[ei_index++] = id; \\\n                elf_info[ei_index++] = val; \\\n        } while (0)\n\n#ifdef ARCH_DLINFO\n        /*\n         * ARCH_DLINFO must come first so PPC can do its special alignment of\n         * AUXV.\n         * update AT_VECTOR_SIZE_ARCH if the number of NEW_AUX_ENT() in\n         * ARCH_DLINFO changes\n         */\n        ARCH_DLINFO;\n#endif\n        NEW_AUX_ENT(AT_HWCAP, ELF_HWCAP);\n        NEW_AUX_ENT(AT_PAGESZ, ELF_EXEC_PAGESIZE);\n        NEW_AUX_ENT(AT_CLKTCK, CLOCKS_PER_SEC);\n        NEW_AUX_ENT(AT_PHDR, load_addr + exec->e_phoff);\n        NEW_AUX_ENT(AT_PHENT, sizeof(struct elf_phdr));\n        NEW_AUX_ENT(AT_PHNUM, exec->e_phnum);\n        NEW_AUX_ENT(AT_BASE, interp_load_addr);\n        NEW_AUX_ENT(AT_FLAGS, 0);\n        NEW_AUX_ENT(AT_ENTRY, exec->e_entry);\n        NEW_AUX_ENT(AT_UID, cred->uid);\n        NEW_AUX_ENT(AT_EUID, cred->euid);\n        NEW_AUX_ENT(AT_GID, cred->gid);\n        NEW_AUX_ENT(AT_EGID, cred->egid);\n        NEW_AUX_ENT(AT_SECURE, security_bprm_secureexec(bprm));\n        NEW_AUX_ENT(AT_RANDOM, (elf_addr_t)(unsigned long)u_rand_bytes);\n        NEW_AUX_ENT(AT_EXECFN, bprm->exec);\n\u30fb\n\u30fb\n\u30fb\n}\n\n\nELF interpreter info\u306bNEW_AUX_ENT\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u3066\u5404ID\u3092\u633f\u5165\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u9818\u57df\u306f\u30e6\u30fc\u30b6\u30fc\u30b9\u30bf\u30c3\u30af\u306e\u74b0\u5883\u5909\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u914d\u5217\u306e\u76f4\u524d\u306b\u7f6e\u304b\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u306f\u4e00\u4f53\u306a\u3093\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff1f\u5b9f\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u6642\u30ab\u30fc\u30cd\u30eb\u3067exec\u51e6\u7406\u3059\u308b\u3093\u3067\u3059\u304c\u6700\u7d42\u7684\u306b\u30ab\u30fc\u30cd\u30eb\u3067\u306fIP\u306e\u5024\u3068\u3057\u3066\u305d\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u52d5\u7684\u30ea\u30f3\u30ab\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002\u52d5\u7684\u30ea\u30f3\u30ab\u304c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3057\u3066\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u6d41\u308c\u3067\u3059\u3002\u8272\u3005\u8abf\u3079\u308b\u3068\u52d5\u7684\u30ea\u30f3\u30ab\u304c\u3053\u306e\u9818\u57df\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\u308f\u3056\u308f\u3056\u5404ID\u3082\u3053\u3053\u306b\u633f\u5165\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u304d\u3063\u3068\u4f55\u304b\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u4f55\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u306f\u8abf\u3079\u3066\u3044\u307e\u305b\u3093\u3002\u3044\u3064\u304b\u8abf\u3079\u3089\u308c\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n# \u6982\u8981\nping\u306e\u5b9f\u88c5\u3092\u901a\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u306e\u6a29\u9650\u3092\u52c9\u5f37\u3057\u305f\u5099\u5fd8\u9332\u3002\n\n# \u7591\u554f\nping\u30b3\u30de\u30f3\u30c9\u306fset-user-ID\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u822c\u30e6\u30fc\u30b6\u30fc\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u3067\u3082\u5b9f\u52b9ID\u304croot\u3067\u5b9f\u884c\u3055\u308c\u308b\u306f\u305a\u3060\u3068\u601d\u3063\u3066\u3044\u305f\u3002\u3068\u3053\u308d\u304cps\u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3057\u305f\u306a\u3089\u3070\u4ee5\u4e0b\u306e\u69d8\u306a\u7d50\u679c\u306b\u306a\u3063\u305f\u3002\u305d\u3046\u3001\u5b9f\u52b9ID\u304c\u4e00\u822c\u30e6\u30fc\u30b6\u30fc\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u305f\u3002\u306a\u305c\u3060\u308d\u3046\u30fb\u30fb\uff1f\n\n## /bin/ping\n~~~\n[root@localhost iputils-s20071127]# ll /bin/ping\n-rwsr-xr-x. 1 root root 40760  9\u6708 26 14:35 2013 /bin/ping\n~~~\nset-user-ID\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u5b9f\u52b9ID\u304croot\u3067ping\u304c\u5b9f\u884c\u3055\u308c\u308b\u306f\u305a\u3060\u3068\u601d\u3063\u3066\u3044\u305f\u30fb\u30fb\n\n~~~\n[vagrant@localhost ~]$ id\nuid=500(vagrant) gid=500(vagrant) \u6240\u5c5e\u30b0\u30eb\u30fc\u30d7=500(vagrant)\n\n[vagrant@localhost ~]$ /bin/ping 192.168.33.20\nPING 192.168.33.20 (192.168.33.20) 56(84) bytes of data.\n64 bytes from 192.168.33.20: icmp_seq=1 ttl=64 time=0.021 ms\n64 bytes from 192.168.33.20: icmp_seq=2 ttl=64 time=0.034 ms\n~~~\nping\u5b9f\u884c\u3057\u305f\u307e\u307e\u3001\u4ee5\u4e0b\u3092\u5b9f\u884c\n\n~~~\n[vagrant@localhost net]$ ps -eo uid,euid,fuid,suid,command  | grep [p]ing\n  500   500   500   500 ping 192.168.33.10\n~~~\n\u5404ID\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3059\u3079\u3066vagrant\u30e6\u30fc\u30b6\u30fc\u306e\u5024\u306b\u3002ping\u306fset-user-ID\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u306e\u3067root\u306e\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3001\u3057\u304b\u3057vagrant\u30e6\u30fc\u30b6\u30fc\u306e\u5024\u3002\u306a\u305c\u3060\u308d\u3046\uff1f\n\n## \u8a66\u3057\u305f\u74b0\u5883\n* Vagrant on Mac\n* ping\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u5165\u3063\u3066\u3044\u308bsrpm\u3092\u53d6\u5f97\u3002\n\n~~~sh\n[root@localhost iputils-s20071127]# cat /etc/redhat-release\nCentOS release 6.5 (Final)\n[root@localhost iputils-s20071127]# which ping\n/bin/ping\n[root@localhost iputils-s20071127]# rpm -qf /bin/ping\niputils-20071127-17.el6_4.2.x86_64\n[root@localhost iputils-s20071127]#\n~~~\n\n#\u3000\u51e6\u7406\u307f\u3066\u307f\u305f\nping\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```ping.c\n\nint main(int argc, char **argv)\n{\n  .\n  .\n  . \n  icmp_sock = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);\n\n  socket_errno = errno;\n\n  uid = getuid();\n  if (setuid(uid)) {\n    perror(\"ping: setuid\");\n    exit(-1);\n  }\n  .\n  .\n  .\n```\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308c\u3070\u308f\u304b\u308a\u307e\u3057\u305f\u3002socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u5b9f\u884c\u3057\u305f\u5f8c\u306bgetuid\u3067\u81ea\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u30e6\u30fc\u30b6\u30fcID\u3092\u53d6\u5f97\u3057\u3066\u3001setuid\u3067\u81ea\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u52b9\u30e6\u30fc\u30b6\u30fcID\u3092\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\u3088\u3063\u3066ps\u30b3\u30de\u30f3\u30c9\u3067\u306fsetuid\u3055\u308c\u305f\u5f8c\u306e\u5024(vagrant\u30e6\u30fc\u30b6\u30fc)\u304c\u898b\u3048\u3066\u3044\u305f\u308f\u3051\u3067\u3059\u3002\n\n## CentOS7\u306ePing\n~~~\n[root@localhost iputils-s20121221]# cat /etc/redhat-release\nCentOS Linux release 7.1.1503 (Core)\n[root@localhost iputils-s20121221]# uname -r\n3.10.0-229.el7.x86_64\n[root@localhost iputils-s20121221]# which ping\n/bin/ping\n[root@localhost iputils-s20121221]# ll /bin/ping\n-rwxr-xr-x. 1 root root 44896  6\u6708 10  2014 /bin/ping\n~~~\n\n\u4ed6\u306b\u3082centos7\u306e\u74b0\u5883\u3067\u898b\u3066\u307f\u307e\u3057\u305f\u3002\u3059\u308b\u3068centos7\u306eping\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3067\u306f\u30b1\u30fc\u30d1\u30d3\u30ea\u30c6\u30a3\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n~~~ping.c\n        limit_capabilities();\n\n#ifdef USE_IDN\n        setlocale(LC_ALL, \"\");\n#endif\n\n        enable_capability_raw();\n\n        icmp_sock = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);\n        socket_errno = errno;\n\n        disable_capability_raw();\n~~~\n\nsocket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u5b9f\u884c\u3059\u308b\u307e\u3048\u306benable_capability_raw()\u3067CAP_NET_RAW\u6a29\u9650\u3060\u3051\u3092\u4e0e\u3048\u3066\u3001socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u5f8c\u306bdisable_capability_raw()\u3067\u6a29\u9650\u3092\u30af\u30ea\u30a2\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3088\u3063\u3066set-user-ID\u3057\u3066\u3044\u306a\u3044\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3067\u3082socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u5b9f\u884c\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3057\u304b\u3057\u306a\u305ccent6\u3068cent7\u3067ping\u306e\u4f5c\u308a\u304c\u9055\u3046\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff1f\u3093\u30fc\u3001\u306a\u305c\u3067\u3057\u3087\u3046\u304b\u3002\u4e21\u8005\u3092\u898b\u308b\u3068cent\uff17\u306e\u307b\u3046\u304c\u6a29\u9650\u3092\u6700\u5c0f\u5316\u3067\u304d\u3066\u3044\u308b\u306e\u3067\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u7684\u306b\u671b\u307e\u3057\u3044\u3068\u3044\u3048\u307e\u3059\u3002\n\n\n\n\n\n# \u95a2\u4fc2\u3042\u308a\u305d\u3046\u306a\u30ab\u30fc\u30cd\u30eb\u306e\u51e6\u7406\u3092\u307f\u3066\u307f\u305f\n\u30ab\u30fc\u30cd\u30eb:linux-2.6.32\n\n## set-user-ID\u3092\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u7b87\u6240\nsys_execve() \u2192 do_execve \u304b\u3089\u306e\u5148\u3067\u547c\u3070\u308c\u3066\u3044\u308b\u3002\n\n~~~fs/exec.c\n/*\n * Fill the binprm structure from the inode.\n * Check permissions, then read the first 128 (BINPRM_BUF_SIZE) bytes\n *\n * This may be called multiple times for binary chains (scripts for example).\n */\nint prepare_binprm(struct linux_binprm *bprm)\n{\n        umode_t mode;\n        struct inode * inode = bprm->file->f_path.dentry->d_inode;\n        int retval;\n\n        mode = inode->i_mode;\n        if (bprm->file->f_op == NULL)\n                return -EACCES;\n\n        /* clear any previous set[ug]id data from a previous binary */\n        bprm->cred->euid = current_euid();\n        bprm->cred->egid = current_egid();\n\n        if (!(bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID)) {\n                /* Set-uid? */\n                if (mode & S_ISUID) {\n                        bprm->per_clear |= PER_CLEAR_ON_SETID;\n                        bprm->cred->euid = inode->i_uid;\n                }\n\n                /* Set-gid? */\n                /*\n                 * If setgid is set but no group execute bit then this\n                 * is a candidate for mandatory locking, not a setgid\n                 * executable.\n                 */\n                if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {\n                        bprm->per_clear |= PER_CLEAR_ON_SETID;\n                        bprm->cred->egid = inode->i_gid;\n                }\n        }\n\n        /* fill in binprm security blob */\n        retval = security_bprm_set_creds(bprm);\n        if (retval)\n                return retval;\n        bprm->cred_prepared = 1;\n\n        memset(bprm->buf, 0, BINPRM_BUF_SIZE);\n        return kernel_read(bprm->file, 0, bprm->buf, BINPRM_BUF_SIZE);\n}\n~~~\n\nlinux_binprm\n\n~~~include/linux/binfmts.h\n/*\n * This structure is used to hold the arguments that are used when loading binaries.\n */\nstruct linux_binprm{\n        char buf[BINPRM_BUF_SIZE];\n#ifdef CONFIG_MMU\n        struct vm_area_struct *vma;\n#else\n# define MAX_ARG_PAGES  32\n        struct page *page[MAX_ARG_PAGES];\n#endif\n        struct mm_struct *mm;\n        unsigned long p; /* current top of mem */\n        unsigned int\n                cred_prepared:1,/* true if creds already prepared (multiple\n                                 * preps happen for interpreters) */\n                cap_effective:1;/* true if has elevated effective capabilities,\n                                 * false if not; except for init which inherits\n                                 * its parent's caps anyway */\n#ifdef __alpha__\n        unsigned int taso:1;\n#endif\n        unsigned int recursion_depth;\n        struct file * file;\n        struct cred *cred;      /* new credentials */\n        int unsafe;             /* how unsafe this exec is (mask of LSM_UNSAFE_*) */\n        unsigned int per_clear; /* bits to clear in current->personality */\n        int argc, envc;\n        char * filename;        /* Name of binary as seen by procps */\n        char * interp;          /* Name of the binary really executed. Most\n                                   of the time same as filename, but could be\n                                   different for binfmt_{misc,script} */\n        unsigned interp_flags;\n        unsigned interp_data;\n        unsigned long loader, exec;\n};\n~~~\nset-user-ID\u306e\u5024\u3092\u53d6\u5f97\u3057\u3066linux_binprm\u306e\u69cb\u9020\u4f53\u306b\u5024\u3092\u5165\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002linux_binprm\u306f\u30b3\u30e1\u30f3\u30c8\u306b\u304b\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001execve\u3059\u308b\u6642\u306e\u5404\u7a2e\u60c5\u5831\u3092\u5165\u308c\u308b\u69cb\u9020\u4f53\u307f\u305f\u3044\u3067\u3059\u3002\u305d\u306e\u5f8c\u306bsecurity_bprm_set_creds\u3067\u6a29\u9650\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3057\u305f(\u30b1\u30fc\u30d1\u30d3\u30ea\u30c6\u30a3\u3082\u542b\u3080)\u3002\u3053\u306e\u5148\u3067\u901a\u5e38\u30e6\u30fc\u30b6\u30fc\u306e\u5b9f\u52b9ID\u3092set-user-ID\u306e\u5024\u3067\u6a29\u73fe\u306e\u4e0a\u66f8\u304d\u3092\u3057\u3066\u3044\u308b\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\uff1f\uff1fsecurity_bprm_set_creds\u306e\u5148\u306f\u3044\u3064\u304b\u8aad\u3093\u3067\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4ed6\u306b\u3082\u95a2\u4fc2\u3042\u308a\u305d\u3046\u306a\u7b87\u6240\u3092\u898b\u3066\u307f\u307e\u3057\u305f\u3002\n\ntask_struc\u69cb\u9020\u4f53\u304b\u3089\u3072\u3082\u4ed8\u304f\u5404ID\u3002\n\n~~~include/linux/cred.h\nstruct cred {\n\u30fb\n\u30fb\n\u30fb\n        uid_t           uid;            /* real UID of the task */\n        gid_t           gid;            /* real GID of the task */\n        uid_t           suid;           /* saved UID of the task */\n        gid_t           sgid;           /* saved GID of the task */\n        uid_t           euid;           /* effective UID of the task */\n        gid_t           egid;           /* effective GID of the task */\n        uid_t           fsuid;          /* UID for VFS ops */\n        gid_t           fsgid;          /* GID for VFS ops */\n        unsigned        securebits;     /* SUID-less security management \n\u30fb\n\u30fb\n\u30fb\n}\n~~~\n\n\u3069\u3053\u304b\u3067\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u304b\u306a\u30fc\u3068\u601d\u3063\u3066\u307f\u3066\u307f\u307e\u3057\u305f\u3002do_execve()\u306e\u3055\u3089\u306b\u5148\u3067ELF\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u306bELF\u3092\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u3059\u308b\u51e6\u7406\u306e\u9014\u4e2d\u3067\u4f55\u304b\u6a29\u9650\u3092\u633f\u5165\u3057\u3066\u3044\u308b\u51e6\u7406\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n~~~fs/binfmt_elf.c\nstatic int\ncreate_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,\n                unsigned long load_addr, unsigned long interp_load_addr)\n{\n\u30fb\n\u30fb\n\u30fb\n/* Create the ELF interpreter info */\n        elf_info = (elf_addr_t *)current->mm->saved_auxv;\n        /* update AT_VECTOR_SIZE_BASE if the number of NEW_AUX_ENT() changes */\n#define NEW_AUX_ENT(id, val) \\\n        do { \\\n                elf_info[ei_index++] = id; \\\n                elf_info[ei_index++] = val; \\\n        } while (0)\n\n#ifdef ARCH_DLINFO\n        /*\n         * ARCH_DLINFO must come first so PPC can do its special alignment of\n         * AUXV.\n         * update AT_VECTOR_SIZE_ARCH if the number of NEW_AUX_ENT() in\n         * ARCH_DLINFO changes\n         */\n        ARCH_DLINFO;\n#endif\n        NEW_AUX_ENT(AT_HWCAP, ELF_HWCAP);\n        NEW_AUX_ENT(AT_PAGESZ, ELF_EXEC_PAGESIZE);\n        NEW_AUX_ENT(AT_CLKTCK, CLOCKS_PER_SEC);\n        NEW_AUX_ENT(AT_PHDR, load_addr + exec->e_phoff);\n        NEW_AUX_ENT(AT_PHENT, sizeof(struct elf_phdr));\n        NEW_AUX_ENT(AT_PHNUM, exec->e_phnum);\n        NEW_AUX_ENT(AT_BASE, interp_load_addr);\n        NEW_AUX_ENT(AT_FLAGS, 0);\n        NEW_AUX_ENT(AT_ENTRY, exec->e_entry);\n        NEW_AUX_ENT(AT_UID, cred->uid);\n        NEW_AUX_ENT(AT_EUID, cred->euid);\n        NEW_AUX_ENT(AT_GID, cred->gid);\n        NEW_AUX_ENT(AT_EGID, cred->egid);\n        NEW_AUX_ENT(AT_SECURE, security_bprm_secureexec(bprm));\n        NEW_AUX_ENT(AT_RANDOM, (elf_addr_t)(unsigned long)u_rand_bytes);\n        NEW_AUX_ENT(AT_EXECFN, bprm->exec);\n\u30fb\n\u30fb\n\u30fb\n}\n~~~\nELF interpreter info\u306bNEW_AUX_ENT\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u3066\u5404ID\u3092\u633f\u5165\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u9818\u57df\u306f\u30e6\u30fc\u30b6\u30fc\u30b9\u30bf\u30c3\u30af\u306e\u74b0\u5883\u5909\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u914d\u5217\u306e\u76f4\u524d\u306b\u7f6e\u304b\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u306f\u4e00\u4f53\u306a\u3093\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff1f\u5b9f\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u6642\u30ab\u30fc\u30cd\u30eb\u3067exec\u51e6\u7406\u3059\u308b\u3093\u3067\u3059\u304c\u6700\u7d42\u7684\u306b\u30ab\u30fc\u30cd\u30eb\u3067\u306fIP\u306e\u5024\u3068\u3057\u3066\u305d\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u52d5\u7684\u30ea\u30f3\u30ab\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002\u52d5\u7684\u30ea\u30f3\u30ab\u304c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3057\u3066\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u6d41\u308c\u3067\u3059\u3002\u8272\u3005\u8abf\u3079\u308b\u3068\u52d5\u7684\u30ea\u30f3\u30ab\u304c\u3053\u306e\u9818\u57df\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\u308f\u3056\u308f\u3056\u5404ID\u3082\u3053\u3053\u306b\u633f\u5165\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u304d\u3063\u3068\u4f55\u304b\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u4f55\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u306f\u8abf\u3079\u3066\u3044\u307e\u305b\u3093\u3002\u3044\u3064\u304b\u8abf\u3079\u3089\u308c\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\n\n\n\n", "tags": ["Linux", "CentOS", "kernel"]}