{"context": "\n\n\u6a5f\u68b0\u5b66\u7fd2\u95a2\u9023\u60c5\u5831\u3092\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3067\u5206\u985e\u3059\u308b\n\u6a5f\u68b0\u5b66\u7fd2\u95a2\u9023\u60c5\u5831\u306e\u53ce\u96c6\u3068\u5206\u985e(\u69cb\u60f3)\u306e\u2777\u306e\u90e8\u5206\u306b\u95a2\u9023\u3059\u308b\u8a18\u4e8b\u3067\u3059\u3002\n\u5b9f\u969b\u306b\u8abf\u3079\u305f\u6642\u70b9\u304b\u3089\u6570\u304b\u6708\u307b\u3069\u6642\u9593\u304c\u7d4c\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u73fe\u72b6\u3068\u82e5\u5e72\u305a\u308c\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001\u6e80\u8db3\u3067\u304d\u308b\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u3042\u3089\u304b\u3058\u3081\u304a\u65ad\u308a\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nQiita \u306b\u3082 Python \u306b\u3082\u6163\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3044\u308d\u3044\u308d\u304a\u304b\u3057\u306a\u8a18\u8ff0\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u3046\u3044\u3046\u3068\u3053\u308d\u306f\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308c\u3070\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u8aac\u660e\u3059\u308b\u51e6\u7406\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u6d41\u308c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3000\u2776\u30b5\u30a4\u30c8\u306e\u30af\u30ed\u30a6\u30eb\n\u3000\u3000\u30af\u30ed\u30a6\u30eb\u3057\u305f\u6587\u66f8(article)\u3092 bookmarks.crawled \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u7f6e\u304d\u307e\u3059\u3002\n\u3000\u3000\u3000\u2193\n\u3000\u2777article\u306ePython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\n\u3000\u3000\u6587\u66f8(article)\u5358\u4f4d\u3067 Python\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\u3057\u307e\u3059\u3002\n\u3000\u3000\u3000\u2193\n\u3000\u2778\u30b3\u30fc\u30d1\u30b9\u306ePython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\n\u3000\u3000\u6587\u66f8\u7fa4\u5168\u4f53\u3092\u30b3\u30fc\u30d1\u30b9\u3068\u3057\u3066Python\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\u3057\u307e\u3059\u3002\n\u3000\u3000\u3000\u2193\n\u3000\u2779\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\n\u3000\u3000\u3053\u306e\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u3063\u3066\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\u3092\u8a66\u307f\u307e\u3059\u3002\nthesaurus \u306e\u90e8\u5206\u306f\u7d4c\u7def\u304c\u524d\u5f8c\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306f\u3067\u304d\u308b\u3060\u3051\u9806\u3092\u8ffd\u3063\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u2776\u30b5\u30a4\u30c8\u306e\u30af\u30ed\u30a6\u30eb\n\u6a5f\u68b0\u5b66\u7fd2\u95a2\u9023\u60c5\u5831\u306e\u53ce\u96c6\u3068\u5206\u985e(\u69cb\u60f3)\u306e\u2777\u3067\u306f FESS \u3067\u53ce\u96c6\u3057\u305f\u7d50\u679c\u3092\u76f4\u63a5\u306b\u5165\u529b\u3068\u3059\u308b\u30b7\u30ca\u30ea\u30aa\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d7\u30ec\u30a4\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u5909\u63db\u306e crawl.rb \u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u3092 bookmarks.crawled \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u7f6e\u3044\u3066\u5165\u529b\u3068\u3057\u3066\u3044\u307e\u3059\u3002\nFESS \u3067\u53ce\u96c6\u3057\u305f\u7d50\u679c\u3092\u76f4\u63a5\u306b\u5165\u529b\u3068\u3059\u308b\u3068\u3001\n\u30fb\u53e4\u3044\u6587\u66f8\u304c Expire \u3057\u3066\u3057\u307e\u3046\n\u30fb\u624b\u52d5\u306b\u3088\u308b\u8a18\u4e8b\u5206\u985e\u6642\u306b\u9664\u5916\u3057\u305f\u91cd\u8907\u8a18\u4e8b\u3084\u91cd\u8981\u5ea6\u306e\u4f4e\u3044\u8a18\u4e8b\u304c\u5fa9\u6d3b\u3057\u3066\u3057\u307e\u3046\n\u305f\u3081\u3067\u3059\u3002\n\n\u2777article\u306ePython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\nbookmarks.crawled \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306eHTML\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001Python \u306e Article\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n  Article \u30af\u30e9\u30b9\n    \u5c5e\u6027\n      path      HTML\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\n      contents  HTML\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067HTML\u30bf\u30b0\u306a\u3069\u3092\u9664\u53bb\u3057\u305f\u3082\u306e\n      tokens    contents \u306b\u3042\u308b\u540d\u8a5e\u306e\u30ea\u30b9\u30c8(list of string)\n\n\n\u2605HTML\u30d5\u30a1\u30a4\u30eb\u306e\u672c\u6587\u62bd\u51fa\nPython\u3067\u30d6\u30ed\u30b0\u306eHTML\u304b\u3089\u672c\u6587\u62bd\u51fa 2015\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u8abf\u67fb\u7d50\u679c\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\u672c\u683c\u7684\u306b\u5b9f\u88c5\u3059\u308b\u306a\u3089 Webstemmer\u3092\u5229\u7528\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304c\u3001\u3042\u3089\u304b\u3058\u3081\u30d6\u30ed\u30b0\u30b5\u30a4\u30c8\u3054\u3068\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u751f\u6210\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u3001\u7169\u96d1\u306b\u306a\u308b\u305f\u3081\u4eca\u56de\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u5b9f\u88c5\u3057\u305f Article \u30af\u30e9\u30b9\u3067\u306f extractcontent\u306e\u6b63\u898f\u8868\u73fe\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u2605\u30c8\u30fc\u30af\u30f3\u306e\u5207\u308a\u51fa\u3057\n\n(1) janome\nPure Python \u306e\u65e5\u672c\u8a9e\u5f62\u614b\u7d20\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30ea janome \u3092\u7528\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u8f9e\u66f8\u306f MeCab \u3068\u307b\u307c\u540c\u3058\u69cb\u6210\u3067\u3001\u82f1\u5b57\u306e\u5358\u8a9e\u306f\u5168\u89d2\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u524d\u51e6\u7406\u306b\u534a\u89d2\u5168\u89d2\u5909\u63db\u30e9\u30a4\u30d6\u30e9\u30ea mojimoji\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\narticle_janome.py\nimport codecs\nimport re\nimport mojimoji\nfrom janome.tokenizer import Tokenizer\n\nclass Article:\n\n    encodings = [\n        \"utf-8\",\n        \"cp932\",\n        \"euc-jp\",\n        \"iso-2022-jp\",\n        \"latin_1\"\n    ]\n\n    tokenizer = Tokenizer(\"user_dic.csv\", udic_type=\"simpledic\", udic_enc=\"utf8\")\n\n    def __init__(self,path):\n        print(path)\n        self.path = path\n        self.contents = self.preprocess(self.get_contents(path))\n        self.tokens = [token.surface for token in self.tokenizer.tokenize(self.contents) if re.match(\"\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e|\u540d\u8a5e,(\u56fa\u6709|\u4e00\u822c|\u30b5\u5909)\", token.part_of_speech)]\n\n    def get_contents(self,path):\n        exceptions = []\n        for encoding in self.encodings:\n            try:\n                all = codecs.open(path, 'r', encoding).read()\n                parts = re.split(\"(?i)<(body|frame)[^>]*>\", all, 1)\n                if len(parts) == 3:\n                    head, void, body = parts\n                else:\n                    print('Cannot split ' + path)\n                    body = all\n                return re.sub(\"<[^>]+?>\", \"\", re.sub(r\"(?is)<(script|style|select|noscript)[^>]*>.*?</\\1\\s*>\",\"\", body))\n            except UnicodeDecodeError:\n                continue\n        print('Cannot detect encoding of ' + path)\n        print(exceptions)\n        return None\n\n    def get_title(self,path):\n        return re.split('\\/', path)[-1]\n\n    def preprocess(self, text):\n        text = re.sub(\"&[^;]+;\",  \" \", text)\n        text = mojimoji.han_to_zen(text, digit=False)\n        text = re.sub('(\\s|\u3000|\uff03)+', \" \", text)\n        return text\n\n\n\n(2) \u8f9e\u66f8\u306e\u62e1\u5f35\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306eIPA\u8f9e\u66f8\u3067\u306f\u300c\u4eba\u5de5\u77e5\u80fd\u300d\u306f\u300c\u4eba\u5de5\u300d\u300c\u77e5\u80fd\u300d\u306e\u3088\u3046\u306b\uff12\u8a9e\u306b\u5206\u89e3\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001user_dic.csv \u306b\uff11\u8a9e\u3068\u3057\u305f\u3044\u7528\u8a9e\u3092\u767b\u9332\u3057\u3066janome \u304b\u3089\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u305d\u306e\u5f8c\u3001\n\u3000mecab-ipadic-NEologd : Neologism dictionary for MeCab\n\u3000Ubuntu14.04\u3067mecab\u306e\u8f9e\u66f8\u306bWikipedia\u3068\u306f\u3066\u306a\u5358\u8a9e\u3092\u8ffd\u52a0\n\u3000\u5f62\u614b\u7d20\u89e3\u6790\u306e\u305f\u3081\u306b Wikipedia \u3068\u306f\u3066\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u8f9e\u66f8\u3092\u751f\u6210\u3057\u5229\u7528\u3059\u308b\n\u306a\u3069\u3082\u898b\u3064\u3051\u307e\u3057\u305f\u304c\u3001thesaurus.csv \u3092\u4f7f\u7528\u3059\u308b\u65b9\u91dd\u306b\u8ee2\u63db\u3057\u305f\u5f8c\u3060\u3063\u305f\u305f\u3081\u307e\u3060\u8a66\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n(3) thesaurus\n\u5f8c\u8ff0\u306e\u901a\u308a\u65e5\u672c\u8a9e\u5f62\u614b\u7d20\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u308b\u30c8\u30fc\u30af\u30f3\u5207\u308a\u51fa\u3057\u3067\u306f\u3001perplexity\u304c\u8a31\u5bb9\u7bc4\u56f2\u5185\u306b\u5165\u3089\u305a\u3001\u30c8\u30d4\u30c3\u30af\u306e\u62bd\u51fa\u304c\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u624b\u4f5c\u696d\u3067\u4eba\u5de5\u77e5\u80fd\u95a2\u9023\u3067\u983b\u51fa\u3059\u308b350\u8a9e\u307b\u3069\u3092 thesaurus.csv \n\nthesaurus.csv(\u4f8b)\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406,NLP,Natural Language Processing,natural language processing\n\u8cea\u554f\u5fdc\u7b54\n\u97f3\u58f0\u8a8d\u8b58\nAlphaGo,\u30a2\u30eb\u30d5\u30a1\u7881\n\u2026\n\n\n\u306b\u767b\u9332\u3057\u3001\u30d2\u30c3\u30c8\u3057\u305f\u5358\u8a9e\u306e\u307f\u30c8\u30fc\u30af\u30f3\u3068\u3057\u3066\u5207\u308a\u51fa\u3059\u51e6\u7406\u3092\u3001\n\nthesaurus.py\nimport re\nimport mojimoji\n\nclass Thesaurus:\n\n    def __init__(self,path):\n        map = dict()\n        with open(path, 'r') as thesaurus:\n            for line in thesaurus.readlines():\n                words = [mojimoji.han_to_zen(word, digit=False) for word in re.split(',', line.strip())]\n                for word in words:\n                    if word in map:\n                        print('Word duplicated: ' + word)\n                        raise\n                    map[word] = words[0]\n        self.words = map\n        self.re    = re.compile(\"|\".join(sorted(map.keys(), key=lambda x: -len(x))))\n\n    def tokenize(self,sentence):\n        for token in re.finditer(self.re, sentence):\n            yield(Token(self.words[token.group()]))\n\nclass Token:\n\n    def __init__(self, surface):\n        self.surface = surface\n        self.part_of_speech = \"\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e\"\n\n\n\u306b\u8a18\u8ff0\u3057\u3001\u65e5\u672c\u8a9e\u5f62\u614b\u7d20\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7f6e\u304d\u63db\u3048\u307e\u3057\u305f1\u3002\n\narticle.py\nimport codecs\nimport re\nimport mojimoji\nfrom thesaurus import Thesaurus\n\nclass Article:\n\n    encodings = [\n        \"utf-8\",\n        \"cp932\",\n        \"euc-jp\",\n        \"iso-2022-jp\",\n        \"latin_1\"\n    ]\n\n    tokenizer = Thesaurus('thesaurus.csv')\n\n    def __init__(self,path):\n        print(path)\n        self.path = path\n        self.contents = self.preprocess(self.get_contents(path))\n        self.tokens = [token.surface for token in self.tokenizer.tokenize(self.contents) if re.match(\"\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e|\u540d\u8a5e,(\u56fa\u6709|\u4e00\u822c|\u30b5\u5909)\", token.part_of_speech)]\n\n    def get_contents(self,path):\n        exceptions = []\n        for encoding in self.encodings:\n            try:\n                all = codecs.open(path, 'r', encoding).read()\n                parts = re.split(\"(?i)<(body|frame)[^>]*>\", all, 1)\n                if len(parts) == 3:\n                    head, void, body = parts\n                else:\n                    print('Cannot split ' + path)\n                    body = all\n                return re.sub(\"<[^>]+?>\", \"\", re.sub(r\"(?is)<(script|style|select|noscript)[^>]*>.*?</\\1\\s*>\",\"\", body))\n            except UnicodeDecodeError:\n                continue\n        print('Cannot detect encoding of ' + path)\n        print(exceptions)\n        return None\n\n    def get_title(self,path):\n        return re.split('\\/', path)[-1]\n\n    def preprocess(self, text):\n        text = re.sub(\"&[^;]+;\",  \" \", text)\n        text = mojimoji.han_to_zen(text, digit=False)\n        return text\n\n\n\n\u2778\u30b3\u30fc\u30d1\u30b9\u306ePython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\n\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3067\u306f\u6587\u7ae0\u3092BOW(Bag of Words, list of (\u5358\u8a9eID,\u51fa\u73fe\u6570))\u3067\u6271\u3044\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u4e0b\u8a18\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n\u2605Corpus \u30af\u30e9\u30b9\n    \u5c5e\u6027\n      articles   (HTML\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9:Article\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\u304b\u3089\u306a\u308b OrderedDictionary\n      keys       HTML\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u306elist(list of string)\n      size       Article\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570\n      texts      \u30b3\u30fc\u30d1\u30b9\u3092\u69cb\u6210\u3059\u308b\u30c8\u30fc\u30af\u30f3(list of (list of string))\n      corpus     texts \u3092 list of BOW \u306b\u5909\u63db\u3057\u305f\u3082\u306e\n    \u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9 save/load \u3092\u6301\u3061\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u5b58\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\u2605Corpora \u30af\u30e9\u30b9\n    \u5c5e\u6027\n      training   training \u7528\u306e Corpus \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n      test       test \u7528\u306e Corpus \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n      dictionary training, test \u5171\u901a\u306b\u4f7f\u7528\u3059\u308b gensim.corpora.Dictionary\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n                 (\u5358\u8a9e\u306eID(integer)\u3068\u8868\u73fe(string)\u306e\u5bfe\u5fdc\u95a2\u4fc2\u3092\u4fdd\u6301)\n\n\ncorpus.py\nimport pickle\nfrom collections import defaultdict\nfrom gensim import corpora\n\nclass Corpora:\n\n    def __init__(self, training, test, dictionary):\n        self.training   = training\n        self.test       = test\n        self.dictionary = dictionary\n\n    def save(self, title):\n        self.training.save(title+'_training')\n        self.test.save(title+'_test')\n        self.dictionary.save(title+\".dict\")\n\n    @classmethod\n    def load(cls, title):\n        training   = Corpus.load(title+'_training')\n        test       = Corpus.load(title+'_test')\n        dictionary = corpora.Dictionary.load(title+\".dict\")\n        return cls(training, test, dictionary)\n\n    @classmethod\n    def generate(cls, training, test):\n        training_corpus = Corpus.generate(training)\n        test_corpus     = Corpus.generate(test)\n        all_texts       = training_corpus.texts + test_corpus.texts\n        frequency       = defaultdict(int)\n        for text in all_texts:\n            for token in text:\n                frequency[token] += 1\n        all_texts  = [[token for token in text if frequency[token] > 1] for text in all_texts]\n        dictionary = corpora.Dictionary(all_texts)\n        training_corpus.mm(dictionary)\n        test_corpus.mm(dictionary)\n        return cls(training_corpus, test_corpus, dictionary)\n\nclass Corpus:\n\n    def __init__(self, articles):\n        self.articles  = articles\n        self.keys      = list(articles.keys())\n        self.size      = len(articles.keys())\n\n    def article(self, index):\n        return self.articles[self.keys[index]]\n\n    def mm(self, dictionary):\n        values_set = set(dictionary.values())\n        self.texts  = [[token for token in text if token in values_set] for text in self.texts]\n      # print(self.texts[0])\n        self.corpus = [dictionary.doc2bow(text) for text in self.texts]\n\n    def save(self, title):\n        with open(title+\".pickle\", 'wb') as f:\n            pickle.dump(self.articles, f)\n        corpora.MmCorpus.serialize(title+\".mm\", self.corpus)\n\n    @classmethod\n    def load(cls, title):\n        with open(title+\".pickle\", 'rb') as f:\n            articles = pickle.load(f)\n        corpus = cls(articles)\n        corpus.corpus = corpora.MmCorpus(title+\".mm\")\n        return corpus\n\n    @classmethod\n    def generate(cls, articles):\n        corpus = cls(articles)\n        corpus.texts = [articles[key].tokens for key in articles.keys()]\n        return corpus\n\n\n\n\u3053\u3053\u307e\u3067\u306f\u30aa\u30f3\u30d7\u30ec\u30df\u30b9\u306a\u30c4\u30fc\u30eb\u306b\u4f55\u3092\u7528\u3044\u308b\u304b\u306b\u3088\u3089\u305a\u306b\u5171\u901a\u306b\u5fc5\u8981\u3068\u306a\u308b\u6280\u8853\u3067\u3059\u3002\n\n\u2779\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\n\u4ee5\u4e0a\u306e\u9053\u5177\u7acb\u3066\u3092\u6e96\u5099\u3057\u3066\u3001\n\u3000\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210 \u2026 (*1)\n\u3092\u53c2\u8003\u306b\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\ntest_view_LDA.py\nimport pprint\nimport logging\nimport glob\nimport numpy as np\nimport matplotlib.pylab as plt\nfrom collections import OrderedDict\nfrom gensim import corpora, models, similarities\nfrom pprint import pprint  # pretty-printer\nfrom corpus import Corpus, Corpora\nfrom article import Article\n\n#logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)\n\ntopic_range = range(10, 11)\ntraining_percent = 90\ntest_percent = 10\npath_pattern = '/home/samba/suchowan/links/bookmarks.crawled/**/*.html'\n\ndef corpus_pair(path, training_range, test_range):\n    all_paths         = glob.glob(path, recursive=True)\n    training_paths    = [v for i, v in enumerate(all_paths) if ((i * 2017) % 100) in training_range]\n    test_paths        = [v for i, v in enumerate(all_paths) if ((i * 2017) % 100) in test_range    ]\n    training_articles = OrderedDict([(path,Article(path)) for path in training_paths])\n    test_articles     = OrderedDict([(path,Article(path)) for path in test_paths])\n    return  Corpora.generate(training_articles, test_articles)\n\ndef calc_perplexity(m, c):\n    return np.exp(-m.log_perplexity(c))\n\ndef search_model(pair):\n    most = [1.0e15, None]\n    print(\"dataset: training/test = {0}/{1}\".format(pair.training.size, pair.test.size))\n\n    for t in topic_range:\n        m  = models.LdaModel(corpus=pair.training.corpus, id2word=pair.dictionary, num_topics=t, iterations=500, passes=10)\n        p1 = calc_perplexity(m, pair.training.corpus)\n        p2 = calc_perplexity(m, pair.test.corpus)\n        print(\"{0}: perplexity is {1}/{2}\".format(t, p1, p2))\n        if p2 < most[0]:\n            most[0] = p2\n            most[1] = m\n\n    return most[0], most[1]\n\npair = corpus_pair(path_pattern, range(0, training_percent+1), range(training_percent, training_percent+test_percent+1))\npair.save('article_contents')\nperplexity, model = search_model(pair)\nprint(\"Best model: topics={0}, perplexity={1}\".format(model.num_topics, perplexity))\n\ndef show_document_topics(c, m, r):\n\n    # make document/topics matrix\n    t_documents = OrderedDict()\n    for s in r:\n      # ts = m.__getitem__(c[s], -1)\n        ts = m[c[s]]\n        max_topic = max(ts, key=lambda x: x[1])\n        if max_topic[0] not in t_documents:\n            t_documents[max_topic[0]] = []\n        t_documents[max_topic[0]] += [(s, max_topic[1])]\n\n    return t_documents\n\ntopic_documents = show_document_topics(pair.test.corpus, model, range(0,pair.test.size))\n\nfor topic in topic_documents.keys():\n    print(\"Topic #{0}\".format(topic))\n    for article in topic_documents[topic]:\n       print(article[0], pair.test.article(article[0]).path)\n\npprint(model.show_topics())\n\n\n\u4f7f\u7528\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u306f gensim \u3067\u3001tfidf, lsi, lda\u3092\u4f7f\u3063\u305f\u30c4\u30a4\u30c3\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97 \u3084 Python\u3067\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u3057\u3066\u307f\u308b_\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3082\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u2605training\n  \u5165\u529b : training \u30b3\u30fc\u30d1\u30b9 - list of (list of (\u5358\u8a9eID,\u51fa\u73fe\u6570)) \u304a\u3088\u3073 \u30c8\u30d4\u30c3\u30af\u6570\n    list of (\u5358\u8a9eID,\u51fa\u73fe\u6570) - \u500b\u3005\u306e article \u3067\u306e\u5358\u8a9e\u306e\u51fa\u73fe\u6570 (\u51fa\u73fe\u9806\u306f\u8003\u616e\u3057\u306a\u3044)\n\n  \u51fa\u529b : LDA\u30e2\u30c7\u30eb - gensim.models.ldamodel\n    list of ((list of (\u5358\u8a9eID,\u51fa\u73fe\u6570)) \u304b\u3089\u30c8\u30d4\u30c3\u30af\u9069\u5408\u78ba\u7387\u3092\u8a08\u7b97\u3059\u308b\u8a08\u7b97\u5f0f)\n\n\n\u2605test\n  \u5165\u529b : test \u30b3\u30fc\u30d1\u30b9 - list of (list of (\u5358\u8a9eID,\u51fa\u73fe\u6570))\n    list of (\u5358\u8a9eID,\u51fa\u73fe\u6570) - \u500b\u3005\u306e article \u3067\u306e\u5358\u8a9e\u306e\u51fa\u73fe\u6570 (\u51fa\u73fe\u9806\u306f\u8003\u616e\u3057\u306a\u3044)\n\n\n  \u51fa\u529b : list of (list of \u9069\u5408\u78ba\u7387)\n\n\n\u2605\u5b9f\u884c\u4f8b\njanome \u3067\u5358\u8a9e\u3092\u62bd\u51fa\u3057\u3066 parts_of_speech \u306e\u307f\u306b\u3088\u308b\u7d5e\u8fbc\u307f\u3092\u3057\u305f\u3060\u3051\u3067\u30b3\u30fc\u30d1\u30b9\u3092\u4f5c\u3063\u3066\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\u3092\u8a66\u307f\u307e\u3057\u305f\u304c perplexity \u304c\u5929\u6587\u5b66\u7684\u306a\u5024\u306b\u306a\u3063\u3066\u5168\u304f\u610f\u5473\u3092\u6210\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u5fc5\u9808\u306e\u524d\u51e6\u7406\u3092\u3044\u308d\u3044\u308d\u7701\u7565\u3057\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u6839\u672c\u7684\u306a\u7406\u7531\u306f\u660e\u767d\u3067\u3059\u3002\n\u3000\u5358\u8a9e\u306e\u7a2e\u985e\u6570\u3000>>\u3000\u6587\u66f8\u6570\n\u3053\u308c\u3067\u3059\u3002\n\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306f\u5358\u8a9e\u306e\u7a2e\u985e\u6570\uff0b\u03b1\u3060\u3051\u8abf\u6574\u53ef\u80fd\u306a\u5909\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u300c\u5358\u8a9e\u306e\u7a2e\u985e\u6570>>\u6587\u66f8\u6570\u300d\u3068\u3044\u3046\u6761\u4ef6\u3067\u7121\u7406\u306b\u53ce\u675f\u3055\u305b\u308b\u3068\u5fc5\u7136\u7684\u306b\u904e\u5b66\u7fd2\u306b\u306a\u308b\u306e\u3067\u3059\u3002\n\u3000\u5358\u8a9e\u306e\u7a2e\u985e\u6570\u3000<<\u3000\u6587\u66f8\u6570\n\u3068\u306a\u308b\u3088\u3046\u306b\u5358\u8a9e\u3092\u7d5e\u308a\u8fbc\u307e\u306d\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306f\u3001\u624b\u4f5c\u696d\u3067\u4eba\u5de5\u77e5\u80fd\u95a2\u9023\u3067\u983b\u51fa\u3059\u308b350\u8a9e\u307b\u3069\u3092 thesaurus.csv \u306b\u767b\u9332\u3057\u3001\u305d\u308c\u3089\u306e\u307f\u3092\u7528\u3044\u3066\u30b3\u30fc\u30d1\u30b9\u3092\u4f5c\u3063\u305f\u5834\u5408\u306e\u7d50\u679c\u3067\u3059\u3002\n\u30c8\u30d4\u30c3\u30af\u6570\u306f training \u306e\u5165\u529b\u3067\u3059\u304c\u3001perplexity \u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306a\u30c8\u30d4\u30c3\u30af\u6570\u3092\u63a2\u3059\u3053\u3068\u3067\u3001\u5224\u65ad\u3092\u81ea\u52d5\u5316\u3067\u304d\u307e\u3059\u3002\u52d5\u4f5c\u4f8b\u3067\u306f\u3042\u3089\u304b\u3058\u3081\u30c8\u30d4\u30c3\u30af\u6570\u304c10\u3067perplexity \u304c\u6700\u5c0f\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n(*1)\u306b\u3088\u308c\u3070\u3001\n\n\u30d1\u30fc\u30d7\u30ec\u30ad\u30b7\u30c6\u30a3\u306e\u9006\u6570\u304c\u6587\u66f8\u4e2d\u306e\u5358\u8a9e\u306e\u51fa\u73fe\u3092\u4e88\u6e2c\u3067\u304d\u308b\u5ea6\u5408\u3044\u3092\u793a\u3057\u3066\u304a\u308a\u3001\u3088\u3063\u3066\u6700\u9ad8\u306f1\u3067\u3001\n\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u304c\u60aa\u304f\u306a\u308b\u307b\u3069\u5927\u304d\u306a\u5024\u306b\u306a\u308a\u307e\u3059(2\u6841\u306a\u3089\u3088\u3057\u30013\u6841\u524d\u534a\u3067\u307e\u3042\u307e\u3042\u3001\u305d\u308c\u4ee5\u5f8c\u306f\u60aa\u3044\u3001\n\u3068\u3044\u3046\u611f\u3058\u3067\u30011\u6841\u306e\u5834\u5408\u306f\u9006\u306b\u30e2\u30c7\u30eb\u3084\u30d1\u30fc\u30d7\u30ec\u30ad\u30b7\u30c6\u30a3\u306e\u7b97\u51fa\u65b9\u6cd5\u306b\u8aa4\u308a\u304c\u306a\u3044\u304b\u898b\u76f4\u3057\u305f\u65b9\u304c\n\u3088\u3044\u3067\u3059)\u3002\n\n\u5b9f\u884c\u4f8b\u3067\u306f1920 article(90%)\u3092training\u3001210 article(10%)\u3092 test \u306b\u7528\u30442\u3001test corpus \u306e perplexity \u304c 68.4 \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30c8\u30d4\u30c3\u30af\u9069\u5408\u78ba\u7387\u3092\u8a08\u7b97\u3059\u308b\u8a08\u7b97\u5f0f\u306e list \u306f\u3001\u4e0b\u8a18\u306e\u901a\u308a\n[(0,\n  '0.268*\u753b\u50cf + 0.124*\uff24\uff45\uff4c\uff4c + 0.049*\uff23\uff2e\uff2e + 0.043*\u6df1\u5c64\u5b66\u7fd2 + 0.038*\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af + '\n  '0.026*\u6a5f\u68b0\u5b66\u7fd2 + 0.025*\uff23\uff48\uff41\uff49\uff4e\uff45\uff52 + 0.024*\uff27\uff30\uff35 + 0.023*\u8a18\u4e8b + 0.022*\u753b\u50cf\u8a8d\u8b58'),\n (1,\n  '0.135*\u6a5f\u68b0\u5b66\u7fd2 + 0.121*\uff30\uff59\uff54\uff48\uff4f\uff4e + 0.102*\u8a18\u4e8b + 0.055*\uff23\uff48\uff41\uff49\uff4e\uff45\uff52 + 0.052*\uff24\uff45\uff4c\uff4c + '\n  '0.037*\u6df1\u5c64\u5b66\u7fd2 + 0.033*\uff4e\uff55\uff4d\uff50\uff59 + 0.023*\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af + 0.019*\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af + 0.019*\uff33\uff50\uff41\uff52\uff4b'),\n (2,\n  '0.111*\u8a18\u4e8b + 0.097*\u4e88\u6e2c + 0.090*\u30e9\u30f3\u30ad\u30f3\u30b0 + 0.071*\u5927\u5b66 + 0.055*\u691c\u7d22 + 0.033*\u4eba\u5de5\u77e5\u80fd + '\n  '0.032*\uff39\uff41\uff48\uff4f\uff4f + 0.032*\uff24\uff45\uff4c\uff4c + 0.029*\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9 + 0.026*\u7279\u8a31'),\n (3,\n  '0.121*\uff32\uff55\uff42\uff59 + 0.100*\u30b2\u30fc\u30e0 + 0.090*\uff21\uff4c\uff50\uff48\uff41\uff27\uff4f + 0.085*\u56f2\u7881 + 0.077*\u8a18\u4e8b + 0.076*\u4eba\u5de5\u77e5\u80fd + '\n  '0.053*\uff27\uff4f\uff4f\uff47\uff4c\uff45 + 0.052*\uff2d\uff49\uff43\uff52\uff4f\uff53\uff4f\uff46\uff54 + 0.047*\uff34\uff41\uff59 + 0.034*\uff34\uff57\uff49\uff54\uff54\uff45\uff52'),\n (4,\n  '0.113*\uff34\uff45\uff4e\uff53\uff4f\uff52\uff26\uff4c\uff4f\uff57 + 0.103*\uff2c\uff33\uff34\uff2d + 0.070*\uff24\uff45\uff4c\uff4c + 0.068*\uff23\uff2e\uff2e + 0.063*\uff4c\uff49\uff4e\uff45 + '\n  '0.058*\uff34\uff48\uff45\uff41\uff4e\uff4f + 0.043*\uff33\uff30\uff21\uff32\uff31\uff2c + 0.038*\uff2b\uff45\uff52\uff41\uff53 + 0.037*\uff30\uff59\uff54\uff48\uff4f\uff4e + 0.035*\uff2d\uff2e\uff29\uff33\uff34'),\n (5,\n  '0.130*\u30af\u30e9\u30a6\u30c9 + 0.096*\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3 + 0.079*\uff21\uff37\uff33 + 0.079*\uff21\uff4d\uff41\uff5a\uff4f\uff4e + 0.075*\u8a18\u4e8b + 0.057*\uff29\uff4f\uff34 '\n  '+ 0.042*\u30d3\u30c3\u30b0\u30c7\u30fc\u30bf + 0.031*\u66f8\u7c4d + 0.023*\u653b\u6483 + 0.022*\uff29\uff22\uff2d'),\n (6,\n  '0.177*\uff27\uff4f\uff4f\uff47\uff4c\uff45 + 0.137*\uff21\uff30\uff29 + 0.100*\u691c\u7d22 + 0.071*\u8a18\u4e8b + 0.055*\uff26\uff41\uff43\uff45\uff42\uff4f\uff4f\uff4b + '\n  '0.031*\uff37\uff41\uff54\uff53\uff4f\uff4e + 0.030*\uff29\uff22\uff2d + 0.026*\uff22\uff4c\uff55\uff45\uff4d\uff49\uff58 + 0.026*\u6a5f\u68b0\u5b66\u7fd2 + 0.025*\uff34\uff57\uff49\uff54\uff54\uff45\uff52'),\n (7,\n  '0.351*\u4eba\u5de5\u77e5\u80fd + 0.093*\u30ed\u30dc\u30c3\u30c8 + 0.064*\u6df1\u5c64\u5b66\u7fd2 + 0.049*\u8a18\u4e8b + 0.032*\u5927\u5b66 + 0.029*\u6a5f\u68b0\u5b66\u7fd2 + '\n  '0.020*\u6771\u4eac\u5927\u5b66 + 0.019*\uff26\uff41\uff43\uff45\uff42\uff4f\uff4f\uff4b + 0.019*\u6620\u753b + 0.019*\uff27\uff4f\uff4f\uff47\uff4c\uff45'),\n (8,\n  '0.188*\uff42\uff4f\uff54 + 0.180*\uff2d\uff49\uff43\uff52\uff4f\uff53\uff4f\uff46\uff54 + 0.057*\uff21\uff5a\uff55\uff52\uff45 + 0.056*\uff25\uff4c\uff41\uff53\uff54\uff49\uff43\uff53\uff45\uff41\uff52\uff43\uff48 + '\n  '0.042*\uff57\uff4f\uff52\uff442\uff56\uff45\uff43 + 0.038*\u6a5f\u68b0\u5b66\u7fd2 + 0.033*\uff4c\uff49\uff4e\uff45 + 0.030*\u691c\u7d22 + 0.027*\uff2b\uff49\uff42\uff41\uff4e\uff41 + '\n  '0.022*\u81ea\u7136\u8a00\u8a9e\u51e6\u7406'),\n (9,\n  '0.102*\u8a18\u4e8b + 0.094*\uff34\uff57\uff49\uff54\uff54\uff45\uff52 + 0.079*\u30ed\u30dc\u30c3\u30c8 + 0.060*\uff29\uff4f\uff34 + 0.058*\u30bd\u30cb\u30fc + 0.041*\u5f37\u5316\u5b66\u7fd2 '\n  '+ 0.038*\uff34\uff45\uff4e\uff53\uff4f\uff52\uff26\uff4c\uff4f\uff57 + 0.029*\uff2a\uff41\uff56\uff41 + 0.028*\uff24\uff45\uff45\uff50\\u3000\uff31\u2212\uff2e\uff45\uff54\uff57\uff4f\uff52\uff4b + 0.027*\u30e9\u30f3\u30ad\u30f3\u30b0')]\n\nperplexity \u304c 68.4 \u3068\u3044\u3046\u306e\u306f\u305d\u308c\u307b\u3069\u60aa\u304f\u306a\u3044\u3088\u3046\u3067\u3059\u304c\u3001\u3053\u306e\u8a08\u7b97\u5f0f\u3092\u898b\u308b\u9650\u308a\u4eba\u9593\u306e\u76ee\u3067\u898b\u3066\u30c8\u30d4\u30c3\u30af\u306e\u610f\u5473\u3092\u8aad\u307f\u53d6\u308b\u306e\u306f\u304b\u306a\u308a\u96e3\u3057\u3044\u3088\u3046\u306b\u611f\u3058\u307e\u3059\u3002\n\u9061\u3063\u3066\u3001(*1)\u306e\u4f8b\u3067\u306f\u3082\u3068\u3082\u3068\u306e article \u304b\u3089\u62bd\u51fa\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3068\u3057\u3066\u3001\n\n\u300015\u5e2d\u4ee5\u4e0a\u306e\u5927\u578b\u30b5\u30ed\u30f3/\u99d0\u8eca\u5834\u3042\u308a/\u591c19\u6642\u4ee5\u964d\u3082\u53d7\u4ed8OK/\u5e74\u4e2d\u7121\u4f11/\u6700\u5bc4\u308a\u99c5\u304b\u3089\u5f92\u6b693\u5206\u4ee5\u5185\u306b\u3042\u308b/\n\u3000\u30d8\u30a2\u30bb\u30c3\u30c8/\u30cd\u30a4\u30eb/\u671d10\u6642\u524d\u3067\u3082\u53d7\u4ed8OK/\u30c9\u30ea\u30f3\u30af\u30b5\u30fc\u30d3\u30b9\u3042\u308a/\u30ab\u30fc\u30c9\u652f\u6255\u3044OK/\u5973\u6027\u30b9\u30bf\u30c3\u30d5\u304c\u591a\u3044/\n\u3000\u500b\u5ba4\u3042\u308a/\u7981\u7159/\u534a\u500b\u5ba4\u3042\u308a\n\n\u306e\u4f8b\u306e\u3088\u3046\u306a\u8aac\u660e\u3092 '/' \u3067\u5206\u5272\u3057\u305f\u3082\u306e\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u81ea\u7136\u8a00\u8a9e\u304b\u3089\u62bd\u51fa\u3057\u305f\u30c8\u30fc\u30af\u30f3\u3068\u3044\u3046\u3088\u308a\u3001\u3080\u3057\u308d\u3001\u76f4\u63a5\u7684\u306a\u7279\u5fb4\u91cf\u3068\u3044\u3046\u3079\u304d\u3082\u306e\u3067\u3059\u3002\n\u3053\u306e\u6709\u5229\u306a\u30c8\u30fc\u30af\u30f3\u3067 2\u30c8\u30d4\u30c3\u30af\u3067\u306e perplexity \u304c 17.1 \u3067\u3059\u304b\u3089\u3001\u4eca\u56de\u306e\u5b9f\u884c\u4f8b\u3082\u3001\u305d\u308c\u307b\u3069\u4e0d\u624b\u969b\u304c\u3042\u3063\u305f\u305f\u3081\u3068\u3082\u601d\u3048\u307e\u305b\u3093\u3002\n\u9006\u306b\u8a00\u3048\u3070\u3001\u4eca\u56de\u306e\u5b9f\u884c\u4f8b\u306e\u3088\u3046\u306a\u898f\u6a21\u3068\u5185\u5bb9\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3001\u76ee\u3092\u307f\u306f\u308b\u3088\u3046\u306a\u6559\u5e2b\u306a\u3057\u5206\u985e\u3068\u3044\u3046\u306e\u306f\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3067\u306f\u96e3\u3057\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u6539\u5584\u304c\u53ef\u80fd\u3067\u3042\u308b\u3068\u3057\u305f\u3089\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u70b9\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u30fbWebstemmer\u306a\u3069\u3092\u4f7f\u3063\u3066\u771f\u306e\u672c\u6587\u3092\u62bd\u51fa\u3059\u308b\u3002\n\u30fbthesaurus.csv \u306e\u30c1\u30e5\u30fc\u30f3\u30ca\u30c3\u30d7\n\u305f\u3060\u3001\u5f8c\u8005\u306b\u3064\u3044\u3066\u306f\u540c\u7fa9\u8a9e\u95a2\u4fc2\u3092\u624b\u4f5c\u696d\u3067\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3059\u308b\u306e\u3067\u306f\u4f55\u306e\u305f\u3081\u306e\u81ea\u52d5\u5316\u306a\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001\u65b0\u898f\u4f01\u696d\u304c\u6a5f\u68b0\u5b66\u7fd2\u95a2\u9023\u306b\u53c2\u5165\u3057\u3066\u304d\u305f\u3089\u3001\u305d\u308c\u3092\u5224\u65ad\u3057\u3066 thesaurus.csv \u306b\u8ffd\u52a0\u305b\u306d\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u6700\u8fd1\u767a\u8868\u3055\u308c\u305f JUMAN++ \u306f\u3001\n\u3000\u65b0\u5f62\u614b\u7d20\u89e3\u6790\u5668JUMAN++\u3092\u89e6\u3063\u3066\u307f\u305f\u3051\u3069\u601d\u3063\u305f\u3088\u308a\u9ad8\u7cbe\u5ea6\u3067MeCab\u304b\u3089\u4e57\u308a\u63db\u3048\u3088\u3046\u304b\u3068\u601d\u3063\u305f\u8a71\n\u3092\u8aad\u3080\u9650\u308a\u554f\u984c\u306e\u89e3\u6c7a\u306b\u6709\u52b9\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4eca\u5f8c\u306e\u8ab2\u984c\u3067\u3059\u3002\n\n\n\n\n\u540c\u3058 API \u306b\u306a\u308b\u3088\u3046\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\u3053\u306e\u8abf\u67fb\u3092\u3057\u305f\u5f53\u6642\u306f2000\u8a18\u4e8b\u304f\u3089\u3044\u3067\u3057\u305f\u304c\u3001\u73fe\u5728\u306f5000\u8a18\u4e8b\u304f\u3089\u3044\u306b\u5897\u3048\u307e\u3057\u305f\u3002\u00a0\u21a9\n\n\n\n\u6a5f\u68b0\u5b66\u7fd2\u95a2\u9023\u60c5\u5831\u3092\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3067\u5206\u985e\u3059\u308b\n==========================================\n\n[\u6a5f\u68b0\u5b66\u7fd2\u95a2\u9023\u60c5\u5831\u306e\u53ce\u96c6\u3068\u5206\u985e(\u69cb\u60f3)](http://qiita.com/suchowan/items/459062590f7134dfc138)\u306e\u2777\u306e\u90e8\u5206\u306b\u95a2\u9023\u3059\u308b\u8a18\u4e8b\u3067\u3059\u3002\n\n\u5b9f\u969b\u306b\u8abf\u3079\u305f\u6642\u70b9\u304b\u3089\u6570\u304b\u6708\u307b\u3069\u6642\u9593\u304c\u7d4c\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u73fe\u72b6\u3068\u82e5\u5e72\u305a\u308c\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001\u6e80\u8db3\u3067\u304d\u308b\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u3042\u3089\u304b\u3058\u3081\u304a\u65ad\u308a\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\nQiita \u306b\u3082 Python \u306b\u3082\u6163\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3044\u308d\u3044\u308d\u304a\u304b\u3057\u306a\u8a18\u8ff0\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u3046\u3044\u3046\u3068\u3053\u308d\u306f\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308c\u3070\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u8aac\u660e\u3059\u308b\u51e6\u7406\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u6d41\u308c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3000\u2776\u30b5\u30a4\u30c8\u306e\u30af\u30ed\u30a6\u30eb\n\u3000\u3000\u30af\u30ed\u30a6\u30eb\u3057\u305f\u6587\u66f8(article)\u3092 bookmarks.crawled \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u7f6e\u304d\u307e\u3059\u3002\n\u3000\u3000\u3000\u2193\n\u3000\u2777article\u306ePython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\n\u3000\u3000\u6587\u66f8(article)\u5358\u4f4d\u3067 Python\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\u3057\u307e\u3059\u3002\n\u3000\u3000\u3000\u2193\n\u3000\u2778\u30b3\u30fc\u30d1\u30b9\u306ePython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\n\u3000\u3000\u6587\u66f8\u7fa4\u5168\u4f53\u3092\u30b3\u30fc\u30d1\u30b9\u3068\u3057\u3066Python\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\u3057\u307e\u3059\u3002\n\u3000\u3000\u3000\u2193\n\u3000\u2779\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\n\u3000\u3000\u3053\u306e\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u3063\u3066\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\u3092\u8a66\u307f\u307e\u3059\u3002\n\nthesaurus \u306e\u90e8\u5206\u306f\u7d4c\u7def\u304c\u524d\u5f8c\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306f\u3067\u304d\u308b\u3060\u3051\u9806\u3092\u8ffd\u3063\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n\u2776\u30b5\u30a4\u30c8\u306e\u30af\u30ed\u30a6\u30eb\n------------------\n\n[\u6a5f\u68b0\u5b66\u7fd2\u95a2\u9023\u60c5\u5831\u306e\u53ce\u96c6\u3068\u5206\u985e(\u69cb\u60f3)](http://qiita.com/suchowan/items/459062590f7134dfc138)\u306e\u2777\u3067\u306f FESS \u3067\u53ce\u96c6\u3057\u305f\u7d50\u679c\u3092\u76f4\u63a5\u306b\u5165\u529b\u3068\u3059\u308b\u30b7\u30ca\u30ea\u30aa\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f[\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d7\u30ec\u30a4\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u5909\u63db](http://qiita.com/suchowan/items/6556756d2e816c7255b7#5-%E3%83%97%E3%83%AC%E3%82%A4%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%83%89%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA)\u306e crawl.rb \u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u3092 bookmarks.crawled \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u7f6e\u3044\u3066\u5165\u529b\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\nFESS \u3067\u53ce\u96c6\u3057\u305f\u7d50\u679c\u3092\u76f4\u63a5\u306b\u5165\u529b\u3068\u3059\u308b\u3068\u3001\n\n\u30fb\u53e4\u3044\u6587\u66f8\u304c Expire \u3057\u3066\u3057\u307e\u3046\n\u30fb\u624b\u52d5\u306b\u3088\u308b\u8a18\u4e8b\u5206\u985e\u6642\u306b\u9664\u5916\u3057\u305f\u91cd\u8907\u8a18\u4e8b\u3084\u91cd\u8981\u5ea6\u306e\u4f4e\u3044\u8a18\u4e8b\u304c\u5fa9\u6d3b\u3057\u3066\u3057\u307e\u3046\n\n\u305f\u3081\u3067\u3059\u3002\n\n\u2777article\u306ePython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\n-------------------------------\n\nbookmarks.crawled \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306eHTML\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001Python \u306e Article\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n```\n  Article \u30af\u30e9\u30b9\n    \u5c5e\u6027\n      path      HTML\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\n      contents  HTML\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067HTML\u30bf\u30b0\u306a\u3069\u3092\u9664\u53bb\u3057\u305f\u3082\u306e\n      tokens    contents \u306b\u3042\u308b\u540d\u8a5e\u306e\u30ea\u30b9\u30c8(list of string)\n```\n\n##\u2605HTML\u30d5\u30a1\u30a4\u30eb\u306e\u672c\u6587\u62bd\u51fa\n\n[Python\u3067\u30d6\u30ed\u30b0\u306eHTML\u304b\u3089\u672c\u6587\u62bd\u51fa 2015](http://orangain.hatenablog.com/entry/content-extraction-from-html-in-python)\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u8abf\u67fb\u7d50\u679c\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u672c\u683c\u7684\u306b\u5b9f\u88c5\u3059\u308b\u306a\u3089 [Webstemmer](http://futureinsight.info/entry/20090422/1240328288)\u3092\u5229\u7528\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304c\u3001\u3042\u3089\u304b\u3058\u3081\u30d6\u30ed\u30b0\u30b5\u30a4\u30c8\u3054\u3068\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u751f\u6210\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u3001\u7169\u96d1\u306b\u306a\u308b\u305f\u3081\u4eca\u56de\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u5b9f\u88c5\u3057\u305f Article \u30af\u30e9\u30b9\u3067\u306f [extractcontent](https://github.com/petitviolet/python-extractcontent)\u306e\u6b63\u898f\u8868\u73fe\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n##\u2605\u30c8\u30fc\u30af\u30f3\u306e\u5207\u308a\u51fa\u3057\n\n###(1) janome\n\nPure Python \u306e\u65e5\u672c\u8a9e\u5f62\u614b\u7d20\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30ea [janome](http://mocobeta.github.io/janome/) \u3092\u7528\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u8f9e\u66f8\u306f MeCab \u3068\u307b\u307c\u540c\u3058\u69cb\u6210\u3067\u3001\u82f1\u5b57\u306e\u5358\u8a9e\u306f\u5168\u89d2\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u524d\u51e6\u7406\u306b\u534a\u89d2\u5168\u89d2\u5909\u63db\u30e9\u30a4\u30d6\u30e9\u30ea [mojimoji](http://qiita.com/ikuyamada/items/fea6c8f81e7cac7cf318)\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n```py:article_janome.py\nimport codecs\nimport re\nimport mojimoji\nfrom janome.tokenizer import Tokenizer\n\nclass Article:\n\n    encodings = [\n        \"utf-8\",\n        \"cp932\",\n        \"euc-jp\",\n        \"iso-2022-jp\",\n        \"latin_1\"\n    ]\n\n    tokenizer = Tokenizer(\"user_dic.csv\", udic_type=\"simpledic\", udic_enc=\"utf8\")\n\n    def __init__(self,path):\n        print(path)\n        self.path = path\n        self.contents = self.preprocess(self.get_contents(path))\n        self.tokens = [token.surface for token in self.tokenizer.tokenize(self.contents) if re.match(\"\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e|\u540d\u8a5e,(\u56fa\u6709|\u4e00\u822c|\u30b5\u5909)\", token.part_of_speech)]\n\n    def get_contents(self,path):\n        exceptions = []\n        for encoding in self.encodings:\n            try:\n                all = codecs.open(path, 'r', encoding).read()\n                parts = re.split(\"(?i)<(body|frame)[^>]*>\", all, 1)\n                if len(parts) == 3:\n                    head, void, body = parts\n                else:\n                    print('Cannot split ' + path)\n                    body = all\n                return re.sub(\"<[^>]+?>\", \"\", re.sub(r\"(?is)<(script|style|select|noscript)[^>]*>.*?</\\1\\s*>\",\"\", body))\n            except UnicodeDecodeError:\n                continue\n        print('Cannot detect encoding of ' + path)\n        print(exceptions)\n        return None\n\n    def get_title(self,path):\n        return re.split('\\/', path)[-1]\n\n    def preprocess(self, text):\n        text = re.sub(\"&[^;]+;\",  \" \", text)\n        text = mojimoji.han_to_zen(text, digit=False)\n        text = re.sub('(\\s|\u3000|\uff03)+', \" \", text)\n        return text\n```\n\n###(2) \u8f9e\u66f8\u306e\u62e1\u5f35\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306eIPA\u8f9e\u66f8\u3067\u306f\u300c\u4eba\u5de5\u77e5\u80fd\u300d\u306f\u300c\u4eba\u5de5\u300d\u300c\u77e5\u80fd\u300d\u306e\u3088\u3046\u306b\uff12\u8a9e\u306b\u5206\u89e3\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001user_dic.csv \u306b\uff11\u8a9e\u3068\u3057\u305f\u3044\u7528\u8a9e\u3092\u767b\u9332\u3057\u3066janome \u304b\u3089\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u305d\u306e\u5f8c\u3001\n\n\u3000[mecab-ipadic-NEologd : Neologism dictionary for MeCab](https://github.com/neologd/mecab-ipadic-neologd)\n\u3000[Ubuntu14.04\u3067mecab\u306e\u8f9e\u66f8\u306bWikipedia\u3068\u306f\u3066\u306a\u5358\u8a9e\u3092\u8ffd\u52a0](http://toukei.runble1.com/ubuntu-mecab-dictionary-add/)\n\u3000[\u5f62\u614b\u7d20\u89e3\u6790\u306e\u305f\u3081\u306b Wikipedia \u3068\u306f\u3066\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u8f9e\u66f8\u3092\u751f\u6210\u3057\u5229\u7528\u3059\u308b](http://qiita.com/ynakayama/items/388c82cbe14c65827769)\n\n\u306a\u3069\u3082\u898b\u3064\u3051\u307e\u3057\u305f\u304c\u3001thesaurus.csv \u3092\u4f7f\u7528\u3059\u308b\u65b9\u91dd\u306b\u8ee2\u63db\u3057\u305f\u5f8c\u3060\u3063\u305f\u305f\u3081\u307e\u3060\u8a66\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n###(3) thesaurus\n\n\u5f8c\u8ff0\u306e\u901a\u308a\u65e5\u672c\u8a9e\u5f62\u614b\u7d20\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u308b\u30c8\u30fc\u30af\u30f3\u5207\u308a\u51fa\u3057\u3067\u306f\u3001[perplexity](http://www.slideshare.net/hoxo_m/perplexity)\u304c\u8a31\u5bb9\u7bc4\u56f2\u5185\u306b\u5165\u3089\u305a\u3001\u30c8\u30d4\u30c3\u30af\u306e\u62bd\u51fa\u304c\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u624b\u4f5c\u696d\u3067\u4eba\u5de5\u77e5\u80fd\u95a2\u9023\u3067\u983b\u51fa\u3059\u308b350\u8a9e\u307b\u3069\u3092 thesaurus.csv \n\n```thesaurus.csv(\u4f8b)\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406,NLP,Natural Language Processing,natural language processing\n\u8cea\u554f\u5fdc\u7b54\n\u97f3\u58f0\u8a8d\u8b58\nAlphaGo,\u30a2\u30eb\u30d5\u30a1\u7881\n\u2026\n```\n\n\u306b\u767b\u9332\u3057\u3001\u30d2\u30c3\u30c8\u3057\u305f\u5358\u8a9e\u306e\u307f\u30c8\u30fc\u30af\u30f3\u3068\u3057\u3066\u5207\u308a\u51fa\u3059\u51e6\u7406\u3092\u3001\n\n```py:thesaurus.py\nimport re\nimport mojimoji\n\nclass Thesaurus:\n\n    def __init__(self,path):\n        map = dict()\n        with open(path, 'r') as thesaurus:\n            for line in thesaurus.readlines():\n                words = [mojimoji.han_to_zen(word, digit=False) for word in re.split(',', line.strip())]\n                for word in words:\n                    if word in map:\n                        print('Word duplicated: ' + word)\n                        raise\n                    map[word] = words[0]\n        self.words = map\n        self.re    = re.compile(\"|\".join(sorted(map.keys(), key=lambda x: -len(x))))\n\n    def tokenize(self,sentence):\n        for token in re.finditer(self.re, sentence):\n            yield(Token(self.words[token.group()]))\n\nclass Token:\n\n    def __init__(self, surface):\n        self.surface = surface\n        self.part_of_speech = \"\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e\"\n```\n\n\u306b\u8a18\u8ff0\u3057\u3001\u65e5\u672c\u8a9e\u5f62\u614b\u7d20\u89e3\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7f6e\u304d\u63db\u3048\u307e\u3057\u305f[^1]\u3002\n\n```py:article.py\nimport codecs\nimport re\nimport mojimoji\nfrom thesaurus import Thesaurus\n\nclass Article:\n\n    encodings = [\n        \"utf-8\",\n        \"cp932\",\n        \"euc-jp\",\n        \"iso-2022-jp\",\n        \"latin_1\"\n    ]\n\n    tokenizer = Thesaurus('thesaurus.csv')\n\n    def __init__(self,path):\n        print(path)\n        self.path = path\n        self.contents = self.preprocess(self.get_contents(path))\n        self.tokens = [token.surface for token in self.tokenizer.tokenize(self.contents) if re.match(\"\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e|\u540d\u8a5e,(\u56fa\u6709|\u4e00\u822c|\u30b5\u5909)\", token.part_of_speech)]\n\n    def get_contents(self,path):\n        exceptions = []\n        for encoding in self.encodings:\n            try:\n                all = codecs.open(path, 'r', encoding).read()\n                parts = re.split(\"(?i)<(body|frame)[^>]*>\", all, 1)\n                if len(parts) == 3:\n                    head, void, body = parts\n                else:\n                    print('Cannot split ' + path)\n                    body = all\n                return re.sub(\"<[^>]+?>\", \"\", re.sub(r\"(?is)<(script|style|select|noscript)[^>]*>.*?</\\1\\s*>\",\"\", body))\n            except UnicodeDecodeError:\n                continue\n        print('Cannot detect encoding of ' + path)\n        print(exceptions)\n        return None\n\n    def get_title(self,path):\n        return re.split('\\/', path)[-1]\n\n    def preprocess(self, text):\n        text = re.sub(\"&[^;]+;\",  \" \", text)\n        text = mojimoji.han_to_zen(text, digit=False)\n        return text\n```\n\n\u2778\u30b3\u30fc\u30d1\u30b9\u306ePython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\n--------------------------------\n\n\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3067\u306f\u6587\u7ae0\u3092BOW(Bag of Words, list of (\u5358\u8a9eID,\u51fa\u73fe\u6570))\u3067\u6271\u3044\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u4e0b\u8a18\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n##\u2605Corpus \u30af\u30e9\u30b9\n```\n    \u5c5e\u6027\n      articles   (HTML\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9:Article\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\u304b\u3089\u306a\u308b OrderedDictionary\n      keys       HTML\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u306elist(list of string)\n      size       Article\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570\n      texts      \u30b3\u30fc\u30d1\u30b9\u3092\u69cb\u6210\u3059\u308b\u30c8\u30fc\u30af\u30f3(list of (list of string))\n      corpus     texts \u3092 list of BOW \u306b\u5909\u63db\u3057\u305f\u3082\u306e\n    \u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9 save/load \u3092\u6301\u3061\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u5b58\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n```\n\n##\u2605Corpora \u30af\u30e9\u30b9\n```\n    \u5c5e\u6027\n      training   training \u7528\u306e Corpus \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n      test       test \u7528\u306e Corpus \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n      dictionary training, test \u5171\u901a\u306b\u4f7f\u7528\u3059\u308b gensim.corpora.Dictionary\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n                 (\u5358\u8a9e\u306eID(integer)\u3068\u8868\u73fe(string)\u306e\u5bfe\u5fdc\u95a2\u4fc2\u3092\u4fdd\u6301)\n```\n\n\n```py:corpus.py\nimport pickle\nfrom collections import defaultdict\nfrom gensim import corpora\n\nclass Corpora:\n\n    def __init__(self, training, test, dictionary):\n        self.training   = training\n        self.test       = test\n        self.dictionary = dictionary\n\n    def save(self, title):\n        self.training.save(title+'_training')\n        self.test.save(title+'_test')\n        self.dictionary.save(title+\".dict\")\n\n    @classmethod\n    def load(cls, title):\n        training   = Corpus.load(title+'_training')\n        test       = Corpus.load(title+'_test')\n        dictionary = corpora.Dictionary.load(title+\".dict\")\n        return cls(training, test, dictionary)\n\n    @classmethod\n    def generate(cls, training, test):\n        training_corpus = Corpus.generate(training)\n        test_corpus     = Corpus.generate(test)\n        all_texts       = training_corpus.texts + test_corpus.texts\n        frequency       = defaultdict(int)\n        for text in all_texts:\n            for token in text:\n                frequency[token] += 1\n        all_texts  = [[token for token in text if frequency[token] > 1] for text in all_texts]\n        dictionary = corpora.Dictionary(all_texts)\n        training_corpus.mm(dictionary)\n        test_corpus.mm(dictionary)\n        return cls(training_corpus, test_corpus, dictionary)\n\nclass Corpus:\n\n    def __init__(self, articles):\n        self.articles  = articles\n        self.keys      = list(articles.keys())\n        self.size      = len(articles.keys())\n\n    def article(self, index):\n        return self.articles[self.keys[index]]\n\n    def mm(self, dictionary):\n        values_set = set(dictionary.values())\n        self.texts  = [[token for token in text if token in values_set] for text in self.texts]\n      # print(self.texts[0])\n        self.corpus = [dictionary.doc2bow(text) for text in self.texts]\n\n    def save(self, title):\n        with open(title+\".pickle\", 'wb') as f:\n            pickle.dump(self.articles, f)\n        corpora.MmCorpus.serialize(title+\".mm\", self.corpus)\n\n    @classmethod\n    def load(cls, title):\n        with open(title+\".pickle\", 'rb') as f:\n            articles = pickle.load(f)\n        corpus = cls(articles)\n        corpus.corpus = corpora.MmCorpus(title+\".mm\")\n        return corpus\n\n    @classmethod\n    def generate(cls, articles):\n        corpus = cls(articles)\n        corpus.texts = [articles[key].tokens for key in articles.keys()]\n        return corpus\n\n```\n\n\u3053\u3053\u307e\u3067\u306f\u30aa\u30f3\u30d7\u30ec\u30df\u30b9\u306a\u30c4\u30fc\u30eb\u306b\u4f55\u3092\u7528\u3044\u308b\u304b\u306b\u3088\u3089\u305a\u306b\u5171\u901a\u306b\u5fc5\u8981\u3068\u306a\u308b\u6280\u8853\u3067\u3059\u3002\n\n\u2779\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\n--------------------------\n\n\u4ee5\u4e0a\u306e\u9053\u5177\u7acb\u3066\u3092\u6e96\u5099\u3057\u3066\u3001\n\n\u3000[\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210](http://tech-sketch.jp/2015/09/topic-model.html) \u2026 (*1)\n\n\u3092\u53c2\u8003\u306b\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\n```py:test_view_LDA.py\nimport pprint\nimport logging\nimport glob\nimport numpy as np\nimport matplotlib.pylab as plt\nfrom collections import OrderedDict\nfrom gensim import corpora, models, similarities\nfrom pprint import pprint  # pretty-printer\nfrom corpus import Corpus, Corpora\nfrom article import Article\n\n#logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)\n\ntopic_range = range(10, 11)\ntraining_percent = 90\ntest_percent = 10\npath_pattern = '/home/samba/suchowan/links/bookmarks.crawled/**/*.html'\n\ndef corpus_pair(path, training_range, test_range):\n    all_paths         = glob.glob(path, recursive=True)\n    training_paths    = [v for i, v in enumerate(all_paths) if ((i * 2017) % 100) in training_range]\n    test_paths        = [v for i, v in enumerate(all_paths) if ((i * 2017) % 100) in test_range    ]\n    training_articles = OrderedDict([(path,Article(path)) for path in training_paths])\n    test_articles     = OrderedDict([(path,Article(path)) for path in test_paths])\n    return  Corpora.generate(training_articles, test_articles)\n\ndef calc_perplexity(m, c):\n    return np.exp(-m.log_perplexity(c))\n\ndef search_model(pair):\n    most = [1.0e15, None]\n    print(\"dataset: training/test = {0}/{1}\".format(pair.training.size, pair.test.size))\n    \n    for t in topic_range:\n        m  = models.LdaModel(corpus=pair.training.corpus, id2word=pair.dictionary, num_topics=t, iterations=500, passes=10)\n        p1 = calc_perplexity(m, pair.training.corpus)\n        p2 = calc_perplexity(m, pair.test.corpus)\n        print(\"{0}: perplexity is {1}/{2}\".format(t, p1, p2))\n        if p2 < most[0]:\n            most[0] = p2\n            most[1] = m\n    \n    return most[0], most[1]\n\npair = corpus_pair(path_pattern, range(0, training_percent+1), range(training_percent, training_percent+test_percent+1))\npair.save('article_contents')\nperplexity, model = search_model(pair)\nprint(\"Best model: topics={0}, perplexity={1}\".format(model.num_topics, perplexity))\n\ndef show_document_topics(c, m, r):\n\n    # make document/topics matrix\n    t_documents = OrderedDict()\n    for s in r:\n      # ts = m.__getitem__(c[s], -1)\n        ts = m[c[s]]\n        max_topic = max(ts, key=lambda x: x[1])\n        if max_topic[0] not in t_documents:\n            t_documents[max_topic[0]] = []\n        t_documents[max_topic[0]] += [(s, max_topic[1])]\n    \n    return t_documents\n    \ntopic_documents = show_document_topics(pair.test.corpus, model, range(0,pair.test.size))\n\nfor topic in topic_documents.keys():\n    print(\"Topic #{0}\".format(topic))\n    for article in topic_documents[topic]:\n       print(article[0], pair.test.article(article[0]).path)\n\npprint(model.show_topics())\n```\n\n\u4f7f\u7528\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u306f [gensim](https://radimrehurek.com/gensim/index.html) \u3067\u3001[tfidf, lsi, lda\u3092\u4f7f\u3063\u305f\u30c4\u30a4\u30c3\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97](http://hivecolor.com/id/88) \u3084 [Python\u3067\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u3057\u3066\u307f\u308b_\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb](http://esu-ko.hatenablog.com/entry/2016/03/24/Python%E3%81%A7%E8%87%AA%E7%84%B6%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B_%E3%83%88%E3%83%94%E3%83%83%E3%82%AF%E3%83%A2%E3%83%87%E3%83%AB)\u3082\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n##\u2605training\n\n```\n  \u5165\u529b : training \u30b3\u30fc\u30d1\u30b9 - list of (list of (\u5358\u8a9eID,\u51fa\u73fe\u6570)) \u304a\u3088\u3073 \u30c8\u30d4\u30c3\u30af\u6570\n    list of (\u5358\u8a9eID,\u51fa\u73fe\u6570) - \u500b\u3005\u306e article \u3067\u306e\u5358\u8a9e\u306e\u51fa\u73fe\u6570 (\u51fa\u73fe\u9806\u306f\u8003\u616e\u3057\u306a\u3044)\n\n  \u51fa\u529b : LDA\u30e2\u30c7\u30eb - gensim.models.ldamodel\n    list of ((list of (\u5358\u8a9eID,\u51fa\u73fe\u6570)) \u304b\u3089\u30c8\u30d4\u30c3\u30af\u9069\u5408\u78ba\u7387\u3092\u8a08\u7b97\u3059\u308b\u8a08\u7b97\u5f0f)\n```\n\n##\u2605test\n\n```\n  \u5165\u529b : test \u30b3\u30fc\u30d1\u30b9 - list of (list of (\u5358\u8a9eID,\u51fa\u73fe\u6570))\n    list of (\u5358\u8a9eID,\u51fa\u73fe\u6570) - \u500b\u3005\u306e article \u3067\u306e\u5358\u8a9e\u306e\u51fa\u73fe\u6570 (\u51fa\u73fe\u9806\u306f\u8003\u616e\u3057\u306a\u3044)\n\n\n  \u51fa\u529b : list of (list of \u9069\u5408\u78ba\u7387)\n```\n\n##\u2605\u5b9f\u884c\u4f8b\n\njanome \u3067\u5358\u8a9e\u3092\u62bd\u51fa\u3057\u3066 parts_of_speech \u306e\u307f\u306b\u3088\u308b\u7d5e\u8fbc\u307f\u3092\u3057\u305f\u3060\u3051\u3067\u30b3\u30fc\u30d1\u30b9\u3092\u4f5c\u3063\u3066\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5206\u985e\u3092\u8a66\u307f\u307e\u3057\u305f\u304c perplexity \u304c\u5929\u6587\u5b66\u7684\u306a\u5024\u306b\u306a\u3063\u3066\u5168\u304f\u610f\u5473\u3092\u6210\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u5fc5\u9808\u306e\u524d\u51e6\u7406\u3092\u3044\u308d\u3044\u308d\u7701\u7565\u3057\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u6839\u672c\u7684\u306a\u7406\u7531\u306f\u660e\u767d\u3067\u3059\u3002\n\n\u3000\u5358\u8a9e\u306e\u7a2e\u985e\u6570\u3000>>\u3000\u6587\u66f8\u6570\n\n\u3053\u308c\u3067\u3059\u3002\n\n\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u306f\u5358\u8a9e\u306e\u7a2e\u985e\u6570\uff0b\u03b1\u3060\u3051\u8abf\u6574\u53ef\u80fd\u306a\u5909\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u300c\u5358\u8a9e\u306e\u7a2e\u985e\u6570>>\u6587\u66f8\u6570\u300d\u3068\u3044\u3046\u6761\u4ef6\u3067\u7121\u7406\u306b\u53ce\u675f\u3055\u305b\u308b\u3068\u5fc5\u7136\u7684\u306b\u904e\u5b66\u7fd2\u306b\u306a\u308b\u306e\u3067\u3059\u3002\n\n\u3000\u5358\u8a9e\u306e\u7a2e\u985e\u6570\u3000<<\u3000\u6587\u66f8\u6570\n\n\u3068\u306a\u308b\u3088\u3046\u306b\u5358\u8a9e\u3092\u7d5e\u308a\u8fbc\u307e\u306d\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u4ee5\u4e0b\u306f\u3001\u624b\u4f5c\u696d\u3067\u4eba\u5de5\u77e5\u80fd\u95a2\u9023\u3067\u983b\u51fa\u3059\u308b350\u8a9e\u307b\u3069\u3092 thesaurus.csv \u306b\u767b\u9332\u3057\u3001\u305d\u308c\u3089\u306e\u307f\u3092\u7528\u3044\u3066\u30b3\u30fc\u30d1\u30b9\u3092\u4f5c\u3063\u305f\u5834\u5408\u306e\u7d50\u679c\u3067\u3059\u3002\n\n\u30c8\u30d4\u30c3\u30af\u6570\u306f training \u306e\u5165\u529b\u3067\u3059\u304c\u3001perplexity \u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306a\u30c8\u30d4\u30c3\u30af\u6570\u3092\u63a2\u3059\u3053\u3068\u3067\u3001\u5224\u65ad\u3092\u81ea\u52d5\u5316\u3067\u304d\u307e\u3059\u3002\u52d5\u4f5c\u4f8b\u3067\u306f\u3042\u3089\u304b\u3058\u3081\u30c8\u30d4\u30c3\u30af\u6570\u304c10\u3067perplexity \u304c\u6700\u5c0f\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n\n(*1)\u306b\u3088\u308c\u3070\u3001\n\n>\u30d1\u30fc\u30d7\u30ec\u30ad\u30b7\u30c6\u30a3\u306e\u9006\u6570\u304c\u6587\u66f8\u4e2d\u306e\u5358\u8a9e\u306e\u51fa\u73fe\u3092\u4e88\u6e2c\u3067\u304d\u308b\u5ea6\u5408\u3044\u3092\u793a\u3057\u3066\u304a\u308a\u3001\u3088\u3063\u3066\u6700\u9ad8\u306f1\u3067\u3001\n>\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u304c\u60aa\u304f\u306a\u308b\u307b\u3069\u5927\u304d\u306a\u5024\u306b\u306a\u308a\u307e\u3059(2\u6841\u306a\u3089\u3088\u3057\u30013\u6841\u524d\u534a\u3067\u307e\u3042\u307e\u3042\u3001\u305d\u308c\u4ee5\u5f8c\u306f\u60aa\u3044\u3001\n>\u3068\u3044\u3046\u611f\u3058\u3067\u30011\u6841\u306e\u5834\u5408\u306f\u9006\u306b\u30e2\u30c7\u30eb\u3084\u30d1\u30fc\u30d7\u30ec\u30ad\u30b7\u30c6\u30a3\u306e\u7b97\u51fa\u65b9\u6cd5\u306b\u8aa4\u308a\u304c\u306a\u3044\u304b\u898b\u76f4\u3057\u305f\u65b9\u304c\n>\u3088\u3044\u3067\u3059)\u3002\n\n\u5b9f\u884c\u4f8b\u3067\u306f1920 article(90%)\u3092training\u3001210 article(10%)\u3092 test \u306b\u7528\u3044[^2]\u3001test corpus \u306e perplexity \u304c 68.4 \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30c8\u30d4\u30c3\u30af\u9069\u5408\u78ba\u7387\u3092\u8a08\u7b97\u3059\u308b\u8a08\u7b97\u5f0f\u306e list \u306f\u3001\u4e0b\u8a18\u306e\u901a\u308a\n\n```\n[(0,\n  '0.268*\u753b\u50cf + 0.124*\uff24\uff45\uff4c\uff4c + 0.049*\uff23\uff2e\uff2e + 0.043*\u6df1\u5c64\u5b66\u7fd2 + 0.038*\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af + '\n  '0.026*\u6a5f\u68b0\u5b66\u7fd2 + 0.025*\uff23\uff48\uff41\uff49\uff4e\uff45\uff52 + 0.024*\uff27\uff30\uff35 + 0.023*\u8a18\u4e8b + 0.022*\u753b\u50cf\u8a8d\u8b58'),\n (1,\n  '0.135*\u6a5f\u68b0\u5b66\u7fd2 + 0.121*\uff30\uff59\uff54\uff48\uff4f\uff4e + 0.102*\u8a18\u4e8b + 0.055*\uff23\uff48\uff41\uff49\uff4e\uff45\uff52 + 0.052*\uff24\uff45\uff4c\uff4c + '\n  '0.037*\u6df1\u5c64\u5b66\u7fd2 + 0.033*\uff4e\uff55\uff4d\uff50\uff59 + 0.023*\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af + 0.019*\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af + 0.019*\uff33\uff50\uff41\uff52\uff4b'),\n (2,\n  '0.111*\u8a18\u4e8b + 0.097*\u4e88\u6e2c + 0.090*\u30e9\u30f3\u30ad\u30f3\u30b0 + 0.071*\u5927\u5b66 + 0.055*\u691c\u7d22 + 0.033*\u4eba\u5de5\u77e5\u80fd + '\n  '0.032*\uff39\uff41\uff48\uff4f\uff4f + 0.032*\uff24\uff45\uff4c\uff4c + 0.029*\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9 + 0.026*\u7279\u8a31'),\n (3,\n  '0.121*\uff32\uff55\uff42\uff59 + 0.100*\u30b2\u30fc\u30e0 + 0.090*\uff21\uff4c\uff50\uff48\uff41\uff27\uff4f + 0.085*\u56f2\u7881 + 0.077*\u8a18\u4e8b + 0.076*\u4eba\u5de5\u77e5\u80fd + '\n  '0.053*\uff27\uff4f\uff4f\uff47\uff4c\uff45 + 0.052*\uff2d\uff49\uff43\uff52\uff4f\uff53\uff4f\uff46\uff54 + 0.047*\uff34\uff41\uff59 + 0.034*\uff34\uff57\uff49\uff54\uff54\uff45\uff52'),\n (4,\n  '0.113*\uff34\uff45\uff4e\uff53\uff4f\uff52\uff26\uff4c\uff4f\uff57 + 0.103*\uff2c\uff33\uff34\uff2d + 0.070*\uff24\uff45\uff4c\uff4c + 0.068*\uff23\uff2e\uff2e + 0.063*\uff4c\uff49\uff4e\uff45 + '\n  '0.058*\uff34\uff48\uff45\uff41\uff4e\uff4f + 0.043*\uff33\uff30\uff21\uff32\uff31\uff2c + 0.038*\uff2b\uff45\uff52\uff41\uff53 + 0.037*\uff30\uff59\uff54\uff48\uff4f\uff4e + 0.035*\uff2d\uff2e\uff29\uff33\uff34'),\n (5,\n  '0.130*\u30af\u30e9\u30a6\u30c9 + 0.096*\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3 + 0.079*\uff21\uff37\uff33 + 0.079*\uff21\uff4d\uff41\uff5a\uff4f\uff4e + 0.075*\u8a18\u4e8b + 0.057*\uff29\uff4f\uff34 '\n  '+ 0.042*\u30d3\u30c3\u30b0\u30c7\u30fc\u30bf + 0.031*\u66f8\u7c4d + 0.023*\u653b\u6483 + 0.022*\uff29\uff22\uff2d'),\n (6,\n  '0.177*\uff27\uff4f\uff4f\uff47\uff4c\uff45 + 0.137*\uff21\uff30\uff29 + 0.100*\u691c\u7d22 + 0.071*\u8a18\u4e8b + 0.055*\uff26\uff41\uff43\uff45\uff42\uff4f\uff4f\uff4b + '\n  '0.031*\uff37\uff41\uff54\uff53\uff4f\uff4e + 0.030*\uff29\uff22\uff2d + 0.026*\uff22\uff4c\uff55\uff45\uff4d\uff49\uff58 + 0.026*\u6a5f\u68b0\u5b66\u7fd2 + 0.025*\uff34\uff57\uff49\uff54\uff54\uff45\uff52'),\n (7,\n  '0.351*\u4eba\u5de5\u77e5\u80fd + 0.093*\u30ed\u30dc\u30c3\u30c8 + 0.064*\u6df1\u5c64\u5b66\u7fd2 + 0.049*\u8a18\u4e8b + 0.032*\u5927\u5b66 + 0.029*\u6a5f\u68b0\u5b66\u7fd2 + '\n  '0.020*\u6771\u4eac\u5927\u5b66 + 0.019*\uff26\uff41\uff43\uff45\uff42\uff4f\uff4f\uff4b + 0.019*\u6620\u753b + 0.019*\uff27\uff4f\uff4f\uff47\uff4c\uff45'),\n (8,\n  '0.188*\uff42\uff4f\uff54 + 0.180*\uff2d\uff49\uff43\uff52\uff4f\uff53\uff4f\uff46\uff54 + 0.057*\uff21\uff5a\uff55\uff52\uff45 + 0.056*\uff25\uff4c\uff41\uff53\uff54\uff49\uff43\uff53\uff45\uff41\uff52\uff43\uff48 + '\n  '0.042*\uff57\uff4f\uff52\uff442\uff56\uff45\uff43 + 0.038*\u6a5f\u68b0\u5b66\u7fd2 + 0.033*\uff4c\uff49\uff4e\uff45 + 0.030*\u691c\u7d22 + 0.027*\uff2b\uff49\uff42\uff41\uff4e\uff41 + '\n  '0.022*\u81ea\u7136\u8a00\u8a9e\u51e6\u7406'),\n (9,\n  '0.102*\u8a18\u4e8b + 0.094*\uff34\uff57\uff49\uff54\uff54\uff45\uff52 + 0.079*\u30ed\u30dc\u30c3\u30c8 + 0.060*\uff29\uff4f\uff34 + 0.058*\u30bd\u30cb\u30fc + 0.041*\u5f37\u5316\u5b66\u7fd2 '\n  '+ 0.038*\uff34\uff45\uff4e\uff53\uff4f\uff52\uff26\uff4c\uff4f\uff57 + 0.029*\uff2a\uff41\uff56\uff41 + 0.028*\uff24\uff45\uff45\uff50\\u3000\uff31\u2212\uff2e\uff45\uff54\uff57\uff4f\uff52\uff4b + 0.027*\u30e9\u30f3\u30ad\u30f3\u30b0')]\n```\n\nperplexity \u304c 68.4 \u3068\u3044\u3046\u306e\u306f\u305d\u308c\u307b\u3069\u60aa\u304f\u306a\u3044\u3088\u3046\u3067\u3059\u304c\u3001\u3053\u306e\u8a08\u7b97\u5f0f\u3092\u898b\u308b\u9650\u308a\u4eba\u9593\u306e\u76ee\u3067\u898b\u3066\u30c8\u30d4\u30c3\u30af\u306e\u610f\u5473\u3092\u8aad\u307f\u53d6\u308b\u306e\u306f\u304b\u306a\u308a\u96e3\u3057\u3044\u3088\u3046\u306b\u611f\u3058\u307e\u3059\u3002\n\n\u9061\u3063\u3066\u3001(*1)\u306e\u4f8b\u3067\u306f\u3082\u3068\u3082\u3068\u306e article \u304b\u3089\u62bd\u51fa\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3068\u3057\u3066\u3001\n\n>\u300015\u5e2d\u4ee5\u4e0a\u306e\u5927\u578b\u30b5\u30ed\u30f3/\u99d0\u8eca\u5834\u3042\u308a/\u591c19\u6642\u4ee5\u964d\u3082\u53d7\u4ed8OK/\u5e74\u4e2d\u7121\u4f11/\u6700\u5bc4\u308a\u99c5\u304b\u3089\u5f92\u6b693\u5206\u4ee5\u5185\u306b\u3042\u308b/\n>\u3000\u30d8\u30a2\u30bb\u30c3\u30c8/\u30cd\u30a4\u30eb/\u671d10\u6642\u524d\u3067\u3082\u53d7\u4ed8OK/\u30c9\u30ea\u30f3\u30af\u30b5\u30fc\u30d3\u30b9\u3042\u308a/\u30ab\u30fc\u30c9\u652f\u6255\u3044OK/\u5973\u6027\u30b9\u30bf\u30c3\u30d5\u304c\u591a\u3044/\n>\u3000\u500b\u5ba4\u3042\u308a/\u7981\u7159/\u534a\u500b\u5ba4\u3042\u308a\n\n\u306e\u4f8b\u306e\u3088\u3046\u306a\u8aac\u660e\u3092 '/' \u3067\u5206\u5272\u3057\u305f\u3082\u306e\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u81ea\u7136\u8a00\u8a9e\u304b\u3089\u62bd\u51fa\u3057\u305f\u30c8\u30fc\u30af\u30f3\u3068\u3044\u3046\u3088\u308a\u3001\u3080\u3057\u308d\u3001\u76f4\u63a5\u7684\u306a\u7279\u5fb4\u91cf\u3068\u3044\u3046\u3079\u304d\u3082\u306e\u3067\u3059\u3002\n\u3053\u306e\u6709\u5229\u306a\u30c8\u30fc\u30af\u30f3\u3067 2\u30c8\u30d4\u30c3\u30af\u3067\u306e perplexity \u304c 17.1 \u3067\u3059\u304b\u3089\u3001\u4eca\u56de\u306e\u5b9f\u884c\u4f8b\u3082\u3001\u305d\u308c\u307b\u3069\u4e0d\u624b\u969b\u304c\u3042\u3063\u305f\u305f\u3081\u3068\u3082\u601d\u3048\u307e\u305b\u3093\u3002\n\u9006\u306b\u8a00\u3048\u3070\u3001\u4eca\u56de\u306e\u5b9f\u884c\u4f8b\u306e\u3088\u3046\u306a\u898f\u6a21\u3068\u5185\u5bb9\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3001\u76ee\u3092\u307f\u306f\u308b\u3088\u3046\u306a\u6559\u5e2b\u306a\u3057\u5206\u985e\u3068\u3044\u3046\u306e\u306f\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb\u3067\u306f\u96e3\u3057\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u6539\u5584\u304c\u53ef\u80fd\u3067\u3042\u308b\u3068\u3057\u305f\u3089\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u70b9\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u30fb[Webstemmer](http://futureinsight.info/entry/20090422/1240328288)\u306a\u3069\u3092\u4f7f\u3063\u3066\u771f\u306e\u672c\u6587\u3092\u62bd\u51fa\u3059\u308b\u3002\n\u30fbthesaurus.csv \u306e\u30c1\u30e5\u30fc\u30f3\u30ca\u30c3\u30d7\n\n\u305f\u3060\u3001\u5f8c\u8005\u306b\u3064\u3044\u3066\u306f\u540c\u7fa9\u8a9e\u95a2\u4fc2\u3092\u624b\u4f5c\u696d\u3067\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3059\u308b\u306e\u3067\u306f\u4f55\u306e\u305f\u3081\u306e\u81ea\u52d5\u5316\u306a\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001\u65b0\u898f\u4f01\u696d\u304c\u6a5f\u68b0\u5b66\u7fd2\u95a2\u9023\u306b\u53c2\u5165\u3057\u3066\u304d\u305f\u3089\u3001\u305d\u308c\u3092\u5224\u65ad\u3057\u3066 thesaurus.csv \u306b\u8ffd\u52a0\u305b\u306d\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u6700\u8fd1\u767a\u8868\u3055\u308c\u305f JUMAN++ \u306f\u3001\n\n\u3000[\u65b0\u5f62\u614b\u7d20\u89e3\u6790\u5668JUMAN++\u3092\u89e6\u3063\u3066\u307f\u305f\u3051\u3069\u601d\u3063\u305f\u3088\u308a\u9ad8\u7cbe\u5ea6\u3067MeCab\u304b\u3089\u4e57\u308a\u63db\u3048\u3088\u3046\u304b\u3068\u601d\u3063\u305f\u8a71](http://qiita.com/riverwell/items/438e88427363511e9f28)\n\n\u3092\u8aad\u3080\u9650\u308a\u554f\u984c\u306e\u89e3\u6c7a\u306b\u6709\u52b9\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4eca\u5f8c\u306e\u8ab2\u984c\u3067\u3059\u3002\n\n[^1]: \u540c\u3058 API \u306b\u306a\u308b\u3088\u3046\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n[^2]: \u3053\u306e\u8abf\u67fb\u3092\u3057\u305f\u5f53\u6642\u306f2000\u8a18\u4e8b\u304f\u3089\u3044\u3067\u3057\u305f\u304c\u3001\u73fe\u5728\u306f5000\u8a18\u4e8b\u304f\u3089\u3044\u306b\u5897\u3048\u307e\u3057\u305f\u3002\n\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "Python", "janome", "gensim", "\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb"]}