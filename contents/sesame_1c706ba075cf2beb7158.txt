{"tags": ["stumpwm", "Debian", "squid"], "context": " More than 1 year has passed since last update.Debian Stretch\u3067stumpwm\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u7121\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\u4ed5\u65b9\u306a\u304f\u81ea\u524d\u3067\u5c0e\u5165\u3059\u308b\u3053\u3068\u306b\u3002\n\u624b\u9806\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u305f\u3002\nhttps://github.com/stumpwm/stumpwm\n\napt\u3067\u5c0e\u5165\n# apt-get update\n# apt-get install sbcl autoconf make\n\n\n\nquicklisp\u306e\u5c0e\u5165\n$ curl -O https://beta.quicklisp.org/quicklisp.lisp\n$ sbcl --load quicklisp.lisp\n\n\n\nsbcl\u4e0a\u3067\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u51fa\u308b\u306e\u3067\u4ee5\u4e0b\u3092\u5165\u529b\u3057\u3066\u30ea\u30bf\u30fc\u30f3\n(quicklisp-quickstart:install)\n\n\nproxy\u3092\u4f7f\u3046\u5834\u5408\u306f\u4ee5\u4e0b\u3002\n\nsbcl\u30d7\u30ed\u30ad\u30b7\u5229\u7528\n(quicklisp-quickstart:install :proxy \"http://proxyserver:8080/\")\n\n\n\u3061\u306a\u307f\u306b\u3001\n\u8a8d\u8a3cProxy\u306f\u5229\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5b9f\u969b\u306fsquid\u3067\u591a\u6bb5\u30d7\u30ed\u30ad\u30b7\u3092\n\u7acb\u3066\u3066\u5bfe\u5fdc\u3057\u305f\u3002\n\n/etc/squid/squid.conf\ncache_peer [\u4e0a\u4f4d\u30d7\u30ed\u30ad\u30b7\u306eIP] parent [\u4e0a\u4f4d\u30d7\u30ed\u30ad\u30b7\u306eport] [icp \u30dd\u30fc\u30c8\u756a\u53f7\u21920] no-query\nnever_direct allow all\n\n\nnever_direct allow all\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3001HTTPS\u901a\u4fe1\u304c\u8ed2\u4e26\u307f\u63a5\u7d9a\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n\nquicklisp\u7d9a\u304d\n(ql:add-to-init-file)\n(ql:quickload \"clx\")\n(ql:quickload \"cl-ppcre\")\n\n\nquicklisp\u306e\u90e8\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u6210\u529f\u3057\u305f\u3063\u307d\u304f\u306a\u3063\u3066\u3082\n\u30d7\u30ed\u30f3\u30d7\u30c8\u306fquicklisp\u306e\u30d7\u30ed\u30f3\u30c8\u306e\u307e\u307e\u306a\u306e\u3067\u3001\n\u3068\u308a\u3042\u3048\u305aCtrl-D\u3092\u4f55\u56de\u304b\u62bc\u3057\u3066\u629c\u3051\u308b\u3002\n\u30b7\u30a7\u30eb\u306b\u623b\u3063\u3066stumpwm\u3092\u5c0e\u5165\u3057\u3066\u3044\u304f\u3002\n\nstumpwm\u5c0e\u5165\n$ git clone https://github.com/stumpwm/stumpwm.git\n$ cd stumpwm\n$ autoconf\n$ ./configure\n$ make\n$ sudo make install\n\n\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306bslim\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3002\n\n/usr/share/xsessions/stumpwm.desktop\n[Desktop Entry]\nEncoding=UTF-8\nType=Xsession\nExec=stumpwm\nTryExec=stumpwm\nName=StumpWM\nComment=Stump window manager\n\n\nstumpwm\u7528\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3002\n\n~/.stumpwmrc\n;; -*- Mode: Lisp; Mode: StumpWM; -*-\n;; .stumpwmrc\n\n(in-package :stumpwm)\n\n(setq *startup-message* nil)\n(setq *startup-mode-line* t)\n\n;;; --- process management -----------------------------------------------------\n(defun ps-exists (ps)\n  (let ((f \"ps -ef | grep ~S | grep -v -e grep -e stumpish | wc -l\"))\n    (< 0 (parse-integer (run-shell-command (format nil f ps) t)))))\n\n(defun start-uniq-command-ps (command &key options (background t))\n  (unless (ps-exists command)\n    (run-shell-command\n     (concat command \" \" options \" \" (when background \"&\")))))\n\n(defun kill-ps-command (command)\n  (format nil \"kill -TERM `ps -ef | grep ~S | grep -v grep | awk '{print $2}'`\"\n          command))\n\n(defun kill-ps (command)\n  (run-shell-command (kill-ps-command command)))\n\n;;; --- stumpwm command definitions --------------------------------------------\n(defmacro def-run-or-raise-command (cmd prop)\n  (let ((cmd-str (string-downcase (symbol-name cmd))))\n    `(defcommand ,cmd () ()\n                 (run-or-raise ,cmd-str ,prop))))\n\n(def-run-or-raise-command urxvt '(:class \"URxvt\"))\n\n(defcommand ps-kill  (ps) ((:rest \"process to kill: \"))\n            (kill-ps ps))\n\n(defcommand emacsdaemonstart () ()\n            (run-or-raise \"emacs --daemon\" '(:class \"Emacs\")))\n\n(defcommand emacsclient () ()\n            (run-or-raise \"emacsclient -c\" '(:class \"Emacs\")))\n\n(defcommand emacsdaemonkill () ()\n            (run-or-raise \"emacsclient -e '(kill-emacs)'\" '(:class \"Emacs\")))\n\n(defcommand uptime () ()\n            (echo-string (current-screen) (run-shell-command \"uptime\" t)))\n\n;;; --- run commands -----------------------------------------------------------\n(run-shell-command \"xsetroot -solid black\")\n(emacsdaemonstart)\n\n;;; --- key bindings -----------------------------------------------------------\n(set-prefix-key (kbd \"C-,\"))\n(define-key *root-map* (kbd \"s\") \"colon exec iceweasel http://\")\n(define-key *root-map* (kbd \"w\") \"windowlist\")\n(define-key *root-map* (kbd \"c\") \"urxvt\")\n(define-key *root-map* (kbd \"e\") \"emacsclient\")\n(define-key *root-map* (kbd \"d\") \"emacsdaemonkill\")\n(define-key *root-map* (kbd \"l\") \"colon loadrc\")\n(define-key *root-map* (kbd \"u\") \"uptime\")\n    (< 0 (parse-integer (run-shell-command (format nil f ps) t)))))\n\n(defun start-uniq-command-ps (command &key options (background t))\n  (unless (ps-exists command)\n    (run-shell-command\n     (concat command \" \" options \" \" (when background \"&\")))))\n\n(defun kill-ps-command (command)\n  (format nil \"kill -TERM `ps -ef | grep ~S | grep -v grep | awk '{print $2}'`\"\n          command))\n\n(defun kill-ps (command)\n  (run-shell-command (kill-ps-command command)))\n\n;;; --- stumpwm command definitions --------------------------------------------\n(defmacro def-run-or-raise-command (cmd prop)\n  (let ((cmd-str (string-downcase (symbol-name cmd))))\n    `(defcommand ,cmd () ()\n                 (run-or-raise ,cmd-str ,prop))))\n\n(def-run-or-raise-command urxvt '(:class \"URxvt\"))\n\n(defcommand ps-kill  (ps) ((:rest \"process to kill: \"))\n            (kill-ps ps))\n\n(defcommand emacsdaemonstart () ()\n            (run-or-raise \"emacs --daemon\" '(:class \"Emacs\")))\n\n(defcommand emacsclient () ()\n            (run-or-raise \"emacsclient -c\" '(:class \"Emacs\")))\n\n(defcommand emacsdaemonkill () ()\n            (run-or-raise \"emacsclient -e '(kill-emacs)'\" '(:class \"Emacs\")))\n\n(defcommand uptime () ()\n            (echo-string (current-screen) (run-shell-command \"uptime\" t)))\n\n;;; --- run commands -----------------------------------------------------------\n(run-shell-command \"xsetroot -solid black\")\n(emacsdaemonstart)\n\n;;; --- key bindings -----------------------------------------------------------\n(set-prefix-key (kbd \"C-,\"))\n(define-key *root-map* (kbd \"s\") \"colon exec iceweasel http://\")\n(define-key *root-map* (kbd \"w\") \"windowlist\")\n(define-key *root-map* (kbd \"c\") \"urxvt\")\n(define-key *root-map* (kbd \"e\") \"emacsclient\")\n(define-key *root-map* (kbd \"d\") \"emacsdaemonkill\")\n(define-key *root-map* (kbd \"l\") \"colon loadrc\")\n(define-key *root-map* (kbd \"u\") \"uptime\")\n\n;; emacs style\n(define-key *root-map* (kbd \"0\") \"remove\")\n(define-key *root-map* (kbd \"1\") \"only\")\n(define-key *root-map* (kbd \"2\") \"vsplit\")\n(define-key *root-map* (kbd \"3\") \"hsplit\")\n(define-key *input-map* (kbd \"C-m\") 'input-submit)\n(define-key *input-map* (kbd \"C-h\") 'input-delete-backward-char)\n(define-key *input-map* (kbd \"M-p\") 'input-history-back)\n(define-key *input-map* (kbd \"M-n\") 'input-history-forward)\n(define-key *resize-map* (kbd \"C-m\") \"exit-resize\")\n\n\n\nDebian\u518d\u8d77\u52d5\n# shutdown -r now\n\n\n\nDebian Stretch\u3067stumpwm\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u7121\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u4ed5\u65b9\u306a\u304f\u81ea\u524d\u3067\u5c0e\u5165\u3059\u308b\u3053\u3068\u306b\u3002\n\n\u624b\u9806\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u305f\u3002\n\nhttps://github.com/stumpwm/stumpwm\n\n```bash:apt\u3067\u5c0e\u5165\n# apt-get update\n# apt-get install sbcl autoconf make\n```\n\n```bash:quicklisp\u306e\u5c0e\u5165\n$ curl -O https://beta.quicklisp.org/quicklisp.lisp\n$ sbcl --load quicklisp.lisp\n```\n\n```elisp:sbcl\u4e0a\u3067\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u51fa\u308b\u306e\u3067\u4ee5\u4e0b\u3092\u5165\u529b\u3057\u3066\u30ea\u30bf\u30fc\u30f3\n(quicklisp-quickstart:install)\n```\n\nproxy\u3092\u4f7f\u3046\u5834\u5408\u306f\u4ee5\u4e0b\u3002\n\n```elisp:sbcl\u30d7\u30ed\u30ad\u30b7\u5229\u7528\n(quicklisp-quickstart:install :proxy \"http://proxyserver:8080/\")\n```\n\n\u3061\u306a\u307f\u306b\u3001\n\u8a8d\u8a3cProxy\u306f\u5229\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5b9f\u969b\u306fsquid\u3067\u591a\u6bb5\u30d7\u30ed\u30ad\u30b7\u3092\n\u7acb\u3066\u3066\u5bfe\u5fdc\u3057\u305f\u3002\n\n```bash:/etc/squid/squid.conf\ncache_peer [\u4e0a\u4f4d\u30d7\u30ed\u30ad\u30b7\u306eIP] parent [\u4e0a\u4f4d\u30d7\u30ed\u30ad\u30b7\u306eport] [icp \u30dd\u30fc\u30c8\u756a\u53f7\u21920] no-query\nnever_direct allow all\n```\n\n`never_direct allow all`\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3001HTTPS\u901a\u4fe1\u304c\u8ed2\u4e26\u307f\u63a5\u7d9a\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n\n```elisp:quicklisp\u7d9a\u304d\n(ql:add-to-init-file)\n(ql:quickload \"clx\")\n(ql:quickload \"cl-ppcre\")\n```\n\nquicklisp\u306e\u90e8\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u6210\u529f\u3057\u305f\u3063\u307d\u304f\u306a\u3063\u3066\u3082\n\u30d7\u30ed\u30f3\u30d7\u30c8\u306fquicklisp\u306e\u30d7\u30ed\u30f3\u30c8\u306e\u307e\u307e\u306a\u306e\u3067\u3001\n\u3068\u308a\u3042\u3048\u305aCtrl-D\u3092\u4f55\u56de\u304b\u62bc\u3057\u3066\u629c\u3051\u308b\u3002\n\n\u30b7\u30a7\u30eb\u306b\u623b\u3063\u3066stumpwm\u3092\u5c0e\u5165\u3057\u3066\u3044\u304f\u3002\n\n```bash:stumpwm\u5c0e\u5165\n$ git clone https://github.com/stumpwm/stumpwm.git\n$ cd stumpwm\n$ autoconf\n$ ./configure\n$ make\n$ sudo make install\n```\n\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306bslim\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3002\n\n```/usr/share/xsessions/stumpwm.desktop\n[Desktop Entry]\nEncoding=UTF-8\nType=Xsession\nExec=stumpwm\nTryExec=stumpwm\nName=StumpWM\nComment=Stump window manager\n```\n\nstumpwm\u7528\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3002\n\n```elisp:~/.stumpwmrc\n;; -*- Mode: Lisp; Mode: StumpWM; -*-\n;; .stumpwmrc\n\n(in-package :stumpwm)\n\n(setq *startup-message* nil)\n(setq *startup-mode-line* t)\n\n;;; --- process management -----------------------------------------------------\n(defun ps-exists (ps)\n  (let ((f \"ps -ef | grep ~S | grep -v -e grep -e stumpish | wc -l\"))\n    (< 0 (parse-integer (run-shell-command (format nil f ps) t)))))\n\n(defun start-uniq-command-ps (command &key options (background t))\n  (unless (ps-exists command)\n    (run-shell-command\n     (concat command \" \" options \" \" (when background \"&\")))))\n\n(defun kill-ps-command (command)\n  (format nil \"kill -TERM `ps -ef | grep ~S | grep -v grep | awk '{print $2}'`\"\n          command))\n\n(defun kill-ps (command)\n  (run-shell-command (kill-ps-command command)))\n\n;;; --- stumpwm command definitions --------------------------------------------\n(defmacro def-run-or-raise-command (cmd prop)\n  (let ((cmd-str (string-downcase (symbol-name cmd))))\n    `(defcommand ,cmd () ()\n                 (run-or-raise ,cmd-str ,prop))))\n\n(def-run-or-raise-command urxvt '(:class \"URxvt\"))\n\n(defcommand ps-kill  (ps) ((:rest \"process to kill: \"))\n            (kill-ps ps))\n\n(defcommand emacsdaemonstart () ()\n            (run-or-raise \"emacs --daemon\" '(:class \"Emacs\")))\n\n(defcommand emacsclient () ()\n            (run-or-raise \"emacsclient -c\" '(:class \"Emacs\")))\n\n(defcommand emacsdaemonkill () ()\n            (run-or-raise \"emacsclient -e '(kill-emacs)'\" '(:class \"Emacs\")))\n\n(defcommand uptime () ()\n            (echo-string (current-screen) (run-shell-command \"uptime\" t)))\n\n;;; --- run commands -----------------------------------------------------------\n(run-shell-command \"xsetroot -solid black\")\n(emacsdaemonstart)\n\n;;; --- key bindings -----------------------------------------------------------\n(set-prefix-key (kbd \"C-,\"))\n(define-key *root-map* (kbd \"s\") \"colon exec iceweasel http://\")\n(define-key *root-map* (kbd \"w\") \"windowlist\")\n(define-key *root-map* (kbd \"c\") \"urxvt\")\n(define-key *root-map* (kbd \"e\") \"emacsclient\")\n(define-key *root-map* (kbd \"d\") \"emacsdaemonkill\")\n(define-key *root-map* (kbd \"l\") \"colon loadrc\")\n(define-key *root-map* (kbd \"u\") \"uptime\")\n    (< 0 (parse-integer (run-shell-command (format nil f ps) t)))))\n\n(defun start-uniq-command-ps (command &key options (background t))\n  (unless (ps-exists command)\n    (run-shell-command\n     (concat command \" \" options \" \" (when background \"&\")))))\n\n(defun kill-ps-command (command)\n  (format nil \"kill -TERM `ps -ef | grep ~S | grep -v grep | awk '{print $2}'`\"\n          command))\n\n(defun kill-ps (command)\n  (run-shell-command (kill-ps-command command)))\n\n;;; --- stumpwm command definitions --------------------------------------------\n(defmacro def-run-or-raise-command (cmd prop)\n  (let ((cmd-str (string-downcase (symbol-name cmd))))\n    `(defcommand ,cmd () ()\n                 (run-or-raise ,cmd-str ,prop))))\n\n(def-run-or-raise-command urxvt '(:class \"URxvt\"))\n\n(defcommand ps-kill  (ps) ((:rest \"process to kill: \"))\n            (kill-ps ps))\n\n(defcommand emacsdaemonstart () ()\n            (run-or-raise \"emacs --daemon\" '(:class \"Emacs\")))\n\n(defcommand emacsclient () ()\n            (run-or-raise \"emacsclient -c\" '(:class \"Emacs\")))\n\n(defcommand emacsdaemonkill () ()\n            (run-or-raise \"emacsclient -e '(kill-emacs)'\" '(:class \"Emacs\")))\n\n(defcommand uptime () ()\n            (echo-string (current-screen) (run-shell-command \"uptime\" t)))\n\n;;; --- run commands -----------------------------------------------------------\n(run-shell-command \"xsetroot -solid black\")\n(emacsdaemonstart)\n\n;;; --- key bindings -----------------------------------------------------------\n(set-prefix-key (kbd \"C-,\"))\n(define-key *root-map* (kbd \"s\") \"colon exec iceweasel http://\")\n(define-key *root-map* (kbd \"w\") \"windowlist\")\n(define-key *root-map* (kbd \"c\") \"urxvt\")\n(define-key *root-map* (kbd \"e\") \"emacsclient\")\n(define-key *root-map* (kbd \"d\") \"emacsdaemonkill\")\n(define-key *root-map* (kbd \"l\") \"colon loadrc\")\n(define-key *root-map* (kbd \"u\") \"uptime\")\n\n;; emacs style\n(define-key *root-map* (kbd \"0\") \"remove\")\n(define-key *root-map* (kbd \"1\") \"only\")\n(define-key *root-map* (kbd \"2\") \"vsplit\")\n(define-key *root-map* (kbd \"3\") \"hsplit\")\n(define-key *input-map* (kbd \"C-m\") 'input-submit)\n(define-key *input-map* (kbd \"C-h\") 'input-delete-backward-char)\n(define-key *input-map* (kbd \"M-p\") 'input-history-back)\n(define-key *input-map* (kbd \"M-n\") 'input-history-forward)\n(define-key *resize-map* (kbd \"C-m\") \"exit-resize\")\n```\n\n```bash:Debian\u518d\u8d77\u52d5\n# shutdown -r now\n```\n"}