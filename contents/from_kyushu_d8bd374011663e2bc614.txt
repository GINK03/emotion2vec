{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u30b5\u30a4\u30b3\u30ed\u306e\u5c55\u958b\u56f3\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f120\u5206\u7a0b\u5ea6\u3068\u5927\u5e45\u30aa\u30fc\u30d0\u30fc\u3002\n\u307b\u3068\u3093\u3069\u306f\u81ea\u524d\u3067\u5168\u30d1\u30bf\u30fc\u30f3\u3092\u5217\u6319\u3059\u308bExpandedDice#patterns\u3092\u5b9f\u88c5\u3059\u308b\u6642\u9593\u306a\u306e\u3067\u3001\u5168\u30d1\u30bf\u30fc\u30f3\u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308c\u3070\u3082\u3063\u3068\u65e9\u304f\u51fa\u6765\u4e0a\u304c\u3063\u305f\u3082\u306e\u3068\u601d\u308f\u308c\u308b\u3002\n\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u306f\u4e0a\u6bb5\u304c\u6b63\u9762\u3001\u53f3\u5074\u3001\u88cf\u9762\u3001\u4e0b\u6bb5\u304c\u4e0b\u5074\u3001\u5de6\u5074\u3001\u4e0a\u5074\u3068\u4eee\u5b9a\u3057\u305f\u5834\u5408\u306b\u56de\u3059\u65b9\u5411\u3067\u8003\u3048\u3066\u3044\u308b\u3002\n\n\nExpandedDice#rotate_topdown: \u4e0a\u309212\u6642\u3001\u53f3\u5074\u30923\u6642\u3001\u4e0b\u30926\u6642\u3001\u5de6\u5074\u30929\u6642\u65b9\u5411\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b90\u5ea6\u56de\u8ee2\u3055\u305b\u308b\n\nExpandedDice#rotate_side: \u88cf\u9762\u309212\u6642\u3001\u53f3\u5074\u30923\u6642\u3001\u6b63\u9762\u30926\u6642\u3001\u5de6\u5074\u30929\u6642\u65b9\u5411\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b90\u5ea6 * \u6307\u5b9a\u56de\u6570\u56de\u8ee2\u3055\u305b\u308b\n\nExpandedDice#rotate_face: \u4e0a\u309212\u6642\u3001\u88cf\u9762\u30923\u6642\u3001\u4e0b\u30926\u6642\u3001\u6b63\u9762\u30929\u6642\u65b9\u5411\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b90\u5ea6\u56de\u8ee2\u3055\u305b\u308b\n\n\u591a\u5206\u624b\u5143\u306b\u30b5\u30a4\u30b3\u30ed\u304c\u3042\u308c\u3070\u3082\u3063\u3068\u8003\u3048\u304c\u307e\u3068\u307e\u308a\u3084\u3059\u304b\u3063\u305f\u3068\u601d\u308f\u308c\u308b\u3002\nclass ExpandedDice\n  Dice = \"12S/453\"\n\n  def initialize\n    @patterns = patterns\n  end\n\n  def masked_cell input\n    r = /#{input.gsub(/[wxyz]/, \".\")}/\n    list = @patterns.select{|pattern| r === pattern}\n    case list.size\n    when 0\n      \"none\"\n    when 1\n      input.scan(/[wxyz]/).map{|m|\n        \"#{m}=#{list[0][input.index(m)]}\"\n      }.join(\",\")\n    else\n      \"many\"\n    end\n  end\n\n  private\n  def patterns\n    [Dice, rotate_topdown(Dice)].each_with_object([]){|dice, r|\n      3.times{|i|\n        pattern = rotate_side dice, i\n        rev_pattern = pattern.reverse\n        [\n          pattern, rev_pattern,\n          rotate_face(pattern), rotate_face(rev_pattern)\n        ].each{|pat| r << pat}\n      }\n    }\n  end\n\n  def rotate_cell cell\n    case cell\n    when \"2\" then \"D\"\n    when \"D\" then \"2\"\n    when \"3\" then \"T\"\n    when \"T\" then \"3\"\n    when \"6\" then \"S\"\n    when \"S\" then \"6\"\n    else          cell\n    end\n  end\n\n  def rotate_topdown dice\n    [\n      dice[0], dice[6], dice[2],\n      \"/\",\n      dice[1], dice[4], dice[5]\n    ].map{|c| rotate_cell(c)}.join\n  end\n\n  def rotate_side dice, count\n    side = (dice[0..2] + dice[5]).chars.rotate(count)\n    [\n      side[0..2],\n      \"/\",\n      (count % 2).zero? ? dice[4] : rotate_cell(dice[4]),\n      (count % 2).zero? ? rotate_cell(side.last) : side.last,\n      (count % 2).zero? ? dice[6] : rotate_cell(dice[6])\n    ].flatten.join\n  end\n\n  def rotate_face dice\n    dice[4..6] + \"/\" + dice[0..2]\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"Tx4/5yz\", \"x=1,y=S,z=2\" );    \n/*1*/ test( \"14S/xyz\", \"none\" );    \n/*2*/ test( \"1w6/xyz\", \"many\" );    \n/*3*/ test( \"4w3/12S\", \"w=5\" );    \n/*4*/ test( \"4w3/S51\", \"w=D\" );    \n/*5*/ test( \"15S/wD4\", \"w=3\" );    \n/*6*/ test( \"54D/6Tw\", \"w=1\" );    \n/*7*/ test( \"S21/35w\", \"w=4\" );    \n/*8*/ test( \"w2x/354\", \"w=S,x=1\" );    \n/*9*/ test( \"wx1/54D\", \"w=6,x=T\" );    \n/*10*/ test( \"45w/12x\", \"w=3,x=S\" );    \n/*11*/ test( \"5w2/x14\", \"w=S,x=T\" );    \n/*12*/ test( \"Dw5/x41\", \"w=3,x=6\" );    \n/*13*/ test( \"w4x/1y6\", \"w=D,x=5,y=T\" );    \n/*14*/ test( \"15w/xy4\", \"w=S,x=3,y=D\" );    \n/*15*/ test( \"D35/wxy\", \"w=6,x=4,y=1\" );    \n/*16*/ test( \"4wx/51y\", \"w=6,x=T,y=2\" );    \n/*17*/ test( \"wTx/D4y\", \"w=1,x=6,y=5\" );    \n/*18*/ test( \"wxy/z3D\", \"w=1,x=4,y=6,z=5\" );    \n/*19*/ test( \"wx5/1yz\", \"w=D,x=4,y=T,z=6\" );    \n/*20*/ test( \"w53/xyz\", \"w=4,x=1,y=2,z=S\" );    \n/*21*/ test( \"wx1/yzD\", \"w=6,x=T,y=5,z=4\" );    \n/*22*/ test( \"wxS/3yz\", \"w=1,x=5,y=D,z=4\" );    \n/*23*/ test( \"wx2/y1z\", \"w=5,x=S,y=T,z=4\" );    \n/*24*/ test( \"4wx/2yz\", \"w=1,x=T,y=S,z=5\" );    \n/*25*/ test( \"T6w/xyz\", \"w=4,x=2,y=1,z=5\" );    \n/*26*/ test( \"Swx/yDz\", \"w=5,x=1,y=4,z=3\" );    \n/*27*/ test( \"wDx/yzS\", \"w=3,x=4,y=1,z=5\" );    \n/*28*/ test( \"wxy/5Sz\", \"w=T,x=1,y=4,z=2\" );    \n/*29*/ test( \"wSx/4yz\", \"w=2,x=5,y=1,z=T\" );    \n/*30*/ test( \"wxS/y5z\", \"w=1,x=2,y=4,z=3\" );    \n/*31*/ test( \"wxy/35z\", \"w=S,x=2,y=1,z=4\" );    \n/*32*/ test( \"wxy/T6z\", \"w=2,x=1,y=5,z=4\" );    \n/*33*/ test( \"wxD/yz1\", \"w=5,x=4,y=6,z=T\" );    \n/*34*/ test( \"1wx/yz5\", \"w=T,x=6,y=D,z=4\" );    \n/*35*/ test( \"wx3/y5z\", \"w=4,x=D,y=S,z=1\" );    \n/*36*/ test( \"6wx/y3z\", \"w=4,x=1,y=D,z=5\" );    \n/*37*/ test( \"5wx/4yz\", \"w=1,x=2,y=6,z=T\" );    \n/*38*/ test( \"wx4/Syz\", \"w=3,x=5,y=2,z=1\" );    \n/*39*/ test( \"w3D/xyz\", \"w=5,x=1,y=4,z=6\" );    \n/*40*/ test( \"w3x/6yz\", \"w=D,x=5,y=4,z=1\" );    \n/*41*/ test( \"wxy/z12\", \"w=4,x=6,y=T,z=5\" );    \n/*42*/ test( \"1wS/xyz\", \"many\" );    \n/*43*/ test( \"wxy/Dz5\", \"many\" );    \n/*44*/ test( \"3w4/xyz\", \"many\" );    \n/*45*/ test( \"wxy/5zD\", \"many\" );    \n/*46*/ test( \"wxy/Tz4\", \"many\" );    \n/*47*/ test( \"5wD/xyz\", \"many\" );    \n/*48*/ test( \"wDx/y5z\", \"many\" );    \n/*49*/ test( \"wxy/3z4\", \"many\" );    \n/*50*/ test( \"wxy/5z2\", \"many\" );    \n/*51*/ test( \"Dyz/S1x\", \"none\" );    \n/*52*/ test( \"w1z/xyS\", \"none\" );    \n/*53*/ test( \"15x/T6y\", \"none\" );    \n/*54*/ test( \"zy4/5x6\", \"none\" );    \n/*55*/ test( \"2xy/4Tz\", \"none\" );    \n/*56*/ test( \"xzS/y1w\", \"none\" );    \n/*57*/ test( \"Syx/4z5\", \"none\" );    \n/*58*/ test( \"xwS/Tzy\", \"none\" );    \n/*59*/ test( \"D5z/xwy\", \"none\" );    \n/*60*/ test( \"yxD/z35\", \"none\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'ExpandedDice' do\n  dice = ExpandedDice.new\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    it input do\n      assert_equal expect, dice.masked_cell(input)\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u30b5\u30a4\u30b3\u30ed\u306e\u5c55\u958b\u56f3](http://nabetani.sakura.ne.jp/hena/ord29devdice/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f120\u5206\u7a0b\u5ea6\u3068\u5927\u5e45\u30aa\u30fc\u30d0\u30fc\u3002\n\n\u307b\u3068\u3093\u3069\u306f\u81ea\u524d\u3067\u5168\u30d1\u30bf\u30fc\u30f3\u3092\u5217\u6319\u3059\u308b`ExpandedDice#patterns`\u3092\u5b9f\u88c5\u3059\u308b\u6642\u9593\u306a\u306e\u3067\u3001\u5168\u30d1\u30bf\u30fc\u30f3\u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308c\u3070\u3082\u3063\u3068\u65e9\u304f\u51fa\u6765\u4e0a\u304c\u3063\u305f\u3082\u306e\u3068\u601d\u308f\u308c\u308b\u3002\n\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u306f\u4e0a\u6bb5\u304c\u6b63\u9762\u3001\u53f3\u5074\u3001\u88cf\u9762\u3001\u4e0b\u6bb5\u304c\u4e0b\u5074\u3001\u5de6\u5074\u3001\u4e0a\u5074\u3068\u4eee\u5b9a\u3057\u305f\u5834\u5408\u306b\u56de\u3059\u65b9\u5411\u3067\u8003\u3048\u3066\u3044\u308b\u3002\n\n- `ExpandedDice#rotate_topdown`: \u4e0a\u309212\u6642\u3001\u53f3\u5074\u30923\u6642\u3001\u4e0b\u30926\u6642\u3001\u5de6\u5074\u30929\u6642\u65b9\u5411\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b90\u5ea6\u56de\u8ee2\u3055\u305b\u308b\n- `ExpandedDice#rotate_side`: \u88cf\u9762\u309212\u6642\u3001\u53f3\u5074\u30923\u6642\u3001\u6b63\u9762\u30926\u6642\u3001\u5de6\u5074\u30929\u6642\u65b9\u5411\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b90\u5ea6 * \u6307\u5b9a\u56de\u6570\u56de\u8ee2\u3055\u305b\u308b\n- `ExpandedDice#rotate_face`: \u4e0a\u309212\u6642\u3001\u88cf\u9762\u30923\u6642\u3001\u4e0b\u30926\u6642\u3001\u6b63\u9762\u30929\u6642\u65b9\u5411\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b90\u5ea6\u56de\u8ee2\u3055\u305b\u308b\n\n\u591a\u5206\u624b\u5143\u306b\u30b5\u30a4\u30b3\u30ed\u304c\u3042\u308c\u3070\u3082\u3063\u3068\u8003\u3048\u304c\u307e\u3068\u307e\u308a\u3084\u3059\u304b\u3063\u305f\u3068\u601d\u308f\u308c\u308b\u3002\n\n```ruby\nclass ExpandedDice\n  Dice = \"12S/453\"\n\n  def initialize\n    @patterns = patterns\n  end\n\n  def masked_cell input\n    r = /#{input.gsub(/[wxyz]/, \".\")}/\n    list = @patterns.select{|pattern| r === pattern}\n    case list.size\n    when 0\n      \"none\"\n    when 1\n      input.scan(/[wxyz]/).map{|m|\n        \"#{m}=#{list[0][input.index(m)]}\"\n      }.join(\",\")\n    else\n      \"many\"\n    end\n  end\n\n  private\n  def patterns\n    [Dice, rotate_topdown(Dice)].each_with_object([]){|dice, r|\n      3.times{|i|\n        pattern = rotate_side dice, i\n        rev_pattern = pattern.reverse\n        [\n          pattern, rev_pattern,\n          rotate_face(pattern), rotate_face(rev_pattern)\n        ].each{|pat| r << pat}\n      }\n    }\n  end\n\n  def rotate_cell cell\n    case cell\n    when \"2\" then \"D\"\n    when \"D\" then \"2\"\n    when \"3\" then \"T\"\n    when \"T\" then \"3\"\n    when \"6\" then \"S\"\n    when \"S\" then \"6\"\n    else          cell\n    end\n  end\n\n  def rotate_topdown dice\n    [\n      dice[0], dice[6], dice[2],\n      \"/\",\n      dice[1], dice[4], dice[5]\n    ].map{|c| rotate_cell(c)}.join\n  end\n\n  def rotate_side dice, count\n    side = (dice[0..2] + dice[5]).chars.rotate(count)\n    [\n      side[0..2],\n      \"/\",\n      (count % 2).zero? ? dice[4] : rotate_cell(dice[4]),\n      (count % 2).zero? ? rotate_cell(side.last) : side.last,\n      (count % 2).zero? ? dice[6] : rotate_cell(dice[6])\n    ].flatten.join\n  end\n\n  def rotate_face dice\n    dice[4..6] + \"/\" + dice[0..2]\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"Tx4/5yz\", \"x=1,y=S,z=2\" );    \n/*1*/ test( \"14S/xyz\", \"none\" );    \n/*2*/ test( \"1w6/xyz\", \"many\" );    \n/*3*/ test( \"4w3/12S\", \"w=5\" );    \n/*4*/ test( \"4w3/S51\", \"w=D\" );    \n/*5*/ test( \"15S/wD4\", \"w=3\" );    \n/*6*/ test( \"54D/6Tw\", \"w=1\" );    \n/*7*/ test( \"S21/35w\", \"w=4\" );    \n/*8*/ test( \"w2x/354\", \"w=S,x=1\" );    \n/*9*/ test( \"wx1/54D\", \"w=6,x=T\" );    \n/*10*/ test( \"45w/12x\", \"w=3,x=S\" );    \n/*11*/ test( \"5w2/x14\", \"w=S,x=T\" );    \n/*12*/ test( \"Dw5/x41\", \"w=3,x=6\" );    \n/*13*/ test( \"w4x/1y6\", \"w=D,x=5,y=T\" );    \n/*14*/ test( \"15w/xy4\", \"w=S,x=3,y=D\" );    \n/*15*/ test( \"D35/wxy\", \"w=6,x=4,y=1\" );    \n/*16*/ test( \"4wx/51y\", \"w=6,x=T,y=2\" );    \n/*17*/ test( \"wTx/D4y\", \"w=1,x=6,y=5\" );    \n/*18*/ test( \"wxy/z3D\", \"w=1,x=4,y=6,z=5\" );    \n/*19*/ test( \"wx5/1yz\", \"w=D,x=4,y=T,z=6\" );    \n/*20*/ test( \"w53/xyz\", \"w=4,x=1,y=2,z=S\" );    \n/*21*/ test( \"wx1/yzD\", \"w=6,x=T,y=5,z=4\" );    \n/*22*/ test( \"wxS/3yz\", \"w=1,x=5,y=D,z=4\" );    \n/*23*/ test( \"wx2/y1z\", \"w=5,x=S,y=T,z=4\" );    \n/*24*/ test( \"4wx/2yz\", \"w=1,x=T,y=S,z=5\" );    \n/*25*/ test( \"T6w/xyz\", \"w=4,x=2,y=1,z=5\" );    \n/*26*/ test( \"Swx/yDz\", \"w=5,x=1,y=4,z=3\" );    \n/*27*/ test( \"wDx/yzS\", \"w=3,x=4,y=1,z=5\" );    \n/*28*/ test( \"wxy/5Sz\", \"w=T,x=1,y=4,z=2\" );    \n/*29*/ test( \"wSx/4yz\", \"w=2,x=5,y=1,z=T\" );    \n/*30*/ test( \"wxS/y5z\", \"w=1,x=2,y=4,z=3\" );    \n/*31*/ test( \"wxy/35z\", \"w=S,x=2,y=1,z=4\" );    \n/*32*/ test( \"wxy/T6z\", \"w=2,x=1,y=5,z=4\" );    \n/*33*/ test( \"wxD/yz1\", \"w=5,x=4,y=6,z=T\" );    \n/*34*/ test( \"1wx/yz5\", \"w=T,x=6,y=D,z=4\" );    \n/*35*/ test( \"wx3/y5z\", \"w=4,x=D,y=S,z=1\" );    \n/*36*/ test( \"6wx/y3z\", \"w=4,x=1,y=D,z=5\" );    \n/*37*/ test( \"5wx/4yz\", \"w=1,x=2,y=6,z=T\" );    \n/*38*/ test( \"wx4/Syz\", \"w=3,x=5,y=2,z=1\" );    \n/*39*/ test( \"w3D/xyz\", \"w=5,x=1,y=4,z=6\" );    \n/*40*/ test( \"w3x/6yz\", \"w=D,x=5,y=4,z=1\" );    \n/*41*/ test( \"wxy/z12\", \"w=4,x=6,y=T,z=5\" );    \n/*42*/ test( \"1wS/xyz\", \"many\" );    \n/*43*/ test( \"wxy/Dz5\", \"many\" );    \n/*44*/ test( \"3w4/xyz\", \"many\" );    \n/*45*/ test( \"wxy/5zD\", \"many\" );    \n/*46*/ test( \"wxy/Tz4\", \"many\" );    \n/*47*/ test( \"5wD/xyz\", \"many\" );    \n/*48*/ test( \"wDx/y5z\", \"many\" );    \n/*49*/ test( \"wxy/3z4\", \"many\" );    \n/*50*/ test( \"wxy/5z2\", \"many\" );    \n/*51*/ test( \"Dyz/S1x\", \"none\" );    \n/*52*/ test( \"w1z/xyS\", \"none\" );    \n/*53*/ test( \"15x/T6y\", \"none\" );    \n/*54*/ test( \"zy4/5x6\", \"none\" );    \n/*55*/ test( \"2xy/4Tz\", \"none\" );    \n/*56*/ test( \"xzS/y1w\", \"none\" );    \n/*57*/ test( \"Syx/4z5\", \"none\" );    \n/*58*/ test( \"xwS/Tzy\", \"none\" );    \n/*59*/ test( \"D5z/xwy\", \"none\" );    \n/*60*/ test( \"yxD/z35\", \"none\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'ExpandedDice' do\n  dice = ExpandedDice.new\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    it input do\n      assert_equal expect, dice.masked_cell(input)\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}