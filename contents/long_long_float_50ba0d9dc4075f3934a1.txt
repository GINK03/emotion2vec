{"context": "\u3053\u306e\u8a18\u4e8b\u306f\u8a00\u8a9e\u5b9f\u88c5 Advent Calendar 2016\u306e19\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u4ee5\u524d\u304b\u3089LLVM\u306b\u8208\u5473\u304c\u3042\u308a\u3001\u6a5f\u4f1a1\u304c\u51fa\u6765\u305f\u306e\u3067LLVM\u3092\u3084\u3063\u3066\u307f\u305f(\u3068\u3044\u3046\u3088\u308a\u4f7f\u3063\u3066\u307f\u305f)\u8a18\u9332\u3067\u3059\u3002\n\u81ea\u5206\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fb\u8a00\u8a9e\u51e6\u7406\u7cfb\u306b\u95a2\u3057\u3066\u306f\u307b\u307c\u7d20\u4eba\u3067\u3042\u308a\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u3053\u3068\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u30c4\u30c3\u30b3\u3093\u3067\u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\u307e\u305f\u3001\u4ed6\u306eIR(\u4e2d\u9593\u8a00\u8a9e)\u3092\u77e5\u3089\u306a\u3044\u306e\u3067\u8a00\u8a9e\u4ed5\u69d8\u7684\u306b.NET\u3084JVM\u3068\u306e\u6bd4\u8f03\u306f\u305b\u305a\u3042\u304f\u307e\u3067\u81ea\u5206\u304cLLVM\u3092\u898b\u305f\u6642\u306b\u611f\u3058\u305f\u3053\u3068\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u5bfe\u8c61\u8aad\u8005\n\n\u8a00\u8a9e\u51e6\u7406\u7cfb\u306e\u57fa\u790e\u306f\u77e5\u3063\u3066\u3044\u308b\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3069\u3046\u30b3\u30f3\u30d1\u30a4\u30eb\u3001\u5b9f\u884c\u3055\u308c\u308b\u304b\n\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u57fa\u790e\u3092\u77e5\u3063\u3066\u3044\u308b\n\n\n\u4f8b\u3048\u3070for\u6587\u304c\u3069\u3046\u3084\u3063\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3067\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u304b\n\n\nC++\u304c\u8aad\u3081\u308b\n\n\n\u305d\u3093\u306a\u306b\u9ad8\u5ea6\u306a\u6a5f\u80fd\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\u6c17\u304c\u3059\u308b(\u7b46\u8005\u81ea\u8eabC++\uff81\uff6e\uff6f\uff84\uff83\uff9e\uff77\uff99\u7a0b\u5ea6)\u306e\u3067\u77e5\u3089\u306a\u304f\u3066\u3082\u306a\u3093\u3068\u304b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\n\n\n\n\nLLVM\u3068\u306f\n\u516c\u5f0f\u30da\u30fc\u30b8\u3092\u898b\u308b\u9650\u308a\u3060\u3068\u300c\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3055\u308c\u3066\u304a\u308a\u518d\u5229\u7528\u53ef\u80fd\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u3001\u53ca\u3073\u30c4\u30fc\u30eb\u30c1\u30a7\u30a4\u30f3\u6280\u8853\u300d\u3068\u8a00\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3060\u3068\u3056\u3063\u304f\u308a\u3057\u3066\u3044\u308b\u306e\u3067\u5177\u4f53\u7684\u306b\u66f8\u304f\u3068\n\nC, C++, Objective-C\u7b49\u306e\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\nLLVM\u547d\u4ee4\u306e\u5b9f\u88c5(\u30a2\u30bb\u30f3\u30d6\u30ea\u3068\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306e\u30ea\u30fc\u30c0\u3001\u30e9\u30a4\u30bf\u3001\u30d9\u30ea\u30d5\u30a1\u30a4\u30a2)\n\u30b3\u30fc\u30c9\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf(\u30a2\u30bb\u30f3\u30d6\u30e9?)\nJIT\u30b3\u30f3\u30d1\u30a4\u30e9\nLLVM\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306eAPI\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3089\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u3044\u304d\u307e\u3059(\u4ee5\u4e0b\u306fClang\u306e\u4f8b\u3067\u3059)\u3002\n\n\u30e1\u30ea\u30c3\u30c8\u3068\u3057\u3066\u306f\n\nLLVM IR\u3067\u5410\u3051\u3070\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\n\u30e9\u30a4\u30bb\u30f3\u30b9\u304cBSD\u30e9\u30a4\u30af\n\u3044\u308d\u3044\u308d\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5bfe\u5fdc\n\n\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u3002LLVM\u3092\u63a1\u7528\u3057\u3066\u3044\u308b\u51e6\u7406\u7cfb\u306fRust, Clang, LDC\u7b49\u306e\u5272\u3068\u30e2\u30c0\u30f3\u306a\u8a00\u8a9e\u304c\u591a\u3044\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u3002\n\u3053\u3053\u3067LLVM IR\u3068\u306f\u4e2d\u9593\u8a00\u8a9e\u306e\u4e00\u7a2e\u3067\u6a5f\u68b0\u8a9e\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u4e2d\u9593\u8a00\u8a9e\u3092\u4ecb\u3059\u308b\u3053\u3068\u3067\u69d8\u3005\u306a\u30a2\u30fc\u30af\u30c6\u30af\u30c1\u30e3\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u4eca\u56de\u306f\u4e0a\u306e\u56f3\u306e\u300c\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u300d\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f2\u3002\n\n\u3010Brainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u3011\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u307e\u305a\u3001\u624b\u59cb\u3081\u306bBrainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u306f\u8a00\u3044\u3064\u3064\u3082\u3044\u304d\u306a\u308a\u306f\u4f5c\u308c\u306a\u3044\u306e\u3067\u4ee5\u4e0b\u306e\u8cc7\u6599\u3092\u898b\u306a\u304c\u3089\u6982\u8981\u3092\u628a\u63e1\u3057\u307e\u3057\u305f\u3002\n\n\nhttp://llvm.org/docs/LangRef.html\n\n\nhttp://www.h3.dion.ne.jp/~mu-ra/llvm/LangRefJ.html (\u65e5\u672c\u8a9e\u8a33)\n\n\n\u304d\u3064\u306d\u3055\u3093\u3067\u3082\u308f\u304b\u308bLLVM \u67cf\u6728 \u9905\u5b50, \u98a8\u85ac\n\n\u3053\u3053\u304b\u3089\u308f\u304b\u3063\u305f\u3053\u3068\u306f\n\n\u578b\u306e\u6982\u5ff5\u304c\u3042\u308b\n\n\n\u6574\u6570\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u3001\u30d9\u30af\u30bf\u3001\u914d\u5217\u306a\u3069\n\u9577\u3055\u304c\u7570\u306a\u308b\u6574\u6570\u306f\u76f4\u63a5\u76f8\u4e92\u7684\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u306a\u3044(\u5909\u63db\u547d\u4ee4\u306f\u5b58\u5728\u3059\u308b)\n\n\nSSA\u5f62\u5f0f\u3067\u3042\u308b\n\n\n\u8a73\u3057\u304f\u306fWikipedia\u3092\u898b\u3066\u6b32\u3057\u3044\u306e\u3067\u3059\u304c(\u81ea\u5206\u306f\u3042\u307e\u308a\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u3067\u3059)\u3001\u3042\u3089\u3086\u308b\u5909\u6570\u304c\u4e00\u5ea6\u306e\u307f\u4ee3\u5165\u3055\u308c\u308b(\u4e0a\u66f8\u304d\u3055\u308c\u306a\u3044)\u3088\u3046\u306b\u66f8\u304b\u308c\u305f\u5f62\u5f0f\u3067\u3059\u3002\u6700\u9069\u5316\u304c\u3057\u3084\u3059\u304f\u306a\u308b\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u308c\u7528(?)\u306bphi\u547d\u4ee4\u304c\u3042\u308b\n\n\n\u5909\u6570\u306f\u30b9\u30bf\u30c3\u30af\u304b\u3089\u5272\u308a\u5f53\u3066\u308b(alloca)\u3053\u3068\u3067\u78ba\u4fdd\u3059\u308b\n\n\n\u30ed\u30fc\u30c9(load)\u3001\u30b9\u30c8\u30a2(store)\u306falloca\u3067\u8fd4\u3063\u3066\u304d\u305f\u30dd\u30a4\u30f3\u30bf\u7d4c\u7531\u3067\u884c\u3046\n\n\n\u6bd4\u8f03\u547d\u4ee4\u3001\u30b8\u30e3\u30f3\u30d7\u547d\u4ee4\u3001\u56db\u5247\u6f14\u7b97\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u7b49\u306f\u666e\u901a\u306b\u3042\u308b\n\n\u3060\u3044\u305f\u3044\u308f\u304b\u3063\u305f(\u6c17\u306b\u306a\u3063\u305f)\u3068\u3053\u308d\u3067\u65e9\u901f\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u81ea\u5206\u306fUbuntu\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067apt install llvm\u3067LLVM(\u30c4\u30fc\u30eb\u3001API)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3057\u305f\u3002\n\u6b21\u306b\u3053\u3053\u3092\u53c2\u8003\u306b\u307e\u305a\u306fHello World\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u51fa\u6765\u307e\u3059\u3002\ng++ main.cpp `llvm-config --cxxflags --ldflags --libs` -ldl -lpthread -ltinfo -fexceptions -o main\n\n\u3053\u3053\u304b\u3089Brainf*ck\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u3001Brainf*ck\u51e6\u7406\u7cfb\u306f30000\u500b\u306e\u30d0\u30a4\u30c8(i8)\u914d\u5217\u3068\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30bf\u3092\u72b6\u614b\u3068\u3057\u3066\u6301\u3064\u306e\u3067\u3053\u308c\u3089\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002CreateAlloca\u306fC\u8a00\u8a9e\u306ealloca\u95a2\u6570\u306e\u3088\u3046\u306b\u30b9\u30bf\u30c3\u30af\u304b\u3089\u9818\u57df\u3092\u78ba\u4fdd\u3059\u308b\u547d\u4ee4\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u30593\u3002CreateStore\u306f\u8a00\u308f\u305a\u3082\u304c\u306a\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5148\u306b\u5024\u3092\u30b9\u30c8\u30a2\u3059\u308b\u547d\u4ee4\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u4ee5\u964d\u3001\u7279\u306b\u88dc\u8db3\u304c\u306a\u3051\u308c\u3070\u95a2\u6570\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u306f\u3057\u306a\u3044\u306e\u3067\u9069\u5f53\u306b\u8abf\u3079\u3066\u6b32\u3057\u3044\u3067\u3059\u3002\n// i8 * MEMORY_SIZE\u306e\u9818\u57df\u78ba\u4fdd\nmemory = builder.CreateAlloca(builder.getInt8Ty(), builder.getInt32(MEMORY_SIZE), \"memory\");\n\n// \u30dd\u30a4\u30f3\u30bf\u9818\u57df\u78ba\u4fdd\ncurrent_index_ptr = builder.CreateAlloca(builder.getInt32Ty(), nullptr, \"pointer_ptr\");\n// *pointer_ptr = 0\nbuilder.CreateStore(builder.getInt32(0), current_index_ptr);\n\n\u6b21\u306b\u5404\u547d\u4ee4\u306b\u3064\u3044\u3066\u6de1\u3005\u3068\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u4ed5\u69d8\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308c\u3070\u3088\u304f\u7279\u306b\u8aac\u660e\u3059\u308b\u3053\u3068\u304c\u306a\u3044\u306e\u3067\u3053\u3053\u3092\u898b\u3066\u3082\u3089\u3048\u308c\u3070\u5206\u304b\u308b\u306f\u305a\u3067\u3059(\u5de5\u592b\u3057\u305f\u3068\u3053\u308d\u306f\u9023\u7d9a\u3057\u3066\u3044\u308b+, -\u3092\u307e\u3068\u3081\u3066\u3044\u308b\u304f\u3089\u3044)\u3002\n\u3053\u3053\u3067\u306fBrainf*ck\u6700\u5927\u306e\u96e3\u95a2\u3067\u3042\u308d\u3046[, ]\u306e\u89e3\u8aac\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\ncase '[': {\n  // while label\u3092\u4f5c\u6210(`[`)\u306b\u76f8\u5f53\n  auto *whileBB = llvm::BasicBlock::Create(context, \"while\", mainFunc);\n\n  // while\u306b\u5206\u5c90\n  // LLVM\u3067\u306f\u30d6\u30ed\u30c3\u30af\u306e\u6700\u5f8c\u306f\u7d42\u7aef\u547d\u4ee4(`ret`, `br`\u7b49)\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\n  builder.CreateBr(whileBB);\n\n  // \u547d\u4ee4\u3092\u633f\u5165\u3059\u308b\u5834\u6240\u3092whileBB\u306b\u3059\u308b\n  builder.SetInsertPoint(whileBB);\n\n  // \u73fe\u5728\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u6307\u3057\u793a\u3059\u5148\u306e\u5024\u304c0\u3067\u306a\u3044\u304b\n  auto valptr = createGetCurrent();\n  auto *cond = builder.CreateICmpNE(std::get<0>(valptr), builder.getInt8(0));\n\n  // then, merge\u30d6\u30ed\u30c3\u30af\u3092\u4f5c\u6210\n  auto *thenBB = llvm::BasicBlock::Create(context, \"then\", mainFunc);\n  // \u3053\u3053\u3067mainFunc\u304c\u306a\u3044\u306e\u306f`[`, `]`\u304c\u5165\u308c\u5b50\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3053\u306e\u6642\u70b9\u3067\u306fmerge\u3092\u633f\u5165\u3067\u304d\u306a\u3044\n  auto *mergeBB = llvm::BasicBlock::Create(context, \"merge\");\n\n  // 0\u3060\u3063\u305f\u3089then, \u305d\u3046\u3067\u306a\u3051\u308c\u3070merge\u306b\u5206\u5c90\n  builder.CreateCondBr(cond, thenBB, mergeBB);\n\n  builder.SetInsertPoint(thenBB);\n\n  // `]`\u7528\u306bwhile, merge\u3092\u53d6\u3063\u3066\u304a\u304f\n  loop_stack.push(BBPair(whileBB, mergeBB));\n\n  break;\n}\n\n\u3053\u3093\u306a\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\u6ce8\u610f\u3059\u3079\u304d\u3068\u3053\u308d\u306fmerge\u30d6\u30ed\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\u6642\u70b9\u3067\u306fmainFunc\u306b\u8ffd\u52a0\u3057\u306a\u3044\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u306e\u8fba\u308a\u306f\u751f\u6210\u3055\u308c\u308bIR\u3092\u8003\u3048\u308b\u3068\u89e3\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u30b9\u30bf\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u8fba\u308a\u306fBrainf*ck\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3068\u540c\u3058\u306a\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\ncase ']': {\n  if (loop_stack.size() == 0) {\n    throw \"no '[' corresponding ']'\";\n  }\n\n  // \u5bfe\u5fdc\u3059\u308b`[`\u306b\u5206\u5c90\n  auto pair = loop_stack.top();\n  loop_stack.pop();\n  builder.CreateBr(std::get<0>(pair));\n\n  // merge\u30d6\u30ed\u30c3\u30af\u3092\u633f\u5165\u3059\u308b\n  auto mergeBB = std::get<1>(pair);\n  mainFunc->getBasicBlockList().push_back(mergeBB);\n  builder.SetInsertPoint(mergeBB);\n\n  break;\n}\n\n\u53c2\u8003\u307e\u3067\u306b++++++[>++++++<-]>.($\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0)\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d5\u30ed\u30fc\u56f3(CFG)\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\u3053\u306eCFG\u306f\u624b\u3067\u66f8\u3044\u305f\u306e\u3067\u306f\u306a\u304f\u3001LLVM API\u306eCFG\u3092\u51fa\u529b\u3059\u308b\u6a5f\u80fd\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002CFG\u306b\u3057\u305f\u3044\u95a2\u6570->viewCFG()\u3092\u66f8\u304f\u3060\u3051\u3067dot\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u3066\u30d3\u30e5\u30fc\u30a2\u3092\u958b\u3044\u3066\u304f\u308c\u307e\u30594\u3002\n\n\u3053\u3053\u307e\u3067\u51fa\u6765\u305f\u3089\u5f8c\u306f\u30d3\u30c3\u30c8\u30b3\u30fc\u30c9(LLVM IR\u306e\u30d0\u30a4\u30ca\u30ea\u8868\u73fe)\u3092\u751f\u6210\u3059\u308c\u3070\u5b8c\u6210\u3067\u3059\u3002\nstd::error_code error_info;\nllvm::raw_fd_ostream os(\"a.bc\", error_info, llvm::sys::fs::OpenFlags::F_None);\nllvm::WriteBitcodeToFile(bfc.getModule(), os);\n\nhttps://github.com/long-long-float/bfc\n\u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\u3067\u306f\u3053\u306e\u5f8c\u306b\u6700\u9069\u5316\u3092\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u81ea\u5206\u304c\u4f5c\u3063\u305f\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u751f\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u6700\u9069\u5316\u3092\u3059\u308b\u3068\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u8981\u8abf\u67fb\u3067\u3059\u306d\u2026\n\u307e\u305f\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067Emscripten\u3067JavaScript\u306b\u3082\u5909\u63db\u3057\u3066\u307f\u307e\u3057\u305f\u3002Emscripten\u3068\u306fC/C++\u7b49\u304b\u3089\u751f\u6210\u3055\u308c\u308bLLVM\u30d3\u30c3\u30c8\u30b3\u30fc\u30c9(IR)\u304b\u3089JavaScript\u306b\u5909\u63db\u3059\u308b\u30c8\u30e9\u30f3\u30b9\u30ec\u30fc\u30bf\u3067\u3059\u3002\u4e3b\u306bC++\u7b49\u3067\u66f8\u304b\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092JavaScript\u3067\u52d5\u304b\u3059\u7528\u9014\u306b\u4f7f\u308f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5148\u7a0b\u306eBrainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u751f\u6210\u3057\u305fIR\u3092JavaScript\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5909\u63db\u3067\u304d\u307e\u3059($HOME\u306bSDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3068\u4eee\u5b9a)\u3002\n$ ./bfc hello.bf # LLVM IR\u3092\u751f\u6210(a.bc)\n$ ~/emsdk_portable/emscripten/master/emcc a.bc # LLVM IR\u304b\u3089JS\u306b\u5909\u63db\n$ node a.out.js\nHello, world!\n$ ~/emsdk_portable/emscripten/master/emcc a.bc -o hello.html # HTML\u306b\u5909\u63db\n\n\n\u3010\u4f3c\u975eLISP\u30b3\u30f3\u30d1\u30a4\u30e9\u3011\u4f5c\u3063\u3066\u307f\u305f\u3002\nBrainf*ck\u3060\u3051\u3060\u3068\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001LISP\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u306f\u8a00\u3063\u3066\u3082Scheme\u3084Common Lisp\u307b\u3069\u9ad8\u6a5f\u80fd\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n\nprint, cond, progn, defun\u7b49\u306e\u57fa\u672c\u7684\u306a\u95a2\u6570\u306f\u63c3\u3063\u3066\u3044\u308b\n\u578b\u306f\u6574\u6570\u3001\u6587\u5b57\u5217\u3001\u6574\u6570\u306e\u30ea\u30b9\u30c85\u306e\u307f\n\n\n\u7121\u540d\u95a2\u6570\u306f\u306a\u3044\n\n\n\u578b\u63a8\u8ad6(\u578b\u30c1\u30a7\u30c3\u30af)\u306f\u306a\u30445\n\n\ndefun\u3001cond\u3001setq\u306b\u578b\u3092\u6307\u5b9a\u3059\u308b\n\n\n\u30de\u30af\u30ed\u306f\u306a\u3044\nGC\u306f\u306a\u3044\n\n\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u306a\u3044\u306a\u3044\u3065\u304f\u3057\u3067\u3059\u304c\u304a\u8a31\u3057\u304f\u3060\u3055\u30446\u3002\n\u3055\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u6210\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u5b57\u53e5\u3001\u69cb\u6587\u89e3\u6790\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3053\u306e\u8a18\u4e8b\u3067\u306f\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u610f\u5473\u89e3\u6790(\u3053\u3053\u3067\u306f\u578b\u30c1\u30a7\u30c3\u30af\u3084\u8b58\u5225\u5b50\u306e\u89e3\u6c7a)\u3082\u30b3\u30fc\u30c9\u751f\u6210\u6642\u306b\u884c\u3046\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u751f\u6210\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u307e\u305a\u3001main\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nauto *funcType = llvm::FunctionType::get(builder.getInt32Ty(), false);\ncurrent_func = mainFunc = llvm::Function::Create(funcType, llvm::Function::ExternalLinkage, \"main\", module);\n\nmain_entry = llvm::BasicBlock::Create(context, \"entrypoint\", mainFunc);\nbuilder.SetInsertPoint(main_entry);\n\n\u3053\u3053\u3067current_func\u3082\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u308c\u306fif\u5f0f\u306a\u3069\u3067\u30d6\u30ed\u30c3\u30af\u3092\u8ffd\u52a0\u3059\u308b\u306e\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b21\u306b\u751f\u6210\u3057\u305f\u30b3\u30fc\u30c9\u5074\u3067\u4f7f\u7528\u3059\u308b\u69cb\u9020\u4f53\u3001\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n// cons\u30bb\u30eb\u306e\u5b9a\u7fa9\n// C\u8a00\u8a9e\u3067\u66f8\u304f\u3068\u3053\u3046\u306a\u308b\n// typedef struct _ilist {\n//   int32_t         car;\n//   struct _ilist  *cdr;\n// } ilist;\nauto struct_type = llvm::StructType::create(context, \"ilist\");\nstd::vector<llvm::Type*> members {\n  builder.getInt32Ty(),\n  llvm::PointerType::getUnqual(struct_type),\n};\nstruct_type->setBody(members);\nilist_ptr_type = llvm::PointerType::getUnqual(struct_type);\n\n// \u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\n// int puts(char*)\nstd::vector<llvm::Type*> putsArgs { builder.getInt8PtrTy() };\nputsFunc = define_function(\"puts\", putsArgs, builder.getInt32Ty());\n\n// \u4ee5\u4e0b\u540c\u69d8\n\n\u6700\u5f8c\u306b\u74b0\u5883(\u5909\u6570\u540d\u3068\u5024(LLVM::Value*)\u304cstd::map\u3067\u4fdd\u6301\u3055\u308c\u3066\u3044\u307e\u3059)\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\nroot_env = cur_env = new Environment();\n\n\u3053\u308c\u3067\u6e96\u5099\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\u3044\u3088\u3044\u3088\u30b3\u30fc\u30c9\u751f\u6210\u306b\u5165\u308a\u307e\u3059\u3002\nvoid Compiler::compile(std::vector<Object*> &ast) {\n  for (auto &object : ast) {\n    compile_expr(object);\n  }\n\n  // \u7d42\u4e86\u30b3\u30fc\u30c90\u3092\u8fd4\u3059(return 0;)\n  builder.CreateRet(builder.getInt32(0));\n}\n\nllvm::Value* Compiler::compile_expr(Object* obj) {\n  std::type_info const & id = typeid(*obj);\n  // obj\u304cCons\u578b\u3060\u3063\u305f\u3089\n  if(id == typeid(Cons)) {\n    auto list = (Cons*)obj;\n    // list\u306e0\u756a\u76ee\u304cSymbol\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u3068\u6c7a\u3081\u3064\u3051\u3066\u30ad\u30e3\u30b9\u30c8(Symbol\u3067\u306a\u304b\u3063\u305f\u3089\u4f8b\u5916\u304c\u98db\u3076)\n    auto name = regard<Symbol>(list->get(0))->value;\n    if(name == \"print\") {\n      // \u5f15\u6570\u3082\u540c\u69d8\u306b\u30b3\u30fc\u30c9\u751f\u6210\u3059\u308b\n      auto str = compile_expr(list->get(1));\n\n      builder.CreateCall(putsFunc, str);\n      return str;\n    }\n    // \u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u304c\u7d9a\u304f\u2026\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u7247\u304b\u3089\u5206\u304b\u308b\u901a\u308aLISP\u306e\u5f0f\u3092\u518d\u5e30\u3067\u305f\u3069\u3063\u3066\u30b3\u30fc\u30c9\u751f\u6210\u3057\u3066\u3044\u304d\u307e\u3059(Visitor\u30d1\u30bf\u30fc\u30f3\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u2026)\u3002\u4e0a\u3067\u578b\u30c1\u30a7\u30c3\u30af\u306f\u3057\u306a\u3044\u3068\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u578b\u304c\u4e0d\u5b9a\u3060\u3068\u30b3\u30fc\u30c9\u751f\u6210\u3067\u304d\u306a\u3044\u306e\u3067regard<...>\u306b\u3088\u3063\u3066\u5f37\u5236\u7684\u306b\u578b\u3092\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u8a71\u304c\u8131\u7dda\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u578b\u5909\u63db\u306b\u3064\u3044\u3066LLVM\u3067\u306f\u305d\u308c\u7528\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u81ea\u5206\u304c\u53c2\u8003\u306b\u3057\u305f\u304d\u3064\u306d\u672c\u3067\u3082\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u4ee5\u524d\u306b\u4f5c\u6210\u3057\u305fLISP\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u6d41\u7528\u3057\u3066\u304a\u308a\u4eca\u66f4\u305d\u308c\u7528\u306b\u4fee\u6b63\u3059\u308b\u306e\u306f\u9762\u5012\u3060\u3063\u305f\u306e\u3067LLVM\u306e\u30ad\u30e3\u30b9\u30c8\u306f\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002\u73fe\u6642\u70b9\u3067\u306f\u3053\u308c\u3067\u3082\u5168\u304f\u56f0\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u6050\u3089\u304f\u4f7f\u308f\u306a\u304f\u3066\u3082\u554f\u984c\u7121\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\u8a73\u3057\u304f\u306f http://llvm.org/docs/ProgrammersManual.html#the-isa-cast-and-dyn-cast-templates \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u8061\u660e\u306a\u65b9\u306f\u304a\u6c17\u3065\u304d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u306fprint\u306e\u5f15\u6570\u306e\u578b\u306b\u3064\u3044\u3066\u4f55\u3082\u89e6\u308c\u3066\u306a\u3044\u3067\u3059\u3002\u3064\u307e\u308a\u672c\u6765\u306f\u6587\u5b57\u5217\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u306e\u306b\u6574\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u578b\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u3088\u3063\u3066\u3053\u306e\u3088\u3046\u306a\u4e0d\u5177\u5408(?)\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u5b9f\u969b\u306f\u30a2\u30bb\u30f3\u30d6\u30eb(\u30bf\u30fc\u30b2\u30c3\u30c8\u30b3\u30fc\u30c9\u751f\u6210)\u6642\u306b\u578b\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u5b9f\u969b\u306b\u52d5\u304f\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5b9f\u7528\u7684\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u6210\u3059\u308b\u306a\u3089\u3070\u578b\u30c1\u30a7\u30c3\u30af\u306f\u3059\u3079\u304d\u3067\u3059\u3002\n\u5927\u67a0\u306e\u89e3\u8aac\u306f\u7d42\u3048\u305f\u306e\u3067\u3001\u500b\u3005\u306e\u6a5f\u80fd\u3092\u3069\u3046\u5b9f\u73fe\u3057\u3066\u3044\u308b\u304b\u3092\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u7d44\u307f\u8fbc\u307f\u95a2\u6570\n\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3068\u306f\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3059\u308b\u95a2\u6570\u3068\u306f\u9055\u3044\u3001\u4e88\u3081\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u306e\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308bprint\u3084\u6574\u6570\u3092\u51fa\u529b\u3059\u308bprintn\u306a\u3069\u304c\u3042\u308a\u307e\u30597\u3002\u3053\u308c\u3089\u30921\u304b\u3089\u5b9f\u88c5\u3059\u308b\u306e\u306f\u6d41\u77f3\u306b\u963f\u5446\u3089\u3057\u3044\u306e\u3067libc\u306e\u3082\u306e\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u5b9a\u7fa9\u306f\u5148\u307b\u3069\u884c\u3044\u307e\u3057\u305f\u3002\u30b3\u30fc\u30c9\u751f\u6210\u6642\u306b\u306f\u305d\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u547d\u4ee4\u3092\u751f\u6210\u3057\u307e\u3059\u3002\nif(name == \"print\") {\n  auto str = compile_expr(list->get(1));\n\n  builder.CreateCall(putsFunc, str);\n  return str;\n}\nelse if(name == \"printn\") {\n  auto num = compile_expr(list->get(1));\n\n  builder.CreateCall(printnFunc, num);\n  return num;\n}\n\nprintn\u306a\u3093\u3066libc\u306b\u306d\u30fc\u305e\u3001\u3068\u601d\u308f\u308c\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304cputs\u4ee5\u5916\u306flib.c(\u7d1b\u3089\u308f\u3057\u304f\u3066\u3059\u307f\u307e\u305b\u3093)\u306b\u95a2\u6570\u3092\u66f8\u3044\u3066Clang\u3067LLVM IR\u3092\u751f\u6210\u3057\u3066\u304b\u3089\u30ea\u30f3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u306b\u304b\u305a\u308b\u3044\u3088\u3046\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u304c\u697d\u3067\u304d\u308b\u3068\u3053\u308d\u306f\u697d\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3088\u306d?\n\nlib.c\u306e\u4e00\u90e8\ntypedef struct _ilist {\n  int32_t         car;\n  struct _ilist  *cdr; // cdr\u304cNULL\u3060\u3063\u305f\u3089nil\u3068\u3057\u3066\u6271\u3046\n} ilist;\n\nvoid printn(int n) {\n  printf(\"%d\\n\", n);\n}\n\nvoid printl(ilist *xs) {\n  printf(\"(\");\n  for (ilist *cur = xs; cur->cdr; cur = cur->cdr) {\n    printf(\"%d\", cur->car);\n    if (cur->cdr->cdr) {\n      printf(\" \");\n    }\n  }\n  printf(\")\\n\");\n}\n\nilist* cons(int32_t car, ilist *cdr) {\n  // TODO: fix memory leak\n  ilist *list = malloc(sizeof(ilist));\n  list->car = car;\n  list->cdr = cdr;\n  return list;\n}\n\n\n\u3068\u3053\u308d\u3067\u3001cons\u95a2\u6570\u306b// TODO: fix memory leak\u3068\u3044\u3046\u4e0d\u7a4f\u306a\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3053\u308c\u306fmalloc\u3057\u305f\u30e1\u30e2\u30ea\u9818\u57df\u3092\u958b\u653e\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u304c\u8d77\u3053\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306fGC(Garbage Collection: \u8981\u3089\u306a\u304f\u306a\u3063\u305f\u30e1\u30e2\u30ea\u9818\u57df(=\u30b4\u30df)\u3092\u81ea\u52d5\u7684\u306b\u958b\u653e\u3059\u308b\u6a5f\u69cb)\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u305d\u3053\u307e\u3067\u52c9\u5f37\u304c\u9032\u3093\u3067\u306a\u3044\u306e\u3067\u4eca\u56de\u306f\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\u4e0a\u306e\u30b3\u30fc\u30c9\u306b\u3042\u308bilist\u3082lib.c\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002compiler.cpp\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u304c\u5909\u66f4\u306a\u3093\u3066\u7121\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u59a5\u5354\u3057\u3066\u3044\u307e\u3059\u3002\u30b9\u30de\u30fc\u30c8\u306b\u5171\u6709\u3067\u304d\u308b\u77e5\u898b\u3092\u304a\u6301\u3061\u306e\u65b9\u306f\u3054\u6559\u6388\u3057\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u2026\n\nsetq\nsetq\u306f\u5909\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u30023\u756a\u76ee\u306e\u5f15\u6570\u3092\u8a55\u4fa1(\u30b3\u30fc\u30c9\u751f\u6210)\u3057\u305f\u5f8c\u3001\u9818\u57df\u3092\u78ba\u4fdd\u3001\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002LLVM IR\u306fSSA\u5f62\u5f0f\u306a\u306e\u3067compile_expr\u306e\u8fd4\u308a\u5024\u3092val\u306b\u4ee3\u5165\u3057\u3066\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u4ed6\u306e\u547d\u4ee4\u306e\u5f15\u6570\u306b\u4f7f\u3048\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306fBrainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u540c\u3058\u3067\u3059\u306d\u3002\nelse if(name == \"setq\") {\n  auto val = compile_expr(list->get(3));\n  // \u5909\u6570\u540d\u306f\u8a55\u4fa1\u3057\u306a\u3044\n  auto val_name = regard<Symbol>(list->get(2))->value;\n  // \u578b\u3092\u5f97\u308b\n  auto type = get_llvm_type(regard<Symbol>(list->get(1)));\n\n  // \u9818\u57df\u3092\u78ba\u4fdd\u3057\u3001\u5024\u3092\u683c\u7d0d\n  auto var_pointer = builder.CreateAlloca(type, nullptr, val_name);\n  builder.CreateStore(val, var_pointer);\n  // \u73fe\u5728\u306e\u74b0\u5883\u306b\u767b\u9332\u3059\u308b\n  cur_env->set(val_name, var_pointer);\n  return val;\n}\n\n\u3042\u3068\u4f55\u6c17\u306breturn val;\u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3046\u3059\u308b\u3053\u3068\u3067setq\u3057\u305f\u5024\u3092\u305d\u306e\u307e\u307e\u4ed6\u306e\u5f15\u6570\u306b\u4f7f\u3048\u305f\u308a\u3057\u307e\u3059\u3002C\u8a00\u8a9e\u3067\u8a00\u3046\u3001a = b = 1\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306fLISP\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u305d\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u7d50\u679c\u3067\u30598\u3002\n(setq int a 1)\n(setq int b (setq int c (+ a 1)))\n(printn b)\n(printn c)\n\ndefine i32 @main() {\nentrypoint:\n  %a = alloca i32\n  store i32 1, i32* %a\n  %0 = load i32, i32* %a\n  %1 = add i32 %0, 1\n  %c = alloca i32\n  store i32 %1, i32* %c     ; (setq int c (+ a 1))\n                            ; (+ a 1)\u306e\u7d50\u679c\u3067\u3042\u308b%1\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\n  %b = alloca i32\n  store i32 %1, i32* %b     ; (setq int b ...)\n                            ; \u540c\u3058\u304f%1\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\n  %2 = load i32, i32* %b\n  call void @printn(i32 %2)\n  %3 = load i32, i32* %c\n  call void @printn(i32 %3)\n  ret i32 0\n}\n\nLLVM\u306e\u547d\u4ee4\u306f\u4e00\u90e8\u306e\u9664\u304d\u8fd4\u308a\u5024(\u3068\u3044\u3046\u8a00\u3044\u65b9\u3067\u3044\u3044\u306e\u304b\u306a?)\u3092\u6301\u3061\u3001\u305d\u308c\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3082\u5024\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308bLLVM::Value*\u3092\u8fd4\u3059\u306e\u3067compile_expr\u3067\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u8fd4\u305b\u3070\u3001\u4e0a\u624b\u3044\u5177\u5408\u306b\u5024\u3092\u53d6\u308a\u56de\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306e\u4ed5\u69d8\u306e\u304a\u304b\u3052\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u4f5c\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059(\u4e2d\u9593\u8a00\u8a9e\u3067\u306f\u3042\u305f\u308a\u524d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c)\u3002\u4ed6\u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u306b\u5024\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\ndefun\ndefun\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u3002\u3053\u308c\u306fLISP\u30b3\u30fc\u30c9\u3068\u751f\u6210\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u7406\u89e3\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n(defun twice (x) (int) int (+ x x))\n(printn (twice 1))\n\ndefine i32 @main() {\nentrypoint:\n  %0 = call i32 @twice(i32 1)\n  call void @printn(i32 %0)\n  ret i32 0\n}\n\ndefine i32 @twice(i32 %x) {\nentrypoint:\n  %x1 = alloca i32\n  store i32 %x, i32* %x1\n  %0 = load i32, i32* %x1\n  %1 = load i32, i32* %x1\n  %2 = add i32 %0, %1\n  ret i32 %2\n}\n\n\u751f\u6210\u30b3\u30fc\u30c9\u306f\u5272\u3068\u7d20\u76f4\u306a\u611f\u3058\u3067\u8aad\u307f\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nelse if(name == \"defun\") {\n  auto func_name = regard<Symbol>(list->get(1))->value;\n  auto args      = regard<Cons>(list->get(2));\n  auto arg_types = regard<Cons>(list->get(3));\n  auto ret_type  = regard<Symbol>(list->get(4));\n  auto body      = regard<Cons>(list->tail(5));\n\n  std::vector<llvm::Type*> llvm_args;\n  // \u5404\u578b\u5f15\u6570\u306b\u3064\u3044\u3066LLVM::Type*\u306b\u5909\u63db\u3057\u3066...\n  EACH_CONS(arg_type, arg_types) {\n    llvm_args.push_back(get_llvm_type(regard<Symbol>(arg_type->get(0))));\n  }\n  llvm::ArrayRef<llvm::Type*> llvm_args_ref(llvm_args);\n  auto func_type = llvm::FunctionType::get(get_llvm_type(ret_type), llvm_args_ref, false);\n  // \u95a2\u6570\u3092\u4f5c\u6210\n  auto func = llvm::Function::Create(func_type, llvm::Function::ExternalLinkage, func_name, module);\n\n  Environment *env = new Environment();\n\n  // \u5404\u5f15\u6570\u306b\u540d\u524d\u3092\u3064\u3051\u308b\n  auto arg_itr = func->arg_begin();\n  EACH_CONS(arg, args) {\n    auto arg_name = regard<Symbol>(arg->get(0))->value;\n    arg_itr->setName(arg_name);\n\n    arg_itr++;\n  }\n\n  cur_env->set(func_name, func);\n\n  cur_env = cur_env->down_env(env);\n\n  // \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3001insert point\u3092\u5bfe\u8c61\u306e\u95a2\u6570\u306b\u8a2d\u5b9a\n  auto entry = llvm::BasicBlock::Create(context, \"entrypoint\", func);\n  builder.SetInsertPoint(entry);\n\n  // \u5404\u5f15\u6570\u306b\u3064\u3044\u3066\u95a2\u6570\u5185\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u65b0\u3057\u304fstore\u3059\u308b\n  // \u306a\u305c\u3053\u3093\u306a\u610f\u5473\u4e0d\u660e\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068vs_table.lookup\u3067\u53d6\u3063\u305f\u5024\u304c\u4f55\u6545\u304balloca\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u306a\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n  // \u304d\u3064\u306d\u672c\u3092\u63a2\u3057\u3066\u3082\u7121\u304b\u3063\u305f\u2026 \u3053\u308c\u3082\u77e5\u3063\u3066\u3044\u308b\u4eba\u306f\u6559\u3048\u3066\u6b32\u3057\u3044\u3067\u3059\u2026\n  auto &vs_table = func->getValueSymbolTable();\n  auto arg_type = arg_types;\n  EACH_CONS(arg, args) {\n    auto arg_name = regard<Symbol>(arg->get(0))->value;\n    auto alloca = builder.CreateAlloca(get_llvm_type(regard<Symbol>(arg_type->get(0))), 0, arg_name);\n    builder.CreateStore(vs_table.lookup(arg_name), alloca);\n    env->set(arg_name, alloca);\n\n    arg_type = (Cons*)arg_type->cdr;\n  }\n\n  auto prev_func = current_func;\n  current_func = func;\n\n  // \u95a2\u6570\u306e\u4e2d\u8eab\u3092\u30b3\u30fc\u30c9\u751f\u6210\u3057\u3001\u305d\u306e\u7d50\u679c\u3092ret\n  auto result = compile_exprs(body);\n  builder.CreateRet(result);\n\n  current_func = prev_func;\n\n  cur_env = cur_env->up_env();\n\n  // insert point\u3092main\u95a2\u6570\u306b\u623b\u3059\n  builder.SetInsertPoint(main_entry);\n}\n\n\u6982\u7565\u3092\u8aac\u660e\u3059\u308b\u3068\u3001\n\n\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u4f5c\u6210(\u6700\u521d\u306b\u3084\u3063\u305f\u3088\u3046\u306a\u3053\u3068\u3067\u3059)\n\u5f15\u6570\u540d\u3092\u8a2d\u5b9a\ninsert point\u3092\u8a2d\u5b9a\n\u5404\u5f15\u6570\u306b\u3064\u3044\u3066\u95a2\u6570\u5185\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u65b0\u3057\u304fstore\u3059\u308b\n\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u3082\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001vs_table.lookup\u3067\u3068\u3063\u305f\u5024\u3092alloca\u3067\u3068\u3063\u305f\u5024\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3057\u307e\u3044\u307e\u3059(\u6c17\u304c\u3059\u308b)\u3002\n\n\n\u95a2\u6570\u306e\u4e2d\u8eab\u306e\u30b3\u30fc\u30c9\u751f\u6210\n\n\n\ncompile_exprs\u306f\u5404\u5f0f\u306b\u3064\u3044\u3066compile_expr\u547c\u3093\u3067\u3044\u308b\u3060\u3051\u3067\u3059\n\n\n\n\n\u6f14\u7b97\u5b50(+\u3084=)\n\u3053\u308c\u306f\u8aac\u660e\u3059\u308b\u307e\u3067\u3082\u306a\u304f\u6574\u6570\u540c\u58eb\u306e\u6f14\u7b97\u3067\u3059\u3002\nelse if(name == \"+\") {\n  auto n1 = compile_expr(list->get(1));\n  auto n2 = compile_expr(list->get(2));\n  return builder.CreateAdd(n1, n2);\n}\n// \u540c\u3058\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306a\u306e\u3067\u7565\nelse if(name == \"=\") {\n  auto n1 = compile_expr(list->get(1));\n  auto n2 = compile_expr(list->get(2));\n  return builder.CreateICmpEQ(n1, n2);\n}\n\n\u672c\u5f53\u306b\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u7279\u306b\u89e3\u8aac\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u6bd4\u8f03\u3060\u3051\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u611f\u899a\u3060\u3068\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u306f\u30d5\u30e9\u30b0\u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001LLVM IR\u3067\u306f\u4ed6\u3068\u540c\u3058\u3088\u3046\u306b\u6bd4\u8f03\u7d50\u679c\u304c\u8fd4\u308a\u5024(i1: 1bit\u306e\u6574\u6570\u3001\u3064\u307e\u308a\u771f\u507d\u5024)\u306b\u306a\u308a\u307e\u3059\u3002br\u547d\u4ee4\u306f\u3053\u306e\u7d50\u679c\u3092\u5f15\u6570\u306b\u53d6\u308a\u307e\u3059\u3002\n\nprogn\n1\u3064\u306e\u5f0f\u3057\u304b\u7f6e\u3051\u306a\u3044\u3068\u3053\u308d\u306b\u8907\u6570\u306e\u5f0f\u3092\u7f6e\u304f\u306e\u306b\u4f7f\u3046\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u3002compile_exprs\u3092\u547c\u3076\u3060\u3051\u3067\u3059\u3002\n\ncond\ncond\u306f\u6761\u4ef6\u5206\u5c90\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u3002C\u8a00\u8a9e\u306eif..else if..else\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002cond\u3092\u4f7f\u7528\u3057\u305fLISP\u30b3\u30fc\u30c9\u3068\u305d\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u3092\u4e0b\u8a18\u306b\u63b2\u8f09\u3057\u307e\u3059\u3002\n(setq int a 2)\n(print (cond string\n  ((= a 0) \"zero\")\n  ((= a 1) \"one\")\n  ((= a 2) \"two\")\n  (\"other\")))\n\n@0 = private unnamed_addr constant [5 x i8] c\"zero\\00\"\n@1 = private unnamed_addr constant [4 x i8] c\"one\\00\"\n@2 = private unnamed_addr constant [4 x i8] c\"two\\00\"\n@3 = private unnamed_addr constant [6 x i8] c\"other\\00\"\n\ndefine i32 @main() {\nentrypoint:\n  %a = alloca i32\n  store i32 2, i32* %a\n  %0 = load i32, i32* %a\n  %1 = icmp eq i32 %0, 0\n  br i1 %1, label %then, label %else\n\nthen:                                             ; preds = %entrypoint\n  br label %endcond\n\nelse:                                             ; preds = %entrypoint\n  %2 = load i32, i32* %a\n  %3 = icmp eq i32 %2, 1\n  br i1 %3, label %then1, label %else2\n\nthen1:                                            ; preds = %else\n  br label %endcond\n\nelse2:                                            ; preds = %else\n  %4 = load i32, i32* %a\n  %5 = icmp eq i32 %4, 2\n  br i1 %5, label %then3, label %else4\n\nthen3:                                            ; preds = %else2\n  br label %endcond\n\nelse4:                                            ; preds = %else2\n  br label %endcond\n\nendcond:                                          ; preds = %else4, %then3, %then1, %then\n  %condtmp = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), %then ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), %then1 ],\n [ getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), %then3 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @3, i32 0, i32 0), %else4 ]\n  %6 = call i32 @puts(i8* %condtmp)\n  ret i32 0\n}\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308bCFG\u3092\u4e0b\u8a18\u306b\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n\u6b21\u306bcond\u306b\u5bfe\u3057\u3066\u3069\u3046\u30b3\u30fc\u30c9\u751f\u6210\u3057\u305f\u304b\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\nelse if(name == \"cond\") {\n  auto ret_type = regard<Symbol>(list->get(1));\n\n  using BB_Value = std::pair<llvm::BasicBlock*, llvm::Value*>;\n\n  // else\u306e\u30d6\u30ed\u30c3\u30af\u3068\u5024\u3092\u4fdd\u6301\u3059\u308b\n  BB_Value elseBB;\n\n  auto mergeBB = llvm::BasicBlock::Create(module->getContext(), \"endcond\");\n\n  std::vector<BB_Value> thenBBs;\n\n  EACH_CONS(val, list->tail(2)) {\n    auto cond_expr_pair = regard<Cons>(val->get(0));\n\n    // \u4f59\u308a\u3082\u306e\n    if (cond_expr_pair->size() == 1) { // else\n      // \u8fd4\u308a\u5024\u306b\u3059\u308b\u305f\u3081\u306belseBB\u306b\u30bb\u30c3\u30c8\u3059\u308b\n      elseBB.second = compile_expr(cond_expr_pair->get(0));\n      // endcond\u306b\u30b8\u30e3\u30f3\u30d7\n      builder.CreateBr(mergeBB);\n\n      break;\n\n    } else { // then\n      auto cond = compile_expr(cond_expr_pair->get(0));\n      auto thenBB = llvm::BasicBlock::Create(module->getContext(), \"then\");\n      auto _elseBB = llvm::BasicBlock::Create(module->getContext(), \"else\");\n\n      // \u4e00\u756a\u6700\u5f8c\u306eelse\u30d6\u30ed\u30c3\u30af\u3092\u4fdd\u6301\n      elseBB.first = _elseBB;\n\n      // cond\u304c1(true)\u3060\u3063\u305f\u3089then\u306b\u30b8\u30e3\u30f3\u30d7\n      builder.CreateCondBr(cond, thenBB, _elseBB);\n\n      // then\u30d6\u30ed\u30c3\u30af\u3092\u633f\u5165\n      current_func->getBasicBlockList().push_back(thenBB);\n      builder.SetInsertPoint(thenBB);\n\n      // then\u306e\u5f0f\u3092\u51e6\u7406\n      auto thenValue = compile_expr(cond_expr_pair->get(1));\n      // phi\u547d\u4ee4\u7528\u306b\u3053\u306e\u6642\u70b9\u3067\u306e\u6700\u5f8c\u306e\u30d6\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3057\u3001thenBBs\u306b\u5024\u3068\u3068\u3082\u306b\u8ffd\u52a0    <--------- (a)\n      auto lastThenBB = builder.GetInsertBlock();\n      thenBBs.push_back(BB_Value(lastThenBB, thenValue));\n      // endcond\u306b\u30b8\u30e3\u30f3\u30d7\n      builder.CreateBr(mergeBB);\n\n      // else\u306e\u30d6\u30ed\u30c3\u30af\u306f\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8ffd\u52a0\u3059\u308b\n      current_func->getBasicBlockList().push_back(_elseBB);\n      builder.SetInsertPoint(_elseBB);\n    }\n  }\n\n  // endcond\u30d6\u30ed\u30c3\u30af\u3092\u8ffd\u52a0\n  current_func->getBasicBlockList().push_back(mergeBB);\n  builder.SetInsertPoint(mergeBB);\n\n  // phi\u547d\u4ee4\u3092\u751f\u6210\n  auto phi = builder.CreatePHI(get_llvm_type(ret_type), 2, \"condtmp\");\n  for (auto thenBB : thenBBs) {\n    // \u4eca\u307e\u3067\u306ethen\u7bc0\u306e\u6700\u5f8c\u306e\u30d6\u30ed\u30c3\u30af\u3068\u5024\u3092\u8ffd\u52a0\n    phi->addIncoming(thenBB.second, thenBB.first);\n  }\n  // \u6700\u5f8c\u306belseBB\u306e\u30d6\u30ed\u30c3\u30af\u3068\u5024\u3092\u8ffd\u52a0\n  phi->addIncoming(elseBB.second, elseBB.first);\n\n  // \u3053\u308c\u3092\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066cond\u304c\u5f0f\u3068\u3057\u3066\u5024\u3092\u6301\u3064\u3088\u3046\u306b\u306a\u308b\n  return phi;\n}\n\n\u2026\n\u6587\u7ae0\u3067\u8aac\u660e\u3067\u304d\u308b\u81ea\u4fe1\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u3067\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u521d\u3081\u3066\u51fa\u308bphi\u547d\u4ee4\u306f\u3001SSA\u306e\u03c6\u95a2\u6570\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\u3068\u8a00\u3063\u3066\u3082\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c(\u81ea\u5206\u3082\u5b8c\u5168\u306b\u306f\u7406\u89e3\u3057\u3066\u306a\u3044\u3067\u3059)\u3001\u8aa4\u89e3\u3092\u6050\u308c\u305a\u306b\u8a00\u3046\u3068\u5206\u5c90\u3057\u305f\u30d6\u30ed\u30c3\u30af\u304c\u6301\u3064\u5358\u4e00\u306e\u5024(cond\u306e\u8fd4\u308a\u5024)\u3092\u307e\u3068\u3081\u308b\u547d\u4ee4\u3067\u3057\u3087\u3046\u304b\u3002\u4f8b\u3048\u3070\u4e0a\u306eCFG\u306e\u4e00\u756a\u4e0b\u306e\u7bb1\u3067phi\u547d\u4ee4\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u5f15\u6570\u3067\u3042\u308b[ getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), %then ]\u3067\u307e\u3068\u3081\u308b\u30d6\u30ed\u30c3\u30af(%then)\u3068\u5024(@0)\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u3059\u3067\u306b\u304a\u6c17\u3065\u304d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304cphi\u547d\u4ee4\u304c\u3042\u308b\u7bb1\u306b\u7e4b\u304c\u308c\u3066\u3044\u308b\u77e2\u5370\u306f\u305d\u306e\u5f15\u6570\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306e(a)\u306b\u3064\u3044\u3066\u3001lastThenBB\u306fthenBB\u3067\u306f\u3044\u3051\u306a\u3044\u306e\u304b\u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u78ba\u304b\u306bcond\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u6700\u5f8c\u306e\u30d6\u30ed\u30c3\u30af\u306fthenBB\u306b\u306a\u308b\u306e\u3067\u554f\u984c\u304c\u7121\u3044\u3067\u3059\u304c\u3001then\u7bc0\u306e\u4e2d\u306bcond\u304c\u3042\u308b\u3068\u65b0\u305f\u306b\u30d6\u30ed\u30c3\u30af\u304c\u633f\u5165\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067phi\u547d\u4ee4\u306b\u6e21\u3059\u30d6\u30ed\u30c3\u30af\u304c\u9055\u3046\u3082\u306e\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u30bf\u30fc\u30b2\u30c3\u30c8\u30b3\u30fc\u30c9\u751f\u6210\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\u30d6\u30ed\u30c3\u30af\u540d\u306f\u88ab\u3089\u306a\u3044\u3088\u3046\u306b\u540d\u524d\u3092\u4ed8\u3051\u3066\u304f\u308c\u308b(then1\u7b49)\u306e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3067\u3059\u3002\n\ncar, cdr\ncar\u306f\u30ea\u30b9\u30c8\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3001cdr\u306f\u6700\u521d\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u308a\u51fa\u3059\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u3089\u306flib.c\u306b\u306f\u66f8\u304b\u305a\u306b\u76f4\u63a5\u30b3\u30fc\u30c9\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002LISP\u306f\u9023\u7d9a\u3057\u305f\u30c7\u30fc\u30bf\u3092\u914d\u5217\u3067\u306f\u306a\u304f\u30ea\u30b9\u30c8\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u306e\u3067cdr\u3082\u7c21\u6f54\u306b\u66f8\u3051\u307e\u3059(\u305d\u306e\u4ee3\u308f\u308an\u756a\u76ee\u306e\u8981\u7d20\u306e\u30a2\u30af\u30bb\u30b9\u304cO(n)\u3060\u3063\u305f\u308a\u3059\u308b\u304c\u2026)\u3002\nelse if(name == \"car\") {\n  auto xs = compile_expr(list->get(1));\n  // ilist\u306e1\u756a\u76ee\u306e\u8981\u7d20(car)\u3092\u53d6\u308a\u51fa\u3059\n  return builder.CreateExtractValue(builder.CreateLoad(xs), 0);\n}\nelse if(name == \"cdr\") {\n  auto xs = compile_expr(list->get(1));\n  // ilist\u306e2\u756a\u76ee\u306e\u8981\u7d20(cdr)\u3092\u53d6\u308a\u51fa\u3059\n  return builder.CreateExtractValue(builder.CreateLoad(xs), 1);\n}\n\n\n\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u547c\u3073\u51fa\u3057\n\u95a2\u6570\u5b9a\u7fa9\u3068\u9055\u3044\u3001\u3053\u3061\u3089\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\u3068\u3044\u3046\u304b\u95a2\u6570\u3092\u53d6\u5f97\u3059\u308b\u3068\u3053\u308d\u4ee5\u5916\u306f\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3068\u540c\u3058\u3067\u3059\u3002\nelse {\n  // \u95a2\u6570\u3092\u53d6\u5f97\n  auto func = cur_env->get(name);\n\n  if (!func) {\n    throw std::logic_error(\"undefined function: \" + name);\n  }\n\n  // \u5f15\u6570\u3092\u8a55\u4fa1\u3059\u308b\n  auto args = list->tail(1);\n  std::vector<llvm::Value*> callee_args;\n  EACH_CONS(arg, args) {\n    callee_args.push_back(compile_expr(arg->get(0)));\n  }\n  llvm::ArrayRef<llvm::Value*> callee_args_ref(callee_args);\n\n  // call\u547d\u4ee4\u3092\u751f\u6210\n  return builder.CreateCall((llvm::Function*)func, callee_args_ref);\n}\n\n\n\u30ea\u30c6\u30e9\u30eb(\u6570\u5024\u3084\u6587\u5b57\u5217)\nLISP\u30b3\u30fc\u30c9\u4e2d\u306e\u6570\u5024\u3084\u6587\u5b57\u5217\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6271\u3063\u3066\u3044\u307e\u3059\u3002\nelse if(id == typeid(Symbol)) { // \u8b58\u5225\u5b50(\u5909\u6570)\n  auto var_name = regard<Symbol>(obj)->value;\n  // \u5909\u6570\u306e\u53c2\u7167\u3092\u5f97\u3066\n  auto var = cur_env->get(var_name);\n  if (!var) {\n    throw std::logic_error(\"undefined variable: \" + var_name);\n  }\n  // \u30ed\u30fc\u30c9\u3059\u308b\n  return builder.CreateLoad(var);\n}\nelse if(id == typeid(Nil)) { // nil\n  // nil\u95a2\u6570\u3092\u547c\u3076\n  return builder.CreateCall(nilFunc);\n}\nelse if(id == typeid(String)) { // \u6587\u5b57\u5217\n  // \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u767b\u9332\u3059\u308b\n  return builder.CreateGlobalStringPtr(regard<String>(obj)->value.c_str());\n}\nelse if(id == typeid(Integer)) { // \u6574\u6570\n  // \u5373\u5024\u3068\u3057\u3066\u6271\u3046\n  return builder.getInt32(regard<Integer>(obj)->value);\n} else {\n  throw std::logic_error(\"unknown expr: \" + obj->lisp_str());\n}\n\nnil\u95a2\u6570\u306flib.c\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002nil\u3068\u66f8\u304f\u305f\u3073\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306e\u306f\u30d0\u30ab\u30d0\u30ab\u3057\u3044\u306e\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u6301\u3063\u3066\u304a\u3044\u3066\u305d\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u4eca\u306e\u3068\u3053\u308dcons\u3092\u64cd\u4f5c\u3059\u308b\u95a2\u6570\u306f\u306a\u3044\u306e\u3067\u4f7f\u3044\u307e\u308f\u3057\u3066\u3082\u554f\u984c\u7121\u3044\u3067\u3059\u3002\nilist NIL = {0, NULL};\nilist* nil() {\n  return &NIL;\n}\n\n\u3053\u3053\u307e\u3067\u3067\u4e00\u5fdc\u52d5\u304f\u3082\u306e\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\nhttps://github.com/long-long-float/lllisp\n$ cat examples/fizzbuzz.lisp\n\n; for\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u304c\u306a\u3044\u306e\u3067\u518d\u5e30\u3067\n(defun fizzbuzz (n) (int) string\n (cond string ((> 101 n) (progn\n   (print\n    (cond string\n     ((= (mod n 15) 0) \"FizzBuzz\")\n     ((= (mod n 3)  0) \"Fizz\")\n     ((= (mod n 5)  0) \"Buzz\")\n     ((itoa n))\n     ))\n   (fizzbuzz (+ n 1))))\n  ((print \"finish\"))))\n\n(fizzbuzz 1)\n\n$ ./compile examples/fizzbuzz.lisp\n(:defun :fizzbuzz (:n) (:int) :string (:cond :string ((:> 101 :n) (:progn (:print (:cond :string ((:= (:mod :n 15) 0) \"FizzBuzz\") ((:= (:mod :n 3) 0) \"Fizz\") ((:= (:mod\n:n 5) 0) \"Buzz\") ((:itoa :n)))) (:fizzbuzz (:+ :n 1)))) ((:print \"finish\"))))\n$ ./a.out\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n.\n.\n.\nfinish\n\n\u52d5\u304d\u307e\u3057\u305f\u306d :)\n\n\u30cf\u30de\u3063\u305f\u6240\n\u899a\u3048\u3066\u3044\u308b\u7bc4\u56f2\u3067\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\u5148\u307b\u3069\u8aac\u660e\u3057\u305f\u3001SetInsertPoint(thenBB)\u304ccond\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u306a\u3044\u72b6\u614b\u3067\u306f\u666e\u901a\u306b\u52d5\u304f\u306e\u3067\u4e0d\u8981\u3060\u3068\u601d\u3063\u3066\u3044\u3066\u3001\u3044\u3056FizzBuzz\u3092\u52d5\u304b\u305d\u3046\u3068\u3057\u305f\u3089\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u3070\u3089\u304f\u60a9\u307f\u307e\u3057\u305f\u3002\nLLVM IR\u3092\u51fa\u529b\u3059\u308b\u3068\u304d\u306b\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\n\n\n\u30dd\u30a4\u30f3\u30bf\u578b\u3092\u5265\u304c\u3055\u305a(load\u3067\u53c2\u7167\u5148\u3092\u53d6\u308c\u307e\u3059)\u306b\u4f7f\u3063\u3066\u3044\u305f\u306e\u304c\u539f\u56e0\u3067\u3057\u305f\u3002\n\n\n\n\n\u611f\u60f3\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u521d\u3081\u3066\u4f5c\u6210\u3057\u305f\u306e\u3067\u3059\u304cLLVM\u3092\u4f7f\u3046\u3068\u601d\u3044\u306e\u5916\u3001\u697d\u3067\u3057\u305f9\u3002Web\u3067\u8abf\u3079\u308b\u3068\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u3082\u307e\u3042\u307e\u3042\u3042\u308b\u306e\u3067\u3059\u304c\u82e5\u5e72\u53e4\u304b\u3063\u305f\u308a\u3001\u307e\u305fBrainf*ck\u7b49\u306e\u7c21\u5358\u306a\u3082\u306e\u3057\u304b\u306a\u304b\u3063\u305f\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067Brainf*ck\u3088\u308a\u304b\u306f\u5b9f\u7528\u7684\u306aLISP\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u89e3\u8aac\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u3082\u3063\u3068LLVM\u306e\u6df1\u3044\u3068\u3053\u308d\u3084\u7406\u8ad6\u7684\u306a\u3068\u3053\u308d\u3082\u66f8\u3044\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u52c9\u5f37\u4e0d\u8db3\u3086\u3048\u3001(\u672c\u8cea\u3092\u8aac\u660e\u3057\u3066\u3044\u306a\u3044)LLVM\u306eTips\u96c6\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u8fba\u308a\u306f\u52c9\u5f37\u3057\u3066\u3044\u304d\u305f\u3044\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\nLLVM\u3092\u4f7f\u7528\u3057\u3066\u3001Brainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u3068LISP\u3082\u3069\u304d\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002LLVM\u3067\u4f55\u304b\u4f5c\u6210\u3059\u308b\u969b\u306b\u53c2\u8003\u306b\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\u3042\u3068\u3001\u5ba3\u4f1d\u306b\u306a\u308b\u306e\u3067\u3059\u304cC91\u3067\u9812\u5e03\u3059\u308b\u4e88\u5b9a\u306e\u5408\u540c\u8a8c\u306b\u672c\u8a18\u4e8b\u3092\u5bc4\u7a3f\u3057\u305f\u306e\u3067\u305c\u3072\u305c\u3072\u624b\u306b\u3068\u3063\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059(\u50d5\u306f\u3044\u306a\u3044\u3067\u3059\u304c)\u3002 \u6728\u66dc\u65e5 \u897f\u307f18b \u300c\u63da\u7fbd\u9ad8\u6821\u60c5\u5831\u51e6\u7406\u90e8\u300d \u3067\u9812\u5e03\u3057\u307e\u3059\u3002CTF\u3084\u7af6\u30d7\u30ed\u30013D\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u30d7\u30ed\u304c\u66f8\u3044\u3066\u3044\u305f\u308a\u3059\u308b\u306e\u3067\u5185\u5bb9\u306f\u6fc3\u3044\u3060\u308d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\n\n\u304d\u3064\u306d\u3055\u3093\u3067\u3082\u308f\u304b\u308bLLVM \u67cf\u6728 \u9905\u5b50, \u98a8\u85ac\nhttp://llvm.org/docs/LangRef.html\nhttps://github.com/llvm-mirror/llvm\nhttp://llvm.org/docs/doxygen/html/index.html\nhttps://www.ibm.com/developerworks/jp/opensource/library/os-createcompilerllvm1/\nhttps://www.google.co.jp\nhttp://www.wilfred.me.uk/blog/2015/02/21/my-first-llvm-compiler/\nhttp://qiita.com/k2ymg/items/653c5b22b74a091be604\nhttp://postd.cc/an-introduction-to-llvm-in-go/\nhttps://peta.okechan.net/blog/llvm%E3%81%AB%E3%82%88%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%AE%E5%AE%9F%E8%A3%85\nhttp://d.hatena.ne.jp/mjt/20111009/p2\n\n\n\n\n\nhttp://connpass.com/event/38487/\u00a0\u21a9\n\n\nPass\u306e\u6700\u9069\u5316\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306f\u3084\u3063\u3066\u3044\u306a\u3044\u3067\u3059\u00a0\u21a9\n\n\n\u30cd\u30c3\u30c8\u3067\u8abf\u3079\u3066\u3044\u308b\u3068\u305f\u307e\u306bIRBuilder\u3092\u4f7f\u308f\u305a\u306b\u547d\u4ee4\u3084\u5024\u306e\u30af\u30e9\u30b9\u3092new\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092\u898b\u304b\u3051\u308b\u306e\u3067\u3059\u304c\u30d3\u30eb\u30c0\u30fc\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u697d\u306a\u306e\u3067\u4f7f\u3048\u308b\u306a\u3089\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u3067\u3059(\u30d3\u30eb\u30c0\u30fc\u3067\u4f5c\u308c\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u304c)\u00a0\u21a9\n\n\ndot\u30d3\u30e5\u30fc\u30a2\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Ubuntu\u306e\u5834\u5408 sudo apt install xdot\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\u00a0\u21a9\n\n\n\u624b\u629c\u304d\u5b9f\u88c5\u3092\u697d\u306b\u3059\u308b\u305f\u3081\u00a0\u21a9\n\n\n\u4e00\u5fdc\u8a00\u3044\u8a33\u3092\u3057\u3066\u304a\u304f\u3068\u3001\u81ea\u5206\u306e\u52c9\u5f37\u4e0d\u8db3\u3001\u307e\u3068\u307e\u3063\u305f\u6642\u9593\u3092\u53d6\u308b\u306e\u304c\u96e3\u3057\u304b\u3063\u305f\u3001\u4f5c\u308a\u59cb\u3081\u305f\u306e\u304c3\u30f6\u6708\u524d\u3067(\u98fd\u304d\u6027\u306a\u306e\u3067)\u610f\u8b58\u304c\u5225\u306e\u65b9\u306b\u5411\u304b\u3063\u3066\u3044\u3063\u305f\u3053\u3068\u304c\u91cd\u306a\u3063\u3066\u6b8b\u5ff5\u306aLISP\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u00a0\u21a9\n\n\n\u306a\u305c\u578b\u3054\u3068\u306b\u51fa\u529b\u95a2\u6570\u304c\u3042\u308b\u304b\u3068\u3044\u3046\u3068\u578b\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5f15\u6570\u306e\u578b\u304c\u308f\u304b\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u2026\u00a0\u21a9\n\n\n\u4f8b\u304c\u5c11\u3005\u4e0d\u81ea\u7136\u306a\u306e\u306f\u3001setq\u306e\u5f15\u6570\u306e\u7d50\u679c\u304c\u6b21\u306e\u5f0f\u306e\u5f15\u6570((setq int b ...))\u306b\u4f7f\u308f\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u5f37\u8abf\u3057\u305f\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\u5373\u5024(\u5373\u5024\u540c\u58eb\u306e\u8a08\u7b97\u3082\u542b\u3080)\u3060\u3068\u76f4\u63a5\u5f15\u6570\u306b\u7f6e\u304b\u308c\u3066\u3057\u307e\u3046\u3093\u3067\u3059\u3088\u306d\u2026\u00a0\u21a9\n\n\n\u4ee5\u524d\u3001C\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u6210\u3057\u3088\u3046\u3068\u3057\u3066\u632b\u6298\u3057\u305f\u306e\u3067\u2026\u00a0\u21a9\n\n\n\n\u3053\u306e\u8a18\u4e8b\u306f[\u8a00\u8a9e\u5b9f\u88c5 Advent Calendar 2016](http://qiita.com/advent-calendar/2016/lang_dev)\u306e19\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u4ee5\u524d\u304b\u3089LLVM\u306b\u8208\u5473\u304c\u3042\u308a\u3001\u6a5f\u4f1a[^1]\u304c\u51fa\u6765\u305f\u306e\u3067LLVM\u3092\u3084\u3063\u3066\u307f\u305f(\u3068\u3044\u3046\u3088\u308a\u4f7f\u3063\u3066\u307f\u305f)\u8a18\u9332\u3067\u3059\u3002\n\n\u81ea\u5206\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fb\u8a00\u8a9e\u51e6\u7406\u7cfb\u306b\u95a2\u3057\u3066\u306f\u307b\u307c\u7d20\u4eba\u3067\u3042\u308a\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u3053\u3068\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u30c4\u30c3\u30b3\u3093\u3067\u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u4ed6\u306eIR(\u4e2d\u9593\u8a00\u8a9e)\u3092\u77e5\u3089\u306a\u3044\u306e\u3067\u8a00\u8a9e\u4ed5\u69d8\u7684\u306b.NET\u3084JVM\u3068\u306e\u6bd4\u8f03\u306f\u305b\u305a\u3042\u304f\u307e\u3067\u81ea\u5206\u304cLLVM\u3092\u898b\u305f\u6642\u306b\u611f\u3058\u305f\u3053\u3068\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u5bfe\u8c61\u8aad\u8005\n\n* \u8a00\u8a9e\u51e6\u7406\u7cfb\u306e\u57fa\u790e\u306f\u77e5\u3063\u3066\u3044\u308b\n    * \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3069\u3046\u30b3\u30f3\u30d1\u30a4\u30eb\u3001\u5b9f\u884c\u3055\u308c\u308b\u304b\n* \u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u57fa\u790e\u3092\u77e5\u3063\u3066\u3044\u308b\n    * \u4f8b\u3048\u3070for\u6587\u304c\u3069\u3046\u3084\u3063\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3067\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u304b\n* C++\u304c\u8aad\u3081\u308b\n    * \u305d\u3093\u306a\u306b\u9ad8\u5ea6\u306a\u6a5f\u80fd\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\u6c17\u304c\u3059\u308b(\u7b46\u8005\u81ea\u8eabC++\uff81\uff6e\uff6f\uff84\uff83\uff9e\uff77\uff99\u7a0b\u5ea6)\u306e\u3067\u77e5\u3089\u306a\u304f\u3066\u3082\u306a\u3093\u3068\u304b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\n\n# LLVM\u3068\u306f\n\n\u516c\u5f0f\u30da\u30fc\u30b8\u3092\u898b\u308b\u9650\u308a\u3060\u3068\u300c\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3055\u308c\u3066\u304a\u308a\u518d\u5229\u7528\u53ef\u80fd\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u3001\u53ca\u3073\u30c4\u30fc\u30eb\u30c1\u30a7\u30a4\u30f3\u6280\u8853\u300d\u3068\u8a00\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3060\u3068\u3056\u3063\u304f\u308a\u3057\u3066\u3044\u308b\u306e\u3067\u5177\u4f53\u7684\u306b\u66f8\u304f\u3068\n\n* C, C++, Objective-C\u7b49\u306e\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\n* LLVM\u547d\u4ee4\u306e\u5b9f\u88c5(\u30a2\u30bb\u30f3\u30d6\u30ea\u3068\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306e\u30ea\u30fc\u30c0\u3001\u30e9\u30a4\u30bf\u3001\u30d9\u30ea\u30d5\u30a1\u30a4\u30a2)\n* \u30b3\u30fc\u30c9\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf(\u30a2\u30bb\u30f3\u30d6\u30e9?)\n* JIT\u30b3\u30f3\u30d1\u30a4\u30e9\n* LLVM\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306eAPI\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3089\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u3044\u304d\u307e\u3059(\u4ee5\u4e0b\u306fClang\u306e\u4f8b\u3067\u3059)\u3002\n\n![\u5909\u63db\u306e\u6d41\u308c](https://qiita-image-store.s3.amazonaws.com/0/16790/f37fdf84-de2b-d7f5-5083-db0ff3658c43.png)\n\n\u30e1\u30ea\u30c3\u30c8\u3068\u3057\u3066\u306f\n\n* LLVM IR\u3067\u5410\u3051\u3070\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\n* \u30e9\u30a4\u30bb\u30f3\u30b9\u304cBSD\u30e9\u30a4\u30af\n* \u3044\u308d\u3044\u308d\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5bfe\u5fdc\n\n\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u3002LLVM\u3092\u63a1\u7528\u3057\u3066\u3044\u308b\u51e6\u7406\u7cfb\u306fRust, Clang, LDC\u7b49\u306e\u5272\u3068\u30e2\u30c0\u30f3\u306a\u8a00\u8a9e\u304c\u591a\u3044\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u3002\n\n\u3053\u3053\u3067LLVM IR\u3068\u306f\u4e2d\u9593\u8a00\u8a9e\u306e\u4e00\u7a2e\u3067\u6a5f\u68b0\u8a9e\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u4e2d\u9593\u8a00\u8a9e\u3092\u4ecb\u3059\u308b\u3053\u3068\u3067\u69d8\u3005\u306a\u30a2\u30fc\u30af\u30c6\u30af\u30c1\u30e3\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u4e0a\u306e\u56f3\u306e\u300c\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u300d\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f[^2]\u3002\n\n# \u3010Brainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u3011\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n\u307e\u305a\u3001\u624b\u59cb\u3081\u306bBrainf\\*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u306f\u8a00\u3044\u3064\u3064\u3082\u3044\u304d\u306a\u308a\u306f\u4f5c\u308c\u306a\u3044\u306e\u3067\u4ee5\u4e0b\u306e\u8cc7\u6599\u3092\u898b\u306a\u304c\u3089\u6982\u8981\u3092\u628a\u63e1\u3057\u307e\u3057\u305f\u3002\n\n* http://llvm.org/docs/LangRef.html\n    * http://www.h3.dion.ne.jp/~mu-ra/llvm/LangRefJ.html (\u65e5\u672c\u8a9e\u8a33)\n* \u304d\u3064\u306d\u3055\u3093\u3067\u3082\u308f\u304b\u308bLLVM \u67cf\u6728 \u9905\u5b50, \u98a8\u85ac\n\n\u3053\u3053\u304b\u3089\u308f\u304b\u3063\u305f\u3053\u3068\u306f\n\n* \u578b\u306e\u6982\u5ff5\u304c\u3042\u308b\n    * \u6574\u6570\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u3001\u30d9\u30af\u30bf\u3001\u914d\u5217\u306a\u3069\n    * \u9577\u3055\u304c\u7570\u306a\u308b\u6574\u6570\u306f\u76f4\u63a5\u76f8\u4e92\u7684\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u306a\u3044(\u5909\u63db\u547d\u4ee4\u306f\u5b58\u5728\u3059\u308b)\n* SSA\u5f62\u5f0f\u3067\u3042\u308b\n    * \u8a73\u3057\u304f\u306f[Wikipedia](https://ja.wikipedia.org/wiki/\u9759\u7684\u5358\u4e00\u4ee3\u5165)\u3092\u898b\u3066\u6b32\u3057\u3044\u306e\u3067\u3059\u304c(\u81ea\u5206\u306f\u3042\u307e\u308a\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u3067\u3059)\u3001\u3042\u3089\u3086\u308b\u5909\u6570\u304c\u4e00\u5ea6\u306e\u307f\u4ee3\u5165\u3055\u308c\u308b(\u4e0a\u66f8\u304d\u3055\u308c\u306a\u3044)\u3088\u3046\u306b\u66f8\u304b\u308c\u305f\u5f62\u5f0f\u3067\u3059\u3002\u6700\u9069\u5316\u304c\u3057\u3084\u3059\u304f\u306a\u308b\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n    * \u3053\u308c\u7528(?)\u306b`phi`\u547d\u4ee4\u304c\u3042\u308b\n* \u5909\u6570\u306f\u30b9\u30bf\u30c3\u30af\u304b\u3089\u5272\u308a\u5f53\u3066\u308b(`alloca`)\u3053\u3068\u3067\u78ba\u4fdd\u3059\u308b\n    * \u30ed\u30fc\u30c9(`load`)\u3001\u30b9\u30c8\u30a2(`store`)\u306f`alloca`\u3067\u8fd4\u3063\u3066\u304d\u305f\u30dd\u30a4\u30f3\u30bf\u7d4c\u7531\u3067\u884c\u3046\n* \u6bd4\u8f03\u547d\u4ee4\u3001\u30b8\u30e3\u30f3\u30d7\u547d\u4ee4\u3001\u56db\u5247\u6f14\u7b97\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u7b49\u306f\u666e\u901a\u306b\u3042\u308b\n\n\u3060\u3044\u305f\u3044\u308f\u304b\u3063\u305f(\u6c17\u306b\u306a\u3063\u305f)\u3068\u3053\u308d\u3067\u65e9\u901f\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u81ea\u5206\u306fUbuntu\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067`apt install llvm`\u3067LLVM(\u30c4\u30fc\u30eb\u3001API)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u6b21\u306b[\u3053\u3053](https://www.ibm.com/developerworks/jp/opensource/library/os-createcompilerllvm1/)\u3092\u53c2\u8003\u306b\u307e\u305a\u306fHello World\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u51fa\u6765\u307e\u3059\u3002\n\n```sh\ng++ main.cpp `llvm-config --cxxflags --ldflags --libs` -ldl -lpthread -ltinfo -fexceptions -o main\n```\n\n\u3053\u3053\u304b\u3089Brainf\\*ck\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u3001Brainf\\*ck\u51e6\u7406\u7cfb\u306f30000\u500b\u306e\u30d0\u30a4\u30c8(`i8`)\u914d\u5217\u3068\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30bf\u3092\u72b6\u614b\u3068\u3057\u3066\u6301\u3064\u306e\u3067\u3053\u308c\u3089\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002`CreateAlloca`\u306fC\u8a00\u8a9e\u306e`alloca`\u95a2\u6570\u306e\u3088\u3046\u306b\u30b9\u30bf\u30c3\u30af\u304b\u3089\u9818\u57df\u3092\u78ba\u4fdd\u3059\u308b\u547d\u4ee4\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059[^3]\u3002`CreateStore`\u306f\u8a00\u308f\u305a\u3082\u304c\u306a\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5148\u306b\u5024\u3092\u30b9\u30c8\u30a2\u3059\u308b\u547d\u4ee4\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u4ee5\u964d\u3001\u7279\u306b\u88dc\u8db3\u304c\u306a\u3051\u308c\u3070\u95a2\u6570\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u306f\u3057\u306a\u3044\u306e\u3067\u9069\u5f53\u306b\u8abf\u3079\u3066\u6b32\u3057\u3044\u3067\u3059\u3002\n\n```cpp\n// i8 * MEMORY_SIZE\u306e\u9818\u57df\u78ba\u4fdd\nmemory = builder.CreateAlloca(builder.getInt8Ty(), builder.getInt32(MEMORY_SIZE), \"memory\");\n\n// \u30dd\u30a4\u30f3\u30bf\u9818\u57df\u78ba\u4fdd\ncurrent_index_ptr = builder.CreateAlloca(builder.getInt32Ty(), nullptr, \"pointer_ptr\");\n// *pointer_ptr = 0\nbuilder.CreateStore(builder.getInt32(0), current_index_ptr);\n```\n\n\u6b21\u306b\u5404\u547d\u4ee4\u306b\u3064\u3044\u3066\u6de1\u3005\u3068\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u4ed5\u69d8\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308c\u3070\u3088\u304f\u7279\u306b\u8aac\u660e\u3059\u308b\u3053\u3068\u304c\u306a\u3044\u306e\u3067[\u3053\u3053](https://github.com/long-long-float/bfc/blob/master/main.cpp)\u3092\u898b\u3066\u3082\u3089\u3048\u308c\u3070\u5206\u304b\u308b\u306f\u305a\u3067\u3059(\u5de5\u592b\u3057\u305f\u3068\u3053\u308d\u306f\u9023\u7d9a\u3057\u3066\u3044\u308b`+`, `-`\u3092\u307e\u3068\u3081\u3066\u3044\u308b\u304f\u3089\u3044)\u3002\n\n\u3053\u3053\u3067\u306fBrainf\\*ck\u6700\u5927\u306e\u96e3\u95a2\u3067\u3042\u308d\u3046`[`, `]`\u306e\u89e3\u8aac\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```cpp\ncase '[': {\n  // while label\u3092\u4f5c\u6210(`[`)\u306b\u76f8\u5f53\n  auto *whileBB = llvm::BasicBlock::Create(context, \"while\", mainFunc);\n\n  // while\u306b\u5206\u5c90\n  // LLVM\u3067\u306f\u30d6\u30ed\u30c3\u30af\u306e\u6700\u5f8c\u306f\u7d42\u7aef\u547d\u4ee4(`ret`, `br`\u7b49)\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\n  builder.CreateBr(whileBB);\n\n  // \u547d\u4ee4\u3092\u633f\u5165\u3059\u308b\u5834\u6240\u3092whileBB\u306b\u3059\u308b\n  builder.SetInsertPoint(whileBB);\n\n  // \u73fe\u5728\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u6307\u3057\u793a\u3059\u5148\u306e\u5024\u304c0\u3067\u306a\u3044\u304b\n  auto valptr = createGetCurrent();\n  auto *cond = builder.CreateICmpNE(std::get<0>(valptr), builder.getInt8(0));\n\n  // then, merge\u30d6\u30ed\u30c3\u30af\u3092\u4f5c\u6210\n  auto *thenBB = llvm::BasicBlock::Create(context, \"then\", mainFunc);\n  // \u3053\u3053\u3067mainFunc\u304c\u306a\u3044\u306e\u306f`[`, `]`\u304c\u5165\u308c\u5b50\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3053\u306e\u6642\u70b9\u3067\u306fmerge\u3092\u633f\u5165\u3067\u304d\u306a\u3044\n  auto *mergeBB = llvm::BasicBlock::Create(context, \"merge\");\n\n  // 0\u3060\u3063\u305f\u3089then, \u305d\u3046\u3067\u306a\u3051\u308c\u3070merge\u306b\u5206\u5c90\n  builder.CreateCondBr(cond, thenBB, mergeBB);\n\n  builder.SetInsertPoint(thenBB);\n\n  // `]`\u7528\u306bwhile, merge\u3092\u53d6\u3063\u3066\u304a\u304f\n  loop_stack.push(BBPair(whileBB, mergeBB));\n\n  break;\n}\n```\n\n\u3053\u3093\u306a\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\u6ce8\u610f\u3059\u3079\u304d\u3068\u3053\u308d\u306fmerge\u30d6\u30ed\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\u6642\u70b9\u3067\u306fmainFunc\u306b\u8ffd\u52a0\u3057\u306a\u3044\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u306e\u8fba\u308a\u306f\u751f\u6210\u3055\u308c\u308bIR\u3092\u8003\u3048\u308b\u3068\u89e3\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u30b9\u30bf\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u8fba\u308a\u306fBrainf\\*ck\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3068\u540c\u3058\u306a\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n```cpp\ncase ']': {\n  if (loop_stack.size() == 0) {\n    throw \"no '[' corresponding ']'\";\n  }\n\n  // \u5bfe\u5fdc\u3059\u308b`[`\u306b\u5206\u5c90\n  auto pair = loop_stack.top();\n  loop_stack.pop();\n  builder.CreateBr(std::get<0>(pair));\n\n  // merge\u30d6\u30ed\u30c3\u30af\u3092\u633f\u5165\u3059\u308b\n  auto mergeBB = std::get<1>(pair);\n  mainFunc->getBasicBlockList().push_back(mergeBB);\n  builder.SetInsertPoint(mergeBB);\n\n  break;\n}\n```\n\n\u53c2\u8003\u307e\u3067\u306b`++++++[>++++++<-]>.`(`$`\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0)\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d5\u30ed\u30fc\u56f3(CFG)\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\u3053\u306eCFG\u306f\u624b\u3067\u66f8\u3044\u305f\u306e\u3067\u306f\u306a\u304f\u3001LLVM API\u306eCFG\u3092\u51fa\u529b\u3059\u308b\u6a5f\u80fd\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002`CFG\u306b\u3057\u305f\u3044\u95a2\u6570->viewCFG()`\u3092\u66f8\u304f\u3060\u3051\u3067dot\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u3066\u30d3\u30e5\u30fc\u30a2\u3092\u958b\u3044\u3066\u304f\u308c\u307e\u3059[^4]\u3002\n\n![bf-flow.png](https://qiita-image-store.s3.amazonaws.com/0/16790/3d0745b3-acfa-ff6c-fc73-e21a1ddc1830.png)\n\n\u3053\u3053\u307e\u3067\u51fa\u6765\u305f\u3089\u5f8c\u306f\u30d3\u30c3\u30c8\u30b3\u30fc\u30c9(LLVM IR\u306e\u30d0\u30a4\u30ca\u30ea\u8868\u73fe)\u3092\u751f\u6210\u3059\u308c\u3070\u5b8c\u6210\u3067\u3059\u3002\n\n```cpp\nstd::error_code error_info;\nllvm::raw_fd_ostream os(\"a.bc\", error_info, llvm::sys::fs::OpenFlags::F_None);\nllvm::WriteBitcodeToFile(bfc.getModule(), os);\n```\n\nhttps://github.com/long-long-float/bfc\n\n[\u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8](http://www.wilfred.me.uk/blog/2015/02/21/my-first-llvm-compiler/)\u3067\u306f\u3053\u306e\u5f8c\u306b\u6700\u9069\u5316\u3092\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u81ea\u5206\u304c\u4f5c\u3063\u305f\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u751f\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u6700\u9069\u5316\u3092\u3059\u308b\u3068\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u8981\u8abf\u67fb\u3067\u3059\u306d\u2026\n\n\u307e\u305f\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067[Emscripten](http://emscripten.org/)\u3067JavaScript\u306b\u3082\u5909\u63db\u3057\u3066\u307f\u307e\u3057\u305f\u3002Emscripten\u3068\u306fC/C++\u7b49\u304b\u3089\u751f\u6210\u3055\u308c\u308bLLVM\u30d3\u30c3\u30c8\u30b3\u30fc\u30c9(IR)\u304b\u3089JavaScript\u306b\u5909\u63db\u3059\u308b\u30c8\u30e9\u30f3\u30b9\u30ec\u30fc\u30bf\u3067\u3059\u3002\u4e3b\u306bC++\u7b49\u3067\u66f8\u304b\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092JavaScript\u3067\u52d5\u304b\u3059\u7528\u9014\u306b\u4f7f\u308f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5148\u7a0b\u306eBrainf\\*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u751f\u6210\u3057\u305fIR\u3092JavaScript\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5909\u63db\u3067\u304d\u307e\u3059(`$HOME`\u306bSDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3068\u4eee\u5b9a)\u3002\n\n```sh\n$ ./bfc hello.bf # LLVM IR\u3092\u751f\u6210(a.bc)\n$ ~/emsdk_portable/emscripten/master/emcc a.bc # LLVM IR\u304b\u3089JS\u306b\u5909\u63db\n$ node a.out.js\nHello, world!\n$ ~/emsdk_portable/emscripten/master/emcc a.bc -o hello.html # HTML\u306b\u5909\u63db\n```\n\n# \u3010\u4f3c\u975eLISP\u30b3\u30f3\u30d1\u30a4\u30e9\u3011\u4f5c\u3063\u3066\u307f\u305f\u3002\n\nBrainf\\*ck\u3060\u3051\u3060\u3068\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001LISP\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u306f\u8a00\u3063\u3066\u3082Scheme\u3084Common Lisp\u307b\u3069\u9ad8\u6a5f\u80fd\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n* `print`, `cond`, `progn`, `defun`\u7b49\u306e\u57fa\u672c\u7684\u306a\u95a2\u6570\u306f\u63c3\u3063\u3066\u3044\u308b\n* \u578b\u306f\u6574\u6570\u3001\u6587\u5b57\u5217\u3001\u6574\u6570\u306e\u30ea\u30b9\u30c8[^5]\u306e\u307f\n    * \u7121\u540d\u95a2\u6570\u306f\u306a\u3044\n* \u578b\u63a8\u8ad6(\u578b\u30c1\u30a7\u30c3\u30af)\u306f\u306a\u3044[^5]\n    * `defun`\u3001`cond`\u3001`setq`\u306b\u578b\u3092\u6307\u5b9a\u3059\u308b\n* \u30de\u30af\u30ed\u306f\u306a\u3044\n* GC\u306f\u306a\u3044\n\n\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u306a\u3044\u306a\u3044\u3065\u304f\u3057\u3067\u3059\u304c\u304a\u8a31\u3057\u304f\u3060\u3055\u3044[^6]\u3002\n\n\u3055\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u6210\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u5b57\u53e5\u3001\u69cb\u6587\u89e3\u6790\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3053\u306e\u8a18\u4e8b\u3067\u306f\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u610f\u5473\u89e3\u6790(\u3053\u3053\u3067\u306f\u578b\u30c1\u30a7\u30c3\u30af\u3084\u8b58\u5225\u5b50\u306e\u89e3\u6c7a)\u3082\u30b3\u30fc\u30c9\u751f\u6210\u6642\u306b\u884c\u3046\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u751f\u6210\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u307e\u305a\u3001main\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```cpp\nauto *funcType = llvm::FunctionType::get(builder.getInt32Ty(), false);\ncurrent_func = mainFunc = llvm::Function::Create(funcType, llvm::Function::ExternalLinkage, \"main\", module);\n\nmain_entry = llvm::BasicBlock::Create(context, \"entrypoint\", mainFunc);\nbuilder.SetInsertPoint(main_entry);\n```\n\n\u3053\u3053\u3067`current_func`\u3082\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u308c\u306fif\u5f0f\u306a\u3069\u3067\u30d6\u30ed\u30c3\u30af\u3092\u8ffd\u52a0\u3059\u308b\u306e\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6b21\u306b\u751f\u6210\u3057\u305f\u30b3\u30fc\u30c9\u5074\u3067\u4f7f\u7528\u3059\u308b\u69cb\u9020\u4f53\u3001\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\n```cpp\n// cons\u30bb\u30eb\u306e\u5b9a\u7fa9\n// C\u8a00\u8a9e\u3067\u66f8\u304f\u3068\u3053\u3046\u306a\u308b\n// typedef struct _ilist {\n//   int32_t         car;\n//   struct _ilist  *cdr;\n// } ilist;\nauto struct_type = llvm::StructType::create(context, \"ilist\");\nstd::vector<llvm::Type*> members {\n  builder.getInt32Ty(),\n  llvm::PointerType::getUnqual(struct_type),\n};\nstruct_type->setBody(members);\nilist_ptr_type = llvm::PointerType::getUnqual(struct_type);\n\n// \u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\n// int puts(char*)\nstd::vector<llvm::Type*> putsArgs { builder.getInt8PtrTy() };\nputsFunc = define_function(\"puts\", putsArgs, builder.getInt32Ty());\n\n// \u4ee5\u4e0b\u540c\u69d8\n```\n\n\u6700\u5f8c\u306b\u74b0\u5883(\u5909\u6570\u540d\u3068\u5024(`LLVM::Value*`)\u304cstd::map\u3067\u4fdd\u6301\u3055\u308c\u3066\u3044\u307e\u3059)\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n```cpp\nroot_env = cur_env = new Environment();\n```\n\n\u3053\u308c\u3067\u6e96\u5099\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\u3044\u3088\u3044\u3088\u30b3\u30fc\u30c9\u751f\u6210\u306b\u5165\u308a\u307e\u3059\u3002\n\n```cpp\nvoid Compiler::compile(std::vector<Object*> &ast) {\n  for (auto &object : ast) {\n    compile_expr(object);\n  }\n\n  // \u7d42\u4e86\u30b3\u30fc\u30c90\u3092\u8fd4\u3059(return 0;)\n  builder.CreateRet(builder.getInt32(0));\n}\n```\n\n```cpp\nllvm::Value* Compiler::compile_expr(Object* obj) {\n  std::type_info const & id = typeid(*obj);\n  // obj\u304cCons\u578b\u3060\u3063\u305f\u3089\n  if(id == typeid(Cons)) {\n    auto list = (Cons*)obj;\n    // list\u306e0\u756a\u76ee\u304cSymbol\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u3068\u6c7a\u3081\u3064\u3051\u3066\u30ad\u30e3\u30b9\u30c8(Symbol\u3067\u306a\u304b\u3063\u305f\u3089\u4f8b\u5916\u304c\u98db\u3076)\n    auto name = regard<Symbol>(list->get(0))->value;\n    if(name == \"print\") {\n      // \u5f15\u6570\u3082\u540c\u69d8\u306b\u30b3\u30fc\u30c9\u751f\u6210\u3059\u308b\n      auto str = compile_expr(list->get(1));\n\n      builder.CreateCall(putsFunc, str);\n      return str;\n    }\n    // \u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u304c\u7d9a\u304f\u2026\n```\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u7247\u304b\u3089\u5206\u304b\u308b\u901a\u308aLISP\u306e\u5f0f\u3092\u518d\u5e30\u3067\u305f\u3069\u3063\u3066\u30b3\u30fc\u30c9\u751f\u6210\u3057\u3066\u3044\u304d\u307e\u3059(Visitor\u30d1\u30bf\u30fc\u30f3\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u2026)\u3002\u4e0a\u3067\u578b\u30c1\u30a7\u30c3\u30af\u306f\u3057\u306a\u3044\u3068\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u578b\u304c\u4e0d\u5b9a\u3060\u3068\u30b3\u30fc\u30c9\u751f\u6210\u3067\u304d\u306a\u3044\u306e\u3067`regard<...>`\u306b\u3088\u3063\u3066\u5f37\u5236\u7684\u306b\u578b\u3092\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u8a71\u304c\u8131\u7dda\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u578b\u5909\u63db\u306b\u3064\u3044\u3066LLVM\u3067\u306f\u305d\u308c\u7528\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u81ea\u5206\u304c\u53c2\u8003\u306b\u3057\u305f\u304d\u3064\u306d\u672c\u3067\u3082\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u4ee5\u524d\u306b\u4f5c\u6210\u3057\u305fLISP\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u6d41\u7528\u3057\u3066\u304a\u308a\u4eca\u66f4\u305d\u308c\u7528\u306b\u4fee\u6b63\u3059\u308b\u306e\u306f\u9762\u5012\u3060\u3063\u305f\u306e\u3067LLVM\u306e\u30ad\u30e3\u30b9\u30c8\u306f\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002\u73fe\u6642\u70b9\u3067\u306f\u3053\u308c\u3067\u3082\u5168\u304f\u56f0\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u6050\u3089\u304f\u4f7f\u308f\u306a\u304f\u3066\u3082\u554f\u984c\u7121\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\u8a73\u3057\u304f\u306f http://llvm.org/docs/ProgrammersManual.html#the-isa-cast-and-dyn-cast-templates \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u3053\u3067\u8061\u660e\u306a\u65b9\u306f\u304a\u6c17\u3065\u304d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u306f`print`\u306e\u5f15\u6570\u306e\u578b\u306b\u3064\u3044\u3066\u4f55\u3082\u89e6\u308c\u3066\u306a\u3044\u3067\u3059\u3002\u3064\u307e\u308a\u672c\u6765\u306f\u6587\u5b57\u5217\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u306e\u306b\u6574\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u578b\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u3088\u3063\u3066\u3053\u306e\u3088\u3046\u306a\u4e0d\u5177\u5408(?)\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u5b9f\u969b\u306f\u30a2\u30bb\u30f3\u30d6\u30eb(\u30bf\u30fc\u30b2\u30c3\u30c8\u30b3\u30fc\u30c9\u751f\u6210)\u6642\u306b\u578b\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u5b9f\u969b\u306b\u52d5\u304f\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5b9f\u7528\u7684\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u6210\u3059\u308b\u306a\u3089\u3070\u578b\u30c1\u30a7\u30c3\u30af\u306f\u3059\u3079\u304d\u3067\u3059\u3002\n\n\u5927\u67a0\u306e\u89e3\u8aac\u306f\u7d42\u3048\u305f\u306e\u3067\u3001\u500b\u3005\u306e\u6a5f\u80fd\u3092\u3069\u3046\u5b9f\u73fe\u3057\u3066\u3044\u308b\u304b\u3092\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u7d44\u307f\u8fbc\u307f\u95a2\u6570\n\n\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3068\u306f\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3059\u308b\u95a2\u6570\u3068\u306f\u9055\u3044\u3001\u4e88\u3081\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u306e\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308b`print`\u3084\u6574\u6570\u3092\u51fa\u529b\u3059\u308b`printn`\u306a\u3069\u304c\u3042\u308a\u307e\u3059[^7]\u3002\u3053\u308c\u3089\u30921\u304b\u3089\u5b9f\u88c5\u3059\u308b\u306e\u306f\u6d41\u77f3\u306b\u963f\u5446\u3089\u3057\u3044\u306e\u3067libc\u306e\u3082\u306e\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u5b9a\u7fa9\u306f\u5148\u307b\u3069\u884c\u3044\u307e\u3057\u305f\u3002\u30b3\u30fc\u30c9\u751f\u6210\u6642\u306b\u306f\u305d\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u547d\u4ee4\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```cpp\nif(name == \"print\") {\n  auto str = compile_expr(list->get(1));\n\n  builder.CreateCall(putsFunc, str);\n  return str;\n}\nelse if(name == \"printn\") {\n  auto num = compile_expr(list->get(1));\n\n  builder.CreateCall(printnFunc, num);\n  return num;\n}\n```\n\n`printn`\u306a\u3093\u3066libc\u306b\u306d\u30fc\u305e\u3001\u3068\u601d\u308f\u308c\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c`puts`\u4ee5\u5916\u306f`lib.c`(\u7d1b\u3089\u308f\u3057\u304f\u3066\u3059\u307f\u307e\u305b\u3093)\u306b\u95a2\u6570\u3092\u66f8\u3044\u3066Clang\u3067LLVM IR\u3092\u751f\u6210\u3057\u3066\u304b\u3089\u30ea\u30f3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u306b\u304b\u305a\u308b\u3044\u3088\u3046\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u304c\u697d\u3067\u304d\u308b\u3068\u3053\u308d\u306f\u697d\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3088\u306d?\n\n```c:lib.c\u306e\u4e00\u90e8\ntypedef struct _ilist {\n  int32_t         car;\n  struct _ilist  *cdr; // cdr\u304cNULL\u3060\u3063\u305f\u3089nil\u3068\u3057\u3066\u6271\u3046\n} ilist;\n\nvoid printn(int n) {\n  printf(\"%d\\n\", n);\n}\n\nvoid printl(ilist *xs) {\n  printf(\"(\");\n  for (ilist *cur = xs; cur->cdr; cur = cur->cdr) {\n    printf(\"%d\", cur->car);\n    if (cur->cdr->cdr) {\n      printf(\" \");\n    }\n  }\n  printf(\")\\n\");\n}\n\nilist* cons(int32_t car, ilist *cdr) {\n  // TODO: fix memory leak\n  ilist *list = malloc(sizeof(ilist));\n  list->car = car;\n  list->cdr = cdr;\n  return list;\n}\n```\n\n\u3068\u3053\u308d\u3067\u3001`cons`\u95a2\u6570\u306b`// TODO: fix memory leak`\u3068\u3044\u3046\u4e0d\u7a4f\u306a\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3053\u308c\u306f`malloc`\u3057\u305f\u30e1\u30e2\u30ea\u9818\u57df\u3092\u958b\u653e\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u304c\u8d77\u3053\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306fGC(Garbage Collection: \u8981\u3089\u306a\u304f\u306a\u3063\u305f\u30e1\u30e2\u30ea\u9818\u57df(=\u30b4\u30df)\u3092\u81ea\u52d5\u7684\u306b\u958b\u653e\u3059\u308b\u6a5f\u69cb)\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u305d\u3053\u307e\u3067\u52c9\u5f37\u304c\u9032\u3093\u3067\u306a\u3044\u306e\u3067\u4eca\u56de\u306f\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u306b\u3042\u308b`ilist`\u3082`lib.c`\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002`compiler.cpp`\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u304c\u5909\u66f4\u306a\u3093\u3066\u7121\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u59a5\u5354\u3057\u3066\u3044\u307e\u3059\u3002\u30b9\u30de\u30fc\u30c8\u306b\u5171\u6709\u3067\u304d\u308b\u77e5\u898b\u3092\u304a\u6301\u3061\u306e\u65b9\u306f\u3054\u6559\u6388\u3057\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u2026\n\n## setq\n\n`setq`\u306f\u5909\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u30023\u756a\u76ee\u306e\u5f15\u6570\u3092\u8a55\u4fa1(\u30b3\u30fc\u30c9\u751f\u6210)\u3057\u305f\u5f8c\u3001\u9818\u57df\u3092\u78ba\u4fdd\u3001\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002LLVM IR\u306fSSA\u5f62\u5f0f\u306a\u306e\u3067`compile_expr`\u306e\u8fd4\u308a\u5024\u3092`val`\u306b\u4ee3\u5165\u3057\u3066\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u4ed6\u306e\u547d\u4ee4\u306e\u5f15\u6570\u306b\u4f7f\u3048\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306fBrainf\\*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u540c\u3058\u3067\u3059\u306d\u3002\n\n```cpp\nelse if(name == \"setq\") {\n  auto val = compile_expr(list->get(3));\n  // \u5909\u6570\u540d\u306f\u8a55\u4fa1\u3057\u306a\u3044\n  auto val_name = regard<Symbol>(list->get(2))->value;\n  // \u578b\u3092\u5f97\u308b\n  auto type = get_llvm_type(regard<Symbol>(list->get(1)));\n\n  // \u9818\u57df\u3092\u78ba\u4fdd\u3057\u3001\u5024\u3092\u683c\u7d0d\n  auto var_pointer = builder.CreateAlloca(type, nullptr, val_name);\n  builder.CreateStore(val, var_pointer);\n  // \u73fe\u5728\u306e\u74b0\u5883\u306b\u767b\u9332\u3059\u308b\n  cur_env->set(val_name, var_pointer);\n  return val;\n}\n```\n\n\u3042\u3068\u4f55\u6c17\u306b`return val;`\u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3046\u3059\u308b\u3053\u3068\u3067`setq`\u3057\u305f\u5024\u3092\u305d\u306e\u307e\u307e\u4ed6\u306e\u5f15\u6570\u306b\u4f7f\u3048\u305f\u308a\u3057\u307e\u3059\u3002C\u8a00\u8a9e\u3067\u8a00\u3046\u3001`a = b = 1`\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306fLISP\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u305d\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u7d50\u679c\u3067\u3059[^8]\u3002\n\n```lisp\n(setq int a 1)\n(setq int b (setq int c (+ a 1)))\n(printn b)\n(printn c)\n```\n\n```\ndefine i32 @main() {\nentrypoint:\n  %a = alloca i32\n  store i32 1, i32* %a\n  %0 = load i32, i32* %a\n  %1 = add i32 %0, 1\n  %c = alloca i32\n  store i32 %1, i32* %c     ; (setq int c (+ a 1))\n                            ; (+ a 1)\u306e\u7d50\u679c\u3067\u3042\u308b%1\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\n  %b = alloca i32\n  store i32 %1, i32* %b     ; (setq int b ...)\n                            ; \u540c\u3058\u304f%1\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\n  %2 = load i32, i32* %b\n  call void @printn(i32 %2)\n  %3 = load i32, i32* %c\n  call void @printn(i32 %3)\n  ret i32 0\n}\n```\n\nLLVM\u306e\u547d\u4ee4\u306f\u4e00\u90e8\u306e\u9664\u304d\u8fd4\u308a\u5024(\u3068\u3044\u3046\u8a00\u3044\u65b9\u3067\u3044\u3044\u306e\u304b\u306a?)\u3092\u6301\u3061\u3001\u305d\u308c\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3082\u5024\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308b`LLVM::Value*`\u3092\u8fd4\u3059\u306e\u3067`compile_expr`\u3067\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u8fd4\u305b\u3070\u3001\u4e0a\u624b\u3044\u5177\u5408\u306b\u5024\u3092\u53d6\u308a\u56de\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306e\u4ed5\u69d8\u306e\u304a\u304b\u3052\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u4f5c\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059(\u4e2d\u9593\u8a00\u8a9e\u3067\u306f\u3042\u305f\u308a\u524d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c)\u3002\u4ed6\u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u306b\u5024\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n## defun\n\n`defun`\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u3002\u3053\u308c\u306fLISP\u30b3\u30fc\u30c9\u3068\u751f\u6210\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u7406\u89e3\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```lisp\n(defun twice (x) (int) int (+ x x))\n(printn (twice 1))\n```\n\n```\ndefine i32 @main() {\nentrypoint:\n  %0 = call i32 @twice(i32 1)\n  call void @printn(i32 %0)\n  ret i32 0\n}\n\ndefine i32 @twice(i32 %x) {\nentrypoint:\n  %x1 = alloca i32\n  store i32 %x, i32* %x1\n  %0 = load i32, i32* %x1\n  %1 = load i32, i32* %x1\n  %2 = add i32 %0, %1\n  ret i32 %2\n}\n```\n\n\u751f\u6210\u30b3\u30fc\u30c9\u306f\u5272\u3068\u7d20\u76f4\u306a\u611f\u3058\u3067\u8aad\u307f\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```cpp\nelse if(name == \"defun\") {\n  auto func_name = regard<Symbol>(list->get(1))->value;\n  auto args      = regard<Cons>(list->get(2));\n  auto arg_types = regard<Cons>(list->get(3));\n  auto ret_type  = regard<Symbol>(list->get(4));\n  auto body      = regard<Cons>(list->tail(5));\n\n  std::vector<llvm::Type*> llvm_args;\n  // \u5404\u578b\u5f15\u6570\u306b\u3064\u3044\u3066LLVM::Type*\u306b\u5909\u63db\u3057\u3066...\n  EACH_CONS(arg_type, arg_types) {\n    llvm_args.push_back(get_llvm_type(regard<Symbol>(arg_type->get(0))));\n  }\n  llvm::ArrayRef<llvm::Type*> llvm_args_ref(llvm_args);\n  auto func_type = llvm::FunctionType::get(get_llvm_type(ret_type), llvm_args_ref, false);\n  // \u95a2\u6570\u3092\u4f5c\u6210\n  auto func = llvm::Function::Create(func_type, llvm::Function::ExternalLinkage, func_name, module);\n\n  Environment *env = new Environment();\n\n  // \u5404\u5f15\u6570\u306b\u540d\u524d\u3092\u3064\u3051\u308b\n  auto arg_itr = func->arg_begin();\n  EACH_CONS(arg, args) {\n    auto arg_name = regard<Symbol>(arg->get(0))->value;\n    arg_itr->setName(arg_name);\n\n    arg_itr++;\n  }\n\n  cur_env->set(func_name, func);\n\n  cur_env = cur_env->down_env(env);\n\n  // \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3001insert point\u3092\u5bfe\u8c61\u306e\u95a2\u6570\u306b\u8a2d\u5b9a\n  auto entry = llvm::BasicBlock::Create(context, \"entrypoint\", func);\n  builder.SetInsertPoint(entry);\n\n  // \u5404\u5f15\u6570\u306b\u3064\u3044\u3066\u95a2\u6570\u5185\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u65b0\u3057\u304fstore\u3059\u308b\n  // \u306a\u305c\u3053\u3093\u306a\u610f\u5473\u4e0d\u660e\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068vs_table.lookup\u3067\u53d6\u3063\u305f\u5024\u304c\u4f55\u6545\u304balloca\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u306a\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n  // \u304d\u3064\u306d\u672c\u3092\u63a2\u3057\u3066\u3082\u7121\u304b\u3063\u305f\u2026 \u3053\u308c\u3082\u77e5\u3063\u3066\u3044\u308b\u4eba\u306f\u6559\u3048\u3066\u6b32\u3057\u3044\u3067\u3059\u2026\n  auto &vs_table = func->getValueSymbolTable();\n  auto arg_type = arg_types;\n  EACH_CONS(arg, args) {\n    auto arg_name = regard<Symbol>(arg->get(0))->value;\n    auto alloca = builder.CreateAlloca(get_llvm_type(regard<Symbol>(arg_type->get(0))), 0, arg_name);\n    builder.CreateStore(vs_table.lookup(arg_name), alloca);\n    env->set(arg_name, alloca);\n\n    arg_type = (Cons*)arg_type->cdr;\n  }\n\n  auto prev_func = current_func;\n  current_func = func;\n\n  // \u95a2\u6570\u306e\u4e2d\u8eab\u3092\u30b3\u30fc\u30c9\u751f\u6210\u3057\u3001\u305d\u306e\u7d50\u679c\u3092ret\n  auto result = compile_exprs(body);\n  builder.CreateRet(result);\n\n  current_func = prev_func;\n\n  cur_env = cur_env->up_env();\n\n  // insert point\u3092main\u95a2\u6570\u306b\u623b\u3059\n  builder.SetInsertPoint(main_entry);\n}\n```\n\n\u6982\u7565\u3092\u8aac\u660e\u3059\u308b\u3068\u3001\n\n1. \u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u4f5c\u6210(\u6700\u521d\u306b\u3084\u3063\u305f\u3088\u3046\u306a\u3053\u3068\u3067\u3059)\n2. \u5f15\u6570\u540d\u3092\u8a2d\u5b9a\n3. insert point\u3092\u8a2d\u5b9a\n4. \u5404\u5f15\u6570\u306b\u3064\u3044\u3066\u95a2\u6570\u5185\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u65b0\u3057\u304fstore\u3059\u308b\n    * \u30b3\u30e1\u30f3\u30c8\u306b\u3082\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001`vs_table.lookup`\u3067\u3068\u3063\u305f\u5024\u3092`alloca`\u3067\u3068\u3063\u305f\u5024\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3057\u307e\u3044\u307e\u3059(\u6c17\u304c\u3059\u308b)\u3002\n5. \u95a2\u6570\u306e\u4e2d\u8eab\u306e\u30b3\u30fc\u30c9\u751f\u6210\n    * `compile_exprs`\u306f\u5404\u5f0f\u306b\u3064\u3044\u3066`compile_expr`\u547c\u3093\u3067\u3044\u308b\u3060\u3051\u3067\u3059\n\n## \u6f14\u7b97\u5b50(`+`\u3084`=`)\n\n\u3053\u308c\u306f\u8aac\u660e\u3059\u308b\u307e\u3067\u3082\u306a\u304f\u6574\u6570\u540c\u58eb\u306e\u6f14\u7b97\u3067\u3059\u3002\n\n```cpp\nelse if(name == \"+\") {\n  auto n1 = compile_expr(list->get(1));\n  auto n2 = compile_expr(list->get(2));\n  return builder.CreateAdd(n1, n2);\n}\n// \u540c\u3058\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306a\u306e\u3067\u7565\nelse if(name == \"=\") {\n  auto n1 = compile_expr(list->get(1));\n  auto n2 = compile_expr(list->get(2));\n  return builder.CreateICmpEQ(n1, n2);\n}\n```\n\n\u672c\u5f53\u306b\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u7279\u306b\u89e3\u8aac\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u6bd4\u8f03\u3060\u3051\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u611f\u899a\u3060\u3068\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u306f\u30d5\u30e9\u30b0\u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001LLVM IR\u3067\u306f\u4ed6\u3068\u540c\u3058\u3088\u3046\u306b\u6bd4\u8f03\u7d50\u679c\u304c\u8fd4\u308a\u5024(`i1`: 1bit\u306e\u6574\u6570\u3001\u3064\u307e\u308a\u771f\u507d\u5024)\u306b\u306a\u308a\u307e\u3059\u3002`br`\u547d\u4ee4\u306f\u3053\u306e\u7d50\u679c\u3092\u5f15\u6570\u306b\u53d6\u308a\u307e\u3059\u3002\n\n## progn\n\n1\u3064\u306e\u5f0f\u3057\u304b\u7f6e\u3051\u306a\u3044\u3068\u3053\u308d\u306b\u8907\u6570\u306e\u5f0f\u3092\u7f6e\u304f\u306e\u306b\u4f7f\u3046\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u3002`compile_exprs`\u3092\u547c\u3076\u3060\u3051\u3067\u3059\u3002\n\n## cond\n\n`cond`\u306f\u6761\u4ef6\u5206\u5c90\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u3002C\u8a00\u8a9e\u306eif..else if..else\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002`cond`\u3092\u4f7f\u7528\u3057\u305fLISP\u30b3\u30fc\u30c9\u3068\u305d\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u3092\u4e0b\u8a18\u306b\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n```lisp\n(setq int a 2)\n(print (cond string\n  ((= a 0) \"zero\")\n  ((= a 1) \"one\")\n  ((= a 2) \"two\")\n  (\"other\")))\n```\n\n```\n@0 = private unnamed_addr constant [5 x i8] c\"zero\\00\"\n@1 = private unnamed_addr constant [4 x i8] c\"one\\00\"\n@2 = private unnamed_addr constant [4 x i8] c\"two\\00\"\n@3 = private unnamed_addr constant [6 x i8] c\"other\\00\"\n\ndefine i32 @main() {\nentrypoint:\n  %a = alloca i32\n  store i32 2, i32* %a\n  %0 = load i32, i32* %a\n  %1 = icmp eq i32 %0, 0\n  br i1 %1, label %then, label %else\n\nthen:                                             ; preds = %entrypoint\n  br label %endcond\n\nelse:                                             ; preds = %entrypoint\n  %2 = load i32, i32* %a\n  %3 = icmp eq i32 %2, 1\n  br i1 %3, label %then1, label %else2\n\nthen1:                                            ; preds = %else\n  br label %endcond\n\nelse2:                                            ; preds = %else\n  %4 = load i32, i32* %a\n  %5 = icmp eq i32 %4, 2\n  br i1 %5, label %then3, label %else4\n\nthen3:                                            ; preds = %else2\n  br label %endcond\n\nelse4:                                            ; preds = %else2\n  br label %endcond\n\nendcond:                                          ; preds = %else4, %then3, %then1, %then\n  %condtmp = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), %then ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), %then1 ],\n [ getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), %then3 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @3, i32 0, i32 0), %else4 ]\n  %6 = call i32 @puts(i8* %condtmp)\n  ret i32 0\n}\n```\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308bCFG\u3092\u4e0b\u8a18\u306b\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n![cond-flow.png](https://qiita-image-store.s3.amazonaws.com/0/16790/008f378d-1dfb-96f8-d276-71fefa3c3943.png)\n\n\u6b21\u306b`cond`\u306b\u5bfe\u3057\u3066\u3069\u3046\u30b3\u30fc\u30c9\u751f\u6210\u3057\u305f\u304b\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n```cpp\nelse if(name == \"cond\") {\n  auto ret_type = regard<Symbol>(list->get(1));\n\n  using BB_Value = std::pair<llvm::BasicBlock*, llvm::Value*>;\n\n  // else\u306e\u30d6\u30ed\u30c3\u30af\u3068\u5024\u3092\u4fdd\u6301\u3059\u308b\n  BB_Value elseBB;\n\n  auto mergeBB = llvm::BasicBlock::Create(module->getContext(), \"endcond\");\n\n  std::vector<BB_Value> thenBBs;\n\n  EACH_CONS(val, list->tail(2)) {\n    auto cond_expr_pair = regard<Cons>(val->get(0));\n\n    // \u4f59\u308a\u3082\u306e\n    if (cond_expr_pair->size() == 1) { // else\n      // \u8fd4\u308a\u5024\u306b\u3059\u308b\u305f\u3081\u306belseBB\u306b\u30bb\u30c3\u30c8\u3059\u308b\n      elseBB.second = compile_expr(cond_expr_pair->get(0));\n      // endcond\u306b\u30b8\u30e3\u30f3\u30d7\n      builder.CreateBr(mergeBB);\n\n      break;\n\n    } else { // then\n      auto cond = compile_expr(cond_expr_pair->get(0));\n      auto thenBB = llvm::BasicBlock::Create(module->getContext(), \"then\");\n      auto _elseBB = llvm::BasicBlock::Create(module->getContext(), \"else\");\n\n      // \u4e00\u756a\u6700\u5f8c\u306eelse\u30d6\u30ed\u30c3\u30af\u3092\u4fdd\u6301\n      elseBB.first = _elseBB;\n\n      // cond\u304c1(true)\u3060\u3063\u305f\u3089then\u306b\u30b8\u30e3\u30f3\u30d7\n      builder.CreateCondBr(cond, thenBB, _elseBB);\n\n      // then\u30d6\u30ed\u30c3\u30af\u3092\u633f\u5165\n      current_func->getBasicBlockList().push_back(thenBB);\n      builder.SetInsertPoint(thenBB);\n\n      // then\u306e\u5f0f\u3092\u51e6\u7406\n      auto thenValue = compile_expr(cond_expr_pair->get(1));\n      // phi\u547d\u4ee4\u7528\u306b\u3053\u306e\u6642\u70b9\u3067\u306e\u6700\u5f8c\u306e\u30d6\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3057\u3001thenBBs\u306b\u5024\u3068\u3068\u3082\u306b\u8ffd\u52a0    <--------- (a)\n      auto lastThenBB = builder.GetInsertBlock();\n      thenBBs.push_back(BB_Value(lastThenBB, thenValue));\n      // endcond\u306b\u30b8\u30e3\u30f3\u30d7\n      builder.CreateBr(mergeBB);\n\n      // else\u306e\u30d6\u30ed\u30c3\u30af\u306f\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8ffd\u52a0\u3059\u308b\n      current_func->getBasicBlockList().push_back(_elseBB);\n      builder.SetInsertPoint(_elseBB);\n    }\n  }\n\n  // endcond\u30d6\u30ed\u30c3\u30af\u3092\u8ffd\u52a0\n  current_func->getBasicBlockList().push_back(mergeBB);\n  builder.SetInsertPoint(mergeBB);\n\n  // phi\u547d\u4ee4\u3092\u751f\u6210\n  auto phi = builder.CreatePHI(get_llvm_type(ret_type), 2, \"condtmp\");\n  for (auto thenBB : thenBBs) {\n    // \u4eca\u307e\u3067\u306ethen\u7bc0\u306e\u6700\u5f8c\u306e\u30d6\u30ed\u30c3\u30af\u3068\u5024\u3092\u8ffd\u52a0\n    phi->addIncoming(thenBB.second, thenBB.first);\n  }\n  // \u6700\u5f8c\u306belseBB\u306e\u30d6\u30ed\u30c3\u30af\u3068\u5024\u3092\u8ffd\u52a0\n  phi->addIncoming(elseBB.second, elseBB.first);\n\n  // \u3053\u308c\u3092\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066cond\u304c\u5f0f\u3068\u3057\u3066\u5024\u3092\u6301\u3064\u3088\u3046\u306b\u306a\u308b\n  return phi;\n}\n```\n\n\u2026\n\n\u6587\u7ae0\u3067\u8aac\u660e\u3067\u304d\u308b\u81ea\u4fe1\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u3067\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u3053\u3067\u521d\u3081\u3066\u51fa\u308bphi\u547d\u4ee4\u306f\u3001SSA\u306e\u03c6\u95a2\u6570\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\u3068\u8a00\u3063\u3066\u3082\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c(\u81ea\u5206\u3082\u5b8c\u5168\u306b\u306f\u7406\u89e3\u3057\u3066\u306a\u3044\u3067\u3059)\u3001\u8aa4\u89e3\u3092\u6050\u308c\u305a\u306b\u8a00\u3046\u3068\u5206\u5c90\u3057\u305f\u30d6\u30ed\u30c3\u30af\u304c\u6301\u3064\u5358\u4e00\u306e\u5024(`cond`\u306e\u8fd4\u308a\u5024)\u3092\u307e\u3068\u3081\u308b\u547d\u4ee4\u3067\u3057\u3087\u3046\u304b\u3002\u4f8b\u3048\u3070\u4e0a\u306eCFG\u306e\u4e00\u756a\u4e0b\u306e\u7bb1\u3067phi\u547d\u4ee4\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u5f15\u6570\u3067\u3042\u308b`[ getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), %then ]`\u3067\u307e\u3068\u3081\u308b\u30d6\u30ed\u30c3\u30af(`%then`)\u3068\u5024(`@0`)\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u3059\u3067\u306b\u304a\u6c17\u3065\u304d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304cphi\u547d\u4ee4\u304c\u3042\u308b\u7bb1\u306b\u7e4b\u304c\u308c\u3066\u3044\u308b\u77e2\u5370\u306f\u305d\u306e\u5f15\u6570\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306e(a)\u306b\u3064\u3044\u3066\u3001`lastThenBB`\u306f`thenBB`\u3067\u306f\u3044\u3051\u306a\u3044\u306e\u304b\u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u78ba\u304b\u306b`cond`\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u6700\u5f8c\u306e\u30d6\u30ed\u30c3\u30af\u306f`thenBB`\u306b\u306a\u308b\u306e\u3067\u554f\u984c\u304c\u7121\u3044\u3067\u3059\u304c\u3001then\u7bc0\u306e\u4e2d\u306b`cond`\u304c\u3042\u308b\u3068\u65b0\u305f\u306b\u30d6\u30ed\u30c3\u30af\u304c\u633f\u5165\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067phi\u547d\u4ee4\u306b\u6e21\u3059\u30d6\u30ed\u30c3\u30af\u304c\u9055\u3046\u3082\u306e\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u30bf\u30fc\u30b2\u30c3\u30c8\u30b3\u30fc\u30c9\u751f\u6210\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30d6\u30ed\u30c3\u30af\u540d\u306f\u88ab\u3089\u306a\u3044\u3088\u3046\u306b\u540d\u524d\u3092\u4ed8\u3051\u3066\u304f\u308c\u308b(`then1`\u7b49)\u306e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3067\u3059\u3002\n\n## car, cdr\n\n`car`\u306f\u30ea\u30b9\u30c8\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3001`cdr`\u306f\u6700\u521d\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u308a\u51fa\u3059\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u3089\u306f`lib.c`\u306b\u306f\u66f8\u304b\u305a\u306b\u76f4\u63a5\u30b3\u30fc\u30c9\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002LISP\u306f\u9023\u7d9a\u3057\u305f\u30c7\u30fc\u30bf\u3092\u914d\u5217\u3067\u306f\u306a\u304f\u30ea\u30b9\u30c8\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u306e\u3067`cdr`\u3082\u7c21\u6f54\u306b\u66f8\u3051\u307e\u3059(\u305d\u306e\u4ee3\u308f\u308an\u756a\u76ee\u306e\u8981\u7d20\u306e\u30a2\u30af\u30bb\u30b9\u304cO(n)\u3060\u3063\u305f\u308a\u3059\u308b\u304c\u2026)\u3002\n\n```cpp\nelse if(name == \"car\") {\n  auto xs = compile_expr(list->get(1));\n  // ilist\u306e1\u756a\u76ee\u306e\u8981\u7d20(car)\u3092\u53d6\u308a\u51fa\u3059\n  return builder.CreateExtractValue(builder.CreateLoad(xs), 0);\n}\nelse if(name == \"cdr\") {\n  auto xs = compile_expr(list->get(1));\n  // ilist\u306e2\u756a\u76ee\u306e\u8981\u7d20(cdr)\u3092\u53d6\u308a\u51fa\u3059\n  return builder.CreateExtractValue(builder.CreateLoad(xs), 1);\n}\n```\n\n## \u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u547c\u3073\u51fa\u3057\n\n\u95a2\u6570\u5b9a\u7fa9\u3068\u9055\u3044\u3001\u3053\u3061\u3089\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\u3068\u3044\u3046\u304b\u95a2\u6570\u3092\u53d6\u5f97\u3059\u308b\u3068\u3053\u308d\u4ee5\u5916\u306f\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3068\u540c\u3058\u3067\u3059\u3002\n\n```cpp\nelse {\n  // \u95a2\u6570\u3092\u53d6\u5f97\n  auto func = cur_env->get(name);\n\n  if (!func) {\n    throw std::logic_error(\"undefined function: \" + name);\n  }\n\n  // \u5f15\u6570\u3092\u8a55\u4fa1\u3059\u308b\n  auto args = list->tail(1);\n  std::vector<llvm::Value*> callee_args;\n  EACH_CONS(arg, args) {\n    callee_args.push_back(compile_expr(arg->get(0)));\n  }\n  llvm::ArrayRef<llvm::Value*> callee_args_ref(callee_args);\n\n  // call\u547d\u4ee4\u3092\u751f\u6210\n  return builder.CreateCall((llvm::Function*)func, callee_args_ref);\n}\n```\n\n## \u30ea\u30c6\u30e9\u30eb(\u6570\u5024\u3084\u6587\u5b57\u5217)\n\nLISP\u30b3\u30fc\u30c9\u4e2d\u306e\u6570\u5024\u3084\u6587\u5b57\u5217\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6271\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nelse if(id == typeid(Symbol)) { // \u8b58\u5225\u5b50(\u5909\u6570)\n  auto var_name = regard<Symbol>(obj)->value;\n  // \u5909\u6570\u306e\u53c2\u7167\u3092\u5f97\u3066\n  auto var = cur_env->get(var_name);\n  if (!var) {\n    throw std::logic_error(\"undefined variable: \" + var_name);\n  }\n  // \u30ed\u30fc\u30c9\u3059\u308b\n  return builder.CreateLoad(var);\n}\nelse if(id == typeid(Nil)) { // nil\n  // nil\u95a2\u6570\u3092\u547c\u3076\n  return builder.CreateCall(nilFunc);\n}\nelse if(id == typeid(String)) { // \u6587\u5b57\u5217\n  // \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u767b\u9332\u3059\u308b\n  return builder.CreateGlobalStringPtr(regard<String>(obj)->value.c_str());\n}\nelse if(id == typeid(Integer)) { // \u6574\u6570\n  // \u5373\u5024\u3068\u3057\u3066\u6271\u3046\n  return builder.getInt32(regard<Integer>(obj)->value);\n} else {\n  throw std::logic_error(\"unknown expr: \" + obj->lisp_str());\n}\n```\n\nnil\u95a2\u6570\u306f`lib.c`\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002`nil`\u3068\u66f8\u304f\u305f\u3073\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306e\u306f\u30d0\u30ab\u30d0\u30ab\u3057\u3044\u306e\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u6301\u3063\u3066\u304a\u3044\u3066\u305d\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u4eca\u306e\u3068\u3053\u308dcons\u3092\u64cd\u4f5c\u3059\u308b\u95a2\u6570\u306f\u306a\u3044\u306e\u3067\u4f7f\u3044\u307e\u308f\u3057\u3066\u3082\u554f\u984c\u7121\u3044\u3067\u3059\u3002\n\n```c\nilist NIL = {0, NULL};\nilist* nil() {\n  return &NIL;\n}\n```\n\n\u3053\u3053\u307e\u3067\u3067\u4e00\u5fdc\u52d5\u304f\u3082\u306e\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\nhttps://github.com/long-long-float/lllisp\n\n```sh\n$ cat examples/fizzbuzz.lisp\n```\n\n```lisp\n; for\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u304c\u306a\u3044\u306e\u3067\u518d\u5e30\u3067\n(defun fizzbuzz (n) (int) string\n (cond string ((> 101 n) (progn\n   (print\n    (cond string\n     ((= (mod n 15) 0) \"FizzBuzz\")\n     ((= (mod n 3)  0) \"Fizz\")\n     ((= (mod n 5)  0) \"Buzz\")\n     ((itoa n))\n     ))\n   (fizzbuzz (+ n 1))))\n  ((print \"finish\"))))\n\n(fizzbuzz 1)\n```\n\n```sh\n$ ./compile examples/fizzbuzz.lisp\n(:defun :fizzbuzz (:n) (:int) :string (:cond :string ((:> 101 :n) (:progn (:print (:cond :string ((:= (:mod :n 15) 0) \"FizzBuzz\") ((:= (:mod :n 3) 0) \"Fizz\") ((:= (:mod\n:n 5) 0) \"Buzz\") ((:itoa :n)))) (:fizzbuzz (:+ :n 1)))) ((:print \"finish\"))))\n$ ./a.out\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n.\n.\n.\nfinish\n```\n\n\u52d5\u304d\u307e\u3057\u305f\u306d :)\n\n## \u30cf\u30de\u3063\u305f\u6240\n\n\u899a\u3048\u3066\u3044\u308b\u7bc4\u56f2\u3067\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n* \u5148\u307b\u3069\u8aac\u660e\u3057\u305f\u3001`SetInsertPoint(thenBB)`\u304c`cond`\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u306a\u3044\u72b6\u614b\u3067\u306f\u666e\u901a\u306b\u52d5\u304f\u306e\u3067\u4e0d\u8981\u3060\u3068\u601d\u3063\u3066\u3044\u3066\u3001\u3044\u3056[FizzBuzz](https://github.com/long-long-float/lllisp/blob/master/examples/fizzbuzz.lisp)\u3092\u52d5\u304b\u305d\u3046\u3068\u3057\u305f\u3089\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u3070\u3089\u304f\u60a9\u307f\u307e\u3057\u305f\u3002\n* LLVM IR\u3092\u51fa\u529b\u3059\u308b\u3068\u304d\u306b\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\n    * \u30dd\u30a4\u30f3\u30bf\u578b\u3092\u5265\u304c\u3055\u305a(`load`\u3067\u53c2\u7167\u5148\u3092\u53d6\u308c\u307e\u3059)\u306b\u4f7f\u3063\u3066\u3044\u305f\u306e\u304c\u539f\u56e0\u3067\u3057\u305f\u3002\n\n# \u611f\u60f3\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u521d\u3081\u3066\u4f5c\u6210\u3057\u305f\u306e\u3067\u3059\u304cLLVM\u3092\u4f7f\u3046\u3068\u601d\u3044\u306e\u5916\u3001\u697d\u3067\u3057\u305f[^9]\u3002Web\u3067\u8abf\u3079\u308b\u3068\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u3082\u307e\u3042\u307e\u3042\u3042\u308b\u306e\u3067\u3059\u304c\u82e5\u5e72\u53e4\u304b\u3063\u305f\u308a\u3001\u307e\u305fBrainf\\*ck\u7b49\u306e\u7c21\u5358\u306a\u3082\u306e\u3057\u304b\u306a\u304b\u3063\u305f\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067Brainf\\*ck\u3088\u308a\u304b\u306f\u5b9f\u7528\u7684\u306aLISP\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u89e3\u8aac\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3082\u3063\u3068LLVM\u306e\u6df1\u3044\u3068\u3053\u308d\u3084\u7406\u8ad6\u7684\u306a\u3068\u3053\u308d\u3082\u66f8\u3044\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u52c9\u5f37\u4e0d\u8db3\u3086\u3048\u3001(\u672c\u8cea\u3092\u8aac\u660e\u3057\u3066\u3044\u306a\u3044)LLVM\u306eTips\u96c6\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u8fba\u308a\u306f\u52c9\u5f37\u3057\u3066\u3044\u304d\u305f\u3044\u3067\u3059\u306d\u3002\n\n# \u307e\u3068\u3081\n\nLLVM\u3092\u4f7f\u7528\u3057\u3066\u3001Brainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u3068LISP\u3082\u3069\u304d\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002LLVM\u3067\u4f55\u304b\u4f5c\u6210\u3059\u308b\u969b\u306b\u53c2\u8003\u306b\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u3042\u3068\u3001\u5ba3\u4f1d\u306b\u306a\u308b\u306e\u3067\u3059\u304c[C91\u3067\u9812\u5e03\u3059\u308b\u4e88\u5b9a\u306e\u5408\u540c\u8a8c](https://webcatalog-free.circle.ms/Circle/13014489)\u306b\u672c\u8a18\u4e8b\u3092\u5bc4\u7a3f\u3057\u305f\u306e\u3067\u305c\u3072\u305c\u3072\u624b\u306b\u3068\u3063\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059(\u50d5\u306f\u3044\u306a\u3044\u3067\u3059\u304c)\u3002 **\u6728\u66dc\u65e5 \u897f\u307f18b \u300c\u63da\u7fbd\u9ad8\u6821\u60c5\u5831\u51e6\u7406\u90e8\u300d** \u3067\u9812\u5e03\u3057\u307e\u3059\u3002CTF\u3084\u7af6\u30d7\u30ed\u30013D\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u30d7\u30ed\u304c\u66f8\u3044\u3066\u3044\u305f\u308a\u3059\u308b\u306e\u3067\u5185\u5bb9\u306f\u6fc3\u3044\u3060\u308d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u53c2\u8003\n\n* \u304d\u3064\u306d\u3055\u3093\u3067\u3082\u308f\u304b\u308bLLVM \u67cf\u6728 \u9905\u5b50, \u98a8\u85ac\n* http://llvm.org/docs/LangRef.html\n* https://github.com/llvm-mirror/llvm\n* http://llvm.org/docs/doxygen/html/index.html\n* https://www.ibm.com/developerworks/jp/opensource/library/os-createcompilerllvm1/\n* https://www.google.co.jp\n* http://www.wilfred.me.uk/blog/2015/02/21/my-first-llvm-compiler/\n* http://qiita.com/k2ymg/items/653c5b22b74a091be604\n* http://postd.cc/an-introduction-to-llvm-in-go/\n* https://peta.okechan.net/blog/llvm%E3%81%AB%E3%82%88%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%AE%E5%AE%9F%E8%A3%85\n* http://d.hatena.ne.jp/mjt/20111009/p2\n\n[^1]: http://connpass.com/event/38487/\n[^2]: Pass\u306e\u6700\u9069\u5316\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306f\u3084\u3063\u3066\u3044\u306a\u3044\u3067\u3059\n[^3]: \u30cd\u30c3\u30c8\u3067\u8abf\u3079\u3066\u3044\u308b\u3068\u305f\u307e\u306b`IRBuilder`\u3092\u4f7f\u308f\u305a\u306b\u547d\u4ee4\u3084\u5024\u306e\u30af\u30e9\u30b9\u3092new\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092\u898b\u304b\u3051\u308b\u306e\u3067\u3059\u304c\u30d3\u30eb\u30c0\u30fc\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u697d\u306a\u306e\u3067\u4f7f\u3048\u308b\u306a\u3089\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u3067\u3059(\u30d3\u30eb\u30c0\u30fc\u3067\u4f5c\u308c\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u304c)\n[^4]: dot\u30d3\u30e5\u30fc\u30a2\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Ubuntu\u306e\u5834\u5408 `sudo apt install xdot`\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n[^5]: ~~\u624b\u629c\u304d~~\u5b9f\u88c5\u3092\u697d\u306b\u3059\u308b\u305f\u3081\n[^6]: \u4e00\u5fdc\u8a00\u3044\u8a33\u3092\u3057\u3066\u304a\u304f\u3068\u3001\u81ea\u5206\u306e\u52c9\u5f37\u4e0d\u8db3\u3001\u307e\u3068\u307e\u3063\u305f\u6642\u9593\u3092\u53d6\u308b\u306e\u304c\u96e3\u3057\u304b\u3063\u305f\u3001\u4f5c\u308a\u59cb\u3081\u305f\u306e\u304c3\u30f6\u6708\u524d\u3067(\u98fd\u304d\u6027\u306a\u306e\u3067)\u610f\u8b58\u304c\u5225\u306e\u65b9\u306b\u5411\u304b\u3063\u3066\u3044\u3063\u305f\u3053\u3068\u304c\u91cd\u306a\u3063\u3066\u6b8b\u5ff5\u306aLISP\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n[^7]: \u306a\u305c\u578b\u3054\u3068\u306b\u51fa\u529b\u95a2\u6570\u304c\u3042\u308b\u304b\u3068\u3044\u3046\u3068\u578b\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5f15\u6570\u306e\u578b\u304c\u308f\u304b\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u2026\n[^8]: \u4f8b\u304c\u5c11\u3005\u4e0d\u81ea\u7136\u306a\u306e\u306f\u3001`setq`\u306e\u5f15\u6570\u306e\u7d50\u679c\u304c\u6b21\u306e\u5f0f\u306e\u5f15\u6570(`(setq int b ...)`)\u306b\u4f7f\u308f\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u5f37\u8abf\u3057\u305f\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\u5373\u5024(\u5373\u5024\u540c\u58eb\u306e\u8a08\u7b97\u3082\u542b\u3080)\u3060\u3068\u76f4\u63a5\u5f15\u6570\u306b\u7f6e\u304b\u308c\u3066\u3057\u307e\u3046\u3093\u3067\u3059\u3088\u306d\u2026\n[^9]: \u4ee5\u524d\u3001C\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u6210\u3057\u3088\u3046\u3068\u3057\u3066\u632b\u6298\u3057\u305f\u306e\u3067\u2026\n", "tags": ["LLVM", "Brainf*ck", "lisp", "\u30b3\u30f3\u30d1\u30a4\u30e9"]}