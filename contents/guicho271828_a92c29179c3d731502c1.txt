{"tags": ["lisp", "\u884c\u5217", "\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0"], "context": "VOP\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u65b9\u3092\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u3067\u6700\u9069\u5316\u3057\u305f\u3002\n\n\u30a2\u30f3\u30ed\u30fc\u30e9\u30fc\u306e\u66f8\u304d\u76f4\u3057\ndotimes-unroll \u3092\u3082\u3046\u4e00\u5ea6\u66f8\u304d\u306a\u304a\u3057\u305f\u3002\n\u5143\u306e\u5b9f\u88c5\u304b\u3089\u3001\u30d9\u30bf\u66f8\u304d\u306b\u5909\u63db\u3059\u308b dotimes-inline \u3092\u307e\u305a\u5206\u5272\u3057\u3066\u3001\n\u6b8b\u308a\u304c\u30aa\u30d5\u30bb\u30c3\u30c8\u8a08\u7b97\u304b\u3089\u30a2\u30f3\u30ed\u30fc\u30eb\u3092\u884c\u3046 dotimes-unroll3 \u306b\u306a\u3063\u305f\u3002\n(defmacro dotimes-inline ((var count &optional result-form) &body body &environment env)\n  (check-type var symbol)\n  (let ((count (macroexpand count env)))\n    (assert (and (constantp count) (numberp count)))\n    (iter (for c to count)\n          (when (first-iteration-p)\n            (collect 'progn))\n          (collect\n              (if (< c count)\n                  `(symbol-macrolet ((,var ,c))\n                     ,@body)\n                  result-form)))))\n\ndotimes-inline \u306f\u3001 count \u304c\u5b9a\u6570\u3067\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f\u3002\u30b7\u30f3\u30dc\u30eb\u30de\u30af\u30ed\u3082\u8a8d\u8b58\u3057\u3066\u3001\u305d\u306e\u5c55\u958b\u7d50\u679c\u304c\u5b9a\u6570\u306a\u3089OK. SBCL\u306eIR1\u3092\u3082\u3046\u5c11\u3057\u3088\u304f\u7406\u89e3\u3059\u308c\u3070\u3001\u5909\u6570\u304c\u5b9a\u6570\u7573\u307f\u8fbc\u307f\u3055\u308c\u305f\u6642\u306b\u3082\u5c55\u958b\u3067\u304d\u308b\u3093\u3060\u308d\u3046\u3051\u3069\u3001\u305d\u308c\u306f\u3081\u3093\u3069\u3046\u306a\u306e\u3067\u3084\u3081\u305f\u3002\n(defmacro dotimes-unroll3 (((var &optional (delta (gensym \"D\")))\n                            (count unroll)\n                            &optional result)\n                           (&body update)\n                           &body body\n                           &environment env)\n  (with-gensyms (quat mod nth-loop)\n    (let ((unroll (macroexpand unroll env)))\n      `(multiple-value-bind (,quat ,mod) (floor ,count ,unroll)\n         (declare (type fixnum ,quat)\n                  (type (mod ,unroll) ,mod))\n         (symbol-macrolet ((,delta ,unroll))\n           (dotimes (,nth-loop ,quat)\n             (declare (ignorable ,nth-loop))\n             (dotimes-inline (,var ,unroll)\n               ,@body)\n             ,@update))\n         (symbol-macrolet ((,delta 1)\n                           (,var 0))\n           (dotimes (,nth-loop ,mod)\n             (declare (type (mod ,unroll) ,var))\n             ,@body\n             ,@update))\n         ,result))))\n\ndotimes-unroll3 \u306f\u3001\u4eca\u307e\u3067\u306edotimes-unroll \u3068\u3061\u304c\u3063\u3066 update \u30d5\u30a9\u30fc\u30e0\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002 \u3053\u308c\u306f\u30a2\u30f3\u30ed\u30fc\u30eb\u306e\u969b\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u5225\u306b\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3002\u6b21\u306e\u4f8b\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3068\u601d\u3046\u3002\n\ndotimes-unroll3 \u30672\u6bb5\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\n\u3082\u3068\u306e\u624b\u3067\u3084\u3063\u305f\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u304c\u3053\u308c\u3060\u3002cols\u304c\u5076\u6570\u306a\u306e\u3092\u4eee\u5b9a\u3057\u3066\u308b\u306e\u3067\u30b3\u30ec\u3067\u305f\u3060\u3057\u3044\u3002\u3067\u3082\u6c4e\u7528\u306b\u3059\u308b\u306b\u306f\u4f59\u308a\u3092\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n(dotimes (col (/ cols 2))\n  (sb-kernel:data-vector-set-with-offset\n   (sb-kernel:%array-data-vector mc) mc-index 0\n   (+ (sb-kernel:data-vector-ref-with-offset\n       (sb-kernel:%array-data-vector mc) mc-index 0)\n      (* cell (sb-kernel:data-vector-ref-with-offset\n               (sb-kernel:%array-data-vector mb) mb-index 0))))\n  (sb-kernel:data-vector-set-with-offset\n   (sb-kernel:%array-data-vector mc) mc-index 1\n   (+ (sb-kernel:data-vector-ref-with-offset\n       (sb-kernel:%array-data-vector mc) mc-index 1)\n      (* cell (sb-kernel:data-vector-ref-with-offset\n               (sb-kernel:%array-data-vector mb) mb-index 1))))\n  (incf mb-index 2)\n  (incf mc-index 2))\n\n\u30a2\u30f3\u30ed\u30fc\u30eb\u306e\u4f59\u308a\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u62bd\u8c61\u5316\u3059\u308b\u3068\u3053\u3046\u3002\n  (multiple-value-bind (quat mod) (floor cols uj)\n    (dotimes (col quat)\n      (dotimes-inline (offset uj)\n        (sb-kernel:data-vector-set-with-offset\n         (sb-kernel:%array-data-vector mc) mc-index offset\n         (+ (sb-kernel:data-vector-ref-with-offset\n             (sb-kernel:%array-data-vector mc) mc-index offset)\n            (* cell (sb-kernel:data-vector-ref-with-offset\n                     (sb-kernel:%array-data-vector mb) mb-index offset)))))\n      (incf mb-index uj)\n      (incf mc-index uj))\n    (dotimes (col mod)\n      (sb-kernel:data-vector-set-with-offset\n       (sb-kernel:%array-data-vector mc) mc-index 0\n       (+ (sb-kernel:data-vector-ref-with-offset\n           (sb-kernel:%array-data-vector mc) mc-index 0)\n          (* cell (sb-kernel:data-vector-ref-with-offset\n                   (sb-kernel:%array-data-vector mb) mb-index 0))))\n      (incf mb-index)\n      (incf mc-index)))\n\n\u30aa\u30d5\u30bb\u30c3\u30c8\u306e\u66f4\u65b0\u90e8\u5206\u3092 update \u306b\u79fb\u3057\u3066\u3001\u30de\u30af\u30ed\u3067\u3084\u308b\u3068\u3053\u3046\u3002\n(dotimes-unroll3 ((col delta) (cols 2))\n    ((incf mb-index delta)\n     (incf mc-index delta))\n  (sb-kernel:data-vector-set-with-offset\n   (sb-kernel:%array-data-vector mc) mc-index col\n   (+ (sb-kernel:data-vector-ref-with-offset\n       (sb-kernel:%array-data-vector mc) mc-index col)\n      (* cell (sb-kernel:data-vector-ref-with-offset\n               (sb-kernel:%array-data-vector mb) mb-index col))))))))))\n\n\n\u7d50\u679c\u307e\u3068\u3081\n\u6700\u7d42\u56de\u306a\u306e\u3067\u3001\u4eca\u307e\u3067\u306e\u6027\u80fd\u306e\u307e\u3068\u3081\u3092\u66f8\u3044\u3066\u304a\u3053\u3046\u3068\u304a\u3082\u3046\u3002\n\u30c6\u30b9\u30c8\u306e\u7e70\u308a\u8fd4\u3057\u56de\u6570\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u524d\u56de\u3068\u6570\u5b57\u304c\u9055\u3046\u304c\u50be\u5411\u306f\u4e00\u7dd2\u3002\n\u884c\u5217\u306f\u3082\u3046\u3044\u3044\u3084\u3002\n\n\n\n\ntime [sec]\n\n\n\n\nIJK-loop\n\n\n\nSIMPLE-GEMM\n22.1\n\n\nCACHE-GEMM\n14.008\n\n\nROW-MAJOR-GEMM\n9.412\n\n\nRM-GEMM+STATIC-SIZE\n8.428\n\n\nRM-GEMM+STATIC-SIZE+UNROLL2\n7.98\n\n\nRM-GEMM+STATIC-SIZE+UNROLL8\n7.612\n\n\nautotune (1 2 16)\n6.736\n\n\n\n\n\n\nIKJ-loop\n\n\n\nSIMPLE-GEMM-K\n17.924\n\n\nCACHE-GEMM-K\n14.588\n\n\nRM-GEMM-K\n8.04\n\n\nRM-GEMM+STATIC-SIZE-K\n8.108\n\n\nRM-GEMM+STATIC-SIZE+UNROLL2-K1\n8.332\n\n\n\n\n\n\nIKJ-loop + VOP\n\n\n\nRM-GEMM+STATIC-SIZE+UNROLL2-K2\n6.052\n\n\nRM-GEMM+STATIC-SIZE+UNROLL8-K\n6.232\n\n\nautotune (1 2 16)\n5.632\n\n\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3053\u3002\nhttps://github.com/guicho271828/play-on-matrix\nVOP\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u65b9\u3092\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u3067\u6700\u9069\u5316\u3057\u305f\u3002\n\n# \u30a2\u30f3\u30ed\u30fc\u30e9\u30fc\u306e\u66f8\u304d\u76f4\u3057\n\n`dotimes-unroll` \u3092\u3082\u3046\u4e00\u5ea6\u66f8\u304d\u306a\u304a\u3057\u305f\u3002\n\u5143\u306e\u5b9f\u88c5\u304b\u3089\u3001\u30d9\u30bf\u66f8\u304d\u306b\u5909\u63db\u3059\u308b `dotimes-inline` \u3092\u307e\u305a\u5206\u5272\u3057\u3066\u3001\n\u6b8b\u308a\u304c\u30aa\u30d5\u30bb\u30c3\u30c8\u8a08\u7b97\u304b\u3089\u30a2\u30f3\u30ed\u30fc\u30eb\u3092\u884c\u3046 `dotimes-unroll3` \u306b\u306a\u3063\u305f\u3002\n\n```cl\n(defmacro dotimes-inline ((var count &optional result-form) &body body &environment env)\n  (check-type var symbol)\n  (let ((count (macroexpand count env)))\n    (assert (and (constantp count) (numberp count)))\n    (iter (for c to count)\n          (when (first-iteration-p)\n            (collect 'progn))\n          (collect\n              (if (< c count)\n                  `(symbol-macrolet ((,var ,c))\n                     ,@body)\n                  result-form)))))\n```\n\n`dotimes-inline` \u306f\u3001 `count` \u304c\u5b9a\u6570\u3067\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f\u3002\u30b7\u30f3\u30dc\u30eb\u30de\u30af\u30ed\u3082\u8a8d\u8b58\u3057\u3066\u3001\u305d\u306e\u5c55\u958b\u7d50\u679c\u304c\u5b9a\u6570\u306a\u3089OK. SBCL\u306eIR1\u3092\u3082\u3046\u5c11\u3057\u3088\u304f\u7406\u89e3\u3059\u308c\u3070\u3001\u5909\u6570\u304c\u5b9a\u6570\u7573\u307f\u8fbc\u307f\u3055\u308c\u305f\u6642\u306b\u3082\u5c55\u958b\u3067\u304d\u308b\u3093\u3060\u308d\u3046\u3051\u3069\u3001\u305d\u308c\u306f\u3081\u3093\u3069\u3046\u306a\u306e\u3067\u3084\u3081\u305f\u3002\n\n```cl\n(defmacro dotimes-unroll3 (((var &optional (delta (gensym \"D\")))\n                            (count unroll)\n                            &optional result)\n                           (&body update)\n                           &body body\n                           &environment env)\n  (with-gensyms (quat mod nth-loop)\n    (let ((unroll (macroexpand unroll env)))\n      `(multiple-value-bind (,quat ,mod) (floor ,count ,unroll)\n         (declare (type fixnum ,quat)\n                  (type (mod ,unroll) ,mod))\n         (symbol-macrolet ((,delta ,unroll))\n           (dotimes (,nth-loop ,quat)\n             (declare (ignorable ,nth-loop))\n             (dotimes-inline (,var ,unroll)\n               ,@body)\n             ,@update))\n         (symbol-macrolet ((,delta 1)\n                           (,var 0))\n           (dotimes (,nth-loop ,mod)\n             (declare (type (mod ,unroll) ,var))\n             ,@body\n             ,@update))\n         ,result))))\n```\n\n`dotimes-unroll3` \u306f\u3001\u4eca\u307e\u3067\u306e`dotimes-unroll` \u3068\u3061\u304c\u3063\u3066 `update` \u30d5\u30a9\u30fc\u30e0\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002 \u3053\u308c\u306f\u30a2\u30f3\u30ed\u30fc\u30eb\u306e\u969b\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u5225\u306b\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3002\u6b21\u306e\u4f8b\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3068\u601d\u3046\u3002\n\n# dotimes-unroll3 \u30672\u6bb5\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\n\n\u3082\u3068\u306e\u624b\u3067\u3084\u3063\u305f\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u304c\u3053\u308c\u3060\u3002cols\u304c\u5076\u6570\u306a\u306e\u3092\u4eee\u5b9a\u3057\u3066\u308b\u306e\u3067\u30b3\u30ec\u3067\u305f\u3060\u3057\u3044\u3002\u3067\u3082\u6c4e\u7528\u306b\u3059\u308b\u306b\u306f\u4f59\u308a\u3092\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n```cl\n(dotimes (col (/ cols 2))\n  (sb-kernel:data-vector-set-with-offset\n   (sb-kernel:%array-data-vector mc) mc-index 0\n   (+ (sb-kernel:data-vector-ref-with-offset\n       (sb-kernel:%array-data-vector mc) mc-index 0)\n      (* cell (sb-kernel:data-vector-ref-with-offset\n               (sb-kernel:%array-data-vector mb) mb-index 0))))\n  (sb-kernel:data-vector-set-with-offset\n   (sb-kernel:%array-data-vector mc) mc-index 1\n   (+ (sb-kernel:data-vector-ref-with-offset\n       (sb-kernel:%array-data-vector mc) mc-index 1)\n      (* cell (sb-kernel:data-vector-ref-with-offset\n               (sb-kernel:%array-data-vector mb) mb-index 1))))\n  (incf mb-index 2)\n  (incf mc-index 2))\n```\n\n\u30a2\u30f3\u30ed\u30fc\u30eb\u306e\u4f59\u308a\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u62bd\u8c61\u5316\u3059\u308b\u3068\u3053\u3046\u3002\n\n```cl\n  (multiple-value-bind (quat mod) (floor cols uj)\n    (dotimes (col quat)\n      (dotimes-inline (offset uj)\n        (sb-kernel:data-vector-set-with-offset\n         (sb-kernel:%array-data-vector mc) mc-index offset\n         (+ (sb-kernel:data-vector-ref-with-offset\n             (sb-kernel:%array-data-vector mc) mc-index offset)\n            (* cell (sb-kernel:data-vector-ref-with-offset\n                     (sb-kernel:%array-data-vector mb) mb-index offset)))))\n      (incf mb-index uj)\n      (incf mc-index uj))\n    (dotimes (col mod)\n      (sb-kernel:data-vector-set-with-offset\n       (sb-kernel:%array-data-vector mc) mc-index 0\n       (+ (sb-kernel:data-vector-ref-with-offset\n           (sb-kernel:%array-data-vector mc) mc-index 0)\n          (* cell (sb-kernel:data-vector-ref-with-offset\n                   (sb-kernel:%array-data-vector mb) mb-index 0))))\n      (incf mb-index)\n      (incf mc-index)))\n```\n\n\u30aa\u30d5\u30bb\u30c3\u30c8\u306e\u66f4\u65b0\u90e8\u5206\u3092 `update` \u306b\u79fb\u3057\u3066\u3001\u30de\u30af\u30ed\u3067\u3084\u308b\u3068\u3053\u3046\u3002\n\n```cl\n(dotimes-unroll3 ((col delta) (cols 2))\n    ((incf mb-index delta)\n     (incf mc-index delta))\n  (sb-kernel:data-vector-set-with-offset\n   (sb-kernel:%array-data-vector mc) mc-index col\n   (+ (sb-kernel:data-vector-ref-with-offset\n       (sb-kernel:%array-data-vector mc) mc-index col)\n      (* cell (sb-kernel:data-vector-ref-with-offset\n               (sb-kernel:%array-data-vector mb) mb-index col))))))))))\n```\n\n# \u7d50\u679c\u307e\u3068\u3081\n\n\u6700\u7d42\u56de\u306a\u306e\u3067\u3001\u4eca\u307e\u3067\u306e\u6027\u80fd\u306e\u307e\u3068\u3081\u3092\u66f8\u3044\u3066\u304a\u3053\u3046\u3068\u304a\u3082\u3046\u3002\n\u30c6\u30b9\u30c8\u306e\u7e70\u308a\u8fd4\u3057\u56de\u6570\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u524d\u56de\u3068\u6570\u5b57\u304c\u9055\u3046\u304c\u50be\u5411\u306f\u4e00\u7dd2\u3002\n\u884c\u5217\u306f\u3082\u3046\u3044\u3044\u3084\u3002\n\n|                                | time [sec] |\n|--------------------------------+------------:|\n| **IJK-loop**                     |            |\n| SIMPLE-GEMM                    |       22.1 |\n| CACHE-GEMM                     |     14.008 |\n| ROW-MAJOR-GEMM                 |      9.412 |\n| RM-GEMM+STATIC-SIZE            |      8.428 |\n| RM-GEMM+STATIC-SIZE+UNROLL2    |       7.98 |\n| RM-GEMM+STATIC-SIZE+UNROLL8    |      7.612 |\n| autotune (1 2 16)              |      6.736 |\n|                                |            |\n| **IKJ-loop**                     |            |\n| SIMPLE-GEMM-K                  |     17.924 |\n| CACHE-GEMM-K                   |     14.588 |\n| RM-GEMM-K                      |       8.04 |\n| RM-GEMM+STATIC-SIZE-K          |      8.108 |\n| RM-GEMM+STATIC-SIZE+UNROLL2-K1 |      8.332 |\n|                                |            |\n| **IKJ-loop + VOP**               |            |\n| RM-GEMM+STATIC-SIZE+UNROLL2-K2 |      6.052 |\n| RM-GEMM+STATIC-SIZE+UNROLL8-K  |      6.232 |\n| autotune (1 2 16)              |      5.632 |\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3053\u3002\n\nhttps://github.com/guicho271828/play-on-matrix\n"}