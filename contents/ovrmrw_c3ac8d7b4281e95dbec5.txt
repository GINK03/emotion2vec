{"context": "When\n2017/02/07\nAt\nMeguro.es #8 @ \u30a2\u30ab\u30c4\u30ad\n\n\n\u81ea\u5df1\u7d39\u4ecb\n\u3061\u304d\u3055\u3093\n(Tomohiro Noguchi)\nTwitter/GitHub/Qiita: @ovrmrw\n\u305f\u3060\u306eSIer\u3002\nAngular Japan User Group (ng-japan)\u30b9\u30bf\u30c3\u30d5\u3002\n\n\n\n\u30a2\u30ab\u30a6\u30f3\u30c8ID\u306e\u7531\u6765\n\nthe day after tomorrow \novermorrow(\u4fd7\u8a9e)\n\u7565\u3057\u3066\novrmrw\n\u300c\u5148\u3092\u898b\u636e\u3048\u3066\u300d\u3088\u308a\u3055\u3089\u306b\u5148\u3092\u3001\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u3002\n\n(\u3088\u304f\u805e\u304b\u308c\u308b\u306e\u3067)\n\n(\u3053\u3053\u304b\u3089InversifyJS\u306e\u57fa\u672c\u306e\u8a71)\n===\nGitHub\u30ea\u30dd\u30b8\u30c8\u30ea ovrmrw/inversify-mock-example\n\n\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3: React\u3060\u3063\u3066DI\u3057\u305f\u3044\n\n\n\nInversifyJS\n\na library for Inversion of Control\nAngular\u306e\u3088\u3046\u306b @injectable \u3068\u304b @inject \u3068\u304b\u66f8\u3044\u3066Dependency Injection(\u4f9d\u5b58\u6027\u6ce8\u5165)\u3067\u304d\u307e\u3059\u3002\n\n\n\n\n\u4e8b\u524d\u6e96\u5099 (TypeScript\u306e\u5834\u5408)\ntsconfig.json\u3067\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n\ntsconfig.json\n{\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true\n  }\n}\n\n\n\u306a\u308b\u3079\u304f\u6700\u521d\u306e\u65b9\u3067reflect-metadata\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002(polyfill)\n\nindex.ts\nimport 'reflect-metadata'\n\n\n\n\u307e\u305aInject\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\nDI\u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u305b\u308b\u30af\u30e9\u30b9\u306f@injectable\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u304c\u5fc5\u9808\u3067\u3059\u3002\n\nservices.ts\nimport { injectable } from 'inversify'\n\n@injectable()   // \u2605\nexport class Katana {\n  hit() { \n    return 'cut!' \n  }\n}\n\n@injectable()   // \u2605\nexport class Shuriken {\n  throw() { \n    return 'hit!' \n  }\n}\n\n\n\nDI\u30b3\u30f3\u30c6\u30ca\u306e\u5b9a\u7fa9\u3092\u66f8\u304d\u307e\u3059\u3002\u6163\u4f8b\u3068\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u540d\u306finversify.config.ts\u3068\u3057\u307e\u3059\u3002\n\ninversify.config.ts\nimport { Container } from 'inversify'\nimport { Katana, Shuriken } from './services'\n\nconst rootContainer = new Container()\nrootContainer.bind(Katana).toSelf()    // \u2605\nrootContainer.bind(Shuriken).toSelf()  // \u2605\n\nexport const container = rootContainer.createChild()\n\n\n\n\n\u88dc\u8db3\u8aac\u660e\ncontainer.bind(Katana).toSelf()\n\n\u610f\u5473: Katana\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066Katana\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092Inject\u3059\u308b\u3002\n===\n\u30e2\u30c3\u30af\u3059\u308b\u5834\u5408\u306f\uff1f\ncontainer.bind(Katana).to(MockKatana)\n\n\u610f\u5473: Katana\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066MockKatana\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092Inject\u3059\u308b\u3002\n\nNinja\u30af\u30e9\u30b9\u306bKatana,Shuriken\u30af\u30e9\u30b9\u3092Inject\u3057\u3066\u307f\u308b\u3002\n\nindex.ts\n@injectable()\nclass Ninja {\n  constructor(\n    @inject(Katana) private katana: Katana, // @inject(Katana)\u306f\u7701\u7565\u53ef\n    @inject(Shuriken) private shuriken: Shuriken, // @inject(Shuriken)\u306f\u7701\u7565\u53ef\n  ) { }\n\n  fight() { \n    return this.katana.hit() \n  }\n  sneak() { \n    return this.shuriken.throw() \n  }\n}\n\n@injectable()\nclass MockKatana implements Katana {\n  hit() { \n    return 'cut! (mock)' \n  }\n}\n\ncontainer.bind(Ninja).toSelf()\ncontainer.bind(Katana).to(MockKatana)  // \u2605\n\nconst ninja = container.get(Ninja)     // \u2605\n\nconsole.log(ninja.fight()) // output: \"cut! (mock)\"\nconsole.log(ninja.sneak()) // output: \"hit!\"\n\n\n\n\n\u88dc\u8db3\u8aac\u660e\n  constructor(\n    @inject(Katana) private katana: Katana, // @inject(Katana)\u306f\u7701\u7565\u53ef\n    @inject(Shuriken) private shuriken: Shuriken, // @inject(Shuriken)\u306f\u7701\u7565\u53ef\n  ) { }\n\nNinja\u30af\u30e9\u30b9\u306econstructor\u3067\n\n\nKatana\u30c8\u30fc\u30af\u30f3\u306bbind\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u5909\u6570katana\u306bInject\u3059\u308b\u3002\n\nShuriken\u30c8\u30fc\u30af\u30f3\u306bbind\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u5909\u6570shuriken\u306bInject\u3059\u308b\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u304c\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u5909\u6570katana\u306b\u306fKatana\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306f\u306a\u304f\u3001\ncontainer.bind(Katana).to(MockKatana)\n\n\u4e0a\u8a18\u306e\u4e00\u884c\u306b\u3088\u3063\u3066MockKatana\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304cInject\u3055\u308c\u307e\u3059\u3002\n\u3082\u3057\u3053\u306e\u884c\u304c\u7121\u304b\u3063\u305f\u3089\u3001\n\ninversify.config.ts\nrootContainer.bind(Katana).toSelf()\n\n\nrootContainer\u306e\u5b9a\u7fa9\u304c\u63a1\u7528\u3055\u308c\u3066Katana\u30af\u30e9\u30b9\u304cInject\u3055\u308c\u307e\u3059\u3002\n\n\n\u56f3\u3067\u8aac\u660e (1/2)\n\n\n\n\u56f3\u3067\u8aac\u660e (2/2)\n\n\nChildContainer\u3067\u4e0a\u4f4d\u306eContainer\u306e\u5b9a\u7fa9\u3092\u4e0a\u66f8\u304d\u3067\u304d\u308b\u3002\nChildContainer\u3067bind\u3055\u308c\u305f\u30af\u30e9\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3089\u4e0a\u4f4d\u306eContainer\u3092\u8fbf\u3063\u3066\u63a2\u3059\u3002\n\n\n\n\u3055\u3089\u306b\u88dc\u8db3\u8aac\u660e\nNinja\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306bnew Ninja()\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\nconst ninja = container.get(Ninja)\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306bcontainer.get(Ninja)\u3068\u66f8\u304f\u3053\u3068\u3067DI\u30b3\u30f3\u30c6\u30ca\u304b\u3089Ninja\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\u4f9d\u5b58\u6027\u306e\u89e3\u6c7a\u306fDI\u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u3067\u3088\u3057\u306a\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n(\u3053\u3053\u304b\u3089React\u306e\u8a71\u3001\u3064\u307e\u308a\u672c\u984c)\n===\nGitHub\u30ea\u30dd\u30b8\u30c8\u30ea ovrmrw/meguroes-react-inversify-typescript\n\n\u307e\u305aInject\u3059\u308b\u9069\u5f53\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n@injectable()\u3092\u4ed8\u3051\u308b\u306e\u304c\u30b3\u30c4\u3067\u3059\u306d\u3002\n\nactions.ts\nimport { injectable } from 'inversify'\n\n@injectable()   // \u2605\nexport class Actions {\n  goo(): string {\n    return 'goo!'\n  }\n\n  choki(): string {\n    return 'choki!'\n  }\n\n  paa(): string {\n    return 'paa!'\n  }\n}\n\n\n\nDI\u30b3\u30f3\u30c6\u30ca\u306e\u5b9a\u7fa9\u3092\u66f8\u304d\u307e\u3059\u3002\n\ninversify.config.ts\nimport { Container } from 'inversify'\nimport getDecorators from 'inversify-inject-decorators'\nimport { Actions } from './actions'\n\nconst container = new Container()\ncontainer.bind(Actions).toSelf()   // \u2605\n\nexport const { lazyInject } = getDecorators(container)  // \u2605\n\n\nActions\u30c8\u30fc\u30af\u30f3\u306bActions\u30af\u30e9\u30b9\u81ea\u8eab\u3092bind\u3057\u307e\u3059\u3002\ninversify-inject-decorators\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066lazyInject\u3068\u3044\u3046\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092export\u3057\u3066\u3044\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\nReact\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3088\u3046\u3084\u304f\u4eca\u65e5\u4e00\u756a\u8a71\u3057\u305f\u304b\u3063\u305f@lazyInject(Actions) actions: Actions\u304c\u767b\u5834\u3057\u307e\u3057\u305f\u3002\n\nApp.ts\nimport { lazyInject } from './inversify.config'\nimport { Actions } from './actions'\n\nexport class App extends React.Component<{}, {}> {\n  @lazyInject(Actions) actions: Actions   // \u2605 constructor\u3067\u3059\u3089\u306a\u3044\n\n  goo(event): void {\n    this.setState({ janken: this.actions.goo() })\n  }\n\n  choki(event): void {\n    this.setState({ janken: this.actions.choki() })\n  }\n\n  paa(event): void {\n    this.setState({ janken: this.actions.paa() })\n  }\n\n  random(event): void {\n    const random = Math.random()\n    if (random > 0.66) {\n      this.goo(event)\n    } else if (random > 0.33) {\n      this.choki(event)\n    } else {\n      this.paa(event)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={(e) => this.goo(e)}>\u30b0\u30fc</button>\n        <button onClick={(e) => this.choki(e)}>\u30c1\u30e7\u30ad</button>\n        <button onClick={(e) => this.paa(e)}>\u30d1\u30fc</button>\n        <button onClick={(e) => this.random(e)}>\u30e9\u30f3\u30c0\u30e0</button>\n        <h1>{this.state.janken}</h1>\n      </div>\n    )\n  }\n}\n\n\n\n(\u6539\u884c\u3057\u3066\u3082\u3057\u306a\u304f\u3066\u3082\u3069\u3061\u3089\u3067\u3082\u826f\u3044)\n  @lazyInject(Actions) actions: Actions\n\n  @lazyInject(Actions) \n  actions: Actions\n\n\u610f\u5473: Actions\u30c8\u30fc\u30af\u30f3\u306bActions\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092Inject\u3059\u308b\u3002\u305f\u3060\u3057\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u3067\u306f\u306a\u304f\u5b9f\u884c\u6642\u306bInject\u3055\u308c\u308b\u3002 \n(\u8ffd\u8a18)...\u3068\u601d\u3063\u305f\u3051\u3069constructor\u306e\u4e2d\u3067this.actions\u3092\u53c2\u7167\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306f\u306a\u3089\u306a\u3044\u306e\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u3046\u307e\u3044\u3053\u3068Inject\u3057\u3066\u308b\u306e\u304b\u3082\u3002\n\nQ: lazy\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\uff1f\nA: \u672c\u6765\u3067\u3042\u308c\u3070container.get(App)\u306e\u3088\u3046\u306bInversifyJS\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u63e1\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u304c\u3001React\u304c\u63e1\u3063\u3066\u3044\u308b\u305f\u3081\u4ed5\u65b9\u306a\u304f\u5f8c\u304b\u3089Inject\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nREADME\u306b\u3082\u3053\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\nSome frameworks and libraries take control over the creation of instances of a given class. For example, React takes control over the creation of instances of a given React component. This kind of frameworks and libraries prevent us from being able to use constructor injection and as a result they are not easy to integrate with InversifyJS.\n\u3044\u304f\u3064\u304b\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001React\u306f\u4e0e\u3048\u3089\u308c\u305fReact\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\u3053\u306e\u7a2e\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u305f\u3081\u3001InversifyJS\u3068\u306e\u7d71\u5408\u304c\u5bb9\u6613\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\n\nReact\u3067\u3082Angular\u306e\u3088\u3046\u306bDI\u3067\u304d\u308b\n\n\n\nAngular\u4f7f\u304a\u3046\n\n\n\nThanks!\nWhen\n\n2017/02/07\n\nAt\n\n[Meguro.es #8 @ \u30a2\u30ab\u30c4\u30ad](https://meguroes.connpass.com/event/47839/)\n\n---\n\n## \u81ea\u5df1\u7d39\u4ecb\n\n\u3061\u304d\u3055\u3093\n(Tomohiro Noguchi)\n\nTwitter/GitHub/Qiita: [@ovrmrw](https://twitter.com/ovrmrw)\n\n\u305f\u3060\u306eSIer\u3002\n\nAngular Japan User Group (ng-japan)\u30b9\u30bf\u30c3\u30d5\u3002\n\n![3a2512bb-aa72-4515-af42-1f1721252f39.jpg](https://qiita-image-store.s3.amazonaws.com/0/74793/c753b39c-1581-ea1d-87d1-181f37bda60d.jpeg)\n\n---\n\n### \u30a2\u30ab\u30a6\u30f3\u30c8ID\u306e\u7531\u6765\n\n1. the day after tomorrow \n1. overmorrow(\u4fd7\u8a9e)\n1. \u7565\u3057\u3066\n1. ovrmrw\n1. \u300c\u5148\u3092\u898b\u636e\u3048\u3066\u300d\u3088\u308a\u3055\u3089\u306b\u5148\u3092\u3001\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u3002\n\n(\u3088\u304f\u805e\u304b\u308c\u308b\u306e\u3067:innocent:)\n\n---\n\n(\u3053\u3053\u304b\u3089InversifyJS\u306e\u57fa\u672c\u306e\u8a71)\n\n===\n\nGitHub\u30ea\u30dd\u30b8\u30c8\u30ea [ovrmrw/inversify-mock-example](https://github.com/ovrmrw/inversify-mock-example)\n\n---\n\n### \u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3: React\u3060\u3063\u3066DI\u3057\u305f\u3044:tired_face:\n\n---\n\n## InversifyJS\n\n- a library for Inversion of Control\n- Angular\u306e\u3088\u3046\u306b `@injectable` \u3068\u304b `@inject` \u3068\u304b\u66f8\u3044\u3066Dependency Injection(\u4f9d\u5b58\u6027\u6ce8\u5165)\u3067\u304d\u307e\u3059\u3002\n\n![C19WVJ9XAAAiv8n.jpg](https://qiita-image-store.s3.amazonaws.com/0/74793/68e5516a-e1f6-a6ef-5947-31c54daf6fe7.jpeg)\n\n---\n\n### \u4e8b\u524d\u6e96\u5099 (TypeScript\u306e\u5834\u5408)\n\n`tsconfig.json`\u3067\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n\n```json:tsconfig.json\n{\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n\u306a\u308b\u3079\u304f\u6700\u521d\u306e\u65b9\u3067`reflect-metadata`\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002(polyfill)\n\n```ts:index.ts\nimport 'reflect-metadata'\n```\n\n---\n\n\u307e\u305aInject\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\nDI\u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u305b\u308b\u30af\u30e9\u30b9\u306f`@injectable`\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u304c\u5fc5\u9808\u3067\u3059\u3002\n\n```ts:services.ts\nimport { injectable } from 'inversify'\n\n@injectable()   // \u2605\nexport class Katana {\n  hit() { \n    return 'cut!' \n  }\n}\n\n@injectable()   // \u2605\nexport class Shuriken {\n  throw() { \n    return 'hit!' \n  }\n}\n```\n\n---\n\nDI\u30b3\u30f3\u30c6\u30ca\u306e\u5b9a\u7fa9\u3092\u66f8\u304d\u307e\u3059\u3002\u6163\u4f8b\u3068\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u540d\u306f`inversify.config.ts`\u3068\u3057\u307e\u3059\u3002\n\n```ts:inversify.config.ts\nimport { Container } from 'inversify'\nimport { Katana, Shuriken } from './services'\n\nconst rootContainer = new Container()\nrootContainer.bind(Katana).toSelf()    // \u2605\nrootContainer.bind(Shuriken).toSelf()  // \u2605\n\nexport const container = rootContainer.createChild()\n```\n\n---\n\n### \u88dc\u8db3\u8aac\u660e\n\n```ts\ncontainer.bind(Katana).toSelf()\n```\n\n\u610f\u5473: `Katana`\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066`Katana`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092Inject\u3059\u308b\u3002\n\n===\n\n\u30e2\u30c3\u30af\u3059\u308b\u5834\u5408\u306f\uff1f\n\n```ts\ncontainer.bind(Katana).to(MockKatana)\n```\n\n\u610f\u5473: `Katana`\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066`MockKatana`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092Inject\u3059\u308b\u3002\n\n---\n\n`Ninja`\u30af\u30e9\u30b9\u306b`Katana`,`Shuriken`\u30af\u30e9\u30b9\u3092Inject\u3057\u3066\u307f\u308b\u3002\n\n```ts:index.ts\n@injectable()\nclass Ninja {\n  constructor(\n    @inject(Katana) private katana: Katana, // @inject(Katana)\u306f\u7701\u7565\u53ef\n    @inject(Shuriken) private shuriken: Shuriken, // @inject(Shuriken)\u306f\u7701\u7565\u53ef\n  ) { }\n\n  fight() { \n    return this.katana.hit() \n  }\n  sneak() { \n    return this.shuriken.throw() \n  }\n}\n\n@injectable()\nclass MockKatana implements Katana {\n  hit() { \n    return 'cut! (mock)' \n  }\n}\n\ncontainer.bind(Ninja).toSelf()\ncontainer.bind(Katana).to(MockKatana)  // \u2605\n\nconst ninja = container.get(Ninja)     // \u2605\n\nconsole.log(ninja.fight()) // output: \"cut! (mock)\"\nconsole.log(ninja.sneak()) // output: \"hit!\"\n```\n\n---\n\n### \u88dc\u8db3\u8aac\u660e\n\n```ts\n  constructor(\n    @inject(Katana) private katana: Katana, // @inject(Katana)\u306f\u7701\u7565\u53ef\n    @inject(Shuriken) private shuriken: Shuriken, // @inject(Shuriken)\u306f\u7701\u7565\u53ef\n  ) { }\n```\n\n`Ninja`\u30af\u30e9\u30b9\u306e`constructor`\u3067\n\n- `Katana`\u30c8\u30fc\u30af\u30f3\u306bbind\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u5909\u6570`katana`\u306bInject\u3059\u308b\u3002\n- `Shuriken`\u30c8\u30fc\u30af\u30f3\u306bbind\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u5909\u6570`shuriken`\u306bInject\u3059\u308b\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u304c\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u5909\u6570`katana`\u306b\u306f`Katana`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306f\u306a\u304f\u3001\n\n```ts\ncontainer.bind(Katana).to(MockKatana)\n```\n\n\u4e0a\u8a18\u306e\u4e00\u884c\u306b\u3088\u3063\u3066`MockKatana`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304cInject\u3055\u308c\u307e\u3059\u3002\n\u3082\u3057\u3053\u306e\u884c\u304c\u7121\u304b\u3063\u305f\u3089\u3001\n\n```ts:inversify.config.ts\nrootContainer.bind(Katana).toSelf()\n```\n\n`rootContainer`\u306e\u5b9a\u7fa9\u304c\u63a1\u7528\u3055\u308c\u3066`Katana`\u30af\u30e9\u30b9\u304cInject\u3055\u308c\u307e\u3059\u3002\n\n---\n\n### \u56f3\u3067\u8aac\u660e (1/2)\n\n![container-01.png](https://qiita-image-store.s3.amazonaws.com/0/74793/606a5a9a-5a0d-163d-ef7a-7b470f9e5837.png)\n\n---\n\n### \u56f3\u3067\u8aac\u660e (2/2)\n\n![container-02.png](https://qiita-image-store.s3.amazonaws.com/0/74793/f359d37f-b965-cea6-64aa-abed42aac8ab.png)\n\n- ChildContainer\u3067\u4e0a\u4f4d\u306eContainer\u306e\u5b9a\u7fa9\u3092\u4e0a\u66f8\u304d\u3067\u304d\u308b\u3002\n- ChildContainer\u3067bind\u3055\u308c\u305f\u30af\u30e9\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3089\u4e0a\u4f4d\u306eContainer\u3092\u8fbf\u3063\u3066\u63a2\u3059\u3002\n\n---\n\n### \u3055\u3089\u306b\u88dc\u8db3\u8aac\u660e\n\n`Ninja`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306b`new Ninja()`\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\n```ts\nconst ninja = container.get(Ninja)\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b`container.get(Ninja)`\u3068\u66f8\u304f\u3053\u3068\u3067DI\u30b3\u30f3\u30c6\u30ca\u304b\u3089`Ninja`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\u4f9d\u5b58\u6027\u306e\u89e3\u6c7a\u306fDI\u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u3067\u3088\u3057\u306a\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n---\n\n(\u3053\u3053\u304b\u3089React\u306e\u8a71\u3001\u3064\u307e\u308a\u672c\u984c)\n\n===\n\nGitHub\u30ea\u30dd\u30b8\u30c8\u30ea [ovrmrw/meguroes-react-inversify-typescript](https://github.com/ovrmrw/meguroes-react-inversify-typescript)\n\n---\n\n\u307e\u305aInject\u3059\u308b\u9069\u5f53\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n`@injectable()`\u3092\u4ed8\u3051\u308b\u306e\u304c\u30b3\u30c4\u3067\u3059\u306d\u3002\n\n```ts:actions.ts\nimport { injectable } from 'inversify'\n\n@injectable()   // \u2605\nexport class Actions {\n  goo(): string {\n    return 'goo!'\n  }\n\n  choki(): string {\n    return 'choki!'\n  }\n\n  paa(): string {\n    return 'paa!'\n  }\n}\n```\n\n---\n\nDI\u30b3\u30f3\u30c6\u30ca\u306e\u5b9a\u7fa9\u3092\u66f8\u304d\u307e\u3059\u3002\n\n```ts:inversify.config.ts\nimport { Container } from 'inversify'\nimport getDecorators from 'inversify-inject-decorators'\nimport { Actions } from './actions'\n\nconst container = new Container()\ncontainer.bind(Actions).toSelf()   // \u2605\n\nexport const { lazyInject } = getDecorators(container)  // \u2605\n```\n\n`Actions`\u30c8\u30fc\u30af\u30f3\u306b`Actions`\u30af\u30e9\u30b9\u81ea\u8eab\u3092bind\u3057\u307e\u3059\u3002\n\n`inversify-inject-decorators`\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066`lazyInject`\u3068\u3044\u3046\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092export\u3057\u3066\u3044\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\n---\n\nReact\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3088\u3046\u3084\u304f\u4eca\u65e5\u4e00\u756a\u8a71\u3057\u305f\u304b\u3063\u305f`@lazyInject(Actions) actions: Actions`\u304c\u767b\u5834\u3057\u307e\u3057\u305f\u3002\n\n```ts:App.ts\nimport { lazyInject } from './inversify.config'\nimport { Actions } from './actions'\n\nexport class App extends React.Component<{}, {}> {\n  @lazyInject(Actions) actions: Actions   // \u2605 constructor\u3067\u3059\u3089\u306a\u3044\n\n  goo(event): void {\n    this.setState({ janken: this.actions.goo() })\n  }\n\n  choki(event): void {\n    this.setState({ janken: this.actions.choki() })\n  }\n\n  paa(event): void {\n    this.setState({ janken: this.actions.paa() })\n  }\n\n  random(event): void {\n    const random = Math.random()\n    if (random > 0.66) {\n      this.goo(event)\n    } else if (random > 0.33) {\n      this.choki(event)\n    } else {\n      this.paa(event)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={(e) => this.goo(e)}>\u30b0\u30fc</button>\n        <button onClick={(e) => this.choki(e)}>\u30c1\u30e7\u30ad</button>\n        <button onClick={(e) => this.paa(e)}>\u30d1\u30fc</button>\n        <button onClick={(e) => this.random(e)}>\u30e9\u30f3\u30c0\u30e0</button>\n        <h1>{this.state.janken}</h1>\n      </div>\n    )\n  }\n}\n```\n\n---\n\n(\u6539\u884c\u3057\u3066\u3082\u3057\u306a\u304f\u3066\u3082\u3069\u3061\u3089\u3067\u3082\u826f\u3044)\n\n```ts\n  @lazyInject(Actions) actions: Actions\n```\n\n```ts\n  @lazyInject(Actions) \n  actions: Actions\n```\n\n\u610f\u5473: `Actions`\u30c8\u30fc\u30af\u30f3\u306b`Actions`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092Inject\u3059\u308b\u3002\u305f\u3060\u3057**\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u3067\u306f\u306a\u304f\u5b9f\u884c\u6642\u306bInject\u3055\u308c\u308b\u3002** \n\n(\u8ffd\u8a18)...\u3068\u601d\u3063\u305f\u3051\u3069`constructor`\u306e\u4e2d\u3067`this.actions`\u3092\u53c2\u7167\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306f\u306a\u3089\u306a\u3044\u306e\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u3046\u307e\u3044\u3053\u3068Inject\u3057\u3066\u308b\u306e\u304b\u3082\u3002\n\n---\n\nQ: lazy\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\uff1f\n\nA: \u672c\u6765\u3067\u3042\u308c\u3070`container.get(App)`\u306e\u3088\u3046\u306bInversifyJS\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u63e1\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u304c\u3001React\u304c\u63e1\u3063\u3066\u3044\u308b\u305f\u3081\u4ed5\u65b9\u306a\u304f\u5f8c\u304b\u3089Inject\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n---\n\nREADME\u306b\u3082\u3053\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n> Some frameworks and libraries take control over the creation of instances of a given class. For example, React takes control over the creation of instances of a given React component. This kind of frameworks and libraries prevent us from being able to use constructor injection and as a result they are not easy to integrate with InversifyJS.\n\n> \u3044\u304f\u3064\u304b\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001React\u306f\u4e0e\u3048\u3089\u308c\u305fReact\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\u3053\u306e\u7a2e\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u305f\u3081\u3001InversifyJS\u3068\u306e\u7d71\u5408\u304c\u5bb9\u6613\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n---\n\n## React\u3067\u3082Angular\u306e\u3088\u3046\u306bDI\u3067\u304d\u308b:raised_hands:\n\n---\n\n## Angular\u4f7f\u304a\u3046:raised_hands:\n\n---\n\n### Thanks!\n", "tags": ["InversifyJS", "reactjs", "React", "Angular2", "angular"]}