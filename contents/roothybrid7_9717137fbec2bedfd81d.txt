{"context": " More than 1 year has passed since last update.\n\n\u7279\u5fb4\n\n\nconftest.py\u3092\u4f7f\u3063\u3066\u3001\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b(\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u6bce\u306b\u4f5c\u6210\u53ef\u80fd)\nhook\u6a5f\u80fd\u304c\u8c4a\u5bcc\n\n\nDI\u3063\u307d\u3044\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3001\u30c6\u30b9\u30c8\u95a2\u6570\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u3068\u53d6\u5f97\u306b\u4f7f\u3063\u305f\u308a\n\n\n\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u3063\u3066\u3001\u30c6\u30b9\u30c8\u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u53ef\u80fd\n\n\n\u4e8b\u524d\u8a2d\u5b9a\u5024\u3092\u6e21\u3057\u305f\u308a\u3001\u30c6\u30b9\u30c8\u306e\u671f\u5f85\u5024\u306a\u3069\u3092\u6e21\u3059\n\n\n\n\nunittest\u306e\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u3089\u306a\u304f\u3066\u3082\u3088\u3044\n\u7d50\u679c\u51fa\u529b\u304c\u898b\u3084\u3059\u3044\n\u30a2\u30d7\u30ea\u30ea\u30ea\u30fc\u30b9\u6642\u306b\u6a5f\u80fd\u3092\u524a\u3063\u305f\u308a\u3001\u898b\u9001\u3063\u305f\u308a\u3057\u305f\u6642\u306b\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u306e\u304c\u7c21\u5358\u3002\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3054\u3068\u306bconftest.py\u3092\u66f8\u304f\u3068\u306f\u3001\u3053\u3046\u3044\u3046\u3053\u3068\u3067\u3059\u3002\ntests\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 event\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n|   |\u2500\u2500 conftest.py         # \u5171\u901a\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 battle_event_1207\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py     # \u671f\u9593\u9650\u5b9a\u30a4\u30d9\u30f3\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test_event.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 battle_event_1213\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 conftest.py     # \u3082\u3046\u4e00\u500b\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test_event.py\n\u2514\u2500\u2500 logics\n    \u2514\u2500\u2500 __init__.py\n\n\n\u3069\u3046\u4f7f\u3063\u3066\u3044\u308b\u304b\nWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306fFlask\u3092\u4f7f\u3063\u3066\u307e\u3059\n\nModel\u306e\u30ed\u30b8\u30c3\u30af\u90e8\u5206\u306e\u30c6\u30b9\u30c8(\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306f\u9664\u304f:\u30b3\u30df\u30c3\u30c8\u3057\u306a\u3044\u304bMock\u3092\u4f7f\u3046)\n\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u90e8\u5206\u306e\u30c6\u30b9\u30c8\n\n\n\u4f7f\u3063\u3066\u306a\u3044\u90e8\u5206\n\u30a2\u30d7\u30ea\u4ed5\u69d8\u3092\u628a\u63e1\u3057\u305f\u308a\u3001Web\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af/\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4f7f\u3044\u65b9\u3092\u899a\u3048\u306a\u3044\u3068\u7121\u7406\u306a\u3068\u3053\u308d\n\nController\u306a\u3069\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7d61\u3093\u3060\u308a\u3001\u8de8\u3044\u3060\u308a\u3059\u308b\u90e8\u5206\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\u7528\u610f\u3057\u306a\u3044\u3068\u30c0\u30e1\u306a\u90e8\u5206\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u7d61\u3080\u90e8\u5206\n\nWeb Test\u3068\u304bFlask\u306e\u7d44\u307f\u8fbc\u307fTest\u3092\u4f7f\u3046\u304b\u691c\u8a0e\u4e2d\n\n\u30b5\u30f3\u30d7\u30eb\n\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u304b\u521d\u671f\u5316\u3068\u304b\u3092\u884c\u3046\u3068\u3044\u3044\u3088\u3046\u3067\u3059\u3002conftest.py\u3068\u3044\u3046\u540d\u524d\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308c\u3070\u3001pytest\u3067\u52dd\u624b\u306b\u8aad\u307f\u8fbc\u3093\u3067\u304f\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001pytest_\u3067\u59cb\u307e\u308b\u95a2\u6570\u306f\u7279\u6b8a\u306a\u95a2\u6570\u3067\u3001\u4e3b\u306b\u3001pytest_funcarg__xxxx(request)\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u30c6\u30b9\u30c8\u95a2\u6570\u306b\u4f9d\u5b58\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u3069\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c6\u30b9\u30c8\u95a2\u6570\u5074\u3067\u306f\u3001xxxx\u306e\u540d\u524d\u3092\u6301\u3064\u5f15\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u305d\u3053\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\n\nconftest.py\n# coding: utf-8\n\"\"\"battle_event_1213 bootstrap.\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5171\u901a\u51e6\u7406\n\u30c6\u30b9\u30c8\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u4f5c\u6210\u7b49\n\n\"\"\"\n\nfrom datetime import datetime, timedelta\n\n\ndef pytest_report_header(config):\n    \"\"\" \u30c6\u30b9\u30c8\u30ec\u30dd\u30fc\u30c8\u30d8\u30c3\u30c0\n    \"\"\"\n    return \"battle_event_1213 \u30c6\u30b9\u30c8\"\n\n\ndef get_time_subtract_by_delta(seconds):\n    return datetime.now() + timedelta(seconds=-1 * seconds)\n\n\n#def pytest_addoption(parser):\n#    parser.addoption('--ssh', action='store', default=None, help='specify ssh host to run tests with')\n\n\nclass MySetup(object):\n    \"\"\"Factory\u3092\u3053\u3053\u306b\u8a18\u8ff0\n    \"\"\"\n    def getEventCls(self):\n        from event_models.battle_event_1213 import Event\n        return Event\n\n    def makeEvent(self, *args, **kwargs):\n        return self.getEventCls()(*args, **kwargs)\n\n\ndef pytest_funcarg__mysetup(request):\n    \"\"\"DI(\u4f9d\u5b58\u6027\u6ce8\u5165)\n    \u30c6\u30b9\u30c8\u95a2\u6570/\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b`mysetup`\u3092\u6307\u5b9a\u3059\u308b\n    \"\"\"\n    return MySetup()\n\n\ndef pytest_funcarg__event(request):\n    return MySetup().makeEvent()\n\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\npytest.mark.skipif\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u3046\u3068\u3001\u6761\u4ef6\u304c\u771f\u306e\u3068\u304d\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u3082\u3046\u524a\u9664\u3057\u305f\u6a5f\u80fd\u3060\u3051\u3069\u3001\u4e00\u5fdc\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3060\u3051\u6b8b\u3057\u3066\u304a\u3044\u305f\u308a\u3001\u671f\u9593\u9650\u5b9a\u306e\u6a5f\u80fd\u306f\u3001\u6709\u52b9\u671f\u9650\u3092\u6307\u5b9a\u3057\u3066\u6642\u9593\u304c\u6765\u305f\u3089\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3068\u3044\u3046\u4f7f\u3044\u65b9\u3092\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\u5074\u3067\u3001pytest_funcarg__event(request)\u3068\u3044\u3046\u95a2\u6570\u3067\u8fd4\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001event\u5f15\u6570\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\u30c6\u30b9\u30c8\u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u57fa\u672c\u6700\u521d\u304b\u3089\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u30c6\u30b9\u30c8\u3057\u305f\u3044\u306e\u3067\u3001conftest.py\u3092\u4f7f\u3048\u3070\u308f\u3056\u308f\u3056\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u5074\u3067\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u624b\u9593\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001pytest.mark.parametrize\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u3063\u3066\u3001\u5165\u529b\u5024\u3084\u671f\u5f85\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30b9\u30c8\u95a2\u6570/\u30e1\u30bd\u30c3\u30c9\u3092\u7e70\u308a\u8fd4\u3057\u8a18\u8ff0\u3059\u308b\u624b\u9593\u3092\u306a\u304f\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002pytest_funcarg__xxxx(request)\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u95a2\u6570\u306e\u5f15\u6570\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\n\ntest_event.py\n# coding: utf-8\nimport pytest\nfrom datetime import datetime\n\n\n# \u30c6\u30b9\u30c8\u6709\u52b9\u671f\u9593\nis_timeout_event = datetime.now() > datetime(2012,12,19,23,59)\ncheck_event_period = pytest.mark.skipif('%s' % is_timeout_event)\n\n# \u30c6\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\nEXCEEDED_GAUGE = 140\nMAX_GAUGE = 100\nMAX_ATTACK_PT = 4\n\n\n# skipif\u306b\u4f55\u304b\u6587\u5b57\u3092\u5165\u308c\u308c\u3070\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b(\u30c0\u30e1\u306a\u6a5f\u80fd\u3092\u6d88\u3057\u305f\u306e\u3067\u30c6\u30b9\u30c8\u30b9\u30ad\u30c3\u30d7\u3059\u308b)\n@pytest.mark.skipif('\"\u30b2\u30fc\u30b8\u306f\u3059\u3054\u3044\u30b2\u30fc\u30b8\u3092\u4f7f\u3046\u306e\u3067\u3053\u306e\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\"')\nclass TestEventDame(object):\n    @pytest.mark.parametrize('prop', [\n        'dame_gauge',\n    ])\n    def test_exists_properties(self, event, prop):\n        assert hasattr(event, prop)\n\n    @pytest.mark.parametrize(('input_val', 'set_val', 'mode'), [\n        (0, 0, False),\n        (1, 1, False),\n        (MAX_GAUGE, MAX_GAUGE, True),\n        (EXCEEDED_GAUGE, MAX_GAUGE, True),\n    ])\n    def test_update_dame_gauge(self, event, input_val, set_val, mode):\n        event.update_dame_gauge(input_val)\n        assert event.dame_gauge == set_val\n        assert event.is_dame() is mode\n\n    @pytest.mark.parametrize(('value', 'expected'), [\n        (0, 0),\n        (1, 1),\n        (2, 2),\n        (3, 3),\n        (4, 6),\n    ])\n    def test_get_attack_pt_effect(self, event, value, expected):\n        result = event.get_attack_pt_effect(value)\n        assert result == expected\n\n\n# \u671f\u9593\u7d42\u4e86\u3057\u305f\u3089\u3001\u3053\u306e\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\n@check_event_period\nclass TestEventSugoiGauge(object):\n    @pytest.mark.parametrize('prop', [\n        'attack_pt',\n        'current_use_attack_pt',\n        'update_datetime',\n        '_use_full_attack_pt_count',\n        '_use_full_attack_pt_count_with_win',\n    ])\n    def test_exists_properties(self, event, prop):\n        assert hasattr(event, prop)\n\n    @pytest.mark.parametrize(('value', 'expected'), [\n        (0, False),\n        (1, False),\n        (2, False),\n        (3, False),\n        (4, True),\n    ])\n    def test_is_max_attack_pt(self, event, value, expected):\n        assert event.is_max_attack_pt(value) is expected\n\n    @pytest.mark.parametrize(('value', 'expected'), [\n        (0, 1),\n        (1, 2),\n        (9, 10),\n    ])\n    def test_inc_use_full_attack_pt_count(self, event, value, expected):\n        event._use_full_attack_pt_count = value\n        event._use_full_attack_pt_count_with_win = value\n        event.inc_use_full_attack_pt_count()\n        event.inc_use_full_attack_pt_count_with_win()\n        assert event._use_full_attack_pt_count == expected\n        assert event._use_full_attack_pt_count_with_win == expected\n\n    @pytest.mark.parametrize(('value', 'win_flag', 'expected', 'win_expected'), [\n        (0, True, 0, 0),\n        (1, True, 0, 0),\n        (3, True, 0, 0),\n        (MAX_ATTACK_PT, False, 1, 0),\n        (MAX_ATTACK_PT, True, 1, 1),\n    ])\n    def test_set_use_full_attack_pt(self, event, value, win_flag, expected, win_expected):\n        event.set_use_full_attack_pt(value, is_win=win_flag)\n        assert event._use_full_attack_pt_count == expected\n        assert event._use_full_attack_pt_count_with_win == win_expected\n\n\nif __name__ == '__main__':\n    pytest.main()\n\n\n\n\u7d50\u8ad6\nunittest\u306b\u306f\u623b\u308c\u306a\u3044\n\n\u53c2\u8003\n\npytest \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u7ffb\u8a33\u3057\u307e\u3057\u305f\nPytest\u3078\u3088\u3046\u3053\u305d\n\n\n##\u7279\u5fb4\n\n- `conftest.py`\u3092\u4f7f\u3063\u3066\u3001\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b(\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u6bce\u306b\u4f5c\u6210\u53ef\u80fd)\n- hook\u6a5f\u80fd\u304c\u8c4a\u5bcc\n\t- DI\u3063\u307d\u3044\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3001\u30c6\u30b9\u30c8\u95a2\u6570\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n\t\t- \u30c6\u30b9\u30c8\u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u3068\u53d6\u5f97\u306b\u4f7f\u3063\u305f\u308a\n\t- \u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u3063\u3066\u3001\u30c6\u30b9\u30c8\u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u53ef\u80fd\n\t\t- \u4e8b\u524d\u8a2d\u5b9a\u5024\u3092\u6e21\u3057\u305f\u308a\u3001\u30c6\u30b9\u30c8\u306e\u671f\u5f85\u5024\u306a\u3069\u3092\u6e21\u3059\n- unittest\u306e\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u3089\u306a\u304f\u3066\u3082\u3088\u3044\n- \u7d50\u679c\u51fa\u529b\u304c\u898b\u3084\u3059\u3044\n- \u30a2\u30d7\u30ea\u30ea\u30ea\u30fc\u30b9\u6642\u306b\u6a5f\u80fd\u3092\u524a\u3063\u305f\u308a\u3001\u898b\u9001\u3063\u305f\u308a\u3057\u305f\u6642\u306b\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u306e\u304c\u7c21\u5358\u3002\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3054\u3068\u306b`conftest.py`\u3092\u66f8\u304f\u3068\u306f\u3001\u3053\u3046\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\n```\ntests\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 event\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n|   |\u2500\u2500 conftest.py         # \u5171\u901a\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 battle_event_1207\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py     # \u671f\u9593\u9650\u5b9a\u30a4\u30d9\u30f3\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test_event.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 battle_event_1213\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 conftest.py     # \u3082\u3046\u4e00\u500b\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test_event.py\n\u2514\u2500\u2500 logics\n    \u2514\u2500\u2500 __init__.py\n```\n\n\n##\u3069\u3046\u4f7f\u3063\u3066\u3044\u308b\u304b\n\n__Web\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306fFlask\u3092\u4f7f\u3063\u3066\u307e\u3059__\n\n- Model\u306e\u30ed\u30b8\u30c3\u30af\u90e8\u5206\u306e\u30c6\u30b9\u30c8(\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306f\u9664\u304f:\u30b3\u30df\u30c3\u30c8\u3057\u306a\u3044\u304bMock\u3092\u4f7f\u3046)\n- \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u90e8\u5206\u306e\u30c6\u30b9\u30c8\n\n##\u4f7f\u3063\u3066\u306a\u3044\u90e8\u5206\n\n\u30a2\u30d7\u30ea\u4ed5\u69d8\u3092\u628a\u63e1\u3057\u305f\u308a\u3001Web\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af/\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4f7f\u3044\u65b9\u3092\u899a\u3048\u306a\u3044\u3068\u7121\u7406\u306a\u3068\u3053\u308d\n\n- Controller\u306a\u3069\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7d61\u3093\u3060\u308a\u3001\u8de8\u3044\u3060\u308a\u3059\u308b\u90e8\u5206\n- \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\u7528\u610f\u3057\u306a\u3044\u3068\u30c0\u30e1\u306a\u90e8\u5206\n- \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u7d61\u3080\u90e8\u5206\n\n_Web Test\u3068\u304bFlask\u306e\u7d44\u307f\u8fbc\u307fTest\u3092\u4f7f\u3046\u304b\u691c\u8a0e\u4e2d_\n\n##\u30b5\u30f3\u30d7\u30eb\n\n###\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u304b\u521d\u671f\u5316\u3068\u304b\u3092\u884c\u3046\u3068\u3044\u3044\u3088\u3046\u3067\u3059\u3002`conftest.py`\u3068\u3044\u3046\u540d\u524d\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308c\u3070\u3001pytest\u3067\u52dd\u624b\u306b\u8aad\u307f\u8fbc\u3093\u3067\u304f\u308c\u307e\u3059\u3002\n\n\u307e\u305f\u3001`pytest_`\u3067\u59cb\u307e\u308b\u95a2\u6570\u306f\u7279\u6b8a\u306a\u95a2\u6570\u3067\u3001\u4e3b\u306b\u3001`pytest_funcarg__xxxx(request)`\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u30c6\u30b9\u30c8\u95a2\u6570\u306b\u4f9d\u5b58\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u3069\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c6\u30b9\u30c8\u95a2\u6570\u5074\u3067\u306f\u3001`xxxx`\u306e\u540d\u524d\u3092\u6301\u3064\u5f15\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u305d\u3053\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\n\n\n```conftest.py\n# coding: utf-8\n\"\"\"battle_event_1213 bootstrap.\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5171\u901a\u51e6\u7406\n\u30c6\u30b9\u30c8\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u4f5c\u6210\u7b49\n\n\"\"\"\n\nfrom datetime import datetime, timedelta\n\n\ndef pytest_report_header(config):\n    \"\"\" \u30c6\u30b9\u30c8\u30ec\u30dd\u30fc\u30c8\u30d8\u30c3\u30c0\n    \"\"\"\n    return \"battle_event_1213 \u30c6\u30b9\u30c8\"\n\n\ndef get_time_subtract_by_delta(seconds):\n    return datetime.now() + timedelta(seconds=-1 * seconds)\n\n\n#def pytest_addoption(parser):\n#    parser.addoption('--ssh', action='store', default=None, help='specify ssh host to run tests with')\n\n\nclass MySetup(object):\n    \"\"\"Factory\u3092\u3053\u3053\u306b\u8a18\u8ff0\n    \"\"\"\n    def getEventCls(self):\n        from event_models.battle_event_1213 import Event\n        return Event\n\n    def makeEvent(self, *args, **kwargs):\n        return self.getEventCls()(*args, **kwargs)\n\n\ndef pytest_funcarg__mysetup(request):\n    \"\"\"DI(\u4f9d\u5b58\u6027\u6ce8\u5165)\n    \u30c6\u30b9\u30c8\u95a2\u6570/\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b`mysetup`\u3092\u6307\u5b9a\u3059\u308b\n    \"\"\"\n    return MySetup()\n\n\ndef pytest_funcarg__event(request):\n    return MySetup().makeEvent()\n\n```\n\n###\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n`pytest.mark.skipif`\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u3046\u3068\u3001\u6761\u4ef6\u304c\u771f\u306e\u3068\u304d\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u3082\u3046\u524a\u9664\u3057\u305f\u6a5f\u80fd\u3060\u3051\u3069\u3001\u4e00\u5fdc\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3060\u3051\u6b8b\u3057\u3066\u304a\u3044\u305f\u308a\u3001\u671f\u9593\u9650\u5b9a\u306e\u6a5f\u80fd\u306f\u3001\u6709\u52b9\u671f\u9650\u3092\u6307\u5b9a\u3057\u3066\u6642\u9593\u304c\u6765\u305f\u3089\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3068\u3044\u3046\u4f7f\u3044\u65b9\u3092\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30b3\u30fc\u30c9\u5074\u3067\u3001`pytest_funcarg__event(request)`\u3068\u3044\u3046\u95a2\u6570\u3067\u8fd4\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001`event`\u5f15\u6570\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\u30c6\u30b9\u30c8\u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u57fa\u672c\u6700\u521d\u304b\u3089\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u30c6\u30b9\u30c8\u3057\u305f\u3044\u306e\u3067\u3001`conftest.py`\u3092\u4f7f\u3048\u3070\u308f\u3056\u308f\u3056\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u5074\u3067\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u624b\u9593\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001`pytest.mark.parametrize`\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u3063\u3066\u3001\u5165\u529b\u5024\u3084\u671f\u5f85\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30b9\u30c8\u95a2\u6570/\u30e1\u30bd\u30c3\u30c9\u3092\u7e70\u308a\u8fd4\u3057\u8a18\u8ff0\u3059\u308b\u624b\u9593\u3092\u306a\u304f\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002`pytest_funcarg__xxxx(request)`\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u95a2\u6570\u306e\u5f15\u6570\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\n\n\n```test_event.py\n# coding: utf-8\nimport pytest\nfrom datetime import datetime\n\n\n# \u30c6\u30b9\u30c8\u6709\u52b9\u671f\u9593\nis_timeout_event = datetime.now() > datetime(2012,12,19,23,59)\ncheck_event_period = pytest.mark.skipif('%s' % is_timeout_event)\n\n# \u30c6\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\nEXCEEDED_GAUGE = 140\nMAX_GAUGE = 100\nMAX_ATTACK_PT = 4\n\n\n# skipif\u306b\u4f55\u304b\u6587\u5b57\u3092\u5165\u308c\u308c\u3070\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b(\u30c0\u30e1\u306a\u6a5f\u80fd\u3092\u6d88\u3057\u305f\u306e\u3067\u30c6\u30b9\u30c8\u30b9\u30ad\u30c3\u30d7\u3059\u308b)\n@pytest.mark.skipif('\"\u30b2\u30fc\u30b8\u306f\u3059\u3054\u3044\u30b2\u30fc\u30b8\u3092\u4f7f\u3046\u306e\u3067\u3053\u306e\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\"')\nclass TestEventDame(object):\n    @pytest.mark.parametrize('prop', [\n        'dame_gauge',\n    ])\n    def test_exists_properties(self, event, prop):\n        assert hasattr(event, prop)\n\n    @pytest.mark.parametrize(('input_val', 'set_val', 'mode'), [\n        (0, 0, False),\n        (1, 1, False),\n        (MAX_GAUGE, MAX_GAUGE, True),\n        (EXCEEDED_GAUGE, MAX_GAUGE, True),\n    ])\n    def test_update_dame_gauge(self, event, input_val, set_val, mode):\n        event.update_dame_gauge(input_val)\n        assert event.dame_gauge == set_val\n        assert event.is_dame() is mode\n\n    @pytest.mark.parametrize(('value', 'expected'), [\n        (0, 0),\n        (1, 1),\n        (2, 2),\n        (3, 3),\n        (4, 6),\n    ])\n    def test_get_attack_pt_effect(self, event, value, expected):\n        result = event.get_attack_pt_effect(value)\n        assert result == expected\n\n\n# \u671f\u9593\u7d42\u4e86\u3057\u305f\u3089\u3001\u3053\u306e\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\n@check_event_period\nclass TestEventSugoiGauge(object):\n    @pytest.mark.parametrize('prop', [\n        'attack_pt',\n        'current_use_attack_pt',\n        'update_datetime',\n        '_use_full_attack_pt_count',\n        '_use_full_attack_pt_count_with_win',\n    ])\n    def test_exists_properties(self, event, prop):\n        assert hasattr(event, prop)\n\n    @pytest.mark.parametrize(('value', 'expected'), [\n        (0, False),\n        (1, False),\n        (2, False),\n        (3, False),\n        (4, True),\n    ])\n    def test_is_max_attack_pt(self, event, value, expected):\n        assert event.is_max_attack_pt(value) is expected\n\n    @pytest.mark.parametrize(('value', 'expected'), [\n        (0, 1),\n        (1, 2),\n        (9, 10),\n    ])\n    def test_inc_use_full_attack_pt_count(self, event, value, expected):\n        event._use_full_attack_pt_count = value\n        event._use_full_attack_pt_count_with_win = value\n        event.inc_use_full_attack_pt_count()\n        event.inc_use_full_attack_pt_count_with_win()\n        assert event._use_full_attack_pt_count == expected\n        assert event._use_full_attack_pt_count_with_win == expected\n\n    @pytest.mark.parametrize(('value', 'win_flag', 'expected', 'win_expected'), [\n        (0, True, 0, 0),\n        (1, True, 0, 0),\n        (3, True, 0, 0),\n        (MAX_ATTACK_PT, False, 1, 0),\n        (MAX_ATTACK_PT, True, 1, 1),\n    ])\n    def test_set_use_full_attack_pt(self, event, value, win_flag, expected, win_expected):\n        event.set_use_full_attack_pt(value, is_win=win_flag)\n        assert event._use_full_attack_pt_count == expected\n        assert event._use_full_attack_pt_count_with_win == win_expected\n\n\nif __name__ == '__main__':\n    pytest.main()\n```\n\n##\u7d50\u8ad6\nunittest\u306b\u306f\u623b\u308c\u306a\u3044\n\n##\u53c2\u8003\n\n- [pytest \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u7ffb\u8a33\u3057\u307e\u3057\u305f](http://d.hatena.ne.jp/t2y-1979/20120608/1339092961)\n\n- [Pytest\u3078\u3088\u3046\u3053\u305d](http://pytest.org/latest-ja/)", "tags": ["Python", "TDD"]}