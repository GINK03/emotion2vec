{"context": "Nuget\u3092\u898b\u308c\u3070CSVHelper\u3068\u304b\u4fbf\u5229\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3061\u3087\u3068\u81ea\u524d\u3067\u3084\u3089\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u304b\u3063\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u51e6\u7406\u5185\u5bb9\u306f\u300cPerl\u6b63\u898f\u8868\u73fe\u96d1\u6280\u300d\u3068\u3044\u3046\u30b5\u30a4\u30c8\u304b\u3089\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u611f\u8b1d \n\n\u6982\u8981\nStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001CSV\u30921\u30ec\u30b3\u30fc\u30c9\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n\u7279\u9577\n\n\u5024\u4e2d\u306b\u3042\u308b\u30ab\u30f3\u30de\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002  \"a,a\" ===> a,a\n\u5024\u4e2d\u306b\u3042\u308b\u30a8\u30b9\u30b1\u30fc\u30d7\u3055\u308c\u305f\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \"a,\"\",a\" ===> a,\",a\n\u5024\u4e2d\u306b\u3042\u308b\u6539\u884c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\u4f7f\u3044\u65b9\n// \u3069\u3053\u304b\u306bStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3057\u3066\nusing (var reader = new CSVReader(stream)) {\n    while (!reader.EndOfStream) {\n        var record = reader.ReadLine();\n        // \u3053\u3053\u3067\u8272\u3005\u697d\u3057\u3044\u3053\u3068\u3092\u3059\u308b\n    }\n}\n\n\n\u30bd\u30fc\u30b9\n\nCSVReader.cs\n    /// <summary>\n    /// generic CSV reader\n    /// </summary>\n    public class CSVReader : IDisposable\n    {\n        private static readonly string END_OF_FILE = \"\\x1a\";\n        private static readonly string DELIMITER = \"\\\"\";\n        private readonly StreamReader _reader;\n\n        public CSVReader(Stream inputStream, Encoding encoding)\n        {\n            _reader = new StreamReader(inputStream, encoding);\n        }\n\n        public IEnumerable<string> ReadLine()\n        {\n            var line = ReadSemanticLine();\n\n            if (line == null)\n            {\n                return null;\n            }\n\n            line = TrimRight(line);\n            line += \",\";\n\n            var matches = Regex.Matches(line, \"(\\\"[^\\\"]*(?:\\\"\\\"[^\\\"]*)*\\\"|[^,]*),\");\n\n            return matches.Cast<Match>().Select(x => Dequote(x));\n        }\n\n        public bool EndOfStream\n        {\n            get\n            {\n                return _reader.EndOfStream;\n            }\n        }\n\n        private String TrimRight(string src)\n        {\n            return Regex.Replace(src, \"(?:\\x0D\\x0A|[\\x0D\\x0A])?$\", \"\", RegexOptions.Singleline);\n        }\n\n        private string Dequote(Match match)\n        {\n            var s = match.Groups[1].Value;\n            var quoted = Regex.Match(s, \"^\\\"(.*)\\\"$\", RegexOptions.Singleline);\n\n            if (quoted.Success)\n            {\n                return quoted.Groups[1].Value.Replace(\"\\\"\\\"\", \"\\\"\");\n            }\n            else\n            {\n                return s;\n            }\n        }\n\n        private string ReadSemanticLine()\n        {\n            if (_reader.EndOfStream)\n            {\n                return null;\n            }\n\n            var line = _reader.ReadLine();\n\n            if (line == null | line == END_OF_FILE || line.Length == 0)\n            {\n                return null;\n            }\n\n            while (!HasEnoughQuote(line) && !_reader.EndOfStream)\n            {\n                // Complete missing line break.\n                line += \"\\n\" + _reader.ReadLine();\n            }\n\n            return line;\n        }\n\n        private bool HasEnoughQuote(string line)\n        {\n            return (Regex.Matches(line, DELIMITER).Count % 2) == 0;\n        }\n\n\n        #region IDisposable Support\n        private bool disposedValue = false; // To detect redundant calls\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!disposedValue)\n            {\n                if (disposing)\n                {\n                    if (_reader != null)\n                    {\n                        _reader.Dispose();\n                    }\n                }\n\n                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.\n                // TODO: set large fields to null.\n\n                disposedValue = true;\n            }\n        }\n\n        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.\n        // ~CSVReader() {\n        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.\n        //   Dispose(false);\n        // }\n\n        // This code added to correctly implement the disposable pattern.\n        public void Dispose()\n        {\n            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.\n            Dispose(true);\n            // TODO: uncomment the following line if the finalizer is overridden above.\n            // GC.SuppressFinalize(this);\n        }\n        #endregion\n\n\n    }\n\n\n\n\u30c6\u30b9\u30c8\n\nCSVReaderTests.cs\n    [TestClass]\n    public class CSVReaderTests\n    {\n\n        [TestMethod]\n        public void TestReadLineReturnsSimpleResult()\n        {\n            var csvsample = \"a,\\\"b\\\",c\\r\\nd,e,\\r\\n\";\n\n            using (var instance = CreateInstance(csvsample))\n            {\n                var result = instance.ReadLine();\n\n                Check.That(result).HasSize(3);\n                Check.That(result).ContainsExactly(\"a\", \"b\", \"c\");\n\n                result = instance.ReadLine();\n\n                Check.That(result).HasSize(3);\n                Check.That(result).ContainsExactly(\"d\", \"e\", \"\");\n            }\n        }\n\n        [TestMethod]\n        public void TestReadLineTreatMultilieCsv()\n        {\n            var csvsample = \"a,b,\\\"c\\n\\nc\\\"\\r\\n\";\n\n            using (var instance = CreateInstance(csvsample))\n            {\n                var result = instance.ReadLine();\n\n                Check.That(result).HasSize(3);\n                Check.That(result).ContainsExactly(\"a\", \"b\", \"c\\n\\nc\");\n            }\n\n        }\n\n        [TestMethod]\n        public void TestReadLineUnescapeQuote()\n        {\n            var csvsample = \"\\\"a,a\\\",\\\"b,\\\"\\\"c\\\"\\r\\n\";\n\n            using (var instance = CreateInstance(csvsample))\n            {\n                var result = instance.ReadLine();\n\n                Check.That(result).HasSize(2);\n                Check.That(result).ContainsExactly(\"a,a\", \"b,\\\"c\");\n            }\n        }\n\n\n        [TestMethod]\n        public void TestEndOfStream()\n        {\n            var csvsample = \"a,b,c\\r\\na,b,c\\r\\n\";\n\n            using (var instance = CreateInstance(csvsample))\n            {\n                Check.That(instance.EndOfStream).IsFalse();\n\n                instance.ReadLine();\n\n                Check.That(instance.EndOfStream).IsFalse();\n\n                instance.ReadLine();\n\n                Check.That(instance.EndOfStream).IsTrue();\n            }\n\n        }\n\n        private CSVReader CreateInstance(string src)\n        {\n            return new CSVReader(CreateStream(src), Encoding.UTF8);\n        }\n\n        private Stream CreateStream(string src)\n        {\n            return new MemoryStream(Encoding.UTF8.GetBytes(src));\n        }\n    }\n\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\nPerl\u6b63\u898f\u8868\u73fe\u96d1\u6280\n\nNuget\u3092\u898b\u308c\u3070CSVHelper\u3068\u304b\u4fbf\u5229\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3061\u3087\u3068\u81ea\u524d\u3067\u3084\u3089\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u304b\u3063\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u51e6\u7406\u5185\u5bb9\u306f\u300c[Perl\u6b63\u898f\u8868\u73fe\u96d1\u6280](http://www.din.or.jp/~ohzaki/regex.htm)\u300d\u3068\u3044\u3046\u30b5\u30a4\u30c8\u304b\u3089\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u611f\u8b1d :smile:\n\n# \u6982\u8981\n\nStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001CSV\u30921\u30ec\u30b3\u30fc\u30c9\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n## \u7279\u9577\n\n* \u5024\u4e2d\u306b\u3042\u308b\u30ab\u30f3\u30de\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002  \"a,a\" ===> a,a\n* \u5024\u4e2d\u306b\u3042\u308b\u30a8\u30b9\u30b1\u30fc\u30d7\u3055\u308c\u305f\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \"a,\"\",a\" ===> a,\",a\n* \u5024\u4e2d\u306b\u3042\u308b\u6539\u884c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n# \u4f7f\u3044\u65b9\n\n```csharp:\n// \u3069\u3053\u304b\u306bStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3057\u3066\nusing (var reader = new CSVReader(stream)) {\n    while (!reader.EndOfStream) {\n        var record = reader.ReadLine();\n        // \u3053\u3053\u3067\u8272\u3005\u697d\u3057\u3044\u3053\u3068\u3092\u3059\u308b\n    }\n}\n```\n\n# \u30bd\u30fc\u30b9\n\n```csharp:CSVReader.cs\n    /// <summary>\n    /// generic CSV reader\n    /// </summary>\n    public class CSVReader : IDisposable\n    {\n        private static readonly string END_OF_FILE = \"\\x1a\";\n        private static readonly string DELIMITER = \"\\\"\";\n        private readonly StreamReader _reader;\n\n        public CSVReader(Stream inputStream, Encoding encoding)\n        {\n            _reader = new StreamReader(inputStream, encoding);\n        }\n\n        public IEnumerable<string> ReadLine()\n        {\n            var line = ReadSemanticLine();\n\n            if (line == null)\n            {\n                return null;\n            }\n\n            line = TrimRight(line);\n            line += \",\";\n\n            var matches = Regex.Matches(line, \"(\\\"[^\\\"]*(?:\\\"\\\"[^\\\"]*)*\\\"|[^,]*),\");\n\n            return matches.Cast<Match>().Select(x => Dequote(x));\n        }\n\n        public bool EndOfStream\n        {\n            get\n            {\n                return _reader.EndOfStream;\n            }\n        }\n\n        private String TrimRight(string src)\n        {\n            return Regex.Replace(src, \"(?:\\x0D\\x0A|[\\x0D\\x0A])?$\", \"\", RegexOptions.Singleline);\n        }\n\n        private string Dequote(Match match)\n        {\n            var s = match.Groups[1].Value;\n            var quoted = Regex.Match(s, \"^\\\"(.*)\\\"$\", RegexOptions.Singleline);\n\n            if (quoted.Success)\n            {\n                return quoted.Groups[1].Value.Replace(\"\\\"\\\"\", \"\\\"\");\n            }\n            else\n            {\n                return s;\n            }\n        }\n\n        private string ReadSemanticLine()\n        {\n            if (_reader.EndOfStream)\n            {\n                return null;\n            }\n\n            var line = _reader.ReadLine();\n\n            if (line == null | line == END_OF_FILE || line.Length == 0)\n            {\n                return null;\n            }\n\n            while (!HasEnoughQuote(line) && !_reader.EndOfStream)\n            {\n                // Complete missing line break.\n                line += \"\\n\" + _reader.ReadLine();\n            }\n\n            return line;\n        }\n\n        private bool HasEnoughQuote(string line)\n        {\n            return (Regex.Matches(line, DELIMITER).Count % 2) == 0;\n        }\n\n\n        #region IDisposable Support\n        private bool disposedValue = false; // To detect redundant calls\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!disposedValue)\n            {\n                if (disposing)\n                {\n                    if (_reader != null)\n                    {\n                        _reader.Dispose();\n                    }\n                }\n\n                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.\n                // TODO: set large fields to null.\n\n                disposedValue = true;\n            }\n        }\n\n        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.\n        // ~CSVReader() {\n        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.\n        //   Dispose(false);\n        // }\n\n        // This code added to correctly implement the disposable pattern.\n        public void Dispose()\n        {\n            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.\n            Dispose(true);\n            // TODO: uncomment the following line if the finalizer is overridden above.\n            // GC.SuppressFinalize(this);\n        }\n        #endregion\n\n\n    }\n```\n\n# \u30c6\u30b9\u30c8\n\n```csharp:CSVReaderTests.cs\n    [TestClass]\n    public class CSVReaderTests\n    {\n\n        [TestMethod]\n        public void TestReadLineReturnsSimpleResult()\n        {\n            var csvsample = \"a,\\\"b\\\",c\\r\\nd,e,\\r\\n\";\n\n            using (var instance = CreateInstance(csvsample))\n            {\n                var result = instance.ReadLine();\n\n                Check.That(result).HasSize(3);\n                Check.That(result).ContainsExactly(\"a\", \"b\", \"c\");\n\n                result = instance.ReadLine();\n\n                Check.That(result).HasSize(3);\n                Check.That(result).ContainsExactly(\"d\", \"e\", \"\");\n            }\n        }\n\n        [TestMethod]\n        public void TestReadLineTreatMultilieCsv()\n        {\n            var csvsample = \"a,b,\\\"c\\n\\nc\\\"\\r\\n\";\n\n            using (var instance = CreateInstance(csvsample))\n            {\n                var result = instance.ReadLine();\n\n                Check.That(result).HasSize(3);\n                Check.That(result).ContainsExactly(\"a\", \"b\", \"c\\n\\nc\");\n            }\n\n        }\n\n        [TestMethod]\n        public void TestReadLineUnescapeQuote()\n        {\n            var csvsample = \"\\\"a,a\\\",\\\"b,\\\"\\\"c\\\"\\r\\n\";\n\n            using (var instance = CreateInstance(csvsample))\n            {\n                var result = instance.ReadLine();\n\n                Check.That(result).HasSize(2);\n                Check.That(result).ContainsExactly(\"a,a\", \"b,\\\"c\");\n            }\n        }\n\n\n        [TestMethod]\n        public void TestEndOfStream()\n        {\n            var csvsample = \"a,b,c\\r\\na,b,c\\r\\n\";\n\n            using (var instance = CreateInstance(csvsample))\n            {\n                Check.That(instance.EndOfStream).IsFalse();\n\n                instance.ReadLine();\n\n                Check.That(instance.EndOfStream).IsFalse();\n\n                instance.ReadLine();\n\n                Check.That(instance.EndOfStream).IsTrue();\n            }\n\n        }\n\n        private CSVReader CreateInstance(string src)\n        {\n            return new CSVReader(CreateStream(src), Encoding.UTF8);\n        }\n\n        private Stream CreateStream(string src)\n        {\n            return new MemoryStream(Encoding.UTF8.GetBytes(src));\n        }\n    }\n```\n\n# \u53c2\u8003\u30b5\u30a4\u30c8\n\n* [Perl\u6b63\u898f\u8868\u73fe\u96d1\u6280](http://www.din.or.jp/~ohzaki/regex.htm)\n", "tags": ["C#", ".NET"]}