{"context": "\u95a2\u9023\u8a18\u4e8b : http://qiita.com/muzudho1/items/aaedf39c171738358003\n\u96d1\u306b\u8aac\u660e\u3059\u308b\u3002\nUbuntu16.04 \u3067 \u30d7\u30ed\u30bb\u30b9\uff21\u3000\u304c\u3000\u30d7\u30ed\u30bb\u30b9\uff22\u3000\u306b\u6587\u5b57\u5217\u3092\u9001\u308d\u3046\u3001\u3068\u3044\u3046\u3082\u306e\u3060\u3002\n\n\n\nFrom\nTo\nResult\n\n\n\n\nC++\nC#\nOK\n\n\nC#\nC++\nOK\n\n\nC#\nC#\nOK\n\n\nC#\nPHP\nOK\n\n\nPHP\nC++\nOK\n\n\nPHP\nC#\nOK\n\n\nPHP\nPHP\nOK\n\n\n\nC++\u3001C#\u3001PHP\u306e\u30ad\u30e5\u30fc\u306b\u5165\u308c\u308b\u3001\u51fa\u3059\u306f\u5358\u4f53\u30c6\u30b9\u30c8\u3067\u304d\u305f\u306e\u3067\u3001\u591a\u5206\u3001\u7d44\u307f\u5408\u308f\u305b\u306f\u5168\u90e8\u3044\u3051\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3002\n\nRabbitMQ \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\u300cInstalling on Debian / Ubuntu\u300d (RabbitMQ)\nhttps://www.rabbitmq.com/install-debian.html\nUbuntu \u3067\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u3044\u3051\u3070\u3044\u3044\u3002\necho 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list\n\nsudo apt-get update\n\nsudo apt-get install rabbitmq-server\n\ngpg --keyserver pgpkeys.mit.edu --recv-key 7638D0442B90D010\n\ngpg -a --export 7638D0442B90D010 | sudo apt-key add -\n\necho 'deb http://ftp.debian.org/debian wheezy-backports main' | sudo tee /etc/apt/sources.list.d/wheezy_backports.list\n\nwget -O- https://packages.erlang-solutions.com/debian/erlang_solutions.asc | sudo apt-key add -\n\necho 'deb https://packages.erlang-solutions.com/debian wheezy contrib' | sudo tee /etc/apt/sources.list.d/esl.list\n\nsudo apt-get update\n\nsudo apt-get install init-system-helpers socat esl-erlang\n\nwget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -\n\necho 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list\n\nsudo apt-get update\n\nsudo apt-get install rabbitmq-server\n\n\nRabbitMQ \u3092\u8d77\u52d5\u3059\u308b\nrabbitmq-server\n\n\u5099\u8003\uff1a\u3000\u505c\u6b62\u3057\u305f\u3044\u3068\u304d\u306f \u300crabbitmqctl stop\u300d\u3060\u3002\n\u30ad\u30fc\u30dc\u30fc\u30c9\u306e [Ctrl]+[Z] \u30ad\u30fc\u3092\u62bc\u3057\u3066\u6b62\u3081\u308b\n\nbg 1\n\n\u6570\u5b57\u306e 1 \u306e\u90e8\u5206\u306f rabbitmq-server \u306e\u30b8\u30e7\u30d6\u756a\u53f7\u3092\u5165\u308c\u308b\u3053\u3068\u3002\n\u3053\u308c\u3067\u3000RabbitMQ \u30b5\u30fc\u30d0\u30fc\u306f\u8d77\u3061\u4e0a\u304c\u3063\u305f\u3002\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306e\u6e96\u5099\u306f\u30aa\u30c3\u30b1\u30fc\u3060\u3002\n\n\u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\n\u6587\u5b57\u5217\u306e\u9001\u308a\u65b9\u306f\u3000\u3053\u306e\u3042\u3068\u8aac\u660e\u3059\u308b\u304c\u3001\n\u6587\u5b57\u5217\u3092\u9001\u308c\u305f\u304b\u3069\u3046\u304b\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3067\u304d\u308b\u3002\nrabbitmqctl list_queues\n\n\n\u30b5\u30f3\u30d7\u30eb\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\uff08C#\uff09\n\u6587\u5b57\u3092\u9001\u308b\u306e\u3068\u3001\u53d7\u3051\u53d6\u308b\u306e\u3092\u3000\u30c6\u30b9\u30c8\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n//--------------------------------------------------------------------------------\n// \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4f8b\n//\n// # \u30b3\u30f3\u30d1\u30a4\u30eb\n// mcs /r:RabbitMQ.Client.dll -define:UBUNTU MsgQueue.cs\n//\n// # \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\u3092\u8abf\u3079\u308b\n// rabbitmqctl list_queues\n//--------------------------------------------------------------------------------\n//\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Text;\n\nnamespace UsagiMQ\n{\n    /// <summary>\n    /// \u53c2\u7167 : \u300cQueueDeclare\u300d http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : \u300cEventingBasicConsumer\u300d https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : \u300cBasicConsume\u300d https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// </summary>\n    class Program\n    {\n        public const string\n            HOST_NAME = \"localhost\",\n            QUEUE_NAME = \"1111\";\n\n        public static ConnectionFactory GetFactory()\n        {\n            if(null== m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null==m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static IModel GetChannel()\n        {\n            if (null==m_channel_)\n            {\n                m_channel_ = GetConnection().CreateModel();\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channel_.QueueDeclare(QUEUE_NAME, false, false, false, false, false, null);\n#else\n                m_channel_.QueueDeclare(QUEUE_NAME, false, false, false, null);\n#endif\n            }\n            return m_channel_;\n        }\n        static IModel m_channel_;\n\n        public static EventingBasicConsumer GetConsumer()\n        {\n            if (null == m_consumer_)\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumer_ = new EventingBasicConsumer();\n#else\n                m_consumer_ = new EventingBasicConsumer(GetChannel());\n#endif\n\n            }\n            return m_consumer_;\n        }\n        static EventingBasicConsumer m_consumer_;\n\n        /// <summary>\n        /// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n        /// </summary>\n#if UBUNTU\n        public static BasicDeliverEventHandler GetReceiveHandler()\n#else\n        public static EventHandler<BasicDeliverEventArgs> GetReceiveHandler()\n#endif\n        {\n            if( null== m_eventHandler_ )\n            {\n#if UBUNTU\n                m_eventHandler_ = new BasicDeliverEventHandler((model, ea) =>\n#else\n                m_eventHandler_ = new EventHandler<BasicDeliverEventArgs>((model, ea) =>\n#endif\n                {\n                    byte[] body = ea.Body;\n                    string message = Encoding.UTF8.GetString(body);\n                    Console.WriteLine(\" [interrupt!] Dequeue(^q^) {0}\", message);\n                });\n            }\n\n            return m_eventHandler_;\n        }\n\n#if UBUNTU\n        static BasicDeliverEventHandler m_eventHandler_;\n#else\n        static EventHandler<BasicDeliverEventArgs> m_eventHandler_;\n#endif\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseConnection()\n        {\n            if (null != m_connection_)\n            {\n                m_connection_.Close();\n                m_connection_ = null;\n            }\n        }\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel()\n        {\n            if (null != m_channel_)\n            {\n                m_channel_.Close();\n                m_channel_ = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            for (;;)\n            {\n                Console.WriteLine(@\"\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\");\n\n                int category = 0;\n                for (;;)\n                {\n                    string line = Console.ReadLine();\n                    switch (line)\n                    {\n                        case \"1\": category = 1; goto gt_EndLoop1;\n                        case \"2\": category = 2; goto gt_EndLoop1;\n                        case \"quit\": goto gt_Quit;\n                        default: break;\n                    }\n                }\n                gt_EndLoop1:\n                ;\n\n                switch (category)\n                {\n                    case 1:\n                        {\n                            Console.WriteLine(@\"\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\");\n                            // \"Hello World!\" \u306a\u3069\u3092\u5165\u529b\n                            string line = Console.ReadLine();\n                            Enqueue(line);\n                        }\n                        break;\n                    case 2: Dequeue(); break;\n                }\n            }\n            gt_Quit:\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u308f\u3063\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseConnection();\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel();\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAME, null, body);\n\n            Console.WriteLine(\" Enqueue(^q^) {0}\", message);\n            //Console.WriteLine(\" Press [enter] to menu.\");\n            //Console.ReadLine();\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel();\n        }\n\n        static void Dequeue()\n        {\n            IModel channel = GetChannel();\n            EventingBasicConsumer consumer = GetConsumer();\n\n\n            // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n            consumer.Received += GetReceiveHandler();\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b\u5f15\u6570\u304c 5 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            channel.BasicConsume( QUEUE_NAME, true, \"\", null, consumer);\n#else\n            channel.BasicConsume(QUEUE_NAME, true, consumer);\n#endif\n            Console.WriteLine(\" Please, wait dequeue... Or Press any key to menu.\");\n            Console.ReadKey();//.ReadLine();\n\n            // \u5272\u8fbc\u307f\u51e6\u7406\u306e\u524a\u9664\n            consumer.Received -= GetReceiveHandler();\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel();\n        }\n\n    }\n}\n\nmono \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306a\u3089\u3000\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3002\nmcs /r:RabbitMQ.Client.dll -define:UBUNTU MsgQueue.cs\n\n\n\u30b5\u30f3\u30d7\u30eb\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\uff08C#\uff09 \u30a8\u30f3\u30ad\u30e5\u30fc\u306e\u307f\n\u6587\u5b57\u3092\u9001\u308b\u306e\u3060\u3051\u3092\u3000\u30c6\u30b9\u30c8\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n//--------------------------------------------------------------------------------\n// \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4f8b\n//\n// # \u30b3\u30f3\u30d1\u30a4\u30eb\n// mcs /r:RabbitMQ.Client.dll -define:UBUNTU tamesi30a2.cs\n//\n// # \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\u3092\u8abf\u3079\u308b\n// rabbitmqctl list_queues\n//--------------------------------------------------------------------------------\n//\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Text;\n\nnamespace UsagiMQ\n{\n    /// <summary>\n    /// \u53c2\u7167 : \u300cQueueDeclare\u300d http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : \u300cEventingBasicConsumer\u300d https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : \u300cBasicConsume\u300d https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// </summary>\n    class Program\n    {\n        public const string\n            HOST_NAME = \"localhost\",\n            QUEUE_NAME = \"1111\";\n\n        public static ConnectionFactory GetFactory()\n        {\n            if(null== m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null==m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static IModel GetChannel()\n        {\n            if (null==m_channel_)\n            {\n                m_channel_ = GetConnection().CreateModel();\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channel_.QueueDeclare(QUEUE_NAME, false, false, false, false, false, null);\n#else\n                m_channel_.QueueDeclare(QUEUE_NAME, false, false, false, null);\n#endif\n            }\n            return m_channel_;\n        }\n        static IModel m_channel_;\n\n        public static EventingBasicConsumer GetConsumer()\n        {\n            if (null == m_consumer_)\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumer_ = new EventingBasicConsumer();\n#else\n                m_consumer_ = new EventingBasicConsumer(GetChannel());\n#endif\n\n            }\n            return m_consumer_;\n        }\n        static EventingBasicConsumer m_consumer_;\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseConnection()\n        {\n            if (null != m_connection_)\n            {\n                m_connection_.Close();\n                m_connection_ = null;\n            }\n        }\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel()\n        {\n            if (null != m_channel_)\n            {\n                m_channel_.Close();\n                m_channel_ = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            for (;;)\n            {\n                Console.WriteLine(@\"\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\");\n\n                int category = 0;\n                for (;;)\n                {\n                    string line = Console.ReadLine();\n                    switch (line)\n                    {\n                        case \"1\": category = 1; goto gt_EndLoop1;\n                        case \"quit\": goto gt_Quit;\n                        default: break;\n                    }\n                }\n                gt_EndLoop1:\n                ;\n\n                switch (category)\n                {\n                    case 1:\n                        {\n                            Console.WriteLine(@\"\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\");\n                            // \"Hello World!\" \u306a\u3069\u3092\u5165\u529b\n                            string line = Console.ReadLine();\n                            Enqueue(line);\n                        }\n                        break;\n                }\n            }\n            gt_Quit:\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u308f\u3063\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseConnection();\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel();\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAME, null, body);\n\n            Console.WriteLine(\" Enqueue(^q^) {0}\", message);\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel();\n        }\n\n    }\n}\n\n\nPHP\u3067\u3082\u9001\u308c\u308b\n\u300cphp-amqplib/php-amqplib\u300d (Git Hub)\nhttps://github.com/php-amqplib/php-amqplib\n\u300cApparently missing bcmath dependency\u300d (php-amqplib/php-amqplib)\nhttps://github.com/php-amqplib/php-amqplib/issues/312\nPhpAmqpLib \u30e9\u30a4\u30d6\u30e9\u30ea\u3001bcmath \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306b\u306f composer \u3092\u4f7f\u3046\u3002composer\u306e\u8aac\u660e\u306f\u7701\u304f\u3002\n\u6587\u5b57\u3092\u9001\u308b\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n// GET\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3092\u53d6\u5f97\n$QMsg = urldecode($_SERVER['QUERY_STRING']);\nif( \"\" === $QMsg )\n{\n    $QMsg = \"hello, world\";\n}\n\n// \u5225\u306e\u30af\u30a8\u30ea\u30fc\u3082\u9001\u308c\u308b\u3053\u3068\u3092\u8aac\u660e\necho '\uff08\uff3e\uff51\uff3e\uff09' . $QMsg . '<br />';\necho '\u3053\u308c\u3092\uff11\u56de\u30af\u30ea\u30c3\u30af\u3057\u308d\u3060\u305c\u2606\uff4d\uff19\uff08\uff3e\uff5e\uff3e\uff09\uff01<br />';\necho '<a href=\"http://\u2605\uff37\uff45\uff42\u30b5\u30a4\u30c8/tamesi14.php?ClickSitanDaze\">http://\u2605\uff37\uff45\uff42\u30b5\u30a4\u30c8/tamesi14.php?ClickSitanDaze</a><br />';\n\n// \u30ad\u30e5\u30fc\u3092\u958b\u304f\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n$QKey = '1111';\n$channel->queue_declare($QKey, false, false, false, false);\n\n// \u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\n$msgObj = new AMQPMessage( $QMsg );\n$channel->basic_publish($msgObj, '', $QKey);\n\necho \"\u5bfe\u5c40\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8fd1\u304f\u306b\u5c4a\u3051\u3066\u304a\u304f\u305c\u2606\uff08\uff3e\u25bd\uff3e\uff09\uff56 ['\" . $QMsg . \"']\\n\";\n\n// \u30ea\u30bd\u30fc\u30b9\u3092\u958b\u653e\u3059\u308b\n$channel->close();\n$connection->close();\n\n\nPHP \u3067\u3082\u53d7\u3051\u53d6\u308c\u308b\nloop8.php\n<?php\n// \u30c7\u30ad\u30e5\u30fc\u7528\n// \u30b5\u30fc\u30d0\u30fc\u306e\u5916\u90e8\u304b\u3089\u306f\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3002\n//\n// \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u5b9f\u884c\u3059\u308b\n// php loop6.php\n// \u3042\u308b\u3044\u306f\n// nohup /usr/bin/php /home/\u2605user/shogi/php_service/loop6.php > /home/\u2605user/shogi/php_log/loop6.out.log 2> /home/\u2605user/shogi/php_log/loop6.err.log < /dev/null &\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\n\n// \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306e\u524d\u6e96\u5099\u3092\u3059\u308b\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n$QKey = '1111';\n$channel->queue_declare($QKey, false, false, false, false);\n\n// \u30ad\u30e5\u30fc\u3092\u958b\u3044\u3066\u3057\u307e\u3048\u3070\u3001\u3042\u3068\u306f\u7121\u9650\u30eb\u30fc\u30d7\uff01\n\n// \u30c7\u30ad\u30e5\u30fc\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3059\u308b\u3053\u3068\u3092\u3053\u3053\u306b\u66f8\u304f\n$callback = function($msg) {\n    echo \" [x] Received \", $msg->body, \"\\n\";\n};\n$channel->basic_consume($QKey, '', false, true, false, false, $callback);\n\n// \u7121\u9650\u30eb\u30fc\u30d7\nwhile(count($channel->callbacks))\n{\n    // \u3053\u3053\u3067\u30d6\u30ed\u30c3\u30af\u3057\u306a\u304c\u3089\u30c7\u30ad\u30e5\u30fc\u3059\u308b\n    $channel->wait();\n}\n// \u3053\u3053\u306b\u6765\u306a\u3044\n// $channel->close();\n// $connection->close();\n\n\nC++\u3067\u53d7\u3051\u53d6\u308b\nAMQP-CPP \u3092 Git Hub \u304b\u3089\u843d\u3068\u3057\u3066\u304f\u308b\u3002\nAMQP-CPP\nhttps://github.com/CopernicaMarketingSoftware/AMQP-CPP\nMakefile \u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\n# make\n# make install\n\n\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001/usr \u30d5\u30a9\u30eb\u30c0\u30fc\u306e\u4e2d\u306b\u3044\u308d\u3044\u308d\u5165\u308c\u3066\u304f\u308c\u308b\u3088\u3046\u3060\u3002\n\nev\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u5165\u308c\u308b\nsudo apt-get update\nsudo apt-get install libev-dev\n\n\n\u53d7\u53d6\u308a\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\uff08C++\uff09\n\u6587\u5b57\u3092\u53d7\u3051\u53d6\u308b\u306e\u3092\u3000\u30c6\u30b9\u30c8\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\ntamesi29a10_main.cpp\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nint main()\n{\n    // access to the event loop\n    auto *loop = EV_DEFAULT;\n\n    // handler for libev (so we don't have to implement AMQP::TcpHandler!)\n    AMQP::LibEvHandler handler(loop);\n\n    // make a connection\n    AMQP::TcpConnection connection(&handler, AMQP::Address(\"amqp://localhost/\"));\n\n    // we need a channel too\n    AMQP::TcpChannel channel(&connection);\n\n//    // create a temporary queue\n//    channel.declareQueue(AMQP::exclusive).onSuccess([&connection](const std::string &name, uint32_t messagecount, uint32_t consumercount) {\n//\n//        // report the name of the temporary queue\n//        std::cout << \"declared queue \" << name << std::endl;\n//\n//        // now we can close the connection\n//        connection.close();\n//    });\n    // create a custom callback\n    auto callback = [](const std::string &name, int msgcount, int consumercount) {\n\n        // @todo add your own implementation\n\n        // report the name of the temporary queue\n        std::cout << \"(^q^)declared queue \" << name << std::endl;\n\n        // now we can close the connection\n        // connection.close();\n    };\n    // declare the queue, and install the callback that is called on success\n    channel.declareQueue(\"1111\").onSuccess(callback);\n\n    // callback function that is called when the consume operation starts\n    auto startCb = [](const std::string &consumertag) {\n\n        // std::cout << \"(^q^)consume operation started\" << std::endl;\n        std::cout << \"(^q^)consume operation started [\" << consumertag << \"]\" << std::endl;\n    };\n\n    // callback function that is called when the consume operation failed\n    auto errorCb = [](const char *message) {\n\n        // std::cout << \"(^q^)consume operation failed\" << std::endl;\n        std::cout << \"(^q^)consume operation failed [\" << &message << \"]\" << std::endl;\n    };\n\n    // callback operation when a message was received\n    auto messageCb = [&channel](const AMQP::Message &message, uint64_t deliveryTag, bool redelivered) {\n\n        // std::cout << \"(^q^)message received\" << std::endl;\n        // std::cout << \"(^q^)message received exchange=[\" << &message.exchange() << \"] routingkey=[\" << &message.routingkey() << \"]\" << std::endl;\n        // std::cout << \"(^q^)message received body=[\" << message.body() << \"] bodySize=[\" << message.bodySize() << \"]\" << std::endl;\n        std::string myString(message.body(), message.bodySize());\n        std::cout << \"(^q^)message received myString=[\" << myString << \"]\" << std::endl;\n\n        // acknowledge the message\n        channel.ack(deliveryTag);\n    };\n\n    // start consuming from the queue, and install the callbacks\n    channel.consume(\"1111\")\n        .onReceived(messageCb)\n        .onSuccess(startCb)\n        .onError(errorCb);\n\n    // run the loop\n    ev_run(loop, 0);\n\n    // done\n    return 0;\n}\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u304d\u306f\u6b21\u306e\u3088\u3046\u306b\u53e9\u304f\u3002\u308f\u305f\u3057\u304c\u8abf\u3079\u3066\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n# g++ -std=c++11 tamesi29a10_main.cpp -lev -lamqpcpp -pthread -o tamesi29a10_main.exe\n\n\n\u9001\u308a\u3064\u3051\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\uff08C++\uff09\n\u6587\u5b57\u3092\u9001\u308b\u306e\u3092\u3000\u30c6\u30b9\u30c8\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\npublish.cpp\n// OS      : Ubuntu 16.04\n// Server  : Sakura VPS (Rental)\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Directory : Command  : cd /usr/include/amqpcpp/\n//         : Compile   : Command  : g++ -std=c++11 publish.cpp -o publish.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : ./publish.exe\n//\n// publish.cpp\n// Reffered source code : how to publish messages #109 https://github.com/CopernicaMarketingSoftware/AMQP-CPP/issues/109\n// Reffered source code : https://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/myconnection.cpp\n#include <iostream>\n#include <string>\n\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nint main(int argc, char* argv[]) {\n\n    auto* loop = EV_DEFAULT;\n\n    AMQP::LibEvHandler handler{loop};\n    AMQP::Address address{\"amqp://localhost:5672\"};\n    AMQP::TcpConnection connection{&handler, address};\n    AMQP::TcpChannel channel{&connection};\n\n    std::string exchange_name = \"myexchange\";\n    std::string queue_name    = \"1111\";\n    std::string routing_key   = \"\";\n\n    std::cout << \"channel.connected: \" << channel.connected() << \"\\n\";\n\n    channel.declareQueue(queue_name)\n    .onSuccess([](const std::string& name, uint32_t messages, uint32_t consumers) {\n        std::cout << \"declared queue \" << name << \" (messages: \" << messages << \", consumers: \" << consumers << \")\\n\";\n    })\n    .onError([](const char* msg) {\n        std::cout << \"error declaring queue: \" << msg << \"\\n\";\n    });\n\n    channel.onReady([]() {\n        std::cout << \"onReady\\n\";\n    });\n\n    channel.bindQueue(exchange_name, queue_name, routing_key)\n    .onSuccess([&connection,&channel,&exchange_name,&routing_key](){\n        std::cout << \"bindQueue.onSuccess\\n\";\n\n        std::string msg = \"hello, japan\";\n        if (channel.publish(exchange_name, routing_key, msg.c_str(), msg.size())) {\n            std::cout << \"publish ok\\n\";\n        } else {\n            std::cout << \"failed to publish?\\n\";\n        }\n\n        // break in ev loop.\n        connection.close();\n    });\n\n    // We will monitor until the connection is lost. Execute channel.declareQueue( ... ).\n    ev_run(loop);\n\n    return 0;\n}\n\n/*\nchannel.connected: 1\nonReady\ndeclared queue 1111 (messages: 0, consumers: 0)\nbindQueue.onSuccess\npublish ok\n*/\n\n\u95a2\u9023\u8a18\u4e8b : http://qiita.com/muzudho1/items/aaedf39c171738358003\n\n\u96d1\u306b\u8aac\u660e\u3059\u308b\u3002\n\nUbuntu16.04 \u3067 \u30d7\u30ed\u30bb\u30b9\uff21\u3000\u304c\u3000\u30d7\u30ed\u30bb\u30b9\uff22\u3000\u306b\u6587\u5b57\u5217\u3092\u9001\u308d\u3046\u3001\u3068\u3044\u3046\u3082\u306e\u3060\u3002\n\n|From|To|Result|\n|---|---|---|\n|C++|C#|OK|\n|C#|C++|OK|\n|C#|C#|OK|\n|C#|PHP|OK|\n|PHP|C++|OK|\n|PHP|C#|OK|\n|PHP|PHP|OK|\nC++\u3001C#\u3001PHP\u306e\u30ad\u30e5\u30fc\u306b\u5165\u308c\u308b\u3001\u51fa\u3059\u306f\u5358\u4f53\u30c6\u30b9\u30c8\u3067\u304d\u305f\u306e\u3067\u3001\u591a\u5206\u3001\u7d44\u307f\u5408\u308f\u305b\u306f\u5168\u90e8\u3044\u3051\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3002\n\n# RabbitMQ \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n\u300cInstalling on Debian / Ubuntu\u300d (RabbitMQ)\nhttps://www.rabbitmq.com/install-debian.html\n\nUbuntu \u3067\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u3044\u3051\u3070\u3044\u3044\u3002\n\n```\necho 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list\n```\n\n```\nsudo apt-get update\n```\n\n```\nsudo apt-get install rabbitmq-server\n```\n\n```\ngpg --keyserver pgpkeys.mit.edu --recv-key 7638D0442B90D010\n```\n\n```\ngpg -a --export 7638D0442B90D010 | sudo apt-key add -\n```\n\n```\necho 'deb http://ftp.debian.org/debian wheezy-backports main' | sudo tee /etc/apt/sources.list.d/wheezy_backports.list\n```\n\n```\nwget -O- https://packages.erlang-solutions.com/debian/erlang_solutions.asc | sudo apt-key add -\n```\n\n```\necho 'deb https://packages.erlang-solutions.com/debian wheezy contrib' | sudo tee /etc/apt/sources.list.d/esl.list\n```\n\n```\nsudo apt-get update\n```\n\n```\nsudo apt-get install init-system-helpers socat esl-erlang\n```\n\n```\nwget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -\n```\n\n```\necho 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list\n```\n\n```\nsudo apt-get update\n```\n\n```\nsudo apt-get install rabbitmq-server\n```\n\n# RabbitMQ \u3092\u8d77\u52d5\u3059\u308b\n\n```\nrabbitmq-server\n```\n\n\u5099\u8003\uff1a\u3000\u505c\u6b62\u3057\u305f\u3044\u3068\u304d\u306f \u300crabbitmqctl stop\u300d\u3060\u3002\n\n```\n\u30ad\u30fc\u30dc\u30fc\u30c9\u306e [Ctrl]+[Z] \u30ad\u30fc\u3092\u62bc\u3057\u3066\u6b62\u3081\u308b\n```\n\n```\nbg 1\n```\n\n\u6570\u5b57\u306e 1 \u306e\u90e8\u5206\u306f rabbitmq-server \u306e\u30b8\u30e7\u30d6\u756a\u53f7\u3092\u5165\u308c\u308b\u3053\u3068\u3002\n\n\u3053\u308c\u3067\u3000RabbitMQ \u30b5\u30fc\u30d0\u30fc\u306f\u8d77\u3061\u4e0a\u304c\u3063\u305f\u3002\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306e\u6e96\u5099\u306f\u30aa\u30c3\u30b1\u30fc\u3060\u3002\n\n# \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\n\n\u6587\u5b57\u5217\u306e\u9001\u308a\u65b9\u306f\u3000\u3053\u306e\u3042\u3068\u8aac\u660e\u3059\u308b\u304c\u3001\n\u6587\u5b57\u5217\u3092\u9001\u308c\u305f\u304b\u3069\u3046\u304b\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\n```\nrabbitmqctl list_queues\n```\n\n# \u30b5\u30f3\u30d7\u30eb\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\uff08C#\uff09\n\n\u6587\u5b57\u3092\u9001\u308b\u306e\u3068\u3001\u53d7\u3051\u53d6\u308b\u306e\u3092\u3000\u30c6\u30b9\u30c8\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n\n```\n//--------------------------------------------------------------------------------\n// \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4f8b\n//\n// # \u30b3\u30f3\u30d1\u30a4\u30eb\n// mcs /r:RabbitMQ.Client.dll -define:UBUNTU MsgQueue.cs\n//\n// # \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\u3092\u8abf\u3079\u308b\n// rabbitmqctl list_queues\n//--------------------------------------------------------------------------------\n//\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Text;\n\nnamespace UsagiMQ\n{\n    /// <summary>\n    /// \u53c2\u7167 : \u300cQueueDeclare\u300d http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : \u300cEventingBasicConsumer\u300d https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : \u300cBasicConsume\u300d https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// </summary>\n    class Program\n    {\n        public const string\n            HOST_NAME = \"localhost\",\n            QUEUE_NAME = \"1111\";\n\n        public static ConnectionFactory GetFactory()\n        {\n            if(null== m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null==m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static IModel GetChannel()\n        {\n            if (null==m_channel_)\n            {\n                m_channel_ = GetConnection().CreateModel();\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channel_.QueueDeclare(QUEUE_NAME, false, false, false, false, false, null);\n#else\n                m_channel_.QueueDeclare(QUEUE_NAME, false, false, false, null);\n#endif\n            }\n            return m_channel_;\n        }\n        static IModel m_channel_;\n\n        public static EventingBasicConsumer GetConsumer()\n        {\n            if (null == m_consumer_)\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumer_ = new EventingBasicConsumer();\n#else\n                m_consumer_ = new EventingBasicConsumer(GetChannel());\n#endif\n\n            }\n            return m_consumer_;\n        }\n        static EventingBasicConsumer m_consumer_;\n\n        /// <summary>\n        /// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n        /// </summary>\n#if UBUNTU\n        public static BasicDeliverEventHandler GetReceiveHandler()\n#else\n        public static EventHandler<BasicDeliverEventArgs> GetReceiveHandler()\n#endif\n        {\n            if( null== m_eventHandler_ )\n            {\n#if UBUNTU\n                m_eventHandler_ = new BasicDeliverEventHandler((model, ea) =>\n#else\n                m_eventHandler_ = new EventHandler<BasicDeliverEventArgs>((model, ea) =>\n#endif\n                {\n                    byte[] body = ea.Body;\n                    string message = Encoding.UTF8.GetString(body);\n                    Console.WriteLine(\" [interrupt!] Dequeue(^q^) {0}\", message);\n                });\n            }\n\n            return m_eventHandler_;\n        }\n\n#if UBUNTU\n        static BasicDeliverEventHandler m_eventHandler_;\n#else\n        static EventHandler<BasicDeliverEventArgs> m_eventHandler_;\n#endif\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseConnection()\n        {\n            if (null != m_connection_)\n            {\n                m_connection_.Close();\n                m_connection_ = null;\n            }\n        }\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel()\n        {\n            if (null != m_channel_)\n            {\n                m_channel_.Close();\n                m_channel_ = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            for (;;)\n            {\n                Console.WriteLine(@\"\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\");\n\n                int category = 0;\n                for (;;)\n                {\n                    string line = Console.ReadLine();\n                    switch (line)\n                    {\n                        case \"1\": category = 1; goto gt_EndLoop1;\n                        case \"2\": category = 2; goto gt_EndLoop1;\n                        case \"quit\": goto gt_Quit;\n                        default: break;\n                    }\n                }\n                gt_EndLoop1:\n                ;\n\n                switch (category)\n                {\n                    case 1:\n                        {\n                            Console.WriteLine(@\"\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\");\n                            // \"Hello World!\" \u306a\u3069\u3092\u5165\u529b\n                            string line = Console.ReadLine();\n                            Enqueue(line);\n                        }\n                        break;\n                    case 2: Dequeue(); break;\n                }\n            }\n            gt_Quit:\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u308f\u3063\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseConnection();\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel();\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAME, null, body);\n\n            Console.WriteLine(\" Enqueue(^q^) {0}\", message);\n            //Console.WriteLine(\" Press [enter] to menu.\");\n            //Console.ReadLine();\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel();\n        }\n\n        static void Dequeue()\n        {\n            IModel channel = GetChannel();\n            EventingBasicConsumer consumer = GetConsumer();\n\n\n            // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n            consumer.Received += GetReceiveHandler();\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b\u5f15\u6570\u304c 5 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            channel.BasicConsume( QUEUE_NAME, true, \"\", null, consumer);\n#else\n            channel.BasicConsume(QUEUE_NAME, true, consumer);\n#endif\n            Console.WriteLine(\" Please, wait dequeue... Or Press any key to menu.\");\n            Console.ReadKey();//.ReadLine();\n\n            // \u5272\u8fbc\u307f\u51e6\u7406\u306e\u524a\u9664\n            consumer.Received -= GetReceiveHandler();\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel();\n        }\n\n    }\n}\n```\n\nmono \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306a\u3089\u3000\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3002\n\n```\nmcs /r:RabbitMQ.Client.dll -define:UBUNTU MsgQueue.cs\n```\n\n# \u30b5\u30f3\u30d7\u30eb\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\uff08C#\uff09 \u30a8\u30f3\u30ad\u30e5\u30fc\u306e\u307f\n\n\u6587\u5b57\u3092\u9001\u308b\u306e\u3060\u3051\u3092\u3000\u30c6\u30b9\u30c8\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n\n```\n//--------------------------------------------------------------------------------\n// \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4f8b\n//\n// # \u30b3\u30f3\u30d1\u30a4\u30eb\n// mcs /r:RabbitMQ.Client.dll -define:UBUNTU tamesi30a2.cs\n//\n// # \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\u3092\u8abf\u3079\u308b\n// rabbitmqctl list_queues\n//--------------------------------------------------------------------------------\n//\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Text;\n\nnamespace UsagiMQ\n{\n    /// <summary>\n    /// \u53c2\u7167 : \u300cQueueDeclare\u300d http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : \u300cEventingBasicConsumer\u300d https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : \u300cBasicConsume\u300d https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// </summary>\n    class Program\n    {\n        public const string\n            HOST_NAME = \"localhost\",\n            QUEUE_NAME = \"1111\";\n\n        public static ConnectionFactory GetFactory()\n        {\n            if(null== m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null==m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static IModel GetChannel()\n        {\n            if (null==m_channel_)\n            {\n                m_channel_ = GetConnection().CreateModel();\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channel_.QueueDeclare(QUEUE_NAME, false, false, false, false, false, null);\n#else\n                m_channel_.QueueDeclare(QUEUE_NAME, false, false, false, null);\n#endif\n            }\n            return m_channel_;\n        }\n        static IModel m_channel_;\n\n        public static EventingBasicConsumer GetConsumer()\n        {\n            if (null == m_consumer_)\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumer_ = new EventingBasicConsumer();\n#else\n                m_consumer_ = new EventingBasicConsumer(GetChannel());\n#endif\n\n            }\n            return m_consumer_;\n        }\n        static EventingBasicConsumer m_consumer_;\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseConnection()\n        {\n            if (null != m_connection_)\n            {\n                m_connection_.Close();\n                m_connection_ = null;\n            }\n        }\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel()\n        {\n            if (null != m_channel_)\n            {\n                m_channel_.Close();\n                m_channel_ = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            for (;;)\n            {\n                Console.WriteLine(@\"\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\");\n\n                int category = 0;\n                for (;;)\n                {\n                    string line = Console.ReadLine();\n                    switch (line)\n                    {\n                        case \"1\": category = 1; goto gt_EndLoop1;\n                        case \"quit\": goto gt_Quit;\n                        default: break;\n                    }\n                }\n                gt_EndLoop1:\n                ;\n\n                switch (category)\n                {\n                    case 1:\n                        {\n                            Console.WriteLine(@\"\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\");\n                            // \"Hello World!\" \u306a\u3069\u3092\u5165\u529b\n                            string line = Console.ReadLine();\n                            Enqueue(line);\n                        }\n                        break;\n                }\n            }\n            gt_Quit:\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u308f\u3063\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseConnection();\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel();\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAME, null, body);\n\n            Console.WriteLine(\" Enqueue(^q^) {0}\", message);\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel();\n        }\n\n    }\n}\n```\n\n# PHP\u3067\u3082\u9001\u308c\u308b\n\n\u300cphp-amqplib/php-amqplib\u300d (Git Hub)\nhttps://github.com/php-amqplib/php-amqplib\n\n\u300cApparently missing bcmath dependency\u300d (php-amqplib/php-amqplib)\nhttps://github.com/php-amqplib/php-amqplib/issues/312\n\nPhpAmqpLib \u30e9\u30a4\u30d6\u30e9\u30ea\u3001bcmath \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306b\u306f composer \u3092\u4f7f\u3046\u3002composer\u306e\u8aac\u660e\u306f\u7701\u304f\u3002\n\n\u6587\u5b57\u3092\u9001\u308b\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n\n```\n<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n// GET\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3092\u53d6\u5f97\n$QMsg = urldecode($_SERVER['QUERY_STRING']);\nif( \"\" === $QMsg )\n{\n    $QMsg = \"hello, world\";\n}\n\n// \u5225\u306e\u30af\u30a8\u30ea\u30fc\u3082\u9001\u308c\u308b\u3053\u3068\u3092\u8aac\u660e\necho '\uff08\uff3e\uff51\uff3e\uff09' . $QMsg . '<br />';\necho '\u3053\u308c\u3092\uff11\u56de\u30af\u30ea\u30c3\u30af\u3057\u308d\u3060\u305c\u2606\uff4d\uff19\uff08\uff3e\uff5e\uff3e\uff09\uff01<br />';\necho '<a href=\"http://\u2605\uff37\uff45\uff42\u30b5\u30a4\u30c8/tamesi14.php?ClickSitanDaze\">http://\u2605\uff37\uff45\uff42\u30b5\u30a4\u30c8/tamesi14.php?ClickSitanDaze</a><br />';\n\n// \u30ad\u30e5\u30fc\u3092\u958b\u304f\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n$QKey = '1111';\n$channel->queue_declare($QKey, false, false, false, false);\n\n// \u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\n$msgObj = new AMQPMessage( $QMsg );\n$channel->basic_publish($msgObj, '', $QKey);\n\necho \"\u5bfe\u5c40\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8fd1\u304f\u306b\u5c4a\u3051\u3066\u304a\u304f\u305c\u2606\uff08\uff3e\u25bd\uff3e\uff09\uff56 ['\" . $QMsg . \"']\\n\";\n\n// \u30ea\u30bd\u30fc\u30b9\u3092\u958b\u653e\u3059\u308b\n$channel->close();\n$connection->close();\n```\n\n# PHP \u3067\u3082\u53d7\u3051\u53d6\u308c\u308b\n\nloop8.php\n\n```\n<?php\n// \u30c7\u30ad\u30e5\u30fc\u7528\n// \u30b5\u30fc\u30d0\u30fc\u306e\u5916\u90e8\u304b\u3089\u306f\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3002\n//\n// \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u5b9f\u884c\u3059\u308b\n// php loop6.php\n// \u3042\u308b\u3044\u306f\n// nohup /usr/bin/php /home/\u2605user/shogi/php_service/loop6.php > /home/\u2605user/shogi/php_log/loop6.out.log 2> /home/\u2605user/shogi/php_log/loop6.err.log < /dev/null &\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\n\n// \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306e\u524d\u6e96\u5099\u3092\u3059\u308b\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n$QKey = '1111';\n$channel->queue_declare($QKey, false, false, false, false);\n\n// \u30ad\u30e5\u30fc\u3092\u958b\u3044\u3066\u3057\u307e\u3048\u3070\u3001\u3042\u3068\u306f\u7121\u9650\u30eb\u30fc\u30d7\uff01\n\n// \u30c7\u30ad\u30e5\u30fc\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3059\u308b\u3053\u3068\u3092\u3053\u3053\u306b\u66f8\u304f\n$callback = function($msg) {\n    echo \" [x] Received \", $msg->body, \"\\n\";\n};\n$channel->basic_consume($QKey, '', false, true, false, false, $callback);\n\n// \u7121\u9650\u30eb\u30fc\u30d7\nwhile(count($channel->callbacks))\n{\n    // \u3053\u3053\u3067\u30d6\u30ed\u30c3\u30af\u3057\u306a\u304c\u3089\u30c7\u30ad\u30e5\u30fc\u3059\u308b\n    $channel->wait();\n}\n// \u3053\u3053\u306b\u6765\u306a\u3044\n// $channel->close();\n// $connection->close();\n```\n\n# C++\u3067\u53d7\u3051\u53d6\u308b\n\nAMQP-CPP \u3092 Git Hub \u304b\u3089\u843d\u3068\u3057\u3066\u304f\u308b\u3002\n\nAMQP-CPP\nhttps://github.com/CopernicaMarketingSoftware/AMQP-CPP\n\nMakefile \u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\n\n```\n# make\n# make install\n```\n\n\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001/usr \u30d5\u30a9\u30eb\u30c0\u30fc\u306e\u4e2d\u306b\u3044\u308d\u3044\u308d\u5165\u308c\u3066\u304f\u308c\u308b\u3088\u3046\u3060\u3002\n\n## ev\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u5165\u308c\u308b\n\n```\nsudo apt-get update\nsudo apt-get install libev-dev\n```\n\n## \u53d7\u53d6\u308a\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\uff08C++\uff09\n\n\u6587\u5b57\u3092\u53d7\u3051\u53d6\u308b\u306e\u3092\u3000\u30c6\u30b9\u30c8\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n\ntamesi29a10_main.cpp\n\n```\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nint main()\n{\n    // access to the event loop\n    auto *loop = EV_DEFAULT;\n\n    // handler for libev (so we don't have to implement AMQP::TcpHandler!)\n    AMQP::LibEvHandler handler(loop);\n\n    // make a connection\n    AMQP::TcpConnection connection(&handler, AMQP::Address(\"amqp://localhost/\"));\n\n    // we need a channel too\n    AMQP::TcpChannel channel(&connection);\n\n//    // create a temporary queue\n//    channel.declareQueue(AMQP::exclusive).onSuccess([&connection](const std::string &name, uint32_t messagecount, uint32_t consumercount) {\n//\n//        // report the name of the temporary queue\n//        std::cout << \"declared queue \" << name << std::endl;\n//\n//        // now we can close the connection\n//        connection.close();\n//    });\n    // create a custom callback\n    auto callback = [](const std::string &name, int msgcount, int consumercount) {\n\n        // @todo add your own implementation\n\n        // report the name of the temporary queue\n        std::cout << \"(^q^)declared queue \" << name << std::endl;\n\n        // now we can close the connection\n        // connection.close();\n    };\n    // declare the queue, and install the callback that is called on success\n    channel.declareQueue(\"1111\").onSuccess(callback);\n\n    // callback function that is called when the consume operation starts\n    auto startCb = [](const std::string &consumertag) {\n\n        // std::cout << \"(^q^)consume operation started\" << std::endl;\n        std::cout << \"(^q^)consume operation started [\" << consumertag << \"]\" << std::endl;\n    };\n\n    // callback function that is called when the consume operation failed\n    auto errorCb = [](const char *message) {\n\n        // std::cout << \"(^q^)consume operation failed\" << std::endl;\n        std::cout << \"(^q^)consume operation failed [\" << &message << \"]\" << std::endl;\n    };\n\n    // callback operation when a message was received\n    auto messageCb = [&channel](const AMQP::Message &message, uint64_t deliveryTag, bool redelivered) {\n\n        // std::cout << \"(^q^)message received\" << std::endl;\n        // std::cout << \"(^q^)message received exchange=[\" << &message.exchange() << \"] routingkey=[\" << &message.routingkey() << \"]\" << std::endl;\n        // std::cout << \"(^q^)message received body=[\" << message.body() << \"] bodySize=[\" << message.bodySize() << \"]\" << std::endl;\n        std::string myString(message.body(), message.bodySize());\n        std::cout << \"(^q^)message received myString=[\" << myString << \"]\" << std::endl;\n\n        // acknowledge the message\n        channel.ack(deliveryTag);\n    };\n\n    // start consuming from the queue, and install the callbacks\n    channel.consume(\"1111\")\n        .onReceived(messageCb)\n        .onSuccess(startCb)\n        .onError(errorCb);\n\n    // run the loop\n    ev_run(loop, 0);\n\n    // done\n    return 0;\n}\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u304d\u306f\u6b21\u306e\u3088\u3046\u306b\u53e9\u304f\u3002\u308f\u305f\u3057\u304c\u8abf\u3079\u3066\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n\n```\n# g++ -std=c++11 tamesi29a10_main.cpp -lev -lamqpcpp -pthread -o tamesi29a10_main.exe\n```\n\n## \u9001\u308a\u3064\u3051\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\uff08C++\uff09\n\n\u6587\u5b57\u3092\u9001\u308b\u306e\u3092\u3000\u30c6\u30b9\u30c8\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\u308f\u305f\u3057\u304c\u3000\u3066\u304d\u3068\u30fc\u3000\u306b\u66f8\u3044\u305f\u306e\u3067\u3000\u3053\u308c\u306f\u6a21\u7bc4\u3068\u3057\u306a\u3044\u3053\u3068\u3002\n\npublish.cpp\n\n```\n// OS      : Ubuntu 16.04\n// Server  : Sakura VPS (Rental)\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Directory : Command  : cd /usr/include/amqpcpp/\n//         : Compile   : Command  : g++ -std=c++11 publish.cpp -o publish.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : ./publish.exe\n//\n// publish.cpp\n// Reffered source code : how to publish messages #109 https://github.com/CopernicaMarketingSoftware/AMQP-CPP/issues/109\n// Reffered source code : https://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/myconnection.cpp\n#include <iostream>\n#include <string>\n\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nint main(int argc, char* argv[]) {\n\n    auto* loop = EV_DEFAULT;\n\n    AMQP::LibEvHandler handler{loop};\n    AMQP::Address address{\"amqp://localhost:5672\"};\n    AMQP::TcpConnection connection{&handler, address};\n    AMQP::TcpChannel channel{&connection};\n\n    std::string exchange_name = \"myexchange\";\n    std::string queue_name    = \"1111\";\n    std::string routing_key   = \"\";\n\n    std::cout << \"channel.connected: \" << channel.connected() << \"\\n\";\n\n    channel.declareQueue(queue_name)\n    .onSuccess([](const std::string& name, uint32_t messages, uint32_t consumers) {\n        std::cout << \"declared queue \" << name << \" (messages: \" << messages << \", consumers: \" << consumers << \")\\n\";\n    })\n    .onError([](const char* msg) {\n        std::cout << \"error declaring queue: \" << msg << \"\\n\";\n    });\n\n    channel.onReady([]() {\n        std::cout << \"onReady\\n\";\n    });\n\n    channel.bindQueue(exchange_name, queue_name, routing_key)\n    .onSuccess([&connection,&channel,&exchange_name,&routing_key](){\n        std::cout << \"bindQueue.onSuccess\\n\";\n\n        std::string msg = \"hello, japan\";\n        if (channel.publish(exchange_name, routing_key, msg.c_str(), msg.size())) {\n            std::cout << \"publish ok\\n\";\n        } else {\n            std::cout << \"failed to publish?\\n\";\n        }\n\n        // break in ev loop.\n        connection.close();\n    });\n\n    // We will monitor until the connection is lost. Execute channel.declareQueue( ... ).\n    ev_run(loop);\n\n    return 0;\n}\n\n/*\nchannel.connected: 1\nonReady\ndeclared queue 1111 (messages: 0, consumers: 0)\nbindQueue.onSuccess\npublish ok\n*/\n```\n\n", "tags": ["C++", "AMQP-CPP", "RabbitMQ", "\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1", "\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc"]}