{"context": " More than 1 year has passed since last update.\u793e\u5185\u52c9\u5f37\u4f1a\u3067\u307c\u3061\u307c\u3061\u9032\u3081\u3066\u3044\u308bPRML\u3001\u30ab\u30e9\u30fc\u306e\u56f3\u7248\u304c\u3042\u308b\u3068\u771f\u9762\u76ee\u306b\u518d\u73fe\u3057\u305f\u304f\u306a\u308a\u307e\u3059\u3002\u4eca\u56de\u306f3.3.1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5206\u5e03\u306e\u4e8b\u5f8c\u78ba\u7387\u304c\u53ce\u675f\u3059\u308b\u69d8\u5b50\u306e\u56f3\u7248\u3092\u518d\u73fe\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u56f3\u306f\n\n\u76f4\u8fd1\u306e\u89b3\u6e2c\u30c7\u30fc\u30bf1\u3064\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5c24\u5ea6\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u524d/\u4e8b\u5f8c\u78ba\u7387\u5206\u5e03\n\u4e8b\u524d/\u4e8b\u5f8c\u78ba\u7387\u5206\u5e03\u304b\u3089\u5f97\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u308b\u3042\u3066\u306f\u3081\u7d50\u679c\n\n\u306e3\u3064\u304b\u3089\u306a\u308a\u3001\u4e8b\u5f8c\u78ba\u7387\u304c\u53ce\u675f\u3057\u3066\u3044\u304f\u69d8\u5b50\u304c\u898b\u3089\u308c\u3066\u9762\u767d\u3044\u3067\u3059\u3002\n\n\u524d\u63d0\n\n1\u6b21\u5143\u306e\u5165\u529b\u5909\u6570xx\u3068\u30011\u6b21\u5143\u306e\u76ee\u6a19\u5909\u6570tt\u3092\u8003\u3048\u308b\ny(x,w)=w0+w1xy(x, w) = w_0 + w_1x \u306e\u7dda\u5f62\u30e2\u30c7\u30eb\u306b\u3042\u3066\u306f\u3081\u3092\u884c\u306a\u3046\n\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf2\u3064\u306e\u5206\u5e03\u306f\u30012\u5909\u91cf\u30ac\u30a6\u30b9\u5206\u5e03\u3068\u3059\u308b\n\u30ce\u30a4\u30ba\u306f\u30ac\u30a6\u30b9\u30ce\u30a4\u30ba\u3068\u3059\u308b\n\n\n\u5fc5\u8981\u306a\u8a08\u7b97\u90e8\u54c1\n\u89b3\u6e2c\u30c7\u30fc\u30bf\u304b\u3089\u8a08\u753b\u884c\u5217\u03a6\\Phi\u306e\u4f5c\u6210\ndef design_matrix(x):\n    return np.array([[1, xi] for xi in x])\n\nN\u56de\u30c7\u30fc\u30bf\u3092\u89b3\u6e2c\u3057\u305f\u5f8c\u306e\u5e73\u5747 mN=\u03b2SN\u03a6Ttm_N = \\beta S_N\\Phi^{T}t \u3092\u6c42\u3081\u308b\u95a2\u6570\ndef calc_mn(alpha, beta, x, t):\n    Phi = design_matrix(x)\n    Sn = calc_Sn(alpha, beta, x)\n    return beta * Sn.dot(Phi.T).dot(t)\n\nN\u56de\u30c7\u30fc\u30bf\u3092\u89b3\u6e2c\u3057\u305f\u5f8c\u306e\u5171\u5206\u6563 SN=(\u03b1I+\u03b2\u03a6T\u03a6)\u22121S_N = (\\alpha I + \\beta\\Phi^{T}\\Phi)^{-1} \u3092\u6c42\u3081\u308b\u95a2\u6570\nI = np.identity(2)\n\ndef calc_Sn(alpha, beta, x):\n    Phi = design_matrix(x)\n    return np.linalg.inv(alpha*I + beta*Phi.T.dot(Phi))\n\n\n\u89b3\u6e2c\u30c7\u30fc\u30bf\u306e\u5c24\u5ea6\n\u89b3\u6e2c\u30c7\u30fc\u30bf\u306f\u7cbe\u5ea6\u03b2\\beta\u306e\u30ac\u30a6\u30b9\u30ce\u30a4\u30ba\u304c\u4e57\u308b\u4e8b\u304b\u3089\u3001\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570 \nlogL(w) = -\\frac{\\beta}{2}(t-w^{T}\\phi(x))^2 + cons\nlogL(w)=\u2212\u03b22(t\u2212wT\u03d5(x))2+cons{logL(w) = -\\frac{\\beta}{2}(t-w^{T}\\phi(x))^2 + cons\n}\n\u3092\u5229\u7528\u3059\u308b\u3002\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u3067\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3044\u7bc4\u56f2\u306eww\u3092\u6c42\u3081\u308b\u3002\ndef calc_likelifood(beta, t, x, w):\n    \"\"\"\n    \u89b3\u6e2c\u50241\u3064\u306e\u5bfe\u6570\u5c24\u5ea6\u3092\u6c42\u3081\u308b\n    \"\"\"\n    w = np.array(w)\n    phi_x = np.array([1, x])\n    return -1 * beta / 2 * (t - w.T.dot(phi_x))**2\n\ndef plot_likelifood(beta, t, x, title='', ax=None):\n    \"\"\"\n    \u89b3\u6e2c\u5024\u306e\u5c24\u5ea6\u306e\u30d7\u30ed\u30c3\u30c8\n    \"\"\"\n    w0 = np.linspace(-1, 1, 100)\n    w1 = np.linspace(-1, 1, 100)\n    W0,W1 = np.meshgrid(w0, w1)\n    L = []\n    for w0i in w0:\n        L.append([calc_likelifood(beta, t, x, [w0i, w1i]) for w1i in w1])\n\n    ax.pcolor(W0, W1, np.array(L).T, cmap=plt.cm.jet, vmax=0, vmin=-1)\n    ax.set_xlabel('$w_0$')\n    ax.set_ylabel('$w_1$')\n    ax.set_title(title)\n\n\n\u4e8b\u5f8c\u78ba\u7387\n\u4e0a\u8a18\u306e\u5f0f\u3067\u6c42\u3081\u305f mNm_N\u3068SNS_N\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u305f2\u5909\u91cf\u6b63\u898f\u5206\u5e03\u304cww\u306e\u4e8b\u5f8c\u78ba\u7387\u5206\u5e03\u3068\u306a\u308b\u3001m0m_0\u3068S0S_0\u306e\u5834\u5408\u306f\u4e8b\u524d\u78ba\u7387\u5206\u5e03\u3002\ndef plot_probability(mean, cov, title='', ax=None):\n    \"\"\"\n    \u78ba\u7387\u5206\u5e03(2\u5909\u91cf\u30ac\u30a6\u30b9)\u306e\u30d7\u30ed\u30c3\u30c8\n    \"\"\"\n    w0 = np.linspace(-1, 1, 100)\n    w1 = np.linspace(-1, 1, 100)\n    W0,W1 = np.meshgrid(w0, w1)\n    P = []\n    for w0i in w0:\n        P.append([scipy.stats.multivariate_normal.pdf([w0i,w1i], mean, cov) for w1i in w1])\n\n    ax.pcolor(W0, W1, np.array(P).T, cmap=plt.cm.jet)\n    ax.set_xlabel('$w_0$')\n    ax.set_ylabel('$w_1$')\n    ax.set_title(title)\n\n\n\u30c7\u30fc\u30bf\u7a7a\u9593\n\u4e0a\u8a18\u306e\u5f0f\u3067\u6c42\u3081\u305f mNm_N\u3068SNS_N\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u305f2\u5909\u91cf\u6b63\u898f\u5206\u5e03\u304b\u3089ww\u30926\u56de\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3001\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3002\n\n\u7d50\u679c\n\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\u524d\n\n1\u56de\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\u5f8c\n\n8\u56de\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\u5f8c\n\n\u3067\u304d\u307e\u3057\u305f\u3002\u5168\u3066\u306e\u30b3\u30fc\u30c9\u306fgithub\u306b\u3082\u30a2\u30c3\u30d7\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/hagino3000/public-ipynb/blob/master/PRML/PRML%203.3.ipynb\n\n\u793e\u5185\u52c9\u5f37\u4f1a\u3067\u307c\u3061\u307c\u3061\u9032\u3081\u3066\u3044\u308bPRML\u3001\u30ab\u30e9\u30fc\u306e\u56f3\u7248\u304c\u3042\u308b\u3068\u771f\u9762\u76ee\u306b\u518d\u73fe\u3057\u305f\u304f\u306a\u308a\u307e\u3059\u3002\u4eca\u56de\u306f3.3.1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5206\u5e03\u306e\u4e8b\u5f8c\u78ba\u7387\u304c\u53ce\u675f\u3059\u308b\u69d8\u5b50\u306e\u56f3\u7248\u3092\u518d\u73fe\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u56f3\u306f\n\n1. \u76f4\u8fd1\u306e\u89b3\u6e2c\u30c7\u30fc\u30bf1\u3064\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5c24\u5ea6\n1. \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u524d/\u4e8b\u5f8c\u78ba\u7387\u5206\u5e03\n1. \u4e8b\u524d/\u4e8b\u5f8c\u78ba\u7387\u5206\u5e03\u304b\u3089\u5f97\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u308b\u3042\u3066\u306f\u3081\u7d50\u679c\n\n\u306e3\u3064\u304b\u3089\u306a\u308a\u3001\u4e8b\u5f8c\u78ba\u7387\u304c\u53ce\u675f\u3057\u3066\u3044\u304f\u69d8\u5b50\u304c\u898b\u3089\u308c\u3066\u9762\u767d\u3044\u3067\u3059\u3002\n## \u524d\u63d0\n\n- 1\u6b21\u5143\u306e\u5165\u529b\u5909\u6570$x$\u3068\u30011\u6b21\u5143\u306e\u76ee\u6a19\u5909\u6570$t$\u3092\u8003\u3048\u308b\n- $y(x, w) = w_0 + w_1x$ \u306e\u7dda\u5f62\u30e2\u30c7\u30eb\u306b\u3042\u3066\u306f\u3081\u3092\u884c\u306a\u3046\n- \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf2\u3064\u306e\u5206\u5e03\u306f\u30012\u5909\u91cf\u30ac\u30a6\u30b9\u5206\u5e03\u3068\u3059\u308b\n- \u30ce\u30a4\u30ba\u306f\u30ac\u30a6\u30b9\u30ce\u30a4\u30ba\u3068\u3059\u308b\n\n## \u5fc5\u8981\u306a\u8a08\u7b97\u90e8\u54c1\n\n\u89b3\u6e2c\u30c7\u30fc\u30bf\u304b\u3089\u8a08\u753b\u884c\u5217$\\Phi$\u306e\u4f5c\u6210\n\n```Python\ndef design_matrix(x):\n    return np.array([[1, xi] for xi in x])\n```\n\nN\u56de\u30c7\u30fc\u30bf\u3092\u89b3\u6e2c\u3057\u305f\u5f8c\u306e\u5e73\u5747 $m_N = \\beta S_N\\Phi^{T}t$ \u3092\u6c42\u3081\u308b\u95a2\u6570\n\n```Python\ndef calc_mn(alpha, beta, x, t):\n    Phi = design_matrix(x)\n    Sn = calc_Sn(alpha, beta, x)\n    return beta * Sn.dot(Phi.T).dot(t)\n```\n\nN\u56de\u30c7\u30fc\u30bf\u3092\u89b3\u6e2c\u3057\u305f\u5f8c\u306e\u5171\u5206\u6563 $S_N = (\\alpha I + \\beta\\Phi^{T}\\Phi)^{-1}$ \u3092\u6c42\u3081\u308b\u95a2\u6570\n\n```Python\nI = np.identity(2)\n\ndef calc_Sn(alpha, beta, x):\n    Phi = design_matrix(x)\n    return np.linalg.inv(alpha*I + beta*Phi.T.dot(Phi))\n```\n\n## \u89b3\u6e2c\u30c7\u30fc\u30bf\u306e\u5c24\u5ea6\n\n\u89b3\u6e2c\u30c7\u30fc\u30bf\u306f\u7cbe\u5ea6$\\beta$\u306e\u30ac\u30a6\u30b9\u30ce\u30a4\u30ba\u304c\u4e57\u308b\u4e8b\u304b\u3089\u3001\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570 \n\n```math\nlogL(w) = -\\frac{\\beta}{2}(t-w^{T}\\phi(x))^2 + cons\n```\n\u3092\u5229\u7528\u3059\u308b\u3002\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u3067\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3044\u7bc4\u56f2\u306e$w$\u3092\u6c42\u3081\u308b\u3002\n\n```Python\ndef calc_likelifood(beta, t, x, w):\n    \"\"\"\n    \u89b3\u6e2c\u50241\u3064\u306e\u5bfe\u6570\u5c24\u5ea6\u3092\u6c42\u3081\u308b\n    \"\"\"\n    w = np.array(w)\n    phi_x = np.array([1, x])\n    return -1 * beta / 2 * (t - w.T.dot(phi_x))**2\n\ndef plot_likelifood(beta, t, x, title='', ax=None):\n    \"\"\"\n    \u89b3\u6e2c\u5024\u306e\u5c24\u5ea6\u306e\u30d7\u30ed\u30c3\u30c8\n    \"\"\"\n    w0 = np.linspace(-1, 1, 100)\n    w1 = np.linspace(-1, 1, 100)\n    W0,W1 = np.meshgrid(w0, w1)\n    L = []\n    for w0i in w0:\n        L.append([calc_likelifood(beta, t, x, [w0i, w1i]) for w1i in w1])\n\n    ax.pcolor(W0, W1, np.array(L).T, cmap=plt.cm.jet, vmax=0, vmin=-1)\n    ax.set_xlabel('$w_0$')\n    ax.set_ylabel('$w_1$')\n    ax.set_title(title)\n```\n\n## \u4e8b\u5f8c\u78ba\u7387\n\n\u4e0a\u8a18\u306e\u5f0f\u3067\u6c42\u3081\u305f $m_N$\u3068$S_N$\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u305f2\u5909\u91cf\u6b63\u898f\u5206\u5e03\u304c$w$\u306e\u4e8b\u5f8c\u78ba\u7387\u5206\u5e03\u3068\u306a\u308b\u3001$m_0$\u3068$S_0$\u306e\u5834\u5408\u306f\u4e8b\u524d\u78ba\u7387\u5206\u5e03\u3002\n\n```Python\ndef plot_probability(mean, cov, title='', ax=None):\n    \"\"\"\n    \u78ba\u7387\u5206\u5e03(2\u5909\u91cf\u30ac\u30a6\u30b9)\u306e\u30d7\u30ed\u30c3\u30c8\n    \"\"\"\n    w0 = np.linspace(-1, 1, 100)\n    w1 = np.linspace(-1, 1, 100)\n    W0,W1 = np.meshgrid(w0, w1)\n    P = []\n    for w0i in w0:\n        P.append([scipy.stats.multivariate_normal.pdf([w0i,w1i], mean, cov) for w1i in w1])\n        \n    ax.pcolor(W0, W1, np.array(P).T, cmap=plt.cm.jet)\n    ax.set_xlabel('$w_0$')\n    ax.set_ylabel('$w_1$')\n    ax.set_title(title)\n```\n\n## \u30c7\u30fc\u30bf\u7a7a\u9593\n\n\u4e0a\u8a18\u306e\u5f0f\u3067\u6c42\u3081\u305f $m_N$\u3068$S_N$\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u305f2\u5909\u91cf\u6b63\u898f\u5206\u5e03\u304b\u3089$w$\u30926\u56de\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3001\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3002\n\n## \u7d50\u679c\n\n\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\u524d\n![index.png](https://qiita-image-store.s3.amazonaws.com/0/2130/477655fd-ce63-2841-73af-a13e554b0251.png)\n\n1\u56de\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\u5f8c\n![index2.png](https://qiita-image-store.s3.amazonaws.com/0/2130/ed993c33-4168-5b9c-9634-5084704f3507.png)\n\n8\u56de\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\u5f8c\n![index3.png](https://qiita-image-store.s3.amazonaws.com/0/2130/89dc1552-ab8f-24c6-b3a6-0faca6660b71.png)\n\n\n\u3067\u304d\u307e\u3057\u305f\u3002\u5168\u3066\u306e\u30b3\u30fc\u30c9\u306fgithub\u306b\u3082\u30a2\u30c3\u30d7\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/hagino3000/public-ipynb/blob/master/PRML/PRML%203.3.ipynb\n\n\n", "tags": ["Python", "PRML", "MachineLearning"]}