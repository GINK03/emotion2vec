{"context": " More than 1 year has passed since last update.\u3061\u3087\u3063\u3068WebSocket\u3092\u4f7f\u3046\u8a71\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\u8003\u3048\u3066\u307f\u308b\u3068Node.js\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u901a\u4fe1\u3092\u3059\u308b\u6642\u306fSocket.io\u304bMilkcocoa\u3092\u4f7f\u3063\u3066\u307e\u3057\u305f\u3002\n\u8abf\u3079\u308b\u3068\u305d\u3053\u307e\u3067\u30b5\u30f3\u30d7\u30eb\u3063\u307d\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u306e\u3067\u30e1\u30e2\u3057\u3066\u307f\u307e\u3059\u3002\n\nwebsocket-node\nnpm\u306a\u3069\u3067\u8abf\u3079\u308b\u3068\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30e1\u30b8\u30e3\u30fc\u3063\u307d\u3044\u3067\u3059\u306d\u3002\nhttps://github.com/theturtle32/WebSocket-Node\n$ npm i websocket\n\n\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n\u8a66\u3057\u3066\u307f\u308b\n\n\u30b5\u30fc\u30d0\u30fc\u5074\n\u516c\u5f0f\u30b5\u30f3\u30d7\u30eb\u305d\u306e\u307e\u307e\u3067\u3059\u3002\n\napp.js\n#!/usr/bin/env node\nvar WebSocketServer = require('websocket').server;\nvar http = require('http');\n\nvar server = http.createServer(function(request, response) {\n    console.log((new Date()) + ' Received request for ' + request.url);\n    response.writeHead(404);\n    response.end();\n});\nserver.listen(8080, function() {\n    console.log((new Date()) + ' Server is listening on port 8080');\n});\n\nwsServer = new WebSocketServer({\n    httpServer: server,\n    // You should not use autoAcceptConnections for production\n    // applications, as it defeats all standard cross-origin protection\n    // facilities built into the protocol and the browser.  You should\n    // *always* verify the connection's origin and decide whether or not\n    // to accept it.\n    autoAcceptConnections: false\n});\n\nfunction originIsAllowed(origin) {\n  // put logic here to detect whether the specified origin is allowed.\n  return true;\n}\n\nwsServer.on('request', function(request) {\n    if (!originIsAllowed(request.origin)) {\n      // Make sure we only accept requests from an allowed origin\n      request.reject();\n      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');\n      return;\n    }\n\n    var connection = request.accept('echo-protocol', request.origin);\n    console.log((new Date()) + ' Connection accepted.');\n    connection.on('message', function(message) {\n        if (message.type === 'utf8') {\n            console.log('Received Message: ' + message.utf8Data);\n            connection.sendUTF(message.utf8Data);\n        }\n        else if (message.type === 'binary') {\n            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');\n            connection.sendBytes(message.binaryData);\n        }\n    });\n    connection.on('close', function(reasonCode, description) {\n        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\n    });\n});\n\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\n\nclient-node.js\n#!/usr/bin/env node\nvar WebSocketClient = require('websocket').client;\n\nvar client = new WebSocketClient();\n\nclient.on('connectFailed', function(error) {\n    console.log('Connect Error: ' + error.toString());\n});\n\nclient.on('connect', function(connection) {\n    console.log('WebSocket Client Connected');\n    connection.on('error', function(error) {\n        console.log(\"Connection Error: \" + error.toString());\n    });\n    connection.on('close', function() {\n        console.log('echo-protocol Connection Closed');\n    });\n    connection.on('message', function(message) {\n        if (message.type === 'utf8') {\n            console.log(\"Received: '\" + message.utf8Data + \"'\");\n        }\n    });\n\n    function sendNumber() {\n        if (connection.connected) {\n            var number = Math.round(Math.random() * 0xFFFFFF);\n            connection.sendUTF(number.toString());\n            setTimeout(sendNumber, 1000);\n        }\n    }\n    sendNumber();\n});\n\nclient.connect('ws://localhost:8080/', 'echo-protocol');\n\n\n\n\n\u5b9f\u884c\n\u53f3\u304c\u30b5\u30fc\u30d0\u30fc\u5074\u3001\u5de6\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\n\n\u3069\u3063\u3061\u3082Node.js\u3067\u5b9f\u884c\u3067\u3059\u3002\n\n\u30d6\u30e9\u30a6\u30b6\u5074\u3082\u66f8\u3044\u3066\u307f\u308b\n\u4ee5\u4e0b\u3092\u53c2\u8003\n\nWebSocket \u306e\u5c0e\u5165: \u30a6\u30a7\u30d6\u306b\u30bd\u30b1\u30c3\u30c8\u3092\u5b9f\u88c5\u3059\u308b\n\n\nvar ws = new WebSocket('ws://localhost:8080/',['echo-protocol','soap', 'xmpp']);\n\nws.onopen = function() {//WS\u63a5\u7d9a\u78ba\u7acb\n   ws.send('hello');\n };\n\n// Log errors\nws.onerror = function (error) {\n  console.log('WebSocket Error ' + error);\n};\n\n// Log messages from the server\nws.onmessage = function (e) {\n  console.log('Server: ' + e.data);\n};\n\n\n\u3061\u306a\u307f\u306becho-protocol\u3092\u66f8\u3044\u3066\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3067Node.js\u5074\u304c\u6b7b\u3093\u3058\u3083\u3044\u307e\u3057\u305f\u306d\nWebSocketRequest.js:289\n            throw new Error('Specified protocol was not requested by the client.');\n            ^\n\nError: Specified protocol was not requested by the client.\n    at WebSocketRequest.accept (/Users/sugawara_nobisuke/n0bisuke/lig/devrel/#18.NTT_AT/src/wssample/node_modules/websocket/lib/WebSocketRequest.js:289:19)\n    at WebSocketServer.<anonymous> (/Users/sugawara_nobisuke/n0bisuke/lig/devrel/#18.NTT_AT/src/wssample/app.js:37:30)\n    at emitOne (events.js:90:13)\n    at WebSocketServer.emit (events.js:182:7)\n    at WebSocketServer.handleUpgrade (/Users/sugawara_nobisuke/n0bisuke/lig/devrel/#18.NTT_AT/src/wssample/node_modules/websocket/lib/WebSocketServer.js:213:14)\n    at emitThree (events.js:110:13)\n    at Server.emit (events.js:188:7)\n    at onParserExecuteCommon (_http_server.js:400:14)\n    at HTTPParser.onParserExecute (_http_server.js:368:5)\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5074\u3067\u3046\u307e\u3044\u3053\u3068\u3084\u3063\u3066\u304f\u308c\u305f\u3089\u3044\u3044\u3093\u3067\u3059\u3051\u3069\u3001\u3053\u306e\u8fba\u306fsocket.io\u3055\u3059\u304c\u3067\u3059\u3002\n\n\u307e\u3068\u3081\nWebsocekt\u306e\u30d6\u30e9\u30a6\u30b6\u5bfe\u5fdc\u72b6\u6cc1\u3063\u3066\u4e45\u3005\u306b\u307f\u305f\u3089\u3051\u3063\u3053\u3046\u5bfe\u5fdc\u3057\u3066\u308b\u3093\u3067\u3059\u306d\u3002\n\n\u53e4\u3044Android\u3084IE\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u7d20\u306eWebsocket\u3067\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3082\u601d\u3063\u305f\u308a\u3002\u3067\u3082\u5c11\u3057\u8a66\u3057\u3066\u307f\u3066\u3001Socket.io\u306e\u4f7f\u3044\u52dd\u624b\u306f\u304b\u306a\u308a\u3044\u3044\u3068\u6539\u3081\u3066\u601d\u3044\u307e\u3057\u305f\u3002\n\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u3060\u3063\u305f\u3089Milkcocoa\u4f7f\u304a\u3046\u3002\n\n\u3061\u3087\u3063\u3068WebSocket\u3092\u4f7f\u3046\u8a71\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u8003\u3048\u3066\u307f\u308b\u3068Node.js\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u901a\u4fe1\u3092\u3059\u308b\u6642\u306f[Socket.io](http://socket.io/)\u304b[Milkcocoa](https://mlkcca.com)\u3092\u4f7f\u3063\u3066\u307e\u3057\u305f\u3002\n\n\u8abf\u3079\u308b\u3068\u305d\u3053\u307e\u3067\u30b5\u30f3\u30d7\u30eb\u3063\u307d\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u306e\u3067\u30e1\u30e2\u3057\u3066\u307f\u307e\u3059\u3002\n\n## websocket-node\n\n\nnpm\u306a\u3069\u3067\u8abf\u3079\u308b\u3068\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30e1\u30b8\u30e3\u30fc\u3063\u307d\u3044\u3067\u3059\u306d\u3002\nhttps://github.com/theturtle32/WebSocket-Node\n\n```\n$ npm i websocket\n```\n\n\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n##\u8a66\u3057\u3066\u307f\u308b\n\n###\u30b5\u30fc\u30d0\u30fc\u5074\n\n\u516c\u5f0f\u30b5\u30f3\u30d7\u30eb\u305d\u306e\u307e\u307e\u3067\u3059\u3002\n\n```app.js\n#!/usr/bin/env node\nvar WebSocketServer = require('websocket').server;\nvar http = require('http');\n\nvar server = http.createServer(function(request, response) {\n    console.log((new Date()) + ' Received request for ' + request.url);\n    response.writeHead(404);\n    response.end();\n});\nserver.listen(8080, function() {\n    console.log((new Date()) + ' Server is listening on port 8080');\n});\n\nwsServer = new WebSocketServer({\n    httpServer: server,\n    // You should not use autoAcceptConnections for production\n    // applications, as it defeats all standard cross-origin protection\n    // facilities built into the protocol and the browser.  You should\n    // *always* verify the connection's origin and decide whether or not\n    // to accept it.\n    autoAcceptConnections: false\n});\n\nfunction originIsAllowed(origin) {\n  // put logic here to detect whether the specified origin is allowed.\n  return true;\n}\n\nwsServer.on('request', function(request) {\n    if (!originIsAllowed(request.origin)) {\n      // Make sure we only accept requests from an allowed origin\n      request.reject();\n      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');\n      return;\n    }\n\n    var connection = request.accept('echo-protocol', request.origin);\n    console.log((new Date()) + ' Connection accepted.');\n    connection.on('message', function(message) {\n        if (message.type === 'utf8') {\n            console.log('Received Message: ' + message.utf8Data);\n            connection.sendUTF(message.utf8Data);\n        }\n        else if (message.type === 'binary') {\n            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');\n            connection.sendBytes(message.binaryData);\n        }\n    });\n    connection.on('close', function(reasonCode, description) {\n        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\n    });\n});\n\n```\n\n### \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\n\n```client-node.js\n#!/usr/bin/env node\nvar WebSocketClient = require('websocket').client;\n\nvar client = new WebSocketClient();\n\nclient.on('connectFailed', function(error) {\n    console.log('Connect Error: ' + error.toString());\n});\n\nclient.on('connect', function(connection) {\n    console.log('WebSocket Client Connected');\n    connection.on('error', function(error) {\n        console.log(\"Connection Error: \" + error.toString());\n    });\n    connection.on('close', function() {\n        console.log('echo-protocol Connection Closed');\n    });\n    connection.on('message', function(message) {\n        if (message.type === 'utf8') {\n            console.log(\"Received: '\" + message.utf8Data + \"'\");\n        }\n    });\n\n    function sendNumber() {\n        if (connection.connected) {\n            var number = Math.round(Math.random() * 0xFFFFFF);\n            connection.sendUTF(number.toString());\n            setTimeout(sendNumber, 1000);\n        }\n    }\n    sendNumber();\n});\n\nclient.connect('ws://localhost:8080/', 'echo-protocol');\n\n```\n\n\n###\u5b9f\u884c\n\n\u53f3\u304c\u30b5\u30fc\u30d0\u30fc\u5074\u3001\u5de6\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\n![](https://i.gyazo.com/a9fe9b0d344fc70832a3a5a811551934.gif)\n\n\u3069\u3063\u3061\u3082Node.js\u3067\u5b9f\u884c\u3067\u3059\u3002\n\n\n## \u30d6\u30e9\u30a6\u30b6\u5074\u3082\u66f8\u3044\u3066\u307f\u308b\n\n\u4ee5\u4e0b\u3092\u53c2\u8003\n\n>[WebSocket \u306e\u5c0e\u5165: \u30a6\u30a7\u30d6\u306b\u30bd\u30b1\u30c3\u30c8\u3092\u5b9f\u88c5\u3059\u308b](http://www.html5rocks.com/ja/tutorials/websockets/basics/)\n\n\u0010![](https://i.gyazo.com/2868731a636e8e1c14e9505d51dc9b2d.png)\n\n```\nvar ws = new WebSocket('ws://localhost:8080/',['echo-protocol','soap', 'xmpp']);\n\nws.onopen = function() {//WS\u63a5\u7d9a\u78ba\u7acb\n   ws.send('hello');\n };\n\n// Log errors\nws.onerror = function (error) {\n  console.log('WebSocket Error ' + error);\n};\n\n// Log messages from the server\nws.onmessage = function (e) {\n  console.log('Server: ' + e.data);\n};\n\n```\n\n\u3061\u306a\u307f\u306b`echo-protocol`\u3092\u66f8\u3044\u3066\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3067Node.js\u5074\u304c\u6b7b\u3093\u3058\u3083\u3044\u307e\u3057\u305f\u306d\n\n```\nWebSocketRequest.js:289\n            throw new Error('Specified protocol was not requested by the client.');\n            ^\n\nError: Specified protocol was not requested by the client.\n    at WebSocketRequest.accept (/Users/sugawara_nobisuke/n0bisuke/lig/devrel/#18.NTT_AT/src/wssample/node_modules/websocket/lib/WebSocketRequest.js:289:19)\n    at WebSocketServer.<anonymous> (/Users/sugawara_nobisuke/n0bisuke/lig/devrel/#18.NTT_AT/src/wssample/app.js:37:30)\n    at emitOne (events.js:90:13)\n    at WebSocketServer.emit (events.js:182:7)\n    at WebSocketServer.handleUpgrade (/Users/sugawara_nobisuke/n0bisuke/lig/devrel/#18.NTT_AT/src/wssample/node_modules/websocket/lib/WebSocketServer.js:213:14)\n    at emitThree (events.js:110:13)\n    at Server.emit (events.js:188:7)\n    at onParserExecuteCommon (_http_server.js:400:14)\n    at HTTPParser.onParserExecute (_http_server.js:368:5)\n```\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5074\u3067\u3046\u307e\u3044\u3053\u3068\u3084\u3063\u3066\u304f\u308c\u305f\u3089\u3044\u3044\u3093\u3067\u3059\u3051\u3069\u3001\u3053\u306e\u8fba\u306fsocket.io\u3055\u3059\u304c\u3067\u3059\u3002\n\n##\u307e\u3068\u3081\n\nWebsocekt\u306e\u30d6\u30e9\u30a6\u30b6\u5bfe\u5fdc\u72b6\u6cc1\u3063\u3066\u4e45\u3005\u306b\u307f\u305f\u3089\u3051\u3063\u3053\u3046\u5bfe\u5fdc\u3057\u3066\u308b\u3093\u3067\u3059\u306d\u3002\n\n\u0010![](https://i.gyazo.com/16946f975fe0f4635cb1d611fe04c190.png)\n\n\u53e4\u3044Android\u3084IE\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u7d20\u306eWebsocket\u3067\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3082\u601d\u3063\u305f\u308a\u3002\u3067\u3082\u5c11\u3057\u8a66\u3057\u3066\u307f\u3066\u3001Socket.io\u306e\u4f7f\u3044\u52dd\u624b\u306f\u304b\u306a\u308a\u3044\u3044\u3068\u6539\u3081\u3066\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u3060\u3063\u305f\u3089Milkcocoa\u4f7f\u304a\u3046\u3002\n", "tags": ["websocket", "JavaScript", "Node.js"]}