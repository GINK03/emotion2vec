{"tags": ["Python", "TCP", "Capture", "replay", "HTTP"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u3001UDP\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u3092\u8a66\u3057\u305f\u306e\u3067\u3001\u4eca\u5ea6\u306fTCP\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002UDP\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30ec\u30b9\u3067\u3042\u308a\u3001TCP\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u65b9\u5f0f\u306a\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u3060\u3051\u66f8\u304d\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u3093\u3067\u79c1\u304c\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u306b\u3064\u3044\u3066\u8abf\u67fb\u3057\u3066\u3044\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u30b9\u30bf\u30d6\u3092\u5236\u4f5c\u3057\u305f\u3044\u304b\u3089\u3067\u3059\u3002TCP\u3084UDP\u306e\u958b\u767a\u3092\u3059\u308b\u969b\u306b\u3001\u7406\u5c48\u3068\u3057\u3066\u306f\u30b5\u30fc\u30d0\u5074\u304c\u306a\u304f\u3066\u3082\u4ed5\u69d8\u66f8\u304c\u3042\u308c\u3070\u958b\u767a\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u52d5\u4f5c\u78ba\u8a8d\u3057\u306a\u304c\u3089\u4f7f\u3044\u305f\u3044\u3082\u306e\u3002\u305f\u3060\u3001\u3044\u3064\u3082\u30b5\u30fc\u30d0\u304c\u8fd1\u304f\u306b\u3042\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306a\u3069\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u305d\u306e\u501f\u7528\u671f\u9593\u304c\u9650\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u501f\u7528\u671f\u9593\u5185\u306b\u5fdc\u7b54\u5024\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u304a\u304d\u3001\u8fd4\u5374\u5f8c\u3082\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u30ed\u30b0\u3092\u4f7f\u3063\u3066\u958b\u767a\u3092\u7d9a\u3051\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u74b0\u5883\nOS X El Capitan 10.11\nPython 2.7.11\n\n\u52d5\u4f5c\u30a4\u30e1\u30fc\u30b8\n\nCapture\u30e2\u30fc\u30c9\n+-----------+     +-----------------+     +-----------+\n|HTTP Client|---->|Capture_Replay.py|---->|HTTP Server|\n|           |<----|                 |<----|           |\n+-----------+     +--------|--------+     +-----------+\n                           v\n                   +---------------+\n                   |capture_tcp.log|\n                   +---------------+\n\n\n\nReplay\u30e2\u30fc\u30c9\n+-----------+     +-----------------+\n|HTTP Client|---->|Capture_Replay.py|\n|           |<----|                 |\n+-----------+     +-----------------+\n                           ^\n                   +-------|-------+\n                   |capture_tcp.log|\n                   +---------------+\n\n\n\n\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3(Capture\u30e2\u30fc\u30c9)\n+-----------+    +-----------+    +-----------+\n|HTTP Client|    |Capture &  |    |HTTP Server|\n|           |    |Replay     |    |           |\n+-----+-----+    +-----+-----+    +-----+-----+\n      |                |                |\n      |                |                |   start server\n      |                |                | ----+ \n      |                |                | <---+ \n      |                |  bind          |\n      |                |----+           |\n      |                |<---+           |\n      |                |  listen        |\n      |                |----+           |\n      |                |<---+           |\n      |  connect       |                |\n      |--------------->|                |\n      |  accept        |                |\n      |<---------------|                |\n      |  send/recv     |                |\n      |--------------->|                |\n      |                |  connect       |\n      |                |--------------->|\n      |                |  accept        |\n      |                |<---------------|\n      |                |  send/recv     |\n      |                |--------------->|\n      |                |  recv/send     |\n      |                |<---------------|\n      |                |  close         |\n      |                |--------------->|\n      |  recv/send     |                |\n      |<---------------|                |\n      |  close         |                |\n      |<---------------|                |\n      |                |                |\n      |                |                |\n\n\n\n\u5b9f\u88c5\n\ntcp_capture_replay.py\nimport socket\nimport urllib\n\nstub_mode = 'replay'\n#stub_mode = 'capture'\n\nTCP_IP_LISTEN = \"localhost\"\nTCP_PORT_LISTEN = 60001\nTCP_IP_TO = \"localhost\"\nTCP_PORT_TO = 60000\nBUFFER_SIZE = 4096\nCAPTURE_LOG_FILENAME = 'capture_tcp.log'\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # TCP\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nsock.bind((TCP_IP_LISTEN, TCP_PORT_LISTEN))\nsock.listen(5)\n\ncache = []\ncaptured_data = []\ncaptured_data_dic = {}\n\nif stub_mode == 'capture':\n    f = open(CAPTURE_LOG_FILENAME, 'a')\nelif stub_mode == 'replay':\n    f = open(CAPTURE_LOG_FILENAME, 'r')\n    captured_data = f.readlines()\n    for i in range(len(captured_data)):\n        if 'Requested' in captured_data[i]:\n           key = urllib.unquote(captured_data[i+3].rstrip())\n           value = urllib.unquote(captured_data[i+3+4].rstrip())\n           captured_data_dic[key] = value\n\nwhile True:\n    if stub_mode == 'capture':\n        # send to remote server\n        conn, (host_request, port_request) = sock.accept()\n\n        data_request = ''\n        while True:\n            tmp = conn.recv(BUFFER_SIZE)\n            data_request += tmp\n            if b'\\r\\n\\r\\n' in tmp or tmp == b'\\r\\n' or tmp == '':\n                break\n\n        print 'Requested:'\n        print data_request, host_request, port_request\n        print urllib.quote(data_request), host_request, port_request\n        print\n\n        f.write(urllib.quote('Requested data') + '\\n')\n        f.write(urllib.quote(host_request) + '\\n')\n        f.write(urllib.quote(str(port_request)) + '\\n')\n        f.write(urllib.quote(data_request) + '\\n')\n        sock_remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # TCP\n        sock_remote.connect((TCP_IP_TO, TCP_PORT_TO))\n        sock_remote.send(data_request)\n\n        # receive from remote server\n        data_response = ''\n        while True:\n            tmp = sock_remote.recv(BUFFER_SIZE)\n            data_response += tmp\n            if b'\\r\\n\\r\\n' in tmp or tmp == b'\\r\\n' or tmp == '':\n                break\n\n        sock_remote.close()\n\n        f.write(urllib.quote('Responsed data') + '\\n')\n        f.write(urllib.quote(TCP_IP_TO) + '\\n')\n        f.write(urllib.quote(str(TCP_PORT_TO)) + '\\n')\n        f.write(urllib.quote(data_response) + '\\n')\n        f.write('\\n')\n\n        conn.send(data_response)\n        print 'responsed:'\n        print data_response, TCP_IP_LISTEN, port_request\n        print urllib.quote(data_response), TCP_IP_LISTEN, port_request\n        print '---------------------------'\n        conn.close()\n\n    elif stub_mode == 'replay':\n        conn, (host_request, port_request) = sock.accept()\n\n        data_request = ''\n        while True:\n            tmp = conn.recv(BUFFER_SIZE)\n            data_request += tmp\n            if b'\\r\\n\\r\\n' in tmp or tmp == b'\\r\\n' or tmp == '':\n                break\n\n        print 'Requested:'\n        print data_request, host_request, port_request\n        print urllib.quote(data_request), host_request, port_request\n        print\n\n        try:\n            ret_data = captured_data_dic[data_request]\n            conn.send(ret_data)\n            print 'responsed:'\n            print ret_data, TCP_IP_LISTEN, port_request\n            print urllib.quote(ret_data), TCP_IP_LISTEN, port_request\n            print '---------------------------'\n        except:\n            ret_data = 'not found'\n            print 'ERROR: Key error'\n        finally:\n            conn.close()\n\n    else:\n        print 'error'\n        break\n\n\n\u89e3\u8aac1\nsocket.SO_REUSEADDR\u306f\u3001\u591a\u91cd\u3067bind\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u3002\n\u901a\u5e38\u306f\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3092\u7d42\u308f\u3089\u305b\u308b\u969b\u306b\u304d\u3061\u3093\u3068close\u3055\u305b\u308b\u306e\u3067\u3059\u304c\u3001\u30c7\u30d0\u30c3\u30b0\u4e2d\u306a\u3069\u306f\u4f8b\u5916\u3067\u7d42\u4e86\u3057\u3066\u3057\u307e\u3044\u304d\u3061\u3093\u3068close\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\u304c\u591a\u3044\u306e\u3067\u3001\u3053\u306e\u30d5\u30e9\u30b0\u3092\u30aa\u30f3\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://stackoverflow.com/questions/29217502/socket-error-address-already-in-use\n\u89e3\u8aac2\nconn.recv\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u7d42\u7aef\u304c\\r\\n\\r\\n\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u305d\u308c\u3092\u53d7\u3051\u308b\u307e\u3067\u306f\u53d7\u4fe1\u3092\u7d9a\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u3088\u3063\u3066\u306f\u30011\u56de\u3067\u3059\u3079\u3066\u306e\u53d7\u4fe1\u3067\u304d\u308b\u5834\u5408(\u901a\u5e38\u306e\u30d6\u30e9\u30a6\u30b6)\u3084\u30011\u884c\u305a\u3064\u53d7\u4fe1(Telnet)\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u30af\u30a2\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u9001\u4fe1\u5f62\u614b\u306b\u5408\u308f\u305b\u3066\u3001\u7d42\u7aef\u3092\u691c\u51fa\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6bce\u56de\u5168\u30c7\u30fc\u30bf\u306e\u7d42\u7aef\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308c\u3070\u691c\u51fa\u30d1\u30bf\u30fc\u30f3\u306f\\r\\n\\r\\n\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\u3002\n\u89e3\u8aac3\nHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304cResponse\u3092\u53d7\u4fe1\u3067\u304d\u305f\u3089\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u30af\u30ed\u30fc\u30ba\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u7dad\u6301\u3055\u305b\u308b\u3070\u3042\u3044\u306f\u3001\u30b5\u30fc\u30d0\u5074\u304b\u3089\u5207\u65ad\u3055\u308c\u308b\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u305f\u3081\u306e\u8003\u616e\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u89e3\u8aac4\nTCP\u306fUDP\u3068\u7570\u306a\u308a\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u30af\u30ed\u30fc\u30ba\u3055\u305b\u305f\u3089\u3001\u518d\u5ea6\u30bd\u30b1\u30c3\u30c8\u304b\u3089\u306e\u4f5c\u6210\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002connect\u304b\u3089\u3067\u306f\u30c0\u30e1\u306a\u3088\u3046\u3067\u3059\u3002\n\n\u6e96\u5099\nPython\u306eSimpleHTTPServer\u3092\u4f7f\u3063\u3066\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u307e\u3059\u3002\n\u8868\u793a\u3059\u308bHTML\u3092\u6e96\u5099\u3002\n\nindex.html\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\n\n\nSimpleHTTPSever\u3092\u8d77\u52d5\u3002\n\nHTTP\u30b5\u30fc\u30d0\n$ python -m SimpleHTTPServer 60000\nServing HTTP on 0.0.0.0 port 60000 ...\n\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u3092\u8d77\u52d5\u3002\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\n$ sudo python tcp_capture_replay.py \n\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\u9069\u5f53\u306aHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u7528\u610f\u3059\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001Telnet\u3067HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3057\u307e\u3057\u305f\u3002\n\nCapture\u30e2\u30fc\u30c9\n\nHTTP\u30af\u30a2\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306eRequest\u3068Response\n$ telnet 127.0.0.1  60001\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nGET /\n\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\nConnection closed by foreign host.\n\n\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u306e\u30ed\u30b0\n$ sudo python tcp_capture_replay.py \nRequested:\nGET /\n\n127.0.0.1 56607\nGET%20/%0D%0A%0D%0A 127.0.0.1 56607\n\nresponsed:\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\nlocalhost 56607\n%3CHTML%3E%3CHEAD%3E%3C/HEAD%3E%3CBODY%3ETEST%3C/BODY%3E%3C/HTML%3E%0A localhost 56607\n\n\n\nReplay\u30e2\u30fc\u30c9\n\nHTTP\u30af\u30a2\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306eRequest\u3068Response\n$ telnet 127.0.0.1  60001\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nGET /\n\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\nConnection closed by foreign host.\n\n\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u306e\u30ed\u30b0\n$ sudo python tcp_capture_replay.py \nRequested:\nGET /\n\n127.0.0.1 56611\nGET%20/%0D%0A%0D%0A 127.0.0.1 56611\n\nresponsed:\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\nlocalhost 56611\n%3CHTML%3E%3CHEAD%3E%3C/HEAD%3E%3CBODY%3ETEST%3C/BODY%3E%3C/HTML%3E%0A localhost 56611\n\n\n\n\u4eca\u5f8c\n\u3053\u306e\u65b9\u6cd5\u306f\u3001SSL\u4e0a\u3067\u3082\u4f7f\u3048\u307e\u3059\u3057\u3001SOAP\u3084REST\u3067\u3082\u4f7f\u3048\u308b\u65b9\u6cd5\u306a\u306e\u3067\u3001\u5fdc\u7528\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\nhttps://docs.python.org/2/howto/sockets.html\nhttp://qiita.com/higuma/items/b23ca9d96dac49999ab9\nhttp://stackoverflow.com/questions/29217502/socket-error-address-already-in-use\nhttp://memo.saitodev.com/home/python_network_programing/\n\n# \u306f\u3058\u3081\u306b\n\u4ee5\u524d\u3001UDP\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u3092\u8a66\u3057\u305f\u306e\u3067\u3001\u4eca\u5ea6\u306fTCP\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002UDP\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30ec\u30b9\u3067\u3042\u308a\u3001TCP\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u65b9\u5f0f\u306a\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u3060\u3051\u66f8\u304d\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u3093\u3067\u79c1\u304c\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u306b\u3064\u3044\u3066\u8abf\u67fb\u3057\u3066\u3044\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u30b9\u30bf\u30d6\u3092\u5236\u4f5c\u3057\u305f\u3044\u304b\u3089\u3067\u3059\u3002TCP\u3084UDP\u306e\u958b\u767a\u3092\u3059\u308b\u969b\u306b\u3001\u7406\u5c48\u3068\u3057\u3066\u306f\u30b5\u30fc\u30d0\u5074\u304c\u306a\u304f\u3066\u3082\u4ed5\u69d8\u66f8\u304c\u3042\u308c\u3070\u958b\u767a\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u52d5\u4f5c\u78ba\u8a8d\u3057\u306a\u304c\u3089\u4f7f\u3044\u305f\u3044\u3082\u306e\u3002\u305f\u3060\u3001\u3044\u3064\u3082\u30b5\u30fc\u30d0\u304c\u8fd1\u304f\u306b\u3042\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306a\u3069\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u305d\u306e\u501f\u7528\u671f\u9593\u304c\u9650\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u501f\u7528\u671f\u9593\u5185\u306b\u5fdc\u7b54\u5024\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u304a\u304d\u3001\u8fd4\u5374\u5f8c\u3082\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u30ed\u30b0\u3092\u4f7f\u3063\u3066\u958b\u767a\u3092\u7d9a\u3051\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u74b0\u5883\nOS X El Capitan 10.11\nPython 2.7.11\n\n# \u52d5\u4f5c\u30a4\u30e1\u30fc\u30b8\n\n```lang:Capture\u30e2\u30fc\u30c9\n+-----------+     +-----------------+     +-----------+\n|HTTP Client|---->|Capture_Replay.py|---->|HTTP Server|\n|           |<----|                 |<----|           |\n+-----------+     +--------|--------+     +-----------+\n                           v\n                   +---------------+\n                   |capture_tcp.log|\n                   +---------------+\n```\n\n```lang:Replay\u30e2\u30fc\u30c9\n+-----------+     +-----------------+\n|HTTP Client|---->|Capture_Replay.py|\n|           |<----|                 |\n+-----------+     +-----------------+\n                           ^\n                   +-------|-------+\n                   |capture_tcp.log|\n                   +---------------+\n```\n```lang:\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3(Capture\u30e2\u30fc\u30c9)\n+-----------+    +-----------+    +-----------+\n|HTTP Client|    |Capture &  |    |HTTP Server|\n|           |    |Replay     |    |           |\n+-----+-----+    +-----+-----+    +-----+-----+\n      |                |                |\n      |                |                |   start server\n      |                |                | ----+ \n      |                |                | <---+ \n      |                |  bind          |\n      |                |----+           |\n      |                |<---+           |\n      |                |  listen        |\n      |                |----+           |\n      |                |<---+           |\n      |  connect       |                |\n      |--------------->|                |\n      |  accept        |                |\n      |<---------------|                |\n      |  send/recv     |                |\n      |--------------->|                |\n      |                |  connect       |\n      |                |--------------->|\n      |                |  accept        |\n      |                |<---------------|\n      |                |  send/recv     |\n      |                |--------------->|\n      |                |  recv/send     |\n      |                |<---------------|\n      |                |  close         |\n      |                |--------------->|\n      |  recv/send     |                |\n      |<---------------|                |\n      |  close         |                |\n      |<---------------|                |\n      |                |                |\n      |                |                |\n```\n\n# \u5b9f\u88c5\n\n```py:tcp_capture_replay.py\nimport socket\nimport urllib\n\nstub_mode = 'replay'\n#stub_mode = 'capture'\n\nTCP_IP_LISTEN = \"localhost\"\nTCP_PORT_LISTEN = 60001\nTCP_IP_TO = \"localhost\"\nTCP_PORT_TO = 60000\nBUFFER_SIZE = 4096\nCAPTURE_LOG_FILENAME = 'capture_tcp.log'\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # TCP\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nsock.bind((TCP_IP_LISTEN, TCP_PORT_LISTEN))\nsock.listen(5)\n\ncache = []\ncaptured_data = []\ncaptured_data_dic = {}\n\nif stub_mode == 'capture':\n    f = open(CAPTURE_LOG_FILENAME, 'a')\nelif stub_mode == 'replay':\n    f = open(CAPTURE_LOG_FILENAME, 'r')\n    captured_data = f.readlines()\n    for i in range(len(captured_data)):\n        if 'Requested' in captured_data[i]:\n           key = urllib.unquote(captured_data[i+3].rstrip())\n           value = urllib.unquote(captured_data[i+3+4].rstrip())\n           captured_data_dic[key] = value\n\nwhile True:\n    if stub_mode == 'capture':\n        # send to remote server\n        conn, (host_request, port_request) = sock.accept()\n\n        data_request = ''\n        while True:\n            tmp = conn.recv(BUFFER_SIZE)\n            data_request += tmp\n            if b'\\r\\n\\r\\n' in tmp or tmp == b'\\r\\n' or tmp == '':\n                break\n\n        print 'Requested:'\n        print data_request, host_request, port_request\n        print urllib.quote(data_request), host_request, port_request\n        print\n\n        f.write(urllib.quote('Requested data') + '\\n')\n        f.write(urllib.quote(host_request) + '\\n')\n        f.write(urllib.quote(str(port_request)) + '\\n')\n        f.write(urllib.quote(data_request) + '\\n')\n        sock_remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # TCP\n        sock_remote.connect((TCP_IP_TO, TCP_PORT_TO))\n        sock_remote.send(data_request)\n\n        # receive from remote server\n        data_response = ''\n        while True:\n            tmp = sock_remote.recv(BUFFER_SIZE)\n            data_response += tmp\n            if b'\\r\\n\\r\\n' in tmp or tmp == b'\\r\\n' or tmp == '':\n                break\n\n        sock_remote.close()\n\n        f.write(urllib.quote('Responsed data') + '\\n')\n        f.write(urllib.quote(TCP_IP_TO) + '\\n')\n        f.write(urllib.quote(str(TCP_PORT_TO)) + '\\n')\n        f.write(urllib.quote(data_response) + '\\n')\n        f.write('\\n')\n\n        conn.send(data_response)\n        print 'responsed:'\n        print data_response, TCP_IP_LISTEN, port_request\n        print urllib.quote(data_response), TCP_IP_LISTEN, port_request\n        print '---------------------------'\n        conn.close()\n\n    elif stub_mode == 'replay':\n        conn, (host_request, port_request) = sock.accept()\n\n        data_request = ''\n        while True:\n            tmp = conn.recv(BUFFER_SIZE)\n            data_request += tmp\n            if b'\\r\\n\\r\\n' in tmp or tmp == b'\\r\\n' or tmp == '':\n                break\n\n        print 'Requested:'\n        print data_request, host_request, port_request\n        print urllib.quote(data_request), host_request, port_request\n        print\n\n        try:\n            ret_data = captured_data_dic[data_request]\n            conn.send(ret_data)\n            print 'responsed:'\n            print ret_data, TCP_IP_LISTEN, port_request\n            print urllib.quote(ret_data), TCP_IP_LISTEN, port_request\n            print '---------------------------'\n        except:\n            ret_data = 'not found'\n            print 'ERROR: Key error'\n        finally:\n            conn.close()\n\n    else:\n        print 'error'\n        break\n```\n\n\u89e3\u8aac1\nsocket.SO_REUSEADDR\u306f\u3001\u591a\u91cd\u3067bind\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u3002\n\u901a\u5e38\u306f\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3092\u7d42\u308f\u3089\u305b\u308b\u969b\u306b\u304d\u3061\u3093\u3068close\u3055\u305b\u308b\u306e\u3067\u3059\u304c\u3001\u30c7\u30d0\u30c3\u30b0\u4e2d\u306a\u3069\u306f\u4f8b\u5916\u3067\u7d42\u4e86\u3057\u3066\u3057\u307e\u3044\u304d\u3061\u3093\u3068close\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\u304c\u591a\u3044\u306e\u3067\u3001\u3053\u306e\u30d5\u30e9\u30b0\u3092\u30aa\u30f3\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://stackoverflow.com/questions/29217502/socket-error-address-already-in-use\n\n\u89e3\u8aac2\nconn.recv\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u7d42\u7aef\u304c\\r\\n\\r\\n\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u305d\u308c\u3092\u53d7\u3051\u308b\u307e\u3067\u306f\u53d7\u4fe1\u3092\u7d9a\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u3088\u3063\u3066\u306f\u30011\u56de\u3067\u3059\u3079\u3066\u306e\u53d7\u4fe1\u3067\u304d\u308b\u5834\u5408(\u901a\u5e38\u306e\u30d6\u30e9\u30a6\u30b6)\u3084\u30011\u884c\u305a\u3064\u53d7\u4fe1(Telnet)\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u30af\u30a2\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u9001\u4fe1\u5f62\u614b\u306b\u5408\u308f\u305b\u3066\u3001\u7d42\u7aef\u3092\u691c\u51fa\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6bce\u56de\u5168\u30c7\u30fc\u30bf\u306e\u7d42\u7aef\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308c\u3070\u691c\u51fa\u30d1\u30bf\u30fc\u30f3\u306f\\r\\n\\r\\n\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\u3002\n\n\u89e3\u8aac3\nHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304cResponse\u3092\u53d7\u4fe1\u3067\u304d\u305f\u3089\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u30af\u30ed\u30fc\u30ba\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u7dad\u6301\u3055\u305b\u308b\u3070\u3042\u3044\u306f\u3001\u30b5\u30fc\u30d0\u5074\u304b\u3089\u5207\u65ad\u3055\u308c\u308b\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u305f\u3081\u306e\u8003\u616e\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u89e3\u8aac4\nTCP\u306fUDP\u3068\u7570\u306a\u308a\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u30af\u30ed\u30fc\u30ba\u3055\u305b\u305f\u3089\u3001\u518d\u5ea6\u30bd\u30b1\u30c3\u30c8\u304b\u3089\u306e\u4f5c\u6210\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002connect\u304b\u3089\u3067\u306f\u30c0\u30e1\u306a\u3088\u3046\u3067\u3059\u3002\n\n# \u6e96\u5099\n\nPython\u306eSimpleHTTPServer\u3092\u4f7f\u3063\u3066\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u307e\u3059\u3002\n\n\u8868\u793a\u3059\u308bHTML\u3092\u6e96\u5099\u3002\n\n```html:index.html\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\n```\n\nSimpleHTTPSever\u3092\u8d77\u52d5\u3002\n\n```sh:HTTP\u30b5\u30fc\u30d0\n$ python -m SimpleHTTPServer 60000\nServing HTTP on 0.0.0.0 port 60000 ...\n```\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u3092\u8d77\u52d5\u3002\n\n```sh:\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\n$ sudo python tcp_capture_replay.py \n```\n\n# \u52d5\u4f5c\u78ba\u8a8d\n\n\u9069\u5f53\u306aHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u7528\u610f\u3059\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001Telnet\u3067HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3057\u307e\u3057\u305f\u3002\n\n## Capture\u30e2\u30fc\u30c9\n\n```sh:HTTP\u30af\u30a2\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306eRequest\u3068Response\n$ telnet 127.0.0.1  60001\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nGET /\n\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\nConnection closed by foreign host.\n```\n\n```sh:\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u306e\u30ed\u30b0\n$ sudo python tcp_capture_replay.py \nRequested:\nGET /\n\n127.0.0.1 56607\nGET%20/%0D%0A%0D%0A 127.0.0.1 56607\n\nresponsed:\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\nlocalhost 56607\n%3CHTML%3E%3CHEAD%3E%3C/HEAD%3E%3CBODY%3ETEST%3C/BODY%3E%3C/HTML%3E%0A localhost 56607\n```\n\n## Replay\u30e2\u30fc\u30c9\n\n\n```sh:HTTP\u30af\u30a2\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306eRequest\u3068Response\n$ telnet 127.0.0.1  60001\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nGET /\n\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\nConnection closed by foreign host.\n```\n\n```sh:\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u306e\u30ed\u30b0\n$ sudo python tcp_capture_replay.py \nRequested:\nGET /\n\n127.0.0.1 56611\nGET%20/%0D%0A%0D%0A 127.0.0.1 56611\n\nresponsed:\n<HTML><HEAD></HEAD><BODY>TEST</BODY></HTML>\nlocalhost 56611\n%3CHTML%3E%3CHEAD%3E%3C/HEAD%3E%3CBODY%3ETEST%3C/BODY%3E%3C/HTML%3E%0A localhost 56611\n```\n\n# \u4eca\u5f8c\n\u3053\u306e\u65b9\u6cd5\u306f\u3001SSL\u4e0a\u3067\u3082\u4f7f\u3048\u307e\u3059\u3057\u3001SOAP\u3084REST\u3067\u3082\u4f7f\u3048\u308b\u65b9\u6cd5\u306a\u306e\u3067\u3001\u5fdc\u7528\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u53c2\u8003\nhttps://docs.python.org/2/howto/sockets.html\nhttp://qiita.com/higuma/items/b23ca9d96dac49999ab9\nhttp://stackoverflow.com/questions/29217502/socket-error-address-already-in-use\nhttp://memo.saitodev.com/home/python_network_programing/\n"}