{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c6\u7ae0: \u82f1\u8a9e\u30c6\u30ad\u30b9\u30c8\u306e\u51e6\u7406\n\n\u82f1\u8a9e\u306e\u30c6\u30ad\u30b9\u30c8\uff08nlp.txt\uff09\u306b\u5bfe\u3057\u3066\uff0c\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u305b\u3088\uff0e\n\n\n58. \u30bf\u30d7\u30eb\u306e\u62bd\u51fa\n\nStanford Core NLP\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u306e\u7d50\u679c\uff08collapsed-dependencies\uff09\u306b\u57fa\u3065\u304d\uff0c\u300c\u4e3b\u8a9e \u8ff0\u8a9e \u76ee\u7684\u8a9e\u300d\u306e\u7d44\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u51fa\u529b\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u4e3b\u8a9e\uff0c\u8ff0\u8a9e\uff0c\u76ee\u7684\u8a9e\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u305b\u3088\uff0e\n\n\u8ff0\u8a9e: nsubj\u95a2\u4fc2\u3068dobj\u95a2\u4fc2\u306e\u5b50\uff08dependant\uff09\u3092\u6301\u3064\u5358\u8a9e\n\u4e3b\u8a9e: \u8ff0\u8a9e\u304b\u3089nsubj\u95a2\u4fc2\u306b\u3042\u308b\u5b50\uff08dependent\uff09\n\u76ee\u7684\u8a9e: \u8ff0\u8a9e\u304b\u3089dobj\u95a2\u4fc2\u306b\u3042\u308b\u5b50\uff08dependent\uff09\n\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport os\nimport subprocess\nimport xml.etree.ElementTree as ET\n\nfname = 'nlp.txt'\nfname_parsed = 'nlp.txt.xml'\n\n\ndef parse_nlp():\n    '''nlp.txt\u3092Stanford Core NLP\u3067\u89e3\u6790\u3057xml\u30d5\u30a1\u30a4\u30eb\u3078\u51fa\u529b\n    \u3059\u3067\u306b\u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u5b9f\u884c\u3057\u306a\u3044\n    '''\n    if not os.path.exists(fname_parsed):\n\n        # StanfordCoreNLP\u5b9f\u884c\u3001\u6a19\u6e96\u30a8\u30e9\u30fc\u306fparse.out\u3078\u51fa\u529b\n        subprocess.run(\n            'java -cp \"/usr/local/lib/stanford-corenlp-full-2016-10-31/*\"'\n            ' -Xmx2g'\n            ' edu.stanford.nlp.pipeline.StanfordCoreNLP'\n            ' -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref'\n            ' -file ' + fname + ' 2>parse.out',\n            shell=True,     # shell\u3067\u5b9f\u884c\n            check=True      # \u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3042\u308a\n        )\n\n\n# nlp.txt\u3092\u89e3\u6790\nparse_nlp()\n\n# \u89e3\u6790\u7d50\u679c\u306exml\u3092\u30d1\u30fc\u30b9\nroot = ET.parse(fname_parsed)\n\n# sentence\u5217\u6319\u30011\u6587\u305a\u3064\u51e6\u7406\nfor sentence in root.iterfind('./document/sentences/sentence'):\n    sent_id = int(sentence.get('id'))       # sentence\u306eid\n\n    # \u305d\u308c\u305e\u308c\u306e\u8a9e\u306e\u8f9e\u66f8\u3092\u4f5c\u6210\n    dict_pred = {}      # {\u8ff0\u8a9e\u306eidx, \u8ff0\u8a9e\u306etext}\n    dict_nsubj = {}     # {\u8ff0\u8a9e\u306eidx, \u8ff0\u8a9e\u3068nsubj\u95a2\u4fc2\u306e\u5b50\u306etext\uff08\uff1d\u4e3b\u8a9e\uff09}\n    dict_dobj = {}      # {\u8ff0\u8a9e\u306eidx, \u8ff0\u8a9e\u3068dobj\u95a2\u4fc2\u306e\u5b50\u306etext\uff08\uff1d\u76ee\u7684\u8a9e\uff09}\n\n    # dependencies\u5217\u6319\n    for dep in sentence.iterfind(\n        './dependencies[@type=\"collapsed-dependencies\"]/dep'\n    ):\n\n        # \u95a2\u4fc2\u30c1\u30a7\u30c3\u30af\n        dep_type = dep.get('type')\n        if dep_type == 'nsubj' or dep_type == 'dobj':\n\n            # \u8ff0\u8a9e\u306e\u8f9e\u66f8\u306b\u8ffd\u52a0\n            govr = dep.find('./governor')\n            idx = govr.get('idx')\n            dict_pred[idx] = govr.text      # \u91cd\u8907\u3059\u308b\u304c\u7121\u5bb3\u306a\u306e\u3067\u30c1\u30a7\u30c3\u30af\u306f\u7701\u7565\n\n            # \u4e3b\u8a9eor\u76ee\u7684\u8a9e\u306e\u8f9e\u66f8\u306b\u8ffd\u52a0\n            if dep_type == 'nsubj':\n                dict_nsubj[idx] = dep.find('./dependent').text\n            else:\n                dict_dobj[idx] = dep.find('./dependent').text\n\n    # \u8ff0\u8a9e\u3092\u5217\u6319\u3001\u4e3b\u8a9e\u3068\u76ee\u7684\u8a9e\u306e\u4e21\u65b9\u3092\u6301\u3064\u3082\u306e\u306e\u307f\u51fa\u529b\n    for idx, pred in sorted(dict_pred.items(), key=lambda x: x[0]):\n        nsubj = dict_nsubj.get(idx)\n        dobj = dict_dobj.get(idx)\n        if nsubj is not None and dobj is not None:\n            print('{}\\t{}\\t{}'.format(nsubj, pred, dobj))\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\n\u7aef\u672b\nunderstanding   enabling    computers\nothers  involve generation\nTuring  published   article\nexperiment  involved    translation\nELIZA   provided    interaction\nELIZA   provide response\npatient exceeded    base\nwhich   structured  information\nunderpinnings   discouraged sort\nthat    underlies   approach\nSome    produced    systems\nwhich   make    decisions\nsystems rely    which\nthat    contains    errors\nimplementations involved    coding\nalgorithms  take    set\nSome    produced    systems\nwhich   make    decisions\nmodels  have    advantage\nthey    express certainty\nSystems have    advantages\nAutomatic   make    use\nthat    make    decisions\n\n\n\n\u4e3b\u8a9e\uff0c\u8ff0\u8a9e\uff0c\u76ee\u7684\u8a9e\u306e\u62bd\u51fa\n\u524d\u554f\u540c\u69d8\u3001Stanford Core NLP\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u4f7f\u3044\u307e\u3059\u3002\u524d\u554f\u3067\u306f\u53e5\u8aad\u70b9\u3092\u9664\u304f\u305f\u3081\u306b<dep>\u30bf\u30b0\u306etype\u5c5e\u6027\u304c\u300cpunct\u300d\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u300cnsubj\u300d\u307e\u305f\u306f\u300cdobj\u300d\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\ntype\u5c5e\u6027\u304c\u300cnsubj\u300d\u307e\u305f\u306f\u300cdobj\u300d\u306a\u3089\u3001<governor>\u30bf\u30b0\u304c\u8ff0\u8a9e\u3067\u3001<dependent>\u304c\u4e3b\u8a9e\u307e\u305f\u306f\u76ee\u7684\u8a9e\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u95a2\u4fc2\u306b\u3042\u308b<dep>\u30bf\u30b0\u3092\u62bd\u51fa\u3057\u3066\u5fc5\u8981\u306a\u60c5\u5831\u3092\u8f9e\u66f8\u306b\u8ffd\u52a0\u3057\u3001\u6700\u5f8c\u306b\u8ff0\u8a9e\u306b\u5bfe\u3057\u3066\u4e3b\u8a9e\u3068\u76ee\u7684\u8a9e\u306e\u4e21\u65b9\u304c\u63c3\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\n\u8f9e\u66f8\u306e\u4e2d\u8eab\u306e\u5217\u6319\u306f\u9806\u4e0d\u540c\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u8ff0\u8a9e\u306e\u51fa\u73fe\u9806\u3067\u30bd\u30fc\u30c8\u3057\u3066\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\n59\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c6\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306f\u30af\u30ea\u30a8\u30a4\u30c6\u30a3\u30d6\u30fb\u30b3\u30e2\u30f3\u30ba \u8868\u793a-\u7d99\u627f 3.0 \u975e\u79fb\u690d\uff08\u65e5\u672c\u8a9e\u8a33\uff09\u3067\u3059\u3002\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c6\u7ae0: \u82f1\u8a9e\u30c6\u30ad\u30b9\u30c8\u306e\u51e6\u7406\n>\u82f1\u8a9e\u306e\u30c6\u30ad\u30b9\u30c8\uff08nlp.txt\uff09\u306b\u5bfe\u3057\u3066\uff0c\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u305b\u3088\uff0e\n\n###58. \u30bf\u30d7\u30eb\u306e\u62bd\u51fa\n>Stanford Core NLP\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u306e\u7d50\u679c\uff08collapsed-dependencies\uff09\u306b\u57fa\u3065\u304d\uff0c\u300c\u4e3b\u8a9e \u8ff0\u8a9e \u76ee\u7684\u8a9e\u300d\u306e\u7d44\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u51fa\u529b\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u4e3b\u8a9e\uff0c\u8ff0\u8a9e\uff0c\u76ee\u7684\u8a9e\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u305b\u3088\uff0e\n\n> - \u8ff0\u8a9e: nsubj\u95a2\u4fc2\u3068dobj\u95a2\u4fc2\u306e\u5b50\uff08dependant\uff09\u3092\u6301\u3064\u5358\u8a9e\n> - \u4e3b\u8a9e: \u8ff0\u8a9e\u304b\u3089nsubj\u95a2\u4fc2\u306b\u3042\u308b\u5b50\uff08dependent\uff09\n> - \u76ee\u7684\u8a9e: \u8ff0\u8a9e\u304b\u3089dobj\u95a2\u4fc2\u306b\u3042\u308b\u5b50\uff08dependent\uff09\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport os\nimport subprocess\nimport xml.etree.ElementTree as ET\n\nfname = 'nlp.txt'\nfname_parsed = 'nlp.txt.xml'\n\n\ndef parse_nlp():\n\t'''nlp.txt\u3092Stanford Core NLP\u3067\u89e3\u6790\u3057xml\u30d5\u30a1\u30a4\u30eb\u3078\u51fa\u529b\n\t\u3059\u3067\u306b\u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u5b9f\u884c\u3057\u306a\u3044\n\t'''\n\tif not os.path.exists(fname_parsed):\n\n\t\t# StanfordCoreNLP\u5b9f\u884c\u3001\u6a19\u6e96\u30a8\u30e9\u30fc\u306fparse.out\u3078\u51fa\u529b\n\t\tsubprocess.run(\n\t\t\t'java -cp \"/usr/local/lib/stanford-corenlp-full-2016-10-31/*\"'\n\t\t\t' -Xmx2g'\n\t\t\t' edu.stanford.nlp.pipeline.StanfordCoreNLP'\n\t\t\t' -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref'\n\t\t\t' -file ' + fname + ' 2>parse.out',\n\t\t\tshell=True,\t\t# shell\u3067\u5b9f\u884c\n\t\t\tcheck=True\t\t# \u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3042\u308a\n\t\t)\n\n\n# nlp.txt\u3092\u89e3\u6790\nparse_nlp()\n\n# \u89e3\u6790\u7d50\u679c\u306exml\u3092\u30d1\u30fc\u30b9\nroot = ET.parse(fname_parsed)\n\n# sentence\u5217\u6319\u30011\u6587\u305a\u3064\u51e6\u7406\nfor sentence in root.iterfind('./document/sentences/sentence'):\n\tsent_id = int(sentence.get('id'))\t\t# sentence\u306eid\n\n\t# \u305d\u308c\u305e\u308c\u306e\u8a9e\u306e\u8f9e\u66f8\u3092\u4f5c\u6210\n\tdict_pred = {}\t\t# {\u8ff0\u8a9e\u306eidx, \u8ff0\u8a9e\u306etext}\n\tdict_nsubj = {}\t\t# {\u8ff0\u8a9e\u306eidx, \u8ff0\u8a9e\u3068nsubj\u95a2\u4fc2\u306e\u5b50\u306etext\uff08\uff1d\u4e3b\u8a9e\uff09}\n\tdict_dobj = {}\t\t# {\u8ff0\u8a9e\u306eidx, \u8ff0\u8a9e\u3068dobj\u95a2\u4fc2\u306e\u5b50\u306etext\uff08\uff1d\u76ee\u7684\u8a9e\uff09}\n\n\t# dependencies\u5217\u6319\n\tfor dep in sentence.iterfind(\n\t\t'./dependencies[@type=\"collapsed-dependencies\"]/dep'\n\t):\n\n\t\t# \u95a2\u4fc2\u30c1\u30a7\u30c3\u30af\n\t\tdep_type = dep.get('type')\n\t\tif dep_type == 'nsubj' or dep_type == 'dobj':\n\n\t\t\t# \u8ff0\u8a9e\u306e\u8f9e\u66f8\u306b\u8ffd\u52a0\n\t\t\tgovr = dep.find('./governor')\n\t\t\tidx = govr.get('idx')\n\t\t\tdict_pred[idx] = govr.text\t\t# \u91cd\u8907\u3059\u308b\u304c\u7121\u5bb3\u306a\u306e\u3067\u30c1\u30a7\u30c3\u30af\u306f\u7701\u7565\n\n\t\t\t# \u4e3b\u8a9eor\u76ee\u7684\u8a9e\u306e\u8f9e\u66f8\u306b\u8ffd\u52a0\n\t\t\tif dep_type == 'nsubj':\n\t\t\t\tdict_nsubj[idx] = dep.find('./dependent').text\n\t\t\telse:\n\t\t\t\tdict_dobj[idx] = dep.find('./dependent').text\n\n\t# \u8ff0\u8a9e\u3092\u5217\u6319\u3001\u4e3b\u8a9e\u3068\u76ee\u7684\u8a9e\u306e\u4e21\u65b9\u3092\u6301\u3064\u3082\u306e\u306e\u307f\u51fa\u529b\n\tfor idx, pred in sorted(dict_pred.items(), key=lambda x: x[0]):\n\t\tnsubj = dict_nsubj.get(idx)\n\t\tdobj = dict_dobj.get(idx)\n\t\tif nsubj is not None and dobj is not None:\n\t\t\tprint('{}\\t{}\\t{}'.format(nsubj, pred, dobj))\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n\n```console:\u7aef\u672b\nunderstanding\tenabling\tcomputers\nothers\tinvolve\tgeneration\nTuring\tpublished\tarticle\nexperiment\tinvolved\ttranslation\nELIZA\tprovided\tinteraction\nELIZA\tprovide\tresponse\npatient\texceeded\tbase\nwhich\tstructured\tinformation\nunderpinnings\tdiscouraged\tsort\nthat\tunderlies\tapproach\nSome\tproduced\tsystems\nwhich\tmake\tdecisions\nsystems\trely\twhich\nthat\tcontains\terrors\nimplementations\tinvolved\tcoding\nalgorithms\ttake\tset\nSome\tproduced\tsystems\nwhich\tmake\tdecisions\nmodels\thave\tadvantage\nthey\texpress\tcertainty\nSystems\thave\tadvantages\nAutomatic\tmake\tuse\nthat\tmake\tdecisions\n```\n\n###\u4e3b\u8a9e\uff0c\u8ff0\u8a9e\uff0c\u76ee\u7684\u8a9e\u306e\u62bd\u51fa\n[\u524d\u554f](http://qiita.com/segavvy/items/d47b865c05be42b9d6d3)\u540c\u69d8\u3001Stanford Core NLP\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u4f7f\u3044\u307e\u3059\u3002[\u524d\u554f](http://qiita.com/segavvy/items/d47b865c05be42b9d6d3)\u3067\u306f\u53e5\u8aad\u70b9\u3092\u9664\u304f\u305f\u3081\u306b`<dep>`\u30bf\u30b0\u306etype\u5c5e\u6027\u304c\u300cpunct\u300d\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u300cnsubj\u300d\u307e\u305f\u306f\u300cdobj\u300d\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\n\ntype\u5c5e\u6027\u304c\u300cnsubj\u300d\u307e\u305f\u306f\u300cdobj\u300d\u306a\u3089\u3001`<governor>`\u30bf\u30b0\u304c\u8ff0\u8a9e\u3067\u3001`<dependent>`\u304c\u4e3b\u8a9e\u307e\u305f\u306f\u76ee\u7684\u8a9e\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u95a2\u4fc2\u306b\u3042\u308b`<dep>`\u30bf\u30b0\u3092\u62bd\u51fa\u3057\u3066\u5fc5\u8981\u306a\u60c5\u5831\u3092\u8f9e\u66f8\u306b\u8ffd\u52a0\u3057\u3001\u6700\u5f8c\u306b\u8ff0\u8a9e\u306b\u5bfe\u3057\u3066\u4e3b\u8a9e\u3068\u76ee\u7684\u8a9e\u306e\u4e21\u65b9\u304c\u63c3\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\n\n\u8f9e\u66f8\u306e\u4e2d\u8eab\u306e\u5217\u6319\u306f\u9806\u4e0d\u540c\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u8ff0\u8a9e\u306e\u51fa\u73fe\u9806\u3067\u30bd\u30fc\u30c8\u3057\u3066\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3000\n59\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c6\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306f[\u30af\u30ea\u30a8\u30a4\u30c6\u30a3\u30d6\u30fb\u30b3\u30e2\u30f3\u30ba \u8868\u793a-\u7d99\u627f 3.0 \u975e\u79fb\u690d](https://creativecommons.org/licenses/by-sa/3.0/legalcode)\uff08[\u65e5\u672c\u8a9e\u8a33](https://creativecommons.org/licenses/by-sa/3.0/deed.ja)\uff09\u3067\u3059\u3002*\n", "tags": ["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "Python"]}