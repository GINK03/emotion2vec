{"context": "\n\n\u6982\u8981\nUnity\u4ee5\u5916\u3067\u3082\u305d\u3046\u3067\u3059\u304c\u3001\u30e1\u30c3\u30b7\u30e5\u306f\u9802\u70b9\u306e\u584a\u3067\u3059\u3002\n\u305d\u3057\u3066\u305d\u308c\u3089\u306fTriangle\u3084\u305d\u308c\u3089\u3092\u7d50\u3076Index\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u52dd\u624b\u306b\u9806\u756a\u3092\u5909\u3048\u3066\u3057\u307e\u3046\u3068\u9802\u70b9\u306e\u60c5\u5831\u306f\u3050\u3061\u3083\u3050\u3061\u3083\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u3061\u3083\u3093\u3068\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u306e\u305f\u3081\u3001\u30e1\u30c3\u30b7\u30e5\u3092\u5207\u65ad\u3057\u3066\u5225\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5206\u3051\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u305d\u308c\u306a\u308a\u306b\u9802\u70b9\u90e1\u3092\u8a08\u7b97\u3057\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u7e2b\u3044\u5408\u308f\u305b\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u305d\u3093\u306a\u30e1\u30c3\u30b7\u30e5\u306e\u30ab\u30c3\u30c8\u3092\u884c\u3046\u30b5\u30f3\u30d7\u30eb\u3092\u516c\u958b\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u4eba\u304c\u3044\u305f\u306e\u3067\u3001\u305d\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u3093\u3060\u30e1\u30e2\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u3069\u3093\u306a\u3082\u306e\u304b\u306fYouTube\u3067\u516c\u958b\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u898b\u308b\u3068\u3069\u3093\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08\u3057\u304b\u3082\u5b9f\u969b\u306b\u52d5\u304f\u30a2\u30bb\u30c3\u30c8\u3082\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\uff09\n\uff08\u5168\u7136\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\u3001\u30e1\u30c3\u30b7\u30e5\u304c\u30ab\u30c3\u30c8\u3055\u308c\u308b\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u300cvictim\uff08\u88ab\u5bb3\u8005\uff09\u300d\u3068\u547c\u3093\u3067\u308b\u306e\u306f\u3061\u3087\u3063\u3068\u30a6\u30b1\u30eb\uff57\uff09\n\u2191\u306e\u30a2\u30bb\u30c3\u30c8\u3092import\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u3082\u306e\u3067\u3059\u3002\n\n\u5de6\u5074\u306e3\u672c\u306e\u30e9\u30a4\u30f3\u304c\u30ab\u30c3\u30c8\u9762\u3092\u793a\u3057\u3066\u3044\u3066\u3001\u305d\u306e\u5e73\u9762\u3067\u304d\u308c\u3044\u306b\u5207\u65ad\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3082\u3001\u3057\u3063\u304b\u308a\u3068\u5207\u65ad\u9762\u306b\u5225\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u306e\u306b\u3082\u6ce8\u76ee\u3067\u3059\u3002\n\n\u5927\u307e\u304b\u306a\u6d41\u308c\n\u307e\u305a\u306f\u5927\u307e\u304b\u306a\u6d41\u308c\u304b\u3089\u8aac\u660e\u3057\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306a\u306b\u3092\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u308b\u3088\u308a\u3082\u3001\u5207\u65ad\u306b\u5fc5\u8981\u306a\u51e6\u7406\u304c\u306a\u3093\u306a\u306e\u304b\u3001\u3068\u3044\u3046\u8996\u70b9\u3067\u898b\u3066\u3082\u3089\u3046\u3068\u3044\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5168\u4f53\u50cf\u3092\u628a\u63e1\u3057\u305f\u4e0a\u3067\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304f\u3068\u51e6\u7406\u5185\u5bb9\u304c\u63a8\u6e2c\u3057\u3084\u3059\u304f\u306a\u308a\u3001\u7406\u89e3\u3092\u4fc3\u3059\u306f\u305a\u3067\u3059\u3002\n\n\u5207\u65ad\u3059\u308b\u5e73\u9762\u3092\u5b9a\u7fa9\u3059\u308b\n\u5207\u65ad\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u3059\u308b\n\u9078\u629e\u3055\u308c\u305f\u30e1\u30c3\u30b7\u30e5\u306e\u5168\u9802\u70b9\u306b\u5bfe\u3057\u3001\u5e73\u9762\u306e\u5de6\u5074\u304b\u53f3\u5074\u304b\u3092\u8a08\u7b97\u3059\u308b\n\u203b \u8a55\u4fa1\u3059\u308b\u5358\u4f4d\u306f\u30dd\u30ea\u30b4\u30f3\uff08\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\uff09\u5358\u4f4d\u3067\u884c\u3046\n\n(3)\u306e\u969b\u30013\u9802\u70b9\u3059\u3079\u3066\u304c\u5e73\u9762\u306e\u5de6\u304b\u53f3\u306e\u3069\u3061\u3089\u304b\u306b\u5bc4\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u5207\u65ad\u5bfe\u8c61\u5916\u306a\u306e\u3067\u3001\u5de6\u5074\u304b\u53f3\u5074\u304b\u3060\u3051\u3092\u5224\u5225\u3057\u3066\u9069\u5207\u306b\u9802\u70b9\u3092\u4fdd\u6301\u3059\u308b\n\u203b \u6700\u7d42\u7684\u306b\u3075\u305f\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5206\u5272\u3059\u308b\u305f\u3081\u3001\u5de6\u53f3\u306e\u9802\u70b9\u60c5\u5831\u306a\u3069\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7528\u610f\u3057\u3066\u305d\u308c\u306b\u683c\u7d0d\u3059\u308b\n\n(3)\u306e\u969b\u30013\u9802\u70b9\u304c\u5e73\u9762\u306e\u5de6\u53f3\u306b\u30d0\u30e9\u3051\u305f\u5834\u5408\u306b\u5207\u65ad\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\n\u5207\u65ad\u51e6\u7406\u306f\u307e\u305a\u30013\u9802\u70b9\u304c\u305d\u308c\u305e\u308c\u5e73\u9762\u306e\u5de6\u53f3\u3069\u3061\u3089\u306b\u3042\u308b\u304b\u3092\u5224\u65ad\u3057\u3001(3)\u540c\u69d8\u306b\u9069\u5207\u306b\u632f\u308a\u5206\u3051\u308b\n\u305d\u306e\u5f8c\u3001\u5207\u65ad\u5e73\u9762\u3068\u91cd\u306a\u308b2\u9802\u70b9\u3092\u65b0\u3057\u3044\u9802\u70b9\u3068\u3057\u3066\u8a08\u7b97\u3059\u308b\uff08\u203b1\uff09\n\u3059\u3079\u3066\u306e\u9802\u70b9\u306b\u5bfe\u3057\u3066\u632f\u308a\u5206\u3051\u304a\u3088\u3073\u9802\u70b9\u306e\u751f\u6210\u304c\u7d42\u308f\u3063\u305f\u3089\u3001(7)\u3067\u751f\u6210\u3057\u305f\u65b0\u9802\u70b9\u3059\u3079\u3066\u306b\u5bfe\u3057\u30da\u30a2\u3092\u7b97\u51fa\u3057\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n\u6700\u5f8c\u306b\u3001\u751f\u6210\u3057\u305f\u30dd\u30ea\u30b4\u30f3\u3092\u7528\u3044\u3066\u5207\u65ad\u9762\u3092\u5b9a\u7fa9\u3057\u3001\u65b0\u3057\u3044\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u9069\u7528\u3059\u308b\n\n\u203b1 ... \u4e09\u89d2\u5f62\uff08\u30dd\u30ea\u30b4\u30f3\uff09\u3092\u7dda\uff08\u5e73\u9762\uff09\u3067\u5206\u65ad\u3059\u308b\u3068\u3069\u3053\u3092\u3069\u3046\u5207\u3063\u3066\u3082\u5fc5\u305a2\u8fba\u3068\u4ea4\u308f\u308b\u3002\u3064\u307e\u308a\u65b0\u3057\u3044\u9802\u70b9\u306f2\u3064\u4f5c\u3089\u308c\u308b\u3002\n\n\u3069\u308c\u304b\u306e\u8fba\u306b\u5e73\u884c\u3067\u306a\u3044\u9650\u308a\u3001\u5fc5\u305a2\u8fba\u3068\u4ea4\u308f\u308b\n\n\u5b9f\u88c5\u3068\u8003\u3048\u65b9\n\n\u9802\u70b9\u304c\u5e73\u9762\u306e\u3069\u3061\u3089\u5074\u306b\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n\u9802\u70b9\u304c\u5e73\u9762\u306e\u3069\u3061\u3089\u5074\u306b\u3042\u308b\u304b\u306f\u5185\u7a4d\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306b\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u70b9 $p$ \u3068\u3001\u5e73\u9762\u306e\u4f4d\u7f6e $p_0$\u3001\u304a\u3088\u3073\u9762\u306e\u6cd5\u7dda $n$ \u3092\u4f7f\u3063\u3066\u3001\n(p - p_0) \\cdot n < 0 ... \u88cf  \\\\\n(p - p_0) \\cdot n > 0 ... \u8868  \\\\\n(p - p_0) \\cdot n = 0 ... \u5e73\u9762\u4e0a\n\n\u3068\u3057\u3066\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b UnityEngine.Plane \u30af\u30e9\u30b9\u306b\u306f\u3053\u3046\u3057\u305f\u5e73\u9762\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3092\u7c21\u5358\u306b\u3057\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u591a\u6570\u3042\u308b\u306e\u3067\u3001\u5b9f\u969b\u306f\u305d\u3061\u3089\u3092\u5229\u7528\u3057\u305f\u307b\u3046\u304c\u624b\u8efd\u3067\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u629c\u7c8b\u3059\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nsides[0] = blade.GetSide(victim_mesh.vertices[p1]);\nsides[1] = blade.GetSide(victim_mesh.vertices[p2]);\nsides[2] = blade.GetSide(victim_mesh.vertices[p3]);\n\n\u3053\u308c\u306f\u3001\u5207\u65ad\u5bfe\u8c61\u3068\u306a\u3063\u305f\u30e1\u30c3\u30b7\u30e5\u306e\u3001\u8a08\u7b97\u4e2d\u306e\u9802\u70b9\u304c\u5e73\u9762\u306e\u3069\u3061\u3089\u306b\u3042\u308b\u304b\u3092 bool \u3067\u53d6\u5f97\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\n\u5e73\u9762\u306b\u5206\u65ad\u3055\u308c\u305f\u70b9\u3092\u6c42\u3081\u308b\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u5e73\u9762\u306e\u8868\u88cf\u306e\u5224\u5b9a\u306b\u3088\u308a\u3001\u5927\u90e8\u5206\u306e\u9802\u70b9\u306f\u5de6\u53f3\u306b\u9069\u5207\u306b\u632f\u308a\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6b8b\u308b\u306f\u3001\u5e73\u9762\u3068\u4ea4\u5dee\u3057\u3066\u3044\u308b\u30dd\u30ea\u30b4\u30f3\u306e\u5404\u8fba\u3092\u5206\u96e2\u3057\u3066\u3001\u65b0\u3057\u3044\u9802\u70b9\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u3001\u3072\u3068\u307e\u305a\u3059\u3079\u3066\u306e\u9802\u70b9\u3092\u5de6\u53f3\u306b\u632f\u308a\u5206\u3051\u3001\u304b\u3064\u5207\u65ad\u9762\u306b\u4f7f\u3048\u308b\u9802\u70b9\u90e1\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u8fba\u3092\u5206\u65ad\u3059\u308b\u9802\u70b9\u306e\u6c42\u3081\u65b9\u3067\u3059\u3002\n\u8272\u3005\u6587\u7ae0\u3067\u8aac\u660e\u3059\u308b\u524d\u306b\u3001\u4e0b\u306e\u56f3\u3092\u898b\u3066\u3082\u3089\u3046\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u5e73\u9762\u304c\u5207\u65ad\u9762\u3067\u3059\u3002\n\u3053\u306e\u5e73\u9762\u306b\u3088\u308a\u3001\u9802\u70b9\u304c\u5de6\u53f3\u3069\u3061\u3089\u304b\u306b\u5206\u65ad\u3055\u308c\u307e\u3059\u3002\n\u56f3\u3067\u306f $p_0$ \u3068 $p_1$ \u304c\u5e73\u9762\u306e\u5de6\u5074\u3001$p_2$ \u304c\u5e73\u9762\u306e\u53f3\u5074\u3001\u305d\u3057\u3066\u9ec4\u8272\u3044\u70b9\u304c\u5206\u65ad\u3055\u308c\u305f\u9802\u70b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5e73\u9762\u65b9\u5411\u3078\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\u3059\u308b\n\u70b9\u306e\u5272\u308a\u51fa\u3057\u65b9\u306f\u3001$p_0$ \u304a\u3088\u3073 $p_1$ \u304b\u3089\u3001$p_2$ \u65b9\u5411\u3078\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002\uff08$\\vec{p_2 p_0}$ \u3068 $\\vec{p_2 p_1}$\uff09\n\uff08\u5e73\u9762\u3078\u306e\u8ddd\u96e2\u306e\u7b97\u51fa\u306f\u3001\u4ee5\u524d\u66f8\u3044\u305f\u300c[Unity] \u4efb\u610f\u306e\u7121\u9650\u9060\u306e\u5e73\u9762\u3068\u30d9\u30af\u30c8\u30eb\u3068\u306e\u4ea4\u70b9\u3092\u6c42\u3081\u308b\u300d\u3092\u898b\u3066\u3082\u3089\u3046\u3068\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff09\n\u304c\u3001\u4e0a\u306e\u65b9\u3067\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001UnityEngine.Plane \u30af\u30e9\u30b9\u306b\u306f\u3053\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\u3059\u308b\u306e\u306b\u9069\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\u53c2\u8003\u306b\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3082\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u8a08\u7b97\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u90e8\u5206\u3060\u3051\u3092\u629c\u7c8b\u3059\u308b\u3068\u3001\nblade.Raycast(new Ray(leftPoints[0], (rightPoints[0] - leftPoints[0]).normalized), out distance);\n\n\u3053\u3053\u3067 blade \u306f\u5207\u65ad\u9762\u3092\u8868\u3059 UnityEngine.Plane \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\u3053\u308c\u306b Raycast \u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001\u30ec\u30a4\u3092\u98db\u3070\u3057\u3066\u3084\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u70b9\u3068\u65b9\u5411\u3092\u5143\u306b\u3001\u5e73\u9762\u3078\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\uff08\u4e0a\u306e\u4f8b\u3067\u306f out distance \u306b\u8ddd\u96e2\u304c\u5165\u308a\u3001\u30e1\u30bd\u30c3\u30c9\u81ea\u4f53\u306f\u3001\u5e73\u9762\u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3059\u308b\u5834\u5408\u306b true \u3092\u8fd4\u3057\u307e\u3059\uff09\n\n\u8fba\u3068\u8ddd\u96e2\u304b\u3089\u5207\u65ad\u9802\u70b9\u3092\u6c42\u3081\u308b\nRaycast \u3092\u7528\u3044\u3066\u5207\u65ad\u9802\u70b9\u307e\u3067\u306e\u300c\u8ddd\u96e2\u300d\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u305f\u3060\u3053\u308c\u306f\u30b9\u30ab\u30e9\u30fc\u5024\u3067\u3001\u3042\u304f\u307e\u3067\u300c\u8ddd\u96e2\u300d\u3057\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u3001\u8fba\u306e\u9577\u3055\u3068\u306e\u6bd4\u7387\u3068\u5404\u9802\u70b9\u60c5\u5831\u304b\u3089\u5e73\u9762\u4e0a\u306e\u9802\u70b9\uff08\u3064\u307e\u308a\u5206\u65ad\u70b9\uff09\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\n\n\u8fba\u306e\u9577\u3055\u3092\u8a08\u7b97\u3059\u308b\n\u300c\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2 / \u8fba\u306e\u9577\u3055\u300d\uff1d \u6bd4\u7387\n\u8fba\u306e\u4e21\u7aef\u306e\u70b9\u306e\u9593\u3092(2)\u306e\u6bd4\u7387\u3067\u88dc\u5b8c\u3059\u308b\n\n\u3053\u306e3\u5de5\u7a0b\u3092\u884c\u3046\u3053\u3068\u3067\u9802\u70b9\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3092\u3001\u5206\u65ad\u3055\u308c\u305f\u8fba\u306e\u5206\u3001\u3064\u307e\u308a2\u8fba\u5206\u884c\u3046\u3053\u3068\u3067\u5206\u65ad\u3055\u308c\u305f\u9802\u70b9\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u8a72\u5f53\u90e8\u5206\u3092\u629c\u7c8b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n// ---------------------------\n// \u5de6\u5074\u306e\u51e6\u7406\n\n// \u5b9a\u7fa9\u3057\u305f\u9762\u3068\u4ea4\u5dee\u3059\u308b\u70b9\u3092\u63a2\u3059\u3002\n// \u3064\u307e\u308a\u3001\u5e73\u9762\u306b\u3088\u3063\u3066\u5206\u5272\u3055\u308c\u308b\u70b9\u3092\u63a2\u3059\u3002\n// \u5de6\u306e\u70b9\u3092\u8d77\u70b9\u306b\u3001\u53f3\u306e\u70b9\u306b\u5411\u3051\u305f\u30ec\u30a4\u3092\u98db\u3070\u3057\u3001\u305d\u306e\u5206\u5272\u70b9\u3092\u63a2\u308b\u3002\nblade.Raycast(new Ray(leftPoints[0], (rightPoints[0] - leftPoints[0]).normalized), out distance);\n\n// \u898b\u3064\u304b\u3063\u305f\u4ea4\u5dee\u70b9\u3092\u3001\u9802\u70b9\u9593\u306e\u8ddd\u96e2\u3067\u5272\u308b\u3053\u3068\u3067\u3001\u5206\u5272\u70b9\u306e\u5de6\u53f3\u306e\u5272\u5408\u3092\u7b97\u51fa\u3059\u308b\nnormalizedDistance = distance / (rightPoints[0] - leftPoints[0]).magnitude;\n\n// \u30ab\u30c3\u30c8\u5f8c\u306e\u65b0\u9802\u70b9\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067\u306e\u88dc\u5b8c\u3068\u540c\u3058\u304f\u3001\u5206\u5272\u3057\u305f\u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u9069\u5207\u306b\u88dc\u5b8c\u3057\u305f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\nVector3 newVertex1 = Vector3.Lerp(leftPoints[0], rightPoints[0], normalizedDistance);\nVector2 newUv1     = Vector2.Lerp(leftUvs[0], rightUvs[0], normalizedDistance);\nVector3 newNormal1 = Vector3.Lerp(leftNormals[0] , rightNormals[0], normalizedDistance);\n\n// \u65b0\u9802\u70b9\u90e1\u306b\u65b0\u3057\u3044\u9802\u70b9\u3092\u8ffd\u52a0\nnew_vertices.Add(newVertex1);\n\n\u2191\u306e\u65e5\u672c\u8a9e\u306f\u89e3\u8aac\u7528\u306b\u81ea\u5206\u304c\u4ed8\u3051\u52a0\u3048\u305f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002\n\n\u5207\u65ad\u9762\u3092\u69cb\u7bc9\u3059\u308b\n\u4e0a\u8a18\u307e\u3067\u3067\u5168\u9802\u70b9\u306e\u632f\u308a\u5206\u3051\u3001\u304a\u3088\u3073\u65b0\u9802\u70b9\u306e\u7b97\u51fa\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306f\u3001\u65b0\u3057\u304f\u751f\u6210\u3055\u308c\u305f\u9802\u70b9\u3092\u5229\u7528\u3057\u3066\u3001\u5207\u65ad\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3057\u307e\u3059\u3002\n\n\u65b0\u9802\u70b9\u306e\u30da\u30a2\u3092\u9078\u629e\u3057\u3001\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n\u5207\u65ad\u9762\u306e\u5f62\u6210\u306b\u306f\u3001\u4e0a\u8a18\u3067\u7b97\u51fa\u3057\u305f\u65b0\u9802\u70b9\u3092\u4f7f\u3063\u3066\u884c\u3044\u307e\u3059\u3002\n\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u306f\u4ee5\u4e0b\u306e\u30d5\u30ed\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u751f\u6210\u3055\u308c\u305f\u9802\u70b9\u90e1\u304b\u3089\u30da\u30a2\u3068\u306a\u308b\u9802\u70b9\u3092\u63a2\u3057\u3001\u305d\u308c\u3092\u9806\u756a\u306b\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\uff08\u203b1\uff09\n\u65b0\u9802\u70b9\u306e\u30da\u30a2\u306e\u63a2\u7d22\u304c\u7d42\u308f\u3063\u305f\u6bb5\u968e\u3067\u30da\u30a2\u3054\u3068\u306e\u9806\u756a\u306b\u914d\u5217\u304c\u5f62\u6210\u3055\u308c\u3066\u3044\u308b\n(1)\u306e\u914d\u5217\u306e\u91cd\u5fc3\u3092\u8a08\u7b97\u3059\u308b\uff08\u5358\u7d14\u306b\u5168\u9802\u70b9\u8db3\u3057\u3066\u3001\u9802\u70b9\u6570\u3067\u5272\u308b\uff09\n(3)\u3067\u7b97\u51fa\u3057\u305f\u91cd\u5fc3\u3068\u3001\u914d\u5217\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n(4)\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u3001\u5de6\u53f3\u306e\u30e1\u30c3\u30b7\u30e5\u305d\u308c\u305e\u308c\u306b\u8ffd\u52a0\u3059\u308b\n\u305d\u306e\u969b\u3001\u5de6\u53f3\u3067\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda\u3092\u9006\u5411\u304d\u306b\u3059\u308b\uff08\u203b2\uff09\n\n\u203b1 ... \u5207\u65ad\u5bfe\u8c61\u3068\u306a\u3063\u305f\u30dd\u30ea\u30b4\u30f3\u304b\u3089\u5fc5\u305a2\u9802\u70b9\u304c\u751f\u6210\u3055\u308c\u308b\n\u203b2 ... \u5207\u65ad\u9762\u306f\u5de6\u53f3\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u305d\u308c\u305e\u308c\u306b\u5fc5\u8981\u3067\u3001\u5358\u7d14\u306b\u5411\u304d\u304c\u9006\u306e\u305f\u3081\n\u8a72\u5f53\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3068\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n/// <summary>\n/// \u30ab\u30c3\u30c8\u3092\u5b9f\u884c\n/// </summary>\nstatic void Capping()\n{\n    // \u30ab\u30c3\u30c8\u7528\u9802\u70b9\u8ffd\u8de1\u30ea\u30b9\u30c8\n    // \u5177\u4f53\u7684\u306b\u306f\u65b0\u9802\u70b9\u5168\u90e8\u306b\u5bfe\u3059\u308b\u8abf\u67fb\u3092\u884c\u3046\u3002\u305d\u306e\u904e\u7a0b\u3067\u8abf\u67fb\u6e08\u307f\u3092\u30de\u30fc\u30af\u3059\u308b\u76ee\u7684\u3067\u5229\u7528\u3059\u308b\u3002\n    capVertTracker.Clear();\n\n    // \u65b0\u3057\u304f\u751f\u6210\u3057\u305f\u9802\u70b9\u5206\u3060\u3051\u30eb\u30fc\u30d7\u3059\u308b\uff1d\u5168\u65b0\u9802\u70b9\u306b\u5bfe\u3057\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u8abf\u67fb\u3092\u884c\u3046\n    // \u5177\u4f53\u7684\u306b\u306f\u3001\u30ab\u30c3\u30c8\u9762\u3092\u69cb\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u3001\u30ab\u30c3\u30c8\u6642\u306b\u91cd\u8907\u3057\u305f\u9802\u70b9\u3092\u7db2\u7f85\u3057\u3066\u300c\u9762\u300d\u3092\u5f62\u6210\u3059\u308b\u9802\u70b9\u3092\u8abf\u67fb\u3059\u308b\n    for (int i = 0; i < new_vertices.Count; i++)\n    {\n        // \u5bfe\u8c61\u9802\u70b9\u304c\u3059\u3067\u306b\u8abf\u67fb\u6e08\u307f\u306e\u30de\u30fc\u30af\u3055\u308c\u3066\uff08\u8ffd\u8de1\u914d\u5217\u306b\u542b\u307e\u308c\u3066\uff09\u3044\u305f\u3089\u30b9\u30ad\u30c3\u30d7\n        if (capVertTracker.Contains(new_vertices[i]))\n        {\n            continue;\n        }\n\n        // \u30ab\u30c3\u30c8\u7528\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u3092\u30af\u30ea\u30a2\n        capVertpolygon.Clear();\n\n        // \u8abf\u67fb\u9802\u70b9\u3068\u6b21\u306e\u9802\u70b9\u3092\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u306b\u4fdd\u6301\u3059\u308b\n        capVertpolygon.Add(new_vertices[i + 0]);\n        capVertpolygon.Add(new_vertices[i + 1]);\n\n        // \u8ffd\u8de1\u914d\u5217\u306b\u81ea\u8eab\u3068\u6b21\u306e\u9802\u70b9\u3092\u8ffd\u52a0\u3059\u308b\uff08\u8abf\u67fb\u6e08\u307f\u306e\u30de\u30fc\u30af\u3092\u3064\u3051\u308b\uff09\n        capVertTracker.Add(new_vertices[i + 0]);\n        capVertTracker.Add(new_vertices[i + 1]);\n\n        // \u91cd\u8907\u9802\u70b9\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3057\u8abf\u67fb\u3059\u308b\n        bool isDone = false;\n        while (!isDone)\n        {\n            isDone = true;\n\n            // \u65b0\u9802\u70b9\u90e1\u3092\u30eb\u30fc\u30d7\u3057\u3001\u300c\u9762\u300d\u3092\u69cb\u6210\u3059\u308b\u8981\u56e0\u3068\u306a\u308b\u9802\u70b9\u3092\u3059\u3079\u3066\u62bd\u51fa\u3059\u308b\u3002\u62bd\u51fa\u304c\u7d42\u308f\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3092\u7e70\u308a\u8fd4\u3059\n            // 2\u9802\u70b9\u3054\u3068\u306b\u8abf\u67fb\u3092\u884c\u3046\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306f2\u5358\u4f4d\u3067\u3059\u3059\u3081\u308b\n            for (int k = 0; k < new_vertices.Count; k += 2)\n            { // go through the pairs\n                // \u30da\u30a2\u3068\u306a\u308b\u9802\u70b9\u3092\u63a2\u3059\n                // \u3053\u3053\u3067\u306e\u30da\u30a2\u3068\u306f\u3001\u3044\u3061\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u304b\u3089\u751f\u6210\u3055\u308c\u308b\u65b0\u9802\u70b9\u306e\u30da\u30a2\u3002\n                // \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u304b\u3089\u306f\u5fc5\u305a2\u9802\u70b9\u304c\u751f\u6210\u3055\u308c\u308b\u305f\u3081\u3001\u305d\u308c\u3092\u63a2\u3059\u3002\n                // \u307e\u305f\u3001\u5168\u30dd\u30ea\u30b4\u30f3\u306b\u5bfe\u3057\u3066\u5206\u5272\u70b9\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u307b\u307c\u5fc5\u305a\u3001\u307e\u3063\u305f\u304f\u540c\u3058\u4f4d\u7f6e\u306b\u5b58\u5728\u3059\u308b\u3001\u5225\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u306e\u5206\u5272\u9802\u70b9\u304c\u5b58\u5728\u3059\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n                if (new_vertices[k] == capVertpolygon[capVertpolygon.Count - 1] && !capVertTracker.Contains(new_vertices[k + 1]))\n                {   // if so add the other\n                    // \u30da\u30a2\u306e\u9802\u70b9\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u305d\u308c\u3092\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u306b\u8ffd\u52a0\u3057\u3001\n                    // \u8abf\u67fb\u6e08\u30de\u30fc\u30af\u3092\u3064\u3051\u3066\u3001\u6b21\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u306b\u56de\u3059\n                    isDone = false;\n                    capVertpolygon.Add(new_vertices[k + 1]);\n                    capVertTracker.Add(new_vertices[k + 1]);\n                }\n                else if (new_vertices[k + 1] == capVertpolygon[capVertpolygon.Count - 1] && !capVertTracker.Contains(new_vertices[k]))\n                {   // if so add the other\n                    isDone = false;\n                    capVertpolygon.Add(new_vertices[k]);\n                    capVertTracker.Add(new_vertices[k]);\n                }\n            }\n        }\n\n        // \u898b\u3064\u304b\u3063\u305f\u9802\u70b9\u90e1\u3092\u5143\u306b\u3001\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n        FillCap(capVertpolygon);\n    }\n}\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u7406\u89e3\u3059\u308b\u4e0a\u3067\u5730\u5473\u306b\u30dd\u30a4\u30f3\u30c8\u3060\u3063\u305f\u306e\u306f\u3001\u91cd\u8907\u3059\u308b\u9802\u70b9\u304c\u5b58\u5728\u3059\u308b\u3001\u3068\u3044\u3046\u70b9\u3002\n\u7c21\u5358\u306e\u305f\u3081\u306b\u307e\u305a\u677f\u30dd\u30ea\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\u3059\u308b\u3068\u3001\u677f\u30dd\u30ea\u306f2\u679a\u306e\u30dd\u30ea\u30b4\u30f3\u3067\u5f62\u6210\u3055\u308c\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u5207\u65ad\u3059\u308b\u3068\u65b0\u9802\u70b9\u306f4\u3064\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u4e09\u89d2\u5f62\uff08\u30dd\u30ea\u30b4\u30f3\uff091\u679a\u306b\u5bfe\u3057\u30662\u9802\u70b9\u751f\u6210\u3055\u308c\u308b\u304b\u3089\u3067\u3059\u306d\u3002\n\u305d\u3057\u3066\u91cd\u8907\u3059\u308b\u70b9\u306f1\u3064\u3067\u3059\u3002\n\n\u4e0a\u8a18\u753b\u50cf\u306e\u5de6\u53f3\u306e\u9802\u70b9\u306f\u305d\u308c\u305e\u308c\u306e\u8272\u306b\u5bfe\u5fdc\u3057\u305f\u30dd\u30ea\u30b4\u30f3\u304b\u3089\u751f\u6210\u3055\u308c\u305f\u9802\u70b9\u3067\u3059\u3002\n\u305d\u3057\u3066\u4e2d\u592e\u306e\u3082\u306e\u304c2\u3064\u306e\u8272\u306b\u5206\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u304c\u91cd\u8907\u3057\u305f\u9802\u70b9\u306b\u306a\u308a\u307e\u3059\u3002\n\u5de6\u53f3\u305d\u308c\u305e\u308c\u306e\u30dd\u30ea\u30b4\u30f3\u304b\u3089\u9802\u70b9\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u30674\u3064\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001\u4eca\u5ea6\u306f\u3053\u308c\u3092\u30ad\u30e5\u30fc\u30d6\u306b\u62e1\u5f35\u3057\u3066\u8003\u3048\u308b\u3068\u3001\u5148\u7a0b\u306f\u91cd\u8907\u3057\u306a\u304b\u3063\u305f\u4e21\u7aef\u306e\u70b9\u3082\u3001\u30ad\u30e5\u30fc\u30d6\u306e\u5074\u9762\u5074\u306e\u9802\u70b9\u3068\u91cd\u8907\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u7d50\u679c\u3068\u3057\u3066\u3059\u3079\u3066\u306e\u65b0\u9802\u70b9\u304c\u5fc5\u305a2\u3064\u305a\u3064\u91cd\u306a\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u306a\u306e\u3067\u5192\u982d\u306e\u52d5\u753b\u306e\u3088\u3046\u306b\u3001\u30ad\u30e5\u30fc\u30d6\u3092\u5207\u65ad\u3059\u308b\u3068\u65b0\u9802\u70b9\u306f16\u500b\u751f\u6210\u3055\u308c\u3001\u5b9f\u969b\u306b\u5207\u65ad\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u308b\u9802\u70b9\u306f8\u3064\u306b\u306a\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u3001\u4e0a\u56f3\u306e\u70b9\u3092\u6570\u3048\u308b\u30688\u500b\u3042\u308b\u306e\u304c\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u65b0\u9802\u70b9\u3068\u3057\u3066\u751f\u6210\u3055\u308c\u308b\u306e\u306f16\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\n\u65b0\u9802\u70b9\u3092\u7d50\u3073\u3001\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n\u3055\u3041\u3001\u3053\u308c\u3067\u5fc5\u8981\u306a\u60c5\u5831\u306f\u3059\u3079\u3066\u6574\u3044\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u8abf\u3079\u3089\u308c\u305f\u9802\u70b9\u3092\u4f7f\u3063\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u3001\u3064\u307e\u308a3\u9802\u70b9\u3092\u9078\u3073\u51fa\u3057\u3066\u305d\u308c\u3092\u7d50\u3093\u3067\u3044\u304f\u4f5c\u696d\u3067\u3059\u3002\n\u305f\u3060\u3001\u4e0a\u56f3\u3068\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3082\u3089\u3046\u3068\u5206\u304b\u308a\u307e\u3059\u304c\u3001\u65b0\u3057\u304f\u751f\u6210\u3055\u308c\u305f\u9802\u70b9\u306f16\u3001\u3046\u3061\u30dd\u30ea\u30b4\u30f3\u5f62\u6210\u306b\u5229\u7528\u3059\u308b\u306e\u306f8\u9802\u70b9\uff08\u203b\uff09\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u3069\u3046\u7d50\u3076\u304b\u3001\u3092\u8003\u3048\u306a\u3044\u3068\u306a\u308a\u307e\u305b\u3093\u3002\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u3001\u5168\u9802\u70b9\u306e\u5e73\u5747\u4f4d\u7f6e\u3092\u6c42\u3081\u3001\u305d\u308c\u3068\u3001\u65b0\u9802\u70b9\u3092\u9806\u756a\u306b\u7d50\u3093\u3067\u3001\u30d4\u30b6\u3092\u5207\u308a\u5206\u3051\u305f\u3088\u3046\u306a\u5f62\u3067\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u203b ... \u6700\u521d\u3001\u9802\u70b9\u691c\u7d22\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5206\u304b\u308a\u3065\u3089\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4e0a\u306e\u3088\u3046\u306b8\u9802\u70b9\u3092\u898b\u3064\u3051\u51fa\u3059\u51e6\u7406\u3067\u3057\u305f\u3002\u304c\u3001\u5b9f\u306f\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5834\u5408\u3001\u91cd\u8907\u3057\u305f\u3001\u540c\u3058\u4f4d\u7f6e\u306b\u3042\u308b\u70b9\u306b\u3064\u3044\u3066\u3082\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3057\u3066\u3044\u3066\u3001\u82e5\u5e72\u5197\u9577\u306a\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\uff08\u3064\u307e\u308a\u3001\u540c\u3058\u4f4d\u7f6e\u306b\u91cd\u306a\u308b\u3088\u3046\u306b2\u679a\u306e\u30ab\u30c3\u30c8\u5e73\u9762\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u306b\u306a\u308b\uff09\n\u305f\u3060\u3001\u8ca0\u8377\u7684\u306b\u3068\u3066\u3082\u5897\u3048\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3082\u306a\u3044\u306e\u3067\u3053\u306e\u307e\u307e\u306b\u3057\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\uff08Simple Cut\u3063\u3066\u8a00\u3063\u3066\u308b\u3057\uff09\n\n\u4e0a\u8a18\u306f\u30ad\u30e5\u30fc\u30d6\u306e\u65ad\u9762\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u9752\u30448\u9802\u70b9\u304c\u65b0\u9802\u70b9\u3068\u3057\u3066\u751f\u6210\u3055\u308c\u305f\u3082\u306e\u3001\u3068\u3057\u3066\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u308c\u306e\u5e73\u5747\u4f4d\u7f6e\u3092\u53d6\u308b\u3068\u4e2d\u5fc3\u3042\u305f\u308a\u306b\u306a\u308a\u3001\u30aa\u30ec\u30f3\u30b8\u306e\u70b9\uff08$c$\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u3042\u3068\u306f\u3053\u308c\u3092\u3001\u9806\u756a\u306b\u7d50\u3093\u3067\u3044\u3051\u3070\u5207\u65ad\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u304c\u5f62\u6210\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\u9806\u756a\u3068\u306f\u3001\u300c$1, 2, c$\u300d,\u300c$2, 3, c$\u300d,\u300c$3, 4, c$\u300d... \u3068\u3044\u3046\u5177\u5408\u3067\u3059\u3002\n\u6700\u5f8c\u306b\u3053\u306e\u3001\u5207\u65ad\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n/// <summary>\n/// \u30ab\u30c3\u30c8\u9762\u3092\u57cb\u3081\u308b\n/// </summary>\n/// <param name=\"vertices\">\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u9802\u70b9\u30ea\u30b9\u30c8</param>\nstatic void FillCap(List<Vector3> vertices)\n{\n    // center of the cap\n    // \u30ab\u30c3\u30c8\u5e73\u9762\u306e\u4e2d\u5fc3\u70b9\u3092\u8a08\u7b97\u3059\u308b\n    Vector3 center = Vector3.zero;\n\n    // \u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u9802\u70b9\u4f4d\u7f6e\u3092\u3059\u3079\u3066\u5408\u8a08\u3059\u308b\n    foreach(Vector3 point in vertices)\n    {\n        center += point;\n    }\n\n    // \u305d\u308c\u3092\u9802\u70b9\u6570\u306e\u5408\u8a08\u3067\u5272\u308a\u3001\u4e2d\u5fc3\u3068\u3059\u308b\n    center = center / vertices.Count;\n\n    // you need an axis based on the cap\n    // \u30ab\u30c3\u30c8\u5e73\u9762\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305fupward\n    Vector3 upward = Vector3.zero;\n\n    // 90 degree turn\n    // \u30ab\u30c3\u30c8\u5e73\u9762\u306e\u6cd5\u7dda\u3092\u5229\u7528\u3057\u3066\u3001\u300c\u4e0a\u300d\u65b9\u5411\u3092\u6c42\u3081\u308b\n    // \u5177\u4f53\u7684\u306b\u306f\u3001\u5e73\u9762\u306e\u5de6\u5074\u3092\u4e0a\u3068\u3057\u3066\u5229\u7528\u3059\u308b\n    upward.x =  blade.normal.y;\n    upward.y = -blade.normal.x;\n    upward.z =  blade.normal.z;\n\n    // \u6cd5\u7dda\u3068\u300c\u4e0a\u65b9\u5411\u300d\u304b\u3089\u3001\u6a2a\u8ef8\u3092\u7b97\u51fa\n    Vector3 left = Vector3.Cross(blade.normal, upward);\n\n    Vector3 displacement = Vector3.zero;\n    Vector3 newUV1 = Vector3.zero;\n    Vector3 newUV2 = Vector3.zero;\n\n    // \u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f\u9802\u70b9\u5206\u30eb\u30fc\u30d7\u3092\u56de\u3059\n    for (int i = 0; i < vertices.Count; i++)\n    {\n        // \u8a08\u7b97\u3067\u6c42\u3081\u305f\u4e2d\u5fc3\u70b9\u304b\u3089\u3001\u5404\u9802\u70b9\u3078\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb\n        displacement = vertices[i] - center;\n\n        // \u65b0\u898f\u751f\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u306eUV\u5ea7\u6a19\u3092\u6c42\u3081\u308b\u3002\n        // displacement\u304c\u4e2d\u5fc3\u304b\u3089\u306e\u30d9\u30af\u30c8\u30eb\u306e\u305f\u3081\u3001UV\u7684\u306a\u4e2d\u5fc3\u3067\u3042\u308b0.5\u3092\u30d9\u30fc\u30b9\u306b\u3001\u5185\u7a4d\u3092\u4f7f\u3063\u3066UV\u306e\u6700\u7d42\u7684\u306a\u4f4d\u7f6e\u3092\u5f97\u308b\n        newUV1 = Vector3.zero;\n        newUV1.x = 0.5f + Vector3.Dot(displacement, left);\n        newUV1.y = 0.5f + Vector3.Dot(displacement, upward);\n        newUV1.z = 0.5f + Vector3.Dot(displacement, blade.normal);\n\n        // \u6b21\u306e\u9802\u70b9\u3002\u305f\u3060\u3057\u3001\u6700\u5f8c\u306e\u9802\u70b9\u306e\u6b21\u306f\u6700\u521d\u306e\u9802\u70b9\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u3001\u82e5\u5e72\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u6307\u5b9a\u65b9\u6cd5\u3092\u3057\u3066\u3044\u308b\uff08% vertices.Count\uff09\n        displacement = vertices[(i + 1) % vertices.Count] - center;\n\n        newUV2 = Vector3.zero;\n        newUV2.x = 0.5f + Vector3.Dot(displacement, left);\n        newUV2.y = 0.5f + Vector3.Dot(displacement, upward);\n        newUV2.z = 0.5f + Vector3.Dot(displacement, blade.normal);\n\n        // uvs.Add(new Vector2(relativePosition.x, relativePosition.y));\n        // normals.Add(blade.normal);\n\n        // \u5de6\u5074\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u3057\u3066\u3001\u6c42\u3081\u305fUV\u3092\u5229\u7528\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n        left_side.AddTriangle(\n            new Vector3[]{\n                vertices[i],\n                vertices[(i + 1) % vertices.Count],\n                center\n            },\n            new Vector3[]{\n                -blade.normal,\n                -blade.normal,\n                -blade.normal\n            },\n            new Vector2[]{\n                newUV1,\n                newUV2,\n                new Vector2(0.5f, 0.5f)\n            },\n            -blade.normal,\n            left_side.subIndices.Count - 1 // \u30ab\u30c3\u30c8\u9762\u3002\u6700\u5f8c\u306e\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n        );\n\n        // \u53f3\u5074\u306e\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3002\u57fa\u672c\u306f\u5de6\u5074\u3068\u540c\u3058\u3060\u304c\u3001\u6cd5\u7dda\u3060\u3051\u9006\u5411\u304d\u3002\n        right_side.AddTriangle(\n            new Vector3[]{\n                vertices[i],\n                vertices[(i + 1) % vertices.Count],\n                center\n            },\n            new Vector3[]{\n                blade.normal,\n                blade.normal,\n                blade.normal\n            },\n            new Vector2[]{\n                newUV1,\n                newUV2,\n                new Vector2(0.5f, 0.5f)\n            },\n            blade.normal,\n            right_side.subIndices.Count - 1 // \u30ab\u30c3\u30c8\u9762\u3002\u6700\u5f8c\u306e\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n        );\n    }\n}\n\n\u4ee5\u4e0a\u304c\u3001\u30e1\u30c3\u30b7\u30e5\u306e\u5207\u65ad\u3092\u884c\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3001\u4e0a\u3067\u89e3\u8aac\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5168\u6587\u3067\u3059\u3002\n\u81ea\u5206\u306e\u7406\u89e3\u306e\u305f\u3081\u306b\u5404\u51e6\u7406\u306b\u3064\u3044\u3066\u65e5\u672c\u8a9e\u3067\u30b3\u30e1\u30f3\u30c8\u3092\u5165\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5206\u304b\u308a\u3065\u3089\u3044\u70b9\u306a\u3069\u306f\u305d\u3061\u3089\u3082\u5408\u308f\u305b\u3066\u898b\u3066\u3082\u3089\u3046\u3068\u7406\u89e3\u304c\u4fc3\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\n\nnamespace BLINDED_AM_ME\n{\n    public class MeshCut\n    {\n        public class MeshCutSide\n        {\n            public List<Vector3>  vertices  = new List<Vector3>();\n            public List<Vector3>  normals   = new List<Vector3>();\n            public List<Vector2>  uvs       = new List<Vector2>();\n            public List<int>      triangles = new List<int>();\n            public List<List<int>> subIndices = new List<List<int>>();\n\n            public void ClearAll()\n            {\n                vertices.Clear();\n                normals.Clear();\n                uvs.Clear();\n                triangles.Clear();\n                subIndices.Clear();\n            }\n\n            /// <summary>\n            /// \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3068\u3057\u30663\u9802\u70b9\u3092\u8ffd\u52a0\n            /// \u203b \u9802\u70b9\u60c5\u5831\u306f\u5143\u306e\u30e1\u30c3\u30b7\u30e5\u304b\u3089\u30b3\u30d4\u30fc\u3059\u308b\n            /// </summary>\n            /// <param name=\"p1\">\u9802\u70b91</param>\n            /// <param name=\"p2\">\u9802\u70b92</param>\n            /// <param name=\"p3\">\u9802\u70b93</param>\n            /// <param name=\"submesh\">\u5bfe\u8c61\u306e\u30b5\u30d6\u30e1\u30b7\u30e5</param>\n            public void AddTriangle(int p1, int p2, int p3, int submesh)\n            {\n                // triangle index order goes 1,2,3,4....\n\n                // \u9802\u70b9\u914d\u5217\u306e\u30ab\u30a6\u30f3\u30c8\u3002\u968f\u6642\u8ffd\u52a0\u3055\u308c\u3066\u3044\u304f\u305f\u3081\u3001\u30d9\u30fc\u30b9\u3068\u306a\u308bindex\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n                // \u203b AddTriangle\u304c\u547c\u3070\u308c\u308b\u305f\u3073\u306b\u9802\u70b9\u6570\u306f\u5897\u3048\u3066\u3044\u304f\u3002\n                int base_index = vertices.Count;\n\n                // \u5bfe\u8c61\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\n                subIndices[submesh].Add(base_index + 0);\n                subIndices[submesh].Add(base_index + 1);\n                subIndices[submesh].Add(base_index + 2);\n\n                // \u4e09\u89d2\u5f62\u90e1\u306e\u9802\u70b9\u3092\u8a2d\u5b9a\n                triangles.Add(base_index + 0);\n                triangles.Add(base_index + 1);\n                triangles.Add(base_index + 2);\n\n                // \u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u9802\u70b9\u914d\u5217\u304b\u3089\u9802\u70b9\u60c5\u5831\u3092\u53d6\u5f97\u3057\u8a2d\u5b9a\u3059\u308b\n                // \uff08victim_mesh\u306fstatic\u30e1\u30f3\u30d0\u306a\u3093\u3060\u3051\u3069\u3044\u3044\u3093\u3060\u308d\u3046\u304b\u30fb\u30fb\uff09\n                vertices.Add(victim_mesh.vertices[p1]);\n                vertices.Add(victim_mesh.vertices[p2]);\n                vertices.Add(victim_mesh.vertices[p3]);\n\n                // \u540c\u69d8\u306b\u3001\u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6cd5\u7dda\u914d\u5217\u304b\u3089\u6cd5\u7dda\u3092\u53d6\u5f97\u3057\u8a2d\u5b9a\u3059\u308b\n                normals.Add(victim_mesh.normals[p1]);\n                normals.Add(victim_mesh.normals[p2]);\n                normals.Add(victim_mesh.normals[p3]);\n\n                // \u540c\u69d8\u306b\u3001UV\u3082\u3002\n                uvs.Add(victim_mesh.uv[p1]);\n                uvs.Add(victim_mesh.uv[p2]);\n                uvs.Add(victim_mesh.uv[p3]);\n            }\n\n            /// <summary>\n            /// \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\u3059\u308b\n            /// \u203b \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u3066\u3044\u308b\u4ed6\u30e1\u30bd\u30c3\u30c9\u3068\u306f\u7570\u306a\u308a\u3001\u5f15\u6570\u306e\u5024\u3067\u9802\u70b9\uff08\u30dd\u30ea\u30b4\u30f3\uff09\u3092\u8ffd\u52a0\u3059\u308b\n            /// </summary>\n            /// <param name=\"points3\">\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u5f62\u6210\u3059\u308b3\u9802\u70b9</param>\n            /// <param name=\"normals3\">3\u9802\u70b9\u306e\u6cd5\u7dda</param>\n            /// <param name=\"uvs3\">3\u9802\u70b9\u306eUV</param>\n            /// <param name=\"faceNormal\">\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda</param>\n            /// <param name=\"submesh\">\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5ID</param>\n            public void AddTriangle(Vector3[] points3, Vector3[] normals3, Vector2[] uvs3, Vector3 faceNormal, int submesh)\n            {\n                // \u5f15\u6570\u306e3\u9802\u70b9\u304b\u3089\u6cd5\u7dda\u3092\u8a08\u7b97\n                Vector3 calculated_normal = Vector3.Cross((points3[1] - points3[0]).normalized, (points3[2] - points3[0]).normalized);\n\n                int p1 = 0;\n                int p2 = 1;\n                int p3 = 2;\n\n                // \u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u6cd5\u7dda\u3068\u9006\u3060\u3063\u305f\u5834\u5408\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u9806\u756a\u3092\u9006\u9806\u306b\u3059\u308b\uff08\u3064\u307e\u308a\u9762\u3092\u88cf\u8fd4\u3059\uff09\n                if (Vector3.Dot(calculated_normal, faceNormal) < 0)\n                {\n                    p1 = 2;\n                    p2 = 1;\n                    p3 = 0;\n                }\n\n                int base_index = vertices.Count;\n\n                subIndices[submesh].Add(base_index + 0);\n                subIndices[submesh].Add(base_index + 1);\n                subIndices[submesh].Add(base_index + 2);\n\n                triangles.Add(base_index + 0);\n                triangles.Add(base_index + 1);\n                triangles.Add(base_index + 2);\n\n                vertices.Add(points3[p1]);\n                vertices.Add(points3[p2]);\n                vertices.Add(points3[p3]);\n\n                normals.Add(normals3[p1]);\n                normals.Add(normals3[p2]);\n                normals.Add(normals3[p3]);\n\n                uvs.Add(uvs3[p1]);\n                uvs.Add(uvs3[p2]);\n                uvs.Add(uvs3[p3]);\n            }\n\n        }\n\n        private static MeshCutSide left_side = new MeshCutSide();\n        private static MeshCutSide right_side = new MeshCutSide();\n\n        private static Plane blade;\n        private static Mesh victim_mesh;\n\n        // capping stuff\n        private static List<Vector3> new_vertices = new List<Vector3>();\n\n        /// <summary>\n        /// Cut the specified victim, blade_plane and capMaterial.\n        /// \uff08\u6307\u5b9a\u3055\u308c\u305f\u300cvictim\u300d\u3092\u30ab\u30c3\u30c8\u3059\u308b\u3002\u30d6\u30ec\u30fc\u30c9\uff08\u5e73\u9762\uff09\u3068\u30de\u30c6\u30ea\u30a2\u30eb\u304b\u3089\u5207\u65ad\u3092\u5b9f\u884c\u3059\u308b\uff09\n        /// </summary>\n        /// <param name=\"victim\">Victim.</param>\n        /// <param name=\"blade_plane\">Blade plane.</param>\n        /// <param name=\"capMaterial\">Cap material.</param>\n        public static GameObject[] Cut(GameObject victim, Vector3 anchorPoint, Vector3 normalDirection, Material capMaterial)\n        {\n            // set the blade relative to victim\n            // victim\u304b\u3089\u76f8\u5bfe\u7684\u306a\u5e73\u9762\uff08\u30d6\u30ec\u30fc\u30c9\uff09\u3092\u30bb\u30c3\u30c8\n            // \u5177\u4f53\u7684\u306b\u306f\u3001\u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ed\u30fc\u30ab\u30eb\u5ea7\u6a19\u3067\u306e\u5e73\u9762\u306e\u6cd5\u7dda\u3068\u4f4d\u7f6e\u304b\u3089\u5e73\u9762\u3092\u751f\u6210\u3059\u308b\n            blade = new Plane(\n                victim.transform.InverseTransformDirection(-normalDirection),\n                victim.transform.InverseTransformPoint(anchorPoint)\n            );\n\n            // get the victims mesh\n            // \u5bfe\u8c61\u306e\u30e1\u30c3\u30b7\u30e5\u3092\u53d6\u5f97\n            victim_mesh = victim.GetComponent<MeshFilter>().mesh;\n\n            // reset values\n            // \u65b0\u3057\u3044\u9802\u70b9\u90e1\n            new_vertices.Clear();\n\n            // \u5e73\u9762\u3088\u308a\u5de6\u306e\u9802\u70b9\u90e1\uff08MeshCutSide\uff09\n            left_side.ClearAll();\n\n            //\u5e73\u9762\u3088\u308a\u53f3\u306e\u9802\u70b9\u90e1\uff08MeshCutSide\uff09\n            right_side.ClearAll();\n\n            // \u3053\u3053\u3067\u306e\u300c3\u300d\u306f\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\uff1f\n            bool[] sides = new bool[3];\n            int[] indices;\n            int p1,p2,p3;\n\n            // go throught the submeshes\n            // \u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\n            for (int sub = 0; sub < victim_mesh.subMeshCount; sub++)\n            {\n                // \u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6570\u3092\u53d6\u5f97\n                indices = victim_mesh.GetIndices(sub);\n\n                // List<List<int>>\u578b\u306e\u30ea\u30b9\u30c8\u3002\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u4e00\u3064\u5206\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30ea\u30b9\u30c8\n                left_side.subIndices.Add(new List<int>());  // \u5de6\n                right_side.subIndices.Add(new List<int>()); // \u53f3\n\n                // \u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6570\u5206\u30eb\u30fc\u30d7\n                for (int i = 0; i < indices.Length; i += 3)\n                {\n                    // p1 - p3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3002\u3064\u307e\u308a\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\n                    p1 = indices[i + 0];\n                    p2 = indices[i + 1];\n                    p3 = indices[i + 2];\n\n                    // \u305d\u308c\u305e\u308c\u8a55\u4fa1\u4e2d\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u9802\u70b9\u304c\u3001\u5192\u982d\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u5e73\u9762\u306e\u5de6\u53f3\u3069\u3061\u3089\u306b\u3042\u308b\u304b\u3092\u8a55\u4fa1\u3002\n                    // `GetSide` \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308abool\u3092\u5f97\u308b\u3002\n                    sides[0] = blade.GetSide(victim_mesh.vertices[p1]);\n                    sides[1] = blade.GetSide(victim_mesh.vertices[p2]);\n                    sides[2] = blade.GetSide(victim_mesh.vertices[p3]);\n\n                    // whole triangle\n                    // \u9802\u70b9\uff10\u3068\u9802\u70b9\uff11\u304a\u3088\u3073\u9802\u70b9\uff12\u304c\u3069\u3061\u3089\u3082\u540c\u3058\u5074\u306b\u3042\u308b\u5834\u5408\u306f\u30ab\u30c3\u30c8\u3057\u306a\u3044\n                    if (sides[0] == sides[1] && sides[0] == sides[2])\n                    {\n                        if (sides[0])\n                        { // left side\n                          // GetSide\u30e1\u30bd\u30c3\u30c9\u3067\u30dd\u30b8\u30c6\u30a3\u30d6\uff08true\uff09\u306e\u5834\u5408\u306f\u5de6\u5074\u306b\u3042\u308a\n                            left_side.AddTriangle(p1, p2, p3, sub);\n                        }\n                        else\n                        {\n                            right_side.AddTriangle(p1, p2, p3, sub);\n                        }\n                    }\n                    else\n                    { // cut the triangle\n                      // \u305d\u3046\u3067\u306f\u306a\u304f\u3001\u3069\u3061\u3089\u304b\u306e\u70b9\u304c\u5e73\u9762\u306e\u53cd\u5bfe\u5074\u306b\u3042\u308b\u5834\u5408\u306f\u30ab\u30c3\u30c8\u3092\u5b9f\u884c\u3059\u308b\n                        Cut_this_Face(sub, sides, p1, p2, p3);\n                    }\n                }\n            }\n\n            // \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30de\u30c6\u30ea\u30a2\u30eb\u914d\u5217\u3092\u53d6\u5f97\n            Material[] mats = victim.GetComponent<MeshRenderer>().sharedMaterials;\n\n            // \u53d6\u5f97\u3057\u305f\u30de\u30c6\u30ea\u30a2\u30eb\u914d\u5217\u306e\u6700\u5f8c\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u304c\u3001\u30ab\u30c3\u30c8\u9762\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u3067\u306a\u3044\u5834\u5408\n            if (mats[mats.Length - 1].name != capMaterial.name)\n            { // add cap indices\n                // \u30ab\u30c3\u30c8\u9762\u7528\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u8ffd\u52a0\uff1f\n                left_side.subIndices.Add(new List<int>());\n                right_side.subIndices.Add(new List<int>());\n\n                // \u30ab\u30c3\u30c8\u9762\u5206\u5897\u3084\u3057\u305f\u30de\u30c6\u30ea\u30a2\u30eb\u914d\u5217\u3092\u6e96\u5099\n                Material[] newMats = new Material[mats.Length + 1];\n\n                // \u65e2\u5b58\u306e\u3082\u306e\u3092\u65b0\u3057\u3044\u914d\u5217\u306b\u30b3\u30d4\u30fc\n                mats.CopyTo(newMats, 0);\n\n                // \u65b0\u3057\u3044\u30de\u30c6\u30ea\u30a2\u30eb\u914d\u5217\u306e\u6700\u5f8c\u306b\u3001\u30ab\u30c3\u30c8\u9762\u7528\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u8ffd\u52a0\n                newMats[mats.Length] = capMaterial;\n\n                // \u751f\u6210\u3057\u305f\u30de\u30c6\u30ea\u30a2\u30eb\u30ea\u30b9\u30c8\u3092\u518d\u8a2d\u5b9a\n                mats = newMats;\n            }\n\n            // cap the opennings\n            // \u30ab\u30c3\u30c8\u958b\u59cb\n            Capping();\n\n\n            // Left Mesh\n            // \u5de6\u5074\u306e\u30e1\u30c3\u30b7\u30e5\u3092\u751f\u6210\n            // MeshCutSide\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u304b\u3089\u5404\u5024\u3092\u30b3\u30d4\u30fc\n            Mesh left_HalfMesh = new Mesh();\n            left_HalfMesh.name = \"Split Mesh Left\";\n            left_HalfMesh.vertices  = left_side.vertices.ToArray();\n            left_HalfMesh.triangles = left_side.triangles.ToArray();\n            left_HalfMesh.normals   = left_side.normals.ToArray();\n            left_HalfMesh.uv        = left_side.uvs.ToArray();\n\n            left_HalfMesh.subMeshCount = left_side.subIndices.Count;\n            for (int i = 0; i < left_side.subIndices.Count; i++)\n            {\n                left_HalfMesh.SetIndices(left_side.subIndices[i].ToArray(), MeshTopology.Triangles, i); \n            }\n\n\n            // Right Mesh\n            // \u53f3\u5074\u306e\u30e1\u30c3\u30b7\u30e5\u3082\u540c\u69d8\u306b\u751f\u6210\n            Mesh right_HalfMesh = new Mesh();\n            right_HalfMesh.name = \"Split Mesh Right\";\n            right_HalfMesh.vertices  = right_side.vertices.ToArray();\n            right_HalfMesh.triangles = right_side.triangles.ToArray();\n            right_HalfMesh.normals   = right_side.normals.ToArray();\n            right_HalfMesh.uv        = right_side.uvs.ToArray();\n\n            right_HalfMesh.subMeshCount = right_side.subIndices.Count;\n            for (int i = 0; i < right_side.subIndices.Count; i++)\n            {\n                right_HalfMesh.SetIndices(right_side.subIndices[i].ToArray(), MeshTopology.Triangles, i);\n            }\n\n\n            // assign the game objects\n\n            // \u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5de6\u5074\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\n            victim.name = \"left side\";\n            victim.GetComponent<MeshFilter>().mesh = left_HalfMesh;\n\n\n            // \u53f3\u5074\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u65b0\u898f\u4f5c\u6210\n            GameObject leftSideObj = victim;\n\n            GameObject rightSideObj = new GameObject(\"right side\", typeof(MeshFilter), typeof(MeshRenderer));\n            rightSideObj.transform.position = victim.transform.position;\n            rightSideObj.transform.rotation = victim.transform.rotation;\n            rightSideObj.GetComponent<MeshFilter>().mesh = right_HalfMesh;\n\n            // assign mats\n            // \u65b0\u898f\u751f\u6210\u3057\u305f\u30de\u30c6\u30ea\u30a2\u30eb\u30ea\u30b9\u30c8\u3092\u305d\u308c\u305e\u308c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u9069\u7528\u3059\u308b\n            leftSideObj.GetComponent<MeshRenderer>().materials = mats;\n            rightSideObj.GetComponent<MeshRenderer>().materials = mats;\n\n            // \u5de6\u53f3\u306eGameObject\u306e\u914d\u5217\u3092\u8fd4\u3059\n            return new GameObject[]{ leftSideObj, rightSideObj };\n        }\n\n        /// <summary>\n        /// \u30ab\u30c3\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3002\u305f\u3060\u3057\u3001\u5b9f\u969b\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u64cd\u4f5c\u3067\u306f\u306a\u304f\u3001\u3042\u304f\u307e\u3067\u9802\u70b9\u306e\u632f\u308a\u5206\u3051\u3001\u4e8b\u524d\u6e96\u5099\u3068\u3057\u3066\u306e\u5b9f\u884c\n        /// </summary>\n        /// <param name=\"submesh\">\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9</param>\n        /// <param name=\"sides\">\u8a55\u4fa1\u3057\u305f3\u9802\u70b9\u306e\u5de6\u53f3\u60c5\u5831</param>\n        /// <param name=\"index1\">\u9802\u70b91</param>\n        /// <param name=\"index2\">\u9802\u70b92</param>\n        /// <param name=\"index3\">\u9802\u70b93</param>\n        static void Cut_this_Face(int submesh, bool[] sides, int index1, int index2, int index3)\n        {\n            // \u5de6\u53f3\u305d\u308c\u305e\u308c\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u914d\u5217\u90e1\n            Vector3[] leftPoints = new Vector3[2];\n            Vector3[] leftNormals = new Vector3[2];\n            Vector2[] leftUvs = new Vector2[2];\n            Vector3[] rightPoints = new Vector3[2];\n            Vector3[] rightNormals = new Vector3[2];\n            Vector2[] rightUvs = new Vector2[2];\n\n            bool didset_left = false;\n            bool didset_right = false;\n\n            // 3\u9802\u70b9\u5206\u7e70\u308a\u8fd4\u3059\n            // \u51e6\u7406\u5185\u5bb9\u3068\u3057\u3066\u306f\u3001\u5de6\u53f3\u3092\u5224\u5b9a\u3057\u3066\u3001\u5de6\u53f3\u306e\u914d\u5217\u306b3\u9802\u70b9\u3092\u632f\u308a\u5206\u3051\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\n            int p = index1;\n            for (int side = 0; side < 3; side++)\n            {\n                switch(side)\n                {\n                    case 0:\n                        p = index1;\n                        break;\n                    case 1:\n                        p = index2;\n                        break;\n                    case 2:\n                        p = index3;\n                        break;\n                }\n\n                // sides[side]\u304ctrue\u3001\u3064\u307e\u308a\u5de6\u5074\u306e\u5834\u5408\n                if (sides[side])\n                {\n                    // \u3059\u3067\u306b\u5de6\u5074\u306e\u9802\u70b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\uff083\u9802\u70b9\u304c\u5de6\u53f3\u306b\u632f\u308a\u5206\u3051\u3089\u308c\u308b\u305f\u3081\u3001\u5fc5\u305a\u5de6\u53f3\u3069\u3061\u3089\u304b\u306f2\u3064\u306e\u9802\u70b9\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308b\uff09\n                    if (!didset_left)\n                    {\n                        didset_left = true;\n\n                        // \u3053\u3053\u306f0,1\u3068\u3082\u306b\u540c\u3058\u5024\u306b\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u7d9a\u304f\u51e6\u7406\u3067\n                        // leftPoints[0,1]\u306e\u5024\u3092\u4f7f\u3063\u3066\u5206\u5272\u70b9\u3092\u6c42\u3081\u308b\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u305f\u3081\u3002\n                        // \u3064\u307e\u308a\u3001\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n\n                        // \u9802\u70b9\u306e\u8a2d\u5b9a\n                        leftPoints[0]  = victim_mesh.vertices[p];\n                        leftPoints[1]  = leftPoints[0];\n\n                        // UV\u306e\u8a2d\u5b9a\n                        leftUvs[0]     = victim_mesh.uv[p];\n                        leftUvs[1]     = leftUvs[0];\n\n                        // \u6cd5\u7dda\u306e\u8a2d\u5b9a\n                        leftNormals[0] = victim_mesh.normals[p];\n                        leftNormals[1] = leftNormals[0];\n                    }\n                    else\n                    {\n                        // 2\u9802\u70b9\u76ee\u306e\u5834\u5408\u306f2\u756a\u76ee\u306b\u76f4\u63a5\u9802\u70b9\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\n                        leftPoints[1]  = victim_mesh.vertices[p];\n                        leftUvs[1]     = victim_mesh.uv[p];\n                        leftNormals[1] = victim_mesh.normals[p];\n                    }\n                }\n                else\n                {\n                    // \u5de6\u3068\u540c\u69d8\u306e\u64cd\u4f5c\u3092\u53f3\u306b\u3082\u884c\u3046\n                    if (!didset_right)\n                    {\n                        didset_right = true;\n\n                        rightPoints[0]  = victim_mesh.vertices[p];\n                        rightPoints[1]  = rightPoints[0];\n                        rightUvs[0]     = victim_mesh.uv[p];\n                        rightUvs[1]     = rightUvs[0];\n                        rightNormals[0] = victim_mesh.normals[p];\n                        rightNormals[1] = rightNormals[0];\n                    }\n                    else\n                    {\n                        rightPoints[1]  = victim_mesh.vertices[p];\n                        rightUvs[1]     = victim_mesh.uv[p];\n                        rightNormals[1] = victim_mesh.normals[p];\n                    }\n                }\n            }\n\n            // \u5206\u5272\u3055\u308c\u305f\u70b9\u306e\u6bd4\u7387\u8a08\u7b97\u306e\u305f\u3081\u306e\u8ddd\u96e2\n            float normalizedDistance = 0f;\n\n            // \u8ddd\u96e2\n            float distance = 0f;\n\n\n            // ---------------------------\n            // \u5de6\u5074\u306e\u51e6\u7406\n\n            // \u5b9a\u7fa9\u3057\u305f\u9762\u3068\u4ea4\u5dee\u3059\u308b\u70b9\u3092\u63a2\u3059\u3002\n            // \u3064\u307e\u308a\u3001\u5e73\u9762\u306b\u3088\u3063\u3066\u5206\u5272\u3055\u308c\u308b\u70b9\u3092\u63a2\u3059\u3002\n            // \u5de6\u306e\u70b9\u3092\u8d77\u70b9\u306b\u3001\u53f3\u306e\u70b9\u306b\u5411\u3051\u305f\u30ec\u30a4\u3092\u98db\u3070\u3057\u3001\u305d\u306e\u5206\u5272\u70b9\u3092\u63a2\u308b\u3002\n            blade.Raycast(new Ray(leftPoints[0], (rightPoints[0] - leftPoints[0]).normalized), out distance);\n\n            // \u898b\u3064\u304b\u3063\u305f\u4ea4\u5dee\u70b9\u3092\u3001\u9802\u70b9\u9593\u306e\u8ddd\u96e2\u3067\u5272\u308b\u3053\u3068\u3067\u3001\u5206\u5272\u70b9\u306e\u5de6\u53f3\u306e\u5272\u5408\u3092\u7b97\u51fa\u3059\u308b\n            normalizedDistance = distance / (rightPoints[0] - leftPoints[0]).magnitude;\n\n            // \u30ab\u30c3\u30c8\u5f8c\u306e\u65b0\u9802\u70b9\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067\u306e\u88dc\u5b8c\u3068\u540c\u3058\u304f\u3001\u5206\u5272\u3057\u305f\u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u9069\u5207\u306b\u88dc\u5b8c\u3057\u305f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\n            Vector3 newVertex1 = Vector3.Lerp(leftPoints[0], rightPoints[0], normalizedDistance);\n            Vector2 newUv1     = Vector2.Lerp(leftUvs[0], rightUvs[0], normalizedDistance);\n            Vector3 newNormal1 = Vector3.Lerp(leftNormals[0] , rightNormals[0], normalizedDistance);\n\n            // \u65b0\u9802\u70b9\u90e1\u306b\u65b0\u3057\u3044\u9802\u70b9\u3092\u8ffd\u52a0\n            new_vertices.Add(newVertex1);\n\n\n            // ---------------------------\n            // \u53f3\u5074\u306e\u51e6\u7406\n\n            blade.Raycast(new Ray(leftPoints[1], (rightPoints[1] - leftPoints[1]).normalized), out distance);\n\n            normalizedDistance = distance / (rightPoints[1] - leftPoints[1]).magnitude;\n            Vector3 newVertex2 = Vector3.Lerp(leftPoints[1], rightPoints[1], normalizedDistance);\n            Vector2 newUv2     = Vector2.Lerp(leftUvs[1], rightUvs[1], normalizedDistance);\n            Vector3 newNormal2 = Vector3.Lerp(leftNormals[1] , rightNormals[1], normalizedDistance);\n\n            // \u65b0\u9802\u70b9\u90e1\u306b\u65b0\u3057\u3044\u9802\u70b9\u3092\u8ffd\u52a0\n            new_vertices.Add(newVertex2);\n\n\n            // \u8a08\u7b97\u3055\u308c\u305f\u65b0\u3057\u3044\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001\u65b0\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u5de6\u53f3\u3068\u3082\u306b\u8ffd\u52a0\u3059\u308b\n            // memo: \u3069\u3046\u5206\u5272\u3055\u308c\u3066\u3082\u3001\u5de6\u53f3\u3069\u3061\u3089\u304b\u306f1\u3064\u306e\u4e09\u89d2\u5f62\u306b\u306a\u308b\u6c17\u304c\u3059\u308b\u3051\u3069\u3001\u7e2e\u9000\u4e09\u89d2\u5f62\u7684\u306a\u611f\u3058\u3067\u3068\u306b\u304b\u304f2\u3064\u305a\u3064\u8ffd\u52a0\u3057\u3066\u3044\u308b\u611f\u3058\u3060\u308d\u3046\u304b\uff1f\n            left_side.AddTriangle(\n                new Vector3[]{leftPoints[0], newVertex1, newVertex2},\n                new Vector3[]{leftNormals[0], newNormal1, newNormal2 },\n                new Vector2[]{leftUvs[0], newUv1, newUv2},\n                newNormal1,\n                submesh\n            );\n\n            left_side.AddTriangle(\n                new Vector3[]{leftPoints[0], leftPoints[1], newVertex2},\n                new Vector3[]{leftNormals[0], leftNormals[1], newNormal2},\n                new Vector2[]{leftUvs[0], leftUvs[1], newUv2},\n                newNormal2,\n                submesh\n            );\n\n            right_side.AddTriangle(\n                new Vector3[]{rightPoints[0], newVertex1, newVertex2},\n                new Vector3[]{rightNormals[0], newNormal1, newNormal2},\n                new Vector2[]{rightUvs[0], newUv1, newUv2},\n                newNormal1,\n                submesh\n            );\n\n            right_side.AddTriangle(\n                new Vector3[]{rightPoints[0], rightPoints[1], newVertex2},\n                new Vector3[]{rightNormals[0], rightNormals[1], newNormal2},\n                new Vector2[]{rightUvs[0], rightUvs[1], newUv2},\n                newNormal2,\n                submesh\n            );\n        }\n\n        private static List<Vector3> capVertTracker = new List<Vector3>();\n        private static List<Vector3> capVertpolygon = new List<Vector3>();\n\n        /// <summary>\n        /// \u30ab\u30c3\u30c8\u3092\u5b9f\u884c\n        /// </summary>\n        static void Capping()\n        {\n            // \u30ab\u30c3\u30c8\u7528\u9802\u70b9\u8ffd\u8de1\u30ea\u30b9\u30c8\n            // \u5177\u4f53\u7684\u306b\u306f\u65b0\u9802\u70b9\u5168\u90e8\u306b\u5bfe\u3059\u308b\u8abf\u67fb\u3092\u884c\u3046\u3002\u305d\u306e\u904e\u7a0b\u3067\u8abf\u67fb\u6e08\u307f\u3092\u30de\u30fc\u30af\u3059\u308b\u76ee\u7684\u3067\u5229\u7528\u3059\u308b\u3002\n            capVertTracker.Clear();\n\n            // \u65b0\u3057\u304f\u751f\u6210\u3057\u305f\u9802\u70b9\u5206\u3060\u3051\u30eb\u30fc\u30d7\u3059\u308b\uff1d\u5168\u65b0\u9802\u70b9\u306b\u5bfe\u3057\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u8abf\u67fb\u3092\u884c\u3046\n            // \u5177\u4f53\u7684\u306b\u306f\u3001\u30ab\u30c3\u30c8\u9762\u3092\u69cb\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u3001\u30ab\u30c3\u30c8\u6642\u306b\u91cd\u8907\u3057\u305f\u9802\u70b9\u3092\u7db2\u7f85\u3057\u3066\u300c\u9762\u300d\u3092\u5f62\u6210\u3059\u308b\u9802\u70b9\u3092\u8abf\u67fb\u3059\u308b\n            for (int i = 0; i < new_vertices.Count; i++)\n            {\n                // \u5bfe\u8c61\u9802\u70b9\u304c\u3059\u3067\u306b\u8abf\u67fb\u6e08\u307f\u306e\u30de\u30fc\u30af\u3055\u308c\u3066\uff08\u8ffd\u8de1\u914d\u5217\u306b\u542b\u307e\u308c\u3066\uff09\u3044\u305f\u3089\u30b9\u30ad\u30c3\u30d7\n                if (capVertTracker.Contains(new_vertices[i]))\n                {\n                    continue;\n                }\n\n                // \u30ab\u30c3\u30c8\u7528\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u3092\u30af\u30ea\u30a2\n                capVertpolygon.Clear();\n\n                // \u8abf\u67fb\u9802\u70b9\u3068\u6b21\u306e\u9802\u70b9\u3092\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u306b\u4fdd\u6301\u3059\u308b\n                capVertpolygon.Add(new_vertices[i + 0]);\n                capVertpolygon.Add(new_vertices[i + 1]);\n\n                // \u8ffd\u8de1\u914d\u5217\u306b\u81ea\u8eab\u3068\u6b21\u306e\u9802\u70b9\u3092\u8ffd\u52a0\u3059\u308b\uff08\u8abf\u67fb\u6e08\u307f\u306e\u30de\u30fc\u30af\u3092\u3064\u3051\u308b\uff09\n                capVertTracker.Add(new_vertices[i + 0]);\n                capVertTracker.Add(new_vertices[i + 1]);\n\n                // \u91cd\u8907\u9802\u70b9\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3057\u8abf\u67fb\u3059\u308b\n                bool isDone = false;\n                while (!isDone)\n                {\n                    isDone = true;\n\n                    // \u65b0\u9802\u70b9\u90e1\u3092\u30eb\u30fc\u30d7\u3057\u3001\u300c\u9762\u300d\u3092\u69cb\u6210\u3059\u308b\u8981\u56e0\u3068\u306a\u308b\u9802\u70b9\u3092\u3059\u3079\u3066\u62bd\u51fa\u3059\u308b\u3002\u62bd\u51fa\u304c\u7d42\u308f\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3092\u7e70\u308a\u8fd4\u3059\n                    // 2\u9802\u70b9\u3054\u3068\u306b\u8abf\u67fb\u3092\u884c\u3046\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306f2\u5358\u4f4d\u3067\u3059\u3059\u3081\u308b\n                    for (int k = 0; k < new_vertices.Count; k += 2)\n                    { // go through the pairs\n                        // \u30da\u30a2\u3068\u306a\u308b\u9802\u70b9\u3092\u63a2\u3059\n                        // \u3053\u3053\u3067\u306e\u30da\u30a2\u3068\u306f\u3001\u3044\u3061\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u304b\u3089\u751f\u6210\u3055\u308c\u308b\u65b0\u9802\u70b9\u306e\u30da\u30a2\u3002\n                        // \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u304b\u3089\u306f\u5fc5\u305a2\u9802\u70b9\u304c\u751f\u6210\u3055\u308c\u308b\u305f\u3081\u3001\u305d\u308c\u3092\u63a2\u3059\u3002\n                        // \u307e\u305f\u3001\u5168\u30dd\u30ea\u30b4\u30f3\u306b\u5bfe\u3057\u3066\u5206\u5272\u70b9\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u307b\u307c\u5fc5\u305a\u3001\u307e\u3063\u305f\u304f\u540c\u3058\u4f4d\u7f6e\u306b\u5b58\u5728\u3059\u308b\u3001\u5225\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u306e\u5206\u5272\u9802\u70b9\u304c\u5b58\u5728\u3059\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n                        if (new_vertices[k] == capVertpolygon[capVertpolygon.Count - 1] && !capVertTracker.Contains(new_vertices[k + 1]))\n                        {   // if so add the other\n                            // \u30da\u30a2\u306e\u9802\u70b9\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u305d\u308c\u3092\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u306b\u8ffd\u52a0\u3057\u3001\n                            // \u8abf\u67fb\u6e08\u30de\u30fc\u30af\u3092\u3064\u3051\u3066\u3001\u6b21\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u306b\u56de\u3059\n                            isDone = false;\n                            capVertpolygon.Add(new_vertices[k + 1]);\n                            capVertTracker.Add(new_vertices[k + 1]);\n                        }\n                        else if (new_vertices[k + 1] == capVertpolygon[capVertpolygon.Count - 1] && !capVertTracker.Contains(new_vertices[k]))\n                        {   // if so add the other\n                            isDone = false;\n                            capVertpolygon.Add(new_vertices[k]);\n                            capVertTracker.Add(new_vertices[k]);\n                        }\n                    }\n                }\n\n                // \u898b\u3064\u304b\u3063\u305f\u9802\u70b9\u90e1\u3092\u5143\u306b\u3001\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n                FillCap(capVertpolygon);\n            }\n        }\n\n        /// <summary>\n        /// \u30ab\u30c3\u30c8\u9762\u3092\u57cb\u3081\u308b\uff1f\n        /// </summary>\n        /// <param name=\"vertices\">\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u9802\u70b9\u30ea\u30b9\u30c8</param>\n        static void FillCap(List<Vector3> vertices)\n        {\n            // center of the cap\n            // \u30ab\u30c3\u30c8\u5e73\u9762\u306e\u4e2d\u5fc3\u70b9\u3092\u8a08\u7b97\u3059\u308b\n            Vector3 center = Vector3.zero;\n\n            // \u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u9802\u70b9\u4f4d\u7f6e\u3092\u3059\u3079\u3066\u5408\u8a08\u3059\u308b\n            foreach(Vector3 point in vertices)\n            {\n                center += point;\n            }\n\n            // \u305d\u308c\u3092\u9802\u70b9\u6570\u306e\u5408\u8a08\u3067\u5272\u308a\u3001\u4e2d\u5fc3\u3068\u3059\u308b\n            center = center / vertices.Count;\n\n            // you need an axis based on the cap\n            // \u30ab\u30c3\u30c8\u5e73\u9762\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305fupward\n            Vector3 upward = Vector3.zero;\n\n            // 90 degree turn\n            // \u30ab\u30c3\u30c8\u5e73\u9762\u306e\u6cd5\u7dda\u3092\u5229\u7528\u3057\u3066\u3001\u300c\u4e0a\u300d\u65b9\u5411\u3092\u6c42\u3081\u308b\n            // \u5177\u4f53\u7684\u306b\u306f\u3001\u5e73\u9762\u306e\u5de6\u5074\u3092\u4e0a\u3068\u3057\u3066\u5229\u7528\u3059\u308b\n            upward.x =  blade.normal.y;\n            upward.y = -blade.normal.x;\n            upward.z =  blade.normal.z;\n\n            // \u6cd5\u7dda\u3068\u300c\u4e0a\u65b9\u5411\u300d\u304b\u3089\u3001\u6a2a\u8ef8\u3092\u7b97\u51fa\n            Vector3 left = Vector3.Cross(blade.normal, upward);\n\n            Vector3 displacement = Vector3.zero;\n            Vector3 newUV1 = Vector3.zero;\n            Vector3 newUV2 = Vector3.zero;\n\n            // \u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f\u9802\u70b9\u5206\u30eb\u30fc\u30d7\u3092\u56de\u3059\n            for (int i = 0; i < vertices.Count; i++)\n            {\n                // \u8a08\u7b97\u3067\u6c42\u3081\u305f\u4e2d\u5fc3\u70b9\u304b\u3089\u3001\u5404\u9802\u70b9\u3078\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb\n                displacement = vertices[i] - center;\n\n                // \u65b0\u898f\u751f\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u306eUV\u5ea7\u6a19\u3092\u6c42\u3081\u308b\u3002\n                // displacement\u304c\u4e2d\u5fc3\u304b\u3089\u306e\u30d9\u30af\u30c8\u30eb\u306e\u305f\u3081\u3001UV\u7684\u306a\u4e2d\u5fc3\u3067\u3042\u308b0.5\u3092\u30d9\u30fc\u30b9\u306b\u3001\u5185\u7a4d\u3092\u4f7f\u3063\u3066UV\u306e\u6700\u7d42\u7684\u306a\u4f4d\u7f6e\u3092\u5f97\u308b\n                newUV1 = Vector3.zero;\n                newUV1.x = 0.5f + Vector3.Dot(displacement, left);\n                newUV1.y = 0.5f + Vector3.Dot(displacement, upward);\n                newUV1.z = 0.5f + Vector3.Dot(displacement, blade.normal);\n\n                // \u6b21\u306e\u9802\u70b9\u3002\u305f\u3060\u3057\u3001\u6700\u5f8c\u306e\u9802\u70b9\u306e\u6b21\u306f\u6700\u521d\u306e\u9802\u70b9\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u3001\u82e5\u5e72\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u6307\u5b9a\u65b9\u6cd5\u3092\u3057\u3066\u3044\u308b\uff08% vertices.Count\uff09\n                displacement = vertices[(i + 1) % vertices.Count] - center;\n\n                newUV2 = Vector3.zero;\n                newUV2.x = 0.5f + Vector3.Dot(displacement, left);\n                newUV2.y = 0.5f + Vector3.Dot(displacement, upward);\n                newUV2.z = 0.5f + Vector3.Dot(displacement, blade.normal);\n\n                // uvs.Add(new Vector2(relativePosition.x, relativePosition.y));\n                // normals.Add(blade.normal);\n\n                // \u5de6\u5074\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u3057\u3066\u3001\u6c42\u3081\u305fUV\u3092\u5229\u7528\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n                left_side.AddTriangle(\n                    new Vector3[]{\n                        vertices[i],\n                        vertices[(i + 1) % vertices.Count],\n                        center\n                    },\n                    new Vector3[]{\n                        -blade.normal,\n                        -blade.normal,\n                        -blade.normal\n                    },\n                    new Vector2[]{\n                        newUV1,\n                        newUV2,\n                        new Vector2(0.5f, 0.5f)\n                    },\n                    -blade.normal,\n                    left_side.subIndices.Count - 1 // \u30ab\u30c3\u30c8\u9762\u3002\u6700\u5f8c\u306e\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n                );\n\n                // \u53f3\u5074\u306e\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3002\u57fa\u672c\u306f\u5de6\u5074\u3068\u540c\u3058\u3060\u304c\u3001\u6cd5\u7dda\u3060\u3051\u9006\u5411\u304d\u3002\n                right_side.AddTriangle(\n                    new Vector3[]{\n                        vertices[i],\n                        vertices[(i + 1) % vertices.Count],\n                        center\n                    },\n                    new Vector3[]{\n                        blade.normal,\n                        blade.normal,\n                        blade.normal\n                    },\n                    new Vector2[]{\n                        newUV1,\n                        newUV2,\n                        new Vector2(0.5f, 0.5f)\n                    },\n                    blade.normal,\n                    right_side.subIndices.Count - 1 // \u30ab\u30c3\u30c8\u9762\u3002\u6700\u5f8c\u306e\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n                );\n            }\n        }\n    }\n}\n\n## \u6982\u8981\n\nUnity\u4ee5\u5916\u3067\u3082\u305d\u3046\u3067\u3059\u304c\u3001\u30e1\u30c3\u30b7\u30e5\u306f\u9802\u70b9\u306e\u584a\u3067\u3059\u3002\n\u305d\u3057\u3066\u305d\u308c\u3089\u306fTriangle\u3084\u305d\u308c\u3089\u3092\u7d50\u3076Index\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u52dd\u624b\u306b\u9806\u756a\u3092\u5909\u3048\u3066\u3057\u307e\u3046\u3068\u9802\u70b9\u306e\u60c5\u5831\u306f\u3050\u3061\u3083\u3050\u3061\u3083\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u3061\u3083\u3093\u3068\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u306e\u305f\u3081\u3001\u30e1\u30c3\u30b7\u30e5\u3092\u5207\u65ad\u3057\u3066\u5225\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5206\u3051\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u305d\u308c\u306a\u308a\u306b\u9802\u70b9\u90e1\u3092\u8a08\u7b97\u3057\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u7e2b\u3044\u5408\u308f\u305b\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u305d\u3093\u306a\u30e1\u30c3\u30b7\u30e5\u306e\u30ab\u30c3\u30c8\u3092\u884c\u3046\u30b5\u30f3\u30d7\u30eb\u3092\u516c\u958b\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u4eba\u304c\u3044\u305f\u306e\u3067\u3001\u305d\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u3093\u3060\u30e1\u30e2\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u3069\u3093\u306a\u3082\u306e\u304b\u306f[YouTube](https://www.youtube.com/watch?v=xgoUmrhXyYE)\u3067\u516c\u958b\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u898b\u308b\u3068\u3069\u3093\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08\u3057\u304b\u3082[\u5b9f\u969b\u306b\u52d5\u304f\u30a2\u30bb\u30c3\u30c8\u3082\u516c\u958b](https://www.dropbox.com/sh/879q457fs3m5dtm/AACVSTvDaVJQcmDwnXfzLA5Ha?dl=0)\u3055\u308c\u3066\u3044\u307e\u3059\uff09\n\n*\uff08\u5168\u7136\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\u3001\u30e1\u30c3\u30b7\u30e5\u304c\u30ab\u30c3\u30c8\u3055\u308c\u308b\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u300cvictim\uff08\u88ab\u5bb3\u8005\uff09\u300d\u3068\u547c\u3093\u3067\u308b\u306e\u306f\u3061\u3087\u3063\u3068\u30a6\u30b1\u30eb\uff57\uff09*\n\n\u2191\u306e\u30a2\u30bb\u30c3\u30c8\u3092import\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u3082\u306e\u3067\u3059\u3002\n![](https://i.gyazo.com/d423f9dab3a292d570f7bf0bd01dd4a0.gif)\n\n\u5de6\u5074\u306e3\u672c\u306e\u30e9\u30a4\u30f3\u304c\u30ab\u30c3\u30c8\u9762\u3092\u793a\u3057\u3066\u3044\u3066\u3001\u305d\u306e\u5e73\u9762\u3067\u304d\u308c\u3044\u306b\u5207\u65ad\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3082\u3001\u3057\u3063\u304b\u308a\u3068\u5207\u65ad\u9762\u306b\u5225\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u306e\u306b\u3082\u6ce8\u76ee\u3067\u3059\u3002\n\n## \u5927\u307e\u304b\u306a\u6d41\u308c\n\n\u307e\u305a\u306f\u5927\u307e\u304b\u306a\u6d41\u308c\u304b\u3089\u8aac\u660e\u3057\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306a\u306b\u3092\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u308b\u3088\u308a\u3082\u3001\u5207\u65ad\u306b\u5fc5\u8981\u306a\u51e6\u7406\u304c\u306a\u3093\u306a\u306e\u304b\u3001\u3068\u3044\u3046\u8996\u70b9\u3067\u898b\u3066\u3082\u3089\u3046\u3068\u3044\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5168\u4f53\u50cf\u3092\u628a\u63e1\u3057\u305f\u4e0a\u3067\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304f\u3068\u51e6\u7406\u5185\u5bb9\u304c\u63a8\u6e2c\u3057\u3084\u3059\u304f\u306a\u308a\u3001\u7406\u89e3\u3092\u4fc3\u3059\u306f\u305a\u3067\u3059\u3002\n\n1. \u5207\u65ad\u3059\u308b\u5e73\u9762\u3092\u5b9a\u7fa9\u3059\u308b\n2. \u5207\u65ad\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u3059\u308b\n3. \u9078\u629e\u3055\u308c\u305f\u30e1\u30c3\u30b7\u30e5\u306e\u5168\u9802\u70b9\u306b\u5bfe\u3057\u3001\u5e73\u9762\u306e\u5de6\u5074\u304b\u53f3\u5074\u304b\u3092\u8a08\u7b97\u3059\u308b  \n*\u203b \u8a55\u4fa1\u3059\u308b\u5358\u4f4d\u306f\u30dd\u30ea\u30b4\u30f3\uff08\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\uff09\u5358\u4f4d\u3067\u884c\u3046*\n4. (3)\u306e\u969b\u30013\u9802\u70b9\u3059\u3079\u3066\u304c\u5e73\u9762\u306e\u5de6\u304b\u53f3\u306e\u3069\u3061\u3089\u304b\u306b\u5bc4\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u5207\u65ad\u5bfe\u8c61\u5916\u306a\u306e\u3067\u3001\u5de6\u5074\u304b\u53f3\u5074\u304b\u3060\u3051\u3092\u5224\u5225\u3057\u3066\u9069\u5207\u306b\u9802\u70b9\u3092\u4fdd\u6301\u3059\u308b  \n*\u203b \u6700\u7d42\u7684\u306b\u3075\u305f\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5206\u5272\u3059\u308b\u305f\u3081\u3001\u5de6\u53f3\u306e\u9802\u70b9\u60c5\u5831\u306a\u3069\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7528\u610f\u3057\u3066\u305d\u308c\u306b\u683c\u7d0d\u3059\u308b*\n5. (3)\u306e\u969b\u30013\u9802\u70b9\u304c\u5e73\u9762\u306e\u5de6\u53f3\u306b\u30d0\u30e9\u3051\u305f\u5834\u5408\u306b\u5207\u65ad\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\n6. \u5207\u65ad\u51e6\u7406\u306f\u307e\u305a\u30013\u9802\u70b9\u304c\u305d\u308c\u305e\u308c\u5e73\u9762\u306e\u5de6\u53f3\u3069\u3061\u3089\u306b\u3042\u308b\u304b\u3092\u5224\u65ad\u3057\u3001(3)\u540c\u69d8\u306b\u9069\u5207\u306b\u632f\u308a\u5206\u3051\u308b\n7. \u305d\u306e\u5f8c\u3001\u5207\u65ad\u5e73\u9762\u3068\u91cd\u306a\u308b2\u9802\u70b9\u3092\u65b0\u3057\u3044\u9802\u70b9\u3068\u3057\u3066\u8a08\u7b97\u3059\u308b\uff08\u203b1\uff09\n8. \u3059\u3079\u3066\u306e\u9802\u70b9\u306b\u5bfe\u3057\u3066\u632f\u308a\u5206\u3051\u304a\u3088\u3073\u9802\u70b9\u306e\u751f\u6210\u304c\u7d42\u308f\u3063\u305f\u3089\u3001(7)\u3067\u751f\u6210\u3057\u305f\u65b0\u9802\u70b9\u3059\u3079\u3066\u306b\u5bfe\u3057\u30da\u30a2\u3092\u7b97\u51fa\u3057\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n9. \u6700\u5f8c\u306b\u3001\u751f\u6210\u3057\u305f\u30dd\u30ea\u30b4\u30f3\u3092\u7528\u3044\u3066\u5207\u65ad\u9762\u3092\u5b9a\u7fa9\u3057\u3001\u65b0\u3057\u3044\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u9069\u7528\u3059\u308b\n\n\u203b1 ... \u4e09\u89d2\u5f62\uff08\u30dd\u30ea\u30b4\u30f3\uff09\u3092\u7dda\uff08\u5e73\u9762\uff09\u3067\u5206\u65ad\u3059\u308b\u3068\u3069\u3053\u3092\u3069\u3046\u5207\u3063\u3066\u3082\u5fc5\u305a2\u8fba\u3068\u4ea4\u308f\u308b\u3002\u3064\u307e\u308a**\u65b0\u3057\u3044\u9802\u70b9\u306f2\u3064**\u4f5c\u3089\u308c\u308b\u3002\n\n![cut-triangles.png](https://qiita-image-store.s3.amazonaws.com/0/5616/b210ec04-c9ec-33d7-2439-8ecf53f5d384.png)\n*\u3069\u308c\u304b\u306e\u8fba\u306b\u5e73\u884c\u3067\u306a\u3044\u9650\u308a\u3001\u5fc5\u305a2\u8fba\u3068\u4ea4\u308f\u308b*\n\n## \u5b9f\u88c5\u3068\u8003\u3048\u65b9\n\n### \u9802\u70b9\u304c\u5e73\u9762\u306e\u3069\u3061\u3089\u5074\u306b\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n\n\u9802\u70b9\u304c\u5e73\u9762\u306e\u3069\u3061\u3089\u5074\u306b\u3042\u308b\u304b\u306f\u5185\u7a4d\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306b\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u70b9 $p$ \u3068\u3001\u5e73\u9762\u306e\u4f4d\u7f6e $p_0$\u3001\u304a\u3088\u3073\u9762\u306e\u6cd5\u7dda $n$ \u3092\u4f7f\u3063\u3066\u3001\n\n```math\n(p - p_0) \\cdot n < 0 ... \u88cf  \\\\\n(p - p_0) \\cdot n > 0 ... \u8868  \\\\\n(p - p_0) \\cdot n = 0 ... \u5e73\u9762\u4e0a\n```\n\n\u3068\u3057\u3066\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n*\u3061\u306a\u307f\u306b `UnityEngine.Plane` \u30af\u30e9\u30b9\u306b\u306f\u3053\u3046\u3057\u305f\u5e73\u9762\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3092\u7c21\u5358\u306b\u3057\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u591a\u6570\u3042\u308b\u306e\u3067\u3001\u5b9f\u969b\u306f\u305d\u3061\u3089\u3092\u5229\u7528\u3057\u305f\u307b\u3046\u304c\u624b\u8efd\u3067\u3059\u3002*\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u629c\u7c8b\u3059\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp\nsides[0] = blade.GetSide(victim_mesh.vertices[p1]);\nsides[1] = blade.GetSide(victim_mesh.vertices[p2]);\nsides[2] = blade.GetSide(victim_mesh.vertices[p3]);\n```\n\n\u3053\u308c\u306f\u3001\u5207\u65ad\u5bfe\u8c61\u3068\u306a\u3063\u305f\u30e1\u30c3\u30b7\u30e5\u306e\u3001\u8a08\u7b97\u4e2d\u306e\u9802\u70b9\u304c\u5e73\u9762\u306e\u3069\u3061\u3089\u306b\u3042\u308b\u304b\u3092 `bool` \u3067\u53d6\u5f97\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\n### \u5e73\u9762\u306b\u5206\u65ad\u3055\u308c\u305f\u70b9\u3092\u6c42\u3081\u308b\n\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u5e73\u9762\u306e\u8868\u88cf\u306e\u5224\u5b9a\u306b\u3088\u308a\u3001\u5927\u90e8\u5206\u306e\u9802\u70b9\u306f\u5de6\u53f3\u306b\u9069\u5207\u306b\u632f\u308a\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6b8b\u308b\u306f\u3001\u5e73\u9762\u3068\u4ea4\u5dee\u3057\u3066\u3044\u308b\u30dd\u30ea\u30b4\u30f3\u306e\u5404\u8fba\u3092\u5206\u96e2\u3057\u3066\u3001\u65b0\u3057\u3044\u9802\u70b9\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u3001\u3072\u3068\u307e\u305a\u3059\u3079\u3066\u306e\u9802\u70b9\u3092\u5de6\u53f3\u306b\u632f\u308a\u5206\u3051\u3001\u304b\u3064\u5207\u65ad\u9762\u306b\u4f7f\u3048\u308b\u9802\u70b9\u90e1\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u8fba\u3092\u5206\u65ad\u3059\u308b\u9802\u70b9\u306e\u6c42\u3081\u65b9\u3067\u3059\u3002\n\n\u8272\u3005\u6587\u7ae0\u3067\u8aac\u660e\u3059\u308b\u524d\u306b\u3001\u4e0b\u306e\u56f3\u3092\u898b\u3066\u3082\u3089\u3046\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n![\u5e73\u9762\u5206\u5272.png](https://qiita-image-store.s3.amazonaws.com/0/5616/a8fea13f-a3e1-d9e4-4546-a2efa80aa6f4.png)\n\n\n\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u5e73\u9762\u304c\u5207\u65ad\u9762\u3067\u3059\u3002\n\u3053\u306e\u5e73\u9762\u306b\u3088\u308a\u3001\u9802\u70b9\u304c\u5de6\u53f3\u3069\u3061\u3089\u304b\u306b\u5206\u65ad\u3055\u308c\u307e\u3059\u3002\n\n\u56f3\u3067\u306f $p_0$ \u3068 $p_1$ \u304c\u5e73\u9762\u306e\u5de6\u5074\u3001$p_2$ \u304c\u5e73\u9762\u306e\u53f3\u5074\u3001\u305d\u3057\u3066\u9ec4\u8272\u3044\u70b9\u304c\u5206\u65ad\u3055\u308c\u305f\u9802\u70b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n#### \u5e73\u9762\u65b9\u5411\u3078\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\u3059\u308b\n\n\u70b9\u306e\u5272\u308a\u51fa\u3057\u65b9\u306f\u3001$p_0$ \u304a\u3088\u3073 $p_1$ \u304b\u3089\u3001$p_2$ \u65b9\u5411\u3078\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002\uff08$\\vec{p_2 p_0}$ \u3068 $\\vec{p_2 p_1}$\uff09\n\uff08\u5e73\u9762\u3078\u306e\u8ddd\u96e2\u306e\u7b97\u51fa\u306f\u3001\u4ee5\u524d\u66f8\u3044\u305f\u300c[[Unity] \u4efb\u610f\u306e\u7121\u9650\u9060\u306e\u5e73\u9762\u3068\u30d9\u30af\u30c8\u30eb\u3068\u306e\u4ea4\u70b9\u3092\u6c42\u3081\u308b](http://qiita.com/edo_m18/items/c8808f318f5abfa8af1e)\u300d\u3092\u898b\u3066\u3082\u3089\u3046\u3068\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff09\n\n\u304c\u3001\u4e0a\u306e\u65b9\u3067\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001`UnityEngine.Plane` \u30af\u30e9\u30b9\u306b\u306f\u3053\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\u3059\u308b\u306e\u306b\u9069\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\u53c2\u8003\u306b\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3082\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u8a08\u7b97\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u90e8\u5206\u3060\u3051\u3092\u629c\u7c8b\u3059\u308b\u3068\u3001\n\n```csharp\nblade.Raycast(new Ray(leftPoints[0], (rightPoints[0] - leftPoints[0]).normalized), out distance);\n```\n\n\u3053\u3053\u3067 `blade` \u306f\u5207\u65ad\u9762\u3092\u8868\u3059 `UnityEngine.Plane` \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\u3053\u308c\u306b `Raycast` \u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001\u30ec\u30a4\u3092\u98db\u3070\u3057\u3066\u3084\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u70b9\u3068\u65b9\u5411\u3092\u5143\u306b\u3001\u5e73\u9762\u3078\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\uff08\u4e0a\u306e\u4f8b\u3067\u306f `out distance` \u306b\u8ddd\u96e2\u304c\u5165\u308a\u3001\u30e1\u30bd\u30c3\u30c9\u81ea\u4f53\u306f\u3001\u5e73\u9762\u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3059\u308b\u5834\u5408\u306b `true` \u3092\u8fd4\u3057\u307e\u3059\uff09\n\n#### \u8fba\u3068\u8ddd\u96e2\u304b\u3089\u5207\u65ad\u9802\u70b9\u3092\u6c42\u3081\u308b\n\n`Raycast` \u3092\u7528\u3044\u3066\u5207\u65ad\u9802\u70b9\u307e\u3067\u306e\u300c\u8ddd\u96e2\u300d\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u305f\u3060\u3053\u308c\u306f\u30b9\u30ab\u30e9\u30fc\u5024\u3067\u3001\u3042\u304f\u307e\u3067\u300c\u8ddd\u96e2\u300d\u3057\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u3001\u8fba\u306e\u9577\u3055\u3068\u306e\u6bd4\u7387\u3068\u5404\u9802\u70b9\u60c5\u5831\u304b\u3089\u5e73\u9762\u4e0a\u306e\u9802\u70b9\uff08\u3064\u307e\u308a\u5206\u65ad\u70b9\uff09\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\n\n1. \u8fba\u306e\u9577\u3055\u3092\u8a08\u7b97\u3059\u308b\n2. \u300c\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2 / \u8fba\u306e\u9577\u3055\u300d\uff1d \u6bd4\u7387\n3. \u8fba\u306e\u4e21\u7aef\u306e\u70b9\u306e\u9593\u3092(2)\u306e\u6bd4\u7387\u3067\u88dc\u5b8c\u3059\u308b\n\n\u3053\u306e3\u5de5\u7a0b\u3092\u884c\u3046\u3053\u3068\u3067\u9802\u70b9\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3092\u3001\u5206\u65ad\u3055\u308c\u305f\u8fba\u306e\u5206\u3001\u3064\u307e\u308a2\u8fba\u5206\u884c\u3046\u3053\u3068\u3067\u5206\u65ad\u3055\u308c\u305f\u9802\u70b9\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u8a72\u5f53\u90e8\u5206\u3092\u629c\u7c8b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp\n// ---------------------------\n// \u5de6\u5074\u306e\u51e6\u7406\n\n// \u5b9a\u7fa9\u3057\u305f\u9762\u3068\u4ea4\u5dee\u3059\u308b\u70b9\u3092\u63a2\u3059\u3002\n// \u3064\u307e\u308a\u3001\u5e73\u9762\u306b\u3088\u3063\u3066\u5206\u5272\u3055\u308c\u308b\u70b9\u3092\u63a2\u3059\u3002\n// \u5de6\u306e\u70b9\u3092\u8d77\u70b9\u306b\u3001\u53f3\u306e\u70b9\u306b\u5411\u3051\u305f\u30ec\u30a4\u3092\u98db\u3070\u3057\u3001\u305d\u306e\u5206\u5272\u70b9\u3092\u63a2\u308b\u3002\nblade.Raycast(new Ray(leftPoints[0], (rightPoints[0] - leftPoints[0]).normalized), out distance);\n\n// \u898b\u3064\u304b\u3063\u305f\u4ea4\u5dee\u70b9\u3092\u3001\u9802\u70b9\u9593\u306e\u8ddd\u96e2\u3067\u5272\u308b\u3053\u3068\u3067\u3001\u5206\u5272\u70b9\u306e\u5de6\u53f3\u306e\u5272\u5408\u3092\u7b97\u51fa\u3059\u308b\nnormalizedDistance = distance / (rightPoints[0] - leftPoints[0]).magnitude;\n\n// \u30ab\u30c3\u30c8\u5f8c\u306e\u65b0\u9802\u70b9\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067\u306e\u88dc\u5b8c\u3068\u540c\u3058\u304f\u3001\u5206\u5272\u3057\u305f\u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u9069\u5207\u306b\u88dc\u5b8c\u3057\u305f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\nVector3 newVertex1 = Vector3.Lerp(leftPoints[0], rightPoints[0], normalizedDistance);\nVector2 newUv1     = Vector2.Lerp(leftUvs[0], rightUvs[0], normalizedDistance);\nVector3 newNormal1 = Vector3.Lerp(leftNormals[0] , rightNormals[0], normalizedDistance);\n\n// \u65b0\u9802\u70b9\u90e1\u306b\u65b0\u3057\u3044\u9802\u70b9\u3092\u8ffd\u52a0\nnew_vertices.Add(newVertex1);\n```\n\n*\u2191\u306e\u65e5\u672c\u8a9e\u306f\u89e3\u8aac\u7528\u306b\u81ea\u5206\u304c\u4ed8\u3051\u52a0\u3048\u305f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002*\n\n\n### \u5207\u65ad\u9762\u3092\u69cb\u7bc9\u3059\u308b\n\n\u4e0a\u8a18\u307e\u3067\u3067\u5168\u9802\u70b9\u306e\u632f\u308a\u5206\u3051\u3001\u304a\u3088\u3073\u65b0\u9802\u70b9\u306e\u7b97\u51fa\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306f\u3001\u65b0\u3057\u304f\u751f\u6210\u3055\u308c\u305f\u9802\u70b9\u3092\u5229\u7528\u3057\u3066\u3001\u5207\u65ad\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3057\u307e\u3059\u3002\n\n#### \u65b0\u9802\u70b9\u306e\u30da\u30a2\u3092\u9078\u629e\u3057\u3001\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n\n\u5207\u65ad\u9762\u306e\u5f62\u6210\u306b\u306f\u3001\u4e0a\u8a18\u3067\u7b97\u51fa\u3057\u305f\u65b0\u9802\u70b9\u3092\u4f7f\u3063\u3066\u884c\u3044\u307e\u3059\u3002\n\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u306f\u4ee5\u4e0b\u306e\u30d5\u30ed\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n1. \u751f\u6210\u3055\u308c\u305f\u9802\u70b9\u90e1\u304b\u3089\u30da\u30a2\u3068\u306a\u308b\u9802\u70b9\u3092\u63a2\u3057\u3001\u305d\u308c\u3092\u9806\u756a\u306b\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\uff08\u203b1\uff09\n2. \u65b0\u9802\u70b9\u306e\u30da\u30a2\u306e\u63a2\u7d22\u304c\u7d42\u308f\u3063\u305f\u6bb5\u968e\u3067\u30da\u30a2\u3054\u3068\u306e\u9806\u756a\u306b\u914d\u5217\u304c\u5f62\u6210\u3055\u308c\u3066\u3044\u308b\n3. (1)\u306e\u914d\u5217\u306e\u91cd\u5fc3\u3092\u8a08\u7b97\u3059\u308b\uff08\u5358\u7d14\u306b\u5168\u9802\u70b9\u8db3\u3057\u3066\u3001\u9802\u70b9\u6570\u3067\u5272\u308b\uff09\n4. (3)\u3067\u7b97\u51fa\u3057\u305f\u91cd\u5fc3\u3068\u3001\u914d\u5217\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n5. (4)\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u3001\u5de6\u53f3\u306e\u30e1\u30c3\u30b7\u30e5\u305d\u308c\u305e\u308c\u306b\u8ffd\u52a0\u3059\u308b\n6. \u305d\u306e\u969b\u3001\u5de6\u53f3\u3067\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda\u3092\u9006\u5411\u304d\u306b\u3059\u308b\uff08\u203b2\uff09\n\n\u203b1 ... \u5207\u65ad\u5bfe\u8c61\u3068\u306a\u3063\u305f\u30dd\u30ea\u30b4\u30f3\u304b\u3089\u5fc5\u305a2\u9802\u70b9\u304c\u751f\u6210\u3055\u308c\u308b\n\u203b2 ... \u5207\u65ad\u9762\u306f\u5de6\u53f3\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u305d\u308c\u305e\u308c\u306b\u5fc5\u8981\u3067\u3001\u5358\u7d14\u306b\u5411\u304d\u304c\u9006\u306e\u305f\u3081\n\n\u8a72\u5f53\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3068\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp\n/// <summary>\n/// \u30ab\u30c3\u30c8\u3092\u5b9f\u884c\n/// </summary>\nstatic void Capping()\n{\n    // \u30ab\u30c3\u30c8\u7528\u9802\u70b9\u8ffd\u8de1\u30ea\u30b9\u30c8\n    // \u5177\u4f53\u7684\u306b\u306f\u65b0\u9802\u70b9\u5168\u90e8\u306b\u5bfe\u3059\u308b\u8abf\u67fb\u3092\u884c\u3046\u3002\u305d\u306e\u904e\u7a0b\u3067\u8abf\u67fb\u6e08\u307f\u3092\u30de\u30fc\u30af\u3059\u308b\u76ee\u7684\u3067\u5229\u7528\u3059\u308b\u3002\n    capVertTracker.Clear();\n\n    // \u65b0\u3057\u304f\u751f\u6210\u3057\u305f\u9802\u70b9\u5206\u3060\u3051\u30eb\u30fc\u30d7\u3059\u308b\uff1d\u5168\u65b0\u9802\u70b9\u306b\u5bfe\u3057\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u8abf\u67fb\u3092\u884c\u3046\n    // \u5177\u4f53\u7684\u306b\u306f\u3001\u30ab\u30c3\u30c8\u9762\u3092\u69cb\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u3001\u30ab\u30c3\u30c8\u6642\u306b\u91cd\u8907\u3057\u305f\u9802\u70b9\u3092\u7db2\u7f85\u3057\u3066\u300c\u9762\u300d\u3092\u5f62\u6210\u3059\u308b\u9802\u70b9\u3092\u8abf\u67fb\u3059\u308b\n    for (int i = 0; i < new_vertices.Count; i++)\n    {\n        // \u5bfe\u8c61\u9802\u70b9\u304c\u3059\u3067\u306b\u8abf\u67fb\u6e08\u307f\u306e\u30de\u30fc\u30af\u3055\u308c\u3066\uff08\u8ffd\u8de1\u914d\u5217\u306b\u542b\u307e\u308c\u3066\uff09\u3044\u305f\u3089\u30b9\u30ad\u30c3\u30d7\n        if (capVertTracker.Contains(new_vertices[i]))\n        {\n            continue;\n        }\n\n        // \u30ab\u30c3\u30c8\u7528\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u3092\u30af\u30ea\u30a2\n        capVertpolygon.Clear();\n\n        // \u8abf\u67fb\u9802\u70b9\u3068\u6b21\u306e\u9802\u70b9\u3092\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u306b\u4fdd\u6301\u3059\u308b\n        capVertpolygon.Add(new_vertices[i + 0]);\n        capVertpolygon.Add(new_vertices[i + 1]);\n\n        // \u8ffd\u8de1\u914d\u5217\u306b\u81ea\u8eab\u3068\u6b21\u306e\u9802\u70b9\u3092\u8ffd\u52a0\u3059\u308b\uff08\u8abf\u67fb\u6e08\u307f\u306e\u30de\u30fc\u30af\u3092\u3064\u3051\u308b\uff09\n        capVertTracker.Add(new_vertices[i + 0]);\n        capVertTracker.Add(new_vertices[i + 1]);\n\n        // \u91cd\u8907\u9802\u70b9\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3057\u8abf\u67fb\u3059\u308b\n        bool isDone = false;\n        while (!isDone)\n        {\n            isDone = true;\n\n            // \u65b0\u9802\u70b9\u90e1\u3092\u30eb\u30fc\u30d7\u3057\u3001\u300c\u9762\u300d\u3092\u69cb\u6210\u3059\u308b\u8981\u56e0\u3068\u306a\u308b\u9802\u70b9\u3092\u3059\u3079\u3066\u62bd\u51fa\u3059\u308b\u3002\u62bd\u51fa\u304c\u7d42\u308f\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3092\u7e70\u308a\u8fd4\u3059\n            // 2\u9802\u70b9\u3054\u3068\u306b\u8abf\u67fb\u3092\u884c\u3046\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306f2\u5358\u4f4d\u3067\u3059\u3059\u3081\u308b\n            for (int k = 0; k < new_vertices.Count; k += 2)\n            { // go through the pairs\n                // \u30da\u30a2\u3068\u306a\u308b\u9802\u70b9\u3092\u63a2\u3059\n                // \u3053\u3053\u3067\u306e\u30da\u30a2\u3068\u306f\u3001\u3044\u3061\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u304b\u3089\u751f\u6210\u3055\u308c\u308b\u65b0\u9802\u70b9\u306e\u30da\u30a2\u3002\n                // \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u304b\u3089\u306f\u5fc5\u305a2\u9802\u70b9\u304c\u751f\u6210\u3055\u308c\u308b\u305f\u3081\u3001\u305d\u308c\u3092\u63a2\u3059\u3002\n                // \u307e\u305f\u3001\u5168\u30dd\u30ea\u30b4\u30f3\u306b\u5bfe\u3057\u3066\u5206\u5272\u70b9\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u307b\u307c\u5fc5\u305a\u3001\u307e\u3063\u305f\u304f\u540c\u3058\u4f4d\u7f6e\u306b\u5b58\u5728\u3059\u308b\u3001\u5225\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u306e\u5206\u5272\u9802\u70b9\u304c\u5b58\u5728\u3059\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n                if (new_vertices[k] == capVertpolygon[capVertpolygon.Count - 1] && !capVertTracker.Contains(new_vertices[k + 1]))\n                {   // if so add the other\n                    // \u30da\u30a2\u306e\u9802\u70b9\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u305d\u308c\u3092\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u306b\u8ffd\u52a0\u3057\u3001\n                    // \u8abf\u67fb\u6e08\u30de\u30fc\u30af\u3092\u3064\u3051\u3066\u3001\u6b21\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u306b\u56de\u3059\n                    isDone = false;\n                    capVertpolygon.Add(new_vertices[k + 1]);\n                    capVertTracker.Add(new_vertices[k + 1]);\n                }\n                else if (new_vertices[k + 1] == capVertpolygon[capVertpolygon.Count - 1] && !capVertTracker.Contains(new_vertices[k]))\n                {   // if so add the other\n                    isDone = false;\n                    capVertpolygon.Add(new_vertices[k]);\n                    capVertTracker.Add(new_vertices[k]);\n                }\n            }\n        }\n\n        // \u898b\u3064\u304b\u3063\u305f\u9802\u70b9\u90e1\u3092\u5143\u306b\u3001\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n        FillCap(capVertpolygon);\n    }\n}\n```\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u7406\u89e3\u3059\u308b\u4e0a\u3067\u5730\u5473\u306b\u30dd\u30a4\u30f3\u30c8\u3060\u3063\u305f\u306e\u306f\u3001\u91cd\u8907\u3059\u308b\u9802\u70b9\u304c\u5b58\u5728\u3059\u308b\u3001\u3068\u3044\u3046\u70b9\u3002\n\u7c21\u5358\u306e\u305f\u3081\u306b\u307e\u305a\u677f\u30dd\u30ea\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u3059\u308b\u3068\u3001\u677f\u30dd\u30ea\u306f2\u679a\u306e\u30dd\u30ea\u30b4\u30f3\u3067\u5f62\u6210\u3055\u308c\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u5207\u65ad\u3059\u308b\u3068\u65b0\u9802\u70b9\u306f**4\u3064**\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u4e09\u89d2\u5f62\uff08\u30dd\u30ea\u30b4\u30f3\uff091\u679a\u306b\u5bfe\u3057\u30662\u9802\u70b9\u751f\u6210\u3055\u308c\u308b\u304b\u3089\u3067\u3059\u306d\u3002\n\u305d\u3057\u3066\u91cd\u8907\u3059\u308b\u70b9\u306f1\u3064\u3067\u3059\u3002\n\n![\u5207\u65ad\u9802\u70b9.png](https://qiita-image-store.s3.amazonaws.com/0/5616/52948358-488a-317b-73b0-c7c56f56796e.png)\n\n\u4e0a\u8a18\u753b\u50cf\u306e\u5de6\u53f3\u306e\u9802\u70b9\u306f\u305d\u308c\u305e\u308c\u306e\u8272\u306b\u5bfe\u5fdc\u3057\u305f\u30dd\u30ea\u30b4\u30f3\u304b\u3089\u751f\u6210\u3055\u308c\u305f\u9802\u70b9\u3067\u3059\u3002\n\u305d\u3057\u3066\u4e2d\u592e\u306e\u3082\u306e\u304c2\u3064\u306e\u8272\u306b\u5206\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u304c\u91cd\u8907\u3057\u305f\u9802\u70b9\u306b\u306a\u308a\u307e\u3059\u3002\n\u5de6\u53f3\u305d\u308c\u305e\u308c\u306e\u30dd\u30ea\u30b4\u30f3\u304b\u3089\u9802\u70b9\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u30674\u3064\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u4eca\u5ea6\u306f\u3053\u308c\u3092\u30ad\u30e5\u30fc\u30d6\u306b\u62e1\u5f35\u3057\u3066\u8003\u3048\u308b\u3068\u3001\u5148\u7a0b\u306f\u91cd\u8907\u3057\u306a\u304b\u3063\u305f\u4e21\u7aef\u306e\u70b9\u3082\u3001\u30ad\u30e5\u30fc\u30d6\u306e\u5074\u9762\u5074\u306e\u9802\u70b9\u3068\u91cd\u8907\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u7d50\u679c\u3068\u3057\u3066\u3059\u3079\u3066\u306e\u65b0\u9802\u70b9\u304c\u5fc5\u305a2\u3064\u305a\u3064\u91cd\u306a\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n![\u5207\u65ad\u30ad\u30e5\u30fc\u30d6.png](https://qiita-image-store.s3.amazonaws.com/0/5616/e73bdb11-60f4-ce5a-82c3-205d979ea1f1.png)\n\n\u306a\u306e\u3067\u5192\u982d\u306e\u52d5\u753b\u306e\u3088\u3046\u306b\u3001\u30ad\u30e5\u30fc\u30d6\u3092\u5207\u65ad\u3059\u308b\u3068\u65b0\u9802\u70b9\u306f16\u500b\u751f\u6210\u3055\u308c\u3001\u5b9f\u969b\u306b\u5207\u65ad\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u308b\u9802\u70b9\u306f8\u3064\u306b\u306a\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u3001\u4e0a\u56f3\u306e\u70b9\u3092\u6570\u3048\u308b\u30688\u500b\u3042\u308b\u306e\u304c\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u65b0\u9802\u70b9\u3068\u3057\u3066\u751f\u6210\u3055\u308c\u308b\u306e\u306f16\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\n\n#### \u65b0\u9802\u70b9\u3092\u7d50\u3073\u3001\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n\n\u3055\u3041\u3001\u3053\u308c\u3067\u5fc5\u8981\u306a\u60c5\u5831\u306f\u3059\u3079\u3066\u6574\u3044\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u8abf\u3079\u3089\u308c\u305f\u9802\u70b9\u3092\u4f7f\u3063\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u3001\u3064\u307e\u308a3\u9802\u70b9\u3092\u9078\u3073\u51fa\u3057\u3066\u305d\u308c\u3092\u7d50\u3093\u3067\u3044\u304f\u4f5c\u696d\u3067\u3059\u3002\n\n\u305f\u3060\u3001\u4e0a\u56f3\u3068\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3082\u3089\u3046\u3068\u5206\u304b\u308a\u307e\u3059\u304c\u3001\u65b0\u3057\u304f\u751f\u6210\u3055\u308c\u305f\u9802\u70b9\u306f16\u3001\u3046\u3061\u30dd\u30ea\u30b4\u30f3\u5f62\u6210\u306b\u5229\u7528\u3059\u308b\u306e\u306f8\u9802\u70b9\uff08\u203b\uff09\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u3069\u3046\u7d50\u3076\u304b\u3001\u3092\u8003\u3048\u306a\u3044\u3068\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u3001\u5168\u9802\u70b9\u306e\u5e73\u5747\u4f4d\u7f6e\u3092\u6c42\u3081\u3001\u305d\u308c\u3068\u3001\u65b0\u9802\u70b9\u3092\u9806\u756a\u306b\u7d50\u3093\u3067\u3001\u30d4\u30b6\u3092\u5207\u308a\u5206\u3051\u305f\u3088\u3046\u306a\u5f62\u3067\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u203b ... \u6700\u521d\u3001\u9802\u70b9\u691c\u7d22\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5206\u304b\u308a\u3065\u3089\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4e0a\u306e\u3088\u3046\u306b8\u9802\u70b9\u3092\u898b\u3064\u3051\u51fa\u3059\u51e6\u7406\u3067\u3057\u305f\u3002\u304c\u3001\u5b9f\u306f\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5834\u5408\u3001\u91cd\u8907\u3057\u305f\u3001\u540c\u3058\u4f4d\u7f6e\u306b\u3042\u308b\u70b9\u306b\u3064\u3044\u3066\u3082\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3057\u3066\u3044\u3066\u3001\u82e5\u5e72\u5197\u9577\u306a\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\uff08\u3064\u307e\u308a\u3001\u540c\u3058\u4f4d\u7f6e\u306b\u91cd\u306a\u308b\u3088\u3046\u306b2\u679a\u306e\u30ab\u30c3\u30c8\u5e73\u9762\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u306b\u306a\u308b\uff09\n\u305f\u3060\u3001\u8ca0\u8377\u7684\u306b\u3068\u3066\u3082\u5897\u3048\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3082\u306a\u3044\u306e\u3067\u3053\u306e\u307e\u307e\u306b\u3057\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\uff08Simple Cut\u3063\u3066\u8a00\u3063\u3066\u308b\u3057\uff09\n\n![\u4e2d\u5fc3\u70b9.png](https://qiita-image-store.s3.amazonaws.com/0/5616/25f11c45-f518-18d6-f9a6-63281f1a87d3.png)\n\n\n\u4e0a\u8a18\u306f\u30ad\u30e5\u30fc\u30d6\u306e\u65ad\u9762\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u9752\u30448\u9802\u70b9\u304c\u65b0\u9802\u70b9\u3068\u3057\u3066\u751f\u6210\u3055\u308c\u305f\u3082\u306e\u3001\u3068\u3057\u3066\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u308c\u306e\u5e73\u5747\u4f4d\u7f6e\u3092\u53d6\u308b\u3068\u4e2d\u5fc3\u3042\u305f\u308a\u306b\u306a\u308a\u3001\u30aa\u30ec\u30f3\u30b8\u306e\u70b9\uff08$c$\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3042\u3068\u306f\u3053\u308c\u3092\u3001\u9806\u756a\u306b\u7d50\u3093\u3067\u3044\u3051\u3070\u5207\u65ad\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u304c\u5f62\u6210\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\u9806\u756a\u3068\u306f\u3001\u300c$1, 2, c$\u300d,\u300c$2, 3, c$\u300d,\u300c$3, 4, c$\u300d... \u3068\u3044\u3046\u5177\u5408\u3067\u3059\u3002\n\n\u6700\u5f8c\u306b\u3053\u306e\u3001\u5207\u65ad\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n```csharp\n/// <summary>\n/// \u30ab\u30c3\u30c8\u9762\u3092\u57cb\u3081\u308b\n/// </summary>\n/// <param name=\"vertices\">\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u9802\u70b9\u30ea\u30b9\u30c8</param>\nstatic void FillCap(List<Vector3> vertices)\n{\n    // center of the cap\n    // \u30ab\u30c3\u30c8\u5e73\u9762\u306e\u4e2d\u5fc3\u70b9\u3092\u8a08\u7b97\u3059\u308b\n    Vector3 center = Vector3.zero;\n\n    // \u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u9802\u70b9\u4f4d\u7f6e\u3092\u3059\u3079\u3066\u5408\u8a08\u3059\u308b\n    foreach(Vector3 point in vertices)\n    {\n        center += point;\n    }\n\n    // \u305d\u308c\u3092\u9802\u70b9\u6570\u306e\u5408\u8a08\u3067\u5272\u308a\u3001\u4e2d\u5fc3\u3068\u3059\u308b\n    center = center / vertices.Count;\n\n    // you need an axis based on the cap\n    // \u30ab\u30c3\u30c8\u5e73\u9762\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305fupward\n    Vector3 upward = Vector3.zero;\n\n    // 90 degree turn\n    // \u30ab\u30c3\u30c8\u5e73\u9762\u306e\u6cd5\u7dda\u3092\u5229\u7528\u3057\u3066\u3001\u300c\u4e0a\u300d\u65b9\u5411\u3092\u6c42\u3081\u308b\n    // \u5177\u4f53\u7684\u306b\u306f\u3001\u5e73\u9762\u306e\u5de6\u5074\u3092\u4e0a\u3068\u3057\u3066\u5229\u7528\u3059\u308b\n    upward.x =  blade.normal.y;\n    upward.y = -blade.normal.x;\n    upward.z =  blade.normal.z;\n\n    // \u6cd5\u7dda\u3068\u300c\u4e0a\u65b9\u5411\u300d\u304b\u3089\u3001\u6a2a\u8ef8\u3092\u7b97\u51fa\n    Vector3 left = Vector3.Cross(blade.normal, upward);\n\n    Vector3 displacement = Vector3.zero;\n    Vector3 newUV1 = Vector3.zero;\n    Vector3 newUV2 = Vector3.zero;\n\n    // \u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f\u9802\u70b9\u5206\u30eb\u30fc\u30d7\u3092\u56de\u3059\n    for (int i = 0; i < vertices.Count; i++)\n    {\n        // \u8a08\u7b97\u3067\u6c42\u3081\u305f\u4e2d\u5fc3\u70b9\u304b\u3089\u3001\u5404\u9802\u70b9\u3078\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb\n        displacement = vertices[i] - center;\n\n        // \u65b0\u898f\u751f\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u306eUV\u5ea7\u6a19\u3092\u6c42\u3081\u308b\u3002\n        // displacement\u304c\u4e2d\u5fc3\u304b\u3089\u306e\u30d9\u30af\u30c8\u30eb\u306e\u305f\u3081\u3001UV\u7684\u306a\u4e2d\u5fc3\u3067\u3042\u308b0.5\u3092\u30d9\u30fc\u30b9\u306b\u3001\u5185\u7a4d\u3092\u4f7f\u3063\u3066UV\u306e\u6700\u7d42\u7684\u306a\u4f4d\u7f6e\u3092\u5f97\u308b\n        newUV1 = Vector3.zero;\n        newUV1.x = 0.5f + Vector3.Dot(displacement, left);\n        newUV1.y = 0.5f + Vector3.Dot(displacement, upward);\n        newUV1.z = 0.5f + Vector3.Dot(displacement, blade.normal);\n\n        // \u6b21\u306e\u9802\u70b9\u3002\u305f\u3060\u3057\u3001\u6700\u5f8c\u306e\u9802\u70b9\u306e\u6b21\u306f\u6700\u521d\u306e\u9802\u70b9\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u3001\u82e5\u5e72\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u6307\u5b9a\u65b9\u6cd5\u3092\u3057\u3066\u3044\u308b\uff08% vertices.Count\uff09\n        displacement = vertices[(i + 1) % vertices.Count] - center;\n\n        newUV2 = Vector3.zero;\n        newUV2.x = 0.5f + Vector3.Dot(displacement, left);\n        newUV2.y = 0.5f + Vector3.Dot(displacement, upward);\n        newUV2.z = 0.5f + Vector3.Dot(displacement, blade.normal);\n\n        // uvs.Add(new Vector2(relativePosition.x, relativePosition.y));\n        // normals.Add(blade.normal);\n\n        // \u5de6\u5074\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u3057\u3066\u3001\u6c42\u3081\u305fUV\u3092\u5229\u7528\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n        left_side.AddTriangle(\n            new Vector3[]{\n                vertices[i],\n                vertices[(i + 1) % vertices.Count],\n                center\n            },\n            new Vector3[]{\n                -blade.normal,\n                -blade.normal,\n                -blade.normal\n            },\n            new Vector2[]{\n                newUV1,\n                newUV2,\n                new Vector2(0.5f, 0.5f)\n            },\n            -blade.normal,\n            left_side.subIndices.Count - 1 // \u30ab\u30c3\u30c8\u9762\u3002\u6700\u5f8c\u306e\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n        );\n\n        // \u53f3\u5074\u306e\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3002\u57fa\u672c\u306f\u5de6\u5074\u3068\u540c\u3058\u3060\u304c\u3001\u6cd5\u7dda\u3060\u3051\u9006\u5411\u304d\u3002\n        right_side.AddTriangle(\n            new Vector3[]{\n                vertices[i],\n                vertices[(i + 1) % vertices.Count],\n                center\n            },\n            new Vector3[]{\n                blade.normal,\n                blade.normal,\n                blade.normal\n            },\n            new Vector2[]{\n                newUV1,\n                newUV2,\n                new Vector2(0.5f, 0.5f)\n            },\n            blade.normal,\n            right_side.subIndices.Count - 1 // \u30ab\u30c3\u30c8\u9762\u3002\u6700\u5f8c\u306e\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n        );\n    }\n}\n```\n\n\u4ee5\u4e0a\u304c\u3001\u30e1\u30c3\u30b7\u30e5\u306e\u5207\u65ad\u3092\u884c\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u3068\u306a\u308a\u307e\u3059\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3001\u4e0a\u3067\u89e3\u8aac\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5168\u6587\u3067\u3059\u3002\n\u81ea\u5206\u306e\u7406\u89e3\u306e\u305f\u3081\u306b\u5404\u51e6\u7406\u306b\u3064\u3044\u3066\u65e5\u672c\u8a9e\u3067\u30b3\u30e1\u30f3\u30c8\u3092\u5165\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5206\u304b\u308a\u3065\u3089\u3044\u70b9\u306a\u3069\u306f\u305d\u3061\u3089\u3082\u5408\u308f\u305b\u3066\u898b\u3066\u3082\u3089\u3046\u3068\u7406\u89e3\u304c\u4fc3\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```csharp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\n\nnamespace BLINDED_AM_ME\n{\n    public class MeshCut\n    {\n        public class MeshCutSide\n        {\n            public List<Vector3>  vertices  = new List<Vector3>();\n            public List<Vector3>  normals   = new List<Vector3>();\n            public List<Vector2>  uvs       = new List<Vector2>();\n            public List<int>      triangles = new List<int>();\n            public List<List<int>> subIndices = new List<List<int>>();\n\n            public void ClearAll()\n            {\n                vertices.Clear();\n                normals.Clear();\n                uvs.Clear();\n                triangles.Clear();\n                subIndices.Clear();\n            }\n\n            /// <summary>\n            /// \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3068\u3057\u30663\u9802\u70b9\u3092\u8ffd\u52a0\n            /// \u203b \u9802\u70b9\u60c5\u5831\u306f\u5143\u306e\u30e1\u30c3\u30b7\u30e5\u304b\u3089\u30b3\u30d4\u30fc\u3059\u308b\n            /// </summary>\n            /// <param name=\"p1\">\u9802\u70b91</param>\n            /// <param name=\"p2\">\u9802\u70b92</param>\n            /// <param name=\"p3\">\u9802\u70b93</param>\n            /// <param name=\"submesh\">\u5bfe\u8c61\u306e\u30b5\u30d6\u30e1\u30b7\u30e5</param>\n            public void AddTriangle(int p1, int p2, int p3, int submesh)\n            {\n                // triangle index order goes 1,2,3,4....\n\n                // \u9802\u70b9\u914d\u5217\u306e\u30ab\u30a6\u30f3\u30c8\u3002\u968f\u6642\u8ffd\u52a0\u3055\u308c\u3066\u3044\u304f\u305f\u3081\u3001\u30d9\u30fc\u30b9\u3068\u306a\u308bindex\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n                // \u203b AddTriangle\u304c\u547c\u3070\u308c\u308b\u305f\u3073\u306b\u9802\u70b9\u6570\u306f\u5897\u3048\u3066\u3044\u304f\u3002\n                int base_index = vertices.Count;\n\n                // \u5bfe\u8c61\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\n                subIndices[submesh].Add(base_index + 0);\n                subIndices[submesh].Add(base_index + 1);\n                subIndices[submesh].Add(base_index + 2);\n\n                // \u4e09\u89d2\u5f62\u90e1\u306e\u9802\u70b9\u3092\u8a2d\u5b9a\n                triangles.Add(base_index + 0);\n                triangles.Add(base_index + 1);\n                triangles.Add(base_index + 2);\n\n                // \u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u9802\u70b9\u914d\u5217\u304b\u3089\u9802\u70b9\u60c5\u5831\u3092\u53d6\u5f97\u3057\u8a2d\u5b9a\u3059\u308b\n                // \uff08victim_mesh\u306fstatic\u30e1\u30f3\u30d0\u306a\u3093\u3060\u3051\u3069\u3044\u3044\u3093\u3060\u308d\u3046\u304b\u30fb\u30fb\uff09\n                vertices.Add(victim_mesh.vertices[p1]);\n                vertices.Add(victim_mesh.vertices[p2]);\n                vertices.Add(victim_mesh.vertices[p3]);\n\n                // \u540c\u69d8\u306b\u3001\u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6cd5\u7dda\u914d\u5217\u304b\u3089\u6cd5\u7dda\u3092\u53d6\u5f97\u3057\u8a2d\u5b9a\u3059\u308b\n                normals.Add(victim_mesh.normals[p1]);\n                normals.Add(victim_mesh.normals[p2]);\n                normals.Add(victim_mesh.normals[p3]);\n\n                // \u540c\u69d8\u306b\u3001UV\u3082\u3002\n                uvs.Add(victim_mesh.uv[p1]);\n                uvs.Add(victim_mesh.uv[p2]);\n                uvs.Add(victim_mesh.uv[p3]);\n            }\n\n            /// <summary>\n            /// \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\u3059\u308b\n            /// \u203b \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u3066\u3044\u308b\u4ed6\u30e1\u30bd\u30c3\u30c9\u3068\u306f\u7570\u306a\u308a\u3001\u5f15\u6570\u306e\u5024\u3067\u9802\u70b9\uff08\u30dd\u30ea\u30b4\u30f3\uff09\u3092\u8ffd\u52a0\u3059\u308b\n            /// </summary>\n            /// <param name=\"points3\">\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u5f62\u6210\u3059\u308b3\u9802\u70b9</param>\n            /// <param name=\"normals3\">3\u9802\u70b9\u306e\u6cd5\u7dda</param>\n            /// <param name=\"uvs3\">3\u9802\u70b9\u306eUV</param>\n            /// <param name=\"faceNormal\">\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda</param>\n            /// <param name=\"submesh\">\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5ID</param>\n            public void AddTriangle(Vector3[] points3, Vector3[] normals3, Vector2[] uvs3, Vector3 faceNormal, int submesh)\n            {\n                // \u5f15\u6570\u306e3\u9802\u70b9\u304b\u3089\u6cd5\u7dda\u3092\u8a08\u7b97\n                Vector3 calculated_normal = Vector3.Cross((points3[1] - points3[0]).normalized, (points3[2] - points3[0]).normalized);\n\n                int p1 = 0;\n                int p2 = 1;\n                int p3 = 2;\n\n                // \u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u6cd5\u7dda\u3068\u9006\u3060\u3063\u305f\u5834\u5408\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u9806\u756a\u3092\u9006\u9806\u306b\u3059\u308b\uff08\u3064\u307e\u308a\u9762\u3092\u88cf\u8fd4\u3059\uff09\n                if (Vector3.Dot(calculated_normal, faceNormal) < 0)\n                {\n                    p1 = 2;\n                    p2 = 1;\n                    p3 = 0;\n                }\n\n                int base_index = vertices.Count;\n\n                subIndices[submesh].Add(base_index + 0);\n                subIndices[submesh].Add(base_index + 1);\n                subIndices[submesh].Add(base_index + 2);\n\n                triangles.Add(base_index + 0);\n                triangles.Add(base_index + 1);\n                triangles.Add(base_index + 2);\n\n                vertices.Add(points3[p1]);\n                vertices.Add(points3[p2]);\n                vertices.Add(points3[p3]);\n\n                normals.Add(normals3[p1]);\n                normals.Add(normals3[p2]);\n                normals.Add(normals3[p3]);\n\n                uvs.Add(uvs3[p1]);\n                uvs.Add(uvs3[p2]);\n                uvs.Add(uvs3[p3]);\n            }\n\n        }\n\n        private static MeshCutSide left_side = new MeshCutSide();\n        private static MeshCutSide right_side = new MeshCutSide();\n\n        private static Plane blade;\n        private static Mesh victim_mesh;\n\n        // capping stuff\n        private static List<Vector3> new_vertices = new List<Vector3>();\n\n        /// <summary>\n        /// Cut the specified victim, blade_plane and capMaterial.\n        /// \uff08\u6307\u5b9a\u3055\u308c\u305f\u300cvictim\u300d\u3092\u30ab\u30c3\u30c8\u3059\u308b\u3002\u30d6\u30ec\u30fc\u30c9\uff08\u5e73\u9762\uff09\u3068\u30de\u30c6\u30ea\u30a2\u30eb\u304b\u3089\u5207\u65ad\u3092\u5b9f\u884c\u3059\u308b\uff09\n        /// </summary>\n        /// <param name=\"victim\">Victim.</param>\n        /// <param name=\"blade_plane\">Blade plane.</param>\n        /// <param name=\"capMaterial\">Cap material.</param>\n        public static GameObject[] Cut(GameObject victim, Vector3 anchorPoint, Vector3 normalDirection, Material capMaterial)\n        {\n            // set the blade relative to victim\n            // victim\u304b\u3089\u76f8\u5bfe\u7684\u306a\u5e73\u9762\uff08\u30d6\u30ec\u30fc\u30c9\uff09\u3092\u30bb\u30c3\u30c8\n            // \u5177\u4f53\u7684\u306b\u306f\u3001\u5bfe\u8c61\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ed\u30fc\u30ab\u30eb\u5ea7\u6a19\u3067\u306e\u5e73\u9762\u306e\u6cd5\u7dda\u3068\u4f4d\u7f6e\u304b\u3089\u5e73\u9762\u3092\u751f\u6210\u3059\u308b\n            blade = new Plane(\n                victim.transform.InverseTransformDirection(-normalDirection),\n                victim.transform.InverseTransformPoint(anchorPoint)\n            );\n\n            // get the victims mesh\n            // \u5bfe\u8c61\u306e\u30e1\u30c3\u30b7\u30e5\u3092\u53d6\u5f97\n            victim_mesh = victim.GetComponent<MeshFilter>().mesh;\n\n            // reset values\n            // \u65b0\u3057\u3044\u9802\u70b9\u90e1\n            new_vertices.Clear();\n\n            // \u5e73\u9762\u3088\u308a\u5de6\u306e\u9802\u70b9\u90e1\uff08MeshCutSide\uff09\n            left_side.ClearAll();\n\n            //\u5e73\u9762\u3088\u308a\u53f3\u306e\u9802\u70b9\u90e1\uff08MeshCutSide\uff09\n            right_side.ClearAll();\n\n            // \u3053\u3053\u3067\u306e\u300c3\u300d\u306f\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\uff1f\n            bool[] sides = new bool[3];\n            int[] indices;\n            int p1,p2,p3;\n\n            // go throught the submeshes\n            // \u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\n            for (int sub = 0; sub < victim_mesh.subMeshCount; sub++)\n            {\n                // \u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6570\u3092\u53d6\u5f97\n                indices = victim_mesh.GetIndices(sub);\n\n                // List<List<int>>\u578b\u306e\u30ea\u30b9\u30c8\u3002\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u4e00\u3064\u5206\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30ea\u30b9\u30c8\n                left_side.subIndices.Add(new List<int>());  // \u5de6\n                right_side.subIndices.Add(new List<int>()); // \u53f3\n\n                // \u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6570\u5206\u30eb\u30fc\u30d7\n                for (int i = 0; i < indices.Length; i += 3)\n                {\n                    // p1 - p3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3002\u3064\u307e\u308a\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\n                    p1 = indices[i + 0];\n                    p2 = indices[i + 1];\n                    p3 = indices[i + 2];\n\n                    // \u305d\u308c\u305e\u308c\u8a55\u4fa1\u4e2d\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u9802\u70b9\u304c\u3001\u5192\u982d\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u5e73\u9762\u306e\u5de6\u53f3\u3069\u3061\u3089\u306b\u3042\u308b\u304b\u3092\u8a55\u4fa1\u3002\n                    // `GetSide` \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308abool\u3092\u5f97\u308b\u3002\n                    sides[0] = blade.GetSide(victim_mesh.vertices[p1]);\n                    sides[1] = blade.GetSide(victim_mesh.vertices[p2]);\n                    sides[2] = blade.GetSide(victim_mesh.vertices[p3]);\n\n                    // whole triangle\n                    // \u9802\u70b9\uff10\u3068\u9802\u70b9\uff11\u304a\u3088\u3073\u9802\u70b9\uff12\u304c\u3069\u3061\u3089\u3082\u540c\u3058\u5074\u306b\u3042\u308b\u5834\u5408\u306f\u30ab\u30c3\u30c8\u3057\u306a\u3044\n                    if (sides[0] == sides[1] && sides[0] == sides[2])\n                    {\n                        if (sides[0])\n                        { // left side\n                          // GetSide\u30e1\u30bd\u30c3\u30c9\u3067\u30dd\u30b8\u30c6\u30a3\u30d6\uff08true\uff09\u306e\u5834\u5408\u306f\u5de6\u5074\u306b\u3042\u308a\n                            left_side.AddTriangle(p1, p2, p3, sub);\n                        }\n                        else\n                        {\n                            right_side.AddTriangle(p1, p2, p3, sub);\n                        }\n                    }\n                    else\n                    { // cut the triangle\n                      // \u305d\u3046\u3067\u306f\u306a\u304f\u3001\u3069\u3061\u3089\u304b\u306e\u70b9\u304c\u5e73\u9762\u306e\u53cd\u5bfe\u5074\u306b\u3042\u308b\u5834\u5408\u306f\u30ab\u30c3\u30c8\u3092\u5b9f\u884c\u3059\u308b\n                        Cut_this_Face(sub, sides, p1, p2, p3);\n                    }\n                }\n            }\n\n            // \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30de\u30c6\u30ea\u30a2\u30eb\u914d\u5217\u3092\u53d6\u5f97\n            Material[] mats = victim.GetComponent<MeshRenderer>().sharedMaterials;\n\n            // \u53d6\u5f97\u3057\u305f\u30de\u30c6\u30ea\u30a2\u30eb\u914d\u5217\u306e\u6700\u5f8c\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u304c\u3001\u30ab\u30c3\u30c8\u9762\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u3067\u306a\u3044\u5834\u5408\n            if (mats[mats.Length - 1].name != capMaterial.name)\n            { // add cap indices\n                // \u30ab\u30c3\u30c8\u9762\u7528\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u8ffd\u52a0\uff1f\n                left_side.subIndices.Add(new List<int>());\n                right_side.subIndices.Add(new List<int>());\n\n                // \u30ab\u30c3\u30c8\u9762\u5206\u5897\u3084\u3057\u305f\u30de\u30c6\u30ea\u30a2\u30eb\u914d\u5217\u3092\u6e96\u5099\n                Material[] newMats = new Material[mats.Length + 1];\n\n                // \u65e2\u5b58\u306e\u3082\u306e\u3092\u65b0\u3057\u3044\u914d\u5217\u306b\u30b3\u30d4\u30fc\n                mats.CopyTo(newMats, 0);\n\n                // \u65b0\u3057\u3044\u30de\u30c6\u30ea\u30a2\u30eb\u914d\u5217\u306e\u6700\u5f8c\u306b\u3001\u30ab\u30c3\u30c8\u9762\u7528\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u8ffd\u52a0\n                newMats[mats.Length] = capMaterial;\n\n                // \u751f\u6210\u3057\u305f\u30de\u30c6\u30ea\u30a2\u30eb\u30ea\u30b9\u30c8\u3092\u518d\u8a2d\u5b9a\n                mats = newMats;\n            }\n\n            // cap the opennings\n            // \u30ab\u30c3\u30c8\u958b\u59cb\n            Capping();\n\n\n            // Left Mesh\n            // \u5de6\u5074\u306e\u30e1\u30c3\u30b7\u30e5\u3092\u751f\u6210\n            // MeshCutSide\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u304b\u3089\u5404\u5024\u3092\u30b3\u30d4\u30fc\n            Mesh left_HalfMesh = new Mesh();\n            left_HalfMesh.name = \"Split Mesh Left\";\n            left_HalfMesh.vertices  = left_side.vertices.ToArray();\n            left_HalfMesh.triangles = left_side.triangles.ToArray();\n            left_HalfMesh.normals   = left_side.normals.ToArray();\n            left_HalfMesh.uv        = left_side.uvs.ToArray();\n\n            left_HalfMesh.subMeshCount = left_side.subIndices.Count;\n            for (int i = 0; i < left_side.subIndices.Count; i++)\n            {\n                left_HalfMesh.SetIndices(left_side.subIndices[i].ToArray(), MeshTopology.Triangles, i);\t\n            }\n\n\n            // Right Mesh\n            // \u53f3\u5074\u306e\u30e1\u30c3\u30b7\u30e5\u3082\u540c\u69d8\u306b\u751f\u6210\n            Mesh right_HalfMesh = new Mesh();\n            right_HalfMesh.name = \"Split Mesh Right\";\n            right_HalfMesh.vertices  = right_side.vertices.ToArray();\n            right_HalfMesh.triangles = right_side.triangles.ToArray();\n            right_HalfMesh.normals   = right_side.normals.ToArray();\n            right_HalfMesh.uv        = right_side.uvs.ToArray();\n\n            right_HalfMesh.subMeshCount = right_side.subIndices.Count;\n            for (int i = 0; i < right_side.subIndices.Count; i++)\n            {\n                right_HalfMesh.SetIndices(right_side.subIndices[i].ToArray(), MeshTopology.Triangles, i);\n            }\n\n\n            // assign the game objects\n\n            // \u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5de6\u5074\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\n            victim.name = \"left side\";\n            victim.GetComponent<MeshFilter>().mesh = left_HalfMesh;\n\n\n            // \u53f3\u5074\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u65b0\u898f\u4f5c\u6210\n            GameObject leftSideObj = victim;\n\n            GameObject rightSideObj = new GameObject(\"right side\", typeof(MeshFilter), typeof(MeshRenderer));\n            rightSideObj.transform.position = victim.transform.position;\n            rightSideObj.transform.rotation = victim.transform.rotation;\n            rightSideObj.GetComponent<MeshFilter>().mesh = right_HalfMesh;\n        \n            // assign mats\n            // \u65b0\u898f\u751f\u6210\u3057\u305f\u30de\u30c6\u30ea\u30a2\u30eb\u30ea\u30b9\u30c8\u3092\u305d\u308c\u305e\u308c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u9069\u7528\u3059\u308b\n            leftSideObj.GetComponent<MeshRenderer>().materials = mats;\n            rightSideObj.GetComponent<MeshRenderer>().materials = mats;\n\n            // \u5de6\u53f3\u306eGameObject\u306e\u914d\u5217\u3092\u8fd4\u3059\n            return new GameObject[]{ leftSideObj, rightSideObj };\n        }\n            \n        /// <summary>\n        /// \u30ab\u30c3\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3002\u305f\u3060\u3057\u3001\u5b9f\u969b\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u64cd\u4f5c\u3067\u306f\u306a\u304f\u3001\u3042\u304f\u307e\u3067\u9802\u70b9\u306e\u632f\u308a\u5206\u3051\u3001\u4e8b\u524d\u6e96\u5099\u3068\u3057\u3066\u306e\u5b9f\u884c\n        /// </summary>\n        /// <param name=\"submesh\">\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9</param>\n        /// <param name=\"sides\">\u8a55\u4fa1\u3057\u305f3\u9802\u70b9\u306e\u5de6\u53f3\u60c5\u5831</param>\n        /// <param name=\"index1\">\u9802\u70b91</param>\n        /// <param name=\"index2\">\u9802\u70b92</param>\n        /// <param name=\"index3\">\u9802\u70b93</param>\n        static void Cut_this_Face(int submesh, bool[] sides, int index1, int index2, int index3)\n        {\n            // \u5de6\u53f3\u305d\u308c\u305e\u308c\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u914d\u5217\u90e1\n            Vector3[] leftPoints = new Vector3[2];\n            Vector3[] leftNormals = new Vector3[2];\n            Vector2[] leftUvs = new Vector2[2];\n            Vector3[] rightPoints = new Vector3[2];\n            Vector3[] rightNormals = new Vector3[2];\n            Vector2[] rightUvs = new Vector2[2];\n\n            bool didset_left = false;\n            bool didset_right = false;\n\n            // 3\u9802\u70b9\u5206\u7e70\u308a\u8fd4\u3059\n            // \u51e6\u7406\u5185\u5bb9\u3068\u3057\u3066\u306f\u3001\u5de6\u53f3\u3092\u5224\u5b9a\u3057\u3066\u3001\u5de6\u53f3\u306e\u914d\u5217\u306b3\u9802\u70b9\u3092\u632f\u308a\u5206\u3051\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\n            int p = index1;\n            for (int side = 0; side < 3; side++)\n            {\n                switch(side)\n                {\n                    case 0:\n                        p = index1;\n                        break;\n                    case 1:\n                        p = index2;\n                        break;\n                    case 2:\n                        p = index3;\n                        break;\n                }\n\n                // sides[side]\u304ctrue\u3001\u3064\u307e\u308a\u5de6\u5074\u306e\u5834\u5408\n                if (sides[side])\n                {\n                    // \u3059\u3067\u306b\u5de6\u5074\u306e\u9802\u70b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\uff083\u9802\u70b9\u304c\u5de6\u53f3\u306b\u632f\u308a\u5206\u3051\u3089\u308c\u308b\u305f\u3081\u3001\u5fc5\u305a\u5de6\u53f3\u3069\u3061\u3089\u304b\u306f2\u3064\u306e\u9802\u70b9\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308b\uff09\n                    if (!didset_left)\n                    {\n                        didset_left = true;\n\n                        // \u3053\u3053\u306f0,1\u3068\u3082\u306b\u540c\u3058\u5024\u306b\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u7d9a\u304f\u51e6\u7406\u3067\n                        // leftPoints[0,1]\u306e\u5024\u3092\u4f7f\u3063\u3066\u5206\u5272\u70b9\u3092\u6c42\u3081\u308b\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u305f\u3081\u3002\n                        // \u3064\u307e\u308a\u3001\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n\n                        // \u9802\u70b9\u306e\u8a2d\u5b9a\n                        leftPoints[0]  = victim_mesh.vertices[p];\n                        leftPoints[1]  = leftPoints[0];\n\n                        // UV\u306e\u8a2d\u5b9a\n                        leftUvs[0]     = victim_mesh.uv[p];\n                        leftUvs[1]     = leftUvs[0];\n\n                        // \u6cd5\u7dda\u306e\u8a2d\u5b9a\n                        leftNormals[0] = victim_mesh.normals[p];\n                        leftNormals[1] = leftNormals[0];\n                    }\n                    else\n                    {\n                        // 2\u9802\u70b9\u76ee\u306e\u5834\u5408\u306f2\u756a\u76ee\u306b\u76f4\u63a5\u9802\u70b9\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\n                        leftPoints[1]  = victim_mesh.vertices[p];\n                        leftUvs[1]     = victim_mesh.uv[p];\n                        leftNormals[1] = victim_mesh.normals[p];\n                    }\n                }\n                else\n                {\n                    // \u5de6\u3068\u540c\u69d8\u306e\u64cd\u4f5c\u3092\u53f3\u306b\u3082\u884c\u3046\n                    if (!didset_right)\n                    {\n                        didset_right = true;\n\n                        rightPoints[0]  = victim_mesh.vertices[p];\n                        rightPoints[1]  = rightPoints[0];\n                        rightUvs[0]     = victim_mesh.uv[p];\n                        rightUvs[1]     = rightUvs[0];\n                        rightNormals[0] = victim_mesh.normals[p];\n                        rightNormals[1] = rightNormals[0];\n                    }\n                    else\n                    {\n                        rightPoints[1]  = victim_mesh.vertices[p];\n                        rightUvs[1]     = victim_mesh.uv[p];\n                        rightNormals[1] = victim_mesh.normals[p];\n                    }\n                }\n            }\n\n            // \u5206\u5272\u3055\u308c\u305f\u70b9\u306e\u6bd4\u7387\u8a08\u7b97\u306e\u305f\u3081\u306e\u8ddd\u96e2\n            float normalizedDistance = 0f;\n            \n            // \u8ddd\u96e2\n            float distance = 0f;\n\n\n            // ---------------------------\n            // \u5de6\u5074\u306e\u51e6\u7406\n\n            // \u5b9a\u7fa9\u3057\u305f\u9762\u3068\u4ea4\u5dee\u3059\u308b\u70b9\u3092\u63a2\u3059\u3002\n            // \u3064\u307e\u308a\u3001\u5e73\u9762\u306b\u3088\u3063\u3066\u5206\u5272\u3055\u308c\u308b\u70b9\u3092\u63a2\u3059\u3002\n            // \u5de6\u306e\u70b9\u3092\u8d77\u70b9\u306b\u3001\u53f3\u306e\u70b9\u306b\u5411\u3051\u305f\u30ec\u30a4\u3092\u98db\u3070\u3057\u3001\u305d\u306e\u5206\u5272\u70b9\u3092\u63a2\u308b\u3002\n            blade.Raycast(new Ray(leftPoints[0], (rightPoints[0] - leftPoints[0]).normalized), out distance);\n\n            // \u898b\u3064\u304b\u3063\u305f\u4ea4\u5dee\u70b9\u3092\u3001\u9802\u70b9\u9593\u306e\u8ddd\u96e2\u3067\u5272\u308b\u3053\u3068\u3067\u3001\u5206\u5272\u70b9\u306e\u5de6\u53f3\u306e\u5272\u5408\u3092\u7b97\u51fa\u3059\u308b\n            normalizedDistance = distance / (rightPoints[0] - leftPoints[0]).magnitude;\n\n            // \u30ab\u30c3\u30c8\u5f8c\u306e\u65b0\u9802\u70b9\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067\u306e\u88dc\u5b8c\u3068\u540c\u3058\u304f\u3001\u5206\u5272\u3057\u305f\u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u9069\u5207\u306b\u88dc\u5b8c\u3057\u305f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\n            Vector3 newVertex1 = Vector3.Lerp(leftPoints[0], rightPoints[0], normalizedDistance);\n            Vector2 newUv1     = Vector2.Lerp(leftUvs[0], rightUvs[0], normalizedDistance);\n            Vector3 newNormal1 = Vector3.Lerp(leftNormals[0] , rightNormals[0], normalizedDistance);\n\n            // \u65b0\u9802\u70b9\u90e1\u306b\u65b0\u3057\u3044\u9802\u70b9\u3092\u8ffd\u52a0\n            new_vertices.Add(newVertex1);\n\n\n            // ---------------------------\n            // \u53f3\u5074\u306e\u51e6\u7406\n\n            blade.Raycast(new Ray(leftPoints[1], (rightPoints[1] - leftPoints[1]).normalized), out distance);\n\n            normalizedDistance = distance / (rightPoints[1] - leftPoints[1]).magnitude;\n            Vector3 newVertex2 = Vector3.Lerp(leftPoints[1], rightPoints[1], normalizedDistance);\n            Vector2 newUv2     = Vector2.Lerp(leftUvs[1], rightUvs[1], normalizedDistance);\n            Vector3 newNormal2 = Vector3.Lerp(leftNormals[1] , rightNormals[1], normalizedDistance);\n\n            // \u65b0\u9802\u70b9\u90e1\u306b\u65b0\u3057\u3044\u9802\u70b9\u3092\u8ffd\u52a0\n            new_vertices.Add(newVertex2);\n\n\n            // \u8a08\u7b97\u3055\u308c\u305f\u65b0\u3057\u3044\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001\u65b0\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u5de6\u53f3\u3068\u3082\u306b\u8ffd\u52a0\u3059\u308b\n            // memo: \u3069\u3046\u5206\u5272\u3055\u308c\u3066\u3082\u3001\u5de6\u53f3\u3069\u3061\u3089\u304b\u306f1\u3064\u306e\u4e09\u89d2\u5f62\u306b\u306a\u308b\u6c17\u304c\u3059\u308b\u3051\u3069\u3001\u7e2e\u9000\u4e09\u89d2\u5f62\u7684\u306a\u611f\u3058\u3067\u3068\u306b\u304b\u304f2\u3064\u305a\u3064\u8ffd\u52a0\u3057\u3066\u3044\u308b\u611f\u3058\u3060\u308d\u3046\u304b\uff1f\n            left_side.AddTriangle(\n                new Vector3[]{leftPoints[0], newVertex1, newVertex2},\n                new Vector3[]{leftNormals[0], newNormal1, newNormal2 },\n                new Vector2[]{leftUvs[0], newUv1, newUv2},\n                newNormal1,\n                submesh\n            );\n\n            left_side.AddTriangle(\n                new Vector3[]{leftPoints[0], leftPoints[1], newVertex2},\n                new Vector3[]{leftNormals[0], leftNormals[1], newNormal2},\n                new Vector2[]{leftUvs[0], leftUvs[1], newUv2},\n                newNormal2,\n                submesh\n            );\n\n            right_side.AddTriangle(\n                new Vector3[]{rightPoints[0], newVertex1, newVertex2},\n                new Vector3[]{rightNormals[0], newNormal1, newNormal2},\n                new Vector2[]{rightUvs[0], newUv1, newUv2},\n                newNormal1,\n                submesh\n            );\n\n            right_side.AddTriangle(\n                new Vector3[]{rightPoints[0], rightPoints[1], newVertex2},\n                new Vector3[]{rightNormals[0], rightNormals[1], newNormal2},\n                new Vector2[]{rightUvs[0], rightUvs[1], newUv2},\n                newNormal2,\n                submesh\n            );\n        }\n\n        private static List<Vector3> capVertTracker = new List<Vector3>();\n        private static List<Vector3> capVertpolygon = new List<Vector3>();\n\n        /// <summary>\n        /// \u30ab\u30c3\u30c8\u3092\u5b9f\u884c\n        /// </summary>\n        static void Capping()\n        {\n            // \u30ab\u30c3\u30c8\u7528\u9802\u70b9\u8ffd\u8de1\u30ea\u30b9\u30c8\n            // \u5177\u4f53\u7684\u306b\u306f\u65b0\u9802\u70b9\u5168\u90e8\u306b\u5bfe\u3059\u308b\u8abf\u67fb\u3092\u884c\u3046\u3002\u305d\u306e\u904e\u7a0b\u3067\u8abf\u67fb\u6e08\u307f\u3092\u30de\u30fc\u30af\u3059\u308b\u76ee\u7684\u3067\u5229\u7528\u3059\u308b\u3002\n            capVertTracker.Clear();\n\n            // \u65b0\u3057\u304f\u751f\u6210\u3057\u305f\u9802\u70b9\u5206\u3060\u3051\u30eb\u30fc\u30d7\u3059\u308b\uff1d\u5168\u65b0\u9802\u70b9\u306b\u5bfe\u3057\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u8abf\u67fb\u3092\u884c\u3046\n            // \u5177\u4f53\u7684\u306b\u306f\u3001\u30ab\u30c3\u30c8\u9762\u3092\u69cb\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u3001\u30ab\u30c3\u30c8\u6642\u306b\u91cd\u8907\u3057\u305f\u9802\u70b9\u3092\u7db2\u7f85\u3057\u3066\u300c\u9762\u300d\u3092\u5f62\u6210\u3059\u308b\u9802\u70b9\u3092\u8abf\u67fb\u3059\u308b\n            for (int i = 0; i < new_vertices.Count; i++)\n            {\n                // \u5bfe\u8c61\u9802\u70b9\u304c\u3059\u3067\u306b\u8abf\u67fb\u6e08\u307f\u306e\u30de\u30fc\u30af\u3055\u308c\u3066\uff08\u8ffd\u8de1\u914d\u5217\u306b\u542b\u307e\u308c\u3066\uff09\u3044\u305f\u3089\u30b9\u30ad\u30c3\u30d7\n                if (capVertTracker.Contains(new_vertices[i]))\n                {\n                    continue;\n                }\n\n                // \u30ab\u30c3\u30c8\u7528\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u3092\u30af\u30ea\u30a2\n                capVertpolygon.Clear();\n\n                // \u8abf\u67fb\u9802\u70b9\u3068\u6b21\u306e\u9802\u70b9\u3092\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u306b\u4fdd\u6301\u3059\u308b\n                capVertpolygon.Add(new_vertices[i + 0]);\n                capVertpolygon.Add(new_vertices[i + 1]);\n\n                // \u8ffd\u8de1\u914d\u5217\u306b\u81ea\u8eab\u3068\u6b21\u306e\u9802\u70b9\u3092\u8ffd\u52a0\u3059\u308b\uff08\u8abf\u67fb\u6e08\u307f\u306e\u30de\u30fc\u30af\u3092\u3064\u3051\u308b\uff09\n                capVertTracker.Add(new_vertices[i + 0]);\n                capVertTracker.Add(new_vertices[i + 1]);\n\n                // \u91cd\u8907\u9802\u70b9\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3057\u8abf\u67fb\u3059\u308b\n                bool isDone = false;\n                while (!isDone)\n                {\n                    isDone = true;\n\n                    // \u65b0\u9802\u70b9\u90e1\u3092\u30eb\u30fc\u30d7\u3057\u3001\u300c\u9762\u300d\u3092\u69cb\u6210\u3059\u308b\u8981\u56e0\u3068\u306a\u308b\u9802\u70b9\u3092\u3059\u3079\u3066\u62bd\u51fa\u3059\u308b\u3002\u62bd\u51fa\u304c\u7d42\u308f\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3092\u7e70\u308a\u8fd4\u3059\n                    // 2\u9802\u70b9\u3054\u3068\u306b\u8abf\u67fb\u3092\u884c\u3046\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306f2\u5358\u4f4d\u3067\u3059\u3059\u3081\u308b\n                    for (int k = 0; k < new_vertices.Count; k += 2)\n                    { // go through the pairs\n                        // \u30da\u30a2\u3068\u306a\u308b\u9802\u70b9\u3092\u63a2\u3059\n                        // \u3053\u3053\u3067\u306e\u30da\u30a2\u3068\u306f\u3001\u3044\u3061\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u304b\u3089\u751f\u6210\u3055\u308c\u308b\u65b0\u9802\u70b9\u306e\u30da\u30a2\u3002\n                        // \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u304b\u3089\u306f\u5fc5\u305a2\u9802\u70b9\u304c\u751f\u6210\u3055\u308c\u308b\u305f\u3081\u3001\u305d\u308c\u3092\u63a2\u3059\u3002\n                        // \u307e\u305f\u3001\u5168\u30dd\u30ea\u30b4\u30f3\u306b\u5bfe\u3057\u3066\u5206\u5272\u70b9\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u307b\u307c\u5fc5\u305a\u3001\u307e\u3063\u305f\u304f\u540c\u3058\u4f4d\u7f6e\u306b\u5b58\u5728\u3059\u308b\u3001\u5225\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u306e\u5206\u5272\u9802\u70b9\u304c\u5b58\u5728\u3059\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n                        if (new_vertices[k] == capVertpolygon[capVertpolygon.Count - 1] && !capVertTracker.Contains(new_vertices[k + 1]))\n                        {   // if so add the other\n                            // \u30da\u30a2\u306e\u9802\u70b9\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u305d\u308c\u3092\u30dd\u30ea\u30b4\u30f3\u914d\u5217\u306b\u8ffd\u52a0\u3057\u3001\n                            // \u8abf\u67fb\u6e08\u30de\u30fc\u30af\u3092\u3064\u3051\u3066\u3001\u6b21\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u306b\u56de\u3059\n                            isDone = false;\n                            capVertpolygon.Add(new_vertices[k + 1]);\n                            capVertTracker.Add(new_vertices[k + 1]);\n                        }\n                        else if (new_vertices[k + 1] == capVertpolygon[capVertpolygon.Count - 1] && !capVertTracker.Contains(new_vertices[k]))\n                        {   // if so add the other\n                            isDone = false;\n                            capVertpolygon.Add(new_vertices[k]);\n                            capVertTracker.Add(new_vertices[k]);\n                        }\n                    }\n                }\n\n                // \u898b\u3064\u304b\u3063\u305f\u9802\u70b9\u90e1\u3092\u5143\u306b\u3001\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\n                FillCap(capVertpolygon);\n            }\n        }\n\n        /// <summary>\n        /// \u30ab\u30c3\u30c8\u9762\u3092\u57cb\u3081\u308b\uff1f\n        /// </summary>\n        /// <param name=\"vertices\">\u30dd\u30ea\u30b4\u30f3\u3092\u5f62\u6210\u3059\u308b\u9802\u70b9\u30ea\u30b9\u30c8</param>\n        static void FillCap(List<Vector3> vertices)\n        {\n            // center of the cap\n            // \u30ab\u30c3\u30c8\u5e73\u9762\u306e\u4e2d\u5fc3\u70b9\u3092\u8a08\u7b97\u3059\u308b\n            Vector3 center = Vector3.zero;\n\n            // \u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u9802\u70b9\u4f4d\u7f6e\u3092\u3059\u3079\u3066\u5408\u8a08\u3059\u308b\n            foreach(Vector3 point in vertices)\n            {\n                center += point;\n            }\n\n            // \u305d\u308c\u3092\u9802\u70b9\u6570\u306e\u5408\u8a08\u3067\u5272\u308a\u3001\u4e2d\u5fc3\u3068\u3059\u308b\n            center = center / vertices.Count;\n\n            // you need an axis based on the cap\n            // \u30ab\u30c3\u30c8\u5e73\u9762\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305fupward\n            Vector3 upward = Vector3.zero;\n\n            // 90 degree turn\n            // \u30ab\u30c3\u30c8\u5e73\u9762\u306e\u6cd5\u7dda\u3092\u5229\u7528\u3057\u3066\u3001\u300c\u4e0a\u300d\u65b9\u5411\u3092\u6c42\u3081\u308b\n            // \u5177\u4f53\u7684\u306b\u306f\u3001\u5e73\u9762\u306e\u5de6\u5074\u3092\u4e0a\u3068\u3057\u3066\u5229\u7528\u3059\u308b\n            upward.x =  blade.normal.y;\n            upward.y = -blade.normal.x;\n            upward.z =  blade.normal.z;\n\n            // \u6cd5\u7dda\u3068\u300c\u4e0a\u65b9\u5411\u300d\u304b\u3089\u3001\u6a2a\u8ef8\u3092\u7b97\u51fa\n            Vector3 left = Vector3.Cross(blade.normal, upward);\n\n            Vector3 displacement = Vector3.zero;\n            Vector3 newUV1 = Vector3.zero;\n            Vector3 newUV2 = Vector3.zero;\n\n            // \u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f\u9802\u70b9\u5206\u30eb\u30fc\u30d7\u3092\u56de\u3059\n            for (int i = 0; i < vertices.Count; i++)\n            {\n                // \u8a08\u7b97\u3067\u6c42\u3081\u305f\u4e2d\u5fc3\u70b9\u304b\u3089\u3001\u5404\u9802\u70b9\u3078\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb\n                displacement = vertices[i] - center;\n\n                // \u65b0\u898f\u751f\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u306eUV\u5ea7\u6a19\u3092\u6c42\u3081\u308b\u3002\n                // displacement\u304c\u4e2d\u5fc3\u304b\u3089\u306e\u30d9\u30af\u30c8\u30eb\u306e\u305f\u3081\u3001UV\u7684\u306a\u4e2d\u5fc3\u3067\u3042\u308b0.5\u3092\u30d9\u30fc\u30b9\u306b\u3001\u5185\u7a4d\u3092\u4f7f\u3063\u3066UV\u306e\u6700\u7d42\u7684\u306a\u4f4d\u7f6e\u3092\u5f97\u308b\n                newUV1 = Vector3.zero;\n                newUV1.x = 0.5f + Vector3.Dot(displacement, left);\n                newUV1.y = 0.5f + Vector3.Dot(displacement, upward);\n                newUV1.z = 0.5f + Vector3.Dot(displacement, blade.normal);\n\n                // \u6b21\u306e\u9802\u70b9\u3002\u305f\u3060\u3057\u3001\u6700\u5f8c\u306e\u9802\u70b9\u306e\u6b21\u306f\u6700\u521d\u306e\u9802\u70b9\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u3001\u82e5\u5e72\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u6307\u5b9a\u65b9\u6cd5\u3092\u3057\u3066\u3044\u308b\uff08% vertices.Count\uff09\n                displacement = vertices[(i + 1) % vertices.Count] - center;\n\n                newUV2 = Vector3.zero;\n                newUV2.x = 0.5f + Vector3.Dot(displacement, left);\n                newUV2.y = 0.5f + Vector3.Dot(displacement, upward);\n                newUV2.z = 0.5f + Vector3.Dot(displacement, blade.normal);\n\n                // uvs.Add(new Vector2(relativePosition.x, relativePosition.y));\n                // normals.Add(blade.normal);\n\n                // \u5de6\u5074\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u3057\u3066\u3001\u6c42\u3081\u305fUV\u3092\u5229\u7528\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n                left_side.AddTriangle(\n                    new Vector3[]{\n                        vertices[i],\n                        vertices[(i + 1) % vertices.Count],\n                        center\n                    },\n                    new Vector3[]{\n                        -blade.normal,\n                        -blade.normal,\n                        -blade.normal\n                    },\n                    new Vector2[]{\n                        newUV1,\n                        newUV2,\n                        new Vector2(0.5f, 0.5f)\n                    },\n                    -blade.normal,\n                    left_side.subIndices.Count - 1 // \u30ab\u30c3\u30c8\u9762\u3002\u6700\u5f8c\u306e\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n                );\n\n                // \u53f3\u5074\u306e\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3002\u57fa\u672c\u306f\u5de6\u5074\u3068\u540c\u3058\u3060\u304c\u3001\u6cd5\u7dda\u3060\u3051\u9006\u5411\u304d\u3002\n                right_side.AddTriangle(\n                    new Vector3[]{\n                        vertices[i],\n                        vertices[(i + 1) % vertices.Count],\n                        center\n                    },\n                    new Vector3[]{\n                        blade.normal,\n                        blade.normal,\n                        blade.normal\n                    },\n                    new Vector2[]{\n                        newUV1,\n                        newUV2,\n                        new Vector2(0.5f, 0.5f)\n                    },\n                    blade.normal,\n                    right_side.subIndices.Count - 1 // \u30ab\u30c3\u30c8\u9762\u3002\u6700\u5f8c\u306e\u30b5\u30d6\u30e1\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u3092\u8ffd\u52a0\n                );\n            }\n        }\n    }\n}\n```\n", "tags": ["Unity", "C#", "3D"]}