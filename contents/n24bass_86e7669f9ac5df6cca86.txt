{"tags": ["ESP8266", "micropython"], "context": "\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u524d\u306b\u66f8\u3044\u305f NodeMCU \u3067 web LED signal \u306e MicroPython \u7248\u3067\u3059\u3002\u51e6\u7406\u5185\u5bb9\u306f\u307b\u307c\u540c\u3058\u3067\u65b0\u305f\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3042\u308b\u3068\u73fe\u5728\u306e\u51e6\u7406\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u307e\u3059\u3002\u70b9\u6ec5\u306e\u9593\u9694\u3092\u76f4\u63a5\u30bf\u30a4\u30de\u306e\u8a2d\u5b9a\u5024\u306b\u3057\u3066\u3044\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u5143\u306e Lua \u306e\u30b3\u30fc\u30c9\u306f PWM \u3082\u30bf\u30a4\u30de\u51e6\u7406\u3067\u3057\u3088\u3046\u304b\u3068\u8003\u3048\u3066\u3044\u305f\u540d\u6b8b\u308a\u3067\u7121\u99c4\u306b\u4f55\u5ea6\u3082\u30bf\u30a4\u30de\u5272\u8fbc\u307f\u3092\u3057\u3066\u3044\u305f\u306e\u3092\u6b62\u3081\u307e\u3057\u305f\u3002\n\u3053\u306e MicroPython \u5b9f\u88c5\u3067\u306f\u4e00\u65e6\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u30e2\u30fc\u30c9\u3067\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3059\u308b\u3068\u3001\u305d\u306e\u63a5\u7d9a\u60c5\u5831\u3092\u8a18\u61b6\u3057\u3066\u30ea\u30bb\u30c3\u30c8\u5f8c\u306b\u3082\u81ea\u52d5\u7684\u306b\u63a5\u7d9a\u3092\u8a66\u884c\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u30e2\u30fc\u30c9\u3067\u3082\u52d5\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u8fba\u306f\u9069\u5f53\u306b\u5236\u5fa1\u304c\u5fc5\u8981\u3067\u3057\u3087\u3046\u3002\nYouTube\u306e\u52d5\u753b\u3082\u66f4\u65b0\u3057\u307e\u3057\u305f\u3002\n\nSignalPy.py\n#  SignalPy.py\n#  usage: http://hostname:8080/ctrl/?red=50&green=255&blue=255&period=500&repeat=300\n\nimport utime as time\nimport usocket as socket\nfrom machine import Timer, Pin, PWM\n\nESSID = 'your ESSID'\nPASS = 'your password'\nPORT = 8080\n\n# LED parameters\nparam = {\n    'red': 0,\n    'green': 0,\n    'blue': 0,\n    'period': 0,\n    'repeat': 0,\n    }\ntim = Timer(-1)\npower = False\n\nled_r = PWM(Pin(5, Pin.OUT, value = 0), freq = 512, duty = 0)\nled_g = PWM(Pin(4, Pin.OUT, value = 0), freq = 512, duty = 0)\nled_b = PWM(Pin(0, Pin.OUT, value = 0), freq = 512, duty = 0)\n\ndef tmfunc(*args):\n    global param, power\n    npower = power\n    if param['repeat'] > 0:\n        npower = not power\n    if not npower:\n            param['repeat'] = param['repeat'] - 1\n    else:\n        npower = False\n\n    if power != npower:\n        power = npower\n        led(power)\n\ndef do_connect():\n    import network\n    # -- ESP8266 as station mode\n    # sta_if = network.WLAN(network.STA_IF)\n    # if not sta_if.isconnected():\n    #     print('connecting to network...')\n    #     sta_if.active(True)\n    #     sta_if.connect(ESSID, PASS)\n    #     while not sta_if.isconnected():\n    #         pass\n    # cf = sta_if.ifconfig()\n    # -- ESP8266 as access point mode\n    ap_if = network.WLAN(network.AP_IF)\n    cf = ap_if.ifconfig()\n    # --\n    print('network config:', cf)\n    return cf[0]\n\ndef parser(s):\n    try:\n        r = s.split('/')\n        if r[1] != 'ctrl' or len(r) < 3 or r[2][0] != '?' : return\n        p = dict([i.split('=') for i in [i for i in r[2][1:].split('&')]])\n        print(\"params:\",p)\n        global param        # print(\"\\nperser({0})\".format(s), r)\n        for i in ['red', 'green', 'blue', 'period', 'repeat']:\n            max_value = 1023 if i in ['red', 'green', 'blue'] else 60000\n            try:\n                param[i] = min(int(p.get(i)), max_value)\n            except:\n                param[i] = 0\n        tim.deinit()\n        led(False)\n        if param['period'] > 0:\n            tim.init(period = param['period'], mode = Timer.PERIODIC, callback = tmfunc)\n    except:\n        pass\n\ndef led(sw):\n    if sw:\n        print(\"o\\010\", end=\"\")\n        led_b.duty(param['blue'])\n        led_r.duty(param['red'])\n        led_g.duty(param['green'])\n    else:\n        print(\"-\\010\", end=\"\")\n        led_b.duty(0)\n        led_r.duty(0)\n        led_g.duty(0)\n\n# ------------\n\nCONTENT = \"\"\"\\\nHTTP/1.0 200 OK\n\nHello #{} from MicroPython!\n\"\"\"\n\nip = do_connect()\nai = socket.getaddrinfo(ip, PORT)\naddr = ai[0][4]\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(addr)\ns.listen(5)\ncounter=0\n\nwhile True:\n    res = s.accept()\n    print(\"accept\")\n    client_s = res[0]\n    client_addr = res[1]\n    print(\"Client address:\", client_addr)\n    print(\"Client socket:\", client_s)\n    req = client_s.recv(1024)\n    print(\"Request=\", req)\n    client_s.send(bytes(CONTENT.format(counter), \"ascii\"))\n    parts = req.decode('ascii').split(' ')\n    if len(parts) > 0:\n        if parts[1] == '/exit':\n            client_s.close()\n            break\n        parser(parts[1])\n        client_s.send(bytes(\"valid param: {0}\\n\\n\".format(param), \"ascii\"))\n    else:\n        client_s.send(\"invalid param {0}\".format(req), \"ascii\")\n    client_s.close()\n    counter += 1\n\n# ------------\n\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u524d\u306b\u66f8\u3044\u305f [NodeMCU \u3067 web LED signal](http://qiita.com/n24bass/items/bc96baaaad7359dca9bc) \u306e MicroPython \u7248\u3067\u3059\u3002\u51e6\u7406\u5185\u5bb9\u306f\u307b\u307c\u540c\u3058\u3067\u65b0\u305f\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3042\u308b\u3068\u73fe\u5728\u306e\u51e6\u7406\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u307e\u3059\u3002\u70b9\u6ec5\u306e\u9593\u9694\u3092\u76f4\u63a5\u30bf\u30a4\u30de\u306e\u8a2d\u5b9a\u5024\u306b\u3057\u3066\u3044\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u5143\u306e Lua \u306e\u30b3\u30fc\u30c9\u306f PWM \u3082\u30bf\u30a4\u30de\u51e6\u7406\u3067\u3057\u3088\u3046\u304b\u3068\u8003\u3048\u3066\u3044\u305f\u540d\u6b8b\u308a\u3067\u7121\u99c4\u306b\u4f55\u5ea6\u3082\u30bf\u30a4\u30de\u5272\u8fbc\u307f\u3092\u3057\u3066\u3044\u305f\u306e\u3092\u6b62\u3081\u307e\u3057\u305f\u3002\n\n\u3053\u306e MicroPython \u5b9f\u88c5\u3067\u306f\u4e00\u65e6\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u30e2\u30fc\u30c9\u3067\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3059\u308b\u3068\u3001\u305d\u306e\u63a5\u7d9a\u60c5\u5831\u3092\u8a18\u61b6\u3057\u3066\u30ea\u30bb\u30c3\u30c8\u5f8c\u306b\u3082\u81ea\u52d5\u7684\u306b\u63a5\u7d9a\u3092\u8a66\u884c\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u30e2\u30fc\u30c9\u3067\u3082\u52d5\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u8fba\u306f\u9069\u5f53\u306b\u5236\u5fa1\u304c\u5fc5\u8981\u3067\u3057\u3087\u3046\u3002\n\n[YouTube](https://www.youtube.com/watch?v=48F32NLfHhA)\u306e\u52d5\u753b\u3082\u66f4\u65b0\u3057\u307e\u3057\u305f\u3002\n\n```python:SignalPy.py\n#  SignalPy.py\n#  usage: http://hostname:8080/ctrl/?red=50&green=255&blue=255&period=500&repeat=300\n\nimport utime as time\nimport usocket as socket\nfrom machine import Timer, Pin, PWM\n\nESSID = 'your ESSID'\nPASS = 'your password'\nPORT = 8080\n\n# LED parameters\nparam = {\n    'red': 0,\n    'green': 0,\n    'blue': 0,\n    'period': 0,\n    'repeat': 0,\n    }\ntim = Timer(-1)\npower = False\n\nled_r = PWM(Pin(5, Pin.OUT, value = 0), freq = 512, duty = 0)\nled_g = PWM(Pin(4, Pin.OUT, value = 0), freq = 512, duty = 0)\nled_b = PWM(Pin(0, Pin.OUT, value = 0), freq = 512, duty = 0)\n\ndef tmfunc(*args):\n    global param, power\n    npower = power\n    if param['repeat'] > 0:\n        npower = not power\n\tif not npower:\n            param['repeat'] = param['repeat'] - 1\n    else:\n        npower = False\n\n    if power != npower:\n        power = npower\n        led(power)\n        \ndef do_connect():\n    import network\n    # -- ESP8266 as station mode\n    # sta_if = network.WLAN(network.STA_IF)\n    # if not sta_if.isconnected():\n    #     print('connecting to network...')\n    #     sta_if.active(True)\n    #     sta_if.connect(ESSID, PASS)\n    #     while not sta_if.isconnected():\n    #         pass\n    # cf = sta_if.ifconfig()\n    # -- ESP8266 as access point mode\n    ap_if = network.WLAN(network.AP_IF)\n    cf = ap_if.ifconfig()\n    # --\n    print('network config:', cf)\n    return cf[0]\n\ndef parser(s):\n    try:\n        r = s.split('/')\n        if r[1] != 'ctrl' or len(r) < 3 or r[2][0] != '?' : return\n        p = dict([i.split('=') for i in [i for i in r[2][1:].split('&')]])\n        print(\"params:\",p)\n        global param        # print(\"\\nperser({0})\".format(s), r)\n        for i in ['red', 'green', 'blue', 'period', 'repeat']:\n            max_value = 1023 if i in ['red', 'green', 'blue'] else 60000\n            try:\n                param[i] = min(int(p.get(i)), max_value)\n            except:\n                param[i] = 0\n        tim.deinit()\n        led(False)\n        if param['period'] > 0:\n            tim.init(period = param['period'], mode = Timer.PERIODIC, callback = tmfunc)\n    except:\n        pass\n\ndef led(sw):\n    if sw:\n        print(\"o\\010\", end=\"\")\n        led_b.duty(param['blue'])\n        led_r.duty(param['red'])\n        led_g.duty(param['green'])\n    else:\n        print(\"-\\010\", end=\"\")\n        led_b.duty(0)\n        led_r.duty(0)\n        led_g.duty(0)\n\n# ------------\n\nCONTENT = \"\"\"\\\nHTTP/1.0 200 OK\n\nHello #{} from MicroPython!\n\"\"\"\n\nip = do_connect()\nai = socket.getaddrinfo(ip, PORT)\naddr = ai[0][4]\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(addr)\ns.listen(5)\ncounter=0\n\nwhile True:\n    res = s.accept()\n    print(\"accept\")\n    client_s = res[0]\n    client_addr = res[1]\n    print(\"Client address:\", client_addr)\n    print(\"Client socket:\", client_s)\n    req = client_s.recv(1024)\n    print(\"Request=\", req)\n    client_s.send(bytes(CONTENT.format(counter), \"ascii\"))\n    parts = req.decode('ascii').split(' ')\n    if len(parts) > 0:\n        if parts[1] == '/exit':\n            client_s.close()\n            break\n        parser(parts[1])\n        client_s.send(bytes(\"valid param: {0}\\n\\n\".format(param), \"ascii\"))\n    else:\n        client_s.send(\"invalid param {0}\".format(req), \"ascii\")\n    client_s.close()\n    counter += 1\n\n# ------------\n\n```\n"}