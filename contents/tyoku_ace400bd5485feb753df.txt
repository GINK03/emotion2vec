{"context": "\u5927\u91cf\u306e\u4f4f\u6240\u304b\u3089\u5ea7\u6a19\u60c5\u5831\u53d6\u308b\u3068\u304d\u306b\u4f7f\u3063\u3066\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u3053\u3053\n\nGoogleApi.vb\nImports System.Text\nImports System.Web.Script.Serialization\n\nPublic Class GoogleAPI\n    Private Const APIKEY As String = \"\u3053\u3053\u306bGoogle\u304b\u3089\u53d6\u5f97\u3057\u305fAPI\u30ad\u30fc\u3092\u5165\u529b\"\n\n    ''' <summary>\n    ''' Main method which performs the call to the REST service\n    ''' </summary>\n    ''' <remarks></remarks>\n    Public Function GetGeoCode(fullAddress As String) As GeoResponse\n        Try\n            Dim req As System.Net.WebRequest = System.Net.WebRequest.Create($\"https://maps.googleapis.com/maps/api/geocode/json?address={fullAddress}&key={APIKEY}\")\n            req.Method = \"GET\"\n            Dim resp As System.Net.WebResponse = req.GetResponse\n            If (resp Is Nothing) Then\n                Return Nothing\n            End If\n            Dim sr As System.IO.StreamReader = New System.IO.StreamReader(resp.GetResponseStream)\n            Dim jsonData As String = sr.ReadToEnd.Trim\n\n            Dim ser As JavaScriptSerializer = New JavaScriptSerializer\n            Dim res = ser.Deserialize(Of GeoResponse)(jsonData)\n            Return res\n        Catch ex As Exception\n            Throw ex\n        End Try\n    End Function\n\n    Public Class GeoResponse\n        Public status As String = \"\"\n        Public results As GeoResult() = {}\n    End Class\n    Public Class GeoResult\n        Public address_components As AddressComponents()\n        Public formatted_address As String = \"\"\n        Public geometry As Geometry\n        Public partial_match As String = \"\"\n        Public place_id As String = \"\"\n        Public types As String() = {}\n    End Class\n    Public Class AddressComponents\n        Public long_name As String = \"\"\n        Public short_name As String = \"\"\n        Public types As String() = {}\n    End Class\n    Public Class Geometry\n        Public bounds As NESWLocation\n        Public location As GeoLocation\n        Public location_type As String = \"\"\n        Public viewport As NESWLocation\n    End Class\n    Public Class NESWLocation\n        Public northeast As GeoLocation\n        Public southwest As GeoLocation\n    End Class\n    Public Class GeoLocation\n        Public lat As String = \"\"\n        Public lng As String = \"\"\n    End Class\nEnd Class\n\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3064\u304b\u3046\nTry\n    Dim ggl As New GoogleAPI\n    For Each address In Addresses\n        'API\u304b\u3089\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n        Dim geo As GoogleAPI.GeoResponse = ggl.GetGeoCode(address)\n        If \"OK\".Equals(geo.status) Then\n            '\u30ed\u30b1\u304c\u3068\u308c\u305f\u3068\u304d\n        ElseIf \"OVER_QUERY_LIMIT\".Equals(geo.status) Then\n            '\u30af\u30a8\u30ea\u767a\u884c\u4e0a\u9650\u306b\u3072\u3063\u304b\u304b\u3063\u305f\u3068\u304d\n            Return\n        Else\n            '\u30ed\u30b1\u304c\u53d6\u308c\u306a\u304b\u3063\u305f\u3068\u304d\n        End If\n    Next\nCatch\n    Throw\nEnd try\n\n\u5927\u91cf\u306e\u4f4f\u6240\u304b\u3089\u5ea7\u6a19\u60c5\u5831\u53d6\u308b\u3068\u304d\u306b\u4f7f\u3063\u3066\u307e\u3059\u3002\n[\u8a73\u7d30\u306f\u3053\u3053](https://developers.google.com/maps/documentation/geocoding/intro?hl=ja)\n\n```vbnet:GoogleApi.vb\nImports System.Text\nImports System.Web.Script.Serialization\n\nPublic Class GoogleAPI\n    Private Const APIKEY As String = \"\u3053\u3053\u306bGoogle\u304b\u3089\u53d6\u5f97\u3057\u305fAPI\u30ad\u30fc\u3092\u5165\u529b\"\n\n    ''' <summary>\n    ''' Main method which performs the call to the REST service\n    ''' </summary>\n    ''' <remarks></remarks>\n    Public Function GetGeoCode(fullAddress As String) As GeoResponse\n        Try\n            Dim req As System.Net.WebRequest = System.Net.WebRequest.Create($\"https://maps.googleapis.com/maps/api/geocode/json?address={fullAddress}&key={APIKEY}\")\n            req.Method = \"GET\"\n            Dim resp As System.Net.WebResponse = req.GetResponse\n            If (resp Is Nothing) Then\n                Return Nothing\n            End If\n            Dim sr As System.IO.StreamReader = New System.IO.StreamReader(resp.GetResponseStream)\n            Dim jsonData As String = sr.ReadToEnd.Trim\n\n            Dim ser As JavaScriptSerializer = New JavaScriptSerializer\n            Dim res = ser.Deserialize(Of GeoResponse)(jsonData)\n            Return res\n        Catch ex As Exception\n            Throw ex\n        End Try\n    End Function\n\n    Public Class GeoResponse\n        Public status As String = \"\"\n        Public results As GeoResult() = {}\n    End Class\n    Public Class GeoResult\n        Public address_components As AddressComponents()\n        Public formatted_address As String = \"\"\n        Public geometry As Geometry\n        Public partial_match As String = \"\"\n        Public place_id As String = \"\"\n        Public types As String() = {}\n    End Class\n    Public Class AddressComponents\n        Public long_name As String = \"\"\n        Public short_name As String = \"\"\n        Public types As String() = {}\n    End Class\n    Public Class Geometry\n        Public bounds As NESWLocation\n        Public location As GeoLocation\n        Public location_type As String = \"\"\n        Public viewport As NESWLocation\n    End Class\n    Public Class NESWLocation\n        Public northeast As GeoLocation\n        Public southwest As GeoLocation\n    End Class\n    Public Class GeoLocation\n        Public lat As String = \"\"\n        Public lng As String = \"\"\n    End Class\nEnd Class\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3064\u304b\u3046\n\n```vbnet\nTry\n    Dim ggl As New GoogleAPI\n    For Each address In Addresses\n        'API\u304b\u3089\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n        Dim geo As GoogleAPI.GeoResponse = ggl.GetGeoCode(address)\n        If \"OK\".Equals(geo.status) Then\n            '\u30ed\u30b1\u304c\u3068\u308c\u305f\u3068\u304d\n        ElseIf \"OVER_QUERY_LIMIT\".Equals(geo.status) Then\n            '\u30af\u30a8\u30ea\u767a\u884c\u4e0a\u9650\u306b\u3072\u3063\u304b\u304b\u3063\u305f\u3068\u304d\n            Return\n        Else\n            '\u30ed\u30b1\u304c\u53d6\u308c\u306a\u304b\u3063\u305f\u3068\u304d\n        End If\n    Next\nCatch\n    Throw\nEnd try\n```\n", "tags": ["GeoCoding", "VB.Net", "VisualStudio2015"]}