{"context": "\n\n\u306f\u3058\u3081\u306b\n\u5148\u4eba\u306e\u77e5\u6075\u304c\u3042\u3063\u305f\u306e\u3067\u30b5\u30af\u30c3\u3068\u4f5c\u308c\u307e\u3057\u305f  \n\n\u3068\u308a\u3042\u3048\u305aLINE BOT API\u3067\u30aa\u30a6\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f\nhttp://qiita.com/masuidrive/items/1042d93740a7a72242a3\n\nLINE BOT \u3092\u3068\u308a\u3042\u3048\u305a\u30bf\u30c0\u3067 Heroku \u3067\u52d5\u304b\u3059\nhttp://qiita.com/yuya_takeyama/items/0660a59d13e2cd0b2516\n\n\n\n\u4f5c\u3063\u305f\u3082\u306e\n\u300c\u306c\u308b\u307d\u300d\u306b\u300c\uff76\uff9e\uff6f\u300d\u3059\u308bbot\u3067\u3059\u3002\u4ee5\u4e0b\u306eQR\u30b3\u30fc\u30c9\u3067\u53cb\u3060\u3061\u306b\u306a\u308c\u307e\u3059\u3002\n\n\n\u6e96\u5099\n\nHeroku\u30a2\u30d7\u30ea\u306bFixie\u30a2\u30c9\u30aa\u30f3\u3092\u5165\u308c\u308b\nLINE\u306eCallback URL\u3092https://{\u30a2\u30d7\u30ea\u540d}.herokuapp.com:443/callback\u3063\u3066\u611f\u3058\u3067\u8a2d\u5b9a\nHeroku\u306e\u74b0\u5883\u5909\u6570\u306bLINE\u306eCannel ID Channel Secret Channel MID\u3092\u8a2d\u5b9a\nLINE\u306eServer IP Whitelist\u306bFixie\u306eOutbound IPs\u3092xxx.xxx.xxx.xxx/24\u3063\u3066\u611f\u3058\u3067\u767b\u9332\n\n\n\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u3067\u516c\u958b\u3057\u3066\u307e\u3059\u3002\nhttps://github.com/ttskch/line-nullpo\n<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$app = new Silex\\Application();\n\n$app->post('/callback', function (Request $request) use ($app) {\n    $client = new GuzzleHttp\\Client();\n\n    $body = json_decode($request->getContent(), true);\n    foreach ($body['result'] as $msg) {\n        if (!preg_match('/(\u306c\u308b\u307d|\u30cc\u30eb\u30dd|\uff87\uff99\uff8e\uff9f|nullpo)/i', $msg['content']['text'])) {\n            continue;\n        }\n\n        $resContent = $msg['content'];\n        $resContent['text'] = '\uff76\uff9e\uff6f';\n\n        $requestOptions = [\n            'body' => json_encode([\n                'to' => [$msg['content']['from']],\n                'toChannel' => 1383378250, # Fixed value\n                'eventType' => '138311608800106203', # Fixed value\n                'content' => $resContent,\n            ]),\n            'headers' => [\n                'Content-Type' => 'application/json; charset=UTF-8',\n                'X-Line-ChannelID' => getenv('LINE_CHANNEL_ID'),\n                'X-Line-ChannelSecret' => getenv('LINE_CHANNEL_SECRET'),\n                'X-Line-Trusted-User-With-ACL' => getenv('LINE_CHANNEL_MID'),\n            ],\n            'proxy' => [\n                'https' => getenv('FIXIE_URL'),\n            ],\n        ];\n\n        try {\n            $client->request('post', 'https://trialbot-api.line.me/v1/events', $requestOptions);\n        } catch (Exception $e) {\n            error_log($e->getMessage());\n        }\n    }\n\n    return 'OK';\n});\n\n$app->run();\n\n\n\u3072\u3068\u3053\u3068\n\n\u30ed\u30fc\u30ab\u30eb\u3067$ heroku logs -t\u3057\u306a\u304c\u3089\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066error_log()\u3068\u304b\u3067\u30d7\u30ea\u30f3\u30c8\u30c7\u30d0\u30c3\u30b0\u3057\u306a\u304c\u3089\u958b\u767a\u3059\u308b\u306e\u304c\u304a\u624b\u8efd\u3067\u3059\n\n# \u306f\u3058\u3081\u306b\n\n\u5148\u4eba\u306e\u77e5\u6075\u304c\u3042\u3063\u305f\u306e\u3067\u30b5\u30af\u30c3\u3068\u4f5c\u308c\u307e\u3057\u305f :relieved: \n\n* \u3068\u308a\u3042\u3048\u305aLINE BOT API\u3067\u30aa\u30a6\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f  \nhttp://qiita.com/masuidrive/items/1042d93740a7a72242a3\n* LINE BOT \u3092\u3068\u308a\u3042\u3048\u305a\u30bf\u30c0\u3067 Heroku \u3067\u52d5\u304b\u3059  \nhttp://qiita.com/yuya_takeyama/items/0660a59d13e2cd0b2516\n\n# \u4f5c\u3063\u305f\u3082\u306e\n\n\u300c\u306c\u308b\u307d\u300d\u306b\u300c\uff76\uff9e\uff6f\u300d\u3059\u308bbot\u3067\u3059\u3002\u4ee5\u4e0b\u306eQR\u30b3\u30fc\u30c9\u3067\u53cb\u3060\u3061\u306b\u306a\u308c\u307e\u3059\u3002\n\n![](https://cloud.githubusercontent.com/assets/4360663/14373615/d877693a-fd86-11e5-90ff-a03393b4a2d0.png)\n\n# \u6e96\u5099\n\n* Heroku\u30a2\u30d7\u30ea\u306bFixie\u30a2\u30c9\u30aa\u30f3\u3092\u5165\u308c\u308b\n* LINE\u306e`Callback URL`\u3092`https://{\u30a2\u30d7\u30ea\u540d}.herokuapp.com:443/callback`\u3063\u3066\u611f\u3058\u3067\u8a2d\u5b9a\n* Heroku\u306e\u74b0\u5883\u5909\u6570\u306bLINE\u306e`Cannel ID` `Channel Secret` `Channel MID`\u3092\u8a2d\u5b9a\n* LINE\u306e`Server IP Whitelist`\u306bFixie\u306e`Outbound IPs`\u3092`xxx.xxx.xxx.xxx/24`\u3063\u3066\u611f\u3058\u3067\u767b\u9332\n\n# \u30b3\u30fc\u30c9\n\n\u4ee5\u4e0b\u3067\u516c\u958b\u3057\u3066\u307e\u3059\u3002\nhttps://github.com/ttskch/line-nullpo\n\n```php\n<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$app = new Silex\\Application();\n\n$app->post('/callback', function (Request $request) use ($app) {\n    $client = new GuzzleHttp\\Client();\n\n    $body = json_decode($request->getContent(), true);\n    foreach ($body['result'] as $msg) {\n        if (!preg_match('/(\u306c\u308b\u307d|\u30cc\u30eb\u30dd|\uff87\uff99\uff8e\uff9f|nullpo)/i', $msg['content']['text'])) {\n            continue;\n        }\n\n        $resContent = $msg['content'];\n        $resContent['text'] = '\uff76\uff9e\uff6f';\n\n        $requestOptions = [\n            'body' => json_encode([\n                'to' => [$msg['content']['from']],\n                'toChannel' => 1383378250, # Fixed value\n                'eventType' => '138311608800106203', # Fixed value\n                'content' => $resContent,\n            ]),\n            'headers' => [\n                'Content-Type' => 'application/json; charset=UTF-8',\n                'X-Line-ChannelID' => getenv('LINE_CHANNEL_ID'),\n                'X-Line-ChannelSecret' => getenv('LINE_CHANNEL_SECRET'),\n                'X-Line-Trusted-User-With-ACL' => getenv('LINE_CHANNEL_MID'),\n            ],\n            'proxy' => [\n                'https' => getenv('FIXIE_URL'),\n            ],\n        ];\n\n        try {\n            $client->request('post', 'https://trialbot-api.line.me/v1/events', $requestOptions);\n        } catch (Exception $e) {\n            error_log($e->getMessage());\n        }\n    }\n\n    return 'OK';\n});\n\n$app->run();\n```\n\n# \u3072\u3068\u3053\u3068\n\n* \u30ed\u30fc\u30ab\u30eb\u3067`$ heroku logs -t`\u3057\u306a\u304c\u3089\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066`error_log()`\u3068\u304b\u3067\u30d7\u30ea\u30f3\u30c8\u30c7\u30d0\u30c3\u30b0\u3057\u306a\u304c\u3089\u958b\u767a\u3059\u308b\u306e\u304c\u304a\u624b\u8efd\u3067\u3059\n", "tags": ["Line", "linebot", "Heroku", "PHP"]}