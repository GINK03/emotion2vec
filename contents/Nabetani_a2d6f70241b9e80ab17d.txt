{"context": " More than 1 year has passed since last update.\u7b2c\u56db\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u89e3\u7b54\u4f8b\u3002\n\u554f\u984c\u306f\nhttp://nabetani.sakura.ne.jp/hena/ord4tetroid/\n\u5f53\u65e5\u3088\u308a\u524d\u306b\u4e8b\u524d\u306b\u66f8\u3044\u3066\u304a\u3044\u305f\u5b9f\u88c5\uff13\u3064\u3002\n\n\u307e\u305a\u306f\u3001\u6700\u521d\u306b\u66f8\u3044\u305f\u3082\u306e\n#!ruby\ndef rot(d)\n    [d[1], -d[0]]\nend\n\ndef count( axs, c, d )\n    ( 4.times.inject([d]){ |a,b| \n        a+[rot(a.last)]\n    }.map{ |i|\n        c.zip(i).map{ |x| x.inject( &:+) }\n    } & axs ).count\nend\n\ndef key( input )\n    axs=input.split(\",\").map{|xy| xy.to_i.divmod(10) }.uniq\n    axs.map{ |i|\n        count( axs, i, [1,0] )*10+count( axs, i, [1,1] )\n    }.sort.join(\"-\")\nend\n\ndef solve( input )\n    case key(input)\n    when \"10-11-20-21\" then \"L\"\n    when \"10-10-20-20\" then \"I\"\n    when \"11-11-12-30\" then \"T\"\n    when \"21-21-21-21\" then \"O\"\n    when \"11-11-21-21\" then \"S\"\n    else \"-\"\n    end\nend\n\nDATA.each{ |line|\n    /(?<num>\\#\\d+)\\s+(?<input>[\\d,]+)\\s+(?<expected>\\S)/=~line\n    actual=solve(input)\n    print \"%s %s -> %s\"%[num,input,actual]\n    print \"**EXPECTED** : \"+expected unless actual==expected\n    puts\n}\n\n__END__\n#1  55,55,55,55 -\n#2  07,17,06,05 L\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u672c\u5f53\u306f 50\u4ef6\u3042\u308b\u3051\u3069\u3001\u3053\u3053\u3067\u306f\u7701\u7565\u3002\n\u6ce8\u76ee\u70b9\u306e8\u8fd1\u508d\u3092\u8abf\u3079\u305f\u3089\u308f\u304b\u308b\u3088\u306d\u3001\u3068\u3044\u3046\u30a2\u30a4\u30c7\u30a3\u30a2\u3002\n\u30da\u30f3\u30c8\u30df\u30ce\u3060\u3068\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\n#!ruby\ndef dist( a, b )\n    a.zip(b).map{ |i,j| (i-j)**2 }.inject( &:+ )\nend\n\ndef solve( input )\n    a=input.split( ',' ).map{ |i| i.to_i.divmod(10) }.sort.uniq\n    return '-' unless a.size==4\n    d=a.size.times.map{ |fst|\n        fst.times.map{ |snd|\n            dist( a[fst], a[snd] )\n        }\n    }.flatten.sort.join\n    case d\n    when '111245' then 'L'\n    when '111449' then 'I'\n    when '111224' then 'T'\n    when '111122' then 'O'\n    when '111225' then 'S'\n    else\n        '-'\n    end\nend\n\nDATA.each \u4ee5\u964d\u306f\u6700\u521d\u306e\u3068\u540c\u3058\u306a\u306e\u3067\u7701\u7565\u3002\n\u4e0e\u3048\u3089\u308c\u305f\u70b9\u306e\u9593\u306e\u8ddd\u96e2\uff08\u5e73\u65b9\u6839\u3092\u7701\u7565\u3057\u3066\u3001\u8ddd\u96e2\u306e\u81ea\u4e57\uff09\u3092\u307e\u3068\u3081\u308b\u3068\u5224\u5225\u3067\u304d\u308b\u3088\u306d\u3001\u3068\u3044\u3046\u30a2\u30a4\u30c7\u30a3\u30a2\u3002\n\u3053\u308c\u3067\u3046\u307e\u304f\u3044\u304f\u306e\u306f\u306a\u305c\u304b\u3068\u554f\u308f\u308c\u308b\u3068\u3061\u3087\u3063\u3068\u7aae\u3059\u308b\u3002\n\n#!ruby\n\ndef s(a)\n    mins = [0,1].map{ |xy| a.map{ |i| i[xy] }.min }\n    pat = a.map{ |i| [ i[0]-mins[0], i[1]-mins[1] ].join }.sort.flatten.join(\",\")\n    case pat\n    when '00,01,02,12' then 'L'\n    when '00,10,20,30' then 'I'\n    when \"01,10,11,21\" then 'T'\n    when \"00,01,10,11\" then \"O\"\n    when \"01,10,11,20\" then \"S\"\n    else\n        nil\n    end\nend\n\ndef sy(a)\n    s(a) || s( a.map{ |i| [i[0], -i[1]] } )\nend\n\ndef sxy(a)\n    sy(a) || sy( a.map{ |i| [-i[0], i[1]] } )\nend\n\ndef solve( input )\n    a = input.split(',').map{ |i| i.to_i.divmod(10)}.sort.uniq\n    return '-' unless a.size==4\n    sxy(a) || sxy(a.map( &:reverse )) || '-'\nend\n\n\u56de\u8ee2\u3057\u305f\u308a\u93e1\u50cf\u53cd\u8ee2\u3057\u305f\u308a\u3059\u308b\u306e\u3082\u66f8\u3044\u3066\u304a\u3053\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u66f8\u3044\u305f\u3082\u306e\u3002\n\u5f53\u65e5\u9802\u3044\u305f\u56de\u7b54\u306f\u30d1\u30bf\u30fc\u30f3\u306e\u65b9\u3092\u56de\u3057\u3066\u304a\u304f\u3082\u306e\u304c\u591a\u304b\u3063\u305f\u3051\u3069\u3001\u3053\u308c\u306f\u5165\u529b\u306e\u65b9\u3092\u56de\u3057\u3066\u3044\u308b\u3002\n\u307e\u3042\u3001\u56de\u3057\u3066\u3044\u308b\u3093\u3058\u3083\u306a\u304f\u3066 x\u8ef8\u53cd\u8ee2\u30fby\u8ef8\u53cd\u8ee2\u30fbxy\u5165\u308c\u66ff\u3048 \u306e\u4e09\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5b9f\u73fe\u3057\u3066\u308b\u3002\n\u30e1\u30bd\u30c3\u30c9\u540d\u304c\u30b0\u30c0\u30b0\u30c0\u3067\u3059\u3044\u307e\u305b\u3093\u3002\n\u7b2c\u56db\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u89e3\u7b54\u4f8b\u3002\n\u554f\u984c\u306f\nhttp://nabetani.sakura.ne.jp/hena/ord4tetroid/\n\u5f53\u65e5\u3088\u308a\u524d\u306b\u4e8b\u524d\u306b\u66f8\u3044\u3066\u304a\u3044\u305f\u5b9f\u88c5\uff13\u3064\u3002\n\n---\n\n\u307e\u305a\u306f\u3001\u6700\u521d\u306b\u66f8\u3044\u305f\u3082\u306e\n\n```ruby\n#!ruby\ndef rot(d)\n    [d[1], -d[0]]\nend\n\ndef count( axs, c, d )\n    ( 4.times.inject([d]){ |a,b| \n        a+[rot(a.last)]\n    }.map{ |i|\n        c.zip(i).map{ |x| x.inject( &:+) }\n    } & axs ).count\nend\n\ndef key( input )\n    axs=input.split(\",\").map{|xy| xy.to_i.divmod(10) }.uniq\n    axs.map{ |i|\n        count( axs, i, [1,0] )*10+count( axs, i, [1,1] )\n    }.sort.join(\"-\")\nend\n\ndef solve( input )\n    case key(input)\n    when \"10-11-20-21\" then \"L\"\n    when \"10-10-20-20\" then \"I\"\n    when \"11-11-12-30\" then \"T\"\n    when \"21-21-21-21\" then \"O\"\n    when \"11-11-21-21\" then \"S\"\n    else \"-\"\n    end\nend\n\nDATA.each{ |line|\n    /(?<num>\\#\\d+)\\s+(?<input>[\\d,]+)\\s+(?<expected>\\S)/=~line\n    actual=solve(input)\n    print \"%s %s -> %s\"%[num,input,actual]\n    print \"**EXPECTED** : \"+expected unless actual==expected\n    puts\n}\n\n__END__\n#1  55,55,55,55 -\n#2  07,17,06,05 L\n```\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u672c\u5f53\u306f 50\u4ef6\u3042\u308b\u3051\u3069\u3001\u3053\u3053\u3067\u306f\u7701\u7565\u3002\n\n\u6ce8\u76ee\u70b9\u306e8\u8fd1\u508d\u3092\u8abf\u3079\u305f\u3089\u308f\u304b\u308b\u3088\u306d\u3001\u3068\u3044\u3046\u30a2\u30a4\u30c7\u30a3\u30a2\u3002\n\u30da\u30f3\u30c8\u30df\u30ce\u3060\u3068\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\n---\n\n```ruby\n#!ruby\ndef dist( a, b )\n    a.zip(b).map{ |i,j| (i-j)**2 }.inject( &:+ )\nend\n\ndef solve( input )\n    a=input.split( ',' ).map{ |i| i.to_i.divmod(10) }.sort.uniq\n    return '-' unless a.size==4\n    d=a.size.times.map{ |fst|\n        fst.times.map{ |snd|\n            dist( a[fst], a[snd] )\n        }\n    }.flatten.sort.join\n    case d\n    when '111245' then 'L'\n    when '111449' then 'I'\n    when '111224' then 'T'\n    when '111122' then 'O'\n    when '111225' then 'S'\n    else\n        '-'\n    end\nend\n```\n\n`DATA.each` \u4ee5\u964d\u306f\u6700\u521d\u306e\u3068\u540c\u3058\u306a\u306e\u3067\u7701\u7565\u3002\n\u4e0e\u3048\u3089\u308c\u305f\u70b9\u306e\u9593\u306e\u8ddd\u96e2\uff08\u5e73\u65b9\u6839\u3092\u7701\u7565\u3057\u3066\u3001\u8ddd\u96e2\u306e\u81ea\u4e57\uff09\u3092\u307e\u3068\u3081\u308b\u3068\u5224\u5225\u3067\u304d\u308b\u3088\u306d\u3001\u3068\u3044\u3046\u30a2\u30a4\u30c7\u30a3\u30a2\u3002\n\u3053\u308c\u3067\u3046\u307e\u304f\u3044\u304f\u306e\u306f\u306a\u305c\u304b\u3068\u554f\u308f\u308c\u308b\u3068\u3061\u3087\u3063\u3068\u7aae\u3059\u308b\u3002\n\n---\n\n```ruby\n#!ruby\n\ndef s(a)\n    mins = [0,1].map{ |xy| a.map{ |i| i[xy] }.min }\n    pat = a.map{ |i| [ i[0]-mins[0], i[1]-mins[1] ].join }.sort.flatten.join(\",\")\n    case pat\n    when '00,01,02,12' then 'L'\n    when '00,10,20,30' then 'I'\n    when \"01,10,11,21\" then 'T'\n    when \"00,01,10,11\" then \"O\"\n    when \"01,10,11,20\" then \"S\"\n    else\n        nil\n    end\nend\n\ndef sy(a)\n    s(a) || s( a.map{ |i| [i[0], -i[1]] } )\nend\n\ndef sxy(a)\n    sy(a) || sy( a.map{ |i| [-i[0], i[1]] } )\nend\n\ndef solve( input )\n    a = input.split(',').map{ |i| i.to_i.divmod(10)}.sort.uniq\n    return '-' unless a.size==4\n    sxy(a) || sxy(a.map( &:reverse )) || '-'\nend\n```\n\n\u56de\u8ee2\u3057\u305f\u308a\u93e1\u50cf\u53cd\u8ee2\u3057\u305f\u308a\u3059\u308b\u306e\u3082\u66f8\u3044\u3066\u304a\u3053\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u66f8\u3044\u305f\u3082\u306e\u3002\n\u5f53\u65e5\u9802\u3044\u305f\u56de\u7b54\u306f\u30d1\u30bf\u30fc\u30f3\u306e\u65b9\u3092\u56de\u3057\u3066\u304a\u304f\u3082\u306e\u304c\u591a\u304b\u3063\u305f\u3051\u3069\u3001\u3053\u308c\u306f\u5165\u529b\u306e\u65b9\u3092\u56de\u3057\u3066\u3044\u308b\u3002\n\u307e\u3042\u3001\u56de\u3057\u3066\u3044\u308b\u3093\u3058\u3083\u306a\u304f\u3066 x\u8ef8\u53cd\u8ee2\u30fby\u8ef8\u53cd\u8ee2\u30fbxy\u5165\u308c\u66ff\u3048 \u306e\u4e09\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5b9f\u73fe\u3057\u3066\u308b\u3002\n\u30e1\u30bd\u30c3\u30c9\u540d\u304c\u30b0\u30c0\u30b0\u30c0\u3067\u3059\u3044\u307e\u305b\u3093\u3002", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg", "Ruby"]}