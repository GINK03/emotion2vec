{"context": "Python Machine Learning\u3092\u53c2\u8003\u306b\u8aac\u660e\u3059\u308b.\n\nXOR\u3068\u306f?\nXOR(exclusive OR)\u554f\u984c\u3068\u306f, \u6392\u4ed6\u7684\u8ad6\u7406\u548c\u306e\u3053\u3068. 2\u3064\u306e\u3046\u3061\u4e00\u3064\u3060\u3051\u304cTrue\u306a\u3089\u51fa\u529b\u306fTrue, \n\u305d\u308c\u4ee5\u5916(True\u3068True, False\u3068False)\u306a\u3089\u51fa\u529b\u306fFalse.\n\nXOR\u554f\u984c\u3092\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u7528\u3044\u3066\u518d\u73fe\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX_xor = np.random.randn(200, 2)\n# X_xor[:,0]>0, X_xor[:,1]>0\u306b\u5bfe\u3057\u3066, XOR\u3092\u6e80\u305f\u305b\u3070True, \u305d\u3046\u3067\u306a\u3051\u308c\u3070False\n# \u3064\u307e\u308a, x\u5ea7\u6a19y\u5ea7\u6a19\u306e\u3069\u3061\u3089\u304b\u4e00\u65b9\u306e\u307f\u304c\u6b63\u3067\u3042\u308c\u3070True, \u305d\u3046\u3067\u306a\u3051\u308c\u3070False\ny_xor = np.logical_xor(X_xor[:, 0] > 0, X_xor[:, 1] > 0)\n# True, False\u3092\u305d\u308c\u305e\u308c1, -1\u306b\u7f6e\u304d\u63db\u3048\u308b\ny_xor = np.where(y_xor, 1, -1)\nplt.scatter(X_xor[y_xor==1, 0], X_xor[y_xor==1, 1],\n    c='b', marker='x', label='1')\nplt.scatter(X_xor[y_xor==-1, 0], X_xor[y_xor==-1, 1],\n    c='r', marker='s', label='-1')\nplt.ylim(-3.0)\nplt.legend()\nplt.show()\n\n\u3053\u308c\u306b\u3088\u308a, \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\u304c\u751f\u6210\u3055\u308c\u308b.\n\n\u3053\u3053\u3067, \u4ee5\u524d\u306e\u8a18\u4e8b(1),(2)\u3068\u540c\u69d8, \n\u56f3\u3092\u63cf\u753b\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f.\n\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\n\ndef plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):\n    #setup marker generator and color map\n    markers = ('s', 'x', 'o', '^', 'v')\n    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n    cmap = ListedColormap(colors[:len(np.unique(y))])\n\n    # plot the decision surface\n    # \u6700\u5c0f\u5024, \u6700\u5927\u5024\u304b\u3089\u30a8\u30ea\u30a2\u306e\u9818\u57df\u3092\u5272\u308a\u51fa\u3059\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    # resolution\u306e\u9593\u9694\u3067\u533a\u5207\u3063\u305f\u9818\u57df\u3092\u5b9a\u7fa9\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n                            np.arange(x2_min, x2_max, resolution))\n    # print(xx1.shape)\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n\n    # plot all samples\n    X_test, y_test = X[test_idx, :], y[test_idx]\n    for idx, cl in enumerate(np.unique(y)):\n        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],\n                    alpha=0.8, c=cmap(idx),\n                    marker=markers[idx], label=cl)\n\n    # highlight test samples\n    if test_idx:\n        X_test, y_test = X[test_idx, :], y[test_idx]\n        plt.scatter(X_test[:, 0], X_test[:, 1], c='',\n            alpha=1.0, linewidth=1, marker='o',\n            s=55, label='test set')\n\n\n\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3(SVM)\n\u3053\u3053\u3067\u306f\u7de9\u548c\u5236\u7d04\u4e0b\u306eSVM\u30e2\u30c7\u30eb\u3092\u8003\u3048\u308b. \u3064\u307e\u308a, \u8d85\u5e73\u9762\u3067\u4e0a\u624b\u304f\u5206\u3051\u3089\u308c\u306a\u3044\u3068\u3053\u308d\u3092\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u7528\u3044\u3066\u76ee\u7684\u95a2\u6570\u306b\u53d6\u308a\u5165\u308c\u308b\u3053\u3068\u3092\u3059\u308b.\nmin $ \\frac{1}{2}||{\\bf w}||^{2} + C \\sum_{i} \\xi_{i} $\ns.t. $ y^{(i)}({\\bf w} \\cdot {\\bf x}^{(i)} - b) \\geq 1 - \\xi_{i} ; \\forall i,\\\n  \\xi_{i} \\geq 0 ; \\forall i.$\n$\\sum_{i} \\xi_{i}$ \u304c\u8aa4\u5206\u985e\u306e\u500b\u6570\u3092\u8868\u3059\u305f\u3081, \u81ea\u7136\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bfC\u304c\u8aa4\u5206\u985e\u3092\u3069\u308c\u307b\u3069\u8a31\u3059\u304b\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u306a\u308b.\n\u3064\u307e\u308a, C\u304c\u5927\u304d\u3044\u3068\u304d, \u8aa4\u5206\u985e\u3092\u8a31\u3055\u306a\u3044(\u3061\u3083\u3093\u3068\u5206\u985e\u3059\u308b),\n       C\u304c\u5c0f\u3055\u3044\u3068\u304d, \u4f8b\u5916\u7684\u306a\u8aa4\u5206\u985e\u3092\u7121\u8996\u3059\u308b.\n\nRBF\u30ab\u30fc\u30cd\u30eb\n\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a, \u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u3067\u306a\u3044\u3082\u306e\u3092\u5206\u985e\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b.\n\u4f4e\u6b21\u5143\u304b\u3089\u9ad8\u6b21\u5143\u306b\u98db\u3070\u3057, \u305d\u306e\u7a7a\u9593\u4e0a\u3067\u5e73\u9762\u5206\u96e2\u3057\u3066, \u3082\u3046\u4e00\u5ea6\u4f4e\u6b21\u5143\u306b\u843d\u3068\u3059\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3059\u308b.\nRBF(Radial Basis Function)\u30ab\u30fc\u30cd\u30eb\u306f, \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u3068\u3082\u547c\u3070\u308c, \u4ee5\u4e0b\u306e\u5f0f\u3067\u8868\u3055\u308c\u308b.\nk({\\bf x}^{(i)}, {\\bf x}^{(j)}) = \\exp \\Biggl( - \\gamma || {\\bf x}^{(i)} - {\\bf x}^{(j)} || \\Biggr)\n$${k({\\bf x}^{(i)}, {\\bf x}^{(j)}) = \\exp \\Biggl( - \\gamma || {\\bf x}^{(i)} - {\\bf x}^{(j)} || \\Biggr)\n}$$\n\u5b9f\u306f\u4e0a\u306eRBF\u30ab\u30fc\u30cd\u30eb\u306f ${\\bf x}^{(i)}$ \u3068 ${\\bf x}^{(j)}$ \u306e\u985e\u4f3c\u5ea6\u3092\u6e2c\u308b\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b.\nx\u304c0\u304b\u30895\u306e\u9818\u57df\u3067 $y = exp(-x)$ \u3092\u63cf\u753b\u3057\u3066\u307f\u308b.\n\nimport numpy as np\nimport math\n\nx_arr = np.arange(0, 5, 0.01)\ny = [math.exp(-x) for x in x_arr]\nplt.figure()\nplt.plot(x_arr, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n\n\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\u304c\u63cf\u753b\u3055\u308c\u308b.\n\n\u3064\u307e\u308a, exp\u306e\u4e2d\u8eab\u304c0\u306b\u8fd1\u3044( ${\\bf x}^{(i)}$ \u3068 ${\\bf x}^{(j)}$ \u304c\u307b\u307c\u540c\u3058)\u3068\u304d,\n$ k({\\bf x}^{(i)}, {\\bf x}^{(j)}) $ \u306f1\u306e\u5024\u3092\u3068\u308a,\nexp\u306e\u4e2d\u8eab\u304c\u5927\u304d\u306a\u30de\u30a4\u30ca\u30b9\u306b\u306a\u308b($ {\\bf x}^{(i)} $ \u3068 $ {\\bf x}^{(j)} $\u304c\u96e2\u308c\u3066\u3044\u308b)\u3068\u304d,\n$ k({\\bf x}^{(i)}, {\\bf x}^{(j)}) $ \u306f0\u306b\u8fd1\u3065\u304f.\n\u3088\u3063\u3066, \u985e\u4f3c\u5ea6\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b.\n\u3067\u306f\u5b9f\u969b\u306bRBF\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u3063\u3066\u4e0a\u3067\u3064\u304f\u3063\u305fXOR\u3092\u5206\u985e\u3057\u3066\u307f\u308b.\n\ngamma=0.10, C=10.0\n\n\nfrom sklearn.svm import SVC\nsvm = SVC(kernel='rbf', gamma=0.10, C=10.0)\nsvm.fit(X_xor, y_xor)\nplot_decision_regions(X_xor, y_xor, classifier=svm)\nplt.legend(loc='upper left')\nplt.show()\n\n\u3059\u308b\u3068, \u4ee5\u4e0b\u306e\u56f3\u304c\u51fa\u529b\u3055\u308c\u308b.\n\n\u3053\u3053\u3067svm\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u305f\u30d1\u30e9\u30e1\u30fc\u30bfC\u306f\u8aa4\u5206\u985e\u306b\u5bfe\u3059\u308b\u30da\u30ca\u30eb\u30c6\u30a3\u3067\u3042\u308a, gamma\u306f\u4e0a\u8a18\u306eRBF\u30ab\u30fc\u30cd\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b.\n\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u8003\u5bdf\u3059\u308b. \u3053\u3053\u3067\u306fgamma\u306e\u5024\u3092\u3044\u308d\u3044\u308d\u5909\u3048\u3066\u307f\u308b.\n\ngamma=1.0, C=10.0\n\nsvm = SVC(kernel='rbf', gamma=1.0, C=10.0)\n\n\u3059\u308b\u3068, \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b. \n\n\u5883\u754c\u304c\u5148\u307b\u3069\u3088\u308a\u8907\u96d1\u306b\u306a\u3063\u3066\u3044\u308b. \u6b21\u306fgamma=100\u3068\u3055\u3089\u306b\u5927\u304d\u304f\u3057\u3066\u307f\u308b.\n\ngamma=100, C=10.0\n\nsvm = SVC(kernel='rbf', gamma=1.0, C=10.0)\n\n\n\u8907\u96d1\u306b\u306a\u308a\u3059\u304e\u3066\u6c4e\u5316\u304c\u3067\u304d\u3066\u3044\u306a\u3044. \u3053\u308c\u3082\u8abf\u7bc0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308b.\n\n\u53c2\u8003\nPython Machine Learning\n[Python Machine Learning](https://github.com/rasbt/python-machine-learning-book)\u3092\u53c2\u8003\u306b\u8aac\u660e\u3059\u308b.\n\n\n### XOR\u3068\u306f?\nXOR(exclusive OR)\u554f\u984c\u3068\u306f, \u6392\u4ed6\u7684\u8ad6\u7406\u548c\u306e\u3053\u3068. 2\u3064\u306e\u3046\u3061\u4e00\u3064\u3060\u3051\u304cTrue\u306a\u3089\u51fa\u529b\u306fTrue, \n\u305d\u308c\u4ee5\u5916(True\u3068True, False\u3068False)\u306a\u3089\u51fa\u529b\u306fFalse.\n\n\n### XOR\u554f\u984c\u3092\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u7528\u3044\u3066\u518d\u73fe\n\n```py3\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX_xor = np.random.randn(200, 2)\n# X_xor[:,0]>0, X_xor[:,1]>0\u306b\u5bfe\u3057\u3066, XOR\u3092\u6e80\u305f\u305b\u3070True, \u305d\u3046\u3067\u306a\u3051\u308c\u3070False\n# \u3064\u307e\u308a, x\u5ea7\u6a19y\u5ea7\u6a19\u306e\u3069\u3061\u3089\u304b\u4e00\u65b9\u306e\u307f\u304c\u6b63\u3067\u3042\u308c\u3070True, \u305d\u3046\u3067\u306a\u3051\u308c\u3070False\ny_xor = np.logical_xor(X_xor[:, 0] > 0, X_xor[:, 1] > 0)\n# True, False\u3092\u305d\u308c\u305e\u308c1, -1\u306b\u7f6e\u304d\u63db\u3048\u308b\ny_xor = np.where(y_xor, 1, -1)\nplt.scatter(X_xor[y_xor==1, 0], X_xor[y_xor==1, 1],\n    c='b', marker='x', label='1')\nplt.scatter(X_xor[y_xor==-1, 0], X_xor[y_xor==-1, 1],\n    c='r', marker='s', label='-1')\nplt.ylim(-3.0)\nplt.legend()\nplt.show()\n```\n\n\u3053\u308c\u306b\u3088\u308a, \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\u304c\u751f\u6210\u3055\u308c\u308b.\n\n![xor.png](https://qiita-image-store.s3.amazonaws.com/0/70855/a9342296-f91f-9537-fdb1-2f26618c7150.png)\n\n\n\u3053\u3053\u3067, \u4ee5\u524d\u306e\u8a18\u4e8b[(1)](http://qiita.com/gash717/items/cd9b97a9d26f6ec90df3),[(2)](http://qiita.com/gash717/items/5ad68ed192f802c6ad36)\u3068\u540c\u69d8, \n\u56f3\u3092\u63cf\u753b\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f.\n\n```py3\n\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\n\ndef plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):\n    #setup marker generator and color map\n    markers = ('s', 'x', 'o', '^', 'v')\n    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n    cmap = ListedColormap(colors[:len(np.unique(y))])\n\n    # plot the decision surface\n    # \u6700\u5c0f\u5024, \u6700\u5927\u5024\u304b\u3089\u30a8\u30ea\u30a2\u306e\u9818\u57df\u3092\u5272\u308a\u51fa\u3059\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    # resolution\u306e\u9593\u9694\u3067\u533a\u5207\u3063\u305f\u9818\u57df\u3092\u5b9a\u7fa9\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n                            np.arange(x2_min, x2_max, resolution))\n    # print(xx1.shape)\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n\n    # plot all samples\n    X_test, y_test = X[test_idx, :], y[test_idx]\n    for idx, cl in enumerate(np.unique(y)):\n        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],\n                    alpha=0.8, c=cmap(idx),\n                    marker=markers[idx], label=cl)\n\n    # highlight test samples\n    if test_idx:\n        X_test, y_test = X[test_idx, :], y[test_idx]\n        plt.scatter(X_test[:, 0], X_test[:, 1], c='',\n            alpha=1.0, linewidth=1, marker='o',\n            s=55, label='test set')\n```\n\n### \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3(SVM)\n\u3053\u3053\u3067\u306f\u7de9\u548c\u5236\u7d04\u4e0b\u306eSVM\u30e2\u30c7\u30eb\u3092\u8003\u3048\u308b. \u3064\u307e\u308a, \u8d85\u5e73\u9762\u3067\u4e0a\u624b\u304f\u5206\u3051\u3089\u308c\u306a\u3044\u3068\u3053\u308d\u3092\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u7528\u3044\u3066\u76ee\u7684\u95a2\u6570\u306b\u53d6\u308a\u5165\u308c\u308b\u3053\u3068\u3092\u3059\u308b.\n\nmin $ \\frac{1}{2}||{\\bf w}||^{2} + C \\sum_{i} \\xi_{i} $\n\ns.t. $ y^{(i)}({\\bf w} \\cdot {\\bf x}^{(i)} - b) \\geq 1 - \\xi_{i} ; \\forall i,\\\\\n  \\xi_{i} \\geq 0 ; \\forall i.$\n\n\n$\\sum_{i} \\xi_{i}$ \u304c\u8aa4\u5206\u985e\u306e\u500b\u6570\u3092\u8868\u3059\u305f\u3081, \u81ea\u7136\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bfC\u304c\u8aa4\u5206\u985e\u3092\u3069\u308c\u307b\u3069\u8a31\u3059\u304b\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u306a\u308b.\n\u3064\u307e\u308a, C\u304c\u5927\u304d\u3044\u3068\u304d, \u8aa4\u5206\u985e\u3092\u8a31\u3055\u306a\u3044(\u3061\u3083\u3093\u3068\u5206\u985e\u3059\u308b),\n       C\u304c\u5c0f\u3055\u3044\u3068\u304d, \u4f8b\u5916\u7684\u306a\u8aa4\u5206\u985e\u3092\u7121\u8996\u3059\u308b.\n\n\n### RBF\u30ab\u30fc\u30cd\u30eb\n\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a, \u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u3067\u306a\u3044\u3082\u306e\u3092\u5206\u985e\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b.\n\u4f4e\u6b21\u5143\u304b\u3089\u9ad8\u6b21\u5143\u306b\u98db\u3070\u3057, \u305d\u306e\u7a7a\u9593\u4e0a\u3067\u5e73\u9762\u5206\u96e2\u3057\u3066, \u3082\u3046\u4e00\u5ea6\u4f4e\u6b21\u5143\u306b\u843d\u3068\u3059\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3059\u308b.\nRBF(Radial Basis Function)\u30ab\u30fc\u30cd\u30eb\u306f, \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u3068\u3082\u547c\u3070\u308c, \u4ee5\u4e0b\u306e\u5f0f\u3067\u8868\u3055\u308c\u308b.\n\n```math\nk({\\bf x}^{(i)}, {\\bf x}^{(j)}) = \\exp \\Biggl( - \\gamma || {\\bf x}^{(i)} - {\\bf x}^{(j)} || \\Biggr)\n```\n\n\u5b9f\u306f\u4e0a\u306eRBF\u30ab\u30fc\u30cd\u30eb\u306f ${\\bf x}^{(i)}$ \u3068 ${\\bf x}^{(j)}$ \u306e\u985e\u4f3c\u5ea6\u3092\u6e2c\u308b\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b.\nx\u304c0\u304b\u30895\u306e\u9818\u57df\u3067 $y = exp(-x)$ \u3092\u63cf\u753b\u3057\u3066\u307f\u308b.\n\n```py3\n\nimport numpy as np\nimport math\n\nx_arr = np.arange(0, 5, 0.01)\ny = [math.exp(-x) for x in x_arr]\nplt.figure()\nplt.plot(x_arr, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n```\n\n\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\u304c\u63cf\u753b\u3055\u308c\u308b.\n\n![rbf_kernel.png](https://qiita-image-store.s3.amazonaws.com/0/70855/c712d946-b5f9-add8-8e28-2a7579fbeae5.png)\n\n\n\u3064\u307e\u308a, exp\u306e\u4e2d\u8eab\u304c0\u306b\u8fd1\u3044( ${\\bf x}^{(i)}$ \u3068 ${\\bf x}^{(j)}$ \u304c\u307b\u307c\u540c\u3058)\u3068\u304d,\n$ k({\\bf x}^{(i)}, {\\bf x}^{(j)}) $ \u306f1\u306e\u5024\u3092\u3068\u308a,\nexp\u306e\u4e2d\u8eab\u304c\u5927\u304d\u306a\u30de\u30a4\u30ca\u30b9\u306b\u306a\u308b($ {\\bf x}^{(i)} $ \u3068 $ {\\bf x}^{(j)} $\u304c\u96e2\u308c\u3066\u3044\u308b)\u3068\u304d,\n$ k({\\bf x}^{(i)}, {\\bf x}^{(j)}) $ \u306f0\u306b\u8fd1\u3065\u304f.\n\u3088\u3063\u3066, \u985e\u4f3c\u5ea6\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b.\n\n\n\u3067\u306f\u5b9f\u969b\u306bRBF\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u3063\u3066\u4e0a\u3067\u3064\u304f\u3063\u305fXOR\u3092\u5206\u985e\u3057\u3066\u307f\u308b.\n\n* gamma=0.10, C=10.0\n\n```py3\n\nfrom sklearn.svm import SVC\nsvm = SVC(kernel='rbf', gamma=0.10, C=10.0)\nsvm.fit(X_xor, y_xor)\nplot_decision_regions(X_xor, y_xor, classifier=svm)\nplt.legend(loc='upper left')\nplt.show()\n```\n\n\u3059\u308b\u3068, \u4ee5\u4e0b\u306e\u56f3\u304c\u51fa\u529b\u3055\u308c\u308b.\n\n![gamma_0.1_C_10.0.png](https://qiita-image-store.s3.amazonaws.com/0/70855/f55a9509-7fcb-342b-58ae-c4af6a799e70.png)\n\n\n\u3053\u3053\u3067svm\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u305f\u30d1\u30e9\u30e1\u30fc\u30bfC\u306f\u8aa4\u5206\u985e\u306b\u5bfe\u3059\u308b\u30da\u30ca\u30eb\u30c6\u30a3\u3067\u3042\u308a, gamma\u306f\u4e0a\u8a18\u306eRBF\u30ab\u30fc\u30cd\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b.\n\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u8003\u5bdf\u3059\u308b. \u3053\u3053\u3067\u306fgamma\u306e\u5024\u3092\u3044\u308d\u3044\u308d\u5909\u3048\u3066\u307f\u308b.\n\n* gamma=1.0, C=10.0\n\n```\nsvm = SVC(kernel='rbf', gamma=1.0, C=10.0)\n```\n\n\u3059\u308b\u3068, \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b. \n\n![gamma_1.0_C_10.0.png](https://qiita-image-store.s3.amazonaws.com/0/70855/cfccc02a-8d39-29af-f22f-55b4bc5b0590.png)\n\n\n\u5883\u754c\u304c\u5148\u307b\u3069\u3088\u308a\u8907\u96d1\u306b\u306a\u3063\u3066\u3044\u308b. \u6b21\u306fgamma=100\u3068\u3055\u3089\u306b\u5927\u304d\u304f\u3057\u3066\u307f\u308b.\n\n\n\n* gamma=100, C=10.0\n\n```\nsvm = SVC(kernel='rbf', gamma=1.0, C=10.0)\n```\n\n![gamma_100.0_C_10.0.png](https://qiita-image-store.s3.amazonaws.com/0/70855/dee4575d-a1ba-2af6-a680-9cf3f40d323b.png)\n\n\n\u8907\u96d1\u306b\u306a\u308a\u3059\u304e\u3066\u6c4e\u5316\u304c\u3067\u304d\u3066\u3044\u306a\u3044. \u3053\u308c\u3082\u8abf\u7bc0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308b.\n\n## \u53c2\u8003\n[Python Machine Learning](https://github.com/rasbt/python-machine-learning-book)\n", "tags": ["Python", "scikit-learn", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning"]}