{"context": "redigo\u306eredis.Pool\u306fredis.Conn\u3068\u306f\u7570\u306a\u308a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u306f\u306a\u304f\u69cb\u9020\u4f53\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059.\n\u305d\u308c\u3068redigomock\u306fredis.Pool\u3092\u751f\u6210\u3059\u308b\u6a5f\u80fd\u3092\u6709\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304b\u3089\u3071\u3063\u3068\u898b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3060\u308d\u3046\u306a\u3063\u3068\u5224\u65ad\u3057\u307e\u3057\u305f\u304c\n\u3088\u304f\u3088\u304f\u8003\u3048\u3066\u307f\u308b\u3068redis.Pool\u3067\u5229\u7528\u3059\u308b\u95a2\u6570\u7fa4\u3092\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u6c17\u3065\u304d\u304c\u3042\u3063\u305f\u306e\u3067\u5171\u6709\u3057\u307e\u3059.\n\u4ee5\u4e0bExample\n// service.go\n\npackage service\n\nimport (...) // \u7701\u7565\n\ntype RedigoPool interface {\n    Get() redis.Conn\n    Close() error\n}\n\ntype ExampleService struct {\n    pool RedigoPool // *redis.Pool\u3092\u76f4\u63a5\u5b9a\u7fa9\u305b\u305a, RedigoPool\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5229\u7528\u3059\u308b\n}\n\nfunc (s *ExampleService) HmSetWithExpire(key string, a, b int64, expireSeconds uint) (interface{}, error) {\n    redisConn := s.pool.Get()\n    defer redisConn.Close()\n\n    redisConn.Send(\"MULTI\")\n    redisConn.Send(\"HMSET\", key, \"a\", a, \"b\", b)\n    redisConn.Send(\"EXPIRE\", key, expireSeconds)\n\n    reply, err := redisConn.Do(\"EXEC\")\n    if err != nil {\n        return nil, err\n    }\n    return reply, nil\n}\n\n\n// service_test.go\n\npackage service\n\nimport (...) // \u7701\u7565\n\n// redigoMockPool redigomock\u7528RedisPool\ntype redigoMockPool struct {\n    conn redis.Conn\n}\n\nfunc (m redigoMockPool) Get() redis.Conn {\n    return m.conn\n}\n\nfunc (m redigoMockPool) Close() error {\n    return m.conn.Close()\n}\n\nfunc TestExampleService_HmSetWithExpire(t *testing.T) {\n    mockConn := redigomock.NewConn()\n    mockPool := &redigoMockPool{\n        conn: mockConn,\n    }\n\n    svc := ExampleService{\n        pool: mockPool,\n    }\n\n    key := \"test-uhyouhyo!\"\n    a := int64(1)\n    b := int64(2)\n    expireSeconds := uint(3200)\n\n    cmd1 := mockConn.Command(\"MULTI\")\n    cmd2 := mockConn.Command(\"HMSET\", key, \"a\", a, \"b\", b)\n    cmd3 := mockConn.Command(\"EXPIRE\", key, expireSeconds)\n    cmd4 := mockConn.Command(\"EXEC\").Expect([]interface{}{\"OK\", \"OK\"})\n\n    _, err := svc.HmSetWithExpire(key, a, b, expireSeconds)\n    if err != nil {\n        t.Error(err)\n    }\n\n    if counter := mockConn.Stats(cmd1); counter != 1 {\n        t.Errorf(\"Expected cmd1 to be called once but was called %d times\", counter)\n    }\n\n    if counter := mockConn.Stats(cmd2); counter != 1 {\n        t.Errorf(\"Expected cmd2 to be called once but was called %d times\", counter)\n    }\n\n    if counter := mockConn.Stats(cmd3); counter != 1 {\n        t.Errorf(\"Expected cmd3 to be called once but was called %d times\", counter)\n    }\n\n    if counter := mockConn.Stats(cmd4); counter != 1 {\n        t.Errorf(\"Expected cmd4 to be called once but was called %d times\", counter)\n    }\n}\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306eRedigoPool\u304c\u5473\u564c\u3067\u4e88\u3081redis.Pool\u3067\u5229\u7528\u3059\u308b\u95a2\u6570\u3092\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u3051\u3070, \u5272\u3068\u3055\u304f\u3063\u3068Mock\u3092\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059.\n\u3061\u306a\u307f\u306bredis.Pool#Dial\u3067redigomock.Conn\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u306f? \u3063\u3068\u304a\u3082\u3046\u65b9\u3082\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u304c,\nredis.Conn\u3092\u53d6\u5f97\u3059\u308bredis.Pool#Get\u306f\u8907\u96d1\u306a\u3053\u3068\u3092\u3084\u3063\u3066\u308b\u306e\u3067\u3046\u307e\u3044\u3053\u3068redigomock.Conn\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093.\n\nRef\n\nredigo\nredigomock\n\u5143\u8a18\u4e8b\n\nredigo\u306eredis.Pool\u306fredis.Conn\u3068\u306f\u7570\u306a\u308a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u306f\u306a\u304f\u69cb\u9020\u4f53\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059.\n\n\u305d\u308c\u3068redigomock\u306fredis.Pool\u3092\u751f\u6210\u3059\u308b\u6a5f\u80fd\u3092\u6709\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304b\u3089\u3071\u3063\u3068\u898b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3060\u308d\u3046\u306a\u3063\u3068\u5224\u65ad\u3057\u307e\u3057\u305f\u304c\n\n\u3088\u304f\u3088\u304f\u8003\u3048\u3066\u307f\u308b\u3068redis.Pool\u3067\u5229\u7528\u3059\u308b\u95a2\u6570\u7fa4\u3092\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u6c17\u3065\u304d\u304c\u3042\u3063\u305f\u306e\u3067\u5171\u6709\u3057\u307e\u3059.\n\n\u4ee5\u4e0bExample\n\n```go\n// service.go\n\npackage service\n\nimport (...) // \u7701\u7565\n\ntype RedigoPool interface {\n\tGet() redis.Conn\n\tClose() error\n}\n\ntype ExampleService struct {\n\tpool RedigoPool // *redis.Pool\u3092\u76f4\u63a5\u5b9a\u7fa9\u305b\u305a, RedigoPool\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5229\u7528\u3059\u308b\n}\n\nfunc (s *ExampleService) HmSetWithExpire(key string, a, b int64, expireSeconds uint) (interface{}, error) {\n\tredisConn := s.pool.Get()\n\tdefer redisConn.Close()\n\n\tredisConn.Send(\"MULTI\")\n\tredisConn.Send(\"HMSET\", key, \"a\", a, \"b\", b)\n\tredisConn.Send(\"EXPIRE\", key, expireSeconds)\n\n\treply, err := redisConn.Do(\"EXEC\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn reply, nil\n}\n\n```\n\n```go\n// service_test.go\n\npackage service\n\nimport (...) // \u7701\u7565\n\n// redigoMockPool redigomock\u7528RedisPool\ntype redigoMockPool struct {\n\tconn redis.Conn\n}\n\nfunc (m redigoMockPool) Get() redis.Conn {\n\treturn m.conn\n}\n\nfunc (m redigoMockPool) Close() error {\n\treturn m.conn.Close()\n}\n\nfunc TestExampleService_HmSetWithExpire(t *testing.T) {\n\tmockConn := redigomock.NewConn()\n\tmockPool := &redigoMockPool{\n\t\tconn: mockConn,\n\t}\n\n\tsvc := ExampleService{\n\t\tpool: mockPool,\n\t}\n\n\tkey := \"test-uhyouhyo!\"\n\ta := int64(1)\n\tb := int64(2)\n\texpireSeconds := uint(3200)\n\n\tcmd1 := mockConn.Command(\"MULTI\")\n\tcmd2 := mockConn.Command(\"HMSET\", key, \"a\", a, \"b\", b)\n\tcmd3 := mockConn.Command(\"EXPIRE\", key, expireSeconds)\n\tcmd4 := mockConn.Command(\"EXEC\").Expect([]interface{}{\"OK\", \"OK\"})\n\n\t_, err := svc.HmSetWithExpire(key, a, b, expireSeconds)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\t\n\tif counter := mockConn.Stats(cmd1); counter != 1 {\n\t\tt.Errorf(\"Expected cmd1 to be called once but was called %d times\", counter)\n\t}\n\n\tif counter := mockConn.Stats(cmd2); counter != 1 {\n\t\tt.Errorf(\"Expected cmd2 to be called once but was called %d times\", counter)\n\t}\n\n\tif counter := mockConn.Stats(cmd3); counter != 1 {\n\t\tt.Errorf(\"Expected cmd3 to be called once but was called %d times\", counter)\n\t}\n\n\tif counter := mockConn.Stats(cmd4); counter != 1 {\n\t\tt.Errorf(\"Expected cmd4 to be called once but was called %d times\", counter)\n\t}\n}\n```\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306e``RedigoPool``\u304c\u5473\u564c\u3067\u4e88\u3081redis.Pool\u3067\u5229\u7528\u3059\u308b\u95a2\u6570\u3092\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u3051\u3070, \u5272\u3068\u3055\u304f\u3063\u3068Mock\u3092\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059.\n\n\u3061\u306a\u307f\u306b``redis.Pool#Dial``\u3067``redigomock.Conn``\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u306f? \u3063\u3068\u304a\u3082\u3046\u65b9\u3082\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u304c,\n\n``redis.Conn``\u3092\u53d6\u5f97\u3059\u308b``redis.Pool#Get``\u306f\u8907\u96d1\u306a\u3053\u3068\u3092\u3084\u3063\u3066\u308b\u306e\u3067\u3046\u307e\u3044\u3053\u3068``redigomock.Conn``\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093.\n\n###### Ref\n\n- [redigo](https://godoc.org/github.com/garyburd/redigo/redis)\n- [redigomock](https://godoc.org/github.com/rafaeljusto/redigomock)\n- [\u5143\u8a18\u4e8b](https://blog.pyyoshi.com/2016/12/08/redigonopooltoredigomockwoli-yong-suruji-nozhu-yi-dian/)\n", "tags": ["Go", "Redis"]}