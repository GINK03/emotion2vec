{"context": " More than 1 year has passed since last update.\nmakeNums.fs\nopen System\n\nlet rec dist e = function\n  | [] -> [[e]]\n  | x::xs' as xs -> (e::xs)::[for xs in dist e xs' -> x::xs]\n\nlet rec perm n xs =\n  if n = 0 then\n    [[]]\n  else\n    match xs with\n    | []     -> []\n    | x::xs' -> (perm n xs') @ (List.collect (dist x) (perm (n-1) xs'))\n\nlet turnSix xs =\n  let add x xs = if x = 6 then [6::xs;9::xs] else [x::xs]\n  List.foldBack (List.collect << add) xs [[]]\n\nlet toList (str:string) =\n  str.ToCharArray()\n  |> Array.map (fun c -> int c - int '0')\n  |> Array.toList\n\nlet toString =\n  Seq.map (fun x -> x.ToString()) >> String.Concat\n\nlet solve (str:string) =\n  let a = str.Split([|':'|])\n  let n = Int32.Parse(a.[0])\n  let xs = toList a.[1]\n  let xss =\n    seq {\n      for ys in perm 4 xs do\n      for zs in turnSix ys do\n      if List.head zs = 0 then () else yield zs\n    }\n    |> Seq.distinct\n    |> Seq.toArray\n    |> Array.sort\n  if n <= Array.length xss then\n    toString xss.[n-1]\n  else\n    \"-\"\n\n(* for test *)\n\ntype TestResult = Success | Failure\n\nlet test target expected =\n  let actual = solve target\n  printfn \"%A\" (if expected = actual then Success else Failure)\n\n[<EntryPoint>]\nlet main args =\n  test \"13:01167\" \"1109\"\n  test \"1:1234\" \"1234\"\n  test \"2:1234\" \"1243\"\n  test \"7:1234\" \"2134\"\n  test \"24:1234\" \"4321\"\n  test \"25:1234\" \"-\"\n  test \"2:1116\" \"1119\"\n  test \"2:0116\" \"1019\"\n  test \"3:6666\" \"6696\"\n  test \"16:6666\" \"9999\"\n  test \"10:01267\" \"1097\"\n  test \"14:111167\" \"1671\"\n  test \"1:1111\" \"1111\"\n  test \"2:1111\" \"-\"\n  test \"1:666633\" \"3366\"\n  test \"72:666611\" \"9999\"\n  test \"73:666622\" \"-\"\n  test \"1:666600\" \"6006\"\n  test \"52:666600\" \"9999\"\n  test \"53:666600\" \"-\"\n  test \"25:06688\" \"8086\"\n  test \"93:02566\" \"6502\"\n  test \"11:06688\" \"6809\"\n  test \"169:01268\" \"9801\"\n  test \"174:01268\" \"9821\"\n  test \"66:012288\" \"8201\"\n  0\n\n\n```fsharp:makeNums.fs\nopen System\n\nlet rec dist e = function\n  | [] -> [[e]]\n  | x::xs' as xs -> (e::xs)::[for xs in dist e xs' -> x::xs]\n\nlet rec perm n xs =\n  if n = 0 then\n    [[]]\n  else\n    match xs with\n    | []     -> []\n    | x::xs' -> (perm n xs') @ (List.collect (dist x) (perm (n-1) xs'))\n\nlet turnSix xs =\n  let add x xs = if x = 6 then [6::xs;9::xs] else [x::xs]\n  List.foldBack (List.collect << add) xs [[]]\n\nlet toList (str:string) =\n  str.ToCharArray()\n  |> Array.map (fun c -> int c - int '0')\n  |> Array.toList\n\nlet toString =\n  Seq.map (fun x -> x.ToString()) >> String.Concat\n\nlet solve (str:string) =\n  let a = str.Split([|':'|])\n  let n = Int32.Parse(a.[0])\n  let xs = toList a.[1]\n  let xss =\n    seq {\n      for ys in perm 4 xs do\n      for zs in turnSix ys do\n      if List.head zs = 0 then () else yield zs\n    }\n    |> Seq.distinct\n    |> Seq.toArray\n    |> Array.sort\n  if n <= Array.length xss then\n    toString xss.[n-1]\n  else\n    \"-\"\n\n(* for test *)\n\ntype TestResult = Success | Failure\n\nlet test target expected =\n  let actual = solve target\n  printfn \"%A\" (if expected = actual then Success else Failure)\n\n[<EntryPoint>]\nlet main args =\n  test \"13:01167\" \"1109\"\n  test \"1:1234\" \"1234\"\n  test \"2:1234\" \"1243\"\n  test \"7:1234\" \"2134\"\n  test \"24:1234\" \"4321\"\n  test \"25:1234\" \"-\"\n  test \"2:1116\" \"1119\"\n  test \"2:0116\" \"1019\"\n  test \"3:6666\" \"6696\"\n  test \"16:6666\" \"9999\"\n  test \"10:01267\" \"1097\"\n  test \"14:111167\" \"1671\"\n  test \"1:1111\" \"1111\"\n  test \"2:1111\" \"-\"\n  test \"1:666633\" \"3366\"\n  test \"72:666611\" \"9999\"\n  test \"73:666622\" \"-\"\n  test \"1:666600\" \"6006\"\n  test \"52:666600\" \"9999\"\n  test \"53:666600\" \"-\"\n  test \"25:06688\" \"8086\"\n  test \"93:02566\" \"6502\"\n  test \"11:06688\" \"6809\"\n  test \"169:01268\" \"9801\"\n  test \"174:01268\" \"9821\"\n  test \"66:012288\" \"8201\"\n  0\n```", "tags": ["F#", "\u3069\u3046\u66f8\u304f", "yhpg"]}