{"context": " More than 1 year has passed since last update.\n\nto excel\n\npandas_excel_example.py\nimport pandas as pd\nimport numpy as np\n\n\nwriter = pd.ExcelWriter(\"excel_file_path.xlsx\")\n\ndf = pd.DataFrame(np.random.randn(50, 2), columns=list('ab'))\ndf.to_excel(writer, sheet_name=\"sheet_name1\", index=False)\ndf.to_excel(writer, sheet_name=\"sheet_name2\", index=False)\n\nwriter.save()\n\n\n\u2010 \u4f7f\u3046\u3060\u3051\u306a\u3089\u3053\u3053\u307e\u3067\u3067\u3088\u304b\u3063\u305f\u3093\u3060\u3051\u3069\n- io\u304c\u7d61\u3080\u306e\u306b\u306a\u3093\u3067context manager\u304c\u4e00\u5207\u51fa\u3066\u3053\u306a\u3044\u306e\u304b\u306a\uff1f\u3068\u601d\u3044\u8abf\u3079\u3066\u307f\u305f\u3002\n- \u7d50\u679cwith\u3068\u4e00\u7dd2\u306b\u4f7f\u3048\u308b\u306e\u3067\u3001\u4f7f\u304a\u3046\u3002\u52dd\u624b\u306bsave\u3055\u308c\u308b\u3088\u3046\u306b\u3082\u306a\u308b\n\npandas_excel_cm_example.py\nwith pd.ExcelWriter(\"excel_file_path.xlsx\") as witer:\n    df.to_excel(writer, sheet_name=\"sheet_name1\", index=False)\n    df.to_excel(writer, sheet_name=\"sheet_name2\", index=False)\n\n\n\u4ee5\u4e0b\u8abf\u67fb\u904e\u7a0b\n\nenter and exit\n\npandas_excel_enter_exit.py\nhelp(writer.__exit__)\nHelp on method __exit__ in module pandas.io.excel:\n__exit__(exc_type, exc_value, traceback) method of pandas.io.excel._XlsxWriter instance\n\n\nhelp(writer.__enter__)\nHelp on method __enter__ in module pandas.io.excel:\n__enter__() method of pandas.io.excel._XlsxWriter instance\n    # Allow use as a contextmanager\n\n\n[a for a in dir(writer) if not a.startswith('_')]\n['book',\n 'check_extension',\n 'close',\n 'cur_sheet',\n 'curr_sheet',\n 'date_format',\n 'datetime_format',\n 'engine',\n 'path',\n 'save',\n 'sheets',\n 'supported_extensions',\n 'write_cells']\n\n\n\npandas excel module and base excel module\n\n\u629c\u7c8b\n\u62bd\u8c61\u30af\u30e9\u30b9\u3068xlsx\u5b9f\u88c5\u30af\u30e9\u30b9\u304c\u3042\u308b\n\u62bd\u8c61\u30af\u30e9\u30b9\u5185\u3067context manager\u3068\u3057\u3066\u306eInterface\u304c\u6c7a\u3081\u3066\u3042\u308b\n\u5b9f\u88c5\u30af\u30e9\u30b9\u5185\u3067save\u5b9f\u88c5\n\u5b9f\u969b\u306fimport\u3057\u3066\u3044\u308bmodule\u306b\u307e\u304b\u305b\u3066\u3044\u308b\n\u6700\u7d42\u7684\u306b\u306fzip\u30d5\u30a1\u30a4\u30ebclose\u3057\u3066\u3044\u308b\u304c\u3001\u3053\u3053\u3067\u306fwith\u304c\u306a\u3044\u2026\n\n\npandas_excel_module_and_base_excel_module.py\n# pandas/io/excel.py\n@add_metaclass(abc.ABCMeta)\nclass ExcelWriter(object):\n    @abc.abstractmethod\n    def save(self):\n        pass\n\n    # Allow use as a contextmanager\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.close()\n\n    def close(self):\n        \"\"\"synonym for save, to make it more file-like\"\"\"\n        return self.save()\n\nclass _XlsxWriter(ExcelWriter):\n    def __init__(self, ):\n        # Use the xlsxwriter module as the Excel writer.\n        import xlsxwriter\n        # https://pypi.python.org/pypi/XlsxWriter\n        # https://github.com/jmcnamara/XlsxWriter\n\n        super(_XlsxWriter, self).__init__\n        self.book = xlsxwriter.Workbook(path, **engine_kwargs)\n\n    def save(self):\n        \"\"\"\n        Save workbook to disk.\n        \"\"\"\n        return self.book.close()\n\n# xlsxwriter/__init__.py\nfrom .workbook import Workbook\n\n# xlsxwriter/workbook.py\nclass Workbook(xmlwriter.XMLwriter):\n    def __enter__(self):\n        \"\"\"Return self object to use with \"with\" statement.\"\"\"\n        return self\n\n    def __exit__(self, type, value, traceback):\n        \"\"\"Close workbook when exiting \"with\" statement.\"\"\"\n        self.close()\n\n    def close(self):\n        \"\"\"\n        Call finalization code and close file.\n        Args:\n            None.\n        Returns:\n            Nothing.\n        \"\"\"\n        if not self.fileclosed:\n            self.fileclosed = 1\n            self._store_workbook()\n\n    def _store_workbook(self):\n        xlsx_file = ZipFile(self.filename, \"w\", compression=ZIP_DEFLATED,\n                            allowZip64=self.allow_zip64)\n        xlsx_file.close()\n\n\n## to excel\n```py3:pandas_excel_example.py\nimport pandas as pd\nimport numpy as np\n\n\nwriter = pd.ExcelWriter(\"excel_file_path.xlsx\")\n\ndf = pd.DataFrame(np.random.randn(50, 2), columns=list('ab'))\ndf.to_excel(writer, sheet_name=\"sheet_name1\", index=False)\ndf.to_excel(writer, sheet_name=\"sheet_name2\", index=False)\n\nwriter.save()\n```\n\n\u2010 \u4f7f\u3046\u3060\u3051\u306a\u3089\u3053\u3053\u307e\u3067\u3067\u3088\u304b\u3063\u305f\u3093\u3060\u3051\u3069\n- io\u304c\u7d61\u3080\u306e\u306b\u306a\u3093\u3067context manager\u304c\u4e00\u5207\u51fa\u3066\u3053\u306a\u3044\u306e\u304b\u306a\uff1f\u3068\u601d\u3044\u8abf\u3079\u3066\u307f\u305f\u3002\n- \u7d50\u679cwith\u3068\u4e00\u7dd2\u306b\u4f7f\u3048\u308b\u306e\u3067\u3001\u4f7f\u304a\u3046\u3002\u52dd\u624b\u306bsave\u3055\u308c\u308b\u3088\u3046\u306b\u3082\u306a\u308b\n\n```py3:pandas_excel_cm_example.py\nwith pd.ExcelWriter(\"excel_file_path.xlsx\") as witer:\n    df.to_excel(writer, sheet_name=\"sheet_name1\", index=False)\n    df.to_excel(writer, sheet_name=\"sheet_name2\", index=False)\n```\n\n\n\u4ee5\u4e0b\u8abf\u67fb\u904e\u7a0b\n\n## enter and exit\n```py3:pandas_excel_enter_exit.py\nhelp(writer.__exit__)\nHelp on method __exit__ in module pandas.io.excel:\n__exit__(exc_type, exc_value, traceback) method of pandas.io.excel._XlsxWriter instance\n\n\nhelp(writer.__enter__)\nHelp on method __enter__ in module pandas.io.excel:\n__enter__() method of pandas.io.excel._XlsxWriter instance\n    # Allow use as a contextmanager\n\n\n[a for a in dir(writer) if not a.startswith('_')]\n['book',\n 'check_extension',\n 'close',\n 'cur_sheet',\n 'curr_sheet',\n 'date_format',\n 'datetime_format',\n 'engine',\n 'path',\n 'save',\n 'sheets',\n 'supported_extensions',\n 'write_cells']\n```\n\n## pandas excel module and base excel module\n- \u629c\u7c8b\n- \u62bd\u8c61\u30af\u30e9\u30b9\u3068xlsx\u5b9f\u88c5\u30af\u30e9\u30b9\u304c\u3042\u308b\n- \u62bd\u8c61\u30af\u30e9\u30b9\u5185\u3067context manager\u3068\u3057\u3066\u306eInterface\u304c\u6c7a\u3081\u3066\u3042\u308b\n- \u5b9f\u88c5\u30af\u30e9\u30b9\u5185\u3067save\u5b9f\u88c5\n- \u5b9f\u969b\u306fimport\u3057\u3066\u3044\u308bmodule\u306b\u307e\u304b\u305b\u3066\u3044\u308b\n- \u6700\u7d42\u7684\u306b\u306fzip\u30d5\u30a1\u30a4\u30ebclose\u3057\u3066\u3044\u308b\u304c\u3001\u3053\u3053\u3067\u306fwith\u304c\u306a\u3044\u2026\n\n```py3:pandas_excel_module_and_base_excel_module.py\n# pandas/io/excel.py\n@add_metaclass(abc.ABCMeta)\nclass ExcelWriter(object):\n    @abc.abstractmethod\n    def save(self):\n        pass\n\n    # Allow use as a contextmanager\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.close()\n    \n    def close(self):\n        \"\"\"synonym for save, to make it more file-like\"\"\"\n        return self.save()\n\nclass _XlsxWriter(ExcelWriter):\n    def __init__(self, ):\n        # Use the xlsxwriter module as the Excel writer.\n        import xlsxwriter\n        # https://pypi.python.org/pypi/XlsxWriter\n        # https://github.com/jmcnamara/XlsxWriter\n\n        super(_XlsxWriter, self).__init__\n        self.book = xlsxwriter.Workbook(path, **engine_kwargs)\n\n    def save(self):\n        \"\"\"\n        Save workbook to disk.\n        \"\"\"\n        return self.book.close()\n\n# xlsxwriter/__init__.py\nfrom .workbook import Workbook\n\n# xlsxwriter/workbook.py\nclass Workbook(xmlwriter.XMLwriter):\n    def __enter__(self):\n        \"\"\"Return self object to use with \"with\" statement.\"\"\"\n        return self\n\n    def __exit__(self, type, value, traceback):\n        \"\"\"Close workbook when exiting \"with\" statement.\"\"\"\n        self.close()\n        \n    def close(self):\n        \"\"\"\n        Call finalization code and close file.\n        Args:\n            None.\n        Returns:\n            Nothing.\n        \"\"\"\n        if not self.fileclosed:\n            self.fileclosed = 1\n            self._store_workbook()\n            \n    def _store_workbook(self):\n        xlsx_file = ZipFile(self.filename, \"w\", compression=ZIP_DEFLATED,\n                            allowZip64=self.allow_zip64)\n        xlsx_file.close()\n```\n", "tags": ["pandas"]}