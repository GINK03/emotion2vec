{"context": "When\n2016/12/08\nAt\nMeguro.es #7 @ Livesense\n\n\n\u4eca\u56de\u306e(\u51fa\u5178)GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\novrmrw/rxjs-marble-tests\n===\n\u8a71\u3059\u5185\u5bb9\n\nRxJS 5\u306eObservable\u3092\u3069\u3046\u3084\u3063\u3066\u30c6\u30b9\u30c8\u3059\u308b\u304b\u3002\n\n\n\n\u53c2\u8003\u306b\u306a\u308b\u30b5\u30a4\u30c8\n\nWriting Marble Tests (RxJS\u516c\u5f0f)\nRxJS(5.x)\u3067\u884c\u3046\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u306a\u6a5f\u80fd\u958b\u767a\n\u300crxjs marble test\u300d\u3067\u30b0\u30b0\u308b\u3002\u305f\u3060\u3057\u82f1\u8a9e\u3067\u3082\u60c5\u5831\u306f\u5c11\u306a\u3044\u3002\n\n\n\n\u81ea\u5df1\u7d39\u4ecb\n\u3061\u304d\u3055\u3093\n(Tomohiro Noguchi)\nTwitter/GitHub/Qiita: @ovrmrw\n\u305f\u3060\u306eSIer\u3002\nAngular Japan User Group (ng-japan)\u30b9\u30bf\u30c3\u30d5\u3002\n\n\n\n\u30a2\u30ab\u30a6\u30f3\u30c8ID\u306e\u7531\u6765\n\nthe day after tomorrow \novermorrow(\u4fd7\u8a9e)\n\u7565\u3057\u3066\novrmrw\n\u300c\u5148\u3092\u898b\u636e\u3048\u3066\u300d\u3088\u308a\u3055\u3089\u306b\u5148\u3092\u3001\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u3002\n\n(\u3088\u304f\u805e\u304b\u308c\u308b\u306e\u3067)\n\n\n RxJS 5\u306f\u3068\u3046\u3068\u3046\u6765\u9031stable\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u307e\u3059\uff01 \n\n\n(\u3053\u3053\u304b\u3089\u672c\u7de8)\n\n\u3042\u308b\u3068\u3053\u308d\u306b\u3053\u3046\u3044\u3046Observable\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n  Observable.of(1, 2, 3)\n    .map(value => value * 10)\n    .filter(value => value > 10)\n    .do(value => console.log(value));\n\n\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n20\n30\n\nmap\u306b\u3088\u3063\u3066\u5024\u304c10\u500d\u3055\u308c\u3066\nfilter\u306b\u3088\u3063\u306610\u3088\u308a\u5927\u304d\u3044\u5024\u3060\u3051\u304c\u62bd\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\n\n\u3053\u308c\u304c\u672c\u5f53\u306b\u305d\u3046\u306a\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n\u5148\u7a0b\u306eObservable\u3092\u3053\u306e\u3088\u3046\u306b\u95a2\u6570\u3067\u30e9\u30c3\u30d7\u3057\u307e\u3059\u3002\nInterface: (observable) => observable\nfunction mapFilterTest(observable: Observable<number>): Observable<number> {\n  return observable\n    .map(value => value * 10)\n    .filter(value => value > 10);\n}\n\n\u30c6\u30b9\u30c8\u3057\u305f\u3044Observable\u3092\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u76f4\u3059\u306e\u304cRxJS\u306e\u30c6\u30b9\u30c8\u306e\u7b2c\u4e00\u6b69\u3067\u3059\u3002\n\n\nObservable\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3082\u306e\n\nsource$\nexpected, values\nactual$\nexpectObservable, flush\n\n\n\nsource$\nconst source$: Observable<number> = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n\ncold\u306fObservable\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u4ed6\u306bSubject\u3092\u751f\u6210\u3059\u308bhot\u304c\u3042\u308a\u307e\u3059\u3002\n'-a-b-c'\u304cMarble\u3067\u3059\u3002\u4e00\u6587\u5b57\u76ee\u304c0ms\u3067\u3001\u305d\u306e\u5f8c\u4e00\u6587\u5b57\u5206\u304c10ms\u306e\u6642\u9593\u306e\u6d41\u308c\u3092\u6301\u3061\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u4f8b\u3067\u8a00\u3048\u3070\u3053\u306e\u3088\u3046\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8868\u3057\u307e\u3059\u3002\n\n10ms\u6642\u306b\u5024 1 \u304c\u6d41\u308c\u3066\u304d\u305f\u3002\n30ms\u6642\u306b\u5024 2 \u304c\u6d41\u308c\u3066\u304d\u305f\u3002\n50ms\u6642\u306b\u5024 3 \u304c\u6d41\u308c\u3066\u304d\u305f\u3002\n\n\n\nexpected, values\nconst expected = '---B-C';\nconst values = { A: 10, B: 20, C: 30 };\n\n\u30c6\u30b9\u30c8\u7528\u8a9e\u3067\u8a00\u3046\u3068\u3053\u308d\u306e Expected \u3092\u66f8\u304d\u307e\u3059\u3002\nexpected\u306e\u8a18\u53f7\u306bvalues\u306e\u5024\u3092\u5f53\u3066\u306f\u3081\u3066\u3044\u304f\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u3053\u306e\u3088\u3046\u306a\u7d50\u679c\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\n\n10ms\u6642\u306b\u306f\u4f55\u3082\u6d41\u308c\u3066\u3053\u306a\u3044\u3060\u308d\u3046\u3002\n30ms\u6642\u306b\u306f\u5024 20 \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n50ms\u6642\u306b\u306f\u5024 30 \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n\n\n\nactual$\nconst actual$: Observable<number> = mapFilterTest(source$);\n\n\n(mapFilterTest\u518d\u63b2)\nfunction mapFilterTest(observable: Observable<number>): Observable<number> {\n  return observable\n    .map(value => value * 10)\n    .filter(value => value > 10);\n}\n\n\n\n(source$\u518d\u63b2)\nconst source$: Observable<number> = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n\n\n\u30c6\u30b9\u30c8\u7528\u8a9e\u3067\u8a00\u3046\u3068\u3053\u308d\u306e Actual \u3092\u66f8\u304d\u307e\u3059\u3002\n\u3053\u306e\u7d50\u679c\u304c\u5148\u7a0b\u306e Expected \u3068\u4e00\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u306d\u3002\n\n\nexpectObservable, flush\nts.expectObservable(actual$).toBe(expected, values);\nts.flush();\n\n\u8aac\u660e\u306f\u5f8c\u56de\u3057\u306b\u306a\u308a\u307e\u3059\u304c\u3001ts\u306fRxJS\u306eTestScheduler\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\nObservable\u3067\u3042\u308bactual$\u304c\u3001expected\u3068values\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\nflush\u3067\u5b9a\u7fa9\u6e08\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6d41\u3057\u307e\u3059\u3002\"Run\"\u307f\u305f\u3044\u306a\u610f\u5473\u5408\u3044\u3067\u3059\u3002\n\n\u4eca\u307e\u3067\u8aac\u660e\u3057\u3066\u304d\u305f\u3053\u3068\u3092it\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n  it('should return correct observable', () => {\n    const source$ = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n    const expected = '---B-C';\n    const values = { A: 10, B: 20, C: 30 };\n    const actual$ = mapFilterTest(source$);\n    ts.expectObservable(actual$).toBe(expected, values);\n    ts.flush();\n  });\n\n\n\u30c6\u30b9\u30c8\u306e\u5168\u5bb9\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002TestScheduler\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u306e\u304c\u809d\u3067\u3059\u3002\nimport { Observable, Subject, TestScheduler } from 'rxjs/Rx';\nimport { assertDeepEqual } from '../testing/helper';\n\ndescribe('TEST: RxJS Marble Test', () => {\n  let ts: TestScheduler;\n  let hot: typeof TestScheduler.prototype.createHotObservable;\n  let cold: typeof TestScheduler.prototype.createColdObservable;\n\n  beforeEach(() => {\n    ts = new TestScheduler(assertDeepEqual);\n    hot = ts.createHotObservable.bind(ts);\n    cold = ts.createColdObservable.bind(ts);\n  });\n\n  it('should return correct observable', () => {\n    const source$ = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n    const expected = '-A-B-C';\n    const values = { A: 10, B: 20, C: 30 };\n    const actual$ = mapFilterTest(source$);\n    ts.expectObservable(actual$).toBe(expected, values);\n    ts.flush();\n  });\n}\n\n\n\nTest to fail\n  it('should return correct observable', () => {\n    const source$ = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n    const expected = '-A-B-C'; // \u5143\u306f'---B-C'\n    const values = { A: 10, B: 20, C: 30 };\n    const actual$ = mapFilterTest(source$);\n    ts.expectObservable(actual$).toBe(expected, values);\n    ts.flush();\n  });\n\n\u308f\u3056\u3068\u30c6\u30b9\u30c8\u3092\u843d\u3068\u3059\u305f\u3081\u306bexpected\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\n\n10ms\u6642\u306b\u306f\u5024 10 \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n30ms\u6642\u306b\u306f\u5024 20 \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n50ms\u6642\u306b\u306f\u5024 30 \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n\n\u3068\u3044\u3046\u7d50\u679c\u3092\u671f\u5f85\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f10ms\u6642\u306b\u306f\u4f55\u3082\u6d41\u308c\u3066\u304d\u307e\u305b\u3093\u3002\n\nActual\u3068Expected\u3092\u5168\u3066\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\u3059\u308b\u3068\u7d50\u679c\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n========== ACTUAL ==========\n[\n  {\n    \"frame\": 30,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 20,\n      \"hasValue\": true\n    }\n  },\n  {\n    \"frame\": 50,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 30,\n      \"hasValue\": true\n    }\n  }\n]\n========== EXPECTED ==========\n[\n  {\n    \"frame\": 10,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 10,\n      \"hasValue\": true\n    }\n  },\n  {\n    \"frame\": 30,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 20,\n      \"hasValue\": true\n    }\n  },\n  {\n    \"frame\": 50,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 30,\n      \"hasValue\": true\n    }\n  }\n]\n\n\n\u3061\u306a\u307f\u306b\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u81ea\u4f5c\u3059\u308b\u3068\u3001\u524d\u30da\u30fc\u30b8\u306e\u3088\u3046\u306a\u51fa\u529b\u7d50\u679c\u3092\u5f97\u3089\u308c\u307e\u3059\u3002\nimport * as lodash from 'lodash';\nimport * as assert from 'assert';\n\nexport function assertDeepEqual(actual: any, exptected: any): void {\n  let messages: string[] = ['\\n'];\n  if (!lodash.isEqual(actual, exptected)) {\n    messages.push('='.repeat(10) + ' ACTUAL ' + '='.repeat(10));\n    messages.push(JSON.stringify(actual, null, 2));\n    messages.push('='.repeat(10) + ' EXPECTED ' + '='.repeat(10));\n    messages.push(JSON.stringify(exptected, null, 2));\n    messages.push('\\n');\n  }\n  assert.deepEqual(actual, exptected, messages.join('\\n'));\n}\n\n\u30c6\u30b9\u30c8\u5931\u6557\u6642\u306bactual\u3068expected\u306e\u914d\u5217\u3092JSON.stringify\u3057\u3066\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nMarble Test\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u81ea\u5206\u304c\u601d\u3063\u3066\u305f\u6319\u52d5\u3068\u9055\u3046\u3068\u304d\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u6551\u308f\u308c\u308b\n\n\n(\u4eca\u65e5\u6c17\u4ed8\u3044\u305f\u3053\u3068)\n\nMarble Test\u306e\u4e2d\u306b\u975e\u540c\u671f(Promise\u7b49)\u304c\u6df7\u5165\u3059\u308b\u3068\u671f\u5f85\u901a\u308a\u306e\u30c6\u30b9\u30c8\u7d50\u679c\u306f\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u304a\u305d\u3089\u304fMarble Test\u306f\u975e\u540c\u671f\u306b\u975e\u5bfe\u5fdc\u3067\u3059\u3002(\u81ea\u4fe1\u306f\u7121\u3044)\n\n\n\nThanks!\nWhen\n\n2016/12/08\n\nAt\n\n[Meguro.es #7 @ Livesense](https://meguroes.connpass.com/event/42003/)\n\n---\n\n# \u4eca\u56de\u306e(\u51fa\u5178)GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\n\n[ovrmrw/rxjs-marble-tests](https://github.com/ovrmrw/rxjs-marble-tests)\n\n===\n\n\u8a71\u3059\u5185\u5bb9\n\n- RxJS 5\u306e**Observable**\u3092\u3069\u3046\u3084\u3063\u3066\u30c6\u30b9\u30c8\u3059\u308b\u304b\u3002\n\n---\n\n## \u53c2\u8003\u306b\u306a\u308b\u30b5\u30a4\u30c8\n\n- [Writing Marble Tests (RxJS\u516c\u5f0f)](https://github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md)\n- [RxJS(5.x)\u3067\u884c\u3046\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u306a\u6a5f\u80fd\u958b\u767a](http://blog.mmmcorp.co.jp/blog/2016/06/25/testing-rxjs-5/)\n- \u300crxjs marble test\u300d\u3067\u30b0\u30b0\u308b\u3002\u305f\u3060\u3057\u82f1\u8a9e\u3067\u3082\u60c5\u5831\u306f\u5c11\u306a\u3044\u3002\n\n---\n\n## \u81ea\u5df1\u7d39\u4ecb\n\n\u3061\u304d\u3055\u3093\n(Tomohiro Noguchi)\n\nTwitter/GitHub/Qiita: [@ovrmrw](https://twitter.com/ovrmrw)\n\n\u305f\u3060\u306eSIer\u3002\n\nAngular Japan User Group (ng-japan)\u30b9\u30bf\u30c3\u30d5\u3002\n\n![3a2512bb-aa72-4515-af42-1f1721252f39.jpg](https://qiita-image-store.s3.amazonaws.com/0/74793/c753b39c-1581-ea1d-87d1-181f37bda60d.jpeg)\n\n---\n\n### \u30a2\u30ab\u30a6\u30f3\u30c8ID\u306e\u7531\u6765\n\n1. the day after tomorrow \n1. overmorrow(\u4fd7\u8a9e)\n1. \u7565\u3057\u3066\n1. ovrmrw\n1. \u300c\u5148\u3092\u898b\u636e\u3048\u3066\u300d\u3088\u308a\u3055\u3089\u306b\u5148\u3092\u3001\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u3002\n\n(\u3088\u304f\u805e\u304b\u308c\u308b\u306e\u3067:innocent:)\n\n---\n\n### :tada: RxJS 5\u306f\u3068\u3046\u3068\u3046\u6765\u9031stable\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u307e\u3059\uff01 :tada:\n\n---\n\n(\u3053\u3053\u304b\u3089\u672c\u7de8)\n\n---\n\n\u3042\u308b\u3068\u3053\u308d\u306b\u3053\u3046\u3044\u3046Observable\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n```ts\n  Observable.of(1, 2, 3)\n    .map(value => value * 10)\n    .filter(value => value > 10)\n    .do(value => console.log(value));\n```\n\n\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```\n20\n30\n```\n\n`map`\u306b\u3088\u3063\u3066\u5024\u304c10\u500d\u3055\u308c\u3066\n`filter`\u306b\u3088\u3063\u3066**10\u3088\u308a\u5927\u304d\u3044\u5024\u3060\u3051**\u304c\u62bd\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\n---\n\n### \u3053\u308c\u304c\u672c\u5f53\u306b\u305d\u3046\u306a\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n---\n\n\u5148\u7a0b\u306eObservable\u3092\u3053\u306e\u3088\u3046\u306b\u95a2\u6570\u3067\u30e9\u30c3\u30d7\u3057\u307e\u3059\u3002\n\nInterface: `(observable) => observable`\n\n```ts\nfunction mapFilterTest(observable: Observable<number>): Observable<number> {\n  return observable\n    .map(value => value * 10)\n    .filter(value => value > 10);\n}\n```\n\n\u30c6\u30b9\u30c8\u3057\u305f\u3044Observable\u3092\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u76f4\u3059\u306e\u304cRxJS\u306e\u30c6\u30b9\u30c8\u306e\u7b2c\u4e00\u6b69\u3067\u3059\u3002\n\n---\n\n# Observable\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3082\u306e\n\n- source$\n- expected, values\n- actual$\n- expectObservable, flush\n\n---\n\n## source$\n\n```ts\nconst source$: Observable<number> = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n```\n\n`cold`\u306fObservable\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u4ed6\u306bSubject\u3092\u751f\u6210\u3059\u308b`hot`\u304c\u3042\u308a\u307e\u3059\u3002\n\n`'-a-b-c'`\u304cMarble\u3067\u3059\u3002\u4e00\u6587\u5b57\u76ee\u304c0ms\u3067\u3001\u305d\u306e\u5f8c\u4e00\u6587\u5b57\u5206\u304c10ms\u306e\u6642\u9593\u306e\u6d41\u308c\u3092\u6301\u3061\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u4f8b\u3067\u8a00\u3048\u3070\u3053\u306e\u3088\u3046\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8868\u3057\u307e\u3059\u3002\n\n- 10ms\u6642\u306b\u5024 `1` \u304c\u6d41\u308c\u3066\u304d\u305f\u3002\n- 30ms\u6642\u306b\u5024 `2` \u304c\u6d41\u308c\u3066\u304d\u305f\u3002\n- 50ms\u6642\u306b\u5024 `3` \u304c\u6d41\u308c\u3066\u304d\u305f\u3002\n\n---\n\n## expected, values\n\n```ts\nconst expected = '---B-C';\nconst values = { A: 10, B: 20, C: 30 };\n```\n\n\u30c6\u30b9\u30c8\u7528\u8a9e\u3067\u8a00\u3046\u3068\u3053\u308d\u306e **Expected** \u3092\u66f8\u304d\u307e\u3059\u3002\n\n`expected`\u306e\u8a18\u53f7\u306b`values`\u306e\u5024\u3092\u5f53\u3066\u306f\u3081\u3066\u3044\u304f\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u306e\u4f8b\u3067\u306f\u3053\u306e\u3088\u3046\u306a\u7d50\u679c\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\n\n- 10ms\u6642\u306b\u306f**\u4f55\u3082\u6d41\u308c\u3066\u3053\u306a\u3044**\u3060\u308d\u3046\u3002\n- 30ms\u6642\u306b\u306f\u5024 `20` \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n- 50ms\u6642\u306b\u306f\u5024 `30` \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n\n---\n\n## actual$\n\n```ts\nconst actual$: Observable<number> = mapFilterTest(source$);\n```\n\n```ts:(mapFilterTest\u518d\u63b2)\nfunction mapFilterTest(observable: Observable<number>): Observable<number> {\n  return observable\n    .map(value => value * 10)\n    .filter(value => value > 10);\n}\n```\n\n```ts:(source$\u518d\u63b2)\nconst source$: Observable<number> = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n```\n\n\u30c6\u30b9\u30c8\u7528\u8a9e\u3067\u8a00\u3046\u3068\u3053\u308d\u306e **Actual** \u3092\u66f8\u304d\u307e\u3059\u3002\n\n\u3053\u306e\u7d50\u679c\u304c\u5148\u7a0b\u306e Expected \u3068\u4e00\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u306d\u3002\n\n---\n\n## expectObservable, flush\n\n```ts\nts.expectObservable(actual$).toBe(expected, values);\nts.flush();\n```\n\n\u8aac\u660e\u306f\u5f8c\u56de\u3057\u306b\u306a\u308a\u307e\u3059\u304c\u3001`ts`\u306fRxJS\u306e`TestScheduler`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\nObservable\u3067\u3042\u308b`actual$`\u304c\u3001`expected`\u3068`values`\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\n\n`flush`\u3067\u5b9a\u7fa9\u6e08\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6d41\u3057\u307e\u3059\u3002\"Run\"\u307f\u305f\u3044\u306a\u610f\u5473\u5408\u3044\u3067\u3059\u3002\n\n---\n\n\u4eca\u307e\u3067\u8aac\u660e\u3057\u3066\u304d\u305f\u3053\u3068\u3092`it`\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```ts\n  it('should return correct observable', () => {\n    const source$ = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n    const expected = '---B-C';\n    const values = { A: 10, B: 20, C: 30 };\n    const actual$ = mapFilterTest(source$);\n    ts.expectObservable(actual$).toBe(expected, values);\n    ts.flush();\n  });\n```\n\n---\n\n\u30c6\u30b9\u30c8\u306e\u5168\u5bb9\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002`TestScheduler`\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u306e\u304c\u809d\u3067\u3059\u3002\n\n```ts\nimport { Observable, Subject, TestScheduler } from 'rxjs/Rx';\nimport { assertDeepEqual } from '../testing/helper';\n\ndescribe('TEST: RxJS Marble Test', () => {\n  let ts: TestScheduler;\n  let hot: typeof TestScheduler.prototype.createHotObservable;\n  let cold: typeof TestScheduler.prototype.createColdObservable;\n\n  beforeEach(() => {\n    ts = new TestScheduler(assertDeepEqual);\n    hot = ts.createHotObservable.bind(ts);\n    cold = ts.createColdObservable.bind(ts);\n  });\n  \n  it('should return correct observable', () => {\n    const source$ = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n    const expected = '-A-B-C';\n    const values = { A: 10, B: 20, C: 30 };\n    const actual$ = mapFilterTest(source$);\n    ts.expectObservable(actual$).toBe(expected, values);\n    ts.flush();\n  });\n}\n```\n\n---\n\n# Test to fail\n\n```ts\n  it('should return correct observable', () => {\n    const source$ = cold<number>('-a-b-c', { a: 1, b: 2, c: 3 });\n    const expected = '-A-B-C'; // \u5143\u306f'---B-C'\n    const values = { A: 10, B: 20, C: 30 };\n    const actual$ = mapFilterTest(source$);\n    ts.expectObservable(actual$).toBe(expected, values);\n    ts.flush();\n  });\n```\n\n\u308f\u3056\u3068\u30c6\u30b9\u30c8\u3092\u843d\u3068\u3059\u305f\u3081\u306b`expected`\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\n\n- 10ms\u6642\u306b\u306f\u5024 `10` \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n- 30ms\u6642\u306b\u306f\u5024 `20` \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n- 50ms\u6642\u306b\u306f\u5024 `30` \u304c\u6d41\u308c\u3066\u304f\u308b\u3060\u308d\u3046\u3002\n\n\u3068\u3044\u3046\u7d50\u679c\u3092\u671f\u5f85\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f10ms\u6642\u306b\u306f\u4f55\u3082\u6d41\u308c\u3066\u304d\u307e\u305b\u3093\u3002\n\n---\n\nActual\u3068Expected\u3092\u5168\u3066\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\u3059\u308b\u3068\u7d50\u679c\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\n```js\n========== ACTUAL ==========\n[\n  {\n    \"frame\": 30,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 20,\n      \"hasValue\": true\n    }\n  },\n  {\n    \"frame\": 50,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 30,\n      \"hasValue\": true\n    }\n  }\n]\n========== EXPECTED ==========\n[\n  {\n    \"frame\": 10,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 10,\n      \"hasValue\": true\n    }\n  },\n  {\n    \"frame\": 30,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 20,\n      \"hasValue\": true\n    }\n  },\n  {\n    \"frame\": 50,\n    \"notification\": {\n      \"kind\": \"N\",\n      \"value\": 30,\n      \"hasValue\": true\n    }\n  }\n]\n```\n\n---\n\n\u3061\u306a\u307f\u306b\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u81ea\u4f5c\u3059\u308b\u3068\u3001\u524d\u30da\u30fc\u30b8\u306e\u3088\u3046\u306a\u51fa\u529b\u7d50\u679c\u3092\u5f97\u3089\u308c\u307e\u3059\u3002\n\n```ts\nimport * as lodash from 'lodash';\nimport * as assert from 'assert';\n\nexport function assertDeepEqual(actual: any, exptected: any): void {\n  let messages: string[] = ['\\n'];\n  if (!lodash.isEqual(actual, exptected)) {\n    messages.push('='.repeat(10) + ' ACTUAL ' + '='.repeat(10));\n    messages.push(JSON.stringify(actual, null, 2));\n    messages.push('='.repeat(10) + ' EXPECTED ' + '='.repeat(10));\n    messages.push(JSON.stringify(exptected, null, 2));\n    messages.push('\\n');\n  }\n  assert.deepEqual(actual, exptected, messages.join('\\n'));\n}\n```\n\n\u30c6\u30b9\u30c8\u5931\u6557\u6642\u306b`actual`\u3068`expected`\u306e\u914d\u5217\u3092`JSON.stringify`\u3057\u3066\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\n---\n\n### Marble Test\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u81ea\u5206\u304c\u601d\u3063\u3066\u305f\u6319\u52d5\u3068\u9055\u3046\u3068\u304d\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u6551\u308f\u308c\u308b:wink:\n\n---\n\n(\u4eca\u65e5\u6c17\u4ed8\u3044\u305f\u3053\u3068)\n\n- Marble Test\u306e\u4e2d\u306b\u975e\u540c\u671f(Promise\u7b49)\u304c\u6df7\u5165\u3059\u308b\u3068\u671f\u5f85\u901a\u308a\u306e\u30c6\u30b9\u30c8\u7d50\u679c\u306f\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u304a\u305d\u3089\u304fMarble Test\u306f\u975e\u540c\u671f\u306b\u975e\u5bfe\u5fdc\u3067\u3059\u3002(\u81ea\u4fe1\u306f\u7121\u3044)\n\n---\n\n## Thanks!\n", "tags": ["RxJS5", "RxJS5"]}