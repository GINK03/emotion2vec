{"context": "\u6700\u8fd1\u306f BPF \u306b\u8208\u5473\u304c\u3042\u3063\u3066\u8272\u3005\u8abf\u3079\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5148\u65e5\u3001\u305d\u306e\u6d41\u308c\u3067 BPF Compiler Collection (BCC) \u3092\u773a\u3081\u3066\u3044\u305f\u3089\u3001sslsnif \u3068\u3044\u3046\u30c4\u30fc\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u306b\u6c17\u304c\u4ed8\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u306f OpenSSL \u3084 GnuTLS \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u3001TLS \u901a\u4fe1\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3057\u3066\u8868\u793a\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\u3053\u306e sslsnif \u306e\u4ed5\u7d44\u307f\u3092\u5fdc\u7528\u3059\u308c\u3070\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u4e00\u5207\u306e\u5909\u66f4\u3092\u52a0\u3048\u308b\u3053\u3068\u306a\u304f\u3001\u69d8\u3005\u306a\u30b5\u30fc\u30d0\u30fc\u3084\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3067\u304d\u308b\u306e\u3067\u306f\u3068\u8003\u3048\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u4eca\u56de\u306f BPF \u3092\u4f7f\u3063\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3067\u304d\u308b\u304b\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u4eca\u56de\u306f Ubuntu 16.04 \u4e0a\u306b BCC \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001Python \u3092\u4f7f\u3063\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3059\u308b\u30c4\u30fc\u30eb\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002Python \u3092\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u306b\u9078\u629e\u3057\u305f\u306e\u306f\u3001\u9ad8\u54c1\u8cea\u306a HTTP/2 \u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b hyper-h2 \u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u307e\u305a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b BCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u3057\u307e\u3059\u3002\n$ echo \"deb [trusted=yes] https://repo.iovisor.org/apt/xenial xenial-nightly main\" | sudo tee /etc/apt/sources.list.d/iovisor.list\n$ sudo apt-get update\n$ sudo apt-get install -y bcc-tools\n\nBCC \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u305f\u306e\u3067\u3001\u7d9a\u3044\u3066 hyper-h2 \u306b\u542b\u307e\u308c\u308b HTTP/2 \u30d5\u30ec\u30fc\u30e0\u30e9\u30a4\u30d6\u30e9\u30ea hyperframe \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n$ sudo apt-get install -y python-pip\n$ sudo pip install hyperframe\n\n\u6700\u5f8c\u306b\u52d5\u4f5c\u78ba\u8a8d\u7528\u306b nginx \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u306b HTTP/2 \u304c\u6709\u52b9\u306b\u306a\u308b\u3088\u3046\u306b\u4e8b\u524d\u306b\u8a2d\u5b9a\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n$ sudo apt-get install -y nginx\n\n\u307e\u305f\u3001\u6bd4\u8f03\u7528\u306b H2O \u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n$ sudo apt-get install -y git cmake build-essential autoconf pkg-config libyaml-dev zlib1g-dev\n$ curl -L -O https://github.com/h2o/h2o/archive/v2.0.4.tar.gz\n$ tar zxvf v2.0.4.tar.gz\n$ cd h2o-2.0.4\n$ cmake -DWITH_BUNDLED_SSL=on .\n$ make\n$ sudo make install\n\nH2O \u306f\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5f53\u306b\u7528\u610f\u3057\u3066\u3001\u8d77\u52d5\u3057\u3066\u304a\u304d\u307e\u3059\u3002H2O \u306e\u8a2d\u5b9a\u65b9\u6cd5\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306a\u3069\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n$ sudo h2o -m daemon -c /etc/h2o/h2o.conf\n\n\n\u5b9f\u88c5\n\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001BCC \u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002BCC \u3092\u4f7f\u7528\u3059\u308c\u3070 Python \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067 C \u3067\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3092 BPF \u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u306f\u3001BPF \u3092\u4f7f\u7528\u3057\u3066 OpenSSL \u3084 GnuTLS \u306e\u95a2\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3001\u305d\u306e\u7d50\u679c\u3092 Python \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u53d7\u3051\u53d6\u3063\u3066\u3001HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u8868\u793a\u3059\u308b\u65b9\u6cd5\u3092\u3068\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nh2sniff.py\n#!/usr/bin/python\n\n# This code is modified version of sslsniff.\n# https://github.com/iovisor/bcc/blob/master/tools/sslsniff.py\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\")\n\nfrom __future__ import print_function\nimport ctypes as ct\nfrom bcc import BPF\nimport time\nimport argparse\nimport hyperframe.frame\n\n# BPF code\nBPF_CODE = \"\"\"\n#include <linux/ptrace.h>\n#include <linux/sched.h>\n\nstruct probe_SSL_data_t {\n  u32 len;\n  char buf[500];\n};\n\nBPF_PERF_OUTPUT(perf_SSL_write);\nBPF_PERF_OUTPUT(perf_SSL_read);\n\nBPF_HASH(bufs, u32, u64);\n\nint probe_SSL_write(struct pt_regs *ctx, void *ssl, void *buf, int num) {\n  u32 pid = bpf_get_current_pid_tgid();\n  FILTER\n\n  struct probe_SSL_data_t __data = {0};\n  __data.len = num;\n\n  if (buf != 0) {\n    bpf_probe_read(&__data.buf, sizeof(__data.buf), buf);\n  }\n\n  perf_SSL_write.perf_submit(ctx, &__data, sizeof(__data));\n\n  return 0;\n}\n\nint probe_SSL_read_enter(struct pt_regs *ctx, void *ssl, void *buf, int num) {\n  u32 pid = bpf_get_current_pid_tgid();\n  FILTER\n\n  bufs.update(&pid, (u64*)&buf);\n  return 0;\n}\n\nint probe_SSL_read_exit(struct pt_regs *ctx, void *ssl, void *buf, int num) {\n  u32 pid = bpf_get_current_pid_tgid();\n  FILTER\n\n  u64 *bufp = bufs.lookup(&pid);\n  if (bufp == 0) {\n    return 0;\n  }\n\n  struct probe_SSL_data_t __data = {0};\n  __data.len = PT_REGS_RC(ctx);\n\n  if (bufp != 0) {\n    bpf_probe_read(&__data.buf, sizeof(__data.buf), (char *)*bufp);\n  }\n\n  bufs.delete(&pid);\n\n  perf_SSL_read.perf_submit(ctx, &__data, sizeof(__data));\n  return 0;\n}\n\"\"\"\n\nFRAMES = [\n    \"DATA\",\n    \"HEADERS\",\n    \"PRIORITY\",\n    \"RST_STREAM\",\n    \"SETTINGS\",\n    \"PUSH_PROMISE\",\n    \"PING\",\n    \"GOAWAY\",\n    \"WINDOW_UPDATE\",\n    \"CONTINUATION\",\n    \"ALT_SVC\",   \n]\n\nMAX_BUF_SIZE = 500\nTIME_START = time.time()\n\nclass Data(ct.Structure):\n    _fields_ = [\n        (\"len\", ct.c_uint),\n        (\"buf\", ct.c_ubyte * MAX_BUF_SIZE),\n    ]\n\ndef print_event_write(cpu, data, size):\n    print_event(cpu, data, size, \"send\")\n\ndef print_event_read(cpu, data, size):\n    print_event(cpu, data, size, \"recv\")\n\ndef print_event(cpu, data, size, rw):\n    global FRAMES, TIME_START\n\n    event = ct.cast(data, ct.POINTER(Data)).contents\n    data = event.buf[0:event.len]\n\n    if bytearray(data)[:24] == \"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\":\n        data = data[24:]\n\n    while len(data) > 9:\n        try:\n            info = hyperframe.frame.Frame.parse_frame_header(bytearray(data)[:9])\n        except:\n            break\n\n        frame = info[0]\n        frame_len = info[1]\n\n        time_s = float(time.time() - TIME_START)\n\n        flags = \",\".join(frame.flags)\n\n        last = 9 + frame_len \n        data = data[last:]\n\n        if flags == \"\":\n            print(\"[%-3.3f] %s %s frame <length=%d, stream_id=%d>\" % (time_s, rw, FRAMES[frame.type], frame_len, frame.stream_id))\n        else:\n            print(\"[%-3.3f] %s %s frame <length=%d, stream_id=%d, flags=%s>\" % (time_s, rw, FRAMES[frame.type], frame_len, frame.stream_id, flags))\n\nexamples = \"\"\"examples:\n    ./h2sniff                       # sniff OpenSSL and GnuTLS functions\n    ./h2sniff -p 181                # sniff PID 181 only\n    ./h2sniff -c curl               # sniff curl command only\n    ./h2sniff -b /usr/local/bin/h2o # sniff h2o binary\n    ./h2sniff --no-openssl          # don't show OpenSSL calls\n    ./h2sniff --no-gnutls           # don't show GnuTLS calls\n\"\"\"\n\nparser = argparse.ArgumentParser(\n    description=\"Sniff HTTP/2 frame\",\n    formatter_class=argparse.RawDescriptionHelpFormatter,\n    epilog=examples)\nparser.add_argument(\"-p\", \"--pid\", help=\"sniff this PID only.\")\nparser.add_argument(\"-c\", \"--comm\", help=\"sniff only commands matching string.\")\nparser.add_argument(\"-b\", \"--bin\", help=\"sniff binary file.\")\nparser.add_argument(\"-o\", \"--no-openssl\", action=\"store_false\", dest=\"openssl\", help=\"do not show OpenSSL calls.\")\nparser.add_argument(\"-g\", \"--no-gnutls\", action=\"store_false\", dest=\"gnutls\", help=\"do not show GnuTLS calls.\")\nparser.add_argument('-d', '--debug', dest='debug', action='count', default=0, help='debug mode.')\nargs = parser.parse_args()\n\nif args.pid:\n    BPF_CODE = BPF_CODE.replace('FILTER', 'if (pid != %s) { return 0; }' % args.pid)\nelse:\n    BPF_CODE = BPF_CODE.replace('FILTER', '')\n\nif args.debug:\n    print(BPF_CODE)\n\nb = BPF(text=BPF_CODE)\n\nif args.openssl:\n    name = \"ssl\"\n    if args.bin != None:\n        name = args.bin\n\n    try:\n        b.attach_uprobe(name=name, sym=\"SSL_write\", fn_name=\"probe_SSL_write\")\n        b.attach_uprobe(name=name, sym=\"SSL_read\", fn_name=\"probe_SSL_read_enter\")\n        b.attach_uretprobe(name=name, sym=\"SSL_read\", fn_name=\"probe_SSL_read_exit\")\n        print(\"OpenSSL: Enabled\")\n    except:\n        pass\n\nif args.gnutls:\n    name = \"gnutls\"\n    if args.bin != None:\n        name = args.bin\n\n    try:\n        b.attach_uprobe(name=name, sym=\"gnutls_record_send\", fn_name=\"probe_SSL_write\")\n        b.attach_uprobe(name=name, sym=\"gnutls_record_recv\", fn_name=\"probe_SSL_read_enter\")\n        b.attach_uretprobe(name=name, sym=\"gnutls_record_recv\", fn_name=\"probe_SSL_read_exit\")\n        print(\"GnuTLS: Enabled\")\n    except:\n        pass\n\nb[\"perf_SSL_write\"].open_perf_buffer(print_event_write)\nb[\"perf_SSL_read\"].open_perf_buffer(print_event_read)\n\nwhile 1:\n    b.kprobe_poll()\n\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\u3055\u3063\u305d\u304f\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u7528\u3057\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3057\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d77\u52d5\u3057\u3066\u3001nginx \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n$ sudo ./h2sniff.py -c nginx\nOpenSSL: Enabled\n\n\u3053\u306e\u72b6\u614b\u3067\u30d6\u30e9\u30a6\u30b6\u3084 nghttp \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u3001nginx \u306b\u5bfe\u3057\u3066 HTTP/2 \u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b HTTP/2 \u30d5\u30ec\u30fc\u30e0\u306e\u60c5\u5831\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n[3.694] send SETTINGS frame <length=18, stream_id=0>\n[3.695] send WINDOW_UPDATE frame <length=4, stream_id=0>\n[3.697] send SETTINGS frame <length=0, stream_id=0, flags=ACK>\n[3.698] send HEADERS frame <length=114, stream_id=13, flags=END_HEADERS>\n[3.699] send DATA frame <length=2361, stream_id=13, flags=END_STREAM>\n[3.699] recv SETTINGS frame <length=12, stream_id=0>\n[3.700] recv PRIORITY frame <length=5, stream_id=3>\n[3.700] recv PRIORITY frame <length=5, stream_id=5>\n[3.701] recv PRIORITY frame <length=5, stream_id=7>\n[3.701] recv PRIORITY frame <length=5, stream_id=9>\n[3.702] recv PRIORITY frame <length=5, stream_id=11>\n[3.702] recv HEADERS frame <length=41, stream_id=13, flags=END_STREAM,PRIORITY,END_HEADERS>\n[3.703] recv GOAWAY frame <length=8, stream_id=0>\n\n\u540c\u3058\u3088\u3046\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066 H2O \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3082\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u307f\u307e\u3059\u3002\n$ sudo ./h2sniff.py -b /usr/local/bin/h2o\nOpenSSL: Enabled\n\nnginx \u3068\u540c\u69d8\u306b\u3053\u306e\u72b6\u614b\u3067\u30d6\u30e9\u30a6\u30b6\u3084 nghttp \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u3001H2O \u306b\u5bfe\u3057\u3066 HTTP/2 \u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3059\u308b\u3068\u3001\u3053\u3061\u3089\u3082 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u306e\u60c5\u5831\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n[2.342] recv SETTINGS frame <length=12, stream_id=0>\n[2.343] recv PRIORITY frame <length=5, stream_id=3>\n[2.344] recv PRIORITY frame <length=5, stream_id=5>\n[2.345] recv PRIORITY frame <length=5, stream_id=7>\n[2.345] recv PRIORITY frame <length=5, stream_id=9>\n[2.346] recv PRIORITY frame <length=5, stream_id=11>\n[2.346] recv HEADERS frame <length=37, stream_id=13, flags=END_STREAM,PRIORITY,END_HEADERS>\n[2.347] recv GOAWAY frame <length=8, stream_id=0>\n[2.347] send SETTINGS frame <length=12, stream_id=0>\n[2.348] send SETTINGS frame <length=0, stream_id=0, flags=ACK>\n[2.348] send HEADERS frame <length=94, stream_id=13, flags=END_HEADERS>\n[2.349] send DATA frame <length=4652, stream_id=13, flags=END_STREAM>\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u3001BPF \u3092\u4f7f\u7528\u3059\u308c\u3070\u3001\u30b5\u30fc\u30d0\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306a\u304f\u3001HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u554f\u984c\u70b9\nBPF \u3092\u4f7f\u7528\u3057\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u306e\u30c0\u30f3\u30d7\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u304c\u3001\u5b9f\u88c5\u3092\u901a\u3058\u3066\u3053\u306e\u65b9\u6cd5\u306b\u306f\u3044\u304f\u3064\u304b\u554f\u984c\u304c\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\u30d5\u30ec\u30fc\u30e0\u306e\u9806\u5e8f\u304c\u5165\u308c\u66ff\u308f\u308b\n\u5148\u306b\u793a\u3057\u305f H2O \u306e\u52d5\u4f5c\u78ba\u8a8d\u7d50\u679c\u3092\u3088\u304f\u898b\u308b\u30688\u756a\u76ee\u306b GOAWAY \u30d5\u30ec\u30fc\u30e0\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e GOAWAY \u30d5\u30ec\u30fc\u30e0\u306f\u5b9f\u969b\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u6700\u5f8c\u306b\u9001\u4fe1\u3055\u308c\u3066\u304a\u308a\u3001\u672c\u6765\u306f\u6700\u5f8c\u306e\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u304c\u3001\u305d\u3046\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u304a\u305d\u3089\u304f BPF \u3092\u4f7f\u3063\u305f\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u904e\u7a0b\u306e\u3069\u3053\u304b\u3067\u3001\u5148\u306b GOAWAY \u30d5\u30ec\u30fc\u30e0\u306e\u60c5\u5831\u304c\u51e6\u7406\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u5165\u308c\u66ff\u308f\u3063\u305f\u3082\u306e\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\u30ad\u30e3\u30d7\u30c1\u30e3\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u51fa\u3057\u30bf\u30a4\u30df\u30f3\u30b0\u306a\u3069\u3092\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n512\u30d0\u30a4\u30c8\u3092\u8d85\u3048\u308b\u30c7\u30fc\u30bf\u304c\u6271\u3048\u306a\u3044\nBPF \u30b9\u30bf\u30c3\u30af\u5185\u3067\u306f 512 \u30d0\u30a4\u30c8 \u3092\u8d85\u3048\u308b\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001512 \u30d0\u30a4\u30c8\u3092\u8d85\u3048\u308b\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u6642\u306b\u3001512 \u30d0\u30a4\u30c8\u4ee5\u964d\u306b HTTP/2 \u30d5\u30ec\u30fc\u30e0\u306e\u5883\u754c\u304c\u3042\u308b\u3068\u3001\u4ee5\u964d\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u6b63\u5e38\u306b\u30c0\u30f3\u30d7\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070 1024 \u30d0\u30a4\u30c8\u306e DATA \u30d5\u30ec\u30fc\u30e0\u306e\u76f4\u5f8c\u306b GOAWAY \u30d5\u30ec\u30fc\u30e0\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001DATA \u30d5\u30ec\u30fc\u30e0\u306e\u5148\u982d 512 \u30d0\u30a4\u30c8\u307e\u3067\u3057\u304b\u6271\u3048\u306a\u3044\u305f\u3081\u3001\u305d\u306e GOAWAY \u30d5\u30ec\u30fc\u30e0\u306e\u5b58\u5728\u306b\u6c17\u3065\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001BPF \u306e\u30b3\u30fc\u30c9\u306f\u30ab\u30fc\u30cd\u30eb\u306e\u5185\u90e8\u3067\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u304b\u3089\u3001\u524d\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u623b\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3001\u3064\u307e\u308a\u30eb\u30fc\u30d7\u306a\u3069\u304c\u4f7f\u3048\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081 BPF \u306e\u30b3\u30fc\u30c9\u5185\u3067\u30d5\u30ec\u30fc\u30e0\u3092\u5c0f\u3055\u304f\u5206\u5272\u3059\u308b\u306e\u3082\u96e3\u3057\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nBPF \u3092\u4f7f\u3063\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u691c\u8a3c\u3057\u307e\u3057\u305f\u3002BPF \u3092\u4f7f\u7528\u3059\u308c\u3070\u3001\u30b5\u30fc\u30d0\u30fc\u3084\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u624b\u3092\u3044\u308c\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001\u30b3\u30de\u30f3\u30c9\u4e00\u3064\u3067 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u304d\u308b\u975e\u5e38\u306b\u4fbf\u5229\u306a\u30c4\u30fc\u30eb\u304c\u4f5c\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u6271\u3048\u308b\u30c7\u30fc\u30bf\u306e\u9577\u3055\u306b\u5236\u9650\u304c\u3042\u308b\u3053\u3068\u3084\u3001\u30d5\u30ec\u30fc\u30e0\u306e\u9806\u5e8f\u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3057\u307e\u3046\u306a\u3069\u306e\u554f\u984c\u304c\u3042\u308a\u3001\u5b9f\u7528\u7684\u306b\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u6700\u8fd1\u306f [BPF](https://www.kernel.org/doc/Documentation/networking/filter.txt) \u306b\u8208\u5473\u304c\u3042\u3063\u3066\u8272\u3005\u8abf\u3079\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5148\u65e5\u3001\u305d\u306e\u6d41\u308c\u3067 [BPF Compiler Collection (BCC)](https://github.com/iovisor/bcc) \u3092\u773a\u3081\u3066\u3044\u305f\u3089\u3001[sslsnif](https://github.com/iovisor/bcc/blob/master/tools/sslsniff.py) \u3068\u3044\u3046\u30c4\u30fc\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u306b\u6c17\u304c\u4ed8\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u306f OpenSSL \u3084 GnuTLS \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u3001TLS \u901a\u4fe1\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3057\u3066\u8868\u793a\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u3053\u306e sslsnif \u306e\u4ed5\u7d44\u307f\u3092\u5fdc\u7528\u3059\u308c\u3070\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u4e00\u5207\u306e\u5909\u66f4\u3092\u52a0\u3048\u308b\u3053\u3068\u306a\u304f\u3001\u69d8\u3005\u306a\u30b5\u30fc\u30d0\u30fc\u3084\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3067\u304d\u308b\u306e\u3067\u306f\u3068\u8003\u3048\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u4eca\u56de\u306f BPF \u3092\u4f7f\u3063\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3067\u304d\u308b\u304b\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n# \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u4eca\u56de\u306f Ubuntu 16.04 \u4e0a\u306b BCC \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001Python \u3092\u4f7f\u3063\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3059\u308b\u30c4\u30fc\u30eb\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002Python \u3092\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u306b\u9078\u629e\u3057\u305f\u306e\u306f\u3001\u9ad8\u54c1\u8cea\u306a HTTP/2 \u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b [hyper-h2](https://github.com/python-hyper/hyper-h2) \u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u307e\u305a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b BCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u3057\u307e\u3059\u3002\n\n```bash\n$ echo \"deb [trusted=yes] https://repo.iovisor.org/apt/xenial xenial-nightly main\" | sudo tee /etc/apt/sources.list.d/iovisor.list\n$ sudo apt-get update\n$ sudo apt-get install -y bcc-tools\n```\n\nBCC \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u305f\u306e\u3067\u3001\u7d9a\u3044\u3066 hyper-h2 \u306b\u542b\u307e\u308c\u308b HTTP/2 \u30d5\u30ec\u30fc\u30e0\u30e9\u30a4\u30d6\u30e9\u30ea hyperframe \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```bash\n$ sudo apt-get install -y python-pip\n$ sudo pip install hyperframe\n```\n\n\u6700\u5f8c\u306b\u52d5\u4f5c\u78ba\u8a8d\u7528\u306b [nginx](https://nginx.org/en/) \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u306b HTTP/2 \u304c\u6709\u52b9\u306b\u306a\u308b\u3088\u3046\u306b\u4e8b\u524d\u306b\u8a2d\u5b9a\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```bash\n$ sudo apt-get install -y nginx\n```\n\n\u307e\u305f\u3001\u6bd4\u8f03\u7528\u306b [H2O](https://h2o.examp1e.net/) \u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```bash\n$ sudo apt-get install -y git cmake build-essential autoconf pkg-config libyaml-dev zlib1g-dev\n$ curl -L -O https://github.com/h2o/h2o/archive/v2.0.4.tar.gz\n$ tar zxvf v2.0.4.tar.gz\n$ cd h2o-2.0.4\n$ cmake -DWITH_BUNDLED_SSL=on .\n$ make\n$ sudo make install\n```\n\nH2O \u306f\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5f53\u306b\u7528\u610f\u3057\u3066\u3001\u8d77\u52d5\u3057\u3066\u304a\u304d\u307e\u3059\u3002H2O \u306e\u8a2d\u5b9a\u65b9\u6cd5\u306f[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://h2o.examp1e.net/configure.html)\u306a\u3069\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```bash\n$ sudo h2o -m daemon -c /etc/h2o/h2o.conf\n```\n\n# \u5b9f\u88c5\n\n\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001BCC \u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002BCC \u3092\u4f7f\u7528\u3059\u308c\u3070 Python \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067 C \u3067\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3092 BPF \u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u306f\u3001BPF \u3092\u4f7f\u7528\u3057\u3066 OpenSSL \u3084 GnuTLS \u306e\u95a2\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3001\u305d\u306e\u7d50\u679c\u3092 Python \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u53d7\u3051\u53d6\u3063\u3066\u3001HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u8868\u793a\u3059\u308b\u65b9\u6cd5\u3092\u3068\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```python:h2sniff.py\n#!/usr/bin/python\n\n# This code is modified version of sslsniff.\n# https://github.com/iovisor/bcc/blob/master/tools/sslsniff.py\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\")\n\nfrom __future__ import print_function\nimport ctypes as ct\nfrom bcc import BPF\nimport time\nimport argparse\nimport hyperframe.frame\n\n# BPF code\nBPF_CODE = \"\"\"\n#include <linux/ptrace.h>\n#include <linux/sched.h>\n\nstruct probe_SSL_data_t {\n  u32 len;\n  char buf[500];\n};\n\nBPF_PERF_OUTPUT(perf_SSL_write);\nBPF_PERF_OUTPUT(perf_SSL_read);\n\nBPF_HASH(bufs, u32, u64);\n\nint probe_SSL_write(struct pt_regs *ctx, void *ssl, void *buf, int num) {\n  u32 pid = bpf_get_current_pid_tgid();\n  FILTER\n\n  struct probe_SSL_data_t __data = {0};\n  __data.len = num;\n\n  if (buf != 0) {\n    bpf_probe_read(&__data.buf, sizeof(__data.buf), buf);\n  }\n\n  perf_SSL_write.perf_submit(ctx, &__data, sizeof(__data));\n\n  return 0;\n}\n\nint probe_SSL_read_enter(struct pt_regs *ctx, void *ssl, void *buf, int num) {\n  u32 pid = bpf_get_current_pid_tgid();\n  FILTER\n\n  bufs.update(&pid, (u64*)&buf);\n  return 0;\n}\n\nint probe_SSL_read_exit(struct pt_regs *ctx, void *ssl, void *buf, int num) {\n  u32 pid = bpf_get_current_pid_tgid();\n  FILTER\n\n  u64 *bufp = bufs.lookup(&pid);\n  if (bufp == 0) {\n    return 0;\n  }\n\n  struct probe_SSL_data_t __data = {0};\n  __data.len = PT_REGS_RC(ctx);\n\n  if (bufp != 0) {\n    bpf_probe_read(&__data.buf, sizeof(__data.buf), (char *)*bufp);\n  }\n\n  bufs.delete(&pid);\n\n  perf_SSL_read.perf_submit(ctx, &__data, sizeof(__data));\n  return 0;\n}\n\"\"\"\n\nFRAMES = [\n    \"DATA\",\n    \"HEADERS\",\n    \"PRIORITY\",\n    \"RST_STREAM\",\n    \"SETTINGS\",\n    \"PUSH_PROMISE\",\n    \"PING\",\n    \"GOAWAY\",\n    \"WINDOW_UPDATE\",\n    \"CONTINUATION\",\n    \"ALT_SVC\",   \n]\n\nMAX_BUF_SIZE = 500\nTIME_START = time.time()\n\nclass Data(ct.Structure):\n    _fields_ = [\n        (\"len\", ct.c_uint),\n        (\"buf\", ct.c_ubyte * MAX_BUF_SIZE),\n    ]\n\ndef print_event_write(cpu, data, size):\n    print_event(cpu, data, size, \"send\")\n\ndef print_event_read(cpu, data, size):\n    print_event(cpu, data, size, \"recv\")\n\ndef print_event(cpu, data, size, rw):\n    global FRAMES, TIME_START\n\n    event = ct.cast(data, ct.POINTER(Data)).contents\n    data = event.buf[0:event.len]\n\n    if bytearray(data)[:24] == \"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\":\n    \tdata = data[24:]\n\n    while len(data) > 9:\n    \ttry:\n    \t    info = hyperframe.frame.Frame.parse_frame_header(bytearray(data)[:9])\n        except:\n            break\n\n        frame = info[0]\n        frame_len = info[1]\n\n    \ttime_s = float(time.time() - TIME_START)\n\n        flags = \",\".join(frame.flags)\n\n        last = 9 + frame_len \n        data = data[last:]\n\n        if flags == \"\":\n            print(\"[%-3.3f] %s %s frame <length=%d, stream_id=%d>\" % (time_s, rw, FRAMES[frame.type], frame_len, frame.stream_id))\n        else:\n            print(\"[%-3.3f] %s %s frame <length=%d, stream_id=%d, flags=%s>\" % (time_s, rw, FRAMES[frame.type], frame_len, frame.stream_id, flags))\n\nexamples = \"\"\"examples:\n    ./h2sniff                       # sniff OpenSSL and GnuTLS functions\n    ./h2sniff -p 181                # sniff PID 181 only\n    ./h2sniff -c curl               # sniff curl command only\n    ./h2sniff -b /usr/local/bin/h2o # sniff h2o binary\n    ./h2sniff --no-openssl          # don't show OpenSSL calls\n    ./h2sniff --no-gnutls           # don't show GnuTLS calls\n\"\"\"\n\nparser = argparse.ArgumentParser(\n    description=\"Sniff HTTP/2 frame\",\n    formatter_class=argparse.RawDescriptionHelpFormatter,\n    epilog=examples)\nparser.add_argument(\"-p\", \"--pid\", help=\"sniff this PID only.\")\nparser.add_argument(\"-c\", \"--comm\", help=\"sniff only commands matching string.\")\nparser.add_argument(\"-b\", \"--bin\", help=\"sniff binary file.\")\nparser.add_argument(\"-o\", \"--no-openssl\", action=\"store_false\", dest=\"openssl\", help=\"do not show OpenSSL calls.\")\nparser.add_argument(\"-g\", \"--no-gnutls\", action=\"store_false\", dest=\"gnutls\", help=\"do not show GnuTLS calls.\")\nparser.add_argument('-d', '--debug', dest='debug', action='count', default=0, help='debug mode.')\nargs = parser.parse_args()\n\nif args.pid:\n    BPF_CODE = BPF_CODE.replace('FILTER', 'if (pid != %s) { return 0; }' % args.pid)\nelse:\n    BPF_CODE = BPF_CODE.replace('FILTER', '')\n\nif args.debug:\n    print(BPF_CODE)\n\nb = BPF(text=BPF_CODE)\n\nif args.openssl:\n    name = \"ssl\"\n    if args.bin != None:\n        name = args.bin\n\n    try:\n        b.attach_uprobe(name=name, sym=\"SSL_write\", fn_name=\"probe_SSL_write\")\n        b.attach_uprobe(name=name, sym=\"SSL_read\", fn_name=\"probe_SSL_read_enter\")\n        b.attach_uretprobe(name=name, sym=\"SSL_read\", fn_name=\"probe_SSL_read_exit\")\n        print(\"OpenSSL: Enabled\")\n    except:\n        pass\n\nif args.gnutls:\n    name = \"gnutls\"\n    if args.bin != None:\n        name = args.bin\n\n    try:\n        b.attach_uprobe(name=name, sym=\"gnutls_record_send\", fn_name=\"probe_SSL_write\")\n        b.attach_uprobe(name=name, sym=\"gnutls_record_recv\", fn_name=\"probe_SSL_read_enter\")\n        b.attach_uretprobe(name=name, sym=\"gnutls_record_recv\", fn_name=\"probe_SSL_read_exit\")\n        print(\"GnuTLS: Enabled\")\n    except:\n        pass\n\nb[\"perf_SSL_write\"].open_perf_buffer(print_event_write)\nb[\"perf_SSL_read\"].open_perf_buffer(print_event_read)\n\nwhile 1:\n    b.kprobe_poll()\n```\n\n# \u52d5\u4f5c\u78ba\u8a8d\n\n\u3055\u3063\u305d\u304f\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u7528\u3057\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3057\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d77\u52d5\u3057\u3066\u3001nginx \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n\n```bash\n$ sudo ./h2sniff.py -c nginx\nOpenSSL: Enabled\n```\n\n\u3053\u306e\u72b6\u614b\u3067\u30d6\u30e9\u30a6\u30b6\u3084 `nghttp` \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u3001nginx \u306b\u5bfe\u3057\u3066 HTTP/2 \u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b HTTP/2 \u30d5\u30ec\u30fc\u30e0\u306e\u60c5\u5831\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n\n```\n[3.694] send SETTINGS frame <length=18, stream_id=0>\n[3.695] send WINDOW_UPDATE frame <length=4, stream_id=0>\n[3.697] send SETTINGS frame <length=0, stream_id=0, flags=ACK>\n[3.698] send HEADERS frame <length=114, stream_id=13, flags=END_HEADERS>\n[3.699] send DATA frame <length=2361, stream_id=13, flags=END_STREAM>\n[3.699] recv SETTINGS frame <length=12, stream_id=0>\n[3.700] recv PRIORITY frame <length=5, stream_id=3>\n[3.700] recv PRIORITY frame <length=5, stream_id=5>\n[3.701] recv PRIORITY frame <length=5, stream_id=7>\n[3.701] recv PRIORITY frame <length=5, stream_id=9>\n[3.702] recv PRIORITY frame <length=5, stream_id=11>\n[3.702] recv HEADERS frame <length=41, stream_id=13, flags=END_STREAM,PRIORITY,END_HEADERS>\n[3.703] recv GOAWAY frame <length=8, stream_id=0>\n```\n\n\u540c\u3058\u3088\u3046\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066 H2O \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3082\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u307f\u307e\u3059\u3002\n\n```bash\n$ sudo ./h2sniff.py -b /usr/local/bin/h2o\nOpenSSL: Enabled\n```\n\nnginx \u3068\u540c\u69d8\u306b\u3053\u306e\u72b6\u614b\u3067\u30d6\u30e9\u30a6\u30b6\u3084 `nghttp` \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u3001H2O \u306b\u5bfe\u3057\u3066 HTTP/2 \u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3059\u308b\u3068\u3001\u3053\u3061\u3089\u3082 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u306e\u60c5\u5831\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n\n```\n[2.342] recv SETTINGS frame <length=12, stream_id=0>\n[2.343] recv PRIORITY frame <length=5, stream_id=3>\n[2.344] recv PRIORITY frame <length=5, stream_id=5>\n[2.345] recv PRIORITY frame <length=5, stream_id=7>\n[2.345] recv PRIORITY frame <length=5, stream_id=9>\n[2.346] recv PRIORITY frame <length=5, stream_id=11>\n[2.346] recv HEADERS frame <length=37, stream_id=13, flags=END_STREAM,PRIORITY,END_HEADERS>\n[2.347] recv GOAWAY frame <length=8, stream_id=0>\n[2.347] send SETTINGS frame <length=12, stream_id=0>\n[2.348] send SETTINGS frame <length=0, stream_id=0, flags=ACK>\n[2.348] send HEADERS frame <length=94, stream_id=13, flags=END_HEADERS>\n[2.349] send DATA frame <length=4652, stream_id=13, flags=END_STREAM>\n```\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u3001BPF \u3092\u4f7f\u7528\u3059\u308c\u3070\u3001\u30b5\u30fc\u30d0\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306a\u304f\u3001HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n# \u554f\u984c\u70b9\n\nBPF \u3092\u4f7f\u7528\u3057\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u306e\u30c0\u30f3\u30d7\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u304c\u3001\u5b9f\u88c5\u3092\u901a\u3058\u3066\u3053\u306e\u65b9\u6cd5\u306b\u306f\u3044\u304f\u3064\u304b\u554f\u984c\u304c\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n**\u30d5\u30ec\u30fc\u30e0\u306e\u9806\u5e8f\u304c\u5165\u308c\u66ff\u308f\u308b**\n\u5148\u306b\u793a\u3057\u305f H2O \u306e\u52d5\u4f5c\u78ba\u8a8d\u7d50\u679c\u3092\u3088\u304f\u898b\u308b\u30688\u756a\u76ee\u306b GOAWAY \u30d5\u30ec\u30fc\u30e0\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e GOAWAY \u30d5\u30ec\u30fc\u30e0\u306f\u5b9f\u969b\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u6700\u5f8c\u306b\u9001\u4fe1\u3055\u308c\u3066\u304a\u308a\u3001\u672c\u6765\u306f\u6700\u5f8c\u306e\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u304c\u3001\u305d\u3046\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u306f\u304a\u305d\u3089\u304f BPF \u3092\u4f7f\u3063\u305f\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u904e\u7a0b\u306e\u3069\u3053\u304b\u3067\u3001\u5148\u306b GOAWAY \u30d5\u30ec\u30fc\u30e0\u306e\u60c5\u5831\u304c\u51e6\u7406\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u5165\u308c\u66ff\u308f\u3063\u305f\u3082\u306e\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\u30ad\u30e3\u30d7\u30c1\u30e3\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u51fa\u3057\u30bf\u30a4\u30df\u30f3\u30b0\u306a\u3069\u3092\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n**512\u30d0\u30a4\u30c8\u3092\u8d85\u3048\u308b\u30c7\u30fc\u30bf\u304c\u6271\u3048\u306a\u3044**\nBPF \u30b9\u30bf\u30c3\u30af\u5185\u3067\u306f [512 \u30d0\u30a4\u30c8](https://github.com/torvalds/linux/blob/8fa3b6f9392bf6d90cb7b908e07bd90166639f0a/tools/include/linux/filter.h#L26-L27) \u3092\u8d85\u3048\u308b\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001512 \u30d0\u30a4\u30c8\u3092\u8d85\u3048\u308b\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u6642\u306b\u3001512 \u30d0\u30a4\u30c8\u4ee5\u964d\u306b HTTP/2 \u30d5\u30ec\u30fc\u30e0\u306e\u5883\u754c\u304c\u3042\u308b\u3068\u3001\u4ee5\u964d\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u6b63\u5e38\u306b\u30c0\u30f3\u30d7\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070 1024 \u30d0\u30a4\u30c8\u306e DATA \u30d5\u30ec\u30fc\u30e0\u306e\u76f4\u5f8c\u306b GOAWAY \u30d5\u30ec\u30fc\u30e0\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001DATA \u30d5\u30ec\u30fc\u30e0\u306e\u5148\u982d 512 \u30d0\u30a4\u30c8\u307e\u3067\u3057\u304b\u6271\u3048\u306a\u3044\u305f\u3081\u3001\u305d\u306e GOAWAY \u30d5\u30ec\u30fc\u30e0\u306e\u5b58\u5728\u306b\u6c17\u3065\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u307e\u305f\u3001BPF \u306e\u30b3\u30fc\u30c9\u306f\u30ab\u30fc\u30cd\u30eb\u306e\u5185\u90e8\u3067\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u304b\u3089\u3001\u524d\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u623b\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3001\u3064\u307e\u308a\u30eb\u30fc\u30d7\u306a\u3069\u304c\u4f7f\u3048\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081 BPF \u306e\u30b3\u30fc\u30c9\u5185\u3067\u30d5\u30ec\u30fc\u30e0\u3092\u5c0f\u3055\u304f\u5206\u5272\u3059\u308b\u306e\u3082\u96e3\u3057\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\nBPF \u3092\u4f7f\u3063\u3066 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30c0\u30f3\u30d7\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u691c\u8a3c\u3057\u307e\u3057\u305f\u3002BPF \u3092\u4f7f\u7528\u3059\u308c\u3070\u3001\u30b5\u30fc\u30d0\u30fc\u3084\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u624b\u3092\u3044\u308c\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001\u30b3\u30de\u30f3\u30c9\u4e00\u3064\u3067 HTTP/2 \u30d5\u30ec\u30fc\u30e0\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u304d\u308b\u975e\u5e38\u306b\u4fbf\u5229\u306a\u30c4\u30fc\u30eb\u304c\u4f5c\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u6271\u3048\u308b\u30c7\u30fc\u30bf\u306e\u9577\u3055\u306b\u5236\u9650\u304c\u3042\u308b\u3053\u3068\u3084\u3001\u30d5\u30ec\u30fc\u30e0\u306e\u9806\u5e8f\u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3057\u307e\u3046\u306a\u3069\u306e\u554f\u984c\u304c\u3042\u308a\u3001\u5b9f\u7528\u7684\u306b\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n", "tags": ["http2", "BPF", "Python"]}