{"context": "BlueZ\u3092D-Bus\u304b\u3089\u4f7f\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\nLE\u306eAdvertise\u3059\u308b\u65b9\u6cd5\u3092\u8abf\u3079\u307e\u3057\u305f\u3002\n\nBluez\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\n\nD-Bus \u304b\u3089 LE advertiset\u3092\u3059\u308b\u306b\u306f5.30\u4ee5\u964d\u304c\u5fc5\u8981\u3067\u3059\u3002\u4e0b\u8a18\u306f5.40\u3067\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n\nleadv.py\n\nBluez\u306eexample-advertisement\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\nleadv.py\n#!/usr/bin/python\n\nimport dbus\nimport dbus.mainloop.glib\nimport dbus.service\nimport gobject as GObject\n\nmainloop = None\n\nBLUEZ_SERVICE_NAME = 'org.bluez'\nLE_ADVERTISING_MANAGER_IFACE = 'org.bluez.LEAdvertisingManager1'\nDBUS_OM_IFACE = 'org.freedesktop.DBus.ObjectManager'\nDBUS_PROP_IFACE = 'org.freedesktop.DBus.Properties'\n\nLE_ADVERTISEMENT_IFACE = 'org.bluez.LEAdvertisement1'\n\nclass FixedAdvertisement(dbus.service.Object):\n    PATH_BASE = '/org/bluez/example/fixedadvertisement'\n\n    def __init__(self, bus, index, advertising_type):\n        self.path = self.PATH_BASE + str(index)\n        self.bus = bus\n        self.ad_type = advertising_type\n        dbus.service.Object.__init__(self, bus, self.path)\n\n    def get_path(self):\n        return dbus.ObjectPath(self.path)\n\n    @dbus.service.method(DBUS_PROP_IFACE,\n                         in_signature='s',\n                         out_signature='a{sv}')\n    def GetAll(self, interface):\n        if interface != LE_ADVERTISEMENT_IFACE:\n            raise InvalidArgsException()\n\n        properties = dict()\n        properties['Type'] = self.ad_type\n        return properties\n\n    @dbus.service.method(LE_ADVERTISEMENT_IFACE,\n                         in_signature='',\n                         out_signature='')\n    def Release(self):\n        print '%s: Released!' % self.path\n\ndef register_ad_cb():\n    print 'Advertisement registered'\n\ndef register_ad_error_cb(error):\n    print 'Failed to register advertisement: ' + str(error)\n    mainloop.quit()\n\ndef find_adapter(bus):\n    remote_om = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, '/'),\n                               DBUS_OM_IFACE)\n    objects = remote_om.GetManagedObjects()\n\n    for o, props in objects.iteritems():\n        if LE_ADVERTISING_MANAGER_IFACE in props:\n            return o\n\n    return None\n\ndef main():\n    global mainloop\n\n    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)\n\n    bus = dbus.SystemBus()\n\n    adapter = find_adapter(bus)\n    if not adapter:\n        print 'LEAdvertisingManager1 interface not found'\n        return\n\n    ad_manager = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, adapter),\n                                LE_ADVERTISING_MANAGER_IFACE)\n\n    ad_manager.RegisterAdvertisement(FixedAdvertisement(bus, 0, 'broadcast').get_path(), {},\n                                     reply_handler=register_ad_cb,\n                                     error_handler=register_ad_error_cb)\n\n    mainloop = GObject.MainLoop()\n    mainloop.run()\n\nif __name__ == '__main__':\n    main()\n\n\n\nFixedAdvertisement\u30af\u30e9\u30b9\u306f\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\n\u30b5\u30fc\u30d3\u30b9\u30c7\u30fc\u30e2\u30f3\u304b\u3089\u547c\u3070\u308c\u308b\u306e\u3067\u3001GetAll()\u3068Remove()\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30af\u30e9\u30b9\u306b\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \nGetAll()\u3067\u306f\u3001\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30c7\u30fc\u30bf\u3092propertis\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\nRemove()\u306f\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u505c\u6b62\u3059\u308b\u3068\u304d\u306b\u547c\u3070\u308c\u308c\u307e\u3059\u3002\nGetAll()\u3068Remove()\u306f\u5b9a\u7fa9\u3059\u308b\u969b\u306b@dbus.service.method\u306e\u304a\u307e\u3058\u306a\u3044\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\nregister_ad_cb()\u3068register_ad_error_cb()\u306fRegisterAdvertisement()\u3067\u767b\u9332\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3067\u3059\u3002\nfind_adapter()\u306fAdapter\u3092\u63a2\u3057\u3066\u3001LE_ADVERTISING_MANAGER_IFACE\u306e\u6709\u7121\u304b\u3089LE advertise\u304c\u4f7f\u3048\u308b\u304b\u5224\u5b9a\u3057\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\n\n\nmainloop\u306e\u304a\u307e\u3058\u306a\u3044\nbus\u3068adapter\u306e\u53d6\u5f97\n\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u53d6\u5f97\n FixedAdvertisement\u3092\u751f\u6210\u3057\u3066\u3001RegisterAdvertisement()\u306b\u767b\u9332\u3059\u308b\n \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\n\n\n\n\n\u52d5\u4f5c\u4f8b\n\n\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u306f\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u7b49\u306e\u30a2\u30d7\u30ea\u3067\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\npi@raspberrypi: $ ./leadv.py\nAdvertisement registered\n\n\n\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3067\u6307\u5b9a\u3067\u304d\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\n\nType : broadcast or peripheral\nServiceUUIDs\nManufacturerData\nSolicitUUIDs\nServiceData\nIncludeTxPower\n\n\n\u53c2\u8003\n\nBluez \u306e example-advertisement https://git.kernel.org/cgit/bluetooth/bluez.git/tree/test/example-advertisement\n\nBluez \u306e advertising-api.txt https://git.kernel.org/cgit/bluetooth/bluez.git/tree/doc/advertising-api.txt\n\n\nBlueZ\u3092D-Bus\u304b\u3089\u4f7f\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\n\nLE\u306eAdvertise\u3059\u308b\u65b9\u6cd5\u3092\u8abf\u3079\u307e\u3057\u305f\u3002\n\n# Bluez\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\n* D-Bus \u304b\u3089 LE advertiset\u3092\u3059\u308b\u306b\u306f5.30\u4ee5\u964d\u304c\u5fc5\u8981\u3067\u3059\u3002\u4e0b\u8a18\u306f5.40\u3067\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n# leadv.py\n* Bluez\u306eexample-advertisement\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n```py:leadv.py\n#!/usr/bin/python\n\nimport dbus\nimport dbus.mainloop.glib\nimport dbus.service\nimport gobject as GObject\n\nmainloop = None\n\nBLUEZ_SERVICE_NAME = 'org.bluez'\nLE_ADVERTISING_MANAGER_IFACE = 'org.bluez.LEAdvertisingManager1'\nDBUS_OM_IFACE = 'org.freedesktop.DBus.ObjectManager'\nDBUS_PROP_IFACE = 'org.freedesktop.DBus.Properties'\n\nLE_ADVERTISEMENT_IFACE = 'org.bluez.LEAdvertisement1'\n\nclass FixedAdvertisement(dbus.service.Object):\n    PATH_BASE = '/org/bluez/example/fixedadvertisement'\n\n    def __init__(self, bus, index, advertising_type):\n        self.path = self.PATH_BASE + str(index)\n        self.bus = bus\n        self.ad_type = advertising_type\n        dbus.service.Object.__init__(self, bus, self.path)\n\n    def get_path(self):\n        return dbus.ObjectPath(self.path)\n\n    @dbus.service.method(DBUS_PROP_IFACE,\n                         in_signature='s',\n                         out_signature='a{sv}')\n    def GetAll(self, interface):\n        if interface != LE_ADVERTISEMENT_IFACE:\n            raise InvalidArgsException()\n\n        properties = dict()\n        properties['Type'] = self.ad_type\n        return properties\n\n    @dbus.service.method(LE_ADVERTISEMENT_IFACE,\n                         in_signature='',\n                         out_signature='')\n    def Release(self):\n        print '%s: Released!' % self.path\n\ndef register_ad_cb():\n    print 'Advertisement registered'\n\ndef register_ad_error_cb(error):\n    print 'Failed to register advertisement: ' + str(error)\n    mainloop.quit()\n\ndef find_adapter(bus):\n    remote_om = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, '/'),\n                               DBUS_OM_IFACE)\n    objects = remote_om.GetManagedObjects()\n\n    for o, props in objects.iteritems():\n        if LE_ADVERTISING_MANAGER_IFACE in props:\n            return o\n\n    return None\n\ndef main():\n    global mainloop\n\n    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)\n\n    bus = dbus.SystemBus()\n\n    adapter = find_adapter(bus)\n    if not adapter:\n        print 'LEAdvertisingManager1 interface not found'\n        return\n\n    ad_manager = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, adapter),\n                                LE_ADVERTISING_MANAGER_IFACE)\n\n    ad_manager.RegisterAdvertisement(FixedAdvertisement(bus, 0, 'broadcast').get_path(), {},\n                                     reply_handler=register_ad_cb,\n                                     error_handler=register_ad_error_cb)\n\n    mainloop = GObject.MainLoop()\n    mainloop.run()\n\nif __name__ == '__main__':\n    main()\n```\n\n* FixedAdvertisement\u30af\u30e9\u30b9\u306f\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n * \u30b5\u30fc\u30d3\u30b9\u30c7\u30fc\u30e2\u30f3\u304b\u3089\u547c\u3070\u308c\u308b\u306e\u3067\u3001GetAll()\u3068Remove()\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30af\u30e9\u30b9\u306b\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \n * GetAll()\u3067\u306f\u3001\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30c7\u30fc\u30bf\u3092propertis\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n * Remove()\u306f\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u505c\u6b62\u3059\u308b\u3068\u304d\u306b\u547c\u3070\u308c\u308c\u307e\u3059\u3002\n * GetAll()\u3068Remove()\u306f\u5b9a\u7fa9\u3059\u308b\u969b\u306b@dbus.service.method\u306e\u304a\u307e\u3058\u306a\u3044\u304c\u5fc5\u8981\u3067\u3059\u3002\n* register_ad_cb()\u3068register_ad_error_cb()\u306fRegisterAdvertisement()\u3067\u767b\u9332\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3067\u3059\u3002\n* find_adapter()\u306fAdapter\u3092\u63a2\u3057\u3066\u3001LE_ADVERTISING_MANAGER_IFACE\u306e\u6709\u7121\u304b\u3089LE advertise\u304c\u4f7f\u3048\u308b\u304b\u5224\u5b9a\u3057\u307e\u3059\u3002\n* \u30e1\u30a4\u30f3\n * mainloop\u306e\u304a\u307e\u3058\u306a\u3044\n * bus\u3068adapter\u306e\u53d6\u5f97\n * \u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u53d6\u5f97\n *  FixedAdvertisement\u3092\u751f\u6210\u3057\u3066\u3001RegisterAdvertisement()\u306b\u767b\u9332\u3059\u308b\n *  \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\n\n# \u52d5\u4f5c\u4f8b\n* \u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u306f\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u7b49\u306e\u30a2\u30d7\u30ea\u3067\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```\npi@raspberrypi: $ ./leadv.py\nAdvertisement registered\n```\n\n# \u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3067\u6307\u5b9a\u3067\u304d\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\n* Type : broadcast or peripheral\n* ServiceUUIDs\n* ManufacturerData\n* SolicitUUIDs\n* ServiceData\n* IncludeTxPower\n\n\n# \u53c2\u8003\n* Bluez \u306e example-advertisement https://git.kernel.org/cgit/bluetooth/bluez.git/tree/test/example-advertisement\n* Bluez \u306e advertising-api.txt https://git.kernel.org/cgit/bluetooth/bluez.git/tree/doc/advertising-api.txt\n", "tags": ["BLE", "bluetooth", "Bluez", "Dbus"]}