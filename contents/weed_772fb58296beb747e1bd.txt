{"tags": ["Ruby", "Rails", "RubyMine", "RSpec", "rails3"], "context": " More than 1 year has passed since last update.\n\n\nComponent\nversion\n\n\n\n\nRubyMine\n5.0(Windows)\n\n\nRails\n3.2.12\n\n\nRspec\n2.13.0\n\n\nFactoryGirl\n4.2.0\n\n\nFaker\n1.1.2\n\n\nDatabaseCleaner\n0.9.1\n\n\n\n\nSetup\n\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\nGemfile\ngroup :development, :test do\n  gem \"rspec-rails\"\n  gem \"factory_girl_rails\"\nend\n\ngroup :test do\n  gem \"faker\"\n  gem \"capybara\"\n  gem \"database_cleaner\"\nend\n\n\n\nbundle install\nTools > Run Rails Script > \"rails\", \"generate rspec:install\"\nTools > Run Rails Generator > model > Contact firstname:string lastname:string email:string phone:references\nTools > Run Rails Generator > model > Phone contact:references phone_type:string phone:string\nTools > Run Rake Task > db:migrate\n\n\n1st red\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/contact_spec.rb\nrequire 'spec_helper'\n\ndescribe Contact do\n  it \"is valid with a firstname and lastname\"\n  it \"is invalid without a firstname\"\n  it \"is invalid without a lastname\"\n  it \"is invalid with a duplicate email address\"\nend\n\n\n\nRun > Run > spec\n\npending\n\nToggle auto-test\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/contact_spec.rb\nrequire 'spec_helper'\n\ndescribe Contact do\n  it \"is valid with a firstname and lastname\" do\n    contact = Contact.new(\n        firstname: 'Tatsuro',\n        lastname: 'Ueda',\n        email: 'weed_7777@yahoo.co.jp'\n    )\n    expect(contact).to be_valid\n  end\n\n  it \"is invalid without a firstname\" do\n    expect(Contact.new(firstname: nil).to have(1).errors_on(:firstname))\n  end\n\n  it \"is invalid without a lastname\" do\n    expect(Contact.new(lastname: nil).to have(1).errors_on(:lastname))\n  end\n\n  it \"is invalid with a duplicate email address\" do\n    Contact.create(\n        firstname: 'Tatsuro', lastname: 'Ueda', email: 'weed_7777@yahoo.co.jp'\n    )\n    contact = Contact.new(\n        firstname: 'hoge', lastname: 'fuga', email: 'weed_7777@yahoo.co.jp'\n    )\n    expect(contact).to have(1).errors_on(:email)\n  end\nend\n\n\n\n\u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u3053\u3051\u308b\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\napp/models/contact.rb\n  validates :firstname, presence: true\n  validates :lastname, presence: true\n  validates :email, presence: true, uniqueness: true\n\n\n\n\u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\n2nd red\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/phone_spec.rb\ndescribe Phone do\n  it \"does not allow duplicate phone numbers per contact\"\n  it \"allows two contacts to share a phone number\"\nend\n\n\n\n\u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001pending\u306b\u306a\u308b\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/phone_spec.rb\ndescribe Phone do\n  it \"does not allow duplicate phone numbers per contact\" do\n    contact = Contact.create(\n        firstname: 'Tatsuro', lastname: 'Ueda', email: 'weed_7777@yahoo.co.jp'\n    )\n    home_phone = contact.phones.create(\n        phone_type: 'home',\n        phone: '01-2345-6789'\n    )\n    mobile_phone = contact.phones.create(\n        phone_type: 'mobile',\n        phone: '01-2345-6789'\n    )\n    expect(mobile_phone).to_not be_valid\n  end\n\n  it \"allows two contacts to share a phone number\" do\n    contact = Contact.create(\n        firstname: 'Tatsuro', lastname: 'Ueda', email: 'weed_7777@yahoo.co.jp'\n    )\n    contact.phones.create(\n        phone_type: 'home',\n        phone: '01-2345-6789'\n    )\n    other_contact = Contact.new\n    other_phone = other_contact.phones.build(\n        phone_type: 'home',\n        phone: '01-2345-6789'\n    )\n    expect(other_phone).to be_valid\n  end\nend\n\n\n\n\u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u3053\u3051\u308b\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\napp/models/contact.rb\n  #  belongs_to :phone\n  has_many :phones\n\n\n\napp/models/phone.rb\n  attr_accessible :phone, :phone_type\n  validates :phone, uniqueness: { scope: :contact_id }\n\n\n\n\u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\n3rd red\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/contact_spec.rb\n  describe \"#name\" do\n    it \"returns a contact's full name as a string\" do\n      contact = Contact.new(\n          firstname: \"Tatsuro\", lastname: \"Ueda\", email: \"weed_7777@yahoo.co.jp\"\n      )\n      expect(contact.name).to eq 'Tatsuro Ueda'\n    end\n  end\n\n\n\n\nRun > Run > spec\n\n\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5931\u6557\u3059\u308b\n\nToggle auto-test\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\napp/models/contact.rb\n  def name\n    [firstname, lastname].join \" \"\n  end\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\n4th red\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/contact_spec.rb\n  describe \"#by_letter\" do\n    it \"returns a sorted array of results that match\" do\n      smith = Contact.create(\n          firstname: 'John', lastname: 'Smith', email: 'jsmith@example.com'\n      )\n      jones = Contact.create(\n          firstname: 'Tim', lastname: 'Jones', email: 'tjones@example.com'\n      )\n      johnson = Contact.create(\n          firstname: 'John', lastname: 'Johnson', email: 'jjohnson@example.com'\n      )\n\n      expect(Contact.by_letter(\"J\")).to eq [johnson, jones]\n    end\n  end\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5931\u6557\u3059\u308b\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\napp/models/contact.rb\n  def self.by_letter(letter)\n    where(\"lastname LIKE ?\", \"#{letter}%\").order(:lastname)\n  end\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\n\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\nbefore\u3068context\u3092\u4f7f\u3063\u3066\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u6574\u7406\u3059\u308b\u3002\n\nspec/models/contact_spec.rb\n  describe \"filter last name by letter\" do\n    before :each do\n      @smith = Contact.create(\n          firstname: 'John', lastname: 'Smith', email: 'jsmith@example.com'\n      )\n      @jones = Contact.create(\n          firstname: 'Tim', lastname: 'Jones', email: 'tjones@example.com'\n      )\n      @johnson = Contact.create(\n          firstname: 'John', lastname: 'Johnson', email: 'jjohnson@example.com'\n      )\n    end\n\n    context \"matching letters\" do\n      it \"returns a sorted array of results that match\" do\n        expect(Contact.by_letter(\"J\")).to eq [@johnson, @jones]\n      end\n    end\n\n    context \"non-matching letters\" do\n      it \"returns a sorted array of results that match\" do\n        expect(Contact.by_letter(\"J\")).to_not include smith\n      end\n    end\n  end\n\n\n\u304a\u3057\u307e\u3044\u3002\n\n\u30d6\u30ed\u30b0\u3084\u3063\u3066\u307e\u3059\uff1aPAPA-tronix !\n| Component       | version      |\n|:----------------|-------------:|\n| RubyMine        | 5.0(Windows) |\n| Rails           | 3.2.12       |\n| Rspec           | 2.13.0       |\n| FactoryGirl     | 4.2.0        |\n| Faker           | 1.1.2        |\n| DatabaseCleaner | 0.9.1        |\n\n## Setup\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:Gemfile\ngroup :development, :test do\n  gem \"rspec-rails\"\n  gem \"factory_girl_rails\"\nend\n\ngroup :test do\n  gem \"faker\"\n  gem \"capybara\"\n  gem \"database_cleaner\"\nend\n```\n\n1. bundle install\n\n1. Tools > Run Rails Script > \"rails\", \"generate rspec:install\"\n\n1. Tools > Run Rails Generator > model > Contact firstname:string lastname:string email:string phone:references\n\n1. Tools > Run Rails Generator > model > Phone contact:references phone_type:string phone:string\n\n8. Tools > Run Rake Task > db:migrate\n\n## 1st red\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/contact_spec.rb\nrequire 'spec_helper'\n\ndescribe Contact do\n  it \"is valid with a firstname and lastname\"\n  it \"is invalid without a firstname\"\n  it \"is invalid without a lastname\"\n  it \"is invalid with a duplicate email address\"\nend\n```\n\n1. Run > Run > spec\n\npending\n\n1. Toggle auto-test\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/contact_spec.rb\nrequire 'spec_helper'\n\ndescribe Contact do\n  it \"is valid with a firstname and lastname\" do\n    contact = Contact.new(\n        firstname: 'Tatsuro',\n        lastname: 'Ueda',\n        email: 'weed_7777@yahoo.co.jp'\n    )\n    expect(contact).to be_valid\n  end\n\n  it \"is invalid without a firstname\" do\n    expect(Contact.new(firstname: nil).to have(1).errors_on(:firstname))\n  end\n\n  it \"is invalid without a lastname\" do\n    expect(Contact.new(lastname: nil).to have(1).errors_on(:lastname))\n  end\n\n  it \"is invalid with a duplicate email address\" do\n    Contact.create(\n        firstname: 'Tatsuro', lastname: 'Ueda', email: 'weed_7777@yahoo.co.jp'\n    )\n    contact = Contact.new(\n        firstname: 'hoge', lastname: 'fuga', email: 'weed_7777@yahoo.co.jp'\n    )\n    expect(contact).to have(1).errors_on(:email)\n  end\nend\n```\n\n1. \u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u3053\u3051\u308b\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:app/models/contact.rb\n  validates :firstname, presence: true\n  validates :lastname, presence: true\n  validates :email, presence: true, uniqueness: true\n```\n\n1. \u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n## 2nd red\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/phone_spec.rb\ndescribe Phone do\n  it \"does not allow duplicate phone numbers per contact\"\n  it \"allows two contacts to share a phone number\"\nend\n```\n\n1. \u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001pending\u306b\u306a\u308b\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/phone_spec.rb\ndescribe Phone do\n  it \"does not allow duplicate phone numbers per contact\" do\n    contact = Contact.create(\n        firstname: 'Tatsuro', lastname: 'Ueda', email: 'weed_7777@yahoo.co.jp'\n    )\n    home_phone = contact.phones.create(\n        phone_type: 'home',\n        phone: '01-2345-6789'\n    )\n    mobile_phone = contact.phones.create(\n        phone_type: 'mobile',\n        phone: '01-2345-6789'\n    )\n    expect(mobile_phone).to_not be_valid\n  end\n\n  it \"allows two contacts to share a phone number\" do\n    contact = Contact.create(\n        firstname: 'Tatsuro', lastname: 'Ueda', email: 'weed_7777@yahoo.co.jp'\n    )\n    contact.phones.create(\n        phone_type: 'home',\n        phone: '01-2345-6789'\n    )\n    other_contact = Contact.new\n    other_phone = other_contact.phones.build(\n        phone_type: 'home',\n        phone: '01-2345-6789'\n    )\n    expect(other_phone).to be_valid\n  end\nend\n```\n\n1. \u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u3053\u3051\u308b\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:app/models/contact.rb\n  #  belongs_to :phone\n  has_many :phones\n```\n\n```ruby:app/models/phone.rb\n  attr_accessible :phone, :phone_type\n  validates :phone, uniqueness: { scope: :contact_id }\n```\n\n1. \u4fdd\u5b58\u3059\u308b\u3068\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n## 3rd red\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/contact_spec.rb\n  describe \"#name\" do\n    it \"returns a contact's full name as a string\" do\n      contact = Contact.new(\n          firstname: \"Tatsuro\", lastname: \"Ueda\", email: \"weed_7777@yahoo.co.jp\"\n      )\n      expect(contact.name).to eq 'Tatsuro Ueda'\n    end\n  end\n\n```\n\n1. Run > Run > spec\n\n\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5931\u6557\u3059\u308b\n\n1. Toggle auto-test\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:app/models/contact.rb\n  def name\n    [firstname, lastname].join \" \"\n  end\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n## 4th red\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/contact_spec.rb\n  describe \"#by_letter\" do\n    it \"returns a sorted array of results that match\" do\n      smith = Contact.create(\n          firstname: 'John', lastname: 'Smith', email: 'jsmith@example.com'\n      )\n      jones = Contact.create(\n          firstname: 'Tim', lastname: 'Jones', email: 'tjones@example.com'\n      )\n      johnson = Contact.create(\n          firstname: 'John', lastname: 'Johnson', email: 'jjohnson@example.com'\n      )\n\n      expect(Contact.by_letter(\"J\")).to eq [johnson, jones]\n    end\n  end\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5931\u6557\u3059\u308b\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:app/models/contact.rb\n  def self.by_letter(letter)\n    where(\"lastname LIKE ?\", \"#{letter}%\").order(:lastname)\n  end\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n## \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\n`before`\u3068`context`\u3092\u4f7f\u3063\u3066\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u6574\u7406\u3059\u308b\u3002\n\n```ruby:spec/models/contact_spec.rb\n  describe \"filter last name by letter\" do\n    before :each do\n      @smith = Contact.create(\n          firstname: 'John', lastname: 'Smith', email: 'jsmith@example.com'\n      )\n      @jones = Contact.create(\n          firstname: 'Tim', lastname: 'Jones', email: 'tjones@example.com'\n      )\n      @johnson = Contact.create(\n          firstname: 'John', lastname: 'Johnson', email: 'jjohnson@example.com'\n      )\n    end\n\n    context \"matching letters\" do\n      it \"returns a sorted array of results that match\" do\n        expect(Contact.by_letter(\"J\")).to eq [@johnson, @jones]\n      end\n    end\n\n    context \"non-matching letters\" do\n      it \"returns a sorted array of results that match\" do\n        expect(Contact.by_letter(\"J\")).to_not include smith\n      end\n    end\n  end\n```\n\n\u304a\u3057\u307e\u3044\u3002\n\n-----\n\u30d6\u30ed\u30b0\u3084\u3063\u3066\u307e\u3059\uff1a[PAPA-tronix !](http://weed.cocolog-nifty.com/wzero3es/)"}