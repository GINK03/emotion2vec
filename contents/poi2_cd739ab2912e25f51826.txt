{"context": "\n\n\u554f\u984c\n\u3069\u304d\u3069\u304d\u30c8\u30ed\u30c3\u30b3 \u6a2a\u3078\u306a2016.7.2 \u554f\u984c\nhttp://nabetani.sakura.ne.jp/hena/orde05dokitruck/\n\n\u3042\u306a\u305f\u306f\u30c8\u30ed\u30c3\u30b3\u306b\u4e57\u3063\u3066\u3044\u307e\u3059\u3002 \n\u76ee\u306e\u524d\u306b\u306f\u5206\u304b\u308c\u9053\u304c\uff01 \n\u751f\u304d\u6b8b\u308b\u305f\u3081\u306b\u306f\u3069\u306e\u9053\u306b\u884c\u3051\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u3069\u3046\u66f8\u304f\u3067\u306f\u3001\u5931\u6557\u3059\u306a\u308f\u3061\u6b7b\u3067\u3042\u308b\u3002\n\n\u30a2\u30a4\u30c7\u30a3\u30a2\n\n\u7b2c\u4e00\u5370\u8c61\n\u3042\u307f\u3060\u304f\u3058\u554f\u984c\u306f\u9806\u8d70\u3059\u308b\u304b\u9006\u8d70\u3059\u308b\u304b\u304c\u7b2c\u4e00\u306b\u8003\u3048\u308b\u30dd\u30a4\u30f3\u30c8\u3002\n\u4eca\u56de\u306e\u5834\u5408\u306f\u9006\u8d70\u306e\u307b\u3046\u304c\u30b7\u30f3\u30d7\u30eb\u306b\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3060\u308d\u3046\u3068\u5224\u65ad\u3057\u305f\u3002\n\uff13\u56de\u76ee\u306b\u3057\u3066\u521d\u306e\u6642\u9593\u5185\u306b\u30af\u30ea\u30a2\u3067\u304d\u305d\u3046\u306a\u4e88\u611f\uff01\n\n\u89e3\u304d\u65b9\n\u30b3\u30fc\u30b9\u3092\u9006\u8d70\u3057\u3066\u3001\u8d70\u884c\u53ef\u80fd\u306a\u30ec\u30fc\u30eb\u306eidx\u3092\u8a08\u7b97\u3057\u3001\u9006\u8d70\u3057\u304d\u3063\u305f\u3068\u304d\u306eidx\u3092\u8d70\u884c\u53ef\u80fd\u306a\u30b9\u30bf\u30fc\u30c8\u30dd\u30b8\u30b7\u30e7\u30f3\u3068\u3057\u3066\u89e3\u7b54\u3059\u308b\u3002\n\n\u30b3\u30fc\u30c9\nrequire 'minitest/autorun'\n\n# Ruby on Rails \u3068\u306f\u95a2\u4fc2\u306a\u3044\n# \u5404\u30ec\u30fc\u30eb\u30d1\u30fc\u30c4\u3054\u3068\u306e\u5404\u30ec\u30fc\u30eb\u306e\u9077\u79fb\u5148\u3092\u4fdd\u6301\u3057\u305f\u914d\u5217\nRAILS = [\n  [\n    [0],\n    [0, 1],\n    [1, 2],\n  ],\n  [\n    [0],\n    [1, 2],\n    [0, 2],\n  ],\n  [\n    [0, 1],\n    [1],\n    [0, 2],\n  ],\n  [\n    [0, 1],\n    [1, 2],\n    [2],\n  ],\n  [\n    [0, 2],\n    [1],\n    [1, 2],\n  ],\n  [\n    [0, 2],\n    [0, 1],\n    [2],\n  ],\n  [\n    [0],\n    [],\n    [2],\n  ],[\n    [],\n    [1],\n    [2],\n  ],\n  [\n    [0],\n    [1],\n    []\n  ]\n]\n\ndef parser input\n  input.split(\"\").map{|s| s.to_i - 1}\nend\n\ndef encode ary\n  return \"-\" if ary.empty?\n  ary.sort.map{|i| %w(a b c)[i] }.join(\"\")\nend\n\ndef main input\n  rail_ids = parser input\n  reverse_rail_ids = rail_ids.reverse\n\n  alive = [0, 1, 2]\n  reverse_rail_ids.each do |id|\n    alive = alive.map{ |i| RAILS[id][i] }.flatten.uniq.compact\n  end\n  encode alive\nend\n\nclass TestDokidokiTruck < Minitest::Test\n  def test_dokidoki_truck\n    assert_equal(main(\"1728398\"), \"bc\" )\n    assert_equal(main(\"789\"), \"-\" )\n    assert_equal(main(\"274\"), \"ac\" )\n    assert_equal(main(\"185\"), \"abc\" )\n    assert_equal(main(\"396\"), \"ab\" )\n    assert_equal(main(\"1278\"), \"abc\" )\n    assert_equal(main(\"7659832\"), \"a\" )\n    assert_equal(main(\"178\"), \"bc\" )\n    assert_equal(main(\"189\"), \"ab\" )\n    assert_equal(main(\"197\"), \"a\" )\n    assert_equal(main(\"278\"), \"ac\" )\n    assert_equal(main(\"289\"), \"bc\" )\n    assert_equal(main(\"297\"), \"a\" )\n    assert_equal(main(\"378\"), \"ac\" )\n    assert_equal(main(\"389\"), \"b\" )\n    assert_equal(main(\"397\"), \"ab\" )\n    assert_equal(main(\"478\"), \"c\" )\n    assert_equal(main(\"489\"), \"bc\" )\n    assert_equal(main(\"497\"), \"ab\" )\n    assert_equal(main(\"578\"), \"bc\" )\n    assert_equal(main(\"589\"), \"b\" )\n    assert_equal(main(\"597\"), \"ac\" )\n    assert_equal(main(\"678\"), \"c\" )\n    assert_equal(main(\"689\"), \"ab\" )\n    assert_equal(main(\"697\"), \"ac\" )\n    assert_equal(main(\"899\"), \"b\" )\n    assert_equal(main(\"7172\"), \"ac\" )\n    assert_equal(main(\"54787\"), \"bc\" )\n    assert_equal(main(\"83713\"), \"bc\" )\n    assert_equal(main(\"149978\"), \"-\" )\n    assert_equal(main(\"159735\"), \"abc\" )\n    assert_equal(main(\"1449467\"), \"abc\" )\n    assert_equal(main(\"9862916\"), \"b\" )\n    assert_equal(main(\"96112873\"), \"ab\" )\n    assert_equal(main(\"311536789\"), \"-\" )\n    assert_equal(main(\"281787212994\"), \"abc\" )\n    assert_equal(main(\"697535114542\"), \"ac\" )\n  end\nend\n\n% ruby dokidoki_truck.rb\nRun options: --seed 63120\n\n# Running:\n\n.\n\nFinished in 0.009959s, 100.4142 runs/s, 3715.3250 assertions/s.\n\n1 runs, 37 assertions, 0 failures, 0 errors, 0 skips\n\n\n\u611f\u60f3\n\u4eca\u56de\u306f\u53c2\u52a0\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u5b85\u3067\u3082\u304f\u3082\u304f\u89e3\u304d\u307e\u3057\u305f\u3002\n\uff13\uff10\u301c\uff13\uff15\u5206\u304f\u3089\u3044\u3067\u89e3\u3051\u305f\u306e\u3067\u3001\u521d\u306e\u6642\u9593\u5185\u30af\u30ea\u30a2\uff01\n\uff18\u6708\u306f\u4f1a\u5834\u3067\u751f\u6b7b\u3092\u8ced\u3051\u305f\u6226\u3044\u3092\u52dd\u3061\u629c\u304d\u305f\u3044\u3002\n# \u554f\u984c\n\n\u3069\u304d\u3069\u304d\u30c8\u30ed\u30c3\u30b3 \u6a2a\u3078\u306a2016.7.2 \u554f\u984c\nhttp://nabetani.sakura.ne.jp/hena/orde05dokitruck/\n\n> \u3042\u306a\u305f\u306f\u30c8\u30ed\u30c3\u30b3\u306b\u4e57\u3063\u3066\u3044\u307e\u3059\u3002 \n> \u76ee\u306e\u524d\u306b\u306f\u5206\u304b\u308c\u9053\u304c\uff01 \n> \u751f\u304d\u6b8b\u308b\u305f\u3081\u306b\u306f\u3069\u306e\u9053\u306b\u884c\u3051\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u3069\u3046\u66f8\u304f\u3067\u306f\u3001\u5931\u6557\u3059\u306a\u308f\u3061\u6b7b\u3067\u3042\u308b\u3002\n\n# \u30a2\u30a4\u30c7\u30a3\u30a2\n\n## \u7b2c\u4e00\u5370\u8c61\n\n\u3042\u307f\u3060\u304f\u3058\u554f\u984c\u306f\u9806\u8d70\u3059\u308b\u304b\u9006\u8d70\u3059\u308b\u304b\u304c\u7b2c\u4e00\u306b\u8003\u3048\u308b\u30dd\u30a4\u30f3\u30c8\u3002\n\u4eca\u56de\u306e\u5834\u5408\u306f\u9006\u8d70\u306e\u307b\u3046\u304c\u30b7\u30f3\u30d7\u30eb\u306b\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3060\u308d\u3046\u3068\u5224\u65ad\u3057\u305f\u3002\n\uff13\u56de\u76ee\u306b\u3057\u3066\u521d\u306e\u6642\u9593\u5185\u306b\u30af\u30ea\u30a2\u3067\u304d\u305d\u3046\u306a\u4e88\u611f\uff01\n\n## \u89e3\u304d\u65b9\n\n\u30b3\u30fc\u30b9\u3092\u9006\u8d70\u3057\u3066\u3001\u8d70\u884c\u53ef\u80fd\u306a\u30ec\u30fc\u30eb\u306eidx\u3092\u8a08\u7b97\u3057\u3001\u9006\u8d70\u3057\u304d\u3063\u305f\u3068\u304d\u306eidx\u3092\u8d70\u884c\u53ef\u80fd\u306a\u30b9\u30bf\u30fc\u30c8\u30dd\u30b8\u30b7\u30e7\u30f3\u3068\u3057\u3066\u89e3\u7b54\u3059\u308b\u3002\n\n# \u30b3\u30fc\u30c9\n\n``` rb\nrequire 'minitest/autorun'\n\n# Ruby on Rails \u3068\u306f\u95a2\u4fc2\u306a\u3044\n# \u5404\u30ec\u30fc\u30eb\u30d1\u30fc\u30c4\u3054\u3068\u306e\u5404\u30ec\u30fc\u30eb\u306e\u9077\u79fb\u5148\u3092\u4fdd\u6301\u3057\u305f\u914d\u5217\nRAILS = [\n  [\n    [0],\n    [0, 1],\n    [1, 2],\n  ],\n  [\n    [0],\n    [1, 2],\n    [0, 2],\n  ],\n  [\n    [0, 1],\n    [1],\n    [0, 2],\n  ],\n  [\n    [0, 1],\n    [1, 2],\n    [2],\n  ],\n  [\n    [0, 2],\n    [1],\n    [1, 2],\n  ],\n  [\n    [0, 2],\n    [0, 1],\n    [2],\n  ],\n  [\n    [0],\n    [],\n    [2],\n  ],[\n    [],\n    [1],\n    [2],\n  ],\n  [\n    [0],\n    [1],\n    []\n  ]\n]\n\ndef parser input\n  input.split(\"\").map{|s| s.to_i - 1}\nend\n\ndef encode ary\n  return \"-\" if ary.empty?\n  ary.sort.map{|i| %w(a b c)[i] }.join(\"\")\nend\n\ndef main input\n  rail_ids = parser input\n  reverse_rail_ids = rail_ids.reverse\n\n  alive = [0, 1, 2]\n  reverse_rail_ids.each do |id|\n    alive = alive.map{ |i| RAILS[id][i] }.flatten.uniq.compact\n  end\n  encode alive\nend\n\nclass TestDokidokiTruck < Minitest::Test\n  def test_dokidoki_truck\n    assert_equal(main(\"1728398\"), \"bc\" )\n    assert_equal(main(\"789\"), \"-\" )\n    assert_equal(main(\"274\"), \"ac\" )\n    assert_equal(main(\"185\"), \"abc\" )\n    assert_equal(main(\"396\"), \"ab\" )\n    assert_equal(main(\"1278\"), \"abc\" )\n    assert_equal(main(\"7659832\"), \"a\" )\n    assert_equal(main(\"178\"), \"bc\" )\n    assert_equal(main(\"189\"), \"ab\" )\n    assert_equal(main(\"197\"), \"a\" )\n    assert_equal(main(\"278\"), \"ac\" )\n    assert_equal(main(\"289\"), \"bc\" )\n    assert_equal(main(\"297\"), \"a\" )\n    assert_equal(main(\"378\"), \"ac\" )\n    assert_equal(main(\"389\"), \"b\" )\n    assert_equal(main(\"397\"), \"ab\" )\n    assert_equal(main(\"478\"), \"c\" )\n    assert_equal(main(\"489\"), \"bc\" )\n    assert_equal(main(\"497\"), \"ab\" )\n    assert_equal(main(\"578\"), \"bc\" )\n    assert_equal(main(\"589\"), \"b\" )\n    assert_equal(main(\"597\"), \"ac\" )\n    assert_equal(main(\"678\"), \"c\" )\n    assert_equal(main(\"689\"), \"ab\" )\n    assert_equal(main(\"697\"), \"ac\" )\n    assert_equal(main(\"899\"), \"b\" )\n    assert_equal(main(\"7172\"), \"ac\" )\n    assert_equal(main(\"54787\"), \"bc\" )\n    assert_equal(main(\"83713\"), \"bc\" )\n    assert_equal(main(\"149978\"), \"-\" )\n    assert_equal(main(\"159735\"), \"abc\" )\n    assert_equal(main(\"1449467\"), \"abc\" )\n    assert_equal(main(\"9862916\"), \"b\" )\n    assert_equal(main(\"96112873\"), \"ab\" )\n    assert_equal(main(\"311536789\"), \"-\" )\n    assert_equal(main(\"281787212994\"), \"abc\" )\n    assert_equal(main(\"697535114542\"), \"ac\" )\n  end\nend\n```\n\n```\n% ruby dokidoki_truck.rb\nRun options: --seed 63120\n\n# Running:\n\n.\n\nFinished in 0.009959s, 100.4142 runs/s, 3715.3250 assertions/s.\n\n1 runs, 37 assertions, 0 failures, 0 errors, 0 skips\n```\n\n# \u611f\u60f3\n\n\u4eca\u56de\u306f\u53c2\u52a0\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u5b85\u3067\u3082\u304f\u3082\u304f\u89e3\u304d\u307e\u3057\u305f\u3002\n\uff13\uff10\u301c\uff13\uff15\u5206\u304f\u3089\u3044\u3067\u89e3\u3051\u305f\u306e\u3067\u3001\u521d\u306e\u6642\u9593\u5185\u30af\u30ea\u30a2\uff01\n\uff18\u6708\u306f\u4f1a\u5834\u3067\u751f\u6b7b\u3092\u8ced\u3051\u305f\u6226\u3044\u3092\u52dd\u3061\u629c\u304d\u305f\u3044\u3002\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f"]}