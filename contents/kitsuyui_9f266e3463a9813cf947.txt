{"context": " More than 1 year has passed since last update.\n\nnginx \u306e reuseport \u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306f\nnginx 1.9.1 \u304b\u3089\u306e\u65b0\u6a5f\u80fd\u3067\u3001 SO_REUSEPORT \u3068\u3044\u3046\u30bd\u30b1\u30c3\u30c8\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6709\u52b9\u5316\u3059\u308b\u3082\u306e\u3002\nhttps://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1/\n\nSO_REUSEPORT \u3068\u306f\nLinux Kernel 3.9 \u4ee5\u964d\u306e\u6a5f\u80fd\u3067\u3001 1 \u3064\u306e\u30dd\u30fc\u30c8\u3092\u8907\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u3067 bind \u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3082\u306e\u3002\nhttp://man7.org/linux/man-pages/man7/socket.7.html\n\nSO_REUSEPORT (since Linux 3.9)\nPermits multiple AF_INET or AF_INET6 sockets to be bound to an\nidentical socket address.  This option must be set on each\nsocket (including the first socket) prior to calling bind(2)\non the socket.  To prevent port hijacking, all of the\nprocesses binding to the same address must have the same\neffective UID.  This option can be employed with both TCP and\nUDP sockets.\n(\u4ee5\u4e0b\u7565)\n\n\u3064\u307e\u308a\u3001\u540c\u3058\u30dd\u30fc\u30c8\u3092\u4f7f\u3046\u5225\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u306b\u3087\u304d\u306b\u3087\u304d\u5efa\u3066\u3089\u308c\u308b\u3002\n\u306a\u306e\u3067\u3001\u9ad8\u901f\u5316\u3068\u30c0\u30a6\u30f3\u30bf\u30a4\u30e0\u306e\u306a\u3044\u30c7\u30d7\u30ed\u30a4\u306b\u306f\u4fbf\u5229\u3002\n\nDocker \u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\u30e1\u30b8\u30e3\u30fc\u306a\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3067 3.9 \u4ee5\u4e0a\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u306a\u3063\u3066\u308b\u306e\u3082\u306e\u306f\u5c11\u306a\u3044\u3002\n\u3068\u3053\u308d\u3067 docker-machine \u306e VirtualBox \u30c9\u30e9\u30a4\u30d0\u30fc\u304c\u63d0\u4f9b\u3059\u308b boot2docker \u306e\u30ab\u30fc\u30cd\u30eb\u306f 2015 \u5e74 10 \u6708 13 \u65e5\u73fe\u5728\u3001 Linux v4.1.10 (AUFS v4.1-20151012) \u3002\nhttps://github.com/boot2docker/boot2docker/releases\n\u3053\u308c\u306f\u884c\u3051\u308b\uff01\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u306e\u4f7f\u3063\u3066\u308b OS X \u4e0a\u3067\u3001 Docker on boot2docker \u306a\u69cb\u6210\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067 docker-compose (\u5143 fig) \u3067\u697d\u3092\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u666e\u901a\u306e nginx \u306e\u4f7f\u3044\u65b9\u306a\u3089 HUP \u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308c\u3070 reload (graceful restart) \u3059\u308b\u306e\u3067\u5145\u5206\u3060\u304c\u3001\n\u7279\u306b Docker \u306e\u5834\u5408\u306f\u300c\u30b3\u30f3\u30c6\u30ca\u3054\u3068\u5165\u308c\u66ff\u3048\u305f\u3044\u300d\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u983b\u7e41\u306b\u3042\u308a\u3046\u308b\u306e\u3067\u3001\u3053\u306e\u30b1\u30fc\u30b9\u3068\u3088\u308a\u30de\u30c3\u30c1\u3057\u305d\u3046\u3060\u3002\n\u30b3\u30f3\u30c6\u30ca\u306e\u30af\u30e9\u30b9\u30bf\u3054\u3068 Green-Blue-Deploy \u3059\u308b\u5834\u5408\u3068\u304b\u3002\n\n\u7528\u610f\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3002\n\u4ee5\u4e0b\u306e 3 \u3064\u306e\u307f\u3002\n\ndocker-compose.yml\nnginx \u306e default.conf (reuseport \u3092 ON \u306b\u3057\u305f\u3082\u306e\u3002 HTTP \u306e\u5fdc\u7b54\u306f\u5358\u306b \"OK\" \u3068\u3060\u3051\u8fd4\u7b54\u3059\u308b )\ntest.sh (\u4e00\u62ec\u3067\u5b9f\u884c\u3059\u308b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8)\n\n3 \u3064\u306e nginx \u30d7\u30ed\u30bb\u30b9\u3092\u30db\u30b9\u30c8\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5229\u7528\u3059\u308b\u8a2d\u5b9a\u3067\u7acb\u3061\u4e0a\u3052\u308b\u3002\nreuseport \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001 3 \u3064\u3068\u3082 80 \u756a\u306e\u30dd\u30fc\u30c8\u3067\u5f85\u3061\u53d7\u3051\u3001\n\u65e9\u3044\u8005\u52dd\u3061\u3067\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u78ba\u7acb\u3057\u3066\u666e\u901a\u306e HTTP \u306e\u5fdc\u7b54\u3092\u3059\u308b\u3002\nCtrl-C \u3067\u7d42\u4e86\u3002\n\ndocker-compose.yml\nnginx_1:\n  image: nginx\n  net: host\n  volumes:\n    - ./conf.d:/etc/nginx/conf.d\n  ports:\n    - \"80:80\"\n\nnginx_2:\n  image: nginx\n  net: host\n  volumes:\n    - ./conf.d:/etc/nginx/conf.d\n  ports:\n    - \"80:80\"\n\nnginx_3:\n  image: nginx\n  net: host\n  volumes:\n    - ./conf.d:/etc/nginx/conf.d\n  ports:\n    - \"80:80\"\n\n\n\nconf.d/default.conf\nserver {\n    server_name localhost;\n    listen 80 reuseport;\n    location / {\n        return 200 'OK';\n    }\n}\n\n\n\ntest.sh\n#!/bin/sh\n\nMACHINE=\"$1\"\neval \"$(docker-machine env \"$MACHINE\")\"\nTARGET_HOST=$(docker-machine ip \"$MACHINE\")\n\ndocker-compose up -d\nwhile sleep 1; do\n  curl -fsSL \"$TARGET_HOST\"\ndone > /dev/null &\nSUB=\"$!\"\ndocker-compose logs\nkill \"$SUB\"\ndocker-compose stop\ndocker-compose rm -f\n\n\n\n\u5b9f\u884c\u4f8b\n$ ./test.sh default\nCreating nginx2_nginx_2_1...\nCreating nginx2_nginx_3_1...\nCreating nginx2_nginx_1_1...\nAttaching to nginx2_nginx_1_1, nginx2_nginx_3_1, nginx2_nginx_2_1\nnginx_3_1 | 192.168.99.1 - - [13/Oct/2015:12:30:54 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_2_1 | 192.168.99.1 - - [13/Oct/2015:12:30:55 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_3_1 | 192.168.99.1 - - [13/Oct/2015:12:30:56 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_2_1 | 192.168.99.1 - - [13/Oct/2015:12:30:57 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_1_1 | 192.168.99.1 - - [13/Oct/2015:12:30:58 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_2_1 | 192.168.99.1 - - [13/Oct/2015:12:30:59 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_1_1 | 192.168.99.1 - - [13/Oct/2015:12:31:00 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\n\n\u304a\u30fc\u3001 nginx1_1, nginx2_1, nginx3_1 \u304c\u5165\u308c\u66ff\u308f\u308a\u306a\u304c\u3089\u5fdc\u7b54\u3057\u3066\u308b\u3002\u30a4\u30a4\u30ab\u30f3\u30b8\u3060\u3002\n\u5b9f\u969b\u306e\u4f7f\u7528\u4f8b\u3067\u306f\u3001\n\n\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u3092\u30c7\u30d7\u30ed\u30a4\n\u65e7\u3044\u30af\u30e9\u30b9\u30bf\u306e nginx \u30b3\u30f3\u30c6\u30ca\u306b QUIT \u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308b (graceful shutdown)\n\n\u306e\u9806\u3067\u884c\u3048\u3070\u826f\u3044\u3068\u601d\u3046\u3002\n\n\u4f59\u8ac7\n\n\u306a\u304a\u3001 HAProxy \u306f SO_REUSEPORT \u3092\u81ea\u52d5\u3067\u6709\u52b9\u5316\u3057\u3066\u304f\u308c\u308b\u3089\u3057\u3044\nhttps://github.com/haproxy/haproxy/blob/3cd0ae963e958d5d5fb838e120f1b0e9361a92f8/src/proto_tcp.c#L792-L798\nhttp://diary.sorah.jp/2015/02/09/20150209\n# nginx \u306e reuseport \u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306f\n\nnginx 1.9.1 \u304b\u3089\u306e\u65b0\u6a5f\u80fd\u3067\u3001 SO_REUSEPORT \u3068\u3044\u3046\u30bd\u30b1\u30c3\u30c8\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6709\u52b9\u5316\u3059\u308b\u3082\u306e\u3002\nhttps://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1/\n\n# SO_REUSEPORT \u3068\u306f\n\nLinux Kernel 3.9 \u4ee5\u964d\u306e\u6a5f\u80fd\u3067\u3001 1 \u3064\u306e\u30dd\u30fc\u30c8\u3092\u8907\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u3067 bind \u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3082\u306e\u3002\n\nhttp://man7.org/linux/man-pages/man7/socket.7.html\n> SO_REUSEPORT (since Linux 3.9)\n> Permits multiple AF_INET or AF_INET6 sockets to be bound to an\n> identical socket address.  This option must be set on each\n> socket (including the first socket) prior to calling bind(2)\n> on the socket.  To prevent port hijacking, all of the\n> processes binding to the same address must have the same\n> effective UID.  This option can be employed with both TCP and\n> UDP sockets.\n(\u4ee5\u4e0b\u7565)\n\n\n\u3064\u307e\u308a\u3001\u540c\u3058\u30dd\u30fc\u30c8\u3092\u4f7f\u3046\u5225\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u306b\u3087\u304d\u306b\u3087\u304d\u5efa\u3066\u3089\u308c\u308b\u3002\n\u306a\u306e\u3067\u3001\u9ad8\u901f\u5316\u3068\u30c0\u30a6\u30f3\u30bf\u30a4\u30e0\u306e\u306a\u3044\u30c7\u30d7\u30ed\u30a4\u306b\u306f\u4fbf\u5229\u3002\n\n# Docker \u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\n\u30e1\u30b8\u30e3\u30fc\u306a\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3067 3.9 \u4ee5\u4e0a\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u306a\u3063\u3066\u308b\u306e\u3082\u306e\u306f\u5c11\u306a\u3044\u3002\n\n\u3068\u3053\u308d\u3067 docker-machine \u306e VirtualBox \u30c9\u30e9\u30a4\u30d0\u30fc\u304c\u63d0\u4f9b\u3059\u308b boot2docker \u306e\u30ab\u30fc\u30cd\u30eb\u306f 2015 \u5e74 10 \u6708 13 \u65e5\u73fe\u5728\u3001 Linux v4.1.10 (AUFS v4.1-20151012) \u3002\nhttps://github.com/boot2docker/boot2docker/releases\n\n\u3053\u308c\u306f\u884c\u3051\u308b\uff01\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u306e\u4f7f\u3063\u3066\u308b OS X \u4e0a\u3067\u3001 Docker on boot2docker \u306a\u69cb\u6210\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067 docker-compose (\u5143 fig) \u3067\u697d\u3092\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u666e\u901a\u306e nginx \u306e\u4f7f\u3044\u65b9\u306a\u3089 HUP \u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308c\u3070 reload (graceful restart) \u3059\u308b\u306e\u3067\u5145\u5206\u3060\u304c\u3001\n\u7279\u306b Docker \u306e\u5834\u5408\u306f\u300c\u30b3\u30f3\u30c6\u30ca\u3054\u3068\u5165\u308c\u66ff\u3048\u305f\u3044\u300d\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u983b\u7e41\u306b\u3042\u308a\u3046\u308b\u306e\u3067\u3001\u3053\u306e\u30b1\u30fc\u30b9\u3068\u3088\u308a\u30de\u30c3\u30c1\u3057\u305d\u3046\u3060\u3002\n\u30b3\u30f3\u30c6\u30ca\u306e\u30af\u30e9\u30b9\u30bf\u3054\u3068 Green-Blue-Deploy \u3059\u308b\u5834\u5408\u3068\u304b\u3002\n\n# \u7528\u610f\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3002\n\n\u4ee5\u4e0b\u306e 3 \u3064\u306e\u307f\u3002\n\n- docker-compose.yml\n- nginx \u306e default.conf (reuseport \u3092 ON \u306b\u3057\u305f\u3082\u306e\u3002 HTTP \u306e\u5fdc\u7b54\u306f\u5358\u306b \"OK\" \u3068\u3060\u3051\u8fd4\u7b54\u3059\u308b )\n- test.sh (\u4e00\u62ec\u3067\u5b9f\u884c\u3059\u308b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8)\n\n3 \u3064\u306e nginx \u30d7\u30ed\u30bb\u30b9\u3092\u30db\u30b9\u30c8\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5229\u7528\u3059\u308b\u8a2d\u5b9a\u3067\u7acb\u3061\u4e0a\u3052\u308b\u3002\nreuseport \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001 3 \u3064\u3068\u3082 80 \u756a\u306e\u30dd\u30fc\u30c8\u3067\u5f85\u3061\u53d7\u3051\u3001\n\u65e9\u3044\u8005\u52dd\u3061\u3067\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u78ba\u7acb\u3057\u3066\u666e\u901a\u306e HTTP \u306e\u5fdc\u7b54\u3092\u3059\u308b\u3002\nCtrl-C \u3067\u7d42\u4e86\u3002\n\n```yaml:docker-compose.yml\nnginx_1:\n  image: nginx\n  net: host\n  volumes:\n    - ./conf.d:/etc/nginx/conf.d\n  ports:\n    - \"80:80\"\n\nnginx_2:\n  image: nginx\n  net: host\n  volumes:\n    - ./conf.d:/etc/nginx/conf.d\n  ports:\n    - \"80:80\"\n\nnginx_3:\n  image: nginx\n  net: host\n  volumes:\n    - ./conf.d:/etc/nginx/conf.d\n  ports:\n    - \"80:80\"\n```\n\n```nginx:conf.d/default.conf\nserver {\n    server_name localhost;\n    listen 80 reuseport;\n    location / {\n        return 200 'OK';\n    }\n}\n```\n\n```bash:test.sh\n#!/bin/sh\n\nMACHINE=\"$1\"\neval \"$(docker-machine env \"$MACHINE\")\"\nTARGET_HOST=$(docker-machine ip \"$MACHINE\")\n\ndocker-compose up -d\nwhile sleep 1; do\n  curl -fsSL \"$TARGET_HOST\"\ndone > /dev/null &\nSUB=\"$!\"\ndocker-compose logs\nkill \"$SUB\"\ndocker-compose stop\ndocker-compose rm -f\n```\n\n# \u5b9f\u884c\u4f8b\n\n```console\n$ ./test.sh default\nCreating nginx2_nginx_2_1...\nCreating nginx2_nginx_3_1...\nCreating nginx2_nginx_1_1...\nAttaching to nginx2_nginx_1_1, nginx2_nginx_3_1, nginx2_nginx_2_1\nnginx_3_1 | 192.168.99.1 - - [13/Oct/2015:12:30:54 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_2_1 | 192.168.99.1 - - [13/Oct/2015:12:30:55 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_3_1 | 192.168.99.1 - - [13/Oct/2015:12:30:56 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_2_1 | 192.168.99.1 - - [13/Oct/2015:12:30:57 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_1_1 | 192.168.99.1 - - [13/Oct/2015:12:30:58 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_2_1 | 192.168.99.1 - - [13/Oct/2015:12:30:59 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\nnginx_1_1 | 192.168.99.1 - - [13/Oct/2015:12:31:00 +0000] \"GET / HTTP/1.1\" 200 2 \"-\" \"curl/7.43.0\" \"-\"\n```\n\n\u304a\u30fc\u3001 nginx1_1, nginx2_1, nginx3_1 \u304c\u5165\u308c\u66ff\u308f\u308a\u306a\u304c\u3089\u5fdc\u7b54\u3057\u3066\u308b\u3002\u30a4\u30a4\u30ab\u30f3\u30b8\u3060\u3002\n\n\u5b9f\u969b\u306e\u4f7f\u7528\u4f8b\u3067\u306f\u3001\n\n- \u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u3092\u30c7\u30d7\u30ed\u30a4\n- \u65e7\u3044\u30af\u30e9\u30b9\u30bf\u306e nginx \u30b3\u30f3\u30c6\u30ca\u306b QUIT \u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308b (graceful shutdown)\n\n\u306e\u9806\u3067\u884c\u3048\u3070\u826f\u3044\u3068\u601d\u3046\u3002\n\n# \u4f59\u8ac7\n\n## \u306a\u304a\u3001 HAProxy \u306f SO_REUSEPORT \u3092\u81ea\u52d5\u3067\u6709\u52b9\u5316\u3057\u3066\u304f\u308c\u308b\u3089\u3057\u3044\nhttps://github.com/haproxy/haproxy/blob/3cd0ae963e958d5d5fb838e120f1b0e9361a92f8/src/proto_tcp.c#L792-L798\nhttp://diary.sorah.jp/2015/02/09/20150209\n", "tags": ["SO_REUSEPORT", "nginx", "docker", "docker-compose", "docker-machine"]}