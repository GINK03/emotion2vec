{"context": "\n\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n\n\nsine curve\u3092\u5b66\u7fd2\u3057\u305f\u6642\u306eweight\u3068bias\u3092\u3082\u3068\u306b\u81ea\u5206\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u518d\u73fe\u3057\u3066\u51fa\u529b\u3092\u8a08\u7b97\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\nconvolution\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u3002\nPython\u306endarray\u306f\u307b\u3068\u3093\u3069\u308f\u304b\u3089\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u5b9f\u88c5\u3092\u8a66\u307f\u3066\u3044\u308b\u3002\n\u8cc7\u6599 https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html\n\u8cc7\u6599 http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/ifstatements.html\n\u53c2\u8003 http://qiita.com/7of9/items/586f62fa46dc3409d954 \u306e\u30b3\u30e1\u30f3\u30c8\n\u53c2\u8003 http://qiita.com/7of9/items/06fee8f425c7a514377b#comment-70abc9bc48ed226fd6c5\n\ncode v0.1\n\nread_mode_var.py\nimport numpy as np\n\nmodel_var = np.load('model_variables.npy')\n\nprint \"all shape:\",(model_var.shape)\n\ndef calc_conv(src, weight, bias):\n    wgt = weight.shape\n    print wgt # debug\n    conv = list(range(bias.size))\n    if wgt[0] == 1:\n        for idx2 in range(wgt[1]):\n            conv[idx2] = src * weight[0,idx2]\n    else:\n        for idx1 in range(wgt[0]):\n            for idx2 in range(wgt[1]):\n                conv[idx2] = src[idx1] * weight[idx1,idx2]\n    return conv # return list\n\nindata = 2.718  # for (1,N) e.g. (1,7)\ninp1_weight = model_var[2]\ninp1_bias = model_var[3]\n\n#indata = [1,2,3,4,5,6,7] # for (N,N) e.g. (7,7)\n#inp1_weight = model_var[4]\n#inp1_bias = model_var[5]\n\nconv1 = calc_conv(indata, inp1_weight, inp1_bias)\nprint (inp1_weight)\nprint (inp1_bias)\nprint ('conv:',conv1)\n\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u3002\n$ python read_model_var.py \nall shape: (10,)\n(1, 7)\n[[-4.58573723 -4.27450418 -3.75889063  4.51949883 -4.02780342 -4.10122681\n   4.0842309 ]]\n[ 0.97008353  0.70625514  0.27048966 -0.83405548  0.57475132  0.64893931\n -0.45576799]\n('conv:', [-12.464033786773681, -11.618102374076843, -10.216664729118348, 12.283997806549072, -10.947569698333741, -11.14713446044922, 11.10093958568573])\n\nconv:\u306b\u95a2\u3057\u3066\u3001google spreadsheet\u3068\u8fd1\u3044\u5024\u306f\u51fa\u305f\u3002\n\n\n\u8ab2\u984c\nif wgt[0] == 1:\u3068\u3057\u3066\u51e6\u7406\u3092\u5206\u3051\u3066\u3044\u308b\u3002\nelse:\u306e\u51e6\u7406\u3060\u3051\u3067\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6012\u3089\u308c\u305f\u3002\n\nTraceback (most recent call last):\n  File \"read_model_var.py\", line 30, in \n    conv1 = calc_conv(indata, inp1_weight, inp1_bias)\n  File \"read_model_var.py\", line 19, in calc_conv\n    conv[idx2] = src[idx1] * weight[idx1,idx2]\nTypeError: 'float' object has no attribute 'getitem'\n\nif wgt[0] == 1:\u306a\u3057\u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f\u8abf\u67fb\u3092\u8981\u3059\u308b\u3002\n\ncode v0.2\n\u305d\u3082\u305d\u3082\nindata = 2.718 # for (1,N) e.g. (1,7)\n\u306f\nindata = [ 2.718 ] # for (1,N) e.g. (1,7)\n\u304c\u6b63\u3057\u304b\u3063\u305f\u3002\n1\u3064\u306efloat\u3067\u306f\u306a\u304f\u3001\uff11\u8981\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u6271\u3046\u306e\u3060\u3063\u305f\u3002\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u306a\u3063\u305f\u3002\n\nread_model_var.py\n#import sys\nimport numpy as np\n\nmodel_var = np.load('model_variables.npy')\n\nprint \"all shape:\",(model_var.shape)\n\ndef calc_conv(src, weight, bias):\n    wgt = weight.shape\n    print wgt # debug\n    conv = list(range(bias.size))\n    for idx1 in range(wgt[0]):\n        for idx2 in range(wgt[1]):\n            conv[idx2] = src[idx1] * weight[idx1,idx2]\n    return conv # return list\n\nindata = [ 2.718 ] # for (1,N) e.g. (1,7)\ninp1_weight = model_var[2]\ninp1_bias = model_var[3]\n\n#indata = [1,2,3,4,5,6,7] # for (N,N) e.g. (7,7)\n#inp1_weight = model_var[4]\n#inp1_bias = model_var[5]\n\nconv1 = calc_conv(indata, inp1_weight, inp1_bias)\nprint (inp1_weight)\nprint (inp1_bias)\nprint ('conv:',conv1)\n\n\n\ncode v0.3 (add bias)\n\nread_model_var.py\n'''\nv0.3 Dec. 07, 2016\n    - calc_conv() > add bias\nv0.2 Dec. 07, 2016\n    - fix calc_conv() treating src as a list\nv0.1 Dec. 07, 2016\n    - add calc_conv()\n'''\n\nimport numpy as np\n\nmodel_var = np.load('model_variables.npy')\n\nprint \"all shape:\",(model_var.shape)\n\ndef calc_conv(src, weight, bias):\n    wgt = weight.shape\n    print wgt # debug\n    #conv = list(range(bias.size))\n    conv = [0.0] * bias.size\n    # weight\n    for idx1 in range(wgt[0]):\n        for idx2 in range(wgt[1]):\n            conv[idx2] = conv[idx2] + src[idx1] * weight[idx1,idx2]\n    # bias\n    for idx2 in range(wgt[1]):\n        conv[idx2] = conv[idx2] + bias[idx2]\n    return conv # return list\n\nindata = [ 2.718 ] # for (1,N) e.g. (1,7)\ninp1_weight = model_var[2]\ninp1_bias = model_var[3]\n\n#indata = [1,2,3,4,5,6,7] # for (N,N) e.g. (7,7)\n#inp1_weight = model_var[4]\n#inp1_bias = model_var[5]\n\nconv1 = calc_conv(indata, inp1_weight, inp1_bias)\nprint (inp1_weight)\nprint (inp1_bias)\nprint ('conv:',conv1)\n\n\n\ncode v0.4 > 2x2 network example added\n\u5165\u529b\u304c\u8907\u6570\u306e\u5834\u5408\u306e\u4f8b\u3068\u3057\u3066\u30012x2\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a08\u7b97\u7528\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3002\nndarray\u306e\u7528\u610f\u306e\u4ed5\u65b9\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u60c5\u5831\u611f\u8b1d\u3067\u3059\u3002\u3000\nhttp://qiita.com/richi40/items/6b3af6f4b00d62dbe8e1\n\nread_model_var.py\n'''\nv0.4 Dec. 10, 2016\n    - add 2x2 network example\nv0.3 Dec. 07, 2016\n    - calc_conv() > add bias\nv0.2 Dec. 07, 2016\n    - fix calc_conv() treating src as a list\nv0.1 Dec. 07, 2016\n    - add calc_conv()\n'''\n\nimport numpy as np\n\nmodel_var = np.load('model_variables.npy')\n\nprint \"all shape:\",(model_var.shape)\n\ndef calc_conv(src, weight, bias):\n    wgt = weight.shape\n    print wgt # debug\n    #conv = list(range(bias.size))\n    conv = [0.0] * bias.size\n    # weight\n    for idx1 in range(wgt[0]):\n        for idx2 in range(wgt[1]):\n            conv[idx2] = conv[idx2] + src[idx1] * weight[idx1,idx2]\n    # bias\n    for idx2 in range(wgt[1]):\n        conv[idx2] = conv[idx2] + bias[idx2]\n    return conv # return list\n\n#indata = [ 2.718 ] # for (1,N) e.g. (1,7)\n#inp1_weight = model_var[2]\n#inp1_bias = model_var[3]\n\n#indata = [1,2,3,4,5,6,7] # for (N,N) e.g. (7,7)\n#inp1_weight = model_var[4]\n#inp1_bias = model_var[5]\n\nindata = [ 3, 1 ] # for 2x2 network\ninp1_weight = np.array([ [4,1], [5,9] ], dtype=np.float)\ninp1_bias = np.array([ 2, 6 ], dtype=np.float)\n\nconv1 = calc_conv(indata, inp1_weight, inp1_bias)\nprint (inp1_weight)\nprint (inp1_bias)\nprint ('conv:',conv1)\n\n\n\n\u7d50\u679c\n$ python read_model_var.py \nall shape: (10,)\n(2, 2)\n[[ 4.  1.]\n [ 5.  9.]]\n[ 2.  6.]\n('conv:', [19.0, 18.0])\n\n\n\u8a66\u3057\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u4ee5\u4e0b\u30021,3\u306finput\u30026,2\u306fbias\u3002\u7dda\u4e0a\u306e\u5024\u306fweight\u3002\n\n3x4 + 1x5 + 2 = 19\n3x1 + 1x9 + 6 = 18\n\u5408\u3063\u3066\u3044\u305d\u3046\u3002\n\u554f\u984c\u306fTensorFlow\u306e\u5b9f\u884c\u7d50\u679c\u306eweight\u306e\u30aa\u30fc\u30c0\u30fc(column major order / row major order\u306e\u3069\u3061\u3089\u304b\uff09\u3002\n\u5b9f\u969b\u306b\u8a08\u7b97\u3092\u3057\u3066\u5927\u5e45\u306b\u305a\u308c\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u304b\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n```\n\n[sine curve\u3092\u5b66\u7fd2\u3057\u305f\u6642\u306eweight\u3068bias](http://qiita.com/7of9/items/f7b2e0eeea3b7fdc632c)\u3092\u3082\u3068\u306b\u81ea\u5206\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u518d\u73fe\u3057\u3066\u51fa\u529b\u3092\u8a08\u7b97\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n\nconvolution\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u3002\n\nPython\u306endarray\u306f\u307b\u3068\u3093\u3069\u308f\u304b\u3089\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u5b9f\u88c5\u3092\u8a66\u307f\u3066\u3044\u308b\u3002\n\n\u8cc7\u6599 https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html\n\u8cc7\u6599 http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/ifstatements.html\n\u53c2\u8003 http://qiita.com/7of9/items/586f62fa46dc3409d954 \u306e\u30b3\u30e1\u30f3\u30c8\n\u53c2\u8003 http://qiita.com/7of9/items/06fee8f425c7a514377b#comment-70abc9bc48ed226fd6c5\n\n### code v0.1\n\n```read_mode_var.py\nimport numpy as np\n\nmodel_var = np.load('model_variables.npy')\n\nprint \"all shape:\",(model_var.shape)\n\ndef calc_conv(src, weight, bias):\n\twgt = weight.shape\n\tprint wgt # debug\n\tconv = list(range(bias.size))\n\tif wgt[0] == 1:\n\t\tfor idx2 in range(wgt[1]):\n\t\t\tconv[idx2] = src * weight[0,idx2]\n\telse:\n\t\tfor idx1 in range(wgt[0]):\n\t\t\tfor idx2 in range(wgt[1]):\n\t\t\t\tconv[idx2] = src[idx1] * weight[idx1,idx2]\n\treturn conv # return list\n\nindata = 2.718  # for (1,N) e.g. (1,7)\ninp1_weight = model_var[2]\ninp1_bias = model_var[3]\n\n#indata = [1,2,3,4,5,6,7] # for (N,N) e.g. (7,7)\n#inp1_weight = model_var[4]\n#inp1_bias = model_var[5]\n\nconv1 = calc_conv(indata, inp1_weight, inp1_bias)\nprint (inp1_weight)\nprint (inp1_bias)\nprint ('conv:',conv1)\n```\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u3002\n\n`$ python read_model_var.py \nall shape: (10,)\n(1, 7)\n[[-4.58573723 -4.27450418 -3.75889063  4.51949883 -4.02780342 -4.10122681\n   4.0842309 ]]\n[ 0.97008353  0.70625514  0.27048966 -0.83405548  0.57475132  0.64893931\n -0.45576799]\n('conv:', [-12.464033786773681, -11.618102374076843, -10.216664729118348, 12.283997806549072, -10.947569698333741, -11.14713446044922, 11.10093958568573])\n`\n\nconv:\u306b\u95a2\u3057\u3066\u3001google spreadsheet\u3068\u8fd1\u3044\u5024\u306f\u51fa\u305f\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/d5b197ae-406d-6c0b-f1d3-950e13c636a1.png)\n\n### \u8ab2\u984c\n\n`if wgt[0] == 1:`\u3068\u3057\u3066\u51e6\u7406\u3092\u5206\u3051\u3066\u3044\u308b\u3002\n\nelse:\u306e\u51e6\u7406\u3060\u3051\u3067\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6012\u3089\u308c\u305f\u3002\n\n> Traceback (most recent call last):\n  File \"read_model_var.py\", line 30, in <module>\n    conv1 = calc_conv(indata, inp1_weight, inp1_bias)\n  File \"read_model_var.py\", line 19, in calc_conv\n    conv[idx2] = src[idx1] * weight[idx1,idx2]\nTypeError: 'float' object has no attribute '__getitem__'\n\n\n`if wgt[0] == 1:`\u306a\u3057\u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f\u8abf\u67fb\u3092\u8981\u3059\u308b\u3002\n\n## code v0.2\n\n\u305d\u3082\u305d\u3082\n`indata = 2.718 # for (1,N) e.g. (1,7)`\n\u306f\n`indata = [ 2.718 ] # for (1,N) e.g. (1,7)`\n\u304c\u6b63\u3057\u304b\u3063\u305f\u3002\n1\u3064\u306efloat\u3067\u306f\u306a\u304f\u3001\uff11\u8981\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u6271\u3046\u306e\u3060\u3063\u305f\u3002\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u306a\u3063\u305f\u3002\n\n```read_model_var.py\n#import sys\nimport numpy as np\n\nmodel_var = np.load('model_variables.npy')\n\nprint \"all shape:\",(model_var.shape)\n\ndef calc_conv(src, weight, bias):\n\twgt = weight.shape\n\tprint wgt # debug\n\tconv = list(range(bias.size))\n\tfor idx1 in range(wgt[0]):\n\t\tfor idx2 in range(wgt[1]):\n\t\t\tconv[idx2] = src[idx1] * weight[idx1,idx2]\n\treturn conv # return list\n\nindata = [ 2.718 ] # for (1,N) e.g. (1,7)\ninp1_weight = model_var[2]\ninp1_bias = model_var[3]\n\n#indata = [1,2,3,4,5,6,7] # for (N,N) e.g. (7,7)\n#inp1_weight = model_var[4]\n#inp1_bias = model_var[5]\n\nconv1 = calc_conv(indata, inp1_weight, inp1_bias)\nprint (inp1_weight)\nprint (inp1_bias)\nprint ('conv:',conv1)\n```\n\n### code v0.3 (add bias)\n\n```read_model_var.py\n'''\nv0.3 Dec. 07, 2016\n\t- calc_conv() > add bias\nv0.2 Dec. 07, 2016\n\t- fix calc_conv() treating src as a list\nv0.1 Dec. 07, 2016\n\t- add calc_conv()\n'''\n\nimport numpy as np\n\nmodel_var = np.load('model_variables.npy')\n\nprint \"all shape:\",(model_var.shape)\n\ndef calc_conv(src, weight, bias):\n\twgt = weight.shape\n\tprint wgt # debug\n\t#conv = list(range(bias.size))\n\tconv = [0.0] * bias.size\n\t# weight\n\tfor idx1 in range(wgt[0]):\n\t\tfor idx2 in range(wgt[1]):\n\t\t\tconv[idx2] = conv[idx2] + src[idx1] * weight[idx1,idx2]\n\t# bias\n\tfor idx2 in range(wgt[1]):\n\t\tconv[idx2] = conv[idx2] + bias[idx2]\n\treturn conv # return list\n\nindata = [ 2.718 ] # for (1,N) e.g. (1,7)\ninp1_weight = model_var[2]\ninp1_bias = model_var[3]\n\n#indata = [1,2,3,4,5,6,7] # for (N,N) e.g. (7,7)\n#inp1_weight = model_var[4]\n#inp1_bias = model_var[5]\n\nconv1 = calc_conv(indata, inp1_weight, inp1_bias)\nprint (inp1_weight)\nprint (inp1_bias)\nprint ('conv:',conv1)\n```\n\n\n### code v0.4 > 2x2 network example added\n\n\u5165\u529b\u304c\u8907\u6570\u306e\u5834\u5408\u306e\u4f8b\u3068\u3057\u3066\u30012x2\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a08\u7b97\u7528\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3002\n\nndarray\u306e\u7528\u610f\u306e\u4ed5\u65b9\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u60c5\u5831\u611f\u8b1d\u3067\u3059\u3002\u3000\nhttp://qiita.com/richi40/items/6b3af6f4b00d62dbe8e1\n\n```read_model_var.py\n'''\nv0.4 Dec. 10, 2016\n\t- add 2x2 network example\nv0.3 Dec. 07, 2016\n\t- calc_conv() > add bias\nv0.2 Dec. 07, 2016\n\t- fix calc_conv() treating src as a list\nv0.1 Dec. 07, 2016\n\t- add calc_conv()\n'''\n\nimport numpy as np\n\nmodel_var = np.load('model_variables.npy')\n\nprint \"all shape:\",(model_var.shape)\n\ndef calc_conv(src, weight, bias):\n\twgt = weight.shape\n\tprint wgt # debug\n\t#conv = list(range(bias.size))\n\tconv = [0.0] * bias.size\n\t# weight\n\tfor idx1 in range(wgt[0]):\n\t\tfor idx2 in range(wgt[1]):\n\t\t\tconv[idx2] = conv[idx2] + src[idx1] * weight[idx1,idx2]\n\t# bias\n\tfor idx2 in range(wgt[1]):\n\t\tconv[idx2] = conv[idx2] + bias[idx2]\n\treturn conv # return list\n\n#indata = [ 2.718 ] # for (1,N) e.g. (1,7)\n#inp1_weight = model_var[2]\n#inp1_bias = model_var[3]\n\n#indata = [1,2,3,4,5,6,7] # for (N,N) e.g. (7,7)\n#inp1_weight = model_var[4]\n#inp1_bias = model_var[5]\n\nindata = [ 3, 1 ] # for 2x2 network\ninp1_weight = np.array([ [4,1], [5,9] ], dtype=np.float)\ninp1_bias = np.array([ 2, 6 ], dtype=np.float)\n\nconv1 = calc_conv(indata, inp1_weight, inp1_bias)\nprint (inp1_weight)\nprint (inp1_bias)\nprint ('conv:',conv1)\n```\n\n```txt:\u7d50\u679c\n$ python read_model_var.py \nall shape: (10,)\n(2, 2)\n[[ 4.  1.]\n [ 5.  9.]]\n[ 2.  6.]\n('conv:', [19.0, 18.0])\n```\n\n\u8a66\u3057\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u4ee5\u4e0b\u30021,3\u306finput\u30026,2\u306fbias\u3002\u7dda\u4e0a\u306e\u5024\u306fweight\u3002\n![](http://yuml.me/diagram/class/ [3]-4->[2], [3]-1->[6], [1]-5->[2], [1]-9->[6], )\n\n`3x4 + 1x5 + 2 = 19`\n`3x1 + 1x9 + 6 = 18`\n\n\u5408\u3063\u3066\u3044\u305d\u3046\u3002\n\u554f\u984c\u306fTensorFlow\u306e\u5b9f\u884c\u7d50\u679c\u306eweight\u306e\u30aa\u30fc\u30c0\u30fc(column major order / row major order\u306e\u3069\u3061\u3089\u304b\uff09\u3002\n\u5b9f\u969b\u306b\u8a08\u7b97\u3092\u3057\u3066\u5927\u5e45\u306b\u305a\u308c\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u304b\u3002\n \n\n", "tags": ["Python", "borgWarp"]}