{"context": "\n\n\u5185\u5bb9\n\u65b0\u898fVSI\u3092\u898b\u7a4d\u3082\u308b\u5834\u5408\u306b\u3001API\u7d4c\u7531\u3067\u898b\u7a4d\u3082\u308a\u767a\u884c\u3059\u308b\u3002\n\n\u524d\u63d0\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u7406\u89e3\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u3067\u3059\u3002\nBluemix Infrastructure (\u65e7SoftLayer) \u306eAPI\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u89e3\u8aac\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\nShinobiLayer: SoftLayer API \u6b21\u306e\u4e00\u6b69: \u30c7\u30fc\u30bf\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(1) - Qiita\n\n\nlocationId\u306e\u53d6\u5f97\nlocationId\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3064\u304f\u3063\u305f\u306e\u3067\u3001\u305c\u3072\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\uff08keyname\u3092\u4f7f\u3063\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\uff09\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\ngetDcLocationId.py\nimport SoftLayer\nimport json\nfrom prettytable import PrettyTable\n\n# account info\nclient = SoftLayer.create_client_from_env()\n\n#objectmask\nobjectmask = \"\"\"\n    longName,\n    name,\n    regions[keyname],\n    locationAddress[\n        locationId,\n        address1,\n        address2,\n        city,\n        country,\n        postalCode,\n        state\n    ]\n\"\"\"\ndcs = client['Location'].getDatacenters(mask=objectmask)\n#dcs_jsonstring = json.dumps(dcs,indent=4)\n#print(dcs_jsonstring) \n\ntable = PrettyTable([\n    'ID',\n    'KeyName',\n    'Name',\n    'Detail',\n    'Country',\n    'State',\n    'PostalCode',\n    'City',\n    'Address1',\n    'Address2'\n])\n\n\nfor key in range(len(dcs)):\n    if 'locationAddress' in dcs[key]:\n        if 'regions' in dcs[key]:\n            table.add_row([\n                dcs[key]['locationAddress']['locationId'],\n                dcs[key]['regions'][0]['keyname'],\n                dcs[key]['name'],\n                dcs[key]['longName'],\n                dcs[key]['locationAddress'].get('country',\"\"),\n                dcs[key]['locationAddress'].get('state',\"\"),\n                dcs[key]['locationAddress'].get('postalCode',\"\")[:11],\n                dcs[key]['locationAddress'].get('city',\"\"),\n                dcs[key]['locationAddress'].get('address1',\"\"),\n                dcs[key]['locationAddress'].get('address2',\"\")\n            ])\n        else:\n            table.add_row([\n                dcs[key]['locationAddress']['locationId'],\n                dcs[key].get('regions',\"\"),\n                dcs[key]['name'],\n                dcs[key]['longName'],\n                dcs[key]['locationAddress'].get('country',\"\"),\n                dcs[key]['locationAddress'].get('state',\"\"),\n                dcs[key]['locationAddress'].get('postalCode',\"\")[:11],\n                dcs[key]['locationAddress'].get('city',\"\"),\n                dcs[key]['locationAddress'].get('address1',\"\"),\n                dcs[key]['locationAddress'].get('address2',\"\")\n            ])\n    else:\n        table.add_row([\n            dcs[key].get('locationAddress',\"\"),\n            dcs[key]['regions'][0]['keyname'],\n            dcs[key]['name'],\n            dcs[key]['longName'],\n            dcs[key].get('locationAddress',\"\"),\n            dcs[key].get('locationAddress',\"\"),\n            dcs[key].get('locationAddress',\"\"),\n            dcs[key].get('locationAddress',\"\"),\n            dcs[key].get('locationAddress',\"\"),\n            dcs[key].get('locationAddress',\"\")\n        ])\n\nprint len(dcs)\nprint table.get_string(sortby=\"Name\")\n\n\n\n\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\n#\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\npython getDcLocationId.py \n\n#\u7d50\u679c\n32\n+---------+---------------+-------+--------------+---------+-------+-------------+----------------+----------------------------------------------------------------------------------+-----------------------+\n|    ID   |    KeyName    |  Name |    Detail    | Country | State |  PostalCode |      City      |                                     Address1                                     |        Address2       |\n+---------+---------------+-------+--------------+---------+-------+-------------+----------------+----------------------------------------------------------------------------------+-----------------------+\n|  265592 |   AMSTERDAM   | ams01 | Amsterdam 1  |    NL   |       |   1096 BK   |   Amsterdam    |                           Paul van Vlissingenstraat 16                           |                       |\n|  814994 |  AMSTERDAM03  | ams03 | Amsterdam 3  |    NL   |       |    1329BG   |     Almere     |                                    Flevoland                                     |    Rondebeltweg 62,   |\n| 1004997 |    CHENNAI    | che01 |  Chennai 1   |    IN   |       |    600053   |    Chennai     |                               226, Red Hills Road                                | Kallikuppam, Ambattur |\n|    3    |     DALLAS    | dal01 |   Dallas 1   |    US   |   TX  |    75207    |     Dallas     |                              1950 Stemmons Freeway                               |       Suite 3048      |\n|         |    DALLAS02   | dal02 |   Dallas 2   |         |       |             |                |                                                                                  |                       |\n|  138124 |    DALLAS05   | dal05 |   Dallas 5   |    US   |   TX  |    75244    |     Dallas     |                                 4849 Alpha Road                                  |                       |\n|  154820 |    DALLAS06   | dal06 |   Dallas 6   |    US   |   TX  |    75207    |     Dallas     |                             1333 N. Stemmons Freeway                             |       Suite 110       |\n|         |    DALLAS07   | dal07 |   Dallas 7   |         |       |             |                |                                                                                  |                       |\n|  449494 |    DALLAS09   | dal09 |   Dallas 9   |    US   |   TX  |    75081    |   Richardson   |                                 900 Quality Way                                  |                       |\n| 1441195 |    DALLAS10   | dal10 |  Dallas 10   |    US   |   TX  |    75063    |     Irving     |                               6431 Longhorn Drive                                |                       |\n|  449506 |   FRANKFURT   | fra02 | Frankfurt 2  |    DE   |       |    65936    |   Frankfurt    |                           Leonard - Heisswolf - Str 4.                           |                       |\n|  352494 |   HONGKONG02  | hkg02 | Hong Kong 2  |    HK   |       |             |   Hong Kong    | 33 Chun Choi Street, Tseung Kwan O Industrial Estate, New Territories, Hong Kong |                       |\n|  142775 |   HOUSTON02   | hou02 |  Houston 2   |    US   |   TX  |    77067    |    Houston     |                                855 Greens Parkway                                |       Suite 300       |\n|  358694 |    LONDON02   | lon02 |   London 2   |    GB   |       |   KT9 1SJ   |  Chessington   |                             Fountain Court, Cox Lane                             |   Suites 210 and 230  |\n|  449596 |   MELBOURNE   | mel01 | Melbourne 1  |    AU   |       |   VIC 3032  |   Melbourne    |                            72 Radnor Drive, Deer Park                            |                       |\n|  449600 |     MEXICO    | mex01 |   Mexico 1   |    MX   |       |             |   Quer\u00c3\u00a9taro   |                Km 2 200, Lateral Carretera Estatal 431 El Marques                |                       |\n|  815394 |     MILAN     | mil01 |   Milan 1    |    IT   |       |    20010    |   CORNAREDO    |                                 VIA MONZORO 103                                  |                       |\n|  449610 |    MONTREAL   | mon01 |  Montreal 1  |    CA   |   QC  |   J2C 7W2   | Drummondville  |                                2525 Rue Canadien                                 |                       |\n| 1541257 |      OSLO     | osl01 |    Oslo 1    |    NO   |       |     1900    |    Fetsund     |                                 Fet N\u00c3\u00a6ringspark                                 |      Heiaveien 9      |\n|  449500 |     PARIS     | par01 |   Paris 1    |    FR   |       |    92582    |     Clichy     |                 Soci\u00c3\u00a9t\u00c3\u00a9 par Actions Simplifi\u00c3\u00a9e Unipersonnelle                 |     7-9 rue Petit     |\n|  983497 |    SAOPAULO   | sao01 | Sao Paulo 1  |    BR   |       |   Km 67,7   |   Medeiros     |                          Rod Dom Gabriel Paulino Couto,                          |                       |\n|  18171  |    SEATTLE    | sea01 |  Seattle 1   |    US   |   WA  |    98168    |    Tukwila     |                         3355 S. 120th Place, Suite# 331                          |                       |\n| 1555995 |     SEOUL     | seo01 |   Seoul 1    |    KR   |       | Gyeonggi-do |  Seongnam-si   |                            46, Pangyo-ro 255beon-gil                             |       Bundang-gu      |\n|  168642 |    SANJOSE    | sjc01 |  San Jose 1  |    US   |   CA  |    95054    |  Santa Clara   |                            3105 Alfred St, Suite 331                             |                       |\n| 1004995 |   SANJOSE03   | sjc03 |  San Jose 3  |    US   |   CA  |    95054    |  Santa Clara   |                              1100 Space Park Drive                               |                       |\n|  224092 |   SINGAPORE   | sng01 | Singapore 1  |    SG   |       |    139964   |  East Jurong   |                         29A International Business Park                          |                       |\n|  449612 |     SYDNEY    | syd01 |   Sydney 1   |    AU   |       | Ultimo, NSW |     Ultimo     |                                273 Pymont Street                                 |                       |\n| 2013295 |               | syd04 |   Sydney 4   |    AU   |       |    2759     |    Sydney      |                                1 13, Templar Road                                |      Erskine Park     |\n|  449604 |     TOKYO     | tok02 |   Tokyo 2    |    JP   |       |   135-0061  | Koto-ku, Tokyo |                                  6-2-12 Toyosu                                   |                       |\n|  448994 |    TORONTO    | tor01 |  Toronto 1   |    CA   |   ON  |   L3R 4B6   |    Markham     |                                    Suite 130                                     |       371 Gough       |\n|  37473  | WASHINGTON_DC | wdc01 | Washington 1 |    US   |   VA  |    20151    |   Chantilly    |                           4030 Lafayette Center Drive                            |       Suite 331       |\n|  957095 |   ASHBURN04   | wdc04 | Washington 4 |    US   |   VA  |    20147    |    Ashburn     |                           44060 Digital Loudoun Plaza                            |                       |\n+---------+---------------+-------+--------------+---------+-------+-------------+----------------+----------------------------------------------------------------------------------+-----------------------+\n\n\nPackageId\u306e\u53d6\u5f97\nPackageId\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3064\u304f\u3063\u305f\u306e\u3067\u3001\u305c\u3072\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\ngetActivePackages.py\n# import\nimport SoftLayer\nfrom prettytable import PrettyTable\n\n#define objectmask\nobjectmask = \"\"\"\n    id,\n    name,\n    keyName,\n    subDescription\n\"\"\"\n\n#define table\ntable = PrettyTable([\n    'PackageID',\n    'Name',\n    'keyName',\n    'subDescription'\n])\n\n# account info\nclient = SoftLayer.create_client_from_env()\ngetActivePackages = client['Account'].getActivePackages(mask=objectmask)\n\nfor key in range(len(getActivePackages)):\n        table.add_row([\n            getActivePackages[key]['id'],\n            getActivePackages[key]['name'],\n            getActivePackages[key]['keyName'],\n            getActivePackages[key]['subDescription']\n        ])\n\nprint len(getActivePackages)\nprint table.get_string(sortby=\"PackageID\")\n\n\n\n\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\n#\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\npython getActivePackages.py \n\n#\u7d50\u679c\n35\n+-----------+-------------------------------------+--------------------------------------+-------------------------------------+\n| PackageID |                 Name                |               keyName                |            subDescription           |\n+-----------+-------------------------------------+--------------------------------------+-------------------------------------+\n|     46    |             Cloud Server            |             CLOUD_SERVER             |       Virtual Server Instance       |\n|    174    |      Network Gateway Appliance      |      NETWORK_GATEWAY_APPLIANCE       |      Network Gateway Appliance      |\n|    192    |    Application Delivery Appliance   |    APPLICATION_DELIVERY_APPLIANCE    |    Application Delivery Appliance   |\n|    194    |            Load Balancers           |            LOAD_BALANCERS            |            Load Balancers           |\n|    198    |           Portable Storage          |           PORTABLE_STORAGE           |           Portable Storage          |\n|    200    |          Bare Metal Server          |          BARE_METAL_SERVER           |          Bare Metal Server          |\n|    206    |            Object Storage           |            OBJECT_STORAGE            |            Object Storage           |\n|    208    |       Content Delivery Network      |       CONTENT_DELIVERY_NETWORK       |       Content Delivery Network      |\n|    210    |           SSL Certificate           |           SSL_CERTIFICATE            |           SSL Certificate           |\n|    212    |            Message Queue            |            MESSAGE_QUEUE             |            Message Queue            |\n|    216    |       Network Attached Storage      |       NETWORK_ATTACHED_STORAGE       |       Network Attached Storage      |\n|    218    |            iSCSI Storage            |            ISCSI_STORAGE             |            iSCSI Storage            |\n|    222    |             Performance             |     PERFORMANCE_STORAGE_SERVICE      |         Performance Storage         |\n|    226    |       Authentication Services       |       AUTHENTICATION_SERVICES        |       Authentication Services       |\n|    236    | Network Gateway Appliance (10 Gbps) | 2U_NETWORK_GATEWAY_APPLIANCE_1O_GBPS | Network Gateway Appliance (10 Gbps) |\n|    242    |            POWER8 Servers           |            POWER8_SERVERS            |            POWER8 Servers           |\n|    244    |              Monitoring             |              MONITORING              |              Monitoring             |\n|    248    |  Dual E5-2600 v3 Series (36 Drives) |       DUAL_E52600_V3_36_DRIVES       |  Dual E5-2600 v3 Series (36 Drives) |\n|    251    |  Dual E5-2600 v3 Series (12 Drives) |     2U_DUAL_E52600_V3_12_DRIVES      |  Dual E5-2600 v3 Series (12 Drives) |\n|    253    |  Dual E5-2600 v3 Series (4 Drives)  |         DUAL_E52600_4_DRIVES         |  Dual E5-2600 v3 Series (4 Drives)  |\n|    255    |      Single E3-1270 (4 Drives)      |        SINGLE_E31270_4_DRIVES        |      Single E3-1270 (4 Drives)      |\n|    257    |     Single E3-1270 v3 (4 Drives)    |      SINGLE_E31270_V3_4_DRIVES       |      Single E3-1270 (4 Drives)      |\n|    259    |   Single E5-2600 Series (4 Drives)  |        SINGLE_E52600_4_DRIVES        |   Single E5-2600 Series (4 Drives)  |\n|    261    |      Single E3-1270 (2 Drives)      |        SINGLE_E31270_2_DRIVES        |      Single E3-1270 (2 Drives)      |\n|    263    |   Dual E5-2600 Series (36 Drives)   |       4U_DUAL_E52600_36_DRIVES       |   Dual E5-2600 Series (36 Drives)   |\n|    265    |   Dual E5-2600 Series (12 Drives)   |       2U_DUAL_E52600_12_DRIVES       |   Dual E5-2600 Series (12 Drives)   |\n|    267    |   Quad E5-4600 Series (24 Drives)   |       4U_QUAD_E54600_24_DRIVES       |   Quad E5-4600 Series (24 Drives)   |\n|    269    |   Quad E7-4800  Series (6 Drives)   |       2U_QUAD_E74800_6_DRIVES        |   Quad E7-4800  Series (6 Drives)   |\n|    271    |  Quad E7-4800 v2 Series (24 Drives) |      2U_QUAD_E74800_V2_6_DRIVES      |  Quad E7-4800 v2 Series (24 Drives) |\n|    273    |       Dual E5-2600 (4 Drives)       |        DUAL_E52600_4_DRIVES_2        |       Dual E5-2600 (4 Drives)       |\n|    295    |          Certified Servers          |      SAP_HANA_CERTIFIED_SERVERS      |        SAP Certified Servers        |\n|    297    |          Certified Servers          |   SAP_NETWEAVER_CERTIFIED_SERVERS    |        SAP Certified Servers        |\n|    551    |  Dual E5-2600 v4 Series (4 Drives)  |       DUAL_E52600_V4_4_DRIVES        |  Dual E5-2600 v4 Series (4 Drives)  |\n|    553    |  Dual E5-2600 v4 Series (12 Drives) |       DUAL_E52600_V4_12_DRIVES       |  Dual E5-2600 v4 Series (12 Drives) |\n|    555    |  Dual E5-2600 v4 Series (36 Drives) |       DUAL_E52600_V4_36_DRIVES       |  Dual E5-2600 v4 Series (36 Drives) |\n+-----------+-------------------------------------+--------------------------------------+-------------------------------------+\n\n\nItemId\u306e\u53d6\u5f97\nItemId\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3064\u304f\u3063\u305f\u306e\u3067\u3001\u305c\u3072\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\ngetCategoriesAndItemPrices.py\nimport SoftLayer\nimport json\nfrom prettytable import PrettyTable\nimport operator\n\n# Get the SoftLayer API client object\nclient = SoftLayer.create_client_from_env()\n\ndef getItems(pkgId):\n    # Get a list of the categories that can be specified and the item prices within each category that you can choose from.\n    # Build a dict of each category id and what its categoryCode is.  This is only used to build the item dict below.\n    categories = client['Product_Package'].getConfiguration(id=pkgId, mask='isRequired, itemCategory.id, itemCategory.name, itemCategory.categoryCode')\n    cats = {}\n    for cat in categories:\n        catid = cat['itemCategory']['id']\n        cats[catid] = {'code':cat['itemCategory']['categoryCode'], 'name':cat['itemCategory']['name'], 'isRequired':(cat['isRequired'] == 1)}\n\n    # Go thru the items for this pkg and put the key/id pair in the correct category\n    # Note: the keys are only unique within categories, not between categories\n    mask = 'id, itemId, recurringFee, hourlyRecurringFee, item.description, item.keyName, categories.id'\n    itemPrices = client['Product_Package'].getItemPrices(id=pkgId, mask=mask)\n    items = {}          # this is a 2 level dict: 1st key is categoryCode, 2nd key is item keyName, value is item price id and other info\n    for itemP in itemPrices:\n        if 'categories' not in itemP:  continue\n        itemId = itemP['id']\n        itemDesc = itemP['item']['description']\n        itemKeyName = itemP['item']['keyName']\n        if 'recurringFee' in itemP:  itemFee = itemP['recurringFee']\n        else:  itemFee = '0'\n        if 'hourlyRecurringFee' in itemP:  itemHourlyFee = itemP['hourlyRecurringFee']\n        else:  itemHourlyFee = None\n        # Go thru this item's supported categories\n        for itemCat in itemP['categories']:\n            itemCatId = itemCat['id']\n            # We correlate the categories and items by the category id\n            if itemCatId in cats:\n                # This item supports a category in this package, so add it to the structure under this category\n                categoryCode = cats[itemCatId]['code']\n                # If we haven't yet added an entry for this categoryCode, create it now\n                if categoryCode not in items:  items[categoryCode] = {'catName':cats[itemCatId]['name'], 'isRequired':cats[itemCatId]['isRequired'], 'items':{}}\n                entry = {'id':itemId, 'description':itemDesc, 'fee':itemFee}\n                if itemHourlyFee:  entry['hourlyFee'] = itemHourlyFee\n                if itemKeyName in items[categoryCode]['items']:  print 'Warning: items['+categoryCode+\"]['items'][\"+itemKeyName+'] already has a value of '+str(items[categoryCode]['items'][itemKeyName])+' and we are overwriting it with '+str(entry)\n                # Now add the item to this category\n                items[categoryCode]['items'][itemKeyName] = entry\n    return items\n\npkgId = 46     # specify the package id you want = Virtual Server\n#pkgId = 297     # SAP Certified Servers \nitems = getItems(pkgId)\n#jsonstring = json.dumps(items,indent=4)\n#print(jsonstring) \n\n# define table\ntable = PrettyTable([\n    'keyCategory',\n    'isRequired',\n    'catName',\n    'id',\n    'fee',\n    'hourlyFee',\n    'description'\n])\n\nfor i in range(len(items)):\n    eachItem = items.keys()[i]\n    for j in range(len(items[eachItem]['items'].keys())):\n        itemContent = items[eachItem].keys()[2]\n        itemName = items[eachItem][itemContent].keys()[j]\n        table.add_row([\n            items.keys()[i],\n            items[eachItem]['isRequired'],\n            items[eachItem]['catName'],\n            items[eachItem][itemContent][itemName].get('id',\"\"),\n            items[eachItem][itemContent][itemName].get('fee',\"\"),\n            items[eachItem][itemContent][itemName].get('hourlyFee',\"\"),\n            items[eachItem][itemContent][itemName].get('description',\"\")\n        ])\n\nprint table.get_string(sort_key=operator.itemgetter(1,7),sortby='keyCategory')\n\n\n\n\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\n#\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\npython getCategoriesAndItemPrices.py \n\n#\u7d50\u679c\n+-------------------------+------------+----------------------------------------+--------+---------+-----------+-----------------------------------------------------------------------+\n|       keyCategory       | isRequired |                catName                 |   id   |   fee   | hourlyFee |                              description                              |\n+-------------------------+------------+----------------------------------------+--------+---------+-----------+-----------------------------------------------------------------------+\n|  av_spyware_protection  |   False    |    Anti-Virus & Spyware Protection     | 34536  |    0    |     0     |                      McAfee VirusScan Enterprise                      |\n|        bandwidth        |    True    |            Public Bandwidth            | 24745  |   1500  |           |                 Unlimited Bandwidth (100 Mbps Uplink)                 |\n|        bandwidth        |    True    |            Public Bandwidth            | 34183  |    0    |     0     |                             0 GB Bandwidth                            |\n|        bandwidth        |    True    |            Public Bandwidth            | 35963  |    0    |           |                             0 GB Bandwidth                            |\n|        bandwidth        |    True    |            Public Bandwidth            | 50253  |  494.45 |           |                           10000 GB Bandwidth                          |\n|        bandwidth        |    True    |            Public Bandwidth            | 50369  |    0    |           |                            250 GB Bandwidth                           |\n|        bandwidth        |    True    |            Public Bandwidth            | 78465  | 1448.56 |           |                           20000 GB Bandwidth                          |\n|        bandwidth        |    True    |            Public Bandwidth            | 153549 |  745.74 |           |                           5000 GB Bandwidth                           |\n|        bandwidth        |    True    |            Public Bandwidth            | 164857 |   90.7  |           |                           1000 GB Bandwidth                           |\n|       bc_insurance      |   False    |               Insurance                | 24329  |    0    |     0     |                     Business Continuance Insurance                    |\n|        cdp_backup       |   False    |               CDP Addon                | 32414  |  36.25  |           |                        Idera Disk Agent 10 Pack                       |\n...\n\n\n\u65b0\u898fVSI\u306e\u898b\u7a4d\u3082\u308a\u306e\u767a\u884c\n\u4e0a\u8a18\u3067\u53d6\u5f97\u3057\u305flocationId\u3001PackageId\u3001ItemId\u3092\u99c6\u4f7f\u3057\u3066\u3001\u898b\u7a4d\u3082\u308a\u3092\u767a\u884c\u3057\u307e\u3059\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\nplaceQuoteVsi.py\n#import package\nimport SoftLayer\nimport json\n\n# account info\nclient = SoftLayer.create_client_from_env()\n\norder = {\n    \"orderContainers\": [{\n        'complexType': 'SoftLayer_Container_Product_Order_Virtual_Guest', \n        'quantity': 1,\n        'virtualGuests': [{\n                'hostname': 'test', \n                'domain': 'example.com',\n            }],\n        'primaryDiskPartitionId': 1,\n        'location': 449604, # Tokyo\n        'packageId': 46,  # VSI\n        'useHourlyPricing': False,\n        'prices': [\n                {'id':26125},  # 1 x 2.0 GHz Core\n                {'id':32597},  # 1 GB RAM\n                {'id':23070},  # Reboot / Remote Console\n                {'id':26737},  # 100 Mbps Public & Private Networks\n                {'id':50369},  # 250 GB Bandwidth\n                {'id':34807},  # 1 IP Address\n                {'id':26466},  # 100 GB (LOCAL) First Disk\n                {'id':175779},  # Windows Server 2012 R2 Standard Edition (64 bit)\n                #{'id':171611},  # Ubuntu 16.04 (64 bit)\n                {'id':27023},  # Host Ping Monitoring\n                {'id':32500},  # Email and Ticket Notifications\n                {'id':32627},  # Automated Notification Response\n                {'id':33483},  # Unlimited SSL VPN Users & 1 PPTP VPN User per account\n                {'id':35310}   # Vulnerability Assessments & Management\n        ],\n    },\n    {\n                'complexType': 'SoftLayer_Container_Product_Order_Virtual_Guest',\n                'quantity': 1,\n                'virtualGuests': [{ \n                        'hostname': 'test', \n                        'domain': 'example.com',\n                }],\n                \"primaryDiskPartitionId\": 1,\n                'location': 449604, # Tokyo\n                'packageId': 46,  # VSI\n                'useHourlyPricing': False,\n                'prices': [\n                        {'id':26125},  # 1 x 2.0 GHz Core\n                        {'id':32597},  # 1 GB RAM \n                        {'id':23070},  # Reboot / Remote Console\n                        {'id':26737},  # 100 Mbps Public & Private Networks\n                        {'id':50369},  # 250 GB Bandwidth\n                        {'id':34807},  # 1 IP Address\n                        {'id':26466},  # 100 GB (LOCAL) First Disk\n                        #{'id':175779},  # Windows Server 2012 R2 Standard Edition (64 bit)\n                        {'id':171611},  # Ubuntu 16.04 (64 bit)\n                        {'id':27023},  # Host Ping Monitoring\n                        {'id':32500},  # Email and Ticket Notifications\n                        {'id':32627},  # Automated Notification Response\n                        {'id':33483},  # Unlimited SSL VPN Users & 1 PPTP VPN User per account\n                        {'id':35310}   # Vulnerability Assessments & Management\n                ],\n    }],\n        'quoteName': \"khayamaQuoteTest\",\n        'sendQuoteEmailFlag': True\n}   \n\n# placeQuote\nplaceQuote = client['Product_Order'].placeQuote(order)\n#placeQuote = client['Product_Order'].verifyOrder(order)\n\n#jsonstring = json.dumps(placeQuote,indent=4)\n#print(jsonstring) \n\n\n\n\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\n#\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\npython placeQuoteVsi.py\n\n#\u7d50\u679c\n\u30dd\u30fc\u30bf\u30eb\u4e0a\u306b\u300cquoteName\u300d\u3067\u6307\u5b9a\u3057\u305f\u540d\u524d\u306e\u898b\u7a4d\u3082\u308a\u304c\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\n\n\nPDF\u3067\u51fa\u529b\u3059\u308b\n\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nBluemix IaaS(\u65e7SoftLayer)\u306e\u898b\u7a4d\u3082\u308a\u3092API\u7d4c\u7531\u3067PDF\u306b\u4fdd\u5b58\u3059\u308b - Qiita\n\n\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\n\nProductSoftLayer_Product_Order::placeQuote | SoftLayer Development Network\n\n#\u5185\u5bb9\n\u65b0\u898fVSI\u3092\u898b\u7a4d\u3082\u308b\u5834\u5408\u306b\u3001API\u7d4c\u7531\u3067\u898b\u7a4d\u3082\u308a\u767a\u884c\u3059\u308b\u3002\n\n#\u524d\u63d0\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u7406\u89e3\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u3067\u3059\u3002\nBluemix Infrastructure (\u65e7SoftLayer) \u306eAPI\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u89e3\u8aac\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n><a href=\"http://qiita.com/testnin2/items/f04ca0cee9b2f0a8f830\" >ShinobiLayer: SoftLayer API \u6b21\u306e\u4e00\u6b69: \u30c7\u30fc\u30bf\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(1) - Qiita</a>\n\n#locationId\u306e\u53d6\u5f97\nlocationId\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3064\u304f\u3063\u305f\u306e\u3067\u3001\u305c\u3072\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\uff08keyname\u3092\u4f7f\u3063\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\uff09\n\n##\u30b9\u30af\u30ea\u30d7\u30c8\n```py:getDcLocationId.py\nimport SoftLayer\nimport json\nfrom prettytable import PrettyTable\n\n# account info\nclient = SoftLayer.create_client_from_env()\n\n#objectmask\nobjectmask = \"\"\"\n\tlongName,\n\tname,\n\tregions[keyname],\n\tlocationAddress[\n\t\tlocationId,\n\t\taddress1,\n\t\taddress2,\n\t\tcity,\n\t\tcountry,\n\t\tpostalCode,\n\t\tstate\n\t]\n\"\"\"\ndcs = client['Location'].getDatacenters(mask=objectmask)\n#dcs_jsonstring = json.dumps(dcs,indent=4)\n#print(dcs_jsonstring) \n\ntable = PrettyTable([\n\t'ID',\n\t'KeyName',\n\t'Name',\n\t'Detail',\n\t'Country',\n\t'State',\n\t'PostalCode',\n\t'City',\n\t'Address1',\n\t'Address2'\n])\n\n    \nfor key in range(len(dcs)):\n\tif 'locationAddress' in dcs[key]:\n\t\tif 'regions' in dcs[key]:\n\t\t\ttable.add_row([\n\t\t\t\tdcs[key]['locationAddress']['locationId'],\n\t\t\t\tdcs[key]['regions'][0]['keyname'],\n\t\t\t\tdcs[key]['name'],\n\t\t\t\tdcs[key]['longName'],\n\t\t\t\tdcs[key]['locationAddress'].get('country',\"\"),\n\t\t\t\tdcs[key]['locationAddress'].get('state',\"\"),\n\t\t\t\tdcs[key]['locationAddress'].get('postalCode',\"\")[:11],\n\t\t\t\tdcs[key]['locationAddress'].get('city',\"\"),\n\t\t\t\tdcs[key]['locationAddress'].get('address1',\"\"),\n\t\t\t\tdcs[key]['locationAddress'].get('address2',\"\")\n\t\t\t])\n\t\telse:\n\t\t\ttable.add_row([\n\t\t\t\tdcs[key]['locationAddress']['locationId'],\n\t\t\t\tdcs[key].get('regions',\"\"),\n\t\t\t\tdcs[key]['name'],\n\t\t\t\tdcs[key]['longName'],\n\t\t\t\tdcs[key]['locationAddress'].get('country',\"\"),\n\t\t\t\tdcs[key]['locationAddress'].get('state',\"\"),\n\t\t\t\tdcs[key]['locationAddress'].get('postalCode',\"\")[:11],\n\t\t\t\tdcs[key]['locationAddress'].get('city',\"\"),\n\t\t\t\tdcs[key]['locationAddress'].get('address1',\"\"),\n\t\t\t\tdcs[key]['locationAddress'].get('address2',\"\")\n\t\t\t])\n\telse:\n\t\ttable.add_row([\n\t\t\tdcs[key].get('locationAddress',\"\"),\n\t\t\tdcs[key]['regions'][0]['keyname'],\n\t\t\tdcs[key]['name'],\n\t\t\tdcs[key]['longName'],\n\t\t\tdcs[key].get('locationAddress',\"\"),\n\t\t\tdcs[key].get('locationAddress',\"\"),\n\t\t\tdcs[key].get('locationAddress',\"\"),\n\t\t\tdcs[key].get('locationAddress',\"\"),\n\t\t\tdcs[key].get('locationAddress',\"\"),\n\t\t\tdcs[key].get('locationAddress',\"\")\n\t\t])\n\nprint len(dcs)\nprint table.get_string(sortby=\"Name\")\n```\n\n##\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\n```\n#\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\npython getDcLocationId.py \n\n#\u7d50\u679c\n32\n+---------+---------------+-------+--------------+---------+-------+-------------+----------------+----------------------------------------------------------------------------------+-----------------------+\n|    ID   |    KeyName    |  Name |    Detail    | Country | State |  PostalCode |      City      |                                     Address1                                     |        Address2       |\n+---------+---------------+-------+--------------+---------+-------+-------------+----------------+----------------------------------------------------------------------------------+-----------------------+\n|  265592 |   AMSTERDAM   | ams01 | Amsterdam 1  |    NL   |       |   1096 BK   |   Amsterdam    |                           Paul van Vlissingenstraat 16                           |                       |\n|  814994 |  AMSTERDAM03  | ams03 | Amsterdam 3  |    NL   |       |    1329BG   |     Almere     |                                    Flevoland                                     |    Rondebeltweg 62,   |\n| 1004997 |    CHENNAI    | che01 |  Chennai 1   |    IN   |       |    600053   |    Chennai     |                               226, Red Hills Road                                | Kallikuppam, Ambattur |\n|    3    |     DALLAS    | dal01 |   Dallas 1   |    US   |   TX  |    75207    |     Dallas     |                              1950 Stemmons Freeway                               |       Suite 3048      |\n|         |    DALLAS02   | dal02 |   Dallas 2   |         |       |             |                |                                                                                  |                       |\n|  138124 |    DALLAS05   | dal05 |   Dallas 5   |    US   |   TX  |    75244    |     Dallas     |                                 4849 Alpha Road                                  |                       |\n|  154820 |    DALLAS06   | dal06 |   Dallas 6   |    US   |   TX  |    75207    |     Dallas     |                             1333 N. Stemmons Freeway                             |       Suite 110       |\n|         |    DALLAS07   | dal07 |   Dallas 7   |         |       |             |                |                                                                                  |                       |\n|  449494 |    DALLAS09   | dal09 |   Dallas 9   |    US   |   TX  |    75081    |   Richardson   |                                 900 Quality Way                                  |                       |\n| 1441195 |    DALLAS10   | dal10 |  Dallas 10   |    US   |   TX  |    75063    |     Irving     |                               6431 Longhorn Drive                                |                       |\n|  449506 |   FRANKFURT   | fra02 | Frankfurt 2  |    DE   |       |    65936    |   Frankfurt    |                           Leonard - Heisswolf - Str 4.                           |                       |\n|  352494 |   HONGKONG02  | hkg02 | Hong Kong 2  |    HK   |       |             |   Hong Kong    | 33 Chun Choi Street, Tseung Kwan O Industrial Estate, New Territories, Hong Kong |                       |\n|  142775 |   HOUSTON02   | hou02 |  Houston 2   |    US   |   TX  |    77067    |    Houston     |                                855 Greens Parkway                                |       Suite 300       |\n|  358694 |    LONDON02   | lon02 |   London 2   |    GB   |       |   KT9 1SJ   |  Chessington   |                             Fountain Court, Cox Lane                             |   Suites 210 and 230  |\n|  449596 |   MELBOURNE   | mel01 | Melbourne 1  |    AU   |       |   VIC 3032  |   Melbourne    |                            72 Radnor Drive, Deer Park                            |                       |\n|  449600 |     MEXICO    | mex01 |   Mexico 1   |    MX   |       |             |   Quer\u00c3\u00a9taro   |                Km 2 200, Lateral Carretera Estatal 431 El Marques                |                       |\n|  815394 |     MILAN     | mil01 |   Milan 1    |    IT   |       |    20010    |   CORNAREDO    |                                 VIA MONZORO 103                                  |                       |\n|  449610 |    MONTREAL   | mon01 |  Montreal 1  |    CA   |   QC  |   J2C 7W2   | Drummondville  |                                2525 Rue Canadien                                 |                       |\n| 1541257 |      OSLO     | osl01 |    Oslo 1    |    NO   |       |     1900    |    Fetsund     |                                 Fet N\u00c3\u00a6ringspark                                 |      Heiaveien 9      |\n|  449500 |     PARIS     | par01 |   Paris 1    |    FR   |       |    92582    |     Clichy     |                 Soci\u00c3\u00a9t\u00c3\u00a9 par Actions Simplifi\u00c3\u00a9e Unipersonnelle                 |     7-9 rue Petit     |\n|  983497 |    SAOPAULO   | sao01 | Sao Paulo 1  |    BR   |       |   Km 67,7   |   Medeiros     |                          Rod Dom Gabriel Paulino Couto,                          |                       |\n|  18171  |    SEATTLE    | sea01 |  Seattle 1   |    US   |   WA  |    98168    |    Tukwila     |                         3355 S. 120th Place, Suite# 331                          |                       |\n| 1555995 |     SEOUL     | seo01 |   Seoul 1    |    KR   |       | Gyeonggi-do |  Seongnam-si   |                            46, Pangyo-ro 255beon-gil                             |       Bundang-gu      |\n|  168642 |    SANJOSE    | sjc01 |  San Jose 1  |    US   |   CA  |    95054    |  Santa Clara   |                            3105 Alfred St, Suite 331                             |                       |\n| 1004995 |   SANJOSE03   | sjc03 |  San Jose 3  |    US   |   CA  |    95054    |  Santa Clara   |                              1100 Space Park Drive                               |                       |\n|  224092 |   SINGAPORE   | sng01 | Singapore 1  |    SG   |       |    139964   |  East Jurong   |                         29A International Business Park                          |                       |\n|  449612 |     SYDNEY    | syd01 |   Sydney 1   |    AU   |       | Ultimo, NSW |     Ultimo     |                                273 Pymont Street                                 |                       |\n| 2013295 |               | syd04 |   Sydney 4   |    AU   |       |    2759     |    Sydney      |                                1 13, Templar Road                                |      Erskine Park     |\n|  449604 |     TOKYO     | tok02 |   Tokyo 2    |    JP   |       |   135-0061  | Koto-ku, Tokyo |                                  6-2-12 Toyosu                                   |                       |\n|  448994 |    TORONTO    | tor01 |  Toronto 1   |    CA   |   ON  |   L3R 4B6   |    Markham     |                                    Suite 130                                     |       371 Gough       |\n|  37473  | WASHINGTON_DC | wdc01 | Washington 1 |    US   |   VA  |    20151    |   Chantilly    |                           4030 Lafayette Center Drive                            |       Suite 331       |\n|  957095 |   ASHBURN04   | wdc04 | Washington 4 |    US   |   VA  |    20147    |    Ashburn     |                           44060 Digital Loudoun Plaza                            |                       |\n+---------+---------------+-------+--------------+---------+-------+-------------+----------------+----------------------------------------------------------------------------------+-----------------------+\n```\n\n##PackageId\u306e\u53d6\u5f97\nPackageId\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3064\u304f\u3063\u305f\u306e\u3067\u3001\u305c\u3072\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n##\u30b9\u30af\u30ea\u30d7\u30c8\n```py:getActivePackages.py\n# import\nimport SoftLayer\nfrom prettytable import PrettyTable\n\n#define objectmask\nobjectmask = \"\"\"\n    id,\n    name,\n    keyName,\n    subDescription\n\"\"\"\n\n#define table\ntable = PrettyTable([\n    'PackageID',\n    'Name',\n    'keyName',\n    'subDescription'\n])\n\n# account info\nclient = SoftLayer.create_client_from_env()\ngetActivePackages = client['Account'].getActivePackages(mask=objectmask)\n\nfor key in range(len(getActivePackages)):\n        table.add_row([\n            getActivePackages[key]['id'],\n            getActivePackages[key]['name'],\n            getActivePackages[key]['keyName'],\n            getActivePackages[key]['subDescription']\n        ])\n\nprint len(getActivePackages)\nprint table.get_string(sortby=\"PackageID\")\n```\n\n##\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\n```\n#\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\npython getActivePackages.py \n\n#\u7d50\u679c\n35\n+-----------+-------------------------------------+--------------------------------------+-------------------------------------+\n| PackageID |                 Name                |               keyName                |            subDescription           |\n+-----------+-------------------------------------+--------------------------------------+-------------------------------------+\n|     46    |             Cloud Server            |             CLOUD_SERVER             |       Virtual Server Instance       |\n|    174    |      Network Gateway Appliance      |      NETWORK_GATEWAY_APPLIANCE       |      Network Gateway Appliance      |\n|    192    |    Application Delivery Appliance   |    APPLICATION_DELIVERY_APPLIANCE    |    Application Delivery Appliance   |\n|    194    |            Load Balancers           |            LOAD_BALANCERS            |            Load Balancers           |\n|    198    |           Portable Storage          |           PORTABLE_STORAGE           |           Portable Storage          |\n|    200    |          Bare Metal Server          |          BARE_METAL_SERVER           |          Bare Metal Server          |\n|    206    |            Object Storage           |            OBJECT_STORAGE            |            Object Storage           |\n|    208    |       Content Delivery Network      |       CONTENT_DELIVERY_NETWORK       |       Content Delivery Network      |\n|    210    |           SSL Certificate           |           SSL_CERTIFICATE            |           SSL Certificate           |\n|    212    |            Message Queue            |            MESSAGE_QUEUE             |            Message Queue            |\n|    216    |       Network Attached Storage      |       NETWORK_ATTACHED_STORAGE       |       Network Attached Storage      |\n|    218    |            iSCSI Storage            |            ISCSI_STORAGE             |            iSCSI Storage            |\n|    222    |             Performance             |     PERFORMANCE_STORAGE_SERVICE      |         Performance Storage         |\n|    226    |       Authentication Services       |       AUTHENTICATION_SERVICES        |       Authentication Services       |\n|    236    | Network Gateway Appliance (10 Gbps) | 2U_NETWORK_GATEWAY_APPLIANCE_1O_GBPS | Network Gateway Appliance (10 Gbps) |\n|    242    |            POWER8 Servers           |            POWER8_SERVERS            |            POWER8 Servers           |\n|    244    |              Monitoring             |              MONITORING              |              Monitoring             |\n|    248    |  Dual E5-2600 v3 Series (36 Drives) |       DUAL_E52600_V3_36_DRIVES       |  Dual E5-2600 v3 Series (36 Drives) |\n|    251    |  Dual E5-2600 v3 Series (12 Drives) |     2U_DUAL_E52600_V3_12_DRIVES      |  Dual E5-2600 v3 Series (12 Drives) |\n|    253    |  Dual E5-2600 v3 Series (4 Drives)  |         DUAL_E52600_4_DRIVES         |  Dual E5-2600 v3 Series (4 Drives)  |\n|    255    |      Single E3-1270 (4 Drives)      |        SINGLE_E31270_4_DRIVES        |      Single E3-1270 (4 Drives)      |\n|    257    |     Single E3-1270 v3 (4 Drives)    |      SINGLE_E31270_V3_4_DRIVES       |      Single E3-1270 (4 Drives)      |\n|    259    |   Single E5-2600 Series (4 Drives)  |        SINGLE_E52600_4_DRIVES        |   Single E5-2600 Series (4 Drives)  |\n|    261    |      Single E3-1270 (2 Drives)      |        SINGLE_E31270_2_DRIVES        |      Single E3-1270 (2 Drives)      |\n|    263    |   Dual E5-2600 Series (36 Drives)   |       4U_DUAL_E52600_36_DRIVES       |   Dual E5-2600 Series (36 Drives)   |\n|    265    |   Dual E5-2600 Series (12 Drives)   |       2U_DUAL_E52600_12_DRIVES       |   Dual E5-2600 Series (12 Drives)   |\n|    267    |   Quad E5-4600 Series (24 Drives)   |       4U_QUAD_E54600_24_DRIVES       |   Quad E5-4600 Series (24 Drives)   |\n|    269    |   Quad E7-4800  Series (6 Drives)   |       2U_QUAD_E74800_6_DRIVES        |   Quad E7-4800  Series (6 Drives)   |\n|    271    |  Quad E7-4800 v2 Series (24 Drives) |      2U_QUAD_E74800_V2_6_DRIVES      |  Quad E7-4800 v2 Series (24 Drives) |\n|    273    |       Dual E5-2600 (4 Drives)       |        DUAL_E52600_4_DRIVES_2        |       Dual E5-2600 (4 Drives)       |\n|    295    |          Certified Servers          |      SAP_HANA_CERTIFIED_SERVERS      |        SAP Certified Servers        |\n|    297    |          Certified Servers          |   SAP_NETWEAVER_CERTIFIED_SERVERS    |        SAP Certified Servers        |\n|    551    |  Dual E5-2600 v4 Series (4 Drives)  |       DUAL_E52600_V4_4_DRIVES        |  Dual E5-2600 v4 Series (4 Drives)  |\n|    553    |  Dual E5-2600 v4 Series (12 Drives) |       DUAL_E52600_V4_12_DRIVES       |  Dual E5-2600 v4 Series (12 Drives) |\n|    555    |  Dual E5-2600 v4 Series (36 Drives) |       DUAL_E52600_V4_36_DRIVES       |  Dual E5-2600 v4 Series (36 Drives) |\n+-----------+-------------------------------------+--------------------------------------+-------------------------------------+\n```\n\n#ItemId\u306e\u53d6\u5f97\nItemId\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3064\u304f\u3063\u305f\u306e\u3067\u3001\u305c\u3072\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n##\u30b9\u30af\u30ea\u30d7\u30c8\n```py:getCategoriesAndItemPrices.py \nimport SoftLayer\nimport json\nfrom prettytable import PrettyTable\nimport operator\n \n# Get the SoftLayer API client object\nclient = SoftLayer.create_client_from_env()\n \ndef getItems(pkgId):\n    # Get a list of the categories that can be specified and the item prices within each category that you can choose from.\n    # Build a dict of each category id and what its categoryCode is.  This is only used to build the item dict below.\n    categories = client['Product_Package'].getConfiguration(id=pkgId, mask='isRequired, itemCategory.id, itemCategory.name, itemCategory.categoryCode')\n    cats = {}\n    for cat in categories:\n        catid = cat['itemCategory']['id']\n        cats[catid] = {'code':cat['itemCategory']['categoryCode'], 'name':cat['itemCategory']['name'], 'isRequired':(cat['isRequired'] == 1)}\n \n    # Go thru the items for this pkg and put the key/id pair in the correct category\n    # Note: the keys are only unique within categories, not between categories\n    mask = 'id, itemId, recurringFee, hourlyRecurringFee, item.description, item.keyName, categories.id'\n    itemPrices = client['Product_Package'].getItemPrices(id=pkgId, mask=mask)\n    items = {}          # this is a 2 level dict: 1st key is categoryCode, 2nd key is item keyName, value is item price id and other info\n    for itemP in itemPrices:\n        if 'categories' not in itemP:  continue\n        itemId = itemP['id']\n        itemDesc = itemP['item']['description']\n        itemKeyName = itemP['item']['keyName']\n        if 'recurringFee' in itemP:  itemFee = itemP['recurringFee']\n        else:  itemFee = '0'\n        if 'hourlyRecurringFee' in itemP:  itemHourlyFee = itemP['hourlyRecurringFee']\n        else:  itemHourlyFee = None\n        # Go thru this item's supported categories\n        for itemCat in itemP['categories']:\n            itemCatId = itemCat['id']\n            # We correlate the categories and items by the category id\n            if itemCatId in cats:\n                # This item supports a category in this package, so add it to the structure under this category\n                categoryCode = cats[itemCatId]['code']\n                # If we haven't yet added an entry for this categoryCode, create it now\n                if categoryCode not in items:  items[categoryCode] = {'catName':cats[itemCatId]['name'], 'isRequired':cats[itemCatId]['isRequired'], 'items':{}}\n                entry = {'id':itemId, 'description':itemDesc, 'fee':itemFee}\n                if itemHourlyFee:  entry['hourlyFee'] = itemHourlyFee\n                if itemKeyName in items[categoryCode]['items']:  print 'Warning: items['+categoryCode+\"]['items'][\"+itemKeyName+'] already has a value of '+str(items[categoryCode]['items'][itemKeyName])+' and we are overwriting it with '+str(entry)\n                # Now add the item to this category\n                items[categoryCode]['items'][itemKeyName] = entry\n    return items\n \npkgId = 46     # specify the package id you want = Virtual Server\n#pkgId = 297     # SAP Certified Servers \nitems = getItems(pkgId)\n#jsonstring = json.dumps(items,indent=4)\n#print(jsonstring) \n\n# define table\ntable = PrettyTable([\n    'keyCategory',\n    'isRequired',\n    'catName',\n    'id',\n    'fee',\n    'hourlyFee',\n    'description'\n])\n\nfor i in range(len(items)):\n\teachItem = items.keys()[i]\n\tfor j in range(len(items[eachItem]['items'].keys())):\n\t\titemContent = items[eachItem].keys()[2]\n\t\titemName = items[eachItem][itemContent].keys()[j]\n\t\ttable.add_row([\n\t\t\titems.keys()[i],\n\t\t\titems[eachItem]['isRequired'],\n\t\t\titems[eachItem]['catName'],\n\t\t\titems[eachItem][itemContent][itemName].get('id',\"\"),\n\t\t\titems[eachItem][itemContent][itemName].get('fee',\"\"),\n\t\t\titems[eachItem][itemContent][itemName].get('hourlyFee',\"\"),\n\t\t\titems[eachItem][itemContent][itemName].get('description',\"\")\n\t\t])\n\nprint table.get_string(sort_key=operator.itemgetter(1,7),sortby='keyCategory')\n```\n\n##\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\n```\n#\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\npython getCategoriesAndItemPrices.py \n\n#\u7d50\u679c\n+-------------------------+------------+----------------------------------------+--------+---------+-----------+-----------------------------------------------------------------------+\n|       keyCategory       | isRequired |                catName                 |   id   |   fee   | hourlyFee |                              description                              |\n+-------------------------+------------+----------------------------------------+--------+---------+-----------+-----------------------------------------------------------------------+\n|  av_spyware_protection  |   False    |    Anti-Virus & Spyware Protection     | 34536  |    0    |     0     |                      McAfee VirusScan Enterprise                      |\n|        bandwidth        |    True    |            Public Bandwidth            | 24745  |   1500  |           |                 Unlimited Bandwidth (100 Mbps Uplink)                 |\n|        bandwidth        |    True    |            Public Bandwidth            | 34183  |    0    |     0     |                             0 GB Bandwidth                            |\n|        bandwidth        |    True    |            Public Bandwidth            | 35963  |    0    |           |                             0 GB Bandwidth                            |\n|        bandwidth        |    True    |            Public Bandwidth            | 50253  |  494.45 |           |                           10000 GB Bandwidth                          |\n|        bandwidth        |    True    |            Public Bandwidth            | 50369  |    0    |           |                            250 GB Bandwidth                           |\n|        bandwidth        |    True    |            Public Bandwidth            | 78465  | 1448.56 |           |                           20000 GB Bandwidth                          |\n|        bandwidth        |    True    |            Public Bandwidth            | 153549 |  745.74 |           |                           5000 GB Bandwidth                           |\n|        bandwidth        |    True    |            Public Bandwidth            | 164857 |   90.7  |           |                           1000 GB Bandwidth                           |\n|       bc_insurance      |   False    |               Insurance                | 24329  |    0    |     0     |                     Business Continuance Insurance                    |\n|        cdp_backup       |   False    |               CDP Addon                | 32414  |  36.25  |           |                        Idera Disk Agent 10 Pack                       |\n...\n```\n\n#\u65b0\u898fVSI\u306e\u898b\u7a4d\u3082\u308a\u306e\u767a\u884c\n\u4e0a\u8a18\u3067\u53d6\u5f97\u3057\u305flocationId\u3001PackageId\u3001ItemId\u3092\u99c6\u4f7f\u3057\u3066\u3001\u898b\u7a4d\u3082\u308a\u3092\u767a\u884c\u3057\u307e\u3059\u3002\n\n##\u30b9\u30af\u30ea\u30d7\u30c8\n```py:placeQuoteVsi.py\n#import package\nimport SoftLayer\nimport json\n\n# account info\nclient = SoftLayer.create_client_from_env()\n\norder = {\n\t\"orderContainers\": [{\n\t\t'complexType': 'SoftLayer_Container_Product_Order_Virtual_Guest', \n\t\t'quantity': 1,\n\t\t'virtualGuests': [{\n        \t\t'hostname': 'test', \n        \t\t'domain': 'example.com',\n      \t\t}],\n\t\t'primaryDiskPartitionId': 1,\n\t\t'location': 449604, # Tokyo\n\t\t'packageId': 46,  # VSI\n\t\t'useHourlyPricing': False,\n\t\t'prices': [\n           \t\t{'id':26125},  # 1 x 2.0 GHz Core\n           \t\t{'id':32597},  # 1 GB RAM\n           \t\t{'id':23070},  # Reboot / Remote Console\n        \t\t{'id':26737},  # 100 Mbps Public & Private Networks\n           \t\t{'id':50369},  # 250 GB Bandwidth\n           \t\t{'id':34807},  # 1 IP Address\n           \t\t{'id':26466},  # 100 GB (LOCAL) First Disk\n           \t\t{'id':175779},  # Windows Server 2012 R2 Standard Edition (64 bit)\n           \t\t#{'id':171611},  # Ubuntu 16.04 (64 bit)\n           \t\t{'id':27023},  # Host Ping Monitoring\n           \t\t{'id':32500},  # Email and Ticket Notifications\n           \t\t{'id':32627},  # Automated Notification Response\n           \t\t{'id':33483},  # Unlimited SSL VPN Users & 1 PPTP VPN User per account\n           \t\t{'id':35310}   # Vulnerability Assessments & Management\n\t\t],\n\t},\n\t{\n                'complexType': 'SoftLayer_Container_Product_Order_Virtual_Guest',\n                'quantity': 1,\n                'virtualGuests': [{ \n                        'hostname': 'test', \n                        'domain': 'example.com',\n                }],\n                \"primaryDiskPartitionId\": 1,\n                'location': 449604, # Tokyo\n                'packageId': 46,  # VSI\n                'useHourlyPricing': False,\n                'prices': [\n                        {'id':26125},  # 1 x 2.0 GHz Core\n                        {'id':32597},  # 1 GB RAM \n                        {'id':23070},  # Reboot / Remote Console\n                        {'id':26737},  # 100 Mbps Public & Private Networks\n                        {'id':50369},  # 250 GB Bandwidth\n                        {'id':34807},  # 1 IP Address\n                        {'id':26466},  # 100 GB (LOCAL) First Disk\n                        #{'id':175779},  # Windows Server 2012 R2 Standard Edition (64 bit)\n                        {'id':171611},  # Ubuntu 16.04 (64 bit)\n                        {'id':27023},  # Host Ping Monitoring\n                        {'id':32500},  # Email and Ticket Notifications\n                        {'id':32627},  # Automated Notification Response\n                        {'id':33483},  # Unlimited SSL VPN Users & 1 PPTP VPN User per account\n                        {'id':35310}   # Vulnerability Assessments & Management\n                ],\n\t}],\n\t\t'quoteName': \"khayamaQuoteTest\",\n\t\t'sendQuoteEmailFlag': True\n}   \n\n# placeQuote\nplaceQuote = client['Product_Order'].placeQuote(order)\n#placeQuote = client['Product_Order'].verifyOrder(order)\n\n#jsonstring = json.dumps(placeQuote,indent=4)\n#print(jsonstring) \n```\n\n##\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\n```\n#\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\npython placeQuoteVsi.py\n\n#\u7d50\u679c\n\u30dd\u30fc\u30bf\u30eb\u4e0a\u306b\u300cquoteName\u300d\u3067\u6307\u5b9a\u3057\u305f\u540d\u524d\u306e\u898b\u7a4d\u3082\u308a\u304c\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\n```\n\n#PDF\u3067\u51fa\u529b\u3059\u308b\n\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n<a href=\"http://qiita.com/khayama/items/766ee6fe9423ddc545ed\">Bluemix IaaS(\u65e7SoftLayer)\u306e\u898b\u7a4d\u3082\u308a\u3092API\u7d4c\u7531\u3067PDF\u306b\u4fdd\u5b58\u3059\u308b - Qiita</a>\n\n#\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\n- <a href=\"https://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeQuote\">ProductSoftLayer_Product_Order::placeQuote | SoftLayer Development Network</a>\n", "tags": ["SoftLayer", "Bluemix", "Python"]}