{"context": "\n\u4f7f\u7528\u6a5f\u6750\nESP-WROOM-02 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u57fa\u677f\u5b9f\u88c5\n\n\nESP8266\u304b\u3089Slack\u3078\u306e\u6295\u7a3f\u3092\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n\u53c2\u8003 http://qiita.com/kiyopikko/items/4c525103700f52cb2894\n\u53c2\u8003 http://www.iotforest.com/2016/3/4/esp8266-arduino-feather-huzzah-using-slack-integration\n\u53c2\u8003 http://nyanko-omori.hatenablog.com/entry/2016/08/14/144918\n\nv0.1\n\ncode > WiFi\u8a2d\u5b9a\nWifiConfig.h : \n\u81ea\u5206\u306e\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u3092\u8a18\u8f09\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3002\n\u6ce8\u610f: GitHub\u306a\u3069\u306b\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u3057\u306a\u3044\u3053\u3068\n\u4f8b\nstatic const char *kSsid = \"pi-31415-g\";\nstatic const char *kPass = \"47voyager\";\n\n\ncode > Slack\u8a2d\u5b9a\nslackConfig.h :\nSlack\u306e\u30c1\u30e3\u30cd\u30eb\u3001Incoming WebHooks\u306a\u3069\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3002\n\u6ce8\u610f: GitHub\u306a\u3069\u306b\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u3057\u306a\u3044\u3053\u3068\n\u4f8b\nstatic const char *kSlackUrl = \"/services/PIPIPI/NAPIER/3141592653589793228\";\nstatic const String kSlackChannel = \"#amazon_dash\";\nstatic const String kSlackUsername = \"7of9\";\n\nkSlackUrl \u306b\u306fIncoming WebHooks\u306eURL\u306e/services/\u304b\u3089\u59cb\u307e\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\ncode > \u672c\u4f53\n\u53c2\u8003\u306e\u30ea\u30f3\u30af\u306e\u30b3\u30fc\u30c9\u3092\u3082\u3068\u306b\u4ee5\u4e0b\u3068\u3057\u307e\u3057\u305f\u3002\n\nesp2866_161230_slack\n#include <ESP8266WiFi.h>\n#include <WiFiClientSecure.h>\n#include \"WifiConfig.h\" // for [kSsid],[kPass]\n#include \"slackConfig.h\" // for [kSlackUrl]\n\n/*\n * v0.1 Dec. 31, 2016\n *   Based on:\n *   http://qiita.com/kiyopikko/items/4c525103700f52cb2894\n *   http://www.iotforest.com/2016/3/4/esp8266-arduino-feather-huzzah-using-slack-integration\n * \n */\n\nstatic const char *kSlackHost = \"hooks.slack.com\";\nstatic const int kHttpsPort = 443;\n\nvoid WiFi_setup()\n{\n  WiFi.begin(kSsid, kPass);\n  while( WiFi.status() != WL_CONNECTED) {\n    delay(500); // msec\n  }\n  Serial.println(WiFi.localIP());\n}\n\nvoid slack_submit()\n{\n  WiFiClientSecure client;\n\n  // connect\n  if (!client.connect(kSlackHost, kHttpsPort)) { \n    Serial.println(\"slack connection failed\");\n  } else {\n    Serial.println(\"slack connection: OK\");    \n  }\n\n  // SSL Certificate finngerprint for the host\n  const char* fingerprint = \"\u200e\u200e\u200e\u200eab f0 5b a9 1a e0 ae 5f ce 32 2e 7c 66 67 49 ec dd 6d 6a 38\";\n  // verify the signature of the ssl certificate\n if (client.verify(fingerprint, kSlackHost)) {\n   Serial.println(\"ssl cert matches\");\n } else {\n   Serial.println(\"ssl cert mismatch\");\n }\n\n  // submit\n  String message = \"test from ESP8266\";\n  String payload=\"payload={\\\"channel\\\": \\\"\" + kSlackChannel + \"\\\", \\\"username\\\": \\\"\" + kSlackUsername \n  + \"\\\", \\\"text\\\": \\\"\" + message + \"\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\";\n  Serial.println(payload.c_str());\n\n  client.print(\"POST \");\n  client.print(kSlackUrl);\n  client.println(\" HTTP/1.1\");\n  client.print(\"Host: \");\n  client.println(kSlackHost);\n  client.println(\"User-Agent: ArduinoIoT/1.0\");\n  client.println(\"Connection: close\");\n  client.println(\"Content-Type: application/x-www-form-urlencoded;\");\n  client.print(\"Content-Length: \");\n  client.println(payload.length());\n  client.println();\n  client.println(payload);\n\n  // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\u524d\u306b5\u79d2\u4ee5\u4e0a\u306f\u5f85\u3063\u305f\u65b9\u304c\u3044\u3044\u3089\u3057\u3044\n  delay(7000);\n\n  while(client.available()) {\n    String line = client.readStringUntil('\\r');\n    Serial.println(line);\n  }\n  client.stop();\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\"); // to separate line\n\n  WiFi_setup();\n  slack_submit();\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n\n\nESP8266\u3092\u8d77\u52d5\u3059\u308b\u30681\u56de\u3060\u3051Slack\u3078\u6295\u7a3f\u3057\u307e\u3059\u3002\n\n\u7d50\u679c\n\n192.168.10.2\nslack connection: OK\nssl cert mismatch\npayload={\"channel\": \"#amazon_dash\", \"username\": \"7of9\", \"text\": \"test from ESP8266\", \"icon_emoji\": \":ghost:\"}\n\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u6295\u7a3f\u304c\u3067\u304d\u305f\u3002\n\nssl cert mismatch\u3068\u306a\u3063\u3066\u3044\u308b\u70b9\u306f\u6765\u5e74\u306e\u8ab2\u984c\u3060\u3002\n```txt:\u4f7f\u7528\u6a5f\u6750\nESP-WROOM-02 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u57fa\u677f\u5b9f\u88c5\n```\n\nESP8266\u304b\u3089Slack\u3078\u306e\u6295\u7a3f\u3092\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n\n\u53c2\u8003 http://qiita.com/kiyopikko/items/4c525103700f52cb2894\n\u53c2\u8003 http://www.iotforest.com/2016/3/4/esp8266-arduino-feather-huzzah-using-slack-integration\n\u53c2\u8003 http://nyanko-omori.hatenablog.com/entry/2016/08/14/144918\n\n## v0.1\n\n### code > WiFi\u8a2d\u5b9a\n\nWifiConfig.h : \n\u81ea\u5206\u306e\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u3092\u8a18\u8f09\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3002\n**<font color=red>\u6ce8\u610f: GitHub\u306a\u3069\u306b\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u3057\u306a\u3044\u3053\u3068</font>**\n\n\u4f8b\n\n```\nstatic const char *kSsid = \"pi-31415-g\";\nstatic const char *kPass = \"47voyager\";\n```\n\n### code > Slack\u8a2d\u5b9a\n\nslackConfig.h :\nSlack\u306e\u30c1\u30e3\u30cd\u30eb\u3001Incoming WebHooks\u306a\u3069\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3002\n\n**<font color=red>\u6ce8\u610f: GitHub\u306a\u3069\u306b\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u3057\u306a\u3044\u3053\u3068</font>**\n\n\u4f8b\n\n```\nstatic const char *kSlackUrl = \"/services/PIPIPI/NAPIER/3141592653589793228\";\nstatic const String kSlackChannel = \"#amazon_dash\";\nstatic const String kSlackUsername = \"7of9\";\n```\n\nkSlackUrl \u306b\u306fIncoming WebHooks\u306eURL\u306e`/services/`\u304b\u3089\u59cb\u307e\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n### code > \u672c\u4f53\n\n\u53c2\u8003\u306e\u30ea\u30f3\u30af\u306e\u30b3\u30fc\u30c9\u3092\u3082\u3068\u306b\u4ee5\u4e0b\u3068\u3057\u307e\u3057\u305f\u3002\n\n```c:esp2866_161230_slack\n#include <ESP8266WiFi.h>\n#include <WiFiClientSecure.h>\n#include \"WifiConfig.h\" // for [kSsid],[kPass]\n#include \"slackConfig.h\" // for [kSlackUrl]\n\n/*\n * v0.1 Dec. 31, 2016\n *   Based on:\n *   http://qiita.com/kiyopikko/items/4c525103700f52cb2894\n *   http://www.iotforest.com/2016/3/4/esp8266-arduino-feather-huzzah-using-slack-integration\n * \n */\n\nstatic const char *kSlackHost = \"hooks.slack.com\";\nstatic const int kHttpsPort = 443;\n\nvoid WiFi_setup()\n{\n  WiFi.begin(kSsid, kPass);\n  while( WiFi.status() != WL_CONNECTED) {\n    delay(500); // msec\n  }\n  Serial.println(WiFi.localIP());\n}\n\nvoid slack_submit()\n{\n  WiFiClientSecure client;\n\n  // connect\n  if (!client.connect(kSlackHost, kHttpsPort)) { \n    Serial.println(\"slack connection failed\");\n  } else {\n    Serial.println(\"slack connection: OK\");    \n  }\n\n  // SSL Certificate finngerprint for the host\n  const char* fingerprint = \"\u200e\u200e\u200e\u200eab f0 5b a9 1a e0 ae 5f ce 32 2e 7c 66 67 49 ec dd 6d 6a 38\";\n  // verify the signature of the ssl certificate\n if (client.verify(fingerprint, kSlackHost)) {\n   Serial.println(\"ssl cert matches\");\n } else {\n   Serial.println(\"ssl cert mismatch\");\n }\n\n  // submit\n  String message = \"test from ESP8266\";\n  String payload=\"payload={\\\"channel\\\": \\\"\" + kSlackChannel + \"\\\", \\\"username\\\": \\\"\" + kSlackUsername \n  + \"\\\", \\\"text\\\": \\\"\" + message + \"\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\";\n  Serial.println(payload.c_str());\n\n  client.print(\"POST \");\n  client.print(kSlackUrl);\n  client.println(\" HTTP/1.1\");\n  client.print(\"Host: \");\n  client.println(kSlackHost);\n  client.println(\"User-Agent: ArduinoIoT/1.0\");\n  client.println(\"Connection: close\");\n  client.println(\"Content-Type: application/x-www-form-urlencoded;\");\n  client.print(\"Content-Length: \");\n  client.println(payload.length());\n  client.println();\n  client.println(payload);\n\n  // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\u524d\u306b5\u79d2\u4ee5\u4e0a\u306f\u5f85\u3063\u305f\u65b9\u304c\u3044\u3044\u3089\u3057\u3044\n  delay(7000);\n\n  while(client.available()) {\n    String line = client.readStringUntil('\\r');\n    Serial.println(line);\n  }\n  client.stop();\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\"); // to separate line\n\n  WiFi_setup();\n  slack_submit();\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n```\n\nESP8266\u3092\u8d77\u52d5\u3059\u308b\u30681\u56de\u3060\u3051Slack\u3078\u6295\u7a3f\u3057\u307e\u3059\u3002\n\n```txt:\u7d50\u679c\n\n192.168.10.2\nslack connection: OK\nssl cert mismatch\npayload={\"channel\": \"#amazon_dash\", \"username\": \"7of9\", \"text\": \"test from ESP8266\", \"icon_emoji\": \":ghost:\"}\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u6295\u7a3f\u304c\u3067\u304d\u305f\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/ef889833-217b-da87-bb93-55280123e655.png)\n\n\n`ssl cert mismatch`\u3068\u306a\u3063\u3066\u3044\u308b\u70b9\u306f\u6765\u5e74\u306e\u8ab2\u984c\u3060\u3002\n\n\n", "tags": ["ESP8266", "Slack", "borgCommSystem1", "Primer"]}