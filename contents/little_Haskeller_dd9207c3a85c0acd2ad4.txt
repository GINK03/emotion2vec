{"tags": ["Haskell", "\u7d20\u6570", "\u6570\u5b66"], "context": " More than 1 year has passed since last update.\u79c1\u3082\u3001\u300e\u4eca\u5e74\u306e\u7d20\u6570\u65e5\u3092\u8a08\u7b97\u3057\u3066\u307f\u308b\u300f\u306b\u5023\u3063\u3066\u300c\u7d20\u6570\u65e5\u300d\u3092\u8abf\u3079\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u6539\u5909\u3057\u305f\u70b9\u306f \"isPrimeDay\" \u95a2\u6570\u3068 \"primeDaysIn\" \u95a2\u6570\u3092\u72ec\u7acb\u3055\u305b\u305f\u3053\u3068\u3068\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u306a\u3044\u5834\u5408\u306f\u4eca\u5e74\u306e\u7d20\u6570\u65e5\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\"isPrimeDay\" \u95a2\u6570\u3092\u72ec\u7acb\u3055\u305b\u305f\u306e\u3067\u3001\u7279\u5b9a\u306e\u65e5\u304c\u7d20\u6570\u65e5\u304b\u3092\u8abf\u3079\u305f\u308a\u3001\u3044\u308d\u3044\u308d\u306a\u7bc4\u56f2\u3067\u7d20\u6570\u65e5\u3092\u63a2\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nprimeDaysIn.hs\nimport System.Environment\nimport Data.Time.Calendar\nimport Data.Time.LocalTime\nimport Data.Char\n\n\n-- \u7d20\u6570\u304b\uff1f\nisPrime :: Integral a => a -> Bool\nisPrime n = n > 1 && foldr f True ps\n  where\n    ps = (2 : 3 : concat [[6 * x - 1, 6 * x + 1] | x <- [1 ..]])\n    f p r = (p * p > n) || (rem n p /= 0 && r)\n\n-- \u7d20\u6570\u65e5\u304b\uff1f\nisPrimeDay :: Day -> Bool\nisPrimeDay = isPrime . read . filter (/= '-') . show\n\n-- \u5f15\u6570\u306e\u5e74\u306e\u7d20\u6570\u65e5\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\nprimeDaysIn :: Integer -> [Day]\nprimeDaysIn y = filter isPrimeDay [fromGregorian y 1 1 .. fromGregorian y 12 31]\n\n\n--\n-- + \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u5e74\u3092\u6307\u5b9a\u3059\u308b\u3002\n-- + \u5f15\u6570\u304c\u306a\u3051\u308c\u3070\u4eca\u5e74\u306e\u7d20\u6570\u65e5\u3092\u8abf\u3079\u308b\u3002\n--\nmain :: IO ()\nmain = do args <- getArgs\n          let putUseage = putStrLn \"Usage : primeDaysIn <year>\"\n          case args of\n            y : _ -> if all isDigit y\n                       then mapM_ print $ primeDaysIn $ read y\n                       else putUseage\n            _     -> do y <- getZonedTime\n                        mapM_ print $ primeDaysIn $ read $ takeWhile (/= '-') $ show y\n\n\n>runghc primeDaysIn.hs 2015\nrunghc primeDaysIn.hs 2015\n2015-01-11\n2015-01-31\n2015-02-27\n2015-03-03\n2015-03-27\n2015-04-11\n2015-05-13\n2015-08-21\n2015-10-11\n2015-10-31\n2015-11-27\n2015-12-21\n2015-12-27\n\n\u79c1\u3082\u3001[\u300e\u4eca\u5e74\u306e\u7d20\u6570\u65e5\u3092\u8a08\u7b97\u3057\u3066\u307f\u308b\u300f](http://qiita.com/hamukazu/items/6d9d98f82a73f5875250)\u306b\u5023\u3063\u3066\u300c\u7d20\u6570\u65e5\u300d\u3092\u8abf\u3079\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u6539\u5909\u3057\u305f\u70b9\u306f \"**isPrimeDay**\" \u95a2\u6570\u3068 \"**primeDaysIn**\" \u95a2\u6570\u3092\u72ec\u7acb\u3055\u305b\u305f\u3053\u3068\u3068\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u306a\u3044\u5834\u5408\u306f\u4eca\u5e74\u306e\u7d20\u6570\u65e5\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n\"**isPrimeDay**\" \u95a2\u6570\u3092\u72ec\u7acb\u3055\u305b\u305f\u306e\u3067\u3001\u7279\u5b9a\u306e\u65e5\u304c\u7d20\u6570\u65e5\u304b\u3092\u8abf\u3079\u305f\u308a\u3001\u3044\u308d\u3044\u308d\u306a\u7bc4\u56f2\u3067\u7d20\u6570\u65e5\u3092\u63a2\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```Haskell:primeDaysIn.hs\nimport System.Environment\nimport Data.Time.Calendar\nimport Data.Time.LocalTime\nimport Data.Char\n\n\n-- \u7d20\u6570\u304b\uff1f\nisPrime :: Integral a => a -> Bool\nisPrime n = n > 1 && foldr f True ps\n  where\n    ps = (2 : 3 : concat [[6 * x - 1, 6 * x + 1] | x <- [1 ..]])\n    f p r = (p * p > n) || (rem n p /= 0 && r)\n\n-- \u7d20\u6570\u65e5\u304b\uff1f\nisPrimeDay :: Day -> Bool\nisPrimeDay = isPrime . read . filter (/= '-') . show\n\n-- \u5f15\u6570\u306e\u5e74\u306e\u7d20\u6570\u65e5\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\nprimeDaysIn :: Integer -> [Day]\nprimeDaysIn y = filter isPrimeDay [fromGregorian y 1 1 .. fromGregorian y 12 31]\n\n\n--\n-- + \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u5e74\u3092\u6307\u5b9a\u3059\u308b\u3002\n-- + \u5f15\u6570\u304c\u306a\u3051\u308c\u3070\u4eca\u5e74\u306e\u7d20\u6570\u65e5\u3092\u8abf\u3079\u308b\u3002\n--\nmain :: IO ()\nmain = do args <- getArgs\n          let putUseage = putStrLn \"Usage : primeDaysIn <year>\"\n          case args of\n            y : _ -> if all isDigit y\n                       then mapM_ print $ primeDaysIn $ read y\n                       else putUseage\n            _     -> do y <- getZonedTime\n                        mapM_ print $ primeDaysIn $ read $ takeWhile (/= '-') $ show y\n```\n\n\n```\n>runghc primeDaysIn.hs 2015\nrunghc primeDaysIn.hs 2015\n2015-01-11\n2015-01-31\n2015-02-27\n2015-03-03\n2015-03-27\n2015-04-11\n2015-05-13\n2015-08-21\n2015-10-11\n2015-10-31\n2015-11-27\n2015-12-21\n2015-12-27\n```\n"}