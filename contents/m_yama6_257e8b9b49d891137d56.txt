{"context": "Python\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u52c9\u5f37\u306e\u305f\u3081\u306b\u57fa\u672c\u7684\u306a\u30bd\u30fc\u30c8\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u6c17\u304c\u5411\u3044\u305f\u3089\u4eca\u5f8c\u3082\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u9078\u629e\u30bd\u30fc\u30c8 (selection sort)\ndef sSort(a):\n    for i in range(len(a)-1):\n        mi = a[i:].index(min(a[i:]))\n        a[i], a[i+mi] = a[i+mi], a[i]\n\n    return a\n\n\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8 (bubble sort)\ndef bSort(a):\n    for i in range(len(a)):\n        for j in range(len(a)-1, i, -1):\n            if a[j] < a[j-1]:\n                a[j], a[j-1] = a[j-1], a[j]\n\n    return a\n\n\n\u633f\u5165\u30bd\u30fc\u30c8 (insertion sort)\ndef iSort(a):\n    for i in range(1, len(a)):\n        for j in range(i, 0, -1):\n            if a[j] >= a[j-1]:\n                break\n            else:\n                a[j], a[j-1] = a[j-1], a[j]\n\n    return a\n\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 (quick sort)\ndef qSort(a):\n    if len(a) in (0, 1):\n        return a\n\n    p = a[-1]\n    l = [x for x in a[:-1] if x <= p]\n    r = [x for x in a[:-1] if x >  p]\n\n    return qSort(l) + [p] + qSort(r)\n\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8 (merge sort)\ndef merge(l, r):\n    n = len(l + r) # \u30de\u30fc\u30b8\u5f8c\u306e\u914d\u5217\u306e\u30b5\u30a4\u30ba\n    s = max(l + r) + 1 # \u756a\u5175\n\n    l.append(s)\n    r.append(s)\n\n    a = []\n    while len(a) < n:\n        a.append(l.pop(0)) if l[0] <= r[0] else a.append(r.pop(0))\n\n    return a\n\ndef mSort(a):\n    if len(a) == 1:\n        return a\n\n    mid = len(a) // 2\n    l = mSort(a[:mid])\n    r = mSort(a[mid:])\n\n    return merge(l, r)\n\nPython\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u52c9\u5f37\u306e\u305f\u3081\u306b\u57fa\u672c\u7684\u306a\u30bd\u30fc\u30c8\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u6c17\u304c\u5411\u3044\u305f\u3089\u4eca\u5f8c\u3082\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n#\u9078\u629e\u30bd\u30fc\u30c8 (selection sort)\n\n```python\ndef sSort(a):\n    for i in range(len(a)-1):\n        mi = a[i:].index(min(a[i:]))\n        a[i], a[i+mi] = a[i+mi], a[i]\n    \n    return a\n```\n\n#\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8 (bubble sort)\n\n```python\ndef bSort(a):\n    for i in range(len(a)):\n        for j in range(len(a)-1, i, -1):\n            if a[j] < a[j-1]:\n                a[j], a[j-1] = a[j-1], a[j]\n            \n    return a\n```\n\n#\u633f\u5165\u30bd\u30fc\u30c8 (insertion sort)\n\n```python\ndef iSort(a):\n    for i in range(1, len(a)):\n        for j in range(i, 0, -1):\n            if a[j] >= a[j-1]:\n                break\n            else:\n                a[j], a[j-1] = a[j-1], a[j]\n    \n    return a\n```\n\n#\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 (quick sort)\n\n```python\ndef qSort(a):\n    if len(a) in (0, 1):\n        return a\n    \n    p = a[-1]\n    l = [x for x in a[:-1] if x <= p]\n    r = [x for x in a[:-1] if x >  p]\n\n    return qSort(l) + [p] + qSort(r)\n```\n\n#\u30de\u30fc\u30b8\u30bd\u30fc\u30c8 (merge sort)\n\n```python\ndef merge(l, r):\n    n = len(l + r) # \u30de\u30fc\u30b8\u5f8c\u306e\u914d\u5217\u306e\u30b5\u30a4\u30ba\n    s = max(l + r) + 1 # \u756a\u5175\n\n    l.append(s)\n    r.append(s)\n\n    a = []\n    while len(a) < n:\n        a.append(l.pop(0)) if l[0] <= r[0] else a.append(r.pop(0))\n    \n    return a\n\ndef mSort(a):\n    if len(a) == 1:\n        return a\n\n    mid = len(a) // 2\n    l = mSort(a[:mid])\n    r = mSort(a[mid:])\n    \n    return merge(l, r)\n```\n\n", "tags": ["Python", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}