{"context": "\n\n\u306f\u3058\u3081\u306b\nNode\u30e6\u30fc\u30b6\u30fc\u306e\u70ba\u306e\u5171\u5f79\u52fe\u914d\u6cd5\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3002\n\u53ce\u675f\u3057\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u3089\u3057\u3044\u3002\n\u4e0d\u5b8c\u5168\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\u4ed8\u5171\u5f79\u52fe\u914d\u6cd5\u306f\u8aa4\u5dee\u306e\u5f71\u97ff\u3092\u6e1b\u3089\u3057\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u70ba\u306b\u3042\u308b\u3002\n\u5727\u529b\u306e\u30dd\u30a2\u30bd\u30f3\u65b9\u7a0b\u5f0f\u306b\u30c7\u30a3\u30ea\u30af\u30ec\u5883\u754c\u6761\u4ef6\u3068\u30ce\u30a4\u30de\u30f3\u5883\u754c\u6761\u4ef6\u3092\u4ed8\u52a0\u3059\u308b\u3088\u3046\u306b\u3001\n\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306b\u306f\u8a08\u7b97\u904e\u7a0b\u306e\u3044\u305f\u308b\u3068\u3053\u308d\u306b\u6761\u4ef6\u5206\u5c90\u304c\u5165\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4e0b\u306e\u8a18\u4e8b\u3068\u5927\u5b66\u6c34\u5de5\u5b66\u7814\u7a76\u5ba4\u306e\u3082\u306e\u3092\u8aad\u3093\u3067\u3044\u308b\u3002\njicfus.jp\nslis.tsukuba.ac.jp\n\n\u5171\u5f79\u52fe\u914d\u6cd5\n\u53cd\u5fa9\u6cd5\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u3001\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\u306e\u3088\u3046\u306a\u76f4\u63a5\u6cd5\u3067\u306f\u5927\u304d\u3059\u304e\u3066\u53d6\u308a\u6271\u3048\u306a\u3044\u3001\u5927\u898f\u6a21\u306a\u758e\u884c\u5217\u3092\u89e3\u304f\u305f\u3081\u306b\u5229\u7528\u3055\u308c\u308b\u3002\n\u305d\u306e\u3088\u3046\u306a\u554f\u984c\u306f\u504f\u5fae\u5206\u65b9\u7a0b\u5f0f\u306a\u3069\u3092\u6570\u5024\u7684\u306b\u89e3\u304f\u969b\u306b\u5e38\u306b\u73fe\u308c\u308b\u3002\n= ja.wikipedia.org\nx\u3092\u89e3\u3068\u3059\u308bn\u6b21\u65b9\u7a0b\u5f0f\u3092\u8003\u3048\u308b\u3002\n{\\bf A} {\\bf x} = {\\bf b}\n\n\u3053\u3053\u3067\u3001A\u306f\u6b63\u5b9a\u5024\u5bfe\u79f0\u884c\u5217\u306a\u306e\u3067\u6ce8\u610f\u3002\n\nNode\nconst A = new Float64Array([\n  1, 2, 4, 6,\n  2, 3, 2, 8,\n  4, 2, 2, 4,\n  6, 8, 4, 1\n])\n\nconst x = new Float64Array([\n  0, 0, 0, 0\n])\n\nconst b = new Float64Array([\n  2, 4, 8, 6\n])\n\n\n\u8a08\u7b97\u306e\u70ba\u306b\u3001\u9069\u5f53\u306a\u5024\u3044\u308c\u3066\u304a\u3044\u305f\u3002\n\u521d\u671f\u8fd1\u4f3c\u89e3\u304c\u771f\u306b\u8fd1\u3044\u5024\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u307b\u3069\u63a2\u7d22\u304c\u6e1b\u308a\u9ad8\u901f\u306b\u8a08\u7b97\u304c\u7d42\u308f\u308b\u3053\u3068\u306b\u306a\u308b\u3002\nfunction CGSolver (A, x, b) {\n  const n = x.length\n\n  let r = new Float64Array(n) // \u6b8b\u5dee\n  let p = new Float64Array(n) // \u57fa\u5e95\u30d9\u30af\u30c8\u30eb\n\n  // \u2193 \u521d\u671f\u8fd1\u4f3c\u89e3\u306b\u3088\u308b\u6b8b\u5dee\n  for (let i = 0; i < n; ++i) {\n    let Ax = 0.0\n    for (let j = 0; j < n; ++j) {\n      Ax += A[j * n + i] * x[j]\n    }\n    r[i] = b[i] - Ax\n    p[i] = r[i]\n  }\n\n  let rr0 = dot(r, r)\n\n  let Ap = new Float64Array(n)\n\n  const limit = 40\n\n  for (let k = 0; k < limit; ++k) {\n\n    // Ap = (A, p)\n    for (let i = 0; i < n; ++i) {\n      let res = 0\n      for (let j = 0; j < n; ++j) {\n        res += A[i * n + j] * p[j]\n      }\n      Ap[i] = res\n    }\n\n    // \u2193 alpha = (r, r) / (p, AP)\n    const alpha = rr0 / dot(p, Ap)\n\n    // \u2193 \u8fd1\u4f3c\u89e3\u3068\u6b8b\u5dee\u306e\u4fee\u6b63\n    for (let i = 0; i < n; ++i) {\n      x[i] += alpha * p[i]\n      r[i] -= alpha * Ap[i]\n    }\n\n    const rr1 = dot(r, r)\n\n    // \u2193 \u30d9\u30af\u30c8\u30eb\u30ce\u30eb\u30e0 \u03a3|x[i]| < eps\n    let norm = 0\n    for (let i = 0; i < n; ++i) {\n      norm += Math.abs(r[i])\n    }\n    if (norm < 1.0e-6) break\n\n    // \u2193 beta = (r, r) / (r', r')\n    const beta = rr1 / rr0\n    for (let i = 0; i < n; ++i) {\n      p[i] = r[i] + beta * p[i]\n    }\n\n    rr0 = rr1\n  }\n}\n\nfunction dot (x, y) {\n  let res = 0\n  for (let i = 0; i < x.length; ++i) {\n    res += x[i] * y[i]\n  }\n  return res\n}\n\n\u53cd\u5fa9\u306e\u6700\u5927\u6570\u306f40\u306b\u8a2d\u5b9a\u3001\u53ce\u675f\u3068\u5224\u5b9a\u3055\u308c\u305f\u6642\u70b9\u3067\u8a08\u7b97\u306f\u7d42\u4e86\u3002\n\u30ac\u30a6\u30b9\u306e\u6d88\u53bb\u6cd5\u3092\u7528\u3044\u3066\u8aa4\u5dee\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\nNode\nconst A = new Float64Array([\n  1, 2, 4, 6,\n  2, 3, 2, 8,\n  4, 2, 2, 4,\n  6, 8, 4, 1\n])\n\nconst x = new Float64Array([\n  0, 0, 0, 0\n])\n\nconst b = new Float64Array([\n  2, 4, 8, 6\n])\n\nconst _A = A.slice()\nconst _x = x.slice()\nconst _b = b.slice()\n\nCGMethod(A, x, b)\n\ngaussianElimination(_A, _x, _b)\n\nfor (let i = 0, len = x.length; i < len; ++i) {\n  const d = Math.abs(x[i] - _x[i])\n  console.log(d)\n}\n\nfunction gaussianElimination (A, x, b) {\n  const n = x.length\n\n  let c = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      c = A[j * n + i] / A[i * n + i]\n      for (let k = i + 1; k < n; k++) {\n        A[j * n + k] -= c * A[i * n + k]\n      }\n      b[j] -= c * b[i]\n    }\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    let sum = 0.0\n    for (let j = i + 1; j < n; j++) {\n      sum += A[i * n + j] * x[j]\n    }\n    x[i] = (b[i] - sum) / A[i * n + i]\n  }\n}\n\n\n\u8a08\u7b97\u306e\u8aa4\u5dee\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n|x[0] - _x[0]| = 2.6645352591003757e-15\n|x[1] - _x[1]| = 4.3298697960381105e-15\n|x[2] - _x[2]| = 1.0894063429134349e-15\n|x[3] - _x[3]| = 4.2188474935755950e-15\n\n3\u56de\u306e\u8a08\u7b97\u901f\u5ea6\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n\n\n\n\n\n\n\n\n\n\nICCGSolver\n0.770ms\n0.673ms\n0.670ms\n\n\ngaussianElimination\n0.284ms\n0.250ms\n0.255ms\n\n\n\n\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u884c\u5217\u306e\u6b21\u5143\u304c\u4f4e\u3044\u3053\u3068\u3084\u521d\u671f\u8fd1\u4f3c\u89e3\u304c0\u3067\u3042\u308b\u3053\u3068\u306a\u3069\u3002\n\n\u4e0d\u5b8c\u5168\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\n\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\uff08\u30b3\u30ec\u30b9\u30ad\u30fc\u3076\u3093\u304b\u3044\uff09\u3068\u306f\u3001\u6b63\u5b9a\u5024\u30a8\u30eb\u30df\u30fc\u30c8\u884c\u5217A\u3092\u4e0b\u4e09\u89d2\u884c\u5217L\u3068L\u306e\u5171\u5f79\u8ee2\u7f6eL*\u3068\u306e\u7a4d\u306b\u5206\u89e3\u3059\u308b\u3053\u3068\u3002\n= ja.wikipedia.org\n\nNode\nfunction incompleteCholeskyFactorization (A, L, d) {\n  const n = d.length\n\n  L[0] = A[0]\n  d[0] = 1.0 / L[0]\n  for (let i = 1; i < n; ++i) {\n    for (let j = 0; j <= i; ++j) {\n      if (Math.abs(A[j * n + i]) < 1.0e-10) continue\n      let lld = A[j * n + i]\n      for (let k = 0; k < j; ++k) {\n        lld -= L[k * n + i] * L[k * n + j] * d[k]\n      }\n      L[j * n + i] = lld\n    }\n    d[i] = 1.0 / L[i * n + i]\n  }\n}\n\n\n\u5206\u89e3\u3055\u308c\u305f\u5bfe\u89d2\u6210\u5206\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u751f\u6210\u3059\u308b\u306e\u307f\u3002\n\nNode\nconst A = new Float64Array([\n  1, 2, 4, 6,\n  2, 3, 2, 8,\n  4, 2, 2, 4,\n  6, 8, 4, 1\n])\nlet d = new Float64Array(n) // \u5bfe\u89d2\u6210\u5206\nlet L = new Float64Array(n * n) // \u4e0b\u4e09\u89d2\u884c\u5217\n\nincompleteCholeskyFactorization(A, L, d)\n\n\n\n\u4e0d\u5b8c\u5168\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\u4ed8\u5171\u5f79\u52fe\u914d\u6cd5\n(LDL^t)^-1\u3068r\u306e\u5185\u7a4d\u3092\u6c42\u3081\u308b\u51e6\u7406\u306f\u95a2\u6570ICRes\u3002\nfunction ICCGSolver (A, x, b) {\n  const n = x.length\n\n  let r = new Float64Array(n) // \u6b8b\u5dee\n  let p = new Float64Array(n) // \u57fa\u5e95\u30d9\u30af\u30c8\u30eb\n\n  let r2 = new Float64Array(n)\n\n  let d = new Float64Array(n) // \u5bfe\u89d2\u6210\u5206\n  let L = new Float64Array(n * n) // \u4e0b\u4e09\u89d2\u884c\u5217\n\n  incompleteCholeskyFactorization(A, L, d)\n\n  // \u2193 \u521d\u671f\u8fd1\u4f3c\u89e3\u306b\u3088\u308b\u6b8b\u5dee\n  for (let i = 0; i < n; ++i) {\n    let Ax = 0.0\n    for (let j = 0; j < n; ++j) {\n      Ax += A[j * n + i] * x[j]\n    }\n    r[i] = b[i] - Ax\n  }\n\n  // \u2193 ((LDL^t)^-1, r)\n  ICRes(L, d, r, p, n)\n\n  let rr0 = dot(r, p, n)\n\n  let Ap = new Float64Array(n)\n\n  const limit = 40\n\n  for (let k = 0; k < limit; ++k) {\n\n    // Ap = (A, p)\n    for (let i = 0; i < n; ++i) {\n      let res = 0\n      for (let j = 0; j < n; ++j) {\n        res += A[i * n + j] * p[j]\n      }\n      Ap[i] = res\n    }\n\n    // \u2193 alpha = (r,r) / (p,Ap)\n    let alpha = rr0 / dot(p, Ap, n)\n\n    // \u2193 \u8fd1\u4f3c\u89e3\u3068\u6b8b\u5dee\u306e\u4fee\u6b63\n    for (let i = 0; i < n; ++i) {\n      x[i] += alpha * p[i]\n      r[i] -= alpha * Ap[i]\n    }\n\n    ICRes(L, d, r, r2)\n\n    let rr1 = dot(r, r2, n)\n\n    // \u2193 \u30d9\u30af\u30c8\u30eb\u30ce\u30eb\u30e0 \u03a3|x[i]| < eps\n    let norm = 0\n    for (let i = 0; i < n; ++i) {\n      norm += Math.abs(r[i])\n    }\n    if (norm < 1.0e-6) break\n\n    // \u2193 beta = (r, r) / (r', r')\n    let beta = rr1 / rr0\n    for (let i = 0; i < n; ++i) {\n      p[i] = r2[i] + beta * p[i]\n    }\n\n    rr0 = rr1\n  }\n}\n\nfunction dot (x, y) {\n  let res = 0\n  for (let i = 0; i < x.length; ++i) {\n    res += x[i] * y[i]\n  }\n  return res\n}\n\nfunction incompleteCholeskyFactorization (A, L, d) {\n  const n = d.length\n\n  L[0] = A[0]\n  d[0] = 1.0 / L[0]\n  for (let i = 1; i < n; ++i) {\n    for (let j = 0; j <= i; ++j) {\n      if (Math.abs(A[j * n + i]) < 1.0e-10) continue\n      let lld = A[j * n + i]\n      for (let k = 0; k < j; ++k) {\n        lld -= L[k * n + i] * L[k * n + j] * d[k]\n      }\n      L[j * n + i] = lld\n    }\n    d[i] = 1.0 / L[i * n + i]\n  }\n}\n\nfunction ICRes (L, d, r, u, n) {\n  let y = new Float64Array(n)\n\n  for (let i = 0; i < n; ++i) {\n    let rly = r[i]\n    for (let j = 0; j < i; ++j) {\n      rly -= L[j * n + i] * y[j]\n    }\n    y[i] = rly / L[i * n + i]\n  }\n\n  for (let i = n - 1; i >= 0; --i) {\n    let lu = 0.0\n    for (let j = i + 1; j < n; ++j) {\n      lu += L[i * n + j] * u[j]\n    }\n    u[i] = y[i] - d[i] * lu\n  }\n}\n\n\u8a08\u7b97\u306e\u8aa4\u5dee\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n|x[0] - _x[0]| = 8.8817841970012520e-16\n|x[1] - _x[1]| = 4.4408920985006260e-16\n|x[2] - _x[2]| = 2.7755575615628914e-17\n|x[3] - _x[3]| = 1.1102230246251565e-16\n\n3\u56de\u306e\u8a08\u7b97\u901f\u5ea6\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n\n\n\n\n\n\n\n\n\n\nICCGSolver\n1.040ms\n1.191ms\n1.384ms\n\n\ngaussianElimination\n0.251ms\n0.262ms\n0.286ms\n\n\n\n\u4e0d\u5b8c\u5168\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\u3067\u9ad8\u901f\u5316\u3055\u308c\u308b\u884c\u5217\u306f\u9650\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\n# \u306f\u3058\u3081\u306b\n\nNode\u30e6\u30fc\u30b6\u30fc\u306e\u70ba\u306e\u5171\u5f79\u52fe\u914d\u6cd5\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3002\n\n\u53ce\u675f\u3057\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u3089\u3057\u3044\u3002\n\u4e0d\u5b8c\u5168\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\u4ed8\u5171\u5f79\u52fe\u914d\u6cd5\u306f\u8aa4\u5dee\u306e\u5f71\u97ff\u3092\u6e1b\u3089\u3057\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u70ba\u306b\u3042\u308b\u3002\n\n\u5727\u529b\u306e\u30dd\u30a2\u30bd\u30f3\u65b9\u7a0b\u5f0f\u306b\u30c7\u30a3\u30ea\u30af\u30ec\u5883\u754c\u6761\u4ef6\u3068\u30ce\u30a4\u30de\u30f3\u5883\u754c\u6761\u4ef6\u3092\u4ed8\u52a0\u3059\u308b\u3088\u3046\u306b\u3001\n\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306b\u306f\u8a08\u7b97\u904e\u7a0b\u306e\u3044\u305f\u308b\u3068\u3053\u308d\u306b\u6761\u4ef6\u5206\u5c90\u304c\u5165\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4e0b\u306e\u8a18\u4e8b\u3068\u5927\u5b66\u6c34\u5de5\u5b66\u7814\u7a76\u5ba4\u306e\u3082\u306e\u3092\u8aad\u3093\u3067\u3044\u308b\u3002\n\n[jicfus.jp](http://www.jicfus.jp/wiki/index.php?CG%20\u6cd5)\n\n[slis.tsukuba.ac.jp](http://www.slis.tsukuba.ac.jp/~fujisawa.makoto.fu/cgi-bin/wiki/index.php?%CF%A2%CE%A91%BC%A1%CA%FD%C4%F8%BC%B0%A1%A7%B6%A6%CC%F2%B8%FB%C7%DB%CB%A1)\n\n# \u5171\u5f79\u52fe\u914d\u6cd5\n\n\u53cd\u5fa9\u6cd5\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u3001\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\u306e\u3088\u3046\u306a\u76f4\u63a5\u6cd5\u3067\u306f\u5927\u304d\u3059\u304e\u3066\u53d6\u308a\u6271\u3048\u306a\u3044\u3001\u5927\u898f\u6a21\u306a\u758e\u884c\u5217\u3092\u89e3\u304f\u305f\u3081\u306b\u5229\u7528\u3055\u308c\u308b\u3002\n\u305d\u306e\u3088\u3046\u306a\u554f\u984c\u306f\u504f\u5fae\u5206\u65b9\u7a0b\u5f0f\u306a\u3069\u3092\u6570\u5024\u7684\u306b\u89e3\u304f\u969b\u306b\u5e38\u306b\u73fe\u308c\u308b\u3002\n= [ja.wikipedia.org](https://ja.wikipedia.org/wiki/\u5171\u5f79\u52fe\u914d\u6cd5)\n\nx\u3092\u89e3\u3068\u3059\u308bn\u6b21\u65b9\u7a0b\u5f0f\u3092\u8003\u3048\u308b\u3002\n\n```math\n{\\bf A} {\\bf x} = {\\bf b}\n```\n\n\u3053\u3053\u3067\u3001__A__\u306f\u6b63\u5b9a\u5024\u5bfe\u79f0\u884c\u5217\u306a\u306e\u3067\u6ce8\u610f\u3002\n\n```js:Node\nconst A = new Float64Array([\n  1, 2, 4, 6,\n  2, 3, 2, 8,\n  4, 2, 2, 4,\n  6, 8, 4, 1\n])\n\nconst x = new Float64Array([\n  0, 0, 0, 0\n])\n\nconst b = new Float64Array([\n  2, 4, 8, 6\n])\n```\n\n\u8a08\u7b97\u306e\u70ba\u306b\u3001\u9069\u5f53\u306a\u5024\u3044\u308c\u3066\u304a\u3044\u305f\u3002\n\n\u521d\u671f\u8fd1\u4f3c\u89e3\u304c\u771f\u306b\u8fd1\u3044\u5024\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u307b\u3069\u63a2\u7d22\u304c\u6e1b\u308a\u9ad8\u901f\u306b\u8a08\u7b97\u304c\u7d42\u308f\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n```js\nfunction CGSolver (A, x, b) {\n  const n = x.length\n\n  let r = new Float64Array(n) // \u6b8b\u5dee\n  let p = new Float64Array(n) // \u57fa\u5e95\u30d9\u30af\u30c8\u30eb\n\n  // \u2193 \u521d\u671f\u8fd1\u4f3c\u89e3\u306b\u3088\u308b\u6b8b\u5dee\n  for (let i = 0; i < n; ++i) {\n    let Ax = 0.0\n    for (let j = 0; j < n; ++j) {\n      Ax += A[j * n + i] * x[j]\n    }\n    r[i] = b[i] - Ax\n    p[i] = r[i]\n  }\n\n  let rr0 = dot(r, r)\n\n  let Ap = new Float64Array(n)\n\n  const limit = 40\n\n  for (let k = 0; k < limit; ++k) {\n\n    // Ap = (A, p)\n    for (let i = 0; i < n; ++i) {\n      let res = 0\n      for (let j = 0; j < n; ++j) {\n        res += A[i * n + j] * p[j]\n      }\n      Ap[i] = res\n    }\n\n    // \u2193 alpha = (r, r) / (p, AP)\n    const alpha = rr0 / dot(p, Ap)\n\n    // \u2193 \u8fd1\u4f3c\u89e3\u3068\u6b8b\u5dee\u306e\u4fee\u6b63\n    for (let i = 0; i < n; ++i) {\n      x[i] += alpha * p[i]\n      r[i] -= alpha * Ap[i]\n    }\n\n    const rr1 = dot(r, r)\n\n    // \u2193 \u30d9\u30af\u30c8\u30eb\u30ce\u30eb\u30e0 \u03a3|x[i]| < eps\n    let norm = 0\n    for (let i = 0; i < n; ++i) {\n      norm += Math.abs(r[i])\n    }\n    if (norm < 1.0e-6) break\n\n    // \u2193 beta = (r, r) / (r', r')\n    const beta = rr1 / rr0\n    for (let i = 0; i < n; ++i) {\n      p[i] = r[i] + beta * p[i]\n    }\n\n    rr0 = rr1\n  }\n}\n\nfunction dot (x, y) {\n  let res = 0\n  for (let i = 0; i < x.length; ++i) {\n    res += x[i] * y[i]\n  }\n  return res\n}\n```\n\n\u53cd\u5fa9\u306e\u6700\u5927\u6570\u306f40\u306b\u8a2d\u5b9a\u3001\u53ce\u675f\u3068\u5224\u5b9a\u3055\u308c\u305f\u6642\u70b9\u3067\u8a08\u7b97\u306f\u7d42\u4e86\u3002\n\n\u30ac\u30a6\u30b9\u306e\u6d88\u53bb\u6cd5\u3092\u7528\u3044\u3066\u8aa4\u5dee\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n```js:Node\nconst A = new Float64Array([\n  1, 2, 4, 6,\n  2, 3, 2, 8,\n  4, 2, 2, 4,\n  6, 8, 4, 1\n])\n\nconst x = new Float64Array([\n  0, 0, 0, 0\n])\n\nconst b = new Float64Array([\n  2, 4, 8, 6\n])\n\nconst _A = A.slice()\nconst _x = x.slice()\nconst _b = b.slice()\n\nCGMethod(A, x, b)\n\ngaussianElimination(_A, _x, _b)\n\nfor (let i = 0, len = x.length; i < len; ++i) {\n  const d = Math.abs(x[i] - _x[i])\n  console.log(d)\n}\n\nfunction gaussianElimination (A, x, b) {\n  const n = x.length\n\n  let c = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      c = A[j * n + i] / A[i * n + i]\n      for (let k = i + 1; k < n; k++) {\n        A[j * n + k] -= c * A[i * n + k]\n      }\n      b[j] -= c * b[i]\n    }\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    let sum = 0.0\n    for (let j = i + 1; j < n; j++) {\n      sum += A[i * n + j] * x[j]\n    }\n    x[i] = (b[i] - sum) / A[i * n + i]\n  }\n}\n```\n\n\u8a08\u7b97\u306e\u8aa4\u5dee\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n<pre>\n|x[0] - _x[0]| = 2.6645352591003757e-15\n|x[1] - _x[1]| = 4.3298697960381105e-15\n|x[2] - _x[2]| = 1.0894063429134349e-15\n|x[3] - _x[3]| = 4.2188474935755950e-15\n</pre>\n\n3\u56de\u306e\u8a08\u7b97\u901f\u5ea6\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n|||||\n|:--|--:|--:|--:|\n|ICCGSolver|0.770ms|0.673ms|0.670ms| \n|gaussianElimination|0.284ms|0.250ms|0.255ms|\n\n\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u884c\u5217\u306e\u6b21\u5143\u304c\u4f4e\u3044\u3053\u3068\u3084\u521d\u671f\u8fd1\u4f3c\u89e3\u304c0\u3067\u3042\u308b\u3053\u3068\u306a\u3069\u3002\n\n# \u4e0d\u5b8c\u5168\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\n\n\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\uff08\u30b3\u30ec\u30b9\u30ad\u30fc\u3076\u3093\u304b\u3044\uff09\u3068\u306f\u3001\u6b63\u5b9a\u5024\u30a8\u30eb\u30df\u30fc\u30c8\u884c\u5217A\u3092\u4e0b\u4e09\u89d2\u884c\u5217L\u3068L\u306e\u5171\u5f79\u8ee2\u7f6eL*\u3068\u306e\u7a4d\u306b\u5206\u89e3\u3059\u308b\u3053\u3068\u3002\n= [ja.wikipedia.org](https://ja.wikipedia.org/wiki/\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3)\n\n```js:Node\nfunction incompleteCholeskyFactorization (A, L, d) {\n  const n = d.length\n\n  L[0] = A[0]\n  d[0] = 1.0 / L[0]\n  for (let i = 1; i < n; ++i) {\n    for (let j = 0; j <= i; ++j) {\n      if (Math.abs(A[j * n + i]) < 1.0e-10) continue\n      let lld = A[j * n + i]\n      for (let k = 0; k < j; ++k) {\n        lld -= L[k * n + i] * L[k * n + j] * d[k]\n      }\n      L[j * n + i] = lld\n    }\n    d[i] = 1.0 / L[i * n + i]\n  }\n}\n```\n\n\u5206\u89e3\u3055\u308c\u305f\u5bfe\u89d2\u6210\u5206\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u751f\u6210\u3059\u308b\u306e\u307f\u3002\n\n```js:Node\nconst A = new Float64Array([\n  1, 2, 4, 6,\n  2, 3, 2, 8,\n  4, 2, 2, 4,\n  6, 8, 4, 1\n])\nlet d = new Float64Array(n) // \u5bfe\u89d2\u6210\u5206\nlet L = new Float64Array(n * n) // \u4e0b\u4e09\u89d2\u884c\u5217\n\nincompleteCholeskyFactorization(A, L, d)\n```\n\n# \u4e0d\u5b8c\u5168\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\u4ed8\u5171\u5f79\u52fe\u914d\u6cd5\n\n`(LDL^t)^-1`\u3068`r`\u306e\u5185\u7a4d\u3092\u6c42\u3081\u308b\u51e6\u7406\u306f\u95a2\u6570ICRes\u3002\n\n```js\nfunction ICCGSolver (A, x, b) {\n  const n = x.length\n\n  let r = new Float64Array(n) // \u6b8b\u5dee\n  let p = new Float64Array(n) // \u57fa\u5e95\u30d9\u30af\u30c8\u30eb\n\n  let r2 = new Float64Array(n)\n\n  let d = new Float64Array(n) // \u5bfe\u89d2\u6210\u5206\n  let L = new Float64Array(n * n) // \u4e0b\u4e09\u89d2\u884c\u5217\n\n  incompleteCholeskyFactorization(A, L, d)\n\n  // \u2193 \u521d\u671f\u8fd1\u4f3c\u89e3\u306b\u3088\u308b\u6b8b\u5dee\n  for (let i = 0; i < n; ++i) {\n    let Ax = 0.0\n    for (let j = 0; j < n; ++j) {\n      Ax += A[j * n + i] * x[j]\n    }\n    r[i] = b[i] - Ax\n  }\n\n  // \u2193 ((LDL^t)^-1, r)\n  ICRes(L, d, r, p, n)\n\n  let rr0 = dot(r, p, n)\n\n  let Ap = new Float64Array(n)\n\n  const limit = 40\n\n  for (let k = 0; k < limit; ++k) {\n\n    // Ap = (A, p)\n    for (let i = 0; i < n; ++i) {\n      let res = 0\n      for (let j = 0; j < n; ++j) {\n        res += A[i * n + j] * p[j]\n      }\n      Ap[i] = res\n    }\n\n    // \u2193 alpha = (r,r) / (p,Ap)\n    let alpha = rr0 / dot(p, Ap, n)\n\n    // \u2193 \u8fd1\u4f3c\u89e3\u3068\u6b8b\u5dee\u306e\u4fee\u6b63\n    for (let i = 0; i < n; ++i) {\n      x[i] += alpha * p[i]\n      r[i] -= alpha * Ap[i]\n    }\n\n    ICRes(L, d, r, r2)\n\n    let rr1 = dot(r, r2, n)\n\n    // \u2193 \u30d9\u30af\u30c8\u30eb\u30ce\u30eb\u30e0 \u03a3|x[i]| < eps\n    let norm = 0\n    for (let i = 0; i < n; ++i) {\n      norm += Math.abs(r[i])\n    }\n    if (norm < 1.0e-6) break\n\n    // \u2193 beta = (r, r) / (r', r')\n    let beta = rr1 / rr0\n    for (let i = 0; i < n; ++i) {\n      p[i] = r2[i] + beta * p[i]\n    }\n\n    rr0 = rr1\n  }\n}\n\nfunction dot (x, y) {\n  let res = 0\n  for (let i = 0; i < x.length; ++i) {\n    res += x[i] * y[i]\n  }\n  return res\n}\n\nfunction incompleteCholeskyFactorization (A, L, d) {\n  const n = d.length\n\n  L[0] = A[0]\n  d[0] = 1.0 / L[0]\n  for (let i = 1; i < n; ++i) {\n    for (let j = 0; j <= i; ++j) {\n      if (Math.abs(A[j * n + i]) < 1.0e-10) continue\n      let lld = A[j * n + i]\n      for (let k = 0; k < j; ++k) {\n        lld -= L[k * n + i] * L[k * n + j] * d[k]\n      }\n      L[j * n + i] = lld\n    }\n    d[i] = 1.0 / L[i * n + i]\n  }\n}\n\nfunction ICRes (L, d, r, u, n) {\n  let y = new Float64Array(n)\n\n  for (let i = 0; i < n; ++i) {\n    let rly = r[i]\n    for (let j = 0; j < i; ++j) {\n      rly -= L[j * n + i] * y[j]\n    }\n    y[i] = rly / L[i * n + i]\n  }\n\n  for (let i = n - 1; i >= 0; --i) {\n    let lu = 0.0\n    for (let j = i + 1; j < n; ++j) {\n      lu += L[i * n + j] * u[j]\n    }\n    u[i] = y[i] - d[i] * lu\n  }\n}\n```\n\n\u8a08\u7b97\u306e\u8aa4\u5dee\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n<pre>\n|x[0] - _x[0]| = 8.8817841970012520e-16\n|x[1] - _x[1]| = 4.4408920985006260e-16\n|x[2] - _x[2]| = 2.7755575615628914e-17\n|x[3] - _x[3]| = 1.1102230246251565e-16\n</pre>\n\n3\u56de\u306e\u8a08\u7b97\u901f\u5ea6\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n|||||\n|:--|--:|--:|--:|\n|ICCGSolver|1.040ms|1.191ms|1.384ms| \n|gaussianElimination|0.251ms|0.262ms|0.286ms|\n\n\u4e0d\u5b8c\u5168\u30b3\u30ec\u30b9\u30ad\u30fc\u5206\u89e3\u3067\u9ad8\u901f\u5316\u3055\u308c\u308b\u884c\u5217\u306f\u9650\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\n", "tags": ["JavaScript", "Node.js", "ECMAScript"]}