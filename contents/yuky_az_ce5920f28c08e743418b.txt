{"context": "\u524d\u56de\u306fMetal\u306b\u3088\u308bGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0(GPGPU)\u306e\u57fa\u790e\u3068\u7279\u6027\u3092\u6271\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u305d\u306e\u5fdc\u7528\u3092\u6271\u3044\u307e\u3059\u3002\u30a2\u30d7\u30ea\u306e\u63cf\u753b\u90e8\u5206\u306bMetal\u3092\u7528\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30ed\u30b8\u30c3\u30af\u90e8\u5206\u306bMetal\u3092\u7528\u3044\u308b\u3068\u3044\u3046\u901a\u5e38\u3068\u9006\u306e\u8a66\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001Metal\u3092\u7528\u3044\u3066\u7fa4\u77e5\u80fd\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u5404\u500b\u4f53\u306f\u30ed\u30fc\u30ab\u30eb\u306b\u4e92\u3044\u3068\u3001\u305d\u3057\u3066\u5f7c\u3089\u306e\u74b0\u5883\u3068\u5bfe\u8a71\u3059\u308b\u3002\u500b\u3005\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u3069\u3046\u884c\u52d5\u3059\u3079\u304d\u304b\u3092\u547d\u3058\u3066\u3044\u308b\u96c6\u4e2d\u7684\u306a\u5236\u5fa1\u69cb\u9020\u306f\u901a\u5e38\u5b58\u5728\u3057\u306a\u3044\u304c\u3001\u305d\u306e\u3088\u3046\u306a\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u9593\u306e\u5c40\u6240\u76f8\u4e92\u4f5c\u7528\u306f\u3057\u3070\u3057\u3070\u5168\u4f53\u306e\u884c\u52d5\u306e\u5275\u767a(emergence)\u3092\u3082\u305f\u3089\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u306e\u81ea\u7136\u754c\u306e\u4f8b\u3068\u3057\u3066\u3001\u30a2\u30ea\u306e\u5de3\u3001\u9ce5\u306e\u7fa4\u308c\u3001\u52d5\u7269\u306e\u7fa4\u308c\u3001\u7d30\u83cc\u306e\u30b3\u30ed\u30cb\u30fc\u3001\u9b5a\u306e\u7fa4\u308c\u306a\u3069\u304c\u3042\u308b\u3002\n-\u7fa4\u77e5\u80fd- Wikipedia\n\n\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u4e0a\u306e\u7fa4\u77e5\u80fd\u3068\u3057\u3066\u6709\u540d\u306a\u3082\u306e\u306b\u3001\u30af\u30ec\u30a4\u30b0\u30fb\u30ec\u30a4\u30ce\u30eb\u30ba\u306b\u3088\u3063\u3066\u8003\u6848\u3055\u308c\u305fBoids\u304c\u3042\u308a\u307e\u3059\u3002\nBoids\u306f\u8907\u96d1\u7cfb\u3084\u81ea\u5df1\u7d44\u7e54\u5316\u306b\u6df1\u304f\u95a2\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u5404\u500b\u4f53\u304c\u4ee5\u4e0b\u306e\u305f\u3063\u305f3\u3064\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3046\u3060\u3051\u3067\u3001\u500b\u4f53\u306e\u96c6\u5408\u304c\u9b5a\u3084\u9ce5\u306e\u7fa4\u308c\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3044\u307e\u3059\u3002\n1.\u5206\u96e2\uff08Separation\uff09\u5404\u500b\u4f53\u306f\u4ed6\u306e\u500b\u4f53\u3068\u3076\u3064\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u52d5\u304f\u3002\n2.\u6574\u5217\uff08Alignment\uff09\u5404\u500b\u4f53\u306f\u4ed6\u306e\u500b\u4f53\u3068\u901f\u5ea6\u3068\u65b9\u5411\u3092\u5408\u308f\u305b\u308b\u3088\u3046\u306b\u52d5\u304f\u3002\n3.\u7d50\u5408\uff08Cohesion\uff09\u5404\u500b\u4f53\u306f\u4ed6\u306e\u500b\u4f53\u306e\u96c6\u5408\u306e\u4e2d\u5fc3\u65b9\u5411\u3078\u5411\u304b\u3046\u3088\u3046\u306b\u52d5\u304f\u3002\n\u4e0a\u8a18\u3068\u5168\u304f\u540c\u3058\u306b\u3057\u3066\u3082\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u306e\u30eb\u30fc\u30eb\u306b\u5c11\u3057\u30a2\u30ec\u30f3\u30b8\u3092\u52a0\u3048\u307e\u3057\u305f\u3002\na.\u7b49\u8ddd\u96e2 \u5404\u500b\u4f53\u304c\u7b49\u8ddd\u96e2\u3092\u4fdd\u3064\u3088\u3046\u306b\u52d5\u304f\u3002\nb.\u4e26\u884c \u5404\u500b\u4f53\u304c\u4ed6\u306e\u500b\u4f53\u3068\u540c\u3058\u5411\u304d\u306b\u306a\u308b\u3088\u3046\u306b\u52d5\u304f\u3002\nc.\u7b49\u901f \u5404\u500b\u4f53\u306f\u4ed6\u306e\u500b\u4f53\u3068\u540c\u3058\u901f\u5ea6\u306b\u306a\u308b\u3088\u3046\u306b\u52d5\u304f\u3002\nBoids\u3068\u306e\u9055\u3044\u306f\u7fa4\u308c\u304c\u4e2d\u5fc3\u3092\u6301\u305f\u305a\u3001\u5404\u500b\u4f53\u304c\u3088\u308a\u5206\u6563\u7684\u306b\u52d5\u304f\u3053\u3068\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u4e0a\u8a18\u306ea\u3001b\u3001c\u3092\u6570\u5f0f\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001a.\u7b49\u8ddd\u96e2\u306e\u5f0f\u304b\u3089\u3067\u3059\u3002\n\u4ed6\u306e\u500b\u4f53\u304c\u8fd1\u3044\u5834\u5408\u306f\u4ed6\u306e\u500b\u4f53\u304b\u3089\u9060\u3056\u304b\u308b\u65b9\u5411\u306b\u3001\u9060\u3044\u5834\u5408\u306f\u8fd1\u305a\u304f\u65b9\u5411\u306b\u89d2\u5ea6\u304c\u5909\u5316\u3057\u307e\u3059\u3002\n\u0394\u03a6d=\u03b1(\u2211nk=0(\u03b8k\u2212\u03c1)exp(\u2212b(dk\u2212a)2)\u2212\u2211nk=0(\u03c8k\u2212\u03c1)exp(\u2212bd2k))\u0394t\u0394\u03a6d=\u03b1(\u2211k=0n(\u03b8k\u2212\u03c1)exp(\u2212b(dk\u2212a)2)\u2212\u2211k=0n(\u03c8k\u2212\u03c1)exp(\u2212bdk2))\u0394t \\Delta\\Phi_d = \\alpha \\left(\\sum_{k=0}^n (\\theta_k - \\rho) exp(-b (d_k - a)^2)  - \\sum_{k=0}^n (\\psi_k - \\rho) exp(-b d_k^2) \\right) \\Delta t\n\u0394\u03a6d\u0394\u03a6d\\Delta\\Phi_d: \u89d2\u5ea6\u306e\u5909\u5316\n\u03b1\u03b1\\alpha: \u89d2\u5ea6\u5909\u5316\u306e\u5927\u304d\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\nnnn: \u81ea\u8eab\u3092\u9664\u3044\u305f\u500b\u4f53\u6570\n\u03b8k\u03b8k\\theta_k: \u81ea\u8eab\u304b\u3089\u4ed6\u306e\u500b\u4f53\u3078\u5411\u304b\u3046\u30d9\u30af\u30c8\u30eb\u306e\u5411\u304d(\u89d2\u5ea6)\n\u03c8k\u03c8k\\psi_k: \u4ed6\u306e\u500b\u4f53\u304b\u3089\u81ea\u8eab\u3078\u5411\u304b\u3046\u30d9\u30af\u30c8\u30eb\u306e\u5411\u304d(\u89d2\u5ea6)\n\u03c1\u03c1\\rho: \u81ea\u8eab\u306e\u5411\u304d(\u89d2\u5ea6)\naaa: \u500b\u4f53\u9593\u306e\u671b\u307e\u3057\u3044\u8ddd\u96e2\u3092\u6c7a\u3081\u308b\u5b9a\u6570\nbbb: \u5f71\u97ff\u7bc4\u56f2\u306e\u5e83\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\ndkdkd_k: \u81ea\u8eab\u3068\u4ed6\u306e\u500b\u4f53\u9593\u306e\u8ddd\u96e2\n\u0394t\u0394t\\Delta t: \u6642\u9593\u9593\u9694\n\u53f3\u8fba()\u5185\u306e\u306e\u7b2c\u4e00\u9805\u306f\u5f15\u529b\u306e\u3088\u3046\u306b\u500b\u4f53\u540c\u58eb\u3092\u8fd1\u3065\u3051\u308b\u9805\u3001\u7b2c\u4e8c\u9805\u306f\u65a5\u529b\u306e\u3088\u3046\u306b\u500b\u4f53\u540c\u58eb\u3092\u9060\u3056\u3051\u308b\u9805\u3067\u3059\u3002\u5404\u9805\u306f\u500b\u4f53\u9593\u306e\u8ddd\u96e2\u306b\u4f9d\u5b58\u3057\u3066\u304a\u308a\u3001a/2a/2a/2\u306e\u8ddd\u96e2\u3067\u89d2\u5ea6\u5909\u5316\u306f\u91e3\u308a\u5408\u3063\u3066000\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b21\u306b\u3001b.\u4e26\u884c\u306e\u5f0f\u304b\u3089\u3067\u3059\u3002\n\u4ed6\u306e\u500b\u4f53\u3068\u5e73\u884c\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u5411\u304d\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u8fd1\u3044\u500b\u4f53\u307b\u3069\u3001\u4e0e\u3048\u308b\u5f71\u97ff\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\n\u0394\u03a6p=\u03b2\u2211nk=0(\u03c9k\u2212\u03c1)exp(\u2212bd2k)\u0394t\u0394\u03a6p=\u03b2\u2211k=0n(\u03c9k\u2212\u03c1)exp(\u2212bdk2)\u0394t \\Delta\\Phi_p = \\beta \\sum_{k=0}^n (\\omega_k - \\rho) exp(-b d_k^2) \\Delta t\n\u0394\u03a6p\u0394\u03a6p\\Delta\\Phi_p: \u89d2\u5ea6\u306e\u5909\u5316\n\u03b2\u03b2\\beta: \u89d2\u5ea6\u5909\u5316\u306e\u5927\u304d\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\nnnn: \u81ea\u8eab\u3092\u9664\u3044\u305f\u500b\u4f53\u6570\n\u03c9k\u03c9k\\omega_k: \u4ed6\u306e\u500b\u4f53\u306e\u5411\u304d(\u89d2\u5ea6)\n\u03c1\u03c1\\rho: \u81ea\u8eab\u306e\u5411\u304d(\u89d2\u5ea6)\naaa: \u500b\u4f53\u9593\u306e\u8ddd\u96e2\u3092\u6c7a\u3081\u308b\u5b9a\u6570\nbbb: \u5f71\u97ff\u7bc4\u56f2\u306e\u5e83\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\ndkdkd_k: \u81ea\u8eab\u3068\u4ed6\u306e\u500b\u4f53\u9593\u306e\u8ddd\u96e2\n\u0394t\u0394t\\Delta t: \u6642\u9593\u9593\u9694\n\u305d\u3057\u3066\u3001c.\u7b49\u901f\u306e\u5f0f\u3067\u3059\u3002\n\u8fd1\u3044\u500b\u4f53\u3068\u306e\u901f\u5ea6\u5dee\u3092\u89e3\u6d88\u3059\u308b\u3088\u3046\u306b\u306b\u3001\u901f\u5ea6\u304c\u5909\u5316\u3057\u307e\u3059\u3002\n\u0394V=\u03b3\u2211nk=0(vk\u2212v)exp(\u2212bd2k)\u0394t\u0394V=\u03b3\u2211k=0n(vk\u2212v)exp(\u2212bdk2)\u0394t \\Delta V = \\gamma \\sum_{k=0}^n (v_k-v) exp(-b d_k^2) \\Delta t\n\u0394V\u0394V\\Delta V: \u901f\u5ea6\u306e\u5909\u5316\n\u03b3\u03b3\\gamma: \u901f\u5ea6\u5909\u5316\u306e\u5927\u304d\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\nnnn: \u81ea\u8eab\u3092\u9664\u3044\u305f\u500b\u4f53\u6570\nvkvkv_k: \u4ed6\u306e\u500b\u4f53\u306e\u901f\u5ea6\nvvv: \u81ea\u8eab\u306e\u901f\u5ea6\naaa: \u500b\u4f53\u9593\u306e\u8ddd\u96e2\u3092\u6c7a\u3081\u308b\u5b9a\u6570\nbbb: \u5f71\u97ff\u7bc4\u56f2\u306e\u5e83\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\ndkdkd_k: \u81ea\u8eab\u3068\u4ed6\u306e\u500b\u4f53\u9593\u306e\u8ddd\u96e2\n\u0394t\u0394t\\Delta t: \u6642\u9593\u9593\u9694\n\u305d\u308c\u3067\u306f\u3001\u30b3\u30fc\u30c9\u306e\u65b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u30ed\u30b8\u30c3\u30af\u90e8\u5206\u306b\u306fMetal\u3092\u3001\u63cf\u753b\u90e8\u5206\u306fUIImageView\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u672c\u6765\u306fSpriteKit\u3092\u4f7f\u7528\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001SpriteKit\u3092\u7528\u3044\u308b\u3068\u30d0\u30c3\u30af\u3067\u52d5\u4f5c\u3059\u308bMetal\u304c\u5e72\u6e09\u3057\u3066\u3057\u307e\u3046\u306e\u304b\u3001\u753b\u9762\u304c\u983b\u7e41\u306b\u3061\u3089\u3064\u304f\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u307e\u305a\u3001ViewController\u304b\u3089\u3067\u3059\u3002\nimport UIKit\nimport Metal\nimport SpriteKit\n\nclass ViewController: UIViewController {\n\n    let nodeCount = 200\n    var nodes:[Node] = []\n\n    var metalController:MetalController!\n\n    var displayLink:CADisplayLink!\n    var lastTimeStamp:CFTimeInterval = 0\n\n    var fishes:[Fish] = []\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n\n        let width = self.view.frame.size.width;\n        let height = self.view.frame.size.height;\n\n        for _ in 0..<nodeCount {\n            let randX = Float(arc4random_uniform(UInt32(width)))\n            let randY = Float(arc4random_uniform(UInt32(height)))\n            let randVX = Float(arc4random_uniform(UInt32(100)))/100.0\n            let randVY = Float(arc4random_uniform(UInt32(100)))/100.0\n            let randAngle = Float(arc4random_uniform(UInt32(100)))/100.0 * Float(M_PI) * 2 - Float(M_PI)\n\n            nodes.append(Node(positionX: randX, positionY: randY, velocityX: randVX, velocityY: randVY, angle: randAngle))\n            let fish = Fish()\n            fish.center = CGPoint(x: CGFloat(randX), y: height-CGFloat(randY))\n            self.view.addSubview(fish)\n            fishes.append(fish)\n        }\n\n        metalController = MetalController(nodes, width: width, height: height)\n\n        displayLink = CADisplayLink(target: self, selector: #selector(ViewController.update))\n        displayLink.add(to: RunLoop.current, forMode: .defaultRunLoopMode)\n    }\n\n    func update()\n    {\n        if lastTimeStamp == 0 {\n            lastTimeStamp = displayLink.timestamp\n            return\n        }\n\n        let now = displayLink.timestamp\n        let interval = now - lastTimeStamp\n        lastTimeStamp = now\n\n        metalController.move(nodes: nodes, interval: Float(interval)){( resultNodes:[Node]) -> Void in\n            nodes = resultNodes\n            for (i, fish) in fishes.enumerated() {\n                fish.setNode(node: nodes[i], height: self.view.frame.size.height)\n            }\n        }\n    }\n\n    deinit {\n        displayLink.invalidate()\n    }\n}\n\nstruct Node\n{\n    var positionX: Float = 0\n    var positionY: Float = 0\n    var velocityX: Float = 0\n    var velocityY: Float = 0\n    var angle: Float = 0\n}\n\n\u6b21\u306b\u3001UImageView\u3092\u7d99\u627f\u3057\u305f\u63cf\u753b\u7528\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\nimport UIKit\n\nclass Fish: UIImageView {\n\n    init(){\n        super.init(frame: CGRect(x: 0, y: 0, width: 30, height: 30))\n        self.image = UIImage(named: \"fish.png\")\n    }\n\n    func  setNode(node:Node, height:CGFloat) {\n        self.center = CGPoint(x: CGFloat(node.positionX), y: height - CGFloat(node.positionY))\n        self.transform =  CGAffineTransform(rotationAngle: CGFloat(node.angle))\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\n\u305d\u3057\u3066\u3001Metal\u306b\u3088\u308b\u6f14\u7b97\u3092\u884c\u3046\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\nimport UIKit\nimport Metal\n\nclass MetalController: NSObject {\n\n    private var device: MTLDevice!\n    private var defaultLibrary: MTLLibrary!\n    private var commandQueue: MTLCommandQueue!\n    private var computePipelineState: MTLComputePipelineState!\n\n    private var threadsPerThreadgroup:MTLSize!\n    private var threadgroupsCount:MTLSize!\n\n    private var nodeCountBuffer: MTLBuffer!\n    private var widthBuffer: MTLBuffer!\n    private var heightBuffer: MTLBuffer!\n    private var outBuffer: MTLBuffer!\n\n    let nodeCount:UInt32\n\n    init(_ nodes:[Node], width:CGFloat, height:CGFloat)\n    {\n        var count = UInt32(nodes.count)\n        self.nodeCount = count\n\n        device = MTLCreateSystemDefaultDevice()\n        defaultLibrary = device.newDefaultLibrary()\n        commandQueue = device.makeCommandQueue()\n        let ml2Func = defaultLibrary.makeFunction(name: \"move\")!\n        computePipelineState = try! device.makeComputePipelineState(function: ml2Func)\n\n        let threadWidth = 64\n        threadsPerThreadgroup = MTLSize(width: threadWidth, height: 1, depth: 1)\n        threadgroupsCount = MTLSize(width: (Int(nodeCount) + threadWidth - 1) / threadWidth, height: 1, depth: 1)\n\n        nodeCountBuffer = device.makeBuffer(bytes: &count, length: MemoryLayout.size(ofValue: count), options: [])\n        var wdth = Float(width)\n        widthBuffer = device.makeBuffer(bytes: &wdth, length: MemoryLayout.size(ofValue: wdth), options: [])\n        var hght = Float(height)\n        heightBuffer = device.makeBuffer(bytes: &hght, length: MemoryLayout.size(ofValue: hght), options: [])\n        outBuffer = device.makeBuffer(bytes: nodes, length: nodes.byteLength, options: [])\n    }\n\n    func move( nodes:[Node], interval:Float, callBack:([Node]) -> Void)\n    {\n        let commandBuffer = commandQueue.makeCommandBuffer()\n        let computeCommandEncoder = commandBuffer.makeComputeCommandEncoder()\n        computeCommandEncoder.setComputePipelineState(computePipelineState)\n\n        let inBuffer = device.makeBuffer(bytes: nodes, length: nodes.byteLength, options: [])\n        var itvl = Float32(interval)\n        let intervalBuffer = device.makeBuffer(bytes: &itvl, length: MemoryLayout.size(ofValue: itvl), options: [])\n\n        computeCommandEncoder.setBuffer(inBuffer, offset: 0, at: 0)\n        computeCommandEncoder.setBuffer(nodeCountBuffer, offset: 0, at: 1)\n        computeCommandEncoder.setBuffer(intervalBuffer, offset: 0, at: 2)\n        computeCommandEncoder.setBuffer(widthBuffer, offset: 0, at: 3)\n        computeCommandEncoder.setBuffer(heightBuffer, offset: 0, at: 4)\n        computeCommandEncoder.setBuffer(outBuffer, offset: 0, at: 5)\n\n        computeCommandEncoder.dispatchThreadgroups(threadgroupsCount, threadsPerThreadgroup: threadsPerThreadgroup)\n        computeCommandEncoder.endEncoding()\n\n        commandBuffer.commit()\n        commandBuffer.waitUntilCompleted()\n\n        let data = Data(bytesNoCopy: outBuffer.contents(), count: nodes.byteLength, deallocator: .none)\n        var resultNodes = [Node](repeating: Node(positionX: 0, positionY: 0, velocityX: 0, velocityY: 0, angle: 0), count: nodes.count)\n        resultNodes = data.withUnsafeBytes {\n            Array(UnsafeBufferPointer<Node>(start: $0, count: data.count/MemoryLayout<Node>.size))\n        }\n\n        callBack(resultNodes)\n    }\n\n}\n\nprivate extension Array {\n    var byteLength: Int {\n        return self.count * MemoryLayout.size(ofValue: self[0])\n    }\n}\n\n\n\u6700\u5f8c\u306b\u3001GPU\u5074\u306e\u30b3\u30fc\u30c9\u3001\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u3059\u3002\u4e0a\u8a18\u306e\u6570\u5f0f\u306f\u3001\u3053\u306e\u4e2d\u3067\u30b3\u30fc\u30c9\u306b\u3057\u307e\u3059\u3002\n#include <metal_stdlib>\nusing namespace metal;\n\nconstant float alpha = 0.025;\nconstant float beta = 0.1;\nconstant float gamma = 0.005;\n\nconstant float spaceRatio = 0.12;\n\nstruct Node\n{\n    float positionX;\n    float positionY;\n    float velocityX;\n    float velocityY;\n    float angle;\n};\n\nstatic float getDistace(float x1, float y1, float x2, float y2)\n{\n    float dx = x1-x2;\n    float dy = y1-y2;\n    return sqrt(dx*dx + dy*dy);\n}\n\n//From -pi to pi\nstatic float getRangedAngle(float angle)\n{\n    if (angle > M_PI_F){\n        angle -= 2 * M_PI_F;\n    }else if (angle < -M_PI_F){\n        angle += 2 * M_PI_F;\n    }\n    return angle;\n}\n\nkernel void move(const device Node *inNode [[ buffer(0) ]],\n                 const device uint &nodeCount [[ buffer(1) ]],\n                 const device float &interval [[ buffer(2) ]],\n                 const device float &width [[ buffer(3) ]],\n                 const device float &height [[ buffer(4) ]],\n                 device Node *outNode [[ buffer(5) ]],\n                 uint id [[ thread_position_in_grid ]])\n{\n    Node currentNode = inNode[id];\n\n    float a = width * spaceRatio;\n    float b = 6.25 / a / a;\n    float dAngle = 0;\n\n    float velocityX = currentNode.velocityX;\n    float velocityY = currentNode.velocityY;\n    float velocity = sqrt(velocityX*velocityX + velocityY*velocityY);\n\n    float outerSpace = width * 0.1;\n\n    for (uint i=0; i<nodeCount; i++){\n        if (i == id){\n            continue;\n        };\n\n        Node node = inNode[i];\n\n        float distance = getDistace(node.positionX, node.positionY, currentNode.positionX, currentNode.positionY);\n\n        float nearAngle = getRangedAngle(atan2(node.positionX-currentNode.positionX, node.positionY-currentNode.positionY) - currentNode.angle);\n        float farAngle = getRangedAngle(atan2(currentNode.positionX-node.positionX, currentNode.positionY-node.positionY) - currentNode.angle);\n        float attraction = exp(-b * (distance - a)*(distance - a));\n        float repulsion = exp(-b * distance * distance);\n        dAngle += alpha * (nearAngle*attraction + farAngle*repulsion)*interval;\n\n        float parallelAngleDif = getRangedAngle(node.angle - currentNode.angle);\n        dAngle += beta * parallelAngleDif * exp(-b * distance * distance) * interval;\n\n        float nodeVelocity = sqrt(node.velocityX*node.velocityX + node.velocityY*node.velocityY);\n        velocity += gamma * (nodeVelocity - velocity) * exp(-b * distance * distance);;\n    }\n\n    float newAngle = getRangedAngle(currentNode.angle + dAngle);\n    velocityX = velocity * sin(newAngle);\n    velocityY = velocity * cos(newAngle);\n\n    float newPositionX = currentNode.positionX + velocityX;\n    if (newPositionX > (width + outerSpace)) {\n        newPositionX -= (width + outerSpace*2);\n    }\n    if (newPositionX < -outerSpace) {\n        newPositionX += width + outerSpace*2;\n    }\n\n    float newPositionY = currentNode.positionY + velocityY;\n    if (newPositionY > height + outerSpace) {\n        newPositionY -= height + outerSpace*2;\n    }\n    if (newPositionY < -outerSpace) {\n        newPositionY += height + outerSpace*2;\n    }\n\n    outNode[id].positionX = newPositionX;\n    outNode[id].positionY = newPositionY;\n    outNode[id].velocityX = velocityX;\n    outNode[id].velocityY = velocityY;\n    outNode[id].angle = newAngle;\n}\n\n\u305d\u308c\u3067\u306f\u3001\u52d5\u4f5c\u3092\u898b\u3066\u307f\u307e\u3059\u3002\u691c\u8a3c\u6a5f\u306b\u306fiPhone6 Plus\u3092\u7528\u3044\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306f\u03b1=0.03\u03b1=0.03\\alpha = 0.03\u3001\u03b2=\u22120.35\u03b2=\u22120.35\\beta = -0.35\u3001\u03b3=0.005\u03b3=0.005\\gamma = 0.005\u306e\u5834\u5408\u3067\u3059\u3002\n\u4e0b\u306e\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u52d5\u753b\u304c\u518d\u751f\u3057\u307e\u3059\u3002\n\u2028\n\u6700\u521d\u306f\u305d\u308c\u305e\u308c\u306e\u500b\u4f53\u304c\u30e9\u30f3\u30c0\u30e0\u306a\u65b9\u5411\u3092\u5411\u3044\u3066\u304a\u308a\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u901f\u5ea6\u3067\u3059\u3002\n\n\u6642\u9593\u304c\u7d4c\u904e\u3059\u308b\u3068\u3001\u591a\u304f\u306e\u9b5a\u304c\u7fa4\u308c\u3092\u5f62\u6210\u3057\u540c\u3058\u65b9\u5411\u306b\u52d5\u304f\u50be\u5411\u304c\u898b\u3048\u3066\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u5c0f\u898f\u6a21\u306a\u30b0\u30eb\u30fc\u30d7\u304c\u4e00\u6589\u306b\u65cb\u56de\u3059\u308b\u69d8\u5b50\u3082\u89b3\u5bdf\u3067\u304d\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u9b5a\u306e\u7fa4\u308c\u3084\u9ce5\u306e\u7fa4\u308c\u306b\u8fd1\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306f\u03b1=0.16\u03b1=0.16\\alpha = 0.16\u3001\u03b2=0\u03b2=0\\beta = 0\u3001\u03b3=0.005\u03b3=0.005\\gamma = 0.005\u306e\u5834\u5408\u3067\u3059\u3002\n\u4e0b\u306e\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u52d5\u753b\u304c\u518d\u751f\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u5834\u5408\u3001\u9b5a\u305f\u3061\u304c\u8f2a\u306b\u306a\u3063\u3066\u56de\u8ee2\u3092\u59cb\u3081\u307e\u3059\u3002\u5185\u5916\u4e8c\u3064\u306e\u8f2a\u304c\u305d\u308c\u305e\u308c\u9006\u65b9\u5411\u306b\u56de\u8ee2\u3057\u307e\u3059\u3002\u6b6f\u8eca\u3084\u81ea\u52d5\u8eca\u306e\u30db\u30a4\u30fc\u30eb\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u3053\u308c\u304c\u4eca\u56de\u6700\u3082\u9762\u767d\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306f\u03b1=0.025\u03b1=0.025\\alpha = 0.025\u3001\u03b2=0.2\u03b2=0.2\\beta = 0.2\u3001\u03b3=0.005\u03b3=0.005\\gamma = 0.005\u306e\u5834\u5408\u3067\u3059\u3002\n\u4e0b\u306e\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u52d5\u753b\u304c\u518d\u751f\u3057\u307e\u3059\u3002\n\n\u9b5a\u305f\u3061\u304c\u96c6\u307e\u3063\u3066\u3001\u307e\u308b\u3067\u4e00\u3064\u306e\u751f\u304d\u7269\u3067\u3042\u308b\u3088\u3046\u306a\u52d5\u304d\u3092\u3057\u307e\u3059\u3002\u59ff\u5f62\u306f\u30af\u30e9\u30b2\u306e\u3088\u3046\u3067\u3042\u308a\u307e\u3059\u304c\u3001\u7121\u6570\u306e\u500b\u4f53\u304c\u96c6\u307e\u3063\u3066\u4e00\u3064\u306e\u500b\u4f53\u3092\u5f62\u6210\u3059\u308b\u69d8\u5b50\u306f\u7c98\u83cc\u306e\u3088\u3046\u3067\u3082\u3042\u308a\u3001\u9b5a\u3092\u7d30\u80de\u3068\u3059\u308b\u306a\u3089\u3070\u591a\u7d30\u80de\u751f\u7269\u306b\u4f8b\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3001Metal\u3092\u7d14\u7c8b\u306b\u30ed\u30b8\u30c3\u30af\u306e\u307f\u306b\u7528\u3044\u3066\u30a2\u30d7\u30ea\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n200\u306e\u500b\u4f53\u3092\u7528\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u8003\u3048\u305f\u306e\u3067200x200\u306740000\u56de\u306e\u306e\u6f14\u7b97\u3092\u6bce\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u30011\u79d2\u9593\u306b60\u56de\u884c\u3063\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3082\u3001\u4e09\u89d2\u95a2\u6570\u3001\u6307\u6570\u3001\u5e73\u65b9\u6839\u306a\u3069\u3092\u542b\u3080CPU\u3067\u306f\u30b3\u30b9\u30c8\u306e\u9ad8\u3044\u51e6\u7406\u3092\u591a\u304f\u542b\u3093\u3067\u3044\u307e\u3057\u305f\u3002\u3042\u307e\u308a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8003\u616e\u3057\u305f\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u7121\u99c4\u306a\u51e6\u7406\u3082\u591a\u304f\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u30d5\u30ec\u30fc\u30e0\u304c\u843d\u3061\u308b\u3053\u3068\u306f\u5168\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u306a\u304a\u304b\u3064\u3001CPU\u306e\u6d88\u8cbb\u306f\u308f\u305a\u304b35%\u307b\u3069\u3067\u3057\u305f\u3002\nexp\u95a2\u6570\u3060\u3051\u3067\u3082\u79d2\u95931000\u4e07\u56de\uff08\uff01\uff09\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u6539\u3081\u3066\u3001Metal\u306b\u3088\u308bGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u5a01\u529b\u3092\u611f\u3058\u305f\u6b21\u7b2c\u3067\u3059\u3002\u4eca\u56de\u306f\u7fa4\u77e5\u80fd\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3057\u305f\u304c\u3001\u3082\u3061\u308d\u3093\u6a5f\u68b0\u5b66\u7fd2\u306a\u3069\u3078\u306e\u5fdc\u7528\u3082\u671f\u5f85\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u306f\u3001\u3053\u3061\u3089\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\nhttps://github.com/yukinaga/SwarmIntelligence\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3059\u308b\u3068\u3082\u3063\u3068\u9762\u767d\u3044\u4e16\u754c\u304c\u898b\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u305c\u3072\u8a66\u3057\u3066\u304f\u3060\u3055\u3044\u306d\u3002\n\n[\u524d\u56de](http://qiita.com/yuky_az/items/ece9b64befc635e89f1a)\u306fMetal\u306b\u3088\u308bGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0(GPGPU)\u306e\u57fa\u790e\u3068\u7279\u6027\u3092\u6271\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u305d\u306e\u5fdc\u7528\u3092\u6271\u3044\u307e\u3059\u3002\u30a2\u30d7\u30ea\u306e\u63cf\u753b\u90e8\u5206\u306bMetal\u3092\u7528\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30ed\u30b8\u30c3\u30af\u90e8\u5206\u306bMetal\u3092\u7528\u3044\u308b\u3068\u3044\u3046\u901a\u5e38\u3068\u9006\u306e\u8a66\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001Metal\u3092\u7528\u3044\u3066[\u7fa4\u77e5\u80fd](https://ja.wikipedia.org/wiki/%E7%BE%A4%E7%9F%A5%E8%83%BD)\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n>\u5404\u500b\u4f53\u306f\u30ed\u30fc\u30ab\u30eb\u306b\u4e92\u3044\u3068\u3001\u305d\u3057\u3066\u5f7c\u3089\u306e\u74b0\u5883\u3068\u5bfe\u8a71\u3059\u308b\u3002\u500b\u3005\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u3069\u3046\u884c\u52d5\u3059\u3079\u304d\u304b\u3092\u547d\u3058\u3066\u3044\u308b\u96c6\u4e2d\u7684\u306a\u5236\u5fa1\u69cb\u9020\u306f\u901a\u5e38\u5b58\u5728\u3057\u306a\u3044\u304c\u3001\u305d\u306e\u3088\u3046\u306a\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u9593\u306e\u5c40\u6240\u76f8\u4e92\u4f5c\u7528\u306f\u3057\u3070\u3057\u3070\u5168\u4f53\u306e\u884c\u52d5\u306e\u5275\u767a(emergence)\u3092\u3082\u305f\u3089\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u306e\u81ea\u7136\u754c\u306e\u4f8b\u3068\u3057\u3066\u3001\u30a2\u30ea\u306e\u5de3\u3001\u9ce5\u306e\u7fa4\u308c\u3001\u52d5\u7269\u306e\u7fa4\u308c\u3001\u7d30\u83cc\u306e\u30b3\u30ed\u30cb\u30fc\u3001\u9b5a\u306e\u7fa4\u308c\u306a\u3069\u304c\u3042\u308b\u3002\n>-\u7fa4\u77e5\u80fd- Wikipedia\n\n\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u4e0a\u306e\u7fa4\u77e5\u80fd\u3068\u3057\u3066\u6709\u540d\u306a\u3082\u306e\u306b\u3001\u30af\u30ec\u30a4\u30b0\u30fb\u30ec\u30a4\u30ce\u30eb\u30ba\u306b\u3088\u3063\u3066\u8003\u6848\u3055\u308c\u305f[Boids](https://ja.wikipedia.org/wiki/%E3%83%9C%E3%82%A4%E3%83%89_(%E4%BA%BA%E5%B7%A5%E7%94%9F%E5%91%BD))\u304c\u3042\u308a\u307e\u3059\u3002\nBoids\u306f\u8907\u96d1\u7cfb\u3084\u81ea\u5df1\u7d44\u7e54\u5316\u306b\u6df1\u304f\u95a2\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u5404\u500b\u4f53\u304c\u4ee5\u4e0b\u306e\u305f\u3063\u305f3\u3064\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3046\u3060\u3051\u3067\u3001\u500b\u4f53\u306e\u96c6\u5408\u304c\u9b5a\u3084\u9ce5\u306e\u7fa4\u308c\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3044\u307e\u3059\u3002\n1.\u5206\u96e2\uff08Separation\uff09\u5404\u500b\u4f53\u306f\u4ed6\u306e\u500b\u4f53\u3068\u3076\u3064\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u52d5\u304f\u3002\n2.\u6574\u5217\uff08Alignment\uff09\u5404\u500b\u4f53\u306f\u4ed6\u306e\u500b\u4f53\u3068\u901f\u5ea6\u3068\u65b9\u5411\u3092\u5408\u308f\u305b\u308b\u3088\u3046\u306b\u52d5\u304f\u3002\n3.\u7d50\u5408\uff08Cohesion\uff09\u5404\u500b\u4f53\u306f\u4ed6\u306e\u500b\u4f53\u306e\u96c6\u5408\u306e\u4e2d\u5fc3\u65b9\u5411\u3078\u5411\u304b\u3046\u3088\u3046\u306b\u52d5\u304f\u3002\n\n\u4e0a\u8a18\u3068\u5168\u304f\u540c\u3058\u306b\u3057\u3066\u3082\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u306e\u30eb\u30fc\u30eb\u306b\u5c11\u3057\u30a2\u30ec\u30f3\u30b8\u3092\u52a0\u3048\u307e\u3057\u305f\u3002\na.\u7b49\u8ddd\u96e2 \u5404\u500b\u4f53\u304c\u7b49\u8ddd\u96e2\u3092\u4fdd\u3064\u3088\u3046\u306b\u52d5\u304f\u3002\nb.\u4e26\u884c \u5404\u500b\u4f53\u304c\u4ed6\u306e\u500b\u4f53\u3068\u540c\u3058\u5411\u304d\u306b\u306a\u308b\u3088\u3046\u306b\u52d5\u304f\u3002\nc.\u7b49\u901f \u5404\u500b\u4f53\u306f\u4ed6\u306e\u500b\u4f53\u3068\u540c\u3058\u901f\u5ea6\u306b\u306a\u308b\u3088\u3046\u306b\u52d5\u304f\u3002\n\nBoids\u3068\u306e\u9055\u3044\u306f\u7fa4\u308c\u304c\u4e2d\u5fc3\u3092\u6301\u305f\u305a\u3001\u5404\u500b\u4f53\u304c\u3088\u308a\u5206\u6563\u7684\u306b\u52d5\u304f\u3053\u3068\u3067\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u3001\u4e0a\u8a18\u306ea\u3001b\u3001c\u3092\u6570\u5f0f\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001a.\u7b49\u8ddd\u96e2\u306e\u5f0f\u304b\u3089\u3067\u3059\u3002\n\u4ed6\u306e\u500b\u4f53\u304c\u8fd1\u3044\u5834\u5408\u306f\u4ed6\u306e\u500b\u4f53\u304b\u3089\u9060\u3056\u304b\u308b\u65b9\u5411\u306b\u3001\u9060\u3044\u5834\u5408\u306f\u8fd1\u305a\u304f\u65b9\u5411\u306b\u89d2\u5ea6\u304c\u5909\u5316\u3057\u307e\u3059\u3002\n\n$ \\Delta\\Phi_d = \\alpha \\left(\\sum_{k=0}^n (\\theta_k - \\rho) exp(-b (d_k - a)^2)  - \\sum_{k=0}^n (\\psi_k - \\rho) exp(-b d_k^2) \\right) \\Delta t$\n\n$\\Delta\\Phi_d$: \u89d2\u5ea6\u306e\u5909\u5316\n$\\alpha$: \u89d2\u5ea6\u5909\u5316\u306e\u5927\u304d\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$n$: \u81ea\u8eab\u3092\u9664\u3044\u305f\u500b\u4f53\u6570\n$\\theta_k$: \u81ea\u8eab\u304b\u3089\u4ed6\u306e\u500b\u4f53\u3078\u5411\u304b\u3046\u30d9\u30af\u30c8\u30eb\u306e\u5411\u304d(\u89d2\u5ea6)\n$\\psi_k$: \u4ed6\u306e\u500b\u4f53\u304b\u3089\u81ea\u8eab\u3078\u5411\u304b\u3046\u30d9\u30af\u30c8\u30eb\u306e\u5411\u304d(\u89d2\u5ea6)\n$\\rho$: \u81ea\u8eab\u306e\u5411\u304d(\u89d2\u5ea6)\n$a$: \u500b\u4f53\u9593\u306e\u671b\u307e\u3057\u3044\u8ddd\u96e2\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$b$: \u5f71\u97ff\u7bc4\u56f2\u306e\u5e83\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$d_k$: \u81ea\u8eab\u3068\u4ed6\u306e\u500b\u4f53\u9593\u306e\u8ddd\u96e2\n$\\Delta t$: \u6642\u9593\u9593\u9694\n\n\u53f3\u8fba()\u5185\u306e\u306e\u7b2c\u4e00\u9805\u306f\u5f15\u529b\u306e\u3088\u3046\u306b\u500b\u4f53\u540c\u58eb\u3092\u8fd1\u3065\u3051\u308b\u9805\u3001\u7b2c\u4e8c\u9805\u306f\u65a5\u529b\u306e\u3088\u3046\u306b\u500b\u4f53\u540c\u58eb\u3092\u9060\u3056\u3051\u308b\u9805\u3067\u3059\u3002\u5404\u9805\u306f\u500b\u4f53\u9593\u306e\u8ddd\u96e2\u306b\u4f9d\u5b58\u3057\u3066\u304a\u308a\u3001$a/2$\u306e\u8ddd\u96e2\u3067\u89d2\u5ea6\u5909\u5316\u306f\u91e3\u308a\u5408\u3063\u3066$0$\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6b21\u306b\u3001b.\u4e26\u884c\u306e\u5f0f\u304b\u3089\u3067\u3059\u3002\n\u4ed6\u306e\u500b\u4f53\u3068\u5e73\u884c\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u5411\u304d\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u8fd1\u3044\u500b\u4f53\u307b\u3069\u3001\u4e0e\u3048\u308b\u5f71\u97ff\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\n\n$ \\Delta\\Phi_p = \\beta \\sum_{k=0}^n (\\omega_k - \\rho) exp(-b d_k^2) \\Delta t$\n\n$\\Delta\\Phi_p$: \u89d2\u5ea6\u306e\u5909\u5316\n$\\beta$: \u89d2\u5ea6\u5909\u5316\u306e\u5927\u304d\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$n$: \u81ea\u8eab\u3092\u9664\u3044\u305f\u500b\u4f53\u6570\n$\\omega_k$: \u4ed6\u306e\u500b\u4f53\u306e\u5411\u304d(\u89d2\u5ea6)\n$\\rho$: \u81ea\u8eab\u306e\u5411\u304d(\u89d2\u5ea6)\n$a$: \u500b\u4f53\u9593\u306e\u8ddd\u96e2\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$b$: \u5f71\u97ff\u7bc4\u56f2\u306e\u5e83\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$d_k$: \u81ea\u8eab\u3068\u4ed6\u306e\u500b\u4f53\u9593\u306e\u8ddd\u96e2\n$\\Delta t$: \u6642\u9593\u9593\u9694\n\n\u305d\u3057\u3066\u3001c.\u7b49\u901f\u306e\u5f0f\u3067\u3059\u3002\n\u8fd1\u3044\u500b\u4f53\u3068\u306e\u901f\u5ea6\u5dee\u3092\u89e3\u6d88\u3059\u308b\u3088\u3046\u306b\u306b\u3001\u901f\u5ea6\u304c\u5909\u5316\u3057\u307e\u3059\u3002\n\n$ \\Delta V = \\gamma \\sum_{k=0}^n (v_k-v) exp(-b d_k^2) \\Delta t$\n\n$\\Delta V$: \u901f\u5ea6\u306e\u5909\u5316\n$\\gamma$: \u901f\u5ea6\u5909\u5316\u306e\u5927\u304d\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$n$: \u81ea\u8eab\u3092\u9664\u3044\u305f\u500b\u4f53\u6570\n$v_k$: \u4ed6\u306e\u500b\u4f53\u306e\u901f\u5ea6\n$v$: \u81ea\u8eab\u306e\u901f\u5ea6\n$a$: \u500b\u4f53\u9593\u306e\u8ddd\u96e2\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$b$: \u5f71\u97ff\u7bc4\u56f2\u306e\u5e83\u3055\u3092\u6c7a\u3081\u308b\u5b9a\u6570\n$d_k$: \u81ea\u8eab\u3068\u4ed6\u306e\u500b\u4f53\u9593\u306e\u8ddd\u96e2\n$\\Delta t$: \u6642\u9593\u9593\u9694\n\n\u305d\u308c\u3067\u306f\u3001\u30b3\u30fc\u30c9\u306e\u65b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u30ed\u30b8\u30c3\u30af\u90e8\u5206\u306b\u306fMetal\u3092\u3001\u63cf\u753b\u90e8\u5206\u306fUIImageView\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u672c\u6765\u306fSpriteKit\u3092\u4f7f\u7528\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001SpriteKit\u3092\u7528\u3044\u308b\u3068\u30d0\u30c3\u30af\u3067\u52d5\u4f5c\u3059\u308bMetal\u304c\u5e72\u6e09\u3057\u3066\u3057\u307e\u3046\u306e\u304b\u3001\u753b\u9762\u304c\u983b\u7e41\u306b\u3061\u3089\u3064\u304f\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u3001ViewController\u304b\u3089\u3067\u3059\u3002\n\n```Swift\nimport UIKit\nimport Metal\nimport SpriteKit\n\nclass ViewController: UIViewController {\n\n    let nodeCount = 200\n    var nodes:[Node] = []\n    \n    var metalController:MetalController!\n    \n    var displayLink:CADisplayLink!\n    var lastTimeStamp:CFTimeInterval = 0\n    \n    var fishes:[Fish] = []\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        \n        let width = self.view.frame.size.width;\n        let height = self.view.frame.size.height;\n        \n        for _ in 0..<nodeCount {\n            let randX = Float(arc4random_uniform(UInt32(width)))\n            let randY = Float(arc4random_uniform(UInt32(height)))\n            let randVX = Float(arc4random_uniform(UInt32(100)))/100.0\n            let randVY = Float(arc4random_uniform(UInt32(100)))/100.0\n            let randAngle = Float(arc4random_uniform(UInt32(100)))/100.0 * Float(M_PI) * 2 - Float(M_PI)\n\n            nodes.append(Node(positionX: randX, positionY: randY, velocityX: randVX, velocityY: randVY, angle: randAngle))\n            let fish = Fish()\n            fish.center = CGPoint(x: CGFloat(randX), y: height-CGFloat(randY))\n            self.view.addSubview(fish)\n            fishes.append(fish)\n        }\n\n        metalController = MetalController(nodes, width: width, height: height)\n        \n        displayLink = CADisplayLink(target: self, selector: #selector(ViewController.update))\n        displayLink.add(to: RunLoop.current, forMode: .defaultRunLoopMode)\n    }\n    \n    func update()\n    {\n        if lastTimeStamp == 0 {\n            lastTimeStamp = displayLink.timestamp\n            return\n        }\n        \n        let now = displayLink.timestamp\n        let interval = now - lastTimeStamp\n        lastTimeStamp = now\n        \n        metalController.move(nodes: nodes, interval: Float(interval)){( resultNodes:[Node]) -> Void in\n            nodes = resultNodes\n            for (i, fish) in fishes.enumerated() {\n                fish.setNode(node: nodes[i], height: self.view.frame.size.height)\n            }\n        }\n    }\n    \n    deinit {\n        displayLink.invalidate()\n    }\n}\n\nstruct Node\n{\n    var positionX: Float = 0\n    var positionY: Float = 0\n    var velocityX: Float = 0\n    var velocityY: Float = 0\n    var angle: Float = 0\n}\n```\n\u6b21\u306b\u3001UImageView\u3092\u7d99\u627f\u3057\u305f\u63cf\u753b\u7528\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n```Swift\nimport UIKit\n\nclass Fish: UIImageView {\n\n    init(){\n        super.init(frame: CGRect(x: 0, y: 0, width: 30, height: 30))\n        self.image = UIImage(named: \"fish.png\")\n    }\n    \n    func  setNode(node:Node, height:CGFloat) {\n        self.center = CGPoint(x: CGFloat(node.positionX), y: height - CGFloat(node.positionY))\n        self.transform =  CGAffineTransform(rotationAngle: CGFloat(node.angle))\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n```\n\u305d\u3057\u3066\u3001Metal\u306b\u3088\u308b\u6f14\u7b97\u3092\u884c\u3046\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n```Swift\nimport UIKit\nimport Metal\n\nclass MetalController: NSObject {\n    \n    private var device: MTLDevice!\n    private var defaultLibrary: MTLLibrary!\n    private var commandQueue: MTLCommandQueue!\n    private var computePipelineState: MTLComputePipelineState!\n    \n    private var threadsPerThreadgroup:MTLSize!\n    private var threadgroupsCount:MTLSize!\n    \n    private var nodeCountBuffer: MTLBuffer!\n    private var widthBuffer: MTLBuffer!\n    private var heightBuffer: MTLBuffer!\n    private var outBuffer: MTLBuffer!\n\n    let nodeCount:UInt32\n        \n    init(_ nodes:[Node], width:CGFloat, height:CGFloat)\n    {\n        var count = UInt32(nodes.count)\n        self.nodeCount = count\n        \n        device = MTLCreateSystemDefaultDevice()\n        defaultLibrary = device.newDefaultLibrary()\n        commandQueue = device.makeCommandQueue()\n        let ml2Func = defaultLibrary.makeFunction(name: \"move\")!\n        computePipelineState = try! device.makeComputePipelineState(function: ml2Func)\n        \n        let threadWidth = 64\n        threadsPerThreadgroup = MTLSize(width: threadWidth, height: 1, depth: 1)\n        threadgroupsCount = MTLSize(width: (Int(nodeCount) + threadWidth - 1) / threadWidth, height: 1, depth: 1)\n        \n        nodeCountBuffer = device.makeBuffer(bytes: &count, length: MemoryLayout.size(ofValue: count), options: [])\n        var wdth = Float(width)\n        widthBuffer = device.makeBuffer(bytes: &wdth, length: MemoryLayout.size(ofValue: wdth), options: [])\n        var hght = Float(height)\n        heightBuffer = device.makeBuffer(bytes: &hght, length: MemoryLayout.size(ofValue: hght), options: [])\n        outBuffer = device.makeBuffer(bytes: nodes, length: nodes.byteLength, options: [])\n    }\n    \n    func move( nodes:[Node], interval:Float, callBack:([Node]) -> Void)\n    {\n        let commandBuffer = commandQueue.makeCommandBuffer()\n        let computeCommandEncoder = commandBuffer.makeComputeCommandEncoder()\n        computeCommandEncoder.setComputePipelineState(computePipelineState)\n        \n        let inBuffer = device.makeBuffer(bytes: nodes, length: nodes.byteLength, options: [])\n        var itvl = Float32(interval)\n        let intervalBuffer = device.makeBuffer(bytes: &itvl, length: MemoryLayout.size(ofValue: itvl), options: [])\n        \n        computeCommandEncoder.setBuffer(inBuffer, offset: 0, at: 0)\n        computeCommandEncoder.setBuffer(nodeCountBuffer, offset: 0, at: 1)\n        computeCommandEncoder.setBuffer(intervalBuffer, offset: 0, at: 2)\n        computeCommandEncoder.setBuffer(widthBuffer, offset: 0, at: 3)\n        computeCommandEncoder.setBuffer(heightBuffer, offset: 0, at: 4)\n        computeCommandEncoder.setBuffer(outBuffer, offset: 0, at: 5)\n        \n        computeCommandEncoder.dispatchThreadgroups(threadgroupsCount, threadsPerThreadgroup: threadsPerThreadgroup)\n        computeCommandEncoder.endEncoding()\n        \n        commandBuffer.commit()\n        commandBuffer.waitUntilCompleted()\n        \n        let data = Data(bytesNoCopy: outBuffer.contents(), count: nodes.byteLength, deallocator: .none)\n        var resultNodes = [Node](repeating: Node(positionX: 0, positionY: 0, velocityX: 0, velocityY: 0, angle: 0), count: nodes.count)\n        resultNodes = data.withUnsafeBytes {\n            Array(UnsafeBufferPointer<Node>(start: $0, count: data.count/MemoryLayout<Node>.size))\n        }\n\n        callBack(resultNodes)\n    }\n\n}\n\nprivate extension Array {\n    var byteLength: Int {\n        return self.count * MemoryLayout.size(ofValue: self[0])\n    }\n}\n\n```\n\u6700\u5f8c\u306b\u3001GPU\u5074\u306e\u30b3\u30fc\u30c9\u3001\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u3059\u3002\u4e0a\u8a18\u306e\u6570\u5f0f\u306f\u3001\u3053\u306e\u4e2d\u3067\u30b3\u30fc\u30c9\u306b\u3057\u307e\u3059\u3002\n\n```Swift\n#include <metal_stdlib>\nusing namespace metal;\n\nconstant float alpha = 0.025;\nconstant float beta = 0.1;\nconstant float gamma = 0.005;\n\nconstant float spaceRatio = 0.12;\n\nstruct Node\n{\n    float positionX;\n    float positionY;\n    float velocityX;\n    float velocityY;\n    float angle;\n};\n\nstatic float getDistace(float x1, float y1, float x2, float y2)\n{\n    float dx = x1-x2;\n    float dy = y1-y2;\n    return sqrt(dx*dx + dy*dy);\n}\n\n//From -pi to pi\nstatic float getRangedAngle(float angle)\n{\n    if (angle > M_PI_F){\n        angle -= 2 * M_PI_F;\n    }else if (angle < -M_PI_F){\n        angle += 2 * M_PI_F;\n    }\n    return angle;\n}\n\nkernel void move(const device Node *inNode [[ buffer(0) ]],\n                 const device uint &nodeCount [[ buffer(1) ]],\n                 const device float &interval [[ buffer(2) ]],\n                 const device float &width [[ buffer(3) ]],\n                 const device float &height [[ buffer(4) ]],\n                 device Node *outNode [[ buffer(5) ]],\n                 uint id [[ thread_position_in_grid ]])\n{\n    Node currentNode = inNode[id];\n    \n    float a = width * spaceRatio;\n    float b = 6.25 / a / a;\n    float dAngle = 0;\n    \n    float velocityX = currentNode.velocityX;\n    float velocityY = currentNode.velocityY;\n    float velocity = sqrt(velocityX*velocityX + velocityY*velocityY);\n    \n    float outerSpace = width * 0.1;\n    \n    for (uint i=0; i<nodeCount; i++){\n        if (i == id){\n            continue;\n        };\n        \n        Node node = inNode[i];\n        \n        float distance = getDistace(node.positionX, node.positionY, currentNode.positionX, currentNode.positionY);\n        \n        float nearAngle = getRangedAngle(atan2(node.positionX-currentNode.positionX, node.positionY-currentNode.positionY) - currentNode.angle);\n        float farAngle = getRangedAngle(atan2(currentNode.positionX-node.positionX, currentNode.positionY-node.positionY) - currentNode.angle);\n        float attraction = exp(-b * (distance - a)*(distance - a));\n        float repulsion = exp(-b * distance * distance);\n        dAngle += alpha * (nearAngle*attraction + farAngle*repulsion)*interval;\n        \n        float parallelAngleDif = getRangedAngle(node.angle - currentNode.angle);\n        dAngle += beta * parallelAngleDif * exp(-b * distance * distance) * interval;\n        \n        float nodeVelocity = sqrt(node.velocityX*node.velocityX + node.velocityY*node.velocityY);\n        velocity += gamma * (nodeVelocity - velocity) * exp(-b * distance * distance);;\n    }\n    \n    float newAngle = getRangedAngle(currentNode.angle + dAngle);\n    velocityX = velocity * sin(newAngle);\n    velocityY = velocity * cos(newAngle);\n    \n    float newPositionX = currentNode.positionX + velocityX;\n    if (newPositionX > (width + outerSpace)) {\n        newPositionX -= (width + outerSpace*2);\n    }\n    if (newPositionX < -outerSpace) {\n        newPositionX += width + outerSpace*2;\n    }\n    \n    float newPositionY = currentNode.positionY + velocityY;\n    if (newPositionY > height + outerSpace) {\n        newPositionY -= height + outerSpace*2;\n    }\n    if (newPositionY < -outerSpace) {\n        newPositionY += height + outerSpace*2;\n    }\n    \n    outNode[id].positionX = newPositionX;\n    outNode[id].positionY = newPositionY;\n    outNode[id].velocityX = velocityX;\n    outNode[id].velocityY = velocityY;\n    outNode[id].angle = newAngle;\n}\n```\n\u305d\u308c\u3067\u306f\u3001\u52d5\u4f5c\u3092\u898b\u3066\u307f\u307e\u3059\u3002\u691c\u8a3c\u6a5f\u306b\u306fiPhone6 Plus\u3092\u7528\u3044\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306f$\\alpha = 0.03$\u3001$\\beta = -0.35$\u3001$\\gamma = 0.005$\u306e\u5834\u5408\u3067\u3059\u3002\n\u4e0b\u306e\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u52d5\u753b\u304c\u518d\u751f\u3057\u307e\u3059\u3002\n\u2028[![\u7fa4\u77e5\u80fd1](http://img.youtube.com/vi/cAUOJ-wmeUA/0.jpg)](http://www.youtube.com/watch?v=cAUOJ-wmeUA)\n\u6700\u521d\u306f\u305d\u308c\u305e\u308c\u306e\u500b\u4f53\u304c\u30e9\u30f3\u30c0\u30e0\u306a\u65b9\u5411\u3092\u5411\u3044\u3066\u304a\u308a\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u901f\u5ea6\u3067\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-10 22.35.36.png](https://qiita-image-store.s3.amazonaws.com/0/35297/dd1df74f-0d3e-f3e2-a513-daa2f65d7068.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-10 22.35.36.png\")\n\u6642\u9593\u304c\u7d4c\u904e\u3059\u308b\u3068\u3001\u591a\u304f\u306e\u9b5a\u304c\u7fa4\u308c\u3092\u5f62\u6210\u3057\u540c\u3058\u65b9\u5411\u306b\u52d5\u304f\u50be\u5411\u304c\u898b\u3048\u3066\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u5c0f\u898f\u6a21\u306a\u30b0\u30eb\u30fc\u30d7\u304c\u4e00\u6589\u306b\u65cb\u56de\u3059\u308b\u69d8\u5b50\u3082\u89b3\u5bdf\u3067\u304d\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u9b5a\u306e\u7fa4\u308c\u3084\u9ce5\u306e\u7fa4\u308c\u306b\u8fd1\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-10 22.59.46.png](https://qiita-image-store.s3.amazonaws.com/0/35297/552d2254-1584-4b66-f5c4-5e293e225f89.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-10 22.59.46.png\")\n\n\n\u4ee5\u4e0b\u306f$\\alpha = 0.16$\u3001$\\beta = 0$\u3001$\\gamma = 0.005$\u306e\u5834\u5408\u3067\u3059\u3002\n\u4e0b\u306e\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u52d5\u753b\u304c\u518d\u751f\u3057\u307e\u3059\u3002\n\n[![\u7fa4\u77e5\u80fd2](http://img.youtube.com/vi/GjdrYERYKVc/0.jpg)](http://www.youtube.com/watch?v=GjdrYERYKVc)\n\u3053\u306e\u5834\u5408\u3001\u9b5a\u305f\u3061\u304c\u8f2a\u306b\u306a\u3063\u3066\u56de\u8ee2\u3092\u59cb\u3081\u307e\u3059\u3002\u5185\u5916\u4e8c\u3064\u306e\u8f2a\u304c\u305d\u308c\u305e\u308c\u9006\u65b9\u5411\u306b\u56de\u8ee2\u3057\u307e\u3059\u3002\u6b6f\u8eca\u3084\u81ea\u52d5\u8eca\u306e\u30db\u30a4\u30fc\u30eb\u306e\u3088\u3046\u3067\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-10 23.23.05.png](https://qiita-image-store.s3.amazonaws.com/0/35297/197685e4-e1c0-8587-cc57-34045df831de.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-10 23.23.05.png\")\n\n\u305d\u3057\u3066\u3001\u3053\u308c\u304c\u4eca\u56de\u6700\u3082\u9762\u767d\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306f$\\alpha = 0.025$\u3001$\\beta = 0.2$\u3001$\\gamma = 0.005$\u306e\u5834\u5408\u3067\u3059\u3002\n\u4e0b\u306e\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u52d5\u753b\u304c\u518d\u751f\u3057\u307e\u3059\u3002\n\n[![\u7fa4\u77e5\u80fd3](http://img.youtube.com/vi/WlMiJDzC2f4/0.jpg)](http://www.youtube.com/watch?v=WlMiJDzC2f4)\n\u9b5a\u305f\u3061\u304c\u96c6\u307e\u3063\u3066\u3001\u307e\u308b\u3067\u4e00\u3064\u306e\u751f\u304d\u7269\u3067\u3042\u308b\u3088\u3046\u306a\u52d5\u304d\u3092\u3057\u307e\u3059\u3002\u59ff\u5f62\u306f\u30af\u30e9\u30b2\u306e\u3088\u3046\u3067\u3042\u308a\u307e\u3059\u304c\u3001\u7121\u6570\u306e\u500b\u4f53\u304c\u96c6\u307e\u3063\u3066\u4e00\u3064\u306e\u500b\u4f53\u3092\u5f62\u6210\u3059\u308b\u69d8\u5b50\u306f\u7c98\u83cc\u306e\u3088\u3046\u3067\u3082\u3042\u308a\u3001\u9b5a\u3092\u7d30\u80de\u3068\u3059\u308b\u306a\u3089\u3070\u591a\u7d30\u80de\u751f\u7269\u306b\u4f8b\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-10 23.45.36.png](https://qiita-image-store.s3.amazonaws.com/0/35297/a515c201-3d26-8f88-f21e-cfcf5151c861.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-10 23.45.36.png\")\n\n\u4eca\u56de\u306f\u3001Metal\u3092\u7d14\u7c8b\u306b\u30ed\u30b8\u30c3\u30af\u306e\u307f\u306b\u7528\u3044\u3066\u30a2\u30d7\u30ea\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n200\u306e\u500b\u4f53\u3092\u7528\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u8003\u3048\u305f\u306e\u3067200x200\u306740000\u56de\u306e\u306e\u6f14\u7b97\u3092\u6bce\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u30011\u79d2\u9593\u306b60\u56de\u884c\u3063\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3082\u3001\u4e09\u89d2\u95a2\u6570\u3001\u6307\u6570\u3001\u5e73\u65b9\u6839\u306a\u3069\u3092\u542b\u3080CPU\u3067\u306f\u30b3\u30b9\u30c8\u306e\u9ad8\u3044\u51e6\u7406\u3092\u591a\u304f\u542b\u3093\u3067\u3044\u307e\u3057\u305f\u3002\u3042\u307e\u308a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8003\u616e\u3057\u305f\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u7121\u99c4\u306a\u51e6\u7406\u3082\u591a\u304f\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u30d5\u30ec\u30fc\u30e0\u304c\u843d\u3061\u308b\u3053\u3068\u306f\u5168\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u306a\u304a\u304b\u3064\u3001CPU\u306e\u6d88\u8cbb\u306f\u308f\u305a\u304b35%\u307b\u3069\u3067\u3057\u305f\u3002\nexp\u95a2\u6570\u3060\u3051\u3067\u3082\u79d2\u95931000\u4e07\u56de\uff08\uff01\uff09\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6539\u3081\u3066\u3001Metal\u306b\u3088\u308bGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u5a01\u529b\u3092\u611f\u3058\u305f\u6b21\u7b2c\u3067\u3059\u3002\u4eca\u56de\u306f\u7fa4\u77e5\u80fd\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3057\u305f\u304c\u3001\u3082\u3061\u308d\u3093\u6a5f\u68b0\u5b66\u7fd2\u306a\u3069\u3078\u306e\u5fdc\u7528\u3082\u671f\u5f85\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u306f\u3001\u3053\u3061\u3089\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n[https://github.com/yukinaga/SwarmIntelligence](https://github.com/yukinaga/SwarmIntelligence)\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3059\u308b\u3068\u3082\u3063\u3068\u9762\u767d\u3044\u4e16\u754c\u304c\u898b\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u305c\u3072\u8a66\u3057\u3066\u304f\u3060\u3055\u3044\u306d\u3002\n\n\n\n", "tags": ["Swift", "Metal", "Xcode", "iOS", "GPU"]}