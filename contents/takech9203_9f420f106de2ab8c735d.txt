{"tags": ["SoftLayer", "Python"], "context": " More than 1 year has passed since last update.\n\nSoftLayer Portal\u306e\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\nSoftLayer\u3067\u306f\u3001Portal\u304b\u3089\u30af\u30e9\u30a6\u30c9\u4e0a\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\nSoftLayer Customer Portal\nPortal\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u306f\u30e6\u30fc\u30b6\u30fcID\u304c\u5fc5\u8981\u3067\u3059\u3002\nSoftLayer\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b\u6700\u521d\u306b\u4f5c\u3089\u308c\u308b\u30e6\u30fc\u30b6\u30fcID\u306f\u30de\u30b9\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u3068\u547c\u3070\u308c\u3001\u305d\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u5bfe\u3059\u308b\u5168\u3066\u306e\u6a29\u9650\u3092\u6301\u3061\u307e\u3059\u3002\n\u30de\u30b9\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u304c\u5168\u3066\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u7ba1\u7406\u3059\u308b\u3053\u3068\u306f\u73fe\u5b9f\u7684\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u901a\u5e38\u3001\u30de\u30b9\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u306f\u5b50\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3057\u3001\u4e00\u90e8\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u5bfe\u3059\u308b\u7ba1\u7406\u6a29\u9650\u3092\u59d4\u8b72\u3057\u307e\u3059\u3002\u5b50\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u66f4\u306b\u5b50\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3057\u3066\u6a29\u9650\u3092\u59d4\u8b72\u3057\u3001\u30b7\u30b9\u30c6\u30e0\u4e0a\u3067\u306e\u958b\u767a\u3084\u904b\u7528\u7ba1\u7406\u3092\u958b\u767a\u8005\u3084\u904b\u7528\u62c5\u5f53\u8005\u306b\u59d4\u8b72\u3057\u307e\u3059\u3002\n\u56f3\u306b\u8868\u3059\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30de\u30b9\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u5b50\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u6a29\u9650\u3092\u5272\u308a\u5f53\u3066\u3001\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30c7\u30d0\u30a4\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5b50\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u7ba1\u7406\u3092\u59d4\u8b72\u3059\u308b\u305f\u3081\u306b\u5b6b\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u6a29\u9650\u3092\u5272\u308a\u5f53\u3066\u3001\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30c7\u30d0\u30a4\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\u3053\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u30fc\u306f\u968e\u5c64\u69cb\u9020\u3092\u3068\u308a\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\u306fPortal\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u304c\u3001Portal\u3084CLI\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u89aa\u5b50\u95a2\u4fc2\u3092\u4e00\u89a7\u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3053\u308c\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u4e0a\u4e0d\u4fbf\u306a\u306e\u3067\u3001SoftLayer API\u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\u3068\u89aa\u5b50\u95a2\u4fc2\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nsluser.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nSL_USERNAME = <SL User Name>\nSL_API_KEY = <SL API Key>\n\n\n\nsl_getUser.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'takechika'\n\nimport sys\nfrom prettytable import PrettyTable\nimport SoftLayer\nimport sluser\n\nSL_USERNAME = sluser.SL_USERNAME\nSL_API_KEY = sluser.SL_API_KEY\n\n_userMask = '''\n    id,\n    accountId,\n    parentId,\n    firstName,\n    lastName,\n    email\n    '''\n_userTableHeader = [\n    'ParentID',\n    'ParentName',\n    'UserID',\n    'UserName',\n    'EMail'\n    ]\n\ndef getChildren(parent, users):\n    \"\"\"Get children of the parent from the user list / \u3053\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u89aa\u3068\u306a\u308b\u5b50\u30e6\u30fc\u30b6\u30fc\u3092\u30ea\u30b9\u30c8\u304b\u3089\u53d6\u5f97\u3059\u308b.\n\n    parent: \u89aa\u30e6\u30fc\u30b6\u30fc\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (User_Customer)\n    users: \u691c\u7d22\u5bfe\u8c61\u306e\u5b50\u30e6\u30fc\u30b6\u30fc\u306e\u30ea\u30b9\u30c8 (an array of User_Customer)\n    \"\"\"\n\n    a = {}\n    b = []\n\n    for u in users:\n        if u.get('parentId') == parent.get('id'):\n            a = {\n                \"ParentID\": u.get('parentId'),\n                \"ParentName\": parent.get('lastName') + \" \" + parent.get('firstName'),\n                \"ChildID\": u.get('id'),\n                \"ChildName\": u.get('lastName') + \" \" + u.get('firstName'),\n                \"Email\": u.get('email')\n            }\n            b.append(a)\n    return(b)\n\nclient = SoftLayer.Client(username=SL_USERNAME, api_key=SL_API_KEY)\nusers = client['Account'].getUsers(mask=_userMask)\n\n# Find the master user id\nfor u in users:\n    if u.get('parentId') == '':\n        masterUser = u\n        print(\"Master user is \\\"%s %s\\\" (id: %s)\" % (masterUser.get('lastName'), masterUser.get('firstName'), masterUser.get('id')))\n\n# Table definition\ntable = PrettyTable(_userTableHeader)\ntable.padding_width = 1\n\n# Get user list\ncount = 0\nfor parent in users:\n    userList = getChildren(parent, users)\n    for x in userList[0:]:\n        table.add_row(\n            [\n                x['ParentID'],\n                x['ParentName'],\n                x['ChildID'],\n                x['ChildName'],\n                x['Email']\n            ]\n        )\n        count = count + 1\n\nprint(table)\nprint(count, \"users\")\n\nexit()\n\n\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059(\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306f\u67b6\u7a7a\u306e\u3082\u306e\u3067\u3059)\u3002\n\u5b50\u30e6\u30fc\u30b6\u30fc\u3068\u5bfe\u5fdc\u3059\u308b\u89aa\u30e6\u30fc\u30b6\u30fc\u304c\u3001\u4e00\u89a7\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002\nMaster user is \"Jedi Master\" (id: 182178)\n+----------+--------------------+--------+-----------------------+--------------------------+\n| ParentID |     ParentName     | UserID |        UserName       |          EMail           |\n+----------+--------------------+--------+-----------------------+--------------------------+\n|  182178  |    Jedi Master     | 183358 |    Obi-Wan Kenobi     |    obi-wan@jp.ibm.com    |\n|  182178  |    Jedi Master     | 183362 |        R2 D2          |     r2-d2@jp.ibm.com     |\n|  182178  |    Jedi Master     | 183372 |        C 3PO          |     c-3po@jp.ibm.com     |\n|  182178  |    Jedi Master     | 183376 |    Luke Skywalker     |     luke@jp.ibm.com      |\n|  183362  |    Jedi Master     | 183378 |       Chew Bacca      |   chwebacca@jp.ibm.com   |\n|  183358  |   Obi-Wan Kenobi   | 183360 |   Anakin Skywalker    |     anakin@jp.ibm.com    |\n+----------+--------------------+--------+-----------------------+--------------------------+\n6 users\n\n# SoftLayer Portal\u306e\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\n\nSoftLayer\u3067\u306f\u3001Portal\u304b\u3089\u30af\u30e9\u30a6\u30c9\u4e0a\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\n[SoftLayer Customer Portal](https://control.softlayer.com/)\n\nPortal\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u306f\u30e6\u30fc\u30b6\u30fcID\u304c\u5fc5\u8981\u3067\u3059\u3002\nSoftLayer\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b\u6700\u521d\u306b\u4f5c\u3089\u308c\u308b\u30e6\u30fc\u30b6\u30fcID\u306f\u30de\u30b9\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u3068\u547c\u3070\u308c\u3001\u305d\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u5bfe\u3059\u308b\u5168\u3066\u306e\u6a29\u9650\u3092\u6301\u3061\u307e\u3059\u3002\n\n\u30de\u30b9\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u304c\u5168\u3066\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u7ba1\u7406\u3059\u308b\u3053\u3068\u306f\u73fe\u5b9f\u7684\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u901a\u5e38\u3001\u30de\u30b9\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u306f\u5b50\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3057\u3001\u4e00\u90e8\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u5bfe\u3059\u308b\u7ba1\u7406\u6a29\u9650\u3092\u59d4\u8b72\u3057\u307e\u3059\u3002\u5b50\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u66f4\u306b\u5b50\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3057\u3066\u6a29\u9650\u3092\u59d4\u8b72\u3057\u3001\u30b7\u30b9\u30c6\u30e0\u4e0a\u3067\u306e\u958b\u767a\u3084\u904b\u7528\u7ba1\u7406\u3092\u958b\u767a\u8005\u3084\u904b\u7528\u62c5\u5f53\u8005\u306b\u59d4\u8b72\u3057\u307e\u3059\u3002\n\n\u56f3\u306b\u8868\u3059\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n![sl_users.png](https://qiita-image-store.s3.amazonaws.com/0/65167/a575e152-d4fa-4b78-7f89-5300f7d20ce1.png)\n\n\u30de\u30b9\u30bf\u30fc\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u5b50\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u6a29\u9650\u3092\u5272\u308a\u5f53\u3066\u3001\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30c7\u30d0\u30a4\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5b50\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u7ba1\u7406\u3092\u59d4\u8b72\u3059\u308b\u305f\u3081\u306b\u5b6b\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u6a29\u9650\u3092\u5272\u308a\u5f53\u3066\u3001\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30c7\u30d0\u30a4\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n# \u30b9\u30af\u30ea\u30d7\u30c8\n\n\u3053\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u30fc\u306f\u968e\u5c64\u69cb\u9020\u3092\u3068\u308a\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\u306fPortal\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u304c\u3001Portal\u3084CLI\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u89aa\u5b50\u95a2\u4fc2\u3092\u4e00\u89a7\u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3053\u308c\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u4e0a\u4e0d\u4fbf\u306a\u306e\u3067\u3001SoftLayer API\u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\u3068\u89aa\u5b50\u95a2\u4fc2\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```python:sluser.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nSL_USERNAME = <SL User Name>\nSL_API_KEY = <SL API Key>\n```\n\n```python:sl_getUser.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'takechika'\n\nimport sys\nfrom prettytable import PrettyTable\nimport SoftLayer\nimport sluser\n\nSL_USERNAME = sluser.SL_USERNAME\nSL_API_KEY = sluser.SL_API_KEY\n\n_userMask = '''\n    id,\n    accountId,\n    parentId,\n    firstName,\n    lastName,\n    email\n    '''\n_userTableHeader = [\n    'ParentID',\n    'ParentName',\n    'UserID',\n    'UserName',\n    'EMail'\n    ]\n\ndef getChildren(parent, users):\n    \"\"\"Get children of the parent from the user list / \u3053\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u89aa\u3068\u306a\u308b\u5b50\u30e6\u30fc\u30b6\u30fc\u3092\u30ea\u30b9\u30c8\u304b\u3089\u53d6\u5f97\u3059\u308b.\n\n    parent: \u89aa\u30e6\u30fc\u30b6\u30fc\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (User_Customer)\n    users: \u691c\u7d22\u5bfe\u8c61\u306e\u5b50\u30e6\u30fc\u30b6\u30fc\u306e\u30ea\u30b9\u30c8 (an array of User_Customer)\n    \"\"\"\n\n    a = {}\n    b = []\n\n    for u in users:\n        if u.get('parentId') == parent.get('id'):\n            a = {\n                \"ParentID\": u.get('parentId'),\n                \"ParentName\": parent.get('lastName') + \" \" + parent.get('firstName'),\n                \"ChildID\": u.get('id'),\n                \"ChildName\": u.get('lastName') + \" \" + u.get('firstName'),\n                \"Email\": u.get('email')\n            }\n            b.append(a)\n    return(b)\n\nclient = SoftLayer.Client(username=SL_USERNAME, api_key=SL_API_KEY)\nusers = client['Account'].getUsers(mask=_userMask)\n\n# Find the master user id\nfor u in users:\n    if u.get('parentId') == '':\n        masterUser = u\n        print(\"Master user is \\\"%s %s\\\" (id: %s)\" % (masterUser.get('lastName'), masterUser.get('firstName'), masterUser.get('id')))\n\n# Table definition\ntable = PrettyTable(_userTableHeader)\ntable.padding_width = 1\n\n# Get user list\ncount = 0\nfor parent in users:\n    userList = getChildren(parent, users)\n    for x in userList[0:]:\n        table.add_row(\n            [\n                x['ParentID'],\n                x['ParentName'],\n                x['ChildID'],\n                x['ChildName'],\n                x['Email']\n            ]\n        )\n        count = count + 1\n\nprint(table)\nprint(count, \"users\")\n\nexit()\n```\n\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059(\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306f\u67b6\u7a7a\u306e\u3082\u306e\u3067\u3059)\u3002\n\u5b50\u30e6\u30fc\u30b6\u30fc\u3068\u5bfe\u5fdc\u3059\u308b\u89aa\u30e6\u30fc\u30b6\u30fc\u304c\u3001\u4e00\u89a7\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n```text\nMaster user is \"Jedi Master\" (id: 182178)\n+----------+--------------------+--------+-----------------------+--------------------------+\n| ParentID |     ParentName     | UserID |        UserName       |          EMail           |\n+----------+--------------------+--------+-----------------------+--------------------------+\n|  182178  |    Jedi Master     | 183358 |    Obi-Wan Kenobi     |    obi-wan@jp.ibm.com    |\n|  182178  |    Jedi Master     | 183362 |        R2 D2          |     r2-d2@jp.ibm.com     |\n|  182178  |    Jedi Master     | 183372 |        C 3PO          |     c-3po@jp.ibm.com     |\n|  182178  |    Jedi Master     | 183376 |    Luke Skywalker     |     luke@jp.ibm.com      |\n|  183362  |    Jedi Master     | 183378 |       Chew Bacca      |   chwebacca@jp.ibm.com   |\n|  183358  |   Obi-Wan Kenobi   | 183360 |   Anakin Skywalker    |     anakin@jp.ibm.com    |\n+----------+--------------------+--------+-----------------------+--------------------------+\n6 users\n```\n"}