{"context": " More than 1 year has passed since last update.\n\n\u3042\u3089\u3059\u3058\n\u3000\u524d\u7de8\u306b\u5f15\u304d\u7d9a\u304d\u3001\u5f8c\u7de8\u3067\u306f\u5b9f\u969b\u306b\u5404\u7a2eAPI\u3092\u53c2\u7167\u3057\u3066BOT\u30b5\u30fc\u30d3\u30b9\u3092\u7a3c\u50cd\u3055\u305b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitBucket\u306b\u3001\u5b8c\u6210\u54c1\u306f\u3053\u3061\u3089\u3067\u904b\u7528\u3057\u3066\u307e\u3059\u3002\n\nTask Queue\u3067\u9010\u6b21\u51e6\u7406\n\u3000\u5404\u30e6\u30fc\u30b6\u306e\u6226\u7e3e\u3092\u76e3\u8996\u3057\u3066\u66f4\u65b0\u304c\u3042\u308c\u3070Twitter\u306b\u6295\u7a3f\u3059\u308b\u51e6\u7406\u3092\u3055\u305b\u308b\u306b\u306fAPI\u306e\u5229\u7528\u5236\u9650\u304c\u3042\u308b\u305f\u3081\u3001\u79d2\u5358\u4f4d\u306e\u9593\u9694\u3067\u51e6\u7406\u3092\u5b9f\u884c\u3055\u305b\u308b\u5236\u5fa1\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u5f8c\u8ff0\u306eCron\u3067\u306f\u6700\u5c0f1\u5206\u9593\u9694\u3067\u3057\u304b\u547c\u3073\u51fa\u305b\u306a\u3044\u306e\u3067\u3001\u5404\u30e6\u30fc\u30b6\u306e\u51e6\u7406\u306fGAE\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bTask Queue\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u307e\u3059\u3002Task Queue\u306e\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066Bucket\u3068\u3044\u3046\u5165\u308c\u7269\u306b\u30bf\u30b9\u30af\u3092\u653e\u308a\u8fbc\u3093\u3067\u3001\u5148\u306b\u5165\u308c\u305f\u9806\u304b\u3089\u30bf\u30b9\u30af\u3092\u8a2d\u5b9a\u306b\u5f93\u3063\u3066\u51e6\u7406\u3057\u3066\u304d\u307e\u3059\u3002Bucket\u30b5\u30a4\u30ba\u3092\u5897\u3084\u305b\u3070\u4e26\u5217\u51e6\u7406\u306b\u3082\u306a\u308a\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306fqueue.yaml\u3067\u3059\u3002\n\nqueue.yaml\nqueue:\n- name: tweet #\u306a\u3093\u3067\u3082\u3088\u3044\n  rate: 0.8/s #\u4e00\u79d2\u9593\u306b0.8\u56de\u306e\u30da\u30fc\u30b9\u3067\u51e6\u7406\n  bucket_size: 1 #\u4e26\u5217\u3067\u51e6\u7406\u3059\u308b\u6570\n  retry_parameters:\n    task_retry_limit: 0 #\u51e6\u7406\u5931\u6557\u6642\u306e\u30ea\u30c8\u30e9\u30a4\u6570\n\n\n\u3000\u3067\u306f\u5b9f\u969b\u306bqueue.yaml\u3067\u8a2d\u5b9a\u3057\u305fBucket\u306bPython\u304b\u3089\u30bf\u30b9\u30af\u3092\u653e\u308a\u8fbc\u3080\u306b\u306fadd()\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002queue_name=\u306bqueue.yaml\u3067\u8a2d\u5b9a\u3057\u305fname\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002url=\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u51e6\u7406\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nlauncher.py\nfrom google.appengine.api.taskqueue import add\n\nimport webapp2\n\nclass modelTask(db.Model): #\u30ad\u30e5\u30fc\u306b\u5165\u308c\u308b\u30bf\u30b9\u30af\n    resion = db.StringProperty()\n    summoner_name = db.StringProperty()\n    summoner_id = db.IntegerProperty()\n    latest_game = db.IntegerProperty()\n    access_key = db.StringProperty()\n    access_secret = db.StringProperty()\n    date_success = db.DateTimeProperty(auto_now_add=True)\n    date = db.DateTimeProperty(auto_now_add=True)\n\nclass mainHandler(webapp2.RequestHandler):\n    def get(self):\n        qs = modelTask.all().order('-date_success')\n        for q in qs: #\u30bf\u30b9\u30af\u3092\u5168\u3066Queue\u306b\u8ffd\u52a0\u3059\u308b\n            add(queue_name='tweet', url='/tweet', params={'qid': q.key().id()})\n\napp = webapp2.WSGIApplication([ ('/launcher', mainHandler) ])\n\n\n\u3000\u6b21\u306burl=\u3067\u6307\u5b9a\u3057\u305f\u3001Task Queue\u3067\u9806\u756a\u304c\u56de\u3063\u3066\u304d\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002Task Queue\u304b\u3089\u306fPOST\u30e1\u30bd\u30c3\u30c9\u3067\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\ntweet.py\n#! -*- coding: utf-8 -*-\nfrom google.appengine.ext import db\nfrom google.appengine.api.urlfetch import fetch\nfrom django.utils.simplejson import loads\n\nimport webapp2, tweepy\nfrom datetime import datetime\n\nfrom laucher import modelTask\n\nCONSUMER_KEY = '********************'\nCONSUMER_SECRET = '**************************************'\nRIOT_KEY = '***********************************'\n\nclass mainHandler(webapp2.RequestHandler):\n    def post(self):\n        getGame(long(self.request.get('qid')))\n\ndef getGame(qid):\n    q = modelTask().get_by_id(qid, parent=None)\n    #RIOT API\u3092\u547c\u3073\u51fa\u3059\n    result = fetch('https://prod.api.pvp.net/api/lol/'+q.resion+'/v1.3/game/by-summoner/'+str(q.summoner_id)+'/recent?api_key='+RIOT_KEY)\n    if result.status_code == 200:\n        #API\u304b\u3089\u53d6\u5f97\u3057\u305f\u5404\u7a2e\u5024\u3092\u30bb\u30c3\u30c8\n        j = loads(result.content)['games'][0]\n        if j['stats']['win'] == True:\n            win = '\u52dd\u5229'\n        else:\n            win = '\u6557\u5317'\n        try:\n            kill = str(j['stats']['championsKilled'])\n        except:\n            kill = '0'\n        try:\n            death = str(j['stats']['numDeaths'])\n        except:\n            death = '0'\n        try:\n            assist = str(j['stats']['assists'])\n        except:\n            assist = '0'\n\n        game_type = j['subType']\n\n        #\u6700\u7d42\u6226\u95d8\u6642\u9593\u306b\u66f4\u65b0\u304c\u3042\u308c\u3070Twitter\u306b\u6295\u7a3f\n        if j['createDate'] > q.latest_game:\n            q.latest_game = j['createDate']\n            q.put()\n            if tweet(q.summoner_name+'\u3055\u3093\u6700\u65b0\u306e'+game_type+'\u6226\u7e3e\u306f'+kill+'\u30ad\u30eb'+death+'\u30c7\u30b9'+assist+'\u30a2\u30b7\u30b9\u30c8\u306e'+win+'\u3067\u3059 \u3002 http://tol.orfx.jp #Tweet_of_Legends', q.access_key, q.access_secret):\n                q.date_success = datetime.now()\n                q.put()\n\n#Twitter\u6295\u7a3f\u51e6\u7406\ndef tweet(message, access_key, access_secret):\n    try:\n        auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\n        auth.set_access_token(access_key, access_secret)\n        api = tweepy.API(auth_handler=auth, api_root='/1.1', secure=True)\n        api.update_status(status=message)\n\n        return True\n    except:\n        return False\n\napp = webapp2.WSGIApplication([ ('/tweet', mainHandler) ])\n\n\n\nCron\u3067\u5b9a\u671f\u51e6\u7406\n\u3000\u4e0a\u8a18\u306e\u30bf\u30b9\u30af\u3092\u30ad\u30e5\u30fc\u306b\u8ffd\u52a0\u3059\u308b\u51e6\u7406\u3092\u5b9a\u671f\u7684\u306b\u547c\u3073\u51fa\u3057\u305f\u3044\u306e\u3067Cron\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306fcron.yaml\u3067\u3059\u3002\u4eca\u56de\u306f\u5348\u524d1\u6642\u304b\u3089\u5348\u5f8c6\u6642\u307e\u3067\u306f10\u5206\u6bce\u306b\u3001\u305d\u308c\u4ee5\u5916\u306f5\u5206\u6bce\u306b\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\ncron.yaml\ncron:\n- description: tweet job\n  url: /launcher\n  schedule: every 10 minutes from 1:00 to 17:59\n  timezone: Asia/Tokyo #\u6642\u9593\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u5fd8\u308c\u305a\u306b\n\n- description: tweet job\n  url: /launcher\n  schedule: every 5 minutes from 18:00 to 0:59\n  timezone: Asia/Tokyo\n\n\n\nBackend\u3067\u6d88\u8cbb\u30ea\u30bd\u30fc\u30b9\u5206\u6563\n\u3000\u3055\u3066\u3001\u3053\u306eCron(5~10\u5206\u6bce)\u306e\u8a2d\u5b9a\u3067\u7a3c\u50cd\u3055\u305b\u308b\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u6642\u9593\u306e\u8a08\u7b97\u304c15\u5206\u523b\u307f\u306a\u306e\u3067\u3001Frontend\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u6642\u9593\u306f\u78ba\u5b9f\u306b24\u6642\u9593\u4ee5\u4e0a\u6d88\u8cbb\u3057\u307e\u3059\u3002\u305d\u308c\u306b\u52a0\u3048\u3066\u767b\u9332\u30da\u30fc\u30b8\u51e6\u7406\u306a\u3069\u3082\u52a0\u308f\u308a\u308b\u306e\u3067\u3001\u7121\u6599\u67a0\u306e28\u6642\u9593(2014\u5e743\u6708\u73fe\u5728)\u3067\u306f\u4e0d\u5b89\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u3001Backend\u3092\u6d3b\u7528\u3057\u3066\u307f\u307e\u3059\u3002Backend\u306f\u672c\u6765\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3084\u975e\u540c\u671f\u51e6\u7406\u306a\u3069\u6587\u5b57\u901a\u308a\u88cf\u65b9\u306e\u4ed5\u4e8b\u3092\u3055\u305b\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5358\u7d14\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u6642\u9593\u3092(9\u6642\u9593)\u7a3c\u3050\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306fbackend.yaml\u3067\u3059\u3002\n\nbackend.yaml\nbackends:\n- name: tweet #\u306a\u3093\u3067\u3082\u826f\u3044\n  class: B1 #\u51e6\u7406\u30ea\u30bd\u30fc\u30b9\u306f\u6700\u4f4e\u9650\u306b\u3059\u308b\n  options: dynamic #\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5e38\u99d0\u3057\u306a\u3044\u69d8\u306b\u3059\u308b\n\n\n\u3000Cron\u3067\u51e6\u7406\u3092Backend\u306b\u3055\u305b\u308b\u5834\u5408\u306ftarget\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u5348\u5f8c6\u6642\u304b\u3089\u5348\u524d1\u6642\u307e\u3067\u306fBackend\u3067\u51e6\u7406\u3055\u305b\u3066\u307f\u307e\u3059\u3002\ncron:\n- description: tweet job\n  url: /launcher\n  schedule: every 10 minutes from 1:00 to 17:59\n  timezone: Asia/Tokyo\n\n- description: tweet job\n  url: /launcher\n  schedule: every 5 minutes from 18:00 to 0:59\n  timezone: Asia/Tokyo\n  target: tweet #backend.yaml\u306ename\n\n\u3000TaskQueue\u3082add(target=)\u3092\u6307\u5b9a\u3057\u3066Backend\u3067\u51e6\u7406\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u81ea\u8eab\u304cBackend\u3067\u8d77\u52d5\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3059\u308b\u306b\u306fget_backend()\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305f\u3001Backend\u8d77\u52d5\u6642\u306f/_ah/start\u304c\u5f37\u5236\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u6700\u521d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u3067\u8d77\u52d5\u6642\u306e\u51e6\u7406\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u7a7a\u306e\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nlauncher.py\nfrom google.appengine.api.taskqueue import add\nfrom google.appengine.api.backends import get_backend\n\nimport webapp2\n\nclass modelTask(db.Model):\n    resion = db.StringProperty()\n    summoner_name = db.StringProperty()\n    summoner_id = db.IntegerProperty()\n    latest_game = db.IntegerProperty()\n    access_key = db.StringProperty()\n    access_secret = db.StringProperty()\n    date_success = db.DateTimeProperty(auto_now_add=True)\n    date = db.DateTimeProperty(auto_now_add=True)\n\nclass mainHandler(webapp2.RequestHandler):\n    def get(self):\n        qs = modelTask.all().order('-date_success')\n        target = get_backend()\n        if target is None: #Backend\u3067\u8d77\u52d5\u3055\u308c\u3066\u308c\u3070TaskQueue\u3082\u540c\u69d8\u306b\n            for q in qs:\n                add(queue_name='tweet', url='/tweet', params={'qid': q.key().id()})\n        else:\n            for q in qs:\n                add(queue_name='tweet', url='/tweet', params={'qid': q.key().id()}, target='tweet')\n\nclass startHandler(webapp2.RequestHandler): #Backend\u8d77\u52d5\u6642\u306b\u5f37\u5236\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n    def get(self):\n        return\n\napp = webapp2.WSGIApplication([ ('/launcher', mainHandler), ('/_ah/start', startHandler) ])\n\n\n\nMemcache\u3067\u6d88\u8cbb\u30ea\u30bd\u30fc\u30b9\u524a\u6e1b\n\u3000\u983b\u7e41\u306b\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\u53c2\u7167\u3059\u308b\u304c\u66f4\u65b0\u306f\u307b\u3068\u3093\u3069\u3057\u306a\u3044\u51e6\u7406\u306fMemcache\u3092\u4f7f\u7528\u3059\u308b\u3068\u5927\u5e45\u306b\u6d88\u8cbb\u30ea\u30bd\u30fc\u30b9\u3092\u524a\u6e1b\u3067\u304d\u307e\u3059\u3002RIOT API\u306egame-v1.3\u3067\u306fChampion\u304cID\u3067\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u3001champion-v1.1\u306e\u60c5\u5831\u3092\u5143\u306bID\u3092\u540d\u524d\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u983b\u7e41\u306bAPI\u3092\u53e9\u3051\u306a\u3044\u306e\u3067champion-v1.1\u3067\u53d6\u5f97\u3057\u305f\u60c5\u5831\u3092\u4e00\u5ea6\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001Memcache\u306b\u683c\u7d0d\u3057\u305f\u60c5\u5831\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002Memcache\u306b\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u306b\u306fmemcache.add(key, value)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nchampion.py\nfrom google.appengine.api import memcache\nfrom google.appengine.ext import db\nfrom google.appengine.api.urlfetch import fetch\nfrom django.utils.simplejson import loads\n\nimport webapp2\n\nRIOT_KEY = '***********************************'\n\nclass modelChampion(db.Model): #\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u683c\u7d0d\u30e2\u30c7\u30eb\n    name = db.StringProperty()\n    date = db.DateTimeProperty(auto_now_add=True)\n\nclass mainHandler(webapp2.RequestHandler):\n    def get(self):\n        #\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u53d6\u5f97\n        result = fetch('https://prod.api.pvp.net/api/lol/na/v1.1/champion?api_key='+RIOT_KEY)\n        if result.status_code == 200:\n            js = loads(result.content)['champions']\n            for j in js:\n                #\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u683c\u7d0d\n                modelchampion = modelChampion().get_or_insert(str(j['id']))\n                modelchampion.name = j['name']\n                modelchampion.put()\n\n                #Memcache\u306b\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u3092\u30b3\u30d4\u30fc\n                memcache.add(\"champion_\"+str(j['id']), j['name'], 86399)\n\napp = webapp2.WSGIApplication([ ('/champion', mainHandler) ], debug=True)\n\n\n\u3000Memcache\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3059\u308b\u306b\u306fmemcache.get(key)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002Memcache\u306b\u8ffd\u52a0\u3057\u305f\u30c7\u30fc\u30bf\u306f\u6d88\u5931\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u305d\u306e\u969b\u306e\u51e6\u7406\u3082\u8a18\u8ff0\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u306f\u3001\u5148\u307b\u3069\u306etweet.py\u306b\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u540d\u3092\u6295\u7a3f\u5185\u5bb9\u306b\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\u3002\n\ntweet.py\nfrom google.appengine.api import memcache\nfrom champion import modelChampion\n\ndef getGame(qid):\n    q = modelQueue().get_by_id(qid, parent=None)\n    result = fetch('https://prod.api.pvp.net/api/lol/'+q.resion+'/v1.3/game/by-summoner/'+str(q.summoner_id)+'/recent?api_key='+RIOT_KEY)\n    if result.status_code == 200:\n        j = loads(result.content)['games'][0]\n        if j['stats']['win'] == True:\n            win = '\u52dd\u5229'\n        else:\n            win = '\u6557\u5317'\n        try:\n            kill = str(j['stats']['championsKilled'])\n        except:\n            kill = '0'\n        try:\n            death = str(j['stats']['numDeaths'])\n        except:\n            death = '0'\n        try:\n            assist = str(j['stats']['assists'])\n        except:\n            assist = '0'\n\n        #Memcache\u304b\u3089\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u3092\u53d6\u5f97\n        champion = memcache.get(\"champion_\"+str(j['championId']))\n        if champion is None: #Memcache\u304b\u3089\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u306a\u3051\u308c\u3070\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u304b\u3089\n            champion = modelChampion.get_by_key_name(str(j['championId'])).name\n\n        game_type = j['subType']\n\n        if j['createDate'] > q.latest_game:\n            q.latest_game = j['createDate']\n            q.put()\n            if tweet(q.summoner_name+'\u3055\u3093\u6700\u65b0\u306e'+game_type+'\u6226\u7e3e\u306f'+champion+'\u3067'+kill+'\u30ad\u30eb'+death+'\u30c7\u30b9'+assist+'\u30a2\u30b7\u30b9\u30c8\u306e'+win+'\u3067\u3059 \u3002 http://tol.orfx.jp #Tweet_of_Legends', q.access_key, q.access_secret):\n                q.date_success = datetime.now()\n                q.put()\n\n\n\n\u307e\u3068\u3081\n\u3000\u4ee5\u4e0a\u3001\u521d\u3081\u3066GAE\u3067\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u306e\u899a\u66f8\u3067\u3057\u305f\u3002\u4e00\u5ea6\u30b3\u30c4\u3092\u63b4\u3081\u3070\u6b21\u304b\u3089\u3068\u3066\u3082\u7c21\u5358\u306b\u30a2\u30d7\u30ea\u304c\u4f5c\u6210\u3067\u304d\u308b\u306e\u3067\u304a\u52e7\u3081\u3067\u3059\uff01\n##\u3042\u3089\u3059\u3058\n\u3000[\u524d\u7de8](http://qiita.com/orfx/items/14bdcac1d01edb74b559)\u306b\u5f15\u304d\u7d9a\u304d\u3001\u5f8c\u7de8\u3067\u306f\u5b9f\u969b\u306b\u5404\u7a2eAPI\u3092\u53c2\u7167\u3057\u3066BOT\u30b5\u30fc\u30d3\u30b9\u3092\u7a3c\u50cd\u3055\u305b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[GitBucket](https://bitbucket.org/orfx/tweetoflegends)\u306b\u3001\u5b8c\u6210\u54c1\u306f[\u3053\u3061\u3089](http://tol.orfx.jp/)\u3067\u904b\u7528\u3057\u3066\u307e\u3059\u3002\n\n##Task Queue\u3067\u9010\u6b21\u51e6\u7406\n\u3000\u5404\u30e6\u30fc\u30b6\u306e\u6226\u7e3e\u3092\u76e3\u8996\u3057\u3066\u66f4\u65b0\u304c\u3042\u308c\u3070Twitter\u306b\u6295\u7a3f\u3059\u308b\u51e6\u7406\u3092\u3055\u305b\u308b\u306b\u306fAPI\u306e\u5229\u7528\u5236\u9650\u304c\u3042\u308b\u305f\u3081\u3001\u79d2\u5358\u4f4d\u306e\u9593\u9694\u3067\u51e6\u7406\u3092\u5b9f\u884c\u3055\u305b\u308b\u5236\u5fa1\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u5f8c\u8ff0\u306eCron\u3067\u306f\u6700\u5c0f1\u5206\u9593\u9694\u3067\u3057\u304b\u547c\u3073\u51fa\u305b\u306a\u3044\u306e\u3067\u3001\u5404\u30e6\u30fc\u30b6\u306e\u51e6\u7406\u306fGAE\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bTask Queue\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u307e\u3059\u3002Task Queue\u306e\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066Bucket\u3068\u3044\u3046\u5165\u308c\u7269\u306b\u30bf\u30b9\u30af\u3092\u653e\u308a\u8fbc\u3093\u3067\u3001\u5148\u306b\u5165\u308c\u305f\u9806\u304b\u3089\u30bf\u30b9\u30af\u3092\u8a2d\u5b9a\u306b\u5f93\u3063\u3066\u51e6\u7406\u3057\u3066\u304d\u307e\u3059\u3002Bucket\u30b5\u30a4\u30ba\u3092\u5897\u3084\u305b\u3070\u4e26\u5217\u51e6\u7406\u306b\u3082\u306a\u308a\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f```queue.yaml```\u3067\u3059\u3002\n\n```queue.yaml\nqueue:\n- name: tweet #\u306a\u3093\u3067\u3082\u3088\u3044\n  rate: 0.8/s #\u4e00\u79d2\u9593\u306b0.8\u56de\u306e\u30da\u30fc\u30b9\u3067\u51e6\u7406\n  bucket_size: 1 #\u4e26\u5217\u3067\u51e6\u7406\u3059\u308b\u6570\n  retry_parameters:\n    task_retry_limit: 0 #\u51e6\u7406\u5931\u6557\u6642\u306e\u30ea\u30c8\u30e9\u30a4\u6570\n```\n\n\u3000\u3067\u306f\u5b9f\u969b\u306b```queue.yaml```\u3067\u8a2d\u5b9a\u3057\u305fBucket\u306bPython\u304b\u3089\u30bf\u30b9\u30af\u3092\u653e\u308a\u8fbc\u3080\u306b\u306f```add()```\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002```queue_name=```\u306b```queue.yaml```\u3067\u8a2d\u5b9a\u3057\u305f```name```\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002```url=```\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u51e6\u7406\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```launcher.py\nfrom google.appengine.api.taskqueue import add\n\nimport webapp2\n\nclass modelTask(db.Model): #\u30ad\u30e5\u30fc\u306b\u5165\u308c\u308b\u30bf\u30b9\u30af\n    resion = db.StringProperty()\n    summoner_name = db.StringProperty()\n    summoner_id = db.IntegerProperty()\n    latest_game = db.IntegerProperty()\n    access_key = db.StringProperty()\n    access_secret = db.StringProperty()\n    date_success = db.DateTimeProperty(auto_now_add=True)\n    date = db.DateTimeProperty(auto_now_add=True)\n\nclass mainHandler(webapp2.RequestHandler):\n    def get(self):\n        qs = modelTask.all().order('-date_success')\n        for q in qs: #\u30bf\u30b9\u30af\u3092\u5168\u3066Queue\u306b\u8ffd\u52a0\u3059\u308b\n            add(queue_name='tweet', url='/tweet', params={'qid': q.key().id()})\n\napp = webapp2.WSGIApplication([ ('/launcher', mainHandler) ])\n```\n\n\u3000\u6b21\u306b```url=```\u3067\u6307\u5b9a\u3057\u305f\u3001Task Queue\u3067\u9806\u756a\u304c\u56de\u3063\u3066\u304d\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002Task Queue\u304b\u3089\u306fPOST\u30e1\u30bd\u30c3\u30c9\u3067\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n```tweet.py\n#! -*- coding: utf-8 -*-\nfrom google.appengine.ext import db\nfrom google.appengine.api.urlfetch import fetch\nfrom django.utils.simplejson import loads\n\nimport webapp2, tweepy\nfrom datetime import datetime\n\nfrom laucher import modelTask\n\nCONSUMER_KEY = '********************'\nCONSUMER_SECRET = '**************************************'\nRIOT_KEY = '***********************************'\n\nclass mainHandler(webapp2.RequestHandler):\n    def post(self):\n        getGame(long(self.request.get('qid')))\n\ndef getGame(qid):\n    q = modelTask().get_by_id(qid, parent=None)\n    #RIOT API\u3092\u547c\u3073\u51fa\u3059\n    result = fetch('https://prod.api.pvp.net/api/lol/'+q.resion+'/v1.3/game/by-summoner/'+str(q.summoner_id)+'/recent?api_key='+RIOT_KEY)\n    if result.status_code == 200:\n        #API\u304b\u3089\u53d6\u5f97\u3057\u305f\u5404\u7a2e\u5024\u3092\u30bb\u30c3\u30c8\n        j = loads(result.content)['games'][0]\n        if j['stats']['win'] == True:\n            win = '\u52dd\u5229'\n        else:\n            win = '\u6557\u5317'\n        try:\n            kill = str(j['stats']['championsKilled'])\n        except:\n            kill = '0'\n        try:\n            death = str(j['stats']['numDeaths'])\n        except:\n            death = '0'\n        try:\n            assist = str(j['stats']['assists'])\n        except:\n            assist = '0'\n\n        game_type = j['subType']\n\n        #\u6700\u7d42\u6226\u95d8\u6642\u9593\u306b\u66f4\u65b0\u304c\u3042\u308c\u3070Twitter\u306b\u6295\u7a3f\n        if j['createDate'] > q.latest_game:\n            q.latest_game = j['createDate']\n            q.put()\n            if tweet(q.summoner_name+'\u3055\u3093\u6700\u65b0\u306e'+game_type+'\u6226\u7e3e\u306f'+kill+'\u30ad\u30eb'+death+'\u30c7\u30b9'+assist+'\u30a2\u30b7\u30b9\u30c8\u306e'+win+'\u3067\u3059 \u3002 http://tol.orfx.jp #Tweet_of_Legends', q.access_key, q.access_secret):\n                q.date_success = datetime.now()\n                q.put()\n\n#Twitter\u6295\u7a3f\u51e6\u7406\ndef tweet(message, access_key, access_secret):\n    try:\n        auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\n        auth.set_access_token(access_key, access_secret)\n        api = tweepy.API(auth_handler=auth, api_root='/1.1', secure=True)\n        api.update_status(status=message)\n        \n        return True\n    except:\n        return False\n\napp = webapp2.WSGIApplication([ ('/tweet', mainHandler) ])\n```\n\n##Cron\u3067\u5b9a\u671f\u51e6\u7406\n\n\u3000\u4e0a\u8a18\u306e\u30bf\u30b9\u30af\u3092\u30ad\u30e5\u30fc\u306b\u8ffd\u52a0\u3059\u308b\u51e6\u7406\u3092\u5b9a\u671f\u7684\u306b\u547c\u3073\u51fa\u3057\u305f\u3044\u306e\u3067Cron\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f```cron.yaml```\u3067\u3059\u3002\u4eca\u56de\u306f\u5348\u524d1\u6642\u304b\u3089\u5348\u5f8c6\u6642\u307e\u3067\u306f10\u5206\u6bce\u306b\u3001\u305d\u308c\u4ee5\u5916\u306f5\u5206\u6bce\u306b\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```cron.yaml\ncron:\n- description: tweet job\n  url: /launcher\n  schedule: every 10 minutes from 1:00 to 17:59\n  timezone: Asia/Tokyo #\u6642\u9593\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u5fd8\u308c\u305a\u306b\n  \n- description: tweet job\n  url: /launcher\n  schedule: every 5 minutes from 18:00 to 0:59\n  timezone: Asia/Tokyo\n```\n\n##Backend\u3067\u6d88\u8cbb\u30ea\u30bd\u30fc\u30b9\u5206\u6563\n\n\u3000\u3055\u3066\u3001\u3053\u306eCron(5~10\u5206\u6bce)\u306e\u8a2d\u5b9a\u3067\u7a3c\u50cd\u3055\u305b\u308b\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u6642\u9593\u306e\u8a08\u7b97\u304c15\u5206\u523b\u307f\u306a\u306e\u3067\u3001Frontend\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u6642\u9593\u306f\u78ba\u5b9f\u306b24\u6642\u9593\u4ee5\u4e0a\u6d88\u8cbb\u3057\u307e\u3059\u3002\u305d\u308c\u306b\u52a0\u3048\u3066\u767b\u9332\u30da\u30fc\u30b8\u51e6\u7406\u306a\u3069\u3082\u52a0\u308f\u308a\u308b\u306e\u3067\u3001\u7121\u6599\u67a0\u306e28\u6642\u9593(2014\u5e743\u6708\u73fe\u5728)\u3067\u306f\u4e0d\u5b89\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u3001Backend\u3092\u6d3b\u7528\u3057\u3066\u307f\u307e\u3059\u3002Backend\u306f\u672c\u6765\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3084\u975e\u540c\u671f\u51e6\u7406\u306a\u3069\u6587\u5b57\u901a\u308a\u88cf\u65b9\u306e\u4ed5\u4e8b\u3092\u3055\u305b\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5358\u7d14\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u6642\u9593\u3092(9\u6642\u9593)\u7a3c\u3050\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f```backend.yaml```\u3067\u3059\u3002\n\n```backend.yaml\nbackends:\n- name: tweet #\u306a\u3093\u3067\u3082\u826f\u3044\n  class: B1 #\u51e6\u7406\u30ea\u30bd\u30fc\u30b9\u306f\u6700\u4f4e\u9650\u306b\u3059\u308b\n  options: dynamic #\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5e38\u99d0\u3057\u306a\u3044\u69d8\u306b\u3059\u308b\n```\n\n\u3000Cron\u3067\u51e6\u7406\u3092Backend\u306b\u3055\u305b\u308b\u5834\u5408\u306f```target```\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u5348\u5f8c6\u6642\u304b\u3089\u5348\u524d1\u6642\u307e\u3067\u306fBackend\u3067\u51e6\u7406\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n```\ncron:\n- description: tweet job\n  url: /launcher\n  schedule: every 10 minutes from 1:00 to 17:59\n  timezone: Asia/Tokyo\n  \n- description: tweet job\n  url: /launcher\n  schedule: every 5 minutes from 18:00 to 0:59\n  timezone: Asia/Tokyo\n  target: tweet #backend.yaml\u306ename\n```\n\n\u3000TaskQueue\u3082```add(target=)```\u3092\u6307\u5b9a\u3057\u3066Backend\u3067\u51e6\u7406\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u81ea\u8eab\u304cBackend\u3067\u8d77\u52d5\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3059\u308b\u306b\u306f```get_backend()```\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305f\u3001Backend\u8d77\u52d5\u6642\u306f```/_ah/start```\u304c\u5f37\u5236\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u6700\u521d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u3067\u8d77\u52d5\u6642\u306e\u51e6\u7406\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u7a7a\u306e\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```launcher.py\nfrom google.appengine.api.taskqueue import add\nfrom google.appengine.api.backends import get_backend\n\nimport webapp2\n\nclass modelTask(db.Model):\n    resion = db.StringProperty()\n    summoner_name = db.StringProperty()\n    summoner_id = db.IntegerProperty()\n    latest_game = db.IntegerProperty()\n    access_key = db.StringProperty()\n    access_secret = db.StringProperty()\n    date_success = db.DateTimeProperty(auto_now_add=True)\n    date = db.DateTimeProperty(auto_now_add=True)\n\nclass mainHandler(webapp2.RequestHandler):\n    def get(self):\n        qs = modelTask.all().order('-date_success')\n        target = get_backend()\n        if target is None: #Backend\u3067\u8d77\u52d5\u3055\u308c\u3066\u308c\u3070TaskQueue\u3082\u540c\u69d8\u306b\n            for q in qs:\n                add(queue_name='tweet', url='/tweet', params={'qid': q.key().id()})\n        else:\n            for q in qs:\n                add(queue_name='tweet', url='/tweet', params={'qid': q.key().id()}, target='tweet')\n\nclass startHandler(webapp2.RequestHandler): #Backend\u8d77\u52d5\u6642\u306b\u5f37\u5236\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n    def get(self):\n        return\n\napp = webapp2.WSGIApplication([ ('/launcher', mainHandler), ('/_ah/start', startHandler) ])\n```\n\n##Memcache\u3067\u6d88\u8cbb\u30ea\u30bd\u30fc\u30b9\u524a\u6e1b\n\n\u3000\u983b\u7e41\u306b\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\u53c2\u7167\u3059\u308b\u304c\u66f4\u65b0\u306f\u307b\u3068\u3093\u3069\u3057\u306a\u3044\u51e6\u7406\u306fMemcache\u3092\u4f7f\u7528\u3059\u308b\u3068\u5927\u5e45\u306b\u6d88\u8cbb\u30ea\u30bd\u30fc\u30b9\u3092\u524a\u6e1b\u3067\u304d\u307e\u3059\u3002RIOT API\u306egame-v1.3\u3067\u306fChampion\u304cID\u3067\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u3001champion-v1.1\u306e\u60c5\u5831\u3092\u5143\u306bID\u3092\u540d\u524d\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u983b\u7e41\u306bAPI\u3092\u53e9\u3051\u306a\u3044\u306e\u3067champion-v1.1\u3067\u53d6\u5f97\u3057\u305f\u60c5\u5831\u3092\u4e00\u5ea6\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001Memcache\u306b\u683c\u7d0d\u3057\u305f\u60c5\u5831\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002Memcache\u306b\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u306b\u306f```memcache.add(key, value)```\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```champion.py\nfrom google.appengine.api import memcache\nfrom google.appengine.ext import db\nfrom google.appengine.api.urlfetch import fetch\nfrom django.utils.simplejson import loads\n\nimport webapp2\n\nRIOT_KEY = '***********************************'\n\nclass modelChampion(db.Model): #\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u683c\u7d0d\u30e2\u30c7\u30eb\n    name = db.StringProperty()\n    date = db.DateTimeProperty(auto_now_add=True)\n\nclass mainHandler(webapp2.RequestHandler):\n    def get(self):\n        #\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u53d6\u5f97\n        result = fetch('https://prod.api.pvp.net/api/lol/na/v1.1/champion?api_key='+RIOT_KEY)\n        if result.status_code == 200:\n            js = loads(result.content)['champions']\n            for j in js:\n                #\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u683c\u7d0d\n                modelchampion = modelChampion().get_or_insert(str(j['id']))\n                modelchampion.name = j['name']\n                modelchampion.put()\n\n                #Memcache\u306b\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u3092\u30b3\u30d4\u30fc\n                memcache.add(\"champion_\"+str(j['id']), j['name'], 86399)\n\napp = webapp2.WSGIApplication([ ('/champion', mainHandler) ], debug=True)\n```\n\n\u3000Memcache\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3059\u308b\u306b\u306f```memcache.get(key)```\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002Memcache\u306b\u8ffd\u52a0\u3057\u305f\u30c7\u30fc\u30bf\u306f\u6d88\u5931\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u305d\u306e\u969b\u306e\u51e6\u7406\u3082\u8a18\u8ff0\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u306f\u3001\u5148\u307b\u3069\u306etweet.py\u306b\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u540d\u3092\u6295\u7a3f\u5185\u5bb9\u306b\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\u3002\n\n```tweet.py\nfrom google.appengine.api import memcache\nfrom champion import modelChampion\n\ndef getGame(qid):\n    q = modelQueue().get_by_id(qid, parent=None)\n    result = fetch('https://prod.api.pvp.net/api/lol/'+q.resion+'/v1.3/game/by-summoner/'+str(q.summoner_id)+'/recent?api_key='+RIOT_KEY)\n    if result.status_code == 200:\n        j = loads(result.content)['games'][0]\n        if j['stats']['win'] == True:\n            win = '\u52dd\u5229'\n        else:\n            win = '\u6557\u5317'\n        try:\n            kill = str(j['stats']['championsKilled'])\n        except:\n            kill = '0'\n        try:\n            death = str(j['stats']['numDeaths'])\n        except:\n            death = '0'\n        try:\n            assist = str(j['stats']['assists'])\n        except:\n            assist = '0'\n\n        #Memcache\u304b\u3089\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u3092\u53d6\u5f97\n        champion = memcache.get(\"champion_\"+str(j['championId']))\n        if champion is None: #Memcache\u304b\u3089\u30c1\u30e3\u30f3\u30d4\u30e7\u30f3\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u306a\u3051\u308c\u3070\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u304b\u3089\n            champion = modelChampion.get_by_key_name(str(j['championId'])).name\n\n        game_type = j['subType']\n        \n        if j['createDate'] > q.latest_game:\n            q.latest_game = j['createDate']\n            q.put()\n            if tweet(q.summoner_name+'\u3055\u3093\u6700\u65b0\u306e'+game_type+'\u6226\u7e3e\u306f'+champion+'\u3067'+kill+'\u30ad\u30eb'+death+'\u30c7\u30b9'+assist+'\u30a2\u30b7\u30b9\u30c8\u306e'+win+'\u3067\u3059 \u3002 http://tol.orfx.jp #Tweet_of_Legends', q.access_key, q.access_secret):\n                q.date_success = datetime.now()\n                q.put()\n```\n\n##\u307e\u3068\u3081\n\u3000\u4ee5\u4e0a\u3001\u521d\u3081\u3066GAE\u3067\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u306e\u899a\u66f8\u3067\u3057\u305f\u3002\u4e00\u5ea6\u30b3\u30c4\u3092\u63b4\u3081\u3070\u6b21\u304b\u3089\u3068\u3066\u3082\u7c21\u5358\u306b\u30a2\u30d7\u30ea\u304c\u4f5c\u6210\u3067\u304d\u308b\u306e\u3067\u304a\u52e7\u3081\u3067\u3059\uff01", "tags": ["Python", "GAE", "RIOT_API", "Twitter", "tweepy"]}