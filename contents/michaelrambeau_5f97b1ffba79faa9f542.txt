{"context": "\n\nJavaScript and Web Development in 2017\nA talk about the history, the evolution and the latest trends in the JavaScript world.\nThese slides are online: http://js2017.surge.sh/\nSaturday, February 18, 2017\n: Kansai Developers & Designers meetup event\n\nA presentation by Michael Rambeau\nCreator of:\n\n\nbestof.js.org: the best of JavaScript, HTML, CSS...\n\nRising Stars 2016: an article about 2016 trends, available in Japanese\n\n\n\n\nPART I - History of Evolution\n\n\nThe early days\n\nJavaScript was born in 1995\nA \"toy\" language for the browser, inspired by the Java syntax\nGoal: make web pages more dynamic by adding interaction with the user\nIt gives access to the DOM (the Document Object Model) to manipulate by program an HTML page\n\n\n\nThe bad and the good parts\n2 kinds of problems with JavaScript...\nProblem #1: the language itself has a lot of \"quirks\"\n\n\nProblem #2: The DOM API is not consistent, each browser has its own implementation.\nA lot of browser compatibility problems:\n\nno standard (Internet Explorer vs Netscape Navigator) \nExample: DHTML VS. layers\n\n\n\n2004: the AJAX revolution\n\nWith AJAX, it's possible to fetch piece of data without refreshing the whole page\nUsing AJAX, rich web applications were made possible\n\n\n\nGmail example\n\nA free webmail without ad, with a lot storage space\nA great User eXperience (for example: autocompletion to select a recipient when composing a new mail)\n\n\n\n\nThe war of libraries\n\n\n\nLibrary\nReleased\nLogo\n\n\n\n\nPrototype\n2005\n\n\n\nDojo\n2005\n\n\n\njQuery\n2006\n\n\n\nYUI\n2006\n\n\n\nMootools\n2007\n\n\n\n\n\n\nAnd the winner was... jQuery\nFrom jQuery website, in 2006:\n\njQuery is designed to change the way that you write Javascript. jQuery works in Internet Explorer 5.5+, Firefox 1.0+, Safari 1.3+, and Opera 8.5+.\n\n\n\n3 things that make jQuery great:\n\nA nice and consistent API that makes the DOM manipulation easy. Everything  starts with CSS selectors $('.my-input')\n\nAn API that handles the browser quirks\nAn eco-system of plugins that all implement the same pattern\n\n$('.my-input').datePicker(options)\n\n\n\nThe era of jQuery \"plugins\"\n\njQuery almost became a standard: a lot of web sites and application include jQuery\nThere were plugins for everything:\n\n\na date time picker\nan autocomplete field\na picture slider (\"carousel\")\n\n\n\n\n\nThe problem with jQuery\nPattern: \n* STEP 1: a page is rendered server-side (using PHP, ASP, JSP...)\n* STEP 2: a jQuery plugin is used to add a feature, JavaScript is used to re-render small parts in the page\nYou end up rendering things in both the server (the initial rendering) and the client... duplicated code!\n\n\nThe rise of Single Page Applications (SPA)\n\nWhy a SPA?\n\nBuild the html only on the client, not on the server\nMake things decoupled: REST API vs Web client\n\n\n\nFrameworks to build SPA\n\n\n\nLibrary\nReleased\nComments\nLogo\n\n\n\n\nBackbone\n2010\nBased on the model\u2013view\u2013presenter application design paradigm\n\n\n\nAngularJS\n2010\nWhat HTML would have been, had it been designed for building web-apps.\n\n\n\nEmber\n2011\n\"A framework for creating ambitious web applications.\" Inspired by Ruby on Rails\n\n\n\nReact\n2013\n\"A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES\"\n\n\n\n\n\n\nPART II - JavaScript in 2017 - The big picture\n\n\nJavaScript has improved!\n\nVanilla JavaScript\nBrowsers have improved and respect the standards better than before: you can use the native DOM API instead of jQuery.\nSee You might not need jQuery\n\n\nES6\nThe language itself evolved.\nES6 features are inspired by patterns seen on other languages like Ruby or Python.\n\nNative Promises\nArrow function\nDestructuring\n\nconst { size, speed} = options\nconst fn = x => x * x\n\nYou need a transpiler to convert ES6 code into traditional JavaScript code that the browser can read.\nBabel is the most popular transpiler.\n\n\nJavaScript is everywhere\n\nIn the browser of course! Chrome DevTools is a great tool to debug JS code.\nIn Desktop applications: Electron\n\nIn Mobile applications: React Native\n\nIn the server side node.js\n\nIn the tooling chain (tools to build applications: compile template, build and minify assets...)\n\n\n\nPackage manager: the success of npm\n\n\nnpm is by far the most popular package manager\n\nBower is no more used\n\nNumbers from http://www.modulecounts.com/\n\n\n\nThe building tools\nNo standard for modules in the browser\nYou need a tool to bundle the libraries coming from npm\n\nWebpack\nBrowserify\nRollup\nFuzebox\n\n\n\nPART III - Which framework to choose?\n\n\n2 different approaches\n\n\nFull frameworks that include all features to create a modern web application (routing, data fetching, state management).\n\n\nAngular\nEmber\nAurelia \n\n\nLighter solutions that focus on the view layer\n\n\nReact\nVue \n\n\n\n\n\nThe 3 main contenders\n\nAngular 2\nReact\nVue.JS\n\n\n\nAngular 2\n\n\n\nFull framework: you have to do things the \"Angular way\", high learning curve\nTemplates look like regular HTML, enhanced by \"directives\"\nThe killer feature: \"2-way data binding\" (input and model are synchronised)\nTransition from Angular 1 to Angular 2 is not so easy, a lot of things changed\n\n\nStrong points\n\nBig community\nWritten in TypeScript... developers familiar with typed languages (C#, Java) may love it!\nThe eco-system includes 2 popular mobile frameworks\n\n\nIonic\nNativeScript\n\n\n\n\n\nReact\n\n\nA lighter approach: only the view layer\nFor big applications, you need to add a state management solution (the most popular one is Redux)\nComponent approach: your application is a tree of nested components\nUses a \"Virtual DOM\" algorithm to make renderings fast\nNo \"2-way data binding\" but uni directional data flow: from top to bottom\nTemplates are written in JSX (JavaScript with HTML tags inside)\n\n\nStrong points:\n\nFunctional approach, everything is a function, Higher-Order Functions to enhance components\nSome people don't like JSX\nBig eco-system (React components for everything: chars, forms, maps...)\n\nReact Native is built on top of React\n\nconst TodoList = ({ items }) => items.map(\n  item => <TodoItem item={item} />\n)\n\n\n\nVue.js\n\n\nThe hottest project in 2016! (see results from JavaScript Rising Stars 2016)\nUsed in production by major Chinese companies like Alibaba and Baidu\nHTML-based template engine\nVue.js took the best of React (the component approach, the Virtual DOM) and Angular 1 (templates are html code enhanced by the framework features)\n\n\n\nStrong points\n\nSimplicity (the easiest of the modern JavaScript frameworks to work with)\nGreat documentation\nEasy to start with a simple script tag in an HTML page, no building process required\nPowerful features (like computed properties)\nOfficial add-ons\n\n\n vue-router: router for SPAs\n vuex state management\n\n\n\n\n\nVue.js killer feature\nSingle File Components: template + logic + style in one .vue file\n\n<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n\n<style>\n.example {\n  font-weight: bold;\n}\n</style>\n\n\n\nOther contenders to mention\n\nPreact\nInferno\nAurelia\nChoo\nRiot\nSvelte\n\n\n\nTHE END\nThank you!\nDiscussion: \n  * Which framework do you use?\n  * Which framework do you want to learn?\n# JavaScript and Web Development in 2017\n\nA talk about the history, the evolution and the latest trends in the JavaScript world.\n\nThese slides are online: http://js2017.surge.sh/\n\nSaturday, February 18, 2017\n: [Kansai Developers & Designers meetup event](https://www.meetup.com/Osaka-Web-Designers-and-Developers-Meetup/events/235750563/?rv=me1&_af=event&_af_eid=235750563&https=on)\n\n---\n\nA presentation by [Michael Rambeau](http://michaelrambeau.com/)\n\nCreator of:\n\n* [bestof.js.org](http://bestof.js.org/): the best of JavaScript, HTML, CSS...\n* [Rising Stars 2016](https://risingstars2016.js.org/): an article about 2016 trends, available in Japanese\n\n![image](https://cloud.githubusercontent.com/assets/5546996/21958450/fceccf32-daf1-11e6-8913-a0fce9c4e7bf.png)\n\n\n---\n\n## PART I - History of Evolution\n\n---\n\n### The early days\n\n* JavaScript was born in 1995\n* A \"toy\" language for the browser, inspired by the Java syntax\n* Goal: make web pages more dynamic by adding interaction with the user\n* It gives access to the DOM (the Document Object Model) to manipulate by program an HTML page\n\n---\n\n### The bad and the good parts\n\n2 kinds of problems with JavaScript...\n\nProblem #1: the language itself has a lot of \"quirks\"\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/72726/8ac2df24-01ab-2793-a0d8-8b6e6acb904f.png)\n\n---\n\nProblem #2: The DOM API is not consistent, each browser has its own implementation.\n\nA lot of browser compatibility problems:\n\n* no standard (Internet Explorer vs Netscape Navigator) \n* Example: DHTML VS. layers\n\n---\n\n### 2004: the AJAX revolution\n\n* With AJAX, it's possible to fetch piece of data without refreshing the whole page\n* Using AJAX, rich web applications were made possible\n\n---\n\n#### Gmail example\n\n* A free webmail without ad, with a lot storage space\n* A great User eXperience (for example: autocompletion to select a recipient when composing a new mail)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/72726/3a08f760-56a9-3a16-32a0-d328dd66b15d.png)\n\n---\n\n### The war of libraries\n\nLibrary | Released | Logo\n--- | --- | ---\n[Prototype](http://prototypejs.org/) | 2005 | ![image](https://qiita-image-store.s3.amazonaws.com/0/72726/f2c5b4aa-f141-4240-cc08-3f67ea0b00f8.png)\n[Dojo](http://dojotoolkit.org) | 2005 | ![image](https://qiita-image-store.s3.amazonaws.com/0/72726/e228321d-a898-ff3a-c23a-eec410cf0e9e.png)\n[jQuery](https://jquery.com/) | 2006 | ![image](https://qiita-image-store.s3.amazonaws.com/0/72726/48d45e29-fec7-441d-0b71-c84d62157272.png)\n[YUI](https://yuilibrary.com/) | 2006 | ![image](https://qiita-image-store.s3.amazonaws.com/0/72726/0831c1ff-7b1d-4a27-8879-24784349c151.png)\n[Mootools](https://mootools.net/) | 2007 | ![image](https://qiita-image-store.s3.amazonaws.com/0/72726/31dbd472-9da0-0917-d461-80b8d4f320f6.png)\n\n---\n\n### And the winner was... jQuery\n\nFrom jQuery website, in 2006:\n\n> jQuery is designed to change the way that you write Javascript. jQuery works in Internet Explorer 5.5+, Firefox 1.0+, Safari 1.3+, and Opera 8.5+.\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/72726/9e2f58de-80ef-fb9b-1528-172ddb7365f9.png)\n\n\n---\n\n3 things that make jQuery great:\n\n* A nice and consistent API that makes the DOM manipulation easy. Everything  starts with CSS selectors `$('.my-input')`\n* An API that handles the browser quirks\n* An eco-system of plugins that all implement the **same** pattern\n\n\n```js\n$('.my-input').datePicker(options)\n```\n\n---\n\n### The era of jQuery \"plugins\"\n\n* jQuery almost became a standard: a lot of web sites and application include jQuery\n* There were plugins for everything:\n  * a date time picker\n  * an autocomplete field\n  * a picture slider (\"carousel\")\n\n---\n\n### The problem with jQuery\n\nPattern: \n* STEP 1: a page is rendered server-side (using PHP, ASP, JSP...)\n* STEP 2: a jQuery plugin is used to add a feature, JavaScript is used to re-render small parts in the page\n\nYou end up rendering things in both the server (the initial rendering) and the client... duplicated code!\n\n---\n\n### The rise of Single Page Applications (SPA)\n\n#### Why a SPA?\n\n* Build the html **only** on the client, not on the server\n* Make things decoupled: REST API vs Web client\n\n\n---\n\n### Frameworks to build SPA\n\nLibrary | Released | Comments | Logo\n--- | --- | --- | ---\n[Backbone]() | 2010 | Based on the model\u2013view\u2013presenter application design paradigm | ![image](https://qiita-image-store.s3.amazonaws.com/0/72726/6eb76283-f8fe-598e-6cdb-363f4511b6e0.png)\n[AngularJS](https://angularjs.org/) | 2010 | What HTML would have been, had it been designed for building web-apps. | ![image](https://qiita-image-store.s3.amazonaws.com/0/72726/5b5c5b0c-cd5e-3755-5a85-01fdd6ecb01d.png)\n[Ember](http://emberjs.com/) | 2011 | \"A framework for creating ambitious web applications.\" Inspired by Ruby on Rails | ![image](https://qiita-image-store.s3.amazonaws.com/0/72726/c1de7204-95f3-14eb-8e0f-c429d60d22ae.png)\n[React]() | 2013 | \"A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES\" |![image](https://qiita-image-store.s3.amazonaws.com/0/72726/432f8cae-d448-a888-d450-ab8bd87d301b.png)\n\n---\n\n## PART II - JavaScript in 2017 - The big picture\n\n---\n\n### JavaScript has improved!\n\n#### Vanilla JavaScript\n\nBrowsers have improved and respect the standards better than before: you can use the native DOM API instead of jQuery.\nSee [You might not need jQuery](http://youmightnotneedjquery.com/)\n\n---\n\n#### ES6\n\nThe language itself evolved.\n\nES6 features are inspired by patterns seen on other languages like Ruby or Python.\n\n* Native Promises\n* Arrow function\n* Destructuring\n\n```js\nconst { size, speed} = options\nconst fn = x => x * x\n```\n\nYou need a **transpiler** to convert ES6 code into traditional JavaScript code that the browser can read.\n\n[Babel](http://babeljs.io) is the most popular transpiler.\n\n---\n\n### JavaScript is everywhere\n\n* In the browser of course! Chrome DevTools is a great tool to debug JS code.\n* In Desktop applications: [Electron](http://electron.atom.io/)\n* In Mobile applications: [React Native](http://facebook.github.io/react-native/)\n* In the server side [node.js](https://nodejs.org/en/)\n* In the tooling chain (tools to build applications: compile template, build and minify assets...)\n\n---\n\n### Package manager: the success of npm\n\n* [npm](https://www.npmjs.com/) is by far the most popular package manager\n* [Bower](https://bower.io/) is no more used\n\nNumbers from http://www.modulecounts.com/\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/72726/77c9d41f-fd07-9e34-d1b5-a1e0c23db4b7.png)\n\n---\n\n### The building tools\n\nNo standard for modules in the browser\nYou need a tool to **bundle** the libraries coming from npm\n\n* [Webpack](https://webpack.js.org/)\n* [Browserify](http://browserify.org/)\n* [Rollup](http://rollupjs.org/)\n* [Fuzebox](http://fuse-box.org/)\n\n---\n\n## PART III - Which framework to choose?\n\n---\n\n### 2 different approaches\n\n* **Full** frameworks that include all features to create a modern web application (routing, data fetching, state management).\n  * Angular\n  * Ember\n  * Aurelia \n* Lighter solutions that focus on the **view** layer\n  * React\n  * Vue \n\n---\n\n### The 3 main contenders\n\n* Angular 2\n* React\n* Vue.JS\n\n---\n\n### Angular 2\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/72726/79595095-7a60-d244-ddfd-374aafe17b0f.png)\n\n* **Full** framework: you have to do things the \"Angular way\", high learning curve\n* Templates look like regular HTML, enhanced by \"directives\"\n* The killer feature: \"2-way data binding\" (input and model are synchronised)\n* Transition from Angular 1 to Angular 2 is not so easy, a lot of things changed\n\n---\n\nStrong points\n\n* Big community\n* Written in TypeScript... developers familiar with typed languages (C#, Java) may love it!\n* The eco-system includes 2 popular mobile frameworks\n  * [Ionic](http://ionicframework.com/)\n  * [NativeScript](http://www.nativescript.org/)\n\n---\n\n### React\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/72726/ca85cc87-71cc-ff5c-d2ed-0a89ad4aa666.png)\n\n* A lighter approach: only the view layer\n* For big applications, you need to add a state management solution (the most popular one is [Redux](http://redux.js.org/))\n* Component approach: your application is a tree of nested components\n* Uses a \"Virtual DOM\" algorithm to make renderings fast\n* No \"2-way data binding\" but uni directional data flow: from top to bottom\n* Templates are written in JSX (JavaScript with HTML tags inside)\n\n\n---\n\nStrong points:\n\n* Functional approach, everything is a function, Higher-Order Functions to enhance components\n* Some people don't like JSX\n* Big eco-system (React components for everything: chars, forms, maps...)\n* [React Native](http://facebook.github.io/react-native/) is built on top of React\n\n```js\nconst TodoList = ({ items }) => items.map(\n  item => <TodoItem item={item} />\n)\n```\n\n---\n\n### Vue.js\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/72726/7d170f74-7aa8-5787-c880-784dd8028173.png)\n\n* The hottest project in 2016! (see results from [JavaScript Rising Stars 2016](https://risingstars2016.js.org/))\n* Used in production by major Chinese companies like Alibaba and Baidu\n* HTML-based template engine\n* Vue.js took the best of React (the component approach, the Virtual DOM) and Angular 1 (templates are html code enhanced by the framework features)\n\n---\n\n#### Strong points\n\n* Simplicity (the easiest of the modern JavaScript frameworks to work with)\n* Great documentation\n* Easy to start with a simple `script` tag in an HTML page, no building process required\n* Powerful features (like computed properties)\n* Official add-ons\n    *  [vue-router](http://router.vuejs.org/): router for SPAs\n    *  [vuex](https://vuex.vuejs.org/) state management\n\n---\n\n#### Vue.js killer feature\n\nSingle File Components: template + logic + style in one `.vue` file\n\n```html\n\n<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n \n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n \n<style>\n.example {\n  font-weight: bold;\n}\n</style>\n```\n\n---\n\n### Other contenders to mention\n\n* [Preact](https://preactjs.com/)\n* [Inferno](http://infernojs.org/)\n* [Aurelia](http://www.aurelia.io/)\n* [Choo](https://choo.io/)\n* [Riot](http://riotjs.com/)\n* [Svelte](https://svelte.technology/)\n\n---\n\n### THE END\n\nThank you!\n\nDiscussion: \n  * Which framework do you use?\n  * Which framework do you want to learn?\n\n", "tags": ["JavaScript", "vue.js", "reactjs", "jQuery", "AngularJS"]}