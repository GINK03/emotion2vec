{"context": " More than 1 year has passed since last update.\u53c2\u8003\uff1ahttp://www.grotan.com/ldap/python-ldap-samples.html\n\nldap_client.py\n#!/usr/bin/python\n# -*- encoding=utf8 -*-\n\nimport ldap\nfrom   ldap   import modlist\n\n#----------------------------------------------------------\n# LdapClient\n#----------------------------------------------------------\nclass LdapClient(object):\n\n    #----------------------------------------------------------\n    # INIT\n    #----------------------------------------------------------\n    def __init__(self, ldap_host, ldap_base_dn, ldap_manager_password):\n\n        self.ldap_base_dn       = ldap_base_dn\n        self.ldap_manager_dn    = 'cn=Manager,%s' % ldap_base_dn\n        self.ldap               = ldap.initialize(ldap_host)\n        self.ldap.simple_bind_s(self.ldap_manager_dn, ldap_manager_password)\n\n    #----------------------------------------------------------\n    # SEARCH\n    #----------------------------------------------------------\n    def search_group(self, ldap_search_name):\n\n        ldap_search_dn = 'ou=Group,%s'  % self.ldap_base_dn\n        ldap_search_cn = 'cn=%s'        % ldap_search_name\n\n        return self._search(ldap_search_dn, ldap_search_cn)\n\n    def search_people(self, ldap_search_name):\n\n        ldap_search_dn = 'ou=People,%s' % self.ldap_base_dn\n        ldap_search_cn = 'uid=%s'       % ldap_search_name\n\n        return self._search(ldap_search_dn, ldap_search_cn)\n\n    def _search(self, ldap_search_dn, ldap_search_cn):\n\n        row_ldif_list = self.ldap.search_s(ldap_search_dn,\n                                           ldap.SCOPE_SUBTREE,\n                                           ldap_search_cn,\n                                           None)\n\n        now_ldif_dict = {}\n\n        for dn, entry in row_ldif_list:\n            for _key, _value in entry.items():\n                if _key != 'objectClass' :\n                    now_ldif_dict[_key] =  _value[0]\n\n            yield (dn, now_ldif_dict)\n\n    #----------------------------------------------------------\n    # ADD\n    #----------------------------------------------------------\n    def add_group(self, **keywords):\n\n        keywords['objectclass'] = ['posixGroup', 'top']\n        ldap_gropu_dn           = 'cn=%s,ou=Group,%s' % (keywords['cn'], self.ldap_base_dn)\n        ldap_group_ldif         = modlist.addModlist(keywords)\n\n        return self._add(ldap_gropu_dn, ldap_group_ldif)\n\n    def add_people(self, **keywords):\n\n        keywords['objectclass'] = ['account', 'posixAccount', 'top', 'shadowAccount']\n        ldap_people_dn          = 'uid=%s,ou=People,%s' % (keywords['cn'], self.ldap_base_dn)\n        ldap_people_ldif        = modlist.addModlist(keywords)\n\n        return self._add(ldap_people_dn, ldap_people_ldif)\n\n    def _add(self, dn, ldif):\n\n        try :\n            self.ldap.add_s(dn, ldif)\n            return (0, dn)\n\n        except ldap.ALREADY_EXISTS:\n            return (1, 'already exists %s' % dn)\n\n    #----------------------------------------------------------\n    # DELETE\n    #----------------------------------------------------------\n    def delete_people(self, delete_name):\n\n        ldap_delete_dn  = 'uid=%s,ou=People,%s' % (delete_name, self.ldap_base_dn)\n\n        return self._delete(ldap_delete_dn)\n\n    def delete_group(self, delete_name):\n\n        ldap_delete_dn = 'cn=%s,ou=Group,%s'    % (delete_name, self.ldap_base_dn)\n\n        return self._delete(ldap_delete_dn)\n\n    def _delete(self, delete_dn):\n        try :\n            self.ldap.delete_s(delete_dn)\n            return (0, delete_dn)\n\n        except ldap.NO_SUCH_OBJECT, e:\n            return (1, 'no such object %s' % delete_dn)\n\n    #----------------------------------------------------------\n    # MODIFY\n    #----------------------------------------------------------\n    def modify_people(self, name, change_ldif_dict):\n\n        dn, now_ldif_dict = self.search_people(name).next()\n\n        return self._modify(dn, now_ldif_dict, change_ldif_dict)\n\n\n    def modify_group(self, name, change_ldif_dict):\n\n        dn, now_ldif_dict = self.search_group(name).next()\n\n        return self._modify(dn, now_ldif_dict, change_ldif_dict)\n\n\n    def _modify(self, dn, now_ldif_dict, change_ldif_dict):\n\n        new_ldif_dict = {}\n        old_ldif_dict = {}\n\n        for _key, _value in change_ldif_dict.items():\n            if now_ldif_dict.has_key(_key):\n                old_ldif_dict[_key] = now_ldif_dict[_key]\n                new_ldif_dict[_key] = _value\n\n        try :\n            ldif = modlist.modifyModlist(old_ldif_dict, new_ldif_dict)\n            self.ldap.modify_s(dn, ldif)\n            return (0, dn, '%s > %s'  % (str(old_ldif_dict), str(new_ldif_dict)))\n\n        except Exception, e:\n            return (1, dn, e)\n\n#----------------------------------------------------------\n# SSHA python seeded salted sha password\n# http://www.openldap.org/faq/data/cache/347.html\n# > challenge_password = makeSecret('testing123')\n# > checkPassword(challenge_password, 'testing123')\n#----------------------------------------------------------\nimport os\nimport hashlib\nfrom base64 import encodestring as encode\nfrom base64 import decodestring as decode\n\ndef makeSecret(password):\n    salt = os.urandom(4)\n    h = hashlib.sha1(password)\n    h.update(salt)\n    return \"{SSHA}\" + encode(h.digest() + salt)\n\ndef checkPassword(challenge_password, password):\n    challenge_bytes = decode(challenge_password[6:])\n    digest = challenge_bytes[:20]\n    salt = challenge_bytes[20:]\n    hr = hashlib.sha1(password)\n    hr.update(salt)\n    return digest == hr.digest()\n\n#----------------------------------------------------------\n# TEST\n#----------------------------------------------------------\ndef test():\n\n\n    _LDAP_HOST      = 'ldap://192.168.1.11'\n    _MANAGER_PASS   = 'xxxxxxxx'\n    _BASE_DN        = 'dc=example,dc=com'\n\n    a = LdapClient(_LDAP_HOST, _BASE_DN, _MANAGER_PASS)\n\n    test_people(a)\n    test_group(a)\n\ndef test_people(a):\n\n    name      = 'user01'\n    user_dict = { 'uid'           : name              ,\n                  'cn'            : name              ,\n                  'userPassword'  : makeSecret('pass'),\n                  'uidNumber'     : '500'             ,\n                  'gidNumber'     : '500'             ,\n                  'homeDirectory' : '/home/hoge'      ,\n                  'loginShell'    : '/bin/sh'         ,\n                  'description'   : 'Description'     }\n\n    print '\\n#=== PEOPLE' + '=' * 80\n    print '\\n#------ SEARCH' + '-' * 80\n    for i in a.search_people('*'):\n        print '  %s' % i[0]\n\n    print '\\n#------ ADD' + '-' * 80\n    print a.add_people(**user_dict)\n\n    print '\\n#------ MODIFY' + '-' * 80\n    print a.modify_people(name, {'gidNumber':'1001'})\n\n    print '\\n#------ MODIFY' + '-' * 80\n    print a.modify_people(name, {'userPassword': makeSecret('abc123')})\n\n    print '\\n#------ SEARCH' + '-' * 80\n    for i in a.search_people('*'):\n        print '  %s' % i[0]\n\n    print '\\n#------ DELETE' + '-' * 80\n    print a.delete_people(name)\n\ndef test_group(a):\n\n    name       = 'group01'\n    group_dict = { 'cn'         : name   ,\n                   'gidNumber'  : '9999' ,}\n\n    print '\\n#=== GROUP' + '=' * 80\n    print '\\n#------ SEARCH' + '-' * 80\n    for i in a.search_group('*'):\n        print '  %s' % i[0]\n\n    print '\\n#------ ADD' + '-' * 80\n    print a.add_group(**group_dict)\n\n    print '\\n#------ MODIFY' + '-' * 80\n    print a.modify_group(name, {'gidNumber':'1001'})\n\n    print '\\n#------ SEARCH' + '-' * 80\n    for i in a.search_group('*'):\n        print '  %s' % i[0]\n\n    print '\\n#------ DELETE' + '-' * 80\n    print a.delete_group(name)\n\nif __name__ == '__main__' : test()\n\n\n\n\u7d50\u679c\n#=== PEOPLE================================================================================\n\n#------ SEARCH--------------------------------------------------------------------------------\n  uid=testuser,ou=People,dc=example,dc=com\n\n#------ ADD--------------------------------------------------------------------------------\n(0, 'uid=user01,ou=People,dc=example,dc=com')\n\n#------ MODIFY--------------------------------------------------------------------------------\n(0, 'uid=user01,ou=People,dc=example,dc=com', \"{'gidNumber': '500'} > {'gidNumber': '1001'}\")\n\n#------ MODIFY--------------------------------------------------------------------------------\n(0, 'uid=user01,ou=People,dc=example,dc=com', \"{'userPassword': '{SSHA}3kXMTM_X5Clv1KZIAQ9vcsUZ6mswW48Q'} > {'userPassword': '{SSHA}YEVxhhsIT3OedWqlrgjQXReAeznLSiHV'}\")\n\n#------ SEARCH--------------------------------------------------------------------------------\n  uid=testuser,ou=People,dc=example,dc=com\n  uid=user01,ou=People,dc=example,dc=com\n\n#------ DELETE--------------------------------------------------------------------------------\n(0, 'uid=user01,ou=People,dc=example,dc=com')\n\n#=== GROUP================================================================================\n\n#------ SEARCH--------------------------------------------------------------------------------\n  cn=testuser,ou=Group,dc=example,dc=com\n\n#------ ADD--------------------------------------------------------------------------------\n(0, 'cn=group01,ou=Group,dc=example,dc=com')\n\n#------ MODIFY--------------------------------------------------------------------------------\n(0, 'cn=group01,ou=Group,dc=example,dc=com', \"{'gidNumber': '9999'} > {'gidNumber': '1001'}\")\n\n#------ SEARCH--------------------------------------------------------------------------------\n  cn=testuser,ou=Group,dc=example,dc=com\n  cn=group01,ou=Group,dc=example,dc=com\n\n#------ DELETE--------------------------------------------------------------------------------\n(0, 'cn=group01,ou=Group,dc=example,dc=com')\n\n\n\u53c2\u8003\uff1ahttp://www.grotan.com/ldap/python-ldap-samples.html\n\n```py:ldap_client.py\n#!/usr/bin/python\n# -*- encoding=utf8 -*-\n\nimport ldap\nfrom   ldap   import modlist\n\n#----------------------------------------------------------\n# LdapClient\n#----------------------------------------------------------\nclass LdapClient(object):\n\n    #----------------------------------------------------------\n    # INIT\n    #----------------------------------------------------------\n    def __init__(self, ldap_host, ldap_base_dn, ldap_manager_password):\n\n        self.ldap_base_dn       = ldap_base_dn\n        self.ldap_manager_dn    = 'cn=Manager,%s' % ldap_base_dn\n        self.ldap               = ldap.initialize(ldap_host)\n        self.ldap.simple_bind_s(self.ldap_manager_dn, ldap_manager_password)\n\n    #----------------------------------------------------------\n    # SEARCH\n    #----------------------------------------------------------\n    def search_group(self, ldap_search_name):\n\n        ldap_search_dn = 'ou=Group,%s'  % self.ldap_base_dn\n        ldap_search_cn = 'cn=%s'        % ldap_search_name\n\n        return self._search(ldap_search_dn, ldap_search_cn)\n\n    def search_people(self, ldap_search_name):\n\n        ldap_search_dn = 'ou=People,%s' % self.ldap_base_dn\n        ldap_search_cn = 'uid=%s'       % ldap_search_name\n\n        return self._search(ldap_search_dn, ldap_search_cn)\n\n    def _search(self, ldap_search_dn, ldap_search_cn):\n\n        row_ldif_list = self.ldap.search_s(ldap_search_dn,\n                                           ldap.SCOPE_SUBTREE,\n                                           ldap_search_cn,\n                                           None)\n\n        now_ldif_dict = {}\n\n        for dn, entry in row_ldif_list:\n            for _key, _value in entry.items():\n                if _key != 'objectClass' :\n                    now_ldif_dict[_key] =  _value[0]\n\n            yield (dn, now_ldif_dict)\n\n    #----------------------------------------------------------\n    # ADD\n    #----------------------------------------------------------\n    def add_group(self, **keywords):\n\n        keywords['objectclass'] = ['posixGroup', 'top']\n        ldap_gropu_dn           = 'cn=%s,ou=Group,%s' % (keywords['cn'], self.ldap_base_dn)\n        ldap_group_ldif         = modlist.addModlist(keywords)\n\n        return self._add(ldap_gropu_dn, ldap_group_ldif)\n\n    def add_people(self, **keywords):\n\n        keywords['objectclass'] = ['account', 'posixAccount', 'top', 'shadowAccount']\n        ldap_people_dn          = 'uid=%s,ou=People,%s' % (keywords['cn'], self.ldap_base_dn)\n        ldap_people_ldif        = modlist.addModlist(keywords)\n\n        return self._add(ldap_people_dn, ldap_people_ldif)\n\n    def _add(self, dn, ldif):\n\n        try :\n            self.ldap.add_s(dn, ldif)\n            return (0, dn)\n\n        except ldap.ALREADY_EXISTS:\n            return (1, 'already exists %s' % dn)\n\n    #----------------------------------------------------------\n    # DELETE\n    #----------------------------------------------------------\n    def delete_people(self, delete_name):\n\n        ldap_delete_dn  = 'uid=%s,ou=People,%s' % (delete_name, self.ldap_base_dn)\n\n        return self._delete(ldap_delete_dn)\n\n    def delete_group(self, delete_name):\n\n        ldap_delete_dn = 'cn=%s,ou=Group,%s'    % (delete_name, self.ldap_base_dn)\n\n        return self._delete(ldap_delete_dn)\n\n    def _delete(self, delete_dn):\n        try :\n            self.ldap.delete_s(delete_dn)\n            return (0, delete_dn)\n\n        except ldap.NO_SUCH_OBJECT, e:\n            return (1, 'no such object %s' % delete_dn)\n\n    #----------------------------------------------------------\n    # MODIFY\n    #----------------------------------------------------------\n    def modify_people(self, name, change_ldif_dict):\n\n        dn, now_ldif_dict = self.search_people(name).next()\n\n        return self._modify(dn, now_ldif_dict, change_ldif_dict)\n\n\n    def modify_group(self, name, change_ldif_dict):\n\n        dn, now_ldif_dict = self.search_group(name).next()\n\n        return self._modify(dn, now_ldif_dict, change_ldif_dict)\n\n\n    def _modify(self, dn, now_ldif_dict, change_ldif_dict):\n\n        new_ldif_dict = {}\n        old_ldif_dict = {}\n\n        for _key, _value in change_ldif_dict.items():\n            if now_ldif_dict.has_key(_key):\n                old_ldif_dict[_key] = now_ldif_dict[_key]\n                new_ldif_dict[_key] = _value\n\n        try :\n            ldif = modlist.modifyModlist(old_ldif_dict, new_ldif_dict)\n            self.ldap.modify_s(dn, ldif)\n            return (0, dn, '%s > %s'  % (str(old_ldif_dict), str(new_ldif_dict)))\n\n        except Exception, e:\n            return (1, dn, e)\n\n#----------------------------------------------------------\n# SSHA python seeded salted sha password\n# http://www.openldap.org/faq/data/cache/347.html\n# > challenge_password = makeSecret('testing123')\n# > checkPassword(challenge_password, 'testing123')\n#----------------------------------------------------------\nimport os\nimport hashlib\nfrom base64 import encodestring as encode\nfrom base64 import decodestring as decode\n\ndef makeSecret(password):\n    salt = os.urandom(4)\n    h = hashlib.sha1(password)\n    h.update(salt)\n    return \"{SSHA}\" + encode(h.digest() + salt)\n\ndef checkPassword(challenge_password, password):\n    challenge_bytes = decode(challenge_password[6:])\n    digest = challenge_bytes[:20]\n    salt = challenge_bytes[20:]\n    hr = hashlib.sha1(password)\n    hr.update(salt)\n    return digest == hr.digest()\n\n#----------------------------------------------------------\n# TEST\n#----------------------------------------------------------\ndef test():\n\n\n    _LDAP_HOST      = 'ldap://192.168.1.11'\n    _MANAGER_PASS   = 'xxxxxxxx'\n    _BASE_DN        = 'dc=example,dc=com'\n\n    a = LdapClient(_LDAP_HOST, _BASE_DN, _MANAGER_PASS)\n\n    test_people(a)\n    test_group(a)\n\ndef test_people(a):\n\n    name      = 'user01'\n    user_dict = { 'uid'           : name              ,\n                  'cn'            : name              ,\n                  'userPassword'  : makeSecret('pass'),\n                  'uidNumber'     : '500'             ,\n                  'gidNumber'     : '500'             ,\n                  'homeDirectory' : '/home/hoge'      ,\n                  'loginShell'    : '/bin/sh'         ,\n                  'description'   : 'Description'     }\n\n    print '\\n#=== PEOPLE' + '=' * 80\n    print '\\n#------ SEARCH' + '-' * 80\n    for i in a.search_people('*'):\n        print '  %s' % i[0]\n\n    print '\\n#------ ADD' + '-' * 80\n    print a.add_people(**user_dict)\n\n    print '\\n#------ MODIFY' + '-' * 80\n    print a.modify_people(name, {'gidNumber':'1001'})\n\n    print '\\n#------ MODIFY' + '-' * 80\n    print a.modify_people(name, {'userPassword': makeSecret('abc123')})\n\n    print '\\n#------ SEARCH' + '-' * 80\n    for i in a.search_people('*'):\n        print '  %s' % i[0]\n\n    print '\\n#------ DELETE' + '-' * 80\n    print a.delete_people(name)\n\ndef test_group(a):\n\n    name       = 'group01'\n    group_dict = { 'cn'         : name   ,\n                   'gidNumber'  : '9999' ,}\n\n    print '\\n#=== GROUP' + '=' * 80\n    print '\\n#------ SEARCH' + '-' * 80\n    for i in a.search_group('*'):\n        print '  %s' % i[0]\n\n    print '\\n#------ ADD' + '-' * 80\n    print a.add_group(**group_dict)\n\n    print '\\n#------ MODIFY' + '-' * 80\n    print a.modify_group(name, {'gidNumber':'1001'})\n\n    print '\\n#------ SEARCH' + '-' * 80\n    for i in a.search_group('*'):\n        print '  %s' % i[0]\n\n    print '\\n#------ DELETE' + '-' * 80\n    print a.delete_group(name)\n\nif __name__ == '__main__' : test()\n```\n>\u7d50\u679c\n>\n```\n#=== PEOPLE================================================================================\n>\n#------ SEARCH--------------------------------------------------------------------------------\n  uid=testuser,ou=People,dc=example,dc=com\n>\n#------ ADD--------------------------------------------------------------------------------\n(0, 'uid=user01,ou=People,dc=example,dc=com')\n>\n#------ MODIFY--------------------------------------------------------------------------------\n(0, 'uid=user01,ou=People,dc=example,dc=com', \"{'gidNumber': '500'} > {'gidNumber': '1001'}\")\n>\n#------ MODIFY--------------------------------------------------------------------------------\n(0, 'uid=user01,ou=People,dc=example,dc=com', \"{'userPassword': '{SSHA}3kXMTM_X5Clv1KZIAQ9vcsUZ6mswW48Q'} > {'userPassword': '{SSHA}YEVxhhsIT3OedWqlrgjQXReAeznLSiHV'}\")\n>\n#------ SEARCH--------------------------------------------------------------------------------\n  uid=testuser,ou=People,dc=example,dc=com\n  uid=user01,ou=People,dc=example,dc=com\n>\n#------ DELETE--------------------------------------------------------------------------------\n(0, 'uid=user01,ou=People,dc=example,dc=com')\n>\n#=== GROUP================================================================================\n>\n#------ SEARCH--------------------------------------------------------------------------------\n  cn=testuser,ou=Group,dc=example,dc=com\n>\n#------ ADD--------------------------------------------------------------------------------\n(0, 'cn=group01,ou=Group,dc=example,dc=com')\n>\n#------ MODIFY--------------------------------------------------------------------------------\n(0, 'cn=group01,ou=Group,dc=example,dc=com', \"{'gidNumber': '9999'} > {'gidNumber': '1001'}\")\n>\n#------ SEARCH--------------------------------------------------------------------------------\n  cn=testuser,ou=Group,dc=example,dc=com\n  cn=group01,ou=Group,dc=example,dc=com\n>\n#------ DELETE--------------------------------------------------------------------------------\n(0, 'cn=group01,ou=Group,dc=example,dc=com')\n```", "tags": ["Python2.7", "openldap2.4.23", "CentOS6.4"]}