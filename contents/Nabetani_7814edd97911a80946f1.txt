{"context": "\u554f\u984c : http://nabetani.sakura.ne.jp/hena/ordf01_twicel/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 : http://qiita.com/Nabetani/items/8e02ede04315b4eadd6d\n\u307e\u305a\u306f\u3001ruby \u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3002\nWX=WY=8\n\ndef at( m, x, y, t )\n  if t\n    (0...WX)===x && (0...WY)===y ? m[y][x] : nil\n  else\n    at( m, y, x, true )\n  end\nend\n\ndef solve( src )\n  m=src.split(\"/\").map{ |x| x.to_i(16) }\n  r=[0,0]\n  WY.times do |y|\n    WX.times do |x|\n      [true, false].each do |t|\n        c=at( m, x, y, t )\n        if c==at( m, x+1,y, t )\n          r[c]+=1 if [\n            [x-1,y], [x+2,y], [x,y-1], [x,y+1], [x+1,y-1], [x+1,y+1]\n          ].all?{ |pos| at(m, *pos, t)!=c }\n        end\n      end\n    end\n  end\n  r.join(\",\")\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split( /\\s+/ )\n  p src\n  actual = solve( src )\n  ok = actual==expected\n  puts [ num, ( ok ? \"ok\" : \"**NG**\" ), src, actual, expected ].join( \" \" )\n  ok\n}.all?.tap{ |x| p( x ? \"all okay!\" : \"something wrong!!\" ) }\n\n__END__\n0 dc/bc/a7/59/03/d5/d4/ea 2,3\n1 ff/ff/ff/ff/ff/ff/ff/ff 0,0\n2 00/00/00/00/00/00/00/00 0,0\n3 cc/33/cc/33/cc/33/cc/33 16,16\n4 aa/aa/55/55/aa/aa/55/55 16,16\n5 ac/a3/5c/53/ca/3a/c5/35 8,8\n\n\u305d\u3057\u3066\u3001\u4e0a\u8a18\u306e ruby \u3092 C99 \u306b\u79fb\u690d\u3057\u305f\u3082\u306e\uff1a\n\nC99\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\nstruct result\n{\n  int success;\n  int testcount;\n};\n\nenum{ WX=8, WY=8 };\n\nint at( uint64_t m, int x, int y, _Bool t )\n{\n  if ( t ){\n    if ( 0<=x && x<WX && 0<=y && y<WY ){\n      return ( m & (1ULL<<(x+y*8) ) ) ? 1 : 0;\n    } else {\n      return -1;\n    }\n  }\n  return at( m, y, x, 1 );\n}\n\nstruct wb{ int m[2]; };\nstruct xy{ int x, y; };\nconst struct xy P[6] = {\n  {-1, 0},  {2, 0},\n  {0, -1},  {0, 1},\n  {1, -1},  {1, 1},\n};\n\n#define COUNTOF(x) (sizeof(x) / sizeof(*(x)))\nstruct wb solve_impl( uint64_t num )\n{\n  struct wb r={{0}};\n  for( int y=0 ; y<WY ; ++y ){\n    for( int x=0 ; x<WX ; ++x ){\n      for( int t=0 ; t<2 ; ++t ){\n        int c=at( num, x, y, !!t );\n        if ( c==at( num, x+1,y, !!t ) ){\n          _Bool all=1;\n          for( int pos=0 ; pos<COUNTOF(P) ; ++pos ){\n            all = ( all && c!=at( num, x+P[pos].x, y+P[pos].y, !!t ) );\n          }\n          if ( all ){\n            ++r.m[c];\n          }\n        }\n      }\n    }\n  }\n  return r;\n}\n\n// caller should free return value memory.\nchar const * solve( char const * src )\n{\n  uint64_t num=0;\n  for( int i=0 ; i<8 ; ++i ){\n    num*=256;\n    num += strtoul( src+3*i, 0, 16 );\n  }\n  struct wb a = solve_impl( num );\n  char buffer[ 10 ] = {0};\n  sprintf( buffer, \"%d,%d\", a.m[0], a.m[1] );\n  return strdup(buffer);\n}\n\nvoid test_( struct result * r, char const * src, char const * expected )\n{\n  char const * actual = solve( src );\n  int okay = 0==strcmp(actual, expected );\n  if ( okay ){\n    ++r->success;\n  }\n  ++r->testcount;\n  printf( \"%s : %s->%s(%s)\\n\", (okay?\"ok\" : \"**NG**\"), src, actual, expected );\n  free( (void*)actual );\n}\n\nint main(void)\n{\n  struct result r={0};\n  #define test(src, expected) test_( &r, src, expected )\n  /*0*/ test( \"dc/bc/a7/59/03/d5/d4/ea\", \"2,3\" );\n  /*1*/ test( \"ff/ff/ff/ff/ff/ff/ff/ff\", \"0,0\" );\n  /*2*/ test( \"00/00/00/00/00/00/00/00\", \"0,0\" );\n  /*3*/ test( \"cc/33/cc/33/cc/33/cc/33\", \"16,16\" );\n  /*4*/ test( \"aa/aa/55/55/aa/aa/55/55\", \"16,16\" );\n  /*5*/ test( \"ac/a3/5c/53/ca/3a/c5/35\", \"8,8\" );\n  #undef test\n  printf( \"%d / %d\\n\", r.success, r.testcount );\n  return r.testcount==r.success ? 0 : 1;\n}\n\n\n\u5b9f\u88c5\u65b9\u91dd\u306f\u3001\u3044\u304f\u3064\u304b\u3042\u308b\u3051\u3069\n\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\u306a\u3069\u3067\u3001\u9023\u7d50\u3057\u3066\u3044\u308b\u30de\u30b9\u76ee\u306e\u6570\u3092\u6570\u3048\u308b\u3002\n2\u30de\u30b9\u9650\u5b9a\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u6570\u3048\u308b\n\n\u306e\u3069\u3061\u3089\u304b\u306b\u306a\u308b\u3068\u601d\u3046\u3002ciel \u3055\u3093\u306e\u5b9f\u88c5( https://github.com/cielavenir/procon/blob/f807cc5ae792801e452ee94d1f6661e993590668/hena/tyama_henaf01.rb )\u306f\u524d\u8005\u3002\u3053\u308c\u306f\u5f8c\u8005\u306b\u306a\u308b\u3002\n\u3042\u3068\u3001\u7aef\u3063\u3053\u306e\u51e6\u7406\u3068\u3057\u3066\u306f\u3001\n\n\u4e0d\u7b49\u53f7\u306a\u3069\u3067\u4f55\u3068\u304b\u3059\u308b\n\u756a\u5175\u3092\u7f6e\u304f\n\n\u306e2\u7a2e\u985e\u304c\u3042\u308b\u3002\u3053\u306e\u5b9f\u88c5\u306f\u524d\u8005\u3002\nruby \u3068 C99 \u3067\u66f8\u3044\u305f\u3051\u3069\u3001\u3044\u305a\u308c\u3082\u30cd\u30b9\u30c8\u304c\u6df1\u3059\u304e\u3066\u3088\u308d\u3057\u304f\u306a\u3044\u306d\u3002\n\u554f\u984c\u3068\u3057\u3066\u306f\u7c21\u5358\u6c17\u5473\u3060\u3068\u601d\u3063\u3066\u3044\u308b\u3093\u3060\u3051\u3069\u3001\u3069\u3046\uff1f\n\n\u554f\u984c : http://nabetani.sakura.ne.jp/hena/ordf01_twicel/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 : http://qiita.com/Nabetani/items/8e02ede04315b4eadd6d\n\n\u307e\u305a\u306f\u3001ruby \u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3002\n\n```ruby\nWX=WY=8\n\ndef at( m, x, y, t )\n  if t\n    (0...WX)===x && (0...WY)===y ? m[y][x] : nil\n  else\n    at( m, y, x, true )\n  end\nend\n\ndef solve( src )\n  m=src.split(\"/\").map{ |x| x.to_i(16) }\n  r=[0,0]\n  WY.times do |y|\n    WX.times do |x|\n      [true, false].each do |t|\n        c=at( m, x, y, t )\n        if c==at( m, x+1,y, t )\n          r[c]+=1 if [\n            [x-1,y], [x+2,y], [x,y-1], [x,y+1], [x+1,y-1], [x+1,y+1]\n          ].all?{ |pos| at(m, *pos, t)!=c }\n        end\n      end\n    end\n  end\n  r.join(\",\")\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split( /\\s+/ )\n  p src\n  actual = solve( src )\n  ok = actual==expected\n  puts [ num, ( ok ? \"ok\" : \"**NG**\" ), src, actual, expected ].join( \" \" )\n  ok\n}.all?.tap{ |x| p( x ? \"all okay!\" : \"something wrong!!\" ) }\n\n__END__\n0 dc/bc/a7/59/03/d5/d4/ea 2,3\n1 ff/ff/ff/ff/ff/ff/ff/ff 0,0\n2 00/00/00/00/00/00/00/00 0,0\n3 cc/33/cc/33/cc/33/cc/33 16,16\n4 aa/aa/55/55/aa/aa/55/55 16,16\n5 ac/a3/5c/53/ca/3a/c5/35 8,8\n```\n\n\u305d\u3057\u3066\u3001\u4e0a\u8a18\u306e ruby \u3092 C99 \u306b\u79fb\u690d\u3057\u305f\u3082\u306e\uff1a\n\n```C:C99\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\nstruct result\n{\n  int success;\n  int testcount;\n};\n\nenum{ WX=8, WY=8 };\n\nint at( uint64_t m, int x, int y, _Bool t )\n{\n  if ( t ){\n    if ( 0<=x && x<WX && 0<=y && y<WY ){\n      return ( m & (1ULL<<(x+y*8) ) ) ? 1 : 0;\n    } else {\n      return -1;\n    }\n  }\n  return at( m, y, x, 1 );\n}\n\nstruct wb{ int m[2]; };\nstruct xy{ int x, y; };\nconst struct xy P[6] = {\n  {-1, 0},  {2, 0},\n  {0, -1},  {0, 1},\n  {1, -1},  {1, 1},\n};\n\n#define COUNTOF(x) (sizeof(x) / sizeof(*(x)))\nstruct wb solve_impl( uint64_t num )\n{\n  struct wb r={{0}};\n  for( int y=0 ; y<WY ; ++y ){\n    for( int x=0 ; x<WX ; ++x ){\n      for( int t=0 ; t<2 ; ++t ){\n        int c=at( num, x, y, !!t );\n        if ( c==at( num, x+1,y, !!t ) ){\n          _Bool all=1;\n          for( int pos=0 ; pos<COUNTOF(P) ; ++pos ){\n            all = ( all && c!=at( num, x+P[pos].x, y+P[pos].y, !!t ) );\n          }\n          if ( all ){\n            ++r.m[c];\n          }\n        }\n      }\n    }\n  }\n  return r;\n}\n\n// caller should free return value memory.\nchar const * solve( char const * src )\n{\n  uint64_t num=0;\n  for( int i=0 ; i<8 ; ++i ){\n    num*=256;\n    num += strtoul( src+3*i, 0, 16 );\n  }\n  struct wb a = solve_impl( num );\n  char buffer[ 10 ] = {0};\n  sprintf( buffer, \"%d,%d\", a.m[0], a.m[1] );\n  return strdup(buffer);\n}\n\nvoid test_( struct result * r, char const * src, char const * expected )\n{\n  char const * actual = solve( src );\n  int okay = 0==strcmp(actual, expected );\n  if ( okay ){\n    ++r->success;\n  }\n  ++r->testcount;\n  printf( \"%s : %s->%s(%s)\\n\", (okay?\"ok\" : \"**NG**\"), src, actual, expected );\n  free( (void*)actual );\n}\n\nint main(void)\n{\n  struct result r={0};\n  #define test(src, expected) test_( &r, src, expected )\n  /*0*/ test( \"dc/bc/a7/59/03/d5/d4/ea\", \"2,3\" );\n  /*1*/ test( \"ff/ff/ff/ff/ff/ff/ff/ff\", \"0,0\" );\n  /*2*/ test( \"00/00/00/00/00/00/00/00\", \"0,0\" );\n  /*3*/ test( \"cc/33/cc/33/cc/33/cc/33\", \"16,16\" );\n  /*4*/ test( \"aa/aa/55/55/aa/aa/55/55\", \"16,16\" );\n  /*5*/ test( \"ac/a3/5c/53/ca/3a/c5/35\", \"8,8\" );\n  #undef test\n  printf( \"%d / %d\\n\", r.success, r.testcount );\n  return r.testcount==r.success ? 0 : 1;\n}\n```\n\n\u5b9f\u88c5\u65b9\u91dd\u306f\u3001\u3044\u304f\u3064\u304b\u3042\u308b\u3051\u3069\n\n* \u6df1\u3055\u512a\u5148\u63a2\u7d22\u306a\u3069\u3067\u3001\u9023\u7d50\u3057\u3066\u3044\u308b\u30de\u30b9\u76ee\u306e\u6570\u3092\u6570\u3048\u308b\u3002\n* 2\u30de\u30b9\u9650\u5b9a\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u6570\u3048\u308b\n\n\u306e\u3069\u3061\u3089\u304b\u306b\u306a\u308b\u3068\u601d\u3046\u3002ciel \u3055\u3093\u306e\u5b9f\u88c5( https://github.com/cielavenir/procon/blob/f807cc5ae792801e452ee94d1f6661e993590668/hena/tyama_henaf01.rb )\u306f\u524d\u8005\u3002\u3053\u308c\u306f\u5f8c\u8005\u306b\u306a\u308b\u3002\n\n\u3042\u3068\u3001\u7aef\u3063\u3053\u306e\u51e6\u7406\u3068\u3057\u3066\u306f\u3001\n\n* \u4e0d\u7b49\u53f7\u306a\u3069\u3067\u4f55\u3068\u304b\u3059\u308b\n* \u756a\u5175\u3092\u7f6e\u304f\n\n\u306e2\u7a2e\u985e\u304c\u3042\u308b\u3002\u3053\u306e\u5b9f\u88c5\u306f\u524d\u8005\u3002\n\nruby \u3068 C99 \u3067\u66f8\u3044\u305f\u3051\u3069\u3001\u3044\u305a\u308c\u3082\u30cd\u30b9\u30c8\u304c\u6df1\u3059\u304e\u3066\u3088\u308d\u3057\u304f\u306a\u3044\u306d\u3002\n\n\u554f\u984c\u3068\u3057\u3066\u306f\u7c21\u5358\u6c17\u5473\u3060\u3068\u601d\u3063\u3066\u3044\u308b\u3093\u3060\u3051\u3069\u3001\u3069\u3046\uff1f\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Ruby", "C99"]}