{"context": " More than 1 year has passed since last update.Scala\u306eREST API\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afSpray\u3067\u3059\u304c\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067text/plain\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nHTTP/1.1 400 Bad Request\nContent-Length: 40\nContent-Type: text/plain; charset=UTF-8\nDate: Wed, 03 Jun 2015 05:51:49 GMT\n\nRequest entity expected but not supplied\n\nREST API\u3092\u5b9f\u88c5\u3059\u308b\u4e0a\u3067\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306fJSON\u306b\u3057\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\nSpray\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\nSpray\u306f\u5404directive\u3054\u3068\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u5165\u308c\u308b\u304b\u62d2\u5426(reject)\u3059\u308b\u304b\u306e\u5224\u65ad\u304c\u52a0\u308f\u308a\u307e\u3059\u3002\u62d2\u5426\u3055\u308c\u305f\u5834\u5408\u3001\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u304b\u3089\u306f\u5916\u308c\u3001RejectionHandler\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u5f79\u76ee\u3092\u62c5\u3044\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306eRejectionHandler\u304ctext/plain\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u63db\u88c5\u3059\u308b\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30e0\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nRejectionHandler\u306e\u81ea\u4f5c\n\u4f8b\u3048\u3070\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u6b21\u306e\u3088\u3046\u306aJSON\u3092\u8fd4\u3048\u3059\u5b9f\u88c5\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nHTTP/1.1 422 Unprocessable Entity\nContent-Length: 140\nContent-Type: application/json; charset=UTF-8\nDate: Wed, 03 Jun 2015 05:56:57 GMT\n\n{\n    \"code\": \"validation_failed\",\n    \"errors\": [\n        {\n            \"code\": \"missing_field\",\n            \"field\": \"user_id\"\n        }\n    ],\n    \"message\": \"Validation failed\"\n}\n\n\u307e\u305a\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u7528\u306ecase class\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\ncase class Rejection(code: String, message: String, errors: Option[Seq[FieldRejection]])\ncase class FieldRejection(field: String, code: String)\n\n\u6b21\u306b\u3001\u3053\u306ecase class\u3092JSON\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u3001protocol\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nobject RejectionJsonProtocol extends DefaultJsonProtocol with SprayJsonSupport {\n  implicit val FieldRejectionFormat = jsonFormat2(FieldRejection)\n  implicit val RejectionFormat = jsonFormat3(Rejection)\n}\n\n\u6700\u5f8c\u306b\u3001RejectionHandler\u3092\u7d99\u627f\u3057\u3066\u81ea\u524d\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u4f5c\u308a\u307e\u3059\u3002\ntrait JsonRejectionHandler {\n  import RejectionJsonProtocol._\n  implicit val jsonRejectionHandler = RejectionHandler {\n    case MalformedRequestContentRejection(_, _) :: _ =>\n      complete(UnprocessableEntity, Rejection(\"validation_failed\", msg, None))\n  }\n}\n\nMalformedRequestContentRejection\u306f\u4e88\u3081\u5b9a\u7fa9\u3055\u308c\u305fRejection\u306e1\u3064\u3067\u3059\u3002\u30a8\u30e9\u30fc\u3092JSON\u306b\u3057\u305f\u3044Rejection\u306e\u3076\u3093\u3060\u3051\u3001\u3053\u3053\u306bcase\u3092\u5b9a\u7fa9\u3057\u3066\u62e1\u5f35\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u5168\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u3067\u3059\u3002\npackage shouldbee.spray\n\nimport spray.httpx.SprayJsonSupport\nimport spray.routing._\nimport spray.http.StatusCodes._\nimport spray.routing.directives.RouteDirectives._\n\nimport spray.json.{ DeserializationException, DefaultJsonProtocol }\n\ncase class Rejection(code: String, message: String, errors: Option[Seq[FieldRejection]])\ncase class FieldRejection(field: String, code: String)\n\nobject RejectionJsonProtocol extends DefaultJsonProtocol with SprayJsonSupport {\n  implicit val FieldRejectionFormat = jsonFormat2(FieldRejection)\n  implicit val RejectionFormat = jsonFormat3(Rejection)\n}\n\ntrait JsonRejectionHandler {\n  import RejectionJsonProtocol._\n  implicit val jsonRejectionHandler = RejectionHandler {\n    case MalformedRequestContentRejection(msg, cause) :: _ =>\n      cause match {\n        case Some(DeserializationException(_, prev, fieldNames)) =>\n          val code = prev match {\n            case e: NoSuchElementException   => \"missing_field\"\n            case e: IllegalArgumentException => \"malformed\"\n            case e: Throwable                => e.getClass.getName\n          }\n          val errors: Seq[FieldRejection] = fieldNames.map(FieldRejection(_, code))\n          complete(UnprocessableEntity, Rejection(\"validation_failed\", \"Validation failed\", Some(errors)))\n        case what @ _ =>\n          complete(UnprocessableEntity, Rejection(\"validation_failed\", msg, None))\n      }\n  }\n}\n\n\nService\u306b\u7d44\u307f\u8fbc\u3080\n\u6700\u5f8c\u306b\u3001\u81ea\u4f5c\u3057\u305fRejectionHandler\u3092Service\u306bmixin\u3059\u308b\u3053\u3068\u3067\u3001\u30a8\u30e9\u30fc\u304cJSON\u306b\u306a\u308a\u307e\u3059\u3002\ntrait YourAppService extends HttpService with JsonRejectionHandler {\n  ...\n}\n\nScala\u306eREST API\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afSpray\u3067\u3059\u304c\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067`text/plain`\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```http\nHTTP/1.1 400 Bad Request\nContent-Length: 40\nContent-Type: text/plain; charset=UTF-8\nDate: Wed, 03 Jun 2015 05:51:49 GMT\n\nRequest entity expected but not supplied\n```\n\nREST API\u3092\u5b9f\u88c5\u3059\u308b\u4e0a\u3067\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306fJSON\u306b\u3057\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n## Spray\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\nSpray\u306f\u5404[directive]\u3054\u3068\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u5165\u308c\u308b\u304b\u62d2\u5426([reject])\u3059\u308b\u304b\u306e\u5224\u65ad\u304c\u52a0\u308f\u308a\u307e\u3059\u3002\u62d2\u5426\u3055\u308c\u305f\u5834\u5408\u3001\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u304b\u3089\u306f\u5916\u308c\u3001[RejectionHandler]\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u5f79\u76ee\u3092\u62c5\u3044\u307e\u3059\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306eRejectionHandler\u304c`text/plain`\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u63db\u88c5\u3059\u308b\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30e0\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## RejectionHandler\u306e\u81ea\u4f5c\n\n\u4f8b\u3048\u3070\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u6b21\u306e\u3088\u3046\u306aJSON\u3092\u8fd4\u3048\u3059\u5b9f\u88c5\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```http\nHTTP/1.1 422 Unprocessable Entity\nContent-Length: 140\nContent-Type: application/json; charset=UTF-8\nDate: Wed, 03 Jun 2015 05:56:57 GMT\n\n{\n    \"code\": \"validation_failed\",\n    \"errors\": [\n        {\n            \"code\": \"missing_field\",\n            \"field\": \"user_id\"\n        }\n    ],\n    \"message\": \"Validation failed\"\n}\n```\n\n\u307e\u305a\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u7528\u306ecase class\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```scala\ncase class Rejection(code: String, message: String, errors: Option[Seq[FieldRejection]])\ncase class FieldRejection(field: String, code: String)\n```\n\n\u6b21\u306b\u3001\u3053\u306ecase class\u3092JSON\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u3001protocol\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```scala\nobject RejectionJsonProtocol extends DefaultJsonProtocol with SprayJsonSupport {\n  implicit val FieldRejectionFormat = jsonFormat2(FieldRejection)\n  implicit val RejectionFormat = jsonFormat3(Rejection)\n}\n```\n\n\u6700\u5f8c\u306b\u3001`RejectionHandler`\u3092\u7d99\u627f\u3057\u3066\u81ea\u524d\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```scala\ntrait JsonRejectionHandler {\n  import RejectionJsonProtocol._\n  implicit val jsonRejectionHandler = RejectionHandler {\n    case MalformedRequestContentRejection(_, _) :: _ =>\n      complete(UnprocessableEntity, Rejection(\"validation_failed\", msg, None))\n  }\n}\n```\n\n`MalformedRequestContentRejection`\u306f[\u4e88\u3081\u5b9a\u7fa9\u3055\u308c\u305fRejection]\u306e1\u3064\u3067\u3059\u3002\u30a8\u30e9\u30fc\u3092JSON\u306b\u3057\u305f\u3044Rejection\u306e\u3076\u3093\u3060\u3051\u3001\u3053\u3053\u306b`case`\u3092\u5b9a\u7fa9\u3057\u3066\u62e1\u5f35\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n\u4ee5\u4e0b\u304c\u5168\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```scala\npackage shouldbee.spray\n\nimport spray.httpx.SprayJsonSupport\nimport spray.routing._\nimport spray.http.StatusCodes._\nimport spray.routing.directives.RouteDirectives._\n\nimport spray.json.{ DeserializationException, DefaultJsonProtocol }\n\ncase class Rejection(code: String, message: String, errors: Option[Seq[FieldRejection]])\ncase class FieldRejection(field: String, code: String)\n\nobject RejectionJsonProtocol extends DefaultJsonProtocol with SprayJsonSupport {\n  implicit val FieldRejectionFormat = jsonFormat2(FieldRejection)\n  implicit val RejectionFormat = jsonFormat3(Rejection)\n}\n\ntrait JsonRejectionHandler {\n  import RejectionJsonProtocol._\n  implicit val jsonRejectionHandler = RejectionHandler {\n    case MalformedRequestContentRejection(msg, cause) :: _ =>\n      cause match {\n        case Some(DeserializationException(_, prev, fieldNames)) =>\n          val code = prev match {\n            case e: NoSuchElementException   => \"missing_field\"\n            case e: IllegalArgumentException => \"malformed\"\n            case e: Throwable                => e.getClass.getName\n          }\n          val errors: Seq[FieldRejection] = fieldNames.map(FieldRejection(_, code))\n          complete(UnprocessableEntity, Rejection(\"validation_failed\", \"Validation failed\", Some(errors)))\n        case what @ _ =>\n          complete(UnprocessableEntity, Rejection(\"validation_failed\", msg, None))\n      }\n  }\n}\n```\n\n## Service\u306b\u7d44\u307f\u8fbc\u3080\n\n\u6700\u5f8c\u306b\u3001\u81ea\u4f5c\u3057\u305fRejectionHandler\u3092Service\u306bmixin\u3059\u308b\u3053\u3068\u3067\u3001\u30a8\u30e9\u30fc\u304cJSON\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala\ntrait YourAppService extends HttpService with JsonRejectionHandler {\n  ...\n}\n```\n\n[directive]:http://spray.io/documentation/1.2.3/spray-routing/key-concepts/directives/\n[reject]: http://spray.io/documentation/1.2.3/spray-routing/key-concepts/rejections/\n[RejectionHandler]: https://github.com/spray/spray/blob/release/1.2/spray-routing/src/main/scala/spray/routing/RejectionHandler.scala\n[\u4e88\u3081\u5b9a\u7fa9\u3055\u308c\u305fRejection]: https://github.com/spray/spray/blob/release/1.2/spray-routing/src/main/scala/spray/routing/Rejection.scala\n", "tags": ["spray1.3.3", "Scala2.10.5"]}