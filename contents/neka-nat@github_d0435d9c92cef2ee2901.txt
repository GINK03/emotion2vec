{"context": "Keras\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u76f4\u63a5\u30c6\u30f3\u30bd\u30eb\u8a08\u7b97\u7b49\u3092\u884c\u3046\u969b\u306b\u5b66\u3093\u3060\u3053\u3068\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\nKeras\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\nKeras\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3059\u308b\u969b\u306f\u3001Layer\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u5c64\u3092\u4f7f\u3063\u3066\u3044\u304f\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7279\u6b8a\u306aLayer\u306f\u95a2\u6570\u3092\u4f5c\u3063\u3066Lambda\u5c64\u3084Merge\u5c64\u306b\u7a81\u3063\u8fbc\u3080\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306f\u5165\u529b\u306e\u7d76\u5bfe\u5024\u3092\u8fd4\u3059\u5c64\u3092\u6301\u3063\u305f\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\nlambda_layer_exp.py\nfrom keras.models import Model\nfrom keras.layers import Input, Lambda\nimport keras.backend as K\n\nx_in = Input(shape=(3, 3))\nx = Lambda(lambda x: K.abs(x))(x_in)\nmodel = Model(input=x_in, output=x)\n\n\n\u3053\u306e\u30e2\u30c7\u30eb\u306b\u5024\u3092\u5165\u308c\u3066\u307f\u307e\u3059\u3002\n>>> import numpy as np\n>>> model.predict([np.array([[[-1,2,3],[4,-5,6],[7,8,-9]]])])\narray([[[ 1.,  2.,  3.],\n        [ 4.,  5.,  6.],\n        [ 7.,  8.,  9.]]], dtype=float32)\n\n\u5165\u529b\u304c2\u3064\u4ee5\u4e0a\u3042\u308b\u5834\u5408\u306fMerge\u5c64\u3067\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f2\u3064\u306e\u5165\u529b\u306e\u7d76\u5bfe\u5024\u306e\u548c\u3092\u53d6\u308b\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nMerge\u5c64\u3067\u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\u306foutput_shape\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nmerge_layer_exp.py\nfrom keras.models import Model\nfrom keras.layers import Input, merge\nimport keras.backend as K\n\nx_in1 = Input(shape=(3,))\nx_in2 = Input(shape=(3,))\nx = merge([x_in1, x_in2], mode=lambda x: K.abs(x[0]) + K.abs(x[1]), output_shape=(3,))\nmodel = Model(input=[x_in1, x_in2], output=x)\n\n\n\u3053\u306e\u30e2\u30c7\u30eb\u3067\u8a08\u7b97\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n>>> import numpy as np\n>>> model.predict([np.array([[-1,-2,3]]), np.array([[4,-5,-6]])])\narray([[ 5.,  7.,  9.]], dtype=float32)\n\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306b\u5b58\u5728\u3059\u308b\u95a2\u6570\u306fnumpy\u3084Tensorflow,Theano\u306a\u3069\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u307b\u307c\u540c\u7b49\u306e\u3082\u306e\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u4f7f\u3044\u65b9\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u3082\u306e\u3082\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u4e2d\u5fc3\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3059\u3002\n\ndot, batch_dot\nKeras\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u4f7f\u3046\u6642\u3068\u305d\u3046\u3067\u306a\u3044\u6642\u306e\u6ce8\u610f\u3068\u3057\u3066\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u4f7f\u3046\u3068\u3001Tensorflow\u306a\u3069\u3068\u540c\u69d8\u306b\u30d0\u30c3\u30c1\u306e\u6b21\u5143\u3092\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\nKeras\u306eLayer\u306b\u3042\u308b\u3082\u306e\u3067shape\u306b\u95a2\u3059\u308b\u5f15\u6570\u3092\u53d6\u308b\u3082\u306e\u306f\u3001\u57fa\u672c\u7684\u306b\u30d0\u30c3\u30c1\u306e\u6b21\u5143\u3092\u629c\u3044\u3066\u8003\u3048\u307e\u3059\u3002RGB\u306e\u753b\u50cf\u3067\u3042\u308c\u3070shape=(3, 32, 32)\u3068\u3044\u3046\u3075\u3046\u306b\u4e0e\u3048\u307e\u3059\u304c\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u95a2\u6570\u3067\u306fshape=(None, 3, 32, 32)\u306e\u3088\u3046\u306b\u30d0\u30c3\u30c1\u306e\u6b21\u5143\u3092\u8003\u616e\u3057\u3066\u8a08\u7b97\u3092\u8003\u3048\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\n\u3053\u3053\u3067\u7d39\u4ecb\u3059\u308bdot\u7a4d\u306e\u95a2\u6570dot,batch_dot\u306f\u305d\u308c\u305e\u308c\u30d0\u30c3\u30c1\u306e\u6b21\u5143\u3092\u8003\u616e\u3059\u308b\u3001\u8003\u616e\u3057\u306a\u3044\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\nimport keras.backend as K\na = K.variable([[1,2],[3,4]])\nb = K.variable([[5,6],[7,8]])\n\nprint K.eval(K.dot(a, b)) # a\u884c\u5217\u3068b\u884c\u5217\u306e\u639b\u3051\u7b97\nprint K.eval(K.batch_dot(a, b, 1)) # a[i]\u3068b[i]\u306edot\u7a4d\u306e\u914d\u5217\nprint K.eval(a * b) # \u8981\u7d20\u3054\u3068\u306e\u639b\u3051\u7b97\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n[[ 19.,  22.],\n [ 43.,  50.]]\n[[ 17.],\n [ 53.]]\n[[  5.,  12.],\n [ 21.,  32.]]\n\n\u307e\u305f\u3001\u3053\u306e\u3088\u3046\u306adimension\u304c\u5909\u66f4\u3059\u308b\u3088\u3046\u306a\u8a08\u7b97\u3092Lambda\u30ec\u30a4\u30e4\u30fc\u306b\u7a81\u3063\u8fbc\u3080\u5834\u5408\u306foutput_shape\u3092\u660e\u793a\u7684\u306b\u4e0e\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nimport numpy as np\nfrom keras.models import Model\nfrom keras.layers import Input, Lambda\nimport keras.backend as K\n\nx_in = Input(shape=(2, 2))\nx = Lambda(lambda x: K.dot(K.variable([0, 1]), x), output_shape=(2,))(x_in)\nmodel = Model(input=x_in, output=x)\nprint model.predict([np.array([[[1,2],[3,4]]])])\n# [[ 3.  4.]]\n\n\none_hot\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3084Tensorflow\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306f\u77e5\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u306b\u3082\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u901a\u308a\u3001\u201c1\u3064\u3060\u3051High(1)\u3067\u3042\u308a\u3001\u4ed6\u306fLow(0)\u3067\u3042\u308b\u3088\u3046\u306a\u30d3\u30c3\u30c8\u5217\u275e\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\nprint K.eval(K.one_hot(K.variable([0,2,1,0], dtype=int), 3))\n# [[ 1.  0.  0.]\n#  [ 0.  0.  1.]\n#  [ 0.  1.  0.]\n#  [ 1.  0.  0.]]\n\n\ndimension\u306e\u7de8\u96c6\npermute_dimensions, expand_dims, squeeze\u3067\u6b21\u5143\u306e\u7f6e\u63db\u3001\u8ffd\u52a0\u3001\u524a\u9664\u304c\u884c\u3048\u307e\u3059\u3002\na = K.variable([[[1,2],[3,4]]])\nprint K.eval(K.shape(a))\n# [1, 2, 2]\n\nprint K.eval(K.permute_dimensions(a, [1, 2, 0]))\n# [[[ 1.],\n#   [ 2.]],\n#\n#  [[ 3.],\n#   [ 4.]]]\n\nprint K.eval(K.expand_dims(a, 2))\n# [[[[ 1.,  2.]],\n#\n#   [[ 3.,  4.]]]]\n\nprint K.eval(K.squeeze(a, 0))\n# [[ 1.,  2.],\n#  [ 3.,  4.]]\n\n\ngather\n\u3044\u308f\u3086\u308b\u30b9\u30e9\u30a4\u30b9\u51e6\u7406\u3067\u3059\u304c\u3001\u6700\u521d\u306e\u6b21\u5143\u306b\u5bfe\u3057\u3066\u306e\u307f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u4efb\u610f\u306e\u8ef8\u306b\u5bfe\u3057\u3066\u30a4\u30f3\u30c7\u30ad\u30b7\u30f3\u30b0\u3057\u305f\u3044\u3068\u304d\u306fpermute_dimensions\u3068\u306a\u3069\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\na = K.variable([[1,2],[3,4],[5,6]])\nprint K.eval(K.gather(a, 0))\n# [ 1.,  2.]\nprint K.eval(K.gather(K.permute_dimensions(a, [1, 0]), 0)) # K.eval(K.gather(K.transpose(a), 0))\u3068\u7b49\u4fa1\n# [ 1.,  3.,  5.]\n\n\n\u6700\u5f8c\u306b\n\u6700\u5f8c\u306b\u3053\u3053\u307e\u3067\u306e\u77e5\u8b58\u3092\u4f7f\u3063\u3066\u3001chainer\u3067\u66f8\u304b\u308c\u305f\u30e2\u30c7\u30eb\u3092keras\u3067\u5b9f\u88c5\u3057\u306a\u304a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30cd\u30bf\u306fValue Iteration Networks(@peisuke \u3055\u3093\u306echainer\u5b9f\u88c5)\u3067\u3059\u3002\nNIPS2016\u306e\u30d9\u30b9\u30c8\u30da\u30fc\u30d1\u30fc\u3060\u3063\u305f\u307f\u305f\u3044\u3067\u3059\u306d\u3002\ngithub\u306b\u3042\u3052\u3066\u3044\u307e\u3059\u3002\nvin-keras\nKeras\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u76f4\u63a5\u30c6\u30f3\u30bd\u30eb\u8a08\u7b97\u7b49\u3092\u884c\u3046\u969b\u306b\u5b66\u3093\u3060\u3053\u3068\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\n## Keras\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\nKeras\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3059\u308b\u969b\u306f\u3001Layer\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u5c64\u3092\u4f7f\u3063\u3066\u3044\u304f\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7279\u6b8a\u306aLayer\u306f\u95a2\u6570\u3092\u4f5c\u3063\u3066Lambda\u5c64\u3084Merge\u5c64\u306b\u7a81\u3063\u8fbc\u3080\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306f\u5165\u529b\u306e\u7d76\u5bfe\u5024\u3092\u8fd4\u3059\u5c64\u3092\u6301\u3063\u305f\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py:lambda_layer_exp.py\nfrom keras.models import Model\nfrom keras.layers import Input, Lambda\nimport keras.backend as K\n\nx_in = Input(shape=(3, 3))\nx = Lambda(lambda x: K.abs(x))(x_in)\nmodel = Model(input=x_in, output=x)\n```\n\n\u3053\u306e\u30e2\u30c7\u30eb\u306b\u5024\u3092\u5165\u308c\u3066\u307f\u307e\u3059\u3002\n\n```pycon\n>>> import numpy as np\n>>> model.predict([np.array([[[-1,2,3],[4,-5,6],[7,8,-9]]])])\narray([[[ 1.,  2.,  3.],\n        [ 4.,  5.,  6.],\n        [ 7.,  8.,  9.]]], dtype=float32)\n```\n\n\u5165\u529b\u304c2\u3064\u4ee5\u4e0a\u3042\u308b\u5834\u5408\u306fMerge\u5c64\u3067\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f2\u3064\u306e\u5165\u529b\u306e\u7d76\u5bfe\u5024\u306e\u548c\u3092\u53d6\u308b\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nMerge\u5c64\u3067\u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\u306foutput_shape\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```py:merge_layer_exp.py\nfrom keras.models import Model\nfrom keras.layers import Input, merge\nimport keras.backend as K\n\nx_in1 = Input(shape=(3,))\nx_in2 = Input(shape=(3,))\nx = merge([x_in1, x_in2], mode=lambda x: K.abs(x[0]) + K.abs(x[1]), output_shape=(3,))\nmodel = Model(input=[x_in1, x_in2], output=x)\n```\n\n\u3053\u306e\u30e2\u30c7\u30eb\u3067\u8a08\u7b97\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```pycon\n>>> import numpy as np\n>>> model.predict([np.array([[-1,-2,3]]), np.array([[4,-5,-6]])])\narray([[ 5.,  7.,  9.]], dtype=float32)\n```\n\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306b\u5b58\u5728\u3059\u308b\u95a2\u6570\u306fnumpy\u3084Tensorflow,Theano\u306a\u3069\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u307b\u307c\u540c\u7b49\u306e\u3082\u306e\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u4f7f\u3044\u65b9\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u3082\u306e\u3082\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u4e2d\u5fc3\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3059\u3002\n\n## dot, batch_dot\nKeras\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u4f7f\u3046\u6642\u3068\u305d\u3046\u3067\u306a\u3044\u6642\u306e\u6ce8\u610f\u3068\u3057\u3066\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u4f7f\u3046\u3068\u3001Tensorflow\u306a\u3069\u3068\u540c\u69d8\u306b\u30d0\u30c3\u30c1\u306e\u6b21\u5143\u3092\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\nKeras\u306eLayer\u306b\u3042\u308b\u3082\u306e\u3067shape\u306b\u95a2\u3059\u308b\u5f15\u6570\u3092\u53d6\u308b\u3082\u306e\u306f\u3001\u57fa\u672c\u7684\u306b\u30d0\u30c3\u30c1\u306e\u6b21\u5143\u3092\u629c\u3044\u3066\u8003\u3048\u307e\u3059\u3002RGB\u306e\u753b\u50cf\u3067\u3042\u308c\u3070`shape=(3, 32, 32)`\u3068\u3044\u3046\u3075\u3046\u306b\u4e0e\u3048\u307e\u3059\u304c\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u95a2\u6570\u3067\u306f`shape=(None, 3, 32, 32)`\u306e\u3088\u3046\u306b\u30d0\u30c3\u30c1\u306e\u6b21\u5143\u3092\u8003\u616e\u3057\u3066\u8a08\u7b97\u3092\u8003\u3048\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\n\u3053\u3053\u3067\u7d39\u4ecb\u3059\u308bdot\u7a4d\u306e\u95a2\u6570`dot`,`batch_dot`\u306f\u305d\u308c\u305e\u308c\u30d0\u30c3\u30c1\u306e\u6b21\u5143\u3092\u8003\u616e\u3059\u308b\u3001\u8003\u616e\u3057\u306a\u3044\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n```py\nimport keras.backend as K\na = K.variable([[1,2],[3,4]])\nb = K.variable([[5,6],[7,8]])\n\nprint K.eval(K.dot(a, b)) # a\u884c\u5217\u3068b\u884c\u5217\u306e\u639b\u3051\u7b97\nprint K.eval(K.batch_dot(a, b, 1)) # a[i]\u3068b[i]\u306edot\u7a4d\u306e\u914d\u5217\nprint K.eval(a * b) # \u8981\u7d20\u3054\u3068\u306e\u639b\u3051\u7b97\n```\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n[[ 19.,  22.],\n [ 43.,  50.]]\n[[ 17.],\n [ 53.]]\n[[  5.,  12.],\n [ 21.,  32.]]\n```\n\n\u307e\u305f\u3001\u3053\u306e\u3088\u3046\u306adimension\u304c\u5909\u66f4\u3059\u308b\u3088\u3046\u306a\u8a08\u7b97\u3092`Lambda`\u30ec\u30a4\u30e4\u30fc\u306b\u7a81\u3063\u8fbc\u3080\u5834\u5408\u306f`output_shape`\u3092\u660e\u793a\u7684\u306b\u4e0e\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```py\nimport numpy as np\nfrom keras.models import Model\nfrom keras.layers import Input, Lambda\nimport keras.backend as K\n\nx_in = Input(shape=(2, 2))\nx = Lambda(lambda x: K.dot(K.variable([0, 1]), x), output_shape=(2,))(x_in)\nmodel = Model(input=x_in, output=x)\nprint model.predict([np.array([[[1,2],[3,4]]])])\n# [[ 3.  4.]]\n```\n\n## one_hot\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3084Tensorflow\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306f\u77e5\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001[\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2](https://ja.wikipedia.org/wiki/One-hot)\u306b\u3082\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u901a\u308a\u3001\u201c1\u3064\u3060\u3051High(1)\u3067\u3042\u308a\u3001\u4ed6\u306fLow(0)\u3067\u3042\u308b\u3088\u3046\u306a\u30d3\u30c3\u30c8\u5217\u275e\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n```py\nprint K.eval(K.one_hot(K.variable([0,2,1,0], dtype=int), 3))\n# [[ 1.  0.  0.]\n#  [ 0.  0.  1.]\n#  [ 0.  1.  0.]\n#  [ 1.  0.  0.]]\n```\n\n## dimension\u306e\u7de8\u96c6\n`permute_dimensions`, `expand_dims`, `squeeze`\u3067\u6b21\u5143\u306e\u7f6e\u63db\u3001\u8ffd\u52a0\u3001\u524a\u9664\u304c\u884c\u3048\u307e\u3059\u3002\n\n```py\na = K.variable([[[1,2],[3,4]]])\nprint K.eval(K.shape(a))\n# [1, 2, 2]\n\nprint K.eval(K.permute_dimensions(a, [1, 2, 0]))\n# [[[ 1.],\n#   [ 2.]],\n#\n#  [[ 3.],\n#   [ 4.]]]\n\nprint K.eval(K.expand_dims(a, 2))\n# [[[[ 1.,  2.]],\n#\n#   [[ 3.,  4.]]]]\n\nprint K.eval(K.squeeze(a, 0))\n# [[ 1.,  2.],\n#  [ 3.,  4.]]\n```\n\n## gather\n\u3044\u308f\u3086\u308b\u30b9\u30e9\u30a4\u30b9\u51e6\u7406\u3067\u3059\u304c\u3001\u6700\u521d\u306e\u6b21\u5143\u306b\u5bfe\u3057\u3066\u306e\u307f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u4efb\u610f\u306e\u8ef8\u306b\u5bfe\u3057\u3066\u30a4\u30f3\u30c7\u30ad\u30b7\u30f3\u30b0\u3057\u305f\u3044\u3068\u304d\u306f`permute_dimensions`\u3068\u306a\u3069\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```py\na = K.variable([[1,2],[3,4],[5,6]])\nprint K.eval(K.gather(a, 0))\n# [ 1.,  2.]\nprint K.eval(K.gather(K.permute_dimensions(a, [1, 0]), 0)) # K.eval(K.gather(K.transpose(a), 0))\u3068\u7b49\u4fa1\n# [ 1.,  3.,  5.]\n```\n\n## \u6700\u5f8c\u306b\n\u6700\u5f8c\u306b\u3053\u3053\u307e\u3067\u306e\u77e5\u8b58\u3092\u4f7f\u3063\u3066\u3001chainer\u3067\u66f8\u304b\u308c\u305f\u30e2\u30c7\u30eb\u3092keras\u3067\u5b9f\u88c5\u3057\u306a\u304a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30cd\u30bf\u306f[Value Iteration Networks(@peisuke \u3055\u3093\u306echainer\u5b9f\u88c5)](http://qiita.com/peisuke/items/0440bbcd11d366352990)\u3067\u3059\u3002\nNIPS2016\u306e\u30d9\u30b9\u30c8\u30da\u30fc\u30d1\u30fc\u3060\u3063\u305f\u307f\u305f\u3044\u3067\u3059\u306d\u3002\ngithub\u306b\u3042\u3052\u3066\u3044\u307e\u3059\u3002\n\n[vin-keras](https://github.com/neka-nat/vin-keras)\n", "tags": ["Python", "Keras", "DeepLearning"]}