{"context": " More than 1 year has passed since last update.\"How I make auto-classification program of pictures !?\"\n\"oh, you have to read some Japanese text. And you change some codes in that examples.\"\n\"oh...\"\nI don't have the heart to say, so I got together \"saku_cnn\".\nBelow text is mainly points for using \"saku_cnn\".\n(This is English translation item of that)\n\nPreparation\nubuntu 14.04 (or more later versions)\npython\n\u3000OpenCV 2.4.10\n\u3000chainer 1.3.2 or 1.5.0\nGeForce Titan X\n\nSource codes\ngithub\n\nHow to use \"saku_cnn\"\nIt's very easy 3 steps.\n\n1st step: Prepare of \"Picture\"\nIf you want to test anyway, you can pass the step.\n(I set default pictures, so you can test without changing)\n\"Picture\" is a default folder in \"saku_cnn\".\n\"Picture\" has class folders, and every class folder has pictures file in the class.\n\nFor example, when you want to classification \"car\" and \"bike\" pictures. \n1st: You delete class folders and pictures in \"Picture\".\n2nd: You make a folder named \"car\" in \"Picture\", and you put cars picture in the \"car\" folder.\n3rd: You make a folder named \"bike\" in \"Picture\", and you put bikes picture in the \"bike\" folder, too.\nThe files' and folders' names are free, but the names have to be complex of alphabets or numbers.\nIf you use \" \"(space) or other sign, \"saku_cnn\" don't work well.\nIn all pictures in \"Pictures\", 9/10 pictures use for learning and 1/10 pictures use for testing.\n\n2nd step: Call \"callvgg.py\"\n\n$ python callvgg.py 0\n\nThe argument is for deciding GPU No.\nYou can check GPU below command.\n\n$ nvidia-smi\n\n\nIn our environment, if you want use GPU No.0, the argument is 3.\n(3-[argument No.]=[using GPU No.])\nDeep Learning is very heavy computing, so you should use free one.\ndefault setting is epoch 100.\nEvery epoch use 3/4 pictures of all pictures in \"Picture\".\n100 epoch mean that the program use 100 times every picture of them for learning.\n\n3rd step: Call \"callgraph.py\"\n\n$ python callgraph.py\n\nAfter \"callvgg.py\" stopped, you should call \"callgraph.py\".\n\"callgraph.py\" makes \"graph.png\", error rate transition graph in training.\n\nIn the picture, blue line is training data's error rate, and green line is training data's error rate.\n\"iteration\" mean what times the program update own parameter.\nIn default, every iteration learn 16 pictures.\n\nWhat model did \"saku_cnn\" use?\nI set illustration2vec, a model based on OxfordNet ( VGGNet ).\n\nHow to use learned model data! ( added 19/02/2016 )\nI prepared a sample program \"check.py\" for classification test.\nAfter calling \"callvgg.py\", you can call \"check.py\".\n\n$python check.py testPicture\n\n\"testPicture\", the argument of \"check.py\" needs same format folders and pictures as \"Picture\".\nIn this example, \"testPicture\" has same pictures that \"Picture\" has.\nHowever, you have to prepare different pictures from learning pictures for truly test, actually.\n\nIf you call it, [ classified picture path ], [ classified class ] and [ classified true class or not ] 1 are displayed in one sentence.\nAfter all sentences, the No. of correct classified pictures and not correct are displayed.\n\nI want to use the example for cross validation test in changing some pattern of epoch parameter! ( added 19/02/2016 )\n\n$ python callvgg.py 0 -E 10\n\nIf you want to change epoch parameter, you can use \"-E\" argument.\nIn this situation, the learning will finish in 10 epoch ( = use all pictures 10 times ).\nTest data is checked in every 10 epoch, so I think you should choose the parameter from multiples of 10\n\n$ python callvgg.py 0 -t 9\n\nIf you want to change the pattern of test data and train data, you use \"-t\" argument, too.\n\nYou can use only 10 types No., \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", as the argument of \"-t\".\nThe pictures in every class folder are sorted and divided 10 blocks. \nIf you choose \"0\" ( default setting ), you choose first 1/10 pictures block as test data in all class folders. ( As the above figure )\nTherefore, in other words, you choose a test data block from the 10 blocks in the \"0\"-\"9\" argument.\nAs \"callvgg.py\" finish, actuary used test data's paths and labels are written in \"test.txt\", and train data's are written in \"train.txt\".\nIf you are uneasy, you can check them.\nI think the arguments are useful for the 10 cross validation test.\n\nReferences\nChainer\u306eNIN\u3067\u81ea\u5206\u306e\u753b\u50cf\u30bb\u30c3\u30c8\u3092\u6df1\u5c64\u5b66\u7fd2\u3055\u305b\u3066\u8a8d\u8b58\u3055\u305b\u308b\nPFN\u767a\u306e\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afchainer\u3067\u753b\u50cf\u5206\u985e\u3092\u3059\u308b\u3088(chainer\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c81)\nchainer-imagenet-vgg\nillustration2vec\nOxfordNet(VGGNet)\n\n\n\n\nIn this situation, the name of class folder is regarded as true class. \u00a0\u21a9\n\n\n\n\"How I make auto-classification program of pictures !?\"\n\"oh, you have to read some Japanese text. And you change some codes in that examples.\"\n\"oh...\"\n\nI don't have the heart to say, so I got together \"saku_cnn\".\nBelow text is mainly points for using \"saku_cnn\".\n\n(This is English translation item of [that](http://qiita.com/imenurok/items/fecc9ca8d96eb623aaef))\n\n#Preparation\nubuntu 14.04 (or more later versions)\npython\n\u3000OpenCV 2.4.10\n\u3000chainer 1.3.2 or 1.5.0\nGeForce Titan X\n\n#Source codes\n\n[github](https://github.com/imenurok/saku_cnn)\n\n#How to use \"saku_cnn\"\n\nIt's very easy 3 steps.\n\n##1st step: Prepare of \"Picture\" \n**If you want to test anyway, you can pass the step.**\n(I set default pictures, so you can test without changing)\n\n\"Picture\" is a default folder in \"saku_cnn\".\n\"Picture\" has class folders, and every class folder has pictures file in the class.\n\n![\u968e\u5c64.png](https://qiita-image-store.s3.amazonaws.com/0/102946/e6975aab-da54-61f2-0133-37685373f6ec.png)\n\n**For example, when you want to classification \"car\" and \"bike\" pictures.** \n1st: You delete class folders and pictures in \"Picture\".\n2nd: You make a folder named \"car\" in \"Picture\", and you put cars picture in the \"car\" folder.\n3rd: You make a folder named \"bike\" in \"Picture\", and you put bikes picture in the \"bike\" folder, too.\n\nThe files' and folders' names are free, but **the names have to be complex of alphabets or numbers.**\nIf you use \" \"(space) or other sign, \"saku_cnn\" don't work well.\n\nIn all pictures in \"Pictures\", 9/10 pictures use for learning and 1/10 pictures use for testing.\n\n##2nd step: Call \"callvgg.py\"\n\n>$ python callvgg.py 0\n\nThe argument is for deciding GPU No.\nYou can check GPU below command.\n>$ nvidia-smi\n\n![gpu.png](https://qiita-image-store.s3.amazonaws.com/0/102946/9081450b-31e3-b921-ece5-6d6f103bc85a.png)\n\nIn our environment, **if you want use GPU No.0, the argument is 3.**\n(3-[argument No.]=[using GPU No.])\nDeep Learning is very heavy computing, so you should use free one.\n\ndefault setting is epoch 100.\nEvery epoch use 3/4 pictures of all pictures in \"Picture\".\n100 epoch mean that the program use 100 times every picture of them for learning.\n\n##3rd step: Call \"callgraph.py\"\n\n>$ python callgraph.py\n\nAfter \"callvgg.py\" stopped, you should call \"callgraph.py\".\n\"callgraph.py\" makes \"graph.png\", error rate transition graph in training.\n\n![graph.png](https://qiita-image-store.s3.amazonaws.com/0/102946/42e28a8d-81d5-dbc5-2c3f-71ad6af90550.png)\n\nIn the picture, blue line is training data's error rate, and green line is training data's error rate.\n\n\"iteration\" mean what times the program update own parameter.\nIn default, every iteration learn 16 pictures.\n\n#What model did \"saku_cnn\" use?\n\nI set [illustration2vec](http://illustration2vec.net/), a model based on [OxfordNet ( VGGNet )](http://arxiv.org/abs/1409.1556).\n\n# How to use learned model data! ( added 19/02/2016 )\nI prepared a sample program \"check.py\" for classification test.\nAfter calling \"callvgg.py\", you can call \"check.py\".\n\n>$python check.py testPicture\n\n\"testPicture\", the argument of \"check.py\" needs same format folders and pictures as \"Picture\".\nIn this example, \"testPicture\" has same pictures that \"Picture\" has.\n**However, you have to prepare different pictures from learning pictures for truly test, actually.**\n\n![correct.png](https://qiita-image-store.s3.amazonaws.com/0/102946/67fd40ff-d48b-45c4-bfbe-c28892c684e1.png)\n\nIf you call it, [ classified picture path ], [ classified class ] and [ classified true class or not ] [^1] are displayed in one sentence.\nAfter all sentences, the No. of correct classified pictures and not correct are displayed.\n\n# I want to use the example for cross validation test in changing some pattern of epoch parameter! ( added 19/02/2016 )\n\n>$ python callvgg.py 0 -E 10\n\nIf you want to change epoch parameter, you can use \"-E\" argument.\nIn this situation, the learning will finish in 10 epoch ( = use all pictures 10 times ).\nTest data is checked in every 10 epoch, so I think **you should choose the parameter from multiples of 10**\n\n>$ python callvgg.py 0 -t 9\n\nIf you want to change the pattern of test data and train data, you use \"-t\" argument, too.\n\n![choice2.png](https://qiita-image-store.s3.amazonaws.com/0/102946/fae770d3-d727-44cf-bfb1-c9fef22c04f1.png)\n\nYou can use only 10 types No., \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", as the argument of \"-t\".\nThe pictures in every class folder are sorted and divided 10 blocks. \nIf you choose \"0\" ( default setting ), you choose **first 1/10 pictures block** as test data in all class folders. ( As the above figure )\nTherefore, in other words, you choose a test data block from the 10 blocks in the \"0\"-\"9\" argument.\n\nAs \"callvgg.py\" finish, actuary used test data's paths and labels are written in \"test.txt\", and train data's are written in \"train.txt\".\nIf you are uneasy, you can check them.\n\nI think the arguments are useful for the 10 cross validation test.\n\n#References\n[Chainer\u306eNIN\u3067\u81ea\u5206\u306e\u753b\u50cf\u30bb\u30c3\u30c8\u3092\u6df1\u5c64\u5b66\u7fd2\u3055\u305b\u3066\u8a8d\u8b58\u3055\u305b\u308b](http://d.hatena.ne.jp/shi3z/20150709/1436397615)\n[PFN\u767a\u306e\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afchainer\u3067\u753b\u50cf\u5206\u985e\u3092\u3059\u308b\u3088(chainer\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c81)](http://hi-king.hatenablog.com/entry/2015/06/11/021144)\n[chainer-imagenet-vgg](https://github.com/mitmul/chainer-imagenet-vgg)\n[illustration2vec](http://illustration2vec.net/)\n[OxfordNet(VGGNet)](http://arxiv.org/abs/1409.1556)\n\n[^1]: In this situation, the name of class folder is regarded as true class. \n", "tags": ["Chainer"]}