{"context": " More than 1 year has passed since last update.Kotlin\u3092\u66f8\u3044\u30662\u30f6\u6708\u307b\u3069\u305f\u3061\u3001Kotlin\u3082\u30d0\u30fc\u30b8\u30e7\u30f3\u304c1.0.0\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u4ed5\u4e8b\u3067\u306e\u5c0e\u5165\u3082\u8996\u91ce\u306b\u30b3\u30b3\u3089\u3078\u3093\u3067\u898f\u7d04\u3068\u3057\u3066\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u82f1\u8a9e\u3068\u65e5\u672c\u8a9e\u4e21\u65b9\u3067\u8aad\u3081\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u82f1\u8a9e\u529b\u304c\u3042\u307e\u308a\u306a\u3044\u306e\u3067\u82f1\u8a9e\u5316\u306f\u9806\u6b21\u884c\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u5354\u529b\u3092\u3057\u3066\u304f\u3060\u3055\u308b\u65b9\u304c\u3044\u308c\u3070\u3001\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51fa\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\uff09\n\n1 Introduction(\u8aac\u660e)\n\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306eKotlin\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u3059\u3002Kotlin\u306e\u5229\u7528\u3068\u3057\u3066\u3001\u4e3b\u306bAndroid\u3067\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nThis is Kotlin lang coding styles. And some Android coding style in Kotlin.\n\n1.1 Policy(\u65b9\u91dd)\n\u65b9\u91dd\u3068\u3057\u3066\u3001Kotlin\u306e\u3059\u3063\u304d\u308a\u3057\u305f\u66f8\u304d\u3084\u3059\u3055\u3068\u3001\u578b\u3092\u610f\u8b58\u3057\u305f\u898b\u3084\u3059\u3055\u3092\u610f\u8b58\u3057\u305f\u3001\u30ab\u30b8\u30e5\u30a2\u30eb\u306a\u66f8\u304d\u65b9\u3092\u76ee\u6307\u3059\u3088\u3046\u306a\u898f\u7d04\u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n1.2 Difinction(\u5b9a\u7fa9)\nKotlin Version: 1.0.0beta1103 (latest version)\n\n2.Naming(\u547d\u540d\uff09\n\u5404\u7a2e\u547d\u540d\u306b\u898f\u5247\u306b\u3064\u3044\u3066\n\n2.1 Package Name(\u30d1\u30c3\u30b1\u30fc\u30b8\u540d)\n\u30d1\u30c3\u30b1\u30fc\u30b8\u30cd\u30fc\u30e0\u306f\u3001\u3059\u3079\u3066 lowercase \u3067\u66f8\u304d\u3001\u9023\u7d9a\u3057\u305f\u5358\u8a9e\u306f\u5358\u7d14\u306b\u7e4b\u3052\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nPackage names are all lowercase, with consecutive words simply concatenated together.\n// Good\ncom.example.hogefuga\n\n// Bad\ncom.example.hogeFuga\n\ncom.example.hoge_fuga\n\n\n2.2 Class Name(\u30af\u30e9\u30b9\u540d)\n\u30af\u30e9\u30b9\u540d\u306f\u3001 UpperCamelCase \u3067\u66f8\u304d\u307e\u3059\u3002\nClass names are written in UpperCamelCase. \n\u30af\u30e9\u30b9\u540d\u306b\u306f\u3001\u540d\u8a5e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nInterface\u3084\u3001Open Class\u306b\u3082\u540d\u8a5e\u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u5f62\u5bb9\u8a5e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nClass names are typically nouns or noun phrases.\nInterface and Open Class names may also be nouns or noun phrases, but may sometimes be adjectives or adjective phrases instead.\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u7279\u5225\u306b\u30eb\u30fc\u30eb\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u547d\u540d\u898f\u5247\u306b\u5f93\u3044\u307e\u3059\u3002\nThere are no specific rules or even well\u00adestablished conventions for naming annotation types.\nTest\u3084Activity\u3084Fragment\u306a\u3069\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066\u5927\u304d\u306a\u610f\u5473\u3092\u6301\u3064\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306b\u306f\u3001\u540d\u524d\u306e\u6700\u5f8c\u306b\u305d\u306e\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u4ed8\u3051\u308b\u3002\nActivity classes are name starting the name of the class, and ending Activity.\n// Good\nCharactor\nImmutableList (this is subclass for list class)\nList\nReadable\nHashText (test class)\n\n// Bad\nMove\nIs\n\n\n2.3 Method Name(\u30e1\u30bd\u30c3\u30c9\u540d)\n\u30e1\u30bd\u30c3\u30c9\u540d\u306f\u3001 lowerCamelCase \u3067\u66f8\u304d\u307e\u3059\u3002\nMethod names are written in lowerCamelCase.\n\u30e1\u30bd\u30c3\u30c9\u540d\u306e\u59cb\u3081\u306b\u306f\u52d5\u8a5e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u771f\u507d\u5024\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u306e\u5148\u982d\u306b\u306fis\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nMethod names are typically verbs or verb phrases, but return boolean value method are typically \"is\" + parameter name.\n// Good\nstop\nclickButton\n\n// Bad\ncarStop(not stating verb)\n\n\n2.4 Companion-Object Constant field(companion object\u30b9\u30b3\u30fc\u30d7\u5185\u306econstant\u306a\u5909\u6570\u306b\u3064\u3044\u3066)\n\u5b9a\u6570\u540d\u306b\u306f\u3001 CONSTANT_CASE (\u3059\u3079\u3066\u5927\u6587\u5b57\u3067\u8a18\u8ff0\u3057\u3001\u5358\u8a9e\u306e\u533a\u5207\u308c\u76ee\u306b\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc'_'\u3092\u4f7f\u7528\u3057\u305f\u30b1\u30fc\u30b9)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nConstant names use CONSTANT_CASE : all uppercase letters, with words separated by underscores. \n\u5b9a\u6570\u306b\u3059\u308b\u5024\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\nBut what is a constant, exactly?\n\u30af\u30e9\u30b9\u306ecomapanion object\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u8a18\u8ff0\u3057\u305fval\u5909\u6570\u306b\u306f\u3001constant\u30b7\u30f3\u30dc\u30eb\u3092\u3064\u3051\u3001\u3053\u308c\u3092\u5b9a\u6570\u3068\u3057\u307e\u3059\u3002\nEvery constant is a \"companion object constant val field\", but not all static final fields are constants.\n// Constants\ncompanion object {\n    constant val NUMBER: Int = 5\n    constant val NAMES: ImmutableList<String> = ImmutableList.of(\"Ed\", \"Ann\")\n}\n\n\n2.5 Companion-Object var field(companion object\u30b9\u30b3\u30fc\u30d7\u5185\u306evar\u5909\u6570\u306b\u3064\u3044\u3066)\n\u30af\u30e9\u30b9\u306ecomapanion object\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u8a18\u8ff0\u3057\u305fvar\u5909\u6570\u306f\u3001\u3059\u3079\u3066 lowerCamelCase \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nNon\u00adconstant field names (static or otherwise) are written in lowerCamelCase.\n\n2.6 Parameter names(\u5f15\u6570\u306b\u3064\u3044\u3066)\n\u5f15\u6570\u306f\u3001 lowerCamelCase \u3067\u66f8\u304d\u3001\u4e00\u6587\u5b57\u306e\u540d\u524d\u306f\u7528\u3044\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nParameter names are written in lowerCamelCase. One\u00adcharacter parameter names should be avoided.\n\n2.7 Local variable names(\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u6570\u306b\u3064\u3044\u3066)\n\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306f\u3001 lowerCamelCase \u3067\u66f8\u304d\u3001\u9577\u3044\u540d\u524d\u306b\u3064\u3044\u3066\u306f\u67d4\u8edf\u306b\u8981\u7d04\u3057\u307e\u3059\u3002\nLocal variable names are written in lowerCamelCase, and can be abbreviated more liberally than other types of names.\n\u305f\u3060\u3057\u3001\u30eb\u30fc\u30d7\u5206\u306e\u4e2d\u306a\u3069\u3067\u306e\u4e00\u6642\u7684\u306a\u5024\u3092\u9664\u3044\u3066\u3001\u4e00\u6587\u5b57\u306e\u540d\u524d\u306f\u907f\u3051\u907f\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nHowever, one\u00adcharacter names should be avoided, except for temporary and looping variables.\n\n2.8 Type variable names(\u30bf\u30a4\u30d7\u5909\u6570\u306b\u3064\u3044\u3066)\n\u578b\u5909\u6570\u306e\u540d\u524d\u306b\u306f\u3001 1\u6587\u5b57\u304b2\u6587\u5b57\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nEach type variable is named in one of two styles:\n\nA single capital letter, optionally followed by a single numeral (such as E , T , X , T2 )\nA name in the form used for classes, followed by the capital letter T.\n\n\n3 Programming Practices(\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a18\u6cd5)\nKotlin\u3067\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3059\u308b\u3068\u304d\u306e\u7d30\u304b\u3044\u8a18\u6cd5\u306b\u3064\u3044\u3066\n\n3.1 annotation and modifier(\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u4fee\u98fe\u5b50)\n\u30e1\u30bd\u30c3\u30c9\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u4fee\u98fe\u5b50\u3092\u3064\u3051\u308b\u969b\u3001\u8a00\u8a9e\u3082\u3068\u3082\u3068\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u4fee\u98fe\u5b50\u306f\u30e1\u30bd\u30c3\u30c9\u540d\u3068\u540c\u4e00\u306e\u884c\u306b\u66f8\u304d\u3001\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3054\u3068\u306b\u884c\u3092\u5206\u3051\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\nWhen write annotation and symbol your function, non annotation symbol written single line, some annotation written multiline.Please write third party annotations multiline sepalating.\n\u307e\u305f\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u4fee\u98fe\u5b50\u3092\u5217\u6319\u3059\u308b\u9806\u756a\u306b\u3064\u3044\u3066\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u7d71\u4e00\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n// Good\n@Test    // library 2\n@Example // library 1\noverride private fun actionExample() {\n    ...\n}\n\n// Good\n@Someone @Anyone    // library 1 library 1\noverride private fun actionExample() {\n    ...\n}\n\n// Bad\n@Example @Test    // library 1 // library 2\noverride \nprivate fun actionExample() {\n    ...\n}\n\n\n3.2 single line return value function\n\u5024\u3092\u8fd4\u3059\u3001\u4e00\u884c\u3067\u66f8\u3051\u308b\u3088\u3046\u306a\u95a2\u6570\u306e\u5834\u5408{}\u3092\u7528\u3044\u305a\u306b=\u3092\u7528\u3044\u3066\u8a18\u8ff0\u3059\u308b\u3002\u307e\u305f\u3001\u3053\u306e\u969b\u623b\u308a\u578b\u306e\u5024\u306f\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3060\u304c\u3001null\u3092\u53d6\u308b\u304b\u3069\u3046\u304b\u3092\u660e\u793a\u3059\u308b\u305f\u3081\u3001\u7701\u7565\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\nIf single line return value function, using \"=\".\n// Good\nfun add(a: Int, b: Int): Int = a + b\n\n// Bad\nfun add(a: Int, b:Int): Int {\n    return a+b\n}\n\n\n3.3 when return value(when\u306e\u5024\u3092\u8fd4\u3059\u3060\u3051\u306e\u5834\u5408\u306e\u66f8\u304d\u65b9)\nwhen\u3092\u7528\u3044\u3066\u5024\u3092\u8fd4\u3059\u5834\u5408\u3001{}\u3092\u7528\u3044\u305a\u306b=\u3092\u7528\u3044\u3066\u8a18\u8ff0\u3059\u308b\u3002\n// Good\nval name: String = when(animal) {\n    Cat -> \"cat\"\n    Dog -> \"dog\"\n    else -> null\n}\n\n// Bad\nval name: String = when(animal) {\n    Cat -> {\n        \"cat\"\n    }\n    Dog -> {\n        \"dog\"\n    }\n    else -> {\n        null\n    }\n}\n\n\n3.4 always used smart cast(\u30b9\u30de\u30fc\u30c8\u30ad\u30e3\u30b9\u30c8\u306e\u4f7f\u7528)\n\u30b9\u30de\u30fc\u30c8\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u7528\u3067\u304d\u308b\u6642\u306f\u5e38\u306b\u4f7f\u7528\u3057\u3001\u7121\u99c4\u306a\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044\u3002\n\u203b\u3053\u308c\u3089\u304c\u4f7f\u7528\u3067\u304d\u308b\u5834\u5408\u306b\u306f\u3001\u8b66\u544a\u304c\u3067\u308b\n// Good\nval cat = \"cat\"\nif(cat is String) {\n    println(cat)\n}\n\n// Bad\nval cat = \"cat\"\nif(cat is String) {\n    println(cat as String)\n}\n\n\n3.5 always used smart (null / nonnull) cast(\u30b9\u30de\u30fc\u30c8\u306aNull\u30ad\u30e3\u30b9\u30c8\u306e\u4f7f\u7528)\n\u30b9\u30de\u30fc\u30c8\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u3092\u4f7f\u7528\u3067\u304d\u308b\u6642\u306f\u5e38\u306b\u4f7f\u7528\u3057\u3001\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b\u306b\u304a\u3044\u3066\u7121\u99c4\u306a\u5909\u63db\u3092\u884c\u308f\u306a\u3044\u3002\n// Good\nval cat: String? = null\ncat ?: return\nprintln(cat)\n\n// Good\nval cat: String? = null\ncat?.let {\n    println(it)\n}\n\n// Bad\nval cat: String? = null\ncat ?: return\nprintln(cat!!)\n\n\n3.6 it always used(\u4ee3\u66ff\u5909\u6570\u306e\u4f7f\u7528)\n\u7279\u5b9a\u306e\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u304a\u3044\u3066\u5909\u6570\u3068\u3057\u3066it\u3092\u4f7f\u7528\u3067\u304d\u308b\u969b\u306f\u3001it\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u305f\u3060\u3057\u3001it\u304c\u5165\u308c\u5b50\u306b\u306a\u308a\u3001\u9014\u4e2d\u304b\u3089\u5909\u6570\u306e\u53c2\u7167\u304c\u96e3\u3057\u304f\u306a\u308b\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3001\u5909\u6570\u540d\u3092\u5b9a\u7fa9\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3068\u3059\u308b\u3002\n// Good\nval cat: String? = null\ncat?.let {\n    println(it)\n}\n\n// Bad\nval cat: String? = null\ncat?.let {\n    println(cat)\n}\n\n\n3.7 nonnull members declaration nonnull(nonnull\u306a\u5909\u6570\u306e\u5ba3\u8a00)\nNull\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u306a\u3044\u3001\u307e\u305f\u306fnull\u304c\u4e0d\u6b63\u306a\u5024\u3067\u3042\u308b\u5834\u5408\u306fnullable\u306a\u578b\u306b\u305b\u305a\u3002Delegates.notNull()\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u3001nonnull\u306a\u578b\u3092\u5b88\u308b\u5f62\u306b\u3059\u308b\u3002\n\n3.8 use SAM(Single Abstract Method) transform(SAM\u5909\u63db\u306e\u4f7f\u7528)\nSAM\u5909\u63db\u306f\u3001\u62bd\u8c61\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u3092\u7c21\u5358\u306b\u884c\u3048\u308b\u4fbf\u5229\u306a\u6a5f\u80fd\u306e\u305f\u3081\u3001\u57fa\u672c\u7684\u306b\u306f\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u7d99\u627f\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u591a\u304f\u5b58\u5728\u3059\u308b\u969b\u306f\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3069\u308c\u304b\u308f\u304b\u3089\u306a\u3044\u305f\u3081\u3001\u8907\u6570\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u5f15\u6570\u306e\u660e\u793a\u3092\u884c\u3046\u3002\n\n3.9 using java field accesser\nJava\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u3001Kotlin\u3067\u306f\u3001\u578b\u306b\u3088\u3063\u3066get\u3068set\u3092\u7701\u304f\u5f62\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u3067\u304d\u308b\u304b\u304e\u308a\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305f\u3001Java\u306e\u30ea\u30b9\u30c8\u306e\u5024\u53d6\u5f97\u306b\u95a2\u3057\u3066\u3082get\u3067\u306f\u306a\u304f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d[\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024]\u3067\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u203b\u3053\u308c\u3089\u304c\u4f7f\u7528\u3067\u304d\u308b\u5834\u5408\u306b\u306f\u3001\u8b66\u544a\u304c\u3067\u308b\n\nReference\n\nGoogle Java Style\n\nKotlin\u3092\u66f8\u3044\u30662\u30f6\u6708\u307b\u3069\u305f\u3061\u3001Kotlin\u3082\u30d0\u30fc\u30b8\u30e7\u30f3\u304c1.0.0\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u4ed5\u4e8b\u3067\u306e\u5c0e\u5165\u3082\u8996\u91ce\u306b\u30b3\u30b3\u3089\u3078\u3093\u3067\u898f\u7d04\u3068\u3057\u3066\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u82f1\u8a9e\u3068\u65e5\u672c\u8a9e\u4e21\u65b9\u3067\u8aad\u3081\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u82f1\u8a9e\u529b\u304c\u3042\u307e\u308a\u306a\u3044\u306e\u3067\u82f1\u8a9e\u5316\u306f\u9806\u6b21\u884c\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u5354\u529b\u3092\u3057\u3066\u304f\u3060\u3055\u308b\u65b9\u304c\u3044\u308c\u3070\u3001\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51fa\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\uff09\n\n##1 Introduction(\u8aac\u660e)\n\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306eKotlin\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u3059\u3002Kotlin\u306e\u5229\u7528\u3068\u3057\u3066\u3001\u4e3b\u306bAndroid\u3067\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nThis is Kotlin lang coding styles. And some Android coding style in Kotlin.\n\n###1.1 Policy(\u65b9\u91dd)\n\u65b9\u91dd\u3068\u3057\u3066\u3001Kotlin\u306e\u3059\u3063\u304d\u308a\u3057\u305f\u66f8\u304d\u3084\u3059\u3055\u3068\u3001\u578b\u3092\u610f\u8b58\u3057\u305f\u898b\u3084\u3059\u3055\u3092\u610f\u8b58\u3057\u305f\u3001\u30ab\u30b8\u30e5\u30a2\u30eb\u306a\u66f8\u304d\u65b9\u3092\u76ee\u6307\u3059\u3088\u3046\u306a\u898f\u7d04\u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n###1.2 Difinction(\u5b9a\u7fa9)\nKotlin Version: 1.0.0beta1103 (latest version)\n\n##2.Naming(\u547d\u540d\uff09\n\u5404\u7a2e\u547d\u540d\u306b\u898f\u5247\u306b\u3064\u3044\u3066\n\n###2.1 Package Name(\u30d1\u30c3\u30b1\u30fc\u30b8\u540d)\n\u30d1\u30c3\u30b1\u30fc\u30b8\u30cd\u30fc\u30e0\u306f\u3001\u3059\u3079\u3066 **lowercase** \u3067\u66f8\u304d\u3001\u9023\u7d9a\u3057\u305f\u5358\u8a9e\u306f\u5358\u7d14\u306b\u7e4b\u3052\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nPackage names are all lowercase, with consecutive words simply concatenated together.\n\n```example\n// Good\ncom.example.hogefuga\n\n// Bad\ncom.example.hogeFuga\n\ncom.example.hoge_fuga\n```\n\n###2.2 Class Name(\u30af\u30e9\u30b9\u540d)\n\u30af\u30e9\u30b9\u540d\u306f\u3001 **UpperCamelCase** \u3067\u66f8\u304d\u307e\u3059\u3002\nClass names are written in UpperCamelCase. \n\n\u30af\u30e9\u30b9\u540d\u306b\u306f\u3001\u540d\u8a5e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nInterface\u3084\u3001Open Class\u306b\u3082\u540d\u8a5e\u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u5f62\u5bb9\u8a5e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nClass names are typically nouns or noun phrases.\nInterface and Open Class names may also be nouns or noun phrases, but may sometimes be adjectives or adjective phrases instead.\n\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u7279\u5225\u306b\u30eb\u30fc\u30eb\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u547d\u540d\u898f\u5247\u306b\u5f93\u3044\u307e\u3059\u3002\nThere are no specific rules or even well\u00adestablished conventions for naming annotation types.\n\nTest\u3084Activity\u3084Fragment\u306a\u3069\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066\u5927\u304d\u306a\u610f\u5473\u3092\u6301\u3064\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306b\u306f\u3001\u540d\u524d\u306e\u6700\u5f8c\u306b\u305d\u306e\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u4ed8\u3051\u308b\u3002\nActivity classes are name starting the name of the class, and ending Activity.\n\n```example\n// Good\nCharactor\nImmutableList (this is subclass for list class)\nList\nReadable\nHashText (test class)\n\n// Bad\nMove\nIs\n```\n\n###2.3 Method Name(\u30e1\u30bd\u30c3\u30c9\u540d)\n\u30e1\u30bd\u30c3\u30c9\u540d\u306f\u3001 **lowerCamelCase** \u3067\u66f8\u304d\u307e\u3059\u3002\nMethod names are written in lowerCamelCase.\n\n\u30e1\u30bd\u30c3\u30c9\u540d\u306e\u59cb\u3081\u306b\u306f\u52d5\u8a5e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u771f\u507d\u5024\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u306e\u5148\u982d\u306b\u306fis\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nMethod names are typically verbs or verb phrases, but return boolean value method are typically \"is\" + parameter name.\n\n```example\n// Good\nstop\nclickButton\n\n// Bad\ncarStop(not stating verb)\n```\n\n###2.4 Companion-Object Constant field(companion object\u30b9\u30b3\u30fc\u30d7\u5185\u306econstant\u306a\u5909\u6570\u306b\u3064\u3044\u3066)\n\u5b9a\u6570\u540d\u306b\u306f\u3001 **CONSTANT\\_CASE** (\u3059\u3079\u3066\u5927\u6587\u5b57\u3067\u8a18\u8ff0\u3057\u3001\u5358\u8a9e\u306e\u533a\u5207\u308c\u76ee\u306b\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc'\\_'\u3092\u4f7f\u7528\u3057\u305f\u30b1\u30fc\u30b9)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nConstant names use CONSTANT\\_CASE : all uppercase letters, with words separated by underscores. \n\n\u5b9a\u6570\u306b\u3059\u308b\u5024\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\nBut what is a constant, exactly?\n\n\u30af\u30e9\u30b9\u306ecomapanion object\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u8a18\u8ff0\u3057\u305fval\u5909\u6570\u306b\u306f\u3001constant\u30b7\u30f3\u30dc\u30eb\u3092\u3064\u3051\u3001\u3053\u308c\u3092\u5b9a\u6570\u3068\u3057\u307e\u3059\u3002\nEvery constant is a \"companion object constant val field\", but not all static final fields are constants.\n\n```example\n// Constants\ncompanion object {\n\tconstant val NUMBER: Int = 5\n\tconstant val NAMES: ImmutableList<String> = ImmutableList.of(\"Ed\", \"Ann\")\n}\n```\n\n###2.5 Companion-Object var field(companion object\u30b9\u30b3\u30fc\u30d7\u5185\u306evar\u5909\u6570\u306b\u3064\u3044\u3066)\n\u30af\u30e9\u30b9\u306ecomapanion object\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u8a18\u8ff0\u3057\u305fvar\u5909\u6570\u306f\u3001\u3059\u3079\u3066 **lowerCamelCase** \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nNon\u00adconstant field names (static or otherwise) are written in lowerCamelCase.\n\n###2.6 Parameter names(\u5f15\u6570\u306b\u3064\u3044\u3066)\n\u5f15\u6570\u306f\u3001 **lowerCamelCase** \u3067\u66f8\u304d\u3001\u4e00\u6587\u5b57\u306e\u540d\u524d\u306f\u7528\u3044\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nParameter names are written in lowerCamelCase. One\u00adcharacter parameter names should be avoided.\n\n###2.7 Local variable names(\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u6570\u306b\u3064\u3044\u3066)\n\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306f\u3001 **lowerCamelCase** \u3067\u66f8\u304d\u3001\u9577\u3044\u540d\u524d\u306b\u3064\u3044\u3066\u306f\u67d4\u8edf\u306b\u8981\u7d04\u3057\u307e\u3059\u3002\nLocal variable names are written in lowerCamelCase, and can be abbreviated more liberally than other types of names.\n\u305f\u3060\u3057\u3001\u30eb\u30fc\u30d7\u5206\u306e\u4e2d\u306a\u3069\u3067\u306e\u4e00\u6642\u7684\u306a\u5024\u3092\u9664\u3044\u3066\u3001\u4e00\u6587\u5b57\u306e\u540d\u524d\u306f\u907f\u3051\u907f\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nHowever, one\u00adcharacter names should be avoided, except for temporary and looping variables.\n\n###2.8 Type variable names(\u30bf\u30a4\u30d7\u5909\u6570\u306b\u3064\u3044\u3066)\n\u578b\u5909\u6570\u306e\u540d\u524d\u306b\u306f\u3001 1\u6587\u5b57\u304b2\u6587\u5b57\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nEach type variable is named in one of two styles:\n\n- A single capital letter, optionally followed by a single numeral (such as E , T , X , T2 )\n- A name in the form used for classes, followed by the capital letter T.\n\n##3 Programming Practices(\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a18\u6cd5)\nKotlin\u3067\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3059\u308b\u3068\u304d\u306e\u7d30\u304b\u3044\u8a18\u6cd5\u306b\u3064\u3044\u3066\n\n###3.1 annotation and modifier(\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u4fee\u98fe\u5b50)\n\u30e1\u30bd\u30c3\u30c9\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u4fee\u98fe\u5b50\u3092\u3064\u3051\u308b\u969b\u3001\u8a00\u8a9e\u3082\u3068\u3082\u3068\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u4fee\u98fe\u5b50\u306f\u30e1\u30bd\u30c3\u30c9\u540d\u3068\u540c\u4e00\u306e\u884c\u306b\u66f8\u304d\u3001\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3054\u3068\u306b\u884c\u3092\u5206\u3051\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\nWhen write annotation and symbol your function, non annotation symbol written single line, some annotation written multiline.Please write third party annotations multiline sepalating.\n\u307e\u305f\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u4fee\u98fe\u5b50\u3092\u5217\u6319\u3059\u308b\u9806\u756a\u306b\u3064\u3044\u3066\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u7d71\u4e00\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```example\n// Good\n@Test    // library 2\n@Example // library 1\noverride private fun actionExample() {\n\t...\n}\n\n// Good\n@Someone @Anyone    // library 1 library 1\noverride private fun actionExample() {\n\t...\n}\n\n// Bad\n@Example @Test    // library 1 // library 2\noverride \nprivate fun actionExample() {\n\t...\n}\n```\n\n###3.2 single line return value function\n\u5024\u3092\u8fd4\u3059\u3001\u4e00\u884c\u3067\u66f8\u3051\u308b\u3088\u3046\u306a\u95a2\u6570\u306e\u5834\u5408{}\u3092\u7528\u3044\u305a\u306b=\u3092\u7528\u3044\u3066\u8a18\u8ff0\u3059\u308b\u3002\u307e\u305f\u3001\u3053\u306e\u969b\u623b\u308a\u578b\u306e\u5024\u306f\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3060\u304c\u3001null\u3092\u53d6\u308b\u304b\u3069\u3046\u304b\u3092\u660e\u793a\u3059\u308b\u305f\u3081\u3001\u7701\u7565\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\nIf single line return value function, using \"=\".\n\n```example\n// Good\nfun add(a: Int, b: Int): Int = a + b\n\n// Bad\nfun add(a: Int, b:Int): Int {\n\treturn a+b\n}\n```\n\n###3.3 when return value(when\u306e\u5024\u3092\u8fd4\u3059\u3060\u3051\u306e\u5834\u5408\u306e\u66f8\u304d\u65b9)\nwhen\u3092\u7528\u3044\u3066\u5024\u3092\u8fd4\u3059\u5834\u5408\u3001{}\u3092\u7528\u3044\u305a\u306b=\u3092\u7528\u3044\u3066\u8a18\u8ff0\u3059\u308b\u3002\n\n```example\n// Good\nval name: String = when(animal) {\n\tCat -> \"cat\"\n\tDog -> \"dog\"\n\telse -> null\n}\n\n// Bad\nval name: String = when(animal) {\n\tCat -> {\n\t\t\"cat\"\n\t}\n\tDog -> {\n\t\t\"dog\"\n\t}\n\telse -> {\n\t\tnull\n\t}\n}\n```\n\n###3.4 always used smart cast(\u30b9\u30de\u30fc\u30c8\u30ad\u30e3\u30b9\u30c8\u306e\u4f7f\u7528)\n[\u30b9\u30de\u30fc\u30c8\u30ad\u30e3\u30b9\u30c8](https://kotlinlang.org/docs/reference/typecasts.html)\u3092\u4f7f\u7528\u3067\u304d\u308b\u6642\u306f\u5e38\u306b\u4f7f\u7528\u3057\u3001\u7121\u99c4\u306a\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044\u3002\n\u203b\u3053\u308c\u3089\u304c\u4f7f\u7528\u3067\u304d\u308b\u5834\u5408\u306b\u306f\u3001\u8b66\u544a\u304c\u3067\u308b\n\n```example\n// Good\nval cat = \"cat\"\nif(cat is String) {\n\tprintln(cat)\n}\n\n// Bad\nval cat = \"cat\"\nif(cat is String) {\n\tprintln(cat as String)\n}\n```\n\n###3.5 always used smart (null / nonnull) cast(\u30b9\u30de\u30fc\u30c8\u306aNull\u30ad\u30e3\u30b9\u30c8\u306e\u4f7f\u7528)\n\u30b9\u30de\u30fc\u30c8\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u3092\u4f7f\u7528\u3067\u304d\u308b\u6642\u306f\u5e38\u306b\u4f7f\u7528\u3057\u3001\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u578b\u306b\u304a\u3044\u3066\u7121\u99c4\u306a\u5909\u63db\u3092\u884c\u308f\u306a\u3044\u3002\n\n```example\n// Good\nval cat: String? = null\ncat ?: return\nprintln(cat)\n\n// Good\nval cat: String? = null\ncat?.let {\n\tprintln(it)\n}\n\n// Bad\nval cat: String? = null\ncat ?: return\nprintln(cat!!)\n```\n\n###3.6 it always used(\u4ee3\u66ff\u5909\u6570\u306e\u4f7f\u7528)\n\u7279\u5b9a\u306e\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u304a\u3044\u3066\u5909\u6570\u3068\u3057\u3066it\u3092\u4f7f\u7528\u3067\u304d\u308b\u969b\u306f\u3001it\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u305f\u3060\u3057\u3001it\u304c\u5165\u308c\u5b50\u306b\u306a\u308a\u3001\u9014\u4e2d\u304b\u3089\u5909\u6570\u306e\u53c2\u7167\u304c\u96e3\u3057\u304f\u306a\u308b\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3001\u5909\u6570\u540d\u3092\u5b9a\u7fa9\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3068\u3059\u308b\u3002\n\n```example\n// Good\nval cat: String? = null\ncat?.let {\n\tprintln(it)\n}\n\n// Bad\nval cat: String? = null\ncat?.let {\n\tprintln(cat)\n}\n```\n\n###3.7 nonnull members declaration nonnull(nonnull\u306a\u5909\u6570\u306e\u5ba3\u8a00)\nNull\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u306a\u3044\u3001\u307e\u305f\u306fnull\u304c\u4e0d\u6b63\u306a\u5024\u3067\u3042\u308b\u5834\u5408\u306fnullable\u306a\u578b\u306b\u305b\u305a\u3002Delegates.notNull()\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u3001nonnull\u306a\u578b\u3092\u5b88\u308b\u5f62\u306b\u3059\u308b\u3002\n\n###3.8 use SAM(Single Abstract Method) transform(SAM\u5909\u63db\u306e\u4f7f\u7528)\nSAM\u5909\u63db\u306f\u3001\u62bd\u8c61\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u3092\u7c21\u5358\u306b\u884c\u3048\u308b\u4fbf\u5229\u306a\u6a5f\u80fd\u306e\u305f\u3081\u3001\u57fa\u672c\u7684\u306b\u306f\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u7d99\u627f\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u591a\u304f\u5b58\u5728\u3059\u308b\u969b\u306f\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3069\u308c\u304b\u308f\u304b\u3089\u306a\u3044\u305f\u3081\u3001\u8907\u6570\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u5f15\u6570\u306e\u660e\u793a\u3092\u884c\u3046\u3002\n\n###3.9 using java field accesser\nJava\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u3001Kotlin\u3067\u306f\u3001\u578b\u306b\u3088\u3063\u3066get\u3068set\u3092\u7701\u304f\u5f62\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u3067\u304d\u308b\u304b\u304e\u308a\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305f\u3001Java\u306e\u30ea\u30b9\u30c8\u306e\u5024\u53d6\u5f97\u306b\u95a2\u3057\u3066\u3082get\u3067\u306f\u306a\u304f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d[\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024]\u3067\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u203b\u3053\u308c\u3089\u304c\u4f7f\u7528\u3067\u304d\u308b\u5834\u5408\u306b\u306f\u3001\u8b66\u544a\u304c\u3067\u308b\n\n\n##Reference\n\n- [Google Java Style](https://google.github.io/styleguide/javaguide.html)\n", "tags": ["Kotlin", "\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04", "Android"]}