{"context": " More than 1 year has passed since last update.Python\u521d\u5fc3\u8005\u304cScikit-image\u306e\u4f8b\u984c\u3092\u81ea\u5206\u7528\u306b\u4f7f\u3046\u305f\u3081\u306e\u30d2\u30f3\u30c8\nPython\u521d\u5fc3\u8005\u304cScikit-image\u306e\u4f8b\u984c\u3092\u81ea\u5206\u7528\u306b\u4f7f\u3046\u305f\u3081\u306e\u30d2\u30f3\u30c82\u3000\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u51e6\u7406\u3059\u308b\nPython\u521d\u5fc3\u8005\u304cScikit-image\u306e\u4f8b\u984c\u3092\u81ea\u5206\u7528\u306b\u4f7f\u3046\u305f\u3081\u306e\u30d2\u30f3\u30c83\u3000\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\nPython\u521d\u5fc3\u8005\u304cScikit-image\u306e\u4f8b\u984c\u3092\u81ea\u5206\u7528\u306b\u4f7f\u3046\u305f\u3081\u306e\u30d2\u30f3\u30c84 GUI\u3092\u4f7f\u3046\n\u306b\u7d9a\u3044\u3066\u3001Scikit-image\u306e\u4f8b\u984c\u3092\u3001\u307b\u3093\u306e\u5c11\u3057\u3060\u3051\u6539\u5909\u3057\u3066\u3001\u904a\u3093\u3067\u307f\u308b\u305f\u3081\u306b\u3001Python\u521d\u5fc3\u8005\u5411\u3051\u306e\u5185\u5bb9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001Python\u306e\u4fbf\u5229\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\nPython\u306b\u306f\u6a19\u6e96\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3067\u3082HTTP\u30b5\u30fc\u30d0\u30fc\u3084POP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u66f8\u3051\u308b\u307b\u3069\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5145\u5b9f\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u3092Windows\u3084Linux\u3084Mac\u3067\u5171\u901a\u306b\u4f7f\u3048\u308b\u3068\u3044\u3046\u7279\u5fb4\u3092\u3082\u3063\u3066\u3044\u307e\u3059\u3002CPU\u306e\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u554f\u984c\u3084\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u554f\u984c\u306b\u982d\u3092\u60a9\u307e\u305b\u308b\u3053\u3068\u306a\u3057\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30d6\u30ed\u30b0\u8a18\u4e8b Web\u30ab\u30e1\u30e9\u306e\u753b\u50cf\u3092python\u306esocket\u3092\u4f7f\u3063\u3066\u8ee2\u9001\u3059\u308b\n\u306b\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30ab\u30e1\u30e9\u753b\u50cf\u3092\u53d6\u5f97\u3057\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u753b\u50cf\u3092\u53d7\u3051\u53d6\u308a\u8868\u793a\u3059\u308b\u3082\u306e\u3067\u3059\u3002\nPython \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea SocketServer \u2014 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b5\u30fc\u30d0\u69cb\u7bc9\u306e\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\u3068OpenCV\u306e\u6a5f\u80fd(import cv2\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3082\u306e)\u3060\u3051\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30ab\u30e1\u30e9\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nOS\u4f9d\u5b58\u6027\u3082CPU\u306e\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u554f\u984c\u306b\u3082\u307e\u3063\u305f\u304f\u60a9\u307e\u305b\u3089\u308c\u308b\u3053\u3068\u306a\u304f\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001\u3053\u306eweb\u4f8b\u984c\u306eweb\u30b5\u30fc\u30d0\u30fc\u4e0a\u3067\u753b\u50cf\u3092\u52a0\u5de5\u3057\u3066\u753b\u50cf\u3092\u914d\u4fe1\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\u30b5\u30fc\u30d0\u30fc\u5074\u3067OpenCV\u3067\u53d6\u5f97\u3057\u305f\u753b\u50cf\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u524d\u306b\u3001\u753b\u50cf\u3092\u52a0\u5de5\u3057\u307e\u3057\u3087\u3046\u3002\nNormalized Cut\n\n\u306e\u4f8b\u984c\u3067\u3001\u5165\u529b\u753b\u50cf\u3092\u5909\u3048\u3066\u307f\u3088\u3046\u3002\nNormalized Cut\u3000\u3092\u65bd\u3057\u305f\u753b\u50cf\u306f\u3001\u5143\u753b\u50cf\u304b\u3089\u7d30\u304b\u306a\u7279\u5fb4\u304c\u5931\u308f\u308c\u308b\u306e\u3067\u3001\n\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u306b\u82e5\u5e72\u914d\u616e\u3057\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30ab\u30e1\u30e9\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u3053\u3067\u306f\u3001scikit-image\u306eNormalized Cut\u306e\u4f8b\u984c\u304b\u3089\u4ee5\u4e0b\u306e\u90e8\u5206\u3092\u95a2\u6570\u3068\u3057\u3066\u53d6\u308a\u51fa\u3057\u307e\u3057\u305f\u3002\nfrom skimage import segmentation, color\n\ndef plotNcut(img):    \n    labels1 = segmentation.slic(img, compactness=30, n_segments=200)\n    out1 = color.label2rgb(labels1, img, kind='avg')\n    return out1\n\n\u30d6\u30ed\u30b0\u8a18\u4e8b Web\u30ab\u30e1\u30e9\u306e\u753b\u50cf\u3092python\u306esocket\u3092\u4f7f\u3063\u3066\u8ee2\u9001\u3059\u308b\n\u306b\u3042\u308b\u30b5\u30fc\u30d0\u30fc\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\nimport cv2.cv as cv\n\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306fnumpy\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u4f7f\u3046\u305f\u3081\u306b\nimport cv2\n\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bcv2\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\ncap = cv2.VideoCapture(cameraid)\nret, frame = cap.read()\njpegstring = cv2.imencode('.jpeg', frame)[1].tostring()\n\n\u3053\u306e\u3088\u3046\u306b\u3001Python\u306b\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u6210\u679c\u3092\u7c21\u5358\u306b\u53d6\u308a\u5165\u308c\u3066\u3001scikit-image\u3084OpenCV\u3092\u5229\u7528\u3057\u305f\u753b\u50cf\u51e6\u7406\u30fb\u753b\u50cf\u8a8d\u8b58\u3092\u7d44\u307f\u8fbc\u3080\u3053\u3068\u304c\u3068\u3066\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002Windows\u4e0a\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u3001ARM\u30d9\u30fc\u30b9\u306eLinux\u4e0a\u3067\u3082\u5bb9\u6613\u306b\u52d5\u4f5c\u53ef\u80fd\u3067\u3059\u3002\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u9055\u3046CPU\u3067\u3082\u3001\u305d\u306e\u9055\u3044\u3092\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3082\u5229\u70b9\u3067\u3059\u3002\n\nserver.py\n\"\"\"\n webcamera server\n  for opencv 2.3\n\"\"\"\n\nimport SocketServer\nimport cv2\n\nfrom skimage import segmentation, color\n\ndef plotNcut(img):    \n    labels1 = segmentation.slic(img, compactness=30, n_segments=200)\n    out1 = color.label2rgb(labels1, img, kind='avg')\n    return out1\n\nclass TCPHandler(SocketServer.BaseRequestHandler):\n    capture = ''\n\n    def handle(self):\n        # self.request is the TCP socket connected to the client\n        self.data = self.request.recv(1024).strip()\n        print \"%s connected:\" % self.client_address[0]\n        ret, frame = cap.read()\n        frame = plotNcut(frame)\n\n        jpegstring = cv2.imencode('.jpeg', frame)[1].tostring()\n        print len(jpegstring)\n        self.request.send(jpegstring)\n\nif __name__ == \"__main__\":\n    HOST, PORT = '127.0.0.1', 12345\n\n    #init camera\n    cameraid = 0\n    cap = cv2.VideoCapture(cameraid)\n    cap.set(3, 640)\n    cap.set(4, 480)\n    if not cap:\n        print \"Could not open camera\"\n        exit()\n\n    server = SocketServer.TCPServer((HOST, PORT), TCPHandler)\n\n    # Activate the server; this will keep running until you\n    # interrupt the program with Ctrl-C\n    server.capture = cap\n    server.serve_forever()\n\n\n\n\nclient.py\n'''\n  Image receiver\n  for OpenCV 2.4 python interface\n'''\n\nimport socket\nimport numpy\nimport cv2\n\ndef getImageFromServer(HOST, PORT):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((HOST, PORT))\n    sock.send('HELLO\\n')\n    recvlen = 100\n    buffer = ''\n    while recvlen > 0:\n        receivedstr = sock.recv(1024*8)\n        recvlen = len(receivedstr)\n        buffer += receivedstr\n\n    print '%d bytes received' %len(buffer)\n    narray = numpy.fromstring(buffer, dtype='uint8')\n    decimg = cv2.imdecode(narray, 1)\n    sock.close()\n    return decimg\n\nif __name__ == \"__main__\":\n    HOST, PORT = \"127.0.0.1\", 12345\n\n    # Receive data from the server and shut down\n\n    while 1:\n        img = getImageFromServer(HOST, PORT)\n        cv2.imshow('Capture', img)\n        key = cv2.waitKey(100)\n        if(int(key) > 27):\n            break\n        img = ''\n\n\n\n\n\u4ee5\u4e0a\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f Web\u30ab\u30e1\u30e9\u306e\u753b\u50cf\u3092python\u306esocket\u3092\u4f7f\u3063\u3066\u8ee2\u9001\u3059\u308b\n\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3093\u306e\u308f\u305a\u304b\u6539\u5909\u3057\u305f\u3082\u306e\u3067\u3059\u3002client.py\u306e\u65b9\u306f\u3001\u307b\u3068\u3093\u3069\u305d\u306e\u307e\u307e\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u9023\u643a\u3092\u5bb9\u6613\u306b\u3067\u304d\u308b\u306e\u304cPython\u306e\u9b45\u529b\u306e\uff11\u3064\u3067\u3059\u3002\n\n\n\u8ffd\u52a0\uff1a\u753b\u50cf\u52a0\u5de5\u30b5\u30fc\u30d0\u30fc\n\n\u30b5\u30fc\u30d0\u30fc\u3067\u306f\u753b\u50cf\u306e\u52a0\u5de5\u3060\u3051\u3092\u3059\u308b\u4f8b\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u4eca\u5ea6\u306e\u4f8b\u3067\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u64ae\u5f71\u3057\u305f\u753b\u50cf\u3092\u9001\u4fe1\u3057\u3066\n\u30b5\u30fc\u30d0\u30fc\u3067\u52a0\u5de5\u3057\u305f\u753b\u50cf\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3059\u4f8b\u3067\u3059\u3002\n\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u3068\u304d\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u7d42\u308f\u308a\u304c\u5224\u5225\u3057\u304c\u305f\u3044\u306e\u3067\u3001\"DONE\"\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u9001\u4fe1\u3057\u3066\u305d\u308c\u304c\u9001\u3089\u308c\u305f\u3068\u304d\u306b\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u65e2\u306b\u7d42\u308f\u308a\u306b\u9054\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u65b9\u5f0f\u306b\u3057\u305f\u3002\n\u53c2\u8003\uff1a\u30bd\u30b1\u30c3\u30c8\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 HOWTO\n\nserver2.py\n#pylint:disable=C0103\n\"\"\"\nimage processing server\n\"\"\"\n\nimport SocketServer\nimport cv2\nimport numpy as np\n\nfrom skimage import segmentation, color\n\ndef Ncut(img):\n    \"\"\"\n    Normalized Cut in scikit-image\n    \"\"\"\n    labels1 = segmentation.slic(img, compactness=30, n_segments=200)\n    out1 = color.label2rgb(labels1, img, kind='avg')\n    return out1\n\nclass TCPHandler(SocketServer.BaseRequestHandler):\n    capture = ''\n\n    def handle(self):\n        \"\"\"\n        Image processing server\n        \"\"\"\n        # self.request is the TCP socket connected to the client\n\n        recvlen = 100\n        buff = ''\n        while recvlen > 0:\n            receivedstr = self.request.recv(1024*8)\n            if receivedstr.find(\"DONE\") > -1:\n                break\n            recvlen = len(receivedstr)\n            buff += receivedstr\n\n        print '%d bytes received' % len(buff)\n\n        narray = np.fromstring(buff, dtype='uint8')\n        frame = cv2.imdecode(narray, 1)\n        print \"decoded image\", frame.shape\n        frame = Ncut(frame)\n        print \"passed Ncut\"\n        jpegstring = cv2.imencode('.jpeg', frame)[1].tostring()\n        print len(jpegstring)\n        self.request.send(jpegstring)\n\nif __name__ == \"__main__\":\n    HOST, PORT = '127.0.0.1', 12345\n\n    server = SocketServer.TCPServer((HOST, PORT), TCPHandler)\n\n    # Activate the server; this will keep running until you\n    # interrupt the program with Ctrl-C\n    server.serve_forever()\n\n\n\nclient2.py\n#pylint:disable=C0103\n'''\n  Image client\n'''\n\nimport socket\nimport numpy as np\nimport cv2\n\ndef getProcessedImageFromServer(HOST, PORT, frame):\n    \"\"\"\n    send image and recieve proccessed image from the server\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((HOST, PORT))\n\n    jpegstring = cv2.imencode('.jpeg', frame)[1].tostring()\n    print len(jpegstring)\n    sock.send(jpegstring)\n    sock.send(\"DONE\\n\")\n\n    recvlen = 100\n    buff = ''\n    while recvlen > 0:\n        receivedstr = sock.recv(1024*8)\n        recvlen = len(receivedstr)\n        buff += receivedstr\n\n    print '%d bytes received' %len(buff)\n    narray = np.fromstring(buff, dtype='uint8')\n    decimg = cv2.imdecode(narray, 1)\n    sock.close()\n    return decimg\n\nif __name__ == \"__main__\":\n    HOST, PORT = \"127.0.0.1\", 12345\n\n    # Receive data from the server and shut down\n    cameraid = 0\n    cap = cv2.VideoCapture(cameraid)\n    cap.set(3, 320)\n    cap.set(4, 240)\n\n    while 1:\n        ret, frame = cap.read()\n        img = getProcessedImageFromServer(HOST, PORT, frame)\n        cv2.imshow('processed', img)\n        key = cv2.waitKey(100)\n        if int(key) > 27:\n            break\n        img = ''\n\n\n\n\n\u4ed8\u8a18\uff1aBoost\u3068C++\u3067\u8a18\u8ff0\u3059\u308b\u3068\u304d\u306b\u306f\n\n\u3000\u4eca\u308f\u305f\u3057\u304cC++\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3057\u305f\u3089\u3001Boost\u3092\u4f7f\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nip::tcp::socket\nboostjp : Boost\u65e5\u672c\u8a9e\u60c5\u5831\u30b5\u30a4\u30c8\n Qiita\u8a18\u4e8b Boost.Asio \u3067 Raw Socket \u3092\u958b\u304f\u30e1\u30e2\n\u6614\u306a\u304c\u3089\u306eUnix\u7531\u6765\u306eC\u306esocket\u30e9\u30a4\u30d6\u30e9\u30ea\uff1a\n\u3000TCP/IP\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5207\u308a\u958b\u3044\u3066\u304d\u305f\u6642\u4ee3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308a\u3001\u65b0\u305f\u306b\u66f8\u304d\u59cb\u3081\u308b\u306e\u306b\u4f7f\u3046\u3079\u304d\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306f\u601d\u3048\u307e\u305b\u3093\u3002\n \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u4f5c\u3089\u308c\u305f\u4ee5\u964d\u306b\u3001unicode\u304c\u767b\u5834\u3057\u305f\u308a\u3001\u6a19\u6e96\u5316\u3055\u308c\u305f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002Unix/Liunx\u306e\u6a19\u6e96\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5f8c\u65b9\u4e92\u63db\u6027\u304c\u91cd\u8981\u306a\u305f\u3081\u306b\u3001\u305d\u308c\u3089\u306e\u95a2\u6570\u3092\u6368\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\nWindows\u56fa\u6709\u306esocket\u30e9\u30a4\u30d6\u30e9\u30ea\uff1a\n\u3000Unix\u306esocket\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u304b\u306a\u308a\u7570\u306a\u3063\u3066\u304a\u308a\u3001\u305d\u3053\u3067\u8a18\u8ff0\u3057\u305f\u95a2\u6570\u3092Linux\u306b\u79fb\u690d\u3059\u308b\u306e\u306f\u5bb9\u6613\u305d\u3046\u306b\u306f\u601d\u3048\u307e\u305b\u3093\u3002\n\n\u4ed8\u8a18\uff1asocket\u306b\u3088\u308b\u901a\u4fe1\u3092\u7528\u3044\u308b\u3053\u3068\u306e\u610f\u7fa9\n\n\u8907\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u9593\u3067socket\u306b\u3088\u308b\u901a\u4fe1\u3092\u5229\u7528\u3059\u308c\u3070\u3001\n C++\u3067\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 <-> Python\u3067\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\u3068\u3044\u3046\u65b9\u5f0f\u3067\u5168\u4f53\u306e\u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305d\u3046\u3059\u308c\u3070\u3001Python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092C\uff0b\uff0b\u306b\u30ea\u30f3\u30af\u3059\u308b\u3002C++\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Python\u304b\u3089\u30ea\u30f3\u30af\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3063\u305f\u4f5c\u696d\u304c\u4e0d\u5fc5\u8981\u306a\u307e\u307e\u3001\u6a5f\u80fd\u3092\u9023\u7d50\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nos.system\uff08cmd\uff09os \u2014 \u96d1\u591a\u306a\u30aa\u30da\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\nsubprocess.Popen() subprocess \u2014 \u30b5\u30d6\u30d7\u30ed\u30bb\u30b9\u7ba1\u7406\n\u3092\u4f7f\u3046\u5834\u5408\u306b\u306f\u3001\u6bce\u56de\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3057\u3066\u7d42\u4e86\u3059\u308b\u3068\u3044\u3046\u3068\u3066\u3082\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u9ad8\u3044\u624b\u9806\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3057\u3066\u304a\u3044\u305f\u307e\u307e\u306b\u3057\u3066\u304a\u3044\u3066\u3001socket\u901a\u4fe1\u3092\u7528\u3044\u3066\u5b9f\u73fe\u3059\u308c\u3070\u3001\u305d\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u4ed8\u8a18\uff1aPython\u3092\u7528\u3044\u305fweb\u30b5\u30fc\u30d0\u30fc\n\nPython\u3092\u7528\u3044\u305fweb\u30b5\u30fc\u30d0\u30fc\u306e\u4f8b\u306b\u306fCherryPy\u304c\u3042\u308b\u3002\u300c\u5b9f\u8df5\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u300d\u3067\u306fCherryPy\u3092\u7528\u3044\u305f\u753b\u50cf\u691c\u7d22\u306eweb\u30b5\u30fc\u30d0\u30fc\u306e\u4f8b\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\n\u4ed8\u8a18\uff1aC++\u306e\u5834\u5408\u3060\u3063\u305f\u3089\n\nC/C++\u306e\u5834\u5408\u3060\u3063\u305f\u3089\u3001OpenCV\u3084\u6a5f\u68b0\u5b66\u7fd2\u306b\u95a2\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u30b9\u30ad\u30eb\u3092\u6301\u3061\u3064\u3064\u3001\u30b5\u30fc\u30d0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u306esocket\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u540c\u6642\u306b\u66f8\u3051\u308b\u30b9\u30ad\u30eb\u3092\u6301\u3064\u3053\u3068\u306f\u3068\u3066\u3082\u96e3\u3057\u3044\u3053\u3068\u3067\u3059\u3002Windows\u3067\u306esocket\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068Linux\u3067\u306esocket\u304c\u6a19\u6e96\u3067\u306f\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3001\u305d\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u96e3\u3057\u304f\u3057\u3066\u3057\u307e\u3046\u3002\n\u30d2\u30f3\u30c86\u3000Python\u306e\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3059\u308b\n[Python\u521d\u5fc3\u8005\u304cScikit-image\u306e\u4f8b\u984c\u3092\u81ea\u5206\u7528\u306b\u4f7f\u3046\u305f\u3081\u306e\u30d2\u30f3\u30c8](http://qiita.com/nonbiri15/items/ae1c51abd65faf27d99f)\n[Python\u521d\u5fc3\u8005\u304cScikit-image\u306e\u4f8b\u984c\u3092\u81ea\u5206\u7528\u306b\u4f7f\u3046\u305f\u3081\u306e\u30d2\u30f3\u30c82\u3000\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u51e6\u7406\u3059\u308b](http://qiita.com/nonbiri15/items/f50857dc555064134db6)\n[Python\u521d\u5fc3\u8005\u304cScikit-image\u306e\u4f8b\u984c\u3092\u81ea\u5206\u7528\u306b\u4f7f\u3046\u305f\u3081\u306e\u30d2\u30f3\u30c83\u3000\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080](http://qiita.com/nonbiri15/items/b5b4b1127e12f0abb766)\n[Python\u521d\u5fc3\u8005\u304cScikit-image\u306e\u4f8b\u984c\u3092\u81ea\u5206\u7528\u306b\u4f7f\u3046\u305f\u3081\u306e\u30d2\u30f3\u30c84 GUI\u3092\u4f7f\u3046](http://qiita.com/nonbiri15/items/1e1a1cf668c84178405e)\n\u306b\u7d9a\u3044\u3066\u3001[Scikit-image](http://scikit-image.org/docs/dev/auto_examples/)\u306e\u4f8b\u984c\u3092\u3001\u307b\u3093\u306e\u5c11\u3057\u3060\u3051\u6539\u5909\u3057\u3066\u3001\u904a\u3093\u3067\u307f\u308b\u305f\u3081\u306b\u3001Python\u521d\u5fc3\u8005\u5411\u3051\u306e\u5185\u5bb9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3001Python\u306e\u4fbf\u5229\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\nPython\u306b\u306f\u6a19\u6e96\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3067\u3082[HTTP\u30b5\u30fc\u30d0\u30fc](BaseHTTPServer \u2014 \u57fa\u672c\u7684\u306a\u6a5f\u80fd\u3092\u6301\u3064 HTTP \u30b5\u30fc\u30d0)\u3084[POP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8](poplib \u2014 POP3 \u30d7\u30ed\u30c8\u30b3\u30eb\u30af\u30e9\u30a4\u30a2\u30f3\u30c8)\u304c\u66f8\u3051\u308b\u307b\u3069\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5145\u5b9f\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u3092Windows\u3084Linux\u3084Mac\u3067\u5171\u901a\u306b\u4f7f\u3048\u308b\u3068\u3044\u3046\u7279\u5fb4\u3092\u3082\u3063\u3066\u3044\u307e\u3059\u3002CPU\u306e\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u554f\u984c\u3084\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u554f\u984c\u306b\u982d\u3092\u60a9\u307e\u305b\u308b\u3053\u3068\u306a\u3057\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\n\u30d6\u30ed\u30b0\u8a18\u4e8b [Web\u30ab\u30e1\u30e9\u306e\u753b\u50cf\u3092python\u306esocket\u3092\u4f7f\u3063\u3066\u8ee2\u9001\u3059\u308b](http://playwithopencv.blogspot.jp/2012/07/webpythonsocket.html)\n\n\u306b\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30ab\u30e1\u30e9\u753b\u50cf\u3092\u53d6\u5f97\u3057\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u753b\u50cf\u3092\u53d7\u3051\u53d6\u308a\u8868\u793a\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n\nPython \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea [SocketServer \u2014 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b5\u30fc\u30d0\u69cb\u7bc9\u306e\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af](http://docs.python.jp/2/library/socketserver.html)\n\u3068OpenCV\u306e\u6a5f\u80fd(import cv2\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3082\u306e)\u3060\u3051\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30ab\u30e1\u30e9\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nOS\u4f9d\u5b58\u6027\u3082CPU\u306e\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u554f\u984c\u306b\u3082\u307e\u3063\u305f\u304f\u60a9\u307e\u305b\u3089\u308c\u308b\u3053\u3068\u306a\u304f\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3001\u3053\u306eweb\u4f8b\u984c\u306eweb\u30b5\u30fc\u30d0\u30fc\u4e0a\u3067\u753b\u50cf\u3092\u52a0\u5de5\u3057\u3066\u753b\u50cf\u3092\u914d\u4fe1\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u30fc\u5074\u3067OpenCV\u3067\u53d6\u5f97\u3057\u305f\u753b\u50cf\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u524d\u306b\u3001\u753b\u50cf\u3092\u52a0\u5de5\u3057\u307e\u3057\u3087\u3046\u3002\n\n[Normalized Cut]\n(http://scikit-image.org/docs/dev/auto_examples/segmentation/plot_ncut.html#example-segmentation-plot-ncut-py)\n![Normalized Cut](http://scikit-image.org/docs/dev/_images/plot_ncut.png)\n\u306e\u4f8b\u984c\u3067\u3001\u5165\u529b\u753b\u50cf\u3092\u5909\u3048\u3066\u307f\u3088\u3046\u3002\n\nNormalized Cut\u3000\u3092\u65bd\u3057\u305f\u753b\u50cf\u306f\u3001\u5143\u753b\u50cf\u304b\u3089\u7d30\u304b\u306a\u7279\u5fb4\u304c\u5931\u308f\u308c\u308b\u306e\u3067\u3001\n\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u306b\u82e5\u5e72\u914d\u616e\u3057\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30ab\u30e1\u30e9\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3053\u3053\u3067\u306f\u3001scikit-image\u306eNormalized Cut\u306e\u4f8b\u984c\u304b\u3089\u4ee5\u4e0b\u306e\u90e8\u5206\u3092\u95a2\u6570\u3068\u3057\u3066\u53d6\u308a\u51fa\u3057\u307e\u3057\u305f\u3002\n\n```.py:\nfrom skimage import segmentation, color\n\ndef plotNcut(img):    \n    labels1 = segmentation.slic(img, compactness=30, n_segments=200)\n    out1 = color.label2rgb(labels1, img, kind='avg')\n    return out1\n```\n\n\u30d6\u30ed\u30b0\u8a18\u4e8b Web\u30ab\u30e1\u30e9\u306e\u753b\u50cf\u3092python\u306esocket\u3092\u4f7f\u3063\u3066\u8ee2\u9001\u3059\u308b\n\u306b\u3042\u308b\u30b5\u30fc\u30d0\u30fc\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\nimport cv2.cv as cv  \n\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306fnumpy\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u4f7f\u3046\u305f\u3081\u306b\nimport cv2\n\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bcv2\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```.py:    \ncap = cv2.VideoCapture(cameraid)\nret, frame = cap.read()\njpegstring = cv2.imencode('.jpeg', frame)[1].tostring()\n```\n\n\n\n\u3053\u306e\u3088\u3046\u306b\u3001Python\u306b\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u6210\u679c\u3092\u7c21\u5358\u306b\u53d6\u308a\u5165\u308c\u3066\u3001scikit-image\u3084OpenCV\u3092\u5229\u7528\u3057\u305f\u753b\u50cf\u51e6\u7406\u30fb\u753b\u50cf\u8a8d\u8b58\u3092\u7d44\u307f\u8fbc\u3080\u3053\u3068\u304c\u3068\u3066\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002Windows\u4e0a\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u3001ARM\u30d9\u30fc\u30b9\u306eLinux\u4e0a\u3067\u3082\u5bb9\u6613\u306b\u52d5\u4f5c\u53ef\u80fd\u3067\u3059\u3002\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u9055\u3046CPU\u3067\u3082\u3001\u305d\u306e\u9055\u3044\u3092\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3082\u5229\u70b9\u3067\u3059\u3002\n\n```.py:server.py\n\"\"\"\n webcamera server\n  for opencv 2.3\n\"\"\"\n\nimport SocketServer\nimport cv2\n\nfrom skimage import segmentation, color\n\ndef plotNcut(img):    \n    labels1 = segmentation.slic(img, compactness=30, n_segments=200)\n    out1 = color.label2rgb(labels1, img, kind='avg')\n    return out1\n\nclass TCPHandler(SocketServer.BaseRequestHandler):\n    capture = ''\n\n    def handle(self):\n        # self.request is the TCP socket connected to the client\n        self.data = self.request.recv(1024).strip()\n        print \"%s connected:\" % self.client_address[0]\n        ret, frame = cap.read()\n        frame = plotNcut(frame)\n\n        jpegstring = cv2.imencode('.jpeg', frame)[1].tostring()\n        print len(jpegstring)\n        self.request.send(jpegstring)\n\nif __name__ == \"__main__\":\n    HOST, PORT = '127.0.0.1', 12345\n\n    #init camera\n    cameraid = 0\n    cap = cv2.VideoCapture(cameraid)\n    cap.set(3, 640)\n    cap.set(4, 480)\n    if not cap:\n        print \"Could not open camera\"\n        exit()\n\n    server = SocketServer.TCPServer((HOST, PORT), TCPHandler)\n\n    # Activate the server; this will keep running until you\n    # interrupt the program with Ctrl-C\n    server.capture = cap\n    server.serve_forever()\n\n```\n\n```.py:client.py\n'''\n  Image receiver\n  for OpenCV 2.4 python interface\n'''\n\nimport socket\nimport numpy\nimport cv2\n\ndef getImageFromServer(HOST, PORT):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((HOST, PORT))\n    sock.send('HELLO\\n')\n    recvlen = 100\n    buffer = ''\n    while recvlen > 0:\n        receivedstr = sock.recv(1024*8)\n        recvlen = len(receivedstr)\n        buffer += receivedstr\n\n    print '%d bytes received' %len(buffer)\n    narray = numpy.fromstring(buffer, dtype='uint8')\n    decimg = cv2.imdecode(narray, 1)\n    sock.close()\n    return decimg\n\nif __name__ == \"__main__\":\n    HOST, PORT = \"127.0.0.1\", 12345\n    \n    # Receive data from the server and shut down\n\n    while 1:\n        img = getImageFromServer(HOST, PORT)\n        cv2.imshow('Capture', img)\n        key = cv2.waitKey(100)\n        if(int(key) > 27):\n            break\n        img = ''\n    \n\n```\n\n\u4ee5\u4e0a\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f [Web\u30ab\u30e1\u30e9\u306e\u753b\u50cf\u3092python\u306esocket\u3092\u4f7f\u3063\u3066\u8ee2\u9001\u3059\u308b](http://playwithopencv.blogspot.jp/2012/07/webpythonsocket.html)\n\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3093\u306e\u308f\u305a\u304b\u6539\u5909\u3057\u305f\u3082\u306e\u3067\u3059\u3002client.py\u306e\u65b9\u306f\u3001\u307b\u3068\u3093\u3069\u305d\u306e\u307e\u307e\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u9023\u643a\u3092\u5bb9\u6613\u306b\u3067\u304d\u308b\u306e\u304cPython\u306e\u9b45\u529b\u306e\uff11\u3064\u3067\u3059\u3002\n\n----\n###**\u8ffd\u52a0\uff1a\u753b\u50cf\u52a0\u5de5\u30b5\u30fc\u30d0\u30fc**\n\u30b5\u30fc\u30d0\u30fc\u3067\u306f\u753b\u50cf\u306e\u52a0\u5de5\u3060\u3051\u3092\u3059\u308b\u4f8b\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u4eca\u5ea6\u306e\u4f8b\u3067\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u64ae\u5f71\u3057\u305f\u753b\u50cf\u3092\u9001\u4fe1\u3057\u3066\n\u30b5\u30fc\u30d0\u30fc\u3067\u52a0\u5de5\u3057\u305f\u753b\u50cf\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3059\u4f8b\u3067\u3059\u3002\n\n\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u3068\u304d\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u7d42\u308f\u308a\u304c\u5224\u5225\u3057\u304c\u305f\u3044\u306e\u3067\u3001\"DONE\"\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u9001\u4fe1\u3057\u3066\u305d\u308c\u304c\u9001\u3089\u308c\u305f\u3068\u304d\u306b\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u65e2\u306b\u7d42\u308f\u308a\u306b\u9054\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u65b9\u5f0f\u306b\u3057\u305f\u3002\n\u53c2\u8003\uff1a[\u30bd\u30b1\u30c3\u30c8\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 HOWTO](http://docs.python.jp/2/howto/sockets.html)\n\n\n\n```.py:server2.py\n#pylint:disable=C0103\n\"\"\"\nimage processing server\n\"\"\"\n\nimport SocketServer\nimport cv2\nimport numpy as np\n\nfrom skimage import segmentation, color\n\ndef Ncut(img):\n    \"\"\"\n    Normalized Cut in scikit-image\n    \"\"\"\n    labels1 = segmentation.slic(img, compactness=30, n_segments=200)\n    out1 = color.label2rgb(labels1, img, kind='avg')\n    return out1\n\nclass TCPHandler(SocketServer.BaseRequestHandler):\n    capture = ''\n\n    def handle(self):\n        \"\"\"\n        Image processing server\n        \"\"\"\n        # self.request is the TCP socket connected to the client\n\n        recvlen = 100\n        buff = ''\n        while recvlen > 0:\n            receivedstr = self.request.recv(1024*8)\n            if receivedstr.find(\"DONE\") > -1:\n                break\n            recvlen = len(receivedstr)\n            buff += receivedstr\n\n        print '%d bytes received' % len(buff)\n\n        narray = np.fromstring(buff, dtype='uint8')\n        frame = cv2.imdecode(narray, 1)\n        print \"decoded image\", frame.shape\n        frame = Ncut(frame)\n        print \"passed Ncut\"\n        jpegstring = cv2.imencode('.jpeg', frame)[1].tostring()\n        print len(jpegstring)\n        self.request.send(jpegstring)\n\nif __name__ == \"__main__\":\n    HOST, PORT = '127.0.0.1', 12345\n\n    server = SocketServer.TCPServer((HOST, PORT), TCPHandler)\n\n    # Activate the server; this will keep running until you\n    # interrupt the program with Ctrl-C\n    server.serve_forever()\n```\n\n\n```.py:client2.py\n#pylint:disable=C0103\n'''\n  Image client\n'''\n\nimport socket\nimport numpy as np\nimport cv2\n\ndef getProcessedImageFromServer(HOST, PORT, frame):\n    \"\"\"\n    send image and recieve proccessed image from the server\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((HOST, PORT))\n\n    jpegstring = cv2.imencode('.jpeg', frame)[1].tostring()\n    print len(jpegstring)\n    sock.send(jpegstring)\n    sock.send(\"DONE\\n\")\n\n    recvlen = 100\n    buff = ''\n    while recvlen > 0:\n        receivedstr = sock.recv(1024*8)\n        recvlen = len(receivedstr)\n        buff += receivedstr\n\n    print '%d bytes received' %len(buff)\n    narray = np.fromstring(buff, dtype='uint8')\n    decimg = cv2.imdecode(narray, 1)\n    sock.close()\n    return decimg\n\nif __name__ == \"__main__\":\n    HOST, PORT = \"127.0.0.1\", 12345\n\n    # Receive data from the server and shut down\n    cameraid = 0\n    cap = cv2.VideoCapture(cameraid)\n    cap.set(3, 320)\n    cap.set(4, 240)\n\n    while 1:\n        ret, frame = cap.read()\n        img = getProcessedImageFromServer(HOST, PORT, frame)\n        cv2.imshow('processed', img)\n        key = cv2.waitKey(100)\n        if int(key) > 27:\n            break\n        img = ''\n\n```\n\n\n\n###**\u4ed8\u8a18\uff1aBoost\u3068C++\u3067\u8a18\u8ff0\u3059\u308b\u3068\u304d\u306b\u306f**\n\u3000\u4eca\u308f\u305f\u3057\u304cC++\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3057\u305f\u3089\u3001Boost\u3092\u4f7f\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n [ip::tcp::socket]\n (http://www.boost.org/doc/libs/1_55_0/doc/html/boost_asio/reference/ip__tcp/socket.html)\n [boostjp : Boost\u65e5\u672c\u8a9e\u60c5\u5831\u30b5\u30a4\u30c8](http://boostjp.github.io/tips/network/tcp.html)\n Qiita\u8a18\u4e8b [Boost.Asio \u3067 Raw Socket \u3092\u958b\u304f\u30e1\u30e2](http://qiita.com/kadopoly/items/acafa01945e5cfe39270)\n\n**\u6614\u306a\u304c\u3089\u306eUnix\u7531\u6765\u306eC\u306esocket\u30e9\u30a4\u30d6\u30e9\u30ea\uff1a**\n\u3000TCP/IP\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5207\u308a\u958b\u3044\u3066\u304d\u305f\u6642\u4ee3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308a\u3001\u65b0\u305f\u306b\u66f8\u304d\u59cb\u3081\u308b\u306e\u306b\u4f7f\u3046\u3079\u304d\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306f\u601d\u3048\u307e\u305b\u3093\u3002\n \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u4f5c\u3089\u308c\u305f\u4ee5\u964d\u306b\u3001unicode\u304c\u767b\u5834\u3057\u305f\u308a\u3001\u6a19\u6e96\u5316\u3055\u308c\u305f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002Unix/Liunx\u306e\u6a19\u6e96\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5f8c\u65b9\u4e92\u63db\u6027\u304c\u91cd\u8981\u306a\u305f\u3081\u306b\u3001\u305d\u308c\u3089\u306e\u95a2\u6570\u3092\u6368\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\n**Windows\u56fa\u6709\u306esocket\u30e9\u30a4\u30d6\u30e9\u30ea\uff1a**\n\u3000Unix\u306esocket\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u304b\u306a\u308a\u7570\u306a\u3063\u3066\u304a\u308a\u3001\u305d\u3053\u3067\u8a18\u8ff0\u3057\u305f\u95a2\u6570\u3092Linux\u306b\u79fb\u690d\u3059\u308b\u306e\u306f\u5bb9\u6613\u305d\u3046\u306b\u306f\u601d\u3048\u307e\u305b\u3093\u3002\n\n\n###**\u4ed8\u8a18\uff1asocket\u306b\u3088\u308b\u901a\u4fe1\u3092\u7528\u3044\u308b\u3053\u3068\u306e\u610f\u7fa9**\n\u8907\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u9593\u3067socket\u306b\u3088\u308b\u901a\u4fe1\u3092\u5229\u7528\u3059\u308c\u3070\u3001\n C++\u3067\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 <-> Python\u3067\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\u3068\u3044\u3046\u65b9\u5f0f\u3067\u5168\u4f53\u306e\u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305d\u3046\u3059\u308c\u3070\u3001Python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092C\uff0b\uff0b\u306b\u30ea\u30f3\u30af\u3059\u308b\u3002C++\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Python\u304b\u3089\u30ea\u30f3\u30af\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3063\u305f\u4f5c\u696d\u304c\u4e0d\u5fc5\u8981\u306a\u307e\u307e\u3001\u6a5f\u80fd\u3092\u9023\u7d50\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nos.system\uff08cmd\uff09[os \u2014 \u96d1\u591a\u306a\u30aa\u30da\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9](http://docs.python.jp/2.7/library/os.html)\nsubprocess.Popen() [subprocess \u2014 \u30b5\u30d6\u30d7\u30ed\u30bb\u30b9\u7ba1\u7406](http://docs.python.jp/2/library/subprocess.html)\n\n\u3092\u4f7f\u3046\u5834\u5408\u306b\u306f\u3001\u6bce\u56de\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3057\u3066\u7d42\u4e86\u3059\u308b\u3068\u3044\u3046\u3068\u3066\u3082\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u9ad8\u3044\u624b\u9806\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3057\u3066\u304a\u3044\u305f\u307e\u307e\u306b\u3057\u3066\u304a\u3044\u3066\u3001socket\u901a\u4fe1\u3092\u7528\u3044\u3066\u5b9f\u73fe\u3059\u308c\u3070\u3001\u305d\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\n###**\u4ed8\u8a18\uff1aPython\u3092\u7528\u3044\u305fweb\u30b5\u30fc\u30d0\u30fc**\nPython\u3092\u7528\u3044\u305fweb\u30b5\u30fc\u30d0\u30fc\u306e\u4f8b\u306b\u306fCherryPy\u304c\u3042\u308b\u3002\u300c\u5b9f\u8df5\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u300d\u3067\u306f[CherryPy](http://www.cherrypy.org/)\u3092\u7528\u3044\u305f\u753b\u50cf\u691c\u7d22\u306eweb\u30b5\u30fc\u30d0\u30fc\u306e\u4f8b\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\n###**\u4ed8\u8a18\uff1aC++\u306e\u5834\u5408\u3060\u3063\u305f\u3089**\nC/C++\u306e\u5834\u5408\u3060\u3063\u305f\u3089\u3001OpenCV\u3084\u6a5f\u68b0\u5b66\u7fd2\u306b\u95a2\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u30b9\u30ad\u30eb\u3092\u6301\u3061\u3064\u3064\u3001\u30b5\u30fc\u30d0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u306esocket\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u540c\u6642\u306b\u66f8\u3051\u308b\u30b9\u30ad\u30eb\u3092\u6301\u3064\u3053\u3068\u306f\u3068\u3066\u3082\u96e3\u3057\u3044\u3053\u3068\u3067\u3059\u3002Windows\u3067\u306esocket\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068Linux\u3067\u306esocket\u304c\u6a19\u6e96\u3067\u306f\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3001\u305d\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u96e3\u3057\u304f\u3057\u3066\u3057\u307e\u3046\u3002\n\n\n[\u30d2\u30f3\u30c86\u3000Python\u306e\u30b3\u30fc\u30c9\u3092\u6539\u5584\u3059\u308b](http://qiita.com/nonbiri15/items/f3f51d9fb39b8506f960)\n", "tags": ["scikit-image", "OpenCV-Python", "OpenCV", "Python", "boost"]}