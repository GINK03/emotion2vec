{"context": " More than 1 year has passed since last update.\u6d41\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3002\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n\u3059\u3067\u306b\u3084\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001Rx\u306e\u6559\u6750\u3068\u3057\u3066\u9762\u767d\u305d\u3046\u3002\n\u5148\u4eba\nC# \u3068 Reactive Extensions \u3067\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n\u30b3\u30fc\u30c9\nprivate static readonly string Zun = \"\u30ba\u30f3\";\nprivate static readonly string Doco = \"\u30c9\u30b3\";\nprivate readonly string[] Pattern = new[] { Zun, Zun, Zun, Zun, Doco };\nprivate bool KiyoshiSinging = true;\n\npublic void ZunDoco()\n{\n    var rand = new Random();\n    var dis = Observable.Create<string>(observer =>\n        {\n            while (KiyoshiSinging)\n            {\n                var nextWord = rand.Next() % 2 == 0 ? Zun : Doco;\n                Console.Write(nextWord);\n                observer.OnNext(nextWord);\n            }\n            observer.OnCompleted();\n            return () => { };\n        })\n        .Buffer(5, 1)\n        .Subscribe<IList<string>>(next =>\n        {\n            if (next.Count < 5)\n            {\n                return;\n            }\n            if (next.SequenceEqual(Pattern))\n            {\n                Console.WriteLine(\"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\");\n                this.KiyoshiSinging = false;\n            }\n        }, () => Console.WriteLine(\"\u7d42\u4e86\"));\n}\n\n\u5b9f\u884c\u7d50\u679c\n\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\n\u7d42\u4e86\n\n\u6d41\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3002[\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7](http://qiita.com/B73W56H84/items/519e27a1aed5e6d5304f#%E3%81%82%E3%82%8F%E3%81%9B%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84)\n\n\u3059\u3067\u306b\u3084\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001Rx\u306e\u6559\u6750\u3068\u3057\u3066\u9762\u767d\u305d\u3046\u3002\n\n**\u5148\u4eba**\n[C# \u3068 Reactive Extensions \u3067\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7](http://qiita.com/amay077/items/85dfc4bd194f57c52c57)\n\n**\u30b3\u30fc\u30c9**\n\n```csharp\nprivate static readonly string Zun = \"\u30ba\u30f3\";\nprivate static readonly string Doco = \"\u30c9\u30b3\";\nprivate readonly string[] Pattern = new[] { Zun, Zun, Zun, Zun, Doco };\nprivate bool KiyoshiSinging = true;\n\npublic void ZunDoco()\n{\n\tvar rand = new Random();\n\tvar dis = Observable.Create<string>(observer =>\n\t\t{\n\t\t\twhile (KiyoshiSinging)\n\t\t\t{\n\t\t\t\tvar nextWord = rand.Next() % 2 == 0 ? Zun : Doco;\n\t\t\t\tConsole.Write(nextWord);\n\t\t\t\tobserver.OnNext(nextWord);\n\t\t\t}\n\t\t\tobserver.OnCompleted();\n\t\t\treturn () => { };\n\t\t})\n\t\t.Buffer(5, 1)\n\t\t.Subscribe<IList<string>>(next =>\n\t\t{\n\t\t\tif (next.Count < 5)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (next.SequenceEqual(Pattern))\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\");\n\t\t\t\tthis.KiyoshiSinging = false;\n\t\t\t}\n\t\t}, () => Console.WriteLine(\"\u7d42\u4e86\"));\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n>\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\n\u7d42\u4e86\n", "tags": ["C#", "ReactiveExtensions", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7"]}