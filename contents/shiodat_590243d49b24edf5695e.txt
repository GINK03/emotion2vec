{"context": "Jubatus Advent Calendar 2016 \u306e16\u65e5\u76ee\u3067\u3059\uff0e\nJubatus\u306b\u306f\u69d8\u3005\u306a\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u642d\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4f55\u3092\u4f7f\u3048\u3070\u3088\u3044\u306e\u304b\u30d4\u30f3\u3068\u6765\u306a\u3044\u4eba\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001Jubatus\u306e\u5206\u985e\u5668\u304c\u3069\u306e\u3088\u3046\u306b\u5b66\u7fd2\u3092\u9032\u3081\u3066\u3044\u308b\u306e\u304b\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\uff0e\n\n\u5206\u985e\u3068\u306f\n\u5206\u985e\u3068\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u304c\u3069\u306e\u3088\u3046\u306a\u30e9\u30d9\u30eb\u306b\u5c5e\u3057\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u30bf\u30b9\u30af\u306e\u3053\u3068\u3092\u6307\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u5c4a\u3044\u305f\u30e1\u30fc\u30eb\u304c\u30b9\u30d1\u30e0\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u4e8c\u5024\u5206\u985e\u554f\u984c\u3084\u3001\u624b\u66f8\u304d\u6587\u5b57\u304c0-9\u306e\u3069\u308c\u306a\u306e\u304b\u3092\u5224\u5b9a\u3059\u308b\u591a\u5024\u5206\u985e\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\nJubatus\u306b\u3088\u308b\u5206\u985e\nJubatus\u306f\u5206\u985e\u5668\u3068\u3057\u3066\u3001\u7dda\u5f62\u5206\u985e\u5668\u3068\u8fd1\u508d\u63a2\u7d22\u5668\u306e2\u3064\u3092\u5229\u7528\u3057\u3066\u5206\u985e\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u5206\u985e\u5668\u304c\u3069\u306e\u3088\u3046\u306b\u5b66\u7fd2\u3092\u9032\u3081\u3066\u3044\u304f\u306e\u304b\u3092\u3001\u4eba\u5de5\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u53ef\u8996\u5316\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n\u7dda\u5f62\u5206\u985e\u5668\n\u7dda\u5f62\u5206\u985e\u5668\u306f\u6587\u5b57\u901a\u308a\u3001\u76f4\u7dda\uff08\u8d85\u5e73\u9762\uff09\u306b\u3088\u3063\u3066\u5206\u985e\u3092\u884c\u3044\u307e\u3059\u3002\u91cd\u307f$\\mathbf{w}$\u306e\u8abf\u6574\u65b9\u6cd5\u306b\u3088\u3063\u3066\u69d8\u3005\u306a\u5206\u985e\u5668\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\uff0e\nf_c(\\mathbf{x}) = \\mathbf{w}^{\\mathrm{T}} \\mathbf{x}\n\nJubatus\u306e\u7dda\u5f62\u5206\u985e\u5668\u3067\u306f\u30e9\u30d9\u30eb\u6570\u3060\u3051\u5206\u985e\u5668$f_c(\\cdot)$\u3092\u7528\u610f\u3057\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u30c7\u30fc\u30bf$\\mathbf{x}$\u306b\u5bfe\u3057\u3066\u6700\u3082\u5206\u985e\u30b9\u30b3\u30a2$f_c(\\mathbf{x})$\u304c\u5927\u304d\u3044\u30af\u30e9\u30b9\u3092\u5206\u985e\u7d50\u679c\u3068\u3057\u307e\u3059\u3002\ny = \\mathrm{arg}\\max_c f_c(\\mathbf{x})\n\n\u3053\u306e\u624b\u6cd5\u3092One-Versus-Rest\u6cd5\uff08OVR\u6cd5\uff09\u3068\u3044\u3044\u307e\u3059\u3002Jubatus\u3067\u306f\u4e8c\u5024\u5206\u985e\u554f\u984c\u3067\u3082\u3001\u6b63\u30e9\u30d9\u30eb\u3068\u8ca0\u30e9\u30d9\u30eb\u305d\u308c\u305e\u308c\u3067\u5206\u985e\u5668\u3092\u7528\u610f\u3057\u3066\u5206\u985e\u3092\u884c\u3044\u307e\u3059\u3002\n\nPerceptron\nPerceptron\u306f\u6700\u3082\u7c21\u5358\u306a\u30aa\u30f3\u30e9\u30a4\u30f3\u7dda\u5f62\u5206\u985e\u5668\u3067\u3059\uff0e\n\u5165\u529b\u30c7\u30fc\u30bf$(\\mathbf{x}_i, y_i)$\u304c\u73fe\u5728\u306e\u5206\u985e\u5668\u3067\u6b63\u3057\u304f\u5206\u985e\u3067\u304d\u308b\u304b\u3092\u78ba\u304b\u3081\u3066\uff0c\u8aa4\u5206\u985e\u3057\u3066\u3044\u308b\u306a\u3089\u3001\u4ee5\u4e0b\u306e\u5f0f\u306b\u3088\u308a\u91cd\u307f\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\\mathbf{w}_{i+1} = \\mathbf{w}_i + y_i\\mathbf{x}_i\n\n\n\nPA: Passive Aggressive\nPA\u306fGMail\u306e\u512a\u5148\u30c8\u30ec\u30a4\u5b66\u7fd2\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\uff0e\nPA\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6b63\u3057\u304f\u5206\u985e\u3067\u304d\u305f\u3089\u91cd\u307f\u3092\u66f4\u65b0\u305b\u305a(Passive)\u3001\u30c7\u30fc\u30bf\u3092\u8aa4\u5206\u985e\u3057\u305f\u3089\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u6b63\u3057\u304f\u5206\u985e\u3067\u304d\u308b\u6700\u5c0f\u9650\u306e\u91cf\u3060\u3051\u91cd\u307f\u3092\u66f4\u65b0\u3057\u307e\u3059(Aggressive)\u3002\n\\begin{align}\n\\mathbf{w}_{i+1} & = \\mathbf{w}_i + \\tau_i y_i\\mathbf{x}_i \\ , \\ l_t = \\max\\{0, 1-y_i  \\mathbf{w}_i^{\\mathrm{T}}\\mathbf{x}_i\\} \\\\\n\\tau_i & = l_t / ||\\mathbf{x}_i||^2 \\ , \\ (\\mathrm{PA}) \\\\\n\\tau_i & = \\min\\{C, l_t / ||\\mathbf{x}_i||^2\\} \\ , \\ (\\mathrm{PA1}) \\\\\n\\tau_i & =  l_t / ||\\mathbf{x}_i + 1/2C||^2 \\ , \\ (\\mathrm{PA2})\n\\end{align}\n\nPA\u306f\u8aa4\u5206\u985e\u3057\u305f\u3089\u5fc5\u305a\u5206\u96e2\u5e73\u9762\u304c\u79fb\u52d5\u3059\u308b\u305f\u3081\u3001\u30ce\u30a4\u30ba\u306b\u5f31\u304f\u3001\u5206\u96e2\u5e73\u9762\u304c\u30d0\u30bf\u3064\u3044\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067 $\\tau$ \u306e\u8a2d\u8a08\u3092\u898b\u76f4\u3057\u3001\u8aa4\u5206\u985e\u3092\u3042\u308b\u7a0b\u5ea6\u8a31\u5bb9\u3059\u308b\u3053\u3068\u3067\u9811\u5065\u6027\u3092\u5411\u4e0a\u3055\u305b\u305fPA1, PA2\u3082\u5408\u308f\u305b\u3066\u63d0\u6848\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306fPA2\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002perceptron\u307b\u3069\u3067\u306f\u306a\u3044\u3082\u306e\u306e\uff0c\u5206\u985e\u5e73\u9762\u304c\u30d0\u30bf\u3064\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n\nCW: Confidential Weighted Algorithm\nCW\u3067\u306f\u91cd\u307f\u304c\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u3068\u3044\u3046\u4eee\u5b9a\u3092\u7f6e\u3044\u3066\u3001\u91cd\u307f\u306e\u78ba\u4fe1\u5ea6\u306b\u57fa\u3065\u3044\u3066\u9069\u5fdc\u7684\u306a\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\u3002\u3082\u3046\u5b66\u7fd2\u306f\u5341\u5206\u9032\u3093\u3067\u3044\u308b\u3068\u3044\u3046\u81ea\u4fe1\u306e\u3042\u308b\u91cd\u307f\u306e\u66f4\u65b0\u306f\u5c11\u306a\u304f\u3001\u307e\u3060\u5b66\u7fd2\u306f\u9032\u3093\u3067\u3044\u306a\u3044\u3068\u3044\u3046\u81ea\u4fe1\u306e\u306a\u3044\u91cd\u307f\u306e\u66f4\u65b0\u3092\u5927\u304d\u304f\u3057\u307e\u3059\u3002\n\u91cd\u307f $\\mathbf{\\mu}$ \u306e\u5206\u6563\u5171\u5206\u6563\u884c\u5217\u3092 $\\mathbf{\\Sigma}$ \u3068\u3057\u307e\u3059\u3002CW\u3067\u306f\u3001\u5165\u529b\u30c7\u30fc\u30bf$(\\mathbf{x}_i, y_i)$\u3092\u78ba\u7387 $\\eta$ \u4ee5\u4e0a\u3067\u5206\u985e\u3067\u304d\u308b\u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u3067\u3001\u66f4\u65b0\u524d\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3068\u306eKL\u8ddd\u96e2\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b$(\\mathbf{\\mu},\\mathbf{\\Sigma})$\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\\begin{align}\n(\\mathbf{\\mu}_{i+1},\\mathbf{\\Sigma}_{i+1}) & = \\mathrm{arg}\\min_{\\mathbf{\\mu}, \\mathbf{\\Sigma}} KL(\\mathcal{N}(\\mathbf{\\mu}, \\mathbf{\\Sigma}) \\mid \\mathcal{N}(\\mathbf{\\mu}_i, \\mathbf{\\Sigma}_i)) \\\\\n\\mathrm{subject\\ to \\ \\ } & Pr_{\\mathbf{w} \\sim \\mathcal{N}(\\mathbf{\\mu}, \\mathbf{\\Sigma})} (y_i \\mathbf{w}^{\\mathrm{T}} \\mathbf{x}_i \\geq 0) \\geq \\eta \\ \\ (0.5 \\leq \\eta \\leq 1.0)\n\n\\end{align}\n\n\u78ba\u73870.5\u4ee5\u4e0a\u3067\u5fc5\u305a\u5206\u985e\u3057\u306a\u3055\u3044\uff0c\u3068\u3044\u3046\u5f37\u3044\u5236\u7d04\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u305f\u3081\uff0c\u30c7\u30fc\u30bf\u306b\u8aa4\u3063\u305f\u30e9\u30d9\u30eb\u4ed8\u3051\u304c\u3055\u308c\u3066\u3044\u308b\u72b6\u6cc1\u3084\u30ce\u30a4\u30ba\u304c\u591a\u3044\u72b6\u6cc1\u3067\u306f\u6025\u6fc0\u306b\u6027\u80fd\u304c\u52a3\u5316\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\n\nAROW\nCW\u306e\u30ce\u30a4\u30ba\u306b\u5f31\u3044\u3068\u3044\u3046\u5f31\u70b9\u3092\u514b\u670d\u3059\u308b\u305f\u3081\u306bAROW\u306f\u63d0\u6848\u3055\u308c\u307e\u3057\u305f\uff0e\nAROW\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u3068\u5206\u6563\u5171\u5206\u6563\u884c\u5217\u3092\u66f4\u65b0\u3057\u307e\u3059\uff0e\n(\\mathbf{\\mu}_{i+1},\\mathbf{\\Sigma}_{i+1})  = \\mathrm{arg}\\min_{\\mathbf{\\mu}, \\mathbf{\\Sigma}} KL(\\mathcal{N}(\\mathbf{\\mu}, \\mathbf{\\Sigma}) \\mid \\mathcal{N}(\\mathbf{\\mu}_i, \\mathbf{\\Sigma}_i)) + \\lambda_1 (\\max\\{0, 1-y_i \\mathbf{\\mu}_i^{\\mathrm{T}}\\mathbf{x}_i\\})^2 + \\lambda_2 \\mathbf{x}_i^{\\mathrm{T}}\\mathbf{\\Sigma}_i\\mathbf{x}_i\n\n\n\u305d\u308c\u305e\u308c\u306e\u9805\u306e\u4fdd\u3064\u5f79\u5272\u306b\u4ed8\u3044\u3066\u8aac\u660e\u3059\u308b\u3068\uff0c\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u7b2c\u4e00\u9805\u306f\u66f4\u65b0\u524d\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3068\u306eKL\u8ddd\u96e2\u3092\u6700\u5c0f\u5316\u3059\u308b\uff0c\u3059\u306a\u308f\u3061\u5206\u5e03\u306e\u5f62\u304c\u6025\u6fc0\u306b\u5909\u5316\u3059\u308b\u3053\u3068\u3092\u9632\u3050\u5f79\u5272\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u306fCW\u3068\u540c\u3058\u3067\u3059\u306d\uff0e\n\u7b2c\u4e8c\u9805\u306f\u640d\u5931\u95a2\u6570\u3067\u3042\u308a\uff0c\u73fe\u5728\u306e\u5165\u529b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3088\u304f\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3092\u3059\u3059\u3081\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e\n\u7b2c\u4e09\u9805\u306f\u30c7\u30fc\u30bf\u304c\u5897\u3048\u308b\u306b\u3064\u308c\u3066\u78ba\u4fe1\u5ea6\u304c\u5897\u52a0\u3059\u308b\uff0c\u3059\u306a\u308f\u3061$\\mathbf{\\Sigma}$\u304c\u5c0f\u3055\u304f\u306a\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e\n\nCW\u306e\u78ba\u7387$\\eta$\u3067\u5206\u985e\u3057\u306a\u3055\u3044\uff0c\u3068\u3044\u3046\u5236\u7d04\u306e\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u9805\u3068\u7b2c\u4e09\u9805\u3092\u76ee\u7684\u95a2\u6570\u306b\u7d44\u307f\u8fbc\u3080\u3053\u3068\u306b\u3088\u308a\uff0c\u30ce\u30a4\u30ba\u8010\u6027\u3092\u5897\u5f37\u3055\u305b\u3066\u3044\u307e\u3059\uff0e\n\u53ef\u8996\u5316\u7d50\u679c\u3092\u898b\u3066\u307f\u308b\u3068\u5206\u96e2\u5e73\u9762\u306e\u30d0\u30bf\u3064\u304d\u304c\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n\nNHERD\nNHERD\u3082AROW\u3084CW\u3068\u540c\u69d8\u306b\uff0c\u91cd\u307f$\\mathbf{w}$\u306f\u30ac\u30a6\u30b9\u5206\u5e03\u304b\u3089\u751f\u6210\u3055\u308c\u308b\u3068\u3044\u3046\u4eee\u5b9a\u3092\u7f6e\u3044\u3066\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff0e\n\u66f4\u65b0\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\\begin{align}\n\\mathbf{\\mu}_{i+1} & = \\mathbf{\\mu}_{i} + y_i \\frac{\\max\\{0, 1-y_i \\mathbf{\\mu}_i^{\\mathrm{T}}\\mathbf{x}_i\\}}{\\mathbf{x}_i^{\\mathrm{T}}\\mathbf{\\Sigma}_i\\mathbf{x}_i + 1/C}\\mathbf{\\Sigma}_i\\mathbf{x}_i \\\\\n\\mathbf{\\Sigma}_{i+1} & = \\mathbf{\\Sigma}_{i} - \\mathbf{\\Sigma}_{i}\\mathbf{x}_i\\mathbf{x}_i^{\\mathrm{T}}\\mathbf{\\Sigma}_{i} \\frac{C^2\\mathbf{x}_i\\mathbf{\\Sigma}_i\\mathbf{x}_i^{\\mathrm{T}}+2C}{(1+C\\mathbf{x}_i\\mathbf{\\Sigma}_i\\mathbf{x}_i^{\\mathrm{T}})^2}\n\\end{align}\n\n\n\u5e73\u5747 $\\mathbf{\\mu}$ \u306e\u66f4\u65b0\u5f0f\u3092\u3088\u304f\u898b\u3066\u307f\u308b\u3068\uff0cPA2\u306e\u66f4\u65b0\u5247\u3068\u975e\u5e38\u306b\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\uff0e\nNHERD\u306f\uff0c\u5404\u91cd\u307f\u30d9\u30af\u30c8\u30eb\u3092PA\u306e\u6761\u4ef6\u306b\u5f93\u3063\u3066\u66f4\u65b0\u3057\u305f\u5f8c\uff0c\u3053\u308c\u3092\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u8fd1\u4f3c\u3059\u308b\uff0c\u3068\u3044\u3046\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u308a\u307e\u3059\uff0eCW, AROW\u306fKL\u8ddd\u96e2\u306e\u610f\u5473\u3067\u5206\u5e03\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3057\u305f\u304c\uff0cNHERD\u3067\u306f\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u4f7f\u3063\u3066\u5206\u5e03\u3092\u66f4\u65b0\u3057\u307e\u3059\uff0e\n\u500b\u4eba\u7684\u306a\u4f53\u611f\u3067\u306f\uff0cNHERD\u3088\u308a\u3082AROW\u306e\u65b9\u304c\u7cbe\u5ea6\u304c\u51fa\u308b\u5834\u5408\u304c\u591a\u3044\u306e\u3067\uff0cAROW\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u3067\u3059\uff0e\n\n\n\u8fd1\u508d\u63a2\u7d22\u5668\n\u8fd1\u508d\u63a2\u7d22\u5668\u3067\u306f\uff0c\u5b66\u7fd2\u6e08\u307f\u30c7\u30fc\u30bf\u7fa4\u304b\u3089\u73fe\u5728\u306e\u5165\u529b\u30c7\u30fc\u30bf\u306e\u8fd1\u508d$k$\u70b9\u3092\u63a2\u7d22\u3057\uff0c\u305d\u308c\u3089\u306e\u30e9\u30d9\u30eb\u3092\u8e0f\u307e\u3048\u3066\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb\u3092\u6c7a\u5b9a\u3057\u307e\u3059\uff0eJubatus\u306b\u306f\u53b3\u5bc6\u306a\u8fd1\u508d\u8a08\u7b97\u3092\u884c\u3046euclidean, cosine\uff0c\u30cf\u30c3\u30b7\u30e5\u306b\u57fa\u3065\u304d\u8fd1\u508d\u8a08\u7b97\u3092\u884c\u3046euclid_lsh, lsh, minhash\u304c\u3042\u308a\u307e\u3059\uff0e\u4eca\u56de\u306feuclidean, cosine\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2 euclidean\n\neuclidean\u3067\u306f\uff0c$k$\u8fd1\u508d\u70b9\u3092\u63a2\u7d22\u3057\u305f\u5f8c\uff0c\u5404\u8fd1\u508d\u70b9\u306e\u30e9\u30d9\u30eb\u6bce\u306b\u8ddd\u96e2\u8a08\u7b97\u3092\u884c\u3044\uff0c\u3069\u306e\u30e9\u30d9\u30eb\u306b\u5c5e\u3059\u308b\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\uff0e\n\\begin{align}\n& y  = \\mathrm{arg}\\min_c \\{\\sum_i \\exp(\\alpha \\cdot d(\\mathrm{x}, \\mathrm{x}_{i,c}))\\} \\\\\n& d(\\mathrm{x}_i, \\mathrm{x}_j)  = || \\mathrm{x}_i - \\mathrm{x}_j || \n\\end{align}\n\n\u3053\u3053\u3067$\\alpha$\u306flocal_sensitivity\u3068\u547c\u3070\u308c\u308b\u30e6\u30fc\u30b6\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\uff0e\u8ddd\u96e2\u8a08\u7b97\u6642\u306bexp\u3092\u53d6\u308b\u3053\u3068\u3067\uff0c\u8fd1\u508d\u70b9\u3092\u91cd\u8996\u3057\u305f\u30b9\u30b3\u30a2\u8a08\u7b97\u304c\u884c\u308f\u308c\u307e\u3059\uff0e\n\n\n\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6 cosine\n\ncosine\u3067\u306f\uff0c\u539f\u70b9\u304b\u3089\u5404\u30d9\u30af\u30c8\u30eb\u306e\u306a\u3059\u89d2\u5ea6\u304b\u3089\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u624b\u6cd5\u3067\u3059\uff0e\n\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u306e\u610f\u5473\u3067$k$\u8fd1\u508d\u70b9\u3092\u63a2\u7d22\u3057\u305f\u5f8c\uff0c\u5404\u8fd1\u508d\u70b9\u306e\u30e9\u30d9\u30eb\u6bce\u306b\u985e\u4f3c\u5ea6\u8a08\u7b97\u3092\u884c\u3044\uff0c\u3069\u306e\u30e9\u30d9\u30eb\u306b\u5c5e\u3059\u308b\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\uff0e\n\\begin{align}\n& y = \\mathrm{arg}\\min_c \\{\\sum_i \\exp(-\\alpha \\cdot (1 - s(\\mathrm{x}, \\mathrm{x}_{i,c}))\\} \\\\\n& s(\\mathrm{x}_i, \\mathrm{x}_j) = \\frac{\\mathrm{x}_i^{\\mathrm{T}}\\mathrm{x}_j}{||\\mathrm{x}_i|| \\cdot ||\\mathrm{x}_j||}\n\\end{align}\n\neuclidean\u3068\u7570\u306a\u308a\uff0ccosine\u3067\u306f\u539f\u70b9\u304b\u3089\u653e\u5c04\u72b6\u306b\u5206\u96e2\u5e73\u9762\u304c\u69cb\u7bc9\u3055\u308c\u307e\u3059\uff0e\n\n\n\u307e\u3068\u3081\njubatus\u306e\u5b66\u7fd2\u306e\u69d8\u5b50\u3092\u4eba\u5de5\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u3066\u53ef\u8996\u5316\u3057\u3066\u304d\u307e\u3057\u305f\uff0e\nAROW\u3068NHERD\u304c\u30ce\u30a4\u30ba\u306b\u5f37\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u3088\u304f\u308f\u304b\u3063\u305f\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306e\u53ef\u8996\u5316\u306b\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\uff0e2\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u307e\u3067\u3057\u304b\u53ef\u8996\u5316\u3067\u304d\u307e\u305b\u3093\u304c\uff0c\u305c\u3072\u7686\u3055\u3093\u306e\u624b\u5143\u306b\u3042\u308b\u30c7\u30fc\u30bf\u3067\u3082\u5b9f\u9a13\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n\u660e\u65e5\u306f@TkrUdagawa\u3055\u3093\u304c\u3044\u3089\u3059\u3068\u3084\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d39\u4ecb\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\uff0e\u697d\u3057\u307f\u3067\u3059\u306d\uff01\n\nvisualize_linear_classifier.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport os\nimport sys\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nfrom jubakit.classifier import Classifier, Schema, Dataset, Config\nfrom jubakit.model import JubaDump\nfrom sklearn.datasets import make_classification\nfrom sklearn.utils import shuffle, check_random_state\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n\n# user parameters\nmethod = sys.argv[1]\nport = 9199\nregularization_weight = 1.0\nseed = 42\nmeshsize = 50   # we can draw clear decision surface with large meshsize\n\n# setting random seed\nnp.random.seed(seed)\ncheck_random_state(seed)\n\n# load dataset\n\nX, y = make_classification(n_samples=100, n_features=2, n_redundant=0, n_informative=2, random_state=42, n_clusters_per_class=1, n_classes=3, flip_y=0)\nlabels = np.array(['c1', 'c2', 'c3'])\ny = labels[y]\nX, y = shuffle(X, y, random_state=42)        # sklearn iris dataset is unshuffled\n\n# prepare encoder to plot decision surface\nle = LabelEncoder()\nle.fit(labels)\nc = le.transform(y)\n\n# scale dataset with (mean, variance) = (0, 1)\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# calculate the domain\nX_min = X.min(axis=0)\n#X_min = np.ones(X.shape[1])\nX_max = X.max(axis=0)\nX0, X1 = np.meshgrid(np.linspace(X_min[0], X_max[0], meshsize),\n                     np.linspace(X_min[1], X_max[1], meshsize))\n\n# make training dataset\ndataset = Dataset.from_array(X, y)\n# make mesh dataset to plot decision surface\ncontourf_dataset = Dataset.from_array(np.c_[X0.ravel(), X1.ravel()])\n\n# setup and run jubatus\nconfig = Config(method=method,\n                parameter={'regularization_weight': regularization_weight})\nclassifier = Classifier.run(config, port=port)\n\n# construct classifier prediction models and dump model weights\nfor i, _ in enumerate(classifier.train(dataset)):\n    model_name = 'decision_surface_{}'.format(i)\n    classifier.save(name=model_name)\n\n# prepare figure\nfig, ax = plt.subplots()\n\ndef draw_decision_surface(i):\n    midx = int(i / 2)\n    sidx = int(i / 2) + (i % 2)\n    # load jubatus prediction model\n    model_name = 'decision_surface_{}'.format(midx)\n    classifier.load(name=model_name)\n\n    # predict \n    Y_pred = []\n    for (_, _, result) in classifier.classify(contourf_dataset):\n        y_pred = le.transform(result[0][0])\n        Y_pred.append(y_pred)\n    Y_pred = np.array(Y_pred).reshape(X0.shape)  \n\n    # draw decision surface\n    ax.clear()\n    ax.set_xlim([X_min[0], X_max[0]])\n    ax.set_ylim([X_min[1], X_max[1]])\n    ax.contourf(X0, X1, Y_pred, alpha=0.3, cmap=plt.cm.jet)\n    ax.scatter(X[:sidx+1][:, 0], X[:sidx+1][:, 1], c=c[:sidx+1], s=60, cmap=plt.cm.jet)\n    ax.set_title('method={}, iteration={}'.format(method, sidx))\n    return ax\n\nani = FuncAnimation(fig, draw_decision_surface, frames=np.arange(0, X.shape[0]*2), interval=100)\nani.save('{}.gif'.format(method), writer='imagemagick')\nplt.show()\nclassifier.stop()\n\n\n\nvisualize_nn_classifier.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport os\nimport sys\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nfrom jubakit.classifier import Classifier, Schema, Dataset, Config\nfrom jubakit.model import JubaDump\nfrom sklearn.datasets import make_classification\nfrom sklearn.utils import shuffle, check_random_state\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n\n# user parameters\nport = 9299\nmethod = sys.argv[1]\nnearest_neighbor_num = 5\nlocal_sensitivity = 1\nhash_num = 512\nseed = 42\nmeshsize = 50   # we can draw clear decision surface with large meshsize\n\n# setting random seed\nnp.random.seed(seed)\ncheck_random_state(seed)\n\n# load dataset\nX, y = make_classification(n_samples=100, n_features=2, n_redundant=0, n_informative=2, random_state=42, n_clusters_per_class=1, n_classes=3, flip_y=0)\nlabels = np.array(['c1', 'c2', 'c3'])\ny = labels[y]\nX, y = shuffle(X, y, random_state=42)        # sklearn iris dataset is unshuffled\n\n# prepare encoder to plot decision surface\nle = LabelEncoder()\nle.fit(labels)\nc = le.transform(y)\n\n# scale dataset with (mean, variance) = (0, 1)\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# calculate the domain\nX_min = X.min(axis=0)\nX_max = X.max(axis=0)\nX0, X1 = np.meshgrid(np.linspace(X_min[0], X_max[0], meshsize),\n                     np.linspace(X_min[1], X_max[1], meshsize))\n\n# make training dataset\ndataset = Dataset.from_array(X, y)\n# make mesh dataset to plot decision surface\ncontourf_dataset = Dataset.from_array(np.c_[X0.ravel(), X1.ravel()])\n\n# setup and run jubatus\nconfig = Config(method=method,\n                parameter={\n                    'nearest_neighbor_num': nearest_neighbor_num,\n                    'local_sensitivity': local_sensitivity})\nclassifier = Classifier.run(config, port=port)\n\n# construct classifier prediction models and dump model weights\nfor i, _ in enumerate(classifier.train(dataset)):\n    model_name = 'nn_decision_surface_{}'.format(i)\n    classifier.save(name=model_name)\n\n# prepare figure\nfig, ax = plt.subplots()\n\ndef draw_decision_surface(i):\n    midx = int(i / 2)\n    sidx = int(i / 2) + (i % 2)\n    # load jubatus prediction model\n    model_name = 'nn_decision_surface_{}'.format(midx)\n    classifier.load(name=model_name)\n\n    # predict \n    Y_pred = []\n    for (_, _, result) in classifier.classify(contourf_dataset):\n        y_pred = le.transform(result[0][0])\n        Y_pred.append(y_pred)\n    Y_pred = np.array(Y_pred).reshape(X0.shape)  \n\n    # draw decision surface\n    ax.clear()\n    ax.set_xlim([X_min[0], X_max[0]])\n    ax.set_ylim([X_min[1], X_max[1]])\n    ax.contourf(X0, X1, Y_pred, alpha=0.3, cmap=plt.cm.jet)\n    ax.scatter(X[:sidx+1][:, 0], X[:sidx+1][:, 1], c=c[:sidx+1], s=60, cmap=plt.cm.jet)\n    ax.set_title('method={}, iteration={}'.format(method, sidx))\n    return ax\n\nani = FuncAnimation(fig, draw_decision_surface, frames=np.arange(0, X.shape[0]*2), interval=100)\nani.save('{}.gif'.format(method), writer='imagemagick')\nplt.show()\nclassifier.stop()\n\n\n\n[Jubatus Advent Calendar 2016](http://qiita.com/advent-calendar/2016/jubatus) \u306e16\u65e5\u76ee\u3067\u3059\uff0e\n\nJubatus\u306b\u306f\u69d8\u3005\u306a\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u642d\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4f55\u3092\u4f7f\u3048\u3070\u3088\u3044\u306e\u304b\u30d4\u30f3\u3068\u6765\u306a\u3044\u4eba\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001Jubatus\u306e\u5206\u985e\u5668\u304c\u3069\u306e\u3088\u3046\u306b\u5b66\u7fd2\u3092\u9032\u3081\u3066\u3044\u308b\u306e\u304b\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\uff0e\n\n# \u5206\u985e\u3068\u306f\n\n\u5206\u985e\u3068\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u304c\u3069\u306e\u3088\u3046\u306a\u30e9\u30d9\u30eb\u306b\u5c5e\u3057\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u30bf\u30b9\u30af\u306e\u3053\u3068\u3092\u6307\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u5c4a\u3044\u305f\u30e1\u30fc\u30eb\u304c\u30b9\u30d1\u30e0\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u4e8c\u5024\u5206\u985e\u554f\u984c\u3084\u3001\u624b\u66f8\u304d\u6587\u5b57\u304c0-9\u306e\u3069\u308c\u306a\u306e\u304b\u3092\u5224\u5b9a\u3059\u308b\u591a\u5024\u5206\u985e\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\n# Jubatus\u306b\u3088\u308b\u5206\u985e\n\nJubatus\u306f\u5206\u985e\u5668\u3068\u3057\u3066\u3001\u7dda\u5f62\u5206\u985e\u5668\u3068\u8fd1\u508d\u63a2\u7d22\u5668\u306e2\u3064\u3092\u5229\u7528\u3057\u3066\u5206\u985e\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u5206\u985e\u5668\u304c\u3069\u306e\u3088\u3046\u306b\u5b66\u7fd2\u3092\u9032\u3081\u3066\u3044\u304f\u306e\u304b\u3092\u3001\u4eba\u5de5\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u53ef\u8996\u5316\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n![scatter.png](https://qiita-image-store.s3.amazonaws.com/0/151501/82fce4ee-5c32-322c-4839-e9da9002bb95.png)\n\n\n## \u7dda\u5f62\u5206\u985e\u5668\n\n\u7dda\u5f62\u5206\u985e\u5668\u306f\u6587\u5b57\u901a\u308a\u3001\u76f4\u7dda\uff08\u8d85\u5e73\u9762\uff09\u306b\u3088\u3063\u3066\u5206\u985e\u3092\u884c\u3044\u307e\u3059\u3002\u91cd\u307f$\\mathbf{w}$\u306e\u8abf\u6574\u65b9\u6cd5\u306b\u3088\u3063\u3066\u69d8\u3005\u306a\u5206\u985e\u5668\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```math\nf_c(\\mathbf{x}) = \\mathbf{w}^{\\mathrm{T}} \\mathbf{x}\n```\n\nJubatus\u306e\u7dda\u5f62\u5206\u985e\u5668\u3067\u306f\u30e9\u30d9\u30eb\u6570\u3060\u3051\u5206\u985e\u5668$f_c(\\cdot)$\u3092\u7528\u610f\u3057\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u30c7\u30fc\u30bf$\\mathbf{x}$\u306b\u5bfe\u3057\u3066\u6700\u3082\u5206\u985e\u30b9\u30b3\u30a2$f_c(\\mathbf{x})$\u304c\u5927\u304d\u3044\u30af\u30e9\u30b9\u3092\u5206\u985e\u7d50\u679c\u3068\u3057\u307e\u3059\u3002\n\n```math\ny = \\mathrm{arg}\\max_c f_c(\\mathbf{x})\n```\n\u3053\u306e\u624b\u6cd5\u3092One-Versus-Rest\u6cd5\uff08OVR\u6cd5\uff09\u3068\u3044\u3044\u307e\u3059\u3002Jubatus\u3067\u306f\u4e8c\u5024\u5206\u985e\u554f\u984c\u3067\u3082\u3001\u6b63\u30e9\u30d9\u30eb\u3068\u8ca0\u30e9\u30d9\u30eb\u305d\u308c\u305e\u308c\u3067\u5206\u985e\u5668\u3092\u7528\u610f\u3057\u3066\u5206\u985e\u3092\u884c\u3044\u307e\u3059\u3002\n\n\n\n### Perceptron\nPerceptron\u306f\u6700\u3082\u7c21\u5358\u306a\u30aa\u30f3\u30e9\u30a4\u30f3\u7dda\u5f62\u5206\u985e\u5668\u3067\u3059\uff0e\n\u5165\u529b\u30c7\u30fc\u30bf$(\\mathbf{x}_i, y_i)$\u304c\u73fe\u5728\u306e\u5206\u985e\u5668\u3067\u6b63\u3057\u304f\u5206\u985e\u3067\u304d\u308b\u304b\u3092\u78ba\u304b\u3081\u3066\uff0c\u8aa4\u5206\u985e\u3057\u3066\u3044\u308b\u306a\u3089\u3001\u4ee5\u4e0b\u306e\u5f0f\u306b\u3088\u308a\u91cd\u307f\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\n```math\n\\mathbf{w}_{i+1} = \\mathbf{w}_i + y_i\\mathbf{x}_i\n```\n<p><img src=\"https://media.giphy.com/media/l4Jz0i6lAGFOuTieI/source.gif\" alt=\"\" /></p>\n\n### PA: Passive Aggressive\nPA\u306fGMail\u306e\u512a\u5148\u30c8\u30ec\u30a4\u5b66\u7fd2\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\uff0e\nPA\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6b63\u3057\u304f\u5206\u985e\u3067\u304d\u305f\u3089\u91cd\u307f\u3092\u66f4\u65b0\u305b\u305a(Passive)\u3001\u30c7\u30fc\u30bf\u3092\u8aa4\u5206\u985e\u3057\u305f\u3089\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u6b63\u3057\u304f\u5206\u985e\u3067\u304d\u308b\u6700\u5c0f\u9650\u306e\u91cf\u3060\u3051\u91cd\u307f\u3092\u66f4\u65b0\u3057\u307e\u3059(Aggressive)\u3002\n\n```math\n\\begin{align}\n\\mathbf{w}_{i+1} & = \\mathbf{w}_i + \\tau_i y_i\\mathbf{x}_i \\ , \\ l_t = \\max\\{0, 1-y_i  \\mathbf{w}_i^{\\mathrm{T}}\\mathbf{x}_i\\} \\\\\n\\tau_i & = l_t / ||\\mathbf{x}_i||^2 \\ , \\ (\\mathrm{PA}) \\\\\n\\tau_i & = \\min\\{C, l_t / ||\\mathbf{x}_i||^2\\} \\ , \\ (\\mathrm{PA1}) \\\\\n\\tau_i & =  l_t / ||\\mathbf{x}_i + 1/2C||^2 \\ , \\ (\\mathrm{PA2})\n\\end{align}\n```\n\nPA\u306f\u8aa4\u5206\u985e\u3057\u305f\u3089\u5fc5\u305a\u5206\u96e2\u5e73\u9762\u304c\u79fb\u52d5\u3059\u308b\u305f\u3081\u3001\u30ce\u30a4\u30ba\u306b\u5f31\u304f\u3001\u5206\u96e2\u5e73\u9762\u304c\u30d0\u30bf\u3064\u3044\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067 $\\tau$ \u306e\u8a2d\u8a08\u3092\u898b\u76f4\u3057\u3001\u8aa4\u5206\u985e\u3092\u3042\u308b\u7a0b\u5ea6\u8a31\u5bb9\u3059\u308b\u3053\u3068\u3067\u9811\u5065\u6027\u3092\u5411\u4e0a\u3055\u305b\u305fPA1, PA2\u3082\u5408\u308f\u305b\u3066\u63d0\u6848\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306fPA2\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002perceptron\u307b\u3069\u3067\u306f\u306a\u3044\u3082\u306e\u306e\uff0c\u5206\u985e\u5e73\u9762\u304c\u30d0\u30bf\u3064\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n<p><img src=\"https://media.giphy.com/media/26FLhoiUzFBzPcdri/source.gif\" alt=\"\" /></p>\n\n### CW: Confidential Weighted Algorithm\n\nCW\u3067\u306f\u91cd\u307f\u304c\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u3068\u3044\u3046\u4eee\u5b9a\u3092\u7f6e\u3044\u3066\u3001\u91cd\u307f\u306e\u78ba\u4fe1\u5ea6\u306b\u57fa\u3065\u3044\u3066\u9069\u5fdc\u7684\u306a\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\u3002\u3082\u3046\u5b66\u7fd2\u306f\u5341\u5206\u9032\u3093\u3067\u3044\u308b\u3068\u3044\u3046\u81ea\u4fe1\u306e\u3042\u308b\u91cd\u307f\u306e\u66f4\u65b0\u306f\u5c11\u306a\u304f\u3001\u307e\u3060\u5b66\u7fd2\u306f\u9032\u3093\u3067\u3044\u306a\u3044\u3068\u3044\u3046\u81ea\u4fe1\u306e\u306a\u3044\u91cd\u307f\u306e\u66f4\u65b0\u3092\u5927\u304d\u304f\u3057\u307e\u3059\u3002\n\u91cd\u307f $\\mathbf{\\mu}$ \u306e\u5206\u6563\u5171\u5206\u6563\u884c\u5217\u3092 $\\mathbf{\\Sigma}$ \u3068\u3057\u307e\u3059\u3002CW\u3067\u306f\u3001\u5165\u529b\u30c7\u30fc\u30bf$(\\mathbf{x}_i, y_i)$\u3092\u78ba\u7387 $\\eta$ \u4ee5\u4e0a\u3067\u5206\u985e\u3067\u304d\u308b\u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u3067\u3001\u66f4\u65b0\u524d\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3068\u306eKL\u8ddd\u96e2\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b$(\\mathbf{\\mu},\\mathbf{\\Sigma})$\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\n```math\n\\begin{align}\n(\\mathbf{\\mu}_{i+1},\\mathbf{\\Sigma}_{i+1}) & = \\mathrm{arg}\\min_{\\mathbf{\\mu}, \\mathbf{\\Sigma}} KL(\\mathcal{N}(\\mathbf{\\mu}, \\mathbf{\\Sigma}) \\mid \\mathcal{N}(\\mathbf{\\mu}_i, \\mathbf{\\Sigma}_i)) \\\\\n\\mathrm{subject\\ to \\ \\ } & Pr_{\\mathbf{w} \\sim \\mathcal{N}(\\mathbf{\\mu}, \\mathbf{\\Sigma})} (y_i \\mathbf{w}^{\\mathrm{T}} \\mathbf{x}_i \\geq 0) \\geq \\eta \\ \\ (0.5 \\leq \\eta \\leq 1.0)\n\n\\end{align}\n```\n\n\u78ba\u73870.5\u4ee5\u4e0a\u3067\u5fc5\u305a\u5206\u985e\u3057\u306a\u3055\u3044\uff0c\u3068\u3044\u3046\u5f37\u3044\u5236\u7d04\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u305f\u3081\uff0c\u30c7\u30fc\u30bf\u306b\u8aa4\u3063\u305f\u30e9\u30d9\u30eb\u4ed8\u3051\u304c\u3055\u308c\u3066\u3044\u308b\u72b6\u6cc1\u3084\u30ce\u30a4\u30ba\u304c\u591a\u3044\u72b6\u6cc1\u3067\u306f\u6025\u6fc0\u306b\u6027\u80fd\u304c\u52a3\u5316\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\n<p><img src=\"https://media.giphy.com/media/26FLcauPSaxVqn87C/source.gif\" alt=\"\" /></p>\n\n### AROW\n\nCW\u306e\u30ce\u30a4\u30ba\u306b\u5f31\u3044\u3068\u3044\u3046\u5f31\u70b9\u3092\u514b\u670d\u3059\u308b\u305f\u3081\u306bAROW\u306f\u63d0\u6848\u3055\u308c\u307e\u3057\u305f\uff0e\nAROW\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u3068\u5206\u6563\u5171\u5206\u6563\u884c\u5217\u3092\u66f4\u65b0\u3057\u307e\u3059\uff0e\n\n```math\n(\\mathbf{\\mu}_{i+1},\\mathbf{\\Sigma}_{i+1})  = \\mathrm{arg}\\min_{\\mathbf{\\mu}, \\mathbf{\\Sigma}} KL(\\mathcal{N}(\\mathbf{\\mu}, \\mathbf{\\Sigma}) \\mid \\mathcal{N}(\\mathbf{\\mu}_i, \\mathbf{\\Sigma}_i)) + \\lambda_1 (\\max\\{0, 1-y_i \\mathbf{\\mu}_i^{\\mathrm{T}}\\mathbf{x}_i\\})^2 + \\lambda_2 \\mathbf{x}_i^{\\mathrm{T}}\\mathbf{\\Sigma}_i\\mathbf{x}_i\n\n```\n\n\u305d\u308c\u305e\u308c\u306e\u9805\u306e\u4fdd\u3064\u5f79\u5272\u306b\u4ed8\u3044\u3066\u8aac\u660e\u3059\u308b\u3068\uff0c\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n- \u7b2c\u4e00\u9805\u306f\u66f4\u65b0\u524d\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3068\u306eKL\u8ddd\u96e2\u3092\u6700\u5c0f\u5316\u3059\u308b\uff0c\u3059\u306a\u308f\u3061\u5206\u5e03\u306e\u5f62\u304c\u6025\u6fc0\u306b\u5909\u5316\u3059\u308b\u3053\u3068\u3092\u9632\u3050\u5f79\u5272\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u306fCW\u3068\u540c\u3058\u3067\u3059\u306d\uff0e\n- \u7b2c\u4e8c\u9805\u306f\u640d\u5931\u95a2\u6570\u3067\u3042\u308a\uff0c\u73fe\u5728\u306e\u5165\u529b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3088\u304f\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3092\u3059\u3059\u3081\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e\n- \u7b2c\u4e09\u9805\u306f\u30c7\u30fc\u30bf\u304c\u5897\u3048\u308b\u306b\u3064\u308c\u3066\u78ba\u4fe1\u5ea6\u304c\u5897\u52a0\u3059\u308b\uff0c\u3059\u306a\u308f\u3061$\\mathbf{\\Sigma}$\u304c\u5c0f\u3055\u304f\u306a\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e\n\nCW\u306e\u78ba\u7387$\\eta$\u3067\u5206\u985e\u3057\u306a\u3055\u3044\uff0c\u3068\u3044\u3046\u5236\u7d04\u306e\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u9805\u3068\u7b2c\u4e09\u9805\u3092\u76ee\u7684\u95a2\u6570\u306b\u7d44\u307f\u8fbc\u3080\u3053\u3068\u306b\u3088\u308a\uff0c\u30ce\u30a4\u30ba\u8010\u6027\u3092\u5897\u5f37\u3055\u305b\u3066\u3044\u307e\u3059\uff0e\n\u53ef\u8996\u5316\u7d50\u679c\u3092\u898b\u3066\u307f\u308b\u3068\u5206\u96e2\u5e73\u9762\u306e\u30d0\u30bf\u3064\u304d\u304c\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n<p><img src=\"https://media.giphy.com/media/l4JyTjfM3wifw5B84/source.gif\" alt=\"\" /></p>\n\n\n### NHERD\n\nNHERD\u3082AROW\u3084CW\u3068\u540c\u69d8\u306b\uff0c\u91cd\u307f$\\mathbf{w}$\u306f\u30ac\u30a6\u30b9\u5206\u5e03\u304b\u3089\u751f\u6210\u3055\u308c\u308b\u3068\u3044\u3046\u4eee\u5b9a\u3092\u7f6e\u3044\u3066\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff0e\n\u66f4\u65b0\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```math\n\\begin{align}\n\\mathbf{\\mu}_{i+1} & = \\mathbf{\\mu}_{i} + y_i \\frac{\\max\\{0, 1-y_i \\mathbf{\\mu}_i^{\\mathrm{T}}\\mathbf{x}_i\\}}{\\mathbf{x}_i^{\\mathrm{T}}\\mathbf{\\Sigma}_i\\mathbf{x}_i + 1/C}\\mathbf{\\Sigma}_i\\mathbf{x}_i \\\\\n\\mathbf{\\Sigma}_{i+1} & = \\mathbf{\\Sigma}_{i} - \\mathbf{\\Sigma}_{i}\\mathbf{x}_i\\mathbf{x}_i^{\\mathrm{T}}\\mathbf{\\Sigma}_{i} \\frac{C^2\\mathbf{x}_i\\mathbf{\\Sigma}_i\\mathbf{x}_i^{\\mathrm{T}}+2C}{(1+C\\mathbf{x}_i\\mathbf{\\Sigma}_i\\mathbf{x}_i^{\\mathrm{T}})^2}\n\\end{align}\n\n```\n\u5e73\u5747 $\\mathbf{\\mu}$ \u306e\u66f4\u65b0\u5f0f\u3092\u3088\u304f\u898b\u3066\u307f\u308b\u3068\uff0cPA2\u306e\u66f4\u65b0\u5247\u3068\u975e\u5e38\u306b\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\uff0e\nNHERD\u306f\uff0c\u5404\u91cd\u307f\u30d9\u30af\u30c8\u30eb\u3092PA\u306e\u6761\u4ef6\u306b\u5f93\u3063\u3066\u66f4\u65b0\u3057\u305f\u5f8c\uff0c\u3053\u308c\u3092\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u8fd1\u4f3c\u3059\u308b\uff0c\u3068\u3044\u3046\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u308a\u307e\u3059\uff0eCW, AROW\u306fKL\u8ddd\u96e2\u306e\u610f\u5473\u3067\u5206\u5e03\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3057\u305f\u304c\uff0cNHERD\u3067\u306f\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u4f7f\u3063\u3066\u5206\u5e03\u3092\u66f4\u65b0\u3057\u307e\u3059\uff0e\n\n\u500b\u4eba\u7684\u306a\u4f53\u611f\u3067\u306f\uff0cNHERD\u3088\u308a\u3082AROW\u306e\u65b9\u304c\u7cbe\u5ea6\u304c\u51fa\u308b\u5834\u5408\u304c\u591a\u3044\u306e\u3067\uff0cAROW\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u3067\u3059\uff0e\n\n<p><img src=\"https://media.giphy.com/media/3o6Ztqag5BVvevFZN6/source.gif\" alt=\"\" /></p>\n\n\n## \u8fd1\u508d\u63a2\u7d22\u5668\n\n\u8fd1\u508d\u63a2\u7d22\u5668\u3067\u306f\uff0c\u5b66\u7fd2\u6e08\u307f\u30c7\u30fc\u30bf\u7fa4\u304b\u3089\u73fe\u5728\u306e\u5165\u529b\u30c7\u30fc\u30bf\u306e\u8fd1\u508d$k$\u70b9\u3092\u63a2\u7d22\u3057\uff0c\u305d\u308c\u3089\u306e\u30e9\u30d9\u30eb\u3092\u8e0f\u307e\u3048\u3066\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb\u3092\u6c7a\u5b9a\u3057\u307e\u3059\uff0eJubatus\u306b\u306f\u53b3\u5bc6\u306a\u8fd1\u508d\u8a08\u7b97\u3092\u884c\u3046`euclidean`, `cosine`\uff0c\u30cf\u30c3\u30b7\u30e5\u306b\u57fa\u3065\u304d\u8fd1\u508d\u8a08\u7b97\u3092\u884c\u3046`euclid_lsh`, `lsh`, `minhash`\u304c\u3042\u308a\u307e\u3059\uff0e\u4eca\u56de\u306f`euclidean`, `cosine`\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n### \u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2 `euclidean`\n`euclidean`\u3067\u306f\uff0c$k$\u8fd1\u508d\u70b9\u3092\u63a2\u7d22\u3057\u305f\u5f8c\uff0c\u5404\u8fd1\u508d\u70b9\u306e\u30e9\u30d9\u30eb\u6bce\u306b\u8ddd\u96e2\u8a08\u7b97\u3092\u884c\u3044\uff0c\u3069\u306e\u30e9\u30d9\u30eb\u306b\u5c5e\u3059\u308b\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\uff0e\n\n```math\n\\begin{align}\n& y  = \\mathrm{arg}\\min_c \\{\\sum_i \\exp(\\alpha \\cdot d(\\mathrm{x}, \\mathrm{x}_{i,c}))\\} \\\\\n& d(\\mathrm{x}_i, \\mathrm{x}_j)  = || \\mathrm{x}_i - \\mathrm{x}_j || \n\\end{align}\n```\n\u3053\u3053\u3067$\\alpha$\u306f`local_sensitivity`\u3068\u547c\u3070\u308c\u308b\u30e6\u30fc\u30b6\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\uff0e\u8ddd\u96e2\u8a08\u7b97\u6642\u306b`exp`\u3092\u53d6\u308b\u3053\u3068\u3067\uff0c\u8fd1\u508d\u70b9\u3092\u91cd\u8996\u3057\u305f\u30b9\u30b3\u30a2\u8a08\u7b97\u304c\u884c\u308f\u308c\u307e\u3059\uff0e\n\n<p><img src=\"https://media.giphy.com/media/3o6ZsWatucjX9Pb680/source.gif\" alt=\"\" /></p>\n\n### \u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6 `cosine`\n\n`cosine`\u3067\u306f\uff0c\u539f\u70b9\u304b\u3089\u5404\u30d9\u30af\u30c8\u30eb\u306e\u306a\u3059\u89d2\u5ea6\u304b\u3089\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u624b\u6cd5\u3067\u3059\uff0e\n\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u306e\u610f\u5473\u3067$k$\u8fd1\u508d\u70b9\u3092\u63a2\u7d22\u3057\u305f\u5f8c\uff0c\u5404\u8fd1\u508d\u70b9\u306e\u30e9\u30d9\u30eb\u6bce\u306b\u985e\u4f3c\u5ea6\u8a08\u7b97\u3092\u884c\u3044\uff0c\u3069\u306e\u30e9\u30d9\u30eb\u306b\u5c5e\u3059\u308b\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\uff0e\n\n```math\n\\begin{align}\n& y = \\mathrm{arg}\\min_c \\{\\sum_i \\exp(-\\alpha \\cdot (1 - s(\\mathrm{x}, \\mathrm{x}_{i,c}))\\} \\\\\n& s(\\mathrm{x}_i, \\mathrm{x}_j) = \\frac{\\mathrm{x}_i^{\\mathrm{T}}\\mathrm{x}_j}{||\\mathrm{x}_i|| \\cdot ||\\mathrm{x}_j||}\n\\end{align}\n```\n`euclidean`\u3068\u7570\u306a\u308a\uff0c`cosine`\u3067\u306f\u539f\u70b9\u304b\u3089\u653e\u5c04\u72b6\u306b\u5206\u96e2\u5e73\u9762\u304c\u69cb\u7bc9\u3055\u308c\u307e\u3059\uff0e\n\n\n<p><img src=\"https://media.giphy.com/media/l4JyWh9irQBUjBvhu/source.gif\" alt=\"\" /></p>\n\n# \u307e\u3068\u3081\n\njubatus\u306e\u5b66\u7fd2\u306e\u69d8\u5b50\u3092\u4eba\u5de5\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u3066\u53ef\u8996\u5316\u3057\u3066\u304d\u307e\u3057\u305f\uff0e\nAROW\u3068NHERD\u304c\u30ce\u30a4\u30ba\u306b\u5f37\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u3088\u304f\u308f\u304b\u3063\u305f\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u4eca\u56de\u306e\u53ef\u8996\u5316\u306b\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\uff0e2\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u307e\u3067\u3057\u304b\u53ef\u8996\u5316\u3067\u304d\u307e\u305b\u3093\u304c\uff0c\u305c\u3072\u7686\u3055\u3093\u306e\u624b\u5143\u306b\u3042\u308b\u30c7\u30fc\u30bf\u3067\u3082\u5b9f\u9a13\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n\n\u660e\u65e5\u306f@TkrUdagawa\u3055\u3093\u304c\u3044\u3089\u3059\u3068\u3084\u3092\u4f7f\u3063\u305f\u697d\u3057\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d39\u4ecb\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\uff0e\u697d\u3057\u307f\u3067\u3059\u306d\uff01\n\n\n```py:visualize_linear_classifier.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport os\nimport sys\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nfrom jubakit.classifier import Classifier, Schema, Dataset, Config\nfrom jubakit.model import JubaDump\nfrom sklearn.datasets import make_classification\nfrom sklearn.utils import shuffle, check_random_state\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n\n# user parameters\nmethod = sys.argv[1]\nport = 9199\nregularization_weight = 1.0\nseed = 42\nmeshsize = 50   # we can draw clear decision surface with large meshsize\n\n# setting random seed\nnp.random.seed(seed)\ncheck_random_state(seed)\n\n# load dataset\n\nX, y = make_classification(n_samples=100, n_features=2, n_redundant=0, n_informative=2, random_state=42, n_clusters_per_class=1, n_classes=3, flip_y=0)\nlabels = np.array(['c1', 'c2', 'c3'])\ny = labels[y]\nX, y = shuffle(X, y, random_state=42)        # sklearn iris dataset is unshuffled\n\n# prepare encoder to plot decision surface\nle = LabelEncoder()\nle.fit(labels)\nc = le.transform(y)\n\n# scale dataset with (mean, variance) = (0, 1)\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# calculate the domain\nX_min = X.min(axis=0)\n#X_min = np.ones(X.shape[1])\nX_max = X.max(axis=0)\nX0, X1 = np.meshgrid(np.linspace(X_min[0], X_max[0], meshsize),\n                     np.linspace(X_min[1], X_max[1], meshsize))\n\n# make training dataset\ndataset = Dataset.from_array(X, y)\n# make mesh dataset to plot decision surface\ncontourf_dataset = Dataset.from_array(np.c_[X0.ravel(), X1.ravel()])\n\n# setup and run jubatus\nconfig = Config(method=method,\n                parameter={'regularization_weight': regularization_weight})\nclassifier = Classifier.run(config, port=port)\n\n# construct classifier prediction models and dump model weights\nfor i, _ in enumerate(classifier.train(dataset)):\n    model_name = 'decision_surface_{}'.format(i)\n    classifier.save(name=model_name)\n\n# prepare figure\nfig, ax = plt.subplots()\n\ndef draw_decision_surface(i):\n    midx = int(i / 2)\n    sidx = int(i / 2) + (i % 2)\n    # load jubatus prediction model\n    model_name = 'decision_surface_{}'.format(midx)\n    classifier.load(name=model_name)\n    \n    # predict \n    Y_pred = []\n    for (_, _, result) in classifier.classify(contourf_dataset):\n        y_pred = le.transform(result[0][0])\n        Y_pred.append(y_pred)\n    Y_pred = np.array(Y_pred).reshape(X0.shape)  \n\n    # draw decision surface\n    ax.clear()\n    ax.set_xlim([X_min[0], X_max[0]])\n    ax.set_ylim([X_min[1], X_max[1]])\n    ax.contourf(X0, X1, Y_pred, alpha=0.3, cmap=plt.cm.jet)\n    ax.scatter(X[:sidx+1][:, 0], X[:sidx+1][:, 1], c=c[:sidx+1], s=60, cmap=plt.cm.jet)\n    ax.set_title('method={}, iteration={}'.format(method, sidx))\n    return ax\n         \nani = FuncAnimation(fig, draw_decision_surface, frames=np.arange(0, X.shape[0]*2), interval=100)\nani.save('{}.gif'.format(method), writer='imagemagick')\nplt.show()\nclassifier.stop()\n```\n\n```py:visualize_nn_classifier.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport os\nimport sys\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nfrom jubakit.classifier import Classifier, Schema, Dataset, Config\nfrom jubakit.model import JubaDump\nfrom sklearn.datasets import make_classification\nfrom sklearn.utils import shuffle, check_random_state\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n\n# user parameters\nport = 9299\nmethod = sys.argv[1]\nnearest_neighbor_num = 5\nlocal_sensitivity = 1\nhash_num = 512\nseed = 42\nmeshsize = 50   # we can draw clear decision surface with large meshsize\n\n# setting random seed\nnp.random.seed(seed)\ncheck_random_state(seed)\n\n# load dataset\nX, y = make_classification(n_samples=100, n_features=2, n_redundant=0, n_informative=2, random_state=42, n_clusters_per_class=1, n_classes=3, flip_y=0)\nlabels = np.array(['c1', 'c2', 'c3'])\ny = labels[y]\nX, y = shuffle(X, y, random_state=42)        # sklearn iris dataset is unshuffled\n\n# prepare encoder to plot decision surface\nle = LabelEncoder()\nle.fit(labels)\nc = le.transform(y)\n\n# scale dataset with (mean, variance) = (0, 1)\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# calculate the domain\nX_min = X.min(axis=0)\nX_max = X.max(axis=0)\nX0, X1 = np.meshgrid(np.linspace(X_min[0], X_max[0], meshsize),\n                     np.linspace(X_min[1], X_max[1], meshsize))\n\n# make training dataset\ndataset = Dataset.from_array(X, y)\n# make mesh dataset to plot decision surface\ncontourf_dataset = Dataset.from_array(np.c_[X0.ravel(), X1.ravel()])\n\n# setup and run jubatus\nconfig = Config(method=method,\n                parameter={\n                    'nearest_neighbor_num': nearest_neighbor_num,\n                    'local_sensitivity': local_sensitivity})\nclassifier = Classifier.run(config, port=port)\n\n# construct classifier prediction models and dump model weights\nfor i, _ in enumerate(classifier.train(dataset)):\n    model_name = 'nn_decision_surface_{}'.format(i)\n    classifier.save(name=model_name)\n\n# prepare figure\nfig, ax = plt.subplots()\n\ndef draw_decision_surface(i):\n    midx = int(i / 2)\n    sidx = int(i / 2) + (i % 2)\n    # load jubatus prediction model\n    model_name = 'nn_decision_surface_{}'.format(midx)\n    classifier.load(name=model_name)\n    \n    # predict \n    Y_pred = []\n    for (_, _, result) in classifier.classify(contourf_dataset):\n        y_pred = le.transform(result[0][0])\n        Y_pred.append(y_pred)\n    Y_pred = np.array(Y_pred).reshape(X0.shape)  \n\n    # draw decision surface\n    ax.clear()\n    ax.set_xlim([X_min[0], X_max[0]])\n    ax.set_ylim([X_min[1], X_max[1]])\n    ax.contourf(X0, X1, Y_pred, alpha=0.3, cmap=plt.cm.jet)\n    ax.scatter(X[:sidx+1][:, 0], X[:sidx+1][:, 1], c=c[:sidx+1], s=60, cmap=plt.cm.jet)\n    ax.set_title('method={}, iteration={}'.format(method, sidx))\n    return ax\n         \nani = FuncAnimation(fig, draw_decision_surface, frames=np.arange(0, X.shape[0]*2), interval=100)\nani.save('{}.gif'.format(method), writer='imagemagick')\nplt.show()\nclassifier.stop()\n\n```\n", "tags": ["jubatus", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning"]}