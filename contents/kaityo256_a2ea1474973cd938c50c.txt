{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\ngcc\u3068clang\u3067\u306f-Wall\u306b\u542b\u307e\u308c\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u7570\u306a\u308b\u3002\u4f8b\u3048\u3070gcc\u306e-Wall\u306b\u306f-Wmissing-braces\u304c\u542b\u307e\u308c\u306a\u3044\u304c\u3001clang\u306e-Wall\u306b\u306f\u542b\u307e\u308c\u308b\u3002\u3067\u3001\u305d\u3082\u305d\u3082clang/clang++\u306e-Wall\u306b\u4f55\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u304b\u3001\u3061\u3087\u3063\u3068\u63a2\u3057\u3066\u307f\u305f\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u4e00\u89a7\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8b66\u544a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u305f\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\nclang\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306fDiagnosticGroups.td\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u308c\u3092\u30d1\u30fc\u30b9\u3057\u3066\u3001all\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u4f55\u304c\u5b9a\u7fa9\u3055\u308c\u305f\u304b\u518d\u5e30\u7684\u306b\u8abf\u3079\u3066\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u624b\u629c\u304d\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\ndiag.rb\nlist = Array.new\n\nstr = \"\"\nwhile line=gets\n  next if line=~/^\\s*\\/\\//\n  next if line.chomp.strip == \"\"\n  str = str + line.chomp.strip\n  if line=~/\\;/\n    list.push str\n    str = \"\"\n  end\nend\n\nclass Diag\n  def initialize(name, value, array)\n    @name = name \n    @value = value\n    @array = array\n  end\n  def isLeaf\n    return @array == []\n  end\n  def show(aliasHash, diagHash, l=0)\n    if @array == []\n      l.times{print \"  \"}\n      puts @name\n    else \n      l.times{print \"  \"}\n      puts @name\n      @array.each{|v|\n        name = aliasHash[v.strip]\n        d = diagHash[name]\n        d.show(aliasHash,diagHash,l+1) \n      }\n    end\n  end\nend\n\ndiagHash = Hash.new\naliasHash = Hash.new\n\nlist.each{|line|\n  if line=~/def(.*): DiagGroup<\\\"(.*)\\\".*,.*\\[(.*)\\]>/\n    a = $1.strip\n    name = $2.strip\n    array = $3.split(/,/)\n    d = Diag.new(name,a, array)\n    diagHash[name] = d\n    aliasHash[a] = name if a != \"\"\n  elsif line=~/def (.*)\\s*:\\s*DiagGroup<\\\"(.*)\\\">/\n    a = $1.strip\n    name = $2.strip\n    d = Diag.new(name, a, [])\n    diagHash[name] = d\n    aliasHash[a] = name if a != \"\"\n  end\n}\n\ndiagHash[\"all\"].show(aliasHash, diagHash)\n\n\n\u30d1\u30fc\u30b9\u6f0f\u308c\u304c\u3042\u3063\u305f\u3089\u3059\u307f\u307e\u305b\u3093\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u306bDiagnosticGroups.td\u3092\u98df\u308f\u305b\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u51fa\u529b\u3092\u5f97\u308b\u3002\n$ ruby diag.rb DiagnosticGroups.td \nall\n  most\n    char-subscripts\n    comment\n    delete-non-virtual-dtor\n    format\n      format-extra-args\n      format-zero-length\n      nonnull\n      format-security\n      format-y2k\n      format-invalid-specifier\n    implicit\n      implicit-function-declaration\n      implicit-int\n    infinite-recursion\n    mismatched-tags\n    missing-braces\n    move\n      pessimizing-move\n      redundant-move\n      self-move\n    multichar\n    reorder\n    return-type\n      return-type-c-linkage\n    self-assign\n      self-assign-field\n    self-move\n    sizeof-array-argument\n    sizeof-array-decay\n    string-plus-int\n    trigraphs\n    uninitialized\n      sometimes-uninitialized\n      static-self-init\n    unknown-pragmas\n    unused\n      unused-argument\n      unused-function\n        unneeded-internal-declaration\n      unused-label\n      unused-private-field\n      unused-local-typedef\n      unused-value\n        unused-comparison\n        unused-result\n        unevaluated-expression\n          potentially-evaluated-expression\n      unused-variable\n        unused-const-variable\n      unused-property-ivar\n    volatile-register-var\n    objc-missing-super-calls\n    objc-designated-initializers\n    overloaded-virtual\n    private-extern\n    cast-of-sel-type\n    extern-c-compat\n  parentheses\n    logical-op-parentheses\n    logical-not-parentheses\n    bitwise-op-parentheses\n    shift-op-parentheses\n    overloaded-shift-op-parentheses\n    parentheses-equality\n    dangling-else\n  switch\n  switch-bool\n\n\u3064\u307e\u308a\u3001all\u306fmost\u3068parentheses\u3068switch\u3068switch-bool\u3078\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3067\u3042\u308a\u3001most\u306fformat\u3092\u542b\u307f\u3001format\u306fformat-extra-args\u7b49\u3092\u542b\u307f\u30fb\u30fb\u30fb\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n\u307e\u3068\u3081\nclang/clang++\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u89e3\u6c7a\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u305f\u3002\u518d\u5e30\u56de\u6570\u304c\u591a\u3044\u306e\u306f-Wall\u3060\u304c\u3001\u4ed6\u306b\u3082-Wgnu\u3084-Wmicrosoft\u306b\u4f55\u304c\u542b\u307e\u308c\u308b\u304b\u3068\u304b\u8868\u793a\u3059\u308b\u3068\u9762\u767d\u304b\u3063\u305f\u3002\n# \u306f\u3058\u3081\u306b\n\ngcc\u3068clang\u3067\u306f`-Wall`\u306b\u542b\u307e\u308c\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u7570\u306a\u308b\u3002\u4f8b\u3048\u3070gcc\u306e`-Wall`\u306b\u306f`-Wmissing-braces`\u304c\u542b\u307e\u308c\u306a\u3044\u304c\u3001clang\u306e`-Wall`\u306b\u306f\u542b\u307e\u308c\u308b\u3002\u3067\u3001\u305d\u3082\u305d\u3082clang/clang++\u306e`-Wall`\u306b\u4f55\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u304b\u3001\u3061\u3087\u3063\u3068\u63a2\u3057\u3066\u307f\u305f\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u4e00\u89a7\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8b66\u544a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u305f\u3002\n\n# \u30b9\u30af\u30ea\u30d7\u30c8\n\nclang\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306f[DiagnosticGroups.td](https://github.com/llvm-mirror/clang/blob/master/include/clang/Basic/DiagnosticGroups.td)\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u308c\u3092\u30d1\u30fc\u30b9\u3057\u3066\u3001all\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u4f55\u304c\u5b9a\u7fa9\u3055\u308c\u305f\u304b\u518d\u5e30\u7684\u306b\u8abf\u3079\u3066\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u624b\u629c\u304d\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```rb:diag.rb\nlist = Array.new\n\nstr = \"\"\nwhile line=gets\n  next if line=~/^\\s*\\/\\//\n  next if line.chomp.strip == \"\"\n  str = str + line.chomp.strip\n  if line=~/\\;/\n    list.push str\n    str = \"\"\n  end\nend\n\nclass Diag\n  def initialize(name, value, array)\n    @name = name \n    @value = value\n    @array = array\n  end\n  def isLeaf\n    return @array == []\n  end\n  def show(aliasHash, diagHash, l=0)\n    if @array == []\n      l.times{print \"  \"}\n      puts @name\n    else \n      l.times{print \"  \"}\n      puts @name\n      @array.each{|v|\n        name = aliasHash[v.strip]\n        d = diagHash[name]\n        d.show(aliasHash,diagHash,l+1) \n      }\n    end\n  end\nend\n\ndiagHash = Hash.new\naliasHash = Hash.new\n\nlist.each{|line|\n  if line=~/def(.*): DiagGroup<\\\"(.*)\\\".*,.*\\[(.*)\\]>/\n    a = $1.strip\n    name = $2.strip\n    array = $3.split(/,/)\n    d = Diag.new(name,a, array)\n    diagHash[name] = d\n    aliasHash[a] = name if a != \"\"\n  elsif line=~/def (.*)\\s*:\\s*DiagGroup<\\\"(.*)\\\">/\n    a = $1.strip\n    name = $2.strip\n    d = Diag.new(name, a, [])\n    diagHash[name] = d\n    aliasHash[a] = name if a != \"\"\n  end\n}\n\ndiagHash[\"all\"].show(aliasHash, diagHash)\n```\n\n\u30d1\u30fc\u30b9\u6f0f\u308c\u304c\u3042\u3063\u305f\u3089\u3059\u307f\u307e\u305b\u3093\u3002\n\n# \u5b9f\u884c\u7d50\u679c\n\n\u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u306bDiagnosticGroups.td\u3092\u98df\u308f\u305b\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u51fa\u529b\u3092\u5f97\u308b\u3002\n\n```shell-session\n$ ruby diag.rb DiagnosticGroups.td \nall\n  most\n    char-subscripts\n    comment\n    delete-non-virtual-dtor\n    format\n      format-extra-args\n      format-zero-length\n      nonnull\n      format-security\n      format-y2k\n      format-invalid-specifier\n    implicit\n      implicit-function-declaration\n      implicit-int\n    infinite-recursion\n    mismatched-tags\n    missing-braces\n    move\n      pessimizing-move\n      redundant-move\n      self-move\n    multichar\n    reorder\n    return-type\n      return-type-c-linkage\n    self-assign\n      self-assign-field\n    self-move\n    sizeof-array-argument\n    sizeof-array-decay\n    string-plus-int\n    trigraphs\n    uninitialized\n      sometimes-uninitialized\n      static-self-init\n    unknown-pragmas\n    unused\n      unused-argument\n      unused-function\n        unneeded-internal-declaration\n      unused-label\n      unused-private-field\n      unused-local-typedef\n      unused-value\n        unused-comparison\n        unused-result\n        unevaluated-expression\n          potentially-evaluated-expression\n      unused-variable\n        unused-const-variable\n      unused-property-ivar\n    volatile-register-var\n    objc-missing-super-calls\n    objc-designated-initializers\n    overloaded-virtual\n    private-extern\n    cast-of-sel-type\n    extern-c-compat\n  parentheses\n    logical-op-parentheses\n    logical-not-parentheses\n    bitwise-op-parentheses\n    shift-op-parentheses\n    overloaded-shift-op-parentheses\n    parentheses-equality\n    dangling-else\n  switch\n  switch-bool\n```\n\n\u3064\u307e\u308a\u3001`all`\u306f`most`\u3068`parentheses`\u3068`switch`\u3068`switch-bool`\u3078\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3067\u3042\u308a\u3001`most`\u306f`format`\u3092\u542b\u307f\u3001`format`\u306f`format-extra-args`\u7b49\u3092\u542b\u307f\u30fb\u30fb\u30fb\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n# \u307e\u3068\u3081\n\nclang/clang++\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u89e3\u6c7a\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u305f\u3002\u518d\u5e30\u56de\u6570\u304c\u591a\u3044\u306e\u306f`-Wall`\u3060\u304c\u3001\u4ed6\u306b\u3082`-Wgnu`\u3084`-Wmicrosoft`\u306b\u4f55\u304c\u542b\u307e\u308c\u308b\u304b\u3068\u304b\u8868\u793a\u3059\u308b\u3068\u9762\u767d\u304b\u3063\u305f\u3002\n", "tags": ["clang", "clang++", "Ruby"]}