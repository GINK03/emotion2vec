{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\n\u6982\u8981\n\n\u306f\u3058\u3081\u306b\u3001NSURLSession\u3067\u306e\u30d7\u30ed\u30ad\u30b7\u901a\u4fe1\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\n\u3064\u304e\u306b\u3001AFNetworking 2.x\u3067\u306e\u30d7\u30ed\u30ad\u30b7\u901a\u4fe1\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\n\u6700\u5f8c\u306b\u3001\u88dc\u8db3\u3068\u3057\u3066PAC\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\n\u5b9f\u88c5\u4f8b\u306f\u3001Mac OS X Yosemite 10.10.3\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\n\n\nAFNetworking\u306e\u88dc\u8db3\n\nAFNetworking 1.x\u3067\u306fNSURLConnection\u3092\u4f7f\u3063\u3066\u304a\u308a\u3001NSURLConnection\u306f\u30d7\u30ed\u30ad\u30b7\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001CFNetwork\u7cfb\u306eAPI\u3092\u4f7f\u3063\u3066\u72ec\u81ea\u306b\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\n\u4e00\u65b9\u3001AFNetworking 2.x\u3067\u306fNSURLSession\u3092\u4f7f\u3048\u3001NSURLSession\u306fNSURLSessionConfiguration.connectionProxyDictionary\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\n\u53c2\u8003: ios - how to set proxy details using AFNetworking - Stack Overflow\n\n\n\n\u3053\u3061\u3089\u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\n\nCocoa - NSURLSession\u3067\u4efb\u610f\u306eProxy\u3092\u4f7f\u3046 - Qiita\n\n\n\u6ce8\u610f\n\n\nAFNetworking 2.x\u306f\u3001iOS 6\u4ee5\u964d\u3001Mac OS X 10.8\u4ee5\u964d\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\n\n\nAFNetworking - Requirements\n\n\n\n\n(NSURLSession) \u30d7\u30ed\u30ad\u30b7\u901a\u4fe1\u306e\u5b9f\u88c5\u4f8b\n\n\nNSURLSessionNSURLSessionDataTask\u3092\u76f4\u63a5\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\n\u5b9f\u884c\u74b0\u5883: OS X Yosemite 10.10.3\nXcode 6.3.2\n\n\n- (IBAction)proxyConnectAction:(id)sender {  \n//  NSDictionary *httpProxy = @{(id)kCFNetworkProxiesHTTPEnable:  @(1),\n//                            (id)kCFStreamPropertyHTTPProxyHost: host,\n//                            (id)kCFStreamPropertyHTTPProxyPort: port};\n\n  // \u6ce8\u610f: iOS\u3067\u306f`HTTPS`\u306ekey\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\n  NSDictionary *httpsProxy = @{(id)kCFNetworkProxiesHTTPSEnable:    @(1),\n                               (id)kCFStreamPropertyHTTPSProxyHost: @\"127.0.0.1\",\n                               (id)kCFStreamPropertyHTTPSProxyPort: @(8888)};\n\n  NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];\n  configuration.connectionProxyDictionary = httpsProxy;\n  NSURL *url = [NSURL URLWithString:@\"https://www.example.com/foobar.png\"];\n  NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration];\n  NSURLSessionDataTask *dataTask = [session dataTaskWithURL:url completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n    NSLog(@\"response: %@\", response);\n    NSLog(@\"data length: %ld\", data.length);\n    if (error) {\n      NSLog(@\"error:%@\", error);\n    }\n  }];\n  [dataTask resume];\n}\n\n\n(AFNetworking 2.x) \u30d7\u30ed\u30ad\u30b7\u901a\u4fe1\u306e\u5b9f\u88c5\u4f8b\n\nAFNetworking\u306eAFHTTPSessionManager\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\n\u5b9f\u884c\u74b0\u5883: OS X Yosemite 10.10.3\nXcode 6.3.2\nAFNetworking 2.5.4\n\n\nRestClient\u306e\u4f8b\n\nRestClient.h\n#import <Foundation/Foundation.h>\n\n@interface RestClient : NSObject\n@property (copy, nonatomic) NSURL *baseURL;\n@property (copy, nonatomic) NSDictionary *proxyDictionary;\n@property (nonatomic) BOOL allowInvalidCertificates; // For debugging (Default: NO)\n\n- (instancetype)initWithBaseURL:(NSURL *)baseURL;\n- (instancetype)initWithBaseURL:(NSURL *)baseURL proxyDictionary:(NSDictionary *)proxyDictionary;\n\n- (void)getWithPath:(NSString *)path\n         parameters:(NSDictionary *)parameters\n            success:(void (^)(id responseObject))success\n            failure:(void (^)(NSError *error))failure;\n\n@end\n\n\n\n\ninitWithBaseURL:sessionConfiguration:\u3092\u4f7f\u3063\u3066\u3001AFHTTPSessionManager\u3092\u4f5c\u6210\u3057\u307e\u3059\n\nNSURLSessionConfiguration.connectionProxyDictionary\u306b\u3001\u30d7\u30ed\u30ad\u30b7\u306e\u60c5\u5831\u3092\u5165\u308c\u305fNSDictionary\u3092\u6307\u5b9a\u3057\u307e\u3059\n\n\nRestClient.m\n#import \"RestClient.h\"\n#import <AFNetworking/AFNetworking.h>\n\n@interface RestClient ()\n@property (strong) AFHTTPSessionManager *httpSessionManager;\n\n@end\n\n@implementation RestClient\n\n- (instancetype)initWithBaseURL:(NSURL *)baseURL {\n  self = [super init];\n  if (!self) {\n    return nil;\n  }\n\n  self.baseURL = baseURL;\n\n  return self;\n}\n\n- (instancetype)initWithBaseURL:(NSURL *)baseURL proxyDictionary:(NSDictionary *)proxyDictionary {\n  self = [self initWithBaseURL:baseURL];\n  if (!self) {\n    return nil;\n  }\n\n  self.proxyDictionary = proxyDictionary;\n\n  return self;\n}\n\n- (AFHTTPSessionManager *)_sessionManager {\n  AFHTTPSessionManager *manager = self.httpSessionManager;\n\n  if (!manager) {\n    // Configure AFHTTPSessionManager\n    NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];\n    sessionConfig.connectionProxyDictionary = self.proxyDictionary;\n\n    manager = [[AFHTTPSessionManager alloc] initWithBaseURL:self.baseURL sessionConfiguration:sessionConfig];\n    manager.securityPolicy.allowInvalidCertificates = self.allowInvalidCertificates;\n\n    // Set Serializer\n    manager.requestSerializer  = [AFJSONRequestSerializer serializer];\n    manager.responseSerializer = [AFJSONResponseSerializer serializer];\n\n    // Configure JSON Request Serializer\n    manager.requestSerializer.timeoutInterval = 20.0f;\n    manager.requestSerializer.cachePolicy     = NSURLRequestReloadIgnoringCacheData;\n\n    // Set default header to requestSerializer\n    [manager.requestSerializer setValue:@\"application/json\" forHTTPHeaderField:@\"Accept\"];\n    [manager.requestSerializer setValue:@\"application/json\" forHTTPHeaderField:@\"content-type\"];\n\n    // Configure JSON Response Serializer\n    ((AFJSONResponseSerializer *)(manager.responseSerializer)).readingOptions |= NSJSONReadingAllowFragments;\n    self.httpSessionManager = manager;\n  }\n\n  return manager;\n}\n\n- (void)getWithPath:(NSString *)path\n         parameters:(NSDictionary *)parameters\n            success:(void (^)(id responseObject))success\n            failure:(void (^)(NSError *error))failure {\n  AFHTTPSessionManager *manager = [self _sessionManager];\n  manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n  [manager GET:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {\n    NSLog(@\"task:%@\", task);\n    success(responseObject);\n  } failure:^(NSURLSessionDataTask *task, NSError *error) {\n    NSLog(@\"task:%@\", task);\n    failure(error);\n  }];\n}\n\n@end\n\n\n\nRestClient\u3092\u4f7f\u3046\u5074\n\nExample.m\n\n// [proxy] https://127.0.0.1:8888\nNSDictionary *httpsProxy = @{(id)kCFNetworkProxiesHTTPSEnable:    @(1),\n                             (id)kCFStreamPropertyHTTPSProxyHost: @\"127.0.0.1\",\n                             (id)kCFStreamPropertyHTTPSProxyPort: @(8888)};\n\nNSURL *baseURL = [self _baseURL];\nNSString *path = [self _path];\n\nRestClient *client = [[RestClient alloc] initWithBaseURL:baseURL proxyDictionary:httpsProxy];\n[client getWithPath:path parameters:nil success:^(id responseObject) {\n  NSData *data = (NSData *)responseObject;\n  NSImage *image = [[NSImage alloc] initWithData:data];\n  self.imageView.image = image;\n} failure:^(NSError *error) {\n  NSLog(@\"error: %@\", error);\n  self.imageView.image = nil;\n}];\n\n\n\n(\u88dc\u8db3) PAC\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\n\n\u30b7\u30b9\u30c6\u30e0\u74b0\u5883\u8a2d\u5b9a\n\n\n\u30b7\u30b9\u30c6\u30e0\u74b0\u5883\u8a2d\u5b9a\uff1e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff1e\u4efb\u610f\u306e\u30a2\u30c0\u30d7\u30bf\uff1e\u30d7\u30ed\u30ad\u30b7\u3067PAC\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\n\n\n\n\u5b9f\u88c5\u4f8b\n\n\u5b9f\u884c\u74b0\u5883: OS X Yosemite 10.10.3\nXcode 6.3.2\nCoreFoundation\u306eCFNetworkCopyProxiesForAutoConfigurationScript()\u4f7f\u3046\u3068\u3001\u3053\u308c\u304b\u3089\u63a5\u7d9a\u3059\u308bURL\u306b\u8a72\u5f53\u3059\u308b\u30d7\u30ed\u30ad\u30b7\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\n\n\n- (void)_proxiesWithPACScriptURL:(NSURL *)pacScriptURL intendedURL:(NSURL *)intendedURL {\n  if (!pacScriptURL || !intendedURL) {\n    return;\n  }\n\n  NSError *error = nil;\n  NSString *script;\n\n  script = [NSString stringWithContentsOfURL:pacScriptURL usedEncoding:NULL error:&error];\n  if (error) {\n    NSLog(@\"error: %@\", error);\n    return;\n  }\n\n  CFErrorRef cfErrorRef = NULL;\n  NSArray *proxies = (__bridge NSArray *)CFNetworkCopyProxiesForAutoConfigurationScript((__bridge CFStringRef)script, (__bridge CFURLRef)intendedURL, &cfErrorRef);\n  if (cfErrorRef || !proxies.count) {\n    NSError *error = (__bridge NSError *)cfErrorRef;\n    NSLog(@\"error: %@\", error);\n    return;\n  }\n\n  NSLog(@\"proxies: %@\", proxies);\n}\n\n- (IBAction)getProxyInfoAction:(id)sender {\n  CFDictionaryRef proxies = SCDynamicStoreCopyProxies(NULL);\n  NSDictionary *config = (__bridge NSDictionary *)proxies;\n\n  NSLog(@\"______________________\");\n  NSLog(@\"kSCPropNetProxiesProxyAutoDiscoveryEnable: %@\", config[(id)kSCPropNetProxiesProxyAutoDiscoveryEnable]);\n  NSLog(@\"kSCPropNetProxiesProxyAutoConfigEnable   : %@\", config[(id)kSCPropNetProxiesProxyAutoConfigEnable]);\n  NSLog(@\"kSCPropNetProxiesProxyAutoConfigURLString: %@\", config[(id)kSCPropNetProxiesProxyAutoConfigURLString]);\n\n  NSLog(@\"kSCPropNetProxiesHTTPEnable  : %@\", config[(id)kSCPropNetProxiesHTTPEnable]);\n  NSLog(@\"kSCPropNetProxiesHTTPPort    : %@\", config[(id)kSCPropNetProxiesHTTPPort]);\n  NSLog(@\"kSCPropNetProxiesHTTPSEnable : %@\", config[(id)kSCPropNetProxiesHTTPSEnable]);\n  NSLog(@\"kSCPropNetProxiesHTTPSPort   : %@\", config[(id)kSCPropNetProxiesHTTPSPort]);\n  NSLog(@\"______________________\");\n\n  NSURL *pacScriptURL = [NSURL URLWithString:config[(id)kSCPropNetProxiesProxyAutoConfigURLString]];\n  if (pacScriptURL) {\n    NSURL *intendedURL = [NSURL URLWithString:@\"https://www.apple.com\"];\n    [self _proxiesWithPACScriptURL:pacScriptURL intendedURL:intendedURL];\n  }\n}\n\n\nPAC\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\nfunction FindProxyForURL(url, host) {\n  if ( isInNet( host, \"127.0.0.1\", \"255.255.255.255\" )) {\n    return \"DIRECT\";\n  }\n  else if ( dnsDomainIs( host, \"beta.example.com\") ) {\n    return \"PROXY 127.0.0.1:8888\"\n  }\n  else {\n    return \"PROXY 127.0.0.1:8888\"\n  }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nProxyInfo[71363:4147289] ______________________\nProxyInfo[71363:4147289] kSCPropNetProxiesProxyAutoDiscoveryEnable: (null)\nProxyInfo[71363:4147289] kSCPropNetProxiesProxyAutoConfigEnable   : 1\nProxyInfo[71363:4147289] kSCPropNetProxiesProxyAutoConfigURLString: http://localhost:4567/proxy4.pac\nProxyInfo[71363:4147289] kSCPropNetProxiesHTTPEnable  : 0\nProxyInfo[71363:4147289] kSCPropNetProxiesHTTPPort    : (null)\nProxyInfo[71363:4147289] kSCPropNetProxiesHTTPSEnable : 0\nProxyInfo[71363:4147289] kSCPropNetProxiesHTTPSPort   : (null)\nProxyInfo[71363:4147289] ______________________\nProxyInfo[71363:4147289] proxies: (\n        {\n        kCFProxyHostNameKey = \"127.0.0.1\";\n        kCFProxyPortNumberKey = 8888;\n        kCFProxyTypeKey = kCFProxyTypeHTTPS;\n    }\n)\n\n\n\u53c2\u7167\n\nhttp proxy \u00b7 Issue #1945 \u00b7 AFNetworking/AFNetworking\nNSURLSessionConfiguration Class Reference | connectionProxyDictionary\nProperty\nios - How to programmatically add a proxy to an NSURLSession - Stack Overflow\n\n# \u306f\u3058\u3081\u306b\n## \u6982\u8981\n* \u306f\u3058\u3081\u306b\u3001`NSURLSession`\u3067\u306e\u30d7\u30ed\u30ad\u30b7\u901a\u4fe1\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\n* \u3064\u304e\u306b\u3001`AFNetworking 2.x`\u3067\u306e\u30d7\u30ed\u30ad\u30b7\u901a\u4fe1\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\n* \u6700\u5f8c\u306b\u3001\u88dc\u8db3\u3068\u3057\u3066PAC\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\n* \u5b9f\u88c5\u4f8b\u306f\u3001Mac OS X Yosemite 10.10.3\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\n\n## AFNetworking\u306e\u88dc\u8db3\n* AFNetworking 1.x\u3067\u306f`NSURLConnection`\u3092\u4f7f\u3063\u3066\u304a\u308a\u3001`NSURLConnection`\u306f\u30d7\u30ed\u30ad\u30b7\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001CFNetwork\u7cfb\u306eAPI\u3092\u4f7f\u3063\u3066\u72ec\u81ea\u306b\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\n* \u4e00\u65b9\u3001AFNetworking 2.x\u3067\u306f`NSURLSession`\u3092\u4f7f\u3048\u3001`NSURLSession`\u306f`NSURLSessionConfiguration.connectionProxyDictionary`\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\n* \u53c2\u8003: [ios - how to set proxy details using AFNetworking - Stack Overflow](http://stackoverflow.com/questions/17629616/how-to-set-proxy-details-using-afnetworking/17645314#17645314)\n\n## \u3053\u3061\u3089\u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\n* [Cocoa - NSURLSession\u3067\u4efb\u610f\u306eProxy\u3092\u4f7f\u3046 - Qiita](http://qiita.com/funayoi/items/a6ed4004a7763aaef64c)\n\n## \u6ce8\u610f\n* `AFNetworking 2.x`\u306f\u3001iOS 6\u4ee5\u964d\u3001Mac OS X 10.8\u4ee5\u964d\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\n * [AFNetworking - Requirements](https://github.com/AFNetworking/AFNetworking#requirements)\n\n# (NSURLSession) \u30d7\u30ed\u30ad\u30b7\u901a\u4fe1\u306e\u5b9f\u88c5\u4f8b\n* `NSURLSession``NSURLSessionDataTask`\u3092\u76f4\u63a5\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\n* \u5b9f\u884c\u74b0\u5883: OS X Yosemite 10.10.3\n* Xcode 6.3.2\n\n```objc\n\n- (IBAction)proxyConnectAction:(id)sender {  \n//  NSDictionary *httpProxy = @{(id)kCFNetworkProxiesHTTPEnable:  @(1),\n//                            (id)kCFStreamPropertyHTTPProxyHost: host,\n//                            (id)kCFStreamPropertyHTTPProxyPort: port};\n  \n  // \u6ce8\u610f: iOS\u3067\u306f`HTTPS`\u306ekey\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\n  NSDictionary *httpsProxy = @{(id)kCFNetworkProxiesHTTPSEnable:    @(1),\n                               (id)kCFStreamPropertyHTTPSProxyHost: @\"127.0.0.1\",\n                               (id)kCFStreamPropertyHTTPSProxyPort: @(8888)};\n\n  NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];\n  configuration.connectionProxyDictionary = httpsProxy;\n  NSURL *url = [NSURL URLWithString:@\"https://www.example.com/foobar.png\"];\n  NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration];\n  NSURLSessionDataTask *dataTask = [session dataTaskWithURL:url completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n    NSLog(@\"response: %@\", response);\n    NSLog(@\"data length: %ld\", data.length);\n    if (error) {\n      NSLog(@\"error:%@\", error);\n    }\n  }];\n  [dataTask resume];\n}\n```\n\n# (AFNetworking 2.x) \u30d7\u30ed\u30ad\u30b7\u901a\u4fe1\u306e\u5b9f\u88c5\u4f8b\n* AFNetworking\u306e`AFHTTPSessionManager`\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\n* \u5b9f\u884c\u74b0\u5883: OS X Yosemite 10.10.3\n* Xcode 6.3.2\n* AFNetworking 2.5.4\n\n## RestClient\u306e\u4f8b\n\n```objc:RestClient.h\n#import <Foundation/Foundation.h>\n\n@interface RestClient : NSObject\n@property (copy, nonatomic) NSURL *baseURL;\n@property (copy, nonatomic) NSDictionary *proxyDictionary;\n@property (nonatomic) BOOL allowInvalidCertificates; // For debugging (Default: NO)\n\n- (instancetype)initWithBaseURL:(NSURL *)baseURL;\n- (instancetype)initWithBaseURL:(NSURL *)baseURL proxyDictionary:(NSDictionary *)proxyDictionary;\n\n- (void)getWithPath:(NSString *)path\n         parameters:(NSDictionary *)parameters\n            success:(void (^)(id responseObject))success\n            failure:(void (^)(NSError *error))failure;\n\n@end\n```\n\n* [initWithBaseURL:sessionConfiguration:](http://cocoadocs.org/docsets/AFNetworking/2.0.0/Classes/AFHTTPSessionManager.html#//api/name/initWithBaseURL:sessionConfiguration:)\u3092\u4f7f\u3063\u3066\u3001`AFHTTPSessionManager`\u3092\u4f5c\u6210\u3057\u307e\u3059\n* `NSURLSessionConfiguration.connectionProxyDictionary`\u306b\u3001\u30d7\u30ed\u30ad\u30b7\u306e\u60c5\u5831\u3092\u5165\u308c\u305fNSDictionary\u3092\u6307\u5b9a\u3057\u307e\u3059\n\n\n```objc:RestClient.m\n#import \"RestClient.h\"\n#import <AFNetworking/AFNetworking.h>\n\n@interface RestClient ()\n@property (strong) AFHTTPSessionManager *httpSessionManager;\n\n@end\n\n@implementation RestClient\n\n- (instancetype)initWithBaseURL:(NSURL *)baseURL {\n  self = [super init];\n  if (!self) {\n    return nil;\n  }\n  \n  self.baseURL = baseURL;\n  \n  return self;\n}\n\n- (instancetype)initWithBaseURL:(NSURL *)baseURL proxyDictionary:(NSDictionary *)proxyDictionary {\n  self = [self initWithBaseURL:baseURL];\n  if (!self) {\n    return nil;\n  }\n  \n  self.proxyDictionary = proxyDictionary;\n  \n  return self;\n}\n\n- (AFHTTPSessionManager *)_sessionManager {\n  AFHTTPSessionManager *manager = self.httpSessionManager;\n  \n  if (!manager) {\n    // Configure AFHTTPSessionManager\n    NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];\n    sessionConfig.connectionProxyDictionary = self.proxyDictionary;\n    \n    manager = [[AFHTTPSessionManager alloc] initWithBaseURL:self.baseURL sessionConfiguration:sessionConfig];\n    manager.securityPolicy.allowInvalidCertificates = self.allowInvalidCertificates;\n    \n    // Set Serializer\n    manager.requestSerializer  = [AFJSONRequestSerializer serializer];\n    manager.responseSerializer = [AFJSONResponseSerializer serializer];\n    \n    // Configure JSON Request Serializer\n    manager.requestSerializer.timeoutInterval = 20.0f;\n    manager.requestSerializer.cachePolicy     = NSURLRequestReloadIgnoringCacheData;\n    \n    // Set default header to requestSerializer\n    [manager.requestSerializer setValue:@\"application/json\" forHTTPHeaderField:@\"Accept\"];\n    [manager.requestSerializer setValue:@\"application/json\" forHTTPHeaderField:@\"content-type\"];\n    \n    // Configure JSON Response Serializer\n    ((AFJSONResponseSerializer *)(manager.responseSerializer)).readingOptions |= NSJSONReadingAllowFragments;\n    self.httpSessionManager = manager;\n  }\n  \n  return manager;\n}\n\n- (void)getWithPath:(NSString *)path\n         parameters:(NSDictionary *)parameters\n            success:(void (^)(id responseObject))success\n            failure:(void (^)(NSError *error))failure {\n  AFHTTPSessionManager *manager = [self _sessionManager];\n  manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n  [manager GET:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {\n    NSLog(@\"task:%@\", task);\n    success(responseObject);\n  } failure:^(NSURLSessionDataTask *task, NSError *error) {\n    NSLog(@\"task:%@\", task);\n    failure(error);\n  }];\n}\n\n@end\n```\n\n## RestClient\u3092\u4f7f\u3046\u5074\n\n```objc:Example.m\n\n// [proxy] https://127.0.0.1:8888\nNSDictionary *httpsProxy = @{(id)kCFNetworkProxiesHTTPSEnable:    @(1),\n                             (id)kCFStreamPropertyHTTPSProxyHost: @\"127.0.0.1\",\n                             (id)kCFStreamPropertyHTTPSProxyPort: @(8888)};\n\nNSURL *baseURL = [self _baseURL];\nNSString *path = [self _path];\n\nRestClient *client = [[RestClient alloc] initWithBaseURL:baseURL proxyDictionary:httpsProxy];\n[client getWithPath:path parameters:nil success:^(id responseObject) {\n  NSData *data = (NSData *)responseObject;\n  NSImage *image = [[NSImage alloc] initWithData:data];\n  self.imageView.image = image;\n} failure:^(NSError *error) {\n  NSLog(@\"error: %@\", error);\n  self.imageView.image = nil;\n}];\n```\n\n# (\u88dc\u8db3) PAC\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\n## \u30b7\u30b9\u30c6\u30e0\u74b0\u5883\u8a2d\u5b9a\n* `\u30b7\u30b9\u30c6\u30e0\u74b0\u5883\u8a2d\u5b9a`\uff1e`\u30cd\u30c3\u30c8\u30ef\u30fc\u30af`\uff1e`\u4efb\u610f\u306e\u30a2\u30c0\u30d7\u30bf`\uff1e`\u30d7\u30ed\u30ad\u30b7`\u3067PAC\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\n\n![Proxy Settings](https://qiita-image-store.s3.amazonaws.com/881/49300/e9c9961f-569a-ceac-bb99-68c186700b81.png)\n\n## \u5b9f\u88c5\u4f8b\n* \u5b9f\u884c\u74b0\u5883: OS X Yosemite 10.10.3\n* Xcode 6.3.2\n* CoreFoundation\u306e`CFNetworkCopyProxiesForAutoConfigurationScript()`\u4f7f\u3046\u3068\u3001\u3053\u308c\u304b\u3089\u63a5\u7d9a\u3059\u308bURL\u306b\u8a72\u5f53\u3059\u308b\u30d7\u30ed\u30ad\u30b7\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\n\n```objc\n\n- (void)_proxiesWithPACScriptURL:(NSURL *)pacScriptURL intendedURL:(NSURL *)intendedURL {\n  if (!pacScriptURL || !intendedURL) {\n    return;\n  }\n  \n  NSError *error = nil;\n  NSString *script;\n  \n  script = [NSString stringWithContentsOfURL:pacScriptURL usedEncoding:NULL error:&error];\n  if (error) {\n    NSLog(@\"error: %@\", error);\n    return;\n  }\n  \n  CFErrorRef cfErrorRef = NULL;\n  NSArray *proxies = (__bridge NSArray *)CFNetworkCopyProxiesForAutoConfigurationScript((__bridge CFStringRef)script, (__bridge CFURLRef)intendedURL, &cfErrorRef);\n  if (cfErrorRef || !proxies.count) {\n    NSError *error = (__bridge NSError *)cfErrorRef;\n    NSLog(@\"error: %@\", error);\n    return;\n  }\n  \n  NSLog(@\"proxies: %@\", proxies);\n}\n\n- (IBAction)getProxyInfoAction:(id)sender {\n  CFDictionaryRef proxies = SCDynamicStoreCopyProxies(NULL);\n  NSDictionary *config = (__bridge NSDictionary *)proxies;\n  \n  NSLog(@\"______________________\");\n  NSLog(@\"kSCPropNetProxiesProxyAutoDiscoveryEnable: %@\", config[(id)kSCPropNetProxiesProxyAutoDiscoveryEnable]);\n  NSLog(@\"kSCPropNetProxiesProxyAutoConfigEnable   : %@\", config[(id)kSCPropNetProxiesProxyAutoConfigEnable]);\n  NSLog(@\"kSCPropNetProxiesProxyAutoConfigURLString: %@\", config[(id)kSCPropNetProxiesProxyAutoConfigURLString]);\n  \n  NSLog(@\"kSCPropNetProxiesHTTPEnable  : %@\", config[(id)kSCPropNetProxiesHTTPEnable]);\n  NSLog(@\"kSCPropNetProxiesHTTPPort    : %@\", config[(id)kSCPropNetProxiesHTTPPort]);\n  NSLog(@\"kSCPropNetProxiesHTTPSEnable : %@\", config[(id)kSCPropNetProxiesHTTPSEnable]);\n  NSLog(@\"kSCPropNetProxiesHTTPSPort   : %@\", config[(id)kSCPropNetProxiesHTTPSPort]);\n  NSLog(@\"______________________\");\n  \n  NSURL *pacScriptURL = [NSURL URLWithString:config[(id)kSCPropNetProxiesProxyAutoConfigURLString]];\n  if (pacScriptURL) {\n    NSURL *intendedURL = [NSURL URLWithString:@\"https://www.apple.com\"];\n    [self _proxiesWithPACScriptURL:pacScriptURL intendedURL:intendedURL];\n  }\n}\n```\n\n## PAC\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\n\n```js\nfunction FindProxyForURL(url, host) {\n  if ( isInNet( host, \"127.0.0.1\", \"255.255.255.255\" )) {\n    return \"DIRECT\";\n  }\n  else if ( dnsDomainIs( host, \"beta.example.com\") ) {\n    return \"PROXY 127.0.0.1:8888\"\n  }\n  else {\n    return \"PROXY 127.0.0.1:8888\"\n  }\n}\n```\n\n## \u5b9f\u884c\u7d50\u679c\n```\nProxyInfo[71363:4147289] ______________________\nProxyInfo[71363:4147289] kSCPropNetProxiesProxyAutoDiscoveryEnable: (null)\nProxyInfo[71363:4147289] kSCPropNetProxiesProxyAutoConfigEnable   : 1\nProxyInfo[71363:4147289] kSCPropNetProxiesProxyAutoConfigURLString: http://localhost:4567/proxy4.pac\nProxyInfo[71363:4147289] kSCPropNetProxiesHTTPEnable  : 0\nProxyInfo[71363:4147289] kSCPropNetProxiesHTTPPort    : (null)\nProxyInfo[71363:4147289] kSCPropNetProxiesHTTPSEnable : 0\nProxyInfo[71363:4147289] kSCPropNetProxiesHTTPSPort   : (null)\nProxyInfo[71363:4147289] ______________________\nProxyInfo[71363:4147289] proxies: (\n        {\n        kCFProxyHostNameKey = \"127.0.0.1\";\n        kCFProxyPortNumberKey = 8888;\n        kCFProxyTypeKey = kCFProxyTypeHTTPS;\n    }\n)\n```\n\n# \u53c2\u7167\n* [http proxy \u00b7 Issue #1945 \u00b7 AFNetworking/AFNetworking](https://github.com/AFNetworking/AFNetworking/issues/1945)\n* [NSURLSessionConfiguration Class Reference | connectionProxyDictionary\n Property](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSessionConfiguration_class/index.html#//apple_ref/occ/instp/NSURLSessionConfiguration/connectionProxyDictionary)\n* [ios - How to programmatically add a proxy to an NSURLSession - Stack Overflow](http://stackoverflow.com/questions/28101582/how-to-programmatically-add-a-proxy-to-an-nsurlsession)\n", "tags": ["Objective-C", "afnetworking2", "NSURLSession"]}