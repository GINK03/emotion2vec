{"context": "\n\n\u306f\u3058\u3081\u306b\nAWS Lambda\u3067\u30c6\u30f3\u30dd\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092S3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3002\u3055\u3089\u306b\u3001S3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5143\u306e\u5834\u6240\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u3068\u3044\u3046\u30b0\u30eb\u30b0\u30eb\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u30b7\u30b9\u30c6\u30e0\u69cb\u6210\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\n\n\n/tmp/log/sess/ \u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092 /tmp/sess-info.tar \u306b\u30a2\u30fc\u30ab\u30a4\u30d6\u3057\u307e\u3059\u3002\nS3<bucket>\u306b sess-info.tar \u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n/tmp/sess-info.tar \u3092\u524a\u9664\u3057\u3001S3<bucket>\u306esess-info.tar \u3092/tmp/sess-info.tar\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n/tmp/log/sess/ \u304c\u5b58\u5728\u3059\u308c\u3070\u524a\u9664\u3057\u3001sess-info.tar \u3092 /tmp/log/sess/ \u306b\u5c55\u958b\u3057\u307e\u3059\u3002\n\n\nLambda Code\nimport boto3\nimport os\nimport os.path\nimport tarfile\nimport shutil\n\ndef lambda_handler(event, context):\n    bucket_name = 'bucket_name'\n    tmp_dir = '/tmp/'\n    log_dir = '/tmp/log/sess/'\n    file_name = 'sess-info.tar'\n\n    key = file_name\n    file_path = tmp_dir + file_name\n\n    # === Step 1\n    # create log dir\n    if os.path.exists(log_dir) == False:\n        os.makedirs(log_dir)\n\n    # write log\n    with open(log_dir + 'log1.txt', 'w') as file:\n        file.write('hoge\\n')\n    with open(log_dir + 'log2.txt', 'w') as file:\n        file.write('fuga\\n')\n\n    # create log archive\n    with tarfile.open(file_path, mode='w:gz') as archive:\n        archive.add(log_dir)\n\n    # === Step 2\n    # create s3 resource\n    s3 = boto3.resource('s3')\n    bucket = s3.Bucket(bucket_name)\n\n    # upload log archive\n    bucket.upload_file(file_path, key)\n\n    # === Step 3\n    # delete log archive\n    if os.path.exists(file_path):\n        os.remove(file_path)\n\n    # download log archive\n    bucket.download_file(key, file_path)\n\n    # === Step 4\n    # delete log dir\n    if os.path.exists(log_dir):\n        shutil.rmtree(log_dir)\n\n    # extract log archive\n    with tarfile.open(file_path, mode='r:gz') as archive:\n        archive.extractall('/')\n\n\u203b bucket_name \u306f\u9069\u5b9c\u3001\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nLambda Configuration\n\nRuntime: Python 2.7\nHandler: lambda_function.lambda_handler\nRole: Choose an existing role\nExisting role: AmazonS3FullAccess\n\nMemory(MB): 128\nTimeout: 0 min 10 sec\n\n\u203b Lambda\u3068S3\u3092\u9023\u643a\u3055\u305b\u308b\u5834\u5408\u3001Lambda\u306brole\u3092\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u3067\u9023\u643a\u53ef\u80fd\u3067\u3057\u305f\u3002Session\u306bAccess Key Id,Secret Access Key\u3092\u6307\u5b9a\u3057\u305f\u308a\u3001S3\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\nS3 Bucket\nLambda Code\u306ebucket_name\u3068\u540c\u3058\u540d\u524d\u306eBucket\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u304a\u308f\u308a\u306b\nLambda\u306f\u3001\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306b\u8a2d\u8a08\u3059\u308b\u306e\u304c\u57fa\u672c\u3067\u3059\u304c\u3001\u30b9\u30c6\u30fc\u30c8\u30d5\u30eb\u306a\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u304f\u306a\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3059\u3002\n\u305d\u3093\u306a\u5834\u5408\u306f\u3001\u4e0b\u8a18\u3092\u3046\u307e\u304f\u5229\u7528\u3057\u3066\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\nLambda\u306e/tmp \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b 500 MB\u307e\u3067\u306e\u30c6\u30f3\u30dd\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u53ef\u80fd\nAmazon S3\u3068\u9023\u643a\nAmazon DynamoDB\u3068\u9023\u643a\n\n\u4eca\u56de\u306f\u3001Lambda\u306e/tmp\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068S3\u3092\u5229\u7528\u3059\u308b\u4f8b\u3067\u3057\u305f\u3002\n# \u306f\u3058\u3081\u306b\nAWS Lambda\u3067\u30c6\u30f3\u30dd\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092S3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3002\u3055\u3089\u306b\u3001S3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5143\u306e\u5834\u6240\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u3068\u3044\u3046\u30b0\u30eb\u30b0\u30eb\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n# \u30b7\u30b9\u30c6\u30e0\u69cb\u6210\n\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000![Lambda_S3.png](https://qiita-image-store.s3.amazonaws.com/0/107056/d85a44e6-5276-0956-7213-b3ba4627ebf8.png)\n\n1. `/tmp/log/sess/` \u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092 `/tmp/sess-info.tar` \u306b\u30a2\u30fc\u30ab\u30a4\u30d6\u3057\u307e\u3059\u3002\n3. S3\\<bucket>\u306b `sess-info.tar` \u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n3. `/tmp/sess-info.tar` \u3092\u524a\u9664\u3057\u3001S3\\<bucket>\u306e`sess-info.tar` \u3092`/tmp/sess-info.tar`\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n4. `/tmp/log/sess/` \u304c\u5b58\u5728\u3059\u308c\u3070\u524a\u9664\u3057\u3001`sess-info.tar` \u3092 `/tmp/log/sess/` \u306b\u5c55\u958b\u3057\u307e\u3059\u3002\n\n# Lambda Code\n\n```\nimport boto3\nimport os\nimport os.path\nimport tarfile\nimport shutil\n\ndef lambda_handler(event, context):\n    bucket_name = 'bucket_name'\n    tmp_dir = '/tmp/'\n    log_dir = '/tmp/log/sess/'\n    file_name = 'sess-info.tar'\n\n    key = file_name\n    file_path = tmp_dir + file_name\n\n    # === Step 1\n    # create log dir\n    if os.path.exists(log_dir) == False:\n        os.makedirs(log_dir)\n\n    # write log\n    with open(log_dir + 'log1.txt', 'w') as file:\n        file.write('hoge\\n')\n    with open(log_dir + 'log2.txt', 'w') as file:\n        file.write('fuga\\n')\n\n    # create log archive\n    with tarfile.open(file_path, mode='w:gz') as archive:\n        archive.add(log_dir)\n\n    # === Step 2\n    # create s3 resource\n    s3 = boto3.resource('s3')\n    bucket = s3.Bucket(bucket_name)\n\n    # upload log archive\n    bucket.upload_file(file_path, key)\n\n    # === Step 3\n    # delete log archive\n    if os.path.exists(file_path):\n        os.remove(file_path)\n\n    # download log archive\n    bucket.download_file(key, file_path)\n\n    # === Step 4\n    # delete log dir\n    if os.path.exists(log_dir):\n        shutil.rmtree(log_dir)\n\n    # extract log archive\n    with tarfile.open(file_path, mode='r:gz') as archive:\n        archive.extractall('/')\n```\n\u203b `bucket_name` \u306f\u9069\u5b9c\u3001\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# Lambda Configuration\n+ Runtime: Python 2.7\n+ Handler: lambda_function.lambda_handler\n+ Role: Choose an existing role\n+ Existing role: **AmazonS3FullAccess**\n+ Memory(MB): 128\n+ Timeout: 0 min 10 sec\n\n\u203b Lambda\u3068S3\u3092\u9023\u643a\u3055\u305b\u308b\u5834\u5408\u3001Lambda\u306brole\u3092\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u3067\u9023\u643a\u53ef\u80fd\u3067\u3057\u305f\u3002Session\u306bAccess Key Id,Secret Access Key\u3092\u6307\u5b9a\u3057\u305f\u308a\u3001S3\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n# S3 Bucket\nLambda Code\u306e`bucket_name`\u3068\u540c\u3058\u540d\u524d\u306eBucket\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n# \u304a\u308f\u308a\u306b\nLambda\u306f\u3001\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306b\u8a2d\u8a08\u3059\u308b\u306e\u304c\u57fa\u672c\u3067\u3059\u304c\u3001\u30b9\u30c6\u30fc\u30c8\u30d5\u30eb\u306a\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u304f\u306a\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3059\u3002\n\u305d\u3093\u306a\u5834\u5408\u306f\u3001\u4e0b\u8a18\u3092\u3046\u307e\u304f\u5229\u7528\u3057\u3066\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n+ Lambda\u306e/tmp \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b 500 MB\u307e\u3067\u306e\u30c6\u30f3\u30dd\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u53ef\u80fd\n+ Amazon S3\u3068\u9023\u643a\n+ Amazon DynamoDB\u3068\u9023\u643a\n\n\u4eca\u56de\u306f\u3001Lambda\u306e/tmp\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068S3\u3092\u5229\u7528\u3059\u308b\u4f8b\u3067\u3057\u305f\u3002\n", "tags": ["AWS", "Python", "boto3", "lambda"]}