{"context": " More than 1 year has passed since last update.\u524d\u56dePart 2\u306e\u7ffb\u8a33\u304b\u3089\u9593\u304c\u7a7a\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001ReactiveCocoa v4.0 RC1\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066API\u304c\u5b89\u5b9a\u3057\u3001\u82f1\u8a9e\u8a18\u4e8b\u306e\u66f4\u65b0\u3082\u843d\u3061\u7740\u3044\u305f\u306e\u3067\u7ffb\u8a33\u3092\u518d\u958b\u3057\u307e\u3059\u3002Part 3\u306f\u4ee5\u4e0b\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u306e\u7ffb\u8a33\u3067\u30591\u3002\nDependency Injection in MVVM Architecture with ReactiveCocoa Part 3: Designing the Model\n\n\u524d\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001Model\u3001View\u3001ViewModel\u306e\u5404\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304b\u3089\u306a\u308b\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3059\u308b\u305f\u3081\u306b\u3001Xcode\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eModel\u90e8\u5206\u3092\u958b\u767a\u3057\u307e\u3059\u3002\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u30b5\u30fc\u30d3\u30b9\u3067\u69cb\u6210\u3055\u308c\u308bModel\u3092\u8a2d\u8a08\u3057\u3001dependency injection\u3092\u884c\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3088\u308a\u3001\u30b7\u30b9\u30c6\u30e0\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u3053\u3068\u304c\u7279\u5fb4\u3067\u3059\u3002ReactiveCocoa\u3092\u4f7f\u7528\u3057\u3066\u3001MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eModel\u3001View\u3001ViewModel\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u305f\u3081\u306b\u4e0d\u53ef\u6b20\u306a\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3044\u307e\u3059\u3002\u307e\u305f\u3001JSON\u304b\u3089Swift\u306e\u578b\u3078\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046Himotoki\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\n\nSwinjectMVVMExample: \u767a\u5c55\u5f62\u3092\u542b\u3080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\nSwinjectMVVMExample_ForBlog: (Xcode\u3084\u5916\u90e8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u66f4\u65b0\u3092\u9664\u304d) \u30d6\u30ed\u30b0\u8a18\u4e8b\u306b\u6cbf\u3063\u305f\u8aac\u660e\u306e\u305f\u3081\u306e\u7c21\u7565\u5316\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n\n\nHimotoki\nHimotoki\u306fSwift\u3067\u66f8\u304b\u308c\u305f\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\u306aJSON\u30c7\u30b3\u30fc\u30c9\u5c02\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002JSON\u304b\u3089Swift\u306e\u578b\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092Decodable\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u7279\u306b\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a (let) \u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u7279\u5fb4\u3067\u3059\u3002\n\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001{ \"some_name\": \"Himotoki\", \"some_value\": 1 }\u306e\u3088\u3046\u306aJSON\u3092SomeValue\u578b\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3068\u3057\u307e\u3059\u3002\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u8a18\u8ff0\u306e\u305f\u3081\u3001SomeValue\u578b\u3092Decodable\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u6e96\u62e0\u3055\u305b\u307e\u3059\u3002\nstruct SomeValue {\n    let name: String\n    let value: Int\n}\n\nextension SomeValue: Decodable {\n    static func decode(e: Extractor) throws -> Group {\n        return try SomeValue(\n            name: e <| \"some_name\",\n            value: e <| \"some_value\"\n        )\n    }\n}\n\ndecode\u95a2\u6570\u306e\u4e2d\u3067\u3001SomeValue\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306e\u5f15\u6570\u3068\u3057\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001some_name\u3092SomeValue\u306ename\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u3001some_value\u3092value\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\nJSON\u30c7\u30fc\u30bf\u304b\u3089\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\u3001Alamofire\u3084NSJSONSerialization\u304b\u3089\u8fd4\u3055\u308c\u308b\n[String: AnyObject]\u578b\u306eJSON\u30c7\u30fc\u30bf\u3092\u5f15\u6570\u3068\u3057\u3066decode\u95a2\u6570\u3092\u547c\u3073\u307e\u3059\u3002\nfunc testSomeValue() {\n    // JSON data returned from Alamofire or NSJSONSerialization.\n    let json: [String: AnyObject] = [\"some_name\": \"Himotoki\", \"some_value\": 1]\n\n    let v: SomeValue? = try? decode(json)\n    XCTAssert(v != nil)\n    XCTAssert(v?.name == \"Himotoki\")\n    XCTAssert(v?.value == 1)\n}\n\nHimotoki\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001JSON\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u30592\u3002Himotoki\u306f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3084\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nPixabay API\u306e\u4ed5\u69d8\nPixabay API\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308b\u3068\u3001Pixabay\u306e\u30b5\u30fc\u30d0\u304b\u3089\u8fd4\u3063\u3066\u304f\u308bJSON\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u3088\u3046\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u753b\u50cf\u60c5\u5831\u306e\u914d\u5217\u3092hits\u3001\u898b\u3064\u304b\u3063\u305f\u753b\u50cf\u306e\u7dcf\u6570\u3092total\u3001API\u3067\u5229\u7528\u53ef\u80fd\u306a\u753b\u50cf\u306e\u7dcf\u6570\u3092totalHits\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n{\n    \"total\": 12274,\n    \"totalHits\": 240,\n    \"hits\": [\n        {\n            \"id\": 11574,\n            \"pageURL\": \"https://pixabay.com/en/sonnenblumen-sonnenblumenfeld-flora-11574/\",\n            \"type\": \"photo\",\n            \"tags\": \"sunflower, sunflower field, flora\",\n            \"previewURL\": \"https://pixabay.com/static/uploads/photo/2012/01/07/21/56/sunflower-11574_150.jpg\",\n            \"previewWidth\": 150,\n            \"previewHeight\": 92,\n            \"webformatURL\": \"https://pixabay.com/get/3b4f5d71752e6ce9cbcf/1356479243/aca42219d23fd9fe0cc6f1cc_640.jpg\",\n            \"webformatWidth\": 640,\n            \"webformatHeight\": 396,\n            \"imageWidth\": 1280,\n            \"imageHeight\": 792,\n            \"views\": 10928,\n            \"downloads\": 1649,\n            \"likes\": 70,\n            \"user\": \"WikiImages\"\n        },\n        {\n            \"id\": \"256\",\n            \"pageURL\": \"https://pixabay.com/en/example-image-256/\",\n            \"type\": \"photo\",\n            // ... etc.\n        },\n        //... 18 more hits for page number 1\n    ]\n}\n\n\nModel\u306e\u8a2d\u8a08\u306e\u6982\u8981\n\u4eca\u56de\u306e\u8a2d\u8a08\u3067\u306f\u3001Model\u3092\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u30b5\u30fc\u30d3\u30b9\u3067\u69cb\u6210\u3057\u307e\u3059\u3002\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306f\u5bfe\u8c61\u3068\u306a\u308b\u30b7\u30b9\u30c6\u30e0\u306b\u5b58\u5728\u3059\u308b\u6982\u5ff5\u3042\u308b\u3044\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u30593\u3002\u30b5\u30fc\u30d3\u30b9\u306f\u72b6\u614b\u306e\u306a\u3044\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u306f\u53ce\u307e\u3089\u306a\u3044\u3082\u306e\u3067\u3059\u3002\nViewModel\u3068Model\u3001\u305d\u3057\u3066Model\u3068\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u305f\u3081\u3001\u305d\u308c\u3089\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4e0b\u306e\u56f3\u3067ImageSearching\u3068Networking\u304c\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059\u3002ImageSearch\u3068Network\u306f\u305d\u308c\u3089\u306e\u5b9f\u88c5\u3067\u3059\u3002ViewModel\u306fImageSearching\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u901a\u3057\u3066Model\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u305d\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u5b9f\u88c5\u3067\u3042\u308bImageSearch\u306fNetworking\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u901a\u3057\u3066\u5916\u90e8\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u304cJSON\u30c7\u30fc\u30bf\u3092\u6301\u3064\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u751f\u3055\u305b\u3001\u305d\u306e\u30a4\u30d9\u30f3\u30c8\u304cViewModel\u3078\u3068\u4f1d\u64ad\u3057\u3066\u3044\u304f\u6642\u306bImageSearch\u306b\u3088\u3063\u3066\u30c7\u30fc\u30bf\u304cResponseEntity\u3084ImageEntity\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\n\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n\u3053\u306e\u7bc0\u3067\u306f\u3001Pixabay\u304b\u3089\u8fd4\u3055\u308c\u308b\u753b\u50cf\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8868\u3059\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u304d\u307e\u3059\u3002ExampleModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eImageEntity.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002Project Navigator\u4e0a\u306eExampleModel\u30b0\u30eb\u30fc\u30d7 (\u30d5\u30a9\u30eb\u30c0\u30a2\u30a4\u30b3\u30f3) \u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3066New File...\u3092\u9078\u629e\u3057\u3001Swift File\u3092\u9078\u629e\u3059\u308c\u3070\u3001ExampleModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002Xcode\u304c\u3069\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u304b\u805e\u3044\u3066\u304d\u305f\u6642\u306b\u306fExampleModel\u306e\u307f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nImageEntity.swift\nimport Himotoki\n\npublic struct ImageEntity {\n    public let id: UInt64\n\n    public let pageURL: String\n    public let pageImageWidth: Int\n    public let pageImageHeight: Int\n\n    public let previewURL: String\n    public let previewWidth: Int\n    public let previewHeight: Int\n\n    public let imageURL: String\n    public let imageWidth: Int\n    public let imageHeight: Int\n\n    public let viewCount: Int64\n    public let downloadCount: Int64\n    public let likeCount: Int64\n    public let tags: [String]\n    public let username: String\n}\n\n// MARK: Decodable\nextension ImageEntity: Decodable {\n    public static func decode(e: Extractor) throws -> ImageEntity {\n        let splitCSV: String -> [String] = { csv in\n            csv.characters\n                .split { $0 == \",\" }\n                .map {\n                    String($0).stringByTrimmingCharactersInSet(\n                        NSCharacterSet.whitespaceCharacterSet())\n                }\n        }\n\n        return try ImageEntity(\n            id: e <| \"id\",\n\n            pageURL: e <| \"pageURL\",\n            pageImageWidth: e <| \"imageWidth\",\n            pageImageHeight: e <| \"imageHeight\",\n\n            previewURL: e <| \"previewURL\",\n            previewWidth: e <| \"previewWidth\",\n            previewHeight: e <| \"previewHeight\",\n\n            imageURL: e <| \"webformatURL\",\n            imageWidth: e <| \"webformatWidth\",\n            imageHeight: e <| \"webformatHeight\",\n\n            viewCount: e <| \"views\",\n            downloadCount: e <| \"downloads\",\n            likeCount: e <| \"likes\",\n            tags: (try? e <| \"tags\").map(splitCSV) ?? [],\n            username: e <| \"user\"\n        )\n    }\n}\n\nImageEntity\u304c\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064struct\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3067\u3042\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u5b89\u5168\u6027\u3092\u78ba\u4fdd\u3067\u304d\u307e\u30594\u3002ExampleViewModel\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u578b\u306fpublic\u3067\u5b9a\u7fa9\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nImageEntity\u306b\u306f\u3001Swift\u306e\u547d\u540d\u6163\u7fd2\u3068\u30a2\u30d7\u30ea\u306e\u69cb\u6210\u306b\u5408\u308f\u305b\u3001JSON\u306e\u8981\u7d20\u3068\u7570\u306a\u308b\u540d\u524d\u306b\u3057\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3082\u3042\u308a\u307e\u3059\u3002id\u3001viewCount\u3001downloadCount\u3001likeCount\u306f\u300132-bit\u30b7\u30b9\u30c6\u30e0\u3067\u3082\u5927\u304d\u306a\u5024\u3092\u6271\u3048\u308b\u3088\u3046\u3001UInt64\u3084Int64\u3067\u5b9a\u7fa9\u3057\u3066\u3042\u308a\u307e\u3059\u3002JSON\u306e\u8981\u7d20tags\u306fCSV\u5f62\u5f0f\u306e\u6587\u5b57\u5217\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001ImageEntity\u3067\u306f(try? e <| \"tags\").map(splitCSV)\u306b\u3088\u308a\u5206\u5272\u3057\u305f\u6587\u5b57\u5217\u306e\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002?? []\u3092map\u306e\u8fd4\u308a\u5024\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001JSON\u30c7\u30fc\u30bf\u306btags\u304c\u306a\u304f\u3066nil\u304c\u8fd4\u3063\u3066\u304d\u305f\u5834\u5408\u306f\u4ee3\u308f\u308a\u306b\u7a7a\u914d\u5217\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\nExampleModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eResponseEntity.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u3053\u3067\u306f\u3001\u914d\u5217\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b<||\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002JSON\u306etotal\u8981\u7d20\u306f\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u5f8c\u3067\u5fc5\u8981\u306b\u306a\u3063\u305f\u3089\u8ffd\u52a0\u3059\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\nResponseEntity.swift\nimport Himotoki\n\npublic struct ResponseEntity {\n    public let totalCount: Int64\n    public let images: [ImageEntity]\n}\n\n// MARK: Decodable\nextension ResponseEntity: Decodable {\n    public static func decode(e: Extractor) throws -> ResponseEntity {\n        return try ResponseEntity(\n            totalCount: e <| \"totalHits\",\n            images: e <|| \"hits\"\n        )\n    }\n}\n\nImageEntity\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u3001ExampleModelTests\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eDummy.swift\u3068ImageEntitySpec.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nDummy.swift\nlet imageJSON: [String: AnyObject] = [\n    \"id\": 12345,\n    \"pageURL\": \"https://somewhere.com/page/\",\n    \"imageWidth\": 2000,\n    \"imageHeight\": 1000,\n    \"previewURL\": \"https://somewhere.com/preview.jpg\",\n    \"previewWidth\": 200,\n    \"previewHeight\": 100,\n    \"webformatURL\": \"https://somewhere.com/image.jpg\",\n    \"webformatWidth\": 600,\n    \"webformatHeight\": 300,\n    \"views\": 54321,\n    \"downloads\": 4321,\n    \"likes\": 321,\n    \"tags\": \"a, b c, d \",\n    \"user\": \"Swinject\"\n]\n\nImageEntitySpec.swift\nimport Quick\nimport Nimble\nimport Himotoki\n@testable import ExampleModel\n\nclass ImageEntitySpec: QuickSpec {\n    override func spec() {\n        it(\"parses JSON data to create a new instance.\") {\n            let image: ImageEntity? = try? decode(imageJSON)\n\n            expect(image).notTo(beNil())\n            expect(image?.id) == 12345\n            expect(image?.pageURL) == \"https://somewhere.com/page/\"\n            expect(image?.pageImageWidth) == 2000\n            expect(image?.pageImageHeight) == 1000\n            expect(image?.previewURL) == \"https://somewhere.com/preview.jpg\"\n            expect(image?.previewWidth) == 200\n            expect(image?.previewHeight) == 100\n            expect(image?.imageURL) == \"https://somewhere.com/image.jpg\"\n            expect(image?.imageWidth) == 600\n            expect(image?.imageHeight) == 300\n            expect(image?.viewCount) == 54321\n            expect(image?.downloadCount) == 4321\n            expect(image?.likeCount) == 321\n            expect(image?.tags) == [\"a\", \"b c\", \"d\"]\n            expect(image?.username) == \"Swinject\"\n        }\n        it(\"gets an empty array if tags element is nil.\") {\n            var missingJSON = imageJSON\n            missingJSON[\"tags\"] = nil\n            let image: ImageEntity? = try? decode(missingJSON)\n\n            expect(image).notTo(beNil())\n            expect(image?.tags.isEmpty).to(beTrue())\n        }\n        it(\"throws an error if any of JSON elements except tags is missing.\") {\n            for key in imageJSON.keys where key != \"tags\" {\n                var missingJSON = imageJSON\n                missingJSON[key] = nil\n                let image: ImageEntity? = try? decode(missingJSON)\n\n                expect(image).to(beNil())\n            }\n        }\n        it(\"ignores an extra JOSN element.\") {\n            var extraJSON = imageJSON\n            extraJSON[\"extraKey\"] = \"extra element\"\n            let image: ImageEntity? = try? decode(extraJSON)\n\n            expect(image).notTo(beNil())\n        }\n    }\n}\n\nDummy.swift\u306e\u4e2d\u3067\u306f\u3001\u30c0\u30df\u30fc\u306eJSON\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092imageJSON\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002Alamofire\u3084NSJSONSerialization\u304b\u3089\u8fd4\u3063\u3066\u304f\u308b\u3088\u3046\u306a[String: AnyObject]\u578b\u306eJSON\u30c7\u30fc\u30bf\u3092Himotoki\u306f\u6271\u3046\u305f\u3081\u3001imageJSON\u306fString\u3067\u306f\u306a\u304f[String: AnyObject]\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nit(\"parses JSON data to create a new instance.\")\u3067\u306f\u3001ImageEntity\u306e\u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304cJSON\u304b\u3089\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\nit(\"gets an empty array if tags element is nil.\")\u3067\u306f\u3001JSON\u30c7\u30fc\u30bf\u306btags\u8981\u7d20\u304c\u542b\u307e\u308c\u306a\u3044\u5834\u5408\u306b\u3001tags\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u7a7a\u914d\u5217\u304c\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\nit(\"throws an error if any of JSON elements except tags is missing.\")\u3067\u306f\u3001tags\u4ee5\u5916\u306eJSON\u8981\u7d20\u304c\u6b20\u3051\u3066\u3044\u308b\u5834\u5408\u306bdecode\u95a2\u6570\u304c\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u4e0d\u6b63\u306a\u3001\u3042\u308b\u3044\u306f\u58ca\u308c\u305fJSON\u30c7\u30fc\u30bf\u306ftry?\u3067nil\u304c\u8fd4\u3063\u3066\u304f\u308b\u304b\u898b\u308b\u3053\u3068\u306b\u3088\u308a\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nit(\"ignores an extra JOSN element.\")\u3067\u306f\u3001JSON\u30c7\u30fc\u30bf\u306b\u4f59\u5206\u306a\u8981\u7d20\u304c\u3042\u3063\u3066\u3082decode\u95a2\u6570\u306fImageEntity\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u4f59\u5206\u306a\u8981\u7d20\u3092\u7121\u8996\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5c06\u6765\u306ePixabay API\u306e\u5909\u66f4\u306b\u5bfe\u3057\u3066JSON\u30c7\u30fc\u30bf\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u5b89\u5168\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u6b21\u306b\u3001ExampleModelTests\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eResponseEntitySpec.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c6\u30b9\u30c8\u306e\u5185\u5bb9\u306f\u898b\u305f\u3068\u304a\u308a\u7c21\u5358\u3067\u3059\u3002\nResponseEntitySpec.swift\nimport Quick\nimport Nimble\nimport Himotoki\n@testable import ExampleModel\n\nclass ResponseEntitySpec: QuickSpec {\n    override func spec() {\n        let json: [String: AnyObject] = [\n            \"totalHits\": 123,\n            \"hits\": [imageJSON, imageJSON]\n        ]\n\n        it(\"parses JSON data to create a new instance.\") {\n            let response: ResponseEntity? = try? decode(json)\n\n            expect(response).notTo(beNil())\n            expect(response?.totalCount) == 123\n            expect(response?.images.count) == 2\n        }\n    }\n}\n\nCommand-U\u3092\u5165\u529b\u3057\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\u30d1\u30b9\u3057\u307e\u3057\u305f\u306d\u3002\u3053\u3053\u3067\u306f\u554f\u984c\u306a\u304f\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3057\u305f\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u958b\u767a\u3067\u306f\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3059\u308b\u307e\u3067\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3084\u30c6\u30b9\u30c8\u306e\u4fee\u6b63\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b5\u30fc\u30d3\u30b9\n\u30b7\u30f3\u30d7\u30eb\u306a\u5929\u6c17\u30a2\u30d7\u30ea\u306e\u4f8b\u306e\u6642\u3068\u540c\u69d8\u306b\u3001Networking\u306b\u9069\u5408\u3059\u308bNetwork\u578b\u306bAlamofire\u3092\u30ab\u30d7\u30bb\u30eb\u5316\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u3001ReactiveCocoa\u3092\u4f7f\u3063\u3066\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002ExampleModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eNetworking.swift\u3068Network.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nNetworking.swift\nimport ReactiveCocoa\n\npublic protocol Networking {\n    func requestJSON(url: String, parameters: [String : AnyObject]?)\n        -> SignalProducer<AnyObject, NetworkError>\n}\n\nNetwork.swift\nimport ReactiveCocoa\nimport Alamofire\n\npublic final class Network: Networking {\n    private let queue = dispatch_queue_create(\n        \"SwinjectMMVMExample.ExampleModel.Network.Queue\",\n        DISPATCH_QUEUE_SERIAL)\n\n    public init() { }\n\n    public func requestJSON(url: String, parameters: [String : AnyObject]?)\n        -> SignalProducer<AnyObject, NetworkError>\n    {\n        return SignalProducer { observer, disposable in\n            let serializer = Alamofire.Request.JSONResponseSerializer()\n            Alamofire.request(.GET, url, parameters: parameters)\n                .response(queue: self.queue, responseSerializer: serializer) {\n                    response in\n                    switch response.result {\n                    case .Success(let value):\n                        observer.sendNext(value)\n                        observer.sendCompleted()\n                    case .Failure(let error):\n                        observer.sendFailed(NetworkError(error: error))\n                    }\n                }\n        }\n    }\n}\n\n\u5929\u6c17\u30a2\u30d7\u30ea\u306e\u4f8b\u3067\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b5\u30fc\u30d3\u30b9\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u7528\u3044\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u6e21\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u3001requestJSON\u30e1\u30bd\u30c3\u30c9\u304cSignalProducer<AnyObject, NetworkError>\u3092\u8fd4\u3057\u3001\u305d\u308c\u306b\u3088\u308a\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u4f1d\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002Alamofire (\u3042\u308b\u3044\u306fNSJSONSerialization) \u304cJSON\u30c7\u30fc\u30bf\u3092AnyObject\u578b (\u5b9f\u4f53\u306f\u914d\u5217\u307e\u305f\u306f\u8f9e\u66f8) \u3068\u3057\u3066\u8fd4\u3059\u305f\u3081\u3001SignalProducer\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u3068\u3057\u3066AnyObject\u3092\u3068\u3063\u3066\u3044\u307e\u3059\u3002\nrequestJSON\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30c8\u30ec\u30a4\u30ea\u30f3\u30b0\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3063\u3066SignalProducer\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4e2d\u3067\u306f\u3001sendNext\u3001sendCompleted\u3001sendFailed\u3092\u547c\u3073\u51fa\u3057\u3066\u3001Alamofire\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30a4\u30d9\u30f3\u30c8\u304b\u3089ReactiveCocoa\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002SignalProducer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306estart\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u306f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u6e21\u3055\u308c\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u5b9f\u969b\u306b\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fAlamofire\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9 (\u30e1\u30a4\u30f3\u30ad\u30e5\u30fc) \u3067\u8fd4\u3059\u305f\u3081\u3001\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ad\u30e5\u30fc\u3092Alamofire\u306b\u6e21\u3057\u3066\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nsendFailed\u30e1\u30bd\u30c3\u30c9\u306fNetworkError\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5f15\u6570\u306b\u3068\u308a\u307e\u3059\u3002ExampleModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eNetworkError.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002Alamofire\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308bNSError\u3092\u30a2\u30d7\u30ea\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u578b\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u30595\u3002\nNetworkError.swift\nimport Foundation\n\npublic enum NetworkError: ErrorType {\n    /// Unknown or not supported error.\n    case Unknown\n\n    /// Not connected to the internet.\n    case NotConnectedToInternet\n\n    /// International data roaming turned off.\n    case InternationalRoamingOff\n\n    /// Cannot reach the server.\n    case NotReachedServer\n\n    /// Connection is lost.\n    case ConnectionLost\n\n    /// Incorrect data returned from the server.\n    case IncorrectDataReturned\n\n    internal init(error: NSError) {\n        if error.domain == NSURLErrorDomain {\n            switch error.code {\n            case NSURLErrorUnknown:\n                self = .Unknown\n            case NSURLErrorCancelled:\n                self = .Unknown // Cancellation is not used in this project.\n            case NSURLErrorBadURL:\n                self = .IncorrectDataReturned // Because it is caused by a bad URL returned in a JSON response from the server.\n            case NSURLErrorTimedOut:\n                self = .NotReachedServer\n            case NSURLErrorUnsupportedURL:\n                self = .IncorrectDataReturned\n            case NSURLErrorCannotFindHost, NSURLErrorCannotConnectToHost:\n                self = .NotReachedServer\n            case NSURLErrorDataLengthExceedsMaximum:\n                self = .IncorrectDataReturned\n            case NSURLErrorNetworkConnectionLost:\n                self = .ConnectionLost\n            case NSURLErrorDNSLookupFailed:\n                self = .NotReachedServer\n            case NSURLErrorHTTPTooManyRedirects:\n                self = .Unknown\n            case NSURLErrorResourceUnavailable:\n                self = .IncorrectDataReturned\n            case NSURLErrorNotConnectedToInternet:\n                self = .NotConnectedToInternet\n            case NSURLErrorRedirectToNonExistentLocation, NSURLErrorBadServerResponse:\n                self = .IncorrectDataReturned\n            case NSURLErrorUserCancelledAuthentication, NSURLErrorUserAuthenticationRequired:\n                self = .Unknown\n            case NSURLErrorZeroByteResource, NSURLErrorCannotDecodeRawData, NSURLErrorCannotDecodeContentData:\n                self = .IncorrectDataReturned\n            case NSURLErrorCannotParseResponse:\n                self = .IncorrectDataReturned\n            case NSURLErrorInternationalRoamingOff:\n                self = .InternationalRoamingOff\n            case NSURLErrorCallIsActive, NSURLErrorDataNotAllowed, NSURLErrorRequestBodyStreamExhausted:\n                self = .Unknown\n            case NSURLErrorFileDoesNotExist, NSURLErrorFileIsDirectory:\n                self = .IncorrectDataReturned\n            case\n            NSURLErrorNoPermissionsToReadFile,\n            NSURLErrorSecureConnectionFailed,\n            NSURLErrorServerCertificateHasBadDate,\n            NSURLErrorServerCertificateUntrusted,\n            NSURLErrorServerCertificateHasUnknownRoot,\n            NSURLErrorServerCertificateNotYetValid,\n            NSURLErrorClientCertificateRejected,\n            NSURLErrorClientCertificateRequired,\n            NSURLErrorCannotLoadFromNetwork,\n            NSURLErrorCannotCreateFile,\n            NSURLErrorCannotOpenFile,\n            NSURLErrorCannotCloseFile,\n            NSURLErrorCannotWriteToFile,\n            NSURLErrorCannotRemoveFile,\n            NSURLErrorCannotMoveFile,\n            NSURLErrorDownloadDecodingFailedMidStream,\n            NSURLErrorDownloadDecodingFailedToComplete:\n                self = .Unknown\n            default:\n                self = .Unknown\n            }\n        }\n        else {\n            self = .Unknown\n        }\n    }\n}\n\n\u305d\u308c\u3067\u306fNetwork\u578b\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002ExampleModelTests\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eNetworkSpec.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nNetworkSpec.swift\nimport Quick\nimport Nimble\n@testable import ExampleModel\n\nclass NetworkSpec: QuickSpec {\n    override func spec() {\n        var network: Network!\n        beforeEach {\n            network = Network()\n        }\n\n        describe(\"JSON\") {\n            it(\"eventually gets JSON data as specified with parameters.\") {\n                var json: [String: AnyObject]? = nil\n                let url = \"https://httpbin.org/get\"\n                network.requestJSON(url, parameters: [\"a\": \"b\", \"x\": \"y\"])\n                    .on(next: { json = $0 as? [String: AnyObject] })\n                    .start()\n\n                expect(json).toEventuallyNot(beNil(), timeout: 5)\n                expect((json?[\"args\"] as? [String: AnyObject])?[\"a\"] as? String)\n                    .toEventually(equal(\"b\"), timeout: 5)\n                expect((json?[\"args\"] as? [String: AnyObject])?[\"x\"] as? String)\n                    .toEventually(equal(\"y\"), timeout: 5)\n            }\n            it(\"eventually gets an error if the network has a problem.\") {\n                var error: NetworkError? = nil\n                let url = \"https://not.existing.server.comm/get\"\n                network.requestJSON(url, parameters: [\"a\": \"b\", \"x\": \"y\"])\n                    .on(failed: { error = $0 })\n                    .start()\n\n                expect(error)\n                    .toEventually(equal(NetworkError.NotReachedServer), timeout: 5)\n            }\n        }\n    }\n}\n\n\u3053\u3053\u3067\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306e\u7c21\u5358\u3067\u5b89\u5b9a\u3057\u305f\u30b5\u30fc\u30d0\u3068\u3057\u3066httpbin.org\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30b5\u30fc\u30d0\u306fAlamofire\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u3082\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a66\u3057\u306b\u30d6\u30e9\u30a6\u30b6\u3067 https://httpbin.org/get?a=b&x=y \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u308b\u3068\u3001\u3069\u306e\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3063\u3066\u304f\u308b\u304b\u308f\u304b\u308a\u307e\u3059\u3002\n\u6700\u521d\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u6307\u5b9a\u3057\u305f\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u306eJSON\u306b\"a\"\u304a\u3088\u3073\"x\"\u8981\u7d20\u304c\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u5024\u304c\"b\"\u304a\u3088\u3073\"y\"\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002json\u5909\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u30b5\u30fc\u30d0\u304b\u3089\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u975e\u540c\u671f\u306b\u53d7\u3051\u53d6\u3063\u3066\u3044\u307e\u3059\u3002requestJSON\u304b\u3089\u8fd4\u3055\u308c\u308bSignalProducer\u306b\u30aa\u30d6\u30b6\u30fc\u30d0 (\u3064\u307e\u308a\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9) \u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u3001json\u5909\u6570\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30bb\u30c3\u30c8\u3059\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u5f15\u6570\u3068\u3057\u3066on\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001start\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308aSignalProducer\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u958b\u59cb\u3057\u3066\u3044\u307e\u3059\u3002\u30ec\u30b9\u30dd\u30f3\u30b9\u306ftoEventually\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u975e\u540c\u671f\u3067\u30c1\u30a7\u30c3\u30af\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n2\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30a8\u30e9\u30fc\u306e\u5834\u5408\u306bNetworkError\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u64ec\u4f3c\u7684\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u305f\u3081\u3001\u5b58\u5728\u3057\u306a\u3044URL\u3092requestJSON\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3001\u6b21\u306e\u7bc0\u306b\u79fb\u308a\u307e\u3057\u3087\u3046\u3002\n\n\u753b\u50cf\u691c\u7d22\u30b5\u30fc\u30d3\u30b9\n\u3053\u306e\u7bc0\u3067\u306f\u3001Pixabay API\u3092\u5229\u7528\u3057\u3066\u753b\u50cf\u3092\u691c\u7d22\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u3053\u304cExampleModel\u306e\u4e2d\u5fc3\u3067\u3059\u3002\n\u6700\u521d\u306b\u3001ExampleModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306ePixabay.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002API\u306eURL\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002apiKey\u306b\u306fPixabay\u304b\u3089\u53d6\u5f97\u3057\u305f\u3054\u81ea\u8eab\u306eAPI\u30ad\u30fc\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nPixabay.swift\ninternal struct Pixabay {\n    internal static let apiURL = \"https://pixabay.com/api/\"\n\n    internal static var requestParameters: [String: AnyObject] {\n        return [\n            \"key\": Config.apiKey,\n            \"image_type\": \"photo\",\n            \"safesearch\": true,\n            \"per_page\": 50,\n        ]\n    }\n}\n\nextension Pixabay {\n    private struct Config {\n        private static let apiKey = \"\" // Fill with your own API key.\n    }\n}\n\n\u6b21\u306b\u3001ExampleModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eImageSearching.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002ResponseEntity\u306eSignalProducer\u3092\u8fd4\u3059searchImages\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nImageSearching.swift\nimport ReactiveCocoa\n\npublic protocol ImageSearching {\n    func searchImages() -> SignalProducer<ResponseEntity, NetworkError>\n}\n\n\u6700\u5f8c\u306b\u3001ExampleModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eImageSearch.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nImageSearch.swift\nimport ReactiveCocoa\nimport Result\nimport Himotoki\n\npublic final class ImageSearch: ImageSearching {\n    private let network: Networking\n\n    public init(network: Networking) {\n        self.network = network\n    }\n\n    public func searchImages() -> SignalProducer<ResponseEntity, NetworkError> {\n        let url = Pixabay.apiURL\n        let parameters = Pixabay.requestParameters\n        return network.requestJSON(url, parameters: parameters)\n            .attemptMap { json in\n                if let response = (try? decode(json)) as ResponseEntity? {\n                    return Result(value: response)\n                }\n                else {\n                    return Result(error: .IncorrectDataReturned)\n                }\n        }\n    }\n}\n\nImageSearch\u306fNetworking\u306b\u4f9d\u5b58\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u4f9d\u5b58\u6027\u306f\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3067\u6ce8\u5165\u3055\u308c\u3066\u3044\u307e\u3059 (Initializer Injection\u30d1\u30bf\u30fc\u30f3)\u3002\nsearchImages\u30e1\u30bd\u30c3\u30c9\u306f\u3001network.requestJSON\u304b\u3089\u8fd4\u3055\u308c\u308bSignalProducer<AnyObject, NetworkError>\u3092SignalProducer<ResponseEntity, NetworkError>\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002SignalProducer\u306e\u5909\u63db\u3067attemptMap\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002attemptMap\u306b\u6e21\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4e2d\u3067\u306f\u3001decode\u3092\u547c\u3093\u3067JSON\u30c7\u30fc\u30bf\u3092ResponseEntity\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001ResponseEntity\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092Result(value: response)\u3067\u5305\u3093\u3067\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u5931\u6557\u3057\u305f\u5834\u54086\u3001Result(error: .IncorrectDataReturned)\u3068\u3057\u3066\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u3042\u308b\u5024\u3092\u30a8\u30e9\u30fc\u3067\u306a\u304f\u5225\u306e\u5024\u306b\u5909\u63db\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u3001SignalProducer\u306emap\u30e1\u30bd\u30c3\u30c9\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n(try? decode(json)) as ResponseEntity?\u306e\u30ad\u30e3\u30b9\u30c8\u306f\u898b\u6163\u308c\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001decode\u95a2\u6570\u304cResponseEntity\u578b\u3092\u6271\u3046\u3088\u3046Swift\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u578b\u63a8\u8ad6\u3092\u88dc\u52a9\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\u3082\u3057\u30ad\u30e3\u30b9\u30c8\u304c(try? decode(json)) as? ResponseEntity\u3067\u3042\u308c\u3070\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u308c\u3067\u306f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002ExampleModelTests\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eImageSearchSpec.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nImageSearchSpec.swift\nimport Quick\nimport Nimble\nimport ReactiveCocoa\n@testable import ExampleModel\n\nclass ImageSearchSpec: QuickSpec {\n    // MARK: Stub\n    class GoodStubNetwork: Networking {\n        func requestJSON(url: String, parameters: [String : AnyObject]?)\n            -> SignalProducer<AnyObject, NetworkError>\n        {\n            var imageJSON0 = imageJSON\n            imageJSON0[\"id\"] = 0\n            var imageJSON1 = imageJSON\n            imageJSON1[\"id\"] = 1\n            let json: [String: AnyObject] = [\n                \"totalHits\": 123,\n                \"hits\": [imageJSON0, imageJSON1]\n            ]\n\n            return SignalProducer { observer, disposable in\n                observer.sendNext(json)\n                observer.sendCompleted()\n            }.observeOn(QueueScheduler())\n        }\n    }\n\n    class BadStubNetwork: Networking {\n        func requestJSON(url: String, parameters: [String : AnyObject]?)\n            -> SignalProducer<AnyObject, NetworkError>\n        {\n            let json = [String: AnyObject]()\n\n            return SignalProducer { observer, disposable in\n                observer.sendNext(json)\n                observer.sendCompleted()\n            }.observeOn(QueueScheduler())\n        }\n    }\n\n    class ErrorStubNetwork: Networking {\n        func requestJSON(url: String, parameters: [String : AnyObject]?)\n            -> SignalProducer<AnyObject, NetworkError>\n        {\n            return SignalProducer { observer, disposable in\n                observer.sendFailed(.NotConnectedToInternet)\n            }.observeOn(QueueScheduler())\n        }\n    }\n\n    // MARK: - Spec\n    override func spec() {\n        it(\"returns images if the network works correctly.\") {\n            var response: ResponseEntity? = nil\n            let search = ImageSearch(network: GoodStubNetwork())\n            search.searchImages()\n                .on(next: { response = $0 })\n                .start()\n\n            expect(response).toEventuallyNot(beNil())\n            expect(response?.totalCount).toEventually(equal(123))\n            expect(response?.images.count).toEventually(equal(2))\n            expect(response?.images[0].id).toEventually(equal(0))\n            expect(response?.images[1].id).toEventually(equal(1))\n        }\n        it(\"sends an error if the network returns incorrect data.\") {\n            var error: NetworkError? = nil\n            let search = ImageSearch(network: BadStubNetwork())\n            search.searchImages()\n                .on(failed: { error = $0 })\n                .start()\n\n            expect(error).toEventually(equal(NetworkError.IncorrectDataReturned))\n        }\n        it(\"passes the error sent by the network.\") {\n            var error: NetworkError? = nil\n            let search = ImageSearch(network: ErrorStubNetwork())\n            search.searchImages()\n                .on(failed: { error = $0 })\n                .start()\n\n            expect(error).toEventually(equal(NetworkError.NotConnectedToInternet))\n        }\n    }\n}\n\n\u5148\u982d\u30673\u3064\u306e\u30b9\u30bf\u30d6\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002GoodStubNetwork\u306f\u6b63\u3057\u3044JSON\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308bSignalProducer\u3092\u8fd4\u3057\u307e\u3059\u3002BadStubNetwork\u306f\u3001\u7a7a\u306e\u8f9e\u66f8\u306e\u5f62\u3067\u4e0d\u6b63\u306aJSON\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308bSignalProducer\u3092\u8fd4\u3057\u307e\u3059\u3002ErrorStubNetwork\u306f\u3001JSON\u30c7\u30fc\u30bf\u306e\u4ee3\u308f\u308a\u306b\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3059\u308bSignalProducer\u3092\u8fd4\u3057\u307e\u3059\u3002.observeOn(QueueScheduler())\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u3059\u3079\u3066\u306eSignalProducer\u306b\u304a\u3044\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u51fa\u529b\u3057\u3001\u975e\u540c\u671f\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u6a21\u64ec\u3057\u3066\u3044\u307e\u3059\u3002\nspec()\u306e\u4e2d\u3067\u306f\u30013\u3064\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8 (\u3042\u308b\u3044\u306f\u30b9\u30da\u30c3\u30af) \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u30021\u3064\u76ee\u306f\u3001attemptMap\u304c\u6b63\u3057\u304fJSON\u30c7\u30fc\u30bf\u3092ResponseEntity\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u30022\u3064\u76ee\u306f\u3001attemptMap\u304cJSON\u30c7\u30fc\u30bf\u3092\u30a8\u30e9\u30fc\u306b\u5909\u63db\u3059\u308b\u30b1\u30fc\u30b9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u30023\u3064\u76ee\u306f\u3001ErrorStubNetwork\u304b\u3089\u51fa\u529b\u3055\u308c\u308b\u30a8\u30e9\u30fc\u304cImageSearch\u3092\u901a\u3057\u3066\u6e21\u3063\u3066\u304f\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\nCommand-U\u3092\u5165\u529b\u3057\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\u30d1\u30b9\u3057\u307e\u3057\u305f\u306d\uff01\u3053\u308c\u3067\u3001MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eModel\u306e\u4e2d\u5fc3\u7684\u306a\u90e8\u5206\u3092\u5b9f\u88c5\u3057\u7d42\u3048\u307e\u3057\u305f\u3002\n\n\u307e\u3068\u3081\n\u4f8b\u984c\u30a2\u30d7\u30ea\u306eModel\u90e8\u5206\u3092MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u958b\u767a\u3059\u308b\u3053\u3068\u3092\u901a\u3057\u3066\u3001Model\u3092ViewModel\u304a\u3088\u3073\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u758e\u7d50\u5408\u306b\u3059\u308b\u8a2d\u8a08\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5b9f\u88c5\u306b\u5bfe\u3059\u308b\u76f4\u63a5\u7684\u306a\u4f9d\u5b58\u3092\u6392\u9664\u3067\u304d\u307e\u3057\u305f\u3002\u758e\u7d50\u5408\u306b\u3057\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u9593\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u305f\u3081\u306bRectiveCocoa\u3092\u5229\u7528\u3057\u305f\u307e\u3057\u305f\u3002\u307e\u305f\u3001Himotoki\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306bJSON\u30c7\u30fc\u30bf\u3092\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u307e\u3057\u305f\u3002\u6b21\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001View\u3068ViewModel\u90e8\u5206\u3092\u8a2d\u8a08\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u3082\u3057\u8cea\u554f\u3001\u63d0\u6848\u3001\u554f\u984c\u306a\u3069\u304c\u3042\u308c\u3070\u6c17\u8efd\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u3069\u3046\u305e\u3002\n\n\n\n\n\u8a33\u6ce8: \u82f1\u8a9e\u7248\u306e\u8457\u8005\u672c\u4eba\u306b\u3088\u308b\u7ffb\u8a33\u306e\u305f\u3081\u3001\u7ffb\u8a33\u306b\u95a2\u308f\u308b\u8457\u4f5c\u6a29\u4e0a\u306e\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u00a0\u21a9\n\n\n\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u6163\u308c\u3066\u3044\u305f\u3089\u3001Argo\u3082\u4fbf\u5229\u306aJSON\u30d1\u30fc\u30b5\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u00a0\u21a9\n\n\nDDD (\u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u8a2d\u8a08)\u3067\u306f\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306f\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u306e\u6982\u5ff5\u3067\u3042\u308a\u3001\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u3088\u308a\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u306f\u95a2\u4fc2\u306a\u304f\u3001\u5358\u306b\u6982\u5ff5\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u3059\u8a00\u8449\u3068\u3057\u3066\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u7528\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3042\u308b\u3044\u306f\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3067\u3042\u308b\u3053\u3068\u306e\u3088\u308a\u8a73\u3057\u3044\u8aac\u660e\u306f\u3053\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u00a0\u21a9\n\n\nErrorType\u306b\u3064\u3044\u3066\u3088\u308a\u6df1\u304f\u5b66\u3076\u305f\u3081\u306b\u3001\"How to Implement the ErrorType Protocol\"\u3092\u8aad\u3080\u3053\u3068\u3092\u304a\u85a6\u3081\u3057\u307e\u3059\u3002\u00a0\u21a9\n\n\ntry?\u306f\u5358\u306b\u30d6\u30ed\u30b0\u8a18\u4e8b\u3092\u7c21\u7565\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002do-try-catch\u306e\u307b\u3046\u304c\u30a8\u30e9\u30fc\u60c5\u5831\u306b\u57fa\u3065\u3044\u305f\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n[\u524d\u56dePart 2](http://qiita.com/yoichitgy/items/ab9a3c019b4e3e89c63d)\u306e\u7ffb\u8a33\u304b\u3089\u9593\u304c\u7a7a\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001[ReactiveCocoa v4.0 RC1](https://github.com/ReactiveCocoa/ReactiveCocoa/releases)\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066API\u304c\u5b89\u5b9a\u3057\u3001\u82f1\u8a9e\u8a18\u4e8b\u306e\u66f4\u65b0\u3082\u843d\u3061\u7740\u3044\u305f\u306e\u3067\u7ffb\u8a33\u3092\u518d\u958b\u3057\u307e\u3059\u3002Part 3\u306f\u4ee5\u4e0b\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u306e\u7ffb\u8a33\u3067\u3059[^\u8a33\u6ce81]\u3002\n\n[Dependency Injection in MVVM Architecture with ReactiveCocoa Part 3: Designing the Model](https://yoichitgy.github.io/post/dependency-injection-in-mvvm-architecture-with-reactivecocoa-part-3-designing-the-model/)\n\n* * *\n\n[\u524d\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b](http://qiita.com/yoichitgy/items/ab9a3c019b4e3e89c63d)\u3067\u306f\u3001Model\u3001View\u3001ViewModel\u306e\u5404\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304b\u3089\u306a\u308b\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3059\u308b\u305f\u3081\u306b\u3001Xcode\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eModel\u90e8\u5206\u3092\u958b\u767a\u3057\u307e\u3059\u3002\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u30b5\u30fc\u30d3\u30b9\u3067\u69cb\u6210\u3055\u308c\u308bModel\u3092\u8a2d\u8a08\u3057\u3001dependency injection\u3092\u884c\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3088\u308a\u3001\u30b7\u30b9\u30c6\u30e0\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u3053\u3068\u304c\u7279\u5fb4\u3067\u3059\u3002[ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa)\u3092\u4f7f\u7528\u3057\u3066\u3001MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eModel\u3001View\u3001ViewModel\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u305f\u3081\u306b\u4e0d\u53ef\u6b20\u306a\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3044\u307e\u3059\u3002\u307e\u305f\u3001JSON\u304b\u3089Swift\u306e\u578b\u3078\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046[Himotoki](https://github.com/ikesyo/Himotoki)\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\n- [SwinjectMVVMExample](https://github.com/Swinject/SwinjectMVVMExample): \u767a\u5c55\u5f62\u3092\u542b\u3080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n- [SwinjectMVVMExample_ForBlog](https://github.com/yoichitgy/SwinjectMVVMExample_ForBlog): (Xcode\u3084\u5916\u90e8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u66f4\u65b0\u3092\u9664\u304d) \u30d6\u30ed\u30b0\u8a18\u4e8b\u306b\u6cbf\u3063\u305f\u8aac\u660e\u306e\u305f\u3081\u306e\u7c21\u7565\u5316\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n![SwinjectMVVMExample ScreenRecord](https://yoichitgy.github.io/images/post/2015-08/SwinjectMVVMExampleScreenRecord.gif)\n\n## Himotoki\n\n[Himotoki](https://github.com/ikesyo/Himotoki)\u306fSwift\u3067\u66f8\u304b\u308c\u305f\u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\u306aJSON\u30c7\u30b3\u30fc\u30c9\u5c02\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002JSON\u304b\u3089Swift\u306e\u578b\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092`Decodable`\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u7279\u306b\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a (let) \u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u7279\u5fb4\u3067\u3059\u3002\n\n\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001`{ \"some_name\": \"Himotoki\", \"some_value\": 1 }`\u306e\u3088\u3046\u306aJSON\u3092`SomeValue`\u578b\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3068\u3057\u307e\u3059\u3002\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u8a18\u8ff0\u306e\u305f\u3081\u3001`SomeValue`\u578b\u3092`Decodable`\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u6e96\u62e0\u3055\u305b\u307e\u3059\u3002\n\n    struct SomeValue {\n        let name: String\n        let value: Int\n    }\n\n    extension SomeValue: Decodable {\n        static func decode(e: Extractor) throws -> Group {\n            return try SomeValue(\n                name: e <| \"some_name\",\n                value: e <| \"some_value\"\n            )\n        }\n    }\n\n`decode`\u95a2\u6570\u306e\u4e2d\u3067\u3001`SomeValue`\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306e\u5f15\u6570\u3068\u3057\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001`some_name`\u3092`SomeValue`\u306e`name`\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u3001`some_value`\u3092`value`\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\n\nJSON\u30c7\u30fc\u30bf\u304b\u3089\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\u3001Alamofire\u3084NSJSONSerialization\u304b\u3089\u8fd4\u3055\u308c\u308b\n`[String: AnyObject]`\u578b\u306eJSON\u30c7\u30fc\u30bf\u3092\u5f15\u6570\u3068\u3057\u3066`decode`\u95a2\u6570\u3092\u547c\u3073\u307e\u3059\u3002\n\n    func testSomeValue() {\n        // JSON data returned from Alamofire or NSJSONSerialization.\n        let json: [String: AnyObject] = [\"some_name\": \"Himotoki\", \"some_value\": 1]\n\n        let v: SomeValue? = try? decode(json)\n        XCTAssert(v != nil)\n        XCTAssert(v?.name == \"Himotoki\")\n        XCTAssert(v?.value == 1)\n    }\n\nHimotoki\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001JSON\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059[^1]\u3002Himotoki\u306f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3084\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f[\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30da\u30fc\u30b8](https://github.com/ikesyo/Himotoki)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## Pixabay API\u306e\u4ed5\u69d8\n\n[Pixabay API\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://pixabay.com/api/docs/)\u306b\u3088\u308b\u3068\u3001Pixabay\u306e\u30b5\u30fc\u30d0\u304b\u3089\u8fd4\u3063\u3066\u304f\u308bJSON\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u3088\u3046\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u753b\u50cf\u60c5\u5831\u306e\u914d\u5217\u3092`hits`\u3001\u898b\u3064\u304b\u3063\u305f\u753b\u50cf\u306e\u7dcf\u6570\u3092`total`\u3001API\u3067\u5229\u7528\u53ef\u80fd\u306a\u753b\u50cf\u306e\u7dcf\u6570\u3092`totalHits`\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n    {\n        \"total\": 12274,\n        \"totalHits\": 240,\n        \"hits\": [\n            {\n                \"id\": 11574,\n                \"pageURL\": \"https://pixabay.com/en/sonnenblumen-sonnenblumenfeld-flora-11574/\",\n                \"type\": \"photo\",\n                \"tags\": \"sunflower, sunflower field, flora\",\n                \"previewURL\": \"https://pixabay.com/static/uploads/photo/2012/01/07/21/56/sunflower-11574_150.jpg\",\n                \"previewWidth\": 150,\n                \"previewHeight\": 92,\n                \"webformatURL\": \"https://pixabay.com/get/3b4f5d71752e6ce9cbcf/1356479243/aca42219d23fd9fe0cc6f1cc_640.jpg\",\n                \"webformatWidth\": 640,\n                \"webformatHeight\": 396,\n                \"imageWidth\": 1280,\n                \"imageHeight\": 792,\n                \"views\": 10928,\n                \"downloads\": 1649,\n                \"likes\": 70,\n                \"user\": \"WikiImages\"\n            },\n            {\n                \"id\": \"256\",\n                \"pageURL\": \"https://pixabay.com/en/example-image-256/\",\n                \"type\": \"photo\",\n                // ... etc.\n            },\n            //... 18 more hits for page number 1\n        ]\n    }\n\n## Model\u306e\u8a2d\u8a08\u306e\u6982\u8981\n\n\u4eca\u56de\u306e\u8a2d\u8a08\u3067\u306f\u3001Model\u3092\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u30b5\u30fc\u30d3\u30b9\u3067\u69cb\u6210\u3057\u307e\u3059\u3002\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306f\u5bfe\u8c61\u3068\u306a\u308b\u30b7\u30b9\u30c6\u30e0\u306b\u5b58\u5728\u3059\u308b\u6982\u5ff5\u3042\u308b\u3044\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059[^2]\u3002\u30b5\u30fc\u30d3\u30b9\u306f\u72b6\u614b\u306e\u306a\u3044\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u306f\u53ce\u307e\u3089\u306a\u3044\u3082\u306e\u3067\u3059\u3002\n\nViewModel\u3068Model\u3001\u305d\u3057\u3066Model\u3068\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u305f\u3081\u3001\u305d\u308c\u3089\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4e0b\u306e\u56f3\u3067`ImageSearching`\u3068`Networking`\u304c\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059\u3002`ImageSearch`\u3068`Network`\u306f\u305d\u308c\u3089\u306e\u5b9f\u88c5\u3067\u3059\u3002ViewModel\u306f`ImageSearching`\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u901a\u3057\u3066Model\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u305d\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u5b9f\u88c5\u3067\u3042\u308b`ImageSearch`\u306f`Networking`\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u901a\u3057\u3066\u5916\u90e8\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u304cJSON\u30c7\u30fc\u30bf\u3092\u6301\u3064\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u751f\u3055\u305b\u3001\u305d\u306e\u30a4\u30d9\u30f3\u30c8\u304cViewModel\u3078\u3068\u4f1d\u64ad\u3057\u3066\u3044\u304f\u6642\u306b`ImageSearch`\u306b\u3088\u3063\u3066\u30c7\u30fc\u30bf\u304c`ResponseEntity`\u3084`ImageEntity`\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\n\n![Model Designg](https://qiita-image-store.s3.amazonaws.com/0/86677/30ba4f89-d90e-4ead-daaf-59f3508100a7.png)\n\n## \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n\n\u3053\u306e\u7bc0\u3067\u306f\u3001Pixabay\u304b\u3089\u8fd4\u3055\u308c\u308b\u753b\u50cf\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8868\u3059\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u304d\u307e\u3059\u3002`ExampleModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`ImageEntity.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002Project Navigator\u4e0a\u306e`ExampleModel`\u30b0\u30eb\u30fc\u30d7 (\u30d5\u30a9\u30eb\u30c0\u30a2\u30a4\u30b3\u30f3) \u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3066`New File...`\u3092\u9078\u629e\u3057\u3001`Swift File`\u3092\u9078\u629e\u3059\u308c\u3070\u3001`ExampleModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002Xcode\u304c\u3069\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u304b\u805e\u3044\u3066\u304d\u305f\u6642\u306b\u306f`ExampleModel`\u306e\u307f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n**ImageEntity.swift**\n\n    import Himotoki\n\n    public struct ImageEntity {\n        public let id: UInt64\n\n        public let pageURL: String\n        public let pageImageWidth: Int\n        public let pageImageHeight: Int\n\n        public let previewURL: String\n        public let previewWidth: Int\n        public let previewHeight: Int\n\n        public let imageURL: String\n        public let imageWidth: Int\n        public let imageHeight: Int\n\n        public let viewCount: Int64\n        public let downloadCount: Int64\n        public let likeCount: Int64\n        public let tags: [String]\n        public let username: String\n    }\n\n    // MARK: Decodable\n    extension ImageEntity: Decodable {\n        public static func decode(e: Extractor) throws -> ImageEntity {\n            let splitCSV: String -> [String] = { csv in\n                csv.characters\n                    .split { $0 == \",\" }\n                    .map {\n                        String($0).stringByTrimmingCharactersInSet(\n                            NSCharacterSet.whitespaceCharacterSet())\n                    }\n            }\n\n            return try ImageEntity(\n                id: e <| \"id\",\n\n                pageURL: e <| \"pageURL\",\n                pageImageWidth: e <| \"imageWidth\",\n                pageImageHeight: e <| \"imageHeight\",\n\n                previewURL: e <| \"previewURL\",\n                previewWidth: e <| \"previewWidth\",\n                previewHeight: e <| \"previewHeight\",\n\n                imageURL: e <| \"webformatURL\",\n                imageWidth: e <| \"webformatWidth\",\n                imageHeight: e <| \"webformatHeight\",\n\n                viewCount: e <| \"views\",\n                downloadCount: e <| \"downloads\",\n                likeCount: e <| \"likes\",\n                tags: (try? e <| \"tags\").map(splitCSV) ?? [],\n                username: e <| \"user\"\n            )\n        }\n    }\n\n`ImageEntity`\u304c\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064`struct`\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3067\u3042\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u5b89\u5168\u6027\u3092\u78ba\u4fdd\u3067\u304d\u307e\u3059[^3]\u3002`ExampleViewModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u578b\u306f`public`\u3067\u5b9a\u7fa9\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n`ImageEntity`\u306b\u306f\u3001Swift\u306e\u547d\u540d\u6163\u7fd2\u3068\u30a2\u30d7\u30ea\u306e\u69cb\u6210\u306b\u5408\u308f\u305b\u3001JSON\u306e\u8981\u7d20\u3068\u7570\u306a\u308b\u540d\u524d\u306b\u3057\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3082\u3042\u308a\u307e\u3059\u3002`id`\u3001`viewCount`\u3001`downloadCount`\u3001`likeCount`\u306f\u300132-bit\u30b7\u30b9\u30c6\u30e0\u3067\u3082\u5927\u304d\u306a\u5024\u3092\u6271\u3048\u308b\u3088\u3046\u3001`UInt64`\u3084`Int64`\u3067\u5b9a\u7fa9\u3057\u3066\u3042\u308a\u307e\u3059\u3002JSON\u306e\u8981\u7d20`tags`\u306f[CSV](https://en.wikipedia.org/wiki/Comma-separated_values)\u5f62\u5f0f\u306e\u6587\u5b57\u5217\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001`ImageEntity `\u3067\u306f`(try? e <| \"tags\").map(splitCSV)`\u306b\u3088\u308a\u5206\u5272\u3057\u305f\u6587\u5b57\u5217\u306e\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002`?? []`\u3092`map`\u306e\u8fd4\u308a\u5024\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001JSON\u30c7\u30fc\u30bf\u306b`tags`\u304c\u306a\u304f\u3066`nil`\u304c\u8fd4\u3063\u3066\u304d\u305f\u5834\u5408\u306f\u4ee3\u308f\u308a\u306b\u7a7a\u914d\u5217\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\n`ExampleModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`ResponseEntity.swift `\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u3053\u3067\u306f\u3001\u914d\u5217\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b`<||`\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002JSON\u306e`total`\u8981\u7d20\u306f\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u5f8c\u3067\u5fc5\u8981\u306b\u306a\u3063\u305f\u3089\u8ffd\u52a0\u3059\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n**ResponseEntity.swift**\n\n    import Himotoki\n\n    public struct ResponseEntity {\n        public let totalCount: Int64\n        public let images: [ImageEntity]\n    }\n\n    // MARK: Decodable\n    extension ResponseEntity: Decodable {\n        public static func decode(e: Extractor) throws -> ResponseEntity {\n            return try ResponseEntity(\n                totalCount: e <| \"totalHits\",\n                images: e <|| \"hits\"\n            )\n        }\n    }\n\n`ImageEntity`\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u3001`ExampleModelTests`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`Dummy.swift`\u3068`ImageEntitySpec.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**Dummy.swift**\n\n    let imageJSON: [String: AnyObject] = [\n        \"id\": 12345,\n        \"pageURL\": \"https://somewhere.com/page/\",\n        \"imageWidth\": 2000,\n        \"imageHeight\": 1000,\n        \"previewURL\": \"https://somewhere.com/preview.jpg\",\n        \"previewWidth\": 200,\n        \"previewHeight\": 100,\n        \"webformatURL\": \"https://somewhere.com/image.jpg\",\n        \"webformatWidth\": 600,\n        \"webformatHeight\": 300,\n        \"views\": 54321,\n        \"downloads\": 4321,\n        \"likes\": 321,\n        \"tags\": \"a, b c, d \",\n        \"user\": \"Swinject\"\n    ]\n\n**ImageEntitySpec.swift**\n\n    import Quick\n    import Nimble\n    import Himotoki\n    @testable import ExampleModel\n\n    class ImageEntitySpec: QuickSpec {\n        override func spec() {\n            it(\"parses JSON data to create a new instance.\") {\n                let image: ImageEntity? = try? decode(imageJSON)\n\n                expect(image).notTo(beNil())\n                expect(image?.id) == 12345\n                expect(image?.pageURL) == \"https://somewhere.com/page/\"\n                expect(image?.pageImageWidth) == 2000\n                expect(image?.pageImageHeight) == 1000\n                expect(image?.previewURL) == \"https://somewhere.com/preview.jpg\"\n                expect(image?.previewWidth) == 200\n                expect(image?.previewHeight) == 100\n                expect(image?.imageURL) == \"https://somewhere.com/image.jpg\"\n                expect(image?.imageWidth) == 600\n                expect(image?.imageHeight) == 300\n                expect(image?.viewCount) == 54321\n                expect(image?.downloadCount) == 4321\n                expect(image?.likeCount) == 321\n                expect(image?.tags) == [\"a\", \"b c\", \"d\"]\n                expect(image?.username) == \"Swinject\"\n            }\n            it(\"gets an empty array if tags element is nil.\") {\n                var missingJSON = imageJSON\n                missingJSON[\"tags\"] = nil\n                let image: ImageEntity? = try? decode(missingJSON)\n\n                expect(image).notTo(beNil())\n                expect(image?.tags.isEmpty).to(beTrue())\n            }\n            it(\"throws an error if any of JSON elements except tags is missing.\") {\n                for key in imageJSON.keys where key != \"tags\" {\n                    var missingJSON = imageJSON\n                    missingJSON[key] = nil\n                    let image: ImageEntity? = try? decode(missingJSON)\n\n                    expect(image).to(beNil())\n                }\n            }\n            it(\"ignores an extra JOSN element.\") {\n                var extraJSON = imageJSON\n                extraJSON[\"extraKey\"] = \"extra element\"\n                let image: ImageEntity? = try? decode(extraJSON)\n\n                expect(image).notTo(beNil())\n            }\n        }\n    }\n\n`Dummy.swift`\u306e\u4e2d\u3067\u306f\u3001\u30c0\u30df\u30fc\u306eJSON\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092`imageJSON`\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002Alamofire\u3084NSJSONSerialization\u304b\u3089\u8fd4\u3063\u3066\u304f\u308b\u3088\u3046\u306a`[String: AnyObject]`\u578b\u306eJSON\u30c7\u30fc\u30bf\u3092Himotoki\u306f\u6271\u3046\u305f\u3081\u3001`imageJSON`\u306f`String`\u3067\u306f\u306a\u304f`[String: AnyObject]`\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n`it(\"parses JSON data to create a new instance.\")`\u3067\u306f\u3001`ImageEntity`\u306e\u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304cJSON\u304b\u3089\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n`it(\"gets an empty array if tags element is nil.\")`\u3067\u306f\u3001JSON\u30c7\u30fc\u30bf\u306b`tags`\u8981\u7d20\u304c\u542b\u307e\u308c\u306a\u3044\u5834\u5408\u306b\u3001`tags`\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u7a7a\u914d\u5217\u304c\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n`it(\"throws an error if any of JSON elements except tags is missing.\")`\u3067\u306f\u3001`tags`\u4ee5\u5916\u306eJSON\u8981\u7d20\u304c\u6b20\u3051\u3066\u3044\u308b\u5834\u5408\u306b`decode`\u95a2\u6570\u304c\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u4e0d\u6b63\u306a\u3001\u3042\u308b\u3044\u306f\u58ca\u308c\u305fJSON\u30c7\u30fc\u30bf\u306f`try?`\u3067`nil`\u304c\u8fd4\u3063\u3066\u304f\u308b\u304b\u898b\u308b\u3053\u3068\u306b\u3088\u308a\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n`it(\"ignores an extra JOSN element.\")`\u3067\u306f\u3001JSON\u30c7\u30fc\u30bf\u306b\u4f59\u5206\u306a\u8981\u7d20\u304c\u3042\u3063\u3066\u3082`decode`\u95a2\u6570\u306f`ImageEntity`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u4f59\u5206\u306a\u8981\u7d20\u3092\u7121\u8996\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5c06\u6765\u306ePixabay API\u306e\u5909\u66f4\u306b\u5bfe\u3057\u3066JSON\u30c7\u30fc\u30bf\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u5b89\u5168\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u6b21\u306b\u3001`ExampleModelTests`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`ResponseEntitySpec.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c6\u30b9\u30c8\u306e\u5185\u5bb9\u306f\u898b\u305f\u3068\u304a\u308a\u7c21\u5358\u3067\u3059\u3002\n\n**ResponseEntitySpec.swift**\n\n    import Quick\n    import Nimble\n    import Himotoki\n    @testable import ExampleModel\n\n    class ResponseEntitySpec: QuickSpec {\n        override func spec() {\n            let json: [String: AnyObject] = [\n                \"totalHits\": 123,\n                \"hits\": [imageJSON, imageJSON]\n            ]\n\n            it(\"parses JSON data to create a new instance.\") {\n                let response: ResponseEntity? = try? decode(json)\n\n                expect(response).notTo(beNil())\n                expect(response?.totalCount) == 123\n                expect(response?.images.count) == 2\n            }\n        }\n    }\n\n`Command-U`\u3092\u5165\u529b\u3057\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\u30d1\u30b9\u3057\u307e\u3057\u305f\u306d\u3002\u3053\u3053\u3067\u306f\u554f\u984c\u306a\u304f\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3057\u305f\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u958b\u767a\u3067\u306f\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3059\u308b\u307e\u3067\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3084\u30c6\u30b9\u30c8\u306e\u4fee\u6b63\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b5\u30fc\u30d3\u30b9\n\n[\u30b7\u30f3\u30d7\u30eb\u306a\u5929\u6c17\u30a2\u30d7\u30ea\u306e\u4f8b](http://qiita.com/yoichitgy/items/75b09e6ff06199d7cf80)\u306e\u6642\u3068\u540c\u69d8\u306b\u3001`Networking`\u306b\u9069\u5408\u3059\u308b`Network`\u578b\u306bAlamofire\u3092\u30ab\u30d7\u30bb\u30eb\u5316\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u3001ReactiveCocoa\u3092\u4f7f\u3063\u3066\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002`ExampleModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`Networking.swift`\u3068`Network.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**Networking.swift**\n\n    import ReactiveCocoa\n\n    public protocol Networking {\n        func requestJSON(url: String, parameters: [String : AnyObject]?)\n            -> SignalProducer<AnyObject, NetworkError>\n    }\n\n**Network.swift**\n\n    import ReactiveCocoa\n    import Alamofire\n\n    public final class Network: Networking {\n        private let queue = dispatch_queue_create(\n            \"SwinjectMMVMExample.ExampleModel.Network.Queue\",\n            DISPATCH_QUEUE_SERIAL)\n\n        public init() { }\n\n        public func requestJSON(url: String, parameters: [String : AnyObject]?)\n            -> SignalProducer<AnyObject, NetworkError>\n        {\n            return SignalProducer { observer, disposable in\n                let serializer = Alamofire.Request.JSONResponseSerializer()\n                Alamofire.request(.GET, url, parameters: parameters)\n                    .response(queue: self.queue, responseSerializer: serializer) {\n                        response in\n                        switch response.result {\n                        case .Success(let value):\n                            observer.sendNext(value)\n                            observer.sendCompleted()\n                        case .Failure(let error):\n                            observer.sendFailed(NetworkError(error: error))\n                        }\n                    }\n            }\n        }\n    }\n\n[\u5929\u6c17\u30a2\u30d7\u30ea\u306e\u4f8b](http://qiita.com/yoichitgy/items/75b09e6ff06199d7cf80)\u3067\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b5\u30fc\u30d3\u30b9\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u7528\u3044\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u6e21\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u3001`requestJSON`\u30e1\u30bd\u30c3\u30c9\u304c`SignalProducer<AnyObject, NetworkError>`\u3092\u8fd4\u3057\u3001\u305d\u308c\u306b\u3088\u308a\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u4f1d\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002Alamofire (\u3042\u308b\u3044\u306fNSJSONSerialization) \u304cJSON\u30c7\u30fc\u30bf\u3092`AnyObject`\u578b (\u5b9f\u4f53\u306f\u914d\u5217\u307e\u305f\u306f\u8f9e\u66f8) \u3068\u3057\u3066\u8fd4\u3059\u305f\u3081\u3001`SignalProducer`\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u3068\u3057\u3066`AnyObject`\u3092\u3068\u3063\u3066\u3044\u307e\u3059\u3002\n\n`requestJSON`\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30c8\u30ec\u30a4\u30ea\u30f3\u30b0\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3063\u3066`SignalProducer`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4e2d\u3067\u306f\u3001`sendNext`\u3001`sendCompleted`\u3001`sendFailed`\u3092\u547c\u3073\u51fa\u3057\u3066\u3001Alamofire\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30a4\u30d9\u30f3\u30c8\u304b\u3089ReactiveCocoa\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002`SignalProducer`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e`start`\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u306f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u6e21\u3055\u308c\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u5b9f\u969b\u306b\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fAlamofire\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9 (\u30e1\u30a4\u30f3\u30ad\u30e5\u30fc) \u3067\u8fd4\u3059\u305f\u3081\u3001\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ad\u30e5\u30fc\u3092Alamofire\u306b\u6e21\u3057\u3066\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n`sendFailed`\u30e1\u30bd\u30c3\u30c9\u306f`NetworkError`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5f15\u6570\u306b\u3068\u308a\u307e\u3059\u3002`ExampleModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`NetworkError.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002Alamofire\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308b`NSError`\u3092\u30a2\u30d7\u30ea\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u578b\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059[^4]\u3002\n\n**NetworkError.swift**\n\n    import Foundation\n\n    public enum NetworkError: ErrorType {\n        /// Unknown or not supported error.\n        case Unknown\n\n        /// Not connected to the internet.\n        case NotConnectedToInternet\n\n        /// International data roaming turned off.\n        case InternationalRoamingOff\n\n        /// Cannot reach the server.\n        case NotReachedServer\n\n        /// Connection is lost.\n        case ConnectionLost\n\n        /// Incorrect data returned from the server.\n        case IncorrectDataReturned\n\n        internal init(error: NSError) {\n            if error.domain == NSURLErrorDomain {\n                switch error.code {\n                case NSURLErrorUnknown:\n                    self = .Unknown\n                case NSURLErrorCancelled:\n                    self = .Unknown // Cancellation is not used in this project.\n                case NSURLErrorBadURL:\n                    self = .IncorrectDataReturned // Because it is caused by a bad URL returned in a JSON response from the server.\n                case NSURLErrorTimedOut:\n                    self = .NotReachedServer\n                case NSURLErrorUnsupportedURL:\n                    self = .IncorrectDataReturned\n                case NSURLErrorCannotFindHost, NSURLErrorCannotConnectToHost:\n                    self = .NotReachedServer\n                case NSURLErrorDataLengthExceedsMaximum:\n                    self = .IncorrectDataReturned\n                case NSURLErrorNetworkConnectionLost:\n                    self = .ConnectionLost\n                case NSURLErrorDNSLookupFailed:\n                    self = .NotReachedServer\n                case NSURLErrorHTTPTooManyRedirects:\n                    self = .Unknown\n                case NSURLErrorResourceUnavailable:\n                    self = .IncorrectDataReturned\n                case NSURLErrorNotConnectedToInternet:\n                    self = .NotConnectedToInternet\n                case NSURLErrorRedirectToNonExistentLocation, NSURLErrorBadServerResponse:\n                    self = .IncorrectDataReturned\n                case NSURLErrorUserCancelledAuthentication, NSURLErrorUserAuthenticationRequired:\n                    self = .Unknown\n                case NSURLErrorZeroByteResource, NSURLErrorCannotDecodeRawData, NSURLErrorCannotDecodeContentData:\n                    self = .IncorrectDataReturned\n                case NSURLErrorCannotParseResponse:\n                    self = .IncorrectDataReturned\n                case NSURLErrorInternationalRoamingOff:\n                    self = .InternationalRoamingOff\n                case NSURLErrorCallIsActive, NSURLErrorDataNotAllowed, NSURLErrorRequestBodyStreamExhausted:\n                    self = .Unknown\n                case NSURLErrorFileDoesNotExist, NSURLErrorFileIsDirectory:\n                    self = .IncorrectDataReturned\n                case\n                NSURLErrorNoPermissionsToReadFile,\n                NSURLErrorSecureConnectionFailed,\n                NSURLErrorServerCertificateHasBadDate,\n                NSURLErrorServerCertificateUntrusted,\n                NSURLErrorServerCertificateHasUnknownRoot,\n                NSURLErrorServerCertificateNotYetValid,\n                NSURLErrorClientCertificateRejected,\n                NSURLErrorClientCertificateRequired,\n                NSURLErrorCannotLoadFromNetwork,\n                NSURLErrorCannotCreateFile,\n                NSURLErrorCannotOpenFile,\n                NSURLErrorCannotCloseFile,\n                NSURLErrorCannotWriteToFile,\n                NSURLErrorCannotRemoveFile,\n                NSURLErrorCannotMoveFile,\n                NSURLErrorDownloadDecodingFailedMidStream,\n                NSURLErrorDownloadDecodingFailedToComplete:\n                    self = .Unknown\n                default:\n                    self = .Unknown\n                }\n            }\n            else {\n                self = .Unknown\n            }\n        }\n    }\n\n\u305d\u308c\u3067\u306f`Network`\u578b\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002`ExampleModelTests`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`NetworkSpec.swift `\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**NetworkSpec.swift**\n\n    import Quick\n    import Nimble\n    @testable import ExampleModel\n\n    class NetworkSpec: QuickSpec {\n        override func spec() {\n            var network: Network!\n            beforeEach {\n                network = Network()\n            }\n\n            describe(\"JSON\") {\n                it(\"eventually gets JSON data as specified with parameters.\") {\n                    var json: [String: AnyObject]? = nil\n                    let url = \"https://httpbin.org/get\"\n                    network.requestJSON(url, parameters: [\"a\": \"b\", \"x\": \"y\"])\n                        .on(next: { json = $0 as? [String: AnyObject] })\n                        .start()\n\n                    expect(json).toEventuallyNot(beNil(), timeout: 5)\n                    expect((json?[\"args\"] as? [String: AnyObject])?[\"a\"] as? String)\n                        .toEventually(equal(\"b\"), timeout: 5)\n                    expect((json?[\"args\"] as? [String: AnyObject])?[\"x\"] as? String)\n                        .toEventually(equal(\"y\"), timeout: 5)\n                }\n                it(\"eventually gets an error if the network has a problem.\") {\n                    var error: NetworkError? = nil\n                    let url = \"https://not.existing.server.comm/get\"\n                    network.requestJSON(url, parameters: [\"a\": \"b\", \"x\": \"y\"])\n                        .on(failed: { error = $0 })\n                        .start()\n\n                    expect(error)\n                        .toEventually(equal(NetworkError.NotReachedServer), timeout: 5)\n                }\n            }\n        }\n    }\n\n\u3053\u3053\u3067\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306e\u7c21\u5358\u3067\u5b89\u5b9a\u3057\u305f\u30b5\u30fc\u30d0\u3068\u3057\u3066[httpbin.org](https://httpbin.org/)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30b5\u30fc\u30d0\u306f[Alamofire\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8](https://github.com/Alamofire/Alamofire/blob/1978c2c926b0eabedc858d4cde0533e00686ccd6/Tests/ResponseTests.swift)\u3067\u3082\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a66\u3057\u306b\u30d6\u30e9\u30a6\u30b6\u3067 [https://httpbin.org/get?a=b&x=y](https://httpbin.org/get?a=b&x=y) \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u308b\u3068\u3001\u3069\u306e\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3063\u3066\u304f\u308b\u304b\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u6700\u521d\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u6307\u5b9a\u3057\u305f\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u306eJSON\u306b`\"a\"`\u304a\u3088\u3073`\"x\"`\u8981\u7d20\u304c\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u5024\u304c`\"b\"`\u304a\u3088\u3073`\"y\"`\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002`json`\u5909\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u30b5\u30fc\u30d0\u304b\u3089\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u975e\u540c\u671f\u306b\u53d7\u3051\u53d6\u3063\u3066\u3044\u307e\u3059\u3002`requestJSON`\u304b\u3089\u8fd4\u3055\u308c\u308b`SignalProducer`\u306b\u30aa\u30d6\u30b6\u30fc\u30d0 (\u3064\u307e\u308a\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9) \u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u3001`json`\u5909\u6570\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30bb\u30c3\u30c8\u3059\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u5f15\u6570\u3068\u3057\u3066`on`\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001`start`\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a`SignalProducer`\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u958b\u59cb\u3057\u3066\u3044\u307e\u3059\u3002\u30ec\u30b9\u30dd\u30f3\u30b9\u306f`toEventually`\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u975e\u540c\u671f\u3067\u30c1\u30a7\u30c3\u30af\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n2\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30a8\u30e9\u30fc\u306e\u5834\u5408\u306b`NetworkError`\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u64ec\u4f3c\u7684\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u305f\u3081\u3001\u5b58\u5728\u3057\u306a\u3044URL\u3092`requestJSON`\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3001\u6b21\u306e\u7bc0\u306b\u79fb\u308a\u307e\u3057\u3087\u3046\u3002\n\n## \u753b\u50cf\u691c\u7d22\u30b5\u30fc\u30d3\u30b9\n\n\u3053\u306e\u7bc0\u3067\u306f\u3001Pixabay API\u3092\u5229\u7528\u3057\u3066\u753b\u50cf\u3092\u691c\u7d22\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u3053\u304c`ExampleModel`\u306e\u4e2d\u5fc3\u3067\u3059\u3002\n\n\u6700\u521d\u306b\u3001`ExampleModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`Pixabay.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002API\u306eURL\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002`apiKey`\u306b\u306f[Pixabay\u304b\u3089\u53d6\u5f97\u3057\u305f\u3054\u81ea\u8eab\u306eAPI\u30ad\u30fc](https://pixabay.com/api/docs/)\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**Pixabay.swift**\n\n    internal struct Pixabay {\n        internal static let apiURL = \"https://pixabay.com/api/\"\n\n        internal static var requestParameters: [String: AnyObject] {\n            return [\n                \"key\": Config.apiKey,\n                \"image_type\": \"photo\",\n                \"safesearch\": true,\n                \"per_page\": 50,\n            ]\n        }\n    }\n\n    extension Pixabay {\n        private struct Config {\n            private static let apiKey = \"\" // Fill with your own API key.\n        }\n    }\n\n\u6b21\u306b\u3001`ExampleModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`ImageSearching.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002`ResponseEntity`\u306e`SignalProducer`\u3092\u8fd4\u3059`searchImages`\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n**ImageSearching.swift**\n\n    import ReactiveCocoa\n\n    public protocol ImageSearching {\n        func searchImages() -> SignalProducer<ResponseEntity, NetworkError>\n    }\n\n\u6700\u5f8c\u306b\u3001`ExampleModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`ImageSearch.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**ImageSearch.swift**\n\n    import ReactiveCocoa\n    import Result\n    import Himotoki\n\n    public final class ImageSearch: ImageSearching {\n        private let network: Networking\n\n        public init(network: Networking) {\n            self.network = network\n        }\n\n        public func searchImages() -> SignalProducer<ResponseEntity, NetworkError> {\n            let url = Pixabay.apiURL\n            let parameters = Pixabay.requestParameters\n            return network.requestJSON(url, parameters: parameters)\n                .attemptMap { json in\n                    if let response = (try? decode(json)) as ResponseEntity? {\n                        return Result(value: response)\n                    }\n                    else {\n                        return Result(error: .IncorrectDataReturned)\n                    }\n            }\n        }\n    }\n\n`ImageSearch`\u306f`Networking`\u306b\u4f9d\u5b58\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u4f9d\u5b58\u6027\u306f\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3067\u6ce8\u5165\u3055\u308c\u3066\u3044\u307e\u3059 ([Initializer Injection\u30d1\u30bf\u30fc\u30f3](https://github.com/Swinject/Swinject/blob/master/Documentation/InjectionPatterns.md))\u3002\n\n`searchImages`\u30e1\u30bd\u30c3\u30c9\u306f\u3001`network.requestJSON`\u304b\u3089\u8fd4\u3055\u308c\u308b`SignalProducer<AnyObject, NetworkError>`\u3092`SignalProducer<ResponseEntity, NetworkError>`\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002`SignalProducer`\u306e\u5909\u63db\u3067`attemptMap`\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002`attemptMap`\u306b\u6e21\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4e2d\u3067\u306f\u3001`decode`\u3092\u547c\u3093\u3067JSON\u30c7\u30fc\u30bf\u3092`ResponseEntity`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001`ResponseEntity`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092`Result(value: response)`\u3067\u5305\u3093\u3067\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u5931\u6557\u3057\u305f\u5834\u5408[^5]\u3001`Result(error: .IncorrectDataReturned)`\u3068\u3057\u3066\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u3042\u308b\u5024\u3092\u30a8\u30e9\u30fc\u3067\u306a\u304f\u5225\u306e\u5024\u306b\u5909\u63db\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u3001`SignalProducer`\u306e`map`\u30e1\u30bd\u30c3\u30c9\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n`(try? decode(json)) as ResponseEntity?`\u306e\u30ad\u30e3\u30b9\u30c8\u306f\u898b\u6163\u308c\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001`decode`\u95a2\u6570\u304c`ResponseEntity`\u578b\u3092\u6271\u3046\u3088\u3046Swift\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u578b\u63a8\u8ad6\u3092\u88dc\u52a9\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\u3082\u3057\u30ad\u30e3\u30b9\u30c8\u304c`(try? decode(json)) as? ResponseEntity`\u3067\u3042\u308c\u3070\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u305d\u308c\u3067\u306f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002`ExampleModelTests`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`ImageSearchSpec.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**ImageSearchSpec.swift**\n\n    import Quick\n    import Nimble\n    import ReactiveCocoa\n    @testable import ExampleModel\n\n    class ImageSearchSpec: QuickSpec {\n        // MARK: Stub\n        class GoodStubNetwork: Networking {\n            func requestJSON(url: String, parameters: [String : AnyObject]?)\n                -> SignalProducer<AnyObject, NetworkError>\n            {\n                var imageJSON0 = imageJSON\n                imageJSON0[\"id\"] = 0\n                var imageJSON1 = imageJSON\n                imageJSON1[\"id\"] = 1\n                let json: [String: AnyObject] = [\n                    \"totalHits\": 123,\n                    \"hits\": [imageJSON0, imageJSON1]\n                ]\n\n                return SignalProducer { observer, disposable in\n                    observer.sendNext(json)\n                    observer.sendCompleted()\n                }.observeOn(QueueScheduler())\n            }\n        }\n\n        class BadStubNetwork: Networking {\n            func requestJSON(url: String, parameters: [String : AnyObject]?)\n                -> SignalProducer<AnyObject, NetworkError>\n            {\n                let json = [String: AnyObject]()\n\n                return SignalProducer { observer, disposable in\n                    observer.sendNext(json)\n                    observer.sendCompleted()\n                }.observeOn(QueueScheduler())\n            }\n        }\n\n        class ErrorStubNetwork: Networking {\n            func requestJSON(url: String, parameters: [String : AnyObject]?)\n                -> SignalProducer<AnyObject, NetworkError>\n            {\n                return SignalProducer { observer, disposable in\n                    observer.sendFailed(.NotConnectedToInternet)\n                }.observeOn(QueueScheduler())\n            }\n        }\n\n        // MARK: - Spec\n        override func spec() {\n            it(\"returns images if the network works correctly.\") {\n                var response: ResponseEntity? = nil\n                let search = ImageSearch(network: GoodStubNetwork())\n                search.searchImages()\n                    .on(next: { response = $0 })\n                    .start()\n\n                expect(response).toEventuallyNot(beNil())\n                expect(response?.totalCount).toEventually(equal(123))\n                expect(response?.images.count).toEventually(equal(2))\n                expect(response?.images[0].id).toEventually(equal(0))\n                expect(response?.images[1].id).toEventually(equal(1))\n            }\n            it(\"sends an error if the network returns incorrect data.\") {\n                var error: NetworkError? = nil\n                let search = ImageSearch(network: BadStubNetwork())\n                search.searchImages()\n                    .on(failed: { error = $0 })\n                    .start()\n\n                expect(error).toEventually(equal(NetworkError.IncorrectDataReturned))\n            }\n            it(\"passes the error sent by the network.\") {\n                var error: NetworkError? = nil\n                let search = ImageSearch(network: ErrorStubNetwork())\n                search.searchImages()\n                    .on(failed: { error = $0 })\n                    .start()\n\n                expect(error).toEventually(equal(NetworkError.NotConnectedToInternet))\n            }\n        }\n    }\n\n\u5148\u982d\u30673\u3064\u306e\u30b9\u30bf\u30d6\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002`GoodStubNetwork`\u306f\u6b63\u3057\u3044JSON\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b`SignalProducer`\u3092\u8fd4\u3057\u307e\u3059\u3002`BadStubNetwork`\u306f\u3001\u7a7a\u306e\u8f9e\u66f8\u306e\u5f62\u3067\u4e0d\u6b63\u306aJSON\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b`SignalProducer`\u3092\u8fd4\u3057\u307e\u3059\u3002`ErrorStubNetwork`\u306f\u3001JSON\u30c7\u30fc\u30bf\u306e\u4ee3\u308f\u308a\u306b\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3059\u308b`SignalProducer`\u3092\u8fd4\u3057\u307e\u3059\u3002`.observeOn(QueueScheduler())`\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u3059\u3079\u3066\u306e`SignalProducer`\u306b\u304a\u3044\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u51fa\u529b\u3057\u3001\u975e\u540c\u671f\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u6a21\u64ec\u3057\u3066\u3044\u307e\u3059\u3002\n\n`spec()`\u306e\u4e2d\u3067\u306f\u30013\u3064\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8 (\u3042\u308b\u3044\u306f\u30b9\u30da\u30c3\u30af) \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u30021\u3064\u76ee\u306f\u3001`attemptMap`\u304c\u6b63\u3057\u304fJSON\u30c7\u30fc\u30bf\u3092`ResponseEntity`\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u30022\u3064\u76ee\u306f\u3001`attemptMap`\u304cJSON\u30c7\u30fc\u30bf\u3092\u30a8\u30e9\u30fc\u306b\u5909\u63db\u3059\u308b\u30b1\u30fc\u30b9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u30023\u3064\u76ee\u306f\u3001`ErrorStubNetwork`\u304b\u3089\u51fa\u529b\u3055\u308c\u308b\u30a8\u30e9\u30fc\u304c`ImageSearch`\u3092\u901a\u3057\u3066\u6e21\u3063\u3066\u304f\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\n\n`Command-U`\u3092\u5165\u529b\u3057\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\u30d1\u30b9\u3057\u307e\u3057\u305f\u306d\uff01\u3053\u308c\u3067\u3001MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eModel\u306e\u4e2d\u5fc3\u7684\u306a\u90e8\u5206\u3092\u5b9f\u88c5\u3057\u7d42\u3048\u307e\u3057\u305f\u3002\n\n## \u307e\u3068\u3081\n\n\u4f8b\u984c\u30a2\u30d7\u30ea\u306eModel\u90e8\u5206\u3092MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u958b\u767a\u3059\u308b\u3053\u3068\u3092\u901a\u3057\u3066\u3001Model\u3092ViewModel\u304a\u3088\u3073\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u758e\u7d50\u5408\u306b\u3059\u308b\u8a2d\u8a08\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5b9f\u88c5\u306b\u5bfe\u3059\u308b\u76f4\u63a5\u7684\u306a\u4f9d\u5b58\u3092\u6392\u9664\u3067\u304d\u307e\u3057\u305f\u3002\u758e\u7d50\u5408\u306b\u3057\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u9593\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u305f\u3081\u306bRectiveCocoa\u3092\u5229\u7528\u3057\u305f\u307e\u3057\u305f\u3002\u307e\u305f\u3001Himotoki\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306bJSON\u30c7\u30fc\u30bf\u3092\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u307e\u3057\u305f\u3002[\u6b21\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b](http://qiita.com/yoichitgy/items/2857b98807e6c4b3fec1)\u3067\u306f\u3001View\u3068ViewModel\u90e8\u5206\u3092\u8a2d\u8a08\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3082\u3057\u8cea\u554f\u3001\u63d0\u6848\u3001\u554f\u984c\u306a\u3069\u304c\u3042\u308c\u3070\u6c17\u8efd\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u3069\u3046\u305e\u3002\n\n[^1]: [\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](https://en.wikipedia.org/wiki/Functional_programming)\u306b\u6163\u308c\u3066\u3044\u305f\u3089\u3001[Argo](https://github.com/thoughtbot/Argo)\u3082\u4fbf\u5229\u306aJSON\u30d1\u30fc\u30b5\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n[^2]: [DDD (\u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u8a2d\u8a08)](https://en.wikipedia.org/wiki/Domain-driven_design)\u3067\u306f\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306f\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u306e\u6982\u5ff5\u3067\u3042\u308a\u3001\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u3088\u308a\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u306f\u95a2\u4fc2\u306a\u304f\u3001\u5358\u306b\u6982\u5ff5\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u3059\u8a00\u8449\u3068\u3057\u3066\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u7528\u3044\u307e\u3059\u3002\n[^3]: \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3042\u308b\u3044\u306f\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3067\u3042\u308b\u3053\u3068\u306e\u3088\u308a\u8a73\u3057\u3044\u8aac\u660e\u306f[\u3053\u306e\u30da\u30fc\u30b8](http://programmers.stackexchange.com/questions/151733/if-immutable-objects-are-good-why-do-people-keep-creating-mutable-objects)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[^4]: `ErrorType`\u306b\u3064\u3044\u3066\u3088\u308a\u6df1\u304f\u5b66\u3076\u305f\u3081\u306b\u3001\"[How to Implement the ErrorType Protocol](https://realm.io/news/testing-swift-error-type/)\"\u3092\u8aad\u3080\u3053\u3068\u3092\u304a\u85a6\u3081\u3057\u307e\u3059\u3002\n[^5]: `try?`\u306f\u5358\u306b\u30d6\u30ed\u30b0\u8a18\u4e8b\u3092\u7c21\u7565\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002`do-try-catch`\u306e\u307b\u3046\u304c\u30a8\u30e9\u30fc\u60c5\u5831\u306b\u57fa\u3065\u3044\u305f\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\n[^\u8a33\u6ce81]: \u8a33\u6ce8: \u82f1\u8a9e\u7248\u306e\u8457\u8005\u672c\u4eba\u306b\u3088\u308b\u7ffb\u8a33\u306e\u305f\u3081\u3001\u7ffb\u8a33\u306b\u95a2\u308f\u308b\u8457\u4f5c\u6a29\u4e0a\u306e\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n", "tags": ["Swift", "MVVM", "DependencyInjection", "ReactiveCocoa", "Swinject"]}