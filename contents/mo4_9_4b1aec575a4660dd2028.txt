{"context": "\u30c7\u30e2\uff1ahttps://mo49.github.io/qiita/20161005/globe.html\n\nIcosahedronGeometry\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u3001\u305d\u306e\u9802\u70b9\u6570\u5206for\u6587\u3092\u307e\u308f\u3057\u5404\u9802\u70b9\u306e\u8272\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\nIcosahedronGeometry\u306e\u751f\u6210\nconst icosaGeom = new THREE.IcosahedronGeometry(8, 1); // radius, detail (+1\u30674\u500d)\nconst vertices = icosaGeom.vertices; // vec3\nconst positions = new Float32Array(vertices.length * 3);\nconst colors_base = [];\nfor (var i = 0; i < vertices.length; i++) {\n  vertices[i].toArray(positions, i * 3);\n  let color;\n  switch (i % 4) {\n    case 0: color = { h: 0.6, s: 0.72, v: 0.95 }; break;\n    case 1: color = { h: 0.37, s: 0.69, v: 0.65 }; break;\n    case 2: color = { h: 0.12, s: 0.98, v: 0.98 }; break;\n    case 3: color = { h: 0.0, s: 0.80, v: 1.0 }; break;\n    default: color = { h: 0.0, s: 0.80, v: 1.0 }\n  }\n  colors_base.push(color.h, color.s, color.v);\n}\n\n\nBufferGeometry\u306b\u4f4d\u7f6e\u3068\u8272\u60c5\u5831\u3092\u30bb\u30c3\u30c8\u3059\u308b\n\nBufferGeometry\u306e\u751f\u6210\nconst geometry = new THREE.BufferGeometry();\ngeometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\nconst colors = new Float32Array(colors_base);\ngeometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n\n\u5404\u9802\u70b9\u3054\u3068\u306b\u63cf\u304f\u5186\u3092canvas\u3067\u751f\u6210\u3057\u3001canvas\u3092\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u6e21\u3059\n\ncreateTexture()\ncreateTexture() {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const CANVAS_SIZE = 128;\n\n  canvas.width = canvas.height = CANVAS_SIZE;\n  ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\n  ctx.arc(CANVAS_SIZE/2, CANVAS_SIZE/2, CANVAS_SIZE/2, 0, Math.PI / 180, true);\n  ctx.fill();\n\n  const texture = new THREE.Texture(canvas);\n  texture.minFilter = THREE.NearestFilter;\n  texture.needsUpdate = true;\n  return texture;\n};\n\n\n\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3059\n\nShaderMaterial\u306e\u751f\u6210\nconst shaderMat = new THREE.ShaderMaterial({\n  uniforms: {\n    size: {\n      type: 'f',\n      value: 12.0\n    },\n    texture: {\n      type: 't',\n      value: this.createTexture()\n    }\n  },\n  vertexShader: document.getElementById('vs').textContent,\n  fragmentShader: document.getElementById('fs').textContent,\n  transparent: true,\n  depthWrite: false\n});\n\n\n\u30b7\u30a7\u30fc\u30c0\u3067\u306f\u8272\u3068\u30b5\u30a4\u30ba\u3092\u5236\u5fa1\u3059\u308b\n\n\u30b7\u30a7\u30fc\u30c0\u306e\u8a2d\u5b9a\n<script id=\"vs\" type=\"x-shader/x-vertex\">\n  attribute vec3 color;\n  uniform float size;\n  varying vec3 vColor;\n\n  void main() {\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    vColor = color;\n\n    gl_PointSize = size;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n</script>\n<script id=\"fs\" type=\"x-shader/x-fragment\">\n  uniform sampler2D texture;\n\n  varying vec3 vColor;\n\n  vec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  }\n\n  void main() {\n    vec3 custom_color = hsv2rgb(vColor);\n    gl_FragColor = vec4(custom_color, 1.0) * texture2D(texture, gl_PointCoord);\n  }\n</script>\n\n\n\n\u53c2\u8003\nAdd Dots to Vertices in Three.js\nthree.js\u88fd\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u5b9f\u88c5\n\n\n\n\u30c7\u30e2\uff1ahttps://mo49.github.io/qiita/20161005/globe.html\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-05 20.36.07.png](https://qiita-image-store.s3.amazonaws.com/0/136286/cfb3688b-e8ff-08f5-8546-fe6ecd1ea1f8.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-05 20.36.07.png\")\n\n\nIcosahedronGeometry\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u3001\u305d\u306e\u9802\u70b9\u6570\u5206for\u6587\u3092\u307e\u308f\u3057\u5404\u9802\u70b9\u306e\u8272\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n```javascript:IcosahedronGeometry\u306e\u751f\u6210\nconst icosaGeom = new THREE.IcosahedronGeometry(8, 1); // radius, detail (+1\u30674\u500d)\nconst vertices = icosaGeom.vertices; // vec3\nconst positions = new Float32Array(vertices.length * 3);\nconst colors_base = [];\nfor (var i = 0; i < vertices.length; i++) {\n  vertices[i].toArray(positions, i * 3);\n  let color;\n  switch (i % 4) {\n    case 0: color = { h: 0.6, s: 0.72, v: 0.95 }; break;\n    case 1: color = { h: 0.37, s: 0.69, v: 0.65 }; break;\n    case 2: color = { h: 0.12, s: 0.98, v: 0.98 }; break;\n    case 3: color = { h: 0.0, s: 0.80, v: 1.0 }; break;\n    default: color = { h: 0.0, s: 0.80, v: 1.0 }\n  }\n  colors_base.push(color.h, color.s, color.v);\n}\n```\n\nBufferGeometry\u306b\u4f4d\u7f6e\u3068\u8272\u60c5\u5831\u3092\u30bb\u30c3\u30c8\u3059\u308b\n\n```javascript:BufferGeometry\u306e\u751f\u6210\nconst geometry = new THREE.BufferGeometry();\ngeometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\nconst colors = new Float32Array(colors_base);\ngeometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n```\n\n\u5404\u9802\u70b9\u3054\u3068\u306b\u63cf\u304f\u5186\u3092canvas\u3067\u751f\u6210\u3057\u3001canvas\u3092\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u6e21\u3059\n\n```javascript:createTexture()\ncreateTexture() {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const CANVAS_SIZE = 128;\n\n  canvas.width = canvas.height = CANVAS_SIZE;\n  ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\n  ctx.arc(CANVAS_SIZE/2, CANVAS_SIZE/2, CANVAS_SIZE/2, 0, Math.PI / 180, true);\n  ctx.fill();\n\n  const texture = new THREE.Texture(canvas);\n  texture.minFilter = THREE.NearestFilter;\n  texture.needsUpdate = true;\n  return texture;\n};\n```\n\n\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3059\n\n```javascript:ShaderMaterial\u306e\u751f\u6210\nconst shaderMat = new THREE.ShaderMaterial({\n  uniforms: {\n    size: {\n      type: 'f',\n      value: 12.0\n    },\n    texture: {\n      type: 't',\n      value: this.createTexture()\n    }\n  },\n  vertexShader: document.getElementById('vs').textContent,\n  fragmentShader: document.getElementById('fs').textContent,\n  transparent: true,\n  depthWrite: false\n});\n```\n\n\u30b7\u30a7\u30fc\u30c0\u3067\u306f\u8272\u3068\u30b5\u30a4\u30ba\u3092\u5236\u5fa1\u3059\u308b\n\n```html:\u30b7\u30a7\u30fc\u30c0\u306e\u8a2d\u5b9a\n<script id=\"vs\" type=\"x-shader/x-vertex\">\n  attribute vec3 color;\n  uniform float size;\n  varying vec3 vColor;\n\n  void main() {\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    vColor = color;\n\n    gl_PointSize = size;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n</script>\n<script id=\"fs\" type=\"x-shader/x-fragment\">\n  uniform sampler2D texture;\n\n  varying vec3 vColor;\n\n  vec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  }\n\n  void main() {\n    vec3 custom_color = hsv2rgb(vColor);\n    gl_FragColor = vec4(custom_color, 1.0) * texture2D(texture, gl_PointCoord);\n  }\n</script>\n```\n\n\n\n> \u53c2\u8003\n[Add Dots to Vertices in Three.js](http://stackoverflow.com/questions/37950024/add-dots-to-vertices-in-three-js)\n[three.js\u88fd\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u5b9f\u88c5](http://blog.tsumikiinc.com/article/20160225_threejs-points.html)\n\n", "tags": ["canvas", "three.js", "es6", "JavaScript", "WebGL"]}