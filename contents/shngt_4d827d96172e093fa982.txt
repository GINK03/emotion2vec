{"context": "\n\n\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u30d9\u30fc\u30b9\u306e\u901a\u77e5\u3092\u4f7f\u3046\n\n\u4f4d\u7f6e\u60c5\u5831\u30b5\u30fc\u30d3\u30b9\u6e96\u5099\nInfo.plist\u306eRequired device capbilities\u306blocation-services\u3068gps\u3092\u8ffd\u52a0\nInfo.plist\u306e\u3000Information Property List\u306bNSLocationAlwaysUsageDescription\u3092\u8ffd\u52a0\u3057\u3066\u3001\u8a31\u53ef\u53d6\u5f97\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u8a2d\u5b9a\n\nViewController.swift\nimport UIKit\nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n\n    var myLocationManager: CLLocationManager!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        checkLocationAuthorization(startLocationService)\n    }\n\n    func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n        if status != CLAuthorizationStatus.AuthorizedAlways {\n            return\n        }\n\n        if !CLLocationManager.locationServicesEnabled() {\n            return\n        }\n\n        startLocationService(manager)\n    }\n\n    func checkLocationAuthorization(callback: (CLLocationManager) -> Void) {\n        let status = CLLocationManager.authorizationStatus()\n        if status == CLAuthorizationStatus.Restricted || status == CLAuthorizationStatus.Denied {\n            return\n        }\n\n        myLocationManager = CLLocationManager()\n        myLocationManager.delegate = self\n\n        if status == CLAuthorizationStatus.NotDetermined {\n            myLocationManager.requestAlwaysAuthorization()\n        } else if !CLLocationManager.locationServicesEnabled() {\n            return\n        } else {\n            callback(myLocationManager)\n        }\n    }\n\n    func startLocationService(manager: CLLocationManager) {\n        manager.desiredAccuracy = kCLLocationAccuracyBest\n        manager.distanceFilter = kCLDistanceFilterNone\n    }\n\n\n\n\u901a\u77e5\u30bf\u30a4\u30d7\u767b\u9332\n\nViewController.swift\n    var myLocationManager: CLLocationManager!\n    let notificationManager: NotificationManager = NotificationManager.init()\n\n// \u4e2d\u7565\n\n        startLocationService(manager)\n        registerLocationBasedLocalNotification(latitude: 35.7, longitude: 139.6, radius: 100)\n    }\n\n// \u4e2d\u7565\n\n        callback(myLocationManager)\n        registerLocationBasedLocalNotification(latitude: 35.7, longitude: 139.6, radius: 100)\n    }\n\n// \u4e2d\u7565\n\n        manager.distanceFilter = kCLDistanceFilterNone\n    }\n\n    func registerLocationBasedLocalNotification(latitude latitude: CLLocationDegrees, longitude: CLLocationDegrees, radius: CLLocationDistance) {\n        let center = CLLocationCoordinate2DMake(latitude, longitude)\n        let region = CLCircularRegion.init(center: center, radius: radius, identifier: \"YourLocationIdentifier\")\n        region.notifyOnExit = false\n        notificationManager.setLocationBasedLocalNotification(region: region, alertAction: \"Alert Action\", alertBody: \"\u5230\u7740\", soundName: UILocalNotificationDefaultSoundName)\n    }\n\n\n\nNotificationManager\nimport UIKit\nimport CoreLocation\n\npublic class NotificationManager: NSObject {\n\n    override\n    init() {\n        let settings = UIUserNotificationSettings(forTypes: [.Alert, .Badge, .Sound], categories: nil)\n\n        UIApplication.sharedApplication().registerUserNotificationSettings(settings)\n    }\n\n    func setLocationBasedLocalNotification(\n        region region: CLCircularRegion,\n               regionTriggersOnce: Bool = true,\n               alertAction: String? = nil,\n               alertBody: String? = nil,\n               alertTitle: String? = nil,\n               hasAction: Bool = true,\n               applicationIconBadgeNumber: Int = 0,\n               soundName: String? = nil,\n               userInfo: NSDictionary? = nil)\n    {\n        let localNotification = UILocalNotification.init()\n        localNotification.region = region\n        localNotification.regionTriggersOnce = regionTriggersOnce\n        localNotification.alertAction = alertAction\n        localNotification.alertBody = alertBody\n        localNotification.alertTitle = alertTitle\n        localNotification.hasAction = hasAction\n        localNotification.applicationIconBadgeNumber = applicationIconBadgeNumber\n        localNotification.soundName = soundName\n        if let info = localNotification.userInfo {\n            localNotification.userInfo = info as [NSObject : AnyObject]\n        }\n\n        UIApplication.sharedApplication().presentLocalNotificationNow(localNotification)\n    }\n}\n\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4e2d\u65ad\u72b6\u614b\u306e\u5834\u5408\u306e\u51e6\u7406\n\nAppDelegate.swift\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n\n        if let options = launchOptions {\n            let notification = options[UIApplicationLaunchOptionsLocalNotificationKey] as! UILocalNotification\n            if let region = notification.region {\n                print(\"Received Notification\")\n            }\n        }\n\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u72b6\u614b\u306e\u5834\u5408\u306e\u51e6\u7406\n\nAppDelegate.swift\n                print(\"Received Notification\")\n            }\n        }\n        return true\n    }\n\n    func application(application: UIApplication, didReceiveLocalNotification notification: UILocalNotification) {\n        if let region = notification.region {\n            print(\"Received Notification\")\n        }\n    }\n\n\n\n\u53c2\u8003\u60c5\u5831\nLocal \u304a\u3088\u3072\u3099 Push Notification \u30d5\u309a\u30ed\u30af\u3099\u30e9\u30df\u30f3\u30af\u3099\u30ab\u3099\u30a4\u30c8\u3099\n# \u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u30d9\u30fc\u30b9\u306e\u901a\u77e5\u3092\u4f7f\u3046\n\n## \u4f4d\u7f6e\u60c5\u5831\u30b5\u30fc\u30d3\u30b9\u6e96\u5099\n\nInfo.plist\u306eRequired device capbilities\u306blocation-services\u3068gps\u3092\u8ffd\u52a0\nInfo.plist\u306e\u3000Information Property List\u306bNSLocationAlwaysUsageDescription\u3092\u8ffd\u52a0\u3057\u3066\u3001\u8a31\u53ef\u53d6\u5f97\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u8a2d\u5b9a\n\n```swift:ViewController.swift\nimport UIKit\nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n\n    var myLocationManager: CLLocationManager!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        checkLocationAuthorization(startLocationService)\n    }\n\n    func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n        if status != CLAuthorizationStatus.AuthorizedAlways {\n            return\n        }\n        \n        if !CLLocationManager.locationServicesEnabled() {\n            return\n        }\n        \n        startLocationService(manager)\n    }\n    \n    func checkLocationAuthorization(callback: (CLLocationManager) -> Void) {\n        let status = CLLocationManager.authorizationStatus()\n        if status == CLAuthorizationStatus.Restricted || status == CLAuthorizationStatus.Denied {\n            return\n        }\n        \n        myLocationManager = CLLocationManager()\n        myLocationManager.delegate = self\n        \n        if status == CLAuthorizationStatus.NotDetermined {\n            myLocationManager.requestAlwaysAuthorization()\n        } else if !CLLocationManager.locationServicesEnabled() {\n            return\n        } else {\n            callback(myLocationManager)\n        }\n    }\n    \n    func startLocationService(manager: CLLocationManager) {\n        manager.desiredAccuracy = kCLLocationAccuracyBest\n        manager.distanceFilter = kCLDistanceFilterNone\n    }\n```\n\n## \u901a\u77e5\u30bf\u30a4\u30d7\u767b\u9332\n\n```swift:ViewController.swift\n    var myLocationManager: CLLocationManager!\n    let notificationManager: NotificationManager = NotificationManager.init()\n    \n// \u4e2d\u7565\n\n        startLocationService(manager)\n        registerLocationBasedLocalNotification(latitude: 35.7, longitude: 139.6, radius: 100)\n    }\n    \n// \u4e2d\u7565\n\n        callback(myLocationManager)\n        registerLocationBasedLocalNotification(latitude: 35.7, longitude: 139.6, radius: 100)\n    }\n    \n// \u4e2d\u7565\n\n        manager.distanceFilter = kCLDistanceFilterNone\n    }\n    \n    func registerLocationBasedLocalNotification(latitude latitude: CLLocationDegrees, longitude: CLLocationDegrees, radius: CLLocationDistance) {\n        let center = CLLocationCoordinate2DMake(latitude, longitude)\n        let region = CLCircularRegion.init(center: center, radius: radius, identifier: \"YourLocationIdentifier\")\n        region.notifyOnExit = false\n        notificationManager.setLocationBasedLocalNotification(region: region, alertAction: \"Alert Action\", alertBody: \"\u5230\u7740\", soundName: UILocalNotificationDefaultSoundName)\n    }\n```\n\n```swift:NotificationManager\nimport UIKit\nimport CoreLocation\n\npublic class NotificationManager: NSObject {\n    \n    override\n    init() {\n        let settings = UIUserNotificationSettings(forTypes: [.Alert, .Badge, .Sound], categories: nil)\n        \n        UIApplication.sharedApplication().registerUserNotificationSettings(settings)\n    }\n    \n    func setLocationBasedLocalNotification(\n        region region: CLCircularRegion,\n               regionTriggersOnce: Bool = true,\n               alertAction: String? = nil,\n               alertBody: String? = nil,\n               alertTitle: String? = nil,\n               hasAction: Bool = true,\n               applicationIconBadgeNumber: Int = 0,\n               soundName: String? = nil,\n               userInfo: NSDictionary? = nil)\n    {\n        let localNotification = UILocalNotification.init()\n        localNotification.region = region\n        localNotification.regionTriggersOnce = regionTriggersOnce\n        localNotification.alertAction = alertAction\n        localNotification.alertBody = alertBody\n        localNotification.alertTitle = alertTitle\n        localNotification.hasAction = hasAction\n        localNotification.applicationIconBadgeNumber = applicationIconBadgeNumber\n        localNotification.soundName = soundName\n        if let info = localNotification.userInfo {\n            localNotification.userInfo = info as [NSObject : AnyObject]\n        }\n        \n        UIApplication.sharedApplication().presentLocalNotificationNow(localNotification)\n    }\n}\n```\n\n## \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4e2d\u65ad\u72b6\u614b\u306e\u5834\u5408\u306e\u51e6\u7406\n\n```swift:AppDelegate.swift\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        \n        if let options = launchOptions {\n            let notification = options[UIApplicationLaunchOptionsLocalNotificationKey] as! UILocalNotification\n            if let region = notification.region {\n                print(\"Received Notification\")\n            }\n        }\n```\n\n## \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u72b6\u614b\u306e\u5834\u5408\u306e\u51e6\u7406\n\n```swift:AppDelegate.swift\n                print(\"Received Notification\")\n            }\n        }\n        return true\n    }\n\n    func application(application: UIApplication, didReceiveLocalNotification notification: UILocalNotification) {\n        if let region = notification.region {\n            print(\"Received Notification\")\n        }\n    }\n```\n\n## \u53c2\u8003\u60c5\u5831\n\n[Local \u304a\u3088\u3072\u3099 Push Notification \u30d5\u309a\u30ed\u30af\u3099\u30e9\u30df\u30f3\u30af\u3099\u30ab\u3099\u30a4\u30c8\u3099](https://developer.apple.com/jp/documentation/RemoteNotificationsPG.pdf)\n", "tags": ["Swift2", "Xcode7.3", "iOS8.2"]}