{"context": " More than 1 year has passed since last update.Optional\u307e\u308f\u308a\u306e\u5099\u5fd8\u9332.\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\n\nJava 1.8\n\n\npom.xml\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.12</version>\n</dependency>\n<dependency>\n    <groupId>org.hamcrest</groupId>\n    <artifactId>hamcrest-all</artifactId>\n    <version>1.3</version>\n</dependency>\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nsrc/test/java/sandbox/OptionalTest.java\npackage sandbox;\n\nimport java.util.Optional;\n\nimport org.junit.Test;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class OptionalTest {\n    @Test\n    public void testMap() {\n        Optional<?> optional;\n\n        // ofNullable() \u306b null \u3092\u6e21\u3059\u3068 empty \u306b\u306a\u308b.\n        // of() \u3067 null \u3092\u6e21\u3059\u3068\u4f8b\u5916\u304c\u98db\u3076\u306e\u3067\u6c17\u3092\u3064\u3051\u3088\u3046.\n        optional = Optional.ofNullable(null);\n        assertThat(optional, is(Optional.empty()));\n\n        // map() \u306e\u4e2d\u3067 null \u3092\u8fd4\u3055\u308c\u308b\u3068, map() \u306e\u623b\u308a\u5024\u306f empty \u306b\u306a\u308b.\n        optional = Optional.of(\"llama\")\n            .map(string -> null);\n        assertThat(optional, is(Optional.empty()));\n\n        // empty \u306b\u5bfe\u3059\u308b map() \u306f\u4f55\u3082\u305b\u305a, \u305f\u3060 empty \u3092\u8fd4\u3059.\n        optional = Optional.empty()\n            .map(none -> \"llama\");\n        assertThat(optional, is(Optional.empty()));\n\n        // \u9014\u4e2d\u3067 empty \u304c\u73fe\u308c\u3066\u3082\u5b89\u5fc3.\n        optional = Optional.of(\"vicuguna\")\n            .map(string -> null)\n            .map(none -> \"llama\");\n        assertThat(optional, is(Optional.empty()));\n    }\n\n    @Test\n    public void testFlatMap() {\n        Optional<?> optional;\n\n        // of() \u306b empty \u3092\u6e21\u3057\u3066\u3082, \u751f\u306e empty \u306b\u306f\u306a\u3089\u306a\u3044.\n        optional = Optional.of(Optional.empty());\n        assertThat(optional, is(Optional.of(Optional.empty())));\n\n        // map() \u5185\u3067 Optional \u3092\u8fd4\u3055\u308c\u308b\u3068, Optional \u3067\u4e8c\u91cd\u306b\u5305\u307e\u308c\u308b.\n        optional = Optional.of(\"alpaca\")\n            .map(string -> Optional.of(string));\n        assertThat(optional, is(Optional.of(Optional.of(\"alpaca\"))));\n\n        optional = Optional.of(\"llama\")\n            .map(string -> Optional.empty());\n        assertThat(optional, is(Optional.of(Optional.empty())));\n\n        // \u4e8c\u91cd Optional \u3092\u56de\u907f\u3059\u308b\u306b\u306f, flatMap() \u3092\u4f7f\u3046.\n        optional = Optional.of(\"alpaca\")\n            .flatMap(string -> Optional.of(string));\n        assertThat(optional, is(Optional.of(\"alpaca\")));\n\n        optional = Optional.of(\"llama\")\n            .flatMap(string -> Optional.empty());\n        assertThat(optional, is(Optional.empty()));\n\n        // empty \u306b\u5bfe\u3059\u308b flatMap() \u306f, map() \u3068\u540c\u69d8\u306b\u4f55\u3082\u305b\u305a, \u305f\u3060 empty \u3092\u8fd4\u3059.\n        optional = Optional.empty()\n            .flatMap(none -> Optional.of(\"llama\"));\n        assertThat(optional, is(Optional.empty()));\n    }\n\n    @Test\n    public void testOrElse() {\n        Object value;\n\n        // Optional \u306e\u4e2d\u8eab\u304c\u6b32\u3057\u3044\u3068\u304d\u306f get() \u3059\u308b.\n        // \u305f\u3060\u3057, \u3053\u306e Optional \u306f empty \u3067\u3042\u3063\u3066\u306f\u306a\u3089\u306a\u3044.\n        value = Optional.of(\"alpaca\")\n            .get();\n        assertThat(value, is(\"alpaca\"));\n\n        // Optional \u306e\u4e2d\u8eab\u304c empty \u304b\u3082\u3057\u308c\u306a\u3044\u3068\u304d\u306f orElse() \u3092\u4f7f\u3046.\n        value = Optional.of(\"alpaca\")\n            .orElse(\"llama\");\n        assertThat(value, is(\"alpaca\"));\n\n        value = Optional.empty()\n            .orElse(\"alpaca\");\n        assertThat(value, is(\"alpaca\"));\n\n        // orElseGet() \u3092\u4f7f\u3046\u3068 Supplier#get \u304b\u3089\u5024\u3092\u5f15\u3044\u3066\u3053\u308c\u308b\n        value = Optional.empty()\n            .orElseGet(() -> \"alpaca\");\n        assertThat(value, is(\"alpaca\"));\n\n        // \u9014\u4e2d\u3067 empty \u304c\u73fe\u308c\u3066\u3082\u5b89\u5fc3.\n        value = Optional.of(\"vicuguna\")\n            .map(string -> null)\n            .map(none -> \"llama\")\n            .orElse(\"alpaca\");\n        assertThat(value, is(\"alpaca\"));\n    }\n}\n\n\nOptional\u307e\u308f\u308a\u306e\u5099\u5fd8\u9332.\n\n# \u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\n* Java 1.8\n\n```xml:pom.xml\n<dependency>\n\t<groupId>junit</groupId>\n\t<artifactId>junit</artifactId>\n\t<version>4.12</version>\n</dependency>\n<dependency>\n\t<groupId>org.hamcrest</groupId>\n\t<artifactId>hamcrest-all</artifactId>\n\t<version>1.3</version>\n</dependency>\n```\n\n# \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n```java:src/test/java/sandbox/OptionalTest.java\npackage sandbox;\n\nimport java.util.Optional;\n\nimport org.junit.Test;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class OptionalTest {\n    @Test\n    public void testMap() {\n        Optional<?> optional;\n\n        // ofNullable() \u306b null \u3092\u6e21\u3059\u3068 empty \u306b\u306a\u308b.\n        // of() \u3067 null \u3092\u6e21\u3059\u3068\u4f8b\u5916\u304c\u98db\u3076\u306e\u3067\u6c17\u3092\u3064\u3051\u3088\u3046.\n        optional = Optional.ofNullable(null);\n        assertThat(optional, is(Optional.empty()));\n\n        // map() \u306e\u4e2d\u3067 null \u3092\u8fd4\u3055\u308c\u308b\u3068, map() \u306e\u623b\u308a\u5024\u306f empty \u306b\u306a\u308b.\n        optional = Optional.of(\"llama\")\n            .map(string -> null);\n        assertThat(optional, is(Optional.empty()));\n\n        // empty \u306b\u5bfe\u3059\u308b map() \u306f\u4f55\u3082\u305b\u305a, \u305f\u3060 empty \u3092\u8fd4\u3059.\n        optional = Optional.empty()\n            .map(none -> \"llama\");\n        assertThat(optional, is(Optional.empty()));\n\n        // \u9014\u4e2d\u3067 empty \u304c\u73fe\u308c\u3066\u3082\u5b89\u5fc3.\n        optional = Optional.of(\"vicuguna\")\n            .map(string -> null)\n            .map(none -> \"llama\");\n        assertThat(optional, is(Optional.empty()));\n    }\n\n    @Test\n    public void testFlatMap() {\n        Optional<?> optional;\n\n        // of() \u306b empty \u3092\u6e21\u3057\u3066\u3082, \u751f\u306e empty \u306b\u306f\u306a\u3089\u306a\u3044.\n        optional = Optional.of(Optional.empty());\n        assertThat(optional, is(Optional.of(Optional.empty())));\n\n        // map() \u5185\u3067 Optional \u3092\u8fd4\u3055\u308c\u308b\u3068, Optional \u3067\u4e8c\u91cd\u306b\u5305\u307e\u308c\u308b.\n        optional = Optional.of(\"alpaca\")\n            .map(string -> Optional.of(string));\n        assertThat(optional, is(Optional.of(Optional.of(\"alpaca\"))));\n\n        optional = Optional.of(\"llama\")\n            .map(string -> Optional.empty());\n        assertThat(optional, is(Optional.of(Optional.empty())));\n\n        // \u4e8c\u91cd Optional \u3092\u56de\u907f\u3059\u308b\u306b\u306f, flatMap() \u3092\u4f7f\u3046.\n        optional = Optional.of(\"alpaca\")\n            .flatMap(string -> Optional.of(string));\n        assertThat(optional, is(Optional.of(\"alpaca\")));\n\n        optional = Optional.of(\"llama\")\n            .flatMap(string -> Optional.empty());\n        assertThat(optional, is(Optional.empty()));\n\n        // empty \u306b\u5bfe\u3059\u308b flatMap() \u306f, map() \u3068\u540c\u69d8\u306b\u4f55\u3082\u305b\u305a, \u305f\u3060 empty \u3092\u8fd4\u3059.\n        optional = Optional.empty()\n            .flatMap(none -> Optional.of(\"llama\"));\n        assertThat(optional, is(Optional.empty()));\n    }\n\n    @Test\n    public void testOrElse() {\n        Object value;\n\n        // Optional \u306e\u4e2d\u8eab\u304c\u6b32\u3057\u3044\u3068\u304d\u306f get() \u3059\u308b.\n        // \u305f\u3060\u3057, \u3053\u306e Optional \u306f empty \u3067\u3042\u3063\u3066\u306f\u306a\u3089\u306a\u3044.\n        value = Optional.of(\"alpaca\")\n            .get();\n        assertThat(value, is(\"alpaca\"));\n\n        // Optional \u306e\u4e2d\u8eab\u304c empty \u304b\u3082\u3057\u308c\u306a\u3044\u3068\u304d\u306f orElse() \u3092\u4f7f\u3046.\n        value = Optional.of(\"alpaca\")\n            .orElse(\"llama\");\n        assertThat(value, is(\"alpaca\"));\n\n        value = Optional.empty()\n            .orElse(\"alpaca\");\n        assertThat(value, is(\"alpaca\"));\n\n        // orElseGet() \u3092\u4f7f\u3046\u3068 Supplier#get \u304b\u3089\u5024\u3092\u5f15\u3044\u3066\u3053\u308c\u308b\n        value = Optional.empty()\n            .orElseGet(() -> \"alpaca\");\n        assertThat(value, is(\"alpaca\"));\n\n        // \u9014\u4e2d\u3067 empty \u304c\u73fe\u308c\u3066\u3082\u5b89\u5fc3.\n        value = Optional.of(\"vicuguna\")\n            .map(string -> null)\n            .map(none -> \"llama\")\n            .orElse(\"alpaca\");\n        assertThat(value, is(\"alpaca\"));\n    }\n}\n```\n", "tags": ["Java", "java8"]}