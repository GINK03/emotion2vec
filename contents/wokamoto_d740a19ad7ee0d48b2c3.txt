{"context": "SES \u3067\u306f\u3001\u30e1\u30fc\u30eb\u3092\u53d7\u4fe1\u3057\u3066 S3 \u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3001S3\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3060\u3051\u3060\u3068\u3001\u8aad\u3080\u3068\u304d\u306b\u304b\u3063\u305f\u308b\u3044\u3067\u3059\u3002\nS3 put event \u304b\u3089 Lambda \u3092\u30ad\u30c3\u30af\u3059\u308b\u3068 Slack \u306b\u901a\u77e5\u3067\u304d\u305f\u308a\u3057\u3066\u697d\u30c1\u30f3\u306a\u306e\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n(\u3055\u3089\u306b SES \u4f7f\u3063\u3066\u5225\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306b\u98db\u3070\u3057\u305f\u308a\u3068\u304b\u3057\u3066\u3082\u4fbf\u5229\u304b\u3082\u3067\u3059\u306d\uff09\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f npm package async \u3068 mailparser \u3092\u4f7f\u7528\u3057\u3066\u308b\u306e\u3067 npm install async mailparser \u3057\u3066 node_mojules/ \u3054\u3068 zip \u306b\u56fa\u3081\u3066\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u306d\u3002\n\nindex.js\n/*\nName: Email Forwarder\n*/\nexports.handler = function(event, context) {\n    var slackConfig = {\n        hostname:   \"hooks.slack.com\",\n        path:       \"/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\",\n        channel:    \"#channel\",\n        icon_emoji: \":ses:\",\n        color:      \"good\"\n    };\n\n    var aws = require('aws-sdk');\n    var async = require('async');\n\n    var bucket = event.Records[0].s3.bucket.name;\n    var key = event.Records[0].s3.object.key;\n\n    async.waterfall([\n        function(nextProcess) {\n            var s3 = new aws.S3({apiVersion: '2006-03-01'});\n            s3.getObject({Bucket:bucket, Key:key}, nextProcess);\n        },\n        function(data, nextProcess) {\n            var MailParser = require(\"mailparser\").MailParser;\n            var mailparser = new MailParser();\n\n            // setup an event listener when the parsing finishes\n            mailparser.on(\"end\", function(result){\n                console.log(\"Receive Mail: %j\", result);\n                nextProcess(null, result);\n            });\n\n            // send the email source to the parser\n            mailparser.write(data.Body.toString());\n            mailparser.end();\n        },\n        function(mail_object, nextProcess) {\n            var https = require('https');\n            var util = require('util');\n\n            var options = {\n                method:     'POST',\n                hostname:   slackConfig.hostname,\n                port:       443,\n                path:       slackConfig.path\n            };\n            var postData = {\n                \"channel\":      slackConfig.channel,\n                \"username\":     mail_object.from[0].name + \"(\" + mail_object.from[0].address + \")\",\n                \"text\":         \"Subject: \" + mail_object.subject + \"\\n\" +\n                                \"From: \" + mail_object.from[0].name + \"(\" + mail_object.from[0].address + \")\" + \"\\n\" +\n                                \"To: \" + mail_object.to[0].address,\n                \"icon_emoji\":   slackConfig.icon_emoji\n            };\n            postData.attachments = [{\n                \"color\":    slackConfig.color,\n                \"text\":     mail_object.text\n            }];\n\n            var req = https.request(options, function(res) {\n                nextProcess(null, res);\n            });\n            req.on('error', function(err) {\n                console.log('problem with request: ' + err.message);\n                nextProcess(err);\n            });\n            req.write(util.format(\"%j\", postData));\n            req.end();\n        }],\n        function(err, res) {\n            if (err) {\n                console.log('err: %j', err);\n                context.fail(err);\n            } else {\n                console.log('result: %j', res);\n                context.succeed('Success!');\n            }\n        }\n    );\n};\n\n\nSES \u3067\u306f\u3001\u30e1\u30fc\u30eb\u3092\u53d7\u4fe1\u3057\u3066 S3 \u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3001S3\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3060\u3051\u3060\u3068\u3001\u8aad\u3080\u3068\u304d\u306b\u304b\u3063\u305f\u308b\u3044\u3067\u3059\u3002\nS3 put event \u304b\u3089 Lambda \u3092\u30ad\u30c3\u30af\u3059\u308b\u3068 Slack \u306b\u901a\u77e5\u3067\u304d\u305f\u308a\u3057\u3066\u697d\u30c1\u30f3\u306a\u306e\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n(\u3055\u3089\u306b SES \u4f7f\u3063\u3066\u5225\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306b\u98db\u3070\u3057\u305f\u308a\u3068\u304b\u3057\u3066\u3082\u4fbf\u5229\u304b\u3082\u3067\u3059\u306d\uff09\n\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f npm package [async](https://www.npmjs.com/package/async) \u3068 [mailparser](https://www.npmjs.com/package/mailparser) \u3092\u4f7f\u7528\u3057\u3066\u308b\u306e\u3067 ```npm install async mailparser``` \u3057\u3066 ```node_mojules/``` \u3054\u3068 zip \u306b\u56fa\u3081\u3066\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u306d\u3002\n\n```js:index.js\n/*\nName: Email Forwarder\n*/\nexports.handler = function(event, context) {\n\tvar slackConfig = {\n\t\thostname:\t\"hooks.slack.com\",\n\t\tpath:\t\t\"/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\",\n\t\tchannel:\t\"#channel\",\n\t\ticon_emoji:\t\":ses:\",\n\t\tcolor:\t\t\"good\"\n\t};\n\n\tvar aws = require('aws-sdk');\n\tvar async = require('async');\n\n\tvar bucket = event.Records[0].s3.bucket.name;\n\tvar key = event.Records[0].s3.object.key;\n\n\tasync.waterfall([\n\t\tfunction(nextProcess) {\n\t\t\tvar s3 = new aws.S3({apiVersion: '2006-03-01'});\n\t\t\ts3.getObject({Bucket:bucket, Key:key}, nextProcess);\n\t\t},\n\t\tfunction(data, nextProcess) {\n\t\t\tvar MailParser = require(\"mailparser\").MailParser;\n\t\t\tvar mailparser = new MailParser();\n\n\t\t\t// setup an event listener when the parsing finishes\n\t\t\tmailparser.on(\"end\", function(result){\n\t\t\t\tconsole.log(\"Receive Mail: %j\", result);\n\t\t\t\tnextProcess(null, result);\n\t\t\t});\n\n\t\t\t// send the email source to the parser\n\t\t\tmailparser.write(data.Body.toString());\n\t\t\tmailparser.end();\n\t\t},\n\t\tfunction(mail_object, nextProcess) {\n\t\t\tvar https = require('https');\n\t\t\tvar util = require('util');\n\n\t\t    var options = {\n\t\t        method:     'POST',\n\t\t        hostname:   slackConfig.hostname,\n\t\t        port:       443,\n\t\t        path:       slackConfig.path\n\t\t    };\n\t\t    var postData = {\n\t\t        \"channel\":      slackConfig.channel,\n\t\t        \"username\":     mail_object.from[0].name + \"(\" + mail_object.from[0].address + \")\",\n\t\t        \"text\":         \"Subject: \" + mail_object.subject + \"\\n\" +\n\t\t        \t\t\t\t\"From: \" + mail_object.from[0].name + \"(\" + mail_object.from[0].address + \")\" + \"\\n\" +\n\t\t        \t\t\t\t\"To: \" + mail_object.to[0].address,\n\t\t        \"icon_emoji\":   slackConfig.icon_emoji\n\t\t    };\n\t\t    postData.attachments = [{\n\t\t        \"color\":    slackConfig.color,\n\t\t        \"text\":     mail_object.text\n\t\t    }];\n\n\t\t    var req = https.request(options, function(res) {\n\t\t\t\tnextProcess(null, res);\n\t\t    });\n\t\t    req.on('error', function(err) {\n\t\t        console.log('problem with request: ' + err.message);\n\t\t\t\tnextProcess(err);\n\t\t    });\n\t\t    req.write(util.format(\"%j\", postData));\n\t\t    req.end();\n\t\t}],\n\t\tfunction(err, res) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('err: %j', err);\n\t\t\t\tcontext.fail(err);\n\t\t\t} else {\n\t\t\t\tconsole.log('result: %j', res);\n\t\t\t\tcontext.succeed('Success!');\n\t\t\t}\n\t\t}\n\t);\n};\n```\n", "tags": ["AWS", "ses", "Slack"]}