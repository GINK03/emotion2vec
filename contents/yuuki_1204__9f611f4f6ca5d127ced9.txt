{"tags": ["Python", "Windows10", "RabbitMQ", "RaspberryPi", "Julius"], "context": "\n\n \u306f\u3058\u3081\u306b\n\u5e74\u672b\u306b\u5bb6\u306e\u30bf\u30ef\u30fc\u578b\u306e\u30b5\u30fc\u30d0\u30fb\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3\u304c\u4e00\u5ea6\u306b\u58ca\u308c\u3066\u3057\u307e\u3044\u3001\u3054\u3063\u305f\u716e\u74b0\u5883\u306e\u5fa9\u65e7\u306b\u52e4\u3057\u3093\u3067\u65b0\u3057\u3044\u4e8b\u306b\u624b\u304c\u56de\u3063\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u5fa9\u65e7\u304c\u4e00\u6bb5\u843d\u3057\u3066\u304d\u305f\u306e\u3067\u524d\u304b\u3089\u3084\u308a\u305f\u304b\u3063\u305fRabbitMQ\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u901a\u77e5\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\uff03\u30bf\u30a4\u30c8\u30eb\u306b\u30e9\u30ba\u30d1\u30a4\u3068Julius\u5165\u308c\u3066\u307e\u3059\u304c\u3001\u30db\u30f3\u30c8\u306b\u6dfb\u3048\u3066\u308b\u3060\u3051\u3067\u3059\u30b9\u30df\u30de\u30bb\u30f3\u3002\n\n \u69cb\u6210\u30fb\u52d5\u4f5c\n\u53bb\u5e74\u3001\u30e9\u30ba\u30d1\u30a4\u306bUSB\u30ab\u30e1\u30e9\u3068\u8d64\u5916\u7ddaLED\u3092\u3064\u306a\u3052\u3066\u3001\u97f3\u58f0\u8a8d\u8b58\u3067\u30c6\u30ec\u30d3\u3092\u64cd\u4f5c\u3059\u308b\u611f\u3058\u306e\u30d7\u30c1\u96fb\u5b50\u5de5\u4f5c\u74b0\u5883\u3092\u69cb\u7bc9\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u3053\u306e\u74b0\u5883\u306b\u8ffd\u52a0\u3059\u308b\u611f\u3058\u3067Windows\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u203b\u6ce8 \u56f3\u4ee5\u5916\u306b\u3082\u8272\u3005\u3068\u8a70\u3081\u8fbc\u3093\u3067\u3044\u3066\u3001\u3061\u3087\u3063\u3068\u8907\u96d1\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n1. USB\u30ab\u30e1\u30e9\u306e\u5185\u8535\u30de\u30a4\u30af\u304b\u3089\u5165\u529b\u3057\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092Julius\u3067\u8a8d\u8b58\u3002\n2. \u8a8d\u8b58\u3057\u305f\u7d50\u679c\u3092\u81ea\u4f5c\u306eJuliusClient\u30a2\u30d7\u30ea\u3067\u89e3\u91c8\u30fb\u30b9\u30b3\u30a2\u306e\u5224\u5b9a\u3092\u884c\u3044\u3001\u4e00\u5b9a\u4ee5\u4e0a\u306e\u30b9\u30b3\u30a2\u3067\u300c\u30c6\u30ec\u30d3\u96fb\u6e90ON\u300d\u3068\u8a8d\u8b58\u3057\u305f\u3089\u3001RabbitMQ\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u3002\n3. LIRC\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3059\u308bPython\u30a2\u30d7\u30ea\u304cRabbitMQ\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u53d6\u308aIR\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3002\n4. \u30c6\u30ec\u30d3\u306b\u96fb\u6e90ON\u306e\u4fe1\u53f7\u3092\u9001\u4fe1\u3002\n\u21d22\u3067\u9001\u3089\u308c\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3\u5074\u3067\u3082\u53d7\u4fe1\u3057\u3066\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3055\u305b\u307e\u3057\u305f\u3002\n\n \u51fa\u6765\u305f\n\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u306fGrowl\u3092\u4f7f\u3063\u3066\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nGrowl\u304a\u624b\u8efd\u3067\u4f7f\u3044\u3084\u3059\u3044\uff01\uff01\n\n \u52d5\u4f5c\u74b0\u5883\n\n\nRaspberry PI\n\nRabbitMQ 2.8.4\n\n\n\nWindows10\n\nPython2.7\uff08\u203b\uff09\n\n\npika 0.10.0 # RabbitMQ\u63a5\u7d9a\npywin32 220 # Windows\u30b5\u30fc\u30d3\u30b9\u5b9f\u88c5\ngntp 1.0.3 # Growl\u3078\u306e\u901a\u77e5\n\n\nGrowl 2.0.9\n\n\n\n\u203bPython3\u3067\u4f5c\u3063\u305f\u3051\u3069\u3001Windows\u306e\u30b7\u30b9\u30c6\u30e0\u74b0\u5883\u5909\u6570\u306ePATH\u306f\u8af8\u4e8b\u60c5\u3067Python2\u306e\u30d1\u30b9\u3092\u767b\u9332\u3057\u3066\u3044\u3066\u7c21\u5358\u306b\u5909\u3048\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u304b\u3063\u305f\u306e\u3067\u3001Python2\u3067\u52d5\u4f5c\u3057\u3066\u307e\u3059\u3002\u3002\n\u3061\u306a\u307f\u306bpywin32\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30fb\u4f7f\u3044\u65b9\u3067\u3061\u3087\u3044\u30cf\u30de\u308a\u307e\u3057\u305f\u3002\u5148\u99c6\u8005\u306e\u65b9\u3005\u306e\u60c5\u5831\u306b\u611f\u8b1d\u3067\u3059\u3002\npython\u3067\u306eWindows\u30b5\u30fc\u30d3\u30b9\u306e\u66f8\u304d\u65b9\n\u81ea\u5206\u3067\u4f5c\u3063\u305f Python \u30b9\u30af\u30ea\u30d7\u30c8\u3092 Windows Server \u306b\u30b5\u30fc\u30f4\u30a3\u30b9\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u30b7\u30e7\u30fc\u30c8\u30b3\u30f3\u30c8\uff081\uff09\nPython3.4\u3067pywin32\u304c\u52d5\u304b\u306a\u304b\u3063\u305f\u3053\u3068 \u2015\nPython\u3001pywin32\u3067Windows\u30b5\u30fc\u30d3\u30b9\u304c\u8d77\u52d5\u3067\u304d\u306a\u3044\n\u3042\u3068Growl\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\uff08\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u4e0d\u8981\u3067\u3057\u305f\u3001\u74b0\u5883\u5dee\u7570\u304b\u306a\uff1f\uff09\nWindows \u3067 Growl \u901a\u77e5\u3092\u884c\u3046\n\n \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u4e38\u3054\u3068\u8cbc\u3063\u3064\u3051\u307e\u3059\u3002\u52d5\u3044\u3066\u307e\u3059\u304c\u3001\u8272\u3005\u3068\u9069\u5f53\u306a\u306e\u306f\u3054\u5bb9\u8d66\u3067\u3059\u3002\n\u306a\u306b\u3052\u306bpika\u3067RabbitMQ\u306b\u63a5\u7d9a\u3059\u308b\u6642\u306f\u3001\u3053\u308c\u307e\u3067BlockingConnection\u306b\u983c\u308a\u5207\u3063\u3066\u3044\u305f\u306e\u3067\u3001\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u56de\u3059\u306e\u306f\u521d\u3081\u3066\u3067\u3057\u305f\u3002\n\nwin_notification.py\n\nimport logging\nimport logging.handlers\n\nimport pika\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nfrom gntp.notifier import GrowlNotifier\n\n# \u30ed\u30b0\nLOG_FILE_PATH = 'C:\\\\tmp\\win_notification_consumer.log'\nLOG_BK_COUNT = 2\nLOG_LEVEL = logging.INFO\n\n# MQ\nMQ_IP = \"x.x.x.x\"\nMQ_QUEUE = \"Queue2\"\n\n# \u901a\u77e5\nGROW_IP = \"127.0.0.1\"\nGROW_PASS = None\nGROW_APP_NAME = \"amqp notif\"\nGROW_NOTIFS = [\"Message\"]\nGROW_NOTE_TYPE = \"Message\"\nGROW_TITLE = \"Get Message\"\n\n# Windows\u30b5\u30fc\u30d3\u30b9\nWIN_SRV_NAME = \"WinNotificationConsumer\"\nWIN_DISP_NAME = \"WinNotificationConsumer\"\n\n\nclass WinNotificationConsumer(win32serviceutil.ServiceFramework):\n\n    # Required Attributes:\n    _svc_name_ = WIN_SRV_NAME\n    _svc_display_name_ = WIN_DISP_NAME\n\n    def __init__(self, args):\n        # \u30ed\u30b0\u521d\u671f\u5316\n        self.logger = logging.getLogger()\n        self.logger.setLevel(LOG_LEVEL)\n        formatter = logging.Formatter(\n            '%(asctime)s - %(levelname)s - %(message)s')\n        handler = logging.handlers.TimedRotatingFileHandler(\n            filename=LOG_FILE_PATH,\n            when='D',\n            backupCount=LOG_BK_COUNT\n        )\n        handler.setLevel(logging.DEBUG)\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n        self.logger.debug('init log end.')\n\n        # Win32API\u5468\u308a\u521d\u671f\u5316\n        win32serviceutil.ServiceFramework.__init__(self, args)\n        self.stop_event = win32event.CreateEvent(None, 0, 0, None)\n        self.logger.debug('init win32 end.')\n\n        # \u901a\u77e5\u306e\u521d\u671f\u5316\n        self.notifier = GrowlNotifier(\n            applicationName=GROW_APP_NAME,\n            notifications=GROW_NOTIFS,\n            hostname=GROW_IP,\n            password=GROW_PASS)\n        self.notifier.register()\n        self.logger.debug('init notif end.')\n\n    def SvcDoRun(self):\n        # service start\n        self.logger.info('service starting...')\n        # \u30a4\u30d9\u30f3\u30c8\u30ed\u30b0\u51fa\u529b\n        servicemanager.LogMsg(\n            servicemanager.EVENTLOG_INFORMATION_TYPE,\n            servicemanager.PYS_SERVICE_STARTED,\n            (self._svc_name_, 'test')\n        )\n        self.consuming_and_notificate()\n\n    def consuming_and_notificate(self):\n        self.logger.debug('consuming and notificate starting...')\n\n        # RabbitMQ\u306e\u63a5\u7d9a\u8a2d\u5b9a\n        self.connection = pika.BlockingConnection(\n            pika.ConnectionParameters(host=MQ_IP)\n        )\n        self.channel = self.connection.channel()\n\n        # \u30ad\u30e5\u30fc\u304c\u7121\u3051\u308c\u3070\u4f5c\u6210\n        self.channel.queue_declare(\n            queue=MQ_QUEUE,\n            durable=True\n        )\n\n        # \u30ad\u30e5\u30fc\u304b\u3089\u53d6\u5f97\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092generator\u3067\u56de\u3059\u3002\n        self.logger.info('start consuming message.')\n        for msg in self.channel.consume(queue=MQ_QUEUE, no_ack=True):\n            message_body = msg[2]\n            self.logger.debug(message_body)\n            self.notifier.notify(noteType=GROW_NOTE_TYPE,\n                                 title=GROW_TITLE,\n                                 description=message_body)\n\n    def SvcStop(self):\n        # service stop\n        self.logger.info('service stopping...')\n\n        # \u4e0a\u4f4d\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\n        self.ReportServiceStatus(\n            win32service.SERVICE_STOP_PENDING)\n        win32event.SetEvent(self.stop_event)\n\n        # MQ\u5207\u65ad\n        self.channel.close()\n        self.connection.close()\n        self.logger.info('service stopped.')\n\n\ndef main():\n    # \u5f15\u6570('start','stop','install' etc.)\u3092\u5143\u306b\u30b5\u30fc\u30d3\u30b9\u8d77\u52d5/\u767b\u9332/\u505c\u6b62/\u524a\u9664\u7b49\u3092\u5b9f\u884c\u3002\n    win32serviceutil.HandleCommandLine(WinNotificationConsumer)\n\nif __name__ == '__main__':\n    main()\n\n\n\n Windows\u30b5\u30fc\u30d3\u30b9\u767b\u9332\n\u3053\u3093\u306a\u611f\u3058\u3067\u767b\u9332\uff06\u81ea\u52d5\u8d77\u52d5\u3067\u304d\u307e\u3059\u3002\nC:\\\\Python27\\python.exe win_notification.py --auto install\n\n\n \u6240\u611f\n\u7d50\u69cb\u304b\u3093\u305f\u3093\u306b\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u51fa\u6765\u305f\uff08\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u306b\u95a2\u3057\u3066\u306fGrowl\u69d8\u3005\u611f\uff09\u3002RabbitMQ\u3092Windows\u30b5\u30fc\u30d3\u30b9\u304b\u3089\u63a5\u7d9a\u3057\u3063\u3071\u306a\u3057\u306b\u51fa\u6765\u305f\u306e\u3067\u3001\u30d1\u30bd\u30b3\u30f3\u3082\u97f3\u58f0\u64cd\u4f5c\u3067\u8272\u3005\u51fa\u6765\u308b\u6c17\u304c\u3057\u3066\u304d\u305f\u3002\n\u3042\u3068\u306f\u4ed6\u306ePython\u30a2\u30d7\u30ea\u306b\u3064\u3044\u3066\u3082\u4f55\u304b\u66f8\u304d\u305f\u3044\u306a\u2026\u65e2\u5b58\u30b3\u30fc\u30c9\u306f\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u306a\u304d\u3083\u898b\u305b\u3089\u308c\u305f\u3082\u3093\u3058\u3083\u306a\u3044\u3051\u3069\u3082\u2026\u3002\n# <i class=\"fa fa-forward\" style=\"font-size:1em;\"></i> \u306f\u3058\u3081\u306b\n\u5e74\u672b\u306b\u5bb6\u306e\u30bf\u30ef\u30fc\u578b\u306e\u30b5\u30fc\u30d0\u30fb\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3\u304c\u4e00\u5ea6\u306b\u58ca\u308c\u3066\u3057\u307e\u3044\u3001\u3054\u3063\u305f\u716e\u74b0\u5883\u306e\u5fa9\u65e7\u306b\u52e4\u3057\u3093\u3067\u65b0\u3057\u3044\u4e8b\u306b\u624b\u304c\u56de\u3063\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u5fa9\u65e7\u304c\u4e00\u6bb5\u843d\u3057\u3066\u304d\u305f\u306e\u3067\u524d\u304b\u3089\u3084\u308a\u305f\u304b\u3063\u305fRabbitMQ\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u901a\u77e5\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\uff03\u30bf\u30a4\u30c8\u30eb\u306b\u30e9\u30ba\u30d1\u30a4\u3068Julius\u5165\u308c\u3066\u307e\u3059\u304c\u3001\u30db\u30f3\u30c8\u306b\u6dfb\u3048\u3066\u308b\u3060\u3051\u3067\u3059\u30b9\u30df\u30de\u30bb\u30f3\u3002\n\n# <i class=\"fa fa-cubes\" aria-hidden=\"true\"></i> \u69cb\u6210\u30fb\u52d5\u4f5c\n\u53bb\u5e74\u3001\u30e9\u30ba\u30d1\u30a4\u306bUSB\u30ab\u30e1\u30e9\u3068\u8d64\u5916\u7ddaLED\u3092\u3064\u306a\u3052\u3066\u3001\u97f3\u58f0\u8a8d\u8b58\u3067\u30c6\u30ec\u30d3\u3092\u64cd\u4f5c\u3059\u308b\u611f\u3058\u306e\u30d7\u30c1\u96fb\u5b50\u5de5\u4f5c\u74b0\u5883\u3092\u69cb\u7bc9\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u3053\u306e\u74b0\u5883\u306b\u8ffd\u52a0\u3059\u308b\u611f\u3058\u3067Windows\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n![\u74b0\u5883.png](https://qiita-image-store.s3.amazonaws.com/0/82760/f99026ef-ecb6-0400-3d59-54ac8058a1ef.png)\n\n\u203b\u6ce8 \u56f3\u4ee5\u5916\u306b\u3082\u8272\u3005\u3068\u8a70\u3081\u8fbc\u3093\u3067\u3044\u3066\u3001\u3061\u3087\u3063\u3068\u8907\u96d1\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n1. USB\u30ab\u30e1\u30e9\u306e\u5185\u8535\u30de\u30a4\u30af\u304b\u3089\u5165\u529b\u3057\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092Julius\u3067\u8a8d\u8b58\u3002\n2. \u8a8d\u8b58\u3057\u305f\u7d50\u679c\u3092\u81ea\u4f5c\u306eJuliusClient\u30a2\u30d7\u30ea\u3067\u89e3\u91c8\u30fb\u30b9\u30b3\u30a2\u306e\u5224\u5b9a\u3092\u884c\u3044\u3001\u4e00\u5b9a\u4ee5\u4e0a\u306e\u30b9\u30b3\u30a2\u3067\u300c\u30c6\u30ec\u30d3\u96fb\u6e90ON\u300d\u3068\u8a8d\u8b58\u3057\u305f\u3089\u3001RabbitMQ\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u3002\n3. LIRC\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3059\u308bPython\u30a2\u30d7\u30ea\u304cRabbitMQ\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u53d6\u308aIR\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3002\n4. \u30c6\u30ec\u30d3\u306b\u96fb\u6e90ON\u306e\u4fe1\u53f7\u3092\u9001\u4fe1\u3002\n\n**\u21d22\u3067\u9001\u3089\u308c\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3\u5074\u3067\u3082\u53d7\u4fe1\u3057\u3066\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3055\u305b\u307e\u3057\u305f\u3002**\n\n# <i class=\"fa fa-eye\" aria-hidden=\"true\"></i> \u51fa\u6765\u305f\n\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u306fGrowl\u3092\u4f7f\u3063\u3066\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n![\u901a\u77e5.png](https://qiita-image-store.s3.amazonaws.com/0/82760/41e16cb0-a499-6b6e-ee5c-38b95ea217e7.png)\nGrowl\u304a\u624b\u8efd\u3067\u4f7f\u3044\u3084\u3059\u3044\uff01\uff01\n\n# <i class=\"fa fa-cogs\" style=\"font-size:1em;\"></i> \u52d5\u4f5c\u74b0\u5883\n\n- Raspberry PI\n   - RabbitMQ 2.8.4\n\n- Windows10\n   - Python2.7\uff08\u203b\uff09\n      - pika 0.10.0 # RabbitMQ\u63a5\u7d9a\n      - pywin32 220 # Windows\u30b5\u30fc\u30d3\u30b9\u5b9f\u88c5\n      - gntp 1.0.3 # Growl\u3078\u306e\u901a\u77e5\n   - Growl 2.0.9\n\n\u203bPython3\u3067\u4f5c\u3063\u305f\u3051\u3069\u3001Windows\u306e\u30b7\u30b9\u30c6\u30e0\u74b0\u5883\u5909\u6570\u306ePATH\u306f\u8af8\u4e8b\u60c5\u3067Python2\u306e\u30d1\u30b9\u3092\u767b\u9332\u3057\u3066\u3044\u3066\u7c21\u5358\u306b\u5909\u3048\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u304b\u3063\u305f\u306e\u3067\u3001Python2\u3067\u52d5\u4f5c\u3057\u3066\u307e\u3059\u3002\u3002\n\n\u3061\u306a\u307f\u306bpywin32\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30fb\u4f7f\u3044\u65b9\u3067\u3061\u3087\u3044\u30cf\u30de\u308a\u307e\u3057\u305f\u3002\u5148\u99c6\u8005\u306e\u65b9\u3005\u306e\u60c5\u5831\u306b\u611f\u8b1d\u3067\u3059\u3002\n[python\u3067\u306eWindows\u30b5\u30fc\u30d3\u30b9\u306e\u66f8\u304d\u65b9](http://masahito.hatenablog.com/entry/20110511/1305107553)\n[\u81ea\u5206\u3067\u4f5c\u3063\u305f Python \u30b9\u30af\u30ea\u30d7\u30c8\u3092 Windows Server \u306b\u30b5\u30fc\u30f4\u30a3\u30b9\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u30b7\u30e7\u30fc\u30c8\u30b3\u30f3\u30c8\uff081\uff09](http://inokara.hateblo.jp/entry/2016/02/07/200643)\n[Python3.4\u3067pywin32\u304c\u52d5\u304b\u306a\u304b\u3063\u305f\u3053\u3068 \u2015](http://yuan-jiu.asablo.jp/blog/2014/04/08/7270185)\n[Python\u3001pywin32\u3067Windows\u30b5\u30fc\u30d3\u30b9\u304c\u8d77\u52d5\u3067\u304d\u306a\u3044](https://teratail.com/questions/43871)\n\n\u3042\u3068Growl\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\uff08\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u4e0d\u8981\u3067\u3057\u305f\u3001\u74b0\u5883\u5dee\u7570\u304b\u306a\uff1f\uff09\n[Windows \u3067 Growl \u901a\u77e5\u3092\u884c\u3046](http://qiita.com/rohinomiya/items/5e485d6700eac256af9f)\n\n\n# <i class=\"fa fa-file-code-o\" aria-hidden=\"true\"></i> \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u4e38\u3054\u3068\u8cbc\u3063\u3064\u3051\u307e\u3059\u3002\u52d5\u3044\u3066\u307e\u3059\u304c\u3001\u8272\u3005\u3068\u9069\u5f53\u306a\u306e\u306f\u3054\u5bb9\u8d66\u3067\u3059\u3002\n\u306a\u306b\u3052\u306bpika\u3067RabbitMQ\u306b\u63a5\u7d9a\u3059\u308b\u6642\u306f\u3001\u3053\u308c\u307e\u3067BlockingConnection\u306b\u983c\u308a\u5207\u3063\u3066\u3044\u305f\u306e\u3067\u3001\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u56de\u3059\u306e\u306f\u521d\u3081\u3066\u3067\u3057\u305f\u3002\n\n```win_notification.py\n\nimport logging\nimport logging.handlers\n\nimport pika\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nfrom gntp.notifier import GrowlNotifier\n\n# \u30ed\u30b0\nLOG_FILE_PATH = 'C:\\\\tmp\\win_notification_consumer.log'\nLOG_BK_COUNT = 2\nLOG_LEVEL = logging.INFO\n\n# MQ\nMQ_IP = \"x.x.x.x\"\nMQ_QUEUE = \"Queue2\"\n\n# \u901a\u77e5\nGROW_IP = \"127.0.0.1\"\nGROW_PASS = None\nGROW_APP_NAME = \"amqp notif\"\nGROW_NOTIFS = [\"Message\"]\nGROW_NOTE_TYPE = \"Message\"\nGROW_TITLE = \"Get Message\"\n\n# Windows\u30b5\u30fc\u30d3\u30b9\nWIN_SRV_NAME = \"WinNotificationConsumer\"\nWIN_DISP_NAME = \"WinNotificationConsumer\"\n\n\nclass WinNotificationConsumer(win32serviceutil.ServiceFramework):\n\n    # Required Attributes:\n    _svc_name_ = WIN_SRV_NAME\n    _svc_display_name_ = WIN_DISP_NAME\n\n    def __init__(self, args):\n        # \u30ed\u30b0\u521d\u671f\u5316\n        self.logger = logging.getLogger()\n        self.logger.setLevel(LOG_LEVEL)\n        formatter = logging.Formatter(\n            '%(asctime)s - %(levelname)s - %(message)s')\n        handler = logging.handlers.TimedRotatingFileHandler(\n            filename=LOG_FILE_PATH,\n            when='D',\n            backupCount=LOG_BK_COUNT\n        )\n        handler.setLevel(logging.DEBUG)\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n        self.logger.debug('init log end.')\n\n        # Win32API\u5468\u308a\u521d\u671f\u5316\n        win32serviceutil.ServiceFramework.__init__(self, args)\n        self.stop_event = win32event.CreateEvent(None, 0, 0, None)\n        self.logger.debug('init win32 end.')\n\n        # \u901a\u77e5\u306e\u521d\u671f\u5316\n        self.notifier = GrowlNotifier(\n            applicationName=GROW_APP_NAME,\n            notifications=GROW_NOTIFS,\n            hostname=GROW_IP,\n            password=GROW_PASS)\n        self.notifier.register()\n        self.logger.debug('init notif end.')\n\n    def SvcDoRun(self):\n        # service start\n        self.logger.info('service starting...')\n        # \u30a4\u30d9\u30f3\u30c8\u30ed\u30b0\u51fa\u529b\n        servicemanager.LogMsg(\n            servicemanager.EVENTLOG_INFORMATION_TYPE,\n            servicemanager.PYS_SERVICE_STARTED,\n            (self._svc_name_, 'test')\n        )\n        self.consuming_and_notificate()\n\n    def consuming_and_notificate(self):\n        self.logger.debug('consuming and notificate starting...')\n\n        # RabbitMQ\u306e\u63a5\u7d9a\u8a2d\u5b9a\n        self.connection = pika.BlockingConnection(\n            pika.ConnectionParameters(host=MQ_IP)\n        )\n        self.channel = self.connection.channel()\n\n        # \u30ad\u30e5\u30fc\u304c\u7121\u3051\u308c\u3070\u4f5c\u6210\n        self.channel.queue_declare(\n            queue=MQ_QUEUE,\n            durable=True\n        )\n\n        # \u30ad\u30e5\u30fc\u304b\u3089\u53d6\u5f97\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092generator\u3067\u56de\u3059\u3002\n        self.logger.info('start consuming message.')\n        for msg in self.channel.consume(queue=MQ_QUEUE, no_ack=True):\n            message_body = msg[2]\n            self.logger.debug(message_body)\n            self.notifier.notify(noteType=GROW_NOTE_TYPE,\n                                 title=GROW_TITLE,\n                                 description=message_body)\n\n    def SvcStop(self):\n        # service stop\n        self.logger.info('service stopping...')\n\n        # \u4e0a\u4f4d\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\n        self.ReportServiceStatus(\n            win32service.SERVICE_STOP_PENDING)\n        win32event.SetEvent(self.stop_event)\n\n        # MQ\u5207\u65ad\n        self.channel.close()\n        self.connection.close()\n        self.logger.info('service stopped.')\n\n\ndef main():\n    # \u5f15\u6570('start','stop','install' etc.)\u3092\u5143\u306b\u30b5\u30fc\u30d3\u30b9\u8d77\u52d5/\u767b\u9332/\u505c\u6b62/\u524a\u9664\u7b49\u3092\u5b9f\u884c\u3002\n    win32serviceutil.HandleCommandLine(WinNotificationConsumer)\n\nif __name__ == '__main__':\n    main()\n```\n\n# <i class=\"fa fa-check-square-o\" style=\"font-size:1em;\"></i> Windows\u30b5\u30fc\u30d3\u30b9\u767b\u9332\n\u3053\u3093\u306a\u611f\u3058\u3067\u767b\u9332\uff06\u81ea\u52d5\u8d77\u52d5\u3067\u304d\u307e\u3059\u3002\n\n    C:\\\\Python27\\python.exe win_notification.py --auto install\n\n\n\n# <i class=\"fa fa-line-chart\" style=\"font-size:1em;\"></i> \u6240\u611f\n\u7d50\u69cb\u304b\u3093\u305f\u3093\u306b\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u51fa\u6765\u305f\uff08\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u306b\u95a2\u3057\u3066\u306fGrowl\u69d8\u3005\u611f\uff09\u3002RabbitMQ\u3092Windows\u30b5\u30fc\u30d3\u30b9\u304b\u3089\u63a5\u7d9a\u3057\u3063\u3071\u306a\u3057\u306b\u51fa\u6765\u305f\u306e\u3067\u3001\u30d1\u30bd\u30b3\u30f3\u3082\u97f3\u58f0\u64cd\u4f5c\u3067\u8272\u3005\u51fa\u6765\u308b\u6c17\u304c\u3057\u3066\u304d\u305f\u3002\n\u3042\u3068\u306f\u4ed6\u306ePython\u30a2\u30d7\u30ea\u306b\u3064\u3044\u3066\u3082\u4f55\u304b\u66f8\u304d\u305f\u3044\u306a\u2026\u65e2\u5b58\u30b3\u30fc\u30c9\u306f\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u306a\u304d\u3083\u898b\u305b\u3089\u308c\u305f\u3082\u3093\u3058\u3083\u306a\u3044\u3051\u3069\u3082\u2026\u3002\n"}