{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f\u3001CUDA & OpenCL Advent Calendar 2014\u306e10\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\n\n\u524d\u56de\u306e\u3042\u3089\u3059\u3058\nXeonPhi\u3067\u306eOpenCL\u306e\u51fa\u529b\u306b\u6210\u529f\u3057\u305f\u6211\u3005\u3002\n\u3055\u3066\u3001\u3067\u306f\u6b21\u306a\u308b\u8ab2\u984c\u3068\u3057\u3066\u3001OpenCL\u3092\u4f7f\u3046\u3068\u3001XeonPhi\u306e\u7279\u5fb4\u3068\u3082\u3044\u3048\u308b\u3001512bit SIMD\u547d\u4ee4\u306f\u51fa\u529b\u3067\u304d\u308b\u306e\u304b\u3001\u3068\u3044\u3046\u70b9\u306b\u7740\u76ee\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\n\nOpenCL \u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n\u6628\u65e5\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u8a18\u4e8b\u306e\u30cd\u30bf\u304c\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u3001\u3059\u3053\u3057\u5fc3\u82e6\u3057\u3044\u611f\u3058\u3082\u306a\u304d\u306b\u3057\u3082\u3042\u3089\u305a\u3067\u306f\u3042\u308b\u3051\u308c\u3069\u3002\nOpenCL\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30fc\u30c9\u3092\u3001OpenCL\u306e\u4e16\u754c\u3067\u306fOpenCL\u30ab\u30fc\u30cd\u30eb\u3068\u547c\u79f0\u3057\u307e\u3059\u3002\n\u30ab\u30fc\u30cd\u30eb\u306f\u30db\u30b9\u30c8\u304b\u3089\u547c\u3070\u308c\u308b\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u95a2\u6570\u3068\u3001\u305d\u308c\u304c\u547c\u3073\u51fa\u3059\u95a2\u6570\u7fa4\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u30ab\u30fc\u30cd\u30eb\u306b\u3064\u3044\u3066\u306f\u3001__kernel\u4fee\u98fe\u5b50\u3092\u982d\u306b\u3064\u3051\u308b\u3053\u3068\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3055\u3066\u3001\u3067\u306f\u3053\u306e\u30ab\u30fc\u30cd\u30eb\u3092OpenCL\u30c7\u30d0\u30a4\u30b9\u4e0a\u306e\u30d0\u30a4\u30ca\u30ea\u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u65b9\u6cd5\u306f\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u30aa\u30d5\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u4e8c\u3064\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\nOpenCL\u306f\u5c02\u7528\u306eAPI\u3068\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u53ef\u80fd\u3068\u3059\u308b\u3082\u306e\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\u6628\u65e5\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u8a18\u4e8b\u306f\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\u3001\u3044\u308f\u3086\u308bJIT\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u30ab\u30fc\u30cd\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306b\u4fdd\u6301\u3059\u308b\u304b\u3001\u3068\u3044\u3046\u554f\u984c\u306b\u3064\u3044\u3066\u306e\u4e00\u3064\u306e\u89e3\u3067\u3059\u3002\n\u5b9f\u884c\u6642\u306b\u30d3\u30eb\u30c9\u3059\u308b\u3068\u3044\u3046\u7279\u6027\u4e0a\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u4f9d\u3089\u306a\u3044\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u5b9f\u884c\u6642\u306b\u30d3\u30eb\u30c9\u3057\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u521d\u56de\u8d77\u52d5\u6642\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\n(\u4e00\u5fdc\u3001\u5404\u30d9\u30f3\u30c0\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3082\u306e\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u4ed5\u7d44\u307f\u3092\u7528\u610f\u306f\u3057\u3066\u307e\u3059\u304c)\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\n\u3075\u3064\u3046\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u69d8\u3001\u4e8b\u524d\u306b\u30d3\u30eb\u30c9\u3057\u3066\u30d0\u30a4\u30ca\u30ea\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\u60f3\u5b9a\u3059\u308b\u5404\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3001\u305f\u3068\u3048\u3070x86\u306eCPU\u3060\u3063\u305f\u308a\u3001\u3042\u308b\u3044\u306fIris pro\u3060\u3063\u305f\u308a\u3001\u306f\u305f\u307e\u305fNVIDIA\u306eGPU\u3060\u3063\u305f\u308a\u3001AMD\u306eGPU\u3060\u3063\u305f\u308a\u2026\u3068\u3001\u591a\u7a2e\u591a\u69d8\u306a\u74b0\u5883\u3092\u60f3\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u306f\u304b\u304b\u308b\u3053\u3068\u306a\u304f\u5b9f\u884c\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u3042\u3068\u3001\u6587\u5b57\u5217\u3068\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306b\u57cb\u3081\u8fbc\u3093\u3060\u308a\u3001.cl\u30d5\u30a1\u30a4\u30eb\u3067\u5916\u90e8\u306b\u7f6e\u3044\u305f\u308a\u3057\u306a\u3044\u305f\u3081\u3001\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u306e\u79d8\u533f\u6027\u304c\u9ad8\u307e\u308b\u3068\u3044\u3046\u5229\u70b9\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u30d9\u30af\u30c8\u30eb\u547d\u4ee4\u51fa\u3059\u7de8\n\u3053\u3053\u304b\u3089\u672c\u7de8\u3002\nXeonPhi\u306e\u30d9\u30af\u30c8\u30eb\u547d\u4ee4\u3001IMCI\u547d\u4ee4\u3067\u3059\u304c\u3001OpenCL\u306e\u8a00\u8a9e\u4ed5\u69d8\u7684\u306b\u306f\u3001\u305d\u3046\u3044\u3063\u305f\u30d9\u30af\u30c8\u30eb\u578b\u306f\u3069\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u3002\nOpenCL\u306e\u4e16\u754c\u3067\u306f\u3001__m128\u7b49\u306b\u4ee3\u8868\u3055\u308c\u308b\u30d9\u30af\u30c8\u30eb\u5909\u6570\u306f\u3001float4, float8...\u3068\u3044\u3063\u305f\u5f62\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u305d\u308c\u3089\u306e\u578b\u3092\u4f7f\u3063\u3066\u3042\u3052\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3088\u308d\u3057\u304f\u5224\u65ad\u3057\u3066\u304f\u308c\u3066\u3046\u308c\u3057\u3044\u3053\u3068\u306b\u306a\u308b\u2026\u2026\u306e\u3067\u306f\uff01\uff1f\n\u3055\u3066\u3001\u3053\u3053\u3067\u4e00\u3064\u554f\u984c\u304c\u3002\n\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u3069\u3046\u3084\u3063\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u898b\u308b\u306e\u3088\uff1f\n\u306a\u3093\u304b\u30e1\u30e2\u30ea\u3092\u5410\u3051\u3070\u78ba\u304b\u3067\u304d\u305f\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u305d\u3046\u3044\u3046\u9ed2\u9b54\u6cd5\u306f\u9ed2\u9b54\u9053\u58eb\u306b\u4efb\u305b\u3066\u3001\u307e\u3063\u3068\u3046\u306a\u65b9\u6cd5\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\nIntel\u3055\u3093\u306fKernel builder\u3068\u3044\u3046OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30aa\u30d5\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9(\u3068\u3044\u3046\u540d\u306e\u958b\u767a\u74b0\u5883\u3063\u307d\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3082\u3044\u308b)\u3092\u7528\u610f\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\u4f7f\u3046\u30ab\u30fc\u30cd\u30eb\u306f\u3053\u3061\u3089\nhttps://bitbucket.org/telmin/opencl_vec\n\u307e\u305a\u306f\u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u3092\u89b3\u307e\u3057\u3087\u3046\n$ ioc64\nsh: line 1:  2475 \u30a2\u30dc\u30fc\u30c8\u3057\u307e\u3057\u305f/opt/intel/ism/bin/intel64/intelremotedialog > /dev/null 2>&1\nNo input parameters\nusage: ioc64 [COMMAND] <ARGUMENT> [OPTIONS]\nKernel Builder for OpenCL API - compiler command line, version 1.5.0.92\nCopyright (C) 2014 Intel Corporation.  All rights reserved.\n\nCOMMAND:\n    -cmd=<command>                   - Command to be performed:\n                                      'build' create executable IR from source\n                                       code (default if none specified)\n                                      'compile' create compiled object IR from\n                                       source code\n                                      'link' create executable IR / library\n                                       from object IR and libraries\nARGUMENTS:\n    -input=<input_file_path>         - Build the OpenCL code given in\n                                       <input_file_path> (use with the 'build'\n                                       & 'compile' commands)\n    -binary=\"<binary_files_paths>\"   - Link binary files, comma seperated if\n                                       more than one (use with 'link' command)\n    -version                         - Show tool version\n    -help                            - Show available commands\nOPTIONS:\n    -device=<device_type>            - Set target device type:\n                                       'cpu' for Intel CPU device (default)\n                                       'gpu' for Intel(R) Graphics device\n                                       'co' for Intel(R) Xeon Phi(TM) coprocessor device\n    -targetos=<os>                   - Set target operating system if it is\n                                       different from current:\n                                       (supported in 32-bit version only)\n                                       'android' (use with 'cpu' device only)\n    -simd=<instruction_set_arch>     - Set target instruction set architecture\n                                       (use with 'cpu' device only):\n                                       'sse42' for Streaming SIMD Extension 4.2\n                                       'avx' for Advanced Vector Extensions\n                                       'avx2' for Advanced Vector Extensions 2\n    -output[=<output_file_path>]     - Write the build log to <output_file_path>\n    -asm[=<file_path>]               - Generate assembly code for Intel CPU\n                                       & Intel(R) Xeon Phi(TM) coprocessor\n    -llvm[=<file_path>]              - Generate llvm code\n    -llvm-spir32[=<file_path>]       - Generate llvm spir code (32-bit)\n    -llvm-spir64[=<file_path>]       - Generate llvm spir code (64-bit)\n    -ir[=<file_path>]                - Generate intermediate binary file\n    -spir32[=<file_path>]            - Generate SPIR (32-bit) binary file\n    -spir64[=<file_path>]            - Generate SPIR (64-bit) binary file\n    -bo[=\"<build_options>\"]          - Add build options\n\n\n\u591a\u5206\u3001input\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u3001device\u30aa\u30d7\u30b7\u30e7\u30f3\u306bco\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070XeonPhi\u5411\u3051\u306e\u30b3\u30fc\u30c9\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3068\u601d\u3046\u3093\u3067\u3059\u3088\n$ ioc64 -input=kernel.cl -device=co -asm=kernel.asm\nsh: line 1:  2520 \u30a2\u30dc\u30fc\u30c8\u3057\u307e\u3057\u305f/opt/intel/ism/bin/intel64/intelremotedialog > /dev/null 2>&1\nNo command specified, using 'build' as default\nOpenCL Intel(R) Xeon Phi(TM) Coprocessor device was found!\nDevice name: Intel(R) Many Integrated Core Acceleration Card\nDevice version: OpenCL 1.2 (Build 8)\nDevice vendor: Intel(R) Corporation\nDevice profile: FULL_PROFILE\nCompilation started\n/home/telmin/Source/opencl_vec/kernel.cl:20:7: warning: expression result unused\n/home/telmin/Source/opencl_vec/kernel.cl:44:7: warning: expression result unused\n/home/telmin/Source/opencl_vec/kernel.cl:68:7: warning: expression result unused\nCompilation done\nLinking started\nLinking done\nDevice build started\nDevice build done\nBuild started\nKernel <add_scalar> was successfully vectorized (16)\nKernel <add_vec> was successfully vectorized (16)\nKernel <mul_scalar> was successfully vectorized (16)\nKernel <mul_vec> was successfully vectorized (16)\nKernel <fma_scalar> was successfully vectorized (16)\nKernel <fma_vec> was successfully vectorized (16)\nKernel <gather_vec> was successfully vectorized (16)\nDone.\nBuild succeeded!\n\n\u3084\u3063\u305f\u30fc\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305f\u3088\u30fc\n\u2026\u306a\u3093\u304b\u30b9\u30b2\u30fc\u4e0d\u7a4f\u306a\u6587\u5b57\u304c\u898b\u3048\u307e\u3057\u305f\u304c\u3001\u307e\u3041\u3044\u3044\u3068\u3057\u3066\u3001\u4e00\u3064\u305a\u3064\u30ab\u30fc\u30cd\u30eb\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nadd\n__kernel void add_scalar(__global float* a, __global float* b, __global float* c, const unsigned int num)\n{\n  for(unsigned int i = 0; i < num; ++i) {\n    c[i] = a[i] + b[i];\n  }\n}\n\n__kernel void add_vec(__global float* a, __global float* b, __global float* c, const unsigned int num)\n{\n  unsigned int i;\n  __global float16* v_a = (__global float16*)a;\n  __global float16* v_b = (__global float16*)b;\n  __global float16* v_c = (__global float16*)c;\n\n  for(i = 0; i < num / 16; ++i) {\n    v_c[i] = v_a[i] + v_b[i];\n  }\n\n  i *= 16;\n  for(i; i < num; ++i) {\n    c[i] = a[i] + b[i];\n  }\n}\n\n\u3053\u3093\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001\u4f55\u304c\u51fa\u308b\u304b\u3063\u3066\u3044\u3046\u3068\n# mark_begin;\n# Threads 4\nadd_scalar:\n..B1.1:                         # Preds ..B1.0 Latency 9\n        movq      %rsi, %rdi                                    # c1\n        movq      %rax, %r8                                     # c1\n        vbroadcastss (%rdi), %zmm0{%k1}                         # c5\n        movq      %rdx, %r9                                     # c5\n        vaddps    (%r8){1to16}, %zmm0, %zmm1{%k1}               # c9\n        lea       4(%rdi), %rsi                                 # c9\n        lea       4(%r8), %rax                                  # c13\n        lea       4(%r9), %rdx                                  # c13\n        vpackstorelps %zmm1, (%r9){%k1}                         # c17\n        decl      %ecx                                          # c17\n        jne       ..B1.3        # Prob 0%                       # c21\n# mark_end;\n\n# mark_begin;\n# Threads 4\nadd_vec:\n..CL4:\n..B2.3:                         # Preds ..B2.1 ..B2.3 Latency 29\n        movq      %r9, %r10                                     # c1\n        incl      %edi                                          # c1\n        vmovaps   (%r10,%rax), %zmm0                            # c5\n        vprefetch0 64(%r10,%rax)                                # c5\n        vaddps    (%r10,%rdx), %zmm0, %zmm1                     # c9\n        vprefetch1 320(%r10,%rax)                               # c9\n        vprefetch0 64(%r10,%rdx)                                # c13\n        lea       64(%r10), %r9                                 # c13\n        vprefetch1 320(%r10,%rdx)                               # c17\n        cmpl      %r8d, %edi                                    # c17\n        vprefetche0 64(%r10,%rcx)                               # c21\n        movb      %al, %al                                      # c21\n        vprefetche1 320(%r10,%rcx)                              # c25\n        movb      %al, %al                                      # c25\n        vmovdqa32 %zmm1, (%r10,%rcx)                            # c29\n        jb        ..B2.3        # Prob 0%                       # c29\n                                # LOE rax rdx rcx rbx rbp r9 r12 r13 r14 r15 esi edi r8d\n...\n..B2.9:                         # Preds ..B2.9 ..B2.8 Latency 21\n        movq      %rax, %rcx                                    # c1\n        movq      %r8, %rdi                                     # c1\n        vbroadcastss (%rcx), %zmm0{%k1}                         # c5\n        movq      %rdx, %r9                                     # c5\n        vaddps    (%rdi){1to16}, %zmm0, %zmm1{%k1}              # c9\n        lea       4(%rcx), %rax                                 # c9\n        lea       4(%rdi), %r8                                  # c13\n        lea       4(%r9), %rdx                                  # c13\n        vpackstorelps %zmm1, (%r9){%k1}                         # c17\n        decl      %esi                                          # c17\n        jne       ..B2.9        # Prob 0%                       # c21\n                                # LOE rax rdx rbx rbp r8 r12 r13 r14 r15 esi k1\n..CL6:\n# mark_end;\n\nx86asm\u308f\u304b\u3089\u3093(\u9707\u3048\u58f0\n\u304b\u308d\u3046\u3058\u3066\u308f\u304b\u308b\u306e\u306f\u3001\u3069\u3063\u3061\u3082vaddps\u304c\u51fa\u3066\u3044\u308b\u3063\u3066\u3053\u3068\u3067\u3059\u306d\u3002\n\u3057\u3070\u3089\u304f\u773a\u3081\u3066\u307f\u305f\u3051\u3069%r10\u304c\u4f55\u3057\u305f\u3044\u306e\u304b\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u3093\u2026\u304a\u524d\u4f55\u3082\u306e\u3060\u3088\u2026\n\nfma\n\u3055\u3066\u3001XeonPhi\u306e\u6f14\u7b97\u80fd\u529b\u3092\u652f\u3048\u308b\u57fa\u790e\u7684\u306a\u3082\u306e\u306e\u4e00\u3064\u3068\u3057\u3066\u3001fma\u306e\u5b58\u5728\u304c\u3042\u3052\u3089\u308c\u307e\u3059\n\u3053\u306efma\u306f\u306f\u305f\u3057\u3066\u51fa\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n__kernel void fma_scalar(__global float* a, __global float* b, __global float* c, const unsigned int num)\n{\n  for(unsigned int i = 0; i < num; ++i) {\n    c[i] = a[i] * b[i] + c[i];\n  }\n}\n\n__kernel void fma_vec(__global float* a, __global float* b, __global float* c, const unsigned int num)\n{\n  unsigned int i;\n  __global float16* v_a = (__global float16*)a;\n  __global float16* v_b = (__global float16*)b;\n  __global float16* v_c = (__global float16*)c;\n\n  for(i = 0; i < num / 16; ++i) {\n    v_c[i] = v_a[i] * v_b[i] + v_c[i];\n  }\n\n  i *= 16;\n  for(i; i < num; ++i) {\n    c[i] = a[i] * b[i] + c[i];\n  }\n}\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\n# mark_begin;\n# Threads 4\nfma_scalar:\n..CL18:\n..B5.3:                         # Preds ..B5.3 ..B5.2 Latency 21\n        movq      %rsi, %rdi                                    # c1\n        movq      %rax, %r8                                     # c1\n        vbroadcastss (%rdi), %zmm1{%k1}                         # c5\n        movq      %rdx, %r9                                     # c5\n        vbroadcastss (%r8), %zmm0{%k1}                          # c9\n        lea       4(%rdi), %rsi                                 # c9\n        vfmadd213ps (%r9){1to16}, %zmm0, %zmm1{%k1}             # c13\n        lea       4(%r8), %rax                                  # c13\n        lea       4(%r9), %rdx                                  # c17\n        decl      %ecx                                          # c17\n        vpackstorelps %zmm1, (%r9){%k1}                         # c21\n        jne       ..B5.3        # Prob 0%                       # c21\n                                # LOE rax rdx rbx rbp rsi r12 r13 r14 r15 ecx k1\n# mark_end;\n\n# mark_begin;\n# Threads 4\n        .align    16,0x90\n        .globl fma_vec\nfma_vec:\n..CL20:\n..B6.3:                         # Preds ..B6.1 ..B6.3 Latency 29\n        movq      %r9, %r10                                     # c1\n        incl      %edi                                          # c1\n        vmovaps   (%r10,%rax), %zmm1                            # c5\n        vprefetch0 64(%r10,%rax)                                # c5\n        vmovaps   (%r10,%rdx), %zmm0                            # c9\n        vprefetch1 320(%r10,%rax)                               # c9\n        vfmadd213ps (%r10,%rcx), %zmm0, %zmm1                   # c13\n        vprefetch0 64(%r10,%rdx)                                # c13\n        vprefetch1 320(%r10,%rdx)                               # c17\n        lea       64(%r10), %r9                                 # c17\n        vprefetch0 64(%r10,%rcx)                                # c21\n        cmpl      %r8d, %edi                                    # c21\n        vprefetch1 320(%r10,%rcx)                               # c25\n        movb      %al, %al                                      # c25\n        vmovdqa32 %zmm1, (%r10,%rcx)                            # c29\n        jb        ..B6.3        # Prob 0%                       # c29\n                                # LOE rax rdx rcx rbx rbp r9 r12 r13 r14 r15 esi edi r8d\n\n# mark_end;\n\n\u304a\u3049\u3001\u306a\u3093\u304b\u3084\u3063\u3071\u51fa\u3066\u308b\u3063\u307d\u3044\u3002\n\u305d\u3057\u3066\u3084\u3063\u3071\u308ax86asm\u308f\u304b\u3089\u3093\u2026\n\ngather\nXeonPhi\u3068\u3044\u3048\u3070Gather\uff01\nHaswell\u3067\u306f\u6b21\u56de\u4f5c\u306b\u3054\u671f\u5f85\u304f\u3060\u3055\u3044\u3068\u304b\u8a00\u308f\u308c\u3061\u3083\u3063\u3066\u308bGather\uff01\uff01\uff01\n\u3042\u308b\u3068\u3059\u3063\u3054\u3044\u4fbf\u5229\u306a\u3093\u3060\u3051\u3069\u901f\u304f\u306a\u304f\u3066\u3044\u3064\u3082\u304b\u306a\u3057\u304f\u306a\u308bGather\uff01\uff01\n\u3053\u308c\u3001OpenCL\u3060\u3068\u3069\u3046\u3084\u3063\u3066\u66f8\u3051\u3070\u3044\u3044\u3093\u3060\u308d\u3046\u2026\n\u82e6\u8089\u306e\u7b56\u304c\u4ee5\u4e0b\n__kernel void gather_vec(__global float* a, __global float* b)\n{\n  unsigned int index[16] = {15, 14, 13, 12, 11, 10, 9, 8,\n                            7,  6,  5,  4, 3, 2, 1, 0};\n\n  float16 vec;\n  vec.s0 = a[index[0]];\n  vec.s1 = a[index[1]];\n  vec.s2 = a[index[2]];\n  vec.s3 = a[index[3]];\n  vec.s4 = a[index[4]];\n  vec.s5 = a[index[5]];\n  vec.s6 = a[index[6]];\n  vec.s7 = a[index[7]];\n  vec.s8 = a[index[8]];\n  vec.s9 = a[index[9]];\n  vec.sa = a[index[10]];\n  vec.sb = a[index[11]];\n  vec.sc = a[index[12]];\n  vec.sd = a[index[13]];\n  vec.se = a[index[14]];\n  vec.sf = a[index[15]];\n\n  __global float16* v_b = (__global float16*)b;\n  *v_b = vec;\n}\n\n\u3067\u3001\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\n# mark_begin;\n# Threads 4\n        .align    16,0x90\n        .globl gather_vec\ngather_vec:\n..B7.1:                         # Preds ..B7.0 Latency 137\n        pushq     %rbp                                          #\n        movq      %rsp, %rbp                                    #\n        andq      $-64, %rsp                                    #\n        pushq     %r12                                          # c1\n        pushq     %r13                                          # c5\n        pushq     %r14                                          # c9\n        pushq     %r15                                          # c13\n        pushq     %rbx                                          # c17\n        movq      (%rdi), %r15                                  # c21\n        movl      (%r15), %edx                                  # c25\n        movl      32(%r15), %r8d                                # c25\n        movl      4(%r15), %ecx                                 # c29\n        movl      %edx, -16(%rsp)                               # c29\n        movl      %ecx, -8(%rsp)                                # c33\n        movq      8(%rdi), %rax                                 # c33\n        movl      40(%r15), %esi                                # c37\n        movq      %rax, -24(%rsp)                               # c37\n        movl      %esi, -68(%rsp)                               # c41\n        movl      %r8d, -60(%rsp)                               # c41\n        movl      8(%r15), %r14d                                # c45\n        movl      16(%r15), %r12d                               # c45\n        movl      12(%r15), %r13d                               # c49\n        movl      20(%r15), %r11d                               # c49\n        movl      24(%r15), %r10d                               # c53\n        movl      36(%r15), %edi                                # c53\n        movl      28(%r15), %r9d                                # c57\n        movl      44(%r15), %ebx                                # c57\n...\n\n\n\u5ef6\u3005\u3068\u30b0\u30eb\u30b0\u30eb\u307e\u308f\u3057\u3066\u306f\u30bb\u30c3\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u304c\u51fa\u6765\u4e0a\u304c\u308a\u307e\u3057\u305f\u3068\u3055\n\u3046\u30fc\u3093\u3001OpenCL\u3067Gather\u3092\u5410\u304f\u30b3\u30fc\u30c9\u306f\u3044\u307e\u3060\u898b\u3064\u304b\u3089\u305a\u2026\n\n\u307e\u3068\u3081\n\u3055\u3066\u3001OpenCL\u3067\u30d9\u30af\u30c8\u30eb\u547d\u4ee4\u304c\u5410\u3051\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a3c\u3057\u3066\u307e\u3044\u308a\u307e\u3057\u305f\u304c\u3001\u7c21\u5358\u306a\u547d\u4ee4\u3067\u3042\u308c\u3070\u3042\u3063\u3055\u308a\u5410\u3044\u3066\u304f\u308c\u305d\u3046\u3067\u3059\u306d\uff01\n\u3066\u3044\u3046\u304b\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30ed\u30b0\u3092\u6ce8\u8996\u3059\u308b\u3068\u3067\u3059\u306d\nKernel <add_scalar> was successfully vectorized (16)\nKernel <add_vec> was successfully vectorized (16)\nKernel <mul_scalar> was successfully vectorized (16)\nKernel <mul_vec> was successfully vectorized (16)\nKernel <fma_scalar> was successfully vectorized (16)\nKernel <fma_vec> was successfully vectorized (16)\nKernel <gather_vec> was successfully vectorized (16)\n\n\u3068\u304b\u8a00\u3063\u3066\u304f\u308c\u3061\u3083\u3063\u3066\u3066\u3001\u81ea\u52d5\u30d9\u30af\u30c8\u30eb\u5316\u304c\u3081\u3063\u3061\u3083\u50cd\u3044\u3066\u3044\u308b\u611f\u3058\u304c\u3059\u308b\u308f\u3051\u3067\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u81ea\u52d5\u30d9\u30af\u30c8\u30eb\u5316\u3057\u305f\u30b9\u30ab\u30e9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u308b\u3068\u3001\u30d7\u30ea\u30d5\u30a7\u30c3\u30c1\u547d\u4ee4\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u307f\u3048\u307e\u3059\u3002\nXeonPhi\u306f\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u306e\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u672c\u5f53\u306b\u5927\u304d\u3044\u305f\u3081\u3001\u3069\u3046\u306b\u304b\u3057\u3066\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5f15\u3063\u5f35\u3063\u3066\u304f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002ICC\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u3001\u672c\u5f53\u306b\u30d9\u30af\u30c8\u30eb\u30ed\u30fc\u30c9\u3092\u3059\u308b\u305f\u3073\u306b\u30d7\u30ea\u30d5\u30a7\u30c3\u30c1\u547d\u4ee4\u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u3044\u3046\u4e8b\u614b\u306b\u906d\u9047\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u5b9f\u969b\u554f\u984c\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30a2\u30af\u30bb\u30b9\u3092\u610f\u8b58\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3060\u3051\u3067\u901f\u5ea6\u304c\u30ac\u30e9\u30c3\u3068\u5909\u308f\u308b\u306e\u306f\u3088\u304f\u3042\u308b\u8a71\u3067\u3059\u3002\n\u305d\u3093\u306a\u308f\u3051\u3067\u3001\u3084\u3063\u3071\u308a\u3061\u3083\u3093\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u512a\u3057\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306b\u3082\u3001float16\u3092\u591a\u7528\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u304cXeonPhi\u3068\u4ef2\u826f\u304f\u306a\u308b\u7b2c\u4e00\u6b69\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff01\n\u3055\u3066\u3001\u3058\u3083\u3042\u305d\u3093\u306aXeonPhi\u306eOpenCL\u6027\u80fd\u306f\uff1f \u3068\u3044\u3046\u306e\u306f\u3001\u307e\u3066\u6b21\u56de\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n\u660e\u65e5\u306f@uchihashi_k\u3055\u3093\u3067\u3059\uff01\n\u3053\u306e\u8a18\u4e8b\u306f\u3001CUDA & OpenCL Advent Calendar 2014\u306e10\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\n\n## \u524d\u56de\u306e\u3042\u3089\u3059\u3058\nXeonPhi\u3067\u306eOpenCL\u306e\u51fa\u529b\u306b\u6210\u529f\u3057\u305f\u6211\u3005\u3002\n\u3055\u3066\u3001\u3067\u306f\u6b21\u306a\u308b\u8ab2\u984c\u3068\u3057\u3066\u3001OpenCL\u3092\u4f7f\u3046\u3068\u3001XeonPhi\u306e\u7279\u5fb4\u3068\u3082\u3044\u3048\u308b\u3001512bit SIMD\u547d\u4ee4\u306f\u51fa\u529b\u3067\u304d\u308b\u306e\u304b\u3001\u3068\u3044\u3046\u70b9\u306b\u7740\u76ee\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\n\n## OpenCL \u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n\u6628\u65e5\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u8a18\u4e8b\u306e\u30cd\u30bf\u304c\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u3001\u3059\u3053\u3057\u5fc3\u82e6\u3057\u3044\u611f\u3058\u3082\u306a\u304d\u306b\u3057\u3082\u3042\u3089\u305a\u3067\u306f\u3042\u308b\u3051\u308c\u3069\u3002\nOpenCL\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30fc\u30c9\u3092\u3001OpenCL\u306e\u4e16\u754c\u3067\u306fOpenCL\u30ab\u30fc\u30cd\u30eb\u3068\u547c\u79f0\u3057\u307e\u3059\u3002\n\u30ab\u30fc\u30cd\u30eb\u306f\u30db\u30b9\u30c8\u304b\u3089\u547c\u3070\u308c\u308b\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u95a2\u6570\u3068\u3001\u305d\u308c\u304c\u547c\u3073\u51fa\u3059\u95a2\u6570\u7fa4\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u30ab\u30fc\u30cd\u30eb\u306b\u3064\u3044\u3066\u306f\u3001__kernel\u4fee\u98fe\u5b50\u3092\u982d\u306b\u3064\u3051\u308b\u3053\u3068\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u3067\u306f\u3053\u306e\u30ab\u30fc\u30cd\u30eb\u3092OpenCL\u30c7\u30d0\u30a4\u30b9\u4e0a\u306e\u30d0\u30a4\u30ca\u30ea\u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u65b9\u6cd5\u306f\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u30aa\u30d5\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u4e8c\u3064\u304c\u3042\u308a\u307e\u3059\u3002\n\n### \u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\nOpenCL\u306f\u5c02\u7528\u306eAPI\u3068\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u53ef\u80fd\u3068\u3059\u308b\u3082\u306e\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\u6628\u65e5\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u8a18\u4e8b\u306f\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\u3001\u3044\u308f\u3086\u308bJIT\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u30ab\u30fc\u30cd\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306b\u4fdd\u6301\u3059\u308b\u304b\u3001\u3068\u3044\u3046\u554f\u984c\u306b\u3064\u3044\u3066\u306e\u4e00\u3064\u306e\u89e3\u3067\u3059\u3002\n\u5b9f\u884c\u6642\u306b\u30d3\u30eb\u30c9\u3059\u308b\u3068\u3044\u3046\u7279\u6027\u4e0a\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u4f9d\u3089\u306a\u3044\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u5b9f\u884c\u6642\u306b\u30d3\u30eb\u30c9\u3057\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u521d\u56de\u8d77\u52d5\u6642\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\n(\u4e00\u5fdc\u3001\u5404\u30d9\u30f3\u30c0\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3082\u306e\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u4ed5\u7d44\u307f\u3092\u7528\u610f\u306f\u3057\u3066\u307e\u3059\u304c)\n\n### \u30aa\u30d5\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\n\u3075\u3064\u3046\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u69d8\u3001\u4e8b\u524d\u306b\u30d3\u30eb\u30c9\u3057\u3066\u30d0\u30a4\u30ca\u30ea\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\u60f3\u5b9a\u3059\u308b\u5404\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3001\u305f\u3068\u3048\u3070x86\u306eCPU\u3060\u3063\u305f\u308a\u3001\u3042\u308b\u3044\u306fIris pro\u3060\u3063\u305f\u308a\u3001\u306f\u305f\u307e\u305fNVIDIA\u306eGPU\u3060\u3063\u305f\u308a\u3001AMD\u306eGPU\u3060\u3063\u305f\u308a\u2026\u3068\u3001\u591a\u7a2e\u591a\u69d8\u306a\u74b0\u5883\u3092\u60f3\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u306f\u304b\u304b\u308b\u3053\u3068\u306a\u304f\u5b9f\u884c\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u3042\u3068\u3001\u6587\u5b57\u5217\u3068\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306b\u57cb\u3081\u8fbc\u3093\u3060\u308a\u3001.cl\u30d5\u30a1\u30a4\u30eb\u3067\u5916\u90e8\u306b\u7f6e\u3044\u305f\u308a\u3057\u306a\u3044\u305f\u3081\u3001\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u306e\u79d8\u533f\u6027\u304c\u9ad8\u307e\u308b\u3068\u3044\u3046\u5229\u70b9\u3082\u3042\u308a\u307e\u3059\u3002\n\n## \u30d9\u30af\u30c8\u30eb\u547d\u4ee4\u51fa\u3059\u7de8\n\u3053\u3053\u304b\u3089\u672c\u7de8\u3002\nXeonPhi\u306e\u30d9\u30af\u30c8\u30eb\u547d\u4ee4\u3001IMCI\u547d\u4ee4\u3067\u3059\u304c\u3001OpenCL\u306e\u8a00\u8a9e\u4ed5\u69d8\u7684\u306b\u306f\u3001\u305d\u3046\u3044\u3063\u305f\u30d9\u30af\u30c8\u30eb\u578b\u306f\u3069\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u3002\nOpenCL\u306e\u4e16\u754c\u3067\u306f\u3001__m128\u7b49\u306b\u4ee3\u8868\u3055\u308c\u308b\u30d9\u30af\u30c8\u30eb\u5909\u6570\u306f\u3001float4, float8...\u3068\u3044\u3063\u305f\u5f62\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u305d\u308c\u3089\u306e\u578b\u3092\u4f7f\u3063\u3066\u3042\u3052\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3088\u308d\u3057\u304f\u5224\u65ad\u3057\u3066\u304f\u308c\u3066\u3046\u308c\u3057\u3044\u3053\u3068\u306b\u306a\u308b\u2026\u2026\u306e\u3067\u306f\uff01\uff1f\n\n\u3055\u3066\u3001\u3053\u3053\u3067\u4e00\u3064\u554f\u984c\u304c\u3002\n\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u3069\u3046\u3084\u3063\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u898b\u308b\u306e\u3088\uff1f\n\u306a\u3093\u304b\u30e1\u30e2\u30ea\u3092\u5410\u3051\u3070\u78ba\u304b\u3067\u304d\u305f\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u305d\u3046\u3044\u3046\u9ed2\u9b54\u6cd5\u306f\u9ed2\u9b54\u9053\u58eb\u306b\u4efb\u305b\u3066\u3001\u307e\u3063\u3068\u3046\u306a\u65b9\u6cd5\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nIntel\u3055\u3093\u306fKernel builder\u3068\u3044\u3046OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30aa\u30d5\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9(\u3068\u3044\u3046\u540d\u306e\u958b\u767a\u74b0\u5883\u3063\u307d\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3082\u3044\u308b)\u3092\u7528\u610f\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\u4f7f\u3046\u30ab\u30fc\u30cd\u30eb\u306f\u3053\u3061\u3089\nhttps://bitbucket.org/telmin/opencl_vec\n\n\u307e\u305a\u306f\u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u3092\u89b3\u307e\u3057\u3087\u3046\n\n```\n$ ioc64\nsh: line 1:  2475 \u30a2\u30dc\u30fc\u30c8\u3057\u307e\u3057\u305f/opt/intel/ism/bin/intel64/intelremotedialog > /dev/null 2>&1\nNo input parameters\nusage: ioc64 [COMMAND] <ARGUMENT> [OPTIONS]\nKernel Builder for OpenCL API - compiler command line, version 1.5.0.92\nCopyright (C) 2014 Intel Corporation.  All rights reserved.\n\nCOMMAND:\n    -cmd=<command>                   - Command to be performed:\n                                      'build' create executable IR from source\n                                       code (default if none specified)\n                                      'compile' create compiled object IR from\n                                       source code\n                                      'link' create executable IR / library\n                                       from object IR and libraries\nARGUMENTS:\n    -input=<input_file_path>         - Build the OpenCL code given in\n                                       <input_file_path> (use with the 'build'\n                                       & 'compile' commands)\n    -binary=\"<binary_files_paths>\"   - Link binary files, comma seperated if\n                                       more than one (use with 'link' command)\n    -version                         - Show tool version\n    -help                            - Show available commands\nOPTIONS:\n    -device=<device_type>            - Set target device type:\n                                       'cpu' for Intel CPU device (default)\n                                       'gpu' for Intel(R) Graphics device\n                                       'co' for Intel(R) Xeon Phi(TM) coprocessor device\n    -targetos=<os>                   - Set target operating system if it is\n                                       different from current:\n                                       (supported in 32-bit version only)\n                                       'android' (use with 'cpu' device only)\n    -simd=<instruction_set_arch>     - Set target instruction set architecture\n                                       (use with 'cpu' device only):\n                                       'sse42' for Streaming SIMD Extension 4.2\n                                       'avx' for Advanced Vector Extensions\n                                       'avx2' for Advanced Vector Extensions 2\n    -output[=<output_file_path>]     - Write the build log to <output_file_path>\n    -asm[=<file_path>]               - Generate assembly code for Intel CPU\n                                       & Intel(R) Xeon Phi(TM) coprocessor\n    -llvm[=<file_path>]              - Generate llvm code\n    -llvm-spir32[=<file_path>]       - Generate llvm spir code (32-bit)\n    -llvm-spir64[=<file_path>]       - Generate llvm spir code (64-bit)\n    -ir[=<file_path>]                - Generate intermediate binary file\n    -spir32[=<file_path>]            - Generate SPIR (32-bit) binary file\n    -spir64[=<file_path>]            - Generate SPIR (64-bit) binary file\n    -bo[=\"<build_options>\"]          - Add build options\n\n```\n\n\u591a\u5206\u3001input\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u3001device\u30aa\u30d7\u30b7\u30e7\u30f3\u306bco\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070XeonPhi\u5411\u3051\u306e\u30b3\u30fc\u30c9\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3068\u601d\u3046\u3093\u3067\u3059\u3088\n\n```\n$ ioc64 -input=kernel.cl -device=co -asm=kernel.asm\nsh: line 1:  2520 \u30a2\u30dc\u30fc\u30c8\u3057\u307e\u3057\u305f/opt/intel/ism/bin/intel64/intelremotedialog > /dev/null 2>&1\nNo command specified, using 'build' as default\nOpenCL Intel(R) Xeon Phi(TM) Coprocessor device was found!\nDevice name: Intel(R) Many Integrated Core Acceleration Card\nDevice version: OpenCL 1.2 (Build 8)\nDevice vendor: Intel(R) Corporation\nDevice profile: FULL_PROFILE\nCompilation started\n/home/telmin/Source/opencl_vec/kernel.cl:20:7: warning: expression result unused\n/home/telmin/Source/opencl_vec/kernel.cl:44:7: warning: expression result unused\n/home/telmin/Source/opencl_vec/kernel.cl:68:7: warning: expression result unused\nCompilation done\nLinking started\nLinking done\nDevice build started\nDevice build done\nBuild started\nKernel <add_scalar> was successfully vectorized (16)\nKernel <add_vec> was successfully vectorized (16)\nKernel <mul_scalar> was successfully vectorized (16)\nKernel <mul_vec> was successfully vectorized (16)\nKernel <fma_scalar> was successfully vectorized (16)\nKernel <fma_vec> was successfully vectorized (16)\nKernel <gather_vec> was successfully vectorized (16)\nDone.\nBuild succeeded!\n```\n\n\u3084\u3063\u305f\u30fc\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305f\u3088\u30fc\n\u2026\u306a\u3093\u304b\u30b9\u30b2\u30fc\u4e0d\u7a4f\u306a\u6587\u5b57\u304c\u898b\u3048\u307e\u3057\u305f\u304c\u3001\u307e\u3041\u3044\u3044\u3068\u3057\u3066\u3001\u4e00\u3064\u305a\u3064\u30ab\u30fc\u30cd\u30eb\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n### add\n\n```cpp\n__kernel void add_scalar(__global float* a, __global float* b, __global float* c, const unsigned int num)\n{\n  for(unsigned int i = 0; i < num; ++i) {\n    c[i] = a[i] + b[i];\n  }\n}\n\n__kernel void add_vec(__global float* a, __global float* b, __global float* c, const unsigned int num)\n{\n  unsigned int i;\n  __global float16* v_a = (__global float16*)a;\n  __global float16* v_b = (__global float16*)b;\n  __global float16* v_c = (__global float16*)c;\n\n  for(i = 0; i < num / 16; ++i) {\n    v_c[i] = v_a[i] + v_b[i];\n  }\n\n  i *= 16;\n  for(i; i < num; ++i) {\n    c[i] = a[i] + b[i];\n  }\n}\n```\n\n\u3053\u3093\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001\u4f55\u304c\u51fa\u308b\u304b\u3063\u3066\u3044\u3046\u3068\n\n```\n# mark_begin;\n# Threads 4\nadd_scalar:\n..B1.1:                         # Preds ..B1.0 Latency 9\n        movq      %rsi, %rdi                                    # c1\n        movq      %rax, %r8                                     # c1\n        vbroadcastss (%rdi), %zmm0{%k1}                         # c5\n        movq      %rdx, %r9                                     # c5\n        vaddps    (%r8){1to16}, %zmm0, %zmm1{%k1}               # c9\n        lea       4(%rdi), %rsi                                 # c9\n        lea       4(%r8), %rax                                  # c13\n        lea       4(%r9), %rdx                                  # c13\n        vpackstorelps %zmm1, (%r9){%k1}                         # c17\n        decl      %ecx                                          # c17\n        jne       ..B1.3        # Prob 0%                       # c21\n# mark_end;\n\n# mark_begin;\n# Threads 4\nadd_vec:\n..CL4:\n..B2.3:                         # Preds ..B2.1 ..B2.3 Latency 29\n        movq      %r9, %r10                                     # c1\n        incl      %edi                                          # c1\n        vmovaps   (%r10,%rax), %zmm0                            # c5\n        vprefetch0 64(%r10,%rax)                                # c5\n        vaddps    (%r10,%rdx), %zmm0, %zmm1                     # c9\n        vprefetch1 320(%r10,%rax)                               # c9\n        vprefetch0 64(%r10,%rdx)                                # c13\n        lea       64(%r10), %r9                                 # c13\n        vprefetch1 320(%r10,%rdx)                               # c17\n        cmpl      %r8d, %edi                                    # c17\n        vprefetche0 64(%r10,%rcx)                               # c21\n        movb      %al, %al                                      # c21\n        vprefetche1 320(%r10,%rcx)                              # c25\n        movb      %al, %al                                      # c25\n        vmovdqa32 %zmm1, (%r10,%rcx)                            # c29\n        jb        ..B2.3        # Prob 0%                       # c29\n                                # LOE rax rdx rcx rbx rbp r9 r12 r13 r14 r15 esi edi r8d\n...\n..B2.9:                         # Preds ..B2.9 ..B2.8 Latency 21\n        movq      %rax, %rcx                                    # c1\n        movq      %r8, %rdi                                     # c1\n        vbroadcastss (%rcx), %zmm0{%k1}                         # c5\n        movq      %rdx, %r9                                     # c5\n        vaddps    (%rdi){1to16}, %zmm0, %zmm1{%k1}              # c9\n        lea       4(%rcx), %rax                                 # c9\n        lea       4(%rdi), %r8                                  # c13\n        lea       4(%r9), %rdx                                  # c13\n        vpackstorelps %zmm1, (%r9){%k1}                         # c17\n        decl      %esi                                          # c17\n        jne       ..B2.9        # Prob 0%                       # c21\n                                # LOE rax rdx rbx rbp r8 r12 r13 r14 r15 esi k1\n..CL6:\n# mark_end;\n```\n\nx86asm\u308f\u304b\u3089\u3093(\u9707\u3048\u58f0\n\u304b\u308d\u3046\u3058\u3066\u308f\u304b\u308b\u306e\u306f\u3001\u3069\u3063\u3061\u3082vaddps\u304c\u51fa\u3066\u3044\u308b\u3063\u3066\u3053\u3068\u3067\u3059\u306d\u3002\n\u3057\u3070\u3089\u304f\u773a\u3081\u3066\u307f\u305f\u3051\u3069%r10\u304c\u4f55\u3057\u305f\u3044\u306e\u304b\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u3093\u2026\u304a\u524d\u4f55\u3082\u306e\u3060\u3088\u2026\n\n### fma\n\n\u3055\u3066\u3001XeonPhi\u306e\u6f14\u7b97\u80fd\u529b\u3092\u652f\u3048\u308b\u57fa\u790e\u7684\u306a\u3082\u306e\u306e\u4e00\u3064\u3068\u3057\u3066\u3001fma\u306e\u5b58\u5728\u304c\u3042\u3052\u3089\u308c\u307e\u3059\n\u3053\u306efma\u306f\u306f\u305f\u3057\u3066\u51fa\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\n```cpp\n__kernel void fma_scalar(__global float* a, __global float* b, __global float* c, const unsigned int num)\n{\n  for(unsigned int i = 0; i < num; ++i) {\n    c[i] = a[i] * b[i] + c[i];\n  }\n}\n\n__kernel void fma_vec(__global float* a, __global float* b, __global float* c, const unsigned int num)\n{\n  unsigned int i;\n  __global float16* v_a = (__global float16*)a;\n  __global float16* v_b = (__global float16*)b;\n  __global float16* v_c = (__global float16*)c;\n\n  for(i = 0; i < num / 16; ++i) {\n    v_c[i] = v_a[i] * v_b[i] + v_c[i];\n  }\n\n  i *= 16;\n  for(i; i < num; ++i) {\n    c[i] = a[i] * b[i] + c[i];\n  }\n}\n```\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\n\n```\n# mark_begin;\n# Threads 4\nfma_scalar:\n..CL18:\n..B5.3:                         # Preds ..B5.3 ..B5.2 Latency 21\n        movq      %rsi, %rdi                                    # c1\n        movq      %rax, %r8                                     # c1\n        vbroadcastss (%rdi), %zmm1{%k1}                         # c5\n        movq      %rdx, %r9                                     # c5\n        vbroadcastss (%r8), %zmm0{%k1}                          # c9\n        lea       4(%rdi), %rsi                                 # c9\n        vfmadd213ps (%r9){1to16}, %zmm0, %zmm1{%k1}             # c13\n        lea       4(%r8), %rax                                  # c13\n        lea       4(%r9), %rdx                                  # c17\n        decl      %ecx                                          # c17\n        vpackstorelps %zmm1, (%r9){%k1}                         # c21\n        jne       ..B5.3        # Prob 0%                       # c21\n                                # LOE rax rdx rbx rbp rsi r12 r13 r14 r15 ecx k1\n# mark_end;\n\n# mark_begin;\n# Threads 4\n        .align    16,0x90\n        .globl fma_vec\nfma_vec:\n..CL20:\n..B6.3:                         # Preds ..B6.1 ..B6.3 Latency 29\n        movq      %r9, %r10                                     # c1\n        incl      %edi                                          # c1\n        vmovaps   (%r10,%rax), %zmm1                            # c5\n        vprefetch0 64(%r10,%rax)                                # c5\n        vmovaps   (%r10,%rdx), %zmm0                            # c9\n        vprefetch1 320(%r10,%rax)                               # c9\n        vfmadd213ps (%r10,%rcx), %zmm0, %zmm1                   # c13\n        vprefetch0 64(%r10,%rdx)                                # c13\n        vprefetch1 320(%r10,%rdx)                               # c17\n        lea       64(%r10), %r9                                 # c17\n        vprefetch0 64(%r10,%rcx)                                # c21\n        cmpl      %r8d, %edi                                    # c21\n        vprefetch1 320(%r10,%rcx)                               # c25\n        movb      %al, %al                                      # c25\n        vmovdqa32 %zmm1, (%r10,%rcx)                            # c29\n        jb        ..B6.3        # Prob 0%                       # c29\n                                # LOE rax rdx rcx rbx rbp r9 r12 r13 r14 r15 esi edi r8d\n\n# mark_end;\n```\n\n\u304a\u3049\u3001\u306a\u3093\u304b\u3084\u3063\u3071\u51fa\u3066\u308b\u3063\u307d\u3044\u3002\n\u305d\u3057\u3066\u3084\u3063\u3071\u308ax86asm\u308f\u304b\u3089\u3093\u2026\n\n\n### gather\nXeonPhi\u3068\u3044\u3048\u3070Gather\uff01\nHaswell\u3067\u306f\u6b21\u56de\u4f5c\u306b\u3054\u671f\u5f85\u304f\u3060\u3055\u3044\u3068\u304b\u8a00\u308f\u308c\u3061\u3083\u3063\u3066\u308bGather\uff01\uff01\uff01\n\u3042\u308b\u3068\u3059\u3063\u3054\u3044\u4fbf\u5229\u306a\u3093\u3060\u3051\u3069\u901f\u304f\u306a\u304f\u3066\u3044\u3064\u3082\u304b\u306a\u3057\u304f\u306a\u308bGather\uff01\uff01\n\u3053\u308c\u3001OpenCL\u3060\u3068\u3069\u3046\u3084\u3063\u3066\u66f8\u3051\u3070\u3044\u3044\u3093\u3060\u308d\u3046\u2026\n\u82e6\u8089\u306e\u7b56\u304c\u4ee5\u4e0b\n\n```cpp\n__kernel void gather_vec(__global float* a, __global float* b)\n{\n  unsigned int index[16] = {15, 14, 13, 12, 11, 10, 9, 8,\n                            7,  6,  5,  4, 3, 2, 1, 0};\n\n  float16 vec;\n  vec.s0 = a[index[0]];\n  vec.s1 = a[index[1]];\n  vec.s2 = a[index[2]];\n  vec.s3 = a[index[3]];\n  vec.s4 = a[index[4]];\n  vec.s5 = a[index[5]];\n  vec.s6 = a[index[6]];\n  vec.s7 = a[index[7]];\n  vec.s8 = a[index[8]];\n  vec.s9 = a[index[9]];\n  vec.sa = a[index[10]];\n  vec.sb = a[index[11]];\n  vec.sc = a[index[12]];\n  vec.sd = a[index[13]];\n  vec.se = a[index[14]];\n  vec.sf = a[index[15]];\n\n  __global float16* v_b = (__global float16*)b;\n  *v_b = vec;\n}\n```\n\n\u3067\u3001\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\n\n```\n# mark_begin;\n# Threads 4\n        .align    16,0x90\n        .globl gather_vec\ngather_vec:\n..B7.1:                         # Preds ..B7.0 Latency 137\n        pushq     %rbp                                          #\n        movq      %rsp, %rbp                                    #\n        andq      $-64, %rsp                                    #\n        pushq     %r12                                          # c1\n        pushq     %r13                                          # c5\n        pushq     %r14                                          # c9\n        pushq     %r15                                          # c13\n        pushq     %rbx                                          # c17\n        movq      (%rdi), %r15                                  # c21\n        movl      (%r15), %edx                                  # c25\n        movl      32(%r15), %r8d                                # c25\n        movl      4(%r15), %ecx                                 # c29\n        movl      %edx, -16(%rsp)                               # c29\n        movl      %ecx, -8(%rsp)                                # c33\n        movq      8(%rdi), %rax                                 # c33\n        movl      40(%r15), %esi                                # c37\n        movq      %rax, -24(%rsp)                               # c37\n        movl      %esi, -68(%rsp)                               # c41\n        movl      %r8d, -60(%rsp)                               # c41\n        movl      8(%r15), %r14d                                # c45\n        movl      16(%r15), %r12d                               # c45\n        movl      12(%r15), %r13d                               # c49\n        movl      20(%r15), %r11d                               # c49\n        movl      24(%r15), %r10d                               # c53\n        movl      36(%r15), %edi                                # c53\n        movl      28(%r15), %r9d                                # c57\n        movl      44(%r15), %ebx                                # c57\n...\n\n```\n\n\u5ef6\u3005\u3068\u30b0\u30eb\u30b0\u30eb\u307e\u308f\u3057\u3066\u306f\u30bb\u30c3\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u304c\u51fa\u6765\u4e0a\u304c\u308a\u307e\u3057\u305f\u3068\u3055\n\u3046\u30fc\u3093\u3001OpenCL\u3067Gather\u3092\u5410\u304f\u30b3\u30fc\u30c9\u306f\u3044\u307e\u3060\u898b\u3064\u304b\u3089\u305a\u2026\n\n## \u307e\u3068\u3081\n\u3055\u3066\u3001OpenCL\u3067\u30d9\u30af\u30c8\u30eb\u547d\u4ee4\u304c\u5410\u3051\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a3c\u3057\u3066\u307e\u3044\u308a\u307e\u3057\u305f\u304c\u3001\u7c21\u5358\u306a\u547d\u4ee4\u3067\u3042\u308c\u3070\u3042\u3063\u3055\u308a\u5410\u3044\u3066\u304f\u308c\u305d\u3046\u3067\u3059\u306d\uff01\n\u3066\u3044\u3046\u304b\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30ed\u30b0\u3092\u6ce8\u8996\u3059\u308b\u3068\u3067\u3059\u306d\n\n```\nKernel <add_scalar> was successfully vectorized (16)\nKernel <add_vec> was successfully vectorized (16)\nKernel <mul_scalar> was successfully vectorized (16)\nKernel <mul_vec> was successfully vectorized (16)\nKernel <fma_scalar> was successfully vectorized (16)\nKernel <fma_vec> was successfully vectorized (16)\nKernel <gather_vec> was successfully vectorized (16)\n```\n\n\u3068\u304b\u8a00\u3063\u3066\u304f\u308c\u3061\u3083\u3063\u3066\u3066\u3001\u81ea\u52d5\u30d9\u30af\u30c8\u30eb\u5316\u304c\u3081\u3063\u3061\u3083\u50cd\u3044\u3066\u3044\u308b\u611f\u3058\u304c\u3059\u308b\u308f\u3051\u3067\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u81ea\u52d5\u30d9\u30af\u30c8\u30eb\u5316\u3057\u305f\u30b9\u30ab\u30e9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u308b\u3068\u3001\u30d7\u30ea\u30d5\u30a7\u30c3\u30c1\u547d\u4ee4\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u307f\u3048\u307e\u3059\u3002\nXeonPhi\u306f\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u306e\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u672c\u5f53\u306b\u5927\u304d\u3044\u305f\u3081\u3001\u3069\u3046\u306b\u304b\u3057\u3066\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5f15\u3063\u5f35\u3063\u3066\u304f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002ICC\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u3001\u672c\u5f53\u306b\u30d9\u30af\u30c8\u30eb\u30ed\u30fc\u30c9\u3092\u3059\u308b\u305f\u3073\u306b\u30d7\u30ea\u30d5\u30a7\u30c3\u30c1\u547d\u4ee4\u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u3044\u3046\u4e8b\u614b\u306b\u906d\u9047\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u5b9f\u969b\u554f\u984c\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30a2\u30af\u30bb\u30b9\u3092\u610f\u8b58\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3060\u3051\u3067\u901f\u5ea6\u304c\u30ac\u30e9\u30c3\u3068\u5909\u308f\u308b\u306e\u306f\u3088\u304f\u3042\u308b\u8a71\u3067\u3059\u3002\n\u305d\u3093\u306a\u308f\u3051\u3067\u3001\u3084\u3063\u3071\u308a\u3061\u3083\u3093\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u512a\u3057\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306b\u3082\u3001float16\u3092\u591a\u7528\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u304cXeonPhi\u3068\u4ef2\u826f\u304f\u306a\u308b\u7b2c\u4e00\u6b69\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff01\n\n\u3055\u3066\u3001\u3058\u3083\u3042\u305d\u3093\u306aXeonPhi\u306eOpenCL\u6027\u80fd\u306f\uff1f \u3068\u3044\u3046\u306e\u306f\u3001\u307e\u3066\u6b21\u56de\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n\n\u660e\u65e5\u306f@uchihashi_k\u3055\u3093\u3067\u3059\uff01\n", "tags": ["OpenCL", "XeonPhi"]}