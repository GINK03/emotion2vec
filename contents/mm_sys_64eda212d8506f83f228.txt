{"context": "\n\n\u6982\u8981\nBoost\u306ePropertyTree\u306f\u4fbf\u5229\u3067\u3059\u304c\u3001\u65e5\u672c\u8a9e\u306e\u5165\u51fa\u529b\u306b\u306f\u5f31\u3044\u3089\u3057\u304f\u601d\u3063\u305f\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u306e\u3068\u3001\u307e\u305f\u3001Boost\u3092\u4f7f\u3046\u306a\u3089VisualStudio\u3068C++Builder\u3067\u5171\u901a\u306e\u30bd\u30fc\u30b9\u3067\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u4f5c\u6210\u81f4\u3057\u307e\u3057\u305f\u3002\n\nUTF-8\n\u30ed\u30b1\u30fc\u30eb\u3092\u4f7f\u3063\u305f\u308a\u3057\u3066\u3082\u4e0a\u624b\u304fUTF-8\u3067\u65e5\u672c\u8a9e\u3092\u6271\u3048\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3001\u5bfe\u5fdc\u7b56\u3068\u3057\u3066(std::wstring\u3092\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\u30b3\u30e1\u30f3\u30c8\u53c2\u7167)\u4e00\u65e6\u30e1\u30e2\u30ea\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3067\u5c55\u958b\u3057\u3066\u304b\u3089UTF-8\u306b\u5909\u63db\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3060\u308a\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u76f8\u4e92\u5909\u63db\u306b\u306f\u4e0b\u8a18URL\u306e\u95a2\u6570\u3092\u5229\u7528\u81f4\u3057\u307e\u3057\u305f\u3002\n\nhttp://sayahamitt.net/utf8\u306astring\u5165\u308c\u305f\u3089shiftjis\u306astring\u51fa\u3066\u304f\u308b\u95a2\u6570\u4f5c\u3063\u305f/\n\n\n\u6ce8\u610f\u70b9\n\u30fbBoost\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002Boost\u306e\u8a2d\u5b9a\u65b9\u6cd5\u7b49\u306f\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\u30fbC++Builder\u3067\u5229\u7528\u3059\u308b\u5834\u5408\u306fClang\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\uff08\u53e4\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u30a8\u30e9\u30fc\uff09\n\u30fb\u30b3\u30fc\u30c9\u4e2d\u306b\u8a18\u8f09\u304c\u3042\u308b\u304c\u3001VisualStudio\u4ee5\u5916\u306e\u5834\u5408\u3001#include \"stdafx.h\" \u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\uff08#ifdef _MSC_VER\u3067\u9664\u5916\u3057\u3088\u3046\u3068\u3057\u305f\u304c\u3001stdafx.h\u306f#ifdef\u51fa\u6765\u306a\u3044\uff09\n\u30fb\u66f8\u304d\u51fa\u3059\u969b\u306b\u6587\u5b57\u5217\u3092\u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u3080\u305f\u3081\u3001\u5927\u304d\u3059\u304e\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u6271\u3046\u5834\u5408\u306f\u8981\u6ce8\u610f\u3067\u3059\u3002\n\n\u5b9f\u88c5\n\n\u4f7f\u3044\u65b9\n\u4e0b\u8a18\u5185\u5bb9\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u53ca\u3073\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u4f5c\u6210\u3057\u3001include\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u4f7f\u7528\u4f8b\u306f\u4e0b\u90e8\u306b\u8a18\u8f09\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\n\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n\nboost_xml_model.h\n// ---------------------------------------------------------------------------\n#ifndef boost_xml_modelH\n#define boost_xml_modelH\n// ---------------------------------------------------------------------------\n// VC\u7528\n#ifdef _MSC_VER\n#include <windows.h>\n#endif\n// bcb\u7528\n#ifdef __BORLANDC__\n#include <System.Classes.hpp>\n#endif\n// ---------------------------------------------------------------------------\n#include <string>\n#include <locale>\n#include <boost/property_tree/ptree.hpp>\n#include <boost/property_tree/xml_parser.hpp>\n#include <boost/filesystem.hpp>\n#include <utility>\n#include <fstream>\n// ---------------------------------------------------------------------------\nclass BoostXmlModel {\nprotected:\n    enum Locale {\n        UTF8 = 0, SHIFT_JIS = 1\n    };\n\n    // Const\n    const std::string ROOT_PATH_STR;\n\n    // Var\n    std::string path_;\n    boost::property_tree::ptree pt_;\n    Locale locale_ = Locale::UTF8;\n\n    // Method\n    void Init();\n\npublic:\n    // Constructor\n    // VC\u7528\n#ifdef _MSC_VER\n    BoostXmlModel(const std::string &path);\n    std::string GetString(const std::string & title);\n#endif\n    // bcb\u7528\n#ifdef __BORLANDC__\n    __fastcall BoostXmlModel(const UnicodeString &path);\n    UnicodeString GetString(const std::string & title);\n#endif\n    // Method\n    bool Read(); // \u6b63\u5e38\u8aad\u307f\u8fbc\u307f\u3067true\n    bool Write(); // \u6b63\u5e38\u7d42\u4e86\u3067true\n    void SetPath(const std::string & path);\n    void AsUtf8();\n    void AsShiftJis();\n\n    // In\n    template<typename T>\n    void Set(const std::string &title, T value) {\n        pt_.put(ROOT_PATH_STR + title, std::to_string(value));\n    }\n\n    // Out\n    int GetInt(const std::string & title);\n    double GetDouble(const std::string & title);\n\n    // Utility\n    bool IsFileExists(const std::string & arg_path = \"\");\n    // \u53c2\u7167\n    // http://sayahamitt.net/utf8\u306astring\u5165\u308c\u305f\u3089shiftjis\u306astring\u51fa\u3066\u304f\u308b\u95a2\u6570\u4f5c\u3063\u305f/\n    std::string UTF8toSjis(const std::string & srcUTF8);\n    std::string SjistoUTF8(const std::string & srcSjis);\n\n};\n\ntemplate<>\ninline void BoostXmlModel::Set< const char *>(const std::string &title,\n    const char * value) {\n    std::string tmp = value;\n    pt_.put(ROOT_PATH_STR + title, tmp);\n}\n\ntemplate<>\ninline void BoostXmlModel::Set<std::string>(const std::string &title,\n    std::string value) {\n    pt_.put(ROOT_PATH_STR + title, value);\n}\n#ifdef __BORLANDC__\n\ntemplate<>\ninline void BoostXmlModel::Set<UnicodeString>(const std::string &title,\n    UnicodeString value) {\n    AnsiString tmp_astr = value;\n    pt_.put(ROOT_PATH_STR + title, tmp_astr.c_str());\n}\n#endif\n\n// ---------------------------------------------------------------------------\n#endif\n\n\n\n\n\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\nboost_xml_model.cpp\n// ---------------------------------------------------------------------------\n// VC\u7528\n#include \"stdafx.h\"// Visual Studio\u4ee5\u5916\u306e\u5834\u5408\u3001\u3053\u3053\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n#ifdef _MSC_VER\n#include \"BoostXmlModel.h\"\n#endif\n\n// bcb\u7528\n#ifdef __BORLANDC__\n#pragma package(smart_init)\n#pragma hdrstop\n#include \"boost_xml_model.h\"\n#endif\n\n// ---------------------------------------------------------------------------\n#ifdef _MSC_VER\n\nBoostXmlModel::BoostXmlModel(const std::string &path)\n    : path_(path), ROOT_PATH_STR(\"root.\") {\n    Init();\n}\n\nstd::string BoostXmlModel::GetString(const std::string & title) {\n    if (boost::optional<std::string>id =\n        pt_.get_optional<std::string>(ROOT_PATH_STR + title)) {\n        return id.get();\n    }\n    else {\n        return \"\";\n    }\n}\n#endif\n// bcb\u7528\n#ifdef __BORLANDC__\n\n__fastcall BoostXmlModel::BoostXmlModel(const UnicodeString &path)\n    : path_(static_cast<AnsiString>(path).c_str()), ROOT_PATH_STR(\"root.\") {\n    Init();\n}\n\nUnicodeString BoostXmlModel::GetString(const std::string & title) {\n    if (boost::optional<std::string>id =\n        pt_.get_optional<std::string>(ROOT_PATH_STR + title)) {\n        AnsiString tmp = id.get().c_str();\n        return tmp;\n    }\n    else {\n        return \"\";\n    }\n}\n#endif\n\nvoid BoostXmlModel::Init() {\n    if (IsFileExists(path_)) {\n        Read();\n    }\n}\n\nbool BoostXmlModel::IsFileExists(const std::string &arg_path) {\n    std::ifstream infile(arg_path.c_str());\n    return infile.good();\n}\n\nstd::string BoostXmlModel::UTF8toSjis(const std::string &srcUTF8) {\n    int lenghtUnicode = MultiByteToWideChar(CP_UTF8, 0, srcUTF8.c_str(),\n        srcUTF8.size() + 1, NULL, 0);\n    wchar_t* bufUnicode = new wchar_t[lenghtUnicode];\n    MultiByteToWideChar(CP_UTF8, 0, srcUTF8.c_str(), srcUTF8.size() + 1,\n        bufUnicode, lenghtUnicode);\n    int lengthSJis = WideCharToMultiByte(CP_THREAD_ACP, 0, bufUnicode, -1, NULL,\n        0, NULL, NULL);\n    char* bufShiftJis = new char[lengthSJis];\n    WideCharToMultiByte(CP_THREAD_ACP, 0, bufUnicode, lenghtUnicode + 1,\n        bufShiftJis, lengthSJis, NULL, NULL);\n    std::string strSJis(bufShiftJis);\n    delete bufUnicode;\n    delete bufShiftJis;\n    return strSJis;\n}\n\nstd::string BoostXmlModel::SjistoUTF8(const std::string &srcSjis) {\n    int lenghtUnicode = MultiByteToWideChar(CP_THREAD_ACP, 0, srcSjis.c_str(),\n        srcSjis.size() + 1, NULL, 0);\n    wchar_t* bufUnicode = new wchar_t[lenghtUnicode];\n    MultiByteToWideChar(CP_THREAD_ACP, 0, srcSjis.c_str(), srcSjis.size() + 1,\n        bufUnicode, lenghtUnicode);\n    int lengthUTF8 = WideCharToMultiByte(CP_UTF8, 0, bufUnicode, -1, NULL, 0,\n        NULL, NULL);\n    char* bufUTF8 = new char[lengthUTF8];\n    WideCharToMultiByte(CP_UTF8, 0, bufUnicode, lenghtUnicode + 1, bufUTF8,\n        lengthUTF8, NULL, NULL);\n    std::string strUTF8(bufUTF8);\n    delete bufUnicode;\n    delete bufUTF8;\n    return strUTF8;\n}\n\nbool BoostXmlModel::Write() {\n    std::stringstream tmp_stream;\n    using boost::property_tree::ptree;\n    using namespace boost::property_tree::xml_parser;\n    const int indent = 2;\n    write_xml(tmp_stream, pt_);\n    std::string tmp_sjis = tmp_stream.str(); // shiftJIS\n    std::ofstream tmp_o_stream(path_.c_str());\n    if (tmp_o_stream.is_open()) {\n        if (locale_ == Locale::UTF8) {\n            std::string tmp_utf = SjistoUTF8(tmp_sjis); // UTF8\n            tmp_o_stream << tmp_utf;\n        }\n        else if (locale_ == Locale::SHIFT_JIS) {\n            tmp_o_stream << tmp_sjis;\n        }\n        return true;\n    }\n    return false;\n}\n\nvoid BoostXmlModel::AsShiftJis() {\n    locale_ = Locale::SHIFT_JIS;\n}\n\nvoid BoostXmlModel::AsUtf8() {\n    locale_ = Locale::UTF8;\n}\n\nbool BoostXmlModel::Read() {\n    if (!IsFileExists(path_))\n        return false;\n    // https://boostjp.github.io/tips/xml.html\n    using namespace boost::property_tree;\n    std::ifstream inFile;\n    inFile.open(path_);\n    std::stringstream strStream;\n    if (locale_ == Locale::UTF8) {\n        std::string tmp_utf((std::istreambuf_iterator<char>(inFile)),\n            std::istreambuf_iterator<char>());\n        tmp_utf = UTF8toSjis(tmp_utf);\n        strStream << tmp_utf;\n    }\n    else if (locale_ == Locale::SHIFT_JIS) {\n        strStream << inFile.rdbuf();\n    }\n        read_xml(strStream, pt_);\n    return true;\n}\n\nint BoostXmlModel::GetInt(const std::string &title) {\n    if (boost::optional<int>id = pt_.get_optional<int>(ROOT_PATH_STR + title)) {\n        return id.get();\n    }\n    else {\n        return -1;\n    }\n}\n\ndouble BoostXmlModel::GetDouble(const std::string &title) {\n    if (boost::optional<double>id =\n        pt_.get_optional<double>(ROOT_PATH_STR + title)) {\n        return id.get();\n    }\n    else {\n        return -1;\n    }\n}\n\n\n\n\n\u4f7f\u7528\u4f8b\n\nVisual Studio\n\nmain.cpp\n//\u4f7f\u7528\u4f8b\u3000visual studio\n    BoostXmlModel * model = new BoostXmlModel(\"test.xml\");\n    model->Set(\"test1\", 1);\n    model->Set(\"test2.value\", \"\u30c6\u30b9\u30c82\");\n    std::string testa = \"\u30c6\u30b9\u30c83\";\n    model->Set(\"test3\", testa);\n  // model->AsUtf8(); //UTF-8\u7528\u306b\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8)\n    // model->AsShiftJis(); //Shift jis\u7528\u306b\u3059\u308b\u5834\u5408\n    if (model->Write()) {\n        // \u66f8\u304d\u8fbc\u307fOK\n    }\n    Sleep(1000); //\u5ff5\u306e\u305f\u3081\u66f8\u304d\u8fbc\u307f\u7d42\u4e86\u5f85\u3061\n    if (model->Read()) {\n        // \u8aad\u307f\u8fbc\u307fOK\n        std::cout << model->GetString(\"test3\").c_str();\n        Sleep(3000);\n    }\n    delete model;\n\n\n\n\nC++Builder\n\nmain.cpp\n//\u4f7f\u7528\u4f8b\u3000C++Builder\n    BoostXmlModel * model = new BoostXmlModel(\"test.xml\");\n    model->Set(\"test1\", 1);\n    model->Set(\"test2\", \"\u30c6\u30b9\u30c82\");\n    std::string testa = \"\u30c6\u30b9\u30c83\";\n    model->Set(\"test3\", testa);\n  // model->AsUtf8(); //UTF-8\u7528\u306b\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8)\n    // model->AsShiftJis(); //Shift jis\u7528\u306b\u3059\u308b\u5834\u5408\n    if (model->Write()) {\n        // \u66f8\u304d\u8fbc\u307fOK\n    }\n    Sleep(1000); //\u5ff5\u306e\u305f\u3081\u66f8\u304d\u8fbc\u307f\u7d42\u4e86\u5f85\u3061\n    if (model->Read()) {\n        // \u8aad\u307f\u8fbc\u307fOK\n        CodeSite->Send(model->GetString(\"test3\").c_str());\n    }\n    delete model;\n\n\n\n## \u6982\u8981\nBoost\u306ePropertyTree\u306f\u4fbf\u5229\u3067\u3059\u304c\u3001\u65e5\u672c\u8a9e\u306e\u5165\u51fa\u529b\u306b\u306f\u5f31\u3044\u3089\u3057\u304f\u601d\u3063\u305f\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u306e\u3068\u3001\u307e\u305f\u3001Boost\u3092\u4f7f\u3046\u306a\u3089VisualStudio\u3068C++Builder\u3067\u5171\u901a\u306e\u30bd\u30fc\u30b9\u3067\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u4f5c\u6210\u81f4\u3057\u307e\u3057\u305f\u3002\n\n## UTF-8\n~~\u30ed\u30b1\u30fc\u30eb\u3092\u4f7f\u3063\u305f\u308a\u3057\u3066\u3082\u4e0a\u624b\u304fUTF-8\u3067\u65e5\u672c\u8a9e\u3092\u6271\u3048\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3001\u5bfe\u5fdc\u7b56\u3068\u3057\u3066(std::wstring\u3092\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\u30b3\u30e1\u30f3\u30c8\u53c2\u7167)~~\u4e00\u65e6\u30e1\u30e2\u30ea\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3067\u5c55\u958b\u3057\u3066\u304b\u3089UTF-8\u306b\u5909\u63db\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3060\u308a\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u76f8\u4e92\u5909\u63db\u306b\u306f\u4e0b\u8a18URL\u306e\u95a2\u6570\u3092\u5229\u7528\u81f4\u3057\u307e\u3057\u305f\u3002\n\n> http://sayahamitt.net/utf8\u306astring\u5165\u308c\u305f\u3089shiftjis\u306astring\u51fa\u3066\u304f\u308b\u95a2\u6570\u4f5c\u3063\u305f/\n\n## \u6ce8\u610f\u70b9\n\u30fbBoost\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002Boost\u306e\u8a2d\u5b9a\u65b9\u6cd5\u7b49\u306f\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\u30fbC++Builder\u3067\u5229\u7528\u3059\u308b\u5834\u5408\u306fClang\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\uff08\u53e4\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u30a8\u30e9\u30fc\uff09\n\u30fb\u30b3\u30fc\u30c9\u4e2d\u306b\u8a18\u8f09\u304c\u3042\u308b\u304c\u3001VisualStudio\u4ee5\u5916\u306e\u5834\u5408\u3001#include \"stdafx.h\" \u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\uff08#ifdef _MSC_VER\u3067\u9664\u5916\u3057\u3088\u3046\u3068\u3057\u305f\u304c\u3001stdafx.h\u306f#ifdef\u51fa\u6765\u306a\u3044\uff09\n\u30fb\u66f8\u304d\u51fa\u3059\u969b\u306b\u6587\u5b57\u5217\u3092\u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u3080\u305f\u3081\u3001\u5927\u304d\u3059\u304e\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u6271\u3046\u5834\u5408\u306f\u8981\u6ce8\u610f\u3067\u3059\u3002\n\n## \u5b9f\u88c5\n\n### \u4f7f\u3044\u65b9\n\u4e0b\u8a18\u5185\u5bb9\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u53ca\u3073\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u4f5c\u6210\u3057\u3001include\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u4f7f\u7528\u4f8b\u306f\u4e0b\u90e8\u306b\u8a18\u8f09\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\n### \u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n\n```c++:boost_xml_model.h\n// ---------------------------------------------------------------------------\n#ifndef boost_xml_modelH\n#define boost_xml_modelH\n// ---------------------------------------------------------------------------\n// VC\u7528\n#ifdef _MSC_VER\n#include <windows.h>\n#endif\n// bcb\u7528\n#ifdef __BORLANDC__\n#include <System.Classes.hpp>\n#endif\n// ---------------------------------------------------------------------------\n#include <string>\n#include <locale>\n#include <boost/property_tree/ptree.hpp>\n#include <boost/property_tree/xml_parser.hpp>\n#include <boost/filesystem.hpp>\n#include <utility>\n#include <fstream>\n// ---------------------------------------------------------------------------\nclass BoostXmlModel {\nprotected:\n\tenum Locale {\n\t\tUTF8 = 0, SHIFT_JIS = 1\n\t};\n\n\t// Const\n\tconst std::string ROOT_PATH_STR;\n\n\t// Var\n\tstd::string path_;\n\tboost::property_tree::ptree pt_;\n\tLocale locale_ = Locale::UTF8;\n\n\t// Method\n\tvoid Init();\n\npublic:\n\t// Constructor\n\t// VC\u7528\n#ifdef _MSC_VER\n\tBoostXmlModel(const std::string &path);\n\tstd::string GetString(const std::string & title);\n#endif\n\t// bcb\u7528\n#ifdef __BORLANDC__\n\t__fastcall BoostXmlModel(const UnicodeString &path);\n\tUnicodeString GetString(const std::string & title);\n#endif\n\t// Method\n\tbool Read(); // \u6b63\u5e38\u8aad\u307f\u8fbc\u307f\u3067true\n\tbool Write(); // \u6b63\u5e38\u7d42\u4e86\u3067true\n\tvoid SetPath(const std::string & path);\n\tvoid AsUtf8();\n\tvoid AsShiftJis();\n\n\t// In\n\ttemplate<typename T>\n\tvoid Set(const std::string &title, T value) {\n\t\tpt_.put(ROOT_PATH_STR + title, std::to_string(value));\n\t}\n\n\t// Out\n\tint GetInt(const std::string & title);\n\tdouble GetDouble(const std::string & title);\n\n\t// Utility\n\tbool IsFileExists(const std::string & arg_path = \"\");\n\t// \u53c2\u7167\n\t// http://sayahamitt.net/utf8\u306astring\u5165\u308c\u305f\u3089shiftjis\u306astring\u51fa\u3066\u304f\u308b\u95a2\u6570\u4f5c\u3063\u305f/\n\tstd::string UTF8toSjis(const std::string & srcUTF8);\n\tstd::string SjistoUTF8(const std::string & srcSjis);\n\n};\n\ntemplate<>\ninline void BoostXmlModel::Set< const char *>(const std::string &title,\n\tconst char * value) {\n\tstd::string tmp = value;\n\tpt_.put(ROOT_PATH_STR + title, tmp);\n}\n\ntemplate<>\ninline void BoostXmlModel::Set<std::string>(const std::string &title,\n\tstd::string value) {\n\tpt_.put(ROOT_PATH_STR + title, value);\n}\n#ifdef __BORLANDC__\n\ntemplate<>\ninline void BoostXmlModel::Set<UnicodeString>(const std::string &title,\n\tUnicodeString value) {\n\tAnsiString tmp_astr = value;\n\tpt_.put(ROOT_PATH_STR + title, tmp_astr.c_str());\n}\n#endif\n\n// ---------------------------------------------------------------------------\n#endif\n\n```\n\n### \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\n```c++:boost_xml_model.cpp\n// ---------------------------------------------------------------------------\n// VC\u7528\n#include \"stdafx.h\"// Visual Studio\u4ee5\u5916\u306e\u5834\u5408\u3001\u3053\u3053\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n#ifdef _MSC_VER\n#include \"BoostXmlModel.h\"\n#endif\n\n// bcb\u7528\n#ifdef __BORLANDC__\n#pragma package(smart_init)\n#pragma hdrstop\n#include \"boost_xml_model.h\"\n#endif\n\n// ---------------------------------------------------------------------------\n#ifdef _MSC_VER\n\nBoostXmlModel::BoostXmlModel(const std::string &path)\n\t: path_(path), ROOT_PATH_STR(\"root.\") {\n\tInit();\n}\n\nstd::string BoostXmlModel::GetString(const std::string & title) {\n\tif (boost::optional<std::string>id =\n\t\tpt_.get_optional<std::string>(ROOT_PATH_STR + title)) {\n\t\treturn id.get();\n\t}\n\telse {\n\t\treturn \"\";\n\t}\n}\n#endif\n// bcb\u7528\n#ifdef __BORLANDC__\n\n__fastcall BoostXmlModel::BoostXmlModel(const UnicodeString &path)\n\t: path_(static_cast<AnsiString>(path).c_str()), ROOT_PATH_STR(\"root.\") {\n\tInit();\n}\n\nUnicodeString BoostXmlModel::GetString(const std::string & title) {\n\tif (boost::optional<std::string>id =\n\t\tpt_.get_optional<std::string>(ROOT_PATH_STR + title)) {\n\t\tAnsiString tmp = id.get().c_str();\n\t\treturn tmp;\n\t}\n\telse {\n\t\treturn \"\";\n\t}\n}\n#endif\n\nvoid BoostXmlModel::Init() {\n\tif (IsFileExists(path_)) {\n\t\tRead();\n\t}\n}\n\nbool BoostXmlModel::IsFileExists(const std::string &arg_path) {\n\tstd::ifstream infile(arg_path.c_str());\n\treturn infile.good();\n}\n\nstd::string BoostXmlModel::UTF8toSjis(const std::string &srcUTF8) {\n\tint lenghtUnicode = MultiByteToWideChar(CP_UTF8, 0, srcUTF8.c_str(),\n\t\tsrcUTF8.size() + 1, NULL, 0);\n\twchar_t* bufUnicode = new wchar_t[lenghtUnicode];\n\tMultiByteToWideChar(CP_UTF8, 0, srcUTF8.c_str(), srcUTF8.size() + 1,\n\t\tbufUnicode, lenghtUnicode);\n\tint lengthSJis = WideCharToMultiByte(CP_THREAD_ACP, 0, bufUnicode, -1, NULL,\n\t\t0, NULL, NULL);\n\tchar* bufShiftJis = new char[lengthSJis];\n\tWideCharToMultiByte(CP_THREAD_ACP, 0, bufUnicode, lenghtUnicode + 1,\n\t\tbufShiftJis, lengthSJis, NULL, NULL);\n\tstd::string strSJis(bufShiftJis);\n\tdelete bufUnicode;\n\tdelete bufShiftJis;\n\treturn strSJis;\n}\n\nstd::string BoostXmlModel::SjistoUTF8(const std::string &srcSjis) {\n\tint lenghtUnicode = MultiByteToWideChar(CP_THREAD_ACP, 0, srcSjis.c_str(),\n\t\tsrcSjis.size() + 1, NULL, 0);\n\twchar_t* bufUnicode = new wchar_t[lenghtUnicode];\n\tMultiByteToWideChar(CP_THREAD_ACP, 0, srcSjis.c_str(), srcSjis.size() + 1,\n\t\tbufUnicode, lenghtUnicode);\n\tint lengthUTF8 = WideCharToMultiByte(CP_UTF8, 0, bufUnicode, -1, NULL, 0,\n\t\tNULL, NULL);\n\tchar* bufUTF8 = new char[lengthUTF8];\n\tWideCharToMultiByte(CP_UTF8, 0, bufUnicode, lenghtUnicode + 1, bufUTF8,\n\t\tlengthUTF8, NULL, NULL);\n\tstd::string strUTF8(bufUTF8);\n\tdelete bufUnicode;\n\tdelete bufUTF8;\n\treturn strUTF8;\n}\n\nbool BoostXmlModel::Write() {\n\tstd::stringstream tmp_stream;\n\tusing boost::property_tree::ptree;\n\tusing namespace boost::property_tree::xml_parser;\n\tconst int indent = 2;\n\twrite_xml(tmp_stream, pt_);\n\tstd::string tmp_sjis = tmp_stream.str(); // shiftJIS\n\tstd::ofstream tmp_o_stream(path_.c_str());\n\tif (tmp_o_stream.is_open()) {\n\t\tif (locale_ == Locale::UTF8) {\n\t\t\tstd::string tmp_utf = SjistoUTF8(tmp_sjis); // UTF8\n\t\t\ttmp_o_stream << tmp_utf;\n\t\t}\n\t\telse if (locale_ == Locale::SHIFT_JIS) {\n\t\t\ttmp_o_stream << tmp_sjis;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nvoid BoostXmlModel::AsShiftJis() {\n\tlocale_ = Locale::SHIFT_JIS;\n}\n\nvoid BoostXmlModel::AsUtf8() {\n\tlocale_ = Locale::UTF8;\n}\n\nbool BoostXmlModel::Read() {\n\tif (!IsFileExists(path_))\n\t\treturn false;\n\t// https://boostjp.github.io/tips/xml.html\n\tusing namespace boost::property_tree;\n\tstd::ifstream inFile;\n\tinFile.open(path_);\n\tstd::stringstream strStream;\n\tif (locale_ == Locale::UTF8) {\n\t\tstd::string tmp_utf((std::istreambuf_iterator<char>(inFile)),\n\t\t\tstd::istreambuf_iterator<char>());\n\t\ttmp_utf = UTF8toSjis(tmp_utf);\n\t\tstrStream << tmp_utf;\n\t}\n\telse if (locale_ == Locale::SHIFT_JIS) {\n\t\tstrStream << inFile.rdbuf();\n\t}\n        read_xml(strStream, pt_);\n\treturn true;\n}\n\nint BoostXmlModel::GetInt(const std::string &title) {\n\tif (boost::optional<int>id = pt_.get_optional<int>(ROOT_PATH_STR + title)) {\n\t\treturn id.get();\n\t}\n\telse {\n\t\treturn -1;\n\t}\n}\n\ndouble BoostXmlModel::GetDouble(const std::string &title) {\n\tif (boost::optional<double>id =\n\t\tpt_.get_optional<double>(ROOT_PATH_STR + title)) {\n\t\treturn id.get();\n\t}\n\telse {\n\t\treturn -1;\n\t}\n}\n\n```\n\n## \u4f7f\u7528\u4f8b\n### Visual Studio\n\n```c++:main.cpp\n//\u4f7f\u7528\u4f8b\u3000visual studio\n\tBoostXmlModel * model = new BoostXmlModel(\"test.xml\");\n\tmodel->Set(\"test1\", 1);\n\tmodel->Set(\"test2.value\", \"\u30c6\u30b9\u30c82\");\n\tstd::string testa = \"\u30c6\u30b9\u30c83\";\n\tmodel->Set(\"test3\", testa);\n  // model->AsUtf8(); //UTF-8\u7528\u306b\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8)\n\t// model->AsShiftJis(); //Shift jis\u7528\u306b\u3059\u308b\u5834\u5408\n\tif (model->Write()) {\n\t\t// \u66f8\u304d\u8fbc\u307fOK\n\t}\n\tSleep(1000); //\u5ff5\u306e\u305f\u3081\u66f8\u304d\u8fbc\u307f\u7d42\u4e86\u5f85\u3061\n\tif (model->Read()) {\n\t\t// \u8aad\u307f\u8fbc\u307fOK\n\t\tstd::cout << model->GetString(\"test3\").c_str();\n\t\tSleep(3000);\n\t}\n\tdelete model;\n\n```\n\n### C++Builder\n\n```c++:main.cpp\n//\u4f7f\u7528\u4f8b\u3000C++Builder\n\tBoostXmlModel * model = new BoostXmlModel(\"test.xml\");\n\tmodel->Set(\"test1\", 1);\n\tmodel->Set(\"test2\", \"\u30c6\u30b9\u30c82\");\n\tstd::string testa = \"\u30c6\u30b9\u30c83\";\n\tmodel->Set(\"test3\", testa);\n  // model->AsUtf8(); //UTF-8\u7528\u306b\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8)\n\t// model->AsShiftJis(); //Shift jis\u7528\u306b\u3059\u308b\u5834\u5408\n\tif (model->Write()) {\n\t\t// \u66f8\u304d\u8fbc\u307fOK\n\t}\n\tSleep(1000); //\u5ff5\u306e\u305f\u3081\u66f8\u304d\u8fbc\u307f\u7d42\u4e86\u5f85\u3061\n\tif (model->Read()) {\n\t\t// \u8aad\u307f\u8fbc\u307fOK\n\t\tCodeSite->Send(model->GetString(\"test3\").c_str());\n\t}\n\tdelete model;\n\n```\n", "tags": ["C++", "C++builder", "VisualC++", "XML", "boost"]}