{"tags": ["C#", "performance"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u904e\u53bb\u7686\u3055\u3093\u66f8\u3044\u3066\u308b\u3053\u3068\u3060\u3051\u3069\u306d\u3002\n\u308f\u304b\u3063\u3066\u308b\u3053\u3068\u3060\u3051\u3069\u901f\u3055\u5fc5\u8981\u306a\u3068\u3053\u308d\u3067\u30b5\u30dc\u3063\u3066linq\u3067\u66f8\u3044\u3061\u3083\u3044\u3051\u306a\u3044\u3088\u3063\u3066\u306d(;\u30fb\u2200\u30fb)\n    class Program\n    {\n        const int COUNT = 1000000;\n        static void Main(string[] args)\n        {\n            var basearray = Enumerable.Range(0, 1024).Select(x => (byte) x).ToArray();\n\n            var sw = Stopwatch.StartNew();\n            for (var i = 0; i < COUNT; i++)\n            {\n                var buffer = basearray.Skip(20).Take(20).ToArray();\n            }\n            sw.Stop();\n\n            Console.WriteLine($\"linq {sw.ElapsedMilliseconds}ms\");\n\n            sw = Stopwatch.StartNew();\n            for (var i = 0; i < COUNT; i++)\n            {\n                var buffer = new byte[20];\n                Array.Copy(basearray, 20, buffer, 0, 20);\n            }\n            sw.Stop();\n\n            Console.WriteLine($\"ArrayCopy {sw.ElapsedMilliseconds}ms\");\n\n            sw = Stopwatch.StartNew();\n            for (var i = 0; i < COUNT; i++)\n            {\n                var buffer = new byte[20];\n                Buffer.BlockCopy(basearray, 20, buffer, 0, 20);\n            }\n            sw.Stop();\n\n            Console.WriteLine($\"BlockCopy {sw.ElapsedMilliseconds}ms\");\n\n\n            sw = Stopwatch.StartNew();\n            var ptr = Marshal.AllocCoTaskMem(basearray.Length);\n            Marshal.Copy(basearray, 0, ptr, basearray.Length);\n            try\n            {\n\n                for (var i = 0; i < COUNT; i++)\n                {\n                    var buffer = new byte[20];\n                    Marshal.Copy(ptr + 20, buffer, 0, 20);\n                }\n            }\n            finally\n            {\n                Marshal.FreeCoTaskMem(ptr);\n            }\n            sw.Stop();\n\n            Console.WriteLine($\"marshal {sw.ElapsedMilliseconds}ms\");\n\n            Console.ReadKey();\n        }\n\nlinq 1622ms\nArrayCopy 71ms\nBlockCopy 55ms\nmarshal 62ms\n\u904e\u53bb\u7686\u3055\u3093\u66f8\u3044\u3066\u308b\u3053\u3068\u3060\u3051\u3069\u306d\u3002\n\u308f\u304b\u3063\u3066\u308b\u3053\u3068\u3060\u3051\u3069\u901f\u3055\u5fc5\u8981\u306a\u3068\u3053\u308d\u3067\u30b5\u30dc\u3063\u3066linq\u3067\u66f8\u3044\u3061\u3083\u3044\u3051\u306a\u3044\u3088\u3063\u3066\u306d(;\u30fb\u2200\u30fb)\n\n```csharp\n    class Program\n    {\n        const int COUNT = 1000000;\n        static void Main(string[] args)\n        {\n            var basearray = Enumerable.Range(0, 1024).Select(x => (byte) x).ToArray();\n\n            var sw = Stopwatch.StartNew();\n            for (var i = 0; i < COUNT; i++)\n            {\n                var buffer = basearray.Skip(20).Take(20).ToArray();\n            }\n            sw.Stop();\n            \n            Console.WriteLine($\"linq {sw.ElapsedMilliseconds}ms\");\n       \n            sw = Stopwatch.StartNew();\n            for (var i = 0; i < COUNT; i++)\n            {\n                var buffer = new byte[20];\n                Array.Copy(basearray, 20, buffer, 0, 20);\n            }\n            sw.Stop();\n\n            Console.WriteLine($\"ArrayCopy {sw.ElapsedMilliseconds}ms\");\n\n            sw = Stopwatch.StartNew();\n            for (var i = 0; i < COUNT; i++)\n            {\n                var buffer = new byte[20];\n                Buffer.BlockCopy(basearray, 20, buffer, 0, 20);\n            }\n            sw.Stop();\n\n            Console.WriteLine($\"BlockCopy {sw.ElapsedMilliseconds}ms\");\n\n\n            sw = Stopwatch.StartNew();\n            var ptr = Marshal.AllocCoTaskMem(basearray.Length);\n            Marshal.Copy(basearray, 0, ptr, basearray.Length);\n            try\n            {\n                \n                for (var i = 0; i < COUNT; i++)\n                {\n                    var buffer = new byte[20];\n                    Marshal.Copy(ptr + 20, buffer, 0, 20);\n                }\n            }\n            finally\n            {\n                Marshal.FreeCoTaskMem(ptr);\n            }\n            sw.Stop();\n\n            Console.WriteLine($\"marshal {sw.ElapsedMilliseconds}ms\");\n\n            Console.ReadKey();\n        }\n```\n\nlinq 1622ms\nArrayCopy 71ms\nBlockCopy 55ms\nmarshal 62ms\n"}