{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nLocalDate\u306e\u30c6\u30b9\u30c8\u3092\u3057\u305f\u306e\u3067\u3001\u3064\u3044\u3067\u306bLocalTime\u3082\u5b9f\u65bd\u3057\u3066\u307f\u305f\u3002\n\u30bd\u30fc\u30b9\u306f\u3001\nhttps://github.com/xaatw0/quiita/blob/master/src/LocalTimeTest.java\n\n\u30bd\u30fc\u30b9\n\nLocalTimeTest.java\n\n@Test\npublic void now(){\n    //\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3002\u30c6\u30b9\u30c8\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3057\u306a\u3044\u3002\n    LocalTime.now();\n}\n\n@Test\npublic void ofGet(){\n\n    // 11\u664223\u5206\n    LocalTime t1123 = LocalTime.of(11, 23);\n    assertThat(t1123.getHour(), is(11));\n    assertThat(t1123.getMinute(), is(23));\n\n    // 11\u664223\u520645\u79d2 \u30681\u30ca\u30ce\u79d2\n    // 1\u30ca\u30ce\u79d2 = 0.000 000 001\u79d2\n    LocalTime t112345 = LocalTime.of(11, 23,45,1);\n    assertThat(t112345.getHour(), is(11));\n    assertThat(t112345.getMinute(), is(23));\n    assertThat(t112345.getSecond(), is(45));\n    assertThat(t112345.getNano(), is(1));\n}\n\n@Test\npublic void of_\u5883\u754c\u7dda(){\n\n    LocalTime.of(0, 0);\n    LocalTime.of(23, 59);\n\n    try {\n        // 24\u6642\u306f\u8a2d\u5b9a\u3067\u304d\u305a\u3001DateTimeException\u304c\u767a\u751f\u3059\u308b\n        LocalTime.of(24, 00);\n        Assert.fail();\n    }catch(DateTimeException ex){\n    }\n}\n\n@Test\npublic void staticFinal(){\n\n    // \u6df1\u591c\u306e\u56fa\u5b9a\u5024\n    LocalTime midnight = LocalTime.of(0, 0);\n    assertThat(midnight, is(LocalTime.MIDNIGHT));\n\n    // \u6b63\u5348\u306e\u56fa\u5b9a\u5024\n    LocalTime noon = LocalTime.of(12, 0);\n    assertThat(noon, is(LocalTime.NOON));\n}\n\n@Test\npublic void between(){\n\n    LocalTime startTime = LocalTime.of(21, 30);\n    LocalTime endTime = LocalTime.of(23, 00);\n\n    // \u5206\u5358\u4f4d\u3067\u5dee\u5206\u3092\u53d6\u5f97\n    long minutes = ChronoUnit.MINUTES.between(startTime, endTime);\n    assertThat(minutes, is(90L));\n\n    // \u6642\u9593\u5358\u4f4d\u3067\u5dee\u5206\u3092\u53d6\u5f97\n    long hours = ChronoUnit.HOURS.between(startTime, endTime);\n    assertThat(hours, is(1L));\n\n    // \u79d2\u5358\u4f4d\u3067\u5dee\u5206\u3092\u53d6\u5f97\n    long seconds = ChronoUnit.SECONDS.between(startTime, endTime);\n    assertThat(seconds , is((long) 60 * 60 + 30 * 60));\n}\n\n@Test\npublic void between_overnight(){\n\n    // \u958b\u59cb\u6642\u9593\u306e\u65b9\u304c\u5f8c\u308d\u306e\u6642\u9593\u306e\u5834\u5408\u3001\u30de\u30a4\u30ca\u30b9\u306b\u306a\u308b\n    LocalTime startTime = LocalTime.of(21, 30);\n    LocalTime endTime = LocalTime.of(20, 00);\n\n    long minutes = ChronoUnit.MINUTES.between(startTime, endTime);\n    assertThat(minutes, is(-90L));\n\n    long hours = ChronoUnit.HOURS.between(startTime, endTime);\n    assertThat(hours, is(-1L));\n}\n\n@Test\npublic void \u6df1\u591c\u52e4\u52d9\u306e\u696d\u52d9\u6642\u9593(){\n\n    // 22:30\u304b\u30896:00\u52e4\u52d9\u3067\u30017.5\u6642\u9593\u52e4\u52d9(7 * 60 + 30\u5206\u52e4\u52d9)\n    LocalTime startTime = LocalTime.of(22, 30);\n    LocalTime endTime = LocalTime.of(6, 00);\n\n    long minutes = ChronoUnit.MINUTES.between(startTime, endTime);\n    assertThat(minutes, is(- 60L * 16 - 30));\n\n    assertThat(minutes + 24 * 60, is(7 * 60L + 30) );\n}\n\n@Test\npublic void parse(){\n\n    assertThat(LocalTime.parse(\"12:34\", DateTimeFormatter.ISO_TIME)\n            , is(LocalTime.of(12,34)));\n\n    assertThat(LocalTime.parse(\"12:34\", DateTimeFormatter.ISO_LOCAL_TIME)\n            , is(LocalTime.of(12,34)));\n\n    assertThat(LocalTime.parse(\"02:34\", DateTimeFormatter.ISO_LOCAL_TIME)\n            , is(LocalTime.of(2,34)));\n\n    //\u300c2:34\u300d\u306f\u30a8\u30e9\u30fc(parse_exception\u53c2\u7167)\n\n    assertThat(LocalTime.parse(\"02:04\", DateTimeFormatter.ISO_LOCAL_TIME)\n            , is(LocalTime.of(2,4)));\n\n    assertThat(LocalTime.parse(\"02:04:30\", DateTimeFormatter.ISO_LOCAL_TIME)\n            , is(LocalTime.of(2,4,30)));\n}\n\n/**\n * \u300c2:34\u300d\u306f\u30a8\u30e9\u30fc\n */\n@Test(expected = DateTimeParseException.class)\npublic void parse_exception(){\n    LocalTime.parse(\"2:34\", DateTimeFormatter.ISO_LOCAL_TIME);\n}\n\n@Test\npublic void format(){\n    assertThat(LocalTime.of(2,4).format(DateTimeFormatter.ISO_TIME), is(\"02:04:00\"));\n    assertThat(LocalTime.of(12,34).format(DateTimeFormatter.ISO_TIME), is(\"12:34:00\"));\n    assertThat(LocalTime.of(2,4,1).format(DateTimeFormatter.ISO_TIME), is(\"02:04:01\"));\n\n    assertThat(LocalTime.of(12,34).format(DateTimeFormatter.ISO_LOCAL_TIME), is(\"12:34:00\"));\n\n}\n\n@Test\npublic void isBeforeAfter(){\n    LocalTime time1 = LocalTime.of(1,0);\n    LocalTime time2 = LocalTime.of(2,0);\n\n    assertThat(time1.isBefore(time2), is(true));\n    assertThat(time2.isBefore(time1), is(false));\n\n    assertThat(time1.isAfter(time2), is(false));\n    assertThat(time2.isAfter(time1), is(true));\n}\n\n@Test\npublic void plusMinus(){\n\n    assertThat(LocalTime.NOON.plusHours(1), is(LocalTime.of(13, 0)));\n    assertThat(LocalTime.NOON.plusMinutes(1), is(LocalTime.of(12, 1)));\n    assertThat(LocalTime.NOON.plusSeconds(1), is(LocalTime.of(12, 0, 1)));\n    assertThat(LocalTime.NOON.plusNanos(1), is(LocalTime.of(12, 0, 0, 1)));\n\n    assertThat(LocalTime.NOON.minusHours(1), is(LocalTime.of(11, 0)));\n    assertThat(LocalTime.NOON.minusMinutes(1), is(LocalTime.of(11, 59)));\n    assertThat(LocalTime.NOON.minusSeconds(1), is(LocalTime.of(11, 59, 59)));\n    assertThat(LocalTime.NOON.minusNanos(1), is(LocalTime.of(11, 59, 59, 999999999)));\n}\n\n@Test\npublic void toSecondNanoOfDay(){\n    assertThat(LocalTime.of(1, 1, 1).toSecondOfDay(), is(60*60 + 60 + 1));\n    assertThat(LocalTime.of(0, 0, 1, 1).toNanoOfDay(), is(1000000001L));\n}\n\n@Test\npublic void with(){\n    LocalTime target = LocalTime.of(11, 23,45,1);\n    assertThat(target.withHour(0), is(LocalTime.of(0, 23,45,1)));\n    assertThat(target.withMinute(0), is(LocalTime.of(11, 0,45,1)));\n    assertThat(target.withSecond(0), is(LocalTime.of(11, 23,0,1)));\n    assertThat(target.withNano(0), is(LocalTime.of(11, 23,45)));\n}\n\n\n###\u306f\u3058\u3081\u306b\nLocalDate\u306e\u30c6\u30b9\u30c8\u3092\u3057\u305f\u306e\u3067\u3001\u3064\u3044\u3067\u306bLocalTime\u3082\u5b9f\u65bd\u3057\u3066\u307f\u305f\u3002\n\u30bd\u30fc\u30b9\u306f\u3001\nhttps://github.com/xaatw0/quiita/blob/master/src/LocalTimeTest.java\n\n###\u30bd\u30fc\u30b9\n\n```java:LocalTimeTest.java\n\n@Test\npublic void now(){\n\t//\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3002\u30c6\u30b9\u30c8\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3057\u306a\u3044\u3002\n\tLocalTime.now();\n}\n\n@Test\npublic void ofGet(){\n\n\t// 11\u664223\u5206\n\tLocalTime t1123 = LocalTime.of(11, 23);\n\tassertThat(t1123.getHour(), is(11));\n\tassertThat(t1123.getMinute(), is(23));\n\n\t// 11\u664223\u520645\u79d2 \u30681\u30ca\u30ce\u79d2\n\t// 1\u30ca\u30ce\u79d2 = 0.000 000 001\u79d2\n\tLocalTime t112345 = LocalTime.of(11, 23,45,1);\n\tassertThat(t112345.getHour(), is(11));\n\tassertThat(t112345.getMinute(), is(23));\n\tassertThat(t112345.getSecond(), is(45));\n\tassertThat(t112345.getNano(), is(1));\n}\n\n@Test\npublic void of_\u5883\u754c\u7dda(){\n\n\tLocalTime.of(0, 0);\n\tLocalTime.of(23, 59);\n\n\ttry {\n\t\t// 24\u6642\u306f\u8a2d\u5b9a\u3067\u304d\u305a\u3001DateTimeException\u304c\u767a\u751f\u3059\u308b\n\t\tLocalTime.of(24, 00);\n\t\tAssert.fail();\n\t}catch(DateTimeException ex){\n\t}\n}\n\n@Test\npublic void staticFinal(){\n\n\t// \u6df1\u591c\u306e\u56fa\u5b9a\u5024\n\tLocalTime midnight = LocalTime.of(0, 0);\n\tassertThat(midnight, is(LocalTime.MIDNIGHT));\n\n\t// \u6b63\u5348\u306e\u56fa\u5b9a\u5024\n\tLocalTime noon = LocalTime.of(12, 0);\n\tassertThat(noon, is(LocalTime.NOON));\n}\n\n@Test\npublic void between(){\n\n\tLocalTime startTime = LocalTime.of(21, 30);\n\tLocalTime endTime = LocalTime.of(23, 00);\n\n\t// \u5206\u5358\u4f4d\u3067\u5dee\u5206\u3092\u53d6\u5f97\n\tlong minutes = ChronoUnit.MINUTES.between(startTime, endTime);\n\tassertThat(minutes, is(90L));\n\n\t// \u6642\u9593\u5358\u4f4d\u3067\u5dee\u5206\u3092\u53d6\u5f97\n\tlong hours = ChronoUnit.HOURS.between(startTime, endTime);\n\tassertThat(hours, is(1L));\n\n\t// \u79d2\u5358\u4f4d\u3067\u5dee\u5206\u3092\u53d6\u5f97\n\tlong seconds = ChronoUnit.SECONDS.between(startTime, endTime);\n\tassertThat(seconds , is((long) 60 * 60 + 30 * 60));\n}\n\n@Test\npublic void between_overnight(){\n\n\t// \u958b\u59cb\u6642\u9593\u306e\u65b9\u304c\u5f8c\u308d\u306e\u6642\u9593\u306e\u5834\u5408\u3001\u30de\u30a4\u30ca\u30b9\u306b\u306a\u308b\n\tLocalTime startTime = LocalTime.of(21, 30);\n\tLocalTime endTime = LocalTime.of(20, 00);\n\n\tlong minutes = ChronoUnit.MINUTES.between(startTime, endTime);\n\tassertThat(minutes, is(-90L));\n\n\tlong hours = ChronoUnit.HOURS.between(startTime, endTime);\n\tassertThat(hours, is(-1L));\n}\n\n@Test\npublic void \u6df1\u591c\u52e4\u52d9\u306e\u696d\u52d9\u6642\u9593(){\n\n\t// 22:30\u304b\u30896:00\u52e4\u52d9\u3067\u30017.5\u6642\u9593\u52e4\u52d9(7 * 60 + 30\u5206\u52e4\u52d9)\n\tLocalTime startTime = LocalTime.of(22, 30);\n\tLocalTime endTime = LocalTime.of(6, 00);\n\n\tlong minutes = ChronoUnit.MINUTES.between(startTime, endTime);\n\tassertThat(minutes, is(- 60L * 16 - 30));\n\n\tassertThat(minutes + 24 * 60, is(7 * 60L + 30) );\n}\n\n@Test\npublic void parse(){\n\n\tassertThat(LocalTime.parse(\"12:34\", DateTimeFormatter.ISO_TIME)\n\t\t\t, is(LocalTime.of(12,34)));\n\n\tassertThat(LocalTime.parse(\"12:34\", DateTimeFormatter.ISO_LOCAL_TIME)\n\t\t\t, is(LocalTime.of(12,34)));\n\n\tassertThat(LocalTime.parse(\"02:34\", DateTimeFormatter.ISO_LOCAL_TIME)\n\t\t\t, is(LocalTime.of(2,34)));\n\n\t//\u300c2:34\u300d\u306f\u30a8\u30e9\u30fc(parse_exception\u53c2\u7167)\n\n\tassertThat(LocalTime.parse(\"02:04\", DateTimeFormatter.ISO_LOCAL_TIME)\n\t\t\t, is(LocalTime.of(2,4)));\n\n\tassertThat(LocalTime.parse(\"02:04:30\", DateTimeFormatter.ISO_LOCAL_TIME)\n\t\t\t, is(LocalTime.of(2,4,30)));\n}\n\n/**\n * \u300c2:34\u300d\u306f\u30a8\u30e9\u30fc\n */\n@Test(expected = DateTimeParseException.class)\npublic void parse_exception(){\n\tLocalTime.parse(\"2:34\", DateTimeFormatter.ISO_LOCAL_TIME);\n}\n\n@Test\npublic void format(){\n\tassertThat(LocalTime.of(2,4).format(DateTimeFormatter.ISO_TIME), is(\"02:04:00\"));\n\tassertThat(LocalTime.of(12,34).format(DateTimeFormatter.ISO_TIME), is(\"12:34:00\"));\n\tassertThat(LocalTime.of(2,4,1).format(DateTimeFormatter.ISO_TIME), is(\"02:04:01\"));\n\n\tassertThat(LocalTime.of(12,34).format(DateTimeFormatter.ISO_LOCAL_TIME), is(\"12:34:00\"));\n\n}\n\n@Test\npublic void isBeforeAfter(){\n\tLocalTime time1 = LocalTime.of(1,0);\n\tLocalTime time2 = LocalTime.of(2,0);\n\n\tassertThat(time1.isBefore(time2), is(true));\n\tassertThat(time2.isBefore(time1), is(false));\n\n\tassertThat(time1.isAfter(time2), is(false));\n\tassertThat(time2.isAfter(time1), is(true));\n}\n\n@Test\npublic void plusMinus(){\n\n\tassertThat(LocalTime.NOON.plusHours(1), is(LocalTime.of(13, 0)));\n\tassertThat(LocalTime.NOON.plusMinutes(1), is(LocalTime.of(12, 1)));\n\tassertThat(LocalTime.NOON.plusSeconds(1), is(LocalTime.of(12, 0, 1)));\n\tassertThat(LocalTime.NOON.plusNanos(1), is(LocalTime.of(12, 0, 0, 1)));\n\n\tassertThat(LocalTime.NOON.minusHours(1), is(LocalTime.of(11, 0)));\n\tassertThat(LocalTime.NOON.minusMinutes(1), is(LocalTime.of(11, 59)));\n\tassertThat(LocalTime.NOON.minusSeconds(1), is(LocalTime.of(11, 59, 59)));\n\tassertThat(LocalTime.NOON.minusNanos(1), is(LocalTime.of(11, 59, 59, 999999999)));\n}\n\n@Test\npublic void toSecondNanoOfDay(){\n\tassertThat(LocalTime.of(1, 1, 1).toSecondOfDay(), is(60*60 + 60 + 1));\n\tassertThat(LocalTime.of(0, 0, 1, 1).toNanoOfDay(), is(1000000001L));\n}\n\n@Test\npublic void with(){\n\tLocalTime target = LocalTime.of(11, 23,45,1);\n\tassertThat(target.withHour(0), is(LocalTime.of(0, 23,45,1)));\n\tassertThat(target.withMinute(0), is(LocalTime.of(11, 0,45,1)));\n\tassertThat(target.withSecond(0), is(LocalTime.of(11, 23,0,1)));\n\tassertThat(target.withNano(0), is(LocalTime.of(11, 23,45)));\n}\n```\n", "tags": ["Java", "java8"]}