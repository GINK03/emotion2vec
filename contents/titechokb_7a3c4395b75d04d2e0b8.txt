{"context": "\n\n\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\n\u3000\u524d\u56de\u3001\"Unified Memory\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3089\u3057\u3044\u3051\u308c\u3069\u3001\u4f7f\u3048\u306a\u304b\u3063\u305f\"\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30ad\u30c1\u30f3\u3068Visual Studio\u306e\u65b9\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\uff08NVIDIA CUDA Compiler\u3001\u7565\u79f0 nvcc\uff09\u3092\u8a2d\u5b9a\u3057\u305f\u3089\u52d5\u3044\u305f\u306e\u3067\u3001\u305d\u306e\u30e1\u30e2\u3002\n\u3000\u524d\u63d0\u3068\u3057\u3066\u74b0\u5883\u306f\u3001PC\u304c64bit\u30de\u30b7\u30f3\u3001OS\u304cWindows 10\u3001\u958b\u767a\u74b0\u5883\u304cVisual Studio 2015 community\u3001GPU\u304cGeForce GTX 960\u3067\u3059\u3002\n\nUnified Memory\u3068\u306f\uff1f\n\u3000\u3053\u306e\u8fba\u306e\u8cc7\u6599\uff082016/10/5, 17/1/7\u95b2\u89a7\uff09\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u3001\uff082017\u5e741\u6708\u73fe\u5728\uff09\u6700\u65b0\u306ePascal\u4e16\u4ee3\u3088\u308a\u4ee5\u524d\u306eGPU\u306b\u304a\u3044\u3066\u306f\u3001\u300c\u30e1\u30e2\u30ea\u306e\u5834\u6240\u306fGPU\u4e0a\u306b\u3042\u308b\u3051\u308c\u3069\u3001CPU\u304b\u3089\u3082GPU\u304b\u3089\u3082\u624b\u8efd\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u300d\u30e1\u30e2\u30ea\u306e\u7a2e\u985e\u306e\u3088\u3046\u3067\u3059\u3002Pascal\u4e16\u4ee3\u3060\u3068\u3001host\u3068device\u3068\u3092\u307e\u305f\u3044\u3067\u3001GPU\u306e\u30e1\u30e2\u30ea\u5bb9\u91cf\u4ee5\u4e0a\u306e\u5927\u304d\u3055\u306e\u30e1\u30e2\u30ea\u3068\u3057\u3066\u3064\u304b\u3048\u308b\u3089\u3057\u3044\u3002\n\u203b\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u3092\u898b\u308b\u3068\u3001\u4ed6\u306b\u3082\"Mapped Memory\"\"Unified Virtual Addressing\"\u3068\u3044\u3063\u305f\u3001device\u3068host\u306e\u9593\u306e\u30e1\u30e2\u30ea\u306e\u3084\u308a\u53d6\u308a\u3092\u4f55\u3068\u304b\u3057\u3088\u3046\u3068\u3057\u305f\u6a5f\u80fd\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u307e\u305f\u304a\u3044\u304a\u3044\u2026\n\n\u4f7f\u3048\u308b\u6761\u4ef6\n\u300064bit\u30de\u30b7\u30f3\u3067\u304b\u3064OS\u304cWindows\uff087\u4ee5\u964d\uff09\u53c8\u306fLinux\uff08Kernel 2.6.18\u4ee5\u964d\uff09\u3067\u3042\u308a\u3001GPU\u306eCompute Capability\u304c3.0\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u305d\u3046\u3067\u3059\uff08\u53c2\u8003\uff09\u3002\n\nVisual C++\u3068nvcc\uff08CUDA C/C++\uff09\u306e\u8a2d\u5b9a\u65b9\u6cd5\n\u3000CUDA C/C++\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u306f\u3001PC\u304c32bit\u3067Compute Capability\u304c2.0\u3067\u3082\u52d5\u304f\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u524d\u8ff0\u3057\u305f\u6761\u4ef6\u3092\u7269\u7406\u7684\u306b\u306f\u6e80\u305f\u3057\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u3001\u3053\u306e\u8a2d\u5b9a\u3092\u5b9f\u614b\u306b\u5408\u308f\u305b\u3066\u304a\u304b\u306a\u3051\u308c\u3070unified memory\u306f\u52d5\u304b\u306a\u3044\u308f\u3051\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u624b\u9806\u3092\u8e0f\u3093\u3067\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u624b\u9806\n\nthe name of the class of NVIDIA virtual GPU\u306e\u8a2d\u5b9a\n\uff11. \u300c\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u300d\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e0a\u3067\u53f3\u30af\u30ea\u30c3\u30af or \u753b\u9762\u4e0a\u5074\u306e\u30bf\u30d6\u300c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300d\u304b\u3089\u300c\uff08\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\uff09\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u300d\u3092\u9078\u629e\n\uff12. \u300c\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3\u300d\u2192\u300cCUDA C++\u300d\u2192\u300cCode Generation\u300d\u306e\u53f3\u5074\u3001compute_20,sm_20\u3068\u3042\u308b\u6b04\u3092\u30af\u30ea\u30c3\u30af\n\uff13. \u51fa\u3066\u304d\u305f\u4e0b\u25b3\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3001\uff1c\u7de8\u96c6...\uff1e\u3092\u9078\u629e\n\n\uff14. \u51fa\u3066\u304d\u305f\u30a6\u30a3\u30f3\u30c9\u30a6\u4e0a\u5074\u306e\u7a7a\u6b04\u306b\uff08Maxwell\u4e16\u4ee3\u306eGPU\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\uff09compute_50,sm_50\u3092\u6253\u3061\u8fbc\u3080\u3002\u4e16\u4ee3\u3054\u3068\u306b\u6253\u3061\u8fbc\u3080\u3079\u304d\u5024\u304c\u9055\u3046\u306e\u3067NVIDIA\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3002\n\n\u203b\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\n\n\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u8a2d\u5b9a\n\uff15. \u300c\uff08\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\uff09\u30d7\u30ed\u30d1\u30c6\u30a3\u30da\u30fc\u30b8\u300d\u4e0a\u90e8\u306e\u300c\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u300d\u306b\u3066\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092x64\u306b\u5909\u66f4\u3002\n\n\uff16. \u3059\u3050\u53f3\u5074\u306e\u300c\u69cb\u6210\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u300d\u3092\u9078\u629e\n\uff17. \u30a2\u30af\u30c6\u30a3\u30d6\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u300cx86\u300d\u304b\u3089\u300cx64\u300d\u306b\u5909\u66f4\n\uff18. \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u300cWin32\u300d\u304b\u3089\u300cx64\u300d\u306b\u5909\u66f4\u3002\n\n\n\u307e\u3068\u3081\n\u3000\u308f\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u7c21\u5358\u3060\u3051\u308c\u3069\u3082\u3001\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u8a2d\u5b9a\u306e\u554f\u984c\u3067\u3057\u305f\u3002\u3053\u308c\u3067\u3001Unified Memory\u306b\u9650\u3089\u305aCUDA\u306e\u6bd4\u8f03\u7684\u65b0\u3057\u3044\u6a5f\u80fd\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u3001unified memory\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\u203b\u307e\u3041\u3053\u3093\u306a\u98a8\u306b\u3044\u3061\u3044\u3061\u3044\u308d\u3093\u306a\u753b\u9762\u3092\u958b\u304b\u306a\u304f\u3066\u3082\u3001Visual Studio\u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089--gpu-architecture=sm_50\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066''nvcc --gpu-architecture=sm_50 (\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d5\u30a1\u30a4\u30eb\u540d)''\u3063\u3066\u5f8c\u3067\u3084\u3063\u3066\u307f\u305f\u3089\u666e\u901a\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u305f\u3093\u3067\u3059\u3051\u3069\u306d\u2026\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3000CUDA API\u95a2\u6570\u306e\u5410\u304f\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u62fe\u3046\u30de\u30af\u30edGET_ERR\u306fGET_ERR.h\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\nsample_unified.cu\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <stdio.h>\n#include <string.h>\n\n#include \"GET_ERR.h\"\n\n__global__ void addKernel(int *c,const int *a,const int *b)\n{\n    int i = threadIdx.x;\n    c[i] = a[i]+ b[i];\n}\n\nint main()\n{\n    //\u8db3\u3057\u7b97\u3092\u3057\u305f\u3044\u30d9\u30af\u30c8\u30eba,b\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n    const int arraySize = 5;\n    const int a[arraySize] = { 1, 2, 3, 4, 5 };\n    const int b[arraySize] = { 10, 20, 30, 40, 50 };\n    //unified\u30e1\u30e2\u30ea\u3092\u4f7f\u3046\u5909\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u5ba3\u8a00\u3059\u308b\n    int * uni_a;\n    int * uni_b;\n    int * uni_c;    //\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\n\n    //\u4f7f\u7528\u3059\u308bdevice\u3092\u9078\u629e\n    GET_ERR(cudaSetDevice(0));\n\n    //Unified Memory\u3092\u78ba\u4fdd\n    GET_ERR(cudaMallocManaged(&uni_c, arraySize * sizeof(int)));\n    GET_ERR(cudaMallocManaged(&uni_a, arraySize * sizeof(int)));\n    GET_ERR(cudaMallocManaged(&uni_b, arraySize * sizeof(int)));\n\n    //\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\u3092\u521d\u671f\u5316\u3002CUDA API\u3092\u4f7f\u308f\u306a\u3044\u3002\n    memset(uni_c, 0, arraySize * sizeof(int));\n\n    //a\u3001b\u3092\u30e6\u30cb\u30d5\u30a1\u30a4\u30c9\u30e1\u30e2\u30ea\u306b\u30b3\u30d4\u30fc\u3002CUDA API\u3092\u4f7f\u308f\u306a\u3044\n    memcpy(uni_a, a, arraySize * sizeof(int));\n    memcpy(uni_b, b, arraySize * sizeof(int));\n\n    //Kernel\u3092\u8d77\u52d5\n    addKernel << <1, arraySize >> >(uni_c,uni_a,uni_b);\n\n    //\u30a8\u30e9\u30fc\u3092\u62fe\u3046\u30fb\u52d5\u4f5c\u7d42\u4e86\u307e\u3067\u5f85\u3064\n    GET_ERR(cudaGetLastError());\n    GET_ERR(cudaDeviceSynchronize());\n\n    //\u7d50\u679c\u3092\u8868\u793a\u3002Unified Memory\u306a\u306e\u3067\u3001CPU\u5074\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\n    printf(\"{1,2,3,4,5} + {10,20,30,40,50} = {%d,%d,%d,%d,%d}\\n\",\n        uni_c[0], uni_c[1], uni_c[2], uni_c[3], uni_c[4]);\n\n    //\u9818\u57df\u306e\u89e3\u653e\u306ffree\u3067\u306f\u306a\u304fcudaFree\n    cudaFree(uni_a);\n    cudaFree(uni_b);\n    cudaFree(uni_c);\n\n    GET_ERR(cudaDeviceReset());\n\n    return 0;\n}\n\n\n\n\nGET_ERR.h\n#ifndef __GET_ERR_H_\n#define __GET_ERR_H_\n#include <stdio.h>\n#include <stdlib.h>\n\n//API\u95a2\u6570\u304b\u3089\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u3066\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3057\u3001\u7247\u3065\u3051\u3092\u3057\u305f\u5f8c\u3001exit\u3059\u308b\u95a2\u6570\u3002\nstatic void GetErr(cudaError_t err, const char *file, int line) {\n    if (err != cudaSuccess) {\n        fprintf(stderr, \"Error %s occurred, in File name %s at Line %d\\n\",cudaGetErrorString(err), file, line);\n        cudaDeviceSynchronize();\n        cudaDeviceReset();\n        exit(err);\n}\n}\n//GetErr\u3092\u547c\u3073\u51fa\u3059\u30de\u30af\u30ed\u3002\n#define GET_ERR( err ) do{GetErr( err, __FILE__, __LINE__ );}while(0)\n\n#endif\n\n\n#\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\n\u3000[\u524d\u56de](http://qiita.com/titechokb/items/e8a2a1b62c45dcbbb706)\u3001\"Unified Memory\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3089\u3057\u3044\u3051\u308c\u3069\u3001\u4f7f\u3048\u306a\u304b\u3063\u305f\"\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30ad\u30c1\u30f3\u3068Visual Studio\u306e\u65b9\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\uff08NVIDIA CUDA Compiler\u3001\u7565\u79f0 nvcc\uff09\u3092\u8a2d\u5b9a\u3057\u305f\u3089\u52d5\u3044\u305f\u306e\u3067\u3001\u305d\u306e\u30e1\u30e2\u3002\n\u3000\u524d\u63d0\u3068\u3057\u3066\u74b0\u5883\u306f\u3001PC\u304c64bit\u30de\u30b7\u30f3\u3001OS\u304cWindows 10\u3001\u958b\u767a\u74b0\u5883\u304cVisual Studio 2015 community\u3001GPU\u304cGeForce GTX 960\u3067\u3059\u3002\n#Unified Memory\u3068\u306f\uff1f\n\u3000[\u3053\u306e\u8fba\u306e\u8cc7\u6599](https://www.gputechconf.jp/assets/files/1010.pdf)\uff082016/10/5, 17/1/7\u95b2\u89a7\uff09\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u3001\uff082017\u5e741\u6708\u73fe\u5728\uff09\u6700\u65b0\u306ePascal\u4e16\u4ee3\u3088\u308a\u4ee5\u524d\u306eGPU\u306b\u304a\u3044\u3066\u306f\u3001\u300c\u30e1\u30e2\u30ea\u306e\u5834\u6240\u306fGPU\u4e0a\u306b\u3042\u308b\u3051\u308c\u3069\u3001CPU\u304b\u3089\u3082GPU\u304b\u3089\u3082\u624b\u8efd\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u300d\u30e1\u30e2\u30ea\u306e\u7a2e\u985e\u306e\u3088\u3046\u3067\u3059\u3002Pascal\u4e16\u4ee3\u3060\u3068\u3001host\u3068device\u3068\u3092\u307e\u305f\u3044\u3067\u3001GPU\u306e\u30e1\u30e2\u30ea\u5bb9\u91cf\u4ee5\u4e0a\u306e\u5927\u304d\u3055\u306e\u30e1\u30e2\u30ea\u3068\u3057\u3066\u3064\u304b\u3048\u308b\u3089\u3057\u3044\u3002\n\n\u203b[\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8](http://topsecret.hpc.co.jp/wiki/index.php/CUDA_6%E9%80%9F%E5%A0%B1(1):_Unified_Memory)\u3092\u898b\u308b\u3068\u3001\u4ed6\u306b\u3082\"Mapped Memory\"\"Unified Virtual Addressing\"\u3068\u3044\u3063\u305f\u3001device\u3068host\u306e\u9593\u306e\u30e1\u30e2\u30ea\u306e\u3084\u308a\u53d6\u308a\u3092\u4f55\u3068\u304b\u3057\u3088\u3046\u3068\u3057\u305f\u6a5f\u80fd\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u307e\u305f\u304a\u3044\u304a\u3044\u2026\n##\u4f7f\u3048\u308b\u6761\u4ef6\n\u300064bit\u30de\u30b7\u30f3\u3067\u304b\u3064OS\u304cWindows\uff087\u4ee5\u964d\uff09\u53c8\u306fLinux\uff08Kernel 2.6.18\u4ee5\u964d\uff09\u3067\u3042\u308a\u3001GPU\u306eCompute Capability\u304c3.0\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u305d\u3046\u3067\u3059\uff08[\u53c2\u8003](https://devblogs.nvidia.com/parallelforall/unified-memory-in-cuda-6/)\uff09\u3002\n#Visual C++\u3068nvcc\uff08CUDA C/C++\uff09\u306e\u8a2d\u5b9a\u65b9\u6cd5\n\u3000CUDA C/C++\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u306f\u3001PC\u304c32bit\u3067Compute Capability\u304c2.0\u3067\u3082\u52d5\u304f\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u524d\u8ff0\u3057\u305f\u6761\u4ef6\u3092\u7269\u7406\u7684\u306b\u306f\u6e80\u305f\u3057\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u3001\u3053\u306e\u8a2d\u5b9a\u3092\u5b9f\u614b\u306b\u5408\u308f\u305b\u3066\u304a\u304b\u306a\u3051\u308c\u3070unified memory\u306f\u52d5\u304b\u306a\u3044\u308f\u3051\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u624b\u9806\u3092\u8e0f\u3093\u3067\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n##\u624b\u9806\n###the name of the class of NVIDIA virtual GPU\u306e\u8a2d\u5b9a\n\uff11. \u300c\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u300d\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e0a\u3067\u53f3\u30af\u30ea\u30c3\u30af or \u753b\u9762\u4e0a\u5074\u306e\u30bf\u30d6\u300c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300d\u304b\u3089\u300c\uff08\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\uff09\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u300d\u3092\u9078\u629e\n\uff12. \u300c\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3\u300d\u2192\u300cCUDA C++\u300d\u2192\u300cCode Generation\u300d\u306e\u53f3\u5074\u3001``compute_20,sm_20``\u3068\u3042\u308b\u6b04\u3092\u30af\u30ea\u30c3\u30af\n\uff13. \u51fa\u3066\u304d\u305f\u4e0b\u25b3\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3001\uff1c\u7de8\u96c6...\uff1e\u3092\u9078\u629e\n\n![CodeGeneration.png](https://qiita-image-store.s3.amazonaws.com/0/156870/402ddbc6-7a1a-5930-30cb-1ae06e3f262b.png)\n\n\uff14. \u51fa\u3066\u304d\u305f\u30a6\u30a3\u30f3\u30c9\u30a6\u4e0a\u5074\u306e\u7a7a\u6b04\u306b\uff08Maxwell\u4e16\u4ee3\u306eGPU\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\uff09``compute_50,sm_50``\u3092\u6253\u3061\u8fbc\u3080\u3002\u4e16\u4ee3\u3054\u3068\u306b\u6253\u3061\u8fbc\u3080\u3079\u304d\u5024\u304c\u9055\u3046\u306e\u3067[NVIDIA\u306e\u30da\u30fc\u30b8](http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#virtual-architecture-feature-list)\u3092\u53c2\u7167\u3002\n\n![CM_SM.png](https://qiita-image-store.s3.amazonaws.com/0/156870/0da46f3f-8789-75c3-2975-0b74b82cb7eb.png)\n\n\n\u203b\u8a73\u3057\u304f\u306f[\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8](http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/#options-for-steering-gpu-code-generation)\u3092\u53c2\u7167\n###\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u8a2d\u5b9a\n\uff15. \u300c\uff08\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\uff09\u30d7\u30ed\u30d1\u30c6\u30a3\u30da\u30fc\u30b8\u300d\u4e0a\u90e8\u306e\u300c\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u300d\u306b\u3066\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092x64\u306b\u5909\u66f4\u3002\n\n![platform.png](https://qiita-image-store.s3.amazonaws.com/0/156870/6ffa605a-33b9-9af5-af10-3552f2ce6224.png)\n\n\n\uff16. \u3059\u3050\u53f3\u5074\u306e\u300c\u69cb\u6210\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u300d\u3092\u9078\u629e\n\uff17. \u30a2\u30af\u30c6\u30a3\u30d6\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u300cx86\u300d\u304b\u3089\u300cx64\u300d\u306b\u5909\u66f4\n\uff18. \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u300cWin32\u300d\u304b\u3089\u300cx64\u300d\u306b\u5909\u66f4\u3002\n\n![pla2.png](https://qiita-image-store.s3.amazonaws.com/0/156870/6ea44d84-155d-60ff-43d3-1eb84482cd02.png)\n\n\n#\u307e\u3068\u3081\n\u3000\u308f\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u7c21\u5358\u3060\u3051\u308c\u3069\u3082\u3001\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u8a2d\u5b9a\u306e\u554f\u984c\u3067\u3057\u305f\u3002\u3053\u308c\u3067\u3001Unified Memory\u306b\u9650\u3089\u305aCUDA\u306e\u6bd4\u8f03\u7684\u65b0\u3057\u3044\u6a5f\u80fd\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u3001unified memory\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u203b\u307e\u3041\u3053\u3093\u306a\u98a8\u306b\u3044\u3061\u3044\u3061\u3044\u308d\u3093\u306a\u753b\u9762\u3092\u958b\u304b\u306a\u304f\u3066\u3082\u3001Visual Studio\u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089``--gpu-architecture=sm_50``\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066''nvcc --gpu-architecture=sm_50 (\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d5\u30a1\u30a4\u30eb\u540d)''\u3063\u3066\u5f8c\u3067\u3084\u3063\u3066\u307f\u305f\u3089\u666e\u901a\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u305f\u3093\u3067\u3059\u3051\u3069\u306d\u2026\n##\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3000CUDA API\u95a2\u6570\u306e\u5410\u304f\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u62fe\u3046\u30de\u30af\u30ed``GET_ERR``\u306f``GET_ERR.h``\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp:sample_unified.cu\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <stdio.h>\n#include <string.h>\n\n#include \"GET_ERR.h\"\n\n__global__ void addKernel(int *c,const int *a,const int *b)\n{\n    int i = threadIdx.x;\n\tc[i] = a[i]+ b[i];\n}\n\nint main()\n{\n\t//\u8db3\u3057\u7b97\u3092\u3057\u305f\u3044\u30d9\u30af\u30c8\u30eba,b\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n    const int arraySize = 5;\n    const int a[arraySize] = { 1, 2, 3, 4, 5 };\n    const int b[arraySize] = { 10, 20, 30, 40, 50 };\n\t//unified\u30e1\u30e2\u30ea\u3092\u4f7f\u3046\u5909\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u5ba3\u8a00\u3059\u308b\n\tint * uni_a;\n\tint * uni_b;\n\tint * uni_c;\t//\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\n\n\t//\u4f7f\u7528\u3059\u308bdevice\u3092\u9078\u629e\n\tGET_ERR(cudaSetDevice(0));\n\n\t//Unified Memory\u3092\u78ba\u4fdd\n\tGET_ERR(cudaMallocManaged(&uni_c, arraySize * sizeof(int)));\n\tGET_ERR(cudaMallocManaged(&uni_a, arraySize * sizeof(int)));\n\tGET_ERR(cudaMallocManaged(&uni_b, arraySize * sizeof(int)));\n\n\t//\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\u3092\u521d\u671f\u5316\u3002CUDA API\u3092\u4f7f\u308f\u306a\u3044\u3002\n\tmemset(uni_c, 0, arraySize * sizeof(int));\n\n\t//a\u3001b\u3092\u30e6\u30cb\u30d5\u30a1\u30a4\u30c9\u30e1\u30e2\u30ea\u306b\u30b3\u30d4\u30fc\u3002CUDA API\u3092\u4f7f\u308f\u306a\u3044\n\tmemcpy(uni_a, a, arraySize * sizeof(int));\n\tmemcpy(uni_b, b, arraySize * sizeof(int));\n\n\t//Kernel\u3092\u8d77\u52d5\n\taddKernel << <1, arraySize >> >(uni_c,uni_a,uni_b);\n\n\t//\u30a8\u30e9\u30fc\u3092\u62fe\u3046\u30fb\u52d5\u4f5c\u7d42\u4e86\u307e\u3067\u5f85\u3064\n\tGET_ERR(cudaGetLastError());\n\tGET_ERR(cudaDeviceSynchronize());\n\n\t//\u7d50\u679c\u3092\u8868\u793a\u3002Unified Memory\u306a\u306e\u3067\u3001CPU\u5074\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\n    printf(\"{1,2,3,4,5} + {10,20,30,40,50} = {%d,%d,%d,%d,%d}\\n\",\n\t\tuni_c[0], uni_c[1], uni_c[2], uni_c[3], uni_c[4]);\n\n\t//\u9818\u57df\u306e\u89e3\u653e\u306ffree\u3067\u306f\u306a\u304fcudaFree\n\tcudaFree(uni_a);\n\tcudaFree(uni_b);\n\tcudaFree(uni_c);\n\n\tGET_ERR(cudaDeviceReset());\n\n\treturn 0;\n}\n\n```\n\n```cpp:GET_ERR.h\n#ifndef __GET_ERR_H_\n#define __GET_ERR_H_\n#include <stdio.h>\n#include <stdlib.h>\n\n//API\u95a2\u6570\u304b\u3089\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u3066\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3057\u3001\u7247\u3065\u3051\u3092\u3057\u305f\u5f8c\u3001exit\u3059\u308b\u95a2\u6570\u3002\nstatic void GetErr(cudaError_t err, const char *file, int line) {\n\tif (err != cudaSuccess) {\n\t\tfprintf(stderr, \"Error %s occurred, in File name %s at Line %d\\n\",cudaGetErrorString(err), file, line);\n\t\tcudaDeviceSynchronize();\n\t\tcudaDeviceReset();\n\t\texit(err);\n}\n}\n//GetErr\u3092\u547c\u3073\u51fa\u3059\u30de\u30af\u30ed\u3002\n#define GET_ERR( err ) do{GetErr( err, __FILE__, __LINE__ );}while(0)\n\n#endif\n```\n\n\n", "tags": ["CUDA", "GPGPU", "NVIDIA"]}