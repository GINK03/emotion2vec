{"context": " More than 1 year has passed since last update.\n\nreactor\u306e\u610f\u5473\n\n\u5316\u5b66\u53cd\u5fdc\u5668\u3001\u53cd\u5fdc\u88c5\u7f6e\n\u539f\u5b50\u7089\n\n\nfileno\u95a2\u6570\n\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u3092fileno\u306b\u6e21\u3059\u3068\u3001\n\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\nMojo::Reactor::Poll\u3067\u306f\u3001\nio\u3067\u6e21\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u30ad\u30fc\u3068\u3057\u3066$self->{io}\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\nexample.pl\nuse strict;\nuse warnings;\n\nopen my $fh1, 'test.txt' or die \"Can't open\";\nopen my $fh2, 'test.txt' or die \"Can't open\";\nwarn fileno $fh1;\nwarn fileno $fh2;\nclose $fh1;\nclose $fh2;\n\nopen my $fh3, 'test.txt' or die \"Can't open\";\nwarn fileno $fh3;\nclose $fh3;\n\n# 3 at fileno.pl line 6.\n# 4 at fileno.pl line 7.\n# 3 at fileno.pl line 12. -> close\u3057\u305f\u3089\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u304c\u518d\u5229\u7528\u3055\u308c\u308b\n\n\n\nIO::Poll\nMojo::Reactor::Poll\u3067\u306f\u3001\n\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u306fIO::Poll\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002\n\nMojo/Reactor/Poll.pm\n# \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u8a2d\u5b9a\n$poll->poll($timeout);\n\n# Read OK\u3068\u306a\u3063\u305f\u30cf\u30f3\u30c9\u30eb\u306b\u5bfe\u3057\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u884c\n++$i and $self->_sandbox('Read', $self->{io}{fileno $_}{cb}, 0)\n  for $poll->handles(POLLIN | POLLPRI | POLLHUP | POLLERR);\n\n# Write OK\u3068\u306a\u3063\u305f\u30cf\u30f3\u30c9\u30eb\u306b\u5bfe\u3057\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u884c\n++$i and $self->_sandbox('Write', $self->{io}{fileno $_}{cb}, 1)\n   for $poll->handles(POLLOUT);\n\n\n\ncomet\u306a\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3067IO::Poll\u3067\u66f8\u304b\u308c\u305f\u30b3\u30e1\u30c3\u30c8\u30b5\u30fc\u30d0\u3092Mojo::Reactor::Poll\u3067\u66f8\u304d\u76f4\u3057\u3066\u307f\u305f\u3002\nhttp://d.hatena.ne.jp/jojo_a_gogogo/20070802/1186055332\n\ncomet.pl\n\nuse strict;\nuse warnings;\nuse IO::Socket;\nuse Mojo::Reactor::Poll;\nuse Mojo::Message::Request;\n\nmy $port = shift || 3000;\n\nmy $server = IO::Socket::INET->new(\n    LocalPort => $port,\n    Listen    => 10,\n    Reuse     => 1,\n) or die $@;\n\nmy $clients = {};\nmy @messages = ();\n\nmy $poll = Mojo::Reactor::Poll->new;\n$poll->io($server => sub {\n    my ($reactor, $writable) = @_;\n    if (!$writable) {\n        my $socket = $server->accept;\n        $socket->blocking(0);\n        $poll->io($socket => sub {\n            my ($reactor, $writable) = @_;\n            if (!$writable) {\n                my $buf;\n                while (defined $socket->sysread($buf, 8192)) {\n                    my $req = Mojo::Message::Request->new;\n                    $req->parse($buf);\n\n                    unless ($buf) {\n                        remove($poll, $socket);\n                        last;\n                    }\n\n                    my $action = $req->param('a');\n\n                    if ($action eq 'write') {\n                        my $message = $req->param('message');\n                        my $nickname = $req->param('nickname');\n\n                        my $content = \"{\\\"message\\\":\\\"$message\\\", \\\"nickname\\\":\\\"$nickname\\\"}\";\n                        push @messages, $content;\n\n                        for my $client (values %{$clients}) {\n                            $client->syswrite(\n                                \"HTTP/1.1 200 OK\\r\\n\".\n                                \"Content-Type:text/html; charset=utf-8\\r\\n\".\n                                \"Content-Length:\".(length $content).\"\\r\\n\".\n                                \"Expires:-1\\r\\n\".\n                                \"Pragma:no-cache\\r\\n\".\n                                \"Cache-Control:must-revalidate, no-cache, no-store\\r\\n\".\n                                \"\\r\\n\".\n                                $content\n                            );\n                            remove($poll, $socket);\n                        }\n\n                        $clients = {};\n                    }\n                    elsif ($action eq 'poll') {\n                        #for debug\n                        print \"now polling...\".fileno($socket);\n                    }\n                    elsif ($action eq 'init') {\n                        #disconnect\n                        my $message;\n                        $message = join ',', @messages;\n                        $socket->syswrite(\"{\\\"init\\\":[\".$message.\"]}\");\n                        remove($poll, $socket);\n                    }\n                    else {\n                        #disconnect\n                        $socket->syswrite(\"oops bad request!!\");\n                        remove($poll, $socket);\n                    }\n                }\n            }\n        });\n        $clients->{fileno $socket} = $socket;\n    }\n    else {\n        warn \"write\";\n    }\n});\n\nsub remove {\n    my ($poll, $socket) = @_;\n    delete $clients->{fileno $socket};\n    $poll->remove($socket);\n    $socket->close();\n}\n\n$poll->start unless $poll->is_running;\n\n\n\n\u53c2\u8003\nhttps://metacpan.org/pod/Mojo::Reactor::Poll\nhttps://metacpan.org/pod/IO::Poll\n\n## reactor\u306e\u610f\u5473\n\n1. \u5316\u5b66\u53cd\u5fdc\u5668\u3001\u53cd\u5fdc\u88c5\u7f6e\n2. \u539f\u5b50\u7089\n\n\n## fileno\u95a2\u6570\n\n\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u3092fileno\u306b\u6e21\u3059\u3068\u3001\n\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\nMojo::Reactor::Poll\u3067\u306f\u3001\nio\u3067\u6e21\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u30ad\u30fc\u3068\u3057\u3066$self->{io}\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\n```perl:example.pl\nuse strict;\nuse warnings;\n\nopen my $fh1, 'test.txt' or die \"Can't open\";\nopen my $fh2, 'test.txt' or die \"Can't open\";\nwarn fileno $fh1;\nwarn fileno $fh2;\nclose $fh1;\nclose $fh2;\n\nopen my $fh3, 'test.txt' or die \"Can't open\";\nwarn fileno $fh3;\nclose $fh3;\n\n# 3 at fileno.pl line 6.\n# 4 at fileno.pl line 7.\n# 3 at fileno.pl line 12. -> close\u3057\u305f\u3089\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u304c\u518d\u5229\u7528\u3055\u308c\u308b\n```\n\n\n## IO::Poll\n\nMojo::Reactor::Poll\u3067\u306f\u3001\n\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u306fIO::Poll\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002\n\n```perl:Mojo/Reactor/Poll.pm\n# \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u8a2d\u5b9a\n$poll->poll($timeout);\n\n# Read OK\u3068\u306a\u3063\u305f\u30cf\u30f3\u30c9\u30eb\u306b\u5bfe\u3057\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u884c\n++$i and $self->_sandbox('Read', $self->{io}{fileno $_}{cb}, 0)\n  for $poll->handles(POLLIN | POLLPRI | POLLHUP | POLLERR);\n\n# Write OK\u3068\u306a\u3063\u305f\u30cf\u30f3\u30c9\u30eb\u306b\u5bfe\u3057\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u884c\n++$i and $self->_sandbox('Write', $self->{io}{fileno $_}{cb}, 1)\n   for $poll->handles(POLLOUT);\n```\n\n\n## comet\u306a\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\n\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3067IO::Poll\u3067\u66f8\u304b\u308c\u305f\u30b3\u30e1\u30c3\u30c8\u30b5\u30fc\u30d0\u3092Mojo::Reactor::Poll\u3067\u66f8\u304d\u76f4\u3057\u3066\u307f\u305f\u3002\nhttp://d.hatena.ne.jp/jojo_a_gogogo/20070802/1186055332\n\n\n```perl:comet.pl\n\nuse strict;\nuse warnings;\nuse IO::Socket;\nuse Mojo::Reactor::Poll;\nuse Mojo::Message::Request;\n\nmy $port = shift || 3000;\n\nmy $server = IO::Socket::INET->new(\n    LocalPort => $port,\n    Listen    => 10,\n    Reuse     => 1,\n) or die $@;\n\nmy $clients = {};\nmy @messages = ();\n\nmy $poll = Mojo::Reactor::Poll->new;\n$poll->io($server => sub {\n    my ($reactor, $writable) = @_;\n    if (!$writable) {\n        my $socket = $server->accept;\n        $socket->blocking(0);\n        $poll->io($socket => sub {\n            my ($reactor, $writable) = @_;\n            if (!$writable) {\n                my $buf;\n                while (defined $socket->sysread($buf, 8192)) {\n                    my $req = Mojo::Message::Request->new;\n                    $req->parse($buf);\n\n                    unless ($buf) {\n                        remove($poll, $socket);\n                        last;\n                    }\n\n                    my $action = $req->param('a');\n\n                    if ($action eq 'write') {\n                        my $message = $req->param('message');\n                        my $nickname = $req->param('nickname');\n\n                        my $content = \"{\\\"message\\\":\\\"$message\\\", \\\"nickname\\\":\\\"$nickname\\\"}\";\n                        push @messages, $content;\n\n                        for my $client (values %{$clients}) {\n                            $client->syswrite(\n                                \"HTTP/1.1 200 OK\\r\\n\".\n                                \"Content-Type:text/html; charset=utf-8\\r\\n\".\n                                \"Content-Length:\".(length $content).\"\\r\\n\".\n                                \"Expires:-1\\r\\n\".\n                                \"Pragma:no-cache\\r\\n\".\n                                \"Cache-Control:must-revalidate, no-cache, no-store\\r\\n\".\n                                \"\\r\\n\".\n                                $content\n                            );\n                            remove($poll, $socket);\n                        }\n\n                        $clients = {};\n                    }\n                    elsif ($action eq 'poll') {\n                        #for debug\n                        print \"now polling...\".fileno($socket);\n                    }\n                    elsif ($action eq 'init') {\n                        #disconnect\n                        my $message;\n                        $message = join ',', @messages;\n                        $socket->syswrite(\"{\\\"init\\\":[\".$message.\"]}\");\n                        remove($poll, $socket);\n                    }\n                    else {\n                        #disconnect\n                        $socket->syswrite(\"oops bad request!!\");\n                        remove($poll, $socket);\n                    }\n                }\n            }\n        });\n        $clients->{fileno $socket} = $socket;\n    }\n    else {\n        warn \"write\";\n    }\n});\n\nsub remove {\n    my ($poll, $socket) = @_;\n    delete $clients->{fileno $socket};\n    $poll->remove($socket);\n    $socket->close();\n}\n\n$poll->start unless $poll->is_running;\n```\n\n## \u53c2\u8003\n\nhttps://metacpan.org/pod/Mojo::Reactor::Poll\nhttps://metacpan.org/pod/IO::Poll\n", "tags": ["Mojolicious"]}