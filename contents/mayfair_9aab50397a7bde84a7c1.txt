{"context": "\n\n\u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\nArduino\u306e\u7279\u5fb4\u306e1\u3064\u306b\u3001\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\u30dc\u30fc\u30c9\u4ee5\u5916\u3067\u3082\u3001\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\u30dc\u30fc\u30c9\u3068\u540c\u3058Arduino IDE\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306a\u62e1\u5f35\u6a5f\u80fd\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6a19\u6e96\u30dc\u30fc\u30c9\u306eArduino Uno\u3067\u30d7\u30ed\u30c8\u30bf\u30a4\u30d4\u30f3\u30b0\u3057\u3066\u3044\u305f\u3082\u306e\u3092Adafruit\u306eTrinket - Mini\u306b\u7f6e\u304d\u63db\u3048\u3066\u5c0f\u578b\u5316\u304b\u3064\u4f4e\u4fa1\u683c\u5316\u3059\u308b\u3001Feather 32u4 Bluefruit LE\u306b\u7f6e\u304d\u63db\u3048\u3066Bluetooh Low Energy\u3067\u306e\u901a\u4fe1\u6a5f\u80fd\u3068\u30d0\u30c3\u30c6\u30ea\u5145\u96fb\u6a5f\u80fd\u3092\u62e1\u5f35\u3059\u308b\u3068\u540c\u6642\u306b\u5c0f\u578b\u5316\u3059\u308b\u3001\u3068\u3044\u3063\u305f\u3053\u3068\u3092\u3057\u3064\u3064\u540c\u3058Arduino IDE\u3092\u4f7f\u3044\u7d9a\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3059\u3002\n\u305d\u3046\u3057\u305f\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\u30dc\u30fc\u30c9\u4ee5\u5916\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u3057\u3066\u6ce8\u76ee\u3055\u308c\u3066\u3044\u308b\u306e\u304cESP8266\u3067\u3059\u3002ESP8266\u306fEspressif Systems\u304c\u958b\u767a\u3057\u305f\u5c0f\u578b\u3067\u5b89\u4fa1\u306aWi-Fi\u30c1\u30c3\u30d7\u3067\u3001\u3053\u306e\u30c1\u30c3\u30d7\u3092\u63a1\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u591a\u6570\u8ca9\u58f2\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4e2d\u306e1\u3064\u3001\u540c\u793e\u306b\u3088\u308bESP-WROOM-02\u306f\u65e5\u672c\u3067\u3082\u5165\u624b\u3057\u3084\u3059\u304f\u3001TELEC\u306b\u3088\u308b\u6280\u8853\u57fa\u6e96\u9069\u5408\u8a3c\u660e\u30fb\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\u3092\u53d7\u3051\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u5b89\u5fc3\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30d7\u30ed\u30c8\u30bf\u30a4\u30d4\u30f3\u30b0\u3067\u4f7f\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u958b\u767a\u30dc\u30fc\u30c9\u306f\u591a\u6570\u767a\u58f2\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u4e2d\u3067\u3082\u4f7f\u3044\u3084\u3059\u3044\u3068\u601d\u308f\u308c\u308b\u3082\u306e\u306e1\u3064\u304c\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u306b\u3088\u308b\u300cESP-WROOM-02\u300d\u3067\u3059\u3002\n\n\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306fESP-WROOM-02 Wi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u3068USB-\u30b7\u30ea\u30a2\u30eb\u5909\u63dbIC FT231XS\u30013.3V\u51fa\u529b\u306e\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u3084\u30ea\u30bb\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1\u3001\u52d5\u4f5c\u30e2\u30fc\u30c9\u5207\u66ff\u7528\u30b9\u30a4\u30c3\u30c1\u306a\u3069\u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30d4\u30f3\u30d8\u30c3\u30c0\u3092\u306f\u3093\u3060\u4ed8\u3051\u3057\u3066\u30de\u30a4\u30af\u30edUSB\u30b1\u30fc\u30d6\u30eb\u3092\u7528\u610f\u3059\u308b\u3060\u3051\u3067\u3059\u3050\u306b\u4f7f\u3044\u59cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u3053\u306e\u958b\u767a\u30dc\u30fc\u30c9\u3092Arduino IDE\u304b\u3089\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3001myThings\u306eIDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u8a66\u3059\u3068\u3053\u308d\u307e\u3067\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u6e96\u5099\n\u4ee5\u4e0b\u306fArduino LCC\u306b\u3088\u308bArduino IDE 1.6.6\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c9\u30e9\u30a4\u30d0\uff08Mac OS X\u306e\u5834\u5408\uff09\nMac OS X\u3067\u306f\u3001OS X 10.9\uff08Mavericks\uff09\u4ee5\u964d\u306f\u6a19\u6e96\u3067FTDI\u306eUSB-\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30c1\u30c3\u30d7\u7528\u306e\u300c\u7c21\u6613\u300d\u30c9\u30e9\u30a4\u30d0\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\u3002Mac OS X\u306e10.11.3\u3067\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d\u3001\u3053\u306e\u30c9\u30e9\u30a4\u30d0\uff08\u30d0\u30fc\u30b8\u30e7\u30f3\u306f5.0.0\uff09\u3067\u30b9\u30b1\u30c3\u30c1\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306e\u30aa\u30fc\u30c8\u30ea\u30bb\u30c3\u30c8\u3082\u542b\u3081\u3066\u52d5\u4f5c\u3059\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u306e\u74b0\u5883\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u65b0\u305f\u306bFTDI\u7248\u306e\u30c9\u30e9\u30a4\u30d0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3080\u3057\u308d\u3001FTDI\u7248\u306e\u30c9\u30e9\u30a4\u30d0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001USB\u30dd\u30fc\u30c8\u304b\u3089\u629c\u3044\u305f\u5f8c\u3001\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u307e\u3067\u305d\u306e\u30dd\u30fc\u30c8\u304c\u4f7f\u3048\u306a\u304f\u306a\u308b\u3068\u3044\u3046\u554f\u984c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u53e4\u3044\u8a18\u4e8b\u3067\u306fFTDI\u7248\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\nESP8266\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\n\nArduino IDE\u3092\u8d77\u52d5\u3059\u308b\nPreferences...\u2192Settings\u2192Additional Boards Managers URLs\u306b\u958b\u767a\u7248\u306e\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u7528\u30ea\u30f3\u30af\uff08Arduino core for ESP8266 WiFi chip\u306eGitHub\u3067\u300cStable version\u300d\u3068\u3057\u3066\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u3082\u306e\uff09\u300chttp://arduino.esp8266.com/stable/package_esp8266com_index.json\u300d\u3092\u5165\u529b\u3059\u308b\n\u30c4\u30fc\u30eb\u2192\u30de\u30a4\u30b3\u30f3\u30dc\u30fc\u30c9\u2192\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc...\u3092\u9078\u629e\u3057\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u958b\u304f\n\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3067\u300cesp8266 by ESP8266 Community\u300d\u3092\u9078\u629e\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u7d42\u308f\u3063\u305f\u3089\u30c4\u30fc\u30eb\u2192\u30de\u30a4\u30b3\u30f3\u30dc\u30fc\u30c9\u3067\u8868\u793a\u3055\u308c\u308b\u30e1\u30cb\u30e5\u30fc\u304b\u3089Generic ESP8266 Module\u3092\u9078\u629e\u3059\u308b\n\u30c4\u30fc\u30eb\u2192Reset Method\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306eck\u304b\u3089nodemcu\u306b\u5909\u66f4\u3059\u308b\n\n\n\u203b\u3053\u306e\u8a18\u4e8b\u306f2.0.0\u3067\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u304c\u5c06\u6765\u7684\u306b\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u4ee5\u4e0a\u3067Arduino IDE\u3067ESP8266\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\n\n\u30b9\u30b1\u30c3\u30c1\u2192Include Library...\u2192Manage Libraries...\u3067Library Manager\u3092\u958b\u304f\nLibrary Manager\u3067\u300cPubSubClient by Nick O'Leary\u300d\u3092\u9078\u629e\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\u540c\u69d8\u306b\u300cArduinoJson by Benoit Blanchon\u300d\u3092\u9078\u629e\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\u540c\u69d8\u306b\u300cAdafruit HDC1000 Library by Adafruit\u300d\u3092\u9078\u629e\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\nArduino\u30d5\u30a9\u30eb\u30c0\uff08Mac OS X\u306e\u5834\u5408\u306b\u306f\u66f8\u985e/Arduino\uff09\u306e\u4e2d\u306b\u3042\u308blibraries\u30d5\u30a9\u30eb\u30c0\u3092\u958b\u304f\nlibraries\u2192PubSubClient\u2192src\u3068\u9806\u306b\u305f\u3069\u308a\u3001\u305d\u306e\u4e2d\u306b\u3042\u308bPubSubClient.h\u3092\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304f\n23\u884c\u76ee\u306eMQTT_MAX_PACKET_SIZE\u306e\u5024\u3092256\u304b\u30891000\u306b\u5909\u66f4\u3059\u308b\n\n\n\u203b\u3053\u306e\u8a18\u4e8b\u306f2.4.0\u3067\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u304c\u5c06\u6765\u7684\u306b\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u5909\u66f4\u524d\n\nPubSubClient.h\n// MQTT_MAX_PACKET_SIZE : Maximum packet size\n#define MQTT_MAX_PACKET_SIZE 256\n\n\n\u5909\u66f4\u5f8c\n\nPubSubClient.h\n// MQTT_MAX_PACKET_SIZE : Maximum packet size\n#define MQTT_MAX_PACKET_SIZE 1000\n\n\n\u4ee5\u4e0a\u3067MQTT\u7528\u30e9\u30a4\u30d6\u30e9\u30eaPubSubClient\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\u4ee5\u4e0b\u306fmyThings\u306eIDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u7528\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u305fIDCF Cloud\u30b5\u30fc\u30d0\u306bMQTT\u3067\u63a5\u7d9a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u7fa4\u3067\u3059\u3002\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u306fGitHub\u304b\u3089\u5165\u624b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/kotobuki/esp8266_examples\n\nPublisher\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067IDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u30b5\u30fc\u30d0\u306b\u6e29\u6e7f\u5ea6\u30bb\u30f3\u30b5HDC1000\u304b\u3089\u8aad\u307f\u53d6\u3063\u305f\u6e29\u5ea6\u3068\u6e7f\u5ea6\u306e\u30c7\u30fc\u30bf\u3092publish\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n{\n  \"devices\": [\n    \"********-****-****-****-************\"\n  ],\n  \"payload\": {\n    \"temperature\": 24.91,\n    \"humidity\": 58.65\n  }\n}\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u4e2d\u3067\u3001config.h\u306e\u4e2d\u3067\u300c****\u300d\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306f\u30c0\u30df\u30fc\u306e\u5024\u3067\u3059\u306e\u3067\u3001\u81ea\u5206\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u30b5\u30fc\u30d0\u306e\u60c5\u5831\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\nconfig.h\n// MQTT\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\uff08\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u30b9\u30b1\u30c3\u30c1\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u65e5\u4ed8\u3068\u6642\u523b\u3092\u4f7f\u7528\uff09\nconst char *mqtt_client_id = \"publisher\" __DATE__ __TIME__;\n\n// Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306eSSID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\nconst char *ssid = \"********\";\nconst char *password = \"********\";\n\n// IDCF Cloud\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\nconst char *server = \"210-***-***-***.jp-east.compute.idcfcloud.com\";\nconst char* trigger_1_uuid = \"********-****-****-****-************\";\nconst char* trigger_1_token = \"********\";\nconst char* action_1_uuid = \"********-****-****-****-************\";\nconst char* action_2_uuid = \"********-****-****-****-************\";\n\n\n\u3082\u3057trigger\u3084action\u306euuid\u3084token\u304c\u5206\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u30b5\u30fc\u30d0\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nssh root@210.***.***.*** -o PreferredAuthentications=password\n...\nroot@210.***.***.***'s password: \u30d1\u30b9\u30ef\u30fc\u30c9\n$ cd ~/iot_apps/meshblu-compose\n$ docker-compose run --rm iotutil owner\n$ docker-compose run --rm iotutil list\n\n\u4ee5\u4e0b\u304c\u30b9\u30b1\u30c3\u30c1\u306e\u672c\u4f53\u3067\u3059\u3002\n\nMQTT_Publisher.ino\n#include <Wire.h>\n\n#include <ESP8266WiFi.h>\n\n// MQTT\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n#include <PubSubClient.h>\n\n// JSON\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n#include <ArduinoJson.h>\n\n// HDC1000\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n#include <Adafruit_HDC1000.h>\n\n// \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\n#include \"config.h\"\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nAdafruit_HDC1000 hdc1000 = Adafruit_HDC1000();\n\n// \u6e29\u5ea6\u3068\u6e7f\u5ea6\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\nfloat temperature = 0.0;\nfloat humidity = 0.0;\n\n// \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  // \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u5fc5\u8981\u306a\u51e6\u7406\u304c\u3042\u308c\u3070\u3053\u3053\u3067\n}\n\nvoid setup() {\n  // I2C\u306e\u901a\u4fe1\u3092\u958b\u59cb\n  // SDA: DIO4\n  // SCL: DIO5\n  Wire.begin();\n\n  // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u958b\u59cb\n  Serial.begin(115200);\n  delay(10);\n  Serial.println();\n  Serial.println();\n\n  // HDC1000\u3092\u8a2d\u5b9a\n  hdc1000.begin();\n}\n\nvoid loop() {\n  // Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u63a5\u7d9a\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\"Connecting to \");\n    Serial.print(ssid);\n    Serial.println(\"...\");\n    WiFi.begin(ssid, password);\n\n    if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n      // Wi-Fi\u30a2\u30af\u30b9\u30dd\u30a4\u30f3\u30c8\u3078\u306e\u63a5\u7d9a\u306b\u5931\u6557\u3057\u305f\u30895\u79d2\u9593\u5f85\u3063\u3066\u30ea\u30c8\u30e9\u30a4\n      Serial.println(\"Failed to connect\");\n      delay(5000);\n      return;\n    } else {\n      Serial.print(\"WiFi connected: \");\n      Serial.println(WiFi.localIP());\n      client.setServer(server, 1883);\n    }\n  }\n\n  // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304cICDF Cloud\u306e\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\n  if (!client.connected()) {\n    // \u30c8\u30ea\u30ac\u30fc1\u306eUUID\u3068\u30c8\u30fc\u30af\u30f3\u3092\u30e6\u30fc\u30b6\u540d\u304a\u3088\u3073\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u3057\u3066\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\n    client.connect(mqtt_client_id, trigger_1_uuid, trigger_1_token);\n\n    if (client.connected()) {\n      Serial.print(\"MQTT connected: \");\n      Serial.println(server);\n      client.setCallback(callback);\n    } else {\n      Serial.print(\"MQTT connection failed: \");\n      Serial.println(client.state());\n      delay(5000);\n    }\n  } else {\n    // \u65e2\u306b\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308c\u3070\u901a\u5e38\u51e6\u7406\u3092\u884c\u3046\n    client.loop();\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304cICDF Cloud\u306e\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u305f\u3089\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\n    // \u6e29\u5ea6\u3068\u6e7f\u5ea6\u3092\u53d6\u5f97\n    temperature = hdc1000.readTemperature();\n    humidity = hdc1000.readHumidity();\n\n    // JSON\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u30da\u30a4\u30ed\u30fc\u30c9\u3092\u7528\u610f\n    StaticJsonBuffer<200> jsonBuffer;\n    JsonObject& root = jsonBuffer.createObject();\n    JsonArray& devices = root.createNestedArray(\"devices\");\n    devices.add(action_1_uuid);\n//    devices.add(action_2_uuid);\n    JsonObject& payload = root.createNestedObject(\"payload\");\n    payload[\"temperature\"] = temperature;\n    payload[\"humidity\"] = humidity;\n    root.prettyPrintTo(Serial);\n    Serial.println();\n\n    char buffer[256];\n    root.printTo(buffer, sizeof(buffer));\n\n    // IDCF Cloud\u306bMQTT\u3067\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\n    bool sent = client.publish(\"message\", buffer);\n    if (sent) {\n      Serial.println(\"Published\");\n    } else {\n      Serial.println(\"Failed to publish\");\n    }\n\n    Serial.println();\n  }\n\n  delay(10000);\n}\n\n\n\nTrigger\nPublisher\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3067HTTP\u3067trigger-1\u3092\u30c8\u30ea\u30ac\u30fc\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\uff08config.h\u306fPublisher\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u540c\u4e00\u306e\u305f\u3081\u7701\u7565\u3057\u3066\u3044\u307e\u3059\uff09\u3002\n\nHTTP_Trigger.ino\n#include <Wire.h>\n\n#include <ESP8266WiFi.h>\n\n// HDC1000\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n#include <Adafruit_HDC1000.h>\n\n// \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\n#include \"config.h\"\n\nWiFiClient wifiClient;\n\nAdafruit_HDC1000 hdc1000 = Adafruit_HDC1000();\n\nfloat temperature = 0.0;\nfloat humidity = 0.0;\n\nvoid printFormattedFloat(float val) {\n  char buffer[10];\n\n  dtostrf(val, 4, 2, buffer);\n  Serial.print(buffer);\n}\n\nvoid setup() {\n  // I2C\u306e\u901a\u4fe1\u3092\u958b\u59cb\n  // SDA: DIO4\n  // SCL: DIO5\n  Wire.begin();\n\n  // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u958b\u59cb\n  Serial.begin(115200);\n  delay(10);\n  Serial.println();\n  Serial.println();\n\n  // HDC1000\u3092\u8a2d\u5b9a\n  hdc1000.begin();\n}\n\nvoid loop() {\n  // Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u63a5\u7d9a\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\"Connecting to \");\n    Serial.print(ssid);\n    Serial.println(\"...\");\n    WiFi.begin(ssid, password);\n\n    if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n      // Wi-Fi\u30a2\u30af\u30b9\u30dd\u30a4\u30f3\u30c8\u3078\u306e\u63a5\u7d9a\u306b\u5931\u6557\u3057\u305f\u30895\u79d2\u9593\u5f85\u3063\u3066\u30ea\u30c8\u30e9\u30a4\n      Serial.println(\"Failed to connect\");\n      delay(5000);\n      return;\n    } else {\n      Serial.print(\"WiFi connected: \");\n      Serial.println(WiFi.localIP());\n    }\n  }\n\n  // HDC1000\u304b\u3089\u6e2c\u5b9a\u5024\u3092\u8aad\u307f\u53d6\u308b\n  temperature = hdc1000.readTemperature();\n  humidity = hdc1000.readHumidity();\n\n  // \u8aad\u307f\u53d6\u3063\u305f\u6e29\u5ea6\u3092\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\n  Serial.print(\"Temperature: \");\n  printFormattedFloat(temperature);\n  Serial.println(\"\u00baC\");\n\n  // \u3082\u3057\u73fe\u5728\u306e\u6e29\u5ea6\u304c\u95be\u5024\u3088\u308a\u3082\u9ad8\u3051\u308c\u3070\u4ee5\u4e0b\u3092\u5b9f\u884c\n  if (temperature > threshold) {\n    Serial.print(\"Connecting to \");\n    Serial.println(server);\n    WiFiClient client;\n    if (!client.connect(server, 80)) {\n      Serial.println(\"Connection failed\");\n      return;\n    }\n\n    // IDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u30b5\u30fc\u30d0\u306e/data/{trigger-1\u306euuid}\u306bHTTP POST\n    String url = \"/data/\";\n    url += trigger_1_uuid;\n    client.print(String(\"POST \") + url + \" HTTP/1.1\\r\\n\" +\n                 \"Host: \" + server + \"\\r\\n\" +\n                 \"meshblu_auth_uuid: \" + trigger_1_uuid + \"\\r\\n\" +\n                 \"meshblu_auth_token: \" + trigger_1_token + \"\\r\\n\" +\n                 \"Connection: close\\r\\n\\r\\n\");\n    delay(100);\n\n    while (client.available()) {\n      String line = client.readStringUntil('\\r');\n      Serial.print(line);\n    }\n  }\n\n  delay(5000);\n}\n\n\n\nSubscriber\nmyThings\u304b\u3089\u9001\u4fe1\u3055\u308c\u3066\u304f\u308bJSON\u5f62\u5f0f\u306e\u30da\u30a4\u30ed\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff08\u3053\u308c\u306f\u5929\u6c17\u30fb\u707d\u5bb3\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u672c\u65e5\u306e\u5929\u6c17\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u3057\u305f\u4f8b\u3067\u3059\uff09\u3002\n{\"topic\":\"message\",\"data\":{\"devices\":[\"********-****-****-****-************\"],\"payload\":\"\u6674\u6642\u3005\u66c7\",\"fromUuid\":\"********-****-****-****-************\"}}\n\nIDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u52d5\u4f5c\u3059\u308bIDCF Cloud\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3057\u3001MQTT\u3067action-1\u3092subscribe\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u6307\u5b9a\u3057\u305f\u30c8\u30ea\u30ac\u30fc\u304c\u8d77\u304d\u305f\u3068\u304d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u30b5\u30f3\u30d7\u30eb\u304c\u4ee5\u4e0b\u306e\u3082\u306e\u3067\u3059\u3002\n\nconfig.h\n// MQTT\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\uff08\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u30b9\u30b1\u30c3\u30c1\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u65e5\u4ed8\u3068\u6642\u523b\u3092\u4f7f\u7528\uff09\nconst char *mqtt_client_id = \"kotobuki\" __DATE__ __TIME__;\n\n// Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306eSSID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\nconst char *ssid =  \"********\";\nconst char *pass =  \"********\";\n\n// IDCF Cloud\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\nconst char* action_1_uuid = \"********-****-****-****-************\";\nconst char* action_1_token = \"********\";\nIPAddress server(210, ***, ***, ***);\n\n\n\nMQTT_Subscriber.ino\n#include <ESP8266WiFi.h>\n#include <PubSubClient.h>\n#include <ArduinoJson.h>\n\n#include \"config.h\"\n\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  // PubSubClient.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bMQTT\u306e\u6700\u5927\u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba\n  char buffer[MQTT_MAX_PACKET_SIZE];\n\n  snprintf(buffer, sizeof(buffer), \"%s\", payload);\n  Serial.print(\"Received: \");\n  Serial.println(buffer);\n\n  // \u53d7\u3051\u53d6\u3063\u305fJSON\u5f62\u5f0f\u306e\u30da\u30a4\u30ed\u30fc\u30c9\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n  StaticJsonBuffer<MQTT_MAX_PACKET_SIZE> jsonBuffer;\n  JsonObject& root = jsonBuffer.parseObject(buffer);\n\n  if (!root.success()) {\n    Serial.println(\"parseObject() failed\");\n    return;\n  }\n\n  const char* parsedPayload = root[\"data\"][\"payload\"];\n  if (parsedPayload != NULL) {\n    Serial.print(\"payload: \");\n    Serial.println(parsedPayload);\n\n    // \u30da\u30a4\u30ed\u30fc\u30c9\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u3053\u3053\u306b\n  }\n}\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n  Serial.println();\n  Serial.println();\n}\n\nvoid loop() {\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\"Connecting to \");\n    Serial.print(ssid);\n    Serial.println(\"...\");\n    WiFi.begin(ssid, pass);\n\n    if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n      // Wi-Fi\u30a2\u30af\u30b9\u30dd\u30a4\u30f3\u30c8\u3078\u306e\u63a5\u7d9a\u306b\u5931\u6557\u3057\u305f\u30895\u79d2\u9593\u5f85\u3063\u3066\u30ea\u30c8\u30e9\u30a4\n      delay(5000);\n      return;\n    } else {\n      Serial.print(\"WiFi connected: \");\n      Serial.println(WiFi.localIP());\n      client.setServer(server, 1883);\n    }\n  }\n\n  // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\n  if (!client.connected()) {\n    // \u30a2\u30af\u30b7\u30e7\u30f31\u306eUUID\u3068\u30c8\u30fc\u30af\u30f3\u3092\u30e6\u30fc\u30b6\u540d\u304a\u3088\u3073\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u3057\u3066\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\n    client.connect(mqtt_client_id, action_1_uuid, action_1_token);\n\n    if (client.connected()) {\n      Serial.print(\"MQTT connected: \");\n      Serial.println(server);\n      client.setCallback(callback);\n      client.subscribe(action_1_uuid);\n    } else {\n      Serial.print(\"MQTT connection failed: \");\n      Serial.println(client.state());\n      delay(5000);\n    }\n  } else {\n    // \u65e2\u306b\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308c\u3070\u901a\u5e38\u51e6\u7406\u3092\u884c\u3046\n    client.loop();\n  }\n}\n\n\n\n\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\n\u518d\u73fe\u6761\u4ef6\u306f\u4e0d\u660e\u3067\u3059\u304c\u3001USB\u30b1\u30fc\u30d6\u30eb\u3092\u629c\u304d\u5dee\u3057\u3057\u3066\u3044\u308b\u3046\u3061\u306b\u958b\u767a\u30dc\u30fc\u30c9\u4e0a\u306eUSB\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30c1\u30c3\u30d7\u3092\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3068\u3057\u3066\u8a8d\u8b58\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002USB\u30b1\u30fc\u30d6\u30eb\u3092\u629c\u3044\u305f\u72b6\u614b\u3067\u3001\u30a2\u30c3\u30d7\u30eb\u30e1\u30cb\u30e5\u30fc\u2192\u3053\u306eMac\u306b\u3064\u3044\u3066\u2192\u30b7\u30b9\u30c6\u30e0\u30ec\u30dd\u30fc\u30c8\u2026\u3067USB\u3092\u9078\u629e\u3057\u305f\u6642\u306b\u300cFT231X USB UART\u300d\u3068\u3044\u3046\u30c7\u30d0\u30a4\u30b9\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3042\u308c\u3070\u8a72\u5f53\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u6642\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u518d\u8d77\u52d5\u3067\u89e3\u6d88\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u89e3\u6d88\u3057\u306a\u3044\u5834\u5408\u306fApple\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3067\u306e\u8aac\u660e\u306b\u5f93\u3063\u3066NVRAM\u306e\u30ea\u30bb\u30c3\u30c8\u3092\u8a66\u3057\u3066\u307f\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u304a\u308f\u308a\u306b\nESP8266\u304a\u3088\u3073ESP8266\u7528Arduino\u30b3\u30a2\u306f\u30db\u30c3\u30c8\u306a\u8a71\u984c\u3067\u3042\u308a\u3001\u523b\u3005\u3068\u5909\u5316\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u3001\u53e4\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u5185\u5bb9\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u7b49\u3067\u304a\u77e5\u3089\u305b\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n# \u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\n\nArduino\u306e\u7279\u5fb4\u306e1\u3064\u306b\u3001\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\u30dc\u30fc\u30c9\u4ee5\u5916\u3067\u3082\u3001\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\u30dc\u30fc\u30c9\u3068\u540c\u3058Arduino IDE\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306a\u62e1\u5f35\u6a5f\u80fd\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6a19\u6e96\u30dc\u30fc\u30c9\u306eArduino Uno\u3067\u30d7\u30ed\u30c8\u30bf\u30a4\u30d4\u30f3\u30b0\u3057\u3066\u3044\u305f\u3082\u306e\u3092Adafruit\u306e[Trinket - Mini](https://www.adafruit.com/products/1500)\u306b\u7f6e\u304d\u63db\u3048\u3066\u5c0f\u578b\u5316\u304b\u3064\u4f4e\u4fa1\u683c\u5316\u3059\u308b\u3001[Feather 32u4 Bluefruit LE](https://www.adafruit.com/products/2829)\u306b\u7f6e\u304d\u63db\u3048\u3066Bluetooh Low Energy\u3067\u306e\u901a\u4fe1\u6a5f\u80fd\u3068\u30d0\u30c3\u30c6\u30ea\u5145\u96fb\u6a5f\u80fd\u3092\u62e1\u5f35\u3059\u308b\u3068\u540c\u6642\u306b\u5c0f\u578b\u5316\u3059\u308b\u3001\u3068\u3044\u3063\u305f\u3053\u3068\u3092\u3057\u3064\u3064\u540c\u3058Arduino IDE\u3092\u4f7f\u3044\u7d9a\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3059\u3002\n\n\u305d\u3046\u3057\u305f\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\u30dc\u30fc\u30c9\u4ee5\u5916\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u3057\u3066\u6ce8\u76ee\u3055\u308c\u3066\u3044\u308b\u306e\u304c[ESP8266](http://espressif.com/en/products/esp8266/)\u3067\u3059\u3002ESP8266\u306f[Espressif Systems](http://espressif.com/)\u304c\u958b\u767a\u3057\u305f\u5c0f\u578b\u3067\u5b89\u4fa1\u306aWi-Fi\u30c1\u30c3\u30d7\u3067\u3001\u3053\u306e\u30c1\u30c3\u30d7\u3092\u63a1\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u591a\u6570\u8ca9\u58f2\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4e2d\u306e1\u3064\u3001\u540c\u793e\u306b\u3088\u308b[ESP-WROOM-02](http://espressif.com/en/products/wroom/)\u306f\u65e5\u672c\u3067\u3082\u5165\u624b\u3057\u3084\u3059\u304f\u3001TELEC\u306b\u3088\u308b\u6280\u8853\u57fa\u6e96\u9069\u5408\u8a3c\u660e\u30fb\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\u3092\u53d7\u3051\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u5b89\u5fc3\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30d7\u30ed\u30c8\u30bf\u30a4\u30d4\u30f3\u30b0\u3067\u4f7f\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u958b\u767a\u30dc\u30fc\u30c9\u306f\u591a\u6570\u767a\u58f2\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u4e2d\u3067\u3082\u4f7f\u3044\u3084\u3059\u3044\u3068\u601d\u308f\u308c\u308b\u3082\u306e\u306e1\u3064\u304c\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u306b\u3088\u308b\u300c[ESP-WROOM-02](https://www.switch-science.com/catalog/2500/)\u300d\u3067\u3059\u3002\n\n![PB250262.jpg](https://qiita-image-store.s3.amazonaws.com/0/92577/11d6a221-76e1-3350-7fd1-1224e5ab967b.jpeg)\n\n\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306fESP-WROOM-02 Wi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u3068USB-\u30b7\u30ea\u30a2\u30eb\u5909\u63dbIC FT231XS\u30013.3V\u51fa\u529b\u306e\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u3084\u30ea\u30bb\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1\u3001\u52d5\u4f5c\u30e2\u30fc\u30c9\u5207\u66ff\u7528\u30b9\u30a4\u30c3\u30c1\u306a\u3069\u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30d4\u30f3\u30d8\u30c3\u30c0\u3092\u306f\u3093\u3060\u4ed8\u3051\u3057\u3066\u30de\u30a4\u30af\u30edUSB\u30b1\u30fc\u30d6\u30eb\u3092\u7528\u610f\u3059\u308b\u3060\u3051\u3067\u3059\u3050\u306b\u4f7f\u3044\u59cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u3053\u306e\u958b\u767a\u30dc\u30fc\u30c9\u3092Arduino IDE\u304b\u3089\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3001myThings\u306eIDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u8a66\u3059\u3068\u3053\u308d\u307e\u3067\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n# \u6e96\u5099\n\n\u4ee5\u4e0b\u306fArduino LCC\u306b\u3088\u308b[Arduino IDE 1.6.6](https://www.arduino.cc/en/Main/Software)\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u30c9\u30e9\u30a4\u30d0\uff08Mac OS X\u306e\u5834\u5408\uff09\n\nMac OS X\u3067\u306f\u3001OS X 10.9\uff08Mavericks\uff09\u4ee5\u964d\u306f\u6a19\u6e96\u3067FTDI\u306eUSB-\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30c1\u30c3\u30d7\u7528\u306e\u300c\u7c21\u6613\u300d\u30c9\u30e9\u30a4\u30d0\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\u3002Mac OS X\u306e10.11.3\u3067\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d\u3001\u3053\u306e\u30c9\u30e9\u30a4\u30d0\uff08\u30d0\u30fc\u30b8\u30e7\u30f3\u306f5.0.0\uff09\u3067\u30b9\u30b1\u30c3\u30c1\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306e\u30aa\u30fc\u30c8\u30ea\u30bb\u30c3\u30c8\u3082\u542b\u3081\u3066\u52d5\u4f5c\u3059\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u306e\u74b0\u5883\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u65b0\u305f\u306bFTDI\u7248\u306e\u30c9\u30e9\u30a4\u30d0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3080\u3057\u308d\u3001FTDI\u7248\u306e\u30c9\u30e9\u30a4\u30d0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001USB\u30dd\u30fc\u30c8\u304b\u3089\u629c\u3044\u305f\u5f8c\u3001\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u307e\u3067\u305d\u306e\u30dd\u30fc\u30c8\u304c\u4f7f\u3048\u306a\u304f\u306a\u308b\u3068\u3044\u3046\u554f\u984c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u53e4\u3044\u8a18\u4e8b\u3067\u306fFTDI\u7248\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\n## ESP8266\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\n\n1. Arduino IDE\u3092\u8d77\u52d5\u3059\u308b\n2. Preferences...\u2192Settings\u2192Additional Boards Managers URLs\u306b\u958b\u767a\u7248\u306e\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u7528\u30ea\u30f3\u30af\uff08[Arduino core for ESP8266 WiFi chip\u306eGitHub](https://github.com/esp8266/Arduino)\u3067\u300cStable version\u300d\u3068\u3057\u3066\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u3082\u306e\uff09\u300c[http://arduino.esp8266.com/stable/package_esp8266com_index.json](http://arduino.esp8266.com/stable/package_esp8266com_index.json)\u300d\u3092\u5165\u529b\u3059\u308b\n3. \u30c4\u30fc\u30eb\u2192\u30de\u30a4\u30b3\u30f3\u30dc\u30fc\u30c9\u2192\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc...\u3092\u9078\u629e\u3057\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u958b\u304f\n4. \u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3067\u300cesp8266 by ESP8266 Community\u300d\u3092\u9078\u629e\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n5. \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u7d42\u308f\u3063\u305f\u3089\u30c4\u30fc\u30eb\u2192\u30de\u30a4\u30b3\u30f3\u30dc\u30fc\u30c9\u3067\u8868\u793a\u3055\u308c\u308b\u30e1\u30cb\u30e5\u30fc\u304b\u3089Generic ESP8266 Module\u3092\u9078\u629e\u3059\u308b\n6. \u30c4\u30fc\u30eb\u2192Reset Method\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306eck\u304b\u3089nodemcu\u306b\u5909\u66f4\u3059\u308b\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-05 12.12.56 \u306e\u30b3\u30d4\u30fc.png](https://qiita-image-store.s3.amazonaws.com/0/92577/3c9ce42a-fb7e-8c31-b78b-2e271b74e789.png)\n\u203b\u3053\u306e\u8a18\u4e8b\u306f2.0.0\u3067\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u304c\u5c06\u6765\u7684\u306b\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-20 15.53.44.png](https://qiita-image-store.s3.amazonaws.com/0/92577/36341220-30d5-d127-3e56-3b86010d77f8.png)\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-20 17.13.20.png](https://qiita-image-store.s3.amazonaws.com/0/92577/e2a1674e-0cc2-8652-5b4c-c3b6cf557f8e.png)\n\n\u4ee5\u4e0a\u3067Arduino IDE\u3067ESP8266\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\n\n1. \u30b9\u30b1\u30c3\u30c1\u2192Include Library...\u2192Manage Libraries...\u3067Library Manager\u3092\u958b\u304f\n2. Library Manager\u3067\u300cPubSubClient by Nick O'Leary\u300d\u3092\u9078\u629e\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n3. \u540c\u69d8\u306b\u300cArduinoJson by Benoit Blanchon\u300d\u3092\u9078\u629e\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n4. \u540c\u69d8\u306b\u300cAdafruit HDC1000 Library by Adafruit\u300d\u3092\u9078\u629e\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n5. Arduino\u30d5\u30a9\u30eb\u30c0\uff08Mac OS X\u306e\u5834\u5408\u306b\u306f\u66f8\u985e/Arduino\uff09\u306e\u4e2d\u306b\u3042\u308blibraries\u30d5\u30a9\u30eb\u30c0\u3092\u958b\u304f\n6. libraries\u2192PubSubClient\u2192src\u3068\u9806\u306b\u305f\u3069\u308a\u3001\u305d\u306e\u4e2d\u306b\u3042\u308bPubSubClient.h\u3092\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304f\n7. 23\u884c\u76ee\u306eMQTT_MAX_PACKET_SIZE\u306e\u5024\u3092256\u304b\u30891000\u306b\u5909\u66f4\u3059\u308b\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-20 15.40.02.png](https://qiita-image-store.s3.amazonaws.com/0/92577/d228e50d-bbfd-9730-9afe-c61c431d4d04.png)\n\u203b\u3053\u306e\u8a18\u4e8b\u306f2.4.0\u3067\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u304c\u5c06\u6765\u7684\u306b\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5909\u66f4\u524d\n\n```cpp:PubSubClient.h\n// MQTT_MAX_PACKET_SIZE : Maximum packet size\n#define MQTT_MAX_PACKET_SIZE 256\n```\n\n\u5909\u66f4\u5f8c\n\n```cpp:PubSubClient.h\n// MQTT_MAX_PACKET_SIZE : Maximum packet size\n#define MQTT_MAX_PACKET_SIZE 1000\n```\n\n\u4ee5\u4e0a\u3067MQTT\u7528\u30e9\u30a4\u30d6\u30e9\u30eaPubSubClient\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n# \u30b5\u30f3\u30d7\u30eb\n\n\u4ee5\u4e0b\u306fmyThings\u306eIDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u7528\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u305fIDCF Cloud\u30b5\u30fc\u30d0\u306bMQTT\u3067\u63a5\u7d9a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u7fa4\u3067\u3059\u3002\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u306fGitHub\u304b\u3089\u5165\u624b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n[https://github.com/kotobuki/esp8266_examples](https://github.com/kotobuki/esp8266_examples)\n\n## Publisher\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067IDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u30b5\u30fc\u30d0\u306b\u6e29\u6e7f\u5ea6\u30bb\u30f3\u30b5HDC1000\u304b\u3089\u8aad\u307f\u53d6\u3063\u305f\u6e29\u5ea6\u3068\u6e7f\u5ea6\u306e\u30c7\u30fc\u30bf\u3092publish\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n```json\n{\n  \"devices\": [\n    \"********-****-****-****-************\"\n  ],\n  \"payload\": {\n    \"temperature\": 24.91,\n    \"humidity\": 58.65\n  }\n}\n```\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u4e2d\u3067\u3001config.h\u306e\u4e2d\u3067\u300c****\u300d\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306f\u30c0\u30df\u30fc\u306e\u5024\u3067\u3059\u306e\u3067\u3001\u81ea\u5206\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u30b5\u30fc\u30d0\u306e\u60c5\u5831\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\n```cpp:config.h\n// MQTT\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\uff08\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u30b9\u30b1\u30c3\u30c1\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u65e5\u4ed8\u3068\u6642\u523b\u3092\u4f7f\u7528\uff09\nconst char *mqtt_client_id = \"publisher\" __DATE__ __TIME__;\n\n// Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306eSSID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\nconst char *ssid = \"********\";\nconst char *password = \"********\";\n\n// IDCF Cloud\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\nconst char *server = \"210-***-***-***.jp-east.compute.idcfcloud.com\";\nconst char* trigger_1_uuid = \"********-****-****-****-************\";\nconst char* trigger_1_token = \"********\";\nconst char* action_1_uuid = \"********-****-****-****-************\";\nconst char* action_2_uuid = \"********-****-****-****-************\";\n```\n\n\u3082\u3057trigger\u3084action\u306euuid\u3084token\u304c\u5206\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u30b5\u30fc\u30d0\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n```shell-session\nssh root@210.***.***.*** -o PreferredAuthentications=password\n...\nroot@210.***.***.***'s password: \u30d1\u30b9\u30ef\u30fc\u30c9\n$ cd ~/iot_apps/meshblu-compose\n$ docker-compose run --rm iotutil owner\n$ docker-compose run --rm iotutil list\n```\n\n\u4ee5\u4e0b\u304c\u30b9\u30b1\u30c3\u30c1\u306e\u672c\u4f53\u3067\u3059\u3002\n\n```cpp:MQTT_Publisher.ino\n#include <Wire.h>\n\n#include <ESP8266WiFi.h>\n\n// MQTT\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n#include <PubSubClient.h>\n\n// JSON\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n#include <ArduinoJson.h>\n\n// HDC1000\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n#include <Adafruit_HDC1000.h>\n\n// \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\n#include \"config.h\"\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nAdafruit_HDC1000 hdc1000 = Adafruit_HDC1000();\n\n// \u6e29\u5ea6\u3068\u6e7f\u5ea6\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\nfloat temperature = 0.0;\nfloat humidity = 0.0;\n\n// \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  // \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u5fc5\u8981\u306a\u51e6\u7406\u304c\u3042\u308c\u3070\u3053\u3053\u3067\n}\n\nvoid setup() {\n  // I2C\u306e\u901a\u4fe1\u3092\u958b\u59cb\n  // SDA: DIO4\n  // SCL: DIO5\n  Wire.begin();\n\n  // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u958b\u59cb\n  Serial.begin(115200);\n  delay(10);\n  Serial.println();\n  Serial.println();\n\n  // HDC1000\u3092\u8a2d\u5b9a\n  hdc1000.begin();\n}\n\nvoid loop() {\n  // Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u63a5\u7d9a\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\"Connecting to \");\n    Serial.print(ssid);\n    Serial.println(\"...\");\n    WiFi.begin(ssid, password);\n\n    if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n      // Wi-Fi\u30a2\u30af\u30b9\u30dd\u30a4\u30f3\u30c8\u3078\u306e\u63a5\u7d9a\u306b\u5931\u6557\u3057\u305f\u30895\u79d2\u9593\u5f85\u3063\u3066\u30ea\u30c8\u30e9\u30a4\n      Serial.println(\"Failed to connect\");\n      delay(5000);\n      return;\n    } else {\n      Serial.print(\"WiFi connected: \");\n      Serial.println(WiFi.localIP());\n      client.setServer(server, 1883);\n    }\n  }\n\n  // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304cICDF Cloud\u306e\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\n  if (!client.connected()) {\n    // \u30c8\u30ea\u30ac\u30fc1\u306eUUID\u3068\u30c8\u30fc\u30af\u30f3\u3092\u30e6\u30fc\u30b6\u540d\u304a\u3088\u3073\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u3057\u3066\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\n    client.connect(mqtt_client_id, trigger_1_uuid, trigger_1_token);\n\n    if (client.connected()) {\n      Serial.print(\"MQTT connected: \");\n      Serial.println(server);\n      client.setCallback(callback);\n    } else {\n      Serial.print(\"MQTT connection failed: \");\n      Serial.println(client.state());\n      delay(5000);\n    }\n  } else {\n    // \u65e2\u306b\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308c\u3070\u901a\u5e38\u51e6\u7406\u3092\u884c\u3046\n    client.loop();\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304cICDF Cloud\u306e\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u305f\u3089\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\n    // \u6e29\u5ea6\u3068\u6e7f\u5ea6\u3092\u53d6\u5f97\n    temperature = hdc1000.readTemperature();\n    humidity = hdc1000.readHumidity();\n\n    // JSON\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u30da\u30a4\u30ed\u30fc\u30c9\u3092\u7528\u610f\n    StaticJsonBuffer<200> jsonBuffer;\n    JsonObject& root = jsonBuffer.createObject();\n    JsonArray& devices = root.createNestedArray(\"devices\");\n    devices.add(action_1_uuid);\n//    devices.add(action_2_uuid);\n    JsonObject& payload = root.createNestedObject(\"payload\");\n    payload[\"temperature\"] = temperature;\n    payload[\"humidity\"] = humidity;\n    root.prettyPrintTo(Serial);\n    Serial.println();\n\n    char buffer[256];\n    root.printTo(buffer, sizeof(buffer));\n\n    // IDCF Cloud\u306bMQTT\u3067\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\n    bool sent = client.publish(\"message\", buffer);\n    if (sent) {\n      Serial.println(\"Published\");\n    } else {\n      Serial.println(\"Failed to publish\");\n    }\n\n    Serial.println();\n  }\n\n  delay(10000);\n}\n```\n\n## Trigger\n\nPublisher\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3067HTTP\u3067trigger-1\u3092\u30c8\u30ea\u30ac\u30fc\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\uff08config.h\u306fPublisher\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u540c\u4e00\u306e\u305f\u3081\u7701\u7565\u3057\u3066\u3044\u307e\u3059\uff09\u3002\n\n```cpp:HTTP_Trigger.ino\n#include <Wire.h>\n\n#include <ESP8266WiFi.h>\n\n// HDC1000\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n#include <Adafruit_HDC1000.h>\n\n// \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\n#include \"config.h\"\n\nWiFiClient wifiClient;\n\nAdafruit_HDC1000 hdc1000 = Adafruit_HDC1000();\n\nfloat temperature = 0.0;\nfloat humidity = 0.0;\n\nvoid printFormattedFloat(float val) {\n  char buffer[10];\n\n  dtostrf(val, 4, 2, buffer);\n  Serial.print(buffer);\n}\n\nvoid setup() {\n  // I2C\u306e\u901a\u4fe1\u3092\u958b\u59cb\n  // SDA: DIO4\n  // SCL: DIO5\n  Wire.begin();\n\n  // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u958b\u59cb\n  Serial.begin(115200);\n  delay(10);\n  Serial.println();\n  Serial.println();\n\n  // HDC1000\u3092\u8a2d\u5b9a\n  hdc1000.begin();\n}\n\nvoid loop() {\n  // Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u63a5\u7d9a\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\"Connecting to \");\n    Serial.print(ssid);\n    Serial.println(\"...\");\n    WiFi.begin(ssid, password);\n\n    if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n      // Wi-Fi\u30a2\u30af\u30b9\u30dd\u30a4\u30f3\u30c8\u3078\u306e\u63a5\u7d9a\u306b\u5931\u6557\u3057\u305f\u30895\u79d2\u9593\u5f85\u3063\u3066\u30ea\u30c8\u30e9\u30a4\n      Serial.println(\"Failed to connect\");\n      delay(5000);\n      return;\n    } else {\n      Serial.print(\"WiFi connected: \");\n      Serial.println(WiFi.localIP());\n    }\n  }\n\n  // HDC1000\u304b\u3089\u6e2c\u5b9a\u5024\u3092\u8aad\u307f\u53d6\u308b\n  temperature = hdc1000.readTemperature();\n  humidity = hdc1000.readHumidity();\n\n  // \u8aad\u307f\u53d6\u3063\u305f\u6e29\u5ea6\u3092\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\n  Serial.print(\"Temperature: \");\n  printFormattedFloat(temperature);\n  Serial.println(\"\u00baC\");\n\n  // \u3082\u3057\u73fe\u5728\u306e\u6e29\u5ea6\u304c\u95be\u5024\u3088\u308a\u3082\u9ad8\u3051\u308c\u3070\u4ee5\u4e0b\u3092\u5b9f\u884c\n  if (temperature > threshold) {\n    Serial.print(\"Connecting to \");\n    Serial.println(server);\n    WiFiClient client;\n    if (!client.connect(server, 80)) {\n      Serial.println(\"Connection failed\");\n      return;\n    }\n\n    // IDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u30b5\u30fc\u30d0\u306e/data/{trigger-1\u306euuid}\u306bHTTP POST\n    String url = \"/data/\";\n    url += trigger_1_uuid;\n    client.print(String(\"POST \") + url + \" HTTP/1.1\\r\\n\" +\n                 \"Host: \" + server + \"\\r\\n\" +\n                 \"meshblu_auth_uuid: \" + trigger_1_uuid + \"\\r\\n\" +\n                 \"meshblu_auth_token: \" + trigger_1_token + \"\\r\\n\" +\n                 \"Connection: close\\r\\n\\r\\n\");\n    delay(100);\n\n    while (client.available()) {\n      String line = client.readStringUntil('\\r');\n      Serial.print(line);\n    }\n  }\n\n  delay(5000);\n}\n```\n\n## Subscriber\n\nmyThings\u304b\u3089\u9001\u4fe1\u3055\u308c\u3066\u304f\u308bJSON\u5f62\u5f0f\u306e\u30da\u30a4\u30ed\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff08\u3053\u308c\u306f\u5929\u6c17\u30fb\u707d\u5bb3\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u672c\u65e5\u306e\u5929\u6c17\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u3057\u305f\u4f8b\u3067\u3059\uff09\u3002\n\n```json\n{\"topic\":\"message\",\"data\":{\"devices\":[\"********-****-****-****-************\"],\"payload\":\"\u6674\u6642\u3005\u66c7\",\"fromUuid\":\"********-****-****-****-************\"}}\n```\n\nIDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u52d5\u4f5c\u3059\u308bIDCF Cloud\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3057\u3001MQTT\u3067action-1\u3092subscribe\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u6307\u5b9a\u3057\u305f\u30c8\u30ea\u30ac\u30fc\u304c\u8d77\u304d\u305f\u3068\u304d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u30b5\u30f3\u30d7\u30eb\u304c\u4ee5\u4e0b\u306e\u3082\u306e\u3067\u3059\u3002\n\n```cpp:config.h\n// MQTT\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\uff08\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u30b9\u30b1\u30c3\u30c1\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u65e5\u4ed8\u3068\u6642\u523b\u3092\u4f7f\u7528\uff09\nconst char *mqtt_client_id = \"kotobuki\" __DATE__ __TIME__;\n\n// Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306eSSID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\nconst char *ssid =  \"********\";\nconst char *pass =  \"********\";\n\n// IDCF Cloud\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\nconst char* action_1_uuid = \"********-****-****-****-************\";\nconst char* action_1_token = \"********\";\nIPAddress server(210, ***, ***, ***);\n```\n\n```cpp:MQTT_Subscriber.ino\n#include <ESP8266WiFi.h>\n#include <PubSubClient.h>\n#include <ArduinoJson.h>\n\n#include \"config.h\"\n\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  // PubSubClient.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bMQTT\u306e\u6700\u5927\u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba\n  char buffer[MQTT_MAX_PACKET_SIZE];\n\n  snprintf(buffer, sizeof(buffer), \"%s\", payload);\n  Serial.print(\"Received: \");\n  Serial.println(buffer);\n\n  // \u53d7\u3051\u53d6\u3063\u305fJSON\u5f62\u5f0f\u306e\u30da\u30a4\u30ed\u30fc\u30c9\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n  StaticJsonBuffer<MQTT_MAX_PACKET_SIZE> jsonBuffer;\n  JsonObject& root = jsonBuffer.parseObject(buffer);\n\n  if (!root.success()) {\n    Serial.println(\"parseObject() failed\");\n    return;\n  }\n\n  const char* parsedPayload = root[\"data\"][\"payload\"];\n  if (parsedPayload != NULL) {\n    Serial.print(\"payload: \");\n    Serial.println(parsedPayload);\n\n    // \u30da\u30a4\u30ed\u30fc\u30c9\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u3053\u3053\u306b\n  }\n}\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n  Serial.println();\n  Serial.println();\n}\n\nvoid loop() {\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\"Connecting to \");\n    Serial.print(ssid);\n    Serial.println(\"...\");\n    WiFi.begin(ssid, pass);\n\n    if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n      // Wi-Fi\u30a2\u30af\u30b9\u30dd\u30a4\u30f3\u30c8\u3078\u306e\u63a5\u7d9a\u306b\u5931\u6557\u3057\u305f\u30895\u79d2\u9593\u5f85\u3063\u3066\u30ea\u30c8\u30e9\u30a4\n      delay(5000);\n      return;\n    } else {\n      Serial.print(\"WiFi connected: \");\n      Serial.println(WiFi.localIP());\n      client.setServer(server, 1883);\n    }\n  }\n\n  // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\n  if (!client.connected()) {\n    // \u30a2\u30af\u30b7\u30e7\u30f31\u306eUUID\u3068\u30c8\u30fc\u30af\u30f3\u3092\u30e6\u30fc\u30b6\u540d\u304a\u3088\u3073\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u3057\u3066\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\n    client.connect(mqtt_client_id, action_1_uuid, action_1_token);\n\n    if (client.connected()) {\n      Serial.print(\"MQTT connected: \");\n      Serial.println(server);\n      client.setCallback(callback);\n      client.subscribe(action_1_uuid);\n    } else {\n      Serial.print(\"MQTT connection failed: \");\n      Serial.println(client.state());\n      delay(5000);\n    }\n  } else {\n    // \u65e2\u306b\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308c\u3070\u901a\u5e38\u51e6\u7406\u3092\u884c\u3046\n    client.loop();\n  }\n}\n```\n\n# \u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\n\n\u518d\u73fe\u6761\u4ef6\u306f\u4e0d\u660e\u3067\u3059\u304c\u3001USB\u30b1\u30fc\u30d6\u30eb\u3092\u629c\u304d\u5dee\u3057\u3057\u3066\u3044\u308b\u3046\u3061\u306b\u958b\u767a\u30dc\u30fc\u30c9\u4e0a\u306eUSB\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30c1\u30c3\u30d7\u3092\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3068\u3057\u3066\u8a8d\u8b58\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002USB\u30b1\u30fc\u30d6\u30eb\u3092\u629c\u3044\u305f\u72b6\u614b\u3067\u3001\u30a2\u30c3\u30d7\u30eb\u30e1\u30cb\u30e5\u30fc\u2192\u3053\u306eMac\u306b\u3064\u3044\u3066\u2192\u30b7\u30b9\u30c6\u30e0\u30ec\u30dd\u30fc\u30c8\u2026\u3067USB\u3092\u9078\u629e\u3057\u305f\u6642\u306b\u300cFT231X USB UART\u300d\u3068\u3044\u3046\u30c7\u30d0\u30a4\u30b9\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3042\u308c\u3070\u8a72\u5f53\u3057\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-03 16.53.57.png](https://qiita-image-store.s3.amazonaws.com/0/92577/b534def7-6fb1-67ea-f09b-f1ef25218063.png)\n\n\u3053\u306e\u6642\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u518d\u8d77\u52d5\u3067\u89e3\u6d88\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u89e3\u6d88\u3057\u306a\u3044\u5834\u5408\u306f[Apple\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3067\u306e\u8aac\u660e](https://support.apple.com/ja-jp/HT204063)\u306b\u5f93\u3063\u3066NVRAM\u306e\u30ea\u30bb\u30c3\u30c8\u3092\u8a66\u3057\u3066\u307f\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n# \u304a\u308f\u308a\u306b\n\nESP8266\u304a\u3088\u3073ESP8266\u7528Arduino\u30b3\u30a2\u306f\u30db\u30c3\u30c8\u306a\u8a71\u984c\u3067\u3042\u308a\u3001\u523b\u3005\u3068\u5909\u5316\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u3001\u53e4\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u5185\u5bb9\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u7b49\u3067\u304a\u77e5\u3089\u305b\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n", "tags": ["myThings", "IDCF\u30af\u30e9\u30a6\u30c9", "ESP8266", "mqtt"]}