{"context": "\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b\u306e\u300cSlack\u306eemoji\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u8ffd\u52a0\u3067\u304d\u308b\u30a2\u30d7\u30ea\u3092Golang\u3067\u4f5c\u3063\u305f\u300d\u3067\u3001\u3088\u3046\u3084\u304f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3Gif\uff08\u4ee5\u4e0b\u30a2\u30cb\u30e1Gif\uff09\u306e\u30ea\u30b5\u30a4\u30ba\u304c\u51fa\u6765\u305f\u306e\u3067\u30e1\u30e2\u304c\u3066\u3089\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u305f\u5f53\u521d\u306fgif\u306e\u30ea\u30b5\u30a4\u30ba\u3092\u884c\u3046\u3068\u8272\u304c\u304a\u304b\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u554f\u984c\u304c\u3042\u3063\u3066\u3001gif\u306e\u5bfe\u5fdc\u3092\u898b\u9001\u308a\u307e\u3057\u305f\u3002\n\u843d\u3061\u7740\u3044\u3066\u8abf\u3079\u76f4\u3057\u305f\u3089\u8272\u3005\u3068\u5206\u304b\u3063\u305f\u3053\u3068\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u304a\u5f79\u306b\u7acb\u3066\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\u30cd\u30c3\u30c8\u3067\u63a2\u3057\u3066\u304d\u305f\u7d20\u6750\u306e\u7e2e\u5c0f\u4f8b\u3067\u3059\u3002\nhttp://droid-chan.net/archives/338\n\n\n\u5c0f\u3055\u304f\u306a\u3063\u305f\u5206\u8352\u304f\u306f\u306a\u308a\u307e\u3059\u304c\u3001\u30ea\u30b5\u30a4\u30ba\u51fa\u6765\u3066\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u6982\u8981\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002\nnfnt/resize\n\u51e6\u7406\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u9806\u5e8f\u3067\u884c\u3044\u307e\u3059\u3002\n\n\u30a2\u30cb\u30e1Gif\u3092\u8aad\u307f\u8fbc\u3080\n\u73fe\u5728\u306egif\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u6bd4\u3092\u8a08\u7b97\n\u30a2\u30cb\u30e1Gif\u5185\u306egif\u753b\u50cf\u30921\u679a\u305a\u3064\u7e2e\u5c0f\n\u30a2\u30cb\u30e1Gif\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\n\n\u3053\u3046\u66f8\u304f\u3068\u5358\u7d14\u3067\u3059\u304c\u30014\u306e\u5de5\u7a0b\u304c\u4e2d\u3005\u96e3\u3057\u304b\u3063\u305f\u3067\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\u30ea\u30b5\u30a4\u30ba\u306b\u4f7f\u7528\u3057\u305f\u95a2\u6570\u3092\u8ee2\u8a18\u3057\u307e\u3059\u3002\n\u4e00\u90e8\u8aac\u660e\u306e\u90fd\u5408\u4e0a\u3001\u51e6\u7406\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u4f7f\u7528\u3057\u305f\u30bd\u30fc\u30b9\u306a\u306e\u3067\u3001jpg\u3084png\u306e\u30ea\u30b5\u30a4\u30ba\u306e\u51e6\u7406\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002\nfunc resizeImage(filePath string, maxSize float64) error {\n    const postFix string = \"_resized\"\n    base := filepath.Base(filePath)\n    ext := filepath.Ext(filePath)\n    ext = strings.ToLower(ext)\n\n    imageFile, err := os.Open(filePath)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer imageFile.Close()\n\n    var decImage image.Image\n    var gifImage *gif.GIF\n    var imageConfig image.Config\n    if ext == \".jpg\" || ext == \".jpeg\" {\n        decImage, err = jpeg.Decode(imageFile)\n        if err != nil {\n            log.Println(err)\n        }\n        _, err = imageFile.Seek(io.SeekStart, 0)\n        if err != nil {\n            return err\n        }\n        imageConfig, err = jpeg.DecodeConfig(imageFile)\n        if err != nil {\n            return err\n        }\n    } else if ext == \".png\" {\n        decImage, err = png.Decode(imageFile)\n        if err != nil {\n            return err\n        }\n        _, err = imageFile.Seek(io.SeekStart, 0)\n        if err != nil {\n            return err\n        }\n        imageConfig, err = png.DecodeConfig(imageFile)\n        if err != nil {\n            return err\n        }\n    } else if ext == \".gif\" {\n        gifImage, err = gif.DecodeAll(imageFile)\n        if err != nil {\n            return err\n        }\n        imageConfig = gifImage.Config\n        if err != nil {\n            return err\n        }\n    } else {\n        return nil\n    }\n\n    width := float64(imageConfig.Width)\n    height := float64(imageConfig.Height)\n\n    var ratio float64\n    if width > height && width > maxSize {\n        ratio = maxSize / width\n    } else if height > maxSize {\n        ratio = maxSize / height\n    } else {\n        ratio = 1\n    }\n\n    tmpFileName := base[0:len(base)-len(ext)] + postFix + ext\n    tmpFile, err := os.Create(tmpFileName)\n    if err != nil {\n        return err\n    }\n    defer tmpFile.Close()\n\n    if ratio == 1 {\n        _, err = imageFile.Seek(io.SeekStart, 0)\n        if err != nil {\n            return err\n        }\n        _, err := io.Copy(tmpFile, imageFile)\n        if err != nil {\n            log.Fatal(err)\n            return err\n        }\n    } else {\n        if ext == \".jpg\" || ext == \".jpeg\" {\n            resized := resize.Resize(uint(math.Floor(width*ratio)), uint(math.Floor(height*ratio)),\n                decImage, resize.Lanczos3)\n            jpeg.Encode(tmpFile, resized, nil)\n        } else if ext == \".png\" {\n            resized := resize.Resize(uint(math.Floor(width*ratio)), uint(math.Floor(height*ratio)),\n                decImage, resize.Lanczos3)\n            png.Encode(tmpFile, resized)\n        } else if ext == \".gif\" {\n            for index, frame := range gifImage.Image {\n                rect := frame.Bounds()\n                tmpImage := frame.SubImage(rect)\n                resizedImage := resize.Resize(uint(math.Floor(float64(rect.Dx())*ratio)),\n                    uint(math.Floor(float64(rect.Dy())*ratio)),\n                    tmpImage, resize.Lanczos3)\n                // Add colors from original gif image\n                var tmpPalette color.Palette\n                for x := 1; x <= rect.Dx(); x++ {\n                    for y := 1; y <= rect.Dy(); y++ {\n                        if !contains(tmpPalette, gifImage.Image[index].At(x, y)) {\n                            tmpPalette = append(tmpPalette, gifImage.Image[index].At(x, y))\n                        }\n                    }\n                }\n                // After first image, image may contains only difference\n                // bounds may not start from at (0,0)\n                resizedBounds := resizedImage.Bounds()\n                if index >= 1 {\n                    marginX := int(math.Floor(float64(rect.Min.X) * ratio))\n                    marginY := int(math.Floor(float64(rect.Min.Y) * ratio))\n                    resizedBounds = image.Rect(marginX, marginY, resizedBounds.Dx()+marginX,\n                        resizedBounds.Dy()+marginY)\n                }\n                resizedPalette := image.NewPaletted(resizedBounds, tmpPalette)\n                draw.Draw(resizedPalette, resizedBounds, resizedImage, image.ZP, draw.Src)\n                gifImage.Image[index] = resizedPalette\n            }\n            // Set size to resized size\n            gifImage.Config.Width = int(math.Floor(width * ratio))\n            gifImage.Config.Height = int(math.Floor(height * ratio))\n            gif.EncodeAll(tmpFile, gifImage)\n        }\n    }\n    return nil\n}\n\n// Check if color is already in the Palette\nfunc contains(colorPalette color.Palette, c color.Color) bool {\n    for _, tmpColor := range colorPalette {\n        if tmpColor == c {\n            return true\n        }\n    }\n    return false\n}\n\n\n\u30dd\u30a4\u30f3\u30c8\n\u30a2\u30cb\u30e1Gif\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u30dd\u30a4\u30f3\u30c8\u3092\u5e7e\u3064\u304b\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u30a2\u30cb\u30e1Gif\u3092\u8aad\u307f\u8fbc\u3080\u6642\ngif.DecodeAll\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nvar gifImage *gif.GIF\ngifImage, err = gif.DecodeAll(imageFile)\n\n\u4ed6\u306ejpg\u3084png\u3068\u9055\u3044\u96e3\u3057\u3044\u306e\u306f\u3001DecodeAll\u304b\u3089\u8fd4\u5374\u3055\u308c\u308b\u5024\u304c*GIF\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u3002\nDecode\u304b\u3089\u8fd4\u5374\u3055\u308c\u308b\u306e\u306fImage\u306a\u306e\u3067\u305d\u306e\u307e\u307eresize.Resize\u306b\u6e21\u305b\u308b\u306e\u3067\u3059\u304c\u3001GIF\u306b\u306fImage\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u53c2\u8003\uff1a\ntype GIF struct {\n        Image     []*image.Paletted // The successive images.\n        Delay     []int             // The successive delay times, one per frame, in 100ths of a second.\n        LoopCount int               // The loop count.\n        Disposal []byte\n        BackgroundIndex byte\n}\n\n\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u304b\u3089Image\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5404\u753b\u50cf\u3092\u7e2e\u5c0f\u3059\u308b\n\u5148\u7a0b\u53d6\u5f97\u3057\u305fGIF\u306f\u30a2\u30cb\u30e1Gif\u306e\u753b\u50cf\u5168\u3066\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001range\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30d7\u3067\u56de\u3057\u307e\u3059\u3002\nfor index, frame := range gifImage.Image {\nGIF\u5185\u306eImage\u3092range\u3067\u56de\u3059\u3053\u3068\u3067\u3001index\u3068Paletted\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nPaletted\u306fSubImage\u3092\u4f7f\u3063\u3066\u3001Image\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\nPaletted\u5185\u306eRectangle\u3092\u4f7f\u7528\u3057\u3066\u3001\u539f\u5bf8\u5927\u306eImage\u3092\u4f5c\u308a\u307e\u3059\u3002\nrect := frame.Bounds()\ntmpImage := frame.SubImage(rect)\n\n\u3042\u3068\u306f\u3053\u306eImage\u3092Resize\u306b\u6e21\u3057\u3066\u3001\u30ea\u30b5\u30a4\u30ba\u3059\u308c\u3070\u3044\u3044\u3060\u3051\u30fb\u30fb\u30fb\u3068\u601d\u3063\u3066\u3044\u305f\u3089\u305d\u3046\u7c21\u5358\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\nImage\u3092Paletted\u306b\u5909\u63db\u3059\u308b\nGIF\u306fImage\u3067\u306f\u306a\u304f\u3001Paletted\u3067\u753b\u50cf\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30ea\u30b5\u30a4\u30ba\u3057\u305fImage\u3092Paletted\u306b\u623b\u3055\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\nNewPaletted\u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308c\u3070\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\nfunc NewPaletted(r Rectangle, p color.Palette) *Paletted\n\u305d\u306e\u305f\u3081\u306b\u306fRectangle\u3068Palette\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305a\u306fPalette\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nPalette\u3092\u4f5c\u6210\nGif\u306f256\u8272\u3057\u304b\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u30ea\u30b5\u30a4\u30ba\u76f4\u5f8c\u306e\u753b\u50cf\u306f256\u8272\u3092\u8d85\u3048\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08\u3053\u306e\u3053\u3068\u306b\u4e2d\u3005\u6c17\u4ed8\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u3002\uff09\n\u5f53\u521d\u5225\u306e\u30bd\u30fc\u30b9\u3092\u53c2\u8003\u306b\u3057\u3066palette.Plan9\u3092Palette\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3057\u305f\u304c\u3001\u8272\u304c\u304a\u304b\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u5143\u753b\u50cf\u304c\u6301\u3063\u3066\u3044\u305f\u8272\u3068\u9055\u3046\u304b\u3089\u5f53\u305f\u308a\u524d\u3067\u3059\u306d\u30fb\u30fb\u30fb\u3002\n\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3001\u5143\u753b\u50cf\u304b\u3089\u8272\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3068\u3044\u3046\u7d50\u8ad6\u306b\u81f3\u308a\u307e\u3057\u305f\u3002\n// Add colors from original gif image\nvar tmpPalette color.Palette\nfor x := 1; x <= rect.Dx(); x++ {\n    for y := 1; y <= rect.Dy(); y++ {\n        if !contains(tmpPalette, gifImage.Image[index].At(x, y)) {\n            tmpPalette = append(tmpPalette, gifImage.Image[index].At(x, y))\n        }\n    }\n}\n\n\u8aad\u307f\u8fbc\u3093\u3060\u5143\u753b\u50cf\u3092\u30eb\u30fc\u30d7\u3067\u56de\u3057\u3001\u307e\u3060\u8ffd\u52a0\u3057\u3066\u3044\u306a\u3044Color\u304c\u3042\u3063\u305f\u3089Palette\u306b\u8ffd\u52a0\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3067\u3059\u3002\nAt\u95a2\u6570\u3067Paletted\u306e\u7279\u5b9a\u306e\u30dd\u30a4\u30f3\u30c8\u306eColor\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3067\u5143\u753b\u50cf\u306e\u8272\u60c5\u5831\u3092\u6301\u3063\u305fPalette\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\nRectangle\u3092\u4f5c\u6210\n\u3053\u3053\u3082\u4e00\u7b4b\u7e04\u3067\u306f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u3002\n\u30a2\u30cb\u30e1Gif\u306e1\u679a\u76ee\u4ee5\u964d\u306f\u30d5\u30ec\u30fc\u30e0\u306e\u518d\u5229\u7528\u304c\u53ef\u80fd\u306a\u305f\u3081\u3001\u5dee\u5206\u3057\u304b\u60c5\u5831\u304c\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u5ea7\u6a19\u304c(0,0)\u304b\u3089\u59cb\u307e\u3089\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001Resize\u306f\u3053\u306e\u3053\u3068\u3092\u8003\u616e\u3057\u3066\u304f\u308c\u305a\u3001\u63cf\u753b\u958b\u59cb\u4f4d\u7f6e\u304c(0,0)\u306b\u623b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u63cf\u753b\u958b\u59cb\u4f4d\u7f6e\u3092\u9069\u5207\u306a\u7b87\u6240\u306b\u305a\u3089\u3057\u3066\u3042\u3052\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\n// After first image, image may contains only difference\n// bounds may not start from at (0,0)\nresizedBounds := resizedImage.Bounds()\nif index >= 1 {\n    marginX := int(math.Floor(float64(rect.Min.X) * ratio))\n    marginY := int(math.Floor(float64(rect.Min.Y) * ratio))\n    resizedBounds = image.Rect(marginX, marginY, resizedBounds.Dx()+marginX,\n                        resizedBounds.Dy()+marginY)\n}\n\n\u5143\u753b\u50cf\u306eMin.X\u3068Min.Y\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u3066\u7e2e\u5c0f\u3057\u3001\u30ea\u30b5\u30a4\u30ba\u5f8c\u306eRectangle\u306b\u53cd\u6620\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067Rectangle\u3068Palette\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u753b\u50cf\u3092\u63cf\u753b\nNewPaletted\u3092\u4f7f\u7528\u3057\u3066Paletted\u3092\u4f5c\u6210\u5f8c\u3001\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u753b\u50cf\u3092Draw\u3092\u4f7f\u7528\u3057\u3066\u63cf\u753b\u3057\u307e\u3059\u3002\n\u63cf\u753b\u3057\u305fPaletted\u3092\u5143\u753b\u50cf\u3068\u5dee\u3057\u66ff\u3048\u307e\u3059\u3002\nresizedPalette := image.NewPaletted(resizedBounds, tmpPalette)\ndraw.Draw(resizedPalette, resizedBounds, resizedImage, image.ZP, draw.Src)\ngifImage.Image[index] = resizedPalette\n\n\n\u30a2\u30cb\u30e1Gif\u3092\u51fa\u529b\n\u30a2\u30cb\u30e1Gif\u3092\u51fa\u529b\u3059\u308b\u524d\u306b\u3001Config\u306e\u30b5\u30a4\u30ba\u3092\u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u30b5\u30a4\u30ba\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001gif.EncodeAll\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n// Set size to resized size\ngifImage.Config.Width = int(math.Floor(width * ratio))\ngifImage.Config.Height = int(math.Floor(height * ratio))\ngif.EncodeAll(tmpFile, gifImage)\n\n\u3053\u308c\u3067\u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305f\u30a2\u30cb\u30e1Gif\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\u4f5c\u3063\u3066\u307f\u3066\n\u6700\u521d\u306f\u3069\u3046\u3057\u305f\u3082\u306e\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u3069\u3093\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u304b\u3068\u306b\u304b\u304f\u51fa\u529b\u3057\u3066\u307f\u305f\u3089\u306a\u3093\u3068\u306a\u304f\u89e3\u6c7a\u306e\u7cf8\u53e3\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n\u3082\u3057\u7c21\u5358\u306b\u51fa\u6765\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u305c\u3072\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n\u4eca\u56de\u306e\u7d4c\u9a13\u3092\u5fdc\u7528\u3057\u3066\u3001\u30a2\u30cb\u30e1Gif\u3067\u8272\u3005\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n#\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b\u306e\u300c[Slack\u306eemoji\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u8ffd\u52a0\u3067\u304d\u308b\u30a2\u30d7\u30ea\u3092Golang\u3067\u4f5c\u3063\u305f](http://qiita.com/from_Unknown/items/c6d0f16fe208d382404b \"Slack\u306eemoji\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u8ffd\u52a0\u3067\u304d\u308b\u30a2\u30d7\u30ea\u3092Golang\u3067\u4f5c\u3063\u305f\")\u300d\u3067\u3001\u3088\u3046\u3084\u304f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3Gif\uff08\u4ee5\u4e0b\u30a2\u30cb\u30e1Gif\uff09\u306e\u30ea\u30b5\u30a4\u30ba\u304c\u51fa\u6765\u305f\u306e\u3067\u30e1\u30e2\u304c\u3066\u3089\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u305f\u5f53\u521d\u306fgif\u306e\u30ea\u30b5\u30a4\u30ba\u3092\u884c\u3046\u3068\u8272\u304c\u304a\u304b\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u554f\u984c\u304c\u3042\u3063\u3066\u3001gif\u306e\u5bfe\u5fdc\u3092\u898b\u9001\u308a\u307e\u3057\u305f\u3002\n\u843d\u3061\u7740\u3044\u3066\u8abf\u3079\u76f4\u3057\u305f\u3089\u8272\u3005\u3068\u5206\u304b\u3063\u305f\u3053\u3068\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u304a\u5f79\u306b\u7acb\u3066\u3070\u5e78\u3044\u3067\u3059\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\n\u30cd\u30c3\u30c8\u3067\u63a2\u3057\u3066\u304d\u305f\u7d20\u6750\u306e\u7e2e\u5c0f\u4f8b\u3067\u3059\u3002\nhttp://droid-chan.net/archives/338\n![droid_girl.gif](https://qiita-image-store.s3.amazonaws.com/0/139405/95361051-687d-b61b-30fd-7b8354a9a534.gif)\n![droid_girl_resized.gif](https://qiita-image-store.s3.amazonaws.com/0/139405/d3075555-eaec-2145-48ca-5b26f25ce8b4.gif)\n\n\u5c0f\u3055\u304f\u306a\u3063\u305f\u5206\u8352\u304f\u306f\u306a\u308a\u307e\u3059\u304c\u3001\u30ea\u30b5\u30a4\u30ba\u51fa\u6765\u3066\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u307e\u3059\u3002\n\n#\u6982\u8981\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002\n[nfnt/resize](https://github.com/nfnt/resize \"nfnt/resize\")\n\n\u51e6\u7406\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u9806\u5e8f\u3067\u884c\u3044\u307e\u3059\u3002\n\n1. \u30a2\u30cb\u30e1Gif\u3092\u8aad\u307f\u8fbc\u3080\n2. \u73fe\u5728\u306egif\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n3. \u30ea\u30b5\u30a4\u30ba\u3059\u308b\u6bd4\u3092\u8a08\u7b97\n4. \u30a2\u30cb\u30e1Gif\u5185\u306egif\u753b\u50cf\u30921\u679a\u305a\u3064\u7e2e\u5c0f\n5. \u30a2\u30cb\u30e1Gif\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\n\n\u3053\u3046\u66f8\u304f\u3068\u5358\u7d14\u3067\u3059\u304c\u30014\u306e\u5de5\u7a0b\u304c\u4e2d\u3005\u96e3\u3057\u304b\u3063\u305f\u3067\u3059\u3002\n\n#\u30b3\u30fc\u30c9\n\u30ea\u30b5\u30a4\u30ba\u306b\u4f7f\u7528\u3057\u305f\u95a2\u6570\u3092\u8ee2\u8a18\u3057\u307e\u3059\u3002\n\u4e00\u90e8\u8aac\u660e\u306e\u90fd\u5408\u4e0a\u3001\u51e6\u7406\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u4f7f\u7528\u3057\u305f\u30bd\u30fc\u30b9\u306a\u306e\u3067\u3001jpg\u3084png\u306e\u30ea\u30b5\u30a4\u30ba\u306e\u51e6\u7406\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\n```go\nfunc resizeImage(filePath string, maxSize float64) error {\n\tconst postFix string = \"_resized\"\n\tbase := filepath.Base(filePath)\n\text := filepath.Ext(filePath)\n\text = strings.ToLower(ext)\n\n\timageFile, err := os.Open(filePath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer imageFile.Close()\n\n\tvar decImage image.Image\n\tvar gifImage *gif.GIF\n\tvar imageConfig image.Config\n\tif ext == \".jpg\" || ext == \".jpeg\" {\n\t\tdecImage, err = jpeg.Decode(imageFile)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t\t_, err = imageFile.Seek(io.SeekStart, 0)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\timageConfig, err = jpeg.DecodeConfig(imageFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else if ext == \".png\" {\n\t\tdecImage, err = png.Decode(imageFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = imageFile.Seek(io.SeekStart, 0)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\timageConfig, err = png.DecodeConfig(imageFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else if ext == \".gif\" {\n\t\tgifImage, err = gif.DecodeAll(imageFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\timageConfig = gifImage.Config\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\treturn nil\n\t}\n\n\twidth := float64(imageConfig.Width)\n\theight := float64(imageConfig.Height)\n\n\tvar ratio float64\n\tif width > height && width > maxSize {\n\t\tratio = maxSize / width\n\t} else if height > maxSize {\n\t\tratio = maxSize / height\n\t} else {\n\t\tratio = 1\n\t}\n\n\ttmpFileName := base[0:len(base)-len(ext)] + postFix + ext\n\ttmpFile, err := os.Create(tmpFileName)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer tmpFile.Close()\n\n\tif ratio == 1 {\n\t\t_, err = imageFile.Seek(io.SeekStart, 0)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err := io.Copy(tmpFile, imageFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tif ext == \".jpg\" || ext == \".jpeg\" {\n\t\t\tresized := resize.Resize(uint(math.Floor(width*ratio)), uint(math.Floor(height*ratio)),\n\t\t\t\tdecImage, resize.Lanczos3)\n\t\t\tjpeg.Encode(tmpFile, resized, nil)\n\t\t} else if ext == \".png\" {\n\t\t\tresized := resize.Resize(uint(math.Floor(width*ratio)), uint(math.Floor(height*ratio)),\n\t\t\t\tdecImage, resize.Lanczos3)\n\t\t\tpng.Encode(tmpFile, resized)\n\t\t} else if ext == \".gif\" {\n\t\t\tfor index, frame := range gifImage.Image {\n\t\t\t\trect := frame.Bounds()\n\t\t\t\ttmpImage := frame.SubImage(rect)\n\t\t\t\tresizedImage := resize.Resize(uint(math.Floor(float64(rect.Dx())*ratio)),\n\t\t\t\t\tuint(math.Floor(float64(rect.Dy())*ratio)),\n\t\t\t\t\ttmpImage, resize.Lanczos3)\n\t\t\t\t// Add colors from original gif image\n\t\t\t\tvar tmpPalette color.Palette\n\t\t\t\tfor x := 1; x <= rect.Dx(); x++ {\n\t\t\t\t\tfor y := 1; y <= rect.Dy(); y++ {\n\t\t\t\t\t\tif !contains(tmpPalette, gifImage.Image[index].At(x, y)) {\n\t\t\t\t\t\t\ttmpPalette = append(tmpPalette, gifImage.Image[index].At(x, y))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// After first image, image may contains only difference\n\t\t\t\t// bounds may not start from at (0,0)\n\t\t\t\tresizedBounds := resizedImage.Bounds()\n\t\t\t\tif index >= 1 {\n\t\t\t\t\tmarginX := int(math.Floor(float64(rect.Min.X) * ratio))\n\t\t\t\t\tmarginY := int(math.Floor(float64(rect.Min.Y) * ratio))\n\t\t\t\t\tresizedBounds = image.Rect(marginX, marginY, resizedBounds.Dx()+marginX,\n\t\t\t\t\t\tresizedBounds.Dy()+marginY)\n\t\t\t\t}\n\t\t\t\tresizedPalette := image.NewPaletted(resizedBounds, tmpPalette)\n\t\t\t\tdraw.Draw(resizedPalette, resizedBounds, resizedImage, image.ZP, draw.Src)\n\t\t\t\tgifImage.Image[index] = resizedPalette\n\t\t\t}\n\t\t\t// Set size to resized size\n\t\t\tgifImage.Config.Width = int(math.Floor(width * ratio))\n\t\t\tgifImage.Config.Height = int(math.Floor(height * ratio))\n\t\t\tgif.EncodeAll(tmpFile, gifImage)\n\t\t}\n\t}\n\treturn nil\n}\n\n// Check if color is already in the Palette\nfunc contains(colorPalette color.Palette, c color.Color) bool {\n\tfor _, tmpColor := range colorPalette {\n\t\tif tmpColor == c {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n```\n\n#\u30dd\u30a4\u30f3\u30c8\n\u30a2\u30cb\u30e1Gif\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u30dd\u30a4\u30f3\u30c8\u3092\u5e7e\u3064\u304b\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n##\u30a2\u30cb\u30e1Gif\u3092\u8aad\u307f\u8fbc\u3080\u6642\n[gif.DecodeAll](https://golang.org/pkg/image/gif/#DecodeAll)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```go\nvar gifImage *gif.GIF\ngifImage, err = gif.DecodeAll(imageFile)\n```\n\n\u4ed6\u306ejpg\u3084png\u3068\u9055\u3044\u96e3\u3057\u3044\u306e\u306f\u3001`DecodeAll`\u304b\u3089\u8fd4\u5374\u3055\u308c\u308b\u5024\u304c[*GIF](https://golang.org/pkg/image/gif/#GIF)\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n`Decode`\u304b\u3089\u8fd4\u5374\u3055\u308c\u308b\u306e\u306f`Image`\u306a\u306e\u3067\u305d\u306e\u307e\u307e`resize.Resize`\u306b\u6e21\u305b\u308b\u306e\u3067\u3059\u304c\u3001`GIF`\u306b\u306f`Image`\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u53c2\u8003\uff1a\n\n```go\ntype GIF struct {\n        Image     []*image.Paletted // The successive images.\n        Delay     []int             // The successive delay times, one per frame, in 100ths of a second.\n        LoopCount int               // The loop count.\n        Disposal []byte\n        BackgroundIndex byte\n}\n```\n\n\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u304b\u3089`Image`\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n##\u5404\u753b\u50cf\u3092\u7e2e\u5c0f\u3059\u308b\n\n\u5148\u7a0b\u53d6\u5f97\u3057\u305f`GIF`\u306f\u30a2\u30cb\u30e1Gif\u306e\u753b\u50cf\u5168\u3066\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001`range`\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30d7\u3067\u56de\u3057\u307e\u3059\u3002\n`for index, frame := range gifImage.Image {`\n`GIF`\u5185\u306e`Image`\u3092`range`\u3067\u56de\u3059\u3053\u3068\u3067\u3001`index`\u3068[Paletted](https://golang.org/pkg/image/#Paletted)\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n`Paletted`\u306f[SubImage](https://golang.org/pkg/image/#Paletted.SubImage)\u3092\u4f7f\u3063\u3066\u3001`Image`\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n`Paletted`\u5185\u306e`Rectangle`\u3092\u4f7f\u7528\u3057\u3066\u3001\u539f\u5bf8\u5927\u306e`Image`\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```go\nrect := frame.Bounds()\ntmpImage := frame.SubImage(rect)\n```\n\n\u3042\u3068\u306f\u3053\u306e`Image`\u3092`Resize`\u306b\u6e21\u3057\u3066\u3001\u30ea\u30b5\u30a4\u30ba\u3059\u308c\u3070\u3044\u3044\u3060\u3051\u30fb\u30fb\u30fb\u3068\u601d\u3063\u3066\u3044\u305f\u3089\u305d\u3046\u7c21\u5358\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n##Image\u3092Paletted\u306b\u5909\u63db\u3059\u308b\n`GIF`\u306f`Image`\u3067\u306f\u306a\u304f\u3001`Paletted`\u3067\u753b\u50cf\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30ea\u30b5\u30a4\u30ba\u3057\u305f`Image`\u3092`Paletted`\u306b\u623b\u3055\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\n[NewPaletted](https://golang.org/pkg/image/#NewPaletted)\u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308c\u3070\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n`func NewPaletted(r Rectangle, p color.Palette) *Paletted`\n\u305d\u306e\u305f\u3081\u306b\u306f`Rectangle`\u3068`Palette`\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305a\u306f`Palette`\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n###Palette\u3092\u4f5c\u6210\nGif\u306f256\u8272\u3057\u304b\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u30ea\u30b5\u30a4\u30ba\u76f4\u5f8c\u306e\u753b\u50cf\u306f256\u8272\u3092\u8d85\u3048\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08\u3053\u306e\u3053\u3068\u306b\u4e2d\u3005\u6c17\u4ed8\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u3002\uff09\n\u5f53\u521d\u5225\u306e\u30bd\u30fc\u30b9\u3092\u53c2\u8003\u306b\u3057\u3066`palette.Plan9`\u3092`Palette`\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3057\u305f\u304c\u3001\u8272\u304c\u304a\u304b\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u5143\u753b\u50cf\u304c\u6301\u3063\u3066\u3044\u305f\u8272\u3068\u9055\u3046\u304b\u3089\u5f53\u305f\u308a\u524d\u3067\u3059\u306d\u30fb\u30fb\u30fb\u3002\n\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3001\u5143\u753b\u50cf\u304b\u3089\u8272\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3068\u3044\u3046\u7d50\u8ad6\u306b\u81f3\u308a\u307e\u3057\u305f\u3002\n\n```go\n// Add colors from original gif image\nvar tmpPalette color.Palette\nfor x := 1; x <= rect.Dx(); x++ {\n    for y := 1; y <= rect.Dy(); y++ {\n        if !contains(tmpPalette, gifImage.Image[index].At(x, y)) {\n            tmpPalette = append(tmpPalette, gifImage.Image[index].At(x, y))\n        }\n    }\n}\n```\n\n\u8aad\u307f\u8fbc\u3093\u3060\u5143\u753b\u50cf\u3092\u30eb\u30fc\u30d7\u3067\u56de\u3057\u3001\u307e\u3060\u8ffd\u52a0\u3057\u3066\u3044\u306a\u3044`Color`\u304c\u3042\u3063\u305f\u3089`Palette`\u306b\u8ffd\u52a0\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3067\u3059\u3002\n`At`\u95a2\u6570\u3067`Paletted`\u306e\u7279\u5b9a\u306e\u30dd\u30a4\u30f3\u30c8\u306e`Color`\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3067\u5143\u753b\u50cf\u306e\u8272\u60c5\u5831\u3092\u6301\u3063\u305f`Palette`\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n###Rectangle\u3092\u4f5c\u6210\n\u3053\u3053\u3082\u4e00\u7b4b\u7e04\u3067\u306f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u3002\n\u30a2\u30cb\u30e1Gif\u306e1\u679a\u76ee\u4ee5\u964d\u306f\u30d5\u30ec\u30fc\u30e0\u306e\u518d\u5229\u7528\u304c\u53ef\u80fd\u306a\u305f\u3081\u3001\u5dee\u5206\u3057\u304b\u60c5\u5831\u304c\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u5ea7\u6a19\u304c(0,0)\u304b\u3089\u59cb\u307e\u3089\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001`Resize`\u306f\u3053\u306e\u3053\u3068\u3092\u8003\u616e\u3057\u3066\u304f\u308c\u305a\u3001\u63cf\u753b\u958b\u59cb\u4f4d\u7f6e\u304c(0,0)\u306b\u623b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u63cf\u753b\u958b\u59cb\u4f4d\u7f6e\u3092\u9069\u5207\u306a\u7b87\u6240\u306b\u305a\u3089\u3057\u3066\u3042\u3052\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\n\n```go\n// After first image, image may contains only difference\n// bounds may not start from at (0,0)\nresizedBounds := resizedImage.Bounds()\nif index >= 1 {\n    marginX := int(math.Floor(float64(rect.Min.X) * ratio))\n    marginY := int(math.Floor(float64(rect.Min.Y) * ratio))\n    resizedBounds = image.Rect(marginX, marginY, resizedBounds.Dx()+marginX,\n                        resizedBounds.Dy()+marginY)\n}\n```\n\n\u5143\u753b\u50cf\u306e`Min.X`\u3068`Min.Y`\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u3066\u7e2e\u5c0f\u3057\u3001\u30ea\u30b5\u30a4\u30ba\u5f8c\u306e`Rectangle`\u306b\u53cd\u6620\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067`Rectangle`\u3068`Palette`\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n##\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u753b\u50cf\u3092\u63cf\u753b\n`NewPaletted`\u3092\u4f7f\u7528\u3057\u3066`Paletted`\u3092\u4f5c\u6210\u5f8c\u3001\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u753b\u50cf\u3092`Draw`\u3092\u4f7f\u7528\u3057\u3066\u63cf\u753b\u3057\u307e\u3059\u3002\n\u63cf\u753b\u3057\u305f`Paletted`\u3092\u5143\u753b\u50cf\u3068\u5dee\u3057\u66ff\u3048\u307e\u3059\u3002\n\n```go\nresizedPalette := image.NewPaletted(resizedBounds, tmpPalette)\ndraw.Draw(resizedPalette, resizedBounds, resizedImage, image.ZP, draw.Src)\ngifImage.Image[index] = resizedPalette\n```\n\n##\u30a2\u30cb\u30e1Gif\u3092\u51fa\u529b\n\u30a2\u30cb\u30e1Gif\u3092\u51fa\u529b\u3059\u308b\u524d\u306b\u3001`Config`\u306e\u30b5\u30a4\u30ba\u3092\u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u30b5\u30a4\u30ba\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001[gif.EncodeAll](https://golang.org/pkg/image/gif/#EncodeAll)\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n```go\n// Set size to resized size\ngifImage.Config.Width = int(math.Floor(width * ratio))\ngifImage.Config.Height = int(math.Floor(height * ratio))\ngif.EncodeAll(tmpFile, gifImage)\n```\n\n\u3053\u308c\u3067\u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305f\u30a2\u30cb\u30e1Gif\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n#\u4f5c\u3063\u3066\u307f\u3066\n\u6700\u521d\u306f\u3069\u3046\u3057\u305f\u3082\u306e\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u3069\u3093\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u304b\u3068\u306b\u304b\u304f\u51fa\u529b\u3057\u3066\u307f\u305f\u3089\u306a\u3093\u3068\u306a\u304f\u89e3\u6c7a\u306e\u7cf8\u53e3\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n\u3082\u3057\u7c21\u5358\u306b\u51fa\u6765\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u305c\u3072\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n\n\u4eca\u56de\u306e\u7d4c\u9a13\u3092\u5fdc\u7528\u3057\u3066\u3001\u30a2\u30cb\u30e1Gif\u3067\u8272\u3005\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["golang", "Go", "gif", "GIF\u30a2\u30cb\u30e1"]}