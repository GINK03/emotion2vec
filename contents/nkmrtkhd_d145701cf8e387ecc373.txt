{"context": " More than 1 year has passed since last update.\u516c\u5f0f\u306f\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u308d\u3001\u3068\u8a00\u3044\u305f\u3044\u3002\nfunc uploadLargeFile(srcPath a_sSrcPath:String, dstPath a_sDstPath:String){\n\n    if let client=Dropbox.authorizedClient{\n\n        let inputStrm            = NSInputStream(fileAtPath: a_sSrcPath)\n        inputStrm!.open()\n        let sendBlockByte        = 1024 * 1024 * 50//50MB\u6bce\u3067\n        var transferedCnt:UInt64 = 0\n        var buffer               = Array<UInt8>(count:sendBlockByte, repeatedValue:0)\n        var data                 = NSData.init(bytesNoCopy: &buffer, length:sendBlockByte, freeWhenDone:false)\n        var sessionID            = \"\"\n        var retryCnt             = 0\n\n\n\n        var appendNextBlock:() -> Void = { () -> Void in }\n        appendNextBlock = { () in\n\n            let readCnt = inputStrm!.read(&buffer, maxLength: sendBlockByte)\n            if (readCnt > 0) {\n                if (readCnt != sendBlockByte) {\n                    data = NSData.init(bytesNoCopy: &buffer, length:(readCnt >= 0 ? readCnt: 0), freeWhenDone:false)\n                }\n\n                var l_fncCompletion:((Void)?, CallError<(Files.UploadSessionLookupError)>?) -> Void = { (_, _) -> Void in }\n                l_fncCompletion = { (response, error) in\n\n                    debugPrint(response)\n\n                    if error != nil {\n                        // Lets Rety\n                        retryCnt++\n                        if (retryCnt < 4) {\n                            client.files.uploadSessionAppend(sessionId:sessionID, offset:transferedCnt, body:data).response(l_fncCompletion)\n                        }else{\n                            debugPrint(\"ERROR\")\n                        }\n                    }else{\n                        transferedCnt = transferedCnt + UInt64(readCnt)\n                        retryCnt = 0\n                        appendNextBlock()\n                    }\n                }\n                client.files.uploadSessionAppend(sessionId:sessionID, offset:transferedCnt, body:data).response(l_fncCompletion)\n            }else{\n                //\u5168\u30d6\u30ed\u30c3\u30af\u9001\u4fe1\u3067\u304d\u305f\u3068\u304d\u3001finish\u3059\u308b\n                if (transferedCnt > 0) {\n                    let sessionCursor = Files.UploadSessionCursor(sessionId: sessionID, offset: transferedCnt)\n                    let commitInfo = Files.CommitInfo(path: a_sDstPath, mode: .Overwrite, autorename: false, clientModified: nil, mute: false)\n\n                    client.files.uploadSessionFinish(cursor: sessionCursor, commit: commitInfo, body: NSData()).response( { (response, error) in\n\n\n                        if let _ = response {\n                            debugPrint(\"FINISH\")\n                        }else{\n                            debugPrint(\"ERROR\")\n                        }\n                    })\n                }else{\n                    debugPrint(\"ERROR\")\n                }\n            }\n        }\n\n        //\u7a7a\u306eNSData\u3067\u59cb\u3081\u308b\n        let tmp = NSData()\n        client.files.uploadSessionStart(body:tmp).response( {\n            (response, errorType) -> Void in\n            if let (startResult) = response {\n                sessionID = startResult.sessionId\n                appendNextBlock()\n            }else{\n                debugPrint(\"ERROR\")\n            }\n        })\n\n    }\n\n}\n\n\n\u516c\u5f0f\u306f\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u308d\u3001\u3068\u8a00\u3044\u305f\u3044\u3002\n\n    func uploadLargeFile(srcPath a_sSrcPath:String, dstPath a_sDstPath:String){\n        \n        if let client=Dropbox.authorizedClient{\n            \n            let inputStrm            = NSInputStream(fileAtPath: a_sSrcPath)\n            inputStrm!.open()\n            let sendBlockByte        = 1024 * 1024 * 50//50MB\u6bce\u3067\n            var transferedCnt:UInt64 = 0\n            var buffer               = Array<UInt8>(count:sendBlockByte, repeatedValue:0)\n            var data                 = NSData.init(bytesNoCopy: &buffer, length:sendBlockByte, freeWhenDone:false)\n            var sessionID            = \"\"\n            var retryCnt             = 0\n            \n            \n            \n            var appendNextBlock:() -> Void = { () -> Void in }\n            appendNextBlock = { () in\n                \n                let readCnt = inputStrm!.read(&buffer, maxLength: sendBlockByte)\n                if (readCnt > 0) {\n                    if (readCnt != sendBlockByte) {\n                        data = NSData.init(bytesNoCopy: &buffer, length:(readCnt >= 0 ? readCnt: 0), freeWhenDone:false)\n                    }\n                    \n                    var l_fncCompletion:((Void)?, CallError<(Files.UploadSessionLookupError)>?) -> Void = { (_, _) -> Void in }\n                    l_fncCompletion = { (response, error) in\n                        \n                        debugPrint(response)\n                        \n                        if error != nil {\n                            // Lets Rety\n                            retryCnt++\n                            if (retryCnt < 4) {\n                                client.files.uploadSessionAppend(sessionId:sessionID, offset:transferedCnt, body:data).response(l_fncCompletion)\n                            }else{\n                                debugPrint(\"ERROR\")\n                            }\n                        }else{\n                            transferedCnt = transferedCnt + UInt64(readCnt)\n                            retryCnt = 0\n                            appendNextBlock()\n                        }\n                    }\n                    client.files.uploadSessionAppend(sessionId:sessionID, offset:transferedCnt, body:data).response(l_fncCompletion)\n                }else{\n                    //\u5168\u30d6\u30ed\u30c3\u30af\u9001\u4fe1\u3067\u304d\u305f\u3068\u304d\u3001finish\u3059\u308b\n                    if (transferedCnt > 0) {\n                        let sessionCursor = Files.UploadSessionCursor(sessionId: sessionID, offset: transferedCnt)\n                        let commitInfo = Files.CommitInfo(path: a_sDstPath, mode: .Overwrite, autorename: false, clientModified: nil, mute: false)\n                        \n                        client.files.uploadSessionFinish(cursor: sessionCursor, commit: commitInfo, body: NSData()).response( { (response, error) in\n                            \n                            \n                            if let _ = response {\n                                debugPrint(\"FINISH\")\n                            }else{\n                                debugPrint(\"ERROR\")\n                            }\n                        })\n                    }else{\n                        debugPrint(\"ERROR\")\n                    }\n                }\n            }\n            \n            //\u7a7a\u306eNSData\u3067\u59cb\u3081\u308b\n            let tmp = NSData()\n            client.files.uploadSessionStart(body:tmp).response( {\n                (response, errorType) -> Void in\n                if let (startResult) = response {\n                    sessionID = startResult.sessionId\n                    appendNextBlock()\n                }else{\n                    debugPrint(\"ERROR\")\n                }\n            })\n            \n        }\n        \n    }\n", "tags": ["swiftydropbox", "Dropbox", "Swift"]}