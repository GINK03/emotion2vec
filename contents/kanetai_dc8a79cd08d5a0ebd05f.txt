{"context": "\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3084\u3063\u3066\u305f\u6642\u306f\u3001C++\u304c\u30e1\u30a4\u30f3\u3001Java\u304c\u30b5\u30d6(\u6587\u5b57\u5217\u51e6\u7406\u3001BigIntegert\u7528)\u3067\u3001\u7d20\u6570\u5224\u5b9a\u3092\u5b9f\u88c5\u3057\u3066\u307e\u3057\u305f\u304c\u3001\u5148\u65e5\u3001Ruby\u306b\u306fPrime\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u308b\u3053\u3068\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u3001Prime\u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\u3092\u307e\u3068\u3081\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u7d50\u69cb\u4f7f\u3044\u3084\u3059\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u4f7f\u3046\u5834\u5408\u306f\u3001\u3069\u306e\u7a0b\u5ea6\u306e\u5927\u304d\u3055\u307e\u3067\u5927\u4e08\u592b\u305d\u3046\u304b\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6e2c\u5b9a\u3092\u3057\u3066\u304a\u3044\u305f\u65b9\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u53c2\u8003\n\u279c  ~  ruby --version\nruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-darwin15]\n\nRuby\u306ePrime\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u306b\u306fprime\u3092\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nrequire 'prime'\n\n\nN\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\nprime?(value, generator = Prime::Generator23.new) -> bool\n\nn = 83\nputs(\"#{n} is prime number\") if Prime.prime?(n) #=> 83 is prime number\n\n\n\u7d20\u6570\u306e\u5217\u6319\n\u7d20\u6570\u306e\u5217\u6319\u306b\u306feach\u3092\u4f7f\u3044\u307e\u3059\u3002upper_bound\u304cnil(\u30c7\u30d5\u30a9\u30eb\u30c8\u304cnil\u306a\u306e\u3067\u4f55\u3082\u66f8\u304b\u306a\u3044)\u5834\u5408\u306f\u3001\u7121\u9650\u306b\u5217\u6319\u3057\u307e\u3059\u3002\u7d20\u6570\u5217\u306f\u6607\u9806\u306b\u306a\u308a\u307e\u3059\u3002\neach(upper_bound = nil, generator = EratosthenesGenerator.new) {|prime| ... } -> object[permalink][rdoc]\neach(upper_bound = nil, generator = EratosthenesGenerator.new) -> Enumerator\n\n\n\u7d20\u6570\u5224\u5b9a\u8868\ntable = Array.new(N+1, false) #\u914d\u5217\u306eindex\u306f0 origin\nPrime.each(N) {|prime| table[prime] = true }\n#[Finished in 0.59s] N = 1000000\n\n\n\nN\u4ee5\u4e0b\u306e\u7d20\u6570\u5217\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3060\u3068\u3042\u308b\u6570\u4ee5\u4e0b\u306e\u7d20\u6570\u5217\u3092\u59cb\u3081\u306b\u751f\u6210\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\u3001to_a\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u7d20\u6570\u914d\u5217\u304c\u4f5c\u308c\u307e\u3059\u3002\nprimes = Prime.each(N).to_a\n#[Finished in 0.499s] #N = 1000000\n\n#N\u4ee5\u4e0b\u306e\u53cc\u5b50\u7d20\u6570\u5217\nPrime.each(N).each_cons(2).select{|p,r| r-p == 2}\n\n\nL\u4ee5\u4e0aH\u4ee5\u4e0b\u306e\u7d20\u6570\u5217\n\u6bce\u56de\u3001\u7d20\u6570\u5217\u3092\u30eb\u30fc\u30d7\u3057\u3066\u8abf\u3079\u3066\u3082\u826f\u3044\u3067\u3059\u304c\u3001L, H\u304c\u5927\u304d\u304f\u306a\u308b\u3068O(H)\u306e\u8a08\u7b97\u91cf\u304c\u304b\u304b\u3063\u3066\u52b9\u7387\u304c\u60aa\u304f\u306a\u308a\u307e\u3059\u3002\u6607\u9806\u306e\u7d20\u6570\u5217\u304c\u3042\u308c\u3070\u3001\uff12\u5206\u63a2\u7d22\u3067L\u4ee5\u4e0aH\u4ee5\u4e0b\u306e\u7d20\u6570\u5217(\u30b9\u30e9\u30a4\u30b9\u3059\u3079\u304d\u30a4\u30f3\u30c7\u30af\u30b9)\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nC++\u306a\u3089std::lower_bound, std::upper_bound\u3092\u4f7f\u3048\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u304c\u3089Ruby\u306b\u306f\u305d\u308c\u76f8\u5f53\u306e\u3082\u306e\u304c(\u305f\u3076\u3093)\u306a\u3044\u306e\u3067\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u5883\u754c\u6761\u4ef6\u3092\u9593\u9055\u3048\u305d\u3046\u306a\u306e\u3067\u3001lower_bound, upper_bound\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001\u7d20\u76f4\u306bC++\u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059... -> Array#bsearch_index, Range#bsearch\u306efind-minimum \u30e2\u30fc\u30c9\u3067\u540c\u7b49\u306e\u3082\u306e\u304c\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n\u4f3c\u305f\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3067Array#bsearch\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306findex\u3067\u306f\u306a\u304f\u8981\u7d20\u3092\u8fd4\u3059\u306e\u3067\u6ce8\u610f.\n\nArray#bsearch_index, Range#bsearch\u306f\u30ec\u30f3\u30b8\u5916(C++\u3067\u3044\u3046\u3068\u3053\u308d\u306ea.end())\u306e\u5834\u5408nil\u3092\u8fd4\u3057\u307e\u3059\u3002C++\u3068\u540c\u3058\u3088\u3046\u306a\u6319\u52d5\u306b\u3057\u305f\u3044\u306a\u3089idx.nil? ? a.size : idx\u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\ngist:bound.rb\ndef lowerBound(a, key)\n    idx = (0...a.size).bsearch { |i| a[i] >= key }\n    #idx = bsearch_index { |e| e >= key } #Ruby 2.3 and later\n    idx.nil? ? a.size : idx\nend\ndef upperBound(a, key)\n    idx = (0...a.size).bsearch { |i| a[i] > key }\n    #idx = bsearch_index { |e| e > key } #Ruby 2.3 and later\n    idx.nil? ? a.size : idx\nend\nupperBound(primes, H) - lowerBound(primes, L) #\u90e8\u5206\u7d20\u6570\u5217\u306e\u500b\u6570\nprimes[lowerBound(primes, L)...upperBound(primes, H)] #\u90e8\u5206\u7d20\u6570\u5217\n\n\n\u81ea\u529b\u5b9f\u88c5\u7248\ndef lowerBound(a, key)\n    lb = -1; ub = a.length\n    while ub - lb > 1\n        mid = (lb + ub) / 2\n        if a[mid] >= key\n            ub = mid\n        else\n            lb = mid\n        end\n    end\n    ub\nend\ndef upperBound(a, key)\n    lb = -1; ub = a.length\n    while ub - lb > 1\n        mid = (lb + ub) / 2\n        if a[mid] <= key\n            lb = mid\n        else\n            ub = mid\n        end\n    end\n    ub\nend\n\n\n\n\u59cb\u3081\u306en\u500b, n\u756a\u76ee\u306e\u7d20\u6570\n\u30a2\u30c9\u30db\u30c3\u30af\u306bPrime.each.take(n)\u3068\u3057\u3066\u3082\u826f\u3044\u3067\u3059\u304c\u3001\u30af\u30a8\u30ea\u6bce\u306b\u3084\u308b\u3068\u52b9\u7387\u304c\u60aa\u3044\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u5341\u5206\u306a\u5927\u304d\u3055\u306e\u7d20\u6570\u5217\u3092\u4f5c\u3063\u3066\u304a\u3044\u3066\u3001array[0...n]\u3092\u4f7f\u3046\u3053\u3068\u306e\u65b9\u304c\u591a\u3044\u3067\u3057\u3087\u3046\u3002\n##\u59cb\u3081\u306en\u500b\u306e\u7d20\u6570\nary = Prime.each.take(n).to_a #\u30a2\u30c9\u30db\u30c3\u30c3\u30af\u306bn\u500b\nary = primes[0...n] #Prime.each.take()\u3084Prime.each()\u3067\u5927\u304d\u3081\u306e\u7d20\u6570\u5217\u3092\u4f5c\u3063\u3066\u304a\u304f\n##n\u756a\u76ee\u306e\u7d20\u6570\nPrime.each.take(n).last\nprimes[n-1]\n\n\u5c1a\u3001\u7d20\u6570\u5b9a\u7406\u306b\u3088\u308b\u3068\u3001x\u4ee5\u4e0b\u306e\u7d20\u6570\u306e\u500b\u6570\u306f\u3001\nxlnxxln\u2061x{ \\frac{x}{\\ln x}\n}\n\u3067\u6982\u7b97\u3067\u304d\u307e\u3059\u3002\n\n\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\nprime_division\u3067\u7d20\u56e0\u6570\u5206\u89e3\u3001int_from_prime_division\u3067\u9006\u6f14\u7b97\u304c\u3067\u304d\u308b\u3002\nprime_division(value, generator= Prime::Generator23.new) -> [[Integer, Integer]]\nint_from_prime_division(pd) -> Integer[permalink][rdoc]\n\nint_from_prime_division\u306f\u9006\u6f14\u7b97\u3092\u3059\u308b\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u5358\u7d14\u306b \u03a0pe\u03a0pe\\Pi p^{e}\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u7d20\u56e0\u6570\u306b\u5206\u89e3\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\na = Prime.prime_division(454085) #=> [[5, 1], [197, 1], [461, 1]]\nPrime.int_from_prime_division(a) #=> 454085\nPrime.int_from_prime_division([[2, 2], [4, 1], [10, 2]]) #=>1600\n\n\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3084\u3063\u3066\u305f\u6642\u306f\u3001C++\u304c\u30e1\u30a4\u30f3\u3001Java\u304c\u30b5\u30d6(\u6587\u5b57\u5217\u51e6\u7406\u3001BigIntegert\u7528)\u3067\u3001\u7d20\u6570\u5224\u5b9a\u3092\u5b9f\u88c5\u3057\u3066\u307e\u3057\u305f\u304c\u3001\u5148\u65e5\u3001Ruby\u306b\u306fPrime\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u308b\u3053\u3068\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u3001Prime\u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\u3092\u307e\u3068\u3081\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7d50\u69cb\u4f7f\u3044\u3084\u3059\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u4f7f\u3046\u5834\u5408\u306f\u3001\u3069\u306e\u7a0b\u5ea6\u306e\u5927\u304d\u3055\u307e\u3067\u5927\u4e08\u592b\u305d\u3046\u304b\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6e2c\u5b9a\u3092\u3057\u3066\u304a\u3044\u305f\u65b9\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n[\u53c2\u8003](http://maehrm.hatenablog.com/entry/20130119/p1)\n\n```sh\n\u279c  ~  ruby --version\nruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-darwin15]\n```\n\nRuby\u306e[Prime](http://ruby-doc.org/stdlib-2.3.0/libdoc/prime/rdoc/Prime.html)\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u306b\u306f`prime`\u3092\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```ruby\nrequire 'prime'\n```\n\n##N\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\n```ruby\nprime?(value, generator = Prime::Generator23.new) -> bool\n```\n\n```ruby\nn = 83\nputs(\"#{n} is prime number\") if Prime.prime?(n) #=> 83 is prime number\n```\n\n##\u7d20\u6570\u306e\u5217\u6319\n\u7d20\u6570\u306e\u5217\u6319\u306b\u306feach\u3092\u4f7f\u3044\u307e\u3059\u3002upper_bound\u304cnil(\u30c7\u30d5\u30a9\u30eb\u30c8\u304cnil\u306a\u306e\u3067\u4f55\u3082\u66f8\u304b\u306a\u3044)\u5834\u5408\u306f\u3001\u7121\u9650\u306b\u5217\u6319\u3057\u307e\u3059\u3002**\u7d20\u6570\u5217\u306f\u6607\u9806\u306b\u306a\u308a\u307e\u3059\u3002**\n\n```ruby\neach(upper_bound = nil, generator = EratosthenesGenerator.new) {|prime| ... } -> object[permalink][rdoc]\neach(upper_bound = nil, generator = EratosthenesGenerator.new) -> Enumerator\n```\n\n###\u7d20\u6570\u5224\u5b9a\u8868\n\n```ruby\ntable = Array.new(N+1, false) #\u914d\u5217\u306eindex\u306f0 origin\nPrime.each(N) {|prime| table[prime] = true }\n#[Finished in 0.59s] N = 1000000\n\n```\n\n###N\u4ee5\u4e0b\u306e\u7d20\u6570\u5217\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3060\u3068\u3042\u308b\u6570\u4ee5\u4e0b\u306e\u7d20\u6570\u5217\u3092\u59cb\u3081\u306b\u751f\u6210\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\u3001`to_a`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u7d20\u6570\u914d\u5217\u304c\u4f5c\u308c\u307e\u3059\u3002\n\n```ruby\nprimes = Prime.each(N).to_a\n#[Finished in 0.499s] #N = 1000000\n```\n```ruby\n#N\u4ee5\u4e0b\u306e\u53cc\u5b50\u7d20\u6570\u5217\nPrime.each(N).each_cons(2).select{|p,r| r-p == 2}\n```\n\n###L\u4ee5\u4e0aH\u4ee5\u4e0b\u306e\u7d20\u6570\u5217\n\u6bce\u56de\u3001\u7d20\u6570\u5217\u3092\u30eb\u30fc\u30d7\u3057\u3066\u8abf\u3079\u3066\u3082\u826f\u3044\u3067\u3059\u304c\u3001L, H\u304c\u5927\u304d\u304f\u306a\u308b\u3068O(H)\u306e\u8a08\u7b97\u91cf\u304c\u304b\u304b\u3063\u3066\u52b9\u7387\u304c\u60aa\u304f\u306a\u308a\u307e\u3059\u3002\u6607\u9806\u306e\u7d20\u6570\u5217\u304c\u3042\u308c\u3070\u3001\uff12\u5206\u63a2\u7d22\u3067L\u4ee5\u4e0aH\u4ee5\u4e0b\u306e\u7d20\u6570\u5217(\u30b9\u30e9\u30a4\u30b9\u3059\u3079\u304d\u30a4\u30f3\u30c7\u30af\u30b9)\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n~~C++\u306a\u3089[std::lower_bound](http://www.cplusplus.com/reference/algorithm/lower_bound/), [std::upper_bound](http://www.cplusplus.com/reference/algorithm/upper_bound/)\u3092\u4f7f\u3048\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u304c\u3089Ruby\u306b\u306f\u305d\u308c\u76f8\u5f53\u306e\u3082\u306e\u304c(*\u305f\u3076\u3093*)\u306a\u3044\u306e\u3067\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002*\u5883\u754c\u6761\u4ef6\u3092\u9593\u9055\u3048\u305d\u3046\u306a\u306e\u3067\u3001lower_bound, upper_bound\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001\u7d20\u76f4\u306bC++\u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059...*~~ -> [Array#bsearch_index](http://ruby-doc.org/core-2.3.0/Array.html#method-i-bsearch_index), [Range#bsearch](http://ruby-doc.org/core-2.2.0/Range.html#method-i-bsearch)\u306efind-minimum \u30e2\u30fc\u30c9\u3067\u540c\u7b49\u306e\u3082\u306e\u304c\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n- \u4f3c\u305f\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3067[Array#bsearch](http://ruby-doc.org/core-2.3.0/Array.html#method-i-bsearch)\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306findex\u3067\u306f\u306a\u304f\u8981\u7d20\u3092\u8fd4\u3059\u306e\u3067\u6ce8\u610f.\n- `Array#bsearch_index`, `Range#bsearch`\u306f\u30ec\u30f3\u30b8\u5916(C++\u3067\u3044\u3046\u3068\u3053\u308d\u306e`a.end()`)\u306e\u5834\u5408nil\u3092\u8fd4\u3057\u307e\u3059\u3002C++\u3068\u540c\u3058\u3088\u3046\u306a\u6319\u52d5\u306b\u3057\u305f\u3044\u306a\u3089`idx.nil? ? a.size : idx`\u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n[gist:bound.rb](https://gist.github.com/kanetai/35fe8e2722a9318aaffa61acb6d4d53a)\n\n```ruby\ndef lowerBound(a, key)\n    idx = (0...a.size).bsearch { |i| a[i] >= key }\n    #idx = bsearch_index { |e| e >= key } #Ruby 2.3 and later\n    idx.nil? ? a.size : idx\nend\ndef upperBound(a, key)\n    idx = (0...a.size).bsearch { |i| a[i] > key }\n    #idx = bsearch_index { |e| e > key } #Ruby 2.3 and later\n    idx.nil? ? a.size : idx\nend\nupperBound(primes, H) - lowerBound(primes, L) #\u90e8\u5206\u7d20\u6570\u5217\u306e\u500b\u6570\nprimes[lowerBound(primes, L)...upperBound(primes, H)] #\u90e8\u5206\u7d20\u6570\u5217\n```\n\n```ruby:\u81ea\u529b\u5b9f\u88c5\u7248\ndef lowerBound(a, key)\n    lb = -1; ub = a.length\n    while ub - lb > 1\n        mid = (lb + ub) / 2\n        if a[mid] >= key\n            ub = mid\n        else\n            lb = mid\n        end\n    end\n    ub\nend\ndef upperBound(a, key)\n    lb = -1; ub = a.length\n    while ub - lb > 1\n        mid = (lb + ub) / 2\n        if a[mid] <= key\n            lb = mid\n        else\n            ub = mid\n        end\n    end\n    ub\nend\n```\n\n###\u59cb\u3081\u306en\u500b, n\u756a\u76ee\u306e\u7d20\u6570\n\u30a2\u30c9\u30db\u30c3\u30af\u306b`Prime.each.take(n)`\u3068\u3057\u3066\u3082\u826f\u3044\u3067\u3059\u304c\u3001\u30af\u30a8\u30ea\u6bce\u306b\u3084\u308b\u3068\u52b9\u7387\u304c\u60aa\u3044\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u5341\u5206\u306a\u5927\u304d\u3055\u306e\u7d20\u6570\u5217\u3092\u4f5c\u3063\u3066\u304a\u3044\u3066\u3001`array[0...n]`\u3092\u4f7f\u3046\u3053\u3068\u306e\u65b9\u304c\u591a\u3044\u3067\u3057\u3087\u3046\u3002\n\n```ruby\n##\u59cb\u3081\u306en\u500b\u306e\u7d20\u6570\nary = Prime.each.take(n).to_a #\u30a2\u30c9\u30db\u30c3\u30c3\u30af\u306bn\u500b\nary = primes[0...n] #Prime.each.take()\u3084Prime.each()\u3067\u5927\u304d\u3081\u306e\u7d20\u6570\u5217\u3092\u4f5c\u3063\u3066\u304a\u304f\n##n\u756a\u76ee\u306e\u7d20\u6570\nPrime.each.take(n).last\nprimes[n-1]\n```\n\n\u5c1a\u3001[\u7d20\u6570\u5b9a\u7406](https://ja.wikipedia.org/wiki/%E7%B4%A0%E6%95%B0%E5%AE%9A%E7%90%86)\u306b\u3088\u308b\u3068\u3001x\u4ee5\u4e0b\u306e\u7d20\u6570\u306e\u500b\u6570\u306f\u3001\n\n```math\n \\frac{x}{\\ln x}\n```\n\n\u3067\u6982\u7b97\u3067\u304d\u307e\u3059\u3002\n\n##\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\n`prime_division`\u3067\u7d20\u56e0\u6570\u5206\u89e3\u3001`int_from_prime_division`\u3067\u9006\u6f14\u7b97\u304c\u3067\u304d\u308b\u3002\n\n```ruby\nprime_division(value, generator= Prime::Generator23.new) -> [[Integer, Integer]]\nint_from_prime_division(pd) -> Integer[permalink][rdoc]\n```\n*`int_from_prime_division`\u306f\u9006\u6f14\u7b97\u3092\u3059\u308b\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u5358\u7d14\u306b $\\Pi p^{e}$\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u7d20\u56e0\u6570\u306b\u5206\u89e3\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002*\n\n```ruby\na = Prime.prime_division(454085) #=> [[5, 1], [197, 1], [461, 1]]\nPrime.int_from_prime_division(a) #=> 454085\nPrime.int_from_prime_division([[2, 2], [4, 1], [10, 2]]) #=>1600\n```\n", "tags": ["math", "\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "Ruby", "\u6570\u5b66", "\u7d20\u6570"]}