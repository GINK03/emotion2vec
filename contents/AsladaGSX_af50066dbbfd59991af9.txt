{"tags": ["C++", "C++11"], "context": "\u3042\u304f\u307e\u3067\u3001\u304a\u52c9\u5f37\u7684\u306a\u30e1\u30e2\u3067\u3059\u3057\u3002\u8ff7\u3063\u305f\u8ecc\u8de1\u3092\u305d\u306e\u307e\u307e\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u5197\u9577\u3067\u3059\u3002\n\n\u304d\u3063\u304b\u3051\nUTF-8 \u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 wchar_t \u3067\u6587\u5b57\u5217\u3092\u5f97\u305f\u3044\uff01\u3063\u3066\u3044\u3046\u3001\u3059\u3063\u3052\u30fc\u5358\u7d14\u306a\u8981\u6c42\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3002\nstd::wifstream stream;\nstream.imbue(std::locale(std::locale::empty(), new std::codecvt_utf8<wchar_t>()));\n\nstream.open(L\"utf8test.dat\");   //  25MBytes\n\ndecltype(stream)::char_type buf[1024 * 64];\nwhile (stream.read(buf, _countof(buf)).gcount() > 0) {\n}\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3089\u30ed\u30fc\u30ab\u30ebHDD\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u7d42\u308f\u308b\u307e\u3067\u306b\u4e09\u5206\u3082\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u3066\u4f7f\u3044\u7269\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u3002(VS2015 c++ \u30c7\u30d0\u30c3\u30b0\u5b9f\u884c)\n\u8ffd\u3063\u3066\u3044\u304f\u3068\u3001codecvt_utf8 \u304c 1 \u30d0\u30a4\u30c8\u3054\u3068\u306b\u64cd\u4f5c\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u306b\u3076\u3064\u304b\u3063\u3066\u3001\u3042\u30fc\u3053\u308c\u306f\u304a\u305d\u3044\u308f\u30fc \u3068\u306a\u308b\u4f55\u304b\u3060\u3063\u305f\u306e\u3067\u3059\u3002\n\u3069\u3052\u3093\u304b\u305b\u3093\u3068\u3044\u304b\u3093\u3002\n\u305d\u3082\u305d\u3082\u666e\u901a\u306b\u3001\u30b3\u30fc\u30c9\u5909\u63db\u306a\u3093\u304b\u305b\u305a\u306b\u8aad\u307f\u8fbc\u3093\u3060\u3089\u666e\u901a\u306b\u3044\u3064\u3082\u306e\u901f\u5ea6\u51fa\u308b\u3093\u3067\u3059\u3088\u3002\nstd::ifstream stream;   //  wifstream \u2192 ifstream\n//stream.imbue(std::locale(std::locale::empty(), new std::codecvt_utf8<wchar_t>()));\n\nstream.open(\"utf8test.dat\");    //  25MBytes\n\ndecltype(stream)::char_type buf[1024 * 64];\nwhile (stream.read(buf, _countof(buf)).gcount() > 0) {\n}\n\n\u3053\u308c\u3060\u3068 200\u3349\u79d2\u3002\u307e\u3041\u5f53\u305f\u308a\u524d\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u666e\u901a\u306b Windows \u306e MultiByteToWideChar \u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u306b\u3057\u307e\u3057\u3087\u3046\u306d\u3063\u3066\u8a00\u3046\u3002\n\nutf8 \u306e\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\u3044\u3064\u3082\u3060\u3063\u305f\u3089\u3001\u666e\u901a\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3093\u3067\u3001\u30d0\u30c3\u30d5\u30a1\u3092 MultiByteToWideChar \u3057\u3066\uff5e\u3067\u6e08\u3080\u3093\u3067\u3059\u304c\u3002\n//\u8aad\u307f\u8fbc\u307f\u30b5\u30a4\u30ba\nstd::streamsize read = stream.read(buf, _countof(buf)).gcount();\n\nint size = MultiByteToWideChar(CP_UTF8, 0, buf, read, nullptr, 0);\nstd::wstring dest(size + 1);\nMultiByteToWideChar(CP_UTF8, 0, buf, read, &dest[0], size + 1);\n\n\u3053\u3093\u306a\u611f\u3058\u3002\u307e\u3041\u5b9a\u77f3\u3002(FileMap \u4f7f\u3048\u3068\u3044\u3046\u610f\u898b\u3082\u3042\u308d\u3046\u3051\u3069\u3001\u4eca\u56de\u306f\u4f7f\u308f\u306a\u3044\u3002)\n\u6587\u5b57\u30b3\u30fc\u30c9\u304c UTF-8 \u306a\u306e\u3067\u30011 \u6587\u5b57\u306b\u5bfe\u3059\u308b\u30d0\u30a4\u30c8\u6570\u304c 1-6 \u30d0\u30a4\u30c8\u3068\u307e\u3061\u307e\u3061\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u4f7f\u3048\u306a\u3044\u3002\u306c\u3045\u6b8b\u5ff5\u3002\nMultiByteToWideChar\u306e\u7b2c\u4e8c\u5f15\u6570\u3092 0 \u306b\u3057\u3066\u547c\u3073\u51fa\u3059\u3068\u3001\u4e00\u898b\u666e\u901a\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3093\u3060\u3051\u3069\u3001\u6700\u5f8c\u306e\u6587\u5b57\u3092\u898b\u308b\u3068\u6587\u5b57\u5316\u3051\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308b\u3002\n\u3053\u306e\u5834\u5408\u3001MultiByteToWideChar\u306e\u7b2c\u4e8c\u5f15\u6570\u3092 MB_ERR_INVALID_CHARS \u306b\u3057\u3066\u3084\u308b\u3068\u3001MultiByteToWideChar \u306f\u5931\u6557\u3057\u3066 GetLastError \u304c 1113 \u3092\u8fd4\u3057\u3066\u304f\u308b\u3002\n\u6700\u5f8c\u306e\u6587\u5b57\u304c\u9014\u4e2d\u3067\u9014\u5207\u308c\u3061\u3083\u3063\u3066\u308b\u306e\u306f\u666e\u901a\u306b\u60f3\u50cf\u3064\u304f\u3068\u601d\u3046\u3093\u3067\u3059\u304c\u3002\n\u3058\u3083\u3001\u6700\u5f8c\u306e\u6587\u5b57\u3069\u308c\u3088\u3063\u3066\u8a71\u306a\u3093\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u8a70\u307e\u3063\u305f\u306e\u3067\u3059\u3002\nMultiByteToWideChar \u306b\u306f\u3001\u3053\u308c\u3092\u77e5\u308b\u65b9\u6cd5\u304c\u7121\u3044\u3002\u5909\u63db\u3067\u304d\u305f\u6700\u5f8c\u306e\u6587\u5b57\u306e\u6b21\u306e\u6587\u5b57\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u304b\u53d6\u308c\u305f\u3089\u3088\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u305d\u3093\u306a\u5f15\u6570\u7121\u3044\u3093\u3067\u3059\u3088\u306d\u3002\n\u4e00\u6587\u5b57\u524a\u3063\u3066\u3001WideCharToMultiByte \u3057\u3066\u30d0\u30a4\u30c8\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3068\u304b\u3057\u305f\u304f\u306a\u3044\u3057\u3002\n\u304b\u3068\u3044\u3063\u3066\u30011 \u30d0\u30a4\u30c8\u305a\u3064\u6e1b\u3089\u3057\u3066\u3044\u3063\u3066 \u5909\u63db\u3057\u3066\u3001\u6210\u529f\u3057\u305f\u6700\u521d\u306e\u3068\u3053\u308d\uff01\u3068\u304b\u3084\u308a\u305f\u304f\u306a\u3044\u3057\u3002\n\u3053\u3053\u3067\u3001Wikipedia \u306e UTF-8 \u3092\u307f\u305f\u3089\u3001UTF-8 \u306f\u5148\u982d\u30d0\u30a4\u30c8\u3068\u5f8c\u7d9a\u30d0\u30a4\u30c8\u304c\u7c21\u5358\u306b\u898b\u5206\u3051\u304c\u3064\u304f\u3093\u3067\u3059\u306d\u3002\n\u305d\u3057\u3066\u3001\u5148\u982d\u30d0\u30a4\u30c8\u3092\u898b\u308c\u3070\u305d\u306e\u6587\u5b57\u306e\u30d0\u30a4\u30c8\u9577\u307e\u3067\u7c21\u5358\u306b\u308f\u304b\u308b\u3002\u826f\u304b\u3063\u305f\u826f\u304b\u3063\u305f\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u5909\u63db\u51e6\u7406\u306f\u3053\u3093\u306a\u304b\u3093\u3058\u306b\u3002\nstd::wstring read(std::istream *pStream) {\n    char buf[64 << 10];\n    const int bufExtra = 8;\n    const int bufPrimal = _countof(buf) - bufExtra;\n\n    auto read = pStream->read(buf, bufPrimal).gcount();\n    if (read == 0) {\n        return std::string();\n    }\n    assert(read < 1 + bufPrimal);\n\n    //\u6b21\u306e\u6587\u5b57\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    char *plast;\n    if (read < bufPrimal) {\n        //  \u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u90e8\u5206\n        plast = buf + read;\n    }\n    else {\n        //  \u5148\u982d\u30d0\u30a4\u30c8\u3092\u63a2\u3059\u3002\n        char * plead = buf + (bufPrimal - 1);\n\n        while ((*plead & 0xC0) == 0x80 && buf + bufPrimal - 6 < plead) {\n            plead -= 1;\n        }\n\n        //  \u6587\u5b57\u306e\u30d0\u30a4\u30c8\u6570\n        int bytes =\n            ((*plead & 0xFE) == 0xFC) ? 6 :\n            ((*plead & 0xFC) == 0xF8) ? 5 :\n            ((*plead & 0xF8) == 0xF0) ? 4 :\n            ((*plead & 0xF0) == 0xE0) ? 3 :\n            ((*plead & 0xE0) == 0xC0) ? 2 :\n            ((*plead & 0x80) == 0x00) ? 1 :\n            0;\n\n        //  \u6b21\u306e\u6587\u5b57\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u53d6\u5f97\n        plast = plead + bytes;\n        assert(plast < &buf[_countof(buf)]);\n\n        if (buf + bufPrimal < plast) {\n            //\u6587\u5b57\u304c\u30d0\u30c3\u30d5\u30a1\u304b\u3089\u3001\u306f\u307f\u51fa\u3066\u308b\u3002\n            //  plast \u307e\u3067 \u8aad\u307f\u8db3\u3059 (bufExtra\u9818\u57df)\n            read = pStream->read(buf + bufPrimal, plast - (buf + bufPrimal)).gcount();\n            if (read < plast - (buf + bufPrimal)) {\n                //  \u9014\u5207\u308c\u305f\n                throw;\n            }\n        }\n        else if (buf + bufPrimal == plast) {\n            //\u3074\u3063\u305f\u308a\u53ce\u307e\u3063\u3066\u308b\u3002\n            //  \u4f55\u3082\u3057\u306a\u3044\n        }\n        else {\n            //  \u306f\u307f\u51fa\u3082\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u3074\u3063\u305f\u308a\u53ce\u307e\u3063\u3066\u308b\u308f\u3051\u3067\u3082\u306a\u3044\u3002\n            //  \u306a\u3093\u304b\u304a\u304b\u3057\u3044\u3002\n            throw;\n        }\n    }\n\n\n    //\u5909\u63db\u30d0\u30a4\u30c8\u6570\n    int sizeConvert = plast - buf;\n\n    //\u5909\u63db.\n    int size = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, buf, sizeConvert, nullptr, 0);\n    std::wstring dest(size + 1);\n    MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, buf, sizeConvert, &dest[0], size + 1);\n\n    return dest;\n}\n\nint main() {\n    std::ifstream stream;\n    stream.open(L\"utf8test.dat\");   //  25MBytes\n\n    while (read(&stream).length()) {\n    }\n}\n\n\nstd::wstreambuf \u5316\nstandard \u3058\u3083\u3093\uff1f\u304b\u3063\u3053\u3044\u3044\u3058\u3083\u3093\uff1f(\u99ac\u9e7f)\nstruct utf8_streambuf : std::wstreambuf {\n    using _Traits = traits_type;\n\n    std::istream *pStream;\n    std::wstring dest;\n\n    utf8_streambuf(std::istream *pStream) : pStream(pStream) {\n        dest = read(pStream);\n        setg(&dest[0], &dest[0], &dest[dest.length()]);\n    }\n\n    // get a character from stream, but don't point past it\n    virtual int_type underflow() {\n        if (gptr() != 0 && gptr() < egptr()) {\n            return _Traits::to_int_type(*gptr());   // return buffered\n        }\n\n        dest = read(pStream);\n        setg(&dest[0], &dest[0], &dest[dest.length()]);\n\n        return _Traits::to_int_type(*dest.begin());\n    }\n\n    // put a character back to stream\n    virtual int_type pbackfail(int_type c = _Traits::eof()) {\n        if (c != _Traits::eof()) {\n            if (gptr() != 0 && eback() == gptr()) {\n                dest.insert(dest.begin(), c);\n                setg(&dest[0], &dest[0], &dest[dest.length()]);\n            }\n            else if (gptr() != 0 && eback() != gptr() && _Traits::eq(c, gptr()[-1]) == false) {\n                *_Gndec() = c;\n            }\n        }\n        return c;\n    }\n};\n\n\nstd::ifstream u8stream(L\"utf8test.dat\");    //25mb\nutf8_streambuf u8buf(&u8stream);\n\nstd::wistream stream(&u8buf);\n\ndecltype(stream)::char_type buf[1024 * 64];\nwhile (stream.read(buf, _countof(buf)).gcount() > 0) {\n}\n\n\n\n\u3042\u304f\u307e\u3067\u3001\u304a\u52c9\u5f37\u7684\u306a\u30e1\u30e2\u3067\u3059\u3057\u3002\u8ff7\u3063\u305f\u8ecc\u8de1\u3092\u305d\u306e\u307e\u307e\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u5197\u9577\u3067\u3059\u3002\n\n\u304d\u3063\u304b\u3051\n========\n\nUTF-8 \u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 wchar_t \u3067\u6587\u5b57\u5217\u3092\u5f97\u305f\u3044\uff01\u3063\u3066\u3044\u3046\u3001\u3059\u3063\u3052\u30fc\u5358\u7d14\u306a\u8981\u6c42\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3002\n\n```c++:\nstd::wifstream stream;\nstream.imbue(std::locale(std::locale::empty(), new std::codecvt_utf8<wchar_t>()));\n\nstream.open(L\"utf8test.dat\");\t//\t25MBytes\n\ndecltype(stream)::char_type buf[1024 * 64];\nwhile (stream.read(buf, _countof(buf)).gcount() > 0) {\n}\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3089\u30ed\u30fc\u30ab\u30ebHDD\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u7d42\u308f\u308b\u307e\u3067\u306b\u4e09\u5206\u3082\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u3066\u4f7f\u3044\u7269\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u3002(VS2015 c++ \u30c7\u30d0\u30c3\u30b0\u5b9f\u884c)\n\n\u8ffd\u3063\u3066\u3044\u304f\u3068\u3001codecvt_utf8 \u304c 1 \u30d0\u30a4\u30c8\u3054\u3068\u306b\u64cd\u4f5c\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u306b\u3076\u3064\u304b\u3063\u3066\u3001\u3042\u30fc\u3053\u308c\u306f\u304a\u305d\u3044\u308f\u30fc \u3068\u306a\u308b\u4f55\u304b\u3060\u3063\u305f\u306e\u3067\u3059\u3002\n\n\u3069\u3052\u3093\u304b\u305b\u3093\u3068\u3044\u304b\u3093\u3002\n\n\u305d\u3082\u305d\u3082\u666e\u901a\u306b\u3001\u30b3\u30fc\u30c9\u5909\u63db\u306a\u3093\u304b\u305b\u305a\u306b\u8aad\u307f\u8fbc\u3093\u3060\u3089\u666e\u901a\u306b\u3044\u3064\u3082\u306e\u901f\u5ea6\u51fa\u308b\u3093\u3067\u3059\u3088\u3002\n\n```c++:\nstd::ifstream stream;\t//\twifstream \u2192 ifstream\n//stream.imbue(std::locale(std::locale::empty(), new std::codecvt_utf8<wchar_t>()));\n\nstream.open(\"utf8test.dat\");\t//\t25MBytes\n\ndecltype(stream)::char_type buf[1024 * 64];\nwhile (stream.read(buf, _countof(buf)).gcount() > 0) {\n}\n```\n\n\u3053\u308c\u3060\u3068 200\u3349\u79d2\u3002\u307e\u3041\u5f53\u305f\u308a\u524d\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u666e\u901a\u306b Windows \u306e MultiByteToWideChar \u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u306b\u3057\u307e\u3057\u3087\u3046\u306d\u3063\u3066\u8a00\u3046\u3002\n\nutf8 \u306e\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n=======================\n\n\u3044\u3064\u3082\u3060\u3063\u305f\u3089\u3001\u666e\u901a\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3093\u3067\u3001\u30d0\u30c3\u30d5\u30a1\u3092 MultiByteToWideChar \u3057\u3066\uff5e\u3067\u6e08\u3080\u3093\u3067\u3059\u304c\u3002\n\n```c++\n//\u8aad\u307f\u8fbc\u307f\u30b5\u30a4\u30ba\nstd::streamsize read = stream.read(buf, _countof(buf)).gcount();\n\nint size = MultiByteToWideChar(CP_UTF8, 0, buf, read, nullptr, 0);\nstd::wstring dest(size + 1);\nMultiByteToWideChar(CP_UTF8, 0, buf, read, &dest[0], size + 1);\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3002\u307e\u3041\u5b9a\u77f3\u3002(FileMap \u4f7f\u3048\u3068\u3044\u3046\u610f\u898b\u3082\u3042\u308d\u3046\u3051\u3069\u3001\u4eca\u56de\u306f\u4f7f\u308f\u306a\u3044\u3002)\n\u6587\u5b57\u30b3\u30fc\u30c9\u304c UTF-8 \u306a\u306e\u3067\u30011 \u6587\u5b57\u306b\u5bfe\u3059\u308b\u30d0\u30a4\u30c8\u6570\u304c 1-6 \u30d0\u30a4\u30c8\u3068\u307e\u3061\u307e\u3061\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u4f7f\u3048\u306a\u3044\u3002\u306c\u3045\u6b8b\u5ff5\u3002\n\nMultiByteToWideChar\u306e\u7b2c\u4e8c\u5f15\u6570\u3092 0 \u306b\u3057\u3066\u547c\u3073\u51fa\u3059\u3068\u3001\u4e00\u898b\u666e\u901a\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3093\u3060\u3051\u3069\u3001\u6700\u5f8c\u306e\u6587\u5b57\u3092\u898b\u308b\u3068\u6587\u5b57\u5316\u3051\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308b\u3002\n\u3053\u306e\u5834\u5408\u3001MultiByteToWideChar\u306e\u7b2c\u4e8c\u5f15\u6570\u3092 MB_ERR_INVALID_CHARS \u306b\u3057\u3066\u3084\u308b\u3068\u3001MultiByteToWideChar \u306f\u5931\u6557\u3057\u3066 GetLastError \u304c 1113 \u3092\u8fd4\u3057\u3066\u304f\u308b\u3002\n\n\u6700\u5f8c\u306e\u6587\u5b57\u304c\u9014\u4e2d\u3067\u9014\u5207\u308c\u3061\u3083\u3063\u3066\u308b\u306e\u306f\u666e\u901a\u306b\u60f3\u50cf\u3064\u304f\u3068\u601d\u3046\u3093\u3067\u3059\u304c\u3002\n\n\u3058\u3083\u3001\u6700\u5f8c\u306e\u6587\u5b57\u3069\u308c\u3088\u3063\u3066\u8a71\u306a\u3093\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u8a70\u307e\u3063\u305f\u306e\u3067\u3059\u3002\nMultiByteToWideChar \u306b\u306f\u3001\u3053\u308c\u3092\u77e5\u308b\u65b9\u6cd5\u304c\u7121\u3044\u3002\u5909\u63db\u3067\u304d\u305f\u6700\u5f8c\u306e\u6587\u5b57\u306e\u6b21\u306e\u6587\u5b57\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u304b\u53d6\u308c\u305f\u3089\u3088\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u305d\u3093\u306a\u5f15\u6570\u7121\u3044\u3093\u3067\u3059\u3088\u306d\u3002\n\n\u4e00\u6587\u5b57\u524a\u3063\u3066\u3001WideCharToMultiByte \u3057\u3066\u30d0\u30a4\u30c8\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3068\u304b\u3057\u305f\u304f\u306a\u3044\u3057\u3002\n\u304b\u3068\u3044\u3063\u3066\u30011 \u30d0\u30a4\u30c8\u305a\u3064\u6e1b\u3089\u3057\u3066\u3044\u3063\u3066 \u5909\u63db\u3057\u3066\u3001\u6210\u529f\u3057\u305f\u6700\u521d\u306e\u3068\u3053\u308d\uff01\u3068\u304b\u3084\u308a\u305f\u304f\u306a\u3044\u3057\u3002\n\n\u3053\u3053\u3067\u3001Wikipedia \u306e UTF-8 \u3092\u307f\u305f\u3089\u3001UTF-8 \u306f\u5148\u982d\u30d0\u30a4\u30c8\u3068\u5f8c\u7d9a\u30d0\u30a4\u30c8\u304c\u7c21\u5358\u306b\u898b\u5206\u3051\u304c\u3064\u304f\u3093\u3067\u3059\u306d\u3002\n\u305d\u3057\u3066\u3001\u5148\u982d\u30d0\u30a4\u30c8\u3092\u898b\u308c\u3070\u305d\u306e\u6587\u5b57\u306e\u30d0\u30a4\u30c8\u9577\u307e\u3067\u7c21\u5358\u306b\u308f\u304b\u308b\u3002\u826f\u304b\u3063\u305f\u826f\u304b\u3063\u305f\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u5909\u63db\u51e6\u7406\u306f\u3053\u3093\u306a\u304b\u3093\u3058\u306b\u3002\n\n```c++:\nstd::wstring read(std::istream *pStream) {\n\tchar buf[64 << 10];\n\tconst int bufExtra = 8;\n\tconst int bufPrimal = _countof(buf) - bufExtra;\n\t\n\tauto read = pStream->read(buf, bufPrimal).gcount();\n\tif (read == 0) {\n\t\treturn std::string();\n\t}\n\tassert(read < 1 + bufPrimal);\n\t\n\t//\u6b21\u306e\u6587\u5b57\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n\tchar *plast;\n\tif (read < bufPrimal) {\n\t\t//\t\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u90e8\u5206\n\t\tplast = buf + read;\n\t}\n\telse {\n\t\t//\t\u5148\u982d\u30d0\u30a4\u30c8\u3092\u63a2\u3059\u3002\n\t\tchar * plead = buf + (bufPrimal - 1);\n\t\n\t\twhile ((*plead & 0xC0) == 0x80 && buf + bufPrimal - 6 < plead) {\n\t\t\tplead -= 1;\n\t\t}\n\t\n\t\t//\t\u6587\u5b57\u306e\u30d0\u30a4\u30c8\u6570\n\t\tint bytes =\n\t\t\t((*plead & 0xFE) == 0xFC) ? 6 :\n\t\t\t((*plead & 0xFC) == 0xF8) ? 5 :\n\t\t\t((*plead & 0xF8) == 0xF0) ? 4 :\n\t\t\t((*plead & 0xF0) == 0xE0) ? 3 :\n\t\t\t((*plead & 0xE0) == 0xC0) ? 2 :\n\t\t\t((*plead & 0x80) == 0x00) ? 1 :\n\t\t\t0;\n\t\n\t\t//\t\u6b21\u306e\u6587\u5b57\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u53d6\u5f97\n\t\tplast = plead + bytes;\n\t\tassert(plast < &buf[_countof(buf)]);\n\t\n\t\tif (buf + bufPrimal < plast) {\n\t\t\t//\u6587\u5b57\u304c\u30d0\u30c3\u30d5\u30a1\u304b\u3089\u3001\u306f\u307f\u51fa\u3066\u308b\u3002\n\t\t\t//\tplast \u307e\u3067 \u8aad\u307f\u8db3\u3059 (bufExtra\u9818\u57df)\n\t\t\tread = pStream->read(buf + bufPrimal, plast - (buf + bufPrimal)).gcount();\n\t\t\tif (read < plast - (buf + bufPrimal)) {\n\t\t\t\t//\t\u9014\u5207\u308c\u305f\n\t\t\t\tthrow;\n\t\t\t}\n\t\t}\n\t\telse if (buf + bufPrimal == plast) {\n\t\t\t//\u3074\u3063\u305f\u308a\u53ce\u307e\u3063\u3066\u308b\u3002\n\t\t\t//\t\u4f55\u3082\u3057\u306a\u3044\n\t\t}\n\t\telse {\n\t\t\t//\t\u306f\u307f\u51fa\u3082\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u3074\u3063\u305f\u308a\u53ce\u307e\u3063\u3066\u308b\u308f\u3051\u3067\u3082\u306a\u3044\u3002\n\t\t\t//\t\u306a\u3093\u304b\u304a\u304b\u3057\u3044\u3002\n\t\t\tthrow;\n\t\t}\n\t}\n\t\n\t\n\t//\u5909\u63db\u30d0\u30a4\u30c8\u6570\n\tint sizeConvert = plast - buf;\n\t\n\t//\u5909\u63db.\n\tint size = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, buf, sizeConvert, nullptr, 0);\n\tstd::wstring dest(size + 1);\n\tMultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, buf, sizeConvert, &dest[0], size + 1);\n\t\n\treturn dest;\n}\n\nint main() {\n\tstd::ifstream stream;\n\tstream.open(L\"utf8test.dat\");\t//\t25MBytes\n\t\n\twhile (read(&stream).length()) {\n\t}\n}\n```\n\nstd::wstreambuf \u5316\n==================\n\nstandard \u3058\u3083\u3093\uff1f\u304b\u3063\u3053\u3044\u3044\u3058\u3083\u3093\uff1f(\u99ac\u9e7f)\n\n```c++\nstruct utf8_streambuf : std::wstreambuf {\n\tusing _Traits = traits_type;\n\n\tstd::istream *pStream;\n\tstd::wstring dest;\n\n\tutf8_streambuf(std::istream *pStream) : pStream(pStream) {\n\t\tdest = read(pStream);\n\t\tsetg(&dest[0], &dest[0], &dest[dest.length()]);\n\t}\n\n\t// get a character from stream, but don't point past it\n\tvirtual int_type underflow() {\n\t\tif (gptr() != 0 && gptr() < egptr()) {\n\t\t\treturn _Traits::to_int_type(*gptr());\t// return buffered\n\t\t}\n\n\t\tdest = read(pStream);\n\t\tsetg(&dest[0], &dest[0], &dest[dest.length()]);\n\n\t\treturn _Traits::to_int_type(*dest.begin());\n\t}\n\n\t// put a character back to stream\n\tvirtual int_type pbackfail(int_type c = _Traits::eof()) {\n\t\tif (c != _Traits::eof()) {\n\t\t\tif (gptr() != 0 && eback() == gptr()) {\n\t\t\t\tdest.insert(dest.begin(), c);\n\t\t\t\tsetg(&dest[0], &dest[0], &dest[dest.length()]);\n\t\t\t}\n\t\t\telse if (gptr() != 0 && eback() != gptr() && _Traits::eq(c, gptr()[-1]) == false) {\n\t\t\t\t*_Gndec() = c;\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n};\n\n\nstd::ifstream u8stream(L\"utf8test.dat\");\t//25mb\nutf8_streambuf u8buf(&u8stream);\n\nstd::wistream stream(&u8buf);\n\ndecltype(stream)::char_type buf[1024 * 64];\nwhile (stream.read(buf, _countof(buf)).gcount() > 0) {\n}\n\n```\n\n"}