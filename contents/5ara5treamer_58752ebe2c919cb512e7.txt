{"context": "\n\n1.\u3053\u306e\u8a18\u4e8b\u3067\u5b66\u3079\u308b\u3053\u3068\u30fb\u5b66\u3079\u306a\u3044\u3053\u3068\n\u3000\u5b66\u3079\u308b\u3053\u3068\n- \u521d\u5fc3\u8005 Lisper \u304c\u66f8\u304f\u3061\u3083\u3063\u3061\u3044\u30b3\u30fc\u30c9\u3063\u3066\u3044\u3046\u306e\u306f\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u5206\u304b\u308b\u3002\n- \u53d6\u308a\u6562\u3048\u305a\u306f\u52d5\u304f\u30b3\u30fc\u30c9\u3092\u3044\u3058\u3063\u3066\uff0cLisp \u306e\u7df4\u7fd2\u53f0\u306b\u3067\u304d\u308b\u3002\n\u3000\u5b66\u3079\u306a\u3044\u3053\u3068\n- Lisp \u306e\u7f8e\u3057\u3044\u30b3\u30fc\u30c9\u6280\u6cd5\u3002\n- \u30aa\u30bb\u30ed\u30b2\u30fc\u30e0\u306e\u512a\u308c\u305f\u8a2d\u8a08\u3002\n\n2.\u66f8\u3044\u305f\u3082\u306e\n\nothelo.lisp\n(defparameter *board-size* 8)\n(defparameter *stone-chars* '(none white black))\n\n(defun put-initial-stones (board)\n  (let* ((i0 (- (truncate *board-size* 2) 1)) (i1 (+ i0 1)))\n    (setf (aref (aref board i0) i0) 'white)\n    (setf (aref (aref board i0) i1) 'black)\n    (setf (aref (aref board i1) i0) 'black)\n    (setf (aref (aref board i1) i1) 'white))\n  board)\n\n(defun make-board ()\n  (let ((board (make-array *board-size* :initial-element 'none)))\n    (loop for i below *board-size*\n          do (setf (aref board i) \n                   (make-array *board-size* :initial-element 'none)))\n    (put-initial-stones board)))\n\n(defparameter *board* (make-board))\n\n(defun describe-board ()\n  (princ \"  1 2 3 4 5 6 7 8\")\n  (fresh-line)\n  (loop for x below *board-size*\n        do (progn (princ (+ x 1))\n                  (princ \" \")\n                  (loop for y below *board-size*\n                        do (progn (case (aref (aref *board* x) y) \n                                    ((none)    (princ #\\.)) \n                                    ((white)   (princ #\\o)) \n                                    ((black)   (princ #\\x)) \n                                    (otherwise (princ #\\.)))\n                                  (princ \" \")))\n                  (fresh-line))))\n\n(defun put-stone (players-color x y)\n  (let ((u (- x 1)) (v (- y 1)))\n    (setf (aref (aref *board* u) v) players-color)\n    (reverse-stones players-color u v)))\n\n(defun reverse-stones (color u v)\n  (mapc (lambda (dir)\n          (mapc (lambda (positions)\n                  (let ((_u (car positions)) (_v (car (cdr positions))))\n                    (setf (aref (aref *board* _u) _v) color)))\n                (reversible-positions color u v dir)))\n          '(nw n_ ne e_ se s_ sw w_)))\n\n(defun reversible-positions (players-color u v direction)\n  (let ((temp '()) (positions_list '()))\n    (catch 'end\n        (mapc (lambda (positions)\n                (let* ((_u (car positions))\n                       (_v (cdr positions))\n                       (color (aref (aref *board* _u) _v)))\n                  (cond ((eq color 'none) \n                         (throw 'end t))\n                        ((not (eq color players-color))\n                         (setf temp (cons (list _u _v) temp)))\n                        ((eq color players-color)\n                         (setf positions_list temp)\n                         (throw 'end t)))))\n              (generator u v direction)))\n    (remove nil positions_list)))\n\n(defun generator (u v direction)\n  (labels ((do-nothing (i) i)\n           (dec (i) (- i 1))\n           (inc (i) (+ i 1))\n           (in-board? (i) (and (<= i *board-size*) (< 0 i))))\n    (let ((fu #'do-nothing) (fv #'do-nothing) (_u u) (_v v))\n      (case direction\n        ((nw) (progn (setf fu #'dec) (setf fv #'dec)))\n        ((n_) (setf fv #'dec))\n        ((ne) (progn (setf fu #'inc) (setf fv #'dec)))\n        ((e_) (setf fu #'inc))\n        ((se) (progn (setf fu #'inc) (setf fv #'inc)))\n        ((s_) (setf fv #'inc))\n        ((sw) (progn (setf fu #'dec) (setf fv #'inc)))\n        ((w_) (setf fu #'dec)))\n      (loop while (and (in-board? _u) (in-board? _v))\n            collect (progn (setf _u (funcall fu _u))\n                           (setf _v (funcall fv _v))\n                           (cons _u _v))))))\n\n\n\n[1]> (load \"othelo.lisp\")\n;; Loading file othelo.lisp ...\n;; Loaded file othelo.lisp\nT\n[2]> (describe-board)\n  1 2 3 4 5 6 7 8\n1 . . . . . . . . \n2 . . . . . . . . \n3 . . . . . . . . \n4 . . . o x . . . \n5 . . . x o . . . \n6 . . . . . . . . \n7 . . . . . . . . \n8 . . . . . . . . \nNIL\n[3]> (put-stone 'black 6 5)\n\nNIL \nNIL \nNIL \nNIL \nNIL \nNIL \nNIL \n((4 4)) \n(NW N_ NE E_ SE S_ SW W_)\n[4]> (describe-board)\n  1 2 3 4 5 6 7 8\n1 . . . . . . . . \n2 . . . . . . . . \n3 . . . . . . . . \n4 . . . o x . . . \n5 . . . x x . . . \n6 . . . . x . . . \n7 . . . . . . . . \n8 . . . . . . . . \nNIL\n[5]> (put-stone 'white 6 6)\n\n((4 4)) \nNIL \nNIL \nNIL \nNIL \nNIL \nNIL \nNIL \n(NW N_ NE E_ SE S_ SW W_)\n[6]> (describe-board)\n  1 2 3 4 5 6 7 8\n1 . . . . . . . . \n2 . . . . . . . . \n3 . . . . . . . . \n4 . . . o x . . . \n5 . . . x o . . . \n6 . . . . x o . . \n7 . . . . . . . . \n8 . . . . . . . . \nNIL\n\n\n\u3000\u3068\u3042\u308b\u30b5\u30a4\u30c8\u3067\u30aa\u30bb\u30ed\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u554f\u984c\u304c\u3042\u3063\u305f\u3093\u3060\u3051\u3069...\u306e\u8a18\u4e8b\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092\u305d\u306e\u307e\u307e Lisp \u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u305f\u3002\n\u3000\u3044\u3084\uff0c\u3082\u3046... \u3082\u306e\u3059\u3054\u304f\u75b2\u308c\u305f\u3002\n\u3000Lisp \u306a\u3093\u3066\u52c9\u5f37\u3057\u59cb\u3081\u305f\u3070\u304b\u308a\u3060\u3057\uff0c\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u3060\u3089\u3051\u3060\u3063\u305f\u304b\u3089\u3002\n\n3.\u3064\u307e\u3065\u3044\u305f\u3068\u3053\u308d\u30fb\u6c17\u3065\u3044\u305f\u3068\u3053\u308d\n\u3000\u521d\u5fc3\u8005 Lisper \u3068\u3057\u3066\uff0c\u3064\u307e\u3065\u3044\u3066\u3057\u307e\u3063\u305f\u3068\u3053\u308d\u30fb\u6c17\u3065\u3044\u305f\u3068\u3053\u308d\u3092\u307e\u3068\u3081\u3066\u304a\u304f\u3002\n\u3000\u5f8c\u3005\u5f79\u306b\u7acb\u3064\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n3.1.Lisp \u306e\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\n\nindex (4) for #(NONE NONE NONE BLACK WHITE NONE NONE NONE) is not of type `(INTEGER 0 (,ARRAY-DIMENSION-LIMIT))\n\n\u3000\u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u3082\u306e\u3059\u3054\u304f\u60a9\u307e\u3055\u308c\u305f\u3002\u3053\u308c\uff0c\u3069\u3046\u3044\u3046\u3053\u3068\u304b\u3068\u3044\u3046\u3068\uff0c\n[1]> (+ (car '(1 2)) (cdr '(1 2)))\n\n*** - +: (2) is not a number\nThe following restarts are available:\nUSE-VALUE      :R1      Input a value to be used instead.\nABORT          :R2      Abort main loop\n\n\u3000clisp \u3067\u5b9f\u884c\u3057\u3066\u307f\u305f\u306e\u3060\u304c\uff0c\u3053\u308c\u304c\u5931\u6557\u3059\u308b\u306e\u3068\u540c\u3058\u3053\u3068\u3060\u3063\u305f\u3002\n\u3000Lisp \u3092\u3061\u3087\u3063\u3068\u52c9\u5f37\u3057\u305f\u65b9\u306a\u3089\u304a\u5206\u304b\u308a\u306e\u901a\u308a\uff0c\u30ea\u30b9\u30c8\u306f\u30b3\u30f3\u30b9\u30bb\u30eb\u304b\u3089\u6210\u308b\u3002\n\u3000\u3060\u304b\u3089\uff0c(cons 1 cons 2 nil)) \u3068 '(1 2) \u306f\uff0c\u540c\u3058\u3082\u306e\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\u3000\u3064\u307e\u308a\uff0c\u3053\u306e\u30ea\u30b9\u30c8\u306f2\u3064\u306e\u30b3\u30f3\u30b9\u30bb\u30eb\u304b\u3089\u6210\u308a\uff0c3\u3064\u306e\u8981\u7d20\u304b\u3089\u6210\u308b\u3068\u3044\u3046\u3053\u3068\u3002\n\u3000\u3053\u308c\u3092\u3059\u3063\u304b\u308a\u5fd8\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u306e\u3067\uff0c(cdr '(1 2)) \u304c 2 \u3092\u8fd4\u3059\u306e\u3060\u3068\u601d\u3044\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u3002\u5b9f\u969b\u306b\u306f\uff0c(2) \u3059\u306a\u308f\u3061 (cons 2 nil) \u3092\u8fd4\u3059\u306e\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3060\u3002\u3053\u308c\u306b\u6c17\u3065\u304f\u306e\u306b\u672c\u5f53\u306b\u9577\u3044\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u3002\n\n3.2.Lisp \u306e\u8868\u73fe\u529b\n\u3000\u304b\u306a\u308a\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u307e\u304f\u308a\u306a\u304c\u3089\u306e\u4f5c\u696d\u306b\u306f\u306a\u3063\u305f\u304c\uff0c\u3082\u3068\u306eRuby\u30b3\u30fc\u30c9\u3068\u306f\u591a\u5206\u305d\u308c\u307b\u3069\u5909\u308f\u3089\u306a\u3044\u7406\u5c48\u3067\u52d5\u3044\u3066\u3044\u308b\u3068\u601d\u3046\u3002Ruby\u3067\u3084\u308c\u308b\u3053\u3068\u306f\u5927\u4f53\uff0cLisp\u3067\u3082\u3067\u304d\u308b\u307f\u305f\u3044\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306b\u3064\u3044\u3066\u3082Lisp\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3089\u3057\u3044\u306e\u3060\u3051\u3069\uff0c\u307e\u3060\u305d\u3053\u307e\u3067\u52c9\u5f37\u3067\u304d\u3066\u3044\u306a\u3044\u3002\u4f55\u304b\u3044\u3044\u8a18\u4e8b\u304c\u306a\u3044\u3082\u306e\u3060\u308d\u3046\u304b...\n# 1.\u3053\u306e\u8a18\u4e8b\u3067\u5b66\u3079\u308b\u3053\u3068\u30fb\u5b66\u3079\u306a\u3044\u3053\u3068\n\u3000\u5b66\u3079\u308b\u3053\u3068\n- \u521d\u5fc3\u8005 Lisper \u304c\u66f8\u304f\u3061\u3083\u3063\u3061\u3044\u30b3\u30fc\u30c9\u3063\u3066\u3044\u3046\u306e\u306f\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u5206\u304b\u308b\u3002\n- \u53d6\u308a\u6562\u3048\u305a\u306f\u52d5\u304f\u30b3\u30fc\u30c9\u3092\u3044\u3058\u3063\u3066\uff0cLisp \u306e\u7df4\u7fd2\u53f0\u306b\u3067\u304d\u308b\u3002\n\n\u3000\u5b66\u3079\u306a\u3044\u3053\u3068\n- Lisp \u306e\u7f8e\u3057\u3044\u30b3\u30fc\u30c9\u6280\u6cd5\u3002\n- \u30aa\u30bb\u30ed\u30b2\u30fc\u30e0\u306e\u512a\u308c\u305f\u8a2d\u8a08\u3002\n# 2.\u66f8\u3044\u305f\u3082\u306e\n\n```lisp:othelo.lisp\n(defparameter *board-size* 8)\n(defparameter *stone-chars* '(none white black))\n\n(defun put-initial-stones (board)\n  (let* ((i0 (- (truncate *board-size* 2) 1)) (i1 (+ i0 1)))\n\t(setf (aref (aref board i0) i0) 'white)\n\t(setf (aref (aref board i0) i1) 'black)\n\t(setf (aref (aref board i1) i0) 'black)\n\t(setf (aref (aref board i1) i1) 'white))\n  board)\n\n(defun make-board ()\n  (let ((board (make-array *board-size* :initial-element 'none)))\n\t(loop for i below *board-size*\n\t\t  do (setf (aref board i) \n\t\t\t\t   (make-array *board-size* :initial-element 'none)))\n\t(put-initial-stones board)))\n\n(defparameter *board* (make-board))\n\n(defun describe-board ()\n  (princ \"  1 2 3 4 5 6 7 8\")\n  (fresh-line)\n  (loop for x below *board-size*\n\t\tdo (progn (princ (+ x 1))\n\t\t\t\t  (princ \" \")\n\t\t\t\t  (loop for y below *board-size*\n\t\t\t\t\t\tdo (progn (case (aref (aref *board* x) y) \n\t\t\t\t\t\t\t\t\t((none)    (princ #\\.)) \n\t\t\t\t\t\t\t\t\t((white)   (princ #\\o)) \n\t\t\t\t\t\t\t\t\t((black)   (princ #\\x)) \n\t\t\t\t\t\t\t\t\t(otherwise (princ #\\.)))\n\t\t\t\t\t\t\t\t  (princ \" \")))\n\t\t\t\t  (fresh-line))))\n\n(defun put-stone (players-color x y)\n  (let ((u (- x 1)) (v (- y 1)))\n\t(setf (aref (aref *board* u) v) players-color)\n\t(reverse-stones players-color u v)))\n\n(defun reverse-stones (color u v)\n  (mapc (lambda (dir)\n\t\t  (mapc (lambda (positions)\n\t\t\t\t  (let ((_u (car positions)) (_v (car (cdr positions))))\n\t\t\t\t\t(setf (aref (aref *board* _u) _v) color)))\n\t\t\t\t(reversible-positions color u v dir)))\n\t\t  '(nw n_ ne e_ se s_ sw w_)))\n\n(defun reversible-positions (players-color u v direction)\n  (let ((temp '()) (positions_list '()))\n\t(catch 'end\n\t\t(mapc (lambda (positions)\n\t\t\t\t(let* ((_u (car positions))\n\t\t\t\t\t   (_v (cdr positions))\n\t\t\t\t\t   (color (aref (aref *board* _u) _v)))\n\t\t\t\t  (cond ((eq color 'none) \n\t\t\t\t\t\t (throw 'end t))\n\t\t\t\t\t\t((not (eq color players-color))\n\t\t\t\t\t\t (setf temp (cons (list _u _v) temp)))\n\t\t\t\t\t\t((eq color players-color)\n\t\t\t\t\t\t (setf positions_list temp)\n\t\t\t\t\t\t (throw 'end t)))))\n\t\t\t  (generator u v direction)))\n\t(remove nil positions_list)))\n\n(defun generator (u v direction)\n  (labels ((do-nothing (i) i)\n\t\t   (dec (i) (- i 1))\n\t\t   (inc (i) (+ i 1))\n\t\t   (in-board? (i) (and (<= i *board-size*) (< 0 i))))\n\t(let ((fu #'do-nothing) (fv #'do-nothing) (_u u) (_v v))\n\t  (case direction\n\t\t((nw) (progn (setf fu #'dec) (setf fv #'dec)))\n\t\t((n_) (setf fv #'dec))\n\t\t((ne) (progn (setf fu #'inc) (setf fv #'dec)))\n\t\t((e_) (setf fu #'inc))\n\t\t((se) (progn (setf fu #'inc) (setf fv #'inc)))\n\t\t((s_) (setf fv #'inc))\n\t\t((sw) (progn (setf fu #'dec) (setf fv #'inc)))\n\t\t((w_) (setf fu #'dec)))\n\t  (loop while (and (in-board? _u) (in-board? _v))\n\t\t\tcollect (progn (setf _u (funcall fu _u))\n\t\t\t\t\t\t   (setf _v (funcall fv _v))\n\t\t\t\t\t\t   (cons _u _v))))))\n\n```\n\n```\n[1]> (load \"othelo.lisp\")\n;; Loading file othelo.lisp ...\n;; Loaded file othelo.lisp\nT\n[2]> (describe-board)\n  1 2 3 4 5 6 7 8\n1 . . . . . . . . \n2 . . . . . . . . \n3 . . . . . . . . \n4 . . . o x . . . \n5 . . . x o . . . \n6 . . . . . . . . \n7 . . . . . . . . \n8 . . . . . . . . \nNIL\n[3]> (put-stone 'black 6 5)\n\nNIL \nNIL \nNIL \nNIL \nNIL \nNIL \nNIL \n((4 4)) \n(NW N_ NE E_ SE S_ SW W_)\n[4]> (describe-board)\n  1 2 3 4 5 6 7 8\n1 . . . . . . . . \n2 . . . . . . . . \n3 . . . . . . . . \n4 . . . o x . . . \n5 . . . x x . . . \n6 . . . . x . . . \n7 . . . . . . . . \n8 . . . . . . . . \nNIL\n[5]> (put-stone 'white 6 6)\n\n((4 4)) \nNIL \nNIL \nNIL \nNIL \nNIL \nNIL \nNIL \n(NW N_ NE E_ SE S_ SW W_)\n[6]> (describe-board)\n  1 2 3 4 5 6 7 8\n1 . . . . . . . . \n2 . . . . . . . . \n3 . . . . . . . . \n4 . . . o x . . . \n5 . . . x o . . . \n6 . . . . x o . . \n7 . . . . . . . . \n8 . . . . . . . . \nNIL\n\n```\n\n\u3000[\u3068\u3042\u308b\u30b5\u30a4\u30c8\u3067\u30aa\u30bb\u30ed\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u554f\u984c\u304c\u3042\u3063\u305f\u3093\u3060\u3051\u3069...](http://qiita.com/5ara5treamer/items/3d2f030505cfea28538d)\u306e\u8a18\u4e8b\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092\u305d\u306e\u307e\u307e Lisp \u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u305f\u3002\n\n\u3000\u3044\u3084\uff0c\u3082\u3046... \u3082\u306e\u3059\u3054\u304f\u75b2\u308c\u305f\u3002\n\n\u3000Lisp \u306a\u3093\u3066\u52c9\u5f37\u3057\u59cb\u3081\u305f\u3070\u304b\u308a\u3060\u3057\uff0c\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u3060\u3089\u3051\u3060\u3063\u305f\u304b\u3089\u3002\n\n# 3.\u3064\u307e\u3065\u3044\u305f\u3068\u3053\u308d\u30fb\u6c17\u3065\u3044\u305f\u3068\u3053\u308d\n\u3000\u521d\u5fc3\u8005 Lisper \u3068\u3057\u3066\uff0c\u3064\u307e\u3065\u3044\u3066\u3057\u307e\u3063\u305f\u3068\u3053\u308d\u30fb\u6c17\u3065\u3044\u305f\u3068\u3053\u308d\u3092\u307e\u3068\u3081\u3066\u304a\u304f\u3002\n\u3000\u5f8c\u3005\u5f79\u306b\u7acb\u3064\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n## 3.1.Lisp \u306e\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\n>index (4) for #(NONE NONE NONE BLACK WHITE NONE NONE NONE) is not of type `(INTEGER 0 (,ARRAY-DIMENSION-LIMIT))\n\n\u3000\u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u3082\u306e\u3059\u3054\u304f\u60a9\u307e\u3055\u308c\u305f\u3002\u3053\u308c\uff0c\u3069\u3046\u3044\u3046\u3053\u3068\u304b\u3068\u3044\u3046\u3068\uff0c\n\n```\n[1]> (+ (car '(1 2)) (cdr '(1 2)))\n\n*** - +: (2) is not a number\nThe following restarts are available:\nUSE-VALUE      :R1      Input a value to be used instead.\nABORT          :R2      Abort main loop\n```\n\n\u3000clisp \u3067\u5b9f\u884c\u3057\u3066\u307f\u305f\u306e\u3060\u304c\uff0c\u3053\u308c\u304c\u5931\u6557\u3059\u308b\u306e\u3068\u540c\u3058\u3053\u3068\u3060\u3063\u305f\u3002\n\u3000Lisp \u3092\u3061\u3087\u3063\u3068\u52c9\u5f37\u3057\u305f\u65b9\u306a\u3089\u304a\u5206\u304b\u308a\u306e\u901a\u308a\uff0c\u30ea\u30b9\u30c8\u306f\u30b3\u30f3\u30b9\u30bb\u30eb\u304b\u3089\u6210\u308b\u3002\n\u3000\u3060\u304b\u3089\uff0c`(cons 1 cons 2 nil))` \u3068 `'(1 2)` \u306f\uff0c\u540c\u3058\u3082\u306e\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\n\u3000\u3064\u307e\u308a\uff0c**\u3053\u306e\u30ea\u30b9\u30c8\u306f2\u3064\u306e\u30b3\u30f3\u30b9\u30bb\u30eb\u304b\u3089\u6210\u308a\uff0c3\u3064\u306e\u8981\u7d20\u304b\u3089\u6210\u308b\u3068\u3044\u3046\u3053\u3068\u3002**\n\n\u3000\u3053\u308c\u3092\u3059\u3063\u304b\u308a\u5fd8\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u306e\u3067\uff0c`(cdr '(1 2))` \u304c `2` \u3092\u8fd4\u3059\u306e\u3060\u3068\u601d\u3044\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u3002\u5b9f\u969b\u306b\u306f\uff0c`(2)` \u3059\u306a\u308f\u3061 `(cons 2 nil)` \u3092\u8fd4\u3059\u306e\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3060\u3002\u3053\u308c\u306b\u6c17\u3065\u304f\u306e\u306b\u672c\u5f53\u306b\u9577\u3044\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u3002\n\n## 3.2.Lisp \u306e\u8868\u73fe\u529b\n\u3000\u304b\u306a\u308a\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u307e\u304f\u308a\u306a\u304c\u3089\u306e\u4f5c\u696d\u306b\u306f\u306a\u3063\u305f\u304c\uff0c\u3082\u3068\u306eRuby\u30b3\u30fc\u30c9\u3068\u306f\u591a\u5206\u305d\u308c\u307b\u3069\u5909\u308f\u3089\u306a\u3044\u7406\u5c48\u3067\u52d5\u3044\u3066\u3044\u308b\u3068\u601d\u3046\u3002Ruby\u3067\u3084\u308c\u308b\u3053\u3068\u306f\u5927\u4f53\uff0cLisp\u3067\u3082\u3067\u304d\u308b\u307f\u305f\u3044\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306b\u3064\u3044\u3066\u3082Lisp\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3089\u3057\u3044\u306e\u3060\u3051\u3069\uff0c\u307e\u3060\u305d\u3053\u307e\u3067\u52c9\u5f37\u3067\u304d\u3066\u3044\u306a\u3044\u3002\u4f55\u304b\u3044\u3044\u8a18\u4e8b\u304c\u306a\u3044\u3082\u306e\u3060\u308d\u3046\u304b...\n", "tags": ["common-lisp"]}