{"tags": ["\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5", "common-lisp"], "context": "\n\n1. \u3053\u306e\u8a18\u4e8b\u3067\u5b66\u3079\u308b\u3053\u3068\u30fb\u5b66\u3079\u306a\u3044\u3053\u3068\n\u5b66\u3079\u308b\u3053\u3068\n\n\u4f55\u3082\u306a\u3044\u3002\n\n\n2. \u5b9f\u969b\u306e\u30b3\u30fc\u30c9\n\u3000\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\u3068\u3044\u3046\u3082\u306e\u3092\u7406\u89e3\u3057\u3088\u3046\u3068\u66f8\u3044\u3066\u307f\u305f\u3051\u308c\u3069\uff0c\u5206\u304b\u3089\u306a\u904e\u304e\u3066\u6295\u3052\u305f\u3002\n\u3000\u81ea\u5206\u304c\u3042\u3068\u304b\u3089\u898b\u8fd4\u3057\u3066\uff0c\u7b11\u3048\u308b\u65e5\u304c\u6765\u308b\u3088\u3046\u306b\u8cbc\u308b\u3060\u3051\u8cbc\u3063\u3066\u304a\u304f\u3002\n\ndijkstra.lisp\n(defparameter *nodes* '(tokyo takasaki nagano nagoya niigata hukui kyoto))\n(defparameter *edges* '((tokyo takasaki 110) (takasaki tokyo 110) (tokyo nagano 230) (nagano tokyo 230) (tokyo nagoya 350) (nagoya tokyo 350) (takasaki nagano 130) (nagano takasaki 130) (nagano nagoya 280) (nagoya nagano 280) (takasaki niigata 210) (niigata takasaki 210) (nagano hukui 330) (hukui nagano 330) (nagoya kyoto 160) (kyoto nagoya 160) (niigata hukui 250) (hukui niigata 250) (hukui kyoto 190) (kyoto hukui 190)))\n\n(defun edges-from (node edges)\n  (labels ((start-with-p (edge)\n     (eq (car edge) node)))\n   (remove-if-not #'start-with-p edges)))\n\n(defun edge-length (edge)\n  (cadr edge))\n\n(defun adjacent-edges (nodes edges)\n  (let ((ret '()))\n    (mapc (lambda (node)\n            (mapc (lambda (edge)\n                    (push edge ret))\n                  (edges-from node edges)))\n          nodes)\n    ret))\n\n(defun remove-visited-edges (visited-edges edges)\n  (let ((not-visited '()))\n    (mapc (lambda (edge)\n            (labels ((visited-p (edge visited-edges)\n                                (member edge visited-edges :test #'equal)))\n              (if (visited-p edge visited-edges)\n                t\n                (push edge not-visited))))\n          edges)\n    not-visited))\n\n(defun equivalent-edge (edge)\n  `(,(cadr edge) ,(car edge) ,(caddr edge)))\n\n(defun shortest-edge (edges)\n  (let ((shortest (car edges)))\n    (mapc (lambda (edge)\n            (if (< (caddr edge) (caddr shortest))\n              (setf shortest edge)\n              t))\n          edges)\n    shortest))\n\n(defun visited-nodes (visited-edges)\n  (let ((nodes (mapcar (lambda (edge)\n                         (car edge))\n                       visited-edges)))\n    (remove-duplicates nodes)))\n\n(defun dijkstra (start-node nodes edges)\n  (labels ((main (visited-nodes visited-edges)\n                 (let* ((not-visited-edges (remove-visited-edges\n                                             visited-edges \n                                             (adjacent-edges visited-nodes edges)))\n                       (shortest (shortest-edge not-visited-edges)))\n                   (push shortest visited-edges)\n                   (push (equivalent-edge shortest) visited-edges)\n                   (push (cadr shortest) visited-nodes)\n                   shortest)\n                 (if (equal nodes visited-nodes)\n                   visited-edges\n                   (main visited-nodes visited-edges))))\n           (main start-node nil)))\n\n(princ (dijkstra '(tokyo) *nodes* *edges*))\n\n\n\n3. \u96d1\u611f\n\u3000\u4eca\u5ea6\u306fPython\u3068\u304b\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n#1. \u3053\u306e\u8a18\u4e8b\u3067\u5b66\u3079\u308b\u3053\u3068\u30fb\u5b66\u3079\u306a\u3044\u3053\u3068\n\u5b66\u3079\u308b\u3053\u3068\n\n- \u4f55\u3082\u306a\u3044\u3002\n\n#2. \u5b9f\u969b\u306e\u30b3\u30fc\u30c9\n\u3000\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\u3068\u3044\u3046\u3082\u306e\u3092\u7406\u89e3\u3057\u3088\u3046\u3068\u66f8\u3044\u3066\u307f\u305f\u3051\u308c\u3069\uff0c\u5206\u304b\u3089\u306a\u904e\u304e\u3066\u6295\u3052\u305f\u3002\n\u3000\u81ea\u5206\u304c\u3042\u3068\u304b\u3089\u898b\u8fd4\u3057\u3066\uff0c\u7b11\u3048\u308b\u65e5\u304c\u6765\u308b\u3088\u3046\u306b\u8cbc\u308b\u3060\u3051\u8cbc\u3063\u3066\u304a\u304f\u3002\n\n```lisp:dijkstra.lisp\n(defparameter *nodes* '(tokyo takasaki nagano nagoya niigata hukui kyoto))\n(defparameter *edges* '((tokyo takasaki 110) (takasaki tokyo 110) (tokyo nagano 230) (nagano tokyo 230) (tokyo nagoya 350) (nagoya tokyo 350) (takasaki nagano 130) (nagano takasaki 130) (nagano nagoya 280) (nagoya nagano 280) (takasaki niigata 210) (niigata takasaki 210) (nagano hukui 330) (hukui nagano 330) (nagoya kyoto 160) (kyoto nagoya 160) (niigata hukui 250) (hukui niigata 250) (hukui kyoto 190) (kyoto hukui 190)))\n\n(defun edges-from (node edges)\n  (labels ((start-with-p (edge)\n\t (eq (car edge) node)))\n   (remove-if-not #'start-with-p edges)))\n\n(defun edge-length (edge)\n  (cadr edge))\n\n(defun adjacent-edges (nodes edges)\n  (let ((ret '()))\n\t(mapc (lambda (node)\n\t\t\t(mapc (lambda (edge)\n\t\t\t\t\t(push edge ret))\n\t\t\t\t  (edges-from node edges)))\n\t\t  nodes)\n\tret))\n\n(defun remove-visited-edges (visited-edges edges)\n  (let ((not-visited '()))\n\t(mapc (lambda (edge)\n\t\t\t(labels ((visited-p (edge visited-edges)\n\t\t\t\t\t\t\t\t(member edge visited-edges :test #'equal)))\n\t\t\t  (if (visited-p edge visited-edges)\n\t\t\t\tt\n\t\t\t\t(push edge not-visited))))\n\t\t  edges)\n\tnot-visited))\n\n(defun equivalent-edge (edge)\n  `(,(cadr edge) ,(car edge) ,(caddr edge)))\n\n(defun shortest-edge (edges)\n  (let ((shortest (car edges)))\n\t(mapc (lambda (edge)\n\t\t\t(if (< (caddr edge) (caddr shortest))\n\t\t\t  (setf shortest edge)\n\t\t\t  t))\n\t\t  edges)\n\tshortest))\n\n(defun visited-nodes (visited-edges)\n  (let ((nodes (mapcar (lambda (edge)\n\t\t\t\t\t\t (car edge))\n\t\t\t\t\t   visited-edges)))\n\t(remove-duplicates nodes)))\n\n(defun dijkstra (start-node nodes edges)\n  (labels ((main (visited-nodes visited-edges)\n\t\t\t\t (let* ((not-visited-edges (remove-visited-edges\n\t\t\t\t\t\t\t\t\t\t\t visited-edges \n\t\t\t\t\t\t\t\t\t\t\t (adjacent-edges visited-nodes edges)))\n\t\t\t\t\t   (shortest (shortest-edge not-visited-edges)))\n\t\t\t\t   (push shortest visited-edges)\n\t\t\t\t   (push (equivalent-edge shortest) visited-edges)\n\t\t\t\t   (push (cadr shortest) visited-nodes)\n\t\t\t\t   shortest)\n\t\t\t\t (if (equal nodes visited-nodes)\n\t\t\t\t   visited-edges\n\t\t\t\t   (main visited-nodes visited-edges))))\n\t\t   (main start-node nil)))\n\n(princ (dijkstra '(tokyo) *nodes* *edges*))\n```\n\n# 3. \u96d1\u611f\n\u3000\u4eca\u5ea6\u306fPython\u3068\u304b\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n"}