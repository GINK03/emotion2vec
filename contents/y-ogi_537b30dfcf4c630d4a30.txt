{"tags": ["Swift", "ReactiveCocoa", "Realm"], "context": " More than 1 year has passed since last update.\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4f55\u3068\u306a\u304fSwift\u3067ReactiveCocoa+Realm\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n\u4f7f\u7528\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\n\nLibrary\nVersion\n\u5099\u8003\n\n\n\n\nReactiveCocoa\n2.4.4\n-\n\n\nRealm\n0.92.2\nRealmSwift\u3092\u4ed5\u69d8\n\n\n\n\nReactiveCocoa\u306b\u3064\u3044\u3066\nReactiveCocoa\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u3001\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\nhttp://blog.scottlogic.com/2014/07/24/mvvm-reactivecocoa-swift.html\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nModel\nimport RealmSwift\n\nclass Note: Object {\n    dynamic var text = \"\"\n}\n\n\nViewModel\nimport UIKit\nimport RealmSwift\n\nclass ViewModel: NSObject {\n\n    var token: NotificationToken?\n    var notes = Realm().objects(Note)\n    let updateSignal: RACSubject\n\n    override init() {\n        updateSignal = RACSubject()\n        super.init()\n        // Realm\u306eNotificationBlock\u3092ReactiveCocoa\u3068\u3046\u307e\u304f\u4f7f\u3046\u306b\u306f\u3069\u3046\u3059\u308b\u306e\u304c\u3044\u3044\u306e\u304b\n        // \u53d6\u308a\u3042\u3048\u305aRACSubject\u3092\u4f7f\u3063\u3066Signal\u3092\u9001\u308b\u7528\u306b\u3057\u305f\u307f\u304c...\n        token = Realm().addNotificationBlock { [unowned self] note, realm in\n            self.updateSignal.sendNext(nil)\n        }\n    }\n\n    func numberOfSections() -> Int {\n        return 1\n    }\n\n    func numberOfItemsInSection(seciont: Int) -> Int {\n        return Int(notes.count)\n    }\n\n    func deleteAtIndex(index: Int) {\n        let realm = Realm()\n        realm.write {\n            realm.delete(self.notes[index])\n        }\n    }\n\n    func noteAtIndex(index: Int) -> Note? {\n        return notes[index]\n    }\n}\n\n\nTableViewController\nimport UIKit\nimport RealmSwift\n\nclass ListViewController: UITableViewController {\n\n    var selectedUuid: String?\n    var viewModel: ViewModel?\n    var tableViewDelegate: AnyObject?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.viewModel = ListViewModel()\n        viewModel?.updateSignal.subscribeNext({[weak self](value:AnyObject?) -> Void in\n            self!.tableView.reloadData()\n        })\n\n        // DelegateProxy\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3044\u3044\u306e\u3060\u308d\u3046\u304b\n        // withProtocol: \u306e\u5f15\u6570\u306fNSProtocolFromString\u3092\u4f7f\u3063\u3066\u306a\u304b\u3070\u7121\u7406\u77e2\u7406\u306b\n        tableViewDelegate = RACDelegateProxy(withProtocol:NSProtocolFromString(\"UITableViewDelegate\"))\n        tableViewDelegate?.rac_signalForSelector(\"tableView:didSelectRowAtIndexPath:\").subscribeNext({ (RACTuple tuple) -> Void in\n            println(\"\\(tuple)\")\n        })\n        tableView.delegate = tableViewDelegate as? UITableViewDelegate\n\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n    // MARK: - Table view data source\n\n    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return viewModel!.numberOfSections()\n    }\n\n    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return viewModel!.numberOfItemsInSection(section)\n    }\n\n    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCellWithIdentifier(\"BasicCell\", forIndexPath: indexPath) as! UITableViewCell\n\n        if let note = viewModel!.noteAtIndex(indexPath.row) {\n            cell.textLabel?.text = note.text\n        }\n        return cell\n    }\n\n    // Override to support conditional editing of the table view.\n    override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {\n        // Return NO if you do not want the specified item to be editable.\n        return true\n    }\n\n    // Override to support editing the table view.\n    override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {\n\n        if editingStyle == .Delete {\n            // Delete the row from the data source\n            viewModel?.deleteAtIndex(indexPath.row)\n        } else if editingStyle == .Insert {\n            // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view\n        }    \n    }\n\n\n}\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4f55\u3068\u306a\u304f`Swift`\u3067`ReactiveCocoa`+`Realm`\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n# \u4f7f\u7528\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\n\n|Library|Version|\u5099\u8003|\n|-------|-------|---|\n|ReactiveCocoa|2.4.4|-|\n|Realm  |0.92.2|RealmSwift\u3092\u4ed5\u69d8|\n\n## ReactiveCocoa\u306b\u3064\u3044\u3066\n\nReactiveCocoa\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u3001\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\nhttp://blog.scottlogic.com/2014/07/24/mvvm-reactivecocoa-swift.html\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n## Model\n\n```\nimport RealmSwift\n\nclass Note: Object {\n    dynamic var text = \"\"\n}\n```\n\n## ViewModel\n\n```\nimport UIKit\nimport RealmSwift\n\nclass ViewModel: NSObject {\n\n    var token: NotificationToken?\n    var notes = Realm().objects(Note)\n    let updateSignal: RACSubject\n    \n    override init() {\n        updateSignal = RACSubject()\n        super.init()\n        // Realm\u306eNotificationBlock\u3092ReactiveCocoa\u3068\u3046\u307e\u304f\u4f7f\u3046\u306b\u306f\u3069\u3046\u3059\u308b\u306e\u304c\u3044\u3044\u306e\u304b\n        // \u53d6\u308a\u3042\u3048\u305aRACSubject\u3092\u4f7f\u3063\u3066Signal\u3092\u9001\u308b\u7528\u306b\u3057\u305f\u307f\u304c...\n        token = Realm().addNotificationBlock { [unowned self] note, realm in\n            self.updateSignal.sendNext(nil)\n        }\n    }\n    \n    func numberOfSections() -> Int {\n        return 1\n    }\n    \n    func numberOfItemsInSection(seciont: Int) -> Int {\n        return Int(notes.count)\n    }\n    \n    func deleteAtIndex(index: Int) {\n        let realm = Realm()\n        realm.write {\n            realm.delete(self.notes[index])\n        }\n    }\n        \n    func noteAtIndex(index: Int) -> Note? {\n        return notes[index]\n    }\n}\n```\n\n## TableViewController\n\n```\nimport UIKit\nimport RealmSwift\n\nclass ListViewController: UITableViewController {\n\n    var selectedUuid: String?\n    var viewModel: ViewModel?\n    var tableViewDelegate: AnyObject?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.viewModel = ListViewModel()\n        viewModel?.updateSignal.subscribeNext({[weak self](value:AnyObject?) -> Void in\n            self!.tableView.reloadData()\n        })\n        \n        // DelegateProxy\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3044\u3044\u306e\u3060\u308d\u3046\u304b\n        // withProtocol: \u306e\u5f15\u6570\u306fNSProtocolFromString\u3092\u4f7f\u3063\u3066\u306a\u304b\u3070\u7121\u7406\u77e2\u7406\u306b\n        tableViewDelegate = RACDelegateProxy(withProtocol:NSProtocolFromString(\"UITableViewDelegate\"))\n        tableViewDelegate?.rac_signalForSelector(\"tableView:didSelectRowAtIndexPath:\").subscribeNext({ (RACTuple tuple) -> Void in\n            println(\"\\(tuple)\")\n        })\n        tableView.delegate = tableViewDelegate as? UITableViewDelegate\n\n    }\n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    \n    // MARK: - Table view data source\n\n    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return viewModel!.numberOfSections()\n    }\n\n    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return viewModel!.numberOfItemsInSection(section)\n    }\n\n    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCellWithIdentifier(\"BasicCell\", forIndexPath: indexPath) as! UITableViewCell\n        \n        if let note = viewModel!.noteAtIndex(indexPath.row) {\n            cell.textLabel?.text = note.text\n        }\n        return cell\n    }\n\n    // Override to support conditional editing of the table view.\n    override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {\n        // Return NO if you do not want the specified item to be editable.\n        return true\n    }\n    \n    // Override to support editing the table view.\n    override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {\n        \n        if editingStyle == .Delete {\n            // Delete the row from the data source\n            viewModel?.deleteAtIndex(indexPath.row)\n        } else if editingStyle == .Insert {\n            // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view\n        }    \n    }\n\n    \n}\n```\n"}