{"context": " More than 1 year has passed since last update.Object recognition is to detect particular objects in visual images.\nThis time, I am going to introduce how to perform object recognition by using Visual Recognition, which is one of the functions of the IBM Watson Developer Cloud.\n\u203b You must be registered in IBM Bluemix in advance.\n\nHow to get your user name and password for APIs\nYou have to obtain a user name and a password to use Visual Recognition.\nGo to the management page of IBM Bluemix and create an application first. Now you can add Visual Recognition to its application.\nThen when you click \"display of credentials\" of the service, your user name and password should be listed.\n\n\nHow to obtain labels\nThis program returns a pair of labels and scores as a result of object recognition, so you have to obtain labels used for running the application.\nThe script is shown as follows.\n\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Obtain the labels provided by Visual Recognition service of IBM Watson Developer Cloud.\n\"\"\"\nimport sys\nimport json\nimport requests\nfrom pit import Pit\n\nsetting = Pit.get('iwdcat',\n                  {'require': {'username': '',\n                               'password': '',\n                               }})\n\nauth_token = setting['username'], setting['password']\nurl = 'https://gateway.watsonplatform.net/visual-recognition-beta/api/v1/tag/labels'\nres = requests.get(url, auth=auth_token, headers={'content-type': 'application/json'})\nif res.status_code == requests.codes.ok:\n    labels = json.loads(res.text)\n    print('label groups({}): {}'.format(len(labels['label_groups']), labels['label_groups']))\n    print()\n    print('labels({}): {}'.format(len(labels['labels']), labels['labels']))\nelse:  # error\n    print('stauts_code: {} (reason: {})'.format(res.status_code, res.reason))\n    sys.exit(1)\n\nThe results are returned in JSON format. \"label_groups\" is the list of label groups, \"labels\" is the list of labels.\n\nVisual image analysis\nYou have to import image files in multi-part to Visual Recognition API.\nIt seems formats of visual images can be png, jpg or even zip file. The following example shows how to import a single png image.\nThe image format is ping, jpg and may be zip compressed file.\nThe following is an example of sending a single png image.\n\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Analyze the image\n\"\"\"\nimport os\nimport sys\nimport json\nimport requests\nfrom pit import Pit\n\nsetting = Pit.get('iwdcat',\n                  {'require': {'username': '',\n                               'password': '',\n                               }})\n\nauth_token = setting['username'], setting['password']\nurl = 'https://gateway.watsonplatform.net/visual-recognition-beta/api/v1/tag/recognize'\n\nfilepath = 'var/images/first/2015-04-12-11.47.01.png'  # path to image file\nfilename = os.path.basename(filepath)\n\nres = requests.post(\n    url, auth=auth_token,\n    files={\n        'imgFile': (filename, open(filepath, 'rb')),\n        }\n    )\nif res.status_code == requests.codes.ok:\n    data = json.loads(res.text)\n    for img in data['images']:\n        print('{} - {}'.format(img['image_id'], img['image_name']))\n        for label in img['labels']:\n            print('    {:30}: {}'.format(label['label_name'], label['label_score']))\n\nelse:  # error\n    print('stauts_code: {} (reason: {})'.format(res.status_code, res.reason))\n    sys.exit(1)\n\n\nAfter analyzing the image file, the result was shown as follows.\n\n$ python analyze_image.py\n0 - 2015-04-12-11.47.01.png\n    Outdoors                      : 0.714211\n    Nature Scene                  : 0.671271\n    Winter Scene                  : 0.669832\n    Vertebrate                    : 0.635903\n    Boat                          : 0.61398\n    Animal                        : 0.610709\n    Water Vehicle                 : 0.607173\n    Placental Mammal              : 0.580503\n    Snow Scene                    : 0.571422\n    Fabric                        : 0.563129\n    Gray                          : 0.56078\n    Water Sport                   : 0.555034\n    Person                        : 0.533461\n    Mammal                        : 0.515725\n    Surface Water Sport           : 0.511447\n\nThe returned actual data is shown as below.\n\n{'images': [{'image_id': '0', 'labels': [{'label_score': '0.714211', 'label_name': 'Outdoors'}, {'label_score': '0.671271', 'label_name': 'Nature Scene'}, {'label_score': '0.669832', 'label_name': 'Winter Scene'}, {'label_score': '0.635903', 'label_name': 'Vertebrate'}, {'label_score': '0.61398', 'label_name': 'Boat'}, {'label_score': '0.610709', 'label_name': 'Animal'}, {'label_score': '0.607173', 'label_name': 'Water Vehicle'}, {'label_score': '0.580503', 'label_name': 'Placental Mammal'}, {'label_score': '0.571422', 'label_name': 'Snow Scene'}, {'label_score': '0.563129', 'label_name': 'Fabric'}, {'label_score': '0.56078', 'label_name': 'Gray'}, {'label_score': '0.555034', 'label_name': 'Water Sport'}, {'label_score': '0.533461', 'label_name': 'Person'}, {'label_score': '0.515725', 'label_name': 'Mammal'}, {'label_score': '0.511447', 'label_name': 'Surface Water Sport'}], 'image_name': '2015-04-12-11.47.01.png'}]}\n\n\nBulk analysis\nIt is also possible to analyze multiple files at one time by importing them in multi-part.\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Bulk analysis\n\"\"\"\nimport os\nimport sys\nimport json\nimport requests\nfrom pit import Pit\n\nsetting = Pit.get('iwdcat',\n                  {'require': {'username': '',\n                               'password': '',\n                               }})\n\nauth_token = setting['username'], setting['password']\nurl = 'https://gateway.watsonplatform.net/visual-recognition-beta/api/v1/tag/recognize'\n\nfilepaths = [\n    'var/images/first/2015-04-12-11.47.01.png',\n    'var/images/first/2015-04-12-11.44.42.png',\n    'var/images/first/2015-04-12-11.46.11.png',\n    ]\nfiles = dict((os.path.basename(filepath), (os.path.basename(filepath), open(filepath, 'rb'))) for filepath in filepaths)\n\nres = requests.post(\n    url, auth=auth_token,\n    files=files,\n    )\n\nfor key, (filename, fp) in files.items():\n    fp.close()\n\nif res.status_code == requests.codes.ok:\n    data = json.loads(res.text)\n    for img in data['images']:\n        print('{} - {}'.format(img['image_id'], img['image_name']))\n        for label in img['labels']:\n            print('    {:30}: {}'.format(label['label_name'], label['label_score']))\n\nelse:  # error\n    print('stauts_code: {} (reason: {})'.format(res.status_code, res.reason))\n    sys.exit(1)\n\nThe returned data shows the elements of \"images\" key in a list and each of analysis results is seen in the order. The execution results are as follows.\n\n$ python analyze_image_multi.py\n0 - 2015-04-12-11.44.42.png\n    Gray                          : 0.735805\n    Winter Scene                  : 0.7123\n    Nature Scene                  : 0.674336\n    Water Scene                   : 0.668881\n    Outdoors                      : 0.658805\n    Natural Activity              : 0.643865\n    Vertebrate                    : 0.603751\n    Climbing                      : 0.566247\n    Animal                        : 0.537788\n    Mammal                        : 0.518001\n1 - 2015-04-12-11.46.11.png\n    Gray                          : 0.719819\n    Vertebrate                    : 0.692607\n    Animal                        : 0.690942\n    Winter Scene                  : 0.683918\n    Mammal                        : 0.669149\n    Snow Scene                    : 0.664266\n    Placental Mammal              : 0.663866\n    Outdoors                      : 0.66335\n    Nature Scene                  : 0.656991\n    Climbing                      : 0.645557\n    Person                        : 0.557965\n    Person View                   : 0.528335\n2 - 2015-04-12-11.47.01.png\n    Outdoors                      : 0.714211\n    Nature Scene                  : 0.671271\n    Winter Scene                  : 0.669832\n    Vertebrate                    : 0.635903\n    Boat                          : 0.61398\n    Animal                        : 0.610709\n    Water Vehicle                 : 0.607173\n    Placental Mammal              : 0.580503\n    Snow Scene                    : 0.571422\n    Fabric                        : 0.563129\n    Gray                          : 0.56078\n    Water Sport                   : 0.555034\n    Person                        : 0.533461\n    Mammal                        : 0.515725\n    Surface Water Sport           : 0.511447\n\nI was able to analyze 30 files on one request.\nWonder if we can do more?\n\nSample scripts\n\nCut the image\nhttps://gist.github.com/TakesxiSximada/ca1b5aac871ec7167ff9\n\nrecognize objects and save results in JSON format\nhttps://gist.github.com/TakesxiSximada/996dbbfae5fa3bbab61d\n\nConvert csv to json format results\nhttps://gist.github.com/TakesxiSximada/d451221dc2a280b7e35d\n\nNote\nIn the above examples, I used \"pit\", a third-party package of Python. You can obtain the current user name and password from the configuration file by \"pit\".\nNow 2015/04/12, \"pit\", however, is not compatible with Python3, so if you do \"pip install pit\" in Python3, that is going to cause an error.\nPlease go to the following links to use \"pit\" I already customized to be compatible with Python3,\nhttps://github.com/TakesxiSximada/pit/archive/fix/sximada/py3k.zip\nhttps://github.com/TakesxiSximada/pit/tree/fix/sximada/py3k\nThx. :)\nObject recognition is to detect particular objects in visual images.\n\nThis time, I am going to introduce how to perform object recognition by using Visual Recognition, which is one of the functions of the IBM Watson Developer Cloud.\n\n\u203b You must be registered in IBM Bluemix in advance.\n\n# How to get your user name and password for APIs\n\nYou have to obtain a user name and a password to use Visual Recognition.\n\nGo to the management page of IBM Bluemix and create an application first. Now you can add Visual Recognition to its application.\n\nThen when you click \"display of credentials\" of the service, your user name and password should be listed.\n\n![Screenshot 2015-04-12 22.46.03.png](https://qiita-image-store.s3.amazonaws.com/0/36261/a1367c55-8e60-202c-00f1-aecf3295e174.png)\n\n# How to obtain labels\n\nThis program returns a pair of labels and scores as a result of object recognition, so you have to obtain labels used for running the application.\n\nThe script is shown as follows.\n\n```py3\n\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Obtain the labels provided by Visual Recognition service of IBM Watson Developer Cloud.\n\"\"\"\nimport sys\nimport json\nimport requests\nfrom pit import Pit\n\nsetting = Pit.get('iwdcat',\n                  {'require': {'username': '',\n                               'password': '',\n                               }})\n\nauth_token = setting['username'], setting['password']\nurl = 'https://gateway.watsonplatform.net/visual-recognition-beta/api/v1/tag/labels'\nres = requests.get(url, auth=auth_token, headers={'content-type': 'application/json'})\nif res.status_code == requests.codes.ok:\n    labels = json.loads(res.text)\n    print('label groups({}): {}'.format(len(labels['label_groups']), labels['label_groups']))\n    print()\n    print('labels({}): {}'.format(len(labels['labels']), labels['labels']))\nelse:  # error\n    print('stauts_code: {} (reason: {})'.format(res.status_code, res.reason))\n    sys.exit(1)\n```\n\nThe results are returned in JSON format. \"label_groups\" is the list of label groups, \"labels\" is the list of labels.\n\n# Visual image analysis\n\nYou have to import image files in multi-part to Visual Recognition API.\nIt seems formats of visual images can be png, jpg or even zip file. The following example shows how to import a single png image.\n\n\nThe image format is ping, jpg and may be zip compressed file.\nThe following is an example of sending a single png image.\n\n```py3\n\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Analyze the image\n\"\"\"\nimport os\nimport sys\nimport json\nimport requests\nfrom pit import Pit\n\nsetting = Pit.get('iwdcat',\n                  {'require': {'username': '',\n                               'password': '',\n                               }})\n\nauth_token = setting['username'], setting['password']\nurl = 'https://gateway.watsonplatform.net/visual-recognition-beta/api/v1/tag/recognize'\n\nfilepath = 'var/images/first/2015-04-12-11.47.01.png'  # path to image file\nfilename = os.path.basename(filepath)\n\nres = requests.post(\n    url, auth=auth_token,\n    files={\n        'imgFile': (filename, open(filepath, 'rb')),\n        }\n    )\nif res.status_code == requests.codes.ok:\n    data = json.loads(res.text)\n    for img in data['images']:\n        print('{} - {}'.format(img['image_id'], img['image_name']))\n        for label in img['labels']:\n            print('    {:30}: {}'.format(label['label_name'], label['label_score']))\n\nelse:  # error\n    print('stauts_code: {} (reason: {})'.format(res.status_code, res.reason))\n    sys.exit(1)\n\n```\n\nAfter analyzing the image file, the result was shown as follows.\n\n```shell-session\n\n$ python analyze_image.py\n0 - 2015-04-12-11.47.01.png\n    Outdoors                      : 0.714211\n    Nature Scene                  : 0.671271\n    Winter Scene                  : 0.669832\n    Vertebrate                    : 0.635903\n    Boat                          : 0.61398\n    Animal                        : 0.610709\n    Water Vehicle                 : 0.607173\n    Placental Mammal              : 0.580503\n    Snow Scene                    : 0.571422\n    Fabric                        : 0.563129\n    Gray                          : 0.56078\n    Water Sport                   : 0.555034\n    Person                        : 0.533461\n    Mammal                        : 0.515725\n    Surface Water Sport           : 0.511447\n```\n\nThe returned actual data is shown as below.\n\n```py3\n\n{'images': [{'image_id': '0', 'labels': [{'label_score': '0.714211', 'label_name': 'Outdoors'}, {'label_score': '0.671271', 'label_name': 'Nature Scene'}, {'label_score': '0.669832', 'label_name': 'Winter Scene'}, {'label_score': '0.635903', 'label_name': 'Vertebrate'}, {'label_score': '0.61398', 'label_name': 'Boat'}, {'label_score': '0.610709', 'label_name': 'Animal'}, {'label_score': '0.607173', 'label_name': 'Water Vehicle'}, {'label_score': '0.580503', 'label_name': 'Placental Mammal'}, {'label_score': '0.571422', 'label_name': 'Snow Scene'}, {'label_score': '0.563129', 'label_name': 'Fabric'}, {'label_score': '0.56078', 'label_name': 'Gray'}, {'label_score': '0.555034', 'label_name': 'Water Sport'}, {'label_score': '0.533461', 'label_name': 'Person'}, {'label_score': '0.515725', 'label_name': 'Mammal'}, {'label_score': '0.511447', 'label_name': 'Surface Water Sport'}], 'image_name': '2015-04-12-11.47.01.png'}]}\n```\n\n# Bulk analysis\n\nIt is also possible to analyze multiple files at one time by importing them in multi-part.\n\n```\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Bulk analysis\n\"\"\"\nimport os\nimport sys\nimport json\nimport requests\nfrom pit import Pit\n\nsetting = Pit.get('iwdcat',\n                  {'require': {'username': '',\n                               'password': '',\n                               }})\n\nauth_token = setting['username'], setting['password']\nurl = 'https://gateway.watsonplatform.net/visual-recognition-beta/api/v1/tag/recognize'\n\nfilepaths = [\n    'var/images/first/2015-04-12-11.47.01.png',\n    'var/images/first/2015-04-12-11.44.42.png',\n    'var/images/first/2015-04-12-11.46.11.png',\n    ]\nfiles = dict((os.path.basename(filepath), (os.path.basename(filepath), open(filepath, 'rb'))) for filepath in filepaths)\n\nres = requests.post(\n    url, auth=auth_token,\n    files=files,\n    )\n\nfor key, (filename, fp) in files.items():\n    fp.close()\n\nif res.status_code == requests.codes.ok:\n    data = json.loads(res.text)\n    for img in data['images']:\n        print('{} - {}'.format(img['image_id'], img['image_name']))\n        for label in img['labels']:\n            print('    {:30}: {}'.format(label['label_name'], label['label_score']))\n\nelse:  # error\n    print('stauts_code: {} (reason: {})'.format(res.status_code, res.reason))\n    sys.exit(1)\n```\n\nThe returned data shows the elements of \"images\" key in a list and each of analysis results is seen in the order. The execution results are as follows.\n\n```shell-session\n\n$ python analyze_image_multi.py\n0 - 2015-04-12-11.44.42.png\n    Gray                          : 0.735805\n    Winter Scene                  : 0.7123\n    Nature Scene                  : 0.674336\n    Water Scene                   : 0.668881\n    Outdoors                      : 0.658805\n    Natural Activity              : 0.643865\n    Vertebrate                    : 0.603751\n    Climbing                      : 0.566247\n    Animal                        : 0.537788\n    Mammal                        : 0.518001\n1 - 2015-04-12-11.46.11.png\n    Gray                          : 0.719819\n    Vertebrate                    : 0.692607\n    Animal                        : 0.690942\n    Winter Scene                  : 0.683918\n    Mammal                        : 0.669149\n    Snow Scene                    : 0.664266\n    Placental Mammal              : 0.663866\n    Outdoors                      : 0.66335\n    Nature Scene                  : 0.656991\n    Climbing                      : 0.645557\n    Person                        : 0.557965\n    Person View                   : 0.528335\n2 - 2015-04-12-11.47.01.png\n    Outdoors                      : 0.714211\n    Nature Scene                  : 0.671271\n    Winter Scene                  : 0.669832\n    Vertebrate                    : 0.635903\n    Boat                          : 0.61398\n    Animal                        : 0.610709\n    Water Vehicle                 : 0.607173\n    Placental Mammal              : 0.580503\n    Snow Scene                    : 0.571422\n    Fabric                        : 0.563129\n    Gray                          : 0.56078\n    Water Sport                   : 0.555034\n    Person                        : 0.533461\n    Mammal                        : 0.515725\n    Surface Water Sport           : 0.511447\n```\n\nI was able to analyze 30 files on one request.\nWonder if we can do more?\n\n# Sample scripts\n\n## Cut the image\nhttps://gist.github.com/TakesxiSximada/ca1b5aac871ec7167ff9\n\n## recognize objects and save results in JSON format\nhttps://gist.github.com/TakesxiSximada/996dbbfae5fa3bbab61d\n\n## Convert csv to json format results\nhttps://gist.github.com/TakesxiSximada/d451221dc2a280b7e35d\n\n# Note\n\nIn the above examples, I used \"pit\", a third-party package of Python. You can obtain the current user name and password from the configuration file by \"pit\".\nNow 2015/04/12, \"pit\", however, is not compatible with Python3, so if you do \"pip install pit\" in Python3, that is going to cause an error.\nPlease go to the following links to use \"pit\" I already customized to be compatible with Python3,\n\nhttps://github.com/TakesxiSximada/pit/archive/fix/sximada/py3k.zip\nhttps://github.com/TakesxiSximada/pit/tree/fix/sximada/py3k\n\nThx. :)\n\n\n", "tags": ["Bluemix"]}