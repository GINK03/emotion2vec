{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\npeewee\u306fPython\u7528\u306eORM\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u64cd\u4f5c\u304c\u884c\u3048\u307e\u3059\u3002\n\u30fbSQLite\n\u30fbMySQL\n\u30fbPostgres\n\u30fbAWSP\n\u30fbBerkeleyDatabase\uff08\u672a\u691c\u8a3c\uff09\n\u8a73\u7d30\u306f\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/index.html\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\neasy_install peewee\n\n\n\u7c21\u5358\u306a\u4f8b\nSQLite\u306b\u3088\u308b\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndb = SqliteDatabase(':memory:')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db # This model uses the \"people.db\" database.\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db # this model uses the people database\n\n\n\ntry:\n    # \u7b2c\u4e8c\u5f15\u6570\u304cTrue\u306e\u5834\u5408\u3001\u5b58\u5728\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u4f5c\u6210\u3057\u306a\u3044\n    db.create_tables([Person, Pet], True)\n    with db.transaction():\n        # \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066Save\u3059\u308b\u3053\u3068\u3067INSERT\u3059\u308b\n        uncle_bob = Person(name='Bob', birthday=date(1960, 1, 15), is_relative=True)\n        uncle_bob.save() # bob is now stored in the database\n\n        # create\u3067INSERT\u3059\u308b\n        grandma = Person.create(name='Grandma', birthday=date(1935, 3, 1), is_relative=True)\n        herb = Person.create(name='Herb', birthday=date(1950, 5, 5), is_relative=False)\n\n        bob_kitty = Pet.create(owner=uncle_bob, name='Kitty', animal_type='cat')\n        herb_fido = Pet.create(owner=herb, name='Fido', animal_type='dog')\n        herb_mittens = Pet.create(owner=herb, name='Mittens', animal_type='cat')\n        herb_mittens_jr = Pet.create(owner=herb, name='Mittens Jr', animal_type='cat')\n\n        print \"\u5168\u90e8\u53d6\u5f97-----------------\"\n        for person in Person.select():\n            print person.name, person.is_relative\n\n        print \"cat\u306e\u307f\u53d6\u5f97-----------------\"\n        query = Pet.select().where(Pet.animal_type == 'cat')\n        for pet in query:\n            print pet.name, pet.owner.name\n\n        print \"Join\u306e\u4f8b-----------------\"\n        query = (Pet\n                 .select(Pet, Person)\n                 .join(Person)\n                 .where(Pet.animal_type == 'cat'))\n        for pet in query:\n            print pet.name, pet.owner.name\n\n        print \"\u66f4\u65b0\u306e\u4f8b-----------------\"\n        update_pet = Pet.get(Pet.name=='Kitty')\n        update_pet.name = 'Kitty(updated)'\n        update_pet.save() \n\n        query = (Pet\n                 .select(Pet, Person)\n                 .join(Person)\n                 .where(Pet.animal_type == 'cat'))\n        for pet in query:\n            print pet.name, pet.owner.name\n\n\n        print \"\u524a\u9664\u306e\u4f8b-----------------\"\n        del_pet = Pet.get(Pet.name=='Mittens Jr')\n        del_pet.delete_instance() \n\n        query = (Pet\n                 .select(Pet, Person)\n                 .join(Person)\n                 .where(Pet.animal_type == 'cat'))\n        for pet in query:\n            print pet.name, pet.owner.name\n\n        db.commit()\n\n\nexcept IntegrityError ,ex:\n    print (ex)\n    db.rollback()\n\n\n\u3053\u306e\u4f8b\u306e\u3088\u3046\u306bpeewee\u3092\u7528\u3044\u308c\u3070SQL\u6587\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u64cd\u4f5c\u304c\u884c\u3048\u307e\u3059\u3002\n\u305d\u306e\u4ed6\u3001\u30b0\u30eb\u30fc\u30d7\u5316\u3084\u3001max,min\u95a2\u6570\u3092\u4f7f\u7528\u3057\u305f\u30af\u30a8\u30ea\u30fc\u306b\u3064\u3044\u3066\u306f\u4e0b\u8a18\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/querying.html\n\nSUBSTR\u306a\u3069\u306e\u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\nSUBSTR\u306a\u3069\u306e\u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001R()\u3092\u4f7f\u7528\u3057\u307e\u3059\nfor r in AdministrativeDistrict.select(R('SUBSTR(N03_001,1,1)').alias('a1')).limit(10):\n    print r.a1\n\n\u3053\u306e\u4f8b\u3067\u306fN03_001\u5217\u306e1\u6587\u5b57\u76ee\u3092SUBSTR\u95a2\u6570\u3067\u53d6\u5f97\u3057\u3066\u3001\u305d\u308c\u306ba1\u3068\u3044\u3046\u5217\u540d\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u5927\u91cf\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n\u4e00\u5ea6\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001insert_many\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndb = SqliteDatabase(':memory:')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\ndata_source = [\n    {'name' : 'test1' , 'birthday' : date(1960, 1, 15), 'is_relative' : True},\n    {'name' : 'test2' , 'birthday' : date(1960, 2, 15), 'is_relative' : True},\n    {'name' : 'test3' , 'birthday' : date(1960, 3, 15), 'is_relative' : True},\n    {'name' : 'test4' , 'birthday' : date(1960, 4, 15), 'is_relative' : True},\n    {'name' : 'test5' , 'birthday' : date(1960, 5, 15), 'is_relative' : True},\n]\n\ndb.create_tables([Person], True)\ntry:\n    with db.transaction():\n        Person.insert_many(data_source).execute()\n\n    print \"\u5168\u90e8\u53d6\u5f97-----------------\"\n    for person in Person.select():\n        print person.name, person.birthday, person.is_relative\n\nexcept IntegrityError ,ex:\n    print (ex)\n    db.rollback()\n\n\n\nDISTINCT\u306e\u4f7f\u7528\u65b9\u6cd5\nDISTINCT\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u3001\uff12\u7a2e\u985e\u306e\u4f7f\u7528\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u5168\u3066\u306b\u5bfe\u3057\u3066\u884c\u3046\u5834\u5408\nquery = Station.select(Station.gml_id, Station.station_name).distinct()\n\n\u5b9f\u969b\u767a\u884c\u3055\u308c\u308bSQL\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n'SELECT DISTINCT \"t1\".\"gml_id\", \"t1\".\"station_name\" FROM \"station\" AS t1\n\n\n\u7279\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066\u884c\u3046\u5834\u5408\nquery = Station.select(fn.Distinct(Station.station_name))\n\n\u5b9f\u969b\u767a\u884c\u3055\u308c\u308bSQL\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nSELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t\n\n\n\u6761\u4ef6\u3092\u52d5\u7684\u306b\u7d44\u307f\u7acb\u3066\u308b\n\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u3001operation_company\u3068railway_line\u3092\u6761\u4ef6\u306b\u30af\u30a8\u30ea\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\ndef get_station(operation_company=None, railway_line=None):\n    ret = []\n    query = Station.select(fn.Distinct(Station.station_name))\n    cond = None\n    if railway_line:\n        cond = (Station.railway_line_name == railway_line)\n    if operation_company:\n        if cond:\n            cond = cond & (Station.operation_company == operation_company)\n        else:\n            cond = (Station.operation_company == operation_company)\n    rows = query.where(cond)\n    for r in rows: # \u3053\u3053\u3067SQL\u3092\u767a\u884c\u3059\u308b\n        ret.append(r.station_name)\n    return ret\n\n\u3053\u306e\u4f8b\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u65b9\u6cd5\u306b\u3088\u308a\uff14\u7a2e\u985e\u306eSQL\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\n\n\noperation_company\nrailway_line\n\u4f5c\u3089\u308c\u308bSQL\n\n\n\n\n\u3042\u308a\n\u3042\u308a\nSELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t1 WHERE ((\"t1\".\"railway_line_name\" = ?) AND (\"t1\".\"operation_company\" = ?))\n\n\n\u3042\u308a\n\u306a\u3057\nSELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t1 WHERE (\"t1\".\"operation_company\" = ?)\n\n\n\u306a\u3057\n\u3042\u308a\nSELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t1 WHERE (\"t1\".\"railway_line_name\" = ?)\n\n\n\u306a\u3057\n\u306a\u3057\nSELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t1\n\n\n\n\u307e\u305f\u3001\u4f5c\u6210\u3055\u308c\u305fSQL\u304c\u5b9f\u969b\u306b\u767a\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u4f7f\u7528\u3059\u308b\u6642\u3067\u3059\u3002\n\u3053\u306e\u6319\u52d5\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u52d5\u7684\u306b\u8907\u96d1\u306a\u6761\u4ef6\u306e\u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nJOIN\u306b\u3064\u3044\u3066\n\n\u4f7f\u7528\u3067\u304d\u308bJOIN\npeewee 2.4.5\u3067\u306fRIGHT\u3084FULL JOIN\u306f\u3067\u304d\u307e\u305b\u3093\u3002\nINNER JOIN\u304bLEFT OUTER JOIN\u306e\u307f\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\nquery = Curve.select(Curve, RailRoadSection).join(RailRoadSection, JOIN_FULL)\n\nJOIN_FULL\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\npeewee.OperationalError: RIGHT and FULL OUTER JOINs are not currently supported\n\n\nLEFT OUTER JOIN\u306e\u4f8b\n\u53d6\u5f97\u3057\u305f\u30ec\u30b3\u30fc\u30c9\u306b\u7d50\u5408\u4e2d\u306e\u30c6\u30fc\u30d6\u30eb\u540d\u304c\u3042\u308a\u307e\u3059\u3002dir\u95a2\u6570\u3067\u30ec\u30b3\u30fc\u30c9\u306e\u5185\u5bb9\u3092\u3059\u308b\u3068\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n# \u30e2\u30c7\u30eb\nclass BaseModel(Model):\n    \"\"\"\n    \u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u30d9\u30fc\u30b9\n    \"\"\"\n    class Meta:\n        database = database_proxy\n\n\nclass Curve(BaseModel):\n    \"\"\"\n    \u66f2\u7dda\u60c5\u5831\u30e2\u30c7\u30eb\n    \"\"\"\n    curve_id = CharField(index=True, unique=False)\n    lat = DoubleField()\n    lng = DoubleField()\n\n\nclass RailRoadSection(BaseModel):\n    \"\"\"\n    \u9244\u9053\u533a\u9593\u60c5\u5831\u30e2\u30c7\u30eb\n    \"\"\"\n    gml_id = CharField(primary_key=True)\n    location = ForeignKeyField(\n        db_column='location_id',\n        rel_model=Curve,\n        to_field='id'\n    )\n    railway_type = IntegerField()\n    service_provider_type = IntegerField()\n    railway_line_name = CharField(index=True)\n    operation_company = CharField(index=True)\n\n# JOIN\u306e\u4f8b\ndef get_curve(operation_company=None, railway_line=None):\n    ret = []\n    query = Curve.select(Curve, RailRoadSection).join(RailRoadSection, JOIN_LEFT_OUTER)\n    cond = None\n    if railway_line:\n        cond = (RailRoadSection.railway_line_name == railway_line)\n    if operation_company:\n        if cond:\n            cond = cond & (RailRoadSection.operation_company == operation_company)\n        else:\n            cond = (RailRoadSection.operation_company == operation_company)\n    rows = query.where(cond)\n    for r in rows: \n        #print dir(r) # \u30ec\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\n        print r.curve_id, r.lat, r.lng, r.railroadsection.gml_id\n\n\n\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u3092JOIN\u3059\u308b\u5834\u5408\n\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u3092JOIN\u3059\u308b\u5834\u5408\u306f\u3001switch\u3092\u4f7f\u7528\u3057\u3066\u3069\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u7d50\u5408\u3059\u308b\u304b\u3092\u660e\u793a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002SQL\u30ec\u30d9\u30eb\u3067\u306f\u540c\u3058\u30af\u30a8\u30ea\u30fc\u3092\u767a\u884c\u3057\u3066\u3044\u3066\u3082\u3001N+1\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\nhttp://stackoverflow.com/questions/22016778/python-peewee-joins-multiple-tables\n    #http://stackoverflow.com/questions/22016778/python-peewee-joins-multiple-tables\n    # N+1\u554f\u984c\u304c\u767a\u751f\u3059\u308b\n    query = (TimeTableItem\n        .select(TimeTableItem, TimeTable, BusStop)\n        .join(TimeTable, on = (TimeTableItem.timeTable << timetableids.keys()))\n        .join(BusStop, on=(TimeTableItem.busStop == BusStop.id))\n    )\n    for r in query:\n        print r.busStop.stopName\n\n    # N+1\u554f\u984c\u3092\u56de\u907f\n    query = (TimeTableItem\n        .select(TimeTableItem, TimeTable, BusStop)\n        .join(TimeTable, on = (TimeTableItem.timeTable << timetableids.keys()))\n        .switch(TimeTableItem)\n        .join(BusStop, on=(TimeTableItem.busStop == BusStop.id))\n    )\n    for r in query:\n        print r.busStop.stopName\n\n\n\n\u81ea\u5df1\u7d50\u5408\n\u81ea\u5df1\u7d50\u5408\u3092\u884c\u3046\u5834\u5408\u3001alias\u3067\u5225\u540d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304a\u304d\u3001\u305d\u308c\u3092\u5229\u7528\u3059\u308b\n    fromBusStop = BusStopOrder.alias()\n    toBusStop = BusStopOrder.alias()\n    query = (fromBusStop\n        .select(fromBusStop, toBusStop, BusStop)\n        .join(\n            toBusStop,\n            on=((toBusStop.route == fromBusStop.route) & (toBusStop.stopOrder > fromBusStop.stopOrder))\n            .alias('toBusStopOrder')\n        )\n        .switch(toBusStop)\n        .join(BusStop, on=(toBusStop.busStop==BusStop.id))\n        .where((fromBusStop.busStop==from_bus_stop))\n    )\n    for r in query:\n        print r.toBusStopOrder.busStop.id\n\n\n\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\n\u3053\u3053\u3067\u306f\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4e0b\u8a18\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/models.html\n\n\u5217\u306e\u578b\n\u5148\u306e\u4f8b\u306e\u3088\u3046\u306bDateField\u3001CharField\u3092Model\u30af\u30e9\u30b9\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u4f7f\u7528\u3067\u304d\u308b\u30d5\u30a3\u30fc\u30eb\u3069\u306f\u4e0b\u8a18\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\nField Type\nSqlite\nPostgresql\nMySQL\n\n\n\n\nCharField\nvarchar\nvarchar\nvarchar\n\n\nTextField\ntext\ntext\nlongtext\n\n\nDateTimeField\ndatetime\ntimestamp\ndatetime\n\n\nIntegerField\ninteger\ninteger\ninteger\n\n\nBooleanField\nsmallint\nboolean\nbool\n\n\nFloatField\nreal\nreal\nreal\n\n\nDoubleField\nreal\ndouble precision\ndouble precision\n\n\nBigIntegerField\ninteger\nbigint\nbigint\n\n\nDecimalField\ndecimal\nnumeric\nnumeric\n\n\nPrimaryKeyField\ninteger\nserial\ninteger\n\n\nForeignKeyField\ninteger\ninteger\ninteger\n\n\nDateField\ndate\ndate\ndate\n\n\nTimeField\ntime\ntime\ntime\n\n\nBlobField\nblob\nbytea\nblob\n\n\nUUIDField\nnot supported\nuuid\nnot supported\n\n\n\nfield\u4f5c\u6210\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u308a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u6307\u5b9a\u3084\u91cd\u8907\u306e\u6709\u7121\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4e0b\u8a18\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/api.html#fields\n\n\u4e3b\u30ad\u30fc\u306e\u6307\u5b9a\npeewee\u3067\u4e3b\u30ad\u30fc\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u4e3b\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\nPrimaryKey\u3092\u660e\u793a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u81ea\u52d5\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306eid\u3068\u3044\u3046\u4e3b\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nclass Test1(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\n\u4f5c\u6210\u3055\u308c\u308bSQLite\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\nCREATE TABLE \"test1\" (\"id\" INTEGER NOT NULL PRIMARY KEY, \"name\" VARCHAR(255) NOT NULL, \"birthday\" DATE NOT NULL, \"is_relative\" SMALLINT NOT NULL);\n\n\n\u7279\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e3b\u30ad\u30fc\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f5c\u6210\u3059\u308b\u969b\u306bprimary_key=True\u3068\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u8a72\u5f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e3b\u30ad\u30fc\u3068\u3057\u307e\u3059\u3002\nclass Test2(Model):\n    name = CharField(primary_key=True)\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\n\u4f5c\u6210\u3055\u308c\u308bSQLite\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\nCREATE TABLE \"test2\" (\"name\" VARCHAR(255) NOT NULL PRIMARY KEY, \"birthday\" DATE NOT NULL, \"is_relative\" SMALLINT NOT NULL);\n\n\n\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e3b\u30ad\u30fc\u306b\u3059\u308b\nCompositeKey\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e3b\u30ad\u30fc\u306b\u3067\u304d\u307e\u3059\u3002\nclass Test3(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n        primary_key = CompositeKey('name', 'birthday')\n\n\u4f5c\u6210\u3055\u308c\u308bSQLite\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\nCREATE TABLE \"test3\" (\"name\" VARCHAR(255) NOT NULL, \"birthday\" DATE NOT NULL, \"is_relative\" SMALLINT NOT NULL, PRIMARY KEY (\"name\", \"birthday\"));\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a\npeewee\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u6307\u5b9a\u306e\u5358\u4e00\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3059\u308b\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f5c\u6210\u3059\u308b\u969b\u3001index=True\u3068\u3059\u308b\u3053\u3068\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3067\u304d\u307e\u3059\nclass Test1(Model):\n    name = CharField(index=True)\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\n\u4f5c\u6210\u3055\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\nCREATE INDEX \"test1_name\" ON \"test1\n\n\n\u6307\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3059\u308b\nMeta \u30af\u30e9\u30b9\u306b\u3066indexes\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u8907\u6570\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\nclass Test2(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n        indexes = (\n            # \u672b\u5c3e\u306b,\u304c\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n            # \u8907\u6570\u6307\u5b9a\u3082\u53ef\u80fd\n            (('name', 'birthday'), False),\n        )\n\n\u4f5c\u6210\u3055\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\nCREATE INDEX \"test2_name_birthday\" ON \"test2\" (\"name\", \"birthday\")\n\n\n\u91cd\u8907\u3092\u7981\u6b62\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3059\u308b\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f5c\u6210\u3059\u308b\u969b\u306bunique=True\u3092\u6307\u5b9a\u3059\u308b\u304b\u3001Meta\u30af\u30e9\u30b9\u306eindexes\u306e\u7b2c\u4e8c\u5f15\u6570\u306bTrue\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u91cd\u8907\u3092\u7981\u6b62\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\nclass Test3(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n        indexes = (\n            # \u672b\u5c3e\u306b,\u304c\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n            # \u8907\u6570\u6307\u5b9a\u3082\u53ef\u80fd\n            (('name', 'birthday'), True),\n        )\n\n\u4f5c\u6210\u3055\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\nCREATE UNIQUE INDEX \"test3_name_birthday\" ON \"test3\" (\"name\", \"birthday\")\n\n\n\u5916\u90e8\u30ad\u30fc\u306b\u3064\u3044\u3066\nForeignKeyField()\u3092\u4f7f\u7528\u3059\u308b\u3068\u5916\u90e8\u30ad\u30fc\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\nto_field \u3067\u4e3b\u30ad\u30fc\u4ee5\u5916\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u30ad\u30fc\u306f\u4e3b\u30ad\u30fc\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u304b\u3001\u4e00\u610f\u5236\u7d04\u3092\u6301\u3064\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nhttp://peewee.readthedocs.org/en/latest/peewee/api.html#ForeignKeyField\n\n\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\u65b9\u6cd5\npeewee\u3067\u306f\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4e0b\u8a18\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/database.html\n\nSQLite\u306e\u63a5\u7d9a\u4f8b\nmemory\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u63a5\u7d9a\u304c\u3067\u304d\u307e\u3059\u3002\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndb = SqliteDatabase(':memory:')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db\n\ndb.create_tables([Person, Pet], True)\n\n\nAPSW\u306e\u63a5\u7d9a\u4f8b\nmemory\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u63a5\u7d9a\u304c\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001birthday=date(1960, 1, 15)\u3068\u3044\u3046\u3075\u3046\u306bDateFiled()\u306bdate\u3092\u6e21\u3059\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u6587\u5b57\u5217\u3067\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001with\u3092\u629c\u3051\u308b\u3068\u304d\u306bCommit\u304c\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u6700\u5f8c\u306e\u30b3\u30df\u30c3\u30c8\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u307e\u3059\uff08\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff09\nfrom peewee import *\nfrom datetime import date\nfrom playhouse.apsw_ext import APSWDatabase\ndb = APSWDatabase('apswdatabase.sqlite')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db \n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db \n\ndb.create_tables([Person, Pet], True)\n\ndb.set_autocommit(False)\nwith db.transaction():\n    # birthday=date(1960, 1, 15) ...\n    # \"TypeError: Bad binding argument type supplied - argument #2: type datetime.date\"\n    uncle_bob = Person(name='Bob', birthday='1960-01-15', is_relative=True)\n    uncle_bob.save() # bob is now stored in the database\n\n    grandma = Person.create(name='Grandma', birthday='1935-03-01', is_relative=True)\n    herb = Person.create(name='Herb', birthday='1950-05-05', is_relative=False)\n\n    bob_kitty = Pet.create(owner=uncle_bob, name='Kitty', animal_type='cat')\n    herb_fido = Pet.create(owner=herb, name='Fido', animal_type='dog')\n    herb_mittens = Pet.create(owner=herb, name='Mittens', animal_type='cat')\n    herb_mittens_jr = Pet.create(owner=herb, name='Mittens Jr', animal_type='cat')\n\n    herb_mittens.delete_instance() \n    print \"-----------------\"\n    for person in Person.select():\n        print person.name, person.is_relative\n\n    print \"-----------------\"\n    query = Pet.select().where(Pet.animal_type == 'cat')\n    for pet in query:\n        print pet.name, pet.owner.name\n\n    print \"-----------------\"\n    query = (Pet\n             .select(Pet, Person)\n             .join(Person)\n             .where(Pet.animal_type == 'cat'))\n    for pet in query:\n        print pet.name, pet.owner.name\n    #db.commit() # Not required for APSWDatabase \n\n\n\nMySQL\u306e\u63a5\u7d9a\u4f8b\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3001\u30e6\u30fc\u30b6\u30fc\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u30db\u30b9\u30c8\u3001\u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3057\u3066\u63a5\u7d9a\u3067\u304d\u307e\u3059\u3002\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\n\n\ndb = MySQLDatabase(\n    database='peewee_test',\n    user='\u3086\u30fc\u3056',\n    password=\"\u3071\u3059\u308f\u30fc\u3069\",\n    host=\"127.0.0.1\",\n    port=3306)\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db # This model uses the \"people.db\" database.\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db # this model uses the people database\n\ndb.create_tables([Person, Pet], True)\n\n\nPostgres\u306e\u63a5\u7d9a\u4f8b\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3001\u30e6\u30fc\u30b6\u30fc\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u30db\u30b9\u30c8\u3001\u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3057\u3066\u63a5\u7d9a\u3067\u304d\u307e\u3059\u3002\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\nfrom playhouse.postgres_ext import PostgresqlExtDatabase\n\n# peewee\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067hstore\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n# http://d.hatena.ne.jp/rudi/20120330/1333120115\n# https://github.com/coleifer/peewee/issues/432\ndb = PostgresqlExtDatabase(\n    database='peewee_test',\n    user='USER',\n    password=\"PASS\",\n    host=\"127.0.0.1\",\n    port=5432,\n    register_hstore=False)\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db # This model uses the \"people.db\" database.\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db # this model uses the people database\n\ndb.create_tables([Person, Pet], True)\n\n\nSpatiaLiteSQL\u3078\u306e\u63a5\u7d9a\u65b9\u6cd5\n\u7a7a\u9593\u60c5\u5831\u3092\u6271\u3046SQLite\u306e\u62e1\u5f35\u3067\u3042\u308bSpatiaLite\u3078\u306e\u63a5\u7d9a\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\nhttp://qiita.com/mima_ita/items/64f6c2b8bb47c4b5b391\n\u3053\u308c\u306b\u306fplayhouse.sqlite_ext\u306eSqliteExtDatabase\u3092\u4f7f\u7528\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u884c\u3044\u307e\u3059\u3002\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport os\nfrom peewee import *\nfrom playhouse.sqlite_ext import SqliteExtDatabase\n\n# mod_spatialite\u306e\u3042\u308b\u30d5\u30a9\u30eb\u30c0\u3092PATH\u306b\u52a0\u3048\u308b\nos.environ[\"PATH\"] = os.environ[\"PATH\"] + ';C:\\\\tool\\\\spatialite\\\\mod_spatialite-4.2.0-win-x86'\ndb = SqliteExtDatabase('database/test.sqlite')\n\nclass PolygonField(Field):\n    db_field = 'polygon'\ndb.field_overrides = {'polygon': 'POLYGON'}\n\n\n# mod_spatialite\u306e\u8aad\u307f\u8fbc\u307f\ndb.load_extension('./mod_spatialite-4.2.0-win-x86/mod_spatialite.dll')\n\n\nclass AdministrativeDistrict(Model):\n  PK_UID = PrimaryKeyField()\n  N03_001 = CharField()\n  N03_002 = CharField()\n  N03_003 = CharField()\n  N03_004 = CharField()\n  N03_007 = CharField()\n  Geometry = PolygonField()\n\n  class Meta:\n      database = db\n\n\nfor r in AdministrativeDistrict.select(AdministrativeDistrict.N03_001 ,  R('AsText(Geometry)').alias('Geo')).limit(10):\n    print r.N03_001\n    print r.Geo\n\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\u30fbload_extension\u3092\u4f7f\u7528\u3057\u3066mod_spatialite.dll/so\u3092\u547c\u3073\u51fa\u3059\u3002\n\u30fbPOINT\u3084POLYGON\u3068\u3044\u3063\u305fspatialite\u306e\u5217\u306fField\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u3001db.field_overrides \u3067\u30b3\u30fc\u30c9\u3067\u6307\u5b9a\u3057\u305fdb_field\u3068DB\u306e\u578b\u540d\u3092\u5bfe\u5fdc\u4ed8\u3051\u308b\n\u30fbAsText\u306a\u3069\u306espatialite\u56fa\u6709\u306e\u95a2\u6570\u306fR()\u3092\u7528\u3044\u3066\u5229\u7528\u3059\u308b\n\u306a\u304a\u3001RTreeIndex\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nTypeError: 'idx_Station_geometry' object does not support indexing\n\n\u3053\u306e\u5834\u5408\u306f\u3001\u76f4\u63a5SQL\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002(APSWDatabase\u4f7f\u7528\u3057\u3066\u3082\u30c0\u30e1\u3060\u3063\u305f\uff09\n    rows = database_proxy.get_conn().execute(\"\"\"\n        SELECT \n          statValue.value,\n          AsGeoJson(MapArea.Geometry)\n        FROM \n          MapArea \n          inner join idx_MapArea_Geometry ON pkid = MapArea.id AND xmin > ? AND ymin > ? AND xmax < ? AND ymax < ?\n          inner join statValueAttr ON MapArea.stat_val_attr_id = statValueAttr.id \n          inner join statValueAttr AS b ON b.stat_value_id = statValueAttr.stat_value_id AND b.attr_value = ?\n          inner join statValue ON statValue.id = b.stat_value_id\n        WHERE \n          MapArea.stat_id like ?;\n    \"\"\",(xmin, ymin, xmax, ymax, attr_value, stat_id_start_str + '%'))\n\n\n\u5b9f\u884c\u6642\u306b\u63a5\u7d9a\u5148\u3092\u9078\u629e\u3059\u308b\u65b9\u6cd5\n\u3044\u307e\u307e\u3067\u306e\u65b9\u6cd5\u3067\u306f\u3001\u5b9f\u884c\u6642\u306b\u63a5\u7d9a\u5148\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001Proxy() \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5f8c\u304b\u3089\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u306b\u5408\u308f\u305b\u305f\u63a5\u7d9a\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n# -*- coding: utf/-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndatabase_proxy = Proxy()  # Create a proxy for our db.\n\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = database_proxy\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = database_proxy\n\n# \u3042\u3068\u304b\u3089\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u6307\u5b9a\u3067\u304d\u308b\ndb = SqliteDatabase(':memory:', autocommit=False)\ndatabase_proxy.initialize(db)\n\ndb.create_tables([Person, Pet], True)\n\n\nRead Slaves \u3084\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\nDatabase\u306b\u3088\u3063\u3066\u306f\u3001Read Slaves\u3092\u6307\u5b9a\u3057\u3066\u3001\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306eDB\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u308a\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u7528\u3044\u3066\u8907\u6570\u306e\u63a5\u7d9a\u3092\u53d6\u308a\u6271\u3046\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/database.html#read-slaves\nhttps://peewee.readthedocs.org/en/latest/peewee/database.html#connection-pooling\n\n\u30b9\u30ad\u30fc\u30de\u30fc\u306e\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\nPeewee\u3067\u306f\u30b9\u30ad\u30fc\u30de\u306e\u79fb\u884c\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u4ed6\u306e\u30b9\u30ad\u30fc\u30de\u30fc\u79fb\u884c\u30c4\u30fc\u30eb\u3068\u3053\u3068\u306a\u308a\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306f\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u79fb\u884c\u3092\u884c\u3046\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndb = SqliteDatabase('mig.sqlite')\n\n## \u5143\u306eDB\u306e\u4f5c\u6210\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\ndb.create_tables([Person], True)\n\n## \u30b9\u30ad\u30fc\u30de\u30fc\u306e\u79fb\u884c\nfrom playhouse.migrate import *\nmigrator = SqliteMigrator(db)\n\n\ntitle_field = CharField(default='')\nstatus_field = IntegerField(null=True)\n\nwith db.transaction():\n    migrate(\n        migrator.add_column('Person', 'title', title_field),\n        migrator.add_column('Person', 'status', status_field),\n        migrator.drop_column('Person', 'is_relative'),\n    )\n\n\u8a73\u7d30\u306f\u4e0b\u8a18\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/playhouse.html#migrate\n\n\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\npwiz\u3092\u7528\u3044\u3066\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\npython -m pwiz --engine=sqlite people.db\n\n\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067people.db\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6a19\u6e96\u51fa\u529b\u3057\u307e\u3059\u3002\n\u51fa\u529b\u4f8b\nfrom peewee import *\n\ndatabase = SqliteDatabase('people.db', **{})\n\nclass UnknownField(object):\n    pass\n\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\nclass Person(BaseModel):\n    birthday = DateField()\n    is_relative = IntegerField()\n    name = CharField()\n\n    class Meta:\n        db_table = 'person'\n\nclass Pet(BaseModel):\n    animal_type = CharField()\n    name = CharField()\n    owner = ForeignKeyField(db_column='owner_id', rel_model=Person, to_field='id')\n\n    class Meta:\n        db_table = 'pet'\n\n\nSQL\u306e\u30ed\u30ae\u30f3\u30b0\npeewee\u304c\u767a\u884c\u3057\u305fSQL\u3092\u30ed\u30ae\u30f3\u30b0\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u3057\u307e\u3059\u3002\nimport logging\nlogger = logging.getLogger('peewee')\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(logging.StreamHandler())\n\n\u3053\u308c\u306b\u3088\u308apeewee\u3067SQL\u3092\u767a\u884c\u3059\u308b\u305f\u3073\u306b\u6b21\u306e\u3088\u3046\u306a\u30ed\u30b0\u304cstderr\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n('SELECT name FROM sqlite_master WHERE type = ? ORDER BY name;', ('table',))\n('CREATE TABLE \"test1\" (\"id\" INTEGER NOT NULL PRIMARY KEY, \"name\" VARCHAR(255) NOT NULL, \"birthday\" DATE NOT NULL, \"is_relative\" SMALLINT NOT NULL)', [])\n\n\n\u307e\u3068\u3081\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u3001Peewee\u3092\u7528\u3044\u308b\u3053\u3068\u3067Python\u304b\u3089\u69d8\u3005\u306aDB\u306e\u64cd\u4f5c\u3092SQL\u3092\u8a18\u8ff0\u305b\u305a\u306b\u884c\u3048\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n##\u6982\u8981\npeewee\u306fPython\u7528\u306eORM\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u64cd\u4f5c\u304c\u884c\u3048\u307e\u3059\u3002\n\u30fbSQLite\n\u30fbMySQL\n\u30fbPostgres\n\u30fbAWSP\n\u30fbBerkeleyDatabase\uff08\u672a\u691c\u8a3c\uff09\n\n\u8a73\u7d30\u306f\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/index.html\n\n##\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\n```\neasy_install peewee\n```\n\n##\u7c21\u5358\u306a\u4f8b\nSQLite\u306b\u3088\u308b\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n```py\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndb = SqliteDatabase(':memory:')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db # This model uses the \"people.db\" database.\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db # this model uses the people database\n\n\n\ntry:\n    # \u7b2c\u4e8c\u5f15\u6570\u304cTrue\u306e\u5834\u5408\u3001\u5b58\u5728\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u4f5c\u6210\u3057\u306a\u3044\n    db.create_tables([Person, Pet], True)\n    with db.transaction():\n        # \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066Save\u3059\u308b\u3053\u3068\u3067INSERT\u3059\u308b\n        uncle_bob = Person(name='Bob', birthday=date(1960, 1, 15), is_relative=True)\n        uncle_bob.save() # bob is now stored in the database\n\n        # create\u3067INSERT\u3059\u308b\n        grandma = Person.create(name='Grandma', birthday=date(1935, 3, 1), is_relative=True)\n        herb = Person.create(name='Herb', birthday=date(1950, 5, 5), is_relative=False)\n\n        bob_kitty = Pet.create(owner=uncle_bob, name='Kitty', animal_type='cat')\n        herb_fido = Pet.create(owner=herb, name='Fido', animal_type='dog')\n        herb_mittens = Pet.create(owner=herb, name='Mittens', animal_type='cat')\n        herb_mittens_jr = Pet.create(owner=herb, name='Mittens Jr', animal_type='cat')\n\n        print \"\u5168\u90e8\u53d6\u5f97-----------------\"\n        for person in Person.select():\n            print person.name, person.is_relative\n\n        print \"cat\u306e\u307f\u53d6\u5f97-----------------\"\n        query = Pet.select().where(Pet.animal_type == 'cat')\n        for pet in query:\n            print pet.name, pet.owner.name\n\n        print \"Join\u306e\u4f8b-----------------\"\n        query = (Pet\n                 .select(Pet, Person)\n                 .join(Person)\n                 .where(Pet.animal_type == 'cat'))\n        for pet in query:\n            print pet.name, pet.owner.name\n\n        print \"\u66f4\u65b0\u306e\u4f8b-----------------\"\n        update_pet = Pet.get(Pet.name=='Kitty')\n        update_pet.name = 'Kitty(updated)'\n        update_pet.save() \n\n        query = (Pet\n                 .select(Pet, Person)\n                 .join(Person)\n                 .where(Pet.animal_type == 'cat'))\n        for pet in query:\n            print pet.name, pet.owner.name\n\n\n        print \"\u524a\u9664\u306e\u4f8b-----------------\"\n        del_pet = Pet.get(Pet.name=='Mittens Jr')\n        del_pet.delete_instance() \n\n        query = (Pet\n                 .select(Pet, Person)\n                 .join(Person)\n                 .where(Pet.animal_type == 'cat'))\n        for pet in query:\n            print pet.name, pet.owner.name\n\n        db.commit()\n\n\nexcept IntegrityError ,ex:\n    print (ex)\n    db.rollback()\n\n```\n\n\u3053\u306e\u4f8b\u306e\u3088\u3046\u306bpeewee\u3092\u7528\u3044\u308c\u3070SQL\u6587\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u64cd\u4f5c\u304c\u884c\u3048\u307e\u3059\u3002\n\u305d\u306e\u4ed6\u3001\u30b0\u30eb\u30fc\u30d7\u5316\u3084\u3001max,min\u95a2\u6570\u3092\u4f7f\u7528\u3057\u305f\u30af\u30a8\u30ea\u30fc\u306b\u3064\u3044\u3066\u306f\u4e0b\u8a18\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nhttps://peewee.readthedocs.org/en/latest/peewee/querying.html\n\n##SUBSTR\u306a\u3069\u306e\u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\nSUBSTR\u306a\u3069\u306e\u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001R()\u3092\u4f7f\u7528\u3057\u307e\u3059\n\n```py\nfor r in AdministrativeDistrict.select(R('SUBSTR(N03_001,1,1)').alias('a1')).limit(10):\n    print r.a1\n```\n\n\u3053\u306e\u4f8b\u3067\u306fN03_001\u5217\u306e1\u6587\u5b57\u76ee\u3092SUBSTR\u95a2\u6570\u3067\u53d6\u5f97\u3057\u3066\u3001\u305d\u308c\u306ba1\u3068\u3044\u3046\u5217\u540d\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\n\n\n##\u5927\u91cf\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n\u4e00\u5ea6\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001insert_many\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```py\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndb = SqliteDatabase(':memory:')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\ndata_source = [\n    {'name' : 'test1' , 'birthday' : date(1960, 1, 15), 'is_relative' : True},\n    {'name' : 'test2' , 'birthday' : date(1960, 2, 15), 'is_relative' : True},\n    {'name' : 'test3' , 'birthday' : date(1960, 3, 15), 'is_relative' : True},\n    {'name' : 'test4' , 'birthday' : date(1960, 4, 15), 'is_relative' : True},\n    {'name' : 'test5' , 'birthday' : date(1960, 5, 15), 'is_relative' : True},\n]\n\ndb.create_tables([Person], True)\ntry:\n    with db.transaction():\n        Person.insert_many(data_source).execute()\n\n    print \"\u5168\u90e8\u53d6\u5f97-----------------\"\n    for person in Person.select():\n        print person.name, person.birthday, person.is_relative\n\nexcept IntegrityError ,ex:\n    print (ex)\n    db.rollback()\n\n```\n\n##DISTINCT\u306e\u4f7f\u7528\u65b9\u6cd5\nDISTINCT\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u3001\uff12\u7a2e\u985e\u306e\u4f7f\u7528\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n###\u30d5\u30a3\u30fc\u30eb\u30c9\u5168\u3066\u306b\u5bfe\u3057\u3066\u884c\u3046\u5834\u5408\n\n```py\nquery = Station.select(Station.gml_id, Station.station_name).distinct()\n```\n\n\u5b9f\u969b\u767a\u884c\u3055\u308c\u308bSQL\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```sql\n'SELECT DISTINCT \"t1\".\"gml_id\", \"t1\".\"station_name\" FROM \"station\" AS t1\n```\n\n###\u7279\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066\u884c\u3046\u5834\u5408\n\n```py\nquery = Station.select(fn.Distinct(Station.station_name))\n```\n\n\u5b9f\u969b\u767a\u884c\u3055\u308c\u308bSQL\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```sql\nSELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t\n```\n\n\n##\u6761\u4ef6\u3092\u52d5\u7684\u306b\u7d44\u307f\u7acb\u3066\u308b\n\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u3001operation_company\u3068railway_line\u3092\u6761\u4ef6\u306b\u30af\u30a8\u30ea\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```py\ndef get_station(operation_company=None, railway_line=None):\n    ret = []\n    query = Station.select(fn.Distinct(Station.station_name))\n    cond = None\n    if railway_line:\n        cond = (Station.railway_line_name == railway_line)\n    if operation_company:\n        if cond:\n            cond = cond & (Station.operation_company == operation_company)\n        else:\n            cond = (Station.operation_company == operation_company)\n    rows = query.where(cond)\n    for r in rows: # \u3053\u3053\u3067SQL\u3092\u767a\u884c\u3059\u308b\n        ret.append(r.station_name)\n    return ret\n```\n\n\u3053\u306e\u4f8b\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u65b9\u6cd5\u306b\u3088\u308a\uff14\u7a2e\u985e\u306eSQL\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\n|operation_company|railway_line|\u4f5c\u3089\u308c\u308bSQL|\n|:----------------|:-----------|:---|\n|\u3042\u308a|\u3042\u308a|SELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t1 WHERE ((\"t1\".\"railway_line_name\" = ?) AND (\"t1\".\"operation_company\" = ?))|\n|\u3042\u308a|\u306a\u3057|SELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t1 WHERE (\"t1\".\"operation_company\" = ?)|\n|\u306a\u3057|\u3042\u308a|SELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t1 WHERE (\"t1\".\"railway_line_name\" = ?)|\n|\u306a\u3057|\u306a\u3057|SELECT Distinct(\"t1\".\"station_name\") FROM \"station\" AS t1|\n\n\u307e\u305f\u3001\u4f5c\u6210\u3055\u308c\u305fSQL\u304c\u5b9f\u969b\u306b\u767a\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u4f7f\u7528\u3059\u308b\u6642\u3067\u3059\u3002\n\n\u3053\u306e\u6319\u52d5\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u52d5\u7684\u306b\u8907\u96d1\u306a\u6761\u4ef6\u306e\u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n##JOIN\u306b\u3064\u3044\u3066\n### \u4f7f\u7528\u3067\u304d\u308bJOIN\npeewee 2.4.5\u3067\u306fRIGHT\u3084FULL JOIN\u306f\u3067\u304d\u307e\u305b\u3093\u3002\nINNER JOIN\u304bLEFT OUTER JOIN\u306e\u307f\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n```\nquery = Curve.select(Curve, RailRoadSection).join(RailRoadSection, JOIN_FULL)\n```\n\nJOIN_FULL\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n````\npeewee.OperationalError: RIGHT and FULL OUTER JOINs are not currently supported\n```\n\n\n### LEFT OUTER JOIN\u306e\u4f8b\n\u53d6\u5f97\u3057\u305f\u30ec\u30b3\u30fc\u30c9\u306b\u7d50\u5408\u4e2d\u306e\u30c6\u30fc\u30d6\u30eb\u540d\u304c\u3042\u308a\u307e\u3059\u3002dir\u95a2\u6570\u3067\u30ec\u30b3\u30fc\u30c9\u306e\u5185\u5bb9\u3092\u3059\u308b\u3068\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\n```py\n# \u30e2\u30c7\u30eb\nclass BaseModel(Model):\n    \"\"\"\n    \u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u30d9\u30fc\u30b9\n    \"\"\"\n    class Meta:\n        database = database_proxy\n\n\nclass Curve(BaseModel):\n    \"\"\"\n    \u66f2\u7dda\u60c5\u5831\u30e2\u30c7\u30eb\n    \"\"\"\n    curve_id = CharField(index=True, unique=False)\n    lat = DoubleField()\n    lng = DoubleField()\n\n\nclass RailRoadSection(BaseModel):\n    \"\"\"\n    \u9244\u9053\u533a\u9593\u60c5\u5831\u30e2\u30c7\u30eb\n    \"\"\"\n    gml_id = CharField(primary_key=True)\n    location = ForeignKeyField(\n        db_column='location_id',\n        rel_model=Curve,\n        to_field='id'\n    )\n    railway_type = IntegerField()\n    service_provider_type = IntegerField()\n    railway_line_name = CharField(index=True)\n    operation_company = CharField(index=True)\n\n# JOIN\u306e\u4f8b\ndef get_curve(operation_company=None, railway_line=None):\n    ret = []\n    query = Curve.select(Curve, RailRoadSection).join(RailRoadSection, JOIN_LEFT_OUTER)\n    cond = None\n    if railway_line:\n        cond = (RailRoadSection.railway_line_name == railway_line)\n    if operation_company:\n        if cond:\n            cond = cond & (RailRoadSection.operation_company == operation_company)\n        else:\n            cond = (RailRoadSection.operation_company == operation_company)\n    rows = query.where(cond)\n    for r in rows: \n        #print dir(r) # \u30ec\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\n        print r.curve_id, r.lat, r.lng, r.railroadsection.gml_id\n```\n\n###\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u3092JOIN\u3059\u308b\u5834\u5408\n\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u3092JOIN\u3059\u308b\u5834\u5408\u306f\u3001switch\u3092\u4f7f\u7528\u3057\u3066\u3069\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u7d50\u5408\u3059\u308b\u304b\u3092\u660e\u793a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002SQL\u30ec\u30d9\u30eb\u3067\u306f\u540c\u3058\u30af\u30a8\u30ea\u30fc\u3092\u767a\u884c\u3057\u3066\u3044\u3066\u3082\u3001N+1\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\nhttp://stackoverflow.com/questions/22016778/python-peewee-joins-multiple-tables\n\n```py\n    #http://stackoverflow.com/questions/22016778/python-peewee-joins-multiple-tables\n    # N+1\u554f\u984c\u304c\u767a\u751f\u3059\u308b\n    query = (TimeTableItem\n        .select(TimeTableItem, TimeTable, BusStop)\n        .join(TimeTable, on = (TimeTableItem.timeTable << timetableids.keys()))\n        .join(BusStop, on=(TimeTableItem.busStop == BusStop.id))\n    )\n    for r in query:\n        print r.busStop.stopName\n\n    # N+1\u554f\u984c\u3092\u56de\u907f\n    query = (TimeTableItem\n        .select(TimeTableItem, TimeTable, BusStop)\n        .join(TimeTable, on = (TimeTableItem.timeTable << timetableids.keys()))\n        .switch(TimeTableItem)\n        .join(BusStop, on=(TimeTableItem.busStop == BusStop.id))\n    )\n    for r in query:\n        print r.busStop.stopName\n\n```\n###\u81ea\u5df1\u7d50\u5408\n\u81ea\u5df1\u7d50\u5408\u3092\u884c\u3046\u5834\u5408\u3001alias\u3067\u5225\u540d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304a\u304d\u3001\u305d\u308c\u3092\u5229\u7528\u3059\u308b\n\n```py\n    fromBusStop = BusStopOrder.alias()\n    toBusStop = BusStopOrder.alias()\n    query = (fromBusStop\n        .select(fromBusStop, toBusStop, BusStop)\n        .join(\n            toBusStop,\n            on=((toBusStop.route == fromBusStop.route) & (toBusStop.stopOrder > fromBusStop.stopOrder))\n            .alias('toBusStopOrder')\n        )\n        .switch(toBusStop)\n        .join(BusStop, on=(toBusStop.busStop==BusStop.id))\n        .where((fromBusStop.busStop==from_bus_stop))\n    )\n    for r in query:\n        print r.toBusStopOrder.busStop.id\n```\n\n##\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\n\u3053\u3053\u3067\u306f\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4e0b\u8a18\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/models.html\n\n###\u5217\u306e\u578b\n\u5148\u306e\u4f8b\u306e\u3088\u3046\u306bDateField\u3001CharField\u3092Model\u30af\u30e9\u30b9\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u4f7f\u7528\u3067\u304d\u308b\u30d5\u30a3\u30fc\u30eb\u3069\u306f\u4e0b\u8a18\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n|Field Type |Sqlite |Postgresql |MySQL|\n|:---------:|:-----:|:---------:|:---:|\n|CharField |varchar |varchar |varchar|\n|TextField |text |text |longtext|\n|DateTimeField |datetime |timestamp |datetime|\n|IntegerField |integer |integer |integer|\n|BooleanField |smallint |boolean |bool|\n|FloatField |real |real |real|\n|DoubleField |real |double precision |double precision|\n|BigIntegerField |integer |bigint |bigint|\n|DecimalField |decimal |numeric |numeric|\n|PrimaryKeyField |integer |serial |integer|\n|ForeignKeyField |integer |integer |integer|\n|DateField |date |date |date|\n|TimeField |time |time |time|\n|BlobField |blob |bytea |blob|\n|UUIDField |not supported |uuid |not supported|\n\nfield\u4f5c\u6210\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u308a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u6307\u5b9a\u3084\u91cd\u8907\u306e\u6709\u7121\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4e0b\u8a18\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nhttps://peewee.readthedocs.org/en/latest/peewee/api.html#fields\n\n##\u4e3b\u30ad\u30fc\u306e\u6307\u5b9a\npeewee\u3067\u4e3b\u30ad\u30fc\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n###\u4e3b\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\nPrimaryKey\u3092\u660e\u793a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u81ea\u52d5\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306eid\u3068\u3044\u3046\u4e3b\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\n```py\nclass Test1(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n``` \n\n\n\u4f5c\u6210\u3055\u308c\u308bSQLite\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\n\n```sql\nCREATE TABLE \"test1\" (\"id\" INTEGER NOT NULL PRIMARY KEY, \"name\" VARCHAR(255) NOT NULL, \"birthday\" DATE NOT NULL, \"is_relative\" SMALLINT NOT NULL);\n```\n\n###\u7279\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e3b\u30ad\u30fc\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f5c\u6210\u3059\u308b\u969b\u306bprimary_key=True\u3068\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u8a72\u5f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e3b\u30ad\u30fc\u3068\u3057\u307e\u3059\u3002\n\n```py\nclass Test2(Model):\n    name = CharField(primary_key=True)\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n```\n\n\n\u4f5c\u6210\u3055\u308c\u308bSQLite\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\n\n```sql\nCREATE TABLE \"test2\" (\"name\" VARCHAR(255) NOT NULL PRIMARY KEY, \"birthday\" DATE NOT NULL, \"is_relative\" SMALLINT NOT NULL);\n```\n\n###\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e3b\u30ad\u30fc\u306b\u3059\u308b\nCompositeKey\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e3b\u30ad\u30fc\u306b\u3067\u304d\u307e\u3059\u3002\n\n\n```py\nclass Test3(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n        primary_key = CompositeKey('name', 'birthday')\n```\n\n\u4f5c\u6210\u3055\u308c\u308bSQLite\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\n\n```sql\nCREATE TABLE \"test3\" (\"name\" VARCHAR(255) NOT NULL, \"birthday\" DATE NOT NULL, \"is_relative\" SMALLINT NOT NULL, PRIMARY KEY (\"name\", \"birthday\"));\n```\n\n##\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a\npeewee\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n###\u6307\u5b9a\u306e\u5358\u4e00\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3059\u308b\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f5c\u6210\u3059\u308b\u969b\u3001index=True\u3068\u3059\u308b\u3053\u3068\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3067\u304d\u307e\u3059\n\n```py\nclass Test1(Model):\n    name = CharField(index=True)\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n```\n\n\u4f5c\u6210\u3055\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\n```sql\nCREATE INDEX \"test1_name\" ON \"test1\n```\n\n###\u6307\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3059\u308b\nMeta \u30af\u30e9\u30b9\u306b\u3066indexes\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u8907\u6570\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\n\n```py\nclass Test2(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n        indexes = (\n            # \u672b\u5c3e\u306b,\u304c\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n            # \u8907\u6570\u6307\u5b9a\u3082\u53ef\u80fd\n            (('name', 'birthday'), False),\n        )\n```\n\n\u4f5c\u6210\u3055\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\n```sql\nCREATE INDEX \"test2_name_birthday\" ON \"test2\" (\"name\", \"birthday\")\n```\n\n###\u91cd\u8907\u3092\u7981\u6b62\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3059\u308b\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f5c\u6210\u3059\u308b\u969b\u306bunique=True\u3092\u6307\u5b9a\u3059\u308b\u304b\u3001Meta\u30af\u30e9\u30b9\u306eindexes\u306e\u7b2c\u4e8c\u5f15\u6570\u306bTrue\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u91cd\u8907\u3092\u7981\u6b62\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n\n```py\nclass Test3(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n        indexes = (\n            # \u672b\u5c3e\u306b,\u304c\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n            # \u8907\u6570\u6307\u5b9a\u3082\u53ef\u80fd\n            (('name', 'birthday'), True),\n        )\n```\n\n\u4f5c\u6210\u3055\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\n```sql\nCREATE UNIQUE INDEX \"test3_name_birthday\" ON \"test3\" (\"name\", \"birthday\")\n```\n\n###\u5916\u90e8\u30ad\u30fc\u306b\u3064\u3044\u3066\nForeignKeyField()\u3092\u4f7f\u7528\u3059\u308b\u3068\u5916\u90e8\u30ad\u30fc\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\nto_field \u3067\u4e3b\u30ad\u30fc\u4ee5\u5916\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u30ad\u30fc\u306f\u4e3b\u30ad\u30fc\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u304b\u3001\u4e00\u610f\u5236\u7d04\u3092\u6301\u3064\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nhttp://peewee.readthedocs.org/en/latest/peewee/api.html#ForeignKeyField\n\n##\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\u65b9\u6cd5\npeewee\u3067\u306f\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4e0b\u8a18\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/database.html\n\n###SQLite\u306e\u63a5\u7d9a\u4f8b\nmemory\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u63a5\u7d9a\u304c\u3067\u304d\u307e\u3059\u3002\n\n```py\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndb = SqliteDatabase(':memory:')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db\n\ndb.create_tables([Person, Pet], True)\n```\n\n###APSW\u306e\u63a5\u7d9a\u4f8b\nmemory\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u63a5\u7d9a\u304c\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001birthday=date(1960, 1, 15)\u3068\u3044\u3046\u3075\u3046\u306bDateFiled()\u306bdate\u3092\u6e21\u3059\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u6587\u5b57\u5217\u3067\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001with\u3092\u629c\u3051\u308b\u3068\u304d\u306bCommit\u304c\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u6700\u5f8c\u306e\u30b3\u30df\u30c3\u30c8\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u307e\u3059\uff08\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff09\n\n```py\nfrom peewee import *\nfrom datetime import date\nfrom playhouse.apsw_ext import APSWDatabase\ndb = APSWDatabase('apswdatabase.sqlite')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db \n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db \n\ndb.create_tables([Person, Pet], True)\n\ndb.set_autocommit(False)\nwith db.transaction():\n    # birthday=date(1960, 1, 15) ...\n    # \"TypeError: Bad binding argument type supplied - argument #2: type datetime.date\"\n    uncle_bob = Person(name='Bob', birthday='1960-01-15', is_relative=True)\n    uncle_bob.save() # bob is now stored in the database\n\n    grandma = Person.create(name='Grandma', birthday='1935-03-01', is_relative=True)\n    herb = Person.create(name='Herb', birthday='1950-05-05', is_relative=False)\n\n    bob_kitty = Pet.create(owner=uncle_bob, name='Kitty', animal_type='cat')\n    herb_fido = Pet.create(owner=herb, name='Fido', animal_type='dog')\n    herb_mittens = Pet.create(owner=herb, name='Mittens', animal_type='cat')\n    herb_mittens_jr = Pet.create(owner=herb, name='Mittens Jr', animal_type='cat')\n\n    herb_mittens.delete_instance() \n    print \"-----------------\"\n    for person in Person.select():\n        print person.name, person.is_relative\n\n    print \"-----------------\"\n    query = Pet.select().where(Pet.animal_type == 'cat')\n    for pet in query:\n        print pet.name, pet.owner.name\n\n    print \"-----------------\"\n    query = (Pet\n             .select(Pet, Person)\n             .join(Person)\n             .where(Pet.animal_type == 'cat'))\n    for pet in query:\n        print pet.name, pet.owner.name\n    #db.commit() # Not required for APSWDatabase \n\n```\n\n###MySQL\u306e\u63a5\u7d9a\u4f8b\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3001\u30e6\u30fc\u30b6\u30fc\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u30db\u30b9\u30c8\u3001\u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3057\u3066\u63a5\u7d9a\u3067\u304d\u307e\u3059\u3002\n\n```py\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\n\n\ndb = MySQLDatabase(\n    database='peewee_test',\n    user='\u3086\u30fc\u3056',\n    password=\"\u3071\u3059\u308f\u30fc\u3069\",\n    host=\"127.0.0.1\",\n    port=3306)\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db # This model uses the \"people.db\" database.\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db # this model uses the people database\n\ndb.create_tables([Person, Pet], True)\n```\n\n###Postgres\u306e\u63a5\u7d9a\u4f8b\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3001\u30e6\u30fc\u30b6\u30fc\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u30db\u30b9\u30c8\u3001\u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3057\u3066\u63a5\u7d9a\u3067\u304d\u307e\u3059\u3002\n\n```py\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\nfrom playhouse.postgres_ext import PostgresqlExtDatabase\n\n# peewee\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067hstore\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n# http://d.hatena.ne.jp/rudi/20120330/1333120115\n# https://github.com/coleifer/peewee/issues/432\ndb = PostgresqlExtDatabase(\n    database='peewee_test',\n    user='USER',\n    password=\"PASS\",\n    host=\"127.0.0.1\",\n    port=5432,\n    register_hstore=False)\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db # This model uses the \"people.db\" database.\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = db # this model uses the people database\n\ndb.create_tables([Person, Pet], True)\n```\n\n###SpatiaLiteSQL\u3078\u306e\u63a5\u7d9a\u65b9\u6cd5\n\u7a7a\u9593\u60c5\u5831\u3092\u6271\u3046SQLite\u306e\u62e1\u5f35\u3067\u3042\u308bSpatiaLite\u3078\u306e\u63a5\u7d9a\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\nhttp://qiita.com/mima_ita/items/64f6c2b8bb47c4b5b391\n\n\u3053\u308c\u306b\u306fplayhouse.sqlite_ext\u306eSqliteExtDatabase\u3092\u4f7f\u7528\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u884c\u3044\u307e\u3059\u3002\n\n```py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport os\nfrom peewee import *\nfrom playhouse.sqlite_ext import SqliteExtDatabase\n\n# mod_spatialite\u306e\u3042\u308b\u30d5\u30a9\u30eb\u30c0\u3092PATH\u306b\u52a0\u3048\u308b\nos.environ[\"PATH\"] = os.environ[\"PATH\"] + ';C:\\\\tool\\\\spatialite\\\\mod_spatialite-4.2.0-win-x86'\ndb = SqliteExtDatabase('database/test.sqlite')\n\nclass PolygonField(Field):\n    db_field = 'polygon'\ndb.field_overrides = {'polygon': 'POLYGON'}\n\n\n# mod_spatialite\u306e\u8aad\u307f\u8fbc\u307f\ndb.load_extension('./mod_spatialite-4.2.0-win-x86/mod_spatialite.dll')\n\n\nclass AdministrativeDistrict(Model):\n  PK_UID = PrimaryKeyField()\n  N03_001 = CharField()\n  N03_002 = CharField()\n  N03_003 = CharField()\n  N03_004 = CharField()\n  N03_007 = CharField()\n  Geometry = PolygonField()\n\n  class Meta:\n      database = db\n\n\nfor r in AdministrativeDistrict.select(AdministrativeDistrict.N03_001 ,  R('AsText(Geometry)').alias('Geo')).limit(10):\n    print r.N03_001\n    print r.Geo\n\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\u30fbload_extension\u3092\u4f7f\u7528\u3057\u3066mod_spatialite.dll/so\u3092\u547c\u3073\u51fa\u3059\u3002\n\u30fbPOINT\u3084POLYGON\u3068\u3044\u3063\u305fspatialite\u306e\u5217\u306fField\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u3001db.field_overrides \u3067\u30b3\u30fc\u30c9\u3067\u6307\u5b9a\u3057\u305fdb_field\u3068DB\u306e\u578b\u540d\u3092\u5bfe\u5fdc\u4ed8\u3051\u308b\n\u30fbAsText\u306a\u3069\u306espatialite\u56fa\u6709\u306e\u95a2\u6570\u306fR()\u3092\u7528\u3044\u3066\u5229\u7528\u3059\u308b\n\n\u306a\u304a\u3001RTreeIndex\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\n```\nTypeError: 'idx_Station_geometry' object does not support indexing\n```\n\n\u3053\u306e\u5834\u5408\u306f\u3001\u76f4\u63a5SQL\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002(APSWDatabase\u4f7f\u7528\u3057\u3066\u3082\u30c0\u30e1\u3060\u3063\u305f\uff09\n\n```py\n    rows = database_proxy.get_conn().execute(\"\"\"\n        SELECT \n          statValue.value,\n          AsGeoJson(MapArea.Geometry)\n        FROM \n          MapArea \n          inner join idx_MapArea_Geometry ON pkid = MapArea.id AND xmin > ? AND ymin > ? AND xmax < ? AND ymax < ?\n          inner join statValueAttr ON MapArea.stat_val_attr_id = statValueAttr.id \n          inner join statValueAttr AS b ON b.stat_value_id = statValueAttr.stat_value_id AND b.attr_value = ?\n          inner join statValue ON statValue.id = b.stat_value_id\n        WHERE \n          MapArea.stat_id like ?;\n    \"\"\",(xmin, ymin, xmax, ymax, attr_value, stat_id_start_str + '%'))\n```\n\n\n###\u5b9f\u884c\u6642\u306b\u63a5\u7d9a\u5148\u3092\u9078\u629e\u3059\u308b\u65b9\u6cd5\n\u3044\u307e\u307e\u3067\u306e\u65b9\u6cd5\u3067\u306f\u3001\u5b9f\u884c\u6642\u306b\u63a5\u7d9a\u5148\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001Proxy() \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5f8c\u304b\u3089\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u306b\u5408\u308f\u305b\u305f\u63a5\u7d9a\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```py\n# -*- coding: utf/-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndatabase_proxy = Proxy()  # Create a proxy for our db.\n\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = database_proxy\n\nclass Pet(Model):\n    owner = ForeignKeyField(Person, related_name='pets')\n    name = CharField()\n    animal_type = CharField()\n\n    class Meta:\n        database = database_proxy\n\n# \u3042\u3068\u304b\u3089\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u6307\u5b9a\u3067\u304d\u308b\ndb = SqliteDatabase(':memory:', autocommit=False)\ndatabase_proxy.initialize(db)\n\ndb.create_tables([Person, Pet], True)\n```\n\n###Read Slaves \u3084\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\nDatabase\u306b\u3088\u3063\u3066\u306f\u3001Read Slaves\u3092\u6307\u5b9a\u3057\u3066\u3001\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306eDB\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u308a\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u7528\u3044\u3066\u8907\u6570\u306e\u63a5\u7d9a\u3092\u53d6\u308a\u6271\u3046\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\nhttps://peewee.readthedocs.org/en/latest/peewee/database.html#read-slaves\nhttps://peewee.readthedocs.org/en/latest/peewee/database.html#connection-pooling\n\n\n##\u30b9\u30ad\u30fc\u30de\u30fc\u306e\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\nPeewee\u3067\u306f\u30b9\u30ad\u30fc\u30de\u306e\u79fb\u884c\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u4ed6\u306e\u30b9\u30ad\u30fc\u30de\u30fc\u79fb\u884c\u30c4\u30fc\u30eb\u3068\u3053\u3068\u306a\u308a\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306f\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u79fb\u884c\u3092\u884c\u3046\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```py\n# -*- coding: utf-8 -*-\nfrom peewee import *\nfrom datetime import date\n\ndb = SqliteDatabase('mig.sqlite')\n\n## \u5143\u306eDB\u306e\u4f5c\u6210\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\ndb.create_tables([Person], True)\n\n## \u30b9\u30ad\u30fc\u30de\u30fc\u306e\u79fb\u884c\nfrom playhouse.migrate import *\nmigrator = SqliteMigrator(db)\n\n\ntitle_field = CharField(default='')\nstatus_field = IntegerField(null=True)\n\nwith db.transaction():\n    migrate(\n        migrator.add_column('Person', 'title', title_field),\n        migrator.add_column('Person', 'status', status_field),\n        migrator.drop_column('Person', 'is_relative'),\n    )\n```\n\n\u8a73\u7d30\u306f\u4e0b\u8a18\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://peewee.readthedocs.org/en/latest/peewee/playhouse.html#migrate\n\n##\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\npwiz\u3092\u7528\u3044\u3066\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n\n```\npython -m pwiz --engine=sqlite people.db\n```\n\n\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067people.db\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6a19\u6e96\u51fa\u529b\u3057\u307e\u3059\u3002\n\n\u51fa\u529b\u4f8b\n\n```\nfrom peewee import *\n\ndatabase = SqliteDatabase('people.db', **{})\n\nclass UnknownField(object):\n    pass\n\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\nclass Person(BaseModel):\n    birthday = DateField()\n    is_relative = IntegerField()\n    name = CharField()\n\n    class Meta:\n        db_table = 'person'\n\nclass Pet(BaseModel):\n    animal_type = CharField()\n    name = CharField()\n    owner = ForeignKeyField(db_column='owner_id', rel_model=Person, to_field='id')\n\n    class Meta:\n        db_table = 'pet'\n```\n\n\n##SQL\u306e\u30ed\u30ae\u30f3\u30b0\npeewee\u304c\u767a\u884c\u3057\u305fSQL\u3092\u30ed\u30ae\u30f3\u30b0\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u3057\u307e\u3059\u3002\n\n\n```py\nimport logging\nlogger = logging.getLogger('peewee')\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(logging.StreamHandler())\n```\n\n\u3053\u308c\u306b\u3088\u308apeewee\u3067SQL\u3092\u767a\u884c\u3059\u308b\u305f\u3073\u306b\u6b21\u306e\u3088\u3046\u306a\u30ed\u30b0\u304cstderr\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\n('SELECT name FROM sqlite_master WHERE type = ? ORDER BY name;', ('table',))\n('CREATE TABLE \"test1\" (\"id\" INTEGER NOT NULL PRIMARY KEY, \"name\" VARCHAR(255) NOT NULL, \"birthday\" DATE NOT NULL, \"is_relative\" SMALLINT NOT NULL)', [])\n```\n\n##\u307e\u3068\u3081\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u3001Peewee\u3092\u7528\u3044\u308b\u3053\u3068\u3067Python\u304b\u3089\u69d8\u3005\u306aDB\u306e\u64cd\u4f5c\u3092SQL\u3092\u8a18\u8ff0\u305b\u305a\u306b\u884c\u3048\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n", "tags": ["Python2.7", "SQLite3", "PostgreSQL", "MySQL"]}