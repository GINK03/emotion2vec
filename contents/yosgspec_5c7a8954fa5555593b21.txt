{"context": "HTML\u7248\n\n\u6982\u8981\n\n\n\u81ea\u4f5c\u30af\u30e9\u30b9\u3067PPAP\u30c6\u30b9\u30c8(js/VB/HSP/Lisp)\u306e\u7d9a\u304d\u3002\n\u6a19\u6e96\u51fa\u529b\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u6295\u3052\u3089\u308c\u305f\u3089\u8272\u3005\u3068\u6c4e\u7528\u6027\u4e0a\u304c\u308b\u3093\u3058\u3083\u306a\u3044?\n\u3069\u3046\u305b\u306a\u3089js\u306fsetTimeout\u3082\u4f7f\u3044\u305f\u3044\u3088\u306d\u3002\nPromise\u304c\u5165\u3063\u305f\u95a2\u6570\u3082\u6295\u3052\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u3088\u3046\u3002\n\u3064\u3044\u3067\u306b.Net\u306eTask\u3082\u5bfe\u5fdc\u3057\u3088\u3046\u3002\n2016/11/10: TypeScript,C#\u8ffd\u52a0\u3002C#,HSP,TypeScript\u304c\u30bf\u30b0\u67a0\u3088\u308a\u3042\u3075\u308c\u3002\n2016/11/13: D\u8a00\u8a9e\u8ffd\u52a0\u3002\n2016/11/17: eval\u7684\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u89e3\u6c7a\u3057\u305fHSP mist\u7248\u3092\u4f5c\u6210\u3002\n\u307e\u305f\u3001\u751fHSP\u7248\u306e\u65b9\u3082\u30e9\u30d9\u30eb\u3092\u6295\u3052\u308b\u3053\u3068\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u5bfe\u5fdc\u5316\u3002\n\u305d\u308c\u306b\u4f34\u3044\u65e7\u30bd\u30fc\u30b9\u524a\u9664\u3002\n2016/11/30: JavaScript\u306bGenerator\u6295\u5165\n2016/12/08: C++\u8ffd\u52a0\u3002\n2016/12/30: Pyhton\u8ffd\u52a0\u3002\n\n\n\u30e1\u30a4\u30f3\u90e8\n\nJavaScript/ppap.js\nconst zundoko=require(\"./zundoko\");\n\n(function(){\n    const zd=new zundoko();\n    console.log(zd.kiyoshi());\n    const ppap=new zundoko(\n        [\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"],\n        \"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n        [0,1,3,2,4],\n        true,\n        (no,word)=>new Promise(\n            resolve=>setTimeout(()=>{\n                process.stdout.write(word);\n                resolve();\n            },[0,200,500,800,200][no])\n        )\n    );\n    ppap.kiyoshiP()\n    .then(value=>console.log(value));\n})();\n\n\n\nTypeScript/ppapT.ts\nimport {zundoko} from \"./zundokoT\";\n\n(async function():Promise<void>{\n    const zd:any=new zundoko();\n    console.log(zd.kiyoshi());\n\n    const ppap:any=new zundoko(\n        [\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"],\n        \"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n        [0,1,3,2,4],\n        true,\n        (no,word)=>new Promise(\n            resolve=>setTimeout(()=>{\n                process.stdout.write(word);\n                resolve();\n            },[0,200,500,800,200][no])\n        )\n    );\n    console.log(await ppap.kiyoshiP());\n})();\n\n\n\nVB.net/ppap.vb\nImports System\nImports System.Console\nImports System.Threading.Thread\nImports System.Threading.Tasks\nImports zundoko\n\nModule Program\n    Sub Main()\n        Dim zd As New zundoko()\n        WriteLine(zd.kiyoshi())\n\n        Dim ppap As New zundoko(\n            {vbLf,\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n            vbLf & \"\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n            {0,1,3,2,4},\n            True,\n            Sub(no,word)\n                Sleep({0,200,500,800,200}(no))\n                Write(word)\n            End Sub\n        )\n        WriteLine(ppap.kiyoshi())\n\n        Dim ppapt As New zundoko(\n            {vbLf,\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n            vbLf & \"\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n            {0,1,3,2,4},\n            True,\n            Function(no,word) As Task\n                Return Task.Delay(\n                    {0,200,500,800,200}(no)\n                ).ContinueWith(\n                    Function()Task.Run(Sub()Write(word))\n                )\n            End Function\n        )\n        WriteLine(ppapt.kiyoshiT().Result)\n    End Sub\nEnd Module\n\n\n\nC#/ppap.cs\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program{\n    static void Main(){\n        zundoko zd=new zundoko();\n        Console.WriteLine(zd.kiyoshi());\n\n        zundoko ppap=new zundoko(\n            new string[]{\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n            \"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n            new int[]{0,1,3,2,4},\n            true,\n            (no,word)=>{\n                Thread.Sleep(new int[]{0,200,500,800,200}[no]);\n                Console.Write(word);\n            });\n        Console.WriteLine(ppap.kiyoshi());\n\n        zundoko ppapt=new zundoko(\n            new string[]{\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n            \"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n            new int[]{0,1,3,2,4},\n            true,\n            (no,word)=>{\n                return Task.Delay(new int[]{0,200,500,800,200}[no])\n                .ContinueWith(\n                    value=>Task.Run(()=>Console.Write(word))\n                );\n            }\n        );\n        Console.WriteLine(ppapt.kiyoshiT().Result);\n    }\n}\n\n\n\nHSP/ppapL.hsp\n#runtime \"hsp3cl\"\n#include \"zundokoL.as\"\n\n#module Program\n    #uselib \"msvcrt\"\n    #func printf \"printf\" str\n    #deffunc main\n        new_zundoko zd\n        mes kiyoshi(zd)\n\n        words=\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"\n        fin=\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\"\n        ptn=0,1,3,2,4\n        infunc=*lambda\n        if 0 {\n        *lambda\n            infunc_args no,word\n                w=0,200,500,800,200\n                wait w(no)/10\n                printf word\n            return\n        }\n\n        new_zundoko ppap,words,fin,ptn,1,infunc\n        mes kiyoshi(ppap)\n    return\n#global\nmain\n\n\n\nHSPmist/ppapM.hsp\n#runtime \"hsp3cl\"\n#include \"zundokoM.as\"\n\n#module Program\n    #deffunc main\n        new_zundoko zd\n        mes kiyoshi(zd)\n\n        words=\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"\n        fin=\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\"\n        ptn=0,1,3,2,4\n        new_zundoko ppap,words,fin,ptn,1,{\"\n            #deffunc infunc int no,str _word\n                w=0,200,500,800,200\n                wait w(no)/10\n                word=_word\n                repeat strlen(word)\n                    putchar peek(word,cnt)\n                loop\n            return\n        \"}\n        mes kiyoshi(ppap)\n    return\n#global\nmain\n\n\n\nCommonLisp/ppap.lisp\n(load \"zundoko\")\n\n(defparameter zd (make-instance 'zundoko))\n(format t \"~a~%\" (kiyoshi zd))\n\n(defparameter ppap (make-instance 'zundoko\n    :words '(\"~%\" \"\u30da\u30f3\" \"\u30a2\u30c3\u30dd\u30fc\" \"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\" \"\u30da\u30f3!\")\n    :fin \"\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\"\n    :ptn '(0 2 1 3 2)\n    :dbl t\n    :infunc #'(lambda(no word)\n        (sleep (elt '(0 0.2 0.5 0.8 0.2) no))\n        (format t word)\n    )\n))\n(format t \"~%~a~%\" (kiyoshi ppap))\n\n\n\nC++/ppap.cpp\n#include <iostream>\n#include <thread>\n#include \"zundoko.cpp\"\n\nvoid main(){\n    using namespace std;\n    zundoko zd;\n    cout<<zd.kiyoshi()<<endl;\n\n    zundoko ppap(\n        {\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n        \"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n        {0,1,3,2,4},\n        false,[](int no,string word){\n            this_thread::sleep_for(chrono::milliseconds([]()->vector<int>{return {0,200,500,800,200};}()[no]));\n            cout<<word<<flush;\n        }\n    );\n    cout<<ppap.kiyoshi()<<endl;\n}\n\n\n\nD\u8a00\u8a9e/ppap.d\nimport std.stdio;\nimport zundoko;\nimport core.thread;\n\nvoid main(){\n    auto zd=new zundoko();\n    writeln(zd.kiyoshi());\n\n    auto ppap=new zundoko(\n        [\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"],\n        \"\\n\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3\uff01 \u30d4\u30b3\uff01\",\n        [0,1,3,2,4],\n        false,\n        delegate(no,word){\n            Thread.sleep(dur!\"msecs\"([0,200,500,800,200][no]));\n            write(word).flush();\n        }\n    );\n    writeln(ppap.kiyoshi());\n}\n\n\n\nPython/ppap.py\nimport time\nimport zundoko\n\nif __name__==\"__main__\":\n    zd=zundoko.zundoko()\n    print(zd.kiyoshi())\n\n    def infunc(no,word):\n        time.sleep(list([0,0.2,0.5,0.8,0.2])[no])\n        print(word,flush=True,end=\"\")\n    ppap=zundoko.zundoko(\n        [\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"],\n        \"\\n\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3\uff01 \u30d4\u30b3\uff01\",\n        [0,1,3,2,4],\n        False,\n        infunc\n    )\n    print(ppap.kiyoshi())\n\n\n\nzundoko Class & kiyoshi Function\n\nJavaScript/zundoko.js\n\"use strict\";\n\nmodule.exports=(function(){\n    const\n        words=Symbol(),\n        fin=Symbol(),\n        ptn=Symbol(),\n        dbl=Symbol(),\n        infunc=Symbol(),\n        stk=Symbol();\n\n    function zundoko(\n        _words=[\"\u30ba\u30f3\",\"\u30c9\u30b3\"],\n        _fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n        _ptn=[0,0,0,0,1],\n        _dbl=false,\n        _infunc=(no,word)=>process.stdout.write(word)\n    ){\n        this[words]=_words;\n        this[fin]=_fin;\n        this[ptn]=_ptn;\n        this[dbl]=_dbl;\n        this[infunc]=_infunc;\n        this[stk]=new Array(this[ptn].length);\n    }\n\n    zundoko.prototype.kiyoshi=function(){\n        for(;;){\n            let zd=Math.floor(Math.random()*this[words].length);\n            this[infunc](zd,this[words][zd]);\n            this[stk].push(this[words][zd]);\n            let stk0=this[stk].shift();\n            if((this[dbl]?true:stk0!=this[words][this[ptn][0]]) && this[stk].join()==this[ptn].map(val=>this[words][val]).join()){\n                return this[fin];\n            }\n        }\n    };\n\n    zundoko.prototype.kiyoshiP=function(){\n        return new Promise(resolve=>{\n            const g=(function*(){\n                for(;;){\n                    let zd=Math.floor(Math.random()*Me[words].length);\n                    yield (Me[infunc](zd,Me[words][zd])).then(()=>g.next());\n                    Me[stk].push(Me[words][zd]);\n                    let stk0=Me[stk].shift();\n                    if((Me[dbl]?true:stk0!=Me[words][Me[ptn][0]]) && Me[stk].join()==Me[ptn].map(val=>Me[words][val]).join()){\n                        return resolve(Me[fin]);\n                    }\n                }\n            })();\n            var Me=this;\n            g.next();\n        });\n    };\n\n    return zundoko;\n})();\n\n\n\nTypeScript/zundokoT.ts\nexport class zundoko{\n    private words:string[];\n    private fin:string;\n    private ptn:number[];\n    private dbl:boolean;\n    private infunc:(number,string)=>any;\n    private stk:string[];\n\n    constructor(\n        words:string[]=[\"\u30ba\u30f3\",\"\u30c9\u30b3\"],\n        fin:string=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n        ptn:number[]=[0,0,0,0,1],\n        dbl:boolean=false,\n        infunc:(number,string)=>any=(no,word)=>process.stdout.write(word)\n    ){\n        this.words=words;\n        this.fin=fin;\n        this.ptn=ptn;\n        this.dbl=dbl;\n        this.infunc=infunc;\n        this.stk=new Array(ptn.length);\n    }\n\n    kiyoshi():string{\n        for(;;){\n            let zd:number=Math.floor(Math.random()*this.words.length);\n            this.infunc(zd,this.words[zd]);\n            this.stk.push(this.words[zd]);\n            let stk0:string=this.stk.shift();\n            if((this.dbl?true:stk0!=this.words[this.ptn[0]]) && this.stk.join()==this.ptn.map(val=>this.words[val]).join()){\n                return this.fin;\n            }\n        }\n    }\n\n    async kiyoshiP():Promise<string>{\n        for(;;){\n            let zd:number=Math.floor(Math.random()*this.words.length);\n            await this.infunc(zd,this.words[zd]);\n            this.stk.push(this.words[zd]);\n            let stk0:string=this.stk.shift();\n            if((this.dbl?true:stk0!=this.words[this.ptn[0]]) && this.stk.join()==this.ptn.map(val=>this.words[val]).join()){\n                return this.fin;\n            }\n        }\n    }\n};\n\n\n\nVB.net/zundoko.vb\nOption Strict On\n\nImports System\nImports System.Console\nImports System.Collections.Generic\nImports System.Threading.Tasks\n\nClass zundoko\n    Dim rand As New Random()\n    Dim words As String()\n    Dim fin As String\n    Dim ptn As Integer()\n    Dim dbl As Boolean\n    Dim infunc As Action(Of Integer,String)\n    Dim intask As Func(Of Integer,String,Task)\n    Dim stk As New LinkedList(Of String)()\n    Dim setStk As Action=Sub()Me.stk=New LinkedList(Of String)(New String(ptn.Length-1){})\n\n    Sub New(Optional words As String()=Nothing,\n            Optional fin As String=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n            Optional ptn As Integer()=Nothing,\n            Optional dbl As Boolean=False\n    )\n        Me.words=if(IsNothing(words),{\"\u30ba\u30f3\",\"\u30c9\u30b3\"},words)\n        Me.fin=fin\n        Me.ptn=if(IsNothing(ptn),{0,0,0,0,1},ptn)\n        Me.dbl=dbl\n        Me.infunc=Sub(no,word)Write(word)\n        setStk()\n    End Sub\n\n    Sub New(words As String(),fin As String,ptn As Integer(),dbl As Boolean,infunc As Action(Of Integer,String))\n        Me.words=words\n        Me.fin=fin\n        Me.ptn=ptn\n        Me.dbl=dbl\n        Me.infunc=infunc\n        setStk()\n    End Sub\n\n    Sub New(words As String(),fin As String,ptn As Integer(),dbl As Boolean,intask As Func(Of Integer,String,Task))\n        Me.words=words\n        Me.fin=fin\n        Me.ptn=ptn\n        Me.dbl=dbl\n        Me.intask=intask\n        setStk()\n    End Sub\n\n    Function kiyoshi() As String\n        Do\n            Dim zd As Integer=rand.Next(words.Length)\n            infunc(zd,words(zd))\n            stk.AddLast(words(zd))\n            Dim stk0 As String=stk.First.Value\n            stk.RemoveFirst()\n            If if(dbl,True,stk0<>words(ptn(0))) And String.Join(\"\",stk)=String.Join(\"\",Array.ConvertAll(ptn,Function(val) words(val))) Then\n                Return fin\n            End If\n        Loop\n    End Function\n\n    Async Function kiyoshiT() As Task(Of String)\n        Do\n            Dim zd As Integer=rand.Next(words.Length)\n            Await intask(zd,words(zd))\n            stk.AddLast(words(zd))\n            Dim stk0 As String=stk.First.Value\n            stk.RemoveFirst()\n            If if(dbl,True,stk0<>words(ptn(0))) And String.Join(\"\",stk)=String.Join(\"\",Array.ConvertAll(ptn,Function(val) words(val))) Then\n                Return fin\n            End If\n        Loop\n    End Function\nEnd Class\n\n\n\nC#/zundoko.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nclass zundoko{\n    Random rand=new Random();\n    string[] words;\n    string fin;\n    int[] ptn;\n    bool dbl;\n    Action<int,string> infunc ;\n    Func<int,string,Task> intask ;\n    LinkedList<string> stk=new LinkedList<string>();\n    void setStk(){\n        stk=new LinkedList<string>(new string[ptn.Length]);\n    }\n\n    public zundoko(\n            string[] words=null,\n            string fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n            int[] ptn=null,\n            bool dbl=false\n    ){\n        this.words=words==null?(new string[]{\"\u30ba\u30f3\",\"\u30c9\u30b3\"}):(string[])words;\n        this.fin=fin;\n        this.ptn=ptn==null?new int[]{0,0,0,0,1}:(int[])ptn;\n        this.dbl=dbl;\n        this.infunc=(no,word)=>Console.Write(word);\n        setStk();\n    }\n\n    public zundoko(string[] words,string fin,int[] ptn,bool dbl,Action<int,string> infunc){\n        this.words=words;\n        this.fin=fin;\n        this.ptn=ptn;\n        this.dbl=dbl;\n        this.infunc=infunc;\n        setStk();\n    }\n\n    public zundoko(string[] words,string fin,int[] ptn,bool dbl,Func<int,string,Task> intask){\n        this.words=words;\n        this.fin=fin;\n        this.ptn=ptn;\n        this.dbl=dbl;\n        this.intask=intask;\n        setStk();\n    }\n\n    public string kiyoshi(){\n        for(;;){\n            int zd=rand.Next(words.Length);\n            infunc(zd,words[zd]);\n            stk.AddLast(words[zd]);\n            string stk0=stk.First.Value;\n            stk.RemoveFirst();\n            if((dbl?true:stk0!=words[ptn[0]]) && string.Join(\"\",stk)==string.Join(\"\",Array.ConvertAll(ptn,val=>words[val]))){\n                return fin;\n            }\n        }\n    }\n\n    public async Task<string> kiyoshiT(){\n        for(;;){\n            int zd =rand.Next(words.Length);\n            await intask(zd,words[zd]);\n            stk.AddLast(words[zd]);\n            string stk0=stk.First.Value;\n            stk.RemoveFirst();\n            if((dbl?true:stk0!=words[ptn[0]]) && string.Join(\"\",stk)==string.Join(\"\",Array.ConvertAll(ptn,val=>words[val]))){\n                return fin;\n            }\n        }\n    }\n}\n\n\n\nHSP/zundokoL.as\nrandomize\nzundoko_default_load\n#module zundoko_default\n    #uselib \"msvcrt\"\n    #func printf \"printf\" str\n\n    #deffunc zundoko_default_load\n        words=\"\u30ba\u30f3\",\"\u30c9\u30b3\"\n        fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\"\n        ptn=0,0,0,0,1\n        dbl=0\n        infunc=*infunc_default_infunc\n    return\n\n*infunc_default_infunc\n        infunc_args no,word\n        printf word\n    return\n#global\n\n#module zundoko index,words,fin,ptn,dbl,infunc\n    #define global new_zundoko(%1,  \\\n        %2=words@zundoko_default,   \\\n        %3=fin@zundoko_default,     \\\n        %4=ptn@zundoko_default,     \\\n        %5=dbl@zundoko_default,     \\\n        %6=infunc@zundoko_default   \\\n    ) newmod %1,zundoko,%2,%3,%4,%5,%6\n    zundoko_length=0\n\n    #modinit array _words,str _fin,array _ptn,int _dbl,var _infunc\n        sdim words,,length(_words)\n        repeat length(_words)\n            words(cnt)=_words(cnt)\n        loop\n        fin=_fin\n        sdim ptn,,length(_ptn)\n        repeat length(_ptn)\n            ptn(cnt)=_ptn(cnt)\n        loop\n        dbl=_dbl\n        infunc=_infunc\n        index=zundoko_length\n        zundoko_length++\n        sdim stk,,length(ptn)\n    return\n\n    #modcfunc kiyoshi\n        repeat\n            zd=rnd(length(words))\n            no=zd\n            word=words(zd)\n            gosub infunc\n            stk0=stk(0)\n            repeat length(stk)-1\n                stk(cnt)=stk(cnt+1)\n            loop\n            stk(length(stk)-1)=words(zd)\n            double_check=stk0!=words(ptn(0))\n            if dbl:double_check=1\n            if double_check {\n                foreach stk\n                    if stk(cnt)!=words(ptn(cnt)){\n                        break\n                    }\n                    if cnt=length(stk)-1{\n                        return fin\n                    }\n                loop\n            }\n        loop\n\n    #deffunc infunc_args var _no, var _word\n        _no=int(no)\n        _word=str(word)\n    return\n#global\n\n\n\nHSPmist/zundokoM.as\n#include \"mist.hsp\"\n#uselib \"msvcrt\"\n#func putchar \"putchar\" int\nputchar 8\nmstOpenHspLib\nmstCaptDll\nrandomize\n\nzundoko_default_load\n#module zundoko_default\n    #deffunc zundoko_default_load\n        words=\"\u30ba\u30f3\",\"\u30c9\u30b3\"\n        fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\"\n        ptn=0,0,0,0,1\n        dbl=0\n        infunc={\"\n            #deffunc infunc int no,str _word\n                word=_word\n                repeat strlen(word)\n                    putchar peek(word,cnt)\n                loop\n            return\n        \"}\n    return\n#global\n\n#module zundoko index,words,fin,ptn,dbl,infunc\n    #define global new_zundoko(%1,  \\\n        %2=words@zundoko_default,   \\\n        %3=fin@zundoko_default,     \\\n        %4=ptn@zundoko_default,     \\\n        %5=dbl@zundoko_default,     \\\n        %6=infunc@zundoko_default   \\\n    ) newmod %1,zundoko,%2,%3,%4,%5,%6\n    zundoko_length=0\n\n    #modinit array _words,str _fin,array _ptn,int _dbl,str _infunc\n        sdim words,,length(_words)\n        repeat length(_words)\n            words(cnt)=_words(cnt)\n        loop\n        fin=_fin\n        sdim ptn,,length(_ptn)\n        repeat length(_ptn)\n            ptn(cnt)=_ptn(cnt)\n        loop\n        dbl=_dbl\n        infunc=_infunc\n        index=zundoko_length\n        zundoko_length++\n        sdim stk,,length(ptn)\n    return\n\n    #modcfunc kiyoshi\n        repeat\n            zd=rnd(length(words))\n            mstCompile infunc\n            mstCall \"infunc\",zd,words(zd)\n            stk0=stk(0)\n            repeat length(stk)-1\n                stk(cnt)=stk(cnt+1)\n            loop\n            stk(length(stk)-1)=words(zd)\n            double_check=stk0!=words(ptn(0))\n            if dbl:double_check=1\n            if double_check {\n                foreach stk\n                    if stk(cnt)!=words(ptn(cnt)){\n                        break\n                    }\n                    if cnt=length(stk)-1{\n                        return fin\n                    }\n                loop\n            }\n        loop\n#global\n\n\n\nCommonLisp/zundoko.lisp\n(defclass zundoko()(\n    (words\n        :initarg :words\n        :initform '(\"\u30ba\u30f3\" \"\u30c9\u30b3\")\n    )\n    (fin\n        :initarg :fin\n        :initform \"\u30ad\u30fb\u30e8\u30fb\u30b7!\"\n    )\n    (ptn\n        :initarg :ptn\n        :initform '(0 0 0 0 1)\n    )\n    (dbl\n        :initarg :dbl\n        :initform nil\n    )\n    (infunc\n        :initarg :infunc\n        :initform #'(lambda(no word)(format t word))\n    )\n))\n\n(defmethod kiyoshi((me zundoko))\n    (let(\n        (*random-state* (make-random-state t))\n        (words (slot-value me 'words))\n        (fin (slot-value me 'fin))\n        (ptn (slot-value me 'ptn))\n        (dbl (slot-value me 'dbl))\n        (infunc (slot-value me 'infunc))\n    )(let(\n        (stk (mapcar #'(lambda(val)\"\") ptn))\n    )\n        (defun fact(stk)\n            (let(\n                (zd(random(length words)))\n            )(let(\n                (stkzd (append (rest stk) `(,(elt words zd))))\n            )\n                (funcall infunc zd (elt words zd))\n                (if (and\n                    (if dbl t (string/= (first stk) (first words)))\n                    (equal stkzd (mapcar #'(lambda(val)(elt words val)) ptn))\n                )\n                    fin\n                    (fact stkzd)\n                )\n            ))\n        )\n        (fact stk)\n    ))\n)\n\n\n\nC++/zundoko.cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <functional>\n#include <random>\n\nclass zundoko{\nprivate:\n    std::random_device rnd;\n    std::uniform_int_distribution<int> words_range;\n    std::vector<std::string> words;\n    std::string fin;\n    std::vector<int> ptn;\n    bool dbl;\n    std::function<void(int,std::string)> infunc;\n    std::deque<std::string> stk;\n\npublic:\n    zundoko(\n        std::vector<std::string> words={\"\u30ba\u30f3\",\"\u30c9\u30b3\"},\n        std::string fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n        std::vector<int> ptn={0,0,0,0,1},\n        bool dbl=false,\n        std::function<void(int,std::string)> infunc=[](int no,std::string word){std::cout<<word<<std::flush;}\n    ){\n        this->words=words;\n        this->fin=fin;\n        this->ptn=ptn;\n        this->dbl=dbl;\n        this->infunc=infunc;\n        this->stk.resize(ptn.size());\n        std::uniform_int_distribution<int> words_range(0,words.size()-1);\n        this->words_range=words_range;\n    }\n\n    std::string kiyoshi(){\n        for(;;){\n            int zd=words_range(rnd);\n            infunc(zd,words[zd]);\n            std::string stk0=stk.front();\n            stk.pop_front();\n            stk.push_back(words[zd]);\n            std::deque<std::string> word_ptn;\n            for(int i=0;i<ptn.size();i++){\n                word_ptn.push_back(words[ptn[i]]);\n            }\n            if(dbl?true:stk0!=stk.front() && stk==word_ptn){\n                return fin;\n            }\n        }\n    }\n};\n\n\n\nD\u8a00\u8a9e/zundoko.d\nmodule zundoko;\n\nimport std.stdio;\nimport std.string;\nimport std.array;\nimport std.random;\nimport std.conv;\nimport std.algorithm;\nimport std.windows.charset;\n\nstatic public class zundoko{\nprivate:\n    string[] words;\n    string fin;\n    int[] ptn;\n    bool dbl;\n    void delegate(int,string) infunc;\n    string[] stk;\n\npublic:\n    this(\n        string[] words=[\"\u30ba\u30f3\",\"\u30c9\u30b3\"],\n        string fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n        int[] ptn=[0,0,0,0,1],\n        bool dbl=false,\n        void delegate(int,string) infunc=null\n    ){\n        this.words=array(map!(word=>to!string(toMBSz(word)))(words));\n        this.fin=to!string(toMBSz(fin));\n        this.ptn=ptn;\n        this.dbl=dbl;\n        this.infunc=infunc==null?(no,word)=>write(word):infunc;\n        this.stk=new string[ptn.length];\n    }\n\n    string kiyoshi(){\n        for(;;){\n            int zd=uniform(0,words.length);\n            infunc(zd,words[zd]);\n            string stk0=stk.front;\n            stk.popFront();\n            stk~=words[zd];\n            if(dbl?true:stk0!=stk.front && stk==array(map!(val=>words[val])(ptn))){\n                return fin;\n            }\n        }\n    }\n}\n\n\n\nPython/zundoko.py\nimport random\n\nclass zundoko:\n    def __init__(self,\n        words=[\"\u30ba\u30f3\",\"\u30c9\u30b3\"],\n        fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7\u30fb!\",\n        ptn=[0,0,0,0,1],\n        dbl=False,\n        infunc=(lambda no,word:print(word,end=\"\"))\n    ):\n        self.__words=words\n        self.__fin=fin\n        self.__ptn=ptn\n        self.__dbl=dbl\n        self.__infunc=infunc\n        self.__stk=[\"\"]*len(ptn)\n\n    def kiyoshi(self):\n        while True:\n            zd=random.randint(0,len(self.__words)-1)\n            self.__infunc(zd,self.__words[zd])\n            self.__stk.append(self.__words[zd])\n            stk0=self.__stk.pop(0)\n            if True if self.__dbl else stk0!=self.__words[self.__ptn[0]] and self.__stk==list(map(lambda val:self.__words[val],self.__ptn)):\n                return self.__fin\n\n\n\n\u3042\u3068\u304c\u304d\n\nJavaScript\u306ePromise\u5468\u308a\u306f\u307e\u3060\u8272\u3005\u554f\u984c\u3042\u308a\u3002\nkiyoshiP\u306f\u6a19\u6e96\u51fa\u529b\u4ee5\u5916\u306e\u52d5\u4f5c\u304c\u540c\u671f\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5185\u90e8\u3067\u306f\u65e2\u306b\u8a08\u7b97\u304c\u5b8c\u4e86\u3057\u3066\u3057\u307e\u3046\u3002\nkiyoshiP2\u306f\u7d20\u76f4\u306b\u518d\u5e30\u3067\u30eb\u30fc\u30d7\u3055\u305b\u3066\u307f\u305f\u3051\u3069\u3001\u6700\u5f8c\u306eresolve\u304c\u3086\u304f\u3048\u3075\u3081\u3044\u306b\u306a\u3063\u3066\u7d50\u5c40\u3055\u3089\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3057\u3066\u308b\u3002\n\nGenerator\u6df7\u305c\u305f\u3053\u3068\u3067\u6539\u5584\u3002Promise\u306e\u4e2d\u306bGenerator\u3092\u9589\u3058\u8fbc\u3081\u3066\u308b\u3002\n\n\nSimbol\u3067\u7591\u4f3cPrivate\u306b\u3057\u3066\u307f\u308b\u3002WeakMap\u306e\u65b9\u304c\u3088\u308a\u6b63\u78ba\u306aPrivate\u3068\u306f\u3044\u3046\u3051\u3069\u3001\u6587\u5b57\u304c\u3046\u308b\u3055\u3059\u304e\u308b\u3002\nTypeScript\u7248\u4f5c\u6210\u3002\nAsync/Await\u3067\u30b7\u30f3\u30d7\u30eb\u304b\u3064\u4e0a\u8a18\u3092\u6539\u5584\u3057\u305f\u3082\u306e\u306b\u3002\n\u30af\u30e9\u30b9\u5909\u6570\u304c\u306a\u3093\u3061\u3083\u3063\u3066private\u3067this\u307e\u307f\u308c\u3002\nVB\u306fAsync/Await\u4e57\u3063\u3051\u305f\u3060\u3051\u306e\u624b\u629c\u304d (\u30a8\u30e9\u30fc\u3067\u7d50\u69cb\u60a9\u3093\u3067\u305f)\u3002\nC#\u3058\u3083\u306a\u304f\u3066VB\u306a\u306e\u306f\u5358\u7d14\u306a\u597d\u307f\u3002\n\n\nC#\u306b\u3082\u79fb\u690d\u3002\nC#\u306e\u3061\u3087\u3044\u3061\u3087\u3044\u304a\u5805\u3044\u3068\u3053\u308d\u304c\u82e6\u624b\u3060\u306a\u3041\u3068\u3002\nVB\u306b\u6bd4\u3079\u3066\u5197\u9577\u3055\u306f\u306a\u3044\u304b\u3089\u66f8\u304d\u3084\u3059\u3044\u90e8\u5206\u3082\u591a\u3044\u3051\u308c\u3069\u3002\n\n\nHSP\u3068CommonLisp\u306f\u975e\u540c\u671f\u5bfe\u5fdc\u306a\u3057\u3002\n\n\nHSP\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u6295\u3052\u3089\u308c\u306a\u3044\u306e\u3067\u547c\u3070\u308c\u308b\u95a2\u6570\u3092\u66f8\u304f\u4ed5\u69d8\u3002\n\u306a\u306e\u3067\u95a2\u6570\u4f7f\u7528\u30fb\u672a\u4f7f\u7528\u7248\u3067\u30d5\u30a1\u30a4\u30eb2\u7a2e\u985e\u3002\u4e0b\u8a18\u306b\u7f6e\u63db\u3002\n\n\nHSP mist\u3092\u7528\u3044\u3066\u672c\u683c\u7684\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u63a1\u7528\u3057\u305f\u3053\u3068\u3068\u5171\u306b\u3001define\u3067\u5f15\u6570\u306e\u7701\u7565\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u6539\u826f\u3057\u305f\u3002\nHSP\u306egosub\u306a\u3093\u3066\u4f7f\u3063\u3066\u3053\u3068\u306a\u304b\u3063\u305f\u3051\u3069\u3001\u30e9\u30d9\u30eb\u306f\u5909\u6570\u306b\u7a81\u3063\u8fbc\u3093\u3067\u52d5\u304b\u305b\u308b\u306e\u3067\u3042\u3068\u3067\u95a2\u6570\u3092\u547c\u3070\u305b\u308b\u306e\u306b\u304b\u306a\u308a\u90fd\u5408\u304c\u826f\u3044\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u305f\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001\u5f15\u6570\u3092\u6295\u3052\u308b\u3053\u3068\u3082\u8fd4\u308a\u5024\u3092\u8cb0\u3046\u3053\u3068\u3082\u3067\u304d\u306a\u3044\u3051\u308c\u3069\u3002\u305d\u3053\u306f\u3001\u305d\u308c\u7528\u306b\u30b2\u30c3\u30bf\u30fc\u30bb\u30c3\u30bf\u30fc\u3092\u4f5c\u3063\u3066\u5bfe\u5fdc\u304b\u306a\u3041\u3002\n\n\nHSP\u306e\u30b3\u30fc\u30c9\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u304f\u3060\u3055\u3044\u3002\nCommonLisp\u306eSleep\u306f\u691c\u7d22\u3057\u3066\u3082\u5168\u7136\u51fa\u3066\u3053\u306a\u304f\u3066\u4f7f\u3048\u308b\u304b\u4e0d\u5b89\u306b\u306a\u3063\u305f\u8a71\u3002\nD\u8a00\u8a9e\u306fDelegate\u306e\u4ee3\u5165\u5468\u308a\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u304f\u3066\u51c4\u304f\u60a9\u3093\u3060\u3002\n\u3042\u3068\u306fmap!\u95a2\u6570\u304c\u3046\u307e\u304f\u52d5\u304b\u306a\u304f\u3066\u81ea\u4f5c\u3057\u305f\u3053\u3068(\u6539\u5584\u6e08\u307f)\u3084\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u304c\u3046\u307e\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u3068\u304b\u3001Shift-JIS\u4f7f\u3063\u3066\u3082UTF8\u4f7f\u3063\u3066\u3082\u6587\u5b57\u5316\u3051\u3057\u305f\u308a\u3068\u8272\u3005\u3042\u3063\u305f\u3002\n\u305d\u308c\u3067\u3082\u3001D\u8a00\u8a9e\u81ea\u4f53\u306f\u7d50\u69cb\u66f8\u304d\u3084\u3059\u305d\u3046\u306a\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u65e5\u672c\u8a9e\u8cc7\u6599\u304c\u3082\u3046\u5c11\u3057\u5897\u3048\u3066\u304f\u308c\u305f\u3089\u5b09\u3057\u3044\u306a\u3068\u601d\u3046\u3002\u3042\u3068\u306f\u6587\u5b57\u30b3\u30fc\u30c9\u5bfe\u5fdc\u4f55\u3068\u304b\u3057\u3066\u307b\u3057\u3044\u3002\n\n\nD\u8a00\u8a9e\u306e\u6a19\u6e96\u51fa\u529b\u306fsleep\u3059\u308b\u3068\u6539\u884c\u3059\u308b\u307e\u3067\u8868\u793a\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u7e26\u306bPPAP\u3057\u3066\u307f\u305f\u3002\n\n\n\u8272\u3005\u6539\u5584\u3002map!\u3082\u6a19\u6e96\u306e\u3082\u306e\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3002\u672c\u5f53\u306f\u6587\u5b57\u5217\u306b\u3057\u305f\u304b\u3063\u305f\u3051\u3069\u7121\u7406\u3060\u3063\u305f\u3002\n\u6a19\u6e96\u51fa\u529b\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u51e6\u7406\u3092\u8ffd\u52a0\u3002\u3053\u308c\u306b\u3088\u308a\u540c\u3058\u884c\u306b\u51fa\u529b\u3057\u3066\u3082\u5373\u6642\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\n\n\nC++\u8ffd\u52a0\u3002\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u4f55\u3068\u304b\u7121\u4e8b\u3067\u304d\u3066\u4e00\u5b89\u5fc3\u3002map\u3068\u304b\u306f\u306a\u3044\u306e\u3067\u8ae6\u3081\u3066foreach\u56de\u3059\u3002\n\n\nusing namespace\u306e\u4ed5\u69d8\u304c\u89e3\u305b\u306a\u3044\u3002\u30af\u30e9\u30b9\u306e\u30b9\u30b3\u30fc\u30d7\u306b\u9069\u5fdc\u3067\u304d\u306a\u3044\u3063\u3066\u2026\n\u304a\u304b\u3052\u3067std\u307e\u307f\u308c\u306b\u3002\n\u914d\u5217\u3092\u5909\u6570\u306b\u523a\u3055\u306a\u3044\u3067\u4f7f\u3048\u308b\u3044\u3044\u65b9\u6cd5\u304c\u6b32\u3057\u3044\u3002\n\n\nPython\u8ffd\u52a0\u3002Python\u306elambda\u306f\u9069\u5ea6\u306b\u4f7f\u3046\u3002\n\n\n\u5b9f\u884c\u74b0\u5883\nNode.js:node v7.3.0\nTypeScript: tsc 1.8.10\nVB.net: vbc 14.0.1055\nC#: csc 4.6.1055.0\nHSP 3.32\nCommonLisp: clisp 2.49, sbcl 1.2.7\nC++: cl Version 18.00.40629 for x86\nD\u8a00\u8a9e: dmd v2.066.1\nPython:Python 3.6.0\n[HTML\u7248](http://gspectool.ifdef.jp/PPAP/)\n# \u6982\u8981\n* [\u81ea\u4f5c\u30af\u30e9\u30b9\u3067PPAP\u30c6\u30b9\u30c8(js/VB/HSP/Lisp)](http://qiita.com/yosgspec/items/3aef775c54632e060013)\u306e\u7d9a\u304d\u3002\n* \u6a19\u6e96\u51fa\u529b\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u6295\u3052\u3089\u308c\u305f\u3089\u8272\u3005\u3068\u6c4e\u7528\u6027\u4e0a\u304c\u308b\u3093\u3058\u3083\u306a\u3044?\n* \u3069\u3046\u305b\u306a\u3089js\u306fsetTimeout\u3082\u4f7f\u3044\u305f\u3044\u3088\u306d\u3002\n* Promise\u304c\u5165\u3063\u305f\u95a2\u6570\u3082\u6295\u3052\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u3088\u3046\u3002\n* \u3064\u3044\u3067\u306b.Net\u306eTask\u3082\u5bfe\u5fdc\u3057\u3088\u3046\u3002\n* 2016/11/10: TypeScript,C#\u8ffd\u52a0\u3002C#,HSP,TypeScript\u304c\u30bf\u30b0\u67a0\u3088\u308a\u3042\u3075\u308c\u3002\n* 2016/11/13: D\u8a00\u8a9e\u8ffd\u52a0\u3002\n* 2016/11/17: eval\u7684\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u89e3\u6c7a\u3057\u305fHSP mist\u7248\u3092\u4f5c\u6210\u3002  \n\u307e\u305f\u3001\u751fHSP\u7248\u306e\u65b9\u3082\u30e9\u30d9\u30eb\u3092\u6295\u3052\u308b\u3053\u3068\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u5bfe\u5fdc\u5316\u3002  \n\u305d\u308c\u306b\u4f34\u3044\u65e7\u30bd\u30fc\u30b9\u524a\u9664\u3002\n* 2016/11/30: JavaScript\u306bGenerator\u6295\u5165\n* 2016/12/08: C++\u8ffd\u52a0\u3002\n* 2016/12/30: Pyhton\u8ffd\u52a0\u3002\n\n# \u30e1\u30a4\u30f3\u90e8\n```js:JavaScript/ppap.js\nconst zundoko=require(\"./zundoko\");\n\n(function(){\n\tconst zd=new zundoko();\n\tconsole.log(zd.kiyoshi());\n\tconst ppap=new zundoko(\n\t\t[\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"],\n\t\t\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n\t\t[0,1,3,2,4],\n\t\ttrue,\n\t\t(no,word)=>new Promise(\n\t\t\tresolve=>setTimeout(()=>{\n\t\t\t\tprocess.stdout.write(word);\n\t\t\t\tresolve();\n\t\t\t},[0,200,500,800,200][no])\n\t\t)\n\t);\n\tppap.kiyoshiP()\n\t.then(value=>console.log(value));\n})();\n```\n```ts:TypeScript/ppapT.ts\nimport {zundoko} from \"./zundokoT\";\n\n(async function():Promise<void>{\n\tconst zd:any=new zundoko();\n\tconsole.log(zd.kiyoshi());\n\n\tconst ppap:any=new zundoko(\n\t\t[\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"],\n\t\t\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n\t\t[0,1,3,2,4],\n\t\ttrue,\n\t\t(no,word)=>new Promise(\n\t\t\tresolve=>setTimeout(()=>{\n\t\t\t\tprocess.stdout.write(word);\n\t\t\t\tresolve();\n\t\t\t},[0,200,500,800,200][no])\n\t\t)\n\t);\n\tconsole.log(await ppap.kiyoshiP());\n})();\n```\n```vbnet:VB.net/ppap.vb\nImports System\nImports System.Console\nImports System.Threading.Thread\nImports System.Threading.Tasks\nImports zundoko\n\nModule Program\n\tSub Main()\n\t\tDim zd As New zundoko()\n\t\tWriteLine(zd.kiyoshi())\n\n\t\tDim ppap As New zundoko(\n\t\t\t{vbLf,\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n\t\t\tvbLf & \"\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n\t\t\t{0,1,3,2,4},\n\t\t\tTrue,\n\t\t\tSub(no,word)\n\t\t\t\tSleep({0,200,500,800,200}(no))\n\t\t\t\tWrite(word)\n\t\t\tEnd Sub\n\t\t)\n\t\tWriteLine(ppap.kiyoshi())\n\n\t\tDim ppapt As New zundoko(\n\t\t\t{vbLf,\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n\t\t\tvbLf & \"\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n\t\t\t{0,1,3,2,4},\n\t\t\tTrue,\n\t\t\tFunction(no,word) As Task\n\t\t\t\tReturn Task.Delay(\n\t\t\t\t\t{0,200,500,800,200}(no)\n\t\t\t\t).ContinueWith(\n\t\t\t\t\tFunction()Task.Run(Sub()Write(word))\n\t\t\t\t)\n\t\t\tEnd Function\n\t\t)\n\t\tWriteLine(ppapt.kiyoshiT().Result)\n\tEnd Sub\nEnd Module\n```\n```csharp:C#/ppap.cs\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program{\n\tstatic void Main(){\n\t\tzundoko zd=new zundoko();\n\t\tConsole.WriteLine(zd.kiyoshi());\n\n\t\tzundoko ppap=new zundoko(\n\t\t\tnew string[]{\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n\t\t\t\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n\t\t\tnew int[]{0,1,3,2,4},\n\t\t\ttrue,\n\t\t\t(no,word)=>{\n\t\t\t\tThread.Sleep(new int[]{0,200,500,800,200}[no]);\n\t\t\t\tConsole.Write(word);\n\t\t\t});\n\t\tConsole.WriteLine(ppap.kiyoshi());\n\n\t\tzundoko ppapt=new zundoko(\n\t\t\tnew string[]{\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n\t\t\t\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n\t\t\tnew int[]{0,1,3,2,4},\n\t\t\ttrue,\n\t\t\t(no,word)=>{\n\t\t\t\treturn Task.Delay(new int[]{0,200,500,800,200}[no])\n\t\t\t\t.ContinueWith(\n\t\t\t\t\tvalue=>Task.Run(()=>Console.Write(word))\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\tConsole.WriteLine(ppapt.kiyoshiT().Result);\n\t}\n}\n```\n```cpp:HSP/ppapL.hsp\n#runtime \"hsp3cl\"\n#include \"zundokoL.as\"\n\n#module Program\n\t#uselib \"msvcrt\"\n\t#func printf \"printf\" str\n\t#deffunc main\n\t\tnew_zundoko zd\n\t\tmes kiyoshi(zd)\n\t\t\n\t\twords=\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"\n\t\tfin=\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\"\n\t\tptn=0,1,3,2,4\n\t\tinfunc=*lambda\n\t\tif 0 {\n\t\t*lambda\n\t\t\tinfunc_args no,word\n\t\t\t\tw=0,200,500,800,200\n\t\t\t\twait w(no)/10\n\t\t\t\tprintf word\n\t\t\treturn\n\t\t}\n\n\t\tnew_zundoko ppap,words,fin,ptn,1,infunc\n\t\tmes kiyoshi(ppap)\n\treturn\n#global\nmain\n```\n```cpp:HSPmist/ppapM.hsp\n#runtime \"hsp3cl\"\n#include \"zundokoM.as\"\n\n#module Program\n\t#deffunc main\n\t\tnew_zundoko zd\n\t\tmes kiyoshi(zd)\n\t\t\n\t\twords=\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"\n\t\tfin=\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\"\n\t\tptn=0,1,3,2,4\n\t\tnew_zundoko ppap,words,fin,ptn,1,{\"\n\t\t\t#deffunc infunc int no,str _word\n\t\t\t\tw=0,200,500,800,200\n\t\t\t\twait w(no)/10\n\t\t\t\tword=_word\n\t\t\t\trepeat strlen(word)\n\t\t\t\t\tputchar peek(word,cnt)\n\t\t\t\tloop\n\t\t\treturn\n\t\t\"}\n\t\tmes kiyoshi(ppap)\n\treturn\n#global\nmain\n```\n```cl:CommonLisp/ppap.lisp\n(load \"zundoko\")\n\n(defparameter zd (make-instance 'zundoko))\n(format t \"~a~%\" (kiyoshi zd))\n\n(defparameter ppap (make-instance 'zundoko\n\t:words '(\"~%\" \"\u30da\u30f3\" \"\u30a2\u30c3\u30dd\u30fc\" \"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\" \"\u30da\u30f3!\")\n\t:fin \"\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\"\n\t:ptn '(0 2 1 3 2)\n\t:dbl t\n\t:infunc #'(lambda(no word)\n\t\t(sleep (elt '(0 0.2 0.5 0.8 0.2) no))\n\t\t(format t word)\n\t)\n))\n(format t \"~%~a~%\" (kiyoshi ppap))\n```\n```cpp:C++/ppap.cpp\n#include <iostream>\n#include <thread>\n#include \"zundoko.cpp\"\n\nvoid main(){\n\tusing namespace std;\n\tzundoko zd;\n\tcout<<zd.kiyoshi()<<endl;\n\n\tzundoko ppap(\n\t\t{\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"},\n\t\t\"\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3! \u30d4\u30b3!\",\n\t\t{0,1,3,2,4},\n\t\tfalse,[](int no,string word){\n\t\t\tthis_thread::sleep_for(chrono::milliseconds([]()->vector<int>{return {0,200,500,800,200};}()[no]));\n\t\t\tcout<<word<<flush;\n\t\t}\n\t);\n\tcout<<ppap.kiyoshi()<<endl;\n}\n```\n```d:D\u8a00\u8a9e/ppap.d\nimport std.stdio;\nimport zundoko;\nimport core.thread;\n\nvoid main(){\n\tauto zd=new zundoko();\n\twriteln(zd.kiyoshi());\n\n\tauto ppap=new zundoko(\n        [\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"],\n\t\t\"\\n\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3\uff01 \u30d4\u30b3\uff01\",\n\t\t[0,1,3,2,4],\n\t\tfalse,\n\t\tdelegate(no,word){\n\t\t\tThread.sleep(dur!\"msecs\"([0,200,500,800,200][no]));\n\t\t\twrite(word).flush();\n\t\t}\n\t);\n\twriteln(ppap.kiyoshi());\n}\n```\n```py3:Python/ppap.py\nimport time\nimport zundoko\n\nif __name__==\"__main__\":\n\tzd=zundoko.zundoko()\n\tprint(zd.kiyoshi())\n\n\tdef infunc(no,word):\n\t\ttime.sleep(list([0,0.2,0.5,0.8,0.2])[no])\n\t\tprint(word,flush=True,end=\"\")\n\tppap=zundoko.zundoko(\n        [\"\\n\",\"\u30da\u30f3\",\"\u30a2\u30c3\u30dd\u30fc\",\"\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\",\"\u30da\u30f3!\"],\n        \"\\n\\n\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3\uff01 \u30d4\u30b3\uff01\",\n\t\t[0,1,3,2,4],\n\t\tFalse,\n\t\tinfunc\n\t)\n\tprint(ppap.kiyoshi())\n```\n\n# zundoko Class & kiyoshi Function\n```js:JavaScript/zundoko.js\n\"use strict\";\n\nmodule.exports=(function(){\n\tconst\n\t\twords=Symbol(),\n\t\tfin=Symbol(),\n\t\tptn=Symbol(),\n\t\tdbl=Symbol(),\n\t\tinfunc=Symbol(),\n\t\tstk=Symbol();\n\n\tfunction zundoko(\n\t\t_words=[\"\u30ba\u30f3\",\"\u30c9\u30b3\"],\n\t\t_fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n\t\t_ptn=[0,0,0,0,1],\n\t\t_dbl=false,\n\t\t_infunc=(no,word)=>process.stdout.write(word)\n\t){\n\t\tthis[words]=_words;\n\t\tthis[fin]=_fin;\n\t\tthis[ptn]=_ptn;\n\t\tthis[dbl]=_dbl;\n\t\tthis[infunc]=_infunc;\n\t\tthis[stk]=new Array(this[ptn].length);\n\t}\n\n\tzundoko.prototype.kiyoshi=function(){\n\t\tfor(;;){\n\t\t\tlet zd=Math.floor(Math.random()*this[words].length);\n\t\t\tthis[infunc](zd,this[words][zd]);\n\t\t\tthis[stk].push(this[words][zd]);\n\t\t\tlet stk0=this[stk].shift();\n\t\t\tif((this[dbl]?true:stk0!=this[words][this[ptn][0]]) && this[stk].join()==this[ptn].map(val=>this[words][val]).join()){\n\t\t\t\treturn this[fin];\n\t\t\t}\n\t\t}\n\t};\n\n\tzundoko.prototype.kiyoshiP=function(){\n\t\treturn new Promise(resolve=>{\n\t\t\tconst g=(function*(){\n\t\t\t\tfor(;;){\n\t\t\t\t\tlet zd=Math.floor(Math.random()*Me[words].length);\n\t\t\t\t\tyield (Me[infunc](zd,Me[words][zd])).then(()=>g.next());\n\t\t\t\t\tMe[stk].push(Me[words][zd]);\n\t\t\t\t\tlet stk0=Me[stk].shift();\n\t\t\t\t\tif((Me[dbl]?true:stk0!=Me[words][Me[ptn][0]]) && Me[stk].join()==Me[ptn].map(val=>Me[words][val]).join()){\n\t\t\t\t\t\treturn resolve(Me[fin]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t\tvar Me=this;\n\t\t\tg.next();\n\t\t});\n\t};\n\n\treturn zundoko;\n})();\n```\n```ts:TypeScript/zundokoT.ts\nexport class zundoko{\n\tprivate words:string[];\n\tprivate fin:string;\n\tprivate ptn:number[];\n\tprivate dbl:boolean;\n\tprivate infunc:(number,string)=>any;\n\tprivate stk:string[];\n\n\tconstructor(\n\t\twords:string[]=[\"\u30ba\u30f3\",\"\u30c9\u30b3\"],\n\t\tfin:string=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n\t\tptn:number[]=[0,0,0,0,1],\n\t\tdbl:boolean=false,\n\t\tinfunc:(number,string)=>any=(no,word)=>process.stdout.write(word)\n\t){\n\t\tthis.words=words;\n\t\tthis.fin=fin;\n\t\tthis.ptn=ptn;\n\t\tthis.dbl=dbl;\n\t\tthis.infunc=infunc;\n\t\tthis.stk=new Array(ptn.length);\n\t}\n\n\tkiyoshi():string{\n\t\tfor(;;){\n\t\t\tlet zd:number=Math.floor(Math.random()*this.words.length);\n\t\t\tthis.infunc(zd,this.words[zd]);\n\t\t\tthis.stk.push(this.words[zd]);\n\t\t\tlet stk0:string=this.stk.shift();\n\t\t\tif((this.dbl?true:stk0!=this.words[this.ptn[0]]) && this.stk.join()==this.ptn.map(val=>this.words[val]).join()){\n\t\t\t\treturn this.fin;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync kiyoshiP():Promise<string>{\n\t\tfor(;;){\n\t\t\tlet zd:number=Math.floor(Math.random()*this.words.length);\n\t\t\tawait this.infunc(zd,this.words[zd]);\n\t\t\tthis.stk.push(this.words[zd]);\n\t\t\tlet stk0:string=this.stk.shift();\n\t\t\tif((this.dbl?true:stk0!=this.words[this.ptn[0]]) && this.stk.join()==this.ptn.map(val=>this.words[val]).join()){\n\t\t\t\treturn this.fin;\n\t\t\t}\n\t\t}\n\t}\n};\n```\n```vbnet:VB.net/zundoko.vb\nOption Strict On\n\nImports System\nImports System.Console\nImports System.Collections.Generic\nImports System.Threading.Tasks\n\nClass zundoko\n\tDim rand As New Random()\n\tDim words As String()\n\tDim fin As String\n\tDim ptn As Integer()\n\tDim dbl As Boolean\n\tDim infunc As Action(Of Integer,String)\n\tDim intask As Func(Of Integer,String,Task)\n\tDim stk As New LinkedList(Of String)()\n\tDim setStk As Action=Sub()Me.stk=New LinkedList(Of String)(New String(ptn.Length-1){})\n\n\tSub New(Optional words As String()=Nothing,\n\t\t\tOptional fin As String=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n\t\t\tOptional ptn As Integer()=Nothing,\n\t\t\tOptional dbl As Boolean=False\n\t)\n\t\tMe.words=if(IsNothing(words),{\"\u30ba\u30f3\",\"\u30c9\u30b3\"},words)\n\t\tMe.fin=fin\n\t\tMe.ptn=if(IsNothing(ptn),{0,0,0,0,1},ptn)\n\t\tMe.dbl=dbl\n\t\tMe.infunc=Sub(no,word)Write(word)\n\t\tsetStk()\n\tEnd Sub\n\n\tSub New(words As String(),fin As String,ptn As Integer(),dbl As Boolean,infunc As Action(Of Integer,String))\n\t\tMe.words=words\n\t\tMe.fin=fin\n\t\tMe.ptn=ptn\n\t\tMe.dbl=dbl\n\t\tMe.infunc=infunc\n\t\tsetStk()\n\tEnd Sub\n\n\tSub New(words As String(),fin As String,ptn As Integer(),dbl As Boolean,intask As Func(Of Integer,String,Task))\n\t\tMe.words=words\n\t\tMe.fin=fin\n\t\tMe.ptn=ptn\n\t\tMe.dbl=dbl\n\t\tMe.intask=intask\n\t\tsetStk()\n\tEnd Sub\n\n\tFunction kiyoshi() As String\n\t\tDo\n\t\t\tDim zd As Integer=rand.Next(words.Length)\n\t\t\tinfunc(zd,words(zd))\n\t\t\tstk.AddLast(words(zd))\n\t\t\tDim stk0 As String=stk.First.Value\n\t\t\tstk.RemoveFirst()\n\t\t\tIf if(dbl,True,stk0<>words(ptn(0))) And String.Join(\"\",stk)=String.Join(\"\",Array.ConvertAll(ptn,Function(val) words(val))) Then\n\t\t\t\tReturn fin\n\t\t\tEnd If\n\t\tLoop\n\tEnd Function\n\n\tAsync Function kiyoshiT() As Task(Of String)\n\t\tDo\n\t\t\tDim zd As Integer=rand.Next(words.Length)\n\t\t\tAwait intask(zd,words(zd))\n\t\t\tstk.AddLast(words(zd))\n\t\t\tDim stk0 As String=stk.First.Value\n\t\t\tstk.RemoveFirst()\n\t\t\tIf if(dbl,True,stk0<>words(ptn(0))) And String.Join(\"\",stk)=String.Join(\"\",Array.ConvertAll(ptn,Function(val) words(val))) Then\n\t\t\t\tReturn fin\n\t\t\tEnd If\n\t\tLoop\n\tEnd Function\nEnd Class\n```\n```csharp:C#/zundoko.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nclass zundoko{\n\tRandom rand=new Random();\n\tstring[] words;\n\tstring fin;\n\tint[] ptn;\n\tbool dbl;\n\tAction<int,string> infunc ;\n\tFunc<int,string,Task> intask ;\n\tLinkedList<string> stk=new LinkedList<string>();\n\tvoid setStk(){\n\t\tstk=new LinkedList<string>(new string[ptn.Length]);\n\t}\n\n\tpublic zundoko(\n\t\t\tstring[] words=null,\n\t\t\tstring fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n\t\t\tint[] ptn=null,\n\t\t\tbool dbl=false\n\t){\n\t\tthis.words=words==null?(new string[]{\"\u30ba\u30f3\",\"\u30c9\u30b3\"}):(string[])words;\n\t\tthis.fin=fin;\n\t\tthis.ptn=ptn==null?new int[]{0,0,0,0,1}:(int[])ptn;\n\t\tthis.dbl=dbl;\n\t\tthis.infunc=(no,word)=>Console.Write(word);\n\t\tsetStk();\n\t}\n\n\tpublic zundoko(string[] words,string fin,int[] ptn,bool dbl,Action<int,string> infunc){\n\t\tthis.words=words;\n\t\tthis.fin=fin;\n\t\tthis.ptn=ptn;\n\t\tthis.dbl=dbl;\n\t\tthis.infunc=infunc;\n\t\tsetStk();\n\t}\n\n\tpublic zundoko(string[] words,string fin,int[] ptn,bool dbl,Func<int,string,Task> intask){\n\t\tthis.words=words;\n\t\tthis.fin=fin;\n\t\tthis.ptn=ptn;\n\t\tthis.dbl=dbl;\n\t\tthis.intask=intask;\n\t\tsetStk();\n\t}\n\n\tpublic string kiyoshi(){\n\t\tfor(;;){\n\t\t\tint zd=rand.Next(words.Length);\n\t\t\tinfunc(zd,words[zd]);\n\t\t\tstk.AddLast(words[zd]);\n\t\t\tstring stk0=stk.First.Value;\n\t\t\tstk.RemoveFirst();\n\t\t\tif((dbl?true:stk0!=words[ptn[0]]) && string.Join(\"\",stk)==string.Join(\"\",Array.ConvertAll(ptn,val=>words[val]))){\n\t\t\t\treturn fin;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async Task<string> kiyoshiT(){\n\t\tfor(;;){\n\t\t\tint zd =rand.Next(words.Length);\n\t\t\tawait intask(zd,words[zd]);\n\t\t\tstk.AddLast(words[zd]);\n\t\t\tstring stk0=stk.First.Value;\n\t\t\tstk.RemoveFirst();\n\t\t\tif((dbl?true:stk0!=words[ptn[0]]) && string.Join(\"\",stk)==string.Join(\"\",Array.ConvertAll(ptn,val=>words[val]))){\n\t\t\t\treturn fin;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n```cpp:HSP/zundokoL.as\nrandomize\nzundoko_default_load\n#module zundoko_default\n\t#uselib \"msvcrt\"\n\t#func printf \"printf\" str\n\n\t#deffunc zundoko_default_load\n\t\twords=\"\u30ba\u30f3\",\"\u30c9\u30b3\"\n\t\tfin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\"\n\t\tptn=0,0,0,0,1\n\t\tdbl=0\n\t\tinfunc=*infunc_default_infunc\n\treturn\n\n*infunc_default_infunc\n\t\tinfunc_args no,word\n\t\tprintf word\n\treturn\n#global\n\n#module zundoko index,words,fin,ptn,dbl,infunc\n\t#define global new_zundoko(%1,\t\\\n\t\t%2=words@zundoko_default,\t\\\n\t\t%3=fin@zundoko_default,\t\t\\\n\t\t%4=ptn@zundoko_default,\t\t\\\n\t\t%5=dbl@zundoko_default,\t\t\\\n\t\t%6=infunc@zundoko_default\t\\\n\t) newmod %1,zundoko,%2,%3,%4,%5,%6\n\tzundoko_length=0\n\n\t#modinit array _words,str _fin,array _ptn,int _dbl,var _infunc\n\t\tsdim words,,length(_words)\n\t\trepeat length(_words)\n\t\t\twords(cnt)=_words(cnt)\n\t\tloop\n\t\tfin=_fin\n\t\tsdim ptn,,length(_ptn)\n\t\trepeat length(_ptn)\n\t\t\tptn(cnt)=_ptn(cnt)\n\t\tloop\n\t\tdbl=_dbl\n\t\tinfunc=_infunc\n\t\tindex=zundoko_length\n\t\tzundoko_length++\n\t\tsdim stk,,length(ptn)\n\treturn\n\n\t#modcfunc kiyoshi\n\t\trepeat\n\t\t\tzd=rnd(length(words))\n\t\t\tno=zd\n\t\t\tword=words(zd)\n\t\t\tgosub infunc\n\t\t\tstk0=stk(0)\n\t\t\trepeat length(stk)-1\n\t\t\t\tstk(cnt)=stk(cnt+1)\n\t\t\tloop\n\t\t\tstk(length(stk)-1)=words(zd)\n\t\t\tdouble_check=stk0!=words(ptn(0))\n\t\t\tif dbl:double_check=1\n\t\t\tif double_check {\n\t\t\t\tforeach stk\n\t\t\t\t\tif stk(cnt)!=words(ptn(cnt)){\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif cnt=length(stk)-1{\n\t\t\t\t\t\treturn fin\n\t\t\t\t\t}\n\t\t\t\tloop\n\t\t\t}\n\t\tloop\n\n\t#deffunc infunc_args var _no, var _word\n\t\t_no=int(no)\n\t\t_word=str(word)\n\treturn\n#global\n```\n```cpp:HSPmist/zundokoM.as\n#include \"mist.hsp\"\n#uselib \"msvcrt\"\n#func putchar \"putchar\" int\nputchar 8\nmstOpenHspLib\nmstCaptDll\nrandomize\n\nzundoko_default_load\n#module zundoko_default\n\t#deffunc zundoko_default_load\n\t\twords=\"\u30ba\u30f3\",\"\u30c9\u30b3\"\n\t\tfin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\"\n\t\tptn=0,0,0,0,1\n\t\tdbl=0\n\t\tinfunc={\"\n\t\t    #deffunc infunc int no,str _word\n\t\t\t\tword=_word\n\t\t\t\trepeat strlen(word)\n\t\t\t\t\tputchar peek(word,cnt)\n\t\t\t\tloop\n\t\t\treturn\n\t\t\"}\n\treturn\n#global\n\n#module zundoko index,words,fin,ptn,dbl,infunc\n\t#define global new_zundoko(%1,\t\\\n\t\t%2=words@zundoko_default,\t\\\n\t\t%3=fin@zundoko_default,\t\t\\\n\t\t%4=ptn@zundoko_default,\t\t\\\n\t\t%5=dbl@zundoko_default,\t\t\\\n\t\t%6=infunc@zundoko_default\t\\\n\t) newmod %1,zundoko,%2,%3,%4,%5,%6\n\tzundoko_length=0\n\n\t#modinit array _words,str _fin,array _ptn,int _dbl,str _infunc\n\t\tsdim words,,length(_words)\n\t\trepeat length(_words)\n\t\t\twords(cnt)=_words(cnt)\n\t\tloop\n\t\tfin=_fin\n\t\tsdim ptn,,length(_ptn)\n\t\trepeat length(_ptn)\n\t\t\tptn(cnt)=_ptn(cnt)\n\t\tloop\n\t\tdbl=_dbl\n\t\tinfunc=_infunc\n\t\tindex=zundoko_length\n\t\tzundoko_length++\n\t\tsdim stk,,length(ptn)\n\treturn\n\n\t#modcfunc kiyoshi\n\t\trepeat\n\t\t\tzd=rnd(length(words))\n\t\t\tmstCompile infunc\n\t\t\tmstCall \"infunc\",zd,words(zd)\n\t\t\tstk0=stk(0)\n\t\t\trepeat length(stk)-1\n\t\t\t\tstk(cnt)=stk(cnt+1)\n\t\t\tloop\n\t\t\tstk(length(stk)-1)=words(zd)\n\t\t\tdouble_check=stk0!=words(ptn(0))\n\t\t\tif dbl:double_check=1\n\t\t\tif double_check {\n\t\t\t\tforeach stk\n\t\t\t\t\tif stk(cnt)!=words(ptn(cnt)){\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif cnt=length(stk)-1{\n\t\t\t\t\t\treturn fin\n\t\t\t\t\t}\n\t\t\t\tloop\n\t\t\t}\n\t\tloop\n#global\n```\n```cl:CommonLisp/zundoko.lisp\n(defclass zundoko()(\n\t(words\n\t\t:initarg :words\n\t\t:initform '(\"\u30ba\u30f3\" \"\u30c9\u30b3\")\n\t)\n\t(fin\n\t\t:initarg :fin\n\t\t:initform \"\u30ad\u30fb\u30e8\u30fb\u30b7!\"\n\t)\n\t(ptn\n\t\t:initarg :ptn\n\t\t:initform '(0 0 0 0 1)\n\t)\n\t(dbl\n\t\t:initarg :dbl\n\t\t:initform nil\n\t)\n\t(infunc\n\t\t:initarg :infunc\n\t\t:initform #'(lambda(no word)(format t word))\n\t)\n))\n\n(defmethod kiyoshi((me zundoko))\n\t(let(\n\t\t(*random-state* (make-random-state t))\n\t\t(words (slot-value me 'words))\n\t\t(fin (slot-value me 'fin))\n\t\t(ptn (slot-value me 'ptn))\n\t\t(dbl (slot-value me 'dbl))\n\t\t(infunc (slot-value me 'infunc))\n\t)(let(\n\t\t(stk (mapcar #'(lambda(val)\"\") ptn))\n\t)\n\t\t(defun fact(stk)\n\t\t\t(let(\n\t\t\t\t(zd(random(length words)))\n\t\t\t)(let(\n\t\t\t\t(stkzd (append (rest stk) `(,(elt words zd))))\n\t\t\t)\n\t\t\t\t(funcall infunc zd (elt words zd))\n\t\t\t\t(if (and\n\t\t\t\t\t(if dbl t (string/= (first stk) (first words)))\n\t\t\t\t\t(equal stkzd (mapcar #'(lambda(val)(elt words val)) ptn))\n\t\t\t\t)\n\t\t\t\t\tfin\n\t\t\t\t\t(fact stkzd)\n\t\t\t\t)\n\t\t\t))\n\t\t)\n\t\t(fact stk)\n\t))\n)\n```\n```cpp:C++/zundoko.cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <functional>\n#include <random>\n\nclass zundoko{\nprivate:\n\tstd::random_device rnd;\n\tstd::uniform_int_distribution<int> words_range;\n\tstd::vector<std::string> words;\n\tstd::string fin;\n\tstd::vector<int> ptn;\n\tbool dbl;\n\tstd::function<void(int,std::string)> infunc;\n\tstd::deque<std::string> stk;\n\npublic:\n\tzundoko(\n\t\tstd::vector<std::string> words={\"\u30ba\u30f3\",\"\u30c9\u30b3\"},\n\t\tstd::string fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n\t\tstd::vector<int> ptn={0,0,0,0,1},\n\t\tbool dbl=false,\n\t\tstd::function<void(int,std::string)> infunc=[](int no,std::string word){std::cout<<word<<std::flush;}\n\t){\n\t\tthis->words=words;\n\t\tthis->fin=fin;\n\t\tthis->ptn=ptn;\n\t\tthis->dbl=dbl;\n\t\tthis->infunc=infunc;\n\t\tthis->stk.resize(ptn.size());\n\t\tstd::uniform_int_distribution<int> words_range(0,words.size()-1);\n\t\tthis->words_range=words_range;\n\t}\n\n\tstd::string kiyoshi(){\n\t\tfor(;;){\n\t\t\tint zd=words_range(rnd);\n\t\t\tinfunc(zd,words[zd]);\n\t\t\tstd::string stk0=stk.front();\n\t\t\tstk.pop_front();\n\t\t\tstk.push_back(words[zd]);\n\t\t\tstd::deque<std::string> word_ptn;\n\t\t\tfor(int i=0;i<ptn.size();i++){\n\t\t\t\tword_ptn.push_back(words[ptn[i]]);\n\t\t\t}\n\t\t\tif(dbl?true:stk0!=stk.front() && stk==word_ptn){\n\t\t\t\treturn fin;\n\t\t\t}\n\t\t}\n\t}\n};\n```\n```d:D\u8a00\u8a9e/zundoko.d\nmodule zundoko;\n\nimport std.stdio;\nimport std.string;\nimport std.array;\nimport std.random;\nimport std.conv;\nimport std.algorithm;\nimport std.windows.charset;\n\nstatic public class zundoko{\nprivate:\n\tstring[] words;\n\tstring fin;\n\tint[] ptn;\n\tbool dbl;\n\tvoid delegate(int,string) infunc;\n\tstring[] stk;\n\npublic:\n\tthis(\n\t\tstring[] words=[\"\u30ba\u30f3\",\"\u30c9\u30b3\"],\n\t\tstring fin=\"\u30ad\u30fb\u30e8\u30fb\u30b7!\",\n\t\tint[] ptn=[0,0,0,0,1],\n\t\tbool dbl=false,\n\t\tvoid delegate(int,string) infunc=null\n\t){\n\t\tthis.words=array(map!(word=>to!string(toMBSz(word)))(words));\n\t\tthis.fin=to!string(toMBSz(fin));\n\t\tthis.ptn=ptn;\n\t\tthis.dbl=dbl;\n\t\tthis.infunc=infunc==null?(no,word)=>write(word):infunc;\n\t\tthis.stk=new string[ptn.length];\n\t}\n\n\tstring kiyoshi(){\n\t\tfor(;;){\n\t\t\tint zd=uniform(0,words.length);\n\t\t\tinfunc(zd,words[zd]);\n\t\t\tstring stk0=stk.front;\n\t\t\tstk.popFront();\n\t\t\tstk~=words[zd];\n\t\t\tif(dbl?true:stk0!=stk.front && stk==array(map!(val=>words[val])(ptn))){\n\t\t\t\treturn fin;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n```py3:Python/zundoko.py\nimport random\n\nclass zundoko:\n\tdef __init__(self,\n\t\twords=[\"\u30ba\u30f3\",\"\u30c9\u30b3\"],\n\t\tfin=\"\u30ad\u30fb\u30e8\u30fb\u30b7\u30fb!\",\n\t\tptn=[0,0,0,0,1],\n\t\tdbl=False,\n\t\tinfunc=(lambda no,word:print(word,end=\"\"))\n\t):\n\t\tself.__words=words\n\t\tself.__fin=fin\n\t\tself.__ptn=ptn\n\t\tself.__dbl=dbl\n\t\tself.__infunc=infunc\n\t\tself.__stk=[\"\"]*len(ptn)\n\n\tdef kiyoshi(self):\n\t\twhile True:\n\t\t\tzd=random.randint(0,len(self.__words)-1)\n\t\t\tself.__infunc(zd,self.__words[zd])\n\t\t\tself.__stk.append(self.__words[zd])\n\t\t\tstk0=self.__stk.pop(0)\n\t\t\tif True if self.__dbl else stk0!=self.__words[self.__ptn[0]] and self.__stk==list(map(lambda val:self.__words[val],self.__ptn)):\n\t\t\t\treturn self.__fin\n```\n\n# \u3042\u3068\u304c\u304d\n * JavaScript\u306ePromise\u5468\u308a\u306f\u307e\u3060\u8272\u3005\u554f\u984c\u3042\u308a\u3002  \n   kiyoshiP\u306f\u6a19\u6e96\u51fa\u529b\u4ee5\u5916\u306e\u52d5\u4f5c\u304c\u540c\u671f\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5185\u90e8\u3067\u306f\u65e2\u306b\u8a08\u7b97\u304c\u5b8c\u4e86\u3057\u3066\u3057\u307e\u3046\u3002  \n   kiyoshiP2\u306f\u7d20\u76f4\u306b\u518d\u5e30\u3067\u30eb\u30fc\u30d7\u3055\u305b\u3066\u307f\u305f\u3051\u3069\u3001\u6700\u5f8c\u306eresolve\u304c\u3086\u304f\u3048\u3075\u3081\u3044\u306b\u306a\u3063\u3066\u7d50\u5c40\u3055\u3089\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3057\u3066\u308b\u3002  \n    * Generator\u6df7\u305c\u305f\u3053\u3068\u3067\u6539\u5584\u3002Promise\u306e\u4e2d\u306bGenerator\u3092\u9589\u3058\u8fbc\u3081\u3066\u308b\u3002\n * Simbol\u3067\u7591\u4f3cPrivate\u306b\u3057\u3066\u307f\u308b\u3002WeakMap\u306e\u65b9\u304c\u3088\u308a\u6b63\u78ba\u306aPrivate\u3068\u306f\u3044\u3046\u3051\u3069\u3001\u6587\u5b57\u304c\u3046\u308b\u3055\u3059\u304e\u308b\u3002\n * TypeScript\u7248\u4f5c\u6210\u3002  \n   Async/Await\u3067\u30b7\u30f3\u30d7\u30eb\u304b\u3064\u4e0a\u8a18\u3092\u6539\u5584\u3057\u305f\u3082\u306e\u306b\u3002  \n   \u30af\u30e9\u30b9\u5909\u6570\u304c[\u306a\u3093\u3061\u3083\u3063\u3066private](http://qiita.com/yosgspec/items/048f28bb51d2e26ed2c5)\u3067this\u307e\u307f\u308c\u3002\n * VB\u306fAsync/Await\u4e57\u3063\u3051\u305f\u3060\u3051\u306e\u624b\u629c\u304d (\u30a8\u30e9\u30fc\u3067\u7d50\u69cb\u60a9\u3093\u3067\u305f)\u3002  \n   C#\u3058\u3083\u306a\u304f\u3066VB\u306a\u306e\u306f\u5358\u7d14\u306a\u597d\u307f\u3002\n     * C#\u306b\u3082\u79fb\u690d\u3002\n     * C#\u306e\u3061\u3087\u3044\u3061\u3087\u3044\u304a\u5805\u3044\u3068\u3053\u308d\u304c\u82e6\u624b\u3060\u306a\u3041\u3068\u3002  \n       VB\u306b\u6bd4\u3079\u3066\u5197\u9577\u3055\u306f\u306a\u3044\u304b\u3089\u66f8\u304d\u3084\u3059\u3044\u90e8\u5206\u3082\u591a\u3044\u3051\u308c\u3069\u3002\n * HSP\u3068CommonLisp\u306f\u975e\u540c\u671f\u5bfe\u5fdc\u306a\u3057\u3002  \n * <s>HSP\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u6295\u3052\u3089\u308c\u306a\u3044\u306e\u3067\u547c\u3070\u308c\u308b\u95a2\u6570\u3092\u66f8\u304f\u4ed5\u69d8\u3002  \n   \u306a\u306e\u3067\u95a2\u6570\u4f7f\u7528\u30fb\u672a\u4f7f\u7528\u7248\u3067\u30d5\u30a1\u30a4\u30eb2\u7a2e\u985e\u3002</s>\u4e0b\u8a18\u306b\u7f6e\u63db\u3002\n    * HSP mist\u3092\u7528\u3044\u3066\u672c\u683c\u7684\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u63a1\u7528\u3057\u305f\u3053\u3068\u3068\u5171\u306b\u3001define\u3067\u5f15\u6570\u306e\u7701\u7565\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u6539\u826f\u3057\u305f\u3002\n    * HSP\u306egosub\u306a\u3093\u3066\u4f7f\u3063\u3066\u3053\u3068\u306a\u304b\u3063\u305f\u3051\u3069\u3001\u30e9\u30d9\u30eb\u306f\u5909\u6570\u306b\u7a81\u3063\u8fbc\u3093\u3067\u52d5\u304b\u305b\u308b\u306e\u3067\u3042\u3068\u3067\u95a2\u6570\u3092\u547c\u3070\u305b\u308b\u306e\u306b\u304b\u306a\u308a\u90fd\u5408\u304c\u826f\u3044\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u305f\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001\u5f15\u6570\u3092\u6295\u3052\u308b\u3053\u3068\u3082\u8fd4\u308a\u5024\u3092\u8cb0\u3046\u3053\u3068\u3082\u3067\u304d\u306a\u3044\u3051\u308c\u3069\u3002\u305d\u3053\u306f\u3001\u305d\u308c\u7528\u306b\u30b2\u30c3\u30bf\u30fc\u30bb\u30c3\u30bf\u30fc\u3092\u4f5c\u3063\u3066\u5bfe\u5fdc\u304b\u306a\u3041\u3002\n * HSP\u306e\u30b3\u30fc\u30c9\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u304f\u3060\u3055\u3044\u3002\n * CommonLisp\u306eSleep\u306f\u691c\u7d22\u3057\u3066\u3082\u5168\u7136\u51fa\u3066\u3053\u306a\u304f\u3066\u4f7f\u3048\u308b\u304b\u4e0d\u5b89\u306b\u306a\u3063\u305f\u8a71\u3002\n * D\u8a00\u8a9e\u306fDelegate\u306e\u4ee3\u5165\u5468\u308a\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u304f\u3066\u51c4\u304f\u60a9\u3093\u3060\u3002  \n   \u3042\u3068\u306fmap!\u95a2\u6570\u304c\u3046\u307e\u304f\u52d5\u304b\u306a\u304f\u3066\u81ea\u4f5c\u3057\u305f\u3053\u3068(\u6539\u5584\u6e08\u307f)\u3084\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u304c\u3046\u307e\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u3068\u304b\u3001Shift-JIS\u4f7f\u3063\u3066\u3082UTF8\u4f7f\u3063\u3066\u3082\u6587\u5b57\u5316\u3051\u3057\u305f\u308a\u3068\u8272\u3005\u3042\u3063\u305f\u3002  \n   \u305d\u308c\u3067\u3082\u3001D\u8a00\u8a9e\u81ea\u4f53\u306f\u7d50\u69cb\u66f8\u304d\u3084\u3059\u305d\u3046\u306a\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u65e5\u672c\u8a9e\u8cc7\u6599\u304c\u3082\u3046\u5c11\u3057\u5897\u3048\u3066\u304f\u308c\u305f\u3089\u5b09\u3057\u3044\u306a\u3068\u601d\u3046\u3002\u3042\u3068\u306f\u6587\u5b57\u30b3\u30fc\u30c9\u5bfe\u5fdc\u4f55\u3068\u304b\u3057\u3066\u307b\u3057\u3044\u3002\n\t* D\u8a00\u8a9e\u306e\u6a19\u6e96\u51fa\u529b\u306fsleep\u3059\u308b\u3068\u6539\u884c\u3059\u308b\u307e\u3067\u8868\u793a\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u7e26\u306bPPAP\u3057\u3066\u307f\u305f\u3002\n\t    * \u8272\u3005\u6539\u5584\u3002map!\u3082\u6a19\u6e96\u306e\u3082\u306e\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3002\u672c\u5f53\u306f\u6587\u5b57\u5217\u306b\u3057\u305f\u304b\u3063\u305f\u3051\u3069\u7121\u7406\u3060\u3063\u305f\u3002\n\t    * \u6a19\u6e96\u51fa\u529b\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u51e6\u7406\u3092\u8ffd\u52a0\u3002\u3053\u308c\u306b\u3088\u308a\u540c\u3058\u884c\u306b\u51fa\u529b\u3057\u3066\u3082\u5373\u6642\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n * C++\u8ffd\u52a0\u3002\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u4f55\u3068\u304b\u7121\u4e8b\u3067\u304d\u3066\u4e00\u5b89\u5fc3\u3002map\u3068\u304b\u306f\u306a\u3044\u306e\u3067\u8ae6\u3081\u3066foreach\u56de\u3059\u3002\n    * using namespace\u306e\u4ed5\u69d8\u304c\u89e3\u305b\u306a\u3044\u3002\u30af\u30e9\u30b9\u306e\u30b9\u30b3\u30fc\u30d7\u306b\u9069\u5fdc\u3067\u304d\u306a\u3044\u3063\u3066\u2026  \n      \u304a\u304b\u3052\u3067std\u307e\u307f\u308c\u306b\u3002\n    * \u914d\u5217\u3092\u5909\u6570\u306b\u523a\u3055\u306a\u3044\u3067\u4f7f\u3048\u308b\u3044\u3044\u65b9\u6cd5\u304c\u6b32\u3057\u3044\u3002\n * Python\u8ffd\u52a0\u3002Python\u306elambda\u306f\u9069\u5ea6\u306b\u4f7f\u3046\u3002\n\n\n# \u5b9f\u884c\u74b0\u5883\nNode.js:node v7.3.0\nTypeScript: tsc 1.8.10\nVB.net: vbc 14.0.1055\nC#: csc 4.6.1055.0\nHSP 3.32\nCommonLisp: clisp 2.49, sbcl 1.2.7\nC++: cl Version 18.00.40629 for x86\nD\u8a00\u8a9e: dmd v2.066.1\nPython:Python 3.6.0\n", "tags": ["JavaScript", "VB.Net", "common-lisp", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7", "dlang"]}