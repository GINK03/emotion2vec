{"tags": ["JavaScript", "WebAudioAPI", "getUserMedia", "wav"], "context": " More than 1 year has passed since last update.\n\n1. \u9332\u97f3\u3059\u308b\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u3063\u305f\u95a2\u6570 startRecording \u3092\u547c\u3076\u3068\n\u5909\u6570 audioData \u306b\u9332\u97f3\u3057\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n        var localMediaStream = null;\n        var localScriptProcessor = null;\n        audioData = []; // \u9332\u97f3\u30c7\u30fc\u30bf\n\n        var onAudioProcess = function(e) {\n          var input = e.inputBuffer.getChannelData(0);\n          var bufferData = new Float32Array(bufferSize);\n          for (var i = 0; i < bufferSize; i++) {\n            bufferData[i] = input[i];\n          }\n\n          audioData.push(bufferData);\n        };\n        var startRecording = function() {\n          navigator.getUserMedia(\n            { audio: true },\n            function(stream) {\n              localMediaStream = stream;\n              var scriptProcessor = audioContext.createScriptProcessor(bufferSize, 1, 1);\n              localScriptProcessor = scriptProcessor;\n              var mediastreamsource = audioContext.createMediaStreamSource(stream);\n              mediastreamsource.connect(scriptProcessor);\n              scriptProcessor.onaudioprocess = onAudioProcess;\n              scriptProcessor.connect(audioContext.destination);\n            },\n            function(e) {\n              console.log(e);\n            }\n          );\n        };\n\n\n2. WAV\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u3063\u305f\u95a2\u6570 exportWAV \u306b 1 \u3067\u4f5c\u6210\u3057\u305f audioData \u3092\u5f15\u6570\u306b\u308f\u305f\u3057\u3066\u547c\u3073\u51fa\u3059\u3068\nWAV\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u306e url \u3092\u8fd4\u5374\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n        var exportWAV = function(audioData) {\n\n          var encodeWAV = function(samples, sampleRate) {\n            var buffer = new ArrayBuffer(44 + samples.length * 2);\n            var view = new DataView(buffer);\n\n            var writeString = function(view, offset, string) {\n              for (var i = 0; i < string.length; i++){\n                view.setUint8(offset + i, string.charCodeAt(i));\n              }\n            };\n\n            var floatTo16BitPCM = function(output, offset, input) {\n              for (var i = 0; i < input.length; i++, offset += 2){\n                var s = Math.max(-1, Math.min(1, input[i]));\n                output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n              }\n            };\n\n            writeString(view, 0, 'RIFF');  // RIFF\u30d8\u30c3\u30c0\n            view.setUint32(4, 32 + samples.length * 2, true); // \u3053\u308c\u4ee5\u964d\u306e\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\n            writeString(view, 8, 'WAVE'); // WAVE\u30d8\u30c3\u30c0\n            writeString(view, 12, 'fmt '); // fmt\u30c1\u30e3\u30f3\u30af\n            view.setUint32(16, 16, true); // fmt\u30c1\u30e3\u30f3\u30af\u306e\u30d0\u30a4\u30c8\u6570\n            view.setUint16(20, 1, true); // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8ID\n            view.setUint16(22, 1, true); // \u30c1\u30e3\u30f3\u30cd\u30eb\u6570\n            view.setUint32(24, sampleRate, true); // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\n            view.setUint32(28, sampleRate * 2, true); // \u30c7\u30fc\u30bf\u901f\u5ea6\n            view.setUint16(32, 2, true); // \u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\n            view.setUint16(34, 16, true); // \u30b5\u30f3\u30d7\u30eb\u3042\u305f\u308a\u306e\u30d3\u30c3\u30c8\u6570\n            writeString(view, 36, 'data'); // data\u30c1\u30e3\u30f3\u30af\n            view.setUint32(40, samples.length * 2, true); // \u6ce2\u5f62\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u6570\n            floatTo16BitPCM(view, 44, samples); // \u6ce2\u5f62\u30c7\u30fc\u30bf\n\n            return view;\n          };\n\n          var mergeBuffers = function(audioData) {\n            var sampleLength = 0;\n            for (var i = 0; i < audioData.length; i++) {\n              sampleLength += audioData[i].length;\n            }\n            var samples = new Float32Array(sampleLength);\n            var sampleIdx = 0;\n            for (var i = 0; i < audioData.length; i++) {\n              for (var j = 0; j < audioData[i].length; j++) {\n                samples[sampleIdx] = audioData[i][j];\n                sampleIdx++;\n              }\n            }\n            return samples;\n          };\n\n          var dataview = encodeWAV(mergeBuffers(audioData), audioContext.sampleRate);\n          var audioBlob = new Blob([dataview], { type: 'audio/wav' });\n\n          var myURL = window.URL || window.webkitURL;\n          var url = myURL.createObjectURL(audioBlob);\n          return url;\n        };\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8\nhttp://www.kk.iij4u.or.jp/~kondo/wave/\n## 1. \u9332\u97f3\u3059\u308b\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u3063\u305f\u95a2\u6570 startRecording \u3092\u547c\u3076\u3068\n\u5909\u6570 audioData \u306b\u9332\u97f3\u3057\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```\n        var localMediaStream = null;\n        var localScriptProcessor = null;\n        audioData = []; // \u9332\u97f3\u30c7\u30fc\u30bf\n\n        var onAudioProcess = function(e) {\n          var input = e.inputBuffer.getChannelData(0);\n          var bufferData = new Float32Array(bufferSize);\n          for (var i = 0; i < bufferSize; i++) {\n            bufferData[i] = input[i];\n          }\n\n          audioData.push(bufferData);\n        };\n        var startRecording = function() {\n          navigator.getUserMedia(\n            { audio: true },\n            function(stream) {\n              localMediaStream = stream;\n              var scriptProcessor = audioContext.createScriptProcessor(bufferSize, 1, 1);\n              localScriptProcessor = scriptProcessor;\n              var mediastreamsource = audioContext.createMediaStreamSource(stream);\n              mediastreamsource.connect(scriptProcessor);\n              scriptProcessor.onaudioprocess = onAudioProcess;\n              scriptProcessor.connect(audioContext.destination);\n            },\n            function(e) {\n              console.log(e);\n            }\n          );\n        };\n```\n\n\n## 2. WAV\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u3063\u305f\u95a2\u6570 exportWAV \u306b 1 \u3067\u4f5c\u6210\u3057\u305f audioData \u3092\u5f15\u6570\u306b\u308f\u305f\u3057\u3066\u547c\u3073\u51fa\u3059\u3068\nWAV\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u306e url \u3092\u8fd4\u5374\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```\n        var exportWAV = function(audioData) {\n\n          var encodeWAV = function(samples, sampleRate) {\n            var buffer = new ArrayBuffer(44 + samples.length * 2);\n            var view = new DataView(buffer);\n\n            var writeString = function(view, offset, string) {\n              for (var i = 0; i < string.length; i++){\n                view.setUint8(offset + i, string.charCodeAt(i));\n              }\n            };\n\n            var floatTo16BitPCM = function(output, offset, input) {\n              for (var i = 0; i < input.length; i++, offset += 2){\n                var s = Math.max(-1, Math.min(1, input[i]));\n                output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n              }\n            };\n\n            writeString(view, 0, 'RIFF');  // RIFF\u30d8\u30c3\u30c0\n            view.setUint32(4, 32 + samples.length * 2, true); // \u3053\u308c\u4ee5\u964d\u306e\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\n            writeString(view, 8, 'WAVE'); // WAVE\u30d8\u30c3\u30c0\n            writeString(view, 12, 'fmt '); // fmt\u30c1\u30e3\u30f3\u30af\n            view.setUint32(16, 16, true); // fmt\u30c1\u30e3\u30f3\u30af\u306e\u30d0\u30a4\u30c8\u6570\n            view.setUint16(20, 1, true); // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8ID\n            view.setUint16(22, 1, true); // \u30c1\u30e3\u30f3\u30cd\u30eb\u6570\n            view.setUint32(24, sampleRate, true); // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\n            view.setUint32(28, sampleRate * 2, true); // \u30c7\u30fc\u30bf\u901f\u5ea6\n            view.setUint16(32, 2, true); // \u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\n            view.setUint16(34, 16, true); // \u30b5\u30f3\u30d7\u30eb\u3042\u305f\u308a\u306e\u30d3\u30c3\u30c8\u6570\n            writeString(view, 36, 'data'); // data\u30c1\u30e3\u30f3\u30af\n            view.setUint32(40, samples.length * 2, true); // \u6ce2\u5f62\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u6570\n            floatTo16BitPCM(view, 44, samples); // \u6ce2\u5f62\u30c7\u30fc\u30bf\n\n            return view;\n          };\n\n          var mergeBuffers = function(audioData) {\n            var sampleLength = 0;\n            for (var i = 0; i < audioData.length; i++) {\n              sampleLength += audioData[i].length;\n            }\n            var samples = new Float32Array(sampleLength);\n            var sampleIdx = 0;\n            for (var i = 0; i < audioData.length; i++) {\n              for (var j = 0; j < audioData[i].length; j++) {\n                samples[sampleIdx] = audioData[i][j];\n                sampleIdx++;\n              }\n            }\n            return samples;\n          };\n\n          var dataview = encodeWAV(mergeBuffers(audioData), audioContext.sampleRate);\n          var audioBlob = new Blob([dataview], { type: 'audio/wav' });\n\n          var myURL = window.URL || window.webkitURL;\n          var url = myURL.createObjectURL(audioBlob);\n          return url;\n        };\n```\n\n\n## \u53c2\u8003\u30b5\u30a4\u30c8\n\nhttp://www.kk.iij4u.or.jp/~kondo/wave/\n\n\n\n"}