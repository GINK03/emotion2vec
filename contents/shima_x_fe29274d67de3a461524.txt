{"context": " More than 1 year has passed since last update.\u30aa\u30fc\u30d7\u30f3\u30c7\u30fc\u30bf\u3067\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3059\u308b\u6e96\u5099\u3068\u3057\u3066\u56fd\u571f\u6570\u5024\u60c5\u5831\u3092\u4f7f\u3063\u3066python\u306efolium\u3067\u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\u66f8\u3044\u3066\u904a\u3093\u3067\u307f\u307e\u3057\u305f\u3002\n\n\u4f5c\u696d\u74b0\u5883\nMac OS X 10.10 Yosemite\n\n\u53c2\u8003\u60c5\u5831\n\nsinhrks\u3055\u3093\u306efolium\u95a2\u9023\u306e\u8a18\u4e8b\n\u56fd\u571f\u6570\u5024\u60c5\u5831\nmk-mode\u3055\u3093\u306e\u30dd\u30ea\u30b4\u30f3\u878d\u5408\u306e\u8a18\u4e8b\n\u7dcf\u52d9\u7701\u7d71\u8a08\u5c40 \u6a19\u6e96\u5730\u57df\u30b3\u30fc\u30c9\n\n\n\u3084\u3063\u305f\u3053\u3068\n\ngdal, pyshp\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u56fd\u571f\u6570\u5024\u60c5\u5831\u306eDL\u30da\u30fc\u30b8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u884c\u653f\u533a\u57df\u306eShapefile\u3092\u53d6\u5f97\nShapefile\u3092GeoJson\u306b\u5909\u63db\n\u30dd\u30ea\u30b4\u30f3\u878d\u5408(\u5404\u5730\u7269\u3092\u307e\u3068\u3081\u308b)\n\u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\u8272\u4ed8\u3051\u7528\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nGeoJson\u3068web\u4e0a\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u30d2\u30e2\u4ed8\u6e96\u5099\nMAP\u306e\u8868\u793a\n\n\ngdal\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nmac\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\nbrew install gdal\npip install GDAL={\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305fgdal\u306eversion}\npip install pyshp\n\n\u3053\u3053\u3067\u3001gdal\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u5408\u308f\u305b\u306a\u3044\u3068python\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\npyshp\u306fShapefile\u3092\u6271\u3046\u305f\u3081\u306b\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u884c\u653f\u533a\u57df\u306eshapefile\u3092\u53d6\u5f97\n\u884c\u653f\u533a\u57df\u304b\u3089\u90fd\u9053\u5e9c\u770c\u306e\u5404\u5e02\u533a\u753a\u6751\u306e\u5883\u754c\u30c7\u30fc\u30bf\u304cshapefile\u3068\u3057\u3066\u53d6\u5f97\u51fa\u6765\u307e\u3059\u3002\nshapefile\u3060\u3068\u6271\u3044\u3065\u3089\u3044\u306e\u3067GeoJson\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u5cf6\u6839\u770c\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u307f\u3066\u3044\u307e\u3059\u3002\n\nShapefile\u3092GeoJson\u306b\u5909\u63db\n\u4ee5\u4e0b\u306e\u3088\u3046\u306apython script\u3067\u5909\u63db\u3057\u307e\u3059\u3002\nimport os\nimport osgeo.ogr\nimport shapefile\n\n# Flash\u30e1\u30c3\u30bb\u30fc\u30b8\u7528\u306e\u95a2\u6570\ndef msg(s): print (s)\ndef dashes(): msg(40*'-')\ndef msgt(s): dashes(); msg(s); dashes()\ndef msgx(s): dashes(); msg('ERROR'); msg(s); dashes(); sys.exit(0)\n\n# shapefile->GeoJson\u95a2\u6570\ndef convert_shp_to_geojson(shape_fname):\n    if not os.path.isfile(shape_fname):\n        msgx('File not found: %s' % shape_fname)\n\n    # shapefile\u306e\u8aad\u307f\u8fbc\u307f\n    try:\n        reader = shapefile.Reader(shape_fname)\n    except:\n        msgx('Failed to read shapefile: %s' % shape_fname)\n\n    fields = reader.fields[1:]\n    field_names = [field[0].decode('shift-jis').encode('utf-8') for field in fields]\n\n    geom_dict = {}\n    uniq_key = 'N03_007'  # \u5730\u57df\u30b3\u30fc\u30c9\n    for sr in reader.shapeRecords():\n        encoded_sr_record = [r.decode('shift-jis').encode('utf-8') for r in sr.record]\n        atr = dict(zip(field_names, encoded_sr_record))\n        geom = sr.shape.__geo_interface__\n\n        # \u30dd\u30ea\u30b4\u30f3\u878d\u5408\n        # \u8af8\u5cf6\u306e\u3088\u3046\u306b\u540c\u4e00\u306e\u884c\u653f\u533a\u57df\u3067\u3082\u9818\u57df\u304c\u5206\u65ad\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\n        # type=MultiPolygon\u3068\u3057\u3066\u307e\u3068\u3081\u308b\n        if atr[uniq_key] in geom_dict.keys():\n            if len(geom_dict[atr[uniq_key]]['geometry']['coordinates']) == 1:\n                geom_dict[atr[uniq_key]]['geometry']['type'] = 'MultiPolygon'\n                tmp = tuple(geom_dict[atr[uniq_key]]['geometry']['coordinates'])\n                geom_dict[atr[uniq_key]]['geometry']['coordinates'] = []\n                geom_dict[atr[uniq_key]]['geometry']['coordinates'].append(tmp)\n            geom_dict[atr[uniq_key]]['geometry']['coordinates'].append(geom['coordinates'])\n        else:\n            geom['coordinates'] = list(geom['coordinates'])\n            geom_dict[atr[uniq_key]] = {'type':'Feature', 'id':atr[uniq_key], 'geometry':geom, 'properties':atr}\n\n    output_buffer = []\n    output_buffer_apd = output_buffer.append\n    for code, geo_data in geom_dict.items():\n        geo_data['geometry']['coordinates'] = tuple(geo_data['geometry']['coordinates'])\n        output_buffer_apd(geo_data)  # dict data\n\n    # GeoJSON file\u306e\u66f8\u304d\u51fa\u3057\n    out_fname = os.path.join(os.path.dirname(shape_fname), os.path.basename(shape_fname).replace('.shp', '.json'))\n\n    with open(out_fname, \"w\") as geojson:\n        json.dump({\"type\": \"FeatureCollection\", \"features\": output_buffer}, geojson, indent=2, ensure_ascii=False)\n    msg('file written: %s' % out_fname)\n    return out_fname\n\nGIS\u7cfb\u306e\u30c7\u30fc\u30bf\u306e\u6271\u3044\u65b9\u304c\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3081\u3061\u3083\u304f\u3061\u3083\u52b9\u7387\u306e\u60aa\u3044\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044\u305d\u3046\u306a\u6c17\u304c\u3057\u3066\u3044\u307e\u3059\u3002\u3002\n(\u30dd\u30ea\u30b4\u30f3\u878d\u5408\u3057\u3064\u3064Shapefile\u304b\u3089GeoJson\u306b\u4e00\u767a\u3067\u5909\u63db\u51fa\u6765\u308b\u30c4\u30fc\u30eb\u304f\u3089\u3044\u3069\u3053\u304b\u306b\u3042\u308a\u305d\u3046\u3067\u3059\u3057...)\nGeoJson\u3068\u3057\u3066\u4e0b\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n{\n  \"type\": \"FeatureCollection\", \n  \"features\": [\n    {\n      \"geometry\": {\n        \"type\": \"Polygon\", \n        \"coordinates\": [\n          [\n            [\n              131.91386401800003, \n              34.57300200100008\n            ], \n\n\n\u30dd\u30ea\u30b4\u30f3\u878d\u5408\n\u4e0a\u306e\u30b3\u30fc\u30c9\u4e2d\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\u30dd\u30ea\u30b4\u30f3\u878d\u5408\u3068\u306f\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u3001mk-mode\u3055\u3093\u306eBLOG\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\u8272\u4ed8\u3051\u7528\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nyahoo!\u3055\u3093\u306egeocities\u306e\u5e02\u533a\u753a\u6751\u60c5\u5831\u304b\u3089\u62dd\u501f\u81f4\u3057\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u3082\u5cf6\u6839\u770c\u306e\u5e02\u533a\u753a\u6751\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002\n\u30c7\u30fc\u30bf\u53d6\u5f97\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nimport pandas as pd\n\n# \u30b8\u30aa\u30b7\u30c6\u30a3\u30fc\u30ba\u306e\u5bfe\u8c61\u306e\u30da\u30fc\u30b8\nurl = 'http://www.geocities.jp/warera_tikyujin/country_information/japan/pref_information/town200704/preft200704_32.html'\n\ndf = pd.read_html(url, header=0, index_col=0)[1]\n\n# \u30c7\u30fc\u30bf\u306e\u6574\u5f62\ndf.columns = ['city_name', 'population', 'household', 'ground', 'remarks']\ndf['city_name'] = df.index\n# \u5358\u4f4d\u306e\u8abf\u6574\ndf['population'] = df['population'].astype(np.int32)/10000\n\n\nGeoJson\u3068web\u4e0a\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u30d2\u30e2\u4ed8\u6e96\u5099\nweb\u4e0a\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306b\u306f\u5730\u57df\u30b3\u30fc\u30c9\u304c\u306a\u3044\u306e\u3067\u4ed8\u4e0e\u3057\u3066\u3084\u308a\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3092GeoJson\u3068\u30c7\u30fc\u30bf\u306e\u5bfe\u5fdc\u4ed8\u3051\u3092\u3059\u308b\u969b\u306ekey\u3068\u3057\u307e\u3059\u3002\nkey\u3092\u5e02\u533a\u753a\u6751\u540d\u3068\u3057\u3066\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u65e5\u672c\u8a9e\u306f\u4f55\u304b\u3068\u6271\u3044\u304c\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u3068\u7121\u96e3\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6a19\u6e96\u5730\u57df\u30b3\u30fc\u30c9\u306f\u7dcf\u52d9\u7701\u7d71\u8a08\u5c40\u306e\u30da\u30fc\u30b8\u304b\u3089csv\u3067\u53d6\u5f97\u53ef\u80fd\u3067\u3059\u3002\nimport os\nimport json\n\njsonfile = os.getcwd() + '/../city_code.json'\nwith open(jsonfile) as f:\n    city_code_json = json.loads(f.read(), \"utf-8\")\n\ndef cityname_to_code(city_name):\n    try:\n        return city_code_json[city_name].encode('utf-8')\n    except KeyError:\n        return np.nan\n\n# \u65e5\u672c\u8a9e\u3092\u30ad\u30fc\u306b\u3059\u308b\u3068\u6271\u3044\u3065\u3089\u3044\u306e\u3067\u3001\u5730\u57df\u30b3\u30fc\u30c9\u3092\u30ad\u30fc\u306b\u3059\u308b\ndf.loc[:, 'code'] = df['city_name'].apply(cityname_to_code)\n# \u30d2\u30e2\u4ed8\u304c\u51fa\u6765\u306a\u304b\u3063\u305f\u30c7\u30fc\u30bf\u3092\u9664\u5916\ndf = df.dropna(subset=['code'])\n\n\nMAP\u8868\u793a\n\u5168\u3066\u306e\u6e96\u5099\u304c\u6574\u3063\u305f\u306e\u3067\u5f15\u6570\u3092\u6b63\u3057\u304f\u3042\u305f\u3048\u308b\u3060\u3051\u3067\u3001\u3042\u3068\u306ffolium\u3055\u3093\u304c \u3088\u3057\u306a\u306b\u51e6\u7406\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nimport folium\nfrom gdal_test import convert_shp_to_geojson\n\n# Shapefile\u306e\u8aad\u307f\u8fbc\u307f\nfilepath = os.getcwd() + '/works/input/N03-140401_32_GML/N03-14_32_140401.shp'\ngeojson = convert_shp_to_geojson(filepath)\n\n# map\u4f5c\u6210\nm = folium.Map(location=[35.472297, 133.050499], zoom_start=7.0, tiles='Mapbox Bright')\n# m.geo_json(geo_path=geojson)\nm.geo_json(geo_path=geojson, data=df,\n    columns=['code', 'population'],\n    # key_on='feature.id',\n    key_on='feature.id',\n    threshold_scale=[1, 5, 10, 20, 50, 100],\n    fill_color='BuPu', reset=True,\n    legend_name='population (10k)')\n\nm.create_map(path='city.html')\n\n\u4f5c\u696d\u6642\u70b9\u73fe\u5728\u306efolium(version 0.1.3)\u306e\u5b9f\u88c5\u3067\u306f\u3001\u4f5c\u6210\u3055\u308c\u305fcity.html\u3092chrome\u3067\u8868\u793a\u3055\u305b\u308b\u5834\u5408\u3001\u30af\u30ed\u30b9\u30c9\u30e1\u30a4\u30f3\u30c1\u30a7\u30c3\u30af\u306b\u3072\u3063\u304b\u304b\u3063\u3066\u8868\u793a\u51fa\u6765\u306a\u3044\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002\nchrome\u3067\u8868\u793a\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u5834\u5408\u306ffirefox\u306a\u3069\u306e\u5225\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u78ba\u8a8d\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002\n\u3046\u307e\u304f\u8868\u793a\u51fa\u6765\u308c\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306aMAP\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u4eca\u56de\u3067GIS\u7cfb\u306e\u30c7\u30fc\u30bf\u306e\u6271\u3044\u65b9\u304c\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u305f\u3060\u4e0a\u306e\u5185\u5bb9\u3001sinhrks\u3055\u3093\u306e\u8a18\u4e8b\u306e\u307b\u307c\u4e38\u30d1\u30af\u30ea\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3002\u3002\n\u6b21\u306f\u3082\u3046\u5c11\u3057\u6570\u5b66\u7684\u8981\u7d20\u306e\u3042\u308b\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30aa\u30fc\u30d7\u30f3\u30c7\u30fc\u30bf\u3067\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3059\u308b\u6e96\u5099\u3068\u3057\u3066\u56fd\u571f\u6570\u5024\u60c5\u5831\u3092\u4f7f\u3063\u3066python\u306efolium\u3067\u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\u66f8\u3044\u3066\u904a\u3093\u3067\u307f\u307e\u3057\u305f\u3002\n\n# \u4f5c\u696d\u74b0\u5883\nMac OS X 10.10 Yosemite\n\n# \u53c2\u8003\u60c5\u5831\n* [sinhrks\u3055\u3093\u306efolium\u95a2\u9023\u306e\u8a18\u4e8b](http://sinhrks.hatenablog.com/entry/2015/06/14/215514)\n* [\u56fd\u571f\u6570\u5024\u60c5\u5831](http://nlftp.mlit.go.jp/ksj/)\n* [mk-mode\u3055\u3093\u306e\u30dd\u30ea\u30b4\u30f3\u878d\u5408\u306e\u8a18\u4e8b](http://www.mk-mode.com/octopress/2014/07/28/qgis-fusion-of-polygons/)\n* [\u7dcf\u52d9\u7701\u7d71\u8a08\u5c40 \u6a19\u6e96\u5730\u57df\u30b3\u30fc\u30c9](http://www.stat.go.jp/index/seido/9-5.htm)\n\n# \u3084\u3063\u305f\u3053\u3068\n* gdal, pyshp\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n* [\u56fd\u571f\u6570\u5024\u60c5\u5831\u306eDL\u30da\u30fc\u30b8](http://nlftp.mlit.go.jp/ksj/)\u304b\u3089\u30c7\u30fc\u30bf\u3092\u884c\u653f\u533a\u57df\u306eShapefile\u3092\u53d6\u5f97\n* Shapefile\u3092GeoJson\u306b\u5909\u63db\n* \u30dd\u30ea\u30b4\u30f3\u878d\u5408(\u5404\u5730\u7269\u3092\u307e\u3068\u3081\u308b)\n* \u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\u8272\u4ed8\u3051\u7528\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n* GeoJson\u3068web\u4e0a\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u30d2\u30e2\u4ed8\u6e96\u5099\n* MAP\u306e\u8868\u793a\n\n# gdal\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nmac\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n```:\nbrew install gdal\npip install GDAL={\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305fgdal\u306eversion}\npip install pyshp\n```\n\n\u3053\u3053\u3067\u3001gdal\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u5408\u308f\u305b\u306a\u3044\u3068python\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\npyshp\u306fShapefile\u3092\u6271\u3046\u305f\u3081\u306b\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n\n# \u884c\u653f\u533a\u57df\u306eshapefile\u3092\u53d6\u5f97\n[\u884c\u653f\u533a\u57df](http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03.html)\u304b\u3089\u90fd\u9053\u5e9c\u770c\u306e\u5404\u5e02\u533a\u753a\u6751\u306e\u5883\u754c\u30c7\u30fc\u30bf\u304cshapefile\u3068\u3057\u3066\u53d6\u5f97\u51fa\u6765\u307e\u3059\u3002\nshapefile\u3060\u3068\u6271\u3044\u3065\u3089\u3044\u306e\u3067GeoJson\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u5cf6\u6839\u770c\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u307f\u3066\u3044\u307e\u3059\u3002\n\n# Shapefile\u3092GeoJson\u306b\u5909\u63db\n\u4ee5\u4e0b\u306e\u3088\u3046\u306apython script\u3067\u5909\u63db\u3057\u307e\u3059\u3002\n\n```py:\nimport os\nimport osgeo.ogr\nimport shapefile\n\n# Flash\u30e1\u30c3\u30bb\u30fc\u30b8\u7528\u306e\u95a2\u6570\ndef msg(s): print (s)\ndef dashes(): msg(40*'-')\ndef msgt(s): dashes(); msg(s); dashes()\ndef msgx(s): dashes(); msg('ERROR'); msg(s); dashes(); sys.exit(0)\n\n# shapefile->GeoJson\u95a2\u6570\ndef convert_shp_to_geojson(shape_fname):\n    if not os.path.isfile(shape_fname):\n        msgx('File not found: %s' % shape_fname)\n\n    # shapefile\u306e\u8aad\u307f\u8fbc\u307f\n    try:\n        reader = shapefile.Reader(shape_fname)\n    except:\n        msgx('Failed to read shapefile: %s' % shape_fname)\n\n    fields = reader.fields[1:]\n    field_names = [field[0].decode('shift-jis').encode('utf-8') for field in fields]\n\n    geom_dict = {}\n    uniq_key = 'N03_007'  # \u5730\u57df\u30b3\u30fc\u30c9\n    for sr in reader.shapeRecords():\n        encoded_sr_record = [r.decode('shift-jis').encode('utf-8') for r in sr.record]\n        atr = dict(zip(field_names, encoded_sr_record))\n        geom = sr.shape.__geo_interface__\n\n        # \u001b\u30dd\u30ea\u30b4\u30f3\u878d\u5408\n        # \u8af8\u5cf6\u306e\u3088\u3046\u306b\u540c\u4e00\u306e\u884c\u653f\u533a\u57df\u3067\u3082\u9818\u57df\u304c\u5206\u65ad\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\n        # type=MultiPolygon\u3068\u3057\u3066\u307e\u3068\u3081\u308b\n        if atr[uniq_key] in geom_dict.keys():\n            if len(geom_dict[atr[uniq_key]]['geometry']['coordinates']) == 1:\n                geom_dict[atr[uniq_key]]['geometry']['type'] = 'MultiPolygon'\n                tmp = tuple(geom_dict[atr[uniq_key]]['geometry']['coordinates'])\n                geom_dict[atr[uniq_key]]['geometry']['coordinates'] = []\n                geom_dict[atr[uniq_key]]['geometry']['coordinates'].append(tmp)\n            geom_dict[atr[uniq_key]]['geometry']['coordinates'].append(geom['coordinates'])\n        else:\n            geom['coordinates'] = list(geom['coordinates'])\n            geom_dict[atr[uniq_key]] = {'type':'Feature', 'id':atr[uniq_key], 'geometry':geom, 'properties':atr}\n\n    output_buffer = []\n    output_buffer_apd = output_buffer.append\n    for code, geo_data in geom_dict.items():\n        geo_data['geometry']['coordinates'] = tuple(geo_data['geometry']['coordinates'])\n        output_buffer_apd(geo_data)  # dict data\n\n    # GeoJSON file\u306e\u66f8\u304d\u51fa\u3057\n    out_fname = os.path.join(os.path.dirname(shape_fname), os.path.basename(shape_fname).replace('.shp', '.json'))\n\n    with open(out_fname, \"w\") as geojson:\n        json.dump({\"type\": \"FeatureCollection\", \"features\": output_buffer}, geojson, indent=2, ensure_ascii=False)\n    msg('file written: %s' % out_fname)\n    return out_fname\n```\n\nGIS\u7cfb\u306e\u30c7\u30fc\u30bf\u306e\u6271\u3044\u65b9\u304c\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3081\u3061\u3083\u304f\u3061\u3083\u52b9\u7387\u306e\u60aa\u3044\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044\u305d\u3046\u306a\u6c17\u304c\u3057\u3066\u3044\u307e\u3059\u3002\u3002\n(\u30dd\u30ea\u30b4\u30f3\u878d\u5408\u3057\u3064\u3064Shapefile\u304b\u3089GeoJson\u306b\u4e00\u767a\u3067\u5909\u63db\u51fa\u6765\u308b\u30c4\u30fc\u30eb\u304f\u3089\u3044\u3069\u3053\u304b\u306b\u3042\u308a\u305d\u3046\u3067\u3059\u3057...)\n\nGeoJson\u3068\u3057\u3066\u4e0b\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n```:\n{\n  \"type\": \"FeatureCollection\", \n  \"features\": [\n    {\n      \"geometry\": {\n        \"type\": \"Polygon\", \n        \"coordinates\": [\n          [\n            [\n              131.91386401800003, \n              34.57300200100008\n            ], \n```\n\n# \u30dd\u30ea\u30b4\u30f3\u878d\u5408\n\u4e0a\u306e\u30b3\u30fc\u30c9\u4e2d\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\u30dd\u30ea\u30b4\u30f3\u878d\u5408\u3068\u306f\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u3001[mk-mode\u3055\u3093\u306eBLOG](http://www.mk-mode.com/octopress/2014/07/28/qgis-fusion-of-polygons/)\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n# \u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\u8272\u4ed8\u3051\u7528\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nyahoo!\u3055\u3093\u306e[geocities\u306e\u5e02\u533a\u753a\u6751\u60c5\u5831](http://www.geocities.jp/warera_tikyujin/)\u304b\u3089\u62dd\u501f\u81f4\u3057\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u3082\u5cf6\u6839\u770c\u306e\u5e02\u533a\u753a\u6751\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002\n\u30c7\u30fc\u30bf\u53d6\u5f97\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py:\nimport pandas as pd\n\n# \u001b\u30b8\u30aa\u30b7\u30c6\u30a3\u30fc\u30ba\u306e\u5bfe\u8c61\u306e\u30da\u30fc\u30b8\nurl = 'http://www.geocities.jp/warera_tikyujin/country_information/japan/pref_information/town200704/preft200704_32.html'\n\ndf = pd.read_html(url, header=0, index_col=0)[1]\n\n# \u30c7\u30fc\u30bf\u306e\u6574\u5f62\ndf.columns = ['city_name', 'population', 'household', 'ground', 'remarks']\ndf['city_name'] = df.index\n# \u5358\u4f4d\u306e\u8abf\u6574\ndf['population'] = df['population'].astype(np.int32)/10000\n```\n\n# GeoJson\u3068web\u4e0a\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u30d2\u30e2\u4ed8\u6e96\u5099\nweb\u4e0a\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306b\u306f\u5730\u57df\u30b3\u30fc\u30c9\u304c\u306a\u3044\u306e\u3067\u4ed8\u4e0e\u3057\u3066\u3084\u308a\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3092GeoJson\u3068\u30c7\u30fc\u30bf\u306e\u5bfe\u5fdc\u4ed8\u3051\u3092\u3059\u308b\u969b\u306ekey\u3068\u3057\u307e\u3059\u3002\nkey\u3092\u5e02\u533a\u753a\u6751\u540d\u3068\u3057\u3066\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u65e5\u672c\u8a9e\u306f\u4f55\u304b\u3068\u6271\u3044\u304c\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u3068\u7121\u96e3\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6a19\u6e96\u5730\u57df\u30b3\u30fc\u30c9\u306f[\u7dcf\u52d9\u7701\u7d71\u8a08\u5c40\u306e\u30da\u30fc\u30b8](http://www.stat.go.jp/index/seido/9-5.htm)\u304b\u3089csv\u3067\u53d6\u5f97\u53ef\u80fd\u3067\u3059\u3002\n\n```py:\nimport os\nimport json\n\njsonfile = os.getcwd() + '/../city_code.json'\nwith open(jsonfile) as f:\n    city_code_json = json.loads(f.read(), \"utf-8\")\n\ndef cityname_to_code(city_name):\n    try:\n        return city_code_json[city_name].encode('utf-8')\n    except KeyError:\n        return np.nan\n\n# \u65e5\u672c\u8a9e\u3092\u30ad\u30fc\u306b\u3059\u308b\u3068\u6271\u3044\u3065\u3089\u3044\u306e\u3067\u3001\u5730\u57df\u30b3\u30fc\u30c9\u3092\u30ad\u30fc\u306b\u3059\u308b\ndf.loc[:, 'code'] = df['city_name'].apply(cityname_to_code)\n# \u30d2\u30e2\u4ed8\u304c\u51fa\u6765\u306a\u304b\u3063\u305f\u30c7\u30fc\u30bf\u3092\u9664\u5916\ndf = df.dropna(subset=['code'])\n```\n\n# MAP\u8868\u793a\n\u5168\u3066\u306e\u6e96\u5099\u304c\u6574\u3063\u305f\u306e\u3067\u5f15\u6570\u3092\u6b63\u3057\u304f\u3042\u305f\u3048\u308b\u3060\u3051\u3067\u3001\u3042\u3068\u306ffolium\u3055\u3093\u304c \u3088\u3057\u306a\u306b\u51e6\u7406\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```py:\nimport folium\nfrom gdal_test import convert_shp_to_geojson\n\n# Shapefile\u306e\u8aad\u307f\u8fbc\u307f\nfilepath = os.getcwd() + '/works/input/N03-140401_32_GML/N03-14_32_140401.shp'\ngeojson = convert_shp_to_geojson(filepath)\n\n# \u001bmap\u4f5c\u6210\nm = folium.Map(location=[35.472297, 133.050499], zoom_start=7.0, tiles='Mapbox Bright')\n# m.geo_json(geo_path=geojson)\nm.geo_json(geo_path=geojson, data=df,\n    columns=['code', 'population'],\n    # key_on='feature.id',\n    key_on='feature.id',\n    threshold_scale=[1, 5, 10, 20, 50, 100],\n    fill_color='BuPu', reset=True,\n\tlegend_name='population (10k)')\n\nm.create_map(path='city.html')\n```\n\u4f5c\u696d\u6642\u70b9\u73fe\u5728\u306efolium(version 0.1.3)\u306e\u5b9f\u88c5\u3067\u306f\u3001\u4f5c\u6210\u3055\u308c\u305fcity.html\u3092chrome\u3067\u8868\u793a\u3055\u305b\u308b\u5834\u5408\u3001\u30af\u30ed\u30b9\u30c9\u30e1\u30a4\u30f3\u30c1\u30a7\u30c3\u30af\u306b\u3072\u3063\u304b\u304b\u3063\u3066\u8868\u793a\u51fa\u6765\u306a\u3044\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002\nchrome\u3067\u8868\u793a\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u5834\u5408\u306ffirefox\u306a\u3069\u306e\u5225\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u78ba\u8a8d\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002\n\u3046\u307e\u304f\u8868\u793a\u51fa\u6765\u308c\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306aMAP\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n![\u5cf6\u6839\u753b\u50cf.jpg](https://qiita-image-store.s3.amazonaws.com/0/12767/78e8bc63-88ac-fdaa-d29b-ecaca54c8335.jpeg)\n\n\u4eca\u56de\u3067GIS\u7cfb\u306e\u30c7\u30fc\u30bf\u306e\u6271\u3044\u65b9\u304c\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u305f\u3060\u4e0a\u306e\u5185\u5bb9\u3001sinhrks\u3055\u3093\u306e\u8a18\u4e8b\u306e\u307b\u307c\u4e38\u30d1\u30af\u30ea\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3002\u3002\n\u6b21\u306f\u3082\u3046\u5c11\u3057\u6570\u5b66\u7684\u8981\u7d20\u306e\u3042\u308b\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["python2.7", "opendata"]}