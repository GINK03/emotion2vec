{"context": " More than 1 year has passed since last update.3D\u3067\u3057\u3063\u307d\u304c\u306b\u3087\u308d\u306b\u3087\u308d\u3059\u308b\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u305f\u3044\u306a\u3001\u3068\u601d\u3046\u3053\u3068\u304c\u3042\u308b\u3002\u305d\u3093\u306a\u3068\u304d\u3069\u3046\u3059\u308b\u304b\u3002\n\n\u3057\u3063\u307d\u306e\u95a2\u7bc0\u3092\u5b9a\u7fa9\n\u307e\u305a\u306f\u95a2\u7bc0\u304b\u3089\u4f5c\u308a\u59cb\u3081\u308b\u3002\u3053\u306e\u3068\u304d\u3001\u95a2\u7bc0\u306e\u89aa\u5b50\u95a2\u4fc2\u306f\u8003\u3048\u306a\u3044\u307b\u3046\u304c\u3001\u3042\u3068\u306e\u8a08\u7b97\u304c\u697d\u306b\u306a\u308b\u3002\nclass Joint {\npublic:\n    float3d position;   // \u95a2\u7bc0\u306e\u4f4d\u7f6e\n    Quaternion rotation;    // \u95a2\u7bc0\u306e\u89d2\u5ea6\n    float interval; // \u524d\u306e\u95a2\u7bc0\u3068\u306e\u8ddd\u96e2\n};\n\n\u3053\u3053\u3067\u306f\u7269\u7406\u7684\u306a\u6b63\u78ba\u3055\u306f\u672c\u984c\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u901f\u5ea6\u30d9\u30af\u30c8\u30eb\u3084\u89d2\u901f\u5ea6\u306f\u3001\u6301\u305f\u306a\u304f\u3066\u3082\u308f\u308a\u3068\u554f\u984c\u306a\u3044\u3002\n\n\u95a2\u7bc0\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\n\u7d9a\u3044\u3066\u3001\u95a2\u7bc0\u306e\u914d\u5217\u3092\u3064\u304f\u3063\u3066\u521d\u671f\u5316\u3059\u308b\u3002\n\u4eca\u56de\u306f\u3001\u3057\u3063\u307d\u306e\u4ed8\u3051\u6839\u304cjoints[0]\u3001\u672b\u7aef\u304cjoints.back()\u3068\u5bfe\u5fdc\u4ed8\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u3002\nconst int JOINTS_NUM = 21;  // \u95a2\u7bc0\u306e\u6570\nconst float INTERVAL = 0.18f;   // \u95a2\u7bc0\u540c\u58eb\u306e\u9593\u9694\n\n// \u914d\u5217\u3092\u78ba\u4fdd\nstd::vector<Joint> joints;\njoints.resize(JOINTS_NUM);\n\n// \u5404\u95a2\u7bc0\u306e\u5024\u3092\u8a2d\u5b9a\nfor (int i = 0; i < JOINTS_NUM; ++i) {\n    joints[i].interval = INTERVAL;\n    joints[i].position = float3d(0.0f, 0.0f, INTERVAL * i); // \u3057\u3063\u307d\u306fZ\u8ef8\u6b63\u306e\u65b9\u5411\u3078\u4f38\u3073\u308b\n}\n\n\n\u3057\u3063\u307d\u306e\u4ed8\u3051\u6839\u3092\u52d5\u304b\u3059\n\u3057\u3063\u307d\u5168\u4f53\u3092\u52d5\u304b\u3059\u524d\u306b\u3001\u4ed8\u3051\u6839\u3060\u3051\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\u3002\nsin\u95a2\u6570\u3067Y\u8ef8\u306b\u5bfe\u3059\u308b\u56de\u8ee2\u91cf\u3092\u5909\u5316\u3055\u305b\u3066\u3001\u3057\u3063\u307d\u306e\u4ed8\u3051\u6839\u304c\u5468\u671f\u7684\u306b\u63fa\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3002\nconst float ROT_WIDTH = 0.4f;   // \u56de\u8ee2\u306e\u5909\u5316\u306e\u5e45(\u30e9\u30b8\u30a2\u30f3)\nfloat theta = 0.0f; // \u4eca\u306e\u4f4d\u76f8\u3092\u8868\u3059\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\n\nvoid update(float delta_time) {\n    theta += M_PI * 2.0f * delta_time;\n    while (theta > M_PI) theta -= M_PI * 2.0f;\n\n    // \u8ef8\u3068\u56de\u8ee2\u306e\u5927\u304d\u3055\u304b\u3089\u30013\u6b21\u5143\u7684\u306a\u89d2\u5ea6\u3092\u6c42\u3081\u308b\n    joints[0].rotation = Quaternion::fromAngleAxis(std::sin(theta) * ROT_WIDTH, float3d(0, 1, 0));\n}\n\n\n\u4ed6\u306e\u95a2\u7bc0\u3092\u52d5\u304b\u3059\u3002\n\u4ed8\u3051\u6839\u306e\u52d5\u304d\u304c\u3067\u304d\u305f\u3089\u3001\u3053\u308c\u3092\u307b\u304b\u306e\u95a2\u7bc0\u306b\u3082\u4f1d\u64ad\u3057\u3066\u3044\u304f\u3088\u3046\u306b\u3057\u3088\u3046\u3002\nvoid updateSingleJoint(float delta_time, Joint& joint, const Joint& prev_joint) {\n    // \u56de\u8ee2\u3092\u524d\u306e\u95a2\u7bc0\u306b\u8fd1\u3065\u3051\u308b\n    Quaternion rotation = Quaternion::slerp(joint.rotation, prev_joint.rotation, delta_time * 30.0f);   // 2\u3064\u306e3\u6b21\u5143\u89d2\u5ea6\u306e\u4e2d\u9593\u3092\u6c42\u3081\u308b\n    rotation.normalize();\n    joint.rotation = rotation;\n\n    // \u4f4d\u7f6e\u3092\u524d\u306e\u95a2\u7bc0\u304b\u3089\u63a8\u5b9a\u3055\u308c\u308b\u4f4d\u7f6e\u306b\u8fd1\u3065\u3051\u308b\n    float3d target = prev_joint.position + joint.rotation.getRotated(float3d(0, 0, joint.interval));\n    joint.position += (target - joint.position) * 50.0f * delta_time;\n}\n\n\u3053\u3053\u306730.0f\u306850.0f\u3068\u3044\u3046\u8b0e\u5b9a\u6570\u304c\u51fa\u3066\u304d\u305f\u304c\u3001\u3053\u308c\u306f\u89d2\u5ea6\u3084\u4f4d\u7f6e\u306e\u4f1d\u64ad\u3057\u3084\u3059\u3055\u3092\u6c7a\u3081\u308b\u4fc2\u6570\u3067\u3001\u4eca\u9069\u5f53\u306b\u6c7a\u3081\u305f\u3002\ndelta_time\u304c1.0f/50.0f\u3092\u8d85\u3048\u308b\u3068\u3001\u4f4d\u7f6e\u306e\u88dc\u9593\u304c\u4e88\u671f\u305b\u306c\u5024\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u3046\u307e\u304f\u4e38\u3081\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nvoid updateJoints(float delta_time) {\n    // delta_time\u304c\u5927\u304d\u3044\u3068\u304d\u306f\u30011/50\u79d2\u672a\u6e80\u306e\u5185\u90e8\u30d5\u30ec\u30fc\u30e0\u306b\u5206\u5272\u3059\u308b\n    float internal_frames_num = std::ceil(delta_time * 50.0f);\n    float internal_dt = delta_time / internal_frames_num;\n\n    for (float j = 0.0f; j < internal_frames_num; ++j) {\n        for (int i = 1; i < JOINTS_NUM; ++i) {\n            updateSingleJoint(internal_dt, joints[i], joints[i-1]);\n        }\n    }\n}\n\n\u3053\u308c\u3067\u3057\u3063\u307d\u306e\u52d5\u304d\u306f\u5b8c\u6210\u3057\u305f\u3002\n\u3053\u3046\u3057\u3066\u3067\u304d\u305f\u95a2\u7bc0\u306b\u3001\u4e09\u89d2\u5f62\u30e1\u30c3\u30b7\u30e5\u3092\u3046\u307e\u3044\u3053\u3068\u7d50\u3073\u4ed8\u3051\u3066\u3084\u308c\u3070\u3001\u305d\u308c\u3063\u307d\u3044\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3060\u308d\u3046\u3002\n\n\u672c\u4f53\u3068\u3057\u3063\u307d\u3092\u540c\u6642\u306b\u52d5\u304b\u3059\n\u5b9f\u969b\u306b\u3057\u3063\u307d\u3092\u306b\u3087\u308d\u306b\u3087\u308d\u3055\u305b\u308b\u969b\u306b\u306f\u3001\u672c\u4f53\u3068\u3057\u3063\u307d\u3068\u3092\u540c\u6642\u306b\u63cf\u753b\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u3053\u306e\u3068\u304d\u3001\u672c\u4f53\u306e\u4f4d\u7f6e\u3068\u56de\u8ee2\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3057\u3063\u307d\u3092\u63cf\u753b\u3059\u308b\u3068\u3088\u304f\u306a\u3044\u3002\u305b\u3063\u304b\u304f\u6163\u6027\u304c\u6b8b\u308b\u3088\u3046\u306b\u3057\u305f\u3057\u3063\u307d\u306e\u6319\u52d5\u306b\u3001\u672c\u4f53\u306e\u56de\u8ee2\u304c\u8db3\u3055\u308c\u3066\u3088\u304f\u308f\u304b\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3060\u3002\n\u3053\u308c\u3092\u9632\u3050\u306b\u306f\u3001\u3057\u3063\u307d\u3092\u63cf\u753b\u3059\u308b\u969b\u306b\u672c\u4f53\u306e\u56de\u8ee2\u3092\u8003\u616e\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\nOpenGL\u3067\u66f8\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nvoid draw() {\n    glPushMatrix();\n        glTranslatef(\u672c\u4f53\u306e\u4f4d\u7f6e);\n        glPushMatrix();\n            glRotatef(\u672c\u4f53\u306e\u56de\u8ee2);\n            // \u672c\u4f53\u306e\u63cf\u753b\n        glPopMatrix();\n        glTranslatef(\u672c\u4f53\u304b\u3089\u3057\u3063\u307d\u306e\u4ed8\u3051\u6839\u3078\u306e\u30d9\u30af\u30c8\u30eb);\n        // \u3057\u3063\u307d\u306e\u63cf\u753b\n    glPopMatrix();\n}\n\n\u672c\u4f53\u306e\u56de\u8ee2\u306f\u3001\u4ed8\u3051\u6839\u306e\u56de\u8ee2\u3068\u3057\u3066\u3057\u3063\u307d\u306b\u4e0e\u3048\u3066\u3084\u308c\u3070\u3044\u3044\u3002\n\u901f\u5ea6\u3092\u8003\u3048\u306a\u304f\u3066\u3082\u3001\u56de\u8ee2\u3060\u3051\u8003\u3048\u3066\u3044\u308c\u3070\u610f\u5916\u3068\u305d\u308c\u3063\u307d\u304f\u306a\u308b\u3068\u3044\u3046\u306e\u304c\u3001\u4eca\u56de\u306e\u30dd\u30a4\u30f3\u30c8\u3060\u3002\n3D\u3067\u3057\u3063\u307d\u304c\u306b\u3087\u308d\u306b\u3087\u308d\u3059\u308b\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u305f\u3044\u306a\u3001\u3068\u601d\u3046\u3053\u3068\u304c\u3042\u308b\u3002\u305d\u3093\u306a\u3068\u304d\u3069\u3046\u3059\u308b\u304b\u3002\n\n# \u3057\u3063\u307d\u306e\u95a2\u7bc0\u3092\u5b9a\u7fa9\n\n\u307e\u305a\u306f\u95a2\u7bc0\u304b\u3089\u4f5c\u308a\u59cb\u3081\u308b\u3002\u3053\u306e\u3068\u304d\u3001\u95a2\u7bc0\u306e\u89aa\u5b50\u95a2\u4fc2\u306f\u8003\u3048\u306a\u3044\u307b\u3046\u304c\u3001\u3042\u3068\u306e\u8a08\u7b97\u304c\u697d\u306b\u306a\u308b\u3002\n\n```cpp\nclass Joint {\npublic:\n\tfloat3d position;\t// \u95a2\u7bc0\u306e\u4f4d\u7f6e\n\tQuaternion rotation;\t// \u95a2\u7bc0\u306e\u89d2\u5ea6\n\tfloat interval;\t// \u524d\u306e\u95a2\u7bc0\u3068\u306e\u8ddd\u96e2\n};\n```\n\n\u3053\u3053\u3067\u306f\u7269\u7406\u7684\u306a\u6b63\u78ba\u3055\u306f\u672c\u984c\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u901f\u5ea6\u30d9\u30af\u30c8\u30eb\u3084\u89d2\u901f\u5ea6\u306f\u3001\u6301\u305f\u306a\u304f\u3066\u3082\u308f\u308a\u3068\u554f\u984c\u306a\u3044\u3002\n\n# \u95a2\u7bc0\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\n\n\u7d9a\u3044\u3066\u3001\u95a2\u7bc0\u306e\u914d\u5217\u3092\u3064\u304f\u3063\u3066\u521d\u671f\u5316\u3059\u308b\u3002\n\u4eca\u56de\u306f\u3001\u3057\u3063\u307d\u306e\u4ed8\u3051\u6839\u304cjoints[0]\u3001\u672b\u7aef\u304cjoints.back()\u3068\u5bfe\u5fdc\u4ed8\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\n```cpp\nconst int JOINTS_NUM = 21;\t// \u95a2\u7bc0\u306e\u6570\nconst float INTERVAL = 0.18f;\t// \u95a2\u7bc0\u540c\u58eb\u306e\u9593\u9694\n\n// \u914d\u5217\u3092\u78ba\u4fdd\nstd::vector<Joint> joints;\njoints.resize(JOINTS_NUM);\n\n// \u5404\u95a2\u7bc0\u306e\u5024\u3092\u8a2d\u5b9a\nfor (int i = 0; i < JOINTS_NUM; ++i) {\n\tjoints[i].interval = INTERVAL;\n\tjoints[i].position = float3d(0.0f, 0.0f, INTERVAL * i);\t// \u3057\u3063\u307d\u306fZ\u8ef8\u6b63\u306e\u65b9\u5411\u3078\u4f38\u3073\u308b\n}\n```\n\n# \u3057\u3063\u307d\u306e\u4ed8\u3051\u6839\u3092\u52d5\u304b\u3059\n\n\u3057\u3063\u307d\u5168\u4f53\u3092\u52d5\u304b\u3059\u524d\u306b\u3001\u4ed8\u3051\u6839\u3060\u3051\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\u3002\nsin\u95a2\u6570\u3067Y\u8ef8\u306b\u5bfe\u3059\u308b\u56de\u8ee2\u91cf\u3092\u5909\u5316\u3055\u305b\u3066\u3001\u3057\u3063\u307d\u306e\u4ed8\u3051\u6839\u304c\u5468\u671f\u7684\u306b\u63fa\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n```cpp\nconst float ROT_WIDTH = 0.4f;\t// \u56de\u8ee2\u306e\u5909\u5316\u306e\u5e45(\u30e9\u30b8\u30a2\u30f3)\nfloat theta = 0.0f;\t// \u4eca\u306e\u4f4d\u76f8\u3092\u8868\u3059\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\n\nvoid update(float delta_time) {\n\ttheta += M_PI * 2.0f * delta_time;\n\twhile (theta > M_PI) theta -= M_PI * 2.0f;\n\n\t// \u8ef8\u3068\u56de\u8ee2\u306e\u5927\u304d\u3055\u304b\u3089\u30013\u6b21\u5143\u7684\u306a\u89d2\u5ea6\u3092\u6c42\u3081\u308b\n\tjoints[0].rotation = Quaternion::fromAngleAxis(std::sin(theta) * ROT_WIDTH, float3d(0, 1, 0));\n}\n```\n\n# \u4ed6\u306e\u95a2\u7bc0\u3092\u52d5\u304b\u3059\u3002\n\n\u4ed8\u3051\u6839\u306e\u52d5\u304d\u304c\u3067\u304d\u305f\u3089\u3001\u3053\u308c\u3092\u307b\u304b\u306e\u95a2\u7bc0\u306b\u3082\u4f1d\u64ad\u3057\u3066\u3044\u304f\u3088\u3046\u306b\u3057\u3088\u3046\u3002\n\n```cpp\nvoid updateSingleJoint(float delta_time, Joint& joint, const Joint& prev_joint) {\n\t// \u56de\u8ee2\u3092\u524d\u306e\u95a2\u7bc0\u306b\u8fd1\u3065\u3051\u308b\n\tQuaternion rotation = Quaternion::slerp(joint.rotation, prev_joint.rotation, delta_time * 30.0f);\t// 2\u3064\u306e3\u6b21\u5143\u89d2\u5ea6\u306e\u4e2d\u9593\u3092\u6c42\u3081\u308b\n\trotation.normalize();\n\tjoint.rotation = rotation;\n\n\t// \u4f4d\u7f6e\u3092\u524d\u306e\u95a2\u7bc0\u304b\u3089\u63a8\u5b9a\u3055\u308c\u308b\u4f4d\u7f6e\u306b\u8fd1\u3065\u3051\u308b\n\tfloat3d target = prev_joint.position + joint.rotation.getRotated(float3d(0, 0, joint.interval));\n\tjoint.position += (target - joint.position) * 50.0f * delta_time;\n}\n```\n\n\u3053\u3053\u306730.0f\u306850.0f\u3068\u3044\u3046\u8b0e\u5b9a\u6570\u304c\u51fa\u3066\u304d\u305f\u304c\u3001\u3053\u308c\u306f\u89d2\u5ea6\u3084\u4f4d\u7f6e\u306e\u4f1d\u64ad\u3057\u3084\u3059\u3055\u3092\u6c7a\u3081\u308b\u4fc2\u6570\u3067\u3001\u4eca\u9069\u5f53\u306b\u6c7a\u3081\u305f\u3002\ndelta_time\u304c1.0f/50.0f\u3092\u8d85\u3048\u308b\u3068\u3001\u4f4d\u7f6e\u306e\u88dc\u9593\u304c\u4e88\u671f\u305b\u306c\u5024\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u3046\u307e\u304f\u4e38\u3081\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n```cpp\nvoid updateJoints(float delta_time) {\n\t// delta_time\u304c\u5927\u304d\u3044\u3068\u304d\u306f\u30011/50\u79d2\u672a\u6e80\u306e\u5185\u90e8\u30d5\u30ec\u30fc\u30e0\u306b\u5206\u5272\u3059\u308b\n\tfloat internal_frames_num = std::ceil(delta_time * 50.0f);\n\tfloat internal_dt = delta_time / internal_frames_num;\n\n\tfor (float j = 0.0f; j < internal_frames_num; ++j) {\n\t\tfor (int i = 1; i < JOINTS_NUM; ++i) {\n\t\t\tupdateSingleJoint(internal_dt, joints[i], joints[i-1]);\n\t\t}\n\t}\n}\n```\n\n\u3053\u308c\u3067\u3057\u3063\u307d\u306e\u52d5\u304d\u306f\u5b8c\u6210\u3057\u305f\u3002\n\u3053\u3046\u3057\u3066\u3067\u304d\u305f\u95a2\u7bc0\u306b\u3001\u4e09\u89d2\u5f62\u30e1\u30c3\u30b7\u30e5\u3092\u3046\u307e\u3044\u3053\u3068\u7d50\u3073\u4ed8\u3051\u3066\u3084\u308c\u3070\u3001\u305d\u308c\u3063\u307d\u3044\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3060\u308d\u3046\u3002\n\n# \u672c\u4f53\u3068\u3057\u3063\u307d\u3092\u540c\u6642\u306b\u52d5\u304b\u3059\n\n\u5b9f\u969b\u306b\u3057\u3063\u307d\u3092\u306b\u3087\u308d\u306b\u3087\u308d\u3055\u305b\u308b\u969b\u306b\u306f\u3001\u672c\u4f53\u3068\u3057\u3063\u307d\u3068\u3092\u540c\u6642\u306b\u63cf\u753b\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u3053\u306e\u3068\u304d\u3001\u672c\u4f53\u306e\u4f4d\u7f6e\u3068\u56de\u8ee2\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3057\u3063\u307d\u3092\u63cf\u753b\u3059\u308b\u3068\u3088\u304f\u306a\u3044\u3002\u305b\u3063\u304b\u304f\u6163\u6027\u304c\u6b8b\u308b\u3088\u3046\u306b\u3057\u305f\u3057\u3063\u307d\u306e\u6319\u52d5\u306b\u3001\u672c\u4f53\u306e\u56de\u8ee2\u304c\u8db3\u3055\u308c\u3066\u3088\u304f\u308f\u304b\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3060\u3002\n\u3053\u308c\u3092\u9632\u3050\u306b\u306f\u3001\u3057\u3063\u307d\u3092\u63cf\u753b\u3059\u308b\u969b\u306b\u672c\u4f53\u306e\u56de\u8ee2\u3092\u8003\u616e\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n\nOpenGL\u3067\u66f8\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```cpp\nvoid draw() {\n\tglPushMatrix();\n\t\tglTranslatef(\u672c\u4f53\u306e\u4f4d\u7f6e);\n\t\tglPushMatrix();\n\t\t\tglRotatef(\u672c\u4f53\u306e\u56de\u8ee2);\n\t\t\t// \u672c\u4f53\u306e\u63cf\u753b\n\t\tglPopMatrix();\n\t\tglTranslatef(\u672c\u4f53\u304b\u3089\u3057\u3063\u307d\u306e\u4ed8\u3051\u6839\u3078\u306e\u30d9\u30af\u30c8\u30eb);\n\t\t// \u3057\u3063\u307d\u306e\u63cf\u753b\n\tglPopMatrix();\n}\n```\n\n\u672c\u4f53\u306e\u56de\u8ee2\u306f\u3001\u4ed8\u3051\u6839\u306e\u56de\u8ee2\u3068\u3057\u3066\u3057\u3063\u307d\u306b\u4e0e\u3048\u3066\u3084\u308c\u3070\u3044\u3044\u3002\n\u901f\u5ea6\u3092\u8003\u3048\u306a\u304f\u3066\u3082\u3001\u56de\u8ee2\u3060\u3051\u8003\u3048\u3066\u3044\u308c\u3070\u610f\u5916\u3068\u305d\u308c\u3063\u307d\u304f\u306a\u308b\u3068\u3044\u3046\u306e\u304c\u3001\u4eca\u56de\u306e\u30dd\u30a4\u30f3\u30c8\u3060\u3002", "tags": ["C++", "3DCG"]}