{"context": "\n\n\u306f\u3058\u3081\u306b\nchainer\u306eMnist\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u3001optimizer\u3092\u6bd4\u8f03\u3059\u308b\u3002\n\n\u74b0\u5883\nGPU:GTX1070\nOS:Ubuntu14.04\nCUDA:8.0RC\ncuDNN:5.1\npython:2.7.6\nchainer:1.14.0\n\u306a\u3069\n\njson\u30d5\u30a1\u30a4\u30eb\u3092csv\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\nmnist\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4ee5\u4e0b\u306e\uff18\uff13\u3001\uff18\uff14\u884c\u90e8\u5206\n\ntrain_mnist.py\n#Write a log of evaluation statistics for each epoch\ntrainer.extend(extensions.LogReport())\n\n\n\u3067log\u306bloss\u3084accuracy\u3092json\u5f62\u5f0f\u3067\u66f8\u304d\u8fbc\u3093\u3067\u3044\u308b\u3002json\u306f\u6271\u3044\u306b\u304f\u3044\u306e\u3067\u3001csv\u306b\u5909\u63db\u3059\u308b\u30b3\u30fc\u30c9\u3092\u307e\u305a\u4f5c\u308b\u3002\n\njson2csv.py\n#!/usr/bin/env python\nimport json, csv\nimport argparse\n\nparser = argparse.ArgumentParser(description='experimentation of json to csv')\nparser.add_argument('--logfilename', '-l', default='log',\n                    help='name of Log file')\nparser.add_argument('--csvfilename', '-c', default='log_csv.csv',\n                    help='name of output csv file')\nargs = parser.parse_args()\n\nfilename = args.logfilename\n\n#read json file\njson_data = open(filename)\ndata = json.load(json_data)\njson_data.close()\n\n#open csv file\nf = open(args.csvfilename, 'ab')\ncsvWriter = csv.writer(f)\n\n\nheader_list = ['iteration', 'epoch', 'main/loss', 'main/accuracy',\n               'validation/main/loss', 'validation/main/accuracy']\ncsvWriter.writerow(header_list)\n\nprint 'len(data[0])',\nprint len(data[0])\n\nfor i in range(len(data)):\n    if len(data[i]) == 4:\n        contents_list = [data[i][\"iteration\"], data[i][\"epoch\"], data[i][\"main/loss\"], data[i][\"main/accuracy\"]\n                         ]\n    elif len(data[i]) == 6:\n        contents_list = [data[i][\"iteration\"], data[i][\"epoch\"], data[i][\"main/loss\"], data[i][\"main/accuracy\"],\n                         data[i][\"validation/main/loss\"], data[i][\"validation/main/accuracy\"]]\n\n\n    csvWriter.writerow(contents_list)\n\nf.close()\n\n\n\u3053\u308c\u3067Excel\u3068\u304b\u3067\u30b0\u30e9\u30d5\u5316\u3057\u3066\u6bd4\u8f03\u3067\u304d\u308b\u3002\n\n\u6bd4\u8f03\u5bfe\u8c61\n\u6bd4\u8f03\u5bfe\u8c61\u306f\u4ee5\u4e0b\n\uff08\uff11\uff09\u901a\u5e38\u306eSGD\n\uff08\uff12\uff09Momentum\n\uff08\uff13\uff09AdaGrad\nhttp://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf\n\uff08\uff14\uff09Adam\nhttps://arxiv.org/pdf/1412.6980v8.pdf\n\uff08\uff15\uff09RMSProp\n\nmnist_train.py\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\n\u5909\u66f4\u70b9\uff11\uff1aparser\u306boptimizer\u3092\u8ffd\u52a0\n\u30b3\u30de\u30f3\u30c9\u304b\u3089optimizer\u3092\u9078\u629e\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3001parser\u5185\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3002\n\ntrain_mnist.py\nparser.add_argument('--optimizer', '-p', type=str, default='Adam',\n                    help='optimizer')\n\n\n\u5909\u66f4\u70b9\uff12\uff1aoptimizer\u306e\u9078\u629e\n\u4ee5\u4e0b\u306e\u90e8\u5206\n\ntrain_mnist.py\noptimizer = chainer.optimizers.Adam()\n\n\n\u3092args.optimizer\u306b\u3088\u3063\u3066\u9078\u629e\u3067\u304d\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3002\n\ntrain_mnist.py\n# Setup an optimizer\nif args.optimizer == 'AdaGrad':\n    optimizer = chainer.optimizers.AdaGrad()\nelif args.optimizer == 'SGD':\n    optimizer = chainer.optimizers.SGD()\nelif args.optimizer == 'MomentumSGD':\n    optimizer = chainer.optimizers.MomentumSGD()\nelif args.optimizer == 'RMSprop':\n    optimizer = chainer.optimizers.RMSprop()\nelse:\n    optimizer = chainer.optimizers.Adam()\n\n\n\u5909\u66f4\u70b9\uff13\uff1aLogReport()\u306e\u5909\u66f4\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f1 epoch\u3054\u3068\u306blog\u306bloss\u3084accuracy\u304c\u8a18\u9332\u3055\u308c\u308b\u304c\u30011 epoch\u6642\u70b9\u3067\u304b\u306a\u308aloss\u304c\u6e1b\u5c11\u3057\u3066\u308b\u305f\u3081\u3001\u3082\u3063\u3068\u7d30\u304b\u304f\u8a18\u9332\u3057\u305f\u3044\u3002\u305d\u3053\u3067\uff18\uff14\u884c\u76ee\u306e\u4ee5\u4e0b\u306e\u90e8\u5206\n\ntrain_mnist.py\ntrainer.extend(extensions.LogReport())\n\n\n\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u3001100 iteration\u3054\u3068\u306b\u8a18\u9332\u3055\u305b\u308b\u3002\n\ntrain_mnist.py\ntrainer.extend(extensions.LogReport(trigger=(100, 'iteration')))\n\n\nLogReport()\u306e\u5f15\u6570\u306b\u95a2\u3057\u3066\u306f\u3001chainer/training/extensions/log_report.py\u306b\u8aac\u660e\u66f8\u304d\u304c\u3042\u308b\u3002\n\n\u5b9f\u9a13\n\u96a0\u308c\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e100\u3001epoch\u6570\u306f10\u3001batch\u30b5\u30a4\u30ba\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e100\u3067\u5b9f\u9a13\u3057\u305f\u3002\u4f8b\u3048\u3070\u3001RMSprop\u306e\u5834\u5408\u306e\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\u306f\u4ee5\u4e0b\u3002\npython train_mnist_opt.py -g=0 -e=10 -p='RMSprop' -u=100\n\n\n\u7d50\u679c\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u30b0\u30e9\u30d5\u3002\u6a2a\u8ef8\u304citeration\u3001\u7e26\u8ef8\u304ctraining\u306eloss\u3002\n\nAdam\u306f\u4e88\u60f3\u901a\u308a\u3044\u3044\u304c\u3001Momentum\u304c\u610f\u5916\u3068\u9811\u5f35\u3063\u3066\u308b\u3002\u6761\u4ef6\u3092\u5909\u3048\u308c\u3070\u307e\u305f\u9055\u3063\u3066\u304f\u308b\u304b\u3082\u3002\n\n\u30b3\u30fc\u30c9\u306e\u5834\u6240\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u3042\u3052\u3066\u307e\u3059\u3002\nhttps://github.com/masataka46/compare_opt_by_chainer\n#\u306f\u3058\u3081\u306b\nchainer\u306eMnist\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u3001optimizer\u3092\u6bd4\u8f03\u3059\u308b\u3002\n\n#\u74b0\u5883\nGPU:GTX1070\nOS:Ubuntu14.04\nCUDA:8.0RC\ncuDNN:5.1\npython:2.7.6\nchainer:1.14.0\n\u306a\u3069\n\n#json\u30d5\u30a1\u30a4\u30eb\u3092csv\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\nmnist\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4ee5\u4e0b\u306e\uff18\uff13\u3001\uff18\uff14\u884c\u90e8\u5206\n\n```train_mnist.py\n#Write a log of evaluation statistics for each epoch\ntrainer.extend(extensions.LogReport())\n```\n\n\u3067log\u306bloss\u3084accuracy\u3092json\u5f62\u5f0f\u3067\u66f8\u304d\u8fbc\u3093\u3067\u3044\u308b\u3002json\u306f\u6271\u3044\u306b\u304f\u3044\u306e\u3067\u3001csv\u306b\u5909\u63db\u3059\u308b\u30b3\u30fc\u30c9\u3092\u307e\u305a\u4f5c\u308b\u3002\n\n```json2csv.py\n#!/usr/bin/env python\nimport json, csv\nimport argparse\n\nparser = argparse.ArgumentParser(description='experimentation of json to csv')\nparser.add_argument('--logfilename', '-l', default='log',\n                    help='name of Log file')\nparser.add_argument('--csvfilename', '-c', default='log_csv.csv',\n                    help='name of output csv file')\nargs = parser.parse_args()\n\nfilename = args.logfilename\n\n#read json file\njson_data = open(filename)\ndata = json.load(json_data)\njson_data.close()\n\n#open csv file\nf = open(args.csvfilename, 'ab')\ncsvWriter = csv.writer(f)\n\n\nheader_list = ['iteration', 'epoch', 'main/loss', 'main/accuracy',\n               'validation/main/loss', 'validation/main/accuracy']\ncsvWriter.writerow(header_list)\n\nprint 'len(data[0])',\nprint len(data[0])\n\nfor i in range(len(data)):\n    if len(data[i]) == 4:\n        contents_list = [data[i][\"iteration\"], data[i][\"epoch\"], data[i][\"main/loss\"], data[i][\"main/accuracy\"]\n                         ]\n    elif len(data[i]) == 6:\n        contents_list = [data[i][\"iteration\"], data[i][\"epoch\"], data[i][\"main/loss\"], data[i][\"main/accuracy\"],\n                         data[i][\"validation/main/loss\"], data[i][\"validation/main/accuracy\"]]\n\n\n    csvWriter.writerow(contents_list)\n\nf.close()\n```\n\n\u3053\u308c\u3067Excel\u3068\u304b\u3067\u30b0\u30e9\u30d5\u5316\u3057\u3066\u6bd4\u8f03\u3067\u304d\u308b\u3002\n#\u6bd4\u8f03\u5bfe\u8c61\n\u6bd4\u8f03\u5bfe\u8c61\u306f\u4ee5\u4e0b\n\uff08\uff11\uff09\u901a\u5e38\u306eSGD\n\uff08\uff12\uff09Momentum\n\uff08\uff13\uff09AdaGrad\nhttp://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf\n\uff08\uff14\uff09Adam\nhttps://arxiv.org/pdf/1412.6980v8.pdf\n\uff08\uff15\uff09RMSProp\n\n\n#mnist_train.py\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\n\u5909\u66f4\u70b9\uff11\uff1aparser\u306boptimizer\u3092\u8ffd\u52a0\n\u30b3\u30de\u30f3\u30c9\u304b\u3089optimizer\u3092\u9078\u629e\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3001parser\u5185\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3002\n\n```train_mnist.py\nparser.add_argument('--optimizer', '-p', type=str, default='Adam',\n                    help='optimizer')\n```\n\n\u5909\u66f4\u70b9\uff12\uff1aoptimizer\u306e\u9078\u629e\n\u4ee5\u4e0b\u306e\u90e8\u5206\n\n```train_mnist.py\noptimizer = chainer.optimizers.Adam()\n```\n\n\u3092args.optimizer\u306b\u3088\u3063\u3066\u9078\u629e\u3067\u304d\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3002\n\n```train_mnist.py\n# Setup an optimizer\nif args.optimizer == 'AdaGrad':\n    optimizer = chainer.optimizers.AdaGrad()\nelif args.optimizer == 'SGD':\n    optimizer = chainer.optimizers.SGD()\nelif args.optimizer == 'MomentumSGD':\n    optimizer = chainer.optimizers.MomentumSGD()\nelif args.optimizer == 'RMSprop':\n    optimizer = chainer.optimizers.RMSprop()\nelse:\n    optimizer = chainer.optimizers.Adam()\n```\n\n\u5909\u66f4\u70b9\uff13\uff1aLogReport()\u306e\u5909\u66f4\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f1 epoch\u3054\u3068\u306blog\u306bloss\u3084accuracy\u304c\u8a18\u9332\u3055\u308c\u308b\u304c\u30011 epoch\u6642\u70b9\u3067\u304b\u306a\u308aloss\u304c\u6e1b\u5c11\u3057\u3066\u308b\u305f\u3081\u3001\u3082\u3063\u3068\u7d30\u304b\u304f\u8a18\u9332\u3057\u305f\u3044\u3002\u305d\u3053\u3067\uff18\uff14\u884c\u76ee\u306e\u4ee5\u4e0b\u306e\u90e8\u5206\n\n```train_mnist.py\ntrainer.extend(extensions.LogReport())\n```\n\n\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u3001100 iteration\u3054\u3068\u306b\u8a18\u9332\u3055\u305b\u308b\u3002\n\n```train_mnist.py\ntrainer.extend(extensions.LogReport(trigger=(100, 'iteration')))\n```\n\nLogReport()\u306e\u5f15\u6570\u306b\u95a2\u3057\u3066\u306f\u3001`chainer/training/extensions/log_report.py`\u306b\u8aac\u660e\u66f8\u304d\u304c\u3042\u308b\u3002\n\n#\u5b9f\u9a13\n\u96a0\u308c\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e100\u3001epoch\u6570\u306f10\u3001batch\u30b5\u30a4\u30ba\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e100\u3067\u5b9f\u9a13\u3057\u305f\u3002\u4f8b\u3048\u3070\u3001RMSprop\u306e\u5834\u5408\u306e\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\u306f\u4ee5\u4e0b\u3002\n\n```\npython train_mnist_opt.py -g=0 -e=10 -p='RMSprop' -u=100\n```\n\n#\u7d50\u679c\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u30b0\u30e9\u30d5\u3002\u6a2a\u8ef8\u304citeration\u3001\u7e26\u8ef8\u304ctraining\u306eloss\u3002\n![optimizer_graph.png](https://qiita-image-store.s3.amazonaws.com/0/116706/bb4d5dc7-c80e-a610-a943-28d0a00d7688.png)\n\nAdam\u306f\u4e88\u60f3\u901a\u308a\u3044\u3044\u304c\u3001Momentum\u304c\u610f\u5916\u3068\u9811\u5f35\u3063\u3066\u308b\u3002\u6761\u4ef6\u3092\u5909\u3048\u308c\u3070\u307e\u305f\u9055\u3063\u3066\u304f\u308b\u304b\u3082\u3002\n#\u30b3\u30fc\u30c9\u306e\u5834\u6240\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u3042\u3052\u3066\u307e\u3059\u3002\nhttps://github.com/masataka46/compare_opt_by_chainer\n\n\n\n\n", "tags": ["Chainer", "Ubuntu14.04", "DeepLearning", "python2.7", "Optimizer"]}