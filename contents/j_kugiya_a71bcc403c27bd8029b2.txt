{"tags": ["Akka", "Scala"], "context": " More than 1 year has passed since last update.Effective Akka\u306b\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066Props\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u3053\u3068\u3067\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306b\u5bfe\u51e6\u3067\u304d\u308b\u3001\u3068\u3044\u3063\u305f\u8a18\u8ff0\u304c\u3042\u3063\u3066\u30d4\u30f3\u3068\u6765\u306a\u304b\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u305f\u3002  \n\n\u30ea\u30fc\u30af\u3059\u308b\u30b5\u30f3\u30d7\u30eb\npackage leak.sample\n\nimport java.lang.management.ManagementFactory\n\nimport akka.actor.{Actor, ActorSystem, Props}\n\nobject FactoryActorApp extends App {\n  val system = ActorSystem()\n  println(\"Creating instances.\")\n  for (i <- 1 to 100000) {\n    system.actorOf(Props[SourceFActor]) ! \"foo\"\n  }\n  val pid = ManagementFactory.getRuntimeMXBean.getName.split('@').head\n  println(\"Created instances.\")\n  println(s\"jmap -histo:live ${pid}\")\n}\n\nclass SourceFActor extends Actor {\n  val i = 1\n\n  def receive = {\n    case \"foo\" =>\n      context.system.actorOf(Props(new TargetNActor(i)))\n      context.stop(self)\n  }\n}\n\nobject TargetFActor {\n  def props(n: Int) = Props(classOf[TargetFActor], n)\n}\n\nclass TargetFActor(n: Int) extends Actor {\n  def receive = {\n    case \"bar\" => println(n)\n  }\n}\n\n\u3053\u308c\u3092\u5b9f\u884c\u3057\u3066\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u305f\u305f\u3044\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6570\u3092\u78ba\u8a8d\u3059\u308b\u3002\n(find\u306e\u3068\u3053\u308d\u306funix\u3067\u306fgrep\u3068\u304b\u306b\u3059\u308b\u3002)\n> jmap -histo:live 4024 | find \"sample\"\n  14:        100000        2400000  leak.sample.SourceNActor\n  15:        100000        2400000  leak.sample.TargetNActor\n  16:        100000        1600000  leak.sample.SourceNActor$$anonfun$receive$1\n  17:        100000        1600000  leak.sample.SourceNActor$$anonfun$receive$1$$anonfun$applyOrElse$1\n  18:        100000        1600000  leak.sample.TargetNActor$$anonfun$receive$2\n 344:             1             40  leak.sample.NewActorApp$\n 617:             1             16  leak.sample.NewActorApp$delayedInit$body\n\n\n\u30ea\u30fc\u30af\u3057\u306a\u3044\u30b5\u30f3\u30d7\u30eb\npackage leak.sample\n\nimport java.lang.management.ManagementFactory\n\nimport akka.actor.{Actor, ActorSystem, Props}\n\nobject NewActorApp extends App {\n  val system = ActorSystem()\n  println(\"Creating instances.\")\n  for (i <- 1 to 100000) {\n    system.actorOf(Props[SourceNActor]) ! \"foo\"\n  }\n  val pid = ManagementFactory.getRuntimeMXBean.getName.split('@').head\n  println(\"Created instances.\")\n  println(s\"jmap -histo:live ${pid}\")\n}\n\nclass SourceNActor extends Actor {\n  val i = 1\n\n  def receive = {\n    case \"foo\" =>\n      context.system.actorOf(TargetFActor.props(i))\n      context.stop(self)\n  }\n}\n\nclass TargetNActor(n: Int) extends Actor {\n  def receive = {\n    case \"bar\" => println(n)\n  }\n}\n\n\u540c\u3058\u3088\u3046\u306bjmap\u3059\u308b\u3002\n>jmap -histo:live 3868 | find \"sample\"\n  15:        100000        2400000  leak.sample.TargetFActor\n  17:        100000        1600000  leak.sample.TargetFActor$$anonfun$receive$2\n 340:             1             40  leak.sample.FactoryActorApp$\n 616:             1             16  leak.sample.FactoryActorApp$delayedInit$body\n 617:             1             16  leak.sample.TargetFActor$\n\n\u30ea\u30fc\u30af\u3059\u308b\u65b9\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306fSourceXXActor\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u6b8b\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\n\u3053\u308c\u306fProps\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u304c\u540d\u524d\u6e21\u3057\u306b\u306a\u3063\u3066\u3044\u3066\u5b9f\u306f\u5f15\u6570\u306e\u5024\u3068\u5171\u306b\u547c\u3073\u51fa\u3057\u5143\u306eActor\u306e\u53c2\u7167\u3092\u6e21\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u304c\u539f\u56e0\u3089\u3057\u3044\u3002\n\u540d\u524d\u6e21\u3057\u5371\u967a\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3060\u308d\u3046\u304b\u3089\u3082\u3046\u5c11\u3057\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3002\n[Effective Akka](http://shop.oreilly.com/product/0636920028789.do)\u306b\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066Props\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u3053\u3068\u3067\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306b\u5bfe\u51e6\u3067\u304d\u308b\u3001\u3068\u3044\u3063\u305f\u8a18\u8ff0\u304c\u3042\u3063\u3066\u30d4\u30f3\u3068\u6765\u306a\u304b\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u305f\u3002  \n\n#### \u30ea\u30fc\u30af\u3059\u308b\u30b5\u30f3\u30d7\u30eb\n```scala\npackage leak.sample\n\nimport java.lang.management.ManagementFactory\n\nimport akka.actor.{Actor, ActorSystem, Props}\n\nobject FactoryActorApp extends App {\n  val system = ActorSystem()\n  println(\"Creating instances.\")\n  for (i <- 1 to 100000) {\n    system.actorOf(Props[SourceFActor]) ! \"foo\"\n  }\n  val pid = ManagementFactory.getRuntimeMXBean.getName.split('@').head\n  println(\"Created instances.\")\n  println(s\"jmap -histo:live ${pid}\")\n}\n\nclass SourceFActor extends Actor {\n  val i = 1\n  \n  def receive = {\n    case \"foo\" =>\n      context.system.actorOf(Props(new TargetNActor(i)))\n      context.stop(self)\n  }\n}\n\nobject TargetFActor {\n  def props(n: Int) = Props(classOf[TargetFActor], n)\n}\n\nclass TargetFActor(n: Int) extends Actor {\n  def receive = {\n    case \"bar\" => println(n)\n  }\n}\n```\n\u3053\u308c\u3092\u5b9f\u884c\u3057\u3066\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u305f\u305f\u3044\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6570\u3092\u78ba\u8a8d\u3059\u308b\u3002\n(find\u306e\u3068\u3053\u308d\u306funix\u3067\u306fgrep\u3068\u304b\u306b\u3059\u308b\u3002)\n\n```\n> jmap -histo:live 4024 | find \"sample\"\n  14:        100000        2400000  leak.sample.SourceNActor\n  15:        100000        2400000  leak.sample.TargetNActor\n  16:        100000        1600000  leak.sample.SourceNActor$$anonfun$receive$1\n  17:        100000        1600000  leak.sample.SourceNActor$$anonfun$receive$1$$anonfun$applyOrElse$1\n  18:        100000        1600000  leak.sample.TargetNActor$$anonfun$receive$2\n 344:             1             40  leak.sample.NewActorApp$\n 617:             1             16  leak.sample.NewActorApp$delayedInit$body\n```\n\n\n#### \u30ea\u30fc\u30af\u3057\u306a\u3044\u30b5\u30f3\u30d7\u30eb\n```scala\npackage leak.sample\n\nimport java.lang.management.ManagementFactory\n\nimport akka.actor.{Actor, ActorSystem, Props}\n\nobject NewActorApp extends App {\n  val system = ActorSystem()\n  println(\"Creating instances.\")\n  for (i <- 1 to 100000) {\n    system.actorOf(Props[SourceNActor]) ! \"foo\"\n  }\n  val pid = ManagementFactory.getRuntimeMXBean.getName.split('@').head\n  println(\"Created instances.\")\n  println(s\"jmap -histo:live ${pid}\")\n}\n\nclass SourceNActor extends Actor {\n  val i = 1\n  \n  def receive = {\n    case \"foo\" =>\n      context.system.actorOf(TargetFActor.props(i))\n      context.stop(self)\n  }\n}\n\nclass TargetNActor(n: Int) extends Actor {\n  def receive = {\n    case \"bar\" => println(n)\n  }\n}\n```\n\n\u540c\u3058\u3088\u3046\u306bjmap\u3059\u308b\u3002\n\n```\n>jmap -histo:live 3868 | find \"sample\"\n  15:        100000        2400000  leak.sample.TargetFActor\n  17:        100000        1600000  leak.sample.TargetFActor$$anonfun$receive$2\n 340:             1             40  leak.sample.FactoryActorApp$\n 616:             1             16  leak.sample.FactoryActorApp$delayedInit$body\n 617:             1             16  leak.sample.TargetFActor$\n```\n\n\u30ea\u30fc\u30af\u3059\u308b\u65b9\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306fSourceXXActor\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u6b8b\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\n\u3053\u308c\u306fProps\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u304c\u540d\u524d\u6e21\u3057\u306b\u306a\u3063\u3066\u3044\u3066\u5b9f\u306f\u5f15\u6570\u306e\u5024\u3068\u5171\u306b\u547c\u3073\u51fa\u3057\u5143\u306eActor\u306e\u53c2\u7167\u3092\u6e21\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u304c\u539f\u56e0\u3089\u3057\u3044\u3002\n\n\u540d\u524d\u6e21\u3057\u5371\u967a\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3060\u308d\u3046\u304b\u3089\u3082\u3046\u5c11\u3057\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3002\n"}