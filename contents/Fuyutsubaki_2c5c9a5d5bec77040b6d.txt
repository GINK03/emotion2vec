{"context": "\u82e5\u5e72\u4eca\u66f4\u611f\u304c\u3042\u308b\u3051\u308c\u3069\u5642\u306e\u30ba\u30f3\u30c9\u30b3\u95a2\u6570\u3092TMP\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\n\n\u30b3\u30fc\u30c9\n#include<cstdint>\n#include<type_traits>\n#include<iostream>\n\ntemplate<std::uint32_t n>\nstruct seed_impl\n{\n    static const std::uint32_t value = (__TIME__ __DATE__)[n] + seed_impl<n-1>::value;\n};\ntemplate<>\nstruct seed_impl<0>\n{\n    static const std::uint32_t value = (__TIME__ __DATE__)[0];\n};\nusing seed= std::integral_constant<std::uint32_t, seed_impl<sizeof(__TIME__ __DATE__)-2>::value>;\n\ntemplate<std::uint32_t n>\nclass xorshift\n{\n    static const std::uint32_t a = n ^ (n << 13);\n    static const std::uint32_t b = a ^ (a >> 17);\npublic:\n    static const std::uint32_t value = b ^ (b << 5);\n    using next = xorshift<value>;\n};\nvoid print(){}\ntemplate<class H,class ...T>\nvoid print(H h,T...t)\n{\n    print(t...);\n    if(h)\n        std::cout<<\"\u30ba\u30f3\";\n    else\n        std::cout<<\"\u30c9\u30b3\";\n}\n\ntemplate<class R,class...T>\nvoid zundoko(R,std::false_type ,std::true_type,std::true_type,std::true_type,std::true_type,T...x)\n{\n    print(std::false_type{}, std::true_type{},std::true_type{},std::true_type{},std::true_type{},x...);\n    std::cout<<\"\u30ad\u30e8\u30b7\";\n}\ntemplate<class R,class...T>\nvoid zundoko(R,T...x)\n{\n    zundoko(typename R::next{}, std::integral_constant<bool, R::value % 2>{},x...);\n}\n#include<iostream>\nint main()\n{\n    zundoko(xorshift<seed::value>{});\n}\n\n\n\n\u7d50\u679c\nStart\n\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n0\nFinish\n\n\nhttp://melpon.org/wandbox/permlink/gRhEhqEhfIe8D3x0\n\u82e5\u5e72\u4eca\u66f4\u611f\u304c\u3042\u308b\u3051\u308c\u3069\u5642\u306e\u30ba\u30f3\u30c9\u30b3\u95a2\u6570\u3092TMP\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\n\n\n###\u30b3\u30fc\u30c9\n```cpp\n#include<cstdint>\n#include<type_traits>\n#include<iostream>\n\ntemplate<std::uint32_t n>\nstruct seed_impl\n{\n    static const std::uint32_t value = (__TIME__ __DATE__)[n] + seed_impl<n-1>::value;\n};\ntemplate<>\nstruct seed_impl<0>\n{\n    static const std::uint32_t value = (__TIME__ __DATE__)[0];\n};\nusing seed= std::integral_constant<std::uint32_t, seed_impl<sizeof(__TIME__ __DATE__)-2>::value>;\n\ntemplate<std::uint32_t n>\nclass xorshift\n{\n    static const std::uint32_t a = n ^ (n << 13);\n    static const std::uint32_t b = a ^ (a >> 17);\npublic:\n    static const std::uint32_t value = b ^ (b << 5);\n    using next = xorshift<value>;\n};\nvoid print(){}\ntemplate<class H,class ...T>\nvoid print(H h,T...t)\n{\n    print(t...);\n    if(h)\n        std::cout<<\"\u30ba\u30f3\";\n    else\n        std::cout<<\"\u30c9\u30b3\";\n}\n\ntemplate<class R,class...T>\nvoid zundoko(R,std::false_type ,std::true_type,std::true_type,std::true_type,std::true_type,T...x)\n{\n    print(std::false_type{}, std::true_type{},std::true_type{},std::true_type{},std::true_type{},x...);\n    std::cout<<\"\u30ad\u30e8\u30b7\";\n}\ntemplate<class R,class...T>\nvoid zundoko(R,T...x)\n{\n    zundoko(typename R::next{}, std::integral_constant<bool, R::value % 2>{},x...);\n}\n#include<iostream>\nint main()\n{\n    zundoko(xorshift<seed::value>{});\n}\n\n```\n\n###\u7d50\u679c\n\n```bash\nStart\n\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n0\nFinish\n\n```\n\n\nhttp://melpon.org/wandbox/permlink/gRhEhqEhfIe8D3x0\n\n", "tags": ["C++", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7"]}