{"context": " More than 1 year has passed since last update.\u77e5\u3063\u3066\u305f\u3089\u697d\u3067\u304d\u308b\u306e\u3067Flask\u4f7f\u3046\u4eba\u306b\u306f\u899a\u3048\u3066\u6b32\u3057\u3044\nflask.request.args\u306e\u5b9f\u614b\u306f\u30bd\u30fc\u30b9\u8aad\u3080\u3068\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u306d\u3002\nwerkzeug.datastructures.ImmutableMultiDict\n\nrequest.args\u3067\u4e00\u756a\u4f7f\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u591a\u5206get\u3060\u3068\u601d\u3046\u3093\u3067\u3059\u304c\u5b9f\u614b\u306f\nfrom werkzeug.datastructures import TypeConversionDict\n\n\u306eget\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u3053\u308c\u306e\u30d8\u30eb\u30d7\u8aad\u3080\u3068\u578b\u6307\u5b9a\u3067\u304d\u308b\u3093\u3067\u3059\u306d\u3002\n |  ----------------------------------------------------------------------\n |  Methods inherited from TypeConversionDict:\n |  \n |  get(self, key, default=None, type=None)\n |      Return the default value if the requested data doesn't exist.\n |      If `type` is provided and is a callable it should convert the value,\n |      return it or raise a :exc:`ValueError` if that is not possible.  In\n |      this case the function will return the default as if the value was not\n |      found:\n |      \n |      >>> d = TypeConversionDict(foo='42', bar='blub')\n |      >>> d.get('foo', type=int)\n |      42\n |      >>> d.get('bar', -1, type=int)\n |      -1\n |      \n |      :param key: The key to be looked up.\n |      :param default: The default value to be returned if the key can't\n |                      be looked up.  If not further specified `None` is\n |                      returned.\n |      :param type: A callable that is used to cast the value in the\n |                   :class:`MultiDict`.  If a :exc:`ValueError` is raised\n |                   by this callable the default value is returned.\n |  \n |  ----------------------------------------------------------------------\n\n\u3064\u307e\u308a\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306fINT\u578b\u306a\u3069\u306e\u6307\u5b9a\u304c\u7c21\u5358\u306b\u51fa\u6765\u308b\u3093\u3067\u3059\u306d\u3002\n\u7c21\u5358\u306a\u4f8b\u3092\u6319\u3052\u308b\u3068\u3001\u53c2\u7167\u7cfb\u306eAPI\u3067offset, limit\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3088\u304f\u4f5c\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u578b\u306e\u6307\u5b9a\u3092\u542b\u3081\u3066\u4e0b\u306e2\u884c\u3067\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n    offset = request.args.get(\"offset\", default=0, type=int)\n    limit = request.args.get(\"limit\", default=10, type=int)\n\nFlask\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u8aad\u3080\u3060\u3051\u3067\u306f\u6c17\u4ed8\u3051\u306a\u3044\u3053\u3068\u304c\u7d50\u69cb\u3042\u308b\u306e\u3067werkzeug\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u5b9f\u88c5\u8aad\u3093\u3060\u308a\u3057\u3066\u307f\u308b\u3068\u610f\u5916\u3068\u767a\u898b\u304c\u3042\u308b\u306e\u3067\u305c\u3072\u8aad\u3093\u3067\u4e0b\u3055\u3044\u3002\n\u3053\u308c\u3092\u3082\u3063\u3068\u62e1\u5f35\u3059\u308b\u3068\u81ea\u4f5c\u306e\u30c7\u30fc\u30bf\u578b\u3092\u4f7f\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\nclass SortType(object):\n    accepts = [\"-time\", \"-size\", \"+time\", \"+size\"]    \n    default = [\"-time\"]\n\n    def __init__(self, sort_parameter):\n        super(SortType, self).__init__()    \n        if sort_parameter in self.accepts:\n           self.sort = sort_parameter\n        else:\n           self.sort = self.default\n\n    def __repr__(self):\n        return self.sort\n\n    def __str__(self):\n        return self.sort\n\nsort = '%s' % request.args.get(\"sort\", type=SortType)\n\n\u3044\u304f\u3064\u304b\u306e\u30bd\u30fc\u30c8\u30bf\u30a4\u30d7\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30bd\u30fc\u30c8\u3092\u3082\u3064\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066 type \u306b\u305d\u308c\u3092\u5b9a\u7fa9\u3057\u3066 sort\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u3066\u307e\u3059\u3002\n\n\u77e5\u3063\u3066\u305f\u3089\u697d\u3067\u304d\u308b\u306e\u3067Flask\u4f7f\u3046\u4eba\u306b\u306f\u899a\u3048\u3066\u6b32\u3057\u3044\n\nflask.request.args\u306e\u5b9f\u614b\u306f\u30bd\u30fc\u30b9\u8aad\u3080\u3068\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u306d\u3002\n\n```\nwerkzeug.datastructures.ImmutableMultiDict\n```\n\nrequest.args\u3067\u4e00\u756a\u4f7f\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u591a\u5206get\u3060\u3068\u601d\u3046\u3093\u3067\u3059\u304c\u5b9f\u614b\u306f\n\n```\nfrom werkzeug.datastructures import TypeConversionDict\n```\n\n\u306eget\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n\u3053\u308c\u306e\u30d8\u30eb\u30d7\u8aad\u3080\u3068\u578b\u6307\u5b9a\u3067\u304d\u308b\u3093\u3067\u3059\u306d\u3002\n\n```\n |  ----------------------------------------------------------------------\n |  Methods inherited from TypeConversionDict:\n |  \n |  get(self, key, default=None, type=None)\n |      Return the default value if the requested data doesn't exist.\n |      If `type` is provided and is a callable it should convert the value,\n |      return it or raise a :exc:`ValueError` if that is not possible.  In\n |      this case the function will return the default as if the value was not\n |      found:\n |      \n |      >>> d = TypeConversionDict(foo='42', bar='blub')\n |      >>> d.get('foo', type=int)\n |      42\n |      >>> d.get('bar', -1, type=int)\n |      -1\n |      \n |      :param key: The key to be looked up.\n |      :param default: The default value to be returned if the key can't\n |                      be looked up.  If not further specified `None` is\n |                      returned.\n |      :param type: A callable that is used to cast the value in the\n |                   :class:`MultiDict`.  If a :exc:`ValueError` is raised\n |                   by this callable the default value is returned.\n |  \n |  ----------------------------------------------------------------------\n```\n\n\u3064\u307e\u308a\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306fINT\u578b\u306a\u3069\u306e\u6307\u5b9a\u304c\u7c21\u5358\u306b\u51fa\u6765\u308b\u3093\u3067\u3059\u306d\u3002\n\n\n\u7c21\u5358\u306a\u4f8b\u3092\u6319\u3052\u308b\u3068\u3001\u53c2\u7167\u7cfb\u306eAPI\u3067offset, limit\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3088\u304f\u4f5c\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u578b\u306e\u6307\u5b9a\u3092\u542b\u3081\u3066\u4e0b\u306e2\u884c\u3067\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```python\n    offset = request.args.get(\"offset\", default=0, type=int)\n    limit = request.args.get(\"limit\", default=10, type=int)\n```\n\n\nFlask\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u8aad\u3080\u3060\u3051\u3067\u306f\u6c17\u4ed8\u3051\u306a\u3044\u3053\u3068\u304c\u7d50\u69cb\u3042\u308b\u306e\u3067werkzeug\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u5b9f\u88c5\u8aad\u3093\u3060\u308a\u3057\u3066\u307f\u308b\u3068\u610f\u5916\u3068\u767a\u898b\u304c\u3042\u308b\u306e\u3067\u305c\u3072\u8aad\u3093\u3067\u4e0b\u3055\u3044\u3002\n\n\u3053\u308c\u3092\u3082\u3063\u3068\u62e1\u5f35\u3059\u308b\u3068\u81ea\u4f5c\u306e\u30c7\u30fc\u30bf\u578b\u3092\u4f7f\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```python\nclass SortType(object):\n    accepts = [\"-time\", \"-size\", \"+time\", \"+size\"]    \n    default = [\"-time\"]\n\n    def __init__(self, sort_parameter):\n        super(SortType, self).__init__()    \n        if sort_parameter in self.accepts:\n           self.sort = sort_parameter\n        else:\n           self.sort = self.default\n\n    def __repr__(self):\n        return self.sort\n\n    def __str__(self):\n        return self.sort\n```\n\n```python\nsort = '%s' % request.args.get(\"sort\", type=SortType)\n```\n\n\u3044\u304f\u3064\u304b\u306e\u30bd\u30fc\u30c8\u30bf\u30a4\u30d7\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30bd\u30fc\u30c8\u3092\u3082\u3064\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066 type \u306b\u305d\u308c\u3092\u5b9a\u7fa9\u3057\u3066 sort\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u3066\u307e\u3059\u3002", "tags": ["Python", "Flask"]}