{"context": " More than 1 year has passed since last update.\n\n\u30ea\u30f3\u30af\n\u554f\u984c http://nabetani.sakura.ne.jp/hena/orde01rotbk/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/4bf43031749c81c35526\n\n\u5b9f\u88c5\n\u5f53\u65e5\u306f\u30c6\u30b9\u30c8\u304c\u534a\u5206\u304f\u3089\u3044\u843d\u3061\u3066\u6557\u5317\u3002\n\u89e3\u8aac\u3092\u805e\u3044\u3066\u98db\u3073\u77f3\u306b\u6c17\u3065\u304d\u3001\u6559\u308f\u3063\u305f chunk \u4f7f\u3063\u3066\u3084\u3063\u3068\u30c6\u30b9\u30c8\u7a81\u7834\u3002\n\u5f37\u3044\u3066\u4ed6\u306e\u4eba\u3068\u306e\u5dee\u5225\u70b9\u3092\u6319\u3052\u308b\u306a\u3089\u3001 ActiveSupport \u306e Array#from \u3068 Object#presence \u304f\u3089\u3044\u3002\ntranspose \u306a\u306e\u306b transpose \u3057\u3066\u306a\u3044\u306e\u306f\u3054\u611b\u5b0c\u3002\n(\u5f53\u65e5\u306f 90 \u5ea6\u56de\u8ee2\u3068\u304b transpose \u3067\u3088\u3086\u30fc\u3068\u304b\u601d\u3063\u3066\u305f\u3002 reverse \u3059\u308c\u3070\u3088\u304b\u3063\u305f\u306e\u306d\u3002)\nrequire 'bundler'\nBundler.require\n\nclass Field\n  attr_reader :field\n\n  def initialize(size)\n    @field = Array.new(size) { [nil] * size }\n  end\n\n  def fill_by(group)\n    group.each do |size|\n      fill(*detect_space, size)\n    end\n  end\n\n  def fill(x, y, size)\n    (x...(x + size)).each do |_x|\n      (y...(y + size)).each do |_y|\n        @field[_y][_x] = size\n      end\n    end\n  end\n\n  def detect_space\n    y = @field.find_index(@field.detect {|row| row.include?(nil) })\n    x = @field[y].find_index(nil)\n    [x, y]\n  end\n\n  def inspect\n    @field.map do |row|\n      row.map {|column| \"%03d\" % column }.join(\",\")\n    end.join(\"\\n\")\n  end\n\n  def to_s\n    inspect\n  end\n\n  def size\n    @field.size\n  end\n\n  def transpose\n    field = Field.new(size)\n\n    @field.each.with_index do |row, y|\n      row.each.with_index do |column, x|\n        field.field[x][size - y - 1] = column\n      end\n    end\n\n    field\n  end\nend\n\ndef solve(input)\n  ans_key, groups = input.match(/(\\d+):(.*)/).captures\n  groups = groups.scan(/\\((.*?)\\)/).flatten.map {|group| group.split(?,).map(&:to_i) }\n\n  field = Field.new(groups.first.sum)\n  groups.each do |group|\n    field.fill_by(group)\n  end\n  groups = field.transpose.field.uniq.map(&:uniq)\n  g = groups.map.with_index {|group, i| group.chunk {|e| (groups - groups.from(i)).flatten.exclude?(e).presence }.map(&:last) }.flatten(1)[ans_key.to_i - 1]\n  \"(#{g.join(?,)})\"\nend\n\ndef test(input, expect)\n  actual = solve(input)\n\n  if actual == expect\n    puts \"OK: #{input}\"\n  else\n    raise \"NG: #{input} : expect #{expect} but got #{actual}\"\n  end\nend\n\nDATA.each_line do |line|\n  puts line\n  eval line.match(%r{.*(test.*)}).captures.first\nend\n\n__END__\n/*0*/ test( \"4:(55,44,48)(40,4)(52)(26,29)(23,3)(20,31,21)(5,47)(43)(9,17)(1,8)(32)(25)\", \"(32,31)\" );\n/*1*/ test( \"6:(33,29,50)(4,25)(37)(15,35)(16,9)(7,2)(17)(42,18)(6,11)(8,27)(24)(19)\", \"(6,17,2)\" );\n/*2*/ test( \"7:(60,50)(23,27)(24,22,14)(7,16)(8,6)(12,15)(13)(2,28)(26)(4,21,3)(18)(17)\", \"(4,16)\" );\n/*3*/ test( \"6:(99,73,56)(17,39)(68,22)(36,25)(57,42)(9,16)(2,7)(10,28)(23)(15,87,18)(72)(69)\", \"(10,36,22)\" );\n/*4*/ test( \"7:(79,49,66,63)(32,17)(3,60)(29,57)(55,22,2)(20,14)(15,28)(33,9)(24)(11,134)(123)\", \"(29,17)\" );\n/*5*/ test( \"7:(159,129)(57,72)(56,39,25,16,23)(9,7)(2,28)(36)(42,15)(17,22)(87)(10,18)(73)(68)(60)\", \"(10,28)\" );\n/*6*/ test( \"14:(113,71,68)(32,36)(42,29)(13,44,4)(40)(62,37,38,31)(7,108)(25,12)(11,34)(23)(77,10)(67)\", \"(36)\" );\n/*7*/ test( \"8:(145,125)(53,72)(45,11,9,16,31,33)(2,7)(13)(8,15)(21)(14,32)(30,37,19)(80)(18,73)(62)(55)\", \"(31)\" );\n/*8*/ test( \"1:(175,140,164)(35,29,52,24)(28,160)(6,23)(130,86)(43,60)(26,17)(77)(44,68)(174)(5,155)(150)\", \"(174,130,175)\" );\n/*9*/ test( \"6:(240,168,187)(149,19)(206)(163,77)(86,82,58)(40,18)(22,202)(4,78)(192,61)(62)(48,13)(35,118)(83)\", \"(4,82)\" );\n/*10*/ test( \"5:(100,73,59)(14,45)(56,31)(58,42)(25,51)(19,36,26)(16,18,8)(2,17)(10)(77)(74)(28)(23,30)(44,7)(37)\", \"(2,19,56,73)\" );\n/*11*/ test( \"8:(100,88,76)(27,49)(12,19,39,18)(95,11,6)(3,24)(5,1)(21)(20)(16)(2,47)(77,45)(92)(69,26)(17,60)(43)\", \"(19)\" );\n/*12*/ test( \"11:(262,196,203)(83,106,7)(210)(161,84,17)(36,41,23)(18,111)(31,5)(64)(77,38)(102)(73,248)(238)(175)\", \"(248)\" );\n/*13*/ test( \"9:(117,79,74)(5,69)(84)(71,46)(20,49)(25,39,57,29)(82,14)(78)(35,18)(13,12,50)(1,11)(4,10)(33,6)(27)\", \"(1,12)\" );\n/*14*/ test( \"7:(163,95,78)(17,61)(68,44)(24,81)(89,94,72)(15,66)(42,45)(84,5)(79,20)(59,3)(26,22)(16,50)(4,34)(30)\", \"(30,26,3)\" );\n/*15*/ test( \"10:(100,95,69)(26,43)(11,16,77,17)(88,12)(6,5)(1,20)(19)(60)(39)(18,21)(45,92)(76,27,3)(24)(49,2)(47)\", \"(47,2)\" );\n/*16*/ test( \"8:(120,78,102)(34,20,24)(14,6)(2,10,23,91)(8)(53,13)(75,45)(36)(4,32)(30,47,25)(22,3)(19,107)(105)(88)\", \"(4,36,13)\" );\n/*17*/ test( \"13:(119,124,96)(28,68)(114,5)(117,40)(56,52)(4,48)(21,15,24)(106,8)(6,9)(98,38,16)(13,20)(22,7)(75)(60)\", \"(20)\" );\n/*18*/ test( \"2:(302,277,246)(57,189)(25,117,109,26)(235,92)(83)(8,135,49)(90,127)(81,157)(53,37)(5,76)(304)(288)(233)\", \"(53,90,92)\" );\n/*19*/ test( \"13:(158,109,240)(49,60)(114,82,11)(71)(126,267)(62,52)(10,42)(40,32)(8,51,141)(48)(14,37)(39,9)(23)(7,53)(46)\", \"(60)\" );\n/*20*/ test( \"8:(132,113,251)(19,36,58)(107,27,17)(10,21,22)(25,12)(1,20)(13)(80)(32,6)(26)(23,35)(130)(121,245)(127,3)(124)\", \"(26,6)\" );\n/*21*/ test( \"4:(187,127,194)(60,67)(131,76,40)(33,72,156)(44,29)(19,10)(55,21)(82)(13,27,4)(23)(34)(50)(190,30)(160,2)(158)\", \"(60,127)\" );\n/*22*/ test( \"12:(239,245)(132,107)(124,121)(27,25,32,23)(3,118)(35,115)(113,19)(12,13)(17,10)(6,26)(21,1)(20)(36)(22,80)(58)\", \"(124,245)\" );\n/*23*/ test( \"3:(176,152)(24,38,90)(80,63,43,14)(52)(20,23)(17,26,40)(37,42,86)(72,25)(16,10)(6,4)(49,19,8,5)(47)(3,44)(11)(30)\", \"(17,63)\" );\n/*24*/ test( \"15:(171,181)(95,76)(93,88)(19,30,27)(42,40,32)(5,83)(3,15,29,78)(21,12)(9,18)(8,54)(4,25)(2,46)(22)(44)(1,24)(23)\", \"(93,181)\" );\n/*25*/ test( \"13:(152,88,112)(64,24)(44,92)(200,12,4)(8,7,33)(1,6)(16,5)(11)(27)(18,15)(3,31,73)(29,19)(10,9)(40)(39)(77,2)(75)\", \"(3,15)\" );\n/*26*/ test( \"13:(484,316,379)(108,145,63)(82,360)(42,66)(29,198)(18,24)(308,194)(119)(69,50)(168,80)(114,149)(440)(387,35)(352)\", \"(379)\" );\n/*27*/ test( \"12:(181,191)(93,88)(24,23,54,46,44)(1,22)(25)(2,42)(4,18)(8,40)(29)(9,21,32)(15,12)(3,30)(5,103,27)(98)(19,95)(76)\", \"(21)\" );\n/*28*/ test( \"18:(83,79,123)(35,44)(52,31)(21,36,9)(27,60,89)(48,25)(10,20,33)(23,12)(2,5,13)(11,3)(8)(102,49,45)(16,73)(4,57)(53)\", \"(123)\" );\n/*29*/ test( \"4:(649,439,456)(214,208,17)(473)(6,55,147)(385,260,4)(175,49)(104)(12,135)(116)(81,94)(125,216)(203,7)(615)(510)(419)\", \"(81,175,4)\" );\n/*30*/ test( \"17:(100,114,48,53)(43,5)(58)(23,20)(61,25,14)(3,75)(11,47,96)(36)(95,49)(24,51)(37,105,27)(78)(9,28)(59,26,19)(7,40)(33)\", \"(58,5)\" );\n\nsource 'https://rubygems.org'\n\ngem 'activesupport', require: 'active_support/all'\ngem 'pry'\ngem 'tapp'\ngem 'awesome_print'\n\nGEM\n  remote: https://rubygems.org/\n  specs:\n    activesupport (4.2.5.1)\n      i18n (~> 0.7)\n      json (~> 1.7, >= 1.7.7)\n      minitest (~> 5.1)\n      thread_safe (~> 0.3, >= 0.3.4)\n      tzinfo (~> 1.1)\n    awesome_print (1.6.1)\n    coderay (1.1.0)\n    i18n (0.7.0)\n    json (1.8.3)\n    method_source (0.8.2)\n    minitest (5.8.4)\n    pry (0.10.3)\n      coderay (~> 1.1.0)\n      method_source (~> 0.8.1)\n      slop (~> 3.4)\n    slop (3.6.0)\n    tapp (1.5.0)\n      thor\n    thor (0.19.1)\n    thread_safe (0.3.5)\n    tzinfo (1.2.2)\n      thread_safe (~> 0.1)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  activesupport\n  awesome_print\n  pry\n  tapp\n\nBUNDLED WITH\n   1.11.2\n\n## \u30ea\u30f3\u30af\n\n\u554f\u984c http://nabetani.sakura.ne.jp/hena/orde01rotbk/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/4bf43031749c81c35526\n\n## \u5b9f\u88c5\n\n\u5f53\u65e5\u306f\u30c6\u30b9\u30c8\u304c\u534a\u5206\u304f\u3089\u3044\u843d\u3061\u3066[\u6557\u5317](https://github.com/mtsmfm/sandbox/commit/7d173d84a092b9e779c694dacb1d2a6452245433)\u3002\n\u89e3\u8aac\u3092\u805e\u3044\u3066\u98db\u3073\u77f3\u306b\u6c17\u3065\u304d\u3001[\u6559\u308f\u3063\u305f chunk \u4f7f\u3063\u3066\u3084\u3063\u3068\u30c6\u30b9\u30c8\u7a81\u7834](https://github.com/mtsmfm/sandbox/commit/0ab8ea2969182d7d41ff4921672780d5d719bd10)\u3002\n\n\u5f37\u3044\u3066\u4ed6\u306e\u4eba\u3068\u306e\u5dee\u5225\u70b9\u3092\u6319\u3052\u308b\u306a\u3089\u3001 ActiveSupport \u306e `Array#from` \u3068 `Object#presence` \u304f\u3089\u3044\u3002\ntranspose \u306a\u306e\u306b transpose \u3057\u3066\u306a\u3044\u306e\u306f\u3054\u611b\u5b0c\u3002\n(\u5f53\u65e5\u306f 90 \u5ea6\u56de\u8ee2\u3068\u304b transpose \u3067\u3088\u3086\u30fc\u3068\u304b\u601d\u3063\u3066\u305f\u3002 reverse \u3059\u308c\u3070\u3088\u304b\u3063\u305f\u306e\u306d\u3002)\n\n```ruby\nrequire 'bundler'\nBundler.require\n\nclass Field\n  attr_reader :field\n\n  def initialize(size)\n    @field = Array.new(size) { [nil] * size }\n  end\n\n  def fill_by(group)\n    group.each do |size|\n      fill(*detect_space, size)\n    end\n  end\n\n  def fill(x, y, size)\n    (x...(x + size)).each do |_x|\n      (y...(y + size)).each do |_y|\n        @field[_y][_x] = size\n      end\n    end\n  end\n\n  def detect_space\n    y = @field.find_index(@field.detect {|row| row.include?(nil) })\n    x = @field[y].find_index(nil)\n    [x, y]\n  end\n\n  def inspect\n    @field.map do |row|\n      row.map {|column| \"%03d\" % column }.join(\",\")\n    end.join(\"\\n\")\n  end\n\n  def to_s\n    inspect\n  end\n\n  def size\n    @field.size\n  end\n\n  def transpose\n    field = Field.new(size)\n\n    @field.each.with_index do |row, y|\n      row.each.with_index do |column, x|\n        field.field[x][size - y - 1] = column\n      end\n    end\n\n    field\n  end\nend\n\ndef solve(input)\n  ans_key, groups = input.match(/(\\d+):(.*)/).captures\n  groups = groups.scan(/\\((.*?)\\)/).flatten.map {|group| group.split(?,).map(&:to_i) }\n\n  field = Field.new(groups.first.sum)\n  groups.each do |group|\n    field.fill_by(group)\n  end\n  groups = field.transpose.field.uniq.map(&:uniq)\n  g = groups.map.with_index {|group, i| group.chunk {|e| (groups - groups.from(i)).flatten.exclude?(e).presence }.map(&:last) }.flatten(1)[ans_key.to_i - 1]\n  \"(#{g.join(?,)})\"\nend\n\ndef test(input, expect)\n  actual = solve(input)\n\n  if actual == expect\n    puts \"OK: #{input}\"\n  else\n    raise \"NG: #{input} : expect #{expect} but got #{actual}\"\n  end\nend\n\nDATA.each_line do |line|\n  puts line\n  eval line.match(%r{.*(test.*)}).captures.first\nend\n\n__END__\n/*0*/ test( \"4:(55,44,48)(40,4)(52)(26,29)(23,3)(20,31,21)(5,47)(43)(9,17)(1,8)(32)(25)\", \"(32,31)\" );\n/*1*/ test( \"6:(33,29,50)(4,25)(37)(15,35)(16,9)(7,2)(17)(42,18)(6,11)(8,27)(24)(19)\", \"(6,17,2)\" );\n/*2*/ test( \"7:(60,50)(23,27)(24,22,14)(7,16)(8,6)(12,15)(13)(2,28)(26)(4,21,3)(18)(17)\", \"(4,16)\" );\n/*3*/ test( \"6:(99,73,56)(17,39)(68,22)(36,25)(57,42)(9,16)(2,7)(10,28)(23)(15,87,18)(72)(69)\", \"(10,36,22)\" );\n/*4*/ test( \"7:(79,49,66,63)(32,17)(3,60)(29,57)(55,22,2)(20,14)(15,28)(33,9)(24)(11,134)(123)\", \"(29,17)\" );\n/*5*/ test( \"7:(159,129)(57,72)(56,39,25,16,23)(9,7)(2,28)(36)(42,15)(17,22)(87)(10,18)(73)(68)(60)\", \"(10,28)\" );\n/*6*/ test( \"14:(113,71,68)(32,36)(42,29)(13,44,4)(40)(62,37,38,31)(7,108)(25,12)(11,34)(23)(77,10)(67)\", \"(36)\" );\n/*7*/ test( \"8:(145,125)(53,72)(45,11,9,16,31,33)(2,7)(13)(8,15)(21)(14,32)(30,37,19)(80)(18,73)(62)(55)\", \"(31)\" );\n/*8*/ test( \"1:(175,140,164)(35,29,52,24)(28,160)(6,23)(130,86)(43,60)(26,17)(77)(44,68)(174)(5,155)(150)\", \"(174,130,175)\" );\n/*9*/ test( \"6:(240,168,187)(149,19)(206)(163,77)(86,82,58)(40,18)(22,202)(4,78)(192,61)(62)(48,13)(35,118)(83)\", \"(4,82)\" );\n/*10*/ test( \"5:(100,73,59)(14,45)(56,31)(58,42)(25,51)(19,36,26)(16,18,8)(2,17)(10)(77)(74)(28)(23,30)(44,7)(37)\", \"(2,19,56,73)\" );\n/*11*/ test( \"8:(100,88,76)(27,49)(12,19,39,18)(95,11,6)(3,24)(5,1)(21)(20)(16)(2,47)(77,45)(92)(69,26)(17,60)(43)\", \"(19)\" );\n/*12*/ test( \"11:(262,196,203)(83,106,7)(210)(161,84,17)(36,41,23)(18,111)(31,5)(64)(77,38)(102)(73,248)(238)(175)\", \"(248)\" );\n/*13*/ test( \"9:(117,79,74)(5,69)(84)(71,46)(20,49)(25,39,57,29)(82,14)(78)(35,18)(13,12,50)(1,11)(4,10)(33,6)(27)\", \"(1,12)\" );\n/*14*/ test( \"7:(163,95,78)(17,61)(68,44)(24,81)(89,94,72)(15,66)(42,45)(84,5)(79,20)(59,3)(26,22)(16,50)(4,34)(30)\", \"(30,26,3)\" );\n/*15*/ test( \"10:(100,95,69)(26,43)(11,16,77,17)(88,12)(6,5)(1,20)(19)(60)(39)(18,21)(45,92)(76,27,3)(24)(49,2)(47)\", \"(47,2)\" );\n/*16*/ test( \"8:(120,78,102)(34,20,24)(14,6)(2,10,23,91)(8)(53,13)(75,45)(36)(4,32)(30,47,25)(22,3)(19,107)(105)(88)\", \"(4,36,13)\" );\n/*17*/ test( \"13:(119,124,96)(28,68)(114,5)(117,40)(56,52)(4,48)(21,15,24)(106,8)(6,9)(98,38,16)(13,20)(22,7)(75)(60)\", \"(20)\" );\n/*18*/ test( \"2:(302,277,246)(57,189)(25,117,109,26)(235,92)(83)(8,135,49)(90,127)(81,157)(53,37)(5,76)(304)(288)(233)\", \"(53,90,92)\" );\n/*19*/ test( \"13:(158,109,240)(49,60)(114,82,11)(71)(126,267)(62,52)(10,42)(40,32)(8,51,141)(48)(14,37)(39,9)(23)(7,53)(46)\", \"(60)\" );\n/*20*/ test( \"8:(132,113,251)(19,36,58)(107,27,17)(10,21,22)(25,12)(1,20)(13)(80)(32,6)(26)(23,35)(130)(121,245)(127,3)(124)\", \"(26,6)\" );\n/*21*/ test( \"4:(187,127,194)(60,67)(131,76,40)(33,72,156)(44,29)(19,10)(55,21)(82)(13,27,4)(23)(34)(50)(190,30)(160,2)(158)\", \"(60,127)\" );\n/*22*/ test( \"12:(239,245)(132,107)(124,121)(27,25,32,23)(3,118)(35,115)(113,19)(12,13)(17,10)(6,26)(21,1)(20)(36)(22,80)(58)\", \"(124,245)\" );\n/*23*/ test( \"3:(176,152)(24,38,90)(80,63,43,14)(52)(20,23)(17,26,40)(37,42,86)(72,25)(16,10)(6,4)(49,19,8,5)(47)(3,44)(11)(30)\", \"(17,63)\" );\n/*24*/ test( \"15:(171,181)(95,76)(93,88)(19,30,27)(42,40,32)(5,83)(3,15,29,78)(21,12)(9,18)(8,54)(4,25)(2,46)(22)(44)(1,24)(23)\", \"(93,181)\" );\n/*25*/ test( \"13:(152,88,112)(64,24)(44,92)(200,12,4)(8,7,33)(1,6)(16,5)(11)(27)(18,15)(3,31,73)(29,19)(10,9)(40)(39)(77,2)(75)\", \"(3,15)\" );\n/*26*/ test( \"13:(484,316,379)(108,145,63)(82,360)(42,66)(29,198)(18,24)(308,194)(119)(69,50)(168,80)(114,149)(440)(387,35)(352)\", \"(379)\" );\n/*27*/ test( \"12:(181,191)(93,88)(24,23,54,46,44)(1,22)(25)(2,42)(4,18)(8,40)(29)(9,21,32)(15,12)(3,30)(5,103,27)(98)(19,95)(76)\", \"(21)\" );\n/*28*/ test( \"18:(83,79,123)(35,44)(52,31)(21,36,9)(27,60,89)(48,25)(10,20,33)(23,12)(2,5,13)(11,3)(8)(102,49,45)(16,73)(4,57)(53)\", \"(123)\" );\n/*29*/ test( \"4:(649,439,456)(214,208,17)(473)(6,55,147)(385,260,4)(175,49)(104)(12,135)(116)(81,94)(125,216)(203,7)(615)(510)(419)\", \"(81,175,4)\" );\n/*30*/ test( \"17:(100,114,48,53)(43,5)(58)(23,20)(61,25,14)(3,75)(11,47,96)(36)(95,49)(24,51)(37,105,27)(78)(9,28)(59,26,19)(7,40)(33)\", \"(58,5)\" );\n```\n\n```ruby\nsource 'https://rubygems.org'\n\ngem 'activesupport', require: 'active_support/all'\ngem 'pry'\ngem 'tapp'\ngem 'awesome_print'\n```\n\n```ruby\nGEM\n  remote: https://rubygems.org/\n  specs:\n    activesupport (4.2.5.1)\n      i18n (~> 0.7)\n      json (~> 1.7, >= 1.7.7)\n      minitest (~> 5.1)\n      thread_safe (~> 0.3, >= 0.3.4)\n      tzinfo (~> 1.1)\n    awesome_print (1.6.1)\n    coderay (1.1.0)\n    i18n (0.7.0)\n    json (1.8.3)\n    method_source (0.8.2)\n    minitest (5.8.4)\n    pry (0.10.3)\n      coderay (~> 1.1.0)\n      method_source (~> 0.8.1)\n      slop (~> 3.4)\n    slop (3.6.0)\n    tapp (1.5.0)\n      thor\n    thor (0.19.1)\n    thread_safe (0.3.5)\n    tzinfo (1.2.2)\n      thread_safe (~> 0.1)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  activesupport\n  awesome_print\n  pry\n  tapp\n\nBUNDLED WITH\n   1.11.2\n```\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Ruby"]}