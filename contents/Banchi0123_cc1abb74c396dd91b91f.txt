{"context": "\u307f\u306a\u3055\u3093\u3053\u3093\u306b\u3061\u306f\u3002\u6700\u8fd1\u306fAzure\u306b\u3069\u3063\u3077\u308a\u3067\u3059\u3002\n\u4eca\u65e5\u306f\u3001Azure\u306eNoSQL\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30b5\u30fc\u30d3\u30b9\u3067\u3042\u308b\u3001DocumentDB\u3092\u3001node.js\u304b\u3089\u4f7f\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nDocumentDB\u3068\u306f\uff1f\nDocumentDB\u306f\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u578bNoSQL\u306b\u533a\u5206\u3055\u308c\u308b\u3001json\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u3059\u3002\n\u540c\u3058\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u578b\u306eNoSQL\u3068\u3057\u3066\u306f\u3001 AWS DynamoDB\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\nDocumentDB\u306f\u3001NoSQL(Not only sql)\u3067\u3059\u304c\u3001SQL\u304c\u4f7f\u3048\u307e\u3059\u3002\nNoSQL\u306e\u8a73\u3057\u3044\u8aac\u660e\u306b\u3064\u3044\u3066\u306f\u3001\u65e2\u306b\u8272\u3005\u306a\u8a18\u4e8b\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\nAzure DocumentDB vs AWS DynamoDB\nDocumentDB\u306f\u3001SQL\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u30af\u30a8\u30ea\u51fa\u6765\u3066\u3001\u4f55\u306e\u8a2d\u5b9a\u3082\u3057\u306a\u304f\u3066\u3082\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u30bd\u30fc\u30c8\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nDynamoDB\u3067\u540c\u3058\u3053\u3068\u3092\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u3001DynamoDB\u72ec\u7279\u306e\u66f8\u304d\u65b9\u3092\u5b66\u7fd2\u3057\u305f\u308a\u3001\u30ec\u30f3\u30b8\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3068\u3001\u8272\u3005\u3084\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001DocumentDB\u3067\u306f\u3001\u6163\u308c\u89aa\u3057\u3093\u3060SQL\u3092\u307b\u307c\u305d\u306e\u307e\u307e\u66f8\u304f\u3053\u3068\u3067\u5bfe\u5fdc\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u885d\u6483\u7684\u3067\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306fAWS DynamoDB\u304b\u3089\u3002\n\nDynamoDB\u306b\u304a\u3051\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u53d6\u5f97\u3068\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\nvar AWS = require(\"aws-sdk\");\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\nvar params = {\n    TableName: \"FileUploadLog\",\n    ProjectionExpression: \"#ts, Filename\",\n    FilterExpression: \"#ts between : start_date and : end_date\",\n    ExpressionAttributeNames: {\n        \"#ts\": \"TimeStamp\",\n    },\n    ExpressionAttributeValues: {\n         \":start_date\": \"2016-10-10 00:00:00\",\n         \":end_date\": \"2016-10-15 00:00:00\" \n    }\n};\n\ndocClient.scan(params, onScan);\n\nfunction onScan(err, data) {\n    if (err) {\n        console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n        // print all the movies\n        console.log(\"Scan succeeded.\");\n        data.Items.forEach(function(log) {\n           console.log(JSON.stringify(log));\n        });\n\n        // continue scanning if we have more movies\n        if (typeof data.LastEvaluatedKey != \"undefined\") {\n            console.log(\"Scanning for more...\");\n            params.ExclusiveStartKey = data.LastEvaluatedKey;\n            docClient.scan(params, onScan);\n        }\n    }\n}\n\ndocClient.scan\u306e\u7d50\u679c\u304c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u8fd4\u3055\u308c\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u53d6\u5f97\u7528\u306e\u30ad\u30fc\uff08LastEvaluatedKey\uff09\u304c\u5165\u3063\u3066\u3044\u305f\u3089\u3001\u305d\u308c\u3092ExclusiveStartKey\u306b\u6307\u5b9a\u3057\u3066\u3001\u307e\u305fscan\u3092\u5b9f\u884c\u3059\u308b\u3001\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\u6642\u523b\u306a\u3069\u3067\u30a2\u30a4\u30c6\u30e0\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u5834\u5408\u306f\u3001FilterExpression\u306b\u6761\u4ef6\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3067\u306f\u6b21\u306bDocumentDB\u306e\u65b9\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nDocumentDB\u306b\u304a\u3051\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u53d6\u5f97\u3068\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\nvar TaskDao = require(\"./taskDao\"); //DocumentDB wrapper\n\nvar config = {};\nconfig.host = \"YOUR_DOCUMENTDB_HOST_ADDRESS\";\nconfig.authKey = \"YOUR_AUTH_KEY\";\nconfig.databaseId = \"YOUR_DATABASE_ID\";\nconfig.collectionId = \"YOUR_COLLECTION_ID\";\n\n\nvar DocumentDBClient = require(\"documentdb\").DocumentClient;\nvar docDbClient = new DocumentDBClient(config.host, {\n    masterKey: config.authKey\n});\n\nvar taskDao = new TaskDao(docDbClient, config.databaseId, config.collectionId);\n\n\nnew Promise((resolve, reject) => {\n    taskDao.init((err) => {\n        if (err) {\n            reject(err);\n            return;\n        }\n        resolve();\n    });\n})\n.then((data) => {\n    console.log(\"data: \");\n    console.log(JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n\n        var querySpec = {\n            query: \"SELECT TOP @limit * FROM root r WHERE r.TimeStamp BETWEEN @start_date AND @end_date\",\n            parameters: [{\n                name: \"@limit\",\n                value: 10\n            },{\n                name: \"@start_date\",\n                value: \"2016-10-15 00:00:00\"\n            },{\n                name: \"@end_date\",\n                value: \"2016-10-20 00:00:00\"\n            }]\n        };\n\n        taskDao.find(querySpec, function (err, items) {\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            resolve(items);\n        });\n\n    });\n})\n.then((data) => {\n    console.log(\"data :\");\n    console.log(JSON.stringify(data));\n})\n.catch((err) => {\n    console.log(\"err :\");\n    console.log(JSON.stringify(err));\n});\n\n\u306a\u3093\u3068\u666e\u901a\u306bSELECT * \u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u306d\u3002\n\u30bd\u30fc\u30c8\u3082\u7c21\u5358\u3067\u3059\u3002\u6700\u65b0\uff11\uff10\u4ef6\u53d6\u5f97\u306a\u3089\u3053\u3093\u306a\u30af\u30a8\u30ea\u3092\u767a\u884c\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\nSELECT TOP 10 * FROM root r ORDER BY r.TimeStamp DESC\n\nDocumentDB\u3067\u306fORDER BY\u53e5\u3067\u666e\u901a\u306b\u30bd\u30fc\u30c8\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nDocumentDB\u306e\u3053\u306e\u67d4\u8edf\u3055\u306f\u304b\u306a\u308a\u4f7f\u3044\u52dd\u624b\u306e\u9762\u3067\u30a2\u30c9\u30d0\u30f3\u30c6\u30fc\u30b8\u304c\u5927\u304d\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u6210\u679c\u7269\u306e\u5b8c\u6210\u30b9\u30d4\u30fc\u30c9\u304c\u6bb5\u9055\u3044\u306b\u65e9\u304f\u306a\u308a\u307e\u3059\u306d\u3002\n\n\u307e\u3068\u3081\n\u4eca\u65e5\u306fDocumentDB\u3092Node.js\u304b\u3089\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nAWS DynamoDB\u3068\u6bd4\u8f03\u3059\u308b\u3068\u3001\u4f7f\u3044\u52dd\u624b\u306e\u9762\u3067\u304b\u306a\u308a\u306e\u5dee\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093\u3001\u6027\u80fd\u30fb\u4fa1\u683c\u30fb\u67d4\u8edf\u6027\u3001\u8272\u3005\u306a\u30d5\u30a1\u30af\u30bf\u30fc\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\uff11\u8ef8\u3067\u8a55\u4fa1\u3057\u7532\u4e59\u3092\u4ed8\u3051\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u304c\u3001SQL\u3067\u7c21\u5358\u306b\u30c7\u30fc\u30bf\u691c\u7d22\u3001\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3001\u30bd\u30fc\u30c8\u304c\u51fa\u6765\u3066\u3057\u307e\u3046\u306e\u306f\u3001\u304b\u306a\u308a\u9b45\u529b\u7684\u306a\u3093\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\nAzure\u306e\u30b5\u30fc\u30d3\u30b9\u306e\u4e2d\u3067\u3082\u3068\u308a\u308f\u3051\u304a\u52e7\u3081\u3057\u305f\u3044\u30b5\u30fc\u30d3\u30b9\u3067\u3059\u3002\n\n\u53c2\u8003\u8a18\u4e8b\n\u5b9f\u88c5\u306b\u969b\u3057\u3066\u3001\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nNode.js Express\u304b\u3089DocumentDB\u3092\u6271\u3046\u65b9\u6cd5\u304c\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u5171\u306b\u793a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\u672c\u8a18\u4e8b\u4e2d\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u3001DocumentDB\u306e\u30e9\u30c3\u30d1\u30fctaskDao\u306e\u5b9f\u88c5\u3082\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\nhttps://docs.microsoft.com/ja-jp/azure/documentdb/documentdb-nodejs-application\n\u307f\u306a\u3055\u3093\u3053\u3093\u306b\u3061\u306f\u3002\u6700\u8fd1\u306fAzure\u306b\u3069\u3063\u3077\u308a\u3067\u3059\u3002\n\u4eca\u65e5\u306f\u3001Azure\u306eNoSQL\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30b5\u30fc\u30d3\u30b9\u3067\u3042\u308b\u3001DocumentDB\u3092\u3001node.js\u304b\u3089\u4f7f\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# DocumentDB\u3068\u306f\uff1f\nDocumentDB\u306f\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u578bNoSQL\u306b\u533a\u5206\u3055\u308c\u308b\u3001json\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u3059\u3002\n\u540c\u3058\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u578b\u306eNoSQL\u3068\u3057\u3066\u306f\u3001 AWS DynamoDB\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\nDocumentDB\u306f\u3001NoSQL(Not only sql)\u3067\u3059\u304c\u3001<b>SQL\u304c\u4f7f\u3048\u307e\u3059</b>\u3002\nNoSQL\u306e\u8a73\u3057\u3044\u8aac\u660e\u306b\u3064\u3044\u3066\u306f\u3001\u65e2\u306b\u8272\u3005\u306a\u8a18\u4e8b\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n# Azure DocumentDB vs AWS DynamoDB\nDocumentDB\u306f\u3001SQL\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u30af\u30a8\u30ea\u51fa\u6765\u3066\u3001\u4f55\u306e\u8a2d\u5b9a\u3082\u3057\u306a\u304f\u3066\u3082\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u30bd\u30fc\u30c8\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nDynamoDB\u3067\u540c\u3058\u3053\u3068\u3092\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u3001DynamoDB\u72ec\u7279\u306e\u66f8\u304d\u65b9\u3092\u5b66\u7fd2\u3057\u305f\u308a\u3001\u30ec\u30f3\u30b8\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3068\u3001\u8272\u3005\u3084\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001DocumentDB\u3067\u306f\u3001\u6163\u308c\u89aa\u3057\u3093\u3060SQL\u3092\u307b\u307c\u305d\u306e\u307e\u307e\u66f8\u304f\u3053\u3068\u3067\u5bfe\u5fdc\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u885d\u6483\u7684\u3067\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306fAWS DynamoDB\u304b\u3089\u3002\n\n### DynamoDB\u306b\u304a\u3051\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u53d6\u5f97\u3068\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n```javascript\nvar AWS = require(\"aws-sdk\");\nvar docClient = new AWS.DynamoDB.DocumentClient();\n\nvar params = {\n    TableName: \"FileUploadLog\",\n    ProjectionExpression: \"#ts, Filename\",\n    FilterExpression: \"#ts between : start_date and : end_date\",\n    ExpressionAttributeNames: {\n        \"#ts\": \"TimeStamp\",\n    },\n    ExpressionAttributeValues: {\n         \":start_date\": \"2016-10-10 00:00:00\",\n         \":end_date\": \"2016-10-15 00:00:00\" \n    }\n};\n\ndocClient.scan(params, onScan);\n\nfunction onScan(err, data) {\n    if (err) {\n        console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n        // print all the movies\n        console.log(\"Scan succeeded.\");\n        data.Items.forEach(function(log) {\n           console.log(JSON.stringify(log));\n        });\n\n        // continue scanning if we have more movies\n        if (typeof data.LastEvaluatedKey != \"undefined\") {\n            console.log(\"Scanning for more...\");\n            params.ExclusiveStartKey = data.LastEvaluatedKey;\n            docClient.scan(params, onScan);\n        }\n    }\n}\n```\ndocClient.scan\u306e\u7d50\u679c\u304c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u8fd4\u3055\u308c\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u53d6\u5f97\u7528\u306e\u30ad\u30fc\uff08LastEvaluatedKey\uff09\u304c\u5165\u3063\u3066\u3044\u305f\u3089\u3001\u305d\u308c\u3092ExclusiveStartKey\u306b\u6307\u5b9a\u3057\u3066\u3001\u307e\u305fscan\u3092\u5b9f\u884c\u3059\u308b\u3001\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\u6642\u523b\u306a\u3069\u3067\u30a2\u30a4\u30c6\u30e0\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u5834\u5408\u306f\u3001FilterExpression\u306b\u6761\u4ef6\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\u3067\u306f\u6b21\u306bDocumentDB\u306e\u65b9\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n### DocumentDB\u306b\u304a\u3051\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u53d6\u5f97\u3068\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n```javascript\nvar TaskDao = require(\"./taskDao\"); //DocumentDB wrapper\n\nvar config = {};\nconfig.host = \"YOUR_DOCUMENTDB_HOST_ADDRESS\";\nconfig.authKey = \"YOUR_AUTH_KEY\";\nconfig.databaseId = \"YOUR_DATABASE_ID\";\nconfig.collectionId = \"YOUR_COLLECTION_ID\";\n\n\nvar DocumentDBClient = require(\"documentdb\").DocumentClient;\nvar docDbClient = new DocumentDBClient(config.host, {\n    masterKey: config.authKey\n});\n\nvar taskDao = new TaskDao(docDbClient, config.databaseId, config.collectionId);\n\n\nnew Promise((resolve, reject) => {\n    taskDao.init((err) => {\n        if (err) {\n            reject(err);\n            return;\n        }\n        resolve();\n    });\n})\n.then((data) => {\n    console.log(\"data: \");\n    console.log(JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n\n        var querySpec = {\n            query: \"SELECT TOP @limit * FROM root r WHERE r.TimeStamp BETWEEN @start_date AND @end_date\",\n            parameters: [{\n                name: \"@limit\",\n                value: 10\n            },{\n                name: \"@start_date\",\n                value: \"2016-10-15 00:00:00\"\n            },{\n                name: \"@end_date\",\n                value: \"2016-10-20 00:00:00\"\n            }]\n        };\n\n        taskDao.find(querySpec, function (err, items) {\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            resolve(items);\n        });\n\n    });\n})\n.then((data) => {\n    console.log(\"data :\");\n    console.log(JSON.stringify(data));\n})\n.catch((err) => {\n    console.log(\"err :\");\n    console.log(JSON.stringify(err));\n});\n```\n\u306a\u3093\u3068\u666e\u901a\u306b`SELECT *` \u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u306d\u3002\n\u30bd\u30fc\u30c8\u3082\u7c21\u5358\u3067\u3059\u3002\u6700\u65b0\uff11\uff10\u4ef6\u53d6\u5f97\u306a\u3089\u3053\u3093\u306a\u30af\u30a8\u30ea\u3092\u767a\u884c\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\n```SQL\nSELECT TOP 10 * FROM root r ORDER BY r.TimeStamp DESC\n```\nDocumentDB\u3067\u306f`ORDER BY`\u53e5\u3067\u666e\u901a\u306b\u30bd\u30fc\u30c8\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nDocumentDB\u306e\u3053\u306e\u67d4\u8edf\u3055\u306f\u304b\u306a\u308a\u4f7f\u3044\u52dd\u624b\u306e\u9762\u3067\u30a2\u30c9\u30d0\u30f3\u30c6\u30fc\u30b8\u304c\u5927\u304d\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u6210\u679c\u7269\u306e\u5b8c\u6210\u30b9\u30d4\u30fc\u30c9\u304c\u6bb5\u9055\u3044\u306b\u65e9\u304f\u306a\u308a\u307e\u3059\u306d\u3002\n\n# \u307e\u3068\u3081\n\u4eca\u65e5\u306fDocumentDB\u3092Node.js\u304b\u3089\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nAWS DynamoDB\u3068\u6bd4\u8f03\u3059\u308b\u3068\u3001\u4f7f\u3044\u52dd\u624b\u306e\u9762\u3067\u304b\u306a\u308a\u306e\u5dee\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093\u3001\u6027\u80fd\u30fb\u4fa1\u683c\u30fb\u67d4\u8edf\u6027\u3001\u8272\u3005\u306a\u30d5\u30a1\u30af\u30bf\u30fc\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\uff11\u8ef8\u3067\u8a55\u4fa1\u3057\u7532\u4e59\u3092\u4ed8\u3051\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u304c\u3001SQL\u3067\u7c21\u5358\u306b\u30c7\u30fc\u30bf\u691c\u7d22\u3001\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3001\u30bd\u30fc\u30c8\u304c\u51fa\u6765\u3066\u3057\u307e\u3046\u306e\u306f\u3001\u304b\u306a\u308a\u9b45\u529b\u7684\u306a\u3093\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\nAzure\u306e\u30b5\u30fc\u30d3\u30b9\u306e\u4e2d\u3067\u3082\u3068\u308a\u308f\u3051\u304a\u52e7\u3081\u3057\u305f\u3044\u30b5\u30fc\u30d3\u30b9\u3067\u3059\u3002\n\n# \u53c2\u8003\u8a18\u4e8b\n\u5b9f\u88c5\u306b\u969b\u3057\u3066\u3001\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nNode.js Express\u304b\u3089DocumentDB\u3092\u6271\u3046\u65b9\u6cd5\u304c\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u5171\u306b\u793a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\u672c\u8a18\u4e8b\u4e2d\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u3001DocumentDB\u306e\u30e9\u30c3\u30d1\u30fc`taskDao`\u306e\u5b9f\u88c5\u3082\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\nhttps://docs.microsoft.com/ja-jp/azure/documentdb/documentdb-nodejs-application\n", "tags": ["DocumentDB", "Azure", "DynamoDB", "Node.js"]}