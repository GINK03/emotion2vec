{"context": " More than 1 year has passed since last update.C++11\u3067\u306f<future>\u30d8\u30c3\u30c0\u304c\u5c0e\u5165\u3055\u308c\u3001\n\u7c21\u5358\u306b\u975e\u540c\u671f\u306e\u51e6\u7406\u304c\u5b9f\u88c5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u4ee5\u4e0b\u3067\u306f\u7528\u9014\u6bce\u306b\u5b9f\u88c5\u65b9\u6cd5\u3092\u307e\u3068\u3081\u308b\u3002\nthread\u9593\u3067\u306e\u540c\u671f\u306e\u8a71\u306f\u305b\u305a\u3001\u3042\u304f\u307e\u3067\u5b8c\u5168\u306b\u975e\u540c\u671f\u306a\u51e6\u7406\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u308b\u3002\n\n\u623b\u308a\u5024\u304c\u5fc5\u8981\u306a\u3044\u5834\u5408(Thread-per-message pattern)\n\u3068\u308a\u3042\u3048\u305a\u975e\u540c\u671f\u306b\u5b9f\u884c\u3067\u304d\u308c\u3070\u3044\u3044\u5834\u5408\u3002\n\u5b9f\u884c\u6642\u9593\u3092\u77ed\u7e2e\u3059\u308b\u305f\u3081\u306b\u8907\u6570\u306e\u72ec\u7acb\u306a\u51e6\u7406\u3092\u4e26\u5217\u306b\u5b9f\u884c\u3059\u308b\u306a\u3069\u306e\u5fdc\u7528\u304c\u8003\u3048\u3089\u308c\u308b\u3002\nstd::thread\u3092\u4f7f\u7528\u3059\u308b\u3002\u6700\u3082\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\uff1a\nauto th1 = std::thread([]{ do_long_work(); });\ndo_another_things();\nth1.join();\n\nstd::thread\u306e\u5f15\u6570\u306b\u5b9f\u884c\u3057\u305f\u3044\u95a2\u6570\u3092\u6e21\u3059\u3002\n\u95a2\u6570\u306b\u5f15\u6570\u3092\u4e0e\u3048\u305f\u3044\u5834\u5408\u306f\u3001std::thread(func, arg)\u306e\u3088\u3046\u306b\u884c\u3046\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u306b\u306fjoin()\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\nstd::thread\u306e\u5f15\u6570\u306elambda\u5f0f\u306f\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u4e8b\u3082\u3067\u304d\u308b:\ndouble a;\nauto th1 = std::thread([&a]{ a = long_calc(); });\ndo_another_things();\nth1.join();\nstd::cout << a << std::endl; // 1.0\n\nstd::vector<std::thread>\u306e\u3088\u3046\u306b\u30b3\u30f3\u30c6\u30ca\u306b\u5165\u308c\u308b\u4e8b\u3082\u3067\u304d\u308b\u3002\n#include <vector>\n#include <future>\n#include <iostream>\n\nint main(int argc, char const *argv[]) {\n  std::vector<int> v(10);\n  std::vector<std::thread> threads;\n  for (int i = 0; i < 10; ++i) {\n    threads.push_back(std::thread([i, &v] { v[i] = i * i; }));\n  }\n  for (std::thread &th : threads) {\n    th.join();\n  }\n  for (int i : v) {\n    std::cout << i << std::endl;\n  }\n  return 0;\n}\n\n\u53c2\u8003\u6587\u732e\n- std::thread - cppreference\n- std::thread\u3092\u3042\u3068\u304b\u3089\u958b\u59cb\u3002\u305d\u308c\u3068\u30e0\u30fc\u30d6\u5bfe\u5fdc\u3057\u305f\u30b3\u30f3\u30c6\u30ca\u306b\u3064\u3044\u3066 (vector\u306b\u5165\u308c\u308b\u90e8\u5206)\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u6ce8\u610f\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u969b\u306f\u4e26\u5217\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3059\u308b\u4e8b\u3092\u5fd8\u308c\u305a\u306b\u3002\n\u4f8b\u3048\u3070Linux\u3067\u306fpthread\u3092\u30ea\u30f3\u30af\u3059\u308b\u3002\n$ g++ -std=c++11 source.cpp -pthread\n\n$ clang++ -std=c++11 source.cpp -pthread\n\n\u30ea\u30f3\u30af\u5fd8\u308c\u308b\u3068\u5b9f\u884c\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff1a\nterminate called after throwing an instance of 'std::system_error'\n  what():  Enable multithreading to use std::thread: Operation not permitted\n\n\n\u7d50\u679c\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\n\u4e0a\u8ff0\u306e\u65b9\u6cd5\u3067\u3082\u623b\u308a\u5024\u3092\u53c2\u7167\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u5909\u6570\u306b\u4ee3\u5165\u3059\u308b\u4e8b\u304c\u3067\u304d\u3066\u3044\u308b\u304c\u3001\n\u3053\u308c\u3067\u306f\u4e0d\u4fbf\u306a\u5834\u5408\u3082\u591a\u3044\u3002\n\u305d\u3053\u3067\u767b\u5834\u3059\u308b\u306e\u304cstd::async\u3067\u3042\u308b\u3002\nauto result = std::async(std::launch::async, [] { return long_calc(); });\ndo_another_things();\nstd::cout << result.get() << std::endl;\n\nresult\u306e\u578b\u306fstd::future<T>(T\u306flong_calc()\u306e\u623b\u308a\u5024\u306e\u578b)\u3067\u3042\u308b\u3002\nresult.get()\u3067\u306f\u3058\u3081\u3066\u4f5c\u6210\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u3092join()\u3059\u308b\u306e\u3067\u3001\ndo_another_things()\u306fthread\u306e\u751f\u6210\u76f4\u5f8c\u306b(long_calc()\u306e\u5b9f\u884c\u3092\u5f85\u305f\u305a\u306b)\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n\u975e\u540c\u671f\u51e6\u7406\u3092\u3069\u3046\u3084\u3063\u3066\u5b9f\u884c\u3059\u308b\u304b(Policy)\n\u7b2c\u4e00\u5f15\u6570\u306estd::launch::async\u306fpolicy\u3092\u6307\u5b9a\u3057\u3066\u304a\u308a\u3001\n\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u958b\u59cb\u3057\u3066long_calc()\u3092\u8a08\u7b97\u3059\u308b\u3001\u3068\u3044\u3046\u6307\u5b9a\u3067\u3042\u308b\u3002\nPolicy\u306f\u6b21\u306e4\u901a\u308a\u306e\u6307\u5b9a\u304c\u3067\u304d\u308b\n\n\nstd::launch::async : \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c \n\nstd::launch::deferred : \u9045\u5ef6\u8a55\u4fa1\n\nstd::launch::async | std::launch::deferred : \u4e0a\u8a18\u306e\u3044\u305a\u308c\u304b\uff08\u5b9f\u88c5\u4f9d\u5b58\uff09\n\u6307\u5b9a\u306a\u3057 : \u4e21\u65b9\u6307\u5b9a\u3057\u305f\u5834\u5408\u3068\u540c\u69d8\n\nstd::launch::deferred\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u5358\u306b\u9045\u5ef6\u8a55\u4fa1\u306b\u306a\u308b\u3002\n\u3064\u307e\u308a\u6700\u521d\u306bresult.get()\u304c\u547c\u3070\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067long_calc()\u3092\u8a55\u4fa1\u3059\u308b\u3002\n\u6b21\u56de\u4ee5\u964d\u306bresult.get()\u304c\u547c\u3070\u308c\u305f\u3089\u6700\u521d\u306e\u6642\u306b\u8a08\u7b97\u3057\u305f\u5024\u3092\u8fd4\u3059\u3002\nstd::async(std::launch::async | std::launch::deferred, func, arg)\u306e\u3088\u3046\u306b\u4e21\u65b9\u6307\u5b9a\u3059\u308b\u5834\u5408\u3001\n\u3042\u308b\u3044\u306f\u5358\u306bstd::async(func, arg)\u306e\u3088\u3046\u306b\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u3001\nasync/deferred\u306e\u3069\u3061\u3089\u306b\u306a\u308b\u304b\u5b9f\u88c5\u4f9d\u5b58\u3067\u3042\u308b\u3002\nvector\u3092\u521d\u671f\u5316\u3059\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b:\n#include <future>\n#include <iostream>\n#include <vector>\n\nint main(int argc, char const *argv[]) {\n  std::vector<std::future<int> > v;\n  for (int i = 0; i < 10; ++i) {\n    v.push_back(std::async([i] { return i * i; }));\n  }\n  for (auto &val : v) {\n    std::cout << val.get() << std::endl;\n  }\n}\n\n\u53c2\u8003\u6587\u732e\n- std::async - cppreference\n- std::future - cppreference\n- C++/CX\u306e\u65c5(9)\uff1aC++11\u306e\u6a19\u6e96\u30bf\u30b9\u30af\u51e6\u7406\u306e\u307e\u3068\u3081(std::future/promise/thread/async)\n- GNU/Linux\u306eC++11\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5e38\u8b58\u304c\u3072\u3063\u304f\u308a\u304b\u3048\u3063\u305f(\u975e\u540c\u671f\u306e\u4f8b\u5916\u306b\u3064\u3044\u3066\u8a73\u3057\u3044)\n\nThread Pool (Worker Thread) pattern\nC++\u3067\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb(\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9)\u30d1\u30bf\u30fc\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f\u65b9\u3005\u3067\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\u3002\n\u53c2\u8003\u6587\u732e\n\nC++11\u3067\u5b9f\u88c5\u3059\u308b\u5834\u5408\n\n\nA Thread Pool with C++11\nprogschj/ThreadPool - GitHub\n\n\nBoost.Asio\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\n\nBoost.Asio\u306b\u3088\u308b\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u30d1\u30bf\u30fc\u30f3\n\n\n\n\u6b21\u56de\u306b\u8a73\u3057\u304f\u307e\u3068\u3081\u308b\u3002\nC++11\u3067\u306f`<future>`\u30d8\u30c3\u30c0\u304c\u5c0e\u5165\u3055\u308c\u3001\n\u7c21\u5358\u306b\u975e\u540c\u671f\u306e\u51e6\u7406\u304c\u5b9f\u88c5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u4ee5\u4e0b\u3067\u306f\u7528\u9014\u6bce\u306b\u5b9f\u88c5\u65b9\u6cd5\u3092\u307e\u3068\u3081\u308b\u3002\nthread\u9593\u3067\u306e\u540c\u671f\u306e\u8a71\u306f\u305b\u305a\u3001\u3042\u304f\u307e\u3067\u5b8c\u5168\u306b\u975e\u540c\u671f\u306a\u51e6\u7406\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u308b\u3002\n\n## \u623b\u308a\u5024\u304c\u5fc5\u8981\u306a\u3044\u5834\u5408(Thread-per-message pattern)\n\u3068\u308a\u3042\u3048\u305a\u975e\u540c\u671f\u306b\u5b9f\u884c\u3067\u304d\u308c\u3070\u3044\u3044\u5834\u5408\u3002\n\u5b9f\u884c\u6642\u9593\u3092\u77ed\u7e2e\u3059\u308b\u305f\u3081\u306b\u8907\u6570\u306e\u72ec\u7acb\u306a\u51e6\u7406\u3092\u4e26\u5217\u306b\u5b9f\u884c\u3059\u308b\u306a\u3069\u306e\u5fdc\u7528\u304c\u8003\u3048\u3089\u308c\u308b\u3002\n`std::thread`\u3092\u4f7f\u7528\u3059\u308b\u3002\u6700\u3082\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\uff1a\n\n```cpp\nauto th1 = std::thread([]{ do_long_work(); });\ndo_another_things();\nth1.join();\n```\n\n`std::thread`\u306e\u5f15\u6570\u306b\u5b9f\u884c\u3057\u305f\u3044\u95a2\u6570\u3092\u6e21\u3059\u3002\n\u95a2\u6570\u306b\u5f15\u6570\u3092\u4e0e\u3048\u305f\u3044\u5834\u5408\u306f\u3001`std::thread(func, arg)`\u306e\u3088\u3046\u306b\u884c\u3046\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u306b\u306f`join()`\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n`std::thread`\u306e\u5f15\u6570\u306elambda\u5f0f\u306f\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u4e8b\u3082\u3067\u304d\u308b:\n\n```cpp\ndouble a;\nauto th1 = std::thread([&a]{ a = long_calc(); });\ndo_another_things();\nth1.join();\nstd::cout << a << std::endl; // 1.0\n```\n\n`std::vector<std::thread>`\u306e\u3088\u3046\u306b\u30b3\u30f3\u30c6\u30ca\u306b\u5165\u308c\u308b\u4e8b\u3082\u3067\u304d\u308b\u3002\n\n```cpp\n#include <vector>\n#include <future>\n#include <iostream>\n\nint main(int argc, char const *argv[]) {\n  std::vector<int> v(10);\n  std::vector<std::thread> threads;\n  for (int i = 0; i < 10; ++i) {\n    threads.push_back(std::thread([i, &v] { v[i] = i * i; }));\n  }\n  for (std::thread &th : threads) {\n    th.join();\n  }\n  for (int i : v) {\n    std::cout << i << std::endl;\n  }\n  return 0;\n}\n```\n\n*\u53c2\u8003\u6587\u732e*\n- [std::thread - cppreference](http://en.cppreference.com/w/cpp/thread/thread)\n- [std::thread\u3092\u3042\u3068\u304b\u3089\u958b\u59cb\u3002\u305d\u308c\u3068\u30e0\u30fc\u30d6\u5bfe\u5fdc\u3057\u305f\u30b3\u30f3\u30c6\u30ca\u306b\u3064\u3044\u3066](http://faithandbrave.hateblo.jp/entry/20120418/1334731512) (vector\u306b\u5165\u308c\u308b\u90e8\u5206)\n\n### \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u6ce8\u610f\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u969b\u306f\u4e26\u5217\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3059\u308b\u4e8b\u3092\u5fd8\u308c\u305a\u306b\u3002\n\u4f8b\u3048\u3070Linux\u3067\u306fpthread\u3092\u30ea\u30f3\u30af\u3059\u308b\u3002\n\n```console\n$ g++ -std=c++11 source.cpp -pthread\n```\n\n```console\n$ clang++ -std=c++11 source.cpp -pthread\n```\n\n\u30ea\u30f3\u30af\u5fd8\u308c\u308b\u3068\u5b9f\u884c\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff1a\n\n```console\nterminate called after throwing an instance of 'std::system_error'\n  what():  Enable multithreading to use std::thread: Operation not permitted\n```\n\n## \u7d50\u679c\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\n\u4e0a\u8ff0\u306e\u65b9\u6cd5\u3067\u3082\u623b\u308a\u5024\u3092\u53c2\u7167\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u5909\u6570\u306b\u4ee3\u5165\u3059\u308b\u4e8b\u304c\u3067\u304d\u3066\u3044\u308b\u304c\u3001\n\u3053\u308c\u3067\u306f\u4e0d\u4fbf\u306a\u5834\u5408\u3082\u591a\u3044\u3002\n\u305d\u3053\u3067\u767b\u5834\u3059\u308b\u306e\u304c`std::async`\u3067\u3042\u308b\u3002\n\n```cpp\nauto result = std::async(std::launch::async, [] { return long_calc(); });\ndo_another_things();\nstd::cout << result.get() << std::endl;\n```\n\n`result`\u306e\u578b\u306f`std::future<T>`(`T`\u306f`long_calc()`\u306e\u623b\u308a\u5024\u306e\u578b)\u3067\u3042\u308b\u3002\n`result.get()`\u3067\u306f\u3058\u3081\u3066\u4f5c\u6210\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u3092`join()`\u3059\u308b\u306e\u3067\u3001\n`do_another_things()`\u306fthread\u306e\u751f\u6210\u76f4\u5f8c\u306b(`long_calc()`\u306e\u5b9f\u884c\u3092\u5f85\u305f\u305a\u306b)\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n### \u975e\u540c\u671f\u51e6\u7406\u3092\u3069\u3046\u3084\u3063\u3066\u5b9f\u884c\u3059\u308b\u304b(Policy)\n\u7b2c\u4e00\u5f15\u6570\u306e`std::launch::async`\u306fpolicy\u3092\u6307\u5b9a\u3057\u3066\u304a\u308a\u3001\n\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u958b\u59cb\u3057\u3066`long_calc()`\u3092\u8a08\u7b97\u3059\u308b\u3001\u3068\u3044\u3046\u6307\u5b9a\u3067\u3042\u308b\u3002\nPolicy\u306f\u6b21\u306e4\u901a\u308a\u306e\u6307\u5b9a\u304c\u3067\u304d\u308b\n\n- `std::launch::async` : \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c \n- `std::launch::deferred` : \u9045\u5ef6\u8a55\u4fa1\n- `std::launch::async | std::launch::deferred` : \u4e0a\u8a18\u306e\u3044\u305a\u308c\u304b\uff08\u5b9f\u88c5\u4f9d\u5b58\uff09\n- \u6307\u5b9a\u306a\u3057 : \u4e21\u65b9\u6307\u5b9a\u3057\u305f\u5834\u5408\u3068\u540c\u69d8\n\n`std::launch::deferred`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u5358\u306b\u9045\u5ef6\u8a55\u4fa1\u306b\u306a\u308b\u3002\n\u3064\u307e\u308a\u6700\u521d\u306b`result.get()`\u304c\u547c\u3070\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067`long_calc()`\u3092\u8a55\u4fa1\u3059\u308b\u3002\n\u6b21\u56de\u4ee5\u964d\u306b`result.get()`\u304c\u547c\u3070\u308c\u305f\u3089\u6700\u521d\u306e\u6642\u306b\u8a08\u7b97\u3057\u305f\u5024\u3092\u8fd4\u3059\u3002\n\n`std::async(std::launch::async | std::launch::deferred, func, arg)`\u306e\u3088\u3046\u306b\u4e21\u65b9\u6307\u5b9a\u3059\u308b\u5834\u5408\u3001\n\u3042\u308b\u3044\u306f\u5358\u306b`std::async(func, arg)`\u306e\u3088\u3046\u306b\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u3001\nasync/deferred\u306e\u3069\u3061\u3089\u306b\u306a\u308b\u304b\u5b9f\u88c5\u4f9d\u5b58\u3067\u3042\u308b\u3002\n\nvector\u3092\u521d\u671f\u5316\u3059\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b:\n\n```cpp\n#include <future>\n#include <iostream>\n#include <vector>\n\nint main(int argc, char const *argv[]) {\n  std::vector<std::future<int> > v;\n  for (int i = 0; i < 10; ++i) {\n    v.push_back(std::async([i] { return i * i; }));\n  }\n  for (auto &val : v) {\n    std::cout << val.get() << std::endl;\n  }\n}\n```\n\n*\u53c2\u8003\u6587\u732e*\n- [std::async - cppreference](http://en.cppreference.com/w/cpp/thread/async)\n- [std::future - cppreference](http://en.cppreference.com/w/cpp/thread/future)\n- [C++/CX\u306e\u65c5(9)\uff1aC++11\u306e\u6a19\u6e96\u30bf\u30b9\u30af\u51e6\u7406\u306e\u307e\u3068\u3081(std::future/promise/thread/async)](http://blog.livedoor.jp/haruka_sao/archives/52047261.html)\n- [GNU/Linux\u306eC++11\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5e38\u8b58\u304c\u3072\u3063\u304f\u308a\u304b\u3048\u3063\u305f](http://cpplover.blogspot.jp/2013/04/gnulinuxc11.html)(\u975e\u540c\u671f\u306e\u4f8b\u5916\u306b\u3064\u3044\u3066\u8a73\u3057\u3044)\n\n## Thread Pool (Worker Thread) pattern\nC++\u3067\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb(\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9)\u30d1\u30bf\u30fc\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f\u65b9\u3005\u3067\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\u3002\n\n*\u53c2\u8003\u6587\u732e*\n\n- C++11\u3067\u5b9f\u88c5\u3059\u308b\u5834\u5408\n    - [A Thread Pool with C++11](http://progsch.net/wordpress/?p=81)\n    - [progschj/ThreadPool - GitHub](https://github.com/progschj/ThreadPool)\n- Boost.Asio\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n    - [Boost.Asio\u306b\u3088\u308b\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u30d1\u30bf\u30fc\u30f3](http://faithandbrave.hateblo.jp/entry/20110408/1302248501)\n\n\u6b21\u56de\u306b\u8a73\u3057\u304f\u307e\u3068\u3081\u308b\u3002\n", "tags": ["C++11", "C++11", "async"]}