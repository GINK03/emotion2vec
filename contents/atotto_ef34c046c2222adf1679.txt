{"context": "\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea(dlib)\u3092\u4f7f\u3063\u3066\u7269\u4f53\u691c\u51fa\u3057\u3066\u307f\u307e\u3059\nhttp://dlib.net/ml.html#structural_object_detection_trainer \u3092\u8a66\u3057\u307e\u3059\u3002\n\ngist\u306f\u3053\u3061\u3089\n\n\n\u7528\u610f\u3059\u308b\u3082\u306e\n\nraspberry-pi 2 or 3 \u3068\u304b\n\u5b66\u7fd2\u3055\u305b\u305f\u3044\u3082\u306e\u304c\u5199\u3063\u3066\u308b\u753b\u50cf20-30\u679a\u304f\u3089\u3044\n\n\n ~/my_images \u306b\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3068\u4eee\u5b9a\n \u5b66\u7fd2\u3055\u305b\u305f\u3044\u3082\u306e\u4ee5\u5916\u306e\u7269\u3082\u5199\u3063\u3066\u3044\u308b\u65b9\u304c\u826f\u3044\n\n\n\n\u4eca\u56de\u5b66\u7fd2\u3055\u305b\u305f\u3044\u3082\u306e:\n\n\napple tv \u306e youtube\u306b\u51fa\u3066\u304f\u308b\u4f55\u304b\n\u306a\u306b\u3092\u3055\u305b\u305f\u3044\u304b\u306f\u304a\u5bdf\u3057\u304f\u3060\u3055\u3044(\u00b4\u30fb\u03c9\u30fb`)\n\n\ndlib\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u307e\u305a\u306f\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb:\n$ sudo apt-get install -y cmake gfortran graphicsmagick libgraphicsmagick1-dev libatlas-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev python-dev python-protobuf software-properties-common\n\n\npip\u3092\u4f7f\u3046\u5834\u5408:\n$ sudo pip install dlib\n\n\nanaconda\u3092\u4f7f\u3046\u5834\u5408:\n$ conda install -c menpo dlib\n\n\n\u81ea\u5206\u3067\u30d3\u30eb\u30c9\u3059\u308b\u5834\u5408(\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u9069\u5f53\u306b):\n$ git clone -b v19.0 --depth=1 https://github.com/davisking/dlib\n$ cd dlib && python setup.py install --yes USE_AVX_INSTRUCTIONS\n\nraspberry-pi2\u30671h\u304f\u3089\u3044\u304b\u304b\u308a\u307e\u3059\n\n\u5b66\u7fd2\u6e96\u5099\n\u753b\u50cf\u306b\u5199\u3063\u3066\u3044\u308b\u7269\u4f53\u3092\u30e9\u30d9\u30eb\u3059\u308b\u305f\u3081\u306bimglab\u3092\u4f7f\u3044\u307e\u3059\u3002\nimglab(dlib/tools)\u3092\u30b3\u30f3\u30d1\u30a4\u30eb(\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u9069\u5f53\u306b):\n$ git clone -b v19.0 --depth=1 https://github.com/davisking/dlib\n$ cd dlib/tools/imglab/ && mkdir build && cd build && cmake .. && cmake --build . --config Release\n\nraspberry-pi2\u30670.5h\u304f\u3089\u3044\u304b\u304b\u308a\u307e\u3059\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u306b\u300110-20\u679a\u7a0b\u5ea6\u306e\u753b\u50cf\u304b\u3089\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u7269\u4f53\u3092\u30e9\u30d9\u30ea\u30f3\u30b0\u3057\u307e\u3059:\n$ cd ~/my_images\n$ ~/dlib/tools/imglab/build/imglab -c training.xml training_*.jpg\n$ ~/dlib/tools/imglab/build/imglab training.xml\n\nimglab\u306eGUI\u3067\u2193\u306e\u3088\u3046\u306b\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3059\u308b\u753b\u50cf\u3092shift\u3092\u62bc\u3057\u306a\u304c\u3089\u30de\u30a6\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059:\n\n\n\n\u540c\u69d8\u306b\u3001\u30c6\u30b9\u30c8\u7528\u306b\u3082\u4f55\u679a\u304b(5\u679a\u304f\u3089\u3044\uff1f)\u753b\u50cf\u3092\u9078\u629e\u3057\u3066\u30e9\u30d9\u30ea\u30f3\u30b0\u3057\u307e\u3059:\n$ cd ~/my_images\n$ ~/dlib/tools/imglab/build/imglab -c testing.xml testing_*.jpg\n$ ~/dlib/tools/imglab/build/imglab testing.xml\n\n\n\u5b66\u7fd2\nhttp://dlib.net/train_object_detector.py.html \u3092\u4fee\u6b63\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u2193\n~/trainning_object_detector.py:\nimport os\nimport sys\nimport dlib\n\nimg_dir = \".\"\n\noptions = dlib.simple_object_detector_training_options()\noptions.add_left_right_image_flips = False\noptions.C = 5\noptions.num_threads = 2\noptions.be_verbose = True\n\ntraining_xml_path = os.path.join(img_dir, \"training.xml\")\ntesting_xml_path = os.path.join(img_dir, \"testing.xml\")\n\ndlib.train_simple_object_detector(training_xml_path, \"detector.svm\", options)\n\nprint(\"\")\nprint(\"Training accuracy: {}\".format(\n    dlib.test_simple_object_detector(training_xml_path, \"detector.svm\")))\nprint(\"Testing accuracy: {}\".format(\n    dlib.test_simple_object_detector(testing_xml_path, \"detector.svm\")))\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068:\n$ cd ~/my_images\n$ python ~/trainning_object_detector.py \n:\n(snip)\n:\nTraining complete.\nTrained with C: 5\nTraining with epsilon: 0.01\nTrained using 2 threads.\nTrained with sliding window 74 pixels wide by 86 pixels tall.\nUpsampled images 2 times to allow detection of small boxes.\nSaved detector to file detector.svm\n\nTraining accuracy: precision: 1, recall: 1, average precision: 1\nTesting accuracy: precision: 1, recall: 1, average precision: 1\n\n\u3053\u308c\u3067devector.svm\u304c\u3067\u304d\u3042\u304c\u308a\u307e\u3059\u3002\u753b\u50cf\u679a\u6570\u306b\u3088\u308a\u307e\u3059\u304c\u3001raspberry-pi2\u30670.5h\u304f\u3089\u3044\u304b\u304b\u308a\u307e\u3059\u3002\n\u6700\u5f8c\u306e\u884c\u306e average precision\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u826f\u3044\u5b66\u7fd2\u304c\u3067\u304d\u305f\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5b9f\u8df5\nUSB\u30ab\u30e1\u30e9\u3092OpenCV\u3092\u3064\u304b\u3063\u3066\u5b66\u7fd2\u3057\u305f\u7d50\u679c\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\n\n\u7528\u610f\u3059\u308b\u3082\u306e\n\nUSB\u30ab\u30e1\u30e9\uff08UVC\u306b\u5bfe\u5fdc\u3057\u3066\u308b\u3068\u63a5\u7d9a\u304c\u30e9\u30af\uff09\n\n\n\u4e8b\u524d\u6e96\u5099\n\u30ab\u30e1\u30e9\u3092\u4f7f\u3046\u305f\u3081\u306bopencv\u3092\u5c0e\u5165\u3057\u307e\u3057\u3087\u3046\n$ sudo apt-get install python-opencv\n\n\n\u3084\u3063\u3066\u307f\u308b\n\u30ab\u30e1\u30e9\u3067\u7269\u4f53\u691c\u51fa\u3092\u3059\u308b\u30b5\u30f3\u30d7\u30eb:\nimport dlib\nimport cv2\n\ndetector = dlib.simple_object_detector(\"detector.svm\")\n\ncap = cv2.VideoCapture(0)\n\nwhile(True):\n    # Capture frame-by-frame\n    ret, frame = cap.read()\n    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n\n    dets = detector(frame)\n\n    for d in dets:\n        cv2.rectangle(frame, (d.left(), d.top()), (d.right(), d.bottom()), (0, 0, 255), 2)\n\n    # Display the resulting frame\n    cv2.imshow(\"frame\",frame)\n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\n\n# When everything done, release the capture\ncap.release()\ncv2.destroyAllWindows()\n\n\u7121\u4e8b\u306b\u691c\u51fa\u3067\u304d\u307e\u3057\u305f:\n\n\n\n\n\u8aa4\u691c\u77e5\u3057\u305f\u5834\u5408\u306f\uff1f\n\u8aa4\u691c\u77e5\u3057\u305f\u753b\u50cf\u3092training.xml\u30d5\u30a1\u30a4\u30eb\u306b\u8ffd\u52a0\u3057\u3066\u3001\u518d\u5ea6\u5b66\u7fd2(training_object_detect.py)\u3057\u307e\u3057\u3087\u3046\u3002\n\u4f8b:\n  <image file='20160808_164302_016705.png'>\n  </image>\n\n\n\u53c2\u8003\n\nHOG\u7279\u5fb4\u3068SVM\u306b\u3088\u308b\u7269\u4f53\u691c\u51fa http://ishi.main.jp/ros/ros_obj_detection.html\n\n\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea(dlib)\u3092\u4f7f\u3063\u3066\u7269\u4f53\u691c\u51fa\u3057\u3066\u307f\u307e\u3059\n\nhttp://dlib.net/ml.html#structural_object_detection_trainer \u3092\u8a66\u3057\u307e\u3059\u3002\n\n- [gist\u306f\u3053\u3061\u3089](https://gist.github.com/atotto/c1ccbfa44ee70a476816f6389834945e)\n\n## \u7528\u610f\u3059\u308b\u3082\u306e\n\n- raspberry-pi 2 or 3 \u3068\u304b\n- \u5b66\u7fd2\u3055\u305b\u305f\u3044\u3082\u306e\u304c\u5199\u3063\u3066\u308b\u753b\u50cf20-30\u679a\u304f\u3089\u3044\n -  `~/my_images` \u306b\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3068\u4eee\u5b9a\n -  \u5b66\u7fd2\u3055\u305b\u305f\u3044\u3082\u306e\u4ee5\u5916\u306e\u7269\u3082\u5199\u3063\u3066\u3044\u308b\u65b9\u304c\u826f\u3044\n\n\u4eca\u56de\u5b66\u7fd2\u3055\u305b\u305f\u3044\u3082\u306e:\n\n> <img width=\"200\" alt=\"big.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/30362/60ad9dda-e56b-86eb-3532-1553c81311f5.png\">\n> apple tv \u306e youtube\u306b\u51fa\u3066\u304f\u308b\u4f55\u304b\n> \u306a\u306b\u3092\u3055\u305b\u305f\u3044\u304b\u306f\u304a\u5bdf\u3057\u304f\u3060\u3055\u3044(\u00b4\u30fb\u03c9\u30fb`)\n\n## dlib\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u307e\u305a\u306f\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb:\n\n    $ sudo apt-get install -y cmake gfortran graphicsmagick libgraphicsmagick1-dev libatlas-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev python-dev python-protobuf software-properties-common\n\n### pip\u3092\u4f7f\u3046\u5834\u5408:\n\n    $ sudo pip install dlib\n\n### anaconda\u3092\u4f7f\u3046\u5834\u5408:\n\n    $ conda install -c menpo dlib\n\n### \u81ea\u5206\u3067\u30d3\u30eb\u30c9\u3059\u308b\u5834\u5408(\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u9069\u5f53\u306b):\n\n    $ git clone -b v19.0 --depth=1 https://github.com/davisking/dlib\n    $ cd dlib && python setup.py install --yes USE_AVX_INSTRUCTIONS\n\nraspberry-pi2\u30671h\u304f\u3089\u3044\u304b\u304b\u308a\u307e\u3059\n\n## \u5b66\u7fd2\u6e96\u5099\n\n\u753b\u50cf\u306b\u5199\u3063\u3066\u3044\u308b\u7269\u4f53\u3092\u30e9\u30d9\u30eb\u3059\u308b\u305f\u3081\u306bimglab\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nimglab(dlib/tools)\u3092\u30b3\u30f3\u30d1\u30a4\u30eb(\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u9069\u5f53\u306b):\n\n    $ git clone -b v19.0 --depth=1 https://github.com/davisking/dlib\n    $ cd dlib/tools/imglab/ && mkdir build && cd build && cmake .. && cmake --build . --config Release\n\nraspberry-pi2\u30670.5h\u304f\u3089\u3044\u304b\u304b\u308a\u307e\u3059\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u306b\u300110-20\u679a\u7a0b\u5ea6\u306e\u753b\u50cf\u304b\u3089\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u7269\u4f53\u3092\u30e9\u30d9\u30ea\u30f3\u30b0\u3057\u307e\u3059:\n\n    $ cd ~/my_images\n    $ ~/dlib/tools/imglab/build/imglab -c training.xml training_*.jpg\n    $ ~/dlib/tools/imglab/build/imglab training.xml\n\nimglab\u306eGUI\u3067\u2193\u306e\u3088\u3046\u306b\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3059\u308b\u753b\u50cf\u3092shift\u3092\u62bc\u3057\u306a\u304c\u3089\u30de\u30a6\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059:\n\n> ![imglab-work.png](https://qiita-image-store.s3.amazonaws.com/0/30362/7ca4aaf8-67dc-4a95-6209-181b3b5a6668.png)\n\n\u540c\u69d8\u306b\u3001\u30c6\u30b9\u30c8\u7528\u306b\u3082\u4f55\u679a\u304b(5\u679a\u304f\u3089\u3044\uff1f)\u753b\u50cf\u3092\u9078\u629e\u3057\u3066\u30e9\u30d9\u30ea\u30f3\u30b0\u3057\u307e\u3059:\n\n    $ cd ~/my_images\n    $ ~/dlib/tools/imglab/build/imglab -c testing.xml testing_*.jpg\n    $ ~/dlib/tools/imglab/build/imglab testing.xml\n\n## \u5b66\u7fd2\n\nhttp://dlib.net/train_object_detector.py.html \u3092\u4fee\u6b63\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u2193\n\n~/trainning_object_detector.py:\n\n```py\nimport os\nimport sys\nimport dlib\n\nimg_dir = \".\"\n\noptions = dlib.simple_object_detector_training_options()\noptions.add_left_right_image_flips = False\noptions.C = 5\noptions.num_threads = 2\noptions.be_verbose = True\n\ntraining_xml_path = os.path.join(img_dir, \"training.xml\")\ntesting_xml_path = os.path.join(img_dir, \"testing.xml\")\n\ndlib.train_simple_object_detector(training_xml_path, \"detector.svm\", options)\n\nprint(\"\")\nprint(\"Training accuracy: {}\".format(\n    dlib.test_simple_object_detector(training_xml_path, \"detector.svm\")))\nprint(\"Testing accuracy: {}\".format(\n    dlib.test_simple_object_detector(testing_xml_path, \"detector.svm\")))\n```\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068:\n\n    \n```\n$ cd ~/my_images\n$ python ~/trainning_object_detector.py \n:\n(snip)\n:\nTraining complete.\nTrained with C: 5\nTraining with epsilon: 0.01\nTrained using 2 threads.\nTrained with sliding window 74 pixels wide by 86 pixels tall.\nUpsampled images 2 times to allow detection of small boxes.\nSaved detector to file detector.svm\n\nTraining accuracy: precision: 1, recall: 1, average precision: 1\nTesting accuracy: precision: 1, recall: 1, average precision: 1\n```\n\n\u3053\u308c\u3067`devector.svm`\u304c\u3067\u304d\u3042\u304c\u308a\u307e\u3059\u3002\u753b\u50cf\u679a\u6570\u306b\u3088\u308a\u307e\u3059\u304c\u3001raspberry-pi2\u30670.5h\u304f\u3089\u3044\u304b\u304b\u308a\u307e\u3059\u3002\n\u6700\u5f8c\u306e\u884c\u306e `average precision`\u304c`1`\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u826f\u3044\u5b66\u7fd2\u304c\u3067\u304d\u305f\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u5b9f\u8df5\n\nUSB\u30ab\u30e1\u30e9\u3092OpenCV\u3092\u3064\u304b\u3063\u3066\u5b66\u7fd2\u3057\u305f\u7d50\u679c\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\n\n## \u7528\u610f\u3059\u308b\u3082\u306e\n\n- USB\u30ab\u30e1\u30e9\uff08UVC\u306b\u5bfe\u5fdc\u3057\u3066\u308b\u3068\u63a5\u7d9a\u304c\u30e9\u30af\uff09\n\n## \u4e8b\u524d\u6e96\u5099\n\n\u30ab\u30e1\u30e9\u3092\u4f7f\u3046\u305f\u3081\u306bopencv\u3092\u5c0e\u5165\u3057\u307e\u3057\u3087\u3046\n\n    $ sudo apt-get install python-opencv\n\n## \u3084\u3063\u3066\u307f\u308b\n\n\u30ab\u30e1\u30e9\u3067\u7269\u4f53\u691c\u51fa\u3092\u3059\u308b\u30b5\u30f3\u30d7\u30eb:\n\n```py\nimport dlib\nimport cv2\n\ndetector = dlib.simple_object_detector(\"detector.svm\")\n\ncap = cv2.VideoCapture(0)\n\nwhile(True):\n    # Capture frame-by-frame\n    ret, frame = cap.read()\n    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n\n    dets = detector(frame)\n    \n    for d in dets:\n        cv2.rectangle(frame, (d.left(), d.top()), (d.right(), d.bottom()), (0, 0, 255), 2)\n        \n    # Display the resulting frame\n    cv2.imshow(\"frame\",frame)\n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\n\n# When everything done, release the capture\ncap.release()\ncv2.destroyAllWindows()\n```\n\n\u7121\u4e8b\u306b\u691c\u51fa\u3067\u304d\u307e\u3057\u305f:\n\n> <img width=\"283\" alt=\"detect.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/30362/84cc5d2c-14b3-910a-6354-ec054f1b6cc2.png\">\n\n\n### \u8aa4\u691c\u77e5\u3057\u305f\u5834\u5408\u306f\uff1f\n\n\u8aa4\u691c\u77e5\u3057\u305f\u753b\u50cf\u3092`training.xml`\u30d5\u30a1\u30a4\u30eb\u306b\u8ffd\u52a0\u3057\u3066\u3001\u518d\u5ea6\u5b66\u7fd2(`training_object_detect.py`)\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u4f8b:\n\n```\n  <image file='20160808_164302_016705.png'>\n  </image>\n```\n\n\n# \u53c2\u8003\n\n- HOG\u7279\u5fb4\u3068SVM\u306b\u3088\u308b\u7269\u4f53\u691c\u51fa http://ishi.main.jp/ros/ros_obj_detection.html\n\n\n", "tags": ["dlib", "MachineLearning"]}