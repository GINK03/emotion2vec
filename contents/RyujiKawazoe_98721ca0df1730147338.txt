{"context": "\n\n\u3069\u30cf\u30de\u308a\u3057\u305f\u5185\u5bb9\nscikit-learn\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\uff08MLPClassifer)\u3067\u4e88\u6e2c\u3057\u305f\u5185\u5bb9\u3068\u3001\u3042\u3089\u304b\u3058\u3081\u5b66\u7fd2\u3057\u3066\u53d6\u5f97\u3057\u3066\u3044\u305f\u91cd\u307f\u3001\u30d0\u30a4\u30a2\u30b9\u884c\u5217\u3092\u4f7f\u3063\u305f\u81ea\u4f5c\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30fc\u30ef\u30af\u306e\u4e88\u6e2c\u304c\u5168\u304f\u5408\u308f\u306a\u304b\u3063\u305f\u3002\n\n\u5148\u306b\u7d50\u8ad6\n\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u3092\u3057\u3066\u3044\u306a\u304b\u3063\u305f...\n\n\u3069\u30cf\u30de\u308a\u3057\u305f\u7d4c\u7def\n\n\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u306bPipeline\u3092\u4f7f\u3063\u3066\u6a19\u6e96\u5316\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3001\u30c6\u30b9\u30c8\uff08\u6c4e\u5316\u6027\u80fd\uff09\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u305f\u3002\n\u6700\u7d42\u7684\u306a\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u3060\u3051\u3067\u3001\u6a19\u6e96\u5316\u3092\u3057\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3068\u52dd\u624b\u306b\u601d\u3044\u8fbc\u3093\u3067\u3044\u305f\uff08\u6065\uff09\n\n\n\u304a\u307e\u3051\uff1aMLPClassifier\u3067\u53d6\u5f97\u3057\u305f\u91cd\u307f\u3001\u30d0\u30a4\u30a2\u30b9\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\nimport numpy as np\nimport os\nimport sys\nimport pandas as pd # dataFrame\u3092\u6271\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom math import exp, expm1\n\ninput = [[\u5165\u529b\u30c7\u30fc\u30bf\u306e\u914d\u5217]]\ninput = np.array(input)\n\ndf = pd.read_csv(\"\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\uff08\u5b66\u7fd2\u3055\u305b\u305f\u6642\u306e\u30c7\u30fc\u30bf\uff09\")\ndf_x = pd.get_dummies(\u30c0\u30df\u30fc\u5909\u6570\u3092\u751f\u6210\u3057\u305f\u3044\u5217)\n\n# \u6a19\u6e96\u5316\uff01\uff08\u3053\u3053\u3092\u5fd8\u308c\u3066\u3044\u305f\uff09\nsc = StandardScaler()\nsc.fit_transform(df_x)\ninput = sc.transform(input)\n\nbias0 = pd.read_csv(\"MLPClassiefer\u304b\u3089\u51fa\u529b\u3055\u308c\u305f\u30d0\u30a4\u30a2\u30b9csv\", header=None)\nbias0 = bias0.iloc[1:,1:].as_matrix()\n\nweight0 = pd.read_csv(\"MLPClassiefer\u304b\u3089\u51fa\u529b\u3055\u308c\u305f\u91cd\u307fcsv\", header=None)\nweight0 = weight0.iloc[1:,1:].as_matrix()\n\n# \u91cd\u307f\u30fb\u5165\u529b + \u30d0\u30a4\u30a2\u30b9\nlayer0 = np.dot(weight0.T, dummy.T) + bias0\n\n# \u96a0\u308c\u5c64\u306e\u6d3b\u6027\u5316\u3002\u4eca\u56de\u306f\u30e9\u30f3\u30d7\u95a2\u6570\u3067\u6d3b\u6027\u5316\u3057\u305f\u3002\nlayer0 = np.clip(layer0, 0, np.finfo(layer0.dtype).max, out=layer0)\n\n\n\u96a0\u308c\u5c64\u3060\u3051\u3001\u5165\u529b\u3068\u91cd\u307f\u306e\u7dda\u5f62\u7d50\u5408\u3092\u6d3b\u6027\u5316\u95a2\u6570\u306b\u6d41\u3057\u3066\u3002\u3002\u3002\n\u6700\u5f8c\u306e\u51fa\u529b\u5c64\u3067\u306f\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3067\u6d3b\u6027\u5316\noutput_layer = np.dot(\u6700\u5f8c\u306e\u96a0\u308c\u5c64\u306e\u91cd\u307f, \u6700\u5f8c\u306e\u96a0\u308c\u5c64\u306b\u5165\u308b\u30c7\u30fc\u30bf) + \u6700\u5f8c\u306e\u96a0\u308c\u5c64\u306e\u30d0\u30a4\u30a2\u30b9\n\n# \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3067\u6d3b\u6027\u5316\n1 / (1 + exp(-output_layer[0, 0]))\n\n\u3053\u3053\u3067[0, 0]\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001\uff12\u5024\u554f\u984c\u3092\u6271\u3063\u3066\u3044\u308b\u304b\u3089\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3069\u30cf\u30de\u308a\u3057\u305f\u5185\u5bb9\n---\n\nscikit-learn\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\uff08MLPClassifer)\u3067\u4e88\u6e2c\u3057\u305f\u5185\u5bb9\u3068\u3001\u3042\u3089\u304b\u3058\u3081\u5b66\u7fd2\u3057\u3066\u53d6\u5f97\u3057\u3066\u3044\u305f\u91cd\u307f\u3001\u30d0\u30a4\u30a2\u30b9\u884c\u5217\u3092\u4f7f\u3063\u305f\u81ea\u4f5c\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30fc\u30ef\u30af\u306e\u4e88\u6e2c\u304c\u5168\u304f\u5408\u308f\u306a\u304b\u3063\u305f\u3002\n\n\n\u5148\u306b\u7d50\u8ad6\n---\n\n\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u3092\u3057\u3066\u3044\u306a\u304b\u3063\u305f...\n\n\n\u3069\u30cf\u30de\u308a\u3057\u305f\u7d4c\u7def\n---\n\n* \u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u306bPipeline\u3092\u4f7f\u3063\u3066\u6a19\u6e96\u5316\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3001\u30c6\u30b9\u30c8\uff08\u6c4e\u5316\u6027\u80fd\uff09\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u305f\u3002\n* <font color=\"red\">\u6700\u7d42\u7684\u306a\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u3060\u3051\u3067\u3001\u6a19\u6e96\u5316\u3092\u3057\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3068\u52dd\u624b\u306b\u601d\u3044\u8fbc\u3093\u3067\u3044\u305f\uff08\u6065\uff09</font>\n\n\n\n\u304a\u307e\u3051\uff1aMLPClassifier\u3067\u53d6\u5f97\u3057\u305f\u91cd\u307f\u3001\u30d0\u30a4\u30a2\u30b9\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\n---\n\n~~~\nimport numpy as np\nimport os\nimport sys\nimport pandas as pd # dataFrame\u3092\u6271\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom math import exp, expm1\n\ninput = [[\u5165\u529b\u30c7\u30fc\u30bf\u306e\u914d\u5217]]\ninput = np.array(input)\n\ndf = pd.read_csv(\"\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\uff08\u5b66\u7fd2\u3055\u305b\u305f\u6642\u306e\u30c7\u30fc\u30bf\uff09\")\ndf_x = pd.get_dummies(\u30c0\u30df\u30fc\u5909\u6570\u3092\u751f\u6210\u3057\u305f\u3044\u5217)\n\n# \u6a19\u6e96\u5316\uff01\uff08\u3053\u3053\u3092\u5fd8\u308c\u3066\u3044\u305f\uff09\nsc = StandardScaler()\nsc.fit_transform(df_x)\ninput = sc.transform(input)\n\nbias0 = pd.read_csv(\"MLPClassiefer\u304b\u3089\u51fa\u529b\u3055\u308c\u305f\u30d0\u30a4\u30a2\u30b9csv\", header=None)\nbias0 = bias0.iloc[1:,1:].as_matrix()\n\nweight0 = pd.read_csv(\"MLPClassiefer\u304b\u3089\u51fa\u529b\u3055\u308c\u305f\u91cd\u307fcsv\", header=None)\nweight0 = weight0.iloc[1:,1:].as_matrix()\n\n# \u91cd\u307f\u30fb\u5165\u529b + \u30d0\u30a4\u30a2\u30b9\nlayer0 = np.dot(weight0.T, dummy.T) + bias0\n\n# \u96a0\u308c\u5c64\u306e\u6d3b\u6027\u5316\u3002\u4eca\u56de\u306f\u30e9\u30f3\u30d7\u95a2\u6570\u3067\u6d3b\u6027\u5316\u3057\u305f\u3002\nlayer0 = np.clip(layer0, 0, np.finfo(layer0.dtype).max, out=layer0)\n\n~~~\n\n\n\u96a0\u308c\u5c64\u3060\u3051\u3001\u5165\u529b\u3068\u91cd\u307f\u306e\u7dda\u5f62\u7d50\u5408\u3092\u6d3b\u6027\u5316\u95a2\u6570\u306b\u6d41\u3057\u3066\u3002\u3002\u3002\n\u6700\u5f8c\u306e\u51fa\u529b\u5c64\u3067\u306f\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3067\u6d3b\u6027\u5316\n\n~~~\noutput_layer = np.dot(\u6700\u5f8c\u306e\u96a0\u308c\u5c64\u306e\u91cd\u307f, \u6700\u5f8c\u306e\u96a0\u308c\u5c64\u306b\u5165\u308b\u30c7\u30fc\u30bf) + \u6700\u5f8c\u306e\u96a0\u308c\u5c64\u306e\u30d0\u30a4\u30a2\u30b9\n\n# \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3067\u6d3b\u6027\u5316\n1 / (1 + exp(-output_layer[0, 0]))\n~~~\n\n\u3053\u3053\u3067[0, 0]\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001\uff12\u5024\u554f\u984c\u3092\u6271\u3063\u3066\u3044\u308b\u304b\u3089\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n", "tags": ["\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af", "scikit-learn", "Python"]}