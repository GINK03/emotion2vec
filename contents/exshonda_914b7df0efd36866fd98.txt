{"tags": ["Arduino", "TOPPERS", "RTOS", "R2CA", "ESP8266"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cTOPPERS/R2CA\u306b\u3088\u308bWifi\u901a\u4fe1\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u30bf\u30b9\u30af\u306f1\u500b\u306e\u307f\u306e\u30b7\u30f3\u30b0\u30eb\u30bf\u30b9\u30af\u7248\u3092\u8aac\u660e\u3057\u307e\u3059\uff0e\nTOPPERS/R2CA\u306e\u8aac\u660e\u3068\u30b5\u30f3\u30d7\u30eb\u306e\u52d5\u4f5c\u65b9\u6cd5\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u898b\u3066\u4e0b\u3055\u3044\uff0e\n\nArduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u30b5\u30f3\u30d7\u30eb\u306e\u5b9f\u884c\nArduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : \u30de\u30eb\u30c1\u30bf\u30b9\u30af\n\n\n\u5909\u66f4\u5c65\u6b74\n\n2016/10/23\n\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\n\n\n2016/5/05\n\n\n \u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306e\u8a2d\u5b9a\u3092\u5225\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u305f\uff0e\n\n\n2016/3/31\n\n\n ESP8266\u306e\u30c9\u30e9\u30a4\u30d0\u306e\u898b\u76f4\u3057\u306b\u3088\u308a\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5909\u66f4\uff0e\n \u30b7\u30f3\u30b0\u30eb\u30bf\u30b9\u30af\u7248\u306b\u3064\u3044\u3066\u8aac\u660e\n\n\n\n\n\u30cf\u30fc\u30c9\u30a6\u30a8\u30a2\n\u3053\u306e\u8a18\u4e8b\u3067\u8aac\u660e\u3057\u3066\u3044\u308b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4ee5\u5916\u306bESP8266\u304c\u5fc5\u8981\u3067\u3059\uff0e\nESP8266\u306e\u30dc\u30fc\u30c9\u306f\u591a\u304f\u306e\u7a2e\u985e\u304c\u51fa\u3066\u3044\u307e\u3059\uff0e\u57fa\u672c\u7684\u306b\u306f\u3069\u308c\u3067\u3082\u826f\u3044\u3067\u3059\u304c\uff0c\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u3082\u306e\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff0e\n\n\n\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9 ESP-WROOM-02\n\n\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u63a5\u7d9a\u3057\u307e\u3057\u305f\uff0e\n\n\n\nNCES WiFi \u30dc\u30fc\u30c9\n\nESP8266\u3092Xbee\u4e92\u63db\u306e\u57fa\u76e4\u306b\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\nArduino \u30ef\u30a4\u30e4\u30ec\u30b9\u30d7\u30ed\u30c8\u30b7\u30fc\u30eb\u30c9\u3084\uff0cNCES CAN \u30b7\u30fc\u30eb\u30c9\u3092\u4f7f\u3046\u3068\uff0c\u7c21\u5358\u306bArduino\u3068\u63a5\u7d9a\u53ef\u80fd\u3067\u3059\uff0e\n\u30ed\u30b4\u304b\u3089\u5206\u304b\u308b\u3088\u3046\u306bTOPPERS/R2CA\u7528\u306b\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n\n\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u30d3\u30eb\u30c9\nR2CA\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\\examples\\WifiEcho\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u30dd\u30fc\u30c880\u306b\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u30a8\u30b3\u30fc\u30b5\u30fc\u30d0\u30fc\u3067\u3059\uff0e\n\u307e\u305aexamples_gdef.h\u3092\u958b\u304d\uff0c\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306e\u60c5\u5831\u3092SSID\u3068PASSWORD\u306b\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\n\\examples\\examples_gdef.h\n#define STA_SSID       \"\"\n#define STA_PASSWORD   \"\"\n\n\n\u6b21\u306br2ca_app.h\u3092\u958b\u304d\uff0c\u30b7\u30f3\u30b0\u30eb\u30bf\u30b9\u30af\u7248\u306b\u3059\u308b\u305f\u3081\u30de\u30af\u30ed\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u307e\u3059\uff0e\n\n\\examples\\WifiEcho\\r2ca_app.h\n//#define MULTI_ECHO_SERVER\n\n\n\u30d3\u30eb\u30c9\u306f\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308bdo_make.bat \u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u958b\u59cb\u3055\u308c\u307e\u3059\uff0e\u30d5\u30a1\u30a4\u30eb\u304c\u8272\u3005\u4f5c\u6210\u3055\u308c\u307e\u3059\u304c\uff0crca.elf\u304c\u51fa\u6765\u308b\u3068\u30d3\u30eb\u30c9\u6210\u529f\u3067\u3059\uff0e\n\n\u5b9f\u884c\n\u5b9f\u884c\u306fdo_run.bat\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u958b\u59cb\u3055\u308c\uff0c\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0eTeraterm\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3057\u3066\uff0cIP\u30a2\u30c9\u30ec\u30b9\u3092DHCP\u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\uff0e\u53d6\u5f97\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306f\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\uff0c192.168.1.27\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\nPC\u304b\u3089\u4e0a\u8a18\u306eIP\u306e\u30dd\u30fc\u30c880\u306b\u63a5\u7d9a\u3057\u3066\u9069\u5f53\u306a\u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u30a8\u30f3\u30bf\u30fc\u3092\u62bc\u3059\u3068\u5165\u529b\u3057\u305f\u6587\u5b57\u304c\u305d\u306e\u307e\u307e\u9001\u3089\u308c\u3066\u6765\u307e\u3059\uff0e\u7d42\u4e86\u3059\u308b\u306b\u306f\uff0cCtrl-Q\u5165\u529b\u3057\u3066\u30a8\u30f3\u30bf\u30fc\u3092\u62bc\u3057\u307e\u3059\uff0e\n\n\u30dc\u30fc\u30c9\u5074\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u3082\u306f\uff0c\u53d7\u4fe1\u3057\u305f\u65e8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u521d\u671f\u5316\u51e6\u7406\n\u521d\u671f\u5316\u51e6\u7406\u3067\u306f\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3057\u3066IP\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u30dd\u30fc\u30c8\u756a\u53f780\u756a\u3067TCP\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e#define WMODE_STATION \u306e\u5b9a\u7fa9\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u3068\uff0c\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u52d5\u4f5c\u3057\u307e\u3059\uff0e\n\n\\examples\\WifiEcho\\r2ca_app.cpp\nvoid setup()\n{\n    int ret;\n\n    Serial.println(\"Echo Server : Start!\");\n\n    ret = WiFi.begin(Serial5, 115200);\n\n    if(ret == 1) {\n        Serial.print(\"Cannot communicate with ESP8266.\");\n        while(1);        \n    } else if(ret == 2) {\n        Serial.println(\"FW Version mismatch.\");\n        Serial.print(\"FW Version:\");\n        Serial.println(WiFi.getVersion().c_str());\n        Serial.print(\"Supported FW Version:\");\n        Serial.println(ESP8266_SUPPORT_VERSION);\n        while(1);\n    } else {\n        Serial.print(\"begin ok\\r\\n\");\n    }\n\n    Serial.print(\"FW Version:\");\n    Serial.println(WiFi.getVersion().c_str());\n\n#ifdef  WMODE_STATION\n    if (WiFi.setOprToStation()) {\n        Serial.print(\"to station ok\\r\\n\");\n    } else {\n        Serial.print(\"to station err\\r\\n\");\n    }\n\n    if (wifi.joinAP(STA_SSID, STA_PASSWORD)) {\n        Serial.print(\"Join AP success\\r\\n\");\n        Serial.print(\"IP: \");\n        Serial.println(WiFi.getLocalIP().c_str());    \n    } else {\n        Serial.print(\"Join AP failure\\r\\n\");\n    }\n#else /* !WMODE_STATION */ \n    if (WiFi.setOprToSoftAP()) {\n        Serial.print(\"to softap ok\\r\\n\");\n    } else {\n        Serial.print(\"to softap err\\r\\n\");\n    }    \n    if(WiFi.setSoftAPParam(AP_SSID, AP_PASSWORD, 7, 0)){\n        Serial.print(\"Set SoftAP success\\r\\n\");\n        Serial.print(\"IP: \");\n        Serial.println(WiFi.getLocalIP().c_str());            \n    }\n    else {\n        Serial.print(\"Set SoftAP failure\\r\\n\");\n    }\n#endif /* WMODE_STATION */\n\n    if (WiFi.enableMUX()) {\n        Serial.print(\"multiple ok\\r\\n\");\n    } else {\n        Serial.print(\"multiple err\\r\\n\");\n    }\n\n    if (WiFi.startTCPServer(80)) {\n        Serial.print(\"start tcp server ok\\r\\n\");\n    } else {\n        Serial.print(\"start tcp server err\\r\\n\");\n    }\n\n    if (WiFi.setTCPServerTimeout(60)) { \n        Serial.print(\"set tcp server timout 60 seconds\\r\\n\");\n    } else {\n        Serial.print(\"set tcp server timout err\\r\\n\");\n    }\n\n    Serial.print(\"setup end\\r\\n\");\n\n    setup_done = true;\n}\n\n\n\n\u30a8\u30b3\u30fc\u30b5\u30fc\u30d0\u30fc\u51e6\u7406\n\u307e\u305a\uff0c\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u5909\u5316\u3057\u305f\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\uff0e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306f\u6700\u59275\u500b\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f30\u306b\u5bfe\u3057\u3066\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\uff0c\u30a8\u30b3\u30fc\u30d0\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\uff0e\u30b3\u30cd\u30af\u30b7\u30e7\u30f30\u306b\u63a5\u7d9a\u304c\u3042\u308c\u3070\uff0cmux_id\u306b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\u6b21\u306b\uff0c\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u78ba\u7acb\u3057\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\uff0c80\u756a\u306e\u30dd\u30fc\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\uff0e\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u306f\uff0c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3057\u305f\u5f8c\uff0c\u30c7\u30fc\u30bf\u3092\u30a8\u30b3\u30fc\u30d0\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\uff0cCrtl-Q\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u306f\uff0c\u7d42\u4e86\u51e6\u7406\u3082\u884c\u3044\u307e\u3059\uff0e\n\n\\examples\\WifiEcho\\r2ca_app.cpp\nuint8_t mux_id_ptn;\n\nuint8_t mux_id = MUX_NULL;\nuint8_t task1_mux_id = MUX_NULL;\n\nvoid loop()\n{\n    uint8_t buffer[128] = {0};\n    uint8_t pre_mux_id_ptn;    \n    uint32_t len;\n    uint32_t i;\n\n    delay(1);    \n    /* Check Connection Status */\n    pre_mux_id_ptn = mux_id_ptn;\n\n    if(!Wifi.getMuxCStatus(&mux_id_ptn)) {\n        Serial.println(\"getMuxCStatus(&mux_id_ptn) : Error!\");\n    }\n    else {        \n        if (pre_mux_id_ptn != mux_id_ptn) {\n            Serial.print(\"Connection Status changed! : 0x\");\n            Serial.println(mux_id_ptn, HEX);\n            if (mux_id_ptn & 0x01) {\n                mux_id = 0; \n            }\n            if (mux_id_ptn & 0x02) {\n                task1_mux_id = 1;\n            }\n        }\n    }\n\n    if (mux_id == MUX_NULL) {\n        return;\n    }\n\n    if (!WiFi.isConnected(mux_id)) {\n        Serial.print(\"Echo Server : Port is closed: \");\n        Serial.println(mux_id);\n        mux_id = MUX_NULL;\n        return;\n    }\n\n    if((len = WiFi.recv(mux_id, buffer, sizeof(buffer))) == 0) {\n        return;\n    }\n\n    /* Recived Data */\n\n    for(i = 0; i < len; i++) {\n        /* If Recive Ctrl-q(17) */\n        if(buffer[i] == 17) {\n            Serial.print(\"Echo Server : Close port : \");\n            Serial.println(mux_id);            \n            WiFi.releaseTCP(mux_id);\n            mux_id = MUX_NULL;\n            return;\n        }\n    }\n\n    Serial.print(\"Echo Server : Recive Data from mux : \");\n    Serial.println(mux_id);\n    Serial.print(\"Echo Server : Recive len   : \");\n    Serial.println(len);\n    Serial.print(\"Echo Server : Recive Data  : \");\n    Serial.println((char*)buffer);\n\n    if(!WiFi.send(mux_id, buffer, len)) {\n        Serial.println(\"Echo Server : send(mux_id, cmd) : Error!\");\n    }\n}\n\n\n\nAPI\nESP8266\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fITEADLIB_Arduino_WeeESP8266\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066\u3044\u307e\u3059\u304c\uff0cAPI\u5e7e\u3064\u304b\u5897\u3084\u3057\u3066\u3044\u307e\u3059\uff0e\n    int begin(HardwareSerial &uart, uint32_t baud = 115200);\n    bool kick(void);\n    bool restart(void);\n    String getVersion(void);\n    bool setOprToStation(void);\n    bool setOprToSoftAP(void);\n    bool setOprToStationSoftAP(void);\n    String getAPList(void);\n    bool joinAP(String ssid, String pwd);\n    bool leaveAP(void);\n    bool setSoftAPParam(String ssid, String pwd, uint8_t chl = 7, uint8_t ecn = 4);\n    String getJoinedDeviceIP(void);\n    String getIPStatus(void);\n    String getLocalIP(void);\n    bool enableMUX(void);\n    bool disableMUX(void);\n    bool createTCP(String addr, uint32_t port);\n    bool releaseTCP(void);\n    bool registerUDP(String addr, uint32_t port);\n    bool unregisterUDP(void);\n    bool createTCP(uint8_t mux_id, String addr, uint32_t port);\n    bool releaseTCP(uint8_t mux_id);\n    bool registerUDP(uint8_t mux_id, String addr, uint32_t port);\n    bool unregisterUDP(uint8_t mux_id);\n    bool setTCPServerTimeout(uint32_t timeout = 180);\n    bool startTCPServer(uint32_t port = 333);\n    bool stopTCPServer(void);\n    bool startServer(uint32_t port = 333);\n    bool stopServer(void);\n    bool send(const uint8_t *buffer, uint32_t len);\n    bool send(uint8_t mux_id, const uint8_t *buffer, uint32_t len);\n    bool send(String &str);\n    bool send(uint8_t mux_id, String &str);\n    uint32_t recv(uint8_t *buffer, uint32_t buffer_size, uint32_t timeout = 1000);\n    uint32_t recv(uint8_t mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout = 1000);\n    uint32_t recv(uint8_t *coming_mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout = 1000);\n    bool isDataAvailable(uint8_t mux_id);\n    bool isDataAvailable(void);\n    bool isConnected(void);\n    bool isConnected(uint8_t mux_id);\n    bool getMuxCStatus(uint8_t *mux_id_ptn);\n\n\n\n\u304a\u308f\u308a\u306b\nESP8266\u3092\u4f7f\u3046\u3068\u5b89\u4fa1\u306b\u7c21\u5358\u306b\u30cd\u30c3\u30c8\u306b\u63a5\u7d9a\u3067\u304d\u307e\u3059\uff0eTOPPERS/R2CA\u3092\u4f7f\u3046\u3068\uff0c\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u304c\u4f7f\u3048\u308b\u306e\u3067\uff0c\u30b5\u30fc\u30d0\u30fc\u3067\u63a5\u7d9a\u5f85\u3061\u306b\u306a\u308a\u306a\u304c\u3089\uff0c\u30bb\u30f3\u30b5\u30fc\u7b49\u306e\u51e6\u7406\u3092\u540c\u6642\u306b\u5b9f\u884c\u51fa\u6765\u307e\u3059\uff0e\n# \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0c[TOPPERS/R2CA](http://dev.toppers.jp/trac_user/contrib/wiki/rtos_arduino)\u306b\u3088\u308bWifi\u901a\u4fe1\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u30bf\u30b9\u30af\u306f1\u500b\u306e\u307f\u306e\u30b7\u30f3\u30b0\u30eb\u30bf\u30b9\u30af\u7248\u3092\u8aac\u660e\u3057\u307e\u3059\uff0e\n\nTOPPERS/R2CA\u306e\u8aac\u660e\u3068\u30b5\u30f3\u30d7\u30eb\u306e\u52d5\u4f5c\u65b9\u6cd5\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u898b\u3066\u4e0b\u3055\u3044\uff0e\n\n - [Arduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u30b5\u30f3\u30d7\u30eb\u306e\u5b9f\u884c](http://qiita.com/exshonda/items/093870ecdcda6c79678c)\n - [Arduino M0 Pro \u3067\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 : \u30de\u30eb\u30c1\u30bf\u30b9\u30af](http://qiita.com/exshonda/items/7afb12b56696cf44895e)\n\n\n# \u5909\u66f4\u5c65\u6b74\n - 2016/10/23\n    - \u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\n - 2016/5/05\n  -  \u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306e\u8a2d\u5b9a\u3092\u5225\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u305f\uff0e\n - 2016/3/31\n  -  ESP8266\u306e\u30c9\u30e9\u30a4\u30d0\u306e\u898b\u76f4\u3057\u306b\u3088\u308a\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5909\u66f4\uff0e\n  -  \u30b7\u30f3\u30b0\u30eb\u30bf\u30b9\u30af\u7248\u306b\u3064\u3044\u3066\u8aac\u660e\n\n# \u30cf\u30fc\u30c9\u30a6\u30a8\u30a2\n[\u3053\u306e\u8a18\u4e8b](http://qiita.com/exshonda/items/7afb12b56696cf44895e)\u3067\u8aac\u660e\u3057\u3066\u3044\u308b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4ee5\u5916\u306bESP8266\u304c\u5fc5\u8981\u3067\u3059\uff0e\n\nESP8266\u306e\u30dc\u30fc\u30c9\u306f\u591a\u304f\u306e\u7a2e\u985e\u304c\u51fa\u3066\u3044\u307e\u3059\uff0e\u57fa\u672c\u7684\u306b\u306f\u3069\u308c\u3067\u3082\u826f\u3044\u3067\u3059\u304c\uff0c\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u3082\u306e\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff0e\n\n- \u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9 [ESP-WROOM-02](https://www.switch-science.com/catalog/2341/)\n  - \u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u63a5\u7d9a\u3057\u307e\u3057\u305f\uff0e\n  \n- [NCES WiFi \u30dc\u30fc\u30c9](http://homepage3.nifty.com/fpga/files/board/nces_shield/)\n  - ESP8266\u3092Xbee\u4e92\u63db\u306e\u57fa\u76e4\u306b\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\n  - Arduino \u30ef\u30a4\u30e4\u30ec\u30b9\u30d7\u30ed\u30c8\u30b7\u30fc\u30eb\u30c9\u3084\uff0c[NCES CAN \u30b7\u30fc\u30eb\u30c9](http://homepage3.nifty.com/fpga/files/board/nces_shield/)\u3092\u4f7f\u3046\u3068\uff0c\u7c21\u5358\u306bArduino\u3068\u63a5\u7d9a\u53ef\u80fd\u3067\u3059\uff0e\n  - \u30ed\u30b4\u304b\u3089\u5206\u304b\u308b\u3088\u3046\u306bTOPPERS/R2CA\u7528\u306b\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n\n![nces_can.jpg](https://qiita-image-store.s3.amazonaws.com/0/106870/b5ec9c54-ca54-3278-0892-92d55159deb7.jpeg)\n\n\n\n#\u30b5\u30f3\u30d7\u30eb\u306e\u30d3\u30eb\u30c9\n\nR2CA\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\\examples\\WifiEcho\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u30dd\u30fc\u30c880\u306b\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u30a8\u30b3\u30fc\u30b5\u30fc\u30d0\u30fc\u3067\u3059\uff0e\n\n\u307e\u305aexamples_gdef.h\u3092\u958b\u304d\uff0c\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306e\u60c5\u5831\u3092SSID\u3068PASSWORD\u306b\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\n```\\examples\\examples_gdef.h\n#define STA_SSID       \"\"\n#define STA_PASSWORD   \"\"\n```\n\n\u6b21\u306br2ca_app.h\u3092\u958b\u304d\uff0c\u30b7\u30f3\u30b0\u30eb\u30bf\u30b9\u30af\u7248\u306b\u3059\u308b\u305f\u3081\u30de\u30af\u30ed\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u307e\u3059\uff0e\n\n```\\examples\\WifiEcho\\r2ca_app.h\n//#define MULTI_ECHO_SERVER\n```\n\n\u30d3\u30eb\u30c9\u306f\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308bdo_make.bat \u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u958b\u59cb\u3055\u308c\u307e\u3059\uff0e\u30d5\u30a1\u30a4\u30eb\u304c\u8272\u3005\u4f5c\u6210\u3055\u308c\u307e\u3059\u304c\uff0crca.elf\u304c\u51fa\u6765\u308b\u3068\u30d3\u30eb\u30c9\u6210\u529f\u3067\u3059\uff0e\n\n#\u5b9f\u884c\n\n\u5b9f\u884c\u306fdo_run.bat\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u958b\u59cb\u3055\u308c\uff0c\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0eTeraterm\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3057\u3066\uff0cIP\u30a2\u30c9\u30ec\u30b9\u3092DHCP\u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\uff0e\u53d6\u5f97\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306f\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\uff0c192.168.1.27\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n![WS000000.JPG](https://qiita-image-store.s3.amazonaws.com/0/106870/0af215ac-875c-7714-3316-c7616fe09978.jpeg)\n\n\nPC\u304b\u3089\u4e0a\u8a18\u306eIP\u306e\u30dd\u30fc\u30c880\u306b\u63a5\u7d9a\u3057\u3066\u9069\u5f53\u306a\u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u30a8\u30f3\u30bf\u30fc\u3092\u62bc\u3059\u3068\u5165\u529b\u3057\u305f\u6587\u5b57\u304c\u305d\u306e\u307e\u307e\u9001\u3089\u308c\u3066\u6765\u307e\u3059\uff0e\u7d42\u4e86\u3059\u308b\u306b\u306f\uff0cCtrl-Q\u5165\u529b\u3057\u3066\u30a8\u30f3\u30bf\u30fc\u3092\u62bc\u3057\u307e\u3059\uff0e\n\n![WS000001.JPG](https://qiita-image-store.s3.amazonaws.com/0/106870/82beb8e1-c041-0fe7-afc3-804a545d997d.jpeg)\n\n\u30dc\u30fc\u30c9\u5074\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u3082\u306f\uff0c\u53d7\u4fe1\u3057\u305f\u65e8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\n![WS000002.JPG](https://qiita-image-store.s3.amazonaws.com/0/106870/2503fcbc-3600-659c-3bfe-8f3fa3c8116e.jpeg)\n\n\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0\n\n##\u521d\u671f\u5316\u51e6\u7406\n\n\u521d\u671f\u5316\u51e6\u7406\u3067\u306f\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306b\u63a5\u7d9a\u3057\u3066IP\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u30dd\u30fc\u30c8\u756a\u53f780\u756a\u3067TCP\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e#define WMODE_STATION \u306e\u5b9a\u7fa9\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u3068\uff0c\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u52d5\u4f5c\u3057\u307e\u3059\uff0e\n\n```\\examples\\WifiEcho\\r2ca_app.cpp\nvoid setup()\n{\n    int ret;\n    \n    Serial.println(\"Echo Server : Start!\");\n    \n    ret = WiFi.begin(Serial5, 115200);\n\n    if(ret == 1) {\n        Serial.print(\"Cannot communicate with ESP8266.\");\n        while(1);        \n    } else if(ret == 2) {\n        Serial.println(\"FW Version mismatch.\");\n        Serial.print(\"FW Version:\");\n        Serial.println(WiFi.getVersion().c_str());\n        Serial.print(\"Supported FW Version:\");\n        Serial.println(ESP8266_SUPPORT_VERSION);\n        while(1);\n    } else {\n        Serial.print(\"begin ok\\r\\n\");\n    }\n\n    Serial.print(\"FW Version:\");\n    Serial.println(WiFi.getVersion().c_str());\n    \n#ifdef  WMODE_STATION\n    if (WiFi.setOprToStation()) {\n        Serial.print(\"to station ok\\r\\n\");\n    } else {\n        Serial.print(\"to station err\\r\\n\");\n    }\n    \n    if (wifi.joinAP(STA_SSID, STA_PASSWORD)) {\n        Serial.print(\"Join AP success\\r\\n\");\n        Serial.print(\"IP: \");\n        Serial.println(WiFi.getLocalIP().c_str());    \n    } else {\n        Serial.print(\"Join AP failure\\r\\n\");\n    }\n#else /* !WMODE_STATION */ \n    if (WiFi.setOprToSoftAP()) {\n        Serial.print(\"to softap ok\\r\\n\");\n    } else {\n        Serial.print(\"to softap err\\r\\n\");\n    }    \n    if(WiFi.setSoftAPParam(AP_SSID, AP_PASSWORD, 7, 0)){\n        Serial.print(\"Set SoftAP success\\r\\n\");\n        Serial.print(\"IP: \");\n        Serial.println(WiFi.getLocalIP().c_str());            \n    }\n    else {\n        Serial.print(\"Set SoftAP failure\\r\\n\");\n    }\n#endif /* WMODE_STATION */\n    \n    if (WiFi.enableMUX()) {\n        Serial.print(\"multiple ok\\r\\n\");\n    } else {\n        Serial.print(\"multiple err\\r\\n\");\n    }\n\n    if (WiFi.startTCPServer(80)) {\n        Serial.print(\"start tcp server ok\\r\\n\");\n    } else {\n        Serial.print(\"start tcp server err\\r\\n\");\n    }\n\n    if (WiFi.setTCPServerTimeout(60)) { \n        Serial.print(\"set tcp server timout 60 seconds\\r\\n\");\n    } else {\n        Serial.print(\"set tcp server timout err\\r\\n\");\n    }\n\n    Serial.print(\"setup end\\r\\n\");\n\n    setup_done = true;\n}\n```\n\n##\u30a8\u30b3\u30fc\u30b5\u30fc\u30d0\u30fc\u51e6\u7406\n\n\u307e\u305a\uff0c\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u5909\u5316\u3057\u305f\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\uff0e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306f\u6700\u59275\u500b\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f30\u306b\u5bfe\u3057\u3066\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\uff0c\u30a8\u30b3\u30fc\u30d0\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\uff0e\u30b3\u30cd\u30af\u30b7\u30e7\u30f30\u306b\u63a5\u7d9a\u304c\u3042\u308c\u3070\uff0cmux_id\u306b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\n\u6b21\u306b\uff0c\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u78ba\u7acb\u3057\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\uff0c80\u756a\u306e\u30dd\u30fc\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\uff0e\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u306f\uff0c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3057\u305f\u5f8c\uff0c\u30c7\u30fc\u30bf\u3092\u30a8\u30b3\u30fc\u30d0\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\uff0cCrtl-Q\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u306f\uff0c\u7d42\u4e86\u51e6\u7406\u3082\u884c\u3044\u307e\u3059\uff0e\n\n```\\examples\\WifiEcho\\r2ca_app.cpp\nuint8_t mux_id_ptn;\n\nuint8_t mux_id = MUX_NULL;\nuint8_t task1_mux_id = MUX_NULL;\n\nvoid loop()\n{\n    uint8_t buffer[128] = {0};\n    uint8_t pre_mux_id_ptn;    \n    uint32_t len;\n    uint32_t i;\n\n    delay(1);    \n    /* Check Connection Status */\n    pre_mux_id_ptn = mux_id_ptn;\n\n    if(!Wifi.getMuxCStatus(&mux_id_ptn)) {\n        Serial.println(\"getMuxCStatus(&mux_id_ptn) : Error!\");\n    }\n    else {        \n        if (pre_mux_id_ptn != mux_id_ptn) {\n            Serial.print(\"Connection Status changed! : 0x\");\n            Serial.println(mux_id_ptn, HEX);\n            if (mux_id_ptn & 0x01) {\n                mux_id = 0; \n            }\n            if (mux_id_ptn & 0x02) {\n                task1_mux_id = 1;\n            }\n        }\n    }\n\n    if (mux_id == MUX_NULL) {\n        return;\n    }\n    \n    if (!WiFi.isConnected(mux_id)) {\n        Serial.print(\"Echo Server : Port is closed: \");\n        Serial.println(mux_id);\n        mux_id = MUX_NULL;\n        return;\n    }\n    \n    if((len = WiFi.recv(mux_id, buffer, sizeof(buffer))) == 0) {\n        return;\n    }\n\n    /* Recived Data */\n\n    for(i = 0; i < len; i++) {\n        /* If Recive Ctrl-q(17) */\n        if(buffer[i] == 17) {\n            Serial.print(\"Echo Server : Close port : \");\n            Serial.println(mux_id);            \n            WiFi.releaseTCP(mux_id);\n            mux_id = MUX_NULL;\n            return;\n        }\n    }\n\n    Serial.print(\"Echo Server : Recive Data from mux : \");\n    Serial.println(mux_id);\n    Serial.print(\"Echo Server : Recive len   : \");\n    Serial.println(len);\n    Serial.print(\"Echo Server : Recive Data  : \");\n    Serial.println((char*)buffer);\n    \n    if(!WiFi.send(mux_id, buffer, len)) {\n        Serial.println(\"Echo Server : send(mux_id, cmd) : Error!\");\n    }\n}\n```\n\n##API\n\nESP8266\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f[ITEADLIB_Arduino_WeeESP8266](https://github.com/itead/ITEADLIB_Arduino_WeeESP8266)\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066\u3044\u307e\u3059\u304c\uff0cAPI\u5e7e\u3064\u304b\u5897\u3084\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```\n    int begin(HardwareSerial &uart, uint32_t baud = 115200);\n    bool kick(void);\n    bool restart(void);\n    String getVersion(void);\n    bool setOprToStation(void);\n    bool setOprToSoftAP(void);\n    bool setOprToStationSoftAP(void);\n    String getAPList(void);\n    bool joinAP(String ssid, String pwd);\n    bool leaveAP(void);\n    bool setSoftAPParam(String ssid, String pwd, uint8_t chl = 7, uint8_t ecn = 4);\n    String getJoinedDeviceIP(void);\n    String getIPStatus(void);\n    String getLocalIP(void);\n    bool enableMUX(void);\n    bool disableMUX(void);\n    bool createTCP(String addr, uint32_t port);\n    bool releaseTCP(void);\n    bool registerUDP(String addr, uint32_t port);\n    bool unregisterUDP(void);\n    bool createTCP(uint8_t mux_id, String addr, uint32_t port);\n    bool releaseTCP(uint8_t mux_id);\n    bool registerUDP(uint8_t mux_id, String addr, uint32_t port);\n    bool unregisterUDP(uint8_t mux_id);\n    bool setTCPServerTimeout(uint32_t timeout = 180);\n    bool startTCPServer(uint32_t port = 333);\n    bool stopTCPServer(void);\n    bool startServer(uint32_t port = 333);\n    bool stopServer(void);\n    bool send(const uint8_t *buffer, uint32_t len);\n    bool send(uint8_t mux_id, const uint8_t *buffer, uint32_t len);\n    bool send(String &str);\n    bool send(uint8_t mux_id, String &str);\n    uint32_t recv(uint8_t *buffer, uint32_t buffer_size, uint32_t timeout = 1000);\n    uint32_t recv(uint8_t mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout = 1000);\n    uint32_t recv(uint8_t *coming_mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout = 1000);\n    bool isDataAvailable(uint8_t mux_id);\n    bool isDataAvailable(void);\n    bool isConnected(void);\n    bool isConnected(uint8_t mux_id);\n    bool getMuxCStatus(uint8_t *mux_id_ptn);\n    \n```\n\n# \u304a\u308f\u308a\u306b\nESP8266\u3092\u4f7f\u3046\u3068\u5b89\u4fa1\u306b\u7c21\u5358\u306b\u30cd\u30c3\u30c8\u306b\u63a5\u7d9a\u3067\u304d\u307e\u3059\uff0eTOPPERS/R2CA\u3092\u4f7f\u3046\u3068\uff0c\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u304c\u4f7f\u3048\u308b\u306e\u3067\uff0c\u30b5\u30fc\u30d0\u30fc\u3067\u63a5\u7d9a\u5f85\u3061\u306b\u306a\u308a\u306a\u304c\u3089\uff0c\u30bb\u30f3\u30b5\u30fc\u7b49\u306e\u51e6\u7406\u3092\u540c\u6642\u306b\u5b9f\u884c\u51fa\u6765\u307e\u3059\uff0e\n"}