{"context": "\u524d\u56de\u306b\u7d9a\u304d\u3001Nefry\u3067Grove\u306e\u7167\u5ea6\u30bb\u30f3\u30b5\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\nGrove - Luminance Sensor\n\nhttp://wiki.seeed.cc/Grove-Luminance_Sensor/\n\n\n\u30b9\u30da\u30c3\u30af\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002 Nefry\u3060\u30683.3V\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30bb\u30f3\u30b5\u3092\u4f7f\u3048\u308b\u306e\u3067\u3053\u306e\u30bb\u30f3\u30b5\u30fc\u306f\u554f\u984c\u306a\u304f\u4f7f\u3048\u307e\u3059\u3002\nParameter   Value\nVcc 2.4V ~ 5.5V\nLinear output range 0.0 ~ 2.3V\nLuminance measurement range 0 ~ 1000 Lux\n\n\n\u6697\u304f\u306a\u3063\u305f\u3089\u30e9\u30a4\u30c8\u304c\u3064\u304f(\u660e\u308b\u304f\u306a\u308b)\u8857\u706f\u3063\u307d\u3044\u3082\u306e\u3092\u3064\u304f\u308b\n\u660e\u308b\u3055\u306b\u53cd\u5fdc\u3059\u308b\u3082\u306e\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nArduino\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u6bdb\u304c\u751f\u3048\u305f\u304f\u3089\u3044\u3067\u3059\u304c\u4ee5\u4e0b\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u308a\u307e\u3059\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3072\u3088\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3082\u306e\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n#include <Nefry.h>\n\nfloat VoutArray[] =  { 0.0011498,  0.0033908,   0.011498, 0.041803,0.15199,     0.53367, 1.3689,   1.9068,  2.3};\nfloat LuxArray[] =  { 1.0108,     3.1201,  9.8051,   27.43,   69.545,   232.67,  645.11,   73.52,  1000};\n\nvoid setup() {\n  Nefry.println(\"Grove Luminance Sensor !\");\n  Nefry.setLed(0,0,0);\n}\n\nvoid loop() {\n    Nefry.print(\"Vout =\");\n    Nefry.print(readAPDS9002Vout(A0));\n    Nefry.print(\" V,Luminance =\");\n    Nefry.print(readLuminance(A0));\n    Nefry.println(\"Lux\");\n    float val = 255;\n    val = val - (readLuminance(A0) * 2);\n    Nefry.println(val);\n    Nefry.setLed(200,200,0,val);\n    Nefry.ndelay(500);\n}\n\nfloat readAPDS9002Vout(uint8_t analogpin)\n{\n    // MeasuredVout = ADC Value * (Vcc / 1023) * (3 / Vcc)\n    // Vout samples are with reference to 3V Vcc\n    // The above expression is simplified by cancelling out Vcc\n    float MeasuredVout = analogRead(A0) * (3.0 / 1023.0);\n    //Above 2.3V , the sensor value is saturated\n\n    return MeasuredVout;\n\n}\n\nfloat readLuminance(uint8_t analogpin)\n{\n\n    // MeasuredVout = ADC Value * (Vcc / 1023) * (3 / Vcc)\n    // Vout samples are with reference to 3V Vcc\n    // The above expression is simplified by cancelling out Vcc\n    float MeasuredVout = analogRead(A0) * (3.0 / 1023.0);\n    float Luminance = FmultiMap(MeasuredVout, VoutArray, LuxArray, 9);\n\n    /**************************************************************************\n\n    The Luminance in Lux is calculated based on APDS9002 datasheet -- > Graph 1\n    ( Output voltage vs. luminance at different load resistor)\n    The load resistor is 1k in this board. Vout is referenced to 3V Vcc.\n\n    The data from the graph is extracted using WebPlotDigitizer\n    http://arohatgi.info/WebPlotDigitizer/app/\n\n    VoutArray[] and LuxArray[] are these extracted data. Using MultiMap, the data\n    is interpolated to get the Luminance in Lux.\n\n    This implementation uses floating point arithmetic and hence will consume\n    more flash, RAM and time.\n\n    The Luminance in Lux is an approximation and depends on the accuracy of\n    Graph 1 used.\n\n    ***************************************************************************/\n\n    return Luminance;\n}\n\n\n//This code uses MultiMap implementation from http://playground.arduino.cc/Main/MultiMap\n\nfloat FmultiMap(float val, float * _in, float * _out, uint8_t size)\n{\n    // take care the value is within range\n    // val = constrain(val, _in[0], _in[size-1]);\n    if (val <= _in[0]) return _out[0];\n    if (val >= _in[size-1]) return _out[size-1];\n\n    // search right interval\n    uint8_t pos = 1;  // _in[0] allready tested\n    while(val > _in[pos]) pos++;\n\n    // this will handle all exact \"points\" in the _in array\n    if (val == _in[pos]) return _out[pos];\n\n    // interpolate in the right segment for the rest\n    return (val - _in[pos-1]) * (_out[pos] - _out[pos-1]) / (_in[pos] - _in[pos-1]) + _out[pos-1];\n}\n\n\n[\u524d\u56de](http://qiita.com/n0bisuke/items/3ec65674696f94bc1e96)\u306b\u7d9a\u304d\u3001[Nefry](https://dotstud.io/shop/nefry-connect-internet/)\u3067Grove\u306e\u7167\u5ea6\u30bb\u30f3\u30b5\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n## Grove - Luminance Sensor\n\n* http://wiki.seeed.cc/Grove-Luminance_Sensor/\n\n![](https://i.gyazo.com/68adc9fc39a1554903a12470d47fe34f.png)\n\n\u30b9\u30da\u30c3\u30af\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002 Nefry\u3060\u30683.3V\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30bb\u30f3\u30b5\u3092\u4f7f\u3048\u308b\u306e\u3067\u3053\u306e\u30bb\u30f3\u30b5\u30fc\u306f\u554f\u984c\u306a\u304f\u4f7f\u3048\u307e\u3059\u3002\n\n```\nParameter\tValue\nVcc\t2.4V ~ 5.5V\nLinear output range\t0.0 ~ 2.3V\nLuminance measurement range\t0 ~ 1000 Lux\n```\n\n## \u6697\u304f\u306a\u3063\u305f\u3089\u30e9\u30a4\u30c8\u304c\u3064\u304f(\u660e\u308b\u304f\u306a\u308b)\u8857\u706f\u3063\u307d\u3044\u3082\u306e\u3092\u3064\u304f\u308b\n\n\u660e\u308b\u3055\u306b\u53cd\u5fdc\u3059\u308b\u3082\u306e\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n![](https://i.gyazo.com/7d2f0afc1365b0b86bb914176083b993.gif)\n\nArduino\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u6bdb\u304c\u751f\u3048\u305f\u304f\u3089\u3044\u3067\u3059\u304c\u4ee5\u4e0b\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3072\u3088\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3082\u306e\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n```\n#include <Nefry.h>\n\nfloat VoutArray[] =  { 0.0011498,  0.0033908,   0.011498, 0.041803,0.15199,     0.53367, 1.3689,   1.9068,  2.3};\nfloat LuxArray[] =  { 1.0108,     3.1201,  9.8051,   27.43,   69.545,   232.67,  645.11,   73.52,  1000};\n\nvoid setup() {\n  Nefry.println(\"Grove Luminance Sensor !\");\n  Nefry.setLed(0,0,0);\n}\n\nvoid loop() {\n    Nefry.print(\"Vout =\");\n    Nefry.print(readAPDS9002Vout(A0));\n    Nefry.print(\" V,Luminance =\");\n    Nefry.print(readLuminance(A0));\n    Nefry.println(\"Lux\");\n    float val = 255;\n    val = val - (readLuminance(A0) * 2);\n    Nefry.println(val);\n    Nefry.setLed(200,200,0,val);\n    Nefry.ndelay(500);\n}\n\nfloat readAPDS9002Vout(uint8_t analogpin)\n{\n    // MeasuredVout = ADC Value * (Vcc / 1023) * (3 / Vcc)\n    // Vout samples are with reference to 3V Vcc\n    // The above expression is simplified by cancelling out Vcc\n    float MeasuredVout = analogRead(A0) * (3.0 / 1023.0);\n    //Above 2.3V , the sensor value is saturated\n\n    return MeasuredVout;\n\n}\n\nfloat readLuminance(uint8_t analogpin)\n{\n\n    // MeasuredVout = ADC Value * (Vcc / 1023) * (3 / Vcc)\n    // Vout samples are with reference to 3V Vcc\n    // The above expression is simplified by cancelling out Vcc\n    float MeasuredVout = analogRead(A0) * (3.0 / 1023.0);\n    float Luminance = FmultiMap(MeasuredVout, VoutArray, LuxArray, 9);\n\n    /**************************************************************************\n\n    The Luminance in Lux is calculated based on APDS9002 datasheet -- > Graph 1\n    ( Output voltage vs. luminance at different load resistor)\n    The load resistor is 1k in this board. Vout is referenced to 3V Vcc.\n\n    The data from the graph is extracted using WebPlotDigitizer\n    http://arohatgi.info/WebPlotDigitizer/app/\n\n    VoutArray[] and LuxArray[] are these extracted data. Using MultiMap, the data\n    is interpolated to get the Luminance in Lux.\n\n    This implementation uses floating point arithmetic and hence will consume\n    more flash, RAM and time.\n\n    The Luminance in Lux is an approximation and depends on the accuracy of\n    Graph 1 used.\n\n    ***************************************************************************/\n\n    return Luminance;\n}\n\n\n//This code uses MultiMap implementation from http://playground.arduino.cc/Main/MultiMap\n\nfloat FmultiMap(float val, float * _in, float * _out, uint8_t size)\n{\n    // take care the value is within range\n    // val = constrain(val, _in[0], _in[size-1]);\n    if (val <= _in[0]) return _out[0];\n    if (val >= _in[size-1]) return _out[size-1];\n\n    // search right interval\n    uint8_t pos = 1;  // _in[0] allready tested\n    while(val > _in[pos]) pos++;\n\n    // this will handle all exact \"points\" in the _in array\n    if (val == _in[pos]) return _out[pos];\n\n    // interpolate in the right segment for the rest\n    return (val - _in[pos-1]) * (_out[pos] - _out[pos-1]) / (_in[pos] - _in[pos-1]) + _out[pos-1];\n}\n```\n", "tags": ["nefry", "IoT", "Grove", "Arduino", "dotstudio"]}