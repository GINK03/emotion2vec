{"context": " More than 1 year has passed since last update.\n\n\u7d4c\u7def\n\nDevise\u3067\u8a8d\u8a3c\u3059\u308b\u30a2\u30d7\u30ea\u3067\u3001User\u306eemail\u691c\u8a3c\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u3002\n\u3046\u307e\u304f\u3044\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\n\u3084\u308a\u65b9\n\n\u304a\u307e\u3058\u306a\u3044\u3092\u4e00\u884c\u52a0\u3048\u308b\u3002\nclass User < ActiveRecord::Base\n  #...\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :trackable, :validatable,\n         :confirmable, :omniauthable\n\n  TEMP_EMAIL_PREFIX = 'change@me'\n  TEMP_EMAIL_REGEX = /\\Achange@me/\n\n  # \u304a\u307e\u3058\u306a\u3044\n  validates :email, :presence => true, :email => true\n\n  #...\n\n\nEmailValidator\u306b\u81ea\u5206\u3067\u691c\u8a3c\u3092\u66f8\u304d\u52a0\u3048\u308b\u3002\n\n/app/validators/email_validator.rb\nrequire 'mail'\nclass EmailValidator < ActiveModel::EachValidator\n  def validate_each(record,attribute,value)\n    begin\n      m = Mail::Address.new(value)\n      # We must check that value contains a domain, the domain has at least\n      # one '.' and that value is an email address\n      r = m.domain!=nil && m.domain.match('\\.') && m.address == value\n\n      # Update 2015-Mar-24\n      # the :tree method was private and is no longer available.\n      # t = m.__send__(:tree)\n      # We need to dig into treetop\n      # A valid domain must have dot_atom_text elements size > 1\n      # user@localhost is excluded\n      # treetop must respond to domain\n      # We exclude valid email values like <user@localhost.com>\n      # Hence we use m.__send__(tree).domain\n      # r &&= (t.domain.dot_atom_text.elements.size > 1)\n    rescue Exception => e\n      r = false\n    end\n    record.errors[attribute] << (options[:message] || \"is invalid\") unless r\n\n    # Reject temporary email address\n    record.errors[attribute] << 'must be given. Please give us a real one!!!' unless value !~ User::TEMP_EMAIL_REGEX\n  end\nend\n\n\n\n\u7d50\u679c\uff08\u30a4\u30e1\u30fc\u30b8\uff09\n\u81ea\u5206\u3067\u66f8\u3044\u305f\u691c\u8a3c\u9805\u76ee\u3092\u7c21\u5358\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\n\n\u8cc7\u6599\n\nhttps://github.com/plataformatec/devise/wiki/How-to:-Use-a-custom-email-validator-with-Devise\nhttp://api.rubyonrails.org/classes/ActiveModel/Validator.html\n\n#\u7d4c\u7def\n- Devise\u3067\u8a8d\u8a3c\u3059\u308b\u30a2\u30d7\u30ea\u3067\u3001User\u306eemail\u691c\u8a3c\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u3002\n- \u3046\u307e\u304f\u3044\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n#\u3084\u308a\u65b9\n\n##\u304a\u307e\u3058\u306a\u3044\u3092\u4e00\u884c\u52a0\u3048\u308b\u3002\n\n```rb\nclass User < ActiveRecord::Base\n  #...\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :trackable, :validatable,\n         :confirmable, :omniauthable\n\n  TEMP_EMAIL_PREFIX = 'change@me'\n  TEMP_EMAIL_REGEX = /\\Achange@me/\n\n  # \u304a\u307e\u3058\u306a\u3044\n  validates :email, :presence => true, :email => true\n\n  #...\n```\n\n##EmailValidator\u306b\u81ea\u5206\u3067\u691c\u8a3c\u3092\u66f8\u304d\u52a0\u3048\u308b\u3002\n\n```rb:/app/validators/email_validator.rb\nrequire 'mail'\nclass EmailValidator < ActiveModel::EachValidator\n  def validate_each(record,attribute,value)\n    begin\n      m = Mail::Address.new(value)\n      # We must check that value contains a domain, the domain has at least\n      # one '.' and that value is an email address\n      r = m.domain!=nil && m.domain.match('\\.') && m.address == value\n\n      # Update 2015-Mar-24\n      # the :tree method was private and is no longer available.\n      # t = m.__send__(:tree)\n      # We need to dig into treetop\n      # A valid domain must have dot_atom_text elements size > 1\n      # user@localhost is excluded\n      # treetop must respond to domain\n      # We exclude valid email values like <user@localhost.com>\n      # Hence we use m.__send__(tree).domain\n      # r &&= (t.domain.dot_atom_text.elements.size > 1)\n    rescue Exception => e\n      r = false\n    end\n    record.errors[attribute] << (options[:message] || \"is invalid\") unless r\n\n    # Reject temporary email address\n    record.errors[attribute] << 'must be given. Please give us a real one!!!' unless value !~ User::TEMP_EMAIL_REGEX\n  end\nend\n```\n\n#\u7d50\u679c\uff08\u30a4\u30e1\u30fc\u30b8\uff09\n\n\u81ea\u5206\u3067\u66f8\u3044\u305f\u691c\u8a3c\u9805\u76ee\u3092\u7c21\u5358\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\n![Screenshot 2015-08-10 22.30.27.png](https://qiita-image-store.s3.amazonaws.com/0/82804/604ad1a7-3ab0-6744-5f41-dc30937e1552.png)\n\n#\u8cc7\u6599\n\n- https://github.com/plataformatec/devise/wiki/How-to:-Use-a-custom-email-validator-with-Devise\n- http://api.rubyonrails.org/classes/ActiveModel/Validator.html\n", "tags": ["Ruby", "Rails", "OmniAuth", "devise"]}