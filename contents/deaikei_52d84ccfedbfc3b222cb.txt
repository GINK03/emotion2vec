{"context": "\n\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306b\u3042\u3089\u305a\u3093\u3070\u4eba\u5de5\u77e5\u80fd\u306b\u3042\u3089\u305a\u306a\u4e16\u306e\u4e2d\u3067\u3082\u3001\u753b\u50cf\u89e3\u6790\u3084\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306a\u3069\u306e\u975e\u69cb\u9020\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u3001\u5f93\u6765\u901a\u308a\u306e\u69cb\u9020\u30c7\u30fc\u30bf\u306b\u9650\u308c\u3070\u3001\u53e4\u304d\u3088\u304d\u6a5f\u68b0\u5b66\u7fd2\u624b\u6cd5\u306f\u307e\u3060\u307e\u3060\u624b\u8efd\u304b\u3064\u9ad8\u3044\u7cbe\u5ea6\u3092\u53e9\u304d\u51fa\u3059\u3002\n\u4f8b\u3048\u3070\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3001\u305d\u3057\u3066\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\n\u300c\u3067\u3082\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3063\u3066\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u305f\u3053\u3068\u306f\u3042\u308b\u3057\u52d5\u4f5c\u539f\u7406\u3082\u306a\u3093\u3068\u306a\u304f\u77e5\u3063\u3066\u308b\u3051\u3069\u3001\u5b9f\u88c5\u3057\u305f\u3053\u3068\u306f\u306a\u3044\u306a\u300d\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u5b8c\u6210\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u306f\n\u7c21\u5358\u306b\u8a00\u3063\u3066\u3057\u307e\u3048\u3070\u3001\u6c7a\u5b9a\u6728\u3092\u305f\u304f\u3055\u3093\u4f5c\u3063\u3066\u591a\u6570\u6c7a\u306b\u3088\u3063\u3066\u4e88\u6e2c\u3092\u304a\u3053\u306a\u3046\u624b\u6cd5\u3002\n\u307e\u305a\u306f\u6c7a\u5b9a\u6728\u304c\u306a\u3093\u306a\u306e\u304b\u3092\u77e5\u3089\u306d\u3070\u306a\u3089\u306a\u3044\u3002\n\n\u6c7a\u5b9a\u6728\u3068\u306f\n\n\u7279\u5fb4\u91cf\u3092\u3072\u3068\u3064\u9078\u3093\u3067\u306f\u95be\u5024\u3092\u6c7a\u3081\u3066\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u5206\u985e\u30bf\u30b9\u30af\u3092\u304a\u3053\u306a\u3046\u5b66\u7fd2\u5668\u3002\u30c7\u30fc\u30bf\u304c\u3069\u3093\u3069\u3093\u5206\u304b\u308c\u3066\u3044\u304f\u3055\u307e\u304c\u6728\u3063\u307d\u3044\u3002\n\n(\u753b\u50cf\uff1aWikipedia \u3088\u308a)\n\u6728\u3092\u69cb\u6210\u3059\u308b\u8981\u7d20\u306b\u306f\u30ce\u30fc\u30c9\u3068\u30ea\u30f3\u30af\u304c\u3042\u308b\u3002\u30ce\u30fc\u30c9\u306f\u5404\u30c7\u30fc\u30bf\u3092\u95be\u5024\u306b\u3088\u3063\u3066\u5206\u5272\u3059\u308b\u90e8\u5206 (\u4e0a\u56f3\u306e\u9ed2\u67a0\u9577\u65b9\u5f62\u304c\u30ce\u30fc\u30c9) \u3067\u3001\u30ce\u30fc\u30c9\u3069\u3046\u3057\u3092\u3064\u306a\u3050\u306e\u304c\u30ea\u30f3\u30af\u3067\u3042\u308b\u3002\n\u7279\u306b\u3001\u4e00\u756a\u6700\u521d\u306e\u30ce\u30fc\u30c9\u3092\u6839\u30ce\u30fc\u30c9\u3001\u305d\u308c\u4ee5\u4e0a\u30ea\u30f3\u30af\u304c\u751f\u3048\u3066\u3044\u306a\u3044\u30ce\u30fc\u30c9\u3092\u8449\u30ce\u30fc\u30c9\u3068\u547c\u3076\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u5404\u30ce\u30fc\u30c9\u306f (\u8449\u30ce\u30fc\u30c9\u3067\u306a\u3044\u9650\u308a) \u5fc5\u305a\u30c7\u30fc\u30bf\u30922\u5206\u5272\u3059\u308b2\u5206\u6728\u3060\u3051\u3092\u53d6\u308a\u6271\u3046\u3053\u3068\u306b\u3059\u308b (\u4e0a\u56f3\u306f3\u80a1\u306b\u5206\u304b\u308c\u308b\u30ce\u30fc\u30c9\u304c\u3042\u308b\u306e\u30672\u5206\u6728\u3067\u306f\u306a\u3044)\u3002\n\n\u4e0d\u7d14\u5ea6\n\n\u300c\u5404\u30ce\u30fc\u30c9\u3067\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u300d\u3068\u306f\u8a00\u3063\u3066\u3082\u3001\u57fa\u6e96\u304c\u306a\u3051\u308c\u3070\u3069\u3046\u3084\u3063\u3066\u5206\u5272\u3059\u308c\u3070\u3088\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u3002\u305d\u306e\u57fa\u6e96\u3068\u306a\u308b\u6307\u6a19\u304c\u4e0d\u7d14\u5ea6\u3002\n\u4e0d\u7d14\u5ea6\u306f\u3001\u300c\u7dba\u9e97\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u4f4e\u304f\u3001\u30c6\u30ad\u30c8\u30fc\u306a\u30c7\u30fc\u30bf\u306f\u9ad8\u304f\u300d\u306a\u308b\u6307\u6a19\u3067\u3042\u308b\u3002\n\u4e0d\u7d14\u5ea6\u3068\u3057\u3066\u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\u306f\u8aa4\u308a\u7387\u3084\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3001\u30b8\u30cb\u4fc2\u6570\u306a\u3069\u304c\u3042\u308b\u304c\u3001\u4eca\u56de\u306f\u30b8\u30cb\u4fc2\u6570\u3060\u3051\u3092\u53d6\u308a\u6271\u3046\u3002\u3042\u308b\u30ce\u30fc\u30c9 tt \u306b\u964d\u3063\u3066\u304d\u305f\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u30b8\u30cb\u4fc2\u6570\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u3068\u304a\u308a\uff1a\nI(t)=K\u2211i=1\u2211j\u2260iP(Ci|t)P(Cj|t)=1\u2212K\u2211i=1P2(Ci|t)=K\u2211i=1P(Ci|t)(1\u2212P(Ci|t)) \n\\mathcal{I}(t) = \\sum_{i=1}^K\\sum_{j\\ne i}P(C_i|t)P(C_j|t) = 1 - \\sum_{i=1}^KP^2(C_i|t) = \\sum_{i=1}^KP(C_i|t)(1-P(C_i|t)) \n\n\u305f\u3060\u3057\u3001KK \u306f\u30af\u30e9\u30b9\u6570\u3001P(Ci|t)P(C_i|t) \u306f\u30ce\u30fc\u30c9 tt \u306b\u964d\u3063\u3066\u304d\u305f\u30af\u30e9\u30b9 ii \u306e\u30c7\u30fc\u30bf\u306e\u5272\u5408\u3067\u3042\u308b\u3002\n\u6700\u5f8c\u306e\u5f0f\u306e\u4e2d\u306e P(Ci|t)(1\u2212P(Ci|t))P(C_i|t)(1-P(C_i|t)) \u306f\u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u306e\u5206\u6563\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u306e\u5206\u6563\u306f\u3001\u6295\u3052\u308b\u30b3\u30a4\u30f3\u304c\u504f\u3063\u3066\u3044\u308b\u307b\u3069\u5c0f\u3055\u304f\u306a\u308b (\u30b3\u30a4\u30f3\u306e\u540c\u3058\u9762\u3057\u304b\u51fa\u306a\u304f\u306a\u308b) \u306e\u3067\u3001\u6700\u5f8c\u306e\u5f0f\u306f\u7d50\u5c40\u300c\u3069\u308c\u3060\u3051\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u3060\u3051\u306b\u504f\u3063\u3066\u3044\u308b\u304b\u300d\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\u30ce\u30fc\u30c9 tt \u3067\u5206\u5272\u898f\u5247\u3092\u4f5c\u308b\u3068\u304d\u306f\u3001\u4e0d\u7d14\u5ea6\u306e\u6e1b\u308a\u65b9\u304c\u4e00\u756a\u5927\u304d\u306a\u5206\u5272\u3092\u9078\u3079\u3070\u826f\u3044\u3002\u3064\u307e\u308a\u5206\u5272\u3092 ss \u3068\u3057\u305f\u3068\u304d\u3001\n\u0394I(s,t)=I(t)\u2212(pLI(tL)+pRI(tR)) \n\\Delta\\mathcal{I}(s, t) = \\mathcal{I}(t) - (p_L\\mathcal{I}(t_L) + p_R\\mathcal{I}(t_R)) \n\n\u304c\u6700\u5927\u306b\u306a\u308b ss \u3092\u53ef\u80fd\u306a\u5206\u5272\u306e\u5019\u88dc\u306e\u4e2d\u304b\u3089\u9078\u3076\u3002\u305f\u3060\u3057 pL,pRp_L, p_R \u306f tt \u304b\u3089\u305d\u308c\u305e\u308c\u5de6\u5074\u3001\u53f3\u5074\u306b\u6d41\u308c\u305f\u30c7\u30fc\u30bf\u306e\u5272\u5408\u3067\u3001tL,tRt_L, t_R \u306f tt \u304b\u3089\u5206\u5c90\u3057\u305f\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3002\u4e0d\u7d14\u5ea6\u306e\u6e1b\u308a\u65b9\u3092\u5206\u5272\u898f\u5247\u3067\u6bd4\u8f03\u3059\u308b\u3068\u304d\u3001I(t)\\mathcal{I}(t) \u306f\u3069\u306e\u5206\u5272\u898f\u5247\u3067\u3082\u540c\u3058\u5024\u3067\u3042\u308b\u304b\u3089\u3001\u5f0f\u5168\u4f53\u306e\u5024\u3092\u5927\u304d\u304f\u3057\u305f\u3044\u306a\u3089\u3001\u7b2c\u4e8c\u9805\u304c\u4e00\u756a\u5c0f\u3055\u306a\u5206\u5272\u898f\u5247\u3092\u9078\u3079\u3070\u826f\u3044\u3002\ndef _delta_gini_index(self, left, right):\n        \"\"\"\u3042\u308b\u5206\u5272\u898f\u5247\u306b\u3088\u308b\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u3092\u8a08\u7b97\u3059\u308b (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n        left \u306f\u5de6\u5074\u306b\u6d41\u308c\u308b\u30c7\u30fc\u30bf\u306e\u30b5\u30f3\u30d7\u30eb (e.g.: [1,1,1,2])\n        right \u306f\u53f3\u5074\u306b\u6d41\u308c\u308b\u30c7\u30fc\u30bf\u306e\u30b5\u30f3\u30d7\u30eb (e.g.: [0,0,0,2,2])\n        \"\"\"\n        n_left = len(left)\n        n_right = len(right)\n        n_total = n_left + n_right\n\n        # \u5de6\u5074\n        _, counts = np.unique(left, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        left_ratio_classes = counts / n_left  # \u5272\u5408\u306b\u3059\u308b\n        left_gain = (n_left / n_total) * (1 - (left_ratio_classes ** 2).sum())\n        # \u53f3\u5074\n        _, counts = np.unique(right, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        right_ratio_classes = counts / n_right  # \u5272\u5408\u306b\u3059\u308b\n        right_gain = (n_right / n_total) * (1 - (right_ratio_classes ** 2).sum())\n\n        return left_gain + right_gain\n\n\n\u6728\u306e\u6210\u9577\n2\u5206\u6728\u306e\u30ce\u30fc\u30c9\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u3064\u304f\u308b\u3002\nclass _Node:\n    \"\"\"2\u5206\u6c7a\u5b9a\u6728\u306e\u30ce\u30fc\u30c9\u3002class_count \u306f\u5fc5\u305a\u6301\u3064\u3002\u8449\u30ce\u30fc\u30c9\u4ee5\u5916\u306f\u305d\u308c\u4ee5\u5916\u3082\u6301\u3064\u3002\"\"\"\n    def __init__(self, class_count):\n        self.class_count = class_count  # \u3053\u306e\u30ce\u30fc\u30c9\u306b\u5c5e\u3059\u5404\u30af\u30e9\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u6570\n\n        self.feature_id = None  # \u5206\u5272\u898f\u5247\u306b\u7528\u3044\u305f\u306e\u306f\u300c\u5165\u529bX\u306e\u4f55\u6b21\u5143\u76ee\u304b\u300d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (int)\n        self.threshold = None  # \u5206\u5272\u898f\u5247\u306b\u7528\u3044\u305f\u95be\u5024\n        self.left = None  # \u3053\u306e\u30ce\u30fc\u30c9\u306e\u5de6\u5074\u306e\u3053\u3069\u3082\u3002x < threshold\n        self.right = None  # \u3053\u306e\u30ce\u30fc\u30c9\u306e\u53f3\u5074\u306e\u3053\u3069\u3082\u3002x >= threshold\n\n    @property\n    def is_leaf(self):\n        return self.feature_id is None\n\n    def __repr__(self):\n        if self.is_leaf:\n            return '<Node leaf of class_count: {}>'.format(self.class_count)\n        else:\n            return '<Node of class_count: {}, feature_id: {}, threshold: {}>'.format(\n                self.class_count, self.feature_id, self.threshold)\n\n\u3053\u306e _Node \u3092\u3046\u308a\u3046\u308a\u3068\u9023\u7d50\u3057\u3066\u3044\u3051\u30702\u5206\u6c7a\u5b9a\u6728\u304c\u4f5c\u308c\u308b\u3002\u5206\u5272\u3057\u305f\u3042\u3068\u306e\u5de6\u53f3\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u518d\u5e30\u7684\u306b\u6728\u3092\u69cb\u7bc9\u3059\u308c\u3070\u826f\u3044\u3002\ndef _grow(self, X, y):\n        \"\"\"(\u6df1\u3055\u512a\u5148\u3067) \u518d\u5e30\u7684\u306b\u6728\u3092\u6210\u9577\u3055\u305b\u308b\u3002\u30e1\u30e2\u30ea\u52b9\u7387\u306f\u77e5\u3089\u3093\"\"\"\n        uniques, counts = np.unique(y, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b (\u6b6f\u629c\u3051\u3042\u308a)\n        counter = dict(zip(uniques, counts))\n        class_count = [counter[c] if c in counter else 0 for c in self._classes]  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570 (\u6b6f\u629c\u3051\u306a\u3057)\n        this = _Node(class_count)  # \u307e\u305a\u81ea\u5206\u81ea\u8eab\u3092\u751f\u6210\n\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u3072\u3068\u3064\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if len(y) == 1:\n            return this\n        # \u5168\u90e8\u540c\u3058\u30af\u30e9\u30b9\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if all(y[0] == y):\n            return this\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u5168\u90e8\u540c\u3058\u7279\u5fb4\u91cf\u3092\u3082\u3064\u5834\u5408\u306f\u5206\u5c90\u4e0d\u53ef\u80fd\u306a\u306e\u3067\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if (X[0] == X).all():\n            return this\n\n        # \u3053\u306e\u6642\u70b9\u3067 this \u304c\u8449\u30ce\u30fc\u30c9\u3067\u306f\u306a\u304f\u5206\u5c90\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\n        left_X, left_y, right_X, right_y, feature_id, threshold = self._branch(X, y)  # \u6700\u9069\u306a\u5206\u5272\u898f\u5247\u3092\u63a2\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\n        this.feature_id = feature_id\n        this.threshold = threshold\n        this.left = self._grow(left_X, left_y)  # \u5de6\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        this.right = self._grow(right_X, right_y)  # \u53f3\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        return this\n\n\n\u6c7a\u5b9a\u6728\u306e\u30b3\u30fc\u30c9\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u308b\u3068\u30012\u5206\u6c7a\u5b9a\u6728\u306e\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u901a\u308a\uff1a\nclass DecisionTree(ClassifierMixin):\n    \"\"\"2\u5206\u6c7a\u5b9a\u6728\"\"\"\n    def __init__(self):\n        self._tree = None\n\n    def fit(self, X, y):  # [n_samples, n_features]\n        self._classes = np.unique(y)\n        self._tree = self._grow(X, y)\n\n    def _grow(self, X, y):\n        \"\"\"(\u6df1\u3055\u512a\u5148\u3067) \u518d\u5e30\u7684\u306b\u6728\u3092\u6210\u9577\u3055\u305b\u308b\u3002\u30e1\u30e2\u30ea\u52b9\u7387\u306f\u77e5\u3089\u3093\"\"\"\n        uniques, counts = np.unique(y, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b (\u6b6f\u629c\u3051\u3042\u308a)\n        counter = dict(zip(uniques, counts))\n        class_count = [counter[c] if c in counter else 0 for c in self._classes]  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570 (\u6b6f\u629c\u3051\u306a\u3057)\n        this = _Node(class_count)  # \u307e\u305a\u81ea\u5206\u81ea\u8eab\u3092\u751f\u6210\n\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u3072\u3068\u3064\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if len(y) == 1:\n            return this\n        # \u5168\u90e8\u540c\u3058\u30af\u30e9\u30b9\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if all(y[0] == y):\n            return this\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u5168\u90e8\u540c\u3058\u7279\u5fb4\u91cf\u3092\u3082\u3064\u5834\u5408\u306f\u5206\u5c90\u4e0d\u53ef\u80fd\u306a\u306e\u3067\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if (X[0] == X).all():\n            return this\n\n        # \u3053\u306e\u6642\u70b9\u3067 this \u304c\u8449\u30ce\u30fc\u30c9\u3067\u306f\u306a\u304f\u5206\u5c90\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\n        left_X, left_y, right_X, right_y, feature_id, threshold = self._branch(X, y)\n        this.feature_id = feature_id\n        this.threshold = threshold\n        this.left = self._grow(left_X, left_y)  # \u5de6\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        this.right = self._grow(right_X, right_y)  # \u53f3\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        return this\n\n    def _branch(self, X, y):\n        \"\"\"\u30b8\u30cb\u4fc2\u6570\u306b\u3057\u305f\u304c\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u5206\u5272\"\"\"\n        gains = list()  # \u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u306e\u8a18\u9332 (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n        rules = list()  # \u5206\u5c90\u898f\u5247\u306e\u8a18\u9332\n\n        for feature_id, xs in enumerate(X.transpose()):  # 1\u7279\u5fb4\u305a\u3064\u8abf\u67fb\n            thresholds = self._get_branching_threshold(xs)  # \u5206\u5c90\u306e\u6761\u4ef6\u3068\u306a\u308b\u95be\u5024\u306e\u5019\u88dc\u3092\u5168\u53d6\u5f97\n            for th in thresholds:  # \u95be\u5024\u3067\u5206\u5272\u3057\u3066\u307f\u308b\n                left_y = y[xs < th]\n                right_y = y[th <= xs]\n                gain = self._delta_gini_index(left_y, right_y)  # \u3053\u306e\u5206\u5272\u306b\u3088\u308b\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n                gains.append(gain)\n                rules.append((feature_id, th))\n        best_rule = rules[np.argmin(gains)]  # \u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u304c\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\u898f\u5247\u3092\u63a1\u7528\n        feature_id = best_rule[0]\n        threshold = best_rule[1]\n        split = X[:, feature_id] < threshold  # \u95be\u5024\u306b\u3088\u308b\u5206\u5272\u3092\u53d6\u5f97\n        return X[split], y[split], X[~split], y[~split], feature_id, threshold\n\n    def _get_branching_threshold(self, xs):\n        \"\"\"xs \u306e\u5206\u5c90\u306e\u6761\u4ef6\u3068\u306a\u308b\u95be\u5024\u3092\u5168\u53d6\u5f97\"\"\"\n        unique_xs = np.unique(xs)  # np.unique() \u306f\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u7d50\u679c\u3092\u8fd4\u3059\u3053\u3068\u306b\u6ce8\u610f\n        return (unique_xs[1:] + unique_xs[:-1]) / 2  # [3, 4, 6] -> [3.5, 5.0]\n\n    def _delta_gini_index(self, left, right):\n        \"\"\"\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u3092\u8a08\u7b97\u3059\u308b (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\"\"\"\n        n_left = len(left)\n        n_right = len(right)\n        n_total = n_left + n_right\n\n        # \u5de6\u5074\n        _, counts = np.unique(left, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        left_ratio_classes = counts / n_left  # \u5272\u5408\u306b\u3059\u308b\n        left_gain = (n_left / n_total) * (1 - (left_ratio_classes ** 2).sum())\n        # \u53f3\u5074\n        _, counts = np.unique(right, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        right_ratio_classes = counts / n_right  # \u5272\u5408\u306b\u3059\u308b\n        right_gain = (n_right / n_total) * (1 - (right_ratio_classes ** 2).sum())\n\n        return left_gain + right_gain\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self._classes[np.argmax(proba, axis=1)]\n\n    def predict_proba(self, X):\n        if self._tree is None:\n            raise ValueError('fit\u3057\u3066\u306d')\n        return np.array([self._predict_one(xs) for xs in X])\n\n    def _predict_one(self, xs):\n        \"\"\"1\u30b5\u30f3\u30d7\u30eb\u3092\u4e88\u6e2c\"\"\"\n        node = self._tree\n        while not node.is_leaf:  # \u8449\u30ce\u30fc\u30c9\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n            is_left = xs[node.feature_id] < node.threshold  # True: left, False: right\n            node = node.left if is_left else node.right\n        class_count = node.class_count\n        return np.array(class_count) / sum(class_count)\n\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\n\n\u2191 \u3067\u4f5c\u3063\u305f\u6c7a\u5b9a\u6728\u3092\u305f\u304f\u3055\u3093\u5b66\u7fd2\u3055\u305b\u3066\u68ee\u306b\u3059\u308b\u3002\u3053\u306e\u3068\u304d\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u91cd\u8981\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\u304c\u3042\u308b\u3002\u5404\u6c7a\u5b9a\u6728\u306b\u308f\u305f\u3059\u30c7\u30fc\u30bf\u306f\u3001\u5143\u30c7\u30fc\u30bf\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30eb (\u5fa9\u5143\u3042\u308a\u306e\u62bd\u51fa) \u304a\u3088\u3073\u7279\u5fb4\u91cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u3002\ndef _bootstrap_sample(self, X, y):\n        \"\"\"\n        \u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30eb (\u5fa9\u5143\u62bd\u51fa)\n        \u540c\u6642\u306b\u3001\u7279\u5fb4\u91cf\u65b9\u5411\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3082\u304a\u3053\u306a\u3046\u3002\n        \"\"\"\n        n_features = X.shape[1]\n        n_features_forest = np.floor(np.sqrt(n_features))\n        bootstrapped_X = list()\n        bootstrapped_y = list()\n        for i in range(self._n_trees):\n            ind = np.random.choice(len(y), size=len(y))  # \u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            col = np.random.choice(n_features, size=n_features_forest, replace=False)  # \u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            bootstrapped_X.append(X[np.ix_(ind, col)])\n            bootstrapped_y.append(y[ind])\n            self._using_features[i] = col\n        return bootstrapped_X, bootstrapped_y\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u306f\u3001\u6e21\u3059\u30c7\u30fc\u30bf\u3092\u3050\u3061\u3083\u307e\u305c\u306b\u3059\u308b\u3053\u3068\u3067\u3067\u304d\u308b\u3060\u3051\u5404\u6c7a\u5b9a\u6728\u304c\u4f3c\u305f\u308a\u5bc4\u3063\u305f\u308a\u306e\u5f62\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b (\uff1d\u591a\u69d8\u6027\u3092\u6301\u3064\u3088\u3046\u306b) \u5de5\u592b\u3057\u3066\u3044\u308b\u3002\u3053\u3046\u3057\u3066\u751f\u6210\u3055\u308c\u305f\u6c7a\u5b9a\u6728\u306e\u591a\u6570\u6c7a\u306b\u3088\u3063\u3066\u5206\u985e\u3092\u304a\u3053\u306a\u3046\u3002\u3059\u308b\u3068\u3001\u5404\u6c7a\u5b9a\u6728\u306e\u6301\u3064\u591a\u69d8\u6027\u306e\u304a\u304b\u3052\u3067\u9ad8\u3044\u6c4e\u5316\u6027\u80fd\u3092\u6301\u3064\u3088\u3046\u306b\u306a\u308b\u3002\nclass RandomForest(ClassifierMixin):\n    \"\"\"\u2191\u306e2\u5206\u6c7a\u5b9a\u6728\u3092\u4f7f\u3063\u305f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\"\"\"\n    def __init__(self, n_trees=10):\n        self._n_trees = n_trees\n\n        self._forest = [None] * self._n_trees\n        self._using_features = [None] * self._n_trees\n\n    def fit(self, X, y):\n        self._classes = np.unique(y)\n\n        bootstrapped_X, bootstrapped_y = self._bootstrap_sample(X, y)\n        for i, (i_bootstrapped_X, i_bootstrapped_y) in enumerate(zip(bootstrapped_X, bootstrapped_y)):\n            tree = DecisionTree()\n            tree.fit(i_bootstrapped_X, i_bootstrapped_y)\n            self._forest[i] = tree\n\n    def _bootstrap_sample(self, X, y):\n        \"\"\"\n        \u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30eb (\u5fa9\u5143\u62bd\u51fa)\n        \u540c\u6642\u306b\u3001\u7279\u5fb4\u91cf\u65b9\u5411\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3082\u304a\u3053\u306a\u3046\u3002\n        \"\"\"\n        n_features = X.shape[1]\n        n_features_forest = np.floor(np.sqrt(n_features))\n        bootstrapped_X = list()\n        bootstrapped_y = list()\n        for i in range(self._n_trees):\n            ind = np.random.choice(len(y), size=len(y))  # \u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            col = np.random.choice(n_features, size=n_features_forest, replace=False)  # \u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            bootstrapped_X.append(X[np.ix_(ind, col)])\n            bootstrapped_y.append(y[ind])\n            self._using_features[i] = col\n        return bootstrapped_X, bootstrapped_y\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self._classes[np.argmax(proba, axis=1)]\n\n    def predict_proba(self, X):\n        if self._forest[0] is None:\n            raise ValueError('fit\u3057\u3066\u306d')\n        votes = [tree.predict(X[:, using_feature]) for tree, using_feature in zip(self._forest, self._using_features)]  # n_trees x n_samples\n        counts = [Counter(row) for row in np.array(votes).transpose()]  # n_samples \u3060\u3051\u306e Counter \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        # \u5404 tree \u306e\u610f\u898b\u306e\u96c6\u8a08\n        counts_array = np.zeros((len(X), len(self._classes)))  # n_samples x n_classes\n        for row_index, count in enumerate(counts):\n            for class_index, class_ in enumerate(self._classes):\n                counts_array[row_index, class_index] = count[class_]\n        proba = counts_array / self._n_trees  # \u898f\u683c\u5316\u3059\u308b\n        return proba\n\n\n\u6027\u80fd\n\u4eca\u307e\u3067\u65ad\u7247\u7684\u306b\u66f8\u3044\u3066\u3044\u305f\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u306f\u6b21\u306e\u901a\u308a\u3002\u6c7a\u5b9a\u6728\u304a\u3088\u3073\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u30af\u30e9\u30b9\u306b ClassifierMixin \u3092\u7d99\u627f\u3055\u305b\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u306f score \u3068\u3044\u3046\u7cbe\u5ea6\u6e2c\u5b9a\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u308b\u3060\u3051 (Scikit-learn \u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u624b\u6cd5\u306f\u5fc5\u305a ClassifierMixin \u3092\u7d99\u627f\u3057\u3066\u3044\u308b)\u3002\n\nrandomforest.py\n# coding=utf-8\n\nimport logging\nfrom collections import Counter\n\nimport numpy as np\nfrom sklearn.base import ClassifierMixin\n\n\nclass _Node:\n    \"\"\"2\u5206\u6c7a\u5b9a\u6728\u306e\u30ce\u30fc\u30c9\u3002class_count \u306f\u5fc5\u305a\u6301\u3064\u3002\u8449\u30ce\u30fc\u30c9\u4ee5\u5916\u306f\u305d\u308c\u4ee5\u5916\u3082\u6301\u3064\u3002\"\"\"\n    def __init__(self, class_count):\n        self.class_count = class_count  # \u3053\u306e\u30ce\u30fc\u30c9\u306b\u5c5e\u3059\u5404\u30af\u30e9\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u6570\n\n        self.feature_id = None  # \u5206\u5272\u898f\u5247\u306b\u7528\u3044\u305f\u306e\u306f\u300c\u5165\u529bX\u306e\u4f55\u6b21\u5143\u76ee\u304b\u300d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (int)\n        self.threshold = None  # \u5206\u5272\u898f\u5247\u306b\u7528\u3044\u305f\u95be\u5024\n        self.left = None  # \u3053\u306e\u30ce\u30fc\u30c9\u306e\u5de6\u5074\u306e\u3053\u3069\u3082\u3002x < threshold\n        self.right = None  # \u3053\u306e\u30ce\u30fc\u30c9\u306e\u53f3\u5074\u306e\u3053\u3069\u3082\u3002x >= threshold\n\n    @property\n    def is_leaf(self):\n        return self.feature_id is None\n\n    def __repr__(self):\n        if self.is_leaf:\n            return '<Node leaf of class_count: {}>'.format(self.class_count)\n        else:\n            return '<Node of class_count: {}, feature_id: {}, threshold: {}>'.format(\n                self.class_count, self.feature_id, self.threshold)\n\n\nclass DecisionTree(ClassifierMixin):\n    \"\"\"2\u5206\u6c7a\u5b9a\u6728\"\"\"\n    def __init__(self):\n        self._tree = None\n\n    def fit(self, X, y):  # [n_samples, n_features]\n        self._classes = np.unique(y)\n        self._tree = self._grow(X, y)\n\n    def _grow(self, X, y):\n        \"\"\"(\u6df1\u3055\u512a\u5148\u3067) \u518d\u5e30\u7684\u306b\u6728\u3092\u6210\u9577\u3055\u305b\u308b\u3002\u30e1\u30e2\u30ea\u52b9\u7387\u306f\u77e5\u3089\u3093\"\"\"\n        uniques, counts = np.unique(y, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b (\u6b6f\u629c\u3051\u3042\u308a)\n        counter = dict(zip(uniques, counts))\n        class_count = [counter[c] if c in counter else 0 for c in self._classes]  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570 (\u6b6f\u629c\u3051\u306a\u3057)\n        this = _Node(class_count)  # \u307e\u305a\u81ea\u5206\u81ea\u8eab\u3092\u751f\u6210\n\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u3072\u3068\u3064\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if len(y) == 1:\n            return this\n        # \u5168\u90e8\u540c\u3058\u30af\u30e9\u30b9\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if all(y[0] == y):\n            return this\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u5168\u90e8\u540c\u3058\u7279\u5fb4\u91cf\u3092\u3082\u3064\u5834\u5408\u306f\u5206\u5c90\u4e0d\u53ef\u80fd\u306a\u306e\u3067\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if (X[0] == X).all():\n            return this\n\n        # \u3053\u306e\u6642\u70b9\u3067 this \u304c\u8449\u30ce\u30fc\u30c9\u3067\u306f\u306a\u304f\u5206\u5c90\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\n        left_X, left_y, right_X, right_y, feature_id, threshold = self._branch(X, y)\n        this.feature_id = feature_id\n        this.threshold = threshold\n        this.left = self._grow(left_X, left_y)  # \u5de6\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        this.right = self._grow(right_X, right_y)  # \u53f3\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        return this\n\n    def _branch(self, X, y):\n        \"\"\"\u30b8\u30cb\u4fc2\u6570\u306b\u3057\u305f\u304c\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u5206\u5272\"\"\"\n        gains = list()  # \u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u306e\u8a18\u9332 (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n        rules = list()  # \u5206\u5c90\u898f\u5247\u306e\u8a18\u9332\n\n        for feature_id, xs in enumerate(X.transpose()):  # 1\u7279\u5fb4\u305a\u3064\u8abf\u67fb\n            thresholds = self._get_branching_threshold(xs)  # \u5206\u5c90\u306e\u6761\u4ef6\u3068\u306a\u308b\u95be\u5024\u306e\u5019\u88dc\u3092\u5168\u53d6\u5f97\n            for th in thresholds:  # \u95be\u5024\u3067\u5206\u5272\u3057\u3066\u307f\u308b\n                left_y = y[xs < th]\n                right_y = y[th <= xs]\n                gain = self._delta_gini_index(left_y, right_y)  # \u3053\u306e\u5206\u5272\u306b\u3088\u308b\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n                gains.append(gain)\n                rules.append((feature_id, th))\n        best_rule = rules[np.argmin(gains)]  # \u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u304c\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\u898f\u5247\u3092\u63a1\u7528\n        feature_id = best_rule[0]\n        threshold = best_rule[1]\n        split = X[:, feature_id] < threshold  # \u95be\u5024\u306b\u3088\u308b\u5206\u5272\u3092\u53d6\u5f97\n        return X[split], y[split], X[~split], y[~split], feature_id, threshold\n\n    def _get_branching_threshold(self, xs):\n        \"\"\"xs \u306e\u5206\u5c90\u306e\u6761\u4ef6\u3068\u306a\u308b\u95be\u5024\u3092\u5168\u53d6\u5f97\"\"\"\n        unique_xs = np.unique(xs)  # np.unique() \u306f\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u7d50\u679c\u3092\u8fd4\u3059\u3053\u3068\u306b\u6ce8\u610f\n        return (unique_xs[1:] + unique_xs[:-1]) / 2  # [3, 4, 6] -> [3.5, 5.0]\n\n    def _delta_gini_index(self, left, right):\n        \"\"\"\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u3092\u8a08\u7b97\u3059\u308b (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\"\"\"\n        n_left = len(left)\n        n_right = len(right)\n        n_total = n_left + n_right\n\n        # \u5de6\u5074\n        _, counts = np.unique(left, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        left_ratio_classes = counts / n_left  # \u5272\u5408\u306b\u3059\u308b\n        left_gain = (n_left / n_total) * (1 - (left_ratio_classes ** 2).sum())\n        # \u53f3\u5074\n        _, counts = np.unique(right, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        right_ratio_classes = counts / n_right  # \u5272\u5408\u306b\u3059\u308b\n        right_gain = (n_right / n_total) * (1 - (right_ratio_classes ** 2).sum())\n\n        return left_gain + right_gain\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self._classes[np.argmax(proba, axis=1)]\n\n    def predict_proba(self, X):\n        if self._tree is None:\n            raise ValueError('fit\u3057\u3066\u306d')\n        return np.array([self._predict_one(xs) for xs in X])\n\n    def _predict_one(self, xs):\n        \"\"\"1\u30b5\u30f3\u30d7\u30eb\u3092\u4e88\u6e2c\"\"\"\n        node = self._tree\n        while not node.is_leaf:  # \u8449\u30ce\u30fc\u30c9\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n            is_left = xs[node.feature_id] < node.threshold  # True: left, False: right\n            node = node.left if is_left else node.right\n        class_count = node.class_count\n        return np.array(class_count) / sum(class_count)\n\n\nclass RandomForest(ClassifierMixin):\n    \"\"\"\u2191\u306e2\u5206\u6c7a\u5b9a\u6728\u3092\u4f7f\u3063\u305f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\"\"\"\n    def __init__(self, n_trees=10):\n        self._n_trees = n_trees\n\n        self._forest = [None] * self._n_trees\n        self._using_features = [None] * self._n_trees\n\n    def fit(self, X, y):\n        self._classes = np.unique(y)\n\n        bootstrapped_X, bootstrapped_y = self._bootstrap_sample(X, y)\n        for i, (i_bootstrapped_X, i_bootstrapped_y) in enumerate(zip(bootstrapped_X, bootstrapped_y)):\n            tree = DecisionTree()\n            tree.fit(i_bootstrapped_X, i_bootstrapped_y)\n            self._forest[i] = tree\n\n    def _bootstrap_sample(self, X, y):\n        \"\"\"\n        \u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30eb (\u5fa9\u5143\u62bd\u51fa)\n        \u540c\u6642\u306b\u3001\u7279\u5fb4\u91cf\u65b9\u5411\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3082\u304a\u3053\u306a\u3046\u3002\n        \"\"\"\n        n_features = X.shape[1]\n        n_features_forest = np.floor(np.sqrt(n_features))\n        bootstrapped_X = list()\n        bootstrapped_y = list()\n        for i in range(self._n_trees):\n            ind = np.random.choice(len(y), size=len(y))  # \u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            col = np.random.choice(n_features, size=n_features_forest, replace=False)  # \u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            bootstrapped_X.append(X[np.ix_(ind, col)])\n            bootstrapped_y.append(y[ind])\n            self._using_features[i] = col\n        return bootstrapped_X, bootstrapped_y\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self._classes[np.argmax(proba, axis=1)]\n\n    def predict_proba(self, X):\n        if self._forest[0] is None:\n            raise ValueError('fit\u3057\u3066\u306d')\n        votes = [tree.predict(X[:, using_feature]) for tree, using_feature in zip(self._forest, self._using_features)]  # n_trees x n_samples\n        counts = [Counter(row) for row in np.array(votes).transpose()]  # n_samples \u3060\u3051\u306e Counter \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        # \u5404 tree \u306e\u610f\u898b\u306e\u96c6\u8a08\n        counts_array = np.zeros((len(X), len(self._classes)))  # n_samples x n_classes\n        for row_index, count in enumerate(counts):\n            for class_index, class_ in enumerate(self._classes):\n                counts_array[row_index, class_index] = count[class_]\n        proba = counts_array / self._n_trees  # \u898f\u683c\u5316\u3059\u308b\n        return proba\n\n\nif __name__ == '__main__':\n    from sklearn import datasets\n    from sklearn.cross_validation import train_test_split\n    from sklearn.ensemble import RandomForestClassifier\n\n    iris = datasets.load_iris()\n    X = iris.data\n    y = iris.target\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\n    dt = DecisionTree()\n    dt.fit(X_train, y_train)\n\n    rf = RandomForest()\n    rf.fit(X_train, y_train)\n\n    print('DecisionTree: ')\n\n    # dt_predicted_y_train = dt.predict(X_train)\n    # print('  predicted_y_train: {}'.format(dt_predicted_y_train))\n    # print('  (actual)         : {}'.format(y_train))\n    print('  score_train: {}'.format(dt.score(X_train, y_train)))\n    # dt_predicted_y_test = dt.predict(X_test)\n    # print('  predicted_y_test: {}'.format(dt_predicted_y_test))\n    # print('  (actual)        : {}'.format(y_test))\n    print('  score_test: {}'.format(dt.score(X_test, y_test)))\n\n    print('RandomForest: ')\n\n    # rf_predicted_y_train = rf.predict(X_train)\n    # print('  predicted_y_train: {}'.format(rf_predicted_y_train))\n    # print('  (actual)         : {}'.format(y_train))\n    print('  score_train: {}'.format(rf.score(X_train, y_train)))\n    # rf_predicted_y_test = rf.predict(X_test)\n    # print('  predicted_y_test: {}'.format(rf_predicted_y_test))\n    # print('  (actual)        : {}'.format(y_test))\n    print('  score_test: {}'.format(rf.score(X_test, y_test)))\n\n    print('Scikit-learn RandomForest: ')\n\n    ret = RandomForestClassifier().fit(X_train, y_train)\n    print('  score_train: {}'.format(ret.score(X_train, y_train)))\n    print('  score_test: {}'.format(ret.score(X_test, y_test)))\n\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b ($ python randomforest.py) \u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\uff1a\n$ python randomforest.py\nDecisionTree:\n  score_train: 1.0\n  score_test: 0.96\nRandomForest:\n  score_train: 0.98\n  score_test: 0.98\nScikit-learn RandomForest:\n  score_train: 1.0\n  score_test: 0.98\n\n\u4eca\u56de\u306f\u6c7a\u5b9a\u6728\u306e\u679d\u5208\u308a\u526a\u5b9a\u306f\u4e00\u5207\u304a\u3053\u306a\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001DecisionTree \u306e\u5b66\u7fd2\u30b9\u30b3\u30a2 (score_train) \u306f1\u3068\u306a\u308b\u3002\u30c6\u30b9\u30c8\u30b9\u30b3\u30a2 (score_test\u3001\u6c4e\u5316\u6027\u80fd) \u3067\u306f RandomForest \u306e\u307b\u3046\u304c\u826f\u3044\u5024\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u7d50\u8ad6\nScikit-learn \u3092\u4f7f\u304a\u3046\n\n\n\u53c2\u8003\u6587\u732e\n\n\u306f\u3058\u3081\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58 (\u68ee\u5317\u51fa\u7248\u3001\u5e73\u4e95\u6709\u4e09 \u8457 2012)\nScikit-learn (RandomForest, DecisionTree, ClassifierMixin)\nNumPy\n\n# \u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n![image](https://qiita-image-store.s3.amazonaws.com/0/132984/dc11ad62-b987-3870-da3b-874eb8e3160a.png)\n\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306b\u3042\u3089\u305a\u3093\u3070\u4eba\u5de5\u77e5\u80fd\u306b\u3042\u3089\u305a\u306a\u4e16\u306e\u4e2d\u3067\u3082\u3001\u753b\u50cf\u89e3\u6790\u3084\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306a\u3069\u306e\u975e\u69cb\u9020\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u3001\u5f93\u6765\u901a\u308a\u306e\u69cb\u9020\u30c7\u30fc\u30bf\u306b\u9650\u308c\u3070\u3001\u53e4\u304d\u3088\u304d\u6a5f\u68b0\u5b66\u7fd2\u624b\u6cd5\u306f\u307e\u3060\u307e\u3060\u624b\u8efd\u304b\u3064\u9ad8\u3044\u7cbe\u5ea6\u3092\u53e9\u304d\u51fa\u3059\u3002\n\u4f8b\u3048\u3070\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3001\u305d\u3057\u3066\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\n\n\u300c\u3067\u3082\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3063\u3066\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u305f\u3053\u3068\u306f\u3042\u308b\u3057\u52d5\u4f5c\u539f\u7406\u3082\u306a\u3093\u3068\u306a\u304f\u77e5\u3063\u3066\u308b\u3051\u3069\u3001\u5b9f\u88c5\u3057\u305f\u3053\u3068\u306f\u306a\u3044\u306a\u300d\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u5b8c\u6210\n\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u306f\n\u7c21\u5358\u306b\u8a00\u3063\u3066\u3057\u307e\u3048\u3070\u3001\u6c7a\u5b9a\u6728\u3092\u305f\u304f\u3055\u3093\u4f5c\u3063\u3066\u591a\u6570\u6c7a\u306b\u3088\u3063\u3066\u4e88\u6e2c\u3092\u304a\u3053\u306a\u3046\u624b\u6cd5\u3002\n\u307e\u305a\u306f\u6c7a\u5b9a\u6728\u304c\u306a\u3093\u306a\u306e\u304b\u3092\u77e5\u3089\u306d\u3070\u306a\u3089\u306a\u3044\u3002\n\n# \u6c7a\u5b9a\u6728\u3068\u306f\n![image](https://qiita-image-store.s3.amazonaws.com/0/132984/3e38db4b-b5b9-1338-b0b4-312585d9a889.png)\n\n\u7279\u5fb4\u91cf\u3092\u3072\u3068\u3064\u9078\u3093\u3067\u306f\u95be\u5024\u3092\u6c7a\u3081\u3066\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u5206\u985e\u30bf\u30b9\u30af\u3092\u304a\u3053\u306a\u3046\u5b66\u7fd2\u5668\u3002\u30c7\u30fc\u30bf\u304c\u3069\u3093\u3069\u3093\u5206\u304b\u308c\u3066\u3044\u304f\u3055\u307e\u304c\u6728\u3063\u307d\u3044\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/132984/63e2031c-9bff-3fbd-10e9-dae2ada0e01e.png)\n(\u753b\u50cf\uff1a[Wikipedia](https://ja.wikipedia.org/wiki/%E6%B1%BA%E5%AE%9A%E6%9C%A8) \u3088\u308a)\n\u6728\u3092\u69cb\u6210\u3059\u308b\u8981\u7d20\u306b\u306f**\u30ce\u30fc\u30c9**\u3068**\u30ea\u30f3\u30af**\u304c\u3042\u308b\u3002\u30ce\u30fc\u30c9\u306f\u5404\u30c7\u30fc\u30bf\u3092\u95be\u5024\u306b\u3088\u3063\u3066\u5206\u5272\u3059\u308b\u90e8\u5206 (\u4e0a\u56f3\u306e\u9ed2\u67a0\u9577\u65b9\u5f62\u304c\u30ce\u30fc\u30c9) \u3067\u3001\u30ce\u30fc\u30c9\u3069\u3046\u3057\u3092\u3064\u306a\u3050\u306e\u304c\u30ea\u30f3\u30af\u3067\u3042\u308b\u3002\n\u7279\u306b\u3001\u4e00\u756a\u6700\u521d\u306e\u30ce\u30fc\u30c9\u3092**\u6839\u30ce\u30fc\u30c9**\u3001\u305d\u308c\u4ee5\u4e0a\u30ea\u30f3\u30af\u304c\u751f\u3048\u3066\u3044\u306a\u3044\u30ce\u30fc\u30c9\u3092**\u8449\u30ce\u30fc\u30c9**\u3068\u547c\u3076\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u5404\u30ce\u30fc\u30c9\u306f (\u8449\u30ce\u30fc\u30c9\u3067\u306a\u3044\u9650\u308a) \u5fc5\u305a\u30c7\u30fc\u30bf\u30922\u5206\u5272\u3059\u308b**2\u5206\u6728**\u3060\u3051\u3092\u53d6\u308a\u6271\u3046\u3053\u3068\u306b\u3059\u308b (\u4e0a\u56f3\u306f3\u80a1\u306b\u5206\u304b\u308c\u308b\u30ce\u30fc\u30c9\u304c\u3042\u308b\u306e\u30672\u5206\u6728\u3067\u306f\u306a\u3044)\u3002\n\n## \u4e0d\u7d14\u5ea6\n![image](https://qiita-image-store.s3.amazonaws.com/0/132984/62cefebe-4ffd-8f69-c122-af818d4f3c27.png)\n\n\u300c\u5404\u30ce\u30fc\u30c9\u3067\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u300d\u3068\u306f\u8a00\u3063\u3066\u3082\u3001\u57fa\u6e96\u304c\u306a\u3051\u308c\u3070\u3069\u3046\u3084\u3063\u3066\u5206\u5272\u3059\u308c\u3070\u3088\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u3002\u305d\u306e\u57fa\u6e96\u3068\u306a\u308b\u6307\u6a19\u304c**\u4e0d\u7d14\u5ea6**\u3002\n\u4e0d\u7d14\u5ea6\u306f\u3001\u300c\u7dba\u9e97\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u4f4e\u304f\u3001\u30c6\u30ad\u30c8\u30fc\u306a\u30c7\u30fc\u30bf\u306f\u9ad8\u304f\u300d\u306a\u308b\u6307\u6a19\u3067\u3042\u308b\u3002\n\u4e0d\u7d14\u5ea6\u3068\u3057\u3066\u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\u306f**\u8aa4\u308a\u7387**\u3084**\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc**\u3001**\u30b8\u30cb\u4fc2\u6570**\u306a\u3069\u304c\u3042\u308b\u304c\u3001\u4eca\u56de\u306f\u30b8\u30cb\u4fc2\u6570\u3060\u3051\u3092\u53d6\u308a\u6271\u3046\u3002\u3042\u308b\u30ce\u30fc\u30c9 $t$ \u306b\u964d\u3063\u3066\u304d\u305f\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u30b8\u30cb\u4fc2\u6570\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u3068\u304a\u308a\uff1a\n$$\n\\mathcal{I}(t) = \\sum_{i=1}^K\\sum_{j\\ne i}P(C_i|t)P(C_j|t) = 1 - \\sum_{i=1}^KP^2(C_i|t) = \\sum_{i=1}^KP(C_i|t)(1-P(C_i|t))\n$$\n\u305f\u3060\u3057\u3001$K$ \u306f\u30af\u30e9\u30b9\u6570\u3001$P(C_i|t)$ \u306f\u30ce\u30fc\u30c9 $t$ \u306b\u964d\u3063\u3066\u304d\u305f\u30af\u30e9\u30b9 $i$ \u306e\u30c7\u30fc\u30bf\u306e\u5272\u5408\u3067\u3042\u308b\u3002\n\u6700\u5f8c\u306e\u5f0f\u306e\u4e2d\u306e $P(C_i|t)(1-P(C_i|t))$ \u306f\u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u306e\u5206\u6563\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u306e\u5206\u6563\u306f\u3001\u6295\u3052\u308b\u30b3\u30a4\u30f3\u304c\u504f\u3063\u3066\u3044\u308b\u307b\u3069\u5c0f\u3055\u304f\u306a\u308b (\u30b3\u30a4\u30f3\u306e\u540c\u3058\u9762\u3057\u304b\u51fa\u306a\u304f\u306a\u308b) \u306e\u3067\u3001\u6700\u5f8c\u306e\u5f0f\u306f\u7d50\u5c40\u300c\u3069\u308c\u3060\u3051\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u3060\u3051\u306b\u504f\u3063\u3066\u3044\u308b\u304b\u300d\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\n\u30ce\u30fc\u30c9 $t$ \u3067\u5206\u5272\u898f\u5247\u3092\u4f5c\u308b\u3068\u304d\u306f\u3001\u4e0d\u7d14\u5ea6\u306e\u6e1b\u308a\u65b9\u304c\u4e00\u756a\u5927\u304d\u306a\u5206\u5272\u3092\u9078\u3079\u3070\u826f\u3044\u3002\u3064\u307e\u308a\u5206\u5272\u3092 $s$ \u3068\u3057\u305f\u3068\u304d\u3001\n$$\n\\Delta\\mathcal{I}(s, t) = \\mathcal{I}(t) - (p_L\\mathcal{I}(t_L) + p_R\\mathcal{I}(t_R))\n$$\n\u304c\u6700\u5927\u306b\u306a\u308b $s$ \u3092\u53ef\u80fd\u306a\u5206\u5272\u306e\u5019\u88dc\u306e\u4e2d\u304b\u3089\u9078\u3076\u3002\u305f\u3060\u3057 $p_L, p_R$ \u306f $t$ \u304b\u3089\u305d\u308c\u305e\u308c\u5de6\u5074\u3001\u53f3\u5074\u306b\u6d41\u308c\u305f\u30c7\u30fc\u30bf\u306e\u5272\u5408\u3067\u3001$t_L, t_R$ \u306f $t$ \u304b\u3089\u5206\u5c90\u3057\u305f\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3002\u4e0d\u7d14\u5ea6\u306e\u6e1b\u308a\u65b9\u3092\u5206\u5272\u898f\u5247\u3067\u6bd4\u8f03\u3059\u308b\u3068\u304d\u3001$\\mathcal{I}(t)$ \u306f\u3069\u306e\u5206\u5272\u898f\u5247\u3067\u3082\u540c\u3058\u5024\u3067\u3042\u308b\u304b\u3089\u3001\u5f0f\u5168\u4f53\u306e\u5024\u3092\u5927\u304d\u304f\u3057\u305f\u3044\u306a\u3089\u3001\u7b2c\u4e8c\u9805\u304c\u4e00\u756a\u5c0f\u3055\u306a\u5206\u5272\u898f\u5247\u3092\u9078\u3079\u3070\u826f\u3044\u3002\n\n```py3\ndef _delta_gini_index(self, left, right):\n        \"\"\"\u3042\u308b\u5206\u5272\u898f\u5247\u306b\u3088\u308b\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u3092\u8a08\u7b97\u3059\u308b (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n        left \u306f\u5de6\u5074\u306b\u6d41\u308c\u308b\u30c7\u30fc\u30bf\u306e\u30b5\u30f3\u30d7\u30eb (e.g.: [1,1,1,2])\n        right \u306f\u53f3\u5074\u306b\u6d41\u308c\u308b\u30c7\u30fc\u30bf\u306e\u30b5\u30f3\u30d7\u30eb (e.g.: [0,0,0,2,2])\n        \"\"\"\n        n_left = len(left)\n        n_right = len(right)\n        n_total = n_left + n_right\n\n        # \u5de6\u5074\n        _, counts = np.unique(left, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        left_ratio_classes = counts / n_left  # \u5272\u5408\u306b\u3059\u308b\n        left_gain = (n_left / n_total) * (1 - (left_ratio_classes ** 2).sum())\n        # \u53f3\u5074\n        _, counts = np.unique(right, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        right_ratio_classes = counts / n_right  # \u5272\u5408\u306b\u3059\u308b\n        right_gain = (n_right / n_total) * (1 - (right_ratio_classes ** 2).sum())\n\n        return left_gain + right_gain\n```\n\n## \u6728\u306e\u6210\u9577\n2\u5206\u6728\u306e\u30ce\u30fc\u30c9\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u3064\u304f\u308b\u3002\n\n```py3\nclass _Node:\n    \"\"\"2\u5206\u6c7a\u5b9a\u6728\u306e\u30ce\u30fc\u30c9\u3002class_count \u306f\u5fc5\u305a\u6301\u3064\u3002\u8449\u30ce\u30fc\u30c9\u4ee5\u5916\u306f\u305d\u308c\u4ee5\u5916\u3082\u6301\u3064\u3002\"\"\"\n    def __init__(self, class_count):\n        self.class_count = class_count  # \u3053\u306e\u30ce\u30fc\u30c9\u306b\u5c5e\u3059\u5404\u30af\u30e9\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u6570\n\n        self.feature_id = None  # \u5206\u5272\u898f\u5247\u306b\u7528\u3044\u305f\u306e\u306f\u300c\u5165\u529bX\u306e\u4f55\u6b21\u5143\u76ee\u304b\u300d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (int)\n        self.threshold = None  # \u5206\u5272\u898f\u5247\u306b\u7528\u3044\u305f\u95be\u5024\n        self.left = None  # \u3053\u306e\u30ce\u30fc\u30c9\u306e\u5de6\u5074\u306e\u3053\u3069\u3082\u3002x < threshold\n        self.right = None  # \u3053\u306e\u30ce\u30fc\u30c9\u306e\u53f3\u5074\u306e\u3053\u3069\u3082\u3002x >= threshold\n\n    @property\n    def is_leaf(self):\n        return self.feature_id is None\n\n    def __repr__(self):\n        if self.is_leaf:\n            return '<Node leaf of class_count: {}>'.format(self.class_count)\n        else:\n            return '<Node of class_count: {}, feature_id: {}, threshold: {}>'.format(\n                self.class_count, self.feature_id, self.threshold)\n```\n\u3053\u306e `_Node` \u3092\u3046\u308a\u3046\u308a\u3068\u9023\u7d50\u3057\u3066\u3044\u3051\u30702\u5206\u6c7a\u5b9a\u6728\u304c\u4f5c\u308c\u308b\u3002\u5206\u5272\u3057\u305f\u3042\u3068\u306e\u5de6\u53f3\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u518d\u5e30\u7684\u306b\u6728\u3092\u69cb\u7bc9\u3059\u308c\u3070\u826f\u3044\u3002\n\n```py3\ndef _grow(self, X, y):\n        \"\"\"(\u6df1\u3055\u512a\u5148\u3067) \u518d\u5e30\u7684\u306b\u6728\u3092\u6210\u9577\u3055\u305b\u308b\u3002\u30e1\u30e2\u30ea\u52b9\u7387\u306f\u77e5\u3089\u3093\"\"\"\n        uniques, counts = np.unique(y, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b (\u6b6f\u629c\u3051\u3042\u308a)\n        counter = dict(zip(uniques, counts))\n        class_count = [counter[c] if c in counter else 0 for c in self._classes]  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570 (\u6b6f\u629c\u3051\u306a\u3057)\n        this = _Node(class_count)  # \u307e\u305a\u81ea\u5206\u81ea\u8eab\u3092\u751f\u6210\n\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u3072\u3068\u3064\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if len(y) == 1:\n            return this\n        # \u5168\u90e8\u540c\u3058\u30af\u30e9\u30b9\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if all(y[0] == y):\n            return this\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u5168\u90e8\u540c\u3058\u7279\u5fb4\u91cf\u3092\u3082\u3064\u5834\u5408\u306f\u5206\u5c90\u4e0d\u53ef\u80fd\u306a\u306e\u3067\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if (X[0] == X).all():\n            return this\n\n        # \u3053\u306e\u6642\u70b9\u3067 this \u304c\u8449\u30ce\u30fc\u30c9\u3067\u306f\u306a\u304f\u5206\u5c90\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\n        left_X, left_y, right_X, right_y, feature_id, threshold = self._branch(X, y)  # \u6700\u9069\u306a\u5206\u5272\u898f\u5247\u3092\u63a2\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\n        this.feature_id = feature_id\n        this.threshold = threshold\n        this.left = self._grow(left_X, left_y)  # \u5de6\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        this.right = self._grow(right_X, right_y)  # \u53f3\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        return this\n```\n\n## \u6c7a\u5b9a\u6728\u306e\u30b3\u30fc\u30c9\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u308b\u3068\u30012\u5206\u6c7a\u5b9a\u6728\u306e\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u901a\u308a\uff1a\n\n```py3\nclass DecisionTree(ClassifierMixin):\n    \"\"\"2\u5206\u6c7a\u5b9a\u6728\"\"\"\n    def __init__(self):\n        self._tree = None\n\n    def fit(self, X, y):  # [n_samples, n_features]\n        self._classes = np.unique(y)\n        self._tree = self._grow(X, y)\n\n    def _grow(self, X, y):\n        \"\"\"(\u6df1\u3055\u512a\u5148\u3067) \u518d\u5e30\u7684\u306b\u6728\u3092\u6210\u9577\u3055\u305b\u308b\u3002\u30e1\u30e2\u30ea\u52b9\u7387\u306f\u77e5\u3089\u3093\"\"\"\n        uniques, counts = np.unique(y, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b (\u6b6f\u629c\u3051\u3042\u308a)\n        counter = dict(zip(uniques, counts))\n        class_count = [counter[c] if c in counter else 0 for c in self._classes]  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570 (\u6b6f\u629c\u3051\u306a\u3057)\n        this = _Node(class_count)  # \u307e\u305a\u81ea\u5206\u81ea\u8eab\u3092\u751f\u6210\n\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u3072\u3068\u3064\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if len(y) == 1:\n            return this\n        # \u5168\u90e8\u540c\u3058\u30af\u30e9\u30b9\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if all(y[0] == y):\n            return this\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u5168\u90e8\u540c\u3058\u7279\u5fb4\u91cf\u3092\u3082\u3064\u5834\u5408\u306f\u5206\u5c90\u4e0d\u53ef\u80fd\u306a\u306e\u3067\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if (X[0] == X).all():\n            return this\n\n        # \u3053\u306e\u6642\u70b9\u3067 this \u304c\u8449\u30ce\u30fc\u30c9\u3067\u306f\u306a\u304f\u5206\u5c90\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\n        left_X, left_y, right_X, right_y, feature_id, threshold = self._branch(X, y)\n        this.feature_id = feature_id\n        this.threshold = threshold\n        this.left = self._grow(left_X, left_y)  # \u5de6\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        this.right = self._grow(right_X, right_y)  # \u53f3\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        return this\n\n    def _branch(self, X, y):\n        \"\"\"\u30b8\u30cb\u4fc2\u6570\u306b\u3057\u305f\u304c\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u5206\u5272\"\"\"\n        gains = list()  # \u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u306e\u8a18\u9332 (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n        rules = list()  # \u5206\u5c90\u898f\u5247\u306e\u8a18\u9332\n\n        for feature_id, xs in enumerate(X.transpose()):  # 1\u7279\u5fb4\u305a\u3064\u8abf\u67fb\n            thresholds = self._get_branching_threshold(xs)  # \u5206\u5c90\u306e\u6761\u4ef6\u3068\u306a\u308b\u95be\u5024\u306e\u5019\u88dc\u3092\u5168\u53d6\u5f97\n            for th in thresholds:  # \u95be\u5024\u3067\u5206\u5272\u3057\u3066\u307f\u308b\n                left_y = y[xs < th]\n                right_y = y[th <= xs]\n                gain = self._delta_gini_index(left_y, right_y)  # \u3053\u306e\u5206\u5272\u306b\u3088\u308b\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n                gains.append(gain)\n                rules.append((feature_id, th))\n        best_rule = rules[np.argmin(gains)]  # \u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u304c\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\u898f\u5247\u3092\u63a1\u7528\n        feature_id = best_rule[0]\n        threshold = best_rule[1]\n        split = X[:, feature_id] < threshold  # \u95be\u5024\u306b\u3088\u308b\u5206\u5272\u3092\u53d6\u5f97\n        return X[split], y[split], X[~split], y[~split], feature_id, threshold\n\n    def _get_branching_threshold(self, xs):\n        \"\"\"xs \u306e\u5206\u5c90\u306e\u6761\u4ef6\u3068\u306a\u308b\u95be\u5024\u3092\u5168\u53d6\u5f97\"\"\"\n        unique_xs = np.unique(xs)  # np.unique() \u306f\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u7d50\u679c\u3092\u8fd4\u3059\u3053\u3068\u306b\u6ce8\u610f\n        return (unique_xs[1:] + unique_xs[:-1]) / 2  # [3, 4, 6] -> [3.5, 5.0]\n\n    def _delta_gini_index(self, left, right):\n        \"\"\"\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u3092\u8a08\u7b97\u3059\u308b (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\"\"\"\n        n_left = len(left)\n        n_right = len(right)\n        n_total = n_left + n_right\n\n        # \u5de6\u5074\n        _, counts = np.unique(left, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        left_ratio_classes = counts / n_left  # \u5272\u5408\u306b\u3059\u308b\n        left_gain = (n_left / n_total) * (1 - (left_ratio_classes ** 2).sum())\n        # \u53f3\u5074\n        _, counts = np.unique(right, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        right_ratio_classes = counts / n_right  # \u5272\u5408\u306b\u3059\u308b\n        right_gain = (n_right / n_total) * (1 - (right_ratio_classes ** 2).sum())\n\n        return left_gain + right_gain\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self._classes[np.argmax(proba, axis=1)]\n\n    def predict_proba(self, X):\n        if self._tree is None:\n            raise ValueError('fit\u3057\u3066\u306d')\n        return np.array([self._predict_one(xs) for xs in X])\n\n    def _predict_one(self, xs):\n        \"\"\"1\u30b5\u30f3\u30d7\u30eb\u3092\u4e88\u6e2c\"\"\"\n        node = self._tree\n        while not node.is_leaf:  # \u8449\u30ce\u30fc\u30c9\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n            is_left = xs[node.feature_id] < node.threshold  # True: left, False: right\n            node = node.left if is_left else node.right\n        class_count = node.class_count\n        return np.array(class_count) / sum(class_count)\n```\n\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\n![image](https://qiita-image-store.s3.amazonaws.com/0/132984/688ac335-5685-d256-7086-e061f9188e03.png)\n\n\u2191 \u3067\u4f5c\u3063\u305f\u6c7a\u5b9a\u6728\u3092\u305f\u304f\u3055\u3093\u5b66\u7fd2\u3055\u305b\u3066\u68ee\u306b\u3059\u308b\u3002\u3053\u306e\u3068\u304d\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u91cd\u8981\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\u304c\u3042\u308b\u3002**\u5404\u6c7a\u5b9a\u6728\u306b\u308f\u305f\u3059\u30c7\u30fc\u30bf\u306f\u3001\u5143\u30c7\u30fc\u30bf\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30eb (\u5fa9\u5143\u3042\u308a\u306e\u62bd\u51fa) \u304a\u3088\u3073\u7279\u5fb4\u91cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u3002**\n\n```py3\ndef _bootstrap_sample(self, X, y):\n        \"\"\"\n        \u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30eb (\u5fa9\u5143\u62bd\u51fa)\n        \u540c\u6642\u306b\u3001\u7279\u5fb4\u91cf\u65b9\u5411\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3082\u304a\u3053\u306a\u3046\u3002\n        \"\"\"\n        n_features = X.shape[1]\n        n_features_forest = np.floor(np.sqrt(n_features))\n        bootstrapped_X = list()\n        bootstrapped_y = list()\n        for i in range(self._n_trees):\n            ind = np.random.choice(len(y), size=len(y))  # \u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            col = np.random.choice(n_features, size=n_features_forest, replace=False)  # \u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            bootstrapped_X.append(X[np.ix_(ind, col)])\n            bootstrapped_y.append(y[ind])\n            self._using_features[i] = col\n        return bootstrapped_X, bootstrapped_y\n```\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u306f\u3001\u6e21\u3059\u30c7\u30fc\u30bf\u3092\u3050\u3061\u3083\u307e\u305c\u306b\u3059\u308b\u3053\u3068\u3067\u3067\u304d\u308b\u3060\u3051\u5404\u6c7a\u5b9a\u6728\u304c\u4f3c\u305f\u308a\u5bc4\u3063\u305f\u308a\u306e\u5f62\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b (\uff1d\u591a\u69d8\u6027\u3092\u6301\u3064\u3088\u3046\u306b) \u5de5\u592b\u3057\u3066\u3044\u308b\u3002\u3053\u3046\u3057\u3066\u751f\u6210\u3055\u308c\u305f\u6c7a\u5b9a\u6728\u306e\u591a\u6570\u6c7a\u306b\u3088\u3063\u3066\u5206\u985e\u3092\u304a\u3053\u306a\u3046\u3002\u3059\u308b\u3068\u3001\u5404\u6c7a\u5b9a\u6728\u306e\u6301\u3064\u591a\u69d8\u6027\u306e\u304a\u304b\u3052\u3067\u9ad8\u3044\u6c4e\u5316\u6027\u80fd\u3092\u6301\u3064\u3088\u3046\u306b\u306a\u308b\u3002\n\n```py3\nclass RandomForest(ClassifierMixin):\n    \"\"\"\u2191\u306e2\u5206\u6c7a\u5b9a\u6728\u3092\u4f7f\u3063\u305f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\"\"\"\n    def __init__(self, n_trees=10):\n        self._n_trees = n_trees\n\n        self._forest = [None] * self._n_trees\n        self._using_features = [None] * self._n_trees\n\n    def fit(self, X, y):\n        self._classes = np.unique(y)\n\n        bootstrapped_X, bootstrapped_y = self._bootstrap_sample(X, y)\n        for i, (i_bootstrapped_X, i_bootstrapped_y) in enumerate(zip(bootstrapped_X, bootstrapped_y)):\n            tree = DecisionTree()\n            tree.fit(i_bootstrapped_X, i_bootstrapped_y)\n            self._forest[i] = tree\n\n    def _bootstrap_sample(self, X, y):\n        \"\"\"\n        \u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30eb (\u5fa9\u5143\u62bd\u51fa)\n        \u540c\u6642\u306b\u3001\u7279\u5fb4\u91cf\u65b9\u5411\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3082\u304a\u3053\u306a\u3046\u3002\n        \"\"\"\n        n_features = X.shape[1]\n        n_features_forest = np.floor(np.sqrt(n_features))\n        bootstrapped_X = list()\n        bootstrapped_y = list()\n        for i in range(self._n_trees):\n            ind = np.random.choice(len(y), size=len(y))  # \u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            col = np.random.choice(n_features, size=n_features_forest, replace=False)  # \u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            bootstrapped_X.append(X[np.ix_(ind, col)])\n            bootstrapped_y.append(y[ind])\n            self._using_features[i] = col\n        return bootstrapped_X, bootstrapped_y\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self._classes[np.argmax(proba, axis=1)]\n\n    def predict_proba(self, X):\n        if self._forest[0] is None:\n            raise ValueError('fit\u3057\u3066\u306d')\n        votes = [tree.predict(X[:, using_feature]) for tree, using_feature in zip(self._forest, self._using_features)]  # n_trees x n_samples\n        counts = [Counter(row) for row in np.array(votes).transpose()]  # n_samples \u3060\u3051\u306e Counter \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        # \u5404 tree \u306e\u610f\u898b\u306e\u96c6\u8a08\n        counts_array = np.zeros((len(X), len(self._classes)))  # n_samples x n_classes\n        for row_index, count in enumerate(counts):\n            for class_index, class_ in enumerate(self._classes):\n                counts_array[row_index, class_index] = count[class_]\n        proba = counts_array / self._n_trees  # \u898f\u683c\u5316\u3059\u308b\n        return proba\n```\n\n# \u6027\u80fd\n\u4eca\u307e\u3067\u65ad\u7247\u7684\u306b\u66f8\u3044\u3066\u3044\u305f\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u306f\u6b21\u306e\u901a\u308a\u3002\u6c7a\u5b9a\u6728\u304a\u3088\u3073\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u30af\u30e9\u30b9\u306b `ClassifierMixin` \u3092\u7d99\u627f\u3055\u305b\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u306f `score` \u3068\u3044\u3046\u7cbe\u5ea6\u6e2c\u5b9a\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u308b\u3060\u3051 (Scikit-learn \u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u624b\u6cd5\u306f\u5fc5\u305a `ClassifierMixin` \u3092\u7d99\u627f\u3057\u3066\u3044\u308b)\u3002\n\n```py3:randomforest.py\n# coding=utf-8\n\nimport logging\nfrom collections import Counter\n\nimport numpy as np\nfrom sklearn.base import ClassifierMixin\n\n\nclass _Node:\n    \"\"\"2\u5206\u6c7a\u5b9a\u6728\u306e\u30ce\u30fc\u30c9\u3002class_count \u306f\u5fc5\u305a\u6301\u3064\u3002\u8449\u30ce\u30fc\u30c9\u4ee5\u5916\u306f\u305d\u308c\u4ee5\u5916\u3082\u6301\u3064\u3002\"\"\"\n    def __init__(self, class_count):\n        self.class_count = class_count  # \u3053\u306e\u30ce\u30fc\u30c9\u306b\u5c5e\u3059\u5404\u30af\u30e9\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u6570\n\n        self.feature_id = None  # \u5206\u5272\u898f\u5247\u306b\u7528\u3044\u305f\u306e\u306f\u300c\u5165\u529bX\u306e\u4f55\u6b21\u5143\u76ee\u304b\u300d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (int)\n        self.threshold = None  # \u5206\u5272\u898f\u5247\u306b\u7528\u3044\u305f\u95be\u5024\n        self.left = None  # \u3053\u306e\u30ce\u30fc\u30c9\u306e\u5de6\u5074\u306e\u3053\u3069\u3082\u3002x < threshold\n        self.right = None  # \u3053\u306e\u30ce\u30fc\u30c9\u306e\u53f3\u5074\u306e\u3053\u3069\u3082\u3002x >= threshold\n\n    @property\n    def is_leaf(self):\n        return self.feature_id is None\n\n    def __repr__(self):\n        if self.is_leaf:\n            return '<Node leaf of class_count: {}>'.format(self.class_count)\n        else:\n            return '<Node of class_count: {}, feature_id: {}, threshold: {}>'.format(\n                self.class_count, self.feature_id, self.threshold)\n\n\nclass DecisionTree(ClassifierMixin):\n    \"\"\"2\u5206\u6c7a\u5b9a\u6728\"\"\"\n    def __init__(self):\n        self._tree = None\n\n    def fit(self, X, y):  # [n_samples, n_features]\n        self._classes = np.unique(y)\n        self._tree = self._grow(X, y)\n\n    def _grow(self, X, y):\n        \"\"\"(\u6df1\u3055\u512a\u5148\u3067) \u518d\u5e30\u7684\u306b\u6728\u3092\u6210\u9577\u3055\u305b\u308b\u3002\u30e1\u30e2\u30ea\u52b9\u7387\u306f\u77e5\u3089\u3093\"\"\"\n        uniques, counts = np.unique(y, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b (\u6b6f\u629c\u3051\u3042\u308a)\n        counter = dict(zip(uniques, counts))\n        class_count = [counter[c] if c in counter else 0 for c in self._classes]  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570 (\u6b6f\u629c\u3051\u306a\u3057)\n        this = _Node(class_count)  # \u307e\u305a\u81ea\u5206\u81ea\u8eab\u3092\u751f\u6210\n\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u3072\u3068\u3064\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if len(y) == 1:\n            return this\n        # \u5168\u90e8\u540c\u3058\u30af\u30e9\u30b9\u306a\u3089\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if all(y[0] == y):\n            return this\n        # \u30b5\u30f3\u30d7\u30eb\u304c\u5168\u90e8\u540c\u3058\u7279\u5fb4\u91cf\u3092\u3082\u3064\u5834\u5408\u306f\u5206\u5c90\u4e0d\u53ef\u80fd\u306a\u306e\u3067\u8449\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u3066\u7d42\u4e86\n        if (X[0] == X).all():\n            return this\n\n        # \u3053\u306e\u6642\u70b9\u3067 this \u304c\u8449\u30ce\u30fc\u30c9\u3067\u306f\u306a\u304f\u5206\u5c90\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\n        left_X, left_y, right_X, right_y, feature_id, threshold = self._branch(X, y)\n        this.feature_id = feature_id\n        this.threshold = threshold\n        this.left = self._grow(left_X, left_y)  # \u5de6\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        this.right = self._grow(right_X, right_y)  # \u53f3\u5074\u306e\u6728\u3092\u6210\u9577\u3055\u305b\u308b\n        return this\n\n    def _branch(self, X, y):\n        \"\"\"\u30b8\u30cb\u4fc2\u6570\u306b\u3057\u305f\u304c\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u5206\u5272\"\"\"\n        gains = list()  # \u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u306e\u8a18\u9332 (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n        rules = list()  # \u5206\u5c90\u898f\u5247\u306e\u8a18\u9332\n\n        for feature_id, xs in enumerate(X.transpose()):  # 1\u7279\u5fb4\u305a\u3064\u8abf\u67fb\n            thresholds = self._get_branching_threshold(xs)  # \u5206\u5c90\u306e\u6761\u4ef6\u3068\u306a\u308b\u95be\u5024\u306e\u5019\u88dc\u3092\u5168\u53d6\u5f97\n            for th in thresholds:  # \u95be\u5024\u3067\u5206\u5272\u3057\u3066\u307f\u308b\n                left_y = y[xs < th]\n                right_y = y[th <= xs]\n                gain = self._delta_gini_index(left_y, right_y)  # \u3053\u306e\u5206\u5272\u306b\u3088\u308b\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\n                gains.append(gain)\n                rules.append((feature_id, th))\n        best_rule = rules[np.argmin(gains)]  # \u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u304c\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\u898f\u5247\u3092\u63a1\u7528\n        feature_id = best_rule[0]\n        threshold = best_rule[1]\n        split = X[:, feature_id] < threshold  # \u95be\u5024\u306b\u3088\u308b\u5206\u5272\u3092\u53d6\u5f97\n        return X[split], y[split], X[~split], y[~split], feature_id, threshold\n\n    def _get_branching_threshold(self, xs):\n        \"\"\"xs \u306e\u5206\u5c90\u306e\u6761\u4ef6\u3068\u306a\u308b\u95be\u5024\u3092\u5168\u53d6\u5f97\"\"\"\n        unique_xs = np.unique(xs)  # np.unique() \u306f\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u7d50\u679c\u3092\u8fd4\u3059\u3053\u3068\u306b\u6ce8\u610f\n        return (unique_xs[1:] + unique_xs[:-1]) / 2  # [3, 4, 6] -> [3.5, 5.0]\n\n    def _delta_gini_index(self, left, right):\n        \"\"\"\u30b8\u30cb\u4fc2\u6570\u306e\u6e1b\u5c11\u91cf\u3092\u8a08\u7b97\u3059\u308b (\u5c0f\u3055\u3044\u307b\u3046\u304c\u3048\u3089\u3044)\"\"\"\n        n_left = len(left)\n        n_right = len(right)\n        n_total = n_left + n_right\n\n        # \u5de6\u5074\n        _, counts = np.unique(left, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        left_ratio_classes = counts / n_left  # \u5272\u5408\u306b\u3059\u308b\n        left_gain = (n_left / n_total) * (1 - (left_ratio_classes ** 2).sum())\n        # \u53f3\u5074\n        _, counts = np.unique(right, return_counts=True)  # \u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\n        right_ratio_classes = counts / n_right  # \u5272\u5408\u306b\u3059\u308b\n        right_gain = (n_right / n_total) * (1 - (right_ratio_classes ** 2).sum())\n\n        return left_gain + right_gain\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self._classes[np.argmax(proba, axis=1)]\n\n    def predict_proba(self, X):\n        if self._tree is None:\n            raise ValueError('fit\u3057\u3066\u306d')\n        return np.array([self._predict_one(xs) for xs in X])\n\n    def _predict_one(self, xs):\n        \"\"\"1\u30b5\u30f3\u30d7\u30eb\u3092\u4e88\u6e2c\"\"\"\n        node = self._tree\n        while not node.is_leaf:  # \u8449\u30ce\u30fc\u30c9\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n            is_left = xs[node.feature_id] < node.threshold  # True: left, False: right\n            node = node.left if is_left else node.right\n        class_count = node.class_count\n        return np.array(class_count) / sum(class_count)\n\n\nclass RandomForest(ClassifierMixin):\n    \"\"\"\u2191\u306e2\u5206\u6c7a\u5b9a\u6728\u3092\u4f7f\u3063\u305f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\"\"\"\n    def __init__(self, n_trees=10):\n        self._n_trees = n_trees\n\n        self._forest = [None] * self._n_trees\n        self._using_features = [None] * self._n_trees\n\n    def fit(self, X, y):\n        self._classes = np.unique(y)\n\n        bootstrapped_X, bootstrapped_y = self._bootstrap_sample(X, y)\n        for i, (i_bootstrapped_X, i_bootstrapped_y) in enumerate(zip(bootstrapped_X, bootstrapped_y)):\n            tree = DecisionTree()\n            tree.fit(i_bootstrapped_X, i_bootstrapped_y)\n            self._forest[i] = tree\n\n    def _bootstrap_sample(self, X, y):\n        \"\"\"\n        \u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30eb (\u5fa9\u5143\u62bd\u51fa)\n        \u540c\u6642\u306b\u3001\u7279\u5fb4\u91cf\u65b9\u5411\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3082\u304a\u3053\u306a\u3046\u3002\n        \"\"\"\n        n_features = X.shape[1]\n        n_features_forest = np.floor(np.sqrt(n_features))\n        bootstrapped_X = list()\n        bootstrapped_y = list()\n        for i in range(self._n_trees):\n            ind = np.random.choice(len(y), size=len(y))  # \u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            col = np.random.choice(n_features, size=n_features_forest, replace=False)  # \u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n            bootstrapped_X.append(X[np.ix_(ind, col)])\n            bootstrapped_y.append(y[ind])\n            self._using_features[i] = col\n        return bootstrapped_X, bootstrapped_y\n\n    def predict(self, X):\n        proba = self.predict_proba(X)\n        return self._classes[np.argmax(proba, axis=1)]\n\n    def predict_proba(self, X):\n        if self._forest[0] is None:\n            raise ValueError('fit\u3057\u3066\u306d')\n        votes = [tree.predict(X[:, using_feature]) for tree, using_feature in zip(self._forest, self._using_features)]  # n_trees x n_samples\n        counts = [Counter(row) for row in np.array(votes).transpose()]  # n_samples \u3060\u3051\u306e Counter \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        # \u5404 tree \u306e\u610f\u898b\u306e\u96c6\u8a08\n        counts_array = np.zeros((len(X), len(self._classes)))  # n_samples x n_classes\n        for row_index, count in enumerate(counts):\n            for class_index, class_ in enumerate(self._classes):\n                counts_array[row_index, class_index] = count[class_]\n        proba = counts_array / self._n_trees  # \u898f\u683c\u5316\u3059\u308b\n        return proba\n\n\nif __name__ == '__main__':\n    from sklearn import datasets\n    from sklearn.cross_validation import train_test_split\n    from sklearn.ensemble import RandomForestClassifier\n\n    iris = datasets.load_iris()\n    X = iris.data\n    y = iris.target\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\n    dt = DecisionTree()\n    dt.fit(X_train, y_train)\n\n    rf = RandomForest()\n    rf.fit(X_train, y_train)\n\n    print('DecisionTree: ')\n\n    # dt_predicted_y_train = dt.predict(X_train)\n    # print('  predicted_y_train: {}'.format(dt_predicted_y_train))\n    # print('  (actual)         : {}'.format(y_train))\n    print('  score_train: {}'.format(dt.score(X_train, y_train)))\n    # dt_predicted_y_test = dt.predict(X_test)\n    # print('  predicted_y_test: {}'.format(dt_predicted_y_test))\n    # print('  (actual)        : {}'.format(y_test))\n    print('  score_test: {}'.format(dt.score(X_test, y_test)))\n\n    print('RandomForest: ')\n\n    # rf_predicted_y_train = rf.predict(X_train)\n    # print('  predicted_y_train: {}'.format(rf_predicted_y_train))\n    # print('  (actual)         : {}'.format(y_train))\n    print('  score_train: {}'.format(rf.score(X_train, y_train)))\n    # rf_predicted_y_test = rf.predict(X_test)\n    # print('  predicted_y_test: {}'.format(rf_predicted_y_test))\n    # print('  (actual)        : {}'.format(y_test))\n    print('  score_test: {}'.format(rf.score(X_test, y_test)))\n\n    print('Scikit-learn RandomForest: ')\n\n    ret = RandomForestClassifier().fit(X_train, y_train)\n    print('  score_train: {}'.format(ret.score(X_train, y_train)))\n    print('  score_test: {}'.format(ret.score(X_test, y_test)))\n```\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b (`$ python randomforest.py`) \u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\uff1a\n\n```\n$ python randomforest.py\nDecisionTree:\n  score_train: 1.0\n  score_test: 0.96\nRandomForest:\n  score_train: 0.98\n  score_test: 0.98\nScikit-learn RandomForest:\n  score_train: 1.0\n  score_test: 0.98\n```\n\n\u4eca\u56de\u306f\u6c7a\u5b9a\u6728\u306e\u679d\u5208\u308a\u526a\u5b9a\u306f\u4e00\u5207\u304a\u3053\u306a\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001DecisionTree \u306e\u5b66\u7fd2\u30b9\u30b3\u30a2 (`score_train`) \u306f1\u3068\u306a\u308b\u3002\u30c6\u30b9\u30c8\u30b9\u30b3\u30a2 (`score_test`\u3001\u6c4e\u5316\u6027\u80fd) \u3067\u306f RandomForest \u306e\u307b\u3046\u304c\u826f\u3044\u5024\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n# \u7d50\u8ad6\nScikit-learn \u3092\u4f7f\u304a\u3046\n\n* * *\n### \u53c2\u8003\u6587\u732e\n- \u306f\u3058\u3081\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58 (\u68ee\u5317\u51fa\u7248\u3001\u5e73\u4e95\u6709\u4e09 \u8457 2012)\n- Scikit-learn ([RandomForest](http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html), [DecisionTree](http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html), [ClassifierMixin](http://scikit-learn.org/stable/modules/generated/sklearn.base.ClassifierMixin.html))\n- [NumPy] (http://www.numpy.org/)\n\n\n", "tags": ["Python", "randomForest", "scikit-learn", "MachineLearning"]}