{"context": " More than 1 year has passed since last update.\nSwift\u3067\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3059\u308b\u30c1\u30e3\u30c3\u30c8\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\niOS\u306b\u306fSIOSocket\u3092\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306b\u306fSocket.io\u3092\u4f7f\u7528\u3002\n\nGithub\nhttps://github.com/ytakzk/swift-socket-example\n\n\u74b0\u5883\n\niOS\nSwift\nSIOSocket https://github.com/MegaBits/SIOSocket\n\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\nNode.js\nExpress https://github.com/strongloop/express/stargazers\nsocket.io https://github.com/Automattic/socket.io\nmongodb http://www.mongodb.org/\nmongoose https://github.com/LearnBoost/mongoose\n\n\u3042\u308c\u3053\u308c\niOS\u3067\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306fSocketRocket\u306a\u3069\u8272\u3005\u3042\u308b\u304cSIOSocket\u304cSwift\u3068\u76f8\u6027\u826f\u3055\u305d\u3046\u3002\n\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u306e\u90e8\u5206\u4ee5\u5916\u306b\u3082\u3001\n\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u51fa\u3059\u3068TexiView\u304c\u96a0\u308c\u306a\u3044\u3088\u3046TableView\u304c\u4e0a\u90e8\u306b\u305a\u308c\u305f\u308a\nTextView\u304c\u6539\u884c\u3067\u53ef\u5909\u306b\u306a\u3063\u305f\u308a\nAutolayout\u3067\u753b\u9762\u5916\u306b\u96a0\u3057\u305fcontainerView\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u51fa\u3057\u5165\u308c\u3059\u308b\u306a\u3069\n\u4f55\u304b\u3057\u3089\u5f79\u306b\u7acb\u3064\u90e8\u5206\u304c\u3042\u308b\u3068\u601d\u3046\u3002\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u304d\u308c\u3044\u306b\u66f8\u304d\u305f\u304b\u3063\u305f\u3051\u3069\u4eca\u56de\u306f\u9762\u5012\u306a\u306e\u3067\u5272\u611b\u3002\nExpress\u3082\u4f7f\u3046\u5fc5\u8981\u306a\u304b\u3063\u305f\u3051\u3069\u4eca\u5f8c\u306e\u62e1\u5f35\u3092\u8003\u3048\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9(iOS)\n\nViewController\nimport UIKit\n\nclass ViewController: UIViewController, UITextViewDelegate {\n@IBOutlet weak var tableView: UITableView!\n@IBOutlet weak var inputAreaView: UIView!\n@IBOutlet weak var textView: UITextView!\n@IBOutlet weak var textViewConstraintHeight: NSLayoutConstraint!\n@IBOutlet weak var sendButton: UIButton!\n@IBOutlet weak var settingsButton: UIButton!\n\n@IBOutlet weak var settingsView: UIView!\n@IBOutlet weak var settingsViewConstraintMarginTop: NSLayoutConstraint!\nvar settingsViewController:SettingsViewController! = nil\nvar settingsViewIsDisplayed = false\n\nvar messages: Array<MessageModel>?\nvar socket:SIOSocket! = nil\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    // Do any additional setup after loading the view, typically from a nib.\n\n    messages = []\n\n    // \u3053\u3053\u304c\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3059\u308b\u3068\u3053\u308d\n    SIOSocket.socketWithHost(\"ws://localhost:3000\", response:  { (_socket: SIOSocket!) in\n        self.socket = _socket\n\n        self.socket.onConnect = {() in\n            println(\"connected\")\n            self.socket.emit(\"message init\", args: [])\n        }\n\n        self.socket.onReconnect = { (attempts: Int) in\n\n        }\n\n        self.socket.onDisconnect = {() in\n            println(\"disconnected\")\n        }\n\n        // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\n        self.socket.on(\"message send\", callback:{(data:[AnyObject]!)  in\n            let dic = data[0] as NSDictionary\n            let model = MessageModel(_name: dic[\"name\"] as String, _message: dic[\"message\"] as String)\n            self.messages?.append(model)\n            self.tableView.reloadData()\n        })\n\n        // \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u521d\u671f\u5316\n        self.socket.on(\"message init\", callback:{(data:[AnyObject]!)  in\n            let arr = data[0] as NSArray\n            for var i = 0; i < arr.count; i++ {\n                let dic = arr[i] as NSDictionary\n                let model = MessageModel(_name: dic[\"name\"] as String, _message: dic[\"message\"] as String)\n                self.messages?.append(model)\n            }\n            self.tableView.reloadData()\n            // tableview\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u3092\u4e00\u756a\u4e0b\u307e\u3067\u52d5\u304b\u3059\n            UIView.animateWithDuration(0.2, delay: 3.0, options: nil, animations: {}, completion: {(finished) -> Void in\n                let indexPath = NSIndexPath(forRow:(self.tableView.numberOfRowsInSection(0) as Int - 1), inSection: self.tableView.numberOfSections()-1 as Int)\n                self.tableView.scrollToRowAtIndexPath(indexPath, atScrollPosition: UITableViewScrollPosition.Top, animated: true)\n\n            })\n        })\n    })\n\n    // SettingsViewController\u3092\u53d6\u5f97\n    self.settingsViewController = self.childViewControllers[0] as SettingsViewController\n    //SettingsViewController\u3092\u9589\u3058\u305f\u6642\n    self.settingsViewController.closeMe = {\n        self.moveSettingsView()\n        self.settingsViewIsDisplayed = false\n    }\n\n    // tableView\u306e\u9ad8\u3055\u3092\u53ef\u5909\u306b\u3059\u308b\n    self.tableView.estimatedRowHeight = 49\n    self.tableView.rowHeight = UITableViewAutomaticDimension\n\n    // textview\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u306e\u30d0\u30b0\u4fee\u6b63\n    textView.scrollEnabled = false;\n    textView.scrollEnabled = true;\n\n    // \u88c5\u98fe\u5468\u308a\n    textView.layer.borderColor = UIColor(white: 0.5, alpha: 0.2).CGColor\n    textView.layer.borderWidth = 0.5\n    var inputViewLayer = CALayer()\n    inputViewLayer.frame = CGRect(x: 0, y: 0, width: inputAreaView.frame.width, height: 1)\n    inputViewLayer.backgroundColor = UIColor(white: 0.5, alpha: 0.3).CGColor\n    inputAreaView.layer.addSublayer(inputViewLayer)\n    sendButton.layer.cornerRadius = 2.0\n\n    // \u30a4\u30d9\u30f3\u30c8\u7cfb\n    sendButton.addTarget(self, action: \"sended:\", forControlEvents: UIControlEvents.TouchUpInside)\n    settingsButton.addTarget(self, action: \"settingsPressed:\", forControlEvents: UIControlEvents.TouchUpInside)\n    NSNotificationCenter.defaultCenter().addObserver(self, selector: Selector(\"keyboardWillAppear:\"), name: UIKeyboardWillShowNotification, object: nil)\n    NSNotificationCenter.defaultCenter().addObserver(self, selector: Selector(\"keyboardWillHide:\"), name: UIKeyboardWillHideNotification, object: nil)\n}\n\noverride func viewDidAppear(animated: Bool) {\n}\n\noverride func didReceiveMemoryWarning() {\n    super.didReceiveMemoryWarning()\n    // Dispose of any resources that can be recreated.\n}\n\n// MARK: - TableViewDelegate\nfunc tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -> Int  {\n    return messages!.count\n}\n\nfunc tableView(tableView: UITableView?, cellForRowAtIndexPath indexPath:NSIndexPath!) -> UITableViewCell! {\n    var cell: MessageCell = self.tableView.dequeueReusableCellWithIdentifier(\"MessageCell\", forIndexPath: indexPath) as MessageCell\n    let message = messages![indexPath.row]\n    cell.setContent(message)\n    return cell\n}\n\nfunc tableView(tableView: UITableView?, didSelectRowAtIndexPath indexPath:NSIndexPath!) {\n\n}\n\n// MARK: - textFieldDelegate\nfunc textViewDidBeginEditing(textView: UITextView) {\n}\n\nfunc textViewDidEndEditing(textView: UITextView) {\n    textView.resignFirstResponder()\n}\n\nfunc textViewShouldEndEditing(textView: UITextView) -> Bool {\n    textView.resignFirstResponder()\n    return true\n}\n\nfunc textViewDidChange(textView: UITextView) {\n    // autolayout\u306econstraint\u3092\u5909\u66f4\u3057\u3066textview\u306e\u9ad8\u3055\u3092\u53ef\u5909\u306b\u3059\u308b\n    let maxHeight:CGFloat = 60.0\n    let size = textView.sizeThatFits(textView.frame.size)\n    if (textView.frame.height < maxHeight) {\n        self.textViewConstraintHeight.constant = size.height\n    }\n}\n\nfunc textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {\n    return true\n}\n\n// MARK: - keyboardNotification\nfunc keyboardWillAppear(notification: NSNotification) {\n    // settingsView\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6642(TexiField)\n    if (settingsViewIsDisplayed) {\n        return\n    }\n\n    // \u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u9ad8\u3055\u3060\u3051\u5168\u4f53\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u4e0e\u3048\u308b\n    var rect:NSValue\n    var duration: NSTimeInterval\n    if let userInfo = notification.userInfo as? Dictionary<String,AnyObject> {\n        rect = userInfo[\"UIKeyboardFrameEndUserInfoKey\"] as NSValue\n        duration = userInfo[\"UIKeyboardAnimationDurationUserInfoKey\"] as NSTimeInterval\n\n        let transform = CGAffineTransformMakeTranslation(0, -rect.CGRectValue().size.height)\n\n        UIView.animateWithDuration(duration, delay: 0.0, options: UIViewAnimationOptions.CurveEaseOut,\n            animations: {() -> Void in\n                self.view.transform = transform\n            }, completion: {(finished) in\n        })\n    }\n}\n\nfunc keyboardWillHide(notification: NSNotification) {\n    // settingsView\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6642(TexiField)\n    if (settingsViewIsDisplayed) {\n        return\n    }\n\n    // \u4e0e\u3048\u305f\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u53d6\u308a\u9664\u304f\n    var duration: NSTimeInterval\n    if let userInfo = notification.userInfo as? Dictionary<String,AnyObject> {\n        duration = userInfo[\"UIKeyboardAnimationDurationUserInfoKey\"] as NSTimeInterval\n\n        UIView.animateWithDuration(duration, delay: 0.0, options: UIViewAnimationOptions.CurveEaseOut,\n            animations: {() -> Void in\n                self.view.transform = CGAffineTransformIdentity\n            }, completion: {(finished) in\n        })\n    }\n}\n\n// MARK: - Button Event\nfunc sended(sender: UIButton!) {\n    if !MyUtils().stringHasContent(textView.text) {\n        return\n    }\n    let username = (MyUtils().stringHasContent(MyUtils().username)) ? MyUtils().username! : \"Mr. Unknown\"\n\n    // \u30bd\u30b1\u30c3\u30c8\u306bemit\u3059\u308b\n    let model = NSDictionary(dictionary: [\"name\": username, \"message\": textView.text, \"date\": convertDateToStr(NSDate())]);\n    socket.emit(\"message send\", args:[model] as SIOParameterArray)\n\n    // texiview\u306e\u9ad8\u3055\u3092\u5143\u306b\u623b\u3059\n    textView.text = nil\n    let size = textView.sizeThatFits(textView.frame.size)\n    self.textViewConstraintHeight.constant = size.height\n\n    textView.resignFirstResponder()\n}\n\nprivate func convertDateToStr(date:NSDate) -> String {\n    let dateFormatter = NSDateFormatter()\n    dateFormatter.locale = NSLocale(localeIdentifier: \"en_US\")\n    dateFormatter.dateFormat = \"yyyy/MM/dd HH:mm:ss\"\n    return dateFormatter.stringFromDate(date)\n}\n\nfunc settingsPressed(sender: UIButton!) {\n    settingsViewIsDisplayed = true\n    moveSettingsView()\n    self.settingsViewController.textField.becomeFirstResponder()\n}\n\nfunc moveSettingsView() {\n    var offset:CGFloat = 0.0\n\n    if (self.settingsViewConstraintMarginTop.constant == 0) {\n        offset = self.settingsView.frame.height\n    } else {\n        offset = 0.0\n    }\n\n    self.view.removeConstraint(self.settingsViewConstraintMarginTop)\n\n    self.settingsViewConstraintMarginTop = NSLayoutConstraint(\n        item: self.view!, attribute: NSLayoutAttribute.Top, relatedBy: NSLayoutRelation.Equal,\n        toItem: self.settingsView, attribute: NSLayoutAttribute.Top,\n        multiplier: 1, constant: offset)\n\n    self.view.addConstraint(self.settingsViewConstraintMarginTop)\n\n    UIView.animateWithDuration(0.24,\n        delay: 0.0,\n        options: UIViewAnimationOptions.CurveEaseIn,\n        animations: {() -> Void in\n            self.view.layoutIfNeeded()\n        },\n        completion: nil)\n}\n\n\n}\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9(\u30d0\u30c3\u30af\u30a8\u30f3\u30c9: Node.js)\n\napp.js\n#!/usr/bin/env node\nvar express = require('express'); \nvar debug = require('debug')('socket-example');\nvar app = express();\nvar mongoose = require('mongoose');\n\napp.set('port', process.env.PORT || 3000);\n\n//mongoose\nvar Schema = mongoose.Schema;\nvar MessagesSchema = new Schema({\n    name: String,\n    message: String,\n    date: Date\n});\nmongoose.model('messages', MessagesSchema);\nmongoose.connect('mongodb://localhost/onechat');\nvar Messages = mongoose.model('messages');\n\n//socket.io\nvar http = require('http').Server(app);\nvar io = require('socket.io')(http);\nio.on('connection', function(socket) {\n\n    socket.on('disconnect', function() {\n        console.log('user disconnected');\n    });\n\n    socket.on('message init', function(data) {\n        console.log('message init');\n\n        Messages.find({}).limit(100).exec(function(err, data){\n            socket.emit('message init', data);\n        });\n    });\n\n    socket.on('message send', function(data) {\n        console.log('message send');\n\n        data.date = Date.parse(data.date);\n        var message = new Messages(data);\n        message.save(function(err, message) {\n            if (err) return console.error(err);\n            io.emit('message send', message);\n        });\n    });\n});\n\nhttp.listen(app.get('port'), function() {\n    console.log('listening on *:' + http.address().port);\n});\n\n\n![move](https://raw.githubusercontent.com/ytakzk/swift-socket-example/master/gif/example.gif)\n\nSwift\u3067\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3059\u308b\u30c1\u30e3\u30c3\u30c8\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\niOS\u306b\u306fSIOSocket\u3092\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306b\u306fSocket.io\u3092\u4f7f\u7528\u3002\n\n## Github\nhttps://github.com/ytakzk/swift-socket-example\n\n## \u74b0\u5883\n#### iOS\n**Swift**\n**SIOSocket** https://github.com/MegaBits/SIOSocket\n\n#### \u30d0\u30c3\u30af\u30a8\u30f3\u30c9\n**Node.js**\n**Express** https://github.com/strongloop/express/stargazers\n**socket.io** https://github.com/Automattic/socket.io\n**mongodb** http://www.mongodb.org/\n**mongoose** https://github.com/LearnBoost/mongoose\n\n## \u3042\u308c\u3053\u308c\niOS\u3067\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306fSocketRocket\u306a\u3069\u8272\u3005\u3042\u308b\u304cSIOSocket\u304cSwift\u3068\u76f8\u6027\u826f\u3055\u305d\u3046\u3002\n\n\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u306e\u90e8\u5206\u4ee5\u5916\u306b\u3082\u3001\n\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u51fa\u3059\u3068TexiView\u304c\u96a0\u308c\u306a\u3044\u3088\u3046TableView\u304c\u4e0a\u90e8\u306b\u305a\u308c\u305f\u308a\nTextView\u304c\u6539\u884c\u3067\u53ef\u5909\u306b\u306a\u3063\u305f\u308a\nAutolayout\u3067\u753b\u9762\u5916\u306b\u96a0\u3057\u305fcontainerView\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u51fa\u3057\u5165\u308c\u3059\u308b\u306a\u3069\n\u4f55\u304b\u3057\u3089\u5f79\u306b\u7acb\u3064\u90e8\u5206\u304c\u3042\u308b\u3068\u601d\u3046\u3002\n\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u304d\u308c\u3044\u306b\u66f8\u304d\u305f\u304b\u3063\u305f\u3051\u3069\u4eca\u56de\u306f\u9762\u5012\u306a\u306e\u3067\u5272\u611b\u3002\nExpress\u3082\u4f7f\u3046\u5fc5\u8981\u306a\u304b\u3063\u305f\u3051\u3069\u4eca\u5f8c\u306e\u62e1\u5f35\u3092\u8003\u3048\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9(iOS)\n\n```swift:ViewController\nimport UIKit\n\nclass ViewController: UIViewController, UITextViewDelegate {\n@IBOutlet weak var tableView: UITableView!\n@IBOutlet weak var inputAreaView: UIView!\n@IBOutlet weak var textView: UITextView!\n@IBOutlet weak var textViewConstraintHeight: NSLayoutConstraint!\n@IBOutlet weak var sendButton: UIButton!\n@IBOutlet weak var settingsButton: UIButton!\n\n@IBOutlet weak var settingsView: UIView!\n@IBOutlet weak var settingsViewConstraintMarginTop: NSLayoutConstraint!\nvar settingsViewController:SettingsViewController! = nil\nvar settingsViewIsDisplayed = false\n\nvar messages: Array<MessageModel>?\nvar socket:SIOSocket! = nil\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    // Do any additional setup after loading the view, typically from a nib.\n    \n    messages = []\n    \n    // \u3053\u3053\u304c\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3059\u308b\u3068\u3053\u308d\n    SIOSocket.socketWithHost(\"ws://localhost:3000\", response:  { (_socket: SIOSocket!) in\n        self.socket = _socket\n        \n        self.socket.onConnect = {() in\n            println(\"connected\")\n            self.socket.emit(\"message init\", args: [])\n        }\n        \n        self.socket.onReconnect = { (attempts: Int) in\n            \n        }\n        \n        self.socket.onDisconnect = {() in\n            println(\"disconnected\")\n        }\n        \n        // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\n        self.socket.on(\"message send\", callback:{(data:[AnyObject]!)  in\n            let dic = data[0] as NSDictionary\n            let model = MessageModel(_name: dic[\"name\"] as String, _message: dic[\"message\"] as String)\n            self.messages?.append(model)\n            self.tableView.reloadData()\n        })\n        \n        // \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u521d\u671f\u5316\n        self.socket.on(\"message init\", callback:{(data:[AnyObject]!)  in\n            let arr = data[0] as NSArray\n            for var i = 0; i < arr.count; i++ {\n                let dic = arr[i] as NSDictionary\n                let model = MessageModel(_name: dic[\"name\"] as String, _message: dic[\"message\"] as String)\n                self.messages?.append(model)\n            }\n            self.tableView.reloadData()\n            // tableview\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u3092\u4e00\u756a\u4e0b\u307e\u3067\u52d5\u304b\u3059\n            UIView.animateWithDuration(0.2, delay: 3.0, options: nil, animations: {}, completion: {(finished) -> Void in\n                let indexPath = NSIndexPath(forRow:(self.tableView.numberOfRowsInSection(0) as Int - 1), inSection: self.tableView.numberOfSections()-1 as Int)\n                self.tableView.scrollToRowAtIndexPath(indexPath, atScrollPosition: UITableViewScrollPosition.Top, animated: true)\n                \n            })\n        })\n    })\n    \n    // SettingsViewController\u3092\u53d6\u5f97\n    self.settingsViewController = self.childViewControllers[0] as SettingsViewController\n    //SettingsViewController\u3092\u9589\u3058\u305f\u6642\n    self.settingsViewController.closeMe = {\n        self.moveSettingsView()\n        self.settingsViewIsDisplayed = false\n    }\n    \n    // tableView\u306e\u9ad8\u3055\u3092\u53ef\u5909\u306b\u3059\u308b\n    self.tableView.estimatedRowHeight = 49\n    self.tableView.rowHeight = UITableViewAutomaticDimension\n    \n    // textview\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u306e\u30d0\u30b0\u4fee\u6b63\n    textView.scrollEnabled = false;\n    textView.scrollEnabled = true;\n    \n    // \u88c5\u98fe\u5468\u308a\n    textView.layer.borderColor = UIColor(white: 0.5, alpha: 0.2).CGColor\n    textView.layer.borderWidth = 0.5\n    var inputViewLayer = CALayer()\n    inputViewLayer.frame = CGRect(x: 0, y: 0, width: inputAreaView.frame.width, height: 1)\n    inputViewLayer.backgroundColor = UIColor(white: 0.5, alpha: 0.3).CGColor\n    inputAreaView.layer.addSublayer(inputViewLayer)\n    sendButton.layer.cornerRadius = 2.0\n    \n    // \u30a4\u30d9\u30f3\u30c8\u7cfb\n    sendButton.addTarget(self, action: \"sended:\", forControlEvents: UIControlEvents.TouchUpInside)\n    settingsButton.addTarget(self, action: \"settingsPressed:\", forControlEvents: UIControlEvents.TouchUpInside)\n    NSNotificationCenter.defaultCenter().addObserver(self, selector: Selector(\"keyboardWillAppear:\"), name: UIKeyboardWillShowNotification, object: nil)\n    NSNotificationCenter.defaultCenter().addObserver(self, selector: Selector(\"keyboardWillHide:\"), name: UIKeyboardWillHideNotification, object: nil)\n}\n\noverride func viewDidAppear(animated: Bool) {\n}\n\noverride func didReceiveMemoryWarning() {\n    super.didReceiveMemoryWarning()\n    // Dispose of any resources that can be recreated.\n}\n\n// MARK: - TableViewDelegate\nfunc tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -> Int  {\n    return messages!.count\n}\n\nfunc tableView(tableView: UITableView?, cellForRowAtIndexPath indexPath:NSIndexPath!) -> UITableViewCell! {\n    var cell: MessageCell = self.tableView.dequeueReusableCellWithIdentifier(\"MessageCell\", forIndexPath: indexPath) as MessageCell\n    let message = messages![indexPath.row]\n    cell.setContent(message)\n    return cell\n}\n\nfunc tableView(tableView: UITableView?, didSelectRowAtIndexPath indexPath:NSIndexPath!) {\n    \n}\n\n// MARK: - textFieldDelegate\nfunc textViewDidBeginEditing(textView: UITextView) {\n}\n\nfunc textViewDidEndEditing(textView: UITextView) {\n    textView.resignFirstResponder()\n}\n\nfunc textViewShouldEndEditing(textView: UITextView) -> Bool {\n    textView.resignFirstResponder()\n    return true\n}\n\nfunc textViewDidChange(textView: UITextView) {\n    // autolayout\u306econstraint\u3092\u5909\u66f4\u3057\u3066textview\u306e\u9ad8\u3055\u3092\u53ef\u5909\u306b\u3059\u308b\n    let maxHeight:CGFloat = 60.0\n    let size = textView.sizeThatFits(textView.frame.size)\n    if (textView.frame.height < maxHeight) {\n        self.textViewConstraintHeight.constant = size.height\n    }\n}\n\nfunc textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {\n    return true\n}\n\n// MARK: - keyboardNotification\nfunc keyboardWillAppear(notification: NSNotification) {\n    // settingsView\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6642(TexiField)\n    if (settingsViewIsDisplayed) {\n        return\n    }\n\n    // \u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u9ad8\u3055\u3060\u3051\u5168\u4f53\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u4e0e\u3048\u308b\n    var rect:NSValue\n    var duration: NSTimeInterval\n    if let userInfo = notification.userInfo as? Dictionary<String,AnyObject> {\n        rect = userInfo[\"UIKeyboardFrameEndUserInfoKey\"] as NSValue\n        duration = userInfo[\"UIKeyboardAnimationDurationUserInfoKey\"] as NSTimeInterval\n        \n        let transform = CGAffineTransformMakeTranslation(0, -rect.CGRectValue().size.height)\n        \n        UIView.animateWithDuration(duration, delay: 0.0, options: UIViewAnimationOptions.CurveEaseOut,\n            animations: {() -> Void in\n                self.view.transform = transform\n            }, completion: {(finished) in\n        })\n    }\n}\n\nfunc keyboardWillHide(notification: NSNotification) {\n    // settingsView\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6642(TexiField)\n    if (settingsViewIsDisplayed) {\n        return\n    }\n\n    // \u4e0e\u3048\u305f\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u53d6\u308a\u9664\u304f\n    var duration: NSTimeInterval\n    if let userInfo = notification.userInfo as? Dictionary<String,AnyObject> {\n        duration = userInfo[\"UIKeyboardAnimationDurationUserInfoKey\"] as NSTimeInterval\n        \n        UIView.animateWithDuration(duration, delay: 0.0, options: UIViewAnimationOptions.CurveEaseOut,\n            animations: {() -> Void in\n                self.view.transform = CGAffineTransformIdentity\n            }, completion: {(finished) in\n        })\n    }\n}\n\n// MARK: - Button Event\nfunc sended(sender: UIButton!) {\n    if !MyUtils().stringHasContent(textView.text) {\n        return\n    }\n    let username = (MyUtils().stringHasContent(MyUtils().username)) ? MyUtils().username! : \"Mr. Unknown\"\n    \n    // \u30bd\u30b1\u30c3\u30c8\u306bemit\u3059\u308b\n    let model = NSDictionary(dictionary: [\"name\": username, \"message\": textView.text, \"date\": convertDateToStr(NSDate())]);\n    socket.emit(\"message send\", args:[model] as SIOParameterArray)\n    \n    // texiview\u306e\u9ad8\u3055\u3092\u5143\u306b\u623b\u3059\n    textView.text = nil\n    let size = textView.sizeThatFits(textView.frame.size)\n    self.textViewConstraintHeight.constant = size.height\n    \n    textView.resignFirstResponder()\n}\n\nprivate func convertDateToStr(date:NSDate) -> String {\n    let dateFormatter = NSDateFormatter()\n    dateFormatter.locale = NSLocale(localeIdentifier: \"en_US\")\n    dateFormatter.dateFormat = \"yyyy/MM/dd HH:mm:ss\"\n    return dateFormatter.stringFromDate(date)\n}\n\nfunc settingsPressed(sender: UIButton!) {\n    settingsViewIsDisplayed = true\n    moveSettingsView()\n    self.settingsViewController.textField.becomeFirstResponder()\n}\n\nfunc moveSettingsView() {\n    var offset:CGFloat = 0.0\n\n    if (self.settingsViewConstraintMarginTop.constant == 0) {\n        offset = self.settingsView.frame.height\n    } else {\n        offset = 0.0\n    }\n    \n    self.view.removeConstraint(self.settingsViewConstraintMarginTop)\n    \n    self.settingsViewConstraintMarginTop = NSLayoutConstraint(\n        item: self.view!, attribute: NSLayoutAttribute.Top, relatedBy: NSLayoutRelation.Equal,\n        toItem: self.settingsView, attribute: NSLayoutAttribute.Top,\n        multiplier: 1, constant: offset)\n    \n    self.view.addConstraint(self.settingsViewConstraintMarginTop)\n    \n    UIView.animateWithDuration(0.24,\n        delay: 0.0,\n        options: UIViewAnimationOptions.CurveEaseIn,\n        animations: {() -> Void in\n            self.view.layoutIfNeeded()\n        },\n        completion: nil)\n}\n\n\n}\n```\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9(\u30d0\u30c3\u30af\u30a8\u30f3\u30c9: Node.js)\n\n```js:app.js\n#!/usr/bin/env node\nvar express = require('express'); \nvar debug = require('debug')('socket-example');\nvar app = express();\nvar mongoose = require('mongoose');\n\napp.set('port', process.env.PORT || 3000);\n\n//mongoose\nvar Schema = mongoose.Schema;\nvar MessagesSchema = new Schema({\n\tname: String,\n\tmessage: String,\n\tdate: Date\n});\nmongoose.model('messages', MessagesSchema);\nmongoose.connect('mongodb://localhost/onechat');\nvar Messages = mongoose.model('messages');\n\n//socket.io\nvar http = require('http').Server(app);\nvar io = require('socket.io')(http);\nio.on('connection', function(socket) {\n\n\tsocket.on('disconnect', function() {\n\t\tconsole.log('user disconnected');\n\t});\n\n\tsocket.on('message init', function(data) {\n\t\tconsole.log('message init');\n\n\t\tMessages.find({}).limit(100).exec(function(err, data){\n\t\t\tsocket.emit('message init', data);\n    \t});\n\t});\n\n\tsocket.on('message send', function(data) {\n\t\tconsole.log('message send');\n\n\t\tdata.date = Date.parse(data.date);\n\t\tvar message = new Messages(data);\n\t\tmessage.save(function(err, message) {\n\t\t\tif (err) return console.error(err);\n\t\t\tio.emit('message send', message);\n\t\t});\n\t});\n});\n\nhttp.listen(app.get('port'), function() {\n\tconsole.log('listening on *:' + http.address().port);\n});\n```\n", "tags": ["Swift", "Objective-C", "Node.js", "Socket.io", "iOS"]}