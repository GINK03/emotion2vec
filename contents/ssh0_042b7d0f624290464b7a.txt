{"context": " More than 1 year has passed since last update.\u4eca\u56de\u306f\uff0c\u6570\u5024\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3066\uff0c\u30b3\u30f3\u30a6\u30a7\u30a4\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0(Conway's Game of Life)\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\uff0e\n\u606f\u629c\u304d\u306e\u3064\u3082\u308a\u3067\u59cb\u3081\u305f\u3082\u306e\u306e\uff0c\u4f5c\u3063\u3066\u307f\u308b\u3068\u610f\u5916\u3068\u30cf\u30de\u308b\u3068\u3053\u308d\u304c\u3042\u3063\u3066\uff0c\u304b\u306a\u308a\u8a66\u884c\u932f\u8aa4\u3057\u307e\u3057\u305f\uff0e\u3067\u3059\u306e\u3067\uff0c\u5b8c\u6210\u54c1\u3082\u3088\u3046\u3084\u304f\u52d5\u304f\u5f62\u306b\u306a\u3063\u305f\u7a0b\u5ea6\u306e\u51fa\u6765\u3067\u3059\uff0e\u4ed5\u69d8\u3092\u7406\u89e3\u3057\u3066\u3044\u308c\u3070\uff0c\u3082\u3063\u3068\u3046\u307e\u3044\u3082\u306e\u304c\u4f5c\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\u305d\u3053\u307e\u3067\u8aad\u307f\u8fbc\u3080\u6c17\u306b\u306f\u306a\u308c\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\uff0e\uff0e\n\n\n\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3068\u306f\uff1f\n\u307e\u305a\uff0c\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306b\u3064\u3044\u3066\u8efd\u304f\u8aac\u660e\u3092\uff0e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3068\u306f\uff0c\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306e\u4e00\u7a2e\u3067\uff0c\u683c\u5b50\u70b9\u304c\u300c\u751f\u304d\u3066\u3044\u308b\u300d\u300c\u6b7b\u3093\u3067\u3044\u308b\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u3082\u3061\uff0c\u6642\u9593\uff08\u4e16\u4ee3\uff09\u304c\uff11\u9032\u3080\u3068\uff0c\u5468\u56f2\u306e\u72b6\u6cc1\u306b\u3088\u3063\u3066\uff0c\u4e0e\u3048\u3089\u308c\u305f\u898f\u5247\u306b\u5f93\u3044\u5185\u90e8\u306e\u72b6\u614b\u3092\u5909\u5316\u3055\u305b\u3066\u3044\u304f\u3082\u306e\u3067\u3059\uff0e\u4ee3\u8868\u7684\u306a\u3082\u306e\u3068\u3057\u3066\u306f\uff0c\u6b63\u65b9\u683c\u5b50\u4e0a\u3067\uff0c\u5468\u56f2\uff18\u30de\u30b9\u306e\u70b9\u306b\u95a2\u3057\uff0c\uff12\u500b\u3042\u308b\u3044\u306f\uff13\u500b\u751f\u304d\u3066\u3044\u308c\u3070\u751f\u304d\u6b8b\u308a\uff0c\u5468\u56f2\u306b\u751f\u5b58\u683c\u5b50\u70b9\u304c\uff13\u500b\u3042\u308b\u3068\u304d\u306f\u65b0\u305f\u306b\u8a95\u751f\u3059\u308b\uff0c\u3068\u3044\u3046\u30eb\u30fc\u30eb23/3\u306a\u3069\u304c\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306f\u30c1\u30e5\u30fc\u30ea\u30f3\u30b0\u5b8c\u5168\u306a\u306e\u3067\uff0c\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u5185\u90e8\u3067\uff0c\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u518d\u73fe\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u8a73\u3057\u304f\u306f\n\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 - Wikipedia:\n\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u4e16\u754c\uff11\u3010\u8907\u96d1\u7cfb\u3011 - \u30cb\u30b3\u30cb\u30b3\u52d5\u753b:GINZA:\n\u306a\u3069\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\u52d5\u753b\u306f\u7279\u306b\u30aa\u30b9\u30b9\u30e1\u3067\u3059\uff0e\n\n\u7aef\u672b\u4e0a\u3067\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\nTkinter\u3092\u4f7f\u3063\u3066\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u3060\u3051\u308c\u3069\uff0c\u6848\u5916\u96e3\u3057\u305d\u3046\u3060\u3063\u305f\u306e\u3067\uff0c\u307e\u305a\u306f\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30eb\u30fc\u30eb\u306e\u90e8\u5206\u3092\u5148\u306b\u4f5c\u308a\uff0c\u7aef\u672b\u4e0a\u3067\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\uff0e\n\u305d\u308c\u304c\u6b21\u3067\u3059\uff0e\n\nlifegame_console.py\n#! /usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# written by ssh0, June 2014.\n\nimport numpy as np\nimport sys\nimport time\nimport os\n\nclass LifeGame:\n\n    def __init__(self, L=50, rule=\"2 3/3\"):\n        self.L = L # lattice size\n        p = 0.2\n        self.survive = [int(i) for i in rule.split(\"/\")[0].split()]\n        self.birth = [int(i) for i in rule.split(\"/\")[1].split()]\n        lattice = np.random.random([self.L+2, self.L+2])\n        self.lattice = lattice<p\n        self.lattice[0,:] = self.lattice[self.L+1,:] = False\n        self.lattice[:,0] = self.lattice[:,self.L+1] = False\n\n    def canvas_update(self):\n        os.system(\"clear\")\n        print \"\\n\"\n        l = \"\"\n        for y in range(1,self.L+1):\n            for x in range(1,self.L+1):\n                if self.lattice[x,y]:\n                    l += u\" \u25a0\"\n                else:\n                    l += u\" \u25a1\"\n            l += \"\\n\"\n        print l\n        print \"\\n\"\n        time.sleep(0.1)\n\n    def progress(self):\n        L = self.L\n        Tmax = 2000\n        t = 0\n        while t < Tmax:\n            try:\n                self.canvas_update()\n                nextsites = []\n\n                # \u5468\u671f\u5883\u754c\u6761\u4ef6\n                self.lattice[0,0] = self.lattice[self.L,self.L]\n                self.lattice[0,self.L+1] = self.lattice[self.L,1]\n                self.lattice[self.L+1,0] = self.lattice[1,self.L]\n                self.lattice[self.L+1,self.L+1] = self.lattice[1,1]\n                for m in range(1, self.L+1):\n                    self.lattice[m, self.L+1] = self.lattice[m, 1]\n                    self.lattice[m, 0] = self.lattice[m, self.L]\n                    self.lattice[0, m] = self.lattice[self.L, m]\n                    self.lattice[self.L+1, m] = self.lattice[1, m]\n\n                # \u96a3\u63a5\u683c\u5b50\u70b9\u306e\u5224\u5b9a\n                for m in range(1,self.L+1):\n                    for n in range(1,self.L+1):\n\n                        if self.lattice[m,n]:\n                            neighber = np.sum(self.lattice[m-1:m+2, n-1:n+2])-1\n                            if neighber in self.survive:\n                                nextsites.append((m,n))\n                        else:\n                            neighber = np.sum(self.lattice[m-1:m+2, n-1:n+2])\n                            if neighber in self.birth:\n                                nextsites.append((m,n))\n\n                # lattice\u306e\u66f4\u65b0\n                self.lattice[:] = False\n                for nextsite in nextsites:\n                    self.lattice[nextsite] = True\n\n                t += 1\n\n            except KeyboardInterrupt:\n                print \"stopped.\"\n                break\n\nif __name__ == '__main__':\n\n    lg = LifeGame()\n    lg.progress()\n\n\n\u521d\u671f\u6761\u4ef6\u306f\uff0c\u4e71\u6570\u3092\u5272\u308a\u5f53\u3066\u305f\u884c\u5217\u3067\u95be\u5024\u4ee5\u4e0b\u306e\u70b9\u3092\u751f\u5b58\u3068\u3057\u307e\u3057\u305f\uff0e\u8868\u793a\u306f\uff0c\u307e\u305a\u7aef\u672b\u3092clear\u3057\u3066\uff0c\u751f\u5b58\u30b5\u30a4\u30c8\u306f\u25a0\uff0c\u305d\u3046\u3067\u306a\u3044\u30b5\u30a4\u30c8\u306f\u25a1\u3068\u3057\u3066print\u3059\u308b\u3053\u3068\u3067\u306a\u3093\u3068\u304b\u3057\u307e\u3057\u305f\uff0e\u9045\u5ef6\u6642\u9593\u30920.1\u3088\u308a\u5c0f\u3055\u304f\u3059\u308b\u3068\uff0c\u50d5\u306e\u74b0\u5883\u3067\u306f\u30c1\u30e9\u30c4\u30ad\u304c\u3072\u3069\u304f\u306a\u3063\u305f\u306e\u3067\uff0c\u3053\u308c\u4ee5\u4e0a\u901f\u304f\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3055\u305d\u3046\u3067\u3059\uff0e\n\u52d5\u753b\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3069\u3046\u305e\n\nPython\u3067\u7c21\u5358\u306aLifeGame\u3092\u4f5c\u3063\u3066\u307f\u305f(numpy)\n\nTkinter\u3092\u4f7f\u3063\u3066\u8868\u793a\n\u7d9a\u3044\u3066\uff0cTkinter\u306eCanvas\u3092\u7528\u3044\u3066\u4f5c\u3063\u305f\u3082\u306e\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\u3053\u308c\u3092\u4f5c\u3063\u3066\u3066\u4e00\u756a\u8a70\u307e\u3063\u305f\u306e\u306f\uff0c\u683c\u5b50\u4e00\u3064\u4e00\u3064\u306e\u300c\u751f\u300d\u300c\u6b7b\u300d\u3092\u30af\u30ea\u30c3\u30af\u3067\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3057\u305f\uff0ePygame\u306a\u3093\u304b\u3092\u4f7f\u3046\u3068\u3053\u3053\u3089\u3078\u3093\u306f\u7c21\u5358\u306b\u306a\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3057\uff0c\u8abf\u3079\u305f\u9650\u308a\u3053\u3061\u3089\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u3057\u304b\u898b\u304b\u3051\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u3067\u3059\u304c\u57fa\u672c\u306f\u4e00\u7dd2\u3060\u3068\u601d\u3046\u306e\u3067\uff0c\u3053\u308c\u304b\u3089\u3082\u4f7f\u3046Tkinter\u305d\u306e\u3082\u306e\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff0e\u4ee5\u4e0b\u306b\u3059\u3079\u3066\u8f09\u305b\u307e\u3059\uff0e\n\nlifegame.py\n#! /usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# written by ssh0, September 2014.\n\nfrom tkinter import *\nimport numpy as np\nimport sys\n# import time\n\n\nclass LifeGame:\n\n    def __init__(self, L=30, rule=\"2 3/3\", p=None, pattern=None):\n        self.L = L  # lattice size\n        self.survive = [int(i) for i in rule.split(\"/\")[0].split()]\n        self.birth = [int(i) for i in rule.split(\"/\")[1].split()]\n\n        if p:\n            lattice = np.random.random([self.L + 2, self.L + 2])\n            self.lattice = lattice < p\n            self.lattice[0, :] = self.lattice[self.L+1, :] = False\n            self.lattice[:, 0] = self.lattice[:, self.L + 1] = False\n        else:\n            self.lattice = np.zeros([self.L + 2, self.L + 2], dtype=bool)\n            if pattern:\n                for x, y in pattern:\n                    self.lattice[x, y] = True\n\n    def progress(self, canvas_update, update):\n        Tmax = 2000\n        t = 0\n        self.loop = True\n        while self.loop:\n            try:\n                past_lattice = self.lattice.copy()\n\n                nextsites = []\n\n                # \u5468\u671f\u5883\u754c\u6761\u4ef6\n                self.lattice[0, 0] = self.lattice[self.L, self.L]\n                self.lattice[0, self.L + 1] = self.lattice[self.L, 1]\n                self.lattice[self.L + 1, 0] = self.lattice[1, self.L]\n                self.lattice[self.L + 1, self.L + 1] = self.lattice[1, 1]\n                for m in range(1, self.L+1):\n                    self.lattice[m, self.L+1] = self.lattice[m, 1]\n                    self.lattice[m, 0] = self.lattice[m, self.L]\n                    self.lattice[0, m] = self.lattice[self.L, m]\n                    self.lattice[self.L+1, m] = self.lattice[1, m]\n\n                # \u96a3\u63a5\u683c\u5b50\u70b9\u306e\u5224\u5b9a\n                for m in range(1, self.L + 1):\n                    for n in range(1, self.L + 1):\n\n                        if self.lattice[m, n]:\n                            neighber = np.sum(self.lattice[m-1:m+2, n-1:n+2])-1\n                            if neighber in self.survive:\n                                nextsites.append((m, n))\n                        else:\n                            neighber = np.sum(self.lattice[m-1:m+2, n-1:n+2])\n                            if neighber in self.birth:\n                                nextsites.append((m, n))\n\n                # lattice\u306e\u66f4\u65b0\n                self.lattice[:] = False\n                for nextsite in nextsites:\n                    self.lattice[nextsite] = True\n\n                # \u63cf\u753b\u306e\u66f4\u65b0\n                changed_rect = np.where(self.lattice != past_lattice)\n                for x, y in zip(changed_rect[0], changed_rect[1]):\n                    if self.lattice[x, y]:\n                        color = \"green\"\n                    else:\n                        color = \"black\"\n                    canvas_update(x, y, color)\n                update()\n               # time.sleep(0.1)\n\n                t += 1\n                if t > Tmax:\n                    self.loop = False\n\n            except KeyboardInterrupt:\n                print(\"stopped.\")\n                break\n\n\nclass Draw_canvas:\n\n    def __init__(self, lg, L):\n\n        self.lg = lg\n        self.L = L\n        default_size = 640  # default size of canvas\n        self.r = int(default_size / (2 * self.L))\n        self.fig_size = 2 * self.r * self.L\n        self.margin = 10\n        self.sub = Toplevel()\n        self.sub.title(\"Life Game\")\n        self.canvas = Canvas(self.sub, width=self.fig_size + 2 * self.margin,\n                             height=self.fig_size + 2 * self.margin)\n        self.c = self.canvas.create_rectangle\n        self.update = self.canvas.update\n        self.rects = dict()\n        for y in range(1, self.L + 1):\n            for x in range(1, self.L + 1):\n                if self.lg.lattice[x, y]:\n                    live = True\n                else:\n                    live = False\n                tag = \"%d %d\" % (x, y)\n                self.rects[tag] = Rect(x, y, live, tag, self)\n        self.canvas.pack()\n\n    def canvas_update(self, x, y, color):\n        v = self.rects[\"%d %d\" % (x, y)]\n        v.root.canvas.itemconfig(v.ID, fill=color)\n\n\nclass Rect:\n\n    def __init__(self, x, y, live, tag, root):\n        self.root = root\n        self.x = x\n        self.y = y\n        self.live = bool(live)\n        if live:\n            color = \"green\"\n        else:\n            color = \"black\"\n        self.ID = self.root.c(2*(x-1)*self.root.r + self.root.margin,\n                              2*(y-1)*self.root.r + self.root.margin,\n                              2*x*self.root.r + self.root.margin,\n                              2*y*self.root.r + self.root.margin,\n                              outline=\"#202020\", fill=color, tag=tag)\n        self.root.canvas.tag_bind(self.ID, '<Button-1>', self.pressed)\n\n    def pressed(self, event):\n        if self.live:\n            self.live = False\n            color = \"black\"\n        else:\n            self.live = True\n            color = \"green\"\n        self.root.lg.lattice[self.x, self.y] = self.live\n        self.root.canvas.itemconfig(self.ID, fill=color)\n\n\nclass TopWindow:\n\n    def show_window(self, title=\"title\", *args):\n        self.root = Tk()\n        self.root.title(title)\n        frames = []\n        for i, arg in enumerate(args):\n            frames.append(Frame(self.root, padx=5, pady=5))\n            for k, v in arg:\n                Button(frames[i], text=k, command=v).pack(expand=YES, fill='x')\n            frames[i].pack(fill='x')\n        self.root.mainloop()\n\n\nclass Main:\n\n    def __init__(self):\n        L = 100\n        rule = \"2 3/3\"\n        self.top = TopWindow()\n        c = L / 2\n        # \u30c0\u30a4\u30cf\u30fc\u30c9\n        pattern = [(c-1, c+1), (c, c+1), (c, c+2), (c+4, c+2),\n                   (c+5, c), (c+5, c+2), (c+6, c+2)]\n\n        self.lg = LifeGame(L, rule, p=None, pattern=pattern)\n        self.top.show_window(\"Life game\", (('set', self.init),),\n                             (('start', self.start),\n                              ('pause', self.pause)),\n                             (('save', self.pr),),\n                             (('quit', self.quit),))\n\n    def init(self):\n        self.DrawCanvas = Draw_canvas(self.lg, self.lg.L)\n\n    def start(self):\n        self.lg.progress(self.DrawCanvas.canvas_update, self.DrawCanvas.update)\n\n    def pause(self):\n        self.lg.loop = False\n\n    def pr(self):\n        import tkinter.filedialog\n        import os\n        if self.DrawCanvas is None:\n            return 1\n        fTyp = [('eps file', '*eps'), ('all files', '*')]\n        filename = tkinter.filedialog.asksaveasfilename(filetypes=fTyp,\n                                                  initialdir=os.getcwd(),\n                                                  initialfile='figure_1.eps')\n        if filename is None:\n            return 0\n        self.DrawCanvas.canvas.postscript(file=filename)\n\n    def quit(self):\n        self.pause()\n        sys.exit()\n\nif __name__ == '__main__':\n\n    app = Main()\n\n\n\u5148\u307b\u3069\u306elifegame_console.py\u3068\u306e\u5dee\u5206\u306f\uff0cLifeGame.init\u306e\u7d30\u304b\u3044\u5909\u6570\u306e\u6271\u3044\u3068\uff0ccanvas_update\u3092\u5225\u306e\u30af\u30e9\u30b9Draw_canvas\u306b\u3057\u305f\u3053\u3068\uff0c\u305d\u306e\u4e2d\u3067\u683c\u5b50\u3092\u63cf\u304f\u90e8\u5206\u3092\u3055\u3089\u306b\u5225\u306e\u30af\u30e9\u30b9Rect\u3068\u3057\u3066\u5206\u3051\u305f\u3068\u3053\u308d\u3067\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306e\u683c\u5b50\u70b9\u3092\u72ec\u7acb\u3057\u305f\u3082\u306e\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\uff0c\u683c\u5b50\u70b9\u3092\u62bc\u305b\u3070\u300c\u751f\u300d\u300c\u6b7b\u300d\u3092\u5165\u308c\u66ff\u3048\u308b\uff0c\u3068\u3044\u3046\u64cd\u4f5c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\u5b9f\u969b\u306b\u5b9f\u884c\u3057\u3066\u307f\u305f\u69d8\u5b50\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u306e\u3067\uff0c\u3054\u89a7\u304f\u3060\u3055\u3044\uff08\u5f8c\u534a\u306f\u30b3\u30fc\u30c9\u306e\u3064\u306a\u304c\u308a\u3092\u8ffd\u3046\u3060\u3051\u306e\u5185\u5bb9\u306a\u306e\u3067\uff0c\u8208\u5473\u306e\u306a\u3044\u5834\u5408\u306f\u98db\u3070\u3057\u3066\u3082\u3089\u3063\u3066\u3082\u7d50\u69cb\u3067\u3059\uff09\uff0e\n\nPython\u3067\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f\u3010Tkinter\u3011\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306f\u307b\u3068\u3093\u3069\u304a\u904a\u3073\u306a\u3093\u3067\u3059\u304c\uff0c\u65b0\u3057\u3044\u3053\u3068\u3082\u899a\u3048\u3089\u308c\u305f\u3057\uff0c\u3053\u308c\u304b\u3089\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5e45\u3082\u5e83\u304c\u308b\u3093\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\u3042\u3068\uff0c\u52d5\u753b\u306b\u306f\u5b57\u5e55\u3068\u304b\u89e3\u8aac\u4ed8\u3051\u308b\u3079\u304d\u3067\u3059\u306d\uff0e\uff0e\uff0e\u3082\u3046\u5c11\u3057\u89e6\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306f\uff0c\u6570\u5024\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3066\uff0c\u30b3\u30f3\u30a6\u30a7\u30a4\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0(Conway's Game of Life)\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\uff0e\n\n\u606f\u629c\u304d\u306e\u3064\u3082\u308a\u3067\u59cb\u3081\u305f\u3082\u306e\u306e\uff0c\u4f5c\u3063\u3066\u307f\u308b\u3068\u610f\u5916\u3068\u30cf\u30de\u308b\u3068\u3053\u308d\u304c\u3042\u3063\u3066\uff0c\u304b\u306a\u308a\u8a66\u884c\u932f\u8aa4\u3057\u307e\u3057\u305f\uff0e\u3067\u3059\u306e\u3067\uff0c\u5b8c\u6210\u54c1\u3082\u3088\u3046\u3084\u304f\u52d5\u304f\u5f62\u306b\u306a\u3063\u305f\u7a0b\u5ea6\u306e\u51fa\u6765\u3067\u3059\uff0e\u4ed5\u69d8\u3092\u7406\u89e3\u3057\u3066\u3044\u308c\u3070\uff0c\u3082\u3063\u3068\u3046\u307e\u3044\u3082\u306e\u304c\u4f5c\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\u305d\u3053\u307e\u3067\u8aad\u307f\u8fbc\u3080\u6c17\u306b\u306f\u306a\u308c\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\uff0e\uff0e\n\n<a href=\"http://yuzugosho.blog.fc2.com/img/201409042322239eb.png/\" target=\"_blank\"><img src=\"http://blog-imgs-64.fc2.com/y/u/z/yuzugosho/201409042322239eb.png\" alt=\"Life Game_007\" border=\"0\" width=\"311\" height=\"311\" /></a>\n\n\n\n#\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3068\u306f\uff1f\n\n\u307e\u305a\uff0c\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306b\u3064\u3044\u3066\u8efd\u304f\u8aac\u660e\u3092\uff0e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3068\u306f\uff0c\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306e\u4e00\u7a2e\u3067\uff0c\u683c\u5b50\u70b9\u304c\u300c\u751f\u304d\u3066\u3044\u308b\u300d\u300c\u6b7b\u3093\u3067\u3044\u308b\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u3082\u3061\uff0c\u6642\u9593\uff08\u4e16\u4ee3\uff09\u304c\uff11\u9032\u3080\u3068\uff0c\u5468\u56f2\u306e\u72b6\u6cc1\u306b\u3088\u3063\u3066\uff0c\u4e0e\u3048\u3089\u308c\u305f\u898f\u5247\u306b\u5f93\u3044\u5185\u90e8\u306e\u72b6\u614b\u3092\u5909\u5316\u3055\u305b\u3066\u3044\u304f\u3082\u306e\u3067\u3059\uff0e\u4ee3\u8868\u7684\u306a\u3082\u306e\u3068\u3057\u3066\u306f\uff0c\u6b63\u65b9\u683c\u5b50\u4e0a\u3067\uff0c\u5468\u56f2\uff18\u30de\u30b9\u306e\u70b9\u306b\u95a2\u3057\uff0c\uff12\u500b\u3042\u308b\u3044\u306f\uff13\u500b\u751f\u304d\u3066\u3044\u308c\u3070\u751f\u304d\u6b8b\u308a\uff0c\u5468\u56f2\u306b\u751f\u5b58\u683c\u5b50\u70b9\u304c\uff13\u500b\u3042\u308b\u3068\u304d\u306f\u65b0\u305f\u306b\u8a95\u751f\u3059\u308b\uff0c\u3068\u3044\u3046\u30eb\u30fc\u30eb23/3\u306a\u3069\u304c\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306f\u30c1\u30e5\u30fc\u30ea\u30f3\u30b0\u5b8c\u5168\u306a\u306e\u3067\uff0c\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u5185\u90e8\u3067\uff0c\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u518d\u73fe\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u8a73\u3057\u304f\u306f\n\n<a href=\"http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0\" target=\"_blank\" title=\"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 - Wikipedia:\">\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 - Wikipedia:</a>\n<a href=\"http://www.nicovideo.jp/watch/sm19347846\" target=\"_blank\" title=\"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u4e16\u754c\uff11\u3010\u8907\u96d1\u7cfb\u3011 - \u30cb\u30b3\u30cb\u30b3\u52d5\u753b:GINZA:\">\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u4e16\u754c\uff11\u3010\u8907\u96d1\u7cfb\u3011 - \u30cb\u30b3\u30cb\u30b3\u52d5\u753b:GINZA:</a>\n\n\u306a\u3069\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\u52d5\u753b\u306f\u7279\u306b\u30aa\u30b9\u30b9\u30e1\u3067\u3059\uff0e\n\n\n#\u7aef\u672b\u4e0a\u3067\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\n\nTkinter\u3092\u4f7f\u3063\u3066\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u3060\u3051\u308c\u3069\uff0c\u6848\u5916\u96e3\u3057\u305d\u3046\u3060\u3063\u305f\u306e\u3067\uff0c\u307e\u305a\u306f\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30eb\u30fc\u30eb\u306e\u90e8\u5206\u3092\u5148\u306b\u4f5c\u308a\uff0c\u7aef\u672b\u4e0a\u3067\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\uff0e\n\n\u305d\u308c\u304c\u6b21\u3067\u3059\uff0e\n\n```py:lifegame_console.py\n#! /usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# written by ssh0, June 2014.\n\nimport numpy as np\nimport sys\nimport time\nimport os\n\nclass LifeGame:\n\n    def __init__(self, L=50, rule=\"2 3/3\"):\n        self.L = L # lattice size\n        p = 0.2\n        self.survive = [int(i) for i in rule.split(\"/\")[0].split()]\n        self.birth = [int(i) for i in rule.split(\"/\")[1].split()]\n        lattice = np.random.random([self.L+2, self.L+2])\n        self.lattice = lattice<p\n        self.lattice[0,:] = self.lattice[self.L+1,:] = False\n        self.lattice[:,0] = self.lattice[:,self.L+1] = False\n\n    def canvas_update(self):\n        os.system(\"clear\")\n        print \"\\n\"\n        l = \"\"\n        for y in range(1,self.L+1):\n            for x in range(1,self.L+1):\n                if self.lattice[x,y]:\n                    l += u\" \u25a0\"\n                else:\n                    l += u\" \u25a1\"\n            l += \"\\n\"\n        print l\n        print \"\\n\"\n        time.sleep(0.1)\n                \n    def progress(self):\n        L = self.L\n        Tmax = 2000\n        t = 0\n        while t < Tmax:\n            try:\n                self.canvas_update()\n                nextsites = []\n                \n                # \u5468\u671f\u5883\u754c\u6761\u4ef6\n                self.lattice[0,0] = self.lattice[self.L,self.L]\n                self.lattice[0,self.L+1] = self.lattice[self.L,1]\n                self.lattice[self.L+1,0] = self.lattice[1,self.L]\n                self.lattice[self.L+1,self.L+1] = self.lattice[1,1]\n                for m in range(1, self.L+1):\n                    self.lattice[m, self.L+1] = self.lattice[m, 1]\n                    self.lattice[m, 0] = self.lattice[m, self.L]\n                    self.lattice[0, m] = self.lattice[self.L, m]\n                    self.lattice[self.L+1, m] = self.lattice[1, m]\n                \n                # \u96a3\u63a5\u683c\u5b50\u70b9\u306e\u5224\u5b9a\n                for m in range(1,self.L+1):\n                    for n in range(1,self.L+1):\n                        \n                        if self.lattice[m,n]:\n                            neighber = np.sum(self.lattice[m-1:m+2, n-1:n+2])-1\n                            if neighber in self.survive:\n                                nextsites.append((m,n))\n                        else:\n                            neighber = np.sum(self.lattice[m-1:m+2, n-1:n+2])\n                            if neighber in self.birth:\n                                nextsites.append((m,n))\n                                \n                # lattice\u306e\u66f4\u65b0\n                self.lattice[:] = False\n                for nextsite in nextsites:\n                    self.lattice[nextsite] = True\n                \n                t += 1\n                \n            except KeyboardInterrupt:\n                print \"stopped.\"\n                break\n\nif __name__ == '__main__':\n    \n    lg = LifeGame()\n    lg.progress()\n```\n\n\n\u521d\u671f\u6761\u4ef6\u306f\uff0c\u4e71\u6570\u3092\u5272\u308a\u5f53\u3066\u305f\u884c\u5217\u3067\u95be\u5024\u4ee5\u4e0b\u306e\u70b9\u3092\u751f\u5b58\u3068\u3057\u307e\u3057\u305f\uff0e\u8868\u793a\u306f\uff0c\u307e\u305a\u7aef\u672b\u3092clear\u3057\u3066\uff0c\u751f\u5b58\u30b5\u30a4\u30c8\u306f\u25a0\uff0c\u305d\u3046\u3067\u306a\u3044\u30b5\u30a4\u30c8\u306f\u25a1\u3068\u3057\u3066print\u3059\u308b\u3053\u3068\u3067\u306a\u3093\u3068\u304b\u3057\u307e\u3057\u305f\uff0e\u9045\u5ef6\u6642\u9593\u30920.1\u3088\u308a\u5c0f\u3055\u304f\u3059\u308b\u3068\uff0c\u50d5\u306e\u74b0\u5883\u3067\u306f\u30c1\u30e9\u30c4\u30ad\u304c\u3072\u3069\u304f\u306a\u3063\u305f\u306e\u3067\uff0c\u3053\u308c\u4ee5\u4e0a\u901f\u304f\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3055\u305d\u3046\u3067\u3059\uff0e\n\n\u52d5\u753b\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3069\u3046\u305e\n\n<a href=\"http://youtu.be/7KMluy0fRq8\" target=\"_blank\"><img src=\"https://i.ytimg.com/vi/7KMluy0fRq8/2.jpg\" alt=\"Python\u3067\u7c21\u5358\u306aLifeGame\u3092\u4f5c\u3063\u3066\u307f\u305f(numpy)\" border=\"0\" width=\"145\" height=\"109\" /></a>\n[Python\u3067\u7c21\u5358\u306aLifeGame\u3092\u4f5c\u3063\u3066\u307f\u305f(numpy)](http://youtu.be/7KMluy0fRq8)\n\n\n#Tkinter\u3092\u4f7f\u3063\u3066\u8868\u793a\n\n\u7d9a\u3044\u3066\uff0cTkinter\u306eCanvas\u3092\u7528\u3044\u3066\u4f5c\u3063\u305f\u3082\u306e\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\u3053\u308c\u3092\u4f5c\u3063\u3066\u3066\u4e00\u756a\u8a70\u307e\u3063\u305f\u306e\u306f\uff0c\u683c\u5b50\u4e00\u3064\u4e00\u3064\u306e\u300c\u751f\u300d\u300c\u6b7b\u300d\u3092\u30af\u30ea\u30c3\u30af\u3067\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3057\u305f\uff0ePygame\u306a\u3093\u304b\u3092\u4f7f\u3046\u3068\u3053\u3053\u3089\u3078\u3093\u306f\u7c21\u5358\u306b\u306a\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3057\uff0c\u8abf\u3079\u305f\u9650\u308a\u3053\u3061\u3089\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u3057\u304b\u898b\u304b\u3051\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u3067\u3059\u304c\u57fa\u672c\u306f\u4e00\u7dd2\u3060\u3068\u601d\u3046\u306e\u3067\uff0c\u3053\u308c\u304b\u3089\u3082\u4f7f\u3046Tkinter\u305d\u306e\u3082\u306e\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff0e\u4ee5\u4e0b\u306b\u3059\u3079\u3066\u8f09\u305b\u307e\u3059\uff0e\n\n```py:lifegame.py\n#! /usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# written by ssh0, September 2014.\n\nfrom tkinter import *\nimport numpy as np\nimport sys\n# import time\n\n\nclass LifeGame:\n\n    def __init__(self, L=30, rule=\"2 3/3\", p=None, pattern=None):\n        self.L = L  # lattice size\n        self.survive = [int(i) for i in rule.split(\"/\")[0].split()]\n        self.birth = [int(i) for i in rule.split(\"/\")[1].split()]\n\n        if p:\n            lattice = np.random.random([self.L + 2, self.L + 2])\n            self.lattice = lattice < p\n            self.lattice[0, :] = self.lattice[self.L+1, :] = False\n            self.lattice[:, 0] = self.lattice[:, self.L + 1] = False\n        else:\n            self.lattice = np.zeros([self.L + 2, self.L + 2], dtype=bool)\n            if pattern:\n                for x, y in pattern:\n                    self.lattice[x, y] = True\n\n    def progress(self, canvas_update, update):\n        Tmax = 2000\n        t = 0\n        self.loop = True\n        while self.loop:\n            try:\n                past_lattice = self.lattice.copy()\n\n                nextsites = []\n\n                # \u5468\u671f\u5883\u754c\u6761\u4ef6\n                self.lattice[0, 0] = self.lattice[self.L, self.L]\n                self.lattice[0, self.L + 1] = self.lattice[self.L, 1]\n                self.lattice[self.L + 1, 0] = self.lattice[1, self.L]\n                self.lattice[self.L + 1, self.L + 1] = self.lattice[1, 1]\n                for m in range(1, self.L+1):\n                    self.lattice[m, self.L+1] = self.lattice[m, 1]\n                    self.lattice[m, 0] = self.lattice[m, self.L]\n                    self.lattice[0, m] = self.lattice[self.L, m]\n                    self.lattice[self.L+1, m] = self.lattice[1, m]\n\n                # \u96a3\u63a5\u683c\u5b50\u70b9\u306e\u5224\u5b9a\n                for m in range(1, self.L + 1):\n                    for n in range(1, self.L + 1):\n\n                        if self.lattice[m, n]:\n                            neighber = np.sum(self.lattice[m-1:m+2, n-1:n+2])-1\n                            if neighber in self.survive:\n                                nextsites.append((m, n))\n                        else:\n                            neighber = np.sum(self.lattice[m-1:m+2, n-1:n+2])\n                            if neighber in self.birth:\n                                nextsites.append((m, n))\n\n                # lattice\u306e\u66f4\u65b0\n                self.lattice[:] = False\n                for nextsite in nextsites:\n                    self.lattice[nextsite] = True\n\n                # \u63cf\u753b\u306e\u66f4\u65b0\n                changed_rect = np.where(self.lattice != past_lattice)\n                for x, y in zip(changed_rect[0], changed_rect[1]):\n                    if self.lattice[x, y]:\n                        color = \"green\"\n                    else:\n                        color = \"black\"\n                    canvas_update(x, y, color)\n                update()\n               # time.sleep(0.1)\n\n                t += 1\n                if t > Tmax:\n                    self.loop = False\n\n            except KeyboardInterrupt:\n                print(\"stopped.\")\n                break\n\n\nclass Draw_canvas:\n\n    def __init__(self, lg, L):\n\n        self.lg = lg\n        self.L = L\n        default_size = 640  # default size of canvas\n        self.r = int(default_size / (2 * self.L))\n        self.fig_size = 2 * self.r * self.L\n        self.margin = 10\n        self.sub = Toplevel()\n        self.sub.title(\"Life Game\")\n        self.canvas = Canvas(self.sub, width=self.fig_size + 2 * self.margin,\n                             height=self.fig_size + 2 * self.margin)\n        self.c = self.canvas.create_rectangle\n        self.update = self.canvas.update\n        self.rects = dict()\n        for y in range(1, self.L + 1):\n            for x in range(1, self.L + 1):\n                if self.lg.lattice[x, y]:\n                    live = True\n                else:\n                    live = False\n                tag = \"%d %d\" % (x, y)\n                self.rects[tag] = Rect(x, y, live, tag, self)\n        self.canvas.pack()\n\n    def canvas_update(self, x, y, color):\n        v = self.rects[\"%d %d\" % (x, y)]\n        v.root.canvas.itemconfig(v.ID, fill=color)\n\n\nclass Rect:\n\n    def __init__(self, x, y, live, tag, root):\n        self.root = root\n        self.x = x\n        self.y = y\n        self.live = bool(live)\n        if live:\n            color = \"green\"\n        else:\n            color = \"black\"\n        self.ID = self.root.c(2*(x-1)*self.root.r + self.root.margin,\n                              2*(y-1)*self.root.r + self.root.margin,\n                              2*x*self.root.r + self.root.margin,\n                              2*y*self.root.r + self.root.margin,\n                              outline=\"#202020\", fill=color, tag=tag)\n        self.root.canvas.tag_bind(self.ID, '<Button-1>', self.pressed)\n\n    def pressed(self, event):\n        if self.live:\n            self.live = False\n            color = \"black\"\n        else:\n            self.live = True\n            color = \"green\"\n        self.root.lg.lattice[self.x, self.y] = self.live\n        self.root.canvas.itemconfig(self.ID, fill=color)\n\n\nclass TopWindow:\n\n    def show_window(self, title=\"title\", *args):\n        self.root = Tk()\n        self.root.title(title)\n        frames = []\n        for i, arg in enumerate(args):\n            frames.append(Frame(self.root, padx=5, pady=5))\n            for k, v in arg:\n                Button(frames[i], text=k, command=v).pack(expand=YES, fill='x')\n            frames[i].pack(fill='x')\n        self.root.mainloop()\n\n\nclass Main:\n\n    def __init__(self):\n        L = 100\n        rule = \"2 3/3\"\n        self.top = TopWindow()\n        c = L / 2\n        # \u30c0\u30a4\u30cf\u30fc\u30c9\n        pattern = [(c-1, c+1), (c, c+1), (c, c+2), (c+4, c+2),\n                   (c+5, c), (c+5, c+2), (c+6, c+2)]\n\n        self.lg = LifeGame(L, rule, p=None, pattern=pattern)\n        self.top.show_window(\"Life game\", (('set', self.init),),\n                             (('start', self.start),\n                              ('pause', self.pause)),\n                             (('save', self.pr),),\n                             (('quit', self.quit),))\n\n    def init(self):\n        self.DrawCanvas = Draw_canvas(self.lg, self.lg.L)\n\n    def start(self):\n        self.lg.progress(self.DrawCanvas.canvas_update, self.DrawCanvas.update)\n\n    def pause(self):\n        self.lg.loop = False\n\n    def pr(self):\n        import tkinter.filedialog\n        import os\n        if self.DrawCanvas is None:\n            return 1\n        fTyp = [('eps file', '*eps'), ('all files', '*')]\n        filename = tkinter.filedialog.asksaveasfilename(filetypes=fTyp,\n                                                  initialdir=os.getcwd(),\n                                                  initialfile='figure_1.eps')\n        if filename is None:\n            return 0\n        self.DrawCanvas.canvas.postscript(file=filename)\n\n    def quit(self):\n        self.pause()\n        sys.exit()\n\nif __name__ == '__main__':\n\n    app = Main()\n```\n\n\u5148\u307b\u3069\u306elifegame_console.py\u3068\u306e\u5dee\u5206\u306f\uff0cLifeGame.__init__\u306e\u7d30\u304b\u3044\u5909\u6570\u306e\u6271\u3044\u3068\uff0ccanvas_update\u3092\u5225\u306e\u30af\u30e9\u30b9Draw_canvas\u306b\u3057\u305f\u3053\u3068\uff0c\u305d\u306e\u4e2d\u3067\u683c\u5b50\u3092\u63cf\u304f\u90e8\u5206\u3092\u3055\u3089\u306b\u5225\u306e\u30af\u30e9\u30b9Rect\u3068\u3057\u3066\u5206\u3051\u305f\u3068\u3053\u308d\u3067\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306e\u683c\u5b50\u70b9\u3092\u72ec\u7acb\u3057\u305f\u3082\u306e\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\uff0c\u683c\u5b50\u70b9\u3092\u62bc\u305b\u3070\u300c\u751f\u300d\u300c\u6b7b\u300d\u3092\u5165\u308c\u66ff\u3048\u308b\uff0c\u3068\u3044\u3046\u64cd\u4f5c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\u5b9f\u969b\u306b\u5b9f\u884c\u3057\u3066\u307f\u305f\u69d8\u5b50\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u306e\u3067\uff0c\u3054\u89a7\u304f\u3060\u3055\u3044\uff08\u5f8c\u534a\u306f\u30b3\u30fc\u30c9\u306e\u3064\u306a\u304c\u308a\u3092\u8ffd\u3046\u3060\u3051\u306e\u5185\u5bb9\u306a\u306e\u3067\uff0c\u8208\u5473\u306e\u306a\u3044\u5834\u5408\u306f\u98db\u3070\u3057\u3066\u3082\u3089\u3063\u3066\u3082\u7d50\u69cb\u3067\u3059\uff09\uff0e\n\n<a href=\"http://youtu.be/1M9sc5TlWQg\" target=\"_blank\"><img src=\"https://i.ytimg.com/vi/1M9sc5TlWQg/3.jpg\" alt=\"Python\u3067\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f\u3010Tkinter\u3011\" border=\"0\" width=\"145\" height=\"109\" /></a>\n[Python\u3067\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f\u3010Tkinter\u3011](http://youtu.be/1M9sc5TlWQg)\n\n\n#\u307e\u3068\u3081\n\n\u4eca\u56de\u306f\u307b\u3068\u3093\u3069\u304a\u904a\u3073\u306a\u3093\u3067\u3059\u304c\uff0c\u65b0\u3057\u3044\u3053\u3068\u3082\u899a\u3048\u3089\u308c\u305f\u3057\uff0c\u3053\u308c\u304b\u3089\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5e45\u3082\u5e83\u304c\u308b\u3093\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\u3042\u3068\uff0c\u52d5\u753b\u306b\u306f\u5b57\u5e55\u3068\u304b\u89e3\u8aac\u4ed8\u3051\u308b\u3079\u304d\u3067\u3059\u306d\uff0e\uff0e\uff0e\u3082\u3046\u5c11\u3057\u89e6\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\n", "tags": ["Python", "numpy", "Tkinter"]}