{"context": " More than 1 year has passed since last update.Travis-CI supports D. No need this ad-hoc approach. See: http://blog.travis-ci.com/2014-12-10-community-driven-language-support-comes-to-travis-ci/\nIt's simple. Download dmd and run Makefile.\n\n.travis.yml\nlanguage: d\n\ninstall:\n  - DMD_VERSION=2.062\n  - wget http://ftp.digitalmars.com/dmd.${DMD_VERSION}.zip\n  - unzip dmd.${DMD_VERSION}.zip\n\nscript:\n  - DMD=./dmd2/linux/bin64/dmd MODEL=64 make -f posix.mak unittest\n\nbranches:\n  only:\n    - master\n\nscript depends on your build system. Travis CI uses 64bit environment, so you should use 64bit code generation.\n\nMakefile\nSample Makefile for above use-case. Use ?= instead of = to assign variable from command line.\n# build mode: 32bit or 64bit\nMODEL ?= $(shell getconf LONG_BIT)\nDMD ?= dmd\nNAMES = foo\nFILES = $(addsuffix .d, $(NAMES))\nSRCS  = $(addprefix src/, $(FILES))\nLIB = libfoo.a\nDFLAGS = -Isrc -m$(MODEL) -w -d -property -O -release -nofloat -inline\n\ntarget: $(LIB)\n\n$(LIB):\n    $(DMD) $(DFLAGS) -lib -of$(LIB) $(SRCS)\n\nMAIN_FILE = \"empty_foo_unittest.d\"\n\nunittest:\n    echo 'import foo; void main(){}' > $(MAIN_FILE)\n    $(DMD) $(DFLAGS) -unittest -of$(LIB) $(SRCS) -run $(MAIN_FILE)\n    rm $(MAIN_FILE)\n\n\nTravis-CI supports D. No need this ad-hoc approach. See: http://blog.travis-ci.com/2014-12-10-community-driven-language-support-comes-to-travis-ci/\n\nIt's simple. Download dmd and run Makefile.\n\n## .travis.yml\n\n```yaml\nlanguage: d\n\ninstall:\n  - DMD_VERSION=2.062\n  - wget http://ftp.digitalmars.com/dmd.${DMD_VERSION}.zip\n  - unzip dmd.${DMD_VERSION}.zip\n\nscript:\n  - DMD=./dmd2/linux/bin64/dmd MODEL=64 make -f posix.mak unittest\n\nbranches:\n  only:\n    - master\n```\n\n`script` depends on your build system. Travis CI uses 64bit environment, so you should use 64bit code generation.\n\n## Makefile\n\nSample Makefile for above use-case. Use `?=` instead of `=` to assign variable from command line.\n\n```make\n# build mode: 32bit or 64bit\nMODEL ?= $(shell getconf LONG_BIT)\nDMD ?= dmd\nNAMES = foo\nFILES = $(addsuffix .d, $(NAMES))\nSRCS  = $(addprefix src/, $(FILES))\nLIB = libfoo.a\nDFLAGS = -Isrc -m$(MODEL) -w -d -property -O -release -nofloat -inline\n\ntarget: $(LIB)\n\n$(LIB):\n\t$(DMD) $(DFLAGS) -lib -of$(LIB) $(SRCS)\n\nMAIN_FILE = \"empty_foo_unittest.d\"\n\nunittest:\n\techo 'import foo; void main(){}' > $(MAIN_FILE)\n\t$(DMD) $(DFLAGS) -unittest -of$(LIB) $(SRCS) -run $(MAIN_FILE)\n\trm $(MAIN_FILE)\n```\n", "tags": ["dlang"]}