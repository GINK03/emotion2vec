{"context": " More than 1 year has passed since last update.\n\n\u7d9a\u304d\n\u524d\u56de \u306eJavaScirpt \u306b\u7d9a\u3044\u3066\u4eca\u56de\u306f Scala \u3067\u3059\u3002\n\u4ee5\u4e0b\u3092\u898b\u306a\u304c\u3089\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\nScala 2.10.0 Futures and Promises - 1 - Starlight\nScala 2.10.0 Futures and Promises - 2 - Starlight\n\n\nScala \u306e Future\nscala.concurrent.Future \u304b\u3089\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6982\u8981\n\nFuture\u306e\u751f\u6210\uff08\u51e6\u7406\u5185\u5bb9\u306e\u767b\u9332\uff09\u306f Future \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e apply \u306b\u51e6\u7406\u3092\u6e21\u305b\u3070\u3088\u3044\u3002\n\n\n\u30b3\u30fc\u30c9\u306e\u898b\u305f\u76ee\u306f Future { ... } \u306b\u306a\u308b\u3002\n\u5c0f\u6587\u5b57\u59cb\u307e\u308a\u306e future { ... } \u306f\u306a\u304f\u306a\u308b\u4e88\u5b9a\u3089\u3057\u3044\n\n\nFuture \u3092\u751f\u6210\u3059\u308b\u3068\u3059\u3050\u306b\u3001implicit \u306a ExecutionContext \u306b\u3088\u3063\u3066\u30b9\u30ec\u30c3\u30c9\u304c\u751f\u6210\u3055\u308c\u3001\u5b9f\u884c\u958b\u59cb\u3055\u308c\u308b\u3002\u3082\u3061\u308d\u3093\u81ea\u5206\u3067 ExecutionContext \u3092\u6307\u5b9a\u3082\u3067\u304d\u308b\n\n\n\nimport scala.concurrent.ExecutionContext.Implicits.global \u304c\u5fc5\u8981\n\n\n\u7d50\u679c\u306e\u53d6\u5f97\u306f f.value\u3002Success \u304b Failure \u304c\u5165\u3063\u3066\u3044\u308b\n\u7d42\u4e86\u3092\u5f85\u3061\u305f\u3044\u3068\u304d\u306f Await.result(mytask, timeout) \u3092\u4f7f\u3046\u3002\u4f8b\u5916\u3092\u53d7\u3051\u53d6\u3089\u306a\u3044 Await.ready \u3082\u3042\u308b\n\u7d42\u4e86\u6642\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306f Future \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e onComplete \u306b\u6b63\u5e38\u30fb\u30a8\u30e9\u30fc\u306e\u4e21\u65b9\u306e\u51e6\u7406\u3092\u6e21\u3059\n\nFuture[Int] mytask = future { heavyTask() } // \u672c\u5f53\u306f\u91cd\u3044\u51e6\u7406\u3092\u66f8\u304f\nmytask onComplete {\n  case Success(result) => // \u6210\u529f\u6642\u306e\u51e6\u7406\n  case Failure(ex)     => // \u5931\u6557\u6642\u306e\u51e6\u7406\n}\n\n\n\nonSuccess\u3001onFailure \u3092\u4f7f\u3063\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u767b\u9332\u3057\u3066\u3082\u3088\u3044\n\nmytask onSuccess {\n  case result => // \u6210\u529f\u6642\u306e\u51e6\u7406\n}\nmytask onFailure {\n  case ex     => // \u5931\u6557\u6642\u306e\u51e6\u7406\u3002\u4f8b\u5916\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u30de\u30c3\u30c1\u3057\u305f\u3068\u304d\u3060\u3051\u767a\u706b\u3059\u308b\n}\n\n\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4f55\u5ea6\u3082\u767b\u9332\u3057\u305f\u3068\u304d\u306e\u547c\u3073\u51fa\u3057\u9806\u306f\u4fdd\u969c\u3055\u308c\u306a\u3044\n\n\nFuture \u306e\u5408\u6210\n\nscala \u3089\u3057\u304f map \u3067\u5408\u6210\u3059\u308b\u3002\n\nflatMap \u3082\u4f7f\u3048\u308b\u306e\u3067 for comprehention \u3067\u3082\u66f8\u3051\u308b\n\u5931\u6557\u306f recover \u307e\u305f\u306f recoverWith`\uff08\u3042\u305f\u3089\u3057\u3044Future\u3092\u8fd4\u3059\u5834\u5408\uff09 \u3067\u53d7\u3051\u53d6\u308c\u308b\n\n\u30b3\u30fc\u30c9\u4f8b\n\n5\u3068\u304bx+1\u3068\u304b\u306f\u5168\u90e8\u300c\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u300d\u3060\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\nval f = Future { 5 }\nval g = f.map { case x => x + 1 } foreach println \n// 6 \u304c\u8868\u793a\u3055\u308c\u308b\n\nval h = f.flatMap { case x => Future { x + 1 } } foreach println \n// 6 \u304c\u8868\u793a\u3055\u308c\u308b\n\nval f = for {\n  x <- Future { 5 }\n  y <- Future { x + 1 }\n} yield y + 2\nAwait.result(f, Duration(\"10 millis\"))\n// 5, x+1, y+2 \u304c\u305d\u308c\u305e\u308c\u7d42\u4e86\u6b21\u7b2c\u9806\u6b21\u5b9f\u884c\u3057\u3066 8 \u304c\u8868\u793a\u3055\u308c\u308b\n\nval f1 = Future { Thread.sleep(5000); 5 }\nval f2 = Future { Thread.sleep(5000); 3 }\n(for { x <- f1; y <- f2 } yield (x+y)) foreach println\n// 2\u3064\u306e sleep \u3092\u4e26\u5217\u5b9f\u884c\u3057\u3066\u30015\u79d2\u5f8c\u306b 8 \u304c\u8868\u793a\u3055\u308c\u308b\n// sbt console \u304b\u3089\u3060\u3068\u4e0a\u8a183\u3064\u3092\u6025\u3044\u3067\u5b9f\u884c\u3057\u306a\u3044\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\n// \u5148\u307b\u3069\u306e\u9806\u6b21\u5b9f\u884c\u306e\u4f8b\u306e\u3088\u3046\u306bfor \u306e\u4e2d\u306b Future \u306e\u751f\u6210\u3092\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u3001\n// f1 \u304c\u7d42\u308f\u308b\u307e\u3067 f2 \u304c\u59cb\u307e\u3089\u306a\u3044\u306e\u3067\u4e26\u5217\u5b9f\u884c\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n\nval h = f.flatMap { \n  case x => Future { x / 0 } \n} recover {\n  case x => 10\n} foreach println \n// \u30bc\u30ed\u9664\u7b97\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067 recover \u304c\u8d70\u308a 10 \u304c\u8868\u793a\u3055\u308c\u308b\n\n\n\n\ntransform \u306f \u6210\u529f\u6642\u3068\u5931\u6557\u6642\u306e\u51e6\u7406\u3092\u305d\u308c\u305e\u308c\u6307\u5b9a\u3067\u304d\u308b\n\nfilter \u306f\u6761\u4ef6\u306b\u5408\u81f4\u3057\u306a\u3044\u3068\u5931\u6557\u6271\u3044\u3002\n\nandThen \u306f\u6307\u5b9a\u3057\u305f\u51e6\u7406\u306e\u7d50\u679c\u3092\u4f7f\u308f\u305a\u3001\u5143\u306e\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u6b21\u306b\u9001\u308b (tap \u7684\u306a\u3082\u306e)\n\n\u8907\u6570\u306e Future \u306e\u6271\u3044\u306f\u307e\u3060\u3061\u3087\u3063\u3068\u6574\u7406\u3067\u304d\u3066\u3044\u306a\u3044\u3067\u3059\u3002\nscala - Wait for several Futures - Stack Overflow\nScala - Future\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308b -\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u64cd\u4f5c- - Qiita\n\n\nsequence : Seq[Future[T]] -> Future[Seq[T]] \n\ntraverse : Seq[T] -> Seq[Future[T]]\n\n\nScala \u306e Promise\n\n\np.future \u3067 Future \u3092\u751f\u6210\u3067\u304d\u308b\n\np.success \u3067 Future \u3092\u6210\u529f\u3055\u305b\u3089\u308c\u308b\u3001\u3064\u307e\u308a onSuccess\u304c\u547c\u3070\u308c\u308b\n\np.failure \u3067 Future \u3092\u751f\u6210\u3067\u304d\u308b\u3001\u3064\u307e\u308a onFailure \u304c\u547c\u3070\u308c\u308b\nsuccess \u304b failure \u3069\u3061\u3089\u304b\u4e00\u56de\u3060\u3051\u3057\u304b\u547c\u3079\u306a\u3044\u30022\u56de\u547c\u3076\u3068\u547c\u3093\u3060\u5074\u3067 Exception \u304c\u767a\u751f\u3059\u308b\n\nPromise \u306e\u5229\u7528\u4f8b \nimport scala.concurrent.{Await, Future, Promise}\nimport scala.concurrent.ExecutionContext.Implicits.global\n\ndef heavyFuture = {\n  val p = Promise[Int]\n  Future {\n    Thread.sleep(1000)\n    val result = 10\n    p.success(result)\n  }\n  p.future\n}\n\nval f = heavyFuture\nf onSuccess { case x => println(x) }\n\n\n\u307e\u3068\u3081:\u8a00\u8a9e\u3054\u3068\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u308f\u304b\u3063\u3066\u304d\u305f\u3053\u3068\n\n\u30c1\u30a7\u30fc\u30f3\u3059\u308b\u5bfe\u8c61\u306e\u540d\u524d\n\u4eca\u307e\u3067\u306a\u3093\u3068\u306a\u304f \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u5165\u308c\u5b50\u3092\u4f7f\u308f\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u306b\u30c1\u30a7\u30fc\u30f3\u306e\u4ed5\u7d44\u307f\u3092\u63d0\u4f9b\u3059\u308b\u8cac\u4efb\u306f Promise \u304c\u6301\u3063\u3066\u3044\u308b\u3082\u306e\u3060\u3068\u52d8\u9055\u3044\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u51e6\u7406\u7cfb\u306b\u3088\u3063\u3066\u7d50\u69cb\u547c\u3073\u540d\u304c\u305a\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u975e\u540c\u671f\u51e6\u7406\u306e\u5b9f\u884c\u958b\u59cb\u306e\u30bf\u30a4\u30df\u30f3\u30b0\n\u5b9f\u884c\u958b\u59cb\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u306f Java \u306e\u30a4\u30e1\u30fc\u30b8\uff08Future\u4f5c\u3063\u3066\u304b\u3089Executor\u3067\u305f\u305f\u304f\uff09\u306b\u5f15\u304d\u305a\u3089\u308c\u3066\u3044\u305f\u304b\u3089\u3001\u307f\u305f\u3044\u3067\u3059\u3002\u3080\u3057\u308d Future \u4f5c\u3063\u305f\u3089\u305d\u3053\u3067\u52d5\u304d\u59cb\u3081\u308b\u30a4\u30e1\u30fc\u30b8\u306e\u65b9\u304c\u5408\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u8868\u306b\u3057\u3066\u307f\u307e\u3057\u305f\n\n\n\n\u51e6\u7406\u7cfb\n\u5b9f\u884c\u958b\u59cb\u306e\u30bf\u30a4\u30df\u30f3\u30b0\n\u30c1\u30a7\u30fc\u30f3\u3059\u308b\u5bfe\u8c61\u306e\u540d\u524d\n\n\n\n\nJava5\nFuture \u306b\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3001ExecutorService.execute \u306b Future \u3092\u6e21\u3057\u305f\u6642\n\u30c1\u30a7\u30fc\u30f3\u3067\u304d\u306a\u3044\n\n\nJava8\nComplatableFuture \u306b\u51e6\u7406\u3092\u6e21\u3057\u305f\u6642\nCompletionStage\n\n\nECMAScript6\nPromise \u3092 new \u3057\u305f\u3068\u304d?\nPromise\n\n\nDeferred\nFuture \u306e then \u3092\u547c\u3073\u51fa\u3057\u305f\uff08\u5b9a\u7fa9\u3057\u305f\uff09\u6642?\nPromise\n\n\nscala\nFuture \u3092\u751f\u6210\u3057\u305f\u6642\nFuture\n\n\n\n\nPromise \u3068 Future \u306e\u95a2\u4fc2\u306e\u30a4\u30e1\u30fc\u30b8\n\u300cPromise \u304c \u4e00\u56de\u3060\u3051\u306e\u6210\u529f\u30fb\u5931\u6557\u3092\u4fdd\u969c\u3059\u308b\u300d \u3068\u3044\u3046\u8aac\u660e\u3082\u7d0d\u5f97\u306f\u3057\u305f\u306e\u3067\u3059\u304c\u3001Future \u3068\u306e\u30bb\u30c3\u30c8\u3067\u306e\u3068\u3089\u3048\u65b9\u3068\u3057\u3066\u306f Future \u3068 Promise \u3068\u72ec\u7acb\u3057\u305f\u5225\u7269\u304c\u3042\u308b\u3068\u3044\u3046\u3088\u308a\u3082\u3001\n\nPromise \u306f Future \u306e\u6027\u8cea\u306e\u3053\u3068\nFuture \u306b\u306f\u5358\u4f53\u306e Future \u3068\u300ePromise\u4ed8\u304d\u306e Future\u300f\u3068\u304c\u3042\u308b\nPromise\u4ed8\u304d\u306e Future \u304c\u300c\u4e00\u56de\u3060\u3051\u6210\u529f\u304b\u5931\u6557\u304b\u3059\u308b\u300d\n\u51e6\u7406\u3092\u30c1\u30a7\u30fc\u30f3\u3057\u3066\u3044\u304f\u5bfe\u8c61\u306f Future\n\n\u3068\u3044\u3046\u7406\u89e3\u304c\u81ea\u5206\u306b\u306f\u30b9\u30c3\u30ad\u30ea\u6765\u307e\u3057\u305f\u3002\u591a\u5206\u8272\u3005\u306a\u8aac\u660e\u3082\u305d\u3046\u3044\u3046\u3053\u3068\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u8179\u306b\u843d\u3061\u3066\u306a\u304b\u3063\u305f\u3067\u3059 ^^;\n\nPromise \u306e\u4f5c\u308a\u65b9\u306e\u30a4\u30e1\u30fc\u30b8\n\n\u4f55\u3089\u304b\u306e\u30b3\u30f3\u30c6\u30ca\u7684\u306a\u3082\u306e\u306e\u4e2d\u3067 Promise \u3092\u4f5c\u3063\u3066\u304a\u304f\u3002\n\u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u3067 Future \u3092\u4f5c\u3063\u3066\u3001\u4e2d\u3067\u91cd\u3044\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u5148\u307b\u3069\u306e Promise \u3092\u7d42\u4e86\u3055\u305b\u308b\u3002\n\u53d7\u3051\u5074\u306f \u30b3\u30f3\u30c6\u30ca\u304b\u3089 Promise \u3092\u53d6\u308a\u51fa\u3057\u3066\u5f8c\u7d9a\u51e6\u7406\u3092\u30c1\u30a7\u30fc\u30f3\u3057\u3066\u3044\u304f\n\n\n\n\n\u51e6\u7406\u7cfb\n\u30b3\u30f3\u30c6\u30ca\u7684\u306a\u3082\u306e\n\u91cd\u3044\u51e6\u7406\u306e\u6e21\u3057\u65b9\n\u30c1\u30a7\u30fc\u30f3\u5bfe\u8c61\u306e\u53d6\u308a\u51fa\u3057\u65b9\n\u30c1\u30a7\u30fc\u30f3\u65b9\u6cd5\n\n\n\n\nECMAScript6\nPromise\np = new Promise(func(res,rej) { ...; res(r) })\np\np.then\n\n\nDeffered\n$.Deffered\nd = $.Deffered(func(success,err) { ...; success(r) })\np = d.promise\np.then\n\n\nscala \u306e Promise\nFuture\u3092\u4f5c\u308b\u305f\u3081\u306e\u81ea\u4f5c\u95a2\u6570\nval p = Promise; Future { ...; p.success(r) }\nf = p.future\nf.map\n\n\n\n\n\u5bbf\u984c\n\nJava8 \u306e Promise \u306e\u6709\u7121\u306b\u3064\u3044\u3066\u307e\u3060\u3061\u3083\u3093\u3068\u8abf\u3079\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6c17\u4ed8\u304d\u307e\u3057\u305f\u3002\nPlay2Java \u3084 Rx\u3082\u8abf\u3079\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u3064\u3064\u653e\u7f6e\n\n# \u7d9a\u304d\n\n[\u524d\u56de](http://qiita.com/reki2000/items/c9739a392632a7cb94b0) \u306eJavaScirpt \u306b\u7d9a\u3044\u3066\u4eca\u56de\u306f Scala \u3067\u3059\u3002\n\n\u4ee5\u4e0b\u3092\u898b\u306a\u304c\u3089\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\n* [Scala 2.10.0 Futures and Promises - 1 - Starlight](http://d.hatena.ne.jp/Kazuhira/20130111/1357920383)\n* [Scala 2.10.0 Futures and Promises - 2 - Starlight](http://d.hatena.ne.jp/Kazuhira/20130113/1358075059)\n\n# Scala \u306e Future\n\n[scala.concurrent.Future](http://docs.scala-lang.org/ja/overviews/core/futures.html) \u304b\u3089\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n### \u6982\u8981\n\n* Future\u306e\u751f\u6210\uff08\u51e6\u7406\u5185\u5bb9\u306e\u767b\u9332\uff09\u306f Future \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e apply \u306b\u51e6\u7406\u3092\u6e21\u305b\u3070\u3088\u3044\u3002\n  * \u30b3\u30fc\u30c9\u306e\u898b\u305f\u76ee\u306f `Future { ... }` \u306b\u306a\u308b\u3002\n  * \u5c0f\u6587\u5b57\u59cb\u307e\u308a\u306e `future { ... }` \u306f\u306a\u304f\u306a\u308b\u4e88\u5b9a\u3089\u3057\u3044\n* Future \u3092\u751f\u6210\u3059\u308b\u3068\u3059\u3050\u306b\u3001implicit \u306a ExecutionContext \u306b\u3088\u3063\u3066\u30b9\u30ec\u30c3\u30c9\u304c\u751f\u6210\u3055\u308c\u3001\u5b9f\u884c\u958b\u59cb\u3055\u308c\u308b\u3002\u3082\u3061\u308d\u3093\u81ea\u5206\u3067 ExecutionContext \u3092\u6307\u5b9a\u3082\u3067\u304d\u308b\n  * `import scala.concurrent.ExecutionContext.Implicits.global` \u304c\u5fc5\u8981\n* \u7d50\u679c\u306e\u53d6\u5f97\u306f `f.value`\u3002`Success` \u304b `Failure` \u304c\u5165\u3063\u3066\u3044\u308b\n\n* \u7d42\u4e86\u3092\u5f85\u3061\u305f\u3044\u3068\u304d\u306f `Await.result(mytask, timeout)` \u3092\u4f7f\u3046\u3002\u4f8b\u5916\u3092\u53d7\u3051\u53d6\u3089\u306a\u3044 `Await.ready` \u3082\u3042\u308b\n\n* \u7d42\u4e86\u6642\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306f Future \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e onComplete \u306b\u6b63\u5e38\u30fb\u30a8\u30e9\u30fc\u306e\u4e21\u65b9\u306e\u51e6\u7406\u3092\u6e21\u3059\n\n``` \nFuture[Int] mytask = future { heavyTask() } // \u672c\u5f53\u306f\u91cd\u3044\u51e6\u7406\u3092\u66f8\u304f\nmytask onComplete {\n  case Success(result) => // \u6210\u529f\u6642\u306e\u51e6\u7406\n  case Failure(ex)     => // \u5931\u6557\u6642\u306e\u51e6\u7406\n}\n```\n\n* `onSuccess`\u3001`onFailure` \u3092\u4f7f\u3063\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u767b\u9332\u3057\u3066\u3082\u3088\u3044\n\n```\nmytask onSuccess {\n  case result => // \u6210\u529f\u6642\u306e\u51e6\u7406\n}\nmytask onFailure {\n  case ex     => // \u5931\u6557\u6642\u306e\u51e6\u7406\u3002\u4f8b\u5916\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u30de\u30c3\u30c1\u3057\u305f\u3068\u304d\u3060\u3051\u767a\u706b\u3059\u308b\n}\n```\n\n* \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4f55\u5ea6\u3082\u767b\u9332\u3057\u305f\u3068\u304d\u306e\u547c\u3073\u51fa\u3057\u9806\u306f\u4fdd\u969c\u3055\u308c\u306a\u3044\n\n### Future \u306e\u5408\u6210\n\n* scala \u3089\u3057\u304f `map` \u3067\u5408\u6210\u3059\u308b\u3002\n* `flatMap` \u3082\u4f7f\u3048\u308b\u306e\u3067 for comprehention \u3067\u3082\u66f8\u3051\u308b\n* \u5931\u6557\u306f `recover` \u307e\u305f\u306f recoverWith`\uff08\u3042\u305f\u3089\u3057\u3044Future\u3092\u8fd4\u3059\u5834\u5408\uff09 \u3067\u53d7\u3051\u53d6\u308c\u308b\n\n\u30b3\u30fc\u30c9\u4f8b\n\n```scala:5\u3068\u304bx+1\u3068\u304b\u306f\u5168\u90e8\u300c\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u300d\u3060\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\nval f = Future { 5 }\nval g = f.map { case x => x + 1 } foreach println \n// 6 \u304c\u8868\u793a\u3055\u308c\u308b\n\nval h = f.flatMap { case x => Future { x + 1 } } foreach println \n// 6 \u304c\u8868\u793a\u3055\u308c\u308b\n\nval f = for {\n  x <- Future { 5 }\n  y <- Future { x + 1 }\n} yield y + 2\nAwait.result(f, Duration(\"10 millis\"))\n// 5, x+1, y+2 \u304c\u305d\u308c\u305e\u308c\u7d42\u4e86\u6b21\u7b2c\u9806\u6b21\u5b9f\u884c\u3057\u3066 8 \u304c\u8868\u793a\u3055\u308c\u308b\n\nval f1 = Future { Thread.sleep(5000); 5 }\nval f2 = Future { Thread.sleep(5000); 3 }\n(for { x <- f1; y <- f2 } yield (x+y)) foreach println\n// 2\u3064\u306e sleep \u3092\u4e26\u5217\u5b9f\u884c\u3057\u3066\u30015\u79d2\u5f8c\u306b 8 \u304c\u8868\u793a\u3055\u308c\u308b\n// sbt console \u304b\u3089\u3060\u3068\u4e0a\u8a183\u3064\u3092\u6025\u3044\u3067\u5b9f\u884c\u3057\u306a\u3044\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\n// \u5148\u307b\u3069\u306e\u9806\u6b21\u5b9f\u884c\u306e\u4f8b\u306e\u3088\u3046\u306bfor \u306e\u4e2d\u306b Future \u306e\u751f\u6210\u3092\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u3001\n// f1 \u304c\u7d42\u308f\u308b\u307e\u3067 f2 \u304c\u59cb\u307e\u3089\u306a\u3044\u306e\u3067\u4e26\u5217\u5b9f\u884c\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n\nval h = f.flatMap { \n  case x => Future { x / 0 } \n} recover {\n  case x => 10\n} foreach println \n// \u30bc\u30ed\u9664\u7b97\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067 recover \u304c\u8d70\u308a 10 \u304c\u8868\u793a\u3055\u308c\u308b\n```\n\n* `transform` \u306f \u6210\u529f\u6642\u3068\u5931\u6557\u6642\u306e\u51e6\u7406\u3092\u305d\u308c\u305e\u308c\u6307\u5b9a\u3067\u304d\u308b\n* `filter` \u306f\u6761\u4ef6\u306b\u5408\u81f4\u3057\u306a\u3044\u3068\u5931\u6557\u6271\u3044\u3002\n* `andThen` \u306f\u6307\u5b9a\u3057\u305f\u51e6\u7406\u306e\u7d50\u679c\u3092\u4f7f\u308f\u305a\u3001\u5143\u306e\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u6b21\u306b\u9001\u308b (tap \u7684\u306a\u3082\u306e)\n\n\u8907\u6570\u306e Future \u306e\u6271\u3044\u306f\u307e\u3060\u3061\u3087\u3063\u3068\u6574\u7406\u3067\u304d\u3066\u3044\u306a\u3044\u3067\u3059\u3002\n[scala - Wait for several Futures - Stack Overflow](http://stackoverflow.com/questions/16256279/wait-for-several-futures)\n[Scala - Future\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308b -\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u64cd\u4f5c- - Qiita](http://qiita.com/mtoyoshi/items/297f6acdfe610440c719)\n\n* `sequence` : Seq[Future[T]] -> Future[Seq[T]] \n* `traverse` : Seq[T] -> Seq[Future[T]]\n\n# Scala \u306e Promise\n\n* `p.future` \u3067 Future \u3092\u751f\u6210\u3067\u304d\u308b\n* `p.success` \u3067 Future \u3092\u6210\u529f\u3055\u305b\u3089\u308c\u308b\u3001\u3064\u307e\u308a onSuccess\u304c\u547c\u3070\u308c\u308b\n* `p.failure` \u3067 Future \u3092\u751f\u6210\u3067\u304d\u308b\u3001\u3064\u307e\u308a onFailure \u304c\u547c\u3070\u308c\u308b\n* success \u304b failure \u3069\u3061\u3089\u304b\u4e00\u56de\u3060\u3051\u3057\u304b\u547c\u3079\u306a\u3044\u30022\u56de\u547c\u3076\u3068\u547c\u3093\u3060\u5074\u3067 Exception \u304c\u767a\u751f\u3059\u308b\n\nPromise \u306e\u5229\u7528\u4f8b \n\n```scala\nimport scala.concurrent.{Await, Future, Promise}\nimport scala.concurrent.ExecutionContext.Implicits.global\n\ndef heavyFuture = {\n  val p = Promise[Int]\n  Future {\n    Thread.sleep(1000)\n    val result = 10\n    p.success(result)\n  }\n  p.future\n}\n\nval f = heavyFuture\nf onSuccess { case x => println(x) }\n```\n\n# \u307e\u3068\u3081:\u8a00\u8a9e\u3054\u3068\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u308f\u304b\u3063\u3066\u304d\u305f\u3053\u3068\n\n### \u30c1\u30a7\u30fc\u30f3\u3059\u308b\u5bfe\u8c61\u306e\u540d\u524d\n\n\u4eca\u307e\u3067\u306a\u3093\u3068\u306a\u304f \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u5165\u308c\u5b50\u3092\u4f7f\u308f\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u306b\u30c1\u30a7\u30fc\u30f3\u306e\u4ed5\u7d44\u307f\u3092\u63d0\u4f9b\u3059\u308b\u8cac\u4efb\u306f Promise \u304c\u6301\u3063\u3066\u3044\u308b\u3082\u306e\u3060\u3068\u52d8\u9055\u3044\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u51e6\u7406\u7cfb\u306b\u3088\u3063\u3066\u7d50\u69cb\u547c\u3073\u540d\u304c\u305a\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n### \u975e\u540c\u671f\u51e6\u7406\u306e\u5b9f\u884c\u958b\u59cb\u306e\u30bf\u30a4\u30df\u30f3\u30b0\n\n\u5b9f\u884c\u958b\u59cb\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u306f Java \u306e\u30a4\u30e1\u30fc\u30b8\uff08Future\u4f5c\u3063\u3066\u304b\u3089Executor\u3067\u305f\u305f\u304f\uff09\u306b\u5f15\u304d\u305a\u3089\u308c\u3066\u3044\u305f\u304b\u3089\u3001\u307f\u305f\u3044\u3067\u3059\u3002\u3080\u3057\u308d Future \u4f5c\u3063\u305f\u3089\u305d\u3053\u3067\u52d5\u304d\u59cb\u3081\u308b\u30a4\u30e1\u30fc\u30b8\u306e\u65b9\u304c\u5408\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u8868\u306b\u3057\u3066\u307f\u307e\u3057\u305f\n\n| \u51e6\u7406\u7cfb | \u5b9f\u884c\u958b\u59cb\u306e\u30bf\u30a4\u30df\u30f3\u30b0 | \u30c1\u30a7\u30fc\u30f3\u3059\u308b\u5bfe\u8c61\u306e\u540d\u524d |\n|:----|:----|:---|\n| Java5 | Future \u306b\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3001ExecutorService.execute \u306b Future \u3092\u6e21\u3057\u305f\u6642 | \u30c1\u30a7\u30fc\u30f3\u3067\u304d\u306a\u3044 |\n| Java8 | ComplatableFuture \u306b\u51e6\u7406\u3092\u6e21\u3057\u305f\u6642 | CompletionStage |\n| ECMAScript6 | Promise \u3092 new \u3057\u305f\u3068\u304d? | Promise |\n| Deferred | Future \u306e then \u3092\u547c\u3073\u51fa\u3057\u305f\uff08\u5b9a\u7fa9\u3057\u305f\uff09\u6642? | Promise |\n| scala | Future \u3092\u751f\u6210\u3057\u305f\u6642 | Future |\n\n\n### Promise \u3068 Future \u306e\u95a2\u4fc2\u306e\u30a4\u30e1\u30fc\u30b8\n\n\u300cPromise \u304c \u4e00\u56de\u3060\u3051\u306e\u6210\u529f\u30fb\u5931\u6557\u3092\u4fdd\u969c\u3059\u308b\u300d \u3068\u3044\u3046\u8aac\u660e\u3082\u7d0d\u5f97\u306f\u3057\u305f\u306e\u3067\u3059\u304c\u3001Future \u3068\u306e\u30bb\u30c3\u30c8\u3067\u306e\u3068\u3089\u3048\u65b9\u3068\u3057\u3066\u306f Future \u3068 Promise \u3068\u72ec\u7acb\u3057\u305f\u5225\u7269\u304c\u3042\u308b\u3068\u3044\u3046\u3088\u308a\u3082\u3001\n\n* Promise \u306f Future \u306e\u6027\u8cea\u306e\u3053\u3068\n* Future \u306b\u306f\u5358\u4f53\u306e Future \u3068\u300ePromise\u4ed8\u304d\u306e Future\u300f\u3068\u304c\u3042\u308b\n* Promise\u4ed8\u304d\u306e Future \u304c\u300c\u4e00\u56de\u3060\u3051\u6210\u529f\u304b\u5931\u6557\u304b\u3059\u308b\u300d\n* \u51e6\u7406\u3092\u30c1\u30a7\u30fc\u30f3\u3057\u3066\u3044\u304f\u5bfe\u8c61\u306f Future\n\n\u3068\u3044\u3046\u7406\u89e3\u304c\u81ea\u5206\u306b\u306f\u30b9\u30c3\u30ad\u30ea\u6765\u307e\u3057\u305f\u3002\u591a\u5206\u8272\u3005\u306a\u8aac\u660e\u3082\u305d\u3046\u3044\u3046\u3053\u3068\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u8179\u306b\u843d\u3061\u3066\u306a\u304b\u3063\u305f\u3067\u3059 ^^;\n\n### Promise \u306e\u4f5c\u308a\u65b9\u306e\u30a4\u30e1\u30fc\u30b8\n\n* \u4f55\u3089\u304b\u306e\u30b3\u30f3\u30c6\u30ca\u7684\u306a\u3082\u306e\u306e\u4e2d\u3067 Promise \u3092\u4f5c\u3063\u3066\u304a\u304f\u3002\n* \u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u3067 Future \u3092\u4f5c\u3063\u3066\u3001\u4e2d\u3067\u91cd\u3044\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u5148\u307b\u3069\u306e Promise \u3092\u7d42\u4e86\u3055\u305b\u308b\u3002\n* \u53d7\u3051\u5074\u306f \u30b3\u30f3\u30c6\u30ca\u304b\u3089 Promise \u3092\u53d6\u308a\u51fa\u3057\u3066\u5f8c\u7d9a\u51e6\u7406\u3092\u30c1\u30a7\u30fc\u30f3\u3057\u3066\u3044\u304f\n\n| \u51e6\u7406\u7cfb    | \u30b3\u30f3\u30c6\u30ca\u7684\u306a\u3082\u306e | \u91cd\u3044\u51e6\u7406\u306e\u6e21\u3057\u65b9 | \u30c1\u30a7\u30fc\u30f3\u5bfe\u8c61\u306e\u53d6\u308a\u51fa\u3057\u65b9 | \u30c1\u30a7\u30fc\u30f3\u65b9\u6cd5 |\n|:----|:---|:---|:---|:---|\n| ECMAScript6 | Promise | `p = new Promise(func(res,rej) { ...; res(r) })` | p | p.then | \n| Deffered | $.Deffered | `d = $.Deffered(func(success,err) { ...; success(r) })` | `p = d.promise` | p.then |\n| scala \u306e Promise  | Future\u3092\u4f5c\u308b\u305f\u3081\u306e\u81ea\u4f5c\u95a2\u6570 | `val p = Promise; Future { ...; p.success(r) }`   | `f = p.future` | `f.map` |\n\n# \u5bbf\u984c\n\n* Java8 \u306e Promise \u306e\u6709\u7121\u306b\u3064\u3044\u3066\u307e\u3060\u3061\u3083\u3093\u3068\u8abf\u3079\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6c17\u4ed8\u304d\u307e\u3057\u305f\u3002\n* Play2Java \u3084 Rx\u3082\u8abf\u3079\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u3064\u3064\u653e\u7f6e\n", "tags": ["Scala2.10", "promise", "future", "\u975e\u540c\u671f\u51e6\u7406"]}