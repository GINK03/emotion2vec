{"context": "\n\n\u306f\u3058\u3081\u306b\n\n\u5148\u65e5 NHK ETV \u3067\u653e\u9001\u3055\u308c\u305f \"\u5927\u4eba\u306e\u30d4\u30bf\u30b4\u30e9\u30b9\u30a4\u30c3\u30c1\" \u3067 \"\u30d4\u30fc\u30de\u30f3\u3068\u30cf\u30c8\u3068\u6570\u5b66\" \u3068\u984c\u3057\u3066 \"\u30d4\u30fc\u30de\u30f3\u306e\u888b\u304c\u3069\u308c\u3082\u307b\u307c\u540c\u3058\u91cd\u3055\u306b\u306a\u308b\u4ed5\u7d44\u307f\" \u306b\u3064\u3044\u3066\u89e3\u8aac\u304c\u3042\u308a\u9762\u767d\u304b\u3063\u305f\u3002\n\n\n\u30d4\u30fc\u30de\u30f3\u306e\u888b\u304c\u3069\u308c\u3082\u307b\u307c\u540c\u3058\u91cd\u3055\u306b\u306a\u308b\u4ed5\u7d44\u307f\n\n12\u500b\u306e\u30d4\u30fc\u30de\u30f3\u3092 \"\u7d44\u307f\u5408\u308f\u305b\u8a08\u91cf\u88c5\u7f6e\" \u306e\u4e0a\u306b\u7f6e\u304f\u3068 150g \u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u3092\u8a08\u7b97\u3057\u3066\u6392\u51fa\u3059\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\"\u7d44\u307f\u5408\u308f\u305b\u304c\u306a\u3044\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u306f\uff1f\" \u3068\u3044\u3046\u554f\u306b\u5bfe\u3057\u3066\u306f \"98% \u306e\u78ba\u7387\u3067\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308b\u3053\u3068\u304c\u6570\u5b66\u304c\u4fdd\u8a3c\u3057\u3066\u3044\u308b\" \u3068\u3044\u3046\u3053\u3068\u3002\n\"98%\" \u306e\u6839\u62e0\u304c\u77e5\u308a\u305f\u304b\u3063\u305f\u304c\u78ba\u7387\u306e\u8a08\u7b97\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b Go \u8a00\u8a9e\u3067\u8a66\u3057\u3066\u691c\u8a3c\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\n\u89e3\u6cd5\n\n\u3068\u308a\u3042\u3048\u305a\u3059\u3050\u601d\u3044\u3064\u3044\u305f\u306e\u306f\u611a\u76f4\u306b\u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u8a66\u3059\u30d1\u30bf\u30fc\u30f3\u3002\n\ntogetter \u307f\u3066\u305f\u3089 \"subset sum\" \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\u691c\u7d22\u3002\n\n\u90e8\u5206\u548c\u554f\u984c \u3068\u3044\u3046\u306e\u3092\u77e5\u3063\u305f\u306e\u3067\u307e\u305f\u691c\u7d22\u3057\u3066 \u52d5\u7684\u8a08\u753b\u6cd5 \u3067\u306e\u89e3\u6cd5\u304c\u308f\u304b\u3063\u305f\u306e\u3067 Go \u8a00\u8a9e\u306b\u79fb\u690d\u3057\u3066\u307f\u305f\u3002\n\n\n\u691c\u8a3c\u30b3\u30fc\u30c9\n\n\u30d4\u30fc\u30de\u30f3\u306e\u91cd\u3055\u306f\u9069\u5f53\u306b\u4e0a\u9650\u3068\u4e0b\u9650\u3092\u8a2d\u5b9a\u3057\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u3057\u3066\u307f\u305f\u3002\n\nThe Go Playground \u3067\u5b9f\u969b\u306b\u8a66\u305b\u308b\u3002\n\n\nPlayground \u306f\u73fe\u5728\u6642\u523b\u304c\u56fa\u5b9a\u3067\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3068 rand \u304c\u6b63\u5e38\u306b\u52b9\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u4f55\u5ea6\u304b\u8a66\u3059\u306a\u3089\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3068\u304b\u306e\u65b9\u304c\u826f\u3044\u3002\n\n\n\npackage main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"sort\"\n    \"time\"\n)\n\ntype SubsetSumProblem struct {\n    Nums   []int\n    Target int\n}\n\nfunc NewSubsetSumProblem(nums []int, target int) *SubsetSumProblem {\n    sort.Ints(nums)\n    s := &SubsetSumProblem{Nums: nums, Target: target}\n    return s\n}\n\nfunc (s *SubsetSumProblem) Solve() []int {\n    work := make([]int, s.Target+1, s.Target+1)\n    work[0] = 0\n    for i := 1; i < len(work); i++ {\n        work[i] = -1\n    }\n    for _, n := range s.Nums {\n        for i := s.Target; i >= 0; i-- {\n            if work[i] == -1 {\n                continue\n            }\n            if i+n <= s.Target && work[i+n] == -1 {\n                work[i+n] = n\n            }\n        }\n        if work[s.Target] != -1 {\n            break\n        }\n    }\n    return s.ToResult(work)\n}\n\nfunc (s *SubsetSumProblem) ToResult(work []int) []int {\n    result := []int{}\n    if work[s.Target] != -1 {\n        for s.Target > 0 {\n            result = append(result, work[s.Target])\n            s.Target -= work[s.Target]\n        }\n    }\n    return result\n}\n\n// \u8a66\u884c\u56de\u6570\nconst sample = 10000\n\n// \u5019\u88dc\u306b\u306a\u308b\u30d4\u30fc\u30de\u30f3\u306e\u500b\u6570\nconst length = 12\n\n// \u6700\u5c0f\u306e\u30d4\u30fc\u30de\u30f3\u306e\u91cd\u3055\nconst lowest = 20\n\n// \u6700\u5927\u306e\u30d4\u30fc\u30de\u30f3\u306e\u91cd\u3055\nconst highest = 60\n\n// \u5408\u8a08\u306e\u91cd\u3055\nconst target = 150\n\nfunc main() {\n    rand.Seed(time.Now().Unix())\n    count := 0\n    for i := 0; i < sample; i++ {\n        p := make([]int, length, length)\n        for i := range p {\n            p[i] = rand.Intn(highest-lowest) + lowest\n        }\n        s := NewSubsetSumProblem(p, target)\n        result := s.Solve()\n        if len(result) == 0 {\n            count++\n        }\n    }\n    percent := 100.0 - (float32(count) / float32(sample) * 100.0)\n    fmt.Printf(\"%d \u56de\u6210\u529f (%.1f%%)\", sample - count, percent)\n}\n\n\n\u7d50\u679c\n\n\u524d\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u4f55\u5ea6\u304b\u65bd\u884c\u3057\u3066\u307f\u308b\u3068\u3001\u3060\u3044\u305f\u3044 99.7% \u524d\u5f8c\u306e\u7d50\u679c\u306b\u306a\u3063\u305f\u3002\n\u6700\u5927\u6700\u5c0f\u306e\u91cd\u3055\u3092\u8abf\u6574\u3059\u308b\u3068 98% \u306b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u305f\u306e\u3067\u524d\u63d0\u6761\u4ef6\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u3002\n\u30d4\u30fc\u30de\u30f3\u306f\u898f\u683c\u304c\u3042\u308b\u3060\u308d\u3046\u3057\u3001\u6b63\u898f\u4e71\u6570\u3068\u304b\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u91cd\u3055\u3092\u51fa\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u6c17\u304c\u3059\u308b\u3057\u3002\n\n\n\u304a\u308f\u308a\u306b\n\n\u52d5\u7684\u8a08\u753b\u6cd5\u304c\u3088\u304f\u3067\u304d\u3066\u3044\u3066\u611f\u52d5\u3057\u305f\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3061\u3083\u3093\u3068\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3002\n\u90e8\u5206\u548c\u554f\u984c\u306e\u52d5\u7684\u8a08\u753b\u6cd5\u306b\u3088\u308b\u89e3\u6cd5\u306e\u89e3\u8aac\u306f \u3053\u3061\u3089 \u306e PDF \u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3002\n\n# \u306f\u3058\u3081\u306b\n\n* \u5148\u65e5 NHK ETV \u3067\u653e\u9001\u3055\u308c\u305f \"\u5927\u4eba\u306e\u30d4\u30bf\u30b4\u30e9\u30b9\u30a4\u30c3\u30c1\" \u3067 \"\u30d4\u30fc\u30de\u30f3\u3068\u30cf\u30c8\u3068\u6570\u5b66\" \u3068\u984c\u3057\u3066 \"\u30d4\u30fc\u30de\u30f3\u306e\u888b\u304c\u3069\u308c\u3082\u307b\u307c\u540c\u3058\u91cd\u3055\u306b\u306a\u308b\u4ed5\u7d44\u307f\" \u306b\u3064\u3044\u3066\u89e3\u8aac\u304c\u3042\u308a\u9762\u767d\u304b\u3063\u305f\u3002\n\n# \u30d4\u30fc\u30de\u30f3\u306e\u888b\u304c\u3069\u308c\u3082\u307b\u307c\u540c\u3058\u91cd\u3055\u306b\u306a\u308b\u4ed5\u7d44\u307f\n\n* 12\u500b\u306e\u30d4\u30fc\u30de\u30f3\u3092 \"\u7d44\u307f\u5408\u308f\u305b\u8a08\u91cf\u88c5\u7f6e\" \u306e\u4e0a\u306b\u7f6e\u304f\u3068 150g \u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u3092\u8a08\u7b97\u3057\u3066\u6392\u51fa\u3059\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n* \"\u7d44\u307f\u5408\u308f\u305b\u304c\u306a\u3044\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u306f\uff1f\" \u3068\u3044\u3046\u554f\u306b\u5bfe\u3057\u3066\u306f \"98% \u306e\u78ba\u7387\u3067\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308b\u3053\u3068\u304c\u6570\u5b66\u304c\u4fdd\u8a3c\u3057\u3066\u3044\u308b\" \u3068\u3044\u3046\u3053\u3068\u3002\n* \"98%\" \u306e\u6839\u62e0\u304c\u77e5\u308a\u305f\u304b\u3063\u305f\u304c\u78ba\u7387\u306e\u8a08\u7b97\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b Go \u8a00\u8a9e\u3067\u8a66\u3057\u3066\u691c\u8a3c\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n# \u89e3\u6cd5\n\n* \u3068\u308a\u3042\u3048\u305a\u3059\u3050\u601d\u3044\u3064\u3044\u305f\u306e\u306f\u611a\u76f4\u306b\u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u8a66\u3059\u30d1\u30bf\u30fc\u30f3\u3002\n* [togetter](https://togetter.com/li/1066394) \u307f\u3066\u305f\u3089 \"subset sum\" \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\u691c\u7d22\u3002\n* [\u90e8\u5206\u548c\u554f\u984c](https://ja.wikipedia.org/wiki/%E9%83%A8%E5%88%86%E5%92%8C%E5%95%8F%E9%A1%8C) \u3068\u3044\u3046\u306e\u3092\u77e5\u3063\u305f\u306e\u3067\u307e\u305f\u691c\u7d22\u3057\u3066 [\u52d5\u7684\u8a08\u753b\u6cd5](http://gushwell.ifdef.jp/etude/SubsetSum.html) \u3067\u306e\u89e3\u6cd5\u304c\u308f\u304b\u3063\u305f\u306e\u3067 Go \u8a00\u8a9e\u306b\u79fb\u690d\u3057\u3066\u307f\u305f\u3002\n\n# \u691c\u8a3c\u30b3\u30fc\u30c9\n\n* \u30d4\u30fc\u30de\u30f3\u306e\u91cd\u3055\u306f\u9069\u5f53\u306b\u4e0a\u9650\u3068\u4e0b\u9650\u3092\u8a2d\u5b9a\u3057\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u3057\u3066\u307f\u305f\u3002\n* [The Go Playground](https://play.golang.org/p/bL-IkwUvd6) \u3067\u5b9f\u969b\u306b\u8a66\u305b\u308b\u3002\n  * Playground \u306f\u73fe\u5728\u6642\u523b\u304c\u56fa\u5b9a\u3067\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3068 rand \u304c\u6b63\u5e38\u306b\u52b9\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u4f55\u5ea6\u304b\u8a66\u3059\u306a\u3089\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3068\u304b\u306e\u65b9\u304c\u826f\u3044\u3002\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"time\"\n)\n\ntype SubsetSumProblem struct {\n\tNums   []int\n\tTarget int\n}\n\nfunc NewSubsetSumProblem(nums []int, target int) *SubsetSumProblem {\n\tsort.Ints(nums)\n\ts := &SubsetSumProblem{Nums: nums, Target: target}\n\treturn s\n}\n\nfunc (s *SubsetSumProblem) Solve() []int {\n\twork := make([]int, s.Target+1, s.Target+1)\n\twork[0] = 0\n\tfor i := 1; i < len(work); i++ {\n\t\twork[i] = -1\n\t}\n\tfor _, n := range s.Nums {\n\t\tfor i := s.Target; i >= 0; i-- {\n\t\t\tif work[i] == -1 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif i+n <= s.Target && work[i+n] == -1 {\n\t\t\t\twork[i+n] = n\n\t\t\t}\n\t\t}\n\t\tif work[s.Target] != -1 {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn s.ToResult(work)\n}\n\nfunc (s *SubsetSumProblem) ToResult(work []int) []int {\n\tresult := []int{}\n\tif work[s.Target] != -1 {\n\t\tfor s.Target > 0 {\n\t\t\tresult = append(result, work[s.Target])\n\t\t\ts.Target -= work[s.Target]\n\t\t}\n\t}\n\treturn result\n}\n\n// \u8a66\u884c\u56de\u6570\nconst sample = 10000\n\n// \u5019\u88dc\u306b\u306a\u308b\u30d4\u30fc\u30de\u30f3\u306e\u500b\u6570\nconst length = 12\n\n// \u6700\u5c0f\u306e\u30d4\u30fc\u30de\u30f3\u306e\u91cd\u3055\nconst lowest = 20\n\n// \u6700\u5927\u306e\u30d4\u30fc\u30de\u30f3\u306e\u91cd\u3055\nconst highest = 60\n\n// \u5408\u8a08\u306e\u91cd\u3055\nconst target = 150\n\nfunc main() {\n\trand.Seed(time.Now().Unix())\n\tcount := 0\n\tfor i := 0; i < sample; i++ {\n\t\tp := make([]int, length, length)\n\t\tfor i := range p {\n\t\t\tp[i] = rand.Intn(highest-lowest) + lowest\n\t\t}\n\t\ts := NewSubsetSumProblem(p, target)\n\t\tresult := s.Solve()\n\t\tif len(result) == 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\tpercent := 100.0 - (float32(count) / float32(sample) * 100.0)\n\tfmt.Printf(\"%d \u56de\u6210\u529f (%.1f%%)\", sample - count, percent)\n}\n```\n\n# \u7d50\u679c\n\n* \u524d\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u4f55\u5ea6\u304b\u65bd\u884c\u3057\u3066\u307f\u308b\u3068\u3001\u3060\u3044\u305f\u3044 99.7% \u524d\u5f8c\u306e\u7d50\u679c\u306b\u306a\u3063\u305f\u3002\n* \u6700\u5927\u6700\u5c0f\u306e\u91cd\u3055\u3092\u8abf\u6574\u3059\u308b\u3068 98% \u306b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u305f\u306e\u3067\u524d\u63d0\u6761\u4ef6\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u3002\n* \u30d4\u30fc\u30de\u30f3\u306f\u898f\u683c\u304c\u3042\u308b\u3060\u308d\u3046\u3057\u3001\u6b63\u898f\u4e71\u6570\u3068\u304b\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u91cd\u3055\u3092\u51fa\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u6c17\u304c\u3059\u308b\u3057\u3002\n\n# \u304a\u308f\u308a\u306b\n\n* \u52d5\u7684\u8a08\u753b\u6cd5\u304c\u3088\u304f\u3067\u304d\u3066\u3044\u3066\u611f\u52d5\u3057\u305f\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3061\u3083\u3093\u3068\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3002\n* \u90e8\u5206\u548c\u554f\u984c\u306e\u52d5\u7684\u8a08\u753b\u6cd5\u306b\u3088\u308b\u89e3\u6cd5\u306e\u89e3\u8aac\u306f [\u3053\u3061\u3089](http://www.dais.is.tohoku.ac.jp/~shioura/teaching/ad09/ad09-08.pdf) \u306e PDF \u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3002\n\n\n", "tags": ["Go", "golang", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}