{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306fQt\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b QFileSystemModel\u306e\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u30e2\u30c7\u30eb\u3092QAbstractItemModel\u304b\u3089\u81ea\u4f5c\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u3053\u3068\u3092\u307e\u3068\u3081\u305f\u30e1\u30e2\u3067\u3059\u3002\n\nQAbstractItemModel\u3068QModelIndex\nQAbstractItemModel\u306f\u3001QListView\u3001QTableView\u3001QTreeView\u306a\u3069\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\u884c(row)\u3001\u5217(column)\u3001\u89aa(parent)\u306e3\u3064\u306e\u60c5\u5831\u3067\u30a2\u30a4\u30c6\u30e0\u3092\u7279\u5b9a\u3059\u308b\u67d4\u8edf\u306a\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u3066\u30ea\u30b9\u30c8\u30fb\u8868\u30fb\u6728\u3092\u307e\u3068\u3081\u3066\u6271\u3048\u307e\u3059\u3002\n\n(Qt Documentation - Model/View Programming\u304b\u3089\u5f15\u7528)\n\u30e2\u30c7\u30eb\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u7279\u5b9a\u3059\u308b3\u3064\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u547c\u3073\u3001QModelIndex\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u4f5c\u6210\u3057\u305fQModelIndex()\u306f\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8868\u3057\u3001\u7279\u5225\u306a\u610f\u5473\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30eb\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8868\u3059\n\n\n\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u89aa\u306eQModelIndex\u304c\u7121\u52b9\u306a\u5834\u5408\u3001\u305d\u306e\u30a2\u30a4\u30c6\u30e0\u304c\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb(\u30eb\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\u306e\u5b50)\u3067\u3042\u308b\u3053\u3068\u3092\u8868\u3057\u307e\u3059\n\n\n\u7121\u52b9\u306a\u30a2\u30a4\u30c6\u30e0\u3092\u8868\u3059\n\n\n\u89aa\u4ee5\u5916\u3067\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u8fd4\u3063\u305f\u5834\u5408\u3001\u305d\u306e\u3088\u3046\u306a\u30a2\u30a4\u30c6\u30e0\u304c\u7121\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\n\n\n\nQModelIndex\u306f\u3001\u5185\u90e8\u8868\u73fe\u306e\u30dd\u30a4\u30f3\u30bf(internalPointer)\u307e\u305f\u306fID(internalId)\u3092\u683c\u7d0d\u3067\u304d\u307e\u3059\u3002\n\n\u57fa\u672c\u30af\u30e9\u30b9\u3092\u6c7a\u3081\u308b\n\u8868\u73fe\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u30ea\u30b9\u30c8\u306e\u5834\u5408\u306fQAbstractListModel\u3001\u8868\u306e\u5834\u5408\u306fQAbstractTableModel\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306fQAbstractItemModel\u306e\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u3001\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u3092\u3042\u308b\u7a0b\u5ea6\u5b9f\u88c5\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u6728\u306e\u5834\u5408\u306fQAbstractItemModel\u3092\u76f4\u63a5\u62e1\u5f35\u3057\u307e\u3059\u3002\n\n\n\n\u30c7\u30fc\u30bf\u69cb\u9020\n\u57fa\u672c\u30af\u30e9\u30b9\n\n\n\n\n\u30ea\u30b9\u30c8\n\nQAbstractListModel \u307e\u305f\u306f QAbstractItemModel\n\n\n\n\u8868\n\nQAbstractTableModel \u307e\u305f\u306f QAbstractItemModel\n\n\n\n\u6728\nQAbstractItemModel\n\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u8a2d\u8a08\n\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u968e\u5c64\u69cb\u9020\u3092\u8868\u3059\u30c4\u30ea\u30fc\u30e2\u30c7\u30ebWidgetHierarchyModel\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4ed5\u69d8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n\nQWidget*\u3092\u76f4\u63a5internalPointer\u306b\u683c\u7d0d\n\u5217\u6570\u306f1\n\u884c\u6570\u306f\u5b50\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u6570\n\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30a2\u30a4\u30c6\u30e0(\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8)\u306f1\u3064\u3001\u30e1\u30f3\u30d0\u30fc\u5909\u6570topWidget\u3067\u4fdd\u6301\n\u5404\u30a2\u30a4\u30c6\u30e0\u306e\u6587\u5b57\u5217\u8868\u73fe\u306f\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u30af\u30e9\u30b9\u540d\n\n\n\u4eee\u60f3\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\nQAbstractItemModel\u304c\u6301\u3064\u4eee\u60f3\u95a2\u6570\u306f\u4e3b\u306b3\u7a2e\u985e\u306b\u5206\u3051\u3089\u308c\u307e\u3059\u3002\n\n\u30a2\u30a4\u30c6\u30e0\u30c7\u30fc\u30bf\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0(\u5fc5\u9808)\n\u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570\u3084\u5185\u5bb9\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u95a2\u6570\n\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u751f\u6210(\u5fc5\u9808)\n\u30e2\u30c7\u30eb\u5185\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8868\u3059QModelIndex\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\n\u30c9\u30e9\u30c3\u30b0\u30a2\u30f3\u30c9\u30c9\u30ed\u30c3\u30d7\u30b5\u30dd\u30fc\u30c8\n\u4eca\u56de\u306f\u6271\u3044\u307e\u305b\u3093\n\n\n\u30a2\u30a4\u30c6\u30e0\u30c7\u30fc\u30bf\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0(\u5fc5\u9808)\n\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u5834\u5408\u3001data()\u3001rowCount()\u3001columnCount()\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u306a\u306e\u3067\u5b9f\u88c5\u306f\u5fc5\u9808\u3067\u3059\u3002\n\u30d8\u30c3\u30c0\u30fc\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306fheaderData()\u3092\u5b9f\u88c5\u3057\u307e\u3059(\u57fa\u672c\u7684\u306b\u306f\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3057\u3087\u3046)\u3002\nflags()\u306f\u3001\u5404\u30a2\u30a4\u30c6\u30e0\u306e\u30d5\u30e9\u30b0(\u7de8\u96c6\u53ef\u80fd\u304b\u3001\u9078\u629e\u53ef\u80fd\u304b\u3001\u306a\u3069)\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u3067\u306fQt::ItemIsEnabled | Qt::ItemIsSelectable\u3092\u8fd4\u3057\u307e\u3059\u3002\n\ndata()\nQVariant QAbstractItemModel::data(const QModelIndex &index, int role = Qt::DisplayRole) const\n\n\u30a2\u30a4\u30c6\u30e0\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\u7b2c1\u5f15\u6570index\u306f\u8981\u6c42\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7121\u52b9\u306a\u3089\u7bc4\u56f2\u5916\u3067\u3059\u3002\n\u7b2c2\u5f15\u6570role\u306f\u8fd4\u3059\u30c7\u30fc\u30bf\u306e\u4f7f\u7528\u76ee\u7684\u3067\u3059\u3002\u30c4\u30fc\u30eb\u30c1\u30c3\u30d7\u7528\u306e\u6587\u5b57\u5217\u3092\u5225\u306b\u8fd4\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306f\u3053\u308c\u3067\u5206\u5c90\u3057\u307e\u3059\u3002\u6700\u4f4e\u3067\u3082Qt::DisplayRole\u306e\u5834\u5408\u306f\u5024\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u5b9f\u7528\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u4eca\u56de\u306frole\u306fQt::DisplayRole\u306e\u307f\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u306b\u3057\u3001\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u30af\u30e9\u30b9\u540d\u3092\u8fd4\u3057\u307e\u3059\u3002internalPointer()\u304b\u3089\u306estatic_cast\u306f\u983b\u51fa\u306a\u306e\u3067\u30e9\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\n\nWidgetHierarchyModel.cpp\nQWidget* widget(const QModelIndex &index) const\n{\n    return static_cast<QWidget*>(index.internalPointer());\n}\n\nQVariant data(const QModelIndex &index, int role) const override\n{\n    if( role != Qt::DisplayRole || !index.isValid() ) return QVariant();\n    return widget(index)->metaObject()->className();\n}\n\n\n\nheaderData()\nQVariant QAbstractItemModel::headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const\n\norientation\u306fQt::Horizontal\u307e\u305f\u306fQt::Vertical\u3067\u3059\u3002\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u3001section\u306f\u5217\u307e\u305f\u306f\u884c\u3092\u8868\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u56fa\u5b9a\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nWidgetHierarchyModel.cpp\nQVariant WidgetHierarchyModel::headerData(int, Qt::Orientation orientation, int role) const override\n{\n    if( orientation != Qt::Horizontal || role != Qt::DisplayRole ) return QVariant();\n    return QString(\"Widget Hierarchy\");\n}\n\n\n\nrowCount()\u30fbcolumnCount()\nint QAbstractItemModel::rowCount(const QModelIndex &parent = QModelIndex()) const\nint QAbstractItemModel::columnCount(const QModelIndex &parent = QModelIndex()) const\n\nparent\u3092\u89aa\u306b\u6301\u3064\u30a2\u30a4\u30c6\u30e0\u306e\u884c\u6570\u30fb\u5217\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002parent\u304c\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5834\u5408\u3001\u89aa\u304c\u306a\u3044(\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u3042\u308b)\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\nWidgetHierarchyModel\u3067\u306f\u884c\u6570\u3092\u5b50\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u6570\u3068\u3057\u3001\u5217\u6570\u306f1\u3068\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u30eb\u30fc\u30c8\u76f4\u4e0b\u306e\u884c\u6570\u306f1\u3068\u3057\u307e\u3059\u3002\nfindChildren\u306f\u983b\u51fa\u306e\u305f\u3081\u30e9\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\n\nWidgetHierarchyModel.cpp\n\nQList<QWidget*> WidgetHierarchyModel::childrenOf(const QWidget* parent)\n{\n    return parent->findChildren<QWidget*>(QString(), Qt::FindDirectChildrenOnly);\n}\n\nint WidgetHierarchyModel::rowCount(const QModelIndex &parent) const override\n{\n    return parent.isValid() ? childrenOf(widget(parent)).size() : 1;\n}\n\nint WidgetHierarchyModel::columnCount(const QModelIndex &) const override\n{\n    return 1;\n}\n\n\n\n\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u751f\u6210(\u5fc5\u9808)\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u89aa\u30fb\u5b50\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u4fbf\u5229\u306a\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u95a2\u6570createIndex\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u7b2c3\u5f15\u6570ptr\u306b\u6e21\u3057\u305f\u30dd\u30a4\u30f3\u30bf\u304cinternalPointer\u306b\u306a\u308a\u307e\u3059\u3002\nQModelIndex QAbstractItemModel::createIndex(int row, int column, void *ptr = nullptr) const\n\nWidgetHierarchyModel\u3067\u306frow\u306f0\u306b\u56fa\u5b9a\u3067\u3059\u3002\n\nindex()\nQModelIndex QAbstractItemModel::index(int row, int column, const QModelIndex &parent = QModelIndex()) const\n\nrow\u3001column\u3001parent\u3067\u7279\u5b9a\u3055\u308c\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002parent\u304c\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5834\u5408\u3001\u89aa\u304c\u306a\u3044(\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u3042\u308b)\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\nWidgetHierarchyModel\u3067\u306f\u89aa\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306b\u5bfe\u3057\u3066findChildren\u3057\u3066\u53d6\u5f97\u3057\u305f\u30ea\u30b9\u30c8\u4e2d\u306erow\u756a\u76ee\u3092\u8fd4\u3057\u307e\u3059\u3002\nQModelIndex WidgetHierarchyModel::index(int row, int column, const QModelIndex &parent) const override\n{\n    if( !parent.isValid() )\n    {\n        // \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306f0\u884c0\u5217\u76ee\u3060\u3051\u30a2\u30a4\u30c6\u30e0\u304c\u3042\u308b\n        if( row == 0 && column == 0 )\n        {\n            return createIndex(0, 0, topWidget);\n        }\n        return QModelIndex();\n    }\n    // \u5217\u306f1\u5217\u3060\u3051\n    if( column != 0 || parent.column() != 0 )\n    {\n        return QModelIndex();\n    }\n    QList<QWidget*> children = childrenOf(widget(parent));\n    return row < children.size() ? createIndex(row, 0, children.at(row)) : QModelIndex();\n}\n\n\nparent()\nQModelIndex QAbstractItemModel::parent(const QModelIndex &index) const\n\nindex\u304c\u6307\u3059\u30a2\u30a4\u30c6\u30e0\u306e\u89aa\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002index\u304c\u6307\u3059\u30a2\u30a4\u30c6\u30e0\u304c\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u5834\u5408\u306f\u30eb\u30fc\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9)\u3092\u8fd4\u3057\u307e\u3059\u3002\ncreateIndex\u3092\u547c\u3076\u306b\u306f\u3001\u89aa\u30a2\u30a4\u30c6\u30e0\u306e\u4e2d\u3067index\u304c\u6307\u3059\u30a2\u30a4\u30c6\u30e0\u304c\u4f55\u884c\u4f55\u5217\u306b\u3042\u308b\u306e\u304b\u6c42\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nWidgetHierarchyModel\u3067\u306fQList\u306eindexOf\u3067\u6c42\u3081\u307e\u3059\u3002\n\nWidgetHierarchyModel.cpp\nQModelIndex WidgetHierarchyModel::parent(const QModelIndex &index) const override\n{\n    if( index.isValid() )\n    {\n        QWidget* self = widget(index);\n        if( self != topWidget )\n        {\n            QWidget* parent = self->parentWidget();\n            int row = childrenOf(parent).indexOf(self);\n            if( row > -1 )\n            {\n                return createIndex(row, 0, parent);\n            }\n        }\n    }\n    return QModelIndex();\n}\n\n\n\n\u5b8c\u6210\n\u30e2\u30c7\u30eb\u3092QTreeView\u306b\u8a2d\u5b9a\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\n\u5168\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\nWidgetHierarchyModel.cpp\n#include <QApplication>\n#include <QVBoxLayout>\n#include <QTreeView>\n\nclass WidgetHierarchyModel : public QAbstractItemModel\n{\n   public:\n    WidgetHierarchyModel(QWidget* topWidget):topWidget(topWidget)\n    {\n    }\n\n    QWidget* widget(const QModelIndex &index) const\n    {\n        return static_cast<QWidget*>(index.internalPointer());\n    }\n\n    QVariant data(const QModelIndex &index, int role) const override\n    {\n        if( role != Qt::DisplayRole || !index.isValid() ) return QVariant();\n        return widget(index)->metaObject()->className();\n    }\n\n    QVariant headerData(int, Qt::Orientation orientation, int role) const override\n    {\n        if( orientation != Qt::Horizontal || role != Qt::DisplayRole ) return QVariant();\n        return QString(\"Widget Hierarchy\");\n    }\n\n    int rowCount(const QModelIndex &parent) const override\n    {\n        return parent.isValid() ? childrenOf(widget(parent)).size() : 1;\n    }\n\n    int columnCount(const QModelIndex &) const override\n    {\n        return 1;\n    }\n\n    QModelIndex index(int row, int column, const QModelIndex &parent) const override\n    {\n        if( !parent.isValid() )\n        {\n            if( row == 0 && column == 0 )\n            {\n                return createIndex(0, 0, topWidget);\n            }\n            return QModelIndex();\n        }\n        if( column != 0 || parent.column() != 0 )\n        {\n            return QModelIndex();\n        }\n        QList<QWidget*> children = childrenOf(widget(parent));\n        if( row < children.size() )\n        {\n            return createIndex(row, 0, children.at(row));\n        }\n        return QModelIndex();\n    }\n\n    QModelIndex parent(const QModelIndex &index) const override\n    {\n        if( index.isValid() )\n        {\n            QWidget* const self = widget(index);\n            if( self != topWidget )\n            {\n                QWidget* const parent = self->parentWidget();\n                int row = childrenOf(parent).indexOf(self);\n                if( row > -1 )\n                {\n                    return createIndex(row, 0, parent);\n                }\n            }\n        }\n        return QModelIndex();\n    }\n\n  private:\n    static QList<QWidget*> childrenOf(const QWidget* parent)\n    {\n        return parent->findChildren<QWidget*>(QString(), Qt::FindDirectChildrenOnly);\n    }\n\n    QWidget* topWidget;\n};\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n\n    auto window = new QWidget();\n    auto layout = new QVBoxLayout();\n    auto tree   = new QTreeView(window);\n\n    layout->addWidget(tree);\n    window->setLayout(layout);\n\n    auto model = new WidgetHierarchyModel(tree);\n    tree->setModel(model);\n    tree->setHeaderHidden(false);\n    window->show();\n\n    a.exec();\n    delete window;\n\n    return 0;\n}\n\n\n\n\u53c2\u8003\u6587\u732e\n\nQt Documentation - Model/View Programming\n\n# \u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306fQt\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b [QFileSystemModel](http://doc.qt.io/qt-5/qfilesystemmodel.html)\u306e\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u30e2\u30c7\u30eb\u3092[QAbstractItemModel](http://doc.qt.io/qt-5/qabstractitemmodel.html)\u304b\u3089\u81ea\u4f5c\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u3053\u3068\u3092\u307e\u3068\u3081\u305f\u30e1\u30e2\u3067\u3059\u3002\n\n## QAbstractItemModel\u3068QModelIndex\n[QAbstractItemModel](http://doc.qt.io/qt-5/qabstractitemmodel.html)\u306f\u3001`QListView`\u3001`QTableView`\u3001`QTreeView`\u306a\u3069\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\u884c(row)\u3001\u5217(column)\u3001\u89aa(parent)\u306e3\u3064\u306e\u60c5\u5831\u3067\u30a2\u30a4\u30c6\u30e0\u3092\u7279\u5b9a\u3059\u308b\u67d4\u8edf\u306a\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u3066\u30ea\u30b9\u30c8\u30fb\u8868\u30fb\u6728\u3092\u307e\u3068\u3081\u3066\u6271\u3048\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/31974/ead8fc72-a78a-20fe-2d7c-a88b2ba1269e.png)\n([Qt Documentation - Model/View Programming](http://doc.qt.io/qt-5/model-view-programming.html)\u304b\u3089\u5f15\u7528)\n\n\u30e2\u30c7\u30eb\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u7279\u5b9a\u3059\u308b3\u3064\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u547c\u3073\u3001[QModelIndex](http://doc.qt.io/qt-5/qmodelindex.html)\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u4f5c\u6210\u3057\u305f`QModelIndex()`\u306f\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8868\u3057\u3001\u7279\u5225\u306a\u610f\u5473\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n* \u30eb\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8868\u3059\n    * \u3042\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u89aa\u306e`QModelIndex`\u304c\u7121\u52b9\u306a\u5834\u5408\u3001\u305d\u306e\u30a2\u30a4\u30c6\u30e0\u304c\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb(\u30eb\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\u306e\u5b50)\u3067\u3042\u308b\u3053\u3068\u3092\u8868\u3057\u307e\u3059\n* \u7121\u52b9\u306a\u30a2\u30a4\u30c6\u30e0\u3092\u8868\u3059\n    * \u89aa\u4ee5\u5916\u3067\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u8fd4\u3063\u305f\u5834\u5408\u3001\u305d\u306e\u3088\u3046\u306a\u30a2\u30a4\u30c6\u30e0\u304c\u7121\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\n\n[QModelIndex](http://doc.qt.io/qt-5/qmodelindex.html)\u306f\u3001\u5185\u90e8\u8868\u73fe\u306e\u30dd\u30a4\u30f3\u30bf(`internalPointer`)\u307e\u305f\u306fID(`internalId`)\u3092\u683c\u7d0d\u3067\u304d\u307e\u3059\u3002\n\n## \u57fa\u672c\u30af\u30e9\u30b9\u3092\u6c7a\u3081\u308b\n\u8868\u73fe\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u30ea\u30b9\u30c8\u306e\u5834\u5408\u306f[QAbstractListModel](http://doc.qt.io/qt-5/qabstractlistmodel.html)\u3001\u8868\u306e\u5834\u5408\u306f[QAbstractTableModel](http://doc.qt.io/qt-5/qabstracttablemodel.html)\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306f[QAbstractItemModel](http://doc.qt.io/qt-5/qabstractitemmodel.html)\u306e\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u3001\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u3092\u3042\u308b\u7a0b\u5ea6\u5b9f\u88c5\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u6728\u306e\u5834\u5408\u306f[QAbstractItemModel](http://doc.qt.io/qt-5/qabstractitemmodel.html)\u3092\u76f4\u63a5\u62e1\u5f35\u3057\u307e\u3059\u3002\n\n|\u30c7\u30fc\u30bf\u69cb\u9020 |\u57fa\u672c\u30af\u30e9\u30b9|\n|----|-----|\n|\u30ea\u30b9\u30c8|[QAbstractListModel](http://doc.qt.io/qt-5/qabstractlistmodel.html) \u307e\u305f\u306f [QAbstractItemModel](http://doc.qt.io/qt-5/qabstractitemmodel.html)|\n|\u8868|[QAbstractTableModel](http://doc.qt.io/qt-5/qabstracttablemodel.html) \u307e\u305f\u306f [QAbstractItemModel](http://doc.qt.io/qt-5/qabstractitemmodel.html)|\n|\u6728|[QAbstractItemModel](http://doc.qt.io/qt-5/qabstractitemmodel.html)|\n\n# \u30b5\u30f3\u30d7\u30eb\u306e\u8a2d\u8a08\n\n\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u968e\u5c64\u69cb\u9020\u3092\u8868\u3059\u30c4\u30ea\u30fc\u30e2\u30c7\u30eb`WidgetHierarchyModel`\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4ed5\u69d8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n* `QWidget*`\u3092\u76f4\u63a5`internalPointer`\u306b\u683c\u7d0d\n* \u5217\u6570\u306f1\n* \u884c\u6570\u306f\u5b50\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u6570\n* \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30a2\u30a4\u30c6\u30e0(\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8)\u306f1\u3064\u3001\u30e1\u30f3\u30d0\u30fc\u5909\u6570`topWidget`\u3067\u4fdd\u6301\n* \u5404\u30a2\u30a4\u30c6\u30e0\u306e\u6587\u5b57\u5217\u8868\u73fe\u306f\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u30af\u30e9\u30b9\u540d\n\n# \u4eee\u60f3\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\n[QAbstractItemModel](http://doc.qt.io/qt-5/qabstractitemmodel.html)\u304c\u6301\u3064\u4eee\u60f3\u95a2\u6570\u306f\u4e3b\u306b3\u7a2e\u985e\u306b\u5206\u3051\u3089\u308c\u307e\u3059\u3002\n\n* \u30a2\u30a4\u30c6\u30e0\u30c7\u30fc\u30bf\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0(\u5fc5\u9808)  \n    \u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570\u3084\u5185\u5bb9\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u95a2\u6570\n* \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u751f\u6210(\u5fc5\u9808)  \n    \u30e2\u30c7\u30eb\u5185\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8868\u3059`QModelIndex`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\n* \u30c9\u30e9\u30c3\u30b0\u30a2\u30f3\u30c9\u30c9\u30ed\u30c3\u30d7\u30b5\u30dd\u30fc\u30c8  \n    \u4eca\u56de\u306f\u6271\u3044\u307e\u305b\u3093\n\n## \u30a2\u30a4\u30c6\u30e0\u30c7\u30fc\u30bf\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0(\u5fc5\u9808)\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u5834\u5408\u3001[data()](http://doc.qt.io/qt-5/qabstractitemmodel.html#data)\u3001[rowCount()](http://doc.qt.io/qt-5/qabstractitemmodel.html#rowCount)\u3001[columnCount()](http://doc.qt.io/qt-5/qabstractitemmodel.html#columnCount)\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u306a\u306e\u3067\u5b9f\u88c5\u306f\u5fc5\u9808\u3067\u3059\u3002\n\n\u30d8\u30c3\u30c0\u30fc\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f[headerData()](http://doc.qt.io/qt-5/qabstractitemmodel.html#headerData)\u3092\u5b9f\u88c5\u3057\u307e\u3059(\u57fa\u672c\u7684\u306b\u306f\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3057\u3087\u3046)\u3002\n\n[flags()](http://doc.qt.io/qt-5/qabstractitemmodel.html#flags)\u306f\u3001\u5404\u30a2\u30a4\u30c6\u30e0\u306e\u30d5\u30e9\u30b0(\u7de8\u96c6\u53ef\u80fd\u304b\u3001\u9078\u629e\u53ef\u80fd\u304b\u3001\u306a\u3069)\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u3067\u306f`Qt::ItemIsEnabled | Qt::ItemIsSelectable`\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n### data()\n```cpp\nQVariant QAbstractItemModel::data(const QModelIndex &index, int role = Qt::DisplayRole) const\n```\n\n\u30a2\u30a4\u30c6\u30e0\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\n\u7b2c1\u5f15\u6570index\u306f\u8981\u6c42\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7121\u52b9\u306a\u3089\u7bc4\u56f2\u5916\u3067\u3059\u3002\n\n\u7b2c2\u5f15\u6570role\u306f\u8fd4\u3059\u30c7\u30fc\u30bf\u306e\u4f7f\u7528\u76ee\u7684\u3067\u3059\u3002\u30c4\u30fc\u30eb\u30c1\u30c3\u30d7\u7528\u306e\u6587\u5b57\u5217\u3092\u5225\u306b\u8fd4\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306f\u3053\u308c\u3067\u5206\u5c90\u3057\u307e\u3059\u3002\u6700\u4f4e\u3067\u3082`Qt::DisplayRole`\u306e\u5834\u5408\u306f\u5024\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u5b9f\u7528\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u4eca\u56de\u306f`role`\u306f`Qt::DisplayRole`\u306e\u307f\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u306b\u3057\u3001\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u30af\u30e9\u30b9\u540d\u3092\u8fd4\u3057\u307e\u3059\u3002`internalPointer()`\u304b\u3089\u306e`static_cast`\u306f\u983b\u51fa\u306a\u306e\u3067\u30e9\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\n\n```cpp:WidgetHierarchyModel.cpp\nQWidget* widget(const QModelIndex &index) const\n{\n    return static_cast<QWidget*>(index.internalPointer());\n}\n\nQVariant data(const QModelIndex &index, int role) const override\n{\n    if( role != Qt::DisplayRole || !index.isValid() ) return QVariant();\n    return widget(index)->metaObject()->className();\n}\n```\n\n### headerData()\n```cpp\nQVariant QAbstractItemModel::headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const\n```\n`orientation`\u306f`Qt::Horizontal`\u307e\u305f\u306f`Qt::Vertical`\u3067\u3059\u3002\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u3001`section`\u306f\u5217\u307e\u305f\u306f\u884c\u3092\u8868\u3057\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u56fa\u5b9a\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```cpp:WidgetHierarchyModel.cpp\nQVariant WidgetHierarchyModel::headerData(int, Qt::Orientation orientation, int role) const override\n{\n    if( orientation != Qt::Horizontal || role != Qt::DisplayRole ) return QVariant();\n    return QString(\"Widget Hierarchy\");\n}\n```\n\n### rowCount()\u30fbcolumnCount()\n```cpp\nint QAbstractItemModel::rowCount(const QModelIndex &parent = QModelIndex()) const\nint QAbstractItemModel::columnCount(const QModelIndex &parent = QModelIndex()) const\n```\n`parent`\u3092\u89aa\u306b\u6301\u3064\u30a2\u30a4\u30c6\u30e0\u306e\u884c\u6570\u30fb\u5217\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002`parent`\u304c\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5834\u5408\u3001\u89aa\u304c\u306a\u3044(\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u3042\u308b)\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\n\n`WidgetHierarchyModel`\u3067\u306f\u884c\u6570\u3092\u5b50\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u6570\u3068\u3057\u3001\u5217\u6570\u306f1\u3068\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u30eb\u30fc\u30c8\u76f4\u4e0b\u306e\u884c\u6570\u306f1\u3068\u3057\u307e\u3059\u3002\n\n`findChildren`\u306f\u983b\u51fa\u306e\u305f\u3081\u30e9\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\n\n```cpp:WidgetHierarchyModel.cpp\n\nQList<QWidget*> WidgetHierarchyModel::childrenOf(const QWidget* parent)\n{\n    return parent->findChildren<QWidget*>(QString(), Qt::FindDirectChildrenOnly);\n}\n\nint WidgetHierarchyModel::rowCount(const QModelIndex &parent) const override\n{\n    return parent.isValid() ? childrenOf(widget(parent)).size() : 1;\n}\n\nint WidgetHierarchyModel::columnCount(const QModelIndex &) const override\n{\n    return 1;\n}\n```\n\n## \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u751f\u6210(\u5fc5\u9808)\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u89aa\u30fb\u5b50\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u4fbf\u5229\u306a\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u95a2\u6570`createIndex`\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u7b2c3\u5f15\u6570`ptr`\u306b\u6e21\u3057\u305f\u30dd\u30a4\u30f3\u30bf\u304c`internalPointer`\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\nQModelIndex QAbstractItemModel::createIndex(int row, int column, void *ptr = nullptr) const\n```\n\n`WidgetHierarchyModel`\u3067\u306f`row`\u306f0\u306b\u56fa\u5b9a\u3067\u3059\u3002\n\n### index()\n```cpp\nQModelIndex QAbstractItemModel::index(int row, int column, const QModelIndex &parent = QModelIndex()) const\n```\n`row`\u3001`column`\u3001`parent`\u3067\u7279\u5b9a\u3055\u308c\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002`parent`\u304c\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5834\u5408\u3001\u89aa\u304c\u306a\u3044(\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u3042\u308b)\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\n\n`WidgetHierarchyModel`\u3067\u306f\u89aa\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306b\u5bfe\u3057\u3066`findChildren`\u3057\u3066\u53d6\u5f97\u3057\u305f\u30ea\u30b9\u30c8\u4e2d\u306e`row`\u756a\u76ee\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```cpp\nQModelIndex WidgetHierarchyModel::index(int row, int column, const QModelIndex &parent) const override\n{\n    if( !parent.isValid() )\n    {\n        // \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306f0\u884c0\u5217\u76ee\u3060\u3051\u30a2\u30a4\u30c6\u30e0\u304c\u3042\u308b\n        if( row == 0 && column == 0 )\n        {\n            return createIndex(0, 0, topWidget);\n        }\n        return QModelIndex();\n    }\n    // \u5217\u306f1\u5217\u3060\u3051\n    if( column != 0 || parent.column() != 0 )\n    {\n        return QModelIndex();\n    }\n    QList<QWidget*> children = childrenOf(widget(parent));\n    return row < children.size() ? createIndex(row, 0, children.at(row)) : QModelIndex();\n}\n```\n\n### parent()\n```cpp\nQModelIndex QAbstractItemModel::parent(const QModelIndex &index) const\n```\n`index`\u304c\u6307\u3059\u30a2\u30a4\u30c6\u30e0\u306e\u89aa\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002`index`\u304c\u6307\u3059\u30a2\u30a4\u30c6\u30e0\u304c\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u5834\u5408\u306f\u30eb\u30fc\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9)\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n`createIndex`\u3092\u547c\u3076\u306b\u306f\u3001\u89aa\u30a2\u30a4\u30c6\u30e0\u306e\u4e2d\u3067`index`\u304c\u6307\u3059\u30a2\u30a4\u30c6\u30e0\u304c\u4f55\u884c\u4f55\u5217\u306b\u3042\u308b\u306e\u304b\u6c42\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n`WidgetHierarchyModel`\u3067\u306f`QList`\u306e`indexOf`\u3067\u6c42\u3081\u307e\u3059\u3002\n\n```cpp:WidgetHierarchyModel.cpp\nQModelIndex WidgetHierarchyModel::parent(const QModelIndex &index) const override\n{\n    if( index.isValid() )\n    {\n        QWidget* self = widget(index);\n        if( self != topWidget )\n        {\n            QWidget* parent = self->parentWidget();\n            int row = childrenOf(parent).indexOf(self);\n            if( row > -1 )\n            {\n                return createIndex(row, 0, parent);\n            }\n        }\n    }\n    return QModelIndex();\n}\n```\n\n# \u5b8c\u6210\n\n\u30e2\u30c7\u30eb\u3092`QTreeView`\u306b\u8a2d\u5b9a\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/31974/22f60a13-257b-6ac7-c0de-a1b2a4cd706c.png)\n\n\u5168\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```cpp:WidgetHierarchyModel.cpp\n#include <QApplication>\n#include <QVBoxLayout>\n#include <QTreeView>\n\nclass WidgetHierarchyModel : public QAbstractItemModel\n{\n   public:\n    WidgetHierarchyModel(QWidget* topWidget):topWidget(topWidget)\n    {\n    }\n\n    QWidget* widget(const QModelIndex &index) const\n    {\n        return static_cast<QWidget*>(index.internalPointer());\n    }\n\n    QVariant data(const QModelIndex &index, int role) const override\n    {\n        if( role != Qt::DisplayRole || !index.isValid() ) return QVariant();\n        return widget(index)->metaObject()->className();\n    }\n\n    QVariant headerData(int, Qt::Orientation orientation, int role) const override\n    {\n        if( orientation != Qt::Horizontal || role != Qt::DisplayRole ) return QVariant();\n        return QString(\"Widget Hierarchy\");\n    }\n\n    int rowCount(const QModelIndex &parent) const override\n    {\n        return parent.isValid() ? childrenOf(widget(parent)).size() : 1;\n    }\n\n    int columnCount(const QModelIndex &) const override\n    {\n        return 1;\n    }\n\n    QModelIndex index(int row, int column, const QModelIndex &parent) const override\n    {\n        if( !parent.isValid() )\n        {\n            if( row == 0 && column == 0 )\n            {\n                return createIndex(0, 0, topWidget);\n            }\n            return QModelIndex();\n        }\n        if( column != 0 || parent.column() != 0 )\n        {\n            return QModelIndex();\n        }\n        QList<QWidget*> children = childrenOf(widget(parent));\n        if( row < children.size() )\n        {\n            return createIndex(row, 0, children.at(row));\n        }\n        return QModelIndex();\n    }\n\n    QModelIndex parent(const QModelIndex &index) const override\n    {\n        if( index.isValid() )\n        {\n            QWidget* const self = widget(index);\n            if( self != topWidget )\n            {\n                QWidget* const parent = self->parentWidget();\n                int row = childrenOf(parent).indexOf(self);\n                if( row > -1 )\n                {\n                    return createIndex(row, 0, parent);\n                }\n            }\n        }\n        return QModelIndex();\n    }\n\n  private:\n    static QList<QWidget*> childrenOf(const QWidget* parent)\n    {\n        return parent->findChildren<QWidget*>(QString(), Qt::FindDirectChildrenOnly);\n    }\n\n    QWidget* topWidget;\n};\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n\n    auto window = new QWidget();\n    auto layout = new QVBoxLayout();\n    auto tree   = new QTreeView(window);\n\n    layout->addWidget(tree);\n    window->setLayout(layout);\n\n    auto model = new WidgetHierarchyModel(tree);\n    tree->setModel(model);\n    tree->setHeaderHidden(false);\n    window->show();\n\n    a.exec();\n    delete window;\n\n    return 0;\n}\n```\n\n# \u53c2\u8003\u6587\u732e\n* [Qt Documentation - Model/View Programming](http://doc.qt.io/qt-5/model-view-programming.html)\n", "tags": ["Qt", "C++", "QAbstractItemModel", "QTreeView"]}