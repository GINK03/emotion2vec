{"tags": ["Xcode", "Swift", "OpenGL"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nXCode7\u306b\u306a\u3063\u3066\u3001\u304d\u3061\u3093\u3068\u52d5\u304fSwift+OpenGL\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u751f\u6210\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u305d\u306e\u305f\u3081\u3001\u524d\u56de\u66f8\u3044\u305f\u8a18\u4e8b\u300cSwift\u3067OpenGL\u3000\u305d\u306e\uff11\u300d\u306f\u4e0d\u8981\u306b\u306a\u3063\u305f\u306e\u3060\u304c\u3001\u307e\u3060\u3061\u3087\u3063\u3068\u4e0d\u6e80\u304c\u3042\u308b\u3002\n\u305d\u308c\u306f\u4f55\u304b\u3068\u3044\u3046\u3068\u3001\u3084\u305f\u3089\u3068\u578b\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981\u306a\u3068\u3053\u308d\u3002\n\u305f\u3068\u3048\u3070\u3001\nglVertexAttribPointer(GLuint(GLKVertexAttrib.Position.rawValue), 3, GLenum(GL_FLOAT), GLboolean(GL_FALSE), 24, BUFFER_OFFSET(0))\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u3044\u3046\u3068\u3001GLenum(GL_FLOAT)\u3001GLboolean(GL_FALSE)\u306a\u3069\u304c\u305d\u3046\u3002\n\u7279\u306bGLuint(GLKVertexAttrib.Position.rawValue)\u306a\u3069\u306f\u51f6\u60aa\u3067\u3001enum\u3092\u4f7f\u3063\u3066\u3044\u308b\u305b\u3044\u3067rawValue\u3092\u6c42\u3081\u305f\u3046\u3048\u3067\u3055\u3089\u306b\u578b\u30ad\u30e3\u30b9\u30c8\u307e\u3067\u5fc5\u8981\u306b\u306a\u308b\u3002\n\u3053\u308c\u306f\u66f8\u304f\u306e\u304c\u9762\u5012\u3060\u3057\u3001\u4f55\u3088\u308a\u8aad\u307f\u306b\u304f\u3044\u3002\n\n\u3069\u3046\u66f8\u304d\u305f\u3044\u304b\n\u307e\u305a\u3001\u3069\u306e\u3088\u3046\u306b\u66f8\u3051\u305f\u3089\u8aad\u307f\u3084\u3059\u304f\u66f8\u304d\u3084\u3059\u3044\u304b\u8003\u3048\u3066\u307f\u305f\u3002\nGLenum(GL_FLOAT)\u306a\u3089GL.FLOAT\u306e\u3088\u3046\u306b\u66f8\u3051\u305f\u3089\u3088\u3055\u305d\u3046\u3060\u3002\nGLuint(GLKVertexAttrib.Position.rawValue)\u3060\u3063\u305f\u3089GLK.VertexAttrib.Position\u3050\u3089\u3044\u3067\u3044\u3044\u306e\u3067\u306f\uff1f\n\n\u5b9f\u88c5\u65b9\u91dd\n\u4e0a\u8a18\u3092\u5ff5\u982d\u306b\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u304b\uff1f\n\u3044\u308d\u3044\u308d\u60a9\u3093\u3060\u672b\u3001GLKViewController\u306eextension\u3068\u3057\u3066\u3001\u30af\u30e9\u30b9GL\u3068\u30af\u30e9\u30b9GLK\u3092\u5185\u90e8\u306b\u3082\u305f\u305b\u3066\u3001\u305d\u306e\u4e2d\u3067\u3042\u3089\u304b\u3058\u3081\u578b\u30ad\u30e3\u30b9\u30c8\u3057\u305f\u5b9a\u6570\u3092\u3082\u305f\u305b\u308c\u3070\u3088\u3055\u305d\u3046\u3060\u3002\n\u3068\u3044\u3046\u65b9\u91dd\u3067\u66f8\u3044\u305f\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u3002\n\n\u578b\u3092\u4f55\u306b\u3059\u308c\u3070\u826f\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u3082\u306e\u306f\u3059\u3079\u3066GLenum\u578b\u306b\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u307e\u305a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u305d\u306e\u5834\u5408\u306b\u306f\u3001\u305d\u306e\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u3066\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5168\u4f53\u306f\u3053\u3061\u3089\u306b\u7f6e\u3044\u3068\u304d\u307e\u3057\u305f\u3002\n\n\u5b9f\u88c5\n\nGLKViewController+ConstantsUtil.swift\nimport GLKit\nimport OpenGLES\n\nextension GLKViewController {\n\n    class GL {\n        /* OpenGL ES core versions */\n        static let ES_VERSION_3_0: GLenum = GLenum(GL_ES_VERSION_3_0)\n        static let ES_VERSION_2_0: GLenum = GLenum(GL_ES_VERSION_2_0)\n\n        /* OpenGL ES 2.0 */\n\n        /* ClearBufferMask */\n        static let DEPTH_BUFFER_BIT: GLbitfield = GLbitfield(GL_DEPTH_BUFFER_BIT)\n        static let STENCIL_BUFFER_BIT: GLbitfield = GLbitfield(GL_STENCIL_BUFFER_BIT)\n        static let COLOR_BUFFER_BIT: GLbitfield = GLbitfield(GL_COLOR_BUFFER_BIT)\n\n        /* Boolean */\n        static let FALSE: GLboolean = GLboolean(GL_FALSE)\n        static let TRUE: GLboolean = GLboolean(GL_TRUE)\n\n        /* BeginMode */\n        static let POINTS: GLenum = GLenum(GL_POINTS)\n        static let LINES: GLenum = GLenum(GL_LINES)\n        static let LINE_LOOP: GLenum = GLenum(GL_LINE_LOOP)\n        static let LINE_STRIP: GLenum = GLenum(GL_LINE_STRIP)\n        static let TRIANGLES: GLenum = GLenum(GL_TRIANGLES)\n        static let TRIANGLE_STRIP: GLenum = GLenum(GL_TRIANGLE_STRIP)\n        static let TRIANGLE_FAN: GLenum = GLenum(GL_TRIANGLE_FAN)\n\n        /* BlendingFactorDest */\n        static let ZERO: GLenum = GLenum(GL_ZERO)\n        static let ONE: GLenum = GLenum(GL_ONE)\n        static let SRC_COLOR: GLenum = GLenum(GL_SRC_COLOR)\n        static let ONE_MINUS_SRC_COLOR: GLenum = GLenum(GL_ONE_MINUS_SRC_COLOR)\n        static let SRC_ALPHA: GLenum = GLenum(GL_SRC_ALPHA)\n        static let ONE_MINUS_SRC_ALPHA: GLenum = GLenum(GL_ONE_MINUS_SRC_ALPHA)\n        static let DST_ALPHA: GLenum = GLenum(GL_DST_ALPHA)\n        static let ONE_MINUS_DST_ALPHA: GLenum = GLenum(GL_ONE_MINUS_DST_ALPHA)\n\n        /* BlendingFactorSrc */\n        /*      ZERO */\n        /*      ONE */\n        static let DST_COLOR: GLenum = GLenum(GL_DST_COLOR)\n        static let ONE_MINUS_DST_COLOR: GLenum = GLenum(GL_ONE_MINUS_DST_COLOR)\n        static let SRC_ALPHA_SATURATE: GLenum = GLenum(GL_SRC_ALPHA_SATURATE)\n        /*      SRC_ALPHA */\n        /*      ONE_MINUS_SRC_ALPHA */\n        /*      DST_ALPHA */\n        /*      ONE_MINUS_DST_ALPHA */\n\n        /* BlendEquationSeparate */\n        static let FUNC_ADD: GLenum = GLenum(GL_FUNC_ADD)\n        static let BLEND_EQUATION: GLenum = GLenum(GL_BLEND_EQUATION)\n        static let BLEND_EQUATION_RGB: GLenum = GLenum(GL_BLEND_EQUATION_RGB)\n        static let BLEND_EQUATION_ALPHA: GLenum = GLenum(GL_BLEND_EQUATION_ALPHA)\n\n        /* BlendSubtract */\n        static let FUNC_SUBTRACT: GLenum = GLenum(GL_FUNC_SUBTRACT)\n        static let FUNC_REVERSE_SUBTRACT: GLenum = GLenum(GL_FUNC_REVERSE_SUBTRACT)\n        /* Separate Blend Functions */\n        static let BLEND_DST_RGB: GLenum = GLenum(GL_BLEND_DST_RGB)\n        static let BLEND_SRC_RGB: GLenum = GLenum(GL_BLEND_SRC_RGB)\n        static let BLEND_DST_ALPHA: GLenum = GLenum(GL_BLEND_DST_ALPHA)\n        static let BLEND_SRC_ALPHA: GLenum = GLenum(GL_BLEND_SRC_ALPHA)\n        static let CONSTANT_COLOR: GLenum = GLenum(GL_CONSTANT_COLOR)\n        static let ONE_MINUS_CONSTANT_COLOR: GLenum = GLenum(GL_ONE_MINUS_CONSTANT_COLOR)\n        static let CONSTANT_ALPHA: GLenum = GLenum(GL_CONSTANT_ALPHA)\n        static let ONE_MINUS_CONSTANT_ALPHA: GLenum = GLenum(GL_ONE_MINUS_CONSTANT_ALPHA)\n        static let BLEND_COLOR: GLenum = GLenum(GL_BLEND_COLOR)\n\n        /* Buffer Objects */\n        static let ARRAY_BUFFER: GLenum = GLenum(GL_ARRAY_BUFFER)\n        static let ELEMENT_ARRAY_BUFFER: GLenum = GLenum(GL_ELEMENT_ARRAY_BUFFER)\n        static let ARRAY_BUFFER_BINDING: GLenum = GLenum(GL_ARRAY_BUFFER_BINDING)\n        static let ELEMENT_ARRAY_BUFFER_BINDING: GLenum = GLenum(GL_ELEMENT_ARRAY_BUFFER_BINDING)\n\n        static let STREAM_DRAW: GLenum = GLenum(GL_STREAM_DRAW)\n        static let STATIC_DRAW: GLenum = GLenum(GL_STATIC_DRAW)\n        static let DYNAMIC_DRAW: GLenum = GLenum(GL_DYNAMIC_DRAW)\n\n        static let BUFFER_SIZE: GLenum = GLenum(GL_BUFFER_SIZE)\n        static let BUFFER_USAGE: GLenum = GLenum(GL_BUFFER_USAGE)\n\n        static let CURRENT_VERTEX_ATTRIB: GLenum = GLenum(GL_CURRENT_VERTEX_ATTRIB)\n\n        /* CullFaceMode */\n        static let FRONT: GLenum = GLenum(GL_FRONT)\n        static let BACK: GLenum = GLenum(GL_BACK)\n        static let FRONT_AND_BACK: GLenum = GLenum(GL_FRONT_AND_BACK)\n\n        /* DepthFunction */\n        /*      NEVER */\n        /*      LESS */\n        /*      EQUAL */\n        /*      LEQUAL */\n        /*      GREATER */\n        /*      NOTEQUAL */\n        /*      GEQUAL */\n        /*      ALWAYS */\n\n        /* EnableCap */\n        static let TEXTURE_2D: GLenum = GLenum(GL_TEXTURE_2D)\n        static let CULL_FACE: GLenum = GLenum(GL_CULL_FACE)\n        static let BLEND: GLenum = GLenum(GL_BLEND)\n        static let DITHER: GLenum = GLenum(GL_DITHER)\n        static let STENCIL_TEST: GLenum = GLenum(GL_STENCIL_TEST)\n        static let DEPTH_TEST: GLenum = GLenum(GL_DEPTH_TEST)\n        static let SCISSOR_TEST: GLenum = GLenum(GL_SCISSOR_TEST)\n        static let POLYGON_OFFSET_FILL: GLenum = GLenum(GL_POLYGON_OFFSET_FILL)\n        static let SAMPLE_ALPHA_TO_COVERAGE: GLenum = GLenum(GL_SAMPLE_ALPHA_TO_COVERAGE)\n        static let SAMPLE_COVERAGE: GLenum = GLenum(GL_SAMPLE_COVERAGE)\n\n        /* ErrorCode */\n        static let NO_ERROR: GLenum = GLenum(GL_NO_ERROR)\n        static let INVALID_ENUM: GLenum = GLenum(GL_INVALID_ENUM)\n        static let INVALID_VALUE: GLenum = GLenum(GL_INVALID_VALUE)\n        static let INVALID_OPERATION: GLenum = GLenum(GL_INVALID_OPERATION)\n        static let OUT_OF_MEMORY: GLenum = GLenum(GL_OUT_OF_MEMORY)\n\n        /* FrontFaceDirection */\n        static let CW: GLenum = GLenum(GL_CW)\n        static let CCW: GLenum = GLenum(GL_CCW)\n\n        /* GetPName */\n        static let LINE_WIDTH: GLenum = GLenum(GL_LINE_WIDTH)\n        static let ALIASED_POINT_SIZE_RANGE: GLenum = GLenum(GL_ALIASED_POINT_SIZE_RANGE)\n        static let ALIASED_LINE_WIDTH_RANGE: GLenum = GLenum(GL_ALIASED_LINE_WIDTH_RANGE)\n        static let CULL_FACE_MODE: GLenum = GLenum(GL_CULL_FACE_MODE)\n        static let FRONT_FACE: GLenum = GLenum(GL_FRONT_FACE)\n        static let DEPTH_RANGE: GLenum = GLenum(GL_DEPTH_RANGE)\n        static let DEPTH_WRITEMASK: GLenum = GLenum(GL_DEPTH_WRITEMASK)\n        static let DEPTH_CLEAR_VALUE: GLenum = GLenum(GL_DEPTH_CLEAR_VALUE)\n        static let DEPTH_FUNC: GLenum = GLenum(GL_DEPTH_FUNC)\n        static let STENCIL_CLEAR_VALUE: GLenum = GLenum(GL_STENCIL_CLEAR_VALUE)\n        static let STENCIL_FUNC: GLenum = GLenum(GL_STENCIL_FUNC)\n        static let STENCIL_FAIL: GLenum = GLenum(GL_STENCIL_FAIL)\n        static let STENCIL_PASS_DEPTH_FAIL: GLenum = GLenum(GL_STENCIL_PASS_DEPTH_FAIL)\n        static let STENCIL_PASS_DEPTH_PASS: GLenum = GLenum(GL_STENCIL_PASS_DEPTH_PASS)\n        static let STENCIL_REF: GLenum = GLenum(GL_STENCIL_REF)\n        static let STENCIL_VALUE_MASK: GLenum = GLenum(GL_STENCIL_VALUE_MASK)\n        static let STENCIL_WRITEMASK: GLenum = GLenum(GL_STENCIL_WRITEMASK)\n        static let STENCIL_BACK_FUNC: GLenum = GLenum(GL_STENCIL_BACK_FUNC)\n        static let STENCIL_BACK_FAIL: GLenum = GLenum(GL_STENCIL_BACK_FAIL)\n        static let STENCIL_BACK_PASS_DEPTH_FAIL: GLenum = GLenum(GL_STENCIL_BACK_PASS_DEPTH_FAIL)\n        static let STENCIL_BACK_PASS_DEPTH_PASS: GLenum = GLenum(GL_STENCIL_BACK_PASS_DEPTH_PASS)\n        static let STENCIL_BACK_REF: GLenum = GLenum(GL_STENCIL_BACK_REF)\n        static let STENCIL_BACK_VALUE_MASK: GLenum = GLenum(GL_STENCIL_BACK_VALUE_MASK)\n        static let STENCIL_BACK_WRITEMASK: GLenum = GLenum(GL_STENCIL_BACK_WRITEMASK)\n        static let VIEWPORT: GLenum = GLenum(GL_VIEWPORT)\n        static let SCISSOR_BOX: GLenum = GLenum(GL_SCISSOR_BOX)\n        /*      SCISSOR_TEST */\n        static let COLOR_CLEAR_VALUE: GLenum = GLenum(GL_COLOR_CLEAR_VALUE)\n        static let COLOR_WRITEMASK: GLenum = GLenum(GL_COLOR_WRITEMASK)\n        static let UNPACK_ALIGNMENT: GLenum = GLenum(GL_UNPACK_ALIGNMENT)\n        static let PACK_ALIGNMENT: GLenum = GLenum(GL_PACK_ALIGNMENT)\n        static let MAX_TEXTURE_SIZE: GLenum = GLenum(GL_MAX_TEXTURE_SIZE)\n        static let MAX_VIEWPORT_DIMS: GLenum = GLenum(GL_MAX_VIEWPORT_DIMS)\n        static let SUBPIXEL_BITS: GLenum = GLenum(GL_SUBPIXEL_BITS)\n        static let RED_BITS: GLenum = GLenum(GL_RED_BITS)\n        static let GREEN_BITS: GLenum = GLenum(GL_GREEN_BITS)\n        static let BLUE_BITS: GLenum = GLenum(GL_BLUE_BITS)\n        static let ALPHA_BITS: GLenum = GLenum(GL_ALPHA_BITS)\n        static let DEPTH_BITS: GLenum = GLenum(GL_DEPTH_BITS)\n        static let STENCIL_BITS: GLenum = GLenum(GL_STENCIL_BITS)\n        static let POLYGON_OFFSET_UNITS: GLenum = GLenum(GL_POLYGON_OFFSET_UNITS)\n        /*      POLYGON_OFFSET_FILL */\n        static let POLYGON_OFFSET_FACTOR: GLenum = GLenum(GL_POLYGON_OFFSET_FACTOR)\n        static let TEXTURE_BINDING_2D: GLenum = GLenum(GL_TEXTURE_BINDING_2D)\n        static let SAMPLE_BUFFERS: GLenum = GLenum(GL_SAMPLE_BUFFERS)\n        static let SAMPLES: GLenum = GLenum(GL_SAMPLES)\n        static let SAMPLE_COVERAGE_VALUE: GLenum = GLenum(GL_SAMPLE_COVERAGE_VALUE)\n        static let SAMPLE_COVERAGE_INVERT: GLenum = GLenum(GL_SAMPLE_COVERAGE_INVERT)\n\n        /* GetTextureParameter */\n        /*      TEXTURE_MAG_FILTER */\n        /*      TEXTURE_MIN_FILTER */\n        /*      TEXTURE_WRAP_S */\n        /*      TEXTURE_WRAP_T */\n\n        static let NUM_COMPRESSED_TEXTURE_FORMATS: GLenum = GLenum(GL_NUM_COMPRESSED_TEXTURE_FORMATS)\n        static let COMPRESSED_TEXTURE_FORMATS: GLenum = GLenum(GL_COMPRESSED_TEXTURE_FORMATS)\n\n        /* HintMode */\n        static let DONT_CARE: GLenum = GLenum(GL_DONT_CARE)\n        static let FASTEST: GLenum = GLenum(GL_FASTEST)\n        static let NICEST: GLenum = GLenum(GL_NICEST)\n\n        /* HintTarget */\n        static let GENERATE_MIPMAP_HINT: GLenum = GLenum(GL_GENERATE_MIPMAP_HINT)\n\n        /* DataType */\n        static let BYTE: GLenum = GLenum(GL_BYTE)\n        static let UNSIGNED_BYTE: GLenum = GLenum(GL_UNSIGNED_BYTE)\n        static let SHORT: GLenum = GLenum(GL_SHORT)\n        static let UNSIGNED_SHORT: GLenum = GLenum(GL_UNSIGNED_SHORT)\n        static let INT: GLenum = GLenum(GL_INT)\n        static let UNSIGNED_INT: GLenum = GLenum(GL_UNSIGNED_INT)\n        static let FLOAT: GLenum = GLenum(GL_FLOAT)\n        static let FIXED: GLenum = GLenum(GL_FIXED)\n\n        /* PixelFormat */\n        static let DEPTH_COMPONENT: GLenum = GLenum(GL_DEPTH_COMPONENT)\n        static let ALPHA: GLenum = GLenum(GL_ALPHA)\n        static let RGB: GLenum = GLenum(GL_RGB)\n        static let RGBA: GLenum = GLenum(GL_RGBA)\n        static let LUMINANCE: GLenum = GLenum(GL_LUMINANCE)\n        static let LUMINANCE_ALPHA: GLenum = GLenum(GL_LUMINANCE_ALPHA)\n\n        /* PixelType */\n        /*      UNSIGNED_BYTE */\n        static let UNSIGNED_SHORT_4_4_4_4: GLenum = GLenum(GL_UNSIGNED_SHORT_4_4_4_4)\n        static let UNSIGNED_SHORT_5_5_5_1: GLenum = GLenum(GL_UNSIGNED_SHORT_5_5_5_1)\n        static let UNSIGNED_SHORT_5_6_5: GLenum = GLenum(GL_UNSIGNED_SHORT_5_6_5)\n\n        /* Shaders */\n        static let FRAGMENT_SHADER: GLenum = GLenum(GL_FRAGMENT_SHADER)\n        static let VERTEX_SHADER: GLenum = GLenum(GL_VERTEX_SHADER)\n        static let MAX_VERTEX_ATTRIBS: GLenum = GLenum(GL_MAX_VERTEX_ATTRIBS)\n        static let MAX_VERTEX_UNIFORM_VECTORS: GLenum = GLenum(GL_MAX_VERTEX_UNIFORM_VECTORS)\n        static let MAX_VARYING_VECTORS: GLenum = GLenum(GL_MAX_VARYING_VECTORS)\n        static let MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = GLenum(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS)\n        static let MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum = GLenum(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS)\n        static let MAX_TEXTURE_IMAGE_UNITS: GLenum = GLenum(GL_MAX_TEXTURE_IMAGE_UNITS)\n        static let MAX_FRAGMENT_UNIFORM_VECTORS: GLenum = GLenum(GL_MAX_FRAGMENT_UNIFORM_VECTORS)\n        static let SHADER_TYPE: GLenum = GLenum(GL_SHADER_TYPE)\n        static let DELETE_STATUS: GLenum = GLenum(GL_DELETE_STATUS)\n        static let LINK_STATUS: GLenum = GLenum(GL_LINK_STATUS)\n        static let VALIDATE_STATUS: GLenum = GLenum(GL_VALIDATE_STATUS)\n        static let ATTACHED_SHADERS: GLenum = GLenum(GL_ATTACHED_SHADERS)\n        static let ACTIVE_UNIFORMS: GLenum = GLenum(GL_ACTIVE_UNIFORMS)\n        static let ACTIVE_UNIFORM_MAX_LENGTH: GLenum = GLenum(GL_ACTIVE_UNIFORM_MAX_LENGTH)\n        static let ACTIVE_ATTRIBUTES: GLenum = GLenum(GL_ACTIVE_ATTRIBUTES)\n        static let ACTIVE_ATTRIBUTE_MAX_LENGTH: GLenum = GLenum(GL_ACTIVE_ATTRIBUTE_MAX_LENGTH)\n        static let SHADING_LANGUAGE_VERSION: GLenum = GLenum(GL_SHADING_LANGUAGE_VERSION)\n        static let CURRENT_PROGRAM: GLenum = GLenum(GL_CURRENT_PROGRAM)\n\n        /* StencilFunction */\n        static let NEVER: GLenum = GLenum(GL_NEVER)\n        static let LESS: GLenum = GLenum(GL_LESS)\n        static let EQUAL: GLenum = GLenum(GL_EQUAL)\n        static let LEQUAL: GLenum = GLenum(GL_LEQUAL)\n        static let GREATER: GLenum = GLenum(GL_GREATER)\n        static let NOTEQUAL: GLenum = GLenum(GL_NOTEQUAL)\n        static let GEQUAL: GLenum = GLenum(GL_GEQUAL)\n        static let ALWAYS: GLenum = GLenum(GL_ALWAYS)\n\n        /* StencilOp */\n        /*      ZERO */\n        static let KEEP: GLenum = GLenum(GL_KEEP)\n        static let REPLACE: GLenum = GLenum(GL_REPLACE)\n        static let INCR: GLenum = GLenum(GL_INCR)\n        static let DECR: GLenum = GLenum(GL_DECR)\n        static let INVERT: GLenum = GLenum(GL_INVERT)\n        static let INCR_WRAP: GLenum = GLenum(GL_INCR_WRAP)\n        static let DECR_WRAP: GLenum = GLenum(GL_DECR_WRAP)\n\n        /* StringName */\n        static let VENDOR: GLenum = GLenum(GL_VENDOR)\n        static let RENDERER: GLenum = GLenum(GL_RENDERER)\n        static let VERSION: GLenum = GLenum(GL_VERSION)\n        static let EXTENSIONS: GLenum = GLenum(GL_EXTENSIONS)\n\n        /* TextureMagFilter */\n        static let NEAREST: GLenum = GLenum(GL_NEAREST)\n        static let LINEAR: GLenum = GLenum(GL_LINEAR)\n\n        /* TextureMinFilter */\n        /*      NEAREST */\n        /*      LINEAR */\n        static let NEAREST_MIPMAP_NEAREST: GLenum = GLenum(GL_NEAREST_MIPMAP_NEAREST)\n        static let LINEAR_MIPMAP_NEAREST: GLenum = GLenum(GL_LINEAR_MIPMAP_NEAREST)\n        static let NEAREST_MIPMAP_LINEAR: GLenum = GLenum(GL_NEAREST_MIPMAP_LINEAR)\n        static let LINEAR_MIPMAP_LINEAR: GLenum = GLenum(GL_LINEAR_MIPMAP_LINEAR)\n\n        /* TextureParameterName */\n        static let TEXTURE_MAG_FILTER: GLenum = GLenum(GL_TEXTURE_MAG_FILTER)\n        static let TEXTURE_MIN_FILTER: GLenum = GLenum(GL_TEXTURE_MIN_FILTER)\n        static let TEXTURE_WRAP_S: GLenum = GLenum(GL_TEXTURE_WRAP_S)\n        static let TEXTURE_WRAP_T: GLenum = GLenum(GL_TEXTURE_WRAP_T)\n\n        /* TextureTarget */\n        /*      TEXTURE_2D */\n        static let TEXTURE: GLenum = GLenum(GL_TEXTURE)\n\n        static let TEXTURE_CUBE_MAP: GLenum = GLenum(GL_TEXTURE_CUBE_MAP)\n        static let TEXTURE_BINDING_CUBE_MAP: GLenum = GLenum(GL_TEXTURE_BINDING_CUBE_MAP)\n        static let TEXTURE_CUBE_MAP_POSITIVE_X: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_POSITIVE_X)\n        static let TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_NEGATIVE_X)\n        static let TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_POSITIVE_Y)\n        static let TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y)\n        static let TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_POSITIVE_Z)\n        static let TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z)\n        static let MAX_CUBE_MAP_TEXTURE_SIZE: GLenum = GLenum(GL_MAX_CUBE_MAP_TEXTURE_SIZE)\n\n        /* TextureUnit */\n        static let TEXTURE0: GLenum = GLenum(GL_TEXTURE0)\n        static let TEXTURE1: GLenum = GLenum(GL_TEXTURE1)\n        static let TEXTURE2: GLenum = GLenum(GL_TEXTURE2)\n        static let TEXTURE3: GLenum = GLenum(GL_TEXTURE3)\n        static let TEXTURE4: GLenum = GLenum(GL_TEXTURE4)\n        static let TEXTURE5: GLenum = GLenum(GL_TEXTURE5)\n        static let TEXTURE6: GLenum = GLenum(GL_TEXTURE6)\n        static let TEXTURE7: GLenum = GLenum(GL_TEXTURE7)\n        static let TEXTURE8: GLenum = GLenum(GL_TEXTURE8)\n        static let TEXTURE9: GLenum = GLenum(GL_TEXTURE9)\n        static let TEXTURE10: GLenum = GLenum(GL_TEXTURE10)\n        static let TEXTURE11: GLenum = GLenum(GL_TEXTURE11)\n        static let TEXTURE12: GLenum = GLenum(GL_TEXTURE12)\n        static let TEXTURE13: GLenum = GLenum(GL_TEXTURE13)\n        static let TEXTURE14: GLenum = GLenum(GL_TEXTURE14)\n        static let TEXTURE15: GLenum = GLenum(GL_TEXTURE15)\n        static let TEXTURE16: GLenum = GLenum(GL_TEXTURE16)\n        static let TEXTURE17: GLenum = GLenum(GL_TEXTURE17)\n        static let TEXTURE18: GLenum = GLenum(GL_TEXTURE18)\n        static let TEXTURE19: GLenum = GLenum(GL_TEXTURE19)\n        static let TEXTURE20: GLenum = GLenum(GL_TEXTURE20)\n        static let TEXTURE21: GLenum = GLenum(GL_TEXTURE21)\n        static let TEXTURE22: GLenum = GLenum(GL_TEXTURE22)\n        static let TEXTURE23: GLenum = GLenum(GL_TEXTURE23)\n        static let TEXTURE24: GLenum = GLenum(GL_TEXTURE24)\n        static let TEXTURE25: GLenum = GLenum(GL_TEXTURE25)\n        static let TEXTURE26: GLenum = GLenum(GL_TEXTURE26)\n        static let TEXTURE27: GLenum = GLenum(GL_TEXTURE27)\n        static let TEXTURE28: GLenum = GLenum(GL_TEXTURE28)\n        static let TEXTURE29: GLenum = GLenum(GL_TEXTURE29)\n        static let TEXTURE30: GLenum = GLenum(GL_TEXTURE30)\n        static let TEXTURE31: GLenum = GLenum(GL_TEXTURE31)\n        static let ACTIVE_TEXTURE: GLenum = GLenum(GL_ACTIVE_TEXTURE)\n\n        /* TextureWrapMode */\n        static let REPEAT: GLenum = GLenum(GL_REPEAT)\n        static let CLAMP_TO_EDGE: GLenum = GLenum(GL_CLAMP_TO_EDGE)\n        static let MIRRORED_REPEAT: GLenum = GLenum(GL_MIRRORED_REPEAT)\n\n        /* Uniform Types */\n        static let FLOAT_VEC2: GLenum = GLenum(GL_FLOAT_VEC2)\n        static let FLOAT_VEC3: GLenum = GLenum(GL_FLOAT_VEC3)\n        static let FLOAT_VEC4: GLenum = GLenum(GL_FLOAT_VEC4)\n        static let INT_VEC2: GLenum = GLenum(GL_INT_VEC2)\n        static let INT_VEC3: GLenum = GLenum(GL_INT_VEC3)\n        static let INT_VEC4: GLenum = GLenum(GL_INT_VEC4)\n        static let BOOL: GLenum = GLenum(GL_BOOL)\n        static let BOOL_VEC2: GLenum = GLenum(GL_BOOL_VEC2)\n        static let BOOL_VEC3: GLenum = GLenum(GL_BOOL_VEC3)\n        static let BOOL_VEC4: GLenum = GLenum(GL_BOOL_VEC4)\n        static let FLOAT_MAT2: GLenum = GLenum(GL_FLOAT_MAT2)\n        static let FLOAT_MAT3: GLenum = GLenum(GL_FLOAT_MAT3)\n        static let FLOAT_MAT4: GLenum = GLenum(GL_FLOAT_MAT4)\n        static let SAMPLER_2D: GLenum = GLenum(GL_SAMPLER_2D)\n        static let SAMPLER_CUBE: GLenum = GLenum(GL_SAMPLER_CUBE)\n\n        /* Vertex Arrays */\n        static let VERTEX_ATTRIB_ARRAY_ENABLED: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_ENABLED)\n        static let VERTEX_ATTRIB_ARRAY_SIZE: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_SIZE)\n        static let VERTEX_ATTRIB_ARRAY_STRIDE: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_STRIDE)\n        static let VERTEX_ATTRIB_ARRAY_TYPE: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_TYPE)\n        static let VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED)\n        static let VERTEX_ATTRIB_ARRAY_POINTER: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_POINTER)\n        static let VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)\n\n        /* Read Format */\n        static let IMPLEMENTATION_COLOR_READ_TYPE: GLenum = GLenum(GL_IMPLEMENTATION_COLOR_READ_TYPE)\n        static let IMPLEMENTATION_COLOR_READ_FORMAT: GLenum = GLenum(GL_IMPLEMENTATION_COLOR_READ_FORMAT)\n\n        /* Shader Source */\n        static let COMPILE_STATUS: GLenum = GLenum(GL_COMPILE_STATUS)\n        static let INFO_LOG_LENGTH: GLenum = GLenum(GL_INFO_LOG_LENGTH)\n        static let SHADER_SOURCE_LENGTH: GLenum = GLenum(GL_SHADER_SOURCE_LENGTH)\n        static let SHADER_COMPILER: GLenum = GLenum(GL_SHADER_COMPILER)\n\n        /* Shader Binary */\n        static let SHADER_BINARY_FORMATS: GLenum = GLenum(GL_SHADER_BINARY_FORMATS)\n        static let NUM_SHADER_BINARY_FORMATS: GLenum = GLenum(GL_NUM_SHADER_BINARY_FORMATS)\n\n        /* Shader Precision-Specified Types */\n        static let LOW_FLOAT: GLenum = GLenum(GL_LOW_FLOAT)\n        static let MEDIUM_FLOAT: GLenum = GLenum(GL_MEDIUM_FLOAT)\n        static let HIGH_FLOAT: GLenum = GLenum(GL_HIGH_FLOAT)\n        static let LOW_INT: GLenum = GLenum(GL_LOW_INT)\n        static let MEDIUM_INT: GLenum = GLenum(GL_MEDIUM_INT)\n        static let HIGH_INT: GLenum = GLenum(GL_HIGH_INT)\n\n        /* Framebuffer Object. */\n        static let FRAMEBUFFER: GLenum = GLenum(GL_FRAMEBUFFER)\n        static let RENDERBUFFER: GLenum = GLenum(GL_RENDERBUFFER)\n\n        static let RGBA4: GLenum = GLenum(GL_RGBA4)\n        static let RGB5_A1: GLenum = GLenum(GL_RGB5_A1)\n        static let RGB565: GLenum = GLenum(GL_RGB565)\n        static let DEPTH_COMPONENT16: GLenum = GLenum(GL_DEPTH_COMPONENT16)\n        static let STENCIL_INDEX8: GLenum = GLenum(GL_STENCIL_INDEX8)\n\n        static let RENDERBUFFER_WIDTH: GLenum = GLenum(GL_RENDERBUFFER_WIDTH)\n        static let RENDERBUFFER_HEIGHT: GLenum = GLenum(GL_RENDERBUFFER_HEIGHT)\n        static let RENDERBUFFER_INTERNAL_FORMAT: GLenum = GLenum(GL_RENDERBUFFER_INTERNAL_FORMAT)\n        static let RENDERBUFFER_RED_SIZE: GLenum = GLenum(GL_RENDERBUFFER_RED_SIZE)\n        static let RENDERBUFFER_GREEN_SIZE: GLenum = GLenum(GL_RENDERBUFFER_GREEN_SIZE)\n        static let RENDERBUFFER_BLUE_SIZE: GLenum = GLenum(GL_RENDERBUFFER_BLUE_SIZE)\n        static let RENDERBUFFER_ALPHA_SIZE: GLenum = GLenum(GL_RENDERBUFFER_ALPHA_SIZE)\n        static let RENDERBUFFER_DEPTH_SIZE: GLenum = GLenum(GL_RENDERBUFFER_DEPTH_SIZE)\n        static let RENDERBUFFER_STENCIL_SIZE: GLenum = GLenum(GL_RENDERBUFFER_STENCIL_SIZE)\n\n        static let FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)\n        static let FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)\n        static let FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)\n        static let FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)\n\n        static let COLOR_ATTACHMENT0: GLenum = GLenum(GL_COLOR_ATTACHMENT0)\n        static let DEPTH_ATTACHMENT: GLenum = GLenum(GL_DEPTH_ATTACHMENT)\n        static let STENCIL_ATTACHMENT: GLenum = GLenum(GL_STENCIL_ATTACHMENT)\n\n        static let NONE: GLenum = GLenum(GL_NONE)\n\n        static let FRAMEBUFFER_COMPLETE: GLenum = GLenum(GL_FRAMEBUFFER_COMPLETE)\n        static let FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum = GLenum(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)\n        static let FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = GLenum(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)\n        static let FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum = GLenum(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)\n        static let FRAMEBUFFER_UNSUPPORTED: GLenum = GLenum(GL_FRAMEBUFFER_UNSUPPORTED)\n\n        static let FRAMEBUFFER_BINDING: GLenum = GLenum(GL_FRAMEBUFFER_BINDING)\n        static let RENDERBUFFER_BINDING: GLenum = GLenum(GL_RENDERBUFFER_BINDING)\n        static let MAX_RENDERBUFFER_SIZE: GLenum = GLenum(GL_MAX_RENDERBUFFER_SIZE)\n\n        static let INVALID_FRAMEBUFFER_OPERATION: GLenum = GLenum(GL_INVALID_FRAMEBUFFER_OPERATION)\n\n        /* OpenGL ES 3.0 */\n\n        static let READ_BUFFER: GLenum = GLenum(GL_READ_BUFFER)\n        static let UNPACK_ROW_LENGTH: GLenum = GLenum(GL_UNPACK_ROW_LENGTH)\n        static let UNPACK_SKIP_ROWS: GLenum = GLenum(GL_UNPACK_SKIP_ROWS)\n        static let UNPACK_SKIP_PIXELS: GLenum = GLenum(GL_UNPACK_SKIP_PIXELS)\n        static let PACK_ROW_LENGTH: GLenum = GLenum(GL_PACK_ROW_LENGTH)\n        static let PACK_SKIP_ROWS: GLenum = GLenum(GL_PACK_SKIP_ROWS)\n        static let PACK_SKIP_PIXELS: GLenum = GLenum(GL_PACK_SKIP_PIXELS)\n        static let COLOR: GLenum = GLenum(GL_COLOR)\n        static let DEPTH: GLenum = GLenum(GL_DEPTH)\n        static let STENCIL: GLenum = GLenum(GL_STENCIL)\n        static let RED: GLenum = GLenum(GL_RED)\n        static let RGB8: GLenum = GLenum(GL_RGB8)\n        static let RGBA8: GLenum = GLenum(GL_RGBA8)\n        static let RGB10_A2: GLenum = GLenum(GL_RGB10_A2)\n        static let TEXTURE_BINDING_3D: GLenum = GLenum(GL_TEXTURE_BINDING_3D)\n        static let UNPACK_SKIP_IMAGES: GLenum = GLenum(GL_UNPACK_SKIP_IMAGES)\n        static let UNPACK_IMAGE_HEIGHT: GLenum = GLenum(GL_UNPACK_IMAGE_HEIGHT)\n        static let TEXTURE_3D: GLenum = GLenum(GL_TEXTURE_3D)\n        static let TEXTURE_WRAP_R: GLenum = GLenum(GL_TEXTURE_WRAP_R)\n        static let MAX_3D_TEXTURE_SIZE: GLenum = GLenum(GL_MAX_3D_TEXTURE_SIZE)\n        static let UNSIGNED_INT_2_10_10_10_REV: GLenum = GLenum(GL_UNSIGNED_INT_2_10_10_10_REV)\n        static let MAX_ELEMENTS_VERTICES: GLenum = GLenum(GL_MAX_ELEMENTS_VERTICES)\n        static let MAX_ELEMENTS_INDICES: GLenum = GLenum(GL_MAX_ELEMENTS_INDICES)\n        static let TEXTURE_MIN_LOD: GLenum = GLenum(GL_TEXTURE_MIN_LOD)\n        static let TEXTURE_MAX_LOD: GLenum = GLenum(GL_TEXTURE_MAX_LOD)\n        static let TEXTURE_BASE_LEVEL: GLenum = GLenum(GL_TEXTURE_BASE_LEVEL)\n        static let TEXTURE_MAX_LEVEL: GLenum = GLenum(GL_TEXTURE_MAX_LEVEL)\n        static let MIN: GLenum = GLenum(GL_MIN)\n        static let MAX: GLenum = GLenum(GL_MAX)\n        static let DEPTH_COMPONENT24: GLenum = GLenum(GL_DEPTH_COMPONENT24)\n        static let MAX_TEXTURE_LOD_BIAS: GLenum = GLenum(GL_MAX_TEXTURE_LOD_BIAS)\n        static let TEXTURE_COMPARE_MODE: GLenum = GLenum(GL_TEXTURE_COMPARE_MODE)\n        static let TEXTURE_COMPARE_FUNC: GLenum = GLenum(GL_TEXTURE_COMPARE_FUNC)\n        static let CURRENT_QUERY: GLenum = GLenum(GL_CURRENT_QUERY)\n        static let QUERY_RESULT: GLenum = GLenum(GL_QUERY_RESULT)\n        static let QUERY_RESULT_AVAILABLE: GLenum = GLenum(GL_QUERY_RESULT_AVAILABLE)\n        static let BUFFER_MAPPED: GLenum = GLenum(GL_BUFFER_MAPPED)\n        static let BUFFER_MAP_POINTER: GLenum = GLenum(GL_BUFFER_MAP_POINTER)\n        static let STREAM_READ: GLenum = GLenum(GL_STREAM_READ)\n        static let STREAM_COPY: GLenum = GLenum(GL_STREAM_COPY)\n        static let STATIC_READ: GLenum = GLenum(GL_STATIC_READ)\n        static let STATIC_COPY: GLenum = GLenum(GL_STATIC_COPY)\n        static let DYNAMIC_READ: GLenum = GLenum(GL_DYNAMIC_READ)\n        static let DYNAMIC_COPY: GLenum = GLenum(GL_DYNAMIC_COPY)\n        static let MAX_DRAW_BUFFERS: GLenum = GLenum(GL_MAX_DRAW_BUFFERS)\n        static let DRAW_BUFFER0: GLenum = GLenum(GL_DRAW_BUFFER0)\n        static let DRAW_BUFFER1: GLenum = GLenum(GL_DRAW_BUFFER1)\n        static let DRAW_BUFFER2: GLenum = GLenum(GL_DRAW_BUFFER2)\n        static let DRAW_BUFFER3: GLenum = GLenum(GL_DRAW_BUFFER3)\n        static let DRAW_BUFFER4: GLenum = GLenum(GL_DRAW_BUFFER4)\n        static let DRAW_BUFFER5: GLenum = GLenum(GL_DRAW_BUFFER5)\n        static let DRAW_BUFFER6: GLenum = GLenum(GL_DRAW_BUFFER6)\n        static let DRAW_BUFFER7: GLenum = GLenum(GL_DRAW_BUFFER7)\n        static let DRAW_BUFFER8: GLenum = GLenum(GL_DRAW_BUFFER8)\n        static let DRAW_BUFFER9: GLenum = GLenum(GL_DRAW_BUFFER9)\n        static let DRAW_BUFFER10: GLenum = GLenum(GL_DRAW_BUFFER10)\n        static let DRAW_BUFFER11: GLenum = GLenum(GL_DRAW_BUFFER11)\n        static let DRAW_BUFFER12: GLenum = GLenum(GL_DRAW_BUFFER12)\n        static let DRAW_BUFFER13: GLenum = GLenum(GL_DRAW_BUFFER13)\n        static let DRAW_BUFFER14: GLenum = GLenum(GL_DRAW_BUFFER14)\n        static let DRAW_BUFFER15: GLenum = GLenum(GL_DRAW_BUFFER15)\n        static let MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum = GLenum(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS)\n        static let MAX_VERTEX_UNIFORM_COMPONENTS: GLenum = GLenum(GL_MAX_VERTEX_UNIFORM_COMPONENTS)\n        static let SAMPLER_3D: GLenum = GLenum(GL_SAMPLER_3D)\n        static let SAMPLER_2D_SHADOW: GLenum = GLenum(GL_SAMPLER_2D_SHADOW)\n        static let FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum = GLenum(GL_FRAGMENT_SHADER_DERIVATIVE_HINT)\n        static let PIXEL_PACK_BUFFER: GLenum = GLenum(GL_PIXEL_PACK_BUFFER)\n        static let PIXEL_UNPACK_BUFFER: GLenum = GLenum(GL_PIXEL_UNPACK_BUFFER)\n        static let PIXEL_PACK_BUFFER_BINDING: GLenum = GLenum(GL_PIXEL_PACK_BUFFER_BINDING)\n        static let PIXEL_UNPACK_BUFFER_BINDING: GLenum = GLenum(GL_PIXEL_UNPACK_BUFFER_BINDING)\n        static let FLOAT_MAT2x3: GLenum = GLenum(GL_FLOAT_MAT2x3)\n        static let FLOAT_MAT2x4: GLenum = GLenum(GL_FLOAT_MAT2x4)\n        static let FLOAT_MAT3x2: GLenum = GLenum(GL_FLOAT_MAT3x2)\n        static let FLOAT_MAT3x4: GLenum = GLenum(GL_FLOAT_MAT3x4)\n        static let FLOAT_MAT4x2: GLenum = GLenum(GL_FLOAT_MAT4x2)\n        static let FLOAT_MAT4x3: GLenum = GLenum(GL_FLOAT_MAT4x3)\n        static let SRGB: GLenum = GLenum(GL_SRGB)\n        static let SRGB8: GLenum = GLenum(GL_SRGB8)\n        static let SRGB8_ALPHA8: GLenum = GLenum(GL_SRGB8_ALPHA8)\n        static let COMPARE_REF_TO_TEXTURE: GLenum = GLenum(GL_COMPARE_REF_TO_TEXTURE)\n        static let MAJOR_VERSION: GLenum = GLenum(GL_MAJOR_VERSION)\n        static let MINOR_VERSION: GLenum = GLenum(GL_MINOR_VERSION)\n        static let NUM_EXTENSIONS: GLenum = GLenum(GL_NUM_EXTENSIONS)\n        static let RGBA32F: GLenum = GLenum(GL_RGBA32F)\n        static let RGB32F: GLenum = GLenum(GL_RGB32F)\n        static let RGBA16F: GLenum = GLenum(GL_RGBA16F)\n        static let RGB16F: GLenum = GLenum(GL_RGB16F)\n        static let VERTEX_ATTRIB_ARRAY_INTEGER: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_INTEGER)\n        static let MAX_ARRAY_TEXTURE_LAYERS: GLenum = GLenum(GL_MAX_ARRAY_TEXTURE_LAYERS)\n        static let MIN_PROGRAM_TEXEL_OFFSET: GLenum = GLenum(GL_MIN_PROGRAM_TEXEL_OFFSET)\n        static let MAX_PROGRAM_TEXEL_OFFSET: GLenum = GLenum(GL_MAX_PROGRAM_TEXEL_OFFSET)\n        static let MAX_VARYING_COMPONENTS: GLenum = GLenum(GL_MAX_VARYING_COMPONENTS)\n        static let TEXTURE_2D_ARRAY: GLenum = GLenum(GL_TEXTURE_2D_ARRAY)\n        static let TEXTURE_BINDING_2D_ARRAY: GLenum = GLenum(GL_TEXTURE_BINDING_2D_ARRAY)\n        static let R11F_G11F_B10F: GLenum = GLenum(GL_R11F_G11F_B10F)\n        static let UNSIGNED_INT_10F_11F_11F_REV: GLenum = GLenum(GL_UNSIGNED_INT_10F_11F_11F_REV)\n        static let RGB9_E5: GLenum = GLenum(GL_RGB9_E5)\n        static let UNSIGNED_INT_5_9_9_9_REV: GLenum = GLenum(GL_UNSIGNED_INT_5_9_9_9_REV)\n        static let TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH)\n        static let TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER_MODE)\n        static let MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum = GLenum(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS)\n        static let TRANSFORM_FEEDBACK_VARYINGS: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_VARYINGS)\n        static let TRANSFORM_FEEDBACK_BUFFER_START: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER_START)\n        static let TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE)\n        static let TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN)\n        static let RASTERIZER_DISCARD: GLenum = GLenum(GL_RASTERIZER_DISCARD)\n        static let MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum = GLenum(GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS)\n        static let MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum = GLenum(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS)\n        static let INTERLEAVED_ATTRIBS: GLenum = GLenum(GL_INTERLEAVED_ATTRIBS)\n        static let SEPARATE_ATTRIBS: GLenum = GLenum(GL_SEPARATE_ATTRIBS)\n        static let TRANSFORM_FEEDBACK_BUFFER: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER)\n        static let TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING)\n        static let RGBA32UI: GLenum = GLenum(GL_RGBA32UI)\n        static let RGB32UI: GLenum = GLenum(GL_RGB32UI)\n        static let RGBA16UI: GLenum = GLenum(GL_RGBA16UI)\n        static let RGB16UI: GLenum = GLenum(GL_RGB16UI)\n        static let RGBA8UI: GLenum = GLenum(GL_RGBA8UI)\n        static let RGB8UI: GLenum = GLenum(GL_RGB8UI)\n        static let RGBA32I: GLenum = GLenum(GL_RGBA32I)\n        static let RGB32I: GLenum = GLenum(GL_RGB32I)\n        static let RGBA16I: GLenum = GLenum(GL_RGBA16I)\n        static let RGB16I: GLenum = GLenum(GL_RGB16I)\n        static let RGBA8I: GLenum = GLenum(GL_RGBA8I)\n        static let RGB8I: GLenum = GLenum(GL_RGB8I)\n        static let RED_INTEGER: GLenum = GLenum(GL_RED_INTEGER)\n        static let RGB_INTEGER: GLenum = GLenum(GL_RGB_INTEGER)\n        static let RGBA_INTEGER: GLenum = GLenum(GL_RGBA_INTEGER)\n        static let SAMPLER_2D_ARRAY: GLenum = GLenum(GL_SAMPLER_2D_ARRAY)\n        static let SAMPLER_2D_ARRAY_SHADOW: GLenum = GLenum(GL_SAMPLER_2D_ARRAY_SHADOW)\n        static let SAMPLER_CUBE_SHADOW: GLenum = GLenum(GL_SAMPLER_CUBE_SHADOW)\n        static let UNSIGNED_INT_VEC2: GLenum = GLenum(GL_UNSIGNED_INT_VEC2)\n        static let UNSIGNED_INT_VEC3: GLenum = GLenum(GL_UNSIGNED_INT_VEC3)\n        static let UNSIGNED_INT_VEC4: GLenum = GLenum(GL_UNSIGNED_INT_VEC4)\n        static let INT_SAMPLER_2D: GLenum = GLenum(GL_INT_SAMPLER_2D)\n        static let INT_SAMPLER_3D: GLenum = GLenum(GL_INT_SAMPLER_3D)\n        static let INT_SAMPLER_CUBE: GLenum = GLenum(GL_INT_SAMPLER_CUBE)\n        static let INT_SAMPLER_2D_ARRAY: GLenum = GLenum(GL_INT_SAMPLER_2D_ARRAY)\n        static let UNSIGNED_INT_SAMPLER_2D: GLenum = GLenum(GL_UNSIGNED_INT_SAMPLER_2D)\n        static let UNSIGNED_INT_SAMPLER_3D: GLenum = GLenum(GL_UNSIGNED_INT_SAMPLER_3D)\n        static let UNSIGNED_INT_SAMPLER_CUBE: GLenum = GLenum(GL_UNSIGNED_INT_SAMPLER_CUBE)\n        static let UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum = GLenum(GL_UNSIGNED_INT_SAMPLER_2D_ARRAY)\n        static let BUFFER_ACCESS_FLAGS: GLenum = GLenum(GL_BUFFER_ACCESS_FLAGS)\n        static let BUFFER_MAP_LENGTH: GLenum = GLenum(GL_BUFFER_MAP_LENGTH)\n        static let BUFFER_MAP_OFFSET: GLenum = GLenum(GL_BUFFER_MAP_OFFSET)\n        static let DEPTH_COMPONENT32F: GLenum = GLenum(GL_DEPTH_COMPONENT32F)\n        static let DEPTH32F_STENCIL8: GLenum = GLenum(GL_DEPTH32F_STENCIL8)\n        static let FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum = GLenum(GL_FLOAT_32_UNSIGNED_INT_24_8_REV)\n        static let FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)\n        static let FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)\n        static let FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)\n        static let FRAMEBUFFER_DEFAULT: GLenum = GLenum(GL_FRAMEBUFFER_DEFAULT)\n        static let FRAMEBUFFER_UNDEFINED: GLenum = GLenum(GL_FRAMEBUFFER_UNDEFINED)\n        static let DEPTH_STENCIL_ATTACHMENT: GLenum = GLenum(GL_DEPTH_STENCIL_ATTACHMENT)\n        static let DEPTH_STENCIL: GLenum = GLenum(GL_DEPTH_STENCIL)\n        static let UNSIGNED_INT_24_8: GLenum = GLenum(GL_UNSIGNED_INT_24_8)\n        static let DEPTH24_STENCIL8: GLenum = GLenum(GL_DEPTH24_STENCIL8)\n        static let UNSIGNED_NORMALIZED: GLenum = GLenum(GL_UNSIGNED_NORMALIZED)\n        static let DRAW_FRAMEBUFFER_BINDING: GLenum = GLenum(GL_DRAW_FRAMEBUFFER_BINDING)\n        static let READ_FRAMEBUFFER: GLenum = GLenum(GL_READ_FRAMEBUFFER)\n        static let DRAW_FRAMEBUFFER: GLenum = GLenum(GL_DRAW_FRAMEBUFFER)\n        static let READ_FRAMEBUFFER_BINDING: GLenum = GLenum(GL_READ_FRAMEBUFFER_BINDING)\n        static let RENDERBUFFER_SAMPLES: GLenum = GLenum(GL_RENDERBUFFER_SAMPLES)\n        static let FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER)\n        static let MAX_COLOR_ATTACHMENTS: GLenum = GLenum(GL_MAX_COLOR_ATTACHMENTS)\n        static let COLOR_ATTACHMENT1: GLenum = GLenum(GL_COLOR_ATTACHMENT1)\n        static let COLOR_ATTACHMENT2: GLenum = GLenum(GL_COLOR_ATTACHMENT2)\n        static let COLOR_ATTACHMENT3: GLenum = GLenum(GL_COLOR_ATTACHMENT3)\n        static let COLOR_ATTACHMENT4: GLenum = GLenum(GL_COLOR_ATTACHMENT4)\n        static let COLOR_ATTACHMENT5: GLenum = GLenum(GL_COLOR_ATTACHMENT5)\n        static let COLOR_ATTACHMENT6: GLenum = GLenum(GL_COLOR_ATTACHMENT6)\n        static let COLOR_ATTACHMENT7: GLenum = GLenum(GL_COLOR_ATTACHMENT7)\n        static let COLOR_ATTACHMENT8: GLenum = GLenum(GL_COLOR_ATTACHMENT8)\n        static let COLOR_ATTACHMENT9: GLenum = GLenum(GL_COLOR_ATTACHMENT9)\n        static let COLOR_ATTACHMENT10: GLenum = GLenum(GL_COLOR_ATTACHMENT10)\n        static let COLOR_ATTACHMENT11: GLenum = GLenum(GL_COLOR_ATTACHMENT11)\n        static let COLOR_ATTACHMENT12: GLenum = GLenum(GL_COLOR_ATTACHMENT12)\n        static let COLOR_ATTACHMENT13: GLenum = GLenum(GL_COLOR_ATTACHMENT13)\n        static let COLOR_ATTACHMENT14: GLenum = GLenum(GL_COLOR_ATTACHMENT14)\n        static let COLOR_ATTACHMENT15: GLenum = GLenum(GL_COLOR_ATTACHMENT15)\n        static let FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum = GLenum(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)\n        static let MAX_SAMPLES: GLenum = GLenum(GL_MAX_SAMPLES)\n        static let HALF_FLOAT: GLenum = GLenum(GL_HALF_FLOAT)\n        static let MAP_READ_BIT: GLenum = GLenum(GL_MAP_READ_BIT)\n        static let MAP_WRITE_BIT: GLenum = GLenum(GL_MAP_WRITE_BIT)\n        static let MAP_INVALIDATE_RANGE_BIT: GLenum = GLenum(GL_MAP_INVALIDATE_RANGE_BIT)\n        static let MAP_INVALIDATE_BUFFER_BIT: GLenum = GLenum(GL_MAP_INVALIDATE_BUFFER_BIT)\n        static let MAP_FLUSH_EXPLICIT_BIT: GLenum = GLenum(GL_MAP_FLUSH_EXPLICIT_BIT)\n        static let MAP_UNSYNCHRONIZED_BIT: GLenum = GLenum(GL_MAP_UNSYNCHRONIZED_BIT)\n        static let RG: GLenum = GLenum(GL_RG)\n        static let RG_INTEGER: GLenum = GLenum(GL_RG_INTEGER)\n        static let R8: GLenum = GLenum(GL_R8)\n        static let RG8: GLenum = GLenum(GL_RG8)\n        static let R16F: GLenum = GLenum(GL_R16F)\n        static let R32F: GLenum = GLenum(GL_R32F)\n        static let RG16F: GLenum = GLenum(GL_RG16F)\n        static let RG32F: GLenum = GLenum(GL_RG32F)\n        static let R8I: GLenum = GLenum(GL_R8I)\n        static let R8UI: GLenum = GLenum(GL_R8UI)\n        static let R16I: GLenum = GLenum(GL_R16I)\n        static let R16UI: GLenum = GLenum(GL_R16UI)\n        static let R32I: GLenum = GLenum(GL_R32I)\n        static let R32UI: GLenum = GLenum(GL_R32UI)\n        static let RG8I: GLenum = GLenum(GL_RG8I)\n        static let RG8UI: GLenum = GLenum(GL_RG8UI)\n        static let RG16I: GLenum = GLenum(GL_RG16I)\n        static let RG16UI: GLenum = GLenum(GL_RG16UI)\n        static let RG32I: GLenum = GLenum(GL_RG32I)\n        static let RG32UI: GLenum = GLenum(GL_RG32UI)\n        static let VERTEX_ARRAY_BINDING: GLenum = GLenum(GL_VERTEX_ARRAY_BINDING)\n        static let R8_SNORM: GLenum = GLenum(GL_R8_SNORM)\n        static let RG8_SNORM: GLenum = GLenum(GL_RG8_SNORM)\n        static let RGB8_SNORM: GLenum = GLenum(GL_RGB8_SNORM)\n        static let RGBA8_SNORM: GLenum = GLenum(GL_RGBA8_SNORM)\n        static let SIGNED_NORMALIZED: GLenum = GLenum(GL_SIGNED_NORMALIZED)\n        static let PRIMITIVE_RESTART_FIXED_INDEX: GLenum = GLenum(GL_PRIMITIVE_RESTART_FIXED_INDEX)\n        static let COPY_READ_BUFFER: GLenum = GLenum(GL_COPY_READ_BUFFER)\n        static let COPY_WRITE_BUFFER: GLenum = GLenum(GL_COPY_WRITE_BUFFER)\n        static let COPY_READ_BUFFER_BINDING: GLenum = GLenum(GL_COPY_READ_BUFFER_BINDING)\n        static let COPY_WRITE_BUFFER_BINDING: GLenum = GLenum(GL_COPY_WRITE_BUFFER_BINDING)\n        static let UNIFORM_BUFFER: GLenum = GLenum(GL_UNIFORM_BUFFER)\n        static let UNIFORM_BUFFER_BINDING: GLenum = GLenum(GL_UNIFORM_BUFFER_BINDING)\n        static let UNIFORM_BUFFER_START: GLenum = GLenum(GL_UNIFORM_BUFFER_START)\n        static let UNIFORM_BUFFER_SIZE: GLenum = GLenum(GL_UNIFORM_BUFFER_SIZE)\n        static let MAX_VERTEX_UNIFORM_BLOCKS: GLenum = GLenum(GL_MAX_VERTEX_UNIFORM_BLOCKS)\n        static let MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum = GLenum(GL_MAX_FRAGMENT_UNIFORM_BLOCKS)\n        static let MAX_COMBINED_UNIFORM_BLOCKS: GLenum = GLenum(GL_MAX_COMBINED_UNIFORM_BLOCKS)\n        static let MAX_UNIFORM_BUFFER_BINDINGS: GLenum = GLenum(GL_MAX_UNIFORM_BUFFER_BINDINGS)\n        static let MAX_UNIFORM_BLOCK_SIZE: GLenum = GLenum(GL_MAX_UNIFORM_BLOCK_SIZE)\n        static let MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum = GLenum(GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS)\n        static let MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum = GLenum(GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS)\n        static let UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum = GLenum(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT)\n        static let ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: GLenum = GLenum(GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)\n        static let ACTIVE_UNIFORM_BLOCKS: GLenum = GLenum(GL_ACTIVE_UNIFORM_BLOCKS)\n        static let UNIFORM_TYPE: GLenum = GLenum(GL_UNIFORM_TYPE)\n        static let UNIFORM_SIZE: GLenum = GLenum(GL_UNIFORM_SIZE)\n        static let UNIFORM_NAME_LENGTH: GLenum = GLenum(GL_UNIFORM_NAME_LENGTH)\n        static let UNIFORM_BLOCK_INDEX: GLenum = GLenum(GL_UNIFORM_BLOCK_INDEX)\n        static let UNIFORM_OFFSET: GLenum = GLenum(GL_UNIFORM_OFFSET)\n        static let UNIFORM_ARRAY_STRIDE: GLenum = GLenum(GL_UNIFORM_ARRAY_STRIDE)\n        static let UNIFORM_MATRIX_STRIDE: GLenum = GLenum(GL_UNIFORM_MATRIX_STRIDE)\n        static let UNIFORM_IS_ROW_MAJOR: GLenum = GLenum(GL_UNIFORM_IS_ROW_MAJOR)\n        static let UNIFORM_BLOCK_BINDING: GLenum = GLenum(GL_UNIFORM_BLOCK_BINDING)\n        static let UNIFORM_BLOCK_DATA_SIZE: GLenum = GLenum(GL_UNIFORM_BLOCK_DATA_SIZE)\n        static let UNIFORM_BLOCK_NAME_LENGTH: GLenum = GLenum(GL_UNIFORM_BLOCK_NAME_LENGTH)\n        static let UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum = GLenum(GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS)\n        static let UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum = GLenum(GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n        static let UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum = GLenum(GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER)\n        static let UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum = GLenum(GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER)\n        static let INVALID_INDEX: GLenum = GLenum(GL_INVALID_INDEX)\n        static let MAX_VERTEX_OUTPUT_COMPONENTS: GLenum = GLenum(GL_MAX_VERTEX_OUTPUT_COMPONENTS)\n        static let MAX_FRAGMENT_INPUT_COMPONENTS: GLenum = GLenum(GL_MAX_FRAGMENT_INPUT_COMPONENTS)\n        static let MAX_SERVER_WAIT_TIMEOUT: GLenum = GLenum(GL_MAX_SERVER_WAIT_TIMEOUT)\n        static let OBJECT_TYPE: GLenum = GLenum(GL_OBJECT_TYPE)\n        static let SYNC_CONDITION: GLenum = GLenum(GL_SYNC_CONDITION)\n        static let SYNC_STATUS: GLenum = GLenum(GL_SYNC_STATUS)\n        static let SYNC_FLAGS: GLenum = GLenum(GL_SYNC_FLAGS)\n        static let SYNC_FENCE: GLenum = GLenum(GL_SYNC_FENCE)\n        static let SYNC_GPU_COMMANDS_COMPLETE: GLenum = GLenum(GL_SYNC_GPU_COMMANDS_COMPLETE)\n        static let UNSIGNALED: GLenum = GLenum(GL_UNSIGNALED)\n        static let SIGNALED: GLenum = GLenum(GL_SIGNALED)\n        static let ALREADY_SIGNALED: GLenum = GLenum(GL_ALREADY_SIGNALED)\n        static let TIMEOUT_EXPIRED: GLenum = GLenum(GL_TIMEOUT_EXPIRED)\n        static let CONDITION_SATISFIED: GLenum = GLenum(GL_CONDITION_SATISFIED)\n        static let WAIT_FAILED: GLenum = GLenum(GL_WAIT_FAILED)\n        static let SYNC_FLUSH_COMMANDS_BIT: GLenum = GLenum(GL_SYNC_FLUSH_COMMANDS_BIT)\n        static let TIMEOUT_IGNORED: GLuint64 = GLuint64(GL_TIMEOUT_IGNORED)\n        static let VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_DIVISOR)\n        static let ANY_SAMPLES_PASSED: GLenum = GLenum(GL_ANY_SAMPLES_PASSED)\n        static let ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum = GLenum(GL_ANY_SAMPLES_PASSED_CONSERVATIVE)\n        static let SAMPLER_BINDING: GLenum = GLenum(GL_SAMPLER_BINDING)\n        static let RGB10_A2UI: GLenum = GLenum(GL_RGB10_A2UI)\n        static let TEXTURE_SWIZZLE_R: GLenum = GLenum(GL_TEXTURE_SWIZZLE_R)\n        static let TEXTURE_SWIZZLE_G: GLenum = GLenum(GL_TEXTURE_SWIZZLE_G)\n        static let TEXTURE_SWIZZLE_B: GLenum = GLenum(GL_TEXTURE_SWIZZLE_B)\n        static let TEXTURE_SWIZZLE_A: GLenum = GLenum(GL_TEXTURE_SWIZZLE_A)\n        static let GREEN: GLenum = GLenum(GL_GREEN)\n        static let BLUE: GLenum = GLenum(GL_BLUE)\n        static let INT_2_10_10_10_REV: GLenum = GLenum(GL_INT_2_10_10_10_REV)\n        static let TRANSFORM_FEEDBACK: GLenum = GLenum(GL_TRANSFORM_FEEDBACK)\n        static let TRANSFORM_FEEDBACK_PAUSED: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_PAUSED)\n        static let TRANSFORM_FEEDBACK_ACTIVE: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_ACTIVE)\n        static let TRANSFORM_FEEDBACK_BINDING: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BINDING)\n        static let PROGRAM_BINARY_RETRIEVABLE_HINT: GLenum = GLenum(GL_PROGRAM_BINARY_RETRIEVABLE_HINT)\n        static let PROGRAM_BINARY_LENGTH: GLenum = GLenum(GL_PROGRAM_BINARY_LENGTH)\n        static let NUM_PROGRAM_BINARY_FORMATS: GLenum = GLenum(GL_NUM_PROGRAM_BINARY_FORMATS)\n        static let PROGRAM_BINARY_FORMATS: GLenum = GLenum(GL_PROGRAM_BINARY_FORMATS)\n        static let COMPRESSED_R11_EAC: GLenum = GLenum(GL_COMPRESSED_R11_EAC)\n        static let COMPRESSED_SIGNED_R11_EAC: GLenum = GLenum(GL_COMPRESSED_SIGNED_R11_EAC)\n        static let COMPRESSED_RG11_EAC: GLenum = GLenum(GL_COMPRESSED_RG11_EAC)\n        static let COMPRESSED_SIGNED_RG11_EAC: GLenum = GLenum(GL_COMPRESSED_SIGNED_RG11_EAC)\n        static let COMPRESSED_RGB8_ETC2: GLenum = GLenum(GL_COMPRESSED_RGB8_ETC2)\n        static let COMPRESSED_SRGB8_ETC2: GLenum = GLenum(GL_COMPRESSED_SRGB8_ETC2)\n        static let COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = GLenum(GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2)\n        static let COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = GLenum(GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2)\n        static let COMPRESSED_RGBA8_ETC2_EAC: GLenum = GLenum(GL_COMPRESSED_RGBA8_ETC2_EAC)\n        static let COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GLenum = GLenum(GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC)\n        static let TEXTURE_IMMUTABLE_FORMAT: GLenum = GLenum(GL_TEXTURE_IMMUTABLE_FORMAT)\n        static let MAX_ELEMENT_INDEX: GLenum = GLenum(GL_MAX_ELEMENT_INDEX)\n        static let NUM_SAMPLE_COUNTS: GLenum = GLenum(GL_NUM_SAMPLE_COUNTS)\n        static let TEXTURE_IMMUTABLE_LEVELS: GLenum = GLenum(GL_TEXTURE_IMMUTABLE_LEVELS)\n\n    }\n\n    class GLK {\n        class VertexAttrib {\n            static let Position: GLuint = GLuint(GLKVertexAttrib.Position.rawValue)\n            static let Normal: GLuint = GLuint(GLKVertexAttrib.Normal.rawValue)\n            static let Color: GLuint = GLuint(GLKVertexAttrib.Color.rawValue)\n            static let TexCoord0: GLuint = GLuint(GLKVertexAttrib.TexCoord0.rawValue)\n            static let TexCoord1: GLuint = GLuint(GLKVertexAttrib.TexCoord1.rawValue)\n        }\n    }\n}\n\n\n\n\u4f7f\u3044\u65b9\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e2d\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304d\u63db\u3048\u305f\u4f8b\u304c\u4ee5\u4e0b\u3002\n\nGameViewController.swift\nimport GLKit\nimport OpenGLES\n\nfunc BUFFER_OFFSET(i: Int) -> UnsafePointer<Void> {\n    let p: UnsafePointer<Void> = nil\n    return p.advancedBy(i)\n}\n\nlet UNIFORM_MODELVIEWPROJECTION_MATRIX = 0\nlet UNIFORM_NORMAL_MATRIX = 1\nvar uniforms = [GLint](count: 2, repeatedValue: 0)\n\nclass GameViewController: GLKViewController {\n\n    var program: GLuint = 0\n\n    var modelViewProjectionMatrix:GLKMatrix4 = GLKMatrix4Identity\n    var normalMatrix: GLKMatrix3 = GLKMatrix3Identity\n    var rotation: Float = 0.0\n\n    var vertexArray: GLuint = 0\n    var vertexBuffer: GLuint = 0\n\n    var context: EAGLContext? = nil\n    var effect: GLKBaseEffect? = nil\n\n    deinit {\n        self.tearDownGL()\n\n        if EAGLContext.currentContext() === self.context {\n            EAGLContext.setCurrentContext(nil)\n        }\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.context = EAGLContext(API: .OpenGLES2)\n\n        if self.context == nil {\n            print(\"Failed to create ES context\")\n        }\n\n        let view = self.view as! GLKView\n        view.context = self.context!\n        view.drawableDepthFormat = .Format24\n\n        self.setupGL()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n\n        if self.isViewLoaded() && (self.view.window != nil) {\n            self.view = nil\n\n            self.tearDownGL()\n\n            if EAGLContext.currentContext() === self.context {\n                EAGLContext.setCurrentContext(nil)\n            }\n            self.context = nil\n        }\n    }\n\n    func setupGL() {\n        EAGLContext.setCurrentContext(self.context)\n\n        self.loadShaders()\n\n        self.effect = GLKBaseEffect()\n        self.effect!.light0.enabled = GL.TRUE\n        self.effect!.light0.diffuseColor = GLKVector4Make(1.0, 0.4, 0.4, 1.0)\n\n        glEnable(GL.DEPTH_TEST)\n\n        glGenVertexArraysOES(1, &vertexArray)\n        glBindVertexArrayOES(vertexArray)\n\n        glGenBuffers(1, &vertexBuffer)\n        glBindBuffer(GL.ARRAY_BUFFER, vertexBuffer)\n        glBufferData(GL.ARRAY_BUFFER, GLsizeiptr(sizeof(GLfloat) * gCubeVertexData.count), &gCubeVertexData, GL.STATIC_DRAW)\n\n        glEnableVertexAttribArray(GLK.VertexAttrib.Position)\n        glVertexAttribPointer(GLK.VertexAttrib.Position, 3, GL.FLOAT, GL.FALSE, 24, BUFFER_OFFSET(0))\n        glEnableVertexAttribArray(GLK.VertexAttrib.Normal)\n        glVertexAttribPointer(GLK.VertexAttrib.Normal, 3, GL.FLOAT, GL.FALSE, 24, BUFFER_OFFSET(12))\n\n        glBindVertexArrayOES(0);\n    }\n\n    func tearDownGL() {\n        EAGLContext.setCurrentContext(self.context)\n\n        glDeleteBuffers(1, &vertexBuffer)\n        glDeleteVertexArraysOES(1, &vertexArray)\n\n        self.effect = nil\n\n        if program != 0 {\n            glDeleteProgram(program)\n            program = 0\n        }\n    }\n\n    // MARK: - GLKView and GLKViewController delegate methods\n\n    func update() {\n        let aspect = fabsf(Float(self.view.bounds.size.width / self.view.bounds.size.height))\n        let projectionMatrix = GLKMatrix4MakePerspective(GLKMathDegreesToRadians(65.0), aspect, 0.1, 100.0)\n\n        self.effect?.transform.projectionMatrix = projectionMatrix\n\n        var baseModelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, -4.0)\n        baseModelViewMatrix = GLKMatrix4Rotate(baseModelViewMatrix, rotation, 0.0, 1.0, 0.0)\n\n        // Compute the model view matrix for the object rendered with GLKit\n        var modelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, -1.5)\n        modelViewMatrix = GLKMatrix4Rotate(modelViewMatrix, rotation, 1.0, 1.0, 1.0)\n        modelViewMatrix = GLKMatrix4Multiply(baseModelViewMatrix, modelViewMatrix)\n\n        self.effect?.transform.modelviewMatrix = modelViewMatrix\n\n        // Compute the model view matrix for the object rendered with ES2\n        modelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, 1.5)\n        modelViewMatrix = GLKMatrix4Rotate(modelViewMatrix, rotation, 1.0, 1.0, 1.0)\n        modelViewMatrix = GLKMatrix4Multiply(baseModelViewMatrix, modelViewMatrix)\n\n        normalMatrix = GLKMatrix3InvertAndTranspose(GLKMatrix4GetMatrix3(modelViewMatrix), nil)\n\n        modelViewProjectionMatrix = GLKMatrix4Multiply(projectionMatrix, modelViewMatrix)\n\n        rotation += Float(self.timeSinceLastUpdate * 0.5)\n    }\n\n    override func glkView(view: GLKView, drawInRect rect: CGRect) {\n        glClearColor(0.65, 0.65, 0.65, 1.0)\n        glClear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT)\n\n        glBindVertexArrayOES(vertexArray)\n\n        // Render the object with GLKit\n        self.effect?.prepareToDraw()\n\n        glDrawArrays(GL.TRIANGLES , 0, 36)\n\n        // Render the object again with ES2\n        glUseProgram(program)\n\n        withUnsafePointer(&modelViewProjectionMatrix, {\n            glUniformMatrix4fv(uniforms[UNIFORM_MODELVIEWPROJECTION_MATRIX], 1, 0, UnsafePointer($0));\n        })\n\n        withUnsafePointer(&normalMatrix, {\n            glUniformMatrix3fv(uniforms[UNIFORM_NORMAL_MATRIX], 1, 0, UnsafePointer($0));\n        })\n\n        glDrawArrays(GL.TRIANGLES, 0, 36)\n    }\n\n    // MARK: -  OpenGL ES 2 shader compilation\n\n    func loadShaders() -> Bool {\n        var vertShader: GLuint = 0\n        var fragShader: GLuint = 0\n        var vertShaderPathname: String\n        var fragShaderPathname: String\n\n        // Create shader program.\n        program = glCreateProgram()\n\n        // Create and compile vertex shader.\n        vertShaderPathname = NSBundle.mainBundle().pathForResource(\"Shader\", ofType: \"vsh\")!\n        if self.compileShader(&vertShader, type: GL.VERTEX_SHADER, file: vertShaderPathname) == false {\n            print(\"Failed to compile vertex shader\")\n            return false\n        }\n\n        // Create and compile fragment shader.\n        fragShaderPathname = NSBundle.mainBundle().pathForResource(\"Shader\", ofType: \"fsh\")!\n        if !self.compileShader(&fragShader, type: GL.FRAGMENT_SHADER, file: fragShaderPathname) {\n            print(\"Failed to compile fragment shader\");\n            return false\n        }\n\n        // Attach vertex shader to program.\n        glAttachShader(program, vertShader)\n\n        // Attach fragment shader to program.\n        glAttachShader(program, fragShader)\n\n        // Bind attribute locations.\n        // This needs to be done prior to linking.\n        glBindAttribLocation(program, GLK.VertexAttrib.Position, \"position\")\n        glBindAttribLocation(program, GLK.VertexAttrib.Normal, \"normal\")\n\n        // Link program.\n        if !self.linkProgram(program) {\n            print(\"Failed to link program: \\(program)\")\n\n            if vertShader != 0 {\n                glDeleteShader(vertShader)\n                vertShader = 0\n            }\n            if fragShader != 0 {\n                glDeleteShader(fragShader)\n                fragShader = 0\n            }\n            if program != 0 {\n                glDeleteProgram(program)\n                program = 0\n            }\n\n            return false\n        }\n\n        // Get uniform locations.\n        uniforms[UNIFORM_MODELVIEWPROJECTION_MATRIX] = glGetUniformLocation(program, \"modelViewProjectionMatrix\")\n        uniforms[UNIFORM_NORMAL_MATRIX] = glGetUniformLocation(program, \"normalMatrix\")\n\n        // Release vertex and fragment shaders.\n        if vertShader != 0 {\n            glDetachShader(program, vertShader)\n            glDeleteShader(vertShader);\n        }\n        if fragShader != 0 {\n            glDetachShader(program, fragShader);\n            glDeleteShader(fragShader);\n        }\n\n        return true\n    }\n\n\n    func compileShader(inout shader: GLuint, type: GLenum, file: String) -> Bool {\n        var status: GLint = 0\n        var source: UnsafePointer<Int8>\n        do {\n            source = try NSString(contentsOfFile: file, encoding: NSUTF8StringEncoding).UTF8String\n        } catch {\n            print(\"Failed to load vertex shader\")\n            return false\n        }\n        var castSource = UnsafePointer<GLchar>(source)\n\n        shader = glCreateShader(type)\n        glShaderSource(shader, 1, &castSource, nil)\n        glCompileShader(shader)\n\n        //#if defined(DEBUG)\n        //        var logLength: GLint = 0\n        //        glGetShaderiv(shader, GLenum(GL_INFO_LOG_LENGTH), &logLength);\n        //        if logLength > 0 {\n        //            var log = UnsafeMutablePointer<GLchar>(malloc(Int(logLength)))\n        //            glGetShaderInfoLog(shader, logLength, &logLength, log);\n        //            NSLog(\"Shader compile log: \\n%s\", log);\n        //            free(log)\n        //        }\n        //#endif\n\n        glGetShaderiv(shader, GL.COMPILE_STATUS, &status)\n        if status == 0 {\n            glDeleteShader(shader);\n            return false\n        }\n        return true\n    }\n\n    func linkProgram(prog: GLuint) -> Bool {\n        var status: GLint = 0\n        glLinkProgram(prog)\n\n        //#if defined(DEBUG)\n        //        var logLength: GLint = 0\n        //        glGetShaderiv(shader, GLenum(GL_INFO_LOG_LENGTH), &logLength);\n        //        if logLength > 0 {\n        //            var log = UnsafeMutablePointer<GLchar>(malloc(Int(logLength)))\n        //            glGetShaderInfoLog(shader, logLength, &logLength, log);\n        //            NSLog(\"Shader compile log: \\n%s\", log);\n        //            free(log)\n        //        }\n        //#endif\n\n        glGetProgramiv(prog, GL.LINK_STATUS, &status)\n        if status == 0 {\n            return false\n        }\n\n        return true\n    }\n\n    func validateProgram(prog: GLuint) -> Bool {\n        var logLength: GLsizei = 0\n        var status: GLint = 0\n\n        glValidateProgram(prog)\n        glGetProgramiv(prog, GL.INFO_LOG_LENGTH, &logLength)\n        if logLength > 0 {\n            var log: [GLchar] = [GLchar](count: Int(logLength), repeatedValue: 0)\n            glGetProgramInfoLog(prog, logLength, &logLength, &log)\n            print(\"Program validate log: \\n\\(log)\")\n        }\n\n        glGetProgramiv(prog, GL.VALIDATE_STATUS, &status)\n        var returnVal = true\n        if status == 0 {\n            returnVal = false\n        }\n        return returnVal\n    }\n}\n\nvar gCubeVertexData: [GLfloat] = [\n    // Data layout for each line below is:\n    // positionX, positionY, positionZ,     normalX, normalY, normalZ,\n    0.5, -0.5, -0.5,        1.0, 0.0, 0.0,\n    0.5, 0.5, -0.5,         1.0, 0.0, 0.0,\n    0.5, -0.5, 0.5,         1.0, 0.0, 0.0,\n    0.5, -0.5, 0.5,         1.0, 0.0, 0.0,\n    0.5, 0.5, -0.5,         1.0, 0.0, 0.0,\n    0.5, 0.5, 0.5,          1.0, 0.0, 0.0,\n\n    0.5, 0.5, -0.5,         0.0, 1.0, 0.0,\n    -0.5, 0.5, -0.5,        0.0, 1.0, 0.0,\n    0.5, 0.5, 0.5,          0.0, 1.0, 0.0,\n    0.5, 0.5, 0.5,          0.0, 1.0, 0.0,\n    -0.5, 0.5, -0.5,        0.0, 1.0, 0.0,\n    -0.5, 0.5, 0.5,         0.0, 1.0, 0.0,\n\n    -0.5, 0.5, -0.5,        -1.0, 0.0, 0.0,\n    -0.5, -0.5, -0.5,      -1.0, 0.0, 0.0,\n    -0.5, 0.5, 0.5,         -1.0, 0.0, 0.0,\n    -0.5, 0.5, 0.5,         -1.0, 0.0, 0.0,\n    -0.5, -0.5, -0.5,      -1.0, 0.0, 0.0,\n    -0.5, -0.5, 0.5,        -1.0, 0.0, 0.0,\n\n    -0.5, -0.5, -0.5,      0.0, -1.0, 0.0,\n    0.5, -0.5, -0.5,        0.0, -1.0, 0.0,\n    -0.5, -0.5, 0.5,        0.0, -1.0, 0.0,\n    -0.5, -0.5, 0.5,        0.0, -1.0, 0.0,\n    0.5, -0.5, -0.5,        0.0, -1.0, 0.0,\n    0.5, -0.5, 0.5,         0.0, -1.0, 0.0,\n\n    0.5, 0.5, 0.5,          0.0, 0.0, 1.0,\n    -0.5, 0.5, 0.5,         0.0, 0.0, 1.0,\n    0.5, -0.5, 0.5,         0.0, 0.0, 1.0,\n    0.5, -0.5, 0.5,         0.0, 0.0, 1.0,\n    -0.5, 0.5, 0.5,         0.0, 0.0, 1.0,\n    -0.5, -0.5, 0.5,        0.0, 0.0, 1.0,\n\n    0.5, -0.5, -0.5,        0.0, 0.0, -1.0,\n    -0.5, -0.5, -0.5,      0.0, 0.0, -1.0,\n    0.5, 0.5, -0.5,         0.0, 0.0, -1.0,\n    0.5, 0.5, -0.5,         0.0, 0.0, -1.0,\n    -0.5, -0.5, -0.5,      0.0, 0.0, -1.0,\n    -0.5, 0.5, -0.5,        0.0, 0.0, -1.0\n]\n\n\n\n##\u306f\u3058\u3081\u306b\n\nXCode7\u306b\u306a\u3063\u3066\u3001\u304d\u3061\u3093\u3068\u52d5\u304fSwift+OpenGL\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u751f\u6210\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u305d\u306e\u305f\u3081\u3001\u524d\u56de\u66f8\u3044\u305f\u8a18\u4e8b[\u300cSwift\u3067OpenGL\u3000\u305d\u306e\uff11\u300d](http://qiita.com/JunSuzukiJapan/items/4f3e7265b8e1175bbfda)\u306f\u4e0d\u8981\u306b\u306a\u3063\u305f\u306e\u3060\u304c\u3001\u307e\u3060\u3061\u3087\u3063\u3068\u4e0d\u6e80\u304c\u3042\u308b\u3002\n\n\u305d\u308c\u306f\u4f55\u304b\u3068\u3044\u3046\u3068\u3001\u3084\u305f\u3089\u3068\u578b\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981\u306a\u3068\u3053\u308d\u3002\n\u305f\u3068\u3048\u3070\u3001\n\n```swift:\nglVertexAttribPointer(GLuint(GLKVertexAttrib.Position.rawValue), 3, GLenum(GL_FLOAT), GLboolean(GL_FALSE), 24, BUFFER_OFFSET(0))\n```\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u3044\u3046\u3068\u3001`GLenum(GL_FLOAT)`\u3001`GLboolean(GL_FALSE)`\u306a\u3069\u304c\u305d\u3046\u3002\n\u7279\u306b`GLuint(GLKVertexAttrib.Position.rawValue)`\u306a\u3069\u306f\u51f6\u60aa\u3067\u3001enum\u3092\u4f7f\u3063\u3066\u3044\u308b\u305b\u3044\u3067rawValue\u3092\u6c42\u3081\u305f\u3046\u3048\u3067\u3055\u3089\u306b\u578b\u30ad\u30e3\u30b9\u30c8\u307e\u3067\u5fc5\u8981\u306b\u306a\u308b\u3002\n\n\u3053\u308c\u306f\u66f8\u304f\u306e\u304c\u9762\u5012\u3060\u3057\u3001\u4f55\u3088\u308a\u8aad\u307f\u306b\u304f\u3044\u3002\n\n##\u3069\u3046\u66f8\u304d\u305f\u3044\u304b\n\n\u307e\u305a\u3001\u3069\u306e\u3088\u3046\u306b\u66f8\u3051\u305f\u3089\u8aad\u307f\u3084\u3059\u304f\u66f8\u304d\u3084\u3059\u3044\u304b\u8003\u3048\u3066\u307f\u305f\u3002\n\n`GLenum(GL_FLOAT)`\u306a\u3089`GL.FLOAT`\u306e\u3088\u3046\u306b\u66f8\u3051\u305f\u3089\u3088\u3055\u305d\u3046\u3060\u3002\n\n`GLuint(GLKVertexAttrib.Position.rawValue)`\u3060\u3063\u305f\u3089`GLK.VertexAttrib.Position`\u3050\u3089\u3044\u3067\u3044\u3044\u306e\u3067\u306f\uff1f\n\n##\u5b9f\u88c5\u65b9\u91dd\n\n\u4e0a\u8a18\u3092\u5ff5\u982d\u306b\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u304b\uff1f\n\n\u3044\u308d\u3044\u308d\u60a9\u3093\u3060\u672b\u3001GLKViewController\u306eextension\u3068\u3057\u3066\u3001\u30af\u30e9\u30b9GL\u3068\u30af\u30e9\u30b9GLK\u3092\u5185\u90e8\u306b\u3082\u305f\u305b\u3066\u3001\u305d\u306e\u4e2d\u3067\u3042\u3089\u304b\u3058\u3081\u578b\u30ad\u30e3\u30b9\u30c8\u3057\u305f\u5b9a\u6570\u3092\u3082\u305f\u305b\u308c\u3070\u3088\u3055\u305d\u3046\u3060\u3002\n\n\u3068\u3044\u3046\u65b9\u91dd\u3067\u66f8\u3044\u305f\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u3002\n\n>\u578b\u3092\u4f55\u306b\u3059\u308c\u3070\u826f\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u3082\u306e\u306f\u3059\u3079\u3066GLenum\u578b\u306b\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u307e\u305a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n>\u305d\u306e\u5834\u5408\u306b\u306f\u3001\u305d\u306e\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u3066\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5168\u4f53\u306f[\u3053\u3061\u3089](https://github.com/JunSuzukiJapan/SwiftGL)\u306b\u7f6e\u3044\u3068\u304d\u307e\u3057\u305f\u3002\n\n##\u5b9f\u88c5\n\n```swift:GLKViewController+ConstantsUtil.swift\nimport GLKit\nimport OpenGLES\n\nextension GLKViewController {\n\n    class GL {\n        /* OpenGL ES core versions */\n        static let ES_VERSION_3_0: GLenum = GLenum(GL_ES_VERSION_3_0)\n        static let ES_VERSION_2_0: GLenum = GLenum(GL_ES_VERSION_2_0)\n\n        /* OpenGL ES 2.0 */\n\n        /* ClearBufferMask */\n        static let DEPTH_BUFFER_BIT: GLbitfield = GLbitfield(GL_DEPTH_BUFFER_BIT)\n        static let STENCIL_BUFFER_BIT: GLbitfield = GLbitfield(GL_STENCIL_BUFFER_BIT)\n        static let COLOR_BUFFER_BIT: GLbitfield = GLbitfield(GL_COLOR_BUFFER_BIT)\n\n        /* Boolean */\n        static let FALSE: GLboolean = GLboolean(GL_FALSE)\n        static let TRUE: GLboolean = GLboolean(GL_TRUE)\n\n        /* BeginMode */\n        static let POINTS: GLenum = GLenum(GL_POINTS)\n        static let LINES: GLenum = GLenum(GL_LINES)\n        static let LINE_LOOP: GLenum = GLenum(GL_LINE_LOOP)\n        static let LINE_STRIP: GLenum = GLenum(GL_LINE_STRIP)\n        static let TRIANGLES: GLenum = GLenum(GL_TRIANGLES)\n        static let TRIANGLE_STRIP: GLenum = GLenum(GL_TRIANGLE_STRIP)\n        static let TRIANGLE_FAN: GLenum = GLenum(GL_TRIANGLE_FAN)\n\n        /* BlendingFactorDest */\n        static let ZERO: GLenum = GLenum(GL_ZERO)\n        static let ONE: GLenum = GLenum(GL_ONE)\n        static let SRC_COLOR: GLenum = GLenum(GL_SRC_COLOR)\n        static let ONE_MINUS_SRC_COLOR: GLenum = GLenum(GL_ONE_MINUS_SRC_COLOR)\n        static let SRC_ALPHA: GLenum = GLenum(GL_SRC_ALPHA)\n        static let ONE_MINUS_SRC_ALPHA: GLenum = GLenum(GL_ONE_MINUS_SRC_ALPHA)\n        static let DST_ALPHA: GLenum = GLenum(GL_DST_ALPHA)\n        static let ONE_MINUS_DST_ALPHA: GLenum = GLenum(GL_ONE_MINUS_DST_ALPHA)\n\n        /* BlendingFactorSrc */\n        /*      ZERO */\n        /*      ONE */\n        static let DST_COLOR: GLenum = GLenum(GL_DST_COLOR)\n        static let ONE_MINUS_DST_COLOR: GLenum = GLenum(GL_ONE_MINUS_DST_COLOR)\n        static let SRC_ALPHA_SATURATE: GLenum = GLenum(GL_SRC_ALPHA_SATURATE)\n        /*      SRC_ALPHA */\n        /*      ONE_MINUS_SRC_ALPHA */\n        /*      DST_ALPHA */\n        /*      ONE_MINUS_DST_ALPHA */\n\n        /* BlendEquationSeparate */\n        static let FUNC_ADD: GLenum = GLenum(GL_FUNC_ADD)\n        static let BLEND_EQUATION: GLenum = GLenum(GL_BLEND_EQUATION)\n        static let BLEND_EQUATION_RGB: GLenum = GLenum(GL_BLEND_EQUATION_RGB)\n        static let BLEND_EQUATION_ALPHA: GLenum = GLenum(GL_BLEND_EQUATION_ALPHA)\n\n        /* BlendSubtract */\n        static let FUNC_SUBTRACT: GLenum = GLenum(GL_FUNC_SUBTRACT)\n        static let FUNC_REVERSE_SUBTRACT: GLenum = GLenum(GL_FUNC_REVERSE_SUBTRACT)\n        /* Separate Blend Functions */\n        static let BLEND_DST_RGB: GLenum = GLenum(GL_BLEND_DST_RGB)\n        static let BLEND_SRC_RGB: GLenum = GLenum(GL_BLEND_SRC_RGB)\n        static let BLEND_DST_ALPHA: GLenum = GLenum(GL_BLEND_DST_ALPHA)\n        static let BLEND_SRC_ALPHA: GLenum = GLenum(GL_BLEND_SRC_ALPHA)\n        static let CONSTANT_COLOR: GLenum = GLenum(GL_CONSTANT_COLOR)\n        static let ONE_MINUS_CONSTANT_COLOR: GLenum = GLenum(GL_ONE_MINUS_CONSTANT_COLOR)\n        static let CONSTANT_ALPHA: GLenum = GLenum(GL_CONSTANT_ALPHA)\n        static let ONE_MINUS_CONSTANT_ALPHA: GLenum = GLenum(GL_ONE_MINUS_CONSTANT_ALPHA)\n        static let BLEND_COLOR: GLenum = GLenum(GL_BLEND_COLOR)\n\n        /* Buffer Objects */\n        static let ARRAY_BUFFER: GLenum = GLenum(GL_ARRAY_BUFFER)\n        static let ELEMENT_ARRAY_BUFFER: GLenum = GLenum(GL_ELEMENT_ARRAY_BUFFER)\n        static let ARRAY_BUFFER_BINDING: GLenum = GLenum(GL_ARRAY_BUFFER_BINDING)\n        static let ELEMENT_ARRAY_BUFFER_BINDING: GLenum = GLenum(GL_ELEMENT_ARRAY_BUFFER_BINDING)\n\n        static let STREAM_DRAW: GLenum = GLenum(GL_STREAM_DRAW)\n        static let STATIC_DRAW: GLenum = GLenum(GL_STATIC_DRAW)\n        static let DYNAMIC_DRAW: GLenum = GLenum(GL_DYNAMIC_DRAW)\n\n        static let BUFFER_SIZE: GLenum = GLenum(GL_BUFFER_SIZE)\n        static let BUFFER_USAGE: GLenum = GLenum(GL_BUFFER_USAGE)\n\n        static let CURRENT_VERTEX_ATTRIB: GLenum = GLenum(GL_CURRENT_VERTEX_ATTRIB)\n\n        /* CullFaceMode */\n        static let FRONT: GLenum = GLenum(GL_FRONT)\n        static let BACK: GLenum = GLenum(GL_BACK)\n        static let FRONT_AND_BACK: GLenum = GLenum(GL_FRONT_AND_BACK)\n\n        /* DepthFunction */\n        /*      NEVER */\n        /*      LESS */\n        /*      EQUAL */\n        /*      LEQUAL */\n        /*      GREATER */\n        /*      NOTEQUAL */\n        /*      GEQUAL */\n        /*      ALWAYS */\n\n        /* EnableCap */\n        static let TEXTURE_2D: GLenum = GLenum(GL_TEXTURE_2D)\n        static let CULL_FACE: GLenum = GLenum(GL_CULL_FACE)\n        static let BLEND: GLenum = GLenum(GL_BLEND)\n        static let DITHER: GLenum = GLenum(GL_DITHER)\n        static let STENCIL_TEST: GLenum = GLenum(GL_STENCIL_TEST)\n        static let DEPTH_TEST: GLenum = GLenum(GL_DEPTH_TEST)\n        static let SCISSOR_TEST: GLenum = GLenum(GL_SCISSOR_TEST)\n        static let POLYGON_OFFSET_FILL: GLenum = GLenum(GL_POLYGON_OFFSET_FILL)\n        static let SAMPLE_ALPHA_TO_COVERAGE: GLenum = GLenum(GL_SAMPLE_ALPHA_TO_COVERAGE)\n        static let SAMPLE_COVERAGE: GLenum = GLenum(GL_SAMPLE_COVERAGE)\n\n        /* ErrorCode */\n        static let NO_ERROR: GLenum = GLenum(GL_NO_ERROR)\n        static let INVALID_ENUM: GLenum = GLenum(GL_INVALID_ENUM)\n        static let INVALID_VALUE: GLenum = GLenum(GL_INVALID_VALUE)\n        static let INVALID_OPERATION: GLenum = GLenum(GL_INVALID_OPERATION)\n        static let OUT_OF_MEMORY: GLenum = GLenum(GL_OUT_OF_MEMORY)\n\n        /* FrontFaceDirection */\n        static let CW: GLenum = GLenum(GL_CW)\n        static let CCW: GLenum = GLenum(GL_CCW)\n\n        /* GetPName */\n        static let LINE_WIDTH: GLenum = GLenum(GL_LINE_WIDTH)\n        static let ALIASED_POINT_SIZE_RANGE: GLenum = GLenum(GL_ALIASED_POINT_SIZE_RANGE)\n        static let ALIASED_LINE_WIDTH_RANGE: GLenum = GLenum(GL_ALIASED_LINE_WIDTH_RANGE)\n        static let CULL_FACE_MODE: GLenum = GLenum(GL_CULL_FACE_MODE)\n        static let FRONT_FACE: GLenum = GLenum(GL_FRONT_FACE)\n        static let DEPTH_RANGE: GLenum = GLenum(GL_DEPTH_RANGE)\n        static let DEPTH_WRITEMASK: GLenum = GLenum(GL_DEPTH_WRITEMASK)\n        static let DEPTH_CLEAR_VALUE: GLenum = GLenum(GL_DEPTH_CLEAR_VALUE)\n        static let DEPTH_FUNC: GLenum = GLenum(GL_DEPTH_FUNC)\n        static let STENCIL_CLEAR_VALUE: GLenum = GLenum(GL_STENCIL_CLEAR_VALUE)\n        static let STENCIL_FUNC: GLenum = GLenum(GL_STENCIL_FUNC)\n        static let STENCIL_FAIL: GLenum = GLenum(GL_STENCIL_FAIL)\n        static let STENCIL_PASS_DEPTH_FAIL: GLenum = GLenum(GL_STENCIL_PASS_DEPTH_FAIL)\n        static let STENCIL_PASS_DEPTH_PASS: GLenum = GLenum(GL_STENCIL_PASS_DEPTH_PASS)\n        static let STENCIL_REF: GLenum = GLenum(GL_STENCIL_REF)\n        static let STENCIL_VALUE_MASK: GLenum = GLenum(GL_STENCIL_VALUE_MASK)\n        static let STENCIL_WRITEMASK: GLenum = GLenum(GL_STENCIL_WRITEMASK)\n        static let STENCIL_BACK_FUNC: GLenum = GLenum(GL_STENCIL_BACK_FUNC)\n        static let STENCIL_BACK_FAIL: GLenum = GLenum(GL_STENCIL_BACK_FAIL)\n        static let STENCIL_BACK_PASS_DEPTH_FAIL: GLenum = GLenum(GL_STENCIL_BACK_PASS_DEPTH_FAIL)\n        static let STENCIL_BACK_PASS_DEPTH_PASS: GLenum = GLenum(GL_STENCIL_BACK_PASS_DEPTH_PASS)\n        static let STENCIL_BACK_REF: GLenum = GLenum(GL_STENCIL_BACK_REF)\n        static let STENCIL_BACK_VALUE_MASK: GLenum = GLenum(GL_STENCIL_BACK_VALUE_MASK)\n        static let STENCIL_BACK_WRITEMASK: GLenum = GLenum(GL_STENCIL_BACK_WRITEMASK)\n        static let VIEWPORT: GLenum = GLenum(GL_VIEWPORT)\n        static let SCISSOR_BOX: GLenum = GLenum(GL_SCISSOR_BOX)\n        /*      SCISSOR_TEST */\n        static let COLOR_CLEAR_VALUE: GLenum = GLenum(GL_COLOR_CLEAR_VALUE)\n        static let COLOR_WRITEMASK: GLenum = GLenum(GL_COLOR_WRITEMASK)\n        static let UNPACK_ALIGNMENT: GLenum = GLenum(GL_UNPACK_ALIGNMENT)\n        static let PACK_ALIGNMENT: GLenum = GLenum(GL_PACK_ALIGNMENT)\n        static let MAX_TEXTURE_SIZE: GLenum = GLenum(GL_MAX_TEXTURE_SIZE)\n        static let MAX_VIEWPORT_DIMS: GLenum = GLenum(GL_MAX_VIEWPORT_DIMS)\n        static let SUBPIXEL_BITS: GLenum = GLenum(GL_SUBPIXEL_BITS)\n        static let RED_BITS: GLenum = GLenum(GL_RED_BITS)\n        static let GREEN_BITS: GLenum = GLenum(GL_GREEN_BITS)\n        static let BLUE_BITS: GLenum = GLenum(GL_BLUE_BITS)\n        static let ALPHA_BITS: GLenum = GLenum(GL_ALPHA_BITS)\n        static let DEPTH_BITS: GLenum = GLenum(GL_DEPTH_BITS)\n        static let STENCIL_BITS: GLenum = GLenum(GL_STENCIL_BITS)\n        static let POLYGON_OFFSET_UNITS: GLenum = GLenum(GL_POLYGON_OFFSET_UNITS)\n        /*      POLYGON_OFFSET_FILL */\n        static let POLYGON_OFFSET_FACTOR: GLenum = GLenum(GL_POLYGON_OFFSET_FACTOR)\n        static let TEXTURE_BINDING_2D: GLenum = GLenum(GL_TEXTURE_BINDING_2D)\n        static let SAMPLE_BUFFERS: GLenum = GLenum(GL_SAMPLE_BUFFERS)\n        static let SAMPLES: GLenum = GLenum(GL_SAMPLES)\n        static let SAMPLE_COVERAGE_VALUE: GLenum = GLenum(GL_SAMPLE_COVERAGE_VALUE)\n        static let SAMPLE_COVERAGE_INVERT: GLenum = GLenum(GL_SAMPLE_COVERAGE_INVERT)\n\n        /* GetTextureParameter */\n        /*      TEXTURE_MAG_FILTER */\n        /*      TEXTURE_MIN_FILTER */\n        /*      TEXTURE_WRAP_S */\n        /*      TEXTURE_WRAP_T */\n\n        static let NUM_COMPRESSED_TEXTURE_FORMATS: GLenum = GLenum(GL_NUM_COMPRESSED_TEXTURE_FORMATS)\n        static let COMPRESSED_TEXTURE_FORMATS: GLenum = GLenum(GL_COMPRESSED_TEXTURE_FORMATS)\n\n        /* HintMode */\n        static let DONT_CARE: GLenum = GLenum(GL_DONT_CARE)\n        static let FASTEST: GLenum = GLenum(GL_FASTEST)\n        static let NICEST: GLenum = GLenum(GL_NICEST)\n\n        /* HintTarget */\n        static let GENERATE_MIPMAP_HINT: GLenum = GLenum(GL_GENERATE_MIPMAP_HINT)\n\n        /* DataType */\n        static let BYTE: GLenum = GLenum(GL_BYTE)\n        static let UNSIGNED_BYTE: GLenum = GLenum(GL_UNSIGNED_BYTE)\n        static let SHORT: GLenum = GLenum(GL_SHORT)\n        static let UNSIGNED_SHORT: GLenum = GLenum(GL_UNSIGNED_SHORT)\n        static let INT: GLenum = GLenum(GL_INT)\n        static let UNSIGNED_INT: GLenum = GLenum(GL_UNSIGNED_INT)\n        static let FLOAT: GLenum = GLenum(GL_FLOAT)\n        static let FIXED: GLenum = GLenum(GL_FIXED)\n\n        /* PixelFormat */\n        static let DEPTH_COMPONENT: GLenum = GLenum(GL_DEPTH_COMPONENT)\n        static let ALPHA: GLenum = GLenum(GL_ALPHA)\n        static let RGB: GLenum = GLenum(GL_RGB)\n        static let RGBA: GLenum = GLenum(GL_RGBA)\n        static let LUMINANCE: GLenum = GLenum(GL_LUMINANCE)\n        static let LUMINANCE_ALPHA: GLenum = GLenum(GL_LUMINANCE_ALPHA)\n\n        /* PixelType */\n        /*      UNSIGNED_BYTE */\n        static let UNSIGNED_SHORT_4_4_4_4: GLenum = GLenum(GL_UNSIGNED_SHORT_4_4_4_4)\n        static let UNSIGNED_SHORT_5_5_5_1: GLenum = GLenum(GL_UNSIGNED_SHORT_5_5_5_1)\n        static let UNSIGNED_SHORT_5_6_5: GLenum = GLenum(GL_UNSIGNED_SHORT_5_6_5)\n\n        /* Shaders */\n        static let FRAGMENT_SHADER: GLenum = GLenum(GL_FRAGMENT_SHADER)\n        static let VERTEX_SHADER: GLenum = GLenum(GL_VERTEX_SHADER)\n        static let MAX_VERTEX_ATTRIBS: GLenum = GLenum(GL_MAX_VERTEX_ATTRIBS)\n        static let MAX_VERTEX_UNIFORM_VECTORS: GLenum = GLenum(GL_MAX_VERTEX_UNIFORM_VECTORS)\n        static let MAX_VARYING_VECTORS: GLenum = GLenum(GL_MAX_VARYING_VECTORS)\n        static let MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = GLenum(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS)\n        static let MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum = GLenum(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS)\n        static let MAX_TEXTURE_IMAGE_UNITS: GLenum = GLenum(GL_MAX_TEXTURE_IMAGE_UNITS)\n        static let MAX_FRAGMENT_UNIFORM_VECTORS: GLenum = GLenum(GL_MAX_FRAGMENT_UNIFORM_VECTORS)\n        static let SHADER_TYPE: GLenum = GLenum(GL_SHADER_TYPE)\n        static let DELETE_STATUS: GLenum = GLenum(GL_DELETE_STATUS)\n        static let LINK_STATUS: GLenum = GLenum(GL_LINK_STATUS)\n        static let VALIDATE_STATUS: GLenum = GLenum(GL_VALIDATE_STATUS)\n        static let ATTACHED_SHADERS: GLenum = GLenum(GL_ATTACHED_SHADERS)\n        static let ACTIVE_UNIFORMS: GLenum = GLenum(GL_ACTIVE_UNIFORMS)\n        static let ACTIVE_UNIFORM_MAX_LENGTH: GLenum = GLenum(GL_ACTIVE_UNIFORM_MAX_LENGTH)\n        static let ACTIVE_ATTRIBUTES: GLenum = GLenum(GL_ACTIVE_ATTRIBUTES)\n        static let ACTIVE_ATTRIBUTE_MAX_LENGTH: GLenum = GLenum(GL_ACTIVE_ATTRIBUTE_MAX_LENGTH)\n        static let SHADING_LANGUAGE_VERSION: GLenum = GLenum(GL_SHADING_LANGUAGE_VERSION)\n        static let CURRENT_PROGRAM: GLenum = GLenum(GL_CURRENT_PROGRAM)\n\n        /* StencilFunction */\n        static let NEVER: GLenum = GLenum(GL_NEVER)\n        static let LESS: GLenum = GLenum(GL_LESS)\n        static let EQUAL: GLenum = GLenum(GL_EQUAL)\n        static let LEQUAL: GLenum = GLenum(GL_LEQUAL)\n        static let GREATER: GLenum = GLenum(GL_GREATER)\n        static let NOTEQUAL: GLenum = GLenum(GL_NOTEQUAL)\n        static let GEQUAL: GLenum = GLenum(GL_GEQUAL)\n        static let ALWAYS: GLenum = GLenum(GL_ALWAYS)\n\n        /* StencilOp */\n        /*      ZERO */\n        static let KEEP: GLenum = GLenum(GL_KEEP)\n        static let REPLACE: GLenum = GLenum(GL_REPLACE)\n        static let INCR: GLenum = GLenum(GL_INCR)\n        static let DECR: GLenum = GLenum(GL_DECR)\n        static let INVERT: GLenum = GLenum(GL_INVERT)\n        static let INCR_WRAP: GLenum = GLenum(GL_INCR_WRAP)\n        static let DECR_WRAP: GLenum = GLenum(GL_DECR_WRAP)\n\n        /* StringName */\n        static let VENDOR: GLenum = GLenum(GL_VENDOR)\n        static let RENDERER: GLenum = GLenum(GL_RENDERER)\n        static let VERSION: GLenum = GLenum(GL_VERSION)\n        static let EXTENSIONS: GLenum = GLenum(GL_EXTENSIONS)\n\n        /* TextureMagFilter */\n        static let NEAREST: GLenum = GLenum(GL_NEAREST)\n        static let LINEAR: GLenum = GLenum(GL_LINEAR)\n\n        /* TextureMinFilter */\n        /*      NEAREST */\n        /*      LINEAR */\n        static let NEAREST_MIPMAP_NEAREST: GLenum = GLenum(GL_NEAREST_MIPMAP_NEAREST)\n        static let LINEAR_MIPMAP_NEAREST: GLenum = GLenum(GL_LINEAR_MIPMAP_NEAREST)\n        static let NEAREST_MIPMAP_LINEAR: GLenum = GLenum(GL_NEAREST_MIPMAP_LINEAR)\n        static let LINEAR_MIPMAP_LINEAR: GLenum = GLenum(GL_LINEAR_MIPMAP_LINEAR)\n\n        /* TextureParameterName */\n        static let TEXTURE_MAG_FILTER: GLenum = GLenum(GL_TEXTURE_MAG_FILTER)\n        static let TEXTURE_MIN_FILTER: GLenum = GLenum(GL_TEXTURE_MIN_FILTER)\n        static let TEXTURE_WRAP_S: GLenum = GLenum(GL_TEXTURE_WRAP_S)\n        static let TEXTURE_WRAP_T: GLenum = GLenum(GL_TEXTURE_WRAP_T)\n\n        /* TextureTarget */\n        /*      TEXTURE_2D */\n        static let TEXTURE: GLenum = GLenum(GL_TEXTURE)\n\n        static let TEXTURE_CUBE_MAP: GLenum = GLenum(GL_TEXTURE_CUBE_MAP)\n        static let TEXTURE_BINDING_CUBE_MAP: GLenum = GLenum(GL_TEXTURE_BINDING_CUBE_MAP)\n        static let TEXTURE_CUBE_MAP_POSITIVE_X: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_POSITIVE_X)\n        static let TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_NEGATIVE_X)\n        static let TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_POSITIVE_Y)\n        static let TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y)\n        static let TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_POSITIVE_Z)\n        static let TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum = GLenum(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z)\n        static let MAX_CUBE_MAP_TEXTURE_SIZE: GLenum = GLenum(GL_MAX_CUBE_MAP_TEXTURE_SIZE)\n\n        /* TextureUnit */\n        static let TEXTURE0: GLenum = GLenum(GL_TEXTURE0)\n        static let TEXTURE1: GLenum = GLenum(GL_TEXTURE1)\n        static let TEXTURE2: GLenum = GLenum(GL_TEXTURE2)\n        static let TEXTURE3: GLenum = GLenum(GL_TEXTURE3)\n        static let TEXTURE4: GLenum = GLenum(GL_TEXTURE4)\n        static let TEXTURE5: GLenum = GLenum(GL_TEXTURE5)\n        static let TEXTURE6: GLenum = GLenum(GL_TEXTURE6)\n        static let TEXTURE7: GLenum = GLenum(GL_TEXTURE7)\n        static let TEXTURE8: GLenum = GLenum(GL_TEXTURE8)\n        static let TEXTURE9: GLenum = GLenum(GL_TEXTURE9)\n        static let TEXTURE10: GLenum = GLenum(GL_TEXTURE10)\n        static let TEXTURE11: GLenum = GLenum(GL_TEXTURE11)\n        static let TEXTURE12: GLenum = GLenum(GL_TEXTURE12)\n        static let TEXTURE13: GLenum = GLenum(GL_TEXTURE13)\n        static let TEXTURE14: GLenum = GLenum(GL_TEXTURE14)\n        static let TEXTURE15: GLenum = GLenum(GL_TEXTURE15)\n        static let TEXTURE16: GLenum = GLenum(GL_TEXTURE16)\n        static let TEXTURE17: GLenum = GLenum(GL_TEXTURE17)\n        static let TEXTURE18: GLenum = GLenum(GL_TEXTURE18)\n        static let TEXTURE19: GLenum = GLenum(GL_TEXTURE19)\n        static let TEXTURE20: GLenum = GLenum(GL_TEXTURE20)\n        static let TEXTURE21: GLenum = GLenum(GL_TEXTURE21)\n        static let TEXTURE22: GLenum = GLenum(GL_TEXTURE22)\n        static let TEXTURE23: GLenum = GLenum(GL_TEXTURE23)\n        static let TEXTURE24: GLenum = GLenum(GL_TEXTURE24)\n        static let TEXTURE25: GLenum = GLenum(GL_TEXTURE25)\n        static let TEXTURE26: GLenum = GLenum(GL_TEXTURE26)\n        static let TEXTURE27: GLenum = GLenum(GL_TEXTURE27)\n        static let TEXTURE28: GLenum = GLenum(GL_TEXTURE28)\n        static let TEXTURE29: GLenum = GLenum(GL_TEXTURE29)\n        static let TEXTURE30: GLenum = GLenum(GL_TEXTURE30)\n        static let TEXTURE31: GLenum = GLenum(GL_TEXTURE31)\n        static let ACTIVE_TEXTURE: GLenum = GLenum(GL_ACTIVE_TEXTURE)\n\n        /* TextureWrapMode */\n        static let REPEAT: GLenum = GLenum(GL_REPEAT)\n        static let CLAMP_TO_EDGE: GLenum = GLenum(GL_CLAMP_TO_EDGE)\n        static let MIRRORED_REPEAT: GLenum = GLenum(GL_MIRRORED_REPEAT)\n\n        /* Uniform Types */\n        static let FLOAT_VEC2: GLenum = GLenum(GL_FLOAT_VEC2)\n        static let FLOAT_VEC3: GLenum = GLenum(GL_FLOAT_VEC3)\n        static let FLOAT_VEC4: GLenum = GLenum(GL_FLOAT_VEC4)\n        static let INT_VEC2: GLenum = GLenum(GL_INT_VEC2)\n        static let INT_VEC3: GLenum = GLenum(GL_INT_VEC3)\n        static let INT_VEC4: GLenum = GLenum(GL_INT_VEC4)\n        static let BOOL: GLenum = GLenum(GL_BOOL)\n        static let BOOL_VEC2: GLenum = GLenum(GL_BOOL_VEC2)\n        static let BOOL_VEC3: GLenum = GLenum(GL_BOOL_VEC3)\n        static let BOOL_VEC4: GLenum = GLenum(GL_BOOL_VEC4)\n        static let FLOAT_MAT2: GLenum = GLenum(GL_FLOAT_MAT2)\n        static let FLOAT_MAT3: GLenum = GLenum(GL_FLOAT_MAT3)\n        static let FLOAT_MAT4: GLenum = GLenum(GL_FLOAT_MAT4)\n        static let SAMPLER_2D: GLenum = GLenum(GL_SAMPLER_2D)\n        static let SAMPLER_CUBE: GLenum = GLenum(GL_SAMPLER_CUBE)\n\n        /* Vertex Arrays */\n        static let VERTEX_ATTRIB_ARRAY_ENABLED: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_ENABLED)\n        static let VERTEX_ATTRIB_ARRAY_SIZE: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_SIZE)\n        static let VERTEX_ATTRIB_ARRAY_STRIDE: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_STRIDE)\n        static let VERTEX_ATTRIB_ARRAY_TYPE: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_TYPE)\n        static let VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED)\n        static let VERTEX_ATTRIB_ARRAY_POINTER: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_POINTER)\n        static let VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)\n\n        /* Read Format */\n        static let IMPLEMENTATION_COLOR_READ_TYPE: GLenum = GLenum(GL_IMPLEMENTATION_COLOR_READ_TYPE)\n        static let IMPLEMENTATION_COLOR_READ_FORMAT: GLenum = GLenum(GL_IMPLEMENTATION_COLOR_READ_FORMAT)\n\n        /* Shader Source */\n        static let COMPILE_STATUS: GLenum = GLenum(GL_COMPILE_STATUS)\n        static let INFO_LOG_LENGTH: GLenum = GLenum(GL_INFO_LOG_LENGTH)\n        static let SHADER_SOURCE_LENGTH: GLenum = GLenum(GL_SHADER_SOURCE_LENGTH)\n        static let SHADER_COMPILER: GLenum = GLenum(GL_SHADER_COMPILER)\n\n        /* Shader Binary */\n        static let SHADER_BINARY_FORMATS: GLenum = GLenum(GL_SHADER_BINARY_FORMATS)\n        static let NUM_SHADER_BINARY_FORMATS: GLenum = GLenum(GL_NUM_SHADER_BINARY_FORMATS)\n\n        /* Shader Precision-Specified Types */\n        static let LOW_FLOAT: GLenum = GLenum(GL_LOW_FLOAT)\n        static let MEDIUM_FLOAT: GLenum = GLenum(GL_MEDIUM_FLOAT)\n        static let HIGH_FLOAT: GLenum = GLenum(GL_HIGH_FLOAT)\n        static let LOW_INT: GLenum = GLenum(GL_LOW_INT)\n        static let MEDIUM_INT: GLenum = GLenum(GL_MEDIUM_INT)\n        static let HIGH_INT: GLenum = GLenum(GL_HIGH_INT)\n\n        /* Framebuffer Object. */\n        static let FRAMEBUFFER: GLenum = GLenum(GL_FRAMEBUFFER)\n        static let RENDERBUFFER: GLenum = GLenum(GL_RENDERBUFFER)\n\n        static let RGBA4: GLenum = GLenum(GL_RGBA4)\n        static let RGB5_A1: GLenum = GLenum(GL_RGB5_A1)\n        static let RGB565: GLenum = GLenum(GL_RGB565)\n        static let DEPTH_COMPONENT16: GLenum = GLenum(GL_DEPTH_COMPONENT16)\n        static let STENCIL_INDEX8: GLenum = GLenum(GL_STENCIL_INDEX8)\n\n        static let RENDERBUFFER_WIDTH: GLenum = GLenum(GL_RENDERBUFFER_WIDTH)\n        static let RENDERBUFFER_HEIGHT: GLenum = GLenum(GL_RENDERBUFFER_HEIGHT)\n        static let RENDERBUFFER_INTERNAL_FORMAT: GLenum = GLenum(GL_RENDERBUFFER_INTERNAL_FORMAT)\n        static let RENDERBUFFER_RED_SIZE: GLenum = GLenum(GL_RENDERBUFFER_RED_SIZE)\n        static let RENDERBUFFER_GREEN_SIZE: GLenum = GLenum(GL_RENDERBUFFER_GREEN_SIZE)\n        static let RENDERBUFFER_BLUE_SIZE: GLenum = GLenum(GL_RENDERBUFFER_BLUE_SIZE)\n        static let RENDERBUFFER_ALPHA_SIZE: GLenum = GLenum(GL_RENDERBUFFER_ALPHA_SIZE)\n        static let RENDERBUFFER_DEPTH_SIZE: GLenum = GLenum(GL_RENDERBUFFER_DEPTH_SIZE)\n        static let RENDERBUFFER_STENCIL_SIZE: GLenum = GLenum(GL_RENDERBUFFER_STENCIL_SIZE)\n\n        static let FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)\n        static let FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)\n        static let FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)\n        static let FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)\n\n        static let COLOR_ATTACHMENT0: GLenum = GLenum(GL_COLOR_ATTACHMENT0)\n        static let DEPTH_ATTACHMENT: GLenum = GLenum(GL_DEPTH_ATTACHMENT)\n        static let STENCIL_ATTACHMENT: GLenum = GLenum(GL_STENCIL_ATTACHMENT)\n\n        static let NONE: GLenum = GLenum(GL_NONE)\n\n        static let FRAMEBUFFER_COMPLETE: GLenum = GLenum(GL_FRAMEBUFFER_COMPLETE)\n        static let FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum = GLenum(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)\n        static let FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = GLenum(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)\n        static let FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum = GLenum(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)\n        static let FRAMEBUFFER_UNSUPPORTED: GLenum = GLenum(GL_FRAMEBUFFER_UNSUPPORTED)\n\n        static let FRAMEBUFFER_BINDING: GLenum = GLenum(GL_FRAMEBUFFER_BINDING)\n        static let RENDERBUFFER_BINDING: GLenum = GLenum(GL_RENDERBUFFER_BINDING)\n        static let MAX_RENDERBUFFER_SIZE: GLenum = GLenum(GL_MAX_RENDERBUFFER_SIZE)\n\n        static let INVALID_FRAMEBUFFER_OPERATION: GLenum = GLenum(GL_INVALID_FRAMEBUFFER_OPERATION)\n\n        /* OpenGL ES 3.0 */\n\n        static let READ_BUFFER: GLenum = GLenum(GL_READ_BUFFER)\n        static let UNPACK_ROW_LENGTH: GLenum = GLenum(GL_UNPACK_ROW_LENGTH)\n        static let UNPACK_SKIP_ROWS: GLenum = GLenum(GL_UNPACK_SKIP_ROWS)\n        static let UNPACK_SKIP_PIXELS: GLenum = GLenum(GL_UNPACK_SKIP_PIXELS)\n        static let PACK_ROW_LENGTH: GLenum = GLenum(GL_PACK_ROW_LENGTH)\n        static let PACK_SKIP_ROWS: GLenum = GLenum(GL_PACK_SKIP_ROWS)\n        static let PACK_SKIP_PIXELS: GLenum = GLenum(GL_PACK_SKIP_PIXELS)\n        static let COLOR: GLenum = GLenum(GL_COLOR)\n        static let DEPTH: GLenum = GLenum(GL_DEPTH)\n        static let STENCIL: GLenum = GLenum(GL_STENCIL)\n        static let RED: GLenum = GLenum(GL_RED)\n        static let RGB8: GLenum = GLenum(GL_RGB8)\n        static let RGBA8: GLenum = GLenum(GL_RGBA8)\n        static let RGB10_A2: GLenum = GLenum(GL_RGB10_A2)\n        static let TEXTURE_BINDING_3D: GLenum = GLenum(GL_TEXTURE_BINDING_3D)\n        static let UNPACK_SKIP_IMAGES: GLenum = GLenum(GL_UNPACK_SKIP_IMAGES)\n        static let UNPACK_IMAGE_HEIGHT: GLenum = GLenum(GL_UNPACK_IMAGE_HEIGHT)\n        static let TEXTURE_3D: GLenum = GLenum(GL_TEXTURE_3D)\n        static let TEXTURE_WRAP_R: GLenum = GLenum(GL_TEXTURE_WRAP_R)\n        static let MAX_3D_TEXTURE_SIZE: GLenum = GLenum(GL_MAX_3D_TEXTURE_SIZE)\n        static let UNSIGNED_INT_2_10_10_10_REV: GLenum = GLenum(GL_UNSIGNED_INT_2_10_10_10_REV)\n        static let MAX_ELEMENTS_VERTICES: GLenum = GLenum(GL_MAX_ELEMENTS_VERTICES)\n        static let MAX_ELEMENTS_INDICES: GLenum = GLenum(GL_MAX_ELEMENTS_INDICES)\n        static let TEXTURE_MIN_LOD: GLenum = GLenum(GL_TEXTURE_MIN_LOD)\n        static let TEXTURE_MAX_LOD: GLenum = GLenum(GL_TEXTURE_MAX_LOD)\n        static let TEXTURE_BASE_LEVEL: GLenum = GLenum(GL_TEXTURE_BASE_LEVEL)\n        static let TEXTURE_MAX_LEVEL: GLenum = GLenum(GL_TEXTURE_MAX_LEVEL)\n        static let MIN: GLenum = GLenum(GL_MIN)\n        static let MAX: GLenum = GLenum(GL_MAX)\n        static let DEPTH_COMPONENT24: GLenum = GLenum(GL_DEPTH_COMPONENT24)\n        static let MAX_TEXTURE_LOD_BIAS: GLenum = GLenum(GL_MAX_TEXTURE_LOD_BIAS)\n        static let TEXTURE_COMPARE_MODE: GLenum = GLenum(GL_TEXTURE_COMPARE_MODE)\n        static let TEXTURE_COMPARE_FUNC: GLenum = GLenum(GL_TEXTURE_COMPARE_FUNC)\n        static let CURRENT_QUERY: GLenum = GLenum(GL_CURRENT_QUERY)\n        static let QUERY_RESULT: GLenum = GLenum(GL_QUERY_RESULT)\n        static let QUERY_RESULT_AVAILABLE: GLenum = GLenum(GL_QUERY_RESULT_AVAILABLE)\n        static let BUFFER_MAPPED: GLenum = GLenum(GL_BUFFER_MAPPED)\n        static let BUFFER_MAP_POINTER: GLenum = GLenum(GL_BUFFER_MAP_POINTER)\n        static let STREAM_READ: GLenum = GLenum(GL_STREAM_READ)\n        static let STREAM_COPY: GLenum = GLenum(GL_STREAM_COPY)\n        static let STATIC_READ: GLenum = GLenum(GL_STATIC_READ)\n        static let STATIC_COPY: GLenum = GLenum(GL_STATIC_COPY)\n        static let DYNAMIC_READ: GLenum = GLenum(GL_DYNAMIC_READ)\n        static let DYNAMIC_COPY: GLenum = GLenum(GL_DYNAMIC_COPY)\n        static let MAX_DRAW_BUFFERS: GLenum = GLenum(GL_MAX_DRAW_BUFFERS)\n        static let DRAW_BUFFER0: GLenum = GLenum(GL_DRAW_BUFFER0)\n        static let DRAW_BUFFER1: GLenum = GLenum(GL_DRAW_BUFFER1)\n        static let DRAW_BUFFER2: GLenum = GLenum(GL_DRAW_BUFFER2)\n        static let DRAW_BUFFER3: GLenum = GLenum(GL_DRAW_BUFFER3)\n        static let DRAW_BUFFER4: GLenum = GLenum(GL_DRAW_BUFFER4)\n        static let DRAW_BUFFER5: GLenum = GLenum(GL_DRAW_BUFFER5)\n        static let DRAW_BUFFER6: GLenum = GLenum(GL_DRAW_BUFFER6)\n        static let DRAW_BUFFER7: GLenum = GLenum(GL_DRAW_BUFFER7)\n        static let DRAW_BUFFER8: GLenum = GLenum(GL_DRAW_BUFFER8)\n        static let DRAW_BUFFER9: GLenum = GLenum(GL_DRAW_BUFFER9)\n        static let DRAW_BUFFER10: GLenum = GLenum(GL_DRAW_BUFFER10)\n        static let DRAW_BUFFER11: GLenum = GLenum(GL_DRAW_BUFFER11)\n        static let DRAW_BUFFER12: GLenum = GLenum(GL_DRAW_BUFFER12)\n        static let DRAW_BUFFER13: GLenum = GLenum(GL_DRAW_BUFFER13)\n        static let DRAW_BUFFER14: GLenum = GLenum(GL_DRAW_BUFFER14)\n        static let DRAW_BUFFER15: GLenum = GLenum(GL_DRAW_BUFFER15)\n        static let MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum = GLenum(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS)\n        static let MAX_VERTEX_UNIFORM_COMPONENTS: GLenum = GLenum(GL_MAX_VERTEX_UNIFORM_COMPONENTS)\n        static let SAMPLER_3D: GLenum = GLenum(GL_SAMPLER_3D)\n        static let SAMPLER_2D_SHADOW: GLenum = GLenum(GL_SAMPLER_2D_SHADOW)\n        static let FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum = GLenum(GL_FRAGMENT_SHADER_DERIVATIVE_HINT)\n        static let PIXEL_PACK_BUFFER: GLenum = GLenum(GL_PIXEL_PACK_BUFFER)\n        static let PIXEL_UNPACK_BUFFER: GLenum = GLenum(GL_PIXEL_UNPACK_BUFFER)\n        static let PIXEL_PACK_BUFFER_BINDING: GLenum = GLenum(GL_PIXEL_PACK_BUFFER_BINDING)\n        static let PIXEL_UNPACK_BUFFER_BINDING: GLenum = GLenum(GL_PIXEL_UNPACK_BUFFER_BINDING)\n        static let FLOAT_MAT2x3: GLenum = GLenum(GL_FLOAT_MAT2x3)\n        static let FLOAT_MAT2x4: GLenum = GLenum(GL_FLOAT_MAT2x4)\n        static let FLOAT_MAT3x2: GLenum = GLenum(GL_FLOAT_MAT3x2)\n        static let FLOAT_MAT3x4: GLenum = GLenum(GL_FLOAT_MAT3x4)\n        static let FLOAT_MAT4x2: GLenum = GLenum(GL_FLOAT_MAT4x2)\n        static let FLOAT_MAT4x3: GLenum = GLenum(GL_FLOAT_MAT4x3)\n        static let SRGB: GLenum = GLenum(GL_SRGB)\n        static let SRGB8: GLenum = GLenum(GL_SRGB8)\n        static let SRGB8_ALPHA8: GLenum = GLenum(GL_SRGB8_ALPHA8)\n        static let COMPARE_REF_TO_TEXTURE: GLenum = GLenum(GL_COMPARE_REF_TO_TEXTURE)\n        static let MAJOR_VERSION: GLenum = GLenum(GL_MAJOR_VERSION)\n        static let MINOR_VERSION: GLenum = GLenum(GL_MINOR_VERSION)\n        static let NUM_EXTENSIONS: GLenum = GLenum(GL_NUM_EXTENSIONS)\n        static let RGBA32F: GLenum = GLenum(GL_RGBA32F)\n        static let RGB32F: GLenum = GLenum(GL_RGB32F)\n        static let RGBA16F: GLenum = GLenum(GL_RGBA16F)\n        static let RGB16F: GLenum = GLenum(GL_RGB16F)\n        static let VERTEX_ATTRIB_ARRAY_INTEGER: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_INTEGER)\n        static let MAX_ARRAY_TEXTURE_LAYERS: GLenum = GLenum(GL_MAX_ARRAY_TEXTURE_LAYERS)\n        static let MIN_PROGRAM_TEXEL_OFFSET: GLenum = GLenum(GL_MIN_PROGRAM_TEXEL_OFFSET)\n        static let MAX_PROGRAM_TEXEL_OFFSET: GLenum = GLenum(GL_MAX_PROGRAM_TEXEL_OFFSET)\n        static let MAX_VARYING_COMPONENTS: GLenum = GLenum(GL_MAX_VARYING_COMPONENTS)\n        static let TEXTURE_2D_ARRAY: GLenum = GLenum(GL_TEXTURE_2D_ARRAY)\n        static let TEXTURE_BINDING_2D_ARRAY: GLenum = GLenum(GL_TEXTURE_BINDING_2D_ARRAY)\n        static let R11F_G11F_B10F: GLenum = GLenum(GL_R11F_G11F_B10F)\n        static let UNSIGNED_INT_10F_11F_11F_REV: GLenum = GLenum(GL_UNSIGNED_INT_10F_11F_11F_REV)\n        static let RGB9_E5: GLenum = GLenum(GL_RGB9_E5)\n        static let UNSIGNED_INT_5_9_9_9_REV: GLenum = GLenum(GL_UNSIGNED_INT_5_9_9_9_REV)\n        static let TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH)\n        static let TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER_MODE)\n        static let MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum = GLenum(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS)\n        static let TRANSFORM_FEEDBACK_VARYINGS: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_VARYINGS)\n        static let TRANSFORM_FEEDBACK_BUFFER_START: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER_START)\n        static let TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE)\n        static let TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN)\n        static let RASTERIZER_DISCARD: GLenum = GLenum(GL_RASTERIZER_DISCARD)\n        static let MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum = GLenum(GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS)\n        static let MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum = GLenum(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS)\n        static let INTERLEAVED_ATTRIBS: GLenum = GLenum(GL_INTERLEAVED_ATTRIBS)\n        static let SEPARATE_ATTRIBS: GLenum = GLenum(GL_SEPARATE_ATTRIBS)\n        static let TRANSFORM_FEEDBACK_BUFFER: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER)\n        static let TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING)\n        static let RGBA32UI: GLenum = GLenum(GL_RGBA32UI)\n        static let RGB32UI: GLenum = GLenum(GL_RGB32UI)\n        static let RGBA16UI: GLenum = GLenum(GL_RGBA16UI)\n        static let RGB16UI: GLenum = GLenum(GL_RGB16UI)\n        static let RGBA8UI: GLenum = GLenum(GL_RGBA8UI)\n        static let RGB8UI: GLenum = GLenum(GL_RGB8UI)\n        static let RGBA32I: GLenum = GLenum(GL_RGBA32I)\n        static let RGB32I: GLenum = GLenum(GL_RGB32I)\n        static let RGBA16I: GLenum = GLenum(GL_RGBA16I)\n        static let RGB16I: GLenum = GLenum(GL_RGB16I)\n        static let RGBA8I: GLenum = GLenum(GL_RGBA8I)\n        static let RGB8I: GLenum = GLenum(GL_RGB8I)\n        static let RED_INTEGER: GLenum = GLenum(GL_RED_INTEGER)\n        static let RGB_INTEGER: GLenum = GLenum(GL_RGB_INTEGER)\n        static let RGBA_INTEGER: GLenum = GLenum(GL_RGBA_INTEGER)\n        static let SAMPLER_2D_ARRAY: GLenum = GLenum(GL_SAMPLER_2D_ARRAY)\n        static let SAMPLER_2D_ARRAY_SHADOW: GLenum = GLenum(GL_SAMPLER_2D_ARRAY_SHADOW)\n        static let SAMPLER_CUBE_SHADOW: GLenum = GLenum(GL_SAMPLER_CUBE_SHADOW)\n        static let UNSIGNED_INT_VEC2: GLenum = GLenum(GL_UNSIGNED_INT_VEC2)\n        static let UNSIGNED_INT_VEC3: GLenum = GLenum(GL_UNSIGNED_INT_VEC3)\n        static let UNSIGNED_INT_VEC4: GLenum = GLenum(GL_UNSIGNED_INT_VEC4)\n        static let INT_SAMPLER_2D: GLenum = GLenum(GL_INT_SAMPLER_2D)\n        static let INT_SAMPLER_3D: GLenum = GLenum(GL_INT_SAMPLER_3D)\n        static let INT_SAMPLER_CUBE: GLenum = GLenum(GL_INT_SAMPLER_CUBE)\n        static let INT_SAMPLER_2D_ARRAY: GLenum = GLenum(GL_INT_SAMPLER_2D_ARRAY)\n        static let UNSIGNED_INT_SAMPLER_2D: GLenum = GLenum(GL_UNSIGNED_INT_SAMPLER_2D)\n        static let UNSIGNED_INT_SAMPLER_3D: GLenum = GLenum(GL_UNSIGNED_INT_SAMPLER_3D)\n        static let UNSIGNED_INT_SAMPLER_CUBE: GLenum = GLenum(GL_UNSIGNED_INT_SAMPLER_CUBE)\n        static let UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum = GLenum(GL_UNSIGNED_INT_SAMPLER_2D_ARRAY)\n        static let BUFFER_ACCESS_FLAGS: GLenum = GLenum(GL_BUFFER_ACCESS_FLAGS)\n        static let BUFFER_MAP_LENGTH: GLenum = GLenum(GL_BUFFER_MAP_LENGTH)\n        static let BUFFER_MAP_OFFSET: GLenum = GLenum(GL_BUFFER_MAP_OFFSET)\n        static let DEPTH_COMPONENT32F: GLenum = GLenum(GL_DEPTH_COMPONENT32F)\n        static let DEPTH32F_STENCIL8: GLenum = GLenum(GL_DEPTH32F_STENCIL8)\n        static let FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum = GLenum(GL_FLOAT_32_UNSIGNED_INT_24_8_REV)\n        static let FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)\n        static let FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)\n        static let FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)\n        static let FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)\n        static let FRAMEBUFFER_DEFAULT: GLenum = GLenum(GL_FRAMEBUFFER_DEFAULT)\n        static let FRAMEBUFFER_UNDEFINED: GLenum = GLenum(GL_FRAMEBUFFER_UNDEFINED)\n        static let DEPTH_STENCIL_ATTACHMENT: GLenum = GLenum(GL_DEPTH_STENCIL_ATTACHMENT)\n        static let DEPTH_STENCIL: GLenum = GLenum(GL_DEPTH_STENCIL)\n        static let UNSIGNED_INT_24_8: GLenum = GLenum(GL_UNSIGNED_INT_24_8)\n        static let DEPTH24_STENCIL8: GLenum = GLenum(GL_DEPTH24_STENCIL8)\n        static let UNSIGNED_NORMALIZED: GLenum = GLenum(GL_UNSIGNED_NORMALIZED)\n        static let DRAW_FRAMEBUFFER_BINDING: GLenum = GLenum(GL_DRAW_FRAMEBUFFER_BINDING)\n        static let READ_FRAMEBUFFER: GLenum = GLenum(GL_READ_FRAMEBUFFER)\n        static let DRAW_FRAMEBUFFER: GLenum = GLenum(GL_DRAW_FRAMEBUFFER)\n        static let READ_FRAMEBUFFER_BINDING: GLenum = GLenum(GL_READ_FRAMEBUFFER_BINDING)\n        static let RENDERBUFFER_SAMPLES: GLenum = GLenum(GL_RENDERBUFFER_SAMPLES)\n        static let FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum = GLenum(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER)\n        static let MAX_COLOR_ATTACHMENTS: GLenum = GLenum(GL_MAX_COLOR_ATTACHMENTS)\n        static let COLOR_ATTACHMENT1: GLenum = GLenum(GL_COLOR_ATTACHMENT1)\n        static let COLOR_ATTACHMENT2: GLenum = GLenum(GL_COLOR_ATTACHMENT2)\n        static let COLOR_ATTACHMENT3: GLenum = GLenum(GL_COLOR_ATTACHMENT3)\n        static let COLOR_ATTACHMENT4: GLenum = GLenum(GL_COLOR_ATTACHMENT4)\n        static let COLOR_ATTACHMENT5: GLenum = GLenum(GL_COLOR_ATTACHMENT5)\n        static let COLOR_ATTACHMENT6: GLenum = GLenum(GL_COLOR_ATTACHMENT6)\n        static let COLOR_ATTACHMENT7: GLenum = GLenum(GL_COLOR_ATTACHMENT7)\n        static let COLOR_ATTACHMENT8: GLenum = GLenum(GL_COLOR_ATTACHMENT8)\n        static let COLOR_ATTACHMENT9: GLenum = GLenum(GL_COLOR_ATTACHMENT9)\n        static let COLOR_ATTACHMENT10: GLenum = GLenum(GL_COLOR_ATTACHMENT10)\n        static let COLOR_ATTACHMENT11: GLenum = GLenum(GL_COLOR_ATTACHMENT11)\n        static let COLOR_ATTACHMENT12: GLenum = GLenum(GL_COLOR_ATTACHMENT12)\n        static let COLOR_ATTACHMENT13: GLenum = GLenum(GL_COLOR_ATTACHMENT13)\n        static let COLOR_ATTACHMENT14: GLenum = GLenum(GL_COLOR_ATTACHMENT14)\n        static let COLOR_ATTACHMENT15: GLenum = GLenum(GL_COLOR_ATTACHMENT15)\n        static let FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum = GLenum(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)\n        static let MAX_SAMPLES: GLenum = GLenum(GL_MAX_SAMPLES)\n        static let HALF_FLOAT: GLenum = GLenum(GL_HALF_FLOAT)\n        static let MAP_READ_BIT: GLenum = GLenum(GL_MAP_READ_BIT)\n        static let MAP_WRITE_BIT: GLenum = GLenum(GL_MAP_WRITE_BIT)\n        static let MAP_INVALIDATE_RANGE_BIT: GLenum = GLenum(GL_MAP_INVALIDATE_RANGE_BIT)\n        static let MAP_INVALIDATE_BUFFER_BIT: GLenum = GLenum(GL_MAP_INVALIDATE_BUFFER_BIT)\n        static let MAP_FLUSH_EXPLICIT_BIT: GLenum = GLenum(GL_MAP_FLUSH_EXPLICIT_BIT)\n        static let MAP_UNSYNCHRONIZED_BIT: GLenum = GLenum(GL_MAP_UNSYNCHRONIZED_BIT)\n        static let RG: GLenum = GLenum(GL_RG)\n        static let RG_INTEGER: GLenum = GLenum(GL_RG_INTEGER)\n        static let R8: GLenum = GLenum(GL_R8)\n        static let RG8: GLenum = GLenum(GL_RG8)\n        static let R16F: GLenum = GLenum(GL_R16F)\n        static let R32F: GLenum = GLenum(GL_R32F)\n        static let RG16F: GLenum = GLenum(GL_RG16F)\n        static let RG32F: GLenum = GLenum(GL_RG32F)\n        static let R8I: GLenum = GLenum(GL_R8I)\n        static let R8UI: GLenum = GLenum(GL_R8UI)\n        static let R16I: GLenum = GLenum(GL_R16I)\n        static let R16UI: GLenum = GLenum(GL_R16UI)\n        static let R32I: GLenum = GLenum(GL_R32I)\n        static let R32UI: GLenum = GLenum(GL_R32UI)\n        static let RG8I: GLenum = GLenum(GL_RG8I)\n        static let RG8UI: GLenum = GLenum(GL_RG8UI)\n        static let RG16I: GLenum = GLenum(GL_RG16I)\n        static let RG16UI: GLenum = GLenum(GL_RG16UI)\n        static let RG32I: GLenum = GLenum(GL_RG32I)\n        static let RG32UI: GLenum = GLenum(GL_RG32UI)\n        static let VERTEX_ARRAY_BINDING: GLenum = GLenum(GL_VERTEX_ARRAY_BINDING)\n        static let R8_SNORM: GLenum = GLenum(GL_R8_SNORM)\n        static let RG8_SNORM: GLenum = GLenum(GL_RG8_SNORM)\n        static let RGB8_SNORM: GLenum = GLenum(GL_RGB8_SNORM)\n        static let RGBA8_SNORM: GLenum = GLenum(GL_RGBA8_SNORM)\n        static let SIGNED_NORMALIZED: GLenum = GLenum(GL_SIGNED_NORMALIZED)\n        static let PRIMITIVE_RESTART_FIXED_INDEX: GLenum = GLenum(GL_PRIMITIVE_RESTART_FIXED_INDEX)\n        static let COPY_READ_BUFFER: GLenum = GLenum(GL_COPY_READ_BUFFER)\n        static let COPY_WRITE_BUFFER: GLenum = GLenum(GL_COPY_WRITE_BUFFER)\n        static let COPY_READ_BUFFER_BINDING: GLenum = GLenum(GL_COPY_READ_BUFFER_BINDING)\n        static let COPY_WRITE_BUFFER_BINDING: GLenum = GLenum(GL_COPY_WRITE_BUFFER_BINDING)\n        static let UNIFORM_BUFFER: GLenum = GLenum(GL_UNIFORM_BUFFER)\n        static let UNIFORM_BUFFER_BINDING: GLenum = GLenum(GL_UNIFORM_BUFFER_BINDING)\n        static let UNIFORM_BUFFER_START: GLenum = GLenum(GL_UNIFORM_BUFFER_START)\n        static let UNIFORM_BUFFER_SIZE: GLenum = GLenum(GL_UNIFORM_BUFFER_SIZE)\n        static let MAX_VERTEX_UNIFORM_BLOCKS: GLenum = GLenum(GL_MAX_VERTEX_UNIFORM_BLOCKS)\n        static let MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum = GLenum(GL_MAX_FRAGMENT_UNIFORM_BLOCKS)\n        static let MAX_COMBINED_UNIFORM_BLOCKS: GLenum = GLenum(GL_MAX_COMBINED_UNIFORM_BLOCKS)\n        static let MAX_UNIFORM_BUFFER_BINDINGS: GLenum = GLenum(GL_MAX_UNIFORM_BUFFER_BINDINGS)\n        static let MAX_UNIFORM_BLOCK_SIZE: GLenum = GLenum(GL_MAX_UNIFORM_BLOCK_SIZE)\n        static let MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum = GLenum(GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS)\n        static let MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum = GLenum(GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS)\n        static let UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum = GLenum(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT)\n        static let ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: GLenum = GLenum(GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)\n        static let ACTIVE_UNIFORM_BLOCKS: GLenum = GLenum(GL_ACTIVE_UNIFORM_BLOCKS)\n        static let UNIFORM_TYPE: GLenum = GLenum(GL_UNIFORM_TYPE)\n        static let UNIFORM_SIZE: GLenum = GLenum(GL_UNIFORM_SIZE)\n        static let UNIFORM_NAME_LENGTH: GLenum = GLenum(GL_UNIFORM_NAME_LENGTH)\n        static let UNIFORM_BLOCK_INDEX: GLenum = GLenum(GL_UNIFORM_BLOCK_INDEX)\n        static let UNIFORM_OFFSET: GLenum = GLenum(GL_UNIFORM_OFFSET)\n        static let UNIFORM_ARRAY_STRIDE: GLenum = GLenum(GL_UNIFORM_ARRAY_STRIDE)\n        static let UNIFORM_MATRIX_STRIDE: GLenum = GLenum(GL_UNIFORM_MATRIX_STRIDE)\n        static let UNIFORM_IS_ROW_MAJOR: GLenum = GLenum(GL_UNIFORM_IS_ROW_MAJOR)\n        static let UNIFORM_BLOCK_BINDING: GLenum = GLenum(GL_UNIFORM_BLOCK_BINDING)\n        static let UNIFORM_BLOCK_DATA_SIZE: GLenum = GLenum(GL_UNIFORM_BLOCK_DATA_SIZE)\n        static let UNIFORM_BLOCK_NAME_LENGTH: GLenum = GLenum(GL_UNIFORM_BLOCK_NAME_LENGTH)\n        static let UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum = GLenum(GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS)\n        static let UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum = GLenum(GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n        static let UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum = GLenum(GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER)\n        static let UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum = GLenum(GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER)\n        static let INVALID_INDEX: GLenum = GLenum(GL_INVALID_INDEX)\n        static let MAX_VERTEX_OUTPUT_COMPONENTS: GLenum = GLenum(GL_MAX_VERTEX_OUTPUT_COMPONENTS)\n        static let MAX_FRAGMENT_INPUT_COMPONENTS: GLenum = GLenum(GL_MAX_FRAGMENT_INPUT_COMPONENTS)\n        static let MAX_SERVER_WAIT_TIMEOUT: GLenum = GLenum(GL_MAX_SERVER_WAIT_TIMEOUT)\n        static let OBJECT_TYPE: GLenum = GLenum(GL_OBJECT_TYPE)\n        static let SYNC_CONDITION: GLenum = GLenum(GL_SYNC_CONDITION)\n        static let SYNC_STATUS: GLenum = GLenum(GL_SYNC_STATUS)\n        static let SYNC_FLAGS: GLenum = GLenum(GL_SYNC_FLAGS)\n        static let SYNC_FENCE: GLenum = GLenum(GL_SYNC_FENCE)\n        static let SYNC_GPU_COMMANDS_COMPLETE: GLenum = GLenum(GL_SYNC_GPU_COMMANDS_COMPLETE)\n        static let UNSIGNALED: GLenum = GLenum(GL_UNSIGNALED)\n        static let SIGNALED: GLenum = GLenum(GL_SIGNALED)\n        static let ALREADY_SIGNALED: GLenum = GLenum(GL_ALREADY_SIGNALED)\n        static let TIMEOUT_EXPIRED: GLenum = GLenum(GL_TIMEOUT_EXPIRED)\n        static let CONDITION_SATISFIED: GLenum = GLenum(GL_CONDITION_SATISFIED)\n        static let WAIT_FAILED: GLenum = GLenum(GL_WAIT_FAILED)\n        static let SYNC_FLUSH_COMMANDS_BIT: GLenum = GLenum(GL_SYNC_FLUSH_COMMANDS_BIT)\n        static let TIMEOUT_IGNORED: GLuint64 = GLuint64(GL_TIMEOUT_IGNORED)\n        static let VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum = GLenum(GL_VERTEX_ATTRIB_ARRAY_DIVISOR)\n        static let ANY_SAMPLES_PASSED: GLenum = GLenum(GL_ANY_SAMPLES_PASSED)\n        static let ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum = GLenum(GL_ANY_SAMPLES_PASSED_CONSERVATIVE)\n        static let SAMPLER_BINDING: GLenum = GLenum(GL_SAMPLER_BINDING)\n        static let RGB10_A2UI: GLenum = GLenum(GL_RGB10_A2UI)\n        static let TEXTURE_SWIZZLE_R: GLenum = GLenum(GL_TEXTURE_SWIZZLE_R)\n        static let TEXTURE_SWIZZLE_G: GLenum = GLenum(GL_TEXTURE_SWIZZLE_G)\n        static let TEXTURE_SWIZZLE_B: GLenum = GLenum(GL_TEXTURE_SWIZZLE_B)\n        static let TEXTURE_SWIZZLE_A: GLenum = GLenum(GL_TEXTURE_SWIZZLE_A)\n        static let GREEN: GLenum = GLenum(GL_GREEN)\n        static let BLUE: GLenum = GLenum(GL_BLUE)\n        static let INT_2_10_10_10_REV: GLenum = GLenum(GL_INT_2_10_10_10_REV)\n        static let TRANSFORM_FEEDBACK: GLenum = GLenum(GL_TRANSFORM_FEEDBACK)\n        static let TRANSFORM_FEEDBACK_PAUSED: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_PAUSED)\n        static let TRANSFORM_FEEDBACK_ACTIVE: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_ACTIVE)\n        static let TRANSFORM_FEEDBACK_BINDING: GLenum = GLenum(GL_TRANSFORM_FEEDBACK_BINDING)\n        static let PROGRAM_BINARY_RETRIEVABLE_HINT: GLenum = GLenum(GL_PROGRAM_BINARY_RETRIEVABLE_HINT)\n        static let PROGRAM_BINARY_LENGTH: GLenum = GLenum(GL_PROGRAM_BINARY_LENGTH)\n        static let NUM_PROGRAM_BINARY_FORMATS: GLenum = GLenum(GL_NUM_PROGRAM_BINARY_FORMATS)\n        static let PROGRAM_BINARY_FORMATS: GLenum = GLenum(GL_PROGRAM_BINARY_FORMATS)\n        static let COMPRESSED_R11_EAC: GLenum = GLenum(GL_COMPRESSED_R11_EAC)\n        static let COMPRESSED_SIGNED_R11_EAC: GLenum = GLenum(GL_COMPRESSED_SIGNED_R11_EAC)\n        static let COMPRESSED_RG11_EAC: GLenum = GLenum(GL_COMPRESSED_RG11_EAC)\n        static let COMPRESSED_SIGNED_RG11_EAC: GLenum = GLenum(GL_COMPRESSED_SIGNED_RG11_EAC)\n        static let COMPRESSED_RGB8_ETC2: GLenum = GLenum(GL_COMPRESSED_RGB8_ETC2)\n        static let COMPRESSED_SRGB8_ETC2: GLenum = GLenum(GL_COMPRESSED_SRGB8_ETC2)\n        static let COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = GLenum(GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2)\n        static let COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = GLenum(GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2)\n        static let COMPRESSED_RGBA8_ETC2_EAC: GLenum = GLenum(GL_COMPRESSED_RGBA8_ETC2_EAC)\n        static let COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GLenum = GLenum(GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC)\n        static let TEXTURE_IMMUTABLE_FORMAT: GLenum = GLenum(GL_TEXTURE_IMMUTABLE_FORMAT)\n        static let MAX_ELEMENT_INDEX: GLenum = GLenum(GL_MAX_ELEMENT_INDEX)\n        static let NUM_SAMPLE_COUNTS: GLenum = GLenum(GL_NUM_SAMPLE_COUNTS)\n        static let TEXTURE_IMMUTABLE_LEVELS: GLenum = GLenum(GL_TEXTURE_IMMUTABLE_LEVELS)\n\n    }\n\n    class GLK {\n        class VertexAttrib {\n            static let Position: GLuint = GLuint(GLKVertexAttrib.Position.rawValue)\n            static let Normal: GLuint = GLuint(GLKVertexAttrib.Normal.rawValue)\n            static let Color: GLuint = GLuint(GLKVertexAttrib.Color.rawValue)\n            static let TexCoord0: GLuint = GLuint(GLKVertexAttrib.TexCoord0.rawValue)\n            static let TexCoord1: GLuint = GLuint(GLKVertexAttrib.TexCoord1.rawValue)\n        }\n    }\n}\n```\n\n##\u4f7f\u3044\u65b9\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e2d\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304d\u63db\u3048\u305f\u4f8b\u304c\u4ee5\u4e0b\u3002\n\n```swift:GameViewController.swift\nimport GLKit\nimport OpenGLES\n\nfunc BUFFER_OFFSET(i: Int) -> UnsafePointer<Void> {\n    let p: UnsafePointer<Void> = nil\n    return p.advancedBy(i)\n}\n\nlet UNIFORM_MODELVIEWPROJECTION_MATRIX = 0\nlet UNIFORM_NORMAL_MATRIX = 1\nvar uniforms = [GLint](count: 2, repeatedValue: 0)\n\nclass GameViewController: GLKViewController {\n    \n    var program: GLuint = 0\n    \n    var modelViewProjectionMatrix:GLKMatrix4 = GLKMatrix4Identity\n    var normalMatrix: GLKMatrix3 = GLKMatrix3Identity\n    var rotation: Float = 0.0\n    \n    var vertexArray: GLuint = 0\n    var vertexBuffer: GLuint = 0\n    \n    var context: EAGLContext? = nil\n    var effect: GLKBaseEffect? = nil\n    \n    deinit {\n        self.tearDownGL()\n        \n        if EAGLContext.currentContext() === self.context {\n            EAGLContext.setCurrentContext(nil)\n        }\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        self.context = EAGLContext(API: .OpenGLES2)\n        \n        if self.context == nil {\n            print(\"Failed to create ES context\")\n        }\n        \n        let view = self.view as! GLKView\n        view.context = self.context!\n        view.drawableDepthFormat = .Format24\n        \n        self.setupGL()\n    }\n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        \n        if self.isViewLoaded() && (self.view.window != nil) {\n            self.view = nil\n            \n            self.tearDownGL()\n            \n            if EAGLContext.currentContext() === self.context {\n                EAGLContext.setCurrentContext(nil)\n            }\n            self.context = nil\n        }\n    }\n    \n    func setupGL() {\n        EAGLContext.setCurrentContext(self.context)\n        \n        self.loadShaders()\n        \n        self.effect = GLKBaseEffect()\n        self.effect!.light0.enabled = GL.TRUE\n        self.effect!.light0.diffuseColor = GLKVector4Make(1.0, 0.4, 0.4, 1.0)\n        \n        glEnable(GL.DEPTH_TEST)\n        \n        glGenVertexArraysOES(1, &vertexArray)\n        glBindVertexArrayOES(vertexArray)\n        \n        glGenBuffers(1, &vertexBuffer)\n        glBindBuffer(GL.ARRAY_BUFFER, vertexBuffer)\n        glBufferData(GL.ARRAY_BUFFER, GLsizeiptr(sizeof(GLfloat) * gCubeVertexData.count), &gCubeVertexData, GL.STATIC_DRAW)\n        \n        glEnableVertexAttribArray(GLK.VertexAttrib.Position)\n        glVertexAttribPointer(GLK.VertexAttrib.Position, 3, GL.FLOAT, GL.FALSE, 24, BUFFER_OFFSET(0))\n        glEnableVertexAttribArray(GLK.VertexAttrib.Normal)\n        glVertexAttribPointer(GLK.VertexAttrib.Normal, 3, GL.FLOAT, GL.FALSE, 24, BUFFER_OFFSET(12))\n        \n        glBindVertexArrayOES(0);\n    }\n    \n    func tearDownGL() {\n        EAGLContext.setCurrentContext(self.context)\n        \n        glDeleteBuffers(1, &vertexBuffer)\n        glDeleteVertexArraysOES(1, &vertexArray)\n        \n        self.effect = nil\n        \n        if program != 0 {\n            glDeleteProgram(program)\n            program = 0\n        }\n    }\n    \n    // MARK: - GLKView and GLKViewController delegate methods\n    \n    func update() {\n        let aspect = fabsf(Float(self.view.bounds.size.width / self.view.bounds.size.height))\n        let projectionMatrix = GLKMatrix4MakePerspective(GLKMathDegreesToRadians(65.0), aspect, 0.1, 100.0)\n        \n        self.effect?.transform.projectionMatrix = projectionMatrix\n        \n        var baseModelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, -4.0)\n        baseModelViewMatrix = GLKMatrix4Rotate(baseModelViewMatrix, rotation, 0.0, 1.0, 0.0)\n        \n        // Compute the model view matrix for the object rendered with GLKit\n        var modelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, -1.5)\n        modelViewMatrix = GLKMatrix4Rotate(modelViewMatrix, rotation, 1.0, 1.0, 1.0)\n        modelViewMatrix = GLKMatrix4Multiply(baseModelViewMatrix, modelViewMatrix)\n        \n        self.effect?.transform.modelviewMatrix = modelViewMatrix\n        \n        // Compute the model view matrix for the object rendered with ES2\n        modelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, 1.5)\n        modelViewMatrix = GLKMatrix4Rotate(modelViewMatrix, rotation, 1.0, 1.0, 1.0)\n        modelViewMatrix = GLKMatrix4Multiply(baseModelViewMatrix, modelViewMatrix)\n        \n        normalMatrix = GLKMatrix3InvertAndTranspose(GLKMatrix4GetMatrix3(modelViewMatrix), nil)\n        \n        modelViewProjectionMatrix = GLKMatrix4Multiply(projectionMatrix, modelViewMatrix)\n        \n        rotation += Float(self.timeSinceLastUpdate * 0.5)\n    }\n    \n    override func glkView(view: GLKView, drawInRect rect: CGRect) {\n        glClearColor(0.65, 0.65, 0.65, 1.0)\n        glClear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT)\n        \n        glBindVertexArrayOES(vertexArray)\n        \n        // Render the object with GLKit\n        self.effect?.prepareToDraw()\n        \n        glDrawArrays(GL.TRIANGLES , 0, 36)\n        \n        // Render the object again with ES2\n        glUseProgram(program)\n        \n        withUnsafePointer(&modelViewProjectionMatrix, {\n            glUniformMatrix4fv(uniforms[UNIFORM_MODELVIEWPROJECTION_MATRIX], 1, 0, UnsafePointer($0));\n        })\n        \n        withUnsafePointer(&normalMatrix, {\n            glUniformMatrix3fv(uniforms[UNIFORM_NORMAL_MATRIX], 1, 0, UnsafePointer($0));\n        })\n        \n        glDrawArrays(GL.TRIANGLES, 0, 36)\n    }\n    \n    // MARK: -  OpenGL ES 2 shader compilation\n    \n    func loadShaders() -> Bool {\n        var vertShader: GLuint = 0\n        var fragShader: GLuint = 0\n        var vertShaderPathname: String\n        var fragShaderPathname: String\n        \n        // Create shader program.\n        program = glCreateProgram()\n        \n        // Create and compile vertex shader.\n        vertShaderPathname = NSBundle.mainBundle().pathForResource(\"Shader\", ofType: \"vsh\")!\n        if self.compileShader(&vertShader, type: GL.VERTEX_SHADER, file: vertShaderPathname) == false {\n            print(\"Failed to compile vertex shader\")\n            return false\n        }\n        \n        // Create and compile fragment shader.\n        fragShaderPathname = NSBundle.mainBundle().pathForResource(\"Shader\", ofType: \"fsh\")!\n        if !self.compileShader(&fragShader, type: GL.FRAGMENT_SHADER, file: fragShaderPathname) {\n            print(\"Failed to compile fragment shader\");\n            return false\n        }\n        \n        // Attach vertex shader to program.\n        glAttachShader(program, vertShader)\n        \n        // Attach fragment shader to program.\n        glAttachShader(program, fragShader)\n        \n        // Bind attribute locations.\n        // This needs to be done prior to linking.\n        glBindAttribLocation(program, GLK.VertexAttrib.Position, \"position\")\n        glBindAttribLocation(program, GLK.VertexAttrib.Normal, \"normal\")\n        \n        // Link program.\n        if !self.linkProgram(program) {\n            print(\"Failed to link program: \\(program)\")\n            \n            if vertShader != 0 {\n                glDeleteShader(vertShader)\n                vertShader = 0\n            }\n            if fragShader != 0 {\n                glDeleteShader(fragShader)\n                fragShader = 0\n            }\n            if program != 0 {\n                glDeleteProgram(program)\n                program = 0\n            }\n            \n            return false\n        }\n        \n        // Get uniform locations.\n        uniforms[UNIFORM_MODELVIEWPROJECTION_MATRIX] = glGetUniformLocation(program, \"modelViewProjectionMatrix\")\n        uniforms[UNIFORM_NORMAL_MATRIX] = glGetUniformLocation(program, \"normalMatrix\")\n        \n        // Release vertex and fragment shaders.\n        if vertShader != 0 {\n            glDetachShader(program, vertShader)\n            glDeleteShader(vertShader);\n        }\n        if fragShader != 0 {\n            glDetachShader(program, fragShader);\n            glDeleteShader(fragShader);\n        }\n        \n        return true\n    }\n    \n    \n    func compileShader(inout shader: GLuint, type: GLenum, file: String) -> Bool {\n        var status: GLint = 0\n        var source: UnsafePointer<Int8>\n        do {\n            source = try NSString(contentsOfFile: file, encoding: NSUTF8StringEncoding).UTF8String\n        } catch {\n            print(\"Failed to load vertex shader\")\n            return false\n        }\n        var castSource = UnsafePointer<GLchar>(source)\n        \n        shader = glCreateShader(type)\n        glShaderSource(shader, 1, &castSource, nil)\n        glCompileShader(shader)\n        \n        //#if defined(DEBUG)\n        //        var logLength: GLint = 0\n        //        glGetShaderiv(shader, GLenum(GL_INFO_LOG_LENGTH), &logLength);\n        //        if logLength > 0 {\n        //            var log = UnsafeMutablePointer<GLchar>(malloc(Int(logLength)))\n        //            glGetShaderInfoLog(shader, logLength, &logLength, log);\n        //            NSLog(\"Shader compile log: \\n%s\", log);\n        //            free(log)\n        //        }\n        //#endif\n        \n        glGetShaderiv(shader, GL.COMPILE_STATUS, &status)\n        if status == 0 {\n            glDeleteShader(shader);\n            return false\n        }\n        return true\n    }\n    \n    func linkProgram(prog: GLuint) -> Bool {\n        var status: GLint = 0\n        glLinkProgram(prog)\n        \n        //#if defined(DEBUG)\n        //        var logLength: GLint = 0\n        //        glGetShaderiv(shader, GLenum(GL_INFO_LOG_LENGTH), &logLength);\n        //        if logLength > 0 {\n        //            var log = UnsafeMutablePointer<GLchar>(malloc(Int(logLength)))\n        //            glGetShaderInfoLog(shader, logLength, &logLength, log);\n        //            NSLog(\"Shader compile log: \\n%s\", log);\n        //            free(log)\n        //        }\n        //#endif\n        \n        glGetProgramiv(prog, GL.LINK_STATUS, &status)\n        if status == 0 {\n            return false\n        }\n        \n        return true\n    }\n    \n    func validateProgram(prog: GLuint) -> Bool {\n        var logLength: GLsizei = 0\n        var status: GLint = 0\n        \n        glValidateProgram(prog)\n        glGetProgramiv(prog, GL.INFO_LOG_LENGTH, &logLength)\n        if logLength > 0 {\n            var log: [GLchar] = [GLchar](count: Int(logLength), repeatedValue: 0)\n            glGetProgramInfoLog(prog, logLength, &logLength, &log)\n            print(\"Program validate log: \\n\\(log)\")\n        }\n        \n        glGetProgramiv(prog, GL.VALIDATE_STATUS, &status)\n        var returnVal = true\n        if status == 0 {\n            returnVal = false\n        }\n        return returnVal\n    }\n}\n\nvar gCubeVertexData: [GLfloat] = [\n    // Data layout for each line below is:\n    // positionX, positionY, positionZ,     normalX, normalY, normalZ,\n    0.5, -0.5, -0.5,        1.0, 0.0, 0.0,\n    0.5, 0.5, -0.5,         1.0, 0.0, 0.0,\n    0.5, -0.5, 0.5,         1.0, 0.0, 0.0,\n    0.5, -0.5, 0.5,         1.0, 0.0, 0.0,\n    0.5, 0.5, -0.5,         1.0, 0.0, 0.0,\n    0.5, 0.5, 0.5,          1.0, 0.0, 0.0,\n    \n    0.5, 0.5, -0.5,         0.0, 1.0, 0.0,\n    -0.5, 0.5, -0.5,        0.0, 1.0, 0.0,\n    0.5, 0.5, 0.5,          0.0, 1.0, 0.0,\n    0.5, 0.5, 0.5,          0.0, 1.0, 0.0,\n    -0.5, 0.5, -0.5,        0.0, 1.0, 0.0,\n    -0.5, 0.5, 0.5,         0.0, 1.0, 0.0,\n    \n    -0.5, 0.5, -0.5,        -1.0, 0.0, 0.0,\n    -0.5, -0.5, -0.5,      -1.0, 0.0, 0.0,\n    -0.5, 0.5, 0.5,         -1.0, 0.0, 0.0,\n    -0.5, 0.5, 0.5,         -1.0, 0.0, 0.0,\n    -0.5, -0.5, -0.5,      -1.0, 0.0, 0.0,\n    -0.5, -0.5, 0.5,        -1.0, 0.0, 0.0,\n    \n    -0.5, -0.5, -0.5,      0.0, -1.0, 0.0,\n    0.5, -0.5, -0.5,        0.0, -1.0, 0.0,\n    -0.5, -0.5, 0.5,        0.0, -1.0, 0.0,\n    -0.5, -0.5, 0.5,        0.0, -1.0, 0.0,\n    0.5, -0.5, -0.5,        0.0, -1.0, 0.0,\n    0.5, -0.5, 0.5,         0.0, -1.0, 0.0,\n    \n    0.5, 0.5, 0.5,          0.0, 0.0, 1.0,\n    -0.5, 0.5, 0.5,         0.0, 0.0, 1.0,\n    0.5, -0.5, 0.5,         0.0, 0.0, 1.0,\n    0.5, -0.5, 0.5,         0.0, 0.0, 1.0,\n    -0.5, 0.5, 0.5,         0.0, 0.0, 1.0,\n    -0.5, -0.5, 0.5,        0.0, 0.0, 1.0,\n    \n    0.5, -0.5, -0.5,        0.0, 0.0, -1.0,\n    -0.5, -0.5, -0.5,      0.0, 0.0, -1.0,\n    0.5, 0.5, -0.5,         0.0, 0.0, -1.0,\n    0.5, 0.5, -0.5,         0.0, 0.0, -1.0,\n    -0.5, -0.5, -0.5,      0.0, 0.0, -1.0,\n    -0.5, 0.5, -0.5,        0.0, 0.0, -1.0\n]\n```\n\n\n\n\n\n\n"}