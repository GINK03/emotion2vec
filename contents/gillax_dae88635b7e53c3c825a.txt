{"tags": ["Java", "MyBatis", "Stream"], "context": "MyBatis\u3067SQL\u7d50\u679c\u3092List\u3067\u53d6\u5f97\u3059\u308b\u306e\u306f\u3068\u3066\u3082\u7c21\u5358\u3067\u3001Mapper\u3092\u4f7f\u3046\u5834\u5408\u3060\u3063\u305f\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\nPersonMapper.java\npublic interface PersonMapper {\n    @Select(\"SELECT * FROM people\")\n    List<Person> findAll();\n}\n\n\n\u3067\u3082\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306fList\u3058\u3083\u306a\u304f\u3066\u3001\u4f8b\u3048\u3070ID\u306a\u3069\u3092\u30ad\u30fc\u3068\u3057\u305fMap\u3067\u53d6\u5f97\u3057\u305f\u3044\u3053\u3068\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nStream\u3092\u4f7f\u3046\u3068\u3001List\u3067\u53d6\u5f97\u3057\u305f\u7d50\u679c\u304b\u3089ID\u3092\u30ad\u30fc\u3068\u3057\u305fMap\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nMap<Integer, Person> resultMap = personMapper.findAll().stream()\n    .collect(Collectors.toMap(Person::getId, v -> v));\n\n\u3053\u308c\u306f\u3053\u308c\u3067\u3001\u300cJava8 Stream\u4f7f\u3063\u3066\u308b\u4ffa\u30ab\u30c3\u30b3\u3044\u3044\u611f\u300d\u611f\u3058\u307e\u3059\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u3002\nMyBatis\u306b\u306f@MapKey\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u3063\u3066\u3001\u4e0a\u8a18\u3067\u3084\u3063\u305f\u3053\u3068\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\nPersonMapper.java\npublic interface PersonMapper {\n    @Select(\"SELECT * FROM people\")\n    List<Person> findAll();\n\n    @MapKey(\"id\")\n    @Select(\"SELECT * FROM people\")\n    Map<Integer, Person> findAllMap();\n}\n\n\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306evalue\u306b\u306fMap\u306e\u30ad\u30fc\u3068\u3057\u305f\u3044\u30ab\u30e9\u30e0\u540d\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nMapper\u306e\u305d\u308c\u305e\u308c\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nfindAll => [Person(id=1, name=Bob, country=USA), Person(id=2, name=Taro, country=Japan), Person(id=3, name=Zidane, country=France)]\nfindAllMap => {1=Person(id=1, name=Bob, country=USA), 2=Person(id=2, name=Taro, country=Japan), 3=Person(id=3, name=Zidane, country=France)}\n\n\n\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\nhttps://github.com/gillax/mybatis-boot-sample/tree/0.1\n\nMyBatis\u3067SQL\u7d50\u679c\u3092List\u3067\u53d6\u5f97\u3059\u308b\u306e\u306f\u3068\u3066\u3082\u7c21\u5358\u3067\u3001Mapper\u3092\u4f7f\u3046\u5834\u5408\u3060\u3063\u305f\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\n```PersonMapper.java\npublic interface PersonMapper {\n\t@Select(\"SELECT * FROM people\")\n\tList<Person> findAll();\n}\n```\n\n\u3067\u3082\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306fList\u3058\u3083\u306a\u304f\u3066\u3001\u4f8b\u3048\u3070ID\u306a\u3069\u3092\u30ad\u30fc\u3068\u3057\u305fMap\u3067\u53d6\u5f97\u3057\u305f\u3044\u3053\u3068\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nStream\u3092\u4f7f\u3046\u3068\u3001List\u3067\u53d6\u5f97\u3057\u305f\u7d50\u679c\u304b\u3089ID\u3092\u30ad\u30fc\u3068\u3057\u305fMap\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```java\nMap<Integer, Person> resultMap = personMapper.findAll().stream()\n\t.collect(Collectors.toMap(Person::getId, v -> v));\n```\n\n\u3053\u308c\u306f\u3053\u308c\u3067\u3001\u300cJava8 Stream\u4f7f\u3063\u3066\u308b\u4ffa\u30ab\u30c3\u30b3\u3044\u3044\u611f\u300d\u611f\u3058\u307e\u3059\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u3002\n\nMyBatis\u306b\u306f@MapKey\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u3063\u3066\u3001\u4e0a\u8a18\u3067\u3084\u3063\u305f\u3053\u3068\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n```PersonMapper.java\npublic interface PersonMapper {\n\t@Select(\"SELECT * FROM people\")\n\tList<Person> findAll();\n\n\t@MapKey(\"id\")\n\t@Select(\"SELECT * FROM people\")\n\tMap<Integer, Person> findAllMap();\n}\n```\n\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306evalue\u306b\u306fMap\u306e\u30ad\u30fc\u3068\u3057\u305f\u3044\u30ab\u30e9\u30e0\u540d\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nMapper\u306e\u305d\u308c\u305e\u308c\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\nfindAll => [Person(id=1, name=Bob, country=USA), Person(id=2, name=Taro, country=Japan), Person(id=3, name=Zidane, country=France)]\nfindAllMap => {1=Person(id=1, name=Bob, country=USA), 2=Person(id=2, name=Taro, country=Japan), 3=Person(id=3, name=Zidane, country=France)}\n```\n\n\n\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n---------------\nhttps://github.com/gillax/mybatis-boot-sample/tree/0.1\n"}