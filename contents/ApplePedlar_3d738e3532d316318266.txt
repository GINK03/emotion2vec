{"tags": ["JSON", "Jackson2.2.0", "Java7"], "context": " More than 1 year has passed since last update.\u3084\u308a\u305f\u3044\u3053\u3068\n\nJava\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092JSON\u6587\u5b57\u5217\u306b\u7c21\u5358\u306b\u5909\u63db\u3057\u305f\u3044\nJSON\u6587\u5b57\u5217\u3092Java\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u7c21\u5358\u306b\u5909\u63db\u3057\u305f\u3044\nJSON\u306e\u8981\u7d20\u540d\u3092\u5c0f\u6587\u5b57\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u533a\u5207\u308a(snake_case)\u306b\u3057\u305f\u3044\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u30fc\u306benum\u304c\u3042\u308b\u5834\u5408\u306fenum\u5217\u6319\u5b50\u56fa\u6709\u306e\u4efb\u610f\u306e\u6574\u6570\u5024\u3092value\u306b\u3057\u305f\u3044\n\n\n\u4f55\u7a2e\u985e\u3082enum\u304c\u3042\u3063\u3066\u3082\u6700\u5c0f\u9650\u306e\u30b3\u30fc\u30c9\u8ffd\u52a0\u3067\u540c\u69d8\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\n\n\n\u65e5\u4ed8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092ISO8601\u306b\u3057\u305f\u3044\n\u6539\u884c\u30fb\u30a4\u30f3\u30c7\u30f3\u30c8\u304c\u3042\u308b\u5f62\u5f0f\u306eJSON\u6587\u5b57\u5217\u3092\u4f5c\u308a\u305f\u3044\n\u5358\u4f53\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068List\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\n\n\nJacksonTest.java\npackage sandbox;\n\nimport java.lang.reflect.Method;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\n\npublic class JacksonTest {\n    long id;\n    String name;\n    Type type;\n    Date createdAt;\n    @JsonIgnore boolean fooFlag;\n\n    public JacksonTest() {\n    }\n\n    public JacksonTest(long id, String name, Type type, Date createdAt, boolean fooFlag) {\n        this.id = id;\n        this.name = name;\n        this.type = type;\n        this.createdAt = createdAt;\n        this.fooFlag =fooFlag;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n\n    public String getName() {\n        return name;\n    }\n\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n\n    public Type getType() {\n        return type;\n    }\n\n\n    public void setType(Type type) {\n        this.type = type;\n    }\n\n\n    public Date getCreatedAt() {\n        return createdAt;\n    }\n\n\n    public void setCreatedAt(Date createdAt) {\n        this.createdAt = createdAt;\n    }\n\n    public boolean isFooFlag() {\n        return fooFlag;\n    }\n\n    public void setFooFlag(boolean fooFlag) {\n        this.fooFlag = fooFlag;\n    }\n\n    public static void main(String[] args) throws Exception {\n        // \u5358\u4f53\n        JacksonTest obj = new JacksonTest(1234L, \"\u30ac\u30f3\u30c0\u30e0\", Type.ROBOT, new Date(), true);\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);\n        mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\"));// ISO8601\n\n        String jsonStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(obj);\n        System.out.println(jsonStr);\n\n        JacksonTest dest = mapper.readValue(jsonStr, JacksonTest.class);\n        System.out.println(dest.id + \", \" + dest.name + \", \" + dest.type + \", \" + dest.createdAt + \", \" + dest.fooFlag);\n\n        // List\n        List<JacksonTest> list = new ArrayList<JacksonTest>() {{\n            add(new JacksonTest(1234L, \"\u30ac\u30f3\u30c0\u30e0\", Type.ROBOT, new Date(), true));\n            add(new JacksonTest(1235L, \"\u30a2\u30d9\u7dcf\u7406\", Type.HUMAN, new Date(), true));\n            add(new JacksonTest(1236L, \"\u732b\u3072\u308d\u3057\", Type.ANIMAL, new Date(), true));\n        }};\n\n        jsonStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(list);\n        System.out.println(jsonStr);\n\n        List<JacksonTest> destList = mapper.readValue(jsonStr, new TypeReference<List<JacksonTest>>(){});\n        System.out.println(\"size = \" + destList.size());\n        System.out.println(destList.get(1).getName());\n\n    }\n}\n\nenum Type implements JsonEnumInt {\n    HUMAN(1),\n    ANIMAL(2),\n    ROBOT(100);\n    private int value;\n    private Type(int value) {\n        this.value = value;\n    }\n\n    @JsonValue\n    @Override\n    public int getValue() {\n        return value;\n    }\n\n    @JsonCreator\n    public static Type fromValue(int value) {\n        return Util.getEnumFromValue(value, Type.class);\n    }\n}\n\ninterface JsonEnumInt {\n    public int getValue();\n}\n\nclass Util {\n    public static <E extends JsonEnumInt> E getEnumFromValue(int value, Class<E> clazz) {\n        try {\n            Method method = clazz.getMethod(\"values\");\n            @SuppressWarnings(\"unchecked\")\n            E[] array = (E[]) method.invoke(null);\n            for (E e : array) {\n                if (e.getValue() == value) {\n                    return e;\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n\n\n\u7d50\u679c\n\n{\n\u00a0\u00a0\"id\" : 1234,\n\u00a0\u00a0\"name\" : \"\u30ac\u30f3\u30c0\u30e0\",\n\u00a0\u00a0\"type\" : 100,\n\u00a0\u00a0\"created_at\" : \"2013-06-03T14:42:55+09:00\"\n}\n1234, \u30ac\u30f3\u30c0\u30e0, ROBOT, Mon Jun 03 14:42:55 JST 2013, false\n[ {\n\u00a0\u00a0\"id\" : 1234,\n\u00a0\u00a0\"name\" : \"\u30ac\u30f3\u30c0\u30e0\",\n\u00a0\u00a0\"type\" : 100,\n\u00a0\u00a0\"created_at\" : \"2013-06-03T14:42:55+09:00\"\n}, {\n\u00a0\u00a0\"id\" : 1235,\n\u00a0\u00a0\"name\" : \"\u30a2\u30d9\u7dcf\u7406\",\n\u00a0\u00a0\"type\" : 1,\n\u00a0\u00a0\"created_at\" : \"2013-06-03T14:42:55+09:00\"\n}, {\n\u00a0\u00a0\"id\" : 1236,\n\u00a0\u00a0\"name\" : \"\u732b\u3072\u308d\u3057\",\n\u00a0\u00a0\"type\" : 2,\n\u00a0\u00a0\"created_at\" : \"2013-06-03T14:42:55+09:00\"\n} ]\nsize = 3\n\u30a2\u30d9\u7dcf\u7406\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n- Java\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092JSON\u6587\u5b57\u5217\u306b\u7c21\u5358\u306b\u5909\u63db\u3057\u305f\u3044\n- JSON\u6587\u5b57\u5217\u3092Java\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u7c21\u5358\u306b\u5909\u63db\u3057\u305f\u3044\n- JSON\u306e\u8981\u7d20\u540d\u3092\u5c0f\u6587\u5b57\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u533a\u5207\u308a(snake_case)\u306b\u3057\u305f\u3044\n- \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u30fc\u306benum\u304c\u3042\u308b\u5834\u5408\u306fenum\u5217\u6319\u5b50\u56fa\u6709\u306e\u4efb\u610f\u306e\u6574\u6570\u5024\u3092value\u306b\u3057\u305f\u3044\n - \u4f55\u7a2e\u985e\u3082enum\u304c\u3042\u3063\u3066\u3082\u6700\u5c0f\u9650\u306e\u30b3\u30fc\u30c9\u8ffd\u52a0\u3067\u540c\u69d8\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\n- \u65e5\u4ed8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092ISO8601\u306b\u3057\u305f\u3044\n- \u6539\u884c\u30fb\u30a4\u30f3\u30c7\u30f3\u30c8\u304c\u3042\u308b\u5f62\u5f0f\u306eJSON\u6587\u5b57\u5217\u3092\u4f5c\u308a\u305f\u3044\n- \u5358\u4f53\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068List\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\n\n```java:JacksonTest.java\npackage sandbox;\n\nimport java.lang.reflect.Method;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\n\npublic class JacksonTest {\n\tlong id;\n\tString name;\n\tType type;\n\tDate createdAt;\n\t@JsonIgnore boolean fooFlag;\n\n\tpublic JacksonTest() {\n\t}\n\n\tpublic JacksonTest(long id, String name, Type type, Date createdAt, boolean fooFlag) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.createdAt = createdAt;\n\t\tthis.fooFlag =fooFlag;\n\t}\n\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\n\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\n\tpublic Type getType() {\n\t\treturn type;\n\t}\n\n\n\tpublic void setType(Type type) {\n\t\tthis.type = type;\n\t}\n\n\n\tpublic Date getCreatedAt() {\n\t\treturn createdAt;\n\t}\n\n\n\tpublic void setCreatedAt(Date createdAt) {\n\t\tthis.createdAt = createdAt;\n\t}\n\n\tpublic boolean isFooFlag() {\n\t\treturn fooFlag;\n\t}\n\n\tpublic void setFooFlag(boolean fooFlag) {\n\t\tthis.fooFlag = fooFlag;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t// \u5358\u4f53\n\t\tJacksonTest obj = new JacksonTest(1234L, \"\u30ac\u30f3\u30c0\u30e0\", Type.ROBOT, new Date(), true);\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tmapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);\n\t\tmapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\"));// ISO8601\n\n\t\tString jsonStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(obj);\n\t\tSystem.out.println(jsonStr);\n\n\t\tJacksonTest dest = mapper.readValue(jsonStr, JacksonTest.class);\n\t\tSystem.out.println(dest.id + \", \" + dest.name + \", \" + dest.type + \", \" + dest.createdAt + \", \" + dest.fooFlag);\n\n\t\t// List\n\t\tList<JacksonTest> list = new ArrayList<JacksonTest>() {{\n\t\t\tadd(new JacksonTest(1234L, \"\u30ac\u30f3\u30c0\u30e0\", Type.ROBOT, new Date(), true));\n\t\t\tadd(new JacksonTest(1235L, \"\u30a2\u30d9\u7dcf\u7406\", Type.HUMAN, new Date(), true));\n\t\t\tadd(new JacksonTest(1236L, \"\u732b\u3072\u308d\u3057\", Type.ANIMAL, new Date(), true));\n\t\t}};\n\n\t\tjsonStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(list);\n\t\tSystem.out.println(jsonStr);\n\n\t\tList<JacksonTest> destList = mapper.readValue(jsonStr, new TypeReference<List<JacksonTest>>(){});\n\t\tSystem.out.println(\"size = \" + destList.size());\n\t\tSystem.out.println(destList.get(1).getName());\n\n\t}\n}\n\nenum Type implements JsonEnumInt {\n\tHUMAN(1),\n\tANIMAL(2),\n\tROBOT(100);\n\tprivate int value;\n\tprivate Type(int value) {\n\t\tthis.value = value;\n\t}\n\n\t@JsonValue\n\t@Override\n\tpublic int getValue() {\n\t\treturn value;\n\t}\n\n\t@JsonCreator\n\tpublic static Type fromValue(int value) {\n\t\treturn Util.getEnumFromValue(value, Type.class);\n\t}\n}\n\ninterface JsonEnumInt {\n\tpublic int getValue();\n}\n\nclass Util {\n\tpublic static <E extends JsonEnumInt> E getEnumFromValue(int value, Class<E> clazz) {\n\t\ttry {\n\t\t\tMethod method = clazz.getMethod(\"values\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tE[] array = (E[]) method.invoke(null);\n\t\t\tfor (E e : array) {\n\t\t\t\tif (e.getValue() == value) {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n\u7d50\u679c\n\n>{\n>&nbsp;&nbsp;\"id\" : 1234,\n>&nbsp;&nbsp;\"name\" : \"\u30ac\u30f3\u30c0\u30e0\",\n>&nbsp;&nbsp;\"type\" : 100,\n>&nbsp;&nbsp;\"created_at\" : \"2013-06-03T14:42:55+09:00\"\n>}\n>1234, \u30ac\u30f3\u30c0\u30e0, ROBOT, Mon Jun 03 14:42:55 JST 2013, false\n>[ {\n>&nbsp;&nbsp;\"id\" : 1234,\n>&nbsp;&nbsp;\"name\" : \"\u30ac\u30f3\u30c0\u30e0\",\n>&nbsp;&nbsp;\"type\" : 100,\n>&nbsp;&nbsp;\"created_at\" : \"2013-06-03T14:42:55+09:00\"\n>}, {\n>&nbsp;&nbsp;\"id\" : 1235,\n>&nbsp;&nbsp;\"name\" : \"\u30a2\u30d9\u7dcf\u7406\",\n>&nbsp;&nbsp;\"type\" : 1,\n>&nbsp;&nbsp;\"created_at\" : \"2013-06-03T14:42:55+09:00\"\n>}, {\n>&nbsp;&nbsp;\"id\" : 1236,\n>&nbsp;&nbsp;\"name\" : \"\u732b\u3072\u308d\u3057\",\n>&nbsp;&nbsp;\"type\" : 2,\n>&nbsp;&nbsp;\"created_at\" : \"2013-06-03T14:42:55+09:00\"\n>} ]\n>size = 3\n>\u30a2\u30d9\u7dcf\u7406"}