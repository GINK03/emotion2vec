{"context": "\n\nminGW \u3092\u4f7f\u3063\u305f\u3001UDP\u306e\u9001\u53d7\u4fe1\u95a2\u6570\nwindows 7 \u306eDOS\u7a93\u3067\u52d5\u4f5c\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n\u9001\u4fe1\u5074\n\nudpsend.c\n#include <stdio.h>\n#include <fcntl.h>\n#include <string.h>\n#include <winsock2.h>\n\nint main(int argc, char** argv)\n{\n    int sd;\n    struct sockaddr_in addr;\n    WSADATA wsaData;\n\n    // winsock2\u306e\u521d\u671f\u5316\n    WSAStartup(MAKEWORD(2,0), &wsaData);\n\n    //socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\n    //\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bfsd\u3092\u53d6\u5f97\u3059\u308b\n    //SOCK_DGRAM <- UDP, SOCK_STREAM<- TCP\n    if((sd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n        perror(\"socket\");\n        printf(\"error:%d\\n\",WSAGetLastError());\n        return -1;\n    }\n\n    // \u9001\u4fe1\u5148\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\n    memset(&addr,0,sizeof(addr));\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(12345);   // \u30dd\u30fc\u30c8\u756a\u53f7(htons)\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u30fc\u306b\u5909\u63db\n    addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");  //IP\u30a2\u30c9\u30ec\u30b9\u3092\u683c\u7d0d\u3057\u305fin_addr\u69cb\u9020\u4f53\n\n    // \u30d1\u30b1\u30c3\u30c8\u3092UDP\u3067\u9001\u4fe1\n    if(sendto(sd, \"I am send process\", 17, 0, (struct sockaddr *)&addr, sizeof(addr)) < 0) {\n        perror(\"sendto\");\n        printf(\"error:%d\\n\",WSAGetLastError());\n        return -1;\n    }\n\n    printf(\"send end\\n\");\n\n    // \u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n    closesocket(sd);\n    WSACleanup();\n\n    return 0;\n}\n\n\n\u9001\u4fe1\u5074\u30b3\u30f3\u30d1\u30a4\u30eb\n\ngcc udpsend.c libws2_32.lib\n\n\n\u9001\u4fe1\u5074\u3067\u3001\u9001\u4fe1\u5143\u306e\u30dd\u30fc\u30c8\u756a\u53f7\u304c\u6b32\u3057\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u3092\u8ffd\u52a0\n\nudpsend.c\n    //\u9001\u4fe1\u5143\u306e\u30dd\u30fc\u30c8\u756a\u53f7\u304c\u6b32\u3057\u3044\u5834\u5408\n    struct sockaddr_in sin;\n    int addrlen = sizeof(sin);\n    if(getsockname(sd, (struct sockaddr *)&sin, &addrlen) == 0 &&\n        sin.sin_family == AF_INET && addrlen == sizeof(sin))\n    {\n        int local_port = ntohs(sin.sin_port);\n        printf(\"send port %s:%d\\n\",inet_ntoa(sin.sin_addr),local_port);\n    }\n\n\n\n\u53d7\u4fe1\u5074\n\nudprecv.c\n#include <stdio.h>\n#include <fcntl.h>\n#include <string.h>\n#include <winsock.h>\n#include <winsock2.h>\n\nint main() \n{\n    WSADATA wsaData;\n    SOCKET sockfd, new_sockfd;\n    int writer_len, recv_len, on;\n    struct sockaddr_in reader_addr, writer_addr;\n    struct ip_mreq mreq;\n    char buf[1024];\n\n    // winsock2\u306e\u521d\u671f\u5316\n    WSAStartup(MAKEWORD(1,1), &wsaData);\n\n    //socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\n    //\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bfsd\u3092\u53d6\u5f97\u3059\u308b\n    //SOCK_DGRAM <- UDP, SOCK_STREAM<- TCP\n    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n        perror(\"socket\");\n        printf(\"error:%d\\n\",WSAGetLastError());\n        return -1;\n    }\n\n    /* \u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\u3067\u53c2\u7167\u3055\u308c\u308b\u30bd\u30b1\u30c3\u30c8\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a */\n    /* SOL_SOCKET : \u30bd\u30b1\u30c3\u30c8 API \u5c64 */\n    /* SO_REUSEADDR : bind\u304c\u5931\u6557\u3059\u308b\u306e\u3092\u56de\u907f */\n    on = 1;\n    if (setsockopt( sockfd, SOL_SOCKET, SO_REUSEADDR, (char *)&on, sizeof(on) ) == SOCKET_ERROR)\n    {\n        perror(\"setsockopt\");\n        printf(\"error:%d\\n\",WSAGetLastError());\n        return -1;\n    }\n\n    // \u53d7\u4fe1\u5143\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\n    memset((char *)&reader_addr, 0, sizeof(reader_addr));\n    reader_addr.sin_family = AF_INET;\n    reader_addr.sin_addr.s_addr = htonl(INADDR_ANY);    //IP\u30a2\u30c9\u30ec\u30b9\u3092\u683c\u7d0d\u3057\u305fin_addr\u69cb\u9020\u4f53\n    reader_addr.sin_port = htons(12345);        // \u30dd\u30fc\u30c8\u756a\u53f7(htons)\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u30fc\u306b\u5909\u63db\n\n    // \u30bd\u30b1\u30c3\u30c8\u306b\u540d\u524d\uff08\u30dd\u30fc\u30c8\u756a\u53f7 & IP\u30a2\u30c9\u30ec\u30b9\uff09\u3092\u4ed8\u3051\u308b\n    if (bind(sockfd, (struct sockaddr *)&reader_addr, sizeof(reader_addr)) < 0) {\n        perror(\"bind\");\n        printf(\"error:%d\\n\",WSAGetLastError());\n        closesocket(sockfd);\n        return -1;\n    }\n\n    while(1) {\n        //\u30d1\u30b1\u30c3\u30c8\u3092UDP\u3067\u53d7\u4fe1\n        recv_len=recv(sockfd, buf, 1024, 0);\n        if(recv_len>0){\n            printf(\"%s\\n\",buf);\n            break;\n        }\n    }\n\n    // \u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n    closesocket(sockfd);\n    WSACleanup();\n}\n\n\n\u53d7\u4fe1\u5074\u30b3\u30f3\u30d1\u30a4\u30eb\n\ngcc udpread.c libws2_32.lib\n\n#minGW \u3092\u4f7f\u3063\u305f\u3001UDP\u306e\u9001\u53d7\u4fe1\u95a2\u6570\nwindows 7 \u306eDOS\u7a93\u3067\u52d5\u4f5c\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n###\u9001\u4fe1\u5074\n\n```c:udpsend.c\n#include <stdio.h>\n#include <fcntl.h>\n#include <string.h>\n#include <winsock2.h>\n\nint main(int argc, char** argv)\n{\n\tint sd;\n\tstruct sockaddr_in addr;\n\tWSADATA wsaData;\n\n\t// winsock2\u306e\u521d\u671f\u5316\n\tWSAStartup(MAKEWORD(2,0), &wsaData);\n  \n\t//socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\n\t//\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bfsd\u3092\u53d6\u5f97\u3059\u308b\n\t//SOCK_DGRAM <- UDP, SOCK_STREAM<- TCP\n\tif((sd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n\t\tperror(\"socket\");\n\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\treturn -1;\n\t}\n \n\t// \u9001\u4fe1\u5148\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\n\tmemset(&addr,0,sizeof(addr));\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(12345);\t// \u30dd\u30fc\u30c8\u756a\u53f7(htons)\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u30fc\u306b\u5909\u63db\n\taddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\t//IP\u30a2\u30c9\u30ec\u30b9\u3092\u683c\u7d0d\u3057\u305fin_addr\u69cb\u9020\u4f53\n \n    // \u30d1\u30b1\u30c3\u30c8\u3092UDP\u3067\u9001\u4fe1\n    if(sendto(sd, \"I am send process\", 17, 0, (struct sockaddr *)&addr, sizeof(addr)) < 0) {\n\t\tperror(\"sendto\");\n\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\treturn -1;\n    }\n\n\tprintf(\"send end\\n\");\n\n\t// \u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n    closesocket(sd);\n\tWSACleanup();\n\n    return 0;\n}\n```\n\u9001\u4fe1\u5074\u30b3\u30f3\u30d1\u30a4\u30eb\n> gcc udpsend.c libws2_32.lib\n\n### \u9001\u4fe1\u5074\u3067\u3001\u9001\u4fe1\u5143\u306e\u30dd\u30fc\u30c8\u756a\u53f7\u304c\u6b32\u3057\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u3092\u8ffd\u52a0\n```c:udpsend.c\n\t//\u9001\u4fe1\u5143\u306e\u30dd\u30fc\u30c8\u756a\u53f7\u304c\u6b32\u3057\u3044\u5834\u5408\n\tstruct sockaddr_in sin;\n\tint addrlen = sizeof(sin);\n\tif(getsockname(sd, (struct sockaddr *)&sin, &addrlen) == 0 &&\n\t\tsin.sin_family == AF_INET && addrlen == sizeof(sin))\n\t{\n\t\tint local_port = ntohs(sin.sin_port);\n\t\tprintf(\"send port %s:%d\\n\",inet_ntoa(sin.sin_addr),local_port);\n\t}\n```\n\n###\u53d7\u4fe1\u5074\n\n```c:udprecv.c\n#include <stdio.h>\n#include <fcntl.h>\n#include <string.h>\n#include <winsock.h>\n#include <winsock2.h>\n\nint main() \n{\n\tWSADATA wsaData;\n\tSOCKET sockfd, new_sockfd;\n\tint writer_len, recv_len, on;\n\tstruct sockaddr_in reader_addr, writer_addr;\n\tstruct ip_mreq mreq;\n\tchar buf[1024];\n\n\t// winsock2\u306e\u521d\u671f\u5316\n\tWSAStartup(MAKEWORD(1,1), &wsaData);\n\n\t//socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\n\t//\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bfsd\u3092\u53d6\u5f97\u3059\u308b\n\t//SOCK_DGRAM <- UDP, SOCK_STREAM<- TCP\n\tif ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n\t\tperror(\"socket\");\n\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\treturn -1;\n\t}\n\n\t/* \u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\u3067\u53c2\u7167\u3055\u308c\u308b\u30bd\u30b1\u30c3\u30c8\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a */\n\t/* SOL_SOCKET : \u30bd\u30b1\u30c3\u30c8 API \u5c64 */\n\t/* SO_REUSEADDR : bind\u304c\u5931\u6557\u3059\u308b\u306e\u3092\u56de\u907f */\n\ton = 1;\n \tif (setsockopt( sockfd, SOL_SOCKET, SO_REUSEADDR, (char *)&on, sizeof(on) ) == SOCKET_ERROR)\n    {\n\t\tperror(\"setsockopt\");\n\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\treturn -1;\n    }\n\n\t// \u53d7\u4fe1\u5143\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\n\tmemset((char *)&reader_addr, 0, sizeof(reader_addr));\n\treader_addr.sin_family = AF_INET;\n\treader_addr.sin_addr.s_addr = htonl(INADDR_ANY);\t//IP\u30a2\u30c9\u30ec\u30b9\u3092\u683c\u7d0d\u3057\u305fin_addr\u69cb\u9020\u4f53\n\treader_addr.sin_port = htons(12345);\t\t// \u30dd\u30fc\u30c8\u756a\u53f7(htons)\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u30fc\u306b\u5909\u63db\n\n\t// \u30bd\u30b1\u30c3\u30c8\u306b\u540d\u524d\uff08\u30dd\u30fc\u30c8\u756a\u53f7 & IP\u30a2\u30c9\u30ec\u30b9\uff09\u3092\u4ed8\u3051\u308b\n\tif (bind(sockfd, (struct sockaddr *)&reader_addr, sizeof(reader_addr)) < 0) {\n\t\tperror(\"bind\");\n\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\tclosesocket(sockfd);\n\t\treturn -1;\n\t}\n\n\twhile(1) {\n\t\t//\u30d1\u30b1\u30c3\u30c8\u3092UDP\u3067\u53d7\u4fe1\n\t\trecv_len=recv(sockfd, buf, 1024, 0);\n\t\tif(recv_len>0){\n\t\t\tprintf(\"%s\\n\",buf);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// \u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n\tclosesocket(sockfd);\n\tWSACleanup();\n}\n```\n\u53d7\u4fe1\u5074\u30b3\u30f3\u30d1\u30a4\u30eb\n\n> gcc udpread.c libws2_32.lib\n\n", "tags": ["Socket\u901a\u4fe1", "windows7", "C", "MinGW"]}