{"tags": ["Scala", "slick", "slick3"], "context": "\n\nSlick3\u91ce\u90ce\u306e\u5099\u5fd8\u9332\uff12\n\u524d\u56de\u306fSlick3\u306e\u57fa\u672c\u7684\u306a\u5b9f\u88c5\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\n\u4eca\u56de\u306f\u5c11\u3057\u8e0f\u307f\u8fbc\u307f\u307e\u3059\n\n\u89e3\u6c7a\u3057\u305f\u3044\u3053\u3068\n\n\u305d\u306e\uff11\n\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u4e2d\u3067\u306e\u6761\u4ef6\u5206\u5c90\u3057\u305f\u3044\n\n\u305d\u306e\uff12\nlist(Seq)\u3092for\u3067\u3076\u3093\u56de\u3057\u3064\u3064\nAutoIncrement\u306aPrimarykey\u3092\u3082\u3064Talble\u306b\u4e00\u4ef6\u767b\u9332\u767b\u9332\u3057\u30fc\u306e\n\u305d\u306ereturningId\u3092\u3064\u304b\u3063\u3066\u95a2\u9023\u30c6\u30fc\u30d6\u30eb\u3082\u540c\u6642\u306b\u4f5c\u6210\u30fb\u66f4\u65b0\u3057\u30fc\u306e\n\u3055\u3089\u306b\u306f\u4ed6\u306e\u66f4\u65b0\u51e6\u7406\u3082\u4e00\u6c17\u306b\u3084\u308b\u305f\u3081\u306b\u3001\u3042\u308c\u3082\u3053\u308c\u3082\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u3057\u305f\u3044\n\u7279\u306b\u30d0\u30c3\u30c1\u51e6\u7406\u306a\u3069\u3067\u306f\u305d\u3093\u306a\u30af\u30bd\u307f\u305f\u3044\u306a\u5834\u9762\u306f\u3088\u304f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\n\n\u65b9\u91dd\nAwait.result, Await.ready\u306f\u4f7f\u308f\u306a\u3044\n\u5168\u90e8\u30921\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u3084\u308b\nSlick3\u306f\u4e00\u6c17\u306b10,000\u4ef6\u7a0b\u5ea6\u751fSQL\u3092\u6295\u3052\u308b\u3068\u843d\u3061\u308b\u3068\u8a00\u3046\u30a6\u30ef\u30b5\u306f\u6c17\u306b\u3057\u306a\u3044\n\n\u30b3\u30fc\u30c9\n\n  // \u30b5\u30f3\u30d7\u30eb\u7528\u306e\u5909\u6570\n  val dummyByte = 1.toByte\n  val dummyString = \"dummy\"\n  val dummyByte = 1.toByte\n\n  /**\n   * \u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u4e2d\u3067\u306e\u6761\u4ef6\u5206\u5c90\u4f8b\n   */\n  def test(id: Long): DBIO[Unit] = {\n\n    val action = for {\n\n      // SampleTable \u3092\u63a2\u3059\n      opt <- SampleTable.filter(_.id === row.id).result.headOption \n\n      // SampleTable\u304c\u3044\u305f\u3089\u5b9f\u884c\u3059\u308b\n      _ <- opt.fold[DBIO[Int]](DBIO.successful(1))(x =>\n\n       // SampleTable \u3092 \u7121\u99c4\u306b\u8907\u88fd\u3057\u3066\u307f\u308b\n        SampleTable += x \n\n      )\n\n      // SampleTable\u304c\u3044\u305f\u3089\u5b9f\u884c\u3059\u308b\n      _ <- iPOp.fold[DBIO[Int]](DBIO.successful(1))(x =>\n\n        //SampleTable \u306e deleteFlg \u3092 \u7121\u99c4\u306b\u66f4\u65b0\u3057\u3066\u307f\u308b\n        SampleTable.filter(_.id === ip.id).update(ip.copy(deleteFlg = Some(false))))\n\n    } yield ()\n    action.transactionally\n  }\n\n\n  /**\n   * \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\n   */\n  def test2(saveList: Seq[Long]) = {\n\n    //\u3000\uff11\u4ef6\u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\n    def nested(saveId: Long) = {\n      for {\n        newId <- UserAccount returning UserAccount.map(_.id) += makeDummySampleTable1Row(saveId)\n        _ <- InfluPassbook += makeDummySampleTable2Row(newId)\n      }yield{}\n    }\n\n    // \u666e\u901a\u306bforyield\u306e\u7d50\u679c\u3067DBIO.sequence\u3092\u751f\u6210\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\n    val seqActions = DBIO.sequence(\n      for(row <- saveList)yield{\n        nested(row)\n      }\n    )\n\n    // \u5b9f\u884c\n    db.run(seqActions.transactionally)\n\n    // \u3061\u307f\u306bandThen\u3092\u7528\u3044\u308b\u3068\u3000\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210 + \u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u306a\u3093\u3066\u306e\u3082\u30b5\u30af\u30c3\u3068\u3067\u304d\u308b\n    //dbMain.run((seqActions andThen seqActions).transactionally)\n  }\n\n  private def makeSampleTable1(id: Long) = {\n    SampleTable1Row(\n       name = dummyString\n      ,prisonerNumber = id\n      ,prisonertype = Some(dummyByte)\n      ,deleteFlg = Some(false)\n    )\n  }\n\n  private def makeSampleTable2(id: Long) = {\n    SampleTable2Row(\n       makeSampleTable1Id = id\n      ,cellType = dummyByte\n      ,deleteFlg = Some(false)\n    )\n  }\n\n# Slick3\u91ce\u90ce\u306e\u5099\u5fd8\u9332\uff12\n\n[\u524d\u56de](http://qiita.com/uedashuhei/items/12767ab1ab4c4ba1f3e5)\u306fSlick3\u306e\u57fa\u672c\u7684\u306a\u5b9f\u88c5\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\n\u4eca\u56de\u306f\u5c11\u3057\u8e0f\u307f\u8fbc\u307f\u307e\u3059\n\n## \u89e3\u6c7a\u3057\u305f\u3044\u3053\u3068\n\n#### \u305d\u306e\uff11\n\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u4e2d\u3067\u306e\u6761\u4ef6\u5206\u5c90\u3057\u305f\u3044\n\n#### \u305d\u306e\uff12\nlist(Seq)\u3092for\u3067\u3076\u3093\u56de\u3057\u3064\u3064\nAutoIncrement\u306aPrimarykey\u3092\u3082\u3064Talble\u306b\u4e00\u4ef6\u767b\u9332\u767b\u9332\u3057\u30fc\u306e\n\u305d\u306ereturningId\u3092\u3064\u304b\u3063\u3066\u95a2\u9023\u30c6\u30fc\u30d6\u30eb\u3082\u540c\u6642\u306b\u4f5c\u6210\u30fb\u66f4\u65b0\u3057\u30fc\u306e\n\n\u3055\u3089\u306b\u306f\u4ed6\u306e\u66f4\u65b0\u51e6\u7406\u3082\u4e00\u6c17\u306b\u3084\u308b\u305f\u3081\u306b\u3001\u3042\u308c\u3082\u3053\u308c\u3082\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u3057\u305f\u3044\n\u7279\u306b\u30d0\u30c3\u30c1\u51e6\u7406\u306a\u3069\u3067\u306f\u305d\u3093\u306a\u30af\u30bd\u307f\u305f\u3044\u306a\u5834\u9762\u306f\u3088\u304f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\n\n## \u65b9\u91dd\n\nAwait.result, Await.ready\u306f\u4f7f\u308f\u306a\u3044\n\u5168\u90e8\u30921\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u3084\u308b\nSlick3\u306f\u4e00\u6c17\u306b10,000\u4ef6\u7a0b\u5ea6\u751fSQL\u3092\u6295\u3052\u308b\u3068\u843d\u3061\u308b\u3068\u8a00\u3046\u30a6\u30ef\u30b5\u306f\u6c17\u306b\u3057\u306a\u3044\n\n## \u30b3\u30fc\u30c9\n\n```scala\n\n  // \u30b5\u30f3\u30d7\u30eb\u7528\u306e\u5909\u6570\n  val dummyByte = 1.toByte\n  val dummyString = \"dummy\"\n  val dummyByte = 1.toByte\n\n  /**\n   * \u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u4e2d\u3067\u306e\u6761\u4ef6\u5206\u5c90\u4f8b\n   */\n  def test(id: Long): DBIO[Unit] = {\n\n    val action = for {\n\n      // SampleTable \u3092\u63a2\u3059\n      opt <- SampleTable.filter(_.id === row.id).result.headOption \n\n      // SampleTable\u304c\u3044\u305f\u3089\u5b9f\u884c\u3059\u308b\n      _ <- opt.fold[DBIO[Int]](DBIO.successful(1))(x =>\n\n       // SampleTable \u3092 \u7121\u99c4\u306b\u8907\u88fd\u3057\u3066\u307f\u308b\n        SampleTable += x \n\n      )\n\n      // SampleTable\u304c\u3044\u305f\u3089\u5b9f\u884c\u3059\u308b\n      _ <- iPOp.fold[DBIO[Int]](DBIO.successful(1))(x =>\n\n        //SampleTable \u306e deleteFlg \u3092 \u7121\u99c4\u306b\u66f4\u65b0\u3057\u3066\u307f\u308b\n        SampleTable.filter(_.id === ip.id).update(ip.copy(deleteFlg = Some(false))))\n\n    } yield ()\n    action.transactionally\n  }\n\n\n  /**\n   * \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\n   */\n  def test2(saveList: Seq[Long]) = {\n\n    //\u3000\uff11\u4ef6\u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\n    def nested(saveId: Long) = {\n      for {\n        newId <- UserAccount returning UserAccount.map(_.id) += makeDummySampleTable1Row(saveId)\n        _ <- InfluPassbook += makeDummySampleTable2Row(newId)\n      }yield{}\n    }\n\n    // \u666e\u901a\u306bforyield\u306e\u7d50\u679c\u3067DBIO.sequence\u3092\u751f\u6210\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\n    val seqActions = DBIO.sequence(\n      for(row <- saveList)yield{\n        nested(row)\n      }\n    )\n\n    // \u5b9f\u884c\n    db.run(seqActions.transactionally)\n\n    // \u3061\u307f\u306bandThen\u3092\u7528\u3044\u308b\u3068\u3000\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210 + \u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u306a\u3093\u3066\u306e\u3082\u30b5\u30af\u30c3\u3068\u3067\u304d\u308b\n    //dbMain.run((seqActions andThen seqActions).transactionally)\n  }\n\n  private def makeSampleTable1(id: Long) = {\n    SampleTable1Row(\n       name = dummyString\n      ,prisonerNumber = id\n      ,prisonertype = Some(dummyByte)\n      ,deleteFlg = Some(false)\n    )\n  }\n\n  private def makeSampleTable2(id: Long) = {\n    SampleTable2Row(\n       makeSampleTable1Id = id\n      ,cellType = dummyByte\n      ,deleteFlg = Some(false)\n    )\n  }\n```\n\n"}