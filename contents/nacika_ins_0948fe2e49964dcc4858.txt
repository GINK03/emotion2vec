{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f\u3001Rust\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc 2015 12\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u69d8\u3005\u306aRust\u306eJSON\u30d1\u30fc\u30b5\u3068\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u8a66\u3057\u3066\u307f\u305f\u7d50\u679c\u3092\u3054\u7d39\u4ecb\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\nserde-rs/json\n\nserde\u306fRust\u306e\u5f37\u529b\u306a\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u7528\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\u307e\u3060\u307e\u3060\u958b\u767a\u4e2d\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u5b89\u5b9a\u3059\u308c\u3070\u304b\u306a\u308a\u671f\u5f85\u3067\u304d\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\nUsage\nextern crate serde;\nextern crate serde_json;\nuse std::collections::BTreeMap;\nfn main() {\n    let s = r#\"{\"x\":1,\"y\":2}\"#;\n    let deserialized_map: BTreeMap<String, f64> = serde_json::from_str(s).unwrap();\n    println!(\"{:?}\", deserialized_map);\n    // => {\"x\": 1, \"y\": 2}\n    println!(\"{:?}\", deserialized_map.get(\"x\").unwrap());\n    // => 1\n}\n\n\u30b7\u30f3\u30d7\u30eb\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u4e88\u3081\u578b\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u3067\u7570\u306a\u308b\u578b\u3060\u3068\u9014\u7aef\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\nextern crate serde;\nextern crate serde_json;\nuse std::collections::BTreeMap;\nfn main() {\n    extern crate serde;\n    extern crate serde_json;\n    use std::collections::BTreeMap;\n    let s = r#\"{\"x\":1,\"y\": [1,2,3,4] }\"#;\n    // let deserialized_map: BTreeMap<String, f64> = serde_json::from_str(s).unwrap();\n    // println!(\"{:?}\", deserialized_map);\n    // => An unknown error occurred\n}\n\nstable\u7248\u4ee5\u5916\u3060\u3068\u3001serde_macros \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3059\u304c\u3001stable\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u8907\u96d1\u306a\u3053\u3068\u304c\u96e3\u3057\u3044\u3067\u3059\u3002\nextern crate serde;\nextern crate serde_json;\nuse std::collections::BTreeMap;\nfn main() {\n    /* #![feature(plugin)] */\n    /* #![plugin(serde_macros)] */\n    // => serde_macros \u306e \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f(stable release\u3060\u3068\u4f7f\u3048\u306a\u3044\u3089\u3057\u3044)\n}\n\n\njsonway\n\nDSL\u3067\u66f8\u3051\u308bJSON\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3067\u3059\u3002DSL\u306a\u306e\u3067\u3001\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5909\u63db\u3059\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\nUsage\nextern crate jsonway;\nfn main() {\n    let json = jsonway::object(|json| {\n        json.set(\"first_name\", \"Luke\".to_string()); \n        json.set(\"last_name\", \"Skywalker\".to_string());\n\n        json.object(\"info\", |json| {\n            json.set(\"homeworld\", \"Tatooine\".to_string());\n            json.set(\"born\", \"19 BBY\".to_string());\n            json.set(\"died\", \"Between 45 ABY and 137 ABY\".to_string());\n        });\n\n        json.array(\"masters\", |json| {\n            json.push(\"Obi-Wan Kenobi\".to_string());\n            json.push(\"Yoda\".to_string());\n            json.push(\"Joruus C'baoth (Briefly)\".to_string());\n            json.push(\"Darth Sidious (Briefly)\".to_string());\n        });\n    }).unwrap();\n    println!(\"{}\", json);\n}\n\n( jsonway \u3088\u308a\u5f15\u7528 )\n\u3068\u3066\u3082\u7c21\u6f54\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\njson_macros\n\n\u3053\u3061\u3089\u306f\u3001\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066JSON\u8a18\u6cd5\u3067\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u3057\u304b\u3057\u3053\u3061\u3089\u3082stable\u7248Rust\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\nUsage\n#![feature(plugin)] */\n#![plugin(json_macros)] */ \nfn main() {\nextern crate \"rustc-serialize\" as rustc_serialize;\nlet x = 123i32;\nprintln!(\"{}\", json!({ // object literal\n    \"foo\": \"foooooo\", // string literal keys and values\n    \"bar\": [true, null, 123, 123.4], // array, boolean, null, numeric literals\n    \"quux\": { // nest as deeply as you like\n        \"a\": [1, 2, 3, 4],\n        \"b\": { \"a\": null },\n        \"c\": false\n    },\n    \"waldo\": (192 - x) // wrap in parens to splice ToJson expressions directly\n}).pretty().to_string());\n}\n\n( json_macros\u3088\u308a\u5f15\u7528 )\n\njson-rs\n\n\u3053\u3061\u3089\u306f #[feature] \u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001 stable\u7248Rust\u3067\u306f\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\nrustc_serialize\n\n\u4eca\u4e00\u756aRust\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30d1\u30fc\u30b5\u3068\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u306f\u3053\u308c\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u305f\u578b\u306b RustcDecodable\u3001 RustcEncodable \u3092derive\u3059\u308b\u3068\u3001\u305d\u306e\u578b\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u308a\u3001\u30d1\u30fc\u30b9\u3057\u305f\u308a\u51fa\u6765\u307e\u3059\u3002\n\nUsage\nextern crate rustc_serialize;\nuse rustc_serialize::json::{Json, Parser};\n\nfn main () {\n    let mut parser = Parser::new(\n        r#\"{\n            \"a\": 1.0,\n            \"b\": [\n                true,\n                \"foo\\nbar\",\n                { \"c\": {\"d\": null} }\n            ]\n        }\"#.chars()\n    );\n\n    parser.next();\n\n    let foo = parser.next().unwrap();\n    println!(\"{:?}\",  foo);\n    // => F64Value(1)\n}\n\nnext\u3067\u9032\u3081\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30ab\u30fc\u30bd\u30eb\u304c\u5909\u308f\u308a\u3001\u53d6\u5f97\u3067\u304d\u308b\u5024\u304c\u5909\u308f\u308b\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f F64Value\u306e\u578b(Enum\u306e\u5024)\u3092\u53d6\u5f97\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u4e2d\u306b\u5165\u3063\u3066\u3044\u308bf64\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u306f\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u901a\u5e38\u306f\u3001\u4e88\u3081\u69cb\u9020\u4f53\u3092\u5b9a\u7fa9\u3057\u3001\u305d\u306e\u69cb\u9020\u4f53\u306b\u30de\u30c3\u30d7\u3059\u308b\u4f7f\u3044\u65b9\u306e\u307b\u3046\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nextern crate rustc_serialize;\nuse rustc_serialize::json;\nuse std::collections::HashMap;\n\n#[derive(Debug, RustcDecodable, RustcEncodable)]\nstruct Foo {\n    bar: HashMap<String, String>\n}\n\nfn main () {\n    let mut baz = HashMap::new();\n    baz.insert(\"test\".to_owned(), \"test\".to_owned());\n    let foo = Foo { bar: baz };\n    let enc = json::encode(&foo).unwrap();\n    println!(\"{:?}\", enc);\n    //=> \"{\\\"bar\\\":{\\\"test\\\":\\\"test\\\"}}\"\n    let dec: Foo = json::decode(&enc).unwrap();\n    println!(\"{:?}\", dec);\n    //=> Foo { bar: {\"test\": \"test\"} }\n}\n\n\n\n\u6700\u5f8c\u306b\u300ctype\u300d \u306b\u3064\u3044\u3066\n\u69cb\u9020\u4f53\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3067rustc_serialize\u3092\u4f7f\u7528\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u69cb\u9020\u4f53\u3067\u306f type \u3068\u3044\u3046field\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u3053\u3068\u306b\u6c17\u3065\u304d\u307e\u3057\u305f\u3002serde \u3067\u306f\u30de\u30af\u30ed\u306bJSON\u306e\u30ad\u30fc\u3068\u5225\u306a\u30ad\u30fc\u540d\u3092\u30de\u30c3\u30d7\u3055\u305b\u308b\u30de\u30af\u30ed\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001stable\u7248Rust\u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u8f9b\u3044\u3067\u3059\u3002\nJavaScript\u306e JSON.parse \u3084 Python \u306e json.loads \u304f\u3089\u3044\u697d\u306a\u3082\u306e\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u3001\u63a2\u3057\u3066\u306f\u307f\u305f\u3082\u306e\u306e\u898b\u3064\u304b\u305a\u3001\u8f9b\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\n\nJSON\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u307e\u3057\u305f\nJsonFlex \u3068\u8a00\u3044\u307e\u3059\u3002(crates.io\u306f\u3053\u3061\u3089)\nRust\u306eSlack\u30c1\u30e3\u30f3\u30cd\u30eb \u306e\u65b9\u306b\u3082\u8272\u3005\u3068\u6559\u3048\u3066\u9802\u304d\u306a\u304c\u3089\u306a\u3093\u3068\u304b\u5b8c\u6210\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\u307e\u305f\u307e\u3060\u30d9\u30fc\u30bf\u7248\u3067\u30c6\u30b9\u30c8\u3082\u4e0d\u5341\u5206\u306a\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5927\u4f53\u306eJSON\u306f\u30d1\u30fc\u30b9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u3053\u3053\u3067\u7c21\u5358\u306a\u3054\u7d39\u4ecb\u3092\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\nUsage\nuse json_flex;\nuse json_flex::{JFObject, Unwrap};\nuse std::collections::HashMap;\n\nfn main () {\n\n    let jf = json_flex::decode(r#\"[\"a\", \"b\", \"c\", [\"a\", \"b\", \"c\"], \"d\", [\"ABC\"],[1,2]]\"#.to_owned());\n    let jft = format!(\"{:?}\", jf);\n    assert!(jft == r#\"Array([String(\"a\"), String(\"b\"), String(\"c\"), Array([String(\"a\"), String(\"b\"), String(\"c\")]), String(\"d\"), Array([String(\"ABC\")]), Array([Integer(1), Integer(2)])])\"#);\n    println!(\"{}\", jf.to_json());\n\n}\n\n\u3053\u306e\u3088\u3046\u306b\u3001JavaScript\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3088\u3046\u306b\u3001 foo[0][0][\"baz\"] \u3068\u3044\u3063\u305f\u8a18\u6cd5\u3067\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001 \u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc5\u65e5\u76ee\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u69cb\u6587\u306b\u3088\u308b\u30a2\u30af\u30bb\u30b9\u3092\u5b9f\u88c5\u3059\u308b \u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\nJsonFlex \u306f Enum\u5217\u6319\u4f53\u306b\u3088\u308b8\u500b\u306e\u5024\u304b\u3089\u306a\u308b\u30c7\u30fc\u30bf\u306e\u5171\u7528\u4f53\u3067\u3059\u3002\npub enum JFObject {\n    String(String),\n    Integer(i64),\n    Float(f64),\n    Dictionary(HashMap<String, JFObject>),\n    Array(Vec<JFObject>),\n    Null,\n    False,\n    True,\n}\n\nNull\u578b\u3068False\u578b\u3068True\u578b\u306f\u3001\u4e2d\u306b\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u578b\u306f\u4e2d\u306bRust\u306e\u57fa\u672c\u7684\u306a\u578b\u3092\u6301\u3061\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001unwrap_string\u7b49\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u3059\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\u672c\u5f53\u306f unwrap \u306e\u307f\u3067\u53d6\u308a\u51fa\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u578b\u304c\u3046\u307e\u304f\u63a8\u8ad6\u3067\u304d\u306a\u3044\u5834\u9762\u304c\u3042\u308a\u3001\u3053\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057 Index\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u5341\u5206\u306a\u578b\u63a8\u8ad6\u304c\u51fa\u6765\u308b\u305f\u3081\u3001foo[0][0][\"baz\"]\u3068\u8a00\u3063\u305f\u66f8\u304d\u65b9\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[Rust\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc 2015](http://qiita.com/advent-calendar/2015/rust-lang) 12\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u69d8\u3005\u306aRust\u306eJSON\u30d1\u30fc\u30b5\u3068\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u8a66\u3057\u3066\u307f\u305f\u7d50\u679c\u3092\u3054\u7d39\u4ecb\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n## [serde-rs/json](https://github.com/serde-rs/json)\nserde\u306fRust\u306e\u5f37\u529b\u306a\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u7528\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\u307e\u3060\u307e\u3060\u958b\u767a\u4e2d\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u5b89\u5b9a\u3059\u308c\u3070\u304b\u306a\u308a\u671f\u5f85\u3067\u304d\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n### Usage\n\n```rust\nextern crate serde;\nextern crate serde_json;\nuse std::collections::BTreeMap;\nfn main() {\n    let s = r#\"{\"x\":1,\"y\":2}\"#;\n    let deserialized_map: BTreeMap<String, f64> = serde_json::from_str(s).unwrap();\n    println!(\"{:?}\", deserialized_map);\n    // => {\"x\": 1, \"y\": 2}\n    println!(\"{:?}\", deserialized_map.get(\"x\").unwrap());\n    // => 1\n}\n```\n\n\u30b7\u30f3\u30d7\u30eb\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u4e88\u3081\u578b\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u3067\u7570\u306a\u308b\u578b\u3060\u3068\u9014\u7aef\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rust\nextern crate serde;\nextern crate serde_json;\nuse std::collections::BTreeMap;\nfn main() {\n    extern crate serde;\n    extern crate serde_json;\n    use std::collections::BTreeMap;\n    let s = r#\"{\"x\":1,\"y\": [1,2,3,4] }\"#;\n    // let deserialized_map: BTreeMap<String, f64> = serde_json::from_str(s).unwrap();\n    // println!(\"{:?}\", deserialized_map);\n    // => An unknown error occurred\n}\n```\n\nstable\u7248\u4ee5\u5916\u3060\u3068\u3001serde_macros \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3059\u304c\u3001stable\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u8907\u96d1\u306a\u3053\u3068\u304c\u96e3\u3057\u3044\u3067\u3059\u3002\n\n```rust\nextern crate serde;\nextern crate serde_json;\nuse std::collections::BTreeMap;\nfn main() {\n    /* #![feature(plugin)] */\n    /* #![plugin(serde_macros)] */\n    // => serde_macros \u306e \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f(stable release\u3060\u3068\u4f7f\u3048\u306a\u3044\u3089\u3057\u3044)\n}\n```\n\n## [jsonway](https://github.com/rustless/jsonway)\n\nDSL\u3067\u66f8\u3051\u308bJSON\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3067\u3059\u3002DSL\u306a\u306e\u3067\u3001\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5909\u63db\u3059\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\n### Usage\n\n```rust\nextern crate jsonway;\nfn main() {\n    let json = jsonway::object(|json| {\n        json.set(\"first_name\", \"Luke\".to_string()); \n        json.set(\"last_name\", \"Skywalker\".to_string());\n    \n        json.object(\"info\", |json| {\n            json.set(\"homeworld\", \"Tatooine\".to_string());\n            json.set(\"born\", \"19 BBY\".to_string());\n            json.set(\"died\", \"Between 45 ABY and 137 ABY\".to_string());\n        });\n    \n        json.array(\"masters\", |json| {\n            json.push(\"Obi-Wan Kenobi\".to_string());\n            json.push(\"Yoda\".to_string());\n            json.push(\"Joruus C'baoth (Briefly)\".to_string());\n            json.push(\"Darth Sidious (Briefly)\".to_string());\n        });\n    }).unwrap();\n    println!(\"{}\", json);\n}\n```\n( [jsonway](https://github.com/rustless/jsonway) \u3088\u308a\u5f15\u7528 )\n\n\u3068\u3066\u3082\u7c21\u6f54\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n## [json_macros](https://github.com/tomjakubowski/json_macros)\n\n\u3053\u3061\u3089\u306f\u3001\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066JSON\u8a18\u6cd5\u3067\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u3057\u304b\u3057\u3053\u3061\u3089\u3082stable\u7248Rust\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n### Usage\n\n```rust\n#![feature(plugin)] */\n#![plugin(json_macros)] */ \nfn main() {\nextern crate \"rustc-serialize\" as rustc_serialize;\nlet x = 123i32;\nprintln!(\"{}\", json!({ // object literal\n    \"foo\": \"foooooo\", // string literal keys and values\n    \"bar\": [true, null, 123, 123.4], // array, boolean, null, numeric literals\n    \"quux\": { // nest as deeply as you like\n        \"a\": [1, 2, 3, 4],\n        \"b\": { \"a\": null },\n        \"c\": false\n    },\n    \"waldo\": (192 - x) // wrap in parens to splice ToJson expressions directly\n}).pretty().to_string());\n}\n```\n( [json_macros](https://github.com/tomjakubowski/json_macros)\u3088\u308a\u5f15\u7528 )\n\n## [json-rs](https://github.com/augustt198/json-rs)\n\n\u3053\u3061\u3089\u306f `#[feature]` \u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001 stable\u7248Rust\u3067\u306f\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n## [rustc_serialize](https://github.com/rust-lang-nursery/rustc-serialize)\n\n\u4eca\u4e00\u756aRust\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30d1\u30fc\u30b5\u3068\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u306f\u3053\u308c\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u305f\u578b\u306b `RustcDecodable`\u3001 `RustcEncodable` \u3092derive\u3059\u308b\u3068\u3001\u305d\u306e\u578b\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u308a\u3001\u30d1\u30fc\u30b9\u3057\u305f\u308a\u51fa\u6765\u307e\u3059\u3002\n\n### Usage\n\n```rust\nextern crate rustc_serialize;\nuse rustc_serialize::json::{Json, Parser};\n\nfn main () {\n    let mut parser = Parser::new(\n        r#\"{\n            \"a\": 1.0,\n            \"b\": [\n                true,\n                \"foo\\nbar\",\n                { \"c\": {\"d\": null} }\n            ]\n        }\"#.chars()\n    );\n    \n    parser.next();\n    \n    let foo = parser.next().unwrap();\n    println!(\"{:?}\",  foo);\n    // => F64Value(1)\n}\n```\n\nnext\u3067\u9032\u3081\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30ab\u30fc\u30bd\u30eb\u304c\u5909\u308f\u308a\u3001\u53d6\u5f97\u3067\u304d\u308b\u5024\u304c\u5909\u308f\u308b\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f F64Value\u306e\u578b(Enum\u306e\u5024)\u3092\u53d6\u5f97\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u4e2d\u306b\u5165\u3063\u3066\u3044\u308bf64\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u306f\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u901a\u5e38\u306f\u3001\u4e88\u3081\u69cb\u9020\u4f53\u3092\u5b9a\u7fa9\u3057\u3001\u305d\u306e\u69cb\u9020\u4f53\u306b\u30de\u30c3\u30d7\u3059\u308b\u4f7f\u3044\u65b9\u306e\u307b\u3046\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```rust\nextern crate rustc_serialize;\nuse rustc_serialize::json;\nuse std::collections::HashMap;\n\n#[derive(Debug, RustcDecodable, RustcEncodable)]\nstruct Foo {\n    bar: HashMap<String, String>\n}\n\nfn main () {\n    let mut baz = HashMap::new();\n    baz.insert(\"test\".to_owned(), \"test\".to_owned());\n    let foo = Foo { bar: baz };\n    let enc = json::encode(&foo).unwrap();\n    println!(\"{:?}\", enc);\n    //=> \"{\\\"bar\\\":{\\\"test\\\":\\\"test\\\"}}\"\n    let dec: Foo = json::decode(&enc).unwrap();\n    println!(\"{:?}\", dec);\n    //=> Foo { bar: {\"test\": \"test\"} }\n}\n\n```\n\n## \u6700\u5f8c\u306b\u300ctype\u300d \u306b\u3064\u3044\u3066\n\n\u69cb\u9020\u4f53\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3067rustc_serialize\u3092\u4f7f\u7528\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u69cb\u9020\u4f53\u3067\u306f type \u3068\u3044\u3046field\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u3053\u3068\u306b\u6c17\u3065\u304d\u307e\u3057\u305f\u3002serde \u3067\u306f\u30de\u30af\u30ed\u306bJSON\u306e\u30ad\u30fc\u3068\u5225\u306a\u30ad\u30fc\u540d\u3092\u30de\u30c3\u30d7\u3055\u305b\u308b\u30de\u30af\u30ed\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001stable\u7248Rust\u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u8f9b\u3044\u3067\u3059\u3002\n\nJavaScript\u306e JSON.parse \u3084 Python \u306e json.loads \u304f\u3089\u3044\u697d\u306a\u3082\u306e\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u3001\u63a2\u3057\u3066\u306f\u307f\u305f\u3082\u306e\u306e\u898b\u3064\u304b\u305a\u3001\u8f9b\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\n\n## JSON\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u307e\u3057\u305f\n\n[JsonFlex](https://github.com/nacika-ins/json_flex) \u3068\u8a00\u3044\u307e\u3059\u3002(crates.io\u306f[\u3053\u3061\u3089](https://crates.io/crates/json_flex))\n\n[Rust\u306eSlack\u30c1\u30e3\u30f3\u30cd\u30eb](https://rust-jp.slack.com/messages) \u306e\u65b9\u306b\u3082\u8272\u3005\u3068\u6559\u3048\u3066\u9802\u304d\u306a\u304c\u3089\u306a\u3093\u3068\u304b\u5b8c\u6210\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n\u307e\u305f\u307e\u3060\u30d9\u30fc\u30bf\u7248\u3067\u30c6\u30b9\u30c8\u3082\u4e0d\u5341\u5206\u306a\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5927\u4f53\u306eJSON\u306f\u30d1\u30fc\u30b9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u3053\u3053\u3067\u7c21\u5358\u306a\u3054\u7d39\u4ecb\u3092\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\n### Usage\n\n```rust\nuse json_flex;\nuse json_flex::{JFObject, Unwrap};\nuse std::collections::HashMap;\n\nfn main () {\n\n    let jf = json_flex::decode(r#\"[\"a\", \"b\", \"c\", [\"a\", \"b\", \"c\"], \"d\", [\"ABC\"],[1,2]]\"#.to_owned());\n    let jft = format!(\"{:?}\", jf);\n    assert!(jft == r#\"Array([String(\"a\"), String(\"b\"), String(\"c\"), Array([String(\"a\"), String(\"b\"), String(\"c\")]), String(\"d\"), Array([String(\"ABC\")]), Array([Integer(1), Integer(2)])])\"#);\n    println!(\"{}\", jf.to_json());\n\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001JavaScript\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3088\u3046\u306b\u3001 `foo[0][0][\"baz\"]` \u3068\u3044\u3063\u305f\u8a18\u6cd5\u3067\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001 [\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc5\u65e5\u76ee\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u69cb\u6587\u306b\u3088\u308b\u30a2\u30af\u30bb\u30b9\u3092\u5b9f\u88c5\u3059\u308b](http://qiita.com/szktty/items/9fa3b972fbdae7aaa0ef) \u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\nJsonFlex \u306f Enum\u5217\u6319\u4f53\u306b\u3088\u308b8\u500b\u306e\u5024\u304b\u3089\u306a\u308b\u30c7\u30fc\u30bf\u306e\u5171\u7528\u4f53\u3067\u3059\u3002\n\n```rust\npub enum JFObject {\n    String(String),\n    Integer(i64),\n    Float(f64),\n    Dictionary(HashMap<String, JFObject>),\n    Array(Vec<JFObject>),\n    Null,\n    False,\n    True,\n}\n```\n\nNull\u578b\u3068False\u578b\u3068True\u578b\u306f\u3001\u4e2d\u306b\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u578b\u306f\u4e2d\u306bRust\u306e\u57fa\u672c\u7684\u306a\u578b\u3092\u6301\u3061\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001`unwrap_string`\u7b49\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u3059\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\u672c\u5f53\u306f `unwrap` \u306e\u307f\u3067\u53d6\u308a\u51fa\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u578b\u304c\u3046\u307e\u304f\u63a8\u8ad6\u3067\u304d\u306a\u3044\u5834\u9762\u304c\u3042\u308a\u3001\u3053\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3057\u304b\u3057 Index\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u5341\u5206\u306a\u578b\u63a8\u8ad6\u304c\u51fa\u6765\u308b\u305f\u3081\u3001`foo[0][0][\"baz\"]`\u3068\u8a00\u3063\u305f\u66f8\u304d\u65b9\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n", "tags": ["rust"]}