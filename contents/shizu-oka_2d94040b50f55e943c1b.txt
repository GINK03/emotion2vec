{"context": "\u4f55\u3089\u304b\u306e\u7406\u7531\u3067C\u8a00\u8a9e\u3092\u66f8\u3051\u306a\u3044\u72b6\u6cc1\u3067\u3001mruby\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3093\u306a\u6642\u306e\u305f\u3081\u306bNim\u3092\u4f7f\u3063\u3066mruby\u3092\u7d44\u307f\u8fbc\u3093\u3067\u307f\u307e\u3057\u305f\n\u74b0\u5883\n1. OSX Yosemite\n2. Nim 0.15\n3. mruby\n4. ruby\n\nNim\u3068mruby\u306e\u8a2d\u5b9a\n\n\u6e96\u5099\nmruby\u3092github\u304b\u3089clone\u3057\u307e\u3057\u3087\u3046\u3002\n\u4ee5\u4e0b\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u3002\n$ mkdir nim-mruby && cd nim-mruby\n\n$ git clone --depth 1 https://github.com/mruby/mruby.git\n\n$ mkdir -p nimruby/tools/nimruby\n\n$ mkdir -p nimruby/mrblib\n\n$ touch nimruby/mrblib/nimruby.rb nimruby/tools/nimruby/nimruby.nim nimruby/mrbgem.rake\n\n\u3053\u3093\u306a\u611f\u3058\nmruby/ <- github\u304b\u3089\u843d\u3068\u3057\u3066\u304d\u305fmruby\nnimruby/\n  mrbgem.rake\n  mrblib/\n    nimruby.rb\n  tools/\n    nimruby/\n      nimruby.nim\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d3\u30eb\u30c9\u306e\u8a2d\u5b9a\n\nmruby\u5074\n\nmruby/build_config.rb\nMRuby::Build.new do |conf|\n  toolchain :gcc\n\n  conf.gem '../nimruby' do |nim|\n    # nimbase.h\u306a\u3069\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u3053\u308d\n    nim.cc.include_paths << \"/<nim\u306e\u30d1\u30b9>/lib\"\n    nim.cc.option_include_path = '-I%s'\n  end\n\n  conf.gembox 'default'\nend\n\n\n\nnim\u5074\n\nnimruby/mrbgem.rake\nMRuby::Gem::Specification.new('nimruby') do |spec|\n  spec.license = 'MIT'\n  spec.author = 'hogehoge'\n  spec.bins = %w(nimruby)\n\n  nimcache = File.join(File.dirname(__FILE__), %w(tools nimruby))\n  nim = File.join(nimcache, 'nimruby.nim')\n\n  # .nim\u304b\u3089.c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u3060\u3051\u306b\u3059\u308b\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4f5c\u3089\u306a\u3044\uff09\n  `nim c --nimcache:#{nimcache} --compileOnly #{nim}`\nend\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u751f\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\n\nnimruby/tools/nimruby/nimruby.nim\n{.emit: \"\"\"\n  #include \"mruby.h\"\n\"\"\".}\n\ntype\n  mrb_int = cint\n  mrb_aspec = uint\n  mrb_value {.importc, header: \"mruby.h\"} = object\n  mrb_state {.importc, header: \"mruby.h\"} = object\n    object_class: ref RClass\n  RClass {.importc, header: \"mruby.h\"} = object\n  mrb_func_t {.importc, header: \"mruby.h\"} = \n    proc (mrb: ref mrb_state; val:mrb_value): mrb_value {.cdecl.}\n\nproc mrb_get_args(mrb: ref mrb_state; format: cstring): cint \n  {.importc, varargs, header: \"mruby.h\"}\nproc mrb_fixnum_value(v: cint): mrb_value \n  {.importc, header: \"mruby.h\"}\nproc mrb_fixnum(v: mrb_value): cint \n  {.importc, header: \"mruby.h\"}\n\nproc mrb_open(): ref mrb_state \n  {.importc, header: \"mruby.h\"}\nproc mrb_close(mrb: ref mrb_state) \n  {.importc, header: \"mruby.h\"}\n\nproc MRB_ARGS_REQ(n: cint): mrb_aspec \n  {.importc: \"MRB_ARGS_REQ\", header: \"mruby.h\"}\nproc mrb_define_method(mrb: ref mrb_state; c: ref RClass; name: cstring;\n  f: mrb_func_t; aspec: mrb_aspec) \n    {.importc, header: \"mruby.h\"}\n\nproc mrb_funcall(mrb: ref mrb_state; self: mrb_value; \n  name: cstring; argc: cint): mrb_value {.importc, varargs, header: \"mruby.h\"}\nproc mrb_top_self(mrb: ref mrb_state): mrb_value \n  {.importc, header: \"mruby.h\"}\n\nproc fib(a: cint): cint =\n  if a <= 2:\n    result = 1\n  else:\n    result = fib(a-1) + fib(a-2)\n\nproc nim_fib(mrb: ref mrb_state, self: mrb_value): mrb_value {.exportc, cdecl.} =\n  var x: cint\n  let _ = mrb_get_args(mrb, \"i\", addr(x))\n  mrb_fixnum_value(fib(x))\n\nproc nimruby(n: cint): cint {.exportc.} =\n  var mrb = mrb_open()\n  mrb_define_method(mrb, mrb.object_class, \"nim_fib\", nim_fib, MRB_ARGS_REQ(1))\n  let r = mrb_funcall(mrb, mrb_top_self(mrb), \"__main__\", 1, mrb_fixnum_value(n));\n  result = mrb_fixnum(r)\n  mrb_close(mrb)\n\necho nimruby(10)\n\n\nnimble\u304c\u4f7f\u3048\u308b\u3088\u3046\u3067\u3042\u308c\u3070\u3001Nim\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\nnimruby/mrblib/nimruby.rb\ndef __main__(n)\n  nim_fib(n)\nend\n\n\n\n\u30d3\u30eb\u30c9\u3068\u5b9f\u884c\n.c\u304c\u3042\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30eb+\u30d3\u30eb\u30c9\u3092\u8a2d\u5b9a\u306b\u5f93\u3063\u3066\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n$ cd mruby\n\n$ ruby minirake\n\n$ bin/nimruby\n55\n\n\n\u611f\u60f3\nNim\u306f.emit\u3067C\u8a00\u8a9e\u30fbC++\u3092\u304b\u3051\u305f\u308a\u3001\u30de\u30af\u30ed\u306e\u6a5f\u80fd\u3084.c,.cpp,.js\u3092\u751f\u6210\u3067\u304d\u305f\u308a\u3001\u3068\u3066\u3082\u9762\u767d\u3044\u8a00\u8a9e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nNim\u306f\u307e\u3060\u30010.15\u3068\u3044\u3046\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u304c\u500b\u4eba\u7684\u306b\u6ce8\u76ee\u3057\u3066\u3044\u304d\u305f\u3044\u8a00\u8a9e\u3067\u3059\u3002\n\n\u304a\u307e\u3051\n\u8efd\u304f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08\u307e\u3042\u3001mruby\u3068nim\u3060\u3068\u7528\u9014\u306f\u9055\u3046\u306e\u3067\u3001\u3042\u307e\u308a\u610f\u5473\u306f\u306a\u3044\u3067\u3059\u304c\u3002\u3002\u3002\uff09\n\nnimruby/tools/nimruby/nimruby.nim\n\uff08\u4e2d\u7565\uff09\n\nimport strutils\nimport times\nimport os\n{.experimental.}\nimport threadpool\n\nproc fib2x(a: cint): cint =\n  if a <= 2:\n    result = 1\n  else:\n    var ch = newSeq[cint](2)\n    parallel:\n      if 1 <= len(ch) - 1: # bounds check\n        ch[0] = spawn fib(a-1)\n        ch[1] = spawn fib(a-2)\n\n    result = ch[0] + ch[1]\n\ntemplate bm(title: string, code: typed) =\n  let s = epochTime()\n  echo code\n  let e = epochTime() - s\n  echo title, \" \", e.formatFloat(format = ffDecimal, precision = 10), \"s\"\n\nproc nimruby(n: cint) =\n  var mrb = mrb_open()\n\n  bm \"mruby\u7248 fib\":\n    let r = mrb_funcall(mrb, mrb_top_self(mrb), \"fib\", 1, mrb_fixnum_value(n));\n    mrb_fixnum(r)\n\n  mrb_close(mrb)\n\n  bm \"nim\u7248 fib\":\n    fib(n)\n\n  bm \"nim\u7248 fib2x\":\n    fib2x(n)\n\nlet n = parse_int(os.paramStr(1))\nnimruby(n.cint)\n\n\n\n\nnimruby/mrblib/nimruby.rb\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend\n\n\n$ ruby minirake && bin/nimruby 35\n\n9227465                                                                                                                                                                                                                                       \nmruby\u7248 fib 3.4108259678s                                                                                                                                                                                                                     \n9227465                                                                                                                                                                                                                                       \nnim\u7248 fib 0.0541160107s                                                                                                                                                                                                                       \n9227465                                                                                                                                                                                                                                       \nnim\u7248 fib2x 0.0345828533s\n\n\u4f55\u3089\u304b\u306e\u7406\u7531\u3067C\u8a00\u8a9e\u3092\u66f8\u3051\u306a\u3044\u72b6\u6cc1\u3067\u3001mruby\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3093\u306a\u6642\u306e\u305f\u3081\u306bNim\u3092\u4f7f\u3063\u3066mruby\u3092\u7d44\u307f\u8fbc\u3093\u3067\u307f\u307e\u3057\u305f\n\n\u74b0\u5883\n1. OSX Yosemite\n2. Nim 0.15\n3. mruby\n4. ruby\n\n# Nim\u3068mruby\u306e\u8a2d\u5b9a\n\n## \u6e96\u5099\n\nmruby\u3092github\u304b\u3089clone\u3057\u307e\u3057\u3087\u3046\u3002\n\u4ee5\u4e0b\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u3002\n\n```\n$ mkdir nim-mruby && cd nim-mruby\n\n$ git clone --depth 1 https://github.com/mruby/mruby.git\n\n$ mkdir -p nimruby/tools/nimruby\n\n$ mkdir -p nimruby/mrblib\n\n$ touch nimruby/mrblib/nimruby.rb nimruby/tools/nimruby/nimruby.nim nimruby/mrbgem.rake\n```\n\n\u3053\u3093\u306a\u611f\u3058\n\n```\nmruby/ <- github\u304b\u3089\u843d\u3068\u3057\u3066\u304d\u305fmruby\nnimruby/\n  mrbgem.rake\n  mrblib/\n    nimruby.rb\n  tools/\n    nimruby/\n      nimruby.nim\n```\n## \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d3\u30eb\u30c9\u306e\u8a2d\u5b9a\n\n### mruby\u5074\n\n```ruby:mruby/build_config.rb\nMRuby::Build.new do |conf|\n  toolchain :gcc\n\n  conf.gem '../nimruby' do |nim|\n  \t# nimbase.h\u306a\u3069\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u3053\u308d\n    nim.cc.include_paths << \"/<nim\u306e\u30d1\u30b9>/lib\"\n    nim.cc.option_include_path = '-I%s'\n  end\n  \n  conf.gembox 'default'\nend\n```\n\n### nim\u5074\n\n```ruby:nimruby/mrbgem.rake\nMRuby::Gem::Specification.new('nimruby') do |spec|\n  spec.license = 'MIT'\n  spec.author = 'hogehoge'\n  spec.bins = %w(nimruby)\n\n  nimcache = File.join(File.dirname(__FILE__), %w(tools nimruby))\n  nim = File.join(nimcache, 'nimruby.nim')\n\n  # .nim\u304b\u3089.c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u3060\u3051\u306b\u3059\u308b\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4f5c\u3089\u306a\u3044\uff09\n  `nim c --nimcache:#{nimcache} --compileOnly #{nim}`\nend\n```\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u751f\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\n\n```nim:nimruby/tools/nimruby/nimruby.nim\n{.emit: \"\"\"\n  #include \"mruby.h\"\n\"\"\".}\n\ntype\n  mrb_int = cint\n  mrb_aspec = uint\n  mrb_value {.importc, header: \"mruby.h\"} = object\n  mrb_state {.importc, header: \"mruby.h\"} = object\n    object_class: ref RClass\n  RClass {.importc, header: \"mruby.h\"} = object\n  mrb_func_t {.importc, header: \"mruby.h\"} = \n    proc (mrb: ref mrb_state; val:mrb_value): mrb_value {.cdecl.}\n\nproc mrb_get_args(mrb: ref mrb_state; format: cstring): cint \n  {.importc, varargs, header: \"mruby.h\"}\nproc mrb_fixnum_value(v: cint): mrb_value \n  {.importc, header: \"mruby.h\"}\nproc mrb_fixnum(v: mrb_value): cint \n  {.importc, header: \"mruby.h\"}\n\nproc mrb_open(): ref mrb_state \n  {.importc, header: \"mruby.h\"}\nproc mrb_close(mrb: ref mrb_state) \n  {.importc, header: \"mruby.h\"}\n\nproc MRB_ARGS_REQ(n: cint): mrb_aspec \n  {.importc: \"MRB_ARGS_REQ\", header: \"mruby.h\"}\nproc mrb_define_method(mrb: ref mrb_state; c: ref RClass; name: cstring;\n  f: mrb_func_t; aspec: mrb_aspec) \n    {.importc, header: \"mruby.h\"}\n\nproc mrb_funcall(mrb: ref mrb_state; self: mrb_value; \n  name: cstring; argc: cint): mrb_value {.importc, varargs, header: \"mruby.h\"}\nproc mrb_top_self(mrb: ref mrb_state): mrb_value \n  {.importc, header: \"mruby.h\"}\n\nproc fib(a: cint): cint =\n  if a <= 2:\n    result = 1\n  else:\n    result = fib(a-1) + fib(a-2)\n\nproc nim_fib(mrb: ref mrb_state, self: mrb_value): mrb_value {.exportc, cdecl.} =\n  var x: cint\n  let _ = mrb_get_args(mrb, \"i\", addr(x))\n  mrb_fixnum_value(fib(x))\n\nproc nimruby(n: cint): cint {.exportc.} =\n  var mrb = mrb_open()\n  mrb_define_method(mrb, mrb.object_class, \"nim_fib\", nim_fib, MRB_ARGS_REQ(1))\n  let r = mrb_funcall(mrb, mrb_top_self(mrb), \"__main__\", 1, mrb_fixnum_value(n));\n  result = mrb_fixnum(r)\n  mrb_close(mrb)\n\necho nimruby(10)\n```\n\nnimble\u304c\u4f7f\u3048\u308b\u3088\u3046\u3067\u3042\u308c\u3070\u3001Nim\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```ruby:nimruby/mrblib/nimruby.rb\ndef __main__(n)\n  nim_fib(n)\nend\n```\n\n## \u30d3\u30eb\u30c9\u3068\u5b9f\u884c\n\n.c\u304c\u3042\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30eb+\u30d3\u30eb\u30c9\u3092\u8a2d\u5b9a\u306b\u5f93\u3063\u3066\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\n```\n$ cd mruby\n\n$ ruby minirake\n\n$ bin/nimruby\n55\n```\n\n# \u611f\u60f3\n\nNim\u306f.emit\u3067C\u8a00\u8a9e\u30fbC++\u3092\u304b\u3051\u305f\u308a\u3001\u30de\u30af\u30ed\u306e\u6a5f\u80fd\u3084.c,.cpp,.js\u3092\u751f\u6210\u3067\u304d\u305f\u308a\u3001\u3068\u3066\u3082\u9762\u767d\u3044\u8a00\u8a9e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nNim\u306f\u307e\u3060\u30010.15\u3068\u3044\u3046\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u304c\u500b\u4eba\u7684\u306b\u6ce8\u76ee\u3057\u3066\u3044\u304d\u305f\u3044\u8a00\u8a9e\u3067\u3059\u3002\n\n# \u304a\u307e\u3051\n\n\u8efd\u304f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08\u307e\u3042\u3001mruby\u3068nim\u3060\u3068\u7528\u9014\u306f\u9055\u3046\u306e\u3067\u3001\u3042\u307e\u308a\u610f\u5473\u306f\u306a\u3044\u3067\u3059\u304c\u3002\u3002\u3002\uff09\n\n```nim:nimruby/tools/nimruby/nimruby.nim\n\uff08\u4e2d\u7565\uff09\n\nimport strutils\nimport times\nimport os\n{.experimental.}\nimport threadpool\n\nproc fib2x(a: cint): cint =\n  if a <= 2:\n    result = 1\n  else:\n    var ch = newSeq[cint](2)\n    parallel:\n      if 1 <= len(ch) - 1: # bounds check\n        ch[0] = spawn fib(a-1)\n        ch[1] = spawn fib(a-2)\n\n    result = ch[0] + ch[1]\n\ntemplate bm(title: string, code: typed) =\n  let s = epochTime()\n  echo code\n  let e = epochTime() - s\n  echo title, \" \", e.formatFloat(format = ffDecimal, precision = 10), \"s\"\n\nproc nimruby(n: cint) =\n  var mrb = mrb_open()\n\n  bm \"mruby\u7248 fib\":\n    let r = mrb_funcall(mrb, mrb_top_self(mrb), \"fib\", 1, mrb_fixnum_value(n));\n    mrb_fixnum(r)\n\n  mrb_close(mrb)\n     \n  bm \"nim\u7248 fib\":\n    fib(n)\n\n  bm \"nim\u7248 fib2x\":\n    fib2x(n)\n\nlet n = parse_int(os.paramStr(1))\nnimruby(n.cint)\n\n```\n\n```ruby:nimruby/mrblib/nimruby.rb\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend\n```\n\n```\n$ ruby minirake && bin/nimruby 35\n\n9227465                                                                                                                                                                                                                                       \nmruby\u7248 fib 3.4108259678s                                                                                                                                                                                                                     \n9227465                                                                                                                                                                                                                                       \nnim\u7248 fib 0.0541160107s                                                                                                                                                                                                                       \n9227465                                                                                                                                                                                                                                       \nnim\u7248 fib2x 0.0345828533s\n```\n", "tags": ["Nim", "mruby"]}