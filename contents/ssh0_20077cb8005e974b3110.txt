{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nPython\u306f\u672c\u5f53\u306b\u4f55\u3067\u3082\u3067\u304d\u308b\u306e\u3067\uff0c\u3044\u308d\u3044\u308d\u306a\u4f7f\u3044\u65b9\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\uff0c\u50d5\u304c\u3069\u306e\u3088\u3046\u306b\u4f7f\u3063\u3066\u3044\u308b\u306e\u304b\u7d39\u4ecb\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u3088\u304f\u3064\u304b\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u306fnumpy\u3067\u3059\uff0e\u6570\u5024\u8a08\u7b97\u306e\u304a\u4f34\u3067\u3059\uff0e\u3053\u308c\u304c\u306a\u3044\u3068\u672c\u5f53\u306b\u56f0\u308a\u307e\u3059\uff0e\u3042\u3068\u306fmatplotlib\uff0cscipy\u3067\u3059\uff0e\u305d\u308c\u304b\u3089\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u8868\u793a\u306e\u305f\u3081\u306bTkinter\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\uff0e\u3053\u3053\u3089\u3078\u3093\u306f\u4f7f\u3063\u3066\u3044\u308b\u4eba\u3082\u5272\u3068\u591a\u3044\u3068\u601d\u3046\u306e\u3067\uff0c\u60c5\u5831\u3082\u96c6\u307e\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u6700\u5f8c\u306b\u4fb5\u7565\u578b\u30d1\u30fc\u30b3\u30ec\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u4f5c\u6210\u3057\uff0c\u305d\u306e\u30d5\u30e9\u30af\u30bf\u30eb\u6b21\u5143\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e38\u3005\u8f09\u305b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fnumpy\u3068scipy\uff0cmatplotlib\u306f\u5165\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u3068\u601d\u3046\u306e\u3067\uff0c\u307e\u305a\u305d\u308c\u3089\u3092\u5165\u308c\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\u7814\u7a76\u5ba4\u306e\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3\u306b\u6025\u907d\u3044\u308c\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u3068\u304d\uff0c\nwindows7 - Python, SciPy, matplotlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(Windows) - Qiita:\n\u304c\u3081\u3061\u3083\u304f\u3061\u3083\u4fbf\u5229\u3067\u3057\u305f\uff0e\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff0c\u52a9\u304b\u308a\u307e\u3057\u305f\uff0e\nUbuntu\u306b\u5165\u308c\u308b\u3068\u304d\u306f\uff0c\u7d20\u76f4\u306bapt\u4f7f\u3063\u305f\u65b9\u304c\u3044\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e2\u30c7\u30eb\u306b\u95a2\u3057\u3066\u306f\uff0c\u81ea\u5206\u306e\u30ec\u30dd\u30fc\u30c8\u306e\u30b3\u30d4\u30da\u3067\u8a31\u3057\u3066\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\n\n\u4fb5\u7565\u578b\u30d1\u30fc\u30b3\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\n\u4fb5\u7565\u578b\u30d1\u30fc\u30b3\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u308b\u52d5\u7684\u306a\u904e\u7a0b\u306f\uff0c\u6cb9\u3092\u542b\u3093\u3060\u591a\u5b54\u6027\u306e\u5a92\u4f53\u306b\u6c34\u3092\u62bc\u3057\u3053\u3080\u3068\u304d\u751f\u3058\u308b\u6cb9\u3068\u6c34\u306e\u754c\u9762\u306e\u5f62\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b\u306e\u306b\u7528\u3044\u3089\u308c\u308b\uff0e\u305d\u306e\u30a2\u30a4\u30c7\u30a2\u306f\u53ef\u80fd\u306a\u9650\u308a\u591a\u304f\u306e\u6cb9\u3092\u56de\u53ce\u3059\u308b\u305f\u3081\u306b\u6c34\u3092\u7528\u3044\u308b\u3053\u3068\u306b\u3042\u308b\uff0e\u3053\u306e\u904e\u7a0b\u3067\u306f\uff0c\u6c34\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u6700\u3082\u62b5\u6297\u306e\u5c11\u306a\u3044\u7d4c\u8def\u3092\u901a\u3063\u3066\u6cb9\u306e\u4e2d\u306b\u6210\u9577\u3057\u3066\u3044\u304f\uff0eL\u00d72L\u306e\u683c\u5b50\u3092\u8003\u3048\uff0c\u521d\u3081\u5de6\u5074\u306e\u7aef\u304c\u6c34(\u4fb5\u7565\u8005)\u3067\u5360\u6709\u3055\u308c\u3066\u3044\u308b\u3068\u3059\u308b\uff0e\u4fb5\u7565\u8005\u306b\u5bfe\u3059\u308b\u62b5\u6297\u306e\u5f37\u3055\u306f\uff0c0\u30681\u9593\u306e\u4e00\u69d8\u4e71\u6570\u3067\u683c\u5b50\u306e\u5404\u70b9\u306b\u4e0e\u3048\u3089\u308c\uff0c\u4fb5\u7565\u306e\u904e\u7a0b\u306e\u9593\u56fa\u5b9a\u3055\u308c\u305f\u307e\u307e\u3067\u3042\u308b\uff0e\u3059\u3079\u3066\u306e\u4fb5\u7565\u8005\u306e\u683c\u5b50\u70b9\u306e\u6700\u96a3\u63a5\u70b9\u304c\u5468\u8fba\u306e\u70b9\u3068\u306a\u308b\uff0e\u5404\u5206\u5272\u6642\u9593\u306b\uff0c\u6700\u5c0f\u306e\u4e71\u6570\u3092\u6301\u3064\u5468\u8fba\u306e\u70b9\u304c\u4fb5\u7565\u8005\u306b\u3088\u3063\u3066\u5360\u6709\u3055\u308c\uff0c\u305d\u306e\u70b9\u306e\u6cb9(\u9632\u885b\u8005)\u306f\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\uff0e\u4fb5\u7565\u8005\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u683c\u5b50\u306e\u5de6\u53f3\u306e\u7aef\u3092\u7d50\u3076\u7d4c\u8def\u304c\u5f62\u6210\u3055\u308c\u308b\u307e\u3067\u6210\u9577\u3059\u308b\uff0e\u5883\u754c\u306e\u5f71\u97ff\u3092\u6700\u5c0f\u306b\u3059\u308b\u305f\u3081\u306b\uff0c\u5468\u671f\u7684\u5883\u754c\u6761\u4ef6\u304c\u4e0a\u4e0b\u306e\u7aef\u306b\u5bfe\u3057\u3066\u7528\u3044\u3089\u308c\uff0c\u3059\u3079\u3066\u306e\u91cf\u306f\u683c\u5b50\u306e\u4e2d\u5fc3\u306eL\u00d7L\u306e\u9818\u57df\u306e\u307f\u306b\u3064\u3044\u3066\u6e2c\u5b9a\u3055\u308c\u308b\uff0e\u95a2\u5fc3\u306e\u3042\u308b\u4e3b\u306a\u91cf\u306f\uff0c\u4fb5\u7565\u8005\u306b\u3088\u3063\u3066\u5360\u6709\u3055\u308c\u305f\u683c\u5b50\u70b9\u306e\u5272\u5408\u3068\uff0cr+dr\u306e\u9593\u306e\u5024\u306e\u4e71\u6570\u3092\u6301\u3064\u683c\u5b50\u70b9\u304c\u5360\u6709\u3055\u308c\u3066\u3044\u308b\u78ba\u7387P(r)\u3067\u3042\u308b\uff0e\n\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u30e2\u30c7\u30eb\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u8aac\u660e\u3057\u305f\u3068\u3053\u308d\u3067\uff0c\u30b3\u30fc\u30c9\u306e\u5185\u5bb9\u306b\u95a2\u3057\u3066\u89e6\u308c\u3066\u304a\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\u307e\u305a\uff0c\u57fa\u672c\u7684\u306a\u3068\u3053\u308d\u304b\u3089\n\u683c\u5b50\u70b9\u306fnumpy\u306earray\u3092\u4f7f\u3063\u3066\u884c\u5217\u306e\u3088\u3046\u306b\u3057\u3066\u8868\u3057\u3066\u3044\u307e\u3059\uff08self.lattice\u3068\u66f8\u3044\u3066\u3042\u308b\u3068\u3053\u308d\u304c\u305d\u308c\u3067\u3059\uff09\uff0e\nnumpy.random.random([x, y])\n\n\u3067x\u884cy\u5217\u306e\u884c\u5217\u3067\uff0c\u8981\u7d20\u304c0\u301c1\u306e\u4e71\u6570\u306e\u914d\u5217\u304c\u3067\u304d\u307e\u3059\uff0e\u3053\u306e\u30e2\u30c7\u30eb\u3067\u306f\u305d\u308c\u305e\u308c\u306b\u4e0e\u3048\u3089\u308c\u305f\u4e71\u6570\u306e\u5024\u304c\u62b5\u6297\u529b\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff0e\u6b21\u306bwhile\u7bc0\u306e\u4e2d\u3067\u884c\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u304c\uff0c\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3044\u308b\u3088\u3046\u306b\uff0c\u5360\u6709\u3055\u308c\u305f\u683c\u5b50\u70b9\u306e\u5468\u8fba\u306e\u70b9\u304b\u3089\uff0c\u6700\u5c0f\u306e\u62b5\u6297\u5024\u3092\u3082\u3064\u683c\u5b50\u70b9\u3092\u9806\u306b\u5360\u6709\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u5de5\u592b\u3057\u305f\u3068\u3053\u308d\n# \u5468\u8fba\u306e\u70b9\u3067\u6700\u3082\u5024\u306e\u5c0f\u3055\u3044\u683c\u5b50\u306e\u5ea7\u6a19\u3092mm\u306b\nmm = min([(v,k) for k,v in nnsite.items()])[1]\n\n\u8f9e\u66f8nnsite\u306e\u30ad\u30fc\u3068\u5024\u3092nnsite.items()\u3067\u53d6\u308a\u51fa\u3057\uff0cmin\u306e\u4ed5\u69d8\u3067\u3042\u308b\uff0c\u6e21\u3055\u308c\u305f\u30bf\u30d7\u30eb\u306e\u5148\u982d\u306e\u5024\u306e\u5927\u5c0f\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\uff0c\u5024\u306e\u6700\u5c0f\u3068\u306a\u308b\u30ad\u30fc\u3092\u53d6\u5f97\uff0e\nclass TopWindow:\n\n    def quit(self):\n        self.root.destroy()\n        sys.exit()\n\n    def show_window(self, title=\"title\", *args):\n        self.root = Tk()\n        self.root.title(title)\n        frames = []\n        for i, arg in enumerate(args):\n            frames.append(Frame(self.root, padx=5, pady=5))\n            for k, v in arg:\n                Button(frames[i],text=k,command=v).pack(expand=YES, fill='x')\n            frames[i].pack(fill='x')\n        f = Frame(self.root, padx=5, pady=5)\n        Button(f,text='quit',command=self.quit).pack(expand=YES, fill='x')\n        f.pack(fill='x')\n        self.root.mainloop()\n\n\u5f15\u6570\u306b\u4e0e\u3048\u308b\u30bf\u30d7\u30eb\u306e\u7d44\u3067\u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb\u3068\u3072\u3082\u4ed8\u3051\u3055\u308c\u305f\u95a2\u6570\u3092\u6307\u5b9a\uff0e\u547c\u3073\u51fa\u3059\u3068\u304d\u306f\nrun = (('run', pushed), ('save canvas to sample.eps', pr))\nrun2 = (('calculate D', b4_pushed),)\ntop.show_window(\"Invasion Percolation\", run, run2)\n\n\u306e\u3088\u3046\u306b\u3059\u308b\uff0e\n\u4ed6\u306e\u7d30\u304b\u3044\u3068\u3053\u308d\u306b\u3064\u3044\u3066\u306f\uff0c\u3059\u3079\u3066\u89e3\u8aac\u3067\u304d\u306a\u3044\u306e\u3067\uff0c\u4e00\u5fdc\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3069\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u5f97\u3089\u308c\u3066\uff0c\u3069\u3046\u3044\u3063\u305f\u5b9f\u884c\u7d50\u679c\u306b\u306a\u308b\u306e\u304b\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\n\u3053\u306e\u3088\u3046\u306b\uff0c\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\uff0crun\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d1\u30fc\u30b3\u30ec\u30fc\u30b7\u30e7\u30f3\u30fb\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u751f\u6210\u3055\u308c\uff0ccalculate_D\u3067\u4e0a\u306e\u3088\u3046\u306a\u30b0\u30e9\u30d5\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u305d\u306e\u610f\u5473\u306a\u3069\u306f\u5272\u611b\uff0e\n\ninvasion_percolation.py\n#! /usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# written by ssh0, August 2014.\n\nfrom Tkinter import *\nimport sys\nimport numpy as np\nimport scipy.optimize as optimize\nimport matplotlib.pyplot as plt\n\nclass Percolation:\n\n    def __init__(self, Lx=40, Ly=20):\n        self.sub = None\n        self.Lx = Lx\n        self.Ly = Ly\n\n    def perc_cluster(self):\n        self.lattice = np.random.random([self.Lx+2, self.Ly])\n        Lx = self.Lx\n        Ly = self.Ly\n\n        # \u5de6\u7aef\u306f\u3059\u3079\u3066\u5360\u6709\u30b5\u30a4\u30c8\n        self.lattice[:1, :] = 1.5\n\n        self.lattice[Lx+1:, :] = 0\n        if self.sub is None or not self.sub.winfo_exists():\n            lattice = self.lattice\n            ne = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n            # \u5468\u8fba\u306e\u70b9\u306e\u5ea7\u6a19\u3092\u8f9e\u66f8\u5f62\u5f0f\u3067\u4fdd\u6301\u3059\u308b\n            nnsite = {(1, y):lattice[1, y] for y in range(Ly)}\n\n            percolate = False\n            while len(nnsite) != 0 and percolate == False:\n\n                # \u5468\u8fba\u306e\u70b9\u3067\u6700\u3082\u5024\u306e\u5c0f\u3055\u3044\u683c\u5b50\u306e\u5ea7\u6a19\u3092mm\u306b\n                mm = min([(v,k) for k,v in nnsite.items()])[1]\n\n                lattice[mm] = 1\n                del nnsite[mm]\n\n                # mm\u306e\u5468\u8fba\u306e\u70b9\u306e\u5ea7\u6a19\u3092\u30ea\u30b9\u30c8nn\u306b(y\u65b9\u5411\u306b\u5468\u671f\u5883\u754c\u6761\u4ef6\u3092\u9069\u7528)\n                nn = [(mm[0] + nx, (mm[1] + ny)%Ly) for nx, ny in ne\n                                if lattice[mm[0] + nx, (mm[1] + ny)%Ly] < 1]\n\n                # nn\u306e\u4e2d\u3067\u65e2\u306bnnsite\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u9664\u304f --> nnlist\n                nnlist = list(set(nn) - set(nnsite.keys()))\n\n                # nnsite\u306b\u65b0\u305f\u306a\u5468\u8fba\u306e\u70b9\u3092\u8ffd\u52a0\u3059\u308b\n                for n in nnlist:\n                    nnsite[n] = lattice[n]\n\n                # \u5360\u6709\u3055\u308c\u305f\u683c\u5b50\u70b9\u304c\u53f3\u7aef\u3067\u3042\u308b\u6642\uff0c\u30d1\u30fc\u30b3\u30ec\u30fc\u30c8\u3057\u305f\u3068\u898b\u306a\u3059\n                if mm[0] == Lx:\n                    percolate = True\n\n            self.lattice = lattice[1:-1, :]\n        return self.lattice\n\n    def draw_canvas(self, rect, Lx, Ly):\n        default_size = 640 # default size of canvas\n        r = int(default_size/(2*Lx))\n        fig_size_x = 2*r*Lx\n        fig_size_y = 2*r*Ly\n        margin = 10\n        sub = Toplevel()\n\n        sub.title('invasion percolation')\n        self.canvas = Canvas(sub, width=fig_size_x+2*margin,\n                    height=fig_size_y+2*margin)\n        self.canvas.create_rectangle(margin, margin,\n                    fig_size_x+margin, fig_size_y+margin,\n                    outline='black', fill='white')\n        self.canvas.pack()\n\n        c = self.canvas.create_rectangle\n\n        site = np.where(rect==1)\n        for m, n in zip(site[0], site[1]):\n            c(2*m*r+margin, 2*n*r+margin,\n                        2*(m+1)*r+margin, 2*(n+1)*r+margin,\n                        outline='black', fill='black')\n\n    def get_fractal_dim(self, trial=20, Lmin=20, Lmax=40, Lsample=10):\n\n        # Lmin\u304b\u3089Lmax\u306e\u9593\u306e\u6574\u6570\u5024\u3067\uff0c\u3067\u304d\u308b\u3060\u3051log\u306b\u3057\u305f\u3068\u304d\u7b49\u9593\u9694\u306b\u306a\u308b\u3088\u3046\u306b\n        L = np.array([int(i) for i \n                    in np.logspace(np.log10(Lmin), np.log10(Lmax), Lsample)])\n\n        M_L = []\n        for l in L:\n            self.Lx = l*2\n            self.Ly = l\n            m_L = 0\n            for i in range(trial):\n                lattice = self.perc_cluster()\n\n                # \u4e2d\u5fc3\u306eL\u00d7L\u683c\u5b50\u4e2d\u306e\u5360\u6709\u30b5\u30a4\u30c8\u6570\u3092\u5408\u8a08\n                m_L += np.sum(lattice[int(l/2)+1:l+int(l/2),:]==1)\n\n            M_L.append(m_L/float(trial))\n            print \"L = %d, M_L = %f\" % (l, M_L[-1])\n\n        M_L = np.array(M_L)\n\n        def fit_func(parameter0, L, M_L):\n            log = np.log\n            c1 = parameter0[0]\n            c2 = parameter0[1]\n            residual = log(M_L) - c1 - c2*log(L)\n            return residual\n\n        parameter0 = [0.1, 2.0]\n        result = optimize.leastsq(fit_func, parameter0, args=(L, M_L))\n        c1 = result[0][0]\n        D = result[0][1]\n        print \"D = %f\" % D\n\n        def fitted(L, c1, D):\n            return np.exp(c1)*(L**D)\n\n        fig = plt.figure(\"Fractal Dimension\")\n        ax = fig.add_subplot(111)\n        ax.plot(L, M_L, '-o', label=r\"$M(L)$\")\n        ax.plot(L, fitted(L, c1, D), label=\"fit func: D = %f\" % D)\n        ax.set_xlabel(r'$\\ln L$', fontsize=16)\n        ax.set_ylabel(r'$\\ln M(L)$', fontsize=16)\n        ax.set_xscale('log')\n        ax.set_yscale('log')\n        ax.set_ymargin(0.05)\n        fig.tight_layout()\n        plt.legend(loc='best')\n        plt.show()\n\nclass TopWindow:\n\n    def quit(self):\n        self.root.destroy()\n        sys.exit()\n\n    def show_window(self, title=\"title\", *args):\n        self.root = Tk()\n        self.root.title(title)\n        frames = []\n        for i, arg in enumerate(args):\n            frames.append(Frame(self.root, padx=5, pady=5))\n            for k, v in arg:\n                Button(frames[i],text=k,command=v).pack(expand=YES, fill='x')\n            frames[i].pack(fill='x')\n        f = Frame(self.root, padx=5, pady=5)\n        Button(f,text='quit',command=self.quit).pack(expand=YES, fill='x')\n        f.pack(fill='x')\n        self.root.mainloop()\n\nif __name__ == '__main__':\n    Lx = 40\n    Ly = 20\n    top = TopWindow()\n    per = Percolation(Lx, Ly)\n    count = 1\n\n    def pr():\n        global count\n        d = per.canvas.postscript(file=\"figure_%d.eps\" % count)\n        print \"saved the figure to a eps file\"\n        count += 1\n\n    def pushed():\n        per.perc_cluster()\n        per.draw_canvas(per.lattice, Lx, Ly)\n\n    def b4_pushed():\n        trial = 100; Lmin = 20; Lmax = 100; Lsample = 10\n        per.get_fractal_dim(trial, Lmin, Lmax, Lsample)\n\n    run = (('run', pushed), ('save canvas to sample.eps', pr))\n    run2 = (('calculate D', b4_pushed),)\n    top.show_window(\"Invasion Percolation\", run, run2)\n\n\n#\u306f\u3058\u3081\u306b\n\nPython\u306f\u672c\u5f53\u306b\u4f55\u3067\u3082\u3067\u304d\u308b\u306e\u3067\uff0c\u3044\u308d\u3044\u308d\u306a\u4f7f\u3044\u65b9\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\uff0c\u50d5\u304c\u3069\u306e\u3088\u3046\u306b\u4f7f\u3063\u3066\u3044\u308b\u306e\u304b\u7d39\u4ecb\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u3088\u304f\u3064\u304b\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u306fnumpy\u3067\u3059\uff0e\u6570\u5024\u8a08\u7b97\u306e\u304a\u4f34\u3067\u3059\uff0e\u3053\u308c\u304c\u306a\u3044\u3068\u672c\u5f53\u306b\u56f0\u308a\u307e\u3059\uff0e\u3042\u3068\u306fmatplotlib\uff0cscipy\u3067\u3059\uff0e\u305d\u308c\u304b\u3089\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u8868\u793a\u306e\u305f\u3081\u306bTkinter\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\uff0e\u3053\u3053\u3089\u3078\u3093\u306f\u4f7f\u3063\u3066\u3044\u308b\u4eba\u3082\u5272\u3068\u591a\u3044\u3068\u601d\u3046\u306e\u3067\uff0c\u60c5\u5831\u3082\u96c6\u307e\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u6700\u5f8c\u306b\u4fb5\u7565\u578b\u30d1\u30fc\u30b3\u30ec\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u4f5c\u6210\u3057\uff0c\u305d\u306e\u30d5\u30e9\u30af\u30bf\u30eb\u6b21\u5143\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e38\u3005\u8f09\u305b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fnumpy\u3068scipy\uff0cmatplotlib\u306f\u5165\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u3068\u601d\u3046\u306e\u3067\uff0c\u307e\u305a\u305d\u308c\u3089\u3092\u5165\u308c\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u7814\u7a76\u5ba4\u306e\u30ce\u30fc\u30c8\u30d1\u30bd\u30b3\u30f3\u306b\u6025\u907d\u3044\u308c\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u3068\u304d\uff0c\n\n<a href=\"http://qiita.com/mojaie/items/995661f7467ffdb40331\" target=\"_blank\" title=\"windows7 - Python, SciPy, matplotlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(Windows) - Qiita:\">windows7 - Python, SciPy, matplotlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(Windows) - Qiita:</a>\n\n\u304c\u3081\u3061\u3083\u304f\u3061\u3083\u4fbf\u5229\u3067\u3057\u305f\uff0e\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff0c\u52a9\u304b\u308a\u307e\u3057\u305f\uff0e\n\nUbuntu\u306b\u5165\u308c\u308b\u3068\u304d\u306f\uff0c\u7d20\u76f4\u306bapt\u4f7f\u3063\u305f\u65b9\u304c\u3044\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e2\u30c7\u30eb\u306b\u95a2\u3057\u3066\u306f\uff0c\u81ea\u5206\u306e\u30ec\u30dd\u30fc\u30c8\u306e\u30b3\u30d4\u30da\u3067\u8a31\u3057\u3066\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\n\n#\u4fb5\u7565\u578b\u30d1\u30fc\u30b3\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\n\n\u4fb5\u7565\u578b\u30d1\u30fc\u30b3\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u308b\u52d5\u7684\u306a\u904e\u7a0b\u306f\uff0c\u6cb9\u3092\u542b\u3093\u3060\u591a\u5b54\u6027\u306e\u5a92\u4f53\u306b\u6c34\u3092\u62bc\u3057\u3053\u3080\u3068\u304d\u751f\u3058\u308b\u6cb9\u3068\u6c34\u306e\u754c\u9762\u306e\u5f62\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b\u306e\u306b\u7528\u3044\u3089\u308c\u308b\uff0e\u305d\u306e\u30a2\u30a4\u30c7\u30a2\u306f\u53ef\u80fd\u306a\u9650\u308a\u591a\u304f\u306e\u6cb9\u3092\u56de\u53ce\u3059\u308b\u305f\u3081\u306b\u6c34\u3092\u7528\u3044\u308b\u3053\u3068\u306b\u3042\u308b\uff0e\u3053\u306e\u904e\u7a0b\u3067\u306f\uff0c\u6c34\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u6700\u3082\u62b5\u6297\u306e\u5c11\u306a\u3044\u7d4c\u8def\u3092\u901a\u3063\u3066\u6cb9\u306e\u4e2d\u306b\u6210\u9577\u3057\u3066\u3044\u304f\uff0eL\u00d72L\u306e\u683c\u5b50\u3092\u8003\u3048\uff0c\u521d\u3081\u5de6\u5074\u306e\u7aef\u304c\u6c34(\u4fb5\u7565\u8005)\u3067\u5360\u6709\u3055\u308c\u3066\u3044\u308b\u3068\u3059\u308b\uff0e\u4fb5\u7565\u8005\u306b\u5bfe\u3059\u308b\u62b5\u6297\u306e\u5f37\u3055\u306f\uff0c0\u30681\u9593\u306e\u4e00\u69d8\u4e71\u6570\u3067\u683c\u5b50\u306e\u5404\u70b9\u306b\u4e0e\u3048\u3089\u308c\uff0c\u4fb5\u7565\u306e\u904e\u7a0b\u306e\u9593\u56fa\u5b9a\u3055\u308c\u305f\u307e\u307e\u3067\u3042\u308b\uff0e\u3059\u3079\u3066\u306e\u4fb5\u7565\u8005\u306e\u683c\u5b50\u70b9\u306e\u6700\u96a3\u63a5\u70b9\u304c\u5468\u8fba\u306e\u70b9\u3068\u306a\u308b\uff0e\u5404\u5206\u5272\u6642\u9593\u306b\uff0c\u6700\u5c0f\u306e\u4e71\u6570\u3092\u6301\u3064\u5468\u8fba\u306e\u70b9\u304c\u4fb5\u7565\u8005\u306b\u3088\u3063\u3066\u5360\u6709\u3055\u308c\uff0c\u305d\u306e\u70b9\u306e\u6cb9(\u9632\u885b\u8005)\u306f\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\uff0e\u4fb5\u7565\u8005\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u683c\u5b50\u306e\u5de6\u53f3\u306e\u7aef\u3092\u7d50\u3076\u7d4c\u8def\u304c\u5f62\u6210\u3055\u308c\u308b\u307e\u3067\u6210\u9577\u3059\u308b\uff0e\u5883\u754c\u306e\u5f71\u97ff\u3092\u6700\u5c0f\u306b\u3059\u308b\u305f\u3081\u306b\uff0c\u5468\u671f\u7684\u5883\u754c\u6761\u4ef6\u304c\u4e0a\u4e0b\u306e\u7aef\u306b\u5bfe\u3057\u3066\u7528\u3044\u3089\u308c\uff0c\u3059\u3079\u3066\u306e\u91cf\u306f\u683c\u5b50\u306e\u4e2d\u5fc3\u306eL\u00d7L\u306e\u9818\u57df\u306e\u307f\u306b\u3064\u3044\u3066\u6e2c\u5b9a\u3055\u308c\u308b\uff0e\u95a2\u5fc3\u306e\u3042\u308b\u4e3b\u306a\u91cf\u306f\uff0c\u4fb5\u7565\u8005\u306b\u3088\u3063\u3066\u5360\u6709\u3055\u308c\u305f\u683c\u5b50\u70b9\u306e\u5272\u5408\u3068\uff0cr+dr\u306e\u9593\u306e\u5024\u306e\u4e71\u6570\u3092\u6301\u3064\u683c\u5b50\u70b9\u304c\u5360\u6709\u3055\u308c\u3066\u3044\u308b\u78ba\u7387P(r)\u3067\u3042\u308b\uff0e\n\n\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u30e2\u30c7\u30eb\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u8aac\u660e\u3057\u305f\u3068\u3053\u308d\u3067\uff0c\u30b3\u30fc\u30c9\u306e\u5185\u5bb9\u306b\u95a2\u3057\u3066\u89e6\u308c\u3066\u304a\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n#\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\n\u307e\u305a\uff0c\u57fa\u672c\u7684\u306a\u3068\u3053\u308d\u304b\u3089\n\n\u683c\u5b50\u70b9\u306fnumpy\u306earray\u3092\u4f7f\u3063\u3066\u884c\u5217\u306e\u3088\u3046\u306b\u3057\u3066\u8868\u3057\u3066\u3044\u307e\u3059\uff08self.lattice\u3068\u66f8\u3044\u3066\u3042\u308b\u3068\u3053\u308d\u304c\u305d\u308c\u3067\u3059\uff09\uff0e\n\n```py\nnumpy.random.random([x, y])\n```\n\n\u3067x\u884cy\u5217\u306e\u884c\u5217\u3067\uff0c\u8981\u7d20\u304c0\u301c1\u306e\u4e71\u6570\u306e\u914d\u5217\u304c\u3067\u304d\u307e\u3059\uff0e\u3053\u306e\u30e2\u30c7\u30eb\u3067\u306f\u305d\u308c\u305e\u308c\u306b\u4e0e\u3048\u3089\u308c\u305f\u4e71\u6570\u306e\u5024\u304c\u62b5\u6297\u529b\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff0e\u6b21\u306bwhile\u7bc0\u306e\u4e2d\u3067\u884c\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u304c\uff0c\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3044\u308b\u3088\u3046\u306b\uff0c\u5360\u6709\u3055\u308c\u305f\u683c\u5b50\u70b9\u306e\u5468\u8fba\u306e\u70b9\u304b\u3089\uff0c\u6700\u5c0f\u306e\u62b5\u6297\u5024\u3092\u3082\u3064\u683c\u5b50\u70b9\u3092\u9806\u306b\u5360\u6709\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n##\u5de5\u592b\u3057\u305f\u3068\u3053\u308d\n\n```py\n# \u5468\u8fba\u306e\u70b9\u3067\u6700\u3082\u5024\u306e\u5c0f\u3055\u3044\u683c\u5b50\u306e\u5ea7\u6a19\u3092mm\u306b\nmm = min([(v,k) for k,v in nnsite.items()])[1]\n```\n\n\u8f9e\u66f8nnsite\u306e\u30ad\u30fc\u3068\u5024\u3092nnsite.items()\u3067\u53d6\u308a\u51fa\u3057\uff0cmin\u306e\u4ed5\u69d8\u3067\u3042\u308b\uff0c\u6e21\u3055\u308c\u305f\u30bf\u30d7\u30eb\u306e\u5148\u982d\u306e\u5024\u306e\u5927\u5c0f\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\uff0c\u5024\u306e\u6700\u5c0f\u3068\u306a\u308b\u30ad\u30fc\u3092\u53d6\u5f97\uff0e\n\n```python\nclass TopWindow:\n    \n    def quit(self):\n        self.root.destroy()\n        sys.exit()\n        \n    def show_window(self, title=\"title\", *args):\n        self.root = Tk()\n        self.root.title(title)\n        frames = []\n        for i, arg in enumerate(args):\n            frames.append(Frame(self.root, padx=5, pady=5))\n            for k, v in arg:\n                Button(frames[i],text=k,command=v).pack(expand=YES, fill='x')\n            frames[i].pack(fill='x')\n        f = Frame(self.root, padx=5, pady=5)\n        Button(f,text='quit',command=self.quit).pack(expand=YES, fill='x')\n        f.pack(fill='x')\n        self.root.mainloop()\n```\n\n\u5f15\u6570\u306b\u4e0e\u3048\u308b\u30bf\u30d7\u30eb\u306e\u7d44\u3067\u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb\u3068\u3072\u3082\u4ed8\u3051\u3055\u308c\u305f\u95a2\u6570\u3092\u6307\u5b9a\uff0e\u547c\u3073\u51fa\u3059\u3068\u304d\u306f\n\n```python\nrun = (('run', pushed), ('save canvas to sample.eps', pr))\nrun2 = (('calculate D', b4_pushed),)\ntop.show_window(\"Invasion Percolation\", run, run2)\n```\n\n\u306e\u3088\u3046\u306b\u3059\u308b\uff0e\n\n\u4ed6\u306e\u7d30\u304b\u3044\u3068\u3053\u308d\u306b\u3064\u3044\u3066\u306f\uff0c\u3059\u3079\u3066\u89e3\u8aac\u3067\u304d\u306a\u3044\u306e\u3067\uff0c\u4e00\u5fdc\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3069\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u5f97\u3089\u308c\u3066\uff0c\u3069\u3046\u3044\u3063\u305f\u5b9f\u884c\u7d50\u679c\u306b\u306a\u308b\u306e\u304b\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n<a href=\"http://yuzugosho.blog.fc2.com/img/2014-08-06.png/\" target=\"_blank\"><img src=\"http://blog-imgs-64.fc2.com/y/u/z/yuzugosho/2014-08-06.png\" alt=\"\u5b9f\u884c\u4f8b\" border=\"0\" width=\"689\" height=\"531\" /></a>\n\n<a href=\"http://yuzugosho.blog.fc2.com/img/figure_2.png/\" target=\"_blank\"><img src=\"http://blog-imgs-64.fc2.com/y/u/z/yuzugosho/figure_2.png\" alt=\"inavasion_percolation_D\" border=\"0\" width=\"812\" height=\"612\" /></a>\n\n\u3053\u306e\u3088\u3046\u306b\uff0c\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\uff0crun\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d1\u30fc\u30b3\u30ec\u30fc\u30b7\u30e7\u30f3\u30fb\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u751f\u6210\u3055\u308c\uff0ccalculate_D\u3067\u4e0a\u306e\u3088\u3046\u306a\u30b0\u30e9\u30d5\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u305d\u306e\u610f\u5473\u306a\u3069\u306f\u5272\u611b\uff0e\n\n\n```python:invasion_percolation.py\n#! /usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# written by ssh0, August 2014.\n\nfrom Tkinter import *\nimport sys\nimport numpy as np\nimport scipy.optimize as optimize\nimport matplotlib.pyplot as plt\n\nclass Percolation:\n\n    def __init__(self, Lx=40, Ly=20):\n        self.sub = None\n        self.Lx = Lx\n        self.Ly = Ly\n\n    def perc_cluster(self):\n        self.lattice = np.random.random([self.Lx+2, self.Ly])\n        Lx = self.Lx\n        Ly = self.Ly\n        \n        # \u5de6\u7aef\u306f\u3059\u3079\u3066\u5360\u6709\u30b5\u30a4\u30c8\n        self.lattice[:1, :] = 1.5\n        \n        self.lattice[Lx+1:, :] = 0\n        if self.sub is None or not self.sub.winfo_exists():\n            lattice = self.lattice\n            ne = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n            \n            # \u5468\u8fba\u306e\u70b9\u306e\u5ea7\u6a19\u3092\u8f9e\u66f8\u5f62\u5f0f\u3067\u4fdd\u6301\u3059\u308b\n            nnsite = {(1, y):lattice[1, y] for y in range(Ly)}\n            \n            percolate = False\n            while len(nnsite) != 0 and percolate == False:\n                \n                # \u5468\u8fba\u306e\u70b9\u3067\u6700\u3082\u5024\u306e\u5c0f\u3055\u3044\u683c\u5b50\u306e\u5ea7\u6a19\u3092mm\u306b\n                mm = min([(v,k) for k,v in nnsite.items()])[1]\n                \n                lattice[mm] = 1\n                del nnsite[mm]\n                \n                # mm\u306e\u5468\u8fba\u306e\u70b9\u306e\u5ea7\u6a19\u3092\u30ea\u30b9\u30c8nn\u306b(y\u65b9\u5411\u306b\u5468\u671f\u5883\u754c\u6761\u4ef6\u3092\u9069\u7528)\n                nn = [(mm[0] + nx, (mm[1] + ny)%Ly) for nx, ny in ne\n                                if lattice[mm[0] + nx, (mm[1] + ny)%Ly] < 1]\n                \n                # nn\u306e\u4e2d\u3067\u65e2\u306bnnsite\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u9664\u304f --> nnlist\n                nnlist = list(set(nn) - set(nnsite.keys()))\n                \n                # nnsite\u306b\u65b0\u305f\u306a\u5468\u8fba\u306e\u70b9\u3092\u8ffd\u52a0\u3059\u308b\n                for n in nnlist:\n                    nnsite[n] = lattice[n]\n                \n                # \u5360\u6709\u3055\u308c\u305f\u683c\u5b50\u70b9\u304c\u53f3\u7aef\u3067\u3042\u308b\u6642\uff0c\u30d1\u30fc\u30b3\u30ec\u30fc\u30c8\u3057\u305f\u3068\u898b\u306a\u3059\n                if mm[0] == Lx:\n                    percolate = True\n            \n            self.lattice = lattice[1:-1, :]\n        return self.lattice\n    \n    def draw_canvas(self, rect, Lx, Ly):\n        default_size = 640 # default size of canvas\n        r = int(default_size/(2*Lx))\n        fig_size_x = 2*r*Lx\n        fig_size_y = 2*r*Ly\n        margin = 10\n        sub = Toplevel()\n        \n        sub.title('invasion percolation')\n        self.canvas = Canvas(sub, width=fig_size_x+2*margin,\n                    height=fig_size_y+2*margin)\n        self.canvas.create_rectangle(margin, margin,\n                    fig_size_x+margin, fig_size_y+margin,\n                    outline='black', fill='white')\n        self.canvas.pack()\n        \n        c = self.canvas.create_rectangle\n        \n        site = np.where(rect==1)\n        for m, n in zip(site[0], site[1]):\n            c(2*m*r+margin, 2*n*r+margin,\n                        2*(m+1)*r+margin, 2*(n+1)*r+margin,\n                        outline='black', fill='black')\n    \n    def get_fractal_dim(self, trial=20, Lmin=20, Lmax=40, Lsample=10):\n        \n        # Lmin\u304b\u3089Lmax\u306e\u9593\u306e\u6574\u6570\u5024\u3067\uff0c\u3067\u304d\u308b\u3060\u3051log\u306b\u3057\u305f\u3068\u304d\u7b49\u9593\u9694\u306b\u306a\u308b\u3088\u3046\u306b\n        L = np.array([int(i) for i \n                    in np.logspace(np.log10(Lmin), np.log10(Lmax), Lsample)])\n        \n        M_L = []\n        for l in L:\n            self.Lx = l*2\n            self.Ly = l\n            m_L = 0\n            for i in range(trial):\n                lattice = self.perc_cluster()\n                \n                # \u4e2d\u5fc3\u306eL\u00d7L\u683c\u5b50\u4e2d\u306e\u5360\u6709\u30b5\u30a4\u30c8\u6570\u3092\u5408\u8a08\n                m_L += np.sum(lattice[int(l/2)+1:l+int(l/2),:]==1)\n            \n            M_L.append(m_L/float(trial))\n            print \"L = %d, M_L = %f\" % (l, M_L[-1])\n        \n        M_L = np.array(M_L)\n\n        def fit_func(parameter0, L, M_L):\n            log = np.log\n            c1 = parameter0[0]\n            c2 = parameter0[1]\n            residual = log(M_L) - c1 - c2*log(L)\n            return residual\n        \n        parameter0 = [0.1, 2.0]\n        result = optimize.leastsq(fit_func, parameter0, args=(L, M_L))\n        c1 = result[0][0]\n        D = result[0][1]\n        print \"D = %f\" % D\n        \n        def fitted(L, c1, D):\n            return np.exp(c1)*(L**D)\n        \n        fig = plt.figure(\"Fractal Dimension\")\n        ax = fig.add_subplot(111)\n        ax.plot(L, M_L, '-o', label=r\"$M(L)$\")\n        ax.plot(L, fitted(L, c1, D), label=\"fit func: D = %f\" % D)\n        ax.set_xlabel(r'$\\ln L$', fontsize=16)\n        ax.set_ylabel(r'$\\ln M(L)$', fontsize=16)\n        ax.set_xscale('log')\n        ax.set_yscale('log')\n        ax.set_ymargin(0.05)\n        fig.tight_layout()\n        plt.legend(loc='best')\n        plt.show()\n\nclass TopWindow:\n    \n    def quit(self):\n        self.root.destroy()\n        sys.exit()\n        \n    def show_window(self, title=\"title\", *args):\n        self.root = Tk()\n        self.root.title(title)\n        frames = []\n        for i, arg in enumerate(args):\n            frames.append(Frame(self.root, padx=5, pady=5))\n            for k, v in arg:\n                Button(frames[i],text=k,command=v).pack(expand=YES, fill='x')\n            frames[i].pack(fill='x')\n        f = Frame(self.root, padx=5, pady=5)\n        Button(f,text='quit',command=self.quit).pack(expand=YES, fill='x')\n        f.pack(fill='x')\n        self.root.mainloop()\n\nif __name__ == '__main__':\n    Lx = 40\n    Ly = 20\n    top = TopWindow()\n    per = Percolation(Lx, Ly)\n    count = 1\n\n    def pr():\n        global count\n        d = per.canvas.postscript(file=\"figure_%d.eps\" % count)\n        print \"saved the figure to a eps file\"\n        count += 1\n\n    def pushed():\n        per.perc_cluster()\n        per.draw_canvas(per.lattice, Lx, Ly)\n\n    def b4_pushed():\n        trial = 100; Lmin = 20; Lmax = 100; Lsample = 10\n        per.get_fractal_dim(trial, Lmin, Lmax, Lsample)\n    \n    run = (('run', pushed), ('save canvas to sample.eps', pr))\n    run2 = (('calculate D', b4_pushed),)\n    top.show_window(\"Invasion Percolation\", run, run2)\n```\n", "tags": ["Python", "numpy", "Tk"]}