{"context": "\n\ngloops AdventCalendar 12\u65e5\u76ee\ngloops advent calendar 12\u65e5\u76ee\u3067\u3059\n\u8a95\u751f\u65e5\u3067\u3059\n\u5bb6\u306b\u65e9\u304f\u5e30\u3063\u3066\u30b1\u30fc\u30ad\u3092\u98df\u3079\u308b\u4e88\u5b9a\u304c\u3053\u3093\u306a\u6642\u9593\u306b\u306a\u3063\u3066\u3057\u307e\u3057\u305f\n11\u65e5\u76ee\u306f @m_nabeta \u3055\u3093\u306e\u300c\u3053\u308c\u307e\u3067\u306b\u4e16\u306b\u9001\u308a\u51fa\u3057\u3066\u3057\u307e\u3063\u3066\u5f8c\u304b\u3089\u731b\u7701\u3057\u305fPython\u306e\u30d1\u30bf\u30fc\u30f3\u300d\u3067\u3057\u305f\u3002\n\u3044\u3044\u306d\u304c\u305f\u304f\u3055\u3093\u3064\u304d\u307e\u3057\u305f\u306d\u3002\n\u79c1\u306fWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a8\u30f3\u30b8\u30cb\u30a2\u306eMgr\u3092\u3084\u3063\u3066\u3044\u3066\u666e\u6bb5\u30b3\u30fc\u30c9\u3092\u89e6\u308b\u6a5f\u4f1a\u304c\u5c11\u306a\u3044\u306e\u3068\u3001\n\u30c0\u30a4\u30a8\u30c3\u30c8\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e21\u65b9\u3092\u6e80\u305f\u3057\u3066\u304f\u308c\u308b\u8da3\u5473\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3064\u304f\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u3060\u672a\u5b8c\u6210\u306a\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u306eAPI\u9023\u643a\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\u203b\u307e\u3060\u4f5c\u6210\u4e2d\u3067\u3059\u3002\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u6b21\u7b2c\u66f4\u65b0\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\n\nGoogle Calendar API\nC#\u306b\u3066\u3001\u7279\u5b9a\u30e6\u30fc\u30b6\u30fc\u306eGoogleCalendar\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u307f\u307e\u3057\u305f\n\nGetGoogleAsync\n\npublic  async Task<List<Calender>> GetGoogleAsync(DateTime Today)\n{\n\u3000\u3000var CalenderList = new List<Calender>();\n\u3000\u3000try\n\u3000\u3000{\n\u3000\u3000\u3000\u3000const string calendarId = \"\u53d6\u5f97\u3057\u305f\u3044\u30ab\u30ec\u30f3\u30c0\u30fc\u306eID\";\n\u3000\u3000\u3000\u3000const string apiKey = \"GoogleCalendarAPI\u3067\u767a\u884c\u3057\u305fAPIKey\";\n\u3000\u3000\u3000\u3000const string apiUrl = \"https://www.googleapis.com/calendar/v3/calendars/\" + calendarId + \"/events?key=\" + apiKey + \"&singleEvents=true\";\n\n\u3000\u3000\u3000\u3000//\u30b9\u30b1\u30b8\u30e5\u30fc\u30ebstartTime\u9806\u3000\u4e0a\u965015\u4ef6\n\u3000\u3000\u3000\u3000var paramList = \"orderBy=startTime&maxResults=15\";\n\u3000\u3000\u3000\u3000//\u65e5\u4ed8\u306e\u30b9\u30bf\u30fc\u30c8\u8a2d\u5b9a\n\u3000\u3000\u3000\u3000paramList += \"&timeMin=\" + Today.ToString(\"yyyy-MM-dd\") + \"T00:00:00%2b0900\";\n\u3000\u3000\u3000\u3000//\u65e5\u4ed8\u306e\u30a8\u30f3\u30c9\u8a2d\u5b9a\n\u3000\u3000\u3000\u3000paramList += \"&timeMax=\" + Today.AddDays(1).ToString(\"yyyy-MM-dd\") + \"T00:00:00%2b0900\";\n\u3000\u3000\u3000\u3000var url = apiUrl + \"&\" + paramList;\n\n\u3000\u3000\u3000\u3000var httpClient = new HttpClient();\n\u3000\u3000\u3000\u3000var clientResponse = await httpClient.GetAsync(url);\n\u3000\u3000\u3000\u3000//API\u306e\u30c7\u30fc\u30bf\u3092\u6210\u5f62\n\u3000\u3000\u3000\u3000CalenderList.AddRange(JsonConvert.DeserializeObject<GoogleCalenderList>(await clientResponse.Content.ReadAsStringAsync())\n                    .items.Select(item => new Calender\n                {\n                    summary = item.summary,\n                    start = item.start.dateTime == null ? new DateTime(1901, 1, 1) : DateTime.Parse(item.start.dateTime),\n                    end = item.end.dateTime == null ? new DateTime(1901, 1, 1) : DateTime.Parse(item.end.dateTime)\n                }));\n\u3000\u3000\u3000\u3000}\n\u3000\u3000\u3000\u3000catch (AggregateException ex)\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\n\u3000\u3000\u3000\u3000}\n            return CalenderList;\n\n}\n\npublic class GoogleCalenderList\n{\n        public GoogleCalender[] items { get; set; }\n}\n\npublic class GoogleCalender\n{\n        public string summary { get; set; }\n        public start start { get; set; }\n        public end end { get; set; }\n}\n\npublic class start\n{\n        public string dateTime { get; set; }\n}\n\npublic class end\n{\n        public string dateTime { get; set; }\n}\n\npublic class Calender\n{\n        public string summary { get; set; }\n        public DateTime start { get; set; }\n\n        public DateTime end { get; set; }\n}\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8)http://blog.howdylikes.jp/entry/20120806/1344265078\n\nBotFramework \u3068 LUIS\u306e\u9023\u643a\n\u591c\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u98f2\u307f\u4f1a\u304b\u3069\u3046\u304b\u5224\u5b9a\n\nPost\n\npublic async Task<HttpResponseMessage> Post([FromBody]Activity activity)\n{\n\u3000\u3000if (activity.Type == ActivityTypes.Message || activity.Text.Contains(\"\u591c\"))\uff5b\n     var text = activity.Text;\n     var calendarList = await GetGoogleAsync();\n     var nightSchedule = \"\u306a\u3057\";\n     //\u300019\u6642\u534a\u4ee5\u964d\u306e\u4e88\u5b9a\u53d6\u5f97\n     var night = calendarList.FirstOrDefault(\n                    x => x.start >= new DateTime(Today.Year, Today.Month, Today.Day, 19, 30, 0));\n     if (night?.summary != null)\n        nightSchedule = night.summary;\n     var baseurl = $\"https://api.projectoxford.ai/luis/v2.0/apps/App\u306eId?subscription-key=App\u306eKey&q=\";\n     var url = $\"{baseurl + text}&verbose=true\";\n     var httpClient = new HttpClient();\n     var clientResponse = await httpClient.GetAsync(url);\n     var content = await clientResponse.Content.ReadAsStringAsync();\n\n     // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u7b54\n     ConnectorClient connector = new ConnectorClient(new Uri(activity.ServiceUrl));\n     Activity reply = activity.CreateReply(content);\n     await connector.Conversations.ReplyToActivityAsync(reply);\n\u3000\u3000\uff5d\n   var response = Request.CreateResponse(HttpStatusCode.OK);\n   return response;\n}\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8)https://bita.jp/dml/luis_1\n\nLUIS\u5074\u306e\u30c7\u30fc\u30bf\u72b6\u6cc1\n\n\nLUIS\u5074\u306bGoogle\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u9001\u3063\u305f\u30ec\u30b9\u30dd\u30f3\u30b9\u30c7\u30fc\u30bf\n\u306a\u304b\u306a\u304b\u6b63\u78ba\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u5fd8\u5e74\u4f1a\u304c\u98f2\u307f\u4f1a\u306b\u306a\u3063\u305f\u308a\u3001\u30b8\u30e0\u304c\u306a\u305c\u304b\u98f2\u307f\u4f1a\u306b\u5224\u5b9a\u3055\u308c\u308b\u306e\u3067\u3001\n\u3053\u308c\u304b\u3089\u3082LUIS\u306b\u5b66\u7fd2\u3055\u305b\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\u4eca\u5f8c\u306e\u5b9f\u88c5\u4e88\u5b9a\n\u30fb\u663c\u306egoogle\u30ab\u30ec\u30f3\u30c0\u30fc\u30c7\u30fc\u30bf\u3068\u591c\u306e\u98f2\u307f\u4f1a\u72b6\u6cc1\u3092\u52a0\u5473\u3057\u3066\u3001\u304a\u663c\u30fb\u591c\u3054\u306f\u3093\u3092\u6c7a\u5b9a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u3059\u308b\n\n\u307e\u3068\u3081\nLUIS\u3092\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u3066\u3001\u80b2\u6210\u3055\u305b\u305f\u3044\u3068\u3044\u3046\u611b\u7740\u304c\u308f\u304d\u307e\u3057\u305f\u3002\n\u4eca\u5f8c\u6559\u80b2\u3092\u7d99\u7d9a\u3057\u3066\u884c\u3044\u3001\u79c1\u306e\u4f53\u8abf\u7ba1\u7406\u3092\u7ba1\u7406\u3057\u3066\u304f\u308c\u308b\u5b50\u306b\u80b2\u3066\u3066\u884c\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# gloops AdventCalendar 12\u65e5\u76ee\n\n[gloops advent calendar](http://qiita.com/advent-calendar/2016/gloops) 12\u65e5\u76ee\u3067\u3059:relaxed:\n\u8a95\u751f\u65e5\u3067\u3059:birthday:\n\u5bb6\u306b\u65e9\u304f\u5e30\u3063\u3066\u30b1\u30fc\u30ad\u3092\u98df\u3079\u308b\u4e88\u5b9a\u304c\u3053\u3093\u306a\u6642\u9593\u306b\u306a\u3063\u3066\u3057\u307e\u3057\u305f\n\n11\u65e5\u76ee\u306f @m_nabeta \u3055\u3093\u306e\u300c[\u3053\u308c\u307e\u3067\u306b\u4e16\u306b\u9001\u308a\u51fa\u3057\u3066\u3057\u307e\u3063\u3066\u5f8c\u304b\u3089\u731b\u7701\u3057\u305fPython\u306e\u30d1\u30bf\u30fc\u30f3](http://qiita.com/m_nabeta/items/0a8efc30d8d9a5808b91)\u300d\u3067\u3057\u305f\u3002\n\u3044\u3044\u306d\u304c\u305f\u304f\u3055\u3093\u3064\u304d\u307e\u3057\u305f\u306d\u3002\n\n\u79c1\u306fWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a8\u30f3\u30b8\u30cb\u30a2\u306eMgr\u3092\u3084\u3063\u3066\u3044\u3066\u666e\u6bb5\u30b3\u30fc\u30c9\u3092\u89e6\u308b\u6a5f\u4f1a\u304c\u5c11\u306a\u3044\u306e\u3068\u3001\n\u30c0\u30a4\u30a8\u30c3\u30c8\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e21\u65b9\u3092\u6e80\u305f\u3057\u3066\u304f\u308c\u308b\u8da3\u5473\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3064\u304f\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u3060\u672a\u5b8c\u6210\u306a\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u306eAPI\u9023\u643a\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n<font color=\"Thistle\">\u203b\u307e\u3060\u4f5c\u6210\u4e2d\u3067\u3059\u3002\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u6b21\u7b2c\u66f4\u65b0\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059</font>\n\n# Google Calendar API\nC#\u306b\u3066\u3001\u7279\u5b9a\u30e6\u30fc\u30b6\u30fc\u306eGoogleCalendar\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u307f\u307e\u3057\u305f\n\n```C#:GetGoogleAsync\n\npublic  async Task<List<Calender>> GetGoogleAsync(DateTime Today)\n{\n\u3000\u3000var CalenderList = new List<Calender>();\n\u3000\u3000try\n\u3000\u3000{\n\u3000\u3000\u3000\u3000const string calendarId = \"\u53d6\u5f97\u3057\u305f\u3044\u30ab\u30ec\u30f3\u30c0\u30fc\u306eID\";\n\u3000\u3000\u3000\u3000const string apiKey = \"GoogleCalendarAPI\u3067\u767a\u884c\u3057\u305fAPIKey\";\n\u3000\u3000\u3000\u3000const string apiUrl = \"https://www.googleapis.com/calendar/v3/calendars/\" + calendarId + \"/events?key=\" + apiKey + \"&singleEvents=true\";\n\n\u3000\u3000\u3000\u3000//\u30b9\u30b1\u30b8\u30e5\u30fc\u30ebstartTime\u9806\u3000\u4e0a\u965015\u4ef6\n\u3000\u3000\u3000\u3000var paramList = \"orderBy=startTime&maxResults=15\";\n\u3000\u3000\u3000\u3000//\u65e5\u4ed8\u306e\u30b9\u30bf\u30fc\u30c8\u8a2d\u5b9a\n\u3000\u3000\u3000\u3000paramList += \"&timeMin=\" + Today.ToString(\"yyyy-MM-dd\") + \"T00:00:00%2b0900\";\n\u3000\u3000\u3000\u3000//\u65e5\u4ed8\u306e\u30a8\u30f3\u30c9\u8a2d\u5b9a\n\u3000\u3000\u3000\u3000paramList += \"&timeMax=\" + Today.AddDays(1).ToString(\"yyyy-MM-dd\") + \"T00:00:00%2b0900\";\n\u3000\u3000\u3000\u3000var url = apiUrl + \"&\" + paramList;\n\n\u3000\u3000\u3000\u3000var httpClient = new HttpClient();\n\u3000\u3000\u3000\u3000var clientResponse = await httpClient.GetAsync(url);\n\u3000\u3000\u3000\u3000//API\u306e\u30c7\u30fc\u30bf\u3092\u6210\u5f62\n\u3000\u3000\u3000\u3000CalenderList.AddRange(JsonConvert.DeserializeObject<GoogleCalenderList>(await clientResponse.Content.ReadAsStringAsync())\n                    .items.Select(item => new Calender\n                {\n                    summary = item.summary,\n                    start = item.start.dateTime == null ? new DateTime(1901, 1, 1) : DateTime.Parse(item.start.dateTime),\n                    end = item.end.dateTime == null ? new DateTime(1901, 1, 1) : DateTime.Parse(item.end.dateTime)\n                }));\n\u3000\u3000\u3000\u3000}\n\u3000\u3000\u3000\u3000catch (AggregateException ex)\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\n\u3000\u3000\u3000\u3000}\n            return CalenderList;\n\n}\n\npublic class GoogleCalenderList\n{\n        public GoogleCalender[] items { get; set; }\n}\n\npublic class GoogleCalender\n{\n        public string summary { get; set; }\n        public start start { get; set; }\n        public end end { get; set; }\n}\n\npublic class start\n{\n        public string dateTime { get; set; }\n}\n\npublic class end\n{\n        public string dateTime { get; set; }\n}\n\npublic class Calender\n{\n        public string summary { get; set; }\n        public DateTime start { get; set; }\n\n        public DateTime end { get; set; }\n}\n```\n\n\u53c2\u8003\u30b5\u30a4\u30c8)http://blog.howdylikes.jp/entry/20120806/1344265078\n\n# BotFramework \u3068 LUIS\u306e\u9023\u643a\n\u591c\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u98f2\u307f\u4f1a\u304b\u3069\u3046\u304b\u5224\u5b9a\n\n```C#:Post\n\npublic async Task<HttpResponseMessage> Post([FromBody]Activity activity)\n{\n\u3000\u3000if (activity.Type == ActivityTypes.Message || activity.Text.Contains(\"\u591c\"))\uff5b\n     var text = activity.Text;\n     var calendarList = await GetGoogleAsync();\n     var nightSchedule = \"\u306a\u3057\";\n     //\u300019\u6642\u534a\u4ee5\u964d\u306e\u4e88\u5b9a\u53d6\u5f97\n     var night = calendarList.FirstOrDefault(\n                    x => x.start >= new DateTime(Today.Year, Today.Month, Today.Day, 19, 30, 0));\n     if (night?.summary != null)\n        nightSchedule = night.summary;\n     var baseurl = $\"https://api.projectoxford.ai/luis/v2.0/apps/App\u306eId?subscription-key=App\u306eKey&q=\";\n     var url = $\"{baseurl + text}&verbose=true\";\n     var httpClient = new HttpClient();\n     var clientResponse = await httpClient.GetAsync(url);\n     var content = await clientResponse.Content.ReadAsStringAsync();\n        \n     // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u7b54\n     ConnectorClient connector = new ConnectorClient(new Uri(activity.ServiceUrl));\n     Activity reply = activity.CreateReply(content);\n     await connector.Conversations.ReplyToActivityAsync(reply);\n\u3000\u3000\uff5d\n   var response = Request.CreateResponse(HttpStatusCode.OK);\n   return response;\n}\n```\n\n\u53c2\u8003\u30b5\u30a4\u30c8)https://bita.jp/dml/luis_1\n## LUIS\u5074\u306e\u30c7\u30fc\u30bf\u72b6\u6cc1\n![luis.PNG](https://qiita-image-store.s3.amazonaws.com/0/51651/a626de12-9e13-6b27-a8fc-531ad9f3d492.png)\n\n## LUIS\u5074\u306bGoogle\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u9001\u3063\u305f\u30ec\u30b9\u30dd\u30f3\u30b9\u30c7\u30fc\u30bf\n\u306a\u304b\u306a\u304b\u6b63\u78ba\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u5fd8\u5e74\u4f1a\u304c\u98f2\u307f\u4f1a\u306b\u306a\u3063\u305f\u308a\u3001\u30b8\u30e0\u304c\u306a\u305c\u304b\u98f2\u307f\u4f1a\u306b\u5224\u5b9a\u3055\u308c\u308b\u306e\u3067\u3001\n\u3053\u308c\u304b\u3089\u3082LUIS\u306b\u5b66\u7fd2\u3055\u305b\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n![\u98f2\u307f\u4f1a\u306e\u5224\u5b9a.PNG](https://qiita-image-store.s3.amazonaws.com/0/51651/2e314d18-907b-7913-fcba-ddd5371d8ee6.png)\n![jikokensan.PNG](https://qiita-image-store.s3.amazonaws.com/0/51651/83a58d00-0e92-7bee-f767-8cee322cac3b.png)\n\n\n\n\n# \u4eca\u5f8c\u306e\u5b9f\u88c5\u4e88\u5b9a\n\u30fb\u663c\u306egoogle\u30ab\u30ec\u30f3\u30c0\u30fc\u30c7\u30fc\u30bf\u3068\u591c\u306e\u98f2\u307f\u4f1a\u72b6\u6cc1\u3092\u52a0\u5473\u3057\u3066\u3001\u304a\u663c\u30fb\u591c\u3054\u306f\u3093\u3092\u6c7a\u5b9a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u3059\u308b\n\n\n# \u307e\u3068\u3081\nLUIS\u3092\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u3066\u3001\u80b2\u6210\u3055\u305b\u305f\u3044\u3068\u3044\u3046\u611b\u7740\u304c\u308f\u304d\u307e\u3057\u305f\u3002\n\u4eca\u5f8c\u6559\u80b2\u3092\u7d99\u7d9a\u3057\u3066\u884c\u3044\u3001\u79c1\u306e\u4f53\u8abf\u7ba1\u7406\u3092\u7ba1\u7406\u3057\u3066\u304f\u308c\u308b\u5b50\u306b\u80b2\u3066\u3066\u884c\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n", "tags": ["LUIS", "BotFramework", "bot", "GoogleCalendar"]}