{"context": "\n\n\u306f\u3058\u3081\u306b\nzabbix_sender\u30b3\u30de\u30f3\u30c9\u304b\u3089\u30b5\u30fc\u30d0\u30fc\u3078\u306e\u30c7\u30fc\u30bf\u306e\u9001\u4fe1\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u6bd4\u8f03\u7684\u30b7\u30f3\u30d7\u30eb\u306a\u7269\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u63a5\u7d9a\u3067\u304d\u308b\u30de\u30a4\u30b3\u30f3\u3067\u3042\u308c\u3070\u5145\u5206\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002\n\u3053\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3092ESP-WROOM-02\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u5404\u7a2e\u30bb\u30f3\u30b5\u30fc\u306e\u30c7\u30fc\u30bf\u3092Zabbix\u30b5\u30fc\u30d0\u30fc\u3067\u53ce\u96c6\u3059\u308b\u30c7\u30d0\u30a4\u30b9\u304c\u304a\u624b\u8efd\u306b\u4f5c\u308c\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u307e\u305a\u306fZabbix sender\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u4ed5\u7d44\u307f\u3067\u30b5\u30fc\u30d0\u30fc\u306b\u5024\u3092\u767b\u9332\u3067\u304d\u308b\u3068\u3053\u308d\u307e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u672c\u7a3f\u306e\u4f8b\u3067\u306fZabbix 3.0\u304b\u3089\u5b9f\u88c5\u3055\u308c\u305f\u901a\u4fe1\u306e\u6697\u53f7\u5316\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u672c\u7a3f\u306e\u5185\u5bb9\u3092\u5b9f\u969b\u306b\u8a66\u3059\u969b\u306b\u306f\u5145\u5206\u306b\u4fe1\u7528\u306e\u304a\u3051\u308b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5185\u3067\u5b9f\u884c\u3059\u308b\u4e8b\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n\u74b0\u5883\n\nZabbix\u30b5\u30fc\u30d0\u30fc\n\n\nZabbix 3.0.4 (CentOS7.2)\n\n\n ESP-WROOM-02\u30e2\u30b8\u30e5\u30fc\u30eb\n\n\n\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9 ESPr Developer\n\n\nArduino IDE\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f31.6.10 \n\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nESP8266_zabbix-sender\n#include <ESP8266WiFi.h>\n#include <Ticker.h>\n#include <ArduinoJson.h>\n\nconst char* ssid     = \"YourAccessPointName\";\nconst char* password = \"YourAccessPointPassword\";\nconst char* zbx_server = \"YourZabbixServerIPaddr\";\n\nTicker ticker;\nbool readyForTicker = false;\n\nvoid setReadyForTicker() {\n  // A flag\n  readyForTicker = true;\n}\n\nint value = 0;\nvoid doBlockingIO() {\n\n  uint64_t payloadsize ;\n\n  // dummy value increment\n  ++value;\n\n  // create \"zabbix sender format\" json data for sending zabbix server\n  StaticJsonBuffer<200> jsonBuffer;\n  JsonObject& root = jsonBuffer.createObject();\n  root[\"request\"] = \"sender data\";\n\n  JsonArray& data = root.createNestedArray(\"data\");\n\n  JsonObject& item = jsonBuffer.createObject();\n  item[\"host\"] = \"Home Network\";\n  item[\"key\"] = \"test\";\n  item[\"value\"] = value;\n  data.add(item);\n\n  /*\n    // zabbix sender can send more items at once\n    JsonObject& item2 = jsonBuffer.createObject();\n    item2[\"host\"] = \"Home Network\";\n    item2[\"key\"] = \"test2\";\n    item2[\"value\"] = \"hello\";\n    data.add(item2);\n  */\n\n  Serial.println();\n  Serial.println(\"== request  ================\");\n  root.printTo(Serial);\n\n  Serial.println(\"\");\n  Serial.println(\"============================\");\n  char buffer[256];\n  root.printTo(buffer, sizeof(buffer));\n  Serial.print(\"payload json size: \");\n  Serial.println(strlen(buffer));\n  Serial.println(\"============================\");\n\n\n  //////////////////////////////\n  // connect to zabbix server\n  Serial.print(\"connecting to \");\n  Serial.println(zabbix_server);\n\n  // Use WiFiClient class to create TCP connections\n  WiFiClient client;\n  const int zabbixPort = 10051 ;\n  if (!client.connect(zabbix_server, zabbixPort)) {\n    Serial.println(\"connection failed\");\n    return;\n  }\n\n\n  //////////////////////////////\n  // send the zabbix_sender's format data to server\n\n  // send fixed header to zabbix server\n  client.print(String(\"ZBXD\") );\n  client.write(0x01);\n\n  // send json size to zabbix server\n  payloadsize = strlen(buffer);\n  for (int i = 0; i < 64; i += 8) {\n    client.write(lowByte(payloadsize >> i));\n  }\n\n  // send json to zabbix server\n  client.print(buffer);\n  //////////////////////////////\n\n\n  unsigned long timeout = millis();\n  while (client.available() == 0) {\n    if (millis() - timeout > 5000) {\n      Serial.println(\">>> Client Timeout !\");\n      client.stop();\n      return;\n    }\n  }\n\n  // Read all the lines of the reply from server and print them to Serial\n  while (client.available()) {\n    String line = client.readStringUntil('\\r');\n    Serial.println(\"== response ================\");\n    Serial.print(line);\n    Serial.println(\"\");\n    Serial.println(\"============================\");\n  }\n\n  Serial.println();\n  Serial.println(\"closing connection\");\n\n  // Drop the flag\n  readyForTicker = false;\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n\n  // We start by connecting to a WiFi network\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n\n  Serial.println(\"\");\n  Serial.println(\"WiFi connected\");\n  Serial.println(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n\n  // call setReadyForTicker() every 60 seconds\n  ticker.attach(60, setReadyForTicker);\n}\n\nvoid loop() {\n  if (readyForTicker) {\n    doBlockingIO();\n  }\n}\n\n\n\n\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u8a2d\u5b9a\n\nZabbix\u30b5\u30fc\u30d0\u30fc\u306eWeb UI\u4e0a\u3067\"Home Network\"\u3068\u3044\u3046\u540d\u524d\u306e\u30db\u30b9\u30c8\u3092\u4f5c\u6210\nZabbix\u30c8\u30e9\u30c3\u30d1\u30fc\u578b\u306etest\u3068\u3044\u3046\u30ad\u30fc\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u4f5c\u6210 \n\n\u203b\u30db\u30b9\u30c8\u540d\u3001\u30a2\u30a4\u30c6\u30e0\u30ad\u30fc\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3082\u306e\u306b\u63c3\u3048\u308b\n\n\n\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u305f\u69d8\u5b50\n\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u6570\u5024\u304c1\u5206\u304a\u304d\u306b\u30b5\u30fc\u30d0\u30fc\u306b\u767b\u9332\u3055\u308c\u308b\u3068\u3053\u308d\u307e\u3067\u51fa\u6765\u307e\u3057\u305f\u3002\n\n\n\u304a\u308f\u308a\u306b\n\u3055\u304d\u307b\u3069I2C\u63a5\u7d9a\u306e\u30bb\u30f3\u30b5\u30fc\u3092\u3044\u304f\u3064\u304b\u30dd\u30c1\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u304c\u5c4a\u304d\u6b21\u7b2c\u4e0a\u8ff0\u306e\u5185\u5bb9\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\n\nESP-WROOM-02\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n\n\nhttp://trac.switch-science.com/wiki/esp_dev_arduino_ide\nhttp://qiita.com/azusa9/items/264165005aefaa3e8d7d\n\n\n\u4e00\u5b9a\u6642\u9593\u3054\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u65b9\u6cd5\n\n\nhttps://www.sglabs.jp/esp-wroom-02-ticker/\n\n\nArduinoJson\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\n\n\nhttp://hawksnowlog.tumblr.com/post/141582097010/arduino-%E3%81%A7-json-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\n\n\nZabbix sender\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u5185\u5bb9\n\n\nhttp://www.slideshare.net/BlueSkyDetector/zabbix-meeting-20101218022-takanori-suzuki\n\n\nWiFiClient \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\n# \u306f\u3058\u3081\u306b\nzabbix_sender\u30b3\u30de\u30f3\u30c9\u304b\u3089\u30b5\u30fc\u30d0\u30fc\u3078\u306e\u30c7\u30fc\u30bf\u306e\u9001\u4fe1\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u6bd4\u8f03\u7684\u30b7\u30f3\u30d7\u30eb\u306a\u7269\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u63a5\u7d9a\u3067\u304d\u308b\u30de\u30a4\u30b3\u30f3\u3067\u3042\u308c\u3070\u5145\u5206\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002\n\u3053\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3092ESP-WROOM-02\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u5404\u7a2e\u30bb\u30f3\u30b5\u30fc\u306e\u30c7\u30fc\u30bf\u3092Zabbix\u30b5\u30fc\u30d0\u30fc\u3067\u53ce\u96c6\u3059\u308b\u30c7\u30d0\u30a4\u30b9\u304c\u304a\u624b\u8efd\u306b\u4f5c\u308c\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u307e\u305a\u306fZabbix sender\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u4ed5\u7d44\u307f\u3067\u30b5\u30fc\u30d0\u30fc\u306b\u5024\u3092\u767b\u9332\u3067\u304d\u308b\u3068\u3053\u308d\u307e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u306a\u304a\u3001\u672c\u7a3f\u306e\u4f8b\u3067\u306fZabbix 3.0\u304b\u3089\u5b9f\u88c5\u3055\u308c\u305f\u901a\u4fe1\u306e\u6697\u53f7\u5316\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u672c\u7a3f\u306e\u5185\u5bb9\u3092\u5b9f\u969b\u306b\u8a66\u3059\u969b\u306b\u306f\u5145\u5206\u306b\u4fe1\u7528\u306e\u304a\u3051\u308b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5185\u3067\u5b9f\u884c\u3059\u308b\u4e8b\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n# \u74b0\u5883\n- Zabbix\u30b5\u30fc\u30d0\u30fc\n - Zabbix 3.0.4 (CentOS7.2)\n-  ESP-WROOM-02\u30e2\u30b8\u30e5\u30fc\u30eb\n - [\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9 ESPr Developer](https://www.switch-science.com/catalog/2500/)\n- Arduino IDE\n - \u30d0\u30fc\u30b8\u30e7\u30f31.6.10 \n\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n```cpp:ESP8266_zabbix-sender\n#include <ESP8266WiFi.h>\n#include <Ticker.h>\n#include <ArduinoJson.h>\n\nconst char* ssid     = \"YourAccessPointName\";\nconst char* password = \"YourAccessPointPassword\";\nconst char* zbx_server = \"YourZabbixServerIPaddr\";\n\nTicker ticker;\nbool readyForTicker = false;\n\nvoid setReadyForTicker() {\n  // A flag\n  readyForTicker = true;\n}\n\nint value = 0;\nvoid doBlockingIO() {\n\n  uint64_t payloadsize ;\n\n  // dummy value increment\n  ++value;\n\n  // create \"zabbix sender format\" json data for sending zabbix server\n  StaticJsonBuffer<200> jsonBuffer;\n  JsonObject& root = jsonBuffer.createObject();\n  root[\"request\"] = \"sender data\";\n\n  JsonArray& data = root.createNestedArray(\"data\");\n\n  JsonObject& item = jsonBuffer.createObject();\n  item[\"host\"] = \"Home Network\";\n  item[\"key\"] = \"test\";\n  item[\"value\"] = value;\n  data.add(item);\n\n  /*\n    // zabbix sender can send more items at once\n    JsonObject& item2 = jsonBuffer.createObject();\n    item2[\"host\"] = \"Home Network\";\n    item2[\"key\"] = \"test2\";\n    item2[\"value\"] = \"hello\";\n    data.add(item2);\n  */\n\n  Serial.println();\n  Serial.println(\"== request  ================\");\n  root.printTo(Serial);\n\n  Serial.println(\"\");\n  Serial.println(\"============================\");\n  char buffer[256];\n  root.printTo(buffer, sizeof(buffer));\n  Serial.print(\"payload json size: \");\n  Serial.println(strlen(buffer));\n  Serial.println(\"============================\");\n\n\n  //////////////////////////////\n  // connect to zabbix server\n  Serial.print(\"connecting to \");\n  Serial.println(zabbix_server);\n\n  // Use WiFiClient class to create TCP connections\n  WiFiClient client;\n  const int zabbixPort = 10051 ;\n  if (!client.connect(zabbix_server, zabbixPort)) {\n    Serial.println(\"connection failed\");\n    return;\n  }\n\n\n  //////////////////////////////\n  // send the zabbix_sender's format data to server\n\n  // send fixed header to zabbix server\n  client.print(String(\"ZBXD\") );\n  client.write(0x01);\n\n  // send json size to zabbix server\n  payloadsize = strlen(buffer);\n  for (int i = 0; i < 64; i += 8) {\n    client.write(lowByte(payloadsize >> i));\n  }\n\n  // send json to zabbix server\n  client.print(buffer);\n  //////////////////////////////\n\n\n  unsigned long timeout = millis();\n  while (client.available() == 0) {\n    if (millis() - timeout > 5000) {\n      Serial.println(\">>> Client Timeout !\");\n      client.stop();\n      return;\n    }\n  }\n\n  // Read all the lines of the reply from server and print them to Serial\n  while (client.available()) {\n    String line = client.readStringUntil('\\r');\n    Serial.println(\"== response ================\");\n    Serial.print(line);\n    Serial.println(\"\");\n    Serial.println(\"============================\");\n  }\n\n  Serial.println();\n  Serial.println(\"closing connection\");\n\n  // Drop the flag\n  readyForTicker = false;\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n\n  // We start by connecting to a WiFi network\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n\n  Serial.println(\"\");\n  Serial.println(\"WiFi connected\");\n  Serial.println(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n\n  // call setReadyForTicker() every 60 seconds\n  ticker.attach(60, setReadyForTicker);\n}\n\nvoid loop() {\n  if (readyForTicker) {\n    doBlockingIO();\n  }\n}\n```\n\n# \u30b5\u30fc\u30d0\u30fc\u5074\u306e\u8a2d\u5b9a\n- Zabbix\u30b5\u30fc\u30d0\u30fc\u306eWeb UI\u4e0a\u3067\"Home Network\"\u3068\u3044\u3046\u540d\u524d\u306e\u30db\u30b9\u30c8\u3092\u4f5c\u6210\n- Zabbix\u30c8\u30e9\u30c3\u30d1\u30fc\u578b\u306etest\u3068\u3044\u3046\u30ad\u30fc\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u4f5c\u6210 \n\n\u203b\u30db\u30b9\u30c8\u540d\u3001\u30a2\u30a4\u30c6\u30e0\u30ad\u30fc\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3082\u306e\u306b\u63c3\u3048\u308b\n\n![item.png](https://qiita-image-store.s3.amazonaws.com/0/20934/e5f405d9-5c7e-22eb-bb37-626a23a6e87b.png)\n\n# \u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u305f\u69d8\u5b50\n\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u6570\u5024\u304c1\u5206\u304a\u304d\u306b\u30b5\u30fc\u30d0\u30fc\u306b\u767b\u9332\u3055\u308c\u308b\u3068\u3053\u308d\u307e\u3067\u51fa\u6765\u307e\u3057\u305f\u3002\n![kekka.png](https://qiita-image-store.s3.amazonaws.com/0/20934/17e2c562-c711-a22d-3daa-801fff0d3222.png)\n\n# \u304a\u308f\u308a\u306b\n\u3055\u304d\u307b\u3069I2C\u63a5\u7d9a\u306e\u30bb\u30f3\u30b5\u30fc\u3092\u3044\u304f\u3064\u304b\u30dd\u30c1\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u304c\u5c4a\u304d\u6b21\u7b2c\u4e0a\u8ff0\u306e\u5185\u5bb9\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u53c2\u8003\n- ESP-WROOM-02\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n - http://trac.switch-science.com/wiki/esp_dev_arduino_ide\n - http://qiita.com/azusa9/items/264165005aefaa3e8d7d\n- \u4e00\u5b9a\u6642\u9593\u3054\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u65b9\u6cd5\n - https://www.sglabs.jp/esp-wroom-02-ticker/\n- ArduinoJson\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\n - http://hawksnowlog.tumblr.com/post/141582097010/arduino-%E3%81%A7-json-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\n- Zabbix sender\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u5185\u5bb9\n - http://www.slideshare.net/BlueSkyDetector/zabbix-meeting-20101218022-takanori-suzuki\n- WiFiClient \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\n", "tags": ["zabbix", "ESP-WROOM-02", "ESP8266", "Arduino"]}