{"context": " More than 1 year has passed since last update.\u4ee5\u524d\u3001Scheme \u3067\u300cProject Euler\u300d\u3092\u89e3\u3044\u3066\u3044\u305f\u6642\u306b\u4f7f\u3063\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002\n\uff08\u3082\u3068\u3082\u3068\u306f \"Chez Scheme\" \u7528\u3067\u3057\u305f\u304c\u3001\"Gauche\" \u7528\u306b\u6539\u5909\u3057\u307e\u3057\u305f\uff09\n\nprime-list.scm\n(use srfi-1)\n\n(define prime-list\n  (lambda (n)\n\n    (define get-num\n      (lambda (m)\n        (quotient (- n 1) 2)))\n\n    (if [= n 2]\n        '(2)\n        ;; \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\n        (let* ([p-vct (list->vector (cons 0 (iota (get-num n) 3 2)))]\n               ;; p-vct = #(0 3 5 7 ...)\n               [size (vector-length p-vct)]\n               [max (sqrt n)])\n          (let loop1 ([i 1])\n            (let ([j (vector-ref p-vct i)])\n              (cond\n                ([zero? j] (loop1 (+ i 1)))\n                ([> j max] (cons 2 (remove! zero? (vector->list p-vct))))\n                (else\n                  (let loop2 ([k (* 2 i (+ i 1))])\n                    (if [>= k size]\n                        (loop1 (+ i 1))\n                        (begin (vector-set! p-vct k 0)\n                               (loop2 (+ j k)))))))))))))\n\n\n\u79c1\u306e\u74b0\u5883\u3067\u306f\u3001n = 1000000 \u306e\u5834\u5408\u3001\u7d040.5\u79d2\u304b\u304b\u308a\u307e\u3057\u305f\u3002\n\u4ee5\u524d\u3001Scheme \u3067\u300cProject Euler\u300d\u3092\u89e3\u3044\u3066\u3044\u305f\u6642\u306b\u4f7f\u3063\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002\n\uff08\u3082\u3068\u3082\u3068\u306f \"Chez Scheme\" \u7528\u3067\u3057\u305f\u304c\u3001\"Gauche\" \u7528\u306b\u6539\u5909\u3057\u307e\u3057\u305f\uff09\n\n```prime-list.scm\n(use srfi-1)\n\n(define prime-list\n  (lambda (n)\n\n    (define get-num\n      (lambda (m)\n        (quotient (- n 1) 2)))\n\n    (if [= n 2]\n        '(2)\n        ;; \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\n        (let* ([p-vct (list->vector (cons 0 (iota (get-num n) 3 2)))]\n               ;; p-vct = #(0 3 5 7 ...)\n               [size (vector-length p-vct)]\n               [max (sqrt n)])\n          (let loop1 ([i 1])\n            (let ([j (vector-ref p-vct i)])\n              (cond\n                ([zero? j] (loop1 (+ i 1)))\n                ([> j max] (cons 2 (remove! zero? (vector->list p-vct))))\n                (else\n                  (let loop2 ([k (* 2 i (+ i 1))])\n                    (if [>= k size]\n                        (loop1 (+ i 1))\n                        (begin (vector-set! p-vct k 0)\n                               (loop2 (+ j k)))))))))))))\n```\n\n\u79c1\u306e\u74b0\u5883\u3067\u306f\u3001n = 1000000 \u306e\u5834\u5408\u3001\u7d040.5\u79d2\u304b\u304b\u308a\u307e\u3057\u305f\u3002\n", "tags": ["Scheme", "\u6570\u5b66", "\u7d20\u6570"]}