{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u4eba\u7269\u306e\u80cc\u666f\u3092\u5207\u308a\u51fa\u3057\u3066\u5408\u6210\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u3001\nSF\u6620\u753b\u3067\u306f\u30af\u30ed\u30de\u30ad\u30fc\u5408\u6210\u3092\u4f7f\u3063\u3066\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\niOS\u306eCIFilter\u306b\u3082\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u304c\u306a\u3044\u304b\u63a2\u3057\u305f\u306e\u3067\u3059\u304c\u3001\n\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306b\u4f5c\u308c\u308b\u7bc4\u56f2\u3067\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30af\u30ed\u30de\u30ad\u30fc\u5408\u6210\u306ehowto\u306b\u306f\u8af8\u8aac\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u3042\u307e\u308a\u96e3\u3057\u3044\u4e8b\u306f\u629c\u304d\u3067\n\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30d4\u30af\u30bb\u30eb\u8d70\u67fb\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u8003\u3048\u3066\u9802\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u65b9\u6cd5\n\n\n\u30bf\u30c3\u30c1\u3057\u305f\u5834\u6240\u306e<\u8272A>\u3092\u53d6\u5f97\n\u2193\n<\u8272A> = \u767d / \u305d\u308c\u4ee5\u5916 = \u9ed2\u3000\u306e<\u4e8c\u5024\u5316\u753b\u50cfB>\u3092\u751f\u6210\n\u2193\n\u5143\u753b\u50cf\u3068<\u4e8c\u5024\u5316\u753b\u50cfB>\u3092\u5408\u6210\u3057\u3066\u3001\u5dee\u5206\u306e\u9ed2\u8272\u306e\u307f\u5207\u308a\u629c\u304d\u3092\u884c\u3046\n\u2193\n\u80cc\u666f\u753b\u50cf\u3068\u5408\u6210\n\n\n1:\u307e\u305a\u30bf\u30c3\u30c1\u3057\u305f\u5834\u6240\u306e\u8272(UIColor)\u3092\u53d6\u5f97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u63cf\u304d\u307e\u3059\u3002\nUIImage\u306eextension\u3068\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n<\u30dd\u30a4\u30f3\u30c8>\nRGBA\u54041byte\u306a\u306e\u30671pixel\u306f4byte\n(var pixelInfo: Int = ((Int(self.size.width) * Int(pos.y)) + Int(pos.x)) * 4)\n\nextension UIImage {\n    func getPixelColor(pos: CGPoint) -> UIColor {        \n        var pixelData = CGDataProviderCopyData(CGImageGetDataProvider(self.CGImage))\n        var data: UnsafePointer<UInt8> = CFDataGetBytePtr(pixelData)\n        var pixelInfo: Int = ((Int(self.size.width) * Int(pos.y)) + Int(pos.x)) * 4\n        var r = CGFloat(data[pixelInfo]) / CGFloat(255.0)\n        var g = CGFloat(data[pixelInfo+1]) / CGFloat(255.0)\n        var b = CGFloat(data[pixelInfo+2]) / CGFloat(255.0)\n        var a = CGFloat(data[pixelInfo+3]) / CGFloat(255.0)\n        return UIColor(red: r, green: g, blue: b, alpha: a)\n    }\n}\n\n\n2.\u6b21\u306b\u3001UIImage\u306e\u7e26\u6a2a\u30921pix\u305a\u3064\u5168\u8d70\u67fb\u3057\u3066\u3001\u5bfe\u8c61\u306e\u8272(1\u3067\u53d6\u5f97\u3057\u305fColor)\u3067\u3042\u308c\u3070\u767d\u3001\u9055\u3048\u3070\u9ed2\u306e\nUIImage\u3092\u8fd4\u3059\u3088\u3046\u306aextension\u3092\u66f8\u304d\u307e\u3059\u3002\n\n<\u30dd\u30a4\u30f3\u30c8>\n\u753b\u50cf\u306e\u5e45\u3001\u9ad8\u3055\u306e\u5206\u3060\u3051for\u3067\u307e\u308f\u3057\u3066\u3001point = (x, y)\u306e\u8272\u3092\u53d6\u5f97\u3059\u308b\nRGBA\u54041byte\u306a\u306e\u30671pixel\u306f4byte(let newByteLength = _width * _height * 4)\nCGImageCreate(RGB\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u3001UIImage\u3092\u4f5c\u308b)\u3092\u4f7f\u3063\u3066\u3001UIImage\u3092\u8fd4\u3059\n\n\n//\u5165\u529b\u3057\u305f\u8272\u3068\u540c\u3058\u8272\u3092\u767d\u306b\u5857\u308a\u3064\u3076\u3059\nfunc getMaskImageFromTappedColor(_tColor:UIColor) -> UIImage? {\n    var _image = self\n    var _width = Int(_image.size.width)\n    var _height = Int(_image.size.height)\n    var _imageData = _image.imageData()\n    var imageBytes : UnsafeMutablePointer<Byte>;\n    let newByteLength = _width * _height * 4\n    imageBytes = UnsafeMutablePointer<Byte>.alloc(newByteLength)\n    var _cnt = 0;\n    for x in 0..<_width {\n        for y in 0..<_height {\n            var point = (x, y)\n            var color = UIImage.colorAtPoint(\n                point,\n                imageWidth: _width,\n                withData: _imageData\n            )\n            var i: Int = ((Int(_width) * Int(y)) + Int(x)) * 4\n            if(color == _tColor){\n                imageBytes[i] = Byte(255) // red\n                imageBytes[i+1] = Byte(255); // green\n                imageBytes[i+2] = Byte(255); // blue\n                imageBytes[i+3] = Byte(255); // alpha\n            }else{\n                imageBytes[i] = Byte(0) // red\n                imageBytes[i+1] = Byte(0); // green\n                imageBytes[i+2] = Byte(0); // blue\n                imageBytes[i+3] = Byte(255); // alpha\n            }\n        }\n    } \n    var provider = CGDataProviderCreateWithData(nil,imageBytes, UInt(newByteLength), nil)\n    var bitsPerComponent:UInt = 8\n    var bitsPerPixel:UInt = bitsPerComponent * 4\n    var bytesPerRow:UInt = UInt(4) * UInt(_width)\n    var colorSpaceRef = CGColorSpaceCreateDeviceRGB()\n    var bitmapInfo = CGBitmapInfo.ByteOrderDefault\n    var renderingIntent = kCGRenderingIntentDefault\n    var cgImage = CGImageCreate(UInt(_width), UInt(_height), bitsPerComponent, bitsPerPixel, bytesPerRow, colorSpaceRef, bitmapInfo, provider, nil, false, renderingIntent)\n    return UIImage(CGImage: cgImage)\n}\n\n\n3.\u4e8c\u5024\u5316\u3055\u308c\u305f\u753b\u50cf\u304b\u3089\u3001\u5143\u753b\u50cf\u3092\u900f\u904e\u3059\u308b\u95a2\u6570\u3092extension\u306b\u4f5c\u308b\nfunc getMaskedImage(maskImage:UIImage!) -> UIImage {        \n    let maskImageReference:CoreImage.CGImage? = maskImage?.CGImage\n    let mask = CGImageMaskCreate(CGImageGetWidth(maskImageReference),\n        CGImageGetHeight(maskImageReference),\n        CGImageGetBitsPerComponent(maskImageReference),\n        CGImageGetBitsPerPixel(maskImageReference),\n        CGImageGetBytesPerRow(maskImageReference),\n        CGImageGetDataProvider(maskImageReference),nil,false)\n    let maskedImageReference = CGImageCreateWithMask(self.CGImage, mask)\n    let maskedImage = UIImage(CGImage: maskedImageReference)\n    return maskedImage!\n}\n\n\n4.\u6700\u5f8c\u306bUIView\u306btoucheBegan\u30e1\u30bd\u30c3\u30c9\u3092\u52a0\u3048\u3066\u3001\u30bf\u30c3\u30c1\u3057\u305f\u5ea7\u6a19\u3092extension\u306b\u6e21\u3059\u51e6\u7406\u3092\u66f8\u304f\noverride func touchesBegan(touches: NSSet, withEvent event: UIEvent) {        \n    let t = touches.anyObject() as UITouch\n    //\u6307\u5b9a\u3057\u305f\u306eImageView\u306e\u4e2d\u3067\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\n    let point = t.locationInView(self.shipImageView)\n    //get color you touched\n    var color : UIColor! = self.shipImageView?.image!.getPixelColor(point)\n    var filteredImage = self.shipImageView?.image!.getFilteredImage(color)\n    self.shipImageView?.image = filteredImage\n}\n\n\n\u5b8c\u6210\n\u30bf\u30c3\u30c1\u3057\u305f\u5834\u6240\u306e\u8272\u3092\u80cc\u666f\u3068\u3057\u3066\u900f\u904e\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n\n\n\u304a\u3057\u307e\u3044\n\u4eca\u56de\u306f\u30bf\u30c3\u30c1\u3057\u305f\u5834\u6240\u306e\u8272\u3092\u629c\u304f\u4e8b\u3067\u80cc\u666f\u3092\u5207\u308a\u53d6\u308a\u307e\u3057\u305f\u304c\u3001\n\u30cb\u5024\u5316\u753b\u50cf\u306e\u4f5c\u308a\u65b9\u6b21\u7b2c\u3067\u3001\u8272\u3005\u306a\u5207\u308a\u629c\u304d\u65b9\u304c\u53ef\u80fd\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u753b\u50cf\u306e\u660e\u308b\u3055\u3068\u3044\u3046\u89b3\u70b9\u3067\u3001\u3057\u304d\u3044\u5024\u3092\u4f5c\u6210\u3057\u3001\u4e8c\u5024\u5316\u753b\u50cf\u3092\u4f5c\u308b\u4e8b\u3084\u3001\niOS\u306e\u9854\u8a8d\u8b58\u3067\u9854\u306e\u90e8\u5206\u3060\u3051\u4e38\u304f\u5207\u308a\u629c\u304f\u3088\u3046\u306a\u4e8c\u5024\u5316\u753b\u50cf\u3092\u4f5c\u308b\u306a\u3069\u306a\u3069\n\u8272\u3005\u3068\u697d\u3057\u3081\u305d\u3046\u3067\u3059!\n(github)\nhttps://github.com/oggata/PhotoChromakeyDemo\n#\u306f\u3058\u3081\u306b\n\n\u4eba\u7269\u306e\u80cc\u666f\u3092\u5207\u308a\u51fa\u3057\u3066\u5408\u6210\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u3001\nSF\u6620\u753b\u3067\u306f\u30af\u30ed\u30de\u30ad\u30fc\u5408\u6210\u3092\u4f7f\u3063\u3066\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\niOS\u306eCIFilter\u306b\u3082\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u304c\u306a\u3044\u304b\u63a2\u3057\u305f\u306e\u3067\u3059\u304c\u3001\n\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306b\u4f5c\u308c\u308b\u7bc4\u56f2\u3067\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30af\u30ed\u30de\u30ad\u30fc\u5408\u6210\u306ehowto\u306b\u306f\u8af8\u8aac\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u3042\u307e\u308a\u96e3\u3057\u3044\u4e8b\u306f\u629c\u304d\u3067\n\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30d4\u30af\u30bb\u30eb\u8d70\u67fb\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u8003\u3048\u3066\u9802\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u65b9\u6cd5\n![chromakey_howto.png](https://qiita-image-store.s3.amazonaws.com/0/43766/c1df1270-be93-d1e6-5920-3796659eb71e.png)\n\n>\u30bf\u30c3\u30c1\u3057\u305f\u5834\u6240\u306e<\u8272A>\u3092\u53d6\u5f97\n>\u2193\n><\u8272A> = \u767d / \u305d\u308c\u4ee5\u5916 = \u9ed2\u3000\u306e<\u4e8c\u5024\u5316\u753b\u50cfB>\u3092\u751f\u6210\n>\u2193\n>\u5143\u753b\u50cf\u3068<\u4e8c\u5024\u5316\u753b\u50cfB>\u3092\u5408\u6210\u3057\u3066\u3001\u5dee\u5206\u306e\u9ed2\u8272\u306e\u307f\u5207\u308a\u629c\u304d\u3092\u884c\u3046\n>\u2193\n>\u80cc\u666f\u753b\u50cf\u3068\u5408\u6210\n>\n\n#1:\u307e\u305a\u30bf\u30c3\u30c1\u3057\u305f\u5834\u6240\u306e\u8272(UIColor)\u3092\u53d6\u5f97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u63cf\u304d\u307e\u3059\u3002\nUIImage\u306eextension\u3068\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n><\u30dd\u30a4\u30f3\u30c8>\n>RGBA\u54041byte\u306a\u306e\u30671pixel\u306f4byte\n>(var pixelInfo: Int = ((Int(self.size.width) * Int(pos.y)) + Int(pos.x)) * 4)\n\n\textension UIImage {\n    \tfunc getPixelColor(pos: CGPoint) -> UIColor {        \n        \tvar pixelData = CGDataProviderCopyData(CGImageGetDataProvider(self.CGImage))\n        \tvar data: UnsafePointer<UInt8> = CFDataGetBytePtr(pixelData)\n        \tvar pixelInfo: Int = ((Int(self.size.width) * Int(pos.y)) + Int(pos.x)) * 4\n        \tvar r = CGFloat(data[pixelInfo]) / CGFloat(255.0)\n        \tvar g = CGFloat(data[pixelInfo+1]) / CGFloat(255.0)\n        \tvar b = CGFloat(data[pixelInfo+2]) / CGFloat(255.0)\n        \tvar a = CGFloat(data[pixelInfo+3]) / CGFloat(255.0)\n        \treturn UIColor(red: r, green: g, blue: b, alpha: a)\n    \t}\n\t}\n\n#2.\u6b21\u306b\u3001UIImage\u306e\u7e26\u6a2a\u30921pix\u305a\u3064\u5168\u8d70\u67fb\u3057\u3066\u3001\u5bfe\u8c61\u306e\u8272(1\u3067\u53d6\u5f97\u3057\u305fColor)\u3067\u3042\u308c\u3070\u767d\u3001\u9055\u3048\u3070\u9ed2\u306e\nUIImage\u3092\u8fd4\u3059\u3088\u3046\u306aextension\u3092\u66f8\u304d\u307e\u3059\u3002\n\n><\u30dd\u30a4\u30f3\u30c8>\n>\u753b\u50cf\u306e\u5e45\u3001\u9ad8\u3055\u306e\u5206\u3060\u3051for\u3067\u307e\u308f\u3057\u3066\u3001point = (x, y)\u306e\u8272\u3092\u53d6\u5f97\u3059\u308b\n>RGBA\u54041byte\u306a\u306e\u30671pixel\u306f4byte(let newByteLength = _width * _height * 4)\n>CGImageCreate(RGB\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u3001UIImage\u3092\u4f5c\u308b)\u3092\u4f7f\u3063\u3066\u3001UIImage\u3092\u8fd4\u3059\n\n![pixcel_image.png](https://qiita-image-store.s3.amazonaws.com/0/43766/c7e8fb03-41f2-f755-acd2-26aa0a96cc3a.png)\n\n\n\t//\u5165\u529b\u3057\u305f\u8272\u3068\u540c\u3058\u8272\u3092\u767d\u306b\u5857\u308a\u3064\u3076\u3059\n\tfunc getMaskImageFromTappedColor(_tColor:UIColor) -> UIImage? {\n\t    var _image = self\n\t    var _width = Int(_image.size.width)\n\t    var _height = Int(_image.size.height)\n\t    var _imageData = _image.imageData()\n\t    var imageBytes : UnsafeMutablePointer<Byte>;\n\t    let newByteLength = _width * _height * 4\n\t    imageBytes = UnsafeMutablePointer<Byte>.alloc(newByteLength)\n\t    var _cnt = 0;\n\t    for x in 0..<_width {\n\t        for y in 0..<_height {\n\t            var point = (x, y)\n\t            var color = UIImage.colorAtPoint(\n\t                point,\n\t                imageWidth: _width,\n\t                withData: _imageData\n\t            )\n\t            var i: Int = ((Int(_width) * Int(y)) + Int(x)) * 4\n\t            if(color == _tColor){\n\t                imageBytes[i] = Byte(255) // red\n\t                imageBytes[i+1] = Byte(255); // green\n\t                imageBytes[i+2] = Byte(255); // blue\n\t                imageBytes[i+3] = Byte(255); // alpha\n\t            }else{\n\t                imageBytes[i] = Byte(0) // red\n\t                imageBytes[i+1] = Byte(0); // green\n\t                imageBytes[i+2] = Byte(0); // blue\n\t                imageBytes[i+3] = Byte(255); // alpha\n\t            }\n\t        }\n\t    } \n\t    var provider = CGDataProviderCreateWithData(nil,imageBytes, UInt(newByteLength), nil)\n\t    var bitsPerComponent:UInt = 8\n\t    var bitsPerPixel:UInt = bitsPerComponent * 4\n\t    var bytesPerRow:UInt = UInt(4) * UInt(_width)\n\t    var colorSpaceRef = CGColorSpaceCreateDeviceRGB()\n\t    var bitmapInfo = CGBitmapInfo.ByteOrderDefault\n\t    var renderingIntent = kCGRenderingIntentDefault\n\t    var cgImage = CGImageCreate(UInt(_width), UInt(_height), bitsPerComponent, bitsPerPixel, bytesPerRow, colorSpaceRef, bitmapInfo, provider, nil, false, renderingIntent)\n\t    return UIImage(CGImage: cgImage)\n\t}\n\n#3.\u4e8c\u5024\u5316\u3055\u308c\u305f\u753b\u50cf\u304b\u3089\u3001\u5143\u753b\u50cf\u3092\u900f\u904e\u3059\u308b\u95a2\u6570\u3092extension\u306b\u4f5c\u308b\n\n\tfunc getMaskedImage(maskImage:UIImage!) -> UIImage {        \n\t    let maskImageReference:CoreImage.CGImage? = maskImage?.CGImage\n\t    let mask = CGImageMaskCreate(CGImageGetWidth(maskImageReference),\n\t        CGImageGetHeight(maskImageReference),\n\t        CGImageGetBitsPerComponent(maskImageReference),\n\t        CGImageGetBitsPerPixel(maskImageReference),\n\t        CGImageGetBytesPerRow(maskImageReference),\n\t        CGImageGetDataProvider(maskImageReference),nil,false)\n\t    let maskedImageReference = CGImageCreateWithMask(self.CGImage, mask)\n\t    let maskedImage = UIImage(CGImage: maskedImageReference)\n\t    return maskedImage!\n\t}\n\n#4.\u6700\u5f8c\u306bUIView\u306btoucheBegan\u30e1\u30bd\u30c3\u30c9\u3092\u52a0\u3048\u3066\u3001\u30bf\u30c3\u30c1\u3057\u305f\u5ea7\u6a19\u3092extension\u306b\u6e21\u3059\u51e6\u7406\u3092\u66f8\u304f\n\n\toverride func touchesBegan(touches: NSSet, withEvent event: UIEvent) {        \n\t    let t = touches.anyObject() as UITouch\n\t    //\u6307\u5b9a\u3057\u305f\u306eImageView\u306e\u4e2d\u3067\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\n\t    let point = t.locationInView(self.shipImageView)\n\t    //get color you touched\n\t    var color : UIColor! = self.shipImageView?.image!.getPixelColor(point)\n\t    var filteredImage = self.shipImageView?.image!.getFilteredImage(color)\n\t    self.shipImageView?.image = filteredImage\n\t}\n\n#\u5b8c\u6210\n\u30bf\u30c3\u30c1\u3057\u305f\u5834\u6240\u306e\u8272\u3092\u80cc\u666f\u3068\u3057\u3066\u900f\u904e\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n![chromakey_sample.png](https://qiita-image-store.s3.amazonaws.com/0/43766/f2626cc1-4904-b052-09ab-12661cce0106.png)\n\n\n#\u304a\u3057\u307e\u3044\n\u4eca\u56de\u306f\u30bf\u30c3\u30c1\u3057\u305f\u5834\u6240\u306e\u8272\u3092\u629c\u304f\u4e8b\u3067\u80cc\u666f\u3092\u5207\u308a\u53d6\u308a\u307e\u3057\u305f\u304c\u3001\n\u30cb\u5024\u5316\u753b\u50cf\u306e\u4f5c\u308a\u65b9\u6b21\u7b2c\u3067\u3001\u8272\u3005\u306a\u5207\u308a\u629c\u304d\u65b9\u304c\u53ef\u80fd\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u753b\u50cf\u306e\u660e\u308b\u3055\u3068\u3044\u3046\u89b3\u70b9\u3067\u3001\u3057\u304d\u3044\u5024\u3092\u4f5c\u6210\u3057\u3001\u4e8c\u5024\u5316\u753b\u50cf\u3092\u4f5c\u308b\u4e8b\u3084\u3001\niOS\u306e\u9854\u8a8d\u8b58\u3067\u9854\u306e\u90e8\u5206\u3060\u3051\u4e38\u304f\u5207\u308a\u629c\u304f\u3088\u3046\u306a\u4e8c\u5024\u5316\u753b\u50cf\u3092\u4f5c\u308b\u306a\u3069\u306a\u3069\n\u8272\u3005\u3068\u697d\u3057\u3081\u305d\u3046\u3067\u3059!\n\n(github)\nhttps://github.com/oggata/PhotoChromakeyDemo\n", "tags": ["Swift", "CoreGraphics", "iOS"]}