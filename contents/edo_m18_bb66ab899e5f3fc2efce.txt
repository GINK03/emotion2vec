{"context": " More than 1 year has passed since last update.    //for AOP\n    function _after(target, methodName, aspect) {\n\n        var method = target[methodName];\n\n        //overwrite the method.\n        target[methodName] = function () {\n\n            var args = Array.prototype.slice.call(arguments),\n                  result;\n\n            result = method.apply(this, arguments);\n            args.push(result);\n            args.push({\n                target: this,\n                methodName: methodName,\n                method: method\n            });\n\n            return aspect.apply(this, args);\n        };\n    }\n\n    function _apply(func, target, methodNames, aspect) {\n\n        if (Object.prototype.toString.call(methodNames) !== '[object Array]') {\n            methodNames = [methodNames];\n        }\n\n        var i = 0, mName;\n\n        for (; mName = methodNames[i]; i++) {\n            func(target, mName, aspect);\n        }\n    }\n\n    function after(target, methodNames, aspect) {\n\n        _apply(_after, target, methodNames, aspect);\n    }\n\n\n```javascript\n    //for AOP\n    function _after(target, methodName, aspect) {\n\n        var method = target[methodName];\n\n        //overwrite the method.\n        target[methodName] = function () {\n\n            var args = Array.prototype.slice.call(arguments),\n\t\t\t\t  result;\n            \n            result = method.apply(this, arguments);\n            args.push(result);\n            args.push({\n                target: this,\n                methodName: methodName,\n                method: method\n            });\n\n            return aspect.apply(this, args);\n        };\n    }\n\n    function _apply(func, target, methodNames, aspect) {\n    \n        if (Object.prototype.toString.call(methodNames) !== '[object Array]') {\n            methodNames = [methodNames];\n        }\n\n        var i = 0, mName;\n\n        for (; mName = methodNames[i]; i++) {\n            func(target, mName, aspect);\n        }\n    }\n\n    function after(target, methodNames, aspect) {\n    \n        _apply(_after, target, methodNames, aspect);\n    }\n```", "tags": ["\u30a2\u30b9\u30da\u30af\u30c8", "JavaScript", "AOP"]}