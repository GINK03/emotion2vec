{"context": " More than 1 year has passed since last update.RabbitMQ\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5834\u6240 \nhttp://www.rabbitmq.com/releases/rabbitmq-server/\n# wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.0/rabbitmq-server-3.6.0-1.noarch.rpm\n# rpm -ivh rabbitmq-server-3.6.0-1.noarch.rpm\n\n# systemctl start rabbitmq-server.service\n# rabbitmqctl status\n\nrabbitmq-management \u30d7\u30e9\u30b0\u30a4\u30f3\u306fHTTP\u30d9\u30fc\u30b9\u306eAPI\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b. \u4f7f\u7528\u3059\u308b\u524d\u306b\u6709\u52b9\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n# rabbitmq-plugins enable rabbitmq_management\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u3053\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3059\u308b\u3068\u3044\u3044\u3067\u3059\u3002\nRabbitMQ\u3067\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\uff08wang)\u3092\u4f5c\u6210\u3057\u3066\u3001\u30d1\u30b9\u30ef\u30fc\u30c9(123456)\u3092\u8a2d\u5b9a\u3059\u308b\n# rabbitmqctl add_user wang 123456\n\n\u30e6\u30fc\u30b6\u30fc\u4e00\u89a7\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\n# rabbitmqctl list_users\nListing users ...\nguest   [administrator]\nwang    []\n\nwang\u30e6\u30fc\u30b6\u30fc\u3092guest\u30e6\u30fc\u30b6\u30fc\u306e\u3088\u3046\u306badministrator\u306b\u3057\u305f\u3044\u3068\u304d\u306b\n\u3053\u308c\u3067wang\u30e6\u30fc\u30b6\u30fc\u304c\u7ba1\u7406\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u5165\u308c\u308b\u3060\u3051\u3001vhost\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u306f\u3067\u304d\u306a\u3044\u306f\u305a\u3067\u3059\u3002\n# rabbitmqctl set_user_tags wang administrator\nSetting tags for user \"wang\" to [administrator] ...\n# rabbitmqctl list_users\nListing users ...\nguest   [administrator]\nwang    [administrator]\n\n\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067 list_permissions\u547d\u4ee4\u3092\u306e\u51fa\u529b\u306fwang\u30e6\u30fc\u30b6\u30fc\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306e\u60c5\u5831\u304c\u306a\u3044\n# rabbitmqctl list_permissions -p /\nListing permissions in vhost \"/\" ...\nguest   .*      .*      .*\n\nwang\u30e6\u30fc\u30b6\u30fc\u304cvhost\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u5834\u5408\n# rabbitmqctl set_permissions -p / wang \".*\" \".*\" \".*\"\n# rabbitmqctl list_permissions -p /\nListing permissions in vhost \"/\" ...\nguest   .*      .*      .*\nwang    .*      .*      .*\n\n\u30de\u30cd\u30fc\u30b8\u30e1\u30f3\u30c8UI\u306b\u5165\u308b\u524d\u306b\u30c4\u30fc\u30eb\u5165\u308c\u306a\u3044\u3068\u5165\u308c\u306a\u3044\u3067\u3059\u3002\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5834\u5408\u306f\u3059\u3079\u3066\u306eRabbitmq\u306b\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n# rabbitmq-plugins enable rabbitmq_management\nThe following plugins have been enabled:\n  mochiweb\n  webmachine\n  rabbitmq_web_dispatch\n  amqp_client\n  rabbitmq_management_agent\n  rabbitmq_management\n\nIDC\u30af\u30e9\u30a6\u30c9\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067http://\u30d1\u30d6\u30ea\u30c3\u30afIP:15672/\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u524d\u306b\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\nErlang\u3068Rabbitmq\u3068\u9023\u643a\u3059\u308b\u305f\u3081\u306brabbitmq-erlang-client\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002github\u306erabbitmq-tutorials\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n$ git clone https://github.com/rabbitmq/rabbitmq-tutorials\n$ cd rabbitmq-tutorials/erlang\n\n$ wget http://www.rabbitmq.com/releases/rabbitmq-erlang-client/v3.6.0/rabbit_common-3.6.0.ez\n$ unzip rabbit_common-3.6.0.ez\n$ ln -s rabbit_common-3.6.0 rabbit_common\n\n$ wget http://www.rabbitmq.com/releases/rabbitmq-erlang-client/v3.6.0/amqp_client-3.6.0.ez\n$ unzip amqp_client-3.6.0.ez\n$ ln -s amqp_client-3.6.0 amqp_client\n\n$ ./send.erl\n [x] Sent 'Hello World!'\n$ ./receive.erl\n [*] Waiting for messages. To exit press CTRL+C\n [x] Received <<\"Hello World!\">>\n^C\n\n\nHow does a message reach a queue? \nMeet AMQP bindings and exchanges. Whenever you want to deliver a message to a queue,\nyou do it by sending it to an exchange. Then, based on certain rules, RabbitMQ will\ndecide to which queue it should deliver the message. Those rules are called routing\nkeys. A queue is said to be bound to an exchange by a routing key. \n\n\u53c2\u7167\u30ea\u30f3\u30af\n\nElixir\u306eRabbitMQ\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5b9f\u969b\u306e\u5229\u7528\u4f8b\n\u30ed\u30fc\u30ab\u30eb\u30db\u30b9\u30c8\u306bRabbitMQ\u304c\u5fc5\u8981\niex(1)> {:ok, conn} = AMQP.Connection.open\n{:ok, %AMQP.Connection{pid: #PID<0.124.0>}}\niex(2)> {:ok, chan} = AMQP.Channel.open(conn)\n{:ok,\n %AMQP.Channel{conn: %AMQP.Connection{pid: #PID<0.124.0>}, pid: #PID<0.136.0>}}\niex(3)> AMQP.Queue.declare chan, \"test_queue\"\n{:ok, %{consumer_count: 0, message_count: 0, queue: \"test_queue\"}}\niex(4)> AMQP.Exchange.declare chan, \"test_exchange\"\n:ok\niex(5)> AMQP.Queue.bind chan, \"test_queue\", \"test_exchange\"\n:ok\niex(6)> AMQP.Basic.publish chan, \"test_exchange\", \"\", \"Hello, World!\"\n:ok\niex(7)> {:ok, payload, meta} = AMQP.Basic.get chan, \"test_queue\"\n{:ok, \"Hello, World!\",\n %{app_id: :undefined, cluster_id: :undefined, content_encoding: :undefined,\n   content_type: :undefined, correlation_id: :undefined, delivery_tag: 1,\n   exchange: \"test_exchange\", expiration: :undefined, headers: :undefined,\n   message_count: 0, message_id: :undefined, persistent: false,\n   priority: :undefined, redelivered: false, reply_to: :undefined,\n   routing_key: \"\", timestamp: :undefined, type: :undefined,\n   user_id: :undefined}}\niex(8)> payload\n\"Hello, World!\"\niex(9)> AMQP.Queue.subscribe chan, \"test_queue\", fn(payload, _meta) -> IO.puts(\"Received: #{payload}\") end\n{:ok, \"amq.ctag-E0tW1BA2uOIHbkGvLBJlNA\"}\niex(10)> AMQP.Basic.publish chan, \"test_exchange\", \"\", \"Hello, World!\"\n:ok\nReceived: Hello, World!\n\n\n\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u3064\u3044\u3066\nBefore you consume from or publish to Rabbit, you first have to connect to it. Once the TCP connection is open (and you\u2019re authenticated), your app then creates\u3000an AMQP channel. This channel is a virtual connection inside the \u201creal\u201d TCP\nconnection, and it\u2019s over the channel that you issue AMQP commands. Every channel\u3000has a unique ID assigned to it. Whether you\u2019re publishing a message, subscribing to a queue, or receiving a message, it\u2019s all done over a channel.\n\nFair Dispatch\u306b\u3064\u3044\u3066\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fRabbitMQ\u306fn\u500b\u76ee\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092n\u500b\u76ee\u306econsumer\u306b\u6e21\u3059\u3060\u3051\u3001worker\u304b\u3089Acked\u3055\u308c\u3066\u3044\u306a\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u898b\u3066\u3044\u306a\u3044\u3002\u305d\u3046\u3044\u3046\u52d5\u304d\u304c\u3042\u308b\u304b\u3089\u3001\u4e00\u500b\u306eworker\u304c\u305a\u3063\u3068\u5fd9\u3057\u304f\u3066\u3001\u3082\u3046\u4e00\u500b\u306eworker\u304c\u305a\u3063\u3068\u6687\u3068\u3044\u3046\u72b6\u6cc1\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3092\u514b\u670d\u3059\u308b\u305f\u3081\u306bbasic.qos(prefetch_count=n)\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u610f\u5473\u5408\u3044\u3068\u3057\u3066\u306fn\u500b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304cAcked\u3055\u308c\u306a\u3044\u3068\u3001\u305d\u308c\u4ee5\u4e0a\u305d\u306eworker\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3089\u306a\u3044\u3002\n\nMessage durability\nFor a message that\u2019s in flight inside Rabbit to survive a crash, the message must\n\nHave its delivery mode option set to 2 (persistent)\nBe published into a durable exchange\n\nArrive in a durable queue\n\n\n\nfanout exchange\u306b\u3064\u3044\u3066\nThe fanout exchange is for ensuring that each queue bound to it gets a copy of the message, not each consumer. If you want each consumer to get a copy of the message, typically you would have each consumer create their own queue and then bind to the exchange.\n\nconsumer tag\u306b\u3064\u3044\u3066\nSpecifies the identifier for the consumer. The consumer tag is local to a channel. The consumer tag is valid only within the channel from which the  consumer was created. Client must not create a consumer in on channel and then use it in another.\n\nConsumer Cancel Notification\nWhen a channel is consuming from a queue, there are various reasons which could cause the consumption to stop. One of these is obviously if the client issues a basic.cancel on the same channel, which will cause the consumer to be cancelled and the server replies with a basic.cancel-ok. Other events, such as the queue being deleted, or in a clustered scenario, the node on which the queue is located failing, will cause the consumption to be cancelled, but the client channel will not be informed, which is frequently unhelpful.\n\nQueue\u306epassive\u30aa\u30d7\u30b7\u30e7\u30f3\nYou can set the passive option of queue.declare to true. With passive set to true, queue.declare will return successfully if the queue exists, and return an error without creating the queue if it doesn't exist.\n\nMessage redeliver\nIf message was not acknowledged and application fails, it will be redelivered automatically and redelivered property on envelope will be set to true (unless you consume them with no-ack = true flag).\n\nRabbitMQ\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5834\u6240 \nhttp://www.rabbitmq.com/releases/rabbitmq-server/\n\n```bash\n# wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.0/rabbitmq-server-3.6.0-1.noarch.rpm\n# rpm -ivh rabbitmq-server-3.6.0-1.noarch.rpm\n\n# systemctl start rabbitmq-server.service\n# rabbitmqctl status\n```\n\nrabbitmq-management \u30d7\u30e9\u30b0\u30a4\u30f3\u306fHTTP\u30d9\u30fc\u30b9\u306eAPI\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b. \u4f7f\u7528\u3059\u308b\u524d\u306b\u6709\u52b9\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n```bash\n# rabbitmq-plugins enable rabbitmq_management\n```\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f[\u3053\u306e\u30da\u30fc\u30b8](https://www.rabbitmq.com/clustering.html)\u3092\u53c2\u7167\u3059\u308b\u3068\u3044\u3044\u3067\u3059\u3002\n\nRabbitMQ\u3067\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\uff08wang)\u3092\u4f5c\u6210\u3057\u3066\u3001\u30d1\u30b9\u30ef\u30fc\u30c9(123456)\u3092\u8a2d\u5b9a\u3059\u308b\n\n```bash\n# rabbitmqctl add_user wang 123456\n```\n\n\u30e6\u30fc\u30b6\u30fc\u4e00\u89a7\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\n\n```bash\n# rabbitmqctl list_users\nListing users ...\nguest   [administrator]\nwang    []\n```\n\nwang\u30e6\u30fc\u30b6\u30fc\u3092guest\u30e6\u30fc\u30b6\u30fc\u306e\u3088\u3046\u306badministrator\u306b\u3057\u305f\u3044\u3068\u304d\u306b\n\n\u3053\u308c\u3067wang\u30e6\u30fc\u30b6\u30fc\u304c\u7ba1\u7406\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u5165\u308c\u308b\u3060\u3051\u3001vhost\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u306f\u3067\u304d\u306a\u3044\u306f\u305a\u3067\u3059\u3002\n\n```bash\n# rabbitmqctl set_user_tags wang administrator\nSetting tags for user \"wang\" to [administrator] ...\n# rabbitmqctl list_users\nListing users ...\nguest   [administrator]\nwang    [administrator]\n```\n\n\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067 list_permissions\u547d\u4ee4\u3092\u306e\u51fa\u529b\u306fwang\u30e6\u30fc\u30b6\u30fc\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306e\u60c5\u5831\u304c\u306a\u3044\n\n```bash\n# rabbitmqctl list_permissions -p /\nListing permissions in vhost \"/\" ...\nguest   .*      .*      .*\n```\n\nwang\u30e6\u30fc\u30b6\u30fc\u304cvhost\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u5834\u5408\n\n```bash\n# rabbitmqctl set_permissions -p / wang \".*\" \".*\" \".*\"\n# rabbitmqctl list_permissions -p /\nListing permissions in vhost \"/\" ...\nguest   .*      .*      .*\nwang    .*      .*      .*\n```\n\n\u30de\u30cd\u30fc\u30b8\u30e1\u30f3\u30c8UI\u306b\u5165\u308b\u524d\u306b\u30c4\u30fc\u30eb\u5165\u308c\u306a\u3044\u3068\u5165\u308c\u306a\u3044\u3067\u3059\u3002\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5834\u5408\u306f\u3059\u3079\u3066\u306eRabbitmq\u306b\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\n# rabbitmq-plugins enable rabbitmq_management\nThe following plugins have been enabled:\n  mochiweb\n  webmachine\n  rabbitmq_web_dispatch\n  amqp_client\n  rabbitmq_management_agent\n  rabbitmq_management\n```\n\nIDC\u30af\u30e9\u30a6\u30c9\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067`http://\u30d1\u30d6\u30ea\u30c3\u30afIP:15672/`\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u524d\u306b\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-05-29 11.57.28.png](https://qiita-image-store.s3.amazonaws.com/0/54698/35e74f09-c22e-b37a-5af0-ca55551a58ca.png)\n\n----\n\n\nErlang\u3068Rabbitmq\u3068\u9023\u643a\u3059\u308b\u305f\u3081\u306b[rabbitmq-erlang-client](http://www.rabbitmq.com/releases/rabbitmq-erlang-client/)\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002github\u306erabbitmq-tutorials\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```shell-session\n$ git clone https://github.com/rabbitmq/rabbitmq-tutorials\n$ cd rabbitmq-tutorials/erlang\n\n$ wget http://www.rabbitmq.com/releases/rabbitmq-erlang-client/v3.6.0/rabbit_common-3.6.0.ez\n$ unzip rabbit_common-3.6.0.ez\n$ ln -s rabbit_common-3.6.0 rabbit_common\n\n$ wget http://www.rabbitmq.com/releases/rabbitmq-erlang-client/v3.6.0/amqp_client-3.6.0.ez\n$ unzip amqp_client-3.6.0.ez\n$ ln -s amqp_client-3.6.0 amqp_client\n\n$ ./send.erl\n [x] Sent 'Hello World!'\n$ ./receive.erl\n [*] Waiting for messages. To exit press CTRL+C\n [x] Received <<\"Hello World!\">>\n^C\n```\n\n> How does a message reach a queue? \nMeet AMQP bindings and exchanges. Whenever you want to deliver a message to a queue,\nyou do it by sending it to an exchange. Then, based on certain rules, RabbitMQ will\ndecide to which queue it should deliver the message. Those rules are called routing\nkeys. A queue is said to be bound to an exchange by a routing key. \n\n[\u53c2\u7167\u30ea\u30f3\u30af](http://d.hatena.ne.jp/iwasakims/20130512/1368378919)\n\n\n---\n\n[Elixir\u306eRabbitMQ\u30af\u30e9\u30a4\u30a2\u30f3\u30c8](https://github.com/pma/amqp)\u306e\u5b9f\u969b\u306e\u5229\u7528\u4f8b\n\u30ed\u30fc\u30ab\u30eb\u30db\u30b9\u30c8\u306bRabbitMQ\u304c\u5fc5\u8981\n\n```\niex(1)> {:ok, conn} = AMQP.Connection.open\n{:ok, %AMQP.Connection{pid: #PID<0.124.0>}}\niex(2)> {:ok, chan} = AMQP.Channel.open(conn)\n{:ok,\n %AMQP.Channel{conn: %AMQP.Connection{pid: #PID<0.124.0>}, pid: #PID<0.136.0>}}\niex(3)> AMQP.Queue.declare chan, \"test_queue\"\n{:ok, %{consumer_count: 0, message_count: 0, queue: \"test_queue\"}}\niex(4)> AMQP.Exchange.declare chan, \"test_exchange\"\n:ok\niex(5)> AMQP.Queue.bind chan, \"test_queue\", \"test_exchange\"\n:ok\niex(6)> AMQP.Basic.publish chan, \"test_exchange\", \"\", \"Hello, World!\"\n:ok\niex(7)> {:ok, payload, meta} = AMQP.Basic.get chan, \"test_queue\"\n{:ok, \"Hello, World!\",\n %{app_id: :undefined, cluster_id: :undefined, content_encoding: :undefined,\n   content_type: :undefined, correlation_id: :undefined, delivery_tag: 1,\n   exchange: \"test_exchange\", expiration: :undefined, headers: :undefined,\n   message_count: 0, message_id: :undefined, persistent: false,\n   priority: :undefined, redelivered: false, reply_to: :undefined,\n   routing_key: \"\", timestamp: :undefined, type: :undefined,\n   user_id: :undefined}}\niex(8)> payload\n\"Hello, World!\"\niex(9)> AMQP.Queue.subscribe chan, \"test_queue\", fn(payload, _meta) -> IO.puts(\"Received: #{payload}\") end\n{:ok, \"amq.ctag-E0tW1BA2uOIHbkGvLBJlNA\"}\niex(10)> AMQP.Basic.publish chan, \"test_exchange\", \"\", \"Hello, World!\"\n:ok\nReceived: Hello, World!\n```\n\n---\n\n\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u3064\u3044\u3066\n\nBefore you consume from or publish to Rabbit, you first have to connect to it. **Once the TCP connection is open (and you\u2019re authenticated), your app then creates\u3000an AMQP channel.** This channel is a virtual connection inside the \u201creal\u201d TCP\nconnection, and it\u2019s over the channel that you issue AMQP commands. **Every channel\u3000has a unique ID assigned to it. Whether you\u2019re publishing a message, subscribing to a queue, or receiving a message, it\u2019s all done over a channel.**\n\n---\n\n**Fair Dispatch\u306b\u3064\u3044\u3066**\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fRabbitMQ\u306fn\u500b\u76ee\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092n\u500b\u76ee\u306econsumer\u306b\u6e21\u3059\u3060\u3051\u3001worker\u304b\u3089Acked\u3055\u308c\u3066\u3044\u306a\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u898b\u3066\u3044\u306a\u3044\u3002\u305d\u3046\u3044\u3046\u52d5\u304d\u304c\u3042\u308b\u304b\u3089\u3001\u4e00\u500b\u306eworker\u304c\u305a\u3063\u3068\u5fd9\u3057\u304f\u3066\u3001\u3082\u3046\u4e00\u500b\u306eworker\u304c\u305a\u3063\u3068\u6687\u3068\u3044\u3046\u72b6\u6cc1\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3092\u514b\u670d\u3059\u308b\u305f\u3081\u306b`basic.qos(prefetch_count=n)`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u610f\u5473\u5408\u3044\u3068\u3057\u3066\u306f`n`\u500b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304cAcked\u3055\u308c\u306a\u3044\u3068\u3001\u305d\u308c\u4ee5\u4e0a\u305d\u306eworker\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3089\u306a\u3044\u3002\n\n---\n\n**Message durability**\n\nFor a message that\u2019s in flight inside Rabbit to survive a crash, the message must\n\n* Have its **delivery mode** option set to 2 (persistent)\n* Be published into a **durable exchange**\n* Arrive in a **durable queue**\n\n---\n\n**fanout exchange\u306b\u3064\u3044\u3066**\n\nThe fanout exchange is for ensuring that **each queue bound to it gets a copy of the message**, not each consumer. If you want each consumer to get a copy of the message, typically you would have each consumer create their own queue and then bind to the exchange.\n\n---\n\n**consumer tag\u306b\u3064\u3044\u3066**\n\nSpecifies the identifier for the consumer. The consumer tag is local to a channel. The consumer tag is valid only within the channel from which the  consumer was created. Client must not create a consumer in on channel and then use it in another.\n\n---\n\n**Consumer Cancel Notification**\n\nWhen a channel is consuming from a queue, there are various reasons which could cause the consumption to stop. One of these is obviously if the client **issues a basic.cancel** on the same channel, which will cause the consumer to be cancelled and the **server replies with a basic.cancel-ok.** Other events, such as the **queue being deleted, or in a clustered scenario, the node on which the queue is located failing, will cause the consumption to be cancelled**, but the client channel will not be informed, which is frequently unhelpful.\n\n---\n\n**Queue\u306epassive\u30aa\u30d7\u30b7\u30e7\u30f3**\n\nYou can set the `passive` option of `queue.declare` to true. With `passive` set to true, `queue.declare` will return successfully if the queue exists, and return an error without creating the queue if it doesn't exist.\n\n---\n\n**Message redeliver**\nIf message was not acknowledged and application fails, it will be redelivered automatically and `redelivered` property on envelope will be set to `true` (unless you consume them with `no-ack` = `true` flag).\n", "tags": ["RabbitMQ"]}