{"context": " More than 1 year has passed since last update.\u30c7\u30a3\u30b9\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\uff1a\u4ee5\u4e0b\u3067\u7d39\u4ecb\u3059\u308b forEach \u306e\u5b9f\u88c5\u8005\u3067\u3059\u3002\uff082015/07/09\u8ffd\u8a18\uff09\nOpenCV \u3067\u753b\u7d20\u51e6\u7406\u3001\u5177\u4f53\u7684\u306b\u306f cv::Mat \u3092\u4f7f\u3063\u3066\u5404\u753b\u7d20\u3054\u3068\u306b\u51e6\u7406\u3092\u3059\u308b\u969b\u306e\u30e1\u30e2\u3067\u3059\u3002\n\ncv::Mat::forEach(\u95a2\u6570)\nOpenCV 3.0 \u3067\u3001\u753b\u50cf\u3084\u30dc\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u6271\u3046\u57fa\u672c\u578b\u3067\u3042\u308b cv::Mat \u304a\u3088\u3073 cv::Mat_<type> \u306b\u3001\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570\u3092\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u4e0a\u3067\u5b9f\u884c\u3059\u308b forEach \u30e1\u30bd\u30c3\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08\u82f1\u8a9e\uff09\nforEach \u30e1\u30bd\u30c3\u30c9\u306e\u5229\u70b9\u306f\u3001\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n\u95a2\u6570\u5185\u3067\u3001cv::Mat \u306e\u5404\u8981\u7d20\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\u5358\u306a\u308b\u95a2\u6570\u3092\u6e21\u3059\u3060\u3051\u306e\u304a\u624b\u8efd\u51e6\u7406\u3067\u3001\u30b7\u30f3\u30b0\u30eb\u30b3\u30a2\u30de\u30b7\u30f3\u3067\u3082\u5927\u62b5\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\u3068\u540c\u7b49\u304b\u3001\u305d\u308c\u3088\u308a\u65e9\u304f\u52d5\u4f5c\u3059\u308b\u3002\n\u30de\u30eb\u30c1\u30b3\u30a2\u30de\u30b7\u30f3\u3067\u3042\u308c\u3070\u3001\u81ea\u52d5\u7684\u306b\u4e26\u5217\u5316\u3055\u308c\u3001\u304b\u3064\u4f4e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3067\u3042\u308b\u3002\n\n\n\u4f7f\u7528\u4f8b\n\u6b21\u306e\u7d50\u679c\u3067\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u753b\u50cf\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n#include <opencv2/opencv.hpp>\n\ntypedef cv::Point3_<uint8_t> Pixel;\n\nint main(const int an, const char* const* const as)\n{\n    cv::Mat_<Pixel> square(256, 256);\n\n    square.forEach([](Pixel &p, const int position[2]) -> void {\n        // Pixel \u306e BGR(xyz) \u306e\u3046\u3061\u3001GR \u3092\u3001\u753b\u7d20\u306e\u4f4d\u7f6e\u306b\u5fdc\u3058\u305f\u5024\u3067\u5857\u308b\u3002\n        p.x = 0; // blue\n        p.y = position[0]; // green\n        p.z = position[1]; //red\n    });\n\n    cv::imshow(\"Gradation\", square);\n    cv::waitKey();\n}\n\n\n\n\u901f\u5ea6\u6bd4\u8f03\n\u4ee5\u4e0b\u306b\u3001\u6bd4\u8f03\u7528\u30b3\u30fc\u30c9\u3068\u3001\u95a2\u6570\u306e\u51e6\u7406\u304c\u8efd\u3044\u6642\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7d50\u679c\u3092\u5f35\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n#include <iostream>\n#include <opencv2/core.hpp>\n\ntypedef cv::Point3_<uint8_t> Pixel;\ntypedef cv::Mat_<Pixel> MatT;\nconst cv::Size SIZE_FULL_HD(1920, 1020);\n\nvoid ShowResult(const std::string name, const double time) {\n    std::cout << cv::format(\"%40s | %20.10f\", name.c_str(), time) << std::endl;\n    return;\n}\n\nvoid bench(const std::string func_name, void func(MatT&), const int time) {\n    MatT img(SIZE_FULL_HD);\n    img *= 0;\n\n    const uint64_t start = cv::getCPUTickCount();\n    for (int count = 0; count < time; ++count) {\n        func(img);\n    }\n    const uint64_t end = cv::getCPUTickCount();\n\n    const double time_elapsed = (end - start) / cv::getTickFrequency() / time;\n\n    ShowResult(func_name, time_elapsed);\n}\n\ninline void iterator_access(MatT& frame) {\n    auto it = frame.begin();\n\n    for (auto &p : frame) {\n        p.x = 255;\n    }\n}\n\ninline void pointer_access(MatT& frame) {\n    auto p = reinterpret_cast<Pixel*>(frame.data);\n    const auto e = p + frame.cols * frame.rows;\n    while (p < e)\n    {\n        p->x = 255;\n        ++p;\n    }\n}\n\ninline void forEach_access(MatT& frame) {\n    auto mat = cv::Mat_<Pixel>(frame);\n\n    mat.forEach([&](Pixel &p, const void*) -> void {\n        p.x = 255;\n    });\n}\n\n#define BENCH(func_name) \\\n    bench(#func_name, func_name, times);\n\nint main(const int an, const char* const* const as)\n{\n#ifdef _DEBUG\n    const int times = 1;\n#else\n    const int times = 1000;\n#endif\n    BENCH(iterator_access);\n    BENCH(pointer_access);\n    BENCH(forEach_access);\n}\n\n\n\u7d50\u679c\n                         iterator_access |         0.0050911927\n                          pointer_access |         0.0014229820\n                          forEach_access |         0.0003748687\n\n4\u7269\u7406\u30b3\u30a2\u30de\u30b7\u30f3\u3067\u3001pinter_access \u3068 forEach_access \u306e\u901f\u5ea6\u6bd4\u3092\u6c42\u3081\u308b\u3068\u30013.7959 \u500d\u306e\u9ad8\u901f\u5316\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\u95a2\u6570\u304c\u8efd\u91cf\u3067\u3082\u3001\u304a\u304a\u3088\u305d\u30b9\u30b1\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\uff08\uff1d\u4e26\u5217\u51e6\u7406\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u5272\u3068\u5c0f\u3055\u3044\u3067\u3059\uff09\n\u95a2\u6570\u5185\u306e\u51e6\u7406\u304c\u91cd\u304f\u306a\u308b\u3068\u3001\u305d\u3053\u3067\u5f8b\u901f\u3059\u308b\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u3068\u30dd\u30a4\u30f3\u30bf\u30a2\u30af\u30bb\u30b9\u306f\u6f38\u8fd1\u3057\u3066\u3044\u304d\u3001\u305d\u308c\u3089\u3068 forEach \u306e\u901f\u5ea6\u306e\u6bd4\u306f\u3001\u30b3\u30a2\u6570\u306b\u8fd1\u3065\u3044\u3066\u3044\u304d\u307e\u3059\u3002\uff083.7959 \u2192 4.0 \u306b\u8fd1\u3065\u304d\u307e\u3059\uff09\n\n\u5b9f\u65bd\u30de\u30b7\u30f3\u60c5\u5831\n\uff08Windowws \u4e0a\u3001dxdiag \u5b9f\u884c\u7d50\u679c\u306e\u4e00\u90e8\u3067\u3059\uff09\n------------------\nSystem Information\n------------------\nTime of this report: 6/21/2015, 19:28:54\n       Machine name: NEO\n   Operating System: Windows Server 2012 R2 Datacenter 64-bit (6.3, Build 9600) (9600.winblue_r9.150322-1500)\n           Language: Japanese (Regional Setting: Japanese)\nSystem Manufacturer: Gigabyte Technology Co., Ltd.\n       System Model: EX58-UD3R\n               BIOS: Award Modular BIOS v6.00PG\n          Processor: Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz (8 CPUs), ~2.7GHz\n             Memory: 20480MB RAM\nAvailable OS Memory: 20478MB RAM\n          Page File: 7164MB used, 23041MB available\n        Windows Dir: C:\\Windows\n    DirectX Version: DirectX 11\nDX Setup Parameters: Not found\n   User DPI Setting: Using System DPI\n System DPI Setting: 96 DPI (100 percent)\n    DWM DPI Scaling: Disabled\n     DxDiag Version: 6.03.9600.17415 64bit Unicode\n\n\n\u6ce8\u610f\u70b9\nforEach \u306b\u6e21\u3059\u95a2\u6570\u306e\u4e2d\u8eab\u306f\u3001\u81ea\u52d5\u7684\u306b\u4e26\u5217\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u95a2\u6570\u5185\u304b\u3089\u3001\u305d\u306e\u5916\u90e8\u306e\u7279\u5b9a\u5909\u6570\u306b\u66f8\u304d\u8fbc\u3080\u5834\u5408\u306b\u306f\u3001\u540c\u6642\u306b\u307b\u304b\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u3058\u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u5408\u8a08\u5024\u3092\u6c42\u3081\u308b\u51e6\u7406\uff08\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30b7\u30e7\u30f3\uff09\u306e\u5834\u5408\u306b\u306f\u3001cv::Accumulator \u3084\u305d\u306e\u5468\u8fba\u306e\u5c02\u7528\u95a2\u6570\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3068\u3002\n\u4ee5\u4e0b\u306f\u9055\u53cd\u30b3\u30fc\u30c9\u306e\u4f8b\u3067\u3059\u3002\nint main(const int an, const char* const* const as)\n{\n    cv::Mat_<Pixel> square(256, 256);\n    long x_total = 0;\n\n    square.forEach([&](Pixel &p, const int position[2]) -> void {\n        x_total += p.x;\n        // FIXME: \u9055\u53cd\u30b3\u30fc\u30c9\uff0e\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089 x_total \u3078\u306e\u540c\u6642\u66f8\u304d\u8fbc\u307f\uff0e\n    });\n}\n\n\u30c7\u30a3\u30b9\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\uff1a\u4ee5\u4e0b\u3067\u7d39\u4ecb\u3059\u308b forEach \u306e\u5b9f\u88c5\u8005\u3067\u3059\u3002\uff082015/07/09\u8ffd\u8a18\uff09\n\nOpenCV \u3067\u753b\u7d20\u51e6\u7406\u3001\u5177\u4f53\u7684\u306b\u306f cv::Mat \u3092\u4f7f\u3063\u3066\u5404\u753b\u7d20\u3054\u3068\u306b\u51e6\u7406\u3092\u3059\u308b\u969b\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n## cv::Mat::forEach(\u95a2\u6570)\n\nOpenCV 3.0 \u3067\u3001\u753b\u50cf\u3084\u30dc\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u6271\u3046\u57fa\u672c\u578b\u3067\u3042\u308b `cv::Mat` \u304a\u3088\u3073 `cv::Mat_<type>` \u306b\u3001\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570\u3092\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u4e0a\u3067\u5b9f\u884c\u3059\u308b forEach \u30e1\u30bd\u30c3\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08\u82f1\u8a9e\uff09](http://docs.opencv.org/3.0-rc1/d3/d63/classcv_1_1Mat.html#a952ef1a85d70a510240cb645a90efc0d)\n\n`forEach` \u30e1\u30bd\u30c3\u30c9\u306e\u5229\u70b9\u306f\u3001\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n* \u95a2\u6570\u5185\u3067\u3001cv::Mat \u306e\u5404\u8981\u7d20\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n* \u5358\u306a\u308b\u95a2\u6570\u3092\u6e21\u3059\u3060\u3051\u306e\u304a\u624b\u8efd\u51e6\u7406\u3067\u3001\u30b7\u30f3\u30b0\u30eb\u30b3\u30a2\u30de\u30b7\u30f3\u3067\u3082\u5927\u62b5\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\u3068\u540c\u7b49\u304b\u3001\u305d\u308c\u3088\u308a\u65e9\u304f\u52d5\u4f5c\u3059\u308b\u3002\n* \u30de\u30eb\u30c1\u30b3\u30a2\u30de\u30b7\u30f3\u3067\u3042\u308c\u3070\u3001\u81ea\u52d5\u7684\u306b\u4e26\u5217\u5316\u3055\u308c\u3001\u304b\u3064\u4f4e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3067\u3042\u308b\u3002\n\n## \u4f7f\u7528\u4f8b\n\n\u6b21\u306e\u7d50\u679c\u3067\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u753b\u50cf\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n```cpp\n#include <opencv2/opencv.hpp>\n\ntypedef cv::Point3_<uint8_t> Pixel;\n\nint main(const int an, const char* const* const as)\n{\n    cv::Mat_<Pixel> square(256, 256);\n\n    square.forEach([](Pixel &p, const int position[2]) -> void {\n        // Pixel \u306e BGR(xyz) \u306e\u3046\u3061\u3001GR \u3092\u3001\u753b\u7d20\u306e\u4f4d\u7f6e\u306b\u5fdc\u3058\u305f\u5024\u3067\u5857\u308b\u3002\n        p.x = 0; // blue\n        p.y = position[0]; // green\n        p.z = position[1]; //red\n    });\n\n    cv::imshow(\"Gradation\", square);\n    cv::waitKey();\n}\n```\n\n[![Gyazo](http://i.gyazo.com/24c5d0553d5e2058460dc98bd5491505.png)](http://gyazo.com/24c5d0553d5e2058460dc98bd5491505)\n\n## \u901f\u5ea6\u6bd4\u8f03\n\n\u4ee5\u4e0b\u306b\u3001\u6bd4\u8f03\u7528\u30b3\u30fc\u30c9\u3068\u3001\u95a2\u6570\u306e\u51e6\u7406\u304c\u8efd\u3044\u6642\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7d50\u679c\u3092\u5f35\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <opencv2/core.hpp>\n\ntypedef cv::Point3_<uint8_t> Pixel;\ntypedef cv::Mat_<Pixel> MatT;\nconst cv::Size SIZE_FULL_HD(1920, 1020);\n\nvoid ShowResult(const std::string name, const double time) {\n    std::cout << cv::format(\"%40s | %20.10f\", name.c_str(), time) << std::endl;\n    return;\n}\n\nvoid bench(const std::string func_name, void func(MatT&), const int time) {\n    MatT img(SIZE_FULL_HD);\n    img *= 0;\n\n    const uint64_t start = cv::getCPUTickCount();\n    for (int count = 0; count < time; ++count) {\n        func(img);\n    }\n    const uint64_t end = cv::getCPUTickCount();\n\n    const double time_elapsed = (end - start) / cv::getTickFrequency() / time;\n\n    ShowResult(func_name, time_elapsed);\n}\n\ninline void iterator_access(MatT& frame) {\n    auto it = frame.begin();\n\n    for (auto &p : frame) {\n        p.x = 255;\n    }\n}\n\ninline void pointer_access(MatT& frame) {\n    auto p = reinterpret_cast<Pixel*>(frame.data);\n    const auto e = p + frame.cols * frame.rows;\n    while (p < e)\n    {\n        p->x = 255;\n        ++p;\n    }\n}\n\ninline void forEach_access(MatT& frame) {\n    auto mat = cv::Mat_<Pixel>(frame);\n\n    mat.forEach([&](Pixel &p, const void*) -> void {\n        p.x = 255;\n    });\n}\n\n#define BENCH(func_name) \\\n    bench(#func_name, func_name, times);\n\nint main(const int an, const char* const* const as)\n{\n#ifdef _DEBUG\n    const int times = 1;\n#else\n    const int times = 1000;\n#endif\n    BENCH(iterator_access);\n    BENCH(pointer_access);\n    BENCH(forEach_access);\n}\n```\n\n### \u7d50\u679c\n\n```\n                         iterator_access |         0.0050911927\n                          pointer_access |         0.0014229820\n                          forEach_access |         0.0003748687\n```\n\n4\u7269\u7406\u30b3\u30a2\u30de\u30b7\u30f3\u3067\u3001pinter_access \u3068 forEach_access \u306e\u901f\u5ea6\u6bd4\u3092\u6c42\u3081\u308b\u3068\u30013.7959 \u500d\u306e\u9ad8\u901f\u5316\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\u95a2\u6570\u304c\u8efd\u91cf\u3067\u3082\u3001\u304a\u304a\u3088\u305d\u30b9\u30b1\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\uff08\uff1d\u4e26\u5217\u51e6\u7406\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u5272\u3068\u5c0f\u3055\u3044\u3067\u3059\uff09\n\n\u95a2\u6570\u5185\u306e\u51e6\u7406\u304c\u91cd\u304f\u306a\u308b\u3068\u3001\u305d\u3053\u3067\u5f8b\u901f\u3059\u308b\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u3068\u30dd\u30a4\u30f3\u30bf\u30a2\u30af\u30bb\u30b9\u306f\u6f38\u8fd1\u3057\u3066\u3044\u304d\u3001\u305d\u308c\u3089\u3068 forEach \u306e\u901f\u5ea6\u306e\u6bd4\u306f\u3001\u30b3\u30a2\u6570\u306b\u8fd1\u3065\u3044\u3066\u3044\u304d\u307e\u3059\u3002\uff083.7959 \u2192 4.0 \u306b\u8fd1\u3065\u304d\u307e\u3059\uff09\n\n### \u5b9f\u65bd\u30de\u30b7\u30f3\u60c5\u5831\n\uff08Windowws \u4e0a\u3001dxdiag \u5b9f\u884c\u7d50\u679c\u306e\u4e00\u90e8\u3067\u3059\uff09\n\n```\n------------------\nSystem Information\n------------------\nTime of this report: 6/21/2015, 19:28:54\n       Machine name: NEO\n   Operating System: Windows Server 2012 R2 Datacenter 64-bit (6.3, Build 9600) (9600.winblue_r9.150322-1500)\n           Language: Japanese (Regional Setting: Japanese)\nSystem Manufacturer: Gigabyte Technology Co., Ltd.\n       System Model: EX58-UD3R\n               BIOS: Award Modular BIOS v6.00PG\n          Processor: Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz (8 CPUs), ~2.7GHz\n             Memory: 20480MB RAM\nAvailable OS Memory: 20478MB RAM\n          Page File: 7164MB used, 23041MB available\n        Windows Dir: C:\\Windows\n    DirectX Version: DirectX 11\nDX Setup Parameters: Not found\n   User DPI Setting: Using System DPI\n System DPI Setting: 96 DPI (100 percent)\n    DWM DPI Scaling: Disabled\n     DxDiag Version: 6.03.9600.17415 64bit Unicode\n```\n\n## \u6ce8\u610f\u70b9\nforEach \u306b\u6e21\u3059\u95a2\u6570\u306e\u4e2d\u8eab\u306f\u3001\u81ea\u52d5\u7684\u306b\u4e26\u5217\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u3001\u95a2\u6570\u5185\u304b\u3089\u3001\u305d\u306e\u5916\u90e8\u306e\u7279\u5b9a\u5909\u6570\u306b\u66f8\u304d\u8fbc\u3080\u5834\u5408\u306b\u306f\u3001\u540c\u6642\u306b\u307b\u304b\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u3058\u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5408\u8a08\u5024\u3092\u6c42\u3081\u308b\u51e6\u7406\uff08\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30b7\u30e7\u30f3\uff09\u306e\u5834\u5408\u306b\u306f\u3001`cv::Accumulator` \u3084\u305d\u306e\u5468\u8fba\u306e\u5c02\u7528\u95a2\u6570\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3068\u3002\n\n\u4ee5\u4e0b\u306f\u9055\u53cd\u30b3\u30fc\u30c9\u306e\u4f8b\u3067\u3059\u3002\n\n```cpp\nint main(const int an, const char* const* const as)\n{\n    cv::Mat_<Pixel> square(256, 256);\n    long x_total = 0;\n\n    square.forEach([&](Pixel &p, const int position[2]) -> void {\n        x_total += p.x;\n        // FIXME: \u9055\u53cd\u30b3\u30fc\u30c9\uff0e\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089 x_total \u3078\u306e\u540c\u6642\u66f8\u304d\u8fbc\u307f\uff0e\n    });\n}\n```\n", "tags": ["\u753b\u50cf\u51e6\u7406", "OpenCV3.0"]}