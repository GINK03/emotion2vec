{"context": " More than 1 year has passed since last update.\u524d\u56de\u306e\u7d9a\u304d\u3002\n\u524d\u56de\u306f\u3001\u95a2\u6570\u306e\u5f15\u6570\u306e\u578b\u306fint\u3067\u56fa\u5b9a\u3057\u3066\u3044\u305f\u304c\u3001\u3053\u308c\u3082\u53ef\u5909\u306b\u3057\u305f\u3044\u3002\n\u305f\u3060\u3001\u7121\u5c3d\u8535\u306b\u5bfe\u5fdc\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305aint\u3068double\u3092\u81ea\u52d5\u5224\u5225\u3057\u3066\u3001double\u306e\u6642\u306f0.5\u3092\u52a0\u3048\u305f\u3082\u306e\u3092\u5f15\u6570\u306b\u3059\u308b\u3002\n#include <iostream>\n#include <type_traits>\n#include <tuple>\n\ndouble func3(double n1, int n2, int n3) {\n    std::cout << n1 << '+' << n2 << '+' << n3 << '=' << std::flush;\n    return n1+n2+n3;\n}\ndouble func2(int n1, double n2) {\n    std::cout << n1 << '+' << n2 << '=' << std::flush;\n    return n1+n2;\n}\ndouble func1(double n1) {\n    std::cout << n1 << '=' << std::flush;\n    return n1;\n}\ndouble func0(void) {\n    return 0;\n}\n\n\ntemplate<typename T> constexpr T getarg(int);\ntemplate<> constexpr double getarg<double>(int n) { return n+0.5; }\ntemplate<> constexpr int getarg<int>(int n) { return n; }\n\n\ntemplate<int N, typename Types, typename Func, typename ...Args>\nauto add_steparg(typename std::enable_if<!N>::type*, Func func, Args... args) {\n    return func(args...);\n}\n\ntemplate<int N, typename Types, typename Func, typename ...Args>\nauto add_steparg(typename std::enable_if<N>::type*, Func func, Args... args) {\n    typedef typename std::tuple_element<N-1, Types>::type T;\n    constexpr auto arg = getarg<T>(N);\n    return add_steparg<N-1, Types>(0, func, arg, args...);\n}\n\ntemplate<typename Ret, typename ...Args>\nRet stepargs(Ret (*func)(Args...)) {\n    return add_steparg<sizeof...(Args), std::tuple<Args...>>(0, func);\n}\n\nint main(void){\n    std::cout << stepargs(func3) << std::endl;\n    std::cout << stepargs(func2) << std::endl;\n    std::cout << stepargs(func1) << std::endl;\n    std::cout << stepargs(func0) << std::endl;\n    return 0;\n}\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3001\n1.5+2+3=6.5\n1+2.5=3.5\n1.5=1.5\n0\n\n\n\nstd::tuple<Args...>\u3092\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570Types\u3092\u4f7f\u3063\u3066\u3001\u95a2\u6570\u5f15\u6570\u306e\u578b\u3092\u4f1d\u642c\u3055\u305b\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u3046\u3002\n\nN\u756a\u76ee\u306e\u30bf\u30d7\u30eb\u306e\u578b\u306f\u3001typename std::tuple_element<N, Types>::type\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u53d6\u5f97\u3067\u304d\u308b\u3002\n\u95a2\u6570\u306e\u5f15\u6570\u306e\u578b\u304c\u53d6\u5f97\u3067\u304d\u308c\u3070\u3001\u305d\u308c\u306b\u5fdc\u3058\u305f\u5909\u63db\u95a2\u6570template<T> T getarg(int)\u3092\u547c\u3076\u3002\n\u547c\u3070\u308c\u308b\u5909\u63db\u95a2\u6570\u3068\u3001\u305d\u306e\u5f15\u6570\u3001\u3055\u3089\u306b\u8a08\u7b97\u7d50\u679c\u306f\u5168\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001constexpr\u3092\u4ed8\u3051\u3066\u304a\u304f\u3002\n\u3053\u308c\u3067\u5b9f\u884c\u6642\u306b\u306f\u5b9a\u6570\u5f15\u6570\u306b\u3088\u308b\u95a2\u6570\u547c\u3073\u51fa\u3057\u4ee5\u5916\u3059\u308b\u3053\u3068\u306f\u7121\u304f\u306a\u308b\u3002\n\n<type_traits>\u306eis_xxxx\u7cfb\u95a2\u6570\u3092\u99c6\u4f7f\u3059\u308c\u3070\u3001\u3082\u3063\u3068\u3044\u308d\u3044\u308d\u3067\u304d\u305d\u3046\u3002\n\n\u30bf\u30d7\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306e\u304c\u5f8c\u308d\u304b\u3089\u306a\u306e\u304c\u6c17\u6301\u3061\u60aa\u3051\u308c\u3070\u3001\ntemplate<int N, typename Types, typename Func, typename ...Args>\nauto add_steparg(typename std::enable_if<N>::type*, Func func, Args... args) {\n    constexpr auto M = std::tuple_size<Types>::value - N;\n    typedef typename std::tuple_element<M, Types>::type T;\n    constexpr auto arg = getarg<T>(M+1);\n    return add_steparg<N-1, Types>(0, func, args..., arg);\n}\n\n\u4f59\u8ac7:\u4e0b\u307f\u305f\u3044\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u305f\u3089\u3088\u304b\u3063\u305f\u306e\u306b\u3001\u3068\u601d\u3063\u305f\u3002\nusing T = tuple<C1, C2, C3, C4>;\nstatic_assert<is_same<T::first_type, C1>>();\nstatic_assert<is_same<T::last_type, C4>>();\nstatic_assert<is_same<T::tuple_after_first, tuple<C2, C3, C4>>>();\nstatic_assert<is_same<T::tuple_before_last, tuple<C1, C2, C3>>>();\n\n\u304a\u3057\u307e\u3044\u3002\n[\u524d\u56de](http://qiita.com/s-wakaba/items/bef3fae03e1294725fea)\u306e\u7d9a\u304d\u3002\n\u524d\u56de\u306f\u3001\u95a2\u6570\u306e\u5f15\u6570\u306e\u578b\u306f`int`\u3067\u56fa\u5b9a\u3057\u3066\u3044\u305f\u304c\u3001\u3053\u308c\u3082\u53ef\u5909\u306b\u3057\u305f\u3044\u3002\n\n\u305f\u3060\u3001\u7121\u5c3d\u8535\u306b\u5bfe\u5fdc\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a`int`\u3068`double`\u3092\u81ea\u52d5\u5224\u5225\u3057\u3066\u3001`double`\u306e\u6642\u306f`0.5`\u3092\u52a0\u3048\u305f\u3082\u306e\u3092\u5f15\u6570\u306b\u3059\u308b\u3002\n\n```cpp\n#include <iostream>\n#include <type_traits>\n#include <tuple>\n\ndouble func3(double n1, int n2, int n3) {\n    std::cout << n1 << '+' << n2 << '+' << n3 << '=' << std::flush;\n    return n1+n2+n3;\n}\ndouble func2(int n1, double n2) {\n    std::cout << n1 << '+' << n2 << '=' << std::flush;\n    return n1+n2;\n}\ndouble func1(double n1) {\n    std::cout << n1 << '=' << std::flush;\n    return n1;\n}\ndouble func0(void) {\n    return 0;\n}\n\n\ntemplate<typename T> constexpr T getarg(int);\ntemplate<> constexpr double getarg<double>(int n) { return n+0.5; }\ntemplate<> constexpr int getarg<int>(int n) { return n; }\n\n\ntemplate<int N, typename Types, typename Func, typename ...Args>\nauto add_steparg(typename std::enable_if<!N>::type*, Func func, Args... args) {\n    return func(args...);\n}\n\ntemplate<int N, typename Types, typename Func, typename ...Args>\nauto add_steparg(typename std::enable_if<N>::type*, Func func, Args... args) {\n    typedef typename std::tuple_element<N-1, Types>::type T;\n    constexpr auto arg = getarg<T>(N);\n    return add_steparg<N-1, Types>(0, func, arg, args...);\n}\n\ntemplate<typename Ret, typename ...Args>\nRet stepargs(Ret (*func)(Args...)) {\n    return add_steparg<sizeof...(Args), std::tuple<Args...>>(0, func);\n}\n\nint main(void){\n    std::cout << stepargs(func3) << std::endl;\n    std::cout << stepargs(func2) << std::endl;\n    std::cout << stepargs(func1) << std::endl;\n    std::cout << stepargs(func0) << std::endl;\n    return 0;\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3001\n\n```text\n1.5+2+3=6.5\n1+2.5=3.5\n1.5=1.5\n0\n```\n\n* `std::tuple<Args...>`\u3092\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570`Types`\u3092\u4f7f\u3063\u3066\u3001\u95a2\u6570\u5f15\u6570\u306e\u578b\u3092\u4f1d\u642c\u3055\u305b\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u3046\u3002\n* `N`\u756a\u76ee\u306e\u30bf\u30d7\u30eb\u306e\u578b\u306f\u3001`typename std::tuple_element<N, Types>::type`\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u53d6\u5f97\u3067\u304d\u308b\u3002\n* \u95a2\u6570\u306e\u5f15\u6570\u306e\u578b\u304c\u53d6\u5f97\u3067\u304d\u308c\u3070\u3001\u305d\u308c\u306b\u5fdc\u3058\u305f\u5909\u63db\u95a2\u6570`template<T> T getarg(int)`\u3092\u547c\u3076\u3002\n* \u547c\u3070\u308c\u308b\u5909\u63db\u95a2\u6570\u3068\u3001\u305d\u306e\u5f15\u6570\u3001\u3055\u3089\u306b\u8a08\u7b97\u7d50\u679c\u306f\u5168\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001`constexpr`\u3092\u4ed8\u3051\u3066\u304a\u304f\u3002\n* \u3053\u308c\u3067\u5b9f\u884c\u6642\u306b\u306f\u5b9a\u6570\u5f15\u6570\u306b\u3088\u308b\u95a2\u6570\u547c\u3073\u51fa\u3057\u4ee5\u5916\u3059\u308b\u3053\u3068\u306f\u7121\u304f\u306a\u308b\u3002\n* `<type_traits>`\u306e`is_xxxx`\u7cfb\u95a2\u6570\u3092\u99c6\u4f7f\u3059\u308c\u3070\u3001\u3082\u3063\u3068\u3044\u308d\u3044\u308d\u3067\u304d\u305d\u3046\u3002\n\n\u30bf\u30d7\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306e\u304c\u5f8c\u308d\u304b\u3089\u306a\u306e\u304c\u6c17\u6301\u3061\u60aa\u3051\u308c\u3070\u3001\n\n```cpp\ntemplate<int N, typename Types, typename Func, typename ...Args>\nauto add_steparg(typename std::enable_if<N>::type*, Func func, Args... args) {\n    constexpr auto M = std::tuple_size<Types>::value - N;\n    typedef typename std::tuple_element<M, Types>::type T;\n    constexpr auto arg = getarg<T>(M+1);\n    return add_steparg<N-1, Types>(0, func, args..., arg);\n}\n```\n\n\u4f59\u8ac7:\u4e0b\u307f\u305f\u3044\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u305f\u3089\u3088\u304b\u3063\u305f\u306e\u306b\u3001\u3068\u601d\u3063\u305f\u3002\n\n```cpp\nusing T = tuple<C1, C2, C3, C4>;\nstatic_assert<is_same<T::first_type, C1>>();\nstatic_assert<is_same<T::last_type, C4>>();\nstatic_assert<is_same<T::tuple_after_first, tuple<C2, C3, C4>>>();\nstatic_assert<is_same<T::tuple_before_last, tuple<C1, C2, C3>>>();\n```\n\n\u304a\u3057\u307e\u3044\u3002\n", "tags": ["C++", "C++11"]}