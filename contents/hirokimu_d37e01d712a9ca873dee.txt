{"context": "dlib\u306f\u3001OpenCV\u306e\u3088\u3046\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u7cfb\u306e\u6a5f\u80fd\u3084\u6a5f\u68b0\u5b66\u7fd2\u306e\u30c4\u30fc\u30eb\u306a\u3069\u3092\u542b\u3080\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002dlib\u3092\u4f7f\u3063\u3066\u3001iOS\u4e0a\u3067\u9854\u306e\u8f2a\u90ed\u691c\u51fa\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5019\u88dc\u9818\u57df\u62bd\u51fa\u3092\u30c6\u30b9\u30c8\u3057\u305f\u306e\u3067\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u307e\u3059\u3002\n\ndlib\u306e\u7279\u5fb4\u306b\u3064\u3044\u3066\u306f\u516c\u5f0f\u30b5\u30a4\u30c8\u306e\u5192\u982d\u3067\u6b21\u306e\u3088\u3046\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nDlib is a modern C++ toolkit containing machine learning algorithms and tools for creating complex software in C++ to solve real world problems. It is used in both industry and academia in a wide range of domains including robotics, embedded devices, mobile phones, and large high performance computing environments. Dlib's open source licensing allows you to use it in any application, free of charge.\n\n\u7b46\u8005\u74b0\u5883\u306fXcode 8.1 + iPhone 7\u3067\u3001\u30c6\u30b9\u30c8\u30a2\u30d7\u30ea\u306fSwift\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306bObjective C++\u3092\u6df7\u5728\u3055\u305b\u308b\u304b\u305f\u3061\u3067\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002\u4e00\u5fdc\u3001\u4e0b\u8a18\u8a18\u4e8b\u306e\u7d9a\u304d\u3068\u3044\u3048\u3070\u7d9a\u304d\u3067\u3059\u3002\nTensorFlow\u3092iOS\u30a2\u30d7\u30ea\uff08Swift\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff09\u306b\u5b9f\u88c5\u3059\u308b\n\u958b\u767a\u624b\u9806\n1. dlib\u3092iOS\u7528\u306b\u30d3\u30eb\u30c9\u3059\u308b\n2. iOS\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u306e\u7d44\u307f\u8fbc\u307f\n3. Objective C++\u3067\u306e\u958b\u767a\n\n1. dlib\u3092iOS\u7528\u306b\u30d3\u30eb\u30c9\u3059\u308b\niOS\u3067dlib\u3092\u4f7f\u3046\u306b\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u3066\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305a\u3001Stack Overflow\u306e\u3053\u3061\u3089\u306e\u6295\u7a3f\u306e\u624b\u9806\u3092\u884c\u3044\u307e\u3059\u3002\ncmake\u306b\u3088\u308b\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068\u3001dlib-master/examples/build/dlib_build \u306bXcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff08dlib.xcodeproj\uff09\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306edlib\u30bf\u30fc\u30b2\u30c3\u30c8\u306f\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3084\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u8a2d\u5b9a\u304cMac OS\u7528\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001Build Settings\u306e\u5404\u6240\u3092\u81ea\u5206\u306e\u671b\u3080iOS\u7528\u306e\u8a2d\u5b9a\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u5909\u66f4\u3057\u3066\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d3\u30eb\u30c9\u3092\u884c\u3046\u3068\u3001dlib-master/examples/build/dlib_build/Release-iphoneos\uff08\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u306e\u5834\u5408\uff09\u306blibdlib.a \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n2. iOS\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u306e\u7d44\u307f\u8fbc\u307f\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8ffd\u52a0\nlibdlib.a \u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u3001Build Settings\u306eHeader Search Path\u306b\u306fdlib\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e0a\u306e\u968e\u5c64\u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u4f8b\u3048\u3070dlib-master/dlib \u3067\u306f\u306a\u304f dlib-master \u3092\u6307\u5b9a\uff09\u3002\n\u307e\u305f\u3001Processor Macros\u306b\u6b21\u306e\u30de\u30af\u30ed\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nDLIB_USE_LAPACK\nDLIB_USE_BLAS\nDLIB_NO_GUI_SUPPORT\nDLIB_JPEG_SUPPORT\nNDEBUG\n\n\nOpenCV\u306e\u8ffd\u52a0\ndlib\u306b\u306fOpenCV\u9023\u643a\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001cv::Mat\u306a\u3069\u3092\u6271\u3046\u5834\u9762\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u3001OpenCV\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002CocoaPods\u3067\u8ffd\u52a0\u3059\u308c\u3070\u5927\u4e08\u592b\u3067\u3059\u3002\n\n3. Objective C++\u3067\u306e\u958b\u767a\n\nOpenCV\u7528\u306e\u30ab\u30c6\u30b4\u30ea\u306e\u8ffd\u52a0\nUIImage\u304b\u3089cv::Mat\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nUIImage+OpenCV.mm\n#import \"UIImage+OpenCV.h\"\n\n@implementation UIImage (OpenCV)\n\n- (cv::Mat)createCVMat {\n\n    CGColorSpaceRef colorSpace = CGImageGetColorSpace(self.CGImage);\n    CGFloat cols = self.size.width * self.scale;\n    CGFloat rows = self.size.height * self.scale;\n\n    cv::Mat cvMat(rows, cols, CV_8UC4);\n\n    CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,\n                                                    cols,\n                                                    rows,\n                                                    8,\n                                                    cvMat.step[0],\n                                                    colorSpace,\n                                                    kCGImageAlphaNoneSkipLast |\n                                                    kCGBitmapByteOrderDefault);\n\n    CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), self.CGImage);\n    CGContextRelease(contextRef);\n\n    return cvMat;\n}\n\n\n\n\u9854\u306e\u8f2a\u90ed\u691c\u51fa\ndlib\u306eface detector\u3092\u4f7f\u3046\u3068\u3001\u9854\u306e\u9818\u57df\u3060\u3051\u3067\u306a\u304f\u8f2a\u90ed\u3084\u30d1\u30fc\u30c4\u306e\u4f4d\u7f6e\u307e\u3067\u691c\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u307e\u305a\u3001\u5224\u5b9a\u306b\u4f7f\u3046\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f frontal_face_detector.h \u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u306e\u3042\u308b\u4e0b\u8a18URL\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u53ef\u80fd\u3067\u3059\u3002\u5165\u624b\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\nhttp://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2\n\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u691c\u51fa\u3092\u884c\u3044\u307e\u3059\u3002detectFaces\u30e1\u30bd\u30c3\u30c9\u306bUIImage\u3092\u6e21\u3059\u3068\u3001NSValue\u306e\u914d\u5217\u3067\u5ea7\u6a19\u30c7\u30fc\u30bf\u304c\u8fd4\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3092\u63cf\u753b\u3057\u305f\u306e\u304c\u8a18\u4e8b\u5192\u982d\u306e\u5de6\u5074\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u3059\u3002\n\nDLWrapper.mm\n#import <opencv2/opencv.hpp>\n#import \"DLWrapper.h\"\n#import \"UIImage+OpenCV.h\"\n#import \"dlib/opencv.h\"\n#import \"dlib/image_processing/frontal_face_detector.h\"\n#import \"dlib/image_processing.h\"\n#import \"dlib/image_transforms/segment_image.h\"\n#import \"dlib/image_transforms/segment_image_abstract.h\"\n#import \"dlib/matrix/matrix_exp_abstract.h\"\n\nusing namespace std;\n\n@implementation DLWrapper {\n    dlib::frontal_face_detector detector;\n    dlib::shape_predictor predictor;\n}\n\nstatic DLWrapper *_instance = nil;\n\n+ (instancetype)instance {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        _instance = [[DLWrapper alloc] init];\n    });\n    return _instance;\n}\n\n- (id)init {\n    if (!(self = [super init])) return nil;\n\n    detector = dlib::get_frontal_face_detector();    \n    NSString *path = [[NSBundle mainBundle] pathForResource:@\"shape_predictor_68_face_landmarks\" ofType:@\"dat\"];\n    const char *cpath = [path UTF8String];\n    dlib::deserialize(cpath) >> predictor;\n\n    return self;\n}\n\n- (nonnull NSArray<NSArray<NSValue *> *> *)detectFaces:(nonnull UIImage *)image {\n\n    CGFloat w = image.size.width * image.scale;\n    CGFloat h = image.size.height * image.scale;\n\n    cv::Mat rgbaMat = [image createCVMat];\n    cv::Mat rgbMat = cv::Mat(w, h, CV_8UC3);\n    cv::cvtColor(rgbaMat, rgbMat, CV_RGBA2RGB, 3);\n\n    dlib::cv_image<dlib::bgr_pixel> cvImage(rgbMat);\n\n    vector<dlib::rectangle> faces = detector(cvImage);\n\n    NSMutableArray<NSArray *> *allFaces = [NSMutableArray array];\n\n    for (auto face: faces) {\n\n        NSMutableArray<NSValue *> *values = [NSMutableArray array];\n\n        // facial rect\n        auto shape = predictor(cvImage, face);\n        auto r = shape.get_rect();\n        [values addObject:[NSValue valueWithCGRect:CGRectMake(r.left(), r.top(), r.width(), r.height())]];\n\n        // facial shape\n        for (auto i = 0; i < shape.num_parts(); i++) {\n            auto r = shape.part(i);\n            [values addObject:[NSValue valueWithCGPoint:CGPointMake(r.x(), r.y())]];\n        }\n\n        [allFaces addObject:values];\n    }\n\n    return allFaces;\n}\n\n\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u9818\u57df\u5019\u88dc\u62bd\u51fa\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\uff08CNN\uff09\u3092\u4f7f\u7528\u3057\u305f\u5224\u5b9a\u5668\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u691c\u51fa\u30fb\u5224\u5b9a\u3057\u305f\u3044\u3088\u3046\u306a\u5834\u5408\u3001\u753b\u50cf\u306e\u5168\u9818\u57df\u3092\u304f\u307e\u306a\u304f\u63a2\u3057\u56de\u308b\u3088\u308a\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u601d\u3057\u304d\u9818\u57df\u306e\u5019\u88dc\u3092\u307e\u305a\u62bd\u51fa\u3057\u3066\u7d5e\u308a\u8fbc\u3081\u308c\u3070\u7406\u60f3\u7684\u3067\u3059\u3002\ndlib\u306b\u306f\u9818\u57df\u5019\u88dc\u62bd\u51fa\u3092\u884c\u3046\u95a2\u6570 find_candidate_object_locations \u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u7b2c3\u301c\u7b2c5\u5f15\u6570\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u304c\u3001\u7279\u306b\u7b2c4\u5f15\u6570\uff08min_size\uff09\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u307e\u307e\u3060\u3068\u81a8\u5927\u306a\u6570\u306e\u9818\u57df\u304c\u62bd\u51fa\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u5f15\u6570\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u6b21\u306e\u30b3\u30fc\u30c9\u306e\u30c6\u30b9\u30c8\u7d50\u679c\u3092\u63cf\u753b\u3057\u305f\u3082\u306e\u304c\u3001\u8a18\u4e8b\u5192\u982d\u306e\u53f3\u5074\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u3059\u3002\n\nDLWrapper.mm\n- (nonnull NSArray<NSValue *> *)detectCandidates:(nonnull UIImage *)image {\n\n    CGFloat w = image.size.width * image.scale;\n    CGFloat h = image.size.height * image.scale;\n\n    cv::Mat rgbaMat = [image createCVMat];\n    cv::Mat rgbMat = cv::Mat(w, h, CV_8UC3);\n    cv::cvtColor(rgbaMat, rgbMat, CV_RGBA2RGB, 3);\n\n    dlib::cv_image<dlib::bgr_pixel> cvImage(rgbMat);\n\n    vector<dlib::rectangle> rects;\n\n    dlib::find_candidate_object_locations(cvImage, rects, dlib::linspace(100, 250, 4), 10000, 5);\n\n    NSMutableArray<NSValue *> *allRects = [NSMutableArray array];\n\n    for (auto r: rects) {\n        [allRects addObject:[NSValue valueWithCGRect:CGRectMake(r.left(), r.top(), r.width(), r.height())]];\n    }\n    return allRects;\n}\n\n\n\u9818\u57df\u306e\u62bd\u51fa\u306b\u95a2\u3057\u3066\u306f\u3001OpenCV\u306eContribution\u306b\u3042\u308bBING\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001OpenCV 3.1\u3092Contribution\u4ed8\u304d\u3067\u30d3\u30eb\u30c9\u3057\u3066\u8a66\u7528\u3057\u305f\u3068\u3053\u308d\u3001\u7b46\u8005\u74b0\u5883\u3067\u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\uff08computeSaliency\u30e1\u30bd\u30c3\u30c9\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff09\u3001\u4ee3\u308f\u308a\u306bdlib\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\u8cc7\u6599\n\nFace Landmarking on iPhone\nhttps://github.com/zweigraf/face-landmarking-ios\n\ndlib\u3067\u753b\u50cf\u3092\u8a8d\u8b58\u3055\u305b\u3066\u3001\u904a\u3093\u3067\u307f\u305f\u3002\nhttp://nonbiri-tereka.hatenablog.com/entry/2016/07/15/110000\n\ndlib\u3092\u7528\u3044\u305fselective search\nhttp://kivantium.hateblo.jp/entry/2015/07/25/184346\n\n\n[dlib](https://github.com/davisking/dlib)\u306f\u3001OpenCV\u306e\u3088\u3046\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u7cfb\u306e\u6a5f\u80fd\u3084\u6a5f\u68b0\u5b66\u7fd2\u306e\u30c4\u30fc\u30eb\u306a\u3069\u3092\u542b\u3080\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002dlib\u3092\u4f7f\u3063\u3066\u3001iOS\u4e0a\u3067\u9854\u306e\u8f2a\u90ed\u691c\u51fa\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5019\u88dc\u9818\u57df\u62bd\u51fa\u3092\u30c6\u30b9\u30c8\u3057\u305f\u306e\u3067\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u307e\u3059\u3002\n\n![dlib_testapp.jpg](https://qiita-image-store.s3.amazonaws.com/0/9042/c1fb73fb-2589-60e2-6f2b-c4ce58fe5b7d.jpeg \"dlib test app\")\n\ndlib\u306e\u7279\u5fb4\u306b\u3064\u3044\u3066\u306f[\u516c\u5f0f\u30b5\u30a4\u30c8](http://dlib.net)\u306e\u5192\u982d\u3067\u6b21\u306e\u3088\u3046\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n>Dlib is a modern C++ toolkit containing machine learning algorithms and tools for creating complex software in C++ to solve real world problems. It is used in both industry and academia in a wide range of domains including robotics, embedded devices, mobile phones, and large high performance computing environments. Dlib's open source licensing allows you to use it in any application, free of charge.\n\n\u7b46\u8005\u74b0\u5883\u306fXcode 8.1 + iPhone 7\u3067\u3001\u30c6\u30b9\u30c8\u30a2\u30d7\u30ea\u306fSwift\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306bObjective C++\u3092\u6df7\u5728\u3055\u305b\u308b\u304b\u305f\u3061\u3067\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002\u4e00\u5fdc\u3001\u4e0b\u8a18\u8a18\u4e8b\u306e\u7d9a\u304d\u3068\u3044\u3048\u3070\u7d9a\u304d\u3067\u3059\u3002\n[TensorFlow\u3092iOS\u30a2\u30d7\u30ea\uff08Swift\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff09\u306b\u5b9f\u88c5\u3059\u308b](http://qiita.com/hirokimu/items/ae5100ac4dc361ee0fcd)\n\n\n**\u958b\u767a\u624b\u9806**\n1. dlib\u3092iOS\u7528\u306b\u30d3\u30eb\u30c9\u3059\u308b\n2. iOS\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u306e\u7d44\u307f\u8fbc\u307f\n3. Objective C++\u3067\u306e\u958b\u767a\n\n#1. dlib\u3092iOS\u7528\u306b\u30d3\u30eb\u30c9\u3059\u308b\n\niOS\u3067dlib\u3092\u4f7f\u3046\u306b\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3057\u3066\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305a\u3001Stack Overflow\u306e[\u3053\u3061\u3089\u306e\u6295\u7a3f](http://stackoverflow.com/questions/34591254/how-to-build-dlib-for-ios/35058969#35058969)\u306e\u624b\u9806\u3092\u884c\u3044\u307e\u3059\u3002\n\ncmake\u306b\u3088\u308b\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068\u3001dlib-master/examples/build/dlib_build \u306bXcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff08dlib.xcodeproj\uff09\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306edlib\u30bf\u30fc\u30b2\u30c3\u30c8\u306f\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3084\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u8a2d\u5b9a\u304cMac OS\u7528\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001Build Settings\u306e\u5404\u6240\u3092\u81ea\u5206\u306e\u671b\u3080iOS\u7528\u306e\u8a2d\u5b9a\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n\u5909\u66f4\u3057\u3066\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d3\u30eb\u30c9\u3092\u884c\u3046\u3068\u3001dlib-master/examples/build/dlib_build/Release-iphoneos\uff08\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u306e\u5834\u5408\uff09\u306blibdlib.a \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n#2. iOS\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u306e\u7d44\u307f\u8fbc\u307f\n\n##\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8ffd\u52a0\n\nlibdlib.a \u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u3001Build Settings\u306eHeader Search Path\u306b\u306f**dlib\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e0a\u306e\u968e\u5c64**\u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u4f8b\u3048\u3070dlib-master/dlib \u3067\u306f\u306a\u304f dlib-master \u3092\u6307\u5b9a\uff09\u3002\n\u307e\u305f\u3001Processor Macros\u306b\u6b21\u306e\u30de\u30af\u30ed\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n+ DLIB_USE_LAPACK\n+ DLIB_USE_BLAS\n+ DLIB_NO_GUI_SUPPORT\n+ DLIB_JPEG_SUPPORT\n+ NDEBUG\n\n##OpenCV\u306e\u8ffd\u52a0\n\ndlib\u306b\u306fOpenCV\u9023\u643a\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001cv::Mat\u306a\u3069\u3092\u6271\u3046\u5834\u9762\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u3001OpenCV\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002CocoaPods\u3067\u8ffd\u52a0\u3059\u308c\u3070\u5927\u4e08\u592b\u3067\u3059\u3002\n\n#3. Objective C++\u3067\u306e\u958b\u767a\n\n##OpenCV\u7528\u306e\u30ab\u30c6\u30b4\u30ea\u306e\u8ffd\u52a0\n\nUIImage\u304b\u3089cv::Mat\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```objc++:UIImage+OpenCV.mm\n#import \"UIImage+OpenCV.h\"\n\n@implementation UIImage (OpenCV)\n\n- (cv::Mat)createCVMat {\n    \n    CGColorSpaceRef colorSpace = CGImageGetColorSpace(self.CGImage);\n    CGFloat cols = self.size.width * self.scale;\n    CGFloat rows = self.size.height * self.scale;\n    \n    cv::Mat cvMat(rows, cols, CV_8UC4);\n    \n    CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,\n                                                    cols,\n                                                    rows,\n                                                    8,\n                                                    cvMat.step[0],\n                                                    colorSpace,\n                                                    kCGImageAlphaNoneSkipLast |\n                                                    kCGBitmapByteOrderDefault);\n    \n    CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), self.CGImage);\n    CGContextRelease(contextRef);\n    \n    return cvMat;\n}\n```\n\n\n##\u9854\u306e\u8f2a\u90ed\u691c\u51fa\n\ndlib\u306eface detector\u3092\u4f7f\u3046\u3068\u3001\u9854\u306e\u9818\u57df\u3060\u3051\u3067\u306a\u304f\u8f2a\u90ed\u3084\u30d1\u30fc\u30c4\u306e\u4f4d\u7f6e\u307e\u3067\u691c\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u307e\u305a\u3001\u5224\u5b9a\u306b\u4f7f\u3046\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f frontal_face_detector.h \u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u306e\u3042\u308b\u4e0b\u8a18URL\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u53ef\u80fd\u3067\u3059\u3002\u5165\u624b\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\nhttp://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2\n\n\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u691c\u51fa\u3092\u884c\u3044\u307e\u3059\u3002detectFaces\u30e1\u30bd\u30c3\u30c9\u306bUIImage\u3092\u6e21\u3059\u3068\u3001NSValue\u306e\u914d\u5217\u3067\u5ea7\u6a19\u30c7\u30fc\u30bf\u304c\u8fd4\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3092\u63cf\u753b\u3057\u305f\u306e\u304c\u8a18\u4e8b\u5192\u982d\u306e\u5de6\u5074\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u3059\u3002\n\n```objc++:DLWrapper.mm\n#import <opencv2/opencv.hpp>\n#import \"DLWrapper.h\"\n#import \"UIImage+OpenCV.h\"\n#import \"dlib/opencv.h\"\n#import \"dlib/image_processing/frontal_face_detector.h\"\n#import \"dlib/image_processing.h\"\n#import \"dlib/image_transforms/segment_image.h\"\n#import \"dlib/image_transforms/segment_image_abstract.h\"\n#import \"dlib/matrix/matrix_exp_abstract.h\"\n\nusing namespace std;\n\n@implementation DLWrapper {\n    dlib::frontal_face_detector detector;\n    dlib::shape_predictor predictor;\n}\n\nstatic DLWrapper *_instance = nil;\n\n+ (instancetype)instance {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        _instance = [[DLWrapper alloc] init];\n    });\n    return _instance;\n}\n\n- (id)init {\n    if (!(self = [super init])) return nil;\n\n    detector = dlib::get_frontal_face_detector();    \n    NSString *path = [[NSBundle mainBundle] pathForResource:@\"shape_predictor_68_face_landmarks\" ofType:@\"dat\"];\n    const char *cpath = [path UTF8String];\n    dlib::deserialize(cpath) >> predictor;\n\n    return self;\n}\n\n- (nonnull NSArray<NSArray<NSValue *> *> *)detectFaces:(nonnull UIImage *)image {\n\n    CGFloat w = image.size.width * image.scale;\n    CGFloat h = image.size.height * image.scale;\n\n    cv::Mat rgbaMat = [image createCVMat];\n    cv::Mat rgbMat = cv::Mat(w, h, CV_8UC3);\n    cv::cvtColor(rgbaMat, rgbMat, CV_RGBA2RGB, 3);\n    \n    dlib::cv_image<dlib::bgr_pixel> cvImage(rgbMat);\n\n    vector<dlib::rectangle> faces = detector(cvImage);\n\n    NSMutableArray<NSArray *> *allFaces = [NSMutableArray array];\n    \n    for (auto face: faces) {\n\n        NSMutableArray<NSValue *> *values = [NSMutableArray array];\n        \n        // facial rect\n        auto shape = predictor(cvImage, face);\n        auto r = shape.get_rect();\n        [values addObject:[NSValue valueWithCGRect:CGRectMake(r.left(), r.top(), r.width(), r.height())]];\n        \n        // facial shape\n        for (auto i = 0; i < shape.num_parts(); i++) {\n            auto r = shape.part(i);\n            [values addObject:[NSValue valueWithCGPoint:CGPointMake(r.x(), r.y())]];\n        }\n        \n        [allFaces addObject:values];\n    }\n\n    return allFaces;\n}\n```\n\n\n##\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u9818\u57df\u5019\u88dc\u62bd\u51fa\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\uff08CNN\uff09\u3092\u4f7f\u7528\u3057\u305f\u5224\u5b9a\u5668\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u691c\u51fa\u30fb\u5224\u5b9a\u3057\u305f\u3044\u3088\u3046\u306a\u5834\u5408\u3001\u753b\u50cf\u306e\u5168\u9818\u57df\u3092\u304f\u307e\u306a\u304f\u63a2\u3057\u56de\u308b\u3088\u308a\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u601d\u3057\u304d\u9818\u57df\u306e\u5019\u88dc\u3092\u307e\u305a\u62bd\u51fa\u3057\u3066\u7d5e\u308a\u8fbc\u3081\u308c\u3070\u7406\u60f3\u7684\u3067\u3059\u3002\ndlib\u306b\u306f\u9818\u57df\u5019\u88dc\u62bd\u51fa\u3092\u884c\u3046\u95a2\u6570 find_candidate_object_locations \u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u7b2c3\u301c\u7b2c5\u5f15\u6570\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u304c\u3001\u7279\u306b\u7b2c4\u5f15\u6570\uff08min_size\uff09\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u307e\u307e\u3060\u3068\u81a8\u5927\u306a\u6570\u306e\u9818\u57df\u304c\u62bd\u51fa\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u5f15\u6570\u306b\u3064\u3044\u3066\u306f[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://dlib.net/python/#dlib.find_candidate_object_locations)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u6b21\u306e\u30b3\u30fc\u30c9\u306e\u30c6\u30b9\u30c8\u7d50\u679c\u3092\u63cf\u753b\u3057\u305f\u3082\u306e\u304c\u3001\u8a18\u4e8b\u5192\u982d\u306e\u53f3\u5074\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u3059\u3002\n\n\n```objc++:DLWrapper.mm\n- (nonnull NSArray<NSValue *> *)detectCandidates:(nonnull UIImage *)image {\n    \n    CGFloat w = image.size.width * image.scale;\n    CGFloat h = image.size.height * image.scale;\n\n    cv::Mat rgbaMat = [image createCVMat];\n    cv::Mat rgbMat = cv::Mat(w, h, CV_8UC3);\n    cv::cvtColor(rgbaMat, rgbMat, CV_RGBA2RGB, 3);\n    \n    dlib::cv_image<dlib::bgr_pixel> cvImage(rgbMat);\n    \n    vector<dlib::rectangle> rects;\n    \n    dlib::find_candidate_object_locations(cvImage, rects, dlib::linspace(100, 250, 4), 10000, 5);\n\n    NSMutableArray<NSValue *> *allRects = [NSMutableArray array];\n\n    for (auto r: rects) {\n        [allRects addObject:[NSValue valueWithCGRect:CGRectMake(r.left(), r.top(), r.width(), r.height())]];\n    }\n    return allRects;\n}\n```\n\n\u9818\u57df\u306e\u62bd\u51fa\u306b\u95a2\u3057\u3066\u306f\u3001OpenCV\u306eContribution\u306b\u3042\u308b[BING](https://github.com/opencv/opencv_contrib/tree/master/modules/saliency)\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001OpenCV 3.1\u3092Contribution\u4ed8\u304d\u3067\u30d3\u30eb\u30c9\u3057\u3066\u8a66\u7528\u3057\u305f\u3068\u3053\u308d\u3001\u7b46\u8005\u74b0\u5883\u3067\u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\uff08computeSaliency\u30e1\u30bd\u30c3\u30c9\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff09\u3001\u4ee3\u308f\u308a\u306bdlib\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u53c2\u8003\u8cc7\u6599\n+ Face Landmarking on iPhone\nhttps://github.com/zweigraf/face-landmarking-ios\n+ dlib\u3067\u753b\u50cf\u3092\u8a8d\u8b58\u3055\u305b\u3066\u3001\u904a\u3093\u3067\u307f\u305f\u3002\nhttp://nonbiri-tereka.hatenablog.com/entry/2016/07/15/110000\n+ dlib\u3092\u7528\u3044\u305fselective search\nhttp://kivantium.hateblo.jp/entry/2015/07/25/184346\n", "tags": ["iOS", "DeepLearning", "Objective-C++", "dlib", "Objective-C"]}