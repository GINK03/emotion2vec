{"tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "C"], "context": " More than 1 year has passed since last update.\u554f\u984c http://nabetani.sakura.ne.jp/hena/ord23snakemoinc/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/7ba11167ea28c929fcf2\n\u30a4\u30d9\u30f3\u30c8 http://yhpg.doorkeeper.jp/events/12339\n\u305f\u307e\u306b\u306f C \u8a00\u8a9e\u3067\u3082\u66f8\u304b\u306a\u304d\u3083\u306d\u3002\n\u3068\u601d\u3044\u3001\u66f8\u3044\u3066\u307f\u305f\u3002\n// CC_OPTS=\"clang -std=c99 -Wall\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\nenum{ MAP_W = 5 };\nenum{ MAP_H = 5 };\nenum{ MAPSIZE = MAP_H * MAP_W };\n\nint cell_value( char const * src, int x, int y )\n{\n  if ( 0<=x && x<MAP_W && 0<=y && y<MAP_H ){\n    return src[ x+y*(MAP_W+1) ]; // +1 \u306f\u3001\u30c7\u30ea\u30df\u30bf\u306e \"/\"\u3002\n  } else {\n    return INT_MAX;\n  }\n}\n\nint max_2( int a, int b ){  return a<b ? b : a;  }\nint max_4( int a, int b, int c, int d )\n{\n  return max_2( max_2( a, b ), max_2( c, d ) );\n}\n\nstruct kune{\n  char const * src;\n  int distmap[ MAPSIZE ];\n};\n\nint nei_dist( struct kune const * kune, int x, int y, int digit )\n{\n  int v = cell_value( kune->src, x, y );\n  return v<digit ? kune->distmap[ x+y*MAP_W ] : 0;\n}\n\nint neibour_max_dist( struct kune const * kune, int x, int y )\n{\n  int digit = cell_value( kune->src, x, y );\n  return max_4(\n    nei_dist( kune, x-1, y, digit ),\n    nei_dist( kune, x+1, y, digit ),\n    nei_dist( kune, x, y-1, digit ),\n    nei_dist( kune, x, y+1, digit ) );\n}\n\nint solve( char const * src )\n{\n  struct kune kune = { src };\n  int r=0;\n  for( char digit='0' ; digit<='9' ; ++digit ){\n    for( int y=0 ; y<MAP_H ; ++y ){\n      for( int x=0 ; x<MAP_W ; ++x ){\n        if ( cell_value( src, x, y ) == digit ){\n          int nei=neibour_max_dist( &kune, x, y );\n          kune.distmap[ x+y*MAP_W ] = nei+1;\n          r=max_2( nei+1, r );\n        }\n      }\n    }\n  }\n  return r;\n}\n\nvoid test( char const * src, char const * expected )\n{\n  int e = atoi( expected );\n  int a = solve( src );\n  printf( \"%s %s -> %2d ( %2d )\\n\", (a==e ? \"ok\" : \"**NG**\" ), src, a, e );\n}\n\nint main()\n{\n/*0*/ test( \"01224/82925/69076/32298/21065\", \"6\" );  \n/*50*/ test( \"02489/77571/84873/03879/84460\", \"7\" );\nreturn 0;\n}\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\nruby \u3067\u66f8\u3044\u305f\nhttp://qiita.com/Nabetani/items/abce08a153b2fbfa6e36#2-1\n\u3092\u305d\u306e\u307e\u307e\u79fb\u690d\u3057\u305f\u3002\n\u3044\u3084\u3057\u304b\u3057\u3002\n\u4f55\u5ea6\u66f8\u3044\u3066\u3082 C\u3067\u66f8\u304f\u3068\u9577\u304f\u306a\u3063\u3066\u3073\u3063\u304f\u308a\u3059\u308b\u3002\n\n\u554f\u984c http://nabetani.sakura.ne.jp/hena/ord23snakemoinc/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/7ba11167ea28c929fcf2\n\u30a4\u30d9\u30f3\u30c8 http://yhpg.doorkeeper.jp/events/12339\n\n\u305f\u307e\u306b\u306f C \u8a00\u8a9e\u3067\u3082\u66f8\u304b\u306a\u304d\u3083\u306d\u3002\n\u3068\u601d\u3044\u3001\u66f8\u3044\u3066\u307f\u305f\u3002\n\n```c\n// CC_OPTS=\"clang -std=c99 -Wall\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\nenum{ MAP_W = 5 };\nenum{ MAP_H = 5 };\nenum{ MAPSIZE = MAP_H * MAP_W };\n\nint cell_value( char const * src, int x, int y )\n{\n  if ( 0<=x && x<MAP_W && 0<=y && y<MAP_H ){\n    return src[ x+y*(MAP_W+1) ]; // +1 \u306f\u3001\u30c7\u30ea\u30df\u30bf\u306e \"/\"\u3002\n  } else {\n    return INT_MAX;\n  }\n}\n\nint max_2( int a, int b ){  return a<b ? b : a;  }\nint max_4( int a, int b, int c, int d )\n{\n  return max_2( max_2( a, b ), max_2( c, d ) );\n}\n\nstruct kune{\n  char const * src;\n  int distmap[ MAPSIZE ];\n};\n\nint nei_dist( struct kune const * kune, int x, int y, int digit )\n{\n  int v = cell_value( kune->src, x, y );\n  return v<digit ? kune->distmap[ x+y*MAP_W ] : 0;\n}\n\nint neibour_max_dist( struct kune const * kune, int x, int y )\n{\n  int digit = cell_value( kune->src, x, y );\n  return max_4(\n    nei_dist( kune, x-1, y, digit ),\n    nei_dist( kune, x+1, y, digit ),\n    nei_dist( kune, x, y-1, digit ),\n    nei_dist( kune, x, y+1, digit ) );\n}\n\nint solve( char const * src )\n{\n  struct kune kune = { src };\n  int r=0;\n  for( char digit='0' ; digit<='9' ; ++digit ){\n    for( int y=0 ; y<MAP_H ; ++y ){\n      for( int x=0 ; x<MAP_W ; ++x ){\n        if ( cell_value( src, x, y ) == digit ){\n          int nei=neibour_max_dist( &kune, x, y );\n          kune.distmap[ x+y*MAP_W ] = nei+1;\n          r=max_2( nei+1, r );\n        }\n      }\n    }\n  }\n  return r;\n}\n\nvoid test( char const * src, char const * expected )\n{\n  int e = atoi( expected );\n  int a = solve( src );\n  printf( \"%s %s -> %2d ( %2d )\\n\", (a==e ? \"ok\" : \"**NG**\" ), src, a, e );\n}\n\nint main()\n{\n/*0*/ test( \"01224/82925/69076/32298/21065\", \"6\" );  \n/*50*/ test( \"02489/77571/84873/03879/84460\", \"7\" );\nreturn 0;\n}\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\nruby \u3067\u66f8\u3044\u305f\nhttp://qiita.com/Nabetani/items/abce08a153b2fbfa6e36#2-1\n\u3092\u305d\u306e\u307e\u307e\u79fb\u690d\u3057\u305f\u3002\n\n\u3044\u3084\u3057\u304b\u3057\u3002\n\u4f55\u5ea6\u66f8\u3044\u3066\u3082 C\u3067\u66f8\u304f\u3068\u9577\u304f\u306a\u3063\u3066\u3073\u3063\u304f\u308a\u3059\u308b\u3002\n\n\n"}