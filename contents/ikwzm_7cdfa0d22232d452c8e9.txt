{"context": "\n\nQUEUE_REGISTER\n\nOverview\n\nIntroduction\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u7b46\u8005\u304c\u3088\u304f\u4f7f\u3046\u3061\u3087\u3063\u3068\u4fbf\u5229\u306a\u30ec\u30b8\u30b9\u30bf\u30d9\u30fc\u30b9\u306e\u30ad\u30e5\u30fc\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u30ec\u30b8\u30b9\u30bf\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\uff11\u301c\u6570\u30ef\u30fc\u30c9\u306e\u30ad\u30e5\u30fc(FIFO)\u3067\u3059\u3002\u30e1\u30e2\u30ea\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u30fc\u3092\u4fdd\u6301\u3059\u308b\u306b\u306f\u5411\u3044\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u7528\u9014\u306b\u306f\u5145\u5206\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\u306fVALID-and-READY \u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u5165\u529b\u5074\u306f VALID \u4fe1\u53f7\u306e\u72b6\u614b\u306b\u95a2\u308f\u308a\u306a\u304f\u30ad\u30e5\u30fc\u304c\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u4ed8\u3051\u308b\u72b6\u614b\u306b\u306a\u308c\u3070  READY \u4fe1\u53f7\u3092 H \u306b\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u51fa\u529b\u5074\u306f READY \u4fe1\u53f7\u306e\u72b6\u614b\u306b\u95a2\u308f\u308a\u306a\u304f\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u72b6\u614b\u3067 VALID \u4fe1\u53f7\u3092 H \u306b\u3057\u307e\u3059\u3002\nVALID-and-READY \u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u95a2\u3057\u3066\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nVALID \u4fe1\u53f7\u3068 READY \u4fe1\u53f7\u306b\u3088\u308b\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306e\u6ce8\u610f\u70b9 @Qiita\n\n\u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\u306fVALID-and-READY \u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u305f\u3081\u3001\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1\u306e\u30a2\u30c0\u30d7\u30bf\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1\u306b\u95a2\u3057\u3066\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nVALID \u4fe1\u53f7\u3068 READY \u4fe1\u53f7\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1 (Fork \u7de8) @Qiita\nVALID \u4fe1\u53f7\u3068 READY \u4fe1\u53f7\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1 (Join \u7de8) @Qiita\n\nQUEUE_REGISTER \u306e I_RDY \u4fe1\u53f7\u306e\u51fa\u529b\u306f\u30ec\u30b8\u30b9\u30bf\u51fa\u529b\u306b\u306a\u3063\u3066\u3044\u307e\u3059(QUEUE_SIZE>=2\u306e\u5834\u5408)\u3002\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306e\u30ec\u30b8\u30b9\u30bf\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30d1\u30b9\u3092\u6e1b\u3089\u3057\u3066\u52d5\u4f5c\u5468\u6ce2\u6570\u3092\u4e0a\u3052\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u95a2\u3057\u3066\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nVALID \u4fe1\u53f7\u3068 READY \u4fe1\u53f7\u306b\u3088\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5236\u5fa1 @Qiita\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u30c6\u30b9\u30c8\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 : https://github.com/ikwzm/PipeWork\n\n\u30c6\u30b9\u30c8\u74b0\u5883 : https://github.com/ikwzm/PipeWorkTest\n\n\n\nFeatures\n\n\uff11\u301c\u6570\u30ef\u30fc\u30c9\u306e\u30ad\u30e5\u30fc(FIFO)\u3067\u3059\u3002\n\u30ad\u30e5\u30fc\u306f\u30ec\u30b8\u30b9\u30bf(Flip-Flop)\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5165\u51fa\u529b\u306b VALID-and-READY \u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nVHDL \u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\u8ad6\u7406\u5408\u6210\u53ef\u80fd\u3067\u3059\u3002Xilinx\u793e\u306eVivado\u3001Altera\u793e\u306eQuartusII\u3067\u78ba\u8a8d\u6e08\u307f\u3002\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u5909\u6570\u3067\u30c7\u30fc\u30bf\u306e\u30d3\u30c3\u30c8\u5e45\u3084\u30ad\u30e5\u30fc\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\nFig.1 Top-Level Signaling Interface\n\n\nLicensing\n\u4e8c\u6761\u9805BSD\u30e9\u30a4\u30bb\u30f3\u30b9 (2-clause BSD license) \u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\nSpecification\n\nParameter Descriptions\nTable.1 Parameter Descriptions\n\n\n\nName\nTYPE\nDefault\nDescription\n\n\n\n\nQUEUE_SIZE\nInteger\n1\nQUEUE SIZE :\u30fb\u30ad\u30e5\u30fc\u306e\u5927\u304d\u3055(\u6df1\u3055)\u3092\u30ef\u30fc\u30c9\u6570\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\nDATA_BITS\nInteger\n32\nDATA BITS :\u30fb\u30c7\u30fc\u30bf(I_DATA/O_DATA/Q_DATA)\u306e\u30d3\u30c3\u30c8\u5e45\u3092\u6307\u5b9a\u3057\u307e\u3059\n\n\nLOWPOWER\nInteger\n1\nLOW POWER :\u30fb\u30ad\u30e5\u30fc\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u4e0d\u5fc5\u8981\u306a\u30ed\u30fc\u30c9\u3092\u884c\u308f\u306a\u3044\u3053\u3068\u306b\u3088\u308a\u3001\u30ec\u30b8\u30b9\u30bf\u304c\u4e0d\u5fc5\u8981\u306b\u30c8\u30b0\u30eb\u3059\u308b\u3053\u3068\u3092\u9632\u3044\u3067\u6d88\u8cbb\u96fb\u529b\u3092\u4e0b\u3052\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30fb\u305f\u3060\u3057\u3001\u56de\u8def\u304c\u82e5\u5e72\u5897\u3048\u307e\u3059\u3002\n\n\n\n\nPort Descriptions\nTable.2 Port  Descriptions\n\n\n\nName\nType\nWidth\nI/O\nDescription\n\n\n\n\nCLK\nSTD_LOGIC\n1\nin\n\u30af\u30ed\u30c3\u30af\u4fe1\u53f7\n\n\nRST\nSTD_LOGIC\n1\nin\n\u975e\u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u30fb\u30a2\u30af\u30c6\u30a3\u30d6\u30cf\u30a4\n\n\nCLR\nSTD_LOGIC\n1\nin\n\u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u30fb\u30a2\u30af\u30c6\u30a3\u30d6\u30cf\u30a4\n\n\nI_DATA\nSTD_LOGIC_VECTOR\nDATA_BITS\nin\n\u5165\u529b\u30c7\u30fc\u30bf\u4fe1\u53f7\n\n\nI_VAL\nSTD_LOGIC\n1\nin\n\u5165\u529b\u30c7\u30fc\u30bf\u6709\u52b9\u4fe1\u53f7\u30fbI_VAL='1'\u304b\u3064I_RDY='1'\u3067\u30c7\u30fc\u30bf\u3092\u30ad\u30e5\u30fc\u306b\u5165\u529b\u3057\u307e\u3059\u3002\n\n\nI_RDY\nSTD_LOGIC\n1\nout\n\u5165\u529b\u53ef\u80fd\u4fe1\u53f7\u30fb\u30ad\u30e5\u30fc\u304c\u7a7a\u3044\u3066\u3044\u3066\u3001\u5165\u529b\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\n\nQ_DATA\nSTD_LOGIC_VECTOR\nDATA_BITS\nout\n\u51fa\u529b\u30c7\u30fc\u30bf\u4fe1\u53f7\u30fb\u30ec\u30b8\u30b9\u30bf\u51fa\u529b\n\n\nQ_VAL\nSTD_LOGIC_VECTOR\nQUEUE_SIZE+1\nout\n\u51fa\u529b\u30c7\u30fc\u30bf\u6709\u52b9\u4fe1\u53f7\u30fb\u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306b\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3057\u307e\u3059\u3002\u30fb\u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306f1~QUEUE_SIZE\u307e\u3067\u3042\u308a\u307e\u3059\u304c\u3001\u5bfe\u5fdc\u3059\u308b\u4f4d\u7f6e\u306e\u30d5\u30e9\u30b0\u304c'1'\u306a\u3089\u3070\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3057\u307e\u3059\u3002\u30fb\u3053\u306e\u51fa\u529b\u4fe1\u53f7\u306e\u7bc4\u56f2\u304c1\u304b\u3089\u3067\u306f\u306a\u304f0\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u4e8b\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3053\u308c\u306fQUEUE_SIZE=0\u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3067\u3059\u3002QUEUE_SIZE>0\u306e\u5834\u5408\u306f\u3001Q_VAL(0)\u306fQ_VAL(1)\u3068\u540c\u3058\u3067\u3059\u3002\u30fbQ_VAL(0)='1'\u304b\u3064Q_RDY=1\u3067\u30ad\u30e5\u30fc\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u9664\u304d\u307e\u3059\u3002\n\n\nQ_RDY\nSTD_LOGIC\n1\nin\n\u51fa\u529b\u5fdc\u7b54\u4fe1\u53f7\n\n\nO_DATA\nSTD_LOGIC_VECTOR\nDATA_BITS\nout\n\u51fa\u529b\u30c7\u30fc\u30bf\u4fe1\u53f7\u30fbQ_DATA \u306e\u30ec\u30b8\u30b9\u30bf\u306b\u5165\u529b\u3055\u308c\u308b\u524d\u306e\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u30fb\u3053\u306e\u4fe1\u53f7\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n\nO_VAL\nSTD_LOGIC_VECTOR\nQUEUE_SIZE+1\n\n\u51fa\u529b\u30c7\u30fc\u30bf\u6709\u52b9\u4fe1\u53f7\u30fbQ_VAL\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u5165\u529b\u3055\u308c\u308b\u524d\u306e\u30d5\u30e9\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u30fb\u3053\u306e\u4fe1\u53f7\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n\n\n\nTiming Diagram\nQUEUE_SIZE=1 \u306e\u5834\u5408\u306f\u3001\u30ad\u30e5\u30fc\u306f\uff11\u3064\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u6b21\u306e\u56f3\u306e\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u3092\u4e00\u3064\u5165\u308c\u308b\u3068(I_VAL='1' & I_RDY='1')\u3001\u305d\u308c\u304c\u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067\u51fa\u529b\u3055\u308c\u3066\u30ad\u30e5\u30fc\u304b\u3089\u53d6\u308a\u51fa\u3055\u308c\u308b\u307e\u3067(Q_VAL(0)='1' & Q_RDY='1')\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093(I_RDY='0')\u3002\u3064\u307e\u308a\u3001\u30c7\u30fc\u30bf\u306e\u5165\u529b\u3068\u51fa\u529b\u304c\u4ea4\u4e92\u306b\u884c\u308f\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\nFig.2 Timing (QUEUE_SIZE=1)\n\nQUEUE_SIZE>1\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u56f3\u306e\u3088\u3046\u306b(\u56f3\u3067\u306fQUEUE_SIZE=2\u306e\u5834\u5408\u3092\u793a\u3057\u3066\u3044\u307e\u3059)\u3001\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3066\u3082(I_VAL='1' & I_RDY='1')\u3001\u30ad\u30e5\u30fc\u306b\u307e\u3060\u5165\u308c\u308b\u4f59\u5730\u304c\u6b8b\u3063\u3066\u3044\u308b\u306e\u3067\u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067\u3082\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059(I_RDY='1')\u3002\u305f\u3060\u3057\u30ad\u30e5\u30fc\u304c\u4e00\u676f\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u30c7\u30fc\u30bf\u306e\u5165\u529b\u304c\u51fa\u6765\u306a\u3044\u3088\u3046\u306b\u306a\u308a\u307e\u3059(I_RDY='0')\u3002\u3057\u305f\u304c\u3063\u3066\u6ede\u308a\u306a\u304f\u30d0\u30fc\u30b9\u30c8\u8ee2\u9001\u3057\u305f\u3044\u5834\u5408\u306f\u3001QUEUE_SIZE\u3092\uff12\u4ee5\u4e0a\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nFig.3 Timing (QUEUE_SIZE=2)\n\n\nArchitecture\n\nBlock Diagram\n\u6b21\u306e\u56f3\u306b QUEUE_REGISTER \u306e\u304a\u304a\u307e\u304b\u306a\u30d6\u30ed\u30c3\u30af\u56f3\u3092\u793a\u3057\u307e\u3059\u3002\n\nFig.4 Block Diagram\n\n\u30ad\u30e5\u30fc\u306e\u6df1\u3055\u6bce\u306b\u3001\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u30ec\u30b8\u30b9\u30bf(curr_queue_data[1:N])\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u5165\u529b\u6642\u306f\u3001\u7a7a\u3044\u3066\u3044\u308b\u5148\u982d\u306e\u30ec\u30b8\u30b9\u30bf\u306bI_DATA\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u969b\u306f\u3001\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u30ad\u30e5\u30fc\u306e\u5148\u982d\u65b9\u5411\u306b\u30b7\u30d5\u30c8\u3057\u307e\u3059\u3002\n\u30ad\u30e5\u30fc\u306e\u6df1\u3055\u6bce\u306b\u3001\u30c7\u30fc\u30bf\u304c\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0(curr_queue_valid[1:N])\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30d5\u30e9\u30b0\u306b\u3088\u3063\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u3001QUEUE_REGISTER \u306e\u72b6\u614b\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u30ad\u30e5\u30fc\u306e\u5148\u982d\u306e\u30d5\u30e9\u30b0\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308c\u3070(curr_queue_valid[1]='1')\u3001QUEUE_REGISTER \u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u30ad\u30e5\u30fc\u306e\u6700\u5f8c\u5c3e\u306e\u30d5\u30e9\u30b0\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308c\u3070(curr_queue_valid[N]='1')\u3001QUEUE_REGISTER \u304c\u6e80\u676f\u3067\u30c7\u30fc\u30bf\u306e\u5165\u529b\u304c\u51fa\u6765\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u5165\u529b\u6642\u306f\u3001\u3053\u306e\u30d5\u30e9\u30b0\u3092\u53c2\u7167\u3057\u3066\u3001\u5404\u30ec\u30b8\u30b9\u30bf\u304c\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u306b\u3059\u308b\u304b\u3001\u5165\u529b\u30c7\u30fc\u30bf(I_DATA)\u304b\u3089\u30ed\u30fc\u30c9\u3059\u308b\u304b\u3001\u30ad\u30e5\u30fc\u306e\u5f8c\u308d\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9(\u30b7\u30d5\u30c8)\u3059\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n\nSource Code Description\n\u6700\u5f8c\u306b QUEUE_REGISTER \u306e VHDL \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\nqueue_register.vhd\n-----------------------------------------------------------------------------------\n--!     @file    queue_register.vhd\n--!     @brief   QUEUE REGISTER MODULE :\n--!              \u30d5\u30ea\u30c3\u30d7\u30d5\u30ed\u30c3\u30d7\u30d9\u30fc\u30b9\u306e\u6bd4\u8f03\u7684\u6d45\u3044\u30ad\u30e5\u30fc.\n--!     @version 1.5.0\n--!     @date    2013/4/2\n--!     @author  Ichiro Kawazome <ichiro_k@ca2.so-net.ne.jp>\n-----------------------------------------------------------------------------------\n--\n--      Copyright (C) 2012,2013 Ichiro Kawazome\n--      All rights reserved.\n--\n--      Redistribution and use in source and binary forms, with or without\n--      modification, are permitted provided that the following conditions\n--      are met:\n--\n--        1. Redistributions of source code must retain the above copyright\n--           notice, this list of conditions and the following disclaimer.\n--\n--        2. Redistributions in binary form must reproduce the above copyright\n--           notice, this list of conditions and the following disclaimer in\n--           the documentation and/or other materials provided with the\n--           distribution.\n--\n--      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n--      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n--      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n--      A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n--      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n--      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n--      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n--      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n--      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n--      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n--      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\n-----------------------------------------------------------------------------------\n--! @brief   QUEUE REGISTER\n--!          \u30d5\u30ea\u30c3\u30d7\u30d5\u30ed\u30c3\u30d7\u30d9\u30fc\u30b9\u306e\u6bd4\u8f03\u7684\u6d45\u3044\u30ad\u30e5\u30fc.\n--!        * \u30d5\u30ea\u30c3\u30d7\u30d5\u30ed\u30c3\u30d7\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u30ad\u30e5\u30fc\u306e\u6bb5\u6570\u304c\u5927\u304d\u3044\u3068\n--!          \u305d\u308c\u306a\u308a\u306b\u56de\u8def\u898f\u6a21\u304c\u5927\u304d\u304f\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f.\n-----------------------------------------------------------------------------------\nentity  QUEUE_REGISTER is\n    -------------------------------------------------------------------------------\n    -- \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u5909\u6570\n    -------------------------------------------------------------------------------\n    generic (\n        QUEUE_SIZE  : --! @brief QUEUE SIZE :\n                      --! \u30ad\u30e5\u30fc\u306e\u5927\u304d\u3055\u3092\u30ef\u30fc\u30c9\u6570\u3067\u6307\u5b9a\u3059\u308b.\n                      integer := 1;\n        DATA_BITS   : --! @brief DATA BITS :\n                      --! \u30c7\u30fc\u30bf(I_DATA/O_DATA/Q_DATA)\u306e\u30d3\u30c3\u30c8\u5e45\u3092\u6307\u5b9a\u3059\u308b.\n                      integer :=  32;\n        LOWPOWER    : --! @brief LOW POWER MODE :\n                      --! \u30ad\u30e5\u30fc\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u4e0d\u5fc5\u8981\u306a\u30ed\u30fc\u30c9\u3092\u884c\u308f\u306a\u3044\u3053\u3068\u306b\u3088\u308a\u3001\n                      --! \u30ec\u30b8\u30b9\u30bf\u304c\u4e0d\u5fc5\u8981\u306b\u30c8\u30b0\u30eb\u3059\u308b\u3053\u3068\u3092\u9632\u3044\u3067\u6d88\u8cbb\u96fb\u529b\u3092\n                      --! \u4e0b\u3052\u308b\u3088\u3046\u306b\u3059\u308b.\n                      --! \u305f\u3060\u3057\u3001\u56de\u8def\u304c\u82e5\u5e72\u5897\u3048\u308b.\n                      integer range 0 to 1 := 1\n    );\n    port (\n    -------------------------------------------------------------------------------\n    -- \u30af\u30ed\u30c3\u30af&\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\n    -------------------------------------------------------------------------------\n        CLK         : --! @brief CLOCK :\n                      --! \u30af\u30ed\u30c3\u30af\u4fe1\u53f7\n                      in  std_logic; \n        RST         : --! @brief ASYNCRONOUSE RESET :\n                      --! \u975e\u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7.\u30a2\u30af\u30c6\u30a3\u30d6\u30cf\u30a4.\n                      in  std_logic;\n        CLR         : --! @brief SYNCRONOUSE RESET :\n                      --! \u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7.\u30a2\u30af\u30c6\u30a3\u30d6\u30cf\u30a4.\n                      in  std_logic;\n    -------------------------------------------------------------------------------\n    -- \u5165\u529b\u5074\n    -------------------------------------------------------------------------------\n        I_DATA      : --! @brief INPUT DATA  :\n                      --! \u5165\u529b\u30c7\u30fc\u30bf\u4fe1\u53f7.\n                      in  std_logic_vector(DATA_BITS-1 downto 0);\n        I_VAL       : --! @brief INPUT DATA VALID :\n                      --! \u5165\u529b\u30c7\u30fc\u30bf\u6709\u52b9\u4fe1\u53f7.\n                      in  std_logic;\n        I_RDY       : --! @brief INPUT READY :\n                      --! \u5165\u529b\u53ef\u80fd\u4fe1\u53f7.\n                      --! \u30ad\u30e5\u30fc\u304c\u7a7a\u3044\u3066\u3044\u3066\u3001\u5165\u529b\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\n                      --! \u3042\u308b\u3053\u3068\u3092\u793a\u3059\u4fe1\u53f7.\n                      out std_logic;\n    -------------------------------------------------------------------------------\n    -- \u51fa\u529b\u5074\n    -------------------------------------------------------------------------------\n        O_DATA      : --! @brief OUTPUT DATA :\n                      --! \u51fa\u529b\u30c7\u30fc\u30bf.\n                      out std_logic_vector(DATA_BITS-1 downto 0);\n        O_VAL       : --! @brief OUTPUT DATA VALID :\n                      --! \u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306b\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n                      --! * \u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306f1\u301cQUEUE_SIZE\u307e\u3067\u3042\u308b\u304c\u3001\u5bfe\u5fdc\u3059\u308b\u4f4d\u7f6e\u306e\n                      --!   \u30d5\u30e9\u30b0\u304c'1'\u306a\u3089\u3070\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3059.\n                      --! * \u3053\u306e\u51fa\u529b\u4fe1\u53f7\u306e\u7bc4\u56f2\u304c1\u304b\u3089\u3067\u306f\u306a\u304f0\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u4e8b\u306b\n                      --!   \u6ce8\u610f. \u3053\u308c\u306fQUEUE_SIZE=0\u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081.\n                      --!   QUEUE_SIZE>0\u306e\u5834\u5408\u306f\u3001O_VAL(0)\u306fO_VAL(1)\u3068\u540c\u3058.\n                      out std_logic_vector(QUEUE_SIZE  downto 0);\n        Q_DATA      : --! @brief OUTPUT REGISTERD DATA :\n                      --! \u30ec\u30b8\u30b9\u30bf\u51fa\u529b\u306e\u51fa\u529b\u30c7\u30fc\u30bf.\n                      --! \u51fa\u529b\u30c7\u30fc\u30bf(O_DATA)\u3092\u30af\u30ed\u30c3\u30af\u3067\u53e9\u3044\u305f\u3082\u306e.\n                      out std_logic_vector(DATA_BITS-1 downto 0);\n        Q_VAL       : --! @brief OUTPUT REGISTERD DATA VALID :\n                      --! \u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306b\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n                      --! O_VAL\u3092\u30af\u30ed\u30c3\u30af\u3067\u53e9\u3044\u305f\u3082\u306e.\n                      --! * \u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306f1\u301cQUEUE_SIZE\u307e\u3067\u3042\u308b\u304c\u3001\u5bfe\u5fdc\u3059\u308b\u4f4d\u7f6e\u306e\n                      --!   \u30d5\u30e9\u30b0\u304c'1'\u306a\u3089\u3070\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3059.\n                      --! * \u3053\u306e\u51fa\u529b\u4fe1\u53f7\u306e\u7bc4\u56f2\u304c1\u304b\u3089\u3067\u306f\u306a\u304f0\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u4e8b\u306b\n                      --!   \u6ce8\u610f. \u3053\u308c\u306fQUEUE_SIZE=0\u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081.\n                      --!   QUEUE_SIZE>0\u306e\u5834\u5408\u306f\u3001Q_VAL(0)\u306fQ_VAL(1)\u3068\u540c\u3058.\n                      out std_logic_vector(QUEUE_SIZE  downto 0);\n        Q_RDY       : --! @brief OUTPUT READY :\n                      --! \u51fa\u529b\u53ef\u80fd\u4fe1\u53f7.\n                      in  std_logic\n    );\nend QUEUE_REGISTER;\n-----------------------------------------------------------------------------------\n-- \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u672c\u4f53\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\narchitecture RTL of QUEUE_REGISTER is\nbegin\n    -------------------------------------------------------------------------------\n    --  QUEUE_SIZE=0\u306e\u5834\u5408\u306f\u306a\u306b\u3082\u3057\u306a\u3044\n    -------------------------------------------------------------------------------\n    QUEUE_SIZE_EQ_0: if (QUEUE_SIZE = 0) generate\n        O_DATA   <= I_DATA;\n        Q_DATA   <= I_DATA;\n        O_VAL(0) <= I_VAL;\n        Q_VAL(0) <= I_VAL;\n        I_RDY    <= Q_RDY;\n    end generate;\n    -------------------------------------------------------------------------------\n    -- QUEUE_SIZE>0\u306e\u5834\u5408\n    -------------------------------------------------------------------------------\n    QUEUE_SIZE_GT_0: if (QUEUE_SIZE > 0) generate\n        subtype  QUEUE_DATA_TYPE   is std_logic_vector(DATA_BITS-1 downto 0);\n        constant QUEUE_DATA_NULL    : std_logic_vector(DATA_BITS-1 downto 0) := (others => '0');\n        type     QUEUE_DATA_VECTOR is array (natural range <>) of QUEUE_DATA_TYPE;\n        constant FIRST_OF_QUEUE     : integer := 1;\n        constant LAST_OF_QUEUE      : integer := QUEUE_SIZE;\n        signal   next_queue_data    : QUEUE_DATA_VECTOR(LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n        signal   curr_queue_data    : QUEUE_DATA_VECTOR(LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n        signal   queue_data_load    : std_logic_vector (LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n        signal   next_queue_valid   : std_logic_vector (LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n        signal   curr_queue_valid   : std_logic_vector (LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n    begin\n        ---------------------------------------------------------------------------\n        -- next_queue_valid : \u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067\u306e\u30ad\u30e5\u30fc\u306e\u72b6\u614b\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n        -- queue_data_load  : \u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067curr_queue_data\u306bnext_queue_data\u306e\u5024\u3092\n        --                    \u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n        ---------------------------------------------------------------------------\n        process (I_VAL, Q_RDY, curr_queue_valid) begin\n            for i in FIRST_OF_QUEUE to LAST_OF_QUEUE loop\n                -------------------------------------------------------------------\n                -- \u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5834\u5408...\n                -------------------------------------------------------------------\n                if (curr_queue_valid(i) = '1') then\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u6700\u5f8c\u306a\u3089\u3070\u3001\n                    -- Q_RDY='1'\u3067\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u3092\u30af\u30ea\u30a2\u3059\u308b.\n                    ---------------------------------------------------------------\n                    if (i = LAST_OF_QUEUE) then\n                        if (Q_RDY = '1') then\n                            next_queue_valid(i) <= '0';\n                        else\n                            next_queue_valid(i) <= '1';\n                        end if;\n                        queue_data_load(i) <= '0';\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u6700\u5f8c\u3067\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u5f8c\u308d\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u306a\u3089\u3070\u3001\n                    -- Q_RDY='1'\u3067\u5f8c\u308d\u306e\u30ad\u30e5\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\u3059\u308b.\n                    ---------------------------------------------------------------\n                    elsif (curr_queue_valid(i+1) = '1') then\n                        next_queue_valid(i) <= '1';\n                        if (Q_RDY = '1') then\n                            queue_data_load(i) <= '1';\n                        else\n                            queue_data_load(i) <= '0';\n                        end if;\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u6700\u5f8c\u3067\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u5f8c\u308d\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u306a\u3089\u3070\u3001\n                    -- I_VAL='0' \u304b\u3064 Q_RDY='1'\u306a\u3089\u3070\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u3092\u30af\u30ea\u30a2\u3059\u308b. \n                    -- I_VAL='1' \u304b\u3064 Q_RDY='1'\u306a\u3089\u3070I_DATA\u3092\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\u3059\u308b.\n                    ---------------------------------------------------------------\n                    else\n                        if (I_VAL = '0' and Q_RDY = '1') then\n                            next_queue_valid(i) <= '0';\n                        else\n                            next_queue_valid(i) <= '1';\n                        end if;\n                        if (LOWPOWER > 0 and I_VAL = '1' and Q_RDY = '1') or\n                           (LOWPOWER = 0                 and Q_RDY = '1') then\n                            queue_data_load(i)  <= '1';\n                        else\n                            queue_data_load(i)  <= '0';\n                        end if;\n                    end if;\n                -------------------------------------------------------------------\n                -- \u81ea\u5206\u306e\u3068\u3053\u308d\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408...\n                -------------------------------------------------------------------\n                else -- if (curr_queue_valid(i) = '0') then\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u5148\u982d\u306a\u3089\u3070\u3001\n                    -- I_VAL='1'\u3067\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b.\n                    ---------------------------------------------------------------\n                    if    (i = FIRST_OF_QUEUE) then\n                        if (I_VAL = '1') then\n                            next_queue_valid(i) <= '1';\n                            queue_data_load(i)  <= '1';\n                        else\n                            next_queue_valid(i) <= '0';\n                            queue_data_load(i)  <= '0';\n                        end if;\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u5148\u982d\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u524d\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3070\u3001\n                    -- I_VAL='1'\u304b\u3064Q_RDY='0'\u3067\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b.\n                    ---------------------------------------------------------------\n                    elsif (curr_queue_valid(i-1) = '1') then\n                        if (I_VAL = '1' and Q_RDY = '0') then\n                            next_queue_valid(i) <= '1';\n                        else\n                            next_queue_valid(i) <= '0';\n                        end if;\n                        if (LOWPOWER = 0) or\n                           (LOWPOWER > 0 and I_VAL = '1' and Q_RDY = '0') then\n                            queue_data_load(i)  <= '1';\n                        else\n                            queue_data_load(i)  <= '0';\n                        end if;\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u5148\u982d\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u524d\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u306a\u3044\u306a\u3089\u3070\u3001\n                    -- \u30ad\u30e5\u30fc\u306f\u7a7a\u306e\u307e\u307e.\n                    ---------------------------------------------------------------\n                    else\n                            next_queue_valid(i) <= '0';\n                            queue_data_load(i)  <= '0';\n                    end if;\n                end if;\n            end loop;\n        end process;\n        ---------------------------------------------------------------------------\n        -- next_queue_data  : \u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\u3055\u308c\u308b\u30c7\u30fc\u30bf.\n        ---------------------------------------------------------------------------\n        process (I_DATA, queue_data_load, curr_queue_data, curr_queue_valid) begin\n            for i in FIRST_OF_QUEUE to LAST_OF_QUEUE loop\n                if (queue_data_load(i) = '1') then\n                    if    (i = LAST_OF_QUEUE) then\n                        next_queue_data(i) <= I_DATA;\n                    elsif (curr_queue_valid(i+1) = '1') then\n                        next_queue_data(i) <= curr_queue_data(i+1);\n                    else\n                        next_queue_data(i) <= I_DATA;\n                    end if;\n                else\n                        next_queue_data(i) <= curr_queue_data(i);\n                end if;\n            end loop;\n        end process;\n        ---------------------------------------------------------------------------\n        -- curr_queue_data  : \u73fe\u5728\u3001\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf.\n        -- curr_queue_valid : \u73fe\u5728\u3001\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n        -- I_RDY            : \u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n        ---------------------------------------------------------------------------\n        process (CLK, RST) begin\n            if     (RST = '1') then\n                   curr_queue_data  <= (others => QUEUE_DATA_NULL);\n                   curr_queue_valid <= (others => '0');\n                   I_RDY            <= '0';\n            elsif  (CLK'event and CLK = '1') then\n               if (CLR = '1') then\n                   curr_queue_data  <= (others => QUEUE_DATA_NULL);\n                   curr_queue_valid <= (others => '0');\n                   I_RDY            <= '0';\n               else\n                   curr_queue_data  <= next_queue_data;\n                   curr_queue_valid <= next_queue_valid;\n                   I_RDY            <= not next_queue_valid(LAST_OF_QUEUE);\n               end if;\n            end if;\n        end process;\n        ---------------------------------------------------------------------------\n        -- \u5404\u7a2e\u51fa\u529b\u4fe1\u53f7\n        ---------------------------------------------------------------------------\n        O_DATA                     <= next_queue_data (FIRST_OF_QUEUE);\n        Q_DATA                     <= curr_queue_data (FIRST_OF_QUEUE);\n        O_VAL(0)                   <= next_queue_valid(FIRST_OF_QUEUE);\n        O_VAL(QUEUE_SIZE downto 1) <= next_queue_valid;\n        Q_VAL(0)                   <= curr_queue_valid(FIRST_OF_QUEUE);\n        Q_VAL(QUEUE_SIZE downto 1) <= curr_queue_valid;\n    end generate;\nend RTL;\n\n\nQUEUE_REGISTER\n==============\n\n# Overview\n\n## Introduction\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u7b46\u8005\u304c\u3088\u304f\u4f7f\u3046\u3061\u3087\u3063\u3068\u4fbf\u5229\u306a\u30ec\u30b8\u30b9\u30bf\u30d9\u30fc\u30b9\u306e\u30ad\u30e5\u30fc\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u30ec\u30b8\u30b9\u30bf\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\uff11\u301c\u6570\u30ef\u30fc\u30c9\u306e\u30ad\u30e5\u30fc(FIFO)\u3067\u3059\u3002\u30e1\u30e2\u30ea\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u30fc\u3092\u4fdd\u6301\u3059\u308b\u306b\u306f\u5411\u3044\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u7528\u9014\u306b\u306f\u5145\u5206\u3067\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\u306fVALID-and-READY \u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u5165\u529b\u5074\u306f VALID \u4fe1\u53f7\u306e\u72b6\u614b\u306b\u95a2\u308f\u308a\u306a\u304f\u30ad\u30e5\u30fc\u304c\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u4ed8\u3051\u308b\u72b6\u614b\u306b\u306a\u308c\u3070  READY \u4fe1\u53f7\u3092 H \u306b\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u51fa\u529b\u5074\u306f READY \u4fe1\u53f7\u306e\u72b6\u614b\u306b\u95a2\u308f\u308a\u306a\u304f\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u72b6\u614b\u3067 VALID \u4fe1\u53f7\u3092 H \u306b\u3057\u307e\u3059\u3002\nVALID-and-READY \u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u95a2\u3057\u3066\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [VALID \u4fe1\u53f7\u3068 READY \u4fe1\u53f7\u306b\u3088\u308b\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306e\u6ce8\u610f\u70b9 @Qiita](http://qiita.com/ikwzm/items/9736b5547cb15309af5c)\n\n\u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\u306fVALID-and-READY \u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u305f\u3081\u3001\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1\u306e\u30a2\u30c0\u30d7\u30bf\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1\u306b\u95a2\u3057\u3066\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [VALID \u4fe1\u53f7\u3068 READY \u4fe1\u53f7\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1 (Fork \u7de8) @Qiita](http://qiita.com/ikwzm/items/e4ec2290e08326f5e06c)\n* [VALID \u4fe1\u53f7\u3068 READY \u4fe1\u53f7\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1 (Join \u7de8) @Qiita](http://qiita.com/ikwzm/items/f34961239aa352c58794)\n\nQUEUE_REGISTER \u306e I_RDY \u4fe1\u53f7\u306e\u51fa\u529b\u306f\u30ec\u30b8\u30b9\u30bf\u51fa\u529b\u306b\u306a\u3063\u3066\u3044\u307e\u3059(QUEUE_SIZE>=2\u306e\u5834\u5408)\u3002\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306e\u30ec\u30b8\u30b9\u30bf\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30d1\u30b9\u3092\u6e1b\u3089\u3057\u3066\u52d5\u4f5c\u5468\u6ce2\u6570\u3092\u4e0a\u3052\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u95a2\u3057\u3066\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [VALID \u4fe1\u53f7\u3068 READY \u4fe1\u53f7\u306b\u3088\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5236\u5fa1 @Qiita](http://qiita.com/ikwzm/items/21c60d827c0e1744c621)\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u30c6\u30b9\u30c8\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308a\u307e\u3059\u3002\n\n* \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 : [https://github.com/ikwzm/PipeWork](https://github.com/ikwzm/PipeWork)\n* \u30c6\u30b9\u30c8\u74b0\u5883 : [https://github.com/ikwzm/PipeWorkTest](https://github.com/ikwzm/PipeWorkTest)\n\n\n## Features\n\n\n* \uff11\u301c\u6570\u30ef\u30fc\u30c9\u306e\u30ad\u30e5\u30fc(FIFO)\u3067\u3059\u3002\n* \u30ad\u30e5\u30fc\u306f\u30ec\u30b8\u30b9\u30bf(Flip-Flop)\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n* \u5165\u51fa\u529b\u306b VALID-and-READY \u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n* VHDL \u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n* \u8ad6\u7406\u5408\u6210\u53ef\u80fd\u3067\u3059\u3002Xilinx\u793e\u306eVivado\u3001Altera\u793e\u306eQuartusII\u3067\u78ba\u8a8d\u6e08\u307f\u3002\n* \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u5909\u6570\u3067\u30c7\u30fc\u30bf\u306e\u30d3\u30c3\u30c8\u5e45\u3084\u30ad\u30e5\u30fc\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\n\n![Fig.1 Top-Level Signaling Interface](https://qiita-image-store.s3.amazonaws.com/0/24981/e6e16bb6-0897-4bf7-c96a-9ed53e4c594b.jpeg \"Fig.1 Top-Level Signaling Interface\")\n\nFig.1 Top-Level Signaling Interface\n\n<br />\n\n\n\n\n## Licensing\n\n\n\u4e8c\u6761\u9805BSD\u30e9\u30a4\u30bb\u30f3\u30b9 (2-clause BSD license) \u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n# Specification\n\n\n\n## Parameter Descriptions\n\n\nTable.1 Parameter Descriptions\n\n| Name | TYPE | Default | Description |\n|------|------|---------|-------------|\n| QUEUE_SIZE | Integer | 1 | QUEUE SIZE :<br>\u30fb\u30ad\u30e5\u30fc\u306e\u5927\u304d\u3055(\u6df1\u3055)\u3092\u30ef\u30fc\u30c9\u6570\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 |\n| DATA_BITS | Integer | 32 | DATA BITS :<br>\u30fb\u30c7\u30fc\u30bf(I_DATA/O_DATA/Q_DATA)\u306e\u30d3\u30c3\u30c8\u5e45\u3092\u6307\u5b9a\u3057\u307e\u3059 |\n| LOWPOWER | Integer | 1 | LOW POWER :<br>\u30fb\u30ad\u30e5\u30fc\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u4e0d\u5fc5\u8981\u306a\u30ed\u30fc\u30c9\u3092\u884c\u308f\u306a\u3044\u3053\u3068\u306b\u3088\u308a\u3001\u30ec\u30b8\u30b9\u30bf\u304c\u4e0d\u5fc5\u8981\u306b\u30c8\u30b0\u30eb\u3059\u308b\u3053\u3068\u3092\u9632\u3044\u3067\u6d88\u8cbb\u96fb\u529b\u3092\u4e0b\u3052\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002<br>\u30fb\u305f\u3060\u3057\u3001\u56de\u8def\u304c\u82e5\u5e72\u5897\u3048\u307e\u3059\u3002 |\n\n\n\n\n## Port Descriptions\n\n\nTable.2 Port  Descriptions\n\n| Name | Type | Width | I/O | Description |\n|------|------|-------|-----|-------------|\n| CLK | STD_LOGIC | 1 | in | \u30af\u30ed\u30c3\u30af\u4fe1\u53f7 |\n| RST | STD_LOGIC | 1 | in | \u975e\u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7<br>\u30fb\u30a2\u30af\u30c6\u30a3\u30d6\u30cf\u30a4 |\n| CLR | STD_LOGIC | 1 | in | \u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7<br>\u30fb\u30a2\u30af\u30c6\u30a3\u30d6\u30cf\u30a4 |\n| I_DATA | STD_LOGIC_VECTOR | DATA_BITS | in | \u5165\u529b\u30c7\u30fc\u30bf\u4fe1\u53f7 |\n| I_VAL | STD_LOGIC | 1 | in | \u5165\u529b\u30c7\u30fc\u30bf\u6709\u52b9\u4fe1\u53f7<br>\u30fbI_VAL='1'\u304b\u3064I_RDY='1'\u3067\u30c7\u30fc\u30bf\u3092\u30ad\u30e5\u30fc\u306b\u5165\u529b\u3057\u307e\u3059\u3002 |\n| I_RDY | STD_LOGIC | 1 | out | \u5165\u529b\u53ef\u80fd\u4fe1\u53f7<br>\u30fb\u30ad\u30e5\u30fc\u304c\u7a7a\u3044\u3066\u3044\u3066\u3001\u5165\u529b\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 |\n| Q_DATA | STD_LOGIC_VECTOR | DATA_BITS | out | \u51fa\u529b\u30c7\u30fc\u30bf\u4fe1\u53f7<br>\u30fb\u30ec\u30b8\u30b9\u30bf\u51fa\u529b |\n| Q_VAL | STD_LOGIC_VECTOR | QUEUE_SIZE+1 | out | \u51fa\u529b\u30c7\u30fc\u30bf\u6709\u52b9\u4fe1\u53f7<br>\u30fb\u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306b\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3057\u307e\u3059\u3002<br>\u30fb\u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306f1~QUEUE_SIZE\u307e\u3067\u3042\u308a\u307e\u3059\u304c\u3001\u5bfe\u5fdc\u3059\u308b\u4f4d\u7f6e\u306e\u30d5\u30e9\u30b0\u304c'1'\u306a\u3089\u3070\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3057\u307e\u3059\u3002<br>\u30fb\u3053\u306e\u51fa\u529b\u4fe1\u53f7\u306e\u7bc4\u56f2\u304c1\u304b\u3089\u3067\u306f\u306a\u304f0\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u4e8b\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002<br> \u3053\u308c\u306fQUEUE_SIZE=0\u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3067\u3059\u3002<br>QUEUE_SIZE>0\u306e\u5834\u5408\u306f\u3001Q_VAL(0)\u306fQ_VAL(1)\u3068\u540c\u3058\u3067\u3059\u3002<br>\u30fbQ_VAL(0)='1'\u304b\u3064Q_RDY=`1`\u3067\u30ad\u30e5\u30fc\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u9664\u304d\u307e\u3059\u3002 |\n| Q_RDY | STD_LOGIC | 1 | in | \u51fa\u529b\u5fdc\u7b54\u4fe1\u53f7 |\n| O_DATA | STD_LOGIC_VECTOR | DATA_BITS | out | \u51fa\u529b\u30c7\u30fc\u30bf\u4fe1\u53f7<br>\u30fbQ_DATA \u306e\u30ec\u30b8\u30b9\u30bf\u306b\u5165\u529b\u3055\u308c\u308b\u524d\u306e\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002<br>\u30fb\u3053\u306e\u4fe1\u53f7\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 |\n| O_VAL | STD_LOGIC_VECTOR | QUEUE_SIZE+1 |  | \u51fa\u529b\u30c7\u30fc\u30bf\u6709\u52b9\u4fe1\u53f7<br>\u30fbQ_VAL\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u5165\u529b\u3055\u308c\u308b\u524d\u306e\u30d5\u30e9\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002<br>\u30fb\u3053\u306e\u4fe1\u53f7\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 |\n\n\n\n\n## Timing Diagram\n\n\nQUEUE_SIZE=1 \u306e\u5834\u5408\u306f\u3001\u30ad\u30e5\u30fc\u306f\uff11\u3064\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u6b21\u306e\u56f3\u306e\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u3092\u4e00\u3064\u5165\u308c\u308b\u3068(I_VAL='1' & I_RDY='1')\u3001\u305d\u308c\u304c\u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067\u51fa\u529b\u3055\u308c\u3066\u30ad\u30e5\u30fc\u304b\u3089\u53d6\u308a\u51fa\u3055\u308c\u308b\u307e\u3067(Q_VAL(0)='1' & Q_RDY='1')\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093(I_RDY='0')\u3002\u3064\u307e\u308a\u3001\u30c7\u30fc\u30bf\u306e\u5165\u529b\u3068\u51fa\u529b\u304c\u4ea4\u4e92\u306b\u884c\u308f\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n![Fig.2 Timing (QUEUE_SIZE=1)](https://qiita-image-store.s3.amazonaws.com/0/24981/4868931b-eac1-1d28-d60d-3de8f90191fa.jpeg  \"Fig.2 Timing (QUEUE_SIZE=1)\")\n\n\nFig.2 Timing (QUEUE_SIZE=1)\n\n<br />\n\nQUEUE_SIZE>1\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u56f3\u306e\u3088\u3046\u306b(\u56f3\u3067\u306fQUEUE_SIZE=2\u306e\u5834\u5408\u3092\u793a\u3057\u3066\u3044\u307e\u3059)\u3001\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3066\u3082(I_VAL='1' & I_RDY='1')\u3001\u30ad\u30e5\u30fc\u306b\u307e\u3060\u5165\u308c\u308b\u4f59\u5730\u304c\u6b8b\u3063\u3066\u3044\u308b\u306e\u3067\u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067\u3082\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059(I_RDY='1')\u3002\u305f\u3060\u3057\u30ad\u30e5\u30fc\u304c\u4e00\u676f\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u30c7\u30fc\u30bf\u306e\u5165\u529b\u304c\u51fa\u6765\u306a\u3044\u3088\u3046\u306b\u306a\u308a\u307e\u3059(I_RDY='0')\u3002\u3057\u305f\u304c\u3063\u3066\u6ede\u308a\u306a\u304f\u30d0\u30fc\u30b9\u30c8\u8ee2\u9001\u3057\u305f\u3044\u5834\u5408\u306f\u3001QUEUE_SIZE\u3092\uff12\u4ee5\u4e0a\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n![Fig.3 Timing (QUEUE_SIZE=2)](https://qiita-image-store.s3.amazonaws.com/0/24981/5251a922-6f44-8d85-d94a-ddf1d5065124.jpeg \"Fig.3 Timing (QUEUE_SIZE=2)\")\n\n\nFig.3 Timing (QUEUE_SIZE=2)\n\n<br />\n\n\n# Architecture\n\n\n\n## Block Diagram\n\n\n\u6b21\u306e\u56f3\u306b QUEUE_REGISTER \u306e\u304a\u304a\u307e\u304b\u306a\u30d6\u30ed\u30c3\u30af\u56f3\u3092\u793a\u3057\u307e\u3059\u3002\n\n\n![Fig.4 Block Diagram](https://qiita-image-store.s3.amazonaws.com/0/24981/30ab65bd-5e88-34f9-3a43-79ee5e828cdf.jpeg \"Fig.4 Block Diagram\")\n\nFig.4 Block Diagram\n\n<br />\n\n\n\n\u30ad\u30e5\u30fc\u306e\u6df1\u3055\u6bce\u306b\u3001\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u30ec\u30b8\u30b9\u30bf(curr_queue_data[1:N])\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u5165\u529b\u6642\u306f\u3001\u7a7a\u3044\u3066\u3044\u308b\u5148\u982d\u306e\u30ec\u30b8\u30b9\u30bf\u306bI_DATA\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u969b\u306f\u3001\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u30ad\u30e5\u30fc\u306e\u5148\u982d\u65b9\u5411\u306b\u30b7\u30d5\u30c8\u3057\u307e\u3059\u3002\n\n\n\n\u30ad\u30e5\u30fc\u306e\u6df1\u3055\u6bce\u306b\u3001\u30c7\u30fc\u30bf\u304c\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0(curr_queue_valid[1:N])\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30d5\u30e9\u30b0\u306b\u3088\u3063\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u3001QUEUE_REGISTER \u306e\u72b6\u614b\u3092\u793a\u3057\u307e\u3059\u3002\n\n* \u30ad\u30e5\u30fc\u306e\u5148\u982d\u306e\u30d5\u30e9\u30b0\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308c\u3070(curr_queue_valid[1]='1')\u3001QUEUE_REGISTER \u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n* \u30ad\u30e5\u30fc\u306e\u6700\u5f8c\u5c3e\u306e\u30d5\u30e9\u30b0\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308c\u3070(curr_queue_valid[N]='1')\u3001QUEUE_REGISTER \u304c\u6e80\u676f\u3067\u30c7\u30fc\u30bf\u306e\u5165\u529b\u304c\u51fa\u6765\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n* \u30c7\u30fc\u30bf\u306e\u5165\u529b\u6642\u306f\u3001\u3053\u306e\u30d5\u30e9\u30b0\u3092\u53c2\u7167\u3057\u3066\u3001\u5404\u30ec\u30b8\u30b9\u30bf\u304c\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u306b\u3059\u308b\u304b\u3001\u5165\u529b\u30c7\u30fc\u30bf(I_DATA)\u304b\u3089\u30ed\u30fc\u30c9\u3059\u308b\u304b\u3001\u30ad\u30e5\u30fc\u306e\u5f8c\u308d\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9(\u30b7\u30d5\u30c8)\u3059\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n## Source Code Description\n\n\u6700\u5f8c\u306b QUEUE_REGISTER \u306e VHDL \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n```VHDL:queue_register.vhd\n-----------------------------------------------------------------------------------\n--!     @file    queue_register.vhd\n--!     @brief   QUEUE REGISTER MODULE :\n--!              \u30d5\u30ea\u30c3\u30d7\u30d5\u30ed\u30c3\u30d7\u30d9\u30fc\u30b9\u306e\u6bd4\u8f03\u7684\u6d45\u3044\u30ad\u30e5\u30fc.\n--!     @version 1.5.0\n--!     @date    2013/4/2\n--!     @author  Ichiro Kawazome <ichiro_k@ca2.so-net.ne.jp>\n-----------------------------------------------------------------------------------\n--\n--      Copyright (C) 2012,2013 Ichiro Kawazome\n--      All rights reserved.\n--\n--      Redistribution and use in source and binary forms, with or without\n--      modification, are permitted provided that the following conditions\n--      are met:\n--\n--        1. Redistributions of source code must retain the above copyright\n--           notice, this list of conditions and the following disclaimer.\n--\n--        2. Redistributions in binary form must reproduce the above copyright\n--           notice, this list of conditions and the following disclaimer in\n--           the documentation and/or other materials provided with the\n--           distribution.\n--\n--      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n--      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n--      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n--      A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n--      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n--      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n--      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n--      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n--      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n--      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n--      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\n-----------------------------------------------------------------------------------\n--! @brief   QUEUE REGISTER\n--!          \u30d5\u30ea\u30c3\u30d7\u30d5\u30ed\u30c3\u30d7\u30d9\u30fc\u30b9\u306e\u6bd4\u8f03\u7684\u6d45\u3044\u30ad\u30e5\u30fc.\n--!        * \u30d5\u30ea\u30c3\u30d7\u30d5\u30ed\u30c3\u30d7\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u30ad\u30e5\u30fc\u306e\u6bb5\u6570\u304c\u5927\u304d\u3044\u3068\n--!          \u305d\u308c\u306a\u308a\u306b\u56de\u8def\u898f\u6a21\u304c\u5927\u304d\u304f\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f.\n-----------------------------------------------------------------------------------\nentity  QUEUE_REGISTER is\n    -------------------------------------------------------------------------------\n    -- \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u5909\u6570\n    -------------------------------------------------------------------------------\n    generic (\n        QUEUE_SIZE  : --! @brief QUEUE SIZE :\n                      --! \u30ad\u30e5\u30fc\u306e\u5927\u304d\u3055\u3092\u30ef\u30fc\u30c9\u6570\u3067\u6307\u5b9a\u3059\u308b.\n                      integer := 1;\n        DATA_BITS   : --! @brief DATA BITS :\n                      --! \u30c7\u30fc\u30bf(I_DATA/O_DATA/Q_DATA)\u306e\u30d3\u30c3\u30c8\u5e45\u3092\u6307\u5b9a\u3059\u308b.\n                      integer :=  32;\n        LOWPOWER    : --! @brief LOW POWER MODE :\n                      --! \u30ad\u30e5\u30fc\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u4e0d\u5fc5\u8981\u306a\u30ed\u30fc\u30c9\u3092\u884c\u308f\u306a\u3044\u3053\u3068\u306b\u3088\u308a\u3001\n                      --! \u30ec\u30b8\u30b9\u30bf\u304c\u4e0d\u5fc5\u8981\u306b\u30c8\u30b0\u30eb\u3059\u308b\u3053\u3068\u3092\u9632\u3044\u3067\u6d88\u8cbb\u96fb\u529b\u3092\n                      --! \u4e0b\u3052\u308b\u3088\u3046\u306b\u3059\u308b.\n                      --! \u305f\u3060\u3057\u3001\u56de\u8def\u304c\u82e5\u5e72\u5897\u3048\u308b.\n                      integer range 0 to 1 := 1\n    );\n    port (\n    -------------------------------------------------------------------------------\n    -- \u30af\u30ed\u30c3\u30af&\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\n    -------------------------------------------------------------------------------\n        CLK         : --! @brief CLOCK :\n                      --! \u30af\u30ed\u30c3\u30af\u4fe1\u53f7\n                      in  std_logic; \n        RST         : --! @brief ASYNCRONOUSE RESET :\n                      --! \u975e\u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7.\u30a2\u30af\u30c6\u30a3\u30d6\u30cf\u30a4.\n                      in  std_logic;\n        CLR         : --! @brief SYNCRONOUSE RESET :\n                      --! \u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7.\u30a2\u30af\u30c6\u30a3\u30d6\u30cf\u30a4.\n                      in  std_logic;\n    -------------------------------------------------------------------------------\n    -- \u5165\u529b\u5074\n    -------------------------------------------------------------------------------\n        I_DATA      : --! @brief INPUT DATA  :\n                      --! \u5165\u529b\u30c7\u30fc\u30bf\u4fe1\u53f7.\n                      in  std_logic_vector(DATA_BITS-1 downto 0);\n        I_VAL       : --! @brief INPUT DATA VALID :\n                      --! \u5165\u529b\u30c7\u30fc\u30bf\u6709\u52b9\u4fe1\u53f7.\n                      in  std_logic;\n        I_RDY       : --! @brief INPUT READY :\n                      --! \u5165\u529b\u53ef\u80fd\u4fe1\u53f7.\n                      --! \u30ad\u30e5\u30fc\u304c\u7a7a\u3044\u3066\u3044\u3066\u3001\u5165\u529b\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\n                      --! \u3042\u308b\u3053\u3068\u3092\u793a\u3059\u4fe1\u53f7.\n                      out std_logic;\n    -------------------------------------------------------------------------------\n    -- \u51fa\u529b\u5074\n    -------------------------------------------------------------------------------\n        O_DATA      : --! @brief OUTPUT DATA :\n                      --! \u51fa\u529b\u30c7\u30fc\u30bf.\n                      out std_logic_vector(DATA_BITS-1 downto 0);\n        O_VAL       : --! @brief OUTPUT DATA VALID :\n                      --! \u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306b\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n                      --! * \u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306f1\u301cQUEUE_SIZE\u307e\u3067\u3042\u308b\u304c\u3001\u5bfe\u5fdc\u3059\u308b\u4f4d\u7f6e\u306e\n                      --!   \u30d5\u30e9\u30b0\u304c'1'\u306a\u3089\u3070\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3059.\n                      --! * \u3053\u306e\u51fa\u529b\u4fe1\u53f7\u306e\u7bc4\u56f2\u304c1\u304b\u3089\u3067\u306f\u306a\u304f0\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u4e8b\u306b\n                      --!   \u6ce8\u610f. \u3053\u308c\u306fQUEUE_SIZE=0\u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081.\n                      --!   QUEUE_SIZE>0\u306e\u5834\u5408\u306f\u3001O_VAL(0)\u306fO_VAL(1)\u3068\u540c\u3058.\n                      out std_logic_vector(QUEUE_SIZE  downto 0);\n        Q_DATA      : --! @brief OUTPUT REGISTERD DATA :\n                      --! \u30ec\u30b8\u30b9\u30bf\u51fa\u529b\u306e\u51fa\u529b\u30c7\u30fc\u30bf.\n                      --! \u51fa\u529b\u30c7\u30fc\u30bf(O_DATA)\u3092\u30af\u30ed\u30c3\u30af\u3067\u53e9\u3044\u305f\u3082\u306e.\n                      out std_logic_vector(DATA_BITS-1 downto 0);\n        Q_VAL       : --! @brief OUTPUT REGISTERD DATA VALID :\n                      --! \u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306b\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n                      --! O_VAL\u3092\u30af\u30ed\u30c3\u30af\u3067\u53e9\u3044\u305f\u3082\u306e.\n                      --! * \u30ad\u30e5\u30fc\u30ec\u30b8\u30b9\u30bf\u306f1\u301cQUEUE_SIZE\u307e\u3067\u3042\u308b\u304c\u3001\u5bfe\u5fdc\u3059\u308b\u4f4d\u7f6e\u306e\n                      --!   \u30d5\u30e9\u30b0\u304c'1'\u306a\u3089\u3070\u6709\u52b9\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u4e8b\u3092\u793a\u3059.\n                      --! * \u3053\u306e\u51fa\u529b\u4fe1\u53f7\u306e\u7bc4\u56f2\u304c1\u304b\u3089\u3067\u306f\u306a\u304f0\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u4e8b\u306b\n                      --!   \u6ce8\u610f. \u3053\u308c\u306fQUEUE_SIZE=0\u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081.\n                      --!   QUEUE_SIZE>0\u306e\u5834\u5408\u306f\u3001Q_VAL(0)\u306fQ_VAL(1)\u3068\u540c\u3058.\n                      out std_logic_vector(QUEUE_SIZE  downto 0);\n        Q_RDY       : --! @brief OUTPUT READY :\n                      --! \u51fa\u529b\u53ef\u80fd\u4fe1\u53f7.\n                      in  std_logic\n    );\nend QUEUE_REGISTER;\n-----------------------------------------------------------------------------------\n-- \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u672c\u4f53\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\narchitecture RTL of QUEUE_REGISTER is\nbegin\n    -------------------------------------------------------------------------------\n    --  QUEUE_SIZE=0\u306e\u5834\u5408\u306f\u306a\u306b\u3082\u3057\u306a\u3044\n    -------------------------------------------------------------------------------\n    QUEUE_SIZE_EQ_0: if (QUEUE_SIZE = 0) generate\n        O_DATA   <= I_DATA;\n        Q_DATA   <= I_DATA;\n        O_VAL(0) <= I_VAL;\n        Q_VAL(0) <= I_VAL;\n        I_RDY    <= Q_RDY;\n    end generate;\n    -------------------------------------------------------------------------------\n    -- QUEUE_SIZE>0\u306e\u5834\u5408\n    -------------------------------------------------------------------------------\n    QUEUE_SIZE_GT_0: if (QUEUE_SIZE > 0) generate\n        subtype  QUEUE_DATA_TYPE   is std_logic_vector(DATA_BITS-1 downto 0);\n        constant QUEUE_DATA_NULL    : std_logic_vector(DATA_BITS-1 downto 0) := (others => '0');\n        type     QUEUE_DATA_VECTOR is array (natural range <>) of QUEUE_DATA_TYPE;\n        constant FIRST_OF_QUEUE     : integer := 1;\n        constant LAST_OF_QUEUE      : integer := QUEUE_SIZE;\n        signal   next_queue_data    : QUEUE_DATA_VECTOR(LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n        signal   curr_queue_data    : QUEUE_DATA_VECTOR(LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n        signal   queue_data_load    : std_logic_vector (LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n        signal   next_queue_valid   : std_logic_vector (LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n        signal   curr_queue_valid   : std_logic_vector (LAST_OF_QUEUE downto FIRST_OF_QUEUE);\n    begin\n        ---------------------------------------------------------------------------\n        -- next_queue_valid : \u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067\u306e\u30ad\u30e5\u30fc\u306e\u72b6\u614b\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n        -- queue_data_load  : \u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067curr_queue_data\u306bnext_queue_data\u306e\u5024\u3092\n        --                    \u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n        ---------------------------------------------------------------------------\n        process (I_VAL, Q_RDY, curr_queue_valid) begin\n            for i in FIRST_OF_QUEUE to LAST_OF_QUEUE loop\n                -------------------------------------------------------------------\n                -- \u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5834\u5408...\n                -------------------------------------------------------------------\n                if (curr_queue_valid(i) = '1') then\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u6700\u5f8c\u306a\u3089\u3070\u3001\n                    -- Q_RDY='1'\u3067\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u3092\u30af\u30ea\u30a2\u3059\u308b.\n                    ---------------------------------------------------------------\n                    if (i = LAST_OF_QUEUE) then\n                        if (Q_RDY = '1') then\n                            next_queue_valid(i) <= '0';\n                        else\n                            next_queue_valid(i) <= '1';\n                        end if;\n                        queue_data_load(i) <= '0';\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u6700\u5f8c\u3067\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u5f8c\u308d\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u306a\u3089\u3070\u3001\n                    -- Q_RDY='1'\u3067\u5f8c\u308d\u306e\u30ad\u30e5\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\u3059\u308b.\n                    ---------------------------------------------------------------\n                    elsif (curr_queue_valid(i+1) = '1') then\n                        next_queue_valid(i) <= '1';\n                        if (Q_RDY = '1') then\n                            queue_data_load(i) <= '1';\n                        else\n                            queue_data_load(i) <= '0';\n                        end if;\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u6700\u5f8c\u3067\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u5f8c\u308d\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u306a\u3089\u3070\u3001\n                    -- I_VAL='0' \u304b\u3064 Q_RDY='1'\u306a\u3089\u3070\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u3092\u30af\u30ea\u30a2\u3059\u308b. \n                    -- I_VAL='1' \u304b\u3064 Q_RDY='1'\u306a\u3089\u3070I_DATA\u3092\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\u3059\u308b.\n                    ---------------------------------------------------------------\n                    else\n                        if (I_VAL = '0' and Q_RDY = '1') then\n                            next_queue_valid(i) <= '0';\n                        else\n                            next_queue_valid(i) <= '1';\n                        end if;\n                        if (LOWPOWER > 0 and I_VAL = '1' and Q_RDY = '1') or\n                           (LOWPOWER = 0                 and Q_RDY = '1') then\n                            queue_data_load(i)  <= '1';\n                        else\n                            queue_data_load(i)  <= '0';\n                        end if;\n                    end if;\n                -------------------------------------------------------------------\n                -- \u81ea\u5206\u306e\u3068\u3053\u308d\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408...\n                -------------------------------------------------------------------\n                else -- if (curr_queue_valid(i) = '0') then\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u5148\u982d\u306a\u3089\u3070\u3001\n                    -- I_VAL='1'\u3067\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b.\n                    ---------------------------------------------------------------\n                    if    (i = FIRST_OF_QUEUE) then\n                        if (I_VAL = '1') then\n                            next_queue_valid(i) <= '1';\n                            queue_data_load(i)  <= '1';\n                        else\n                            next_queue_valid(i) <= '0';\n                            queue_data_load(i)  <= '0';\n                        end if;\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u5148\u982d\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u524d\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3070\u3001\n                    -- I_VAL='1'\u304b\u3064Q_RDY='0'\u3067\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b.\n                    ---------------------------------------------------------------\n                    elsif (curr_queue_valid(i-1) = '1') then\n                        if (I_VAL = '1' and Q_RDY = '0') then\n                            next_queue_valid(i) <= '1';\n                        else\n                            next_queue_valid(i) <= '0';\n                        end if;\n                        if (LOWPOWER = 0) or\n                           (LOWPOWER > 0 and I_VAL = '1' and Q_RDY = '0') then\n                            queue_data_load(i)  <= '1';\n                        else\n                            queue_data_load(i)  <= '0';\n                        end if;\n                    ---------------------------------------------------------------\n                    -- \u3082\u3057\u81ea\u5206\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u81ea\u5206\u304c\u30ad\u30e5\u30fc\u306e\u5148\u982d\u306a\u304f\u3066\u3001\n                    -- \u304b\u3064\u524d\u306e\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u306a\u3044\u306a\u3089\u3070\u3001\n                    -- \u30ad\u30e5\u30fc\u306f\u7a7a\u306e\u307e\u307e.\n                    ---------------------------------------------------------------\n                    else\n                            next_queue_valid(i) <= '0';\n                            queue_data_load(i)  <= '0';\n                    end if;\n                end if;\n            end loop;\n        end process;\n        ---------------------------------------------------------------------------\n        -- next_queue_data  : \u6b21\u306e\u30af\u30ed\u30c3\u30af\u3067\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\u3055\u308c\u308b\u30c7\u30fc\u30bf.\n        ---------------------------------------------------------------------------\n        process (I_DATA, queue_data_load, curr_queue_data, curr_queue_valid) begin\n            for i in FIRST_OF_QUEUE to LAST_OF_QUEUE loop\n                if (queue_data_load(i) = '1') then\n                    if    (i = LAST_OF_QUEUE) then\n                        next_queue_data(i) <= I_DATA;\n                    elsif (curr_queue_valid(i+1) = '1') then\n                        next_queue_data(i) <= curr_queue_data(i+1);\n                    else\n                        next_queue_data(i) <= I_DATA;\n                    end if;\n                else\n                        next_queue_data(i) <= curr_queue_data(i);\n                end if;\n            end loop;\n        end process;\n        ---------------------------------------------------------------------------\n        -- curr_queue_data  : \u73fe\u5728\u3001\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf.\n        -- curr_queue_valid : \u73fe\u5728\u3001\u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n        -- I_RDY            : \u30ad\u30e5\u30fc\u306b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0.\n        ---------------------------------------------------------------------------\n        process (CLK, RST) begin\n            if     (RST = '1') then\n                   curr_queue_data  <= (others => QUEUE_DATA_NULL);\n                   curr_queue_valid <= (others => '0');\n                   I_RDY            <= '0';\n            elsif  (CLK'event and CLK = '1') then\n               if (CLR = '1') then\n                   curr_queue_data  <= (others => QUEUE_DATA_NULL);\n                   curr_queue_valid <= (others => '0');\n                   I_RDY            <= '0';\n               else\n                   curr_queue_data  <= next_queue_data;\n                   curr_queue_valid <= next_queue_valid;\n                   I_RDY            <= not next_queue_valid(LAST_OF_QUEUE);\n               end if;\n            end if;\n        end process;\n        ---------------------------------------------------------------------------\n        -- \u5404\u7a2e\u51fa\u529b\u4fe1\u53f7\n        ---------------------------------------------------------------------------\n        O_DATA                     <= next_queue_data (FIRST_OF_QUEUE);\n        Q_DATA                     <= curr_queue_data (FIRST_OF_QUEUE);\n        O_VAL(0)                   <= next_queue_valid(FIRST_OF_QUEUE);\n        O_VAL(QUEUE_SIZE downto 1) <= next_queue_valid;\n        Q_VAL(0)                   <= curr_queue_valid(FIRST_OF_QUEUE);\n        Q_VAL(QUEUE_SIZE downto 1) <= curr_queue_valid;\n    end generate;\nend RTL;\n```\n\n\n", "tags": ["VHDL", "FPGA"]}