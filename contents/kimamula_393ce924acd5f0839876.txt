{"tags": ["JavaScript", "TypeScript", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"], "context": " More than 1 year has passed since last update.\u300cScala\u95a2\u6570\u578b\u30c7\u30b6\u30a4\u30f3&\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u2015Scalaz\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf\u30fc\u306b\u3088\u308b\u95a2\u6570\u578b\u5fb9\u5e95\u30ac\u30a4\u30c9\u300d\uff08\u4ee5\u4e0b\u3001 FP in Scala\uff09\u3068\u3044\u3046\u672c\u3092\u8aad\u3093\u3067\u3044\u307e\u3059\u3002\n\u3068\u3053\u308d\u3069\u3053\u308d\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6f14\u7fd2\u554f\u984c\u304c\u51fa\u3066\u304d\u3066\u3001\u3053\u308c\u3092\u89e3\u3044\u3066\u3044\u304b\u306a\u3044\u3068\u3061\u3083\u3093\u3068\u7406\u89e3\u3067\u304d\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3001 Scala \u3067\u66f8\u304f\u306e\u3082\u5f53\u305f\u308a\u524d\u3059\u304e\u3066\u3064\u307e\u3089\u306a\u3044\uff08\uff1f\uff09\u306e\u3067\u3001 JavaScript (TypeScript) \u3067\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u7b2c5\u7ae0\u306b\u51fa\u3066\u304f\u308b\u9045\u5ef6\u8a55\u4fa1\u3092\u53d6\u308a\u4e0a\u3052\u307e\u3059\uff08\u6b21\u56de\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\uff09\u3002\n\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/kimamula/fp-in-javascript/tree/master/lazy-array\n\n\n\u9045\u5ef6\u8a55\u4fa1\u3068\u306f\n\u300c\u5b9f\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067\u3001\u5024\u306e\u8a55\u4fa1\u3092\u9045\u5ef6\u3055\u305b\u308b\u300d\u3053\u3068\u3067\u3059\u3002 Haskell \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u9045\u5ef6\u8a55\u4fa1\u3067\u3059\u3057\u3001 Scala \u3067\u3082\u660e\u793a\u7684\u306b\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3067\u9045\u5ef6\u8a55\u4fa1\u3092\u4f7f\u3048\u307e\u3059\u3002\n\u305d\u306e\u52b9\u679c\u3092\u7406\u89e3\u3059\u308b\u3046\u3048\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u304c\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u914d\u5217\uff08\u30ea\u30b9\u30c8\uff09\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u914d\u5217\u3092\u9045\u5ef6\u8a55\u4fa1\u3059\u308b\u30e1\u30ea\u30c3\u30c8\n\n\u7121\u9650\u9577\u306e\u914d\u5217\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\nHaskell \u3067\u306f\u305f\u3068\u3048\u3070\u3001 \u5076\u6570\u3092\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u305f\u7121\u9650\u9577\u306e\u30ea\u30b9\u30c8\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u751f\u6210\u3067\u304d\u307e\u3059\u3002\nlet evens = [2,4..] \n\nevens \u306f\u7121\u9650\u9577\u306e\u30ea\u30b9\u30c8\u3067\u3059\u304c\u3001\u8a55\u4fa1\u304c\u9045\u5ef6\u3055\u308c\u308b\u305f\u3081\u3001\u30e1\u30e2\u30ea\u3092\u307b\u3068\u3093\u3069\u6d88\u8cbb\u3057\u307e\u305b\u3093\u3002\u305f\u3068\u3048\u3070\u3001 evens \u306e 10 \u756a\u76ee\u306e\u6570\u5b57\u306f 20 \u3067\u3059\u304c\u3001\u305d\u308c\u306f\u5b9f\u969b\u306b\u305d\u306e\u5024\u3092\u53c2\u7167\u3057\u305f\u969b\u306b\u521d\u3081\u3066\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093\u3001\u4e00\u5ea6\u8a55\u4fa1\u3055\u308c\u305f\u5024\u306f\u4f7f\u3044\u56de\u3055\u308c\u308b\u305f\u3081\u3001\u518d\u5ea6\u53c2\u7167\u3055\u308c\u305f\u969b\u306b\u518d\u8a08\u7b97\u3055\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nCollection API \u3092\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u305f\u969b\u306b\u3001\u4e00\u6642\u7684\u306a\u30ea\u30b9\u30c8\u306e\u751f\u6210\u3084\u305d\u308c\u306b\u5bfe\u3059\u308b\u30eb\u30fc\u30d7\u304c\u767a\u751f\u3057\u306a\u3044\nFP in Scala \u306b\u767b\u5834\u3059\u308b\u4f8b\u3067\u3059\u304c\u3001\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u3001\nList(1,2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u9806\u5e8f\u3067\u8a08\u7b97\u304c\u884c\u308f\u308c\u307e\u3059\u3002\nList(1,2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\nList(11,12,13,14).filter(_ % 2 == 0).map(_ * 3)\n\nList(12,14).map(_ * 3)\n\nList(36,42)\n\nmap \u3084 filter \u304c\u5b9f\u884c\u3055\u308c\u308b\u305f\u3073\u306b\u3001\u305d\u306e\u6642\u70b9\u3067\u4e00\u6642\u7684\u306a\u30ea\u30b9\u30c8\u304c\u751f\u6210\u3055\u308c\u30eb\u30fc\u30d7\u306b\u3088\u308a\u8d70\u67fb\u3055\u308c\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001 map \u3084 filter \u304c\u3001\u305d\u308c\u305e\u308c\u306e\u5b9f\u884c\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a08\u7b97\u3092\u3084\u308a\u9042\u3052\u3066\u3057\u307e\u3046\u304b\u3089\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u7121\u99c4\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u751f\u6210\u3084\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u6392\u3057\u305f\u3001\u52b9\u7387\u7684\u306a\u8a08\u7b97\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nLazyList(1,2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n(11 :: LazyList(2,3,4).map(_ + 10)).filter(_ % 2 == 0).map(_ * 3)\n\nLazyList(2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n(12 :: LazyList(3,4).map(_ + 10)).filter(_ % 2 == 0).map(_ * 3)\n\n(12 :: LazyList(3,4).map(_ + 10).filter(_ % 2 == 0)).map(_ * 3)\n\n36 :: LazyList(3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n36 :: (13 :: LazyList(4).map(_ + 10)).filter(_ % 2 == 0).map(_ * 3)\n\n36 :: LazyList(4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n36 :: LazyList(14).filter(_ % 2 == 0).map(_ * 3)\n\n36 :: LazyList(14).map(_ * 3)\n\nLazyList(36,42)\n\n\u884c\u6570\u306f\u9577\u304f\u306a\u3063\u305f\u306e\u3067\u4eca\u4e00\u3064\u52b9\u7387\u5316\u3055\u308c\u305f\u611f\u304c\u5206\u304b\u308a\u3065\u3089\u3044\u6c17\u304c\u3057\u307e\u3059\u304c\u3002\u3002\u3002\n\n\u5b9f\u88c5\nTypeScript \u3067\u3001\u9045\u5ef6\u8a55\u4fa1\u3055\u308c\u308b\u914d\u5217 LazyArray \u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u50d5\u306f\u666e\u6bb5\u304b\u3089 JavaScript \u3092 TypeScript \u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u95a2\u6570\u578b\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u5834\u5408\u306f\u3001 TypeScript \u3067\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u304d\u3061\u3063\u3068\u5b9a\u7fa9\u3057\u3066\u66f8\u3044\u3066\u3044\u304f\u30e1\u30ea\u30c3\u30c8\u304c\u7279\u306b\u5927\u304d\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nScala \u3084 Haskel \u306b\u306a\u3089\u3063\u3066\u3001 head :: tail \u3068\u3044\u3046\u69cb\u9020\u306b\u3057\u307e\u3059\u3002\nexport interface ILazyArray<A> {\n    head: A;\n    tail: ILazyArray<A>;\n}\n\n\n\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u30e1\u30bd\u30c3\u30c9\n\u7121\u9650\u9577\u3092\u6271\u3046\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\nES6 \u3067\u5c0e\u5165\u3055\u308c\u305f\u3001 generator function \u3092\u5229\u7528\u3067\u304d\u308b\u3068\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n// \u7121\u9650\u9577\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u914d\u5217\u306e\u751f\u6210\nlet fibonacci = LazyArray(function*() {\n    let pre = 0, cur = 1;\n    for (;;) {\n      let temp = pre;\n      pre = cur;\n      cur += temp;\n      yield cur;\n    }\n}());\n\n\u4f7f\u3044\u52dd\u624b\u3092\u8003\u3048\u308b\u3068\u3001 native \u306a\u914d\u5217\u304b\u3089\u3082\u751f\u6210\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u305f\u65b9\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\nlet lazyArray = LazyArray([0, 1, 2]);\n\n\u5e78\u3044\u3001 native \u306a\u914d\u5217\u3082\u3001 generator function \u306e\u5b9f\u884c\u7d50\u679c\u3082\u3001 TypeScript \u3067 {[Symbol.iterator](): IterableIterator<A>;} \u3068\u3044\u3046\u578b\u3068\u3057\u3066\u8868\u73fe\u3067\u304d\u308b\u306e\u3067\u3001 LazyArray \u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nexport function LazyArray<A>(arg: {[Symbol.iterator](): IterableIterator<A>;}): ILazyArray<A> {\n    let iterator = arg[Symbol.iterator](),\n        head = iterator.next(),\n        headValue = head.value;\n    if (head.done) {\n        if (typeof headValue === 'undefined') {\n            return Empty;\n        } else {\n            return Empty.append(headValue);\n        }\n    } else {\n        return new LazyArrayImpl(\n            () => {\n                return headValue;\n            },\n            () => {\n                return LazyArray(iterator);\n            }\n        );\n    }\n}\n\nclass LazyArrayImpl<A> implements ILazyArray<A> {\n    private _head: A;\n    private headEvaluated = false;\n    private _tail: ILazyArray<A>;\n    private tailEvaluated = false;\n\n    constructor(\n        private getHead: () => A,\n        private getTail: () => ILazyArray<A>\n    ) {}\n\n    get head(): A {\n        if (!this.headEvaluated) {\n            this.headEvaluated = true;\n            this._head = this.getHead();\n        }\n        return this._head;\n    }\n\n    get tail(): ILazyArray<A> {\n        if (!this.tailEvaluated) {\n            this.tailEvaluated = true;\n            this._tail = this.getTail();\n        }\n        return this._tail;\n    }\n\n    // \u4ee5\u4e0b\u7565\n}\n\nexport const Empty: ILazyArray<any> = {\n    // \u7565\n}\n\n\u6ce5\u81ed\u3055\u306f\u3042\u308a\u307e\u3059\u304c\u3001 LazyArrayImpl \u3067 head, tail \u304c\u9045\u5ef6\u8a55\u4fa1\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u304a\u5206\u304b\u308a\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53f3\u7573\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9 reduceRight \u3068\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u305f Collection API \u306e\u5b9f\u88c5\nmap \u3084 filter \u306a\u3069\u306e Collection API \u3092\u9045\u5ef6\u8a55\u4fa1\u3067\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u6700\u521d\u306b\u9045\u5ef6\u8a55\u4fa1\u3067\u5b9f\u884c\u3055\u308c\u308b\u53f3\u7573\u307f\u8fbc\u307f\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059\u3002\n\u306a\u304a\u3001\u305d\u3082\u305d\u3082\u53f3\u7573\u307f\u8fbc\u307f\u3068\u306f\u4f55\u305e\u3084\u3068\u3044\u3046\u8aac\u660e\u306f\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\nclass LazyArrayImpl<A> implements ILazyArray<A> {\n\n    // \u524d\u7565\n\n    reduceRight<B>(f: (acc: () => B, current: () => A, index: number) => B, initial: B, index = 0): B {\n        let acc: B = null,\n            accEvaluated = false;\n        return f(\n            () => {\n                if (!accEvaluated) {\n                    accEvaluated = true;\n                    acc = (<LazyArrayImpl<A>>this.tail).reduceRight(f, initial, index + 1);\n                }\n                return acc;\n            },\n            () => {\n                return this.head;\n            },\n            index\n        );\n    }\n\n    // \u5f8c\u7565\n\n}\n\nreduceRight \u306e\u7b2c\u4e00\u5f15\u6570\u306b\u6e21\u3059\u95a2\u6570\u306e\u4e2d\u3067\u306f\u3001\u305d\u306e\u8981\u7d20\u307e\u3067\u306e\u7573\u307f\u8fbc\u307f\u7d50\u679c\u3084\u3001\u73fe\u5728\u306e\u8981\u7d20\u306e\u5024\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3046\u3061\u3001\u305d\u306e\u8981\u7d20\u307e\u3067\u306e\u7573\u307f\u8fbc\u307f\u7d50\u679c\u3068\u73fe\u5728\u306e\u8981\u7d20\u306e\u5024\u306f\u3001\u9045\u5ef6\u8a55\u4fa1\uff08\u95a2\u6570\u306e\u4e2d\u3067\u53c2\u7167\u3057\u305f\u6642\u70b9\u3067\u521d\u3081\u3066\u8a55\u4fa1\uff09\u3055\u308c\u307e\u3059\u3002\n\u3053\u306e\u9045\u5ef6\u8a55\u4fa1\u306e\u52b9\u679c\u306f\u3001 reduceRight \u3092\u5229\u7528\u3057\u305f some \u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n    some(f: (a: A, index: number) => boolean): boolean {\n        return this.reduceRight((acc: () => boolean, current: () => A, index: number) => {\n            return f(current(), index) || acc();\n        }, false);\n    }\n\nreduceRight \u306b\u6e21\u3057\u3066\u3044\u308b\u95a2\u6570\u306e\u4e2d\u3067\u3001 f(current(), index) \u304c true \u3092\u8fd4\u305b\u3070\u3001 acc() \u306f\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002\n\u3057\u305f\u304c\u3063\u3066\u305f\u3068\u3048\u3070\u3001\nlet containsOdd = LazyArray([0,1,2,3]).some((n: number) => { return n % 2 === 1; });\n\n\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u5834\u5408\u3001\u914d\u5217\u306e 2 \u756a\u76ee\u306e\u8981\u7d20 (= 1) \u306e\u6642\u70b9\u3067\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u305f\u3081\u3001\u4ee5\u964d\u306e\u8981\u7d20\u306b\u5bfe\u3059\u308b\u8a08\u7b97\u306f\u884c\u308f\u308c\u307e\u305b\u3093\u3002\n\u540c\u69d8\u306b\u3001 reduceRight \u3092\u5229\u7528\u3057\u305f\u3001 map, filter \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n    map<B>(f: (a: A, index: number) => B): ILazyArray<B> {\n        return this.reduceRight((acc: () => ILazyArray<B>, current: () => A, index: number) => {\n            return new LazyArrayImpl(\n                () => {\n                    return f(current(), index);\n                },\n                () => {\n                    return acc();\n                }\n            );\n        }, Empty);\n    }\n\n    filter(f: (a: A, index: number) => boolean): ILazyArray<A> {\n        return this.reduceRight((acc: () => ILazyArray<A>, current: () => A, index: number) => {\n            if (f(current(), index)) {\n                return new LazyArrayImpl(\n                    () => {\n                        return current();\n                    },\n                    () => {\n                        return acc();\n                    }\n                );\n            } else {\n                return acc();\n            }\n        }, Empty);\n    }\n\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6bd4\u8f03\n\u5b9f\u88c5\u3057\u305f LazyArray \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u3044\u304b\u307b\u3069\u306e\u3082\u306e\u304b\u3001\u4ed6\u306e\u5b9f\u88c5\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u6bd4\u8f03\u5bfe\u8c61\n\nnative \u306e\u914d\u5217\nlodash\n\nLazy.js\n\n\u3053\u308c\u3082\u300c\u9045\u5ef6\u8a55\u4fa1\u3067\u65e9\u304f\u306a\u3063\u3066\u3044\u308b\u300d\u3053\u3068\u3092\u58f2\u308a\u306b\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\u3088\u304f\u77e5\u3089\u306a\u304b\u3063\u305f\u304c\u3001\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u3068\u3066\u3082\u901f\u305d\u3046\u3060\u3057\u3001 github \u306e star \u3082\u591a\u3044\u306e\u3067\u3001\u6bd4\u8f03\u5bfe\u8c61\u306b\u8ffd\u52a0\u3002\n\n\n\n\n\u6bd4\u8f03\u65b9\u6cd5\n\u3042\u308b\u9577\u3055\u306e\u914d\u5217\u306b\u5bfe\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u6642\u9593\u3092\u8a08\u6e2c\u3059\u308b\u3002\n\n\nmap \u30e1\u30bd\u30c3\u30c9\u3092 1000 \u56de\u7e70\u308a\u8fd4\u3059\n\ntake \u30e1\u30bd\u30c3\u30c9\u3067\u5148\u982d\u306e 10 \u8981\u7d20\u3092\u53d6\u5f97\u3057\u3066\u7d50\u679c\u3092 native \u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b x 1\n\ntake \u30e1\u30bd\u30c3\u30c9\u3067\u5148\u982d\u306e 10 \u8981\u7d20\u3092\u53d6\u5f97\u3057\u3066\u7d50\u679c\u3092 native \u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b x 100\n\n\u3053\u3053\u307e\u3067\u306e\u5185\u5bb9\u3092\u3061\u3083\u3093\u3068\u8aad\u3093\u3067\u3053\u3089\u308c\u305f\u65b9\u306f\u3001\u3053\u306e\u65b9\u6cd5\u3067\u306e\u6bd4\u8f03\u304c\u304b\u306a\u308a\u300c\u305a\u308b\u3044\u300d\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u5bdf\u305b\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\ntake \u30e1\u30bd\u30c3\u30c9\u3067\u5148\u982d\u306e\u8981\u7d20\u3060\u3051\u306b\u7d5e\u308a\u8fbc\u3080\u3068\u3001 LazyArray \u306f\u5b9f\u969b\u306b\u306f\u305d\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3057\u304b map \u306b\u3088\u308b\u8a08\u7b97\u3092\u884c\u308f\u306a\u3044\u306e\u3067\u3001\u65e9\u304f\u306a\u308b\u306e\u306f\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\u305d\u3046\u3044\u3046\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f\u3042\u307e\u308a\u4e00\u822c\u7684\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\u305f\u3060\u3001\u3053\u306e\u6bd4\u8f03\u306f\u9045\u5ef6\u8a55\u4fa1\u306e\u7279\u6027\u3092\u7406\u89e3\u3057\u3066\u3044\u305f\u3060\u304f\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308b\u3068\u3054\u7406\u89e3\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001 3 \u306e\u624b\u9806\u3092\u8ffd\u52a0\u3057\u305f\u306e\u306f\u3001 Lazy.js \u306e\u5b9f\u88c5\u3092\u898b\u305f\u3089\u3001\u8a55\u4fa1\u3092\u9045\u5ef6\u3055\u305b\u308b\u3060\u3051\u3067\u8a55\u4fa1\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u305f\u305f\u3081\u3001\u5c11\u3057\u610f\u5730\u60aa\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n\n\u7d50\u679c\nChrome 44 \u3067\u5b9f\u884c\u3057\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\uff083 \u56de\u5206\u306e\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3092\u8868\u793a\uff09\u3002\n\n\n\nImplementation\nArray length\nMap (ms)\nTake x 1 (ms)\nTake x 100 (ms)\nTotal (ms)\n\n\n\n\nNative\n100\n16.0 \u00b1 2.6\n0.3 \u00b1 0.6\n2.0 \u00b1 1.0\n18.3 \u00b1 3.1\n\n\nNative\n10000\n915.3 \u00b1 120.8\n0.0 \u00b1 0.0\n1.3 \u00b1 0.6\n916.7 \u00b1 120.9\n\n\nLazyArray\n100\n3.3 \u00b1 0.6\n22.7 \u00b1 3.8\n5.3 \u00b1 2.5\n31.3 \u00b1 2.5\n\n\nLazyArray\n10000\n0.7 \u00b1 0.6\n11.7 \u00b1 4.0\n2.7 \u00b1 1.2\n15.0 \u00b1 4.6\n\n\nLazy.js\n100\n0.7 \u00b1 0.6\n41.0 \u00b1 1.0\n3562.0 \u00b1 196.0\n3603.7 \u00b1 197.5\n\n\nLazy.js\n10000\n1.0 \u00b1 0.0\n51.7 \u00b1 5.5\n3529.3 \u00b1 308.9\n3582.0 \u00b1 314.0\n\n\nlodash\n100\n4.3 \u00b1 0.6\n0.3 \u00b1 0.6\n2.0 \u00b1 0.0\n6.7 \u00b1 0.6\n\n\nlodash\n10000\n53.7 \u00b1 9.8\n0.3 \u00b1 0.6\n1.7 \u00b1 0.6\n55.7 \u00b1 9.9\n\n\n\n\n\u8003\u5bdf\n\u51fa\u6765\u30ec\u30fc\u30b9\u7684\u306a\u30a2\u30ec\u306a\u306e\u3067\u3001\u914d\u5217\u306e\u9577\u3055\u304c\u9577\u3044\u3068\u304d\u306f\u3001\u7d50\u679c\u3068\u3057\u3066 LazyArray \u304c\u4e00\u756a\u65e9\u304b\u3063\u305f\u306e\u306f\u5f53\u7136\u3068\u3057\u3066\u3001\u4e0a\u8a18\u306e\u7d50\u679c\u304b\u3089\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u8003\u5bdf\u3055\u308c\u307e\u3059\u3002\n\n\u7121\u99c4\u306a\u30eb\u30fc\u30d7\u3092\u306a\u304f\u3059\u30e1\u30ea\u30c3\u30c8\u3088\u308a\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u306e\u30b3\u30b9\u30c8\u306b\u3088\u308b\u30c7\u30e1\u30ea\u30c3\u30c8\u306e\u65b9\u304c\u5927\u304d\u3044\nmap \u306e\u5b9f\u969b\u306e\u8a08\u7b97\u306f\u3001 native \u306a\u914d\u5217\u3084 lodash \u3067\u306f 'Map' \u306e\u5217\u3067\u3001 LazyArray \u3084 Lazy.js \u3067\u306f 'Take x 1' \u306e\u5217\u3067\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\nLazy \u52e2\u304c\u5b9f\u969b\u306b\u306f\u5148\u982d\u306e 10 \u8981\u7d20\u3057\u304b\u8a08\u7b97\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u8003\u616e\u3059\u308b\u3068\u3001\u975e Lazy \u52e2\u3088\u308a\u3082\u5b9f\u8cea\u7684\u306b\u8a08\u7b97\u304c\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u30eb\u30fc\u30d7\u306e\u56de\u6570\u306f\u6e1b\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u305f\u3068\u3048\u3070 LazyArray \u3067\u306f map \u3092\u4e00\u56de\u8a08\u7b97\u3059\u308b\u3054\u3068\u306b LazyArrayImpl \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001 native \u306a\u914d\u5217\u3060\u3051\u3067\u6e08\u3080\u5834\u5408\u3068\u6bd4\u3079\u3066\u305d\u306e\u70b9\u304c\u5927\u304d\u306a\u30b3\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\nlodash \u901f\u3044\nlodash \u304c native \u306e\u914d\u5217\u3068\u6bd4\u3079\u3066\u6709\u610f\u306b\u901f\u304b\u3063\u305f\u3067\u3059\u3002 native \u306e\u914d\u5217\u306e map \u306f\u3001\u3082\u3061\u308d\u3093 map \u30e1\u30bd\u30c3\u30c9\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u305f\u306e\u3067\u3059\u304c\u3001 lodash \u306e map \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n    /**\n     * A specialized version of `_.map` for arrays without support for callback\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function arrayMap(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n      }\n      return result;\n    }\n\n\u3042\u3001 map \u4f7f\u3046\u3088\u308a while \u306e\u30eb\u30fc\u30d7\u3067\u56de\u3059\u307b\u3046\u304c\u901f\u3044\u3093\u3067\u3059\u306d\u3002\u3002\uff08\u5b9f\u884c\u74b0\u5883\u306b\u3088\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\uff09\n\u307e\u305f\u3001 result \u306f\u6700\u521d\u306b\u9577\u3055\u3092\u6c7a\u3081\u3066\u521d\u671f\u5316\u3057\u3066\u3001 result[index] \u306b\u5024\u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3082 [] \u3067\u521d\u671f\u5316\u3057\u3066 result.push \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3088\u308a\u901f\u3044\u3088\u3046\u3067\u3059\u3002\n\nLazy.js \u306f\u3084\u306f\u308a\u8a55\u4fa1\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u304a\u3089\u305a\u3001\u6b8b\u5ff5\nLazy.js \u306f\u3001\u4e88\u60f3\u901a\u308a\u8a55\u4fa1\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3001 take x 100 \u306e\u3068\u3053\u308d\u3067\u3001 take x 1 \u306e\u7d04 100 \u500d\u306e\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u3053\u308c\u3060\u3068\u9045\u5ef6\u8a55\u4fa1\u3068\u3044\u3046\u3088\u308a\u306f\u5358\u306b\u90fd\u5ea6\u8a08\u7b97\u3059\u308b\u3068\u3044\u3046\u3060\u3051\u306a\u306e\u3067\u3001\u6b63\u76f4\u30a4\u30b1\u3066\u306a\u3044\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7684\u306b\u306f\u3001\u914d\u5217\u306e\u9045\u5ef6\u8a55\u4fa1\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u3042\u307e\u308a\u30e1\u30ea\u30c3\u30c8\u304c\u306a\u304b\u3063\u305f\n\u7121\u9650\u914d\u5217\u3092\u6271\u3046\u307f\u305f\u3044\u306a\u76ee\u7684\u306a\u3089\u3001\u4f7f\u3048\u308b\u304b\u3082\n\n\n\u306a\u304a\u3001\u5358\u306b\u7121\u9650\u914d\u5217\u3092\u6271\u3046\u3060\u3051\u306a\u3089\u3001 generator function \u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u5f97\u308b\u304c\u3001 generator function \u306f\u53c2\u7167\u900f\u904e\u3067\u306a\u3044\u306e\u3067\u3001\u4f55\u3089\u304b\u306e\u5f62\u3067\u30e9\u30c3\u30d7\u3057\u305f\u65b9\u304c\u4f7f\u3044\u52dd\u624b\u306f\u3088\u304f\u306a\u308b\u3068\u601d\u308f\u308c\u308b\n\n\n\n\n\u305d\u306e\u4ed6\n\u5927\u4e8b\u306a\u3053\u3068\u3092\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u5c0e\u5165\u3057\u305f\u5834\u5408\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u518d\u5e30\u547c\u3073\u51fa\u3057\u3092\u672b\u5c3e\u518d\u5e30\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3057\u305f\u304c\u3063\u3066\u3001\u672b\u5c3e\u518d\u5e30\u6700\u9069\u5316\u3092\u9069\u7528\u3067\u304d\u305a\u3001 stack \u304c overflow \u3059\u308b\u30ea\u30b9\u30af\u3092\u62b1\u3048\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070 Haskell \u3067\u306f\u3001\u3053\u306e\u554f\u984c\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3001\u7573\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u3001\u9045\u5ef6\u8a55\u4fa1\u3059\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3057\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u305d\u308c\u305e\u308c\u63d0\u4f9b\u3057\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u4eca\u56de\u4f5c\u3063\u305f LazyArray \u306f\u305d\u3053\u307e\u3067\u4f5c\u308a\u3053\u3093\u3067\u3044\u307e\u305b\u3093\u3002\n\u300c[Scala\u95a2\u6570\u578b\u30c7\u30b6\u30a4\u30f3&\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u2015Scalaz\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf\u30fc\u306b\u3088\u308b\u95a2\u6570\u578b\u5fb9\u5e95\u30ac\u30a4\u30c9](http://www.amazon.co.jp/dp/4844337769/?tag=hatena_st1-22&ascsubtag=d-bkq53)\u300d\uff08\u4ee5\u4e0b\u3001 FP in Scala\uff09\u3068\u3044\u3046\u672c\u3092\u8aad\u3093\u3067\u3044\u307e\u3059\u3002  \n\u3068\u3053\u308d\u3069\u3053\u308d\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6f14\u7fd2\u554f\u984c\u304c\u51fa\u3066\u304d\u3066\u3001\u3053\u308c\u3092\u89e3\u3044\u3066\u3044\u304b\u306a\u3044\u3068\u3061\u3083\u3093\u3068\u7406\u89e3\u3067\u304d\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3001 Scala \u3067\u66f8\u304f\u306e\u3082\u5f53\u305f\u308a\u524d\u3059\u304e\u3066\u3064\u307e\u3089\u306a\u3044\uff08\uff1f\uff09\u306e\u3067\u3001 JavaScript (TypeScript) \u3067\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002  \n\u4eca\u56de\u306f\u7b2c5\u7ae0\u306b\u51fa\u3066\u304f\u308b\u9045\u5ef6\u8a55\u4fa1\u3092\u53d6\u308a\u4e0a\u3052\u307e\u3059\uff08\u6b21\u56de\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\uff09\u3002  \n\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n* https://github.com/kimamula/fp-in-javascript/tree/master/lazy-array\n\n# \u9045\u5ef6\u8a55\u4fa1\u3068\u306f\n\u300c\u5b9f\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067\u3001\u5024\u306e\u8a55\u4fa1\u3092\u9045\u5ef6\u3055\u305b\u308b\u300d\u3053\u3068\u3067\u3059\u3002 Haskell \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u9045\u5ef6\u8a55\u4fa1\u3067\u3059\u3057\u3001 Scala \u3067\u3082\u660e\u793a\u7684\u306b\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3067\u9045\u5ef6\u8a55\u4fa1\u3092\u4f7f\u3048\u307e\u3059\u3002\n\u305d\u306e\u52b9\u679c\u3092\u7406\u89e3\u3059\u308b\u3046\u3048\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u304c\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u914d\u5217\uff08\u30ea\u30b9\u30c8\uff09\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n## \u914d\u5217\u3092\u9045\u5ef6\u8a55\u4fa1\u3059\u308b\u30e1\u30ea\u30c3\u30c8\n### \u7121\u9650\u9577\u306e\u914d\u5217\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\nHaskell \u3067\u306f\u305f\u3068\u3048\u3070\u3001 \u5076\u6570\u3092\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u305f\u7121\u9650\u9577\u306e\u30ea\u30b9\u30c8\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u751f\u6210\u3067\u304d\u307e\u3059\u3002\n\n```hs\nlet evens = [2,4..] \n```\n\n`evens` \u306f\u7121\u9650\u9577\u306e\u30ea\u30b9\u30c8\u3067\u3059\u304c\u3001\u8a55\u4fa1\u304c\u9045\u5ef6\u3055\u308c\u308b\u305f\u3081\u3001\u30e1\u30e2\u30ea\u3092\u307b\u3068\u3093\u3069\u6d88\u8cbb\u3057\u307e\u305b\u3093\u3002\u305f\u3068\u3048\u3070\u3001 `evens` \u306e 10 \u756a\u76ee\u306e\u6570\u5b57\u306f 20 \u3067\u3059\u304c\u3001\u305d\u308c\u306f\u5b9f\u969b\u306b\u305d\u306e\u5024\u3092\u53c2\u7167\u3057\u305f\u969b\u306b\u521d\u3081\u3066\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002  \n\u3082\u3061\u308d\u3093\u3001\u4e00\u5ea6\u8a55\u4fa1\u3055\u308c\u305f\u5024\u306f\u4f7f\u3044\u56de\u3055\u308c\u308b\u305f\u3081\u3001\u518d\u5ea6\u53c2\u7167\u3055\u308c\u305f\u969b\u306b\u518d\u8a08\u7b97\u3055\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n### Collection API \u3092\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u305f\u969b\u306b\u3001\u4e00\u6642\u7684\u306a\u30ea\u30b9\u30c8\u306e\u751f\u6210\u3084\u305d\u308c\u306b\u5bfe\u3059\u308b\u30eb\u30fc\u30d7\u304c\u767a\u751f\u3057\u306a\u3044\nFP in Scala \u306b\u767b\u5834\u3059\u308b\u4f8b\u3067\u3059\u304c\u3001\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u3001\n\n```scala\nList(1,2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n```\n\n\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u9806\u5e8f\u3067\u8a08\u7b97\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\n```scala\nList(1,2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\nList(11,12,13,14).filter(_ % 2 == 0).map(_ * 3)\n\nList(12,14).map(_ * 3)\n\nList(36,42)\n```\n\nmap \u3084 filter \u304c\u5b9f\u884c\u3055\u308c\u308b\u305f\u3073\u306b\u3001\u305d\u306e\u6642\u70b9\u3067\u4e00\u6642\u7684\u306a\u30ea\u30b9\u30c8\u304c\u751f\u6210\u3055\u308c\u30eb\u30fc\u30d7\u306b\u3088\u308a\u8d70\u67fb\u3055\u308c\u307e\u3059\u3002  \n\u3053\u308c\u306f\u3001 map \u3084 filter \u304c\u3001\u305d\u308c\u305e\u308c\u306e\u5b9f\u884c\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a08\u7b97\u3092\u3084\u308a\u9042\u3052\u3066\u3057\u307e\u3046\u304b\u3089\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u7121\u99c4\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u751f\u6210\u3084\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u6392\u3057\u305f\u3001\u52b9\u7387\u7684\u306a\u8a08\u7b97\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala\nLazyList(1,2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n(11 :: LazyList(2,3,4).map(_ + 10)).filter(_ % 2 == 0).map(_ * 3)\n\nLazyList(2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n(12 :: LazyList(3,4).map(_ + 10)).filter(_ % 2 == 0).map(_ * 3)\n\n(12 :: LazyList(3,4).map(_ + 10).filter(_ % 2 == 0)).map(_ * 3)\n\n36 :: LazyList(3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n36 :: (13 :: LazyList(4).map(_ + 10)).filter(_ % 2 == 0).map(_ * 3)\n\n36 :: LazyList(4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)\n\n36 :: LazyList(14).filter(_ % 2 == 0).map(_ * 3)\n\n36 :: LazyList(14).map(_ * 3)\n\nLazyList(36,42)\n```\n\n\u884c\u6570\u306f\u9577\u304f\u306a\u3063\u305f\u306e\u3067\u4eca\u4e00\u3064\u52b9\u7387\u5316\u3055\u308c\u305f\u611f\u304c\u5206\u304b\u308a\u3065\u3089\u3044\u6c17\u304c\u3057\u307e\u3059\u304c\u3002\u3002\u3002\n\n# \u5b9f\u88c5\nTypeScript \u3067\u3001\u9045\u5ef6\u8a55\u4fa1\u3055\u308c\u308b\u914d\u5217 `LazyArray` \u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002  \n\u50d5\u306f\u666e\u6bb5\u304b\u3089 JavaScript \u3092 TypeScript \u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u95a2\u6570\u578b\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u5834\u5408\u306f\u3001 TypeScript \u3067\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u304d\u3061\u3063\u3068\u5b9a\u7fa9\u3057\u3066\u66f8\u3044\u3066\u3044\u304f\u30e1\u30ea\u30c3\u30c8\u304c\u7279\u306b\u5927\u304d\u3044\u3068\u601d\u3044\u307e\u3059\u3002  \nScala \u3084 Haskel \u306b\u306a\u3089\u3063\u3066\u3001 `head :: tail` \u3068\u3044\u3046\u69cb\u9020\u306b\u3057\u307e\u3059\u3002\n\n```ts\nexport interface ILazyArray<A> {\n    head: A;\n    tail: ILazyArray<A>;\n}\n```\n\n## \u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u30e1\u30bd\u30c3\u30c9\n\n\u7121\u9650\u9577\u3092\u6271\u3046\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f  \nES6 \u3067\u5c0e\u5165\u3055\u308c\u305f\u3001 generator function \u3092\u5229\u7528\u3067\u304d\u308b\u3068\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n```ts\n// \u7121\u9650\u9577\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u914d\u5217\u306e\u751f\u6210\nlet fibonacci = LazyArray(function*() {\n    let pre = 0, cur = 1;\n    for (;;) {\n      let temp = pre;\n      pre = cur;\n      cur += temp;\n      yield cur;\n    }\n}());\n```\n\n\u4f7f\u3044\u52dd\u624b\u3092\u8003\u3048\u308b\u3068\u3001 native \u306a\u914d\u5217\u304b\u3089\u3082\u751f\u6210\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u305f\u65b9\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```ts\nlet lazyArray = LazyArray([0, 1, 2]);\n```\n\n\u5e78\u3044\u3001 native \u306a\u914d\u5217\u3082\u3001 generator function \u306e\u5b9f\u884c\u7d50\u679c\u3082\u3001 TypeScript \u3067 `{[Symbol.iterator](): IterableIterator<A>;}` \u3068\u3044\u3046\u578b\u3068\u3057\u3066\u8868\u73fe\u3067\u304d\u308b\u306e\u3067\u3001 `LazyArray` \u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```ts\nexport function LazyArray<A>(arg: {[Symbol.iterator](): IterableIterator<A>;}): ILazyArray<A> {\n    let iterator = arg[Symbol.iterator](),\n        head = iterator.next(),\n        headValue = head.value;\n    if (head.done) {\n        if (typeof headValue === 'undefined') {\n            return Empty;\n        } else {\n            return Empty.append(headValue);\n        }\n    } else {\n        return new LazyArrayImpl(\n            () => {\n                return headValue;\n            },\n            () => {\n                return LazyArray(iterator);\n            }\n        );\n    }\n}\n\nclass LazyArrayImpl<A> implements ILazyArray<A> {\n    private _head: A;\n    private headEvaluated = false;\n    private _tail: ILazyArray<A>;\n    private tailEvaluated = false;\n\n    constructor(\n        private getHead: () => A,\n        private getTail: () => ILazyArray<A>\n    ) {}\n\n    get head(): A {\n        if (!this.headEvaluated) {\n            this.headEvaluated = true;\n            this._head = this.getHead();\n        }\n        return this._head;\n    }\n\n    get tail(): ILazyArray<A> {\n        if (!this.tailEvaluated) {\n            this.tailEvaluated = true;\n            this._tail = this.getTail();\n        }\n        return this._tail;\n    }\n\n    // \u4ee5\u4e0b\u7565\n}\n\nexport const Empty: ILazyArray<any> = {\n    // \u7565\n}\n```\n\n\u6ce5\u81ed\u3055\u306f\u3042\u308a\u307e\u3059\u304c\u3001 `LazyArrayImpl` \u3067 head, tail \u304c\u9045\u5ef6\u8a55\u4fa1\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u304a\u5206\u304b\u308a\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u53f3\u7573\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9 `reduceRight` \u3068\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u305f Collection API \u306e\u5b9f\u88c5\nmap \u3084 filter \u306a\u3069\u306e Collection API \u3092\u9045\u5ef6\u8a55\u4fa1\u3067\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u6700\u521d\u306b\u9045\u5ef6\u8a55\u4fa1\u3067\u5b9f\u884c\u3055\u308c\u308b\u53f3\u7573\u307f\u8fbc\u307f\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059\u3002  \n\u306a\u304a\u3001\u305d\u3082\u305d\u3082\u53f3\u7573\u307f\u8fbc\u307f\u3068\u306f\u4f55\u305e\u3084\u3068\u3044\u3046\u8aac\u660e\u306f\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n```ts\nclass LazyArrayImpl<A> implements ILazyArray<A> {\n\n    // \u524d\u7565\n\n    reduceRight<B>(f: (acc: () => B, current: () => A, index: number) => B, initial: B, index = 0): B {\n        let acc: B = null,\n            accEvaluated = false;\n        return f(\n            () => {\n                if (!accEvaluated) {\n                    accEvaluated = true;\n                    acc = (<LazyArrayImpl<A>>this.tail).reduceRight(f, initial, index + 1);\n                }\n                return acc;\n            },\n            () => {\n                return this.head;\n            },\n            index\n        );\n    }\n\n    // \u5f8c\u7565\n\n}\n```\n\n`reduceRight` \u306e\u7b2c\u4e00\u5f15\u6570\u306b\u6e21\u3059\u95a2\u6570\u306e\u4e2d\u3067\u306f\u3001\u305d\u306e\u8981\u7d20\u307e\u3067\u306e\u7573\u307f\u8fbc\u307f\u7d50\u679c\u3084\u3001\u73fe\u5728\u306e\u8981\u7d20\u306e\u5024\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3046\u3061\u3001\u305d\u306e\u8981\u7d20\u307e\u3067\u306e\u7573\u307f\u8fbc\u307f\u7d50\u679c\u3068\u73fe\u5728\u306e\u8981\u7d20\u306e\u5024\u306f\u3001\u9045\u5ef6\u8a55\u4fa1\uff08\u95a2\u6570\u306e\u4e2d\u3067\u53c2\u7167\u3057\u305f\u6642\u70b9\u3067\u521d\u3081\u3066\u8a55\u4fa1\uff09\u3055\u308c\u307e\u3059\u3002  \n\u3053\u306e\u9045\u5ef6\u8a55\u4fa1\u306e\u52b9\u679c\u306f\u3001 `reduceRight` \u3092\u5229\u7528\u3057\u305f `some` \u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```ts\n    some(f: (a: A, index: number) => boolean): boolean {\n        return this.reduceRight((acc: () => boolean, current: () => A, index: number) => {\n            return f(current(), index) || acc();\n        }, false);\n    }\n```\n\n`reduceRight` \u306b\u6e21\u3057\u3066\u3044\u308b\u95a2\u6570\u306e\u4e2d\u3067\u3001 `f(current(), index)` \u304c `true` \u3092\u8fd4\u305b\u3070\u3001 `acc()` \u306f\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002\n\u3057\u305f\u304c\u3063\u3066\u305f\u3068\u3048\u3070\u3001\n\n```ts\nlet containsOdd = LazyArray([0,1,2,3]).some((n: number) => { return n % 2 === 1; });\n```\n\n\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u5834\u5408\u3001\u914d\u5217\u306e 2 \u756a\u76ee\u306e\u8981\u7d20 (= 1) \u306e\u6642\u70b9\u3067\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u305f\u3081\u3001\u4ee5\u964d\u306e\u8981\u7d20\u306b\u5bfe\u3059\u308b\u8a08\u7b97\u306f\u884c\u308f\u308c\u307e\u305b\u3093\u3002  \n\u540c\u69d8\u306b\u3001 `reduceRight` \u3092\u5229\u7528\u3057\u305f\u3001 `map`, `filter` \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```ts\n    map<B>(f: (a: A, index: number) => B): ILazyArray<B> {\n        return this.reduceRight((acc: () => ILazyArray<B>, current: () => A, index: number) => {\n            return new LazyArrayImpl(\n                () => {\n                    return f(current(), index);\n                },\n                () => {\n                    return acc();\n                }\n            );\n        }, Empty);\n    }\n\n    filter(f: (a: A, index: number) => boolean): ILazyArray<A> {\n        return this.reduceRight((acc: () => ILazyArray<A>, current: () => A, index: number) => {\n            if (f(current(), index)) {\n                return new LazyArrayImpl(\n                    () => {\n                        return current();\n                    },\n                    () => {\n                        return acc();\n                    }\n                );\n            } else {\n                return acc();\n            }\n        }, Empty);\n    }\n```\n\n# \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6bd4\u8f03\n\u5b9f\u88c5\u3057\u305f `LazyArray` \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u3044\u304b\u307b\u3069\u306e\u3082\u306e\u304b\u3001\u4ed6\u306e\u5b9f\u88c5\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u6bd4\u8f03\u5bfe\u8c61\n* native \u306e\u914d\u5217\n* [lodash](https://github.com/lodash/lodash)\n* [Lazy.js](https://github.com/dtao/lazy.js)\n  * \u3053\u308c\u3082\u300c\u9045\u5ef6\u8a55\u4fa1\u3067\u65e9\u304f\u306a\u3063\u3066\u3044\u308b\u300d\u3053\u3068\u3092\u58f2\u308a\u306b\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n  * \u3088\u304f\u77e5\u3089\u306a\u304b\u3063\u305f\u304c\u3001\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u3068\u3066\u3082\u901f\u305d\u3046\u3060\u3057\u3001 github \u306e star \u3082\u591a\u3044\u306e\u3067\u3001\u6bd4\u8f03\u5bfe\u8c61\u306b\u8ffd\u52a0\u3002\n\n## \u6bd4\u8f03\u65b9\u6cd5\n\u3042\u308b\u9577\u3055\u306e\u914d\u5217\u306b\u5bfe\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u6642\u9593\u3092\u8a08\u6e2c\u3059\u308b\u3002\n\n1. `map` \u30e1\u30bd\u30c3\u30c9\u3092 1000 \u56de\u7e70\u308a\u8fd4\u3059\n2. `take` \u30e1\u30bd\u30c3\u30c9\u3067\u5148\u982d\u306e 10 \u8981\u7d20\u3092\u53d6\u5f97\u3057\u3066\u7d50\u679c\u3092 native \u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b x 1\n3. `take` \u30e1\u30bd\u30c3\u30c9\u3067\u5148\u982d\u306e 10 \u8981\u7d20\u3092\u53d6\u5f97\u3057\u3066\u7d50\u679c\u3092 native \u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b x 100\n\n\u3053\u3053\u307e\u3067\u306e\u5185\u5bb9\u3092\u3061\u3083\u3093\u3068\u8aad\u3093\u3067\u3053\u3089\u308c\u305f\u65b9\u306f\u3001\u3053\u306e\u65b9\u6cd5\u3067\u306e\u6bd4\u8f03\u304c\u304b\u306a\u308a\u300c\u305a\u308b\u3044\u300d\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u5bdf\u305b\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002  \n`take` \u30e1\u30bd\u30c3\u30c9\u3067\u5148\u982d\u306e\u8981\u7d20\u3060\u3051\u306b\u7d5e\u308a\u8fbc\u3080\u3068\u3001 `LazyArray` \u306f\u5b9f\u969b\u306b\u306f\u305d\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3057\u304b `map` \u306b\u3088\u308b\u8a08\u7b97\u3092\u884c\u308f\u306a\u3044\u306e\u3067\u3001\u65e9\u304f\u306a\u308b\u306e\u306f\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\u305d\u3046\u3044\u3046\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f\u3042\u307e\u308a\u4e00\u822c\u7684\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002  \n\u305f\u3060\u3001\u3053\u306e\u6bd4\u8f03\u306f\u9045\u5ef6\u8a55\u4fa1\u306e\u7279\u6027\u3092\u7406\u89e3\u3057\u3066\u3044\u305f\u3060\u304f\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308b\u3068\u3054\u7406\u89e3\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002  \n\u306a\u304a\u3001 3 \u306e\u624b\u9806\u3092\u8ffd\u52a0\u3057\u305f\u306e\u306f\u3001 Lazy.js \u306e\u5b9f\u88c5\u3092\u898b\u305f\u3089\u3001\u8a55\u4fa1\u3092\u9045\u5ef6\u3055\u305b\u308b\u3060\u3051\u3067\u8a55\u4fa1\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u305f\u305f\u3081\u3001\u5c11\u3057\u610f\u5730\u60aa\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n\n## \u7d50\u679c\nChrome 44 \u3067\u5b9f\u884c\u3057\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\uff083 \u56de\u5206\u306e\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3092\u8868\u793a\uff09\u3002\n\nImplementation | Array length | Map (ms) | Take x 1 (ms) | Take x 100 (ms) | Total (ms)\n-------------- | ------------ | ------------ | ------------- | --------------- | -----------\nNative | 100   | 16.0 \u00b1 2.6 | 0.3 \u00b1 0.6 | 2.0 \u00b1 1.0 | 18.3 \u00b1 3.1\nNative | 10000 | 915.3 \u00b1 120.8 | 0.0 \u00b1 0.0 | 1.3 \u00b1 0.6 | 916.7 \u00b1 120.9\nLazyArray | 100   | 3.3 \u00b1 0.6 | 22.7 \u00b1 3.8 | 5.3 \u00b1 2.5 | 31.3 \u00b1 2.5\nLazyArray | 10000 | 0.7 \u00b1 0.6 | 11.7 \u00b1 4.0 | 2.7 \u00b1 1.2 | 15.0 \u00b1 4.6\nLazy.js | 100   | 0.7 \u00b1 0.6 | 41.0 \u00b1 1.0 | 3562.0 \u00b1 196.0 | 3603.7 \u00b1 197.5\nLazy.js | 10000 | 1.0 \u00b1 0.0 | 51.7 \u00b1 5.5 | 3529.3 \u00b1 308.9 | 3582.0 \u00b1 314.0\nlodash | 100   | 4.3 \u00b1 0.6 | 0.3 \u00b1 0.6 | 2.0 \u00b1 0.0 | 6.7 \u00b1 0.6\nlodash | 10000 | 53.7 \u00b1 9.8 | 0.3 \u00b1 0.6 | 1.7 \u00b1 0.6 | 55.7 \u00b1 9.9\n\n## \u8003\u5bdf\n\u51fa\u6765\u30ec\u30fc\u30b9\u7684\u306a\u30a2\u30ec\u306a\u306e\u3067\u3001\u914d\u5217\u306e\u9577\u3055\u304c\u9577\u3044\u3068\u304d\u306f\u3001\u7d50\u679c\u3068\u3057\u3066 LazyArray \u304c\u4e00\u756a\u65e9\u304b\u3063\u305f\u306e\u306f\u5f53\u7136\u3068\u3057\u3066\u3001\u4e0a\u8a18\u306e\u7d50\u679c\u304b\u3089\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u8003\u5bdf\u3055\u308c\u307e\u3059\u3002\n\n### \u7121\u99c4\u306a\u30eb\u30fc\u30d7\u3092\u306a\u304f\u3059\u30e1\u30ea\u30c3\u30c8\u3088\u308a\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u306e\u30b3\u30b9\u30c8\u306b\u3088\u308b\u30c7\u30e1\u30ea\u30c3\u30c8\u306e\u65b9\u304c\u5927\u304d\u3044\n`map` \u306e\u5b9f\u969b\u306e\u8a08\u7b97\u306f\u3001 native \u306a\u914d\u5217\u3084 lodash \u3067\u306f 'Map' \u306e\u5217\u3067\u3001 LazyArray \u3084 Lazy.js \u3067\u306f 'Take x 1' \u306e\u5217\u3067\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002  \nLazy \u52e2\u304c\u5b9f\u969b\u306b\u306f\u5148\u982d\u306e 10 \u8981\u7d20\u3057\u304b\u8a08\u7b97\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u8003\u616e\u3059\u308b\u3068\u3001\u975e Lazy \u52e2\u3088\u308a\u3082\u5b9f\u8cea\u7684\u306b\u8a08\u7b97\u304c\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002  \n\u30eb\u30fc\u30d7\u306e\u56de\u6570\u306f\u6e1b\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u305f\u3068\u3048\u3070 LazyArray \u3067\u306f `map` \u3092\u4e00\u56de\u8a08\u7b97\u3059\u308b\u3054\u3068\u306b `LazyArrayImpl` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001 native \u306a\u914d\u5217\u3060\u3051\u3067\u6e08\u3080\u5834\u5408\u3068\u6bd4\u3079\u3066\u305d\u306e\u70b9\u304c\u5927\u304d\u306a\u30b3\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n### lodash \u901f\u3044\nlodash \u304c native \u306e\u914d\u5217\u3068\u6bd4\u3079\u3066\u6709\u610f\u306b\u901f\u304b\u3063\u305f\u3067\u3059\u3002 native \u306e\u914d\u5217\u306e `map` \u306f\u3001\u3082\u3061\u308d\u3093 `map` \u30e1\u30bd\u30c3\u30c9\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u305f\u306e\u3067\u3059\u304c\u3001 lodash \u306e `map` \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```js\n    /**\n     * A specialized version of `_.map` for arrays without support for callback\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function arrayMap(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n      }\n      return result;\n    }\n```\n\n\u3042\u3001 `map` \u4f7f\u3046\u3088\u308a `while` \u306e\u30eb\u30fc\u30d7\u3067\u56de\u3059\u307b\u3046\u304c\u901f\u3044\u3093\u3067\u3059\u306d\u3002\u3002\uff08\u5b9f\u884c\u74b0\u5883\u306b\u3088\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\uff09  \n\u307e\u305f\u3001 `result` \u306f\u6700\u521d\u306b\u9577\u3055\u3092\u6c7a\u3081\u3066\u521d\u671f\u5316\u3057\u3066\u3001 `result[index]` \u306b\u5024\u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3082 `[]` \u3067\u521d\u671f\u5316\u3057\u3066 `result.push` \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3088\u308a\u901f\u3044\u3088\u3046\u3067\u3059\u3002\n\n### Lazy.js \u306f\u3084\u306f\u308a\u8a55\u4fa1\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u304a\u3089\u305a\u3001\u6b8b\u5ff5\nLazy.js \u306f\u3001\u4e88\u60f3\u901a\u308a\u8a55\u4fa1\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3001 take x 100 \u306e\u3068\u3053\u308d\u3067\u3001 take x 1 \u306e\u7d04 100 \u500d\u306e\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002  \n\u3053\u308c\u3060\u3068\u9045\u5ef6\u8a55\u4fa1\u3068\u3044\u3046\u3088\u308a\u306f\u5358\u306b\u90fd\u5ea6\u8a08\u7b97\u3059\u308b\u3068\u3044\u3046\u3060\u3051\u306a\u306e\u3067\u3001\u6b63\u76f4\u30a4\u30b1\u3066\u306a\u3044\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n* \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7684\u306b\u306f\u3001\u914d\u5217\u306e\u9045\u5ef6\u8a55\u4fa1\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u3042\u307e\u308a\u30e1\u30ea\u30c3\u30c8\u304c\u306a\u304b\u3063\u305f\n* \u7121\u9650\u914d\u5217\u3092\u6271\u3046\u307f\u305f\u3044\u306a\u76ee\u7684\u306a\u3089\u3001\u4f7f\u3048\u308b\u304b\u3082\n  * \u306a\u304a\u3001\u5358\u306b\u7121\u9650\u914d\u5217\u3092\u6271\u3046\u3060\u3051\u306a\u3089\u3001 generator function \u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u5f97\u308b\u304c\u3001 generator function \u306f\u53c2\u7167\u900f\u904e\u3067\u306a\u3044\u306e\u3067\u3001\u4f55\u3089\u304b\u306e\u5f62\u3067\u30e9\u30c3\u30d7\u3057\u305f\u65b9\u304c\u4f7f\u3044\u52dd\u624b\u306f\u3088\u304f\u306a\u308b\u3068\u601d\u308f\u308c\u308b\n\n# \u305d\u306e\u4ed6\n\u5927\u4e8b\u306a\u3053\u3068\u3092\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u5c0e\u5165\u3057\u305f\u5834\u5408\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u518d\u5e30\u547c\u3073\u51fa\u3057\u3092\u672b\u5c3e\u518d\u5e30\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002  \n\u3057\u305f\u304c\u3063\u3066\u3001\u672b\u5c3e\u518d\u5e30\u6700\u9069\u5316\u3092\u9069\u7528\u3067\u304d\u305a\u3001 stack \u304c overflow \u3059\u308b\u30ea\u30b9\u30af\u3092\u62b1\u3048\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002  \n\u305f\u3068\u3048\u3070 Haskell \u3067\u306f\u3001\u3053\u306e\u554f\u984c\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3001\u7573\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u3001\u9045\u5ef6\u8a55\u4fa1\u3059\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3057\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u305d\u308c\u305e\u308c\u63d0\u4f9b\u3057\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u4eca\u56de\u4f5c\u3063\u305f `LazyArray` \u306f\u305d\u3053\u307e\u3067\u4f5c\u308a\u3053\u3093\u3067\u3044\u307e\u305b\u3093\u3002\n"}