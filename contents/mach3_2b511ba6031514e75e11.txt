{"context": " More than 1 year has passed since last update.pngquant\u306b\u9650\u3063\u305f\u4e8b\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001grunt\u7b49\u3067\u516c\u958b\u7528\u306e\u30c7\u30fc\u30bf\u3092\u30d3\u30eb\u30c9\u3059\u308b\u5834\u5408\u3001\u57fa\u672c\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u66f4\u65b0\u6642\u523b\u306f\u30d3\u30eb\u30c9\u3057\u305f\u6642\u70b9\u306e\u7269\u3068\u306a\u308a\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3057\u3066\u3044\u308b\u306e\u3067\u5f53\u305f\u308a\u524d\u3067\u3059\u306d\u3002\n\u30c7\u30d7\u30ed\u30a4\u306e\u65b9\u6cd5\u306b\u3088\u3063\u3066\u306f\u3053\u308c\u3067\u5168\u7136\u554f\u984c\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u30ec\u30ac\u30b7\u30fc\u306a\u624b\u6cd5\u3001\u4f8b\u3048\u3070ssh\u3084ftp\u306a\u3069\u3067\u30d7\u30c3\u30b7\u30e5\u3059\u308b\u5834\u5408\u306b\u66f4\u65b0\u6642\u523b\u3092\u30bd\u30fc\u30b9\u306e\u7269\u306b\u5408\u308f\u305b\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3082\u3068\u3044\u3001\u3042\u308b\u3068\u3057\u307e\u3059\u3002\uff08\u5dee\u5206\u3067\u540c\u671f\u3092\u53d6\u308b\u969b\u306a\u3069\u306b\u3001\u6642\u523b\u3092\u57fa\u6e96\u3068\u3059\u308b\u30b1\u30fc\u30b9\uff09\n\u305d\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u66f4\u65b0\u6642\u523b\u3092\u4fdd\u6301\u3059\u308bpngquant\u30bf\u30b9\u30af\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\nfs.stat/fs.statSync \u3092\u4f7f\u3063\u3066\u66f4\u65b0\u6642\u523b\u3092\u53d6\u5f97\n\npngquant\u30b3\u30de\u30f3\u30c9\u3067\u6700\u9069\u5316\u3057\u305f\u5f8c\u3001touch\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u3067\u66f4\u65b0\u6642\u523b\u3092\u5909\u66f4\n\u4e00\u5ea6\u306b\u591a\u304f\u306e\u51e6\u7406\u3092\u8d70\u3089\u305b\u308b\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f\u306e\u3067\u3001\u6c7a\u307e\u3063\u305f\u6570\u305a\u3064\u9806\u6b21\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\n\n\u5c1a\u3001touch\u30b3\u30de\u30f3\u30c9/pngquant\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u51fa\u6765\u308b\u74b0\u5883\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e8b\u524d\u306bpngquant\u30b3\u30de\u30f3\u30c9\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\uff08Windows\u306e\u5834\u5408\u306fGit CUI\u306a\u3069\u3067\u30d1\u30b9\u3092\u901a\u3057\u307e\u3059\uff09\n\u66f4\u65b0\u6642\u523b\u3092\u4fdd\u6301\u3059\u308bpngquant\u30bf\u30b9\u30af @ Gist\n/**\n * Grunt task for pngquant\n * -----------------------\n */\n\n// @example:\n//\n// pngquant: {\n//     options: {\n//         preserve_mtime: true\n//     },\n//     dist: {\n//         src: [\n//             \"the/path/to/*.png\",\n//             \"the/path/to/**/*.png\"\n//         ]\n//     }\n// }\n\nmodule.exports = function(grunt){\n\n    grunt.registerMultiTask(\"pngquant\", \"\", function(){\n\n        var my = {}, fs, cp, done;\n\n        fs = require(\"fs\"),\n        cp = require(\"child_process\");\n        done = this.async();\n\n        /**\n         * Options:\n         * - preserve_mtime:Boolean ... Preserve modified time or not\n         * - pngquant:String ... Template string for pngquant command\n         * - touch:String ... Tempalte string for touch command\n         * - verbose:Boolean ... Verbose mode\n         * - separate:Number ... Separate the process by count\n         */\n        my.options = this.options({\n            preserve_mtime: true,\n            pngquant: 'pngquant <%=file %> --iebug --ext .png --force',\n            touch: 'touch -d \"<%=date %>\" <%=file %>',\n            verbose: true,\n            separate: 8\n        });\n\n        /**\n         * Get file list\n         */\n        my.count = 0;\n        my.files = (function(files){\n            var list = [], res = [], i = 0;\n            files.forEach(function(o){\n                list = list.concat(o.src);\n            });\n            my.count = list.length;\n            while(i<=list.length){\n                res.push(list.slice(i, i+my.options.separate));\n                i+=my.options.separate;\n            }\n            return res;\n        }(this.files));\n        my.length = my.files.length;\n\n        /**\n         * Get modified time of file\n         * - If `preserve_mtime` is false, return null\n         * @param String file\n         */\n        my.getMTime= function(file){\n            if(! this.options.preserve_mtime){ return null; }\n            var date = new Date(fs.statSync(file).mtime);\n            return grunt.template.date(date, \"yyyy/mm/dd HH:MM:ss\");\n        };\n\n        /**\n         * Optimize image file by pngquant\n         * @param {String} file\n         * @param {Function} callback\n         */\n        my.optimize = function(file, callback){\n            var mtime, pngquant, touch;\n            mtime = my.getMTime(file);\n            pngquant = grunt.template.process(my.options.pngquant, {\n                data: { file: file }\n            });\n            touch = mtime ? grunt.template.process(my.options.touch, {\n                data: {\n                    file: file,\n                    date: mtime\n                }\n            }) : \"\";\n            cp.exec(pngquant, function(e, out, error){\n                if(e){\n                    return grunt.log.error(error);\n                }\n                mtime && cp.exec(touch);\n                callback();\n            });\n        };\n\n        /**\n         * Run process\n         */\n        my.process = function(){\n            var files, count;\n\n            if(! my.files.length){\n                grunt.log.writeln(\"All images optimized.\");\n                return done();\n            }\n\n            files = my.files.pop();\n            count = files.length;\n            files.forEach(function(file){\n                my.optimize(file, function(){\n                    count -= 1;\n                    ! count && my.process();\n                });\n            });\n\n            if(my.options.verbose){\n                var percent = 100 - parseInt(my.files.length / my.length * 100, 10);\n                grunt.log.writeln(\n                    grunt.template.process(\n                        \"<%=percent %>% of <%=total %> files\",\n                        {data: {percent: percent, total: my.count}}\n                    )\n                );\n            }\n        };\n\n        my.process();\n\n    });\n\n};\n\npngquant\u306b\u9650\u3063\u305f\u4e8b\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001grunt\u7b49\u3067\u516c\u958b\u7528\u306e\u30c7\u30fc\u30bf\u3092\u30d3\u30eb\u30c9\u3059\u308b\u5834\u5408\u3001\u57fa\u672c\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u66f4\u65b0\u6642\u523b\u306f\u30d3\u30eb\u30c9\u3057\u305f\u6642\u70b9\u306e\u7269\u3068\u306a\u308a\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3057\u3066\u3044\u308b\u306e\u3067\u5f53\u305f\u308a\u524d\u3067\u3059\u306d\u3002\n\n\u30c7\u30d7\u30ed\u30a4\u306e\u65b9\u6cd5\u306b\u3088\u3063\u3066\u306f\u3053\u308c\u3067\u5168\u7136\u554f\u984c\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u30ec\u30ac\u30b7\u30fc\u306a\u624b\u6cd5\u3001\u4f8b\u3048\u3070ssh\u3084ftp\u306a\u3069\u3067\u30d7\u30c3\u30b7\u30e5\u3059\u308b\u5834\u5408\u306b\u66f4\u65b0\u6642\u523b\u3092\u30bd\u30fc\u30b9\u306e\u7269\u306b\u5408\u308f\u305b\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3082\u3068\u3044\u3001\u3042\u308b\u3068\u3057\u307e\u3059\u3002\uff08\u5dee\u5206\u3067\u540c\u671f\u3092\u53d6\u308b\u969b\u306a\u3069\u306b\u3001\u6642\u523b\u3092\u57fa\u6e96\u3068\u3059\u308b\u30b1\u30fc\u30b9\uff09\n\n\u305d\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u66f4\u65b0\u6642\u523b\u3092\u4fdd\u6301\u3059\u308bpngquant\u30bf\u30b9\u30af\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n- `fs.stat/fs.statSync` \u3092\u4f7f\u3063\u3066\u66f4\u65b0\u6642\u523b\u3092\u53d6\u5f97\n- `pngquant`\u30b3\u30de\u30f3\u30c9\u3067\u6700\u9069\u5316\u3057\u305f\u5f8c\u3001`touch`\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u3067\u66f4\u65b0\u6642\u523b\u3092\u5909\u66f4\n- \u4e00\u5ea6\u306b\u591a\u304f\u306e\u51e6\u7406\u3092\u8d70\u3089\u305b\u308b\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f\u306e\u3067\u3001\u6c7a\u307e\u3063\u305f\u6570\u305a\u3064\u9806\u6b21\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\n\n\u5c1a\u3001touch\u30b3\u30de\u30f3\u30c9/pngquant\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u51fa\u6765\u308b\u74b0\u5883\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e8b\u524d\u306bpngquant\u30b3\u30de\u30f3\u30c9\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\uff08Windows\u306e\u5834\u5408\u306fGit CUI\u306a\u3069\u3067\u30d1\u30b9\u3092\u901a\u3057\u307e\u3059\uff09\n\n[\u66f4\u65b0\u6642\u523b\u3092\u4fdd\u6301\u3059\u308bpngquant\u30bf\u30b9\u30af @ Gist](https://gist.github.com/mach3/6928970)\n\n```js\n/**\n * Grunt task for pngquant\n * -----------------------\n */\n\n// @example:\n//\n// pngquant: {\n//     options: {\n//         preserve_mtime: true\n//     },\n//     dist: {\n//         src: [\n//             \"the/path/to/*.png\",\n//             \"the/path/to/**/*.png\"\n//         ]\n//     }\n// }\n\nmodule.exports = function(grunt){\n\n    grunt.registerMultiTask(\"pngquant\", \"\", function(){\n\n        var my = {}, fs, cp, done;\n\n        fs = require(\"fs\"),\n        cp = require(\"child_process\");\n        done = this.async();\n\n        /**\n         * Options:\n         * - preserve_mtime:Boolean ... Preserve modified time or not\n         * - pngquant:String ... Template string for pngquant command\n         * - touch:String ... Tempalte string for touch command\n         * - verbose:Boolean ... Verbose mode\n         * - separate:Number ... Separate the process by count\n         */\n        my.options = this.options({\n            preserve_mtime: true,\n            pngquant: 'pngquant <%=file %> --iebug --ext .png --force',\n            touch: 'touch -d \"<%=date %>\" <%=file %>',\n            verbose: true,\n            separate: 8\n        });\n\n        /**\n         * Get file list\n         */\n        my.count = 0;\n        my.files = (function(files){\n            var list = [], res = [], i = 0;\n            files.forEach(function(o){\n                list = list.concat(o.src);\n            });\n            my.count = list.length;\n            while(i<=list.length){\n                res.push(list.slice(i, i+my.options.separate));\n                i+=my.options.separate;\n            }\n            return res;\n        }(this.files));\n        my.length = my.files.length;\n\n        /**\n         * Get modified time of file\n         * - If `preserve_mtime` is false, return null\n         * @param String file\n         */\n        my.getMTime= function(file){\n            if(! this.options.preserve_mtime){ return null; }\n            var date = new Date(fs.statSync(file).mtime);\n            return grunt.template.date(date, \"yyyy/mm/dd HH:MM:ss\");\n        };\n\n        /**\n         * Optimize image file by pngquant\n         * @param {String} file\n         * @param {Function} callback\n         */\n        my.optimize = function(file, callback){\n            var mtime, pngquant, touch;\n            mtime = my.getMTime(file);\n            pngquant = grunt.template.process(my.options.pngquant, {\n                data: { file: file }\n            });\n            touch = mtime ? grunt.template.process(my.options.touch, {\n                data: {\n                    file: file,\n                    date: mtime\n                }\n            }) : \"\";\n            cp.exec(pngquant, function(e, out, error){\n                if(e){\n                    return grunt.log.error(error);\n                }\n                mtime && cp.exec(touch);\n                callback();\n            });\n        };\n\n        /**\n         * Run process\n         */\n        my.process = function(){\n            var files, count;\n\n            if(! my.files.length){\n                grunt.log.writeln(\"All images optimized.\");\n                return done();\n            }\n\n            files = my.files.pop();\n            count = files.length;\n            files.forEach(function(file){\n                my.optimize(file, function(){\n                    count -= 1;\n                    ! count && my.process();\n                });\n            });\n\n            if(my.options.verbose){\n                var percent = 100 - parseInt(my.files.length / my.length * 100, 10);\n                grunt.log.writeln(\n                    grunt.template.process(\n                        \"<%=percent %>% of <%=total %> files\",\n                        {data: {percent: percent, total: my.count}}\n                    )\n                );\n            }\n        };\n\n        my.process();\n\n    });\n\n};\n```\n", "tags": ["grunt", "pngquant"]}