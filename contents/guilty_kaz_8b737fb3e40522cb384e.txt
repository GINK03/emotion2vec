{"tags": ["Fortran"], "context": " More than 1 year has passed since last update.\u4f8b\u3068\u3057\u3066\uff0cinteger\u578b\u306e\u30b9\u30bf\u30c3\u30af\u3092\u4f5c\u3063\u3066\u307f\u305f\n\n\u5ba3\u8a00\u90e8\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3084\u3089\uff0c\u624b\u7d9a\u304d\u306e\u5ba3\u8a00\u3084\u3089\n\uff082015/1/3\u4fee\u6b63\u3000\u4ee5\u4e0b\u306eprocedure\u306e\u884c\uff09\n\n\u3053\u3093\u306a\u611f\u3058\nmodule mod_stack\n  implicit none\n  public\n\n  type :: stack\n     private  ! \u30d5\u30a3\u30fc\u30eb\u30c9\u306fprivate\u306b\n     integer :: size ! \u30b9\u30bf\u30c3\u30af\u306e\u30b5\u30a4\u30ba\n     integer, allocatable :: stack(:)\n     integer :: point=0 ! \u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\uff08\u305d\u3093\u306a\u540d\u524d\u3067\u3057\u305f\u3063\u3051\uff1f\uff09\n\n   contains ! \u4e2d\u306b\u542b\u3080\u624b\u7d9a\u304d\uff0c\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u66f8\u304f\n     procedure :: push\n     procedure :: pop\n     procedure :: get_point\n     final :: dest\n  end type stack\n\n   interface stack ! \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3089\u3057\u304f\u547c\u3073\u51fa\u3057\u305f\u3044\u306e\u3067\n      module procedure const\n   end interface stack\n\ncontains\n    ! \u3053\u3053\u304b\u3089\u624b\u7d9a\u304d\uff0c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff0c\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u4e2d\u8eab\u3092\u8a18\u8ff0\n    ...\nend module mod_stack\n\n\n\n\u526f\u30d7\u30ed\u30b0\u30e9\u30e0\u90e8\n\u3053\u3053\u304b\u3089\u500b\u5225\u306b\u898b\u3066\u3044\u304f\uff0e\u3053\u3044\u3064\u3089\u306f\u4e0a\u306e contains \u4ee5\u4e0b\u306b\u66f8\u3051\u3070\u3044\u3044\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n\u5b9a\u7fa9\n   type(stack) function const(num) result(this)\n     implicit none\n     integer,intent(in) :: num\n     this%size=num\n     allocate(this%stack(num))\n   end function const\n\n\n\u3053\u3053\u306f\u5358\u7d14\u306b\uff0c\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3066\uff0c\u3067\u304d\u305fstack\u3092\u8fd4\u3059\u3060\u3051\n\n\u4f7f\u3044\u65b9\n  type(stack), pointer :: stack1, stack2\n  allocate(stack1, stack2)\n  stack1 = stack(10)\n  stack2 = stack(2)\n\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3064\u3044\u3066\u306f\u3053\u3093\u306a\u611f\u3058\u3000\u3000\n\n\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n\n\u5b9a\u7fa9\n   subroutine dest(this)\n     implicit none\n     type(stack),intent(inout) :: this\n     print *, \"dest\"\n     deallocate(this%stack)\n   end subroutine dest\n\n\n\n\u4f7f\u3044\u65b9\n    deallocate(stack1, stack2)\n\n\n\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4e0d\u5341\u5206\uff08-Wall\u3064\u3051\u308b\u3068\u8b66\u544a\u304c\u51fa\u308b\uff09\u3060\u304c\uff0c\u30b9\u30bf\u30c3\u30af\u306f\u9014\u4e2d\u3067\u9818\u57df\u89e3\u653e\u3059\u308b\u3053\u3068\u3082\u5c11\u306a\u305d\u3046\u306a\u306e\u3067\u4e00\u65e6\u653e\u7f6e\uff0e\n\n\u305d\u306e\u4ed6\u624b\u7d9a\u304d\n\n\u30b9\u30bf\u30c3\u30af\u304a\u306a\u3058\u307f\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u304b\n   subroutine push(s, c)\n     implicit none\n     class(stack),intent(inout) :: s\n     integer,intent(in) :: c\n     s%point = s%point + 1\n     s%stack(s%point) = c\n   end subroutine push\n\n   integer function pop(s)\n     implicit none\n     class(stack),intent(inout) :: s\n     pop = s%stack(s%point)\n     s%point = s%point - 1\n   end function pop\n\n   integer function get_point(s)\n     implicit none\n     class(stack),intent(inout) :: s\n     get_point = s%point\n   end function get_point\n\n\nclass(stack),intent(inout) :: s \u306f\u30c0\u30df\u30fc\u5909\u6570\u306a\u3088\u3046\u3067\u2026\n\n\u4f7f\u3044\u65b9\n  call stack1%push(5)  \n  stack1%get_point()\n  stack1%pop()\n\n\n\u5f15\u6570\u306b\u5b9f\u969b\u306b\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\uff0c%\u306e\u524d\u306e\u90e8\u5206\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u3060\uff0e\n\n\u4f7f\u7528\u4f8b\u3068\u7d50\u679c\n\nmain\nprogram main\n  use mod_stack\n  implicit none\n  type(stack), pointer :: stack1, stack2\n\n  allocate(stack1, stack2)\n  stack1 = stack(10)\n  stack2 = stack(2)\n\n  call stack1%push(5)\n  call stack2%push(1)\n  call stack2%push(2)\n\n  print *, stack1%get_point()\n  print *, stack2%get_point()\n\n  print *, stack2%pop()\n  print *, stack1%pop()\n  print *, stack2%pop()\n\n  deallocate(stack1, stack2)\nend program main\n\n\n           1\n           2\n           2\n           5\n           1\n dest\n dest\n\n\n\u30af\u30e9\u30b9\u914d\u5217\u3092\u4f5c\u308b\uff082015/1/3\u8ffd\u8a18\uff09\n\n\u914d\u5217\u306e\u5ba3\u8a00\n  type(stack),allocatable :: stacks(:)  \n  allocate(stacks(5))\n\n\n\n\u4f8b\u3068\u3057\u3066\uff0cinteger\u578b\u306e\u30b9\u30bf\u30c3\u30af\u3092\u4f5c\u3063\u3066\u307f\u305f\n\n## \u5ba3\u8a00\u90e8\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3084\u3089\uff0c\u624b\u7d9a\u304d\u306e\u5ba3\u8a00\u3084\u3089\n\uff082015/1/3\u4fee\u6b63\u3000\u4ee5\u4e0b\u306eprocedure\u306e\u884c\uff09\n\n```fortran:\u3053\u3093\u306a\u611f\u3058\nmodule mod_stack\n  implicit none\n  public\n  \n  type :: stack\n     private  ! \u30d5\u30a3\u30fc\u30eb\u30c9\u306fprivate\u306b\n     integer :: size ! \u30b9\u30bf\u30c3\u30af\u306e\u30b5\u30a4\u30ba\n     integer, allocatable :: stack(:)\n     integer :: point=0 ! \u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\uff08\u305d\u3093\u306a\u540d\u524d\u3067\u3057\u305f\u3063\u3051\uff1f\uff09\n     \n   contains ! \u4e2d\u306b\u542b\u3080\u624b\u7d9a\u304d\uff0c\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u66f8\u304f\n     procedure :: push\n     procedure :: pop\n     procedure :: get_point\n     final :: dest\n  end type stack\n  \n   interface stack ! \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3089\u3057\u304f\u547c\u3073\u51fa\u3057\u305f\u3044\u306e\u3067\n      module procedure const\n   end interface stack\n  \ncontains\n\t! \u3053\u3053\u304b\u3089\u624b\u7d9a\u304d\uff0c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff0c\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u4e2d\u8eab\u3092\u8a18\u8ff0\n\t...\nend module mod_stack\n```\n\n## \u526f\u30d7\u30ed\u30b0\u30e9\u30e0\u90e8\n\u3053\u3053\u304b\u3089\u500b\u5225\u306b\u898b\u3066\u3044\u304f\uff0e\u3053\u3044\u3064\u3089\u306f\u4e0a\u306e contains \u4ee5\u4e0b\u306b\u66f8\u3051\u3070\u3044\u3044\n### \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n```fortran:\u5b9a\u7fa9\n   type(stack) function const(num) result(this)\n     implicit none\n     integer,intent(in) :: num\n     this%size=num\n     allocate(this%stack(num))\n   end function const\n```\n\n\u3053\u3053\u306f\u5358\u7d14\u306b\uff0c\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3066\uff0c\u3067\u304d\u305fstack\u3092\u8fd4\u3059\u3060\u3051\n\n```fortran:\u4f7f\u3044\u65b9\n  type(stack), pointer :: stack1, stack2\n  allocate(stack1, stack2)\n  stack1 = stack(10)\n  stack2 = stack(2)\n```\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3064\u3044\u3066\u306f\u3053\u3093\u306a\u611f\u3058\u3000\u3000\n\n### \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n\n```fortran:\u5b9a\u7fa9\n   subroutine dest(this)\n     implicit none\n     type(stack),intent(inout) :: this\n     print *, \"dest\"\n     deallocate(this%stack)\n   end subroutine dest\n```\n\n```fortran:\u4f7f\u3044\u65b9\n\tdeallocate(stack1, stack2)\n```\n\n\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4e0d\u5341\u5206\uff08-Wall\u3064\u3051\u308b\u3068\u8b66\u544a\u304c\u51fa\u308b\uff09\u3060\u304c\uff0c\u30b9\u30bf\u30c3\u30af\u306f\u9014\u4e2d\u3067\u9818\u57df\u89e3\u653e\u3059\u308b\u3053\u3068\u3082\u5c11\u306a\u305d\u3046\u306a\u306e\u3067\u4e00\u65e6\u653e\u7f6e\uff0e\n\n### \u305d\u306e\u4ed6\u624b\u7d9a\u304d   \n\n```fortran:\u30b9\u30bf\u30c3\u30af\u304a\u306a\u3058\u307f\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u304b\n   subroutine push(s, c)\n     implicit none\n     class(stack),intent(inout) :: s\n     integer,intent(in) :: c\n     s%point = s%point + 1\n     s%stack(s%point) = c\n   end subroutine push\n   \n   integer function pop(s)\n     implicit none\n     class(stack),intent(inout) :: s\n     pop = s%stack(s%point)\n     s%point = s%point - 1\n   end function pop\n   \n   integer function get_point(s)\n     implicit none\n     class(stack),intent(inout) :: s\n     get_point = s%point\n   end function get_point\n```\n\n`class(stack),intent(inout) :: s` \u306f\u30c0\u30df\u30fc\u5909\u6570\u306a\u3088\u3046\u3067\u2026\n\n```fortran:\u4f7f\u3044\u65b9\n  call stack1%push(5)  \n  stack1%get_point()\n  stack1%pop()\n```\n\n\u5f15\u6570\u306b\u5b9f\u969b\u306b\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\uff0c%\u306e\u524d\u306e\u90e8\u5206\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u3060\uff0e\n\n\n\n## \u4f7f\u7528\u4f8b\u3068\u7d50\u679c\n\n```fortran:main\nprogram main\n  use mod_stack\n  implicit none\n  type(stack), pointer :: stack1, stack2\n\n  allocate(stack1, stack2)\n  stack1 = stack(10)\n  stack2 = stack(2)\n\n  call stack1%push(5)\n  call stack2%push(1)\n  call stack2%push(2)\n  \n  print *, stack1%get_point()\n  print *, stack2%get_point()\n\n  print *, stack2%pop()\n  print *, stack1%pop()\n  print *, stack2%pop()\n\n  deallocate(stack1, stack2)\nend program main\n```\n\n```\u7d50\u679c\n           1\n           2\n           2\n           5\n           1\n dest\n dest\n```\n\n\n##\u30af\u30e9\u30b9\u914d\u5217\u3092\u4f5c\u308b\uff082015/1/3\u8ffd\u8a18\uff09\n```fortran:\u914d\u5217\u306e\u5ba3\u8a00\n  type(stack),allocatable :: stacks(:)  \n  allocate(stacks(5))\n```\n"}