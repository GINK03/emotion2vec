{"context": " More than 1 year has passed since last update.Wantedly\u3067\u306f\u3001Rails\u306b\u3088\u308b\u958b\u767a\u304c\u884c\u308f\u308c\u3066\u304a\u308a\u3001\u793e\u5185\u3067\u6709\u5fd7\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\nWHY\n\u4f55\u6545\u3084\u308b\u306e\u304b\uff1a\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u307e\u3067\u4e00\u5ea6\u8ffd\u3046\u3053\u3068\u3067\u3001\u554f\u984c\u304c\u8d77\u3053\u3063\u305f\u6642\u306e\u89e3\u6c7a\u307e\u3067\u306e\u6642\u9593\u304c\u77ed\u7e2e\u3055\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u672c\u8cea\u7684\u306b\u306a\u306b\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u7406\u89e3\u3059\u308b\u3068Rails\u306e\u9b54\u6cd5\u611f\u3092\u4f4e\u6e1b\u3067\u304d\u307e\u3059\u3002\n\nWHAT\n\u306a\u306b\u3092\u3059\u308b\u306e\u304b\uff1a\u4eca\u56de\u306fmigrate\u5468\u308a\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u3059\u3002\u30b3\u30de\u30f3\u30c9\u304b\u3089SQL\u6587\u767a\u884c\u307e\u3067\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3044\u307e\u3059\u3002\n\nHOW\n\u3069\u3046\u3084\u3063\u3066\u3084\u308b\u304b\uff1f\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u307e\u3059\u3002\n\nrake db:migrate\u3092\u5b9f\u884c\u3059\u308b\u3068\u306a\u306b\u304c\u8d77\u3053\u308b\u304b\n\u30b3\u30de\u30f3\u30c9\u304b\u3089SQL\u6587\u767a\u884c\u307e\u3067\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3044\u305f\u3044\u3002\n\nsource file\n\u4eca\u56de\u547c\u3093\u3060\u30bd\u30fc\u30b9\u306fRails 4.0.13\u306e\u3082\u306e\u3067\u3059\u3002\u81ea\u5206\u306e\u74b0\u5883\u3067\u306f\u4ee5\u4e0b\u306b\u5165\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n~/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/activerecord-4.0.13\n\ntask :migrate (railties/database.rake)\nrake\u30bf\u30b9\u30af\u306f\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001Migrator.migrate\u3092\u547c\u3073\u51fa\u3059\u306e\u304c\u4e3b\u306a\u30b7\u30b4\u30c8\u3002\n  desc \"Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog).\"\n  task :migrate => [:environment, :load_config] do\n    ActiveRecord::Migration.verbose = ENV[\"VERBOSE\"] ? ENV[\"VERBOSE\"] == \"true\" : true\n    ActiveRecord::Migrator.migrate(ActiveRecord::Migrator.migrations_paths, ENV[\"VERSION\"] ? ENV[\"VERSION\"].to_i : nil) do |migration|\n      ENV[\"SCOPE\"].blank? || (ENV[\"SCOPE\"] == migration.scope)\n    end\n    db_namespace['_dump'].invoke\n  end\n\nMigrator\u306f\u4f55\u306a\u306e\u304b\u3068\u601d\u3044\u306a\u304c\u3089\u3001Migrator.migrate\u3068\u5f15\u6570\u306eMigrator.migrations_paths\u3092\u307f\u308b\u3002\n\nMigrator#migrate (activerecord-4.0.13/lib/active_record/migration.rb)\n\u73fe\u5728\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u9032\u3081\u308b\u306e\u304b\u3001\u623b\u3059\u306e\u304b\u3001\u4f55\u3082\u5909\u3048\u306a\u3044\u306e\u304b\u3092\u6c7a\u3081\u308b\u3002\n\uff08\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u5185\u306bdef migrate\u304c3\u3064\u3042\u308b\uff09\ndef migrate(migrations_paths, target_version = nil, &block)\ntarget_version\u3068current_version\u306e\u72b6\u614b\u306b\u3088\u3063\u3066\u3001\u884c\u3046\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u6c7a\u3081\u308b\u3002\n\u5358\u7d14\u306brake db:migrate\u3068\u3057\u305f\u5834\u5408\u306f\u3001\u666e\u901a\uff11\u756a\u4e0a\u306eup\u3092\u547c\u3076\u3002\n\u73fe\u5728\u3088\u308a\u3082\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306fdown\u3092\u547c\u3076\u3002\nwhen target_version.nil?\n  up(migrations_paths, target_version, &block)\nwhen current_version == 0 && target_version == 0\n  []\nwhen current_version > target_version\n  down(migrations_paths, target_version, &block)\nelse\n  up(migrations_paths, target_version, &block)\nend\n\n\ntarget_version\u3068current_version\u306f\u3069\u3046\u3084\u3063\u3066\u6c7a\u307e\u308b\u304b\uff1f\ntarget_version\u306f\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070nil\ncurrent_version\u306f\u3001\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u7e4b\u304c\u3063\u3066\u3044\u308bDB\u306eSchemaMigration.table_name\u306eversion\u6570\u5024\u306e\u6700\u5927\u5024\u304c\u7528\u3044\u3089\u308c\u308b\u3002schme.rb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u5024\u306f\u95a2\u4fc2\u306a\u3044\u3093\u3067\u3059\u306d\u3002\ndef current_version\n  sm_table = schema_migrations_table_name\n  if Base.connection.table_exists?(sm_table)\n    get_all_versions.max || 0\n  else\n    0\n  end\nend\n\n\nMigrator.migration_paths\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001['db/migrate']\u304c\u5e30\u308b\u3002Array\u306bto_a\u3057\u3066\u3082Array\u306e\u307e\u307e\u5909\u5316\u3057\u306a\u3044\u3002\nWantedly\u3067\u306f\u8907\u6570\u306eDB\u3092Rails\u306b\u7e4b\u3044\u3067\u3044\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u306a\u304f\u3001rake mail_db:migrate\u3068\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u3002\nrake\u30d5\u30a1\u30a4\u30eb\u306eload_config\u3067migration_paths\u306b\"mail_db\"\u304c\u5165\u308b\u3002\nActiveRecord::Migrator.migrations_paths = ActiveRecord::Tasks::DatabaseTasks.migrations_paths\n\nMigrator.up\n\u73fe\u5728\u306emigration\u3092\u6301\u3063\u3066\u304d\u3066\u3001Migrator\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066migrate\u3092\u547c\u3076\u3002\nmigrations.select! { |m| yield m } if block_given?\nmigration.scope\u3068ENV['SCOPE']\u304c\u9055\u3046\u3082\u306e\u3092\u5b9f\u884c\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\ndef up(migrations_paths, target_version = nil)\n  migrations = migrations(migrations_paths)\n  migrations.select! { |m| yield m } if block_given?\n\n  self.new(:up, migrations, target_version).migrate\nend\n\n\u305d\u3082\u305d\u3082migrations\u3068\u306f\uff1f\n\nMigrator.migrations\nmigrate\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u307f\u3066\u3001\u30de\u30c3\u30c1\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6301\u3063\u3066\u304f\u308b\u3002\n\nDir\n\n\n\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u306e\u5c55\u958b\u3092\u884c\u3044\u3001 \u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6587\u5b57\u5217\u306e\u914d\u5217\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n\n\n\u306a\u306e\u3067\u3001file\u306b\u306f\u3001\u6307\u5b9a\u3057\u305fmigrate\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u30de\u30c3\u30c1\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u6587\u5b57\u5217\u3067\u5168\u90e8\u5165\u308b\u3002\n[\"db/migrate/20110627144734_create_jobs.rb\",\n \"db/migrate/20110628003714_devise_create_users.rb\",\n \"db/migrate/20110629071604_remove_applicant_from_jobs.rb\",\n \"db/migrate/20110629071620_remove_connector_from_jobs.rb\",\n ...]\u307f\u305f\u3044\u306a\u611f\u3058\u3002\n\u3053\u3053\u304b\u3089\u66f4\u306b\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u6570_\u540d\u524d_.rb\u306b\u4e00\u81f4\u3059\u308b\u3082\u306e\u3060\u3051\u3092\u898b\u3066\u3001MigrationProxy\u306a\u308b\u3082\u306e\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u3053\u308c\u306f\u5b9f\u969b\u306eMigration\u3092\u547c\u3073\u51fa\u3059\u3082\u306e\u3002\nMigrationProxy is used to defer loading of the actual migration classes until they are needed\n\ndelegate :migrate, :announce, :write, :disable_ddl_transaction, to: :migration\n\n\u3053\u308c\u304cmigrations\u306b\u306a\u308b\u3002\ndef migrations(paths)\n  paths = Array(paths)\n\n  files = Dir[*paths.map { |p| \"#{p}/**/[0-9]*_*.rb\" }]\n\n  migrations = files.map do |file|\n    version, name, scope = file.scan(/([0-9]+)_([_a-z0-9]*)\\.?([_a-z0-9]*)?\\.rb\\z/).first\n\n    raise IllegalMigrationNameError.new(file) unless version\n    version = version.to_i\n    name = name.camelize\n\n    MigrationProxy.new(name, version, file, scope)\n  end\n\n  migrations.sort_by(&:version)\nend\n\n\nMigrator#initialize\nMigration\u3092\u547c\u3073\u51fa\u3059\u4eba\u3002\nmigrations\u306b\u6587\u5b57\u5217\u304c\u4e00\u3064\u3067\u3082\u3042\u3063\u305f\u3089warn\u3092\u51fa\u3057\u3066migrations\u3092\u53d6\u5f97\u3057\u76f4\u3059\u3002\n\u305d\u306e\u5f8c\u3001validate\u3092\u547c\u3073\u51fa\u3057\u3066\u304b\u3089\u3001Base.connection.initialize_schema_migrations_table\n    def initialize(direction, migrations, target_version = nil)\n      raise StandardError.new(\"This database does not yet support migrations\") unless Base.connection.supports_migrations?\n\n      @direction         = direction\n      @target_version    = target_version\n      @migrated_versions = nil\n\n      if Array(migrations).grep(String).empty?\n        @migrations = migrations\n      else\n        ActiveSupport::Deprecation.warn \"instantiate this class with a list of migrations\"\n        @migrations = self.class.migrations(migrations)\n      end\n\n      validate(@migrations)\n\n      Base.connection.initialize_schema_migrations_table\n    end\n\n\nBase.connection.initialize_schema_migrations_table\nActiveRecord::SchemaMigration.create_table\u3092\u3084\u308b\u3068\u601d\u3063\u3066\u3044\u308b\n\u3053\u308c\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u4ee5\u4e0b\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u3002\nconnection.create_table(table_name, id: false) do |t|\n  t.column :version, :string, version_options\nend\n\n\nMigrator#migrate\n\u5404\u3005\u306emigration\u306b\u5bfe\u3057\u3066\u3001execute_migration_in_transaction(migration, @direction)\u3092\u547c\u3073\u51fa\u3059\u3002\n    def migrate\n      if !target && @target_version && @target_version > 0\n        raise UnknownMigrationVersionError.new(@target_version)\n      end\n\n      running = runnable\n\n      if block_given?\n        message = \"block argument to migrate is deprecated, please filter migrations before constructing the migrator\"\n        ActiveSupport::Deprecation.warn message\n        running.select! { |m| yield m }\n      end\n\n      running.each do |migration|\n        Base.logger.info \"Migrating to #{migration.name} (#{migration.version})\" if Base.logger\n\n        begin\n          execute_migration_in_transaction(migration, @direction)\n        rescue => e\n          canceled_msg = use_transaction?(migration) ? \"this and \" : \"\"\n          raise StandardError, \"An error has occurred, #{canceled_msg}all later migrations canceled:\\n\\n#{e}\", e.backtrace\n        end\n      end\n    end\n\n\nexecute_migration_in_transaction\nmigration.migrate(direction)\u3092\u547c\u3073\u51fa\u3057\u305f\u3042\u3068\u306b\u3001\u305d\u308c\u3092\u8a18\u9332\u3059\u308b\u3002\nddl_transaction(migration)\u306fTransaction\u51e6\u7406\u304c\u53ef\u80fd\uff08Base.connection.supports_ddl_transactions?\uff09\u306a\u3089Transaction\u51e6\u7406\u306e\u4e2d\u3067\u884c\u3046\u3002\n    def execute_migration_in_transaction(migration, direction)\n      ddl_transaction(migration) do\n        migration.migrate(direction)\n        record_version_state_after_migrating(migration.version)\n      end\n    end\n\n\nMigration#migrate(direction)\n\u3053\u3053\u3067\u306f\u65e2\u306b\u3001\u3069\u306e\u5909\u66f4\u3092\u3069\u306e\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u308b\u3001\u3068\u3044\u3046\u60c5\u5831\u304c\u63c3\u3063\u3066\u3044\u308b\u3002\nexec_migration(conn, direction)\u3092\u5b9f\u884c\u3002\nup\u3067\u3042\u308c\u3070\"migrating\"\u3068\u3057\u3066\u3001\u7d42\u4e86\u5f8c\u306b\u5b9f\u884c\u6642\u306e\u7d4c\u904e\u6642\u9593\u3092\u8868\u793a\u3002\n\"migrated (2.4854)\"\u307f\u305f\u3044\u306b\u8868\u793a\u3059\u308b\u3002\n# Execute this migration in the named direction\ndef migrate(direction)\n  return unless respond_to?(direction)\n\n  case direction\n  when :up   then announce \"migrating\"\n  when :down then announce \"reverting\"\n  end\n\n  time   = nil\n  ActiveRecord::Base.connection_pool.with_connection do |conn|\n    time = Benchmark.measure do\n      exec_migration(conn, direction)\n    end\n  end\n\n  case direction\n  when :up   then announce \"migrated (%.4fs)\" % time.real; write\n  when :down then announce \"reverted (%.4fs)\" % time.real; write\n  end\nend\n\n\nMigration.exec_migration(connection, direction)\nif respond_to?(:change)\u3067 change\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308c\u3070\u3001\nchange\u304brevert\u3092\u5b9f\u884c\u3059\u308b\u3002\nup, down\u3068\u304b\u3057\u304b\u306a\u3051\u308c\u3070\u3001up\u304bdown\u3092\u5b9f\u884c\u3059\u308b\u3002\ndef exec_migration(conn, direction)\n  @connection = conn\n  if respond_to?(:change)\n    if direction == :down\n      revert { change }\n    else\n      change\n    end\n  else\n    send(direction)\n  end\nensure\n  @connection = nil\nend\n\n\nMigration.change\nMigration\u30d5\u30a1\u30a4\u30eb\u306echange\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u3002\u6211\u3005\u304c\u66f8\u3044\u3066\u3044\u308b\u3042\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3002\n\u3053\u3053\u3067\u306f\u3001add_column\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u306b\u3059\u308b\u3002\nadd_column\u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u3053\u308c\u306fmethod_missing\u306b\u3088\u3063\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002\nmethod='add_column'\u306e\u3068\u304d\u306f\u3001ActiveRecord::Base.connection\u306badd_column\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u304b\u3092\u78ba\u304b\u3081\u3066\u3001\nconnection.send(method, *arguments, &block)\u306b\u3088\u308a\u5b9f\u884c\u3002\n\u5b9f\u884c\u3055\u308c\u305f\u3089\u3001say_with_time\u3068\u3044\u3046\u30d5\u30e9\u30f3\u30af\u306a\u540d\u524d\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u5b9f\u884c\u6642\u9593\u3068\u5171\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\ndef method_missing(method, *arguments, &block)\n  arg_list = arguments.map{ |a| a.inspect } * ', '\n\n  say_with_time \"#{method}(#{arg_list})\" do\n    unless @connection.respond_to? :revert\n      unless arguments.empty? || [:execute, :enable_extension, :disable_extension].include?(method)\n        arguments[0] = Migrator.proper_table_name(arguments.first)\n        arguments[1] = Migrator.proper_table_name(arguments.second) if method == :rename_table\n      end\n    end\n    return super unless connection.respond_to?(method)\n    connection.send(method, *arguments, &block)\n  end\nend\n\n\n\u6700\u5f8c\uff1aadd_column\u306f\u306a\u306b\u3092\u3084\u3063\u3066\u3044\u308b\u304b\n\u3053\u3053\u304b\u3089\u5148\u306f\u7d50\u69cb\u3001PostgresSQL\u3068\u304bSQLite\u3068\u304b\u56fa\u6709\u306e\u3082\u306e\u3068\u5171\u901a\u306e\u3082\u306e\u304c\u3042\u3063\u3066\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u308b\u5370\u8c61\u3002\n\nSchemaStatements.add_column (postgresql/schema_statements.rb)\ndef add_column(table_name, column_name, type, options = {})\n  clear_cache!\n  super\nend\n\n\nSchemaStatements.add_column (abstract/schema_statements.rb)\n# Adds a new column to the named table.\n# See TableDefinition#column for details of the options you can use.\ndef add_column(table_name, column_name, type, options = {})\n  at = create_alter_table table_name\n  at.add_column(column_name, type, options)\n  execute schema_creation.accept at\nend\n\nalter_table\u3068\u3044\u3046\u3082\u306e\u3092\u4f5c\u3063\u3066\u3044\u308b\u3063\u307d\u3044\u3002\nAlterTable.new create_table_definition(name, false, {})\n\nadd_column(name, type, options)\u3060\u3051\u306e\u60c5\u5831\u3092\u6301\u3064\u30af\u30e9\u30b9\n\ndef schema_creation\n  SchemaCreation.new self\nend\n\nclass SchemaCreation\n    def accept(o)\n        m = @cache[o.class] ||= \"visit_#{o.class.name.split('::').last}\"\n        send m, o\n    end\n... \nend\nvisit_AlterTable\u304c\u547c\u3070\u308c\u308b\u3002\n\ndef visit_AlterTable(o)\n  sql = \"ALTER TABLE #{quote_table_name(o.name)} \"\n  sql << o.adds.map { |col| visit_AddColumn col }.join(' ')\nend\n\ndef visit_AddColumn(o)\n  sql_type = type_to_sql(o.type.to_sym, o.limit, o.precision, o.scale)\n  sql = \"ADD #{quote_column_name(o.name)} #{sql_type}\"\n  add_column_options!(sql, column_options(o))\nend\n\nexecute \u306e\u4e2d\u3067@connection.async_exec(sql)\u304c\u547c\u3070\u308c\u3066SQL\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n\u304a\u308f\u308a\n\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u308b\u3053\u3068\u3067\u3001\u65e5\u5e38\u7684\u306b\u6253\u3063\u3066\u3044\u308b\u30b3\u30de\u30f3\u30c9\u304c\u5185\u90e8\u3067\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u3067\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u7279\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u8a71\u3068\u304b\u3001migrate\u30d5\u30a1\u30a4\u30eb\u306eadd_column\u307f\u305f\u3044\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3001\u5b9f\u969b\u306fmethod_missing\u3067\u62fe\u308f\u308c\u3066\u3044\u3066\u3001database\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u30e1\u30bd\u30c3\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3089\u81ea\u52d5\u7684\u306b\u4f7f\u3048\u308b\u306e\u3067\u9762\u767d\u3044\u4ed5\u7d44\u307f\u3060\u306a\u3068\u304b\u3002\nWantedly\u306e\u5834\u5408\u306f\u3001Wantedly\u306e\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067Rails\u3092\u89e6\u308b\u306e\u304c\u521d\u3081\u3066\u3068\u3044\u3046\u30e1\u30f3\u30d0\u30fc\u3082\u591a\u304f\uff08\u81ea\u5206\u3082Java\u3068Python\u306e\u4eba\u3067\u3057\u305f\uff09\u3001\u3053\u3046\u3044\u3063\u305f\u8aad\u307f\u4f1a\u306f\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ed6\u306e\u30e1\u30f3\u30d0\u30fc\u306e\u8aad\u307f\u65b9\u3068\u304b\u3001\u8003\u3048\u65b9\u3068\u304b\u3092\u5171\u6709\u3067\u304d\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3082\u304a\u52e7\u3081\u3067\u3059\u3002\nWantedly\u3067\u306f\u3001Rails\u306b\u3088\u308b\u958b\u767a\u304c\u884c\u308f\u308c\u3066\u304a\u308a\u3001\u793e\u5185\u3067\u6709\u5fd7\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n## WHY\n\u4f55\u6545\u3084\u308b\u306e\u304b\uff1a\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u307e\u3067\u4e00\u5ea6\u8ffd\u3046\u3053\u3068\u3067\u3001\u554f\u984c\u304c\u8d77\u3053\u3063\u305f\u6642\u306e\u89e3\u6c7a\u307e\u3067\u306e\u6642\u9593\u304c\u77ed\u7e2e\u3055\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u672c\u8cea\u7684\u306b\u306a\u306b\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u7406\u89e3\u3059\u308b\u3068Rails\u306e\u9b54\u6cd5\u611f\u3092\u4f4e\u6e1b\u3067\u304d\u307e\u3059\u3002\n\n## WHAT\n\u306a\u306b\u3092\u3059\u308b\u306e\u304b\uff1a\u4eca\u56de\u306fmigrate\u5468\u308a\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u3059\u3002\u30b3\u30de\u30f3\u30c9\u304b\u3089SQL\u6587\u767a\u884c\u307e\u3067\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3044\u307e\u3059\u3002\n\n## HOW\n\u3069\u3046\u3084\u3063\u3066\u3084\u308b\u304b\uff1f\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u307e\u3059\u3002\n\n## rake db:migrate\u3092\u5b9f\u884c\u3059\u308b\u3068\u306a\u306b\u304c\u8d77\u3053\u308b\u304b\n\n\u30b3\u30de\u30f3\u30c9\u304b\u3089SQL\u6587\u767a\u884c\u307e\u3067\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3044\u305f\u3044\u3002\n\n## source file\n\u4eca\u56de\u547c\u3093\u3060\u30bd\u30fc\u30b9\u306fRails 4.0.13\u306e\u3082\u306e\u3067\u3059\u3002\u81ea\u5206\u306e\u74b0\u5883\u3067\u306f\u4ee5\u4e0b\u306b\u5165\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n~/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/activerecord-4.0.13\n\n## task :migrate (railties/database.rake)\nrake\u30bf\u30b9\u30af\u306f\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001`Migrator.migrate`\u3092\u547c\u3073\u51fa\u3059\u306e\u304c\u4e3b\u306a\u30b7\u30b4\u30c8\u3002\n\n```rb\n  desc \"Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog).\"\n  task :migrate => [:environment, :load_config] do\n    ActiveRecord::Migration.verbose = ENV[\"VERBOSE\"] ? ENV[\"VERBOSE\"] == \"true\" : true\n    ActiveRecord::Migrator.migrate(ActiveRecord::Migrator.migrations_paths, ENV[\"VERSION\"] ? ENV[\"VERSION\"].to_i : nil) do |migration|\n      ENV[\"SCOPE\"].blank? || (ENV[\"SCOPE\"] == migration.scope)\n    end\n    db_namespace['_dump'].invoke\n  end\n```\n\nMigrator\u306f\u4f55\u306a\u306e\u304b\u3068\u601d\u3044\u306a\u304c\u3089\u3001`Migrator.migrate`\u3068\u5f15\u6570\u306e`Migrator.migrations_paths`\u3092\u307f\u308b\u3002\n\n## Migrator#migrate (activerecord-4.0.13/lib/active_record/migration.rb)\n\u73fe\u5728\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u9032\u3081\u308b\u306e\u304b\u3001\u623b\u3059\u306e\u304b\u3001\u4f55\u3082\u5909\u3048\u306a\u3044\u306e\u304b\u3092\u6c7a\u3081\u308b\u3002\n\uff08\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u5185\u306b`def migrate`\u304c3\u3064\u3042\u308b\uff09\n\n`def migrate(migrations_paths, target_version = nil, &block)`\n\ntarget_version\u3068current_version\u306e\u72b6\u614b\u306b\u3088\u3063\u3066\u3001\u884c\u3046\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u6c7a\u3081\u308b\u3002\n\u5358\u7d14\u306b`rake db:migrate`\u3068\u3057\u305f\u5834\u5408\u306f\u3001\u666e\u901a\uff11\u756a\u4e0a\u306e`up`\u3092\u547c\u3076\u3002\n\u73fe\u5728\u3088\u308a\u3082\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f`down`\u3092\u547c\u3076\u3002\n\n```ruby\nwhen target_version.nil?\n  up(migrations_paths, target_version, &block)\nwhen current_version == 0 && target_version == 0\n  []\nwhen current_version > target_version\n  down(migrations_paths, target_version, &block)\nelse\n  up(migrations_paths, target_version, &block)\nend\n```\n\n### target_version\u3068current_version\u306f\u3069\u3046\u3084\u3063\u3066\u6c7a\u307e\u308b\u304b\uff1f\ntarget_version\u306f\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070nil\ncurrent_version\u306f\u3001\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u7e4b\u304c\u3063\u3066\u3044\u308bDB\u306eSchemaMigration.table_name\u306eversion\u6570\u5024\u306e\u6700\u5927\u5024\u304c\u7528\u3044\u3089\u308c\u308b\u3002schme.rb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u5024\u306f\u95a2\u4fc2\u306a\u3044\u3093\u3067\u3059\u306d\u3002\n\n```ruby\ndef current_version\n  sm_table = schema_migrations_table_name\n  if Base.connection.table_exists?(sm_table)\n    get_all_versions.max || 0\n  else\n    0\n  end\nend\n```\n\n### Migrator.migration_paths\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001`['db/migrate']`\u304c\u5e30\u308b\u3002Array\u306b`to_a`\u3057\u3066\u3082Array\u306e\u307e\u307e\u5909\u5316\u3057\u306a\u3044\u3002\n\nWantedly\u3067\u306f\u8907\u6570\u306eDB\u3092Rails\u306b\u7e4b\u3044\u3067\u3044\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u306a\u304f\u3001`rake mail_db:migrate`\u3068\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u3002\n\nrake\u30d5\u30a1\u30a4\u30eb\u306eload_config\u3067migration_paths\u306b\"mail_db\"\u304c\u5165\u308b\u3002\n`ActiveRecord::Migrator.migrations_paths = ActiveRecord::Tasks::DatabaseTasks.migrations_paths`\n\n## Migrator.up\n\u73fe\u5728\u306emigration\u3092\u6301\u3063\u3066\u304d\u3066\u3001Migrator\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066migrate\u3092\u547c\u3076\u3002\n\n`migrations.select! { |m| yield m } if block_given?`\nmigration.scope\u3068ENV['SCOPE']\u304c\u9055\u3046\u3082\u306e\u3092\u5b9f\u884c\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n```ruby\ndef up(migrations_paths, target_version = nil)\n  migrations = migrations(migrations_paths)\n  migrations.select! { |m| yield m } if block_given?\n\n  self.new(:up, migrations, target_version).migrate\nend\n```\n\n\u305d\u3082\u305d\u3082migrations\u3068\u306f\uff1f\n\n### Migrator.migrations\nmigrate\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u307f\u3066\u3001\u30de\u30c3\u30c1\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6301\u3063\u3066\u304f\u308b\u3002\n\n- Dir\n\t- `\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u306e\u5c55\u958b\u3092\u884c\u3044\u3001 \u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6587\u5b57\u5217\u306e\u914d\u5217\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002`\n\n\u306a\u306e\u3067\u3001file\u306b\u306f\u3001\u6307\u5b9a\u3057\u305fmigrate\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u30de\u30c3\u30c1\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u6587\u5b57\u5217\u3067\u5168\u90e8\u5165\u308b\u3002\n[\"db/migrate/20110627144734_create_jobs.rb\",\n \"db/migrate/20110628003714_devise_create_users.rb\",\n \"db/migrate/20110629071604_remove_applicant_from_jobs.rb\",\n \"db/migrate/20110629071620_remove_connector_from_jobs.rb\",\n ...]\u307f\u305f\u3044\u306a\u611f\u3058\u3002\n\n\u3053\u3053\u304b\u3089\u66f4\u306b\u3001`\u30d0\u30fc\u30b8\u30e7\u30f3\u6570_\u540d\u524d_.rb`\u306b\u4e00\u81f4\u3059\u308b\u3082\u306e\u3060\u3051\u3092\u898b\u3066\u3001MigrationProxy\u306a\u308b\u3082\u306e\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u3053\u308c\u306f\u5b9f\u969b\u306eMigration\u3092\u547c\u3073\u51fa\u3059\u3082\u306e\u3002\n\n```ruby\nMigrationProxy is used to defer loading of the actual migration classes until they are needed\n\ndelegate :migrate, :announce, :write, :disable_ddl_transaction, to: :migration\n```\n  \n\u3053\u308c\u304cmigrations\u306b\u306a\u308b\u3002\n\n```ruby\ndef migrations(paths)\n  paths = Array(paths)\n\n  files = Dir[*paths.map { |p| \"#{p}/**/[0-9]*_*.rb\" }]\n\n  migrations = files.map do |file|\n    version, name, scope = file.scan(/([0-9]+)_([_a-z0-9]*)\\.?([_a-z0-9]*)?\\.rb\\z/).first\n\n    raise IllegalMigrationNameError.new(file) unless version\n    version = version.to_i\n    name = name.camelize\n\n    MigrationProxy.new(name, version, file, scope)\n  end\n\n  migrations.sort_by(&:version)\nend\n```\n\n### Migrator#initialize\nMigration\u3092\u547c\u3073\u51fa\u3059\u4eba\u3002\nmigrations\u306b\u6587\u5b57\u5217\u304c\u4e00\u3064\u3067\u3082\u3042\u3063\u305f\u3089warn\u3092\u51fa\u3057\u3066migrations\u3092\u53d6\u5f97\u3057\u76f4\u3059\u3002\n\u305d\u306e\u5f8c\u3001validate\u3092\u547c\u3073\u51fa\u3057\u3066\u304b\u3089\u3001`Base.connection.initialize_schema_migrations_table`\n\n```ruby\n    def initialize(direction, migrations, target_version = nil)\n      raise StandardError.new(\"This database does not yet support migrations\") unless Base.connection.supports_migrations?\n\n      @direction         = direction\n      @target_version    = target_version\n      @migrated_versions = nil\n\n      if Array(migrations).grep(String).empty?\n        @migrations = migrations\n      else\n        ActiveSupport::Deprecation.warn \"instantiate this class with a list of migrations\"\n        @migrations = self.class.migrations(migrations)\n      end\n\n      validate(@migrations)\n\n      Base.connection.initialize_schema_migrations_table\n    end\n```\n\n### Base.connection.initialize_schema_migrations_table\n`ActiveRecord::SchemaMigration.create_table`\u3092\u3084\u308b\u3068\u601d\u3063\u3066\u3044\u308b\n\u3053\u308c\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u4ee5\u4e0b\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u3002\n\n```ruby\nconnection.create_table(table_name, id: false) do |t|\n  t.column :version, :string, version_options\nend\n```\n\n### Migrator#migrate\n\u5404\u3005\u306emigration\u306b\u5bfe\u3057\u3066\u3001`execute_migration_in_transaction(migration, @direction)`\u3092\u547c\u3073\u51fa\u3059\u3002\n\n\n```ruby\n    def migrate\n      if !target && @target_version && @target_version > 0\n        raise UnknownMigrationVersionError.new(@target_version)\n      end\n\n      running = runnable\n\n      if block_given?\n        message = \"block argument to migrate is deprecated, please filter migrations before constructing the migrator\"\n        ActiveSupport::Deprecation.warn message\n        running.select! { |m| yield m }\n      end\n\n      running.each do |migration|\n        Base.logger.info \"Migrating to #{migration.name} (#{migration.version})\" if Base.logger\n\n        begin\n          execute_migration_in_transaction(migration, @direction)\n        rescue => e\n          canceled_msg = use_transaction?(migration) ? \"this and \" : \"\"\n          raise StandardError, \"An error has occurred, #{canceled_msg}all later migrations canceled:\\n\\n#{e}\", e.backtrace\n        end\n      end\n    end\n```\n\n### execute_migration_in_transaction\nmigration.migrate(direction)\u3092\u547c\u3073\u51fa\u3057\u305f\u3042\u3068\u306b\u3001\u305d\u308c\u3092\u8a18\u9332\u3059\u308b\u3002\nddl_transaction(migration)\u306fTransaction\u51e6\u7406\u304c\u53ef\u80fd\uff08Base.connection.supports_ddl_transactions?\uff09\u306a\u3089Transaction\u51e6\u7406\u306e\u4e2d\u3067\u884c\u3046\u3002\n\n```ruby\n    def execute_migration_in_transaction(migration, direction)\n      ddl_transaction(migration) do\n        migration.migrate(direction)\n        record_version_state_after_migrating(migration.version)\n      end\n    end\n```\n\n### Migration#migrate(direction)\n\u3053\u3053\u3067\u306f\u65e2\u306b\u3001\u3069\u306e\u5909\u66f4\u3092\u3069\u306e\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u308b\u3001\u3068\u3044\u3046\u60c5\u5831\u304c\u63c3\u3063\u3066\u3044\u308b\u3002\n\n`exec_migration(conn, direction)`\u3092\u5b9f\u884c\u3002\n`up`\u3067\u3042\u308c\u3070\"migrating\"\u3068\u3057\u3066\u3001\u7d42\u4e86\u5f8c\u306b\u5b9f\u884c\u6642\u306e\u7d4c\u904e\u6642\u9593\u3092\u8868\u793a\u3002\n\"migrated (2.4854)\"\u307f\u305f\u3044\u306b\u8868\u793a\u3059\u308b\u3002\n\n```ruby\n# Execute this migration in the named direction\ndef migrate(direction)\n  return unless respond_to?(direction)\n\n  case direction\n  when :up   then announce \"migrating\"\n  when :down then announce \"reverting\"\n  end\n\n  time   = nil\n  ActiveRecord::Base.connection_pool.with_connection do |conn|\n    time = Benchmark.measure do\n      exec_migration(conn, direction)\n    end\n  end\n\n  case direction\n  when :up   then announce \"migrated (%.4fs)\" % time.real; write\n  when :down then announce \"reverted (%.4fs)\" % time.real; write\n  end\nend\n```\n\n### Migration.exec_migration(connection, direction)\n\n`if respond_to?(:change)`\u3067 change\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308c\u3070\u3001\nchange\u304brevert\u3092\u5b9f\u884c\u3059\u308b\u3002\nup, down\u3068\u304b\u3057\u304b\u306a\u3051\u308c\u3070\u3001up\u304bdown\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n```ruby\ndef exec_migration(conn, direction)\n  @connection = conn\n  if respond_to?(:change)\n    if direction == :down\n      revert { change }\n    else\n      change\n    end\n  else\n    send(direction)\n  end\nensure\n  @connection = nil\nend\n```\n\n### Migration.change\n\nMigration\u30d5\u30a1\u30a4\u30eb\u306echange\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u3002\u6211\u3005\u304c\u66f8\u3044\u3066\u3044\u308b\u3042\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3002\n\u3053\u3053\u3067\u306f\u3001add_column\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\nadd_column\u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u3053\u308c\u306fmethod_missing\u306b\u3088\u3063\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002\nmethod='add_column'\u306e\u3068\u304d\u306f\u3001ActiveRecord::Base.connection\u306b`add_column`\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u304b\u3092\u78ba\u304b\u3081\u3066\u3001\n`connection.send(method, *arguments, &block)`\u306b\u3088\u308a\u5b9f\u884c\u3002\n\n\u5b9f\u884c\u3055\u308c\u305f\u3089\u3001`say_with_time`\u3068\u3044\u3046\u30d5\u30e9\u30f3\u30af\u306a\u540d\u524d\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u5b9f\u884c\u6642\u9593\u3068\u5171\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\n\n```ruby\ndef method_missing(method, *arguments, &block)\n  arg_list = arguments.map{ |a| a.inspect } * ', '\n\n  say_with_time \"#{method}(#{arg_list})\" do\n    unless @connection.respond_to? :revert\n      unless arguments.empty? || [:execute, :enable_extension, :disable_extension].include?(method)\n        arguments[0] = Migrator.proper_table_name(arguments.first)\n        arguments[1] = Migrator.proper_table_name(arguments.second) if method == :rename_table\n      end\n    end\n    return super unless connection.respond_to?(method)\n    connection.send(method, *arguments, &block)\n  end\nend\n```\n\n## \u6700\u5f8c\uff1aadd_column\u306f\u306a\u306b\u3092\u3084\u3063\u3066\u3044\u308b\u304b\n\u3053\u3053\u304b\u3089\u5148\u306f\u7d50\u69cb\u3001PostgresSQL\u3068\u304bSQLite\u3068\u304b\u56fa\u6709\u306e\u3082\u306e\u3068\u5171\u901a\u306e\u3082\u306e\u304c\u3042\u3063\u3066\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u308b\u5370\u8c61\u3002\n\n### SchemaStatements.add_column (postgresql/schema_statements.rb)\n\n```ruby\ndef add_column(table_name, column_name, type, options = {})\n  clear_cache!\n  super\nend\n```\n\n### SchemaStatements.add_column (abstract/schema_statements.rb)\n\n```ruby\n# Adds a new column to the named table.\n# See TableDefinition#column for details of the options you can use.\ndef add_column(table_name, column_name, type, options = {})\n  at = create_alter_table table_name\n  at.add_column(column_name, type, options)\n  execute schema_creation.accept at\nend\n```\n\n\n```ruby\nalter_table\u3068\u3044\u3046\u3082\u306e\u3092\u4f5c\u3063\u3066\u3044\u308b\u3063\u307d\u3044\u3002\nAlterTable.new create_table_definition(name, false, {})\n\nadd_column(name, type, options)\u3060\u3051\u306e\u60c5\u5831\u3092\u6301\u3064\u30af\u30e9\u30b9\n```\n\n```ruby\ndef schema_creation\n  SchemaCreation.new self\nend\n\nclass SchemaCreation\n\tdef accept(o)\n    \tm = @cache[o.class] ||= \"visit_#{o.class.name.split('::').last}\"\n\t\tsend m, o\n\tend\n... \nend\nvisit_AlterTable\u304c\u547c\u3070\u308c\u308b\u3002\n```\n\n```ruby\ndef visit_AlterTable(o)\n  sql = \"ALTER TABLE #{quote_table_name(o.name)} \"\n  sql << o.adds.map { |col| visit_AddColumn col }.join(' ')\nend\n\ndef visit_AddColumn(o)\n  sql_type = type_to_sql(o.type.to_sym, o.limit, o.precision, o.scale)\n  sql = \"ADD #{quote_column_name(o.name)} #{sql_type}\"\n  add_column_options!(sql, column_options(o))\nend\n```\n\nexecute \u306e\u4e2d\u3067`@connection.async_exec(sql)`\u304c\u547c\u3070\u308c\u3066SQL\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n## \u304a\u308f\u308a\n\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u308b\u3053\u3068\u3067\u3001\u65e5\u5e38\u7684\u306b\u6253\u3063\u3066\u3044\u308b\u30b3\u30de\u30f3\u30c9\u304c\u5185\u90e8\u3067\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u3067\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u7279\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u8a71\u3068\u304b\u3001migrate\u30d5\u30a1\u30a4\u30eb\u306eadd_column\u307f\u305f\u3044\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3001\u5b9f\u969b\u306fmethod_missing\u3067\u62fe\u308f\u308c\u3066\u3044\u3066\u3001database\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u30e1\u30bd\u30c3\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3089\u81ea\u52d5\u7684\u306b\u4f7f\u3048\u308b\u306e\u3067\u9762\u767d\u3044\u4ed5\u7d44\u307f\u3060\u306a\u3068\u304b\u3002\n\nWantedly\u306e\u5834\u5408\u306f\u3001Wantedly\u306e\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067Rails\u3092\u89e6\u308b\u306e\u304c\u521d\u3081\u3066\u3068\u3044\u3046\u30e1\u30f3\u30d0\u30fc\u3082\u591a\u304f\uff08\u81ea\u5206\u3082Java\u3068Python\u306e\u4eba\u3067\u3057\u305f\uff09\u3001\u3053\u3046\u3044\u3063\u305f\u8aad\u307f\u4f1a\u306f\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ed6\u306e\u30e1\u30f3\u30d0\u30fc\u306e\u8aad\u307f\u65b9\u3068\u304b\u3001\u8003\u3048\u65b9\u3068\u304b\u3092\u5171\u6709\u3067\u304d\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3082\u304a\u52e7\u3081\u3067\u3059\u3002\n", "tags": ["\u52c9\u5f37\u4f1a", "wantedly", "Rails", "ActiveRecord"]}