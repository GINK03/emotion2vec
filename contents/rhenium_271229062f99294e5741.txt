{"context": " More than 1 year has passed since last update.Ruby \u3067\u30d0\u30fc\u30c1\u30e3\u30eb\u30db\u30b9\u30c8\u5bfe\u5fdc\u306e HTTPS \u30b5\u30fc\u30d0\u30fc\u3092\u66f8\u3053\u3046\u3068\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001Ruby \u304b\u3089 TLS \u62e1\u5f35\u306e SNI \u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u7c21\u5358\u306b\u8abf\u3079\u307e\u3057\u305f\u3002\n\nSNI \u3068\u306f\uff1f\nSNI (Server Name Indication) \u3068\u306f\u3001RFC 6066 \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b TLS \u306e\u62e1\u5f35\u3067\u3001Client hello \u306e\u4e2d\u306b\u30b5\u30fc\u30d0\u30fc\u306e\u30db\u30b9\u30c8\u540d\u3092\u57cb\u3081\u3053\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u62e1\u5f35\u3067\u3059\u3002\n\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u4f8b\u3048\u3070\u30b5\u30fc\u30d0\u30fc\u306f\u8981\u6c42\u3055\u308c\u305f\u30db\u30b9\u30c8\u540d\u306b\u3088\u3063\u3066\u4f7f\u7528\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070 nginx \u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u306f\n\nnginx.conf\nhttp {\n  server {\n    listen server_a:443 ssl;\n    ssl_certificate server_a.crt;\n  }\n  server {\n    listen server_b:443 ssl;\n    ssl_certificate server_b.crt;\n  }\n}\n\n\n\u3068\u66f8\u304f\u3068\u3001\u30d6\u30e9\u30a6\u30b6\u304b\u3089 https://server_a/ \u3067\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5834\u5408\u306b\u306f server_a.crt \u304c\u4f7f\u7528\u3055\u308c\u3001https://server_b/ \u3067\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5834\u5408\u306b\u306f server_b.crt \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u306d\u3002\n\nRuby \u3067\u306f\uff1f\nRuby \u306e openssl \u6a19\u6e96\u6dfb\u4ed8\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u306f OpenSSL::SSL::SSLContext#servername_cb=\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u306f OpenSSL::SSL::SSLSocket#hostname= \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u30fc\n\nserver.rb\nrequire \"openssl\"\nrequire \"socket\"\n\nctx = OpenSSL::SSL::SSLContext.new\nctx.servername_cb = proc {|sslsock, hostname|\n  puts hostname\n\n  new_ctx = OpenSSL::SSL::SSLContext.new\n  case hostname\n  when \"0.example.com\"\n    new_ctx.cert = OpenSSL::X509::Certificate.new(File.read(\"0.example.com.crt\"))\n    new_ctx.key = OpenSSL::PKey::RSA.new(File.read(\"0.example.com.key\"))\n  else\n    new_ctx.cert = OpenSSL::X509::Certificate.new(File.read(\"1.example.com.crt\"))\n    new_ctx.key = OpenSSL::PKey::RSA.new(File.read(\"1.example.com.key\"))\n  end\n  new_ctx\n}\ntcp_server = TCPServer.new(\"127.0.0.1\", 40443)\nssl_server = OpenSSL::SSL::SSLServer.new(tcp_server, ctx)\n\nloop do\n  sock = ssl_server.accept\n  sock.close\nend\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\nclient.rb\nrequire \"openssl\"\nrequire \"socket\"\n\ntcp_socket = TCPSocket.new(\"127.0.0.1\", 40443)\nssl_socket = OpenSSL::SSL::SSLSocket.new(tcp_socket)\nssl_socket.hostname = ARGV[0]\n\nssl_socket.connect\n\nputs ssl_socket.peer_cert.subject\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u30b5\u30fc\u30d0\u30fc\n% ruby server.rb\n0.example.com\nexample.org\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n% ruby client.rb 0.example.com\n/C=JP/CN=0.example.com/emailAddress=postmaster@0.example.com\n% ruby client.rb example.org\n/C=JP/CN=1.example.com/emailAddress=postmaster@1.example.com\n\n\nRuby \u3067\u30d0\u30fc\u30c1\u30e3\u30eb\u30db\u30b9\u30c8\u5bfe\u5fdc\u306e HTTPS \u30b5\u30fc\u30d0\u30fc\u3092\u66f8\u3053\u3046\u3068\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001Ruby \u304b\u3089 TLS \u62e1\u5f35\u306e SNI \u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u7c21\u5358\u306b\u8abf\u3079\u307e\u3057\u305f\u3002\n\n# SNI \u3068\u306f\uff1f\nSNI (Server Name Indication) \u3068\u306f\u3001RFC 6066 \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b TLS \u306e\u62e1\u5f35\u3067\u3001Client hello \u306e\u4e2d\u306b\u30b5\u30fc\u30d0\u30fc\u306e\u30db\u30b9\u30c8\u540d\u3092\u57cb\u3081\u3053\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u62e1\u5f35\u3067\u3059\u3002\n\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u4f8b\u3048\u3070\u30b5\u30fc\u30d0\u30fc\u306f\u8981\u6c42\u3055\u308c\u305f\u30db\u30b9\u30c8\u540d\u306b\u3088\u3063\u3066\u4f7f\u7528\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070 nginx \u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u306f\n\n```nginx.conf\nhttp {\n  server {\n    listen server_a:443 ssl;\n    ssl_certificate server_a.crt;\n  }\n  server {\n    listen server_b:443 ssl;\n    ssl_certificate server_b.crt;\n  }\n}\n```\n\u3068\u66f8\u304f\u3068\u3001\u30d6\u30e9\u30a6\u30b6\u304b\u3089 https\\://server_a/ \u3067\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5834\u5408\u306b\u306f server_a.crt \u304c\u4f7f\u7528\u3055\u308c\u3001https\\://server_b/ \u3067\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5834\u5408\u306b\u306f server_b.crt \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u306d\u3002\n\n## Ruby \u3067\u306f\uff1f\nRuby \u306e openssl \u6a19\u6e96\u6dfb\u4ed8\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u306f `OpenSSL::SSL::SSLContext#servername_cb=`\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u306f `OpenSSL::SSL::SSLSocket#hostname=` \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n\n### \u30b5\u30fc\u30d0\u30fc\n```ruby:server.rb\nrequire \"openssl\"\nrequire \"socket\"\n\nctx = OpenSSL::SSL::SSLContext.new\nctx.servername_cb = proc {|sslsock, hostname|\n  puts hostname\n\n  new_ctx = OpenSSL::SSL::SSLContext.new\n  case hostname\n  when \"0.example.com\"\n    new_ctx.cert = OpenSSL::X509::Certificate.new(File.read(\"0.example.com.crt\"))\n    new_ctx.key = OpenSSL::PKey::RSA.new(File.read(\"0.example.com.key\"))\n  else\n    new_ctx.cert = OpenSSL::X509::Certificate.new(File.read(\"1.example.com.crt\"))\n    new_ctx.key = OpenSSL::PKey::RSA.new(File.read(\"1.example.com.key\"))\n  end\n  new_ctx\n}\ntcp_server = TCPServer.new(\"127.0.0.1\", 40443)\nssl_server = OpenSSL::SSL::SSLServer.new(tcp_server, ctx)\n\nloop do\n  sock = ssl_server.accept\n  sock.close\nend\n```\n### \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n```ruby:client.rb\nrequire \"openssl\"\nrequire \"socket\"\n\ntcp_socket = TCPSocket.new(\"127.0.0.1\", 40443)\nssl_socket = OpenSSL::SSL::SSLSocket.new(tcp_socket)\nssl_socket.hostname = ARGV[0]\n\nssl_socket.connect\n\nputs ssl_socket.peer_cert.subject\n```\n\n### \u5b9f\u884c\u7d50\u679c\n```sh:\u30b5\u30fc\u30d0\u30fc\n% ruby server.rb\n0.example.com\nexample.org\n```\n\n\n```sh:\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n% ruby client.rb 0.example.com\n/C=JP/CN=0.example.com/emailAddress=postmaster@0.example.com\n% ruby client.rb example.org\n/C=JP/CN=1.example.com/emailAddress=postmaster@1.example.com\n```\n", "tags": ["Ruby", "TLS"]}