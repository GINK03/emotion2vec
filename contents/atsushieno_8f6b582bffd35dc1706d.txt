{"context": "Unicode\u306eEastAsianWidth\u304c\u4f55\u304b\u8a71\u984c\u306b\u306a\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u3002\nhttp://tech.albert2005.co.jp/blog/2014/04/21/mco-eaw/\n\u3068\u3044\u3046\u306e\u3092\u30b3\u30ec\u3067\u77e5\u3063\u305f\u3002\nhttps://twitter.com/ishisaka/status/458165828165578753\n.NET\u306b\u7121\u3044? \u3058\u3083\u3042\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nEastAsianWidth\u306e\u3001\u7279\u306bAmbiguous\u306e\u6319\u52d5\u304c\u3053\u308f\u3044\u3053\u308f\u3044\u3063\u3066\u8a00\u308f\u308c\u3066\u3044\u308b\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u6587\u5b57\u306e\u5168\u89d2\u30fb\u534a\u89d2\u306e\u5224\u5225\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306f\u3001\u3061\u3063\u3068\u3082\u96e3\u3057\u304f\u306a\u3044\u3002\u3084\u308b\u3053\u3068\u306f2\u3064\u3060\u3051\u3060\u3002\n\n\u5168\u3066\u306eUnicode\u6587\u5b57\u306b\u3064\u3044\u3066\u3001EastAsianWidth\u306e\u5024\u306e\u30ea\u30b9\u30c8\u3092\u69cb\u7bc9\u3059\u308b\u3002\n\u6587\u5b57(char ch)\u3068\u5bfe\u8c61\u8a00\u8a9e\u304c\u6771\u30a2\u30b8\u30a2\u304b\u3069\u3046\u304b\uff08bool isEastAsian)\u304b\u3089\u3001\u6587\u5b57\u7a2e\u306b\u57fa\u3065\u3044\u3066\u5168\u89d2\u304b\u534a\u89d2\u304b\u3092bool\u3067\u8fd4\u3059\n\nEastAsianWidth\u306e\u5024\u304c\u308f\u304b\u3063\u3066\u3044\u308c\u3070\u3001\u5168\u89d2\u30fb\u534a\u89d2\u3092\u5224\u65ad\u3059\u308b\u306e\u306f\u7c21\u5358\u3060:\n    public static bool IsFullWidth (int c, bool isEastAsian)\n    {\n        switch (GetKind (c)) {\n        case EastAsianWidthKind.Ambiguous:\n            return isEastAsian;\n        case EastAsianWidthKind.Full:\n        case EastAsianWidthKind.Wide:\n            return true;\n        default:\n            return false;\n        }\n    }\n\n\u6587\u8108\u306b\u3088\u3063\u3066\u306f\u3001isEastAsian\u306fCultureInfo\u304b\u3089\u5224\u5225\u3057\u3066\u3082\u3044\u3044\uff08CultureInfo\u306b\u305d\u3093\u306a\u60c5\u5831\u306f\u7121\u3044\u306e\u3067\u3001\u5916\u5074\u304b\u3089\u529b\u6280\u3067\u5224\u5225\u3059\u308b\u3057\u304b\u306a\u3044\u3068\u601d\u3046\u3051\u3069\uff09\u3002\u77e5\u308b\u9650\u308a\u3067\u306f\u3001.NET\u3067EastAsianWidth\u304cAPI\u30ec\u30d9\u30eb\u3067\u7372\u5f97\u3067\u304d\u308b\u306e\u306fWindows Store\u30a2\u30d7\u30ea\u306e\u30c6\u30ad\u30b9\u30c8\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306b\u4f7f\u3046\u30d5\u30a9\u30f3\u30c8\u306e\u60c5\u5831\u304f\u3089\u3044\u3060\u3002\nhttp://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.documents.typography.eastasianwidth.aspx\nUnicode\u306b\u304a\u3051\u308bEastAsianWidth\u306e\u5024\u306f\u3001Unicode Character Database (UCD)\u306e\u4e2d\u306b\u3001\u3053\u308c\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30ea\u30b9\u30c8\u3068\u3057\u3066\u683c\u7d0d\u3059\u308c\u3070\u3044\u3044\u3060\u3051\u3060\u3002UCD\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u306f\u5358\u7d14\u306a\u3082\u306e\u3060\u3002\nhttp://www.unicode.org/Public/UCD/latest/ucd/EastAsianWidth.txt\n\u3068\u308a\u3042\u3048\u305a\u3001EastAsianWidth\u3092\u5224\u5225\u3059\u308b\u30af\u30e9\u30b9\u3001\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5185\u5bb9\u3092\u3044\u3061\u3044\u3061\u89e3\u6790\u3057\u305f\u304f\u306f\u306a\u3044\u306e\u3067\u3001\u3044\u3063\u305f\u3093EmbeddedResource\u306e\u304b\u305f\u3061\u306b\u3057\u3066\u3001EastAsianWidth\u3092\u5224\u5225\u3055\u305b\u3066\u304f\u308c\u308bEastAsianWidth\u30af\u30e9\u30b9\u3068\u4e00\u7dd2\u306edll\u306b\u683c\u7d0d\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3088\u3046\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u3044\u3063\u305f\u3093\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u3001\u751f\u30c7\u30fc\u30bf\u3068\u3057\u3066\u66f8\u304d\u51fa\u3059\u3053\u3068\u306b\u3059\u308b\u3002\nEastAsianWidth.txt\u306e\u8a18\u6cd5\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3060\u3002\n000D;N # <control>\nF0000..FFFFD;A # <Plane 15 Private Use, First>..<Plane 15 Private Use, Last>\n\n\u5185\u5bb9\u306f\u5168\u3066\u300c\u6587\u5b57\u307e\u305f\u306f\u6587\u5b57\u7bc4\u56f2;EastAsianWidth\u7a2e\u5225 #\u30b3\u30e1\u30f3\u30c8\u300d\u306e\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u7bc4\u56f2\u6307\u5b9a\u304c\u3042\u308b\u90e8\u5206\u306f\u3001\u5225\u9014\u7bc4\u56f2\u6307\u5b9a\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u4ee5\u5916\u306e1\u6587\u5b57\u6307\u5b9a\u306e\u90e8\u5206\u306f\u5358\u7d14\u306b\u914d\u5217\u306b\u683c\u7d0d\u3057\u3088\u3046\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30d1\u30fc\u30b5\u304a\u3088\u3073\u30c7\u30fc\u30bf\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u30b3\u30fc\u30c9\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3060:\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\n\npublic class Driver\n{\npublic static void Main (string [] args)\n{\n    new Driver ().Run (args);\n}\n\nstruct RangeMap<T>\n{\n    public int Start;\n    public int End;\n    public T Value;\n}\n\nList<RangeMap<char>> ranges = new List<RangeMap<char>> ();\nchar [] eaw = new char [0x10FFFF];\n\n// list of optimizible mappings.\nRangeMap<char> [] optmap = {\n    new RangeMap<char> () {Start = 0x2F800, End = 0x2FA1D, Value = 'W'},\n    new RangeMap<char> () {Start = 0x4DC0, End = 0x4DFF, Value = 'N'},\n    new RangeMap<char> () {Start = 0xD7B0, End = 0xD7C6, Value = 'N'},\n    new RangeMap<char> () {Start = 0xD7CB, End = 0xD7FB, Value = 'N'},\n    new RangeMap<char> () {Start = 0xE0001, End = 0xE0001, Value = 'N'},\n    new RangeMap<char> () {Start = 0xE0020, End = 0xE007F, Value = 'N'},\n    new RangeMap<char> () {Start = 0xE0100, End = 0xE01EF, Value = 'A'},\n    };\n\npublic void Run (string [] args)\n{\n    string text = null;\n    string output = \"EastAsianWidth.dat\";\n    string mapoutput = \"EastAsianWidth.opt\";\n    string source = args.Length == 0 && File.Exists (\"EastAsianWidth.txt\") ? \"EastAsianWidth.txt\" : args.FirstOrDefault ();\n    if (source != null)\n        text = File.ReadAllText (source);\n    else {\n        string univer = args.Length > 0 ? args [0] : \"UCD/latest\";\n\n        string url = string.Format (\"http://www.unicode.org/Public/{0}/ucd/EastAsianWidth.txt\", univer);\n\n        text = new WebClient ().DownloadString (url);\n    }\n\n    var lines = text.Split ('\\n');\n    Func<string,string> first = s => s.Substring (0, s.IndexOf ('.'));\n    Func<string,string> last = s => s.Substring (s.LastIndexOf ('.') + 1);\n    Func<string,int> parse = s => int.Parse (s, NumberStyles.HexNumber);\n    foreach (var p in lines\n            .Select (x => x.Split ('#'))\n            .Select (arr => arr [0].Trim ())\n            .Where (x => x.Contains (';'))\n            .Select (x => x.Split (';'))) {\n        if (p [0].Contains ('.'))\n            ranges.Add (new RangeMap<char> () {Start = parse (first (p [0])), End = parse (last (p [0])), Value = p [1].Last ()});\n        else\n            eaw [parse (p [0])] = p [1].Last ();\n    }\n    // Apply mapping optimizer - for predefined optimizible list, fill '\\0' (only if the mapping was correct)\n    foreach (var m in optmap) {\n        bool invalid = false;\n        for (int i = m.Start; i <= m.End; i++)\n            if (eaw [i] != m.Value) {\n                Console.Error.WriteLine (\"Invalid optimization, at {0:X06}\", i);\n                invalid = true;\n            }\n        if (!invalid)\n            for (int i = m.Start; i <= m.End; i++)\n                eaw [i] = '\\0';\n    }\n    // calculate max index. After this, mapping is not generated.\n    int maxIndex = 0;\n    for (int i = eaw.Length - 1;;i--) {\n        if (eaw [i] != '\\0') {\n            Console.Error.WriteLine (\"max EAW index: {0:X06}\", i);\n            maxIndex = i;\n            break;\n        }\n    }\n    using (var fs = File.CreateText (output)) {\n        for (int i = 0; i <= maxIndex; i++)\n            fs.Write (eaw [i]);\n    }\n    using (var fs = File.CreateText (mapoutput)) {\n        string allRanges = string.Join (\";\", ranges.Concat (optmap)\n            .OrderBy (m => m.Start)\n            .Select (m => string.Format (\"{0:X06}-{1:X06}={2}\", m.Start, m.End, m.Value))\n            );\n        fs.WriteLine (allRanges);\n    }\n}\n}\n\n\u5b9f\u306e\u3068\u3053\u308d\u3001\u3082\u3046\u3072\u3068\u3064\u6700\u9069\u5316\u3092\u65bd\u3057\u3066\u3042\u3063\u3066\u3001\u4e00\u90e8\u306e\u6587\u5b57\u7bc4\u56f2\uff08optmap\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u7bc4\u56f2\uff09\u306b\u3064\u3044\u3066\u306f\u3001\u624b\u52d5\u3067\u7bc4\u56f2\u6307\u5b9a\u3092\u8ffd\u52a0\u3057\u3066\u3042\u308b\u3002\u3053\u308c\u306f\u73fe\u72b6\u3067\u306f\u307b\u307c\u610f\u5473\u304c\u306a\u3044\u3051\u3069\u3001\u5f8c\u3067\u914d\u5217\u306e\u683c\u7d0d\u65b9\u6cd5\u3092\u6700\u9069\u5316\u3057\u305f\u6642\u306b\u6709\u52b9\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u308c\u3067\u30c7\u30fc\u30bf\u306f\u751f\u6210\u3067\u304d\u305f\u3002\u5f8c\u306f\u3001EastAsianWidth\u3092\u6271\u3046\u30af\u30e9\u30b9\u306e\u4e2d\u3067\u3001\u3053\u308c\u3092EmbeddedResource\u304b\u3089\u53d6\u308a\u51fa\u3057\u3066\u3001\u4f7f\u3048\u308b\u30c7\u30fc\u30bf\u306b\u623b\u3059\u3060\u3051\u3060\u3002\n    class Map\n    {\n        public int Start;\n        public int End;\n        public byte Value;\n    }\n\n    static readonly byte [] eaw;\n    static readonly Map [] map;\n\n    static EastAsianWidth ()\n    {\n        var stream = typeof (EastAsianWidth).Assembly.GetManifestResourceStream (\"EastAsianWidth.dat\");\n        eaw = new byte [stream.Length];\n        stream.Read (eaw, 0, eaw.Length);\n        stream = typeof (EastAsianWidth).Assembly.GetManifestResourceStream (\"EastAsianWidth.opt\");\n        Func<string,int> parse = s => int.Parse (s, NumberStyles.HexNumber);\n        string line = new StreamReader (stream).ReadToEnd ().Trim ();\n        map = line\n            .Split (';')\n            .Select (l => l.Split ('='))\n            .Select (arr => new {Range = arr [0].Split ('-'), Value = arr [1]})\n            .Select (m => new Map () {Start = parse (m.Range [0]), End = parse (m.Range [1]), Value = (byte) m.Value [0]})\n            .ToArray ();\n    }\n\n\u3044\u3063\u305f\u3093\u30c7\u30fc\u30bf\u3092\u5fa9\u5143\u3057\u305f\u3089\u3001EastAsianWidth\u7a2e\u5225\u3092\u53d6\u5f97\u3059\u308b\u306e\u306f\u3068\u3066\u3082\u7c21\u5358\u3060\u3002\u7bc4\u56f2\u6307\u5b9a\u306e\u30ea\u30b9\u30c8\u306f\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n    static byte GetValue (int c)\n    {\n        foreach (var m in map)\n            if (m.Start <= c && c <= m.End)\n                return m.Value;\n        return eaw [c];\n    }\n\n    public static EastAsianWidthKind GetKind (char c)\n    {\n        return GetKind ((int) c);\n    }\n\n    public static EastAsianWidthKind GetKind (int c)\n    {\n        var ret = GetValue (c);\n        switch (ret) {\n        case (byte) 'F':\n            return EastAsianWidthKind.Full;\n        case (byte) 'H':\n            return EastAsianWidthKind.Half;\n        case (byte) 'W':\n            return EastAsianWidthKind.Wide;\n        case (byte) 'a':\n            return EastAsianWidthKind.Narrow;\n        case (byte) 'A':\n            return EastAsianWidthKind.Ambiguous;\n        case (byte) 'N':\n            return EastAsianWidthKind.Neutral;\n        }\n        throw new InvalidOperationException ();\n    }\n\n\u3053\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u307e\u3068\u3081\u3066\u304a\u3044\u305f\u3002\nhttps://dl.dropboxusercontent.com/u/493047/tmp/nunicode.tar.gz\n2016.03.23\u8ffd\u8a18: \u30d5\u30a1\u30a4\u30eb\u304c\u6d88\u3048\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u306e\u3067\u3001github\u306brepo\u3092\u4f5c\u3063\u305f: https://github.com/atsushieno/nunicode\n\u305d\u3093\u306a\u306b\u771f\u5263\u306b\u6700\u9069\u5316\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30e1\u30e2\u30ea\u4e0a\u306b\u5c55\u958b\u3055\u308c\u308b\u914d\u5217\u306f\u305d\u308c\u306a\u308a\u306e\u5927\u304d\u3055\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u771f\u9762\u76ee\u306b\u6700\u9069\u5316\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u3001mono\u3067Unicode\u30b5\u30dd\u30fc\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u4f5c\u6210\u3057\u305f\u3001\u7a7a\u767d\u90e8\u5206\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u30a4\u30f3\u30c7\u30af\u30b5\u306e\u30af\u30e9\u30b9\u3092\u6d3b\u7528\u3067\u304d\u308b\u3060\u308d\u3046\u3002\nhttps://github.com/mono/mono/blob/master/mcs/class/corlib/Mono.Globalization.Unicode/CodePointIndexer.cs\n\u3061\u306a\u307f\u306b\u3001mono\u3067mscorlib\u306e\u5b9f\u88c5\u3092\u3057\u3066\u3044\u305f\u6642\u306f\u3001GetManifestResourceStreamInternal()\u3068\u3044\u3046\u88cf\u6280\u3092\u4f7f\u3063\u3066\u3001\u30e1\u30e2\u30ea\u30a2\u30c9\u30ec\u30b9\u306b\u30c0\u30a4\u30ec\u30af\u30c8\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u7121\u99c4\u306amanifest resource stream\u306e\u751f\u6210\u3092\u7701\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u3051\u3069\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u305d\u3046\u306f\u3044\u304b\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u306f\u6700\u9069\u5316\u51fa\u6765\u306a\u3044\u3068\u601d\u3063\u3066\u8ae6\u3081\u305f\u3002\n\u3068\u3082\u3042\u308c\u3001Unicode Character Database\u306e\u5024\u3092\u7d20\u76f4\u306b\u8fd4\u3059\u3088\u3046\u306aAPI\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306f\u3001\u3061\u3063\u3068\u3082\u96e3\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u307f\u3093\u306a\u7a4d\u6975\u7684\u306b\u30c8\u30e9\u30a4\u3057\u3066\u307f\u3066\u3082\u826f\u3044\u3068\u601d\u3046\u3002\n\u3061\u306a\u307f\u306bpost\u3057\u3066\u304b\u3089\u66f8\u304d\u5fd8\u308c\u3066\u3044\u305f\u3053\u3068\u306b\u6c17\u4ed8\u3044\u305f\u3051\u3069\u3001\u30bf\u30a4\u30c8\u30eb\u306b\u3042\u308b\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u306f\u4f5c\u3063\u3066\u3044\u306a\u3044\u3002\u3067\u3082System.Char\u306bextension method\u3092\u751f\u3084\u3059\u3060\u3051\u3060\u3002\u3053\u308c\u3060\u3051\u306a\u3089\u30b5\u30eb\u3067\u3082\u51fa\u6765\u308b\u3088\u306d?\nUnicode\u306eEastAsianWidth\u304c\u4f55\u304b\u8a71\u984c\u306b\u306a\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u3002\nhttp://tech.albert2005.co.jp/blog/2014/04/21/mco-eaw/\n\n\u3068\u3044\u3046\u306e\u3092\u30b3\u30ec\u3067\u77e5\u3063\u305f\u3002\nhttps://twitter.com/ishisaka/status/458165828165578753\n\n.NET\u306b\u7121\u3044? \u3058\u3083\u3042\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nEastAsianWidth\u306e\u3001\u7279\u306bAmbiguous\u306e\u6319\u52d5\u304c\u3053\u308f\u3044\u3053\u308f\u3044\u3063\u3066\u8a00\u308f\u308c\u3066\u3044\u308b\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u6587\u5b57\u306e\u5168\u89d2\u30fb\u534a\u89d2\u306e\u5224\u5225\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306f\u3001\u3061\u3063\u3068\u3082\u96e3\u3057\u304f\u306a\u3044\u3002\u3084\u308b\u3053\u3068\u306f2\u3064\u3060\u3051\u3060\u3002\n\n* \u5168\u3066\u306eUnicode\u6587\u5b57\u306b\u3064\u3044\u3066\u3001EastAsianWidth\u306e\u5024\u306e\u30ea\u30b9\u30c8\u3092\u69cb\u7bc9\u3059\u308b\u3002\n* \u6587\u5b57(char ch)\u3068\u5bfe\u8c61\u8a00\u8a9e\u304c\u6771\u30a2\u30b8\u30a2\u304b\u3069\u3046\u304b\uff08bool isEastAsian)\u304b\u3089\u3001\u6587\u5b57\u7a2e\u306b\u57fa\u3065\u3044\u3066\u5168\u89d2\u304b\u534a\u89d2\u304b\u3092bool\u3067\u8fd4\u3059\n\nEastAsianWidth\u306e\u5024\u304c\u308f\u304b\u3063\u3066\u3044\u308c\u3070\u3001\u5168\u89d2\u30fb\u534a\u89d2\u3092\u5224\u65ad\u3059\u308b\u306e\u306f\u7c21\u5358\u3060:\n\n\t\tpublic static bool IsFullWidth (int c, bool isEastAsian)\n\t\t{\n\t\t\tswitch (GetKind (c)) {\n\t\t\tcase EastAsianWidthKind.Ambiguous:\n\t\t\t\treturn isEastAsian;\n\t\t\tcase EastAsianWidthKind.Full:\n\t\t\tcase EastAsianWidthKind.Wide:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\u6587\u8108\u306b\u3088\u3063\u3066\u306f\u3001isEastAsian\u306fCultureInfo\u304b\u3089\u5224\u5225\u3057\u3066\u3082\u3044\u3044\uff08CultureInfo\u306b\u305d\u3093\u306a\u60c5\u5831\u306f\u7121\u3044\u306e\u3067\u3001\u5916\u5074\u304b\u3089\u529b\u6280\u3067\u5224\u5225\u3059\u308b\u3057\u304b\u306a\u3044\u3068\u601d\u3046\u3051\u3069\uff09\u3002\u77e5\u308b\u9650\u308a\u3067\u306f\u3001.NET\u3067EastAsianWidth\u304cAPI\u30ec\u30d9\u30eb\u3067\u7372\u5f97\u3067\u304d\u308b\u306e\u306fWindows Store\u30a2\u30d7\u30ea\u306e\u30c6\u30ad\u30b9\u30c8\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306b\u4f7f\u3046\u30d5\u30a9\u30f3\u30c8\u306e\u60c5\u5831\u304f\u3089\u3044\u3060\u3002\nhttp://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.documents.typography.eastasianwidth.aspx\n\nUnicode\u306b\u304a\u3051\u308bEastAsianWidth\u306e\u5024\u306f\u3001Unicode Character Database (UCD)\u306e\u4e2d\u306b\u3001\u3053\u308c\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30ea\u30b9\u30c8\u3068\u3057\u3066\u683c\u7d0d\u3059\u308c\u3070\u3044\u3044\u3060\u3051\u3060\u3002UCD\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u306f\u5358\u7d14\u306a\u3082\u306e\u3060\u3002\nhttp://www.unicode.org/Public/UCD/latest/ucd/EastAsianWidth.txt\n\n\u3068\u308a\u3042\u3048\u305a\u3001EastAsianWidth\u3092\u5224\u5225\u3059\u308b\u30af\u30e9\u30b9\u3001\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5185\u5bb9\u3092\u3044\u3061\u3044\u3061\u89e3\u6790\u3057\u305f\u304f\u306f\u306a\u3044\u306e\u3067\u3001\u3044\u3063\u305f\u3093EmbeddedResource\u306e\u304b\u305f\u3061\u306b\u3057\u3066\u3001EastAsianWidth\u3092\u5224\u5225\u3055\u305b\u3066\u304f\u308c\u308b`EastAsianWidth`\u30af\u30e9\u30b9\u3068\u4e00\u7dd2\u306edll\u306b\u683c\u7d0d\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3088\u3046\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u3044\u3063\u305f\u3093\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u3001\u751f\u30c7\u30fc\u30bf\u3068\u3057\u3066\u66f8\u304d\u51fa\u3059\u3053\u3068\u306b\u3059\u308b\u3002\n\nEastAsianWidth.txt\u306e\u8a18\u6cd5\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3060\u3002\n\n    000D;N # <control>\n    F0000..FFFFD;A # <Plane 15 Private Use, First>..<Plane 15 Private Use, Last>\n\n\u5185\u5bb9\u306f\u5168\u3066\u300c\u6587\u5b57\u307e\u305f\u306f\u6587\u5b57\u7bc4\u56f2`;`EastAsianWidth\u7a2e\u5225 `#`\u30b3\u30e1\u30f3\u30c8\u300d\u306e\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u7bc4\u56f2\u6307\u5b9a\u304c\u3042\u308b\u90e8\u5206\u306f\u3001\u5225\u9014\u7bc4\u56f2\u6307\u5b9a\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u4ee5\u5916\u306e1\u6587\u5b57\u6307\u5b9a\u306e\u90e8\u5206\u306f\u5358\u7d14\u306b\u914d\u5217\u306b\u683c\u7d0d\u3057\u3088\u3046\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30d1\u30fc\u30b5\u304a\u3088\u3073\u30c7\u30fc\u30bf\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u30b3\u30fc\u30c9\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3060:\n\n    using System;\n    using System.Collections.Generic;\n    using System.Globalization;\n    using System.IO;\n    using System.Linq;\n    using System.Net;\n\n    public class Driver\n    {\n\tpublic static void Main (string [] args)\n\t{\n\t\tnew Driver ().Run (args);\n\t}\n\n\tstruct RangeMap<T>\n\t{\n\t\tpublic int Start;\n\t\tpublic int End;\n\t\tpublic T Value;\n\t}\n\n\tList<RangeMap<char>> ranges = new List<RangeMap<char>> ();\n\tchar [] eaw = new char [0x10FFFF];\n\n\t// list of optimizible mappings.\n\tRangeMap<char> [] optmap = {\n\t\tnew RangeMap<char> () {Start = 0x2F800, End = 0x2FA1D, Value = 'W'},\n\t\tnew RangeMap<char> () {Start = 0x4DC0, End = 0x4DFF, Value = 'N'},\n\t\tnew RangeMap<char> () {Start = 0xD7B0, End = 0xD7C6, Value = 'N'},\n\t\tnew RangeMap<char> () {Start = 0xD7CB, End = 0xD7FB, Value = 'N'},\n\t\tnew RangeMap<char> () {Start = 0xE0001, End = 0xE0001, Value = 'N'},\n\t\tnew RangeMap<char> () {Start = 0xE0020, End = 0xE007F, Value = 'N'},\n\t\tnew RangeMap<char> () {Start = 0xE0100, End = 0xE01EF, Value = 'A'},\n\t\t};\n\n\tpublic void Run (string [] args)\n\t{\n\t\tstring text = null;\n\t\tstring output = \"EastAsianWidth.dat\";\n\t\tstring mapoutput = \"EastAsianWidth.opt\";\n\t\tstring source = args.Length == 0 && File.Exists (\"EastAsianWidth.txt\") ? \"EastAsianWidth.txt\" : args.FirstOrDefault ();\n\t\tif (source != null)\n\t\t\ttext = File.ReadAllText (source);\n\t\telse {\n\t\t\tstring univer = args.Length > 0 ? args [0] : \"UCD/latest\";\n\n\t\t\tstring url = string.Format (\"http://www.unicode.org/Public/{0}/ucd/EastAsianWidth.txt\", univer);\n\n\t\t\ttext = new WebClient ().DownloadString (url);\n\t\t}\n\n\t\tvar lines = text.Split ('\\n');\n\t\tFunc<string,string> first = s => s.Substring (0, s.IndexOf ('.'));\n\t\tFunc<string,string> last = s => s.Substring (s.LastIndexOf ('.') + 1);\n\t\tFunc<string,int> parse = s => int.Parse (s, NumberStyles.HexNumber);\n\t\tforeach (var p in lines\n\t\t\t\t.Select (x => x.Split ('#'))\n\t\t\t\t.Select (arr => arr [0].Trim ())\n\t\t\t\t.Where (x => x.Contains (';'))\n\t\t\t\t.Select (x => x.Split (';'))) {\n\t\t\tif (p [0].Contains ('.'))\n\t\t\t\tranges.Add (new RangeMap<char> () {Start = parse (first (p [0])), End = parse (last (p [0])), Value = p [1].Last ()});\n\t\t\telse\n\t\t\t\teaw [parse (p [0])] = p [1].Last ();\n\t\t}\n\t\t// Apply mapping optimizer - for predefined optimizible list, fill '\\0' (only if the mapping was correct)\n\t\tforeach (var m in optmap) {\n\t\t\tbool invalid = false;\n\t\t\tfor (int i = m.Start; i <= m.End; i++)\n\t\t\t\tif (eaw [i] != m.Value) {\n\t\t\t\t\tConsole.Error.WriteLine (\"Invalid optimization, at {0:X06}\", i);\n\t\t\t\t\tinvalid = true;\n\t\t\t\t}\n\t\t\tif (!invalid)\n\t\t\t\tfor (int i = m.Start; i <= m.End; i++)\n\t\t\t\t\teaw [i] = '\\0';\n\t\t}\n\t\t// calculate max index. After this, mapping is not generated.\n\t\tint maxIndex = 0;\n\t\tfor (int i = eaw.Length - 1;;i--) {\n\t\t\tif (eaw [i] != '\\0') {\n\t\t\t\tConsole.Error.WriteLine (\"max EAW index: {0:X06}\", i);\n\t\t\t\tmaxIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tusing (var fs = File.CreateText (output)) {\n\t\t\tfor (int i = 0; i <= maxIndex; i++)\n\t\t\t\tfs.Write (eaw [i]);\n\t\t}\n\t\tusing (var fs = File.CreateText (mapoutput)) {\n\t\t\tstring allRanges = string.Join (\";\", ranges.Concat (optmap)\n\t\t\t\t.OrderBy (m => m.Start)\n\t\t\t\t.Select (m => string.Format (\"{0:X06}-{1:X06}={2}\", m.Start, m.End, m.Value))\n\t\t\t\t);\n\t\t\tfs.WriteLine (allRanges);\n\t\t}\n\t}\n    }\n\n\u5b9f\u306e\u3068\u3053\u308d\u3001\u3082\u3046\u3072\u3068\u3064\u6700\u9069\u5316\u3092\u65bd\u3057\u3066\u3042\u3063\u3066\u3001\u4e00\u90e8\u306e\u6587\u5b57\u7bc4\u56f2\uff08`optmap`\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u7bc4\u56f2\uff09\u306b\u3064\u3044\u3066\u306f\u3001\u624b\u52d5\u3067\u7bc4\u56f2\u6307\u5b9a\u3092\u8ffd\u52a0\u3057\u3066\u3042\u308b\u3002\u3053\u308c\u306f\u73fe\u72b6\u3067\u306f\u307b\u307c\u610f\u5473\u304c\u306a\u3044\u3051\u3069\u3001\u5f8c\u3067\u914d\u5217\u306e\u683c\u7d0d\u65b9\u6cd5\u3092\u6700\u9069\u5316\u3057\u305f\u6642\u306b\u6709\u52b9\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u308c\u3067\u30c7\u30fc\u30bf\u306f\u751f\u6210\u3067\u304d\u305f\u3002\u5f8c\u306f\u3001EastAsianWidth\u3092\u6271\u3046\u30af\u30e9\u30b9\u306e\u4e2d\u3067\u3001\u3053\u308c\u3092EmbeddedResource\u304b\u3089\u53d6\u308a\u51fa\u3057\u3066\u3001\u4f7f\u3048\u308b\u30c7\u30fc\u30bf\u306b\u623b\u3059\u3060\u3051\u3060\u3002\n\n\t\tclass Map\n\t\t{\n\t\t\tpublic int Start;\n\t\t\tpublic int End;\n\t\t\tpublic byte Value;\n\t\t}\n\n\t\tstatic readonly byte [] eaw;\n\t\tstatic readonly Map [] map;\n\n\t\tstatic EastAsianWidth ()\n\t\t{\n\t\t\tvar stream = typeof (EastAsianWidth).Assembly.GetManifestResourceStream (\"EastAsianWidth.dat\");\n\t\t\teaw = new byte [stream.Length];\n\t\t\tstream.Read (eaw, 0, eaw.Length);\n\t\t\tstream = typeof (EastAsianWidth).Assembly.GetManifestResourceStream (\"EastAsianWidth.opt\");\n\t\t\tFunc<string,int> parse = s => int.Parse (s, NumberStyles.HexNumber);\n\t\t\tstring line = new StreamReader (stream).ReadToEnd ().Trim ();\n\t\t\tmap = line\n\t\t\t\t.Split (';')\n\t\t\t\t.Select (l => l.Split ('='))\n\t\t\t\t.Select (arr => new {Range = arr [0].Split ('-'), Value = arr [1]})\n\t\t\t\t.Select (m => new Map () {Start = parse (m.Range [0]), End = parse (m.Range [1]), Value = (byte) m.Value [0]})\n\t\t\t\t.ToArray ();\n\t\t}\n\n\u3044\u3063\u305f\u3093\u30c7\u30fc\u30bf\u3092\u5fa9\u5143\u3057\u305f\u3089\u3001EastAsianWidth\u7a2e\u5225\u3092\u53d6\u5f97\u3059\u308b\u306e\u306f\u3068\u3066\u3082\u7c21\u5358\u3060\u3002\u7bc4\u56f2\u6307\u5b9a\u306e\u30ea\u30b9\u30c8\u306f\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\t\tstatic byte GetValue (int c)\n\t\t{\n\t\t\tforeach (var m in map)\n\t\t\t\tif (m.Start <= c && c <= m.End)\n\t\t\t\t\treturn m.Value;\n\t\t\treturn eaw [c];\n\t\t}\n\n\t\tpublic static EastAsianWidthKind GetKind (char c)\n\t\t{\n\t\t\treturn GetKind ((int) c);\n\t\t}\n\n\t\tpublic static EastAsianWidthKind GetKind (int c)\n\t\t{\n\t\t\tvar ret = GetValue (c);\n\t\t\tswitch (ret) {\n\t\t\tcase (byte) 'F':\n\t\t\t\treturn EastAsianWidthKind.Full;\n\t\t\tcase (byte) 'H':\n\t\t\t\treturn EastAsianWidthKind.Half;\n\t\t\tcase (byte) 'W':\n\t\t\t\treturn EastAsianWidthKind.Wide;\n\t\t\tcase (byte) 'a':\n\t\t\t\treturn EastAsianWidthKind.Narrow;\n\t\t\tcase (byte) 'A':\n\t\t\t\treturn EastAsianWidthKind.Ambiguous;\n\t\t\tcase (byte) 'N':\n\t\t\t\treturn EastAsianWidthKind.Neutral;\n\t\t\t}\n\t\t\tthrow new InvalidOperationException ();\n\t\t}\n\n<del>\u3053\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u307e\u3068\u3081\u3066\u304a\u3044\u305f\u3002\nhttps://dl.dropboxusercontent.com/u/493047/tmp/nunicode.tar.gz</del>\n\n2016.03.23\u8ffd\u8a18: \u30d5\u30a1\u30a4\u30eb\u304c\u6d88\u3048\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u306e\u3067\u3001github\u306brepo\u3092\u4f5c\u3063\u305f: https://github.com/atsushieno/nunicode\n\n\u305d\u3093\u306a\u306b\u771f\u5263\u306b\u6700\u9069\u5316\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30e1\u30e2\u30ea\u4e0a\u306b\u5c55\u958b\u3055\u308c\u308b\u914d\u5217\u306f\u305d\u308c\u306a\u308a\u306e\u5927\u304d\u3055\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u771f\u9762\u76ee\u306b\u6700\u9069\u5316\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u3001mono\u3067Unicode\u30b5\u30dd\u30fc\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u4f5c\u6210\u3057\u305f\u3001\u7a7a\u767d\u90e8\u5206\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u30a4\u30f3\u30c7\u30af\u30b5\u306e\u30af\u30e9\u30b9\u3092\u6d3b\u7528\u3067\u304d\u308b\u3060\u308d\u3046\u3002\nhttps://github.com/mono/mono/blob/master/mcs/class/corlib/Mono.Globalization.Unicode/CodePointIndexer.cs\n\n\u3061\u306a\u307f\u306b\u3001mono\u3067mscorlib\u306e\u5b9f\u88c5\u3092\u3057\u3066\u3044\u305f\u6642\u306f\u3001`GetManifestResourceStreamInternal()`\u3068\u3044\u3046\u88cf\u6280\u3092\u4f7f\u3063\u3066\u3001\u30e1\u30e2\u30ea\u30a2\u30c9\u30ec\u30b9\u306b\u30c0\u30a4\u30ec\u30af\u30c8\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u7121\u99c4\u306amanifest resource stream\u306e\u751f\u6210\u3092\u7701\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u3051\u3069\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u305d\u3046\u306f\u3044\u304b\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u306f\u6700\u9069\u5316\u51fa\u6765\u306a\u3044\u3068\u601d\u3063\u3066\u8ae6\u3081\u305f\u3002\n\n\u3068\u3082\u3042\u308c\u3001Unicode Character Database\u306e\u5024\u3092\u7d20\u76f4\u306b\u8fd4\u3059\u3088\u3046\u306aAPI\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306f\u3001\u3061\u3063\u3068\u3082\u96e3\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u307f\u3093\u306a\u7a4d\u6975\u7684\u306b\u30c8\u30e9\u30a4\u3057\u3066\u307f\u3066\u3082\u826f\u3044\u3068\u601d\u3046\u3002\n\n\u3061\u306a\u307f\u306bpost\u3057\u3066\u304b\u3089\u66f8\u304d\u5fd8\u308c\u3066\u3044\u305f\u3053\u3068\u306b\u6c17\u4ed8\u3044\u305f\u3051\u3069\u3001\u30bf\u30a4\u30c8\u30eb\u306b\u3042\u308b\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u306f\u4f5c\u3063\u3066\u3044\u306a\u3044\u3002\u3067\u3082System.Char\u306bextension method\u3092\u751f\u3084\u3059\u3060\u3051\u3060\u3002\u3053\u308c\u3060\u3051\u306a\u3089\u30b5\u30eb\u3067\u3082\u51fa\u6765\u308b\u3088\u306d?\n", "tags": ["C#", "unicode"]}