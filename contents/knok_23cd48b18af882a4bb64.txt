{"context": "\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\u3000\nChainer\u3067Trainer\u3092\u4f7f\u304a\u3046\u3068\u601d\u3044\u3001lIterator\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3042\u308bDatasetMixin\u3092\u7d99\u627f\u3057\u3066\u81ea\u524d\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u3063\u305f\u6642\u306b\u3001\u5358\u7d14\u306a\u52d8\u9055\u3044\u3067\u3042\u308a\u306a\u304c\u3089\u82e5\u5e72\u82e6\u52b4\u3092\u3057\u305f\u306e\u3067\u8a18\u9332\u3068\u3057\u3066\u6b8b\u3057\u307e\u3059\u3002\n(\u8ffd\u8a18) \u3053\u306e\u8a18\u4e8b\u5185\u3067\u60f3\u5b9a\u3057\u3066\u3044\u308bChainer\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.20\u3067\u3059\u3002\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u72b6\u6cc1\u304c\u5909\u5316\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u906d\u9047\u3057\u305f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\n\u51fa\u529b\u3055\u308c\u308b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u539f\u56e0\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308a\u3065\u3089\u3044(\u308f\u304b\u308a\u3065\u3089\u3044)\u3082\u306e\u3067\u3057\u305f\u3002\n  File \"cupy/cuda/device.pyx\", line 66, in cupy.cuda.device.Device.__enter__ (cupy/cuda/device.cpp:1621)\n  File \"cupy/cuda/device.pyx\", line 81, in cupy.cuda.device.Device.use (cupy/cuda/device.cpp:1862)\n  File \"cupy/cuda/runtime.pyx\", line 178, in cupy.cuda.runtime.setDevice (cupy/cuda/runtime.cpp:2702)\n  File \"cupy/cuda/runtime.pyx\", line 130, in cupy.cuda.runtime.check_status (cupy/cuda/runtime.cpp:2028)\ncupy.cuda.runtime.CUDARuntimeError: cudaErrorInvalidDevice: invalid device ordinal\n\n\u3053\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u898b\u305f\u6642\u306b\u81ea\u5206\u306f\u300c\u30e2\u30c7\u30eb\u304b\u30c7\u30fc\u30bf\u306eGPU\u51e6\u7406\u3092\u66f8\u304d\u9593\u9055\u3048\u305f\u304b\u306a?\u300d\u3068\u8003\u3048\u307e\u3057\u305f\u3002\u306a\u306e\u3067cuda.cupy\u5468\u308a\u3092\u5fc5\u6b7b\u306b\u3044\u3058\u3063\u3066\u307f\u305f\u308a\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u89e3\u6c7a\u306b\u81f3\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6ce8\u610f\u6df1\u304f\u8aad\u3081\u3070\u6c17\u304c\u3064\u3044\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u6700\u7d42\u7684\u306b\u81ea\u5206\u306fchainer\u306e\u30bd\u30fc\u30b9\u3092\u307f\u3066\u539f\u56e0\u3092\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\n\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\nclass MyDataset(chainer.dataset.DatasetMixin):\n    def __init__(self, path):\n        label_list = {}\n        def get_label(l):\n            num = label_list.get(l, -1)\n            if num < 0:\n                label_list[l] = len(label_list)\n                return label_list[l]\n            return num\n        flist = []\n        llist = []\n        for root, dirs, files in os.walk(path):\n            label = os.path.basename(root) # \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3092\u30e9\u30d9\u30eb\u3068\u3059\u308b\n            label_num = get_label(label)\n            for file in files:\n                flist.append(os.path.join(root, file))\n                llist.append(label_num)\n        self.flist = flist\n        self.llist = llist\n\n    def __len__(self):\n        return len(self.flist)\n\n    def get_example(self, i):\n        fname = self.flist[i]\n        label = self.llist[i]\n        img = Image.open(fname)\n        img = np.asarray(img, dtype=np.float32).transpose(2, 0, 1)\n        return img, label\n\nGPU\u3092\u6709\u52b9\u5316\u3057\u305fchainer\u3067\u3001\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066Iterator, Trainer\u3092\u4f7f\u3063\u305f\u5b66\u7fd2\u3092\u3055\u305b\u308b\u3068\u3001GPU\u306e\u5229\u7528\u306e\u6709\u7121\u306b\u304b\u304b\u308f\u3089\u305a\u5148\u307b\u3069\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nCPU\u7248chainer\u3067\u306f\u6b21\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n    check_cuda_available()\n  File \"/path/to/lib/python3.4/site-packages/chainer/cuda.py\", line 83, in check_cuda_available\n    raise RuntimeError(msg)\nRuntimeError: CUDA environment is not correctly set up\n(see https://github.com/pfnet/chainer#installation).CuPy is not correctly installed. Please check your environment, uninstall Chainer and reinstall it with `pip install chainer --no-cache-dir -vvvv`.\n\n\n\u539f\u56e0\n\u30b7\u30f3\u30d7\u30eb\u306a\u8a71\u3067\u3001get_example\u304c\u8fd4\u3059\u30e9\u30d9\u30eb\u306e\u5024\u304cnumpy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u306a\u3044\u3053\u3068\u304c\u539f\u56e0\u3067\u3059\u3002\nTrainer\u3092\u4f7f\u308f\u305a\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306f\u3001\u5024\u3092Variable\u306bwrap\u3059\u308b\u6642\u70b9\u3067numpy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068TypeError(\"numpy.ndarray or cuda.ndarray are expected.\")\u304c\u51fa\u308b\u306e\u3067\u6c17\u304c\u4ed8\u304d\u3084\u3044\u306e\u3067\u3059\u304c\u3001Iterator/Trainer\u306b\u4efb\u305b\u308b\u3068\u7570\u306a\u308b\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u79c1\u306f\u306a\u304b\u306a\u304b\u539f\u56e0\u306b\u8fbf\u308a\u3064\u3051\u307e\u305b\u3093\u3067\u3057\u305f(\u578b\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u3088\u3046\u306a\u8981\u671b\u3092\u3059\u3079\u304d?)\u3002\n\n\u5bfe\u7b56\n\u3053\u306e\u5834\u5408\u30e9\u30d9\u30eb\u5024\u306e\u5165\u3063\u3066\u3044\u308b\u914d\u5217llist\u3092numpy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3059\u308c\u3070\u89e3\u6c7a\u3067\u3059\u3002\n@@ -16,7 +16,7 @@\n                 flist.append(os.path.join(root, file))\n                 llist.append(label_num)\n         self.flist = flist\n-        self.llist = llist\n+        self.llist = np.asarray(llist, dtype=np.int32)\n\n     def __len__(self):\n         return len(self.flist)\n\n\n\u6700\u5f8c\u306b\nTrainer\u3092\u4f7f\u3046\u3068\u30d5\u30a1\u30f3\u30b7\u30fc\u306a\u9032\u6357\u51fa\u529b(ProgressBar())\u304c\u51fa\u305b\u3066\u304b\u3063\u3053\u3044\u3044\u306e\u3067\u305c\u3072Trainer\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n# \u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\u3000\n\nChainer\u3067Trainer\u3092\u4f7f\u304a\u3046\u3068\u601d\u3044\u3001lIterator\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3042\u308bDatasetMixin\u3092\u7d99\u627f\u3057\u3066\u81ea\u524d\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u3063\u305f\u6642\u306b\u3001\u5358\u7d14\u306a\u52d8\u9055\u3044\u3067\u3042\u308a\u306a\u304c\u3089\u82e5\u5e72\u82e6\u52b4\u3092\u3057\u305f\u306e\u3067\u8a18\u9332\u3068\u3057\u3066\u6b8b\u3057\u307e\u3059\u3002\n\n(\u8ffd\u8a18) \u3053\u306e\u8a18\u4e8b\u5185\u3067\u60f3\u5b9a\u3057\u3066\u3044\u308bChainer\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.20\u3067\u3059\u3002\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u72b6\u6cc1\u304c\u5909\u5316\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n## \u906d\u9047\u3057\u305f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\n\n\u51fa\u529b\u3055\u308c\u308b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u539f\u56e0\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308a\u3065\u3089\u3044(\u308f\u304b\u308a\u3065\u3089\u3044)\u3082\u306e\u3067\u3057\u305f\u3002\n\n```py3\n  File \"cupy/cuda/device.pyx\", line 66, in cupy.cuda.device.Device.__enter__ (cupy/cuda/device.cpp:1621)\n  File \"cupy/cuda/device.pyx\", line 81, in cupy.cuda.device.Device.use (cupy/cuda/device.cpp:1862)\n  File \"cupy/cuda/runtime.pyx\", line 178, in cupy.cuda.runtime.setDevice (cupy/cuda/runtime.cpp:2702)\n  File \"cupy/cuda/runtime.pyx\", line 130, in cupy.cuda.runtime.check_status (cupy/cuda/runtime.cpp:2028)\ncupy.cuda.runtime.CUDARuntimeError: cudaErrorInvalidDevice: invalid device ordinal\n```\n\n\u3053\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u898b\u305f\u6642\u306b\u81ea\u5206\u306f\u300c\u30e2\u30c7\u30eb\u304b\u30c7\u30fc\u30bf\u306eGPU\u51e6\u7406\u3092\u66f8\u304d\u9593\u9055\u3048\u305f\u304b\u306a?\u300d\u3068\u8003\u3048\u307e\u3057\u305f\u3002\u306a\u306e\u3067cuda.cupy\u5468\u308a\u3092\u5fc5\u6b7b\u306b\u3044\u3058\u3063\u3066\u307f\u305f\u308a\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u89e3\u6c7a\u306b\u81f3\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6ce8\u610f\u6df1\u304f\u8aad\u3081\u3070\u6c17\u304c\u3064\u3044\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u6700\u7d42\u7684\u306b\u81ea\u5206\u306fchainer\u306e\u30bd\u30fc\u30b9\u3092\u307f\u3066\u539f\u56e0\u3092\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\n## \u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\n\n```py3\nclass MyDataset(chainer.dataset.DatasetMixin):\n    def __init__(self, path):\n        label_list = {}\n        def get_label(l):\n            num = label_list.get(l, -1)\n            if num < 0:\n                label_list[l] = len(label_list)\n                return label_list[l]\n            return num\n        flist = []\n        llist = []\n        for root, dirs, files in os.walk(path):\n            label = os.path.basename(root) # \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3092\u30e9\u30d9\u30eb\u3068\u3059\u308b\n            label_num = get_label(label)\n            for file in files:\n                flist.append(os.path.join(root, file))\n                llist.append(label_num)\n        self.flist = flist\n        self.llist = llist\n\n    def __len__(self):\n        return len(self.flist)\n\n    def get_example(self, i):\n        fname = self.flist[i]\n        label = self.llist[i]\n        img = Image.open(fname)\n        img = np.asarray(img, dtype=np.float32).transpose(2, 0, 1)\n        return img, label\n```\n\nGPU\u3092\u6709\u52b9\u5316\u3057\u305fchainer\u3067\u3001\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066Iterator, Trainer\u3092\u4f7f\u3063\u305f\u5b66\u7fd2\u3092\u3055\u305b\u308b\u3068\u3001GPU\u306e\u5229\u7528\u306e\u6709\u7121\u306b\u304b\u304b\u308f\u3089\u305a\u5148\u307b\u3069\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\nCPU\u7248chainer\u3067\u306f\u6b21\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```py3\n    check_cuda_available()\n  File \"/path/to/lib/python3.4/site-packages/chainer/cuda.py\", line 83, in check_cuda_available\n    raise RuntimeError(msg)\nRuntimeError: CUDA environment is not correctly set up\n(see https://github.com/pfnet/chainer#installation).CuPy is not correctly installed. Please check your environment, uninstall Chainer and reinstall it with `pip install chainer --no-cache-dir -vvvv`.\n```\n\n## \u539f\u56e0\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u8a71\u3067\u3001get_example\u304c\u8fd4\u3059\u30e9\u30d9\u30eb\u306e\u5024\u304cnumpy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u306a\u3044\u3053\u3068\u304c\u539f\u56e0\u3067\u3059\u3002\nTrainer\u3092\u4f7f\u308f\u305a\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306f\u3001\u5024\u3092Variable\u306bwrap\u3059\u308b\u6642\u70b9\u3067numpy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068TypeError(\"numpy.ndarray or cuda.ndarray are expected.\")\u304c\u51fa\u308b\u306e\u3067\u6c17\u304c\u4ed8\u304d\u3084\u3044\u306e\u3067\u3059\u304c\u3001Iterator/Trainer\u306b\u4efb\u305b\u308b\u3068\u7570\u306a\u308b\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u79c1\u306f\u306a\u304b\u306a\u304b\u539f\u56e0\u306b\u8fbf\u308a\u3064\u3051\u307e\u305b\u3093\u3067\u3057\u305f(\u578b\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u3088\u3046\u306a\u8981\u671b\u3092\u3059\u3079\u304d?)\u3002\n\n## \u5bfe\u7b56\n\n\u3053\u306e\u5834\u5408\u30e9\u30d9\u30eb\u5024\u306e\u5165\u3063\u3066\u3044\u308b\u914d\u5217llist\u3092numpy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3059\u308c\u3070\u89e3\u6c7a\u3067\u3059\u3002\n\n```diff\n@@ -16,7 +16,7 @@\n                 flist.append(os.path.join(root, file))\n                 llist.append(label_num)\n         self.flist = flist\n-        self.llist = llist\n+        self.llist = np.asarray(llist, dtype=np.int32)\n \n     def __len__(self):\n         return len(self.flist)\n```\n\n## \u6700\u5f8c\u306b\n\nTrainer\u3092\u4f7f\u3046\u3068\u30d5\u30a1\u30f3\u30b7\u30fc\u306a\u9032\u6357\u51fa\u529b(ProgressBar())\u304c\u51fa\u305b\u3066\u304b\u3063\u3053\u3044\u3044\u306e\u3067\u305c\u3072Trainer\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n", "tags": ["Chainer", "Python", "numpy"]}