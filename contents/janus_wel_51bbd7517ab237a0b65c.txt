{"context": " More than 1 year has passed since last update.\u30d5\u30a1\u30a4\u30eb\u3084\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306a\u3069\u30ea\u30bd\u30fc\u30b9\u306e\u5909\u5316\u306a\u3069 POSIX \u306e IO \u3084\u7279\u5b9a\u6642\u9593\u306e\u7d4c\u904e\u306a\u3069\u3092\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u3042\u3064\u304b\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3002\nepoll \u3084\u306a\u3093\u304b\u304c\u3084\u308b\u3053\u3068\u3092\u96a0\u853d\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u4f4e\u30ec\u30d9\u30eb\u306a\u51e6\u7406\u3092\u66f8\u304d\u305f\u304f\u306a\u3044\u3072\u3068\u306b\u30aa\u30b9\u30b9\u30e1\u3002\n\nhttp://software.schmorp.de/pkg/libev.html\nhttp://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3068\u306b\u304b\u304f\u9577\u3044\u3051\u3069\u3001\u6b21\u3060\u3051\u8aad\u3081\u3070\u554f\u984c\u306a\u3044\u3002\u305d\u306e\u4ed6\u306f\u5fc5\u8981\u306a\u3068\u304d\u306b\u5fc5\u8981\u306a\u3068\u3053\u308d\u3092\u3064\u307e\u307f\u8aad\u3080\u611f\u3058\u3067\u3002\u3063\u3066 WHAT TO READ WHEN IN A HURRY \u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n\nANATOMY OF A WATCHER\nEXAMPLE PROGRAM\nGLOBAL FUNCTIONS\nWATCHER TYPES \u306e ev_io \u3068 ev_timer \u306e\u9805\n\nlibev \u306f libevent \u3092\u53c2\u8003\u306b\u4f5c\u3089\u308c\u3066\u3044\u3066\u3001\u30b9\u30d4\u30fc\u30c9\u304c\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002\nhttp://libev.schmorp.de/bench.html\n\u305d\u308c\u4ee5\u5916\u306b\u3082 C++ \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u6574\u5099\u3055\u308c\u3066\u3044\u3066\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u4f7f\u308f\u305a\u306b\u66f8\u3051\u305f\u308a\u3059\u308b\u306e\u3067\u7279\u306b\u7406\u7531\u304c\u306a\u3044\u304b\u304e\u308a libev \u3067\u3044\u3044\u3068\u601d\u3046\u3002\n\u6b74\u53f2\u7684\u306a\u7d4c\u7def\u306f libevent \u306e\u6b21\u306e\u30da\u30fc\u30b8\u306b\u66f8\u3044\u3066\u3042\u308b\u304b\u3089\u8208\u5473\u3042\u308c\u3070\u307f\u3066\u307f\u308b\u3068\u3088\u3044\u304b\u3082\u3002\nhttp://www.wangafu.net/~nickm/libevent-book/01_intro.html\n\u3056\u3063\u304f\u308a\u6b21\u306e\u554f\u984c\u70b9\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b libevent \u304c\u4f5c\u3089\u308c\u3066\u3001\u305d\u306e\u9ad8\u901f\u5316\u3067 libev \u3068\u3044\u3046\u6d41\u308c\u3089\u3057\u3044\u3002\n\nselect, poll, epoll, kqueue, evports, /dev/poll \u306a\u3069\u4f3c\u305f\u3088\u3046\u306a\u306e\u304c\u3044\u3063\u3071\u3044\u3042\u3063\u3066\u3069\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u308f\u304b\u308a\u3065\u3089\u3044\n\u74b0\u5883\u3054\u3068\u306b\u4f7f\u3048\u308b\u3082\u306e\u306b\u5dee\u304c\u3042\u308b\n\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\u306a\u3069\u306e\u4f4e\u7d1a\u306a\u6982\u5ff5\u3092\u305d\u306e\u307e\u307e\u6271\u3044\u305f\u304f\u306a\u3044\n\n\u4ee5\u964d\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3056\u3056\u3063\u3068\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\nevent loop\nlibev \u306f\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306e\u4e00\u7a2e\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\u666e\u6bb5\u5f85\u6a5f\u3067\u30a4\u30d9\u30f3\u30c8\u304c\u8d77\u304d\u305f\u3089\u51e6\u7406\u3001\u3092\u3050\u308b\u3050\u308b\u7e70\u308a\u8fd4\u3059\u3002\nlibev \u306f\u540c\u6642\u306b\u3072\u3068\u3064\u4ee5\u4e0a\u306e\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3092\u7ba1\u7406\u3067\u304d\u308b\u3002\n\n\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u4f5c\u6210\n\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306b\u30a4\u30d9\u30f3\u30c8\u7a2e\u985e\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5bfe\u306b\u3057\u305f\u3082\u306e\u3092\u8ffd\u52a0\n\n\u3068\u3044\u3046\u6d41\u308c\u3002\n\nwatcher\nlibev \u306b\u306f\u4f55\u3089\u304b\u306e\u30a4\u30d9\u30f3\u30c8\u306e\u767a\u706b\u3092\u76e3\u8996\u3059\u308b\u5358\u4f4d\u3068\u3057\u3066 watcher \u3068\u3044\u3046\u6982\u5ff5\u304c\u3042\u308b\u3002\u3051\u3069\u3001\u4e00\u822c\u7684\u306b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3068\u540c\u3058\u3002\u5fae\u5999\u306b\u9055\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u6c17\u306b\u3057\u306a\u3044\u3002\n\u6b21\u306e\u578b\u306e\u3069\u308c\u304b\u3092\u5b9f\u4f53\u5316\u3057\u305f\u3082\u306e\u3092 watcher \u3068\u3057\u3066\u6271\u3046\u3002\n\n\n\n\u578b\u540d\n\u8aac\u660e\n\n\n\n\nev_io\n\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\n\n\nev_stat\n\u30d5\u30a1\u30a4\u30eb\u306e\u72b6\u614b\u3001 Linux inotify \u3092\u4f7f\u3063\u3066\u3044\u308b\n\n\nev_async\n\u81ea\u524d\u30a4\u30d9\u30f3\u30c8\u3001 Linux eventfd \u3092\u4f7f\u3063\u3066\u3044\u308b\n\n\nev_signal\n\u540c\u671f\u30b7\u30b0\u30ca\u30eb\u3001 Linux signalfd \u3092\u4f7f\u3063\u3066\u3044\u308b\n\n\nev_timer\n3 \u79d2\u5f8c\u306a\u3069\u76f8\u5bfe\u7684\u306a\u6642\u9593\n\n\nev_periodic\n\u65e5\u66dc\u65e5\u306e 24:00 \u306a\u3069\u7d76\u5bfe\u7684\u306a\u6642\u9593\n\n\nev_child\n\u30d7\u30ed\u30bb\u30b9\u306e\u72b6\u614b\n\n\nev_idle\n\u4ed6\u306b\u52d5\u4f5c\u3059\u308bwatcher\u304c\u306a\u3044\u5834\u5408\u306b\u767a\u706b\n\n\nev_embed\nepoll, kqueue \u306a\u3069\u4f7f\u7528\u3059\u308b\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u6307\u5b9a\n\n\nev_prepare\nwatcher\u52d5\u4f5c\u306e\u76f4\u524d\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u306e\u6307\u5b9a\n\n\nev_check\nwatcher\u52d5\u4f5c\u306e\u76f4\u5f8c\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u306e\u6307\u5b9a\n\n\nev_fork\nfork \u306e\u9650\u5b9a\u30b5\u30dd\u30fc\u30c8\n\n\n\nwatcher \u304c\u5b9f\u4f53\u5316\u3057\u305f\u969b\u306b\u4f7f\u7528\u3059\u308b\u30e1\u30e2\u30ea\u30fc\u306f\u81ea\u5206\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3042\u308b watcher \u306b\u5bfe\u5fdc\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u751f\u3055\u305b\u306a\u304f\u3066\u3082\u3001\u5f37\u5236\u7684\u306b\u52d5\u4f5c\u3055\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\u72b6\u614b\u9077\u79fb\nwatcher \u306f\u6b21\u306e\u3046\u3061\u3001\u3069\u308c\u304b\u306e\u72b6\u614b\u306b\u306a\u308b\u3002\n\ninitialized\n\n\n\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306b\u767b\u9332\u3055\u308c\u308b\u524d\u306e\u72b6\u614b\ninitialized \u306b\u306a\u308b\u306b\u306f\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u305f\u969b\u306b\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306e\u8a2d\u5b9a\u304c\u5fc5\u9808\n\n\nactive / running / active\n\n\n\u30a4\u30d9\u30f3\u30c8\u767a\u706b\u3092\u5f85\u3063\u3066\u3044\u308b\u6700\u4e2d\u306e\u72b6\u614b\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u65b9\u6cd5\u3092\u9664\u3044\u3066\u3001\u8aad\u307f\u66f8\u304d\u30fb\u79fb\u52d5\u30fb\u89e3\u653e\u3067\u304d\u306a\u3044\n\n\npending\n\n\nactive \u3067\u76e3\u8996\u5bfe\u8c61\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3055\u308c\u305f\u5f8c\u306e\u72b6\u614b\nstopped \u306b\u306a\u308b\u304b\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\u76f4\u524d\u307e\u3067\u306f pending\nev_io \u3068\u304b\u7e70\u308a\u8fd4\u3057\u4f7f\u7528\u3067\u304d\u308b watcher \u306f pending \u304b\u3089\u307e\u305f active \u306b\u79fb\u884c\u3067\u304d\u308b\n1 \u56de\u9650\u308a\u306e ev_timer \u306f\u52d5\u4f5c\u5f8c pending \u306b\u306a\u308b\u3051\u3069 active \u306b\u306f\u79fb\u884c\u3067\u304d\u306a\u3044\n\u8aad\u307f\u66f8\u304d\u306f\u3067\u304d\u308b\u3051\u3069\u3001\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306b\u7d10\u4ed8\u3044\u305f\u307e\u307e\u306a\u306e\u3067\u79fb\u52d5\u30fb\u89e3\u653e\u30fb\u518d\u4f7f\u7528\u306f\u3067\u304d\u306a\u3044\n\n\nstopped\n\n\nlibev \u304c\u81ea\u52d5\u7684\u306b stopped \u306b\u3059\u308b\n\n\n\u540c\u6642\u306b pending \u306b\u3082\u306a\u3063\u305f\u308a\u3059\u308b\n\n\n\u660e\u793a\u7684\u306b stopped \u306b\u3067\u304d\u308b\n\n\n\u660e\u793a\u7684\u306b stopped \u306b\u3059\u308b\u3068\u5f37\u5236\u7684\u306b pending \u3092\u89e3\u9664\u3059\u308b\n\u306a\u3093\u304b\u306e\u62cd\u5b50\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u306a\u304f\u306a\u308b\u304b\u3089 watcher \u89e3\u653e\u524d\u306b\u306f\u660e\u793a\u7684\u306b\u505c\u6b62\u3055\u305b\u305f\u307b\u3046\u304c\u3088\u3044\u3068\u306e\u3053\u3068\n\n\nstopped \u306f initialized \u3068\u540c\u3058\u306a\u306e\u3067\u518d\u4f7f\u7528\u30fb\u79fb\u52d5\u30fb\u5909\u66f4\u304c\u53ef\u80fd\n\n\n\n\n\u512a\u5148\u5ea6\nwatcher \u306b\u306f\u512a\u5148\u5ea6\u3092\u3064\u3051\u3089\u308c\u308b\u3002\u5177\u4f53\u7684\u306a\u512a\u5148\u5ea6\u306e\u7bc4\u56f2\u306f\u5b9a\u6570 EV_MINPRI \uff5e EV_MAXPRI \u307e\u3067\u3002\n\u57fa\u672c\u7684\u306b watcher \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u512a\u5148\u5ea6\u304c\u9ad8\u3044\u65b9\u304b\u3089\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u304f\u3002\n\u3067\u3001 libev \u306f\u512a\u5148\u5ea6\u3092\u53d6\u308a\u6271\u3046\u3068\u304d\u306e\u65b9\u6cd5\u3068\u3057\u3066\u6b21\u306e 2 \u3064\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\nlock-out model\n\u9ad8\u3044\u512a\u5148\u5ea6\u3092\u6301\u3064\u3082\u306e\u304c\u4f4e\u3044\u512a\u5148\u5ea6\u306e\u3082\u306e\u3092\u7de0\u3081\u51fa\u3059 = lock-out\n\n\u4e00\u756a\u9ad8\u3044\u512a\u5148\u5ea6\u306e watcher \u3060\u3051\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3067\u304d\u308b\n\u305d\u308c\u4ee5\u5916\u306e\u512a\u5148\u5ea6\u306e watcher \u306f\u4f55\u3082\u3067\u304d\u306a\u3044\n\n\u3053\u306e model \u306f kernel \u306e\u5b9f\u88c5\u304c\u30a2\u30ec\u3067\u975e\u52b9\u7387\u3068\u304b\u66f8\u304b\u308c\u3066\u308b\u3002\n\n\u30a4\u30d9\u30f3\u30c8 A, B \u304c\u767a\u751f\n\u30a4\u30d9\u30f3\u30c8 A \u3092\u76e3\u8996\u3057\u3066\u3044\u308b watcher \u306e\u3046\u3061\u512a\u5148\u5ea6\u304c\u6700\u9ad8\u306e\u3082\u306e\u3092\u99c6\u52d5\n\u30a4\u30d9\u30f3\u30c8 A \u3092\u76e3\u8996\u3057\u3066\u3044\u308b watcher \u306e\u3046\u3061\u6b21\u306e\u512a\u5148\u5ea6\u306e\u3082\u306e\u3092\u99c6\u52d5\n\u4ee5\u4e0b\u540c\u69d8\n\n\nonly-for-ordering\n\u512a\u5148\u5ea6\u304c\u9ad8\u3044 watcher \u304b\u3089\u9806\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3066\u3044\u304f\u3060\u3051 = only-for-ordering\n\n\u4e00\u756a\u9ad8\u3044\u512a\u5148\u5ea6\u306e watcer \u304c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\n\u305d\u306e\u6b21\u306b\u9ad8\u3044\u512a\u5148\u5ea6\u306e watcher \u304c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\n\u4ee5\u4e0b\u767a\u706b\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u306b\u5bfe\u5fdc\u3059\u308b watcher \u304c\u5b58\u5728\u3059\u308c\u3070\u512a\u5148\u5ea6\u9806\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u304f\n\n\u4f55\u304c\u3046\u308c\u3057\u3044\u304b\u3068\u3044\u3046\u3068\u3001\u305f\u3068\u3048\u3070 ev_io watcher \u3067\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3068\u3063\u3066 ev_timer watcher \u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u3066\u306a\u3044\u304b\u3069\u3046\u304b\u3092\u898b\u5f35\u308b\u3068\u304d\u306a\u3093\u304b\u306b\u6b21\u306e\u30a4\u30e4\u306a\u30d1\u30bf\u30fc\u30f3\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9ad8\u8ca0\u8377\u6642\u3067\u8aad\u307f\u306b\u3044\u3051\u306a\u3044\u3068\u304d\u306b\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3059\u308b\n\u8aad\u3081\u306a\u3044\u307e\u307e\u30bf\u30a4\u30de\u30fc\u304c\u52d5\u4f5c\u3059\u308b\n\u30c7\u30fc\u30bf\u304c\u5c4a\u3044\u3066\u3044\u308b\u306e\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u3063\u3066\u3057\u307e\u3046\n\n\u3053\u306e\u5834\u5408\u306f\u30bf\u30a4\u30de\u30fc\u306e\u512a\u5148\u5ea6\u3092\u4f4e\u304f\u3057\u3066\u304a\u3051\u3070\u5148\u306b\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u3067\u304d\u308b\u3002\n\nmodel \u306e\u4f7f\u3044\u5206\u3051\nlibev \u3067\u306f ev_idle \u3060\u3051\u304c lock-out model \u3067\u305d\u306e\u4ed6\u304c only-for-ordering model \u3092\u4f7f\u3046\u3089\u3057\u3044\u3002\nev_idle \u304c\u767a\u706b\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f ev_idle \u3088\u308a\u512a\u5148\u5ea6\u306e\u9ad8\u3044 watcher \u304c\u3044\u306a\u3044\u5834\u5408\u3002\n\u3067\u3001\u5168\u4f53\u3092 lock-out model \u3067\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u306f ev_idle watcher \u3067\u5168\u90e8\u53d7\u3051\u3068\u3063\u3066\u5185\u90e8\u3067\u5207\u308a\u5206\u3051\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u3059\u308c\u3070\u3044\u3044\u3089\u3057\u3044\u3002\u3051\u3069\u610f\u5473\u3042\u3093\u306e\u304b\u3053\u308c\u3002\n\nC++ bindings\nC \u8a00\u8a9e\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3060\u3051\u3069 C++ \u7528\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3082\u540c\u68b1\u3057\u3066\u3044\u308b\u3002\n\nev++.h \u3092 include \u3059\u308b\u3053\u3068\u3067\u4f7f\u7528\u53ef\u80fd\u3002\n\u4f8b\u5916\u306f watcher \u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304b\u3089\u306e\u307f throw \u53ef\u80fd\u3002\nev \u540d\u524d\u7a7a\u9593\u306e\u4e0b\u306b\u3044\u308d\u3044\u308d\u5b9a\u7fa9\u3055\u308c\u3066\u308b\n\n\n\u512a\u5148\u5ea6\u5909\u66f4\n\u512a\u5148\u5ea6\u3092\u3044\u3058\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u306a\u3044\u306e\u3067\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\ntemplate<typename T> constexpr inline T pointer_cast(void* const p) noexcept {\n    return static_cast<T>(p);\n}\ntemplate<typename T> constexpr inline T pointer_cast(const void* const p) noexcept {\n    return static_cast<T>(p);\n}\n\n/*\n * ev::TYPE priority accessors\n *  getter\n *      int priority(ev_TYPE* watcher);\n *  setter\n *      void priority(ev_TYPE* watcher, int priority);\n * */\ntemplate <typename T> inline constexpr int priority(const T& watcher) noexcept;\ntemplate <typename T> inline void priority(T& watcher, const int priority) noexcept;\n\n#define DEFINE_PRIORITY_GETTER(t)                                           \\\ntemplate <> inline constexpr int priority(const ev::t& watcher) noexcept {  \\\n    return ev_priority(pointer_cast<const ev_ ## t*>(&watcher));            \\\n}\n#define DEFINE_PRIORITY_SETTER(t)                                               \\\ntemplate <> inline void priority(ev::t& watcher, const int priority) noexcept { \\\n    ev_set_priority(pointer_cast<ev_ ## t*>(&watcher), priority);               \\\n}\n#define DEFINE_PRIORITY_ACCESSOR(t) \\\nDEFINE_PRIORITY_GETTER(t)           \\\nDEFINE_PRIORITY_SETTER(t)\n\nDEFINE_PRIORITY_ACCESSOR(io)\nDEFINE_PRIORITY_ACCESSOR(timer)\n\nio \u3068 timer \u4ee5\u5916\u306b\u6b32\u3057\u3051\u308c\u3070\u9069\u5f53\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3093\u306a\u3055\u3044\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\u5168\u90e8 C++ \u3067\u66f8\u3044\u3066\u307f\u305f\u3082\u306e\u3002\n\ntail -f \u3082\u3069\u304d\n\ntailike.cpp\n/*\n * tailike.cpp\n *  tail -f with libev\n *\n *      g++ -std=c++11 -Wall -Wextra -pedantic -lev tailike.cpp\n *\n *  written by janus_wel<janus.wel.3@gmail.com>\n *\n *  These codes are licensed under the MIT license\n *      http://opensource.org/licenses/MIT\n * */\n\n#include <fcntl.h>  // open\n#include <string.h> // strerror\n#include <unistd.h> // read\n\n#include <ev++.h>\n\n#include <array>\n#include <iostream>\n#include <stdexcept>\n#include <string>\n\nconstexpr std::size_t BUFFER_SIZE = 4096;\n\nclass file_descriptor_t {\n    private:\n        int file_descriptor_;\n\n    public:\n        explicit file_descriptor_t(const char* const file_name)\n            : file_descriptor_(open(file_name, O_RDONLY)) {\n            if (file_descriptor_ == -1) {\n                throw std::runtime_error(strerror(errno));\n            }\n        }\n        explicit file_descriptor_t(const std::string& file_name)\n            : file_descriptor_t(file_name.c_str()) { }\n\n        ~file_descriptor_t() noexcept {\n            close(file_descriptor_);\n        }\n\n        inline int raw() const noexcept {\n            return file_descriptor_;\n        }\n        inline operator int() const noexcept {\n            return this->raw();\n        }\n};\n\nclass callback_t {\n    public:\n        typedef std::array<char, BUFFER_SIZE> buffer_t;\n\n    private:\n        buffer_t buffer_;\n        file_descriptor_t file_descriptor_;\n\n    public:\n        callback_t(const char* file_path)\n            : file_descriptor_(file_path) { }\n\n        void read(ev::stat& w, int) {\n            if (!w.attr.st_nlink) {\n                return;\n            }\n\n            const auto read_bytes = ::read(file_descriptor_, buffer_.data(), buffer_.size() - 1);\n            if (read_bytes == -1) {\n                // error occured when read\n                return;\n            }\n            if (read_bytes == 0) {\n                // fd is closed?\n                return;\n            }\n            buffer_[read_bytes] = '\\0';\n            std::cout << buffer_.data() << std::flush;\n        }\n};\n\nint main(const int argc, const char* const argv[]) {\n    if (argc < 2) {\n        std::cerr\n            << \"specify file to tail\"\n            << std::endl;\n    }\n    const char* const file_path = argv[1];\n\n    try {\n        callback_t callback(file_path);\n        ev::default_loop loop;\n\n        ev::stat watcher(loop);\n        watcher.set<callback_t, &callback_t::read>(&callback);\n        watcher.set(file_path, 0);\n        watcher.start();\n\n        loop.run(0);\n\n        return 0;\n    }\n    catch (const std::runtime_error& e) {\n        std::cerr\n            << e.what()\n            << std::endl;\n        return 1;\n    }\n}\n\n\n\ntimer\n\ntimer.cpp\n/*\n * timer.cpp\n *  timer sample of libev\n *\n *      g++ -std=c++11 -Wall -Wextra -pedantic -lev timer.cpp\n *\n *  written by janus_wel<janus.wel.3@gmail.com>\n *\n *  These codes are licensed under the MIT license\n *      http://opensource.org/licenses/MIT\n * */\n\n#include <ev++.h>\n\n#include <iostream>\n\nclass callback_t {\n    private:\n        double timeout_;\n\n    public:\n        callback_t(const double& timeout)\n            : timeout_(timeout) { }\n\n    void awake(ev::timer& timer, int) noexcept {\n        std::cout\n            << \"timer: \" << timeout_ << \"sec\"\n            << std::endl;\n        timer.set(timeout_);\n        timer.start();\n    }\n};\n\nint main(const int, const char* const []) {\n    // timer settings\n    constexpr double timeout1 = 0.500000;\n    constexpr double timeout2 = 0.700000;\n\n    // loop\n    ev::default_loop loop;\n\n    // generate and setup timers\n    ev::timer timer1(loop);\n    callback_t callback1(timeout1);\n    timer1.set<callback_t, &callback_t::awake>(&callback1);\n    timer1.set(timeout1);\n    timer1.start();\n\n    ev::timer timer2(loop);\n    callback_t callback2(timeout2);\n    timer2.set<callback_t, &callback_t::awake>(&callback2);\n    timer2.set(timeout2);\n    timer2.start();\n\n    // run\n    loop.run(0);\n\n    return 0;\n}\n\n\n\necho server\n\necho-server\n/*\n * echo-server.cpp\n *  echo server with libev\n *\n *      g++ -std=c++11 -Wall -Wextra -pedantic -lev timer.cpp\n *\n *      telnet localhost 40713\n *\n *  written by janus_wel<janus.wel.3@gmail.com>\n *\n *  These codes are licensed under the MIT license\n *      http://opensource.org/licenses/MIT\n * */\n\n#include <ev++.h>\n\n#include <arpa/inet.h>\n#include <errno.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <unistd.h>\n\n#include <array>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <memory>\n#include <stdexcept>\n\nconstexpr unsigned int BUFFER_SIZE = 4096;\nconstexpr unsigned short int SERVER_PORT = 40713;\nconstexpr int NUMOF_BACKLOG = 16;\nconstexpr int PROTOCOL = 0;\n\ntemplate<typename T> constexpr inline T pointer_cast(void* const p) noexcept {\n    return static_cast<T>(p);\n}\ntemplate<typename T> constexpr inline T pointer_cast(const void* const p) noexcept {\n    return static_cast<T>(p);\n}\n\nclass socket_t {\n    private:\n        const sa_family_t family_;\n        const int socket_;\n\n    private:\n        static constexpr int ERROR_CODE = -1;\n\n    public:\n        socket_t(const sa_family_t family, const int type, const int protocol)\n            : family_(family),\n            socket_(socket(family, type, protocol)) {\n            if (socket_ == socket_t::ERROR_CODE) {\n                throw std::runtime_error(strerror(errno));\n            }\n        }\n\n        ~socket_t() noexcept {\n            close(socket_);\n        }\n\n        inline int raw() const noexcept {\n            return socket_;\n        }\n        inline operator int() const noexcept {\n            return this->raw();\n        }\n\n        void bind(const uint16_t port) {\n            sockaddr_in socket_address;\n            socket_address.sin_family = family_;\n            socket_address.sin_addr.s_addr = INADDR_ANY;\n            socket_address.sin_port = htons(port);\n\n            const auto result = ::bind(\n                    socket_,\n                    pointer_cast<sockaddr*>(&socket_address),\n                    sizeof(socket_address));\n\n            if (result == socket_t::ERROR_CODE) {\n                throw std::runtime_error(strerror(errno));\n            }\n        }\n\n        void listen(const int backlog) {\n            const auto result = ::listen(socket_, backlog);\n            if (result == socket_t::ERROR_CODE) {\n                throw std::runtime_error(strerror(errno));\n            }\n        }\n};\n\nclass connection_t;\n\ntypedef std::map<int, std::unique_ptr<connection_t>> connections_t;\nconnections_t connections;\n\nclass connection_t {\n    private:\n        unsigned int id_;\n        int descriptor_;\n\n        std::array<char, BUFFER_SIZE> buffer;\n        ev::io read_watcher;\n        ev::io write_watcher;\n\n        ssize_t received_bytes;\n\n    public:\n        connection_t(const unsigned int id, const int descriptor)\n            : id_(id), descriptor_(descriptor) {\n            read_watcher.set<connection_t, &connection_t::read>(this);\n            read_watcher.set(descriptor, ev::READ);\n\n            write_watcher.set<connection_t, &connection_t::write>(this);\n            write_watcher.set(descriptor, ev::WRITE);\n        }\n\n        void start() noexcept {\n            read_watcher.start();\n        }\n\n        void close() noexcept {\n            ::close(this->descriptor_);\n            connections.erase(connections.find(this->id_));\n\n            std::cout\n                << connections.size() << \" connections active\"\n                << std::endl;\n        }\n\n        void read(ev::io& w, int) {\n            std::cout\n                << \"read()\"\n                << std::endl;\n\n            ssize_t result = recv(w.fd, buffer.data(), buffer.size(), 0);\n\n            std::cout\n                << std::setw(4) << \" \" << result << \" bytes received\"\n                << std::endl;\n\n            if (result == -1) {\n                if (errno == EAGAIN) {\n                    return;\n                }\n                throw std::runtime_error(strerror(errno));\n            }\n\n            if (result == 0) {\n                std::cout\n                    << std::setw(4) << \" \" << \"disconnected by peer\"\n                    << std::endl;\n\n                w.stop();\n                this->close();\n\n                return;\n            }\n\n            received_bytes += result;\n            //w.stop();\n            write_watcher.start();\n        }\n\n        void write(ev::io& w, int) {\n            std::cout\n                << \"write()\"\n                << std::endl;\n\n            ssize_t sent_bytes = 0;\n            while (sent_bytes < received_bytes) {\n                ssize_t result = send(\n                        w.fd,\n                        &buffer[sent_bytes],\n                        received_bytes - sent_bytes,\n                        0);\n\n                std::cout\n                    << std::setw(4) << \" \" << result << \" bytes sent\"\n                    << std::endl;\n\n                if (result == -1) {\n                    if (errno == EAGAIN) {\n                        return;\n                    }\n                    throw std::runtime_error(strerror(errno));\n                }\n\n                sent_bytes += result;\n            }\n\n            received_bytes = 0;\n            w.stop();\n\n            //this->close();\n        }\n};\n\nclass host_t {\n    private:\n        std::string hostname_;\n        std::string ip_address_;\n\n    private:\n        static constexpr int SUCCESS_CODE = 0;\n\n    public:\n        const char* hostname() const noexcept {\n            return hostname_.c_str();\n        }\n        const char* ip_address() const noexcept {\n            return ip_address_.c_str();\n        }\n\n    public:\n        explicit host_t(const char* hostname, const sa_family_t family) {\n            addrinfo* address_info;\n            addrinfo hints;\n            hints.ai_family = family;\n\n            const auto result = getaddrinfo(hostname, nullptr, &hints, &address_info);\n            if (result != host_t::SUCCESS_CODE) {\n                throw std::runtime_error(gai_strerror(result));\n            }\n\n            hostname_ = address_info->ai_canonname;\n            ip_address_ = inet_ntoa(pointer_cast<sockaddr_in*>(address_info->ai_addr)->sin_addr);\n\n            freeaddrinfo(address_info);\n        }\n\n        explicit host_t(const sockaddr_in& socket_address) {\n            std::array<char, NI_MAXHOST> buffer;\n\n            const auto result = getnameinfo(\n                    pointer_cast<const sockaddr*>(&socket_address), sizeof(socket_address),\n                    buffer.data(), buffer.size(),\n                    nullptr, 0,\n                    NI_NAMEREQD);\n            if (result != host_t::SUCCESS_CODE) {\n                throw std::runtime_error(gai_strerror(result));\n            }\n\n            hostname_ = buffer.data();\n            ip_address_ = inet_ntoa(socket_address.sin_addr);\n        }\n};\n\nclass callback_t {\n    private:\n        unsigned int count_;\n\n    public:\n        callback_t() : count_(0) { }\n\n        void operator() (ev::io& w, int) {\n            sockaddr_in peer_socket_address;\n            socklen_t peer_socket_address_length = sizeof(peer_socket_address);\n            const auto descriptor = accept(\n                    w.fd,\n                    pointer_cast<sockaddr*>(&peer_socket_address),\n                    &peer_socket_address_length);\n            if (descriptor == -1) {\n                throw std::runtime_error(strerror(errno));\n            }\n\n            host_t host(peer_socket_address);\n            std::cout\n                << host.hostname() << \" \" << host.ip_address()\n                << std::endl;\n\n            const auto id = ++count_;\n            connections[id] = connections_t::mapped_type(new connection_t(id, descriptor));;\n\n            connections[id]->start();\n\n            std::cout\n                << connections.size() << \" connections active\"\n                << std::endl;\n        }\n};\n\nint main(const int, const char* const []) {\n    socket_t socket(AF_INET, SOCK_STREAM, PROTOCOL);\n    socket.bind(SERVER_PORT);\n    socket.listen(NUMOF_BACKLOG);\n\n    ev::default_loop loop;\n    ev::io watcher(loop);\n    callback_t callback;\n    watcher.set(&callback);\n    watcher.set(socket, ev::READ);\n    watcher.start();\n\n    loop.run(0);\n\n    return 0;\n}\n\n\n\u30d5\u30a1\u30a4\u30eb\u3084\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306a\u3069\u30ea\u30bd\u30fc\u30b9\u306e\u5909\u5316\u306a\u3069 POSIX \u306e IO \u3084\u7279\u5b9a\u6642\u9593\u306e\u7d4c\u904e\u306a\u3069\u3092\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u3042\u3064\u304b\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3002\nepoll \u3084\u306a\u3093\u304b\u304c\u3084\u308b\u3053\u3068\u3092\u96a0\u853d\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u4f4e\u30ec\u30d9\u30eb\u306a\u51e6\u7406\u3092\u66f8\u304d\u305f\u304f\u306a\u3044\u3072\u3068\u306b\u30aa\u30b9\u30b9\u30e1\u3002\n\n- http://software.schmorp.de/pkg/libev.html\n- http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3068\u306b\u304b\u304f\u9577\u3044\u3051\u3069\u3001\u6b21\u3060\u3051\u8aad\u3081\u3070\u554f\u984c\u306a\u3044\u3002\u305d\u306e\u4ed6\u306f\u5fc5\u8981\u306a\u3068\u304d\u306b\u5fc5\u8981\u306a\u3068\u3053\u308d\u3092\u3064\u307e\u307f\u8aad\u3080\u611f\u3058\u3067\u3002\u3063\u3066 WHAT TO READ WHEN IN A HURRY \u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n\n- ANATOMY OF A WATCHER\n- EXAMPLE PROGRAM\n- GLOBAL FUNCTIONS\n- WATCHER TYPES \u306e ev_io \u3068 ev_timer \u306e\u9805\n\nlibev \u306f libevent \u3092\u53c2\u8003\u306b\u4f5c\u3089\u308c\u3066\u3044\u3066\u3001\u30b9\u30d4\u30fc\u30c9\u304c\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\nhttp://libev.schmorp.de/bench.html\n\n\u305d\u308c\u4ee5\u5916\u306b\u3082 C++ \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u6574\u5099\u3055\u308c\u3066\u3044\u3066\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u4f7f\u308f\u305a\u306b\u66f8\u3051\u305f\u308a\u3059\u308b\u306e\u3067\u7279\u306b\u7406\u7531\u304c\u306a\u3044\u304b\u304e\u308a libev \u3067\u3044\u3044\u3068\u601d\u3046\u3002\n\n\u6b74\u53f2\u7684\u306a\u7d4c\u7def\u306f libevent \u306e\u6b21\u306e\u30da\u30fc\u30b8\u306b\u66f8\u3044\u3066\u3042\u308b\u304b\u3089\u8208\u5473\u3042\u308c\u3070\u307f\u3066\u307f\u308b\u3068\u3088\u3044\u304b\u3082\u3002\n\nhttp://www.wangafu.net/~nickm/libevent-book/01_intro.html\n\n\u3056\u3063\u304f\u308a\u6b21\u306e\u554f\u984c\u70b9\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b libevent \u304c\u4f5c\u3089\u308c\u3066\u3001\u305d\u306e\u9ad8\u901f\u5316\u3067 libev \u3068\u3044\u3046\u6d41\u308c\u3089\u3057\u3044\u3002\n\n- select, poll, epoll, kqueue, evports, /dev/poll \u306a\u3069\u4f3c\u305f\u3088\u3046\u306a\u306e\u304c\u3044\u3063\u3071\u3044\u3042\u3063\u3066\u3069\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u308f\u304b\u308a\u3065\u3089\u3044\n- \u74b0\u5883\u3054\u3068\u306b\u4f7f\u3048\u308b\u3082\u306e\u306b\u5dee\u304c\u3042\u308b\n- \u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\u306a\u3069\u306e\u4f4e\u7d1a\u306a\u6982\u5ff5\u3092\u305d\u306e\u307e\u307e\u6271\u3044\u305f\u304f\u306a\u3044\n\n\u4ee5\u964d\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3056\u3056\u3063\u3068\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\nevent loop\n----------\n\nlibev \u306f\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306e\u4e00\u7a2e\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\u666e\u6bb5\u5f85\u6a5f\u3067\u30a4\u30d9\u30f3\u30c8\u304c\u8d77\u304d\u305f\u3089\u51e6\u7406\u3001\u3092\u3050\u308b\u3050\u308b\u7e70\u308a\u8fd4\u3059\u3002\nlibev \u306f\u540c\u6642\u306b\u3072\u3068\u3064\u4ee5\u4e0a\u306e\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3092\u7ba1\u7406\u3067\u304d\u308b\u3002\n\n1. \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u4f5c\u6210\n2. \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306b\u30a4\u30d9\u30f3\u30c8\u7a2e\u985e\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5bfe\u306b\u3057\u305f\u3082\u306e\u3092\u8ffd\u52a0\n\n\u3068\u3044\u3046\u6d41\u308c\u3002\n\nwatcher\n-------\n\nlibev \u306b\u306f\u4f55\u3089\u304b\u306e\u30a4\u30d9\u30f3\u30c8\u306e\u767a\u706b\u3092\u76e3\u8996\u3059\u308b\u5358\u4f4d\u3068\u3057\u3066 watcher \u3068\u3044\u3046\u6982\u5ff5\u304c\u3042\u308b\u3002\u3051\u3069\u3001\u4e00\u822c\u7684\u306b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3068\u540c\u3058\u3002\u5fae\u5999\u306b\u9055\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u6c17\u306b\u3057\u306a\u3044\u3002\n\u6b21\u306e\u578b\u306e\u3069\u308c\u304b\u3092\u5b9f\u4f53\u5316\u3057\u305f\u3082\u306e\u3092 watcher \u3068\u3057\u3066\u6271\u3046\u3002\n\n| *\u578b\u540d*        | *\u8aac\u660e*                                        |\n|:--------------|:----------------------------------------------|\n| ev_io         | \u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u30fc                      |\n| ev_stat       | \u30d5\u30a1\u30a4\u30eb\u306e\u72b6\u614b\u3001 Linux inotify \u3092\u4f7f\u3063\u3066\u3044\u308b   |\n| ev_async      | \u81ea\u524d\u30a4\u30d9\u30f3\u30c8\u3001 Linux eventfd \u3092\u4f7f\u3063\u3066\u3044\u308b     |\n| ev_signal     | \u540c\u671f\u30b7\u30b0\u30ca\u30eb\u3001 Linux signalfd \u3092\u4f7f\u3063\u3066\u3044\u308b    |\n| ev_timer      | 3 \u79d2\u5f8c\u306a\u3069\u76f8\u5bfe\u7684\u306a\u6642\u9593                        |\n| ev_periodic   | \u65e5\u66dc\u65e5\u306e 24:00 \u306a\u3069\u7d76\u5bfe\u7684\u306a\u6642\u9593               |\n| ev_child      | \u30d7\u30ed\u30bb\u30b9\u306e\u72b6\u614b                                |\n| ev_idle       | \u4ed6\u306b\u52d5\u4f5c\u3059\u308bwatcher\u304c\u306a\u3044\u5834\u5408\u306b\u767a\u706b           |\n| ev_embed      | epoll, kqueue \u306a\u3069\u4f7f\u7528\u3059\u308b\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u6307\u5b9a  |\n| ev_prepare    | watcher\u52d5\u4f5c\u306e\u76f4\u524d\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u306e\u6307\u5b9a         |\n| ev_check      | watcher\u52d5\u4f5c\u306e\u76f4\u5f8c\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u306e\u6307\u5b9a         |\n| ev_fork       | fork \u306e\u9650\u5b9a\u30b5\u30dd\u30fc\u30c8                           |\n\nwatcher \u304c\u5b9f\u4f53\u5316\u3057\u305f\u969b\u306b\u4f7f\u7528\u3059\u308b\u30e1\u30e2\u30ea\u30fc\u306f\u81ea\u5206\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3042\u308b watcher \u306b\u5bfe\u5fdc\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u751f\u3055\u305b\u306a\u304f\u3066\u3082\u3001\u5f37\u5236\u7684\u306b\u52d5\u4f5c\u3055\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\n### \u72b6\u614b\u9077\u79fb\n\nwatcher \u306f\u6b21\u306e\u3046\u3061\u3001\u3069\u308c\u304b\u306e\u72b6\u614b\u306b\u306a\u308b\u3002\n\n- initialized\n    - \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306b\u767b\u9332\u3055\u308c\u308b\u524d\u306e\u72b6\u614b\n    - initialized \u306b\u306a\u308b\u306b\u306f\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u305f\u969b\u306b\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306e\u8a2d\u5b9a\u304c\u5fc5\u9808\n- active / running / active\n    - \u30a4\u30d9\u30f3\u30c8\u767a\u706b\u3092\u5f85\u3063\u3066\u3044\u308b\u6700\u4e2d\u306e\u72b6\u614b\n    - \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u65b9\u6cd5\u3092\u9664\u3044\u3066\u3001\u8aad\u307f\u66f8\u304d\u30fb\u79fb\u52d5\u30fb\u89e3\u653e\u3067\u304d\u306a\u3044\n- pending\n    - active \u3067\u76e3\u8996\u5bfe\u8c61\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3055\u308c\u305f\u5f8c\u306e\u72b6\u614b\n    - stopped \u306b\u306a\u308b\u304b\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\u76f4\u524d\u307e\u3067\u306f pending\n    - ev_io \u3068\u304b\u7e70\u308a\u8fd4\u3057\u4f7f\u7528\u3067\u304d\u308b watcher \u306f pending \u304b\u3089\u307e\u305f active \u306b\u79fb\u884c\u3067\u304d\u308b\n    - 1 \u56de\u9650\u308a\u306e ev_timer \u306f\u52d5\u4f5c\u5f8c pending \u306b\u306a\u308b\u3051\u3069 active \u306b\u306f\u79fb\u884c\u3067\u304d\u306a\u3044\n    - \u8aad\u307f\u66f8\u304d\u306f\u3067\u304d\u308b\u3051\u3069\u3001\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306b\u7d10\u4ed8\u3044\u305f\u307e\u307e\u306a\u306e\u3067\u79fb\u52d5\u30fb\u89e3\u653e\u30fb\u518d\u4f7f\u7528\u306f\u3067\u304d\u306a\u3044\n- stopped\n    - libev \u304c\u81ea\u52d5\u7684\u306b stopped \u306b\u3059\u308b\n        - \u540c\u6642\u306b pending \u306b\u3082\u306a\u3063\u305f\u308a\u3059\u308b\n    - \u660e\u793a\u7684\u306b stopped \u306b\u3067\u304d\u308b\n        - \u660e\u793a\u7684\u306b stopped \u306b\u3059\u308b\u3068\u5f37\u5236\u7684\u306b pending \u3092\u89e3\u9664\u3059\u308b\n        - \u306a\u3093\u304b\u306e\u62cd\u5b50\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u306a\u304f\u306a\u308b\u304b\u3089 watcher \u89e3\u653e\u524d\u306b\u306f\u660e\u793a\u7684\u306b\u505c\u6b62\u3055\u305b\u305f\u307b\u3046\u304c\u3088\u3044\u3068\u306e\u3053\u3068\n    - stopped \u306f initialized \u3068\u540c\u3058\u306a\u306e\u3067\u518d\u4f7f\u7528\u30fb\u79fb\u52d5\u30fb\u5909\u66f4\u304c\u53ef\u80fd\n\n### \u512a\u5148\u5ea6\n\nwatcher \u306b\u306f\u512a\u5148\u5ea6\u3092\u3064\u3051\u3089\u308c\u308b\u3002\u5177\u4f53\u7684\u306a\u512a\u5148\u5ea6\u306e\u7bc4\u56f2\u306f\u5b9a\u6570 EV_MINPRI \uff5e EV_MAXPRI \u307e\u3067\u3002\n\u57fa\u672c\u7684\u306b watcher \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u512a\u5148\u5ea6\u304c\u9ad8\u3044\u65b9\u304b\u3089\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u304f\u3002\n\u3067\u3001 libev \u306f\u512a\u5148\u5ea6\u3092\u53d6\u308a\u6271\u3046\u3068\u304d\u306e\u65b9\u6cd5\u3068\u3057\u3066\u6b21\u306e 2 \u3064\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\n#### lock-out model\n\n\u9ad8\u3044\u512a\u5148\u5ea6\u3092\u6301\u3064\u3082\u306e\u304c\u4f4e\u3044\u512a\u5148\u5ea6\u306e\u3082\u306e\u3092\u7de0\u3081\u51fa\u3059 = lock-out\n\n1. \u4e00\u756a\u9ad8\u3044\u512a\u5148\u5ea6\u306e watcher \u3060\u3051\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3067\u304d\u308b\n2. \u305d\u308c\u4ee5\u5916\u306e\u512a\u5148\u5ea6\u306e watcher \u306f\u4f55\u3082\u3067\u304d\u306a\u3044\n\n\u3053\u306e model \u306f kernel \u306e\u5b9f\u88c5\u304c\u30a2\u30ec\u3067\u975e\u52b9\u7387\u3068\u304b\u66f8\u304b\u308c\u3066\u308b\u3002\n\n1. \u30a4\u30d9\u30f3\u30c8 A, B \u304c\u767a\u751f\n2. \u30a4\u30d9\u30f3\u30c8 A \u3092\u76e3\u8996\u3057\u3066\u3044\u308b watcher \u306e\u3046\u3061\u512a\u5148\u5ea6\u304c\u6700\u9ad8\u306e\u3082\u306e\u3092\u99c6\u52d5\n3. \u30a4\u30d9\u30f3\u30c8 A \u3092\u76e3\u8996\u3057\u3066\u3044\u308b watcher \u306e\u3046\u3061\u6b21\u306e\u512a\u5148\u5ea6\u306e\u3082\u306e\u3092\u99c6\u52d5\n4. \u4ee5\u4e0b\u540c\u69d8\n\n#### only-for-ordering\n\n\u512a\u5148\u5ea6\u304c\u9ad8\u3044 watcher \u304b\u3089\u9806\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3066\u3044\u304f\u3060\u3051 = only-for-ordering\n\n1. \u4e00\u756a\u9ad8\u3044\u512a\u5148\u5ea6\u306e watcer \u304c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\n2. \u305d\u306e\u6b21\u306b\u9ad8\u3044\u512a\u5148\u5ea6\u306e watcher \u304c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\n3. \u4ee5\u4e0b\u767a\u706b\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u306b\u5bfe\u5fdc\u3059\u308b watcher \u304c\u5b58\u5728\u3059\u308c\u3070\u512a\u5148\u5ea6\u9806\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u304f\n\n\u4f55\u304c\u3046\u308c\u3057\u3044\u304b\u3068\u3044\u3046\u3068\u3001\u305f\u3068\u3048\u3070 ev_io watcher \u3067\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3068\u3063\u3066 ev_timer watcher \u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u3066\u306a\u3044\u304b\u3069\u3046\u304b\u3092\u898b\u5f35\u308b\u3068\u304d\u306a\u3093\u304b\u306b\u6b21\u306e\u30a4\u30e4\u306a\u30d1\u30bf\u30fc\u30f3\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n1. \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9ad8\u8ca0\u8377\u6642\u3067\u8aad\u307f\u306b\u3044\u3051\u306a\u3044\u3068\u304d\u306b\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3059\u308b\n2. \u8aad\u3081\u306a\u3044\u307e\u307e\u30bf\u30a4\u30de\u30fc\u304c\u52d5\u4f5c\u3059\u308b\n3. \u30c7\u30fc\u30bf\u304c\u5c4a\u3044\u3066\u3044\u308b\u306e\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u3063\u3066\u3057\u307e\u3046\n\n\u3053\u306e\u5834\u5408\u306f\u30bf\u30a4\u30de\u30fc\u306e\u512a\u5148\u5ea6\u3092\u4f4e\u304f\u3057\u3066\u304a\u3051\u3070\u5148\u306b\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u3067\u304d\u308b\u3002\n\n#### model \u306e\u4f7f\u3044\u5206\u3051\n\nlibev \u3067\u306f ev_idle \u3060\u3051\u304c lock-out model \u3067\u305d\u306e\u4ed6\u304c only-for-ordering model \u3092\u4f7f\u3046\u3089\u3057\u3044\u3002\nev_idle \u304c\u767a\u706b\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f ev_idle \u3088\u308a\u512a\u5148\u5ea6\u306e\u9ad8\u3044 watcher \u304c\u3044\u306a\u3044\u5834\u5408\u3002\n\n\u3067\u3001\u5168\u4f53\u3092 lock-out model \u3067\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u306f ev_idle watcher \u3067\u5168\u90e8\u53d7\u3051\u3068\u3063\u3066\u5185\u90e8\u3067\u5207\u308a\u5206\u3051\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u3059\u308c\u3070\u3044\u3044\u3089\u3057\u3044\u3002\u3051\u3069\u610f\u5473\u3042\u3093\u306e\u304b\u3053\u308c\u3002\n\n\nC++ bindings\n------------\n\nC \u8a00\u8a9e\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3060\u3051\u3069 C++ \u7528\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3082\u540c\u68b1\u3057\u3066\u3044\u308b\u3002\n\n- ev++.h \u3092 include \u3059\u308b\u3053\u3068\u3067\u4f7f\u7528\u53ef\u80fd\u3002\n- \u4f8b\u5916\u306f watcher \u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304b\u3089\u306e\u307f throw \u53ef\u80fd\u3002\n- ev \u540d\u524d\u7a7a\u9593\u306e\u4e0b\u306b\u3044\u308d\u3044\u308d\u5b9a\u7fa9\u3055\u308c\u3066\u308b\n\n### \u512a\u5148\u5ea6\u5909\u66f4\n\n\u512a\u5148\u5ea6\u3092\u3044\u3058\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u306a\u3044\u306e\u3067\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\n```C++\ntemplate<typename T> constexpr inline T pointer_cast(void* const p) noexcept {\n    return static_cast<T>(p);\n}\ntemplate<typename T> constexpr inline T pointer_cast(const void* const p) noexcept {\n    return static_cast<T>(p);\n}\n\n/*\n * ev::TYPE priority accessors\n *  getter\n *      int priority(ev_TYPE* watcher);\n *  setter\n *      void priority(ev_TYPE* watcher, int priority);\n * */\ntemplate <typename T> inline constexpr int priority(const T& watcher) noexcept;\ntemplate <typename T> inline void priority(T& watcher, const int priority) noexcept;\n\n#define DEFINE_PRIORITY_GETTER(t)                                           \\\ntemplate <> inline constexpr int priority(const ev::t& watcher) noexcept {  \\\n    return ev_priority(pointer_cast<const ev_ ## t*>(&watcher));            \\\n}\n#define DEFINE_PRIORITY_SETTER(t)                                               \\\ntemplate <> inline void priority(ev::t& watcher, const int priority) noexcept { \\\n    ev_set_priority(pointer_cast<ev_ ## t*>(&watcher), priority);               \\\n}\n#define DEFINE_PRIORITY_ACCESSOR(t) \\\nDEFINE_PRIORITY_GETTER(t)           \\\nDEFINE_PRIORITY_SETTER(t)\n\nDEFINE_PRIORITY_ACCESSOR(io)\nDEFINE_PRIORITY_ACCESSOR(timer)\n```\n\nio \u3068 timer \u4ee5\u5916\u306b\u6b32\u3057\u3051\u308c\u3070\u9069\u5f53\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3093\u306a\u3055\u3044\u3002\n\n\n\u30b5\u30f3\u30d7\u30eb\n--------\n\n\u5168\u90e8 C++ \u3067\u66f8\u3044\u3066\u307f\u305f\u3082\u306e\u3002\n\n\n### tail -f \u3082\u3069\u304d\n\n```C++:tailike.cpp\n/*\n * tailike.cpp\n *  tail -f with libev\n *\n *      g++ -std=c++11 -Wall -Wextra -pedantic -lev tailike.cpp\n *\n *  written by janus_wel<janus.wel.3@gmail.com>\n *\n *  These codes are licensed under the MIT license\n *      http://opensource.org/licenses/MIT\n * */\n\n#include <fcntl.h>  // open\n#include <string.h> // strerror\n#include <unistd.h> // read\n\n#include <ev++.h>\n\n#include <array>\n#include <iostream>\n#include <stdexcept>\n#include <string>\n\nconstexpr std::size_t BUFFER_SIZE = 4096;\n\nclass file_descriptor_t {\n    private:\n        int file_descriptor_;\n\n    public:\n        explicit file_descriptor_t(const char* const file_name)\n            : file_descriptor_(open(file_name, O_RDONLY)) {\n            if (file_descriptor_ == -1) {\n                throw std::runtime_error(strerror(errno));\n            }\n        }\n        explicit file_descriptor_t(const std::string& file_name)\n            : file_descriptor_t(file_name.c_str()) { }\n\n        ~file_descriptor_t() noexcept {\n            close(file_descriptor_);\n        }\n\n        inline int raw() const noexcept {\n            return file_descriptor_;\n        }\n        inline operator int() const noexcept {\n            return this->raw();\n        }\n};\n\nclass callback_t {\n    public:\n        typedef std::array<char, BUFFER_SIZE> buffer_t;\n\n    private:\n        buffer_t buffer_;\n        file_descriptor_t file_descriptor_;\n\n    public:\n        callback_t(const char* file_path)\n            : file_descriptor_(file_path) { }\n\n        void read(ev::stat& w, int) {\n            if (!w.attr.st_nlink) {\n                return;\n            }\n\n            const auto read_bytes = ::read(file_descriptor_, buffer_.data(), buffer_.size() - 1);\n            if (read_bytes == -1) {\n                // error occured when read\n                return;\n            }\n            if (read_bytes == 0) {\n                // fd is closed?\n                return;\n            }\n            buffer_[read_bytes] = '\\0';\n            std::cout << buffer_.data() << std::flush;\n        }\n};\n\nint main(const int argc, const char* const argv[]) {\n    if (argc < 2) {\n        std::cerr\n            << \"specify file to tail\"\n            << std::endl;\n    }\n    const char* const file_path = argv[1];\n\n    try {\n        callback_t callback(file_path);\n        ev::default_loop loop;\n\n        ev::stat watcher(loop);\n        watcher.set<callback_t, &callback_t::read>(&callback);\n        watcher.set(file_path, 0);\n        watcher.start();\n\n        loop.run(0);\n\n        return 0;\n    }\n    catch (const std::runtime_error& e) {\n        std::cerr\n            << e.what()\n            << std::endl;\n        return 1;\n    }\n}\n```\n\n### timer\n\n```C++:timer.cpp\n/*\n * timer.cpp\n *  timer sample of libev\n *\n *      g++ -std=c++11 -Wall -Wextra -pedantic -lev timer.cpp\n *\n *  written by janus_wel<janus.wel.3@gmail.com>\n *\n *  These codes are licensed under the MIT license\n *      http://opensource.org/licenses/MIT\n * */\n\n#include <ev++.h>\n\n#include <iostream>\n\nclass callback_t {\n    private:\n        double timeout_;\n\n    public:\n        callback_t(const double& timeout)\n            : timeout_(timeout) { }\n\n    void awake(ev::timer& timer, int) noexcept {\n        std::cout\n            << \"timer: \" << timeout_ << \"sec\"\n            << std::endl;\n        timer.set(timeout_);\n        timer.start();\n    }\n};\n\nint main(const int, const char* const []) {\n    // timer settings\n    constexpr double timeout1 = 0.500000;\n    constexpr double timeout2 = 0.700000;\n\n    // loop\n    ev::default_loop loop;\n\n    // generate and setup timers\n    ev::timer timer1(loop);\n    callback_t callback1(timeout1);\n    timer1.set<callback_t, &callback_t::awake>(&callback1);\n    timer1.set(timeout1);\n    timer1.start();\n\n    ev::timer timer2(loop);\n    callback_t callback2(timeout2);\n    timer2.set<callback_t, &callback_t::awake>(&callback2);\n    timer2.set(timeout2);\n    timer2.start();\n\n    // run\n    loop.run(0);\n\n    return 0;\n}\n```\n\n### echo server\n\n```C++:echo-server:cpp\n/*\n * echo-server.cpp\n *  echo server with libev\n *\n *      g++ -std=c++11 -Wall -Wextra -pedantic -lev timer.cpp\n *\n *      telnet localhost 40713\n *\n *  written by janus_wel<janus.wel.3@gmail.com>\n *\n *  These codes are licensed under the MIT license\n *      http://opensource.org/licenses/MIT\n * */\n\n#include <ev++.h>\n\n#include <arpa/inet.h>\n#include <errno.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <unistd.h>\n\n#include <array>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <memory>\n#include <stdexcept>\n\nconstexpr unsigned int BUFFER_SIZE = 4096;\nconstexpr unsigned short int SERVER_PORT = 40713;\nconstexpr int NUMOF_BACKLOG = 16;\nconstexpr int PROTOCOL = 0;\n\ntemplate<typename T> constexpr inline T pointer_cast(void* const p) noexcept {\n    return static_cast<T>(p);\n}\ntemplate<typename T> constexpr inline T pointer_cast(const void* const p) noexcept {\n    return static_cast<T>(p);\n}\n\nclass socket_t {\n    private:\n        const sa_family_t family_;\n        const int socket_;\n\n    private:\n        static constexpr int ERROR_CODE = -1;\n\n    public:\n        socket_t(const sa_family_t family, const int type, const int protocol)\n            : family_(family),\n            socket_(socket(family, type, protocol)) {\n            if (socket_ == socket_t::ERROR_CODE) {\n                throw std::runtime_error(strerror(errno));\n            }\n        }\n\n        ~socket_t() noexcept {\n            close(socket_);\n        }\n\n        inline int raw() const noexcept {\n            return socket_;\n        }\n        inline operator int() const noexcept {\n            return this->raw();\n        }\n\n        void bind(const uint16_t port) {\n            sockaddr_in socket_address;\n            socket_address.sin_family = family_;\n            socket_address.sin_addr.s_addr = INADDR_ANY;\n            socket_address.sin_port = htons(port);\n\n            const auto result = ::bind(\n                    socket_,\n                    pointer_cast<sockaddr*>(&socket_address),\n                    sizeof(socket_address));\n\n            if (result == socket_t::ERROR_CODE) {\n                throw std::runtime_error(strerror(errno));\n            }\n        }\n\n        void listen(const int backlog) {\n            const auto result = ::listen(socket_, backlog);\n            if (result == socket_t::ERROR_CODE) {\n                throw std::runtime_error(strerror(errno));\n            }\n        }\n};\n\nclass connection_t;\n\ntypedef std::map<int, std::unique_ptr<connection_t>> connections_t;\nconnections_t connections;\n\nclass connection_t {\n    private:\n        unsigned int id_;\n        int descriptor_;\n\n        std::array<char, BUFFER_SIZE> buffer;\n        ev::io read_watcher;\n        ev::io write_watcher;\n\n        ssize_t received_bytes;\n\n    public:\n        connection_t(const unsigned int id, const int descriptor)\n            : id_(id), descriptor_(descriptor) {\n            read_watcher.set<connection_t, &connection_t::read>(this);\n            read_watcher.set(descriptor, ev::READ);\n\n            write_watcher.set<connection_t, &connection_t::write>(this);\n            write_watcher.set(descriptor, ev::WRITE);\n        }\n\n        void start() noexcept {\n            read_watcher.start();\n        }\n\n        void close() noexcept {\n            ::close(this->descriptor_);\n            connections.erase(connections.find(this->id_));\n\n            std::cout\n                << connections.size() << \" connections active\"\n                << std::endl;\n        }\n\n        void read(ev::io& w, int) {\n            std::cout\n                << \"read()\"\n                << std::endl;\n\n            ssize_t result = recv(w.fd, buffer.data(), buffer.size(), 0);\n\n            std::cout\n                << std::setw(4) << \" \" << result << \" bytes received\"\n                << std::endl;\n\n            if (result == -1) {\n                if (errno == EAGAIN) {\n                    return;\n                }\n                throw std::runtime_error(strerror(errno));\n            }\n\n            if (result == 0) {\n                std::cout\n                    << std::setw(4) << \" \" << \"disconnected by peer\"\n                    << std::endl;\n\n                w.stop();\n                this->close();\n\n                return;\n            }\n\n            received_bytes += result;\n            //w.stop();\n            write_watcher.start();\n        }\n\n        void write(ev::io& w, int) {\n            std::cout\n                << \"write()\"\n                << std::endl;\n\n            ssize_t sent_bytes = 0;\n            while (sent_bytes < received_bytes) {\n                ssize_t result = send(\n                        w.fd,\n                        &buffer[sent_bytes],\n                        received_bytes - sent_bytes,\n                        0);\n\n                std::cout\n                    << std::setw(4) << \" \" << result << \" bytes sent\"\n                    << std::endl;\n\n                if (result == -1) {\n                    if (errno == EAGAIN) {\n                        return;\n                    }\n                    throw std::runtime_error(strerror(errno));\n                }\n\n                sent_bytes += result;\n            }\n\n            received_bytes = 0;\n            w.stop();\n\n            //this->close();\n        }\n};\n\nclass host_t {\n    private:\n        std::string hostname_;\n        std::string ip_address_;\n\n    private:\n        static constexpr int SUCCESS_CODE = 0;\n\n    public:\n        const char* hostname() const noexcept {\n            return hostname_.c_str();\n        }\n        const char* ip_address() const noexcept {\n            return ip_address_.c_str();\n        }\n\n    public:\n        explicit host_t(const char* hostname, const sa_family_t family) {\n            addrinfo* address_info;\n            addrinfo hints;\n            hints.ai_family = family;\n\n            const auto result = getaddrinfo(hostname, nullptr, &hints, &address_info);\n            if (result != host_t::SUCCESS_CODE) {\n                throw std::runtime_error(gai_strerror(result));\n            }\n\n            hostname_ = address_info->ai_canonname;\n            ip_address_ = inet_ntoa(pointer_cast<sockaddr_in*>(address_info->ai_addr)->sin_addr);\n\n            freeaddrinfo(address_info);\n        }\n\n        explicit host_t(const sockaddr_in& socket_address) {\n            std::array<char, NI_MAXHOST> buffer;\n\n            const auto result = getnameinfo(\n                    pointer_cast<const sockaddr*>(&socket_address), sizeof(socket_address),\n                    buffer.data(), buffer.size(),\n                    nullptr, 0,\n                    NI_NAMEREQD);\n            if (result != host_t::SUCCESS_CODE) {\n                throw std::runtime_error(gai_strerror(result));\n            }\n\n            hostname_ = buffer.data();\n            ip_address_ = inet_ntoa(socket_address.sin_addr);\n        }\n};\n\nclass callback_t {\n    private:\n        unsigned int count_;\n\n    public:\n        callback_t() : count_(0) { }\n\n        void operator() (ev::io& w, int) {\n            sockaddr_in peer_socket_address;\n            socklen_t peer_socket_address_length = sizeof(peer_socket_address);\n            const auto descriptor = accept(\n                    w.fd,\n                    pointer_cast<sockaddr*>(&peer_socket_address),\n                    &peer_socket_address_length);\n            if (descriptor == -1) {\n                throw std::runtime_error(strerror(errno));\n            }\n\n            host_t host(peer_socket_address);\n            std::cout\n                << host.hostname() << \" \" << host.ip_address()\n                << std::endl;\n\n            const auto id = ++count_;\n            connections[id] = connections_t::mapped_type(new connection_t(id, descriptor));;\n\n            connections[id]->start();\n\n            std::cout\n                << connections.size() << \" connections active\"\n                << std::endl;\n        }\n};\n\nint main(const int, const char* const []) {\n    socket_t socket(AF_INET, SOCK_STREAM, PROTOCOL);\n    socket.bind(SERVER_PORT);\n    socket.listen(NUMOF_BACKLOG);\n\n    ev::default_loop loop;\n    ev::io watcher(loop);\n    callback_t callback;\n    watcher.set(&callback);\n    watcher.set(socket, ev::READ);\n    watcher.start();\n\n    loop.run(0);\n\n    return 0;\n}\n```\n", "tags": ["libev", "libevent", "C++", "C++11"]}