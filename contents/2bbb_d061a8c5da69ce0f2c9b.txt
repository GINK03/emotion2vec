{"context": "\u624b\u524d\u5473\u564c\u3067\u3059\u304c, \u6700\u8fd1ofxJsonUtils\u3068\u3044\u3046addon\u3092\u66f8\u3044\u3066\u307e\u3057\u3066, \u305d\u308c\u306e\u7d39\u4ecb.\n\nofxJsonUtils\u3068\u306f\n\u4eca\u5f8cofxXmlSetting\u304c\u7121\u304f\u306a\u3063\u3066ofXml\u306b\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3053\u308c\u304c\u307e\u305f\u975e\u5e38\u306b\u4f7f\u3044\u3065\u3089\u3044.\n\u305d\u3082\u305d\u3082XML\u306e\u9589\u3058\u30bf\u30b0\u304c\u5acc\u3044\u3060\u3057js\u5927\u597d\u304d\u52e2\u3068\u3057\u3066\u306fjson\u6700\u9ad8\u3063\u3066\u8a00\u3044\u305f\u3044.\n\u3067\u3082of\u306eaddon\u3067json\u306e\u6c7a\u5b9a\u6253\u304c\u306a\u304b\u306a\u304b\u51fa\u306a\u3044\u306e\u3067\u3059\u304c, \u591a\u52060.10.0\u304b\u3089nlohmann/json\u3068\u3044\u3046C++11\u306a\u30e2\u30c0\u30f3\u306ajson\u30e9\u30a4\u30d6\u30e9\u30ea\u304cusing ofJson = nlohmann::json; \u3068\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059.\n\u3067, \u305d\u308c\u3092\u5148\u53d6\u308a\u3057\u3066ofxJsonUtils\u3068\u3044\u3046\u306e\u3092\u66f8\u3044\u3066\u307e\u3057\u3066, nlohmann::json\u304c\u7121\u3044\u5834\u5408\u306fofJson\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u308a\u3068\u304b\u3057\u3066\u4eca\u5f8c\u3082\u4e92\u63db\u6027\u3092\u4fdd\u3066\u308bjson\u4f7f\u3044\u304c\u51fa\u6765\u308b, \u3068.\n\u305d\u3093\u3067, nlohmann::json \u306f\u306a\u304b\u306a\u304b\u30a4\u30b1\u3066\u308b\u3093\u3067\u3059\u304c\u75d2\u3044\u3068\u3053\u308d\u306b\u624b\u304c\u5c4a\u304b\u306a\u3044\u306e\u3067\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u7684\u306a\u306e\u3082\u66f8\u3044\u3066\u3044\u308b\u72b6\u6cc1\u3067\u3059.\n\nofxJsonUtils::loadFromFile\n\u6bce\u56de\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u8fbc\u3093\u3067\u30d1\u30fc\u30b9\u3057\u3066\u3063\u3066\u3044\u3046\u6570\u884c\u306e\u3053\u3068\u3067\u3059\u304c, \u5927\u4f53\u5b9a\u578b\u6587\u306a\u306e\u3067\u95a2\u6570\u306b\u3057\u3066\u307e\u3059.\n  ofJson json = ofxJsonUtils::loadFromFile(\"hoge.json\");\n\n\ntoJson, loadJson\n\u4f8b\u3048\u3070, \nstruct my_struct {\n  ofVec3f point;\n  int radius;\n};\n\n\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9/\u69cb\u9020\u4f53\u3092json\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306b\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n  ofJson toJson() const {\n    ofJson json;\n    json[\"point\"] = ofxJsonUtils::convert(point);\n    json[\"raidus\"] = radius;\n    return json;\n  }\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils::parse(json[\"point\"], point);\n    ofxJsonUtils::parse(json[\"radius\"], radius);\n  }\n};\n\n\u3068 toJson, loadJson \u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3068\u4eca\u5ea6\u306f\nstruct other_struct {\n  std::vector<my_struct> objs;\n  ofJson toJson() const {\n    ofJson json;\n    json[\"objs\"] = ofxJsonUtils::convert(objs);\n    return json;\n  };\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils::parse(json[\"objs\"], objs);\n  }\n};\n\n\u3068\u518d\u5e30\u7684\u306b\u4f7f\u3063\u3066\u3044\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059.\n\u65e2\u306b\u5b58\u5728\u3059\u308b\u81ea\u5206\u304c\u624b\u3092\u5165\u308c\u308c\u306a\u3044\u30af\u30e9\u30b9\u306b\u95a2\u3057\u3066\u3082\n\nstruct not_my_struct { ... };\n\nofJson convert(const not_my_struct &value) {\n  return {\n    {\"x\", value.x},\n    {\"y\", value.y}\n  };\n}\n\nvoid parse(const ofJson &json, not_my_struct &value) {\n  value.x = json[\"x\"];\n  value.y = json[\"y\"];\n}\n\n\n\u3068\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5916\u90e8\u304b\u3089\u3067\u3082\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059.\n\nofxJsonify\n\n\u307e\u305f, ofxJsonify \u3068\u3044\u3046template\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3068\n  struct other_struct : public ofxJsonify<other_struct> {\n    std::vector<my_struct> objs;\n    ofJson toJson() const {\n      ofJson json;\n      json[\"objs\"] = ofxJsonUtils::convert(objs);\n      return json;\n    };\n    void loadJson(const ofJson &json) {\n      ofxJsonUtils::parse(json[\"objs\"], objs);\n    }\n  }\n\n\u3068\u3059\u308b\u3060\u3051\u3067\n  other_struct s;\n  s.loadFromJsonFile(\"hoge.json\");\n  s.loadFromJsonString(\"{\\\"objs\\\":[]}\");\n\n  s.writeToJsonFile(\"bar.json\");\n  std::string str = s.toJsonString();\n\n  ofJson json = s;\n\n\u3068\u3044\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u66f8\u304d\u8fbc\u307f/\u8aad\u307f\u8fbc\u307f, \u6587\u5b57\u5217\u306e\u66f8\u304d\u51fa\u3057/\u8aad\u307f\u8fbc\u307f, \u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u88cf\u3067\u5b9f\u88c5\u3057\u3066\u304f\u308c\u307e\u3059.\n\ncreate, load\n\n\u6700\u521d\u306e\u4f8b\u306e\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n  ofJson toJson() const {\n    ofJson json;\n    json[\"point\"] = ofxJsonUtils::convert(point);\n    json[\"raidus\"] = radius;\n    return json;\n  }\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils::parse(json[\"point\"], point);\n    ofxJsonUtils::parse(json[\"radius\"], radius);\n  }\n};\n\n\u306f, create / load \u3092\u4f7f\u3046\u3068\u6b21\u306e\u3088\u3046\u306b\u3082\u66f8\u3051\u307e\u3059.\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n  ofJson toJson() const {\n    return ofxJsonUtils::create(\"point\", point, \"radius\", radius);\n  }\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils::load(json, \"point\", point, \"radius\", radius);\n  }\n};\n\n\u66f4\u306b, kv \u30de\u30af\u30ed\u3092\u4f7f\u3046\u3068\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n  ofJson toJson() const {\n    return ofxJsonUtils::create(kv(point), kv(radius));\n  }\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils ::load(json, kv(point), kv(radius));\n  }\n};\n\n\u3068\u66f8\u3051\u307e\u3059.\n\noF\u30af\u30e9\u30b9\u306e\u5bfe\u5fdc\u72b6\u6cc1\n\u73fe\u72b6\u306f\n\n\nofVec2f: {\"x\": 0.0, \"y\": 0.0}\n\n\nofVec3f: {\"x\": 0.0, \"y\": 0.0, \"z\": 0.0}\n\n\nofVec4f: {\"x\": 0.0, \"y\": 0.0, \"z\": 0.0, \"w\": 0.0}\n\n\nofRectangle: {\"x\": 0.0, \"y\": 0.0, \"width\": 0.0, \"height\": 0.0}\n\n\nofMatrix4x4: {\"value0\": (ofVec4f), \"value1\": (ofVec4f), \"value2\": (ofVec4f), \"value3\": (ofVec4f)}\n\n\nofColor_<Type>: {\"r\": (Type), \"g\": (Type), \"b\": (Type), \"a\": (Type)}\n\n\nstd::vector<Type>, std::deque<Type>, std::array<Type> : [(Type) ...]\n\n\nstd::map<std::string, Type>: {key: (Type)}\n\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059.\n\n\u6700\u5f8c\u306b\n\u307e\u3060\u66f8\u304d\u59cb\u3081\u305f\u3070\u304b\u308a\u306a\u306e\u3067\u6b32\u3057\u3044\u6a5f\u80fd\u304c\u3042\u3063\u305f\u5834\u5408\u306fissue\u7acb\u3066\u3066\u3082\u3089\u3048\u308b\u3068\u6709\u96e3\u3044\u3067\u3059.\n\u3082\u3061\u308d\u3093, \u6a5f\u80fd\u8ffd\u52a0\u3084\u30d0\u30b0\u30d5\u30a3\u30af\u30b9\u306ePR\u3082\u304a\u5f85\u3061\u3057\u3066\u304a\u308a\u307e\u3059.\n\u4ee5\u4e0a, \u5ba3\u4f1d\u3067\u3057\u305f.\n\u624b\u524d\u5473\u564c\u3067\u3059\u304c, \u6700\u8fd1[ofxJsonUtils](https://github.com/2bbb/ofxJsonUtils)\u3068\u3044\u3046addon\u3092\u66f8\u3044\u3066\u307e\u3057\u3066, \u305d\u308c\u306e\u7d39\u4ecb.\n\n\n## ofxJsonUtils\u3068\u306f\n\n\u4eca\u5f8cofxXmlSetting\u304c\u7121\u304f\u306a\u3063\u3066ofXml\u306b\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3053\u308c\u304c\u307e\u305f\u975e\u5e38\u306b\u4f7f\u3044\u3065\u3089\u3044.\n\u305d\u3082\u305d\u3082XML\u306e\u9589\u3058\u30bf\u30b0\u304c\u5acc\u3044\u3060\u3057js\u5927\u597d\u304d\u52e2\u3068\u3057\u3066\u306fjson\u6700\u9ad8\u3063\u3066\u8a00\u3044\u305f\u3044.\n\u3067\u3082of\u306eaddon\u3067json\u306e\u6c7a\u5b9a\u6253\u304c\u306a\u304b\u306a\u304b\u51fa\u306a\u3044\u306e\u3067\u3059\u304c, \u591a\u52060.10.0\u304b\u3089[nlohmann/json](nlohmann json)\u3068\u3044\u3046C++11\u306a\u30e2\u30c0\u30f3\u306ajson\u30e9\u30a4\u30d6\u30e9\u30ea\u304cusing ofJson = nlohmann::json; \u3068\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059.\n\n\u3067, \u305d\u308c\u3092\u5148\u53d6\u308a\u3057\u3066ofxJsonUtils\u3068\u3044\u3046\u306e\u3092\u66f8\u3044\u3066\u307e\u3057\u3066, nlohmann::json\u304c\u7121\u3044\u5834\u5408\u306fofJson\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u308a\u3068\u304b\u3057\u3066\u4eca\u5f8c\u3082\u4e92\u63db\u6027\u3092\u4fdd\u3066\u308bjson\u4f7f\u3044\u304c\u51fa\u6765\u308b, \u3068.\n\n\u305d\u3093\u3067, nlohmann::json \u306f\u306a\u304b\u306a\u304b\u30a4\u30b1\u3066\u308b\u3093\u3067\u3059\u304c\u75d2\u3044\u3068\u3053\u308d\u306b\u624b\u304c\u5c4a\u304b\u306a\u3044\u306e\u3067\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u7684\u306a\u306e\u3082\u66f8\u3044\u3066\u3044\u308b\u72b6\u6cc1\u3067\u3059.\n\n### ofxJsonUtils::loadFromFile\n\n\u6bce\u56de\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u8fbc\u3093\u3067\u30d1\u30fc\u30b9\u3057\u3066\u3063\u3066\u3044\u3046\u6570\u884c\u306e\u3053\u3068\u3067\u3059\u304c, \u5927\u4f53\u5b9a\u578b\u6587\u306a\u306e\u3067\u95a2\u6570\u306b\u3057\u3066\u307e\u3059.\n\n```cpp\n  ofJson json = ofxJsonUtils::loadFromFile(\"hoge.json\");\n```\n\n### toJson, loadJson\n\n\u4f8b\u3048\u3070, \n\n```cpp\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n};\n```\n\n\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9/\u69cb\u9020\u4f53\u3092json\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306b\n\n```cpp\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n  ofJson toJson() const {\n    ofJson json;\n    json[\"point\"] = ofxJsonUtils::convert(point);\n    json[\"raidus\"] = radius;\n    return json;\n  }\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils::parse(json[\"point\"], point);\n    ofxJsonUtils::parse(json[\"radius\"], radius);\n  }\n};\n```\n\n\u3068 `toJson`, `loadJson` \u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3068\u4eca\u5ea6\u306f\n\n```cpp\nstruct other_struct {\n  std::vector<my_struct> objs;\n  ofJson toJson() const {\n    ofJson json;\n    json[\"objs\"] = ofxJsonUtils::convert(objs);\n    return json;\n  };\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils::parse(json[\"objs\"], objs);\n  }\n};\n```\n\n\u3068\u518d\u5e30\u7684\u306b\u4f7f\u3063\u3066\u3044\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059.\n\n\u65e2\u306b\u5b58\u5728\u3059\u308b\u81ea\u5206\u304c\u624b\u3092\u5165\u308c\u308c\u306a\u3044\u30af\u30e9\u30b9\u306b\u95a2\u3057\u3066\u3082\n\n```cpp\n\nstruct not_my_struct { ... };\n\nofJson convert(const not_my_struct &value) {\n  return {\n    {\"x\", value.x},\n    {\"y\", value.y}\n  };\n}\n\nvoid parse(const ofJson &json, not_my_struct &value) {\n  value.x = json[\"x\"];\n  value.y = json[\"y\"];\n}\n\n```\n\n\u3068\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5916\u90e8\u304b\u3089\u3067\u3082\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059.\n\n### `ofxJsonify`\n\n\u307e\u305f, `ofxJsonify` \u3068\u3044\u3046template\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3068\n\n```cpp\n  struct other_struct : public ofxJsonify<other_struct> {\n    std::vector<my_struct> objs;\n    ofJson toJson() const {\n      ofJson json;\n      json[\"objs\"] = ofxJsonUtils::convert(objs);\n      return json;\n    };\n    void loadJson(const ofJson &json) {\n      ofxJsonUtils::parse(json[\"objs\"], objs);\n    }\n  }\n```\n\n\u3068\u3059\u308b\u3060\u3051\u3067\n\n```cpp\n  other_struct s;\n  s.loadFromJsonFile(\"hoge.json\");\n  s.loadFromJsonString(\"{\\\"objs\\\":[]}\");\n\n  s.writeToJsonFile(\"bar.json\");\n  std::string str = s.toJsonString();\n\n  ofJson json = s;\n```\n\n\u3068\u3044\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u66f8\u304d\u8fbc\u307f/\u8aad\u307f\u8fbc\u307f, \u6587\u5b57\u5217\u306e\u66f8\u304d\u51fa\u3057/\u8aad\u307f\u8fbc\u307f, \u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u88cf\u3067\u5b9f\u88c5\u3057\u3066\u304f\u308c\u307e\u3059.\n\n### `create`, `load`\n\n\u6700\u521d\u306e\u4f8b\u306e\n\n```cpp\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n  ofJson toJson() const {\n    ofJson json;\n    json[\"point\"] = ofxJsonUtils::convert(point);\n    json[\"raidus\"] = radius;\n    return json;\n  }\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils::parse(json[\"point\"], point);\n    ofxJsonUtils::parse(json[\"radius\"], radius);\n  }\n};\n```\n\n\u306f, `create` / `load` \u3092\u4f7f\u3046\u3068\u6b21\u306e\u3088\u3046\u306b\u3082\u66f8\u3051\u307e\u3059.\n\n```cpp\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n  ofJson toJson() const {\n    return ofxJsonUtils::create(\"point\", point, \"radius\", radius);\n  }\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils::load(json, \"point\", point, \"radius\", radius);\n  }\n};\n```\n\n\u66f4\u306b, `kv` \u30de\u30af\u30ed\u3092\u4f7f\u3046\u3068\n\n```cpp\nstruct my_struct {\n  ofVec3f point;\n  int radius;\n  ofJson toJson() const {\n    return ofxJsonUtils::create(kv(point), kv(radius));\n  }\n  void loadJson(const ofJson &json) {\n    ofxJsonUtils ::load(json, kv(point), kv(radius));\n  }\n};\n```\n\n\u3068\u66f8\u3051\u307e\u3059.\n\n### oF\u30af\u30e9\u30b9\u306e\u5bfe\u5fdc\u72b6\u6cc1\n\n\u73fe\u72b6\u306f\n\n* `ofVec2f`: `{\"x\": 0.0, \"y\": 0.0}`\n* `ofVec3f`: `{\"x\": 0.0, \"y\": 0.0, \"z\": 0.0}`\n* `ofVec4f`: `{\"x\": 0.0, \"y\": 0.0, \"z\": 0.0, \"w\": 0.0}`\n* `ofRectangle`: `{\"x\": 0.0, \"y\": 0.0, \"width\": 0.0, \"height\": 0.0}`\n* `ofMatrix4x4`: `{\"value0\": (ofVec4f), \"value1\": (ofVec4f), \"value2\": (ofVec4f), \"value3\": (ofVec4f)}`\n* `ofColor_<Type>`: `{\"r\": (Type), \"g\": (Type), \"b\": (Type), \"a\": (Type)}`\n* `std::vector<Type>`, `std::deque<Type>`, `std::array<Type>` : `[(Type) ...]`\n* `std::map<std::string, Type>`: `{key: (Type)}`\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059.\n\n### \u6700\u5f8c\u306b\n\n\u307e\u3060\u66f8\u304d\u59cb\u3081\u305f\u3070\u304b\u308a\u306a\u306e\u3067\u6b32\u3057\u3044\u6a5f\u80fd\u304c\u3042\u3063\u305f\u5834\u5408\u306fissue\u7acb\u3066\u3066\u3082\u3089\u3048\u308b\u3068\u6709\u96e3\u3044\u3067\u3059.\n\u3082\u3061\u308d\u3093, \u6a5f\u80fd\u8ffd\u52a0\u3084\u30d0\u30b0\u30d5\u30a3\u30af\u30b9\u306ePR\u3082\u304a\u5f85\u3061\u3057\u3066\u304a\u308a\u307e\u3059.\n\n\u4ee5\u4e0a, \u5ba3\u4f1d\u3067\u3057\u305f.\n", "tags": ["openFrameworks", "addon", "C++"]}