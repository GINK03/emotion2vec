{"context": "\n\nFortran 2003 \u3067\u306e BMP \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u30eb\u30fc\u30c1\u30f3\n24bit BMP \u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u51fa\u529b\u3057\u307e\u3059\u3002\u753b\u50cf\u306e X \u65b9\u5411\uff08\u6a2a\u65b9\u5411\uff09\u30b5\u30a4\u30ba\u304c 4 \u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5404\u884c\u3054\u3068\u306e\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u6570\u304c 4 \u306e\u500d\u6570\u306b\u306a\u308b\u3088\u3046\u306b\u3001BMP \u30d5\u30a1\u30a4\u30eb\u306e\u5404\u884c\u672b\u3092 0 \u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3053\u306e\u30d0\u30a4\u30c8\u6570\u306f\u753b\u50cf\u306e X \u65b9\u5411\u30b5\u30a4\u30ba\u3092 4 \u3067\u5272\u3063\u305f\u4f59\u308a\u306b\u306a\u308a\u307e\u3059\u3002\nparametrized derived type \u3092\u7528\u3044\u308b\u3068\u3001\u52d5\u7684\u306b\u6d3e\u751f\u578b\u5185\u90e8\u306e\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u5909\u3048\u3089\u308c\u306a\u3044\u306e\u3067\uff08\u591a\u5206\uff09\u3001\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u306e\u6642\u306b\u56f0\u96e3\u304c\u751f\u3058\u307e\u3059\u3002\u3053\u3053\u3067\u306f allocatable \u578b\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n(\u9593\u9055\u3063\u3066\u3044\u305f\u306e\u3067\u8ffd\u8a18\uff1a\u6b63\u78ba\u306b\u306fparametrized derived type\u3082allocatable \u5c5e\u6027\u3092\u3064\u3051\u3066\u52d5\u7684\u306b\u78ba\u4fdd\u3067\u304d\u307e\u3059\u3002\u554f\u984c\u306f OO \u306e derived type \u3068\u3059\u308b\u5834\u5408\u3001\u5c5e\u6027\u3092 allocatable \u3084 pointer \u578b\u306b\u51fa\u6765\u306a\u3044\u3053\u3068\u3067\u3057\u305f\u3002)\nFortran2003 \u306e OO \u6a5f\u80fd\u3092\u7528\u3044\u3066\u3001\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3092\u6d3e\u751f\u578b\u306b\u5f93\u5c5e\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\u6a2a\u65b9\u5411\u30b5\u30a4\u30ba\u304c 4 \u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u306a\u3044 24bit BMP \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u5225\u306e 24bit BMP \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002\n\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u540d: precure.bmp\n\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d: reverse.bmp\n\u5165\u529b\u753b\u50cf\u3000\u9b54\u6cd5\u3064\u304b\u3044\u30d7\u30ea\u30ad\u30e5\u30a2\uff01\u7b2c\uff11\uff12\u8a71\u3088\u308a\n\n\u51fa\u529b\u753b\u50cf\u3000\uff08\u53cd\u8ee2\uff09\n\n\uff08\u306a\u304a Qiita \u3067\u306f BMP \u30d5\u30a1\u30a4\u30eb\u3092\u305d\u306e\u307e\u307e upload \u3067\u304d\u307e\u305b\u3093\u3002\uff09\n\n\u30bd\u30fc\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\n\u3042\u307e\u308a\u30c6\u30b9\u30c8\u3057\u3066\u307e\u305b\u3093\uff57\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      !\n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header\n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r\n      end type t_rgb \n      type :: t_bmp\n        type (t_rgb), allocatable :: rgb(:, :)\n      contains \n        procedure :: init => init_bmp\n        procedure :: wr => wr_bmp\n        procedure :: rd => rd_bmp\n      end type  \n    contains   \n      subroutine init_bmp(bmp, nx, ny)\n        class (t_bmp), intent(in out) :: bmp\n        integer, intent(in) :: nx, ny\n        allocate(bmp%rgb(nx, ny))\n      end subroutine init_bmp\n\n      subroutine wr_bmp(bmp, fn)\n        class (t_bmp), intent(in) :: bmp\n        character (len = *), intent(in) :: fn\n        type (t_bmp_file_header) :: bmp_file_header\n        type (t_bmp_info_header) :: bmp_info_header\n        integer :: i, j\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + (3 * nx + mod(nx, 4)) * ny\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = (3 * nx + mod(nx, 4)) * ny\n          open(9, file = fn//'.bmp', access = 'stream', status = 'unknown')\n          write(9) bmp_file_header\n          write(9) bmp_info_header\n          write(9) (bmp%rgb(:, i), (achar(0), j = 1, mod(nx, 4)), i = 1, ny)\n          close(9)\n        end associate\n      end subroutine wr_bmp\n\n      subroutine rd_bmp(bmp, fn)\n        class (t_bmp), intent(out) :: bmp\n        character (len = *), intent(in) :: fn\n        type (t_bmp_file_header) :: bmp_file_header\n        type (t_bmp_info_header) :: bmp_info_header\n        integer :: i, j\n        character :: dummy\n        associate(nx => bmp_info_header%biWidth, ny => bmp_info_header%biHeight)\n          open(10, file = fn//'.bmp', access = 'stream', status = 'old')\n          read(10) bmp_file_header\n          read(10) bmp_info_header\n          allocate(bmp%rgb(nx, ny))\n          read(10) (bmp%rgb(:, i), (dummy, j = 1, mod(nx, 4)), i = 1, ny)\n          close(10)\n        end associate  \n      end subroutine rd_bmp\n    end module m_bmp\n\n    program bmp_RW\n      use m_bmp\n      implicit none\n      type (t_bmp) :: pic0, pic1\n      call pic0%rd('precure')\n      allocate(pic1%rgb, mold = pic0%rgb)\n      pic1%rgb = pic0%rgb(size(pic0%rgb, 1):1:-1, :) ! reverse\n      call pic1%wr('reverse')\n    end program bmp_RW\n\n#Fortran 2003 \u3067\u306e BMP \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u30eb\u30fc\u30c1\u30f3\n24bit BMP \u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u51fa\u529b\u3057\u307e\u3059\u3002\u753b\u50cf\u306e X \u65b9\u5411\uff08\u6a2a\u65b9\u5411\uff09\u30b5\u30a4\u30ba\u304c 4 \u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5404\u884c\u3054\u3068\u306e\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u6570\u304c 4 \u306e\u500d\u6570\u306b\u306a\u308b\u3088\u3046\u306b\u3001BMP \u30d5\u30a1\u30a4\u30eb\u306e\u5404\u884c\u672b\u3092 0 \u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3053\u306e\u30d0\u30a4\u30c8\u6570\u306f\u753b\u50cf\u306e X \u65b9\u5411\u30b5\u30a4\u30ba\u3092 4 \u3067\u5272\u3063\u305f\u4f59\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\nparametrized derived type \u3092\u7528\u3044\u308b\u3068\u3001\u52d5\u7684\u306b\u6d3e\u751f\u578b\u5185\u90e8\u306e\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u5909\u3048\u3089\u308c\u306a\u3044\u306e\u3067\uff08\u591a\u5206\uff09\u3001\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u306e\u6642\u306b\u56f0\u96e3\u304c\u751f\u3058\u307e\u3059\u3002\u3053\u3053\u3067\u306f allocatable \u578b\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n(\u9593\u9055\u3063\u3066\u3044\u305f\u306e\u3067\u8ffd\u8a18\uff1a\u6b63\u78ba\u306b\u306fparametrized derived type\u3082allocatable \u5c5e\u6027\u3092\u3064\u3051\u3066\u52d5\u7684\u306b\u78ba\u4fdd\u3067\u304d\u307e\u3059\u3002\u554f\u984c\u306f OO \u306e derived type \u3068\u3059\u308b\u5834\u5408\u3001\u5c5e\u6027\u3092 allocatable \u3084 pointer \u578b\u306b\u51fa\u6765\u306a\u3044\u3053\u3068\u3067\u3057\u305f\u3002)\n\nFortran2003 \u306e OO \u6a5f\u80fd\u3092\u7528\u3044\u3066\u3001\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3092\u6d3e\u751f\u578b\u306b\u5f93\u5c5e\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\n##\u5b9f\u884c\u7d50\u679c\n\u6a2a\u65b9\u5411\u30b5\u30a4\u30ba\u304c 4 \u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u306a\u3044 24bit BMP \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u5225\u306e 24bit BMP \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002\n\n\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u540d: precure.bmp\n\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d: reverse.bmp\n\n\u5165\u529b\u753b\u50cf\u3000\u9b54\u6cd5\u3064\u304b\u3044\u30d7\u30ea\u30ad\u30e5\u30a2\uff01\u7b2c\uff11\uff12\u8a71\u3088\u308a\n![precure.png](https://qiita-image-store.s3.amazonaws.com/0/44522/1a28f53c-a415-4863-5714-558d2bcf9dea.png)\n\u51fa\u529b\u753b\u50cf\u3000\uff08\u53cd\u8ee2\uff09\n![reverse.png](https://qiita-image-store.s3.amazonaws.com/0/44522/6bb7fe74-f9fe-f781-1e8b-1cc381a4190d.png)\n\uff08\u306a\u304a Qiita \u3067\u306f BMP \u30d5\u30a1\u30a4\u30eb\u3092\u305d\u306e\u307e\u307e upload \u3067\u304d\u307e\u305b\u3093\u3002\uff09\n\n##\u30bd\u30fc\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\n\u3042\u307e\u308a\u30c6\u30b9\u30c8\u3057\u3066\u307e\u305b\u3093\uff57\n\n```fortran\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      !\n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header\n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r\n      end type t_rgb \n      type :: t_bmp\n        type (t_rgb), allocatable :: rgb(:, :)\n      contains \n        procedure :: init => init_bmp\n        procedure :: wr => wr_bmp\n        procedure :: rd => rd_bmp\n      end type  \n    contains   \n      subroutine init_bmp(bmp, nx, ny)\n        class (t_bmp), intent(in out) :: bmp\n        integer, intent(in) :: nx, ny\n        allocate(bmp%rgb(nx, ny))\n      end subroutine init_bmp\n       \n      subroutine wr_bmp(bmp, fn)\n        class (t_bmp), intent(in) :: bmp\n        character (len = *), intent(in) :: fn\n        type (t_bmp_file_header) :: bmp_file_header\n        type (t_bmp_info_header) :: bmp_info_header\n        integer :: i, j\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + (3 * nx + mod(nx, 4)) * ny\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = (3 * nx + mod(nx, 4)) * ny\n          open(9, file = fn//'.bmp', access = 'stream', status = 'unknown')\n          write(9) bmp_file_header\n          write(9) bmp_info_header\n          write(9) (bmp%rgb(:, i), (achar(0), j = 1, mod(nx, 4)), i = 1, ny)\n          close(9)\n        end associate\n      end subroutine wr_bmp\n      \n      subroutine rd_bmp(bmp, fn)\n        class (t_bmp), intent(out) :: bmp\n        character (len = *), intent(in) :: fn\n        type (t_bmp_file_header) :: bmp_file_header\n        type (t_bmp_info_header) :: bmp_info_header\n        integer :: i, j\n        character :: dummy\n        associate(nx => bmp_info_header%biWidth, ny => bmp_info_header%biHeight)\n          open(10, file = fn//'.bmp', access = 'stream', status = 'old')\n          read(10) bmp_file_header\n          read(10) bmp_info_header\n          allocate(bmp%rgb(nx, ny))\n          read(10) (bmp%rgb(:, i), (dummy, j = 1, mod(nx, 4)), i = 1, ny)\n          close(10)\n        end associate  \n      end subroutine rd_bmp\n    end module m_bmp\n    \n    program bmp_RW\n      use m_bmp\n      implicit none\n      type (t_bmp) :: pic0, pic1\n      call pic0%rd('precure')\n      allocate(pic1%rgb, mold = pic0%rgb)\n      pic1%rgb = pic0%rgb(size(pic0%rgb, 1):1:-1, :) ! reverse\n      call pic1%wr('reverse')\n    end program bmp_RW\n```\n", "tags": ["Fortran", "\u30d7\u30ea\u30ad\u30e5\u30a2", "Fortran2003"]}