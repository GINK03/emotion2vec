{"context": "\u3057\u3070\u3089\u304f\u524d\u306b\u300c\u6574\u6570\u578b\u306e\u5927\u304d\u3055\u3067\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u65b9\u6cd5\u300d\u3068\u3044\u3046\u8868\u984c\u3067\u8a18\u4e8b\u304c\u6295\u7a3f\u3055\u308c\u307e\u3057\u305f\u3002 \u3053\u308c\u306f\u8208\u5473\u6df1\u3044\u8a71\u984c\u3067\u3059\u3002 \u540c\u3058\u5927\u304d\u3055\u3067\u540c\u3058\u7b26\u53f7\u306e\u6574\u6570\u578b\u306f\u6df7\u540c\u3057\u3066\u3082 (C/C++ \u306e\u4e16\u754c\u3067\u306f) \u304a\u304a\u3088\u305d\u554f\u984c\u306a\u3044\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u578b\u6a5f\u69cb\u306e\u4e0b(\u3082\u3068)\u3067\u306f\u533a\u5225\u3055\u308c\u3066\u3057\u307e\u307e\u3059\u3002 \u305d\u308c\u3092\u3042\u3089\u305f\u3081\u3066\u540c\u3058\u3088\u3046\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u5c4b\u4e0a\u5c4b(\u304a\u304f\u3058\u3087\u3046\u304a\u304f)\u3092\u67b6(\u304b)\u3059\u3088\u3046\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u578b\u6a5f\u69cb\u306b\u4fdd\u8b77\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3068\u306e\u4e8c\u5f8b\u80cc\u53cd\u3067\u3042\u308a\u3001 C++ \u3089\u3057\u3055\u3092\u8c61\u5fb4\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u3082\u601d\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001\u5143\u8a18\u4e8b\u3067\u306f\u9577\u304f\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u30de\u30af\u30ed\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3042\u3048\u3066 C++ \u3089\u3057\u304f\u66f8\u304f\u3068\u3059\u308c\u3070\u3069\u3046\u3042\u308b\u3079\u304d\u306a\u306e\u3060\u308d\u3046\u3068 SFINAE \u306e\u7df4\u7fd2\u3092\u517c\u306d\u3066\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nconversion_rank_traits.h\n// -*- mode: c++ -*-\n#ifndef HEADER_1301cf13c7f0041bbbbb364e6d8094c7\n#define HEADER_1301cf13c7f0041bbbbb364e6d8094c7\n\n#include <type_traits>\n\ntemplate<bool> class is_true;\ntemplate<> class is_true<true> : public std::true_type {};\ntemplate<> class is_true<false> : public std::false_type {};\n\ntemplate<class T, class U>\nusing is_same_size = is_true<sizeof(T)==sizeof(U)>;\n\ntemplate<class T, class U>\nusing is_same_signed =\n  is_true<std::is_signed<T>::value==std::is_signed<U>::value>;\n\ntemplate<class T, class U>\nusing is_same_rank_integral =\n  is_true<std::is_integral<T>::value\n          && std::is_integral<U>::value\n          && is_same_size<T,U>::value\n          && is_same_signed<T,U>::value>;\n\ntemplate<class T, class U, class V=void>\nusing enable_if_same_rank_integral =\n  typename std::enable_if<is_same_rank_integral<T, U>::value, V>;\n\n#endif\n\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\nsample.cpp\n#include <iostream>\n#include \"conversion_rank_traits.h\"\n\n#ifdef __WIN32__\n#include <windows.h>\n#else\ntypedef unsigned long DWORD;\n#endif\n\ntemplate<class T>\ntypename enable_if_same_rank_integral<std::uint8_t, T>::type f(T) {\n  std::cout << \"uint8_t\\n\";\n}\n\ntemplate<class T>\ntypename enable_if_same_rank_integral<std::uint16_t, T>::type f(T) {\n  std::cout << \"uint16_t\\n\";\n}\n\ntemplate<class T>\ntypename enable_if_same_rank_integral<std::uint32_t, T>::type f(T) {\n  std::cout << \"uint32_t\\n\";\n}\n\ntemplate<class T>\ntypename enable_if_same_rank_integral<std::uint64_t, T>::type f(T) {\n  std::cout << \"uint64_t\\n\";\n}\n\nint main(void) {\n  DWORD x = 12345;\n  f(x);\n  return 0;\n}\n\n\nC++ \u306e\u4e00\u822c\u7684\u306a\u4f5c\u6cd5\u306b\u5247(\u306e\u3063\u3068)\u308d\u3046\u3068\u3059\u308b\u3068\u3069\u3046\u3057\u3066\u3082\u5197\u9577\u306b\u306a\u3089\u3056\u308b\u3092\u5f97\u306a\u3044\u3088\u3046\u3067\u3059\u3002 \u5197\u9577\u3067\u3042\u308b\u304b\u308f\u308a\u306b\u3001\u5c0f\u3055\u3044\u5358\u4f4d\u3067\u540d\u524d\u3092\u4ed8\u3051\u306a\u304c\u3089\u6bb5\u968e\u7684\u306a\u69cb\u7bc9\u3092\u3057\u3084\u3059\u3044\u3068\u3044\u3046\u5229\u70b9\u3082\u3042\u308a\u307e\u3059\u3002 \u5b8c\u6210\u5f62\u304c\u660e\u78ba\u306b\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u4e00\u6c17\u306b\u66f8\u3044\u3066\u3057\u307e\u3063\u3066\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u8a66\u884c\u932f\u8aa4\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u306f\u5fc5\u8981\u305d\u3046\u306a\u90e8\u54c1\u3092\u5f90\u3005\u306b\u4f5c\u3063\u3066\u3044\u3063\u305f\u65b9\u304c\u3084\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u611f\u3058\u307e\u3057\u305f\u3002\n\u3057\u3070\u3089\u304f\u524d\u306b\u300c[\u6574\u6570\u578b\u306e\u5927\u304d\u3055\u3067\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u65b9\u6cd5](http://qiita.com/Chironian/items/128e480d0ef8cfcbb00e)\u300d\u3068\u3044\u3046\u8868\u984c\u3067\u8a18\u4e8b\u304c\u6295\u7a3f\u3055\u308c\u307e\u3057\u305f\u3002 \u3053\u308c\u306f\u8208\u5473\u6df1\u3044\u8a71\u984c\u3067\u3059\u3002 \u540c\u3058\u5927\u304d\u3055\u3067\u540c\u3058\u7b26\u53f7\u306e\u6574\u6570\u578b\u306f\u6df7\u540c\u3057\u3066\u3082 (C/C++ \u306e\u4e16\u754c\u3067\u306f) \u304a\u304a\u3088\u305d\u554f\u984c\u306a\u3044\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u578b\u6a5f\u69cb\u306e<ruby>\u4e0b<rp>(</rp><rt>\u3082\u3068</rt><rp>)</rp></ruby>\u3067\u306f\u533a\u5225\u3055\u308c\u3066\u3057\u307e\u307e\u3059\u3002 \u305d\u308c\u3092\u3042\u3089\u305f\u3081\u3066\u540c\u3058\u3088\u3046\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3046\u306e\u306f<ruby>\u5c4b\u4e0a\u5c4b<rp>(</rp><rt>\u304a\u304f\u3058\u3087\u3046\u304a\u304f</rt><rp>)</rp></ruby>\u3092<ruby>\u67b6<rp>(</rp><rt>\u304b</rt><rp>)</rp></ruby>\u3059\u3088\u3046\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u578b\u6a5f\u69cb\u306b\u4fdd\u8b77\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3068\u306e\u4e8c\u5f8b\u80cc\u53cd\u3067\u3042\u308a\u3001 C++ \u3089\u3057\u3055\u3092\u8c61\u5fb4\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u3082\u601d\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u5143\u8a18\u4e8b\u3067\u306f\u9577\u304f\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u30de\u30af\u30ed\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3042\u3048\u3066 C++ \u3089\u3057\u304f\u66f8\u304f\u3068\u3059\u308c\u3070\u3069\u3046\u3042\u308b\u3079\u304d\u306a\u306e\u3060\u308d\u3046\u3068 SFINAE \u306e\u7df4\u7fd2\u3092\u517c\u306d\u3066\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n```cpp:conversion_rank_traits.h\n// -*- mode: c++ -*-\n#ifndef HEADER_1301cf13c7f0041bbbbb364e6d8094c7\n#define HEADER_1301cf13c7f0041bbbbb364e6d8094c7\n\n#include <type_traits>\n\ntemplate<bool> class is_true;\ntemplate<> class is_true<true> : public std::true_type {};\ntemplate<> class is_true<false> : public std::false_type {};\n\ntemplate<class T, class U>\nusing is_same_size = is_true<sizeof(T)==sizeof(U)>;\n\ntemplate<class T, class U>\nusing is_same_signed =\n  is_true<std::is_signed<T>::value==std::is_signed<U>::value>;\n\ntemplate<class T, class U>\nusing is_same_rank_integral =\n  is_true<std::is_integral<T>::value\n          && std::is_integral<U>::value\n          && is_same_size<T,U>::value\n          && is_same_signed<T,U>::value>;\n\ntemplate<class T, class U, class V=void>\nusing enable_if_same_rank_integral =\n  typename std::enable_if<is_same_rank_integral<T, U>::value, V>;\n\n#endif\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```cpp:sample.cpp\n#include <iostream>\n#include \"conversion_rank_traits.h\"\n\n#ifdef __WIN32__\n#include <windows.h>\n#else\ntypedef unsigned long DWORD;\n#endif\n\ntemplate<class T>\ntypename enable_if_same_rank_integral<std::uint8_t, T>::type f(T) {\n  std::cout << \"uint8_t\\n\";\n}\n\ntemplate<class T>\ntypename enable_if_same_rank_integral<std::uint16_t, T>::type f(T) {\n  std::cout << \"uint16_t\\n\";\n}\n\ntemplate<class T>\ntypename enable_if_same_rank_integral<std::uint32_t, T>::type f(T) {\n  std::cout << \"uint32_t\\n\";\n}\n\ntemplate<class T>\ntypename enable_if_same_rank_integral<std::uint64_t, T>::type f(T) {\n  std::cout << \"uint64_t\\n\";\n}\n\nint main(void) {\n  DWORD x = 12345;\n  f(x);\n  return 0;\n}\n```\n\nC++ \u306e\u4e00\u822c\u7684\u306a\u4f5c\u6cd5\u306b<ruby>\u5247<rp>(</rp><rt>\u306e\u3063\u3068</rt><rp>)</rp></ruby>\u308d\u3046\u3068\u3059\u308b\u3068\u3069\u3046\u3057\u3066\u3082\u5197\u9577\u306b\u306a\u3089\u3056\u308b\u3092\u5f97\u306a\u3044\u3088\u3046\u3067\u3059\u3002 \u5197\u9577\u3067\u3042\u308b\u304b\u308f\u308a\u306b\u3001\u5c0f\u3055\u3044\u5358\u4f4d\u3067\u540d\u524d\u3092\u4ed8\u3051\u306a\u304c\u3089\u6bb5\u968e\u7684\u306a\u69cb\u7bc9\u3092\u3057\u3084\u3059\u3044\u3068\u3044\u3046\u5229\u70b9\u3082\u3042\u308a\u307e\u3059\u3002 \u5b8c\u6210\u5f62\u304c\u660e\u78ba\u306b\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u4e00\u6c17\u306b\u66f8\u3044\u3066\u3057\u307e\u3063\u3066\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u8a66\u884c\u932f\u8aa4\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u306f\u5fc5\u8981\u305d\u3046\u306a\u90e8\u54c1\u3092\u5f90\u3005\u306b\u4f5c\u3063\u3066\u3044\u3063\u305f\u65b9\u304c\u3084\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u611f\u3058\u307e\u3057\u305f\u3002\n", "tags": ["C++", "C++11"]}