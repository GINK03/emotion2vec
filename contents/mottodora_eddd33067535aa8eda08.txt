{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\n\u306f\u3058\u3081\u307e\u3057\u3066\u3001qiita\u306b\u521d\u6295\u7a3f\u3067\u3059\u3002\u81f3\u3089\u306c\u3068\u3053\u308d\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5927\u4f53\u5206\u985e\u554f\u984c\u3067\u3001\u56de\u5e30\u306e\u4f8b\u304c\u3042\u307e\u308a\u306a\u3044\u306e\u3067\u30c8\u30e9\u30a4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u306f\u307e\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u4e0a\u624b\u306a\u66f8\u304d\u65b9\u3092\u77e5\u308a\u305f\u3044\u306e\u3067\u3001\u6295\u7a3f\u3057\u307e\u3059\u3002\ntheano\u3060\u3068\u540c\u7b49\u306e\u4e8b\u3092\u3059\u308b\u306e\u306b1000\u884c\u4ee5\u4e0a\u66f8\u304d\u307e\u3057\u305f\u304c\u3001chainer\u3060\u306898\u884c\u3067\u3057\u305f\u3002chainer\u306b\u79fb\u884c\u3057\u307e\u3059\u3002\nGPU\u3067\u3082\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3057\u305f\u3002\n\u7d50\u8ad6: chainer\u3059\u3054\u3044\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\nchainer/example/train_mnist.py\u3092\u3061\u3087\u3063\u3068\u5909\u3048\u305f\u3089\u3067\u304d\u307e\u3057\u305f(\u5909\u66f4\u70b9\u306f\u5f8c\u308d\u306b\u6319\u3052\u307e\u3057\u305f)\u3002\n\nGist\u306b\u6319\u3052\u307e\u3057\u305f\u3002\n\n\n\u306f\u307e\u3063\u305f\u7b87\u6240\n\n\u56de\u5e30\u554f\u984c\u306e\u5834\u5408\u3001\u6b63\u89e3\u30c7\u30fc\u30bf\u306eshape\u304c(\u30c7\u30fc\u30bf\u6570,)\u3060\u3068,batchsize\u304c2\u4ee5\u4e0a\u306e\u6642\u306b\u306a\u305c\u304bnumpy\u306ebroadcasting\u304c\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\nreshape\u3067(\u30c7\u30fc\u30bf\u6570,1)\u306b\u3059\u308b\u3068broadcasting\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ntheano\u3067\u3082\u5168\u304f\u540c\u3058\u73fe\u8c61\u304c\u8d77\u3053\u308b\u306e\u3067numpy\u306e\u554f\u984c\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n#target\u306f\u6b63\u89e3\u30c7\u30fc\u30bf\n#mnist.py\u3060\u3068\u2193\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u306b\u306a\u3063\u3066\u3044\u308b \ntarget = diabetes['target'].astype(np.float32) #\u3053\u308c\u3060\u3068\u30df\u30cb\u30d0\u30c3\u30c1\u306e\u6570\u304c2\u4ee5\u4e0a\u3060\u3068\u52d5\u304b\u306a\u3044\n\n\u2191\u3060\u3068\u2193\u306e\u3088\u3046\u306aValueError\u304c\u3067\u307e\u3059(13\u3068\u3044\u3046\u306e\u306fbatchsize)\u3002\nValueError: non-broadcastable output operand with shape (1,30) doesn't match the broadcast shape (13,30)\n\n\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3053\u308c\u3067\u52d5\u304d\u307e\u3057\u305f\u3002\n#reshape\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\ntarget = diabetes['target'].astype(np.float32).reshape(len(diabetes['target']), 1)\n\n\n\u919c\u3044\u304b\u3064\u3001\u76f8\u95a2\u4fc2\u6570\u304c\u8a08\u7b97\u3057\u306b\u304f\u3044\u306a\u3069\u3001\u4e0d\u4fbf\u306a\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u3082\u3046\u5c11\u3057\u3046\u307e\u304f\u66f8\u3051\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\nexample/mnist.py\u304b\u3089\u306e\u5909\u66f4\u70b9\n\n\u74b0\u5883\n\npyenv\nanconda-2.1.0\n\n\nconda update python\u3067python\u306eversion\u30922.7.10\u306b\n\n\nCUDA6.5\n\u5f8c\u306fchainer\u306eRequirements\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\nchainer\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u95a2\u3057\u3066\n\n\u6700\u521d\u306fpip install chainer\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f(6\u670819\u65e5)chainer\u3092\u4f7f\u3063\u3066\u307e\u3057\u305f\u304c\u3001GPU\u4e0a\u3067adadelta\u304c\u52d5\u304d\u307e\u305b\u3093\u3067\u3057\u305f(\u4e00\u6587\u629c\u3051\u3066\u305f)\u3002\ngithub\u4e0a\u3067\u306f\u4fee\u6b63\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3001git clone\u3057\u3066\u3001python setup.py install\npip install chainer-cuda-deps\n\n\n\u5909\u66f4\u70b9\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\nscikit-learn\u306ediabetes\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\u5165\u529b\u30c7\u30fc\u30bf: 10\u6b21\u5143\u3067442\u30b5\u30f3\u30d7\u30eb(\u5c0f\u3055\u3044\u4e0a\u306b\u5c11\u306a\u304f\u3066\u3054\u3081\u3093\u306a\u3055\u3044)\n\n\n\u30e2\u30c7\u30eb\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n\n\n10(input)-30-30-1(output)\n\n\n\nn_units   = 30\nmodel = FunctionSet(l1=F.Linear(10, n_units),                                 \n                    l2=F.Linear(n_units, n_units),\n                    l3=F.Linear(n_units, 1)) \n\n\n\u5b66\u7fd2\u7387\u306e\u8abf\u6574\n\nAdadelta(Adam\u3088\u308a\u3082\u826f\u304b\u3063\u305f)\n\noptimizer = optimizers.AdaDelta(rho=0.9)\n\n\n\u8aa4\u5dee\u95a2\u6570\u3068\u8a55\u4fa1\u624b\u6cd5\n\n\u8aa4\u5dee\u95a2\u6570\u306f(\u30df\u30cb\u30d0\u30c3\u30c1\u5185\u306e)\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\n\n# Neural net architecture\ndef forward(x_data, y_data, train=True):\n    x, t = Variable(x_data), Variable(y_data)\n    h1 = F.dropout(F.relu(model.l1(x)),  train=train)\n    h2 = F.dropout(F.relu(model.l2(h1)), train=train)\n    y  = model.l3(h2)\n    # \u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\u3068\u4e88\u6e2c\u7d50\u679c\u3092\u8fd4\u3059\n    # \u4e88\u6e2c\u7d50\u679c\u3092\u8fd4\u3059\u306e\u306f\u3001\u5f8c\u3067\u4e88\u6e2c\u7d50\u679c\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3059\u308b\u304b\u3089\n    return F.mean_squared_error(y, t), y\n\n\n\u6b63\u89e3\u7387\u306f\u51fa\u305b\u306a\u3044\u306e\u3067\u3001\u5206\u985e\u3068\u540c\u3058\u8a55\u4fa1\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u8aa4\u5dee\u3060\u3051\u3060\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u666e\u901a\u306fR2\u5024\u3092\u5229\u7528\u3059\u308b?\n\u500b\u4eba\u7684\u4e8b\u60c5\u3067\u3001\u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u76f8\u95a2\u4fc2\u6570\u3067\u8a55\u4fa1\u3057\u307e\u3057\u305f\u3002\n\u306f\u307e\u3063\u305f\u7b87\u6240(\u4e0a\u53c2\u7167)\u306e\u305b\u3044\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3059\u308b\u884c\u304c\u8d85\u7d76\u6c5a\u304f\u306a\u308a\u307e\u3059\u3002\n\npearson = np.corrcoef(np.asarray(preds).reshape(len(preds),), np.asarray(y_test).reshape(len(preds),))\n\n\n\u611f\u60f3\n\ntheano\u306b\u6bd4\u3079\u3066\u30c7\u30d0\u30c3\u30b0\u304c\u672c\u5f53\u306b\u697d\u3067\u3057\u305f(theano\u306f\u3069\u3053\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3066\u3044\u308b\u306e\u304b\u672c\u5f53\u308f\u304b\u308a\u306b\u304f\u3044)\u3002\n\u611f\u52d5\u3059\u308b\u30ec\u30d9\u30eb\u3067\u30b3\u30fc\u30c9\u304c\u77ed\u304f\u306a\u308a\u307e\u3057\u305f\u3002\nweight decay\u306f\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u3051\u3069\u3001lasso\u306f\u5b9f\u73fe\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\n#\u6982\u8981\n* \u306f\u3058\u3081\u307e\u3057\u3066\u3001qiita\u306b\u521d\u6295\u7a3f\u3067\u3059\u3002\u81f3\u3089\u306c\u3068\u3053\u308d\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n* \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5927\u4f53\u5206\u985e\u554f\u984c\u3067\u3001\u56de\u5e30\u306e\u4f8b\u304c\u3042\u307e\u308a\u306a\u3044\u306e\u3067\u30c8\u30e9\u30a4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n* \u306f\u307e\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u4e0a\u624b\u306a\u66f8\u304d\u65b9\u3092\u77e5\u308a\u305f\u3044\u306e\u3067\u3001\u6295\u7a3f\u3057\u307e\u3059\u3002\n\n* **theano\u3060\u3068\u540c\u7b49\u306e\u4e8b\u3092\u3059\u308b\u306e\u306b1000\u884c\u4ee5\u4e0a\u66f8\u304d\u307e\u3057\u305f\u304c\u3001chainer\u3060\u306898\u884c\u3067\u3057\u305f\u3002**chainer\u306b\u79fb\u884c\u3057\u307e\u3059\u3002\n* GPU\u3067\u3082\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3057\u305f\u3002\n* _**\u7d50\u8ad6: chainer\u3059\u3054\u3044**_\n\n#\n##\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n* [chainer/example/train_mnist.py](https://github.com/pfnet/chainer/blob/master/examples/mnist/train_mnist.py)\u3092\u3061\u3087\u3063\u3068\u5909\u3048\u305f\u3089\u3067\u304d\u307e\u3057\u305f(\u5909\u66f4\u70b9\u306f\u5f8c\u308d\u306b\u6319\u3052\u307e\u3057\u305f)\u3002\n* [Gist](https://gist.github.com/mottodora/a9c46754cf555a68edb7)\u306b\u6319\u3052\u307e\u3057\u305f\u3002\n\n##\u306f\u307e\u3063\u305f\u7b87\u6240\n\n* \u56de\u5e30\u554f\u984c\u306e\u5834\u5408\u3001\u6b63\u89e3\u30c7\u30fc\u30bf\u306eshape\u304c(\u30c7\u30fc\u30bf\u6570,)\u3060\u3068,batchsize\u304c2\u4ee5\u4e0a\u306e\u6642\u306b\u306a\u305c\u304bnumpy\u306ebroadcasting\u304c\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n* reshape\u3067(\u30c7\u30fc\u30bf\u6570,1)\u306b\u3059\u308b\u3068broadcasting\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n* theano\u3067\u3082\u5168\u304f\u540c\u3058\u73fe\u8c61\u304c\u8d77\u3053\u308b\u306e\u3067numpy\u306e\u554f\u984c\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n```python:\n#target\u306f\u6b63\u89e3\u30c7\u30fc\u30bf\n#mnist.py\u3060\u3068\u2193\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u306b\u306a\u3063\u3066\u3044\u308b \ntarget = diabetes['target'].astype(np.float32) #\u3053\u308c\u3060\u3068\u30df\u30cb\u30d0\u30c3\u30c1\u306e\u6570\u304c2\u4ee5\u4e0a\u3060\u3068\u52d5\u304b\u306a\u3044\n```\n\u2191\u3060\u3068\u2193\u306e\u3088\u3046\u306aValueError\u304c\u3067\u307e\u3059(13\u3068\u3044\u3046\u306e\u306fbatchsize)\u3002\n\n```\nValueError: non-broadcastable output operand with shape (1,30) doesn't match the broadcast shape (13,30)\n```\n\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3053\u308c\u3067\u52d5\u304d\u307e\u3057\u305f\u3002\n\n```python:\n#reshape\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\ntarget = diabetes['target'].astype(np.float32).reshape(len(diabetes['target']), 1)\n```\n\n* \u919c\u3044\u304b\u3064\u3001\u76f8\u95a2\u4fc2\u6570\u304c\u8a08\u7b97\u3057\u306b\u304f\u3044\u306a\u3069\u3001\u4e0d\u4fbf\u306a\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n* \u3082\u3046\u5c11\u3057\u3046\u307e\u304f\u66f8\u3051\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n#example/mnist.py\u304b\u3089\u306e\u5909\u66f4\u70b9\n##\u74b0\u5883\n\n* [pyenv](https://github.com/yyuu/pyenv)\n* anconda-2.1.0\n\t* conda update python\u3067python\u306eversion\u30922.7.10\u306b\n* CUDA6.5\n* \u5f8c\u306f[chainer\u306eRequirements](https://github.com/pfnet/chainer)\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n\n###chainer\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u95a2\u3057\u3066\n* \u6700\u521d\u306fpip install chainer\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f(6\u670819\u65e5)chainer\u3092\u4f7f\u3063\u3066\u307e\u3057\u305f\u304c\u3001GPU\u4e0a\u3067adadelta\u304c\u52d5\u304d\u307e\u305b\u3093\u3067\u3057\u305f(\u4e00\u6587\u629c\u3051\u3066\u305f)\u3002\n* github\u4e0a\u3067\u306f\u4fee\u6b63\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3001git clone\u3057\u3066\u3001python setup.py install\n* pip install chainer-cuda-deps\n\n\n\n\n##\u5909\u66f4\u70b9\n###\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n* scikit-learn\u306e[diabetes\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8](http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html)\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n* \u5165\u529b\u30c7\u30fc\u30bf: 10\u6b21\u5143\u3067442\u30b5\u30f3\u30d7\u30eb(\u5c0f\u3055\u3044\u4e0a\u306b\u5c11\u306a\u304f\u3066\u3054\u3081\u3093\u306a\u3055\u3044)\n\n###\u30e2\u30c7\u30eb\n\n* \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n\t* 10(input)-30-30-1(output)\n\n```python:\nn_units   = 30\nmodel = FunctionSet(l1=F.Linear(10, n_units),                                 \n                    l2=F.Linear(n_units, n_units),\n                    l3=F.Linear(n_units, 1)) \n```\n\n###\u5b66\u7fd2\u7387\u306e\u8abf\u6574\n* Adadelta(Adam\u3088\u308a\u3082\u826f\u304b\u3063\u305f)\n\n```python:\noptimizer = optimizers.AdaDelta(rho=0.9)\n```\n\n###\u8aa4\u5dee\u95a2\u6570\u3068\u8a55\u4fa1\u624b\u6cd5\n* \u8aa4\u5dee\u95a2\u6570\u306f(\u30df\u30cb\u30d0\u30c3\u30c1\u5185\u306e)\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\n\n```python:\n# Neural net architecture\ndef forward(x_data, y_data, train=True):\n    x, t = Variable(x_data), Variable(y_data)\n    h1 = F.dropout(F.relu(model.l1(x)),  train=train)\n    h2 = F.dropout(F.relu(model.l2(h1)), train=train)\n    y  = model.l3(h2)\n    # \u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\u3068\u4e88\u6e2c\u7d50\u679c\u3092\u8fd4\u3059\n    # \u4e88\u6e2c\u7d50\u679c\u3092\u8fd4\u3059\u306e\u306f\u3001\u5f8c\u3067\u4e88\u6e2c\u7d50\u679c\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3059\u308b\u304b\u3089\n    return F.mean_squared_error(y, t), y\n```\n\n* \u6b63\u89e3\u7387\u306f\u51fa\u305b\u306a\u3044\u306e\u3067\u3001\u5206\u985e\u3068\u540c\u3058\u8a55\u4fa1\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n* \u8aa4\u5dee\u3060\u3051\u3060\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u666e\u901a\u306fR<sup>2</sup>\u5024\u3092\u5229\u7528\u3059\u308b?\n* \u500b\u4eba\u7684\u4e8b\u60c5\u3067\u3001\u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u76f8\u95a2\u4fc2\u6570\u3067\u8a55\u4fa1\u3057\u307e\u3057\u305f\u3002\n\n* \u306f\u307e\u3063\u305f\u7b87\u6240(\u4e0a\u53c2\u7167)\u306e\u305b\u3044\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3059\u308b\u884c\u304c\u8d85\u7d76\u6c5a\u304f\u306a\u308a\u307e\u3059\u3002\n\n```python:\npearson = np.corrcoef(np.asarray(preds).reshape(len(preds),), np.asarray(y_test).reshape(len(preds),))\n```\n\n##\u611f\u60f3\n* theano\u306b\u6bd4\u3079\u3066\u30c7\u30d0\u30c3\u30b0\u304c\u672c\u5f53\u306b\u697d\u3067\u3057\u305f(theano\u306f\u3069\u3053\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3066\u3044\u308b\u306e\u304b\u672c\u5f53\u308f\u304b\u308a\u306b\u304f\u3044)\u3002\n* \u611f\u52d5\u3059\u308b\u30ec\u30d9\u30eb\u3067\u30b3\u30fc\u30c9\u304c\u77ed\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n* weight decay\u306f\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u3051\u3069\u3001lasso\u306f\u5b9f\u73fe\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n", "tags": ["Chainer", "Python"]}