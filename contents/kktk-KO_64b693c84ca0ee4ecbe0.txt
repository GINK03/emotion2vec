{"context": " More than 1 year has passed since last update.\u95a2\u6570\u306bstd::initializer_list\u3092\u6e21\u3057\u305f\u6642\u306b\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\u3057\u3066\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u305f\u3044\u4e8b\u304c\u3042\u308b\u3002\n\u5178\u578b\u7684\u306b\u306f\u3001\u7279\u5b9a\u306e\u8981\u7d20\u6570\u306e\u307f\u3092\u53d7\u3051\u53d6\u308a\u305f\u3044\u6642\u306a\u3069\u3002\n\n\u307e\u3061\u304c\u3044\n\u307e\u305a\u3001\u79c1\u304c\u72af\u3057\u305f\u904e\u3061\u306f\nconstexpr void f (std::initializer_list<int> list)\n{\n    static_assert(list.size() == 3, \"\");\u3000// error - list\u306fconstexpr\u3058\u3083\u306a\u3044\n}\n\nint main ()\n{\n    f({1, 2, 3}); // OK\u306b\u306a\u3063\u3066\u307b\u3057\u3044\n    f({1, 2});    // NG\u306b\u306a\u3063\u3066\u307b\u3057\u3044\n}\n\nstd::initializer_list<T>::size()\u306fC++14\u304b\u3089constexpr\u6307\u5b9a\u3055\u308c\u308b\u304c\u3001f\u306e\u5b9a\u7fa9\u5185\u3067\u306f\u3001list\u306fconstexpr\u306b\u898b\u3048\u306a\u3044\u306e\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\nconstexpr\u95a2\u6570\u306fconstexpr\u3067\u306a\u3044\u6587\u8108\u3067\u3082\u547c\u3070\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001constexpr\u95a2\u6570\u5185\u3067\u5f15\u6570\u304cconstexpr\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u3057\u305f\u30b3\u30fc\u30c9\u306f\u66f8\u3051\u306a\u3044\u3002\n\n\u5bfe\u7b56\n\u57fa\u672c\u7684\u306b\u3001initializer list\u306e\u69cb\u6587(brace-init-list)\u3092\u4f7f\u3063\u3066\u95a2\u6570\u306e\u5b9f\u5f15\u6570\u306bstd::initializer_list\u3092\u4f5c\u3063\u3066\u3057\u307e\u3046\u3068\u30b5\u30a4\u30ba\u3092constexpr\u3067\u53d6\u308a\u51fa\u3059\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\u3068\u3053\u308d\u3067\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u306binitializer list\u306e\u69cb\u6587\u3092\u4f7f\u3046\u969b\u306f\u3001\u30ea\u30b9\u30c8\u521d\u671f\u5316\u306e\u65b9\u6cd5\u306b\u3088\u3063\u3066\u5f15\u6570\u304c\u521d\u671f\u5316\u3055\u308c\u308b\u3002\n\u307e\u305f\u3001\u5f15\u6570\u306e\u521d\u671f\u5316\u306e\u9806\u756a\u306f\u672c\u306e\u866b\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3002\n\u91cd\u8981\u306a\u4e8b\u306f\u3001\u5f15\u6570\u304c\u30af\u30e9\u30b9\u3067\u3001initializer list\u304c\u7a7a\u3067\u306a\u304f\u3001\u5f15\u6570\u306e\u578b\u304c\u521d\u671f\u5316\u30ea\u30b9\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u3044\u5834\u5408\u3001initializer list\u306f\u5b9f\u5f15\u6570\u30ea\u30b9\u30c8\u3068\u307f\u306a\u3055\u308c\u3001\u5c55\u958b\u3055\u308c\u308b\u3002\n\u3064\u307e\u308a\n\nstruct foo\n{\n    template <typename ... Args>\n    foo (Args ... args) // \u3053\u308c\u304c\u547c\u3070\u308c\u308b\u3002\n    {\n\n    }\n};\n\nvoid f (foo) {}\n\nint main ()\n{\n    f({1, 2, 3});\n}\n\n\u3068\u306a\u308b\u3002\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001sizeof...(Args)\u3067\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u969b\u306e\u521d\u671f\u5316\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u3092constexpr\u306e\u6587\u8108\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002\n\u305f\u3060\u3057\u3001args\u3092f\u306e\u4e2d\u3067\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u3001foo\u306e\u30e1\u30f3\u30d0\u306b\u6e21\u3059\u3057\u304b\u306a\u3044\u304c\u3001foo\u306e\u30e1\u30f3\u30d0\u306e\u578b\u3092\u6c7a\u3081\u308b\u306e\u306binitializer list\u306e\u30b5\u30a4\u30ba\u3092\u4f7f\u3046\u4e8b\u306f\u3067\u304d\u306a\u3044\u3002\n\u7d50\u5c40\u3001f\u306e\u4e2d\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3092foo\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u59d4\u8b72\u3059\u308b\u3057\u304b\u306a\u3044\u3002\n\u3068\u306a\u308b\u3068\u6700\u7d42\u7684\u306b\u6b21\u306e\u69d8\u306b\u306a\u308b\u3002\n\ntemplate <typename Func, typename ReturnType>\nstruct init_list_proc\n{\n    ReturnType value;\n    template <typename ... Args>\n    constexpr init_list_proc (Args && ... args) { value = Func()(std::forward<Args>(args)...); }\n};\n\nstruct f_impl \n{\n    template <typename ... Args>\n    constexpr int operator() (Args && ... args) noexcept // \u3053\u3053\u306b\u3084\u308a\u305f\u3044\u51e6\u7406\u3092\u66f8\u304f\n    {\n        static_assert(sizeof...(Args) == 3, \"\");\n        return 1;\n    }\n};\n\nint f (init_list_proc<f_impl, int> proc)\n{\n    return proc.value;\n}\n\nint main ()\n{\n    f({1, 2, 3}); //OK\n    f({1, 2}); // NG\n}\n\n\n\u6761\u4ef6\u3067f\u306e\u578b\u3092\u5909\u3048\u305f\u3044\u5834\u5408\u306ff_impl::operator()\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u3066\u3001f\u306e\u65b9\u3082\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308c\u3070\u826f\u3044\u3002\n\u305f\u3060\u3057\u3001\u3053\u308c\u3067\u3082\u307e\u3060\u3001f\u306e\u8fd4\u308a\u5024\u306e\u578b\u3092\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5c0e\u51fa\u3059\u308b\u4e8b\u306f\u3067\u304d\u306a\u3044\u3002\n\u3082\u3063\u3068\u7c21\u5358\u306a\u65b9\u6cd5\u304c\u3042\u308b\u6c17\u3082\u3059\u308b\u3002\n\n\u53c2\u8003\n\u672c\u306e\u866b\ncppreference\n\u95a2\u6570\u306b`std::initializer_list`\u3092\u6e21\u3057\u305f\u6642\u306b\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\u3057\u3066\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u305f\u3044\u4e8b\u304c\u3042\u308b\u3002\n\u5178\u578b\u7684\u306b\u306f\u3001\u7279\u5b9a\u306e\u8981\u7d20\u6570\u306e\u307f\u3092\u53d7\u3051\u53d6\u308a\u305f\u3044\u6642\u306a\u3069\u3002\n\n\u307e\u3061\u304c\u3044\n=======\n\u307e\u305a\u3001\u79c1\u304c\u72af\u3057\u305f\u904e\u3061\u306f\n\n```cpp\nconstexpr void f (std::initializer_list<int> list)\n{\n    static_assert(list.size() == 3, \"\");\u3000// error - list\u306fconstexpr\u3058\u3083\u306a\u3044\n}\n\nint main ()\n{\n    f({1, 2, 3}); // OK\u306b\u306a\u3063\u3066\u307b\u3057\u3044\n    f({1, 2});    // NG\u306b\u306a\u3063\u3066\u307b\u3057\u3044\n}\n```\n\n`std::initializer_list<T>::size()`\u306fC++14\u304b\u3089constexpr\u6307\u5b9a\u3055\u308c\u308b\u304c\u3001f\u306e\u5b9a\u7fa9\u5185\u3067\u306f\u3001list\u306fconstexpr\u306b\u898b\u3048\u306a\u3044\u306e\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\nconstexpr\u95a2\u6570\u306fconstexpr\u3067\u306a\u3044\u6587\u8108\u3067\u3082\u547c\u3070\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001constexpr\u95a2\u6570\u5185\u3067\u5f15\u6570\u304cconstexpr\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u3057\u305f\u30b3\u30fc\u30c9\u306f\u66f8\u3051\u306a\u3044\u3002\n\n\u5bfe\u7b56\n====\n\u57fa\u672c\u7684\u306b\u3001initializer list\u306e\u69cb\u6587(brace-init-list)\u3092\u4f7f\u3063\u3066\u95a2\u6570\u306e\u5b9f\u5f15\u6570\u306b`std::initializer_list`\u3092\u4f5c\u3063\u3066\u3057\u307e\u3046\u3068\u30b5\u30a4\u30ba\u3092constexpr\u3067\u53d6\u308a\u51fa\u3059\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\n\u3068\u3053\u308d\u3067\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u306binitializer list\u306e\u69cb\u6587\u3092\u4f7f\u3046\u969b\u306f\u3001*\u30ea\u30b9\u30c8\u521d\u671f\u5316*\u306e\u65b9\u6cd5\u306b\u3088\u3063\u3066\u5f15\u6570\u304c\u521d\u671f\u5316\u3055\u308c\u308b\u3002\n\u307e\u305f\u3001\u5f15\u6570\u306e\u521d\u671f\u5316\u306e\u9806\u756a\u306f[\u672c\u306e\u866b](http://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml#dcl.init.list)\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3002\n\u91cd\u8981\u306a\u4e8b\u306f\u3001\u5f15\u6570\u304c\u30af\u30e9\u30b9\u3067\u3001initializer list\u304c\u7a7a\u3067\u306a\u304f\u3001\u5f15\u6570\u306e\u578b\u304c\u521d\u671f\u5316\u30ea\u30b9\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u3044\u5834\u5408\u3001initializer list\u306f\u5b9f\u5f15\u6570\u30ea\u30b9\u30c8\u3068\u307f\u306a\u3055\u308c\u3001\u5c55\u958b\u3055\u308c\u308b\u3002\n\n\u3064\u307e\u308a\n\n```cpp\n\nstruct foo\n{\n    template <typename ... Args>\n    foo (Args ... args) // \u3053\u308c\u304c\u547c\u3070\u308c\u308b\u3002\n    {\n\n    }\n};\n\nvoid f (foo) {}\n\nint main ()\n{\n    f({1, 2, 3});\n}\n```\n\n\u3068\u306a\u308b\u3002\n\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001`sizeof...(Args)`\u3067\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u969b\u306e\u521d\u671f\u5316\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u3092constexpr\u306e\u6587\u8108\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\u305f\u3060\u3057\u3001`args`\u3092`f`\u306e\u4e2d\u3067\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u3001`foo`\u306e\u30e1\u30f3\u30d0\u306b\u6e21\u3059\u3057\u304b\u306a\u3044\u304c\u3001`foo`\u306e\u30e1\u30f3\u30d0\u306e\u578b\u3092\u6c7a\u3081\u308b\u306e\u306binitializer list\u306e\u30b5\u30a4\u30ba\u3092\u4f7f\u3046\u4e8b\u306f\u3067\u304d\u306a\u3044\u3002\n\u7d50\u5c40\u3001`f`\u306e\u4e2d\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3092`foo`\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u59d4\u8b72\u3059\u308b\u3057\u304b\u306a\u3044\u3002\n\n\u3068\u306a\u308b\u3068\u6700\u7d42\u7684\u306b\u6b21\u306e\u69d8\u306b\u306a\u308b\u3002\n\n```cpp\n\ntemplate <typename Func, typename ReturnType>\nstruct init_list_proc\n{\n    ReturnType value;\n    template <typename ... Args>\n    constexpr init_list_proc (Args && ... args) { value = Func()(std::forward<Args>(args)...); }\n};\n\nstruct f_impl \n{\n    template <typename ... Args>\n    constexpr int operator() (Args && ... args) noexcept // \u3053\u3053\u306b\u3084\u308a\u305f\u3044\u51e6\u7406\u3092\u66f8\u304f\n    {\n        static_assert(sizeof...(Args) == 3, \"\");\n        return 1;\n    }\n};\n\nint f (init_list_proc<f_impl, int> proc)\n{\n    return proc.value;\n}\n\nint main ()\n{\n    f({1, 2, 3}); //OK\n    f({1, 2}); // NG\n}\n\n```\n\n\u6761\u4ef6\u3067`f`\u306e\u578b\u3092\u5909\u3048\u305f\u3044\u5834\u5408\u306f`f_impl::operator()`\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u3066\u3001`f`\u306e\u65b9\u3082\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308c\u3070\u826f\u3044\u3002\n\u305f\u3060\u3057\u3001\u3053\u308c\u3067\u3082\u307e\u3060\u3001`f`\u306e\u8fd4\u308a\u5024\u306e\u578b\u3092\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5c0e\u51fa\u3059\u308b\u4e8b\u306f\u3067\u304d\u306a\u3044\u3002\n\n\u3082\u3063\u3068\u7c21\u5358\u306a\u65b9\u6cd5\u304c\u3042\u308b\u6c17\u3082\u3059\u308b\u3002\n\n\u53c2\u8003\n===\n[\u672c\u306e\u866b](http://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml#dcl.init.list)\n[cppreference](http://en.cppreference.com/w/cpp/language/list_initialization)\n", "tags": ["C++", "C++14"]}