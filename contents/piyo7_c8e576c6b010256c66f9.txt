{"context": " More than 1 year has passed since last update.\u6b63\u683c\u8a55\u4fa1\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u8a00\u8a9e\u3067\u3001\u305f\u3068\u3048\u3070\u5927\u304d\u306a\u30d9\u30af\u30c8\u30eb\u306e\u6f14\u7b97\u3092\u884c\u3046\u5834\u5408\u306b\u3001\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u30b3\u30b9\u30c8\u304c\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u3002\u53ef\u8aad\u6027\u3092\u4fdd\u3063\u305f\u307e\u307e\u3001\u305d\u306e\u3088\u3046\u306a\u30b3\u30b9\u30c8\u3092\u56de\u907f\u3057\u3066\u9ad8\u901f\u5316\u3057\u305f\u3044\u3002\n\n[C++] Expression Template\nExpression Template - Faith and Brave - C++\u3067\u904a\u307c\u3046\n\u578b\u306b\u6f14\u7b97\u60c5\u5831\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u8981\u7d20\u3054\u3068\u306e\u9045\u5ef6\u8a55\u4fa1\u3092\u5b9f\u73fe\u3059\u308b\u3002\n\n[Scala] View\nCollections - \u30d3\u30e5\u30fc - Scala Documentation\nscala> Seq(1, 2, 3).view.map(_ + 1).map(_ * 2)\nres0: scala.collection.SeqView[Int,Seq[_]] = SeqViewMM(...)\n\nscala> res0.force\nres1: Seq[Int] = List(4, 6, 8)\n\ntoString()\u306e\u8fd4\u308a\u5024\u3067\u3042\u308bSeqViewMM(...)\u306f\u3001map\u3092\u4e8c\u56de\u884c\u3046SeqView\u3068\u3044\u3046\u610f\u5473\u3002\u6f14\u7b97\u305d\u306e\u3082\u306e\u3092\u95a2\u6570\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u3044\u308b\u306e\u304cExpression Template\u3068\u306e\u9055\u3044\u3002\u3053\u306e\u5b9f\u88c5\u306e\u5927\u672c\u306fTraversableViewLike\u306b\u3042\u3063\u3066\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n  override def map[B, That](f: A => B)(implicit bf: CanBuildFrom[This, B, That]): That = {\n    newMapped(f).asInstanceOf[That]\n  }\n\n  protected def newMapped[B](f: A => B): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with Mapped[B]\n\n  trait Mapped[B] extends Transformed[B] {\n    protected[this] val mapping: A => B\n    def foreach[U](f: B => U) {\n      for (x <- self)\n        f(mapping(x))\n    }\n    final override protected[this] def viewIdentifier = \"M\"\n  }\n\n\u6b63\u683c\u8a55\u4fa1\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u8a00\u8a9e\u3067\u3001\u305f\u3068\u3048\u3070\u5927\u304d\u306a\u30d9\u30af\u30c8\u30eb\u306e\u6f14\u7b97\u3092\u884c\u3046\u5834\u5408\u306b\u3001\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u30b3\u30b9\u30c8\u304c\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u3002\u53ef\u8aad\u6027\u3092\u4fdd\u3063\u305f\u307e\u307e\u3001\u305d\u306e\u3088\u3046\u306a\u30b3\u30b9\u30c8\u3092\u56de\u907f\u3057\u3066\u9ad8\u901f\u5316\u3057\u305f\u3044\u3002\n\n# [C++] Expression Template\n\n[Expression Template - Faith and Brave - C++\u3067\u904a\u307c\u3046](http://faithandbrave.hateblo.jp/entry/20081003/1223026720)\n\n\u578b\u306b\u6f14\u7b97\u60c5\u5831\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u8981\u7d20\u3054\u3068\u306e\u9045\u5ef6\u8a55\u4fa1\u3092\u5b9f\u73fe\u3059\u308b\u3002\n\n# [Scala] View\n\n[Collections - \u30d3\u30e5\u30fc - Scala Documentation](http://docs.scala-lang.org/ja/overviews/collections/views.html)\n\n```scala\nscala> Seq(1, 2, 3).view.map(_ + 1).map(_ * 2)\nres0: scala.collection.SeqView[Int,Seq[_]] = SeqViewMM(...)\n\nscala> res0.force\nres1: Seq[Int] = List(4, 6, 8)\n```\n\ntoString()\u306e\u8fd4\u308a\u5024\u3067\u3042\u308bSeqViewMM(...)\u306f\u3001map\u3092\u4e8c\u56de\u884c\u3046SeqView\u3068\u3044\u3046\u610f\u5473\u3002\u6f14\u7b97\u305d\u306e\u3082\u306e\u3092\u95a2\u6570\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u3044\u308b\u306e\u304cExpression Template\u3068\u306e\u9055\u3044\u3002\u3053\u306e\u5b9f\u88c5\u306e\u5927\u672c\u306f[TraversableViewLike](https://github.com/scala/scala/blob/v2.11.4/src/library/scala/collection/TraversableViewLike.scala)\u306b\u3042\u3063\u3066\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```scala\n  override def map[B, That](f: A => B)(implicit bf: CanBuildFrom[This, B, That]): That = {\n    newMapped(f).asInstanceOf[That]\n  }\n```\n```scala\n  protected def newMapped[B](f: A => B): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with Mapped[B]\n```\n```scala\n  trait Mapped[B] extends Transformed[B] {\n    protected[this] val mapping: A => B\n    def foreach[U](f: B => U) {\n      for (x <- self)\n        f(mapping(x))\n    }\n    final override protected[this] def viewIdentifier = \"M\"\n  }\n```\n", "tags": ["Scala2.11.4", "C++", "\u9ad8\u901f\u5316"]}