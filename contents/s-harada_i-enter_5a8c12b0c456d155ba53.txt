{"context": "\u4ee5\u524d\u3001 Objective-C \u3068 OCMock \u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f Swift \u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6e96\u5099\nXcode \u306e\u4f7f\u3044\u65b9\u3084\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u306f Objective-C \u3068\u57fa\u672c\u7684\u306b\u540c\u3058\u306a\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u306e\u3088\u3046\u306b Project > Build Settings > Defines Module \u3092 YES \u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\u6a19\u6e96\u306e XCTest Framework \u3092\u4f7f\u3046\u5834\u5408\u306f\u66f8\u304d\u65b9\u304c Swift \u306b\u306a\u308b\u3060\u3051\u3067\u3001Objective-C \u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\n\u9055\u3046\u3068\u3053\u308d\u306f\u3001Objective-C \u306e\u5834\u5408\u306f\u30c6\u30b9\u30c8\u306b\u95a2\u9023\u3059\u308b\u30af\u30e9\u30b9\u3092\u500b\u5225\u306b import \u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304b\u3063\u305f\u306e\u304c\u3001@testable import sample \u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30bf\u30fc\u30b1\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\nsampleTests.swift\nimport XCTest\n\n@testable import sample\n\nclass sampleTests: XCTestCase, NetworkManagerDelegate {\n\n    var callApiExpectation: XCTestExpectation? = nil\n\n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n\n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n\n    func testExample() {\n        // This is an example of a functional test case.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n    }\n\n    func testPerformanceExample() {\n        // This is an example of a performance test case.\n        self.measure {\n            // Put the code you want to measure the time of here.\n        }\n    }\n\n    // MARK: - Reurn value\n\n    /*!\n     * \u7d50\u679c\u3092\u623b\u308a\u5024\u3067\u8fd4\u3059\u3002\n     */\n    func testReturnVelue() {\n        let manager = NetworkManager()\n        let userData = manager.userData()\n\n        // \u623b\u308a\u5024\u3092\u78ba\u8a8d\u3059\u308b\u5834\u5408\u306f\u3001\u7d20\u76f4\u306b\u6bd4\u8f03\u3059\u308b\u3002\n        XCTAssertNotNil(userData)\n\n        XCTAssertEqual(userData.username, \"TEST1234\")\n        XCTAssertEqual(userData.uuid, \"CAD34831-E763-45A9-8BA2-31991DCB682B\")\n        XCTAssertEqual(userData.rank, 1)\n\n        XCTAssertNotNil(userData.latestAccessDate)\n    }\n\n    // MARK: - Asynchronous(Delegate)\n\n    /*!\n     * \u7d50\u679c\u3092 Delegate \u3067\u8fd4\u3059\u3002\n     */\n    func testCallApiDelegate() {\n        // \u975e\u540c\u671f\u51e6\u7406\u306e\u5b8c\u4e86\u3092\u76e3\u8996\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n        // \u5225\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308b\u305f\u3081\u30e1\u30f3\u30d0\u5909\u6570\u3092\u7528\u610f\n        self.callApiExpectation = self.expectation(description: \"CallApiDelegate\")\n\n        let manager = NetworkManager()\n        manager.delegate = self\n        manager.callApi(command: .Update, parameters: nil, completionHandler: nil)\n\n        // \u6307\u5b9a\u79d2\u6570\u5f85\u3064\n        self.waitForExpectations(timeout: 10, handler: nil)\n    }\n\n    func callBackApi(result: [NetworkManager.ApiResutKeys : Any]) {\n        // \u975e\u540c\u671f\u51e6\u7406\u306e\u76e3\u8996\u3092\u7d42\u4e86\n        self.callApiExpectation?.fulfill()\n        // \u7d50\u679c\u3092\u78ba\u8a8d\n        XCTAssertNotNil(result)\n    }\n\n    // MARK: - Asynchronous(Blocks)\n\n    /*!\n     * \u975e\u540c\u671f\u51e6\u7406\u3067\u7d50\u679c\u3092 Blocks \u3067\u8fd4\u3059\u3002\n     */\n    func testImageDownlaodBlocks() {\n        // \u975e\u540c\u671f\u51e6\u7406\u306e\u5b8c\u4e86\u3092\u76e3\u8996\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n        let expectation = self.expectation(description: \"CallApiBlocks\")\n\n        let manager = NetworkManager()\n        manager.delegate = self\n        manager.callApi(command: .Update, parameters: nil) { (result, apiResult, error) in\n            // \u975e\u540c\u671f\u51e6\u7406\u306e\u76e3\u8996\u3092\u7d42\u4e86\n            expectation.fulfill()\n            // \u7d50\u679c\u3092\u78ba\u8a8d\n            XCTAssertTrue(result)\n        }\n\n        // \u6307\u5b9a\u79d2\u6570\u5f85\u3064\n        self.waitForExpectations(timeout: 10, handler: nil)\n    }\n\n    // MARK: - Asynchronous(Notification)\n\n    /*!\n     * \u7d50\u679c\u3092 Notification \u3067\u8fd4\u3059\u3002\n     */\n    func testCallApiNotification() {\n        // \u901a\u77e5\u3092\u76e3\u8996\u3059\u308b\n        self.expectation(forNotification: NetworkManager.ApiCallbackNotification.rawValue, object: nil) { (notification) -> Bool in\n            // \u7d50\u679c\u3092\u78ba\u8a8d\n            XCTAssertNotNil(notification.object)\n            let apiResult = notification.object as! [NetworkManager.ApiResutKeys: AnyObject]\n            XCTAssertTrue(apiResult[.Status] as! Bool)\n            XCTAssertNil(apiResult[.Error])\n\n            // \u901a\u77e5\u306e\u76e3\u8996\u3092\u7d42\u4e86\n            return true\n        }\n\n        let manager = NetworkManager()\n        manager.callApi(command: .Update, parameters: nil, completionHandler: nil)\n\n        // \u6307\u5b9a\u79d2\u6570\u5f85\u3064\n        self.waitForExpectations(timeout: 10, handler: nil)\n    }\n}\n\n\n\nUI \u30c6\u30b9\u30c8\nUI \u30c6\u30b9\u30c8\u3082 Objective-C \u3068\u5927\u304d\u306a\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nsampleUITests.swift\nimport XCTest\n\n@testable import sample\n\nclass sampleUITests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n\n        // In UI tests it is usually best to stop immediately when a failure occurs.\n        continueAfterFailure = false\n        // UI tests must launch the application that they test. Doing this in setup will make sure it happens for each test method.\n        XCUIApplication().launch()\n\n        // In UI tests it\u2019s important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.\n    }\n\n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n\n    /*!\n     * \u8868\u793a\u5185\u5bb9\u3092\u78ba\u8a8d\u3059\u308b\n     */\n    func testViewContentsForTestApplication() -> Void {\n        // \u30c6\u30b9\u30c8\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\n        let app = XCUIApplication()\n        // accessibilityIdentifier \u306b ViewIdentifierUsernameLabel \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b UILabel \u3092\u53d6\u5f97\n        let labelElement = app.staticTexts[\"ViewIdentifierUsernameLabel\"]\n        // UILabel \u306e text \u3092\u78ba\u8a8d\n        XCTAssertEqual(labelElement.label, \"TEST1234\")\n    }\n\n    /*!\n     * \u975e\u540c\u671f\u51e6\u7406\u3092\u78ba\u8a8d\u3059\u308b\n     */\n    func testCallApi() {\n        let app = XCUIApplication()\n\n        // accessibilityIdentifier \u306b ViewIdentifierCallApiButton \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b UIButton \u3092\u53d6\u5f97\n        let buttonElement = app.buttons[\"ViewIdentifierCallApiButton\"]\n        // \u30dc\u30bf\u30f3\u3092\u30bf\u30c3\u30d7\n        buttonElement.tap()\n\n        // \u975e\u540c\u671f\u51e6\u7406\u4e2d\u306f View \u3092\u8868\u793a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\n        // accessibilityIdentifier \u306b ViewIdentifierLoadingView \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b UIView \u3092\u53d6\u5f97\n        let loadingElement = app.otherElements[\"ViewIdentifierLoadingView\"]\n        // \u975e\u540c\u671f\u51e6\u7406\u4e2d\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b View \u304c\u975e\u8868\u793a\u306b\u306a\u308b\u307e\u3067\u6307\u5b9a\u79d2\u6570\uff08\uff15\u79d2\uff09\u5f85\u3064\u3002\n        let predicate = NSPredicate(format: \"exists == NO\")\n        self.expectation(for: predicate, evaluatedWith: loadingElement, handler: nil)\n        self.waitForExpectations(timeout: 5, handler: nil)\n\n        // \u975e\u540c\u671f\u51e6\u7406\u306e\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b\n        let labelElement = app.staticTexts[\"ViewIdentifierUsernameLabel\"]\n        XCTAssertEqual(labelElement.label, \"TEST5678\")\n    }\n\n    /*!\n     * \u30a2\u30e9\u30fc\u30c8\u306e\u5236\u5fa1\u3092\u78ba\u8a8d\u3059\u308b\u3002\n     */\n    func testAlertMessageOK() {\n        let app = XCUIApplication()\n\n        // accessibilityIdentifier \u306b ViewIdentifierShowAlertViewButton \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b UIButton \u3092\u53d6\u5f97\n        let buttonElement = app.buttons[\"ViewIdentifierShowAlertViewButton\"]\n        // \u30dc\u30bf\u30f3\u3092\u30bf\u30c3\u30d7\n        buttonElement.tap()\n\n        // \u30a2\u30e9\u30fc\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u307e\u3067\u6307\u5b9a\u79d2\u6570\uff08\uff15\u79d2\uff09\u5f85\u3064\u3002\n        let predicate = NSPredicate(format:\"0 < count\")\n        self.expectation(for: predicate, evaluatedWith: app.alerts, handler: nil)\n        self.waitForExpectations(timeout: 5, handler: nil)\n\n        // \u30a2\u30e9\u30fc\u30c8\u306f\u4e00\u3064\u3057\u304b\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u3044\u306f\u305a\u3002\n        XCTAssertEqual(app.alerts.count, 1)\n\n        // \u8868\u793a\u3055\u308c\u305f\u30a2\u30e9\u30fc\u30c8\u306e OK \u30dc\u30bf\u30f3\u3092\u30bf\u30c3\u30d7\n        let alertElement = app.alerts.element(boundBy: 0)\n        let okButtonElement = alertElement.buttons[\"OK\"];\n        okButtonElement.tap()\n\n        // \u753b\u9762\u306e\u8868\u793a\u5185\u5bb9\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        let labelElement = app.staticTexts[\"ViewIdentifierUsernameLabel\"];\n        XCTAssertEqual(labelElement.label, \"TEST9012\")\n    }\n}\n\n\n\n\u30e2\u30c3\u30af\u306b\u3064\u3044\u3066\nObjective-C \u306e\u5834\u5408\u3067\u3059\u3068 OCMock \u306e\u3088\u3046\u306a\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3061\u3089 \u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u3001Swift \u306e\u5834\u5408\u306f\u81ea\u5206\u3067\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5b9f\u88c5\u4f8b\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3092\u8fd4\u3059\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3059\u308b\u5834\u5408\u3092\u4f8b\u306b\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u5074\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3068\u3053\u308d\u306f\u306a\u3044\u3067\u3059\u3002\n\nDataManager.swift\nimport UIKit\n\nprotocol DataManagerProtocol {\n    func selectData(table: String, predicate: NSPredicate?) -> [Any]?\n}\n\nclass DataManager: NSObject, DataManagerProtocol {\n    class var sharedInstance : DataManager {\n        struct Static {\n            static let instance = DataManager()\n        }\n        return Static.instance\n    }\n\n    public func selectData(table: String, predicate: NSPredicate?) -> [Any]? {\n        return []\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\u306f\u5dee\u3057\u66ff\u3048\u305f\u3044\u30af\u30e9\u30b9\u3092\u5916\u90e8\u304b\u3089\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u3067\u3059\u3068\u3001\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\nBookmarkManager.swift\nimport UIKit\n\nprotocol BookmarkManagerProtocol {\n    func hasBookmarkData() -> Bool\n}\n\nclass BookmarkManager: NSObject {\n\n    // \u30c6\u30b9\u30c8\u7528\u306b\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u610f\u3059\u308b\n    public var dataManager = DataManager.sharedInstance\n\n    func hasBookmarkData() -> Bool {\n        let list = dataManager.selectData(table: \"Bookmark\", predicate: nil)\n        guard let bookmarkList = list else {\n            return false\n        }\n        return 0 < bookmarkList.count\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nsampleMockTests.swift\nimport XCTest\n\n@testable import sample\n\nclass sampleMockTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n\n    func testMock() {\n        // \u5dee\u3057\u66ff\u3048\u305f\u3044\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u3001\u30e2\u30c3\u30af\u30af\u30e9\u30b9\u3092\u4f5c\u6210\n        class MockDataManager: DataManager {\n            public override func selectData(table: String, predicate: NSPredicate?) -> [Any]? {\n                // \u30c7\u30fc\u30bf\u53d6\u5f97\u30e1\u30bd\u30c3\u30c9\u306e\u5185\u5bb9\u3092\u5dee\u3057\u66ff\u3048\u308b\n                return [1, 2, 3]\n            }\n        }\n\n        let manager = BookmarkManager()\n        // \u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u305f\u30e2\u30c3\u30af\u30af\u30e9\u30b9\u306b\u5dee\u3057\u66ff\u3048\u308b\n        manager.dataManager = MockDataManager()\n        let hasData = manager.hasBookmarkData()\n        XCTAssertTrue(hasData)\n    }\n}\n\n\n\u65e5\u4ed8\u3092\u5dee\u3057\u66ff\u3048\u305f\u3044\u5834\u5408\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nDateUtility.swift\nimport UIKit\n\nclass SystemDate: NSObject {\n    public func currentDate() -> Date {\n        return Date()\n    }\n}\n\nclass DateUtility: NSObject {\n    var systemDate = SystemDate()\n\n    public func currentDateString() -> String\n    {\n        let dateFormatter = DateFormatter()\n        dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n        dateFormatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\";\n        return dateFormatter.string(from: systemDate.currentDate());\n    }\n\n    public func tomorrow() -> Date {\n        let wCalendar = Calendar(identifier: .gregorian)\n        return wCalendar.date(byAdding: .day, value: 1, to: systemDate.currentDate())!\n    }\n}\n\n\n\nsampleMockTests.swift\nimport XCTest\n\n@testable import sample\n\nclass sampleMockTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n\n    func testMockCurrentDate() {\n        class MockSystemDate: SystemDate {\n            public override func currentDate() -> Date {\n                let wCalendar = Calendar(identifier: .gregorian)\n                return wCalendar.date(from: DateComponents(year: 2017, month: 1, day: 1))!\n            }\n        }\n\n        let utility = DateUtility()\n        utility.systemDate = MockSystemDate()\n        let dateString = utility.currentDateString()\n        XCTAssertEqual(dateString, \"2017-01-01 00:00:00\")\n    }\n\n    func testMockTomorrow() {\n        class MockSystemDate: SystemDate {\n            public override func currentDate() -> Date {\n                let wCalendar = Calendar(identifier: .gregorian)\n                return wCalendar.date(from: DateComponents(year: 2017, month: 1, day: 2))!\n            }\n        }\n        let wCalendar = Calendar(identifier: .gregorian)\n        let expectedValue = wCalendar.date(from: DateComponents(year: 2017, month: 1, day: 3))!\n\n        let utility = DateUtility()\n        utility.systemDate = MockSystemDate()\n        let actualValue = utility.tomorrow()\n        XCTAssertEqual(actualValue, expectedValue)\n    }\n}\n\n\n\nSwift \u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u3069\u3053\u3092\u30e2\u30c3\u30af\u5316\u3055\u305b\u308b\u304b\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u8b58\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\nCode Coverage\n\u30b3\u30fc\u30c9\u30ab\u30d0\u30ec\u30c3\u30b8\u3082 Xcode \u6a19\u6e96\u306e\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u3088\u3046\u306b scheme editor \u306e Test action \u306b\u3042\u308b gather coverage data \u306e\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u3092\u6709\u52b9\u306b\u3057\u305f\u72b6\u614b\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u7d50\u679c\u306e Coverage \u3067\u30b3\u30fc\u30c9\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u72b6\u614b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u3067\u3082\u3069\u306e\u90e8\u5206\u304c\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\nQuick\nSwift \u5411\u3051\u306e\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066 Quick \u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\nSwift \u304c\u767a\u8868\u3055\u308c\u305f\u4e8c\u65e5\u5f8c\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u3082\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u307e\u3059\u3068\u69d8\u3005\u306a\u6709\u540d\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nsampleQuickTests.swift\nimport Quick\nimport Nimble\n\n@testable import sample\n\nclass sampleQuickTests: QuickSpec {\n    override func spec() {\n        describe(\"DataManager\") {\n            context(\"SelectUserData\") {\n                it(\"CheckingData\") {\n                    let manager = DataManager()\n                    let userData = manager.selectUserData()\n\n                    expect(userData.username).toNot(beNil())\n                    expect(userData.username).to(equal(\"TEST1234\"))\n                }\n            }\n        }\n    }\n}\n\n\n\u3053\u306e\u3088\u3046\u306b QuickSpec \u3092\u7d99\u627f\u3057\u305f\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u306f spec() \u3068\u306a\u308a\u307e\u3059\u3002\nQuick \u306f RSpec \u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u540c\u69d8\u306b describe \u3084 context \u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f it \u306e\u4e2d\u306b expect({\u78ba\u8a8d\u5bfe\u8c61}).to({\u671f\u5f85\u5024}) \u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\n\u53c2\u8003\nhttps://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/01-introduction.html#//apple_ref/doc/uid/TP40014132-CH1-SW1\nhttps://realm.io/jp/news/tryswift-veronica-ray-real-world-mocking-swift/\nhttp://qiita.com/koduki/items/4fde43b68fe450c6a5d8\nhttp://qiita.com/susieyy/items/56457922d3d6bbee21ef\nhttps://github.com/Quick/Quick/tree/master/Documentation/ja\n\u4ee5\u524d\u3001 [Objective-C](http://qiita.com/s-harada_i-enter/items/f7d57966a5bf9d53038e) \u3068 [OCMock](http://qiita.com/s-harada_i-enter/items/50f253bc351dac084c61) \u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f Swift \u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u6e96\u5099\nXcode \u306e\u4f7f\u3044\u65b9\u3084\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u306f [Objective-C](http://qiita.com/s-harada_i-enter/items/f7d57966a5bf9d53038e) \u3068\u57fa\u672c\u7684\u306b\u540c\u3058\u306a\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n![Swift_UT_BuildSettings.png](https://qiita-image-store.s3.amazonaws.com/0/134810/b2d349f1-b9c1-708e-9cc9-c6aaefb535a3.png \"Swift_UT_BuildSettings.png\")\n\n\u3053\u306e\u3088\u3046\u306b Project > Build Settings > Defines Module \u3092 YES \u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n# \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n\u6a19\u6e96\u306e XCTest Framework \u3092\u4f7f\u3046\u5834\u5408\u306f\u66f8\u304d\u65b9\u304c Swift \u306b\u306a\u308b\u3060\u3051\u3067\u3001Objective-C \u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\n\u9055\u3046\u3068\u3053\u308d\u306f\u3001Objective-C \u306e\u5834\u5408\u306f\u30c6\u30b9\u30c8\u306b\u95a2\u9023\u3059\u308b\u30af\u30e9\u30b9\u3092\u500b\u5225\u306b import \u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304b\u3063\u305f\u306e\u304c\u3001`@testable import sample` \u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30bf\u30fc\u30b1\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n```swift:sampleTests.swift\nimport XCTest\n\n@testable import sample\n\nclass sampleTests: XCTestCase, NetworkManagerDelegate {\n    \n    var callApiExpectation: XCTestExpectation? = nil\n\n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n    \n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n    \n    func testExample() {\n        // This is an example of a functional test case.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n    }\n    \n    func testPerformanceExample() {\n        // This is an example of a performance test case.\n        self.measure {\n            // Put the code you want to measure the time of here.\n        }\n    }\n\n    // MARK: - Reurn value\n\n    /*!\n     * \u7d50\u679c\u3092\u623b\u308a\u5024\u3067\u8fd4\u3059\u3002\n     */\n    func testReturnVelue() {\n        let manager = NetworkManager()\n        let userData = manager.userData()\n\n        // \u623b\u308a\u5024\u3092\u78ba\u8a8d\u3059\u308b\u5834\u5408\u306f\u3001\u7d20\u76f4\u306b\u6bd4\u8f03\u3059\u308b\u3002\n        XCTAssertNotNil(userData)\n\n        XCTAssertEqual(userData.username, \"TEST1234\")\n        XCTAssertEqual(userData.uuid, \"CAD34831-E763-45A9-8BA2-31991DCB682B\")\n        XCTAssertEqual(userData.rank, 1)\n        \n        XCTAssertNotNil(userData.latestAccessDate)\n    }\n\n    // MARK: - Asynchronous(Delegate)\n    \n    /*!\n     * \u7d50\u679c\u3092 Delegate \u3067\u8fd4\u3059\u3002\n     */\n    func testCallApiDelegate() {\n        // \u975e\u540c\u671f\u51e6\u7406\u306e\u5b8c\u4e86\u3092\u76e3\u8996\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n        // \u5225\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308b\u305f\u3081\u30e1\u30f3\u30d0\u5909\u6570\u3092\u7528\u610f\n        self.callApiExpectation = self.expectation(description: \"CallApiDelegate\")\n        \n        let manager = NetworkManager()\n        manager.delegate = self\n        manager.callApi(command: .Update, parameters: nil, completionHandler: nil)\n\n        // \u6307\u5b9a\u79d2\u6570\u5f85\u3064\n        self.waitForExpectations(timeout: 10, handler: nil)\n    }\n    \n    func callBackApi(result: [NetworkManager.ApiResutKeys : Any]) {\n        // \u975e\u540c\u671f\u51e6\u7406\u306e\u76e3\u8996\u3092\u7d42\u4e86\n        self.callApiExpectation?.fulfill()\n        // \u7d50\u679c\u3092\u78ba\u8a8d\n        XCTAssertNotNil(result)\n    }\n    \n    // MARK: - Asynchronous(Blocks)\n    \n    /*!\n     * \u975e\u540c\u671f\u51e6\u7406\u3067\u7d50\u679c\u3092 Blocks \u3067\u8fd4\u3059\u3002\n     */\n    func testImageDownlaodBlocks() {\n        // \u975e\u540c\u671f\u51e6\u7406\u306e\u5b8c\u4e86\u3092\u76e3\u8996\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n        let expectation = self.expectation(description: \"CallApiBlocks\")\n        \n        let manager = NetworkManager()\n        manager.delegate = self\n        manager.callApi(command: .Update, parameters: nil) { (result, apiResult, error) in\n            // \u975e\u540c\u671f\u51e6\u7406\u306e\u76e3\u8996\u3092\u7d42\u4e86\n            expectation.fulfill()\n            // \u7d50\u679c\u3092\u78ba\u8a8d\n            XCTAssertTrue(result)\n        }\n        \n        // \u6307\u5b9a\u79d2\u6570\u5f85\u3064\n        self.waitForExpectations(timeout: 10, handler: nil)\n    }\n\n    // MARK: - Asynchronous(Notification)\n\n    /*!\n     * \u7d50\u679c\u3092 Notification \u3067\u8fd4\u3059\u3002\n     */\n    func testCallApiNotification() {\n        // \u901a\u77e5\u3092\u76e3\u8996\u3059\u308b\n        self.expectation(forNotification: NetworkManager.ApiCallbackNotification.rawValue, object: nil) { (notification) -> Bool in\n            // \u7d50\u679c\u3092\u78ba\u8a8d\n            XCTAssertNotNil(notification.object)\n            let apiResult = notification.object as! [NetworkManager.ApiResutKeys: AnyObject]\n            XCTAssertTrue(apiResult[.Status] as! Bool)\n            XCTAssertNil(apiResult[.Error])\n            \n            // \u901a\u77e5\u306e\u76e3\u8996\u3092\u7d42\u4e86\n            return true\n        }\n\n        let manager = NetworkManager()\n        manager.callApi(command: .Update, parameters: nil, completionHandler: nil)\n\n        // \u6307\u5b9a\u79d2\u6570\u5f85\u3064\n        self.waitForExpectations(timeout: 10, handler: nil)\n    }\n}\n```\n\n# UI \u30c6\u30b9\u30c8\n\nUI \u30c6\u30b9\u30c8\u3082 Objective-C \u3068\u5927\u304d\u306a\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```swift:sampleUITests.swift\nimport XCTest\n\n@testable import sample\n\nclass sampleUITests: XCTestCase {\n        \n    override func setUp() {\n        super.setUp()\n        \n        // Put setup code here. This method is called before the invocation of each test method in the class.\n        \n        // In UI tests it is usually best to stop immediately when a failure occurs.\n        continueAfterFailure = false\n        // UI tests must launch the application that they test. Doing this in setup will make sure it happens for each test method.\n        XCUIApplication().launch()\n\n        // In UI tests it\u2019s important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.\n    }\n    \n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n\n    /*!\n     * \u8868\u793a\u5185\u5bb9\u3092\u78ba\u8a8d\u3059\u308b\n     */\n    func testViewContentsForTestApplication() -> Void {\n        // \u30c6\u30b9\u30c8\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\n        let app = XCUIApplication()\n        // accessibilityIdentifier \u306b ViewIdentifierUsernameLabel \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b UILabel \u3092\u53d6\u5f97\n        let labelElement = app.staticTexts[\"ViewIdentifierUsernameLabel\"]\n        // UILabel \u306e text \u3092\u78ba\u8a8d\n        XCTAssertEqual(labelElement.label, \"TEST1234\")\n    }\n\n    /*!\n     * \u975e\u540c\u671f\u51e6\u7406\u3092\u78ba\u8a8d\u3059\u308b\n     */\n    func testCallApi() {\n        let app = XCUIApplication()\n        \n        // accessibilityIdentifier \u306b ViewIdentifierCallApiButton \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b UIButton \u3092\u53d6\u5f97\n        let buttonElement = app.buttons[\"ViewIdentifierCallApiButton\"]\n        // \u30dc\u30bf\u30f3\u3092\u30bf\u30c3\u30d7\n        buttonElement.tap()\n        \n        // \u975e\u540c\u671f\u51e6\u7406\u4e2d\u306f View \u3092\u8868\u793a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\n        // accessibilityIdentifier \u306b ViewIdentifierLoadingView \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b UIView \u3092\u53d6\u5f97\n        let loadingElement = app.otherElements[\"ViewIdentifierLoadingView\"]\n        // \u975e\u540c\u671f\u51e6\u7406\u4e2d\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b View \u304c\u975e\u8868\u793a\u306b\u306a\u308b\u307e\u3067\u6307\u5b9a\u79d2\u6570\uff08\uff15\u79d2\uff09\u5f85\u3064\u3002\n        let predicate = NSPredicate(format: \"exists == NO\")\n        self.expectation(for: predicate, evaluatedWith: loadingElement, handler: nil)\n        self.waitForExpectations(timeout: 5, handler: nil)\n        \n        // \u975e\u540c\u671f\u51e6\u7406\u306e\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b\n        let labelElement = app.staticTexts[\"ViewIdentifierUsernameLabel\"]\n        XCTAssertEqual(labelElement.label, \"TEST5678\")\n    }\n    \n    /*!\n     * \u30a2\u30e9\u30fc\u30c8\u306e\u5236\u5fa1\u3092\u78ba\u8a8d\u3059\u308b\u3002\n     */\n    func testAlertMessageOK() {\n        let app = XCUIApplication()\n    \n        // accessibilityIdentifier \u306b ViewIdentifierShowAlertViewButton \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b UIButton \u3092\u53d6\u5f97\n        let buttonElement = app.buttons[\"ViewIdentifierShowAlertViewButton\"]\n        // \u30dc\u30bf\u30f3\u3092\u30bf\u30c3\u30d7\n        buttonElement.tap()\n    \n        // \u30a2\u30e9\u30fc\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u307e\u3067\u6307\u5b9a\u79d2\u6570\uff08\uff15\u79d2\uff09\u5f85\u3064\u3002\n        let predicate = NSPredicate(format:\"0 < count\")\n        self.expectation(for: predicate, evaluatedWith: app.alerts, handler: nil)\n        self.waitForExpectations(timeout: 5, handler: nil)\n    \n        // \u30a2\u30e9\u30fc\u30c8\u306f\u4e00\u3064\u3057\u304b\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u3044\u306f\u305a\u3002\n        XCTAssertEqual(app.alerts.count, 1)\n    \n        // \u8868\u793a\u3055\u308c\u305f\u30a2\u30e9\u30fc\u30c8\u306e OK \u30dc\u30bf\u30f3\u3092\u30bf\u30c3\u30d7\n        let alertElement = app.alerts.element(boundBy: 0)\n        let okButtonElement = alertElement.buttons[\"OK\"];\n        okButtonElement.tap()\n    \n        // \u753b\u9762\u306e\u8868\u793a\u5185\u5bb9\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        let labelElement = app.staticTexts[\"ViewIdentifierUsernameLabel\"];\n        XCTAssertEqual(labelElement.label, \"TEST9012\")\n    }\n}\n```\n\n# \u30e2\u30c3\u30af\u306b\u3064\u3044\u3066\n\nObjective-C \u306e\u5834\u5408\u3067\u3059\u3068 OCMock \u306e\u3088\u3046\u306a\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u304c\u3001[\u3053\u3061\u3089](https://realm.io/jp/news/tryswift-veronica-ray-real-world-mocking-swift/) \u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u3001Swift \u306e\u5834\u5408\u306f\u81ea\u5206\u3067\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n## \u5b9f\u88c5\u4f8b\n\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3092\u8fd4\u3059\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3059\u308b\u5834\u5408\u3092\u4f8b\u306b\u3057\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u5074\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3068\u3053\u308d\u306f\u306a\u3044\u3067\u3059\u3002\n\n```swift:DataManager.swift\nimport UIKit\n\nprotocol DataManagerProtocol {\n    func selectData(table: String, predicate: NSPredicate?) -> [Any]?\n}\n\nclass DataManager: NSObject, DataManagerProtocol {\n    class var sharedInstance : DataManager {\n        struct Static {\n            static let instance = DataManager()\n        }\n        return Static.instance\n    }\n\n    public func selectData(table: String, predicate: NSPredicate?) -> [Any]? {\n        return []\n    }\n}\n```\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\u306f\u5dee\u3057\u66ff\u3048\u305f\u3044\u30af\u30e9\u30b9\u3092\u5916\u90e8\u304b\u3089\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u3067\u3059\u3068\u3001\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\n```swift:BookmarkManager.swift\nimport UIKit\n\nprotocol BookmarkManagerProtocol {\n    func hasBookmarkData() -> Bool\n}\n\nclass BookmarkManager: NSObject {\n    \n    // \u30c6\u30b9\u30c8\u7528\u306b\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u610f\u3059\u308b\n    public var dataManager = DataManager.sharedInstance\n    \n    func hasBookmarkData() -> Bool {\n        let list = dataManager.selectData(table: \"Bookmark\", predicate: nil)\n        guard let bookmarkList = list else {\n            return false\n        }\n        return 0 < bookmarkList.count\n    }\n}\n```\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift:sampleMockTests.swift\nimport XCTest\n\n@testable import sample\n\nclass sampleMockTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n    \n    func testMock() {\n        // \u5dee\u3057\u66ff\u3048\u305f\u3044\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u3001\u30e2\u30c3\u30af\u30af\u30e9\u30b9\u3092\u4f5c\u6210\n        class MockDataManager: DataManager {\n            public override func selectData(table: String, predicate: NSPredicate?) -> [Any]? {\n                // \u30c7\u30fc\u30bf\u53d6\u5f97\u30e1\u30bd\u30c3\u30c9\u306e\u5185\u5bb9\u3092\u5dee\u3057\u66ff\u3048\u308b\n                return [1, 2, 3]\n            }\n        }\n        \n        let manager = BookmarkManager()\n        // \u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u305f\u30e2\u30c3\u30af\u30af\u30e9\u30b9\u306b\u5dee\u3057\u66ff\u3048\u308b\n        manager.dataManager = MockDataManager()\n        let hasData = manager.hasBookmarkData()\n        XCTAssertTrue(hasData)\n    }\n}\n```\n\n\u65e5\u4ed8\u3092\u5dee\u3057\u66ff\u3048\u305f\u3044\u5834\u5408\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift:DateUtility.swift\nimport UIKit\n\nclass SystemDate: NSObject {\n    public func currentDate() -> Date {\n        return Date()\n    }\n}\n\nclass DateUtility: NSObject {\n    var systemDate = SystemDate()\n    \n    public func currentDateString() -> String\n    {\n        let dateFormatter = DateFormatter()\n        dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n        dateFormatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\";\n        return dateFormatter.string(from: systemDate.currentDate());\n    }\n\n    public func tomorrow() -> Date {\n        let wCalendar = Calendar(identifier: .gregorian)\n        return wCalendar.date(byAdding: .day, value: 1, to: systemDate.currentDate())!\n    }\n}\n```\n\n```swift:sampleMockTests.swift\nimport XCTest\n\n@testable import sample\n\nclass sampleMockTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n    \n    func testMockCurrentDate() {\n        class MockSystemDate: SystemDate {\n            public override func currentDate() -> Date {\n                let wCalendar = Calendar(identifier: .gregorian)\n                return wCalendar.date(from: DateComponents(year: 2017, month: 1, day: 1))!\n            }\n        }\n        \n        let utility = DateUtility()\n        utility.systemDate = MockSystemDate()\n        let dateString = utility.currentDateString()\n        XCTAssertEqual(dateString, \"2017-01-01 00:00:00\")\n    }\n\n    func testMockTomorrow() {\n        class MockSystemDate: SystemDate {\n            public override func currentDate() -> Date {\n                let wCalendar = Calendar(identifier: .gregorian)\n                return wCalendar.date(from: DateComponents(year: 2017, month: 1, day: 2))!\n            }\n        }\n        let wCalendar = Calendar(identifier: .gregorian)\n        let expectedValue = wCalendar.date(from: DateComponents(year: 2017, month: 1, day: 3))!\n        \n        let utility = DateUtility()\n        utility.systemDate = MockSystemDate()\n        let actualValue = utility.tomorrow()\n        XCTAssertEqual(actualValue, expectedValue)\n    }\n}\n\n```\n\nSwift \u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u3069\u3053\u3092\u30e2\u30c3\u30af\u5316\u3055\u305b\u308b\u304b\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u8b58\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n# Code Coverage\n\n\u30b3\u30fc\u30c9\u30ab\u30d0\u30ec\u30c3\u30b8\u3082 Xcode \u6a19\u6e96\u306e\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n![Enable_Code_Coverage.png](https://qiita-image-store.s3.amazonaws.com/0/134810/59624764-4f15-aa05-ba09-07750d096473.png \"Enable_Code_Coverage.png\")\n\n\u3053\u306e\u3088\u3046\u306b scheme editor \u306e Test action \u306b\u3042\u308b `gather coverage data` \u306e\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u3092\u6709\u52b9\u306b\u3057\u305f\u72b6\u614b\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u7d50\u679c\u306e `Coverage` \u3067\u30b3\u30fc\u30c9\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u72b6\u614b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n![Code_Coverage.png](https://qiita-image-store.s3.amazonaws.com/0/134810/fadd171b-79aa-a6a0-e4f5-05700da93c73.png \"Code_Coverage.png\")\n\n\u307e\u305f\u3001\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u3067\u3082\u3069\u306e\u90e8\u5206\u304c\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n![Code_Coverage_Class.png](https://qiita-image-store.s3.amazonaws.com/0/134810/5b71c9f0-833e-62b9-459d-88fc0a3c0083.png \"Code_Coverage_Class.png\")\n\n\n# Quick\n\nSwift \u5411\u3051\u306e\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066 [Quick](https://github.com/Quick/Quick/) \u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\nSwift \u304c\u767a\u8868\u3055\u308c\u305f\u4e8c\u65e5\u5f8c\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u3082\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u307e\u3059\u3068\u69d8\u3005\u306a\u6709\u540d\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\n## \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n```swift:sampleQuickTests.swift\nimport Quick\nimport Nimble\n\n@testable import sample\n\nclass sampleQuickTests: QuickSpec {\n    override func spec() {\n        describe(\"DataManager\") {\n            context(\"SelectUserData\") {\n                it(\"CheckingData\") {\n                    let manager = DataManager()\n                    let userData = manager.selectUserData()\n                    \n                    expect(userData.username).toNot(beNil())\n                    expect(userData.username).to(equal(\"TEST1234\"))\n                }\n            }\n        }\n    }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b `QuickSpec` \u3092\u7d99\u627f\u3057\u305f\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u306f `spec()` \u3068\u306a\u308a\u307e\u3059\u3002\n`Quick` \u306f `RSpec` \u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u540c\u69d8\u306b `describe` \u3084 `context` \u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f `it` \u306e\u4e2d\u306b `expect({\u78ba\u8a8d\u5bfe\u8c61}).to({\u671f\u5f85\u5024})` \u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n![Quick_Test_Failed.png](https://qiita-image-store.s3.amazonaws.com/0/134810/07d3fbe2-edbe-3672-1439-038bf588e36e.png \"Quick_Test_Failed.png\")\n\n\n\n# \u53c2\u8003\n\nhttps://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/01-introduction.html#//apple_ref/doc/uid/TP40014132-CH1-SW1\nhttps://realm.io/jp/news/tryswift-veronica-ray-real-world-mocking-swift/\nhttp://qiita.com/koduki/items/4fde43b68fe450c6a5d8\nhttp://qiita.com/susieyy/items/56457922d3d6bbee21ef\nhttps://github.com/Quick/Quick/tree/master/Documentation/ja\n", "tags": ["unittest", "Swift", "iOS"]}