{"context": "\n\nPython\u3067SVG\u306ePath\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308b\n\nSVG\u306e\u30d1\u30b9\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u30b5\u30dd\u30fc\u30c8\u95a2\u6570\u3092\u4f5c\u6210\u3057\u305f\u3044\uff08\u30d1\u30b9\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u306f\u4ed6\u306b\u4efb\u305b\u308b\uff09\n\u3082\u3063\u3068\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\nTest.py\n\ndef _split_pathdata(pathdata):\n    '''path\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u30b3\u30de\u30f3\u30c9\u304b\u5ea7\u6a19\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\n\n    '''\n\n    if len(pathdata) < 1:\n        raise StopIteration\n\n    for cha in pathdata:\n        if cha in ' \\t\\r\\n':\n            pass\n        elif cha in 'mM':\n            break\n        else:\n            raise StopIteration\n\n    stack = []\n\n    for cha in pathdata:\n        if cha in '0123456789': # Number\n            stack.append(cha)\n        elif cha in '+ ,\\t\\r\\n': # Delimiter\n            if len(stack) > 0:\n                yield ''.join(stack)\n                stack.clear()\n        elif cha in '-': # Sign\n            if len(stack) > 0:\n                yield ''.join(stack)\n                stack.clear()\n            stack.append(cha)\n        elif cha in '.': # Dot\n            if stack.count(cha) > 0:\n                yield ''.join(stack)\n                stack.clear()\n                stack.append('0')\n            stack.append(cha)\n        elif cha in 'abchlmqstvzABCHLMQSTVZ': # Command\n            if len(stack) > 0:\n                yield ''.join(stack)\n                stack.clear()\n            yield cha\n        else:\n            break\n    if len(stack) > 0:\n        yield ''.join(stack)\n\ndef command_fire(fire, pathdata):\n    '''\u30d1\u30b9\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092fire\u306b\u6d41\u3059\u3060\u3051\u306e\u95a2\u6570\n\n    \u51e6\u7406\u306f\u5168\u3066fire\u306b\u6e21\u3057\u305f\u30af\u30e9\u30b9\u3067\u5bfe\u5fdc'''\n    stack = [] # \u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\n    command = '' # \u73fe\u5728\u306e\u30b3\u30de\u30f3\u30c9\n    # SVG\u306e\u30d1\u30b9\u306e\u4e2d\u8eab\u306f\u307b\u307c\u5ea7\u6a19\u6570\u5024\u3000\u2192\u3000float\u306b\u5909\u63db\u3067\u304d\u306a\u3051\u308c\u3070\u30b3\u30de\u30f3\u30c9\u3068\u8003\u3048\u308b\n    for cha in _split_pathdata(pathdata):\n        try:\n            stack.append(float(cha)) # \u30b3\u30de\u30f3\u30c9\u304c\u304d\u305f\u5834\u5408\u306fValueError\u304c\u767a\u751f\n\n            # \u5171\u901a\u306e\u4ed5\u69d8\u3068\u3057\u3066\u73fe\u5728\u306e\u30b3\u30de\u30f3\u30c9\u306b\u5fc5\u8981\u306a\u5ea7\u6a19\u304c\u6e9c\u307e\u3063\u305f\u3089\u305d\u306e\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u3059\u308b\u5f15\u6570fire\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n\n            if command in 'M' and len(stack) == 2:\n                fire.moveto_abs(stack[0], stack[1])\n                stack.clear()\n                command = 'L'\n\n            elif command in 'm' and len(stack) == 2:\n                fire.moveto_rel(stack[0], stack[1])\n                stack.clear()\n                command = 'l'\n\n            elif command in 'L' and len(stack) == 2:\n                fire.lineto_abs(stack[0], stack[1])\n                stack.clear()\n\n            elif command in 'l' and len(stack) == 2:\n                fire.lineto_rel(stack[0], stack[1])\n                stack.clear()\n            '''\u4e2d\u7565'''\n            elif command in 'zZ' and len(stack) > 0:\n                break\n\n        except ValueError:\n            # \u65b0\u3057\u3044\u30b3\u30de\u30f3\u30c9\u304c\u6765\u305f\u3068\u304d\u306b\u30c7\u30fc\u30bf\u304c\u30b9\u30bf\u30c3\u30af\u306b\u6b8b\u3063\u3066\u308b\u5834\u5408\u306f\u69cb\u6587\u30a8\u30e9\u30fc\n            if len(stack) > 0:\n                break\n\n            command = cha\n            # Z\u30b3\u30de\u30f3\u30c9\u306e\u307f\u7279\u6b8a\u306a\u70ba\u3001\u3053\u3061\u3089\u3067\u51e6\u7406\n            if command in 'zZ':\n                fire.closepath()\n\n\nclass TestCase:\n    '''\u30c6\u30b9\u30c8\u3002\u7c21\u7565\u5316\u306e\u70baprint\u6587\u306e\u307f'''\n    def moveto_abs(self, x, y):\n        print(f'M({x}, {y})')\n\n    def moveto_rel(self, x, y):\n        print(f'm({x}, {y})')\n\n    def lineto_abs(self, x, y):\n        print(f'L({x}, {y})')\n\n    def lineto_rel(self, x, y):\n        print(f'l({x}, {y})')\n    '''\u4e2d\u7565'''\n    def closepath(self):\n        print('Z')\n\n'''\nTEST = TestCase()\n\ncommand_fire(TEST, 'M0,0-10.9.90-1-2zm0,1')\n\n#Result\n\n-> M(0.0, 0.0)\n-> L(-10.9, 0.9)\n-> L(-1.0, -2.0)\n-> Z\n-> m(0.0, 1.0)\n'''\n\n\n\n#**Python\u3067SVG\u306ePath\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308b**\n\nSVG\u306e\u30d1\u30b9\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u30b5\u30dd\u30fc\u30c8\u95a2\u6570\u3092\u4f5c\u6210\u3057\u305f\u3044\uff08\u30d1\u30b9\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u306f\u4ed6\u306b\u4efb\u305b\u308b\uff09\n\u3082\u3063\u3068\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n```Python:Test.py\n\ndef _split_pathdata(pathdata):\n    '''path\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u30b3\u30de\u30f3\u30c9\u304b\u5ea7\u6a19\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\n\n    '''\n\n    if len(pathdata) < 1:\n        raise StopIteration\n\n    for cha in pathdata:\n        if cha in ' \\t\\r\\n':\n            pass\n        elif cha in 'mM':\n            break\n        else:\n            raise StopIteration\n\n    stack = []\n\n    for cha in pathdata:\n        if cha in '0123456789': # Number\n            stack.append(cha)\n        elif cha in '+ ,\\t\\r\\n': # Delimiter\n            if len(stack) > 0:\n                yield ''.join(stack)\n                stack.clear()\n        elif cha in '-': # Sign\n            if len(stack) > 0:\n                yield ''.join(stack)\n                stack.clear()\n            stack.append(cha)\n        elif cha in '.': # Dot\n            if stack.count(cha) > 0:\n                yield ''.join(stack)\n                stack.clear()\n                stack.append('0')\n            stack.append(cha)\n        elif cha in 'abchlmqstvzABCHLMQSTVZ': # Command\n            if len(stack) > 0:\n                yield ''.join(stack)\n                stack.clear()\n            yield cha\n        else:\n            break\n    if len(stack) > 0:\n        yield ''.join(stack)\n\ndef command_fire(fire, pathdata):\n    '''\u30d1\u30b9\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092fire\u306b\u6d41\u3059\u3060\u3051\u306e\u95a2\u6570\n\n    \u51e6\u7406\u306f\u5168\u3066fire\u306b\u6e21\u3057\u305f\u30af\u30e9\u30b9\u3067\u5bfe\u5fdc'''\n    stack = [] # \u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\n    command = '' # \u73fe\u5728\u306e\u30b3\u30de\u30f3\u30c9\n    # SVG\u306e\u30d1\u30b9\u306e\u4e2d\u8eab\u306f\u307b\u307c\u5ea7\u6a19\u6570\u5024\u3000\u2192\u3000float\u306b\u5909\u63db\u3067\u304d\u306a\u3051\u308c\u3070\u30b3\u30de\u30f3\u30c9\u3068\u8003\u3048\u308b\n    for cha in _split_pathdata(pathdata):\n        try:\n            stack.append(float(cha)) # \u30b3\u30de\u30f3\u30c9\u304c\u304d\u305f\u5834\u5408\u306fValueError\u304c\u767a\u751f\n\n            # \u5171\u901a\u306e\u4ed5\u69d8\u3068\u3057\u3066\u73fe\u5728\u306e\u30b3\u30de\u30f3\u30c9\u306b\u5fc5\u8981\u306a\u5ea7\u6a19\u304c\u6e9c\u307e\u3063\u305f\u3089\u305d\u306e\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u3059\u308b\u5f15\u6570fire\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n\n            if command in 'M' and len(stack) == 2:\n                fire.moveto_abs(stack[0], stack[1])\n                stack.clear()\n                command = 'L'\n\n            elif command in 'm' and len(stack) == 2:\n                fire.moveto_rel(stack[0], stack[1])\n                stack.clear()\n                command = 'l'\n\n            elif command in 'L' and len(stack) == 2:\n                fire.lineto_abs(stack[0], stack[1])\n                stack.clear()\n\n            elif command in 'l' and len(stack) == 2:\n                fire.lineto_rel(stack[0], stack[1])\n                stack.clear()\n            '''\u4e2d\u7565'''\n            elif command in 'zZ' and len(stack) > 0:\n                break\n\n        except ValueError:\n            # \u65b0\u3057\u3044\u30b3\u30de\u30f3\u30c9\u304c\u6765\u305f\u3068\u304d\u306b\u30c7\u30fc\u30bf\u304c\u30b9\u30bf\u30c3\u30af\u306b\u6b8b\u3063\u3066\u308b\u5834\u5408\u306f\u69cb\u6587\u30a8\u30e9\u30fc\n            if len(stack) > 0:\n                break\n\n            command = cha\n            # Z\u30b3\u30de\u30f3\u30c9\u306e\u307f\u7279\u6b8a\u306a\u70ba\u3001\u3053\u3061\u3089\u3067\u51e6\u7406\n            if command in 'zZ':\n                fire.closepath()\n\n\nclass TestCase:\n    '''\u30c6\u30b9\u30c8\u3002\u7c21\u7565\u5316\u306e\u70baprint\u6587\u306e\u307f'''\n    def moveto_abs(self, x, y):\n        print(f'M({x}, {y})')\n\n    def moveto_rel(self, x, y):\n        print(f'm({x}, {y})')\n\n    def lineto_abs(self, x, y):\n        print(f'L({x}, {y})')\n\n    def lineto_rel(self, x, y):\n        print(f'l({x}, {y})')\n    '''\u4e2d\u7565'''\n    def closepath(self):\n        print('Z')\n\n'''\nTEST = TestCase()\n\ncommand_fire(TEST, 'M0,0-10.9.90-1-2zm0,1')\n\n#Result\n\n-> M(0.0, 0.0)\n-> L(-10.9, 0.9)\n-> L(-1.0, -2.0)\n-> Z\n-> m(0.0, 1.0)\n'''\n\n```\n\n", "tags": ["SVG", "Python"]}