{"context": "\n\nSidekiq \u306e Server \u30d7\u30ed\u30bb\u30b9\u5185\u3067\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u3059\u308b\u3068\u306f\nSidekiq \u306f Client Side (Worker#perform_asyn \u3092\u547c\u3073\u51fa\u3059\u65b9\uff09 \u3068 Server Side (\u30b9\u30ec\u30c3\u30c9\u30d9\u30fc\u30b9\u3067\u52d5\u4f5c\u3057 Worker#perform \u3092\u5b9f\u884c\u3059\u308b\u65b9) \u306e 2 \u3064\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nServer Side \u306e\u65b9\u306f\u305d\u308c\u81ea\u8eab\u304c\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u52d5\u4f5c\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u5185\u3067\u3055\u3089\u306b\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u62e1\u5f35\u304c\u3044\u304f\u3064\u304b\u5b58\u5728\u3057\u307e\u3059\u3002\n\u79c1\u304c\u77e5\u308b\u3082\u306e\u306e\u591a\u304f\u306f\u300c\u5b9a\u671f\u5b9f\u884c\u300d\u3068\u300ccron \u306e\u3088\u3046\u306a\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u300d\u306b\u95a2\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u305d\u308c\u3089\u306e\u62e1\u5f35\u3092\u898b\u3066\u3044\u304d\u306a\u304c\u3089\u3001\u3069\u3046\u3044\u3046\u624b\u6cd5\u3067\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u5b9f\u65bd\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\ncron \u51e6\u7406\u306b\u95a2\u3059\u308b\u3082\u306e\n\nSidekiq \u672c\u5bb6\u3068\u3057\u3066\u306f\nEnt Periodic Jobs - sidekiq wiki\n\u4e0a\u8a18\u306e Enterprise \u7248\u3067\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001OSS \u3067\u69cb\u6210\u3059\u308b\u4f8b\u3068\u3057\u3066\u4ee5\u4e0b\u306e clockwork \u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002\nsidekiq/examples/clockwork.rb - sidekiq\n\u4ee5\u4e0b\u306f\u629c\u7c8b\u3067\u3059\u3002\nmodule Clockwork\n  # Kick off a bunch of jobs early in the morning\n  every 1.day, 'my_worker.late_night_work', :at => '4:30 am' do\n    MyWorker.late_night_work # \u3053\u306e\u4e2d\u3067 perform_async \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\n  end\n\n  every 1.hour do\n    HourlyWorker.perform_async\n  end\nend\n\n\u500b\u4eba\u7684\u306b\u306f\u3001\u30b8\u30e7\u30d6\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306f\u4f55\u3089\u304b\u4f7f\u3063\u3066\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u308c\u306b\u4e57\u3063\u304b\u308b\u3050\u3089\u3044\u3067\u3044\u3044\u306e\u3067\u306f\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u4e00\u65b9\u3067\u3001\u3053\u306e\u624b\u306e\u62e1\u5f35\u306f\u591a\u304f\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002\nRecurring jobs | Related Projects - sidekiq wiki\n\nsidekiq-cron\nhttps://github.com/ondrejbartas/sidekiq-cron\n\u4e0a\u8a18\u306e\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u306f\u4e00\u756a\u4eba\u6c17\u306e\u3042\u3063\u305f endofunky/sidetiq \u304c Sidekiq \u306e Celluloid \u8131\u5374\u306b\u3064\u3044\u3066\u3044\u3051\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3053\u3068\u3067\u3001\u73fe\u72b6\u306f\u305d\u306e\u6b21\u306b\u4eba\u6c17\u306e\u3042\u3063\u305f\u3053\u3061\u3089\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3067\u306f\u3069\u306e\u3088\u3046\u306b cron \u51e6\u7406\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\n\nSidekiq \u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\n\u3042\u308b\u610f\u5473\u4e00\u756a Sidekiq \u306b\u4e57\u3063\u304b\u3063\u305f\u5b9f\u88c5\u3092\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/ondrejbartas/sidekiq-cron/blob/01ec3dc55b889cd9cba7e18d4ac5c676480a19a6/lib/sidekiq/cron/poller.rb#L9-L9\n\nlib/sidekiq/cron/poller.rb\nmodule Sidekiq\n  module Cron\n    # The Poller checks Redis every N seconds for sheduled cron jobs\n    class Poller < Sidekiq::Scheduled::Poller\n      def enqueue\n        Sidekiq::Cron::Job.all.each do |job|\n          enqueue_job(job)\n        end\n      rescue => ex\n        # ...\n      end\n\n\n\u4e0a\u8a18\u306e\u901a\u308a\u3001 Sidekiq::Scheduled::Poller \u3068\u3044\u3046 Sidekiq \u672c\u4f53\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u5b9f\u88c5\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\nenqueue_job \u306e\u5185\u5bb9\u3092\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\u3001\u6e21\u3055\u308c\u305f job \u304c cron \u306e\u60c5\u5831\u81ea\u8eab\u306a\u306e\u3067\u3001\u73fe\u5728\u6642\u523b\u3068\u6bd4\u8f03\u3057\u3066\u8d77\u52d5\u3055\u305b\u308b\u3079\u304d\u306a\u5834\u5408\u306f Worker#perform_async \u3092\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\u7d9a\u3044\u3066\u3001\u3053\u306e Poller \u306e\u547c\u3073\u51fa\u3057\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/ondrejbartas/sidekiq-cron/blob/01ec3dc55b889cd9cba7e18d4ac5c676480a19a6/lib/sidekiq/cron/launcher.rb#L22-L22\n\nlib/sidekiq/cron/launcher.rb\nmodule Sidekiq\n  class Launcher\n    attr_reader :cron_poller\n\n    alias_method :old_initialize, :initialize\n    def initialize(options)\n      @cron_poller = Sidekiq::Cron::Poller.new\n      old_initialize options\n    end\n\n    alias_method :old_run, :run\n    def run\n      old_run\n      cron_poller.start\n    end\n\n\n\u4e0a\u8a18\u306f Sidekiq \u306e Launcher \u81ea\u8eab\u306b\u30d1\u30c3\u30c1\u3092\u5f53\u3066\u3066\u304a\u308a\u3001\u5c11\u3057\u884c\u5100\u304c\u60aa\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u3068\u3057\u3066\u306f Sidekiq \u306e Server side \u30d7\u30ed\u30bb\u30b9\u304c\u7acb\u3061\u4e0a\u304c\u308b\u6642\u306b\u3001\u4e00\u7dd2\u306b cron \u306e poller \u3082\u8d77\u52d5\u3055\u305b\u308b \u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n\u3053\u306e\u65b9\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\nSidekiq::Scheduled::Poller \u81ea\u8eab\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u3001 Sidekiq \u304c\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30b8\u30e7\u30d6\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u3001 \u5b9a\u671f\u7684\u306a\u30dd\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u51e6\u7406 \u3092\u305d\u306e\u307e\u307e\u6d3b\u7528\u3067\u304d\u308b\u305f\u3081\u3001\u81ea\u8eab\u3067\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3053\u306e\u65b9\u6cd5\u306e\u30c7\u30e1\u30ea\u30c3\u30c8\n\u30c7\u30e1\u30ea\u30c3\u30c8\u3092\u8aac\u660e\u3059\u308b\u524d\u306b\u3001 Sidekiq \u81ea\u8eab\u306e Poller \u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nhttps://github.com/mperham/sidekiq/blob/de13425b444fefa2a6280d49231b51c2741e62d2/lib/sidekiq/scheduled.rb\n\u5fc5\u8981\u6700\u4f4e\u9650\u306b\u629c\u7c8b\u3057\u305f\u3064\u3082\u308a\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u30b3\u30e1\u30f3\u30c8\u304c\u591a\u304f\u3066\u9577\u3044\u3067\u3059  \n\nlib/sidekiq/scheduled.rb\nmodule Sidekiq\n  module Scheduled\n    class Poller\n      include Util\n\n      INITIAL_WAIT = 10\n\n      def start\n        @thread ||= safe_thread(\"scheduler\") do\n          initial_wait\n\n          while !@done\n            enqueue\n            wait\n          end\n        end\n      end\n\n      def enqueue\n        begin\n          @enq.enqueue_jobs\n        rescue => ex\n          # ...\n        end\n      end\n\n      private\n\n      def wait\n        @sleeper.pop(random_poll_interval)\n      rescue Timeout::Error\n        # expected\n      rescue => ex\n        # ...\n      end\n\n      # Calculates a random interval that is \u00b150% the desired average.\n      def random_poll_interval\n        poll_interval_average * rand + poll_interval_average.to_f / 2\n      end\n\n      # We do our best to tune the poll interval to the size of the active Sidekiq\n      # cluster.  If you have 30 processes and poll every 15 seconds, that means one\n      # Sidekiq is checking Redis every 0.5 seconds - way too often for most people\n      # and really bad if the retry or scheduled sets are large.\n      #\n      # Instead try to avoid polling more than once every 15 seconds.  If you have\n      # 30 Sidekiq processes, we'll poll every 30 * 15 or 450 seconds.\n      # To keep things statistically random, we'll sleep a random amount between\n      # 225 and 675 seconds for each poll or 450 seconds on average.  Otherwise restarting\n      # all your Sidekiq processes at the same time will lead to them all polling at\n      # the same time: the thundering herd problem.\n      #\n      # We only do this if poll_interval_average is unset (the default).\n      def poll_interval_average\n        Sidekiq.options[:poll_interval_average] ||= scaled_poll_interval\n      end\n\n      # Calculates an average poll interval based on the number of known Sidekiq processes.\n      # This minimizes a single point of failure by dispersing check-ins but without taxing\n      # Redis if you run many Sidekiq processes.\n      def scaled_poll_interval\n        pcount = Sidekiq::ProcessSet.new.size\n        pcount = 1 if pcount == 0\n        pcount * Sidekiq.options[:average_scheduled_poll_interval]\n      end\n    end\n  end\nend\n\n\n\u307e\u305a\u3001Poller \u81ea\u8eab\u306f start \u3055\u308c\u305f\u5f8c\u306f @done \u304c false \u306e\u9650\u308a\u7d9a\u304f\u30eb\u30fc\u30d7\u306b\u5165\u308a\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u3067 enqueue \u3068 wait \u3092\u7e70\u308a\u8fd4\u3059\u8a33\u3067\u3059\u304c\u3001\u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694\u306f\u4e8b\u5b9f\u4e0a wait \u304c\u3069\u308c\u3050\u3089\u3044\u306b\u306a\u308b\u304b\u306b\u304b\u304b\u3063\u3066\u304d\u307e\u3059\u3002\n\u305d\u3057\u3066 wait \u306f random_poll_interval \u3067\u6c7a\u5b9a\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u8981\u7d20\u304b\u3089\u8a08\u7b97\u3055\u308c\u3066\u6c7a\u307e\u308a\u307e\u3059\u3002\n\nSidekiq \u306e Server \u30d7\u30ed\u30bb\u30b9\u306e\u6570 (Server \u30d7\u30ed\u30bb\u30b9\u306f 1 \u3064\u4ee5\u4e0a\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff09\n\npoll_interval_average \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6570\u5024 (\u30c7\u30d5\u30a9\u30eb\u30c8\u306f nil )\n\n\n\u3053\u306e\u6570\u5024\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308c\u3070\u3001\u3053\u306e\u6570\u5024\u306e +-50% \u3067\u6c7a\u307e\u308b\u3002\n\n\n\naverage_scheduled_poll_interval \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6570\u5024 (\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 15)\n\n\u4f8b\u3048\u3070\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u30d7\u30ed\u30bb\u30b9\u304c 1 \u306e\u5834\u5408\u306f 15 \u79d2\u306e +-50% \u304c\u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694\u3068\u306a\u308a\u307e\u3059\u3002\nsidekiq-cron \u306f\u6700\u5c0f\u306e\u9593\u9694\u5358\u4f4d\u304c 1 \u5206\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u3042\u3063\u3066\u3082 \u30dd\u30fc\u30ea\u30f3\u30b0\u6642\u306e\u76f4\u524d\u306e cron \u306e\u4e00\u81f4\u3057\u305f\u6642\u523b\u3068 60 \u79d2\u4ee5\u4e0a\u305a\u308c\u3066\u3044\u306a\u3044\u304b\uff1f \u3067\u3057\u304b\u5224\u65ad\u304c\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\nsidekiq-cron \u3092\u4f7f\u3046\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u554f\u984c\u304c\u8d77\u3053\u308b\u3088\u3046\u306a\u8ab2\u984c\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7559\u610f\u3057\u3066\u304a\u3044\u3066\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u52a0\u3048\u3066\u3001\u5bfe\u8c61\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f sidekiq-cron \u3060\u3051\u3067\u4f7f\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u4e07\u304c\u4e00 Sidekiq \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u8a2d\u5b9a\u3092\u898b\u76f4\u3059\u3064\u3082\u308a\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u66f4\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u305d\u306e\u5f71\u97ff\u3092\u3082\u308d\u306b\u53d7\u3051\u3066\u3057\u307e\u3044\u307e\u3059   \n\u30c7\u30e1\u30ea\u30c3\u30c8\u3092\u307e\u3068\u3081\u308b\u3068\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\nSidekiq \u81ea\u8eab\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u66f4\u3059\u308b\u3068\u304d\u306f sidekiq-cron \u306e\u4e8b\u3082\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694\u306b\u6ce8\u610f\u3057\u306a\u3044\u3068\u3001\u72d9\u3063\u305f\u6642\u523b\u306b\u8d77\u52d5\u3067\u304d\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\n\n\nsidekiq-scheduler\nhttps://github.com/moove-it/sidekiq-scheduler\nsidekiq-cron \u306b\u7d9a\u3044\u3066\u4eba\u6c17\u306e\u3042\u308a\u305d\u3046\u306a\u62e1\u5f35\u3067\u3059\u3002\n\u3053\u3061\u3089\u306f\u3069\u306e\u3088\u3046\u306b cron \u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\nrufus-scheduler \u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\nsidekiq-cron \u3082\u305d\u3046\u3067\u3057\u305f\u304c\u3001 https://github.com/jmettraux/rufus-scheduler \u3068\u3044\u3046 gem \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001sidekiq-cron \u306f\u5358\u306b cron \u8a18\u6cd5\u306e\u30d1\u30fc\u30b5\u30fc\u3068\u3057\u3066\u5229\u7528\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3057\u305f\u304c\u3001\u3053\u3061\u3089\u3067\u306f\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u51e6\u7406\u81ea\u4f53\u3082\u305d\u306e gem \u306b\u4efb\u305b\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/moove-it/sidekiq-scheduler/blob/master/lib/sidekiq/scheduler.rb#L375\n\nlib/sidekiq/scheduler.rb\n# interval_type \u306f cron, every, at, in, interval \u306e\u3044\u305a\u308c\u304b\ndef new_job(name, interval_type, config, args)\n  opts = { :job => true, :tags => [name] }\n\n  rufus_scheduler.send(interval_type, *args, opts) do |job, time|\n    idempotent_job_enqueue(name, time, sanitize_job_config(config)) if job_enabled?(name)\n  end\nend\n\n\n\u3053\u3053\u3060\u3051\u898b\u3066\u3082\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3059\u304c\u3001\u6307\u5b9a\u3055\u308c\u305f cron \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u306e job \u3092\u767b\u9332\u3059\u308b\u51e6\u7406\u306b\u304a\u3044\u3066\u3001rufus_scheduler \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u767b\u9332\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u65b9\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\n\u5148\u307b\u3069\u306e sidekiq-cron \u3068\u306f\u7570\u306a\u308a\u3001 Sidekiq \u3068\u306f\u72ec\u7acb\u3057\u305f rufus_scheduler \u3068\u3044\u3046\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u30e1\u30ea\u30c3\u30c8\u306b\u3082\u30c7\u30e1\u30ea\u30c3\u30c8\u306b\u3082\u306a\u308a\u3048\u305d\u3046\u3067\u3059\u3002\nrufus_scheduler \u81ea\u8eab\u3082\u30b9\u30ec\u30c3\u30c9\u3067\u52d5\u4f5c\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3082\u3057 Sidekiq \u3068\u306e\u76f8\u6027\u304c\u60aa\u3044\u3088\u3046\u306a\u72b6\u6cc1\u306b\u306a\u3089\u306a\u3044\u3068\u3082\u9650\u308a\u307e\u305b\u3093\u3002\u4e00\u65b9\u3067\u3001Sidekiq \u306e\u5185\u90e8\u306e\u8a2d\u5b9a\u7b49\u306b\u3082\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081\u5b89\u5fc3\u3057\u3066 cron \u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\nrufus_scheduler \u3092\u8aad\u3081\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u610f\u5473\u306e\u3042\u308b\u30b3\u30e1\u30f3\u30c8\u304c\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u306d\u3002\u3002\n\n\ncron \u4ee5\u5916\u306e\u5b9a\u671f\u5b9f\u884c\u306b\u95a2\u3059\u308b\u3082\u306e\n\u3055\u307e\u3056\u307e\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u76e3\u8996\u3084\u62e1\u5f35\u56fa\u6709\u306e\u30ad\u30e5\u30fc\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u306a\u3069\u3001\u7528\u9014\u306f\u62e1\u5f35\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3001\u4e0a\u8a18\u306e \u300cSidekiq::Scheduled::Poller \u5229\u7528\u300d\u300crufus_scheduler \u5229\u7528\u300d\u4ee5\u5916\u306e\u4f8b\u3092 2 \u3064\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nsidekiq-limit_fetch\nhttps://github.com/brainopia/sidekiq-limit_fetch\nSidekiq \u306e Server \u30d7\u30ed\u30bb\u30b9\u306b\u304a\u3044\u3066\u3001\u7279\u5b9a\u306e\u30ad\u30e5\u30fc\u306e\u4e26\u5217\u6570\u3092\u5236\u9650\u3067\u304d\u308b\u62e1\u5f35\u3067\u3059\u3002\uff08 Sidekiq \u81ea\u4f53\u306f\u3001\u5168\u4f53\u306e\u4e26\u5217\u6570\u306e\u6307\u5b9a\u306e\u307f\u3067\u3001\u30ad\u30e5\u30fc\u5358\u4f4d\u3067\u306f\u3067\u304d\u306a\u3044\uff09\n\u3053\u306e\u62e1\u5f35\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u884c\u3046\u306e\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\n\u8907\u6570\u306e Server \u30d7\u30ed\u30bb\u30b9\u306b\u304a\u3051\u308b\u4e26\u5217\u6570\u306e\u5236\u9650\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001 Server \u30d7\u30ed\u30bb\u30b9\u304c\u73fe\u5728\u3069\u308c\u3050\u3089\u3044\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u306e\u76e3\u8996\u3068\u53e4\u3044\u30d7\u30ed\u30bb\u30b9\u60c5\u5831\u306e\u524a\u9664\n\u5bfe\u8c61\u3068\u306a\u308b\u30ad\u30e5\u30fc\u3092\u52d5\u7684\u306b\u8ffd\u52a0\u3059\u308b\u51e6\u7406\n\n\n\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u7121\u9650\u30eb\u30fc\u30d7\nSidekiq \u672c\u4f53\u304c\u3001Celluloid \u304b\u3089 Ruby \u81ea\u8eab\u306e\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u306b\u4e57\u308a\u63db\u3048\u305f\u306e\u306f\u307e\u3060\u8a18\u61b6\u306b\u65b0\u3057\u3044\u3067\u3059\u304c\u3001sidekiq-limit-fetch \u3082 Server \u30d7\u30ed\u30bb\u30b9\u306e\u958b\u59cb\u6642\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3001\u5f8c\u306f\u7121\u9650\u30eb\u30fc\u30d7\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u306e\u5b9f\u88c5\u3067\u3059\u3002\nhttps://github.com/brainopia/sidekiq-limit_fetch/blob/master/lib/sidekiq/limit_fetch/global/monitor.rb\n\nlib/sidekiq/limit_fetch/global/monitor.rb\nmodule Sidekiq::LimitFetch::Global\n  module Monitor\n    extend self\n\n    HEARTBEAT_PREFIX = 'limit:heartbeat:'\n    PROCESS_SET = 'limit:processes'\n    HEARTBEAT_TTL = 20\n    REFRESH_TIMEOUT = 5\n\n    def start!(ttl=HEARTBEAT_TTL, timeout=REFRESH_TIMEOUT)\n      Thread.new do\n        loop do\n          Sidekiq::LimitFetch.redis_retryable do\n            add_dynamic_queues\n            update_heartbeat ttl\n            invalidate_old_processes\n          end\n\n          sleep timeout\n        end\n      end\n    end\n\n\n\u547c\u3073\u51fa\u3057\u306f\u3053\u3061\u3089\u3082\u5c11\u3057\u304a\u884c\u5100\u304c\u60aa\u3044\u3067\u3059\u304c\u3001Sidekiq \u81ea\u8eab\u306e Manager \u306b\u30d1\u30c3\u30c1\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/brainopia/sidekiq-limit_fetch/blob/master/lib/sidekiq/extensions/manager.rb#L10\n\nlib/sidekiq/extensions/manager.rb\nclass Sidekiq::Manager\n  module InitLimitFetch\n    def start\n      Sidekiq::LimitFetch::Queues.start options\n      Sidekiq::LimitFetch::Global::Monitor.start!\n      super\n    end\n  end\n\n  prepend InitLimitFetch\nend\n\n\n\n\u3053\u306e\u65b9\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\n\u3053\u308c\u306f\u3001\u3053\u306e\u65b9\u6cd5\u3060\u304b\u3089\u3068\u3044\u3046\u8a33\u3067\u306f\u306a\u304f\u3001 sidekiq-limit-fetch \u306e\u8ab2\u984c\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u4e0a\u304c\u3063\u305f\u30b9\u30ec\u30c3\u30c9\u306e\u5185\u90e8\u3067\u4f8b\u5916\u304c\u3042\u304c\u3063\u305f\u3068\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\u304a\u305d\u3089\u304f\u3001\u305d\u306e Server \u30d7\u30ed\u30bb\u30b9\u3067\u306e\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\nSidekiq \u81ea\u8eab\u3082\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001Sidekiq \u306f\u30b9\u30ec\u30c3\u30c9\u304c\u4f8b\u5916\u3067\u6b7b\u3093\u3060\u5834\u5408\u306b\u306f\u3001Manager \u5074\u306b\u51e6\u7406\u3092\u623b\u3057\u3001\u518d\u5ea6\u8d77\u3053\u3057\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/mperham/sidekiq/blob/f49b4f11db9620ff6969b2d394edd45ab6b72688/lib/sidekiq/processor.rb#L76-L76\n\nlib/sidekiq/processor.rb\nmodule Sidekiq\n  # Thread \u3068\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u30af\u30e9\u30b9\u3002limit-fetch \u306e\u65b9\u3068\u540c\u69d8\u306b Manager \u304b\u3089\u5b9f\u884c\u3055\u308c\u308b\u3002\n  class Processor\n    def run\n      begin\n        while !@done\n          process_one\n        end\n        @mgr.processor_stopped(self)\n      rescue Sidekiq::Shutdown\n        @mgr.processor_stopped(self)\n      rescue Exception => ex\n        # \u4f8b\u5916\u304c\u767a\u751f\u3055\u308c\u308b\u3068\u3001\u89aa\u306e Manager \u3092\u547c\u3073\u51fa\u3059\n        @mgr.processor_died(self, ex)\n      end\n    end\n\n\nhttps://github.com/mperham/sidekiq/blob/2f9258e4fe77991c526f7a65c92bcf792eef8338/lib/sidekiq/manager.rb#L91-L100\n\nlib/sidekiq/manager.rb\nmodule Sidekiq\n  class Manager\n    def processor_died(processor, reason)\n      @plock.synchronize do\n        @workers.delete(processor)\n        unless @done\n          p = Processor.new(self)\n          @workers << p\n          p.start\n        end\n      end\n    end\n\n\nsidekiq-limit-fetch \u304c\u884c\u3063\u3066\u3044\u308b Monitor \u306e\u51e6\u7406\u306f\u305d\u3046\u305d\u3046\u5931\u6557\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u3053\u306e\u70b9\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3057\u3001\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3046\u5834\u5408\u306b\u306f\u4e0a\u624b\u304f\u5bfe\u51e6\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3067\u3066\u304d\u307e\u3059\u3002\n\nattentive_sidekiq\nhttps://github.com/twonegatives/attentive_sidekiq\n\u6d88\u5931\u3057\u3066\u3057\u307e\u3063\u305f Sidekiq job \u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u62e1\u5f35\u3067\u3059\u3002\n\u3053\u306e\u62e1\u5f35\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u884c\u3046\u306e\u306f\u3001 server middleware \u3067\u6e9c\u3081\u7d9a\u3051\u3066\u3044\u308b\u5b9f\u884c job \u306e\u8a18\u9332\u304b\u3089\u3001\u6d88\u5931\u3057\u305f\u3068\u7591\u308f\u308c\u308b job \u3092\u5b9a\u671f\u7684\u306b\u63a2\u3057\u3001\u6d88\u5931\u30ea\u30b9\u30c8\u306b\u52a0\u3048\u308b\u3053\u3068\u3067\u3059\u3002\n\nconcurrent-ruby \u306e Concurrent::TimerTask \u3092\u4f7f\u3046\nhttps://github.com/ruby-concurrency/concurrent-ruby\nhttp://www.rubydoc.info/github/ruby-concurrency/concurrent-ruby/Concurrent/TimerTask\n\u79c1\u81ea\u8eab\u304c Concurrent::TimerTask \u306b\u5bfe\u3057\u3066\u4e0d\u52c9\u5f37\u306a\u306e\u3067\u8aac\u660e\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u304c\u3001 concurrent-ruby \u88fd\u306e\u5b9a\u671f\u5b9f\u884c\u306a\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u51e6\u7406\u306b\u5bfe\u3057\u3066 Observer \u3092\u4ed8\u3051\u3089\u308c\u308b\u306e\u304c\u9762\u767d\u3044\u3067\u3059\u306d\u3002\n\u3053\u306e\u62e1\u5f35\u3082\u7279\u6b8a\u306a\u4f7f\u3044\u65b9\u306f\u3057\u3066\u304a\u3089\u305a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u666e\u901a\u306b\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u3092\u4e0e\u3048\u3066\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/twonegatives/attentive_sidekiq/blob/master/lib/attentive_sidekiq/manager.rb#L9-L15\nmodule AttentiveSidekiq\n  class Manager\n    def start!\n      task = Concurrent::TimerTask.new(options) do\n        AttentiveSidekiq::Manager.instance.update_disappeared_jobs\n      end\n      task.add_observer(AttentiveSidekiq::UpdaterObserver.new)\n      task.execute\n    end\n\n    private\n\n    def options\n      { \n        execution_interval: AttentiveSidekiq.execution_interval,\n        timeout_interval: AttentiveSidekiq.timeout_interval\n      }\n    end\n\n\n\u3053\u306e\u65b9\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\n\u304a\u305d\u3089\u304f\u3067\u3059\u304c\u3001\u3053\u306e\u62e1\u5f35\u3067\u6b32\u3057\u3044\u5b9a\u671f\u5b9f\u884c\u3067\u3042\u308c\u3070\u3001\u6700\u521d\u306e Sidekiq::Scheduled::Poller \u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u3067\u3082\u5b9f\u73fe\u306f\u3067\u304d\u307e\u3057\u305f\u3002\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5024\u3092\u898b\u308b\u3068\u3001 Poller \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e 15 sec \u3067\u306f\u9593\u9694\u77ed\u3059\u304e\u304b\u3082\u3067\u3059\u304c\uff09\n\u305d\u3046\u3044\u3046\u610f\u5473\u3067\u306f\u3001\u3053\u306e\u62e1\u5f35\u306f sidekiq-scheduler \u304c rufus_scheduler \u3068\u3044\u3046\u300ccron \u4f5c\u308b\u306e\u306b\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u65b9\u6cd5\u300d\u3092\u63a1\u7528\u3057\u305f\u306e\u3068\u540c\u69d8\u306b\u3001\u300c\u5b9a\u671f\u5b9f\u884c\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u3088\u304f\u4f7f\u308f\u308c\u308b\u65b9\u6cd5\u300d\u3092\u63a1\u7528\u3057\u305f\u3068\u3044\u3046\u3060\u3051\u306a\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nsidekiq-limit-fetch \u306e\u3088\u3046\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u5bfe\u3057\u3066\u306f\u3001TimerTask \u304c\u5185\u90e8\u3067 Concurrent::SafeTaskExecutor \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001Observer \u306b\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u3053\u3068\u306f\u901a\u77e5\u3055\u308c\u307e\u3059\u304c\u3001\u30b9\u30ec\u30c3\u30c9\u304c\u843d\u3061\u3066\u4ee5\u964d\u306e\u51e6\u7406\u304c\u884c\u308f\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u7121\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u307e\u3068\u3081\n\u3053\u3053\u307e\u3067\u4ee5\u4e0b\u306e 4 \u3064\u306e\u62e1\u5f35\u3068\u305d\u308c\u304c\u63a1\u7528\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\nsidekiq-cron\n\n\n\nSidekiq::Scheduled::Poller \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u3001 Poller \u76f8\u5f53\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5b9f\u884c\u3092\u884c\u3046\n\n\nsidekiq-scheduler\n\n\n\nrufus_scheduler \u3092\u4f7f\u3044\u3001 cron \u5b9f\u884c\u3092\u7d20\u76f4\u306b\u5b9f\u88c5\n\n\nsidekiq-limit-fetch\n\n\n\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3001\u5185\u90e8\u3067\u7121\u9650\u30eb\u30fc\u30d7 & sleep \u3092\u7e70\u308a\u8fd4\u3057\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5b9f\u884c\u3092\u884c\u3046\n\n\nattentive_sidekiq\n\n\n\nConcurrent::TimerTask \u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5b9f\u884c\u3092\u7d20\u76f4\u306b\u5b9f\u88c5\n\n\n\n\u305d\u308c\u305e\u308c\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u3001\u4ed6\u306b\u3082\u3084\u308a\u65b9\u306f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5b9f\u73fe\u3057\u305f\u3044\u30b1\u30fc\u30b9\u306b\u5fdc\u3058\u3066\u9069\u5207\u306b\u624b\u6bb5\u3092\u9078\u3079\u308b\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\nAppendix\n\nServer \u30d7\u30ed\u30bb\u30b9\u306e\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u958b\u59cb\u3059\u308b\u306e\u306f\u3069\u3053\u304c\u3044\u3044\u304b\n\u300c\u304a\u884c\u5100\u304c\u60aa\u3044\u300d\u3068\u4f55\u5ea6\u304b\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u624b\u306e Server \u30d7\u30ed\u30bb\u30b9\u3067\u306e\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u8d77\u52d5\u3059\u308b\u306e\u306b\u306f\u4e00\u5fdc\u7528\u610f\u3055\u308c\u305f\u5834\u6240\u304c\u3042\u308a\u307e\u3059\u3002\nEvents | Deployment - sidekiq wiki\n\u3053\u3053\u306b\u3042\u308b\u3088\u3046\u306b startup, quiet (\u505c\u6b62\u524d\u306b\u65b0\u305f\u306a\u975e\u540c\u671f\u30b8\u30e7\u30d6\u3092\u751f\u6210\u3057\u306a\u304f\u306a\u308b\u72b6\u614b\uff09, shutdown \uff08\u5b9f\u884c\u4e2d\u3060\u3063\u305f\u975e\u540c\u671f\u30b8\u30e7\u30d6\u3092\u5168\u90e8\u5b9f\u884c\u3057\u304a\u308f\u308a\u3001Server \u30d7\u30ed\u30bb\u30b9\u81ea\u4f53\u304c\u505c\u6b62\u3059\u308b\uff09 \u306e 3 \u3064\u306b\u52a0\u3048\u3066 heartbeat \u306e 4 \u3064\u304c\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e startup \u3067\u884c\u3046\u306e\u304c\u672c\u6765\u7684\u306b\u306f\u826f\u3055\u305d\u3046\u3067\u3059\u3002\nsidekiq-cron \u306f\u672c\u5bb6\u304b\u3089\u30c4\u30c3\u30b3\u307e\u308c\u3066\u3044\u308b\nsidekiq-scheculer \u306f\u305d\u306e\u3068\u304a\u308a\u306b\u3084\u3063\u3066\u308b\n## Sidekiq \u306e Server \u30d7\u30ed\u30bb\u30b9\u5185\u3067\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u3059\u308b\u3068\u306f\n\nSidekiq \u306f Client Side (`Worker#perform_asyn` \u3092\u547c\u3073\u51fa\u3059\u65b9\uff09 \u3068 Server Side (\u30b9\u30ec\u30c3\u30c9\u30d9\u30fc\u30b9\u3067\u52d5\u4f5c\u3057 `Worker#perform` \u3092\u5b9f\u884c\u3059\u308b\u65b9) \u306e 2 \u3064\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nServer Side \u306e\u65b9\u306f\u305d\u308c\u81ea\u8eab\u304c\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u52d5\u4f5c\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u5185\u3067\u3055\u3089\u306b\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u62e1\u5f35\u304c\u3044\u304f\u3064\u304b\u5b58\u5728\u3057\u307e\u3059\u3002\n\n\u79c1\u304c\u77e5\u308b\u3082\u306e\u306e\u591a\u304f\u306f\u300c\u5b9a\u671f\u5b9f\u884c\u300d\u3068\u300ccron \u306e\u3088\u3046\u306a\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u300d\u306b\u95a2\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u305d\u308c\u3089\u306e\u62e1\u5f35\u3092\u898b\u3066\u3044\u304d\u306a\u304c\u3089\u3001\u3069\u3046\u3044\u3046\u624b\u6cd5\u3067\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u5b9f\u65bd\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## cron \u51e6\u7406\u306b\u95a2\u3059\u308b\u3082\u306e\n\n### Sidekiq \u672c\u5bb6\u3068\u3057\u3066\u306f\n\n[Ent Periodic Jobs - sidekiq wiki](https://github.com/mperham/sidekiq/wiki/Ent-Periodic-Jobs)\n\n\u4e0a\u8a18\u306e Enterprise \u7248\u3067\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001OSS \u3067\u69cb\u6210\u3059\u308b\u4f8b\u3068\u3057\u3066\u4ee5\u4e0b\u306e `clockwork` \u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002\n\n[sidekiq/examples/clockwork.rb - sidekiq](https://github.com/mperham/sidekiq/blob/905123c16ac94dae606ae5457ced133f8a96e4ed/examples/clockwork.rb)\n\n\u4ee5\u4e0b\u306f\u629c\u7c8b\u3067\u3059\u3002\n\n```rb\nmodule Clockwork\n  # Kick off a bunch of jobs early in the morning\n  every 1.day, 'my_worker.late_night_work', :at => '4:30 am' do\n    MyWorker.late_night_work # \u3053\u306e\u4e2d\u3067 perform_async \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\n  end\n\n  every 1.hour do\n    HourlyWorker.perform_async\n  end\nend\n```\n\n\u500b\u4eba\u7684\u306b\u306f\u3001\u30b8\u30e7\u30d6\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306f\u4f55\u3089\u304b\u4f7f\u3063\u3066\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u308c\u306b\u4e57\u3063\u304b\u308b\u3050\u3089\u3044\u3067\u3044\u3044\u306e\u3067\u306f\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4e00\u65b9\u3067\u3001\u3053\u306e\u624b\u306e\u62e1\u5f35\u306f\u591a\u304f\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n[Recurring jobs | Related Projects - sidekiq wiki](https://github.com/mperham/sidekiq/wiki/Related-Projects#recurring-jobs)\n\n### sidekiq-cron\n\nhttps://github.com/ondrejbartas/sidekiq-cron\n\n\u4e0a\u8a18\u306e\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u306f\u4e00\u756a\u4eba\u6c17\u306e\u3042\u3063\u305f [endofunky/sidetiq](https://github.com/endofunky/sidetiq) \u304c Sidekiq \u306e Celluloid \u8131\u5374\u306b\u3064\u3044\u3066\u3044\u3051\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3053\u3068\u3067\u3001\u73fe\u72b6\u306f\u305d\u306e\u6b21\u306b\u4eba\u6c17\u306e\u3042\u3063\u305f\u3053\u3061\u3089\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3067\u306f\u3069\u306e\u3088\u3046\u306b cron \u51e6\u7406\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\n\n#### Sidekiq \u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\n\n\u3042\u308b\u610f\u5473\u4e00\u756a Sidekiq \u306b\u4e57\u3063\u304b\u3063\u305f\u5b9f\u88c5\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/ondrejbartas/sidekiq-cron/blob/01ec3dc55b889cd9cba7e18d4ac5c676480a19a6/lib/sidekiq/cron/poller.rb#L9-L9\n\n```rb:lib/sidekiq/cron/poller.rb\nmodule Sidekiq\n  module Cron\n    # The Poller checks Redis every N seconds for sheduled cron jobs\n    class Poller < Sidekiq::Scheduled::Poller\n      def enqueue\n        Sidekiq::Cron::Job.all.each do |job|\n          enqueue_job(job)\n        end\n      rescue => ex\n        # ...\n      end\n```\n\n\u4e0a\u8a18\u306e\u901a\u308a\u3001 `Sidekiq::Scheduled::Poller` \u3068\u3044\u3046 Sidekiq \u672c\u4f53\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u5b9f\u88c5\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\n\n`enqueue_job` \u306e\u5185\u5bb9\u3092\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\u3001\u6e21\u3055\u308c\u305f `job` \u304c cron \u306e\u60c5\u5831\u81ea\u8eab\u306a\u306e\u3067\u3001\u73fe\u5728\u6642\u523b\u3068\u6bd4\u8f03\u3057\u3066\u8d77\u52d5\u3055\u305b\u308b\u3079\u304d\u306a\u5834\u5408\u306f `Worker#perform_async` \u3092\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n\u7d9a\u3044\u3066\u3001\u3053\u306e Poller \u306e\u547c\u3073\u51fa\u3057\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/ondrejbartas/sidekiq-cron/blob/01ec3dc55b889cd9cba7e18d4ac5c676480a19a6/lib/sidekiq/cron/launcher.rb#L22-L22\n\n```rb:lib/sidekiq/cron/launcher.rb\nmodule Sidekiq\n  class Launcher\n    attr_reader :cron_poller\n\n    alias_method :old_initialize, :initialize\n    def initialize(options)\n      @cron_poller = Sidekiq::Cron::Poller.new\n      old_initialize options\n    end\n\n    alias_method :old_run, :run\n    def run\n      old_run\n      cron_poller.start\n    end\n```\n\n\u4e0a\u8a18\u306f Sidekiq \u306e `Launcher` \u81ea\u8eab\u306b\u30d1\u30c3\u30c1\u3092\u5f53\u3066\u3066\u304a\u308a\u3001\u5c11\u3057\u884c\u5100\u304c\u60aa\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u3068\u3057\u3066\u306f __Sidekiq \u306e Server side \u30d7\u30ed\u30bb\u30b9\u304c\u7acb\u3061\u4e0a\u304c\u308b\u6642\u306b\u3001\u4e00\u7dd2\u306b cron \u306e poller \u3082\u8d77\u52d5\u3055\u305b\u308b__ \u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n#### \u3053\u306e\u65b9\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\n\n`Sidekiq::Scheduled::Poller` \u81ea\u8eab\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u3001 Sidekiq \u304c\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30b8\u30e7\u30d6\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u3001 __\u5b9a\u671f\u7684\u306a\u30dd\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u51e6\u7406__ \u3092\u305d\u306e\u307e\u307e\u6d3b\u7528\u3067\u304d\u308b\u305f\u3081\u3001\u81ea\u8eab\u3067\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n#### \u3053\u306e\u65b9\u6cd5\u306e\u30c7\u30e1\u30ea\u30c3\u30c8\n\n\u30c7\u30e1\u30ea\u30c3\u30c8\u3092\u8aac\u660e\u3059\u308b\u524d\u306b\u3001 Sidekiq \u81ea\u8eab\u306e `Poller` \u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nhttps://github.com/mperham/sidekiq/blob/de13425b444fefa2a6280d49231b51c2741e62d2/lib/sidekiq/scheduled.rb\n\n\u5fc5\u8981\u6700\u4f4e\u9650\u306b\u629c\u7c8b\u3057\u305f\u3064\u3082\u308a\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u30b3\u30e1\u30f3\u30c8\u304c\u591a\u304f\u3066\u9577\u3044\u3067\u3059 :sweat_smile: \n\n```rb:lib/sidekiq/scheduled.rb\nmodule Sidekiq\n  module Scheduled\n    class Poller\n      include Util\n\n      INITIAL_WAIT = 10\n\n      def start\n        @thread ||= safe_thread(\"scheduler\") do\n          initial_wait\n\n          while !@done\n            enqueue\n            wait\n          end\n        end\n      end\n\n      def enqueue\n        begin\n          @enq.enqueue_jobs\n        rescue => ex\n          # ...\n        end\n      end\n\n      private\n\n      def wait\n        @sleeper.pop(random_poll_interval)\n      rescue Timeout::Error\n        # expected\n      rescue => ex\n        # ...\n      end\n\n      # Calculates a random interval that is \u00b150% the desired average.\n      def random_poll_interval\n        poll_interval_average * rand + poll_interval_average.to_f / 2\n      end\n\n      # We do our best to tune the poll interval to the size of the active Sidekiq\n      # cluster.  If you have 30 processes and poll every 15 seconds, that means one\n      # Sidekiq is checking Redis every 0.5 seconds - way too often for most people\n      # and really bad if the retry or scheduled sets are large.\n      #\n      # Instead try to avoid polling more than once every 15 seconds.  If you have\n      # 30 Sidekiq processes, we'll poll every 30 * 15 or 450 seconds.\n      # To keep things statistically random, we'll sleep a random amount between\n      # 225 and 675 seconds for each poll or 450 seconds on average.  Otherwise restarting\n      # all your Sidekiq processes at the same time will lead to them all polling at\n      # the same time: the thundering herd problem.\n      #\n      # We only do this if poll_interval_average is unset (the default).\n      def poll_interval_average\n        Sidekiq.options[:poll_interval_average] ||= scaled_poll_interval\n      end\n\n      # Calculates an average poll interval based on the number of known Sidekiq processes.\n      # This minimizes a single point of failure by dispersing check-ins but without taxing\n      # Redis if you run many Sidekiq processes.\n      def scaled_poll_interval\n        pcount = Sidekiq::ProcessSet.new.size\n        pcount = 1 if pcount == 0\n        pcount * Sidekiq.options[:average_scheduled_poll_interval]\n      end\n    end\n  end\nend\n```\n\n\u307e\u305a\u3001`Poller` \u81ea\u8eab\u306f `start` \u3055\u308c\u305f\u5f8c\u306f `@done` \u304c false \u306e\u9650\u308a\u7d9a\u304f\u30eb\u30fc\u30d7\u306b\u5165\u308a\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u3067 `enqueue` \u3068 `wait` \u3092\u7e70\u308a\u8fd4\u3059\u8a33\u3067\u3059\u304c\u3001\u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694\u306f\u4e8b\u5b9f\u4e0a `wait` \u304c\u3069\u308c\u3050\u3089\u3044\u306b\u306a\u308b\u304b\u306b\u304b\u304b\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u305d\u3057\u3066 `wait` \u306f `random_poll_interval` \u3067\u6c7a\u5b9a\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u8981\u7d20\u304b\u3089\u8a08\u7b97\u3055\u308c\u3066\u6c7a\u307e\u308a\u307e\u3059\u3002\n\n- Sidekiq \u306e Server \u30d7\u30ed\u30bb\u30b9\u306e\u6570 (Server \u30d7\u30ed\u30bb\u30b9\u306f 1 \u3064\u4ee5\u4e0a\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff09\n- `poll_interval_average` \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6570\u5024 (\u30c7\u30d5\u30a9\u30eb\u30c8\u306f `nil` )\n  - \u3053\u306e\u6570\u5024\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308c\u3070\u3001\u3053\u306e\u6570\u5024\u306e `+-50%` \u3067\u6c7a\u307e\u308b\u3002\n- `average_scheduled_poll_interval` \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6570\u5024 (\u30c7\u30d5\u30a9\u30eb\u30c8\u306f `15`)\n\n\u4f8b\u3048\u3070\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u30d7\u30ed\u30bb\u30b9\u304c 1 \u306e\u5834\u5408\u306f __15 \u79d2\u306e +-50%__ \u304c\u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694\u3068\u306a\u308a\u307e\u3059\u3002\n\n`sidekiq-cron` \u306f\u6700\u5c0f\u306e\u9593\u9694\u5358\u4f4d\u304c 1 \u5206\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u3042\u3063\u3066\u3082 __\u30dd\u30fc\u30ea\u30f3\u30b0\u6642\u306e\u76f4\u524d\u306e cron \u306e\u4e00\u81f4\u3057\u305f\u6642\u523b\u3068 60 \u79d2\u4ee5\u4e0a\u305a\u308c\u3066\u3044\u306a\u3044\u304b\uff1f__ \u3067\u3057\u304b\u5224\u65ad\u304c\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\n`sidekiq-cron` \u3092\u4f7f\u3046\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u554f\u984c\u304c\u8d77\u3053\u308b\u3088\u3046\u306a\u8ab2\u984c\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7559\u610f\u3057\u3066\u304a\u3044\u3066\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u52a0\u3048\u3066\u3001\u5bfe\u8c61\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f `sidekiq-cron` \u3060\u3051\u3067\u4f7f\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u4e07\u304c\u4e00 Sidekiq \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u8a2d\u5b9a\u3092\u898b\u76f4\u3059\u3064\u3082\u308a\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u66f4\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u305d\u306e\u5f71\u97ff\u3092\u3082\u308d\u306b\u53d7\u3051\u3066\u3057\u307e\u3044\u307e\u3059 :bomb: :scream: \n\n\u30c7\u30e1\u30ea\u30c3\u30c8\u3092\u307e\u3068\u3081\u308b\u3068\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n- Sidekiq \u81ea\u8eab\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u66f4\u3059\u308b\u3068\u304d\u306f `sidekiq-cron` \u306e\u4e8b\u3082\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n- \u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694\u306b\u6ce8\u610f\u3057\u306a\u3044\u3068\u3001\u72d9\u3063\u305f\u6642\u523b\u306b\u8d77\u52d5\u3067\u304d\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\n\n### sidekiq-scheduler\n\nhttps://github.com/moove-it/sidekiq-scheduler\n\n`sidekiq-cron` \u306b\u7d9a\u3044\u3066\u4eba\u6c17\u306e\u3042\u308a\u305d\u3046\u306a\u62e1\u5f35\u3067\u3059\u3002\n\n\u3053\u3061\u3089\u306f\u3069\u306e\u3088\u3046\u306b cron \u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n#### rufus-scheduler \u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\n\n`sidekiq-cron` \u3082\u305d\u3046\u3067\u3057\u305f\u304c\u3001 https://github.com/jmettraux/rufus-scheduler \u3068\u3044\u3046 gem \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001`sidekiq-cron` \u306f\u5358\u306b cron \u8a18\u6cd5\u306e\u30d1\u30fc\u30b5\u30fc\u3068\u3057\u3066\u5229\u7528\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3057\u305f\u304c\u3001\u3053\u3061\u3089\u3067\u306f\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u51e6\u7406\u81ea\u4f53\u3082\u305d\u306e gem \u306b\u4efb\u305b\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/moove-it/sidekiq-scheduler/blob/master/lib/sidekiq/scheduler.rb#L375\n\n```rb:lib/sidekiq/scheduler.rb\n# interval_type \u306f cron, every, at, in, interval \u306e\u3044\u305a\u308c\u304b\ndef new_job(name, interval_type, config, args)\n  opts = { :job => true, :tags => [name] }\n\n  rufus_scheduler.send(interval_type, *args, opts) do |job, time|\n    idempotent_job_enqueue(name, time, sanitize_job_config(config)) if job_enabled?(name)\n  end\nend\n```\n\n\u3053\u3053\u3060\u3051\u898b\u3066\u3082\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3059\u304c\u3001\u6307\u5b9a\u3055\u308c\u305f cron \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u306e job \u3092\u767b\u9332\u3059\u308b\u51e6\u7406\u306b\u304a\u3044\u3066\u3001`rufus_scheduler` \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u767b\u9332\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n#### \u3053\u306e\u65b9\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\n\n\u5148\u307b\u3069\u306e `sidekiq-cron` \u3068\u306f\u7570\u306a\u308a\u3001 Sidekiq \u3068\u306f\u72ec\u7acb\u3057\u305f `rufus_scheduler` \u3068\u3044\u3046\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u30e1\u30ea\u30c3\u30c8\u306b\u3082\u30c7\u30e1\u30ea\u30c3\u30c8\u306b\u3082\u306a\u308a\u3048\u305d\u3046\u3067\u3059\u3002\n\n`rufus_scheduler` \u81ea\u8eab\u3082\u30b9\u30ec\u30c3\u30c9\u3067\u52d5\u4f5c\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3082\u3057 Sidekiq \u3068\u306e\u76f8\u6027\u304c\u60aa\u3044\u3088\u3046\u306a\u72b6\u6cc1\u306b\u306a\u3089\u306a\u3044\u3068\u3082\u9650\u308a\u307e\u305b\u3093\u3002\u4e00\u65b9\u3067\u3001Sidekiq \u306e\u5185\u90e8\u306e\u8a2d\u5b9a\u7b49\u306b\u3082\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081\u5b89\u5fc3\u3057\u3066 cron \u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n> rufus_scheduler \u3092\u8aad\u3081\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u610f\u5473\u306e\u3042\u308b\u30b3\u30e1\u30f3\u30c8\u304c\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u306d\u3002\u3002\n\n## cron \u4ee5\u5916\u306e\u5b9a\u671f\u5b9f\u884c\u306b\u95a2\u3059\u308b\u3082\u306e\n\n\u3055\u307e\u3056\u307e\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u76e3\u8996\u3084\u62e1\u5f35\u56fa\u6709\u306e\u30ad\u30e5\u30fc\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u306a\u3069\u3001\u7528\u9014\u306f\u62e1\u5f35\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3001\u4e0a\u8a18\u306e \u300c`Sidekiq::Scheduled::Poller` \u5229\u7528\u300d\u300c`rufus_scheduler` \u5229\u7528\u300d\u4ee5\u5916\u306e\u4f8b\u3092 2 \u3064\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n### sidekiq-limit_fetch\n\nhttps://github.com/brainopia/sidekiq-limit_fetch\n\nSidekiq \u306e Server \u30d7\u30ed\u30bb\u30b9\u306b\u304a\u3044\u3066\u3001\u7279\u5b9a\u306e\u30ad\u30e5\u30fc\u306e\u4e26\u5217\u6570\u3092\u5236\u9650\u3067\u304d\u308b\u62e1\u5f35\u3067\u3059\u3002\uff08 Sidekiq \u81ea\u4f53\u306f\u3001\u5168\u4f53\u306e\u4e26\u5217\u6570\u306e\u6307\u5b9a\u306e\u307f\u3067\u3001\u30ad\u30e5\u30fc\u5358\u4f4d\u3067\u306f\u3067\u304d\u306a\u3044\uff09\n\n\u3053\u306e\u62e1\u5f35\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u884c\u3046\u306e\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\n- \u8907\u6570\u306e Server \u30d7\u30ed\u30bb\u30b9\u306b\u304a\u3051\u308b\u4e26\u5217\u6570\u306e\u5236\u9650\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001 Server \u30d7\u30ed\u30bb\u30b9\u304c\u73fe\u5728\u3069\u308c\u3050\u3089\u3044\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u306e\u76e3\u8996\u3068\u53e4\u3044\u30d7\u30ed\u30bb\u30b9\u60c5\u5831\u306e\u524a\u9664\n- \u5bfe\u8c61\u3068\u306a\u308b\u30ad\u30e5\u30fc\u3092\u52d5\u7684\u306b\u8ffd\u52a0\u3059\u308b\u51e6\u7406\n\n### \u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u7121\u9650\u30eb\u30fc\u30d7\n\nSidekiq \u672c\u4f53\u304c\u3001`Celluloid` \u304b\u3089 Ruby \u81ea\u8eab\u306e\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u306b\u4e57\u308a\u63db\u3048\u305f\u306e\u306f\u307e\u3060\u8a18\u61b6\u306b\u65b0\u3057\u3044\u3067\u3059\u304c\u3001`sidekiq-limit-fetch` \u3082 Server \u30d7\u30ed\u30bb\u30b9\u306e\u958b\u59cb\u6642\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3001\u5f8c\u306f\u7121\u9650\u30eb\u30fc\u30d7\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\nhttps://github.com/brainopia/sidekiq-limit_fetch/blob/master/lib/sidekiq/limit_fetch/global/monitor.rb\n\n```rb:lib/sidekiq/limit_fetch/global/monitor.rb\nmodule Sidekiq::LimitFetch::Global\n  module Monitor\n    extend self\n\n    HEARTBEAT_PREFIX = 'limit:heartbeat:'\n    PROCESS_SET = 'limit:processes'\n    HEARTBEAT_TTL = 20\n    REFRESH_TIMEOUT = 5\n\n    def start!(ttl=HEARTBEAT_TTL, timeout=REFRESH_TIMEOUT)\n      Thread.new do\n        loop do\n          Sidekiq::LimitFetch.redis_retryable do\n            add_dynamic_queues\n            update_heartbeat ttl\n            invalidate_old_processes\n          end\n\n          sleep timeout\n        end\n      end\n    end\n```\n\n\u547c\u3073\u51fa\u3057\u306f\u3053\u3061\u3089\u3082\u5c11\u3057\u304a\u884c\u5100\u304c\u60aa\u3044\u3067\u3059\u304c\u3001Sidekiq \u81ea\u8eab\u306e `Manager` \u306b\u30d1\u30c3\u30c1\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/brainopia/sidekiq-limit_fetch/blob/master/lib/sidekiq/extensions/manager.rb#L10\n\n```rb:lib/sidekiq/extensions/manager.rb\nclass Sidekiq::Manager\n  module InitLimitFetch\n    def start\n      Sidekiq::LimitFetch::Queues.start options\n      Sidekiq::LimitFetch::Global::Monitor.start!\n      super\n    end\n  end\n\n  prepend InitLimitFetch\nend\n```\n\n#### \u3053\u306e\u65b9\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\n\n\u3053\u308c\u306f\u3001\u3053\u306e\u65b9\u6cd5\u3060\u304b\u3089\u3068\u3044\u3046\u8a33\u3067\u306f\u306a\u304f\u3001 `sidekiq-limit-fetch` \u306e\u8ab2\u984c\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u4e0a\u304c\u3063\u305f\u30b9\u30ec\u30c3\u30c9\u306e\u5185\u90e8\u3067\u4f8b\u5916\u304c\u3042\u304c\u3063\u305f\u3068\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u304a\u305d\u3089\u304f\u3001\u305d\u306e Server \u30d7\u30ed\u30bb\u30b9\u3067\u306e\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\nSidekiq \u81ea\u8eab\u3082\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001Sidekiq \u306f\u30b9\u30ec\u30c3\u30c9\u304c\u4f8b\u5916\u3067\u6b7b\u3093\u3060\u5834\u5408\u306b\u306f\u3001Manager \u5074\u306b\u51e6\u7406\u3092\u623b\u3057\u3001\u518d\u5ea6\u8d77\u3053\u3057\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/mperham/sidekiq/blob/f49b4f11db9620ff6969b2d394edd45ab6b72688/lib/sidekiq/processor.rb#L76-L76\n\n```rb:lib/sidekiq/processor.rb\nmodule Sidekiq\n  # Thread \u3068\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u30af\u30e9\u30b9\u3002limit-fetch \u306e\u65b9\u3068\u540c\u69d8\u306b Manager \u304b\u3089\u5b9f\u884c\u3055\u308c\u308b\u3002\n  class Processor\n    def run\n      begin\n        while !@done\n          process_one\n        end\n        @mgr.processor_stopped(self)\n      rescue Sidekiq::Shutdown\n        @mgr.processor_stopped(self)\n      rescue Exception => ex\n        # \u4f8b\u5916\u304c\u767a\u751f\u3055\u308c\u308b\u3068\u3001\u89aa\u306e Manager \u3092\u547c\u3073\u51fa\u3059\n        @mgr.processor_died(self, ex)\n      end\n    end\n```\n\nhttps://github.com/mperham/sidekiq/blob/2f9258e4fe77991c526f7a65c92bcf792eef8338/lib/sidekiq/manager.rb#L91-L100\n\n```rb:lib/sidekiq/manager.rb\nmodule Sidekiq\n  class Manager\n    def processor_died(processor, reason)\n      @plock.synchronize do\n        @workers.delete(processor)\n        unless @done\n          p = Processor.new(self)\n          @workers << p\n          p.start\n        end\n      end\n    end\n```\n\n`sidekiq-limit-fetch` \u304c\u884c\u3063\u3066\u3044\u308b Monitor \u306e\u51e6\u7406\u306f\u305d\u3046\u305d\u3046\u5931\u6557\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u3053\u306e\u70b9\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3057\u3001\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3046\u5834\u5408\u306b\u306f\u4e0a\u624b\u304f\u5bfe\u51e6\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3067\u3066\u304d\u307e\u3059\u3002\n\n### attentive_sidekiq\n\nhttps://github.com/twonegatives/attentive_sidekiq\n\n\u6d88\u5931\u3057\u3066\u3057\u307e\u3063\u305f Sidekiq job \u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u62e1\u5f35\u3067\u3059\u3002\n\n\u3053\u306e\u62e1\u5f35\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u884c\u3046\u306e\u306f\u3001 server middleware \u3067\u6e9c\u3081\u7d9a\u3051\u3066\u3044\u308b\u5b9f\u884c job \u306e\u8a18\u9332\u304b\u3089\u3001\u6d88\u5931\u3057\u305f\u3068\u7591\u308f\u308c\u308b job \u3092\u5b9a\u671f\u7684\u306b\u63a2\u3057\u3001\u6d88\u5931\u30ea\u30b9\u30c8\u306b\u52a0\u3048\u308b\u3053\u3068\u3067\u3059\u3002\n\n#### concurrent-ruby \u306e Concurrent::TimerTask \u3092\u4f7f\u3046\n\nhttps://github.com/ruby-concurrency/concurrent-ruby\nhttp://www.rubydoc.info/github/ruby-concurrency/concurrent-ruby/Concurrent/TimerTask\n\n\u79c1\u81ea\u8eab\u304c `Concurrent::TimerTask` \u306b\u5bfe\u3057\u3066\u4e0d\u52c9\u5f37\u306a\u306e\u3067\u8aac\u660e\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u304c\u3001 `concurrent-ruby` \u88fd\u306e\u5b9a\u671f\u5b9f\u884c\u306a\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u51e6\u7406\u306b\u5bfe\u3057\u3066 `Observer` \u3092\u4ed8\u3051\u3089\u308c\u308b\u306e\u304c\u9762\u767d\u3044\u3067\u3059\u306d\u3002\n\n\u3053\u306e\u62e1\u5f35\u3082\u7279\u6b8a\u306a\u4f7f\u3044\u65b9\u306f\u3057\u3066\u304a\u3089\u305a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u666e\u901a\u306b\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u3092\u4e0e\u3048\u3066\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/twonegatives/attentive_sidekiq/blob/master/lib/attentive_sidekiq/manager.rb#L9-L15\n\n```rb\nmodule AttentiveSidekiq\n  class Manager\n    def start!\n      task = Concurrent::TimerTask.new(options) do\n        AttentiveSidekiq::Manager.instance.update_disappeared_jobs\n      end\n      task.add_observer(AttentiveSidekiq::UpdaterObserver.new)\n      task.execute\n    end\n\n    private\n    \n    def options\n      { \n        execution_interval: AttentiveSidekiq.execution_interval,\n        timeout_interval: AttentiveSidekiq.timeout_interval\n      }\n    end\n```\n\n#### \u3053\u306e\u65b9\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\n\n\u304a\u305d\u3089\u304f\u3067\u3059\u304c\u3001\u3053\u306e\u62e1\u5f35\u3067\u6b32\u3057\u3044\u5b9a\u671f\u5b9f\u884c\u3067\u3042\u308c\u3070\u3001\u6700\u521d\u306e `Sidekiq::Scheduled::Poller` \u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u3067\u3082\u5b9f\u73fe\u306f\u3067\u304d\u307e\u3057\u305f\u3002\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5024\u3092\u898b\u308b\u3068\u3001 `Poller` \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e 15 sec \u3067\u306f\u9593\u9694\u77ed\u3059\u304e\u304b\u3082\u3067\u3059\u304c\uff09\n\n\u305d\u3046\u3044\u3046\u610f\u5473\u3067\u306f\u3001\u3053\u306e\u62e1\u5f35\u306f `sidekiq-scheduler` \u304c `rufus_scheduler` \u3068\u3044\u3046\u300ccron \u4f5c\u308b\u306e\u306b\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u65b9\u6cd5\u300d\u3092\u63a1\u7528\u3057\u305f\u306e\u3068\u540c\u69d8\u306b\u3001\u300c\u5b9a\u671f\u5b9f\u884c\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u3088\u304f\u4f7f\u308f\u308c\u308b\u65b9\u6cd5\u300d\u3092\u63a1\u7528\u3057\u305f\u3068\u3044\u3046\u3060\u3051\u306a\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n`sidekiq-limit-fetch` \u306e\u3088\u3046\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u5bfe\u3057\u3066\u306f\u3001`TimerTask` \u304c\u5185\u90e8\u3067 `Concurrent::SafeTaskExecutor` \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001`Observer` \u306b\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u3053\u3068\u306f\u901a\u77e5\u3055\u308c\u307e\u3059\u304c\u3001\u30b9\u30ec\u30c3\u30c9\u304c\u843d\u3061\u3066\u4ee5\u964d\u306e\u51e6\u7406\u304c\u884c\u308f\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u7121\u3055\u305d\u3046\u3067\u3059\u3002\n\n## \u307e\u3068\u3081\n\n\u3053\u3053\u307e\u3067\u4ee5\u4e0b\u306e 4 \u3064\u306e\u62e1\u5f35\u3068\u305d\u308c\u304c\u63a1\u7528\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\n- sidekiq-cron\n  - `Sidekiq::Scheduled::Poller` \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u3001 `Poller` \u76f8\u5f53\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5b9f\u884c\u3092\u884c\u3046\n- sidekiq-scheduler\n  - `rufus_scheduler` \u3092\u4f7f\u3044\u3001 cron \u5b9f\u884c\u3092\u7d20\u76f4\u306b\u5b9f\u88c5\n- sidekiq-limit-fetch\n  - \u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3001\u5185\u90e8\u3067\u7121\u9650\u30eb\u30fc\u30d7 & sleep \u3092\u7e70\u308a\u8fd4\u3057\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5b9f\u884c\u3092\u884c\u3046\n- attentive_sidekiq\n  - `Concurrent::TimerTask` \u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5b9f\u884c\u3092\u7d20\u76f4\u306b\u5b9f\u88c5\n\n\u305d\u308c\u305e\u308c\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u3001\u4ed6\u306b\u3082\u3084\u308a\u65b9\u306f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5b9f\u73fe\u3057\u305f\u3044\u30b1\u30fc\u30b9\u306b\u5fdc\u3058\u3066\u9069\u5207\u306b\u624b\u6bb5\u3092\u9078\u3079\u308b\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n## Appendix\n\n### Server \u30d7\u30ed\u30bb\u30b9\u306e\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u958b\u59cb\u3059\u308b\u306e\u306f\u3069\u3053\u304c\u3044\u3044\u304b\n\n\u300c\u304a\u884c\u5100\u304c\u60aa\u3044\u300d\u3068\u4f55\u5ea6\u304b\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u624b\u306e Server \u30d7\u30ed\u30bb\u30b9\u3067\u306e\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3092\u8d77\u52d5\u3059\u308b\u306e\u306b\u306f\u4e00\u5fdc\u7528\u610f\u3055\u308c\u305f\u5834\u6240\u304c\u3042\u308a\u307e\u3059\u3002\n\n[Events | Deployment - sidekiq wiki](https://github.com/mperham/sidekiq/wiki/Deployment#events)\n\n\u3053\u3053\u306b\u3042\u308b\u3088\u3046\u306b `startup`, `quiet` (\u505c\u6b62\u524d\u306b\u65b0\u305f\u306a\u975e\u540c\u671f\u30b8\u30e7\u30d6\u3092\u751f\u6210\u3057\u306a\u304f\u306a\u308b\u72b6\u614b\uff09, `shutdown` \uff08\u5b9f\u884c\u4e2d\u3060\u3063\u305f\u975e\u540c\u671f\u30b8\u30e7\u30d6\u3092\u5168\u90e8\u5b9f\u884c\u3057\u304a\u308f\u308a\u3001Server \u30d7\u30ed\u30bb\u30b9\u81ea\u4f53\u304c\u505c\u6b62\u3059\u308b\uff09 \u306e 3 \u3064\u306b\u52a0\u3048\u3066 `heartbeat` \u306e 4 \u3064\u304c\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e `startup` \u3067\u884c\u3046\u306e\u304c\u672c\u6765\u7684\u306b\u306f\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n[sidekiq-cron \u306f\u672c\u5bb6\u304b\u3089\u30c4\u30c3\u30b3\u307e\u308c\u3066\u3044\u308b](https://github.com/ondrejbartas/sidekiq-cron/issues/78)\n\n[sidekiq-scheculer \u306f\u305d\u306e\u3068\u304a\u308a\u306b\u3084\u3063\u3066\u308b](https://github.com/moove-it/sidekiq-scheduler/blob/master/lib/sidekiq-scheduler.rb)\n", "tags": ["Ruby", "sidekiq"]}