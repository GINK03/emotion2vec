{"context": " More than 1 year has passed since last update.episode10\u306f\u5b9f\u884c\u53ef\u80fd\u306aJar\u306e\u4f5c\u6210\u3060\u3063\u305f\u306e\u3067\u98db\u3070\u3057\u3066episode11\u3002\n\u30de\u30a4\u30f3\u30af\u30e9\u30d5\u30c82D\u3063\u307d\u3044\u3082\u306e\u3002\n\u521d\u671f\u753b\u9762\u3067\u306f\u7a7a\u306e\u30d6\u30ed\u30c3\u30af\u304c\u5168\u4f53\u306b\u6577\u304d\u8a70\u3081\u3089\u308c\u3066\u3044\u30661\u3064\u3060\u3051\u77f3\u30d6\u30ed\u30c3\u30af\u304c\u7f6e\u3044\u3066\u3042\u308b\u3002\n\u30de\u30a6\u30b9\u306e\u30af\u30ea\u30c3\u30af\u3001\u30c9\u30e9\u30c3\u30b0\u3067\u77f3\u30d6\u30ed\u30c3\u30af\u306b\u5909\u308f\u308b\u3002\n\u30ad\u30fc\u30dc\u30fc\u30c9\u306eS\u3067Json\u30d5\u30a1\u30a4\u30eb\u306b\u30d6\u30ed\u30c3\u30af\u306e\u72b6\u614b\u3092\u4fdd\u5b58\u3001L\u3067\u30ed\u30fc\u30c9\u3059\u308b\u3002\n\u52d5\u753b\u30ea\u30b9\u30c8\uff1aLWJGL\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u52d5\u753b\u306f\u30b3\u30b3\n\nDisplayTest.groovy\npackage episode011\n\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport processing.core.PApplet\n\nclass DisplayTest extends PApplet {\n\n    def grid\n\n    def void setup() {\n        size(640, 480)\n        frameRate(60)\n\n        grid = new BlockGrid(this)\n        grid.setAt(10, 10, BlockType.STONE)\n    }\n\n    def void draw() {\n        background(0, 0, 0)\n\n        grid.draw()\n    }\n\n    def void keyPressed() {\n        switch (key) {\n            case 's':\n                grid.save(new File('save.json'))\n                break\n            case 'l':\n                grid.load(new File('save.json'))\n                break\n        }\n    }\n\n    def void mouseClicked() {\n        setStoneBlock()\n    }\n\n    def void mouseDragged() {\n        setStoneBlock()\n    }\n\n    def setStoneBlock() {\n        def gridX = floor(mouseX / World.BLOCK_SIZE)\n        def gridY = floor(mouseY / World.BLOCK_SIZE)\n        if (gridX >= 0 && gridX < World.BLOCKS_WIDTH\n                && gridY >= 0 && gridY < World.BLOCKS_HEIGHT) {\n            grid.setAt(gridX, gridY, BlockType.STONE)\n        }\n    }\n\n    def static void main(args) {\n        PApplet.main('episode011.DisplayTest')\n    }\n}\n\nenum BlockType {\n    STONE('stone.png'), AIR('air.png'), GRASS('grass.png'), DIRT('dirt.png')\n\n    def location\n\n    def BlockType(location) {\n        this.location = location\n    }\n}\n\nclass Block {\n    def type = BlockType.AIR\n    def x, y\n    def img\n    def display\n\n    def Block(display, type, x, y) {\n        this.display = display\n        this.type = type\n        this.x = x\n        this.y = y\n        this.img = display.loadImage(type.location)\n    }\n\n    def draw() {\n        display.image(img, x, y)\n    }\n}\n\nclass BlockGrid {\n    def Block[][] blocks = new Block[World.BLOCKS_WIDTH][World.BLOCKS_HEIGHT];\n    def display\n\n    def BlockGrid(display) {\n        this.display = display\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y] = new Block(display, BlockType.AIR, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n            }\n        }\n    }\n\n    def load(loadFile) {\n        def list = new JsonSlurper().parse(loadFile.newReader())\n        list.each { block ->\n            blocks[block.x][block.y] = new Block(\n                    display,\n                    BlockType.valueOf(block.type),\n                    block.x * World.BLOCK_SIZE,\n                    block.y * World.BLOCK_SIZE)\n        }\n    }\n\n    def save(saveFile) {\n        def list = []\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                list << [\n                    x: blocks[x][y].x / World.BLOCK_SIZE,\n                    y: blocks[x][y].y / World.BLOCK_SIZE,\n                    type: blocks[x][y].type\n                ]\n            }\n        }\n        saveFile.write(new JsonBuilder(list).toString())\n    }\n\n    def setAt(x , y, type) {\n        blocks[x][y] = new Block(display, type, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n    }\n\n    def getAt(x , y) {\n        blocks[x][y]\n    }\n\n    def draw() {\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y].draw()\n            }\n        }\n    }\n}\n\nclass World {\n    public static final int BLOCK_SIZE = 32\n    public static final int BLOCKS_WIDTH = 20\n    public static final int BLOCKS_HEIGHT = 20\n}\n\n\n\nepisode10\u306f\u5b9f\u884c\u53ef\u80fd\u306aJar\u306e\u4f5c\u6210\u3060\u3063\u305f\u306e\u3067\u98db\u3070\u3057\u3066episode11\u3002\n\n\u30de\u30a4\u30f3\u30af\u30e9\u30d5\u30c82D\u3063\u307d\u3044\u3082\u306e\u3002\n\u521d\u671f\u753b\u9762\u3067\u306f\u7a7a\u306e\u30d6\u30ed\u30c3\u30af\u304c\u5168\u4f53\u306b\u6577\u304d\u8a70\u3081\u3089\u308c\u3066\u3044\u30661\u3064\u3060\u3051\u77f3\u30d6\u30ed\u30c3\u30af\u304c\u7f6e\u3044\u3066\u3042\u308b\u3002\n\u30de\u30a6\u30b9\u306e\u30af\u30ea\u30c3\u30af\u3001\u30c9\u30e9\u30c3\u30b0\u3067\u77f3\u30d6\u30ed\u30c3\u30af\u306b\u5909\u308f\u308b\u3002\n\u30ad\u30fc\u30dc\u30fc\u30c9\u306eS\u3067Json\u30d5\u30a1\u30a4\u30eb\u306b\u30d6\u30ed\u30c3\u30af\u306e\u72b6\u614b\u3092\u4fdd\u5b58\u3001L\u3067\u30ed\u30fc\u30c9\u3059\u308b\u3002\n\n\u52d5\u753b\u30ea\u30b9\u30c8\uff1a[LWJGL\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://www.youtube.com/playlist?list=PL19F2453814E0E315)\n\u52d5\u753b\u306f[\u30b3\u30b3](http://www.youtube.com/watch?v=7G_xtkvyleM)\n\n```groovy:DisplayTest.groovy\npackage episode011\n\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport processing.core.PApplet\n\nclass DisplayTest extends PApplet {\n\n    def grid\n\n    def void setup() {\n        size(640, 480)\n        frameRate(60)\n\n        grid = new BlockGrid(this)\n        grid.setAt(10, 10, BlockType.STONE)\n    }\n\n    def void draw() {\n        background(0, 0, 0)\n\n        grid.draw()\n    }\n\n    def void keyPressed() {\n        switch (key) {\n            case 's':\n                grid.save(new File('save.json'))\n                break\n            case 'l':\n                grid.load(new File('save.json'))\n                break\n        }\n    }\n\n    def void mouseClicked() {\n        setStoneBlock()\n    }\n\n    def void mouseDragged() {\n        setStoneBlock()\n    }\n\n    def setStoneBlock() {\n        def gridX = floor(mouseX / World.BLOCK_SIZE)\n        def gridY = floor(mouseY / World.BLOCK_SIZE)\n        if (gridX >= 0 && gridX < World.BLOCKS_WIDTH\n                && gridY >= 0 && gridY < World.BLOCKS_HEIGHT) {\n            grid.setAt(gridX, gridY, BlockType.STONE)\n        }\n    }\n\n    def static void main(args) {\n        PApplet.main('episode011.DisplayTest')\n    }\n}\n\nenum BlockType {\n    STONE('stone.png'), AIR('air.png'), GRASS('grass.png'), DIRT('dirt.png')\n\n    def location\n\n    def BlockType(location) {\n        this.location = location\n    }\n}\n\nclass Block {\n    def type = BlockType.AIR\n    def x, y\n    def img\n    def display\n\n    def Block(display, type, x, y) {\n        this.display = display\n        this.type = type\n        this.x = x\n        this.y = y\n        this.img = display.loadImage(type.location)\n    }\n\n    def draw() {\n        display.image(img, x, y)\n    }\n}\n\nclass BlockGrid {\n    def Block[][] blocks = new Block[World.BLOCKS_WIDTH][World.BLOCKS_HEIGHT];\n    def display\n\n    def BlockGrid(display) {\n        this.display = display\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y] = new Block(display, BlockType.AIR, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n            }\n        }\n    }\n\n    def load(loadFile) {\n        def list = new JsonSlurper().parse(loadFile.newReader())\n        list.each { block ->\n            blocks[block.x][block.y] = new Block(\n                    display,\n                    BlockType.valueOf(block.type),\n                    block.x * World.BLOCK_SIZE,\n                    block.y * World.BLOCK_SIZE)\n        }\n    }\n\n    def save(saveFile) {\n        def list = []\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                list << [\n                    x: blocks[x][y].x / World.BLOCK_SIZE,\n                    y: blocks[x][y].y / World.BLOCK_SIZE,\n                    type: blocks[x][y].type\n                ]\n            }\n        }\n        saveFile.write(new JsonBuilder(list).toString())\n    }\n\n    def setAt(x , y, type) {\n        blocks[x][y] = new Block(display, type, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n    }\n\n    def getAt(x , y) {\n        blocks[x][y]\n    }\n\n    def draw() {\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y].draw()\n            }\n        }\n    }\n}\n\nclass World {\n    public static final int BLOCK_SIZE = 32\n    public static final int BLOCKS_WIDTH = 20\n    public static final int BLOCKS_HEIGHT = 20\n}\n```\n\n![grocessingGL011.png](https://qiita-image-store.s3.amazonaws.com/0/17179/706d8f73-b205-d83c-46e7-549d06c0dace.png)", "tags": ["Groovy2.1.7", "processing2.1"]}