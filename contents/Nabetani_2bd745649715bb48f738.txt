{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8\u3002\nhttp://atnd.org/events/32191\n\u306e\u53c2\u8003\u554f\u984c\nhttp://qiita.com/items/9c514267214d3917edf2\n\u306e\u5b9f\u88c5\u4f8b\u3002\n\u307e\u305a\u306f ruby\u3002\u3053\u308c\u306f\u3001\u51fa\u984c\u524d\u306b\u66f8\u3044\u305f\u6700\u521d\u306e\u5b9f\u88c5\u307b\u307c\u305d\u306e\u307e\u307e\u3002\n#!ruby\n#coding:utf-8\n\ndef move( state, dir )\n    y,x=( state[-1].ord-'a'.ord ).divmod(5)\n    x+=dir[0]\n    y+=dir[1]\n    return nil unless (0...5)===x && (0...5)===y\n    ('a'.ord+y*5+x).chr\nend\n\ndef can_move( nextpos, state, de )\n    ! state.include?( nextpos ) && ! de.include?( state[-1]+nextpos )\nend\n\ndef count_path( state, dir, de )\n    nextpos = move( state[-1], dir)\n    return 0 unless nextpos && can_move( nextpos, state, de )\n    return 1 if nextpos=='y'\n    s=state+nextpos\n    [ [1,0], [-1,0], [0, 1], [0, -1] ].map{ |dir|\n        count_path( s, dir, de )\n    }.inject( &:+ )\nend\n\ndef solve(q)\n    cur = 'a'\n    de=q+' '+q.reverse\n    count_path( cur, [1,0], de) + count_path( cur, [0,1], de)\nend\n\nDATA.each{ |line|\n    if /^\"(?<q>.*)\"\\s*\\-\\>\\s*(?<ex>\\d+)/=~line\n        actual = solve(q)\n        puts( %Q!\"%s\" -> %d! % [q,actual] )\n        puts \"**EXPECTED : #{ex} **\" unless actual==ex.to_i\n    else\n        puts( \"skipped : \"+ line )\n    end\n}\n__END__\n\"\" -> 8512 #\u305d\u306e\u307e\u307e\u3002\u3053\u308c\u304c\u6700\u5927\u5024\u3002\n\"ch hi mn kp mr rs sx\" -> 50 #6*3+4*8 \n\n\u672c\u5f53\u306f\u3082\u3063\u3068\u305f\u304f\u3055\u3093\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u3042\u308b\u3002\n\u884c\u304d\u6b62\u307e\u308a\u306e\u30ea\u30b9\u30c8\u3092\u5358\u4e00\u306e\u6587\u5b57\u5217\u306b\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u3042\u305f\u308a\u304c\u3084\u3063\u3064\u3051\u3063\u307d\u3044\u3002\n\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8\u3002\nhttp://atnd.org/events/32191\n\u306e\u53c2\u8003\u554f\u984c\nhttp://qiita.com/items/9c514267214d3917edf2\n\u306e\u5b9f\u88c5\u4f8b\u3002\n\u307e\u305a\u306f ruby\u3002\u3053\u308c\u306f\u3001\u51fa\u984c\u524d\u306b\u66f8\u3044\u305f\u6700\u521d\u306e\u5b9f\u88c5\u307b\u307c\u305d\u306e\u307e\u307e\u3002\n\n```ruby\n#!ruby\n#coding:utf-8\n\ndef move( state, dir )\n    y,x=( state[-1].ord-'a'.ord ).divmod(5)\n    x+=dir[0]\n    y+=dir[1]\n    return nil unless (0...5)===x && (0...5)===y\n    ('a'.ord+y*5+x).chr\nend\n\ndef can_move( nextpos, state, de )\n    ! state.include?( nextpos ) && ! de.include?( state[-1]+nextpos )\nend\n\ndef count_path( state, dir, de )\n    nextpos = move( state[-1], dir)\n    return 0 unless nextpos && can_move( nextpos, state, de )\n    return 1 if nextpos=='y'\n    s=state+nextpos\n    [ [1,0], [-1,0], [0, 1], [0, -1] ].map{ |dir|\n        count_path( s, dir, de )\n    }.inject( &:+ )\nend\n\ndef solve(q)\n    cur = 'a'\n    de=q+' '+q.reverse\n    count_path( cur, [1,0], de) + count_path( cur, [0,1], de)\nend\n\nDATA.each{ |line|\n    if /^\"(?<q>.*)\"\\s*\\-\\>\\s*(?<ex>\\d+)/=~line\n        actual = solve(q)\n        puts( %Q!\"%s\" -> %d! % [q,actual] )\n        puts \"**EXPECTED : #{ex} **\" unless actual==ex.to_i\n    else\n        puts( \"skipped : \"+ line )\n    end\n}\n__END__\n\"\" -> 8512 #\u305d\u306e\u307e\u307e\u3002\u3053\u308c\u304c\u6700\u5927\u5024\u3002\n\"ch hi mn kp mr rs sx\" -> 50 #6*3+4*8 \n```\n\n\u672c\u5f53\u306f\u3082\u3063\u3068\u305f\u304f\u3055\u3093\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u3042\u308b\u3002\n\u884c\u304d\u6b62\u307e\u308a\u306e\u30ea\u30b9\u30c8\u3092\u5358\u4e00\u306e\u6587\u5b57\u5217\u306b\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u3042\u305f\u308a\u304c\u3084\u3063\u3064\u3051\u3063\u307d\u3044\u3002", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg", "Ruby1.9.3p194"]}