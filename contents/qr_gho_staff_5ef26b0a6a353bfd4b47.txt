{"context": " More than 1 year has passed since last update.\n\n\u52d5\u6a5f\npython \u306b\u306fnumpy\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u3002numpy\u3067\u306f\u884c\u5217\u306e\u6f14\u7b97\u3092\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\na = numpy.array([1,2,3,4,5])\nb = numpy.array([1,2,3,4,5])\na * 3 \n=> [ 3  6  9 12 15]\na - b\n=> [0 0 0 0 0]\na * b\n=> [ 1  4  9 16 25]\n\n\u3067\u3053\u3093\u306a\u611f\u3058\u306e\u6f14\u7b97\u3092Javascript\u3067\u5b9f\u73fe\u3057\u305f\u3044\u306a\u3041\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u7d50\u8ad6\n\u3044\u304d\u306a\u308a\u3067\u3059\u304c\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u7121\u7406\u306b\u7b49\u3057\u3044\u3067\u3059\u3002\u305d\u3082\u305d\u3082Javascript\u306f\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8a31\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u305f\u3060valueOf\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u30a4\u30a4\u7dda\u307e\u3067\u306f\u3044\u304d\u307e\u3059\u3002\n\u53c2\u8003: http://www.2ality.com/2011/12/fake-operator-overloading.html\n\nvalueOf\u3067\u3044\u3044\u3068\u3053\u308d\u307e\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\nvalueOf\u306fJavascript\u306eObject\u306b\u5b9f\u88c5\u3055\u308c\u3066\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u3064\u307e\u308a\u5168\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cvalueOf\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306b\u306f\u7121\u3044\u3002\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\u3053\u3093\u306a\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\nvar exampleOne = {valueOf: function(){return 1;}};\nvar exampleTwo = {valueOf: function(){return 2;}};\n\nexampleOne + exampleTwo\n=> 3\n\n\u306a\u3093\u304b\u884c\u3051\u305d\u3046!!\u306a\u304d\u304c\u3057\u307e\u3059\u304c\u3001\u7d50\u5c40valueOf\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5024\u3092\u8fd4\u3055\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u3053\u3068\u306f\u7d50\u5c40\u632f\u308a\u51fa\u3057\u306b\u623b\u308a\u307e\u3059\u3002\nvar exampleOne = {\n    valueOf: function(){\n        return {\n            add: function \u30fb\u30fb\u30fb\u3000\u3000\u3000\u2190\u3000\u3053\u306e\u3088\u3046\u306b\u51fa\u6765\u306a\u3044\n        };\n     }\n};\n\n\u306a\u304b\u306a\u304b\u3046\u307e\u304f\u884c\u304d\u307e\u305b\u3093\u3002\u3002\u3002\u305d\u3053\u3067\u6b21\u306e\u65b9\u6cd5\u3092\u8003\u3048\u307e\u3059\n\n\u5f0f\u5168\u4f53\u3092\u30e9\u30c3\u30d7\u3059\u308b\n\u5f0f\u5168\u4f53\u3092\u30e9\u30c3\u30d7\u3059\u308b\u3053\u3068\u3067 \u90e8\u5206\u7684 \u306b\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u53c2\u8003: https://github.com/rauschma/op_overload\nvar operands = []\nfake_numpy.prototype = funciton(){\n    operands.push(this);\n    return 3;\n}\nfunction A(value){\n\u3000//__minus \u306a\u3069\u306e\u5b9a\u7fa9\u7701\u7565\n    var operator;\n    var ops = operands;\n    if(value === 0 && ops.length === 2){\n        operator = __minus\n    }else if (ops.length === 2 && value === 1) {\n        operator = __divide;\n    } else if (ops.length >= 2 && (value === 3 * ops.length)) {\n        operator = __add;\n    } else if (ops.length >= 2 && (value === Math.pow(3, ops.length))) {\n        operator = __multiply;\n    }else {\n        throw Error(\"\u5931\u6557\");\n    }\n    operands = [];\n    return operator.apply(this, ops);\n}\n\nvalueOf\u304c\u8a55\u4fa1\u3055\u308c\u308b\u3068\u304d\u306b\u4e00\u65e6\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u5b58\u3057\u3066\u3001\u30e9\u30c3\u30d7\u3057\u305f\u95a2\u6570\u5185\u3067\u521d\u3081\u3066\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070value \u304c\u5f0f\u306e\u9805\u76ee\u306e3\u306e\u500d\u6570\u306e\u6570\u3067\u3042\u308c\u3070\u3001\u5143\u306e\u5f0f\u306f\u6050\u3089\u304f\u3059\u3079\u3066\uff0b\u306a\u3093\u3060\u308d\u3046\u306a\u3041\u3068\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002\n\u305d\u308c\u3089\u306e\u6570\u5024\u304b\u3089\u5143\u306e\u5f0f\u306e\u5f62\u3092\u5224\u5b9a\u3057\u305d\u308c\u3089\u5168\u3066\u3092\u7279\u5b9a\u306e\u95a2\u6570\uff08\u4f8b: __add \u306a\u3069\uff09\u306b\u7a81\u3063\u8fbc\u307f\u307e\u3059\u3002\n\u3057\u304b\u3057\u3053\u308c\u3067\u306f\u8907\u96d1\u306a\u5f0f\u306f\u6271\u3048\u307e\u305b\u3093\u3002\u3002\u3002 \u8907\u6570\u306e\u6f14\u7b97\u5b50\u304c\u3042\u308b\u3068\u3082\u306f\u3084\u691c\u77e5\u4e0d\u53ef\u80fd\u3060\u304b\u3089\u3067\u3059\u3002\u3002\u3002\u3002\nvar f1 = fake_numpy([1,2,3,4]);\nvar f2 = fake_numpy([1,2,3,4]);\nvar res = A(f1 + f2)\nres.array\n=> [2, 4, 6, 8]\nvar res = A(f1 + f2 - f1) \u2190\u3000\u3053\u308c\u3060\u3051\u3067\u7834\u7dbb\u3059\u308b\nvar res = A(f1 + f2 + f1)  \u2190\u3000\u3053\u308c\u306a\u3089OK\n\n\u3067\u306f\u3069\u3046\u3059\u308b\u304b\u30fb\u30fb\u30fb\n\n\u69cb\u6587\u89e3\u6790\u5668\u3092\u4f7f\u7528\u3059\u308b\n\u3053\u3061\u3089\u306e\u65b9\u6cd5\u306f\u3082\u306f\u3084\u7d14javascript\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002javascript\u3092\u62bd\u8c61\u69cb\u6587\u6728\u306b\u5206\u89e3\u3057\u3066\u3001\u65b0\u305f\u306bjavascript\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u308a\u307e\u3059\u3002JS\u306e\u30b3\u30fc\u30c9\u3092\u52d5\u7684\u306b\u5909\u63db\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n\u3061\u306a\u307f\u306bPaper.js\u3067\u306f\u3053\u306e\u624b\u6cd5\u304c\u53d6\u3089\u308c\u3066\u3044\u307e\u3059\u3002\ngithub\u304b\u3089\u30bd\u30fc\u30b9\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\n    var binaryOperators = {\n        // The hidden math methods are to be injected specifically, see below.\n        '+': '__add',\n        '-': '__subtract',\n        '*': '__multiply',\n        '/': '__divide',\n        '%': '__modulo',\n        // Use the real equals.\n        '==': 'equals',\n        '!=': 'equals'\n    };\n    //\u7701\u7565\n    function __$__(left, operator, right) {\n        var handler = binaryOperators[operator];\n        if (left && left[handler]) {\n            var res = left[handler](right);\n            return operator === '!=' ? !res : res;\n        }\n        switch (operator) {\n        case '+': return left + right;\n        case '-': return left - right;\n        case '*': return left * right;\n        case '/': return left / right;\n        case '%': return left % right;\n        case '==': return left == right;\n        case '!=': return left != right;\n        }\n    }\n\n\u4e0a\u8a18\u306e\u69d8\u306a\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3001\u5168\u6f14\u7b97\u5b50\u3092__$()\u306e\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\u51fa\u529b\u3055\u308c\u308bJS\u306f\n 1 + 2 \u2192 __$__(1, 2)\n\n\u306e\u69d8\u306a\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3057\u3066\u3057\u307e\u3048\u3070\u306a\u3093\u3068\u304b\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\n\u307e\u3068\u3081\n\u7d14\u7c8b\u306aJavascript\u3067\u306f\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u51fa\u6765\u307e\u305b\u3093\u3002\n\u7d20\u76f4\u306bnew numpy([1,2,3,4]).add(new numpy([1,2,3,4]))\u3068\u66f8\u304f\u3057\u304b\u306a\u3044\u3067\u3059\u3002\n\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u3092\u9664\u3044\u3066Javascript\u3067numpy\u306e\u69d8\u306a\u6f14\u7b97\u3092\u3059\u308b\u3053\u3068\u3092\u8ae6\u3081\u307e\u3057\u3087\u3046!!\n\u53c2\u8003:http://tkengo.github.io/blog/2015/06/30/operator-overload-in-javascript/\n# \u52d5\u6a5f\n\npython \u306b\u306fnumpy\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u3002numpy\u3067\u306f\u884c\u5217\u306e\u6f14\u7b97\u3092\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\n\n```py\na = numpy.array([1,2,3,4,5])\nb = numpy.array([1,2,3,4,5])\na * 3 \n=> [ 3  6  9 12 15]\na - b\n=> [0 0 0 0 0]\na * b\n=> [ 1  4  9 16 25]\n```\n\n\u3067\u3053\u3093\u306a\u611f\u3058\u306e\u6f14\u7b97\u3092Javascript\u3067\u5b9f\u73fe\u3057\u305f\u3044\u306a\u3041\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n# \u7d50\u8ad6\n\n\u3044\u304d\u306a\u308a\u3067\u3059\u304c\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u7121\u7406\u306b\u7b49\u3057\u3044\u3067\u3059\u3002\u305d\u3082\u305d\u3082Javascript\u306f\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8a31\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u305f\u3060valueOf\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u30a4\u30a4\u7dda\u307e\u3067\u306f\u3044\u304d\u307e\u3059\u3002\n\u53c2\u8003: http://www.2ality.com/2011/12/fake-operator-overloading.html\n\n# valueOf\u3067\u3044\u3044\u3068\u3053\u308d\u307e\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\nvalueOf\u306fJavascript\u306eObject\u306b\u5b9f\u88c5\u3055\u308c\u3066\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u3064\u307e\u308a\u5168\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cvalueOf\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306b\u306f\u7121\u3044\u3002\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\u3053\u3093\u306a\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```js\nvar exampleOne = {valueOf: function(){return 1;}};\nvar exampleTwo = {valueOf: function(){return 2;}};\n\nexampleOne + exampleTwo\n=> 3\n```\n\n\u306a\u3093\u304b\u884c\u3051\u305d\u3046!!\u306a\u304d\u304c\u3057\u307e\u3059\u304c\u3001\u7d50\u5c40valueOf\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5024\u3092\u8fd4\u3055\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u3053\u3068\u306f\u7d50\u5c40\u632f\u308a\u51fa\u3057\u306b\u623b\u308a\u307e\u3059\u3002\n\n```js\nvar exampleOne = {\n    valueOf: function(){\n        return {\n            add: function \u30fb\u30fb\u30fb\u3000\u3000\u3000\u2190\u3000\u3053\u306e\u3088\u3046\u306b\u51fa\u6765\u306a\u3044\n        };\n     }\n};\n```\n\u306a\u304b\u306a\u304b\u3046\u307e\u304f\u884c\u304d\u307e\u305b\u3093\u3002\u3002\u3002\u305d\u3053\u3067\u6b21\u306e\u65b9\u6cd5\u3092\u8003\u3048\u307e\u3059\n\n## \u5f0f\u5168\u4f53\u3092\u30e9\u30c3\u30d7\u3059\u308b\n\n\u5f0f\u5168\u4f53\u3092\u30e9\u30c3\u30d7\u3059\u308b\u3053\u3068\u3067 **\u90e8\u5206\u7684** \u306b\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u53c2\u8003: https://github.com/rauschma/op_overload\n\n```js\nvar operands = []\nfake_numpy.prototype = funciton(){\n    operands.push(this);\n    return 3;\n}\nfunction A(value){\n\u3000//__minus \u306a\u3069\u306e\u5b9a\u7fa9\u7701\u7565\n    var operator;\n    var ops = operands;\n    if(value === 0 && ops.length === 2){\n        operator = __minus\n    }else if (ops.length === 2 && value === 1) {\n        operator = __divide;\n    } else if (ops.length >= 2 && (value === 3 * ops.length)) {\n        operator = __add;\n    } else if (ops.length >= 2 && (value === Math.pow(3, ops.length))) {\n        operator = __multiply;\n    }else {\n        throw Error(\"\u5931\u6557\");\n    }\n    operands = [];\n    return operator.apply(this, ops);\n}\n```\n\nvalueOf\u304c\u8a55\u4fa1\u3055\u308c\u308b\u3068\u304d\u306b\u4e00\u65e6\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u5b58\u3057\u3066\u3001\u30e9\u30c3\u30d7\u3057\u305f\u95a2\u6570\u5185\u3067\u521d\u3081\u3066\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070value \u304c\u5f0f\u306e\u9805\u76ee\u306e3\u306e\u500d\u6570\u306e\u6570\u3067\u3042\u308c\u3070\u3001\u5143\u306e\u5f0f\u306f\u6050\u3089\u304f\u3059\u3079\u3066\uff0b\u306a\u3093\u3060\u308d\u3046\u306a\u3041\u3068\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002\n\u305d\u308c\u3089\u306e\u6570\u5024\u304b\u3089\u5143\u306e\u5f0f\u306e\u5f62\u3092\u5224\u5b9a\u3057\u305d\u308c\u3089\u5168\u3066\u3092\u7279\u5b9a\u306e\u95a2\u6570\uff08\u4f8b: __add \u306a\u3069\uff09\u306b\u7a81\u3063\u8fbc\u307f\u307e\u3059\u3002\n\n**\u3057\u304b\u3057\u3053\u308c\u3067\u306f\u8907\u96d1\u306a\u5f0f\u306f\u6271\u3048\u307e\u305b\u3093\u3002\u3002\u3002** \u8907\u6570\u306e\u6f14\u7b97\u5b50\u304c\u3042\u308b\u3068\u3082\u306f\u3084\u691c\u77e5\u4e0d\u53ef\u80fd\u3060\u304b\u3089\u3067\u3059\u3002\u3002\u3002\u3002\n\n```js\nvar f1 = fake_numpy([1,2,3,4]);\nvar f2 = fake_numpy([1,2,3,4]);\nvar res = A(f1 + f2)\nres.array\n=> [2, 4, 6, 8]\nvar res = A(f1 + f2 - f1) \u2190\u3000\u3053\u308c\u3060\u3051\u3067\u7834\u7dbb\u3059\u308b\nvar res = A(f1 + f2 + f1)  \u2190\u3000\u3053\u308c\u306a\u3089OK\n```\n\n\u3067\u306f\u3069\u3046\u3059\u308b\u304b\u30fb\u30fb\u30fb\n\n# \u69cb\u6587\u89e3\u6790\u5668\u3092\u4f7f\u7528\u3059\u308b\n\n\u3053\u3061\u3089\u306e\u65b9\u6cd5\u306f\u3082\u306f\u3084\u7d14javascript\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002javascript\u3092\u62bd\u8c61\u69cb\u6587\u6728\u306b\u5206\u89e3\u3057\u3066\u3001\u65b0\u305f\u306bjavascript\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u308a\u307e\u3059\u3002JS\u306e\u30b3\u30fc\u30c9\u3092\u52d5\u7684\u306b\u5909\u63db\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n\u3061\u306a\u307f\u306b[Paper.js](http://paperjs.org/tutorials/getting-started/working-with-paper-js/)\u3067\u306f\u3053\u306e\u624b\u6cd5\u304c\u53d6\u3089\u308c\u3066\u3044\u307e\u3059\u3002\ngithub\u304b\u3089\u30bd\u30fc\u30b9\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\n\n```js\n    var binaryOperators = {\n        // The hidden math methods are to be injected specifically, see below.\n        '+': '__add',\n        '-': '__subtract',\n        '*': '__multiply',\n        '/': '__divide',\n        '%': '__modulo',\n        // Use the real equals.\n        '==': 'equals',\n        '!=': 'equals'\n    };\n    //\u7701\u7565\n    function __$__(left, operator, right) {\n        var handler = binaryOperators[operator];\n        if (left && left[handler]) {\n            var res = left[handler](right);\n            return operator === '!=' ? !res : res;\n        }\n        switch (operator) {\n        case '+': return left + right;\n        case '-': return left - right;\n        case '*': return left * right;\n        case '/': return left / right;\n        case '%': return left % right;\n        case '==': return left == right;\n        case '!=': return left != right;\n        }\n    }\n```\n\n\u4e0a\u8a18\u306e\u69d8\u306a\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3001\u5168\u6f14\u7b97\u5b50\u3092`__$()`\u306e\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\u51fa\u529b\u3055\u308c\u308bJS\u306f\n\n```js\n 1 + 2 \u2192 __$__(1, 2)\n```\n\n\u306e\u69d8\u306a\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3057\u3066\u3057\u307e\u3048\u3070\u306a\u3093\u3068\u304b\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\n## \u307e\u3068\u3081\n\n\u7d14\u7c8b\u306aJavascript\u3067\u306f\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u51fa\u6765\u307e\u305b\u3093\u3002\n\u7d20\u76f4\u306b```new numpy([1,2,3,4]).add(new numpy([1,2,3,4]))```\u3068\u66f8\u304f\u3057\u304b\u306a\u3044\u3067\u3059\u3002\n\n\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u3092\u9664\u3044\u3066Javascript\u3067numpy\u306e\u69d8\u306a\u6f14\u7b97\u3092\u3059\u308b\u3053\u3068\u3092\u8ae6\u3081\u307e\u3057\u3087\u3046!!\n\n\u53c2\u8003:http://tkengo.github.io/blog/2015/06/30/operator-overload-in-javascript/\n", "tags": ["JavaScript", "paperscript", "altjs"]}