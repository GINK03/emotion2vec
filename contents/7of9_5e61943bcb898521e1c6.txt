{"context": "\u7a4d\u5206\u306e\u65b9\u6cd5\u306f\u8272\u3005\u3042\u308b\u304c\u3001\u305d\u306e\u4e2d\u3067QMC\u3068\u3044\u3046\u7a4d\u5206\u306e\u7d39\u4ecb\u3002\n\n\u6982\u8981\n10\u5e74\u8fd1\u304f\u524d\u306blucille\u3068\u3044\u3046\u30da\u30fc\u30b8\u3067\u521d\u3081\u3066\u77e5\u3063\u305f\u3002\nProf. Harald Niederreiter\u3055\u3093\u306e\u300cRandom Number Generation and Quasi-Monte Carlo Methods (PDF, 11MB)\u300d\u306b\u8a73\u3057\u304f\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u3002\n\u7a4d\u5206\u3092\u3059\u308b\u4e0a\u3067\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3002\u7a4d\u5206\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u3092\u4e71\u6570\u3067\u53d6\u5f97\u3057\u306a\u304c\u3089\u5404\u5730\u70b9\u306e\u5024\u3092\u8db3\u3057\u3042\u308f\u305b\u3066\u3044\u304f\u3053\u3068\u3067\u7a4d\u5206\u3092\u884c\u3046\u65b9\u6cd5\u3067\u3042\u308b\u3002\n\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3088\u308a\u5c11\u306a\u3044\u56de\u6570\u3067\u7a4d\u5206\u7cbe\u5ea6\u3092\u3042\u3052\u3088\u3046\u3068\u3044\u3046\u306e\u304cQMC\u3068\u3044\u3046\u624b\u6cd5\u3067\u3042\u308b\u3002\u7a4d\u5206\u306e\u30aa\u30fc\u30c0\u30fc\u306b\u3064\u3044\u3066\u306f\u4e0a\u8a18\u306ePDF\u3092\u53c2\u7167\u3002\nQMC\u3067\u306flow-discrepancy sequence(LDS)\u3068\u3044\u3046\u6570\u5217\u3092\u7528\u3044\u308b\u3002\u305d\u306e\u4e8c\u6b21\u5143\u7248\u306f\u300cHalton_sequence\u300d\u3068\u3044\u3046\u6570\u5217\u3068\u8a8d\u8b58\u3057\u3066\u3044\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u5b9f\u969b\u306b\u7a4d\u5206\u3057\u3066\u307f\u308b\u3002\nHalton_sequence()\u3067\u4e8c\u6b21\u5143\u306eLDS\u3092\u4f5c\u3063\u3066\u3044\u308b\u304c\u3001\u4eca\u56de\u306f\u4e00\u6b21\u5143\u306e\u307f\u4f7f\u3063\u3066\u3044\u308b\u3002\n\u306a\u304a\u7a4d\u5206\u7bc4\u56f2\u306f[0,1]\u3068\u306a\u308b\u306e\u3067\u3001\u3053\u308c\u4ee5\u5916\u306e\u7a4d\u5206\u306e\u5834\u5408\u306f[0,1]\u3067\u5f97\u3089\u308c\u308bLDS\u3092\u7a4d\u5206\u306e\u5e0c\u671b\u7bc4\u56f2\u3078\u62e1\u5f35\u3059\u308c\u3070\u3044\u3044\u3002\n\nsample-qmc.c\n#include <stdio.h>\n#include <math.h>\n\nstatic void Halton_sequence(int i0, double *px0, double *py0)\n{\n    // configuration\n    const int xbase = 2;\n    const int ybase = 3;\n    //\n    double invxbase, invybase;\n    double facx, facy;\n    double x0, y0;\n    int inp;\n\n    invxbase = 1.0 / (double)xbase;\n    facx = 1.0 / (double)xbase;\n\n    invybase = 1.0 / (double)ybase;\n    facy = 1.0 / (double)ybase;\n\n    inp = i0;\n    x0 = 0.0;\n    while (inp > 0) {\n        x0 = x0 + (inp % xbase) * invxbase;\n        inp = inp / xbase;\n        invxbase = invxbase * facx;\n    }\n\n    inp = i0;\n    y0 = 0.0;\n    while (inp > 0) {\n        y0 = y0 + (inp % ybase) * invybase;\n        inp = inp / ybase;\n        invybase = invybase * facy;\n    }\n\n    *px0 = x0;\n    *py0 = y0;\n}\n\nstatic double myFunc(double x_)\n{\n    // result [1/4]\n    return (x_ * x_ * x_);\n}\n\nconst static double kAnswer = 1.0/4.0;\n\nint main(void)\n{\n    double xx, yy;\n    int idx;\n    double d0;\n    int count = 0;\n    double res;\n\n    d0 = 0.0;\n    for(idx=1; idx<=3000; idx++) {\n        count++;\n        Halton_sequence(idx, &xx, &yy);\n\n        d0 = d0 + myFunc(xx);\n        res = d0 / (double)count;\n        printf(\"%d %f err=%.2f\\%\\n\", idx, res, fabs(res/kAnswer - 1.0)*100);\n    }\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n1 0.125000 err=50.00%\n2 0.070312 err=71.88%\n3 0.187500 err=25.00%\n...\n300 0.245102 err=1.96%\n301 0.245453 err=1.82%\n302 0.244952 err=2.02%\n...\n1000 0.248766 err=0.49%\n1001 0.248725 err=0.51%\n1002 0.248517 err=0.59%\n...\n2998 0.249347 err=0.26%\n2999 0.249531 err=0.19%\n3000 0.249448 err=0.22%\n\n\n\u30ac\u30a6\u30b9\u7a4d\u5206\u306a\u3069\u3068\u6bd4\u3079\u3066\u540c\u3058\u7cbe\u5ea6\u3067\u306f\u8a08\u7b97\u3059\u308b\u70b9\u6570\u304c\u591a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\nQMC\u306e\u826f\u3044\u3068\u601d\u3046\u6240\u306f\u3001\u70b9\u3092\u5897\u3084\u3059\u3068\u304d\u306f\u904e\u53bb\u306e\u70b9\u305d\u306e\u307e\u307e\u304c\u4f7f\u3048\u308b\u3068\u3044\u3046\u6240\u3002\n100\u500b\u3067\u8a08\u7b97\u3057\u305f\u3051\u3069\u53ce\u675f\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001101\u500b\u76ee\u304b\u3089\u8a08\u7b97\u3092\u7d9a\u3051\u308c\u3070\u3044\u3044\u3002\u30ac\u30a6\u30b9\u7a4d\u5206\u3084\u30b7\u30f3\u30d7\u30bd\u30f3\u7a4d\u5206\u3060\u3068\u3053\u3046\u306f\u3044\u304b\u306a\u3044\u3002\n\u305d\u306e\u305f\u3081\u3001\u53ce\u675f\u7cbe\u5ea6\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u305d\u306e\u7cbe\u5ea6\u304c\u6c42\u307e\u308b\u307e\u3067\u8a08\u7b97\u3092\u7d9a\u3051\u308b\u3068\u3044\u3046\u65b9\u6cd5\u304c\u53d6\u308c\u305d\u3046\u3002\n\u7a4d\u5206\u306e\u65b9\u6cd5\u306f\u8272\u3005\u3042\u308b\u304c\u3001\u305d\u306e\u4e2d\u3067QMC\u3068\u3044\u3046\u7a4d\u5206\u306e\u7d39\u4ecb\u3002\n\n#\u6982\u8981\n\n10\u5e74\u8fd1\u304f\u524d\u306b[lucille](http://lucille.sourceforge.net/cgi-bin/notes/wiki.cgi?page=%BD%E0%A5%E2%A5%F3%A5%C6%A5%AB%A5%EB%A5%ED%CB%A1)\u3068\u3044\u3046\u30da\u30fc\u30b8\u3067\u521d\u3081\u3066\u77e5\u3063\u305f\u3002\n\n[Prof. Harald Niederreiter](http://www.ricam.oeaw.ac.at/people/page.cgi?firstn=Harald;lastn=Niederreiter)\u3055\u3093\u306e\u300cRandom Number Generation and Quasi-Monte Carlo Methods (PDF, 11MB)\u300d\u306b\u8a73\u3057\u304f\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u7a4d\u5206\u3092\u3059\u308b\u4e0a\u3067\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3002\u7a4d\u5206\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u3092\u4e71\u6570\u3067\u53d6\u5f97\u3057\u306a\u304c\u3089\u5404\u5730\u70b9\u306e\u5024\u3092\u8db3\u3057\u3042\u308f\u305b\u3066\u3044\u304f\u3053\u3068\u3067\u7a4d\u5206\u3092\u884c\u3046\u65b9\u6cd5\u3067\u3042\u308b\u3002\n\n\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3088\u308a\u5c11\u306a\u3044\u56de\u6570\u3067\u7a4d\u5206\u7cbe\u5ea6\u3092\u3042\u3052\u3088\u3046\u3068\u3044\u3046\u306e\u304cQMC\u3068\u3044\u3046\u624b\u6cd5\u3067\u3042\u308b\u3002\u7a4d\u5206\u306e\u30aa\u30fc\u30c0\u30fc\u306b\u3064\u3044\u3066\u306f\u4e0a\u8a18\u306ePDF\u3092\u53c2\u7167\u3002\n\nQMC\u3067\u306flow-discrepancy sequence(LDS)\u3068\u3044\u3046\u6570\u5217\u3092\u7528\u3044\u308b\u3002\u305d\u306e\u4e8c\u6b21\u5143\u7248\u306f\u300cHalton_sequence\u300d\u3068\u3044\u3046\u6570\u5217\u3068\u8a8d\u8b58\u3057\u3066\u3044\u308b\u3002\n\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u5b9f\u969b\u306b\u7a4d\u5206\u3057\u3066\u307f\u308b\u3002\nHalton_sequence()\u3067\u4e8c\u6b21\u5143\u306eLDS\u3092\u4f5c\u3063\u3066\u3044\u308b\u304c\u3001\u4eca\u56de\u306f\u4e00\u6b21\u5143\u306e\u307f\u4f7f\u3063\u3066\u3044\u308b\u3002\n\u306a\u304a\u7a4d\u5206\u7bc4\u56f2\u306f[0,1]\u3068\u306a\u308b\u306e\u3067\u3001\u3053\u308c\u4ee5\u5916\u306e\u7a4d\u5206\u306e\u5834\u5408\u306f[0,1]\u3067\u5f97\u3089\u308c\u308bLDS\u3092\u7a4d\u5206\u306e\u5e0c\u671b\u7bc4\u56f2\u3078\u62e1\u5f35\u3059\u308c\u3070\u3044\u3044\u3002\n\n```c:sample-qmc.c\n#include <stdio.h>\n#include <math.h>\n\nstatic void Halton_sequence(int i0, double *px0, double *py0)\n{\n\t// configuration\n\tconst int xbase = 2;\n\tconst int ybase = 3;\n\t//\n\tdouble invxbase, invybase;\n\tdouble facx, facy;\n\tdouble x0, y0;\n\tint inp;\n\n\tinvxbase = 1.0 / (double)xbase;\n\tfacx = 1.0 / (double)xbase;\n\n\tinvybase = 1.0 / (double)ybase;\n\tfacy = 1.0 / (double)ybase;\n\n\tinp = i0;\n\tx0 = 0.0;\n\twhile (inp > 0) {\n\t\tx0 = x0 + (inp % xbase) * invxbase;\n\t\tinp = inp / xbase;\n\t\tinvxbase = invxbase * facx;\n\t}\n\n\tinp = i0;\n\ty0 = 0.0;\n\twhile (inp > 0) {\n\t\ty0 = y0 + (inp % ybase) * invybase;\n\t\tinp = inp / ybase;\n\t\tinvybase = invybase * facy;\n\t}\n\n\t*px0 = x0;\n\t*py0 = y0;\n}\n\nstatic double myFunc(double x_)\n{\n\t// result [1/4]\n\treturn (x_ * x_ * x_);\n}\n\nconst static double kAnswer = 1.0/4.0;\n\nint main(void)\n{\n\tdouble xx, yy;\n\tint idx;\n\tdouble d0;\n\tint count = 0;\n\tdouble res;\n\n\td0 = 0.0;\n\tfor(idx=1; idx<=3000; idx++) {\n\t\tcount++;\n\t\tHalton_sequence(idx, &xx, &yy);\n\n\t\td0 = d0 + myFunc(xx);\n\t\tres = d0 / (double)count;\n\t\tprintf(\"%d %f err=%.2f\\%\\n\", idx, res, fabs(res/kAnswer - 1.0)*100);\n\t}\n}\n```\n\n```txt:\u5b9f\u884c\u7d50\u679c\n1 0.125000 err=50.00%\n2 0.070312 err=71.88%\n3 0.187500 err=25.00%\n...\n300 0.245102 err=1.96%\n301 0.245453 err=1.82%\n302 0.244952 err=2.02%\n...\n1000 0.248766 err=0.49%\n1001 0.248725 err=0.51%\n1002 0.248517 err=0.59%\n...\n2998 0.249347 err=0.26%\n2999 0.249531 err=0.19%\n3000 0.249448 err=0.22%\n```\n\n\u30ac\u30a6\u30b9\u7a4d\u5206\u306a\u3069\u3068\u6bd4\u3079\u3066\u540c\u3058\u7cbe\u5ea6\u3067\u306f\u8a08\u7b97\u3059\u308b\u70b9\u6570\u304c\u591a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\nQMC\u306e\u826f\u3044\u3068\u601d\u3046\u6240\u306f\u3001\u70b9\u3092\u5897\u3084\u3059\u3068\u304d\u306f\u904e\u53bb\u306e\u70b9\u305d\u306e\u307e\u307e\u304c\u4f7f\u3048\u308b\u3068\u3044\u3046\u6240\u3002\n100\u500b\u3067\u8a08\u7b97\u3057\u305f\u3051\u3069\u53ce\u675f\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001101\u500b\u76ee\u304b\u3089\u8a08\u7b97\u3092\u7d9a\u3051\u308c\u3070\u3044\u3044\u3002\u30ac\u30a6\u30b9\u7a4d\u5206\u3084\u30b7\u30f3\u30d7\u30bd\u30f3\u7a4d\u5206\u3060\u3068\u3053\u3046\u306f\u3044\u304b\u306a\u3044\u3002\n\u305d\u306e\u305f\u3081\u3001\u53ce\u675f\u7cbe\u5ea6\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u305d\u306e\u7cbe\u5ea6\u304c\u6c42\u307e\u308b\u307e\u3067\u8a08\u7b97\u3092\u7d9a\u3051\u308b\u3068\u3044\u3046\u65b9\u6cd5\u304c\u53d6\u308c\u305d\u3046\u3002\n\n\n\n\n", "tags": ["C", "\u6570\u5024\u8a08\u7b97", "QMC"]}