{"context": " More than 1 year has passed since last update.\u3055\u3066\u3001\u672c\u65e5\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u73fe\u5728\u8a71\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4eca\u306eD\u3067\u4f7f\u3048\u308b\u6a5f\u80fd\u306e\u3061\u3087\u3063\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u6240\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002(\u4ee5\u4e0b\u306e\u5185\u5bb9\u306f2012\u5e74\u672b\u307e\u3067\u306b\u306frelease\u4e88\u5b9a\u306e2.061\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u3044\u307e\u3059)\n====\n\nif statement\u4e0a\u3067\u306eopCast\u306e\u52d5\u304d\nimport std.stdio;\nvoid main() {\n    struct S {\n        bool opCast(T)() if (is(T == bool))\n        { return true; }\n    }\n    S s;\n    if (auto x = s) {\n        // \u3053\u3053\u3067x\u306e\u578b\u306f\u4f55\u306b\u306a\u308b\uff1f\n        writeln(typeof(x).stringof);\n    }\n}\n\nif\u6587\u306f\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3067s.opCast!bool\u3092\u89e3\u6c7a\u3057\u3001\u305d\u306e\u7d50\u679c\u304c\u771f\u306a\u3089then\u7bc0\u3092\u5b9f\u884c\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u6642\u6761\u4ef6\u5f0f\u306e\u7d50\u679c\u3092\u5909\u6570\u306b\u675f\u7e1b\u3059\u308b\u5834\u5408\u3001x\u306e\u578b\u306fbool\u3067\u306f\u306a\u304fS\u306b\u306a\u308a\u307e\u3059\u3002\n\nis\u5f0f\u306b\u3088\u3063\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3046\n2.061\u3067\u306fis\u5f0f\u306b\u3088\u308b\u30de\u30c3\u30c1\u30f3\u30b0\u304c\u3055\u3089\u306b\u6539\u5584\u3055\u308c\u3001\u30bf\u30d7\u30eb\u306b\u3088\u3063\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u3092\u5b9f\u4f53\u5316\u3057\u305f\u3068\u304d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nimport std.typecons;\nvoid main()\n{\n    Tuple!(int, string) t1;\n    Tuple!(string, int[]) t2;\n    foo(t1);\n    bar(t2);\n}\nvoid foo(T)(T t) {\n    static if (is(T unused == Tuple!Args, Args...)) {\n        // T\u304cstd.typecons.tuple\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3060\u3063\u305f\u5834\u5408\u306e\u307f\u3053\u3053\u306b\u6765\u308b\n        // Args\u306b\u306f(int, string)\u304c\u5165\u3063\u3066\u3044\u308b\n    }\n    else\n        static assert(0);\n}\nvoid bar(T)(T t) {\n    static if (is(T unused == X!Args, alias X, Args...)) {\n        // T\u304cX!Args\u3067\u5b9f\u4f53\u5316\u3055\u308c\u305f\u578b\u306e\u5834\u5408\u306e\u307f\u3053\u3053\u306b\u6765\u308b\n        // X\u306b\u306fstd.typecons.Tuple\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3001Args\u306b\u306f(string, int[])\u304c\u5165\u3063\u3066\u3044\u308b\n        static assert(__traits(isSame, X, std.typecons.Tuple)); // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b7\u30f3\u30dc\u30eb\u304c\u540c\u4e00\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\n        static assert(is(Args[0] == string));\n        static assert(is(Args[1] == int[]));\n    }\n    else\n        static assert(0);\n}\n\n\u3053\u308c\u306b\u95a2\u9023\u3057\u3066\u3001unused\u306e\u3088\u3046\u306a\u4e0d\u8981\u306a\u5ba3\u8a00\u3092\u7701\u3051\u308b\u3088\u3046\u306a\u6a5f\u80fd\u62e1\u5f35\u3092\u63d0\u6848\u4e2d\u3067\u3059\u3002\nIssue 8959 - IsExpression should support syntax which has no Identifier in all cases\n\n__traits(compiles)\u3068is(typeof())\u306e\u9055\u3044\n__traits(compiles)\u306f\u305d\u306e\u5834\u3067\u30b3\u30fc\u30c9\u306e\u610f\u5473\u89e3\u6790\u3092\u884c\u3044\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089false\u3092\u8fd4\u3057\u307e\u3059\u3002is(typeof())\u306f\u3053\u308c\u306b\u5bfe\u3057\u3066\u4ee5\u4e0b\u306e\u3044\u304f\u3064\u304b\u306e\u610f\u5473\u89e3\u6790\u4e0a\u306e\u30c1\u30a7\u30c3\u30af\u304c\u884c\u308f\u308c\u306a\u3044\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\n\nthis, super\u5909\u6570\u306e\u6709\u52b9\u6027\u30c1\u30a7\u30c3\u30af\nthis,super\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u5916\u3067\u306f\u901a\u5e38\u4f7f\u3048\u307e\u305b\u3093\u304c\u3001typeof\u5185\u90e8\u3067\u306f\u4f7f\u3048\u308b\u3088\u3046\u3053\u306e\u30c1\u30a7\u30c3\u30af\u306e\u6291\u5236\u304c\u50cd\u304d\u307e\u3059\nstruct S {\n    S* x = &this;   // Error\n    alias X = typeof(this); // OK\n}\n\n\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u306esuper()\u3084this()\u306e\u547c\u3073\u51fa\u3057\u30d5\u30ed\u30fc\u89e3\u6790\n\u4ee5\u4e0b\u306e\u69d8\u306a\u30b3\u30fc\u30c9\u304c\u30d5\u30ed\u30fc\u89e3\u6790\u306b\u5f15\u3063\u304b\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3067\u3059\u3002\nclass B {\n    this(string s) {}\n}\nclass C(T) : T {\n    this(string s) {\n        static if (is(typeof(super(s)))) { }\n        super(s);   // \u6700\u521d\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u547c\u51fa\u3057\u306b\u306a\u308b\n        super(s);   // Error: multiple constructor calls\n    }\n}\nalias X = C!B;\n\n\n\n@safe/pure/nothrow\u30c1\u30a7\u30c3\u30af\nvoid not_s() nothrow       pure {}\nvoid not_p() nothrow @safe      {}\nvoid not_n()         @safe pure {}\nvoid main() @safe pure nothrow {\n    //not_s();  // Error\n    //not_p();  // Error\n    //not_n();  // Error\n    pragma(msg, is(typeof( not_s() )), \", \", __traits(compiles, not_s() )); // true, false\n    pragma(msg, is(typeof( not_p() )), \", \", __traits(compiles, not_p() )); // true, false\n    pragma(msg, is(typeof( not_n() )), \", \", __traits(compiles, not_n() )); // true, true [*]\n}\n\n\n[*]\u2026nothrow\u30c1\u30a7\u30c3\u30af\u3063\u3066__traits(compiles)\u3067\u3082\u6291\u5236\u3055\u308c\u308b\u306e\u304b\uff1f \u4eca\u5ea6\u8abf\u3079\u3066\u307f\u307e\u3059\u3002\n\n\n\n\nNested struct\u306e\u53b3\u5bc6\u306a\u5b9a\u7fa9\nnested struct\u3068\u306f\u5916\u5074\u30b9\u30b3\u30fc\u30d7\u306e\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u69cb\u9020\u4f53\u5b9a\u7fa9\u306e\u3053\u3068\u3002\nvoid main() {\n    int x = 1;\n    struct SA {\n        int n;\n        void foo() { x = n; }\n    }\n    SA sa = SA(2);\n    assert(x == 1);\n    s.foo();\n    assert(x == 2); // main\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570x\u304c\u66f8\u304d\u63db\u308f\u3063\u305f\n    static assert(SA.tupleof.length == 2);   // SA\u306f\u30e1\u30f3\u30d0\u5909\u6570n\u4ee5\u5916\u306b\u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3064\n    static assert(SA.sizeof == int.sizeof + (void*).sizeof);\n    // \u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u306e\u5206\u3060\u3051\u69cb\u9020\u4f53\u306e\u30b5\u30a4\u30ba\u304c\u5897\u3048\u3066\u3044\u308b\n\n\u4e00\u822c\u7684\u306b\u306f\u95a2\u6570\u5185\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u69cb\u9020\u4f53\u3092nested struct\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u53b3\u5bc6\u306b\u306f\u4e0a\u8a18\u306e\n\u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3064\u3082\u306e\u3060\u3051\u304c(D\u8a00\u8a9e\u4ed5\u69d8\u7684\u306a)nested struct\u3068\u8a00\u3048\u307e\u3059\u3002\n\u307e\u305f\u3001\u5916\u5074\u306e\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30b3\u30fc\u30c9\u304c\u3042\u308b\uff1d\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3064\u3053\u3068\u306a\u306e\u3067\u3001\n\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u305f\u306a\u3044\u69cb\u9020\u4f53\u306e\u5834\u5408\u306f\u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u304c\u4ed8\u52a0\u3055\u308c\u307e\u305b\u3093\u3002\nvoid main() {\n    struct SB {\n        int n;\n    }\n    static assert(SB.tupleof.length == 1);   // SB\u306f\u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u305f\u306a\u3044\n    static assert(SB.sizeof == int.sizeof);\n}\n\n\u307e\u305f\u3001\u4eca\u306e\u6240nested struct\u306b\u306a\u308c\u308b\u306e\u306f\n* \u95a2\u6570\u5185\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308bstruct\n\u306e1\u30d1\u30bf\u30fc\u30f3\u306e\u307f\u3067\u3059\u3002struct/class\u306e\u4e2d\u306b\u5b9a\u7fa9\u3055\u308c\u305fstruct\u306fnested\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n(2012/12/17\u8a02\u6b63: \u30af\u30e9\u30b9\u5185\u306estruct\u306fnested struct\u306b\u306a\u308a\u307e\u305b\u3093\u3002class\u5185class(nested class)\u3068\u6df7\u540c\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\u304a\u8a6b\u3073\u3057\u3066\u8a02\u6b63\u81f4\u3057\u307e\u3059)\nstruct S {\n    int n;\n    struct N { int v; void g(){} }\n}\npragma(msg, S.sizeof);      // prints 4\npragma(msg, S.N.sizeof);    // prints 4, context pointer\u306e\u30b5\u30a4\u30ba\u3092\u542b\u307e\u306a\u3044\n\n\u3053\u308c\u306b\u3064\u3044\u3066\u306fTDPL\u306b\u8a18\u8ff0\u304c\u3042\u308b\u3089\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u306f\u3063\u304d\u308a\u3068\u3057\u305f\u7406\u7531\u306f\u8abf\u3079\u5207\u308c\u3066\u307e\u305b\u3093\u3002\n\nEponymous template\u306e\u5fdc\u7528\u4f8b\nD\u3067\u306f\u3001\u3042\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u30e1\u30f3\u30d0\u306b\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u30e1\u30f3\u30d0\u306e\u90e8\u5206\u3092\u7701\u7565\u3067\u304d\u307e\u3059(\u3068\u3044\u3046\u304b\u7701\u7565\u3092\u5f37\u5236\u3055\u308c\u308b)\n// T.init\u3092\u53d6\u308a\u51fa\u3059\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\ntemplate GetInit(T) {\n    enum GetInit = T.init;\n}\n//static assert(GetInit!(int).GetInit == int.init);   // \u3053\u3046\u3067\u306f\u306a\u304f\nstatic assert(GetInit!(int) == int.init);           // \u3053\u3046\u66f8\u3051\u308b\n\n\u6614\u306f\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u304d\u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u4ee5\u5916\u306e\u3082\u306e\u3092\u4f55\u3082\u66f8\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u73fe\u5728\u3067\u306f\u3053\u306e\u5236\u9650\u304c\u307b\u307c\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ntemplate Calc(T) {\n    import std.traits;      // \u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u305f\u3081\u306bimport\u3092\u66f8\u3044\u3066\u3082\n    static if (isIntegral!T) {      // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u6761\u4ef6\u5206\u5c90\u3092\u66f8\u3044\u3066\u3082\n        T calc() { return T.init + 10; }    // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3082\n        enum Calc = calc();     // \u6700\u7d42\u7684\u306b\"Calc\"\u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u304c\u898b\u3064\u304b\u308c\u3070OK\n    }\n    else\n        static assert(false);\n}\nenum x = Calc!int;\n\ntemplate func(string name) {\n    void func() {}\n    void func(int n) {} // \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u305f\u95a2\u6570\u3067\u3082OK\n}\nvoid test1() {\n    func!\"name\"();\n    func!\"name\"(10);\n}\n\nvoid foo() {}\nvoid bar(string s) {}\ntemplate call(string name) {\n  version(none) {   //\u3053\u308c\u306f\u307e\u3060\u99c4\u76ee\u3060\u304c\u2026\n    alias call = foo;\n    static if (name == \"yes\")\n        alias call = bar;\n  } else {\n    static if (name == \"yes\") {\n        alias ov = foo;     // \u2193\n        alias ov = bar;     // \u660e\u793a\u7684\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u304b\u3089\n        alias call = ov;    // \u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u3068\u3057\u3066alias\u3092\u5b9a\u7fa9\u3059\u308b\u3068OK\n    }\n    else\n        alias call = foo;\n  }\n}\nvoid test2() {\n    call!\"no\"();\n    static assert(!__traits(compiles, call!\"no\"(\"bad\")));\n    call!\"yes\"();\n    call!\"yes\"(\"hello\");\n}\n\n2.061\u3067\u76f4\u3063\u305fbug 5893\u3067\u306f\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u7528\u306e\u95a2\u6570\u3092\u975e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u95a2\u6570\u306b\u59d4\u8b72\u3059\u308b\u30c6\u30af\u30cb\u30c3\u30af\u304c\u51fa\u3066\u3044\u307e\u3059\u3002\nclass C {\n    void concatAssign(C other) { }\n    void concatAssign(int other) { }\n\n    template opOpAssign(string s) if (s == \"~=\")\n    { alias concatAssign opOpAssign; }\n}\nvoid main() {\n    c ~= 1; // line 15\n}\n\n\n\u30af\u30e9\u30b9\u306e\u4eee\u60f3\u95a2\u6570\u3067\u3001\u5b9f\u884c\u6642\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u56de\u907f\u3059\u308b\u65b9\u6cd5\n\u3053\u308c\u30822.061\u3067\u76f4\u3063\u305fbug 8809\u3067\u3059\u304c\u3001\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u5b9f\u884c\u6642\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u56de\u907f\u3057\u3066\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u3044\u5834\u5408\u3001obj.BaseClass.func()\u69cb\u6587\u304c\u4f7f\u3048\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f http://dlang.org/function \u304b\u3089\u5f15\u7528\nclass B {\n  int foo() { return 1; }\n}\nclass C : B {\n  override int foo() { return 2; }\n\n  void test() {\n    assert(B.foo() == 1);  // this.B.foo()\u306b\u5909\u63db\u3055\u308c\u3001\n                           // B.foo\u3092\u9759\u7684\u306b\u547c\u3073\u51fa\u3059\n    assert(C.foo() == 2);  // \u5b9f\u969b\u306ethis\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u578b\u304cD\u3067\u3042\u3063\u3066\u3082\n                           // C.foo\u3092\u9759\u7684\u306b\u547c\u3073\u51fa\u3059\n  }\n}\nclass D : C {\n  override int foo() { return 3; }\n}\nvoid main() {\n  auto d = new D();\n  assert(d.foo() == 3);    // D.foo\u3092\u547c\u3073\u51fa\u3059\n  assert(d.B.foo() == 1);  // B.foo\u3092\u547c\u3073\u51fa\u3059\n  assert(d.C.foo() == 2);  // C.foo\u3092\u547c\u3073\u51fa\u3059\n  d.test();\n}\n\n\n\u69cb\u9020\u4f53\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u547c\u51fa\u3057\u306e\u6539\u826f\n\u69cb\u9020\u4f53\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5f15\u6570\u30921\u3064\u3060\u3051\u53d6\u308b\u5834\u5408\u3001\u3053\u308c\u3092\u6697\u9ed9\u306b\u547c\u3079\u308b\u6a5f\u80fd\u304cD\u306b\u306f\u3042\u308a\u307e\u3059\u3002\nimport std.bigint;\nvoid main() {\n    BigInt n1 = BigInt(1);  // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u547c\u51fa\u3057\n    BigInt n2 = 1;    // \u6697\u9ed9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u547c\u51fa\u3057\u3001BigInt(1)\u3068\u540c\u3058\n}\n\n\u5f93\u6765\u306f\u3053\u306e\u8a18\u6cd5\u306f\u95a2\u6570\u30b9\u30b3\u30fc\u30d7\u306e\u307f\u3001\u304b\u3064\u5b9f\u884c\u6642\u306e\u5909\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u306e\u307f\u3057\u304b\u4f7f\u3048\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u30012.061\u3067\u306f\u3053\u306e\u6a5f\u80fd\u304c\u6b63\u5f0f\u306b\u3069\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f(bug 7019\u306e\u4fee\u6b63)\nstruct S {\n    int store;\n    this(int n) { store = n; }\n}\n\nenum S global_constant_s = 2;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n     S global_variable_s = 2;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n\nclass C {\n    enum S field_constant_s = 4;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n         S field_variable_s = 4;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n\n    void foo() {\n        enum S local_constant_s = 3;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n             S local_variable_s = 3;   // \u5f93\u6765\u304b\u3089\u3067\u304d\u305f\n    }\n}\n\n\u3055\u3089\u306b\u306f\u3053\u3093\u306a\u8a18\u6cd5\u3082\u53ef\u80fd\u306b\u3057\u3088\u3046\u3068\u73fe\u5728\u4f5c\u696d\u4e2d\u3067\u3059\u2026\n  BigInt[] intarr = [1, 2, 3];\n//BigInt[] intarr = [BigInt(1), BigInt(2), BigInt(3)]; \u3068\u540c\u3058\n\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u7d99\u627f\u3068\u305d\u306e\u5c5e\u6027\u63a8\u8ad6\nD\u306b\u306fpure, nothrow, @safe\u3068\u3044\u3063\u305f\u6709\u7528\u306a\u5c5e\u6027\u304c\u7d44\u307f\u8fbc\u307f\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3053\u308c\u3089\u306e\u5c5e\u6027\u3092\u6301\u3063\u3066\u3044\u305f\u5834\u5408\u3001\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u3053\u308c\u3092\u7d99\u627f\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\nclass B {\n    void foo() pure nothrow @safe {}\n}\nclass D : B {\n  //override void foo() pure nothrow @safe {}   // \u7701\u7565\u306a\u3057\n    override void foo() {}      // \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u305f\u95a2\u6570\u304b\u3089\u5c5e\u6027\u3092\u63a8\u8ad6(\u7d99\u627f)\u3059\u308b\n    pragma(msg, typeof(D.foo)); // pure nothrow @safe void()\n}\n\n\u3053\u306e\u901a\u308a\u3001D.foo\u306f\u81ea\u52d5\u7684\u306bpure nothrow @safe\u3092\u6301\u3064\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u305f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3088\u308a\u5f31\u3044\u4fdd\u8a3c\u3092\u6301\u3066\u306a\u3044\u3001\u3068\u3044\u3046\u6027\u8cea\u304b\u3089\u6765\u308b\u5fc5\u7136\u7684\u306a\u6319\u52d5\u3067\u3059\u3002\n\u5b9f\u4f8b\u3067\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\u3002\u3082\u3057D.foo\u304cnothrow\u3067\u306a\u304f\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u308b(B.foo\u3088\u308a\u5f31\u3044\u4fdd\u8a3c\u3092\u6301\u3064)\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3001B.foo\u306enothrow\u6027\u304c\u7834\u3089\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nclass B {\n    void foo() nothrow {}\n}\nclass D : B {\n    override void foo() { throw Exception(\"wow!\"); }\n    // \u4f8b\u5916\u3092\u6295\u3052\u308b(\u6b63\u3057\u3044D\u306e\u30b3\u30fc\u30c9\u3067\u306f\u306a\u3044)\n}\nvoid main() {\n    B b = new D();  // D\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092B\u3068\u3057\u3066\u4fdd\u6301\n    b.foo();        // B.foo\u306f\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u30cf\u30ba\u2026\uff1f\u2192\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\uff01\n}\n\n\u3053\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306f\u5c5e\u6027\u306b\u3088\u308b\u4fdd\u8a3c\u3092\u3081\u3061\u3083\u304f\u3061\u3083\u306b\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u9759\u7684\u306b\u691c\u51fa\u3055\u308c\u3001\u5f93\u3063\u3066D.foo\u306f\u5fc5\u305anothrow\u306b\u306a\u308b\u308f\u3051\u3067\u3059\u3002\u4e0a\u3067\u898b\u305f\u3068\u304a\u308a\u3001\u3053\u308c\u306fpure\u3068@safe\u306b\u3082\u540c\u69d8\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001@truested\u306f\u3069\u3046\u3044\u3046\u6271\u3044\u306b\u306a\u308b\u304b\u3068\u3044\u3046\u3068\u2026\nclass B {\n    void foo() @trusted {}\n}\nclass D : B {\n    override void foo() {}      // \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n    pragma(msg, typeof(D.foo)); // @safe void()\n}\n\nD.foo\u306f@safe\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u306f@trusted\u306a\u95a2\u6570\u306f\u57fa\u672c\u7684\u306b\u5b89\u5168\u3067\u306a\u3044\u305f\u3081\u3001\u3053\u308c\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u305f\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3001\u610f\u56f3\u305b\u305a@trusted\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u5b89\u5168\u5074\u306b\u5012\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002D.foo\u3082@trusted\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u3053\u3068\u3092\u660e\u793a\u7684\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6307\u793a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nclass B {\n    void foo() @trusted {}\n}\nclass D : B {\n    override void foo() @trusted {}  // \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n    pragma(msg, typeof(D.foo));      // @trusted void()\n}\n\n\n\u5024\u7bc4\u56f2\u4f1d\u642c(Value Range Propagation)\nD\u3067\u306f\u7b97\u8853\u6f14\u7b97\u306e\u7d50\u679c\u306f\u6700\u4f4eint\u578b\u306b\u307e\u3067\u6607\u683c\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306fa + b\u306e\u7d50\u679c\u306fint\u578b\u306b\u306a\u308a\u3001\u5f93\u3063\u3066c\u3078\u306e\u4ee3\u5165\u306fint\u304b\u3089byte\u3078\u306e\u72ed\u5316\u5909\u63db\u306b\u306a\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002\nbyte a, b, c;\nc = a + b;  // Error: cannot implicitly convert expression\n            // (cast(int)a + cast(int)b) of type int to byte\n\n\u3053\u308c\u306f\u610f\u56f3\u3057\u306a\u3044\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u9632\u3050\u305f\u3081C\u304b\u3089\u6539\u826f\u3055\u308c\u305f\u7b87\u6240\u3067\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u672c\u5f53\u306b\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u7121\u8996\u3057\u305f\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\nc = cast(byte)(a + b);  // OK. \u30ad\u30e3\u30b9\u30c8\u3067\u72ed\u5316\u5909\u63db\u3092\u5f37\u5236\n\n\u3053\u308c\u306f\u610f\u56f3\u901a\u308a\u306b\u52d5\u4f5c\u3057\u307e\u3059\u304c\n\n\u919c\u3044cast\u304c\u3042\u308b\n\u5c06\u6765a,b,c\u306e\u578b\u304cbyte\u304b\u3089\u5909\u308f\u3063\u305f\u5834\u5408\u3001\u30ad\u30e3\u30b9\u30c8\u306e\u578b\u3082\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n\u306a\u3069\u3044\u304f\u3064\u304b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002D\u306f\u3053\u308c\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u3001\u5024\u7bc4\u56f2\u4f1d\u642c(Value Range Propagation)\u3092\u5c0e\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\nbyte a, b, c;\nc = (a + b) & 0xFF;\n\n0xFF\u3068\u306e\u8ad6\u7406\u7a4d\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002(a + b)\u306e\u6f14\u7b97\u7d50\u679c\u304c\u4f55\u3067\u3042\u308d\u3046\u3068\u3001\u8ad6\u7406\u7a4d\u306e\u7d50\u679c\u306f8bit\u306b\u53ce\u307e\u308b\u305f\u3081byte\u3078\u306e\u72ed\u5316\u5909\u63db\u306b\u3088\u3063\u3066\u60c5\u5831\u304c\u5931\u308f\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5f93\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b89\u5168\u3067\u3042\u308b\u3068\u5224\u65ad\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u6210\u529f\u3057\u307e\u3059\u3002\n\npure\u95a2\u6570\u306e\u8a73\u7d30\u306a\u5b9a\u7fa9\n(\u4ee5\u524dTwitter\u3067\u767a\u8a00\u3057\u305f\u3082\u306e\u306e\u307e\u3068\u3081: http://togetter.com/li/330590)\n\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u5358\u306bpure\u5c5e\u6027\u3092\u4ed8\u3051\u308b\u3060\u3051\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5185\u90e8\u7684\u306b\u306f\u3053\u308c\u306f3\u7a2e\u985e\u306b\u5206\u985e\u3055\u308c\u307e\u3059\u3002\n\n\nWeak Purity:\npure\u95a2\u6570\u304c\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u53c2\u7167\u3092\u901a\u3057\u3066\u3001\u95a2\u6570\u5916\u306e\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u3002\npure int foo(int[] arr);\n\nfoo\u306f\u5f15\u6570arr\u304c\u6307\u3059\u5148\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3044\u308f\u3086\u308b\u300c\u526f\u4f5c\u7528\u300d\u3092\u6301\u3061\u307e\u3059\u3002\nD\u304c\u6301\u30643\u7a2e\u985e\u306epure\u306e\u4e2d\u3067\u6700\u3082\u5f31\u3044\u4fdd\u8a3c\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nConstant Purity:\n\u5f15\u6570\u304cconst\u306a\u5024\u3078\u306e\u53c2\u7167\u3092\u542b\u307f\u3001\u304b\u3064\u305d\u308c\u3092\u95a2\u6570\u304b\u3089\u8fd4\u3059(\u53ef\u80fd\u6027\u304c\u3042\u308b)\u5834\u5408\u3002\n\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306apure\u95a2\u6570foo\u304c\u5b58\u5728\u3057\u305f\u5834\u5408\u3001\npure const(int)[] foo(const(int)[] arr);\n\n\u5f15\u6570arr\u306ffoo\u304b\u3089\u8fd4\u3055\u308c\u308b\u5024\u306b\u51fa\u73fe\u3057\u3046\u308b\u306e\u3067(\u3053\u3053\u3067\u306ffoo\u306e\u5b9f\u88c5\u306f\u554f\u984c\u3067\u306f\u306a\u3044)\n\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306a\u547c\u51fa\u3057\u3092\u884c\u3063\u305f\u5834\u5408\u3001foo\u8fd4\u3057\u305f\u5024\u304c\u5f8c\u304b\u3089\u5909\u5316\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\nint[] arr1 = [1,2,3];\nconst(int)[] arr2 = foo(arr1);\nassert(arr2 == [1,2,3]);\narr1[0] = 99;\nassert(arr2 == [1,2,3]);    // \u3053\u306eassert\u306f\u6210\u529f\u3059\u308b\u3068\u306f\u9650\u3089\u306a\u3044\n\n\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u8a00\u8449\u3067\u8a00\u3044\u63db\u3048\u308b\u3068\u3001foo\u306e\u547c\u3073\u51fa\u3057\u306b\u3064\u3044\u3066\u53c2\u7167\u900f\u660e\u6027\u3092\u4fdd\u8a3c\u3067\u304d\u306a\u3044\u3001\u3068\u306a\u308a\u307e\u3059\u3002\n\n\nStrong Purity:\n\u5f15\u6570\u306b\u4e0d\u5909\u306a\u5024\u306e\u307f\u3092\u53d6\u308b\u5834\u5408\u3002\npure int foo(int n);\n\n\u5f15\u6570n\u306f\u5024\u30b3\u30d4\u30fc\u3067\u6e21\u3055\u308c\u308b\u305f\u3081foo\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u524d\u5f8c\u3067\u5909\u5316\u3057\u306a\u3044\npure immutable(int)[] foo(immutable(int)[] arr);\n\narr\u306fimmutable\u306a\u8981\u7d20\u3092\u6307\u3059\u306e\u3067\u3001\u305f\u3068\u3048foo\u304carr\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u3066\u3082foo\u306e\u547c\u3073\u51fa\u3057\u5f8c\u306b\u5909\u5316\u3057\u305f\u308a\u3057\u306a\u3044\nstruct S { immutable int* ptr; }\npure int foo(S s);\n\ns.ptr\u306fimmutable\u306aint\u3092\u6307\u3057\u3001s\u81ea\u4f53\u306f\u5024\u30b3\u30d4\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u5f15\u6570s\u306f\u4e0d\u5909\u306a\u5024\u306b\u306a\u308b\u3002\nWeak Purity\u306e\u3088\u3046\u306b\u5f15\u6570\u3092\u901a\u3057\u3066\u547c\u3073\u51fa\u3057\u5074\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u300c\u526f\u4f5c\u7528\u300d\u3092\u6301\u305f\u305a\u3001\u307e\u305f\u5f15\u6570\u304c\u53c2\u7167\u3092\u6301\u3064\u5834\u5408\u3082\u53c2\u7167\u5148\u306f\u5e38\u306bimmutable\u306a\u306e\u3067\u3001Constant Purity\u3067\u306f\u3067\u304d\u306a\u304b\u3063\u305f\u53c2\u7167\u900f\u660e\u6027\u304c\u4fdd\u8a3c\u3067\u304d\u308b\u306e\u304c\u3053\u306e\u7a2e\u985e\u306b\u306a\u308a\u307e\u3059\u3002\n\u547c\u3073\u51fa\u3057\u7d50\u679c\u3092\u30e1\u30e2\u5316\u3067\u304d\u308b\u306e\u3082\u3053\u306e\u30bf\u30a4\u30d7\u3067\u3059\u3002\n\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u306bpure\u5c5e\u6027\u3092\u4ed8\u3051\u305f\u5834\u5408\u3001\u6697\u9ed9\u306ethis\u304c\u5f15\u6570\u306b\u73fe\u308c\u305f\u306e\u3068\u540c\u3058\u3082\u306e\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002\nclass C {\n    int value;\n    int foo(int n) pure;\n    // pure static int foo(C _this, int n); \u3068\u540c\u3058\n    // _this.value\u3092\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\n    // \u2192Weak Purity\u306b\u306a\u308b\n\n    const(C) foo(int n) const pure;\n    // pure static int foo(const C _this, int n); \u3068\u540c\u3058\n    // \u2192Constant Purity\u306b\u306a\u308b\n\n    immutable(int)[] foo(immutable(int)[] arr) immutable pure;\n    // pure static int foo(immutable C _this, immutable(int)[] arr); \u3068\u540c\u3058\n    // \u2192Strong Purity\u306b\u306a\u308b\n}\n\n\u79c1\u7684\u306b\u306f\u3001Strong Purity\u306e\u826f\u3055\u306f\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u53c2\u7167\u900f\u660e\u6027\u3092\u526f\u4f5c\u7528\u30d0\u30ea\u30d0\u30ea\u306e\u624b\u7d9a\u304d\u578b\u8a00\u8a9e\u306b\u6301\u3061\u8fbc\u3081\u308b\u70b9\u3001Weak Purity\u306e\u826f\u3055\u306f\u30b3\u30fc\u30c9\u306e\u8aad\u307f\u3084\u3059\u3055\u306e\u5411\u4e0a(\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u72b6\u614b\u3092\u8003\u616e\u3057\u306a\u304f\u3066\u3088\u304f\u306a\u308b)\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n====\n\u5982\u4f55\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\u3002\u5f8c\u534a\u306b\u884c\u304f\u307b\u3069\u5b9f\u88c5\u304c\u307e\u3060\u4e0d\u5b8c\u5168\u306a\u611f\u3082\u3042\u308a\u307e\u3059\u304c\u3001D\u8a00\u8a9e\u306e\u529b\u3092\u611f\u3058\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u660e\u65e513\u65e5\u306f@k_hanazuki\u3055\u3093\u3067\u3059\u3002\n\u3055\u3066\u3001\u672c\u65e5\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u73fe\u5728\u8a71\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4eca\u306eD\u3067\u4f7f\u3048\u308b\u6a5f\u80fd\u306e\u3061\u3087\u3063\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u6240\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002(\u4ee5\u4e0b\u306e\u5185\u5bb9\u306f2012\u5e74\u672b\u307e\u3067\u306b\u306frelease\u4e88\u5b9a\u306e2.061\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u3044\u307e\u3059)\n\n====\n\n### if statement\u4e0a\u3067\u306eopCast\u306e\u52d5\u304d\n\n```d\nimport std.stdio;\nvoid main() {\n    struct S {\n        bool opCast(T)() if (is(T == bool))\n        { return true; }\n    }\n    S s;\n    if (auto x = s) {\n        // \u3053\u3053\u3067x\u306e\u578b\u306f\u4f55\u306b\u306a\u308b\uff1f\n        writeln(typeof(x).stringof);\n    }\n}\n```\n\nif\u6587\u306f\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3067s.opCast!bool\u3092\u89e3\u6c7a\u3057\u3001\u305d\u306e\u7d50\u679c\u304c\u771f\u306a\u3089then\u7bc0\u3092\u5b9f\u884c\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u6642\u6761\u4ef6\u5f0f\u306e\u7d50\u679c\u3092\u5909\u6570\u306b\u675f\u7e1b\u3059\u308b\u5834\u5408\u3001x\u306e\u578b\u306fbool\u3067\u306f\u306a\u304fS\u306b\u306a\u308a\u307e\u3059\u3002\n\n### is\u5f0f\u306b\u3088\u3063\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3046\n2.061\u3067\u306fis\u5f0f\u306b\u3088\u308b\u30de\u30c3\u30c1\u30f3\u30b0\u304c\u3055\u3089\u306b\u6539\u5584\u3055\u308c\u3001\u30bf\u30d7\u30eb\u306b\u3088\u3063\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u3092\u5b9f\u4f53\u5316\u3057\u305f\u3068\u304d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```d\nimport std.typecons;\nvoid main()\n{\n    Tuple!(int, string) t1;\n    Tuple!(string, int[]) t2;\n    foo(t1);\n    bar(t2);\n}\nvoid foo(T)(T t) {\n    static if (is(T unused == Tuple!Args, Args...)) {\n        // T\u304cstd.typecons.tuple\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3060\u3063\u305f\u5834\u5408\u306e\u307f\u3053\u3053\u306b\u6765\u308b\n        // Args\u306b\u306f(int, string)\u304c\u5165\u3063\u3066\u3044\u308b\n    }\n    else\n        static assert(0);\n}\nvoid bar(T)(T t) {\n    static if (is(T unused == X!Args, alias X, Args...)) {\n        // T\u304cX!Args\u3067\u5b9f\u4f53\u5316\u3055\u308c\u305f\u578b\u306e\u5834\u5408\u306e\u307f\u3053\u3053\u306b\u6765\u308b\n        // X\u306b\u306fstd.typecons.Tuple\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3001Args\u306b\u306f(string, int[])\u304c\u5165\u3063\u3066\u3044\u308b\n        static assert(__traits(isSame, X, std.typecons.Tuple)); // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b7\u30f3\u30dc\u30eb\u304c\u540c\u4e00\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\n        static assert(is(Args[0] == string));\n        static assert(is(Args[1] == int[]));\n    }\n    else\n        static assert(0);\n}\n```\n\n\u3053\u308c\u306b\u95a2\u9023\u3057\u3066\u3001`unused`\u306e\u3088\u3046\u306a\u4e0d\u8981\u306a\u5ba3\u8a00\u3092\u7701\u3051\u308b\u3088\u3046\u306a\u6a5f\u80fd\u62e1\u5f35\u3092\u63d0\u6848\u4e2d\u3067\u3059\u3002\n[Issue 8959](http://d.puremagic.com/issues/show_bug.cgi?id=8959) - IsExpression should support syntax which has no Identifier in all cases\n\n### __traits(compiles)\u3068is(typeof())\u306e\u9055\u3044\n\n`__traits(compiles)`\u306f\u305d\u306e\u5834\u3067\u30b3\u30fc\u30c9\u306e\u610f\u5473\u89e3\u6790\u3092\u884c\u3044\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089false\u3092\u8fd4\u3057\u307e\u3059\u3002`is(typeof())`\u306f\u3053\u308c\u306b\u5bfe\u3057\u3066\u4ee5\u4e0b\u306e\u3044\u304f\u3064\u304b\u306e\u610f\u5473\u89e3\u6790\u4e0a\u306e\u30c1\u30a7\u30c3\u30af\u304c\u884c\u308f\u308c\u306a\u3044\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\n1. this, super\u5909\u6570\u306e\u6709\u52b9\u6027\u30c1\u30a7\u30c3\u30af\n\n    `this`,`super`\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u5916\u3067\u306f\u901a\u5e38\u4f7f\u3048\u307e\u305b\u3093\u304c\u3001`typeof`\u5185\u90e8\u3067\u306f\u4f7f\u3048\u308b\u3088\u3046\u3053\u306e\u30c1\u30a7\u30c3\u30af\u306e\u6291\u5236\u304c\u50cd\u304d\u307e\u3059\n\n    ```d\n    struct S {\n        S* x = &this;   // Error\n        alias X = typeof(this); // OK\n    }\n    ```\n\n2. \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u306e`super()`\u3084`this()`\u306e\u547c\u3073\u51fa\u3057\u30d5\u30ed\u30fc\u89e3\u6790\n    \u4ee5\u4e0b\u306e\u69d8\u306a\u30b3\u30fc\u30c9\u304c\u30d5\u30ed\u30fc\u89e3\u6790\u306b\u5f15\u3063\u304b\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n\n    ```d\n    class B {\n        this(string s) {}\n    }\n    class C(T) : T {\n        this(string s) {\n            static if (is(typeof(super(s)))) { }\n            super(s);   // \u6700\u521d\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u547c\u51fa\u3057\u306b\u306a\u308b\n            super(s);   // Error: multiple constructor calls\n        }\n    }\n    alias X = C!B;\n    ```\n\n3. @safe/pure/nothrow\u30c1\u30a7\u30c3\u30af\n\n    ```d\n    void not_s() nothrow       pure {}\n    void not_p() nothrow @safe      {}\n    void not_n()         @safe pure {}\n    void main() @safe pure nothrow {\n        //not_s();  // Error\n        //not_p();  // Error\n        //not_n();  // Error\n        pragma(msg, is(typeof( not_s() )), \", \", __traits(compiles, not_s() )); // true, false\n        pragma(msg, is(typeof( not_p() )), \", \", __traits(compiles, not_p() )); // true, false\n        pragma(msg, is(typeof( not_n() )), \", \", __traits(compiles, not_n() )); // true, true [*]\n    }\n    ```\n    > [*]\u2026nothrow\u30c1\u30a7\u30c3\u30af\u3063\u3066__traits(compiles)\u3067\u3082\u6291\u5236\u3055\u308c\u308b\u306e\u304b\uff1f \u4eca\u5ea6\u8abf\u3079\u3066\u307f\u307e\u3059\u3002\n\n### Nested struct\u306e\u53b3\u5bc6\u306a\u5b9a\u7fa9\n\nnested struct\u3068\u306f\u5916\u5074\u30b9\u30b3\u30fc\u30d7\u306e\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u69cb\u9020\u4f53\u5b9a\u7fa9\u306e\u3053\u3068\u3002\n\n```d\nvoid main() {\n    int x = 1;\n    struct SA {\n        int n;\n        void foo() { x = n; }\n    }\n    SA sa = SA(2);\n    assert(x == 1);\n    s.foo();\n    assert(x == 2); // main\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570x\u304c\u66f8\u304d\u63db\u308f\u3063\u305f\n    static assert(SA.tupleof.length == 2);   // SA\u306f\u30e1\u30f3\u30d0\u5909\u6570n\u4ee5\u5916\u306b\u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3064\n    static assert(SA.sizeof == int.sizeof + (void*).sizeof);\n    // \u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u306e\u5206\u3060\u3051\u69cb\u9020\u4f53\u306e\u30b5\u30a4\u30ba\u304c\u5897\u3048\u3066\u3044\u308b\n```\n\n\u4e00\u822c\u7684\u306b\u306f\u95a2\u6570\u5185\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u69cb\u9020\u4f53\u3092nested struct\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u53b3\u5bc6\u306b\u306f\u4e0a\u8a18\u306e\n\u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3064\u3082\u306e\u3060\u3051\u304c(D\u8a00\u8a9e\u4ed5\u69d8\u7684\u306a)nested struct\u3068\u8a00\u3048\u307e\u3059\u3002\n\u307e\u305f\u3001\u5916\u5074\u306e\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30b3\u30fc\u30c9\u304c\u3042\u308b\uff1d\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3064\u3053\u3068\u306a\u306e\u3067\u3001\n\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u305f\u306a\u3044\u69cb\u9020\u4f53\u306e\u5834\u5408\u306f\u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u304c\u4ed8\u52a0\u3055\u308c\u307e\u305b\u3093\u3002\n\n```d\nvoid main() {\n    struct SB {\n        int n;\n    }\n    static assert(SB.tupleof.length == 1);   // SB\u306f\u96a0\u308c\u305f\u30d5\u30ec\u30fc\u30e0\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u305f\u306a\u3044\n    static assert(SB.sizeof == int.sizeof);\n}\n```\n\n\u307e\u305f\u3001\u4eca\u306e\u6240nested struct\u306b\u306a\u308c\u308b\u306e\u306f\n* \u95a2\u6570\u5185\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308bstruct\n\u306e1\u30d1\u30bf\u30fc\u30f3\u306e\u307f\u3067\u3059\u3002struct/class\u306e\u4e2d\u306b\u5b9a\u7fa9\u3055\u308c\u305fstruct\u306fnested\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n(2012/12/17\u8a02\u6b63: \u30af\u30e9\u30b9\u5185\u306estruct\u306fnested struct\u306b\u306a\u308a\u307e\u305b\u3093\u3002class\u5185class(nested class)\u3068\u6df7\u540c\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\u304a\u8a6b\u3073\u3057\u3066\u8a02\u6b63\u81f4\u3057\u307e\u3059)\n\n```d\nstruct S {\n    int n;\n    struct N { int v; void g(){} }\n}\npragma(msg, S.sizeof);      // prints 4\npragma(msg, S.N.sizeof);    // prints 4, context pointer\u306e\u30b5\u30a4\u30ba\u3092\u542b\u307e\u306a\u3044\n```\n\n\u3053\u308c\u306b\u3064\u3044\u3066\u306fTDPL\u306b\u8a18\u8ff0\u304c\u3042\u308b\u3089\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u306f\u3063\u304d\u308a\u3068\u3057\u305f\u7406\u7531\u306f\u8abf\u3079\u5207\u308c\u3066\u307e\u305b\u3093\u3002\n\n### Eponymous template\u306e\u5fdc\u7528\u4f8b\nD\u3067\u306f\u3001\u3042\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u30e1\u30f3\u30d0\u306b\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u30e1\u30f3\u30d0\u306e\u90e8\u5206\u3092\u7701\u7565\u3067\u304d\u307e\u3059(\u3068\u3044\u3046\u304b\u7701\u7565\u3092\u5f37\u5236\u3055\u308c\u308b)\n\n```d\n// T.init\u3092\u53d6\u308a\u51fa\u3059\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\ntemplate GetInit(T) {\n    enum GetInit = T.init;\n}\n//static assert(GetInit!(int).GetInit == int.init);   // \u3053\u3046\u3067\u306f\u306a\u304f\nstatic assert(GetInit!(int) == int.init);           // \u3053\u3046\u66f8\u3051\u308b\n```\n\n\u6614\u306f\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u304d\u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u4ee5\u5916\u306e\u3082\u306e\u3092\u4f55\u3082\u66f8\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u73fe\u5728\u3067\u306f\u3053\u306e\u5236\u9650\u304c\u307b\u307c\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```d\ntemplate Calc(T) {\n    import std.traits;      // \u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u305f\u3081\u306bimport\u3092\u66f8\u3044\u3066\u3082\n    static if (isIntegral!T) {      // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u6761\u4ef6\u5206\u5c90\u3092\u66f8\u3044\u3066\u3082\n        T calc() { return T.init + 10; }    // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3082\n        enum Calc = calc();     // \u6700\u7d42\u7684\u306b\"Calc\"\u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u304c\u898b\u3064\u304b\u308c\u3070OK\n    }\n    else\n        static assert(false);\n}\nenum x = Calc!int;\n\ntemplate func(string name) {\n    void func() {}\n    void func(int n) {} // \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u305f\u95a2\u6570\u3067\u3082OK\n}\nvoid test1() {\n    func!\"name\"();\n    func!\"name\"(10);\n}\n\nvoid foo() {}\nvoid bar(string s) {}\ntemplate call(string name) {\n  version(none) {   //\u3053\u308c\u306f\u307e\u3060\u99c4\u76ee\u3060\u304c\u2026\n    alias call = foo;\n    static if (name == \"yes\")\n        alias call = bar;\n  } else {\n    static if (name == \"yes\") {\n        alias ov = foo;     // \u2193\n        alias ov = bar;     // \u660e\u793a\u7684\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u304b\u3089\n        alias call = ov;    // \u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u3068\u3057\u3066alias\u3092\u5b9a\u7fa9\u3059\u308b\u3068OK\n    }\n    else\n        alias call = foo;\n  }\n}\nvoid test2() {\n    call!\"no\"();\n    static assert(!__traits(compiles, call!\"no\"(\"bad\")));\n    call!\"yes\"();\n    call!\"yes\"(\"hello\");\n}\n```\n\n2.061\u3067\u76f4\u3063\u305f[bug 5893](http://d.puremagic.com/issues/show_bug.cgi?id=5893)\u3067\u306f\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u7528\u306e\u95a2\u6570\u3092\u975e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u95a2\u6570\u306b\u59d4\u8b72\u3059\u308b\u30c6\u30af\u30cb\u30c3\u30af\u304c\u51fa\u3066\u3044\u307e\u3059\u3002\n\n```d\nclass C {\n    void concatAssign(C other) { }\n    void concatAssign(int other) { }\n\n    template opOpAssign(string s) if (s == \"~=\")\n    { alias concatAssign opOpAssign; }\n}\nvoid main() {\n    c ~= 1; // line 15\n}\n```\n\n### \u30af\u30e9\u30b9\u306e\u4eee\u60f3\u95a2\u6570\u3067\u3001\u5b9f\u884c\u6642\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u56de\u907f\u3059\u308b\u65b9\u6cd5\n\u3053\u308c\u30822.061\u3067\u76f4\u3063\u305f[bug 8809](http://d.puremagic.com/issues/show_bug.cgi?id=8809)\u3067\u3059\u304c\u3001\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u5b9f\u884c\u6642\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u56de\u907f\u3057\u3066\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u3044\u5834\u5408\u3001`obj.BaseClass.func()`\u69cb\u6587\u304c\u4f7f\u3048\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f http://dlang.org/function \u304b\u3089\u5f15\u7528\n\n```d\nclass B {\n  int foo() { return 1; }\n}\nclass C : B {\n  override int foo() { return 2; }\n\n  void test() {\n    assert(B.foo() == 1);  // this.B.foo()\u306b\u5909\u63db\u3055\u308c\u3001\n                           // B.foo\u3092\u9759\u7684\u306b\u547c\u3073\u51fa\u3059\n    assert(C.foo() == 2);  // \u5b9f\u969b\u306ethis\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u578b\u304cD\u3067\u3042\u3063\u3066\u3082\n                           // C.foo\u3092\u9759\u7684\u306b\u547c\u3073\u51fa\u3059\n  }\n}\nclass D : C {\n  override int foo() { return 3; }\n}\nvoid main() {\n  auto d = new D();\n  assert(d.foo() == 3);    // D.foo\u3092\u547c\u3073\u51fa\u3059\n  assert(d.B.foo() == 1);  // B.foo\u3092\u547c\u3073\u51fa\u3059\n  assert(d.C.foo() == 2);  // C.foo\u3092\u547c\u3073\u51fa\u3059\n  d.test();\n}\n```\n\n### \u69cb\u9020\u4f53\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u547c\u51fa\u3057\u306e\u6539\u826f\n\u69cb\u9020\u4f53\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5f15\u6570\u30921\u3064\u3060\u3051\u53d6\u308b\u5834\u5408\u3001\u3053\u308c\u3092\u6697\u9ed9\u306b\u547c\u3079\u308b\u6a5f\u80fd\u304cD\u306b\u306f\u3042\u308a\u307e\u3059\u3002\n\n```d\nimport std.bigint;\nvoid main() {\n    BigInt n1 = BigInt(1);  // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u547c\u51fa\u3057\n    BigInt n2 = 1;    // \u6697\u9ed9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u547c\u51fa\u3057\u3001BigInt(1)\u3068\u540c\u3058\n}\n```\n\n\u5f93\u6765\u306f\u3053\u306e\u8a18\u6cd5\u306f\u95a2\u6570\u30b9\u30b3\u30fc\u30d7\u306e\u307f\u3001\u304b\u3064\u5b9f\u884c\u6642\u306e\u5909\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u306e\u307f\u3057\u304b\u4f7f\u3048\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u30012.061\u3067\u306f\u3053\u306e\u6a5f\u80fd\u304c\u6b63\u5f0f\u306b\u3069\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f([bug 7019](http://d.puremagic.com/issues/show_bug.cgi?id=7019)\u306e\u4fee\u6b63)\n\n```d\nstruct S {\n    int store;\n    this(int n) { store = n; }\n}\n\nenum S global_constant_s = 2;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n     S global_variable_s = 2;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n\nclass C {\n    enum S field_constant_s = 4;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n         S field_variable_s = 4;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n\n    void foo() {\n        enum S local_constant_s = 3;   // \u53ef\u80fd\u306b\u306a\u3063\u305f\n             S local_variable_s = 3;   // \u5f93\u6765\u304b\u3089\u3067\u304d\u305f\n    }\n}\n```\n\n\u3055\u3089\u306b\u306f\u3053\u3093\u306a\u8a18\u6cd5\u3082\u53ef\u80fd\u306b\u3057\u3088\u3046\u3068\u73fe\u5728\u4f5c\u696d\u4e2d\u3067\u3059\u2026\n\n```d\n  BigInt[] intarr = [1, 2, 3];\n//BigInt[] intarr = [BigInt(1), BigInt(2), BigInt(3)]; \u3068\u540c\u3058\n```\n\n### \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u7d99\u627f\u3068\u305d\u306e\u5c5e\u6027\u63a8\u8ad6\nD\u306b\u306fpure, nothrow, @safe\u3068\u3044\u3063\u305f\u6709\u7528\u306a\u5c5e\u6027\u304c\u7d44\u307f\u8fbc\u307f\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3053\u308c\u3089\u306e\u5c5e\u6027\u3092\u6301\u3063\u3066\u3044\u305f\u5834\u5408\u3001\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u3053\u308c\u3092\u7d99\u627f\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n```d\nclass B {\n    void foo() pure nothrow @safe {}\n}\nclass D : B {\n  //override void foo() pure nothrow @safe {}   // \u7701\u7565\u306a\u3057\n    override void foo() {}      // \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u305f\u95a2\u6570\u304b\u3089\u5c5e\u6027\u3092\u63a8\u8ad6(\u7d99\u627f)\u3059\u308b\n    pragma(msg, typeof(D.foo)); // pure nothrow @safe void()\n}\n```\n\n\u3053\u306e\u901a\u308a\u3001D.foo\u306f\u81ea\u52d5\u7684\u306b`pure` `nothrow` `@safe`\u3092\u6301\u3064\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u305f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3088\u308a\u5f31\u3044\u4fdd\u8a3c\u3092\u6301\u3066\u306a\u3044\u3001\u3068\u3044\u3046\u6027\u8cea\u304b\u3089\u6765\u308b\u5fc5\u7136\u7684\u306a\u6319\u52d5\u3067\u3059\u3002\n\n\u5b9f\u4f8b\u3067\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\u3002\u3082\u3057D.foo\u304cnothrow\u3067\u306a\u304f\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u308b(B.foo\u3088\u308a\u5f31\u3044\u4fdd\u8a3c\u3092\u6301\u3064)\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3001B.foo\u306enothrow\u6027\u304c\u7834\u3089\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```\nclass B {\n    void foo() nothrow {}\n}\nclass D : B {\n    override void foo() { throw Exception(\"wow!\"); }\n    // \u4f8b\u5916\u3092\u6295\u3052\u308b(\u6b63\u3057\u3044D\u306e\u30b3\u30fc\u30c9\u3067\u306f\u306a\u3044)\n}\nvoid main() {\n    B b = new D();  // D\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092B\u3068\u3057\u3066\u4fdd\u6301\n    b.foo();        // B.foo\u306f\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u30cf\u30ba\u2026\uff1f\u2192\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\uff01\n}\n```\n\n\u3053\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306f\u5c5e\u6027\u306b\u3088\u308b\u4fdd\u8a3c\u3092\u3081\u3061\u3083\u304f\u3061\u3083\u306b\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u9759\u7684\u306b\u691c\u51fa\u3055\u308c\u3001\u5f93\u3063\u3066D.foo\u306f\u5fc5\u305anothrow\u306b\u306a\u308b\u308f\u3051\u3067\u3059\u3002\u4e0a\u3067\u898b\u305f\u3068\u304a\u308a\u3001\u3053\u308c\u306fpure\u3068@safe\u306b\u3082\u540c\u69d8\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001@truested\u306f\u3069\u3046\u3044\u3046\u6271\u3044\u306b\u306a\u308b\u304b\u3068\u3044\u3046\u3068\u2026\n\n```d\nclass B {\n    void foo() @trusted {}\n}\nclass D : B {\n    override void foo() {}      // \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n    pragma(msg, typeof(D.foo)); // @safe void()\n}\n```\n\nD.foo\u306f`@safe`\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u306f@trusted\u306a\u95a2\u6570\u306f\u57fa\u672c\u7684\u306b\u5b89\u5168\u3067\u306a\u3044\u305f\u3081\u3001\u3053\u308c\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u305f\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3001\u610f\u56f3\u305b\u305a@trusted\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u5b89\u5168\u5074\u306b\u5012\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002D.foo\u3082@trusted\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u3053\u3068\u3092\u660e\u793a\u7684\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6307\u793a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\nclass B {\n    void foo() @trusted {}\n}\nclass D : B {\n    override void foo() @trusted {}  // \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n    pragma(msg, typeof(D.foo));      // @trusted void()\n}\n```\n\n### \u5024\u7bc4\u56f2\u4f1d\u642c(Value Range Propagation)\nD\u3067\u306f\u7b97\u8853\u6f14\u7b97\u306e\u7d50\u679c\u306f\u6700\u4f4eint\u578b\u306b\u307e\u3067\u6607\u683c\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f`a + b`\u306e\u7d50\u679c\u306f`int`\u578b\u306b\u306a\u308a\u3001\u5f93\u3063\u3066c\u3078\u306e\u4ee3\u5165\u306fint\u304b\u3089byte\u3078\u306e\u72ed\u5316\u5909\u63db\u306b\u306a\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002\n\n```d\nbyte a, b, c;\nc = a + b;  // Error: cannot implicitly convert expression\n            // (cast(int)a + cast(int)b) of type int to byte\n```\n\n\u3053\u308c\u306f\u610f\u56f3\u3057\u306a\u3044\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u9632\u3050\u305f\u3081C\u304b\u3089\u6539\u826f\u3055\u308c\u305f\u7b87\u6240\u3067\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u672c\u5f53\u306b\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u7121\u8996\u3057\u305f\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n```d\nc = cast(byte)(a + b);  // OK. \u30ad\u30e3\u30b9\u30c8\u3067\u72ed\u5316\u5909\u63db\u3092\u5f37\u5236\n```\n\n\u3053\u308c\u306f\u610f\u56f3\u901a\u308a\u306b\u52d5\u4f5c\u3057\u307e\u3059\u304c\n\n* \u919c\u3044cast\u304c\u3042\u308b\n* \u5c06\u6765`a`,`b`,`c`\u306e\u578b\u304cbyte\u304b\u3089\u5909\u308f\u3063\u305f\u5834\u5408\u3001\u30ad\u30e3\u30b9\u30c8\u306e\u578b\u3082\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n\u306a\u3069\u3044\u304f\u3064\u304b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002D\u306f\u3053\u308c\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u3001\u5024\u7bc4\u56f2\u4f1d\u642c(Value Range Propagation)\u3092\u5c0e\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n\n```d\nbyte a, b, c;\nc = (a + b) & 0xFF;\n```\n\n`0xFF`\u3068\u306e\u8ad6\u7406\u7a4d\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002`(a + b)`\u306e\u6f14\u7b97\u7d50\u679c\u304c\u4f55\u3067\u3042\u308d\u3046\u3068\u3001\u8ad6\u7406\u7a4d\u306e\u7d50\u679c\u306f8bit\u306b\u53ce\u307e\u308b\u305f\u3081byte\u3078\u306e\u72ed\u5316\u5909\u63db\u306b\u3088\u3063\u3066\u60c5\u5831\u304c\u5931\u308f\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5f93\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b89\u5168\u3067\u3042\u308b\u3068\u5224\u65ad\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u6210\u529f\u3057\u307e\u3059\u3002\n\n### pure\u95a2\u6570\u306e\u8a73\u7d30\u306a\u5b9a\u7fa9\n(\u4ee5\u524dTwitter\u3067\u767a\u8a00\u3057\u305f\u3082\u306e\u306e\u307e\u3068\u3081: http://togetter.com/li/330590)\n\n\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u5358\u306b`pure`\u5c5e\u6027\u3092\u4ed8\u3051\u308b\u3060\u3051\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5185\u90e8\u7684\u306b\u306f\u3053\u308c\u306f3\u7a2e\u985e\u306b\u5206\u985e\u3055\u308c\u307e\u3059\u3002\n\n1. Weak Purity:\n    pure\u95a2\u6570\u304c\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u53c2\u7167\u3092\u901a\u3057\u3066\u3001\u95a2\u6570\u5916\u306e\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u3002\n\n    ```d\n    pure int foo(int[] arr);\n    ```\n\n    foo\u306f\u5f15\u6570arr\u304c\u6307\u3059\u5148\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3044\u308f\u3086\u308b\u300c\u526f\u4f5c\u7528\u300d\u3092\u6301\u3061\u307e\u3059\u3002\n    D\u304c\u6301\u30643\u7a2e\u985e\u306epure\u306e\u4e2d\u3067\u6700\u3082\u5f31\u3044\u4fdd\u8a3c\u306b\u306a\u308a\u307e\u3059\u3002\n\n2. Constant Purity:\n    \u5f15\u6570\u304cconst\u306a\u5024\u3078\u306e\u53c2\u7167\u3092\u542b\u307f\u3001\u304b\u3064\u305d\u308c\u3092\u95a2\u6570\u304b\u3089\u8fd4\u3059(\u53ef\u80fd\u6027\u304c\u3042\u308b)\u5834\u5408\u3002\n    \u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306apure\u95a2\u6570foo\u304c\u5b58\u5728\u3057\u305f\u5834\u5408\u3001\n\n    ```d\n    pure const(int)[] foo(const(int)[] arr);\n    ```\n\n    \u5f15\u6570arr\u306ffoo\u304b\u3089\u8fd4\u3055\u308c\u308b\u5024\u306b\u51fa\u73fe\u3057\u3046\u308b\u306e\u3067(\u3053\u3053\u3067\u306ffoo\u306e\u5b9f\u88c5\u306f\u554f\u984c\u3067\u306f\u306a\u3044)\n    \u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306a\u547c\u51fa\u3057\u3092\u884c\u3063\u305f\u5834\u5408\u3001foo\u8fd4\u3057\u305f\u5024\u304c\u5f8c\u304b\u3089\u5909\u5316\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n    ```d\n    int[] arr1 = [1,2,3];\n    const(int)[] arr2 = foo(arr1);\n    assert(arr2 == [1,2,3]);\n    arr1[0] = 99;\n    assert(arr2 == [1,2,3]);    // \u3053\u306eassert\u306f\u6210\u529f\u3059\u308b\u3068\u306f\u9650\u3089\u306a\u3044\n    ```\n\n    \u95a2\u6570\u578b\u8a00\u8a9e\u306e\u8a00\u8449\u3067\u8a00\u3044\u63db\u3048\u308b\u3068\u3001foo\u306e\u547c\u3073\u51fa\u3057\u306b\u3064\u3044\u3066\u53c2\u7167\u900f\u660e\u6027\u3092\u4fdd\u8a3c\u3067\u304d\u306a\u3044\u3001\u3068\u306a\u308a\u307e\u3059\u3002\n\n3. Strong Purity:\n    \u5f15\u6570\u306b\u4e0d\u5909\u306a\u5024\u306e\u307f\u3092\u53d6\u308b\u5834\u5408\u3002\n\n    ```d\n    pure int foo(int n);\n    ```\n    \u5f15\u6570n\u306f\u5024\u30b3\u30d4\u30fc\u3067\u6e21\u3055\u308c\u308b\u305f\u3081foo\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u524d\u5f8c\u3067\u5909\u5316\u3057\u306a\u3044\n\n    ```d\n    pure immutable(int)[] foo(immutable(int)[] arr);\n    ```\n    arr\u306fimmutable\u306a\u8981\u7d20\u3092\u6307\u3059\u306e\u3067\u3001\u305f\u3068\u3048foo\u304carr\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u3066\u3082foo\u306e\u547c\u3073\u51fa\u3057\u5f8c\u306b\u5909\u5316\u3057\u305f\u308a\u3057\u306a\u3044\n\n    ```d\n    struct S { immutable int* ptr; }\n    pure int foo(S s);\n    ```\n    `s.ptr`\u306fimmutable\u306aint\u3092\u6307\u3057\u3001s\u81ea\u4f53\u306f\u5024\u30b3\u30d4\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u5f15\u6570s\u306f\u4e0d\u5909\u306a\u5024\u306b\u306a\u308b\u3002\n\n    Weak Purity\u306e\u3088\u3046\u306b\u5f15\u6570\u3092\u901a\u3057\u3066\u547c\u3073\u51fa\u3057\u5074\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u300c\u526f\u4f5c\u7528\u300d\u3092\u6301\u305f\u305a\u3001\u307e\u305f\u5f15\u6570\u304c\u53c2\u7167\u3092\u6301\u3064\u5834\u5408\u3082\u53c2\u7167\u5148\u306f\u5e38\u306bimmutable\u306a\u306e\u3067\u3001Constant Purity\u3067\u306f\u3067\u304d\u306a\u304b\u3063\u305f\u53c2\u7167\u900f\u660e\u6027\u304c\u4fdd\u8a3c\u3067\u304d\u308b\u306e\u304c\u3053\u306e\u7a2e\u985e\u306b\u306a\u308a\u307e\u3059\u3002\n    \u547c\u3073\u51fa\u3057\u7d50\u679c\u3092\u30e1\u30e2\u5316\u3067\u304d\u308b\u306e\u3082\u3053\u306e\u30bf\u30a4\u30d7\u3067\u3059\u3002\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u306bpure\u5c5e\u6027\u3092\u4ed8\u3051\u305f\u5834\u5408\u3001\u6697\u9ed9\u306ethis\u304c\u5f15\u6570\u306b\u73fe\u308c\u305f\u306e\u3068\u540c\u3058\u3082\u306e\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002\n\n```d\nclass C {\n    int value;\n    int foo(int n) pure;\n    // pure static int foo(C _this, int n); \u3068\u540c\u3058\n    // _this.value\u3092\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\n    // \u2192Weak Purity\u306b\u306a\u308b\n\n    const(C) foo(int n) const pure;\n    // pure static int foo(const C _this, int n); \u3068\u540c\u3058\n    // \u2192Constant Purity\u306b\u306a\u308b\n\n    immutable(int)[] foo(immutable(int)[] arr) immutable pure;\n    // pure static int foo(immutable C _this, immutable(int)[] arr); \u3068\u540c\u3058\n    // \u2192Strong Purity\u306b\u306a\u308b\n}\n```\n\n\u79c1\u7684\u306b\u306f\u3001Strong Purity\u306e\u826f\u3055\u306f\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u53c2\u7167\u900f\u660e\u6027\u3092\u526f\u4f5c\u7528\u30d0\u30ea\u30d0\u30ea\u306e\u624b\u7d9a\u304d\u578b\u8a00\u8a9e\u306b\u6301\u3061\u8fbc\u3081\u308b\u70b9\u3001Weak Purity\u306e\u826f\u3055\u306f\u30b3\u30fc\u30c9\u306e\u8aad\u307f\u3084\u3059\u3055\u306e\u5411\u4e0a(\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u72b6\u614b\u3092\u8003\u616e\u3057\u306a\u304f\u3066\u3088\u304f\u306a\u308b)\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n====\n\n\u5982\u4f55\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\u3002\u5f8c\u534a\u306b\u884c\u304f\u307b\u3069\u5b9f\u88c5\u304c\u307e\u3060\u4e0d\u5b8c\u5168\u306a\u611f\u3082\u3042\u308a\u307e\u3059\u304c\u3001D\u8a00\u8a9e\u306e\u529b\u3092\u611f\u3058\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\u660e\u65e513\u65e5\u306f@k_hanazuki\u3055\u3093\u3067\u3059\u3002", "tags": ["Dlanguage", "dlang"]}