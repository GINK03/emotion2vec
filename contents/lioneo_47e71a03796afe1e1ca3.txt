{"tags": ["bootstrap", "tag", "laravel"], "context": "Bootstrap Tags Input is a JQuery plugin providing a Twitter Bootstrap user interface for managing tags.\n\nFeatures\nBootstrap tags Input plugin provides the following features :\n\nObjects as tags\nTrue multi value\nTypeahead\nDesigned for Bootstrap 2.3.2 and 3\nObjects as tags\n\nExample can be found at its own github sites : \nhttps://bootstrap-tagsinput.github.io/bootstrap-tagsinput/examples/\n\nTypeahead support\nTypeahead is not included in Bootstrap 3, so you'll have to include your own typeahead library. I'd recommed twitter typeahead.js and it can be downloaded from the following site :\nTwitter Typeahead JS : https://twitter.github.io/typeahead.js/\n\nMix them up using Laravel as server side\nIn this case, let build function in a HRM (Human Resource Management) system which allow us to add employee's skill as input tags. What we are going to build look as just simple as the following screen:\n\n\nTable definitions\nFirst of all, let define the tables that we are going to use in this sample.  We need a master table which hold the information about the skill that employee might have such as PHP, Java, and how each skill will be display.  So the table might look like this : \n\nclass CreateMstSkillsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('mstSkills', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('name');\n            $table->string('display')->nullable();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n         Schema::drop('mstSkills');\n    }\n}\n\n\n\nRoute definition\nTo display suggestion when we start to type, We need a search API which will lookin into above master tables and filter the data and return the result based on the keyword provied. It is not looking so hard to do such athing \n\nRoute::group(['prefix'=>'api','middleware' => 'auth'], function(){\n    Route::get('find', function(Illuminate\\Http\\Request $request){\n        $keyword = $request->input('keyword');\n        Log::info($keyword);\n        $skills = DB::table('mstSkills')->where('name','like','%'.$keyword.'%')\n                  ->select('mstSkills.id','mstSkills.name','mstSkills.display')\n                  ->get();\n        return json_encode($skills);\n    })->name('api.skills');\n});\n\n\nThat's all we need! Result is returned in json format.\n\nBootstrap Tag Inputs and Twitter Typeahead js\n\nInclude the plugins\nThis two library can be download from their website and we are going to included them into our blade\n\n<!-- Bootstrap tags input -->\n<script src=\"{{asset('/plugins/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js')}}\"></script>\n<!-- Type aheaed -->\n<script src=\"{{ asset('/js/typeahead/dist/typeahead.bundle.min.js') }}\" type=\"text/javascript\"></script>\n<script src=\"{{ asset('/js/typeahead/dist/bloodhound.min.js') }}\" type=\"text/javascript\"></script>\n\n\n\nHTML part\nA text input field is needed so that we can list up the employee' skills. So let take a look \n\n<div class=\"tab-pane\" id=\"TabCareerInfo\" name=\"Career History\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <label for=\"txtSkills\">{{trans('pg_candidates.table.skills')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"txtSkills\" name = \"Skills\" data-role=\"tagsinput\">                                   \n        </div>\n    </div>\n</div>\n\n\nNote that by defining the [data-role] of text input field is \"tagsinput\" we tell the tags input plugin to attach itself to this text field. At the moment without any other code, we can start to write tags into the text field and see the result :\n\n\nJavascript part\nI lose about 2 hours to find out that the initial JS of those 2 plugin should not be put in $(document).ready(). So I suggest that you should not lose another 02 stupid like me. What we need to do next is initialize Bloodhound so that it will use our defined route and return suggestion data based on what we type.\n\n<script type=\"text/javascript\">\n// Get the reference to the input field\nvar elt = $('#txtSkills'); \n\nvar skills = new Bloodhound({\n      datumTokenizer: Bloodhound.tokenizers.obj.whitespace('id'),\n      queryTokenizer: Bloodhound.tokenizers.whitespace,\n      remote: {\n            url: '{!!url(\"/\")!!}' + '/api/find?keyword=%QUERY%',\n            wildcard: '%QUERY%',                \n      }\n});\nskills.initialize();\n\n\nIt is simple and the explaination  is also written at Twitter TypeAHead.js web site  which is quite enought. Let say we are going to fetch data directly from server using the given URL and search keyword is passed in QUERY. \nThe most important part is the part where we config TagsInput to work with TypeAhead :\n\n$('#txtSkills').tagsinput({\n      itemValue : 'id',\n      itemText  : 'name',\n      maxChars: 10,\n      trimValue: true,\n      allowDuplicates : false,   \n      freeInput: false,\n      focusClass: 'form-control',\n      tagClass: function(item) {\n          if(item.display)\n             return 'label label-' + item.display;\n          else\n              return 'label label-default';\n\n      },\n      onTagExists: function(item, $tag) {\n          $tag.hide().fadeIn();\n      },\n      typeaheadjs: [{\n                hint: false,\n                        highlight: true\n                    },\n                    {\n                       name: 'skills',\n                    itemValue: 'id',\n                    displayKey: 'name',\n                    source: skills.ttAdapter(),\n                    templates: {\n                        empty: [\n                            '<ul class=\"list-group\"><li class=\"list-group-item\">Nothing found.</li></ul>'\n                        ],\n                        header: [\n                            '<ul class=\"list-group\">'\n                        ],\n                        suggestion: function (data) {\n                            return '<li class=\"list-group-item\">' + data.name + '</li>'\n                        }\n                    }\n        }]         \n});     \n\n\nWhat we did tell the plugin are\n* itemValue : The name of the field whose value will be used as hidden value corresponding to each tag. In this case we use our id as itemValue.\n* itemText : The name of the field whose value will be used to display as name of tag. IN this case we used \"name\" (PHP, Java) as itemText.\n*  tagClass : As we want to each tag has its own display, we use tagClass function. This function is called whenever a new tag is added and should return the CSS which is used to display the added tag. In our example, we use field master table's 'display' field to store the label style color of each tag.\n*  As we don't want one tag is input twice, we set allowDuplicates to false and whenever a duplicate tag is added, onTagExists function is called. We do nothing but just blink the existed tags to get user's attention.\n*  typeaheadjs part tell the configuration of typeahead so that the tag selected on suggestion will be added to input tags' text field.\n    *  Doing typeaheadjs in tagsinput's configuration is verymuch the same like we configure typeahead in standalone case. The structure of the configuration will be : typeaheadjs : [{options}, {configuration}]\n    * As you see, we disabled the hint, and allow highlight the word we type as typeaheadjs's options\n    * We then tell typeahead to use our defined Bloodhoud - skills as input of the suggestion display by indicate that [source: skills.ttAdapter()]. The name field's text will be used for display in suggestion and  id field's value will be used as itemValue. We also customize the template to display the suggestion incase there is no valid match according to what we typed and to display the list of suggest.\nSo that is the complete example of showing how our plugin cooperate to gave us the result we want.\nHope this help!\nBootstrap Tags Input is a JQuery plugin providing a Twitter Bootstrap user interface for managing tags.\n\n#  Features\n\nBootstrap tags Input plugin provides the following features :\n\n* Objects as tags\n* True multi value\n* Typeahead\n* Designed for Bootstrap 2.3.2 and 3\n* Objects as tags\n\nExample can be found at its own github sites : \n[https://bootstrap-tagsinput.github.io/bootstrap-tagsinput/examples/](http://)\n\n# Typeahead support\nTypeahead is not included in Bootstrap 3, so you'll have to include your own typeahead library. I'd recommed twitter typeahead.js and it can be downloaded from the following site :\n\nTwitter Typeahead JS : https://twitter.github.io/typeahead.js/\n\n# Mix them up using Laravel as server side \nIn this case, let build function in a HRM (Human Resource Management) system which allow us to add employee's skill as input tags. What we are going to build look as just simple as the following screen:\n![](https://cdn.scotch.io/3567/Qb5fozrnSh2QeE1mOdLt_%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202016-08-13%2022.15.51.png)\n## Table definitions\nFirst of all, let define the tables that we are going to use in this sample.  We need a master table which hold the information about the skill that employee might have such as PHP, Java, and how each skill will be display.  So the table might look like this : \n\n```php\n\nclass CreateMstSkillsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('mstSkills', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('name');\n            $table->string('display')->nullable();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n         Schema::drop('mstSkills');\n    }\n}\n\n```\n\n## Route definition\nTo display suggestion when we start to type, We need a search API which will lookin into above master tables and filter the data and return the result based on the keyword provied. It is not looking so hard to do such athing \n\n```php\n\nRoute::group(['prefix'=>'api','middleware' => 'auth'], function(){\n\tRoute::get('find', function(Illuminate\\Http\\Request $request){\n\t\t$keyword = $request->input('keyword');\n\t\tLog::info($keyword);\n\t\t$skills = DB::table('mstSkills')->where('name','like','%'.$keyword.'%')\n\t\t\t\t  ->select('mstSkills.id','mstSkills.name','mstSkills.display')\n\t\t\t\t  ->get();\n\t\treturn json_encode($skills);\n\t})->name('api.skills');\n});\n\n```\n\nThat's all we need! Result is returned in json format.\n## Bootstrap Tag Inputs and Twitter Typeahead js \n### Include the plugins\nThis two library can be download from their website and we are going to included them into our blade\n\n```html\n\n<!-- Bootstrap tags input -->\n<script src=\"{{asset('/plugins/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js')}}\"></script>\n<!-- Type aheaed -->\n<script src=\"{{ asset('/js/typeahead/dist/typeahead.bundle.min.js') }}\" type=\"text/javascript\"></script>\n<script src=\"{{ asset('/js/typeahead/dist/bloodhound.min.js') }}\" type=\"text/javascript\"></script>\n\n```\n\n### HTML part\nA text input field is needed so that we can list up the employee' skills. So let take a look \n\n```html\n\n<div class=\"tab-pane\" id=\"TabCareerInfo\" name=\"Career History\">\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\t\t\t<label for=\"txtSkills\">{{trans('pg_candidates.table.skills')}}</label>\n\t\t\t<input type=\"text\" class=\"form-control\" id=\"txtSkills\" name = \"Skills\" data-role=\"tagsinput\">\t\t\t\t\t\t\t\t\t\n\t\t</div>\n\t</div>\n</div>\n\n```\n\nNote that by defining the [data-role] of text input field is \"tagsinput\" we tell the tags input plugin to attach itself to this text field. At the moment without any other code, we can start to write tags into the text field and see the result :\n![](https://cdn.scotch.io/3567/2VwrCer2Q8KTX9IwcIgU_%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202016-08-13%2022.44.16.png)\n### Javascript part\nI lose about 2 hours to find out that the initial JS of those 2 plugin should not be put in $(document).ready(). So I suggest that you should not lose another 02 stupid like me. What we need to do next is initialize Bloodhound so that it will use our defined route and return suggestion data based on what we type.\n\n```js\n\n<script type=\"text/javascript\">\n// Get the reference to the input field\nvar elt = $('#txtSkills'); \n\nvar skills = new Bloodhound({\n\t  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('id'),\n\t  queryTokenizer: Bloodhound.tokenizers.whitespace,\n\t  remote: {\n\t\t  \turl: '{!!url(\"/\")!!}' + '/api/find?keyword=%QUERY%',\n\t\t \twildcard: '%QUERY%',        \t\t\n\t  }\n});\nskills.initialize();\n\n```\n\nIt is simple and the explaination  is also written at Twitter TypeAHead.js web site  which is quite enought. Let say we are going to fetch data directly from server using the given URL and search keyword is passed in QUERY. \n\nThe most important part is the part where we config TagsInput to work with TypeAhead :\n\n```js\n\n$('#txtSkills').tagsinput({\n\t  itemValue : 'id',\n\t  itemText  : 'name',\n\t  maxChars: 10,\n\t  trimValue: true,\n\t  allowDuplicates : false,\t \n\t  freeInput: false,\n\t  focusClass: 'form-control',\n\t  tagClass: function(item) {\n\t\t  if(item.display)\n\t\t \t return 'label label-' + item.display;\n\t\t  else\n\t\t\t  return 'label label-default';\n\t\t    \n\t  },\n\t  onTagExists: function(item, $tag) {\n\t\t  $tag.hide().fadeIn();\n\t  },\n\t  typeaheadjs: [{\n\t\t  \t\thint: false,\n\t                \thighlight: true\n\t                },\n\t                {\n\t\t    \t       name: 'skills',\n\t\t    \t\titemValue: 'id',\n\t\t    \t\tdisplayKey: 'name',\n\t\t    \t\tsource: skills.ttAdapter(),\n\t\t    \t\ttemplates: {\n\t\t                empty: [\n\t\t                    '<ul class=\"list-group\"><li class=\"list-group-item\">Nothing found.</li></ul>'\n\t\t                ],\n\t\t                header: [\n\t\t                    '<ul class=\"list-group\">'\n\t\t                ],\n\t\t                suggestion: function (data) {\n\t\t                    return '<li class=\"list-group-item\">' + data.name + '</li>'\n\t\t          \t\t}\n\t\t    \t\t}\n\t\t}]\t\t   \n});\t\t\n\t  \n```\n\nWhat we did tell the plugin are\n* itemValue : The name of the field whose value will be used as hidden value corresponding to each tag. In this case we use our id as itemValue.\n* itemText : The name of the field whose value will be used to display as name of tag. IN this case we used \"name\" (PHP, Java) as itemText.\n*  tagClass : As we want to each tag has its own display, we use tagClass function. This function is called whenever a new tag is added and should return the CSS which is used to display the added tag. In our example, we use field master table's 'display' field to store the label style color of each tag.\n*  As we don't want one tag is input twice, we set allowDuplicates to false and whenever a duplicate tag is added, onTagExists function is called. We do nothing but just blink the existed tags to get user's attention.\n*  typeaheadjs part tell the configuration of typeahead so that the tag selected on suggestion will be added to input tags' text field.\n\t*  Doing typeaheadjs in tagsinput's configuration is verymuch the same like we configure typeahead in standalone case. The structure of the configuration will be : typeaheadjs : [{options}, {configuration}]\n\t* As you see, we disabled the hint, and allow highlight the word we type as typeaheadjs's options\n\t* We then tell typeahead to use our defined Bloodhoud - skills as input of the suggestion display by indicate that [source: skills.ttAdapter()]. The name field's text will be used for display in suggestion and  id field's value will be used as itemValue. We also customize the template to display the suggestion incase there is no valid match according to what we typed and to display the list of suggest.\n\nSo that is the complete example of showing how our plugin cooperate to gave us the result we want.\n\nHope this help!\n"}