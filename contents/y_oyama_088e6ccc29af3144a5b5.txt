{"context": " More than 1 year has passed since last update.BitVisor\u306eADvisor\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\nADvisor\u6a5f\u80fd\u306f\uff0cBitVisor\u304c\u30b0\u30e9\u30d5\u30a3\u30af\u30b9\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u753b\u9762\u60c5\u5831\u306e\u53d6\u5f97\u3084\u66f4\u65b0\u3092\u3059\u308b\u6a5f\u80fd\u3067\u3059\uff0e\nADvisor\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f\uff0c\u30b0\u30e9\u30d5\u30a3\u30af\u30b9\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304cIntel\u306e\u3082\u306e\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0eNVIDIA\u306e\u30b0\u30e9\u30d5\u30a3\u30af\u30b9\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4e0a\u3067ADvisor\u6a5f\u80fd\u304c\u52d5\u3044\u305f\u3068\u3044\u3046\u5831\u544a\u3092\u805e\u3044\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u307e\u305f\uff0cHaswell\u4ee5\u964d\u306e\u30c1\u30c3\u30d7\u30bb\u30c3\u30c8\u306e\u30de\u30b7\u30f3\u3067\u306fADvisor\u6a5f\u80fd\u304c\u52d5\u304b\u306a\u3044\u3068\u3044\u3046\u5831\u544a\u3092\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e\n\nAPI\ncore/vga.c \u306b\u306f\u6570\u500b\u306e\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0eBitVisor\u306e\u4e2d\u3067\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u308a\uff0cADvisor\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u4ed5\u69d8\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u305f\u3076\u3093\u7121\u3044\u3067\u3059\u304c\uff0c\u304a\u305d\u3089\u304f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\nint vga_is_ready (void);\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u72b6\u614b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\uff0eReady\u72b6\u614b\u306a\u30891\uff0c\u305d\u3046\u3067\u306a\u3044\u306a\u30890\u304c\u8fd4\u308b\uff0e\n\nint vga_transfer_image (enum vga_func_transfer_dir dir, void *image, enum vga_func_image_type type, int stride, unsigned int width, unsigned int lines, unsigned int x, unsigned int y);\n\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u60c5\u5831\u3092\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u304b\u3089\u8aad\u307f\u8fbc\u3080\uff0c\u307e\u305f\u306f\uff0c\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u66f8\u304d\u8fbc\u3080\uff0e\n\u5f15\u6570\u306b\u95a2\u3059\u308b\u4ed5\u69d8\uff1a\ndir: VGA_FUNC_TRANSFER_DIR_GET\u3092\u4e0e\u3048\u308b\u3068\u8aad\u307f\u8fbc\u307f\uff0eVGA_FUNC_TRANSFER_DIR_PUT\u3092\u4e0e\u3048\u308b\u3068\u66f8\u304d\u8fbc\u307f\uff0e\nimage: \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u30dd\u30a4\u30f3\u30bf\uff0e\ntype: \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306e\u8868\u73fe\u5f62\u5f0f\u3092\u4e0e\u3048\u308b\u305f\u3081\u306e\u5f15\u6570\u3068\u601d\u308f\u308c\u308b\u304c\uff0c\u304a\u305d\u3089\u304f\u73fe\u5728\u306fVGA_FUNC_IMAGE_TYPE_BGRX_8888\u304c\u552f\u4e00\u306e\u9078\u629e\u80a2\uff0e\nstride: \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u60c5\u5831\u306e\u5404\u884c\u306e\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\uff08\u5358\u4f4d\u306f\u30d0\u30a4\u30c8\uff09\uff0e\nwidth, lines: \u8aad\u307f\u66f8\u304d\u3059\u308b\u9818\u57df\u306e\u6a2a\u5e45\u3068\u7e26\u5e45\uff08\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\uff09\uff0e\nx, y: \u8aad\u307f\u66f8\u304d\u3059\u308b\u9818\u57df\u306e\u5ea7\u6a19\uff0e\n\nint vga_fill_rect (void *image, enum vga_func_image_type type, unsigned int x, unsigned int y, unsigned int width, unsigned int height);\n\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u60c5\u5831\u3092\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u66f8\u304d\u8fbc\u3080\uff0e\n\u5f15\u6570\u306b\u95a2\u3059\u308b\u4ed5\u69d8\uff1a vga_transfer_image\u3068\u540c\u69d8\uff0e\n\nint vga_get_screen_size (unsigned int *width, unsigned int *height);\n\n\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u7e26\u5e45\u3068\u6a2a\u5e45\u3092\u53d6\u5f97\u3059\u308b\uff0e\u53d6\u5f97\u306b\u6210\u529f\u3057\u305f\u30891\uff0c\u5931\u6557\u3057\u305f\u30890\u304c\u8fd4\u308b\uff0e\n\u5f15\u6570\u306b\u95a2\u3059\u308b\u4ed5\u69d8\uff1a\nwidth: \u3053\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5148\u306b\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u6a2a\u30d4\u30af\u30bb\u30eb\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e\nheight: \u3053\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5148\u306b\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u7e26\u30d4\u30af\u30bb\u30eb\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e\n\n\u5229\u7528\u4f8b\n\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\uff0c\u305f\u3068\u3048\u3070\uff0c\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\u304c\u52dd\u624b\u306b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u3092\u30e2\u30b6\u30a4\u30af\u5316\u3059\u308b\u51e6\u7406\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u306e\u95a2\u6570\u3092 core/vga.c \u306e\u4e2d\u306b\u52a0\u3048\u3066\uff0cBitVisor\u306e\u4e2d\u306e\u3069\u3053\u304b\u304b\u3089\u547c\u3073\u51fa\u305b\u3070OK\u3067\u3059\uff0e\nint vga_tessellate_screen(unsigned int tile_size)\n{\n  unsigned int width, height;\n  unsigned int x, y;\n  u32 *tile;\n\n  if (!vga_is_ready()) {\n    return 0;\n  }\n\n  if (!vga_get_screen_size(&width, &height)) {\n    return 0;\n  }\n\n  tile = alloc(tile_size * tile_size * sizeof(u32));\n  for (y = 0; y < height; y += tile_size) {\n    for (x = 0; x < width; x += tile_size) {\n      int j;\n      if ((x + tile_size > width) || (y + tile_size > height)) {\n        continue;\n      }\n      if (vga_transfer_image(VGA_FUNC_TRANSFER_DIR_GET, tile,\n                             VGA_FUNC_IMAGE_TYPE_BGRX_8888,\n                             sizeof tile[0] * tile_size,\n                             tile_size, tile_size,\n                             x, y) < 0) {\n        goto out;\n      }\n      for (j = 1; j < tile_size * tile_size; j++) {\n        tile[j] = tile[0];\n      }\n      if (vga_transfer_image(VGA_FUNC_TRANSFER_DIR_PUT, tile,\n                             VGA_FUNC_IMAGE_TYPE_BGRX_8888,\n                             sizeof tile[0] * tile_size,\n                             tile_size, tile_size,\n                             x, y) < 0) {\n        goto out;\n      }\n    }\n  }\n\n out:\n  free(tile);\n  return 1;\n}\n\nBefore\n\nAfter\n\n\n\u8cc7\u6599\u3084\u767a\u8868\nADvisor\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306b\u8a73\u3057\u3044\u3067\u3059\uff0e\n\n\u5bae\u5143 \u666f\u51ac. \"ADvisor\u6a5f\u80fd\u3092\u5fdc\u7528\u3057\u305f\u6709\u5bb3\u753b\u50cf\u306e\u8996\u899a\u7684\u898f\u5236\", BitVisor Summit 4, 2015\u5e7411\u6708.\n\u5e73\u4e95 \u6210\u6d77. \"SSLWatcher: SSL/TLS\u901a\u4fe1\u3092\u76e3\u8996\u3057\u8b66\u544a\u3059\u308b\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\", BitVisor Summit 4, 2015\u5e7411\u6708. PDF\n\u5927\u5c71 \u6075\u5f18. \"\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\u306b\u3088\u308b\u707d\u5bb3\u8b66\u5831\u901a\u77e5\", \u7b2c14\u56de\u60c5\u5831\u79d1\u5b66\u6280\u8853\u30d5\u30a9\u30fc\u30e9\u30e0, pages 213-216, 2015\u5e749\u6708.\nYoshihiro Oyama. \"A Hypervisor for Manipulating Guest Screens\", In poster session in the 6th ACM SIGOPS Asia-Pacific Workshop on Systems (APSys 2015), July 2015. Abstract\nYoshihiro Oyama, Natsuki Ogawa, Yudai Kawasaki, Kazuhiro Yamamoto.  \"ADvisor: A Hypervisor for Displaying Images on a Desktop\", In Proceedings of the 2nd International Workshop on Computer Systems and Architectures (CSA '14), held in conjunction with the 2nd International Symposium on Computing and Networking (CANDAR 2014), pages 412-418, December 2014. Paper\n\u5c71\u672c \u822a\u6d0b. \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308bADvisor\u6a5f\u80fd\u306e\u62e1\u5f35\", BitVisor Summit 2, 2013\u5e7412\u6708. PDF\n\u5927\u5c71 \u6075\u5f18, \u6cb3\u5d0e \u96c4\u5927. \"BitVisor\u3092\u7528\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\u30b7\u30b9\u30c6\u30e0\", BitVisor Summit, 2012\u5e7412\u6708. PDF\n\u5c0f\u5ddd \u590f\u6a39, \u5927\u5c71 \u6075\u5f18. \"ADvisor: \u30b2\u30b9\u30c8OS\u306e\u64cd\u4f5c\u306b\u9023\u52d5\u3057\u305f\u5e83\u544a\u3092\u8868\u793a\u3059\u308b\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\", \u60c5\u5831\u51e6\u7406\u5b66\u4f1a2011\u5e74\u4e26\u5217\uff0f\u5206\u6563\uff0f\u5354\u8abf\u51e6\u7406\u306b\u95a2\u3059\u308b\u300e\u9e7f\u5150\u5cf6\u300f\u30b5\u30de\u30fc\u30fb\u30ef\u30fc\u30af\u30b7\u30e7\u30c3\u30d7\uff08SWoPP\u9e7f\u5150\u5cf62011\uff09, 2011\u5e747\u6708. \u8ad6\u6587\n\u5927\u5c71 \u6075\u5f18. \"\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\u306b\u3088\u308b\u5e83\u544a\u8868\u793a\", \u7b2c9\u56de\u60c5\u5831\u79d1\u5b66\u6280\u8853\u30d5\u30a9\u30fc\u30e9\u30e0, pages 341-342, 2010\u5e749\u6708. \n\nBitVisor\u306eADvisor\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\nADvisor\u6a5f\u80fd\u306f\uff0cBitVisor\u304c\u30b0\u30e9\u30d5\u30a3\u30af\u30b9\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u753b\u9762\u60c5\u5831\u306e\u53d6\u5f97\u3084\u66f4\u65b0\u3092\u3059\u308b\u6a5f\u80fd\u3067\u3059\uff0e\n\nADvisor\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f\uff0c\u30b0\u30e9\u30d5\u30a3\u30af\u30b9\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304cIntel\u306e\u3082\u306e\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0eNVIDIA\u306e\u30b0\u30e9\u30d5\u30a3\u30af\u30b9\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4e0a\u3067ADvisor\u6a5f\u80fd\u304c\u52d5\u3044\u305f\u3068\u3044\u3046\u5831\u544a\u3092\u805e\u3044\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u307e\u305f\uff0cHaswell\u4ee5\u964d\u306e\u30c1\u30c3\u30d7\u30bb\u30c3\u30c8\u306e\u30de\u30b7\u30f3\u3067\u306fADvisor\u6a5f\u80fd\u304c\u52d5\u304b\u306a\u3044\u3068\u3044\u3046\u5831\u544a\u3092\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e\n\n## API\n\ncore/vga.c \u306b\u306f\u6570\u500b\u306e\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0eBitVisor\u306e\u4e2d\u3067\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u308a\uff0cADvisor\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u4ed5\u69d8\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u305f\u3076\u3093\u7121\u3044\u3067\u3059\u304c\uff0c\u304a\u305d\u3089\u304f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n#### `int vga_is_ready (void);`\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u72b6\u614b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\uff0eReady\u72b6\u614b\u306a\u30891\uff0c\u305d\u3046\u3067\u306a\u3044\u306a\u30890\u304c\u8fd4\u308b\uff0e\n\n#### `int vga_transfer_image (enum vga_func_transfer_dir dir, void *image, enum vga_func_image_type type, int stride, unsigned int width, unsigned int lines, unsigned int x, unsigned int y);`\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u60c5\u5831\u3092\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u304b\u3089\u8aad\u307f\u8fbc\u3080\uff0c\u307e\u305f\u306f\uff0c\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u66f8\u304d\u8fbc\u3080\uff0e\n\n\u5f15\u6570\u306b\u95a2\u3059\u308b\u4ed5\u69d8\uff1a\ndir: VGA_FUNC_TRANSFER_DIR_GET\u3092\u4e0e\u3048\u308b\u3068\u8aad\u307f\u8fbc\u307f\uff0eVGA_FUNC_TRANSFER_DIR_PUT\u3092\u4e0e\u3048\u308b\u3068\u66f8\u304d\u8fbc\u307f\uff0e\nimage: \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u30dd\u30a4\u30f3\u30bf\uff0e\ntype: \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306e\u8868\u73fe\u5f62\u5f0f\u3092\u4e0e\u3048\u308b\u305f\u3081\u306e\u5f15\u6570\u3068\u601d\u308f\u308c\u308b\u304c\uff0c\u304a\u305d\u3089\u304f\u73fe\u5728\u306fVGA_FUNC_IMAGE_TYPE_BGRX_8888\u304c\u552f\u4e00\u306e\u9078\u629e\u80a2\uff0e\nstride: \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u60c5\u5831\u306e\u5404\u884c\u306e\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\uff08\u5358\u4f4d\u306f\u30d0\u30a4\u30c8\uff09\uff0e\nwidth, lines: \u8aad\u307f\u66f8\u304d\u3059\u308b\u9818\u57df\u306e\u6a2a\u5e45\u3068\u7e26\u5e45\uff08\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\uff09\uff0e\nx, y: \u8aad\u307f\u66f8\u304d\u3059\u308b\u9818\u57df\u306e\u5ea7\u6a19\uff0e\n\n#### `int vga_fill_rect (void *image, enum vga_func_image_type type, unsigned int x, unsigned int y, unsigned int width, unsigned int height);`\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u60c5\u5831\u3092\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u66f8\u304d\u8fbc\u3080\uff0e\n\n\u5f15\u6570\u306b\u95a2\u3059\u308b\u4ed5\u69d8\uff1a vga_transfer_image\u3068\u540c\u69d8\uff0e\n\n#### `int vga_get_screen_size (unsigned int *width, unsigned int *height);`\n\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u7e26\u5e45\u3068\u6a2a\u5e45\u3092\u53d6\u5f97\u3059\u308b\uff0e\u53d6\u5f97\u306b\u6210\u529f\u3057\u305f\u30891\uff0c\u5931\u6557\u3057\u305f\u30890\u304c\u8fd4\u308b\uff0e\n\n\u5f15\u6570\u306b\u95a2\u3059\u308b\u4ed5\u69d8\uff1a\nwidth: \u3053\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5148\u306b\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u6a2a\u30d4\u30af\u30bb\u30eb\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e\nheight: \u3053\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5148\u306b\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u7e26\u30d4\u30af\u30bb\u30eb\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e\n\n## \u5229\u7528\u4f8b\n\n\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\uff0c\u305f\u3068\u3048\u3070\uff0c\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\u304c\u52dd\u624b\u306b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u3092\u30e2\u30b6\u30a4\u30af\u5316\u3059\u308b\u51e6\u7406\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u306e\u95a2\u6570\u3092 core/vga.c \u306e\u4e2d\u306b\u52a0\u3048\u3066\uff0cBitVisor\u306e\u4e2d\u306e\u3069\u3053\u304b\u304b\u3089\u547c\u3073\u51fa\u305b\u3070OK\u3067\u3059\uff0e\n\n```c:\nint vga_tessellate_screen(unsigned int tile_size)\n{\n  unsigned int width, height;\n  unsigned int x, y;\n  u32 *tile;\n\n  if (!vga_is_ready()) {\n    return 0;\n  }\n\n  if (!vga_get_screen_size(&width, &height)) {\n    return 0;\n  }\n\n  tile = alloc(tile_size * tile_size * sizeof(u32));\n  for (y = 0; y < height; y += tile_size) {\n    for (x = 0; x < width; x += tile_size) {\n      int j;\n      if ((x + tile_size > width) || (y + tile_size > height)) {\n        continue;\n      }\n      if (vga_transfer_image(VGA_FUNC_TRANSFER_DIR_GET, tile,\n                             VGA_FUNC_IMAGE_TYPE_BGRX_8888,\n                             sizeof tile[0] * tile_size,\n                             tile_size, tile_size,\n                             x, y) < 0) {\n        goto out;\n      }\n      for (j = 1; j < tile_size * tile_size; j++) {\n        tile[j] = tile[0];\n      }\n      if (vga_transfer_image(VGA_FUNC_TRANSFER_DIR_PUT, tile,\n                             VGA_FUNC_IMAGE_TYPE_BGRX_8888,\n                             sizeof tile[0] * tile_size,\n                             tile_size, tile_size,\n                             x, y) < 0) {\n        goto out;\n      }\n    }\n  }\n\n out:\n  free(tile);\n  return 1;\n}\n```\nBefore\n\n![advisor1.jpg](https://qiita-image-store.s3.amazonaws.com/0/105071/107d4a56-280f-f72e-0c88-29a9cbf9ea10.jpeg)\n\nAfter\n\n![advisor2.jpg](https://qiita-image-store.s3.amazonaws.com/0/105071/b72984b8-11bf-6860-2288-a9bab6d1697a.jpeg)\n\n## \u8cc7\u6599\u3084\u767a\u8868\n\nADvisor\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306b\u8a73\u3057\u3044\u3067\u3059\uff0e\n\n- \u5bae\u5143 \u666f\u51ac. \"ADvisor\u6a5f\u80fd\u3092\u5fdc\u7528\u3057\u305f\u6709\u5bb3\u753b\u50cf\u306e\u8996\u899a\u7684\u898f\u5236\", [BitVisor Summit 4](https://www.bitvisor.org/summit4/), 2015\u5e7411\u6708.\n\n- \u5e73\u4e95 \u6210\u6d77. \"SSLWatcher: SSL/TLS\u901a\u4fe1\u3092\u76e3\u8996\u3057\u8b66\u544a\u3059\u308b\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\", [BitVisor Summit 4](https://www.bitvisor.org/summit4/), 2015\u5e7411\u6708. [PDF](https://www.bitvisor.org/summit4/slides/bitvisor-summit-4-8-hirai.pdf)\n\n- \u5927\u5c71 \u6075\u5f18. \"\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\u306b\u3088\u308b\u707d\u5bb3\u8b66\u5831\u901a\u77e5\", \u7b2c14\u56de\u60c5\u5831\u79d1\u5b66\u6280\u8853\u30d5\u30a9\u30fc\u30e9\u30e0, pages 213-216, 2015\u5e749\u6708.\n\n- Yoshihiro Oyama. \"A Hypervisor for Manipulating Guest Screens\", In poster session in [the 6th ACM SIGOPS Asia-Pacific Workshop on Systems (APSys 2015)](http://www.sslab.ics.keio.ac.jp/apsys2015/), July 2015. [Abstract](http://www.sslab.ics.keio.ac.jp/apsys2015/assets/posters/4.pdf)\n\n- Yoshihiro Oyama, Natsuki Ogawa, Yudai Kawasaki, Kazuhiro Yamamoto.  \"ADvisor: A Hypervisor for Displaying Images on a Desktop\", In Proceedings of the 2nd International Workshop on Computer Systems and Architectures (CSA '14), held in conjunction with the 2nd International Symposium on Computing and Networking (CANDAR 2014), pages 412-418, December 2014. [Paper](http://dx.doi.org/10.1109/CANDAR.2014.43)\n\n- \u5c71\u672c \u822a\u6d0b. \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308bADvisor\u6a5f\u80fd\u306e\u62e1\u5f35\", [BitVisor Summit 2](http://www.bitvisor.org/summit2/), 2013\u5e7412\u6708. [PDF](http://www.bitvisor.org/summit2/slides/bitvisor-summit-2-08-yamamoto.pdf)\n\n- \u5927\u5c71 \u6075\u5f18, \u6cb3\u5d0e \u96c4\u5927. \"BitVisor\u3092\u7528\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\u30b7\u30b9\u30c6\u30e0\", [BitVisor Summit](http://www.bitvisor.org/summit/), 2012\u5e7412\u6708. [PDF](http://www.bitvisor.org/summit/slides/BitVisor-Summit-06-oyama.pdf)\n\n- \u5c0f\u5ddd \u590f\u6a39, \u5927\u5c71 \u6075\u5f18. \"ADvisor: \u30b2\u30b9\u30c8OS\u306e\u64cd\u4f5c\u306b\u9023\u52d5\u3057\u305f\u5e83\u544a\u3092\u8868\u793a\u3059\u308b\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\", \u60c5\u5831\u51e6\u7406\u5b66\u4f1a2011\u5e74\u4e26\u5217\uff0f\u5206\u6563\uff0f\u5354\u8abf\u51e6\u7406\u306b\u95a2\u3059\u308b\u300e\u9e7f\u5150\u5cf6\u300f\u30b5\u30de\u30fc\u30fb\u30ef\u30fc\u30af\u30b7\u30e7\u30c3\u30d7\uff08SWoPP\u9e7f\u5150\u5cf62011\uff09, 2011\u5e747\u6708. [\u8ad6\u6587](http://id.nii.ac.jp/1001/00075279/)\n\n- \u5927\u5c71 \u6075\u5f18. \"\u30cf\u30a4\u30d1\u30d0\u30a4\u30b6\u306b\u3088\u308b\u5e83\u544a\u8868\u793a\", \u7b2c9\u56de\u60c5\u5831\u79d1\u5b66\u6280\u8853\u30d5\u30a9\u30fc\u30e9\u30e0, pages 341-342, 2010\u5e749\u6708. \n\n\n\n", "tags": ["BitVisor", "ADvisor"]}