{"context": "\u968f\u6642\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nMTLTexture \u3092\u30b3\u30d4\u30fc\u3059\u308b\n\u305f\u3068\u3048\u3070MTKView\u3067\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u304d\u305f\u30c6\u30af\u30b9\u30c1\u30e3\uff08MTLTexture\uff09\u3092\u63cf\u753b\u3057\u305f\u3044\u3068\u304d\u306b\u3001\ncurrentDrawable.texture = aTexture\n\n\u307f\u305f\u3044\u306a\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u3084\u3063\u305f\u307f\u305f\u3044\u306b\u3001\u30d1\u30b9\u30b9\u30eb\u30fc\u30b7\u30a7\u30fc\u30c0\u3092\u66f8\u3044\u3066\u66f8\u304d\u8fbc\u3080\u65b9\u6cd5\u3082\u3042\u308b\u304c\u3001\u3082\u3063\u3068\u624b\u8efd\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001 MTLBlitCommandEncoder \u306e\u30b3\u30d4\u30fc\u6a5f\u80fd\u3092\u4f7f\u3046\u65b9\u6cd5\u304c\u3042\u308b\u3002\nlet commandBuffer = commandQueue.makeCommandBuffer()\n\nlet blitEncoder = commandBuffer.makeBlitCommandEncoder()\nblitEncoder.copy(from: fromTexture,\n                 sourceSlice: 0,\n                 sourceLevel: 0,\n                 sourceOrigin: MTLOrigin(x: 0, y: 0, z: 0),\n                 sourceSize: MTLSizeMake(fromTexture.width, fromTexture.height, fromTexture.depth),\n                 to: drawable.texture,\n                 destinationSlice: 0,\n                 destinationLevel: 0,\n                 destinationOrigin: MTLOrigin(x: 0, y: 0, z: 0))\nblitEncoder.endEncoding()\n\ncommandBuffer.present(drawable)\ncommandBuffer.commit()\ncommandBuffer.waitUntilCompleted()\n\n\n\u53c2\u8003\uff1a Display Images with MTKView\n\n\n\nMTLTexture\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\nMetal Performance Shaders\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306eMPSImageLanczosScale\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3002\n\u4e0b\u8a18\u8a18\u4e8b\u3092\u53c2\u7167\uff1a\n- Metal\u3067\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b - Qiita\n\nMTLTexture\u3092\u65b0\u898f\u751f\u6210\u3059\u308b\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089MTKTextureLoader\u3067\u8aad\u307f\u8fbc\u3093\u3067\u304f\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u65b0\u898f\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001MTLTextureDescriptor\u3092\u4f7f\u7528\u3059\u308b\u3002\nlet textureDescriptor = MTLTextureDescriptor.texture2DDescriptor(pixelFormat: pixelFormat, width: width, height: height, mipmapped: true)\nlet texture = device.makeTexture(descriptor: textureDescriptor)\n\n\nUIImage \u3092 MTLTexture \u306b\u5909\u63db\u3059\u308b\nimage \u3068\u3044\u3046UIImage\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308b\u3068\u3057\u3066\u3001MTKTextureLoader\u3092\u7528\u3044\u3066\u6b21\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u3002\nguard let cgImage = image?.cgImage else {return}    \ndo {\n    try texture = textureLoader.newTexture(with: cgImage, options: nil)\n} catch {\n    fatalError(\"Could not load the texture. error: \\(error).\")\n}\n\n\n\u30a2\u30bb\u30c3\u30c8\u304b\u3089MTLTexture\u3092\u751f\u6210\u3059\u308b\n\u30a2\u30bb\u30c3\u30c8\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u3059\u3050\u63cf\u753b\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u3044\u3063\u305f\u3093UIImage\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3064\u304f\u308b\u306e\u306fCPU\u306e\u30e0\u30c0\u3002MTKTextureLoader \u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306basset name\u3092\u76f4\u63a5\u6e21\u3057\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\nfunc newTexture(withName name: String, scaleFactor: CGFloat, bundle: Bundle?, options: [String : NSObject]? = nil) throws -> MTLTexture\n\n\niOS\u30c7\u30d0\u30a4\u30b9\u304cMetal Performance Shaders\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\n\u3053\u306e\u8a18\u4e8b\u306e\u300eMetal Feature Sets\u300f\u306e\u9805\u306b\u66f8\u3044\u305f\u3068\u304a\u308a\u3001\u5f53\u8a72iOS\u30c7\u30d0\u30a4\u30b9\u304c\u3001Metal\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u3066\u3082MPS\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3082\u3042\u308a\u3048\u307e\u3059\u3002\uff08\u4f8b\uff1aiPhone 5s\uff09\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002\nguard MPSSupportsMTLDevice(device) else {\n    print(\"Metal Performance Shaders not Supported on current Device\")\n    return\n}\n\n\nMTLTexture\u306b\u30d6\u30e9\u30fc\u3092\u304b\u3051\u308b\nMetal Performance Shaders\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306eMPSImageGaussianBlur\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3002\n\u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3\uff0f\u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u305d\u308c\u305e\u308c\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3\u305d\u306e\u3082\u306e\u306b\u51fa\u529b\uff08in place\uff09\u3059\u308b\u65b9\u6cd5\u3068\u304c\u3042\u308b\u3002\n\u305f\u3068\u3048\u3070MTKView\u306ecurrentDrawable.texture\u306b\u65e2\u306b\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u308b\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u305f\u3044\u5834\u5408\u3001in place\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u51e6\u7406\u3067\u304d\u308b\u3002\nguard let drawable = currentDrawable else {\n    return\n}\nlet blur = MPSImageGaussianBlur(device: device, sigma: blurRadius)\nlet commandBuffer = commandQueue.makeCommandBuffer()\nvar drawableTexture = drawable.texture\n_ = withUnsafeMutablePointer(to: &drawableTexture) { (texturePtr: UnsafeMutablePointer<MTLTexture>) in\n    blur.encode(commandBuffer: commandBuffer, inPlaceTexture: texturePtr, fallbackCopyAllocator: nil)\n}\ncommandBuffer.commit()\ncommandBuffer.waitUntilCompleted()\n\n\u5165\u529b\uff0f\u51fa\u529b\u3092\u305d\u308c\u305e\u308c\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3002\nlet blur = MPSImageGaussianBlur(device: device, sigma: blurSigma)\nlet commandBuffer = commandQueue.makeCommandBuffer()\nblur.encode(commandBuffer: commandBuffer, sourceTexture: sourceTexture, destinationTexture: destinationTexture)\ncommandBuffer.commit()\ncommandBuffer.waitUntilCompleted()\n\n\n\uff08\u30b7\u30b0\u30de0\u301c100\u301c0\u309260 fps\u3067\u5909\u5316\u3055\u305b\u3066\u307f\u305f\u69d8\u5b50\u3002AnimatedGIF\u3068\u3044\u3046\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u90fd\u5408\u4e0a\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u6c5a\u3044\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f\u3059\u3054\u304f\u7dba\u9e97\u3067\u3059\u3002\uff09\n\nCMSampleBuffer -> CVImageBuffer (CVPixelBuffer) -> MTLTexture\nAVFoudation\u3092\u7528\u3044\u3066\u5f97\u3089\u308c\u308b\u30ab\u30e1\u30e9\u5165\u529b\u3092Metal\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u51e6\u7406\u3059\u308b\u969b\u306b\u3053\u306e\u5909\u63db\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\uff1a\n\nMetal\u3067\u30ab\u30e1\u30e9\u304b\u3089\u306e\u52d5\u753b\u5165\u529b\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u51e6\u7406\u3059\u308b - Qiita\n\n\nMTLTexture\u306e\u8ee2\u7f6e\uff08\u884c\u3068\u5217\u306e\u5165\u308c\u66ff\u3048\uff09\nLandscape\u3067\u5165\u3063\u3066\u304d\u305f\u30ab\u30e1\u30e9\u5165\u529b\u3092Portrait\u306b\u3057\u305f\u3044\u5834\u5408\u3068\u304b\u306b\u3002MPSImageTranspose\u3092\u4f7f\u3046\u3002\u5f15\u6570\u7b49\u306f\u4e00\u5207\u306a\u3057\u3002\n\nobj\nMPSImageTranspose *transpose =[[MPSImageTranspose alloc] initWithDevice:commandQueue.device];\n[transpose encodeToCommandBuffer:commandBuffer\n                   sourceTexture:scrTexture\n              destinationTexture:dstTexture];\n\n\n\nMTLTexture -> CIImage\nCIImage\u306b\u306fMTLTexture\u3092\u5f15\u6570\u306b\u6e21\u305b\u308b\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u304c\u3001\nlet inputImage = CIImage(mtlTexture: texture, options: nil)\n\n\u3053\u308c\u3060\u3051\u3060\u3068\u4e0a\u4e0b\u53cd\u8ee2\u3057\u305f\u753b\u50cf\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306by\u65b9\u5411\u306b\u30d5\u30ea\u30c3\u30d7\u3055\u305b\u308b\u3002\nlet inputImage = CIImage(mtlTexture: texture, options: nil)?.applying(CGAffineTransform(scaleX: 1, y: -1).translatedBy(x: 0, y: CGFloat(texture.height)))\n\n\nCIImage -> MTLTexture\nMetal\u3092\u5229\u7528\u3057\u3066\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306eCIContext\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3002\ncontext = CIContext(mtlDevice: device)\n\nCIImage\u306e\u5185\u5bb9\u3092MTLTexture\u306b\u63cf\u753b\u3059\u308b\u3002\nlet colorSpace = CGColorSpaceCreateDeviceRGB()\ncontext.render(inputImage, to: toTexture, commandBuffer: commandBuffer, bounds: inputImage.extent, colorSpace: colorSpace)\n\n\nCIImage \u3092 MTKView \u306b\u63cf\u753b\u3059\u308b\n\u4e0a\u8a18\u306e\u5fdc\u7528\u4f8b\u3002MTKView\u306ecurrentDrawable\u306etexture\u306bCIImage\u3092\u66f8\u304d\u8fbc\u307f\u3001present\u3059\u308b\u3002\nlet commandBuffer = commandQueue.makeCommandBuffer()\n\nlet colorSpace = CGColorSpaceCreateDeviceRGB()\ncontext.render(outputImage, to: drawable.texture, commandBuffer: commandBuffer, bounds: outputImage.extent, colorSpace: colorSpace)\n\ncommandBuffer.present(drawable)\ncommandBuffer.commit()\ncommandBuffer.waitUntilCompleted()\n\n\nCore Image\u3068Metal\u3092\u4f75\u7528\u3059\u308b\nMTLTexture -> CIImage -> (CIFilter\u3067\u753b\u50cf\u51e6\u7406) -> MTLTexture -> MTKView\u306b\u63cf\u753b\n\u3068\u3044\u3046\u6d41\u308c\u3002Core Image\u306fMetal\u3068\u30b7\u30fc\u30e0\u30ec\u30b9\u306b\u7d71\u5408\u3067\u304d\u308b\u3088\u3046\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001CPU\u3068GPU\u3092\u884c\u3063\u305f\u308a\u6765\u305f\u308a\u3059\u308b\u3088\u3046\u306a\u30e0\u30c0\u306f\u306a\u3044\u3002\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u7167\uff1a Metal\u306e\u6069\u6075\u306f\u53d7\u3051\u3064\u3064Core Image\u3067\u300c\u624b\u8efd\u306b\u300d\u753b\u50cf\u51e6\u7406 - Qiita\n\n\uff08Core Image\u306eCIPixellate\u30d5\u30a3\u30eb\u30bf\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u3048\u3064\u306460fps\u3067MTKView\u306b\u63cf\u753b\uff09\n\nMetal\u30b7\u30a7\u30fc\u30c0\u3067SceneKit\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u63cf\u753b\u3059\u308b\nSCNProgram\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3002\nlet program = SCNProgram()\nprogram.fragmentFunctionName = \"myVertex\"\nprogram.vertexFunctionName = \"myFragment\"\nmaterial.program = program\n\n\u8a73\u7d30\u306f\u4e0b\u8a18\u8a18\u4e8b\u3092\u53c2\u7167\uff1a\n\nMetal\u30b7\u30a7\u30fc\u30c0\u3067SceneKit\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u63cf\u753b\u3059\u308b - Qiita\n\n\n\uff08http://glslsandbox.com/e#36858.0 \u306eGLSL\u3092MSL\u306b\u79fb\u884c\u3057\u3064\u3064SceneKit\u306b\u63cf\u753b\uff09\n\n\uff08http://glslsandbox.com/e#37017.0 \u306eGLSL\u3092MSL\u306b\u79fb\u884c\u3057\u3064\u3064SceneKit\u306b\u63cf\u753b\uff09\n\u968f\u6642\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n##MTLTexture \u3092\u30b3\u30d4\u30fc\u3059\u308b\n\n\u305f\u3068\u3048\u3070`MTKView`\u3067\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u304d\u305f\u30c6\u30af\u30b9\u30c1\u30e3\uff08`MTLTexture`\uff09\u3092\u63cf\u753b\u3057\u305f\u3044\u3068\u304d\u306b\u3001\n\n```swift\ncurrentDrawable.texture = aTexture\n```\n\n\u307f\u305f\u3044\u306a\u3053\u3068\u306f**\u3067\u304d\u306a\u3044**\u3002\n\n[\u3053\u306e\u8a18\u4e8b](http://qiita.com/shu223/items/3301a1e64757c0bd73ef)\u3067\u3084\u3063\u305f\u307f\u305f\u3044\u306b\u3001**\u30d1\u30b9\u30b9\u30eb\u30fc\u30b7\u30a7\u30fc\u30c0\u3092\u66f8\u3044\u3066\u66f8\u304d\u8fbc\u3080\u65b9\u6cd5**\u3082\u3042\u308b\u304c\u3001\u3082\u3063\u3068\u624b\u8efd\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001 `MTLBlitCommandEncoder` \u306e\u30b3\u30d4\u30fc\u6a5f\u80fd\u3092\u4f7f\u3046\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\n```swift\nlet commandBuffer = commandQueue.makeCommandBuffer()\n\nlet blitEncoder = commandBuffer.makeBlitCommandEncoder()\nblitEncoder.copy(from: fromTexture,\n                 sourceSlice: 0,\n                 sourceLevel: 0,\n                 sourceOrigin: MTLOrigin(x: 0, y: 0, z: 0),\n                 sourceSize: MTLSizeMake(fromTexture.width, fromTexture.height, fromTexture.depth),\n                 to: drawable.texture,\n                 destinationSlice: 0,\n                 destinationLevel: 0,\n                 destinationOrigin: MTLOrigin(x: 0, y: 0, z: 0))\nblitEncoder.endEncoding()\n\ncommandBuffer.present(drawable)\ncommandBuffer.commit()\ncommandBuffer.waitUntilCompleted()\n```\n\n- \u53c2\u8003\uff1a [Display Images with MTKView](http://metalcvexamples.com/metal-cv-basics/2015/12/13/display-images-with-mtkview.html)\n\n\n##MTLTexture\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\n\nMetal Performance Shaders\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e`MPSImageLanczosScale`\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3002\n\n\u4e0b\u8a18\u8a18\u4e8b\u3092\u53c2\u7167\uff1a\n- [Metal\u3067\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b - Qiita](http://qiita.com/shu223/items/19ac718dcd561a891689)\n\n\n##MTLTexture\u3092\u65b0\u898f\u751f\u6210\u3059\u308b\n\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089`MTKTextureLoader`\u3067\u8aad\u307f\u8fbc\u3093\u3067\u304f\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u65b0\u898f\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001`MTLTextureDescriptor`\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n```swift\nlet textureDescriptor = MTLTextureDescriptor.texture2DDescriptor(pixelFormat: pixelFormat, width: width, height: height, mipmapped: true)\nlet texture = device.makeTexture(descriptor: textureDescriptor)\n```\n\n\n##UIImage \u3092 MTLTexture \u306b\u5909\u63db\u3059\u308b\n\n`image` \u3068\u3044\u3046UIImage\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308b\u3068\u3057\u3066\u3001MTKTextureLoader\u3092\u7528\u3044\u3066\u6b21\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u3002\n\n```swift\nguard let cgImage = image?.cgImage else {return}    \ndo {\n    try texture = textureLoader.newTexture(with: cgImage, options: nil)\n} catch {\n    fatalError(\"Could not load the texture. error: \\(error).\")\n}\n```\n\n##\u30a2\u30bb\u30c3\u30c8\u304b\u3089MTLTexture\u3092\u751f\u6210\u3059\u308b\n\n\u30a2\u30bb\u30c3\u30c8\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u3059\u3050\u63cf\u753b\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u3044\u3063\u305f\u3093UIImage\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3064\u304f\u308b\u306e\u306fCPU\u306e\u30e0\u30c0\u3002`MTKTextureLoader` \u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306basset name\u3092\u76f4\u63a5\u6e21\u3057\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n```swift\nfunc newTexture(withName name: String, scaleFactor: CGFloat, bundle: Bundle?, options: [String : NSObject]? = nil) throws -> MTLTexture\n```\n\n##iOS\u30c7\u30d0\u30a4\u30b9\u304cMetal Performance Shaders\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\n\n[\u3053\u306e\u8a18\u4e8b](http://qiita.com/shu223/items/8027201e50c68288f0be)\u306e\u300eMetal Feature Sets\u300f\u306e\u9805\u306b\u66f8\u3044\u305f\u3068\u304a\u308a\u3001\u5f53\u8a72iOS\u30c7\u30d0\u30a4\u30b9\u304c\u3001**Metal\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u3066\u3082MPS\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044**\u3053\u3068\u3082\u3042\u308a\u3048\u307e\u3059\u3002\uff08\u4f8b\uff1aiPhone 5s\uff09\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002\n\n```swift\nguard MPSSupportsMTLDevice(device) else {\n    print(\"Metal Performance Shaders not Supported on current Device\")\n    return\n}\n```\n\n##MTLTexture\u306b\u30d6\u30e9\u30fc\u3092\u304b\u3051\u308b\n\nMetal Performance Shaders\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e`MPSImageGaussianBlur`\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3002\n\n**\u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3\uff0f\u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u305d\u308c\u305e\u308c\u6307\u5b9a**\u3059\u308b\u65b9\u6cd5\u3068\u3001**\u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3\u305d\u306e\u3082\u306e\u306b\u51fa\u529b\uff08in place\uff09**\u3059\u308b\u65b9\u6cd5\u3068\u304c\u3042\u308b\u3002\n\n\u305f\u3068\u3048\u3070`MTKView`\u306e`currentDrawable.texture`\u306b\u65e2\u306b\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u308b\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u305f\u3044\u5834\u5408\u3001in place\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u51e6\u7406\u3067\u304d\u308b\u3002\n\n```swift\nguard let drawable = currentDrawable else {\n    return\n}\nlet blur = MPSImageGaussianBlur(device: device, sigma: blurRadius)\nlet commandBuffer = commandQueue.makeCommandBuffer()\nvar drawableTexture = drawable.texture\n_ = withUnsafeMutablePointer(to: &drawableTexture) { (texturePtr: UnsafeMutablePointer<MTLTexture>) in\n    blur.encode(commandBuffer: commandBuffer, inPlaceTexture: texturePtr, fallbackCopyAllocator: nil)\n}\ncommandBuffer.commit()\ncommandBuffer.waitUntilCompleted()\n```\n\n\u5165\u529b\uff0f\u51fa\u529b\u3092\u305d\u308c\u305e\u308c\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3002\n\n```swift\nlet blur = MPSImageGaussianBlur(device: device, sigma: blurSigma)\nlet commandBuffer = commandQueue.makeCommandBuffer()\nblur.encode(commandBuffer: commandBuffer, sourceTexture: sourceTexture, destinationTexture: destinationTexture)\ncommandBuffer.commit()\ncommandBuffer.waitUntilCompleted()\n```\n\n![blur.gif](https://qiita-image-store.s3.amazonaws.com/0/3180/b8e703bd-fa27-9e65-d9e1-6e62b016b79c.gif)\n\n\uff08\u30b7\u30b0\u30de0\u301c100\u301c0\u3092**60 fps**\u3067\u5909\u5316\u3055\u305b\u3066\u307f\u305f\u69d8\u5b50\u3002AnimatedGIF\u3068\u3044\u3046\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u90fd\u5408\u4e0a\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u6c5a\u3044\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f\u3059\u3054\u304f\u7dba\u9e97\u3067\u3059\u3002\uff09\n\n\n##CMSampleBuffer -> CVImageBuffer (CVPixelBuffer) -> MTLTexture\n\nAVFoudation\u3092\u7528\u3044\u3066\u5f97\u3089\u308c\u308b\u30ab\u30e1\u30e9\u5165\u529b\u3092Metal\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u51e6\u7406\u3059\u308b\u969b\u306b\u3053\u306e\u5909\u63db\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\uff1a\n\n- [Metal\u3067\u30ab\u30e1\u30e9\u304b\u3089\u306e\u52d5\u753b\u5165\u529b\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u51e6\u7406\u3059\u308b - Qiita](http://qiita.com/shu223/items/2e493645e2d9a1e35a0d)\n\n\n##MTLTexture\u306e\u8ee2\u7f6e\uff08\u884c\u3068\u5217\u306e\u5165\u308c\u66ff\u3048\uff09\n\nLandscape\u3067\u5165\u3063\u3066\u304d\u305f\u30ab\u30e1\u30e9\u5165\u529b\u3092Portrait\u306b\u3057\u305f\u3044\u5834\u5408\u3068\u304b\u306b\u3002`MPSImageTranspose`\u3092\u4f7f\u3046\u3002\u5f15\u6570\u7b49\u306f\u4e00\u5207\u306a\u3057\u3002\n\n```objc:obj\nMPSImageTranspose *transpose =[[MPSImageTranspose alloc] initWithDevice:commandQueue.device];\n[transpose encodeToCommandBuffer:commandBuffer\n                   sourceTexture:scrTexture\n              destinationTexture:dstTexture];\n```\n\n\n##MTLTexture -> CIImage\n\nCIImage\u306b\u306fMTLTexture\u3092\u5f15\u6570\u306b\u6e21\u305b\u308b\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u304c\u3001\n\n```swift\nlet inputImage = CIImage(mtlTexture: texture, options: nil)\n```\n\n\u3053\u308c\u3060\u3051\u3060\u3068**\u4e0a\u4e0b\u53cd\u8ee2**\u3057\u305f\u753b\u50cf\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306by\u65b9\u5411\u306b\u30d5\u30ea\u30c3\u30d7\u3055\u305b\u308b\u3002\n\n```swift\nlet inputImage = CIImage(mtlTexture: texture, options: nil)?.applying(CGAffineTransform(scaleX: 1, y: -1).translatedBy(x: 0, y: CGFloat(texture.height)))\n```\n\n##CIImage -> MTLTexture\n\nMetal\u3092\u5229\u7528\u3057\u3066\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306eCIContext\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3002\n\n```swift\ncontext = CIContext(mtlDevice: device)\n```\n\n`CIImage`\u306e\u5185\u5bb9\u3092`MTLTexture`\u306b\u63cf\u753b\u3059\u308b\u3002\n\n```swift\nlet colorSpace = CGColorSpaceCreateDeviceRGB()\ncontext.render(inputImage, to: toTexture, commandBuffer: commandBuffer, bounds: inputImage.extent, colorSpace: colorSpace)\n```\n\n##CIImage \u3092 MTKView \u306b\u63cf\u753b\u3059\u308b\n\n\u4e0a\u8a18\u306e\u5fdc\u7528\u4f8b\u3002`MTKView`\u306e`currentDrawable`\u306e`texture`\u306b`CIImage`\u3092\u66f8\u304d\u8fbc\u307f\u3001`present`\u3059\u308b\u3002\n\n```swift\nlet commandBuffer = commandQueue.makeCommandBuffer()\n\nlet colorSpace = CGColorSpaceCreateDeviceRGB()\ncontext.render(outputImage, to: drawable.texture, commandBuffer: commandBuffer, bounds: outputImage.extent, colorSpace: colorSpace)\n\ncommandBuffer.present(drawable)\ncommandBuffer.commit()\ncommandBuffer.waitUntilCompleted()\n```\n\n##Core Image\u3068Metal\u3092\u4f75\u7528\u3059\u308b\n\nMTLTexture -> CIImage -> (CIFilter\u3067\u753b\u50cf\u51e6\u7406) -> MTLTexture -> MTKView\u306b\u63cf\u753b\n\n\u3068\u3044\u3046\u6d41\u308c\u3002Core Image\u306fMetal\u3068\u30b7\u30fc\u30e0\u30ec\u30b9\u306b\u7d71\u5408\u3067\u304d\u308b\u3088\u3046\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001CPU\u3068GPU\u3092\u884c\u3063\u305f\u308a\u6765\u305f\u308a\u3059\u308b\u3088\u3046\u306a\u30e0\u30c0\u306f\u306a\u3044\u3002\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u7167\uff1a [Metal\u306e\u6069\u6075\u306f\u53d7\u3051\u3064\u3064Core Image\u3067\u300c\u624b\u8efd\u306b\u300d\u753b\u50cf\u51e6\u7406 - Qiita](http://qiita.com/shu223/items/4c0f8073477f787e1627)\n\n![coreimage.gif](https://qiita-image-store.s3.amazonaws.com/0/3180/f5da7f90-a2ff-5bd6-a784-9b8004bfee9f.gif)\n\n\uff08Core Image\u306e`CIPixellate`\u30d5\u30a3\u30eb\u30bf\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u3048\u3064\u3064**60fps**\u3067MTKView\u306b\u63cf\u753b\uff09\n\n\n##Metal\u30b7\u30a7\u30fc\u30c0\u3067SceneKit\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u63cf\u753b\u3059\u308b\n\nSCNProgram\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3002\n\n```swift\nlet program = SCNProgram()\nprogram.fragmentFunctionName = \"myVertex\"\nprogram.vertexFunctionName = \"myFragment\"\nmaterial.program = program\n```\n\n\n\u8a73\u7d30\u306f\u4e0b\u8a18\u8a18\u4e8b\u3092\u53c2\u7167\uff1a\n\n- [Metal\u30b7\u30a7\u30fc\u30c0\u3067SceneKit\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u63cf\u753b\u3059\u308b - Qiita](http://qiita.com/shu223/items/b5729fdf1d95721d07b7)\n\n![color.gif](https://qiita-image-store.s3.amazonaws.com/0/3180/4aead202-00e0-20e7-ffad-3208c31ab041.gif)\n\n\uff08http://glslsandbox.com/e#36858.0 \u306eGLSL\u3092MSL\u306b\u79fb\u884c\u3057\u3064\u3064SceneKit\u306b\u63cf\u753b\uff09\n\n![voronoi.gif](https://qiita-image-store.s3.amazonaws.com/0/3180/d16268ae-628e-9e32-7183-39e75912d68f.gif)\n\n\uff08http://glslsandbox.com/e#37017.0 \u306eGLSL\u3092MSL\u306b\u79fb\u884c\u3057\u3064\u3064SceneKit\u306b\u63cf\u753b\uff09\n\n", "tags": ["Metal", "Swift", "iOS", "GPU", "\u753b\u50cf\u51e6\u7406"]}