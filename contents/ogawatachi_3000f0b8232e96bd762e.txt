{"tags": ["Android", "android\u958b\u767a"], "context": " More than 1 year has passed since last update.\n\nAndroid\u3067\u753b\u50cf\u5468\u308a\u306e\u51e6\u7406\u3063\u3066\u5927\u5909\u3067\u3059\u3088\u306d\u3002\n\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u308a\u3001Bitmap\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3057\u305f\u308a\u3001\u30d0\u30a4\u30c8\u914d\u5217\u3092Bitmap\u306b\u5909\u63db\u3057\u305f\u308a\u3002\n\u305d\u3093\u306a\u9762\u5012\u306a\u51e6\u7406\u3092\u7c21\u5358\u306b\u4f7f\u3048\u308bUtil\u30af\u30e9\u30b9\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u3053\u3053\u306f\u3082\u3063\u3068\u3053\u3046\u3057\u305f\u65b9\u304c\u3044\u3044\u3088\uff01\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044m(__)m\n\nBitmapUtils.java\n\npackage utils;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.InputStream;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Bitmap.CompressFormat;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Color;\nimport android.graphics.Matrix;\n\n/**\n * \u753b\u50cf\u5909\u63db\u30af\u30e9\u30b9\n * \n */\npublic class BitmapUtils {\n\n    /**\n     * \u30d5\u30a1\u30a4\u30eb\u304b\u3089Bitpmap\u751f\u6210 \u8868\u793a\u30b5\u30a4\u30ba\u5408\u308f\u305b\u3066\u753b\u50cf\u751f\u6210\u6642\u306b\u53ef\u80fd\u306a\u304b\u304e\u308a\u7e2e\u5c0f\u3057\u3066\u751f\u6210\u3057\u307e\u3059\u3002\n     * \n     * @param path\n     *            \u30d1\u30b9\n     * @param width\n     *            \u8868\u793a\u5e45\n     * @param height\n     *            \u8868\u793a\u9ad8\u3055\n     * @return \u751f\u6210Bitmap\n     */\n    public static Bitmap createBitmap(String path, int width, int height) {\n\n        BitmapFactory.Options option = new BitmapFactory.Options();\n\n        // \u60c5\u5831\u306e\u307f\u8aad\u307f\u8fbc\u3080\n        option.inJustDecodeBounds = true;\n        BitmapFactory.decodeFile(path, option);\n\n        if (option.outWidth < width || option.outHeight < height) {\n            // \u7e26\u3001\u6a2a\u306e\u3069\u3061\u3089\u304b\u304c\u6307\u5b9a\u5024\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306f\u666e\u901a\u306bBitmap\u751f\u6210\n            return BitmapFactory.decodeFile(path);\n        }\n\n        float scaleWidth = ((float) width) / option.outWidth;\n        float scaleHeight = ((float) height) / option.outHeight;\n\n        int newSize = 0;\n        int oldSize = 0;\n        if (scaleWidth > scaleHeight) {\n            newSize = width;\n            oldSize = option.outWidth;\n        } else {\n            newSize = height;\n            oldSize = option.outHeight;\n        }\n\n        // option.inSampleSize\u306b\u8a2d\u5b9a\u3059\u308b\u5024\u3092\u6c42\u3081\u308b\n        // option.inSampleSize\u306f2\u306e\u4e57\u6570\u306e\u307f\u8a2d\u5b9a\u53ef\u80fd\n        int sampleSize = 1;\n        int tmpSize = oldSize;\n        while (tmpSize > newSize) {\n            sampleSize = sampleSize * 2;\n            tmpSize = oldSize / sampleSize;\n        }\n        if (sampleSize != 1) {\n            sampleSize = sampleSize / 2;\n        }\n\n        option.inJustDecodeBounds = false;\n        option.inSampleSize = sampleSize;\n\n        return BitmapFactory.decodeFile(path, option);\n    }\n\n    /**\n     * \u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089Bitmap\u751f\u6210 \u8868\u793a\u30b5\u30a4\u30ba\u5408\u308f\u305b\u3066\u753b\u50cf\u751f\u6210\u6642\u306b\u53ef\u80fd\u306a\u304b\u304e\u308a\u7e2e\u5c0f\u3057\u3066\u751f\u6210\u3057\u307e\u3059\u3002\n     * \n     * @param bytes\n     *            \u30d0\u30a4\u30c8\u914d\u5217\u306e\u753b\u50cf\n     * @param width\n     *            \u8868\u793a\u5e45\n     * @param height\n     *            \u8868\u793a\u9ad8\u3055\n     * @return \u751f\u6210Bitmap\n     */\n    public static Bitmap createBitmap(byte[] bytes, int width, int height) {\n\n        BitmapFactory.Options option = new BitmapFactory.Options();\n\n        // \u60c5\u5831\u306e\u307f\u8aad\u307f\u8fbc\u3080\n        option.inJustDecodeBounds = true;\n        BitmapFactory.decodeByteArray(bytes, 0, bytes.length, option);\n\n        if (option.outWidth < width || option.outHeight < height) {\n            // \u7e26\u3001\u6a2a\u306e\u3069\u3061\u3089\u304b\u304c\u6307\u5b9a\u5024\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306f\u666e\u901a\u306bBitmap\u751f\u6210\n            return BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n        }\n\n        float scaleWidth = ((float) width) / option.outWidth;\n        float scaleHeight = ((float) height) / option.outHeight;\n\n        int newSize = 0;\n        int oldSize = 0;\n        if (scaleWidth > scaleHeight) {\n            newSize = width;\n            oldSize = option.outWidth;\n        } else {\n            newSize = height;\n            oldSize = option.outHeight;\n        }\n\n        // option.inSampleSize\u306b\u8a2d\u5b9a\u3059\u308b\u5024\u3092\u6c42\u3081\u308b\n        // option.inSampleSize\u306f2\u306e\u4e57\u6570\u306e\u307f\u8a2d\u5b9a\u53ef\u80fd\n        int sampleSize = 1;\n        int tmpSize = oldSize;\n        while (tmpSize > newSize) {\n            sampleSize = sampleSize * 2;\n            tmpSize = oldSize / sampleSize;\n        }\n        if (sampleSize != 1) {\n            sampleSize = sampleSize / 2;\n        }\n\n        option.inJustDecodeBounds = false;\n        option.inSampleSize = sampleSize;\n\n        return BitmapFactory.decodeByteArray(bytes, 0, bytes.length, option);\n    }\n\n    /**\n     * \u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089Bitpmap\u751f\u6210 \u8868\u793a\u30b5\u30a4\u30ba\u5408\u308f\u305b\u3066\u62e1\u5927\u7e2e\u5c0f\u3057\u307e\u3059\u3002\n     * \n     * @param bytes\n     *            \u30d0\u30a4\u30c8\u914d\u5217\u306e\u753b\u50cf\n     * @param width\n     *            \u8868\u793a\u5e45\n     * @param height\n     *            \u8868\u793a\u9ad8\u3055\n     * @return \u751f\u6210Bitmap\n     */\n    public static Bitmap createScaleBitmap(byte[] bytes, int width, int height) {\n\n        Bitmap bm = byte2bmp(bytes);\n        Matrix matrix = new Matrix();\n\n        float xScale = (float) width / bm.getWidth() * 0.8f;\n        float yScale = (float) height / bm.getHeight() * 0.8f;\n\n        matrix.postScale(xScale, yScale);\n\n        return Bitmap.createBitmap(bm, 0, 0, bm.getWidth(), bm.getHeight(), matrix, true);\n\n    }\n\n    /**\n     * \u30d5\u30a1\u30a4\u30eb\u304b\u3089Bitpmap\u751f\u6210 \u8868\u793a\u30b5\u30a4\u30ba\u5408\u308f\u305b\u3066\u62e1\u5927\u7e2e\u5c0f\u3057\u307e\u3059\u3002\n     * \n     * @param path\n     *            \u30d1\u30b9\n     * @param width\n     *            \u8868\u793a\u5e45\n     * @param height\n     *            \u8868\u793a\u9ad8\u3055\n     * @return \u751f\u6210Bitmap\n     */\n    public static Bitmap createScaleBitmap(String path, int width, int height) {\n\n        InputStream is;\n        Bitmap bm = null;\n        Matrix matrix = new Matrix();\n        try {\n            is = new FileInputStream(path);\n            bm = BitmapFactory.decodeStream(is);\n            float xScale = (float) width / bm.getWidth();\n            float yScale = (float) height / bm.getHeight();\n\n            matrix.postScale(xScale, yScale);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            return null;\n        }\n\n        return Bitmap.createBitmap(bm, 0, 0, bm.getWidth(), bm.getHeight(), matrix, true);\n\n    }\n\n    /**\n     * \u753b\u50cf\u30ea\u30b5\u30a4\u30ba\n     * \n     * @param bitmap\n     *            \u5909\u63db\u5bfe\u8c61\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\n     * @param newWidth\n     *            \u5909\u63db\u30b5\u30a4\u30ba\u6a2a\n     * @param newHeight\n     *            \u5909\u63db\u30b5\u30a4\u30ba\u7e26\n     * @return \u5909\u63db\u5f8cBitmap\n     */\n    public static Bitmap resize(Bitmap bitmap, int newWidth, int newHeight) {\n\n        if (bitmap == null) {\n            return null;\n        }\n\n        int oldWidth = bitmap.getWidth();\n        int oldHeight = bitmap.getHeight();\n\n        if (oldWidth < newWidth && oldHeight < newHeight) {\n            // \u7e26\u3082\u6a2a\u3082\u6307\u5b9a\u30b5\u30a4\u30ba\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306f\u4f55\u3082\u3057\u306a\u3044\n            return bitmap;\n        }\n\n        float scaleWidth = ((float) newWidth) / oldWidth;\n        float scaleHeight = ((float) newHeight) / oldHeight;\n        float scaleFactor = Math.min(scaleWidth, scaleHeight);\n\n        Matrix scale = new Matrix();\n        scale.postScale(scaleFactor, scaleFactor);\n\n        Bitmap resizeBitmap = Bitmap.createBitmap(bitmap, 0, 0, oldWidth, oldHeight, scale, false);\n        bitmap.recycle();\n\n        return resizeBitmap;\n\n    }\n\n    /**\n     * \n     * bitmap\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n     * \n     * @param bitmap\n     *            \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\n     * @param format\n     *            \u5727\u7e2e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n     * @return\n     */\n    public static byte[] bmp2byteArray(Bitmap bitmap, CompressFormat format) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        bitmap.compress(format, 100, baos);\n        return baos.toByteArray();\n\n    }\n\n    /**\n     * bitmap\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n     * \n     * @param bitmap\n     *            \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\n     * @param format\n     *            \u5727\u7e2e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n     * @param compressVal\n     *            \u5727\u7e2e\u7387\n     * @return\n     */\n    public static byte[] bmp2byteArray(Bitmap bitmap, CompressFormat format, int compressVal) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        bitmap.compress(format, compressVal, baos);\n        return baos.toByteArray();\n\n    }\n\n    /**\n     * \u30d0\u30a4\u30c8\u914d\u5217\u3092bitmap\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n     * \n     * @param bytes\n     * @return\n     */\n    public static Bitmap byte2bmp(byte[] bytes) {\n        Bitmap bmp = null;\n        if (bytes != null) {\n            bmp = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n        }\n\n        return bmp;\n    }\n\n    /**\n     * \u30d0\u30a4\u30c8\u914d\u5217\u3092\u5727\u7e2e\u3057\u3066\u3001\u8fd4\u5374\u3057\u307e\u3059\u3002\n     * \n     * @param bytes\n     *            \u30d0\u30a4\u30c8\u914d\u5217\n     * @param format\n     *            \u5727\u7e2e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n     * @param compressVal\n     *            \u5727\u7e2e\u7387\n     * @return\n     */\n    public static byte[] compressBitmap(byte[] bytes, CompressFormat format, int compressVal) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BitmapUtils.byte2bmp(bytes).compress(format, compressVal, baos);\n        return baos.toByteArray();\n\n    }\n\n    /**\n     * \u753b\u50cf\u3092\u30e2\u30ce\u30af\u30ed\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n     * \n     * @param bmp\n     * @return\n     */\n    public static Bitmap monocrome(Bitmap bmp) {\n        // \u30e2\u30ce\u30af\u30ed\u306b\u3059\u308b\u51e6\u7406\n        Bitmap outBitMap = bmp.copy(Bitmap.Config.ARGB_8888, true);\n\n        int width = outBitMap.getWidth();\n        int height = outBitMap.getHeight();\n        int totalPixcel = width * height;\n\n        int i, j;\n        for (j = 0; j < height; j++) {\n            for (i = 0; i < width; i++) {\n                int pixelColor = outBitMap.getPixel(i, j);\n                int y = (int) (0.299 * Color.red(pixelColor) + 0.587 * Color.green(pixelColor) + 0.114 * Color\n                        .blue(pixelColor));\n                outBitMap.setPixel(i, j, Color.rgb(y, y, y));\n            }\n        }\n\n        return outBitMap;\n    }\n\n}\n\n\n\n# Android\u3067\u753b\u50cf\u5468\u308a\u306e\u51e6\u7406\u3063\u3066\u5927\u5909\u3067\u3059\u3088\u306d\u3002\n\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u308a\u3001Bitmap\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3057\u305f\u308a\u3001\u30d0\u30a4\u30c8\u914d\u5217\u3092Bitmap\u306b\u5909\u63db\u3057\u305f\u308a\u3002\n\u305d\u3093\u306a\u9762\u5012\u306a\u51e6\u7406\u3092\u7c21\u5358\u306b\u4f7f\u3048\u308bUtil\u30af\u30e9\u30b9\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u3053\u3053\u306f\u3082\u3063\u3068\u3053\u3046\u3057\u305f\u65b9\u304c\u3044\u3044\u3088\uff01\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044m(__)m\n\n```java:BitmapUtils.java\n\npackage utils;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.InputStream;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Bitmap.CompressFormat;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Color;\nimport android.graphics.Matrix;\n\n/**\n * \u753b\u50cf\u5909\u63db\u30af\u30e9\u30b9\n * \n */\npublic class BitmapUtils {\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u304b\u3089Bitpmap\u751f\u6210 \u8868\u793a\u30b5\u30a4\u30ba\u5408\u308f\u305b\u3066\u753b\u50cf\u751f\u6210\u6642\u306b\u53ef\u80fd\u306a\u304b\u304e\u308a\u7e2e\u5c0f\u3057\u3066\u751f\u6210\u3057\u307e\u3059\u3002\n\t * \n\t * @param path\n\t *            \u30d1\u30b9\n\t * @param width\n\t *            \u8868\u793a\u5e45\n\t * @param height\n\t *            \u8868\u793a\u9ad8\u3055\n\t * @return \u751f\u6210Bitmap\n\t */\n\tpublic static Bitmap createBitmap(String path, int width, int height) {\n\n\t\tBitmapFactory.Options option = new BitmapFactory.Options();\n\n\t\t// \u60c5\u5831\u306e\u307f\u8aad\u307f\u8fbc\u3080\n\t\toption.inJustDecodeBounds = true;\n\t\tBitmapFactory.decodeFile(path, option);\n\n\t\tif (option.outWidth < width || option.outHeight < height) {\n\t\t\t// \u7e26\u3001\u6a2a\u306e\u3069\u3061\u3089\u304b\u304c\u6307\u5b9a\u5024\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306f\u666e\u901a\u306bBitmap\u751f\u6210\n\t\t\treturn BitmapFactory.decodeFile(path);\n\t\t}\n\n\t\tfloat scaleWidth = ((float) width) / option.outWidth;\n\t\tfloat scaleHeight = ((float) height) / option.outHeight;\n\n\t\tint newSize = 0;\n\t\tint oldSize = 0;\n\t\tif (scaleWidth > scaleHeight) {\n\t\t\tnewSize = width;\n\t\t\toldSize = option.outWidth;\n\t\t} else {\n\t\t\tnewSize = height;\n\t\t\toldSize = option.outHeight;\n\t\t}\n\n\t\t// option.inSampleSize\u306b\u8a2d\u5b9a\u3059\u308b\u5024\u3092\u6c42\u3081\u308b\n\t\t// option.inSampleSize\u306f2\u306e\u4e57\u6570\u306e\u307f\u8a2d\u5b9a\u53ef\u80fd\n\t\tint sampleSize = 1;\n\t\tint tmpSize = oldSize;\n\t\twhile (tmpSize > newSize) {\n\t\t\tsampleSize = sampleSize * 2;\n\t\t\ttmpSize = oldSize / sampleSize;\n\t\t}\n\t\tif (sampleSize != 1) {\n\t\t\tsampleSize = sampleSize / 2;\n\t\t}\n\n\t\toption.inJustDecodeBounds = false;\n\t\toption.inSampleSize = sampleSize;\n\n\t\treturn BitmapFactory.decodeFile(path, option);\n\t}\n\n\t/**\n\t * \u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089Bitmap\u751f\u6210 \u8868\u793a\u30b5\u30a4\u30ba\u5408\u308f\u305b\u3066\u753b\u50cf\u751f\u6210\u6642\u306b\u53ef\u80fd\u306a\u304b\u304e\u308a\u7e2e\u5c0f\u3057\u3066\u751f\u6210\u3057\u307e\u3059\u3002\n\t * \n\t * @param bytes\n\t *            \u30d0\u30a4\u30c8\u914d\u5217\u306e\u753b\u50cf\n\t * @param width\n\t *            \u8868\u793a\u5e45\n\t * @param height\n\t *            \u8868\u793a\u9ad8\u3055\n\t * @return \u751f\u6210Bitmap\n\t */\n\tpublic static Bitmap createBitmap(byte[] bytes, int width, int height) {\n\n\t\tBitmapFactory.Options option = new BitmapFactory.Options();\n\n\t\t// \u60c5\u5831\u306e\u307f\u8aad\u307f\u8fbc\u3080\n\t\toption.inJustDecodeBounds = true;\n\t\tBitmapFactory.decodeByteArray(bytes, 0, bytes.length, option);\n\n\t\tif (option.outWidth < width || option.outHeight < height) {\n\t\t\t// \u7e26\u3001\u6a2a\u306e\u3069\u3061\u3089\u304b\u304c\u6307\u5b9a\u5024\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306f\u666e\u901a\u306bBitmap\u751f\u6210\n\t\t\treturn BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n\t\t}\n\n\t\tfloat scaleWidth = ((float) width) / option.outWidth;\n\t\tfloat scaleHeight = ((float) height) / option.outHeight;\n\n\t\tint newSize = 0;\n\t\tint oldSize = 0;\n\t\tif (scaleWidth > scaleHeight) {\n\t\t\tnewSize = width;\n\t\t\toldSize = option.outWidth;\n\t\t} else {\n\t\t\tnewSize = height;\n\t\t\toldSize = option.outHeight;\n\t\t}\n\n\t\t// option.inSampleSize\u306b\u8a2d\u5b9a\u3059\u308b\u5024\u3092\u6c42\u3081\u308b\n\t\t// option.inSampleSize\u306f2\u306e\u4e57\u6570\u306e\u307f\u8a2d\u5b9a\u53ef\u80fd\n\t\tint sampleSize = 1;\n\t\tint tmpSize = oldSize;\n\t\twhile (tmpSize > newSize) {\n\t\t\tsampleSize = sampleSize * 2;\n\t\t\ttmpSize = oldSize / sampleSize;\n\t\t}\n\t\tif (sampleSize != 1) {\n\t\t\tsampleSize = sampleSize / 2;\n\t\t}\n\n\t\toption.inJustDecodeBounds = false;\n\t\toption.inSampleSize = sampleSize;\n\n\t\treturn BitmapFactory.decodeByteArray(bytes, 0, bytes.length, option);\n\t}\n\n\t/**\n\t * \u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089Bitpmap\u751f\u6210 \u8868\u793a\u30b5\u30a4\u30ba\u5408\u308f\u305b\u3066\u62e1\u5927\u7e2e\u5c0f\u3057\u307e\u3059\u3002\n\t * \n\t * @param bytes\n\t *            \u30d0\u30a4\u30c8\u914d\u5217\u306e\u753b\u50cf\n\t * @param width\n\t *            \u8868\u793a\u5e45\n\t * @param height\n\t *            \u8868\u793a\u9ad8\u3055\n\t * @return \u751f\u6210Bitmap\n\t */\n\tpublic static Bitmap createScaleBitmap(byte[] bytes, int width, int height) {\n\n\t\tBitmap bm = byte2bmp(bytes);\n\t\tMatrix matrix = new Matrix();\n\n\t\tfloat xScale = (float) width / bm.getWidth() * 0.8f;\n\t\tfloat yScale = (float) height / bm.getHeight() * 0.8f;\n\n\t\tmatrix.postScale(xScale, yScale);\n\n\t\treturn Bitmap.createBitmap(bm, 0, 0, bm.getWidth(), bm.getHeight(), matrix, true);\n\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u304b\u3089Bitpmap\u751f\u6210 \u8868\u793a\u30b5\u30a4\u30ba\u5408\u308f\u305b\u3066\u62e1\u5927\u7e2e\u5c0f\u3057\u307e\u3059\u3002\n\t * \n\t * @param path\n\t *            \u30d1\u30b9\n\t * @param width\n\t *            \u8868\u793a\u5e45\n\t * @param height\n\t *            \u8868\u793a\u9ad8\u3055\n\t * @return \u751f\u6210Bitmap\n\t */\n\tpublic static Bitmap createScaleBitmap(String path, int width, int height) {\n\n\t\tInputStream is;\n\t\tBitmap bm = null;\n\t\tMatrix matrix = new Matrix();\n\t\ttry {\n\t\t\tis = new FileInputStream(path);\n\t\t\tbm = BitmapFactory.decodeStream(is);\n\t\t\tfloat xScale = (float) width / bm.getWidth();\n\t\t\tfloat yScale = (float) height / bm.getHeight();\n\n\t\t\tmatrix.postScale(xScale, yScale);\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\n\t\treturn Bitmap.createBitmap(bm, 0, 0, bm.getWidth(), bm.getHeight(), matrix, true);\n\n\t}\n\n\t/**\n\t * \u753b\u50cf\u30ea\u30b5\u30a4\u30ba\n\t * \n\t * @param bitmap\n\t *            \u5909\u63db\u5bfe\u8c61\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\n\t * @param newWidth\n\t *            \u5909\u63db\u30b5\u30a4\u30ba\u6a2a\n\t * @param newHeight\n\t *            \u5909\u63db\u30b5\u30a4\u30ba\u7e26\n\t * @return \u5909\u63db\u5f8cBitmap\n\t */\n\tpublic static Bitmap resize(Bitmap bitmap, int newWidth, int newHeight) {\n\n\t\tif (bitmap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint oldWidth = bitmap.getWidth();\n\t\tint oldHeight = bitmap.getHeight();\n\n\t\tif (oldWidth < newWidth && oldHeight < newHeight) {\n\t\t\t// \u7e26\u3082\u6a2a\u3082\u6307\u5b9a\u30b5\u30a4\u30ba\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306f\u4f55\u3082\u3057\u306a\u3044\n\t\t\treturn bitmap;\n\t\t}\n\n\t\tfloat scaleWidth = ((float) newWidth) / oldWidth;\n\t\tfloat scaleHeight = ((float) newHeight) / oldHeight;\n\t\tfloat scaleFactor = Math.min(scaleWidth, scaleHeight);\n\n\t\tMatrix scale = new Matrix();\n\t\tscale.postScale(scaleFactor, scaleFactor);\n\n\t\tBitmap resizeBitmap = Bitmap.createBitmap(bitmap, 0, 0, oldWidth, oldHeight, scale, false);\n\t\tbitmap.recycle();\n\n\t\treturn resizeBitmap;\n\n\t}\n\n\t/**\n\t * \n\t * bitmap\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\t * \n\t * @param bitmap\n\t *            \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\n\t * @param format\n\t *            \u5727\u7e2e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\t * @return\n\t */\n\tpublic static byte[] bmp2byteArray(Bitmap bitmap, CompressFormat format) {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tbitmap.compress(format, 100, baos);\n\t\treturn baos.toByteArray();\n\n\t}\n\n\t/**\n\t * bitmap\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\t * \n\t * @param bitmap\n\t *            \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\n\t * @param format\n\t *            \u5727\u7e2e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\t * @param compressVal\n\t *            \u5727\u7e2e\u7387\n\t * @return\n\t */\n\tpublic static byte[] bmp2byteArray(Bitmap bitmap, CompressFormat format, int compressVal) {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tbitmap.compress(format, compressVal, baos);\n\t\treturn baos.toByteArray();\n\n\t}\n\n\t/**\n\t * \u30d0\u30a4\u30c8\u914d\u5217\u3092bitmap\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\t * \n\t * @param bytes\n\t * @return\n\t */\n\tpublic static Bitmap byte2bmp(byte[] bytes) {\n\t\tBitmap bmp = null;\n\t\tif (bytes != null) {\n\t\t\tbmp = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n\t\t}\n\n\t\treturn bmp;\n\t}\n\n\t/**\n\t * \u30d0\u30a4\u30c8\u914d\u5217\u3092\u5727\u7e2e\u3057\u3066\u3001\u8fd4\u5374\u3057\u307e\u3059\u3002\n\t * \n\t * @param bytes\n\t *            \u30d0\u30a4\u30c8\u914d\u5217\n\t * @param format\n\t *            \u5727\u7e2e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\t * @param compressVal\n\t *            \u5727\u7e2e\u7387\n\t * @return\n\t */\n\tpublic static byte[] compressBitmap(byte[] bytes, CompressFormat format, int compressVal) {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tBitmapUtils.byte2bmp(bytes).compress(format, compressVal, baos);\n\t\treturn baos.toByteArray();\n\n\t}\n\n\t/**\n\t * \u753b\u50cf\u3092\u30e2\u30ce\u30af\u30ed\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\t * \n\t * @param bmp\n\t * @return\n\t */\n\tpublic static Bitmap monocrome(Bitmap bmp) {\n\t\t// \u30e2\u30ce\u30af\u30ed\u306b\u3059\u308b\u51e6\u7406\n\t\tBitmap outBitMap = bmp.copy(Bitmap.Config.ARGB_8888, true);\n\n\t\tint width = outBitMap.getWidth();\n\t\tint height = outBitMap.getHeight();\n\t\tint totalPixcel = width * height;\n\n\t\tint i, j;\n\t\tfor (j = 0; j < height; j++) {\n\t\t\tfor (i = 0; i < width; i++) {\n\t\t\t\tint pixelColor = outBitMap.getPixel(i, j);\n\t\t\t\tint y = (int) (0.299 * Color.red(pixelColor) + 0.587 * Color.green(pixelColor) + 0.114 * Color\n\t\t\t\t\t\t.blue(pixelColor));\n\t\t\t\toutBitMap.setPixel(i, j, Color.rgb(y, y, y));\n\t\t\t}\n\t\t}\n\n\t\treturn outBitMap;\n\t}\n\n}\n\n```\n"}