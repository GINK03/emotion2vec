{"context": "\u3053\u308c\u306f Swift Advent Calendar 2016 16\u65e5\u76ee\u306e\u6295\u7a3f\u3067\u3059\u3002\n\u6628\u65e515\u65e5\u76ee\u306f@_ha1f\u3055\u3093\u306ePhotos.framework\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u3080\u3067\u3057\u305f\u3002\n\nTL;DR\nMultipart\u983b\u767a\u3057\u305f\u308a\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u30e1\u30a4\u30f3\u306e\u30a2\u30d7\u30ea\u3067\u306f\u306a\u304f\u3001\u5358\u7d14\u306aGet, Post\u306e\u307f\u306a\u3089\u3001URLSession\u3067\u554f\u984c\u306a\u3044\n\n\u80cc\u666f\n\u4eca\u307e\u3067iOS\u3067\u306e\u901a\u4fe1\u51e6\u7406\u3068\u3044\u3048\u3070\u3001\u5f53\u305f\u308a\u524d\u306bAFNetworking\u304bAlamofire (\u305d\u306e\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u89e6\u3063\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u3059\u304c) \u3092\u4f7f\u3063\u3066\u304a\u308a\u3001\u304a\u6065\u305a\u304b\u3057\u306a\u304c\u3089\u3001\u6a19\u6e96API\u3067\u306e\u51e6\u7406\u3092\u66f8\u3044\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u300cSwift \u901a\u4fe1\u300d\u3067\u691c\u7d22\u3059\u308b\u30681\u756a\u76ee\u306bAlamofire\u3092\u4f7f\u3063\u305f\u8a18\u4e8b\u304c\u30d2\u30c3\u30c8\u3059\u308b\u3053\u3068\u304b\u3089\u3082\u3001\u81ea\u5206\u306e\u3088\u3046\u306a\u4eba\u306f\u610f\u5916\u3068\u591a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u307e\u305f\u3001mono0926\u3055\u3093\u306eiOS 10\u304c\u6b63\u5f0f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u4eca\u3001\u305d\u308d\u305d\u308d\u65e2\u5b58\u30a2\u30d7\u30ea\u306eiOS 8\u30b5\u30dd\u30fc\u30c8\u306f\u5207\u3063\u3066\u3082\u826f\u3044\u3060\u308d\u3046\u304b\u3068\u3044\u3046\u8003\u5bdf\u306eAlamofire 4.0\u304ciOS 9\u4ee5\u4e0a\u306e\u307f\u30b5\u30dd\u30fc\u30c8\u306b\u306a\u3063\u305f\u306e\u9805\u3084@yimajo\u3055\u3093\u306e\u4eca\u304b\u3089\u65b0\u898f\u3067iOS\u30a2\u30d7\u30ea\u3092\u66f8\u304d\u59cb\u3081\u308b\u306a\u3089\u30022016\u5e74\u51ac\u306eAlamofire\u306e\u9805\u3092\u8aad\u3093\u3067\u3001\u78ba\u304b\u306b\u300c\u3042\u3093\u306a\u306b\u5de8\u5927\u3067\u5168\u4f53\u3092\u628a\u63e1\u3057\u3065\u3089\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b89\u6613\u306b\u4f7f\u3063\u3066\u3044\u3066\u3044\u3044\u306e\u304b\uff1f\u300d\u3001\u300c\u305d\u3082\u305d\u3082\u6700\u521d\u304b\u3089\u30e9\u30a4\u30d6\u30e9\u30ea\u3042\u308a\u304d\u3067\u601d\u8003\u505c\u6b62\u3057\u3066\u308b\u306e\u3067\u306f\uff1f\u300d\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u4eca\u56de\u306f\u6a19\u6e96\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bAPI\u3067\u901a\u4fe1\u3092\u884c\u306a\u3063\u3066\u307f\u3066\u3001\u672c\u5f53\u306b\u901a\u4fe1\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u306a\u306e\u304b\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n@codelynx\u3055\u3093\u306eURLSessionDownloadTask \u3067\u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306a\u30c7\u30fc\u30bf\u3067\u3082\u5bdd\u3066\u3044\u308b\u9593\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u4e00\u90e8\u88ab\u3063\u3066\u3044\u308b\u611f\u3058\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002\nAPI\u306e\u30b5\u30f3\u30d7\u30eb\u306fhttps://httpbin.org\u3092\u304a\u501f\u308a\u3057\u307e\u3057\u305f\u3002\n\nPlayground\u3067\u901a\u4fe1\u3059\u308b\n\u4eca\u56de\u306f\u7c21\u5358\u306b\u691c\u8a3c\u3059\u308b\u305f\u3081\u306bPlayground\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\n\u521d\u3081\u3066\u77e5\u308a\u307e\u3057\u305f\u3002(\u53c2\u8003: http://dev.classmethod.jp/smartphone/iphone/swift-3-playground-urlsession/)\n\nGet\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionGetClient {\n\n    func get(url urlString: String, parameters: [String: Any]? = nil) {\n\n        let parametersString: String = {\n            guard let parameters = parameters else { return \"\" }\n            return parameters.enumerated().reduce(\"?\") { (input, tuple) -> String in\n                switch tuple.element.value {\n                case let int as Int: return input + tuple.element.key + \"=\" + String(int) + (parameters.count - 1 > tuple.offset ? \"&\" : \"\")\n                case let string as String: return input + tuple.element.key + \"=\" + string + (parameters.count - 1 > tuple.offset ? \"&\" : \"\")\n                default: return input\n                }\n            }\n        }()\n\n        let url = URL(string: urlString + parametersString)\n        let task = URLSession.shared.dataTask(with: url!) { data, response, error in\n            if let data = data, let response = response {\n                print(response)\n                do {\n                    let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)\n                    print(json)\n                } catch {\n                    print(\"Serialize Error\")\n                }\n            } else {\n                print(error ?? \"Error\")\n            }\n        }\n\n        task.resume()\n    }\n\n}\n\nlet urlSessionGetClient = URLSessionGetClient()\nurlSessionGetClient.get(url: \"https://httpbin.org/get\", parameters: [\"a\": \"foo\", \"b\": 1234])\n\nAPI\u306eURL\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092?a=xxx&b=yyy&c=zzz\u3068\u9023\u7d50\u3057\u3066\u3044\u304f\u3060\u3051\u3068\u3001\u975e\u5e38\u306b\u5358\u7d14\u3067\u3059\u3002\nparametersString\u306e\u8fba\u308a\u306f\u304d\u3061\u3093\u3068PatternMatch\u3092\u884c\u3046\u7b49\u306e\u6539\u5584\u306e\u4f59\u5730\u304c\u3042\u308a\u307e\u3059\u304c\u3002\nGet\u306e\u5834\u5408\u306fURLSession\u3067\u5341\u5206\u7c21\u6f54\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\nURLSession.shared \u3067\u306f\u306a\u304f\u3001let session = URLSession(configuration:  URLSessionConfiguration)\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001session\u304c\u5f37\u53c2\u7167\u3067\u4fdd\u6301\u3055\u308c\u308b\u306e\u3067\u3001completionHandler\u306e\u5185\u90e8\u3067session.invalidateAndCancel() or session.finishTasksAndInvalidate()\u3068\u3057\u3066\u3001\u9069\u5b9c\u89e3\u653e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306bURLConnection (iOS 9\u3067deprecated) \u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\nclass URLConnectionClient {\n\n    func get(url urlString: String) -> Void {\n        let url = URL(string: urlString)\n        let request = URLRequest(url: url!)\n        let queue = OperationQueue.main\n        NSURLConnection.sendAsynchronousRequest(request, queue: queue) { response, data, error in\n            if let response = response, let data = data {\n                print(response)\n                do {\n                    let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)\n                    print(json)\n                } catch {\n                    print(\"\")\n                }\n            } else {\n                print(error ?? \"\")\n            }\n        }\n    }\n\n}\n\nlet urlConnectionClient = URLConnectionClient()\nurlConnectionClient.get(url: \"https://httpbin.org/get\")\n\nresponse\u306eHandler\u306e\u5f15\u6570\u306e\u9806\u756a\u304c\u3001(URLResponse?, Data?, Error?) -> (Data?, URLResponse?, Error?) \u306b\u5909\u66f4\u306b\u306a\u3063\u3066\u307e\u3059\u306d\u3002\n\nPost\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionPostClient {\n\n    func post(url urlString: String, parameters: [String: Any]) {\n        let url = URL(string: urlString)\n        var request = URLRequest(url: url!)\n        request.httpMethod = \"POST\"\n\n        let parametersString: String = parameters.enumerated().reduce(\"?\") { (input, tuple) -> String in\n            switch tuple.element.value {\n            case let int as Int: return input + tuple.element.key + \"=\" + String(int) + (parameters.count - 1 > tuple.offset ? \"&\" : \"\")\n            case let string as String: return input + tuple.element.key + \"=\" + string + (parameters.count - 1 > tuple.offset ? \"&\" : \"\")\n            default: return input\n            }\n        }\n\n        request.httpBody = parametersString.data(using: String.Encoding.utf8)\n        let task = URLSession.shared.dataTask(with: request) { data, response, error in\n            if let data = data, let response = response {\n                print(response)\n                do {\n                    let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)\n                    print(json)\n                } catch {\n                    print(\"Serialize Error\")\n                }\n            } else {\n                print(error ?? \"Error\")\n            }\n        }\n        task.resume()\n    }\n\n}\n\nlet urlSessionPostClient = URLSessionPostClient()\nurlSessionPostClient.post(url: \"https://httpbin.org/post\", parameters: [\"a\": \"foo\", \"b\": 1234])\n\nPost\u306e\u5834\u5408\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304cnil\u306e\u72b6\u6cc1\u304c\u8003\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001Optional\u3092\u5916\u3057\u307e\u3057\u305f\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u3001httpBody\u306b\u5165\u308c\u307e\u3059\u3002\nPost\u3082Get\u306e\u6642\u3068\u307b\u307c\u5909\u308f\u3089\u305a\u306b\u66f8\u3051\u305f\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002\n\nMultipart\n\u3053\u3044\u3064\u304c\u5384\u4ecb\u3067\u3059\u3002\u4eca\u56de\u306f\u30e6\u30fc\u30b6\u30fcID, \u30c8\u30fc\u30af\u30f3, \u753b\u50cf(jpeg)\u306e\u9001\u4fe1\u3092\u60f3\u5b9a\u3057\u307e\u3057\u305f\u3002\nimport UIKit\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionMulitipartClient {\n\n    func mulipartPost(url urlString: String, parameters: [String: Any]) {\n        let url = URL(string: urlString)\n        var request = URLRequest(url: url!)\n        request.httpMethod = \"POST\"\n\n        let uniqueId = ProcessInfo.processInfo.globallyUniqueString\n        let boundary = \"---------------------------\\(uniqueId)\"\n\n        // Header\u306e\u8a2d\u5b9a\n        request.addValue(\"multipart/form-data; boundary=\\(boundary)\", forHTTPHeaderField: \"Content-Type\")\n\n        // Body\u306e\u8a2d\u5b9a\n        var body = Data()\n        var bodyText = String()\n\n        for element in parameters {\n            switch element.value {\n            case let image as UIImage:\n                let imageData = UIImageJPEGRepresentation(image, 1.0)\n                bodyText += \"--\\(boundary)\\r\\n\"\n                bodyText += \"Content-Disposition: form-data; name=\\\"\\(element.key)\\\"; filename=\\\"\\(element.key).jpg\\\"\\r\\n\"\n                bodyText += \"Content-Type: image/jpeg\\r\\n\\r\\n\"\n\n                body.append(bodyText.data(using: String.Encoding.utf8)!)\n                body.append(imageData!)\n            case let int as Int:\n                bodyText = String()\n                bodyText += \"--\\(boundary)\\r\\n\"\n                bodyText += \"Content-Disposition: form-data; name=\\\"\\(element.key)\\\";\\r\\n\"\n                bodyText += \"\\r\\n\"\n\n                body.append(bodyText.data(using: String.Encoding.utf8)!)\n                body.append(String(int).data(using: String.Encoding.utf8)!)\n            case let string as String:\n                bodyText += \"--\\(boundary)\\r\\n\"\n                bodyText += \"Content-Disposition: form-data; name=\\\"\\(element.key)\\\";\\r\\n\"\n                bodyText += \"\\r\\n\"\n\n                body.append(bodyText.data(using: String.Encoding.utf8)!)\n                body.append(string.data(using: String.Encoding.utf8)!)\n            default:\n                break\n            }\n        }\n\n        // Footer\u306e\u8a2d\u5b9a\n        var footerText = String()\n        footerText += \"\\r\\n\"\n        footerText += \"\\r\\n--\\(boundary)--\\r\\n\"\n\n        body.append(footerText.data(using: String.Encoding.utf8)!)\n\n        request.httpBody = body\n\n        let task = URLSession.shared.dataTask(with: request) { data, response, error in\n            if let data = data, let response = response {\n                print(response)\n                do {\n                    let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)\n                    print(json)\n                } catch {\n                    print(\"Serialize Error\")\n                }\n            } else {\n                print(error ?? \"Error\")\n            }\n        }\n\n        task.resume()\n    }\n\n}\n\nlet urlSessionMultipartClient = URLSessionMultipartClient()\nlet parameters = [\"sample\": #imageLiteral(resourceName: \"fox\"), \"userId\": 1234, \"accessToken\": \"xxxxxxxxxxxxxxx\"] as [String : Any] // \u753b\u50cf\u306f\u9069\u5b9cPlayground\u3078\nurlSessionMultipartClient.mulipartPost(url: \"https://httpbin.org/post\", parameters: parameters)\n\n\u30d5\u30a9\u30fc\u30e0\u30c7\u30fc\u30bf\u3092\u5f62\u6210\u3059\u308b\u90e8\u5206\u306f\u5165\u308a\u7d44\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u8aad\u3081\u306a\u304f\u3082\u306a\u3044...\n\u753b\u50cf\u306e\u62e1\u5f35\u5b50\u306fjpeg\u3092\u60f3\u5b9a\u3057\u307e\u3057\u305f\u304c\u3001API\u304c\u8981\u6c42\u3059\u308b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u8907\u6570\u51fa\u3066\u304f\u308b\u3068parameters \u3092Dictionary\u306b\u3059\u308b\u3053\u3068\u304c\u96e3\u3057\u304f\u306a\u308a\u307e\u3059\u306d\u3002HttpBody\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u578b\u3092\u81ea\u4f5c\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002 (\u5b9f\u969bAlamofire\u306e\u5834\u5408\u306f\u3001MultipartFormData\u3068\u3044\u3046\u578b\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002)\n\u4e45\u3005\u306b Web\u3092\u652f\u3048\u308b\u6280\u8853 \u3092\u5f15\u3063\u5f35\u308a\u51fa\u3057\u307e\u3057\u305f\u3002\n\nDownload\n\u5927\u304d\u306a\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u306f\u3001\u4eca\u307e\u3067\u306e dataTask(with url: URL, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Swift.Void) -> URLSessionDataTask \u3067\u306f\u306a\u304f\u3001 downloadTask(with url: URL) -> URLSessionDownloadTask \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nimport UIKit\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionDownloadImageClient: NSObject, URLSessionDownloadDelegate {\n\n    func downloadImage(url urlString: String) -> Void {\n\n        let url = URL(string: urlString)!\n        let configuration = URLSessionConfiguration.background(withIdentifier: \"backgroundSessionConfiguration\")\n        let session = URLSession(configuration: configuration,\n                                 delegate: self,\n                                 delegateQueue: OperationQueue.main)\n        let task = session.downloadTask(with: url)\n        task.resume()\n    }\n\n    func urlSession(_ session: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo location: URL) {\n        do {\n            let data = try Data(contentsOf: location)\n            let image = UIImage(data: data)\n        } catch {\n            print(\"Serialize Error\")\n        }\n    }\n\n    func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {\n\n        session.invalidateAndCancel()\n\n        if let error = error {\n            print(error)\n            return\n        }\n    }\n\n}\n\nlet urlSessionDownloadImageClient = URLSessionDownloadImageClient()\nurlSessionDownloadImageClient.downloadImage(url: \"https://httpbin.org/image/png\")\n\nURLSessionDownloadTask \u3067\u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306a\u30c7\u30fc\u30bf\u3067\u3082\u5bdd\u3066\u3044\u308b\u9593\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067@codelynx\u3055\u3093\u3082\u4ef0\u3063\u3066\u3044\u307e\u3059\u304c\u3001Closure\u3067\u30cf\u30f3\u30c9\u30eb\u51fa\u6765\u306a\u3044\u305f\u3081\u3001\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u969b\u306f\u3055\u3089\u306b\u8907\u96d1\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nHTTP Status Code\nHTTP\u901a\u4fe1\u3092\u3059\u308b\u4ee5\u4e0a\u3001HTTP Status Code\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3082\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u6765\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nStatus Code\u306f URLResponse \u3092 HTTPURLResponse \u306b\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionClient {\n\n    func get() {\n        let url = URL(string: \"https://httpbin.org/get\")\n        let task = URLSession.shared.dataTask(with: url!) { data, response, error in\n            if let response = response {\n                let statusCode = (response as! HTTPURLResponse).statusCode\n                print(statusCode)\n            }\n        }\n\n        task.resume()\n    }\n\n}\n\nlet urlSessionClient = URLSessionClient()\nurlSessionClient.get()\n\nStatus Code\u53d6\u5f97\u5f8c\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u81ea\u524d\u3067\u884c\u3044\u307e\u3059\u3002\n\u304d\u3061\u3093\u3068\u3057\u305f\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u3001HTTP\u901a\u4fe1\u306e\u307f\u306a\u3089\u305a\u3001\u6c38\u9060\u306e\u60a9\u307f\u306a\u6c17\u304c\u3057\u307e\u3059\u304c...\n\n\u307e\u3068\u3081\n\nGet: URLSession\u3067\u554f\u984c\u306a\u3057\nPost: URLSession\u3067\u554f\u984c\u306a\u3057\nMultipart: URLSession\u3067\u306f\u8907\u6570\u30d1\u30bf\u30fc\u30f3\u5bfe\u5fdc\u304c\u5927\u5909\u306b\u306a\u308b\u304c\u3001\u3067\u304d\u306a\u3044\u3053\u3068\u3082\u306a\u3044\nDownload: \u591a\u304f\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u767a\u751f\u3059\u308b\u3068\u8f9b\u304f\u306a\u3063\u3066\u304f\u308b\nHTTP Status Code: \u53d6\u5f97\u306f\u5bb9\u6613\u306b\u3067\u304d\u308b\u304c\u3001\u305d\u306e\u5f8c\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u81ea\u524d\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u5358\u7d14\u306aGet, Post\u306e\u307f\u306eAPI\u901a\u4fe1\u3057\u304b\u884c\u308f\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u5fc5\u8981\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\nMultipart\u3068Download\u306f\u983b\u767a\u3057\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001URLSession\u3067\u5bfe\u5fdc\u3067\u304d\u305d\u3046\u3067\u3059\u3002(Download\u306fAlamofire\u3067\u3082\u60a9\u307f\u307e\u3057\u305f\u304c\u3002)\nHTTP Status Code\u306b\u3088\u308b\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u4e00\u8003\u306e\u4f59\u5730\u304c\u3042\u308b\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u5f8c\u65e5\u8003\u3048\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f [Swift Advent Calendar 2016](http://qiita.com/advent-calendar/2016/swift) 16\u65e5\u76ee\u306e\u6295\u7a3f\u3067\u3059\u3002\n\u6628\u65e515\u65e5\u76ee\u306f[@_ha1f](http://qiita.com/_ha1f)\u3055\u3093\u306e[Photos.framework\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u3080](http://qiita.com/_ha1f/items/6ae8ece70107f2944a78)\u3067\u3057\u305f\u3002\n\n# TL;DR\nMultipart\u983b\u767a\u3057\u305f\u308a\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u30e1\u30a4\u30f3\u306e\u30a2\u30d7\u30ea\u3067\u306f\u306a\u304f\u3001**\u5358\u7d14\u306aGet, Post\u306e\u307f\u306a\u3089\u3001URLSession\u3067\u554f\u984c\u306a\u3044**\n\n# \u80cc\u666f\n\u4eca\u307e\u3067iOS\u3067\u306e\u901a\u4fe1\u51e6\u7406\u3068\u3044\u3048\u3070\u3001\u5f53\u305f\u308a\u524d\u306bAFNetworking\u304bAlamofire (\u305d\u306e\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u89e6\u3063\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u3059\u304c) \u3092\u4f7f\u3063\u3066\u304a\u308a\u3001\u304a\u6065\u305a\u304b\u3057\u306a\u304c\u3089\u3001\u6a19\u6e96API\u3067\u306e\u51e6\u7406\u3092\u66f8\u3044\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u300cSwift \u901a\u4fe1\u300d\u3067\u691c\u7d22\u3059\u308b\u30681\u756a\u76ee\u306bAlamofire\u3092\u4f7f\u3063\u305f\u8a18\u4e8b\u304c\u30d2\u30c3\u30c8\u3059\u308b\u3053\u3068\u304b\u3089\u3082\u3001\u81ea\u5206\u306e\u3088\u3046\u306a\u4eba\u306f\u610f\u5916\u3068\u591a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u307e\u305f\u3001[mono0926](http://qiita.com/mono0926)\u3055\u3093\u306e[iOS 10\u304c\u6b63\u5f0f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u4eca\u3001\u305d\u308d\u305d\u308d\u65e2\u5b58\u30a2\u30d7\u30ea\u306eiOS 8\u30b5\u30dd\u30fc\u30c8\u306f\u5207\u3063\u3066\u3082\u826f\u3044\u3060\u308d\u3046\u304b\u3068\u3044\u3046\u8003\u5bdf](http://qiita.com/mono0926/items/776a79a830570fbe683c#alamofire-40\u304cios-90\u4ee5\u4e0a\u306e\u307f\u306e\u30b5\u30dd\u30fc\u30c8\u306b\u306a\u3063\u305f)\u306e`Alamofire 4.0\u304ciOS 9\u4ee5\u4e0a\u306e\u307f\u30b5\u30dd\u30fc\u30c8\u306b\u306a\u3063\u305f`\u306e\u9805\u3084[@yimajo](http://qiita.com/yimajo)\u3055\u3093\u306e[\u4eca\u304b\u3089\u65b0\u898f\u3067iOS\u30a2\u30d7\u30ea\u3092\u66f8\u304d\u59cb\u3081\u308b\u306a\u3089\u30022016\u5e74\u51ac](http://qiita.com/yimajo/items/5a7333fd709e625b60da#alamofire)\u306e`Alamofire`\u306e\u9805\u3092\u8aad\u3093\u3067\u3001\u78ba\u304b\u306b\u300c\u3042\u3093\u306a\u306b\u5de8\u5927\u3067\u5168\u4f53\u3092\u628a\u63e1\u3057\u3065\u3089\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b89\u6613\u306b\u4f7f\u3063\u3066\u3044\u3066\u3044\u3044\u306e\u304b\uff1f\u300d\u3001\u300c\u305d\u3082\u305d\u3082\u6700\u521d\u304b\u3089\u30e9\u30a4\u30d6\u30e9\u30ea\u3042\u308a\u304d\u3067\u601d\u8003\u505c\u6b62\u3057\u3066\u308b\u306e\u3067\u306f\uff1f\u300d\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u305d\u3053\u3067\u4eca\u56de\u306f\u6a19\u6e96\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bAPI\u3067\u901a\u4fe1\u3092\u884c\u306a\u3063\u3066\u307f\u3066\u3001\u672c\u5f53\u306b\u901a\u4fe1\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u306a\u306e\u304b\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n[@codelynx](http://qiita.com/codelynx)\u3055\u3093\u306e[URLSessionDownloadTask \u3067\u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306a\u30c7\u30fc\u30bf\u3067\u3082\u5bdd\u3066\u3044\u308b\u9593\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9](http://qiita.com/codelynx/items/f4ff935058addaa9c5d7)\u3068\u4e00\u90e8\u88ab\u3063\u3066\u3044\u308b\u611f\u3058\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002\n\n**API\u306e\u30b5\u30f3\u30d7\u30eb\u306f`https://httpbin.org`\u3092\u304a\u501f\u308a\u3057\u307e\u3057\u305f\u3002**\n\n## Playground\u3067\u901a\u4fe1\u3059\u308b\n\u4eca\u56de\u306f\u7c21\u5358\u306b\u691c\u8a3c\u3059\u308b\u305f\u3081\u306bPlayground\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```swift\nimport PlaygroundSupport\n \nPlaygroundPage.current.needsIndefiniteExecution = true\n```\n\u521d\u3081\u3066\u77e5\u308a\u307e\u3057\u305f\u3002(\u53c2\u8003: http://dev.classmethod.jp/smartphone/iphone/swift-3-playground-urlsession/)\n\n# Get\n```swift\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionGetClient {\n    \n    func get(url urlString: String, parameters: [String: Any]? = nil) {\n        \n        let parametersString: String = {\n            guard let parameters = parameters else { return \"\" }\n            return parameters.enumerated().reduce(\"?\") { (input, tuple) -> String in\n                switch tuple.element.value {\n                case let int as Int: return input + tuple.element.key + \"=\" + String(int) + (parameters.count - 1 > tuple.offset ? \"&\" : \"\")\n                case let string as String: return input + tuple.element.key + \"=\" + string + (parameters.count - 1 > tuple.offset ? \"&\" : \"\")\n                default: return input\n                }\n            }\n        }()\n        \n        let url = URL(string: urlString + parametersString)\n        let task = URLSession.shared.dataTask(with: url!) { data, response, error in\n            if let data = data, let response = response {\n                print(response)\n                do {\n                    let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)\n                    print(json)\n                } catch {\n                    print(\"Serialize Error\")\n                }\n            } else {\n                print(error ?? \"Error\")\n            }\n        }\n\n        task.resume()\n    }\n\n}\n\nlet urlSessionGetClient = URLSessionGetClient()\nurlSessionGetClient.get(url: \"https://httpbin.org/get\", parameters: [\"a\": \"foo\", \"b\": 1234])\n```\nAPI\u306eURL\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092`?a=xxx&b=yyy&c=zzz`\u3068\u9023\u7d50\u3057\u3066\u3044\u304f\u3060\u3051\u3068\u3001\u975e\u5e38\u306b\u5358\u7d14\u3067\u3059\u3002\nparametersString\u306e\u8fba\u308a\u306f\u304d\u3061\u3093\u3068PatternMatch\u3092\u884c\u3046\u7b49\u306e\u6539\u5584\u306e\u4f59\u5730\u304c\u3042\u308a\u307e\u3059\u304c\u3002\n\nGet\u306e\u5834\u5408\u306fURLSession\u3067\u5341\u5206\u7c21\u6f54\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n`URLSession.shared` \u3067\u306f\u306a\u304f\u3001`let session = URLSession(configuration:  URLSessionConfiguration)`\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001session\u304c\u5f37\u53c2\u7167\u3067\u4fdd\u6301\u3055\u308c\u308b\u306e\u3067\u3001completionHandler\u306e\u5185\u90e8\u3067`session.invalidateAndCancel()` or `session.finishTasksAndInvalidate()`\u3068\u3057\u3066\u3001\u9069\u5b9c\u89e3\u653e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\n##### \u3061\u306a\u307f\u306bURLConnection (iOS 9\u3067deprecated) \u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\n\n```swift\nclass URLConnectionClient {\n    \n    func get(url urlString: String) -> Void {\n        let url = URL(string: urlString)\n        let request = URLRequest(url: url!)\n        let queue = OperationQueue.main\n        NSURLConnection.sendAsynchronousRequest(request, queue: queue) { response, data, error in\n            if let response = response, let data = data {\n                print(response)\n                do {\n                    let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)\n                    print(json)\n                } catch {\n                    print(\"\")\n                }\n            } else {\n                print(error ?? \"\")\n            }\n        }\n    }\n    \n}\n\nlet urlConnectionClient = URLConnectionClient()\nurlConnectionClient.get(url: \"https://httpbin.org/get\")\n```\nresponse\u306eHandler\u306e\u5f15\u6570\u306e\u9806\u756a\u304c\u3001`(URLResponse?, Data?, Error?)` -> `(Data?, URLResponse?, Error?)` \u306b\u5909\u66f4\u306b\u306a\u3063\u3066\u307e\u3059\u306d\u3002\n\n# Post\n```swift\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionPostClient {\n\n    func post(url urlString: String, parameters: [String: Any]) {\n        let url = URL(string: urlString)\n        var request = URLRequest(url: url!)\n        request.httpMethod = \"POST\"\n        \n        let parametersString: String = parameters.enumerated().reduce(\"?\") { (input, tuple) -> String in\n            switch tuple.element.value {\n            case let int as Int: return input + tuple.element.key + \"=\" + String(int) + (parameters.count - 1 > tuple.offset ? \"&\" : \"\")\n            case let string as String: return input + tuple.element.key + \"=\" + string + (parameters.count - 1 > tuple.offset ? \"&\" : \"\")\n            default: return input\n            }\n        }\n        \n        request.httpBody = parametersString.data(using: String.Encoding.utf8)\n        let task = URLSession.shared.dataTask(with: request) { data, response, error in\n            if let data = data, let response = response {\n                print(response)\n                do {\n                    let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)\n                    print(json)\n                } catch {\n                    print(\"Serialize Error\")\n                }\n            } else {\n                print(error ?? \"Error\")\n            }\n        }\n        task.resume()\n    }\n\n}\n\nlet urlSessionPostClient = URLSessionPostClient()\nurlSessionPostClient.post(url: \"https://httpbin.org/post\", parameters: [\"a\": \"foo\", \"b\": 1234])\n```\nPost\u306e\u5834\u5408\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304cnil\u306e\u72b6\u6cc1\u304c\u8003\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001Optional\u3092\u5916\u3057\u307e\u3057\u305f\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u3001httpBody\u306b\u5165\u308c\u307e\u3059\u3002\nPost\u3082Get\u306e\u6642\u3068\u307b\u307c\u5909\u308f\u3089\u305a\u306b\u66f8\u3051\u305f\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002\n\n# Multipart\n\u3053\u3044\u3064\u304c\u5384\u4ecb\u3067\u3059\u3002\u4eca\u56de\u306f\u30e6\u30fc\u30b6\u30fcID, \u30c8\u30fc\u30af\u30f3, \u753b\u50cf(jpeg)\u306e\u9001\u4fe1\u3092\u60f3\u5b9a\u3057\u307e\u3057\u305f\u3002\n\n```swift\nimport UIKit\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionMulitipartClient {\n \n    func mulipartPost(url urlString: String, parameters: [String: Any]) {\n        let url = URL(string: urlString)\n        var request = URLRequest(url: url!)\n        request.httpMethod = \"POST\"\n        \n        let uniqueId = ProcessInfo.processInfo.globallyUniqueString\n        let boundary = \"---------------------------\\(uniqueId)\"\n        \n        // Header\u306e\u8a2d\u5b9a\n        request.addValue(\"multipart/form-data; boundary=\\(boundary)\", forHTTPHeaderField: \"Content-Type\")\n        \n        // Body\u306e\u8a2d\u5b9a\n        var body = Data()\n        var bodyText = String()\n        \n        for element in parameters {\n            switch element.value {\n            case let image as UIImage:\n                let imageData = UIImageJPEGRepresentation(image, 1.0)\n                bodyText += \"--\\(boundary)\\r\\n\"\n                bodyText += \"Content-Disposition: form-data; name=\\\"\\(element.key)\\\"; filename=\\\"\\(element.key).jpg\\\"\\r\\n\"\n                bodyText += \"Content-Type: image/jpeg\\r\\n\\r\\n\"\n                \n                body.append(bodyText.data(using: String.Encoding.utf8)!)\n                body.append(imageData!)\n            case let int as Int:\n                bodyText = String()\n                bodyText += \"--\\(boundary)\\r\\n\"\n                bodyText += \"Content-Disposition: form-data; name=\\\"\\(element.key)\\\";\\r\\n\"\n                bodyText += \"\\r\\n\"\n                \n                body.append(bodyText.data(using: String.Encoding.utf8)!)\n                body.append(String(int).data(using: String.Encoding.utf8)!)\n            case let string as String:\n                bodyText += \"--\\(boundary)\\r\\n\"\n                bodyText += \"Content-Disposition: form-data; name=\\\"\\(element.key)\\\";\\r\\n\"\n                bodyText += \"\\r\\n\"\n                \n                body.append(bodyText.data(using: String.Encoding.utf8)!)\n                body.append(string.data(using: String.Encoding.utf8)!)\n            default:\n                break\n            }\n        }\n        \n        // Footer\u306e\u8a2d\u5b9a\n        var footerText = String()\n        footerText += \"\\r\\n\"\n        footerText += \"\\r\\n--\\(boundary)--\\r\\n\"\n        \n        body.append(footerText.data(using: String.Encoding.utf8)!)\n        \n        request.httpBody = body\n        \n        let task = URLSession.shared.dataTask(with: request) { data, response, error in\n            if let data = data, let response = response {\n                print(response)\n                do {\n                    let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)\n                    print(json)\n                } catch {\n                    print(\"Serialize Error\")\n                }\n            } else {\n                print(error ?? \"Error\")\n            }\n        }\n        \n        task.resume()\n    }\n    \n}\n\nlet urlSessionMultipartClient = URLSessionMultipartClient()\nlet parameters = [\"sample\": #imageLiteral(resourceName: \"fox\"), \"userId\": 1234, \"accessToken\": \"xxxxxxxxxxxxxxx\"] as [String : Any] // \u753b\u50cf\u306f\u9069\u5b9cPlayground\u3078\nurlSessionMultipartClient.mulipartPost(url: \"https://httpbin.org/post\", parameters: parameters)\n```\n\u30d5\u30a9\u30fc\u30e0\u30c7\u30fc\u30bf\u3092\u5f62\u6210\u3059\u308b\u90e8\u5206\u306f\u5165\u308a\u7d44\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u8aad\u3081\u306a\u304f\u3082\u306a\u3044...\n\u753b\u50cf\u306e\u62e1\u5f35\u5b50\u306fjpeg\u3092\u60f3\u5b9a\u3057\u307e\u3057\u305f\u304c\u3001API\u304c\u8981\u6c42\u3059\u308b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u8907\u6570\u51fa\u3066\u304f\u308b\u3068`parameters` \u3092Dictionary\u306b\u3059\u308b\u3053\u3068\u304c\u96e3\u3057\u304f\u306a\u308a\u307e\u3059\u306d\u3002HttpBody\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u578b\u3092\u81ea\u4f5c\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002 (\u5b9f\u969bAlamofire\u306e\u5834\u5408\u306f\u3001`MultipartFormData`\u3068\u3044\u3046\u578b\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002)\n\u4e45\u3005\u306b [Web\u3092\u652f\u3048\u308b\u6280\u8853](http://amzn.asia/f5j3U4v) \u3092\u5f15\u3063\u5f35\u308a\u51fa\u3057\u307e\u3057\u305f\u3002\n\n# Download\n\u5927\u304d\u306a\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u306f\u3001\u4eca\u307e\u3067\u306e `dataTask(with url: URL, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Swift.Void) -> URLSessionDataTask` \u3067\u306f\u306a\u304f\u3001 `downloadTask(with url: URL) -> URLSessionDownloadTask` \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```swift\nimport UIKit\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionDownloadImageClient: NSObject, URLSessionDownloadDelegate {\n    \n    func downloadImage(url urlString: String) -> Void {\n        \n        let url = URL(string: urlString)!\n        let configuration = URLSessionConfiguration.background(withIdentifier: \"backgroundSessionConfiguration\")\n        let session = URLSession(configuration: configuration,\n                                 delegate: self,\n                                 delegateQueue: OperationQueue.main)\n        let task = session.downloadTask(with: url)\n        task.resume()\n    }\n    \n    func urlSession(_ session: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo location: URL) {\n        do {\n            let data = try Data(contentsOf: location)\n            let image = UIImage(data: data)\n        } catch {\n            print(\"Serialize Error\")\n        }\n    }\n    \n    func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {\n        \n        session.invalidateAndCancel()\n        \n        if let error = error {\n            print(error)\n            return\n        }\n    }\n    \n}\n\nlet urlSessionDownloadImageClient = URLSessionDownloadImageClient()\nurlSessionDownloadImageClient.downloadImage(url: \"https://httpbin.org/image/png\")\n```\n\n[URLSessionDownloadTask \u3067\u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306a\u30c7\u30fc\u30bf\u3067\u3082\u5bdd\u3066\u3044\u308b\u9593\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9](http://qiita.com/codelynx/items/f4ff935058addaa9c5d7)\u3067[@codelynx](http://qiita.com/codelynx)\u3055\u3093\u3082\u4ef0\u3063\u3066\u3044\u307e\u3059\u304c\u3001Closure\u3067\u30cf\u30f3\u30c9\u30eb\u51fa\u6765\u306a\u3044\u305f\u3081\u3001\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u969b\u306f\u3055\u3089\u306b\u8907\u96d1\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# HTTP Status Code\nHTTP\u901a\u4fe1\u3092\u3059\u308b\u4ee5\u4e0a\u3001HTTP Status Code\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3082\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u6765\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nStatus Code\u306f `URLResponse` \u3092 `HTTPURLResponse` \u306b\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```swift\nimport Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass URLSessionClient {\n    \n    func get() {\n        let url = URL(string: \"https://httpbin.org/get\")\n        let task = URLSession.shared.dataTask(with: url!) { data, response, error in\n            if let response = response {\n                let statusCode = (response as! HTTPURLResponse).statusCode\n                print(statusCode)\n            }\n        }\n        \n        task.resume()\n    }\n\n}\n\nlet urlSessionClient = URLSessionClient()\nurlSessionClient.get()\n```\nStatus Code\u53d6\u5f97\u5f8c\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u81ea\u524d\u3067\u884c\u3044\u307e\u3059\u3002\n\u304d\u3061\u3093\u3068\u3057\u305f\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u3001HTTP\u901a\u4fe1\u306e\u307f\u306a\u3089\u305a\u3001\u6c38\u9060\u306e\u60a9\u307f\u306a\u6c17\u304c\u3057\u307e\u3059\u304c...\n\n\n# \u307e\u3068\u3081\n* Get: URLSession\u3067\u554f\u984c\u306a\u3057\n* Post: URLSession\u3067\u554f\u984c\u306a\u3057\n* Multipart: URLSession\u3067\u306f\u8907\u6570\u30d1\u30bf\u30fc\u30f3\u5bfe\u5fdc\u304c\u5927\u5909\u306b\u306a\u308b\u304c\u3001\u3067\u304d\u306a\u3044\u3053\u3068\u3082\u306a\u3044\n* Download: \u591a\u304f\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u767a\u751f\u3059\u308b\u3068\u8f9b\u304f\u306a\u3063\u3066\u304f\u308b\n* HTTP Status Code: \u53d6\u5f97\u306f\u5bb9\u6613\u306b\u3067\u304d\u308b\u304c\u3001\u305d\u306e\u5f8c\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u81ea\u524d\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u5358\u7d14\u306aGet, Post\u306e\u307f\u306eAPI\u901a\u4fe1\u3057\u304b\u884c\u308f\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u5fc5\u8981\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\nMultipart\u3068Download\u306f\u983b\u767a\u3057\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001URLSession\u3067\u5bfe\u5fdc\u3067\u304d\u305d\u3046\u3067\u3059\u3002(Download\u306fAlamofire\u3067\u3082\u60a9\u307f\u307e\u3057\u305f\u304c\u3002)\nHTTP Status Code\u306b\u3088\u308b\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u4e00\u8003\u306e\u4f59\u5730\u304c\u3042\u308b\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u5f8c\u65e5\u8003\u3048\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Swift", "AdventCalendar2016"]}