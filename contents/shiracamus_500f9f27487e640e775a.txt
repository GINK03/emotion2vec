{"tags": ["Python", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": " More than 1 year has passed since last update.\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ord17foldcut/\n\u4ed6\u306e\u89e3\u7b54\u4f8b\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/ebd9d7deb30c57447806\n\u5f8c\u8ff0\u306e\u6700\u521d\u306b\u8003\u3048\u305f\u65b9\u6cd5\u3067\u306f\u3001\u6298\u308a\u7573\u307f\u56de\u6570\u304c\u591a\u304f\u306a\u308b\u3068\u914d\u5217\u30c7\u30fc\u30bf\u91cf\u304c\u81a8\u5927\u306b\u306a\u308b\u305f\u3081\u3001\u5e38\u306b3x3\u306e\u914d\u5217\u3067\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6298\u308a\u305f\u305f\u3093\u3067\u5c0f\u3055\u304f\u306a\u3063\u305f\u914d\u5217\u30c7\u30fc\u30bf\u3092\u3001\u4e2d\u592e\u306e\u30c7\u30fc\u30bfc\u3092\u4f38\u3057\u9905\u306e\u3088\u3046\u306b\u7aef\u307e\u3067\u62bc\u3057\u4f38\u3070\u3057\u30663x3\u306b\u623b\u3059\u611f\u3058\u3067\u3059\u3002\nL = lambda p: [[c+c, c+c, l+r] for l,c,r in p]\nR = lambda p: [[l+r, c+c, c+c] for l,c,r in p]\nT = lambda p: zip(*[[c+c, c+c, t+b] for t,c,b in zip(*p)])\nB = lambda p: zip(*[[t+b, c+c, c+c] for t,c,b in zip(*p)])\n\ndef solve(data):\n    fold, (cut_y, cut_x) = data.split('-')\n    paper = reduce(lambda p,f: eval(f+'(p)'), fold, [[0,0,0],[0,1,0],[0,0,0]])\n    return str(paper[{'t':0,'b':-1}[cut_y]][{'l':0,'r':-1}[cut_x]]/4)\n\n\u89e3\u8aac:\ndef solve(data):             # \u5165\u529bdata\u4f8b:'LRTB-br'\n    fold, (cut_y, cut_x) = data.split('-')\n    # \u5165\u529b\u30c7\u30fc\u30bf\u5206\u5272\u3002'-'\u3067\u5206\u5272\u3057\u305f\u5de6\u5074\u306f\u6298\u7573\u307f\u6307\u793a\u3001\u53f3\u5074\u306f\u5207\u308b\u89d2\u306e\u4e0a\u4e0b\u4f4d\u7f6e\u3068\u5de6\u53f3\u4f4d\u7f6e\n\n    paper = reduce(lambda p,f: eval(f+'(p)'), fold, [[0,0,0],[0,1,0],[0,0,0]])\n    # \u6298\u308a\u7573\u3080\u7d19\u306b\u76f8\u5f53\u3059\u308b\u521d\u671f\u914d\u5217p: \u5468\u56f2\u306f\u5207\u3063\u3066\u3082\u7a74\u304c\u958b\u304b\u306a\u3044\u306e\u30670\u3001\u4e2d\u592e\u306f\u7d19\u306e\u6298\u91cd\u306a\u308a\u65701\n    #   [ [ 0, 0, 0 ],       \u4e0a\u6bb5: [\u5de6\u4e0a, \u4e2d\u4e0a, \u53f3\u4e0a]\n    #     [ 0, 1, 0 ],       \u4e2d\u6bb5: [\u5de6\u4e2d, \u4e2d\u4e2d, \u53f3\u4e2d]\n    #     [ 0, 0, 0 ] ]      \u4e0b\u6bb5: [\u5de6\u4e0b, \u4e2d\u4e0b, \u53f3\u4e0b]\n    # reduce\u3067\u6298\u7573\u307f\u6307\u793a\u6587\u5b57\u6bce\u306b \u6298\u7573\u307f\u95a2\u6570L(p)\u304bR(p)\u304bT(p)\u304bB(p)\u3092\u547c\u3073\u51fa\u3057\u3066paper\u3092\u4f5c\u308b\n\n    return str(paper[{'t':0,'b':-1}[cut_y]][{'l':0,'r':-1}[cut_x]]/4)\n    # paper[{'t':0,'b':-1}{cut_y]]\u3067\u7d19\u306e\u4e0a\u6bb5(0\u306f\u5148\u982d\u8981\u7d20)\u304b\u4e0b\u6bb5(-1\u306f\u6700\u7d42\u8981\u7d20)\u3092\u9078\u629e\n    # {'l':0,'r':-1}{cut_y]\u3067\u5de6(0\u306f\u5148\u982d\u8981\u7d20)\u304b\u53f3(-1\u306f\u6700\u7d42\u8981\u7d20)\u3092\u9078\u629e\n    # \u6298\u308a\u7573\u3093\u3060\u7d19\u306e\u6307\u5b9a\u3055\u308c\u305f\u89d2\u306e\u6298\u91cd\u306a\u308a\u6570\u30924\u3067\u5272\u3063\u305f\u5024\u304c\u7a74\u306e\u6570\u3001str()\u3067\u6587\u5b57\u5217\u5316\n\nL = lambda p: [[c+c, c+c, l+r] for l,c,r in p]   # \u5de6\u5074\u3092\u53f3\u5074\u306b\u6298\u308a\u7573\u3080\n    # \u4f8b:\u521d\u671f\u72b6\u614b  \u5de6\u3092\u53f3\u306b\u52a0\u7b97\u3001\u4e2d\u306f2\u500d\u3001\u5de6\u306f\u4e2d\u3068\u540c\u3058\u306b\n    # p l, c, r    c+c,c+c,l+r\n    # [[0, 0, 0]   [[0, 0, 0]\n    #  [0, 1, 0] -> [2, 2, 0]    \u56db\u89d2\u306e\u3069\u3053\u3092\u5207\u3063\u3066\u3082\u7a74\u306f\u958b\u304b\u306a\u3044\n    #  [0, 0, 0]]   [0, 0, 0]]\n\nR = lambda p: [[l+r, c+c, c+c] for l,c,r in p]   # \u53f3\u5074\u3092\u5de6\u5074\u306b\u6298\u308a\u7573\u3080\n    # \u4f8b:\u4e0a\u8a18\u72b6\u614b  \u53f3\u3092\u5de6\u306b\u52a0\u7b97\u3001\u4e2d\u306f2\u500d\u3001\u53f3\u306f\u4e2d\u3068\u540c\u3058\u306b\n    # p l, c, r    l+r,c+c,c+c\n    # [[0, 0, 0]   [[0, 0, 0]\n    #  [2, 2, 0] -> [2, 4, 4]    \u56db\u89d2\u306e\u3069\u3053\u3092\u5207\u3063\u3066\u3082\u7a74\u306f\u958b\u304b\u306a\u3044\n    #  [0, 0, 0]]   [0, 0, 0]]\n\nT = lambda p: zip(*[[c+c, c+c, t+b] for t,c,b in zip(*p)]) # \u4e0a\u5074\u3092\u4e0b\u5074\u306b\u6298\u308a\u7573\u3080\n    # \u4f8b:\u4e0a\u8a18\u72b6\u614b  zip\u3067\u7e26\u6a2a\u5165\u66ff\u3001\u5de6(\u4e0a)\u3092\u53f3(\u4e0b)\u306b\u52a0\u7b97\u3001\u4e2d2\u500d\u3001\u5de6\u306f\u4e2d\u3068\u540c\u3058\u3001zip\u3067\u623b\u3059\n    #   p      zip(*p) t, c, b    c+c,c+c,t+b  zip(*[...]) zip\u306e*\u306f\u914d\u5217\u5185\u5bb9\u3092\u5f15\u6570\u306b\n    # t [[0, 0, 0]   [[0, 2, 0]   [[4, 4, 0]   [[4, 8, 8]  \u5de6\u4e0a\u3092\u5207\u308b\u3068\u7a74\u306f1\n    # c  [2, 4, 4] -> [0, 4, 0] -> [8, 8, 0] -> [4, 8, 8]  \u53f3\u4e0a\u3092\u5207\u308b\u3068\u7a74\u306f2\n    # b  [0, 0, 0]]   [0, 4, 0]]   [8, 8, 0]]   [0, 0, 0]] \u4e0b\u3092\u5207\u308b\u3068\u7a74\u306f0\n\nB = lambda p: zip(*[[t+b, c+c, c+c] for t,c,b in zip(*p)]) # \u4e0b\u5074\u3092\u4e0a\u5074\u306b\u6298\u308a\u7573\u3080\n    # \u4f8b:\u4e0a\u8a18\u72b6\u614b  zip\u3067\u7e26\u6a2a\u5165\u66ff\u3001\u53f3(\u4e0b)\u3092\u5de6(\u4e0a)\u306b\u52a0\u7b97\u3001\u4e2d2\u500d\u3001\u4e0b\u306f\u4e2d\u3068\u540c\u3058\u3001zip\u3067\u623b\u3059\n    #   p      zip(*p) t, c, b    t+b,c+c,c+c  zip(*[...]) zip\u306e*\u306f\u914d\u5217\u5185\u5bb9\u3092\u5f15\u6570\u306b\n    # t [[4, 8, 8]   [[4, 4, 0]   [[4, 8, 8]   [[4, 8, 8]  \u5de6\u4e0a\u3092\u5207\u308b\u3068\u7a74\u306f1\n    # c  [4, 8, 8] -> [8, 8, 0] -> [8,16,16] -> [8,16,16]  \u53f3\u4e0a\u3092\u5207\u308b\u3068\u7a74\u306f2\n    # b  [0, 0, 0]]   [8, 8, 0]]   [8,16,16]]   [8,16,16]] \u5de6\u4e0b\u306f2\u3001\u53f3\u4e0b\u306f4\n\n\n\u6700\u521d\u306b\u8003\u3048\u305f\u65b9\u6cd5\u306f\u3001\u7d19\u306b\u898b\u7acb\u3066\u305f\u5341\u5206\u306a\u5927\u304d\u3055\u306e\u914d\u5217\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u5b9f\u969b\u306b\u6298\u308a\u7573\u3093\u3067\u6298\u91cd\u306a\u308a\u6570\u3092\u6570\u3048\u308b\u65b9\u6cd5\u3002\n\u6298\u7573\u307f\u6307\u793afold\u306e\u9577\u3055(\u6298\u308a\u7573\u307f\u56de\u6570)\u306b\u5fdc\u3058\u30661\u8fba\u306e\u9577\u3055size\u306e\u6b63\u65b9\u5f62\u914d\u5217paper\u3092\u7528\u610f\u3057\u3001\u6298\u308a\u91cd\u306a\u308a\u65701\u3067\u521d\u671f\u5024\u521d\u671f\u5316\u3057\u3066\u304a\u304f\u3002\u305f\u3060\u3057\u3001\u5916\u5468\u90e8\u306f\u5207\u3063\u3066\u3082\u7a74\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u521d\u671f\u5024(\u6298\u91cd\u306a\u308a\u6570)\u306f0\u3002\n\u6298\u308a\u7573\u3080\u5ea6\u306b\u6298\u308a\u91cd\u306a\u308b\u4f4d\u7f6e\u540c\u58eb\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u914d\u5217paper\u306e\u5927\u304d\u3055\u3092\u534a\u5206\u305a\u3064\u306b\u3057\u3066\u3044\u304f\u3002\n\u89d2\u3092\u5207\u3063\u3066\u7a74\u304c\u3067\u304d\u308b\u306e\u306f4\u679a\u6298\u308a\u91cd\u306a\u3063\u305f\u5834\u6240\u306a\u306e\u3067\u3001\u5207\u308b\u89d2cut\u306e\u6298\u91cd\u306a\u308a\u6570\u30924\u3067\u5272\u3063\u305f\u5024\u304c\u7a74\u306e\u6570\u3002\n#!/usr/bin/env python\n#-*- coding:utf8 -*-\n\nL = lambda p: [[l+r for l,r in zip(y[:len(y)/2][::-1], y[len(y)/2:])] for y in p]\nR = lambda p: [[l+r for l,r in zip(y[:len(y)/2], y[len(y)/2:][::-1])] for y in p]\nT = lambda p: [[t+b for t,b in zip(*y)] for y in zip(p[:len(p)/2][::-1], p[len(p)/2:])]\nB = lambda p: [[t+b for t,b in zip(*y)] for y in zip(p[:len(p)/2], p[len(p)/2:][::-1])]\n\ndef solve(data):\n    fold, (cut_y, cut_x) = data.split('-')\n    size = 2<<len(fold)\n    paper = [[0]*size] + [[0]+[1]*(size-2)+[0] for y in xrange(size-2)] + [[0]*size]\n    paper = reduce(lambda p,f: eval(f+'(p)'), fold, paper)\n    return str(paper[{'t':0,'b':-1}[cut_y]][{'l':0,'r':-1}[cut_x]]/4)\n\ndef test(data, correct):\n    answer = solve(data)\n    print 'xo'[answer==correct], data, correct, answer\n\n0, test( \"RRTRB-bl\", \"6\" );\n1, test( \"R-tr\", \"0\" );\n2, test( \"L-br\", \"0\" );\n3, test( \"T-tl\", \"0\" );\n4, test( \"B-tl\", \"0\" );\n5, test( \"BL-br\", \"0\" );\n6, test( \"LB-tl\", \"0\" );\n7, test( \"RL-tl\", \"0\" );\n8, test( \"BL-tl\", \"0\" );\n9, test( \"TL-bl\", \"0\" );\n10, test( \"RT-tr\", \"1\" );\n11, test( \"TRB-tl\", \"0\" );\n12, test( \"TRL-bl\", \"0\" );\n13, test( \"TRB-br\", \"2\" );\n14, test( \"LLB-bl\", \"2\" );\n15, test( \"RTL-tr\", \"1\" );\n16, test( \"LBB-tr\", \"0\" );\n17, test( \"TLL-tl\", \"2\" );\n18, test( \"RLRR-tr\", \"0\" );\n19, test( \"BBTL-tl\", \"4\" );\n20, test( \"TBBT-tr\", \"0\" );\n21, test( \"LLBR-tl\", \"0\" );\n22, test( \"LBRT-tl\", \"2\" );\n23, test( \"RLBL-bl\", \"4\" );\n24, test( \"BRRL-br\", \"3\" );\n25, test( \"TBBTL-tl\", \"8\" );\n26, test( \"TLBBT-br\", \"0\" );\n27, test( \"LRBLL-br\", \"7\" );\n28, test( \"TRRTT-br\", \"6\" );\n29, test( \"BBBLB-br\", \"0\" );\n30, test( \"RTTTR-tl\", \"4\" );\n31, test( \"BBLLL-br\", \"6\" );\n32, test( \"RRLLTR-tr\", \"16\" );\n33, test( \"TTRBLB-br\", \"8\" );\n34, test( \"LRBRBR-bl\", \"14\" );\n35, test( \"RBBLRL-tl\", \"8\" );\n36, test( \"RTRLTB-tl\", \"12\" );\n37, test( \"LBLRTR-tl\", \"14\" );\n38, test( \"RRLTRL-tl\", \"16\" );\n39, test( \"TBLTRR-br\", \"12\" );\n40, test( \"TTTRLTT-bl\", \"30\" );\n41, test( \"TBBRTBL-tr\", \"15\" );\n42, test( \"TRTRTLL-tr\", \"28\" );\n43, test( \"TLLRTRB-tr\", \"24\" );\n44, test( \"RLLBRLB-tr\", \"15\" );\n45, test( \"LTLRRBT-tr\", \"32\" );\n46, test( \"RBBRBLT-br\", \"21\" );\n47, test( \"LLRLRLR-tr\", \"0\" );\n\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ord17foldcut/\n\n\u4ed6\u306e\u89e3\u7b54\u4f8b\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/ebd9d7deb30c57447806\n\n\u5f8c\u8ff0\u306e\u6700\u521d\u306b\u8003\u3048\u305f\u65b9\u6cd5\u3067\u306f\u3001\u6298\u308a\u7573\u307f\u56de\u6570\u304c\u591a\u304f\u306a\u308b\u3068\u914d\u5217\u30c7\u30fc\u30bf\u91cf\u304c\u81a8\u5927\u306b\u306a\u308b\u305f\u3081\u3001\u5e38\u306b3x3\u306e\u914d\u5217\u3067\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6298\u308a\u305f\u305f\u3093\u3067\u5c0f\u3055\u304f\u306a\u3063\u305f\u914d\u5217\u30c7\u30fc\u30bf\u3092\u3001\u4e2d\u592e\u306e\u30c7\u30fc\u30bfc\u3092\u4f38\u3057\u9905\u306e\u3088\u3046\u306b\u7aef\u307e\u3067\u62bc\u3057\u4f38\u3070\u3057\u30663x3\u306b\u623b\u3059\u611f\u3058\u3067\u3059\u3002\n\n```py\nL = lambda p: [[c+c, c+c, l+r] for l,c,r in p]\nR = lambda p: [[l+r, c+c, c+c] for l,c,r in p]\nT = lambda p: zip(*[[c+c, c+c, t+b] for t,c,b in zip(*p)])\nB = lambda p: zip(*[[t+b, c+c, c+c] for t,c,b in zip(*p)])\n\ndef solve(data):\n    fold, (cut_y, cut_x) = data.split('-')\n    paper = reduce(lambda p,f: eval(f+'(p)'), fold, [[0,0,0],[0,1,0],[0,0,0]])\n    return str(paper[{'t':0,'b':-1}[cut_y]][{'l':0,'r':-1}[cut_x]]/4)\n```\n\n\u89e3\u8aac:\n\n```py\ndef solve(data):             # \u5165\u529bdata\u4f8b:'LRTB-br'\n    fold, (cut_y, cut_x) = data.split('-')\n    # \u5165\u529b\u30c7\u30fc\u30bf\u5206\u5272\u3002'-'\u3067\u5206\u5272\u3057\u305f\u5de6\u5074\u306f\u6298\u7573\u307f\u6307\u793a\u3001\u53f3\u5074\u306f\u5207\u308b\u89d2\u306e\u4e0a\u4e0b\u4f4d\u7f6e\u3068\u5de6\u53f3\u4f4d\u7f6e\n\n    paper = reduce(lambda p,f: eval(f+'(p)'), fold, [[0,0,0],[0,1,0],[0,0,0]])\n    # \u6298\u308a\u7573\u3080\u7d19\u306b\u76f8\u5f53\u3059\u308b\u521d\u671f\u914d\u5217p: \u5468\u56f2\u306f\u5207\u3063\u3066\u3082\u7a74\u304c\u958b\u304b\u306a\u3044\u306e\u30670\u3001\u4e2d\u592e\u306f\u7d19\u306e\u6298\u91cd\u306a\u308a\u65701\n    #   [ [ 0, 0, 0 ],       \u4e0a\u6bb5: [\u5de6\u4e0a, \u4e2d\u4e0a, \u53f3\u4e0a]\n    #     [ 0, 1, 0 ],       \u4e2d\u6bb5: [\u5de6\u4e2d, \u4e2d\u4e2d, \u53f3\u4e2d]\n    #     [ 0, 0, 0 ] ]      \u4e0b\u6bb5: [\u5de6\u4e0b, \u4e2d\u4e0b, \u53f3\u4e0b]\n    # reduce\u3067\u6298\u7573\u307f\u6307\u793a\u6587\u5b57\u6bce\u306b \u6298\u7573\u307f\u95a2\u6570L(p)\u304bR(p)\u304bT(p)\u304bB(p)\u3092\u547c\u3073\u51fa\u3057\u3066paper\u3092\u4f5c\u308b\n\n    return str(paper[{'t':0,'b':-1}[cut_y]][{'l':0,'r':-1}[cut_x]]/4)\n    # paper[{'t':0,'b':-1}{cut_y]]\u3067\u7d19\u306e\u4e0a\u6bb5(0\u306f\u5148\u982d\u8981\u7d20)\u304b\u4e0b\u6bb5(-1\u306f\u6700\u7d42\u8981\u7d20)\u3092\u9078\u629e\n    # {'l':0,'r':-1}{cut_y]\u3067\u5de6(0\u306f\u5148\u982d\u8981\u7d20)\u304b\u53f3(-1\u306f\u6700\u7d42\u8981\u7d20)\u3092\u9078\u629e\n    # \u6298\u308a\u7573\u3093\u3060\u7d19\u306e\u6307\u5b9a\u3055\u308c\u305f\u89d2\u306e\u6298\u91cd\u306a\u308a\u6570\u30924\u3067\u5272\u3063\u305f\u5024\u304c\u7a74\u306e\u6570\u3001str()\u3067\u6587\u5b57\u5217\u5316\n\nL = lambda p: [[c+c, c+c, l+r] for l,c,r in p]   # \u5de6\u5074\u3092\u53f3\u5074\u306b\u6298\u308a\u7573\u3080\n    # \u4f8b:\u521d\u671f\u72b6\u614b  \u5de6\u3092\u53f3\u306b\u52a0\u7b97\u3001\u4e2d\u306f2\u500d\u3001\u5de6\u306f\u4e2d\u3068\u540c\u3058\u306b\n    # p l, c, r    c+c,c+c,l+r\n    # [[0, 0, 0]   [[0, 0, 0]\n    #  [0, 1, 0] -> [2, 2, 0]    \u56db\u89d2\u306e\u3069\u3053\u3092\u5207\u3063\u3066\u3082\u7a74\u306f\u958b\u304b\u306a\u3044\n    #  [0, 0, 0]]   [0, 0, 0]]\n\nR = lambda p: [[l+r, c+c, c+c] for l,c,r in p]   # \u53f3\u5074\u3092\u5de6\u5074\u306b\u6298\u308a\u7573\u3080\n    # \u4f8b:\u4e0a\u8a18\u72b6\u614b  \u53f3\u3092\u5de6\u306b\u52a0\u7b97\u3001\u4e2d\u306f2\u500d\u3001\u53f3\u306f\u4e2d\u3068\u540c\u3058\u306b\n    # p l, c, r    l+r,c+c,c+c\n    # [[0, 0, 0]   [[0, 0, 0]\n    #  [2, 2, 0] -> [2, 4, 4]    \u56db\u89d2\u306e\u3069\u3053\u3092\u5207\u3063\u3066\u3082\u7a74\u306f\u958b\u304b\u306a\u3044\n    #  [0, 0, 0]]   [0, 0, 0]]\n\nT = lambda p: zip(*[[c+c, c+c, t+b] for t,c,b in zip(*p)]) # \u4e0a\u5074\u3092\u4e0b\u5074\u306b\u6298\u308a\u7573\u3080\n    # \u4f8b:\u4e0a\u8a18\u72b6\u614b  zip\u3067\u7e26\u6a2a\u5165\u66ff\u3001\u5de6(\u4e0a)\u3092\u53f3(\u4e0b)\u306b\u52a0\u7b97\u3001\u4e2d2\u500d\u3001\u5de6\u306f\u4e2d\u3068\u540c\u3058\u3001zip\u3067\u623b\u3059\n    #   p      zip(*p) t, c, b    c+c,c+c,t+b  zip(*[...]) zip\u306e*\u306f\u914d\u5217\u5185\u5bb9\u3092\u5f15\u6570\u306b\n    # t [[0, 0, 0]   [[0, 2, 0]   [[4, 4, 0]   [[4, 8, 8]  \u5de6\u4e0a\u3092\u5207\u308b\u3068\u7a74\u306f1\n    # c  [2, 4, 4] -> [0, 4, 0] -> [8, 8, 0] -> [4, 8, 8]  \u53f3\u4e0a\u3092\u5207\u308b\u3068\u7a74\u306f2\n    # b  [0, 0, 0]]   [0, 4, 0]]   [8, 8, 0]]   [0, 0, 0]] \u4e0b\u3092\u5207\u308b\u3068\u7a74\u306f0\n\nB = lambda p: zip(*[[t+b, c+c, c+c] for t,c,b in zip(*p)]) # \u4e0b\u5074\u3092\u4e0a\u5074\u306b\u6298\u308a\u7573\u3080\n    # \u4f8b:\u4e0a\u8a18\u72b6\u614b  zip\u3067\u7e26\u6a2a\u5165\u66ff\u3001\u53f3(\u4e0b)\u3092\u5de6(\u4e0a)\u306b\u52a0\u7b97\u3001\u4e2d2\u500d\u3001\u4e0b\u306f\u4e2d\u3068\u540c\u3058\u3001zip\u3067\u623b\u3059\n    #   p      zip(*p) t, c, b    t+b,c+c,c+c  zip(*[...]) zip\u306e*\u306f\u914d\u5217\u5185\u5bb9\u3092\u5f15\u6570\u306b\n    # t [[4, 8, 8]   [[4, 4, 0]   [[4, 8, 8]   [[4, 8, 8]  \u5de6\u4e0a\u3092\u5207\u308b\u3068\u7a74\u306f1\n    # c  [4, 8, 8] -> [8, 8, 0] -> [8,16,16] -> [8,16,16]  \u53f3\u4e0a\u3092\u5207\u308b\u3068\u7a74\u306f2\n    # b  [0, 0, 0]]   [8, 8, 0]]   [8,16,16]]   [8,16,16]] \u5de6\u4e0b\u306f2\u3001\u53f3\u4e0b\u306f4\n\n```\n\n\u6700\u521d\u306b\u8003\u3048\u305f\u65b9\u6cd5\u306f\u3001\u7d19\u306b\u898b\u7acb\u3066\u305f\u5341\u5206\u306a\u5927\u304d\u3055\u306e\u914d\u5217\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u5b9f\u969b\u306b\u6298\u308a\u7573\u3093\u3067\u6298\u91cd\u306a\u308a\u6570\u3092\u6570\u3048\u308b\u65b9\u6cd5\u3002\n\u6298\u7573\u307f\u6307\u793afold\u306e\u9577\u3055(\u6298\u308a\u7573\u307f\u56de\u6570)\u306b\u5fdc\u3058\u30661\u8fba\u306e\u9577\u3055size\u306e\u6b63\u65b9\u5f62\u914d\u5217paper\u3092\u7528\u610f\u3057\u3001\u6298\u308a\u91cd\u306a\u308a\u65701\u3067\u521d\u671f\u5024\u521d\u671f\u5316\u3057\u3066\u304a\u304f\u3002\u305f\u3060\u3057\u3001\u5916\u5468\u90e8\u306f\u5207\u3063\u3066\u3082\u7a74\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u521d\u671f\u5024(\u6298\u91cd\u306a\u308a\u6570)\u306f0\u3002\n\u6298\u308a\u7573\u3080\u5ea6\u306b\u6298\u308a\u91cd\u306a\u308b\u4f4d\u7f6e\u540c\u58eb\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u914d\u5217paper\u306e\u5927\u304d\u3055\u3092\u534a\u5206\u305a\u3064\u306b\u3057\u3066\u3044\u304f\u3002\n\u89d2\u3092\u5207\u3063\u3066\u7a74\u304c\u3067\u304d\u308b\u306e\u306f4\u679a\u6298\u308a\u91cd\u306a\u3063\u305f\u5834\u6240\u306a\u306e\u3067\u3001\u5207\u308b\u89d2cut\u306e\u6298\u91cd\u306a\u308a\u6570\u30924\u3067\u5272\u3063\u305f\u5024\u304c\u7a74\u306e\u6570\u3002\n\n```py\n#!/usr/bin/env python\n#-*- coding:utf8 -*-\n\nL = lambda p: [[l+r for l,r in zip(y[:len(y)/2][::-1], y[len(y)/2:])] for y in p]\nR = lambda p: [[l+r for l,r in zip(y[:len(y)/2], y[len(y)/2:][::-1])] for y in p]\nT = lambda p: [[t+b for t,b in zip(*y)] for y in zip(p[:len(p)/2][::-1], p[len(p)/2:])]\nB = lambda p: [[t+b for t,b in zip(*y)] for y in zip(p[:len(p)/2], p[len(p)/2:][::-1])]\n\ndef solve(data):\n    fold, (cut_y, cut_x) = data.split('-')\n    size = 2<<len(fold)\n    paper = [[0]*size] + [[0]+[1]*(size-2)+[0] for y in xrange(size-2)] + [[0]*size]\n    paper = reduce(lambda p,f: eval(f+'(p)'), fold, paper)\n    return str(paper[{'t':0,'b':-1}[cut_y]][{'l':0,'r':-1}[cut_x]]/4)\n\ndef test(data, correct):\n    answer = solve(data)\n    print 'xo'[answer==correct], data, correct, answer\n\n0, test( \"RRTRB-bl\", \"6\" );\n1, test( \"R-tr\", \"0\" );\n2, test( \"L-br\", \"0\" );\n3, test( \"T-tl\", \"0\" );\n4, test( \"B-tl\", \"0\" );\n5, test( \"BL-br\", \"0\" );\n6, test( \"LB-tl\", \"0\" );\n7, test( \"RL-tl\", \"0\" );\n8, test( \"BL-tl\", \"0\" );\n9, test( \"TL-bl\", \"0\" );\n10, test( \"RT-tr\", \"1\" );\n11, test( \"TRB-tl\", \"0\" );\n12, test( \"TRL-bl\", \"0\" );\n13, test( \"TRB-br\", \"2\" );\n14, test( \"LLB-bl\", \"2\" );\n15, test( \"RTL-tr\", \"1\" );\n16, test( \"LBB-tr\", \"0\" );\n17, test( \"TLL-tl\", \"2\" );\n18, test( \"RLRR-tr\", \"0\" );\n19, test( \"BBTL-tl\", \"4\" );\n20, test( \"TBBT-tr\", \"0\" );\n21, test( \"LLBR-tl\", \"0\" );\n22, test( \"LBRT-tl\", \"2\" );\n23, test( \"RLBL-bl\", \"4\" );\n24, test( \"BRRL-br\", \"3\" );\n25, test( \"TBBTL-tl\", \"8\" );\n26, test( \"TLBBT-br\", \"0\" );\n27, test( \"LRBLL-br\", \"7\" );\n28, test( \"TRRTT-br\", \"6\" );\n29, test( \"BBBLB-br\", \"0\" );\n30, test( \"RTTTR-tl\", \"4\" );\n31, test( \"BBLLL-br\", \"6\" );\n32, test( \"RRLLTR-tr\", \"16\" );\n33, test( \"TTRBLB-br\", \"8\" );\n34, test( \"LRBRBR-bl\", \"14\" );\n35, test( \"RBBLRL-tl\", \"8\" );\n36, test( \"RTRLTB-tl\", \"12\" );\n37, test( \"LBLRTR-tl\", \"14\" );\n38, test( \"RRLTRL-tl\", \"16\" );\n39, test( \"TBLTRR-br\", \"12\" );\n40, test( \"TTTRLTT-bl\", \"30\" );\n41, test( \"TBBRTBL-tr\", \"15\" );\n42, test( \"TRTRTLL-tr\", \"28\" );\n43, test( \"TLLRTRB-tr\", \"24\" );\n44, test( \"RLLBRLB-tr\", \"15\" );\n45, test( \"LTLRRBT-tr\", \"32\" );\n46, test( \"RBBRBLT-br\", \"21\" );\n47, test( \"LLRLRLR-tr\", \"0\" );\n```\n"}