{"tags": ["iOS", "Xcode", "Objective-C", "\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3", "\u8a3c\u660e\u66f8"], "context": "ATS\u306e\u5fc5\u9808\u5316\u304c\u4e88\u5b9a\u3055\u308c\u3066\u3044\u305f\u308a\u3001\u307e\u3059\u307e\u3059\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304c\u53b3\u3057\u304f\u306a\u3063\u3066\u304d\u3066\u3044\u307e\u3059\u306d\u3002\n\u4eca\u5f8c\u306f\u66f4\u306b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ec\u30d9\u30eb\u304c\u9ad8\u3044\u30a2\u30d7\u30ea\u304c\u6c42\u3081\u3089\u308c\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u308b\u305f\u3081\u3001\u3057\u3063\u304b\u308a\u7406\u89e3\u3057\u3066\u304a\u304d\u305f\u3044\u3067\u3059\u3002\niOS\u72ec\u81ea\u30a2\u30d7\u30ea\u304b\u3089\u306e\u8a8d\u8a3c\u51e6\u7406\u3092\u884c\u3046\u969b\u306b\u30cf\u30de\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\u691c\u8a3c\u3057\u305f\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\u2460\u30b5\u30fc\u30d0\u306e\u69cb\u7bc9(Windows server 2012\u3001 IIS 7.0)\n\u2461WEB\u30da\u30fc\u30b8\u306e\u4f5c\u6210\uff08BASIC\u8a8d\u8a3c\u3001SSL\u8a8d\u8a3c\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a8d\u8a3c\u3092\u884c\u3046\u3088\u3046\u8a2d\u5b9a\uff09\n\u203bSSL\u8a8d\u8a3c\u306f\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u4f5c\u6210\u3057\u3066\u4f7f\u7528\n\u2462iOS\u30a2\u30d7\u30ea\u304b\u3089\u5404\u7a2e\u8a8d\u8a3c\u3092\u884c\u3044\u3001\u2461\u306e\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\n\u4eca\u56de\u306f\u2462\u306e\u90e8\u5206\u306e\u307f\u3067\u3059\u3002\uff08\u2460\u3001\u2461\u306f\u65e2\u306b\u826f\u3044\u8a18\u4e8b\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\uff09\n\niOS\u72ec\u81ea\u30a2\u30d7\u30ea\u3067\u306e\u8a8d\u8a3c\u51e6\u7406\u306b\u3064\u3044\u3066\n\u307e\u305a\u521d\u3081\u306b\u3001\u8a8d\u8a3c\u51e6\u7406\u3092\u3059\u308b\u969b\u306b\u601d\u3063\u305f\u306e\u304ciOS\u306e\u8a3c\u660e\u66f8\u30b9\u30c8\u30a2\u306b\u8a3c\u660e\u66f8\u3092\u5165\u308c\u3066\u304a\u3051\u3070\u52dd\u624b\u306b\u8a8d\u8a3c\u3057\u3066\u304f\u308c\u308b\u3093\u3058\u3083\u3001\u3068\u601d\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u3066\u3082\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\u8272\u3005\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u8a3c\u660e\u66f8\u30b9\u30c8\u30a2\u3092\u53c2\u7167\u3067\u304d\u308b\u306e\u306fsafari\u3001\u30e1\u30fc\u30eb\u306e\u307f\u3068\u3044\u3046\u60c5\u5831\u304c\u3002\n\u72ec\u81ea\u30a2\u30d7\u30ea\uff08\u81ea\u5206\u3067\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\uff09\u306f\u8a8d\u8a3c\u306e\u969b\u306b\u81ea\u5206\u3067\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u51e6\u7406\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u306d\u3002\n\u3067\u306f\u3001\u65e9\u901f\u3067\u3059\u304c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305a\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210\u3067\u3059\u3002\u7c21\u5358\u306a\u3082\u306e\u3067\u3059\u304c\u53c2\u8003\u306b\u306a\u308c\u3070\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210\n//NSURLSession\u3092\u4f7f\u3063\u305f\u901a\u4fe1\u51e6\u7406\n- (void)nsurlSessionClientCertificate\n{\n    NSString* url = @\" URL\u3092\u8a18\u8ff0\";\n    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:url]\n                                             cachePolicy:NSURLRequestReloadIgnoringCacheData\n                                     timeoutInterval:30.0];\n\n    NSURLSessionConfiguration *sessionConfiguration = [NSURLSessionConfiguration defaultSessionConfiguration];\n    NSURLSession *session = [NSURLSession sessionWithConfiguration:sessionConfiguration\n                                                          delegate:self\n                                                     delegateQueue:[NSOperationQueue mainQueue]];\n\n    [[session dataTaskWithRequest: request  completionHandler: ^(NSData *data, NSURLResponse *response, NSError *error) {\n        //\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u6210\u529f\u304b\u5931\u6557\u304b\u3092\u898b\u3066\u305d\u308c\u305e\u308c\u51e6\u7406\u3092\u884c\u3046\n        if (response && ! error)\n        {\n            NSString *responseString = [[NSString alloc] initWithData: data  encoding: NSShiftJISStringEncoding];\n            NSLog(@\"\u6210\u529f: %@\", responseString);\n        }\n        else\n        {\n            NSLog(@\"\u5931\u6557: %@\", error);\n        }\n    }] resume];\n}\n\n\n\u901a\u5e38\u3067\u3059\u3068\u3001\u3053\u308c\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u9001\u4fe1\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\u30c7\u30ea\u30b2\u30fc\u30c8\u306e\u8a2d\u5b9a\u3092\u5fd8\u308c\u305a\u306b\u3002\n\u8a8d\u8a3c\u306e\u7a2e\u985e\u304c\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u7a2e\u985e\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u632f\u308a\u5206\u3051\u3066\u3042\u3052\u308b\u611f\u3058\u3067\u3059\u306d\u3002\nBASIC\u8a8d\u8a3c\u3001SSL\u8a8d\u8a3c\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u5834\u5408\u3053\u306e\u51e6\u7406\u304c\uff13\u56de\u547c\u3070\u308c\u307e\u3059\u3002\n\n\u8a8d\u8a3c\u51e6\u7406\n/** \u51e6\u7406\u6982\u8981:\u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n *\n */\n- (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge\n completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler\n{\n    //1\u5ea6\u3067\u3082\u8a8d\u8a3c\u5931\u6557\u3057\u3066\u3044\u308b\u5834\u5408\n    if ([challenge previousFailureCount] > 0) {\n        //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n        completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, nil);\n    }\n    else\n    {\n        //Basic\u8a8d\u8a3c\n        if ( [challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodHTTPBasic]\n            || [challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodHTTPDigest] )\n        {\n            NSURLCredential *credential = [[NSURLCredential alloc] initWithUser:@\"\u30e6\u30fc\u30b6ID\"\n                                                                       password:@\"\u30d1\u30b9\u30ef\u30fc\u30c9\"\n                                                                    persistence:NSURLCredentialPersistenceForSession];\n\n            completionHandler(NSURLSessionAuthChallengeUseCredential, credential);\n        }\n        //SSL\u8a8d\u8a3c\n        else if ( [challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust] )\n        {\n            NSURLProtectionSpace *protecitionSpace = [challenge protectionSpace];\n            SecTrustRef trust                      = [protecitionSpace serverTrust];\n            NSURLCredential *credential            = [NSURLCredential credentialForTrust:trust];\n\n            NSArray *certs = [[NSArray alloc] initWithObjects:(id)[[self class] sslCertificate], nil];\n\n            OSStatus status = SecTrustSetAnchorCertificates(trust, (__bridge CFArrayRef)certs);\n            if ( status != errSecSuccess )\n            {\n                //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n                completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, nil);\n                return;\n            }\n            SecTrustResultType trustResult = kSecTrustResultInvalid;\n            status = SecTrustEvaluate(trust, &trustResult);\n            if ( status != errSecSuccess )\n            {\n                //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n                completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, nil);\n                return;\n            }\n\n            switch ( trustResult )\n            {\n                case kSecTrustResultProceed:        // valid and user has explicitly accepted it.\n                case kSecTrustResultUnspecified:    // valid and user has not explicitly accepted or reject it. generally you accept it in this case.\n                {\n                    //\u8a8d\u8a3c\u9001\u4fe1\n                    completionHandler(NSURLSessionAuthChallengeUseCredential, credential);\n                    return;\n                }\n                    break;\n                case kSecTrustResultRecoverableTrustFailure: // invalid, but in a way that may be acceptable, such as a name mismatch, expiration, or lack of trust (such as self-signed certificate)\n                {\n                    //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n                    [challenge.sender cancelAuthenticationChallenge:challenge];\n                }\n                    break;\n                default:\n                    //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n                    [challenge.sender cancelAuthenticationChallenge:challenge];\n                    break;\n            }\n        }\n        //\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a8d\u8a3c\n        else if ( [challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodClientCertificate])\n        {\n            OSStatus status;\n            CFArrayRef importedItems = NULL;\n\n            NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n            NSString *documentsDirPath = [paths objectAtIndex:0];\n            NSString *pkcs12Path = [documentsDirPath stringByAppendingPathComponent:@\"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\u540d.pfx\"];\n            NSString *password = @\"\u30d1\u30b9\u30ef\u30fc\u30c9\";\n\n            //\u8a8d\u8a3c\u30c7\u30fc\u30bfP12\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n            NSData *PKCS12Data = [NSData dataWithContentsOfFile:pkcs12Path];\n\n            status = SecPKCS12Import((__bridge CFDataRef)PKCS12Data,\n                                     (__bridge CFDictionaryRef) [NSDictionary dictionaryWithObjectsAndKeys:password,\n                                                                 kSecImportExportPassphrase,\n                                                                 nil],\n                                     &importedItems);\n\n            if (status == errSecSuccess) {\n\n                NSArray* items = (__bridge NSArray*)importedItems;\n                NSLog(@\"items:%@\", items);\n                SecIdentityRef identityRef = (__bridge SecIdentityRef)[[items objectAtIndex:0] objectForKey:(__bridge id)kSecImportItemIdentity];\n                NSURLCredential* credential = [NSURLCredential credentialWithIdentity:identityRef\n                                                                         certificates:nil\n                                                                          persistence:NSURLCredentialPersistenceNone];\n\n                //\u8a8d\u8a3c\u9001\u4fe1\n                completionHandler(NSURLSessionAuthChallengeUseCredential, credential);\n\n                if (importedItems != NULL)\n                    CFRelease(importedItems);\n            }\n        }\n    }\n}\n\n+ (SecCertificateRef)sslCertificate\n{\n    if (!sslCertificate )\n    {        \n        //\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u306fder\u5f62\u5f0f\u3067\u306a\u3044\u3068\u51e6\u7406\u3067\u304d\u306a\u3044\uff1f\n        NSString *filePath = [[NSBundle mainBundle] pathForResource:@\"\u30d5\u30a1\u30a4\u30eb\u540d\" ofType:@\"der\"];\n        NSData *data   = [[NSData alloc] initWithContentsOfFile:filePath];\n        sslCertificate = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)data);\n    }\n\n    return sslCertificate;\n}\n\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8a8d\u8a3c\u51e6\u7406\u3092\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u4f55\u304b\u3057\u3089\u306e\u624b\u6bb5\u3067\u30a2\u30d7\u30ea\u5185\u306b\u8a3c\u660e\u66f8\u3092\u6301\u305f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u521d\u3081\u304b\u3089\u30a2\u30d7\u30ea\u306b\u7d44\u307f\u8fbc\u3093\u3067\u304a\u304f\u304b\u3001\u5fc5\u8981\u306a\u6642\u306b\u30b5\u30fc\u30d0\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u7b49\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u3053\u3067\u6ce8\u610f\u3057\u3066\u6b32\u3057\u3044\u306e\u304c\u3001SSL\u8a8d\u8a3c\u306e\u969b\u306b\u4f7f\u7528\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306fder\u5f62\u5f0f\u3067\u306a\u3044\u3068\u6b63\u5e38\u306b\u8a8d\u8a3c\u304c\u884c\u3048\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u4f7f\u3046\u4eba\u306f\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u8a73\u3057\u304f\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\n\nRSA\u9375\u3001\u8a3c\u660e\u66f8\u306e\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3064\u3044\u3066\nwindows\u306b\u53d6\u308a\u8fbc\u3093\u3067der\u5f62\u5f0f\u3067\u51fa\u529b\u3057\u3066\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u306f\u30b0\u30ed\u30fc\u30d0\u30b5\u30a4\u30f3\u3055\u3093\u306e\u30c6\u30b9\u30c8\u8a3c\u660e\u66f8\u3092\u4f7f\u308f\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0a\u3068\u306a\u308a\u307e\u3059\u3002\n\u601d\u3063\u3066\u3044\u305f\u3088\u308a\u7c21\u5358\u306b\u3067\u304d\u307e\u3057\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u306e\u8a18\u4e8b\u304c\u8ab0\u304b\u306e\u304a\u5f79\u306b\u7acb\u3066\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\nATS\u306e\u5fc5\u9808\u5316\u304c\u4e88\u5b9a\u3055\u308c\u3066\u3044\u305f\u308a\u3001\u307e\u3059\u307e\u3059\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304c\u53b3\u3057\u304f\u306a\u3063\u3066\u304d\u3066\u3044\u307e\u3059\u306d\u3002\n\u4eca\u5f8c\u306f\u66f4\u306b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ec\u30d9\u30eb\u304c\u9ad8\u3044\u30a2\u30d7\u30ea\u304c\u6c42\u3081\u3089\u308c\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u308b\u305f\u3081\u3001\u3057\u3063\u304b\u308a\u7406\u89e3\u3057\u3066\u304a\u304d\u305f\u3044\u3067\u3059\u3002\n\niOS\u72ec\u81ea\u30a2\u30d7\u30ea\u304b\u3089\u306e\u8a8d\u8a3c\u51e6\u7406\u3092\u884c\u3046\u969b\u306b\u30cf\u30de\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\u691c\u8a3c\u3057\u305f\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\u2460\u30b5\u30fc\u30d0\u306e\u69cb\u7bc9(Windows server 2012\u3001 IIS 7.0)\n\u2461WEB\u30da\u30fc\u30b8\u306e\u4f5c\u6210\uff08BASIC\u8a8d\u8a3c\u3001SSL\u8a8d\u8a3c\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a8d\u8a3c\u3092\u884c\u3046\u3088\u3046\u8a2d\u5b9a\uff09\n\u203bSSL\u8a8d\u8a3c\u306f\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u4f5c\u6210\u3057\u3066\u4f7f\u7528\n\u2462iOS\u30a2\u30d7\u30ea\u304b\u3089\u5404\u7a2e\u8a8d\u8a3c\u3092\u884c\u3044\u3001\u2461\u306e\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\n\u4eca\u56de\u306f\u2462\u306e\u90e8\u5206\u306e\u307f\u3067\u3059\u3002\uff08\u2460\u3001\u2461\u306f\u65e2\u306b\u826f\u3044\u8a18\u4e8b\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\uff09\n\n# iOS\u72ec\u81ea\u30a2\u30d7\u30ea\u3067\u306e\u8a8d\u8a3c\u51e6\u7406\u306b\u3064\u3044\u3066\n\u307e\u305a\u521d\u3081\u306b\u3001\u8a8d\u8a3c\u51e6\u7406\u3092\u3059\u308b\u969b\u306b\u601d\u3063\u305f\u306e\u304ciOS\u306e\u8a3c\u660e\u66f8\u30b9\u30c8\u30a2\u306b\u8a3c\u660e\u66f8\u3092\u5165\u308c\u3066\u304a\u3051\u3070\u52dd\u624b\u306b\u8a8d\u8a3c\u3057\u3066\u304f\u308c\u308b\u3093\u3058\u3083\u3001\u3068\u601d\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u3066\u3082\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\u8272\u3005\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u8a3c\u660e\u66f8\u30b9\u30c8\u30a2\u3092\u53c2\u7167\u3067\u304d\u308b\u306e\u306fsafari\u3001\u30e1\u30fc\u30eb\u306e\u307f\u3068\u3044\u3046\u60c5\u5831\u304c\u3002\n\u72ec\u81ea\u30a2\u30d7\u30ea\uff08\u81ea\u5206\u3067\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\uff09\u306f\u8a8d\u8a3c\u306e\u969b\u306b\u81ea\u5206\u3067\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u51e6\u7406\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u306d\u3002\n\n\u3067\u306f\u3001\u65e9\u901f\u3067\u3059\u304c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305a\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210\u3067\u3059\u3002\u7c21\u5358\u306a\u3082\u306e\u3067\u3059\u304c\u53c2\u8003\u306b\u306a\u308c\u3070\u3002\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```ruby:\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210\n//NSURLSession\u3092\u4f7f\u3063\u305f\u901a\u4fe1\u51e6\u7406\n- (void)nsurlSessionClientCertificate\n{\n    NSString* url = @\" URL\u3092\u8a18\u8ff0\";\n    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:url]\n                                             cachePolicy:NSURLRequestReloadIgnoringCacheData\n                                     timeoutInterval:30.0];\n    \n    NSURLSessionConfiguration *sessionConfiguration = [NSURLSessionConfiguration defaultSessionConfiguration];\n    NSURLSession *session = [NSURLSession sessionWithConfiguration:sessionConfiguration\n                                                          delegate:self\n                                                     delegateQueue:[NSOperationQueue mainQueue]];\n    \n    [[session dataTaskWithRequest: request  completionHandler: ^(NSData *data, NSURLResponse *response, NSError *error) {\n        //\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u6210\u529f\u304b\u5931\u6557\u304b\u3092\u898b\u3066\u305d\u308c\u305e\u308c\u51e6\u7406\u3092\u884c\u3046\n        if (response && ! error)\n        {\n            NSString *responseString = [[NSString alloc] initWithData: data  encoding: NSShiftJISStringEncoding];\n            NSLog(@\"\u6210\u529f: %@\", responseString);\n        }\n        else\n        {\n            NSLog(@\"\u5931\u6557: %@\", error);\n        }\n    }] resume];\n}\n```\n\n\u901a\u5e38\u3067\u3059\u3068\u3001\u3053\u308c\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u9001\u4fe1\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\u30c7\u30ea\u30b2\u30fc\u30c8\u306e\u8a2d\u5b9a\u3092\u5fd8\u308c\u305a\u306b\u3002\n\u8a8d\u8a3c\u306e\u7a2e\u985e\u304c\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u7a2e\u985e\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u632f\u308a\u5206\u3051\u3066\u3042\u3052\u308b\u611f\u3058\u3067\u3059\u306d\u3002\nBASIC\u8a8d\u8a3c\u3001SSL\u8a8d\u8a3c\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u5834\u5408\u3053\u306e\u51e6\u7406\u304c\uff13\u56de\u547c\u3070\u308c\u307e\u3059\u3002\n\n```ruby:\u8a8d\u8a3c\u51e6\u7406\n/** \u51e6\u7406\u6982\u8981:\u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n *\n */\n- (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge\n completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler\n{\n    //1\u5ea6\u3067\u3082\u8a8d\u8a3c\u5931\u6557\u3057\u3066\u3044\u308b\u5834\u5408\n    if ([challenge previousFailureCount] > 0) {\n        //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n        completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, nil);\n    }\n    else\n    {\n        //Basic\u8a8d\u8a3c\n        if ( [challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodHTTPBasic]\n            || [challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodHTTPDigest] )\n        {\n            NSURLCredential *credential = [[NSURLCredential alloc] initWithUser:@\"\u30e6\u30fc\u30b6ID\"\n                                                                       password:@\"\u30d1\u30b9\u30ef\u30fc\u30c9\"\n                                                                    persistence:NSURLCredentialPersistenceForSession];\n            \n            completionHandler(NSURLSessionAuthChallengeUseCredential, credential);\n        }\n        //SSL\u8a8d\u8a3c\n        else if ( [challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust] )\n        {\n            NSURLProtectionSpace *protecitionSpace = [challenge protectionSpace];\n            SecTrustRef trust                      = [protecitionSpace serverTrust];\n            NSURLCredential *credential            = [NSURLCredential credentialForTrust:trust];\n            \n            NSArray *certs = [[NSArray alloc] initWithObjects:(id)[[self class] sslCertificate], nil];\n            \n            OSStatus status = SecTrustSetAnchorCertificates(trust, (__bridge CFArrayRef)certs);\n            if ( status != errSecSuccess )\n            {\n                //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n                completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, nil);\n                return;\n            }\n            SecTrustResultType trustResult = kSecTrustResultInvalid;\n            status = SecTrustEvaluate(trust, &trustResult);\n            if ( status != errSecSuccess )\n            {\n                //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n                completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, nil);\n                return;\n            }\n            \n            switch ( trustResult )\n            {\n                case kSecTrustResultProceed:        // valid and user has explicitly accepted it.\n                case kSecTrustResultUnspecified:    // valid and user has not explicitly accepted or reject it. generally you accept it in this case.\n                {\n                    //\u8a8d\u8a3c\u9001\u4fe1\n                    completionHandler(NSURLSessionAuthChallengeUseCredential, credential);\n                    return;\n                }\n                    break;\n                case kSecTrustResultRecoverableTrustFailure: // invalid, but in a way that may be acceptable, such as a name mismatch, expiration, or lack of trust (such as self-signed certificate)\n                {\n                    //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n                    [challenge.sender cancelAuthenticationChallenge:challenge];\n                }\n                    break;\n                default:\n                    //\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\n                    [challenge.sender cancelAuthenticationChallenge:challenge];\n                    break;\n            }\n        }\n        //\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a8d\u8a3c\n        else if ( [challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodClientCertificate])\n        {\n            OSStatus status;\n            CFArrayRef importedItems = NULL;\n            \n            NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n            NSString *documentsDirPath = [paths objectAtIndex:0];\n            NSString *pkcs12Path = [documentsDirPath stringByAppendingPathComponent:@\"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\u540d.pfx\"];\n            NSString *password = @\"\u30d1\u30b9\u30ef\u30fc\u30c9\";\n            \n            //\u8a8d\u8a3c\u30c7\u30fc\u30bfP12\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n            NSData *PKCS12Data = [NSData dataWithContentsOfFile:pkcs12Path];\n            \n            status = SecPKCS12Import((__bridge CFDataRef)PKCS12Data,\n                                     (__bridge CFDictionaryRef) [NSDictionary dictionaryWithObjectsAndKeys:password,\n                                                                 kSecImportExportPassphrase,\n                                                                 nil],\n                                     &importedItems);\n            \n            if (status == errSecSuccess) {\n                \n                NSArray* items = (__bridge NSArray*)importedItems;\n                NSLog(@\"items:%@\", items);\n                SecIdentityRef identityRef = (__bridge SecIdentityRef)[[items objectAtIndex:0] objectForKey:(__bridge id)kSecImportItemIdentity];\n                NSURLCredential* credential = [NSURLCredential credentialWithIdentity:identityRef\n                                                                         certificates:nil\n                                                                          persistence:NSURLCredentialPersistenceNone];\n                \n                //\u8a8d\u8a3c\u9001\u4fe1\n                completionHandler(NSURLSessionAuthChallengeUseCredential, credential);\n                \n                if (importedItems != NULL)\n                    CFRelease(importedItems);\n            }\n        }\n    }\n}\n\n+ (SecCertificateRef)sslCertificate\n{\n    if (!sslCertificate )\n    {        \n        //\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u306fder\u5f62\u5f0f\u3067\u306a\u3044\u3068\u51e6\u7406\u3067\u304d\u306a\u3044\uff1f\n        NSString *filePath = [[NSBundle mainBundle] pathForResource:@\"\u30d5\u30a1\u30a4\u30eb\u540d\" ofType:@\"der\"];\n        NSData *data   = [[NSData alloc] initWithContentsOfFile:filePath];\n        sslCertificate = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)data);\n    }\n    \n    return sslCertificate;\n}\n```\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8a8d\u8a3c\u51e6\u7406\u3092\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u4f55\u304b\u3057\u3089\u306e\u624b\u6bb5\u3067\u30a2\u30d7\u30ea\u5185\u306b\u8a3c\u660e\u66f8\u3092\u6301\u305f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u521d\u3081\u304b\u3089\u30a2\u30d7\u30ea\u306b\u7d44\u307f\u8fbc\u3093\u3067\u304a\u304f\u304b\u3001\u5fc5\u8981\u306a\u6642\u306b\u30b5\u30fc\u30d0\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u7b49\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u3053\u3067\u6ce8\u610f\u3057\u3066\u6b32\u3057\u3044\u306e\u304c\u3001SSL\u8a8d\u8a3c\u306e\u969b\u306b\u4f7f\u7528\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306fder\u5f62\u5f0f\u3067\u306a\u3044\u3068\u6b63\u5e38\u306b\u8a8d\u8a3c\u304c\u884c\u3048\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u4f7f\u3046\u4eba\u306f\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u8a73\u3057\u304f\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\n> [RSA\u9375\u3001\u8a3c\u660e\u66f8\u306e\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3064\u3044\u3066](http://qiita.com/kunichiko/items/12cbccaadcbf41c72735)\nwindows\u306b\u53d6\u308a\u8fbc\u3093\u3067der\u5f62\u5f0f\u3067\u51fa\u529b\u3057\u3066\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u306f\u30b0\u30ed\u30fc\u30d0\u30b5\u30a4\u30f3\u3055\u3093\u306e\u30c6\u30b9\u30c8\u8a3c\u660e\u66f8\u3092\u4f7f\u308f\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0a\u3068\u306a\u308a\u307e\u3059\u3002\n\u601d\u3063\u3066\u3044\u305f\u3088\u308a\u7c21\u5358\u306b\u3067\u304d\u307e\u3057\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u306e\u8a18\u4e8b\u304c\u8ab0\u304b\u306e\u304a\u5f79\u306b\u7acb\u3066\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n"}