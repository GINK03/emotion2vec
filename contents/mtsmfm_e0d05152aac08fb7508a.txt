{"tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Ruby"], "context": "\u554f\u984c\u306f\u3053\u3061\u3089:\nhttp://qiita.com/Nabetani/items/10b2ccc28301e44e09e6\nhttp://nabetani.sakura.ne.jp/hena/orde11tredis/\nparents \u3092\u899a\u3048\u3055\u305b\u3066\u304a\u3044\u3066 Array#& \u3067\u5171\u901a\u306e\u89aa\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u8fd1\u3044\u9806\u306b\u4e26\u3093\u3067\u3044\u308b\u306e\u3067\u3042\u3068\u306f index \u3068\u308b\u3060\u3051\u3002\nrequire 'bundler/inline'\n\ngemfile do\n  source 'https://rubygems.org'\n\n  gem 'minitest', require: 'minitest/autorun'\n  gem 'minitest-reporters'\n\n  gem 'awesome_print'\n  gem 'tapp'\n\n  gem 'pry'\n  gem 'pry-rescue', require: 'pry-rescue/minitest'\n  gem 'pry-stack_explorer'\nend\n\nclass Tree\n  attr_reader :base, :leaves, :parents\n\n  include Enumerable\n\n  def initialize(base, parents=[])\n    @base = base\n    @parents = parents\n    @leaves = dividers_for(base).map do |n|\n      Tree.new(n, [self] + parents)\n    end\n  end\n\n  def each(&block)\n    block.call(self)\n\n    leaves.each do |leaf|\n      leaf.each(&block)\n    end\n  end\n\n  def distance(a, b)\n    as = select {|tree| tree.base == a }\n    bs = select {|tree| tree.base == b }\n\n    as.product(bs).map {|_a, _b|\n      next _a.parents.index(_b) + 1 if _a.parents.include?(_b)\n      next _b.parents.index(_a) + 1 if _b.parents.include?(_a)\n\n      common_parent = (_a.parents & _b.parents).first\n      _a.parents.index(common_parent) + _b.parents.index(common_parent) + 2\n    }.min\n  end\n\n  private\n\n  def dividers_for(base)\n    return [] if base <= 3\n\n    (2...base).select {|n| base % n == 0 }.map {|n| n + 1 }\n  end\nend\n\ndef solve(input)\n  base, a, b = input.scan(/\\d+/).map(&:to_i)\n  Tree.new(base).distance(a, b).to_s\nend\n\nTEST_DATA = <<~EOS\n/*0*/ test( \"50:6,3\", \"1\" );\n/*1*/ test( \"98:5,11\", \"4\" );\n/*2*/ test( \"1000:33,20\", \"7\" );\n/*3*/ test( \"514:9,18\", \"8\" );\n/*4*/ test( \"961:5,4\", \"3\" );\n/*5*/ test( \"1369:1369,3\", \"2\" );\n/*6*/ test( \"258:16,12\", \"5\" );\n/*7*/ test( \"235:13,3\", \"2\" );\n/*8*/ test( \"1096:19,17\", \"8\" );\n/*9*/ test( \"847:7,17\", \"6\" );\n/*10*/ test( \"1932:3,5\", \"2\" );\n/*11*/ test( \"2491:4,8\", \"3\" );\n/*12*/ test( \"840:421,36\", \"2\" );\n/*13*/ test( \"1430:37,111\", \"3\" );\n/*14*/ test( \"496:17,9\", \"2\" );\n/*15*/ test( \"891:6,10\", \"1\" );\n/*16*/ test( \"1560:196,21\", \"2\" );\n/*17*/ test( \"516:20,12\", \"5\" );\n/*18*/ test( \"696:30,59\", \"2\" );\n/*19*/ test( \"1760:5,441\", \"2\" );\n/*20*/ test( \"1736:11,26\", \"5\" );\n/*21*/ test( \"1518:17,34\", \"4\" );\n/*22*/ test( \"806:63,16\", \"5\" );\n/*23*/ test( \"1920:3,97\", \"2\" );\n/*24*/ test( \"1150:13,22\", \"4\" );\n/*25*/ test( \"920:116,5\", \"1\" );\n/*26*/ test( \"2016:7,337\", \"2\" );\n/*27*/ test( \"408:9,25\", \"2\" );\n/*28*/ test( \"735:36,8\", \"2\" );\n/*29*/ test( \"470:5,31\", \"2\" );\n/*30*/ test( \"2100:12,351\", \"3\" );\n/*31*/ test( \"870:36,10\", \"1\" );\n/*32*/ test( \"1512:253,13\", \"2\" );\n/*33*/ test( \"697:12,15\", \"3\" );\n/*34*/ test( \"1224:5,14\", \"2\" );\n/*35*/ test( \"986:125,17\", \"3\" );\n/*36*/ test( \"864:12,13\", \"3\" );\n/*37*/ test( \"500:21,51\", \"2\" );\n/*38*/ test( \"819:33,21\", \"4\" );\n/*39*/ test( \"594:55,3\", \"2\" );\n/*40*/ test( \"638:17,24\", \"3\" );\nEOS\n\nMinitest::Reporters.use!(Minitest::Reporters::ProgressReporter.new)\n\ndescribe 'Doukaku' do\n  TEST_DATA.each_line do |test|\n    number, input, expected = test.scan(/(\\d+).*\"(.*)\", \"(.*)\"/)[0]\n\n    it \"##{number}\" do\n      assert_equal expected, solve(input)\n    end\n  end\nend\n\n\u554f\u984c\u306f\u3053\u3061\u3089:\nhttp://qiita.com/Nabetani/items/10b2ccc28301e44e09e6\nhttp://nabetani.sakura.ne.jp/hena/orde11tredis/\n\nparents \u3092\u899a\u3048\u3055\u305b\u3066\u304a\u3044\u3066 `Array#&` \u3067\u5171\u901a\u306e\u89aa\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u8fd1\u3044\u9806\u306b\u4e26\u3093\u3067\u3044\u308b\u306e\u3067\u3042\u3068\u306f index \u3068\u308b\u3060\u3051\u3002\n\n```rb\nrequire 'bundler/inline'\n\ngemfile do\n  source 'https://rubygems.org'\n\n  gem 'minitest', require: 'minitest/autorun'\n  gem 'minitest-reporters'\n\n  gem 'awesome_print'\n  gem 'tapp'\n\n  gem 'pry'\n  gem 'pry-rescue', require: 'pry-rescue/minitest'\n  gem 'pry-stack_explorer'\nend\n\nclass Tree\n  attr_reader :base, :leaves, :parents\n\n  include Enumerable\n\n  def initialize(base, parents=[])\n    @base = base\n    @parents = parents\n    @leaves = dividers_for(base).map do |n|\n      Tree.new(n, [self] + parents)\n    end\n  end\n\n  def each(&block)\n    block.call(self)\n\n    leaves.each do |leaf|\n      leaf.each(&block)\n    end\n  end\n\n  def distance(a, b)\n    as = select {|tree| tree.base == a }\n    bs = select {|tree| tree.base == b }\n\n    as.product(bs).map {|_a, _b|\n      next _a.parents.index(_b) + 1 if _a.parents.include?(_b)\n      next _b.parents.index(_a) + 1 if _b.parents.include?(_a)\n\n      common_parent = (_a.parents & _b.parents).first\n      _a.parents.index(common_parent) + _b.parents.index(common_parent) + 2\n    }.min\n  end\n\n  private\n\n  def dividers_for(base)\n    return [] if base <= 3\n\n    (2...base).select {|n| base % n == 0 }.map {|n| n + 1 }\n  end\nend\n\ndef solve(input)\n  base, a, b = input.scan(/\\d+/).map(&:to_i)\n  Tree.new(base).distance(a, b).to_s\nend\n\nTEST_DATA = <<~EOS\n/*0*/ test( \"50:6,3\", \"1\" );\n/*1*/ test( \"98:5,11\", \"4\" );\n/*2*/ test( \"1000:33,20\", \"7\" );\n/*3*/ test( \"514:9,18\", \"8\" );\n/*4*/ test( \"961:5,4\", \"3\" );\n/*5*/ test( \"1369:1369,3\", \"2\" );\n/*6*/ test( \"258:16,12\", \"5\" );\n/*7*/ test( \"235:13,3\", \"2\" );\n/*8*/ test( \"1096:19,17\", \"8\" );\n/*9*/ test( \"847:7,17\", \"6\" );\n/*10*/ test( \"1932:3,5\", \"2\" );\n/*11*/ test( \"2491:4,8\", \"3\" );\n/*12*/ test( \"840:421,36\", \"2\" );\n/*13*/ test( \"1430:37,111\", \"3\" );\n/*14*/ test( \"496:17,9\", \"2\" );\n/*15*/ test( \"891:6,10\", \"1\" );\n/*16*/ test( \"1560:196,21\", \"2\" );\n/*17*/ test( \"516:20,12\", \"5\" );\n/*18*/ test( \"696:30,59\", \"2\" );\n/*19*/ test( \"1760:5,441\", \"2\" );\n/*20*/ test( \"1736:11,26\", \"5\" );\n/*21*/ test( \"1518:17,34\", \"4\" );\n/*22*/ test( \"806:63,16\", \"5\" );\n/*23*/ test( \"1920:3,97\", \"2\" );\n/*24*/ test( \"1150:13,22\", \"4\" );\n/*25*/ test( \"920:116,5\", \"1\" );\n/*26*/ test( \"2016:7,337\", \"2\" );\n/*27*/ test( \"408:9,25\", \"2\" );\n/*28*/ test( \"735:36,8\", \"2\" );\n/*29*/ test( \"470:5,31\", \"2\" );\n/*30*/ test( \"2100:12,351\", \"3\" );\n/*31*/ test( \"870:36,10\", \"1\" );\n/*32*/ test( \"1512:253,13\", \"2\" );\n/*33*/ test( \"697:12,15\", \"3\" );\n/*34*/ test( \"1224:5,14\", \"2\" );\n/*35*/ test( \"986:125,17\", \"3\" );\n/*36*/ test( \"864:12,13\", \"3\" );\n/*37*/ test( \"500:21,51\", \"2\" );\n/*38*/ test( \"819:33,21\", \"4\" );\n/*39*/ test( \"594:55,3\", \"2\" );\n/*40*/ test( \"638:17,24\", \"3\" );\nEOS\n\nMinitest::Reporters.use!(Minitest::Reporters::ProgressReporter.new)\n\ndescribe 'Doukaku' do\n  TEST_DATA.each_line do |test|\n    number, input, expected = test.scan(/(\\d+).*\"(.*)\", \"(.*)\"/)[0]\n\n    it \"##{number}\" do\n      assert_equal expected, solve(input)\n    end\n  end\nend\n```\n"}