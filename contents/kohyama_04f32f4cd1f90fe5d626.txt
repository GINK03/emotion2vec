{"context": " More than 1 year has passed since last update.\n\n\u554f\u984c\u3068\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\n\u554f\u984c: \u30d5\u30a9\u30fc\u30af\u3058\u3083\u306a\u3044 \u301c \u6a2a\u3078\u306a 2014.2.1 \u554f\u984c\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54: \u7b2c18\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u554f\u984c\n\n\u79c1\u306e\u89e3\u7b54 in Clojure\n\nord18.clj\n(ns ord18\n  (:require [clojure.test :refer (deftest are run-tests)]))\n\n(defn- append [lines customer]\n  (let [len (comp count second)\n        min-len (apply min (map len lines))\n        [k v] (first (filter #(= (len %) min-len) lines))]\n    (assoc lines k\n      (if (= customer \\x)\n        (conj v \\x)\n        (reduce conj v (repeat (Integer/parseInt (str customer)) \\o))))))\n\n(defn- proc [tps lines]\n  (reduce #(assoc %1 %2\n             (let [[d r] (split-at (tps %2) (%1 %2))]\n               (vec (concat (drop-while (partial not= \\x) d) r))))\n    lines (keys tps)))\n\n(defn- proc-event [tps lines event]\n  (if (= event \\.)\n    (proc tps lines)\n    (append lines event)))\n\n(defn solve [tps events]\n  (->> (reduce (partial proc-event tps)\n         (reduce #(assoc %1 %2 []) (sorted-map) (keys tps))\n         events)\n    (map (comp count second))\n    (interpose \",\")\n    (apply str)))\n\n(deftest solve-test\n  (are [i o] (= (solve {1 2, 2 7, 3 3, 4 5, 5 2} i) o)\n    \"42873x.3.\" \"0,4,2,0,0\"\n    \"1\" \"1,0,0,0,0\"\n    \".\" \"0,0,0,0,0\"\n    \"x\" \"1,0,0,0,0\"\n    \"31.\" \"1,0,0,0,0\"\n    \"3x.\" \"1,1,0,0,0\"\n    \"99569x\" \"9,9,6,6,9\"\n    \"99569x33\" \"9,9,9,9,9\"\n    \"99569x33.\" \"7,2,6,4,7\"\n    \"99569x33..\" \"5,0,4,0,5\"\n    \"12345x3333.\" \"4,0,3,2,3\"\n    \"54321x3333.\" \"3,0,3,0,4\"\n    \"51423x3333.\" \"3,4,4,0,4\"\n    \"12x34x.\" \"1,0,1,0,2\"\n    \"987x654x.32\" \"7,6,4,10,5\"\n    \"99999999999x99999999.......9.\" \"20,10,12,5,20\"\n    \"997\" \"9,9,7,0,0\"\n    \".3.9\" \"1,9,0,0,0\"\n    \"832.6\" \"6,6,0,0,0\"\n    \".5.568\" \"3,5,6,8,0\"\n    \"475..48\" \"4,8,0,0,0\"\n    \"7.2..469\" \"1,4,6,9,0\"\n    \"574x315.3\" \"3,3,1,7,1\"\n    \"5.2893.x98\" \"10,9,5,4,1\"\n    \"279.6xxx..4\" \"2,1,4,1,1\"\n    \"1.1.39..93.x\" \"7,1,0,0,0\"\n    \"7677749325927\" \"16,12,17,18,12\"\n    \"x6235.87.56.9.\" \"7,2,0,0,0\"\n    \"4.1168.6.197.6.\" \"0,0,3,0,0\"\n    \"2.8.547.25..19.6\" \"6,2,0,0,0\"\n    \".5.3x82x32.1829..\" \"5,0,5,0,7\"\n    \"x.1816..36.24.429.\" \"1,0,0,0,7\"\n    \"79.2.6.81x..26x31.1\" \"1,0,2,1,1\"\n    \"574296x6538984..5974\" \"14,13,10,15,14\"\n    \"99.6244.4376636..72.6\" \"5,6,0,0,3\"\n    \"1659.486x5637168278123\" \"17,16,16,18,17\"\n    \".5.17797.x626x5x9457.3.\" \"14,0,3,5,8\"\n    \"..58624.85623..4.7..23.x\" \"1,1,0,0,0\"\n    \"716.463.9.x.8..4.15.738x4\" \"7,3,5,8,1\"\n    \"22xx.191.96469472.7232377.\" \"10,11,18,12,9\"\n    \"24..4...343......4.41.6...2\" \"2,0,0,0,0\"\n    \"32732.474x153.866..4x29.2573\" \"7,5,7,8,5\"\n    \"786.1267x9937.17.15448.1x33.4\" \"4,4,8,4,10\"\n    \"671714849.149.686852.178.895x3\" \"13,16,13,10,12\"\n    \"86x.47.517..29621.61x937..xx935\" \"7,11,8,8,10\"\n    \".2233.78x.94.x59511.5.86x3.x714.\" \"4,6,10,8,8\"\n    \".793...218.687x415x13.1...x58576x\" \"8,11,8,6,9\"\n    \"6.6x37.3x51x932.72x4x33.9363.x7761\" \"15,13,15,12,15\"\n    \"6..4.x187..681.2x.2.713276.669x.252\" \"6,7,8,6,5\"\n    \".6.xx64..5146x897231.x.21265392x9775\" \"19,17,19,20,17\"\n    \"334.85413.263314.x.6293921x3.6357647x\" \"14,14,12,16,10\"\n    \"4.1..9..513.266..5999769852.2.38x79.x7\" \"12,10,13,6,10\"))\n\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\nClojure 1.6.0\nuser=> (ns ord18)\nnil\nord18=> (require 'ord18 :reload-all)\nnil\nord18=> (run-tests)\n\nTesting ord18\n\nRan 1 tests containing 52 assertions.\n0 failures, 0 errors.\n{:type :summary, :fail 0, :error 0, :pass 52, :test 1}\n\n\n\u89e3\u8aac\n\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u6c7a\u3081\u307e\u3059.\n\u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b\u306f, \u30ec\u30b8\u756a\u53f7\u3092\u30ad\u30fc, \u5404\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b\u3092\u5024\u3068\u3059\u308b\u30de\u30c3\u30d7\u3067\u53c2\u7167\u3059\u308b\u5f62\u5f0f\u306b\u3057\u307e\u3059.\n\u554f\u984c\u306e\u4f8b\u3067\u3042\u308c\u3070 {1 2, 2 7, 3 3, 4 5, 5 2} \u3067\u3059.\n\u3053\u308c\u306f\u95a2\u6570\u306e\u4e2d\u306b\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3057\u305f\u308a, \u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u3057\u3066\u76f4\u63a5\u53c2\u7167\u3057\u305f\u308a\u305b\u305a, \u5fc5\u8981\u306a\u6642\u306b\u5f15\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u308b\u3082\u306e\u3068\u3057\u307e\u3059.\n\u5168\u30ec\u30b8\u306e\u72b6\u614b\u306f, \u30ec\u30b8\u756a\u53f7\u3092\u30ad\u30fc, \u5404\u30ec\u30b8\u306e\u72b6\u614b\u3092\u5024\u3068\u3059\u308b\u30de\u30c3\u30d7\u3068\u3057\u307e\u3059.\n\u305f\u3060\u3057, \u30ad\u30fc\u306e\u6607\u9806\u306b\u6574\u5217\u3055\u308c\u305f\u72b6\u614b\u3092\u4fdd\u3064 sorted-map \u3092\u4f7f\u3044\u307e\u3059.\n\u5404\u30ec\u30b8\u306e\u72b6\u614b\u306f, \u4e26\u3093\u3067\u3044\u308b\u5ba2\u306e\u5217\u3092\u8868\u3059\u30d9\u30af\u30bf\u3068\u3057, \u5404\u8981\u7d20\u306f, \u666e\u901a (ordinary) \u306e\u5ba2 \\o \u304b, \u307e\u305f\u306f, \u30ec\u30b8\u306b\u7121\u9650\u5927\u306e\u8ca0\u8377\u3092\u304b\u3051\u308b\u5ba2 \\x \u306e\u3044\u305a\u308c\u304b\u3067\u3059.\n\u4f8b\u3048\u3070, 1~5\u756a\u306e\u30ec\u30b8\u304c\u3042\u3063\u305f\u6642\u306b, \"42873x\" \u306e\u5165\u529b\u304c\u3042\u3063\u305f\u5f8c\u306e\u72b6\u614b\u306f\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o \\x],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [\\o \\o \\o \\o \\o \\o \\o],\n 5 [\\o \\o \\o]}\n\n\u306e\u3088\u3046\u306b\u306a\u308b\u3082\u306e\u3068\u3057\u307e\u3059.\n\n(defn- append [lines customer]\n  (let [len (comp count second)\n        min-len (apply min (map len lines))\n        [k v] (first (filter #(= (len %) min-len) lines))]\n    (assoc lines k\n      (if (= customer \\x)\n        (conj v \\x)\n        (reduce conj v (repeat (Integer/parseInt (str customer)) \\o))))))\n\nappend \u306f, \u5168\u30ec\u30b8\u306e\u72b6\u614b lines \u304a\u3088\u3073, \u6765\u5ba2 customer \u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b, \u6765\u5ba2\u304c\u30ec\u30b8\u306b\u4e26\u3093\u3060\u5f8c\u306e\u72b6\u614b\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059.\n\u6765\u5ba2 customer \u306f, \u540c\u3058\u5217\u306b\u4e26\u3076\u666e\u901a\u306e\u5ba2\u306e\u4eba\u6570\u3092\u8868\u3059\u6570\u5b57, \u307e\u305f\u306f, \u7121\u9650\u306e\u8ca0\u8377\u3092\u6301\u3064\u5ba2 \\x \u306e\u3044\u305a\u308c\u304b\u3068\u3057\u307e\u3059.\n\n(let [len (comp count second)\n      min-len (apply min (map len lines))\n      [k v] (first (filter #(= (len %) min-len) lines))]\n  ...)\n\n\u5404\u30ec\u30b8\u306e\u5217\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\u95a2\u6570 len \u3092 (comp count second) \u3067\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059.\n\u6700\u77ed\u306e\u5217\u306e\u9577\u3055 min-len \u3092, (apply min (map len lines)) \u3067\u6c42\u3081\u307e\u3059.\n\u6700\u77ed\u306e\u5217\u306e\u9577\u3055\u3068\u540c\u3058\u9577\u3055\u306e\u5217\u3092\u6301\u3064\u30ec\u30b8\u3092 (filter #(= (len %) min-len) ...) \u3067\u629c\u304d\u51fa\u3057\u307e\u3059.\n\u3053\u306e\u6642, lines \u306f\u30ad\u30fc\u3067\u3042\u308b\u30ec\u30b8\u756a\u53f7\u306e\u6607\u9806\u3067\u6574\u5217\u6e08\u307f\u3067\u3042\u308b\u3068\u6c7a\u3081\u307e\u3057\u305f\u306e\u3067, filter \u3057\u305f\u5f8c\u306e\u6700\u521d\u306e\u30a8\u30f3\u30c8\u30ea (first ...) \u304c, \u6700\u77ed\u306e\u5217\u306e\u9577\u3055\u3068\u540c\u3058\u5217\u306e\u9577\u3055\u3092\u6301\u3064\u30ec\u30b8\u306e\u4e2d\u3067\u4e00\u756a\u82e5\u3044\u30ec\u30b8\u756a\u53f7\u306e\u30ec\u30b8, \u3059\u306a\u308f\u3061, \u6b21\u306b\u5ba2\u304c\u4e26\u3076\u30ec\u30b8\u3067\u3059.\n\u305d\u306e\u30ec\u30b8\u756a\u53f7\u3092 k \u306b, \u73fe\u5728\u306e\u305d\u306e\u30ec\u30b8\u306e\u72b6\u614b\u3092 v \u306b\u675f\u7e1b\u3057\u307e\u3059.\n\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\nuser=> (def lines (sorted-map 1 [\\o \\o \\o]\n                              2 [\\o \\o]\n                              3 [\\o \\o]\n                              4 [\\o \\o \\o \\o]))\n#'user/lines\n\nuser=> (def len (comp count second))\n#'user/len\n\nuser=> (apply min (map len lines))\n2\n\nuser=> (filter #(= (len %) 2) lines)\n([2 [\\o \\o]] [3 [\\o \\o]])\n\nuser=> (first '([2 [\\o \\o]] [3 [\\o \\o]]))\n[2 [\\o \\o]]\n\n\n\u6b21\u306b\u5ba2\u304c\u4e26\u3076\u3079\u304d\u30ec\u30b8\u306e\u30ec\u30b8\u756a\u53f7 k \u3068\u73fe\u5728\u306e\u305d\u306e\u30ec\u30b8\u306e\u72b6\u614b v \u304c\u5f97\u3089\u308c\u305f\u306e\u3067, \u5168\u30ec\u30b8\u306e\u72b6\u614b lines \u306b\u5bfe\u3057\u3066\n(assoc lines k \u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b)\n\n\u3092\u65b0\u3057\u3044\u5168\u30ec\u30b8\u306e\u72b6\u614b\u3068\u3057\u3066\u8fd4\u305b\u3070\u826f\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059.\n\u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b \u306e\u90e8\u5206\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059.\n(if (= customer \\x)\n  (conj v \\x)\n  (reduce conj v (repeat (Integer/parseInt (str customer)) \\o)))\n\n\u3059\u306a\u308f\u3061, customer \u304c\u7121\u9650\u306e\u8ca0\u8377\u3092\u6301\u3064\u5ba2 \\x \u3067\u3042\u308c\u3070, \u5217 v \u306e\u672b\u5c3e\u306b \\x \u3092\u8ffd\u52a0\u3057\u307e\u3059.\n\u305d\u3046\u3067\u306a\u3044\u5834\u5408, \u3064\u307e\u308a customer \u304c\u540c\u3058\u5217\u306b\u4e26\u3076\u666e\u901a\u306e\u5ba2\u306e\u4eba\u6570\u3092\u8868\u3059\u6570\u5b57\u306e\u5834\u5408, \u6570\u5b57\u3092\u6570\u5024\u306b\u76f4\u3057 (Integer/parseInt (str ...), \u305d\u306e\u6570\u3060\u3051\u306e\u666e\u901a\u306e\u5ba2 \\o \u306e\u30b7\u30fc\u30b1\u30f3\u30b9 (repeat ... \\o) \u3092 v \u306b\u8ffd\u52a0\u3057\u307e\u3059.\n\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\nuser=> (conj [\\o \\o] \\x)\n[\\o \\o \\x]\n\nuser=> (repeat (Integer/parseInt (str \\4)) \\o)\n(\\o \\o \\o \\o)\n\nuser=> (reduce conj [\\o \\o] '(\\o \\o \\o \\o))\n[\\o \\o \\o \\o \\o \\o]\n\n\nappend \u95a2\u6570\u306e\u6a5f\u80fd\u3059\u308b\u69d8\u5b50\u3067\u3059. \u51fa\u529b\u306f\u6574\u5f62\u3057\u3066\u3044\u307e\u3059. *1 \u306f\u76f4\u524d\u306e\u5f0f\u306e\u8fd4\u308a\u5024\u3067\u3059.\nord18=> (append (sorted-map 1 [] 2 [] 3 [] 4 [] 5 []) \\4)\n{1 [\\o \\o \\o \\o],\n 2 [],\n 3 [],\n 4 [],\n 5 []}\n\nord18=> (append *1 \\2)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o],\n 3 [],\n 4 [],\n 5 []}\n\nord18=> (append *1 \\8)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [],\n 5 []}\n\nord18=> (append *1 \\7)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [\\o \\o \\o \\o \\o \\o \\o],\n 5 []}\n\nord18=> (append *1 \\3)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [\\o \\o \\o \\o \\o \\o \\o],\n 5 [\\o \\o \\o]}\n\nord18=> (append *1 \\x)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o \\x],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [\\o \\o \\o \\o \\o \\o \\o],\n 5 [\\o \\o \\o]}\n\n\n(defn- proc [tps lines]\n  (reduce #(assoc %1 %2\n             (let [[d r] (split-at (tps %2) (%1 %2))]\n               (vec (concat (drop-while (partial not= \\x) d) r))))\n    lines (keys tps)))\n\nproc \u306f, \u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b tps \u3068\u5168\u30ec\u30b8\u306e\u72b6\u614b lines \u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u306b, \u5404\u30ec\u30b8\u304c\u305d\u308c\u305e\u308c\u306e\u51e6\u7406\u80fd\u529b\u306b\u3088\u3063\u3066, \u5358\u4f4d\u6642\u9593\u3060\u3051\u5ba2\u3092\u51e6\u7406\u3057\u305f\u5f8c\u306e, \u5168\u30ec\u30b8\u306e\u72b6\u614b\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059.\n\u3053\u308c\u306f,\n(reduce #(assoc %1 %2 \u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b)\n  lines\n  (keys tps))\n\n\u3068\u3044\u3046\u69cb\u9020\u3092\u3057\u3066\u3044\u307e\u3059.\n\u4e0e\u3048\u3089\u308c\u305f\u5168\u30ec\u30b8\u306e\u72b6\u614b lines \u3092\u521d\u671f\u5024\u3068\u3057\u3066, \u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b tps \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u30ec\u30b8\u756a\u53f7 (keys tps) \u306b\u3064\u3044\u3066, \u5404\u30ec\u30b8\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3057\u307e\u3059.\nreduce \u3067\u306e\u51e6\u7406\u4e2d\u306f, %1 \u306b\u524d\u306e\u30ec\u30b8\u307e\u3067\u66f4\u65b0\u3057\u305f\u5f8c\u306e\u5168\u30ec\u30b8\u306e\u72b6\u614b, %2 \u306b\u6b21\u306b\u66f4\u65b0\u3059\u3079\u304d\u30ec\u30b8\u306e\u30ec\u30b8\u756a\u53f7\u304c\u5165\u3063\u3066\u304a\u308a, #(assoc %1 %2 \u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b) \u3067\u5404\u30ec\u30b8\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3057\u307e\u3059.\n\u5404\u30ec\u30b8\u306e \u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b \u306e\u90e8\u5206\u306f\n(let [[d r] (split-at (tps %2) (%1 %2))]\n  (vec (concat (drop-while (partial not= \\x) d) r))))\n\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059.\n%2 \u756a\u30ec\u30b8\u306e\u72b6\u614b (%1 %2) \u306e\u5148\u982d\u304b\u3089, %2 \u756a\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b (tps %2) \u306e\u6570\u3060\u3051\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u305f\u5217 d \u3068, \u6b8b\u308a\u306e\u5217 r \u306b\u3064\u3044\u3066,\nd \u306e\u5148\u982d\u304b\u3089\u8981\u7d20 \\x \u304c\u73fe\u308c\u308b\u307e\u3067\u5168\u3066\u524a\u9664\u3057\u305f\u3082\u306e (drop-while (partial not= \\x) d) \u3068,\nr \u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u3067\u3059.\n\u3053\u306e\u90e8\u5206\u306f, \u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\nuser=> (def tps {1 2, 2 3}) ; 1\u756a\u30ec\u30b8\u306f\u5358\u4f4d\u6642\u9593\u306b2\u4eba, 2\u756a\u30ec\u30b8\u306f\u5358\u4f4d\u6642\u9593\u306b3\u4eba\u51e6\u7406\u3067\u304d\u308b\u3068\u3059\u308b.\n#'user/tps\n\nuser=> (def lines {1 [\\o \\o \\o \\o \\o], 2 [\\o \\x \\o \\o]}) ; 1\u756a\u30ec\u30b8\u306b\u666e\u901a\u306e\u5ba2 5\u4eba, 2\u756a\u30ec\u30b8\u306f \\x \u3092\u542b\u3080 4\u4eba\u304c\u4e26\u3093\u3067\u3044\u308b\n#'user/lines\n\nuser=> (split-at (tps 1) (lines 1)) ; 1\u756a\u30ec\u30b8\u306f 2\u4eba\u51e6\u7406\u3067\u304d\u308b\u306e\u3067, \u6700\u521d\u306e 2\u4eba\u3068\u6b8b\u308a 3\u4eba\u3092\u5206\u3051\u308b.\n[(\\o \\o) (\\o \\o \\o)]\n\nuser=> (drop-while (partial not= \\x) '(\\o \\o)) ; \\x \u304c\u73fe\u308c\u306a\u3044\u306e\u3067 2\u4eba\u3068\u3082\u51e6\u7406\u3067\u304d\u305f.\n()\n\nuser=> (vec (concat '() '(\\o \\o \\o))) ; 2\u4eba\u51e6\u7406\u3057\u305f\u5f8c\u306e\u7a7a\u306e\u5217\u3068, \u6b8b\u308a 3\u4eba\u306e\u5217\u3092\u9023\u7d50\u3057\u305f\u306e\u304c\u6b21\u306e\u72b6\u614b\n[\\o \\o \\o]\n\nuser=> (split-at (tps 2) (lines 2)) ; 2\u756a\u30ec\u30b8\u306f 3\u4eba\u51e6\u7406\u3067\u304d\u308b\u306e\u3067, \u6700\u521d\u306e 3\u4eba\u3068\u6b8b\u308a 1\u4eba\u3092\u5206\u3051\u308b.\n[(\\o \\x \\o) (\\o)]\n\nuser=> (drop-while (partial not= \\x) '(\\o \\x \\o)) ; \u51e6\u7406\u80fd\u529b\u306e\u4eba\u6570\u4ee5\u5185\u3067\u3082 \\x \u304c\u73fe\u308c\u305f\u3089\u51e6\u7406\u306f\u6b62\u307e\u308b.\n(\\x \\o)\n\nuser=> (vec (concat '(\\x \\o) '(\\o))) ; \u6b8b\u308a\u306e\u5217\u3068\u9023\u7d50\u3057\u305f\u306e\u304c\u6b21\u306e\u72b6\u614b.\n[\\x \\o \\o]\n\n\nproc \u95a2\u6570\u5168\u4f53\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\nord18=> (def tps {1 2, 2 7, 3 3, 4 5, 5 2})\n#'ord18/tps\n\nord18=> (proc tps (sorted-map 1 [\\o \\o \\o \\o],\n                              2 [\\o \\o \\x],\n                              3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n                              4 [\\o \\o \\o \\o \\o \\o \\o],\n                              5 [\\o \\o \\o]))\n{1 [\\o \\o],\n 2 [\\x],\n 3 [\\o \\o \\o \\o \\o],\n 4 [\\o \\o],\n 5 [\\o]}\n\n\n(defn- proc-event [tps lines event]\n  (if (= event \\.)\n    (proc tps lines)\n    (append lines event)))\n\nproc-event \u306f, \u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b tps, \u5168\u30ec\u30b8\u306e\u72b6\u614b lines, \u30a4\u30d9\u30f3\u30c8 event \u3092\u4e0e\u3048\u308b\u3068, \u6b21\u306e\u5168\u30ec\u30b8\u306e\u72b6\u614b\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059.\n\u30a4\u30d9\u30f3\u30c8 event \u306f, \u5358\u4f4d\u6642\u9593\u306e\u6d88\u8cbb \\. \u307e\u305f\u306f\u6765\u5ba2 (\\x \u307e\u305f\u306f\u6570\u5b57) \u306e\u3044\u305a\u308c\u304b\u3067\u3059.\n\u305d\u308c\u305e\u308c\u306e\u5834\u5408\u3067, \u5404\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b\u3067\u5217\u3092\u51e6\u7406\u3059\u308b proc, \u6765\u5ba2\u3092\u5217\u306b\u8ffd\u52a0\u3059\u308b append \u3092\u547c\u3073\u51fa\u3057\u307e\u3059.\n\n(defn solve [tps events]\n  (->> (reduce (partial proc-event tps)\n         (reduce #(assoc %1 %2 []) (sorted-map) (keys tps))\n         events)\n    (map (comp count second))\n    (interpose \",\")\n    (apply str)))\n\n\u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b tps \u306e\u3068\u304d, \u30b7\u30fc\u30b1\u30f3\u30b9 events \u306b\u4e0e\u3048\u3089\u308c\u308b\u5168\u3066\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3057\u305f\u5f8c\u306e\u72b6\u614b\u306f\n(reduce (partial proc-event tps)\n  \u5168\u30ec\u30b8\u306e\u521d\u671f\u72b6\u614b\n  events)\n\n\u3068\u306a\u308a\u307e\u3059.\n\u5168\u30ec\u30b8\u306e\u521d\u671f\u72b6\u614b\u306f, \u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u30ec\u30b8\u756a\u53f7\u306b\u3064\u3044\u3066, \u30ec\u30b8\u756a\u53f7\u3092\u30ad\u30fc\u3068\u3057, \u5404\u30ec\u30b8\u306e\u521d\u671f\u72b6\u614b [] \u3092\u5024\u306b\u3082\u3064\u6574\u5217\u6e08\u307f\u30de\u30c3\u30d7\n(reduce #(assoc %1 %2 []) (sorted-map) (keys tps))\n\n\u3067\u3059.\n\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\nuser=> (reduce #(assoc %1 %2 []) (sorted-map) (keys {1 2, 2 7, 3 3, 4 5, 5 2}))\n{1 [], 2 [], 3 [], 4 [], 5 []}\n\n\n\u89e3\u7b54\u3067\u306f reduce \u3067\u6700\u7d42\u72b6\u614b\u306e\u307f\u3092\u5f97\u307e\u3059\u304c, (partial proc-event tps) \u306e\u6a5f\u80fd\u3092\u898b\u308b\u305f\u3081\u306b,\nreductions \u3067\u9014\u4e2d\u306e\u72b6\u614b\u306e\u5909\u5316\u3092\u5168\u3066\u898b\u308b\u4f8b\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059.\nord18=> (def tps {1 2, 2 7, 3 3, 4 5, 5 2})\n#'ord18/tps\n\nord18=> (reduce #(assoc %1 %2 []) (sorted-map) (keys tps))\n{1 [], 2 [], 3 [], 4 [], 5 []}\n\nord18=> (def init *1)\n#'ord18/init\n\nord18=> (require '[clojure.pprint :refer :all])\nnil\n\nord18=> (pprint (reductions (partial proc-event tps) init \"42873x.3.\"))\n({1 [], 2 [], 3 [], 4 [], 5 []}\n {1 [\\o \\o \\o \\o], 2 [], 3 [], 4 [], 5 []}\n {1 [\\o \\o \\o \\o], 2 [\\o \\o], 3 [], 4 [], 5 []}\n {1 [\\o \\o \\o \\o], 2 [\\o \\o], 3 [\\o \\o \\o \\o \\o \\o \\o \\o], 4 [], 5 []}\n {1 [\\o \\o \\o \\o],\n  2 [\\o \\o],\n  3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n  4 [\\o \\o \\o \\o \\o \\o \\o],\n  5 []}\n {1 [\\o \\o \\o \\o],\n  2 [\\o \\o],\n  3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n  4 [\\o \\o \\o \\o \\o \\o \\o],\n  5 [\\o \\o \\o]}\n {1 [\\o \\o \\o \\o],\n  2 [\\o \\o \\x],\n  3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n  4 [\\o \\o \\o \\o \\o \\o \\o],\n  5 [\\o \\o \\o]}\n {1 [\\o \\o], 2 [\\x], 3 [\\o \\o \\o \\o \\o], 4 [\\o \\o], 5 [\\o]}\n {1 [\\o \\o], 2 [\\x \\o \\o \\o], 3 [\\o \\o \\o \\o \\o], 4 [\\o \\o], 5 [\\o]}\n {1 [], 2 [\\x \\o \\o \\o], 3 [\\o \\o], 4 [], 5 []})\nnil\n\n\n(->> ...\n  (map (comp count second))\n  (interpose \",\")\n  (apply str))\n\n\u6700\u5f8c\u306e\u5168\u30ec\u30b8\u306e\u72b6\u614b\u304b\u3089, \u5404\u30ec\u30b8\u306e\u5217\u306e\u9577\u3055\u3092\u629c\u304d\u51fa\u3057, \",\" \u3092\u631f\u3093\u3067\u6587\u5b57\u5217\u5316\u3057\u3066\u51fa\u529b\u3068\u3057\u307e\u3059.\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\nuser=> (->> (sorted-map 1 [] 2 [\\x \\o \\o \\o] 3 [\\o \\o] 4 [] 5 [])\n         (map (comp count second))\n         (interpose \",\")\n         (apply str))\n\"0,4,2,0,0\"\n\n## \u554f\u984c\u3068\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\n\n\u554f\u984c: [\u30d5\u30a9\u30fc\u30af\u3058\u3083\u306a\u3044 \u301c \u6a2a\u3078\u306a 2014.2.1 \u554f\u984c](http://nabetani.sakura.ne.jp/hena/ord18notfork/)\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54: [\u7b2c18\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u554f\u984c](http://qiita.com/Nabetani/items/ad47666c2f2f44ada1e7)\n\n## \u79c1\u306e\u89e3\u7b54 in Clojure\n\n```clojure:ord18.clj\n(ns ord18\n  (:require [clojure.test :refer (deftest are run-tests)]))\n\n(defn- append [lines customer]\n  (let [len (comp count second)\n        min-len (apply min (map len lines))\n        [k v] (first (filter #(= (len %) min-len) lines))]\n    (assoc lines k\n      (if (= customer \\x)\n        (conj v \\x)\n        (reduce conj v (repeat (Integer/parseInt (str customer)) \\o))))))\n\n(defn- proc [tps lines]\n  (reduce #(assoc %1 %2\n             (let [[d r] (split-at (tps %2) (%1 %2))]\n               (vec (concat (drop-while (partial not= \\x) d) r))))\n    lines (keys tps)))\n\n(defn- proc-event [tps lines event]\n  (if (= event \\.)\n    (proc tps lines)\n    (append lines event)))\n\n(defn solve [tps events]\n  (->> (reduce (partial proc-event tps)\n         (reduce #(assoc %1 %2 []) (sorted-map) (keys tps))\n         events)\n    (map (comp count second))\n    (interpose \",\")\n    (apply str)))\n\n(deftest solve-test\n  (are [i o] (= (solve {1 2, 2 7, 3 3, 4 5, 5 2} i) o)\n    \"42873x.3.\" \"0,4,2,0,0\"\n    \"1\" \"1,0,0,0,0\"\n    \".\" \"0,0,0,0,0\"\n    \"x\" \"1,0,0,0,0\"\n    \"31.\" \"1,0,0,0,0\"\n    \"3x.\" \"1,1,0,0,0\"\n    \"99569x\" \"9,9,6,6,9\"\n    \"99569x33\" \"9,9,9,9,9\"\n    \"99569x33.\" \"7,2,6,4,7\"\n    \"99569x33..\" \"5,0,4,0,5\"\n    \"12345x3333.\" \"4,0,3,2,3\"\n    \"54321x3333.\" \"3,0,3,0,4\"\n    \"51423x3333.\" \"3,4,4,0,4\"\n    \"12x34x.\" \"1,0,1,0,2\"\n    \"987x654x.32\" \"7,6,4,10,5\"\n    \"99999999999x99999999.......9.\" \"20,10,12,5,20\"\n    \"997\" \"9,9,7,0,0\"\n    \".3.9\" \"1,9,0,0,0\"\n    \"832.6\" \"6,6,0,0,0\"\n    \".5.568\" \"3,5,6,8,0\"\n    \"475..48\" \"4,8,0,0,0\"\n    \"7.2..469\" \"1,4,6,9,0\"\n    \"574x315.3\" \"3,3,1,7,1\"\n    \"5.2893.x98\" \"10,9,5,4,1\"\n    \"279.6xxx..4\" \"2,1,4,1,1\"\n    \"1.1.39..93.x\" \"7,1,0,0,0\"\n    \"7677749325927\" \"16,12,17,18,12\"\n    \"x6235.87.56.9.\" \"7,2,0,0,0\"\n    \"4.1168.6.197.6.\" \"0,0,3,0,0\"\n    \"2.8.547.25..19.6\" \"6,2,0,0,0\"\n    \".5.3x82x32.1829..\" \"5,0,5,0,7\"\n    \"x.1816..36.24.429.\" \"1,0,0,0,7\"\n    \"79.2.6.81x..26x31.1\" \"1,0,2,1,1\"\n    \"574296x6538984..5974\" \"14,13,10,15,14\"\n    \"99.6244.4376636..72.6\" \"5,6,0,0,3\"\n    \"1659.486x5637168278123\" \"17,16,16,18,17\"\n    \".5.17797.x626x5x9457.3.\" \"14,0,3,5,8\"\n    \"..58624.85623..4.7..23.x\" \"1,1,0,0,0\"\n    \"716.463.9.x.8..4.15.738x4\" \"7,3,5,8,1\"\n    \"22xx.191.96469472.7232377.\" \"10,11,18,12,9\"\n    \"24..4...343......4.41.6...2\" \"2,0,0,0,0\"\n    \"32732.474x153.866..4x29.2573\" \"7,5,7,8,5\"\n    \"786.1267x9937.17.15448.1x33.4\" \"4,4,8,4,10\"\n    \"671714849.149.686852.178.895x3\" \"13,16,13,10,12\"\n    \"86x.47.517..29621.61x937..xx935\" \"7,11,8,8,10\"\n    \".2233.78x.94.x59511.5.86x3.x714.\" \"4,6,10,8,8\"\n    \".793...218.687x415x13.1...x58576x\" \"8,11,8,6,9\"\n    \"6.6x37.3x51x932.72x4x33.9363.x7761\" \"15,13,15,12,15\"\n    \"6..4.x187..681.2x.2.713276.669x.252\" \"6,7,8,6,5\"\n    \".6.xx64..5146x897231.x.21265392x9775\" \"19,17,19,20,17\"\n    \"334.85413.263314.x.6293921x3.6357647x\" \"14,14,12,16,10\"\n    \"4.1..9..513.266..5999769852.2.38x79.x7\" \"12,10,13,6,10\"))\n```\n\n## \u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n\n```clojure\nClojure 1.6.0\nuser=> (ns ord18)\nnil\nord18=> (require 'ord18 :reload-all)\nnil\nord18=> (run-tests)\n\nTesting ord18\n\nRan 1 tests containing 52 assertions.\n0 failures, 0 errors.\n{:type :summary, :fail 0, :error 0, :pass 52, :test 1}\n```\n\n## \u89e3\u8aac\n\n\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u6c7a\u3081\u307e\u3059.\n\n**\u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b**\u306f, \u30ec\u30b8\u756a\u53f7\u3092\u30ad\u30fc, \u5404\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b\u3092\u5024\u3068\u3059\u308b\u30de\u30c3\u30d7\u3067\u53c2\u7167\u3059\u308b\u5f62\u5f0f\u306b\u3057\u307e\u3059.\n\u554f\u984c\u306e\u4f8b\u3067\u3042\u308c\u3070 `{1 2, 2 7, 3 3, 4 5, 5 2}` \u3067\u3059.\n\u3053\u308c\u306f\u95a2\u6570\u306e\u4e2d\u306b\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3057\u305f\u308a, \u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u3057\u3066\u76f4\u63a5\u53c2\u7167\u3057\u305f\u308a\u305b\u305a, \u5fc5\u8981\u306a\u6642\u306b\u5f15\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u308b\u3082\u306e\u3068\u3057\u307e\u3059.\n\n**\u5168\u30ec\u30b8\u306e\u72b6\u614b**\u306f, \u30ec\u30b8\u756a\u53f7\u3092\u30ad\u30fc, \u5404\u30ec\u30b8\u306e\u72b6\u614b\u3092\u5024\u3068\u3059\u308b\u30de\u30c3\u30d7\u3068\u3057\u307e\u3059.\n\u305f\u3060\u3057, \u30ad\u30fc\u306e\u6607\u9806\u306b\u6574\u5217\u3055\u308c\u305f\u72b6\u614b\u3092\u4fdd\u3064 `sorted-map` \u3092\u4f7f\u3044\u307e\u3059.\n**\u5404\u30ec\u30b8\u306e\u72b6\u614b**\u306f, \u4e26\u3093\u3067\u3044\u308b\u5ba2\u306e\u5217\u3092\u8868\u3059\u30d9\u30af\u30bf\u3068\u3057, \u5404\u8981\u7d20\u306f, \u666e\u901a (ordinary) \u306e\u5ba2 `\\o` \u304b, \u307e\u305f\u306f, \u30ec\u30b8\u306b\u7121\u9650\u5927\u306e\u8ca0\u8377\u3092\u304b\u3051\u308b\u5ba2 `\\x` \u306e\u3044\u305a\u308c\u304b\u3067\u3059.\n\n\u4f8b\u3048\u3070, 1~5\u756a\u306e\u30ec\u30b8\u304c\u3042\u3063\u305f\u6642\u306b, \"42873x\" \u306e\u5165\u529b\u304c\u3042\u3063\u305f\u5f8c\u306e\u72b6\u614b\u306f\n\n```clojure\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o \\x],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [\\o \\o \\o \\o \\o \\o \\o],\n 5 [\\o \\o \\o]}\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308b\u3082\u306e\u3068\u3057\u307e\u3059.\n\n---\n\n```clojure\n(defn- append [lines customer]\n  (let [len (comp count second)\n        min-len (apply min (map len lines))\n        [k v] (first (filter #(= (len %) min-len) lines))]\n    (assoc lines k\n      (if (= customer \\x)\n        (conj v \\x)\n        (reduce conj v (repeat (Integer/parseInt (str customer)) \\o))))))\n```\n\n`append` \u306f, \u5168\u30ec\u30b8\u306e\u72b6\u614b `lines` \u304a\u3088\u3073, \u6765\u5ba2 `customer` \u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b, \u6765\u5ba2\u304c\u30ec\u30b8\u306b\u4e26\u3093\u3060\u5f8c\u306e\u72b6\u614b\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059.\n\u6765\u5ba2 `customer` \u306f, \u540c\u3058\u5217\u306b\u4e26\u3076\u666e\u901a\u306e\u5ba2\u306e\u4eba\u6570\u3092\u8868\u3059\u6570\u5b57, \u307e\u305f\u306f, \u7121\u9650\u306e\u8ca0\u8377\u3092\u6301\u3064\u5ba2 `\\x` \u306e\u3044\u305a\u308c\u304b\u3068\u3057\u307e\u3059.\n\n---\n\n```clojure\n(let [len (comp count second)\n      min-len (apply min (map len lines))\n      [k v] (first (filter #(= (len %) min-len) lines))]\n  ...)\n```\n\n\u5404\u30ec\u30b8\u306e\u5217\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\u95a2\u6570 `len` \u3092 `(comp count second)` \u3067\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059.\n\u6700\u77ed\u306e\u5217\u306e\u9577\u3055 `min-len` \u3092, `(apply min (map len lines))` \u3067\u6c42\u3081\u307e\u3059.\n\u6700\u77ed\u306e\u5217\u306e\u9577\u3055\u3068\u540c\u3058\u9577\u3055\u306e\u5217\u3092\u6301\u3064\u30ec\u30b8\u3092 `(filter #(= (len %) min-len) ...)` \u3067\u629c\u304d\u51fa\u3057\u307e\u3059.\n\u3053\u306e\u6642, `lines` \u306f\u30ad\u30fc\u3067\u3042\u308b\u30ec\u30b8\u756a\u53f7\u306e\u6607\u9806\u3067\u6574\u5217\u6e08\u307f\u3067\u3042\u308b\u3068\u6c7a\u3081\u307e\u3057\u305f\u306e\u3067, `filter` \u3057\u305f\u5f8c\u306e\u6700\u521d\u306e\u30a8\u30f3\u30c8\u30ea `(first ...)` \u304c, \u6700\u77ed\u306e\u5217\u306e\u9577\u3055\u3068\u540c\u3058\u5217\u306e\u9577\u3055\u3092\u6301\u3064\u30ec\u30b8\u306e\u4e2d\u3067\u4e00\u756a\u82e5\u3044\u30ec\u30b8\u756a\u53f7\u306e\u30ec\u30b8, \u3059\u306a\u308f\u3061, \u6b21\u306b\u5ba2\u304c\u4e26\u3076\u30ec\u30b8\u3067\u3059.\n\u305d\u306e\u30ec\u30b8\u756a\u53f7\u3092 `k` \u306b, \u73fe\u5728\u306e\u305d\u306e\u30ec\u30b8\u306e\u72b6\u614b\u3092 `v` \u306b\u675f\u7e1b\u3057\u307e\u3059.\n\n\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\n\n```clojure\nuser=> (def lines (sorted-map 1 [\\o \\o \\o]\n                              2 [\\o \\o]\n                              3 [\\o \\o]\n                              4 [\\o \\o \\o \\o]))\n#'user/lines\n\nuser=> (def len (comp count second))\n#'user/len\n\nuser=> (apply min (map len lines))\n2\n\nuser=> (filter #(= (len %) 2) lines)\n([2 [\\o \\o]] [3 [\\o \\o]])\n\nuser=> (first '([2 [\\o \\o]] [3 [\\o \\o]]))\n[2 [\\o \\o]]\n```\n\n---\n\n\u6b21\u306b\u5ba2\u304c\u4e26\u3076\u3079\u304d\u30ec\u30b8\u306e\u30ec\u30b8\u756a\u53f7 `k` \u3068\u73fe\u5728\u306e\u305d\u306e\u30ec\u30b8\u306e\u72b6\u614b `v` \u304c\u5f97\u3089\u308c\u305f\u306e\u3067, \u5168\u30ec\u30b8\u306e\u72b6\u614b `lines` \u306b\u5bfe\u3057\u3066\n\n```clojure\n(assoc lines k \u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b)\n```\n\n\u3092\u65b0\u3057\u3044\u5168\u30ec\u30b8\u306e\u72b6\u614b\u3068\u3057\u3066\u8fd4\u305b\u3070\u826f\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059.\n\n`\u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b` \u306e\u90e8\u5206\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059.\n\n```clojure\n(if (= customer \\x)\n  (conj v \\x)\n  (reduce conj v (repeat (Integer/parseInt (str customer)) \\o)))\n```\n\n\u3059\u306a\u308f\u3061, `customer` \u304c\u7121\u9650\u306e\u8ca0\u8377\u3092\u6301\u3064\u5ba2 `\\x` \u3067\u3042\u308c\u3070, \u5217 `v` \u306e\u672b\u5c3e\u306b `\\x` \u3092\u8ffd\u52a0\u3057\u307e\u3059.\n\u305d\u3046\u3067\u306a\u3044\u5834\u5408, \u3064\u307e\u308a `customer` \u304c\u540c\u3058\u5217\u306b\u4e26\u3076\u666e\u901a\u306e\u5ba2\u306e\u4eba\u6570\u3092\u8868\u3059\u6570\u5b57\u306e\u5834\u5408, \u6570\u5b57\u3092\u6570\u5024\u306b\u76f4\u3057 `(Integer/parseInt (str ...)`, \u305d\u306e\u6570\u3060\u3051\u306e\u666e\u901a\u306e\u5ba2 `\\o` \u306e\u30b7\u30fc\u30b1\u30f3\u30b9 `(repeat ... \\o)` \u3092 `v` \u306b\u8ffd\u52a0\u3057\u307e\u3059.\n\n\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\n\n```clojure\nuser=> (conj [\\o \\o] \\x)\n[\\o \\o \\x]\n\nuser=> (repeat (Integer/parseInt (str \\4)) \\o)\n(\\o \\o \\o \\o)\n\nuser=> (reduce conj [\\o \\o] '(\\o \\o \\o \\o))\n[\\o \\o \\o \\o \\o \\o]\n```\n\n---\n\n`append` \u95a2\u6570\u306e\u6a5f\u80fd\u3059\u308b\u69d8\u5b50\u3067\u3059. \u51fa\u529b\u306f\u6574\u5f62\u3057\u3066\u3044\u307e\u3059. `*1` \u306f\u76f4\u524d\u306e\u5f0f\u306e\u8fd4\u308a\u5024\u3067\u3059.\n\n```clojure\nord18=> (append (sorted-map 1 [] 2 [] 3 [] 4 [] 5 []) \\4)\n{1 [\\o \\o \\o \\o],\n 2 [],\n 3 [],\n 4 [],\n 5 []}\n\nord18=> (append *1 \\2)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o],\n 3 [],\n 4 [],\n 5 []}\n\nord18=> (append *1 \\8)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [],\n 5 []}\n\nord18=> (append *1 \\7)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [\\o \\o \\o \\o \\o \\o \\o],\n 5 []}\n\nord18=> (append *1 \\3)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [\\o \\o \\o \\o \\o \\o \\o],\n 5 [\\o \\o \\o]}\n\nord18=> (append *1 \\x)\n{1 [\\o \\o \\o \\o],\n 2 [\\o \\o \\x],\n 3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n 4 [\\o \\o \\o \\o \\o \\o \\o],\n 5 [\\o \\o \\o]}\n```\n\n---\n\n```clojure\n(defn- proc [tps lines]\n  (reduce #(assoc %1 %2\n             (let [[d r] (split-at (tps %2) (%1 %2))]\n               (vec (concat (drop-while (partial not= \\x) d) r))))\n    lines (keys tps)))\n```\n\n`proc` \u306f, \u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b `tps` \u3068\u5168\u30ec\u30b8\u306e\u72b6\u614b `lines` \u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u306b, \u5404\u30ec\u30b8\u304c\u305d\u308c\u305e\u308c\u306e\u51e6\u7406\u80fd\u529b\u306b\u3088\u3063\u3066, \u5358\u4f4d\u6642\u9593\u3060\u3051\u5ba2\u3092\u51e6\u7406\u3057\u305f\u5f8c\u306e, \u5168\u30ec\u30b8\u306e\u72b6\u614b\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059.\n\u3053\u308c\u306f,\n\n```clojure\n(reduce #(assoc %1 %2 \u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b)\n  lines\n  (keys tps))\n```\n\n\u3068\u3044\u3046\u69cb\u9020\u3092\u3057\u3066\u3044\u307e\u3059.\n\u4e0e\u3048\u3089\u308c\u305f\u5168\u30ec\u30b8\u306e\u72b6\u614b `lines` \u3092\u521d\u671f\u5024\u3068\u3057\u3066, \u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b `tps` \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u30ec\u30b8\u756a\u53f7 `(keys tps)` \u306b\u3064\u3044\u3066, \u5404\u30ec\u30b8\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3057\u307e\u3059.\n`reduce` \u3067\u306e\u51e6\u7406\u4e2d\u306f, `%1` \u306b\u524d\u306e\u30ec\u30b8\u307e\u3067\u66f4\u65b0\u3057\u305f\u5f8c\u306e\u5168\u30ec\u30b8\u306e\u72b6\u614b, `%2` \u306b\u6b21\u306b\u66f4\u65b0\u3059\u3079\u304d\u30ec\u30b8\u306e\u30ec\u30b8\u756a\u53f7\u304c\u5165\u3063\u3066\u304a\u308a, `#(assoc %1 %2 \u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b)` \u3067\u5404\u30ec\u30b8\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3057\u307e\u3059.\n\n\u5404\u30ec\u30b8\u306e `\u65b0\u3057\u3044\u30ec\u30b8\u306e\u72b6\u614b` \u306e\u90e8\u5206\u306f\n\n```clojure\n(let [[d r] (split-at (tps %2) (%1 %2))]\n  (vec (concat (drop-while (partial not= \\x) d) r))))\n```\n\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059.\n`%2` \u756a\u30ec\u30b8\u306e\u72b6\u614b `(%1 %2)` \u306e\u5148\u982d\u304b\u3089, `%2` \u756a\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b `(tps %2)` \u306e\u6570\u3060\u3051\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u305f\u5217 `d` \u3068, \u6b8b\u308a\u306e\u5217 `r` \u306b\u3064\u3044\u3066,\n`d` \u306e\u5148\u982d\u304b\u3089\u8981\u7d20 `\\x` \u304c\u73fe\u308c\u308b\u307e\u3067\u5168\u3066\u524a\u9664\u3057\u305f\u3082\u306e `(drop-while (partial not= \\x) d)` \u3068,\n`r` \u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u3067\u3059.\n\n\u3053\u306e\u90e8\u5206\u306f, \u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\n\n```clojure\nuser=> (def tps {1 2, 2 3}) ; 1\u756a\u30ec\u30b8\u306f\u5358\u4f4d\u6642\u9593\u306b2\u4eba, 2\u756a\u30ec\u30b8\u306f\u5358\u4f4d\u6642\u9593\u306b3\u4eba\u51e6\u7406\u3067\u304d\u308b\u3068\u3059\u308b.\n#'user/tps\n\nuser=> (def lines {1 [\\o \\o \\o \\o \\o], 2 [\\o \\x \\o \\o]}) ; 1\u756a\u30ec\u30b8\u306b\u666e\u901a\u306e\u5ba2 5\u4eba, 2\u756a\u30ec\u30b8\u306f \\x \u3092\u542b\u3080 4\u4eba\u304c\u4e26\u3093\u3067\u3044\u308b\n#'user/lines\n\nuser=> (split-at (tps 1) (lines 1)) ; 1\u756a\u30ec\u30b8\u306f 2\u4eba\u51e6\u7406\u3067\u304d\u308b\u306e\u3067, \u6700\u521d\u306e 2\u4eba\u3068\u6b8b\u308a 3\u4eba\u3092\u5206\u3051\u308b.\n[(\\o \\o) (\\o \\o \\o)]\n\nuser=> (drop-while (partial not= \\x) '(\\o \\o)) ; \\x \u304c\u73fe\u308c\u306a\u3044\u306e\u3067 2\u4eba\u3068\u3082\u51e6\u7406\u3067\u304d\u305f.\n()\n\nuser=> (vec (concat '() '(\\o \\o \\o))) ; 2\u4eba\u51e6\u7406\u3057\u305f\u5f8c\u306e\u7a7a\u306e\u5217\u3068, \u6b8b\u308a 3\u4eba\u306e\u5217\u3092\u9023\u7d50\u3057\u305f\u306e\u304c\u6b21\u306e\u72b6\u614b\n[\\o \\o \\o]\n\nuser=> (split-at (tps 2) (lines 2)) ; 2\u756a\u30ec\u30b8\u306f 3\u4eba\u51e6\u7406\u3067\u304d\u308b\u306e\u3067, \u6700\u521d\u306e 3\u4eba\u3068\u6b8b\u308a 1\u4eba\u3092\u5206\u3051\u308b.\n[(\\o \\x \\o) (\\o)]\n\nuser=> (drop-while (partial not= \\x) '(\\o \\x \\o)) ; \u51e6\u7406\u80fd\u529b\u306e\u4eba\u6570\u4ee5\u5185\u3067\u3082 \\x \u304c\u73fe\u308c\u305f\u3089\u51e6\u7406\u306f\u6b62\u307e\u308b.\n(\\x \\o)\n\nuser=> (vec (concat '(\\x \\o) '(\\o))) ; \u6b8b\u308a\u306e\u5217\u3068\u9023\u7d50\u3057\u305f\u306e\u304c\u6b21\u306e\u72b6\u614b.\n[\\x \\o \\o]\n```\n\n---\n\n`proc` \u95a2\u6570\u5168\u4f53\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\n\n```clojure\nord18=> (def tps {1 2, 2 7, 3 3, 4 5, 5 2})\n#'ord18/tps\n\nord18=> (proc tps (sorted-map 1 [\\o \\o \\o \\o],\n                              2 [\\o \\o \\x],\n                              3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n                              4 [\\o \\o \\o \\o \\o \\o \\o],\n                              5 [\\o \\o \\o]))\n{1 [\\o \\o],\n 2 [\\x],\n 3 [\\o \\o \\o \\o \\o],\n 4 [\\o \\o],\n 5 [\\o]}\n```\n\n---\n\n```clojure\n(defn- proc-event [tps lines event]\n  (if (= event \\.)\n    (proc tps lines)\n    (append lines event)))\n```\n\n`proc-event` \u306f, \u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b `tps`, \u5168\u30ec\u30b8\u306e\u72b6\u614b `lines`, \u30a4\u30d9\u30f3\u30c8 `event` \u3092\u4e0e\u3048\u308b\u3068, \u6b21\u306e\u5168\u30ec\u30b8\u306e\u72b6\u614b\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059.\n\u30a4\u30d9\u30f3\u30c8 `event` \u306f, \u5358\u4f4d\u6642\u9593\u306e\u6d88\u8cbb `\\.` \u307e\u305f\u306f\u6765\u5ba2 (`\\x` \u307e\u305f\u306f\u6570\u5b57) \u306e\u3044\u305a\u308c\u304b\u3067\u3059.\n\u305d\u308c\u305e\u308c\u306e\u5834\u5408\u3067, \u5404\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b\u3067\u5217\u3092\u51e6\u7406\u3059\u308b `proc`, \u6765\u5ba2\u3092\u5217\u306b\u8ffd\u52a0\u3059\u308b `append` \u3092\u547c\u3073\u51fa\u3057\u307e\u3059.\n\n---\n\n```clojure\n(defn solve [tps events]\n  (->> (reduce (partial proc-event tps)\n         (reduce #(assoc %1 %2 []) (sorted-map) (keys tps))\n         events)\n    (map (comp count second))\n    (interpose \",\")\n    (apply str)))\n```\n\n\u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b `tps` \u306e\u3068\u304d, \u30b7\u30fc\u30b1\u30f3\u30b9 `events` \u306b\u4e0e\u3048\u3089\u308c\u308b\u5168\u3066\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3057\u305f\u5f8c\u306e\u72b6\u614b\u306f\n\n```clojure\n(reduce (partial proc-event tps)\n  \u5168\u30ec\u30b8\u306e\u521d\u671f\u72b6\u614b\n  events)\n```\n\n\u3068\u306a\u308a\u307e\u3059.\n\u5168\u30ec\u30b8\u306e\u521d\u671f\u72b6\u614b\u306f, \u5168\u30ec\u30b8\u306e\u51e6\u7406\u80fd\u529b\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u30ec\u30b8\u756a\u53f7\u306b\u3064\u3044\u3066, \u30ec\u30b8\u756a\u53f7\u3092\u30ad\u30fc\u3068\u3057, \u5404\u30ec\u30b8\u306e\u521d\u671f\u72b6\u614b `[]` \u3092\u5024\u306b\u3082\u3064\u6574\u5217\u6e08\u307f\u30de\u30c3\u30d7\n\n```clojure\n(reduce #(assoc %1 %2 []) (sorted-map) (keys tps))\n```\n\n\u3067\u3059.\n\n\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\n\n```clojure\nuser=> (reduce #(assoc %1 %2 []) (sorted-map) (keys {1 2, 2 7, 3 3, 4 5, 5 2}))\n{1 [], 2 [], 3 [], 4 [], 5 []}\n```\n\n---\n\n\u89e3\u7b54\u3067\u306f `reduce` \u3067\u6700\u7d42\u72b6\u614b\u306e\u307f\u3092\u5f97\u307e\u3059\u304c, `(partial proc-event tps)` \u306e\u6a5f\u80fd\u3092\u898b\u308b\u305f\u3081\u306b,\n`reductions` \u3067\u9014\u4e2d\u306e\u72b6\u614b\u306e\u5909\u5316\u3092\u5168\u3066\u898b\u308b\u4f8b\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059.\n\n```clojure\nord18=> (def tps {1 2, 2 7, 3 3, 4 5, 5 2})\n#'ord18/tps\n\nord18=> (reduce #(assoc %1 %2 []) (sorted-map) (keys tps))\n{1 [], 2 [], 3 [], 4 [], 5 []}\n\nord18=> (def init *1)\n#'ord18/init\n\nord18=> (require '[clojure.pprint :refer :all])\nnil\n\nord18=> (pprint (reductions (partial proc-event tps) init \"42873x.3.\"))\n({1 [], 2 [], 3 [], 4 [], 5 []}\n {1 [\\o \\o \\o \\o], 2 [], 3 [], 4 [], 5 []}\n {1 [\\o \\o \\o \\o], 2 [\\o \\o], 3 [], 4 [], 5 []}\n {1 [\\o \\o \\o \\o], 2 [\\o \\o], 3 [\\o \\o \\o \\o \\o \\o \\o \\o], 4 [], 5 []}\n {1 [\\o \\o \\o \\o],\n  2 [\\o \\o],\n  3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n  4 [\\o \\o \\o \\o \\o \\o \\o],\n  5 []}\n {1 [\\o \\o \\o \\o],\n  2 [\\o \\o],\n  3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n  4 [\\o \\o \\o \\o \\o \\o \\o],\n  5 [\\o \\o \\o]}\n {1 [\\o \\o \\o \\o],\n  2 [\\o \\o \\x],\n  3 [\\o \\o \\o \\o \\o \\o \\o \\o],\n  4 [\\o \\o \\o \\o \\o \\o \\o],\n  5 [\\o \\o \\o]}\n {1 [\\o \\o], 2 [\\x], 3 [\\o \\o \\o \\o \\o], 4 [\\o \\o], 5 [\\o]}\n {1 [\\o \\o], 2 [\\x \\o \\o \\o], 3 [\\o \\o \\o \\o \\o], 4 [\\o \\o], 5 [\\o]}\n {1 [], 2 [\\x \\o \\o \\o], 3 [\\o \\o], 4 [], 5 []})\nnil\n```\n\n---\n\n```clojure\n(->> ...\n  (map (comp count second))\n  (interpose \",\")\n  (apply str))\n```\n\n\u6700\u5f8c\u306e\u5168\u30ec\u30b8\u306e\u72b6\u614b\u304b\u3089, \u5404\u30ec\u30b8\u306e\u5217\u306e\u9577\u3055\u3092\u629c\u304d\u51fa\u3057, \",\" \u3092\u631f\u3093\u3067\u6587\u5b57\u5217\u5316\u3057\u3066\u51fa\u529b\u3068\u3057\u307e\u3059.\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\n\n```clojure\nuser=> (->> (sorted-map 1 [] 2 [\\x \\o \\o \\o] 3 [\\o \\o] 4 [] 5 [])\n         (map (comp count second))\n         (interpose \",\")\n         (apply str))\n\"0,4,2,0,0\"\n```\n\n", "tags": ["\u3069\u3046\u66f8\u304f", "Clojure", "yhpg"]}