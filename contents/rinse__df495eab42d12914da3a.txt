{"context": " More than 1 year has passed since last update.\u306a\u3093\u304b\u96fb\u6ce2\u3092\u53d7\u4fe1\u3057\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u9ad8\u968e\u30e1\u30bf\u95a2\u6570\u306e\u5f15\u6570\u3092\u675f\u7e1b\u3057\u3066\u65b0\u3057\u3044\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n// \u7b2c\u4e00\u5f15\u6570\u306b\u30e1\u30bf\u95a2\u6570\n// \u305d\u308c\u4ee5\u964d\u306b\u675f\u7e1b\u3059\u308b\u5f15\u6570\ntemplate <\n  template < class ... > class meta_function,\n  class... Args1\n>\nstruct meta_bind\n{\n  template < class... Args2 >\n  using type = meta_function < Args1..., Args2... >;\n};\n\ntemplate < class Ty >\nusing is_int = typename meta_bind < std::is_same, int >::template type < Ty >;\n\n\nvoid printbool( bool b )\n{\n  printf( \"%s\\n\", b ? \"true\" : \"false\" ); \n}\nint main()\n{\n  printbool < is_int < void >::value >();\n  printbool < is_int < int >::vaue >();\n}\n\n\n\u554f\u984c\u304c\u3042\u308b\u3068\u3059\u308c\u3070\u3044\u307e\u3044\u3061\u4f7f\u3044\u9053\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3068\u3053\u308d\u3068\u304b\u3001\ntypename meta_bind < std::is_same, int >::template type < Ty >\u3000\u304c\u30e1\u30bf\u95a2\u6570\u6163\u308c\u3057\u3066\u306a\u3044\u3072\u3068\u306b\u306f\u30ad\u30e2\u3059\u304e\u308b\u3053\u3068\u304b\u3082\u3002\nplaceholders\u307f\u305f\u3044\u306a\u3082\u306e\u3082\u3064\u304f\u3063\u3066\u306a\u3044\u3067\u3059\u304c\u3001named template\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3069\u3046\u306b\u304b\u306a\u308a\u305d\u3046\u3002\n\u306a\u3093\u304b\u96fb\u6ce2\u3092\u53d7\u4fe1\u3057\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u9ad8\u968e\u30e1\u30bf\u95a2\u6570\u306e\u5f15\u6570\u3092\u675f\u7e1b\u3057\u3066\u65b0\u3057\u3044\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```\n// \u7b2c\u4e00\u5f15\u6570\u306b\u30e1\u30bf\u95a2\u6570\n// \u305d\u308c\u4ee5\u964d\u306b\u675f\u7e1b\u3059\u308b\u5f15\u6570\ntemplate <\n  template < class ... > class meta_function,\n  class... Args1\n>\nstruct meta_bind\n{\n  template < class... Args2 >\n  using type = meta_function < Args1..., Args2... >;\n};\n\ntemplate < class Ty >\nusing is_int = typename meta_bind < std::is_same, int >::template type < Ty >;\n\n\nvoid printbool( bool b )\n{\n  printf( \"%s\\n\", b ? \"true\" : \"false\" ); \n}\nint main()\n{\n  printbool < is_int < void >::value >();\n  printbool < is_int < int >::vaue >();\n}\n\n```\n\n\u554f\u984c\u304c\u3042\u308b\u3068\u3059\u308c\u3070\u3044\u307e\u3044\u3061\u4f7f\u3044\u9053\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3068\u3053\u308d\u3068\u304b\u3001\n`typename meta_bind < std::is_same, int >::template type < Ty >`\u3000\u304c\u30e1\u30bf\u95a2\u6570\u6163\u308c\u3057\u3066\u306a\u3044\u3072\u3068\u306b\u306f\u30ad\u30e2\u3059\u304e\u308b\u3053\u3068\u304b\u3082\u3002\nplaceholders\u307f\u305f\u3044\u306a\u3082\u306e\u3082\u3064\u304f\u3063\u3066\u306a\u3044\u3067\u3059\u304c\u3001named template\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3069\u3046\u306b\u304b\u306a\u308a\u305d\u3046\u3002\n", "tags": ["C++", "C++11"]}