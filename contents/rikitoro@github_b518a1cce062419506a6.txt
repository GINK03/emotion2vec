{"context": "\u30af\u30ed\u30c3\u30af\u306a\u3069\u306e\u4fe1\u53f7\u306b\u3088\u3063\u3066\u72b6\u614b\u304c\u5909\u5316\u3059\u308b\u9806\u5e8f\u56de\u8def\u306f\u3001always\u6587\u3092\u7528\u3044\u3066\u8a2d\u8a08\u3059\u308b\u3002always\u6587\u3067\u306f\u6307\u5b9a\u3057\u305f\u4fe1\u53f7\u306b\u5909\u5316(\u7acb\u4e0a\u308a\u3001\u7acb\u4e0b\u308a)\u304c\u3042\u3063\u305f\u6642\u306b\u884c\u3046\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u3002\n\n\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u8a08\n\n\u5b9f\u7fd21. 4\u30d3\u30c3\u30c8\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u8a08\n\u4ee5\u4e0b\u306e register4.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f register4 \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\nregister4.v\n`default_nettype none\n\nmodule register4(\n  input   wire        clock,\n  input   wire  [3:0] data,\n  output  reg   [3:0] q\n  );\n\n  always @ (posedge clock) begin // \u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\n                                 // clock \u306e\u7acb\u4e0a\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067always\u6587\u304c\u8d77\u52d5\n    q <= data;  // \u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165\n  end\n\nendmodule\n\n\n\n\n\nregister4\u306e\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\u5099\u8003\n\n\n\n\nclock\nGCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)\n\u30b8\u30e3\u30f3\u30d1\u30d4\u30f3JP10\u3092\u53f3\u5074\u306b\u8a2d\u7f6e\u3057\u3066\u5229\u7528\u3059\u308b\u3002\u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b1\n\n\ndata[3:0]\nSA3~SA0(\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\n\nq[3:0]\nDA3~DA0(\u500b\u5225LED)\n\n\n\n\n\u56de\u8def\u306e\u52d5\u4f5c\u4f8b\n\n\u8a2d\u8a08\u3059\u308b\u56de\u8def\u306e\u30a4\u30e1\u30fc\u30b8\n\n\n\u3000\u89e3\u8aac\nalways\u6587\u3067\u306f\u3001\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8(always @ \u306b\u7d9a\u304f()\u5185)\u306b\u8d77\u52d5\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u8a18\u8ff0\u3057\u3001\u305d\u306e\u8d77\u52d5\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\u3092\u5f15\u304d\u7d9a\u304f\u6587(\u901a\u5e38\u306fbegin~end\u3067\u56f2\u307e\u308c\u308b\u8907\u6587)\u3067\u8a18\u8ff0\u3059\u308b\u3002\nalways @ (<\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8>)\n <\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306e\u4fe1\u53f7\u306b\u5909\u5316\u304c\u3042\u3063\u305f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b\u6587>;\n // \u8907\u6570\u306e\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408(\u8907\u6587)\u306fbegin ~ end\u3067\u56f2\u3080 \n\n\n\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306b\u6307\u5b9a\u3055\u308c\u305f\u4fe1\u53f7\u306b\u5909\u5316\u304c\u3042\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067always\u6587\u304c\u8d77\u52d5\u3057\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u308b\n\n\n\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u3067\u306f\u3001posedge\u3067\u7acb\u4e0a\u308a\u3001negedge\u3067\u7acb\u4e0b\u308a\u3092\u6307\u5b9a\u3059\u308b\n\u5b9f\u7fd21\u3067\u306f\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306bposedge clock\u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001clock\u306e\u7acb\u4e0a\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\n\n\n\u30af\u30ed\u30c3\u30af\u306a\u3069\u306e\u4fe1\u53f7\u306e\u5909\u5316\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ec\u30b8\u30b9\u30bf\u306b\u5024\u3092\u4ee3\u5165\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\u3001always\u3067\u8d77\u52d5\u3055\u308c\u308b\u6587\u306b\u304a\u3044\u3066\u3001\u30ec\u30b8\u30b9\u30bf\u578b(reg\u578b)\u5909\u6570\u3078\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165<=\u3067\u5024\u3092\u4ee3\u5165\u3059\u308b\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3068\u3088\u3044\n\n\n\u5b9f\u7fd21\u3067\u306f\u3001clock\u306e\u7acb\u4e0a\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30014\u30d3\u30c3\u30c8\u306ereg\u578b\u5909\u6570q\u306b4\u30d3\u30c3\u30c8\u306e\u4fe1\u53f7data\u3092\u4ee3\u5165\u3057\u3001\u305d\u306e\u5f8c\u3001\u4ee3\u5165\u3055\u308c\u305f\u4fe1\u53f7\u3092\u4fdd\u6301\u3059\u308b\u56de\u8def\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b(\u52d5\u4f5c\u4f8b\u3092\u53c2\u7167)\n\n\n\n\n\u5b9f\u7fd22. \u540c\u671f\u5f0f\u30ea\u30bb\u30c3\u30c8\u4ed8\u304d\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u8a08\n\u4ee5\u4e0b\u306e register4_sync_reset.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f register4_sync_reset \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\nregiger4_sync_reset.v\n`default_nettype none\n\nmodule register4_sync_reset(\n  input   wire        clock,\n  input   wire        n_reset,  // \u30ea\u30bb\u30c3\u30c8(active low)\n  input   wire  [3:0] data,\n  output  reg   [3:0] q\n  );\n\n  always @ (posedge clock) begin\n    // clock\u306e\u7acb\u4e0a\u308a\u3067always\u6587\u304c\u8d77\u52d5\n    if (n_reset == 1'b0) begin \n      q <= 4'b0; // n_reset\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u3089\u30ea\u30bb\u30c3\u30c8\n    end else begin\n      q <= data;\n    end\n  end\n\nendmodule\n\n\n\n\n\nregister4_sync_reset\u306e\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\u5099\u8003\n\n\n\n\nclock\nGCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)\n\u30b8\u30e3\u30f3\u30d1\u30d4\u30f3JP10\u3092\u53f3\u5074\u306b\u8a2d\u7f6e\u3057\u3066\u5229\u7528\u3059\u308b\u3002\u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b1\n\n\nn_reset\nS1 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)\n\u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b0(GND)\n\n\ndata[3:0]\nSA3~SA0(\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\n\nq[3:0]\nDA3~DA0(\u500b\u5225LED)\n\n\n\n\n\u56de\u8def\u306e\u52d5\u4f5c\u4f8b\n\n\n\u89e3\u8aac\nalways\u3067\u8d77\u52d5\u3059\u308b\u6587\u3067\u306f if\u6587\u3084case\u6587\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\u5b9f\u7fd22\u3067\u306f clock \u306e\u7acb\u4e0a\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067n_reset\u306e\u5024\u3092\u5224\u5b9a\u3057\u3001\u305d\u306e\u5224\u5b9a\u7d50\u679c\u3067\u7570\u306a\u308b\u52d5\u4f5c\u3092\u884c\u3046\u3088\u3046\u306a\u56de\u8def\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b \n\n\n\u5b9f\u7fd23. \u975e\u540c\u671f\u5f0f\u30ea\u30bb\u30c3\u30c8\u4ed8\u304d\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u8a08\n\u4ee5\u4e0b\u306e register4_async_reset.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f register4_async_reset \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\nregister4_async_reset.v\n`default_nettype none\n\nmodule register4_async_reset(\n  input   wire        clock,\n  input   wire        n_reset,  // \u30ea\u30bb\u30c3\u30c8(active low)\n  input   wire  [3:0] data,\n  output  reg   [3:0] q\n  );\n\n  always @ (posedge clock, negedge n_reset) begin\n    // clock\u306e\u7acb\u4e0a\u308a\u3001\u307e\u305f\u306fn_reset\u306e\u7acb\u4e0b\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067always\u6587\u304c\u8d77\u52d5\n    if (n_reset == 1'b0) begin\n      q <= 4'b0; // n_reset\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u3089\u30ea\u30bb\u30c3\u30c8\n    end else begin\n      q <= data;\n    end\n  end\n\nendmodule\n\n\n\n\n\nregister4_async_reset\u306e\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\u5099\u8003\n\n\n\n\nclock\nGCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)\n\u30b8\u30e3\u30f3\u30d1\u30d4\u30f3JP10\u3092\u53f3\u5074\u306b\u8a2d\u7f6e\u3057\u3066\u5229\u7528\u3059\u308b\u3002\u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b1\n\n\nn_reset\nS1 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)\n\u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b0(GND)\n\n\ndata[3:0]\nSA3~SA0(\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\n\nq[3:0]\nDA3~DA0(\u500b\u5225LED)\n\n\n\n\n\u56de\u8def\u306e\u52d5\u4f5c\u4f8b\n\n\n\u89e3\u8aac\n\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306b\u306f\u8907\u6570\u306e\u4fe1\u53f7\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\u5b9f\u7fd23\u3067\u306f\u3001\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306b posedge clock, negedge n_reset \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001clock\u306e\u7acb\u4e0a\u308a\u3068n_reset\u306e\u7acb\u4e0b\u308a\u306e\u4e21\u65b9\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8d77\u52d5\u3059\u308b\u56de\u8def\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b\n\n\n\u30ab\u30a6\u30f3\u30bf\u306e\u8a2d\u8a08\n\n\u5b9f\u7fd24. 5\u9032\u30ab\u30a6\u30f3\u30bf\u306e\u8a2d\u8a08\n\u4ee5\u4e0b\u306e counter5.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f counter5 \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\ncounter5.v\n`default_nettype none\n\nmodule counter5(\n  input   wire        clock,\n  output  reg   [2:0] count\n  );\n\n  always @ (posedge clock) begin\n    if (count >= 3'b100) begin\n      count <= 3'b000;\n    end else begin\n      count <= count + 1'b1;\n    end\n  end\n\nendmodule\n\n\n\n\n\ncounter5\u306e\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\n\n\n\nclock\nGCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)\n\n\ncount[2:0]\nDA2~DA0(\u500b\u5225LED)\n\n\n\n\n\u5b9f\u7fd25. \u30c7\u30b3\u30fc\u30c0\u4ed8\u304d5\u9032\u30ab\u30a6\u30f3\u30bf\u306e\u8a2d\u8a08 (\u30e2\u30b8\u30e5\u30fc\u30eb\u8a2d\u8a08)\n\u4ee5\u4e0b\u306e counter5_decoder.v, register3.v, mod5_inc.v, decoder.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f counter5_decoder \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\ncounter5_decoder.v\nmodule counter5_decoder(\n  input   wire        clock,\n  output  wire  [7:0] y\n  );\n\n  wire  [2:0] count;       // \u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u5024\n  wire  [2:0] count_next;  // \u6b21\u306e\u30ab\u30a6\u30f3\u30c8\u5024\n\n  register3 register(  // \u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u4fdd\u6301\u3059\u308b3\u30d3\u30c3\u30c8\u30ec\u30b8\u30b9\u30bf\n    .clock  (clock),\n    .data   (count_next),\n    .q      (count)\n  );\n\n  mod5_inc mod5_inc(  // \u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u304b\u3089\u6b21\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u6c42\u3081\u308b\u6b21\u72b6\u614b\u95a2\u6570 y = x + 1 mod 5\n    .x      (count),\n    .y      (count_next)\n  );\n\n  decoder decoder(  // \u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u51fa\u529b\u3059\u308b\u51fa\u529b\u95a2\u6570\n    .num    (count),\n    .y      (y)\n  );\n\nendmodule\n\n\n\nregister3.v\n`default_nettype none\n\nmodule register3( // 3\u30d3\u30c3\u30c8\u30ec\u30b8\u30b9\u30bf\n  input   wire        clock,\n  input   wire  [2:0] data,\n  output  reg   [2:0] q\n  );\n\n  always @ (posedge clock) begin\n    q <= data;\n  end\n\nendmodule\n\n\n\nmod5_inc.v\n`default_nettype none\n\nmodule mod5_inc( // 5\u9032\u30ab\u30a6\u30f3\u30c8\u7528\u306e\u6b21\u72b6\u614b\u95a2\u6570(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def)\n  input   wire  [2:0] x,\n  output  reg   [2:0] y\n  );\n\n  always @ (*) begin\n    if (x >= 3'b100) begin\n      y = 3'b000;\n    end else begin\n      y = x + 1'b1;\n    end  \n  end\n\nendmodule\n\n\n\ndecoder.v\n`default_nettype none\n\nmodule decoder( // \u51fa\u529b\u95a2\u6570(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def)\n  input   wire  [2:0] num,\n  output  reg   [7:0] y\n  );\n\n  always @ (*) begin\n    case (num)\n      3'b000: y = 8'b11111110;\n      3'b001: y = 8'b11111101;\n      3'b010: y = 8'b11111011;\n      3'b011: y = 8'b11110111;\n      3'b100: y = 8'b11101111;\n      3'b101: y = 8'b11011111;\n      3'b110: y = 8'b10111111;\n      3'b111: y = 8'b01111111;\n    endcase\n  end\n\nendmodule\n\n\n\n\n\ncounter5_decoder\u306e\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\n\n\n\nclock\nGCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)\n\n\ny[7:0]\nDA7~DA0(\u500b\u5225LED)\n\n\n\n\u56de\u8def\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u6210\n\n\n\u89e3\u8aac\n\u9806\u5e8f\u56de\u8def\u3092\u8a2d\u8a08\u3059\u308b\u969b\u306f\u3001\u73fe\u5728\u306e\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\u8a18\u61b6\u90e8(\u30ec\u30b8\u30b9\u30bf)\u3001\u73fe\u5728\u306e\u72b6\u614b\u3068\u5165\u529b\u4fe1\u53f7\u304b\u3089\u6b21\u306e\u72b6\u614b\u3092\u7b97\u51fa\u3059\u308b\u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def)\u3001\u73fe\u5728\u306e\u72b6\u614b(\u304a\u3088\u3073\u5165\u529b\u4fe1\u53f7)\u304b\u3089\u51fa\u529b\u4fe1\u53f7\u3092\u7b97\u51fa\u3059\u308b\u51fa\u529b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def)\u306e\u305d\u308c\u305e\u308c\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u8a2d\u8a08\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u69cb\u7bc9\u3059\u308b\u3068\u3088\u3044\u3002\n\u8ab2\u984c5\u306b\u304a\u3051\u308b\u8a18\u61b6\u90e8\u3001\u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def\u3001\u51fa\u529b\u95a2\u6570\u56de\u8def\u306f\u4ee5\u4e0b\u306b\u793a\u3055\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u3002\n- \u8a18\u61b6\u90e8: register3\u30e2\u30b8\u30e5\u30fc\u30eb\n- \u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def): mod5_inc\u30e2\u30b8\u30e5\u30fc\u30eb\n- \u51fa\u529b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def): decoder\u30e2\u30b8\u30e5\u30fc\u30eb\n\n\u72b6\u614b\u30de\u30b7\u30f3\u306e\u8a2d\u8a08\n\n\u5b9f\u7fd26. \u4e00\u6642\u505c\u6b62\u6a5f\u80fd\u4ed8\u304d\u30b0\u30ec\u30a4\u30b3\u30fc\u30c9\u30ab\u30a6\u30f3\u30bf\u306e\u8a2d\u8a08\n\u4ee5\u4e0b\u306e gray_counter.v, next_state_function.v, register2.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f gray_counter \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\ngray_counter.v\n`default_nettype none\n\nmodule gray_counter(\n  input   wire        clock,\n  input   wire        pause,\n  output  wire  [1:0] y\n  );\n\n  wire  [1:0] state_now;  // \u73fe\u5728\u306e\u72b6\u614b\n  wire  [1:0] state_next; // \u6b21\u306e\u72b6\u614b\n\n  // \u6b21\u72b6\u614b\u95a2\u6570\n  next_state_function next_state_function(\n    .pause      (pause),\n    .state_now  (state_now),\n    .state_next (state_next));\n\n  // \u8a18\u61b6\u90e8 (2-bit register)\n  register2 register2(\n    .clock  (clock),\n    .data   (state_next),\n    .q      (state_now));\n\n  // \u51fa\u529b\u95a2\u6570\n  assign y = state_now;\n\nendmodule\n\n\n\nnext_state_function.v\n`default_nettype none\n\n// \u6b21\u72b6\u614b\u95a2\u6570: \u73fe\u5728\u306e\u72b6\u614b\u3068\u5165\u529b\u304b\u3089\u6b21\u306e\u72b6\u614b\u3092\u51fa\u529b\u3059\u308b\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\nmodule next_state_function(\n  input   wire        pause,\n  input   wire  [1:0] state_now,\n  output  reg   [1:0] state_next\n  );\n\n  // module \u5185\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5b9a\u7fa9(\u5404\u72b6\u614b\u306e\u30d3\u30c3\u30c8\u8868\u73fe\u306e\u5b9a\u7fa9)\n  localparam Sa = 2'b00;\n  localparam Sb = 2'b01;\n  localparam Sc = 2'b11;\n  localparam Sd = 2'b10;\n\n  always @ (*) begin\n    case ({pause, state_now}) // \u72b6\u614b\u9077\u79fb\u8868\u3092\u8a18\u8ff0\u3059\u308b\n      {1'b0, Sa}: state_next = Sb;\n      {1'b0, Sb}: state_next = Sc;\n      {1'b0, Sc}: state_next = Sd;\n      {1'b0, Sd}: state_next = Sa;\n      {1'b1, Sa}: state_next = Sa;\n      {1'b1, Sb}: state_next = Sb;\n      {1'b1, Sc}: state_next = Sc;\n      {1'b1, Sd}: state_next = Sd;\n    endcase\n  end\n\nendmodule\n\n\n\nregister2.v\n`default_nettype none\n\n// 2-bit \u30ec\u30b8\u30b9\u30bf: \u73fe\u5728\u306e\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\nmodule register2 (\n  input   wire        clock,\n  input   wire  [1:0] data,\n  output  reg   [1:0] q\n  );\n\n  always @ (posedge clock) begin\n    q <= data;\n  end\n\nendmodule\n\n\n\n\n\ngray_counter\u306e\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\n\n\n\nclock\nGCLK3(\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)\n\n\npause\nSA0(\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\ny[1:0]\nDA1~DA0(\u500b\u5225LED)\n\n\n\n\u56de\u8def\u306e\u72b6\u614b\u9077\u79fb\u56f3\n\n\u56de\u8def\u306e\u52d5\u4f5c\u4f8b\n\n\u56de\u8def\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u6210\n\n\n\u89e3\u8aac\n\u8ab2\u984c6\u306b\u304a\u3051\u308b\u8a18\u61b6\u90e8\u3001\u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def\u4ee5\u4e0b\u306b\u793a\u3055\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u8a18\u61b6\u90e8: register2\u30e2\u30b8\u30e5\u30fc\u30eb\n\u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def): next_state_function\u30e2\u30b8\u30e5\u30fc\u30eb\n\n\u51fa\u529b\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u4eca\u56de\u3001\u5404\u72b6\u614b\u3092\u8868\u30592\u30d3\u30c3\u30c8\u306e\u30d3\u30c3\u30c8\u8868\u73fe\u3092\u51fa\u529b\u4fe1\u53f7\u3068\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u305f\u305f\u3081\u3001\u7279\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u306f\u8a2d\u8a08\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u3002\u3042\u3048\u3066\u8a00\u3048\u3070\u3001gray_counter\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306eassign y = state_now;\u306e\u8a18\u8ff0\u304c\u51fa\u529b\u95a2\u6570\u306b\u76f8\u5f53\u3059\u308b\u3002\n\u30af\u30ed\u30c3\u30af\u306a\u3069\u306e\u4fe1\u53f7\u306b\u3088\u3063\u3066\u72b6\u614b\u304c\u5909\u5316\u3059\u308b\u9806\u5e8f\u56de\u8def\u306f\u3001always\u6587\u3092\u7528\u3044\u3066\u8a2d\u8a08\u3059\u308b\u3002always\u6587\u3067\u306f\u6307\u5b9a\u3057\u305f\u4fe1\u53f7\u306b\u5909\u5316(\u7acb\u4e0a\u308a\u3001\u7acb\u4e0b\u308a)\u304c\u3042\u3063\u305f\u6642\u306b\u884c\u3046\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u3002\n\n# \u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u8a08\n\n## \u5b9f\u7fd21. 4\u30d3\u30c3\u30c8\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u8a08\n\u4ee5\u4e0b\u306e register4.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f register4 \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:register4.v\n`default_nettype none\n\nmodule register4(\n  input   wire        clock,\n  input   wire  [3:0] data,\n  output  reg   [3:0] q\n  );\n  \n  always @ (posedge clock) begin // \u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\n                                 // clock \u306e\u7acb\u4e0a\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067always\u6587\u304c\u8d77\u52d5\n    q <= data;  // \u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165\n  end\n  \nendmodule\n```\n\n\n|register4\u306e\u30dd\u30fc\u30c8| I/O \u30c7\u30d0\u30a4\u30b9 |\u5099\u8003|\n|:---:|:---:|:---|\n|clock| GCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)|\u30b8\u30e3\u30f3\u30d1\u30d4\u30f3JP10\u3092\u53f3\u5074\u306b\u8a2d\u7f6e\u3057\u3066\u5229\u7528\u3059\u308b\u3002\u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b1|\n|data[3:0]| SA3~SA0(\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)| |\n|q[3:0] | DA3~DA0(\u500b\u5225LED) | |\n\n\u56de\u8def\u306e\u52d5\u4f5c\u4f8b\n![timing-chart-register.png](https://qiita-image-store.s3.amazonaws.com/0/25656/b4bae94e-2184-f1b8-14d5-83df2aee9734.png)\n\n\u8a2d\u8a08\u3059\u308b\u56de\u8def\u306e\u30a4\u30e1\u30fc\u30b8\n![register4.png](https://qiita-image-store.s3.amazonaws.com/0/25656/2d570435-c7e1-2f97-ba65-3b3890e6b688.png)\n\n###\u3000\u89e3\u8aac\nalways\u6587\u3067\u306f\u3001\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8(``always @`` \u306b\u7d9a\u304f``()``\u5185)\u306b\u8d77\u52d5\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u8a18\u8ff0\u3057\u3001\u305d\u306e\u8d77\u52d5\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\u3092\u5f15\u304d\u7d9a\u304f\u6587(\u901a\u5e38\u306f``begin~end``\u3067\u56f2\u307e\u308c\u308b\u8907\u6587)\u3067\u8a18\u8ff0\u3059\u308b\u3002\n\n```\nalways @ (<\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8>)\n <\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306e\u4fe1\u53f7\u306b\u5909\u5316\u304c\u3042\u3063\u305f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b\u6587>;\n // \u8907\u6570\u306e\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408(\u8907\u6587)\u306fbegin ~ end\u3067\u56f2\u3080 \n```\n- \u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306b\u6307\u5b9a\u3055\u308c\u305f\u4fe1\u53f7\u306b\u5909\u5316\u304c\u3042\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067always\u6587\u304c\u8d77\u52d5\u3057\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u308b\n - \u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u3067\u306f\u3001``posedge``\u3067\u7acb\u4e0a\u308a\u3001``negedge``\u3067\u7acb\u4e0b\u308a\u3092\u6307\u5b9a\u3059\u308b\n - \u5b9f\u7fd21\u3067\u306f\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306b`` posedge clock ``\u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001clock\u306e\u7acb\u4e0a\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\n- \u30af\u30ed\u30c3\u30af\u306a\u3069\u306e\u4fe1\u53f7\u306e\u5909\u5316\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ec\u30b8\u30b9\u30bf\u306b\u5024\u3092\u4ee3\u5165\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\u3001always\u3067\u8d77\u52d5\u3055\u308c\u308b\u6587\u306b\u304a\u3044\u3066\u3001\u30ec\u30b8\u30b9\u30bf\u578b(reg\u578b)\u5909\u6570\u3078\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165``<=``\u3067\u5024\u3092\u4ee3\u5165\u3059\u308b\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3068\u3088\u3044\n - \u5b9f\u7fd21\u3067\u306f\u3001clock\u306e\u7acb\u4e0a\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30014\u30d3\u30c3\u30c8\u306ereg\u578b\u5909\u6570``q``\u306b4\u30d3\u30c3\u30c8\u306e\u4fe1\u53f7``data``\u3092\u4ee3\u5165\u3057\u3001\u305d\u306e\u5f8c\u3001\u4ee3\u5165\u3055\u308c\u305f\u4fe1\u53f7\u3092\u4fdd\u6301\u3059\u308b\u56de\u8def\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b(\u52d5\u4f5c\u4f8b\u3092\u53c2\u7167)\n\n\n## \u5b9f\u7fd22. \u540c\u671f\u5f0f\u30ea\u30bb\u30c3\u30c8\u4ed8\u304d\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u8a08\n\n\u4ee5\u4e0b\u306e register4_sync_reset.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f register4_sync_reset \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:regiger4_sync_reset.v\n`default_nettype none\n\nmodule register4_sync_reset(\n  input   wire        clock,\n  input   wire        n_reset,  // \u30ea\u30bb\u30c3\u30c8(active low)\n  input   wire  [3:0] data,\n  output  reg   [3:0] q\n  );\n  \n  always @ (posedge clock) begin\n    // clock\u306e\u7acb\u4e0a\u308a\u3067always\u6587\u304c\u8d77\u52d5\n    if (n_reset == 1'b0) begin \n      q <= 4'b0; // n_reset\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u3089\u30ea\u30bb\u30c3\u30c8\n    end else begin\n      q <= data;\n    end\n  end\n  \nendmodule\n```\n\n|register4_sync_reset\u306e\u30dd\u30fc\u30c8| I/O \u30c7\u30d0\u30a4\u30b9 |\u5099\u8003|\n|:---:|:---:|:---|\n|clock| GCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)|\u30b8\u30e3\u30f3\u30d1\u30d4\u30f3JP10\u3092\u53f3\u5074\u306b\u8a2d\u7f6e\u3057\u3066\u5229\u7528\u3059\u308b\u3002\u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b1|\n|n_reset| S1 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)| \u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b0(GND)|\n|data[3:0]| SA3~SA0(\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)| |\n|q[3:0] | DA3~DA0(\u500b\u5225LED) | |\n\n\u56de\u8def\u306e\u52d5\u4f5c\u4f8b\n![timing-chart_register_sync_reset.png](https://qiita-image-store.s3.amazonaws.com/0/25656/cdbd0474-525b-97b3-51e1-8b82730630b7.png)\n\n### \u89e3\u8aac\nalways\u3067\u8d77\u52d5\u3059\u308b\u6587\u3067\u306f if\u6587\u3084case\u6587\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n- \u5b9f\u7fd22\u3067\u306f ``clock`` \u306e\u7acb\u4e0a\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067``n_reset``\u306e\u5024\u3092\u5224\u5b9a\u3057\u3001\u305d\u306e\u5224\u5b9a\u7d50\u679c\u3067\u7570\u306a\u308b\u52d5\u4f5c\u3092\u884c\u3046\u3088\u3046\u306a\u56de\u8def\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b \n\n## \u5b9f\u7fd23. \u975e\u540c\u671f\u5f0f\u30ea\u30bb\u30c3\u30c8\u4ed8\u304d\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u8a08\n\n\u4ee5\u4e0b\u306e register4_async_reset.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f register4_async_reset \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:register4_async_reset.v\n`default_nettype none\n\nmodule register4_async_reset(\n  input   wire        clock,\n  input   wire        n_reset,  // \u30ea\u30bb\u30c3\u30c8(active low)\n  input   wire  [3:0] data,\n  output  reg   [3:0] q\n  );\n  \n  always @ (posedge clock, negedge n_reset) begin\n    // clock\u306e\u7acb\u4e0a\u308a\u3001\u307e\u305f\u306fn_reset\u306e\u7acb\u4e0b\u308a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067always\u6587\u304c\u8d77\u52d5\n    if (n_reset == 1'b0) begin\n      q <= 4'b0; // n_reset\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u3089\u30ea\u30bb\u30c3\u30c8\n    end else begin\n      q <= data;\n    end\n  end\n  \nendmodule\n```\n|register4_async_reset\u306e\u30dd\u30fc\u30c8| I/O \u30c7\u30d0\u30a4\u30b9 |\u5099\u8003|\n|:---:|:---:|:---|\n|clock| GCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)|\u30b8\u30e3\u30f3\u30d1\u30d4\u30f3JP10\u3092\u53f3\u5074\u306b\u8a2d\u7f6e\u3057\u3066\u5229\u7528\u3059\u308b\u3002\u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b1|\n|n_reset| S1 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)| \u30dc\u30bf\u30f3\u62bc\u4e0b\u3052\u6642\u306b0(GND)|\n|data[3:0]| SA3~SA0(\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)| |\n|q[3:0] | DA3~DA0(\u500b\u5225LED) | |\n\n\u56de\u8def\u306e\u52d5\u4f5c\u4f8b\n![timing-chart_register_async_reset.png](https://qiita-image-store.s3.amazonaws.com/0/25656/883b21a5-d0bf-5972-c56c-f3e46af2a547.png)\n\n### \u89e3\u8aac\n\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306b\u306f\u8907\u6570\u306e\u4fe1\u53f7\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n- \u5b9f\u7fd23\u3067\u306f\u3001\u30bb\u30f3\u30b7\u30c6\u30a3\u30d3\u30c6\u30a3\u30ea\u30b9\u30c8\u306b ``posedge clock, negedge n_reset`` \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001``clock``\u306e\u7acb\u4e0a\u308a\u3068``n_reset``\u306e\u7acb\u4e0b\u308a\u306e\u4e21\u65b9\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8d77\u52d5\u3059\u308b\u56de\u8def\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b\n \n# \u30ab\u30a6\u30f3\u30bf\u306e\u8a2d\u8a08\n\n## \u5b9f\u7fd24. 5\u9032\u30ab\u30a6\u30f3\u30bf\u306e\u8a2d\u8a08\n\n\u4ee5\u4e0b\u306e counter5.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f counter5 \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:counter5.v\n`default_nettype none\n\nmodule counter5(\n  input   wire        clock,\n  output  reg   [2:0] count\n  );\n  \n  always @ (posedge clock) begin\n    if (count >= 3'b100) begin\n      count <= 3'b000;\n    end else begin\n      count <= count + 1'b1;\n    end\n  end\n  \nendmodule\n```\n\n|counter5\u306e\u30dd\u30fc\u30c8| I/O \u30c7\u30d0\u30a4\u30b9 |\n|:---:|:---:|\n|clock| GCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)|\n|count[2:0] | DA2~DA0(\u500b\u5225LED) |\n\n\n## \u5b9f\u7fd25. \u30c7\u30b3\u30fc\u30c0\u4ed8\u304d5\u9032\u30ab\u30a6\u30f3\u30bf\u306e\u8a2d\u8a08 (\u30e2\u30b8\u30e5\u30fc\u30eb\u8a2d\u8a08)\n\n\u4ee5\u4e0b\u306e counter5_decoder.v, register3.v, mod5_inc.v, decoder.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f counter5_decoder \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:counter5_decoder.v\nmodule counter5_decoder(\n  input   wire        clock,\n  output  wire  [7:0] y\n  );\n\n  wire  [2:0] count;       // \u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u5024\n  wire  [2:0] count_next;  // \u6b21\u306e\u30ab\u30a6\u30f3\u30c8\u5024\n  \n  register3 register(  // \u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u4fdd\u6301\u3059\u308b3\u30d3\u30c3\u30c8\u30ec\u30b8\u30b9\u30bf\n    .clock  (clock),\n    .data   (count_next),\n    .q      (count)\n  );\n    \n  mod5_inc mod5_inc(  // \u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u304b\u3089\u6b21\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u6c42\u3081\u308b\u6b21\u72b6\u614b\u95a2\u6570 y = x + 1 mod 5\n    .x      (count),\n    .y      (count_next)\n  );\n  \n  decoder decoder(  // \u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u51fa\u529b\u3059\u308b\u51fa\u529b\u95a2\u6570\n    .num    (count),\n    .y      (y)\n  );\n  \nendmodule\n```\n\n```Verilog:register3.v\n`default_nettype none\n\nmodule register3( // 3\u30d3\u30c3\u30c8\u30ec\u30b8\u30b9\u30bf\n  input   wire        clock,\n  input   wire  [2:0] data,\n  output  reg   [2:0] q\n  );\n  \n  always @ (posedge clock) begin\n    q <= data;\n  end\n\nendmodule\n```\n\n```Verilog:mod5_inc.v\n`default_nettype none\n\nmodule mod5_inc( // 5\u9032\u30ab\u30a6\u30f3\u30c8\u7528\u306e\u6b21\u72b6\u614b\u95a2\u6570(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def)\n  input   wire  [2:0] x,\n  output  reg   [2:0] y\n  );\n  \n  always @ (*) begin\n    if (x >= 3'b100) begin\n      y = 3'b000;\n    end else begin\n      y = x + 1'b1;\n    end  \n  end\n  \nendmodule\n```\n\n```Verilog:decoder.v\n`default_nettype none\n\nmodule decoder( // \u51fa\u529b\u95a2\u6570(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def)\n  input   wire  [2:0] num,\n  output  reg   [7:0] y\n  );\n  \n  always @ (*) begin\n    case (num)\n      3'b000: y = 8'b11111110;\n      3'b001: y = 8'b11111101;\n      3'b010: y = 8'b11111011;\n      3'b011: y = 8'b11110111;\n      3'b100: y = 8'b11101111;\n      3'b101: y = 8'b11011111;\n      3'b110: y = 8'b10111111;\n      3'b111: y = 8'b01111111;\n    endcase\n  end\n  \nendmodule\n```\n|counter5_decoder\u306e\u30dd\u30fc\u30c8| I/O \u30c7\u30d0\u30a4\u30b9 |\n|:---:|:---:|\n|clock| GCLK3 (\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1)|\n|y[7:0] | DA7~DA0(\u500b\u5225LED) |\n\n\u56de\u8def\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u6210\n![counter5_decoder.png](https://qiita-image-store.s3.amazonaws.com/0/25656/b2d15d54-df06-bfce-d2f1-be153d474b0f.png)\n\n### \u89e3\u8aac\n\u9806\u5e8f\u56de\u8def\u3092\u8a2d\u8a08\u3059\u308b\u969b\u306f\u3001\u73fe\u5728\u306e\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\u8a18\u61b6\u90e8(\u30ec\u30b8\u30b9\u30bf)\u3001\u73fe\u5728\u306e\u72b6\u614b\u3068\u5165\u529b\u4fe1\u53f7\u304b\u3089\u6b21\u306e\u72b6\u614b\u3092\u7b97\u51fa\u3059\u308b\u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def)\u3001\u73fe\u5728\u306e\u72b6\u614b(\u304a\u3088\u3073\u5165\u529b\u4fe1\u53f7)\u304b\u3089\u51fa\u529b\u4fe1\u53f7\u3092\u7b97\u51fa\u3059\u308b\u51fa\u529b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def)\u306e\u305d\u308c\u305e\u308c\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u8a2d\u8a08\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u69cb\u7bc9\u3059\u308b\u3068\u3088\u3044\u3002\n\n\u8ab2\u984c5\u306b\u304a\u3051\u308b\u8a18\u61b6\u90e8\u3001\u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def\u3001\u51fa\u529b\u95a2\u6570\u56de\u8def\u306f\u4ee5\u4e0b\u306b\u793a\u3055\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u3002\n- \u8a18\u61b6\u90e8: register3\u30e2\u30b8\u30e5\u30fc\u30eb\n- \u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def): mod5_inc\u30e2\u30b8\u30e5\u30fc\u30eb\n- \u51fa\u529b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def): decoder\u30e2\u30b8\u30e5\u30fc\u30eb\n\n# \u72b6\u614b\u30de\u30b7\u30f3\u306e\u8a2d\u8a08\n\n## \u5b9f\u7fd26. \u4e00\u6642\u505c\u6b62\u6a5f\u80fd\u4ed8\u304d\u30b0\u30ec\u30a4\u30b3\u30fc\u30c9\u30ab\u30a6\u30f3\u30bf\u306e\u8a2d\u8a08\n\n\u4ee5\u4e0b\u306e gray_counter.v, next_state_function.v, register2.v \u3067\u8a2d\u8a08\u3055\u308c\u308b\u56de\u8def\u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3066\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u305f\u3060\u3057 top-level entity \u306f gray_counter \u3068\u3059\u308b\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:gray_counter.v\n`default_nettype none\n\nmodule gray_counter(\n  input   wire        clock,\n  input   wire        pause,\n  output  wire  [1:0] y\n  );\n  \n  wire  [1:0] state_now;  // \u73fe\u5728\u306e\u72b6\u614b\n  wire  [1:0] state_next; // \u6b21\u306e\u72b6\u614b\n  \n  // \u6b21\u72b6\u614b\u95a2\u6570\n  next_state_function next_state_function(\n    .pause      (pause),\n    .state_now  (state_now),\n    .state_next (state_next));\n  \n  // \u8a18\u61b6\u90e8 (2-bit register)\n  register2 register2(\n    .clock  (clock),\n    .data   (state_next),\n    .q      (state_now));\n  \n  // \u51fa\u529b\u95a2\u6570\n  assign y = state_now;\n  \nendmodule\n```\n\n```Verilog:next_state_function.v\n`default_nettype none\n\n// \u6b21\u72b6\u614b\u95a2\u6570: \u73fe\u5728\u306e\u72b6\u614b\u3068\u5165\u529b\u304b\u3089\u6b21\u306e\u72b6\u614b\u3092\u51fa\u529b\u3059\u308b\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\nmodule next_state_function(\n  input   wire        pause,\n  input   wire  [1:0] state_now,\n  output  reg   [1:0] state_next\n  );\n  \n  // module \u5185\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5b9a\u7fa9(\u5404\u72b6\u614b\u306e\u30d3\u30c3\u30c8\u8868\u73fe\u306e\u5b9a\u7fa9)\n  localparam Sa = 2'b00;\n  localparam Sb = 2'b01;\n  localparam Sc = 2'b11;\n  localparam Sd = 2'b10;\n  \n  always @ (*) begin\n    case ({pause, state_now}) // \u72b6\u614b\u9077\u79fb\u8868\u3092\u8a18\u8ff0\u3059\u308b\n      {1'b0, Sa}: state_next = Sb;\n      {1'b0, Sb}: state_next = Sc;\n      {1'b0, Sc}: state_next = Sd;\n      {1'b0, Sd}: state_next = Sa;\n      {1'b1, Sa}: state_next = Sa;\n      {1'b1, Sb}: state_next = Sb;\n      {1'b1, Sc}: state_next = Sc;\n      {1'b1, Sd}: state_next = Sd;\n    endcase\n  end\n  \nendmodule\n```\n\n```Verilog:register2.v\n`default_nettype none\n\n// 2-bit \u30ec\u30b8\u30b9\u30bf: \u73fe\u5728\u306e\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\nmodule register2 (\n  input   wire        clock,\n  input   wire  [1:0] data,\n  output  reg   [1:0] q\n  );\n\n  always @ (posedge clock) begin\n    q <= data;\n  end\n  \nendmodule\n```\n|gray_counter\u306e\u30dd\u30fc\u30c8| I/O \u30c7\u30d0\u30a4\u30b9 |\n|:---:|:---:|\n|clock| GCLK3(\u30d7\u30c3\u30b7\u30e5\u30b9\u30a4\u30c3\u30c1) |\n|pause| SA0(\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1) |\n|y[1:0] | DA1~DA0(\u500b\u5225LED) |\n\n\u56de\u8def\u306e\u72b6\u614b\u9077\u79fb\u56f3\n![gray_counter_state_machine_diagram.png](https://qiita-image-store.s3.amazonaws.com/0/25656/5262c44d-1c75-461d-baff-a59b1eb11794.png)\n\n\u56de\u8def\u306e\u52d5\u4f5c\u4f8b\n![timing-chart-gray_code.png](https://qiita-image-store.s3.amazonaws.com/0/25656/382aa875-4219-2f76-bae2-883d68b25f8d.png)\n\n\u56de\u8def\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u6210\n![gray_counter.png](https://qiita-image-store.s3.amazonaws.com/0/25656/9333a9a6-6427-9583-597e-7602f4c89625.png)\n\n### \u89e3\u8aac\n\n\u8ab2\u984c6\u306b\u304a\u3051\u308b\u8a18\u61b6\u90e8\u3001\u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def\u4ee5\u4e0b\u306b\u793a\u3055\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u3002\n\n- \u8a18\u61b6\u90e8: register2\u30e2\u30b8\u30e5\u30fc\u30eb\n- \u6b21\u72b6\u614b\u95a2\u6570\u56de\u8def(\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def): next_state_function\u30e2\u30b8\u30e5\u30fc\u30eb\n\n\u51fa\u529b\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u4eca\u56de\u3001\u5404\u72b6\u614b\u3092\u8868\u30592\u30d3\u30c3\u30c8\u306e\u30d3\u30c3\u30c8\u8868\u73fe\u3092\u51fa\u529b\u4fe1\u53f7\u3068\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u305f\u305f\u3081\u3001\u7279\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u306f\u8a2d\u8a08\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u3002\u3042\u3048\u3066\u8a00\u3048\u3070\u3001gray_counter\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e`` assign y = state_now;``\u306e\u8a18\u8ff0\u304c\u51fa\u529b\u95a2\u6570\u306b\u76f8\u5f53\u3059\u308b\u3002\n\n\n\n", "tags": ["Verilog"]}