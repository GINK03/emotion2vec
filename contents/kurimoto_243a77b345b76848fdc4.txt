{"context": "\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u3001python\u3067\u307b\u3068\u3093\u3069\u540c\u3058\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nLINE BOT\u3001\u4f7f\u3063\u3066\u307f\u3066\u521d\u3081\u3066\u305d\u306e\u9762\u767d\u3055\u3068\u53ef\u80fd\u6027\u306b\u6c17\u3065\u304d\u307e\u3059\u3002\u3059\u3054\u304f\u697d\u3057\u3044\u3057\u4fbf\u5229\u3001\u3053\u308c\uff01\n\u30c8\u30e9\u30a4\u30a2\u30eb\u304c\u7d42\u308f\u3063\u305f\u5f8c\u3001\u3044\u3063\u305f\u3044\u3069\u3046\u306a\u308b\u306e\u304b\u975e\u5e38\u306b\u6c17\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u5b9f\u88c5\u3092\u3070\uff3e\uff3e\n\nhandler.py\n# coding:utf-8\n# !/usr/bin/python\n\nimport line\nimport json\n\n\ndef lambda_handler(event, context):\n    print(json.dumps(event, indent=4, separators=(',', ': ')))\n    content = event.get(\"result\")[0].get(\"content\") # \u672c\u5f53\u306f\u8907\u6570result\u304d\u307e\u3059\u3002lambda\u306a\u3089\u3068\u308a\u3042\u3048\u305a\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u3002\uff08SQS\u306b\u5165\u308c\u3066\u3082\u3044\u3044\u3051\u3069\uff09\n    line.set_return_text(content)\n    line.send_to_line(content)\n\n\u3068\u308a\u3042\u3048\u305aAWS Lambda\u306e\u5165\u308a\u53e3\u3002\nevent\u306bLINE\u304b\u3089\u306e\u60c5\u5831\u304c\u8a70\u307e\u3063\u305fjson\u3092\u3082\u3089\u3048\u308b\u306e\u3067\u3001\u305d\u3053\u304b\u3089\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066LINE\u30b5\u30fc\u30d0\u306b\u9001\u308a\u307e\u3059\u3002\n\nline.py\n# coding:utf-8\n# !/usr/bin/python\n\nimport vision\nimport json\nimport os\nimport requests\n\nCONTENT_TYPE_TEXT = 1  # Text message\nCONTENT_TYPE_IMAGE = 2  # Image message\nCONTENT_TYPE_VIDEO = 3  # Video message\nCONTENT_TYPE_AUDIO = 4  # Audio message\nCONTENT_TYPE_LOCATION = 7  # Location message\nCONTENT_TYPE_STICKER = 8  # Sticker message\nCONTENT_TYPE_CONTACT = 10  # Contact message\n\nLINE_BOT_API_EVENT = 'https://trialbot-api.line.me/v1/events'\nLINE_HEADERS = {\n    'Content-type': 'application/json; charset=UTF-8',\n    'X-Line-ChannelID': 999999999,  # Channel ID\n    'X-Line-ChannelSecret': 'hogehoge',  # Channel secre\n    'X-Line-Trusted-User-With-ACL': 'hogehoge'  # MID (of Channel)\n}\n\ndef set_return_text(content):\n    content_type = content.get(\"contentType\")\n    if content_type == CONTENT_TYPE_TEXT:\n        content[\"text\"] = u\"'\" + content.get(\"text\") + u\"' \u3067\u3059\u304b\u3001\u3001\u305d\u308c\u306f\u96e3\u3057\u3044\u8cea\u554f\u3067\u3059\u306d\u3002\" + os.linesep + \\\n                          u\"\u5199\u771f\u306a\u3089\u5f97\u610f\u3067\u3059\u3088\uff01\"\n    elif content_type == CONTENT_TYPE_IMAGE:\n        image = get_message_content(content)\n        content[\"text\"] = vision.get_image_text(image)\n    else:\n        content[\"text\"] = u\"\u3059\u3044\u307e\u305b\u3093\u3001\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093 >_<\" + os.linesep + \\\n                          u\"\u5199\u771f\u306a\u3089\u5f97\u610f\u3067\u3059\u3088\uff01\"\n    content[\"contentType\"] = CONTENT_TYPE_TEXT\n\n\ndef send_to_line(content):\n    data = {\n        'to': [content.get('from')],\n        'toChannel': 1383378250, #FIX\n        'eventType': \"138311608800106203\", #FIX\n        'content': content\n    };\n    r = requests.post(LINE_BOT_API_EVENT, headers=LINE_HEADERS, data=json.dumps(data))\n    print(r.content)\n\n\ndef get_message_content(content):\n    url = 'https://trialbot-api.line.me/v1/bot/message/%s/content' % content.get(\"id\")\n    r = requests.get(url, headers=LINE_HEADERS)\n    return r.content\n\nLINE_HEADER\u306b\u8a8d\u8a3c\u60c5\u5831\u3092\u8a70\u3081\u8fbc\u307f\u307e\u3059\u3002\u4eca\u306f\u30d9\u30bf\u66f8\u304d\u3067\u3059\u304c\u3001\u672c\u5f53\u306fAPIGateway\u306erequestTemplate\u3068\u304bstageVariable\u3042\u305f\u308a\u304b\u3089\u8a8d\u8a3c\u60c5\u5831\u57cb\u3081\u8fbc\u3080\u3068\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u6c5a\u308c\u306a\u304f\u3066\u826f\u3044\u3067\u3059\u306d\u3002\n\u5199\u771f\u304c\u9001\u3089\u308c\u3066\u304d\u305f\u5834\u5408\u3001\u305d\u306eid\u304b\u3089\u5199\u771f\u30c7\u30fc\u30bf\u3092\u3082\u3089\u3063\u3066\u304d\u3066\u3001vision.py\u306b\u6e21\u3057\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\nvision.py\n# coding:utf-8\n# !/usr/bin/python\n\n# Copyright 2016 Google, Inc\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport base64\nimport os\n\nfrom googleapiclient import discovery\nfrom oauth2client.service_account import ServiceAccountCredentials\n\nDISCOVERY_URL = 'https://{api}.googleapis.com/$discovery/rest?version={apiVersion}'\nGOOGLE_APPLICATION_CREDENTIALS = {\n    \"type\": \"service_account\" # \u8272\u3005\u7701\u7565\u3002GoogleDeveloperConsole\u304b\u3089\u8a8d\u8a3c\u60c5\u5831\u3082\u3089\u3063\u3066\u304d\u3066\u304f\u3060\u3055\u3044\u3002\n}\n\ndef get_image_text(image):\n    request = get_vision_service().images().annotate(body={\n        'requests': {\n            'image': {\n                'content': base64.b64encode(image)\n            },\n            'features': [\n                {\"type\": \"FACE_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"LABEL_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"TEXT_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"LANDMARK_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"LOGO_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"SAFE_SEARCH_DETECTION\", \"maxResults\": 5}\n            ],\n            'imageContext': {\n                'languageHints': [\n                    \"ja\",\n                    \"en\"\n                ]\n            }\n        },\n    })\n    response = request.execute()\n\n    annotation = response['responses'][0].get('safeSearchAnnotation')\n    if annotation.get(\"adult\") == \"POSSIBLE\" or annotation.get(\"adult\") == \"LIKELY\" or annotation.get(\n            \"adult\") == \"VERY_LIKELY\":\n        return u\"\u3048\u3063\u3061\u306a\u306e\u306f\u3044\u3051\u306a\u3044\u3068\u601d\u3044\u307e\u3059\uff01\"\n    if annotation.get(\"medical\") == \"POSSIBLE\" or annotation.get(\"medical\") == \"LIKELY\" or annotation.get(\n            \"adult\") == \"VERY_LIKELY\":\n        return u\"\u305d\u3046\u3044\u3046\u306e\u306f\u3061\u3087\u3063\u3068\u3001\u3001\"\n    if annotation.get(\"spoof\") == \"POSSIBLE\" or annotation.get(\"spoof\") == \"LIKELY\" or annotation.get(\n            \"adult\") == \"VERY_LIKELY\":\n        return u\"\u8a50\u6b3a\u306b\u304b\u3051\u3088\u3046\u3063\u305f\u3063\u3066\u305d\u3046\u306f\u3044\u304d\u307e\u305b\u3093\uff01\uff1f\"\n    if annotation.get(\"violence\") == \"POSSIBLE\" or annotation.get(\"violence\") == \"LIKELY\" or annotation.get(\n            \"adult\") == \"VERY_LIKELY\":\n        return u\"\u3042\u3063\u3001\u66b4\u529b\u306f\u30c0\u30e1\u3067\u3059\uff01\u30c0\u30e1\u3067\u3059\uff01\u304e\u3083\u30fc\uff01\"\n\n    text = u\"\"\n    annotations = response['responses'][0].get('labelAnnotations')\n    if annotations != None:\n        text = text + u'\u591a\u5206\u3053\u3093\u306a\u611f\u3058\u306e\u5199\u771f\u3060\u3068\u601d\u3044\u307e\u3059\u3002' + os.linesep\n        for annotation in annotations:\n            text = text + u'[ ' + annotation.get(\"description\") + u' ]' + os.linesep\n        text = text + os.linesep\n\n    annotations = response['responses'][0].get('textAnnotations')\n    if annotations != None:\n        text = text + u\"\u3053\u3093\u306a\u6587\u5b57\u304c\u5199\u3063\u3066\u307e\u3059\u3088\u306d\u3002\" + os.linesep\n        for annotation in annotations:\n            text = text + u'[ ' + annotation.get(\"description\") + u' ]' + os.linesep\n        text = text + os.linesep\n\n    annotations = response['responses'][0].get('faceAnnotations')\n    if annotations != None:\n        text = text + str(len(annotations)) + u\"\u4eba\u5199\u3063\u3066\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3057\u305f\uff01\" + os.linesep\n        count = 1\n        for annotation in annotations:\n            text = text + str(count) + u'\u4eba\u76ee\u306f'\n            if annotation.get(\"joyLikelihood\") == \"POSSIBLE\" or annotation.get(\"joyLikelihood\") == \"LIKELY\" or annotation.get(\"joyLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u697d\u3057\u305d\u3046!\" + os.linesep\n            elif annotation.get(\"sorrowLikelihood\") == \"POSSIBLE\" or annotation.get(\"sorrowLikelihood\") == \"LIKELY\" or annotation.get(\"sorrowLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u60b2\u3057\u305d\u3046\u3001\u3001!\" + os.linesep\n            elif annotation.get(\"angerLikelihood\") == \"POSSIBLE\" or annotation.get(\"angerLikelihood\") == \"LIKELY\" or annotation.get(\"angerLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u6012\u3063\u3066\u307e\u3059\uff1f\" + os.linesep\n            elif annotation.get(\"surpriseLikelihood\") == \"POSSIBLE\" or annotation.get(\"surpriseLikelihood\") == \"LIKELY\" or annotation.get(\"surpriseLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u9a5a\u3044\u3066\u308b!!\" + os.linesep\n            elif annotation.get(\"underExposedLikelihood\") == \"POSSIBLE\" or annotation.get(\"underExposedLikelihood\") == \"LIKELY\" or annotation.get(\"underExposedLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u3042\u308c\u3001\u9732\u51fa\u4e0d\u8db3\u3067\u3059\u304b\u306d\u3002\" + os.linesep\n            elif annotation.get(\"blurredLikelihood\") == \"POSSIBLE\" or annotation.get(\"blurredLikelihood\") == \"LIKELY\" or annotation.get(\"blurredLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u30d4\u30f3\u30dc\u30b1\u3060 >_<\" + os.linesep\n            elif annotation.get(\"headwearLikelihood\") == \"POSSIBLE\" or annotation.get(\"headwearLikelihood\") == \"LIKELY\" or annotation.get(\"headwearLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u5e3d\u5b50\u304b\u3076\u3063\u3066\u307e\u3059\uff1f\" + os.linesep\n            else:\n                text = text + u\"\u666e\u901a\uff1f\" + os.linesep\n            count = count + 1\n        text = text + os.linesep\n\n    annotations = response['responses'][0].get('landmarkAnnotations')\n    if annotations != None:\n        text = text + u\"\u304a\u3063\u3001\u591a\u5206\u3053\u306e\u5834\u6240\u3067\u3059\u3088\u306d\uff01\" + os.linesep\n        for annotation in annotations:\n            text = text + u'[ ' + annotation.get(\"description\") + u' ]' + os.linesep\n        text = text + os.linesep\n\n    annotations = response['responses'][0].get('logoAnnotations')\n    if annotations != None:\n        text = text + u\"\u3042\u3063\u3001\u77e5\u3063\u3066\u307e\u3059\u3088\u3053\u306e\u30ed\u30b4\u3002\" + os.linesep\n        for annotation in annotations:\n            text = text + u'[ ' + annotation.get(\"description\") + u' ]' + os.linesep\n        text = text + os.linesep\n\n    print text\n    return text\n\n\ndef get_vision_service():\n    credentials = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_APPLICATION_CREDENTIALS)\n    return discovery.build('vision', 'v1', credentials=credentials,\n                           discoveryServiceUrl=DISCOVERY_URL)\n\n\n\u8a8d\u8a3c\u60c5\u5831\u3092\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308bGoogleCredentials\u3067\u306f\u306a\u304f\u3001ServiceAccountCredentials\u3067\u53d6\u5f97\u3057\u3066\u308b\u306e\u306f\u3001git\u306b\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u8a8d\u8a3c\u60c5\u5831\u4fdd\u5b58\u3057\u305f\u304f\u306a\u304b\u3063\u305f\uff08API Gateway\u7d4c\u7531\u3067\u6e21\u3057\u305f\u304b\u3063\u305f\uff09\u304b\u3089\u3067\u3059\u3002line.py\u3068\u540c\u3058\u304f\u672a\u5b9f\u88c5\u3067\u3059\u3051\u3069\u3002\n\n\u611f\u60f3\nLINE BOT\u306fSlack\u7684\u306a\u4fbf\u5229\u3055\u3092\u591a\u304f\u306e\u30e6\u30fc\u30b6\u306b\u5c4a\u3051\u3089\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u3059\u3054\u304f\u53ef\u80fd\u6027\u3092\u611f\u3058\u307e\u3059\u3002\n\u793e\u5185\u306b\u9650\u3063\u3066\u3060\u3051\u3067\u3082\u3001\u696d\u52d9\u7cfb\u3067\u3084\u3063\u3066\u308b\u3053\u3068\u3001\u4f8b\u3048\u3070AWS\u30ea\u30bd\u30fc\u30b9\u306e\u30d7\u30ed\u30d3\u30b8\u30e7\u30cb\u30f3\u30b0\u3060\u3068\u304b\u3001\u30a2\u30af\u30bb\u30b9\u72b6\u6cc1\u306e\u78ba\u8a8d\u3060\u3068\u304b\u3001\u958b\u767a\u8005\u304c\u30c4\u30fc\u30eb\u3092\u99c6\u4f7f\u3057\u3066\u3084\u3063\u3066\u305f\u3053\u3068\u304c\u3001LINE\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306a\u3089\u975e\u958b\u767a\u8005\u3067\u3082\u30b9\u30a4\u30b9\u30a4\u4f7f\u3048\u308b\u3088\u3046\u306b\u3067\u304d\u308b\u6c17\u304c\u3059\u308b\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u6b21\u306fVision API\u306eLABEL_DETECTION\u3067\u53d6\u5f97\u3057\u305f\u7d50\u679c\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9762\u767d\u304a\u304b\u3057\u304f\u3059\u308b\u5b9f\u88c5\u3067\u3082\u5165\u308c\u3088\u3046\u304b\u306a\uff01\n[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/dkawashi/items/4329d8ec085678b346e4\n)\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u3001python\u3067\u307b\u3068\u3093\u3069\u540c\u3058\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nLINE BOT\u3001\u4f7f\u3063\u3066\u307f\u3066\u521d\u3081\u3066\u305d\u306e\u9762\u767d\u3055\u3068\u53ef\u80fd\u6027\u306b\u6c17\u3065\u304d\u307e\u3059\u3002\u3059\u3054\u304f\u697d\u3057\u3044\u3057\u4fbf\u5229\u3001\u3053\u308c\uff01\n\n\u30c8\u30e9\u30a4\u30a2\u30eb\u304c\u7d42\u308f\u3063\u305f\u5f8c\u3001\u3044\u3063\u305f\u3044\u3069\u3046\u306a\u308b\u306e\u304b\u975e\u5e38\u306b\u6c17\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u5b9f\u88c5\u3092\u3070\uff3e\uff3e\n\n## handler.py\n```\n# coding:utf-8\n# !/usr/bin/python\n\nimport line\nimport json\n\n\ndef lambda_handler(event, context):\n    print(json.dumps(event, indent=4, separators=(',', ': ')))\n    content = event.get(\"result\")[0].get(\"content\") # \u672c\u5f53\u306f\u8907\u6570result\u304d\u307e\u3059\u3002lambda\u306a\u3089\u3068\u308a\u3042\u3048\u305a\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u3002\uff08SQS\u306b\u5165\u308c\u3066\u3082\u3044\u3044\u3051\u3069\uff09\n    line.set_return_text(content)\n    line.send_to_line(content)\n```\n\n\u3068\u308a\u3042\u3048\u305aAWS Lambda\u306e\u5165\u308a\u53e3\u3002\nevent\u306bLINE\u304b\u3089\u306e\u60c5\u5831\u304c\u8a70\u307e\u3063\u305fjson\u3092\u3082\u3089\u3048\u308b\u306e\u3067\u3001\u305d\u3053\u304b\u3089\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066LINE\u30b5\u30fc\u30d0\u306b\u9001\u308a\u307e\u3059\u3002\n\n## line.py\n```\n# coding:utf-8\n# !/usr/bin/python\n\nimport vision\nimport json\nimport os\nimport requests\n\nCONTENT_TYPE_TEXT = 1  # Text message\nCONTENT_TYPE_IMAGE = 2  # Image message\nCONTENT_TYPE_VIDEO = 3  # Video message\nCONTENT_TYPE_AUDIO = 4  # Audio message\nCONTENT_TYPE_LOCATION = 7  # Location message\nCONTENT_TYPE_STICKER = 8  # Sticker message\nCONTENT_TYPE_CONTACT = 10  # Contact message\n\nLINE_BOT_API_EVENT = 'https://trialbot-api.line.me/v1/events'\nLINE_HEADERS = {\n    'Content-type': 'application/json; charset=UTF-8',\n    'X-Line-ChannelID': 999999999,  # Channel ID\n    'X-Line-ChannelSecret': 'hogehoge',  # Channel secre\n    'X-Line-Trusted-User-With-ACL': 'hogehoge'  # MID (of Channel)\n}\n\ndef set_return_text(content):\n    content_type = content.get(\"contentType\")\n    if content_type == CONTENT_TYPE_TEXT:\n        content[\"text\"] = u\"'\" + content.get(\"text\") + u\"' \u3067\u3059\u304b\u3001\u3001\u305d\u308c\u306f\u96e3\u3057\u3044\u8cea\u554f\u3067\u3059\u306d\u3002\" + os.linesep + \\\n                          u\"\u5199\u771f\u306a\u3089\u5f97\u610f\u3067\u3059\u3088\uff01\"\n    elif content_type == CONTENT_TYPE_IMAGE:\n        image = get_message_content(content)\n        content[\"text\"] = vision.get_image_text(image)\n    else:\n        content[\"text\"] = u\"\u3059\u3044\u307e\u305b\u3093\u3001\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093 >_<\" + os.linesep + \\\n                          u\"\u5199\u771f\u306a\u3089\u5f97\u610f\u3067\u3059\u3088\uff01\"\n    content[\"contentType\"] = CONTENT_TYPE_TEXT\n\n\ndef send_to_line(content):\n    data = {\n        'to': [content.get('from')],\n        'toChannel': 1383378250, #FIX\n        'eventType': \"138311608800106203\", #FIX\n        'content': content\n    };\n    r = requests.post(LINE_BOT_API_EVENT, headers=LINE_HEADERS, data=json.dumps(data))\n    print(r.content)\n\n\ndef get_message_content(content):\n    url = 'https://trialbot-api.line.me/v1/bot/message/%s/content' % content.get(\"id\")\n    r = requests.get(url, headers=LINE_HEADERS)\n    return r.content\n```\nLINE_HEADER\u306b\u8a8d\u8a3c\u60c5\u5831\u3092\u8a70\u3081\u8fbc\u307f\u307e\u3059\u3002\u4eca\u306f\u30d9\u30bf\u66f8\u304d\u3067\u3059\u304c\u3001\u672c\u5f53\u306fAPIGateway\u306erequestTemplate\u3068\u304bstageVariable\u3042\u305f\u308a\u304b\u3089\u8a8d\u8a3c\u60c5\u5831\u57cb\u3081\u8fbc\u3080\u3068\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u6c5a\u308c\u306a\u304f\u3066\u826f\u3044\u3067\u3059\u306d\u3002\n\n\u5199\u771f\u304c\u9001\u3089\u308c\u3066\u304d\u305f\u5834\u5408\u3001\u305d\u306eid\u304b\u3089\u5199\u771f\u30c7\u30fc\u30bf\u3092\u3082\u3089\u3063\u3066\u304d\u3066\u3001vision.py\u306b\u6e21\u3057\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n## vision.py\n```\n# coding:utf-8\n# !/usr/bin/python\n\n# Copyright 2016 Google, Inc\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport base64\nimport os\n\nfrom googleapiclient import discovery\nfrom oauth2client.service_account import ServiceAccountCredentials\n\nDISCOVERY_URL = 'https://{api}.googleapis.com/$discovery/rest?version={apiVersion}'\nGOOGLE_APPLICATION_CREDENTIALS = {\n    \"type\": \"service_account\" # \u8272\u3005\u7701\u7565\u3002GoogleDeveloperConsole\u304b\u3089\u8a8d\u8a3c\u60c5\u5831\u3082\u3089\u3063\u3066\u304d\u3066\u304f\u3060\u3055\u3044\u3002\n}\n\ndef get_image_text(image):\n    request = get_vision_service().images().annotate(body={\n        'requests': {\n            'image': {\n                'content': base64.b64encode(image)\n            },\n            'features': [\n                {\"type\": \"FACE_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"LABEL_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"TEXT_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"LANDMARK_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"LOGO_DETECTION\", \"maxResults\": 5},\n                {\"type\": \"SAFE_SEARCH_DETECTION\", \"maxResults\": 5}\n            ],\n            'imageContext': {\n                'languageHints': [\n                    \"ja\",\n                    \"en\"\n                ]\n            }\n        },\n    })\n    response = request.execute()\n\n    annotation = response['responses'][0].get('safeSearchAnnotation')\n    if annotation.get(\"adult\") == \"POSSIBLE\" or annotation.get(\"adult\") == \"LIKELY\" or annotation.get(\n            \"adult\") == \"VERY_LIKELY\":\n        return u\"\u3048\u3063\u3061\u306a\u306e\u306f\u3044\u3051\u306a\u3044\u3068\u601d\u3044\u307e\u3059\uff01\"\n    if annotation.get(\"medical\") == \"POSSIBLE\" or annotation.get(\"medical\") == \"LIKELY\" or annotation.get(\n            \"adult\") == \"VERY_LIKELY\":\n        return u\"\u305d\u3046\u3044\u3046\u306e\u306f\u3061\u3087\u3063\u3068\u3001\u3001\"\n    if annotation.get(\"spoof\") == \"POSSIBLE\" or annotation.get(\"spoof\") == \"LIKELY\" or annotation.get(\n            \"adult\") == \"VERY_LIKELY\":\n        return u\"\u8a50\u6b3a\u306b\u304b\u3051\u3088\u3046\u3063\u305f\u3063\u3066\u305d\u3046\u306f\u3044\u304d\u307e\u305b\u3093\uff01\uff1f\"\n    if annotation.get(\"violence\") == \"POSSIBLE\" or annotation.get(\"violence\") == \"LIKELY\" or annotation.get(\n            \"adult\") == \"VERY_LIKELY\":\n        return u\"\u3042\u3063\u3001\u66b4\u529b\u306f\u30c0\u30e1\u3067\u3059\uff01\u30c0\u30e1\u3067\u3059\uff01\u304e\u3083\u30fc\uff01\"\n\n    text = u\"\"\n    annotations = response['responses'][0].get('labelAnnotations')\n    if annotations != None:\n        text = text + u'\u591a\u5206\u3053\u3093\u306a\u611f\u3058\u306e\u5199\u771f\u3060\u3068\u601d\u3044\u307e\u3059\u3002' + os.linesep\n        for annotation in annotations:\n            text = text + u'[ ' + annotation.get(\"description\") + u' ]' + os.linesep\n        text = text + os.linesep\n\n    annotations = response['responses'][0].get('textAnnotations')\n    if annotations != None:\n        text = text + u\"\u3053\u3093\u306a\u6587\u5b57\u304c\u5199\u3063\u3066\u307e\u3059\u3088\u306d\u3002\" + os.linesep\n        for annotation in annotations:\n            text = text + u'[ ' + annotation.get(\"description\") + u' ]' + os.linesep\n        text = text + os.linesep\n\n    annotations = response['responses'][0].get('faceAnnotations')\n    if annotations != None:\n        text = text + str(len(annotations)) + u\"\u4eba\u5199\u3063\u3066\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3057\u305f\uff01\" + os.linesep\n        count = 1\n        for annotation in annotations:\n            text = text + str(count) + u'\u4eba\u76ee\u306f'\n            if annotation.get(\"joyLikelihood\") == \"POSSIBLE\" or annotation.get(\"joyLikelihood\") == \"LIKELY\" or annotation.get(\"joyLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u697d\u3057\u305d\u3046!\" + os.linesep\n            elif annotation.get(\"sorrowLikelihood\") == \"POSSIBLE\" or annotation.get(\"sorrowLikelihood\") == \"LIKELY\" or annotation.get(\"sorrowLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u60b2\u3057\u305d\u3046\u3001\u3001!\" + os.linesep\n            elif annotation.get(\"angerLikelihood\") == \"POSSIBLE\" or annotation.get(\"angerLikelihood\") == \"LIKELY\" or annotation.get(\"angerLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u6012\u3063\u3066\u307e\u3059\uff1f\" + os.linesep\n            elif annotation.get(\"surpriseLikelihood\") == \"POSSIBLE\" or annotation.get(\"surpriseLikelihood\") == \"LIKELY\" or annotation.get(\"surpriseLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u9a5a\u3044\u3066\u308b!!\" + os.linesep\n            elif annotation.get(\"underExposedLikelihood\") == \"POSSIBLE\" or annotation.get(\"underExposedLikelihood\") == \"LIKELY\" or annotation.get(\"underExposedLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u3042\u308c\u3001\u9732\u51fa\u4e0d\u8db3\u3067\u3059\u304b\u306d\u3002\" + os.linesep\n            elif annotation.get(\"blurredLikelihood\") == \"POSSIBLE\" or annotation.get(\"blurredLikelihood\") == \"LIKELY\" or annotation.get(\"blurredLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u30d4\u30f3\u30dc\u30b1\u3060 >_<\" + os.linesep\n            elif annotation.get(\"headwearLikelihood\") == \"POSSIBLE\" or annotation.get(\"headwearLikelihood\") == \"LIKELY\" or annotation.get(\"headwearLikelihood\") == \"VERY_LIKELY\":\n                text = text + u\"\u5e3d\u5b50\u304b\u3076\u3063\u3066\u307e\u3059\uff1f\" + os.linesep\n            else:\n                text = text + u\"\u666e\u901a\uff1f\" + os.linesep\n            count = count + 1\n        text = text + os.linesep\n\n    annotations = response['responses'][0].get('landmarkAnnotations')\n    if annotations != None:\n        text = text + u\"\u304a\u3063\u3001\u591a\u5206\u3053\u306e\u5834\u6240\u3067\u3059\u3088\u306d\uff01\" + os.linesep\n        for annotation in annotations:\n            text = text + u'[ ' + annotation.get(\"description\") + u' ]' + os.linesep\n        text = text + os.linesep\n\n    annotations = response['responses'][0].get('logoAnnotations')\n    if annotations != None:\n        text = text + u\"\u3042\u3063\u3001\u77e5\u3063\u3066\u307e\u3059\u3088\u3053\u306e\u30ed\u30b4\u3002\" + os.linesep\n        for annotation in annotations:\n            text = text + u'[ ' + annotation.get(\"description\") + u' ]' + os.linesep\n        text = text + os.linesep\n\n    print text\n    return text\n\n\ndef get_vision_service():\n    credentials = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_APPLICATION_CREDENTIALS)\n    return discovery.build('vision', 'v1', credentials=credentials,\n                           discoveryServiceUrl=DISCOVERY_URL)\n\n```\n\n\u8a8d\u8a3c\u60c5\u5831\u3092[\u30b5\u30f3\u30d7\u30eb](https://github.com/GoogleCloudPlatform/cloud-vision/tree/master/python/text)\u306b\u3042\u308bGoogleCredentials\u3067\u306f\u306a\u304f\u3001ServiceAccountCredentials\u3067\u53d6\u5f97\u3057\u3066\u308b\u306e\u306f\u3001git\u306b\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u8a8d\u8a3c\u60c5\u5831\u4fdd\u5b58\u3057\u305f\u304f\u306a\u304b\u3063\u305f\uff08API Gateway\u7d4c\u7531\u3067\u6e21\u3057\u305f\u304b\u3063\u305f\uff09\u304b\u3089\u3067\u3059\u3002line.py\u3068\u540c\u3058\u304f\u672a\u5b9f\u88c5\u3067\u3059\u3051\u3069\u3002\n\n# \u611f\u60f3\nLINE BOT\u306fSlack\u7684\u306a\u4fbf\u5229\u3055\u3092\u591a\u304f\u306e\u30e6\u30fc\u30b6\u306b\u5c4a\u3051\u3089\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u3059\u3054\u304f\u53ef\u80fd\u6027\u3092\u611f\u3058\u307e\u3059\u3002\n\n\u793e\u5185\u306b\u9650\u3063\u3066\u3060\u3051\u3067\u3082\u3001\u696d\u52d9\u7cfb\u3067\u3084\u3063\u3066\u308b\u3053\u3068\u3001\u4f8b\u3048\u3070AWS\u30ea\u30bd\u30fc\u30b9\u306e\u30d7\u30ed\u30d3\u30b8\u30e7\u30cb\u30f3\u30b0\u3060\u3068\u304b\u3001\u30a2\u30af\u30bb\u30b9\u72b6\u6cc1\u306e\u78ba\u8a8d\u3060\u3068\u304b\u3001\u958b\u767a\u8005\u304c\u30c4\u30fc\u30eb\u3092\u99c6\u4f7f\u3057\u3066\u3084\u3063\u3066\u305f\u3053\u3068\u304c\u3001LINE\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306a\u3089\u975e\u958b\u767a\u8005\u3067\u3082\u30b9\u30a4\u30b9\u30a4\u4f7f\u3048\u308b\u3088\u3046\u306b\u3067\u304d\u308b\u6c17\u304c\u3059\u308b\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u6b21\u306fVision API\u306eLABEL_DETECTION\u3067\u53d6\u5f97\u3057\u305f\u7d50\u679c\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9762\u767d\u304a\u304b\u3057\u304f\u3059\u308b\u5b9f\u88c5\u3067\u3082\u5165\u308c\u3088\u3046\u304b\u306a\uff01\n", "tags": ["linebot", "AWSLambda", "CloudVisionAPI", "Python"]}