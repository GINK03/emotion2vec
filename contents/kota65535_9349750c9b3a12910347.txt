{"context": " More than 1 year has passed since last update.\u305b\u3063\u304b\u304fC++\u3067\u66f8\u3051\u308b\u306e\u3060\u304b\u3089\u3001\u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306e\u30b9\u30b1\u30c3\u30c1\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u3044\u308b\u3068\u3001\u3084\u306f\u308aSTL(Standard Template Library)\u304c\u4f7f\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u3088\u306d\uff1f\n\u305d\u3093\u306a\u4eba\u306e\u305f\u3081\u306eSTL\u306eAVR\u30de\u30a4\u30b3\u30f3\u3078\u306e\u79fb\u690d\u7248\u304c\u3001\u3053\u306e\nThe STL for AVR with C++ streams\n\u3067\u3059\u3002\nC++\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5143\u306b\u3082\u306a\u3063\u305fSG I STL\u3092\u30d9\u30fc\u30b9\u306b\u79fb\u690d\u3092\u884c\u3063\u305f\u3089\u3057\u304f\u3001SGI STL\u306b\u306f\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u304c\u7121\u3044\u306e\u3067\u308f\u3056\u308f\u3056uClibc++\u304b\u3089\u53d6\u3063\u3066\u304d\u305f\u308a\u3001\u66f4\u306b\u306fArduino\u30e6\u30fc\u30b6\u30fc\u306e\u305f\u3081\u306b\u30b7\u30ea\u30a2\u30eb\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u3084\u3001LCD\u51fa\u529b\u30af\u30e9\u30b9\u306a\u3069\u3082\u7528\u610f\u3057\u3066\u304f\u308c\u308b\u89aa\u5207\u3063\u3077\u308a\u3002\n\u3053\u308c\u3092\u4f7f\u308f\u306a\u3044\u624b\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n1. \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u304b\u3089Downloads -> Arduino downloads \u3068\u9032\u3093\u3060\u5148\u306b\u3042\u308a\u307e\u3059\u30022015/5/25\u6642\u70b9\u3067\u306e\u6700\u65b0\u7248\u306f1.1.1\u3067\u3059\u3002\n\u958b\u767a\u74b0\u5883\u304ceclipse\u306a\u3089\u3001\u9069\u5f53\u306a\u5834\u6240\u306b\u89e3\u51cd\u3057\u3066avr-stl/include\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\nArduino IDE\u306e\u5834\u5408\u306f\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u4e38\u3054\u3068${arduino\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148}/hardware/tools/avr/avr/include\u306b\u3076\u3061\u3053\u3081\u3070OK\u3067\u3059\u3002\n\n2. \u30b7\u30a7\u30eb\u30af\u30e9\u30b9\u306e\u4f5c\u6210\nArduino\u5411\u3051\u306e\u30b7\u30ea\u30a2\u30eb\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001\u30db\u30b9\u30c8\u3068\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3057\u306a\u304c\u3089\u52d5\u304f\u7c21\u5358\u306a\u30b7\u30a7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u793a\u3057\u3001\u5165\u529b\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u3092\u30d1\u30fc\u30b9\u3057\u3066\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n2-1. \u524d\u6e96\u5099\n\u30b7\u30a7\u30eb\u30af\u30e9\u30b9\u3092\u66f8\u304f\u524d\u306b\u3001\u3061\u3087\u3053\u3063\u3068\u3053\u306eAVR-STL\u306b\u66f8\u304d\u8db3\u3057\u307e\u3059\u3002\nArduino\u3067\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u5165\u529b\u3092\u884c\u3046\u6642\u306f\u3001HardwareSerial\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308bSerial\u3092\u4f7f\u3063\u3066\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\nHardwareSerial\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u5834\u5408\n\nvoid loop() {\n    char c;\n    if (Serial.available() > 0) {\n        c = Serial.read();\n        Serial.print(\"input: \");\n        Serial.println(c);\n    }\n}\n\n\n\u5b9f\u306f\u3001serstream\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5165\u529b\u30b7\u30ea\u30a2\u30eb\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9ihserialstream\u306b\u306f\u3001\u3053\u306eSerial.available()\u306b\u76f8\u5f53\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3060\u3068\u3001\u300c\u4f55\u304b\u5165\u529b\u304c\u3042\u3063\u305f\u6642\u3060\u3051\u51e6\u7406\u3059\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u305a\u5927\u5909\u4e0d\u4fbf\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8ffd\u8a18\u3057\u3066\u3084\u308a\u307e\u3059\u3002\n\nserstream\n/*\n * Input stream\n */\n\n    template <class charT, class traits, class Tserial> class basic_iserialstream\n        : public basic_istream<charT,traits>\n    {\n    public:\n\n    ~~~\u3053\u3053\u304b\u3089~~~\n\n    /*\n     * get how many characters available\n     */\n        int available() {\n            return sb.serial().available();\n        }\n\n    ~~~\u3053\u3053\u307e\u3067~~~\n\n    }\n\n\nihserialstream\u304c\u5185\u90e8\u3067\u4fdd\u6301\u3057\u3066\u3044\u308bHardwareSerial\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089available()\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u3092\u7528\u3044\u3066\u5148\u307b\u3069\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u3001\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u5834\u5408\n\n// \u5b9a\u7fa9\u6e08\u307f\u306eHardwareSerial\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306eSerial\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\nstd::ohserialstream serout(Serial);\nstd::ihserialstream serin(Serial);\n\nvoid loop() {\n\n    char c;\n    if (serin.available() > 0) {\n        serin >> c;\n        serout << \"input: \" << c << std::crlf;\n    }\n}\n\n\n\n\n2-2. SerialShell\u30af\u30e9\u30b9\nSerialShell\u30af\u30e9\u30b9\u306e\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3001\u30ea\u30bf\u30fc\u30f3\u304c\u62bc\u3055\u308c\u308b\u307e\u3067\u306e\u6587\u5b57\u5217\u3092\u4fdd\u6301\n\u7a7a\u767d\u6587\u5b57\u3067\u5206\u5272\u3057\u3001\u5f15\u6570\u3068\u3057\u3066\u914d\u5217\u306b\u683c\u7d0d\n\n\u304c\u4e3b\u306a\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\nSerialShell.h\n#ifndef SERIAL_SHELL_\n#define SERIAL_SHELL_\n\nclass SerialShell {\nprivate:\n    std::ohserialstream& serout;    // \u51fa\u529b\u7528\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u53c2\u7167\n    std::ihserialstream& serin;     // \u5165\u529b\u7528\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u53c2\u7167\n    std::string buffer;\n    std::vector<std::string> args;\n    bool is_prompting;\n\npublic:\n    SerialShell(std::ohserialstream* serout, std::ihserialstream* serin);\n    virtual ~SerialShell();\n\n    int readCommand();\n    std::vector<std::string> getArgs();\n    void printArgs();\n\nprivate:\n    void parseCommand();\n};\n\n#endif /* SERIAL_SHELL_ */\n\n\n\nSerialShell.cpp\n#include <Arduino.h>\n#include <serstream>\n#include <iterator>\n#include <vector>\n#include <string>\n#include \"SerialShell.h\"\n\n\nSerialShell::SerialShell(std::ohserialstream* serout, std::ihserialstream* serin)\n    : serout(*serout),\n      serin(*serin),\n      buffer(\"\"),\n      args(0),\n      is_prompting(false) {\n\n}\n\nSerialShell::~SerialShell() {\n}\n\n// \u30b3\u30de\u30f3\u30c9\u306e\u5f15\u6570\u3092\u8868\u793a\u3059\u308b\nvoid SerialShell::printArgs()\n{\n    serout << args.size() << \" args: \";\n    for (std::vector<std::string>::iterator it = args.begin() ; it  < args.end() ; ++it) {\n        serout << *it;\n        if (it < args.end() - 1) {\n            serout << \", \";\n        }\n    }\n    serout << std::crlf;\n}\n\n// \u30b3\u30de\u30f3\u30c9\u306e\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\nstd::vector<std::string> SerialShell::getArgs()\n{\n    return args;\n}\n\n// \u30b3\u30de\u30f3\u30c9\u3092\u8aad\u307f\u8fbc\u3080\nint SerialShell::readCommand() {\n\n    char c = 0;\n\n    // \u30d7\u30ed\u30f3\u30d7\u30c8\u306e\u8868\u793a\n    if (! is_prompting) {\n        serout << \"# \";\n        is_prompting = true;\n    }\n\n    if (serin.available() > 0) {\n        serin.get(c);\n        if (c == '\\r') {\n            // CR\u3092NL\u3067\u7f6e\u304d\u63db\u3048\u3066\u3001\u30cc\u30eb\u6587\u5b57\u3092\u8ffd\u52a0\n            buffer += \"\\n\\0\";\n            // \u30b3\u30de\u30f3\u30c9\u306e\u30d1\u30fc\u30b9\n            parseCommand();\n            // \u30d0\u30c3\u30d5\u30a1\u3092\u30af\u30ea\u30a2\n            buffer = \"\";\n            // \u30a8\u30b3\u30fc\u30d0\u30c3\u30af\n            serout << std::crlf;\n            is_prompting = false;\n            return 1;\n        }\n        else {\n            // \u30d0\u30c3\u30d5\u30a1\u306b\u8ffd\u52a0\n            buffer += c;\n            // \u30a8\u30b3\u30fc\u30d0\u30c3\u30af\n            serout << c;\n            return 0;\n        }\n    }\n    else {\n        return -1;\n    }\n}\n\n// \u30b3\u30de\u30f3\u30c9\u3092\u30d1\u30fc\u30b9\u3057\u3066\u5f15\u6570\u3092vector\u306b\u683c\u7d0d\u3059\u308b\nvoid SerialShell::parseCommand() {\n\n    unsigned int start =0, end = 0;\n\n    args.clear();\n    while (end < buffer.length()) {\n        start = buffer.find_first_not_of(\" \\t\\n\", end);\n        end = buffer.find_first_of(\" \\t\\n\", start);\n        if (end-start > 0) {\n            args.push_back(buffer.substr(start, end-start));\n        }\n    }\n}\n\n\n\n3. \u4f7f\u3044\u65b9\n\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\nreadCommand()\u306e\u8fd4\u308a\u5024\u3092\u898b\u30660\u3088\u308a\u5927\u304d\u304b\u3063\u305f\u3089\u3001getArgs()\u3067\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\nSerialShellTest.cpp\n#include <Arduino.h>\n#include <pnew.cpp>\n#include <serstream>\n#include <iterator>\n#include <vector>\n#include \"SerialShell.h\"\n#include \"SerialShellTest.h\"\n\n// \u5b9a\u7fa9\u6e08\u307f\u306eHardwareSerial\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306eSerial\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\nstd::ohserialstream serout(Serial);\nstd::ihserialstream serin(Serial);\n\nSerialShell* shell;\n\nvoid setup()\n{\n    Serial.begin(9600);\n    // \u5165\u51fa\u529b\u30b7\u30ea\u30a2\u30eb\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3067\u521d\u671f\u5316\n    shell = new SerialShell(&serout, &serin);\n}\n\nvoid loop()\n{\n    int ret;\n    std::vector<std::string> args;  // \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u306e\u30ea\u30b9\u30c8\n\n    // \u30b3\u30de\u30f3\u30c9\u8aad\u307f\u53d6\u308a\n    ret = shell->readCommand();\n    // ret\u3000>\u30000 \u306a\u3089\u6709\u52b9\u30c7\u30fc\u30bf\u3042\u308a\n    if (ret > 0) {\n        // \u5f15\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8868\u793a\n        shell->printArgs();\n        // \u5f15\u6570\u306e\u30ea\u30b9\u30c8\u3092Get\n        args = shell->getArgs();\n        // \u7b2c1\u5f15\u6570\u3067\u51e6\u7406\u5206\u5c90\n        if (args[0] == \"hoge\") {\n            serout << \"func hoge\" << std::crlf;\n        }\n        else if (args[0] == \"piyo\") {\n            serout << \"func piyo\" << std::crlf;\n        }\n    }\n}\n\n\n\n\n4. \u5b9f\u884c\u7d50\u679c\n$ sudo cu -l /dev/cu.usbmodem1411  -s 9600\nConnected.\n# ai ue   o\n3 args: ai, ue, o\n# The quick brown fox jumps over the lazy dog\n9 args: The, quick, brown, fox, jumps, over, the, lazy, dog\n# \n0 args:\n\n\u5165\u529b\u3057\u305f\u30b3\u30de\u30f3\u30c9\u306e\u5f15\u6570\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n# hoge\n1 args: hoge\nfunc hoge\n# piyo 123 \n2 args: piyo, 123\nfunc piyo\n\n\u51e6\u7406\u5206\u5c90\u3082\u3067\u304d\u3066\u3044\u307e\u3059\u306d\u3002\n\n5. \u6240\u611f\n\u3046\u30fc\u3093\u3084\u3063\u3071\u308aSTL\u306f\u4fbf\u5229\u3067\u3059\u306d\uff01Serial.println()\u3060\u3068\u6587\u5b57\u5217\u3068\u5909\u6570\u3092\u51fa\u529b\u3057\u305f\u3044\u6642\u306b\nSerial.print(\"The value is: \");\nSerial.println(value);\n\n\u307f\u305f\u3044\u306b\u8907\u6570\u884c\u66f8\u304b\u306a\u304d\u3083\u3044\u3051\u307e\u305b\u3093\u304c\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u306e\u304a\u304b\u3052\u3067\u3059\u3063\u304d\u308a\u66f8\u3051\u307e\u3057\u305f\u3002\nstd::crlf\u306fAVR-STL\u306e\u72ec\u81ea\u5b9a\u7fa9\u3067\u3001\u30ad\u30e3\u30ea\u30c3\u30b8\u30ea\u30bf\u30fc\u30f3(CR)\u3068\u30e9\u30a4\u30f3\u30d5\u30a3\u30fc\u30c9(LF)\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\nvector, string\u30af\u30e9\u30b9\u3082\u7279\u306b\u554f\u984c\u306a\u304f\u666e\u901a\u306b\u4f7f\u3048\u307e\u3059\u3002\nGitHub\u306e\u65b9\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3042\u3052\u3068\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u3088\u308d\u3057\u3051\u308c\u3070\u3069\u3046\u305e\u3002\n\u2192arduino-serial-shell\n\n\u52d5\u4f5c\u74b0\u5883\n\nmac OS X Yosemite 10.10.3\nArduino IDE 1.0.5\nArduino eclipse extensionsArduino plugin 1.2.4\neclipse LUNA 4.4.2\n\n\n\n\u305b\u3063\u304b\u304fC++\u3067\u66f8\u3051\u308b\u306e\u3060\u304b\u3089\u3001\u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306e\u30b9\u30b1\u30c3\u30c1\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u3044\u308b\u3068\u3001\u3084\u306f\u308aSTL(Standard Template Library)\u304c\u4f7f\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u3088\u306d\uff1f\n\u305d\u3093\u306a\u4eba\u306e\u305f\u3081\u306eSTL\u306eAVR\u30de\u30a4\u30b3\u30f3\u3078\u306e\u79fb\u690d\u7248\u304c\u3001\u3053\u306e\n\n[The STL for AVR with C++ streams](http://andybrown.me.uk/wk/2011/01/15/the-standard-template-library-stl-for-avr-with-c-streams/)\n\n\u3067\u3059\u3002\nC++\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5143\u306b\u3082\u306a\u3063\u305f[SG\tI STL](https://www.sgi.com/tech/stl/)\u3092\u30d9\u30fc\u30b9\u306b\u79fb\u690d\u3092\u884c\u3063\u305f\u3089\u3057\u304f\u3001SGI STL\u306b\u306f\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u304c\u7121\u3044\u306e\u3067\u308f\u3056\u308f\u3056[uClibc++](http://cxx.uclibc.org/)\u304b\u3089\u53d6\u3063\u3066\u304d\u305f\u308a\u3001\u66f4\u306b\u306fArduino\u30e6\u30fc\u30b6\u30fc\u306e\u305f\u3081\u306b\u30b7\u30ea\u30a2\u30eb\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u3084\u3001LCD\u51fa\u529b\u30af\u30e9\u30b9\u306a\u3069\u3082\u7528\u610f\u3057\u3066\u304f\u308c\u308b\u89aa\u5207\u3063\u3077\u308a\u3002\n\u3053\u308c\u3092\u4f7f\u308f\u306a\u3044\u624b\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\n\n## 1. \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u304b\u3089Downloads -> Arduino downloads \u3068\u9032\u3093\u3060\u5148\u306b\u3042\u308a\u307e\u3059\u30022015/5/25\u6642\u70b9\u3067\u306e\u6700\u65b0\u7248\u306f1.1.1\u3067\u3059\u3002\n\u958b\u767a\u74b0\u5883\u304ceclipse\u306a\u3089\u3001\u9069\u5f53\u306a\u5834\u6240\u306b\u89e3\u51cd\u3057\u3066`avr-stl/include`\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\nArduino IDE\u306e\u5834\u5408\u306f\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u4e38\u3054\u3068`${arduino\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148}/hardware/tools/avr/avr/include`\u306b\u3076\u3061\u3053\u3081\u3070OK\u3067\u3059\u3002\n\n\n\n## 2. \u30b7\u30a7\u30eb\u30af\u30e9\u30b9\u306e\u4f5c\u6210\nArduino\u5411\u3051\u306e\u30b7\u30ea\u30a2\u30eb\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001\u30db\u30b9\u30c8\u3068\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3057\u306a\u304c\u3089\u52d5\u304f\u7c21\u5358\u306a\u30b7\u30a7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u793a\u3057\u3001\u5165\u529b\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u3092\u30d1\u30fc\u30b9\u3057\u3066\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\n### 2-1. \u524d\u6e96\u5099\n\u30b7\u30a7\u30eb\u30af\u30e9\u30b9\u3092\u66f8\u304f\u524d\u306b\u3001\u3061\u3087\u3053\u3063\u3068\u3053\u306eAVR-STL\u306b\u66f8\u304d\u8db3\u3057\u307e\u3059\u3002\nArduino\u3067\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u5165\u529b\u3092\u884c\u3046\u6642\u306f\u3001`HardwareSerial`\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b`Serial`\u3092\u4f7f\u3063\u3066\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n```c++:HardwareSerial\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u5834\u5408\n\nvoid loop() {\n    char c;\n    if (Serial.available() > 0) {\n        c = Serial.read();\n        Serial.print(\"input: \");\n        Serial.println(c);\n    }\n}\n```\n\n\u5b9f\u306f\u3001`serstream`\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5165\u529b\u30b7\u30ea\u30a2\u30eb\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9`ihserialstream`\u306b\u306f\u3001\u3053\u306e`Serial.available()`\u306b\u76f8\u5f53\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3060\u3068\u3001\u300c\u4f55\u304b\u5165\u529b\u304c\u3042\u3063\u305f\u6642\u3060\u3051\u51e6\u7406\u3059\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u305a\u5927\u5909\u4e0d\u4fbf\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8ffd\u8a18\u3057\u3066\u3084\u308a\u307e\u3059\u3002\n\n\n```c++:serstream\n/*\n * Input stream\n */\n\n\ttemplate <class charT, class traits, class Tserial> class basic_iserialstream\n\t\t: public basic_istream<charT,traits>\n\t{\n\tpublic:\n\t\n\t~~~\u3053\u3053\u304b\u3089~~~\n\t\n\t/*\n\t * get how many characters available\n\t */\n\t\tint available() {\n\t\t\treturn sb.serial().available();\n\t\t}\n\t\n\t~~~\u3053\u3053\u307e\u3067~~~\n\t\n\t}\n```\n\n\n`ihserialstream`\u304c\u5185\u90e8\u3067\u4fdd\u6301\u3057\u3066\u3044\u308b`HardwareSerial`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089`available()`\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u3092\u7528\u3044\u3066\u5148\u307b\u3069\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u3001\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n\n```c++:\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u5834\u5408\n\n// \u5b9a\u7fa9\u6e08\u307f\u306eHardwareSerial\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306eSerial\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\nstd::ohserialstream serout(Serial);\nstd::ihserialstream serin(Serial);\n\nvoid loop() {\n\n    char c;\n    if (serin.available() > 0) {\n    \tserin >> c;\n    \tserout << \"input: \" << c << std::crlf;\n    }\n}\n\n```\n\n\n### 2-2. SerialShell\u30af\u30e9\u30b9\n\nSerialShell\u30af\u30e9\u30b9\u306e\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n* \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3001\u30ea\u30bf\u30fc\u30f3\u304c\u62bc\u3055\u308c\u308b\u307e\u3067\u306e\u6587\u5b57\u5217\u3092\u4fdd\u6301\n* \u7a7a\u767d\u6587\u5b57\u3067\u5206\u5272\u3057\u3001\u5f15\u6570\u3068\u3057\u3066\u914d\u5217\u306b\u683c\u7d0d\n\n\u304c\u4e3b\u306a\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c++:SerialShell.h\n#ifndef SERIAL_SHELL_\n#define SERIAL_SHELL_\n\nclass SerialShell {\nprivate:\n\tstd::ohserialstream& serout;\t// \u51fa\u529b\u7528\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u53c2\u7167\n\tstd::ihserialstream& serin;\t\t// \u5165\u529b\u7528\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u53c2\u7167\n\tstd::string buffer;\n\tstd::vector<std::string> args;\n\tbool is_prompting;\n\npublic:\n\tSerialShell(std::ohserialstream* serout, std::ihserialstream* serin);\n\tvirtual ~SerialShell();\n\n\tint readCommand();\n\tstd::vector<std::string> getArgs();\n\tvoid printArgs();\n\nprivate:\n\tvoid parseCommand();\n};\n\n#endif /* SERIAL_SHELL_ */\n```\n\n\n```c++:SerialShell.cpp\n#include <Arduino.h>\n#include <serstream>\n#include <iterator>\n#include <vector>\n#include <string>\n#include \"SerialShell.h\"\n\n\nSerialShell::SerialShell(std::ohserialstream* serout, std::ihserialstream* serin)\n\t: serout(*serout),\n\t  serin(*serin),\n\t  buffer(\"\"),\n\t  args(0),\n\t  is_prompting(false) {\n\n}\n\nSerialShell::~SerialShell() {\n}\n\n// \u30b3\u30de\u30f3\u30c9\u306e\u5f15\u6570\u3092\u8868\u793a\u3059\u308b\nvoid SerialShell::printArgs()\n{\n    serout << args.size() << \" args: \";\n    for (std::vector<std::string>::iterator it = args.begin() ; it  < args.end() ; ++it) {\n        serout << *it;\n        if (it < args.end() - 1) {\n        \tserout << \", \";\n        }\n    }\n    serout << std::crlf;\n}\n\n// \u30b3\u30de\u30f3\u30c9\u306e\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\nstd::vector<std::string> SerialShell::getArgs()\n{\n\treturn args;\n}\n\n// \u30b3\u30de\u30f3\u30c9\u3092\u8aad\u307f\u8fbc\u3080\nint SerialShell::readCommand() {\n\n\tchar c = 0;\n\n\t// \u30d7\u30ed\u30f3\u30d7\u30c8\u306e\u8868\u793a\n    if (! is_prompting) {\n    \tserout << \"# \";\n    \tis_prompting = true;\n    }\n\n    if (serin.available() > 0) {\n    \tserin.get(c);\n\t\tif (c == '\\r') {\n\t\t\t// CR\u3092NL\u3067\u7f6e\u304d\u63db\u3048\u3066\u3001\u30cc\u30eb\u6587\u5b57\u3092\u8ffd\u52a0\n\t\t\tbuffer += \"\\n\\0\";\n\t\t\t// \u30b3\u30de\u30f3\u30c9\u306e\u30d1\u30fc\u30b9\n\t\t\tparseCommand();\n\t\t\t// \u30d0\u30c3\u30d5\u30a1\u3092\u30af\u30ea\u30a2\n\t\t\tbuffer = \"\";\n\t\t\t// \u30a8\u30b3\u30fc\u30d0\u30c3\u30af\n\t\t\tserout << std::crlf;\n\t\t\tis_prompting = false;\n\t\t\treturn 1;\n\t\t}\n\t\telse {\n\t\t\t// \u30d0\u30c3\u30d5\u30a1\u306b\u8ffd\u52a0\n\t\t\tbuffer += c;\n\t\t\t// \u30a8\u30b3\u30fc\u30d0\u30c3\u30af\n\t\t\tserout << c;\n\t\t\treturn 0;\n\t\t}\n    }\n    else {\n    \treturn -1;\n    }\n}\n\n// \u30b3\u30de\u30f3\u30c9\u3092\u30d1\u30fc\u30b9\u3057\u3066\u5f15\u6570\u3092vector\u306b\u683c\u7d0d\u3059\u308b\nvoid SerialShell::parseCommand() {\n\n    unsigned int start =0, end = 0;\n\n    args.clear();\n    while (end < buffer.length()) {\n        start = buffer.find_first_not_of(\" \\t\\n\", end);\n        end = buffer.find_first_of(\" \\t\\n\", start);\n        if (end-start > 0) {\n            args.push_back(buffer.substr(start, end-start));\n        }\n    }\n}\n```\n\n## 3. \u4f7f\u3044\u65b9\n\n\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n`readCommand()`\u306e\u8fd4\u308a\u5024\u3092\u898b\u30660\u3088\u308a\u5927\u304d\u304b\u3063\u305f\u3089\u3001`getArgs()`\u3067\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n```c++:SerialShellTest.cpp\n#include <Arduino.h>\n#include <pnew.cpp>\n#include <serstream>\n#include <iterator>\n#include <vector>\n#include \"SerialShell.h\"\n#include \"SerialShellTest.h\"\n\n// \u5b9a\u7fa9\u6e08\u307f\u306eHardwareSerial\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306eSerial\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\nstd::ohserialstream serout(Serial);\nstd::ihserialstream serin(Serial);\n\nSerialShell* shell;\n\nvoid setup()\n{\n\tSerial.begin(9600);\n\t// \u5165\u51fa\u529b\u30b7\u30ea\u30a2\u30eb\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3067\u521d\u671f\u5316\n\tshell = new SerialShell(&serout, &serin);\n}\n\nvoid loop()\n{\n    int ret;\n    std::vector<std::string> args;  // \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u306e\u30ea\u30b9\u30c8\n\n    // \u30b3\u30de\u30f3\u30c9\u8aad\u307f\u53d6\u308a\n    ret = shell->readCommand();\n    // ret\u3000>\u30000 \u306a\u3089\u6709\u52b9\u30c7\u30fc\u30bf\u3042\u308a\n    if (ret > 0) {\n    \t// \u5f15\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8868\u793a\n        shell->printArgs();\n        // \u5f15\u6570\u306e\u30ea\u30b9\u30c8\u3092Get\n        args = shell->getArgs();\n        // \u7b2c1\u5f15\u6570\u3067\u51e6\u7406\u5206\u5c90\n        if (args[0] == \"hoge\") {\n            serout << \"func hoge\" << std::crlf;\n        }\n        else if (args[0] == \"piyo\") {\n            serout << \"func piyo\" << std::crlf;\n        }\n    }\n}\n\n```\n\n\n## 4. \u5b9f\u884c\u7d50\u679c\n\n```\n$ sudo cu -l /dev/cu.usbmodem1411  -s 9600\nConnected.\n# ai ue   o\n3 args: ai, ue, o\n# The quick brown fox jumps over the lazy dog\n9 args: The, quick, brown, fox, jumps, over, the, lazy, dog\n# \n0 args:\n```\n\n\u5165\u529b\u3057\u305f\u30b3\u30de\u30f3\u30c9\u306e\u5f15\u6570\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n```\n# hoge\n1 args: hoge\nfunc hoge\n# piyo 123 \n2 args: piyo, 123\nfunc piyo\n```\n\n\u51e6\u7406\u5206\u5c90\u3082\u3067\u304d\u3066\u3044\u307e\u3059\u306d\u3002\n\n\n## 5. \u6240\u611f\n\n\u3046\u30fc\u3093\u3084\u3063\u3071\u308aSTL\u306f\u4fbf\u5229\u3067\u3059\u306d\uff01```Serial.println()```\u3060\u3068\u6587\u5b57\u5217\u3068\u5909\u6570\u3092\u51fa\u529b\u3057\u305f\u3044\u6642\u306b\n\n```\nSerial.print(\"The value is: \");\nSerial.println(value);\n```\n\n\u307f\u305f\u3044\u306b\u8907\u6570\u884c\u66f8\u304b\u306a\u304d\u3083\u3044\u3051\u307e\u305b\u3093\u304c\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u30af\u30e9\u30b9\u306e\u304a\u304b\u3052\u3067\u3059\u3063\u304d\u308a\u66f8\u3051\u307e\u3057\u305f\u3002\n```std::crlf```\u306fAVR-STL\u306e\u72ec\u81ea\u5b9a\u7fa9\u3067\u3001\u30ad\u30e3\u30ea\u30c3\u30b8\u30ea\u30bf\u30fc\u30f3(CR)\u3068\u30e9\u30a4\u30f3\u30d5\u30a3\u30fc\u30c9(LF)\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\nvector, string\u30af\u30e9\u30b9\u3082\u7279\u306b\u554f\u984c\u306a\u304f\u666e\u901a\u306b\u4f7f\u3048\u307e\u3059\u3002\n\nGitHub\u306e\u65b9\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3042\u3052\u3068\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u3088\u308d\u3057\u3051\u308c\u3070\u3069\u3046\u305e\u3002\n\u2192[arduino-serial-shell](https://github.com/kota65535/arduino-serial-shell)\n\n### \u52d5\u4f5c\u74b0\u5883\n* mac OS X Yosemite 10.10.3\n* Arduino IDE 1.0.5\n* Arduino eclipse extensionsArduino plugin 1.2.4\n* eclipse LUNA 4.4.2\n\n\n", "tags": ["C++", "Arduino", "STL"]}