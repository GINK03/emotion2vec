{"tags": ["C#", "Rx", "\u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af"], "context": " More than 1 year has passed since last update.Rx\u306e\u52c9\u5f37\u3067\u4f8b\u306e\u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\u4ed6\u306e\u8a00\u8a9e\u306f\u3053\u3093\u306a\u611f\u3058\u307f\u305f\u3044\u3067\u3059\u3002\nCold\u3068Hot\u306e\u9055\u3044\u304c\u3061\u3087\u3063\u3068\u3060\u3051\u308f\u304b\u3063\u305f\u3002\n\u3082\u3063\u3068\u3046\u307e\u304f\u66f8\u3051\u308b\u6c17\u304c\u3059\u308b(\u00b4\u30fb\u03c9\u30fb`)\n\u8ffd\u8a18\uff1a\n\u30b3\u30e1\u30f3\u30c8\u3067Buffer\u4f7f\u3046\u3068\u826f\u3044\u3063\u3066\u30a2\u30c9\u30d0\u30a4\u30b9\u8cb0\u3044\u307e\u3057\u305f\u3002\n\u4f7f\u3063\u3066\u307f\u305f\u3089\u3051\u3063\u3053\u3046\u826f\u3044\u611f\u3058\u306b\u66f8\u3051\u307e\u3057\u305f\u3002\n\u5909\u66f4\u5f8c\nusing System;\nusing System.Linq;\nusing System.Reactive.Concurrency;\nusing System.Reactive.Linq;\n\nnamespace Zundoko\n{\n    internal class Program\n    {\n        private const string Zun = \"\u30ba\u30f3\";\n        private const string Doko = \"\u30c9\u30b3\";\n        private const string Kiyoshi = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01 ((\u2514(:3\u300d\u250c)\u2518))\";\n\n        private static void Main(string[] args)\n        {\n            var rm = new Random();\n            Observable\n                .Interval(TimeSpan.Zero, CurrentThreadScheduler.Instance)\n                .Select((x, y) => rm.Next()%2 == 0 ? Zun : Doko)\n                .Do(x => Console.Write($\"{x} \"))\n                .Buffer(5, 1)\n                .Where(x => x.SequenceEqual(new[] {Zun, Zun, Zun, Zun, Doko}))\n                .Subscribe(x =>\n                {\n                    Console.WriteLine(Kiyoshi);\n                    Console.Read();\n                    Environment.Exit(0);\n                });\n        }\n    }\n}\n\n\u5909\u66f4\u524d\nusing System;\nusing System.Reactive.Disposables;\nusing System.Reactive.Linq;\nusing System.Threading;\nusing Reactive.Bindings.Extensions;\n\nnamespace Zundoko\n{\n    internal class Program\n    {\n        private const string Zun = \"\u30ba\u30f3\";\n        private const string Doko = \"\u30c9\u30b3\";\n        private const string Kiyoshi = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01 ((\u2514(:3\u300d\u250c)\u2518))\";\n\n        private static void Main(string[] args)\n        {\n            var ms = new ManualResetEventSlim();\n            var rm = new Random();\n            var disposable = new CompositeDisposable();\n\n            var zundokoRiver = Observable\n                .Interval(TimeSpan.Zero)\n                .Select((x, y) => rm.Next()%2 == 0 ? Zun : Doko)\n                .Publish()\n                ;\n\n            zundokoRiver\n                .Do(x => Console.Write($\"{x} \"))\n                .Zip(\n                    zundokoRiver.Skip(1)\n                    , zundokoRiver.Skip(2)\n                    , zundokoRiver.Skip(3)\n                    , zundokoRiver.Skip(4)\n                    , (one, two, three, four, five) => new {one, two, three, four, five})\n                .Where(x => x.one == Zun && x.two == Zun && x.three == Zun && x.four == Zun && x.five == Doko)\n                .Subscribe(x =>\n                {\n                    Console.WriteLine(Kiyoshi);\n                    disposable.Dispose();\n                    ms.Set();\n                }).AddTo(disposable);\n\n            zundokoRiver.Connect();\n            ms.Reset();\n            ms.Wait();\n            Console.Read();\n        }\n    }\n}\n\nRx\u306e\u52c9\u5f37\u3067[\u4f8b\u306e\u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af](https://twitter.com/kumiromilk/status/707437861881180160)\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\u4ed6\u306e\u8a00\u8a9e\u306f[\u3053\u3093\u306a\u611f\u3058](http://qiita.com/shunsugai@github/items/971a15461de29563bf90)\u307f\u305f\u3044\u3067\u3059\u3002\nCold\u3068Hot\u306e\u9055\u3044\u304c\u3061\u3087\u3063\u3068\u3060\u3051\u308f\u304b\u3063\u305f\u3002\n\u3082\u3063\u3068\u3046\u307e\u304f\u66f8\u3051\u308b\u6c17\u304c\u3059\u308b(\u00b4\u30fb\u03c9\u30fb`)\n\n\u8ffd\u8a18\uff1a\n\u30b3\u30e1\u30f3\u30c8\u3067Buffer\u4f7f\u3046\u3068\u826f\u3044\u3063\u3066\u30a2\u30c9\u30d0\u30a4\u30b9\u8cb0\u3044\u307e\u3057\u305f\u3002\n\u4f7f\u3063\u3066\u307f\u305f\u3089\u3051\u3063\u3053\u3046\u826f\u3044\u611f\u3058\u306b\u66f8\u3051\u307e\u3057\u305f\u3002\n\n\u5909\u66f4\u5f8c\n\n```csharp\nusing System;\nusing System.Linq;\nusing System.Reactive.Concurrency;\nusing System.Reactive.Linq;\n\nnamespace Zundoko\n{\n    internal class Program\n    {\n        private const string Zun = \"\u30ba\u30f3\";\n        private const string Doko = \"\u30c9\u30b3\";\n        private const string Kiyoshi = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01 ((\u2514(:3\u300d\u250c)\u2518))\";\n\n        private static void Main(string[] args)\n        {\n            var rm = new Random();\n            Observable\n                .Interval(TimeSpan.Zero, CurrentThreadScheduler.Instance)\n                .Select((x, y) => rm.Next()%2 == 0 ? Zun : Doko)\n                .Do(x => Console.Write($\"{x} \"))\n                .Buffer(5, 1)\n                .Where(x => x.SequenceEqual(new[] {Zun, Zun, Zun, Zun, Doko}))\n                .Subscribe(x =>\n                {\n                    Console.WriteLine(Kiyoshi);\n                    Console.Read();\n                    Environment.Exit(0);\n                });\n        }\n    }\n}\n```\n\n\u5909\u66f4\u524d\n\n```csharp\nusing System;\nusing System.Reactive.Disposables;\nusing System.Reactive.Linq;\nusing System.Threading;\nusing Reactive.Bindings.Extensions;\n\nnamespace Zundoko\n{\n    internal class Program\n    {\n        private const string Zun = \"\u30ba\u30f3\";\n        private const string Doko = \"\u30c9\u30b3\";\n        private const string Kiyoshi = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01 ((\u2514(:3\u300d\u250c)\u2518))\";\n\n        private static void Main(string[] args)\n        {\n            var ms = new ManualResetEventSlim();\n            var rm = new Random();\n            var disposable = new CompositeDisposable();\n\n            var zundokoRiver = Observable\n                .Interval(TimeSpan.Zero)\n                .Select((x, y) => rm.Next()%2 == 0 ? Zun : Doko)\n                .Publish()\n                ;\n\n            zundokoRiver\n                .Do(x => Console.Write($\"{x} \"))\n                .Zip(\n                    zundokoRiver.Skip(1)\n                    , zundokoRiver.Skip(2)\n                    , zundokoRiver.Skip(3)\n                    , zundokoRiver.Skip(4)\n                    , (one, two, three, four, five) => new {one, two, three, four, five})\n                .Where(x => x.one == Zun && x.two == Zun && x.three == Zun && x.four == Zun && x.five == Doko)\n                .Subscribe(x =>\n                {\n                    Console.WriteLine(Kiyoshi);\n                    disposable.Dispose();\n                    ms.Set();\n                }).AddTo(disposable);\n\n            zundokoRiver.Connect();\n            ms.Reset();\n            ms.Wait();\n            Console.Read();\n        }\n    }\n}\n```\n"}