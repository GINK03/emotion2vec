{"context": " More than 1 year has passed since last update.\n\nProblem\n\u554f\u984c\u306f LeetCode \u3088\u308a\u62dd\u501f\u3057\u3066\u3044\u307e\u3059.\n\u6b63\u306e\u6574\u6570\u3092\u4fdd\u6301\u3059\u308b\uff12\u3064\u306e\u5358\u65b9\u5411\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642, \u5404\u8981\u7d20\u3092\uff11\u3064\u306e\u6841\u306e\u3088\u3046\u306b\u8003\u3048\u3066\n\uff12\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5408\u8a08\u5024\u3092\u4fdd\u6301\u3059\u308b\u30ea\u30b9\u30c8\u3092\u8fd4\u5374\u305b\u3088. \u6b21\u306e\u8981\u7d20\u3078\u306e\u6841\u4e0a\u308a\u3082\u8003\u616e\u3059\u308b\u3053\u3068.\n\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\n\n\nSolution\n\u6574\u6570\u540c\u58eb\u306e\u8db3\u3057\u7b97\u306e\u7b46\u7b97\u3092\u884c\u3046\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u3059. \uff08\u898b\u305f\u76ee\u7684\u306b\u306f\u4f4e\u3044\u4f4d\u3068\u9ad8\u3044\u4f4d\u306e\u9806\u756a\u304c\u9006\u3067\u3059\u304c\uff09\n\uff12\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u958b\u59cb\u3057\u3066, \u5408\u8a08\u5024\u3092\u6c42\u3081, 10\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u6b21\u306e\u8981\u7d20\u306e\u8a08\u7b97\u306b1\u3092\u6301\u3061\u8d8a\u3057\u3066\u3044\u304f\u7e70\u308a\u8fd4\u3057\u3067\u3059. \u5148\u306b\u7247\u65b9\u306e\u30ea\u30b9\u30c8\u304c\u7a7a\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u4e00\u65b9\u306e\u5024\u3060\u3051\u3092\u5408\u8a08\u5024\u3068\u3057\u3066\u6271\u3044\u307e\u3059. \u4e21\u65b9\u306e\u30ea\u30b9\u30c8\u304c\u7a7a\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u8a08\u7b97\u306f\u7d42\u4e86\u3067\u3059.\n\u6700\u5f8c\u306e\u8a08\u7b97\u7d50\u679c\u304c10\u4ee5\u4e0a\u3067\u3042\u3063\u305f\u5834\u5408\u306b\u306f, \u6700\u5f8c\u306b1\u3092\u6301\u3061\u8d8a\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u304a\u5fd8\u308c\u306a\u304f.\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummyHead = ListNode(0);\n        curNode = dummyHead\n\n        if not l1 and not l2: return None\n        elif not l1:          return l2\n        elif not l2:          return l1\n\n        co = 0 # carry over from the previous node\n        while l1 or l2:\n            sum = 0\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n\n            sum += co\n            co  = sum / 10\n            sum = sum % 10\n\n            curNode.next = ListNode(sum)\n            curNode = curNode.next\n\n        if co == 1:\n            curNode.next = ListNode(1)\n\n        return dummyHead.next\n\nJava code:\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        if (l1 == null && l2 == null) return null;\n        else if (l1 == null) return l2;\n        else if (l2 == null) return l1;\n\n        ListNode dummyHead = new ListNode(0);\n        ListNode curNode   = dummyHead;\n        int co  = 0; // carry-over from previous nodes\n        while (l1 != null || l2 != null) {\n            int sum = 0;\n\n            if (l1 != null) {\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if (l2 != null) {\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            sum += co;\n\n            co   = sum / 10;\n            sum %= 10;\n\n            curNode.next = new ListNode(sum);\n            curNode = curNode.next;\n        }\n\n        if (co == 1) curNode.next = new ListNode(1);\n        return dummyHead.next;\n    }\n}\n\nN\u3092\uff12\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5185\u9577\u3044\u65b9\u306e\u9577\u3055\u3060\u3068\u3057\u3066, \u8a08\u7b97\u91cf\u30fb\u7a7a\u9593\u91cf\u3068\u3082\u306bO(N)\u3068\u306a\u308a\u307e\u3059.\n\u305f\u3060\u3057\u7a7a\u9593\u91cf\u306b\u95a2\u3057\u3066\u306f, \u4eca\u56de\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u7d50\u679c\u306e\u683c\u7d0d\u306b\u65b0\u3057\u3044\u5358\u65b9\u5411\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u304c, \u5b9f\u969b\u306b\u306f\u7247\u65b9\u306e\u30ea\u30b9\u30c8\u3092\u4e0a\u66f8\u304d\u3057\u3066\u3044\u304f\u5f62\u3067\u3082\u5b9f\u884c\u7d50\u679c\u306b\u5f71\u97ff\u306f\u53ca\u307c\u3057\u307e\u305b\u3093. \u3053\u306e\u5834\u5408\u306f\u4f59\u5206\u306a\u7a7a\u9593\u91cf\u306f\u6d88\u8cbb\u3057\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059.\n#### Problem\n\u554f\u984c\u306f [LeetCode](https://leetcode.com/problems/add-two-numbers/) \u3088\u308a\u62dd\u501f\u3057\u3066\u3044\u307e\u3059.\n\n```\n\u6b63\u306e\u6574\u6570\u3092\u4fdd\u6301\u3059\u308b\uff12\u3064\u306e\u5358\u65b9\u5411\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642, \u5404\u8981\u7d20\u3092\uff11\u3064\u306e\u6841\u306e\u3088\u3046\u306b\u8003\u3048\u3066\n\uff12\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5408\u8a08\u5024\u3092\u4fdd\u6301\u3059\u308b\u30ea\u30b9\u30c8\u3092\u8fd4\u5374\u305b\u3088. \u6b21\u306e\u8981\u7d20\u3078\u306e\u6841\u4e0a\u308a\u3082\u8003\u616e\u3059\u308b\u3053\u3068.\n\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\n```\n\n#### Solution\n\u6574\u6570\u540c\u58eb\u306e\u8db3\u3057\u7b97\u306e\u7b46\u7b97\u3092\u884c\u3046\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u3059. \uff08\u898b\u305f\u76ee\u7684\u306b\u306f\u4f4e\u3044\u4f4d\u3068\u9ad8\u3044\u4f4d\u306e\u9806\u756a\u304c\u9006\u3067\u3059\u304c\uff09\n\uff12\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u958b\u59cb\u3057\u3066, \u5408\u8a08\u5024\u3092\u6c42\u3081, 10\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u6b21\u306e\u8981\u7d20\u306e\u8a08\u7b97\u306b1\u3092\u6301\u3061\u8d8a\u3057\u3066\u3044\u304f\u7e70\u308a\u8fd4\u3057\u3067\u3059. \u5148\u306b\u7247\u65b9\u306e\u30ea\u30b9\u30c8\u304c\u7a7a\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u4e00\u65b9\u306e\u5024\u3060\u3051\u3092\u5408\u8a08\u5024\u3068\u3057\u3066\u6271\u3044\u307e\u3059. \u4e21\u65b9\u306e\u30ea\u30b9\u30c8\u304c\u7a7a\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u8a08\u7b97\u306f\u7d42\u4e86\u3067\u3059.\n\n\u6700\u5f8c\u306e\u8a08\u7b97\u7d50\u679c\u304c10\u4ee5\u4e0a\u3067\u3042\u3063\u305f\u5834\u5408\u306b\u306f, \u6700\u5f8c\u306b1\u3092\u6301\u3061\u8d8a\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u304a\u5fd8\u308c\u306a\u304f.\n\n```py\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummyHead = ListNode(0);\n        curNode = dummyHead\n        \n        if not l1 and not l2: return None\n        elif not l1:          return l2\n        elif not l2:          return l1\n        \n        co = 0 # carry over from the previous node\n        while l1 or l2:\n            sum = 0\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n                \n            sum += co\n            co  = sum / 10\n            sum = sum % 10\n            \n            curNode.next = ListNode(sum)\n            curNode = curNode.next\n        \n        if co == 1:\n            curNode.next = ListNode(1)\n        \n        return dummyHead.next\n```\n\nJava code:\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        if (l1 == null && l2 == null) return null;\n        else if (l1 == null) return l2;\n        else if (l2 == null) return l1;\n        \n        ListNode dummyHead = new ListNode(0);\n        ListNode curNode   = dummyHead;\n        int co  = 0; // carry-over from previous nodes\n        while (l1 != null || l2 != null) {\n            int sum = 0;\n            \n            if (l1 != null) {\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if (l2 != null) {\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            sum += co;\n            \n            co   = sum / 10;\n            sum %= 10;\n            \n            curNode.next = new ListNode(sum);\n            curNode = curNode.next;\n        }\n        \n        if (co == 1) curNode.next = new ListNode(1);\n        return dummyHead.next;\n    }\n}\n```\n\n`N`\u3092\uff12\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5185\u9577\u3044\u65b9\u306e\u9577\u3055\u3060\u3068\u3057\u3066, \u8a08\u7b97\u91cf\u30fb\u7a7a\u9593\u91cf\u3068\u3082\u306b`O(N)`\u3068\u306a\u308a\u307e\u3059.\n\u305f\u3060\u3057\u7a7a\u9593\u91cf\u306b\u95a2\u3057\u3066\u306f, \u4eca\u56de\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u7d50\u679c\u306e\u683c\u7d0d\u306b\u65b0\u3057\u3044\u5358\u65b9\u5411\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u304c, \u5b9f\u969b\u306b\u306f\u7247\u65b9\u306e\u30ea\u30b9\u30c8\u3092\u4e0a\u66f8\u304d\u3057\u3066\u3044\u304f\u5f62\u3067\u3082\u5b9f\u884c\u7d50\u679c\u306b\u5f71\u97ff\u306f\u53ca\u307c\u3057\u307e\u305b\u3093. \u3053\u306e\u5834\u5408\u306f\u4f59\u5206\u306a\u7a7a\u9593\u91cf\u306f\u6d88\u8cbb\u3057\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059.\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "\u30c7\u30fc\u30bf\u69cb\u9020", "\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "interview", "\u30ea\u30b9\u30c8\u69cb\u9020"]}