{"context": "\u5b50\u30d7\u30ed\u30bb\u30b9\u306estdout\u3068stderr\u3092\u3001\u540d\u524d\u4ed8\u304d\u30d1\u30a4\u30d7\u306b\u3064\u306a\u3044\u3067\u3001\n\u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u51fa\u529b\u7d50\u679c\u3092\u89aa\u30d7\u30ed\u30bb\u30b9\u3067\u8aad\u3080\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u81ea\u4f53\u3067stdout\u3068stderr\u306b\u6587\u5b57\u5217\u3092\u9001\u3063\u3066\u3001\n\u305d\u306e\u5f8cexec\u3057\u3001\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3002\n\na.c\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <errno.h>\n\nconst char Fifo[] = \"/tmp/test.fifo\";\n\nvoid child() {\n\n    // \u30c6\u30b9\u30c8\u3068\u3057\u3066\u30015\u79d2\u5f85\u3063\u3066\u3044\u308b\u3002\n    // \u3053\u3053\u30675\u79d2\u5f85\u3063\u3066\u3044\u308b\u304c\u3001\u89aa\u30d7\u30ed\u30bb\u30b9\u306e\n    // open\u306e\u51e6\u7406\u304c\u5373\u5ea7\u306b\u7d42\u308f\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u6b32\u3057\u3044\u3002\n    // \u4eee\u306b\u3001\u89aa\u30d7\u30ed\u30bb\u30b9\u306eopen\u3092\u3001\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30e2\u30fc\u30c9\u3067\u958b\u3044\u305f\u5834\u5408\u3001\n    // \u89aa\u30d7\u30ed\u30bb\u30b9\u306eopen\u306f\u3001\u3053\u306e5\u79d2\u3092\u5f85\u3063\u3066\u304b\u3089\u7d42\u4e86\u3059\u308b\u3002\n    sleep(5);\n\n    printf(\"[%d]: fopen start.\\n\", getpid());\n    FILE* fp = fopen(Fifo, \"w\");\n    printf(\"[%d]: fopen end.\\n\", getpid());\n\n    dup2(fileno(fp), STDOUT_FILENO);\n    dup2(fileno(fp), STDERR_FILENO);\n    fclose(fp);\n\n    write(STDOUT_FILENO, \"stdout test.\\n\", 13);\n    write(STDERR_FILENO, \"stderr test.\\n\", 13);\n\n    execl(\"/bin/cat\", \"/bin/cat\", \"/tmp/test.txt\", NULL);\n    exit(1);\n}\n\nint main(void) {\n\n    mkfifo(Fifo, 0666);\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n        child();\n    } else if(pid < 0) {\n        return 1;\n    }\n\n    int fd;\n\n    printf(\"[%d]: open start.\\n\", getpid());\n\n    // open\u306e\u51e6\u7406\u306f\u3001O_NONBLOCK\u3092\u6e21\u3059\u3068\u3001\u5f85\u305f\u305a\u306b\u8fd4\u3063\u3066\u304f\u308b\u3002\n    // O_NONBLOCK\u306a\u3057\u3067open\u3057\u305f\u5834\u5408\u3001\u66f8\u304d\u8fbc\u307f\u5074\u304copen\u3057\u3066\u304f\u308c\u308b\u307e\u3067\n    // \u3053\u3053\u3067\u30d6\u30ed\u30c3\u30af\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n    // \u4eee\u306b\u3001\u8aad\u307f\u8fbc\u307f\u5074\u304c\u5148\u306bopen\u3057\u3001\u66f8\u304d\u8fbc\u307f\u5074\u304c\u3001\n    // \u4f55\u304b\u306e\u7406\u7531\u3067open\u51fa\u6765\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3059\u308b\u3002\n    // \u8aad\u307f\u8fbc\u307f\u5074\u3082\u3001open\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u66f8\u304d\u8fbc\u307f\u5074\u306bkill\u3092\u6295\u3052\u308b\u7b49\n    // \u5bfe\u7b56\u304c\u5fc5\u8981\u3002\u3068\u306b\u304b\u304f\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u306e\u5371\u967a\u304c\u3042\u308b\u3053\u3068\u306f\u610f\u8b58\u3059\u308b\u3053\u3068\u3002\n    fd = open(Fifo, O_RDONLY | O_NONBLOCK);\n    if (fd == -1) {\n        printf(\"%s\\n\", strerror(errno));\n        kill(pid, SIGKILL); // \u672c\u5f53\u306f\u3061\u3083\u3093\u3068\u3001\u6700\u521d\u306fterm\u6295\u3052\u3066\u304b\u3089\u3001\u3001\u3068\u304b\u3084\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3002\u3002\n        waitpid(pid, NULL, 0);\n        return 1;\n    }\n\n    printf(\"[%d]: open end.\\n\", getpid());\n\n    char msg[256];\n\n    // \u5b50\u3092waitpid\u3067\u56de\u53ce\u3067\u304d\u305f\u5f8c\u3001\n    // read\u3092\u3057\u305f\u7d50\u679c\u304c0\u4ee5\u4e0b\u3068\u306a\u308b\u306a\u3089\u3001\n    // \u3082\u3046\u8aad\u3080\u3082\u306e\u306f\u7121\u3044\u306e\u3067\u3001\u7d42\u4e86\u3059\u308b\u3002\n\n    // \u4ee5\u4e0b\u306e\u7d50\u679c\u306e\u56de\u53ce\u30eb\u30fc\u30d7\u306f\u3001\u5b50\u304c\u5373\u5ea7\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u3067\u3082\u3001\n    // 1\u79d2\u306f\u5f85\u3063\u3066\u304b\u3089\u7d42\u4e86\u3059\u308b\u3002\n\n    // \u5b50\u306e\u958b\u59cb\u3068\u7d42\u4e86\u306e\u6642\u9593\u304c\u30b7\u30d3\u30a2\u306b\u5fc5\u8981\u306b\u306a\u308b\u5834\u5408\u3001\n    // \u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306e\u51e6\u7406\u3092\u305b\u305a\u306b\u3001\n    // \u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u304c\u8d77\u304d\u306a\u3044\u3088\u3046\u3001\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3044\u306a\u304c\u3089\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002poll\u3084select\u3092\u4f7f\u3063\u3066\u3002\n\n    while (1) {\n        ssize_t r = read(fd, msg, 256);\n        if (r > 0) {\n            msg[r] = '\\0';\n            printf(\"msg=%s\", msg);\n        } else {\n            if (pid == -1) {\n                break;\n            }\n            if (waitpid(pid, NULL, WNOHANG) == pid) {\n                pid = -1;\n            }\n            sleep(1);\n        }\n    }\n\n    close(fd);\n\n    return 0;\n}\n\n\n\n[root@todanano ~]#\n[root@todanano ~]# gcc a.c\n[root@todanano ~]# ./a.out\n[14417]: open start.\n[14417]: open end.\n[14418]: fopen start.\n[14418]: fopen end.\nmsg=stdout test.\nstderr test.\n/bin/cat: /tmp/test.txt: No such file or directory\n[root@todanano ~]#\n[root@todanano ~]#\n[root@todanano ~]# echo \"abc123\" > /tmp/test.txt\n[root@todanano ~]#\n[root@todanano ~]# ./a.out\n[14421]: open start.\n[14421]: open end.\n[14422]: fopen start.\n[14422]: fopen end.\nmsg=stdout test.\nstderr test.\nabc123\n[root@todanano ~]# ll /tmp/test.fifo\nprw-r--r-- 1 root root 0 Apr  1 17:35 /tmp/test.fifo\n[root@todanano ~]#\n[root@todanano ~]#\n[root@todanano ~]#\n\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u898b\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u3001\u8af8\u3005\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3092\u7701\u3044\u3066\u3044\u308b\u306e\u3067\u3001\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u304d\u306f\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n2016/04/01 \u8ffd\u8a18\n\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306e\u554f\u984c\u3092\u8003\u616e\u3057\u3066\u3001\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3067\u8aad\u3080\u3088\u3046\u306b\u3057\u305f\u3002\n\u5b50\u30d7\u30ed\u30bb\u30b9\u306estdout\u3068stderr\u3092\u3001\u540d\u524d\u4ed8\u304d\u30d1\u30a4\u30d7\u306b\u3064\u306a\u3044\u3067\u3001\n\u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u51fa\u529b\u7d50\u679c\u3092\u89aa\u30d7\u30ed\u30bb\u30b9\u3067\u8aad\u3080\u3002\n\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u81ea\u4f53\u3067stdout\u3068stderr\u306b\u6587\u5b57\u5217\u3092\u9001\u3063\u3066\u3001\n\u305d\u306e\u5f8cexec\u3057\u3001\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3002\n\n```c:a.c\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <errno.h>\n\nconst char Fifo[] = \"/tmp/test.fifo\";\n\nvoid child() {\n\n    // \u30c6\u30b9\u30c8\u3068\u3057\u3066\u30015\u79d2\u5f85\u3063\u3066\u3044\u308b\u3002\n    // \u3053\u3053\u30675\u79d2\u5f85\u3063\u3066\u3044\u308b\u304c\u3001\u89aa\u30d7\u30ed\u30bb\u30b9\u306e\n    // open\u306e\u51e6\u7406\u304c\u5373\u5ea7\u306b\u7d42\u308f\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u6b32\u3057\u3044\u3002\n    // \u4eee\u306b\u3001\u89aa\u30d7\u30ed\u30bb\u30b9\u306eopen\u3092\u3001\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30e2\u30fc\u30c9\u3067\u958b\u3044\u305f\u5834\u5408\u3001\n    // \u89aa\u30d7\u30ed\u30bb\u30b9\u306eopen\u306f\u3001\u3053\u306e5\u79d2\u3092\u5f85\u3063\u3066\u304b\u3089\u7d42\u4e86\u3059\u308b\u3002\n    sleep(5);\n\n    printf(\"[%d]: fopen start.\\n\", getpid());\n    FILE* fp = fopen(Fifo, \"w\");\n    printf(\"[%d]: fopen end.\\n\", getpid());\n\n    dup2(fileno(fp), STDOUT_FILENO);\n    dup2(fileno(fp), STDERR_FILENO);\n    fclose(fp);\n\n    write(STDOUT_FILENO, \"stdout test.\\n\", 13);\n    write(STDERR_FILENO, \"stderr test.\\n\", 13);\n\n    execl(\"/bin/cat\", \"/bin/cat\", \"/tmp/test.txt\", NULL);\n    exit(1);\n}\n\nint main(void) {\n\n    mkfifo(Fifo, 0666);\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n        child();\n    } else if(pid < 0) {\n        return 1;\n    }\n\n    int fd;\n\n    printf(\"[%d]: open start.\\n\", getpid());\n\n    // open\u306e\u51e6\u7406\u306f\u3001O_NONBLOCK\u3092\u6e21\u3059\u3068\u3001\u5f85\u305f\u305a\u306b\u8fd4\u3063\u3066\u304f\u308b\u3002\n    // O_NONBLOCK\u306a\u3057\u3067open\u3057\u305f\u5834\u5408\u3001\u66f8\u304d\u8fbc\u307f\u5074\u304copen\u3057\u3066\u304f\u308c\u308b\u307e\u3067\n    // \u3053\u3053\u3067\u30d6\u30ed\u30c3\u30af\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n    // \u4eee\u306b\u3001\u8aad\u307f\u8fbc\u307f\u5074\u304c\u5148\u306bopen\u3057\u3001\u66f8\u304d\u8fbc\u307f\u5074\u304c\u3001\n    // \u4f55\u304b\u306e\u7406\u7531\u3067open\u51fa\u6765\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3059\u308b\u3002\n    // \u8aad\u307f\u8fbc\u307f\u5074\u3082\u3001open\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u66f8\u304d\u8fbc\u307f\u5074\u306bkill\u3092\u6295\u3052\u308b\u7b49\n    // \u5bfe\u7b56\u304c\u5fc5\u8981\u3002\u3068\u306b\u304b\u304f\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u306e\u5371\u967a\u304c\u3042\u308b\u3053\u3068\u306f\u610f\u8b58\u3059\u308b\u3053\u3068\u3002\n    fd = open(Fifo, O_RDONLY | O_NONBLOCK);\n    if (fd == -1) {\n        printf(\"%s\\n\", strerror(errno));\n        kill(pid, SIGKILL); // \u672c\u5f53\u306f\u3061\u3083\u3093\u3068\u3001\u6700\u521d\u306fterm\u6295\u3052\u3066\u304b\u3089\u3001\u3001\u3068\u304b\u3084\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3002\u3002\n        waitpid(pid, NULL, 0);\n        return 1;\n    }\n\n    printf(\"[%d]: open end.\\n\", getpid());\n\n    char msg[256];\n\n    // \u5b50\u3092waitpid\u3067\u56de\u53ce\u3067\u304d\u305f\u5f8c\u3001\n    // read\u3092\u3057\u305f\u7d50\u679c\u304c0\u4ee5\u4e0b\u3068\u306a\u308b\u306a\u3089\u3001\n    // \u3082\u3046\u8aad\u3080\u3082\u306e\u306f\u7121\u3044\u306e\u3067\u3001\u7d42\u4e86\u3059\u308b\u3002\n\n    // \u4ee5\u4e0b\u306e\u7d50\u679c\u306e\u56de\u53ce\u30eb\u30fc\u30d7\u306f\u3001\u5b50\u304c\u5373\u5ea7\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u3067\u3082\u3001\n    // 1\u79d2\u306f\u5f85\u3063\u3066\u304b\u3089\u7d42\u4e86\u3059\u308b\u3002\n\n    // \u5b50\u306e\u958b\u59cb\u3068\u7d42\u4e86\u306e\u6642\u9593\u304c\u30b7\u30d3\u30a2\u306b\u5fc5\u8981\u306b\u306a\u308b\u5834\u5408\u3001\n    // \u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306e\u51e6\u7406\u3092\u305b\u305a\u306b\u3001\n    // \u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u304c\u8d77\u304d\u306a\u3044\u3088\u3046\u3001\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3044\u306a\u304c\u3089\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002poll\u3084select\u3092\u4f7f\u3063\u3066\u3002\n\n    while (1) {\n        ssize_t r = read(fd, msg, 256);\n        if (r > 0) {\n            msg[r] = '\\0';\n            printf(\"msg=%s\", msg);\n        } else {\n            if (pid == -1) {\n                break;\n            }\n            if (waitpid(pid, NULL, WNOHANG) == pid) {\n                pid = -1;\n            }\n            sleep(1);\n        }\n    }\n\n    close(fd);\n\n    return 0;\n}\n\n```\n\n<pre>\n[root@todanano ~]#\n[root@todanano ~]# gcc a.c\n[root@todanano ~]# ./a.out\n[14417]: open start.\n[14417]: open end.\n[14418]: fopen start.\n[14418]: fopen end.\nmsg=stdout test.\nstderr test.\n/bin/cat: /tmp/test.txt: No such file or directory\n[root@todanano ~]#\n[root@todanano ~]#\n[root@todanano ~]# echo \"abc123\" > /tmp/test.txt\n[root@todanano ~]#\n[root@todanano ~]# ./a.out\n[14421]: open start.\n[14421]: open end.\n[14422]: fopen start.\n[14422]: fopen end.\nmsg=stdout test.\nstderr test.\nabc123\n[root@todanano ~]# ll /tmp/test.fifo\nprw-r--r-- 1 root root 0 Apr  1 17:35 /tmp/test.fifo\n[root@todanano ~]#\n[root@todanano ~]#\n[root@todanano ~]#\n\n</pre>\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u898b\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u3001\u8af8\u3005\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3092\u7701\u3044\u3066\u3044\u308b\u306e\u3067\u3001\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u304d\u306f\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n2016/04/01 \u8ffd\u8a18\n\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306e\u554f\u984c\u3092\u8003\u616e\u3057\u3066\u3001\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3067\u8aad\u3080\u3088\u3046\u306b\u3057\u305f\u3002\n", "tags": ["C\u8a00\u8a9e", "Linux"]}