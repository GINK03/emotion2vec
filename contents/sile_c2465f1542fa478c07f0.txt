{"tags": ["ErlangOTP18.0"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u306f\u300cOTP17\u7cfb\u3067\u306fmaps\u306e\u5185\u90e8\u5b9f\u88c5\u306b\u5358\u7d14\u306a\u9023\u60f3\u30ea\u30b9\u30c8(\u914d\u5217)\u304c\u4f7f\u308f\u308c\u3066\u304a\u308a\u8981\u7d20\u6570\u306b\u5bfe\u3057\u3066\u6027\u80fd\u304c\u30b9\u30b1\u30fc\u30eb\u3057\u306a\u3044\u300d\u3068\u3044\u3063\u305f\u3053\u3068\u3092\u66f8\u3044\u305f\u3002\n\u5148\u65e5\u306b\u51fa\u305fOTP18.0\u306e\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8\u306b\u306f\u300c\u8981\u7d20\u6570\u304c\u591a\u3044maps\u306b\u306fHAMT(Hash Array Mapped Trie\u306e\u7565: \u3082\u306e\u51c4\u304f\u96d1\u306b\u8a00\u3046\u306a\u3089\u6c38\u7d9a\u5316\u306b\u5bfe\u5fdc\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u7684\u306a\u6027\u8cea\u3092\u5099\u3048\u305f\u30c7\u30fc\u30bf\u69cb\u9020)\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u305f\u300d\u7684\u306a\u3053\u3068\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u5927\u5e45\u306a\u6027\u80fd\u6539\u5584\u304c\u671f\u5f85\u3067\u304d\u308b\u306e\u3067\u3001\u3042\u3089\u305f\u3081\u3066\u51e6\u7406\u6642\u9593\u3092\u8a08\u6e2c\u3057\u3066\u307f\u305f\u3002\n(\u5185\u5bb9\u7684\u306b\u307b\u307c\u524d\u56de\u306e\u30b3\u30d4\u30da)\n\n\u6e2c\u5b9a\u74b0\u5883\n\u524d\u56de\u3068\u306f\u6e2c\u5b9a\u74b0\u5883\u306f\u7570\u306a\u308b:\n\nCPU: Intel(R) Core(TM) i7-5600U CPU @ 2.60GHz (x4)\nOS: Ubuntu-15.04\nErlang: OTP18.0 (deb)\n\n\n\u6e2c\u5b9a\u5bfe\u8c61\n\u524d\u56de\u3068\u540c\u69d8:\n\nmaps, dict, gb_trees\n\u5168\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306fHiPE\u3067\u30b3\u30f3\u30d1\u30a4\u30eb \n\n\n\u6e2c\u5b9a\u65b9\u6cd5\n\u3053\u308c\u3082\u524d\u56de\u3068\u540c\u69d8:\n\n\u5165\u529b\u5024\u306f\u30010\u304b\u3089\u8981\u7d20\u6570\u672a\u6e80\u306e\u6570\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3079\u305f\u3082\u306e\n\u5165\u529b\u5024\u3092\u9806\u306b\u633f\u5165\u3057\u3066\u3044\u304d\u3001\u5168\u8981\u7d20\u3092\u633f\u5165\u3059\u308b\u307e\u3067\u306b\u639b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u6e2c\n\u5168\u8981\u7d20\u306e\u51e6\u7406\u306b\u639b\u304b\u3063\u305f\u6642\u9593\u3092\u8981\u7d20\u6570\u3067\u5272\u3063\u3066\u3001\u4e00\u8981\u7d20\u306e\u633f\u5165\u306b\u639b\u304b\u3063\u305f\u5e73\u5747\u6642\u9593\u3092\u7b97\u51fa\n\n\n\u3053\u306e\u4e00\u8981\u7d20\u3042\u305f\u308a\u306e\u5e73\u5747\u51e6\u7406\u6642\u9593\u304c\u3001\u4eca\u56de\u306e\u6e2c\u5b9a\u7d50\u679c\u3068\u306a\u308b\n\u306a\u304a\u633f\u5165\u4ee5\u5916\u306e\u51e6\u7406(ex. \u524a\u9664\u3001\u691c\u7d22)\u306f\u4eca\u56de\u306e\u5bfe\u8c61\u5916\u3068\u3059\u308b\u304c\u633f\u5165\u3068\u540c\u69d8\u306e\u51e6\u7406\u50be\u5411\u3092\u793a\u3057\u3066\u3044\u308b\n\n\n\n\nbench.erl\n-module(bench).\n\n-export([bench/0]).\n\n-spec bench() -> [Result] when\n      Result :: {module(), ElementSize::pos_integer(), InsertAverageNanoSeconds::non_neg_integer()}.\nbench() ->\n    ElementSizeList = [1, 10, 100, 1000, 10000, 100000], \n    InputList = [shuffle(lists:seq(0, Size - 1)) || Size <- ElementSizeList],\n\n    ModuleList = [dict, gb_trees, maps],\n\n    lists:sort(\n      [do_bench(Module, Input) || Module <- ModuleList,\n                                  Input <- InputList]).\n\n-spec do_bench(module(), [non_neg_integer()]) -> Result when\n      Result :: {module(), ElementSize::pos_integer(), InsertAverageNanoSeconds::non_neg_integer()}.\ndo_bench(Module, Input) ->\n    ElementSize = length(Input),\n    LoopCount = 100000 div ElementSize,  % \u4e00\u56de\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u4e2d\u306e\u633f\u5165\u64cd\u4f5c\u306e\u56de\u6570\u3092\u7b49\u3057\u304f\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u30eb\u30fc\u30d7\u6570\u3067\u8abf\u6574\u3059\u308b\n\n    Empty = make_empty(Module),\n    Fun   = get_insert_fun(Module),\n\n    {TotalMicroSeconds, _} =\n        timer:tc(fun () -> bench_loop(LoopCount, Empty, Fun, Input) end),\n    AverageNanoSeconds = round((TotalMicroSeconds * 1000) / 100000),\n    {Module, ElementSize, AverageNanoSeconds}.\n\n-spec make_empty(module()) -> term().\nmake_empty(dict)     -> dict:new();\nmake_empty(gb_trees) -> gb_trees:empty();\nmake_empty(maps)     -> maps:new().\n\n-spec get_insert_fun(module()) -> fun ((term(), term(), term()) -> term()).\nget_insert_fun(dict)     -> fun dict:store/3;\nget_insert_fun(gb_trees) -> fun gb_trees:enter/3;\nget_insert_fun(maps)     -> fun maps:put/3.\n\n-spec shuffle(list()) -> list().\nshuffle(List) ->\n    [X||{_,X} <- lists:keysort(1, [{random:uniform(), N} || N <- List])].\n\n-spec bench_loop(non_neg_integer(), term(), function(), [non_neg_integer()]) -> ok.\nbench_loop(0, _, _, _)                      -> ok;\nbench_loop(LoopCount, Empty, Fun, Input) ->\n    _ = lists:foldl(fun (N, Acc) -> Fun(N, N, Acc) end, Empty, Input),\n    bench_loop(LoopCount - 1, Empty, Fun, Input).\n\n\n\n\u6e2c\u5b9a\u7d50\u679c\n\nOTP18.0\n\u8868\u306e\u5024\u306f\u3001\u4e00\u3064\u306e\u633f\u5165\u64cd\u4f5c\u306b\u8981\u3057\u305f\u5e73\u5747\u6642\u9593(\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002\n\n\n\n\u8981\u7d20\u6570 \uff3c \u30e2\u30b8\u30e5\u30fc\u30eb\ndict\ngb_trees\nmaps\n\n\n\n\n1\n307\n104\n74\n\n\n10\n221\n114\n61\n\n\n100\n283\n173\n122\n\n\n1000\n415\n331\n144\n\n\n10000\n582\n555\n212\n\n\n100000\n2093\n1129\n492\n\n\n\n\u5168\u3066\u306e\u30b1\u30fc\u30b9\u3067maps\u304c\u4e00\u756a\u826f\u3044\u7d50\u679c\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\nOTP17.1\n\u53c2\u8003\u307e\u3067\u306b\u524d\u56de\u306e\u6e2c\u5b9a\u7d50\u679c\u3082\u8f09\u305b\u3066\u304a\u304f\u3002\n\n\n\n\u8981\u7d20\u6570 \uff3c \u30e2\u30b8\u30e5\u30fc\u30eb\ndict\ngb_trees\nmaps\n\n\n\n\n1\n355\n165\n192\n\n\n10\n260\n126\n162\n\n\n100\n321\n216\n375\n\n\n1000\n461\n344\n2444\n\n\n10000\n763\n564\n26274\n\n\n100000\n2076\n1255\n323424\n\n\n\n\u524d\u56de\u3068\u4eca\u56de\u3068\u3067\u306f\u6e2c\u5b9a\u74b0\u5883\u304c\u7570\u306a\u308b\u306e\u3067\u500b\u3005\u306e\u6570\u5024\u81ea\u4f53\u306e\u6bd4\u8f03\u306b\u306f\u3042\u307e\u308a\u610f\u5473\u306f\u306a\u3044\u304c\u3001OTP18\u306b\u306a\u3063\u3066maps\u306e(\u8981\u7d20\u6570\u306b\u5bfe\u3059\u308b)\u6027\u80fd\u304c\u660e\u3089\u304b\u306b\u5411\u4e0a\u3057\u3066\u3044\u308b\u3053\u3068\u306f\u898b\u3066\u3068\u308c\u308b\u3002\n\n\u611f\u60f3\nmaps\u306f\u7d44\u307f\u8fbc\u307f\u578b\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u304c\u5229\u7528\u3067\u304d\u308b\u306e\u3067\u3001\u3082\u3068\u3082\u3068\u4ed6\u306e\u985e\u4f3c\u30c7\u30fc\u30bf\u69cb\u9020(e.g. dict\u3001\u9023\u60f3\u30ea\u30b9\u30c8)\u306b\u6bd4\u3079\u3066\u5229\u4fbf\u6027\u304c\u9ad8\u304b\u3063\u305f\u3002\n%% maps\u3092\u4f7f\u3063\u305f\u5206\u5c90\u306e\u4f8b: \u8907\u6570\u30ad\u30fc\u3092\u4f7f\u3063\u305f\u6761\u4ef6\u5224\u5b9a\u304c\u7c21\u5358\ncase Map of\n  #{hoge := 10} -> ok;\n  #{fuga := 20} -> ng\nend.\n\n%% \u540c\u69d8\u306e\u51e6\u7406\u306e\u9023\u60f3\u30ea\u30b9\u30c8\u3067\u306e\u5b9f\u88c5\u4f8b\ncase {proplists:get_value(hoge, List), proplists:get_value(fuga, List)} of\n  {10, _} -> ok;\n  {_, 20} -> ng\nend.\n\nOTP17\u3067\u61f8\u5ff5\u3067\u3042\u3063\u305f\u6027\u80fd\u9762\u304c\u6539\u5584\u3055\u308c\u305f\u306e\u3067\u3042\u308c\u3070\u3001\u3082\u3046\u8f9e\u66f8\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u95a2\u3057\u3066\u306f\u57fa\u672c\u7684\u306bmaps\u4e00\u629e\u3067\u826f\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n(\u7528\u9014\u306b\u5408\u308f\u306a\u3044\u5834\u5408\u3060\u3051\u4ed6\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u9078\u629e\u3059\u308b)\n\n\u8ffd\u8a18: 2015-06-30\n\u3061\u306a\u307f\u306bOTP18.0\u306eREADME\u306b\u306f\u3001maps\u306b\u95a2\u3057\u3066\u300cMemory consumption size is probalistic but lesser than gb_trees or dict for instance\u300d\u3068\u3044\u3063\u305f\u8a18\u8ff0\u304c\u3042\u308a\u3001\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u306e\u70b9\u3067\u3082maps\u306e\u65b9\u304c\u512a\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3042\u308b\u3002\n(maps\u3068\u9023\u60f3\u30ea\u30b9\u30c8\u3068\u306e\u6bd4\u8f03\u3067\u3042\u308c\u3070\u3001\u5f8c\u8005\u306e\u65b9\u304c\u69cb\u9020\u304c\u5358\u7d14\u306a\u5206\u3001\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c\u5c11\u306a\u3044\u53ef\u80fd\u6027\u306f\u3042\u308b\u3068\u601d\u3046\u304c)\n[\u4ee5\u524d\u306e\u8a18\u4e8b](http://qiita.com/sile/items/48f1268d2e03915ca479)\u3067\u306f\u300cOTP17\u7cfb\u3067\u306f[maps](http://www.erlang.org/doc/man/maps.html)\u306e\u5185\u90e8\u5b9f\u88c5\u306b\u5358\u7d14\u306a\u9023\u60f3\u30ea\u30b9\u30c8(\u914d\u5217)\u304c\u4f7f\u308f\u308c\u3066\u304a\u308a\u8981\u7d20\u6570\u306b\u5bfe\u3057\u3066\u6027\u80fd\u304c\u30b9\u30b1\u30fc\u30eb\u3057\u306a\u3044\u300d\u3068\u3044\u3063\u305f\u3053\u3068\u3092\u66f8\u3044\u305f\u3002\n\u5148\u65e5\u306b\u51fa\u305fOTP18.0\u306e[\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8](http://www.erlang.org/download.html)\u306b\u306f\u300c\u8981\u7d20\u6570\u304c\u591a\u3044maps\u306b\u306fHAMT(Hash Array Mapped Trie\u306e\u7565: \u3082\u306e\u51c4\u304f\u96d1\u306b\u8a00\u3046\u306a\u3089\u6c38\u7d9a\u5316\u306b\u5bfe\u5fdc\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u7684\u306a\u6027\u8cea\u3092\u5099\u3048\u305f\u30c7\u30fc\u30bf\u69cb\u9020)\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u305f\u300d\u7684\u306a\u3053\u3068\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u5927\u5e45\u306a\u6027\u80fd\u6539\u5584\u304c\u671f\u5f85\u3067\u304d\u308b\u306e\u3067\u3001\u3042\u3089\u305f\u3081\u3066\u51e6\u7406\u6642\u9593\u3092\u8a08\u6e2c\u3057\u3066\u307f\u305f\u3002\n(\u5185\u5bb9\u7684\u306b\u307b\u307c\u524d\u56de\u306e\u30b3\u30d4\u30da)\n\n\u6e2c\u5b9a\u74b0\u5883\n-------\n\n\u524d\u56de\u3068\u306f\u6e2c\u5b9a\u74b0\u5883\u306f\u7570\u306a\u308b:\n\n- CPU: Intel(R) Core(TM) i7-5600U CPU @ 2.60GHz (x4)\n- OS: Ubuntu-15.04\n- Erlang: OTP18.0 ([deb](http://packages.erlang-solutions.com/erlang/esl-erlang/FLAVOUR_3_general/esl-erlang_18.0-1~ubuntu~precise_amd64.deb))\n\n\u6e2c\u5b9a\u5bfe\u8c61\n-------\n\n\u524d\u56de\u3068\u540c\u69d8:\n\n- maps, dict, gb_trees\n- \u5168\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f[HiPE](http://qiita.com/sile/items/d750019fcab961bbb0a7)\u3067\u30b3\u30f3\u30d1\u30a4\u30eb \n\n\u6e2c\u5b9a\u65b9\u6cd5\n-------\n\n\u3053\u308c\u3082\u524d\u56de\u3068\u540c\u69d8:\n\n1. \u5165\u529b\u5024\u306f\u30010\u304b\u3089\u8981\u7d20\u6570\u672a\u6e80\u306e\u6570\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3079\u305f\u3082\u306e\n2. \u5165\u529b\u5024\u3092\u9806\u306b\u633f\u5165\u3057\u3066\u3044\u304d\u3001\u5168\u8981\u7d20\u3092\u633f\u5165\u3059\u308b\u307e\u3067\u306b\u639b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u6e2c\n3. \u5168\u8981\u7d20\u306e\u51e6\u7406\u306b\u639b\u304b\u3063\u305f\u6642\u9593\u3092\u8981\u7d20\u6570\u3067\u5272\u3063\u3066\u3001\u4e00\u8981\u7d20\u306e\u633f\u5165\u306b\u639b\u304b\u3063\u305f\u5e73\u5747\u6642\u9593\u3092\u7b97\u51fa\n  - \u3053\u306e\u4e00\u8981\u7d20\u3042\u305f\u308a\u306e\u5e73\u5747\u51e6\u7406\u6642\u9593\u304c\u3001\u4eca\u56de\u306e\u6e2c\u5b9a\u7d50\u679c\u3068\u306a\u308b\n  - \u306a\u304a\u633f\u5165\u4ee5\u5916\u306e\u51e6\u7406(ex. \u524a\u9664\u3001\u691c\u7d22)\u306f\u4eca\u56de\u306e\u5bfe\u8c61\u5916\u3068\u3059\u308b\u304c\u633f\u5165\u3068\u540c\u69d8\u306e\u51e6\u7406\u50be\u5411\u3092\u793a\u3057\u3066\u3044\u308b\n\n```erlang:bench.erl\n-module(bench).\n \n-export([bench/0]).\n \n-spec bench() -> [Result] when\n      Result :: {module(), ElementSize::pos_integer(), InsertAverageNanoSeconds::non_neg_integer()}.\nbench() ->\n    ElementSizeList = [1, 10, 100, 1000, 10000, 100000], \n    InputList = [shuffle(lists:seq(0, Size - 1)) || Size <- ElementSizeList],\n \n    ModuleList = [dict, gb_trees, maps],\n \n    lists:sort(\n      [do_bench(Module, Input) || Module <- ModuleList,\n                                  Input <- InputList]).\n \n-spec do_bench(module(), [non_neg_integer()]) -> Result when\n      Result :: {module(), ElementSize::pos_integer(), InsertAverageNanoSeconds::non_neg_integer()}.\ndo_bench(Module, Input) ->\n    ElementSize = length(Input),\n    LoopCount = 100000 div ElementSize,  % \u4e00\u56de\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u4e2d\u306e\u633f\u5165\u64cd\u4f5c\u306e\u56de\u6570\u3092\u7b49\u3057\u304f\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u30eb\u30fc\u30d7\u6570\u3067\u8abf\u6574\u3059\u308b\n \n    Empty = make_empty(Module),\n    Fun   = get_insert_fun(Module),\n \n    {TotalMicroSeconds, _} =\n        timer:tc(fun () -> bench_loop(LoopCount, Empty, Fun, Input) end),\n    AverageNanoSeconds = round((TotalMicroSeconds * 1000) / 100000),\n    {Module, ElementSize, AverageNanoSeconds}.\n \n-spec make_empty(module()) -> term().\nmake_empty(dict)     -> dict:new();\nmake_empty(gb_trees) -> gb_trees:empty();\nmake_empty(maps)     -> maps:new().\n \n-spec get_insert_fun(module()) -> fun ((term(), term(), term()) -> term()).\nget_insert_fun(dict)     -> fun dict:store/3;\nget_insert_fun(gb_trees) -> fun gb_trees:enter/3;\nget_insert_fun(maps)     -> fun maps:put/3.\n \n-spec shuffle(list()) -> list().\nshuffle(List) ->\n    [X||{_,X} <- lists:keysort(1, [{random:uniform(), N} || N <- List])].\n \n-spec bench_loop(non_neg_integer(), term(), function(), [non_neg_integer()]) -> ok.\nbench_loop(0, _, _, _)                      -> ok;\nbench_loop(LoopCount, Empty, Fun, Input) ->\n    _ = lists:foldl(fun (N, Acc) -> Fun(N, N, Acc) end, Empty, Input),\n    bench_loop(LoopCount - 1, Empty, Fun, Input).\n```\n\n\u6e2c\u5b9a\u7d50\u679c\n--------\n\n### OTP18.0\n\n\u8868\u306e\u5024\u306f\u3001\u4e00\u3064\u306e\u633f\u5165\u64cd\u4f5c\u306b\u8981\u3057\u305f\u5e73\u5747\u6642\u9593(\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002\n\n| \u8981\u7d20\u6570 \uff3c \u30e2\u30b8\u30e5\u30fc\u30eb | dict       | gb_trees       | maps |\n|-------------------:|-----------:|---------------:|-----:|\n| 1                  | 307        | 104            | 74   |\n| 10                 | 221        | 114            | 61   |\n| 100                | 283        | 173            | 122  |\n| 1000               | 415        | 331            | 144  |\n| 10000              | 582        | 555            | 212  |\n| 100000             | 2093       | 1129           | 492  |\n\n\u5168\u3066\u306e\u30b1\u30fc\u30b9\u3067maps\u304c\u4e00\u756a\u826f\u3044\u7d50\u679c\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n### OTP17.1\n\n\u53c2\u8003\u307e\u3067\u306b\u524d\u56de\u306e\u6e2c\u5b9a\u7d50\u679c\u3082\u8f09\u305b\u3066\u304a\u304f\u3002\n\n| \u8981\u7d20\u6570 \uff3c \u30e2\u30b8\u30e5\u30fc\u30eb | dict       | gb_trees       | maps |\n|-------------------:|-----------:|---------------:|-----:|\n| 1                  | 355 | 165 | 192 |\n| 10                 | 260 | 126 | 162 |\n| 100                | 321 | 216 | 375 |\n| 1000               | 461 | 344 | 2444 |\n| 10000              | 763 | 564 | 26274 |\n| 100000             | 2076 | 1255 | 323424 |\n\n\u524d\u56de\u3068\u4eca\u56de\u3068\u3067\u306f\u6e2c\u5b9a\u74b0\u5883\u304c\u7570\u306a\u308b\u306e\u3067\u500b\u3005\u306e\u6570\u5024\u81ea\u4f53\u306e\u6bd4\u8f03\u306b\u306f\u3042\u307e\u308a\u610f\u5473\u306f\u306a\u3044\u304c\u3001OTP18\u306b\u306a\u3063\u3066maps\u306e(\u8981\u7d20\u6570\u306b\u5bfe\u3059\u308b)\u6027\u80fd\u304c\u660e\u3089\u304b\u306b\u5411\u4e0a\u3057\u3066\u3044\u308b\u3053\u3068\u306f\u898b\u3066\u3068\u308c\u308b\u3002\n\n\u611f\u60f3\n----\n\nmaps\u306f\u7d44\u307f\u8fbc\u307f\u578b\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u304c\u5229\u7528\u3067\u304d\u308b\u306e\u3067\u3001\u3082\u3068\u3082\u3068\u4ed6\u306e\u985e\u4f3c\u30c7\u30fc\u30bf\u69cb\u9020(e.g. dict\u3001\u9023\u60f3\u30ea\u30b9\u30c8)\u306b\u6bd4\u3079\u3066\u5229\u4fbf\u6027\u304c\u9ad8\u304b\u3063\u305f\u3002\n\n```erlang\n%% maps\u3092\u4f7f\u3063\u305f\u5206\u5c90\u306e\u4f8b: \u8907\u6570\u30ad\u30fc\u3092\u4f7f\u3063\u305f\u6761\u4ef6\u5224\u5b9a\u304c\u7c21\u5358\ncase Map of\n  #{hoge := 10} -> ok;\n  #{fuga := 20} -> ng\nend.\n\n%% \u540c\u69d8\u306e\u51e6\u7406\u306e\u9023\u60f3\u30ea\u30b9\u30c8\u3067\u306e\u5b9f\u88c5\u4f8b\ncase {proplists:get_value(hoge, List), proplists:get_value(fuga, List)} of\n  {10, _} -> ok;\n  {_, 20} -> ng\nend.\n```\n\nOTP17\u3067\u61f8\u5ff5\u3067\u3042\u3063\u305f\u6027\u80fd\u9762\u304c\u6539\u5584\u3055\u308c\u305f\u306e\u3067\u3042\u308c\u3070\u3001\u3082\u3046\u8f9e\u66f8\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u95a2\u3057\u3066\u306f\u57fa\u672c\u7684\u306bmaps\u4e00\u629e\u3067\u826f\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n(\u7528\u9014\u306b\u5408\u308f\u306a\u3044\u5834\u5408\u3060\u3051\u4ed6\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u9078\u629e\u3059\u308b)\n\n\u8ffd\u8a18: 2015-06-30\n----------------\n\n\u3061\u306a\u307f\u306bOTP18.0\u306e[README](http://www.erlang.org/download/otp_src_18.0.readme)\u306b\u306f\u3001maps\u306b\u95a2\u3057\u3066\u300cMemory consumption size is probalistic but lesser than gb_trees or dict for instance\u300d\u3068\u3044\u3063\u305f\u8a18\u8ff0\u304c\u3042\u308a\u3001\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u306e\u70b9\u3067\u3082maps\u306e\u65b9\u304c\u512a\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3042\u308b\u3002\n(maps\u3068\u9023\u60f3\u30ea\u30b9\u30c8\u3068\u306e\u6bd4\u8f03\u3067\u3042\u308c\u3070\u3001\u5f8c\u8005\u306e\u65b9\u304c\u69cb\u9020\u304c\u5358\u7d14\u306a\u5206\u3001\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c\u5c11\u306a\u3044\u53ef\u80fd\u6027\u306f\u3042\u308b\u3068\u601d\u3046\u304c)\n"}