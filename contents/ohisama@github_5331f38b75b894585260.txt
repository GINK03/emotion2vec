{"context": " More than 1 year has passed since last update.\n\nsemaphore\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n#include \"ch.h\"\n#include \"hal.h\"\n\n#define CONSOLE_WA_SIZE      THD_WORKING_AREA_SIZE(4096)\n#define cputs(msg)            chMsgSend(cdtp, (msg_t) msg)\nstatic semaphore_t sem1;\nstatic thread_t * cdtp;\nstatic THD_FUNCTION(console_thread, arg)\n{\n    (void) arg;\n    while (!chThdShouldTerminateX())\n    {\n        thread_t * tp = chMsgWait();\n        puts((char *) chMsgGet(tp));\n        fflush(stdout);\n        chMsgRelease(tp, MSG_OK);\n    }\n}\nstatic THD_WORKING_AREA(waThread1, 1024);\nstatic THD_FUNCTION(Thread1, arg)\n{\n    (void) arg;\n    chRegSetThreadName(\"green\");\n    while (TRUE)\n    {\n        chSemWait(&sem1);\n        cputs(\"green on\");\n        chThdSleepMilliseconds(1000);\n        cputs(\"green off\");\n    }\n}\nstatic THD_WORKING_AREA(waThread2, 1024);\nstatic THD_FUNCTION(Thread2, arg)\n{\n    (void) arg;\n    chRegSetThreadName(\"yellow\");\n    while (TRUE)\n    {\n        chSemWait(&sem1);\n        cputs(\"yellow on\");\n        chThdSleepMilliseconds(1000);\n        cputs(\"yellow off\");\n    }\n}\nstatic THD_WORKING_AREA(waThread3, 1024);\nstatic THD_FUNCTION(Thread3, arg)\n{\n    (void) arg;\n    chRegSetThreadName(\"red\");\n    while (TRUE)\n    {\n        chSemWait(&sem1);\n        cputs(\"red on\");\n        chThdSleepMilliseconds(1000);\n        cputs(\"red off\");\n    }\n}\nint main(void)\n{\n    halInit();\n    chSysInit();\n    chSemObjectInit(&sem1, 0);\n    cdtp = chThdCreateFromHeap(NULL, CONSOLE_WA_SIZE, NORMALPRIO, console_thread, NULL);\n    chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO + 1, Thread1, NULL);\n    chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO + 1, Thread2, NULL);\n    chThdCreateStatic(waThread3, sizeof(waThread3), NORMALPRIO + 1, Thread3, NULL);\n    while (!chThdShouldTerminateX())\n    {\n        chThdSleepMilliseconds(1000);\n        chSemSignal(&sem1);\n    }\n    return 0;\n}\n\n\n## semaphore\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n```\n#include \"ch.h\"\n#include \"hal.h\"\n\n#define CONSOLE_WA_SIZE\t\t THD_WORKING_AREA_SIZE(4096)\n#define cputs(msg)\t\t\t  chMsgSend(cdtp, (msg_t) msg)\nstatic semaphore_t sem1;\nstatic thread_t * cdtp;\nstatic THD_FUNCTION(console_thread, arg)\n{\n\t(void) arg;\n\twhile (!chThdShouldTerminateX())\n\t{\n\t\tthread_t * tp = chMsgWait();\n\t\tputs((char *) chMsgGet(tp));\n\t\tfflush(stdout);\n\t\tchMsgRelease(tp, MSG_OK);\n\t}\n}\nstatic THD_WORKING_AREA(waThread1, 1024);\nstatic THD_FUNCTION(Thread1, arg)\n{\n\t(void) arg;\n\tchRegSetThreadName(\"green\");\n\twhile (TRUE)\n\t{\n\t\tchSemWait(&sem1);\n\t\tcputs(\"green on\");\n\t\tchThdSleepMilliseconds(1000);\n\t\tcputs(\"green off\");\n\t}\n}\nstatic THD_WORKING_AREA(waThread2, 1024);\nstatic THD_FUNCTION(Thread2, arg)\n{\n\t(void) arg;\n\tchRegSetThreadName(\"yellow\");\n\twhile (TRUE)\n\t{\n\t\tchSemWait(&sem1);\n\t\tcputs(\"yellow on\");\n\t\tchThdSleepMilliseconds(1000);\n\t\tcputs(\"yellow off\");\n\t}\n}\nstatic THD_WORKING_AREA(waThread3, 1024);\nstatic THD_FUNCTION(Thread3, arg)\n{\n\t(void) arg;\n\tchRegSetThreadName(\"red\");\n\twhile (TRUE)\n\t{\n\t\tchSemWait(&sem1);\n\t\tcputs(\"red on\");\n\t\tchThdSleepMilliseconds(1000);\n\t\tcputs(\"red off\");\n\t}\n}\nint main(void)\n{\n\thalInit();\n\tchSysInit();\n\tchSemObjectInit(&sem1, 0);\n\tcdtp = chThdCreateFromHeap(NULL, CONSOLE_WA_SIZE, NORMALPRIO, console_thread, NULL);\n\tchThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO + 1, Thread1, NULL);\n\tchThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO + 1, Thread2, NULL);\n\tchThdCreateStatic(waThread3, sizeof(waThread3), NORMALPRIO + 1, Thread3, NULL);\n\twhile (!chThdShouldTerminateX())\n\t{\n\t\tchThdSleepMilliseconds(1000);\n\t\tchSemSignal(&sem1);\n\t}\n\treturn 0;\n}\n\n```\n", "tags": ["chibios", "L\u30c1\u30ab", "semaphore"]}