{"context": " More than 1 year has passed since last update.\n\nJava\u3067LINQ\u304c\u4f7f\u3044\u305f\u3044\n\u3000Java\u3067\u4f7f\u3048\u308bLINQ\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002C#\u306eLINQ\u306a\u3089\u6d41\u66a2\u306b\u8868\u73fe\u3067\u304d\u308b\u306e\u306b\uff0cJava8\u306eStream\u3067\u306f\u4e0a\u624b\u304f\u8868\u73fe\u3067\u304d\u306a\u3044\u60a9\u307f\u3092\u30e9\u30c3\u30d7\u3057\u307e\u3059\u3002\n\njLinqer\n\u3000jLinqer\u306fJava\u3067LINQ (Language INtegrated Query: \u7d71\u5408\u8a00\u8a9e\u30af\u30a8\u30ea) \u304c\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002C#\u306eLINQ\u306b\u5b58\u5728\u3057\u3066Java8\u306eStream\u306b\u4e0d\u8db3\u3057\u3066\u3044\u308b\u6a5f\u80fd(selectMany\uff0cUnion, Intersect, Except\u7b49)\u3082\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4f7f\u7528\u65b9\u6cd5\n\u3000Gradle\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\uff0c\u4ee5\u4e0b\u3092\u767b\u9332\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n'com.github.jlinqer:jlinqer:1.0.0'\n\n\u3000Maven\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\uff0c\u4ee5\u4e0b\u306epom.xml\u3092\u767b\u9332\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<dependency>\n    <groupId>com.github.jlinqer</groupId>\n    <artifactId>jlinqer</artifactId>\n    <version>1.0.0</version>\n</dependency>\n\n\n\u3000maven\u3092\u4f7f\u7528\u305b\u305a\uff0cjLinqer\u306ejar\u3092\u76f4\u63a5\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\uff0c\u4ee5\u4e0b\u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u3000\u3000\u2021Maven, \"jLinqer\", https://oss.sonatype.org/content/groups/public/com/github/jlinqer/jlinqer/1.0.0/jlinqer-1.0.0.jar\n\u3000\n\nLINQ - jLinqer \u5bfe\u5fdc\u30de\u30c8\u30ea\u30af\u30b9\n\n\n\n\u6a5f\u80fd\nLINQ(C#)\njLinqer(Java)\nStream(Java)\n\n\n\n\n\u3010\u57fa\u672c\u3011\n\n\n\n\n\n\u62bd\u51fa\nWhere\nwhere\nfilter\n\n\n\u5c04\u5f71\nSelect\nselect\nmap\n\n\n\u4e26\u3079\u66ff\u3048(\u6607\u9806)\nOrderBy\norderBy\nsorted\n\n\n\u4e26\u3079\u66ff\u3048(\u964d\u9806)\nOrderByDescending\norderByDescending\nn/a\n\n\n\u5f8c\u7d9a\u3092\u4e26\u3079\u66ff\u3048(\u6607\u9806)\nThenBy\nthenBy\nn/a\n\n\n\u5f8c\u7d9a\u3092\u4e26\u3079\u66ff\u3048(\u964d\u9806)\nThenByDescending\nthenByDescending\nn/a\n\n\n\u5e73\u5766\u5316\u3057\u3066\u5c04\u5f71\nSelectMany\nselectMany\nflatMap\n\n\n\u3010\u62bd\u51fa\u7cfb\u3011\n\n\n\n\n\n\uff4e\u4ef6\u98db\u3070\u3059\nSkip\nskip\nskip\n\n\n\u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u98db\u3070\u3059\nSkipWhile\nskipWhile\nn/a\n\n\n\uff4e\u4ef6\u307e\u3067\u6d41\u3059\nTake\ntake\nlimit\n\n\n\u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u6d41\u3059\nTakeWhile\ntakeWhile\nn/a\n\n\n\u3010\u5408\u6210\u7cfb\u3011\n\n\n\n\n\n\u9023\u7d50\nConcat\nconcat\nconcat\n\n\n\u7a4d\u96c6\u5408\nIntersect\nintersect\nn/a\n\n\n\u548c\u96c6\u5408\nUnion\nunion\nn/a\n\n\n\u5dee\u96c6\u5408\nExcept\nexcept\nn/a\n\n\n\u5185\u90e8\u7d50\u5408\nJoin\njoin\nn/a\n\n\n\u5916\u90e8\u7d50\u5408\nGroupJoin\ngroupJoin\nn/a\n\n\n\u4e26\u3073\u3092\u9006\u306b\u3059\u308b\nReverse\nreverse\nn/a\n\n\n2\u3064\u306e\u5024\u3092\u63c3\u3048\u3066\u6d41\u3059\nZip\nzip\nn/a\n\n\n\u3010\u30b0\u30eb\u30fc\u30d7\u5316\u3001\u96c6\u8a08\u7cfb\u3011\n\n\n\n\n\n\u91cd\u8907\u3092\u7121\u304f\u3059\nDistinct\ndistinct\ndistinct\n\n\n\u7573\u307f\u8fbc\u307f\nAggregate\naggregate\nreduce\n\n\n\u30b0\u30eb\u30fc\u30d7\u5316\nGroupBy\ngroupBy\nCollectors.groupingBy\n\n\n\u5e73\u5747\nAverage\naverageXXX\nCollectors.summarizingXXX\n\n\n\u4ef6\u6570\nCount\ncount\nn/a\n\n\n\u4ef6\u6570\nLongCount\nlongCount\ncount\n\n\n\u6700\u5927\nMax\nmax\nmax\n\n\n\u6700\u5c0f\nMin\nmin\nmin\n\n\n\u5408\u8a08\nSum\nsumXXX\nCollectors.summarizingXXX\n\n\n\u5148\u982d\nFirst\nfirst\nfindFirst\n\n\n\u5148\u982d\nFirstOrDefault\nfirstOrDefault\nn/a\n\n\n\u7d42\u7aef\nLast\nlast\nn/a\n\n\n\u7d42\u7aef\nLastOrDefault\nlastOrDefault\nn/a\n\n\n1\u4ef6\u306e\u5024\u3092\u5f97\u308b\nSingle\nsingle\nn/a\n\n\n1\u4ef6\u306e\u5024\u3092\u5f97\u308b\nSingleOrDefault\nsingleOrDefault\nn/a\n\n\n\u7a7a\u306a\u3089\u65e2\u5b9a\u5024\u3092\u8fd4\u3059\nDefaultIfEmpty\ndefaultIfEmpty\nn/a\n\n\n\u6307\u5b9a\u756a\u76ee\u306e\u8981\u7d20\u53d6\u5f97\nElementAt\nelementAt\nn/a\n\n\n\u6307\u5b9a\u756a\u76ee\u306e\u8981\u7d20\u53d6\u5f97\nElementAtOrDefault\nelementAtOrDefault\nn/a\n\n\n\u5168\u30c7\u30fc\u30bf\u304c\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\uff1f\nAll\nall\nallMatch\n\n\n\u3044\u305a\u308c\u304b\u306e\u30c7\u30fc\u30bf\u304c\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\uff1f\nAny\nany\nanyMatch\n\n\n\u3010\u751f\u6210\u7cfb\u3011\n\n\n\n\n\n\u7a7a\nEmpty\nempty\nn/a\n\n\n\u7bc4\u56f2\u3092\u751f\u6210\nRange\nrange\nn/a\n\n\n\u7e70\u308a\u8fd4\u3059\nRepeat\nrepeat\nn/a\n\n\n\u3010\u305d\u306e\u4ed6\u3011\n\n\n\n\n\n\u5168\u8981\u7d20\u4e00\u81f4\nSequenceEqual\nsequenceEqual\nn/a\n\n\n\u30ad\u30e3\u30b9\u30c8\nCast\ncast\nn/a\n\n\n\u4e00\u81f4\u3059\u308b\u578b\u306e\u307f\u62bd\u51fa\nOfType\nofType\nn/a\n\n\n\n\n\u4f7f\u3044\u65b9\njava.util.List\u3092com.github.jlinqer.collections.List\u306b\u7f6e\u304d\u63db\u3048\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nWhere\nList<Integer> list = new List<>(1, 2, 3);\n\nList<Integer> actual = list.where(x -> x == 1 || x == 3).toList();\n\nassertEquals(true , actual.contains(1));\nassertEquals(false, actual.contains(2));\nassertEquals(true , actual.contains(3));\n\n\nSelect\nList<Person> list = new List<>(\n        new Person(\"React\"   , 1),\n        new Person(\"Angular\" , 3),\n        new Person(\"Backbone\", 5)\n);\n\nList<String> actual = list.select(x -> x.name).toList();\n\nassertEquals(\"React\"   , actual.get(0));\nassertEquals(\"Angular\" , actual.get(1));\nassertEquals(\"Backbone\", actual.get(2));\n\n\nOrderBy\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nList<String> actual = list.orderBy(x -> x).toList();\n\nassertEquals(\"Angular\" , actual.get(0));\nassertEquals(\"Backbone\", actual.get(1));\nassertEquals(\"React\"   , actual.get(2));\n\n\nOrderByDescending\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nList<String> actual = list.orderByDescending(x -> x).toList();\n\nassertEquals(\"React\"   , actual.get(0));\nassertEquals(\"Backbone\", actual.get(1));\nassertEquals(\"Angular\" , actual.get(2));\n\n\nThenBy\nList<Person> list = new List<>(\n        new Person(\"Angular2\", 2),\n        new Person(\"Angular1\", 2),\n        new Person(\"React\"   , 1)\n);\n\nList<String> actual = list.orderBy(x -> x.age).thenBy(x -> x.name).toList();\n\nassertEquals(\"React\" , actual.get(0).name);\nassertEquals(\"Angular1\", actual.get(1).name);\nassertEquals(\"Angular2\"   , actual.get(2).name);\n\n\nThenByDescending\nList<Person> list = new List<>(\n        new Person(\"Angular2\", 2),\n        new Person(\"Angular1\", 2),\n        new Person(\"React\"   , 1)\n);\n\nList<String> actual = list.orderBy(x -> x.age).thenByDescending(x -> x.name).toList();\n\nassertEquals(\"React\" , actual.get(0).name);\nassertEquals(\"Angular2\", actual.get(1).name);\nassertEquals(\"Angular1\"   , actual.get(2).name);\n\n\nSelectMany\nList<Person> list = new List<>(\n        new Person(\"Angular\", 3, new List(\"1.0.1\", \"1.0.2\")),\n        new Person(\"React\"  , 1, new List(\"2.0.1\", \"2.0.2\"))\n);\n\nList<String> actual = list.selectMany(x -> x.versionHistory).toList();\n\nassertEquals(\"1.0.1\", actual.get(0));\nassertEquals(\"1.0.2\", actual.get(1));\nassertEquals(\"2.0.1\", actual.get(2));\nassertEquals(\"2.0.2\", actual.get(3));\n\n\nSkip\nList<Integer> list = new List<>(1, 2, 3);\n\nList<Integer> actual = list.skip(2).toList();\n\nassertEquals(3, actual.get(0).intValue());\n\n\nSkipWhile\nList<Integer> list = new List<>(1, 2, 3, 4, 5);\n\nList<Integer> actual = list.skipWhile(x -> x <= 3).toList();\n\nassertEquals(4, actual.get(0).intValue());\nassertEquals(5, actual.get(1).intValue());\n\n\nTake\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nList<String> actual = list.take(2).toList();\n\nassertEquals(2, actual.size());\nassertEquals(\"Backbone\", actual.get(0));\nassertEquals(\"Angular\" , actual.get(1));\n\n\nTakeWhile\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nList<String> actual = list.takeWhile(x -> x.equals(\"Backbone\") || x.equals(\"Angular\")).toList();\n\nassertEquals(2, actual.size());\nassertEquals(\"Backbone\", actual.get(0));\nassertEquals(\"Angular\" , actual.get(1));\n\n\nConcat\nList<Integer> first  = new List<>(1, 2);\nList<Integer> second = new List<>(2, 3);\n\nList<Integer> actual = first.concat(second).toList();\n\nassertEquals(1, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(2, actual.get(2).intValue());\nassertEquals(3, actual.get(3).intValue());\n\n\nIntersect\nList<Integer> first  = new List<>(1, 2, 3);\nList<Integer> second = new List<>(1, 3);\n\nList<Integer> actual = first.intersect(second).toList();\n\nassertEquals(1, actual.get(0).intValue());\nassertEquals(3, actual.get(1).intValue());\n\n\nUnion\nList<Integer> first = new List<>(1, 2, 3);\nList<Integer> second = new List<>(0, 1, 3, 4);\n\nList<Integer> actual = first.union(second).toList();\n\nassertEquals(5, actual.size());\nassertEquals(1, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(3, actual.get(2).intValue());\nassertEquals(0, actual.get(3).intValue());\nassertEquals(4, actual.get(4).intValue());\n\n\nExcept\nList<Integer> first  = new List<>(1, 2, 3);\nList<Integer> second = new List<>(1, 3);\n\nList<Integer> actual = first.except(second).toList();\n\nassertEquals(2, actual.get(0).intValue());\n\n\nJoin\nList<Javascript> outer = new List<>(\n        new Javascript(\"Angular\", 1),\n        new Javascript(\"React\"  , 4),\n        new Javascript(\"ES2016\" , 5)\n);\nList<Javascript> inner = new List<>(\n        new Javascript(\"Angular\", 2),\n        new Javascript(\"Angular\", 3),\n        new Javascript(\"ES2016\" , 6),\n        new Javascript(\"ES7\"    , 7)\n);\n\nFunction<Javascript, String> outerKey = (x) -> x.name;\nFunction<Javascript, String> innerKey = (y) -> y.name;\nBiFunction<Javascript, Javascript, Javascript> selector = (x, y) -> new Javascript(x.name, y.age);\nList<Javascript> actual = outer.join(inner, outerKey, innerKey, selector).toList();\n\nassertEquals(3, actual.size());\nassertEquals(\"Angular\", actual.get(0).name);\nassertEquals(\"Angular\", actual.get(1).name);\nassertEquals(\"ES2016\" , actual.get(2).name);\nassertEquals(2, actual.get(0).age);\nassertEquals(3, actual.get(1).age);\nassertEquals(6, actual.get(2).age);\n\n\nGroupJoin\nList<Javascript> outer = new List<>(\n        new Javascript(\"Angular\", 1),\n        new Javascript(\"React\"  , 4),\n        new Javascript(\"ES2016\" , 5)\n);\nList<Javascript> inner = new List<>(\n        new Javascript(\"Angular\", 2),\n        new Javascript(\"Angular\", 3),\n        new Javascript(\"ES2016\" , 6),\n        new Javascript(\"ES7\"    , 7)\n);\n\nFunction<Javascript, String> outerKey = (x) -> x.name;\nFunction<Javascript, String> innerKey = (y) -> y.name;\nBiFunction<Javascript, IEnumerable<Javascript>, Javascript> selector = (x, y) -> new Javascript(x.name, y.select(z -> z.age));\nList<Javascript> actual = outer.groupJoin(inner, outerKey, innerKey, selector).toList();\n\nassertEquals(3, actual.size());\nassertEquals(\"Angular\", actual.get(0).name);\nassertEquals(\"React\"  , actual.get(1).name);\nassertEquals(\"ES2016\" , actual.get(2).name);\nassertEquals(2, actual.get(0).ages.elementAt(0));\nassertEquals(3, actual.get(0).ages.elementAt(1));\nassertEquals(0, actual.get(1).ages.count());\nassertEquals(6, actual.get(2).ages.elementAt(0));\n\n\nReverse\nList<Integer> list = new List<>(1, 2, 3);\n\nList<Integer> actual = list.reverse().toList();\n\nassertEquals(3, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(1, actual.get(2).intValue());\n\n\nZip\nList<Integer> first = new List<>(1, 2, 3);\nList<String> second = new List<>(\"Angular\", \"React\", \"Backbone\");\n\nList<Integer> actual = first.zip(second, (x, y) -> String.format(\"%s %d\", x, y)).toList();\n\nassertEquals(\"1 Angular\" , actual.get(0));\nassertEquals(\"2 React\"   , actual.get(1));\nassertEquals(\"3 Backbone\", actual.get(2));\n\n\nDistinct\nList<Integer> list =\n        new List<>(\n                1, 2, 3,\n                1, 2, 3, 4\n        );\n\nList<Integer> actual = list.distinct().toList();\n\nassertEquals(1, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(3, actual.get(2).intValue());\nassertEquals(4, actual.get(3).intValue());\n\n\nAggregate\nList<Integer> list = new List<>(1, 2, 3);\n\nint actual = list.aggregate((sum, elem) -> sum + elem);\n\nassertEquals(6, actual);\n\n\nGroupBy\nList<Person> list = new List<>(\n        new Person(\"React\"   , 1),\n        new Person(\"Angular\" , 1),\n        new Person(\"Backbone\", 5)\n);\n\nMap<Integer, IEnumerable<Person>> actual = list.groupBy(x -> x.age);\n\nassertEquals(true, actual.get(1).any(x -> x.name.equals(\"React\")));\nassertEquals(true, actual.get(1).any(x -> x.name.equals(\"Angular\")));\nassertEquals(true, actual.get(5).any(x -> x.name.equals(\"Backbone\")));\n\n\nAverage\nList<Long> listLong = new List<>(1l, 2l, 3l, 4l);\n\ndouble actualLong = listLong.averageLong(x -> x);\n\nassertEquals(2.5d, actualLong, 0);\n\n\nCount\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nlong actual = list.longCount();\nint actualNone = list.count(x -> x.equals(\"jquery\"));\n\nassertEquals(3, actual);\nassertEquals(0, actualNone);\n\n\nMax\nList<Double> listDouble = new List<>(1d, 2d, 3d);\n\ndouble actualDouble = listDouble.max(x -> x);\n\nassertEquals(3d, actualDouble, 0);\n\n\nMin\nList<BigDecimal> listBigDecimal = new List<>(\n        new BigDecimal(1d),\n        new BigDecimal(2d),\n        new BigDecimal(3d)\n);\n\nBigDecimal actualBigDecimal = listBigDecimal.min(x -> x);\n\nassertEquals(1d, actualBigDecimal.doubleValue(), 0);\n\n\nSum\nList<Integer> listInt = new List<>(1, 2, 3);\n\nint actualInt = listInt.sumInt(x -> x);\n\nassertEquals(6, actualInt);\n\n\nFirstOrDefault\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nString actualFirst   = list.firstOrDefault();\nString actualMatch   = list.firstOrDefault(x -> x.equals(\"Angular\"));\nString actualUnMatch = list.firstOrDefault(x -> x.equals(\"jquery\"));\n\nassertEquals(\"Backbone\", actualFirst);\nassertEquals(\"Angular\" , actualMatch);\nassertEquals(null      , actualUnMatch);\n\n\nLastOrDefault\nList<Integer> list = new List<>(1, 2, 3);\nList<Integer> listEmpty = new List<>();\n\nint actual = list.lastOrDefault();\nInteger actualDefaultNone = listEmpty.lastOrDefault(x -> x == 0);\n\nassertEquals(3, actual);\nassertEquals(null, actualDefaultNone);\n\n\nSingleOrDefault\nList<Integer> listMany = new List<>(1, 2, 3);\nList<Integer> listEmpty = new List<>();\n\nint actualFilter = listMany.singleOrDefault(x -> x == 3);\nInteger actualUnMatch = listEmpty.singleOrDefault(x -> x == 0);\n\nassertEquals(3, actualFilter);\nassertEquals(null, actualUnMatch);\n\n\nDefaultIfEmpty\nList<String> listEmpty = new List<>();\n\nList<String> actualDefault = listEmpty.defaultIfEmpty(\"ES7\").toList();\n\nassertEquals(\"ES7\", actualDefault.get(0));\n\n\nElementAtOrDefault\nList<Integer> list = new List<>(1, 2, 3);\n\nint actual = list.elementAtOrDefault(2);\nInteger actualDefault = list.elementAtOrDefault(3);\n\nassertEquals(3, actual);\nassertEquals(null, actualDefault);\n\n\nAll\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nboolean actual = list.all(x -> x.equals(\"Angular\") || x.equals(\"Backbone\") || x.equals(\"React\"));\nboolean actualNotFound = list.all(x -> x.equals(\"Angular\") || x.equals(\"React\"));\n\nassertEquals(true, actual);\nassertEquals(false, actualNotFound);\n\n\nAny\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nboolean actual = list.any(x -> x.equals(\"Angular\"));\nboolean actualNotFound = list.any(x -> x.equals(\"jquery\"));\n\nassertEquals(true, actual);\nassertEquals(false, actualNotFound);\n\n\nEmpty\nList<Double> actual = IEnumerable.empty(Double.class);\n\nassertEquals(0, actual.count());\n\n\nRange\nList<Integer> actual = IEnumerable.range(-2, 3);\n\nassertEquals(-2, actual.get(0).intValue());\nassertEquals(-1, actual.get(1).intValue());\nassertEquals(0 , actual.get(2).intValue());\n\n\nRepeat\nList<String> actual = IEnumerable.repeat(String.class, \"Law of Cycles\", 10);\n\nassertEquals(10, actual.count());\nassertEquals(\"Law of Cycles\", actual.get(9));\n\n\nSequenceEqual\nList<Integer> first = new List<>(1, 2, 3);\nList<Integer> secondMatch = new List<>(1, 2, 3);\nList<Integer> secondUnMatchElem = new List<>(1, 2, 4);\n\nboolean actualMatch = first.sequenceEqual(secondMatch);\nboolean actualUnMatchElm = first.sequenceEqual(secondUnMatchElem);\n\nassertEquals(true, actualMatch);\nassertEquals(false, actualUnMatchElm);\n\n\nCast\nList<Object> list = new List<>(1, 2, 3);\n\nList<Integer> actual = list.cast(Integer.class).toList();\n\nassertEquals(1, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(3, actual.get(2).intValue());\n\n\nOfType\nList<Object> list = new List<>(1, \"2\", 3, \"4\");\n\nList<String>  actualStr = list.ofType(String.class).toList();\nList<Integer> actualInt = list.ofType(Integer.class).toList();\n\nassertEquals(\"2\", actualStr.get(0));\nassertEquals(\"4\", actualStr.get(1));\nassertEquals(1  , actualInt.get(0).intValue());\nassertEquals(3  , actualInt.get(1).intValue());\n\n\n\u8ab2\u984c\n\u3000LINQ\u306e\u6a19\u6e96\u52d5\u4f5c\u3092\u518d\u73fe\u51fa\u6765\u3066\u3044\u306a\u3044\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u9045\u5ef6\u8a55\u4fa1\u306b\u306a\u3063\u3066\u3044\u306a\u3044\n\n\ntoList\u7b49\u3067\u8a55\u4fa1\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u4e2d \uff08\u5909\u66f4\u6e08\uff1a2015/06/22\uff09\n\n\nXXXorDefault\n\n\nInteger\uff0cLong\uff0cDouble\u306edefault\u5024\u304cnull\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002C#\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u304c\u53ef\u80fd\u306a\u306e\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c0\u304c\u8fd4\u5374\u3067\u304d\u307e\u3059\n\n\nGroupBy\n\n\n\u8fd4\u308a\u5024\u304cMap<Key, IEnumerable<TResult>>\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002C#\u306fIGrouping\u3067\u3059\u3002IEnumerable\u306eMap\u304c\u5fc5\u8981\u3067\u3059\u3002\uff08\u691c\u8a0e\u4e2d\uff09\n\n\nsumXXX\uff0caverageXXX\uff0cminXXX\uff0cmaxXXX\n\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3067\u304d\u306a\u3044\u305f\u3081\uff0c\u30e1\u30bd\u30c3\u30c9\u540d\u306b\u578b\u3092\u542b\u307e\u305b\u3066\u3044\u307e\u3059\u3002Java\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u8b70\u8ad6\u306fstackoverflow\u3067\u3057\u307e\u3057\u305f\n\n\nList\u304cjava.lang.List\u3068\u91cd\u8907\u3059\u308b\n\n\nList\u3092\u7d99\u627f\u3057\u3066\u65e2\u5b58\u306eList\u3092\u5b8c\u5168\u306b\u7f6e\u304d\u63db\u3048\u308b\u3088\u3046\u306b\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002java.util.List\u3092com.github.jlinqer.collections.List\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6b63\u7d71\u6d3eIterable\u7d99\u627f\u7248\u306f\u53c2\u8003\u6587\u732e\u306e\"javaLinq\"\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\n\n\n\n\nThenBy/ThenByDescending\u304c\u3067\u304d\u306a\u3044\n\n\nIOrderedEnumerable\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3067\u3059\u3002\uff08\u691c\u8a0e\u4e2d\uff09 (\u5b9f\u88c5\u6e08\uff1a2015/06/27)\n\n\n\nJoin\uff0cGroupJoin\uff0cZip\u304c\u3067\u304d\u306a\u3044 \n\n\n\uff08\u691c\u8a0e\u4e2d\uff09\uff08Zip\u5b9f\u88c5\u6e08\uff1a2015/07/05\uff09\uff08Join\u5b9f\u88c5\u6e08\uff1a2015/10/26\uff09\uff08GroupJoin\u5b9f\u88c5\u6e08\uff1a2015/10/26\uff09\n\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u3000\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u6a5f\u80fd\u8ffd\u52a0\uff0c\u52d5\u4f5c\u969c\u5bb3\u7b49\u306fPull Request\u3092\u305c\u3072\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u3000\n\u3000\u2021GitHub, \"jLinqer\", https://github.com/k--kato/jLinqer\n\u3000\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\n\n\u9045\u5ef6\u8a55\u4fa1\u7248\uff08\u672c\u6d41\uff09\n\n\nReuben Kuhnert \"javaLinq\"\u3092folk\u3057\u3066\uff0cIterator\u3092\u4f7f\u7528\u3057\u3066LINQ\u306e\u9045\u5ef6\u8a55\u4fa1\u3092\u518d\u73fe\u3057\u3066\u3044\u307e\u3059\nhttps://github.com/k--kato/jLinqer\n\n\n\u5148\u884c\u8a55\u4fa1\u7248\uff08\u508d\u6d41\uff09\n\n\nJava 8 Stream\u3092\u4f7f\u7528\u3057\u3066LINQ\u3092\u518d\u73fe\u3057\u3066\u3044\u307e\u3059\nhttps://github.com/k--kato/jLinqer/tree/0786bb88d0788e1d1ee540af70cbad12244da9be\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\nMicrosoft Reference Source, \"Enumerable.cs\", http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs\n\nGitHub, \"javaLinq\", https://github.com/sircodesalotOfTheRound/javaLinq\n\nQiita, \"LINQ to Objects \u3068 Java8-Stream API \u306e\u5bfe\u5fdc\u8868\", http://qiita.com/amay077/items/9d2941283c4a5f61f302\n\nstackoverflow, \"Generic method to perform a map-reduce operation. (Java-8)\", http://stackoverflow.com/questions/30826674/generic-method-to-perform-a-map-reduce-operation-java-8\n\n\n#Java\u3067LINQ\u304c\u4f7f\u3044\u305f\u3044\n\n\u3000Java\u3067\u4f7f\u3048\u308bLINQ\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002C#\u306eLINQ\u306a\u3089\u6d41\u66a2\u306b\u8868\u73fe\u3067\u304d\u308b\u306e\u306b\uff0cJava8\u306eStream\u3067\u306f\u4e0a\u624b\u304f\u8868\u73fe\u3067\u304d\u306a\u3044\u60a9\u307f\u3092\u30e9\u30c3\u30d7\u3057\u307e\u3059\u3002\n\n#jLinqer\n\n\u3000**jLinqer**\u306fJava\u3067LINQ (Language INtegrated Query: \u7d71\u5408\u8a00\u8a9e\u30af\u30a8\u30ea) \u304c\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002C#\u306eLINQ\u306b\u5b58\u5728\u3057\u3066Java8\u306eStream\u306b\u4e0d\u8db3\u3057\u3066\u3044\u308b\u6a5f\u80fd(selectMany\uff0cUnion, Intersect, Except\u7b49)\u3082\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u4f7f\u7528\u65b9\u6cd5\n\n\u3000Gradle\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\uff0c\u4ee5\u4e0b\u3092\u767b\u9332\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```js\n'com.github.jlinqer:jlinqer:1.0.0'\n```\n\n\u3000Maven\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\uff0c\u4ee5\u4e0b\u306epom.xml\u3092\u767b\u9332\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```xml\n\n<dependency>\n    <groupId>com.github.jlinqer</groupId>\n    <artifactId>jlinqer</artifactId>\n    <version>1.0.0</version>\n</dependency>\n\n```\n\n\u3000maven\u3092\u4f7f\u7528\u305b\u305a\uff0cjLinqer\u306ejar\u3092\u76f4\u63a5\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\uff0c\u4ee5\u4e0b\u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\u3000\u3000\u2021Maven, \"jLinqer\", https://oss.sonatype.org/content/groups/public/com/github/jlinqer/jlinqer/1.0.0/jlinqer-1.0.0.jar\n\u3000\n\n##LINQ - jLinqer \u5bfe\u5fdc\u30de\u30c8\u30ea\u30af\u30b9\n\n| \u6a5f\u80fd | LINQ(C#) | jLinqer(Java) | Stream(Java) |\n|-----|------|-------|--------|\n| **\u3010\u57fa\u672c\u3011** ||||\n| \u62bd\u51fa | Where | [where](#where) | filter |\n| \u5c04\u5f71 | Select | [select](#select) | map |\n| \u4e26\u3079\u66ff\u3048(\u6607\u9806) | OrderBy | [orderBy](#orderby) | sorted |\n| \u4e26\u3079\u66ff\u3048(\u964d\u9806) | OrderByDescending | [orderByDescending](#orderbydescending) | n/a |\n| \u5f8c\u7d9a\u3092\u4e26\u3079\u66ff\u3048(\u6607\u9806) | ThenBy | [thenBy](#thenby) | n/a |\n| \u5f8c\u7d9a\u3092\u4e26\u3079\u66ff\u3048(\u964d\u9806) | ThenByDescending | [thenByDescending](#thenbydescending) | n/a |\n| \u5e73\u5766\u5316\u3057\u3066\u5c04\u5f71 | SelectMany | [selectMany](#selectmany) | flatMap |\n| **\u3010\u62bd\u51fa\u7cfb\u3011** ||||\n| \uff4e\u4ef6\u98db\u3070\u3059 | Skip | [skip](#skip) | skip |\n| \u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u98db\u3070\u3059 | SkipWhile | [skipWhile](#skipwhile) | n/a |\n| \uff4e\u4ef6\u307e\u3067\u6d41\u3059 | Take | [take](#take) | limit | \n| \u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u6d41\u3059 | TakeWhile | [takeWhile](#takewhile) | n/a |\n| **\u3010\u5408\u6210\u7cfb\u3011** ||||\n| \u9023\u7d50 | Concat | [concat](#concat) | concat |\n| \u7a4d\u96c6\u5408 | Intersect | [intersect](#intersect) | n/a |\n| \u548c\u96c6\u5408 | Union | [union](#union) | n/a |\n| \u5dee\u96c6\u5408 | Except | [except](#except) | n/a |\n| \u5185\u90e8\u7d50\u5408 | Join | [join](#join) | n/a |\n| \u5916\u90e8\u7d50\u5408| GroupJoin | [groupJoin](#groupjoin) | n/a |\n| \u4e26\u3073\u3092\u9006\u306b\u3059\u308b | Reverse | [reverse](#reverse) | n/a |\n| 2\u3064\u306e\u5024\u3092\u63c3\u3048\u3066\u6d41\u3059 | Zip | [zip](#zip) | n/a |\n| **\u3010\u30b0\u30eb\u30fc\u30d7\u5316\u3001\u96c6\u8a08\u7cfb\u3011** |  |  | |\n| \u91cd\u8907\u3092\u7121\u304f\u3059 | Distinct | [distinct](#distinct) | distinct |\n| \u7573\u307f\u8fbc\u307f | Aggregate | [aggregate](#aggregate) | reduce |\n| \u30b0\u30eb\u30fc\u30d7\u5316 | GroupBy | [groupBy](#groupby) | Collectors.groupingBy |\n| \u5e73\u5747 | Average | [averageXXX](#average) | Collectors.summarizingXXX |\n| \u4ef6\u6570 | Count | [count](#count) | n/a |\n| \u4ef6\u6570 | LongCount | [longCount](#count) | count |\n| \u6700\u5927 | Max | [max](#max) | max |\n| \u6700\u5c0f | Min | [min](#min) | min |\n| \u5408\u8a08 | Sum | [sumXXX](#sum) | Collectors.summarizingXXX |\n| \u5148\u982d | First | [first](#firstordefault) | findFirst |\n| \u5148\u982d | FirstOrDefault | [firstOrDefault](#firstordefault) | n/a |\n| \u7d42\u7aef | Last | [last](#lastordefault) | n/a |\n| \u7d42\u7aef | LastOrDefault | [lastOrDefault](#lastordefault) | n/a |\n| 1\u4ef6\u306e\u5024\u3092\u5f97\u308b | Single | [single](#singleordefault) | n/a |\n| 1\u4ef6\u306e\u5024\u3092\u5f97\u308b | SingleOrDefault | [singleOrDefault](#singleordefault) | n/a |\n| \u7a7a\u306a\u3089\u65e2\u5b9a\u5024\u3092\u8fd4\u3059 | DefaultIfEmpty | [defaultIfEmpty](#defaultifempty) | n/a |\n| \u6307\u5b9a\u756a\u76ee\u306e\u8981\u7d20\u53d6\u5f97 | ElementAt | [elementAt](#elementatordefault) | n/a |\n| \u6307\u5b9a\u756a\u76ee\u306e\u8981\u7d20\u53d6\u5f97 | ElementAtOrDefault | [elementAtOrDefault](#elementatordefault) | n/a |\n| \u5168\u30c7\u30fc\u30bf\u304c\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\uff1f | All | [all](#all) | allMatch |\n| \u3044\u305a\u308c\u304b\u306e\u30c7\u30fc\u30bf\u304c\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\uff1f | Any | [any](#any) | anyMatch |\n| **\u3010\u751f\u6210\u7cfb\u3011** |  |  |\n| \u7a7a | Empty | [empty](#empty) | n/a |\n| \u7bc4\u56f2\u3092\u751f\u6210 | Range | [range](#range) | n/a |\n| \u7e70\u308a\u8fd4\u3059 | Repeat | [repeat](#repeat) | n/a |\n| **\u3010\u305d\u306e\u4ed6\u3011** |  |  |\n| \u5168\u8981\u7d20\u4e00\u81f4 | SequenceEqual | [sequenceEqual](#sequenceequal) | n/a |\n| \u30ad\u30e3\u30b9\u30c8 | Cast | [cast](#cast) | n/a |\n| \u4e00\u81f4\u3059\u308b\u578b\u306e\u307f\u62bd\u51fa | OfType | [ofType](#oftype) | n/a |\n\n##\u4f7f\u3044\u65b9\n \n java.util.List\u3092com.github.jlinqer.collections.List\u306b\u7f6e\u304d\u63db\u3048\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n### Where\n\n```Java\nList<Integer> list = new List<>(1, 2, 3);\n\nList<Integer> actual = list.where(x -> x == 1 || x == 3).toList();\n\nassertEquals(true , actual.contains(1));\nassertEquals(false, actual.contains(2));\nassertEquals(true , actual.contains(3));\n```\n\n### Select\n\n```Java\nList<Person> list = new List<>(\n        new Person(\"React\"   , 1),\n        new Person(\"Angular\" , 3),\n        new Person(\"Backbone\", 5)\n);\n\nList<String> actual = list.select(x -> x.name).toList();\n\nassertEquals(\"React\"   , actual.get(0));\nassertEquals(\"Angular\" , actual.get(1));\nassertEquals(\"Backbone\", actual.get(2));\n```\n\n### OrderBy\n\n```Java\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nList<String> actual = list.orderBy(x -> x).toList();\n\nassertEquals(\"Angular\" , actual.get(0));\nassertEquals(\"Backbone\", actual.get(1));\nassertEquals(\"React\"   , actual.get(2));\n```\n\n### OrderByDescending\n\n```Java\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nList<String> actual = list.orderByDescending(x -> x).toList();\n\nassertEquals(\"React\"   , actual.get(0));\nassertEquals(\"Backbone\", actual.get(1));\nassertEquals(\"Angular\" , actual.get(2));\n```\n\n### ThenBy\n\n```Java\nList<Person> list = new List<>(\n        new Person(\"Angular2\", 2),\n        new Person(\"Angular1\", 2),\n        new Person(\"React\"   , 1)\n);\n\nList<String> actual = list.orderBy(x -> x.age).thenBy(x -> x.name).toList();\n\nassertEquals(\"React\" , actual.get(0).name);\nassertEquals(\"Angular1\", actual.get(1).name);\nassertEquals(\"Angular2\"   , actual.get(2).name);\n```\n\n### ThenByDescending\n\n```Java\nList<Person> list = new List<>(\n        new Person(\"Angular2\", 2),\n        new Person(\"Angular1\", 2),\n        new Person(\"React\"   , 1)\n);\n\nList<String> actual = list.orderBy(x -> x.age).thenByDescending(x -> x.name).toList();\n\nassertEquals(\"React\" , actual.get(0).name);\nassertEquals(\"Angular2\", actual.get(1).name);\nassertEquals(\"Angular1\"   , actual.get(2).name);\n```\n\n### SelectMany\n\n```Java\nList<Person> list = new List<>(\n        new Person(\"Angular\", 3, new List(\"1.0.1\", \"1.0.2\")),\n        new Person(\"React\"  , 1, new List(\"2.0.1\", \"2.0.2\"))\n);\n\nList<String> actual = list.selectMany(x -> x.versionHistory).toList();\n\nassertEquals(\"1.0.1\", actual.get(0));\nassertEquals(\"1.0.2\", actual.get(1));\nassertEquals(\"2.0.1\", actual.get(2));\nassertEquals(\"2.0.2\", actual.get(3));\n```\n\n### Skip\n\n```Java\nList<Integer> list = new List<>(1, 2, 3);\n\nList<Integer> actual = list.skip(2).toList();\n\nassertEquals(3, actual.get(0).intValue());\n```\n\n### SkipWhile\n\n```Java\nList<Integer> list = new List<>(1, 2, 3, 4, 5);\n\nList<Integer> actual = list.skipWhile(x -> x <= 3).toList();\n\nassertEquals(4, actual.get(0).intValue());\nassertEquals(5, actual.get(1).intValue());\n```\n\n### Take\n\n```Java\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nList<String> actual = list.take(2).toList();\n\nassertEquals(2, actual.size());\nassertEquals(\"Backbone\", actual.get(0));\nassertEquals(\"Angular\" , actual.get(1));\n```\n\n### TakeWhile\n\n```Java\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nList<String> actual = list.takeWhile(x -> x.equals(\"Backbone\") || x.equals(\"Angular\")).toList();\n\nassertEquals(2, actual.size());\nassertEquals(\"Backbone\", actual.get(0));\nassertEquals(\"Angular\" , actual.get(1));\n```\n### Concat\n\n```Java\nList<Integer> first  = new List<>(1, 2);\nList<Integer> second = new List<>(2, 3);\n\nList<Integer> actual = first.concat(second).toList();\n\nassertEquals(1, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(2, actual.get(2).intValue());\nassertEquals(3, actual.get(3).intValue());\n```\n\n### Intersect\n\n```Java\nList<Integer> first  = new List<>(1, 2, 3);\nList<Integer> second = new List<>(1, 3);\n\nList<Integer> actual = first.intersect(second).toList();\n\nassertEquals(1, actual.get(0).intValue());\nassertEquals(3, actual.get(1).intValue());\n```\n\n### Union\n\n```Java\nList<Integer> first = new List<>(1, 2, 3);\nList<Integer> second = new List<>(0, 1, 3, 4);\n\nList<Integer> actual = first.union(second).toList();\n\nassertEquals(5, actual.size());\nassertEquals(1, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(3, actual.get(2).intValue());\nassertEquals(0, actual.get(3).intValue());\nassertEquals(4, actual.get(4).intValue());\n```\n\n### Except\n\n```Java\nList<Integer> first  = new List<>(1, 2, 3);\nList<Integer> second = new List<>(1, 3);\n\nList<Integer> actual = first.except(second).toList();\n\nassertEquals(2, actual.get(0).intValue());\n```\n\n\n### Join\n\n```Java\nList<Javascript> outer = new List<>(\n        new Javascript(\"Angular\", 1),\n        new Javascript(\"React\"  , 4),\n        new Javascript(\"ES2016\" , 5)\n);\nList<Javascript> inner = new List<>(\n        new Javascript(\"Angular\", 2),\n        new Javascript(\"Angular\", 3),\n        new Javascript(\"ES2016\" , 6),\n        new Javascript(\"ES7\"    , 7)\n);\n\nFunction<Javascript, String> outerKey = (x) -> x.name;\nFunction<Javascript, String> innerKey = (y) -> y.name;\nBiFunction<Javascript, Javascript, Javascript> selector = (x, y) -> new Javascript(x.name, y.age);\nList<Javascript> actual = outer.join(inner, outerKey, innerKey, selector).toList();\n\nassertEquals(3, actual.size());\nassertEquals(\"Angular\", actual.get(0).name);\nassertEquals(\"Angular\", actual.get(1).name);\nassertEquals(\"ES2016\" , actual.get(2).name);\nassertEquals(2, actual.get(0).age);\nassertEquals(3, actual.get(1).age);\nassertEquals(6, actual.get(2).age);\n```\n\n### GroupJoin\n\n```Java\nList<Javascript> outer = new List<>(\n        new Javascript(\"Angular\", 1),\n        new Javascript(\"React\"  , 4),\n        new Javascript(\"ES2016\" , 5)\n);\nList<Javascript> inner = new List<>(\n        new Javascript(\"Angular\", 2),\n        new Javascript(\"Angular\", 3),\n        new Javascript(\"ES2016\" , 6),\n        new Javascript(\"ES7\"    , 7)\n);\n\nFunction<Javascript, String> outerKey = (x) -> x.name;\nFunction<Javascript, String> innerKey = (y) -> y.name;\nBiFunction<Javascript, IEnumerable<Javascript>, Javascript> selector = (x, y) -> new Javascript(x.name, y.select(z -> z.age));\nList<Javascript> actual = outer.groupJoin(inner, outerKey, innerKey, selector).toList();\n\nassertEquals(3, actual.size());\nassertEquals(\"Angular\", actual.get(0).name);\nassertEquals(\"React\"  , actual.get(1).name);\nassertEquals(\"ES2016\" , actual.get(2).name);\nassertEquals(2, actual.get(0).ages.elementAt(0));\nassertEquals(3, actual.get(0).ages.elementAt(1));\nassertEquals(0, actual.get(1).ages.count());\nassertEquals(6, actual.get(2).ages.elementAt(0));\n```\n\n### Reverse\n\n```Java\nList<Integer> list = new List<>(1, 2, 3);\n\nList<Integer> actual = list.reverse().toList();\n\nassertEquals(3, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(1, actual.get(2).intValue());\n```\n\n### Zip\n\n```Java\nList<Integer> first = new List<>(1, 2, 3);\nList<String> second = new List<>(\"Angular\", \"React\", \"Backbone\");\n\nList<Integer> actual = first.zip(second, (x, y) -> String.format(\"%s %d\", x, y)).toList();\n\nassertEquals(\"1 Angular\" , actual.get(0));\nassertEquals(\"2 React\"   , actual.get(1));\nassertEquals(\"3 Backbone\", actual.get(2));\n```\n\n### Distinct\n\n```Java\nList<Integer> list =\n        new List<>(\n                1, 2, 3,\n                1, 2, 3, 4\n        );\n\nList<Integer> actual = list.distinct().toList();\n\nassertEquals(1, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(3, actual.get(2).intValue());\nassertEquals(4, actual.get(3).intValue());\n```\n\n### Aggregate\n\n```Java\nList<Integer> list = new List<>(1, 2, 3);\n\nint actual = list.aggregate((sum, elem) -> sum + elem);\n\nassertEquals(6, actual);\n```\n\n### GroupBy\n\n```Java\nList<Person> list = new List<>(\n        new Person(\"React\"   , 1),\n        new Person(\"Angular\" , 1),\n        new Person(\"Backbone\", 5)\n);\n\nMap<Integer, IEnumerable<Person>> actual = list.groupBy(x -> x.age);\n\nassertEquals(true, actual.get(1).any(x -> x.name.equals(\"React\")));\nassertEquals(true, actual.get(1).any(x -> x.name.equals(\"Angular\")));\nassertEquals(true, actual.get(5).any(x -> x.name.equals(\"Backbone\")));\n```\n\n### Average\n\n```Java\nList<Long> listLong = new List<>(1l, 2l, 3l, 4l);\n\ndouble actualLong = listLong.averageLong(x -> x);\n\nassertEquals(2.5d, actualLong, 0);\n```\n\n### Count\n\n```Java\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nlong actual = list.longCount();\nint actualNone = list.count(x -> x.equals(\"jquery\"));\n\nassertEquals(3, actual);\nassertEquals(0, actualNone);\n```\n\n### Max\n\n```Java\nList<Double> listDouble = new List<>(1d, 2d, 3d);\n\ndouble actualDouble = listDouble.max(x -> x);\n\nassertEquals(3d, actualDouble, 0);\n```\n\n### Min\n\n```Java\nList<BigDecimal> listBigDecimal = new List<>(\n        new BigDecimal(1d),\n        new BigDecimal(2d),\n        new BigDecimal(3d)\n);\n\nBigDecimal actualBigDecimal = listBigDecimal.min(x -> x);\n\nassertEquals(1d, actualBigDecimal.doubleValue(), 0);\n```\n\n### Sum\n\n```Java\nList<Integer> listInt = new List<>(1, 2, 3);\n\nint actualInt = listInt.sumInt(x -> x);\n\nassertEquals(6, actualInt);\n```\n\n### FirstOrDefault\n\n```Java\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nString actualFirst   = list.firstOrDefault();\nString actualMatch   = list.firstOrDefault(x -> x.equals(\"Angular\"));\nString actualUnMatch = list.firstOrDefault(x -> x.equals(\"jquery\"));\n\nassertEquals(\"Backbone\", actualFirst);\nassertEquals(\"Angular\" , actualMatch);\nassertEquals(null      , actualUnMatch);\n```\n\n### LastOrDefault\n\n```Java\nList<Integer> list = new List<>(1, 2, 3);\nList<Integer> listEmpty = new List<>();\n\nint actual = list.lastOrDefault();\nInteger actualDefaultNone = listEmpty.lastOrDefault(x -> x == 0);\n\nassertEquals(3, actual);\nassertEquals(null, actualDefaultNone);\n```\n\n### SingleOrDefault\n\n```Java\nList<Integer> listMany = new List<>(1, 2, 3);\nList<Integer> listEmpty = new List<>();\n\nint actualFilter = listMany.singleOrDefault(x -> x == 3);\nInteger actualUnMatch = listEmpty.singleOrDefault(x -> x == 0);\n\nassertEquals(3, actualFilter);\nassertEquals(null, actualUnMatch);\n```\n\n### DefaultIfEmpty\n\n```Java\nList<String> listEmpty = new List<>();\n\nList<String> actualDefault = listEmpty.defaultIfEmpty(\"ES7\").toList();\n\nassertEquals(\"ES7\", actualDefault.get(0));\n```\n\n### ElementAtOrDefault\n\n```Java\nList<Integer> list = new List<>(1, 2, 3);\n\nint actual = list.elementAtOrDefault(2);\nInteger actualDefault = list.elementAtOrDefault(3);\n\nassertEquals(3, actual);\nassertEquals(null, actualDefault);\n```\n\n### All\n\n```Java\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nboolean actual = list.all(x -> x.equals(\"Angular\") || x.equals(\"Backbone\") || x.equals(\"React\"));\nboolean actualNotFound = list.all(x -> x.equals(\"Angular\") || x.equals(\"React\"));\n\nassertEquals(true, actual);\nassertEquals(false, actualNotFound);\n```\n\n### Any\n\n```Java\nList<String> list = new List<>(\"Backbone\", \"Angular\", \"React\");\n\nboolean actual = list.any(x -> x.equals(\"Angular\"));\nboolean actualNotFound = list.any(x -> x.equals(\"jquery\"));\n\nassertEquals(true, actual);\nassertEquals(false, actualNotFound);\n```\n\n### Empty\n\n```Java\nList<Double> actual = IEnumerable.empty(Double.class);\n\nassertEquals(0, actual.count());\n```\n\n### Range\n\n```Java\nList<Integer> actual = IEnumerable.range(-2, 3);\n\nassertEquals(-2, actual.get(0).intValue());\nassertEquals(-1, actual.get(1).intValue());\nassertEquals(0 , actual.get(2).intValue());\n```\n\n### Repeat\n\n```Java\nList<String> actual = IEnumerable.repeat(String.class, \"Law of Cycles\", 10);\n\nassertEquals(10, actual.count());\nassertEquals(\"Law of Cycles\", actual.get(9));\n```\n\n### SequenceEqual\n\n```Java\nList<Integer> first = new List<>(1, 2, 3);\nList<Integer> secondMatch = new List<>(1, 2, 3);\nList<Integer> secondUnMatchElem = new List<>(1, 2, 4);\n\nboolean actualMatch = first.sequenceEqual(secondMatch);\nboolean actualUnMatchElm = first.sequenceEqual(secondUnMatchElem);\n\nassertEquals(true, actualMatch);\nassertEquals(false, actualUnMatchElm);\n```\n\n### Cast\n\n```Java\nList<Object> list = new List<>(1, 2, 3);\n\nList<Integer> actual = list.cast(Integer.class).toList();\n\nassertEquals(1, actual.get(0).intValue());\nassertEquals(2, actual.get(1).intValue());\nassertEquals(3, actual.get(2).intValue());\n```\n\n### OfType\n\n```Java\nList<Object> list = new List<>(1, \"2\", 3, \"4\");\n\nList<String>  actualStr = list.ofType(String.class).toList();\nList<Integer> actualInt = list.ofType(Integer.class).toList();\n\nassertEquals(\"2\", actualStr.get(0));\nassertEquals(\"4\", actualStr.get(1));\nassertEquals(1  , actualInt.get(0).intValue());\nassertEquals(3  , actualInt.get(1).intValue());\n```\n\n## \u8ab2\u984c\n\n\u3000LINQ\u306e\u6a19\u6e96\u52d5\u4f5c\u3092\u518d\u73fe\u51fa\u6765\u3066\u3044\u306a\u3044\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\n\n* ~~\u9045\u5ef6\u8a55\u4fa1\u306b\u306a\u3063\u3066\u3044\u306a\u3044~~\n * ~~toList\u7b49\u3067\u8a55\u4fa1\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u4e2d~~ \uff08\u5909\u66f4\u6e08\uff1a2015/06/22\uff09\n* XXXorDefault\n * Integer\uff0cLong\uff0cDouble\u306edefault\u5024\u304cnull\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002C#\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u304c\u53ef\u80fd\u306a\u306e\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c0\u304c\u8fd4\u5374\u3067\u304d\u307e\u3059\n* GroupBy\n * \u8fd4\u308a\u5024\u304cMap&lt;Key, IEnumerable&lt;TResult&gt;&gt;\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002C#\u306fIGrouping\u3067\u3059\u3002IEnumerable\u306eMap\u304c\u5fc5\u8981\u3067\u3059\u3002\uff08\u691c\u8a0e\u4e2d\uff09\n* sumXXX\uff0caverageXXX\uff0c~~minXXX~~\uff0c~~maxXXX~~\n * \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3067\u304d\u306a\u3044\u305f\u3081\uff0c\u30e1\u30bd\u30c3\u30c9\u540d\u306b\u578b\u3092\u542b\u307e\u305b\u3066\u3044\u307e\u3059\u3002Java\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u8b70\u8ad6\u306f[stackoverflow](http://stackoverflow.com/questions/30826674/generic-method-to-perform-a-map-reduce-operation-java-8)\u3067\u3057\u307e\u3057\u305f\n* List\u304cjava.lang.List\u3068\u91cd\u8907\u3059\u308b\n * List<E>\u3092\u7d99\u627f\u3057\u3066\u65e2\u5b58\u306eList\u3092\u5b8c\u5168\u306b\u7f6e\u304d\u63db\u3048\u308b\u3088\u3046\u306b\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002java.util.List\u3092com.github.jlinqer.collections.List\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002~~\u6b63\u7d71\u6d3eIterable<E>\u7d99\u627f\u7248\u306f\u53c2\u8003\u6587\u732e\u306e\"javaLinq\"\u3092\u53c2\u7167\u304f\u3060\u3055\u3044~~\n* ~~ThenBy/ThenByDescending\u304c\u3067\u304d\u306a\u3044~~\n * ~~IOrderedEnumerable\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3067\u3059\u3002\uff08\u691c\u8a0e\u4e2d\uff09~~ (\u5b9f\u88c5\u6e08\uff1a2015/06/27)\n* ~~Join~~\uff0c~~GroupJoin~~\uff0c~~Zip~~\u304c\u3067\u304d\u306a\u3044 \n * \uff08\u691c\u8a0e\u4e2d\uff09\uff08Zip\u5b9f\u88c5\u6e08\uff1a2015/07/05\uff09\uff08Join\u5b9f\u88c5\u6e08\uff1a2015/10/26\uff09\uff08GroupJoin\u5b9f\u88c5\u6e08\uff1a2015/10/26\uff09\n\n##\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u3000\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u6a5f\u80fd\u8ffd\u52a0\uff0c\u52d5\u4f5c\u969c\u5bb3\u7b49\u306fPull Request\u3092\u305c\u3072\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u3000\n\u3000\u2021GitHub, \"jLinqer\", https://github.com/k--kato/jLinqer\n\u3000\n### \u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\n\n* \u9045\u5ef6\u8a55\u4fa1\u7248\uff08\u672c\u6d41\uff09\n * Reuben Kuhnert \"[javaLinq](https://github.com/sircodesalotOfTheRound/javaLinq)\"\u3092folk\u3057\u3066\uff0cIterator\u3092\u4f7f\u7528\u3057\u3066LINQ\u306e\u9045\u5ef6\u8a55\u4fa1\u3092\u518d\u73fe\u3057\u3066\u3044\u307e\u3059\n * https://github.com/k--kato/jLinqer\n* \u5148\u884c\u8a55\u4fa1\u7248\uff08\u508d\u6d41\uff09\n * Java 8 Stream\u3092\u4f7f\u7528\u3057\u3066LINQ\u3092\u518d\u73fe\u3057\u3066\u3044\u307e\u3059\n * https://github.com/k--kato/jLinqer/tree/0786bb88d0788e1d1ee540af70cbad12244da9be\n\n\n#\u53c2\u8003\u6587\u732e\n\n1. Microsoft Reference Source, \"Enumerable.cs\", http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs\n1. GitHub, \"javaLinq\", https://github.com/sircodesalotOfTheRound/javaLinq\n1. Qiita, \"LINQ to Objects \u3068 Java8-Stream API \u306e\u5bfe\u5fdc\u8868\", http://qiita.com/amay077/items/9d2941283c4a5f61f302\n1. stackoverflow, \"Generic method to perform a map-reduce operation. (Java-8)\", http://stackoverflow.com/questions/30826674/generic-method-to-perform-a-map-reduce-operation-java-8\n", "tags": ["Java8", "C#", "Stream", "LINQ", "jLinqer"]}