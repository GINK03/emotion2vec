{"context": " More than 1 year has passed since last update.Square\u306eRetrofit \u3092\u4f7f\u3063\u3066\u307f\u3066\u3001\u6ce8\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u601d\u3063\u305f\u3053\u3068\u3084\u6c17\u304c\u3064\u3044\u305f\u3053\u3068\u3092\u30e1\u30e2\u3002\nRetrofit\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u7701\u7565\u3002\n\nRetrofitError\nRetrofit\u306fstatusCode\u304c200\u4ee5\u4e0a300\u672a\u6e80\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u6210\u529f\u3068\u3057\u3066\u3044\u308b\u3002\nRestAdapter.java\nint statusCode = response.getStatus();\nif (statusCode >= 200 && statusCode < 300) { // 2XX == successful request\n  \u2026\n} else {\n  throw RetrofitError\u2026\n}\n\n\u306a\u306e\u3067\u3001404\u3068\u304b500\u3068\u304b\u306ffailure(RetrofitError)\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u3002\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u570f\u5916\u3001\u306a\u3069\u3001\u305d\u3082\u305d\u3082\u901a\u4fe1\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306fRetrofitError#getResponse()\u304cnull\u3092\u8fd4\u3059\u306e\u3067\u3001statusCode\u306b\u3088\u3063\u3066\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u5206\u5c90\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u6ce8\u610f\u3002\nservice.getPhotoAsync(id, new Callback<Photo>() {\n\n  @Override\n  public void success(Photo photo, Response response) {\n  }\n\n  @Override\n  public void failure(RetrofitError retrofitError) {\n    if (retrofitError.getResponse() == null) {\n      // \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u570f\u5916\u306a\u3069\u3001\u306e\u5834\u5408\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    } else {\n      int statusCode = retrofitError.getResponse().getStatus();\n      // 40X\u7cfb\u3068\u304b50X\u7cfb\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    }\n  }\n\n});\n\nRetrofit 2.0 \u3067\u306fcallback\u304c\u5225\u306b\u306a\u3063\u3066\u6271\u3044\u3084\u3059\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nSync\nsynchronous\u306b\u5b9f\u884c\u3055\u305b\u308b\u5834\u5408\u3001RetrofitError\u306f\u3061\u3083\u3093\u3068catch\u3057\u306a\u3044\u3068\u30c0\u30e1\u3002\n@Override\nprotected Photo doInBackground(Void... params) {\n  Photo photo = service.getUserPhoto(id);\n  ...\n}\n\nAsyncTask#doInBackground\u3067\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u3001404\u306a\u3069\u3067RetrofitError\u304cthrow\u3055\u308c\u305f\u5834\u5408\u306b\u3001Logcat\u306b\u306f \"FATAL EXCEPTION: AsyncTask #1\" \u306a\u3069\u3068\u3044\u3046\u3056\u3063\u304f\u308a\u3057\u305f\u30ed\u30b0\u3057\u304b\u51fa\u306a\u304f\u306630\u5206\u307b\u3069\u6642\u9593\u3092\u7121\u99c4\u306b\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n@Override\nprotected Photo doInBackground(Void... params) {\n  Photo photo = null;\n\n  // RetrofitError\u306fcatch\u3059\u308b\n  try {\n    photo = service.getUserPhoto(id);\n    \u2026\n  } catch (RetrofitError error){\n    // \u30a8\u30e9\u30fc\u51e6\u7406\n  }\n}\n\n\n\u30ea\u30c8\u30e9\u30a4\u51e6\u7406\n\u300c\u901a\u4fe1\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u30ea\u30c8\u30e9\u30a4\u3057\u305f\u3044\u3001\u3042\u308b\u3044\u306f\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u300d\n\u3042\u308b\u3044\u306f\u3001\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30fb\u30b5\u30fc\u30d3\u30b9\u3067\u3088\u304f\u3042\u308b\u300c\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306btoken\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u305f\u3088\u306e\u5fdc\u7b54\u304c\u3042\u3063\u305f\u3089\u3001\u518d\u5ea6token\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u3092\u884c\u306a\u3063\u3066\u3001\u305d\u306e\u5f8c\u306b\u5143\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u518d\u5ea6\u5b9f\u884c\u3057\u305f\u3044\u300d\n\u4eca\u306eRetrofit\u3060\u3068\u3061\u3087\u3063\u3068\u9577\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304c\u3001Retrofit 2.0 \u3067\u7c21\u5358\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nRetrofit 2.0 API Spec (Working Draft)\nAllow simple request retry and cancel support without the need to talk to the RestAdapter or generated interface instance\n\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u8a2d\u5b9a\u3092\u3057\u305f\u3044\nRetrofit\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306f15\u79d2\u3001\u30ea\u30fc\u30c9\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306f20\u79d2\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3002\nstatic final int CONNECT_TIMEOUT_MILLIS = 15 * 1000; // 15s\nstatic final int READ_TIMEOUT_MILLIS = 20 * 1000; // 20s\n\n\u8a2d\u5b9a\u3092\u5909\u3048\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\nHow to config the Timeout\nOkHttp\u3092\u4f7f\u3063\u3066\u3044\u308b\u306a\u3089\u3001OkHttpClient\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\u4f7f\u3063\u3066\u3044\u306a\u3044\u306a\u3089\u3001UrlConnectionClient\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u305d\u3053\u3067\u8a2d\u5b9a\u3059\u308b\n\nOAuth\u3057\u305f\u3044\noauth-signpost \u3092Retrofit\u3067\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001signpost-retrofit\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3002\nsignpost-retrofit\n\n\u611f\u60f3\u306a\u3069\n\n\u697d\u3057\u3044\n\"Retrofit turns your REST API into a Java interface\" \u306e\u3068\u304a\u308a\u3001\u898b\u3084\u3059\u3044\u8a18\u8ff0\u3067\u66f8\u3051\u308b\u3057\u3001\u66f8\u3044\u3066\u3044\u3066\u697d\u3057\u3044\n\n\u30dc\u30d6\u3059\u3054\u3044\nhttps://github.com/square/retrofit/issues/587#issuecomment-52115072\n\n\nBob Lee (crazybob) \u306f\u5143Android\u306e\u4e2d\u306e\u4eba\u3067\u73feSquare\u306eCTO\u2026 \u3060\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3060\u304c\u534a\u5e74\u524d\u306b\u8f9e\u3081\u3066\u3044\u305f\u306e\u3092\u4eca\u77e5\u3063\u3066\u3061\u3087\u3063\u3068\u3073\u3063\u304f\u308a\u3057\u305f\u3068\u3053\u308d\nLongtime Square CTO Bob Lee to Depart\nSquare\u306e[Retrofit](http://square.github.io/retrofit/) \u3092\u4f7f\u3063\u3066\u307f\u3066\u3001\u6ce8\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u601d\u3063\u305f\u3053\u3068\u3084\u6c17\u304c\u3064\u3044\u305f\u3053\u3068\u3092\u30e1\u30e2\u3002\n\nRetrofit\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u7701\u7565\u3002\n\n## RetrofitError\n\nRetrofit\u306fstatusCode\u304c200\u4ee5\u4e0a300\u672a\u6e80\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u6210\u529f\u3068\u3057\u3066\u3044\u308b\u3002\n\nRestAdapter.java\n\n```java \nint statusCode = response.getStatus();\nif (statusCode >= 200 && statusCode < 300) { // 2XX == successful request\n  \u2026\n} else {\n  throw RetrofitError\u2026\n}\n```\n\n\u306a\u306e\u3067\u3001404\u3068\u304b500\u3068\u304b\u306ffailure(RetrofitError)\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u3002\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u570f\u5916\u3001\u306a\u3069\u3001\u305d\u3082\u305d\u3082\u901a\u4fe1\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306fRetrofitError#getResponse()\u304cnull\u3092\u8fd4\u3059\u306e\u3067\u3001statusCode\u306b\u3088\u3063\u3066\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u5206\u5c90\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u6ce8\u610f\u3002\n\n\n```java\nservice.getPhotoAsync(id, new Callback<Photo>() {\n\n  @Override\n  public void success(Photo photo, Response response) {\n  }\n\n  @Override\n  public void failure(RetrofitError retrofitError) {\n    if (retrofitError.getResponse() == null) {\n      // \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u570f\u5916\u306a\u3069\u3001\u306e\u5834\u5408\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    } else {\n      int statusCode = retrofitError.getResponse().getStatus();\n      // 40X\u7cfb\u3068\u304b50X\u7cfb\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    }\n  }\n      \n});\n```\n\nRetrofit 2.0 \u3067\u306fcallback\u304c\u5225\u306b\u306a\u3063\u3066\u6271\u3044\u3084\u3059\u304f\u306a\u308b\u304b\u3082[\u3057\u308c\u306a\u3044](https://github.com/square/retrofit/issues/297#issuecomment-23221250)\u3002\n\n\n\n\n## Sync\n\nsynchronous\u306b\u5b9f\u884c\u3055\u305b\u308b\u5834\u5408\u3001RetrofitError\u306f\u3061\u3083\u3093\u3068catch\u3057\u306a\u3044\u3068\u30c0\u30e1\u3002\n\n```java\n@Override\nprotected Photo doInBackground(Void... params) {\n  Photo photo = service.getUserPhoto(id);\n  ...\n}\n```\n\nAsyncTask#doInBackground\u3067\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u3001404\u306a\u3069\u3067RetrofitError\u304cthrow\u3055\u308c\u305f\u5834\u5408\u306b\u3001Logcat\u306b\u306f \"FATAL EXCEPTION: AsyncTask #1\" \u306a\u3069\u3068\u3044\u3046\u3056\u3063\u304f\u308a\u3057\u305f\u30ed\u30b0\u3057\u304b\u51fa\u306a\u304f\u306630\u5206\u307b\u3069\u6642\u9593\u3092\u7121\u99c4\u306b\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n```java\n@Override\nprotected Photo doInBackground(Void... params) {\n  Photo photo = null;\n\n  // RetrofitError\u306fcatch\u3059\u308b\n  try {\n    photo = service.getUserPhoto(id);\n    \u2026\n  } catch (RetrofitError error){\n    // \u30a8\u30e9\u30fc\u51e6\u7406\n  }\n}\n```\n\n## \u30ea\u30c8\u30e9\u30a4\u51e6\u7406\n\n\u300c\u901a\u4fe1\u306b\u5931\u6557\u3057\u305f\u3068\u304d\u306b\u30ea\u30c8\u30e9\u30a4\u3057\u305f\u3044\u3001\u3042\u308b\u3044\u306f\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u300d\n\n\u3042\u308b\u3044\u306f\u3001\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30fb\u30b5\u30fc\u30d3\u30b9\u3067\u3088\u304f\u3042\u308b\u300c\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306btoken\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u305f\u3088\u306e\u5fdc\u7b54\u304c\u3042\u3063\u305f\u3089\u3001\u518d\u5ea6token\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u3092\u884c\u306a\u3063\u3066\u3001\u305d\u306e\u5f8c\u306b\u5143\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u518d\u5ea6\u5b9f\u884c\u3057\u305f\u3044\u300d\n\n\u4eca\u306eRetrofit\u3060\u3068\u3061\u3087\u3063\u3068\u9577\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304c\u3001Retrofit 2.0 \u3067\u7c21\u5358\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n[Retrofit 2.0 API Spec (Working Draft)](https://github.com/square/retrofit/issues/297)\n\n```\nAllow simple request retry and cancel support without the need to talk to the RestAdapter or generated interface instance\n```\n\n## \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u8a2d\u5b9a\u3092\u3057\u305f\u3044\n\nRetrofit\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306f15\u79d2\u3001\u30ea\u30fc\u30c9\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306f20\u79d2\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3002\n\n```java\nstatic final int CONNECT_TIMEOUT_MILLIS = 15 * 1000; // 15s\nstatic final int READ_TIMEOUT_MILLIS = 20 * 1000; // 20s\n```\n\n\u8a2d\u5b9a\u3092\u5909\u3048\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\n\n[How to config the Timeout](https://github.com/square/retrofit/issues/641#issuecomment-60674680)\n\nOkHttp\u3092\u4f7f\u3063\u3066\u3044\u308b\u306a\u3089\u3001OkHttpClient\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\u4f7f\u3063\u3066\u3044\u306a\u3044\u306a\u3089\u3001UrlConnectionClient\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u305d\u3053\u3067\u8a2d\u5b9a\u3059\u308b\n\n## OAuth\u3057\u305f\u3044\n\n[oauth-signpost](https://code.google.com/p/oauth-signpost/) \u3092Retrofit\u3067\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001signpost-retrofit\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3002\n\n[signpost-retrofit](https://github.com/pakerfeldt/signpost-retrofit)\n\n\n## \u611f\u60f3\u306a\u3069\n\n### \u697d\u3057\u3044\n\n\"Retrofit turns your REST API into a Java interface\" \u306e\u3068\u304a\u308a\u3001\u898b\u3084\u3059\u3044\u8a18\u8ff0\u3067\u66f8\u3051\u308b\u3057\u3001\u66f8\u3044\u3066\u3044\u3066\u697d\u3057\u3044\n\n### \u30dc\u30d6\u3059\u3054\u3044\n\n[https://github.com/square/retrofit/issues/587#issuecomment-52115072](https://github.com/square/retrofit/issues/587#issuecomment-52115072)\n\n\n![](https://s3-ap-northeast-1.amazonaws.com/uploads-jp.hipchat.com/13448/46626/yIdvDbh7c0NOEJx/1.png)\n\n![](https://s3-ap-northeast-1.amazonaws.com/uploads-jp.hipchat.com/13448/46626/uiThQtZMpk21zn2/2.png)\n\nBob Lee (crazybob) \u306f\u5143Android\u306e\u4e2d\u306e\u4eba\u3067\u73feSquare\u306eCTO\u2026 \u3060\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3060\u304c\u534a\u5e74\u524d\u306b\u8f9e\u3081\u3066\u3044\u305f\u306e\u3092\u4eca\u77e5\u3063\u3066\u3061\u3087\u3063\u3068\u3073\u3063\u304f\u308a\u3057\u305f\u3068\u3053\u308d\n\n[Longtime Square CTO Bob Lee to Depart](http://recode.net/2014/05/16/longtime-square-cto-bob-lee-to-depart/)\n\n", "tags": ["Android", "Retrofit"]}