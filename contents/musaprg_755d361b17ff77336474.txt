{"context": "TensorFlow\u3067\u753b\u50cf\u3092npy\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u969b\u306bOpenCV\u3092\u4f7f\u3063\u3066\u307e\u3057\u305f\u304c\u3001\u30a8\u30e9\u30fc\u3067\u5b8c\u5168\u306b\u306f\u307e\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u611a\u304b\u306a\u3053\u3068\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u95a2\u9023\u306e\u95a2\u6570\u306f\u5931\u6557\u3057\u305f\u3068\u304d\u306e\u4f8b\u5916\u51e6\u7406\u3092\u304d\u3061\u3093\u3068\u3057\u306a\u3044\u3068\u5b8c\u5168\u306b\u8a70\u3080\u3053\u3068\u3092\u5fd8\u308c\u3066\u307e\u3057\u305f\u3002imread\u95a2\u6570\u3082\u305d\u306e\u4e00\u7a2e\u3067\u3059\u3002\n\u4ee5\u4e0b\u306ftensorflow\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308b\u95a2\u6570\u3067\u3059\u3002\nimread\u95a2\u6570\u3092\u8aad\u3093\u3060\u5f8c\u306e\u51e6\u7406\u306f\u3001None\u5224\u5b9a\u3092\u304b\u307e\u305b\u3066\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3046\u3057\u306a\u3044\u3068None\u3067\u30b3\u30b1\u308b\u306e\u3067\u5fc5\u305a\u3053\u308c\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08\u3088\u304f\u3088\u304f\u8003\u3048\u305f\u3089\u5f53\u305f\u308a\u524d\u306a\u3093\u3060\u3088\u306a\u3042...\uff09\nimport os, sys\nimport numpy as np\nimport tensorflow as tf\nimport cv2\n\n# config\nflags = tf.app.flags\nFLAGS = flags.FLAGS\nflags.DEFINE_string('imgdir', '/home/hoge/fuga/piyo', 'Image dataset path')\nflags.DEFINE_string('imgclasses', 4, 'The num of image dataset classes')\nIMAGE_SIZE = 84 # the size of image\nTRAIN_IMG_DIRS = os.listdir(FLAGS.imgdir)\n\ndef main():\n  train_image, train_label = cvGetImageAndLabel()\n  #\u5b66\u7fd2\u3068\u304b\u306e\u30b3\u30fc\u30c9\u306f\u9762\u5012\u306a\u306e\u3067\u7565\n\ndef cvGetImageAndLabel():\n  images = []\n  labels = []\n  for i, d in enumerate(TRAIN_IMG_DIRS):\n    files = os.listdir(FLAGS.imgdir + '/' + d)\n    for f in files:\n      img = cv2.imread(FLAGS.imgdir + '/' + d + '/' + f)\n      # \u3053\u306e\u90e8\u5206\u3067None\u5224\u5b9a\n      if not img is None:\n        img = cv2.resize(img, (IMAGE_SIZE, IMAGE_SIZE), interpolation = cv2.INTER_AREA)\n        img = img.flatten().astype(np.float32)/255.0\n        images.append(img)\n        tmp = np.zeros(FLAGS.imgclasses)\n        tmp[i] = 1\n        labels.append(tmp)\n\n  return np.asarray(images, dtype=np.float32), np.asarray(labels, dtype=np.float32)\n\nif __name__ == '__main__':\n  main()\n\n\n\u30b3\u30fc\u30c9\u306e\u6c5a\u3055\u306f\u3054\u611b\u656c\u3067\u3059\uff08\uff1f\uff09\n\n\u53c2\u8003\u30ea\u30f3\u30af\nhttp://stackoverflow.com/questions/23628325/cv2-imread-checking-if-image-is-being-read\nTensorFlow\u3067\u753b\u50cf\u3092npy\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u969b\u306bOpenCV\u3092\u4f7f\u3063\u3066\u307e\u3057\u305f\u304c\u3001\u30a8\u30e9\u30fc\u3067\u5b8c\u5168\u306b\u306f\u307e\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\u611a\u304b\u306a\u3053\u3068\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u95a2\u9023\u306e\u95a2\u6570\u306f\u5931\u6557\u3057\u305f\u3068\u304d\u306e\u4f8b\u5916\u51e6\u7406\u3092\u304d\u3061\u3093\u3068\u3057\u306a\u3044\u3068\u5b8c\u5168\u306b\u8a70\u3080\u3053\u3068\u3092\u5fd8\u308c\u3066\u307e\u3057\u305f\u3002imread\u95a2\u6570\u3082\u305d\u306e\u4e00\u7a2e\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u306ftensorflow\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308b\u95a2\u6570\u3067\u3059\u3002\nimread\u95a2\u6570\u3092\u8aad\u3093\u3060\u5f8c\u306e\u51e6\u7406\u306f\u3001None\u5224\u5b9a\u3092\u304b\u307e\u305b\u3066\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3046\u3057\u306a\u3044\u3068None\u3067\u30b3\u30b1\u308b\u306e\u3067\u5fc5\u305a\u3053\u308c\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08\u3088\u304f\u3088\u304f\u8003\u3048\u305f\u3089\u5f53\u305f\u308a\u524d\u306a\u3093\u3060\u3088\u306a\u3042...\uff09\n\n```python\nimport os, sys\nimport numpy as np\nimport tensorflow as tf\nimport cv2\n\n# config\nflags = tf.app.flags\nFLAGS = flags.FLAGS\nflags.DEFINE_string('imgdir', '/home/hoge/fuga/piyo', 'Image dataset path')\nflags.DEFINE_string('imgclasses', 4, 'The num of image dataset classes')\nIMAGE_SIZE = 84 # the size of image\nTRAIN_IMG_DIRS = os.listdir(FLAGS.imgdir)\n\ndef main():\n  train_image, train_label = cvGetImageAndLabel()\n  #\u5b66\u7fd2\u3068\u304b\u306e\u30b3\u30fc\u30c9\u306f\u9762\u5012\u306a\u306e\u3067\u7565\n\ndef cvGetImageAndLabel():\n  images = []\n  labels = []\n  for i, d in enumerate(TRAIN_IMG_DIRS):\n    files = os.listdir(FLAGS.imgdir + '/' + d)\n    for f in files:\n      img = cv2.imread(FLAGS.imgdir + '/' + d + '/' + f)\n      # \u3053\u306e\u90e8\u5206\u3067None\u5224\u5b9a\n      if not img is None:\n        img = cv2.resize(img, (IMAGE_SIZE, IMAGE_SIZE), interpolation = cv2.INTER_AREA)\n        img = img.flatten().astype(np.float32)/255.0\n        images.append(img)\n        tmp = np.zeros(FLAGS.imgclasses)\n        tmp[i] = 1\n        labels.append(tmp)\n\n  return np.asarray(images, dtype=np.float32), np.asarray(labels, dtype=np.float32)\n\nif __name__ == '__main__':\n  main()\n\n```\n\n\u30b3\u30fc\u30c9\u306e\u6c5a\u3055\u306f\u3054\u611b\u656c\u3067\u3059\uff08\uff1f\uff09\n\n# \u53c2\u8003\u30ea\u30f3\u30af\nhttp://stackoverflow.com/questions/23628325/cv2-imread-checking-if-image-is-being-read\n", "tags": ["OpenCV", "Python", "TensorFlow"]}