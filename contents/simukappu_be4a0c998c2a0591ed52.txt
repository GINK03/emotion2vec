{"context": "\n\nShift-JIS\u3078\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\nCSV.generate\u3092\u4f7f\u7528\u3057\u3066CSV\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066\u3001encording\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306bsjis\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306b\u306fShift-JIS\u306b\u5909\u63db\u3057\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u305d\u306e\u307e\u307eUTF-8\u3067\u751f\u6210\u3057\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\napp/models/my_model.rb\nrequire 'csv'\n\n# Convert to CSV\ndef self.to_csv\n  CSV.generate do |csv|\n    csv << csv_headers\n    all.each do |my_model|\n      csv << my_model.csv_column_values\n    end\n  end\nend\n\n# Select headers\n# Write as you like\ndef self.csv_headers\n  [\n    \"\u30bf\u30a4\u30c8\u30eb\",\n    \"\u30e6\u30fc\u30b6\u540d\",\n    \"\u4f5c\u6210\u65e5\u6642\",\n    \"\u66f4\u65b0\u65e5\u6642\"\n  ]\nend\n\n# Select values\n# Write as you like\ndef csv_column_values\n  [\n    title,\n    username,\n    created_at.strftime(\"%-Y/%-m/%-d %H:%M\"),\n    updated_at.strftime(\"%-Y/%-m/%-d %H:%M\")\n  ]\nend\n\n\n\napp/controllers/my_model_controller.rb\n# Convert special characters to sjis\ndef sjis_safe(str)\n  [\n    [\"301C\", \"FF5E\"], # wave-dash\n    [\"2212\", \"FF0D\"], # full-width minus\n    [\"00A2\", \"FFE0\"], # cent as currency\n    [\"00A3\", \"FFE1\"], # lb(pound) as currency\n    [\"00AC\", \"FFE2\"], # not in boolean algebra\n    [\"2014\", \"2015\"], # hyphen\n    [\"2016\", \"2225\"], # double vertical lines\n  ].inject(str) do |s, (before, after)|\n    s.gsub(\n      before.to_i(16).chr('UTF-8'),\n      after.to_i(16).chr('UTF-8'))\n  end\nend\n\n# GET /my_models/csv\ndef csv\n  csv_data = MyModel.all.to_csv\n  if params[:encording] == 'sjis'\n    csv_data = sjis_safe(csv_data).encode(Encoding::SJIS, invalid: :replace, undef: :replace)\n  end\n  respond_to do |format|\n    format.csv {\n      send_data csv_data,\n      filename: \"my_models_#{Date.today.strftime(\"%Y%m%d\")}.csv\",\n      type: :csv\n    }\n  end\nend\n\n\n\nBOM\u4ed8\u304dUTF-8\u306e\u51fa\u529b\nExcel\u3067CSV\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\u3053\u3068\u304c\u76ee\u7684\u3067\u3042\u308c\u3070\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u306fUTF-8\u306e\u307e\u307e\u3067BOM\u3092\u3064\u3051\u308c\u3070\u958b\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002CSV.generate\u306e\u5f15\u6570\u306bBOM\u306e\u6587\u5b57\u5217\u3092\u6e21\u3059\u3060\u3051\u3067\u6e08\u3080\u306e\u3067\u3001\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\napp/models/my_model.rb\nrequire 'csv'\n\n# Convert to CSV with UTF-8 BOM\ndef self.to_csv\n  bom = %w(EF BB BF).map { |e| e.hex.chr }.join\n  CSV.generate(bom) do |csv|\n    csv << csv_headers\n    all.each do |my_model|\n      csv << my_model.csv_column_values\n    end\n  end\nend\n\n\n#Shift-JIS\u3078\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\n`CSV.generate`\u3092\u4f7f\u7528\u3057\u3066CSV\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066\u3001`encording`\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306b`sjis`\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306b\u306fShift-JIS\u306b\u5909\u63db\u3057\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u305d\u306e\u307e\u307eUTF-8\u3067\u751f\u6210\u3057\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\n```app/models/my_model.rb\nrequire 'csv'\n\n# Convert to CSV\ndef self.to_csv\n  CSV.generate do |csv|\n    csv << csv_headers\n    all.each do |my_model|\n      csv << my_model.csv_column_values\n    end\n  end\nend\n\n# Select headers\n# Write as you like\ndef self.csv_headers\n  [\n    \"\u30bf\u30a4\u30c8\u30eb\",\n    \"\u30e6\u30fc\u30b6\u540d\",\n    \"\u4f5c\u6210\u65e5\u6642\",\n    \"\u66f4\u65b0\u65e5\u6642\"\n  ]\nend\n\n# Select values\n# Write as you like\ndef csv_column_values\n  [\n    title,\n    username,\n    created_at.strftime(\"%-Y/%-m/%-d %H:%M\"),\n    updated_at.strftime(\"%-Y/%-m/%-d %H:%M\")\n  ]\nend\n```\n\n```app/controllers/my_model_controller.rb\n# Convert special characters to sjis\ndef sjis_safe(str)\n  [\n    [\"301C\", \"FF5E\"], # wave-dash\n    [\"2212\", \"FF0D\"], # full-width minus\n    [\"00A2\", \"FFE0\"], # cent as currency\n    [\"00A3\", \"FFE1\"], # lb(pound) as currency\n    [\"00AC\", \"FFE2\"], # not in boolean algebra\n    [\"2014\", \"2015\"], # hyphen\n    [\"2016\", \"2225\"], # double vertical lines\n  ].inject(str) do |s, (before, after)|\n    s.gsub(\n      before.to_i(16).chr('UTF-8'),\n      after.to_i(16).chr('UTF-8'))\n  end\nend\n\n# GET /my_models/csv\ndef csv\n  csv_data = MyModel.all.to_csv\n  if params[:encording] == 'sjis'\n    csv_data = sjis_safe(csv_data).encode(Encoding::SJIS, invalid: :replace, undef: :replace)\n  end\n  respond_to do |format|\n    format.csv {\n      send_data csv_data,\n      filename: \"my_models_#{Date.today.strftime(\"%Y%m%d\")}.csv\",\n      type: :csv\n    }\n  end\nend\n```\n\n#BOM\u4ed8\u304dUTF-8\u306e\u51fa\u529b\nExcel\u3067CSV\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\u3053\u3068\u304c\u76ee\u7684\u3067\u3042\u308c\u3070\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u306fUTF-8\u306e\u307e\u307e\u3067BOM\u3092\u3064\u3051\u308c\u3070\u958b\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002`CSV.generate`\u306e\u5f15\u6570\u306bBOM\u306e\u6587\u5b57\u5217\u3092\u6e21\u3059\u3060\u3051\u3067\u6e08\u3080\u306e\u3067\u3001\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\n```app/models/my_model.rb\nrequire 'csv'\n\n# Convert to CSV with UTF-8 BOM\ndef self.to_csv\n  bom = %w(EF BB BF).map { |e| e.hex.chr }.join\n  CSV.generate(bom) do |csv|\n    csv << csv_headers\n    all.each do |my_model|\n      csv << my_model.csv_column_values\n    end\n  end\nend\n```\n", "tags": ["Ruby", "Rails", "CSV", "UTF-8", "sjis"]}