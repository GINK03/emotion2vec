{"tags": ["Erlang"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\nmeck (Erlang mock\u30e9\u30a4\u30d6\u30e9\u30ea) \u306e\u4f7f\u3044\u65b9\nErlang\u306emock\u30e9\u30a4\u30d6\u30e9\u30ea \u300cmeck\u300d\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u65e5\u672c\u8a9e\u3067\u307e\u3068\u3081\u3066\u3042\u308b\u8a18\u4e8b\u3082\u3042\u3063\u305f\u304c\u3001\u7d30\u304b\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5206\u304b\u3089\u305a\u3001\u4f7f\u3063\u3066\u3044\u3066\u8a70\u307e\u3063\u305f\u306e\u3067\u52c9\u5f37\u304c\u3066\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u672c\u5bb6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u307f\u3064\u3064\u7e8f\u3081\u3066\u307f\u305f\u3002\n\n\n\n\u30ec\u30dd\u30b8\u30c8\u30ea\neproxus/meck\n\n\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n0.8.2\n\n\n\u30e9\u30a4\u30bb\u30f3\u30b9\nApache License v2\n\n\n\n\n\u6ce8\u610f\n\u4f55\u6545\u304blists\u3067\u4f8b\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u304c, lists\u306fmeck\u3067\u304d\u307e\u305b\u3093\u306e\u3067\u60aa\u3057\u304b\u3089\u305a...\n\u540c\u69d8\u306bstdlib\u306e\u4e2d\u306b\u306fmeck\u3067\u304d\u306a\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059.\n\n\u578b\n\u4f55\u56de\u3082\u51fa\u3066\u304f\u308b\u306e\u3067\u3001\u306f\u3058\u3081\u306b\u3044\u304f\u3064\u304b\u5b9a\u7fa9\u3092\u3057\u3066\u304a\u304f\u3002\n\n\u57fa\u672c\n%% \u30e2\u30b8\u30e5\u30fc\u30eb\u540d\n-type module()   :: atom().\n%% \u95a2\u6570\u540d\n-type func_name():: atom(). \n%% lists:reverse/1, lists:nth/2 \u306a\u3069\u306e/1, /2\u306e\u90e8\u5206\n-type arity()    :: pos_integer().\n\n\n\u305d\u306e\u4ed6\n\nmatcher()\nargs_spec()\nret_spec()\n\n\nsetup/teardown\n\nnew\n% mock\u3059\u308bmodule\u3092\u6307\u5b9a\u3059\u308b\u3002\u30ea\u30b9\u30c8\u3067\u6307\u5b9a\u53ef\u80fd\n% erlang\u306a\u3069OTP\u95a2\u4fc2\u3067mock\u3067\u304d\u306a\u3044\u3082\u306e\u3042\u308a (error\u304c\u6295\u3052\u3089\u308c\u308b)\n-spec meck:new(module() | [module()]) -> ok.\n\n%% Option\u3092\u6307\u5b9a\u53ef\u80fd\n-spec meck:new(module() | [module()], [Option]) -> ok.\n\n\n\n\n\u30aa\u30d7\u30b7\u30e7\u30f3\n\u6982\u8981\n\n\n\n\npassthrough\n\nmock\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\u306f\u3001\u5f93\u6765\u306e\u7269\u3092\u4f7f\u7528\u3059\u308b\u3002stub_all\u3068\u4f75\u7528\u4e0d\u53ef\n\n\nno_link\n\u547c\u3073\u51fa\u3057\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u30ea\u30f3\u30af\u3057\u306a\u3044 (not start_link)\n\n\nunstick\n\nkernel\u3084stdlib module\u3092mock\u3057\u305f\u3044\u5834\u5408\u306b\u4ed8\u3051\u308b\n\n\nno_passthrough_cover\n\npassthrough\u3057\u305f\u969b\u306b\u3001\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u5bfe\u8c61\u5916\u306b\u3059\u308b\n\n\nno_history\n\nmeck\u304c\u547c\u3070\u308c\u305f\u5c65\u6b74\u3092\u4fdd\u6301\u3057\u306a\u3044\n\n\nnon_strict\n\u30ed\u30fc\u30c9\u3057\u3066\u3044\u306a\u3044module\u306b\u5927\u3057\u3066mock\u3057\u305f\u3044\u5834\u5408\u306b\u4ed8\u3051\u308b\n\n\n{spawn_opt, list()}\n\n{spawn_opt, [link]}\u3057\u304b\u6307\u5b9a\u3067\u304d\u306a\u3044\u3068\u601d\u308f\u308c\u308b. \u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u5fc5\u8981\u306f\u306a\u3044.\n\n\n{stub_all, ret_spec()}\n\u5f93\u6765\u306emodule\u3067\u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304c\u3001mock\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3092\u6307\u5b9a\u3059\u308b\n\n\nstub_all\n\n{stub_all, ok}\u3068\u7b49\u4fa1\n\n\n\n\u88dc\u8db3\n\nErlang shell\u4e0a\u3067c(file). \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u7269\u3067\u306fpassthrough\u304c\u3046\u307e\u304f\u52d5\u4f5c\u305b\u305a\u624b\u9593\u53d6\u3063\u305f\n\n\nunload\n% new\u3057\u305fmodule\u3092\u4e00\u62ec\u3057\u3066unload\u3059\u308b\n-spec meck:unload() -> [module()].\n% new\u3057\u305fmodule\u306e\u3046\u3061\u3001\u6307\u5b9a\u3057\u305fmodule\u306e\u307funload\u3059\u308b\n% new\u3057\u3066\u3044\u306a\u3044module\u3092\u6307\u5b9a\u3059\u308b\u3068 error({not_mocked, Module}) \u304c\u6295\u3052\u3089\u308c\u308b\n-spec meck:unload(module() | [module()]) -> ok.\n\n\nMock API\n\nexpect\n%% meck:expect/3\n%% Expectation\u306f\u30ea\u30b9\u30c8\u3067\u6307\u5b9a\u3067\u304d\u308b\u304c\u3001\u7570\u306a\u308barity\u3092\u6307\u5b9a\u3057\u3066\u306f\u306a\u3089\u306a\u3044\n-spec meck:expect(module() | [module()], func_name(), Expectation) -> ok when\n    Expectation :: fun() | [{arg_spec(), ret_spec()}].\n%% meck:expect/4\n-spec meck:expect(module() | [module()], func_name(), args_spec(), ret_spec()) -> ok.\n\n%% e.g.\n%% lists:reverse(_) -> [3,2,1]\nmeck:expect(lists, reverse, fun(_) -> [3,2,1] end).\n%% lists:reverse(1,2) -> [2,1]; (1,_) -> [3,2,1]; (_, _) -> [c,b,a].\nmeck:expect(lists, reverse, [{[1,2], [2,1]}, \n                             {[1, '_'], [3,2,1]},\n                             {2, [c,b,a]}]).       % arity\u6307\u5b9a\n%% lists:reverse(_, a, [_|_]) -> [c,b,a]\nmeck:expect(lists, reverse, ['_', a, ['_'|'_']], [c,b,a]).\n%% lists:reverse() -> [9,8,7]\nmeck:expect(lists, reverse, 0, [9,8,7]).\n\n\nargs_spec() \u304a\u3088\u3073 ret_spec() \u53c2\u7167\n\u88dc\u8db3\uff1ameck:new\u3092\u547c\u3070\u306a\u304f\u3066\u3082expect\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b. \u305d\u306e\u969b\u306f[passthrough]\u3092\u6307\u5b9a\u3057\u3066\u81ea\u52d5\u7684\u306bnew\u3055\u308c\u308b.\n\nsequence\n%% \u547c\u3073\u3060\u3055\u308c\u305f\u9806\u756a\u306b\u3088\u3063\u3066\u8fd4\u308a\u5024\u3092\u5909\u66f4\u3057\u305f\u3044\n-spec sequence(module() | [module()], func_name(), arity(), Values()) -> ok when\n    Values   :: [any()].\n%% e.g.\n1> meck:sequence(lists, reverse, 1, [ [3,2,1], [c,b,a] ]).\nok\n2> lists:reverse(a).\n[3,2,1]\n3> lists:reverse(a).\n[c,b,a]\n4> lists:reverse(a). %% \u4ee5\u964d\u540c\u3058\n[c,b,a]\n\n\nloop\n%% \u8fd4\u308a\u5024\u3092\u4e00\u5b9a\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3057\u305f\u3044\n-spec meck:loop(module() | [module()], func_name(), arity(), Values) -> ok when\n    Values  :: [any()].\n%% e.g.\n1> meck:loop(lists, reverse, 1, [ [3,2,1], [c,b,a] ]).\nok\n2> lists:reverse(a).\n[3,2,1]\n3> lists:reverse(a).\n[c,b,a]\n4> lists:reverse(a).\n[3,2,1]\n\n\ndelete\n%% expect\u3092\u53d6\u308a\u6d88\u3059\n-spec meck:delete(module() | [module()], func_name(), arity()) -> ok.\n\n\nexception\n%% exception\u3092\u8fd4\u3059\n%% throw(Class, Reason)\n%% meck:expect\u306efun\u306b\u306e\u307f\u4f7f\u7528\u53ef\u80fd\n-spec meck:exception(Class :: throw | error | exit, Reason :: any()) -> no_return().\n\n\npassthrough\n%% original\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n%% meck:expect\u306efun\u306b\u306e\u307f\u4f7f\u7528\u53ef\u80fd\n-spec meck:passthrough(Args) -> Result when\n    Args   :: [any()],\n    Result :: any(). \n\n\nCheck API\n\nvalidate\n%% module\u304cmeck\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306ftrue\n%% exception\u306b\u3088\u3063\u3066meck\u304c\u58ca\u308c\u305f\u5834\u5408\u306ffalse\n%% \u305d\u3082\u305d\u3082meck\u3055\u308c\u3066\u3044\u306a\u3044\u7269\u306ferror({not_mecked, _})\n-spec meck:validate(module() | [module()]) -> boolean().\n\n%% e.g.\n1> meck:new(aaa, [non_strict]).\nok\n2> meck:validate(aaa).\ntrue\n3> meck:validate(bbb).\n*** exception error: {not_mocked, bbb} % false\u3067\u306f\u306a\u3044\n4> meck:new(ccc, [non_strict]).\nok\n5> catch ccc:not_exist().\n{'EXIT', {function_clause, [{...}]}}\n6> meck:validate(ccc).\nfalse\n\n\nhistory/reset\n-spec history() :: [\n                    {pid(), {module(), func_name(), Args :: [any()]}, Result :: any()} |\n                    {pid(), {module(), func_name(), Class :: throw|error|exit, Reason::any(), stack_trace()}\n                   ].\n%% \u6307\u5b9a\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306emock\u304c\u547c\u3070\u308c\u305f\u5c65\u6b74\u3092\u53d6\u5f97\u3059\u308b\n-spec meck:history(module()) -> history().\n-spec meck:history(module(), pid() | '_') -> history().\n\n%% history\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\n-spec meck:reset(module() | [module()]) -> ok.\n\n\ncapture\n%% \u6307\u5b9a\u56de\u6570\u76ee\u306b\u547c\u3070\u308c\u305f\u969b\u306e\u8fd4\u308a\u5024\u3092\u53d6\u5f97\u3059\u308b\n%% pid()\u3092\u7701\u7565\u3057\u305f meck:capture/5\u3082\u3042\u308b\n-spec meck:capture(Occur, module(), func_name(), OptArgsSpec, arity(), OptCallerPid) -> Result when\n    Occur       :: first | last | Nth,\n    Nth         :: pos_integer(),\n    OptArgsSpec :: '_' | args_spec(),\n    OptCallerPid:: '_' | pid(),\n    Result      :: any().\n\nargs_spec()\u53c2\u7167\n\nnum_calls/called\n%% \u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u56de\u6570\u3092\u53d6\u5f97\u3059\u308b\n-spec meck:num_calls(module(), OptFun, OptArgsSpec) -> non_neg_integer() when\n    OptFun      :: '_' | func_name(),\n    OptArgsSpec :: '_' | args_spec(). \n\n%% lists:reverse/0\nmeck:num_calls(lists, reverse, 0).\n%% slef()\u304clists\u306e\u95a2\u6570\u3092\u547c\u3093\u3060\u56de\u6570\nmeck:num_calls(lists, '_', '_', self()).\n%% Args\u3092\u6307\u5b9a\u3059\u308b\nmeck:num_calls(lists, reverse, [1,2,3]).\n%% \u7d30\u304b\u304fArgs\u5224\u5b9a\u3092\u884c\u3046\n%% lists:reverse(_, 2, [_|_]) \u306e\u56de\u6570\nmeck:num_calls(lists, reverse, ['_', 2, ['_' | '_']]). \n\n%% \u771f\u507d\u5024\u306e\u307f\u304c\u6b32\u3057\u3044\u5834\u5408\n%% \u5f15\u6570\u306fnum_calls\u3068\u540c\u3058\nmeck:called(lists, reverse, 0).\n\nargs_spec()\u53c2\u7167\n\nwait\n%% \u8a72\u5f53\u3059\u308b\u95a2\u6570\u306ehistory\u304c\u4e00\u5b9a\u6570 (Times) \u4ee5\u4e0a\u306b\u306a\u308b\u307e\u3067\u5f85\u3064\n%% history\u306e\u6570\u306a\u306e\u3067, meck:reset/1 \u3092\u547c\u3070\u306a\u3044\u9650\u308a\u7d50\u679c\u306f\u5909\u308f\u3089\u306a\u3044\n-spec wait(module(), OptFunc, OptArgsSpec, Timeout) -> ok when\n    OptFunc     :: func_name(),\n    OptArgSpec  :: '_' | func_name(),\n    OptArgsSpec :: '_' | args_spec(),\n    Timeout     :: non_neg_integer().  % ms\n-spec wait(Times, module(), OptFunc, OptArgsSpec, Timeout) -> ok when\n    Times       :: non_neg_integer(),\n    OptFunc     :: func_name(),\n    OptArgSpec  :: '_' | func_name(),\n    OptArgsSpec :: '_' | args_spec(),\n    Timeout     :: non_neg_integer().  % ms\n-spec wait(Times, module(), OptFunc, OptArgsSpec, OptCallerPid, Timeout) -> ok when\n    Times       :: non_neg_integer(),\n    OptFunc     :: func_name(),\n    OptArgSpec  :: '_' | func_name(),\n    OptArgsSpec :: '_' | args_spec(),\n    OptCallerPid:: '_' | pid(),\n    Timeout     :: non_neg_integer().  % ms\n\nargs_spec()\u53c2\u7167\n\n\u305d\u306e\u4ed6\n\nmatcher\n\nmatch\u3059\u308b\u304b\u3092\u8fd4\u3059\u95a2\u6570\u3092\u6307\u5b9a\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\n%% \u771f\u306e\u5834\u5408\u306ftrue, \u507d\u306e\u5834\u5408\u306f\u305d\u308c\u4ee5\u5916\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308b\n-spec meck:is(fun( (any()) -> true | any() )) -> matcher().\n\n1> meck:is( fun(X) -> case X rem 2 of 0 -> true; _ -> X end ).\n\n\nargs_spec\n\n\u5f15\u6570\u304c\u4f55\u306e\u6642\u306e\u52d5\u4f5c\u304b\u3092\u6307\u5b9a\u3059\u308b\n-type args_spec() :: [any() | '_' | matcher()] | arity().\n\n%% \u53c2\u8003\n-spec meck:expect(module(), func_name(), args_spec(), ret_spec()) -> ok.\n\n%% arity()\u306e\u6307\u5b9a\nmeck:expect(module, hoge, 1,          meck:val(1)). % module:hoge/1\nmeck:expect(module, hoge, ['_', '_'], meck:val(1)). % module:hoge/2\nmeck:expect(module, hoge, [1, 2],     meck:val(1)). % module:hoge(1, 2)\n\nmeck:expect(module, hoge, ['_', 2, ['_' | '_']],                 meck:val(1)). % module:hoge(_, 2, [_ | _])\nmeck:expect(module, hoge, ['_', meck:is(fun(X) -> X =:= 2 end)], meck:val(1)). % module:hoge(_, 2)\n\n\nret_spec\n\nexpect function\u5185\u3067\u4ee5\u4e0b\u306e\u8868\u8a18\u304c\u4f7f\u7528\u3067\u304d\u308b\u3002\n%% meck:loop/4 \u53c2\u7167\n-spec meck:loop([ret_spec()]) -> ret_spec().\n%% meck:sequence/4 \u53c2\u7167\n-spec meck:seq([ret_spec()]) -> ret_spec().\n%% \u5024\u3092\u6307\u5b9a\u3059\u308b\n%% meck:val(2) \u3068 2 \u306f\u7b49\u4fa1\n-spec meck:val(any()) -> ret_spec().\n%% meck:exception/2 \u53c2\u7167\n-spec meck:raise(Class, Reason) -> ret_spec when\n    Class  :: throw | error | exit,\n    Reason :: term().\n%% meck:passthrough/1 \u53c2\u7167\n-spec meck:passthrough() -> ret_spec().\n\n%% \u5f15\u6570\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n-spec meck:exec(fun()) -> ret_spec().\n%% e.g.\n1> meck:expect(hoge, aaa, [{1, meck:exec(fun(X) -> X * 2 end)}]).\nok\n2> hoge:aaa(1).\n2\n%% arity\u3068\u5f15\u6570\u306e\u6570\u306f\u7b49\u3057\u304f\u306a\u3044\u3068\u306a\u3089\u306a\u3044\n3> meck:expect(hoge, aaa, [{2, meck:exec(fun() -> ok end)}]).\nok\n4 > hoge:aaa(1, 2).\n** {{badarity,{#Fun<erl_eval.20.90072148>,[1]}}, ...\n\n\u3053\u308c\u306b\u52a0\u3048\u3001mecther(), any()(\u8fd4\u5024\u3092\u76f4\u63a5\u6307\u5b9a)\u3000\u304c\u53ef\u80fd\n# meck (Erlang mock\u30e9\u30a4\u30d6\u30e9\u30ea) \u306e\u4f7f\u3044\u65b9\nErlang\u306emock\u30e9\u30a4\u30d6\u30e9\u30ea \u300c[meck](https://github.com/eproxus/meck)\u300d\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u65e5\u672c\u8a9e\u3067\u307e\u3068\u3081\u3066\u3042\u308b\u8a18\u4e8b\u3082\u3042\u3063\u305f\u304c\u3001\u7d30\u304b\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5206\u304b\u3089\u305a\u3001\u4f7f\u3063\u3066\u3044\u3066\u8a70\u307e\u3063\u305f\u306e\u3067\u52c9\u5f37\u304c\u3066\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u672c\u5bb6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u307f\u3064\u3064\u7e8f\u3081\u3066\u307f\u305f\u3002\n\n\n\u30ec\u30dd\u30b8\u30c8\u30ea|[eproxus/meck](https://github.com/eproxus/meck)|\n---|---|\n\u30d0\u30fc\u30b8\u30e7\u30f3|0.8.2|\n\u30e9\u30a4\u30bb\u30f3\u30b9| Apache License v2|\n\n## \u6ce8\u610f\n\u4f55\u6545\u304b`lists`\u3067\u4f8b\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u304c, `lists`\u306fmeck\u3067\u304d\u307e\u305b\u3093\u306e\u3067\u60aa\u3057\u304b\u3089\u305a...\n\u540c\u69d8\u306b`stdlib`\u306e\u4e2d\u306b\u306fmeck\u3067\u304d\u306a\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059.\n\n## \u578b\n\u4f55\u56de\u3082\u51fa\u3066\u304f\u308b\u306e\u3067\u3001\u306f\u3058\u3081\u306b\u3044\u304f\u3064\u304b\u5b9a\u7fa9\u3092\u3057\u3066\u304a\u304f\u3002\n\n### \u57fa\u672c\n```erlang\n%% \u30e2\u30b8\u30e5\u30fc\u30eb\u540d\n-type module()   :: atom().\n%% \u95a2\u6570\u540d\n-type func_name():: atom(). \n%% lists:reverse/1, lists:nth/2 \u306a\u3069\u306e/1, /2\u306e\u90e8\u5206\n-type arity()    :: pos_integer().\n```\n\n### \u305d\u306e\u4ed6\n- [matcher()](#matcher)\n- [args_spec()](#arg_spec)\n- [ret_spec()](#ret_spec)\n\n\n## setup/teardown\n### new\n```erlang\n% mock\u3059\u308bmodule\u3092\u6307\u5b9a\u3059\u308b\u3002\u30ea\u30b9\u30c8\u3067\u6307\u5b9a\u53ef\u80fd\n% erlang\u306a\u3069OTP\u95a2\u4fc2\u3067mock\u3067\u304d\u306a\u3044\u3082\u306e\u3042\u308a (error\u304c\u6295\u3052\u3089\u308c\u308b)\n-spec meck:new(module() | [module()]) -> ok.\n\n%% Option\u3092\u6307\u5b9a\u53ef\u80fd\n-spec meck:new(module() | [module()], [Option]) -> ok.\n```\n|\u30aa\u30d7\u30b7\u30e7\u30f3|\u6982\u8981|\n|:---|:----|\n|`passthrough`|`mock`\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\u306f\u3001\u5f93\u6765\u306e\u7269\u3092\u4f7f\u7528\u3059\u308b\u3002stub_all\u3068\u4f75\u7528\u4e0d\u53ef|\n|`no_link`|\u547c\u3073\u51fa\u3057\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u30ea\u30f3\u30af\u3057\u306a\u3044 (not `start_link`) |\n|`unstick`|`kernel`\u3084`stdlib module`\u3092`mock`\u3057\u305f\u3044\u5834\u5408\u306b\u4ed8\u3051\u308b|\n|`no_passthrough_cover`|`passthrough`\u3057\u305f\u969b\u306b\u3001\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u5bfe\u8c61\u5916\u306b\u3059\u308b|\n|`no_history`|`meck`\u304c\u547c\u3070\u308c\u305f\u5c65\u6b74\u3092\u4fdd\u6301\u3057\u306a\u3044|\n|`non_strict`|\u30ed\u30fc\u30c9\u3057\u3066\u3044\u306a\u3044`module`\u306b\u5927\u3057\u3066`mock`\u3057\u305f\u3044\u5834\u5408\u306b\u4ed8\u3051\u308b|\n|`{spawn_opt, list()}`|`{spawn_opt, [link]}`\u3057\u304b\u6307\u5b9a\u3067\u304d\u306a\u3044\u3068\u601d\u308f\u308c\u308b. \u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u5fc5\u8981\u306f\u306a\u3044. |\n|{stub_all, [ret_spec()](#ret_spec)}|\u5f93\u6765\u306e`module`\u3067\u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304c\u3001`mock`\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3092\u6307\u5b9a\u3059\u308b|\n|`stub_all`|`{stub_all, ok}`\u3068\u7b49\u4fa1|\n\n*\u88dc\u8db3*\n\n- Erlang shell\u4e0a\u3067`c(file)`. \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u7269\u3067\u306f`passthrough`\u304c\u3046\u307e\u304f\u52d5\u4f5c\u305b\u305a\u624b\u9593\u53d6\u3063\u305f\n\n### unload\n```erlang\n% new\u3057\u305fmodule\u3092\u4e00\u62ec\u3057\u3066unload\u3059\u308b\n-spec meck:unload() -> [module()].\n% new\u3057\u305fmodule\u306e\u3046\u3061\u3001\u6307\u5b9a\u3057\u305fmodule\u306e\u307funload\u3059\u308b\n% new\u3057\u3066\u3044\u306a\u3044module\u3092\u6307\u5b9a\u3059\u308b\u3068 error({not_mocked, Module}) \u304c\u6295\u3052\u3089\u308c\u308b\n-spec meck:unload(module() | [module()]) -> ok.\n```\n\n## Mock API\n### expect\n```erlang\n%% meck:expect/3\n%% Expectation\u306f\u30ea\u30b9\u30c8\u3067\u6307\u5b9a\u3067\u304d\u308b\u304c\u3001\u7570\u306a\u308barity\u3092\u6307\u5b9a\u3057\u3066\u306f\u306a\u3089\u306a\u3044\n-spec meck:expect(module() | [module()], func_name(), Expectation) -> ok when\n    Expectation :: fun() | [{arg_spec(), ret_spec()}].\n%% meck:expect/4\n-spec meck:expect(module() | [module()], func_name(), args_spec(), ret_spec()) -> ok.\n\n%% e.g.\n%% lists:reverse(_) -> [3,2,1]\nmeck:expect(lists, reverse, fun(_) -> [3,2,1] end).\n%% lists:reverse(1,2) -> [2,1]; (1,_) -> [3,2,1]; (_, _) -> [c,b,a].\nmeck:expect(lists, reverse, [{[1,2], [2,1]}, \n                             {[1, '_'], [3,2,1]},\n                             {2, [c,b,a]}]).       % arity\u6307\u5b9a\n%% lists:reverse(_, a, [_|_]) -> [c,b,a]\nmeck:expect(lists, reverse, ['_', a, ['_'|'_']], [c,b,a]).\n%% lists:reverse() -> [9,8,7]\nmeck:expect(lists, reverse, 0, [9,8,7]).\n\n```\n[args_spec()](#args_spec) \u304a\u3088\u3073 [ret_spec()](#ret_spec) \u53c2\u7167\n\n\u88dc\u8db3\uff1a`meck:new`\u3092\u547c\u3070\u306a\u304f\u3066\u3082`expect`\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b. \u305d\u306e\u969b\u306f`[passthrough]`\u3092\u6307\u5b9a\u3057\u3066\u81ea\u52d5\u7684\u306b`new`\u3055\u308c\u308b.\n\n### sequence\n```erlang\n%% \u547c\u3073\u3060\u3055\u308c\u305f\u9806\u756a\u306b\u3088\u3063\u3066\u8fd4\u308a\u5024\u3092\u5909\u66f4\u3057\u305f\u3044\n-spec sequence(module() | [module()], func_name(), arity(), Values()) -> ok when\n    Values   :: [any()].\n%% e.g.\n1> meck:sequence(lists, reverse, 1, [ [3,2,1], [c,b,a] ]).\nok\n2> lists:reverse(a).\n[3,2,1]\n3> lists:reverse(a).\n[c,b,a]\n4> lists:reverse(a). %% \u4ee5\u964d\u540c\u3058\n[c,b,a]\n```\n### loop\n```erlang\n%% \u8fd4\u308a\u5024\u3092\u4e00\u5b9a\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3057\u305f\u3044\n-spec meck:loop(module() | [module()], func_name(), arity(), Values) -> ok when\n    Values  :: [any()].\n%% e.g.\n1> meck:loop(lists, reverse, 1, [ [3,2,1], [c,b,a] ]).\nok\n2> lists:reverse(a).\n[3,2,1]\n3> lists:reverse(a).\n[c,b,a]\n4> lists:reverse(a).\n[3,2,1]\n```\n### delete\n```erlang\n%% expect\u3092\u53d6\u308a\u6d88\u3059\n-spec meck:delete(module() | [module()], func_name(), arity()) -> ok.\n```\n### exception\n```erlang\n%% exception\u3092\u8fd4\u3059\n%% throw(Class, Reason)\n%% meck:expect\u306efun\u306b\u306e\u307f\u4f7f\u7528\u53ef\u80fd\n-spec meck:exception(Class :: throw | error | exit, Reason :: any()) -> no_return().\n```\n### passthrough\n```erlang\n%% original\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n%% meck:expect\u306efun\u306b\u306e\u307f\u4f7f\u7528\u53ef\u80fd\n-spec meck:passthrough(Args) -> Result when\n    Args   :: [any()],\n    Result :: any(). \n```\n\n## Check API\n\n### validate\n```erlang\n%% module\u304cmeck\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306ftrue\n%% exception\u306b\u3088\u3063\u3066meck\u304c\u58ca\u308c\u305f\u5834\u5408\u306ffalse\n%% \u305d\u3082\u305d\u3082meck\u3055\u308c\u3066\u3044\u306a\u3044\u7269\u306ferror({not_mecked, _})\n-spec meck:validate(module() | [module()]) -> boolean().\n\n%% e.g.\n1> meck:new(aaa, [non_strict]).\nok\n2> meck:validate(aaa).\ntrue\n3> meck:validate(bbb).\n*** exception error: {not_mocked, bbb} % false\u3067\u306f\u306a\u3044\n4> meck:new(ccc, [non_strict]).\nok\n5> catch ccc:not_exist().\n{'EXIT', {function_clause, [{...}]}}\n6> meck:validate(ccc).\nfalse\n```\n\n### history/reset\n```erlang\n-spec history() :: [\n                    {pid(), {module(), func_name(), Args :: [any()]}, Result :: any()} |\n                    {pid(), {module(), func_name(), Class :: throw|error|exit, Reason::any(), stack_trace()}\n                   ].\n%% \u6307\u5b9a\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306emock\u304c\u547c\u3070\u308c\u305f\u5c65\u6b74\u3092\u53d6\u5f97\u3059\u308b\n-spec meck:history(module()) -> history().\n-spec meck:history(module(), pid() | '_') -> history().\n\n%% history\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\n-spec meck:reset(module() | [module()]) -> ok.\n```\n\n### capture\n```erlang\n%% \u6307\u5b9a\u56de\u6570\u76ee\u306b\u547c\u3070\u308c\u305f\u969b\u306e\u8fd4\u308a\u5024\u3092\u53d6\u5f97\u3059\u308b\n%% pid()\u3092\u7701\u7565\u3057\u305f meck:capture/5\u3082\u3042\u308b\n-spec meck:capture(Occur, module(), func_name(), OptArgsSpec, arity(), OptCallerPid) -> Result when\n    Occur       :: first | last | Nth,\n    Nth         :: pos_integer(),\n    OptArgsSpec :: '_' | args_spec(),\n    OptCallerPid:: '_' | pid(),\n    Result      :: any().\n```\n[args_spec()\u53c2\u7167](#args_spec)\n\n### num_calls/called\n```erlang\n%% \u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u56de\u6570\u3092\u53d6\u5f97\u3059\u308b\n-spec meck:num_calls(module(), OptFun, OptArgsSpec) -> non_neg_integer() when\n    OptFun      :: '_' | func_name(),\n    OptArgsSpec :: '_' | args_spec(). \n\n%% lists:reverse/0\nmeck:num_calls(lists, reverse, 0).\n%% slef()\u304clists\u306e\u95a2\u6570\u3092\u547c\u3093\u3060\u56de\u6570\nmeck:num_calls(lists, '_', '_', self()).\n%% Args\u3092\u6307\u5b9a\u3059\u308b\nmeck:num_calls(lists, reverse, [1,2,3]).\n%% \u7d30\u304b\u304fArgs\u5224\u5b9a\u3092\u884c\u3046\n%% lists:reverse(_, 2, [_|_]) \u306e\u56de\u6570\nmeck:num_calls(lists, reverse, ['_', 2, ['_' | '_']]). \n\n%% \u771f\u507d\u5024\u306e\u307f\u304c\u6b32\u3057\u3044\u5834\u5408\n%% \u5f15\u6570\u306fnum_calls\u3068\u540c\u3058\nmeck:called(lists, reverse, 0).\n```\n[args_spec()\u53c2\u7167](#args_spec)\n\n### wait\n```erlang\n%% \u8a72\u5f53\u3059\u308b\u95a2\u6570\u306ehistory\u304c\u4e00\u5b9a\u6570 (Times) \u4ee5\u4e0a\u306b\u306a\u308b\u307e\u3067\u5f85\u3064\n%% history\u306e\u6570\u306a\u306e\u3067, meck:reset/1 \u3092\u547c\u3070\u306a\u3044\u9650\u308a\u7d50\u679c\u306f\u5909\u308f\u3089\u306a\u3044\n-spec wait(module(), OptFunc, OptArgsSpec, Timeout) -> ok when\n    OptFunc     :: func_name(),\n    OptArgSpec  :: '_' | func_name(),\n    OptArgsSpec :: '_' | args_spec(),\n    Timeout     :: non_neg_integer().  % ms\n-spec wait(Times, module(), OptFunc, OptArgsSpec, Timeout) -> ok when\n    Times       :: non_neg_integer(),\n    OptFunc     :: func_name(),\n    OptArgSpec  :: '_' | func_name(),\n    OptArgsSpec :: '_' | args_spec(),\n    Timeout     :: non_neg_integer().  % ms\n-spec wait(Times, module(), OptFunc, OptArgsSpec, OptCallerPid, Timeout) -> ok when\n    Times       :: non_neg_integer(),\n    OptFunc     :: func_name(),\n    OptArgSpec  :: '_' | func_name(),\n    OptArgsSpec :: '_' | args_spec(),\n    OptCallerPid:: '_' | pid(),\n    Timeout     :: non_neg_integer().  % ms\n```\n[args_spec()\u53c2\u7167](#args_spec)\n\n## \u305d\u306e\u4ed6\n### matcher<a name=\"matcher\">\nmatch\u3059\u308b\u304b\u3092\u8fd4\u3059\u95a2\u6570\u3092\u6307\u5b9a\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\n\n```erlang\n%% \u771f\u306e\u5834\u5408\u306ftrue, \u507d\u306e\u5834\u5408\u306f\u305d\u308c\u4ee5\u5916\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308b\n-spec meck:is(fun( (any()) -> true | any() )) -> matcher().\n\n1> meck:is( fun(X) -> case X rem 2 of 0 -> true; _ -> X end ).\n```\n### args_spec<a name=\"arg_spec\">\n\u5f15\u6570\u304c\u4f55\u306e\u6642\u306e\u52d5\u4f5c\u304b\u3092\u6307\u5b9a\u3059\u308b\n\n```erlang\n-type args_spec() :: [any() | '_' | matcher()] | arity().\n\n%% \u53c2\u8003\n-spec meck:expect(module(), func_name(), args_spec(), ret_spec()) -> ok.\n\n%% arity()\u306e\u6307\u5b9a\nmeck:expect(module, hoge, 1,          meck:val(1)). % module:hoge/1\nmeck:expect(module, hoge, ['_', '_'], meck:val(1)). % module:hoge/2\nmeck:expect(module, hoge, [1, 2],     meck:val(1)). % module:hoge(1, 2)\n\nmeck:expect(module, hoge, ['_', 2, ['_' | '_']],                 meck:val(1)). % module:hoge(_, 2, [_ | _])\nmeck:expect(module, hoge, ['_', meck:is(fun(X) -> X =:= 2 end)], meck:val(1)). % module:hoge(_, 2)\n```\n### ret_spec<a name=\"ret_spec\">\n`expect function`\u5185\u3067\u4ee5\u4e0b\u306e\u8868\u8a18\u304c\u4f7f\u7528\u3067\u304d\u308b\u3002\n\n```erlang\n%% meck:loop/4 \u53c2\u7167\n-spec meck:loop([ret_spec()]) -> ret_spec().\n%% meck:sequence/4 \u53c2\u7167\n-spec meck:seq([ret_spec()]) -> ret_spec().\n%% \u5024\u3092\u6307\u5b9a\u3059\u308b\n%% meck:val(2) \u3068 2 \u306f\u7b49\u4fa1\n-spec meck:val(any()) -> ret_spec().\n%% meck:exception/2 \u53c2\u7167\n-spec meck:raise(Class, Reason) -> ret_spec when\n    Class  :: throw | error | exit,\n    Reason :: term().\n%% meck:passthrough/1 \u53c2\u7167\n-spec meck:passthrough() -> ret_spec().\n\n%% \u5f15\u6570\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n-spec meck:exec(fun()) -> ret_spec().\n%% e.g.\n1> meck:expect(hoge, aaa, [{1, meck:exec(fun(X) -> X * 2 end)}]).\nok\n2> hoge:aaa(1).\n2\n%% arity\u3068\u5f15\u6570\u306e\u6570\u306f\u7b49\u3057\u304f\u306a\u3044\u3068\u306a\u3089\u306a\u3044\n3> meck:expect(hoge, aaa, [{2, meck:exec(fun() -> ok end)}]).\nok\n4 > hoge:aaa(1, 2).\n** {{badarity,{#Fun<erl_eval.20.90072148>,[1]}}, ...\n```\n\n\u3053\u308c\u306b\u52a0\u3048\u3001[mecther()](#matcher), `any()`(\u8fd4\u5024\u3092\u76f4\u63a5\u6307\u5b9a)\u3000\u304c\u53ef\u80fd\n"}