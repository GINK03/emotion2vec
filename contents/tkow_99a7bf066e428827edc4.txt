{"context": "\n\n\u306a\u305c\u3059\u308b\u306e\u304b\n\u4f7f\u3063\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3093\u3067\u3082\u51e6\u7406\u5185\u5bb9\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u308a\u3001\u306a\u3093\u304b\u602a\u3057\u3044\u3068\u601d\u3063\u305f\u5834\u5408\u3001\u3069\u3053\u306b\u3042\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u60c5\u5831\u3092\u63a2\u3059\u3088\u308a\u3001\u78ba\u5b9f\u306b\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\u3092\u898b\u305f\u65b9\u304c\u65e9\u3044(\u4e00\u822c\u7684\u306a\u8a71\u3001\u306a\u304aWET\u306a\u30b3\u30fc\u30c9\u306f\u9664\u304d\u307e\u3059)\u4e8b\u304c\u591a\u3005\u6709\u308a\u307e\u3059\u3002\n\u7279\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3084\u3001\u30e1\u30bf\u30e1\u30bf\u3057\u3066\u308b\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u306e\u306f\u975e\u5e38\u306b\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\nAction View\nRails\u3067Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u306a\u3089\u3001\u307b\u307c100%\u4f7f\u3046\u3067\u3042\u308d\u3046render\u30e1\u30bd\u30c3\u30c9\u306e\u30b3\u30fc\u30c9\u6839\u5e79\u3068\u306a\u308b\u51e6\u7406\u5206\u5c90\u306f\u5b9f\u306f\u3053\u3093\u306a\u306b\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u5b9f\u969b\u306erender\u30ed\u30b8\u30c3\u30af\u306f\u3001\u4ed6\u306e\u30af\u30e9\u30b9\u306b\u96c6\u7d04\u3057\u3066\u3001\u81ea\u7531\u306b\u4ed8\u3051\u66ff\u3048\u53ef\u80fd\u3068\u306a\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306brender\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306fabstruct\u30d1\u30bf\u30fc\u30f3\u3067\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n#abstract_renderrer.rb\n\n\nmodule ActionView\n  # This class defines the interface for a renderer. Each class that\n  # subclasses +AbstractRenderer+ is used by the base +Renderer+ class to\n  # render a specific type of object.\n  #\n  # The base +Renderer+ class uses its +render+ method to delegate to the\n  # renderers. These currently consist of\n  #\n  #   PartialRenderer - Used for rendering partials\n  #   TemplateRenderer - Used for rendering other types of templates\n  #   StreamingTemplateRenderer - Used for streaming\n  #\n  # Whenever the +render+ method is called on the base +Renderer+ class, a new\n  # renderer object of the correct type is created, and the +render+ method on\n  # that new object is called in turn. This abstracts the setup and rendering\n  # into a separate classes for partials and templates.\n  class AbstractRenderer #:nodoc:\n    delegate :find_template, :find_file, :template_exists?, :any_templates?, :with_fallbacks, :with_layout_format, :formats, :to => :@lookup_context\n\n    def initialize(lookup_context)\n      @lookup_context = lookup_context\n    end\n\n    def render\n      raise NotImplementedError\n    end\n\n    protected\n\n    def extract_details(options)\n      @lookup_context.registered_details.each_with_object({}) do |key, details|\n        value = options[key]\n\n        details[key] = Array(value) if value\n      end\n    end\n\n    def instrument(name, **options)\n      options[:identifier] ||= (@template && @template.identifier) || @path\n\n      ActiveSupport::Notifications.instrument(\"render_#{name}.action_view\", options) do |payload|\n        yield payload\n      end\n    end\n\n    def prepend_formats(formats)\n      formats = Array(formats)\n      return if formats.empty? || @lookup_context.html_fallback_for_js\n\n      @lookup_context.formats = formats | @lookup_context.formats\n    end\n  end\nend\n\n\n\u3053\u3053\u3067 delegate\u3068\u3044\u3046\u4e88\u7d04\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u306d\u3002\n\u3053\u308c\u306f\u3001delegete\u3092\u5b9f\u884c\u3057\u305f\u6642\u70b9\u3067\u305d\u306e\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306a\u3069\u3092\u3001to\u3067\u30b7\u30f3\u30dc\u30eb\u3067\u6307\u5b9a\u3057\u305f\u5148\u306e\u5909\u6570\u306b\u5b9f\u88c5\u3092\u4efb\u305b\u3066\u3001\u3068\u308a\u3042\u3048\u305a\u305d\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089delegate\u306b\u6307\u5b9a\u3055\u308c\u305f\u540d\u524d\u3067\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u6642\u306b\u3001to\u3067\u6307\u5b9a\u3055\u308c\u305f\u5909\u6570\u5185\u306b\u683c\u7d0d\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c,delegate\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u305f\u5834\u5408\u3001delegete\u5143\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6e21\u3059\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nclass A\n  def self.test\n    \"Hello\"\n  end\nend\n\nclass B\n  delegate :test,to: :A\nend\n\nB.new.test => \"Hello\"\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306bB\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089A\u30af\u30e9\u30b9\u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3079\u305f\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u5f53\u7136\u3053\u306e\u6642,A\u30af\u30e9\u30b9\u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u306btest\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u5b9f\u884c\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u79c1\u306fruby\u3067\u306f\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3001\u62bd\u8c61\u5316\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3053\u306e\u30b3\u30fc\u30c9\u304b\u3089\u5b66\u3073\u307e\u3057\u305f\u3002\n\u6b21\u306b\u3001yield\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002yield\u306fpython\u3067\u3082C#\u3067\u3082\u3088\u304f\u4f7f\u3046\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u9806\u756a\u306b\u5024\u3092\u8fd4\u3059\u306e\u3060\u308d\u3046\u3068\u601d\u3044\u304d\u3084\u3001ruby\u306f\u4ed5\u69d8\u304c\u3061\u3087\u3063\u3068\u9055\u3046\u3093\u3067\u3059\u3088\u306d\u3002\nruby\u306eyield\u306f\u95a2\u6570\u81ea\u4f53\u306e\u623b\u308a\u5024\u3068\u3057\u3066\u5024\u3092\u30a4\u30c6\u30ec\u30fc\u30c8\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001yield\u3057\u305f\u5909\u6570\u3092\u3001\u6e21\u3055\u308c\u305f\u30d6\u30ed\u30c3\u30af\u306b\u30a4\u30f3\u30b8\u30a7\u30af\u30c8\u3057\u3066\u3001\u30d6\u30ed\u30c3\u30af\u306e\u547c\u3073\u51fa\u3057\u81ea\u4f53\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u5206\u304b\u308a\u3084\u3059\u3044\u4f8b\u3067\u3044\u3046\u3068\npython\ndef my_iter():\n    yield 1\n    yield 2\n    yield 3\n\nit = my_iter()\nfor x in it:\n    print(x)\n\n\nRuby\ndef my_iter\n  yield 1\n  yield 2\n  yield 3 \nend\n\nmy_iter{|it|\n  puts it\n}\n\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306bpython\u306eyield\u306f\u5024\u3092\u9806\u756a\u306b\u8fd4\u3057\u3066\u3044\u304f\u306e\u306b\u5bfe\u3057\u3001ruby\u306eyield\u306f\u547c\u3070\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306byield\u3057\u305f\u5024\u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3001\u4ee5\u4e0b\u306f\u5168\u304f\u7121\u610f\u5473\u306a\u30b3\u30fc\u30c9\u3067\u3059\u304c\ndef for_each(list)\n  list.each do|n|\n    yield n\n  end\nend\n\nfor_each([1,2,3]){|it|\n  puts it\n}\n\n\u3068\u3059\u308b\u3068\u3001\u30e1\u30e2\u30ea\u306e\u52d5\u304d\u307e\u3067\u8abf\u3079\u305f\u3053\u3068\u306a\u3044\u306e\u3067\u3001\u90e8\u51e6\u7406\u307e\u3067\u304c\u4e00\u7dd2\u304b\u3069\u3046\u304b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u66f8\u304d\u65b9\u304c\u9055\u3046\u3060\u3051\u3067\u672c\u8cea\u7684\u306b\u306f\u540c\u69d8\u306a\u51e6\u7406\u3092\u5b9f\u88c5\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002(\u305f\u3060ruby\u306eyield\u306f\u4e2d\u65ad\u3068\u518d\u958b\u51e6\u7406\u304c\u3067\u304d\u306a\u3044\uff1f\u77e5\u3063\u3066\u308b\u65b9\u3044\u3089\u3063\u3057\u3083\u308c\u3070\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002)\nrails\u3067\u306fpayload\u306e\u5206\u3060\u3051\u5916\u90e8\u306b\u51e6\u7406\u3092\u6295\u3052\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u3057\u3066\u304a\u305d\u3089\u304f\u3001\u7686\u3055\u3093\u304crails\u958b\u767a\u3092\u3057\u3066\u3044\u3066\u4e00\u756a\u6c17\u306b\u306a\u308b\u306e\u304c\u3001option\u306f\u3069\u308c\u3060\u3051\u3042\u308b\u306e\u304b\u3001\u3069\u3046\u3044\u3046\u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u3092\u7a81\u3063\u8fbc\u3081\u308b\u304b\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u4f8b\u3048\u3070partial_renderer.rb\u3092\u4f8b\u306b\u3057\u3066\u898b\u3066\u307f\u307e\u3059\u3002\npartial_renderer.rb\nrequire \"concurrent/map\"\nrequire \"action_view/renderer/partial_renderer/collection_caching\"\n\nmodule ActionView\n  class PartialIteration\n    # The number of iterations that will be done by the partial.\n    attr_reader :size\n\n    # The current iteration of the partial.\n    attr_reader :index\n\n    def initialize(size)\n      @size  = size\n      @index = 0\n    end\n\n    # Check if this is the first iteration of the partial.\n    def first?\n      index == 0\n    end\n\n    # Check if this is the last iteration of the partial.\n    def last?\n      index == size - 1\n    end\n\n    def iterate! # :nodoc:\n      @index += 1\n    end\n  end\n\n  # = Action View Partials\n  #\n  # There's also a convenience method for rendering sub templates within the current controller that depends on a\n  # single object (we call this kind of sub templates for partials). It relies on the fact that partials should\n  # follow the naming convention of being prefixed with an underscore -- as to separate them from regular\n  # templates that could be rendered on their own.\n  #\n  # In a template for Advertiser#account:\n  #\n  #  <%= render partial: \"account\" %>\n  #\n  # This would render \"advertiser/_account.html.erb\".\n  #\n  # In another template for Advertiser#buy, we could have:\n  #\n  #   <%= render partial: \"account\", locals: { account: @buyer } %>\n  #\n  #   <% @advertisements.each do |ad| %>\n  #     <%= render partial: \"ad\", locals: { ad: ad } %>\n  #   <% end %>\n  #\n  # This would first render \"advertiser/_account.html.erb\" with @buyer passed in as the local variable +account+, then\n  # render \"advertiser/_ad.html.erb\" and pass the local variable +ad+ to the template for display.\n  #\n  # == The :as and :object options\n  #\n  # By default <tt>ActionView::PartialRenderer</tt> doesn't have any local variables.\n  # The <tt>:object</tt> option can be used to pass an object to the partial. For instance:\n  #\n  #   <%= render partial: \"account\", object: @buyer %>\n  #\n  # would provide the <tt>@buyer</tt> object to the partial, available under the local variable +account+ and is\n  # equivalent to:\n  #\n  #   <%= render partial: \"account\", locals: { account: @buyer } %>\n  #\n  # With the <tt>:as</tt> option we can specify a different name for said local variable. For example, if we\n  # wanted it to be +user+ instead of +account+ we'd do:\n  #\n  #   <%= render partial: \"account\", object: @buyer, as: 'user' %>\n  #\n  # This is equivalent to\n  #\n  #   <%= render partial: \"account\", locals: { user: @buyer } %>\n  #\n  # == \\Rendering a collection of partials\n  #\n  # The example of partial use describes a familiar pattern where a template needs to iterate over an array and\n  # render a sub template for each of the elements. This pattern has been implemented as a single method that\n  # accepts an array and renders a partial by the same name as the elements contained within. So the three-lined\n  # example in \"Using partials\" can be rewritten with a single line:\n  #\n  #   <%= render partial: \"ad\", collection: @advertisements %>\n  #\n  # This will render \"advertiser/_ad.html.erb\" and pass the local variable +ad+ to the template for display. An\n  # iteration object will automatically be made available to the template with a name of the form\n  # +partial_name_iteration+. The iteration object has knowledge about which index the current object has in\n  # the collection and the total size of the collection. The iteration object also has two convenience methods,\n  # +first?+ and +last?+. In the case of the example above, the template would be fed +ad_iteration+.\n  # For backwards compatibility the +partial_name_counter+ is still present and is mapped to the iteration's\n  # +index+ method.\n  #\n  # The <tt>:as</tt> option may be used when rendering partials.\n  #\n  # You can specify a partial to be rendered between elements via the <tt>:spacer_template</tt> option.\n  # The following example will render <tt>advertiser/_ad_divider.html.erb</tt> between each ad partial:\n  #\n  #   <%= render partial: \"ad\", collection: @advertisements, spacer_template: \"ad_divider\" %>\n  #\n  # If the given <tt>:collection</tt> is +nil+ or empty, <tt>render</tt> will return nil. This will allow you\n  # to specify a text which will displayed instead by using this form:\n  #\n  #   <%= render(partial: \"ad\", collection: @advertisements) || \"There's no ad to be displayed\" %>\n  #\n  # NOTE: Due to backwards compatibility concerns, the collection can't be one of hashes. Normally you'd also\n  # just keep domain objects, like Active Records, in there.\n  #\n  # == \\Rendering shared partials\n  #\n  # Two controllers can share a set of partials and render them like this:\n  #\n  #   <%= render partial: \"advertisement/ad\", locals: { ad: @advertisement } %>\n  #\n  # This will render the partial \"advertisement/_ad.html.erb\" regardless of which controller this is being called from.\n  #\n  # == \\Rendering objects that respond to `to_partial_path`\n  #\n  # Instead of explicitly naming the location of a partial, you can also let PartialRenderer do the work\n  # and pick the proper path by checking `to_partial_path` method.\n  #\n  #  # @account.to_partial_path returns 'accounts/account', so it can be used to replace:\n  #  # <%= render partial: \"accounts/account\", locals: { account: @account} %>\n  #  <%= render partial: @account %>\n  #\n  #  # @posts is an array of Post instances, so every post record returns 'posts/post' on `to_partial_path`,\n  #  # that's why we can replace:\n  #  # <%= render partial: \"posts/post\", collection: @posts %>\n  #  <%= render partial: @posts %>\n  #\n  # == \\Rendering the default case\n  #\n  # If you're not going to be using any of the options like collections or layouts, you can also use the short-hand\n  # defaults of render to render partials. Examples:\n  #\n  #  # Instead of <%= render partial: \"account\" %>\n  #  <%= render \"account\" %>\n  #\n  #  # Instead of <%= render partial: \"account\", locals: { account: @buyer } %>\n  #  <%= render \"account\", account: @buyer %>\n  #\n  #  # @account.to_partial_path returns 'accounts/account', so it can be used to replace:\n  #  # <%= render partial: \"accounts/account\", locals: { account: @account} %>\n  #  <%= render @account %>\n  #\n  #  # @posts is an array of Post instances, so every post record returns 'posts/post' on `to_partial_path`,\n  #  # that's why we can replace:\n  #  # <%= render partial: \"posts/post\", collection: @posts %>\n  #  <%= render @posts %>\n  #\n  # == \\Rendering partials with layouts\n  #\n  # Partials can have their own layouts applied to them. These layouts are different than the ones that are\n  # specified globally for the entire action, but they work in a similar fashion. Imagine a list with two types\n  # of users:\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   Here's the administrator:\n  #   <%= render partial: \"user\", layout: \"administrator\", locals: { user: administrator } %>\n  #\n  #   Here's the editor:\n  #   <%= render partial: \"user\", layout: \"editor\", locals: { user: editor } %>\n  #\n  #   <%# app/views/users/_user.html.erb %>\n  #   Name: <%= user.name %>\n  #\n  #   <%# app/views/users/_administrator.html.erb %>\n  #   <div id=\"administrator\">\n  #     Budget: $<%= user.budget %>\n  #     <%= yield %>\n  #   </div>\n  #\n  #   <%# app/views/users/_editor.html.erb %>\n  #   <div id=\"editor\">\n  #     Deadline: <%= user.deadline %>\n  #     <%= yield %>\n  #   </div>\n  #\n  # ...this will return:\n  #\n  #   Here's the administrator:\n  #   <div id=\"administrator\">\n  #     Budget: $<%= user.budget %>\n  #     Name: <%= user.name %>\n  #   </div>\n  #\n  #   Here's the editor:\n  #   <div id=\"editor\">\n  #     Deadline: <%= user.deadline %>\n  #     Name: <%= user.name %>\n  #   </div>\n  #\n  # If a collection is given, the layout will be rendered once for each item in\n  # the collection. For example, these two snippets have the same output:\n  #\n  #   <%# app/views/users/_user.html.erb %>\n  #   Name: <%= user.name %>\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   <%# This does not use layouts %>\n  #   <ul>\n  #     <% users.each do |user| -%>\n  #       <li>\n  #         <%= render partial: \"user\", locals: { user: user } %>\n  #       </li>\n  #     <% end -%>\n  #   </ul>\n  #\n  #   <%# app/views/users/_li_layout.html.erb %>\n  #   <li>\n  #     <%= yield %>\n  #   </li>\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   <ul>\n  #     <%= render partial: \"user\", layout: \"li_layout\", collection: users %>\n  #   </ul>\n  #\n  # Given two users whose names are Alice and Bob, these snippets return:\n  #\n  #   <ul>\n  #     <li>\n  #       Name: Alice\n  #     </li>\n  #     <li>\n  #       Name: Bob\n  #     </li>\n  #   </ul>\n  #\n  # The current object being rendered, as well as the object_counter, will be\n  # available as local variables inside the layout template under the same names\n  # as available in the partial.\n  #\n  # You can also apply a layout to a block within any template:\n  #\n  #   <%# app/views/users/_chief.html.erb %>\n  #   <%= render(layout: \"administrator\", locals: { user: chief }) do %>\n  #     Title: <%= chief.title %>\n  #   <% end %>\n  #\n  # ...this will return:\n  #\n  #   <div id=\"administrator\">\n  #     Budget: $<%= user.budget %>\n  #     Title: <%= chief.name %>\n  #   </div>\n  #\n  # As you can see, the <tt>:locals</tt> hash is shared between both the partial and its layout.\n  #\n  # If you pass arguments to \"yield\" then this will be passed to the block. One way to use this is to pass\n  # an array to layout and treat it as an enumerable.\n  #\n  #   <%# app/views/users/_user.html.erb %>\n  #   <div class=\"user\">\n  #     Budget: $<%= user.budget %>\n  #     <%= yield user %>\n  #   </div>\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   <%= render layout: @users do |user| %>\n  #     Title: <%= user.title %>\n  #   <% end %>\n  #\n  # This will render the layout for each user and yield to the block, passing the user, each time.\n  #\n  # You can also yield multiple times in one layout and use block arguments to differentiate the sections.\n  #\n  #   <%# app/views/users/_user.html.erb %>\n  #   <div class=\"user\">\n  #     <%= yield user, :header %>\n  #     Budget: $<%= user.budget %>\n  #     <%= yield user, :footer %>\n  #   </div>\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   <%= render layout: @users do |user, section| %>\n  #     <%- case section when :header -%>\n  #       Title: <%= user.title %>\n  #     <%- when :footer -%>\n  #       Deadline: <%= user.deadline %>\n  #     <%- end -%>\n  #   <% end %>\n  class PartialRenderer < AbstractRenderer\n    include CollectionCaching\n\n    PREFIXED_PARTIAL_NAMES = Concurrent::Map.new do |h, k|\n      h[k] = Concurrent::Map.new\n    end\n\n    def initialize(*)\n      super\n      @context_prefix = @lookup_context.prefixes.first\n    end\n\n    def render(context, options, block)\n      setup(context, options, block)\n      @template = find_partial\n\n      @lookup_context.rendered_format ||= begin\n        if @template && @template.formats.present?\n          @template.formats.first\n        else\n          formats.first\n        end\n      end\n\n      if @collection\n        render_collection\n      else\n        render_partial\n      end\n    end\n\n    private\n\n      def render_collection\n        instrument(:collection, count: @collection.size) do |payload|\n          return nil if @collection.blank?\n\n          if @options.key?(:spacer_template)\n            spacer = find_template(@options[:spacer_template], @locals.keys).render(@view, @locals)\n          end\n\n          cache_collection_render(payload) do\n            @template ? collection_with_template : collection_without_template\n          end.join(spacer).html_safe\n        end\n      end\n\n      def render_partial\n        instrument(:partial) do |payload|\n          view, locals, block = @view, @locals, @block\n          object, as = @object, @variable\n\n          if !block && (layout = @options[:layout])\n            layout = find_template(layout.to_s, @template_keys)\n          end\n\n          object = locals[as] if object.nil? # Respect object when object is false\n          locals[as] = object if @has_object\n\n          content = @template.render(view, locals) do |*name|\n            view._layout_for(*name, &block)\n          end\n\n          content = layout.render(view, locals) { content } if layout\n          payload[:cache_hit] = view.cache_hit\n          content\n        end\n      end\n\n      # Sets up instance variables needed for rendering a partial. This method\n      # finds the options and details and extracts them. The method also contains\n      # logic that handles the type of object passed in as the partial.\n      #\n      # If +options[:partial]+ is a string, then the +@path+ instance variable is\n      # set to that string. Otherwise, the +options[:partial]+ object must\n      # respond to +to_partial_path+ in order to setup the path.\n      def setup(context, options, block)\n        @view = context\n        @options = options\n        @block   = block\n\n        @locals  = options[:locals] || {}\n        @details = extract_details(options)\n\n        prepend_formats(options[:formats])\n\n        partial = options[:partial]\n\n        if String === partial\n          @has_object = options.key?(:object)\n          @object     = options[:object]\n          @collection = collection_from_options\n          @path       = partial\n        else\n          @has_object = true\n          @object = partial\n          @collection = collection_from_object || collection_from_options\n\n          if @collection\n            paths = @collection_data = @collection.map { |o| partial_path(o) }\n            @path = paths.uniq.one? ? paths.first : nil\n          else\n            @path = partial_path\n          end\n        end\n\n        if as = options[:as]\n          raise_invalid_option_as(as) unless /\\A[a-z_]\\w*\\z/.match?(as.to_s)\n          as = as.to_sym\n        end\n\n        if @path\n          @variable, @variable_counter, @variable_iteration = retrieve_variable(@path, as)\n          @template_keys = retrieve_template_keys\n        else\n          paths.map! { |path| retrieve_variable(path, as).unshift(path) }\n        end\n\n        self\n      end\n\n      def collection_from_options\n        if @options.key?(:collection)\n          collection = @options[:collection]\n          collection ? collection.to_a : []\n        end\n      end\n\n      def collection_from_object\n        @object.to_ary if @object.respond_to?(:to_ary)\n      end\n\n      def find_partial\n        find_template(@path, @template_keys) if @path\n      end\n\n      def find_template(path, locals)\n        prefixes = path.include?(?/) ? [] : @lookup_context.prefixes\n        @lookup_context.find_template(path, prefixes, true, locals, @details)\n      end\n\n      def collection_with_template\n        view, locals, template = @view, @locals, @template\n        as, counter, iteration = @variable, @variable_counter, @variable_iteration\n\n        if layout = @options[:layout]\n          layout = find_template(layout, @template_keys)\n        end\n\n        partial_iteration = PartialIteration.new(@collection.size)\n        locals[iteration] = partial_iteration\n\n        @collection.map do |object|\n          locals[as]        = object\n          locals[counter]   = partial_iteration.index\n\n          content = template.render(view, locals)\n          content = layout.render(view, locals) { content } if layout\n          partial_iteration.iterate!\n          content\n        end\n      end\n\n      def collection_without_template\n        view, locals, collection_data = @view, @locals, @collection_data\n        cache = {}\n        keys  = @locals.keys\n\n        partial_iteration = PartialIteration.new(@collection.size)\n\n        @collection.map do |object|\n          index = partial_iteration.index\n          path, as, counter, iteration = collection_data[index]\n\n          locals[as]        = object\n          locals[counter]   = index\n          locals[iteration] = partial_iteration\n\n          template = (cache[path] ||= find_template(path, keys + [as, counter]))\n          content = template.render(view, locals)\n          partial_iteration.iterate!\n          content\n        end\n      end\n\n      # Obtains the path to where the object's partial is located. If the object\n      # responds to +to_partial_path+, then +to_partial_path+ will be called and\n      # will provide the path. If the object does not respond to +to_partial_path+,\n      # then an +ArgumentError+ is raised.\n      #\n      # If +prefix_partial_path_with_controller_namespace+ is true, then this\n      # method will prefix the partial paths with a namespace.\n      def partial_path(object = @object)\n        object = object.to_model if object.respond_to?(:to_model)\n\n        path = if object.respond_to?(:to_partial_path)\n          object.to_partial_path\n        else\n          raise ArgumentError.new(\"'#{object.inspect}' is not an ActiveModel-compatible object. It must implement :to_partial_path.\")\n        end\n\n        if @view.prefix_partial_path_with_controller_namespace\n          prefixed_partial_names[path] ||= merge_prefix_into_object_path(@context_prefix, path.dup)\n        else\n          path\n        end\n      end\n\n      def prefixed_partial_names\n        @prefixed_partial_names ||= PREFIXED_PARTIAL_NAMES[@context_prefix]\n      end\n\n      def merge_prefix_into_object_path(prefix, object_path)\n        if prefix.include?(?/) && object_path.include?(?/)\n          prefixes = []\n          prefix_array = File.dirname(prefix).split(\"/\")\n          object_path_array = object_path.split(\"/\")[0..-3] # skip model dir & partial\n\n          prefix_array.each_with_index do |dir, index|\n            break if dir == object_path_array[index]\n            prefixes << dir\n          end\n\n          (prefixes << object_path).join(\"/\")\n        else\n          object_path\n        end\n      end\n\n      def retrieve_template_keys\n        keys = @locals.keys\n        keys << @variable if @has_object || @collection\n        if @collection\n          keys << @variable_counter\n          keys << @variable_iteration\n        end\n        keys\n      end\n\n      def retrieve_variable(path, as)\n        variable = as || begin\n          base = path[-1] == \"/\".freeze ? \"\".freeze : File.basename(path)\n          raise_invalid_identifier(path) unless base =~ /\\A_?(.*?)(?:\\.\\w+)*\\z/\n          $1.to_sym\n        end\n        if @collection\n          variable_counter = :\"#{variable}_counter\"\n          variable_iteration = :\"#{variable}_iteration\"\n        end\n        [variable, variable_counter, variable_iteration]\n      end\n\n      IDENTIFIER_ERROR_MESSAGE = \"The partial name (%s) is not a valid Ruby identifier; \" +\n                                 \"make sure your partial name starts with underscore.\"\n\n      OPTION_AS_ERROR_MESSAGE  = \"The value (%s) of the option `as` is not a valid Ruby identifier; \" +\n                                 \"make sure it starts with lowercase letter, \" +\n                                 \"and is followed by any combination of letters, numbers and underscores.\"\n\n      def raise_invalid_identifier(path)\n        raise ArgumentError.new(IDENTIFIER_ERROR_MESSAGE % (path))\n      end\n\n      def raise_invalid_option_as(as)\n        raise ArgumentError.new(OPTION_AS_ERROR_MESSAGE % (as))\n      end\n  end\nend\n\n\u5b9f\u306f\u3001\u30b3\u30df\u30c3\u30bf\u30fc\u306e\u65b9\u306f\u3059\u3054\u304f\u4e01\u5be7\u306b\u5b9f\u88c5\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u6b8b\u3057\u3066\u304f\u308c\u3066\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u3053\u3053\u3067\u77e5\u3089\u306a\u304b\u3063\u305f\u3053\u3068\u304c\u89e3\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u3053\u3053\u3067options\u3067\u691c\u7d22\u304b\u3051\u3066\u307f\u308b\u3068\u3001partial\u3060\u3051\u3067\u3082\u30aa\u30d7\u30b7\u30e7\u30f3\u305f\u304f\u3055\u3093\u3042\u308b\u3053\u3068\u304c\u89e3\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002locale\u3068\u304b\u306f\u3088\u304f\u4f7f\u3044\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u99b4\u67d3\u307f\u306e\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u306d\u3002delegate\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u3082\u3061\u3083\u3093\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nmaster\u30d6\u30e9\u30f3\u30c1\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308bTagHelper\u306a\u308b\u30d8\u30eb\u30d1\u30fc\nRails\u306e\u516c\u5f0f\u30ea\u30ea\u30fc\u30b9\u306e\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u306f5.0.0(\u3068\u601d\u3044\u304d\u3084\u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u30825.0.1rc1,5.0.1rc2\u304c\u3064\u3044\u4e09\u65e5\u307b\u3069\u524d\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002)\u3067\u3059\u304c\u3001\u6700\u65b0\u7248\u306emaster\u30d6\u30e9\u30f3\u30c1\u306b\u306f\u30bf\u30b0\u30d8\u30eb\u30d1\u30fc\u306a\u308b\u30d8\u30eb\u30d1\u30fc\u306b\u30c1\u30a7\u30fc\u30f3\u30e1\u30bd\u30c3\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\ntag_helper.rb\n\u3053\u308c\u306f\u3001\u4f8b\u3048\u3070\u3001\n<%= tag.h1 \u30bf\u30a4\u30c8\u30eb%>\n<%# =><h1>\u30bf\u30a4\u30c8\u30eb</h1>\u3000%>\n\n\u306e\u3088\u3046\u306bchain\u3067\u30bf\u30b0\u3092\u8ffd\u52a0\u3057\u3066\u3044\u3051\u308b\u6a5f\u80fd\u306e\u3088\u3046\u3067\u3059\u304c\u3001\u4fbf\u5229\u305d\u3046\u306a\u306e\u3067\u65e9\u304f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u6b32\u3057\u3044\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30cd\u30c3\u30c8\u3067\u60c5\u5831\u63a2\u305b\u3070\u65e9\u304f\u89e3\u6c7a\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306e\u77e5\u898b\u3084\u305d\u3053\u3067\u4f7f\u308f\u308c\u3066\u308b\u30c6\u30af\u30cb\u30c3\u30af\u304c\u898b\u308c\u3066\u3068\u3066\u3082\u3044\u3044\u3067\u3059\u3088\u3002\u307e\u305f\u3001\u96e3\u3057\u305d\u3046\u306a\u5b9f\u88c5\u306b\u898b\u3048\u3066\u4ee5\u5916\u3068\u7c21\u5358\u3060\u3063\u305f\u308a\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u306f\u3001\u30b3\u30fc\u30c9\u304c\u7dba\u9e97\u306b\u898b\u3048\u3066\u3050\u3061\u3083\u3050\u3061\u3083\u3060\u3063\u305f\u308a\u3068\u3044\u308d\u3093\u306a\u767a\u898b\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u6280\u8853\u529b\u306e\u4f38\u3073\u60a9\u307f\u3092\u611f\u3058\u305f\u3089\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u3053\u306e\u51e6\u7406\u3044\u3044\u306a\u3068\u601d\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u771f\u4f3c\u3092\u3057\u3066\u307f\u308b\u306e\u304c\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3068\u3044\u3046\u304a\u8a71\u3067\u3057\u305f\u3002\n#\u306a\u305c\u3059\u308b\u306e\u304b\n\n\u4f7f\u3063\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3093\u3067\u3082\u51e6\u7406\u5185\u5bb9\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u308a\u3001\u306a\u3093\u304b\u602a\u3057\u3044\u3068\u601d\u3063\u305f\u5834\u5408\u3001\u3069\u3053\u306b\u3042\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u60c5\u5831\u3092\u63a2\u3059\u3088\u308a\u3001\u78ba\u5b9f\u306b\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\u3092\u898b\u305f\u65b9\u304c\u65e9\u3044(\u4e00\u822c\u7684\u306a\u8a71\u3001\u306a\u304aWET\u306a\u30b3\u30fc\u30c9\u306f\u9664\u304d\u307e\u3059)\u4e8b\u304c\u591a\u3005\u6709\u308a\u307e\u3059\u3002\n\u7279\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3084\u3001\u30e1\u30bf\u30e1\u30bf\u3057\u3066\u308b\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u306e\u306f\u975e\u5e38\u306b\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\n#Action View\n\nRails\u3067Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u306a\u3089\u3001\u307b\u307c100%\u4f7f\u3046\u3067\u3042\u308d\u3046[render\u30e1\u30bd\u30c3\u30c9\u306e\u30b3\u30fc\u30c9](https://github.com/rails/rails/blob/5-0-1/actionview/lib/action_view/renderer/renderer.rb)\u6839\u5e79\u3068\u306a\u308b\u51e6\u7406\u5206\u5c90\u306f\u5b9f\u306f\u3053\u3093\u306a\u306b\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u5b9f\u969b\u306erender\u30ed\u30b8\u30c3\u30af\u306f\u3001\u4ed6\u306e\u30af\u30e9\u30b9\u306b\u96c6\u7d04\u3057\u3066\u3001\u81ea\u7531\u306b\u4ed8\u3051\u66ff\u3048\u53ef\u80fd\u3068\u306a\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306brender\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306fabstruct\u30d1\u30bf\u30fc\u30f3\u3067\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n```rb\n\n#abstract_renderrer.rb\n\n\nmodule ActionView\n  # This class defines the interface for a renderer. Each class that\n  # subclasses +AbstractRenderer+ is used by the base +Renderer+ class to\n  # render a specific type of object.\n  #\n  # The base +Renderer+ class uses its +render+ method to delegate to the\n  # renderers. These currently consist of\n  #\n  #   PartialRenderer - Used for rendering partials\n  #   TemplateRenderer - Used for rendering other types of templates\n  #   StreamingTemplateRenderer - Used for streaming\n  #\n  # Whenever the +render+ method is called on the base +Renderer+ class, a new\n  # renderer object of the correct type is created, and the +render+ method on\n  # that new object is called in turn. This abstracts the setup and rendering\n  # into a separate classes for partials and templates.\n  class AbstractRenderer #:nodoc:\n    delegate :find_template, :find_file, :template_exists?, :any_templates?, :with_fallbacks, :with_layout_format, :formats, :to => :@lookup_context\n\n    def initialize(lookup_context)\n      @lookup_context = lookup_context\n    end\n\n    def render\n      raise NotImplementedError\n    end\n\n    protected\n\n    def extract_details(options)\n      @lookup_context.registered_details.each_with_object({}) do |key, details|\n        value = options[key]\n\n        details[key] = Array(value) if value\n      end\n    end\n\n    def instrument(name, **options)\n      options[:identifier] ||= (@template && @template.identifier) || @path\n\n      ActiveSupport::Notifications.instrument(\"render_#{name}.action_view\", options) do |payload|\n        yield payload\n      end\n    end\n\n    def prepend_formats(formats)\n      formats = Array(formats)\n      return if formats.empty? || @lookup_context.html_fallback_for_js\n\n      @lookup_context.formats = formats | @lookup_context.formats\n    end\n  end\nend\n\n```\n\n\u3053\u3053\u3067 delegate\u3068\u3044\u3046\u4e88\u7d04\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u306d\u3002\n\n\u3053\u308c\u306f\u3001delegete\u3092\u5b9f\u884c\u3057\u305f\u6642\u70b9\u3067\u305d\u306e\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306a\u3069\u3092\u3001to\u3067\u30b7\u30f3\u30dc\u30eb\u3067\u6307\u5b9a\u3057\u305f\u5148\u306e\u5909\u6570\u306b\u5b9f\u88c5\u3092\u4efb\u305b\u3066\u3001<b>\u3068\u308a\u3042\u3048\u305a\u305d\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089delegate\u306b\u6307\u5b9a\u3055\u308c\u305f\u540d\u524d\u3067\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059</b>\u3002\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u6642\u306b\u3001to\u3067\u6307\u5b9a\u3055\u308c\u305f\u5909\u6570\u5185\u306b\u683c\u7d0d\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\b,delegate\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u305f\u5834\u5408\u3001delegete\u5143\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6e21\u3059\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rb\nclass A\n  def self.test\n    \"Hello\"\n  end\nend\n\nclass B\n  delegate :test,to: :A\nend\n\nB.new.test => \"Hello\"\n```\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306bB\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089A\u30af\u30e9\u30b9\u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3079\u305f\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u5f53\u7136\u3053\u306e\u6642,A\u30af\u30e9\u30b9\u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u306btest\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u5b9f\u884c\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u79c1\u306fruby\u3067\u306f\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3001\u62bd\u8c61\u5316\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3053\u306e\u30b3\u30fc\u30c9\u304b\u3089\u5b66\u3073\u307e\u3057\u305f\u3002\n\n\u6b21\u306b\u3001yield\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002yield\u306fpython\u3067\u3082C#\u3067\u3082\u3088\u304f\u4f7f\u3046\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u9806\u756a\u306b\u5024\u3092\u8fd4\u3059\u306e\u3060\u308d\u3046\u3068\u601d\u3044\u304d\u3084\u3001ruby\u306f\u4ed5\u69d8\u304c\u3061\u3087\u3063\u3068\u9055\u3046\u3093\u3067\u3059\u3088\u306d\u3002\n\nruby\u306eyield\u306f\u95a2\u6570\u81ea\u4f53\u306e\u623b\u308a\u5024\u3068\u3057\u3066\u5024\u3092\u30a4\u30c6\u30ec\u30fc\u30c8\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001yield\u3057\u305f\u5909\u6570\u3092\u3001\u6e21\u3055\u308c\u305f\u30d6\u30ed\u30c3\u30af\u306b\u30a4\u30f3\u30b8\u30a7\u30af\u30c8\u3057\u3066\u3001\u30d6\u30ed\u30c3\u30af\u306e\u547c\u3073\u51fa\u3057\u81ea\u4f53\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u5206\u304b\u308a\u3084\u3059\u3044\u4f8b\u3067\u3044\u3046\u3068\n\npython\n\n```py3\ndef my_iter():\n    yield 1\n    yield 2\n    yield 3\n \nit = my_iter()\nfor x in it:\n    print(x)\n\n```\n\nRuby\n\n```rb\ndef my_iter\n  yield 1\n  yield 2\n  yield 3 \nend\n\nmy_iter{|it|\n  puts it\n}\n\n```\n\u4ee5\u4e0a\u306e\u3088\u3046\u306bpython\u306eyield\u306f\u5024\u3092\u9806\u756a\u306b\u8fd4\u3057\u3066\u3044\u304f\u306e\u306b\u5bfe\u3057\u3001ruby\u306eyield\u306f\u547c\u3070\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306byield\u3057\u305f\u5024\u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3001\u4ee5\u4e0b\u306f\u5168\u304f\u7121\u610f\u5473\u306a\u30b3\u30fc\u30c9\u3067\u3059\u304c\n\n```rb\ndef for_each(list)\n  list.each do|n|\n    yield n\n  end\nend\n\nfor_each([1,2,3]){|it|\n  puts it\n}\n```\n\n\u3068\u3059\u308b\u3068\u3001\u30e1\u30e2\u30ea\u306e\u52d5\u304d\u307e\u3067\u8abf\u3079\u305f\u3053\u3068\u306a\u3044\u306e\u3067\u3001\u90e8\u51e6\u7406\u307e\u3067\u304c\u4e00\u7dd2\u304b\u3069\u3046\u304b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u66f8\u304d\u65b9\u304c\u9055\u3046\u3060\u3051\u3067\u672c\u8cea\u7684\u306b\u306f\u540c\u69d8\u306a\u51e6\u7406\u3092\u5b9f\u88c5\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002(\u305f\u3060ruby\u306eyield\u306f\u4e2d\u65ad\u3068\u518d\u958b\u51e6\u7406\u304c\u3067\u304d\u306a\u3044\uff1f\u77e5\u3063\u3066\u308b\u65b9\u3044\u3089\u3063\u3057\u3083\u308c\u3070\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002)\n\nrails\u3067\u306fpayload\u306e\u5206\u3060\u3051\u5916\u90e8\u306b\u51e6\u7406\u3092\u6295\u3052\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u305d\u3057\u3066\u304a\u305d\u3089\u304f\u3001\u7686\u3055\u3093\u304crails\u958b\u767a\u3092\u3057\u3066\u3044\u3066\u4e00\u756a\u6c17\u306b\u306a\u308b\u306e\u304c\u3001option\u306f\u3069\u308c\u3060\u3051\u3042\u308b\u306e\u304b\u3001\u3069\u3046\u3044\u3046\u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u3092\u7a81\u3063\u8fbc\u3081\u308b\u304b\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u4f8b\u3048\u3070partial_renderer.rb\u3092\u4f8b\u306b\u3057\u3066\u898b\u3066\u307f\u307e\u3059\u3002\n\n[partial_renderer.rb](https://github.com/rails/rails/blob/master/actionview/lib/action_view/renderer/partial_renderer.rb)\n\n```rb\nrequire \"concurrent/map\"\nrequire \"action_view/renderer/partial_renderer/collection_caching\"\n\nmodule ActionView\n  class PartialIteration\n    # The number of iterations that will be done by the partial.\n    attr_reader :size\n\n    # The current iteration of the partial.\n    attr_reader :index\n\n    def initialize(size)\n      @size  = size\n      @index = 0\n    end\n\n    # Check if this is the first iteration of the partial.\n    def first?\n      index == 0\n    end\n\n    # Check if this is the last iteration of the partial.\n    def last?\n      index == size - 1\n    end\n\n    def iterate! # :nodoc:\n      @index += 1\n    end\n  end\n\n  # = Action View Partials\n  #\n  # There's also a convenience method for rendering sub templates within the current controller that depends on a\n  # single object (we call this kind of sub templates for partials). It relies on the fact that partials should\n  # follow the naming convention of being prefixed with an underscore -- as to separate them from regular\n  # templates that could be rendered on their own.\n  #\n  # In a template for Advertiser#account:\n  #\n  #  <%= render partial: \"account\" %>\n  #\n  # This would render \"advertiser/_account.html.erb\".\n  #\n  # In another template for Advertiser#buy, we could have:\n  #\n  #   <%= render partial: \"account\", locals: { account: @buyer } %>\n  #\n  #   <% @advertisements.each do |ad| %>\n  #     <%= render partial: \"ad\", locals: { ad: ad } %>\n  #   <% end %>\n  #\n  # This would first render \"advertiser/_account.html.erb\" with @buyer passed in as the local variable +account+, then\n  # render \"advertiser/_ad.html.erb\" and pass the local variable +ad+ to the template for display.\n  #\n  # == The :as and :object options\n  #\n  # By default <tt>ActionView::PartialRenderer</tt> doesn't have any local variables.\n  # The <tt>:object</tt> option can be used to pass an object to the partial. For instance:\n  #\n  #   <%= render partial: \"account\", object: @buyer %>\n  #\n  # would provide the <tt>@buyer</tt> object to the partial, available under the local variable +account+ and is\n  # equivalent to:\n  #\n  #   <%= render partial: \"account\", locals: { account: @buyer } %>\n  #\n  # With the <tt>:as</tt> option we can specify a different name for said local variable. For example, if we\n  # wanted it to be +user+ instead of +account+ we'd do:\n  #\n  #   <%= render partial: \"account\", object: @buyer, as: 'user' %>\n  #\n  # This is equivalent to\n  #\n  #   <%= render partial: \"account\", locals: { user: @buyer } %>\n  #\n  # == \\Rendering a collection of partials\n  #\n  # The example of partial use describes a familiar pattern where a template needs to iterate over an array and\n  # render a sub template for each of the elements. This pattern has been implemented as a single method that\n  # accepts an array and renders a partial by the same name as the elements contained within. So the three-lined\n  # example in \"Using partials\" can be rewritten with a single line:\n  #\n  #   <%= render partial: \"ad\", collection: @advertisements %>\n  #\n  # This will render \"advertiser/_ad.html.erb\" and pass the local variable +ad+ to the template for display. An\n  # iteration object will automatically be made available to the template with a name of the form\n  # +partial_name_iteration+. The iteration object has knowledge about which index the current object has in\n  # the collection and the total size of the collection. The iteration object also has two convenience methods,\n  # +first?+ and +last?+. In the case of the example above, the template would be fed +ad_iteration+.\n  # For backwards compatibility the +partial_name_counter+ is still present and is mapped to the iteration's\n  # +index+ method.\n  #\n  # The <tt>:as</tt> option may be used when rendering partials.\n  #\n  # You can specify a partial to be rendered between elements via the <tt>:spacer_template</tt> option.\n  # The following example will render <tt>advertiser/_ad_divider.html.erb</tt> between each ad partial:\n  #\n  #   <%= render partial: \"ad\", collection: @advertisements, spacer_template: \"ad_divider\" %>\n  #\n  # If the given <tt>:collection</tt> is +nil+ or empty, <tt>render</tt> will return nil. This will allow you\n  # to specify a text which will displayed instead by using this form:\n  #\n  #   <%= render(partial: \"ad\", collection: @advertisements) || \"There's no ad to be displayed\" %>\n  #\n  # NOTE: Due to backwards compatibility concerns, the collection can't be one of hashes. Normally you'd also\n  # just keep domain objects, like Active Records, in there.\n  #\n  # == \\Rendering shared partials\n  #\n  # Two controllers can share a set of partials and render them like this:\n  #\n  #   <%= render partial: \"advertisement/ad\", locals: { ad: @advertisement } %>\n  #\n  # This will render the partial \"advertisement/_ad.html.erb\" regardless of which controller this is being called from.\n  #\n  # == \\Rendering objects that respond to `to_partial_path`\n  #\n  # Instead of explicitly naming the location of a partial, you can also let PartialRenderer do the work\n  # and pick the proper path by checking `to_partial_path` method.\n  #\n  #  # @account.to_partial_path returns 'accounts/account', so it can be used to replace:\n  #  # <%= render partial: \"accounts/account\", locals: { account: @account} %>\n  #  <%= render partial: @account %>\n  #\n  #  # @posts is an array of Post instances, so every post record returns 'posts/post' on `to_partial_path`,\n  #  # that's why we can replace:\n  #  # <%= render partial: \"posts/post\", collection: @posts %>\n  #  <%= render partial: @posts %>\n  #\n  # == \\Rendering the default case\n  #\n  # If you're not going to be using any of the options like collections or layouts, you can also use the short-hand\n  # defaults of render to render partials. Examples:\n  #\n  #  # Instead of <%= render partial: \"account\" %>\n  #  <%= render \"account\" %>\n  #\n  #  # Instead of <%= render partial: \"account\", locals: { account: @buyer } %>\n  #  <%= render \"account\", account: @buyer %>\n  #\n  #  # @account.to_partial_path returns 'accounts/account', so it can be used to replace:\n  #  # <%= render partial: \"accounts/account\", locals: { account: @account} %>\n  #  <%= render @account %>\n  #\n  #  # @posts is an array of Post instances, so every post record returns 'posts/post' on `to_partial_path`,\n  #  # that's why we can replace:\n  #  # <%= render partial: \"posts/post\", collection: @posts %>\n  #  <%= render @posts %>\n  #\n  # == \\Rendering partials with layouts\n  #\n  # Partials can have their own layouts applied to them. These layouts are different than the ones that are\n  # specified globally for the entire action, but they work in a similar fashion. Imagine a list with two types\n  # of users:\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   Here's the administrator:\n  #   <%= render partial: \"user\", layout: \"administrator\", locals: { user: administrator } %>\n  #\n  #   Here's the editor:\n  #   <%= render partial: \"user\", layout: \"editor\", locals: { user: editor } %>\n  #\n  #   <%# app/views/users/_user.html.erb %>\n  #   Name: <%= user.name %>\n  #\n  #   <%# app/views/users/_administrator.html.erb %>\n  #   <div id=\"administrator\">\n  #     Budget: $<%= user.budget %>\n  #     <%= yield %>\n  #   </div>\n  #\n  #   <%# app/views/users/_editor.html.erb %>\n  #   <div id=\"editor\">\n  #     Deadline: <%= user.deadline %>\n  #     <%= yield %>\n  #   </div>\n  #\n  # ...this will return:\n  #\n  #   Here's the administrator:\n  #   <div id=\"administrator\">\n  #     Budget: $<%= user.budget %>\n  #     Name: <%= user.name %>\n  #   </div>\n  #\n  #   Here's the editor:\n  #   <div id=\"editor\">\n  #     Deadline: <%= user.deadline %>\n  #     Name: <%= user.name %>\n  #   </div>\n  #\n  # If a collection is given, the layout will be rendered once for each item in\n  # the collection. For example, these two snippets have the same output:\n  #\n  #   <%# app/views/users/_user.html.erb %>\n  #   Name: <%= user.name %>\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   <%# This does not use layouts %>\n  #   <ul>\n  #     <% users.each do |user| -%>\n  #       <li>\n  #         <%= render partial: \"user\", locals: { user: user } %>\n  #       </li>\n  #     <% end -%>\n  #   </ul>\n  #\n  #   <%# app/views/users/_li_layout.html.erb %>\n  #   <li>\n  #     <%= yield %>\n  #   </li>\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   <ul>\n  #     <%= render partial: \"user\", layout: \"li_layout\", collection: users %>\n  #   </ul>\n  #\n  # Given two users whose names are Alice and Bob, these snippets return:\n  #\n  #   <ul>\n  #     <li>\n  #       Name: Alice\n  #     </li>\n  #     <li>\n  #       Name: Bob\n  #     </li>\n  #   </ul>\n  #\n  # The current object being rendered, as well as the object_counter, will be\n  # available as local variables inside the layout template under the same names\n  # as available in the partial.\n  #\n  # You can also apply a layout to a block within any template:\n  #\n  #   <%# app/views/users/_chief.html.erb %>\n  #   <%= render(layout: \"administrator\", locals: { user: chief }) do %>\n  #     Title: <%= chief.title %>\n  #   <% end %>\n  #\n  # ...this will return:\n  #\n  #   <div id=\"administrator\">\n  #     Budget: $<%= user.budget %>\n  #     Title: <%= chief.name %>\n  #   </div>\n  #\n  # As you can see, the <tt>:locals</tt> hash is shared between both the partial and its layout.\n  #\n  # If you pass arguments to \"yield\" then this will be passed to the block. One way to use this is to pass\n  # an array to layout and treat it as an enumerable.\n  #\n  #   <%# app/views/users/_user.html.erb %>\n  #   <div class=\"user\">\n  #     Budget: $<%= user.budget %>\n  #     <%= yield user %>\n  #   </div>\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   <%= render layout: @users do |user| %>\n  #     Title: <%= user.title %>\n  #   <% end %>\n  #\n  # This will render the layout for each user and yield to the block, passing the user, each time.\n  #\n  # You can also yield multiple times in one layout and use block arguments to differentiate the sections.\n  #\n  #   <%# app/views/users/_user.html.erb %>\n  #   <div class=\"user\">\n  #     <%= yield user, :header %>\n  #     Budget: $<%= user.budget %>\n  #     <%= yield user, :footer %>\n  #   </div>\n  #\n  #   <%# app/views/users/index.html.erb %>\n  #   <%= render layout: @users do |user, section| %>\n  #     <%- case section when :header -%>\n  #       Title: <%= user.title %>\n  #     <%- when :footer -%>\n  #       Deadline: <%= user.deadline %>\n  #     <%- end -%>\n  #   <% end %>\n  class PartialRenderer < AbstractRenderer\n    include CollectionCaching\n\n    PREFIXED_PARTIAL_NAMES = Concurrent::Map.new do |h, k|\n      h[k] = Concurrent::Map.new\n    end\n\n    def initialize(*)\n      super\n      @context_prefix = @lookup_context.prefixes.first\n    end\n\n    def render(context, options, block)\n      setup(context, options, block)\n      @template = find_partial\n\n      @lookup_context.rendered_format ||= begin\n        if @template && @template.formats.present?\n          @template.formats.first\n        else\n          formats.first\n        end\n      end\n\n      if @collection\n        render_collection\n      else\n        render_partial\n      end\n    end\n\n    private\n\n      def render_collection\n        instrument(:collection, count: @collection.size) do |payload|\n          return nil if @collection.blank?\n\n          if @options.key?(:spacer_template)\n            spacer = find_template(@options[:spacer_template], @locals.keys).render(@view, @locals)\n          end\n\n          cache_collection_render(payload) do\n            @template ? collection_with_template : collection_without_template\n          end.join(spacer).html_safe\n        end\n      end\n\n      def render_partial\n        instrument(:partial) do |payload|\n          view, locals, block = @view, @locals, @block\n          object, as = @object, @variable\n\n          if !block && (layout = @options[:layout])\n            layout = find_template(layout.to_s, @template_keys)\n          end\n\n          object = locals[as] if object.nil? # Respect object when object is false\n          locals[as] = object if @has_object\n\n          content = @template.render(view, locals) do |*name|\n            view._layout_for(*name, &block)\n          end\n\n          content = layout.render(view, locals) { content } if layout\n          payload[:cache_hit] = view.cache_hit\n          content\n        end\n      end\n\n      # Sets up instance variables needed for rendering a partial. This method\n      # finds the options and details and extracts them. The method also contains\n      # logic that handles the type of object passed in as the partial.\n      #\n      # If +options[:partial]+ is a string, then the +@path+ instance variable is\n      # set to that string. Otherwise, the +options[:partial]+ object must\n      # respond to +to_partial_path+ in order to setup the path.\n      def setup(context, options, block)\n        @view = context\n        @options = options\n        @block   = block\n\n        @locals  = options[:locals] || {}\n        @details = extract_details(options)\n\n        prepend_formats(options[:formats])\n\n        partial = options[:partial]\n\n        if String === partial\n          @has_object = options.key?(:object)\n          @object     = options[:object]\n          @collection = collection_from_options\n          @path       = partial\n        else\n          @has_object = true\n          @object = partial\n          @collection = collection_from_object || collection_from_options\n\n          if @collection\n            paths = @collection_data = @collection.map { |o| partial_path(o) }\n            @path = paths.uniq.one? ? paths.first : nil\n          else\n            @path = partial_path\n          end\n        end\n\n        if as = options[:as]\n          raise_invalid_option_as(as) unless /\\A[a-z_]\\w*\\z/.match?(as.to_s)\n          as = as.to_sym\n        end\n\n        if @path\n          @variable, @variable_counter, @variable_iteration = retrieve_variable(@path, as)\n          @template_keys = retrieve_template_keys\n        else\n          paths.map! { |path| retrieve_variable(path, as).unshift(path) }\n        end\n\n        self\n      end\n\n      def collection_from_options\n        if @options.key?(:collection)\n          collection = @options[:collection]\n          collection ? collection.to_a : []\n        end\n      end\n\n      def collection_from_object\n        @object.to_ary if @object.respond_to?(:to_ary)\n      end\n\n      def find_partial\n        find_template(@path, @template_keys) if @path\n      end\n\n      def find_template(path, locals)\n        prefixes = path.include?(?/) ? [] : @lookup_context.prefixes\n        @lookup_context.find_template(path, prefixes, true, locals, @details)\n      end\n\n      def collection_with_template\n        view, locals, template = @view, @locals, @template\n        as, counter, iteration = @variable, @variable_counter, @variable_iteration\n\n        if layout = @options[:layout]\n          layout = find_template(layout, @template_keys)\n        end\n\n        partial_iteration = PartialIteration.new(@collection.size)\n        locals[iteration] = partial_iteration\n\n        @collection.map do |object|\n          locals[as]        = object\n          locals[counter]   = partial_iteration.index\n\n          content = template.render(view, locals)\n          content = layout.render(view, locals) { content } if layout\n          partial_iteration.iterate!\n          content\n        end\n      end\n\n      def collection_without_template\n        view, locals, collection_data = @view, @locals, @collection_data\n        cache = {}\n        keys  = @locals.keys\n\n        partial_iteration = PartialIteration.new(@collection.size)\n\n        @collection.map do |object|\n          index = partial_iteration.index\n          path, as, counter, iteration = collection_data[index]\n\n          locals[as]        = object\n          locals[counter]   = index\n          locals[iteration] = partial_iteration\n\n          template = (cache[path] ||= find_template(path, keys + [as, counter]))\n          content = template.render(view, locals)\n          partial_iteration.iterate!\n          content\n        end\n      end\n\n      # Obtains the path to where the object's partial is located. If the object\n      # responds to +to_partial_path+, then +to_partial_path+ will be called and\n      # will provide the path. If the object does not respond to +to_partial_path+,\n      # then an +ArgumentError+ is raised.\n      #\n      # If +prefix_partial_path_with_controller_namespace+ is true, then this\n      # method will prefix the partial paths with a namespace.\n      def partial_path(object = @object)\n        object = object.to_model if object.respond_to?(:to_model)\n\n        path = if object.respond_to?(:to_partial_path)\n          object.to_partial_path\n        else\n          raise ArgumentError.new(\"'#{object.inspect}' is not an ActiveModel-compatible object. It must implement :to_partial_path.\")\n        end\n\n        if @view.prefix_partial_path_with_controller_namespace\n          prefixed_partial_names[path] ||= merge_prefix_into_object_path(@context_prefix, path.dup)\n        else\n          path\n        end\n      end\n\n      def prefixed_partial_names\n        @prefixed_partial_names ||= PREFIXED_PARTIAL_NAMES[@context_prefix]\n      end\n\n      def merge_prefix_into_object_path(prefix, object_path)\n        if prefix.include?(?/) && object_path.include?(?/)\n          prefixes = []\n          prefix_array = File.dirname(prefix).split(\"/\")\n          object_path_array = object_path.split(\"/\")[0..-3] # skip model dir & partial\n\n          prefix_array.each_with_index do |dir, index|\n            break if dir == object_path_array[index]\n            prefixes << dir\n          end\n\n          (prefixes << object_path).join(\"/\")\n        else\n          object_path\n        end\n      end\n\n      def retrieve_template_keys\n        keys = @locals.keys\n        keys << @variable if @has_object || @collection\n        if @collection\n          keys << @variable_counter\n          keys << @variable_iteration\n        end\n        keys\n      end\n\n      def retrieve_variable(path, as)\n        variable = as || begin\n          base = path[-1] == \"/\".freeze ? \"\".freeze : File.basename(path)\n          raise_invalid_identifier(path) unless base =~ /\\A_?(.*?)(?:\\.\\w+)*\\z/\n          $1.to_sym\n        end\n        if @collection\n          variable_counter = :\"#{variable}_counter\"\n          variable_iteration = :\"#{variable}_iteration\"\n        end\n        [variable, variable_counter, variable_iteration]\n      end\n\n      IDENTIFIER_ERROR_MESSAGE = \"The partial name (%s) is not a valid Ruby identifier; \" +\n                                 \"make sure your partial name starts with underscore.\"\n\n      OPTION_AS_ERROR_MESSAGE  = \"The value (%s) of the option `as` is not a valid Ruby identifier; \" +\n                                 \"make sure it starts with lowercase letter, \" +\n                                 \"and is followed by any combination of letters, numbers and underscores.\"\n\n      def raise_invalid_identifier(path)\n        raise ArgumentError.new(IDENTIFIER_ERROR_MESSAGE % (path))\n      end\n\n      def raise_invalid_option_as(as)\n        raise ArgumentError.new(OPTION_AS_ERROR_MESSAGE % (as))\n      end\n  end\nend\n```\n\u5b9f\u306f\u3001\u30b3\u30df\u30c3\u30bf\u30fc\u306e\u65b9\u306f\u3059\u3054\u304f\u4e01\u5be7\u306b\u5b9f\u88c5\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u6b8b\u3057\u3066\u304f\u308c\u3066\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u3053\u3053\u3067\u77e5\u3089\u306a\u304b\u3063\u305f\u3053\u3068\u304c\u89e3\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u3053\u3053\u3067options\u3067\u691c\u7d22\u304b\u3051\u3066\u307f\u308b\u3068\u3001partial\u3060\u3051\u3067\u3082\u30aa\u30d7\u30b7\u30e7\u30f3\u305f\u304f\u3055\u3093\u3042\u308b\u3053\u3068\u304c\u89e3\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002locale\u3068\u304b\u306f\u3088\u304f\u4f7f\u3044\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u99b4\u67d3\u307f\u306e\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u306d\u3002delegate\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u3082\u3061\u3083\u3093\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n#master\u30d6\u30e9\u30f3\u30c1\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308bTagHelper\u306a\u308b\u30d8\u30eb\u30d1\u30fc\nRails\u306e\u516c\u5f0f\u30ea\u30ea\u30fc\u30b9\u306e\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u306f5.0.0(\u3068\u601d\u3044\u304d\u3084\u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u30825.0.1rc1,5.0.1rc2\u304c\u3064\u3044\u4e09\u65e5\u307b\u3069\u524d\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002)\u3067\u3059\u304c\u3001\u6700\u65b0\u7248\u306emaster\u30d6\u30e9\u30f3\u30c1\u306b\u306f\u30bf\u30b0\u30d8\u30eb\u30d1\u30fc\u306a\u308b\u30d8\u30eb\u30d1\u30fc\u306b\u30c1\u30a7\u30fc\u30f3\u30e1\u30bd\u30c3\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n[tag_helper.rb](https://github.com/rails/rails/blob/master/actionview/lib/action_view/helpers/tag_helper.rb)\n\u3053\u308c\u306f\u3001\u4f8b\u3048\u3070\u3001\n\n```erb\n<%= tag.h1 \u30bf\u30a4\u30c8\u30eb%>\n<%# =><h1>\u30bf\u30a4\u30c8\u30eb</h1>\u3000%>\n```\n\n\u306e\u3088\u3046\u306bchain\u3067\u30bf\u30b0\u3092\u8ffd\u52a0\u3057\u3066\u3044\u3051\u308b\u6a5f\u80fd\u306e\u3088\u3046\u3067\u3059\u304c\u3001\u4fbf\u5229\u305d\u3046\u306a\u306e\u3067\u65e9\u304f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u6b32\u3057\u3044\u3067\u3059\u306d\u3002\n\n\n#\u307e\u3068\u3081\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30cd\u30c3\u30c8\u3067\u60c5\u5831\u63a2\u305b\u3070\u65e9\u304f\u89e3\u6c7a\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306e\u77e5\u898b\u3084\u305d\u3053\u3067\u4f7f\u308f\u308c\u3066\u308b\u30c6\u30af\u30cb\u30c3\u30af\u304c\u898b\u308c\u3066\u3068\u3066\u3082\u3044\u3044\u3067\u3059\u3088\u3002\u307e\u305f\u3001\u96e3\u3057\u305d\u3046\u306a\u5b9f\u88c5\u306b\u898b\u3048\u3066\u4ee5\u5916\u3068\u7c21\u5358\u3060\u3063\u305f\u308a\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u306f\u3001\u30b3\u30fc\u30c9\u304c\u7dba\u9e97\u306b\u898b\u3048\u3066\u3050\u3061\u3083\u3050\u3061\u3083\u3060\u3063\u305f\u308a\u3068\u3044\u308d\u3093\u306a\u767a\u898b\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u6280\u8853\u529b\u306e\u4f38\u3073\u60a9\u307f\u3092\u611f\u3058\u305f\u3089\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u3053\u306e\u51e6\u7406\u3044\u3044\u306a\u3068\u601d\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u771f\u4f3c\u3092\u3057\u3066\u307f\u308b\u306e\u304c\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3068\u3044\u3046\u304a\u8a71\u3067\u3057\u305f\u3002\n", "tags": ["Rails", "Rails5", "RubyOnRails", "Ruby"]}