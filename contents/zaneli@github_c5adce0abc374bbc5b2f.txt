{"context": " More than 1 year has passed since last update.\u7d9a\u304d\u3092\u66f8\u3044\u305f\u3002\n\n\u7d9a\u30fbJedis\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3092(\u7121\u7406\u3084\u308a)Redis Cluster\u5bfe\u5fdc\u3055\u305b\u308b\n\n\n\u524d\u63d0\nhost 192.168.53.52, port 6379, 6380, 6381 \u306eRedis Cluster\u69cb\u6210\u3092\u4f5c\u308a\u3001\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u305f\u3002\n\u672c\u8a18\u4e8b\u306f\u3053\u308c\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u3002\nredis-cli -h 192.168.53.52 -p 6379 -c\n\n192.168.53.52:6379> set key1 value1\n-> Redirected to slot [9189] located at 192.168.53.52:6380\nOK\n192.168.53.52:6379> set key2 value2\n-> Redirected to slot [4998] located at 192.168.53.52:6379\nOK\n192.168.53.52:6379> set key3 value3\nOK\n192.168.53.52:6379> get key1\n-> Redirected to slot [9189] located at 192.168.53.52:6380\n\"value1\"\n192.168.53.52:6379> get key2\n-> Redirected to slot [4998] located at 192.168.53.52:6379\n\"value2\"\n192.168.53.52:6379> get key3\n\"value3\"\n\n\u307e\u305f\u3001\u672c\u984c\u306b\u306f\u3042\u307e\u308a\u95a2\u4fc2\u306a\u3044\u304c using \u30e1\u30bd\u30c3\u30c9\u306fscalikejdbc\u306eLoanPattern\u3092\u304a\u501f\u308a\u3057\u305f\u3002\n\nJedis 2.7.2 \u73fe\u72b6\u306e\u5b9f\u88c5\nJava\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30eaJedis\u3067\u306fstill under development \u306a\u304c\u3089\u3082Redis Cluster\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002\n\nJedisTest1.scala\npackage com.zaneli.redis.jedis\n\nimport redis.clients.jedis.{HostAndPort, JedisCluster}\nimport scalikejdbc.using\n\nimport scala.collection.JavaConversions._\n\nobject JedisTest1 extends App {\n\n  val nodes = Set(6379, 6380, 6381).map { port =>\n    new HostAndPort(\"192.168.53.52\", port)\n  }\n  using(new JedisCluster(nodes)) { cluster =>\n    val v1 = cluster.get(\"key1\")\n    val v2 = cluster.get(\"key2\")\n    val v3 = cluster.get(\"key3\")\n    println((v1, v2, v3))\n  }\n}\n\n\n\u3057\u304b\u3057\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3089\u3057\u304f\u3001JedisCluster\u30af\u30e9\u30b9\u306b\u306f pipelined \u7684\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\u3002\n\u3061\u306a\u307f\u306bRedis Cluster\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u4ee5\u4e0b\u306eException\u304c\u767a\u751f\u3002\n\nJedisTest2.scala\npackage com.zaneli.redis.jedis\n\nimport redis.clients.jedis.{HostAndPort, Jedis}\nimport scalikejdbc.using\n\nobject JedisTest2 extends App {\n\n  val nodes = Set(6379, 6380, 6381).map { port =>\n    new HostAndPort(\"192.168.53.52\", port)\n  }\n  using(new Jedis(nodes.head.getHost, nodes.head.getPort)) { jedis =>\n    val p = jedis.pipelined()\n    val v1 = p.get(\"key1\")\n    val v2 = p.get(\"key2\")\n    val v3 = p.get(\"key3\")\n    p.sync()\n    println((v1.get, v2.get, v3.get))\n  }\n}\n\n\nException in thread \"main\" redis.clients.jedis.exceptions.JedisMovedDataException: MOVED 9189 192.168.53.52:6380\n    at redis.clients.jedis.Protocol.processError(Protocol.java:108)\n    at redis.clients.jedis.Protocol.process(Protocol.java:142)\n    at redis.clients.jedis.Protocol.read(Protocol.java:196)\n    at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:288)\n    at redis.clients.jedis.Connection.getAll(Connection.java:258)\n    at redis.clients.jedis.Connection.getAll(Connection.java:250)\n    at redis.clients.jedis.Pipeline.sync(Pipeline.java:85)\n    at com.zaneli.redis.jedis.JedisTest2$$anonfun$2.apply(JedisTest2.scala:16)\n\n\n(\u3068\u3053\u308d\u3067\u4eca\u56de\u306e\u4f8b\u3067\u306f key2 \u3068 key3 \u306f\u305f\u307e\u305f\u307e\u540c\u3058\u30ce\u30fc\u30c9\u306b\u66f8\u304b\u308c\u308b\u305f\u3081\u3001\u4e0a\u8a18\u306e val v1 = p.get(\"key1\"), v1.get \u3092\u9664\u304f\u3068\u8aad\u307f\u53d6\u308a\u306b\u6210\u529f\u3059\u308b\u3002)\n\nJedisPipelinedCluster\u3092\u81ea\u4f5c\u3057\u3066\u304c\u3093\u3070\u308b\n\u65e2\u5b58\u306e JedisCluster \u3067\u306e\u5b9f\u88c5\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u3001\u5f37\u5f15\u6c17\u5473\u3067\u306f\u3042\u308b\u304c\u5bfe\u5fdc\u3092\u8a66\u307f\u308b\u3002\n\u3053\u3061\u3089\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u3082\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\u304c\u3001\n\u305d\u3082\u305d\u3082\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306fRedis Cluster\u74b0\u5883\u3067\u3082\u540c\u3058\u30ce\u30fc\u30c9\u5185\u3067\u3057\u304b\u884c\u3048\u306a\u3044\u305f\u3081\u3001\nJedisTest2.scala \u3068\u3042\u307e\u308a\u5909\u308f\u3089\u305a\u30ce\u30fc\u30c9\u306e\u7279\u5b9a\u3092\u3082\u3046\u5c11\u3057\u30de\u30b7\u306b\u3067\u304d\u308b\u304f\u3089\u3044\u304c\u843d\u3068\u3057\u6240\u304b\u2026\u3002\n\nJedisPipelinedCluster.scala\npackage com.zaneli.redis.jedis\n\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig\nimport redis.clients.jedis.{HostAndPort, JedisSlotBasedConnectionHandler, Pipeline, Protocol}\nimport redis.clients.jedis.exceptions.{JedisClusterMaxRedirectionsException, JedisMovedDataException}\nimport redis.clients.util.JedisClusterCRC16\nimport scalikejdbc.using\n\nimport scala.annotation.tailrec\nimport scala.collection.JavaConversions._\nimport scala.util.{Failure, Try}\n\nclass JedisPipelinedCluster(\n    nodes: Set[HostAndPort],\n    config: GenericObjectPoolConfig = new GenericObjectPoolConfig(),\n    timeout: Int = Protocol.DEFAULT_TIMEOUT,\n    maxRedirections: Int = 5) {\n\n  private[this] val handler = new JedisSlotBasedConnectionHandler(nodes, config, timeout)\n\n  def pipelined[A](key: String)(cmd: Pipeline => A): Try[A] =\n    pipelined(key, cmd, maxRedirections)\n\n  @tailrec\n  private[this] def pipelined[A](key: String, cmd: Pipeline => A, redirections: Int): Try[A] = {\n    val result = Try {\n      val slot = JedisClusterCRC16.getSlot(key)\n      using(handler.getConnectionFromSlot(slot)) { jedis =>\n        val pipeline = jedis.pipelined()\n        cmd(pipeline)\n      }\n    }\n    result match {\n      case Failure(e: JedisMovedDataException) =>\n        if (redirections <= 0) {\n          Failure(new JedisClusterMaxRedirectionsException(\"Too many Cluster redirections?\"))\n        } else {\n          pipelined(key, cmd, redirections - 1)\n        }\n      case r => r\n    }\n  }\n}\n\n\n\n\nJedisTest3.scala\npackage com.zaneli.redis.jedis\n\nimport redis.clients.jedis.HostAndPort\n\nimport scala.util.{Failure, Success}\n\nobject JedisTest3 extends App {\n\n  val nodes = Set(6379, 6380, 6381).map { port =>\n    new HostAndPort(\"192.168.53.52\", port)\n  }\n  val cluster = new JedisPipelinedCluster(nodes)\n  val result = cluster.pipelined(\"key2\") { p =>\n    val v2 = p.get(\"key2\")\n    val v3 = p.get(\"key3\")\n    p.sync()\n    (v2.get, v3.get)\n  }\n  result match {\n    case Success((v2, v3)) => println((v2, v3))\n    case Failure(e) => e.printStackTrace()\n  }\n}\n\n\n\n\u2026\u3046\u30fc\u3093\u3001\u7d50\u5c40\u30ce\u30fc\u30c9\u7279\u5b9a\u306e\u305f\u3081\u306e\u30ad\u30fc\u3092\u5225\u9014\u6e21\u3057\u3066\u3044\u308b\u306e\u304c\u6b8b\u5ff5\u2026\u3002\ncluster.pipelined(\"key1\") \u3092\u6e21\u3057\u3066 p.get(\"key2\") \u3057\u305f\u308a\u3059\u308b\u3068\u7d50\u5c40 JedisClusterMaxRedirectionsException \u304c\u767a\u751f\u3059\u308b\u3002\n\n\u3082\u3046\u3061\u3087\u3063\u3068\u5b9f\u7528\u7684\u306b\nRedis Cluster\u306eslot\u306f\u3001\u30ad\u30fc\u5168\u4f53\u3067\u306f\u306a\u304f {...} \u3067\u56f2\u3093\u3060\u90e8\u5206\u306b\u7d5e\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\n\u3064\u307e\u308a\u3001\u8907\u6570\u30ad\u30fc\u3092\u540c\u3058\u30ce\u30fc\u30c9\u306b\u66f8\u304d\u305f\u3044\u5834\u5408\u3001\u30ad\u30fc\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092 {...} \u3068\u3057\u3001\u3053\u306e\u4e2d\u306e\u6587\u5b57\u5217\u3092\u4e00\u81f4\u3055\u305b\u308c\u3070\u3044\u3044\u3002\n\u3053\u3093\u306acase class\u304c\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306e\u5024\u3092Redis\u306b\u66f8\u304d\u8fbc\u307f\u305f\u3044\u3068\u3059\u308b\u3002\n\nSuperWrestler.scala\npackage com.zaneli.redis.jedis\n\nimport scala.collection.JavaConversions._\nimport scala.util.Try\n\ncase class SuperWrestler(id: Int, name: String, power: Int, favoriteHolds: List[String], family: Map[String, String])\n\nobject SuperWrestler extends RedisAccessor {\n  override def prefix(id: Int): String = s\"sw$id\"\n\n  def read(id: Int)(implicit cluster: JedisPipelinedCluster): Try[SuperWrestler] = {\n    cluster.pipelined(prefix(id)) { p =>\n      val name = p.get(key(id, \"name\"))\n      val power = p.get(key(id, \"power\"))\n      val favoriteHolds = p.lrange(key(id, \"favoriteHolds\"), 0, -1)\n      val family = p.hgetAll(key(id, \"family\"))\n      p.sync()\n      SuperWrestler(id, name.get, power.get.toInt, favoriteHolds.get.toList, family.get.toMap)\n    }\n  }\n\n  def write(sw: SuperWrestler)(implicit cluster: JedisPipelinedCluster): Boolean = {\n    cluster.pipelined(prefix(sw.id)) { p =>\n      p.set(key(sw.id, \"name\"), sw.name)\n      p.set(key(sw.id, \"power\"), sw.power.toString)\n      p.del(key(sw.id, \"favoriteHolds\"), key(sw.id, \"family\"))\n      sw.favoriteHolds.map(p.rpush(key(sw.id, \"favoriteHolds\"), _))\n      sw.family.map { case (k, v) => p.hset(key(sw.id, \"family\"), k, v) }\n      p.sync()\n    }.isSuccess\n  }\n}\n\ntrait RedisAccessor {\n  def prefix(id: Int): String\n  def key(id: Int, name: String): String = s\"{${prefix(id)}}$name\"\n}\n\n\n\n\nSuperWrestlerTest.scala\npackage com.zaneli.redis.jedis\n\nimport redis.clients.jedis.HostAndPort\n\nobject SuperWrestlerTest {\n\n  def main(args: Array[String]) {\n    val nodes = Set(6379, 6380, 6381).map { port =>\n      new HostAndPort(\"192.168.53.52\", port)\n    }\n    implicit val cluster = new JedisPipelinedCluster(nodes)\n\n    val kinnikuman = SuperWrestler(\n      1, \"\u30ad\u30f3\u8089\u30de\u30f3\", 95, List(\"\u30ad\u30f3\u8089\u30d0\u30b9\u30bf\u30fc\", \"\u30ad\u30f3\u8089\u30c9\u30e9\u30a4\u30d0\u30fc\", \"\u30de\u30c3\u30b9\u30eb\u30b9\u30d1\u30fc\u30af\"), Map(\"\u7236\" -> \"\u30ad\u30f3\u8089\u771f\u5f13\", \"\u6bcd\" -> \"\u30ad\u30f3\u8089\u5c0f\u767e\u5408\"))\n\n    val terryman = SuperWrestler(\n      2, \"\u30c6\u30ea\u30fc\u30de\u30f3\", 95, List(\"\u30b9\u30d4\u30cb\u30f3\u30b0\u30c8\u30a5\u30db\u30fc\u30eb\u30c9\", \"\u30ab\u30fc\u30d5\u30d6\u30e9\u30f3\u30c7\u30a3\u30f3\u30b0\", \"\u30c6\u30ad\u30b5\u30b9\u30b3\u30f3\u30c9\u30eb\u30ad\u30c3\u30af\"), Map(\"\u7236\" -> \"\u30c9\u30ea\u30fc\u30de\u30f3\"))\n\n    val robinMask = SuperWrestler(\n      3, \"\u30ed\u30d3\u30f3\u30de\u30b9\u30af\", 96, List(\"\u30bf\u30ef\u30fc\u30d6\u30ea\u30c3\u30b8\", \"\u30ed\u30d3\u30f3\u30b9\u30da\u30b7\u30e3\u30eb\"), Map(\"\u7236\" -> \"\u30ed\u30d3\u30f3\u30ca\u30a4\u30c8\"))\n\n    Seq(kinnikuman, terryman, robinMask) foreach SuperWrestler.write\n\n    (1 to 3) foreach (i => println(SuperWrestler.read(i)))\n  }\n}\n\n\nSuperWrestler \u5185\u3067\u306e\u30ad\u30fc\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u56fa\u5b9a\u3057\u3066\u3001\u4e00\u3064\u306e SuperWrestler \u306e\u60c5\u5831\u306f\u5168\u3066\u540c\u3058\u30ce\u30fc\u30c9\u306b\u66f8\u304f\u3002\n\u3053\u3046\u3044\u3046\u7528\u9014\u306a\u3089\u3001\u4eca\u56de\u4f5c\u3063\u305f JedisPipelinedCluster \u3092\u4f7f\u3046\u3068 SuperWrestler \u8aad\u307f\u66f8\u304d\u306e\u969b\u306b\u306f\u5c11\u3057\u306f\u4fbf\u5229\u3001\u304b\u306a\u2026\uff1f\n\u3061\u306a\u307f\u306b\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3001\u30ad\u30f3\u8089\u30de\u30f3\u306fport6381, \u30c6\u30ea\u30fc\u30de\u30f3\u306fport6379, \u30ed\u30d3\u30f3\u30de\u30b9\u30af\u306fport6380\u306b\u30d0\u30e9\u3051\u3066\u66f8\u304b\u308c\u305f\u3002 :) \n\u7d9a\u304d\u3092\u66f8\u3044\u305f\u3002\n\n * [\u7d9a\u30fbJedis\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3092(\u7121\u7406\u3084\u308a)Redis Cluster\u5bfe\u5fdc\u3055\u305b\u308b](http://qiita.com/zaneli@github/items/6cb8d4e0b16621e2e1b7)\n\n### \u524d\u63d0\n\nhost 192.168.53.52, port 6379, 6380, 6381 \u306eRedis Cluster\u69cb\u6210\u3092\u4f5c\u308a\u3001\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u305f\u3002\n\u672c\u8a18\u4e8b\u306f\u3053\u308c\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u3002\n\n```\nredis-cli -h 192.168.53.52 -p 6379 -c\n\n192.168.53.52:6379> set key1 value1\n-> Redirected to slot [9189] located at 192.168.53.52:6380\nOK\n192.168.53.52:6379> set key2 value2\n-> Redirected to slot [4998] located at 192.168.53.52:6379\nOK\n192.168.53.52:6379> set key3 value3\nOK\n192.168.53.52:6379> get key1\n-> Redirected to slot [9189] located at 192.168.53.52:6380\n\"value1\"\n192.168.53.52:6379> get key2\n-> Redirected to slot [4998] located at 192.168.53.52:6379\n\"value2\"\n192.168.53.52:6379> get key3\n\"value3\"\n```\n\n\u307e\u305f\u3001\u672c\u984c\u306b\u306f\u3042\u307e\u308a\u95a2\u4fc2\u306a\u3044\u304c `using` \u30e1\u30bd\u30c3\u30c9\u306f[scalikejdbc\u306eLoanPattern](https://github.com/scalikejdbc/scalikejdbc/blob/0ffbd0f6a310a5761bd6353636a94d257480b4b3/scalikejdbc-core/src/main/scala/scalikejdbc/LoanPattern.scala)\u3092\u304a\u501f\u308a\u3057\u305f\u3002\n\n### Jedis 2.7.2 \u73fe\u72b6\u306e\u5b9f\u88c5\n\nJava\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea[Jedis](https://github.com/xetorthio/jedis)\u3067\u306fstill under development \u306a\u304c\u3089\u3082Redis Cluster\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002\n\n```scala:JedisTest1.scala\npackage com.zaneli.redis.jedis\n\nimport redis.clients.jedis.{HostAndPort, JedisCluster}\nimport scalikejdbc.using\n\nimport scala.collection.JavaConversions._\n\nobject JedisTest1 extends App {\n\n  val nodes = Set(6379, 6380, 6381).map { port =>\n    new HostAndPort(\"192.168.53.52\", port)\n  }\n  using(new JedisCluster(nodes)) { cluster =>\n    val v1 = cluster.get(\"key1\")\n    val v2 = cluster.get(\"key2\")\n    val v3 = cluster.get(\"key3\")\n    println((v1, v2, v3))\n  }\n}\n```\n\n\u3057\u304b\u3057\u3001[\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3089\u3057\u304f](https://groups.google.com/d/msg/jedis_redis/WOFjPKdBxz0/2kmKcY4LnEoJ)\u3001`JedisCluster`\u30af\u30e9\u30b9\u306b\u306f `pipelined` \u7684\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\u3002\n\u3061\u306a\u307f\u306bRedis Cluster\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u4ee5\u4e0b\u306eException\u304c\u767a\u751f\u3002\n\n```scala:JedisTest2.scala\npackage com.zaneli.redis.jedis\n\nimport redis.clients.jedis.{HostAndPort, Jedis}\nimport scalikejdbc.using\n\nobject JedisTest2 extends App {\n\n  val nodes = Set(6379, 6380, 6381).map { port =>\n    new HostAndPort(\"192.168.53.52\", port)\n  }\n  using(new Jedis(nodes.head.getHost, nodes.head.getPort)) { jedis =>\n    val p = jedis.pipelined()\n    val v1 = p.get(\"key1\")\n    val v2 = p.get(\"key2\")\n    val v3 = p.get(\"key3\")\n    p.sync()\n    println((v1.get, v2.get, v3.get))\n  }\n}\n```\n\n```\nException in thread \"main\" redis.clients.jedis.exceptions.JedisMovedDataException: MOVED 9189 192.168.53.52:6380\n\tat redis.clients.jedis.Protocol.processError(Protocol.java:108)\n\tat redis.clients.jedis.Protocol.process(Protocol.java:142)\n\tat redis.clients.jedis.Protocol.read(Protocol.java:196)\n\tat redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:288)\n\tat redis.clients.jedis.Connection.getAll(Connection.java:258)\n\tat redis.clients.jedis.Connection.getAll(Connection.java:250)\n\tat redis.clients.jedis.Pipeline.sync(Pipeline.java:85)\n\tat com.zaneli.redis.jedis.JedisTest2$$anonfun$2.apply(JedisTest2.scala:16)\n\n```\n\n(\u3068\u3053\u308d\u3067\u4eca\u56de\u306e\u4f8b\u3067\u306f key2 \u3068 key3 \u306f\u305f\u307e\u305f\u307e\u540c\u3058\u30ce\u30fc\u30c9\u306b\u66f8\u304b\u308c\u308b\u305f\u3081\u3001\u4e0a\u8a18\u306e `val v1 = p.get(\"key1\")`, `v1.get` \u3092\u9664\u304f\u3068\u8aad\u307f\u53d6\u308a\u306b\u6210\u529f\u3059\u308b\u3002)\n\n### JedisPipelinedCluster\u3092\u81ea\u4f5c\u3057\u3066\u304c\u3093\u3070\u308b\n\n\u65e2\u5b58\u306e [JedisCluster](https://github.com/xetorthio/jedis/blob/14ba58b2a46fe54ebfb116b767875e4d83f1abbd/src/main/java/redis/clients/jedis/JedisCluster.java) \u3067\u306e\u5b9f\u88c5\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u3001\u5f37\u5f15\u6c17\u5473\u3067\u306f\u3042\u308b\u304c\u5bfe\u5fdc\u3092\u8a66\u307f\u308b\u3002\n\n[\u3053\u3061\u3089\u306e\u30b0\u30eb\u30fc\u30d7](https://groups.google.com/forum/#!topic/jedis_redis/WOFjPKdBxz0)\u3067\u3082\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\u304c\u3001\n\u305d\u3082\u305d\u3082\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306fRedis Cluster\u74b0\u5883\u3067\u3082\u540c\u3058\u30ce\u30fc\u30c9\u5185\u3067\u3057\u304b\u884c\u3048\u306a\u3044\u305f\u3081\u3001\n`JedisTest2.scala` \u3068\u3042\u307e\u308a\u5909\u308f\u3089\u305a\u30ce\u30fc\u30c9\u306e\u7279\u5b9a\u3092\u3082\u3046\u5c11\u3057\u30de\u30b7\u306b\u3067\u304d\u308b\u304f\u3089\u3044\u304c\u843d\u3068\u3057\u6240\u304b\u2026\u3002\n\n```scala:JedisPipelinedCluster.scala\npackage com.zaneli.redis.jedis\n\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig\nimport redis.clients.jedis.{HostAndPort, JedisSlotBasedConnectionHandler, Pipeline, Protocol}\nimport redis.clients.jedis.exceptions.{JedisClusterMaxRedirectionsException, JedisMovedDataException}\nimport redis.clients.util.JedisClusterCRC16\nimport scalikejdbc.using\n\nimport scala.annotation.tailrec\nimport scala.collection.JavaConversions._\nimport scala.util.{Failure, Try}\n\nclass JedisPipelinedCluster(\n    nodes: Set[HostAndPort],\n    config: GenericObjectPoolConfig = new GenericObjectPoolConfig(),\n    timeout: Int = Protocol.DEFAULT_TIMEOUT,\n    maxRedirections: Int = 5) {\n\n  private[this] val handler = new JedisSlotBasedConnectionHandler(nodes, config, timeout)\n\n  def pipelined[A](key: String)(cmd: Pipeline => A): Try[A] =\n    pipelined(key, cmd, maxRedirections)\n\n  @tailrec\n  private[this] def pipelined[A](key: String, cmd: Pipeline => A, redirections: Int): Try[A] = {\n    val result = Try {\n      val slot = JedisClusterCRC16.getSlot(key)\n      using(handler.getConnectionFromSlot(slot)) { jedis =>\n        val pipeline = jedis.pipelined()\n        cmd(pipeline)\n      }\n    }\n    result match {\n      case Failure(e: JedisMovedDataException) =>\n        if (redirections <= 0) {\n          Failure(new JedisClusterMaxRedirectionsException(\"Too many Cluster redirections?\"))\n        } else {\n          pipelined(key, cmd, redirections - 1)\n        }\n      case r => r\n    }\n  }\n}\n\n```\n\n```scala:JedisTest3.scala\npackage com.zaneli.redis.jedis\n\nimport redis.clients.jedis.HostAndPort\n\nimport scala.util.{Failure, Success}\n\nobject JedisTest3 extends App {\n\n  val nodes = Set(6379, 6380, 6381).map { port =>\n    new HostAndPort(\"192.168.53.52\", port)\n  }\n  val cluster = new JedisPipelinedCluster(nodes)\n  val result = cluster.pipelined(\"key2\") { p =>\n    val v2 = p.get(\"key2\")\n    val v3 = p.get(\"key3\")\n    p.sync()\n    (v2.get, v3.get)\n  }\n  result match {\n    case Success((v2, v3)) => println((v2, v3))\n    case Failure(e) => e.printStackTrace()\n  }\n}\n\n```\n\n\u2026\u3046\u30fc\u3093\u3001\u7d50\u5c40\u30ce\u30fc\u30c9\u7279\u5b9a\u306e\u305f\u3081\u306e\u30ad\u30fc\u3092\u5225\u9014\u6e21\u3057\u3066\u3044\u308b\u306e\u304c\u6b8b\u5ff5\u2026\u3002\n`cluster.pipelined(\"key1\")` \u3092\u6e21\u3057\u3066 `p.get(\"key2\")` \u3057\u305f\u308a\u3059\u308b\u3068\u7d50\u5c40 `JedisClusterMaxRedirectionsException` \u304c\u767a\u751f\u3059\u308b\u3002\n\n### \u3082\u3046\u3061\u3087\u3063\u3068\u5b9f\u7528\u7684\u306b\n\nRedis Cluster\u306eslot\u306f\u3001\u30ad\u30fc\u5168\u4f53\u3067\u306f\u306a\u304f `{...}` \u3067\u56f2\u3093\u3060\u90e8\u5206\u306b\u7d5e\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\n\u3064\u307e\u308a\u3001\u8907\u6570\u30ad\u30fc\u3092\u540c\u3058\u30ce\u30fc\u30c9\u306b\u66f8\u304d\u305f\u3044\u5834\u5408\u3001\u30ad\u30fc\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092 `{...}` \u3068\u3057\u3001\u3053\u306e\u4e2d\u306e\u6587\u5b57\u5217\u3092\u4e00\u81f4\u3055\u305b\u308c\u3070\u3044\u3044\u3002\n\n\u3053\u3093\u306acase class\u304c\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306e\u5024\u3092Redis\u306b\u66f8\u304d\u8fbc\u307f\u305f\u3044\u3068\u3059\u308b\u3002\n\n```scala:SuperWrestler.scala\npackage com.zaneli.redis.jedis\n\nimport scala.collection.JavaConversions._\nimport scala.util.Try\n\ncase class SuperWrestler(id: Int, name: String, power: Int, favoriteHolds: List[String], family: Map[String, String])\n\nobject SuperWrestler extends RedisAccessor {\n  override def prefix(id: Int): String = s\"sw$id\"\n\n  def read(id: Int)(implicit cluster: JedisPipelinedCluster): Try[SuperWrestler] = {\n    cluster.pipelined(prefix(id)) { p =>\n      val name = p.get(key(id, \"name\"))\n      val power = p.get(key(id, \"power\"))\n      val favoriteHolds = p.lrange(key(id, \"favoriteHolds\"), 0, -1)\n      val family = p.hgetAll(key(id, \"family\"))\n      p.sync()\n      SuperWrestler(id, name.get, power.get.toInt, favoriteHolds.get.toList, family.get.toMap)\n    }\n  }\n\n  def write(sw: SuperWrestler)(implicit cluster: JedisPipelinedCluster): Boolean = {\n    cluster.pipelined(prefix(sw.id)) { p =>\n      p.set(key(sw.id, \"name\"), sw.name)\n      p.set(key(sw.id, \"power\"), sw.power.toString)\n      p.del(key(sw.id, \"favoriteHolds\"), key(sw.id, \"family\"))\n      sw.favoriteHolds.map(p.rpush(key(sw.id, \"favoriteHolds\"), _))\n      sw.family.map { case (k, v) => p.hset(key(sw.id, \"family\"), k, v) }\n      p.sync()\n    }.isSuccess\n  }\n}\n\ntrait RedisAccessor {\n  def prefix(id: Int): String\n  def key(id: Int, name: String): String = s\"{${prefix(id)}}$name\"\n}\n\n```\n\n```scala:SuperWrestlerTest.scala\npackage com.zaneli.redis.jedis\n\nimport redis.clients.jedis.HostAndPort\n\nobject SuperWrestlerTest {\n\n  def main(args: Array[String]) {\n    val nodes = Set(6379, 6380, 6381).map { port =>\n      new HostAndPort(\"192.168.53.52\", port)\n    }\n    implicit val cluster = new JedisPipelinedCluster(nodes)\n\n    val kinnikuman = SuperWrestler(\n      1, \"\u30ad\u30f3\u8089\u30de\u30f3\", 95, List(\"\u30ad\u30f3\u8089\u30d0\u30b9\u30bf\u30fc\", \"\u30ad\u30f3\u8089\u30c9\u30e9\u30a4\u30d0\u30fc\", \"\u30de\u30c3\u30b9\u30eb\u30b9\u30d1\u30fc\u30af\"), Map(\"\u7236\" -> \"\u30ad\u30f3\u8089\u771f\u5f13\", \"\u6bcd\" -> \"\u30ad\u30f3\u8089\u5c0f\u767e\u5408\"))\n\n    val terryman = SuperWrestler(\n      2, \"\u30c6\u30ea\u30fc\u30de\u30f3\", 95, List(\"\u30b9\u30d4\u30cb\u30f3\u30b0\u30c8\u30a5\u30db\u30fc\u30eb\u30c9\", \"\u30ab\u30fc\u30d5\u30d6\u30e9\u30f3\u30c7\u30a3\u30f3\u30b0\", \"\u30c6\u30ad\u30b5\u30b9\u30b3\u30f3\u30c9\u30eb\u30ad\u30c3\u30af\"), Map(\"\u7236\" -> \"\u30c9\u30ea\u30fc\u30de\u30f3\"))\n\n    val robinMask = SuperWrestler(\n      3, \"\u30ed\u30d3\u30f3\u30de\u30b9\u30af\", 96, List(\"\u30bf\u30ef\u30fc\u30d6\u30ea\u30c3\u30b8\", \"\u30ed\u30d3\u30f3\u30b9\u30da\u30b7\u30e3\u30eb\"), Map(\"\u7236\" -> \"\u30ed\u30d3\u30f3\u30ca\u30a4\u30c8\"))\n\n    Seq(kinnikuman, terryman, robinMask) foreach SuperWrestler.write\n\n    (1 to 3) foreach (i => println(SuperWrestler.read(i)))\n  }\n}\n```\n\n`SuperWrestler` \u5185\u3067\u306e\u30ad\u30fc\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u56fa\u5b9a\u3057\u3066\u3001\u4e00\u3064\u306e `SuperWrestler` \u306e\u60c5\u5831\u306f\u5168\u3066\u540c\u3058\u30ce\u30fc\u30c9\u306b\u66f8\u304f\u3002\n\u3053\u3046\u3044\u3046\u7528\u9014\u306a\u3089\u3001\u4eca\u56de\u4f5c\u3063\u305f `JedisPipelinedCluster` \u3092\u4f7f\u3046\u3068 `SuperWrestler` \u8aad\u307f\u66f8\u304d\u306e\u969b\u306b\u306f\u5c11\u3057\u306f\u4fbf\u5229\u3001\u304b\u306a\u2026\uff1f\n\n\u3061\u306a\u307f\u306b\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3001\u30ad\u30f3\u8089\u30de\u30f3\u306fport6381, \u30c6\u30ea\u30fc\u30de\u30f3\u306fport6379, \u30ed\u30d3\u30f3\u30de\u30b9\u30af\u306fport6380\u306b\u30d0\u30e9\u3051\u3066\u66f8\u304b\u308c\u305f\u3002 :)\t\n", "tags": ["Scala", "Redis", "Jedis"]}