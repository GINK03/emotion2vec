{"context": "(\u9762\u5012\u304f\u3055\u3044\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u6a5f\u80fd\u30921\u30d5\u30a1\u30a4\u30eb\u3067\u8a66\u3057\u305f\u3044\u6642\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067 onefile \u3068\u3044\u3046\u30bf\u30b0\u3092\u4f5c\u3063\u305f\u306e\u3067\u3059\u304c\u3002\u52dd\u624b\u306b\u4f5c\u3063\u3066\u3082\u826f\u3044\u3082\u306e\u306a\u306e\u304b\u3069\u3046\u304b\u5206\u304b\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002)\n\n\u306f\u3058\u3081\u306b\ndjango restframework \u306fdjango\u306e\u4e0a\u306b\u69cb\u6210\u3055\u308c\u305fframework\u3002REST API\u3092\u4f5c\u308b\u969b\u306b\u306f\u4fbf\u5229\u3067\u306f\u3042\u308b\u306e\u3060\u3051\u308c\u3069\u3002\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u6a5f\u80fd\u306e\u78ba\u8a8d\u3092\u3059\u308b\u306e\u304c\u9762\u5012\u3002\u7d50\u5c40\u3001\u5185\u90e8\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u6319\u52d5\u3092\u628a\u63e1\u3059\u308b\u306e\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306a\u3069\u3092\u8aad\u3080\u3088\u308a\u3082\u697d\u306a\u3053\u3068\u3082\u591a\u3044\u306e\u3060\u3051\u308c\u3069\u3002\u6a5f\u80fd\u3092\u624b\u8efd\u306b\u8a66\u305b\u308b\u74b0\u5883\u3092\u4f5c\u3063\u3066\u3044\u3066\u3082\u640d\u306f\u306a\u3044\u3002\n\u4ee5\u4e0b\u306e\u69d8\u306a\u30b3\u30fc\u30c9\u3067 django restframework \u306e\u6a5f\u80fd\u3092\u8a66\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u3002(\u4e01\u5be7\u306b\u8aad\u307e\u305a\u306b\u8aad\u307f\u98db\u3070\u3057\u3066\u826f\u3044)\n# \u3053\u306eshortcut module\u3092\u4f5c\u308d\u3046\u3068\u3044\u3046\u8a71\nfrom shortcut import App  # shorthand\nfrom shortcut import do_get, do_post, do_delete\n\napp = App()\napp.setup(apps=[__name__], root_urlconf=__name__)\n\n\nfrom rest_framework import routers, serializers, viewsets\n\n# models\nfrom django.contrib.auth.models import User\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'url', 'username', 'email', 'is_staff')\n\n\n# viewsets\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\n# Routers provide an easy way of automatically determining the URL conf.\nrouter = routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\nurlpatterns = app.setup_urlconf(router)\n\nif __name__ == \"__main__\":\n    app.create_table(User)\n    parser = app.create_arg_parser()\n    args = parser.parse_args()\n\n    if args.run_server:\n        app.run_server(port=8080)\n    else:\n        app.run_client(main_client)\n\n\n\u4f7f\u3044\u65b9\n\u4f7f\u3044\u65b9\u306b\u95a2\u3059\u308b\u6ce8\u610f\u3084\u8aac\u660e\u3002\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n\u5f8c\u306b\u4f5c\u308b shortcut.py \u306b\u4f9d\u5b58\u3059\u308b\u306e\u3067\u4ee5\u4e0b\u306e\u69d8\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002(\u3082\u3061\u308d\u3093\u771f\u9762\u76ee\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u3063\u3066\u3082\u826f\u3044)\n.\n\u251c\u2500\u2500 shortcut.py\n\u2514\u2500\u2500 view-sample1.py  # \u8a66\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\n\nview-sample1.py \u3068 - \u3092\u4ed8\u3051\u308b\u306e\u306fpython\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3068\u3057\u3066\u306f\u4e0d\u9069\u5207\u3002(\u4ed6\u304b\u3089import\u3055\u308c\u3088\u3046\u3068\u3057\u305f\u6642\u306bimport\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u307b\u3057\u3044\u3068\u3044\u3046\u6c17\u6301\u3061\u3067\u500b\u4eba\u7684\u306b\u306f\u4e0d\u9069\u5207\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4ed8\u3051\u3066\u3044\u308b\u304c\u3042\u307e\u308a\u610f\u5473\u306f\u306a\u3044)\n\nimport\u306e\u9806\u5e8f\ndjango\u306e\u8a2d\u8a08\u306e\u60aa\u3055\u306b\u3088\u308aimport\u306e\u9806\u5e8f\u3092\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u9806\u5e8f\u3084\u4f4d\u7f6e\u306f\u5b88\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nfrom shortcut import App  # shorthand\nfrom shortcut import do_get, do_post, do_delete\n\n# restframework\u3092import\u3059\u308b\u524d\u306b\u8272\u3005\u3068\u8a2d\u5b9a\u304c\u5fc5\u8981\napp = App()\napp.setup(apps=[__name__], root_urlconf=__name__)\n\n# model\u3084restframework\u306emodule\u3092import\nfrom django.contrib.auth.models import User\nfrom rest_framework import routers, serializers, viewsets\n\ndjango restframework\u306emodule\u3092import\u3057\u305f\u77ac\u9593\u306bdjango\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u306a\u3069\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u524d\u306b\u8272\u3005\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002 urls.py \u3092\u5206\u3051\u305f\u308a django app \u3092\u5206\u3051\u305f\u3044\u5834\u5408\u306b\u306f app.setup() \u306e\u5f15\u6570\u304c\u5909\u308f\u308b\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f1\u30d5\u30a1\u30a4\u30eb\u3067\u8a66\u3059\u65b9\u6cd5\u306e\u7d39\u4ecb\u306a\u306e\u3067 __name__ \u3067\u56fa\u5b9a\u3067\u826f\u3044\u3002\n\nmodel, serializer, router\u3092\u96d1\u306b\u5b9a\u7fa9\n\u3053\u306e\u3042\u305f\u308a\u306fdjango restframework\u306e\u6a5f\u80fd\u306a\u306e\u3067\u8a73\u7d30\u306f\u8aac\u660e\u3057\u306a\u3044\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306a\u3069\u53c2\u7167\u306e\u3053\u3068\u3002\nfrom django.contrib.auth.models import User\n# models\nfrom rest_framework import routers, serializers, viewsets\n\n# serializers\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'url', 'username', 'email', 'is_staff')\n\n\n# viewsets\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n# Routers provide an easy way of automatically determining the URL conf.\nrouter = routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\nurlpatterns = app.setup_urlconf(router)\n\n\u57fa\u672c\u7684\u306b\u306fmodel\u306e\u51fa\u529b\u8868\u73fe\u3084varidation\u3092serialier\u304c\u63d0\u4f9b\u3057\u3001serialiezer\u3092\u5229\u7528\u3057\u305f\u4e00\u9023\u306eview\u3092viewset\u304c\u53d7\u3051\u6301\u3061\u3001viewset\u3092router\u306b\u767b\u9332\u3059\u308b\u3068\u5404\u7a2eREST API\u304c\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\nmodel\u5b9a\u7fa9\u6642\u306e\u6ce8\u610f\u70b9\n\u305d\u3046\u8a00\u3048\u3070\u5fd8\u308c\u3066\u3044\u305f\u3051\u308c\u3069\u30021\u30d5\u30a1\u30a4\u30eb\u3067\u8a66\u3059\u5834\u5408\u306b\u306f\u5b9a\u7fa9\u3059\u308b\u30e2\u30c7\u30eb\u304c\u6240\u5c5e\u3059\u308b django app \u3092\u6c7a\u3081\u308b\u305f\u3081\u306b __meta__.app_label \u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306b\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3068\u826f\u3044\u3002\nclass Skill(models.Model):\n    name = models.CharField(max_length=255, default=\"\", null=False)\n    user = models.ForeignKey(User, null=False, related_name=\"skills\")\n\n    class Meta:\n        app_label = __name__\n\n\nserver\u3068\u3057\u3066\u5229\u7528\u3082\u3057\u304f\u306f\u5b9f\u884c\u4f8b\u3092\u8868\u793a\n--run-server \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u7acb\u3061\u4e0a\u3052\u308b\u3068\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002 browsable api\u3082\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3066\u30d5\u30a9\u30fc\u30e0\u306b\u4f55\u3089\u304b\u306e\u5024\u3092\u5165\u529b\u3057\u3066GET/POST/PUT/DELETE\u306a\u3069\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u5185\u90e8\u7684\u306b\u306f django \u306e runserver \u3092\u547c\u3093\u3067\u3044\u308b\u3060\u3051\u3002\n$ python view-sample1.py --run-server\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have unapplied migrations; your app may not work properly until they are applied.\nRun 'python manage.py migrate' to apply them.\n\nJuly 18, 2016 - 23:32:11\nDjango version 1.9.6, using settings None\nStarting development server at http://127.0.0.1:8080/\nQuit the server with CONTROL-C.\n\n\n\u30e2\u30c7\u30eb\u306e\u5229\u7528(\u6c38\u7d9a\u5316)\n\u5229\u7528\u3055\u308c\u308b\u30e2\u30c7\u30eb\u81ea\u4f53\u306f sqlite\u306e \u30a4\u30f3\u30e1\u30e2\u30ea\u30fcDB\u306b\u767b\u9332\u3055\u308c\u308b\u8a2d\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6bce\u56detable\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4ee5\u4e0b\u3067\u884c\u306a\u3063\u3066\u3044\u308b\u3002\napp.create_table(User)\n\n\n\u7121\u5f15\u6570\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306b\u306f\u5b9f\u884c\u4f8b\u306e\u8868\u793a\n\u7121\u5f15\u6570\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306b\u306f django.test.client.Client \u306b\u3088\u308b\u5b9f\u884c\u4f8b\u306e\u8868\u793a\u3002\u4e0a\u306e\u4f8b\u3067\u306f main_client() \u304c\u547c\u3070\u308c\u308b\u60f3\u5b9a\u3060\u304c\u66f8\u3044\u3066\u3044\u306a\u3044\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306b\u3057\u3066\u66f8\u304f\u3002\ndef main_client(client):\n    \"\"\"call view via Client\"\"\"\n    # success request\n    msg = \"listing (empty)\"\n    do_get(client, msg, \"/users/\")\n\n    msg = \"create user (name=foo)\"\n    do_post(client, msg, \"/users/\", {\"username\": \"foo\"})\n    msg = \"create user (name=bar)\"\n    do_post(client, msg, \"/users/\", {\"username\": \"bar\"})\n\n    msg = \"listing\"\n    do_get(client, msg, \"/users/\")\n\n    msg = \"show information for user(id=1)\"\n    do_get(client, msg, \"/users/1/\")\n\n    msg = \"delete user(id=1)\"\n    do_delete(client, msg, \"/users/1\")\n\n    msg = \"listing\"\n    do_get(client, msg, \"/users/\")\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308b\u3002 (python view-sample1.py)\nlisting (empty)\nrequest: GET /users/\nstatus code: 200\nresponse: []\n\ncreate user (name=foo)\nrequest: POST /users/\nstatus code: 201\nresponse: {\n  \"id\": 1,\n  \"url\": \"http://testserver/users/1/\",\n  \"username\": \"foo\",\n  \"email\": \"\",\n  \"is_staff\": false\n}\n\ncreate user (name=bar)\nrequest: POST /users/\nstatus code: 201\nresponse: {\n  \"id\": 2,\n  \"url\": \"http://testserver/users/2/\",\n  \"username\": \"bar\",\n  \"email\": \"\",\n  \"is_staff\": false\n}\n\nlisting\nrequest: GET /users/\nstatus code: 200\nresponse: [\n  {\n    \"id\": 1,\n    \"url\": \"http://testserver/users/1/\",\n    \"username\": \"foo\",\n    \"email\": \"\",\n    \"is_staff\": false\n  },\n  {\n    \"id\": 2,\n    \"url\": \"http://testserver/users/2/\",\n    \"username\": \"bar\",\n    \"email\": \"\",\n    \"is_staff\": false\n  }\n]\n\nshow information for user(id=1)\nrequest: GET /users/1/\nstatus code: 200\nresponse: {\n  \"id\": 1,\n  \"url\": \"http://testserver/users/1/\",\n  \"username\": \"foo\",\n  \"email\": \"\",\n  \"is_staff\": false\n}\n\ndelete user(id=1)\nrequest: DELETE /users/1/\nstatus code: 204\n\nlisting\nrequest: GET /users/\nstatus code: 200\nresponse: [\n  {\n    \"id\": 2,\n    \"url\": \"http://testserver/users/2/\",\n    \"username\": \"bar\",\n    \"email\": \"\",\n    \"is_staff\": false\n  }\n]\n\n\nshortcut.py\nshortcut.py\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3053\u3061\u3089\u306e\u8aac\u660e\u306f\u9762\u5012\u306a\u306e\u3067\u3057\u306a\u3044\u3002\nimport os.path\nimport json\nimport copy\nimport importlib\nimport argparse\nfrom django.db import connections\nfrom django.test.client import Client\n\n\ndefault_settings = dict(\n    DEBUG=True,\n    ALLOWED_HOSTS=['*'],\n    INSTALLED_APPS=[\n        \"django.contrib.staticfiles\",\n        \"django.contrib.contenttypes\",\n        \"django.contrib.auth\",\n        \"rest_framework\",\n    ],\n    STATIC_URL='/static/',\n    MIDDLEWARE_CLASSES=(\n        'django.middleware.common.CommonMiddleware',\n    ),\n    REST_FRAMEWORK={\n        \"DEFAULT_PERMISSION_CLASS\": [\n            \"rest_framework.permissions.AllowAny\"\n        ]\n    },\n    DATABASES={\"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": \":memory:\"\n    }},\n    CACHES={\n        'default': {\n            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        }\n    },\n    TEMPLATES=[\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [],\n            'APP_DIRS': True\n        },\n    ]\n)\n\n\ndef create_table(model, dbalias=\"default\"):\n    connection = connections[dbalias]\n    with connection.schema_editor() as schema_editor:\n        schema_editor.create_model(model)\n\n\ndef maybe_list(x):\n    if isinstance(x, (list, tuple)):\n        return x\n    else:\n        return [x]\n\n\nclass SettingsHandler(object):\n    defaults = {\n        \"settings\": default_settings,\n        \"STATIC_ROOT\": None,\n        \"dbalias\": \"default\"\n    }\n\n    def get_settings_options(self, root_urlconf):\n        options = copy.copy(self.defaults[\"settings\"])\n        options.update(\n            STATIC_ROOT=self.defaults[\"STATIC_ROOT\"] or self.get_static_root(),\n            ROOT_URLCONF=root_urlconf\n        )\n        return options\n\n    def get_static_root(self):\n        import rest_framework\n        return os.path.abspath(os.path.join(rest_framework.__path__[0], 'static'))\n\n\nclass App(object):\n    def __init__(self, settings_handler=SettingsHandler()):\n        self.settings_handler = settings_handler\n\n    def setup(self, apps, root_urlconf, extra_settings=None):\n        import django\n        from django.conf import settings\n        apps = maybe_list(apps)\n        options = self.settings_handler.get_settings_options(root_urlconf)\n        options[\"INSTALLED_APPS\"].extend(apps)\n        if extra_settings:\n            options.update(extra_settings)\n        settings.configure(**options)\n        django.setup()\n\n    def setup_urlconf(self, router):\n        # url\n        from django.conf.urls import url, include\n        from django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\n        urlpatterns = [\n            url(r'^', include(router.urls))\n        ]\n        urlpatterns += staticfiles_urlpatterns()\n        return urlpatterns\n\n    def load_module(self, module_name):\n        return importlib.import_module(module_name)\n\n    def run(self, main_client):\n        parser = self.create_arg_parser()\n        args = parser.parse_args()\n\n        if args.run_server:\n            self.run_server(port=8080)\n        else:\n            self.run_client(main_client)\n\n    def run_server(self, port=8000):\n        from django.core.management.commands.runserver import Command\n        return Command().execute(addrport=str(port))\n\n    def run_client(self, callback):\n        client = Client()\n        return callback(client)\n\n    def create_arg_parser(self):\n        parser = argparse.ArgumentParser()\n        parser.add_argument(\"--run-server\", dest=\"run_server\", action=\"store_true\", default=False)\n        return parser\n\n    def create_table(self, *models):\n        for model in models:\n            create_table(model, dbalias=self.settings_handler.defaults[\"dbalias\"])\n\n\ndef do_get(client, msg, path):\n    print(msg)\n    print(\"```\")\n    print(\"request: GET {}\".format(path))\n    response = client.get(path)\n    print(\"status code: {response.status_code}\".format(response=response))\n    print(\"response: {content}\".format(content=json.dumps(response.data, indent=2)))\n    print(\"```\")\n\n\ndef do_post(client, msg, path, data):\n    print(msg)\n    print(\"```\")\n    print(\"request: POST {}\".format(path))\n    response = client.post(path, data)\n    print(\"status code: {response.status_code}\".format(response=response))\n    print(\"response: {content}\".format(content=json.dumps(response.data, indent=2)))\n    print(\"```\")\n\n\ndef do_delete(client, msg, path):\n    print(msg)\n    print(\"```\")\n    print(\"request: DELETE {}\".format(path))\n    response = client.delete(path)\n    print(\"status code: {response.status_code}\".format(response=response))\n    print(\"```\")\n\n\n\u8ffd\u8a18(pagination\u306e\u6a5f\u80fd\u3092\u8a66\u3057\u3066\u307f\u308b)\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5909\u66f4\u3092\u52a0\u3048\u308b\u3068pagination\u306e\u6a5f\u80fd\u3092\u8a66\u305b\u308b\u3002\n--- view-sample1.py 2016-07-18 23:39:33.000000000 +0900\n+++ view-sample2.py 2016-07-19 00:02:14.000000000 +0900\n@@ -16,10 +20,21 @@\n         fields = ('id', 'url', 'username', 'email', 'is_staff')\n\n\n+# pagination\n+from rest_framework import pagination\n+\n+\n+class MyPagination(pagination.PageNumberPagination):\n+    page_size = 5\n+    page_size_query_param = 'page_size'\n+    max_page_size = 10000\n+\n+\n # viewsets\n class UserViewSet(viewsets.ModelViewSet):\n     queryset = User.objects.all()\n     serializer_class = UserSerializer\n+    pagination_class = MyPagination\n\n\n # Routers provide an easy way of automatically determining the URL conf.\n\npage_size=5\u3067\u306e\u4e00\u89a7\u8868\u793a\u3002\nrequest: GET /users/\nstatus code: 200\nresponse: {\n  \"count\": 10,\n  \"next\": \"http://testserver/users/?page=2\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 1,\n      \"url\": \"http://testserver/users/1/\",\n      \"username\": \"foo0\",\n      \"email\": \"\",\n      \"is_staff\": false\n    },\n    {\n      \"id\": 2,\n      \"url\": \"http://testserver/users/2/\",\n      \"username\": \"foo1\",\n      \"email\": \"\",\n      \"is_staff\": false\n    },\n    {\n      \"id\": 3,\n      \"url\": \"http://testserver/users/3/\",\n      \"username\": \"foo2\",\n      \"email\": \"\",\n      \"is_staff\": false\n    },\n    {\n      \"id\": 4,\n      \"url\": \"http://testserver/users/4/\",\n      \"username\": \"foo3\",\n      \"email\": \"\",\n      \"is_staff\": false\n    },\n    {\n      \"id\": 5,\n      \"url\": \"http://testserver/users/5/\",\n      \"username\": \"foo4\",\n      \"email\": \"\",\n      \"is_staff\": false\n    }\n  ]\n}\n\n(\u9762\u5012\u304f\u3055\u3044\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u6a5f\u80fd\u30921\u30d5\u30a1\u30a4\u30eb\u3067\u8a66\u3057\u305f\u3044\u6642\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067 [onefile](http://qiita.com/tags/onefile) \u3068\u3044\u3046\u30bf\u30b0\u3092\u4f5c\u3063\u305f\u306e\u3067\u3059\u304c\u3002\u52dd\u624b\u306b\u4f5c\u3063\u3066\u3082\u826f\u3044\u3082\u306e\u306a\u306e\u304b\u3069\u3046\u304b\u5206\u304b\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002)\n\n## \u306f\u3058\u3081\u306b\n\n[django restframework](http://www.django-rest-framework.org/) \u306fdjango\u306e\u4e0a\u306b\u69cb\u6210\u3055\u308c\u305fframework\u3002REST API\u3092\u4f5c\u308b\u969b\u306b\u306f\u4fbf\u5229\u3067\u306f\u3042\u308b\u306e\u3060\u3051\u308c\u3069\u3002\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u6a5f\u80fd\u306e\u78ba\u8a8d\u3092\u3059\u308b\u306e\u304c\u9762\u5012\u3002\u7d50\u5c40\u3001\u5185\u90e8\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u6319\u52d5\u3092\u628a\u63e1\u3059\u308b\u306e\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306a\u3069\u3092\u8aad\u3080\u3088\u308a\u3082\u697d\u306a\u3053\u3068\u3082\u591a\u3044\u306e\u3060\u3051\u308c\u3069\u3002\u6a5f\u80fd\u3092\u624b\u8efd\u306b\u8a66\u305b\u308b\u74b0\u5883\u3092\u4f5c\u3063\u3066\u3044\u3066\u3082\u640d\u306f\u306a\u3044\u3002\n\n\u4ee5\u4e0b\u306e\u69d8\u306a\u30b3\u30fc\u30c9\u3067 django restframework \u306e\u6a5f\u80fd\u3092\u8a66\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u3002(\u4e01\u5be7\u306b\u8aad\u307e\u305a\u306b\u8aad\u307f\u98db\u3070\u3057\u3066\u826f\u3044)\n\n```py\n# \u3053\u306eshortcut module\u3092\u4f5c\u308d\u3046\u3068\u3044\u3046\u8a71\nfrom shortcut import App  # shorthand\nfrom shortcut import do_get, do_post, do_delete\n\napp = App()\napp.setup(apps=[__name__], root_urlconf=__name__)\n\n\nfrom rest_framework import routers, serializers, viewsets\n\n# models\nfrom django.contrib.auth.models import User\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'url', 'username', 'email', 'is_staff')\n\n\n# viewsets\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\n# Routers provide an easy way of automatically determining the URL conf.\nrouter = routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\nurlpatterns = app.setup_urlconf(router)\n\nif __name__ == \"__main__\":\n    app.create_table(User)\n    parser = app.create_arg_parser()\n    args = parser.parse_args()\n\n    if args.run_server:\n        app.run_server(port=8080)\n    else:\n        app.run_client(main_client)\n```\n\n## \u4f7f\u3044\u65b9\n\n\u4f7f\u3044\u65b9\u306b\u95a2\u3059\u308b\u6ce8\u610f\u3084\u8aac\u660e\u3002\n\n### \u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n\n\u5f8c\u306b\u4f5c\u308b `shortcut.py` \u306b\u4f9d\u5b58\u3059\u308b\u306e\u3067\u4ee5\u4e0b\u306e\u69d8\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002(\u3082\u3061\u308d\u3093\u771f\u9762\u76ee\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u3063\u3066\u3082\u826f\u3044)\n\n```\n.\n\u251c\u2500\u2500 shortcut.py\n\u2514\u2500\u2500 view-sample1.py  # \u8a66\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\n```\n\n`view-sample1.py` \u3068 `-` \u3092\u4ed8\u3051\u308b\u306e\u306fpython\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3068\u3057\u3066\u306f\u4e0d\u9069\u5207\u3002(\u4ed6\u304b\u3089import\u3055\u308c\u3088\u3046\u3068\u3057\u305f\u6642\u306bimport\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u307b\u3057\u3044\u3068\u3044\u3046\u6c17\u6301\u3061\u3067\u500b\u4eba\u7684\u306b\u306f\u4e0d\u9069\u5207\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4ed8\u3051\u3066\u3044\u308b\u304c\u3042\u307e\u308a\u610f\u5473\u306f\u306a\u3044)\n\n### import\u306e\u9806\u5e8f\n\ndjango\u306e\u8a2d\u8a08\u306e\u60aa\u3055\u306b\u3088\u308aimport\u306e\u9806\u5e8f\u3092\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u9806\u5e8f\u3084\u4f4d\u7f6e\u306f\u5b88\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n```py\nfrom shortcut import App  # shorthand\nfrom shortcut import do_get, do_post, do_delete\n\n# restframework\u3092import\u3059\u308b\u524d\u306b\u8272\u3005\u3068\u8a2d\u5b9a\u304c\u5fc5\u8981\napp = App()\napp.setup(apps=[__name__], root_urlconf=__name__)\n\n# model\u3084restframework\u306emodule\u3092import\nfrom django.contrib.auth.models import User\nfrom rest_framework import routers, serializers, viewsets\n```\n\ndjango restframework\u306emodule\u3092import\u3057\u305f\u77ac\u9593\u306bdjango\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u306a\u3069\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u524d\u306b\u8272\u3005\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002 `urls.py` \u3092\u5206\u3051\u305f\u308a `django app` \u3092\u5206\u3051\u305f\u3044\u5834\u5408\u306b\u306f `app.setup()` \u306e\u5f15\u6570\u304c\u5909\u308f\u308b\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f1\u30d5\u30a1\u30a4\u30eb\u3067\u8a66\u3059\u65b9\u6cd5\u306e\u7d39\u4ecb\u306a\u306e\u3067 `__name__` \u3067\u56fa\u5b9a\u3067\u826f\u3044\u3002\n\n\n### model, serializer, router\u3092\u96d1\u306b\u5b9a\u7fa9\n\n\u3053\u306e\u3042\u305f\u308a\u306fdjango restframework\u306e\u6a5f\u80fd\u306a\u306e\u3067\u8a73\u7d30\u306f\u8aac\u660e\u3057\u306a\u3044\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306a\u3069\u53c2\u7167\u306e\u3053\u3068\u3002\n\n```py\nfrom django.contrib.auth.models import User\n# models\nfrom rest_framework import routers, serializers, viewsets\n\n# serializers\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'url', 'username', 'email', 'is_staff')\n\n\n# viewsets\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    \n# Routers provide an easy way of automatically determining the URL conf.\nrouter = routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\nurlpatterns = app.setup_urlconf(router)\n```\n\n\u57fa\u672c\u7684\u306b\u306fmodel\u306e\u51fa\u529b\u8868\u73fe\u3084varidation\u3092serialier\u304c\u63d0\u4f9b\u3057\u3001serialiezer\u3092\u5229\u7528\u3057\u305f\u4e00\u9023\u306eview\u3092viewset\u304c\u53d7\u3051\u6301\u3061\u3001viewset\u3092router\u306b\u767b\u9332\u3059\u308b\u3068\u5404\u7a2eREST API\u304c\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n#### model\u5b9a\u7fa9\u6642\u306e\u6ce8\u610f\u70b9\n\n\u305d\u3046\u8a00\u3048\u3070\u5fd8\u308c\u3066\u3044\u305f\u3051\u308c\u3069\u30021\u30d5\u30a1\u30a4\u30eb\u3067\u8a66\u3059\u5834\u5408\u306b\u306f\u5b9a\u7fa9\u3059\u308b\u30e2\u30c7\u30eb\u304c\u6240\u5c5e\u3059\u308b `django app` \u3092\u6c7a\u3081\u308b\u305f\u3081\u306b `__meta__.app_label` \u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306b\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3068\u826f\u3044\u3002\n\n```py\nclass Skill(models.Model):\n    name = models.CharField(max_length=255, default=\"\", null=False)\n    user = models.ForeignKey(User, null=False, related_name=\"skills\")\n\n    class Meta:\n        app_label = __name__\n```\n\n### server\u3068\u3057\u3066\u5229\u7528\u3082\u3057\u304f\u306f\u5b9f\u884c\u4f8b\u3092\u8868\u793a\n\n`--run-server` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u7acb\u3061\u4e0a\u3052\u308b\u3068\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002 browsable api\u3082\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3066\u30d5\u30a9\u30fc\u30e0\u306b\u4f55\u3089\u304b\u306e\u5024\u3092\u5165\u529b\u3057\u3066GET/POST/PUT/DELETE\u306a\u3069\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u5185\u90e8\u7684\u306b\u306f `django` \u306e `runserver` \u3092\u547c\u3093\u3067\u3044\u308b\u3060\u3051\u3002\n\n```\n$ python view-sample1.py --run-server\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have unapplied migrations; your app may not work properly until they are applied.\nRun 'python manage.py migrate' to apply them.\n\nJuly 18, 2016 - 23:32:11\nDjango version 1.9.6, using settings None\nStarting development server at http://127.0.0.1:8080/\nQuit the server with CONTROL-C.\n```\n\n### \u30e2\u30c7\u30eb\u306e\u5229\u7528(\u6c38\u7d9a\u5316)\n\n\u5229\u7528\u3055\u308c\u308b\u30e2\u30c7\u30eb\u81ea\u4f53\u306f sqlite\u306e \u30a4\u30f3\u30e1\u30e2\u30ea\u30fcDB\u306b\u767b\u9332\u3055\u308c\u308b\u8a2d\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6bce\u56detable\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4ee5\u4e0b\u3067\u884c\u306a\u3063\u3066\u3044\u308b\u3002\n\n```py\napp.create_table(User)\n```\n\n### \u7121\u5f15\u6570\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306b\u306f\u5b9f\u884c\u4f8b\u306e\u8868\u793a\n\n\u7121\u5f15\u6570\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306b\u306f `django.test.client.Client` \u306b\u3088\u308b\u5b9f\u884c\u4f8b\u306e\u8868\u793a\u3002\u4e0a\u306e\u4f8b\u3067\u306f `main_client()` \u304c\u547c\u3070\u308c\u308b\u60f3\u5b9a\u3060\u304c\u66f8\u3044\u3066\u3044\u306a\u3044\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306b\u3057\u3066\u66f8\u304f\u3002\n\n```py\ndef main_client(client):\n    \"\"\"call view via Client\"\"\"\n    # success request\n    msg = \"listing (empty)\"\n    do_get(client, msg, \"/users/\")\n\n    msg = \"create user (name=foo)\"\n    do_post(client, msg, \"/users/\", {\"username\": \"foo\"})\n    msg = \"create user (name=bar)\"\n    do_post(client, msg, \"/users/\", {\"username\": \"bar\"})\n\n    msg = \"listing\"\n    do_get(client, msg, \"/users/\")\n\n    msg = \"show information for user(id=1)\"\n    do_get(client, msg, \"/users/1/\")\n\n    msg = \"delete user(id=1)\"\n    do_delete(client, msg, \"/users/1\")\n\n    msg = \"listing\"\n    do_get(client, msg, \"/users/\")\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308b\u3002 (`python view-sample1.py`)\n\nlisting (empty)\n\n```\nrequest: GET /users/\nstatus code: 200\nresponse: []\n```\ncreate user (name=foo)\n\n```\nrequest: POST /users/\nstatus code: 201\nresponse: {\n  \"id\": 1,\n  \"url\": \"http://testserver/users/1/\",\n  \"username\": \"foo\",\n  \"email\": \"\",\n  \"is_staff\": false\n}\n```\n\ncreate user (name=bar)\n\n```\nrequest: POST /users/\nstatus code: 201\nresponse: {\n  \"id\": 2,\n  \"url\": \"http://testserver/users/2/\",\n  \"username\": \"bar\",\n  \"email\": \"\",\n  \"is_staff\": false\n}\n```\n\nlisting\n\n```\nrequest: GET /users/\nstatus code: 200\nresponse: [\n  {\n    \"id\": 1,\n    \"url\": \"http://testserver/users/1/\",\n    \"username\": \"foo\",\n    \"email\": \"\",\n    \"is_staff\": false\n  },\n  {\n    \"id\": 2,\n    \"url\": \"http://testserver/users/2/\",\n    \"username\": \"bar\",\n    \"email\": \"\",\n    \"is_staff\": false\n  }\n]\n```\n\nshow information for user(id=1)\n\n```\nrequest: GET /users/1/\nstatus code: 200\nresponse: {\n  \"id\": 1,\n  \"url\": \"http://testserver/users/1/\",\n  \"username\": \"foo\",\n  \"email\": \"\",\n  \"is_staff\": false\n}\n```\ndelete user(id=1)\n\n```\nrequest: DELETE /users/1/\nstatus code: 204\n```\n\nlisting\n\n```\nrequest: GET /users/\nstatus code: 200\nresponse: [\n  {\n    \"id\": 2,\n    \"url\": \"http://testserver/users/2/\",\n    \"username\": \"bar\",\n    \"email\": \"\",\n    \"is_staff\": false\n  }\n]\n```\n## shortcut.py\n\nshortcut.py\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3053\u3061\u3089\u306e\u8aac\u660e\u306f\u9762\u5012\u306a\u306e\u3067\u3057\u306a\u3044\u3002\n\n```py\nimport os.path\nimport json\nimport copy\nimport importlib\nimport argparse\nfrom django.db import connections\nfrom django.test.client import Client\n\n\ndefault_settings = dict(\n    DEBUG=True,\n    ALLOWED_HOSTS=['*'],\n    INSTALLED_APPS=[\n        \"django.contrib.staticfiles\",\n        \"django.contrib.contenttypes\",\n        \"django.contrib.auth\",\n        \"rest_framework\",\n    ],\n    STATIC_URL='/static/',\n    MIDDLEWARE_CLASSES=(\n        'django.middleware.common.CommonMiddleware',\n    ),\n    REST_FRAMEWORK={\n        \"DEFAULT_PERMISSION_CLASS\": [\n            \"rest_framework.permissions.AllowAny\"\n        ]\n    },\n    DATABASES={\"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": \":memory:\"\n    }},\n    CACHES={\n        'default': {\n            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        }\n    },\n    TEMPLATES=[\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [],\n            'APP_DIRS': True\n        },\n    ]\n)\n\n\ndef create_table(model, dbalias=\"default\"):\n    connection = connections[dbalias]\n    with connection.schema_editor() as schema_editor:\n        schema_editor.create_model(model)\n\n\ndef maybe_list(x):\n    if isinstance(x, (list, tuple)):\n        return x\n    else:\n        return [x]\n\n\nclass SettingsHandler(object):\n    defaults = {\n        \"settings\": default_settings,\n        \"STATIC_ROOT\": None,\n        \"dbalias\": \"default\"\n    }\n\n    def get_settings_options(self, root_urlconf):\n        options = copy.copy(self.defaults[\"settings\"])\n        options.update(\n            STATIC_ROOT=self.defaults[\"STATIC_ROOT\"] or self.get_static_root(),\n            ROOT_URLCONF=root_urlconf\n        )\n        return options\n\n    def get_static_root(self):\n        import rest_framework\n        return os.path.abspath(os.path.join(rest_framework.__path__[0], 'static'))\n\n\nclass App(object):\n    def __init__(self, settings_handler=SettingsHandler()):\n        self.settings_handler = settings_handler\n\n    def setup(self, apps, root_urlconf, extra_settings=None):\n        import django\n        from django.conf import settings\n        apps = maybe_list(apps)\n        options = self.settings_handler.get_settings_options(root_urlconf)\n        options[\"INSTALLED_APPS\"].extend(apps)\n        if extra_settings:\n            options.update(extra_settings)\n        settings.configure(**options)\n        django.setup()\n\n    def setup_urlconf(self, router):\n        # url\n        from django.conf.urls import url, include\n        from django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\n        urlpatterns = [\n            url(r'^', include(router.urls))\n        ]\n        urlpatterns += staticfiles_urlpatterns()\n        return urlpatterns\n\n    def load_module(self, module_name):\n        return importlib.import_module(module_name)\n\n    def run(self, main_client):\n        parser = self.create_arg_parser()\n        args = parser.parse_args()\n\n        if args.run_server:\n            self.run_server(port=8080)\n        else:\n            self.run_client(main_client)\n\n    def run_server(self, port=8000):\n        from django.core.management.commands.runserver import Command\n        return Command().execute(addrport=str(port))\n\n    def run_client(self, callback):\n        client = Client()\n        return callback(client)\n\n    def create_arg_parser(self):\n        parser = argparse.ArgumentParser()\n        parser.add_argument(\"--run-server\", dest=\"run_server\", action=\"store_true\", default=False)\n        return parser\n\n    def create_table(self, *models):\n        for model in models:\n            create_table(model, dbalias=self.settings_handler.defaults[\"dbalias\"])\n\n\ndef do_get(client, msg, path):\n    print(msg)\n    print(\"```\")\n    print(\"request: GET {}\".format(path))\n    response = client.get(path)\n    print(\"status code: {response.status_code}\".format(response=response))\n    print(\"response: {content}\".format(content=json.dumps(response.data, indent=2)))\n    print(\"```\")\n\n\ndef do_post(client, msg, path, data):\n    print(msg)\n    print(\"```\")\n    print(\"request: POST {}\".format(path))\n    response = client.post(path, data)\n    print(\"status code: {response.status_code}\".format(response=response))\n    print(\"response: {content}\".format(content=json.dumps(response.data, indent=2)))\n    print(\"```\")\n\n\ndef do_delete(client, msg, path):\n    print(msg)\n    print(\"```\")\n    print(\"request: DELETE {}\".format(path))\n    response = client.delete(path)\n    print(\"status code: {response.status_code}\".format(response=response))\n    print(\"```\")\n```\n\n## \u8ffd\u8a18(pagination\u306e\u6a5f\u80fd\u3092\u8a66\u3057\u3066\u307f\u308b)\n\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5909\u66f4\u3092\u52a0\u3048\u308b\u3068pagination\u306e\u6a5f\u80fd\u3092\u8a66\u305b\u308b\u3002\n\n```diff\n--- view-sample1.py\t2016-07-18 23:39:33.000000000 +0900\n+++ view-sample2.py\t2016-07-19 00:02:14.000000000 +0900\n@@ -16,10 +20,21 @@\n         fields = ('id', 'url', 'username', 'email', 'is_staff')\n \n \n+# pagination\n+from rest_framework import pagination\n+\n+\n+class MyPagination(pagination.PageNumberPagination):\n+    page_size = 5\n+    page_size_query_param = 'page_size'\n+    max_page_size = 10000\n+\n+\n # viewsets\n class UserViewSet(viewsets.ModelViewSet):\n     queryset = User.objects.all()\n     serializer_class = UserSerializer\n+    pagination_class = MyPagination\n \n \n # Routers provide an easy way of automatically determining the URL conf.\n```\n\npage_size=5\u3067\u306e\u4e00\u89a7\u8868\u793a\u3002\n\n```\nrequest: GET /users/\nstatus code: 200\nresponse: {\n  \"count\": 10,\n  \"next\": \"http://testserver/users/?page=2\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 1,\n      \"url\": \"http://testserver/users/1/\",\n      \"username\": \"foo0\",\n      \"email\": \"\",\n      \"is_staff\": false\n    },\n    {\n      \"id\": 2,\n      \"url\": \"http://testserver/users/2/\",\n      \"username\": \"foo1\",\n      \"email\": \"\",\n      \"is_staff\": false\n    },\n    {\n      \"id\": 3,\n      \"url\": \"http://testserver/users/3/\",\n      \"username\": \"foo2\",\n      \"email\": \"\",\n      \"is_staff\": false\n    },\n    {\n      \"id\": 4,\n      \"url\": \"http://testserver/users/4/\",\n      \"username\": \"foo3\",\n      \"email\": \"\",\n      \"is_staff\": false\n    },\n    {\n      \"id\": 5,\n      \"url\": \"http://testserver/users/5/\",\n      \"username\": \"foo4\",\n      \"email\": \"\",\n      \"is_staff\": false\n    }\n  ]\n}\n```\n\n", "tags": ["Django", "Python", "onefile"]}