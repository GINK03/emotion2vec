{"context": " More than 1 year has passed since last update.\n\nEric's range-v3\u306e\u5b9f\u88c5\u3092\u898b\u308b\n\u524d\u56de\u3001Boost Range 2.0\u306e\u4f5c\u8005 Eric Niebler\u306erange-v3\u306e\u57fa\u672c\u8a2d\u8a08\u3092\u7c21\u5358\u306b\u89e3\u8aac\u3057\u305f\u3002\n\u4eca\u56de\u306f\u5b9f\u88c5\u3092\u8abf\u3079\u308b\u3002\n\u7279\u306brange concept\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u308b\u3002\n\n\u6e96\u5099\n\u30bd\u30fc\u30b9\u306fgithub\u4e0a\u306b\u3042\u308b\u3002\n\u304a\u597d\u304d\u306a\u5834\u6240\u3067git clone\u3059\u308c\u3070\u826f\u3044\u3002\n\u30b3\u30f3\u30d1\u30a4\u30e9\u3068stdlib\u306fC++11\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\nREADME\u306b\u3088\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306fgcc4.9.0\u4ee5\u4e0a\u53c8\u306f\u3001clang3.4.0\u4ee5\u4e0a\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3002\nc++11\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308blibstdc++\u304blibc++\u3092\u7528\u610f\u3059\u308b\u306e\u3092\u5fd8\u308c\u305a\u306b\u3002\uff08\u4ed6\u306e\u3067\u3082\u826f\u3044\u304c\uff09\n\u65e9\u901f\u30b3\u30fc\u30c9\u306b\u30c0\u30a4\u30d6\u3057\u3066\u898b\u3088\u3046\u3002\n\nConcepts Lite\u6982\u8981\nrange-v3\u306eC++STL\u30d7\u30ed\u30dd\u30fc\u30b6\u30eb\u306fConcepts Lite\u3092\u4eee\u5b9a\u3057\u3066\u66f8\u304b\u308c\u3066\u3044\u308b\u304c\u3001github\u306b\u3042\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fC++11\u3067\u52d5\u304f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\u305d\u306e\u305f\u3081\u3001C++11\u306e\u7bc4\u56f2\u5185\u3067Concepts Lite\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u3066\u3044\u308b\u3002\n(\u6b21\u671fC++\u306b\u305d\u306e\u3046\u3061\u5165\u308b\u898f\u683c\u901a\u308a\u304b\u3069\u3046\u304b\u306f\u5206\u304b\u3089\u306a\u3044)\n\u53b3\u5bc6\u306b\u306f\u3053\u306eConcepts Lite\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306frange-v3\u306e\u4e00\u90e8\u3067\u306f\u7121\u3044\u304c\u3001\u9762\u767d\u305d\u3046\u306a\u306e\u3067\u89e3\u8aac\u3057\u3066\u307f\u308b\u3002\n\u8208\u5473\u7121\u3044\u4eba\u306f\u98db\u3070\u3059\u3079\u304d\u3067\u3042\u308b\u3002\nrange/v3/utility/concepts.hpp\u304b\u3089\u5927\u4f53\u8fbf\u3063\u3066\u3044\u3051\u308b\u3002\n\u307e\u305a\u306f ranges::v3::concepts::models<Concept,Ts...>\u3092\u898b\u3066\u307f\u308b\u3002\n            template<typename Concept, typename...Ts>\n            struct models\n              : std::integral_constant<bool,\n                    decltype(detail::models_(nullval<Concept>(), std::declval<Ts>()...))::value>\n            {};\n\n            template<typename Concept, typename...Args, typename...Ts>\n            struct models<Concept(Args...), Ts...>\n              : models<Concept, typelist_element_t<Args::value, typelist<Ts...> >...>\n            {};\n\n\u306a\u306b\u3084\u3089\u5947\u602a\u3060\u304c\u3001\u610f\u5473\u7684\u306b\u306f Ts...\u304cConcept\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3060\u308d\u3046\u3002\nTs...\u306e\u3046\u3061\u3001\u5b9f\u969b\u306b\u3069\u306e\u5f15\u6570\u3092\u3069\u306e\u9806\u5e8f\u3067\u6e21\u3059\u304b\u3082\u6307\u5b9a\u3067\u304d\u308b\u69d8\u3067\u3042\u308b\u3002\nConcept(Args...)\u3068\u3044\u3046\u95a2\u6570\u578b\u3092Concept\u3068\u3057\u3066models\u306b\u6e21\u305b\u3070\u826f\u3044\u3002\n\u5b9f\u614b\u306f ranges::v3::concepts::details::models(Concept*, Ts &&...)\u95a2\u6570\u3089\u3057\u3044\u306e\u3067\u3053\u3061\u3089\u3092\u898b\u3066\u307f\u308b\u3002\n            template<typename...Ts>\n            auto models_(any, Ts &&...) ->\n                std::false_type;\n\n            template<typename Concept, typename...Ts>\n            auto models_(Concept *c, Ts &&...ts) ->\n                always_t<\n                    typelist_expand_t<\n                        lazy_and,\n                        typelist_transform_t<\n                            base_concepts_of_t<Concept>,\n                            meta_bind_back<concepts::models, Ts...>::template apply>>,\n                    decltype(c->requires_(std::forward<Ts>(ts)...))>;\n\n\u3053\u306e\u610f\u5473\u306f\u3053\u3046\u3060\u3002\n\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u8907\u6570\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u3089\u308c\u3066\u3044\u308b\u4e8b\u3082\u3042\u308b\u3002\n\u305d\u306e\u69d8\u306a\u5834\u5408\u3001\u5143\u306b\u306a\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u306fConcept::base_concepts_t\u306btypeilst\u3068\u3044\u3046\u578b\u306e\u72ec\u81ea\u306e\u30bf\u30d7\u30eb\u306b\u683c\u7d0d\u3057\u3066\u3042\u308b\u3002\n\u3053\u308c\u3089\u306e\u3001\u8b02\u308f\u3070\u89aa\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u5bfe\u3057\u3066concepts::model<EachParentConcept,Ts..>\u30e1\u30bf\u95a2\u6570\u3092\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3057\u3066\u3001typelist\u306b\u683c\u7d0d\u3059\u308b\u3002\nconcepts::model\u306fstd::integral_constant<bool,value>\u3092\u8fd4\u3059\u306e\u3067\u3001\u305d\u308c\u3089\u3092and\u53d6\u3063\u3066\u771f\u306a\u3089\u3070\u3001Concept::requires_(TS&&...)\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u547c\u3073\u51fa\u305b\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3001std::true_type\u3092\u8fd4\u3059\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070std::false_type\u3092\u8fd4\u3059\u3002\n\u307e\u3041\u3001\u3088\u3046\u3059\u308b\u306b\u3001\u89aa\u30b3\u30f3\u30bb\u30d7\u30c8\u3082\u542b\u3081\u3066\u5168\u3066\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u5bfe\u3057\u3066requires_(TS&&...)\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u547c\u3073\u51fa\u305b\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\u306a\u3093\u3060\u305d\u308c\u3060\u3051\u304b\u3002\u5206\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u7c21\u5358\u3067\u3042\u308b\u3002\n\u3055\u3063\u305d\u304f\u4f7f\u3063\u3066\u307f\u3088\u3046\u3002\n#include <range/3/all.hpp>\n\nstruct foo_concept\n{\n    template<typename T>\n    auto requires_(T && t) -> decltype(\n        t.bar\n    );\n};\n\nstruct foo { double bar; };\nstruct not_foo { double not_bar; };\n\nstatic_assert(ranges::v3::concepts::models<foo_concept,foo>::value,\"assert\");\nstatic_assert(ranges::v3::concepts::models<foo_concept,not_foo>::value,\"assert\"); //error\n\n\u3069\u3046\u3084\u3089\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u3002\nrequires_\u3092\u7c21\u5358\u306b\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u30e1\u30bf\u95a2\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u307e\u305a\u306fvalid_expr_t valid_expr\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\ntemplate<typename ...Ts>\nauto requiers_(Ts &&.. ts) -> decltype(\n    ranges::v3::concepts::valid_expr(\n    //\u3053\u3053\u3067\u597d\u304d\u306a\u3060\u3051\u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u3070\u826f\u3044\u3002\n    ));\n\n\u3042\u308b\u578b\u304c\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570concepts::models_of<Concept,Ts...>(Ts &&...)\uff08\u3088\u3046\u3059\u308b\u306bconcepts::models\u30e1\u30bf\u95a2\u6570\u306e\u30e9\u30c3\u30d1\u30fc)\nstruct cat_concept\n{\n    template<typename T>\n    auto requires_(T && t) -> decltype(\n        ranges::v3::concepts::valid_expr(\n            ranges::v3::concepts::models_of<animal_concept,T>(t)\n        ));\n};\n\n\u3053\u308c\u3068\u540c\u3058\u4e8b\u306f\u5148\u307b\u3069\u8ff0\u3079\u305f\u69d8\u306b\u3001base_concepts_t typedef\u540d\u3092\u30b3\u30f3\u30bb\u30d7\u30c8\u5185\u3067\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\u3002\n\u305d\u306e\u69d8\u306a\u4f5c\u696d\u3092\u304b\u3063\u3053\u826f\u304f\u884c\u3046\u65b9\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\nconcepts::refines<Concepts...>\u3092\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u7d99\u627f\u3055\u305b\u308c\u3070\u826f\u3044\u3002\n\u3064\u307e\u308a\u3001\nstruct cat_comcept : range::v3::concepts::refines<animal_concept>\n{\n    template<tpename T>\n    auto requires_(T && t) -> decltype(\n        ranges::v3::concepts::valid_expr(\n\n        ));\n};\n\n\u3068\u3057\u3066\u3082\u540c\u3058\u3067\u3042\u308b\u3002\n\u5c24\u3082\u3001concepts::models_of\u306f\u89aa\u30b3\u30f3\u30bb\u30d7\u30c8\u4ee5\u5916\u306b\u3082\u4f7f\u3048\u308b\u306e\u3067\u3001concepts::refines\u30a4\u30c7\u30a3\u30aa\u30e0\u3068\u7b49\u4fa1\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n\u3053\u3053\u307e\u3067\u7406\u89e3\u3067\u304d\u308c\u3070\u3001\u304d\u3063\u3068range_concepts.hpp\u3092\u8aad\u307f\u89e3\u304f\u4e8b\u304c\u3067\u304d\u308b\u3002\n\nIterable Concept\nIteratable Concept\u306frange_concepts.hpp\u3068utility/iterator_concepts.hpp\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\nT\u304c\u30b3\u30f3\u30bb\u30d7\u30c8Iteratable\u3092\u6e80\u305f\u3059\u3068\u306f\n\n\nbegin(t)\u304c\u547c\u3073\u51fa\u305b\u308b\u3002\n\nend(t)\u304c\u547c\u3073\u51fa\u305b\u308b\u3002\n\nbegin(t)\u306e\u8fd4\u308a\u5024\u306e\u578b\u304cIterator\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u305f\u3059\u3002\n\nend(t)\u306e\u8fd4\u308a\u5024\u306e\u578b\u304cRegular\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u305f\u3059\u3002\n\nbegin(t)\u306e\u8fd4\u308a\u5024\u306e\u578b\u3068end(t)\u306e\u8fd4\u308a\u5024\u306e\u578b\u304cEqualityComparable\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u305f\u3059\u3002\n\nRange\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fIterable\u306b\u57fa\u3065\u3044\u3066\u5b9f\u88c5\u3055\u308c\u308b\u3002\nIterable\u306fconstructbility\u3084assignability\u306b\u3064\u3044\u3066\u306f\u4f55\u3082\u8a00\u3063\u3066\u3044\u306a\u3044\u3002\n\u3053\u308c\u306f\u3001\u914d\u5217\u578b\u304c\u3053\u308c\u3089\u3092\u6e80\u305f\u3055\u306a\u3044\u305f\u3081\u3067\u3042\u308b\u3002\n\u5f8c\u306fInput-, Forward-, Bidirectional-, RandomAccess-\u7b49\u304a\u304d\u307e\u308a\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u4ed6\u3001Bounded-(begin\u3068end\u306e\u8fd4\u308a\u5024\u304c\u540c\u3058\u578b)\u3001Sized-(size(t)\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b)\u7b49\u304c\u3042\u308b\u3002\n\nRange Concept\nRange Concept\u306fSemiRegular\u30b3\u30f3\u30bb\u30d7\u30c8\u3068Iterable\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u5408\u308f\u305b\u305f\u30b3\u30f3\u30bb\u30d7\u30c8\u3002\nSemiRegular\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\n\nDefaultConstructible\nCopyConstructible\nDestructible\nCopyAssignable\nAllocatable\n\n\u306e\u305d\u308c\u305e\u308c\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u5408\u308f\u305b\u305f\u30b3\u30f3\u30bb\u30d7\u30c8\u3002\nRange\u3082Iteratable\u3068\u540c\u3058\u69d8\u306b\u8272\u3005\u306a\u6d3e\u751f\u304c\u3042\u308b\u3002\n\u6b21\u56de\u306f\u5b9f\u969b\u306bRange\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\u697d\u3057\u3044\u3002\nEric's range-v3\u306e\u5b9f\u88c5\u3092\u898b\u308b\n==========================\n[\u524d\u56de](http://qiita.com/kktk-KO/items/41e85427864365dd88fd)\u3001Boost Range 2.0\u306e\u4f5c\u8005 Eric Niebler\u306erange-v3\u306e\u57fa\u672c\u8a2d\u8a08\u3092\u7c21\u5358\u306b\u89e3\u8aac\u3057\u305f\u3002\n\u4eca\u56de\u306f\u5b9f\u88c5\u3092\u8abf\u3079\u308b\u3002\n\u7279\u306brange concept\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u308b\u3002\n\n\u6e96\u5099\n----\n\n\u30bd\u30fc\u30b9\u306f[github\u4e0a](https://github.com/ericniebler/range-v3)\u306b\u3042\u308b\u3002\n\u304a\u597d\u304d\u306a\u5834\u6240\u3067`git clone`\u3059\u308c\u3070\u826f\u3044\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u3068stdlib\u306fC++11\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\nREADME\u306b\u3088\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306fgcc4.9.0\u4ee5\u4e0a\u53c8\u306f\u3001clang3.4.0\u4ee5\u4e0a\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3002\nc++11\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308blibstdc++\u304blibc++\u3092\u7528\u610f\u3059\u308b\u306e\u3092\u5fd8\u308c\u305a\u306b\u3002\uff08\u4ed6\u306e\u3067\u3082\u826f\u3044\u304c\uff09\n\n\u65e9\u901f\u30b3\u30fc\u30c9\u306b\u30c0\u30a4\u30d6\u3057\u3066\u898b\u3088\u3046\u3002\n\nConcepts Lite\u6982\u8981\n-------\n\nrange-v3\u306e[C++STL\u30d7\u30ed\u30dd\u30fc\u30b6\u30eb](https://github.com/ericniebler/range-v3/blob/master/doc/D4128.md)\u306fConcepts Lite\u3092\u4eee\u5b9a\u3057\u3066\u66f8\u304b\u308c\u3066\u3044\u308b\u304c\u3001github\u306b\u3042\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fC++11\u3067\u52d5\u304f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\u305d\u306e\u305f\u3081\u3001C++11\u306e\u7bc4\u56f2\u5185\u3067Concepts Lite\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u3066\u3044\u308b\u3002\n(\u6b21\u671fC++\u306b\u305d\u306e\u3046\u3061\u5165\u308b\u898f\u683c\u901a\u308a\u304b\u3069\u3046\u304b\u306f\u5206\u304b\u3089\u306a\u3044)\n\n\u53b3\u5bc6\u306b\u306f\u3053\u306eConcepts Lite\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306frange-v3\u306e\u4e00\u90e8\u3067\u306f\u7121\u3044\u304c\u3001\u9762\u767d\u305d\u3046\u306a\u306e\u3067\u89e3\u8aac\u3057\u3066\u307f\u308b\u3002\n\u8208\u5473\u7121\u3044\u4eba\u306f\u98db\u3070\u3059\u3079\u304d\u3067\u3042\u308b\u3002\nrange/v3/utility/concepts.hpp\u304b\u3089\u5927\u4f53\u8fbf\u3063\u3066\u3044\u3051\u308b\u3002\n\n\u307e\u305a\u306f `ranges::v3::concepts::models<Concept,Ts...>`\u3092\u898b\u3066\u307f\u308b\u3002\n\n```cpp\n            template<typename Concept, typename...Ts>\n            struct models\n              : std::integral_constant<bool,\n                    decltype(detail::models_(nullval<Concept>(), std::declval<Ts>()...))::value>\n            {};\n\n            template<typename Concept, typename...Args, typename...Ts>\n            struct models<Concept(Args...), Ts...>\n              : models<Concept, typelist_element_t<Args::value, typelist<Ts...> >...>\n            {};\n```\n\u306a\u306b\u3084\u3089\u5947\u602a\u3060\u304c\u3001\u610f\u5473\u7684\u306b\u306f `Ts...`\u304c`Concept`\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3060\u308d\u3046\u3002\n`Ts...`\u306e\u3046\u3061\u3001\u5b9f\u969b\u306b\u3069\u306e\u5f15\u6570\u3092\u3069\u306e\u9806\u5e8f\u3067\u6e21\u3059\u304b\u3082\u6307\u5b9a\u3067\u304d\u308b\u69d8\u3067\u3042\u308b\u3002\n`Concept(Args...)`\u3068\u3044\u3046\u95a2\u6570\u578b\u3092`Concept`\u3068\u3057\u3066`models`\u306b\u6e21\u305b\u3070\u826f\u3044\u3002\n\u5b9f\u614b\u306f `ranges::v3::concepts::details::models(Concept*, Ts &&...)`\u95a2\u6570\u3089\u3057\u3044\u306e\u3067\u3053\u3061\u3089\u3092\u898b\u3066\u307f\u308b\u3002\n\n```cpp\n            template<typename...Ts>\n            auto models_(any, Ts &&...) ->\n                std::false_type;\n\n            template<typename Concept, typename...Ts>\n            auto models_(Concept *c, Ts &&...ts) ->\n                always_t<\n                    typelist_expand_t<\n                        lazy_and,\n                        typelist_transform_t<\n                            base_concepts_of_t<Concept>,\n                            meta_bind_back<concepts::models, Ts...>::template apply>>,\n                    decltype(c->requires_(std::forward<Ts>(ts)...))>;\n```\n\n\u3053\u306e\u610f\u5473\u306f\u3053\u3046\u3060\u3002\n\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u8907\u6570\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u3089\u308c\u3066\u3044\u308b\u4e8b\u3082\u3042\u308b\u3002\n\u305d\u306e\u69d8\u306a\u5834\u5408\u3001\u5143\u306b\u306a\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u306f`Concept::base_concepts_t`\u306b`typeilst`\u3068\u3044\u3046\u578b\u306e\u72ec\u81ea\u306e\u30bf\u30d7\u30eb\u306b\u683c\u7d0d\u3057\u3066\u3042\u308b\u3002\n\u3053\u308c\u3089\u306e\u3001\u8b02\u308f\u3070\u89aa\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u5bfe\u3057\u3066`concepts::model<EachParentConcept,Ts..>`\u30e1\u30bf\u95a2\u6570\u3092\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3057\u3066\u3001`typelist`\u306b\u683c\u7d0d\u3059\u308b\u3002\n`concepts::model`\u306f`std::integral_constant<bool,value>`\u3092\u8fd4\u3059\u306e\u3067\u3001\u305d\u308c\u3089\u3092and\u53d6\u3063\u3066\u771f\u306a\u3089\u3070\u3001`Concept::requires_(TS&&...)`\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u547c\u3073\u51fa\u305b\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3001`std::true_type`\u3092\u8fd4\u3059\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070`std::false_type`\u3092\u8fd4\u3059\u3002\n\n\u307e\u3041\u3001\u3088\u3046\u3059\u308b\u306b\u3001\u89aa\u30b3\u30f3\u30bb\u30d7\u30c8\u3082\u542b\u3081\u3066\u5168\u3066\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u5bfe\u3057\u3066`requires_(TS&&...)`\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u547c\u3073\u51fa\u305b\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\u306a\u3093\u3060\u305d\u308c\u3060\u3051\u304b\u3002\u5206\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u7c21\u5358\u3067\u3042\u308b\u3002\n\u3055\u3063\u305d\u304f\u4f7f\u3063\u3066\u307f\u3088\u3046\u3002\n\n```cpp\n#include <range/3/all.hpp>\n\nstruct foo_concept\n{\n    template<typename T>\n    auto requires_(T && t) -> decltype(\n        t.bar\n    );\n};\n\nstruct foo { double bar; };\nstruct not_foo { double not_bar; };\n\nstatic_assert(ranges::v3::concepts::models<foo_concept,foo>::value,\"assert\");\nstatic_assert(ranges::v3::concepts::models<foo_concept,not_foo>::value,\"assert\"); //error\n```\n\n\u3069\u3046\u3084\u3089\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u3002\n\n`requires_`\u3092\u7c21\u5358\u306b\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u30e1\u30bf\u95a2\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u307e\u305a\u306f`valid_expr_t valid_expr`\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\n\n```cpp\ntemplate<typename ...Ts>\nauto requiers_(Ts &&.. ts) -> decltype(\n    ranges::v3::concepts::valid_expr(\n    //\u3053\u3053\u3067\u597d\u304d\u306a\u3060\u3051\u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u3070\u826f\u3044\u3002\n    ));\n```\n\n\u3042\u308b\u578b\u304c\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570`concepts::models_of<Concept,Ts...>(Ts &&...)`\uff08\u3088\u3046\u3059\u308b\u306b`concepts::models`\u30e1\u30bf\u95a2\u6570\u306e\u30e9\u30c3\u30d1\u30fc)\n\n```cpp\nstruct cat_concept\n{\n    template<typename T>\n    auto requires_(T && t) -> decltype(\n        ranges::v3::concepts::valid_expr(\n            ranges::v3::concepts::models_of<animal_concept,T>(t)\n        ));\n};\n```\n\n\u3053\u308c\u3068\u540c\u3058\u4e8b\u306f\u5148\u307b\u3069\u8ff0\u3079\u305f\u69d8\u306b\u3001`base_concepts_t` typedef\u540d\u3092\u30b3\u30f3\u30bb\u30d7\u30c8\u5185\u3067\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\u3002\n\u305d\u306e\u69d8\u306a\u4f5c\u696d\u3092\u304b\u3063\u3053\u826f\u304f\u884c\u3046\u65b9\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n`concepts::refines<Concepts...>`\u3092\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u7d99\u627f\u3055\u305b\u308c\u3070\u826f\u3044\u3002\n\n\u3064\u307e\u308a\u3001\n\n```cpp\nstruct cat_comcept : range::v3::concepts::refines<animal_concept>\n{\n    template<tpename T>\n    auto requires_(T && t) -> decltype(\n        ranges::v3::concepts::valid_expr(\n\n        ));\n};\n```\n\u3068\u3057\u3066\u3082\u540c\u3058\u3067\u3042\u308b\u3002\n\n\u5c24\u3082\u3001`concepts::models_of`\u306f\u89aa\u30b3\u30f3\u30bb\u30d7\u30c8\u4ee5\u5916\u306b\u3082\u4f7f\u3048\u308b\u306e\u3067\u3001`concepts::refines`\u30a4\u30c7\u30a3\u30aa\u30e0\u3068\u7b49\u4fa1\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n\n\u3053\u3053\u307e\u3067\u7406\u89e3\u3067\u304d\u308c\u3070\u3001\u304d\u3063\u3068range_concepts.hpp\u3092\u8aad\u307f\u89e3\u304f\u4e8b\u304c\u3067\u304d\u308b\u3002\n\nIterable Concept\n----------------\nIteratable Concept\u306frange_concepts.hpp\u3068utility/iterator_concepts.hpp\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n`T`\u304c\u30b3\u30f3\u30bb\u30d7\u30c8`Iteratable`\u3092\u6e80\u305f\u3059\u3068\u306f\n\n- `begin(t)`\u304c\u547c\u3073\u51fa\u305b\u308b\u3002\n- `end(t)`\u304c\u547c\u3073\u51fa\u305b\u308b\u3002\n- `begin(t)`\u306e\u8fd4\u308a\u5024\u306e\u578b\u304c`Iterator`\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u305f\u3059\u3002\n- `end(t)`\u306e\u8fd4\u308a\u5024\u306e\u578b\u304c`Regular`\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u305f\u3059\u3002\n- `begin(t)`\u306e\u8fd4\u308a\u5024\u306e\u578b\u3068`end(t)`\u306e\u8fd4\u308a\u5024\u306e\u578b\u304c`EqualityComparable`\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u305f\u3059\u3002\n\nRange\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fIterable\u306b\u57fa\u3065\u3044\u3066\u5b9f\u88c5\u3055\u308c\u308b\u3002\nIterable\u306fconstructbility\u3084assignability\u306b\u3064\u3044\u3066\u306f\u4f55\u3082\u8a00\u3063\u3066\u3044\u306a\u3044\u3002\n\u3053\u308c\u306f\u3001\u914d\u5217\u578b\u304c\u3053\u308c\u3089\u3092\u6e80\u305f\u3055\u306a\u3044\u305f\u3081\u3067\u3042\u308b\u3002\n\n\u5f8c\u306fInput-, Forward-, Bidirectional-, RandomAccess-\u7b49\u304a\u304d\u307e\u308a\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u4ed6\u3001Bounded-(begin\u3068end\u306e\u8fd4\u308a\u5024\u304c\u540c\u3058\u578b)\u3001Sized-(size(t)\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b)\u7b49\u304c\u3042\u308b\u3002\n\nRange Concept\n-------------\n\nRange Concept\u306fSemiRegular\u30b3\u30f3\u30bb\u30d7\u30c8\u3068Iterable\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u5408\u308f\u305b\u305f\u30b3\u30f3\u30bb\u30d7\u30c8\u3002\nSemiRegular\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\n\n- DefaultConstructible\n- CopyConstructible\n- Destructible\n- CopyAssignable\n- Allocatable\n\n\u306e\u305d\u308c\u305e\u308c\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u5408\u308f\u305b\u305f\u30b3\u30f3\u30bb\u30d7\u30c8\u3002\n\nRange\u3082Iteratable\u3068\u540c\u3058\u69d8\u306b\u8272\u3005\u306a\u6d3e\u751f\u304c\u3042\u308b\u3002\n\n\n\u6b21\u56de\u306f\u5b9f\u969b\u306bRange\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\u697d\u3057\u3044\u3002\n", "tags": ["C++", "C++11"]}