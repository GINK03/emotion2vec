{"context": " More than 1 year has passed since last update.\u524d\u56de\u306b\u7d9a\u304d\u4eca\u56de\u306fY=AX\u306eA\u306e\u90e8\u5206\u3092\u6c42\u3081\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u89e3\u304d\u305f\u3044\u554f\u984c\nY=AXY=AX\n\u4eca\u56de\u306fY\u3068X\u304c\u56fa\u5b9a\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306eA\u3092\u6c42\u3081\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\nA=YX\u22121A = YX^{-1}\n\u3068\uff0c\u3044\u304d\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304cXX\u304c\u6b63\u65b9\u884c\u5217\u3067\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u305d\u3046\u306a\u306e\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u5f62\u3057\u3066AA\u3092\u6c42\u3081\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\nYYXTYXT(XXT)\u22121=AX=AXXT=A \n\\begin{align*} \nY & = AX \\\\ \nYX^T  & = AXX^T \\\\ \nYX^T(XX^T)^{-1} & = A  \n\\end{align*} \n\n\u3053\u308c\u3067AA\u304c\u6c42\u307e\u308a\u307e\u3057\u305f\uff0e\u305d\u308c\u3067\u306fOpenCV\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <stdio.h>\n#include <opencv\\cv.h>\n\n#define SIZE 4\n#define COUNT 6\n\nvoid show(CvMat* mat, const char* str)\n{\n    printf(\"%s\\n\",str);\n    for (int i = 0; i < mat->rows; i++)\n    {\n        for (int j = 0; j < mat->cols; j++)\n        {\n            printf(\"%f \", cvmGet(mat, i, j));\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main(void)\n{\n    CvMat *mA, *mX , *mAX, *mX_T, *mXX_T, *mXX_T_inv, *mY, *mYX_T;\n\n    mA = cvCreateMat(SIZE, SIZE, CV_32F);\n    mX = cvCreateMat(SIZE, COUNT, CV_32F);\n    mX_T = cvCreateMat(COUNT, SIZE, CV_32F);\n    mXX_T = cvCreateMat(SIZE, SIZE, CV_32F);\n    mXX_T_inv = cvCreateMat(SIZE, SIZE, CV_32F);\n    mY = cvCreateMat(SIZE, COUNT, CV_32F);\n    mAX = cvCreateMat(SIZE, COUNT, CV_32F);\n    mYX_T = cvCreateMat(SIZE, SIZE, CV_32F);\n\n    cvSet(mA, cvScalar(0.0f));\n    for (int i = 0; i < SIZE; i++)\n    {\n        for (int j = 0; j < COUNT; j++)\n        {\n            cvmSet(mX, i, j, rand()%10);\n            cvmSet(mY, i, j, rand() % 10);\n        }\n    }\n\n\n    // \u9006\u884c\u5217\u3092\u6c42\u3081\u308b\u3002\n    cvmTranspose(mX, mX_T);\n\n    show(mX_T, \"mX_T\");\n\n    cvmMul(mX, mX_T , mXX_T );\n\n    show(mXX_T, \"mXX_T\");\n\n    cvmInvert(mXX_T, mXX_T_inv);\n\n    show(mXX_T_inv, \"mXX_T_inv\");\n\n    // \u30d9\u30af\u30c8\u30ebA\u3092\u6c42\u3081\u308b\u3002\n    cvmMul( mY, mX_T, mYX_T );\n\n    show(mYX_T, \"mYX_T\");\n\n    cvmMul(mYX_T, mXX_T_inv, mA);\n\n    show(mA, \"mA\");\n\n    cvmMul(mA, mX, mAX);\n\n    show(mAX, \"mAX\");\n\n    printf(\"mY=mAmX\\n\");\n\n    // \u51fa\u529b\n    for (int i = 0; i < SIZE; i++)\n    {\n        printf(\"(\");\n\n        for (int j = 0; j < COUNT; j++)\n        {\n            printf(\"%f \", cvmGet(mY, i, j));\n        }\n\n        printf(\") = (\");\n\n        for (int j = 0; j < SIZE; j++)\n        {\n            printf(\"%f \", cvmGet(mA, i, j));\n        }\n\n        printf(\") (\");\n\n        for (int j = 0; j < COUNT; j++)\n        {\n            printf(\"%f \", cvmGet(mX, i, j));\n        }\n        printf(\")\\n\");\n    }\n\n    cvReleaseMat(&mA);\n    cvReleaseMat(&mX);\n    cvReleaseMat(&mX_T);\n    cvReleaseMat(&mXX_T);\n    cvReleaseMat(&mXX_T_inv);\n    cvReleaseMat(&mY);\n    cvReleaseMat(&mAX);\n    cvReleaseMat(&mYX_T);\n\n    return 0;\n}\n\n\u5b9f\u9a13\u7d50\u679c\nmX_T\n1.000000 1.000000 2.000000 7.000000\n4.000000 1.000000 1.000000 5.000000\n9.000000 5.000000 8.000000 3.000000\n8.000000 7.000000 7.000000 2.000000\n2.000000 1.000000 1.000000 3.000000\n5.000000 2.000000 9.000000 1.000000\nmXX_T\n191.000000 118.000000 181.000000 81.000000\n118.000000 81.000000 111.000000 46.000000\n181.000000 111.000000 200.000000 69.000000\n81.000000 46.000000 69.000000 97.000000\nmXX_T_inv\n0.106271 -0.089161 -0.040635 -0.017554\n-0.089161 0.128615 0.006182 0.009063\n-0.040635 0.006182 0.036640 0.004937\n-0.017554 0.009063 0.004937 0.017158\nmYX_T\n140.000000 97.000000 151.000000 94.000000\n100.000000 70.000000 104.000000 87.000000\n145.000000 87.000000 118.000000 97.000000\n71.000000 45.000000 64.000000 105.000000\nmA\n-1.556606 1.778637 0.907525 0.779881\n-1.367388 1.518452 0.609352 0.885200\n1.154647 -0.130138 -0.551793 0.490036\n-0.910809 0.804589 0.256460 1.279059\nmAX\n7.496251 0.359145 4.483577 7.910050 1.912594 4.721852\n7.566167 1.084252 2.816179 5.725918 2.048627 2.569327\n3.351180 6.386842 6.796908 5.443742 3.097474 1.036865\n9.360111 3.813107 1.714520 2.698987 3.076607 0.642331\nmY=mAmX\n(7.000000 0.000000 4.000000 8.000000 4.000000 5.000000 ) = (-1.556606 1.778637 0.907525 0.779881 ) (1.000000 4.000000 9.000000 8.000000 2.000000 5.000000 )\n(7.000000 1.000000 2.000000 6.000000 4.000000 3.000000 ) = (-1.367388 1.518452 0.609352 0.885200 ) (1.000000 1.000000 5.000000 7.000000 1.000000 2.000000 )\n(2.000000 6.000000 5.000000 6.000000 8.000000 2.000000 ) = (1.154647 -0.130138 -0.551793 0.490036 ) (2.000000 1.000000 8.000000 7.000000 1.000000 9.000000 )\n(9.000000 4.000000 1.000000 3.000000 4.000000 1.000000 ) = (-0.910809 0.804589 0.256460 1.279059 ) (7.000000 5.000000 3.000000 2.000000 3.000000 1.000000 )\n\n\n\u8003\u5bdf\n\u5b9f\u9a13\u7d50\u679c\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u308bmAX\u304c\u6f14\u7b97\u306b\u3088\u3063\u3066\u6c42\u3081\u305fmY\u306e\u5024\u306b\u306a\u308a\u307e\u3059\uff0emY=mAmX\u3067\u793a\u3055\u308c\u3066\u3044\u308bmY\u306e\u5024\u3068\u6bd4\u3079\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\u3060\u3044\u305f\u3044\u306f\u540c\u3058\u3067\u3059\u304c\u591a\u5c11\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff0e\u3053\u308c\u306f\uff0c\u6f14\u7b97\u306b\u3088\u3063\u3066\u60c5\u5831\u304c\u629c\u3051\u3066\u3057\u307e\u3063\u305f\u304b\u3089\u3067\u3059\uff0e\u4eca\u56de\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306b\u7528\u3044\u305fY\u3068X\u306f4*6\u306e\u884c\u5217\u3067\u3059\uff0e\u3057\u304b\u3057\uff0cA\u306f4*4\u3057\u304b\u3042\u308a\u307e\u305b\u3093\uff0e\u3088\u3063\u3066Y\u3068X\u306e\u5909\u63db\u3092\u5b8c\u74a7\u306b\u884c\u3046\u306b\u306fA\u306e\u8868\u73fe\u529b\u304c\u8db3\u308a\u305a\uff0c\u7d50\u679c\u3068\u3057\u3066\u60c5\u5831\u304c\u629c\u3051\u3066\u3057\u307e\u3044\uff0c\u3053\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\n[\u524d\u56de](http://qiita.com/tkymx/items/b1dd4ed1693d288f59dc)\u306b\u7d9a\u304d\u4eca\u56de\u306fY=AX\u306eA\u306e\u90e8\u5206\u3092\u6c42\u3081\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n#\u89e3\u304d\u305f\u3044\u554f\u984c\n\n$Y=AX$\n\n\u4eca\u56de\u306fY\u3068X\u304c\u56fa\u5b9a\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306eA\u3092\u6c42\u3081\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n$A = YX^{-1}$\n\n\u3068\uff0c\u3044\u304d\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c$X$\u304c\u6b63\u65b9\u884c\u5217\u3067\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u305d\u3046\u306a\u306e\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u5f62\u3057\u3066$A$\u3092\u6c42\u3081\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n$\n\\begin{align*}\nY & = AX \\\\\\\\\nYX^T  & = AXX^T \\\\\\\\\nYX^T(XX^T)^{-1} & = A \n\\end{align*}\n$\n\n\u3053\u308c\u3067$A$\u304c\u6c42\u307e\u308a\u307e\u3057\u305f\uff0e\u305d\u308c\u3067\u306fOpenCV\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n```cpp\n\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <stdio.h>\n#include <opencv\\cv.h>\n\n#define SIZE 4\n#define COUNT 6\n\nvoid show(CvMat* mat, const char* str)\n{\n\tprintf(\"%s\\n\",str);\n\tfor (int i = 0; i < mat->rows; i++)\n\t{\n\t\tfor (int j = 0; j < mat->cols; j++)\n\t\t{\n\t\t\tprintf(\"%f \", cvmGet(mat, i, j));\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main(void)\n{\n\tCvMat *mA, *mX , *mAX, *mX_T, *mXX_T, *mXX_T_inv, *mY, *mYX_T;\n\n\tmA = cvCreateMat(SIZE, SIZE, CV_32F);\n\tmX = cvCreateMat(SIZE, COUNT, CV_32F);\n\tmX_T = cvCreateMat(COUNT, SIZE, CV_32F);\n\tmXX_T = cvCreateMat(SIZE, SIZE, CV_32F);\n\tmXX_T_inv = cvCreateMat(SIZE, SIZE, CV_32F);\n\tmY = cvCreateMat(SIZE, COUNT, CV_32F);\n\tmAX = cvCreateMat(SIZE, COUNT, CV_32F);\n\tmYX_T = cvCreateMat(SIZE, SIZE, CV_32F);\n\n\tcvSet(mA, cvScalar(0.0f));\n\tfor (int i = 0; i < SIZE; i++)\n\t{\n\t\tfor (int j = 0; j < COUNT; j++)\n\t\t{\n\t\t\tcvmSet(mX, i, j, rand()%10);\n\t\t\tcvmSet(mY, i, j, rand() % 10);\n\t\t}\n\t}\n\n\n\t// \u9006\u884c\u5217\u3092\u6c42\u3081\u308b\u3002\n\tcvmTranspose(mX, mX_T);\n\n\tshow(mX_T, \"mX_T\");\n\n\tcvmMul(mX, mX_T , mXX_T );\n\n\tshow(mXX_T, \"mXX_T\");\n\n\tcvmInvert(mXX_T, mXX_T_inv);\n\n\tshow(mXX_T_inv, \"mXX_T_inv\");\n\n\t// \u30d9\u30af\u30c8\u30ebA\u3092\u6c42\u3081\u308b\u3002\n\tcvmMul( mY, mX_T, mYX_T );\n\n\tshow(mYX_T, \"mYX_T\");\n\n\tcvmMul(mYX_T, mXX_T_inv, mA);\n\n\tshow(mA, \"mA\");\n\n\tcvmMul(mA, mX, mAX);\n\n\tshow(mAX, \"mAX\");\n\n\tprintf(\"mY=mAmX\\n\");\n\n\t// \u51fa\u529b\n\tfor (int i = 0; i < SIZE; i++)\n\t{\n\t\tprintf(\"(\");\n\n\t\tfor (int j = 0; j < COUNT; j++)\n\t\t{\n\t\t\tprintf(\"%f \", cvmGet(mY, i, j));\n\t\t}\n\n\t\tprintf(\") = (\");\n\n\t\tfor (int j = 0; j < SIZE; j++)\n\t\t{\n\t\t\tprintf(\"%f \", cvmGet(mA, i, j));\n\t\t}\n\n\t\tprintf(\") (\");\n\n\t\tfor (int j = 0; j < COUNT; j++)\n\t\t{\n\t\t\tprintf(\"%f \", cvmGet(mX, i, j));\n\t\t}\n\t\tprintf(\")\\n\");\n\t}\n\n\tcvReleaseMat(&mA);\n\tcvReleaseMat(&mX);\n\tcvReleaseMat(&mX_T);\n\tcvReleaseMat(&mXX_T);\n\tcvReleaseMat(&mXX_T_inv);\n\tcvReleaseMat(&mY);\n\tcvReleaseMat(&mAX);\n\tcvReleaseMat(&mYX_T);\n\n\treturn 0;\n}\n```\n**\u5b9f\u9a13\u7d50\u679c**\n\n```\nmX_T\n1.000000 1.000000 2.000000 7.000000\n4.000000 1.000000 1.000000 5.000000\n9.000000 5.000000 8.000000 3.000000\n8.000000 7.000000 7.000000 2.000000\n2.000000 1.000000 1.000000 3.000000\n5.000000 2.000000 9.000000 1.000000\nmXX_T\n191.000000 118.000000 181.000000 81.000000\n118.000000 81.000000 111.000000 46.000000\n181.000000 111.000000 200.000000 69.000000\n81.000000 46.000000 69.000000 97.000000\nmXX_T_inv\n0.106271 -0.089161 -0.040635 -0.017554\n-0.089161 0.128615 0.006182 0.009063\n-0.040635 0.006182 0.036640 0.004937\n-0.017554 0.009063 0.004937 0.017158\nmYX_T\n140.000000 97.000000 151.000000 94.000000\n100.000000 70.000000 104.000000 87.000000\n145.000000 87.000000 118.000000 97.000000\n71.000000 45.000000 64.000000 105.000000\nmA\n-1.556606 1.778637 0.907525 0.779881\n-1.367388 1.518452 0.609352 0.885200\n1.154647 -0.130138 -0.551793 0.490036\n-0.910809 0.804589 0.256460 1.279059\nmAX\n7.496251 0.359145 4.483577 7.910050 1.912594 4.721852\n7.566167 1.084252 2.816179 5.725918 2.048627 2.569327\n3.351180 6.386842 6.796908 5.443742 3.097474 1.036865\n9.360111 3.813107 1.714520 2.698987 3.076607 0.642331\nmY=mAmX\n(7.000000 0.000000 4.000000 8.000000 4.000000 5.000000 ) = (-1.556606 1.778637 0.907525 0.779881 ) (1.000000 4.000000 9.000000 8.000000 2.000000 5.000000 )\n(7.000000 1.000000 2.000000 6.000000 4.000000 3.000000 ) = (-1.367388 1.518452 0.609352 0.885200 ) (1.000000 1.000000 5.000000 7.000000 1.000000 2.000000 )\n(2.000000 6.000000 5.000000 6.000000 8.000000 2.000000 ) = (1.154647 -0.130138 -0.551793 0.490036 ) (2.000000 1.000000 8.000000 7.000000 1.000000 9.000000 )\n(9.000000 4.000000 1.000000 3.000000 4.000000 1.000000 ) = (-0.910809 0.804589 0.256460 1.279059 ) (7.000000 5.000000 3.000000 2.000000 3.000000 1.000000 )\n```\n\n#\u8003\u5bdf\n\u5b9f\u9a13\u7d50\u679c\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u308bmAX\u304c\u6f14\u7b97\u306b\u3088\u3063\u3066\u6c42\u3081\u305fmY\u306e\u5024\u306b\u306a\u308a\u307e\u3059\uff0emY=mAmX\u3067\u793a\u3055\u308c\u3066\u3044\u308bmY\u306e\u5024\u3068\u6bd4\u3079\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\u3060\u3044\u305f\u3044\u306f\u540c\u3058\u3067\u3059\u304c\u591a\u5c11\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff0e\u3053\u308c\u306f\uff0c\u6f14\u7b97\u306b\u3088\u3063\u3066\u60c5\u5831\u304c\u629c\u3051\u3066\u3057\u307e\u3063\u305f\u304b\u3089\u3067\u3059\uff0e\u4eca\u56de\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306b\u7528\u3044\u305fY\u3068X\u306f4*6\u306e\u884c\u5217\u3067\u3059\uff0e\u3057\u304b\u3057\uff0cA\u306f4*4\u3057\u304b\u3042\u308a\u307e\u305b\u3093\uff0e\u3088\u3063\u3066Y\u3068X\u306e\u5909\u63db\u3092\u5b8c\u74a7\u306b\u884c\u3046\u306b\u306fA\u306e\u8868\u73fe\u529b\u304c\u8db3\u308a\u305a\uff0c\u7d50\u679c\u3068\u3057\u3066\u60c5\u5831\u304c\u629c\u3051\u3066\u3057\u307e\u3044\uff0c\u3053\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\n", "tags": ["OpenCV", "\u6700\u5c0f\u4e8c\u4e57\u6cd5"]}