{"context": " More than 1 year has passed since last update.\u3056\u3063\u3068\u30b0\u30b0\u3063\u305f\u3068\u3053\u308d\u51fa\u3066\u3053\u306a\u304b\u3063\u305f\u3053\u3068\u3082\u3042\u308a\u3001\u30e1\u30e2\u3002\n\u96e2\u6563\u30b3\u30b5\u30a4\u30f3\u5909\u63db(Discrete Cosine Transform, DCT)\u3092chainer.links.Linear\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u96e2\u6563\u30b3\u30b5\u30a4\u30f3\u5909\u63db\u3068\u306f\u3001\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db(Fast Fourier Transform, FFT)\u306e\u89aa\u621a\u3067\u3001FFT\u306e\u5b9f\u6570\u90e8\u3092\u5f15\u304d\u51fa\u3059\u306e\u3068\u540c\u3058\u610f\u5473\u5408\u3044\u306b\u306a\u308a\u307e\u3059\u3002(\u8a73\u3057\u3044\u89e3\u8aac\u306f\u4ed6\u306e\u65b9\u306e\u8aac\u660e\u306b\u983c\u308a\u307e\u3059)\n\u4ee5\u4e0b\u306e\u95a2\u6570DCT(wave)\u3092\u4f7f\u3046\u3068\u3001scipy.fftpack.dct(wave)\u3068\u540c\u3058\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306eimport\u306f\u3001Chainer\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u6e96\u3058\u3066\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\nDCT.py\ndef DCT(wave):\n    num_base = np.size(wave.data[0,:])\n    lDCT = L.Linear(num_base,num_base)\n    for n in range(num_base):\n        for k in range(num_base):\n            lDCT.W.data[k,n] = 2*np.cos(np.pi*k*(2*n+1)/(2*num_base))\n    lDCT.b.data[:] = 0.0\n    return lDCT(wave)\n\n\n\u79c1\u304c\u306f\u307e\u3063\u305f\u70b9\u306f\u3001\n\u30fbLinear\u306b\u6e21\u3059\u306e\u306fVariable\u5f62\u5f0f\n\u30fbnp.array([[\u5165\u529b\u30d9\u30af\u30c8\u30eb]])\u306e\u3088\u3046\u306b\u3001\u6b21\u5143\u30922\u6b21\u5143\u306b\u3057\u3066\u6e21\u3059\n\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3046\u3068DCT\u3092\u4f7f\u3063\u305fChain\u3084\u8aa4\u5dee\u95a2\u6570\u3092\u4f5c\u308c\u308b(\u306f\u305a)\u3067\u3059\u3002(\u307e\u3060\u672a\u4f7f\u7528\u3067\u3059)\n(\u8ffd\u8a18\uff1a2016\u5e742\u67084\u65e5)\n\u9006\u96e2\u6563\u30b3\u30b5\u30a4\u30f3\u5909\u63db(Inverse DCT, IDCT)\u3082\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nScipy\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3088\u308a\u3001scipy.fftpack.dct(wave)\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067Type2\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u9006\u5909\u63db\u306fType3\u3092\u4f7f\u7528\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3001\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u3057\u307e\u3057\u305f\u3002\n\nIDCT.py\ndef IDCT(wave):\n    num_base = np.size(wave.data[0,:])\n    lIDCT = L.Linear(num_base,num_base)\n    for n in range(num_base):\n        for k in range(num_base):\n            if(n==0):\n                lIDCT.W.data[k,n] = 0.0\n            else:\n                lIDCT.W.data[k,n] = 2*np.cos(np.pi*(k+0.5)*n/num_base)\n    lIDCT.b.data[:] = wave.data[0,0]\n    return lIDCT(wave)\n\n\n\u3053\u306eIDCT\u306e\u6ce8\u610f\u70b9\u306f\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u306b\u306f\u4f7f\u3048\u306a\u3044(\uff01)\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u3088\u308a\u3088\u3044\u5b9f\u88c5\u304c\u3042\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u304c\u3002\u3002\n\u3056\u3063\u3068\u30b0\u30b0\u3063\u305f\u3068\u3053\u308d\u51fa\u3066\u3053\u306a\u304b\u3063\u305f\u3053\u3068\u3082\u3042\u308a\u3001\u30e1\u30e2\u3002\n\u96e2\u6563\u30b3\u30b5\u30a4\u30f3\u5909\u63db(Discrete Cosine Transform, DCT)\u3092chainer.links.Linear\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u96e2\u6563\u30b3\u30b5\u30a4\u30f3\u5909\u63db\u3068\u306f\u3001\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db(Fast Fourier Transform, FFT)\u306e\u89aa\u621a\u3067\u3001FFT\u306e\u5b9f\u6570\u90e8\u3092\u5f15\u304d\u51fa\u3059\u306e\u3068\u540c\u3058\u610f\u5473\u5408\u3044\u306b\u306a\u308a\u307e\u3059\u3002(\u8a73\u3057\u3044\u89e3\u8aac\u306f\u4ed6\u306e\u65b9\u306e\u8aac\u660e\u306b\u983c\u308a\u307e\u3059)\n\n\u4ee5\u4e0b\u306e\u95a2\u6570DCT(wave)\u3092\u4f7f\u3046\u3068\u3001scipy.fftpack.dct(wave)\u3068\u540c\u3058\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306eimport\u306f\u3001[Chainer\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://docs.chainer.org/en/stable/tutorial/basic.html)\u306b\u6e96\u3058\u3066\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```python:DCT.py\ndef DCT(wave):\n    num_base = np.size(wave.data[0,:])\n    lDCT = L.Linear(num_base,num_base)\n    for n in range(num_base):\n        for k in range(num_base):\n            lDCT.W.data[k,n] = 2*np.cos(np.pi*k*(2*n+1)/(2*num_base))\n    lDCT.b.data[:] = 0.0\n    return lDCT(wave)\n```\n\n\u79c1\u304c\u306f\u307e\u3063\u305f\u70b9\u306f\u3001\n\u30fbLinear\u306b\u6e21\u3059\u306e\u306fVariable\u5f62\u5f0f\n\u30fbnp.array([[\u5165\u529b\u30d9\u30af\u30c8\u30eb]])\u306e\u3088\u3046\u306b\u3001\u6b21\u5143\u30922\u6b21\u5143\u306b\u3057\u3066\u6e21\u3059\n\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3046\u3068DCT\u3092\u4f7f\u3063\u305fChain\u3084\u8aa4\u5dee\u95a2\u6570\u3092\u4f5c\u308c\u308b(\u306f\u305a)\u3067\u3059\u3002(\u307e\u3060\u672a\u4f7f\u7528\u3067\u3059)\n\n(\u8ffd\u8a18\uff1a2016\u5e742\u67084\u65e5)\n\u9006\u96e2\u6563\u30b3\u30b5\u30a4\u30f3\u5909\u63db(Inverse DCT, IDCT)\u3082\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n[Scipy\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.fftpack.dct.html)\u3088\u308a\u3001scipy.fftpack.dct(wave)\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067Type2\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u9006\u5909\u63db\u306fType3\u3092\u4f7f\u7528\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3001\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u3057\u307e\u3057\u305f\u3002\n\n```python:IDCT.py\ndef IDCT(wave):\n    num_base = np.size(wave.data[0,:])\n    lIDCT = L.Linear(num_base,num_base)\n    for n in range(num_base):\n        for k in range(num_base):\n            if(n==0):\n                lIDCT.W.data[k,n] = 0.0\n            else:\n                lIDCT.W.data[k,n] = 2*np.cos(np.pi*(k+0.5)*n/num_base)\n    lIDCT.b.data[:] = wave.data[0,0]\n    return lIDCT(wave)\n```\n\n\n\u3053\u306eIDCT\u306e\u6ce8\u610f\u70b9\u306f\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u306b\u306f\u4f7f\u3048\u306a\u3044(\uff01)\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u3088\u308a\u3088\u3044\u5b9f\u88c5\u304c\u3042\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u304c\u3002\u3002\n", "tags": ["DCT", "Chainer", "Python"]}