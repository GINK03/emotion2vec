{"context": "\n\n\u524d\u56de\u306e\u8a18\u4e8b\n\u524d\u56deGameplayKit\u3011iOS\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u306b\u304a\u3051\u308bState\u30d1\u30bf\u30fc\u30f3\u5b9f\u8df5 Part_4\u3067\u306f\u3001\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u306b\u3088\u308b\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u3092\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\nSpriteKit\u306e\u30b9\u30d7\u30e9\u30a4\u30c8\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3001\u8907\u96d1\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nSpriteKit\u5834\u3067\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306f SKAction\u30af\u30e9\u30b9\u3067\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u5148\u3092\u6761\u4ef6\u306b\u3088\u3063\u3066\u5206\u5c90\u3055\u305b\u307e\u3059\u3002\n\n\u624b\u9806\n\u30dc\u30c8\u30eb\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\n\u6c34\u91cf\u6e1b\u5c11\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\n\u6c34\u6d41\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\n\u6761\u4ef6\u4ed8\u304d\u3067\u30ab\u30e9\u72b6\u614b\u306b\u9077\u79fb\u3055\u305b\u308b\n\n\u30dc\u30c8\u30eb\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\nwaitAndExit()\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u3092playDispensingAnimationThenExit()\u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u547c\u3073\u51fa\u3057\u90e8\u5206\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3057\u307e\u3059\u3002\n\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306fSKAction\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u3001playDispensingAnimationThenExit()\u30e1\u30bd\u30c3\u30c9\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u7d66\u6c34\u4e2d\u306e\u72b6\u614bServeState\u306b\u9077\u79fb\u5f8c\u3001\u753b\u9762\u7aef\u304b\u3089\u30dc\u30c8\u30eb\u30b9\u30d7\u30e9\u30a4\u30c8\u304c\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u304f\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u304d\u305f\u30dc\u30c8\u30eb\u306f\u30011\u79d2\u9593\u3060\u3051\u9759\u6b62\u3057\u305f\u5f8c\u306b\u753b\u9762\u5916\u3078\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4e8b\u524d\u306bActions.sks\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u305fSKAction\u306e\u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\u3092\u57fa\u306b\u3057\u3066\u3001slideCupAction\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\nServeState.swift\nclass ServeState: DispenserState {\n\n    static let timeScale = 1.0\n\n    init(game: GameScene) {\n        super.init(game: game, associatedNodeName: \"ServeState\")\n    }\n\n    override func didEnter(from previousState: GKState?) {\n        super.didEnter(from: previousState)\n\n        playDispensingAnimationThenExit()\n    }\n\n    override func isValidNextState(_ stateClass: AnyClass) -> Bool {\n        return stateClass is PartiallyFullState.Type\n    }\n\n    func playDispensingAnimationThenExit() {\n        let slideCupAction = SKAction(named: \"slideCup\", duration: 3 * ServeState.timeScale)!\n        let slideCupActionOnNode = SKAction.run(slideCupAction, onChildWithName: \"//bottle\")\n\n        //let waitAction = SKAction.wait(forDuration: ServeState.timeScale)\n\n        game.scene?.run(slideCupActionOnNode, completion: {\n            self.stateMachine?.enter(PartiallyFullState.self)\n        })\n    }\n}\n\n\nSKAction(named:duration:)\u30e1\u30bd\u30c3\u30c9\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u52d5\u4f5c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3001run(onChildWithName:)\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30b9\u30d7\u30e9\u30a4\u30c8\u30ce\u30fc\u30c9\u306b\u95a2\u9023\u3065\u3051\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u30dc\u30c8\u30eb\u306e\u30b9\u30d7\u30e9\u30a4\u30c8\u30ce\u30fc\u30c9\u5ea7\u6a19\u3092\u5143\u306e\u5834\u6240\u304b\u3089(0, 0)\u306bMove\u3057\u305f1\u79d2\u5f8c\u3001\u3055\u3089\u306b(1000, 0)\u306bMove\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6c34\u91cf\u5909\u5316\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\n\u7d9a\u3044\u3066\u3001\u6c34\u91cf\u5909\u5316\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nServeState.swift\n    func playDispensingAnimationThenExit() {\n        let slideCupAction    = SKAction(named: \"slideCup\",   duration: 3 * ServeState.timeScale)!\n        let drainWaterAction  = SKAction(named: \"drainWater\", duration: ServeState.timeScale)!\n        let resetStreamAction = SKAction(named: \"resetStream\", duration: 0)!\n        let resetCupAction    = SKAction(named: \"resetCup\",    duration: 0)!\n\n        let slideCupActionOnNode    = SKAction.run(slideCupAction,    onChildWithName: \"//bottle\")\n        let drainWaterActionOnNode  = SKAction.run(drainWaterAction,  onChildWithName: \"//water\")\n        let resetStreamActionOnNode = SKAction.run(resetStreamAction, onChildWithName: \"//stream\")\n        let resetCupActionOnNode    = SKAction.run(resetCupAction,    onChildWithName: \"//bottle\")\n\n        let waitAction = SKAction.wait(forDuration: ServeState.timeScale)\n        let innerSequence = [waitAction, drainWaterActionOnNode,\n                             waitAction, resetStreamActionOnNode,\n                             waitAction, resetCupActionOnNode]\n        let innerSequenceAction = SKAction.sequence(innerSequence)\n\n        let group = [slideCupActionOnNode, innerSequenceAction]\n        let groupAction = SKAction.group(group)\n\n        game.scene?.run(groupAction, completion: {\n            self.stateMachine?.enter(PartiallyFullState.self)\n        })\n    }\n\n\n\n\u30d3\u30eb\u30c9\n\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u753b\u9762\u3092\u30bf\u30c3\u30d7\u3059\u308b\u3068\u3001\u30dc\u30c8\u30eb\u304c\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u304d\u305f\u5f8c\u3001\u7d66\u6c34\u6a5f\u30bf\u30f3\u30af\u306e\u6c34\u91cf\u304c\u6e1b\u5c11\u3057\u3066\u304b\u3089\u30dc\u30c8\u30eb\u304c\u3055\u3089\u306b\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6c34\u6d41\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\n\u30dc\u30c8\u30eb\u30b9\u30e9\u30a4\u30c9\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u30bf\u30f3\u30af\u6c34\u91cf\u6e1b\u5c11\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u9593\u306b\u3001\u6c34\u6d41\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u633f\u5165\u3057\u307e\u3059\u3002\n\nServeState.swift\n    func playDispensingAnimationThenExit() {\n        let slideCupAction    = SKAction(named: \"slideCup\",    duration: 3 * ServeState.timeScale)!\n        let drainWaterAction  = SKAction(named: \"drainWater\",  duration: ServeState.timeScale)!\n        let resetStreamAction = SKAction(named: \"resetStream\", duration: 0)!\n        let resetCupAction    = SKAction(named: \"resetCup\",    duration: 0)!\n        let fillCupAction     = SKAction(named: \"fillCup\",     duration: 2 * ServeState.timeScale)!\n\n        let slideCupActionOnNode    = SKAction.run(slideCupAction,    onChildWithName: \"//bottle\")\n        let drainWaterActionOnNode  = SKAction.run(drainWaterAction,  onChildWithName: \"//water\")\n        let resetStreamActionOnNode = SKAction.run(resetStreamAction, onChildWithName: \"//stream\")\n        let resetCupActionOnNode    = SKAction.run(resetCupAction,    onChildWithName: \"//bottle\")\n        let fillCupActionOnNode     = SKAction.run(fillCupAction,     onChildWithName: \"//stream\")\n\n        let waitAction = SKAction.wait(forDuration: ServeState.timeScale)\n        let innerSequence = [waitAction, drainWaterActionOnNode,\n                             waitAction, resetStreamActionOnNode,\n                             waitAction, resetCupActionOnNode]\n        let innerSequenceAction = SKAction.sequence(innerSequence)\n\n        let group = [slideCupActionOnNode, fillCupActionOnNode, innerSequenceAction]\n        let groupAction = SKAction.group(group)\n\n        game.scene?.run(groupAction, completion: {\n            self.stateMachine?.enter(PartiallyFullState.self)\n        })\n    }\n\n\n\n\u30d3\u30eb\u30c9\n\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3067\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\n\u4eca\u5ea6\u306f\u3001\u6c34\u91cf\u304c\u6e1b\u5c11\u3059\u308b\u3068\u540c\u6642\u306b\u6c34\u6d41\u304c\u30dc\u30c8\u30eb\u306b\u6ce8\u304e\u8fbc\u307e\u308c\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u6761\u4ef6\u4ed8\u304d\u3067\u30ab\u30e9\u72b6\u614b\u306b\u9077\u79fb\u3055\u305b\u308b\n\u7d66\u6c34\u6a5f\u306e\u30bf\u30f3\u30af\u304c\u7a7a\u306b\u306a\u3063\u305f\u3089\u3001\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u3092EmptyState\u306b\u9077\u79fb\u3055\u305b\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u30ab\u30e9\u306e\u72b6\u614b\u3092\u8868\u73fe\u3059\u308bEmptyState\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u30e1\u30cb\u30e5\u30fc\u30d0\u30fc\u304b\u3089\u300cFile > New > File... > iOS > Swift Class\u300d\u3092\u9078\u629e\u3057\u307e\u3059\u3002\uff08EmptyState.swift\uff09\nGameplayKit\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3001DispenserState\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305fEmptyState\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nEmptyState.swift\nimport GameplayKit\n\nclass EmptyState: DispenserState {\n\n    init(game: GameScene) {\n        super.init(game: game, associatedNodeName: \"EmptyState\")\n    }\n\n    override func didEnter(from previousState: GKState?) {\n        super.didEnter(from: previousState)\n\n        let red = SKColor.red\n        changeIndicatorLightToColor(red)\n    }\n\n    override func willExit(to nextState: GKState) {\n        super.willExit(to: nextState)\n\n        let black = SKColor.black\n        changeIndicatorLightToColor(black)\n    }\n\n}\n\n\n\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3001didEnter(from:)\u30e1\u30bd\u30c3\u30c9\u304a\u3088\u3073 willExit(to:)\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nEmptyState\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u305f\u3089\u3001\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u306b\u767b\u9332\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nGameScene.swift\n    override func didMove(to view: SKView) {\n        let fullState = FullState(game: self)\n        let serveState = ServeState(game: self)\n        let partiallyFullState = PartiallyFullState(game: self)\n        let emptyState = EmptyState(game: self)\n\n        stateMachine = GKStateMachine(states: [fullState,\n                                               serveState,\n                                               partiallyFullState,\n                                               emptyState])\n        stateMachine.enter(FullState.self)\n    }\n\n\n\n\u30ab\u30e9\u72b6\u614b\u3078\u306e\u6761\u4ef6\n\u7d66\u6c34\u6a5f\u306e\u30bf\u30f3\u30af\u6c34\u91cf\uff08\u30b9\u30d7\u30e9\u30a4\u30c8\u30ce\u30fc\u30c9\u306eheight\u30d7\u30ed\u30d1\u30c6\u30a3\uff09\u304c1\u4ee5\u4e0b\u306e\u5834\u5408\u3001EmptyState\u306b\u9077\u79fb\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nServeState.swift\n    func playDispensingAnimationThenExit() {\n        let slideCupAction    = SKAction(named: \"slideCup\",    duration: 3 * ServeState.timeScale)!\n        let drainWaterAction  = SKAction(named: \"drainWater\",  duration: ServeState.timeScale)!\n        let resetStreamAction = SKAction(named: \"resetStream\", duration: 0)!\n        let resetCupAction    = SKAction(named: \"resetCup\",    duration: 0)!\n        let fillCupAction     = SKAction(named: \"fillCup\",     duration: 2 * ServeState.timeScale)!\n\n        let slideCupActionOnNode    = SKAction.run(slideCupAction,    onChildWithName: \"//bottle\")\n        let drainWaterActionOnNode  = SKAction.run(drainWaterAction,  onChildWithName: \"//water\")\n        let resetStreamActionOnNode = SKAction.run(resetStreamAction, onChildWithName: \"//stream\")\n        let resetCupActionOnNode    = SKAction.run(resetCupAction,    onChildWithName: \"//bottle\")\n        let fillCupActionOnNode     = SKAction.run(fillCupAction,     onChildWithName: \"//stream\")\n\n        let waitAction = SKAction.wait(forDuration: ServeState.timeScale)\n        let innerSequence = [waitAction, drainWaterActionOnNode,\n                             waitAction, resetStreamActionOnNode,\n                             waitAction, resetCupActionOnNode]\n        let innerSequenceAction = SKAction.sequence(innerSequence)\n\n        let group = [slideCupActionOnNode, fillCupActionOnNode, innerSequenceAction]\n        let groupAction = SKAction.group(group)\n\n        game.scene?.run(groupAction, completion: {\n            let waterNode = self.game.childNode(withName: \"//water\") as! SKSpriteNode\n            let restOfWater = waterNode.size.height\n            if restOfWater < 1 {\n                self.stateMachine?.enter(EmptyState.self)\n            } else {\n                self.stateMachine?.enter(PartiallyFullState.self)\n            }\n        })\n    }\n\n\n\u3053\u308c\u3067\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u306f\u3001\u9077\u79fb\u5148\u306e\u72b6\u614b\u3092EmptyState\u3068PartiallyFullState\u3067\u5206\u5c90\u3057\u307e\u3059\u304c\u3001isValidNextState(_:)\u30e1\u30bd\u30c3\u30c9\u304cPartiallyFullState\u4ee5\u5916\u3078\u306e\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u3092\u8a31\u53ef\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nEmptyState\u306b\u3082\u9077\u79fb\u3067\u304d\u308b\u3088\u3046\u306bisValidNextState(_:)\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\n\nServeState.swift\n    override func isValidNextState(_ stateClass: AnyClass) -> Bool {\n        switch stateClass {\n        case is PartiallyFullState.Type, is EmptyState.Type:\n            return true\n        default:\n            return false\n        }\n    }\n\n\n\n\u30d3\u30eb\u30c9\n\u7d66\u6c34\u6a5f\u306e\u30bf\u30f3\u30af\u6b8b\u91cf\u304c\u7121\u304f\u306a\u308b\u3068\u3001\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u30d1\u30cd\u30eb\u304c\u300cEmpty\u300d\u306b\u306a\u308a\u8868\u793a\u30e9\u30f3\u30d7\u304c\u30ec\u30c3\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u6b21\u56de\n\u8907\u96d1\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u307b\u304b\u3001\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u306e\u5206\u5c90\u3082\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u3010GameplayKit\u3011iOS\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u306b\u304a\u3051\u308bState\u30d1\u30bf\u30fc\u30f3\u5b9f\u8df5 Part_6\u3067\u306f\u3001SpriteKit\u306b\u304a\u3051\u308b\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n#\u524d\u56de\u306e\u8a18\u4e8b\n\u524d\u56de[GameplayKit\u3011iOS\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u306b\u304a\u3051\u308bState\u30d1\u30bf\u30fc\u30f3\u5b9f\u8df5 Part_4](http://qiita.com/chino_tweet/items/35c62dc17e93e5b8b335)\u3067\u306f\u3001\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u306b\u3088\u308b\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u3092\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n#\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n`SpriteKit`\u306e\u30b9\u30d7\u30e9\u30a4\u30c8\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3001\u8907\u96d1\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n`SpriteKit`\u5834\u3067\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306f `SKAction`\u30af\u30e9\u30b9\u3067\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u5148\u3092\u6761\u4ef6\u306b\u3088\u3063\u3066\u5206\u5c90\u3055\u305b\u307e\u3059\u3002\n\n#\u624b\u9806\n\u30dc\u30c8\u30eb\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\n\u6c34\u91cf\u6e1b\u5c11\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\n\u6c34\u6d41\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\n\u6761\u4ef6\u4ed8\u304d\u3067\u30ab\u30e9\u72b6\u614b\u306b\u9077\u79fb\u3055\u305b\u308b\n\n##\u30dc\u30c8\u30eb\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\n`waitAndExit()`\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u3092`playDispensingAnimationThenExit()`\u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u547c\u3073\u51fa\u3057\u90e8\u5206\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3057\u307e\u3059\u3002\n\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306f`SKAction`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u3001`playDispensingAnimationThenExit()`\u30e1\u30bd\u30c3\u30c9\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u7d66\u6c34\u4e2d\u306e\u72b6\u614b`ServeState`\u306b\u9077\u79fb\u5f8c\u3001\u753b\u9762\u7aef\u304b\u3089\u30dc\u30c8\u30eb\u30b9\u30d7\u30e9\u30a4\u30c8\u304c\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u304f\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u304d\u305f\u30dc\u30c8\u30eb\u306f\u30011\u79d2\u9593\u3060\u3051\u9759\u6b62\u3057\u305f\u5f8c\u306b\u753b\u9762\u5916\u3078\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4e8b\u524d\u306b`Actions.sks`\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u305f`SKAction`\u306e\u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\u3092\u57fa\u306b\u3057\u3066\u3001`slideCupAction`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```ruby:ServeState.swift\nclass ServeState: DispenserState {\n    \n    static let timeScale = 1.0\n    \n    init(game: GameScene) {\n        super.init(game: game, associatedNodeName: \"ServeState\")\n    }\n    \n    override func didEnter(from previousState: GKState?) {\n        super.didEnter(from: previousState)\n        \n        playDispensingAnimationThenExit()\n    }\n\n    override func isValidNextState(_ stateClass: AnyClass) -> Bool {\n        return stateClass is PartiallyFullState.Type\n    }\n    \n    func playDispensingAnimationThenExit() {\n        let slideCupAction = SKAction(named: \"slideCup\", duration: 3 * ServeState.timeScale)!\n        let slideCupActionOnNode = SKAction.run(slideCupAction, onChildWithName: \"//bottle\")\n\n        //let waitAction = SKAction.wait(forDuration: ServeState.timeScale)\n\n        game.scene?.run(slideCupActionOnNode, completion: {\n            self.stateMachine?.enter(PartiallyFullState.self)\n        })\n    }\n}\n```\n\n`SKAction(named:duration:)`\u30e1\u30bd\u30c3\u30c9\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u52d5\u4f5c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3001`run(onChildWithName:)`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30b9\u30d7\u30e9\u30a4\u30c8\u30ce\u30fc\u30c9\u306b\u95a2\u9023\u3065\u3051\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u30dc\u30c8\u30eb\u306e\u30b9\u30d7\u30e9\u30a4\u30c8\u30ce\u30fc\u30c9\u5ea7\u6a19\u3092\u5143\u306e\u5834\u6240\u304b\u3089(0, 0)\u306bMove\u3057\u305f1\u79d2\u5f8c\u3001\u3055\u3089\u306b(1000, 0)\u306bMove\u3057\u3066\u3044\u307e\u3059\u3002\n\n##\u6c34\u91cf\u5909\u5316\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\n\u7d9a\u3044\u3066\u3001\u6c34\u91cf\u5909\u5316\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```ruby:ServeState.swift\n    func playDispensingAnimationThenExit() {\n        let slideCupAction    = SKAction(named: \"slideCup\",   duration: 3 * ServeState.timeScale)!\n        let drainWaterAction  = SKAction(named: \"drainWater\", duration: ServeState.timeScale)!\n        let resetStreamAction = SKAction(named: \"resetStream\", duration: 0)!\n        let resetCupAction    = SKAction(named: \"resetCup\",    duration: 0)!\n\n        let slideCupActionOnNode    = SKAction.run(slideCupAction,    onChildWithName: \"//bottle\")\n        let drainWaterActionOnNode  = SKAction.run(drainWaterAction,  onChildWithName: \"//water\")\n        let resetStreamActionOnNode = SKAction.run(resetStreamAction, onChildWithName: \"//stream\")\n        let resetCupActionOnNode    = SKAction.run(resetCupAction,    onChildWithName: \"//bottle\")\n        \n        let waitAction = SKAction.wait(forDuration: ServeState.timeScale)\n        let innerSequence = [waitAction, drainWaterActionOnNode,\n                             waitAction, resetStreamActionOnNode,\n                             waitAction, resetCupActionOnNode]\n        let innerSequenceAction = SKAction.sequence(innerSequence)\n        \n        let group = [slideCupActionOnNode, innerSequenceAction]\n        let groupAction = SKAction.group(group)\n        \n        game.scene?.run(groupAction, completion: {\n            self.stateMachine?.enter(PartiallyFullState.self)\n        })\n    }\n```\n\n\n\n###\u30d3\u30eb\u30c9\n\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u753b\u9762\u3092\u30bf\u30c3\u30d7\u3059\u308b\u3068\u3001\u30dc\u30c8\u30eb\u304c\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u304d\u305f\u5f8c\u3001\u7d66\u6c34\u6a5f\u30bf\u30f3\u30af\u306e\u6c34\u91cf\u304c\u6e1b\u5c11\u3057\u3066\u304b\u3089\u30dc\u30c8\u30eb\u304c\u3055\u3089\u306b\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n##\u6c34\u6d41\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\n\u30dc\u30c8\u30eb\u30b9\u30e9\u30a4\u30c9\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u30bf\u30f3\u30af\u6c34\u91cf\u6e1b\u5c11\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u9593\u306b\u3001\u6c34\u6d41\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u633f\u5165\u3057\u307e\u3059\u3002\n\n```ruby:ServeState.swift\n    func playDispensingAnimationThenExit() {\n        let slideCupAction    = SKAction(named: \"slideCup\",    duration: 3 * ServeState.timeScale)!\n        let drainWaterAction  = SKAction(named: \"drainWater\",  duration: ServeState.timeScale)!\n        let resetStreamAction = SKAction(named: \"resetStream\", duration: 0)!\n        let resetCupAction    = SKAction(named: \"resetCup\",    duration: 0)!\n        let fillCupAction     = SKAction(named: \"fillCup\",     duration: 2 * ServeState.timeScale)!\n\n        let slideCupActionOnNode    = SKAction.run(slideCupAction,    onChildWithName: \"//bottle\")\n        let drainWaterActionOnNode  = SKAction.run(drainWaterAction,  onChildWithName: \"//water\")\n        let resetStreamActionOnNode = SKAction.run(resetStreamAction, onChildWithName: \"//stream\")\n        let resetCupActionOnNode    = SKAction.run(resetCupAction,    onChildWithName: \"//bottle\")\n        let fillCupActionOnNode     = SKAction.run(fillCupAction,     onChildWithName: \"//stream\")\n        \n        let waitAction = SKAction.wait(forDuration: ServeState.timeScale)\n        let innerSequence = [waitAction, drainWaterActionOnNode,\n                             waitAction, resetStreamActionOnNode,\n                             waitAction, resetCupActionOnNode]\n        let innerSequenceAction = SKAction.sequence(innerSequence)\n        \n        let group = [slideCupActionOnNode, fillCupActionOnNode, innerSequenceAction]\n        let groupAction = SKAction.group(group)\n        \n        game.scene?.run(groupAction, completion: {\n            self.stateMachine?.enter(PartiallyFullState.self)\n        })\n    }\n```\n\n###\u30d3\u30eb\u30c9\n\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3067\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\n\u4eca\u5ea6\u306f\u3001\u6c34\u91cf\u304c\u6e1b\u5c11\u3059\u308b\u3068\u540c\u6642\u306b\u6c34\u6d41\u304c\u30dc\u30c8\u30eb\u306b\u6ce8\u304e\u8fbc\u307e\u308c\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n##\u6761\u4ef6\u4ed8\u304d\u3067\u30ab\u30e9\u72b6\u614b\u306b\u9077\u79fb\u3055\u305b\u308b\n\u7d66\u6c34\u6a5f\u306e\u30bf\u30f3\u30af\u304c\u7a7a\u306b\u306a\u3063\u305f\u3089\u3001\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u3092`EmptyState`\u306b\u9077\u79fb\u3055\u305b\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u30ab\u30e9\u306e\u72b6\u614b\u3092\u8868\u73fe\u3059\u308b`EmptyState`\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u30e1\u30cb\u30e5\u30fc\u30d0\u30fc\u304b\u3089\u300cFile > New > File... > iOS > Swift Class\u300d\u3092\u9078\u629e\u3057\u307e\u3059\u3002\uff08EmptyState.swift\uff09\n\n`GameplayKit`\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3001`DispenserState`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f`EmptyState`\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```ruby:EmptyState.swift\nimport GameplayKit\n\nclass EmptyState: DispenserState {\n\n    init(game: GameScene) {\n        super.init(game: game, associatedNodeName: \"EmptyState\")\n    }\n    \n    override func didEnter(from previousState: GKState?) {\n        super.didEnter(from: previousState)\n        \n        let red = SKColor.red\n        changeIndicatorLightToColor(red)\n    }\n    \n    override func willExit(to nextState: GKState) {\n        super.willExit(to: nextState)\n        \n        let black = SKColor.black\n        changeIndicatorLightToColor(black)\n    }\n    \n}\n```\n\n\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3001`didEnter(from:)`\u30e1\u30bd\u30c3\u30c9\u304a\u3088\u3073 `willExit(to:)`\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n`EmptyState`\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u305f\u3089\u3001\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u306b\u767b\u9332\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```ruby:GameScene.swift\n    override func didMove(to view: SKView) {\n        let fullState = FullState(game: self)\n        let serveState = ServeState(game: self)\n        let partiallyFullState = PartiallyFullState(game: self)\n        let emptyState = EmptyState(game: self)\n        \n        stateMachine = GKStateMachine(states: [fullState,\n                                               serveState,\n                                               partiallyFullState,\n                                               emptyState])\n        stateMachine.enter(FullState.self)\n    }\n```\n\n###\u30ab\u30e9\u72b6\u614b\u3078\u306e\u6761\u4ef6\n\n\u7d66\u6c34\u6a5f\u306e\u30bf\u30f3\u30af\u6c34\u91cf\uff08\u30b9\u30d7\u30e9\u30a4\u30c8\u30ce\u30fc\u30c9\u306e`height`\u30d7\u30ed\u30d1\u30c6\u30a3\uff09\u304c1\u4ee5\u4e0b\u306e\u5834\u5408\u3001`EmptyState`\u306b\u9077\u79fb\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```ruby:ServeState.swift\n    func playDispensingAnimationThenExit() {\n        let slideCupAction    = SKAction(named: \"slideCup\",    duration: 3 * ServeState.timeScale)!\n        let drainWaterAction  = SKAction(named: \"drainWater\",  duration: ServeState.timeScale)!\n        let resetStreamAction = SKAction(named: \"resetStream\", duration: 0)!\n        let resetCupAction    = SKAction(named: \"resetCup\",    duration: 0)!\n        let fillCupAction     = SKAction(named: \"fillCup\",     duration: 2 * ServeState.timeScale)!\n\n        let slideCupActionOnNode    = SKAction.run(slideCupAction,    onChildWithName: \"//bottle\")\n        let drainWaterActionOnNode  = SKAction.run(drainWaterAction,  onChildWithName: \"//water\")\n        let resetStreamActionOnNode = SKAction.run(resetStreamAction, onChildWithName: \"//stream\")\n        let resetCupActionOnNode    = SKAction.run(resetCupAction,    onChildWithName: \"//bottle\")\n        let fillCupActionOnNode     = SKAction.run(fillCupAction,     onChildWithName: \"//stream\")\n        \n        let waitAction = SKAction.wait(forDuration: ServeState.timeScale)\n        let innerSequence = [waitAction, drainWaterActionOnNode,\n                             waitAction, resetStreamActionOnNode,\n                             waitAction, resetCupActionOnNode]\n        let innerSequenceAction = SKAction.sequence(innerSequence)\n        \n        let group = [slideCupActionOnNode, fillCupActionOnNode, innerSequenceAction]\n        let groupAction = SKAction.group(group)\n        \n        game.scene?.run(groupAction, completion: {\n            let waterNode = self.game.childNode(withName: \"//water\") as! SKSpriteNode\n            let restOfWater = waterNode.size.height\n            if restOfWater < 1 {\n                self.stateMachine?.enter(EmptyState.self)\n            } else {\n                self.stateMachine?.enter(PartiallyFullState.self)\n            }\n        })\n    }\n```\n\n\u3053\u308c\u3067\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u306f\u3001\u9077\u79fb\u5148\u306e\u72b6\u614b\u3092`EmptyState`\u3068`PartiallyFullState`\u3067\u5206\u5c90\u3057\u307e\u3059\u304c\u3001`isValidNextState(_:)`\u30e1\u30bd\u30c3\u30c9\u304c`PartiallyFullState`\u4ee5\u5916\u3078\u306e\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u3092\u8a31\u53ef\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n`EmptyState`\u306b\u3082\u9077\u79fb\u3067\u304d\u308b\u3088\u3046\u306b`isValidNextState(_:)`\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n```ruby:ServeState.swift\n    override func isValidNextState(_ stateClass: AnyClass) -> Bool {\n        switch stateClass {\n        case is PartiallyFullState.Type, is EmptyState.Type:\n            return true\n        default:\n            return false\n        }\n    }\n```\n\n###\u30d3\u30eb\u30c9\n\u7d66\u6c34\u6a5f\u306e\u30bf\u30f3\u30af\u6b8b\u91cf\u304c\u7121\u304f\u306a\u308b\u3068\u3001\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u30d1\u30cd\u30eb\u304c\u300cEmpty\u300d\u306b\u306a\u308a\u8868\u793a\u30e9\u30f3\u30d7\u304c\u30ec\u30c3\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n<img width=\"680\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-25 1.54.44.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/70476/0decb3ae-0c4d-7989-2587-dd9b9a9eb095.png\">\n\n#\u6b21\u56de\n\u8907\u96d1\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u307b\u304b\u3001\u30b9\u30c6\u30fc\u30c8\u9077\u79fb\u306e\u5206\u5c90\u3082\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n[\u3010GameplayKit\u3011iOS\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u306b\u304a\u3051\u308bState\u30d1\u30bf\u30fc\u30f3\u5b9f\u8df5 Part_6]()\u3067\u306f\u3001`SpriteKit`\u306b\u304a\u3051\u308b\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\n", "tags": ["SpriteKit", "GameplayKit", "Swift", "Xcode", "iOS"]}