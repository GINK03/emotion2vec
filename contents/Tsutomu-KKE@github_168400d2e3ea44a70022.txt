{"tags": ["Qiita", "Python", "Jupyter"], "context": "\n\n\u306f\u3058\u3081\u306b\nQiita\u306e\u8a18\u4e8b\u3092Jupyter\u3067\u898b\u305f\u3044\u3068\u304d\u3001\u30b3\u30d4\u30da\u3067\u3082\u3044\u3044\u3067\u3059\u304c\u3001\u4e00\u62ec\u3057\u3066\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nJupyter notebook\u304b\u3089Markdown\u3078\n\n\u307e\u305a\u306f\u3001Jupyter notebook\u304b\u3089Markdown\u3078\u5909\u63db\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nJupyter\u306e\"File\"\u30e1\u30cb\u30e5\u30fc\u306e\"Download as\"\u304b\u3089\u3082\u3067\u304d\u307e\u3059\u304c\u3001Python\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\"make_md.py\"\u3068\u3057\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u7d50\u679c\u3092\u753b\u9762\u306b\u8868\u793a\u3057\u307e\u3059\u3002\n\n\npython make_md.py \"\u30d5\u30a1\u30a4\u30eb\u540d\"\n\n\n\"raw\"\u306e\u5834\u5408\u3001pre\u30bf\u30b0\u3067\u56f2\u3093\u3067\u3044\u307e\u3059\u3002\n\"code\"\u306e\u5834\u5408\u3001\"py3\"\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nmake_md.py\nimport sys, yaml\nif len(sys.argv) < 2:\n    exit()\n\ntry:\n    with open(sys.argv[1], encoding='utf-8') as f:\n        ls = yaml.load(f)['cells']\nexcept:\n    exit()\n\nfor dc in ls:\n    typ = dc['cell_type']\n    src = ''.join(dc['source'])\n    if not src: continue\n    if typ == 'markdown':\n        print('%s'%src)\n    elif typ == 'raw':\n        print('<pre>\\n%s\\n</pre>'%src)\n    elif typ == 'code':\n        print('\\n```py3:python3\\n%s\\n```'%src)\n\n\n\nMarkdown\u304b\u3089Jupyter\u3078\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\"make_ipynb.py\"\u3068\u3057\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001Jupyter\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\npython make_ipynb.py \"URL\"\n\n\n\n\nmake_ipynb.py\nimport sys, urllib.request\nfrom itertools import takewhile\nif len(sys.argv) < 2:\n    exit()\ntry:\n    s = urllib.request.urlopen(sys.argv[1]+'.md').read().decode().rstrip()\n    ss = s.replace('\\\\', '\\\\\\\\').replace('\\t', '\\\\t').replace('\"', '\\\\\"').split('\\n')\nexcept:\n    exit()\nfn = ss[0]\nss[0] = '# ' + ss[0]\n\ndef parse_str(ss):\n    tt = list(takewhile(lambda s: not s.startswith('```'), ss))\n    ss = ss[len(tt):]\n    cell_type = 'raw' if len(tt) == 0 else 'markdown'\n    if cell_type == 'raw':\n        nm = ss[0][(ss[0]+':').index(':')+1:]\n        tg = ss[0][3:len(ss[0])-len(nm)].rstrip(':')\n        ss = ss[1:]\n        if tg.startswith('py') or tg == 'bash':\n            cell_type = 'code'\n        tt = list(takewhile(lambda s: not s.startswith('```'), ss))\n        ss = ss[len(tt):]\n        if cell_type == 'code':\n            tt = list(takewhile(lambda s: not s.startswith('>>>'), tt))\n        if ss:\n            ss = ss[1:]\n        tt = ([('%%' if tg == 'bash' else '# ') + tg] if tg else []) + tt\n    return cell_type, tt, ss\ncdin = '   \"execution_count\": null,\\n   \"outputs\": [],\\n   '\n\nrr = []\nwhile ss:\n    cell_type, tt, ss = parse_str(ss)\n    s = '\\\\n\",\\n    \"'.join(tt)\n    if s:\n        rr.append(\"\"\"\\\n   \"cell_type\": \"%s\",\n   \"metadata\": {},\n%s   \"source\": [\n    \"%s\"\n   ]\n\"\"\"%(cell_type, '' if cell_type != 'code' else cdin, '\\\\n\",\\n    \"'.join(tt)))\n\nwith open(fn+'.ipynb', 'w') as fp:\n    fp.write(\"\"\"\\\n{\n \"cells\": [\n  {\n\"\"\")\n    fp.write('  },\\n  {\\n'.join(rr))\n    fp.write(\"\"\"\\\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.5.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 0\n}\\n\"\"\")\n\n\n\n\u8ffd\u8a18\n\nTsutimu-KKE@github\u306ePython\u306e\u8a18\u4e8b\u76f4\u8fd120\u3092\u81ea\u52d5\u3067\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n\nhttps://hub.docker.com/r/tsutomu7/qiita-jupyter/\n\n\u30dd\u30fc\u30bf\u30eb\u306eflask\u306e\u30dd\u30fc\u30c8\u30925000\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b5\u30d6\u306eJupyter\u306e\u30dd\u30fc\u30c8\u306f8888\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nKitematic\u306e\u3068\u304d\u306f\u30018888\u306b\u623b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\n\u4e00\u6642\u7684\u306bArukas\u3067\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n\n\nhttps://qiita-jupyter.arukascloud.io/\n\n\n\n\u4ee5\u4e0a\n# \u306f\u3058\u3081\u306b\nQiita\u306e\u8a18\u4e8b\u3092Jupyter\u3067\u898b\u305f\u3044\u3068\u304d\u3001\u30b3\u30d4\u30da\u3067\u3082\u3044\u3044\u3067\u3059\u304c\u3001\u4e00\u62ec\u3057\u3066\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n## Jupyter notebook\u304b\u3089Markdown\u3078\n- \u307e\u305a\u306f\u3001Jupyter notebook\u304b\u3089Markdown\u3078\u5909\u63db\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n- Jupyter\u306e\"File\"\u30e1\u30cb\u30e5\u30fc\u306e\"Download as\"\u304b\u3089\u3082\u3067\u304d\u307e\u3059\u304c\u3001Python\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n- \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\"make_md.py\"\u3068\u3057\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u7d50\u679c\u3092\u753b\u9762\u306b\u8868\u793a\u3057\u307e\u3059\u3002\n    - python make_md.py \"\u30d5\u30a1\u30a4\u30eb\u540d\"\n- \"raw\"\u306e\u5834\u5408\u3001pre\u30bf\u30b0\u3067\u56f2\u3093\u3067\u3044\u307e\u3059\u3002\n- \"code\"\u306e\u5834\u5408\u3001\"py3\"\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py3:make_md.py\nimport sys, yaml\nif len(sys.argv) < 2:\n    exit()\n\ntry:\n    with open(sys.argv[1], encoding='utf-8') as f:\n        ls = yaml.load(f)['cells']\nexcept:\n    exit()\n\nfor dc in ls:\n    typ = dc['cell_type']\n    src = ''.join(dc['source'])\n    if not src: continue\n    if typ == 'markdown':\n        print('%s'%src)\n    elif typ == 'raw':\n        print('<pre>\\n%s\\n</pre>'%src)\n    elif typ == 'code':\n        print('\\n```py3:python3\\n%s\\n```'%src)\n```\n## Markdown\u304b\u3089Jupyter\u3078\n- \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\"make_ipynb.py\"\u3068\u3057\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001Jupyter\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n    - python make_ipynb.py \"URL\"\n\n```py3:make_ipynb.py\nimport sys, urllib.request\nfrom itertools import takewhile\nif len(sys.argv) < 2:\n    exit()\ntry:\n    s = urllib.request.urlopen(sys.argv[1]+'.md').read().decode().rstrip()\n    ss = s.replace('\\\\', '\\\\\\\\').replace('\\t', '\\\\t').replace('\"', '\\\\\"').split('\\n')\nexcept:\n    exit()\nfn = ss[0]\nss[0] = '# ' + ss[0]\n\ndef parse_str(ss):\n    tt = list(takewhile(lambda s: not s.startswith('```'), ss))\n    ss = ss[len(tt):]\n    cell_type = 'raw' if len(tt) == 0 else 'markdown'\n    if cell_type == 'raw':\n        nm = ss[0][(ss[0]+':').index(':')+1:]\n        tg = ss[0][3:len(ss[0])-len(nm)].rstrip(':')\n        ss = ss[1:]\n        if tg.startswith('py') or tg == 'bash':\n            cell_type = 'code'\n        tt = list(takewhile(lambda s: not s.startswith('```'), ss))\n        ss = ss[len(tt):]\n        if cell_type == 'code':\n            tt = list(takewhile(lambda s: not s.startswith('>>>'), tt))\n        if ss:\n            ss = ss[1:]\n        tt = ([('%%' if tg == 'bash' else '# ') + tg] if tg else []) + tt\n    return cell_type, tt, ss\ncdin = '   \"execution_count\": null,\\n   \"outputs\": [],\\n   '\n\nrr = []\nwhile ss:\n    cell_type, tt, ss = parse_str(ss)\n    s = '\\\\n\",\\n    \"'.join(tt)\n    if s:\n        rr.append(\"\"\"\\\n   \"cell_type\": \"%s\",\n   \"metadata\": {},\n%s   \"source\": [\n    \"%s\"\n   ]\n\"\"\"%(cell_type, '' if cell_type != 'code' else cdin, '\\\\n\",\\n    \"'.join(tt)))\n\nwith open(fn+'.ipynb', 'w') as fp:\n    fp.write(\"\"\"\\\n{\n \"cells\": [\n  {\n\"\"\")\n    fp.write('  },\\n  {\\n'.join(rr))\n    fp.write(\"\"\"\\\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.5.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 0\n}\\n\"\"\")\n```\n\n# \u8ffd\u8a18\n- Tsutimu-KKE@github\u306ePython\u306e\u8a18\u4e8b\u76f4\u8fd120\u3092\u81ea\u52d5\u3067\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n    - https://hub.docker.com/r/tsutomu7/qiita-jupyter/\n        - \u30dd\u30fc\u30bf\u30eb\u306eflask\u306e\u30dd\u30fc\u30c8\u30925000\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n        - \u30b5\u30d6\u306eJupyter\u306e\u30dd\u30fc\u30c8\u306f8888\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n            - Kitematic\u306e\u3068\u304d\u306f\u30018888\u306b\u623b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n- \u4e00\u6642\u7684\u306bArukas\u3067\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n    - https://qiita-jupyter.arukascloud.io/\n\n\u4ee5\u4e0a\n"}