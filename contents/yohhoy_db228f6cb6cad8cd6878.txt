{"context": " More than 1 year has passed since last update.Learn Rust by writing Entirely Too Many linked lists\nhttp://cglab.ca/~abeinges/blah/too-many-lists/book/\nhttps://github.com/Gankro/too-many-lists\n\nI fairly frequently get asked how to implement a linked list in Rust. The answer honestly depends on what your requirements are, and it's obviously not super easy to answer the question on the spot. As such I've decided to write this book to comprehensively answer the question once and for all.\nIn this series I will teach you basic and advanced Rust programming entirely by having you implement 6 linked lists. In doing so, you should learn:\n\nThe following pointer types: &, &mut, Box, Rc, Arc, *const, *mut\n\nOwnership, borrowing, inherited mutability, interior mutability, Copy\nAll The Keywords: struct, enum, fn, pub, impl, use, ...\nPattern matching, generics, destructors\nTesting\nBasic Unsafe Rust\n\nYes, linked lists are so truly awful that you deal with all of these concepts in making them real.\n\n\uff08\u53c2\u8003\u8a33\uff09\n\nRust\u3067\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u3092\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\u3068\u3044\u3046\u8cea\u554f\u3092\u305f\u3073\u305f\u3073\u53d7\u3051\u307e\u3059\u3002\u6b63\u76f4\u306a\u3068\u3053\u308d\u3001\u56de\u7b54\u5185\u5bb9\u306f\u3069\u306e\u3088\u3046\u306a\u8981\u4ef6\u304b\u306b\u4f9d\u5b58\u3057\u3001\u305d\u306e\u5834\u3067\u8cea\u554f\u306b\u7b54\u3048\u308b\u306e\u306f\u7c21\u5358\u306a\u3053\u3068\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u3053\u3046\u3044\u3063\u305f\u8cea\u554f\u306b\u307e\u3068\u3081\u3066\u7b54\u3048\u308b\u672c\u66f8\u3092\u66f8\u3053\u3046\u3068\u6c7a\u3081\u307e\u3057\u305f\u3002\n\u3053\u306e\u30b7\u30ea\u30fc\u30ba\u3067\u306f\u30016\u7a2e\u985e\u306e\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u5b9f\u88c5\u3092\u901a\u3058\u3066Rust\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u3068\u5fdc\u7528\u3092\u6559\u3048\u307e\u3059\u3002\u305d\u3053\u3067\u306f\u3001\u4e0b\u8a18\u3092\u5b66\u3079\u307e\u3059\uff1a\n\n\u6b21\u306e\u30dd\u30a4\u30f3\u30bf\u578b\uff1a&, &mut, Box, Rc, Arc, *const, *mut\n\n\u6240\u6709\u6a29(ownership)\u3001\u501f\u7528(borrowing)\u3001mutable\u6027\u306e\u7d99\u627f(inherited mutability)\u3001\u5185\u7684\u306amutable\u6027(interior mutability)\u3001\u30b3\u30d4\u30fc(copy)\n\u5168\u3066\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\uff1astruct, enum, fn, pub, impl, use, ...\n\u30c6\u30b9\u30c8\nUnsafe\u306aRust\u306e\u57fa\u790e\n\n\u3048\u3048\u3001\u3053\u308c\u3089\u5168\u3066\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6271\u3046\u306e\u306b\u3001\u30ea\u30f3\u30af\u30b9\u30ea\u30b9\u30c8\u306e\u5b9f\u88c5\u3068\u3044\u3046\u306e\u306f\u30cf\u30c3\u30ad\u30ea\u8a00\u3046\u3068\u3072\u3069\u3044\u984c\u6750\u3067\u306f\u3042\u308a\u307e\u3059\u3002\n\nLearn Rust by writing Entirely Too Many linked lists\nhttp://cglab.ca/~abeinges/blah/too-many-lists/book/\nhttps://github.com/Gankro/too-many-lists\n\n> I fairly frequently get asked how to implement a linked list in Rust. The answer honestly depends on what your requirements are, and it's obviously not super easy to answer the question on the spot. As such I've decided to write this book to comprehensively answer the question once and for all.\n> \n> In this series I will teach you basic and advanced Rust programming entirely by having you implement 6 linked lists. In doing so, you should learn:\n> \n> - The following pointer types: `&`, `&mut`, `Box`, `Rc`, `Arc`, `*const`, `*mut`\n> - Ownership, borrowing, inherited mutability, interior mutability, Copy\n> - All The Keywords: struct, enum, fn, pub, impl, use, ...\n> - Pattern matching, generics, destructors\n> - Testing\n> - Basic Unsafe Rust\n> \n> Yes, linked lists are so truly awful that you deal with all of these concepts in making them real.\n\n\uff08\u53c2\u8003\u8a33\uff09\n> Rust\u3067\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u3092\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\u3068\u3044\u3046\u8cea\u554f\u3092\u305f\u3073\u305f\u3073\u53d7\u3051\u307e\u3059\u3002\u6b63\u76f4\u306a\u3068\u3053\u308d\u3001\u56de\u7b54\u5185\u5bb9\u306f\u3069\u306e\u3088\u3046\u306a\u8981\u4ef6\u304b\u306b\u4f9d\u5b58\u3057\u3001\u305d\u306e\u5834\u3067\u8cea\u554f\u306b\u7b54\u3048\u308b\u306e\u306f\u7c21\u5358\u306a\u3053\u3068\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u3053\u3046\u3044\u3063\u305f\u8cea\u554f\u306b\u307e\u3068\u3081\u3066\u7b54\u3048\u308b\u672c\u66f8\u3092\u66f8\u3053\u3046\u3068\u6c7a\u3081\u307e\u3057\u305f\u3002\n>\n> \u3053\u306e\u30b7\u30ea\u30fc\u30ba\u3067\u306f\u30016\u7a2e\u985e\u306e\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u5b9f\u88c5\u3092\u901a\u3058\u3066Rust\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u3068\u5fdc\u7528\u3092\u6559\u3048\u307e\u3059\u3002\u305d\u3053\u3067\u306f\u3001\u4e0b\u8a18\u3092\u5b66\u3079\u307e\u3059\uff1a\n>\n> - \u6b21\u306e\u30dd\u30a4\u30f3\u30bf\u578b\uff1a`&`, `&mut`, `Box`, `Rc`, `Arc`, `*const`, `*mut`\n> - \u6240\u6709\u6a29(ownership)\u3001\u501f\u7528(borrowing)\u3001mutable\u6027\u306e\u7d99\u627f(inherited mutability)\u3001\u5185\u7684\u306amutable\u6027(interior mutability)\u3001\u30b3\u30d4\u30fc(copy)\n> - \u5168\u3066\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\uff1astruct, enum, fn, pub, impl, use, ...\n> - \u30c6\u30b9\u30c8\n> - Unsafe\u306aRust\u306e\u57fa\u790e\n> \n> \u3048\u3048\u3001\u3053\u308c\u3089\u5168\u3066\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6271\u3046\u306e\u306b\u3001\u30ea\u30f3\u30af\u30b9\u30ea\u30b9\u30c8\u306e\u5b9f\u88c5\u3068\u3044\u3046\u306e\u306f\u30cf\u30c3\u30ad\u30ea\u8a00\u3046\u3068\u3072\u3069\u3044\u984c\u6750\u3067\u306f\u3042\u308a\u307e\u3059\u3002\n\n", "tags": ["rust"]}