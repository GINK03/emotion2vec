{"context": " More than 1 year has passed since last update.\n\n\u76ee\u6a19\nO'Reilly Japan\u306eHP\u304b\u3089\u672c\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3001\n\u53d6\u5f97\u3057\u305f\u60c5\u5831\u304b\u3089\u672c\u3092\u975e\u968e\u5c64\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u5206\u985e\u3057\u3066\u307f\u307e\u3059\u3002\n\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\u3000\u30fbWeb\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u304b\u3089\u672c\u306e\u8a73\u7d30\u60c5\u5831\u60c5\u5831\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\n\u3000\u3000\u672c\u7d39\u4ecb\u306e\u6587\u7ae0\u3092\u30ea\u30b9\u30c8\u3067\u53d6\u5f97\u3059\u308b\n\u3000\u30fb\u672c\u3054\u3068\u306b\u672c\u7d39\u4ecb\u306e\u6587\u7ae0\u3092\u5358\u8a9e\u30ec\u30d9\u30eb\u306b\u5206\u89e3\u3057\u3066\u3001\u5404\u3005\u306e\u5358\u8a9e\u306b\u91cd\u307f\u4ed8\u3051\u3059\u308b\n\u3000\u30fb\u4e0a\u8a18\u60c5\u5831\u3092\u3082\u3068\u306b\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u672c\u3092\u5206\u985e\u3059\u308b\n\u8a00\u8a9e\u306fPython\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nWeb\u304b\u3089\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\u203b\u30af\u30ed\u30fc\u30ea\u30f3\u30b0\u3068\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3067\u8abf\u3079\u308b\u3068\u3044\u308d\u3044\u308d\u60c5\u5831\u304c\u51fa\u3066\u304f\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n1.\u307e\u305a\u3001\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306b\u3042\u308b\u65b0\u520a\u672c\u306e\u8a73\u7d30\u30da\u30fc\u30b8\u3078\u306eURL\u3092\u5168\u3066\u53d6\u5f97\u3001\n\u3000allBookLinks\u306e\u4e2d\u306b\u914d\u5217\u3067\u683c\u7d0d\u3059\u308b\u3002\n\n\nclustering.py\n#coding:utf-8\n\nimport numpy as np\nimport mechanize\nimport MeCab\nimport util\nimport re\nfrom bs4 import BeautifulSoup\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import AffinityPropagation\n\n# get O'Reilly new books from Top page\npage = mechanize.Browser()\npage.open('http://www.oreilly.co.jp/index.shtml')\n\nresponse = page.response()\nsoup = BeautifulSoup(response.read(), \"html.parser\")\n\nallBookLinks = []\nbibloLinks = soup.find_all(\"p\", class_=\"biblio_link\")\nfor bibloLink in bibloLinks:\n    books = bibloLink.find_all(\"a\", href=re.compile(\"http://www.oreilly.co.jp/books/\"))\n    for book in books:\n        allBookLinks.append( book.get(\"href\") )\n\n\n\n2.\u4e0a\u8a18\u3067\u53d6\u5f97\u3057\u305f\u672c\u306e\u8a73\u7d30\u30da\u30fc\u30b8URL\u306b\u79fb\u52d5\u3057\u3001\u79fb\u52d5\u5148\u306e\u30da\u30fc\u30b8\u304b\u3089\n\u3000titleList\u306b\u672c\u306e\u30bf\u30a4\u30c8\u30eb\u30fbinputDatas\u306b\u7d39\u4ecb\u6587\u3092\u683c\u7d0d\u3059\u308b\u3002\n\u3000\u95a2\u9023\u66f8\u7c4d\u60c5\u5831\u306eURL\u3082\u53d6\u5f97\u3057\u30011\u968e\u5c64\u5206\u3060\u3051\u30ea\u30b9\u30c8\u306b\u52a0\u3048\u308b\u3002\n\n\nclustering.py\ndef get_detail_sentence_list( detailPageLink ):\n    page.open( detailPageLink )\n    detailResponse = page.response()\n    detailSoup = BeautifulSoup( detailResponse.read(), \"html.parser\" )\n    # get title\n    titleTag = detailSoup.find(\"h3\", class_=\"title\")\n    title = titleTag.get_text().encode('utf-8')\n    # get detail\n    detailDiv = detailSoup.find(\"div\", id=\"detail\")\n    detail = detailDiv.find(\"p\").get_text().encode('utf-8')\n    # get relation book links\n    relationLinks = detailDiv.find_all(\"a\")\n    relationLinkList = []\n    for relationLink in relationLinks:\n        href = relationLink.get(\"href\")\n        if href.find('/books/') > 0:\n            relationLinkList.append(href[href.find('/books/') + len('/books/'):])\n    return [ title, detail, relationLinkList ]\n\n\n# crolling books info\ntitleList = []\ninputDatas = []\nfor bookLink in allBookLinks:\n    title, detail, relationLinkList = get_detail_sentence_list( bookLink )\n    # save\n    if not (title in titleList):\n        titleList.append(title)\n        inputDatas.append( detail )\n\n    # go to relation book links\n    for relationLink in relationLinkList:\n        title, detail, relationLinkList = get_detail_sentence_list( 'http://www.oreilly.co.jp/books/' + relationLink )\n        # save\n        if not (title in titleList):\n            titleList.append(title)\n            inputDatas.append( detail )\n\n\n\nTF-IDF\u6cd5\u3067\u672c\u3054\u3068\u306e\u7d39\u4ecb\u6587\u3092\u91cd\u307f\u4ed8\u3051\u3059\u308b\nTfidfVectorizer\u3092\u4f7f\u3063\u305fX\u306e\u4e2d\u8eab\u306f\u3001\n\u3000\u30fblen( X )=\u63a2\u7d22\u3057\u305f\u672c\u306e\u6570\n\u3000\u30fblen( X[0] )=\u672c\u306e\u7d39\u4ecb\u6587\u306e\u5358\u8a9e\u306e\u6570\n\u3000\u30fbX[0][0]=0\u756a\u76ee\u306e\u672c\u306e0\u756a\u76ee\u306b\u51fa\u3066\u304f\u308b\u5358\u8a9e\uff08terms[0]\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\uff09\u306eTF-IDF\u306e\u5024\n\u307f\u305f\u3044\u306a\u611f\u3058\u306e\u884c\u5217\u3002\n\u30ed\u30b8\u30c3\u30af\u7d44\u3093\u3067TF-IDF\u3092\u8a08\u7b97\u3057\u3066\u3082\u826f\u3044\u3051\u3069\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3068\u697d\u3002\n\nclustering.py\ndef get_word_list( targetText ):\n    tagger = MeCab.Tagger()\n    wordList = []\n    if len(targetText) > 0:\n        node = tagger.parseToNode(targetText)\n        while node:\n            if len(util.mytrim(node.surface)) > 0:\n                wordList.append(node.surface)\n            node = node.next\n    return wordList\n\ntfidfVectonizer = TfidfVectorizer(analyzer=get_word_list, min_df=1, max_df=50)\nX = tfidfVectonizer.fit_transform( inputDatas )\nterms = tfidfVectonizer.get_feature_names()\n\n\n\n\nutil.py\n#coding:utf-8\n\ndef mytrim( target ):\n    target = target.replace('\u3000','')\n    return target.strip()\n\n\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u672c\u3092\u5206\u985e\u3059\u308b\nK-means\u3068AffinityPropagation\u306e\u4e21\u65b9\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\nK-means\u306f\u5148\u306b\u4f55\u500b\u306b\u5206\u985e\u3059\u308b\u304b\u6c7a\u307e\u3063\u3066\u3044\u308b\u3068\u304d\u306b\u5229\u7528\u3001\n\u6c7a\u307e\u3063\u3066\u3044\u306a\u3044\u3068\u304d\u306fAffinityPropagation\u3092\u4f7f\u3046\u3068\u304b\u306a\u308a\u3046\u307e\u304f\u3044\u304f\u3002\n\u4eca\u56de\u306e\u5834\u5408\u306fAffinityPropagation\u306e\u307b\u3046\u304c\u9069\u3057\u3066\u3044\u305f\u3068\u601d\u3046\u3002\n\nclustering.py\n# clustering by KMeans\nk_means = KMeans(n_clusters=5, init='k-means++', n_init=5, verbose=True)\nk_means.fit(X)\nlabel = k_means.labels_\n\nclusterList = {}\nfor i in range(len(titleList)):\n    clusterList.setdefault( label[i], '' )\n    clusterList[label[i]] = clusterList[label[i]] + ',' + titleList[i]\n\nprint 'By KMeans'\nfor key, value in clusterList.items():\n    print key\n    print value\n\nprint 'By AffinityPropagation'\n# clustering by AffinityPropagation\naf = AffinityPropagation().fit(X)\nafLabel = af.labels_\nafClusterList = {}\nfor i in range(len(titleList)):\n    afClusterList.setdefault( afLabel[i], '' )\n    afClusterList[afLabel[i]] = afClusterList[afLabel[i]] + ',' + titleList[i]\n\nfor key, value in afClusterList.items():\n    print key\n    print value\n\n\n\n\u3044\u3061\u304a\u3046\u3001AffinityPropagation\u4f7f\u3063\u305f\u307b\u3046\u306e\u5b9f\u884c\u7d50\u679c\n\u306a\u3093\u304b\u305d\u308c\u3063\u307d\u304f\u306a\u3063\u305f\uff01\n\n\n\u5206\u985e1\n\n\u5b9f\u8df5 \u6a5f\u68b0\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0\n\n\u30cf\u30a4\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9Python\n\n\u521d\u3081\u3066\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\n\nMake: Electronics\u2015\u2015\u4f5c\u3063\u3066\u308f\u304b\u308b\u96fb\u6c17\u3068\u96fb\u5b50\u56de\u8def\u306e\u57fa\u790e\n\n\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u30d7\u30e9\u30f3\u30cb\u30f3\u30b0\u2015\u2015\u30ea\u30bd\u30fc\u30b9\u3092\u6700\u5927\u9650\u306b\u6d3b\u304b\u3059\u30b5\u30a4\u30c8\u5206\u6790\u30fb\u4e88\u6e2c\u30fb\u914d\u7f6e\n\n\u8a73\u8aac \u30a4\u30fc\u30b5\u30cd\u30c3\u30c8 \u7b2c2\u7248\n\nJavaScript\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u5165\u9580\n\n\u5206\u985e2\n\n\u5b9f\u8df5 Python 3\n\nCython\u2015\u2015C\u3068\u306e\u878d\u5408\u306b\u3088\u308bPython\u306e\u9ad8\u901f\u5316\n\nMongoDB & Python\n\nPython & AWS \u30af\u30c3\u30af\u30d6\u30c3\u30af\n\nPython\u306b\u3088\u308b\u30c7\u30fc\u30bf\u5206\u6790\u5165\u9580\u2015\u2015NumPy\u3001pandas\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u51e6\u7406\n\nPython\u6587\u6cd5\u8a73\u89e3\n\n\u5b9f\u8df5 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\n\n\u5165\u9580 Python 3\n\n\u521d\u3081\u3066\u306ePython \u7b2c3\u7248\n\nPython\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3000\u7b2c2\u7248\n\nArduino\u3092\u306f\u3058\u3081\u3088\u3046 \u7b2c3\u7248\n\nProcessing\u3092\u306f\u3058\u3081\u3088\u3046\n\nPython \u30af\u30c3\u30af\u30d6\u30c3\u30af \u7b2c2\u7248\n\n\u5165\u9580 \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\n\nOpenStack Swift\u2015\u2015Swift\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u7ba1\u7406\u3068\u958b\u767a\n\nSAN & NAS \u30b9\u30c8\u30ec\u30fc\u30b8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7ba1\u7406\n\n\u5206\u985e3\n\nPrototyping Lab\u2015\u2015\u300c\u4f5c\u308a\u306a\u304c\u3089\u8003\u3048\u308b\u300d\u305f\u3081\u306eArduino\u5b9f\u8df5\u30ec\u30b7\u30d4\n\n\u30a6\u30a7\u30d6\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u2015\u2015\u30b5\u30a4\u30c8\u904b\u7528\u7ba1\u7406\u306e\u5b9f\u8df5\u30c6\u30af\u30cb\u30c3\u30af\n\n\u5b9f\u8df5 Metasploit\u2015\u2015\u30da\u30cd\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u306b\u3088\u308b\u8106\u5f31\u6027\u8a55\u4fa1\n\n\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b8\u30f3\u30b0\u30fb\u30c7\u30fc\u30bf\u2015\u2015Processing\u306b\u3088\u308b\u60c5\u5831\u8996\u899a\u5316\u624b\u6cd5\n\n\u30d3\u30e5\u30fc\u30c6\u30a3\u30d5\u30eb\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\n\n\u5206\u985e4\n\n\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Ruby \u7b2c2\u7248\n\nRuby\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u2015\u2015\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306b\u3088\u308b\u30b3\u30fc\u30c9\u3068\u30c6\u30af\u30cb\u30c3\u30af\n\n\u30a2\u30f3\u30c0\u30fc\u30b9\u30bf\u30f3\u30c7\u30a3\u30f3\u30b0 \u30b3\u30f3\u30d4\u30e5\u30c6\u30fc\u30b7\u30e7\u30f3\u2015\u2015\u5358\u7d14\u306a\u6a5f\u68b0\u304b\u3089\u4e0d\u53ef\u80fd\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u307e\u3067\n\n\u521d\u3081\u3066\u306eRuby\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Ruby\n\n\u5206\u985e5\n\nSelenium\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3 & \u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\n\n\u5b9f\u8df5 Selenium WebDriver\n\n\u30c6\u30b9\u30bf\u30d6\u30ebJavaScript\n\n\u30d3\u30e5\u30fc\u30c6\u30a3\u30d5\u30eb\u30c6\u30b9\u30c6\u30a3\u30f3\u30b0\u2015\u2015\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30c6\u30b9\u30c8\u306e\u7f8e\u3057\u3044\u5b9f\u8df5\n\n\n# \u76ee\u6a19\nO'Reilly Japan\u306eHP\u304b\u3089\u672c\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3001\n\u53d6\u5f97\u3057\u305f\u60c5\u5831\u304b\u3089\u672c\u3092\u975e\u968e\u5c64\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u5206\u985e\u3057\u3066\u307f\u307e\u3059\u3002\n\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\u3000\u30fbWeb\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u304b\u3089\u672c\u306e\u8a73\u7d30\u60c5\u5831\u60c5\u5831\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\n\u3000\u3000\u672c\u7d39\u4ecb\u306e\u6587\u7ae0\u3092\u30ea\u30b9\u30c8\u3067\u53d6\u5f97\u3059\u308b\n\u3000\u30fb\u672c\u3054\u3068\u306b\u672c\u7d39\u4ecb\u306e\u6587\u7ae0\u3092\u5358\u8a9e\u30ec\u30d9\u30eb\u306b\u5206\u89e3\u3057\u3066\u3001\u5404\u3005\u306e\u5358\u8a9e\u306b\u91cd\u307f\u4ed8\u3051\u3059\u308b\n\u3000\u30fb\u4e0a\u8a18\u60c5\u5831\u3092\u3082\u3068\u306b\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u672c\u3092\u5206\u985e\u3059\u308b\n\u8a00\u8a9e\u306fPython\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n# Web\u304b\u3089\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\u203b\u30af\u30ed\u30fc\u30ea\u30f3\u30b0\u3068\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3067\u8abf\u3079\u308b\u3068\u3044\u308d\u3044\u308d\u60c5\u5831\u304c\u51fa\u3066\u304f\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n1.\u307e\u305a\u3001\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306b\u3042\u308b\u65b0\u520a\u672c\u306e\u8a73\u7d30\u30da\u30fc\u30b8\u3078\u306eURL\u3092\u5168\u3066\u53d6\u5f97\u3001\n\u3000allBookLinks\u306e\u4e2d\u306b\u914d\u5217\u3067\u683c\u7d0d\u3059\u308b\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-05 20.54.17.png](https://qiita-image-store.s3.amazonaws.com/0/66816/4931ef9d-cf57-4843-0817-2a4866dea53d.png)\n\n\n```lang:clustering.py\n#coding:utf-8\n\nimport numpy as np\nimport mechanize\nimport MeCab\nimport util\nimport re\nfrom bs4 import BeautifulSoup\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import AffinityPropagation\n\n# get O'Reilly new books from Top page\npage = mechanize.Browser()\npage.open('http://www.oreilly.co.jp/index.shtml')\n\nresponse = page.response()\nsoup = BeautifulSoup(response.read(), \"html.parser\")\n\nallBookLinks = []\nbibloLinks = soup.find_all(\"p\", class_=\"biblio_link\")\nfor bibloLink in bibloLinks:\n    books = bibloLink.find_all(\"a\", href=re.compile(\"http://www.oreilly.co.jp/books/\"))\n    for book in books:\n        allBookLinks.append( book.get(\"href\") )\n\n```\n\n2.\u4e0a\u8a18\u3067\u53d6\u5f97\u3057\u305f\u672c\u306e\u8a73\u7d30\u30da\u30fc\u30b8URL\u306b\u79fb\u52d5\u3057\u3001\u79fb\u52d5\u5148\u306e\u30da\u30fc\u30b8\u304b\u3089\n\u3000titleList\u306b\u672c\u306e\u30bf\u30a4\u30c8\u30eb\u30fbinputDatas\u306b\u7d39\u4ecb\u6587\u3092\u683c\u7d0d\u3059\u308b\u3002\n\u3000\u95a2\u9023\u66f8\u7c4d\u60c5\u5831\u306eURL\u3082\u53d6\u5f97\u3057\u30011\u968e\u5c64\u5206\u3060\u3051\u30ea\u30b9\u30c8\u306b\u52a0\u3048\u308b\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-05 21.09.01.png](https://qiita-image-store.s3.amazonaws.com/0/66816/ba630c8d-f1d0-644f-db80-7eb4b27ac921.png)\n\n```lang:clustering.py\ndef get_detail_sentence_list( detailPageLink ):\n    page.open( detailPageLink )\n    detailResponse = page.response()\n    detailSoup = BeautifulSoup( detailResponse.read(), \"html.parser\" )\n    # get title\n    titleTag = detailSoup.find(\"h3\", class_=\"title\")\n    title = titleTag.get_text().encode('utf-8')\n    # get detail\n    detailDiv = detailSoup.find(\"div\", id=\"detail\")\n    detail = detailDiv.find(\"p\").get_text().encode('utf-8')\n    # get relation book links\n    relationLinks = detailDiv.find_all(\"a\")\n    relationLinkList = []\n    for relationLink in relationLinks:\n        href = relationLink.get(\"href\")\n        if href.find('/books/') > 0:\n            relationLinkList.append(href[href.find('/books/') + len('/books/'):])\n    return [ title, detail, relationLinkList ]\n\n\n# crolling books info\ntitleList = []\ninputDatas = []\nfor bookLink in allBookLinks:\n    title, detail, relationLinkList = get_detail_sentence_list( bookLink )\n    # save\n    if not (title in titleList):\n        titleList.append(title)\n        inputDatas.append( detail )\n\n    # go to relation book links\n    for relationLink in relationLinkList:\n        title, detail, relationLinkList = get_detail_sentence_list( 'http://www.oreilly.co.jp/books/' + relationLink )\n        # save\n        if not (title in titleList):\n            titleList.append(title)\n            inputDatas.append( detail )\n```\n\n# TF-IDF\u6cd5\u3067\u672c\u3054\u3068\u306e\u7d39\u4ecb\u6587\u3092\u91cd\u307f\u4ed8\u3051\u3059\u308b\nTfidfVectorizer\u3092\u4f7f\u3063\u305fX\u306e\u4e2d\u8eab\u306f\u3001\n\u3000\u30fblen( X )=\u63a2\u7d22\u3057\u305f\u672c\u306e\u6570\n\u3000\u30fblen( X[0] )=\u672c\u306e\u7d39\u4ecb\u6587\u306e\u5358\u8a9e\u306e\u6570\n\u3000\u30fbX[0][0]=0\u756a\u76ee\u306e\u672c\u306e0\u756a\u76ee\u306b\u51fa\u3066\u304f\u308b\u5358\u8a9e\uff08terms[0]\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\uff09\u306eTF-IDF\u306e\u5024\n\u307f\u305f\u3044\u306a\u611f\u3058\u306e\u884c\u5217\u3002\n\u30ed\u30b8\u30c3\u30af\u7d44\u3093\u3067TF-IDF\u3092\u8a08\u7b97\u3057\u3066\u3082\u826f\u3044\u3051\u3069\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3068\u697d\u3002\n\n```lang:clustering.py\ndef get_word_list( targetText ):\n    tagger = MeCab.Tagger()\n    wordList = []\n    if len(targetText) > 0:\n        node = tagger.parseToNode(targetText)\n        while node:\n            if len(util.mytrim(node.surface)) > 0:\n                wordList.append(node.surface)\n            node = node.next\n    return wordList\n\ntfidfVectonizer = TfidfVectorizer(analyzer=get_word_list, min_df=1, max_df=50)\nX = tfidfVectonizer.fit_transform( inputDatas )\nterms = tfidfVectonizer.get_feature_names()\n\n```\n\n```lang:util.py\n#coding:utf-8\n\ndef mytrim( target ):\n    target = target.replace('\u3000','')\n    return target.strip()\n```\n\n\n# \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u672c\u3092\u5206\u985e\u3059\u308b\nK-means\u3068AffinityPropagation\u306e\u4e21\u65b9\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\nK-means\u306f\u5148\u306b\u4f55\u500b\u306b\u5206\u985e\u3059\u308b\u304b\u6c7a\u307e\u3063\u3066\u3044\u308b\u3068\u304d\u306b\u5229\u7528\u3001\n\u6c7a\u307e\u3063\u3066\u3044\u306a\u3044\u3068\u304d\u306fAffinityPropagation\u3092\u4f7f\u3046\u3068\u304b\u306a\u308a\u3046\u307e\u304f\u3044\u304f\u3002\n\u4eca\u56de\u306e\u5834\u5408\u306fAffinityPropagation\u306e\u307b\u3046\u304c\u9069\u3057\u3066\u3044\u305f\u3068\u601d\u3046\u3002\n\n```lang:clustering.py\n# clustering by KMeans\nk_means = KMeans(n_clusters=5, init='k-means++', n_init=5, verbose=True)\nk_means.fit(X)\nlabel = k_means.labels_\n\nclusterList = {}\nfor i in range(len(titleList)):\n    clusterList.setdefault( label[i], '' )\n    clusterList[label[i]] = clusterList[label[i]] + ',' + titleList[i]\n\nprint 'By KMeans'\nfor key, value in clusterList.items():\n    print key\n    print value\n\nprint 'By AffinityPropagation'\n# clustering by AffinityPropagation\naf = AffinityPropagation().fit(X)\nafLabel = af.labels_\nafClusterList = {}\nfor i in range(len(titleList)):\n    afClusterList.setdefault( afLabel[i], '' )\n    afClusterList[afLabel[i]] = afClusterList[afLabel[i]] + ',' + titleList[i]\n\nfor key, value in afClusterList.items():\n    print key\n    print value\n```\n\n# \u3044\u3061\u304a\u3046\u3001AffinityPropagation\u4f7f\u3063\u305f\u307b\u3046\u306e\u5b9f\u884c\u7d50\u679c\n\u306a\u3093\u304b\u305d\u308c\u3063\u307d\u304f\u306a\u3063\u305f\uff01\n<dl>\n  <dt>\u5206\u985e1</dt>\n  <dd>\u5b9f\u8df5 \u6a5f\u68b0\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0</dd>\n  <dd>\u30cf\u30a4\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9Python</dd>\n  <dd>\u521d\u3081\u3066\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9</dd>\n  <dd>Make: Electronics\u2015\u2015\u4f5c\u3063\u3066\u308f\u304b\u308b\u96fb\u6c17\u3068\u96fb\u5b50\u56de\u8def\u306e\u57fa\u790e</dd>\n  <dd>\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u30d7\u30e9\u30f3\u30cb\u30f3\u30b0\u2015\u2015\u30ea\u30bd\u30fc\u30b9\u3092\u6700\u5927\u9650\u306b\u6d3b\u304b\u3059\u30b5\u30a4\u30c8\u5206\u6790\u30fb\u4e88\u6e2c\u30fb\u914d\u7f6e</dd>\n  <dd>\u8a73\u8aac \u30a4\u30fc\u30b5\u30cd\u30c3\u30c8 \u7b2c2\u7248</dd>\n  <dd>JavaScript\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u5165\u9580</dd>\n\n  <dt>\u5206\u985e2</dt>\n<dd>\u5b9f\u8df5 Python 3</dd>\n<dd>Cython\u2015\u2015C\u3068\u306e\u878d\u5408\u306b\u3088\u308bPython\u306e\u9ad8\u901f\u5316</dd>\n<dd>MongoDB & Python</dd>\n<dd>Python & AWS \u30af\u30c3\u30af\u30d6\u30c3\u30af</dd>\n<dd>Python\u306b\u3088\u308b\u30c7\u30fc\u30bf\u5206\u6790\u5165\u9580\u2015\u2015NumPy\u3001pandas\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u51e6\u7406</dd>\n<dd>Python\u6587\u6cd5\u8a73\u89e3</dd>\n<dd>\u5b9f\u8df5 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3</dd>\n<dd>\u5165\u9580 Python 3</dd>\n<dd>\u521d\u3081\u3066\u306ePython \u7b2c3\u7248</dd>\n<dd>Python\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3000\u7b2c2\u7248</dd>\n<dd>Arduino\u3092\u306f\u3058\u3081\u3088\u3046 \u7b2c3\u7248</dd>\n<dd>Processing\u3092\u306f\u3058\u3081\u3088\u3046</dd>\n<dd>Python \u30af\u30c3\u30af\u30d6\u30c3\u30af \u7b2c2\u7248</dd>\n<dd>\u5165\u9580 \u81ea\u7136\u8a00\u8a9e\u51e6\u7406</dd>\n<dd>OpenStack Swift\u2015\u2015Swift\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u7ba1\u7406\u3068\u958b\u767a</dd>\n<dd>SAN & NAS \u30b9\u30c8\u30ec\u30fc\u30b8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7ba1\u7406</dd>\n\n  <dt>\u5206\u985e3</dt>\n<dd>Prototyping Lab\u2015\u2015\u300c\u4f5c\u308a\u306a\u304c\u3089\u8003\u3048\u308b\u300d\u305f\u3081\u306eArduino\u5b9f\u8df5\u30ec\u30b7\u30d4</dd>\n<dd>\u30a6\u30a7\u30d6\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u2015\u2015\u30b5\u30a4\u30c8\u904b\u7528\u7ba1\u7406\u306e\u5b9f\u8df5\u30c6\u30af\u30cb\u30c3\u30af</dd>\n<dd>\u5b9f\u8df5 Metasploit\u2015\u2015\u30da\u30cd\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u306b\u3088\u308b\u8106\u5f31\u6027\u8a55\u4fa1</dd>\n<dd>\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b8\u30f3\u30b0\u30fb\u30c7\u30fc\u30bf\u2015\u2015Processing\u306b\u3088\u308b\u60c5\u5831\u8996\u899a\u5316\u624b\u6cd5</dd>\n<dd>\u30d3\u30e5\u30fc\u30c6\u30a3\u30d5\u30eb\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3</dd>\n  <dt>\u5206\u985e4</dt>\n<dd>\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Ruby \u7b2c2\u7248</dd>\n<dd>Ruby\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u2015\u2015\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306b\u3088\u308b\u30b3\u30fc\u30c9\u3068\u30c6\u30af\u30cb\u30c3\u30af</dd>\n<dd>\u30a2\u30f3\u30c0\u30fc\u30b9\u30bf\u30f3\u30c7\u30a3\u30f3\u30b0 \u30b3\u30f3\u30d4\u30e5\u30c6\u30fc\u30b7\u30e7\u30f3\u2015\u2015\u5358\u7d14\u306a\u6a5f\u68b0\u304b\u3089\u4e0d\u53ef\u80fd\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u307e\u3067</dd>\n<dd>\u521d\u3081\u3066\u306eRuby</dd>\n<dd>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Ruby</dd>\n  <dt>\u5206\u985e5</dt>\n<dd>Selenium\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3 & \u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9</dd>\n<dd>\u5b9f\u8df5 Selenium WebDriver</dd>\n<dd>\u30c6\u30b9\u30bf\u30d6\u30ebJavaScript</dd>\n<dd>\u30d3\u30e5\u30fc\u30c6\u30a3\u30d5\u30eb\u30c6\u30b9\u30c6\u30a3\u30f3\u30b0\u2015\u2015\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30c6\u30b9\u30c8\u306e\u7f8e\u3057\u3044\u5b9f\u8df5\n</dl>\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "Python", "scikit-learn", "clustering", "MachineLearning"]}