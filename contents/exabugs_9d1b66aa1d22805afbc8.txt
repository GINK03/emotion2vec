{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nESP8266 (ESP-WROOM-02) \u3067 I2C \u3067\u63a5\u7d9a\u53ef\u80fd\u306a LCD 8\u68412\u884c \u3092\u5236\u5fa1\u3059\u308b\n\n\u306f\u3058\u3081\u306b\n\u90e8\u54c1\u30bb\u30c3\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u305f LCD \u3092\u5236\u5fa1\u3057\u3088\u3046\u3068\u3044\u3046\u4f01\u753b\u306a\u306e\u3067\u3059\u304c\u300116\u68412\u884c \u578b\u756a:1602 \u3068\u3044\u3046\u3053\u3068\u3057\u304b\u308f\u304b\u3089\u306a\u3044 orz\u3002\n\u79cb\u6708\u3067\u3082\u6271\u3063\u3066\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u3053\u306e LCD \u306f\u8ae6\u3081\u3066\u3001\u3082\u3063\u3068\u5b89\u4fa1\u3067\u30e1\u30b8\u30e3\u30fc\u306a LCD \u3092\u9078\u629e\u3057\u307e\u3057\u305f\u3002\u305d\u308c\u304c AQM0802 \u3068\u3044\u3046 LCD \u3067\u3059\u3002\n\n\u90e8\u54c1\u8abf\u9054\n\u4e0a\u304c AQM0802 (8\u68412\u884c)\u3001\u4e0b\u304c 1602 (16\u68412\u884c)\n\nAQM0802 \u306f\u5b89\u4fa1\u306b\u5165\u624b\u53ef\u80fd\u3067\u3059\u3002I2C\u63a5\u7d9a \u5c0f\u578b\u30ad\u30e3\u30e9\u30af\u30bf LCD\u30e2\u30b8\u30e5\u30fc\u30eb (8x2\u884c) 320\u5186\n\u30d6\u30ec\u30dc\u30fc\u7528\u306b\u30d4\u30c3\u30c1\u5909\u63db\u6e08\u307f\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3053\u3061\u3089\u3002\u30d4\u30c3\u30c1\u5909\u63db\u30e2\u30b8\u30e5\u30fc\u30eb (\u5b8c\u6210\u54c1) 700\u5186 \u4eca\u56de\u306f\u3053\u308c\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\n\u4ee5\u4e0b\u3001\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u629c\u7c8b\n\n\u30ab\u30bf\u30ab\u30ca\u3082\u8868\u793a\u53ef\u80fd\u306e\u3088\u3046\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u53d6\u308a\u6562\u3048\u305a\u3001\u30aa\u30ec\u30f3\u30b8\u8272\u7db2\u639b\u3051 (ASCII\u4e92\u63db) \u90e8\u5206\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u307e\u3059\u3002\n\n\n\u56de\u8def\n\nI2C \u7528\u306e\u7aef\u5b50\u306f\u3001ESP8266 \u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u4e0a\u3067\u306f IO2/IO14 \u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4ee5\u4e0b (pins_arduino.h) \u3067 IO4/IO5 \u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3088\u3063\u3066\u3001\u4eca\u56de\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u6307\u5b9a\u306e IO4/IO5 \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n~/Library/Arduino15/packages/esp8266/hardware/esp8266/2.0.0/variants/generic/pins_arduino.h\nstatic const uint8_t SDA = 4;\nstatic const uint8_t SCL = 5;\n\n\nWROOM02 \u306e\u30ea\u30bb\u30c3\u30c8(RST) \u3092\u3001LCD \u306e\u30ea\u30bb\u30c3\u30c8\u3068\u5171\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\u56de\u8def\u56f3\n\nI2C \u306e SDA/SCL \u306f\u3001\u30d7\u30eb\u30a2\u30c3\u30d7\u304c\u5fc5\u8981\u3067\u3059\u3002\nI2C \u306f\u63a5\u7d9a\u672c\u6570\u304c\u5c11\u306a\u304f\u3066\u3001\u3068\u3066\u3082\u697d\u3067\u3059\u306d www\n\n\n\nEagle\nhttps: //github.com/exabugs/eagleLCD\n\n\u30b9\u30b1\u30c3\u30c1\n\nWire \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b7\u30ea\u30a2\u30eb\u304b\u3089\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u3001LCD \u306b\u8868\u793a\u3057\u307e\u3059\u3002echo\u7684\u306a\u3002\nI2C \u6a5f\u5668\u306f\u3001\u305d\u308c\u305e\u308c\u56fa\u6709\u306e\u30b9\u30ec\u30fc\u30d6\u30fb\u30a2\u30c9\u30ec\u30b9\u3092\u6301\u3064\u3088\u3046\u3067\u3059\u3002AQM0802 \u3067\u306f 0x3e \u304c\u305d\u308c\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n\u521d\u671f\u5316\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u306e\u4f8b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002(\u534a\u5206\u304f\u3089\u3044\u7406\u89e3\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u30b9\u30a4\u30de\u30bb\u30f3\u3002)\n\n#include <Wire.h>\n\n#define ADDR 0x3e\n\nuint8_t CONTROLL[] = {\n  0x00, // Command\n  0x40, // Data\n};\n\nconst int C_COMM = 0;\nconst int C_DATA = 1;\n\nuint8_t settings[] = {\n\n  0b00111001, // 0x39 // [Function set] DL(4):1(8-bit) N(3):1(2-line) DH(2):0(5x8 dot) IS(0):1(extension)\n\n  // Internal OSC frequency\n  (0b0001 << 4) + 0b0100, // BS(3):0(1/5blas) F(210):(internal Freq:100)\n\n  // Contrast set\n  (0b0111 << 4) + 0b0100, // Contrast(3210):4\n\n  // Power/ICON/Contrast control\n  (0b0101 << 4) + 0b0110, // Ion(3):0(ICON:off) Bon(2):1(booster:on) C5C4(10):10(contrast set)\n\n  // Follower control\n  (0b0110 << 4) + 0b1100, // Fon(3):1(on) Rab(210):100\n\n  // Display ON/OFF control\n  (0b00001 << 3) + 0b111, // D(2):1(Display:ON) C(1):1(Cursor:ON) B(0):1(Cursor Blink:ON)\n};\n\nconst int LINE = 2;\n\nString buff[LINE];\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\");\n\n//Wire.begin(4, 5); // (SDA,SCL) Default\n  Wire.begin(); // (SDA,SCL)\n\n  // LCD\u521d\u671f\u5316\n  write(C_COMM, settings, sizeof(settings));\n}\n\n\nvoid loop() {\n  if (0 < Serial.available()) {\n    delay(10);\n\n    for (int i = 0; i < LINE - 1; i++) {\n      buff[i] = buff[i + 1];\n    }\n    buff[LINE - 1] = \"\";\n\n    while (0 < Serial.available()) {\n      char ch = Serial.read();\n      if (ch == '\\n') {\n        print2line();\n        Serial.println(buff[LINE - 1]);\n        break;\n      } else if (0x20 <= ch && ch <= 0x7f) {\n        // ASCII\u6587\u5b57\u30b3\u30fc\u30c9\n        buff[LINE - 1] = buff[LINE - 1] + ch;\n      } else {\n        // Do nothing\n      }\n    }\n  }\n}\n\n// 2\u884c\u8868\u793a\nvoid print2line() {\n  // \u30af\u30ea\u30a2\n  uint8_t cmd[] = {0x01};\n  write(C_COMM, cmd, sizeof(cmd));\n  delay(1);\n\n  // \u66f8\u304d\u51fa\u3057\n  for (int i = 0; i < LINE; i++) {\n    uint8_t pos = 0x80 | i * 0x40; // \u4f4d\u7f6e\n    uint8_t cmd[] = {pos};\n    write(C_COMM, cmd, sizeof(cmd));\n    write(C_DATA, (uint8_t *)buff[i].c_str(), buff[i].length());\n  }\n}\n\nvoid write(int type, uint8_t *data, size_t len) {\n  for (int i=0; i < len; i++) {\n    Wire.beginTransmission(ADDR);\n    Wire.write(CONTROLL[type]);\n    Wire.write(data[i]);\n    Wire.endTransmission();\n    delayMicroseconds(27); // 26.3us\n  }\n}\n\n\n\u7d50\u679c\n\n\u8d77\u52d5\u5f8c\u3001\u30b7\u30ea\u30a2\u30eb\u304b\u3089\u9069\u5f53\u306b\u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nLCD \u306b\u8868\u793a\u3055\u308c\u305f\u3089\u6210\u529f\u3067\u3059\u3002\n\u3055\u3089\u306b\u5165\u529b\u3059\u308b\u3068\u3001LCD \u4e0a\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u3066\u30012\u884c\u76ee\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\n\n\u307e\u3068\u3081\n\n\u4eca\u56de\u306f I2C \u3092\u76f4\u63a5\u64cd\u4f5c\u3057\u3066 LCD \u3092\u5236\u5fa1\u3057\u307e\u3057\u305f\u3002(LiquidCrystal \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u3001\u3082\u3063\u3068\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002)\n1602 \u306f\u3001\u9811\u5f35\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u30b6\u30f3\u30cd\u30f3\u3002\n\n\n\u4f59\u8ac7\n\nSPI \u7528\u3067 IO15/IO13/IO12/IO14 \u3092\u4f7f\u3044\u307e\u3059\u3002\nI2C \u7528\u3067 IO4/IO5 \u3092\u4f7f\u3048\u3070\u3001\u3053\u308c\u3067\u3001\u5168\u3066\u306e\u7aef\u5b50\u304c\u3001\u305d\u308c\u305e\u308c\u30ad\u30ec\u30a4\u306b\u5f79\u5272\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nstatic const uint8_t SS    = 15;\nstatic const uint8_t MOSI  = 13;\nstatic const uint8_t MISO  = 12;\nstatic const uint8_t SCK   = 14;\n\n## \u6982\u8981\nESP8266 (ESP-WROOM-02) \u3067 I2C \u3067\u63a5\u7d9a\u53ef\u80fd\u306a LCD 8\u68412\u884c \u3092\u5236\u5fa1\u3059\u308b\n\n## \u306f\u3058\u3081\u306b\n\u90e8\u54c1\u30bb\u30c3\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u305f LCD \u3092\u5236\u5fa1\u3057\u3088\u3046\u3068\u3044\u3046\u4f01\u753b\u306a\u306e\u3067\u3059\u304c\u300116\u68412\u884c \u578b\u756a:1602 \u3068\u3044\u3046\u3053\u3068\u3057\u304b\u308f\u304b\u3089\u306a\u3044 orz\u3002\n\u79cb\u6708\u3067\u3082\u6271\u3063\u3066\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u3053\u306e LCD \u306f\u8ae6\u3081\u3066\u3001\u3082\u3063\u3068\u5b89\u4fa1\u3067\u30e1\u30b8\u30e3\u30fc\u306a LCD \u3092\u9078\u629e\u3057\u307e\u3057\u305f\u3002\u305d\u308c\u304c AQM0802 \u3068\u3044\u3046 LCD \u3067\u3059\u3002\n\n## \u90e8\u54c1\u8abf\u9054\n\u4e0a\u304c AQM0802 (8\u68412\u884c)\u3001\u4e0b\u304c 1602 (16\u68412\u884c)\n![IMG_2421.JPG](https://qiita-image-store.s3.amazonaws.com/0/69410/74298623-12ee-d52d-87eb-a91fc6158e71.jpeg)\n\nAQM0802 \u306f\u5b89\u4fa1\u306b\u5165\u624b\u53ef\u80fd\u3067\u3059\u3002<a href=\"http://akizukidenshi.com/catalog/g/gP-06669/\" target=\"_blank\">I2C\u63a5\u7d9a \u5c0f\u578b\u30ad\u30e3\u30e9\u30af\u30bf LCD\u30e2\u30b8\u30e5\u30fc\u30eb (8x2\u884c)</a> 320\u5186\n\u30d6\u30ec\u30dc\u30fc\u7528\u306b\u30d4\u30c3\u30c1\u5909\u63db\u6e08\u307f\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3053\u3061\u3089\u3002<a href=\"http://akizukidenshi.com/catalog/g/gM-09109/\" target=\"_blank\">\u30d4\u30c3\u30c1\u5909\u63db\u30e2\u30b8\u30e5\u30fc\u30eb (\u5b8c\u6210\u54c1)</a> 700\u5186 \u4eca\u56de\u306f\u3053\u308c\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n<a href=\"http://akizukidenshi.com/download/ds/xiamen/AQM0802.pdf\" target=\"_blank\">\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8</a>\n\n\u4ee5\u4e0b\u3001\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u629c\u7c8b\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-01-24 22.55.57.png](https://qiita-image-store.s3.amazonaws.com/0/69410/714b5a46-fd21-3cac-10d7-162ab4616b82.png)\n\u30ab\u30bf\u30ab\u30ca\u3082\u8868\u793a\u53ef\u80fd\u306e\u3088\u3046\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u53d6\u308a\u6562\u3048\u305a\u3001\u30aa\u30ec\u30f3\u30b8\u8272\u7db2\u639b\u3051 (ASCII\u4e92\u63db) \u90e8\u5206\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-01-24 2.42.47.png](https://qiita-image-store.s3.amazonaws.com/0/69410/8f809f9e-b30f-fd16-8750-2a9f64bb30d9.png)\n\n\n## \u56de\u8def\n - I2C \u7528\u306e\u7aef\u5b50\u306f\u3001ESP8266 \u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u4e0a\u3067\u306f IO2/IO14 \u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4ee5\u4e0b (pins_arduino.h) \u3067 IO4/IO5 \u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n - \u3088\u3063\u3066\u3001\u4eca\u56de\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u6307\u5b9a\u306e IO4/IO5 \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n~/Library/Arduino15/packages/esp8266/hardware/esp8266/2.0.0/variants/generic/pins_arduino.h\n\n```cpp\nstatic const uint8_t SDA = 4;\nstatic const uint8_t SCL = 5;\n```\n\n - WROOM02 \u306e\u30ea\u30bb\u30c3\u30c8(RST) \u3092\u3001LCD \u306e\u30ea\u30bb\u30c3\u30c8\u3068\u5171\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n\n\n### \u56de\u8def\u56f3\n - I2C \u306e SDA/SCL \u306f\u3001\u30d7\u30eb\u30a2\u30c3\u30d7\u304c\u5fc5\u8981\u3067\u3059\u3002\n - I2C \u306f\u63a5\u7d9a\u672c\u6570\u304c\u5c11\u306a\u304f\u3066\u3001\u3068\u3066\u3082\u697d\u3067\u3059\u306d www\n\n\n![LCD0802.png](https://qiita-image-store.s3.amazonaws.com/0/69410/f330a058-466c-836c-ee71-553dc2e8509b.png)\n\n\n### Eagle\n<a href=\"https://github.com/exabugs/eagleLCD\" target=\"_blank\">https: //github.com/exabugs/eagleLCD</a>\n\n## \u30b9\u30b1\u30c3\u30c1\n\n - Wire \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n - \u30b7\u30ea\u30a2\u30eb\u304b\u3089\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u3001LCD \u306b\u8868\u793a\u3057\u307e\u3059\u3002echo\u7684\u306a\u3002\n - I2C \u6a5f\u5668\u306f\u3001\u305d\u308c\u305e\u308c\u56fa\u6709\u306e\u30b9\u30ec\u30fc\u30d6\u30fb\u30a2\u30c9\u30ec\u30b9\u3092\u6301\u3064\u3088\u3046\u3067\u3059\u3002<br>AQM0802 \u3067\u306f 0x3e \u304c\u305d\u308c\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n - \u521d\u671f\u5316\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u306e\u4f8b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002<br>(\u534a\u5206\u304f\u3089\u3044\u7406\u89e3\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u30b9\u30a4\u30de\u30bb\u30f3\u3002)\n\n```cpp\n#include <Wire.h>\n\n#define ADDR 0x3e\n\nuint8_t CONTROLL[] = {\n  0x00, // Command\n  0x40, // Data\n};\n\nconst int C_COMM = 0;\nconst int C_DATA = 1;\n\nuint8_t settings[] = {\n\n  0b00111001, // 0x39 // [Function set] DL(4):1(8-bit) N(3):1(2-line) DH(2):0(5x8 dot) IS(0):1(extension)\n\n  // Internal OSC frequency\n  (0b0001 << 4) + 0b0100, // BS(3):0(1/5blas) F(210):(internal Freq:100)\n\n  // Contrast set\n  (0b0111 << 4) + 0b0100, // Contrast(3210):4\n\n  // Power/ICON/Contrast control\n  (0b0101 << 4) + 0b0110, // Ion(3):0(ICON:off) Bon(2):1(booster:on) C5C4(10):10(contrast set)\n\n  // Follower control\n  (0b0110 << 4) + 0b1100, // Fon(3):1(on) Rab(210):100\n\n  // Display ON/OFF control\n  (0b00001 << 3) + 0b111, // D(2):1(Display:ON) C(1):1(Cursor:ON) B(0):1(Cursor Blink:ON)\n};\n\nconst int LINE = 2;\n\nString buff[LINE];\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\");\n\n//Wire.begin(4, 5); // (SDA,SCL) Default\n  Wire.begin(); // (SDA,SCL)\n\n  // LCD\u521d\u671f\u5316\n  write(C_COMM, settings, sizeof(settings));\n}\n\n\nvoid loop() {\n  if (0 < Serial.available()) {\n    delay(10);\n\n    for (int i = 0; i < LINE - 1; i++) {\n      buff[i] = buff[i + 1];\n    }\n    buff[LINE - 1] = \"\";\n\n    while (0 < Serial.available()) {\n      char ch = Serial.read();\n      if (ch == '\\n') {\n        print2line();\n        Serial.println(buff[LINE - 1]);\n        break;\n      } else if (0x20 <= ch && ch <= 0x7f) {\n        // ASCII\u6587\u5b57\u30b3\u30fc\u30c9\n        buff[LINE - 1] = buff[LINE - 1] + ch;\n      } else {\n        // Do nothing\n      }\n    }\n  }\n}\n\n// 2\u884c\u8868\u793a\nvoid print2line() {\n  // \u30af\u30ea\u30a2\n  uint8_t cmd[] = {0x01};\n  write(C_COMM, cmd, sizeof(cmd));\n  delay(1);\n\n  // \u66f8\u304d\u51fa\u3057\n  for (int i = 0; i < LINE; i++) {\n    uint8_t pos = 0x80 | i * 0x40; // \u4f4d\u7f6e\n    uint8_t cmd[] = {pos};\n    write(C_COMM, cmd, sizeof(cmd));\n    write(C_DATA, (uint8_t *)buff[i].c_str(), buff[i].length());\n  }\n}\n\nvoid write(int type, uint8_t *data, size_t len) {\n  for (int i=0; i < len; i++) {\n    Wire.beginTransmission(ADDR);\n    Wire.write(CONTROLL[type]);\n    Wire.write(data[i]);\n    Wire.endTransmission();\n    delayMicroseconds(27); // 26.3us\n  }\n}\n```\n\n## \u7d50\u679c\n - \u8d77\u52d5\u5f8c\u3001\u30b7\u30ea\u30a2\u30eb\u304b\u3089\u9069\u5f53\u306b\u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n - LCD \u306b\u8868\u793a\u3055\u308c\u305f\u3089\u6210\u529f\u3067\u3059\u3002\n - \u3055\u3089\u306b\u5165\u529b\u3059\u308b\u3068\u3001LCD \u4e0a\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u3066\u30012\u884c\u76ee\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n![IMG_2432.JPG](https://qiita-image-store.s3.amazonaws.com/0/69410/8814e1eb-c90c-1632-2a19-6008edb85a9b.jpeg)\n\n\n## \u307e\u3068\u3081\n - \u4eca\u56de\u306f I2C \u3092\u76f4\u63a5\u64cd\u4f5c\u3057\u3066 LCD \u3092\u5236\u5fa1\u3057\u307e\u3057\u305f\u3002<br>(LiquidCrystal \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u3001\u3082\u3063\u3068\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002)\n - 1602 \u306f\u3001\u9811\u5f35\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u30b6\u30f3\u30cd\u30f3\u3002\n\n\n## \u4f59\u8ac7\n - SPI \u7528\u3067 IO15/IO13/IO12/IO14 \u3092\u4f7f\u3044\u307e\u3059\u3002\n - I2C \u7528\u3067 IO4/IO5 \u3092\u4f7f\u3048\u3070\u3001\u3053\u308c\u3067\u3001\u5168\u3066\u306e\u7aef\u5b50\u304c\u3001\u305d\u308c\u305e\u308c\u30ad\u30ec\u30a4\u306b\u5f79\u5272\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```cpp\nstatic const uint8_t SS    = 15;\nstatic const uint8_t MOSI  = 13;\nstatic const uint8_t MISO  = 12;\nstatic const uint8_t SCK   = 14;\n```\n", "tags": ["ESP8266", "Arduino", "ArduinoIDE", "ESP-WROOM-02", "IoT"]}