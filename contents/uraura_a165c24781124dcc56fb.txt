{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\nSlack\u3067\u767a\u8a00\u3055\u308c\u305f\uff0c\u81ea\u793e\u30d7\u30ed\u30c0\u30af\u30c8\u306b\u95a2\u3059\u308b\u554f\u984c/\u7591\u554f/\u78ba\u8a8d\u70b9\u306a\u3069\u3092\u3069\u3093\u306a\u4e9b\u7d30\u306a\u3053\u3068\u3067\u3042\u3063\u3066\u3082\u6f0f\u3089\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\n\n\u554f\u984c\u3068\u7d4c\u7def\n\u30b5\u30fc\u30d3\u30b9\u306e\u904b\u55b6\u306b\u652f\u969c\u304c\u51fa\u308b\u3088\u3046\u306a\u91cd\u5927\u306a\u554f\u984c\u3067\u3042\u308c\u3070\u76f4\u63a5\u306e\u3084\u308a\u3068\u308a\u3067\u5bfe\u5fdc\u3059\u308b\u3067\u3057\u3087\u3046\u304c\uff0c\u554f\u984c\u306a\u306e\u304b\u4ed5\u69d8\u306a\u306e\u304b\u30cf\u30c3\u30ad\u30ea\u3057\u306a\u3044/\u5224\u65ad\u3067\u304d\u306a\u3044\uff0c\u5b9f\u7528\u4e0a\u554f\u984c\u306a\u3044\u3051\u3069\u9055\u548c\u611f\u304c\u3042\u308b\uff0e\uff0e\uff0e\u30ec\u30d9\u30eb\u306e\u8a71\u306f\u306a\u304b\u306a\u304b\u96c6\u3081\u8f9b\u3044\u3082\u306e\u3067\u3059\uff0e\n\u554f\u984c/\u7591\u554f/\u78ba\u8a8d\u70b9\u3092\u6c17\u8efd\u306b\u767a\u8a00\u3067\u304d\u308b\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u4f5c\u3063\u3066\u305d\u3053\u3067\u767a\u8a00\u3057\u3066\u3082\u3089\u3046\uff0c\u3068\u3044\u3046\u306e\u3082\u8003\u3048\u307e\u3057\u305f\u304c\uff0c\n\n\u305d\u3082\u305d\u3082\u554f\u984c\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\uff0c\u7a0b\u5ea6\u306e\u610f\u8b58\u306e\u3068\u304d\u306b\uff0c\u308f\u3056\u308f\u3056\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u79fb\u52d5\u3057\u3088\u3046\u3068\u601d\u3046\u3060\u308d\u3046\u304b\n\u5168\u54e1\u304c\u540c\u3058\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u5165\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\uff0c\u5927\u4eba\u6570\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u767a\u8a00\u3059\u308b\u3053\u3068\u306b\u840e\u7e2e\u3059\u308b\u306e\u3067\u306f\u306a\u3044\u3060\u308d\u3046\u304b\n\u305d\u3082\u305d\u3082\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u591a\u3044\uff0e\uff0e\u3082\u3046\u5897\u3084\u3057\u305f\u304f\u306a\u3044\uff0e\uff0e\uff0e\n\u6c17\u8efd\u306b\u3068\u304b\uff0e\uff0e\uff0e\u6f14\u51fa\u3060\u308b\u304f\u306d\uff0e\uff0e\uff0e\n\n\u307f\u305f\u3044\u306a\u3053\u3068\u3067\u3082\u3084\u3082\u3084\u3057\u305f\u7d50\u679c\uff0c\u3082\u3063\u3068\u767a\u8a00\u5074\u306e\u5236\u7d04\u306f\u5c11\u306a\u3044\u307b\u3046\u304c\u826f\u3044\u3088\u306d\uff0c\u3068\u3044\u3046\u7d50\u8ad6\u306b\uff0e\n\u3067\uff0cSlack\u306eSlash Commands\u3068AWS\u306e\u304a\u529b1\u3092\u4f7f\u3063\u3066\u3054\u306b\u3087\u3054\u306b\u3087\u3084\u3063\u3066\u307f\u307e\u3057\u305f\uff0e\n\n\u3084\u3063\u305f\u3053\u3068\n\n\u6982\u8981\n\u3088\u304f\u3042\u308b\uff0cAPI Gateway\u3068Lambda\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3059\uff0e\n\u305f\u3060\u3057\uff0c\u4eca\u56de\u306fSlash Command\u304b\u3089\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u767a\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\uff0c\u305d\u308c\u3092\u5225\u306eLambda\u3068\u3057\u305f\u95a2\u4fc2\u3067\uff0cLambda->SNS->Lambda2\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u307e\u3059\uff0e\n\n\u8a2d\u5b9a\n\nLambda1 - slack-slash\n\u306a\u3093\u3068\u306a\u304fJavaScript\u3067\u3059\nvar aws = require('aws-sdk');\nvar sns = new aws.SNS({\n  region: 'ap-northeast-1' //change to your region\n});\n\nvar qs = require('querystring');\n\nexports.handler = function(event, context) {\n    //console.log('Received event:', JSON.stringify(event, null, 2));\n    var body = event.postBody;\n    var params = qs.parse(body);\n\n    //var obj = parseAsObj(event.postBody);\n\n    switch(params.command) {\n        case '/ask':\n            console.log('/ask');\n            //InvocationType: 'Event',\n            var json = {\n                    from_channel: params.channel_name,\n                    from_user: params.user_name,\n                    text: params.text,\n                    to_channel: '#questions',\n                    to_user: '\u3082\u3084\u3082\u3084\u627f\u308a\u541b'\n                };\n            var sns_params = {\n                Message: JSON.stringify({ default: JSON.stringify(json) }), /* required */\n                MessageStructure: 'json',\n                Subject: 'moyamoya',\n                TopicArn: 'arn:aws:sns:ap-northeast-1:123456789012:topic-name'\n            };\n            sns.publish(sns_params, function(err, data) {\n                if (err) {\n                    console.log(err, err.stack); // an error occurred\n                    context.fail('error');\n                } else {\n                    console.log(data);           // successful response\n                    context.succeed({\n                        \"response_type\": \"ephemeral\",\n                        \"text\": \"\u4ee5\u4e0b\u3092\u9001\u4fe1\u3057\u307e\u3057\u305f\uff0e\u3044\u3064\u3082\u3054\u5354\u529b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059 :bow:\",\n                        \"attachments\": [\n                            {\n                                \"text\": params.text\n                            }\n                        ]\n                    });\n                }\n            });\n            break;\n        default:\n            context.fail('unknown command');\n    }\n};\n\nswitch\u306e\u9078\u629e\u80a2\u3092\u52a0\u3048\u308c\u3070\u5225\u306eSlash Command\u3092\u30b5\u30af\u3063\u3068\u4f5c\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\uff0e\nSlash Command\u3067\u547c\u3073\u51fa\u3057\u305f\u5148\u306f\u901a\u5e383000ms\u4ee5\u5185\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\uff0c\u3055\u3063\u3055\u3068SNS\u306b\u6295\u3052\u3066\u7d42\u4e86\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\n\nlambda2 - post-slack\nvar https = require('https');\n\n/**\n * Pass the data to send as `event.data`, and the request options as\n * `event.options`. For more information see the HTTPS module documentation\n * at https://nodejs.org/api/https.html.\n *\n * Will succeed with the response body.\n * \n * \n */\nexports.handler = function(event, context) {\n    var params = JSON.parse(event.Records[0].Sns.Message);\n\n    var options = {\n        host: 'hooks.slack.com',\n        port: 443,\n        path: '/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX',\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n    };\n\n    var response = { \n        channel: params.to_channel, \n        username: params.to_user, \n        text: params.from_user + \" \u3055\u3093\u304c \" + params.from_channel + \" \u3067\u4ee5\u4e0b\u3092\u6295\u7a3f\u3057\u307e\u3057\u305f :ghost:\", // \u5fae\u5999\u306b\u6c4e\u7528\u6027\u306b\u6b20\u3051\u308b\u306e\u3067\u691c\u8a0e\n        icon_emoji: \":first_quarter_moon_with_face:\",\n        attachments: [\n            {\n                text: params.text\n            }\n        ]\n    };\n\n    var req = https.request(options, function(res) {\n        var body = '';\n        console.log('Status:', res.statusCode);\n        console.log('Headers:', JSON.stringify(res.headers));\n        res.setEncoding('utf8');\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            console.log('Successfully processed HTTPS response');\n            // If we know it's JSON, parse it\n            if (res.headers['content-type'] === 'application/json') {\n                body = JSON.parse(body);\n            }\n            context.succeed(body);\n        });\n    });\n    req.on('error', context.fail);\n    req.write(JSON.stringify(response));\n    req.end();\n};\n\n\u3053\u3061\u3089\u306fSNS\u306eSubscriber\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u308bLambda\nevent.Records[0].Sns.Message\u306bJSON\u304c\u6587\u5b57\u5217\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u30d1\u30fc\u30b9\u3057\u3066\u3084\u308c\u3070\u3088\u3044\u3067\u3059\uff0e\n\u3042\u3068\u306f\uff0cSlack\u306eIncoming Web hook\u3092\u3088\u308d\u3057\u304f\u8a2d\u5b9a\u3057\u3066\u3084\u308a\u307e\u3059\uff0e\nLambda1\u3068Lambda2\u306f\u73fe\u6642\u70b9\u3067\u306f\u308f\u3051\u306a\u304f\u3066\u3082\u3088\u304b\u3063\u305f\u306e\u3067\u3059\u304c\uff0c\u5c06\u6765\u7684\u306b\u306fGithub\u306eissue\u306b\u81ea\u52d5\u767b\u9332\u3068\u304b\uff0c\u3082\u3063\u3068\u3044\u308d\u3093\u306a\u3053\u3068\u3092\u3084\u3089\u305b\u3066\u307f\u305f\u3044\u3068\u601d\u3063\u305f\u3068\u304d\u306b\u5bfe\u5fdc\u3057\u3084\u3059\u304f\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3053\u3046\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\nAPI Gateway/SNS\u3067Lambda\u3092\u63a5\u7d9a\u3059\u308b\nSlack(/ask) -(POST)-> API Gateway -> Lambda1 -> \u767a\u8a00\u8005\u3078\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af(\u3042\u308a\u304c\u3068\u3046\u7684\u306a)\n                                             -> SNS -> Lambda2 -(POST)-> Slack(\u7279\u5b9a\u306eChannel)\n\n\n\u7d50\u679c\n/ask \u3082\u3084\u3082\u3084\u3068\u767a\u8a00\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\n\n\u5225\u306e\u6307\u5b9a\u3057\u305fChannel\u306b\u96c6\u7d04\u3055\u308c\u307e\u3059\n\n\u958b\u767a\u4e2d\u306e\u753b\u50cf\u306a\u306e\u3067\u540d\u524d\u3068\u304b\u30c6\u30ad\u30c8\u30fc\u3067\u3059\u304c\uff0cSlash Command\u306b\u3057\u305f\u3053\u3068\u306b\u3088\u3063\u3066\n\n\u767a\u8a00\u5834\u6240(Channel)\u306e\u5236\u7d04\u304c\u7121\u304f\u306a\u308a\n\u8ab0\u306b\u30e1\u30f3\u30b7\u30e7\u30f3\u4ed8\u3051\u308b?\u3068\u304b\u6c17\u306b\u3057\u306a\u304f\u3066\u3088\u304f\u306a\u308a\n\n\u3088\u308a\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u554f\u984c\u3092\u3042\u3052\u3066\u3082\u3089\u3048\u308c\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\n\n\n\nAPI Gateway\u3068Lambda \u3067\u904a\u3093\u3067\u307f\u305f\u304b\u3063\u305f\u3060\u3051 \u306e\u8abf\u67fb\u306e\u5ef6\u9577\u3067\u3059\u00a0\u21a9\n\n\nLambda\u306e\u4e2d\u3067\u5225\u306eLambda\u306f\u547c\u3079\u306a\u3044\u306e\u304b\u306a?\u00a0\u21a9\n\n\n\n# \u76ee\u7684\nSlack\u3067\u767a\u8a00\u3055\u308c\u305f\uff0c\u81ea\u793e\u30d7\u30ed\u30c0\u30af\u30c8\u306b\u95a2\u3059\u308b\u554f\u984c/\u7591\u554f/\u78ba\u8a8d\u70b9\u306a\u3069\u3092\u3069\u3093\u306a\u4e9b\u7d30\u306a\u3053\u3068\u3067\u3042\u3063\u3066\u3082\u6f0f\u3089\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\n\n# \u554f\u984c\u3068\u7d4c\u7def\n\u30b5\u30fc\u30d3\u30b9\u306e\u904b\u55b6\u306b\u652f\u969c\u304c\u51fa\u308b\u3088\u3046\u306a\u91cd\u5927\u306a\u554f\u984c\u3067\u3042\u308c\u3070\u76f4\u63a5\u306e\u3084\u308a\u3068\u308a\u3067\u5bfe\u5fdc\u3059\u308b\u3067\u3057\u3087\u3046\u304c\uff0c\u554f\u984c\u306a\u306e\u304b\u4ed5\u69d8\u306a\u306e\u304b\u30cf\u30c3\u30ad\u30ea\u3057\u306a\u3044/\u5224\u65ad\u3067\u304d\u306a\u3044\uff0c\u5b9f\u7528\u4e0a\u554f\u984c\u306a\u3044\u3051\u3069\u9055\u548c\u611f\u304c\u3042\u308b\uff0e\uff0e\uff0e\u30ec\u30d9\u30eb\u306e\u8a71\u306f\u306a\u304b\u306a\u304b\u96c6\u3081\u8f9b\u3044\u3082\u306e\u3067\u3059\uff0e\n\n\u554f\u984c/\u7591\u554f/\u78ba\u8a8d\u70b9\u3092\u6c17\u8efd\u306b\u767a\u8a00\u3067\u304d\u308b\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u4f5c\u3063\u3066\u305d\u3053\u3067\u767a\u8a00\u3057\u3066\u3082\u3089\u3046\uff0c\u3068\u3044\u3046\u306e\u3082\u8003\u3048\u307e\u3057\u305f\u304c\uff0c\n\n- \u305d\u3082\u305d\u3082\u554f\u984c\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\uff0c\u7a0b\u5ea6\u306e\u610f\u8b58\u306e\u3068\u304d\u306b\uff0c\u308f\u3056\u308f\u3056\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u79fb\u52d5\u3057\u3088\u3046\u3068\u601d\u3046\u3060\u308d\u3046\u304b\n- \u5168\u54e1\u304c\u540c\u3058\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u5165\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\uff0c\u5927\u4eba\u6570\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u767a\u8a00\u3059\u308b\u3053\u3068\u306b\u840e\u7e2e\u3059\u308b\u306e\u3067\u306f\u306a\u3044\u3060\u308d\u3046\u304b\n- \u305d\u3082\u305d\u3082\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u591a\u3044\uff0e\uff0e\u3082\u3046\u5897\u3084\u3057\u305f\u304f\u306a\u3044\uff0e\uff0e\uff0e\n- \u6c17\u8efd\u306b\u3068\u304b\uff0e\uff0e\uff0e\u6f14\u51fa\u3060\u308b\u304f\u306d\uff0e\uff0e\uff0e\n\n\u307f\u305f\u3044\u306a\u3053\u3068\u3067\u3082\u3084\u3082\u3084\u3057\u305f\u7d50\u679c\uff0c\u3082\u3063\u3068\u767a\u8a00\u5074\u306e\u5236\u7d04\u306f\u5c11\u306a\u3044\u307b\u3046\u304c\u826f\u3044\u3088\u306d\uff0c\u3068\u3044\u3046\u7d50\u8ad6\u306b\uff0e\n\u3067\uff0cSlack\u306eSlash Commands\u3068AWS\u306e\u304a\u529b[^aws]\u3092\u4f7f\u3063\u3066\u3054\u306b\u3087\u3054\u306b\u3087\u3084\u3063\u3066\u307f\u307e\u3057\u305f\uff0e\n\n# \u3084\u3063\u305f\u3053\u3068\n## \u6982\u8981\n\u3088\u304f\u3042\u308b\uff0cAPI Gateway\u3068Lambda\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3059\uff0e\n\u305f\u3060\u3057\uff0c\u4eca\u56de\u306fSlash Command\u304b\u3089\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u767a\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\uff0c\u305d\u308c\u3092\u5225\u306eLambda\u3068\u3057\u305f\u95a2\u4fc2\u3067\uff0cLambda->SNS->Lambda[^lambda]\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u307e\u3059\uff0e\n\n## \u8a2d\u5b9a\n### Lambda1 - slack-slash\n\u306a\u3093\u3068\u306a\u304fJavaScript\u3067\u3059\n\n```js\nvar aws = require('aws-sdk');\nvar sns = new aws.SNS({\n  region: 'ap-northeast-1' //change to your region\n});\n\nvar qs = require('querystring');\n\nexports.handler = function(event, context) {\n    //console.log('Received event:', JSON.stringify(event, null, 2));\n    var body = event.postBody;\n    var params = qs.parse(body);\n\n    //var obj = parseAsObj(event.postBody);\n    \n    switch(params.command) {\n        case '/ask':\n            console.log('/ask');\n            //InvocationType: 'Event',\n            var json = {\n                    from_channel: params.channel_name,\n                    from_user: params.user_name,\n                    text: params.text,\n                    to_channel: '#questions',\n                    to_user: '\u3082\u3084\u3082\u3084\u627f\u308a\u541b'\n                };\n            var sns_params = {\n                Message: JSON.stringify({ default: JSON.stringify(json) }), /* required */\n                MessageStructure: 'json',\n                Subject: 'moyamoya',\n                TopicArn: 'arn:aws:sns:ap-northeast-1:123456789012:topic-name'\n            };\n            sns.publish(sns_params, function(err, data) {\n                if (err) {\n                    console.log(err, err.stack); // an error occurred\n                    context.fail('error');\n                } else {\n                    console.log(data);           // successful response\n                    context.succeed({\n                        \"response_type\": \"ephemeral\",\n                        \"text\": \"\u4ee5\u4e0b\u3092\u9001\u4fe1\u3057\u307e\u3057\u305f\uff0e\u3044\u3064\u3082\u3054\u5354\u529b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059 :bow:\",\n                        \"attachments\": [\n                            {\n                                \"text\": params.text\n                            }\n                        ]\n                    });\n                }\n            });\n            break;\n        default:\n            context.fail('unknown command');\n    }\n};\n```\n\n`switch`\u306e\u9078\u629e\u80a2\u3092\u52a0\u3048\u308c\u3070\u5225\u306eSlash Command\u3092\u30b5\u30af\u3063\u3068\u4f5c\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\uff0e\nSlash Command\u3067\u547c\u3073\u51fa\u3057\u305f\u5148\u306f\u901a\u5e383000ms\u4ee5\u5185\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\uff0c\u3055\u3063\u3055\u3068SNS\u306b\u6295\u3052\u3066\u7d42\u4e86\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\n\n### lambda2 - post-slack\n```js\nvar https = require('https');\n\n/**\n * Pass the data to send as `event.data`, and the request options as\n * `event.options`. For more information see the HTTPS module documentation\n * at https://nodejs.org/api/https.html.\n *\n * Will succeed with the response body.\n * \n * \n */\nexports.handler = function(event, context) {\n    var params = JSON.parse(event.Records[0].Sns.Message);\n    \n    var options = {\n        host: 'hooks.slack.com',\n        port: 443,\n        path: '/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX',\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    var response = { \n        channel: params.to_channel, \n        username: params.to_user, \n        text: params.from_user + \" \u3055\u3093\u304c \" + params.from_channel + \" \u3067\u4ee5\u4e0b\u3092\u6295\u7a3f\u3057\u307e\u3057\u305f :ghost:\", // \u5fae\u5999\u306b\u6c4e\u7528\u6027\u306b\u6b20\u3051\u308b\u306e\u3067\u691c\u8a0e\n        icon_emoji: \":first_quarter_moon_with_face:\",\n        attachments: [\n            {\n                text: params.text\n            }\n        ]\n    };\n    \n    var req = https.request(options, function(res) {\n        var body = '';\n        console.log('Status:', res.statusCode);\n        console.log('Headers:', JSON.stringify(res.headers));\n        res.setEncoding('utf8');\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            console.log('Successfully processed HTTPS response');\n            // If we know it's JSON, parse it\n            if (res.headers['content-type'] === 'application/json') {\n                body = JSON.parse(body);\n            }\n            context.succeed(body);\n        });\n    });\n    req.on('error', context.fail);\n    req.write(JSON.stringify(response));\n    req.end();\n};\n```\n\u3053\u3061\u3089\u306fSNS\u306eSubscriber\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u308bLambda\n`event.Records[0].Sns.Message`\u306bJSON\u304c\u6587\u5b57\u5217\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u30d1\u30fc\u30b9\u3057\u3066\u3084\u308c\u3070\u3088\u3044\u3067\u3059\uff0e\n\n\u3042\u3068\u306f\uff0cSlack\u306eIncoming Web hook\u3092\u3088\u308d\u3057\u304f\u8a2d\u5b9a\u3057\u3066\u3084\u308a\u307e\u3059\uff0e\n\nLambda1\u3068Lambda2\u306f\u73fe\u6642\u70b9\u3067\u306f\u308f\u3051\u306a\u304f\u3066\u3082\u3088\u304b\u3063\u305f\u306e\u3067\u3059\u304c\uff0c\u5c06\u6765\u7684\u306b\u306fGithub\u306eissue\u306b\u81ea\u52d5\u767b\u9332\u3068\u304b\uff0c\u3082\u3063\u3068\u3044\u308d\u3093\u306a\u3053\u3068\u3092\u3084\u3089\u305b\u3066\u307f\u305f\u3044\u3068\u601d\u3063\u305f\u3068\u304d\u306b\u5bfe\u5fdc\u3057\u3084\u3059\u304f\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3053\u3046\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n### API Gateway/SNS\u3067Lambda\u3092\u63a5\u7d9a\u3059\u308b\n```\nSlack(/ask) -(POST)-> API Gateway -> Lambda1 -> \u767a\u8a00\u8005\u3078\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af(\u3042\u308a\u304c\u3068\u3046\u7684\u306a)\n                                             -> SNS -> Lambda2 -(POST)-> Slack(\u7279\u5b9a\u306eChannel)\n```\n\n# \u7d50\u679c\n`/ask \u3082\u3084\u3082\u3084`\u3068\u767a\u8a00\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\n![image](https://qiita-image-store.s3.amazonaws.com/0/18974/f71cda32-016f-4cb4-bb96-bda13fae84e3.png)\n\n\u5225\u306e\u6307\u5b9a\u3057\u305fChannel\u306b\u96c6\u7d04\u3055\u308c\u307e\u3059\n![image](https://qiita-image-store.s3.amazonaws.com/0/18974/0f8d33a6-736e-c165-9009-bcbf3d9ec21a.png)\n\n\u958b\u767a\u4e2d\u306e\u753b\u50cf\u306a\u306e\u3067\u540d\u524d\u3068\u304b\u30c6\u30ad\u30c8\u30fc\u3067\u3059\u304c\uff0cSlash Command\u306b\u3057\u305f\u3053\u3068\u306b\u3088\u3063\u3066\n\n- \u767a\u8a00\u5834\u6240(Channel)\u306e\u5236\u7d04\u304c\u7121\u304f\u306a\u308a\n- \u8ab0\u306b\u30e1\u30f3\u30b7\u30e7\u30f3\u4ed8\u3051\u308b?\u3068\u304b\u6c17\u306b\u3057\u306a\u304f\u3066\u3088\u304f\u306a\u308a\n\n\u3088\u308a\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u554f\u984c\u3092\u3042\u3052\u3066\u3082\u3089\u3048\u308c\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff0e\n\n---\n[^aws]: API Gateway\u3068Lambda ~~\u3067\u904a\u3093\u3067\u307f\u305f\u304b\u3063\u305f\u3060\u3051~~ \u306e\u8abf\u67fb\u306e\u5ef6\u9577\u3067\u3059\n[^lambda]: Lambda\u306e\u4e2d\u3067\u5225\u306eLambda\u306f\u547c\u3079\u306a\u3044\u306e\u304b\u306a?\n", "tags": ["Slack", "AWS", "APIGateway", "SNS", "lambda"]}