{"context": "\n\n\u306f\u3058\u3081\u306b\n\u30b3\u30f3\u30d1\u30a4\u30e9\u5b9f\u88c5\u306e\u51e6\u7406\u904e\u7a0b\u306b\u69cb\u6587\u89e3\u6790\u304c\u3042\u308a\u307e\u3059\u3002\n\u5358\u7d14\u306a\u5b57\u53e5\u89e3\u6790\u3092Java\u3067\u5b9f\u88c5\u3059\u308b\u306e\u7d9a\u304d\u3067\u3001\n\u69cb\u6587\u89e3\u6790\u306e\u3054\u304f\u3054\u304f\u539f\u59cb\u7684\u306a\u3082\u306e\u3092Java\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\n\u69cb\u6587\u89e3\u6790\u3067\u3084\u308a\u305f\u3044\u3053\u3068\n\u5b9f\u88c5\u306b\u3042\u305f\u308a\u3084\u308a\u305f\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u304c\u56db\u5247\u6f14\u7b97\u3060\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3067\u306f\u305d\u306e\u56db\u5247\u6f14\u7b97\u3092\u3069\u3046\u3044\u3046\u9806\u5e8f\u3067\u8a08\u7b97\u3059\u308b\u304b\u3092\u89e3\u6790\u3057\u307e\u3059\u3002\n\u4e0b\u306e\u5f0f\u3092\u4f8b\u306b\u8003\u3048\u307e\u3059\u3002\na = 3 + 4 * 5\n\n\u4e00\u76ee\u77ad\u7136\u3067\u3059\u304c\u3001\u4e0b\u306e\u9806\u5e8f\u3067\u62ec\u5f27\u3092\u4ed8\u3051\u305f\u90e8\u5206\u304b\u3089\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n(4 * 5)\n(3 + (4 * 5))\n(a = (3 + (4 * 5)))\n\n\u69cb\u6587\u89e3\u6790\u3067\u306f\u3053\u306e\u9806\u5e8f\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u95a2\u6570\u306e\u5b9a\u7fa9\u3084\u547c\u3073\u51fa\u3057\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\n\u7c21\u5358\u306e\u305f\u3081\u306b\u307e\u305a\u306f\u56db\u5247\u6f14\u7b97\u3068\u3001\u5909\u6570\u3078\u306e\u4ee3\u5165\u304c\u89e3\u6790\u3067\u304d\u308b\u3053\u3068\u3092\u3081\u3056\u3057\u307e\u3059\u3002\n\n\u9806\u5e8f\u4ed8\u3051\u306e\u8868\u73fe\u65b9\u6cd5\n\u9806\u5e8f\u4ed8\u3051\u3092\u3057\u305f\u3044\u3053\u3068\u306f\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\u9806\u5e8f\u4ed8\u3051\u3057\u305f\u72b6\u614b\u3092\u5b9f\u88c5\u3067\u3069\u3046\u8868\u73fe\u3059\u308b\u304b\u8003\u3048\u307e\u3059\u3002\n\u4f8b\u306e\u5f0f\u306e\u4e00\u90e8\u30014 * 5\u304b\u3089\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u5f0f\u3092\u30c8\u30fc\u30af\u30f3\u3078\u5206\u89e3\u3057\u307e\u3057\u305f\u3002\n4 * 5\u306f\u30c8\u30fc\u30af\u30f3\u306b\u5206\u89e3\u3059\u308b\u3068\u30014\u3001*\u30015\u306e\uff13\u3064\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u30674 * 5\u306e\u72b6\u614b\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u3001*\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066\u3001\u5de6\u306b4\u30c8\u30fc\u30af\u30f3\u3001\u53f3\u306b5\u30c8\u30fc\u30af\u30f3\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u524d\u56de\u306e\u8a18\u4e8b\u306eToken\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306b\u3001left\u3068right\u3092\u8ffd\u52a0\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\nToken.java\n\npublic class Token {\n\n    public String kind;\n    public String value;\n    public Token left;\n    public Token right;\n\n    @Override\n    public String toString() {\n        return kind + \" \\\"\" + value + \"\\\"\";\n    }\n\n    public String paren() {\n        if (left == null && right == null) {\n            return value;\n        } else {\n            StringBuilder b = new StringBuilder();\n            b.append(\"(\");\n            if (left != null) {\n                b.append(left.paren()).append(\" \");\n            }\n            b.append(value);\n            if (right != null) {\n                b.append(\" \").append(right.paren());\n            }\n            b.append(\")\");\n            return b.toString();\n        }\n    }\n\n}\n\n\n\u3053\u308c\u3067*\u30c8\u30fc\u30af\u30f3\u306eleft\u306b4\u30c8\u30fc\u30af\u30f3\u3092\u6301\u305f\u305b\u3001right\u306b5\u30c8\u30fc\u30af\u30f3\u3092\u6301\u305f\u305b\u308c\u3070\u30014 * 5\u306e\u72b6\u614b\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306b3 + (4 * 5)\u306e\u72b6\u614b\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\n\u540c\u3058\u8003\u3048\u65b9\u3067\u3001+\u30c8\u30fc\u30af\u30f3\u306eleft\u306b3\u30c8\u30fc\u30af\u30f3\u3092\u6301\u305f\u305b\u3001right\u306b*\u30c8\u30fc\u30af\u30f3\u3092\u6301\u305f\u305b\u307e\u3059\u3002\n\u3053\u3053\u3067*\u30c8\u30fc\u30af\u30f3\u306f\u5148\u306e\u8aac\u660e\u3067left\u3068right\u306b4\u30685\u306e\u30c8\u30fc\u30af\u30f3\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a4 * 5\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u3068\u3081\u308b\u3068\u3001+\u30c8\u30fc\u30af\u30f3\u304c\u3042\u3063\u3066\u3001left\u306b3\u30c8\u30fc\u30af\u30f3\u3001right\u304c4 * 5\u30c8\u30fc\u30af\u30f3\u3068\u306a\u308a\u30013 + (4 * 5)\u306e\u72b6\u614b\u304c\u8868\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\n\u8a71\u304c\u305d\u308c\u307e\u3059\u304c\u3001\u5185\u5bb9\u306e\u78ba\u8a8d\u7528\u306b\u62ec\u5f27\u4ed8\u304d\u306e\u72b6\u614b\u3092\u8868\u3059paren()\u3082Token\u30af\u30e9\u30b9\u3078\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n\u9806\u5e8f\u4ed8\u3051\u306e\u4ed5\u65b9\n\u6b21\u306f\u3053\u306e\u9806\u5e8f\u4ed8\u3051\u306e\u4ed5\u65b9\u3092\u8003\u3048\u307e\u3059\u3002\n\u4f8b\u306e\u5f0f\u3067\u306f\u30013\u3064\u306e\u6f14\u7b97\u5b50\u304c\u767b\u5834\u3057\u307e\u3059\u3002=\u3001+\u3001*\u306e3\u3064\u3067\u3059\u3002\n\u9806\u5e8f\u306e\u57fa\u6e96\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u305d\u308c\u3089\u306e\u6f14\u7b97\u5b50\u3067\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3067\u78ba\u8a8d\u3057\u305f\u9806\u5e8f\u3067\u306f\u3001*\u304c1\u756a\u3001+\u304c2\u756a\u3001=\u304c3\u756a\u3067\u3057\u305f\u3002\n\u3053\u3053\u3067\u3053\u306e\u9806\u5e8f\u306b\u5bfe\u3057\u3066\u5148\u306b\u304f\u308b\u65b9\u306e\u6f14\u7b97\u5b50\u3078\u3001\u5148\u306b\u304f\u308b\u5ea6\u5408\u3044\u306e\u6570\u5024\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f*\u306b60\u3092\u3001+\u306b50\u3092\u3001=\u306b10\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\u3053\u306e\u5ea6\u5408\u3044\u3092\u57fa\u6e96\u306b\u3001\u6570\u5024\u304c\u5927\u304d\u3044\u65b9\u304b\u3089\u5148\u306b\u62ec\u5f27\u4ed8\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n*\u304c60\u3067\u5ea6\u5408\u3044\u304c1\u756a\u5927\u304d\u3044\u306e\u3067\u3001\u6700\u521d\u306b\u62ec\u5f27\u4ed8\u3055\u308c\u3001\n=\u306f10\u3067\u5ea6\u5408\u3044\u304c1\u756a\u5c0f\u3055\u3044\u306e\u3067\u3001\u6700\u5f8c\u306b\u62ec\u5f27\u4ed8\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\nJava\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\u5b9f\u88c5\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092\u90e8\u5206\u7684\u306b\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\u306f\u3058\u3081\u306f\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u5bfe\u3057\u3066\u3001\u3069\u3046\u52d5\u4f5c\u3059\u308b\u304b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\ndegrees\u306f\u6f14\u7b97\u5b50\u9806\u5e8f\u306e\u5ea6\u5408\u3044\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nfactorKinds\u306fa\u30c8\u30fc\u30af\u30f3\u30843\u30c8\u30fc\u30af\u30f3\u306a\u3069\u3001\u5f0f\u306e\u5de6\u53f3\u306e\u7aef\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u306ekind\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nbinaryKinds\u306f=\u30c8\u30fc\u30af\u30f3\u3084+\u30c8\u30fc\u30af\u30f3\u306a\u3069\u3001\u5f0f\u306e\u771f\u3093\u4e2d\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u306ekind\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nrightAssocs\u306f=\u30c8\u30fc\u30af\u30f3\u3078\u306e\u9806\u5e8f\u4ed8\u3051\u3067\u3001\u7279\u5225\u6271\u3044\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u305d\u306e\u305f\u3081\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n\nParser.java\npublic class Parser {\n\n    private Map<String, Integer> degrees;\n    private List<String> factorKinds;\n    private List<String> binaryKinds;\n    private List<String> rightAssocs;\n\n    public Parser() {\n        degrees = new HashMap<>();\n        degrees.put(\"*\", 60);\n        degrees.put(\"/\", 60);\n        degrees.put(\"+\", 50);\n        degrees.put(\"-\", 50);\n        degrees.put(\"=\", 10);\n        factorKinds = Arrays.asList(new String[] { \"digit\", \"variable\" });\n        binaryKinds = Arrays.asList(new String[] { \"sign\" });\n        rightAssocs = Arrays.asList(new String[] { \"=\" });\n    }\n\n\n\u7d9a\u3044\u3066\u69cb\u6587\u89e3\u6790\u3092\u884c\u3046\u524d\u306e\u521d\u671f\u5316\u306e\u90e8\u5206\u3067\u3059\u3002\n\u5b57\u53e5\u89e3\u6790\u3067\u5206\u89e3\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u3068\u308a\u307e\u3059\u3002\n\u3053\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3078\u69cb\u6587\u89e3\u6790\u3092\u304b\u3051\u307e\u3059\u3002\n\u89e3\u6790\u3067\u7d42\u7aef\u3092\u51e6\u7406\u3059\u308b\u306e\u306b\u90fd\u5408\u304c\u3044\u3044\u306e\u3067\u3001\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u306e\u672b\u5c3e\u3078\u7d42\u7aef\u3092\u3042\u3089\u308f\u3059eob\u30c8\u30fc\u30af\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u307e\u305f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u5148\u982d\u304b\u3089\u7d42\u7aef\u3078\u9806\u306b\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i\u30820\u306b\u3057\u307e\u3059\u3002\n\nParser.java\n    private List<Token> tokens;\n    private int i;\n\n    public Parser init(List<Token> tokens) {\n        i = 0;\n        this.tokens = new ArrayList<Token>(tokens);\n        Token eob = new Token();\n        eob.kind = \"eob\";\n        eob.value = \"(eob)\";\n        this.tokens.add(eob);\n        return this;\n    }\n\n\n\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u9806\u306b\u53c2\u7167\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002\ntoken()\u306f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u4e2d\u306e\u73fe\u5728\u6ce8\u76ee\u3057\u3066\u3044\u308b\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002\nnext()\u306f\u6ce8\u76ee\u3057\u3066\u3044\u305f\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u3001\u6ce8\u76ee\u3059\u308b\u4f4d\u7f6e\u3092\u6b21\u3078\u9032\u3081\u307e\u3059\u3002\n\nParser.java\n    private Token token() throws Exception {\n        if (tokens.size() <= i) {\n            throw new Exception(\"No more token\");\n        }\n        return tokens.get(i);\n    }\n\n    private Token next() throws Exception {\n        Token t = token();\n        ++i;\n        return t;\n    }\n\n\n\u89e3\u6790\u3092\u3059\u308b\u90e8\u5206\u306e\u8aac\u660e\u3078\u5165\u3063\u3066\u3044\u304d\u307e\u3059\u3002\nlead()\u306fa\u30843\u306a\u3069\u3001\u5f0f\u306e\u5de6\u53f3\u306e\u7aef\u306b\u3053\u3089\u308c\u308b\u30c8\u30fc\u30af\u30f3\u3067\u3042\u308b\u3053\u3068\u3092\u89e3\u6790\u3057\u3066\u3001\u305d\u306e\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nParser.java\n    private Token lead(Token token) throws Exception {\n        if (factorKinds.contains(token.kind)) {\n            return token;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n\ndegree()\u306f\u30c8\u30fc\u30af\u30f3\u306e\u512a\u5148\u9806\u4f4d\u5ea6\u5408\u3044\u3092\u8fd4\u3057\u307e\u3059\u3002\nbind()\u306f\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u3078\u5de6\u53f3\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u3092\u5272\u308a\u4ed8\u3051\u3001\u5272\u308a\u4ed8\u3051\u306e\u6e08\u3093\u3060\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nParser.java\n    private int degree(Token t) {\n        if (degrees.containsKey(t.value)) {\n            return degrees.get(t.value);\n        } else {\n            return 0;\n        }\n    }\n\n    private Token bind(Token left, Token operator) throws Exception {\n        if (binaryKinds.contains(operator.kind)) {\n            operator.left = left;\n            int leftDegree = degree(operator);\n            if (rightAssocs.contains(operator.value)) {\n                leftDegree -= 1;\n            }\n            operator.right = expression(leftDegree);\n            return operator;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n\n\nbind()\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u307f\u3066\u3044\u304d\u307e\u3059\u3002\nbind()\u306f\u5f15\u6570\u306b\u5f0f\u306e\u5de6\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u3068\u3001\u5f0f\u306e\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u3092\u3068\u308a\u307e\u3059\u3002\nbind()\u3067\u306f\u307e\u305a\u3001\u305d\u306e\u5de6\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u3092\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306eoperator.left\u3078\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\noperator.right\u3078\u5272\u308a\u4ed8\u3051\u308b\u30c8\u30fc\u30af\u30f3\u306f\u3001expression()\u3092\u547c\u3093\u3060\u623b\u308a\u5024\u3092\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\nexpression()\u304c\u3069\u306e\u3088\u3046\u306a\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3059\u304b\u3092\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\u3002\nexpression()\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u5f15\u6570\u306b\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306e\u512a\u5148\u9806\u4f4d\u5ea6\u5408\u3044\u3092\u6e21\u3057\u307e\u3059\u3002\n\u6e21\u3055\u308c\u305f\u5ea6\u5408\u3044\u306fexpression()\u306e\u4e2d\u3067\u3001\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3067\u5f8c\u306b\u7d9a\u304f\u6f14\u7b97\u5b50\u306e\u5ea6\u5408\u3044\u3068\u6bd4\u8f03\u3055\u308c\u307e\u3059\u3002\n\u6e21\u3055\u308c\u305f\u5ea6\u5408\u304c\u5927\u304d\u3044\u304b\u540c\u3058\u3068\u304d\u306f\u3001\u5f8c\u306b\u7d9a\u304f\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306e\u524d\u306e\u30c8\u30fc\u30af\u30f3\u3092\u3001expression()\u306f\u8fd4\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u306e\u5f0f\u3067\u3001bind()\u3092\u5f15\u6570\u306bleft\u304c6\u3067operator\u304c+\u3067\u547c\u3073\u51fa\u3057\u305f\u3068\u304d\u3092\u8003\u3048\u307e\u3059\u3002\n6 + 7 - 8\n\nexpression()\u306f+\u306e\u5ea6\u5408\u304450\u3067\u547c\u3073\u51fa\u3055\u308c\u3001\u5f8c\u306b\u304f\u308b-\u306e\u5ea6\u5408\u304450\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\u5ea6\u5408\u3044\u306f\u540c\u3058\u306a\u306e\u3067\u3001-\u306e\u524d\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f37\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066bind()\u306b\u623b\u308a7\u306foperator.right\u3078\u5272\u308a\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002\n\u3053\u308c\u30676 + 7\u306b\u95a2\u9023\u4ed8\u3051\u305f+\u3092bind()\u306f\u8fd4\u3057\u307e\u3059\u3002\n\u5ea6\u5408\u3044\u6bd4\u8f03\u3067leftDegree\u304c\u5c0f\u3055\u3044\u5834\u5408\u306f\u3001\u3042\u3068\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\nexpression()\u306f\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u5ea6\u5408\u3044\u3092\u3064\u304b\u3063\u3066\u3001\u30c8\u30fc\u30af\u30f3\u306e\u95a2\u9023\u4ed8\u3051\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\n\u5148\u306b\u8aac\u660e\u3057\u305f\u3001lead()\u3068bind()\u3092expression()\u304c\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\nParser.java\n    public Token expression(int leftDegree) throws Exception {\n        Token left = lead(next());\n        int rightDegree = degree(token());\n        while (leftDegree < rightDegree) {\n            Token operator = next();\n            left = bind(left, operator);\n            rightDegree = degree(token());\n        }\n        return left;\n    }\n\n\n\nexpression()\u306e\u52d5\u304d\u3092\u5e7e\u3064\u304b\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u4f8b\u306b\u3068\u3063\u3066\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304ca\u3060\u3051\u306e\u5834\u5408\n\u307e\u305a\u521d\u3081\u306eexpression()\u306e\u547c\u3073\u51fa\u3057\u3067\u306fleftDegree\u306f0\u3067\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\na\u3060\u3051\u306e\u5834\u5408\u3001lead()\u306e\u547c\u3073\u51fa\u3057\u3067\u3001a\u304c\u8fd4\u3055\u308c\u3001left\u304ca\u3067\u6c7a\u307e\u308a\u3059\u3002\n\u6b21\u306edegree()\u3067\u306f\u7d42\u7aef\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u8ffd\u52a0\u3057\u305f(eob)\u306e\u5ea6\u5408\u3044\u304c\u8fd4\u3055\u308crightDegree\u306f0\u3067\u3059\u3002\nleftDegree\u304c0\u3001rightDegree\u304c0\u3067while\u304c\u6210\u7acb\u305b\u305a\u3001left\u306ea\u304c\u305d\u306e\u307e\u307e\u8fd4\u3055\u308c\u307e\u3059\u3002\n\u3064\u307e\u308aa\u3060\u3051\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304c\u89e3\u6790\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304ca = 3\u306e\u5834\u5408\na = 3\u306e\u5834\u5408\u3082\u3001lead()\u306e\u547c\u3073\u51fa\u3057\u3067\u3001a\u304c\u8fd4\u3055\u308c\u3001left\u304ca\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n\u6b21\u306edegree()\u3067\u306f=\u306e\u5ea6\u5408\u3044\u304c\u8fd4\u3055\u308crightDegree\u306f10\u3067\u3059\u3002\n\u5148\u306e\u5834\u5408\u3068\u540c\u3058\u3067expression()\u306f\u3001leftDegree\u304c0\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u3066while\u304c\u6210\u7acb\u3057\u307e\u3059\u3002\n\u3059\u308b\u3068bind()\u3092a\u3068=\u3092\u5f15\u6570\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\nbind()\u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306b\u3001bind()\u3067\u306f\u5f0f\u306e\u53f3\u5074\u306e\u30c8\u30fc\u30af\u30f3\u3092\u89e3\u6790\u3059\u308b\u305f\u3081\u306b\u3001expression()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\nbind()\u3067expression()\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306f\u3001a =\u307e\u3067\u89e3\u6790\u3067\u304d\u3066\u3044\u308b\u306e\u3067\u3001\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u306b\u6b8b\u308b\u30c8\u30fc\u30af\u30f3\u306f\u30013\u306e\u307f\u3067\u3059\u3002\n\u3053\u308c\u306f\u5148\u306b\u8aac\u660e\u3057\u305f\u3001\u300c\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304ca\u3060\u3051\u306e\u5834\u5408\u300d\u3068\u540c\u3058\u72b6\u6cc1\u3067\u3059\u3002\n\u3064\u307e\u308abind()\u3067\u547c\u3073\u51fa\u3057\u305fexpression()\u306f3\u3092\u8fd4\u3057\u3001operator.right\u306f3\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\nbind()\u306f\u547c\u3073\u51fa\u3057\u5143\u306eexpression()\u3078=\u3092\u8fd4\u3057\u3001\n\u547c\u3073\u51fa\u3057\u5143\u306eexpression()\u306eleft\u306f=\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\nbind()\u547c\u3073\u51fa\u3057\u306e\u6b21\u306e\u884c\u306edegree()\u306f(eob)\u306e\u5ea6\u5408\u30440\u3092\u8fd4\u3059\u306e\u3067\u3001while\u3092\u629c\u3051\u307e\u3059\u3002\n\u3053\u308c\u3067=\u306b\u6c7a\u307e\u3063\u305fleft\u3092expression()\u304c\u8fd4\u3057\u3001\u89e3\u6790\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u305f\u3053\u306e\u8aac\u660e\u306f\u3001\u3042\u3068\u3067\u8aac\u660e\u3059\u308b\u3068\u3057\u3066\u3044\u305f\u5ea6\u5408\u3044\u6bd4\u8f03\u3067leftDegree\u304c\u5c0f\u3055\u3044\u5834\u5408\u306e\u8aac\u660e\u306b\u3082\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u89e3\u6790\u3092\u3059\u308b\u90e8\u5206\u306e\u6700\u5f8c\u306e\u8aac\u660e\u3067\u3059\u3002\nblock()\u306f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304c(eob)\u306b\u306a\u308b\u307e\u3067\u3001expression()\u3092\u547c\u3073\u51fa\u3057\u3001\u305d\u306e\u89e3\u6790\u7d50\u679c\u3092\u30ea\u30b9\u30c8\u3078\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u306b\u3042\u308b\u5f0f\u306e\u6570\u3060\u3051\u3001blk\u306b\u89e3\u6790\u7d50\u679c\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\n\nParser.java\n    public List<Token> block() throws Exception {\n        List<Token> blk = new ArrayList<Token>();\n        while (!token().kind.equals(\"eob\")) {\n            blk.add(expression(0));\n        }\n        return blk;\n    }\n\n\n\u4ee5\u4e0a\u306e\u5b9f\u88c5\u3092\u4f7f\u3063\u3066\u3001\u4f8b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\na = 3 + 4 * 5\n\n\u3092\u69cb\u6587\u89e3\u6790\u3057\u3001\u6a19\u6e96\u51fa\u529b\u3078\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\n\nParser.java\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        for (Token ast : blk) {\n            System.out.println(ast.paren());\n        }\n        // --> (a = (3 + (4 * 5)))\n    }\n}\n\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3042\u308a\u304c\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u304a\u308f\u308a\u306b\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nCalc\nhttps://github.com/quwahara/Calc/tree/article-2-parser/Calc/src/main/java\n\u7d9a\u304d\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\u5358\u7d14\u306a\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092Java\u3067\u5b9f\u88c5\u3059\u308b\nhttp://qiita.com/quwahara/items/30e93dfd2690913d66c0\n\u6700\u5f8c\u306b\u3001Parser\u30af\u30e9\u30b9\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3082\u3042\u3052\u3066\u304a\u304d\u307e\u3059\u3002\n\nParser.java\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Parser {\n\n    private Map<String, Integer> degrees;\n    private List<String> factorKinds;\n    private List<String> binaryKinds;\n    private List<String> rightAssocs;\n\n    public Parser() {\n        degrees = new HashMap<>();\n        degrees.put(\"*\", 60);\n        degrees.put(\"/\", 60);\n        degrees.put(\"+\", 50);\n        degrees.put(\"-\", 50);\n        degrees.put(\"=\", 10);\n        factorKinds = Arrays.asList(new String[] { \"digit\", \"variable\" });\n        binaryKinds = Arrays.asList(new String[] { \"sign\" });\n        rightAssocs = Arrays.asList(new String[] { \"=\" });\n    }\n\n    private List<Token> tokens;\n    private int i;\n\n    public Parser init(List<Token> tokens) {\n        i = 0;\n        this.tokens = new ArrayList<Token>(tokens);\n        Token eob = new Token();\n        eob.kind = \"eob\";\n        eob.value = \"(eob)\";\n        this.tokens.add(eob);\n        return this;\n    }\n\n    private Token token() throws Exception {\n        if (tokens.size() <= i) {\n            throw new Exception(\"No more token\");\n        }\n        return tokens.get(i);\n    }\n\n    private Token next() throws Exception {\n        Token t = token();\n        ++i;\n        return t;\n    }\n\n    private Token lead(Token token) throws Exception {\n        if (factorKinds.contains(token.kind)) {\n            return token;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n    private int degree(Token t) {\n        if (degrees.containsKey(t.value)) {\n            return degrees.get(t.value);\n        } else {\n            return 0;\n        }\n    }\n\n    private Token bind(Token left, Token operator) throws Exception {\n        if (binaryKinds.contains(operator.kind)) {\n            operator.left = left;\n            int leftDegree = degree(operator);\n            if (rightAssocs.contains(operator.value)) {\n                leftDegree -= 1;\n            }\n            operator.right = expression(leftDegree);\n            return operator;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n    public Token expression(int leftDegree) throws Exception {\n        Token left = lead(next());\n        int rightDegree = degree(token());\n        while (leftDegree < rightDegree) {\n            Token operator = next();\n            left = bind(left, operator);\n            rightDegree = degree(token());\n        }\n        return left;\n    }\n\n    public List<Token> block() throws Exception {\n        List<Token> blk = new ArrayList<Token>();\n        while (!token().kind.equals(\"eob\")) {\n            blk.add(expression(0));\n        }\n        return blk;\n    }\n\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        for (Token ast : blk) {\n            System.out.println(ast.paren());\n        }\n        // --> (a = (3 + (4 * 5)))\n    }\n}\n\n\n# \u306f\u3058\u3081\u306b\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u5b9f\u88c5\u306e\u51e6\u7406\u904e\u7a0b\u306b\u69cb\u6587\u89e3\u6790\u304c\u3042\u308a\u307e\u3059\u3002\n[\u5358\u7d14\u306a\u5b57\u53e5\u89e3\u6790\u3092Java\u3067\u5b9f\u88c5\u3059\u308b](http://qiita.com/quwahara/items/d7ea5d0e0dbc0409a01f)\u306e\u7d9a\u304d\u3067\u3001\n\u69cb\u6587\u89e3\u6790\u306e\u3054\u304f\u3054\u304f\u539f\u59cb\u7684\u306a\u3082\u306e\u3092Java\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\n# \u69cb\u6587\u89e3\u6790\u3067\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u5b9f\u88c5\u306b\u3042\u305f\u308a\u3084\u308a\u305f\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u304c\u56db\u5247\u6f14\u7b97\u3060\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3067\u306f\u305d\u306e\u56db\u5247\u6f14\u7b97\u3092\u3069\u3046\u3044\u3046\u9806\u5e8f\u3067\u8a08\u7b97\u3059\u308b\u304b\u3092\u89e3\u6790\u3057\u307e\u3059\u3002\n\u4e0b\u306e\u5f0f\u3092\u4f8b\u306b\u8003\u3048\u307e\u3059\u3002\n\n```JS\na = 3 + 4 * 5\n```\n\n\u4e00\u76ee\u77ad\u7136\u3067\u3059\u304c\u3001\u4e0b\u306e\u9806\u5e8f\u3067\u62ec\u5f27\u3092\u4ed8\u3051\u305f\u90e8\u5206\u304b\u3089\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n1. `(4 * 5)`\n1. `(3 + (4 * 5))`\n1. `(a = (3 + (4 * 5)))`\n\n\u69cb\u6587\u89e3\u6790\u3067\u306f\u3053\u306e\u9806\u5e8f\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u95a2\u6570\u306e\u5b9a\u7fa9\u3084\u547c\u3073\u51fa\u3057\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\n\u7c21\u5358\u306e\u305f\u3081\u306b\u307e\u305a\u306f\u56db\u5247\u6f14\u7b97\u3068\u3001\u5909\u6570\u3078\u306e\u4ee3\u5165\u304c\u89e3\u6790\u3067\u304d\u308b\u3053\u3068\u3092\u3081\u3056\u3057\u307e\u3059\u3002\n\n# \u9806\u5e8f\u4ed8\u3051\u306e\u8868\u73fe\u65b9\u6cd5\n\n\u9806\u5e8f\u4ed8\u3051\u3092\u3057\u305f\u3044\u3053\u3068\u306f\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\u9806\u5e8f\u4ed8\u3051\u3057\u305f\u72b6\u614b\u3092\u5b9f\u88c5\u3067\u3069\u3046\u8868\u73fe\u3059\u308b\u304b\u8003\u3048\u307e\u3059\u3002\n\u4f8b\u306e\u5f0f\u306e\u4e00\u90e8\u3001`4 * 5`\u304b\u3089\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/quwahara/items/d7ea5d0e0dbc0409a01f)\u3067\u5f0f\u3092\u30c8\u30fc\u30af\u30f3\u3078\u5206\u89e3\u3057\u307e\u3057\u305f\u3002\n`4 * 5`\u306f\u30c8\u30fc\u30af\u30f3\u306b\u5206\u89e3\u3059\u308b\u3068\u3001`4`\u3001`*`\u3001`5`\u306e\uff13\u3064\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067`4 * 5`\u306e\u72b6\u614b\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u3001`*`\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066\u3001\u5de6\u306b`4`\u30c8\u30fc\u30af\u30f3\u3001\u53f3\u306b`5`\u30c8\u30fc\u30af\u30f3\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u524d\u56de\u306e\u8a18\u4e8b\u306eToken\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306b\u3001`left`\u3068`right`\u3092\u8ffd\u52a0\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\n```Java:Token.java\n\npublic class Token {\n\n    public String kind;\n    public String value;\n    public Token left;\n    public Token right;\n\n    @Override\n    public String toString() {\n        return kind + \" \\\"\" + value + \"\\\"\";\n    }\n\n    public String paren() {\n        if (left == null && right == null) {\n            return value;\n        } else {\n            StringBuilder b = new StringBuilder();\n            b.append(\"(\");\n            if (left != null) {\n                b.append(left.paren()).append(\" \");\n            }\n            b.append(value);\n            if (right != null) {\n                b.append(\" \").append(right.paren());\n            }\n            b.append(\")\");\n            return b.toString();\n        }\n    }\n\n}\n```\n\n\u3053\u308c\u3067`*`\u30c8\u30fc\u30af\u30f3\u306e`left`\u306b`4`\u30c8\u30fc\u30af\u30f3\u3092\u6301\u305f\u305b\u3001`right`\u306b`5`\u30c8\u30fc\u30af\u30f3\u3092\u6301\u305f\u305b\u308c\u3070\u3001`4 * 5`\u306e\u72b6\u614b\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306b`3 + (4 * 5)`\u306e\u72b6\u614b\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\n\u540c\u3058\u8003\u3048\u65b9\u3067\u3001`+`\u30c8\u30fc\u30af\u30f3\u306e`left`\u306b`3`\u30c8\u30fc\u30af\u30f3\u3092\u6301\u305f\u305b\u3001`right`\u306b`*`\u30c8\u30fc\u30af\u30f3\u3092\u6301\u305f\u305b\u307e\u3059\u3002\n\u3053\u3053\u3067`*`\u30c8\u30fc\u30af\u30f3\u306f\u5148\u306e\u8aac\u660e\u3067`left`\u3068`right`\u306b`4`\u3068`5`\u306e\u30c8\u30fc\u30af\u30f3\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a`4 * 5`\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u3068\u3081\u308b\u3068\u3001`+`\u30c8\u30fc\u30af\u30f3\u304c\u3042\u3063\u3066\u3001`left`\u306b`3`\u30c8\u30fc\u30af\u30f3\u3001`right`\u304c`4 * 5`\u30c8\u30fc\u30af\u30f3\u3068\u306a\u308a\u3001`3 + (4 * 5)`\u306e\u72b6\u614b\u304c\u8868\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\n\u8a71\u304c\u305d\u308c\u307e\u3059\u304c\u3001\u5185\u5bb9\u306e\u78ba\u8a8d\u7528\u306b\u62ec\u5f27\u4ed8\u304d\u306e\u72b6\u614b\u3092\u8868\u3059paren()\u3082Token\u30af\u30e9\u30b9\u3078\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n# \u9806\u5e8f\u4ed8\u3051\u306e\u4ed5\u65b9\n\n\u6b21\u306f\u3053\u306e\u9806\u5e8f\u4ed8\u3051\u306e\u4ed5\u65b9\u3092\u8003\u3048\u307e\u3059\u3002\n\u4f8b\u306e\u5f0f\u3067\u306f\u30013\u3064\u306e\u6f14\u7b97\u5b50\u304c\u767b\u5834\u3057\u307e\u3059\u3002`=`\u3001`+`\u3001`*`\u306e3\u3064\u3067\u3059\u3002\n\u9806\u5e8f\u306e\u57fa\u6e96\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u305d\u308c\u3089\u306e\u6f14\u7b97\u5b50\u3067\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3067\u78ba\u8a8d\u3057\u305f\u9806\u5e8f\u3067\u306f\u3001`*`\u304c1\u756a\u3001`+`\u304c2\u756a\u3001`=`\u304c3\u756a\u3067\u3057\u305f\u3002\n\u3053\u3053\u3067\u3053\u306e\u9806\u5e8f\u306b\u5bfe\u3057\u3066\u5148\u306b\u304f\u308b\u65b9\u306e\u6f14\u7b97\u5b50\u3078\u3001\u5148\u306b\u304f\u308b\u5ea6\u5408\u3044\u306e\u6570\u5024\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f`*`\u306b`60`\u3092\u3001`+`\u306b`50`\u3092\u3001`=`\u306b`10`\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\u3053\u306e\u5ea6\u5408\u3044\u3092\u57fa\u6e96\u306b\u3001\u6570\u5024\u304c\u5927\u304d\u3044\u65b9\u304b\u3089\u5148\u306b\u62ec\u5f27\u4ed8\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n`*`\u304c`60`\u3067\u5ea6\u5408\u3044\u304c1\u756a\u5927\u304d\u3044\u306e\u3067\u3001\u6700\u521d\u306b\u62ec\u5f27\u4ed8\u3055\u308c\u3001\n`=`\u306f`10`\u3067\u5ea6\u5408\u3044\u304c1\u756a\u5c0f\u3055\u3044\u306e\u3067\u3001\u6700\u5f8c\u306b\u62ec\u5f27\u4ed8\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n# Java\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\n\u5b9f\u88c5\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092\u90e8\u5206\u7684\u306b\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u306f\u3058\u3081\u306f\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u5bfe\u3057\u3066\u3001\u3069\u3046\u52d5\u4f5c\u3059\u308b\u304b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n`degrees`\u306f\u6f14\u7b97\u5b50\u9806\u5e8f\u306e\u5ea6\u5408\u3044\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n`factorKinds`\u306f`a`\u30c8\u30fc\u30af\u30f3\u3084`3`\u30c8\u30fc\u30af\u30f3\u306a\u3069\u3001\u5f0f\u306e\u5de6\u53f3\u306e\u7aef\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u306e`kind`\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n`binaryKinds`\u306f`=`\u30c8\u30fc\u30af\u30f3\u3084`+`\u30c8\u30fc\u30af\u30f3\u306a\u3069\u3001\u5f0f\u306e\u771f\u3093\u4e2d\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u306e`kind`\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n`rightAssocs`\u306f`=`\u30c8\u30fc\u30af\u30f3\u3078\u306e\u9806\u5e8f\u4ed8\u3051\u3067\u3001\u7279\u5225\u6271\u3044\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u305d\u306e\u305f\u3081\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n\n```Java:Parser.java\npublic class Parser {\n\n    private Map<String, Integer> degrees;\n    private List<String> factorKinds;\n    private List<String> binaryKinds;\n    private List<String> rightAssocs;\n\n    public Parser() {\n        degrees = new HashMap<>();\n        degrees.put(\"*\", 60);\n        degrees.put(\"/\", 60);\n        degrees.put(\"+\", 50);\n        degrees.put(\"-\", 50);\n        degrees.put(\"=\", 10);\n        factorKinds = Arrays.asList(new String[] { \"digit\", \"variable\" });\n        binaryKinds = Arrays.asList(new String[] { \"sign\" });\n        rightAssocs = Arrays.asList(new String[] { \"=\" });\n    }\n```\n\n\u7d9a\u3044\u3066\u69cb\u6587\u89e3\u6790\u3092\u884c\u3046\u524d\u306e\u521d\u671f\u5316\u306e\u90e8\u5206\u3067\u3059\u3002\n\u5b57\u53e5\u89e3\u6790\u3067\u5206\u89e3\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u3068\u308a\u307e\u3059\u3002\n\u3053\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3078\u69cb\u6587\u89e3\u6790\u3092\u304b\u3051\u307e\u3059\u3002\n\u89e3\u6790\u3067\u7d42\u7aef\u3092\u51e6\u7406\u3059\u308b\u306e\u306b\u90fd\u5408\u304c\u3044\u3044\u306e\u3067\u3001\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u306e\u672b\u5c3e\u3078\u7d42\u7aef\u3092\u3042\u3089\u308f\u3059`eob`\u30c8\u30fc\u30af\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u307e\u305f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u5148\u982d\u304b\u3089\u7d42\u7aef\u3078\u9806\u306b\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9`i`\u30820\u306b\u3057\u307e\u3059\u3002\n\n```Java:Parser.java\n    private List<Token> tokens;\n    private int i;\n    \n    public Parser init(List<Token> tokens) {\n        i = 0;\n        this.tokens = new ArrayList<Token>(tokens);\n        Token eob = new Token();\n        eob.kind = \"eob\";\n        eob.value = \"(eob)\";\n        this.tokens.add(eob);\n        return this;\n    }\n```\n\n\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u9806\u306b\u53c2\u7167\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002\n`token()`\u306f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u4e2d\u306e\u73fe\u5728\u6ce8\u76ee\u3057\u3066\u3044\u308b\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002\n`next()`\u306f\u6ce8\u76ee\u3057\u3066\u3044\u305f\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u3001\u6ce8\u76ee\u3059\u308b\u4f4d\u7f6e\u3092\u6b21\u3078\u9032\u3081\u307e\u3059\u3002\n\n```Java:Parser.java\n    private Token token() throws Exception {\n        if (tokens.size() <= i) {\n            throw new Exception(\"No more token\");\n        }\n        return tokens.get(i);\n    }\n\n    private Token next() throws Exception {\n        Token t = token();\n        ++i;\n        return t;\n    }\n```\n\n\u89e3\u6790\u3092\u3059\u308b\u90e8\u5206\u306e\u8aac\u660e\u3078\u5165\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n`lead()`\u306f`a`\u3084`3`\u306a\u3069\u3001\u5f0f\u306e\u5de6\u53f3\u306e\u7aef\u306b\u3053\u3089\u308c\u308b\u30c8\u30fc\u30af\u30f3\u3067\u3042\u308b\u3053\u3068\u3092\u89e3\u6790\u3057\u3066\u3001\u305d\u306e\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```Java:Parser.java\n    private Token lead(Token token) throws Exception {\n        if (factorKinds.contains(token.kind)) {\n            return token;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n```\n\n`degree()`\u306f\u30c8\u30fc\u30af\u30f3\u306e\u512a\u5148\u9806\u4f4d\u5ea6\u5408\u3044\u3092\u8fd4\u3057\u307e\u3059\u3002\n`bind()`\u306f\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u3078\u5de6\u53f3\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u3092\u5272\u308a\u4ed8\u3051\u3001\u5272\u308a\u4ed8\u3051\u306e\u6e08\u3093\u3060\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```Java:Parser.java\n    private int degree(Token t) {\n        if (degrees.containsKey(t.value)) {\n            return degrees.get(t.value);\n        } else {\n            return 0;\n        }\n    }\n\n    private Token bind(Token left, Token operator) throws Exception {\n        if (binaryKinds.contains(operator.kind)) {\n            operator.left = left;\n            int leftDegree = degree(operator);\n            if (rightAssocs.contains(operator.value)) {\n                leftDegree -= 1;\n            }\n            operator.right = expression(leftDegree);\n            return operator;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n```\n\n`bind()`\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n`bind()`\u306f\u5f15\u6570\u306b\u5f0f\u306e\u5de6\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u3068\u3001\u5f0f\u306e\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u3092\u3068\u308a\u307e\u3059\u3002\n`bind()`\u3067\u306f\u307e\u305a\u3001\u305d\u306e\u5de6\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u3092\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306e`operator.left`\u3078\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\n`operator.right`\u3078\u5272\u308a\u4ed8\u3051\u308b\u30c8\u30fc\u30af\u30f3\u306f\u3001`expression()`\u3092\u547c\u3093\u3060\u623b\u308a\u5024\u3092\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\n`expression()`\u304c\u3069\u306e\u3088\u3046\u306a\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3059\u304b\u3092\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\u3002\n`expression()`\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u5f15\u6570\u306b\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306e\u512a\u5148\u9806\u4f4d\u5ea6\u5408\u3044\u3092\u6e21\u3057\u307e\u3059\u3002\n\u6e21\u3055\u308c\u305f\u5ea6\u5408\u3044\u306f`expression()`\u306e\u4e2d\u3067\u3001\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3067\u5f8c\u306b\u7d9a\u304f\u6f14\u7b97\u5b50\u306e\u5ea6\u5408\u3044\u3068\u6bd4\u8f03\u3055\u308c\u307e\u3059\u3002\n\u6e21\u3055\u308c\u305f\u5ea6\u5408\u304c\u5927\u304d\u3044\u304b\u540c\u3058\u3068\u304d\u306f\u3001\u5f8c\u306b\u7d9a\u304f\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306e\u524d\u306e\u30c8\u30fc\u30af\u30f3\u3092\u3001`expression()`\u306f\u8fd4\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u306e\u5f0f\u3067\u3001`bind()`\u3092\u5f15\u6570\u306b`left`\u304c`6`\u3067`operator`\u304c`+`\u3067\u547c\u3073\u51fa\u3057\u305f\u3068\u304d\u3092\u8003\u3048\u307e\u3059\u3002\n\n```JS\n6 + 7 - 8\n```\n\n`expression()`\u306f`+`\u306e\u5ea6\u5408\u3044`50`\u3067\u547c\u3073\u51fa\u3055\u308c\u3001\u5f8c\u306b\u304f\u308b`-`\u306e\u5ea6\u5408\u3044`50`\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\u5ea6\u5408\u3044\u306f\u540c\u3058\u306a\u306e\u3067\u3001`-`\u306e\u524d\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3`7`\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066`bind()`\u306b\u623b\u308a`7`\u306f`operator.right`\u3078\u5272\u308a\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002\n\u3053\u308c\u3067`6 + 7`\u306b\u95a2\u9023\u4ed8\u3051\u305f`+`\u3092`bind()`\u306f\u8fd4\u3057\u307e\u3059\u3002\n\u5ea6\u5408\u3044\u6bd4\u8f03\u3067`leftDegree`\u304c\u5c0f\u3055\u3044\u5834\u5408\u306f\u3001\u3042\u3068\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n`expression()`\u306f\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u5ea6\u5408\u3044\u3092\u3064\u304b\u3063\u3066\u3001\u30c8\u30fc\u30af\u30f3\u306e\u95a2\u9023\u4ed8\u3051\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\n\u5148\u306b\u8aac\u660e\u3057\u305f\u3001`lead()`\u3068`bind()`\u3092`expression()`\u304c\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n```Java:Parser.java\n    public Token expression(int leftDegree) throws Exception {\n        Token left = lead(next());\n        int rightDegree = degree(token());\n        while (leftDegree < rightDegree) {\n            Token operator = next();\n            left = bind(left, operator);\n            rightDegree = degree(token());\n        }\n        return left;\n    }\n\n```\n\n`expression()`\u306e\u52d5\u304d\u3092\u5e7e\u3064\u304b\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u4f8b\u306b\u3068\u3063\u3066\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n## \u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304c`a`\u3060\u3051\u306e\u5834\u5408\n\n\u307e\u305a\u521d\u3081\u306e`expression()`\u306e\u547c\u3073\u51fa\u3057\u3067\u306f`leftDegree`\u306f`0`\u3067\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n`a`\u3060\u3051\u306e\u5834\u5408\u3001`lead()`\u306e\u547c\u3073\u51fa\u3057\u3067\u3001`a`\u304c\u8fd4\u3055\u308c\u3001`left`\u304c`a`\u3067\u6c7a\u307e\u308a\u3059\u3002\n\u6b21\u306e`degree()`\u3067\u306f\u7d42\u7aef\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u8ffd\u52a0\u3057\u305f`(eob)`\u306e\u5ea6\u5408\u3044\u304c\u8fd4\u3055\u308c`rightDegree`\u306f`0`\u3067\u3059\u3002\n`leftDegree`\u304c`0`\u3001`rightDegree`\u304c`0`\u3067`while`\u304c\u6210\u7acb\u305b\u305a\u3001`left`\u306e`a`\u304c\u305d\u306e\u307e\u307e\u8fd4\u3055\u308c\u307e\u3059\u3002\n\u3064\u307e\u308a`a`\u3060\u3051\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304c\u89e3\u6790\u3067\u304d\u307e\u3057\u305f\u3002\n\n## \u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304c`a = 3`\u306e\u5834\u5408\n\n`a = 3`\u306e\u5834\u5408\u3082\u3001`lead()`\u306e\u547c\u3073\u51fa\u3057\u3067\u3001`a`\u304c\u8fd4\u3055\u308c\u3001`left`\u304c`a`\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n\u6b21\u306e`degree()`\u3067\u306f`=`\u306e\u5ea6\u5408\u3044\u304c\u8fd4\u3055\u308c`rightDegree`\u306f`10`\u3067\u3059\u3002\n\u5148\u306e\u5834\u5408\u3068\u540c\u3058\u3067`expression()`\u306f\u3001`leftDegree`\u304c`0`\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u3066`while`\u304c\u6210\u7acb\u3057\u307e\u3059\u3002\n\u3059\u308b\u3068`bind()`\u3092`a`\u3068`=`\u3092\u5f15\u6570\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n`bind()`\u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306b\u3001`bind()`\u3067\u306f\u5f0f\u306e\u53f3\u5074\u306e\u30c8\u30fc\u30af\u30f3\u3092\u89e3\u6790\u3059\u308b\u305f\u3081\u306b\u3001`expression()`\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n`bind()`\u3067`expression()`\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306f\u3001`a =`\u307e\u3067\u89e3\u6790\u3067\u304d\u3066\u3044\u308b\u306e\u3067\u3001\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u306b\u6b8b\u308b\u30c8\u30fc\u30af\u30f3\u306f\u3001`3`\u306e\u307f\u3067\u3059\u3002\n\u3053\u308c\u306f\u5148\u306b\u8aac\u660e\u3057\u305f\u3001\u300c\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304c`a`\u3060\u3051\u306e\u5834\u5408\u300d\u3068\u540c\u3058\u72b6\u6cc1\u3067\u3059\u3002\n\u3064\u307e\u308a`bind()`\u3067\u547c\u3073\u51fa\u3057\u305f`expression()`\u306f`3`\u3092\u8fd4\u3057\u3001`operator.right`\u306f`3`\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n`bind()`\u306f\u547c\u3073\u51fa\u3057\u5143\u306e`expression()`\u3078`=`\u3092\u8fd4\u3057\u3001\n\u547c\u3073\u51fa\u3057\u5143\u306e`expression()`\u306e`left`\u306f`=`\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n`bind()`\u547c\u3073\u51fa\u3057\u306e\u6b21\u306e\u884c\u306e`degree()`\u306f`(eob)`\u306e\u5ea6\u5408\u3044`0`\u3092\u8fd4\u3059\u306e\u3067\u3001`while`\u3092\u629c\u3051\u307e\u3059\u3002\n\u3053\u308c\u3067`=`\u306b\u6c7a\u307e\u3063\u305f`left`\u3092`expression()`\u304c\u8fd4\u3057\u3001\u89e3\u6790\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u305f\u3053\u306e\u8aac\u660e\u306f\u3001\u3042\u3068\u3067\u8aac\u660e\u3059\u308b\u3068\u3057\u3066\u3044\u305f\u5ea6\u5408\u3044\u6bd4\u8f03\u3067`leftDegree`\u304c\u5c0f\u3055\u3044\u5834\u5408\u306e\u8aac\u660e\u306b\u3082\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u89e3\u6790\u3092\u3059\u308b\u90e8\u5206\u306e\u6700\u5f8c\u306e\u8aac\u660e\u3067\u3059\u3002\n`block()`\u306f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u304c`(eob)`\u306b\u306a\u308b\u307e\u3067\u3001`expression()`\u3092\u547c\u3073\u51fa\u3057\u3001\u305d\u306e\u89e3\u6790\u7d50\u679c\u3092\u30ea\u30b9\u30c8\u3078\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u306b\u3042\u308b\u5f0f\u306e\u6570\u3060\u3051\u3001`blk`\u306b\u89e3\u6790\u7d50\u679c\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\n\n```Java:Parser.java\n    public List<Token> block() throws Exception {\n        List<Token> blk = new ArrayList<Token>();\n        while (!token().kind.equals(\"eob\")) {\n            blk.add(expression(0));\n        }\n        return blk;\n    }\n```\n\n\u4ee5\u4e0a\u306e\u5b9f\u88c5\u3092\u4f7f\u3063\u3066\u3001\u4f8b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\n\n```JS\na = 3 + 4 * 5\n```\n\n\u3092\u69cb\u6587\u89e3\u6790\u3057\u3001\u6a19\u6e96\u51fa\u529b\u3078\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\n\n```Java:Parser.java\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        for (Token ast : blk) {\n            System.out.println(ast.paren());\n        }\n        // --> (a = (3 + (4 * 5)))\n    }\n}\n```\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3042\u308a\u304c\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\n# \u304a\u308f\u308a\u306b\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n**Calc**\nhttps://github.com/quwahara/Calc/tree/article-2-parser/Calc/src/main/java\n\n\u7d9a\u304d\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n**\u5358\u7d14\u306a\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092Java\u3067\u5b9f\u88c5\u3059\u308b**\nhttp://qiita.com/quwahara/items/30e93dfd2690913d66c0\n\n\n\n\n\n\u6700\u5f8c\u306b\u3001Parser\u30af\u30e9\u30b9\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3082\u3042\u3052\u3066\u304a\u304d\u307e\u3059\u3002\n\n```Java:Parser.java\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Parser {\n\n    private Map<String, Integer> degrees;\n    private List<String> factorKinds;\n    private List<String> binaryKinds;\n    private List<String> rightAssocs;\n\n    public Parser() {\n        degrees = new HashMap<>();\n        degrees.put(\"*\", 60);\n        degrees.put(\"/\", 60);\n        degrees.put(\"+\", 50);\n        degrees.put(\"-\", 50);\n        degrees.put(\"=\", 10);\n        factorKinds = Arrays.asList(new String[] { \"digit\", \"variable\" });\n        binaryKinds = Arrays.asList(new String[] { \"sign\" });\n        rightAssocs = Arrays.asList(new String[] { \"=\" });\n    }\n\n    private List<Token> tokens;\n    private int i;\n    \n    public Parser init(List<Token> tokens) {\n        i = 0;\n        this.tokens = new ArrayList<Token>(tokens);\n        Token eob = new Token();\n        eob.kind = \"eob\";\n        eob.value = \"(eob)\";\n        this.tokens.add(eob);\n        return this;\n    }\n\n    private Token token() throws Exception {\n        if (tokens.size() <= i) {\n            throw new Exception(\"No more token\");\n        }\n        return tokens.get(i);\n    }\n\n    private Token next() throws Exception {\n        Token t = token();\n        ++i;\n        return t;\n    }\n\n    private Token lead(Token token) throws Exception {\n        if (factorKinds.contains(token.kind)) {\n            return token;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n    private int degree(Token t) {\n        if (degrees.containsKey(t.value)) {\n            return degrees.get(t.value);\n        } else {\n            return 0;\n        }\n    }\n\n    private Token bind(Token left, Token operator) throws Exception {\n        if (binaryKinds.contains(operator.kind)) {\n            operator.left = left;\n            int leftDegree = degree(operator);\n            if (rightAssocs.contains(operator.value)) {\n                leftDegree -= 1;\n            }\n            operator.right = expression(leftDegree);\n            return operator;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n    public Token expression(int leftDegree) throws Exception {\n        Token left = lead(next());\n        int rightDegree = degree(token());\n        while (leftDegree < rightDegree) {\n            Token operator = next();\n            left = bind(left, operator);\n            rightDegree = degree(token());\n        }\n        return left;\n    }\n\n    public List<Token> block() throws Exception {\n        List<Token> blk = new ArrayList<Token>();\n        while (!token().kind.equals(\"eob\")) {\n            blk.add(expression(0));\n        }\n        return blk;\n    }\n\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        for (Token ast : blk) {\n            System.out.println(ast.paren());\n        }\n        // --> (a = (3 + (4 * 5)))\n    }\n}\n```\n", "tags": ["Java", "Parser", "compiler"]}