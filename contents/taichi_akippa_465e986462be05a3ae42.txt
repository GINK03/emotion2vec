{"context": "\n\nselect for update\u3057\u305f\u3044\uff01\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u30b5\u30e9\u30c3\u3068transaction\u306e\u4e8b\u304c\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001select for update\u306f\u3069\u3046\u3059\u308b\u306e\u304b\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\nlaravel\u306etransaction\u306f\u306a\u3093\u3066\u7d20\u6575\u306a\u4ed5\u7d44\u307f\n\n\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3093\u3067\u9802\u3051\u308c\u3070\u308f\u304b\u308b\u3093\u3067\u3059\u304c\n\n\nhttps://laravel.com/docs/5.3/database#database-transactions\n\n\n\n\nYou may use the transaction method on the DB facade to run a set of operations within a database transaction. If an exception is thrown within the transaction Closure, the transaction will automatically be rolled back. If the Closure executes successfully, the transaction will automatically be committed. You don't need to worry about manually rolling back or committing while using the transaction method:\n\n\ntransaction\u30e1\u30bd\u30c3\u30c9\u306eclosure\u5185\u3067\u66f8\u3044\u3066\u304a\u3051\u3070\u3001commit\u3084rollback\u3082\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u7d20\u6575\u4ed5\u69d8\n\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3057\u305f\u5834\u5408\u306e\u518d\u8a66\u884c\u3082transaction\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\n\u7d50\u8ad6\n\n\u3044\u3084\u30fc\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u7591\u3063\u3066\u3057\u307e\u3046\u3050\u3089\u3044\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\u306d\u30fb\u30fb\u30fb\u3002\n\n\\DB::transaction(function () use ($id) {\n    $model = \\Hoge\\Model::lockForUpdate()->find($id);\n    $model->name = '\u307b\u3052\u592a\u90ce';\n    $model->save();\n});\n\n# select for update\u3057\u305f\u3044\uff01\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u30b5\u30e9\u30c3\u3068transaction\u306e\u4e8b\u304c\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001select for update\u306f\u3069\u3046\u3059\u308b\u306e\u304b\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\n# laravel\u306etransaction\u306f\u306a\u3093\u3066\u7d20\u6575\u306a\u4ed5\u7d44\u307f\n* \u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3093\u3067\u9802\u3051\u308c\u3070\u308f\u304b\u308b\u3093\u3067\u3059\u304c\n * https://laravel.com/docs/5.3/database#database-transactions\n\n> You may use the transaction method on the DB facade to run a set of operations within a database transaction. If an exception is thrown within the transaction Closure, the transaction will automatically be rolled back. If the Closure executes successfully, the transaction will automatically be committed. You don't need to worry about manually rolling back or committing while using the transaction method:\n\n* transaction\u30e1\u30bd\u30c3\u30c9\u306eclosure\u5185\u3067\u66f8\u3044\u3066\u304a\u3051\u3070\u3001commit\u3084rollback\u3082\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u7d20\u6575\u4ed5\u69d8\n* \u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3057\u305f\u5834\u5408\u306e\u518d\u8a66\u884c\u3082transaction\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n# \u7d50\u8ad6\n* \u3044\u3084\u30fc\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u7591\u3063\u3066\u3057\u307e\u3046\u3050\u3089\u3044\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\u306d\u30fb\u30fb\u30fb\u3002\n\n```php\n\\DB::transaction(function () use ($id) {\n    $model = \\Hoge\\Model::lockForUpdate()->find($id);\n    $model->name = '\u307b\u3052\u592a\u90ce';\n    $model->save();\n});\n```\n", "tags": ["laravel", "Laravel5.3", "PHP7", "MySQL"]}