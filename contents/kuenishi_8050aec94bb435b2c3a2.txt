{"context": " More than 1 year has passed since last update.\n\nBEAM\n\nfrom https://gist.github.com/kuenishi/3183043\n\n\n\nassemble\n$ erlc -S test.erl\n\n\nregisters\n\n1024 X registers\n\nY register\n\nRegisters X, Y are represented like this:\n:5 bit tag: 27 bit value\nThe tags are 3=X, 4=Y, 5=r, 6=Literal\n\n\nCP\n\n\"Continuation Pointer\" - return address\n\n\n\nPC\n\n\"Program Counter\" - next instruction to be executed\n\n\n\n\nimportant instructions\n\ntest\nmove {move, Src, Dest}\n\n\n64 is the opcode for \"move\", 0x18000000 is the encoding of argument that means register {x, 0}\n\ngc_bif\n\ncall {call, Arity, {f, N}}\n\nset P=N, CP=Next\n\njumps to label N\n\narguments are stored in X0 ~ Xn\n\n\n\nreturn\n\ndoes PC=CP\n\nreturn value is stored in X0\n\n\nreceive\nallocate\n\ndeallocate {deallocate, N}\n\ncreate and remove stack frames.\nthere also exists {allocate_zero, Ny, Ng} - Ny Y registers\n\n\n\n\nother instructions\n\n\nlabel {label, N}\n\nNth label in the module\n\n\n\nfunction {function, Name, Arity, LabelID}\n\ndefines a function\n\n\n\nbif {bif, FuncAtom, {f, 0}, [], {x, 0}}\n\ncalls, ?\n\n\n\ngc_bif {gc_bif, '*', {f, A}, N1, [R1, R2, R3]}\n\njumps to a function named '*'\n\nmultiply R1 and R2, and set the result into R3. If any failure occurs jump to A. If GC is triggered include N1 X registers starting at X0 in the root set for GC.\n\n\n\nsend send.\n\nsends the data in X0 ?\n\n\n\nloop_rec {loop_rec, {f, N}, {x, 0}}\n\nreceive clause starts here, till loop_rec_end\n\n\n\nwait_timeout {wait_timeout, {f, N}, {integer, T}}\ntest {test, is_eq_exact, {f, N}, [{x,0}, {atom, foo}]}\nremove_message.\n\n\nmisc\n\nContext Switch\nNo other timing than when a call or receive instruction is executed, check a reduction counter.\n\nHow to disasemble\nbeam_lib:chunks(\"hw.beam\", [abstract_code]),\n\n\nReference\n\ninstruction set? genop.tab\n\nsource code - beam_emu.c\n\nerlang vm opcodes: beam_opcodes.erl\nJoe Armsgrong, Deconstructing the BEAM , 2012.\nThe Erlang BEAM Virtual Machine Specification\nFile format for Beam R5 and later\nThe Evolution of the Erlang VM\nA Guide to the Erlang Source\nErlang source code guide\nThe Erlang BEAM Virtual Machine Specification 1997.\nBEAM File Format (pdf)  2012.\nErlang on Xen: BEAM instruction set\n\nBEAM\n====\n\n- from https://gist.github.com/kuenishi/3183043\n\n\nassemble\n--------\n\n```\n$ erlc -S test.erl\n```\n\nregisters\n---------\n\n- 1024 ``X`` registers\n- ``Y`` register\n\nRegisters X, Y are represented like this:\n\n:5 bit tag: 27 bit value\n\nThe tags are 3=X, 4=Y, 5=r, 6=Literal\n\n- ``CP``\n\n - \"Continuation Pointer\" - return address\n\n- ``PC``\n\n - \"Program Counter\" - next instruction to be executed\n\nimportant instructions\n----------------------\n\n- test\n- move ``{move, Src, Dest}``\n\n64 is the opcode for \"move\", 0x18000000 is the encoding of argument that means register ``{x, 0}``\n\n- gc_bif\n- call ``{call, Arity, {f, N}}``\n\n - set ``P=N, CP=Next``\n - jumps to label ``N``\n - arguments are stored in X0 ~ Xn\n\n- return\n\n - does ``PC=CP``\n - return value is stored in X0\n\n- receive\n\n- allocate\n- deallocate ``{deallocate, N}``\n\n - create and remove stack frames.\n - there also exists ``{allocate_zero, Ny, Ng}`` - ``Ny`` Y registers\n\nother instructions\n------------------\n\n- label ``{label, N}``\n\n - Nth label in the module\n\n- function ``{function, Name, Arity, LabelID}``\n\n - defines a function\n\n- bif ``{bif, FuncAtom, {f, 0}, [], {x, 0}}``\n\n - calls, ?\n\n- gc_bif ``{gc_bif, '*', {f, A}, N1, [R1, R2, R3]}``\n\n - jumps to a function named ``'*'``\n - multiply R1 and R2, and set the result into R3. If any failure occurs jump to ``A``. If GC is triggered include N1 X registers starting at X0 in the root set for GC.\n\n- send ``send.``\n\n - sends the data in ``X0`` ?\n\n- loop_rec ``{loop_rec, {f, N}, {x, 0}}``\n\n - receive clause starts here, till ``loop_rec_end``\n\n- wait_timeout ``{wait_timeout, {f, N}, {integer, T}}``\n\n- test ``{test, is_eq_exact, {f, N}, [{x,0}, {atom, foo}]}``\n- ``remove_message.``\n\nmisc\n====\n\nContext Switch\n--------------\n\nNo other timing than when a ``call`` or ``receive`` instruction is executed, check a reduction counter.\n\nHow to disasemble\n-----------------\n\n```erl\nbeam_lib:chunks(\"hw.beam\", [abstract_code]),\n```\n\nReference\n---------\n\n- instruction set? [genop.tab](https://github.com/erlang/otp/blob/master/lib/compiler/src/genop.tab>)\n- source code - [beam_emu.c](https://github.com/erlang/otp/blob/master/erts/emulator/beam/beam_emu.c#L1103>)\n- [erlang vm opcodes: beam_opcodes.erl](https://github.com/mfoemmel/erlang-otp/blob/master/lib/compiler/src/beam_opcodes.erl>)\n- Joe Armsgrong, [Deconstructing the BEAM](http://erlang.org/pipermail/erlang-questions/2012-May/066524.html>) , 2012.\n- [The Erlang BEAM Virtual Machine Specification](http://www.cs-lab.org/historical_beam_instruction_set.html>)\n- [File format for Beam R5 and later](http://www.erlang.se/~bjorn/beam_file_format.html>)\n- [The Evolution of the Erlang VM](http://erlang.org/pipermail/erlang-questions/2012-May/066524.html>)\n\n- [A Guide to the Erlang Source](http://www.trapexit.org/A_Guide_To_The_Erlang_Source>)\n- [Erlang source code guide](http://stackoverflow.com/questions/3755506/erlang-source-code-guide>)\n\n- [The Erlang BEAM Virtual Machine Specification](http://www.cs-lab.org/historical_beam_instruction_set.html) 1997.\n- [BEAM File Format (pdf)](http://synrc.com/publications/cat/Functional%20Languages/Erlang/BEAM.pdf)  2012.\n- [Erlang on Xen: BEAM instruction set](http://erlangonxen.org/more/beam)\n", "tags": ["Erlang"]}