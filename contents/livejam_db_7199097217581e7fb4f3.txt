{"context": " More than 1 year has passed since last update.\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u7df4\u7fd2\u304c\u3066\u3089\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3053\u304c\u5909\u3060\u3088\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308c\u3070\u3001\u662f\u975e\u805e\u304b\u305b\u3066\u304f\u3060\u3055\u3044\u3002\n\n\nsongclip.sh\n#!/bin/bash\nset -eu\n\n# \u30b3\u30de\u30f3\u30c9\u540d\u3092\u53d6\u5f97\ndeclare -r COMMAND_NAME=$(basename \"$0\")\n\n# \u30b9\u30c8\u30ea\u30fc\u30e0\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b\u30d5\u30a1\u30a4\u30eb\ndeclare -r SONG_CLIP_FILE=\"$HOME/Dropbox/document/songclip.txt\"\n\n# iTunes \u304b\u3089\u30b9\u30c8\u30ea\u30fc\u30e0\u60c5\u5831\u3092\u53d6\u5f97\ndeclare -r SONG_INFO=\"$(osascript -e '\n  if application \"iTunes\" is running\n    tell application \"iTunes\" to current stream title\n  end if\n')\"\n\n# \u30b3\u30de\u30f3\u30c9\u306e\u8aac\u660e\nusage() {\n  cat << EOD\nUsage: $COMMAND_NAME <subcommand>\n  now       Display a current stream title\n  list      Display the clipped song list\n  delete    Delete the song info (only one line)\n  purge     Purge the contents of existing file (delete all line)\n  help      Display the Usage\nEOD\n}\n\n# \"missing value\" \u304b \"\" \u306a\u3089\u3070\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\ncheck_stream() {\n  if [ \"$SONG_INFO\" = \"missing value\" -o -z \"$SONG_INFO\" ]; then\n    echo \"Error: Can't retrieve the cunrent stream title.\"\n    exit 1\n  fi\n}\n\n# \u5f15\u6570\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\nif [ \"$#\" -eq 0 ]; then\n  # \u73fe\u5728\u6d41\u308c\u3066\u3044\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u60c5\u5831\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\n  check_stream\n  if grep -qs \"$SONG_INFO\" \"$SONG_CLIP_FILE\"; then\n    echo \"Now Playing the stream title is already exists.\"\n    exit 1\n  fi\n  echo \"$SONG_INFO\" >> \"$SONG_CLIP_FILE\"\n  echo \"Clipped: $SONG_INFO\"\n  exit 0\nfi\n\n# \u7b2c\u4e00\u5f15\u6570\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u5206\u3051\u308b\ncase \"$1\" in\n  \"now\")\n    # \u73fe\u5728\u6d41\u308c\u3066\u3044\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u60c5\u5831\u3092\u8868\u793a\n    check_stream\n    echo \"Now Playing: $SONG_INFO\"\n    ;;\n\n  \"list\")\n    # \u4fdd\u5b58\u3057\u305f\u60c5\u5831\u3092\u8868\u793a\n    if [ ! -e \"$SONG_CLIP_FILE\" ]; then\n      echo \"$SONG_CLIP_FILE: No such file.\"\n      exit 1\n    fi\n    cat -n \"$SONG_CLIP_FILE\"\n    ;;\n\n  \"delete\")\n    # \u5165\u529b\u3055\u308c\u305f\u756a\u53f7\u306e\u884c\u3092\u524a\u9664\n    echo -n \"Please enter the line number: \"\n    read line_number\n    expr \"$line_number\" + 1 >/dev/null 2>&1 | true\n    if [ \"${PIPESTATUS[0]}\" -lt 2 ]; then\n      file_rows=$(awk 'END { print NR }' \"$SONG_CLIP_FILE\")\n      if [ \"$line_number\" -ne 0 -a \"$line_number\" -le \"$file_rows\" ]; then\n        sed -i \"\" -e \"${line_number}d\" \"$SONG_CLIP_FILE\"\n        echo \"Deleted a line.\"\n        exit 0\n      fi\n    fi\n    echo \"There is no such line. Please try again.\"\n    exit 1\n    ;;\n\n  \"purge\")\n    # \u30d5\u30a1\u30a4\u30eb\u3092\u7a7a\u306b\u3059\u308b\n    echo -n \"Are you sure you want to empty the file? (yes|no): \"\n    read purge_answer\n    if [ \"$purge_answer\" = \"yes\" ]; then\n      echo -n > \"$SONG_CLIP_FILE\"\n      echo -n \".\" && sleep 1 && echo -n \".\" && sleep 1 && echo -n \". \"\n      echo \"Purged the contents of the file.\"\n    fi\n    ;;\n\n  *)\n    # Usage \u3092\u8868\u793a\n    usage\n    exit 1\nesac\n\nexit 0\n\n\n\u4e0a\u8a18\u306f\u3084\u3084\u53e4\u3044\u3082\u306e\u3067\u3059\u304c\u3001\u65b0\u3057\u3044\u3082\u306e\u3092 GitHub \u306b\u30a2\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\nhttps://github.com/jamband/songclip\n\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u7df4\u7fd2\u304c\u3066\u3089\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3053\u304c\u5909\u3060\u3088\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308c\u3070\u3001\u662f\u975e\u805e\u304b\u305b\u3066\u304f\u3060\u3055\u3044\u3002\n\n![songclip.gif](https://qiita-image-store.s3.amazonaws.com/0/11524/41962c75-30ce-df92-cc99-ada03a817eac.gif)\n\n~~~sh:songclip.sh\n#!/bin/bash\nset -eu\n\n# \u30b3\u30de\u30f3\u30c9\u540d\u3092\u53d6\u5f97\ndeclare -r COMMAND_NAME=$(basename \"$0\")\n\n# \u30b9\u30c8\u30ea\u30fc\u30e0\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b\u30d5\u30a1\u30a4\u30eb\ndeclare -r SONG_CLIP_FILE=\"$HOME/Dropbox/document/songclip.txt\"\n\n# iTunes \u304b\u3089\u30b9\u30c8\u30ea\u30fc\u30e0\u60c5\u5831\u3092\u53d6\u5f97\ndeclare -r SONG_INFO=\"$(osascript -e '\n  if application \"iTunes\" is running\n    tell application \"iTunes\" to current stream title\n  end if\n')\"\n\n# \u30b3\u30de\u30f3\u30c9\u306e\u8aac\u660e\nusage() {\n  cat << EOD\nUsage: $COMMAND_NAME <subcommand>\n  now       Display a current stream title\n  list      Display the clipped song list\n  delete    Delete the song info (only one line)\n  purge     Purge the contents of existing file (delete all line)\n  help      Display the Usage\nEOD\n}\n\n# \"missing value\" \u304b \"\" \u306a\u3089\u3070\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\ncheck_stream() {\n  if [ \"$SONG_INFO\" = \"missing value\" -o -z \"$SONG_INFO\" ]; then\n    echo \"Error: Can't retrieve the cunrent stream title.\"\n    exit 1\n  fi\n}\n\n# \u5f15\u6570\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\nif [ \"$#\" -eq 0 ]; then\n  # \u73fe\u5728\u6d41\u308c\u3066\u3044\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u60c5\u5831\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\n  check_stream\n  if grep -qs \"$SONG_INFO\" \"$SONG_CLIP_FILE\"; then\n    echo \"Now Playing the stream title is already exists.\"\n    exit 1\n  fi\n  echo \"$SONG_INFO\" >> \"$SONG_CLIP_FILE\"\n  echo \"Clipped: $SONG_INFO\"\n  exit 0\nfi\n\n# \u7b2c\u4e00\u5f15\u6570\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u5206\u3051\u308b\ncase \"$1\" in\n  \"now\")\n    # \u73fe\u5728\u6d41\u308c\u3066\u3044\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u60c5\u5831\u3092\u8868\u793a\n    check_stream\n    echo \"Now Playing: $SONG_INFO\"\n    ;;\n\n  \"list\")\n    # \u4fdd\u5b58\u3057\u305f\u60c5\u5831\u3092\u8868\u793a\n    if [ ! -e \"$SONG_CLIP_FILE\" ]; then\n      echo \"$SONG_CLIP_FILE: No such file.\"\n      exit 1\n    fi\n    cat -n \"$SONG_CLIP_FILE\"\n    ;;\n\n  \"delete\")\n    # \u5165\u529b\u3055\u308c\u305f\u756a\u53f7\u306e\u884c\u3092\u524a\u9664\n    echo -n \"Please enter the line number: \"\n    read line_number\n    expr \"$line_number\" + 1 >/dev/null 2>&1 | true\n    if [ \"${PIPESTATUS[0]}\" -lt 2 ]; then\n      file_rows=$(awk 'END { print NR }' \"$SONG_CLIP_FILE\")\n      if [ \"$line_number\" -ne 0 -a \"$line_number\" -le \"$file_rows\" ]; then\n        sed -i \"\" -e \"${line_number}d\" \"$SONG_CLIP_FILE\"\n        echo \"Deleted a line.\"\n        exit 0\n      fi\n    fi\n    echo \"There is no such line. Please try again.\"\n    exit 1\n    ;;\n\n  \"purge\")\n    # \u30d5\u30a1\u30a4\u30eb\u3092\u7a7a\u306b\u3059\u308b\n    echo -n \"Are you sure you want to empty the file? (yes|no): \"\n    read purge_answer\n    if [ \"$purge_answer\" = \"yes\" ]; then\n      echo -n > \"$SONG_CLIP_FILE\"\n      echo -n \".\" && sleep 1 && echo -n \".\" && sleep 1 && echo -n \". \"\n      echo \"Purged the contents of the file.\"\n    fi\n    ;;\n\n  *)\n    # Usage \u3092\u8868\u793a\n    usage\n    exit 1\nesac\n\nexit 0\n~~~\n\n\u4e0a\u8a18\u306f\u3084\u3084\u53e4\u3044\u3082\u306e\u3067\u3059\u304c\u3001\u65b0\u3057\u3044\u3082\u306e\u3092 GitHub \u306b\u30a2\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\n[https://github.com/jamband/songclip](https://github.com/jamband/songclip)\n", "tags": ["ShellScript", "Bash", "AppleScript"]}