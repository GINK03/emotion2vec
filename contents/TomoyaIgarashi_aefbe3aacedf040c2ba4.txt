{"context": " More than 1 year has passed since last update.\n\n\u74b0\u5883\n\nMac OS X Version 10.10.2\nScala 2.11.5\nsbt 0.13.7\n\n\n\u6e96\u5099\n/root/to/project/path\n   |-- build.sbt\n   |-- src\n   |    |-- main\n   |    |    |-- scala\n   |    |    |    |-- FaultTolerance.scala\n   |    |-- test\n   |    |    |-- scala\n   |    |    |    |-- FaultToleranceSpec.scala\n\n\nbuild.sbt\nname := \"akka\"                                                                                                                                                    \n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.5\"\n\nscalacOptions ++= Seq(\"-Xlint\", \"-deprecation\", \"-unchecked\", \"-feature\", \"-Xelide-below\", \"ALL\")\n\nlibraryDependencies ++= Seq(\n  \"com.typesafe.akka\" %% \"akka-actor\" % \"2.3.9\",\n  \"com.typesafe.akka\" %% \"akka-testkit\" % \"2.3.9\",\n  \"org.specs2\" %% \"specs2\" % \"2.4.1\"\n)\n\n\n\n\u5b9f\u88c5\n\nsrc/main/scala/FaultTolerance.scala\nimport akka.actor.{Actor, OneForOneStrategy, Props}\nimport akka.actor.SupervisorStrategy._\n\nimport scala.concurrent.duration._\nimport scala.language.postfixOps\n\nclass Supervisor extends Actor {\n  override val supervisorStrategy =\n    OneForOneStrategy(maxNrOfRetries = 10, withinTimeRange = 1 minute) {\n      case _: ArithmeticException      => Resume\n      case _: NullPointerException     => Restart\n      case _: IllegalArgumentException => Stop\n      case _: Exception                => Escalate\n    }\n\n  def receive = {\n    case p: Props => sender ! context.actorOf(p)\n  }\n}\n\nclass Child extends Actor {\n\n  var state = 0\n  def receive = {\n    case ex: Exception => throw ex\n    case x: Int => state = x\n    case \"get\" => sender ! state\n  }\n}\n\n\n\nsrc/test/scala/FaultToleranceSpec.scala\nimport akka.actor.{Terminated, ActorRef, ActorSystem, Props}\nimport akka.testkit._\n\nimport org.specs2.mutable.{After, Specification}\nimport org.specs2.time.NoTimeConversions\n\nimport scala.concurrent.duration._\n\n/* A tiny class that can be used as a Specs2 'context'. */\nabstract class AkkaTestkitSpecs2Support extends TestKit(ActorSystem()) with After with ImplicitSender {\n  // make sure we shut down the actor system after all tests have run\n  def after = system.shutdown()\n}\n\nclass FaultToleranceSpec extends Specification with NoTimeConversions {\n  // forces all tests to be run sequentially\n  sequential\n\n  \"FaultTolerance\" should {\n    \"Resume & Restart\" in new AkkaTestkitSpecs2Support {\n      within(1 second) {\n        val supervisor = system.actorOf(Props[Supervisor], \"supervisor\")\n        supervisor ! Props[Child]\n        val child = expectMsgType[ActorRef]\n        child ! 42\n        child ! new ArithmeticException\n        child ! \"get\"\n        val r1 = expectMsg(42)\n        child ! new NullPointerException\n        child ! \"get\"\n        val r2 = expectMsg(0)\n        (r1, r2) must_==((42, 0): (Int, Int))\n      }\n    }\n\n    \"Stop\" in new AkkaTestkitSpecs2Support {\n      within(1 second) {\n        val supervisor = system.actorOf(Props[Supervisor], \"supervisor\")\n        supervisor ! Props[Child]\n        val child = expectMsgType[ActorRef]\n        watch(child)\n        child ! new IllegalArgumentException\n        val r = expectMsgPF() { case Terminated(`child`) => \"terminated\" }\n        r must_== \"terminated\"\n      }\n    }\n\n    \"Escalate\" in new AkkaTestkitSpecs2Support {\n      within(1 second) {\n        val supervisor = system.actorOf(Props[Supervisor], \"supervisor\")\n        supervisor ! Props[Child]\n        val child = expectMsgType[ActorRef]\n        watch(child)\n        child ! \"get\"\n        val r1 = expectMsg(0)\n        child ! new Exception(\"CRASH\")\n        val r2 = expectMsgPF() {\n          case t @ Terminated(`child`) if t.existenceConfirmed => \"terminated\"\n        }\n        (r1, r2) must_== ((0, \"terminated\"): (Int, String))\n      }\n    }\n  }\n}\n\n\n\n\u5b9f\u884c\n$ sbt '~test-only FaultToleranceSpec'\n\n\n\u53c2\u8003\nhttp://doc.akka.io/docs/akka/2.3.9/scala/fault-tolerance.html\nhttp://blog.xebia.com/2012/10/01/testing-akka-with-specs2/\n\n## \u74b0\u5883\n* Mac OS X Version 10.10.2\n* Scala 2.11.5\n* sbt 0.13.7\n\n## \u6e96\u5099\n\n```tree\n/root/to/project/path\n   |-- build.sbt\n   |-- src\n   |    |-- main\n   |    |    |-- scala\n   |    |    |    |-- FaultTolerance.scala\n   |    |-- test\n   |    |    |-- scala\n   |    |    |    |-- FaultToleranceSpec.scala\n```\n\n```build.sbt\nname := \"akka\"                                                                                                                                                    \n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.5\"\n\nscalacOptions ++= Seq(\"-Xlint\", \"-deprecation\", \"-unchecked\", \"-feature\", \"-Xelide-below\", \"ALL\")\n\nlibraryDependencies ++= Seq(\n  \"com.typesafe.akka\" %% \"akka-actor\" % \"2.3.9\",\n  \"com.typesafe.akka\" %% \"akka-testkit\" % \"2.3.9\",\n  \"org.specs2\" %% \"specs2\" % \"2.4.1\"\n)\n```\n\n## \u5b9f\u88c5\n```src/main/scala/FaultTolerance.scala\nimport akka.actor.{Actor, OneForOneStrategy, Props}\nimport akka.actor.SupervisorStrategy._\n\nimport scala.concurrent.duration._\nimport scala.language.postfixOps\n\nclass Supervisor extends Actor {\n  override val supervisorStrategy =\n    OneForOneStrategy(maxNrOfRetries = 10, withinTimeRange = 1 minute) {\n      case _: ArithmeticException      => Resume\n      case _: NullPointerException     => Restart\n      case _: IllegalArgumentException => Stop\n      case _: Exception                => Escalate\n    }\n\n  def receive = {\n    case p: Props => sender ! context.actorOf(p)\n  }\n}\n\nclass Child extends Actor {\n\n  var state = 0\n  def receive = {\n    case ex: Exception => throw ex\n    case x: Int => state = x\n    case \"get\" => sender ! state\n  }\n}\n```\n\n```src/test/scala/FaultToleranceSpec.scala\nimport akka.actor.{Terminated, ActorRef, ActorSystem, Props}\nimport akka.testkit._\n\nimport org.specs2.mutable.{After, Specification}\nimport org.specs2.time.NoTimeConversions\n\nimport scala.concurrent.duration._\n\n/* A tiny class that can be used as a Specs2 'context'. */\nabstract class AkkaTestkitSpecs2Support extends TestKit(ActorSystem()) with After with ImplicitSender {\n  // make sure we shut down the actor system after all tests have run\n  def after = system.shutdown()\n}\n\nclass FaultToleranceSpec extends Specification with NoTimeConversions {\n  // forces all tests to be run sequentially\n  sequential\n\n  \"FaultTolerance\" should {\n    \"Resume & Restart\" in new AkkaTestkitSpecs2Support {\n      within(1 second) {\n        val supervisor = system.actorOf(Props[Supervisor], \"supervisor\")\n        supervisor ! Props[Child]\n        val child = expectMsgType[ActorRef]\n        child ! 42\n        child ! new ArithmeticException\n        child ! \"get\"\n        val r1 = expectMsg(42)\n        child ! new NullPointerException\n        child ! \"get\"\n        val r2 = expectMsg(0)\n        (r1, r2) must_==((42, 0): (Int, Int))\n      }\n    }\n\n    \"Stop\" in new AkkaTestkitSpecs2Support {\n      within(1 second) {\n        val supervisor = system.actorOf(Props[Supervisor], \"supervisor\")\n        supervisor ! Props[Child]\n        val child = expectMsgType[ActorRef]\n        watch(child)\n        child ! new IllegalArgumentException\n        val r = expectMsgPF() { case Terminated(`child`) => \"terminated\" }\n        r must_== \"terminated\"\n      }\n    }\n\n    \"Escalate\" in new AkkaTestkitSpecs2Support {\n      within(1 second) {\n        val supervisor = system.actorOf(Props[Supervisor], \"supervisor\")\n        supervisor ! Props[Child]\n        val child = expectMsgType[ActorRef]\n        watch(child)\n        child ! \"get\"\n        val r1 = expectMsg(0)\n        child ! new Exception(\"CRASH\")\n        val r2 = expectMsgPF() {\n          case t @ Terminated(`child`) if t.existenceConfirmed => \"terminated\"\n        }\n        (r1, r2) must_== ((0, \"terminated\"): (Int, String))\n      }\n    }\n  }\n}\n```\n\n## \u5b9f\u884c\n\n```shell\n$ sbt '~test-only FaultToleranceSpec'\n```\n\n## \u53c2\u8003\n\nhttp://doc.akka.io/docs/akka/2.3.9/scala/fault-tolerance.html\nhttp://blog.xebia.com/2012/10/01/testing-akka-with-specs2/\n", "tags": ["AkkaTestKit2.3.9", "Akka2.3.9", "Scala2.11.5"]}