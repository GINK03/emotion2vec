{"context": "\n\nTheano\u306b\u304a\u3051\u308b\u30ad\u30e3\u30b9\u30c8\ntheano\u306f\u578b\u4ed8\u304c\u975e\u5e38\u306b\u53b3\u683c\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\npython\u306e\u3088\u3046\u306a\u5f37\u529b\u306a\u578b\u63a8\u8ad6\u306f\u306a\u3044\u306e\u3067\u3001\u5f53\u7136\u30ad\u30e3\u30b9\u30c8\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305acast\u3057\u3066\u307f\u308b\ntheano\u306e\u30ad\u30e3\u30b9\u30c8\u306ftheano.tensor.cast()\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u65e9\u901fcast\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306ffloat64\u578b\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u884c\u5217\u3092\u3001int32\u578b\u306b\u5909\u63db\u3057\u307e\u3059\u3002\nimport theano.tensor as T\nx = T.matrix()\nx_as_int = T.cast(x, 'int32')\n\ntype(x), type(x_as_int)\n\n\n\u51fa\u529b\u7d50\u679c\n(theano.tensor.var.TensorVariable, theano.tensor.var.TensorVariable)\n\n\n\n\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3066\u306a\u3044\uff1f\n\u4e0a\u306e\u7d50\u679c\u3067\u306f\u3069\u3061\u3089\u3082\u540c\u3058\u578b\uff08TensorVariable\uff09\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306fTheano\u306e\u4ed5\u69d8\u3067\u3001\u5024\u3067\u306f\u306a\u304f\u30b7\u30f3\u30dc\u30eb\u3092\u5909\u6570\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\u30b7\u30f3\u30dc\u30eb\u306e\u4e2d\u8eab\u306e\u578b\u3092\u898b\u308b\u306b\u306f\u3001theano.printing.debugprint()\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nx\u306e\u578b\nimport theano\ntheano.printing.debugprint(x)\n\n\n\n\u51fa\u529b\u7d50\u679c\n<TensorType(float64, matrix)> [id A]\n\n\n\nx_as_int\u306e\u578b\ntheano.printing.debugprint(x_as_int)\n\n\n\n\u51fa\u529b\u7d50\u679c\nElemwise{Cast{int32}} [id A] ''   \n |<TensorType(float64, matrix)> [id B]\n\n\n\u306a\u308b\u307b\u3069\u3001\u3082\u3068\u3082\u3068float64\u578b\u3060\u3063\u305f\u306e\u304c\u3001x_as_int\u3067\u306fint32\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3066\u305d\u3046\u3067\u3059\u3002\n\u5b9f\u969b\u306b\u5024\u3092\u5165\u308c\u3066\u307f\u3066\u3001\u6319\u52d5\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u95a2\u6570\u3092\u901a\u3057\u3066\u578b\u3092\u78ba\u8a8d\n\u30b7\u30f3\u30dc\u30eb\u306b\u5024\u3092\u5165\u308c\u308b\u306b\u306f\u3001\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30b7\u30f3\u30dc\u30eb\u3092\u7528\u3044\u305f\u6570\u5f0f\u3092\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3001\u305d\u306e\u95a2\u6570\u306b\u5024\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u3001\u6570\u5f0f\u306e\u51e6\u7406\u7d50\u679c\u304c\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n\u3053\u306e\u969b\u3001\u5165\u529b\u5024\u306e\u578b\u304c\u30b7\u30f3\u30dc\u30eb\u306e\u578b\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\n\u4e0d\u9069\u306a\u578b\u3092\u5165\u308c\u305f\u5834\u5408\u306b\u306f\u30a8\u30e9\u30fc\u3092\u5410\u304f\u306e\u3067\u3001\nint32\u578b\u306e\u30b7\u30f3\u30dc\u30ebx_as_int\u3092\u5165\u529b\u306b\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001\u5c0f\u6570\u3092\u5165\u529b\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u95a2\u6570\u306e\u5b9a\u7fa9\nimport numpy as np\n\nmat = np.array([[1.0, 0.0], [0.0, 1.0]], dtype=\"float64\")\nmat_int = np.array([[1, 0], [0, 1]], dtype=\"int32\")\n\ny = x * 2\nf = theano.function(inputs=[x], outputs=y)\n\ny_as_int = x_as_int * 2\nf_as_int = theano.function(inputs=[x_as_int], outputs=y_as_int)\n\n\n\nf(x)\nf(mat)\n\n\n\n\u5b9f\u884c\u7d50\u679c\narray([[ 2.,  0.],\n       [ 0.,  2.]])\n\n\n\nf(x_as_int)\nf(mat_int)\n\n\n\n\u5b9f\u884c\u7d50\u679c\narray([[ 2.,  0.],\n       [ 0.,  2.]])\n\n\n\nf_as_int(x)\nf_as_int(mat)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-56-31692f0163e9> in <module>()\n----> 1 f_as_int(mat)\n\n/home/ubuntu/anaconda3/lib/python3.5/site-packages/theano/compile/function_module.py in __call__(self, *args, **kwargs)\n    786                         s.storage[0] = s.type.filter(\n    787                             arg, strict=s.strict,\n--> 788                             allow_downcast=s.allow_downcast)\n    789 \n    790                     except Exception as e:\n\n/home/ubuntu/anaconda3/lib/python3.5/site-packages/theano/tensor/type.py in filter(self, data, strict, allow_downcast)\n    138                             '\"function\".'\n    139                             % (self, data.dtype, self.dtype))\n--> 140                         raise TypeError(err_msg, data)\n    141                 elif (allow_downcast is None and\n    142                         type(data) is float and\n\nTypeError: ('Bad input argument to theano function with name \"<ipython-input-54-50af382d0dd4>:2\" at index 0 (0-based)', 'TensorType(int32, matrix) cannot store a value of dtype float64 without risking loss of precision. If you do not mind this loss, you can: 1) explicitly cast your data to int32, or 2) set \"allow_input_downcast=True\" when calling \"function\".', array([[ 1.,  0.],\n       [ 0.,  1.]]))\n\n\n\nf_as_int(x_as_int)\narray([[2, 0],\n       [0, 2]], dtype=int32)\n\n\n\u4e88\u60f3\u901a\u308a\u306b\u3001\u5165\u529b\u30b7\u30f3\u30dc\u30eb\u306bint32\u578b\u3092\u6307\u5b9a\u3057\u306a\u304c\u3089\u5165\u529b\u5024\u3092float64\u578b\u3068\u3057\u305ff_as_int(mat)\u3067\u306f\u30a8\u30e9\u30fc\u3092\u5410\u304d\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067\u7121\u4e8b\u306btheano\u306b\u304a\u3051\u308b\u30ad\u30e3\u30b9\u30c8\u306e\u52d5\u304d\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n# Theano\u306b\u304a\u3051\u308b\u30ad\u30e3\u30b9\u30c8\n\ntheano\u306f\u578b\u4ed8\u304c\u975e\u5e38\u306b\u53b3\u683c\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\npython\u306e\u3088\u3046\u306a\u5f37\u529b\u306a\u578b\u63a8\u8ad6\u306f\u306a\u3044\u306e\u3067\u3001\u5f53\u7136\u30ad\u30e3\u30b9\u30c8\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u3068\u308a\u3042\u3048\u305acast\u3057\u3066\u307f\u308b\n\ntheano\u306e\u30ad\u30e3\u30b9\u30c8\u306ftheano.tensor.cast()\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u65e9\u901fcast\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306ffloat64\u578b\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u884c\u5217\u3092\u3001int32\u578b\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n```py3:\nimport theano.tensor as T\nx = T.matrix()\nx_as_int = T.cast(x, 'int32')\n\ntype(x), type(x_as_int)\n```\n\n```py3:\u51fa\u529b\u7d50\u679c\n(theano.tensor.var.TensorVariable, theano.tensor.var.TensorVariable)\n```\n\n# \u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3066\u306a\u3044\uff1f\n\n\u4e0a\u306e\u7d50\u679c\u3067\u306f\u3069\u3061\u3089\u3082\u540c\u3058\u578b\uff08TensorVariable\uff09\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u306fTheano\u306e\u4ed5\u69d8\u3067\u3001\u5024\u3067\u306f\u306a\u304f\u30b7\u30f3\u30dc\u30eb\u3092\u5909\u6570\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u30b7\u30f3\u30dc\u30eb\u306e\u4e2d\u8eab\u306e\u578b\u3092\u898b\u308b\u306b\u306f\u3001theano.printing.debugprint()\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```py3:x\u306e\u578b\nimport theano\ntheano.printing.debugprint(x)\n```\n\n```py3:\u51fa\u529b\u7d50\u679c\n<TensorType(float64, matrix)> [id A]\n```\n\n```py3:x_as_int\u306e\u578b\ntheano.printing.debugprint(x_as_int)\n```\n\n```py3:\u51fa\u529b\u7d50\u679c\nElemwise{Cast{int32}} [id A] ''   \n |<TensorType(float64, matrix)> [id B]\n```\n\n\u306a\u308b\u307b\u3069\u3001\u3082\u3068\u3082\u3068float64\u578b\u3060\u3063\u305f\u306e\u304c\u3001x_as_int\u3067\u306fint32\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3066\u305d\u3046\u3067\u3059\u3002\n\n\u5b9f\u969b\u306b\u5024\u3092\u5165\u308c\u3066\u307f\u3066\u3001\u6319\u52d5\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n# \u95a2\u6570\u3092\u901a\u3057\u3066\u578b\u3092\u78ba\u8a8d\n\n\u30b7\u30f3\u30dc\u30eb\u306b\u5024\u3092\u5165\u308c\u308b\u306b\u306f\u3001\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b7\u30f3\u30dc\u30eb\u3092\u7528\u3044\u305f\u6570\u5f0f\u3092\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3001\u305d\u306e\u95a2\u6570\u306b\u5024\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u3001\u6570\u5f0f\u306e\u51e6\u7406\u7d50\u679c\u304c\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u969b\u3001\u5165\u529b\u5024\u306e\u578b\u304c\u30b7\u30f3\u30dc\u30eb\u306e\u578b\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\n\n\u4e0d\u9069\u306a\u578b\u3092\u5165\u308c\u305f\u5834\u5408\u306b\u306f\u30a8\u30e9\u30fc\u3092\u5410\u304f\u306e\u3067\u3001\n\nint32\u578b\u306e\u30b7\u30f3\u30dc\u30ebx_as_int\u3092\u5165\u529b\u306b\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001\u5c0f\u6570\u3092\u5165\u529b\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n```py3:\u95a2\u6570\u306e\u5b9a\u7fa9\nimport numpy as np\n\nmat = np.array([[1.0, 0.0], [0.0, 1.0]], dtype=\"float64\")\nmat_int = np.array([[1, 0], [0, 1]], dtype=\"int32\")\n\ny = x * 2\nf = theano.function(inputs=[x], outputs=y)\n\ny_as_int = x_as_int * 2\nf_as_int = theano.function(inputs=[x_as_int], outputs=y_as_int)\n```\n\n```py3:f(x)\nf(mat)\n```\n\n```py3:\u5b9f\u884c\u7d50\u679c\narray([[ 2.,  0.],\n       [ 0.,  2.]])\n```\n\n```py3:f(x_as_int)\nf(mat_int)\n```\n\n```py3:\u5b9f\u884c\u7d50\u679c\narray([[ 2.,  0.],\n       [ 0.,  2.]])\n```\n\n```py3:f_as_int(x)\nf_as_int(mat)\n```\n\n```py3:\u5b9f\u884c\u7d50\u679c\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-56-31692f0163e9> in <module>()\n----> 1 f_as_int(mat)\n\n/home/ubuntu/anaconda3/lib/python3.5/site-packages/theano/compile/function_module.py in __call__(self, *args, **kwargs)\n    786                         s.storage[0] = s.type.filter(\n    787                             arg, strict=s.strict,\n--> 788                             allow_downcast=s.allow_downcast)\n    789 \n    790                     except Exception as e:\n\n/home/ubuntu/anaconda3/lib/python3.5/site-packages/theano/tensor/type.py in filter(self, data, strict, allow_downcast)\n    138                             '\"function\".'\n    139                             % (self, data.dtype, self.dtype))\n--> 140                         raise TypeError(err_msg, data)\n    141                 elif (allow_downcast is None and\n    142                         type(data) is float and\n\nTypeError: ('Bad input argument to theano function with name \"<ipython-input-54-50af382d0dd4>:2\" at index 0 (0-based)', 'TensorType(int32, matrix) cannot store a value of dtype float64 without risking loss of precision. If you do not mind this loss, you can: 1) explicitly cast your data to int32, or 2) set \"allow_input_downcast=True\" when calling \"function\".', array([[ 1.,  0.],\n       [ 0.,  1.]]))\n```\n\n```py3:f_as_int(x_as_int)\narray([[2, 0],\n       [0, 2]], dtype=int32)\n```\n\n\u4e88\u60f3\u901a\u308a\u306b\u3001\u5165\u529b\u30b7\u30f3\u30dc\u30eb\u306bint32\u578b\u3092\u6307\u5b9a\u3057\u306a\u304c\u3089\u5165\u529b\u5024\u3092float64\u578b\u3068\u3057\u305ff_as_int(mat)\u3067\u306f\u30a8\u30e9\u30fc\u3092\u5410\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3067\u7121\u4e8b\u306btheano\u306b\u304a\u3051\u308b\u30ad\u30e3\u30b9\u30c8\u306e\u52d5\u304d\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n", "tags": ["Python", "Theano"]}