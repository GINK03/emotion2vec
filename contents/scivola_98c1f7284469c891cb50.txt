{"tags": ["rust", "\u30bb\u30eb\u30e9\u30fc\u30aa\u30fc\u30c8\u30de\u30c8\u30f3"], "context": "\u3075\u3060\u3093 Ruby \u3070\u304b\u308a\u4f7f\u3063\u3066\u3044\u308b\u79c1\u304c Rust \u3067\u4f55\u304b\u4f5c\u3063\u3066\u307f\u305f\u304f\u306a\u3063\u305f\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6761\u4ef6\u3092\u6e80\u305f\u3059\u984c\u6750\u3092\u8003\u3048\u305f\u3002\n\nRuby \u3067\u3084\u308b\u306b\u306f\u3061\u3087\u3063\u3068\u8f9b\u3044\u8a08\u7b97\u91cf\u304c\u3042\u308b\u3002\n\u7d50\u679c\u304c\u76ee\u3067\u898b\u3048\u3066\u300c\u306a\u3093\u304b\u4f5c\u3063\u305f\u300d\u6c17\u304c\u3059\u308b\u3002\nRust \u3092\u3061\u3087\u3063\u3074\u308a\u52c9\u5f37\u3057\u305f\u3060\u3051\u306e\u79c1\u306b\u3082\u3069\u3046\u306b\u304b\u4f5c\u308c\u305d\u3046\u3002\n\n\u300c\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\u300d\u3092\u4f5c\u308d\u3046\u3068\u601d\u3044\u3064\u3044\u305f\u3002\n\n\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\u3068\u306f\n\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\uff08\u306e\u6982\u5ff5\u304a\u3088\u3073\u305d\u3046\u3044\u3046\u8a33\u8a9e\uff09\u306f\u6b21\u306e\u6587\u732e\u3067\u7d39\u4ecb\u3055\u308c\u305f\u3082\u306e\u3002\n\u300e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u30ec\u30af\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3II\u3000\u904a\u3073\u306e\u63a2\u7d22\u300f\u5225\u518a\u30b5\u30a4\u30a8\u30f3\u30b992\uff0cA.K. \u30c7\u30e5\u30fc\u30c9\u30cb\u30fc \u8457\uff0c\u65e5\u7d4c\u30b5\u30a4\u30a8\u30f3\u30b9\uff081989\uff09\n\u3044\u308f\u3086\u308b\u30bb\u30eb\u30e9\u30fc\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306e\u4e00\u7a2e\u3002\n\u7e26\u6a2a\u306b\u4e26\u3093\u3060\u30bb\u30eb\u306e\u305d\u308c\u305e\u308c\u304c\u6574\u6570\u5024\u3092\u6301\u3061\uff0c\u6642\u523b\u3068\u3068\u3082\u306b\u5909\u5316\u3057\u3066\u3044\u304f\u3002\n\u3042\u308b\u30bb\u30eb\u306e\u6b21\u306e\u6642\u523b\u306e\u5024\u306f\u5468\u56f2\u306e\u30bb\u30eb\u306e\u5024\u3068\u306e\u517c\u306d\u5408\u3044\u3067\u6c7a\u307e\u308b\u3002\n\u5177\u4f53\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u7701\u7565\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u4e09\u3064\u3042\u3063\u3066\uff0c\u305d\u308c\u3092\u5909\u3048\u308b\u3068\u63a8\u79fb\u306e\u69d8\u5b50\u304c\u5287\u7684\u306b\u5909\u308f\u3063\u305f\u308a\u3059\u308b\u3002\n\u30d9\u30ed\u30a6\u30bd\u30d5\u30fb\u30b8\u30e3\u30dc\u30c1\u30f3\u30b9\u30ad\u30fc\u53cd\u5fdc\uff08BZ \u53cd\u5fdc\uff09\u3068\u3044\u3046\uff0c\u4e8c\u6b21\u5143\u7684\u306b\u304d\u308c\u3044\u306a\u6a21\u69d8\u304c\u5f62\u6210\u3055\u308c\u308b\u5316\u5b66\u53cd\u5fdc\u306e\u30b7\u30df\u30e5\u30fc\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8003\u6848\u3055\u308c\u305f\u3089\u3057\u3044\u3002\n\u203b\u7d50\u679c\u304c\u3059\u3050\u898b\u305f\u3044\u65b9\u306f\u300c\u3067\u304d\u305f\u300d\u306e\u7bc0\u306b\u98db\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\u958b\u767a\u65b9\u91dd\n\u30bb\u30eb\u30e9\u30fc\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306e\u8a08\u7b97\u306f\u304b\u306a\u308a\u5358\u7d14\u306a\u3082\u306e\u306a\u306e\u3067\uff0c\u516c\u5f0f\u6559\u6750\u306e\u65e5\u672c\u8a9e\u7248\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eRust\u300d\u3092\u3042\u308b\u7a0b\u5ea6\u52c9\u5f37\u3057\u305f\u304f\u3089\u3044\u3067\u306a\u3093\u3068\u304b\u306a\u308a\u305d\u3046\u3002\n\u7d50\u679c\u306f\uff0c\u6642\u523b\u3054\u3068\u306e\u30bb\u30eb\u306e\u683c\u5b50\u3092 PNG \u753b\u50cf\u3068\u3057\u3066\u66f8\u304d\u51fa\u3059\u3053\u3068\u306b\u3059\u308b\u3002\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\u306f\u3061\u3087\u3063\u3068\u96e3\u3057\u305d\u3046\u3060\u3051\u3069\uff0c\u5b9f\u306f image \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306b\uff0c\u305f\u3063\u305f 50 \u884c\u3067\u30b8\u30e5\u30ea\u30a2\u96c6\u5408\u306e\u753b\u50cf\u3092\u66f8\u304d\u51fa\u3059 julia.rs \u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u3063\u305f\u306e\u3067\uff0c\u305d\u306e\u51fa\u529b\u90e8\u5206\u3092\u4e38\u5199\u3057\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u3068\u3044\u3046\u304b\uff0c\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u305f\u304b\u3089\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\u3092\u3084\u308d\u3046\u3068\u8003\u3048\u3064\u3044\u305f\u3093\u3060\u3051\u3069\u306d\u3002\n\u6b8b\u5ff5\u306a\u304c\u3089\uff0c\u3053\u306e image \u3063\u3066\u3084\u3064\u306f gcc \u306e\u7121\u3044\u74b0\u5883\u3067\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u3002\u3060\u304b\u3089\uff0cWindows \u3067\u52d5\u304b\u3059\u306e\u306f\u79c1\u306b\u306f\u96e3\u3057\u304f\u3066\u8ae6\u3081\u305f\u3002Mac \u3067\u3084\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u5404\u6642\u523b\u306e PNG \u753b\u50cf\u304c\u751f\u6210\u3067\u304d\u305f\u3089\uff0c\u305d\u308c\u3092 APNG Assembler \u3092\u4f7f\u3063\u3066 APNG\uff08Animation PNG\uff091\u306b\u3059\u308b\u3002\u52d5\u753b\u3060\u305c\u3002\u3046\u307e\u304f\u3044\u3051\u3070\u300c\u4f55\u304b\u4f5c\u3063\u305f\u6c17\u304c\u3059\u308b\u300d\u3060\u308d\uff1f\n\n\u4f5c\u308b\n\u307e\u305a\u306f\u3053\u308c\u3002\ncargo new gotta --bin\n\n\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3068\u3057\u3066\uff0crand \u3068 image\u3002\n\nCargo.toml\n[dependencies]\nrand = \"0.3.0\"\nimage = \"0.10.0\"\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u308c\u3060\u3051\u3002\n\nsrc/main.rs\nextern crate rand;\nextern crate image;\n\nuse rand::Rng;\n\nuse std::fs::File;\nuse std::path::Path;\n\n\nstruct Board {\n    width: u32,\n    height: u32,\n    buff: Vec<u8>,\n}\n\nstruct BoardParameter {\n    k1: f32,\n    k2: f32,\n    g: u8,\n}\n\nimpl Board {\n    fn new(width: u32, height: u32) -> Board {\n        Board {\n            width: width,\n            height: height,\n            buff: vec![0; (width * height) as usize]\n        }\n    }\n\n    fn seed(&mut self) {\n        let mut rng = rand::thread_rng();\n        for i in 0..self.buff.iter().count() {\n            self.buff[i] = rng.gen();\n        }\n    }\n\n    fn value(&self, x: u32, y: u32) -> u8 {\n        self.buff[(y * self.width + x) as usize]\n    }\n\n    fn set_value(&mut self, x: u32, y: u32, value: u8) {\n        self.buff[(y * self.width + x) as usize] = value;\n    }\n\n    fn copy_buff(&mut self, other: &Board) {\n      for (i, v) in other.buff.iter().enumerate() {\n        self.buff[i] = *v;\n      }\n    }\n\n    fn image(&self, filename: &str) {\n        let mut imgbuf = image::ImageBuffer::new(self.width, self.height);\n        for (x, y, pixel) in imgbuf.enumerate_pixels_mut() {\n             *pixel = image::Luma([self.value(x, y)]);\n        }\n        let ref mut fout = File::create(&Path::new(filename)).unwrap();\n        let _ = image::ImageLuma8(imgbuf).save(fout, image::PNG);\n    }\n\n    fn neighborhood(&self, x: u32, y: u32) -> [u8; 8] {\n        let x1: u32 = (x + self.width - 1) % self.width;\n        let x2: u32 = (x + 1) % self.width;\n        let y1: u32 = (y + self.height - 1) % self.height;\n        let y2: u32 = (y + 1) % self.height;\n        [\n          self.value(x1, y1), self.value(x, y1), self.value(x2, y1),\n          self.value(x1, y),                     self.value(x2, y),\n          self.value(x1, y2), self.value(x, y2), self.value(x2, y2)\n        ]\n    }\n\n    fn count_infected(&self, x: u32, y: u32) -> u8 {\n        let mut count: u8 = 0;\n        for value in &self.neighborhood(x, y) {\n            if (*value > 0) & (*value < 255) { count += 1; }\n        }\n        count\n    }\n\n    fn count_illed(&self, x: u32, y: u32) -> u8 {\n        let mut count: u8 = 0;\n        for value in &self.neighborhood(x, y) {\n            if *value == 255 { count += 1; }\n        }\n        count\n    }\n\n    fn sum(&self, x: u32, y: u32) -> u16 {\n        self.neighborhood(x, y).iter().fold(0u16, |sum, v| sum + *v as u16) + self.value(x, y) as u16\n    }\n\n    fn step(&mut self, params: &BoardParameter) {\n        let mut next_board = Board::new(self.width, self.height);\n        let mut value: u8;\n        for y in 0..self.height {\n            for x in 0..self.width {\n                value = self.value(x, y);\n                if value == 255 {\n                    next_board.set_value(x, y, 0);\n                } else {\n                    let c_infected = self.count_infected(x, y) as f32;\n                    let c_illed = self.count_illed(x, y) as f32;\n                    let mut next_value: u16;\n                    if value == 0 {\n                        let n1 = (c_infected / params.k1).floor() as u16;\n                        let n2 = (c_illed / params.k2).floor() as u16;\n                        next_value = n1 + n2;\n                    } else {\n                        let sum = self.sum(x, y) as f32;\n                        next_value = (sum / c_infected).floor() as u16 + params.g as u16;\n                    }\n                    if next_value > 255 {\n                        next_value = 255;\n                    }\n                    next_board.set_value(x, y, next_value as u8)\n                }\n            }\n        }\n        self.copy_buff(&next_board);\n    }\n}\n\n\nfn main() {\n    let mut b = Board::new(200, 160);\n    let params = BoardParameter{k1: 2.0, k2: 3.0, g: 3};\n    b.seed();\n    for i in 0..480 {\n        let s = format!(\"png/foo-{:04}.png\", i);\n        b.image(&s);\n        b.step(&params);\n    }\n}\n\n\n\u753b\u50cf\u30b5\u30a4\u30ba\u306f main \u95a2\u6570\u306e Board::new \u306b\u4e0e\u3048\u3066\u3044\u308b\u3002\n\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306f\u540c\u3058\u304f BoardParameter \u3068\u3057\u3066\u4e0e\u3048\u3066\u3044\u308b\u3002\n\u753b\u50cf\u751f\u6210\u6570\uff08\u30b3\u30de\u6570\uff09\u306f for \u306b\u4e0e\u3048\u3066\u3042\u308b\u3002\n\u307e\u3042\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5909\u3048\u308b\u305f\u3073\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u76f4\u3059\u306e\u304c\u30a4\u30b1\u3066\u306a\u3044\u3051\u3069\uff0c\u6700\u521d\u306a\u306e\u3067\u3053\u308c\u3067\u3044\u3044\u3053\u3068\u306b\u3059\u308b\u3002\n\u3069\u3093\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3060\u3068\u9762\u767d\u3044\u7d50\u679c\u306b\u306a\u308b\u306e\u304b\u306f\uff0c\u3088\u304f\u8abf\u3079\u3066\u306a\u3044\u3002\u8a66\u3057\u3066\u307f\u305f\u3044\u4eba\u306f\uff0c\u3068\u308a\u3042\u3048\u305a k1, k2 \u306e\u5024\u306f\u3042\u307e\u308a\u5909\u3048\u306a\u3044\u3067\uff0cg \u306e\u5024\u3092\u3044\u308d\u3044\u308d\u5909\u3048\u3066\u307f\u3066\u3002\n\n\u5b9f\u884c\n\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3068\uff0cPNG \u3092\u683c\u7d0d\u3059\u308b png \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3092\u3042\u3089\u304b\u3058\u3081\u4f5c\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\uff0c\n$ mkdir png\n\n\u3057\u3066\u304a\u304f\u3002\n\u6700\u521d\uff0c\n$ cargo run\n\n\u3068\u3084\u3063\u305f\u3089\uff0c\u304c\u3063\u304b\u308a\u3059\u308b\u307b\u3069\u9045\u304b\u3063\u305f\u3002\u3053\u308c\u3060\u3068\u30d3\u30eb\u30c9\u6642\u306b\u6700\u9069\u5316\u304c\u5165\u3089\u306a\u3044\u3089\u3057\u3044\u3002\n$ cargo run --release\n\n\u306b\u3057\u305f\u3089\u5287\u7684\u306b\u6539\u5584\u3057\u305f\u3002\n\u6b21\u306b APNG assembler \u3067\n$ apngasm gotta.png png/*.png -l1 1 12\n\n\u3068\u3084\u3063\u3066\uff0cAPNG \u30d5\u30a1\u30a4\u30eb\u300cgotta.png\u300d\u3092\u4f5c\u308b\u3002\n\u30aa\u30d7\u30b7\u30e7\u30f3 -l1 \u306f\u30eb\u30fc\u30d7\u3057\u306a\u3044\uff08\u6700\u5f8c\u306e\u30b3\u30de\u3067\u6b62\u307e\u308b\uff09\u3053\u3068\uff0c1 12 \u306f 1 \u30d5\u30ec\u30fc\u30e0\u304c 1/12 \u79d2\u3067\u3042\u308b\u3068\u3044\u3046\u6307\u5b9a\u3089\u3057\u3044\u3002\n\n\u3067\u304d\u305f\n\u3067\u304d\u305f APNG \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u3053\u308c\u3002\n\n\u3048\u3048\u3068\uff0cQiita \u4e0a\u3060\u3068\u306a\u305c\u304b\u30ea\u30ed\u30fc\u30c9\u3057\u3066\u3082\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u7e70\u308a\u8fd4\u3057\u3066\u304f\u308c\u306a\u3044\u307f\u305f\u3044\u3002\n\u3082\u3046\u4e00\u5ea6\u898b\u305f\u3044\u65b9\u306f\u753b\u50cf\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304b\u3089 Firefox \u306a\u3069\u3067\u958b\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u611f\u60f3\n\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u8a00\u8a9e\u306f\u6577\u5c45\u304c\u9ad8\u3044\u3068\u601d\u3063\u3066\u3044\u305f\u3057\uff0cRust \u306f\u501f\u7528\u3068\u3044\u3063\u305f\u6982\u5ff5\u304c\u96e3\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u305f\u3051\u3069\uff0c\u601d\u3063\u305f\u307b\u3069\u60a9\u307e\u305a\u306b\u3067\u304d\u305f\u3002\nimage \u304c\u3088\u304f\u3067\u304d\u3066\u305f\u306e\u3068\uff0cRust \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306e\u30a8\u30fc\u30e9\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6709\u7528\u3060\u3063\u305f\u304b\u3089\u304b\u306a\u3002\n\u3053\u308c\u306a\u3089\u307e\u305f\u4f55\u304b\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u6c17\u306b\u306a\u308b\u3002\n\n\n\n\nAPNG \u306f Google Chrome \u3084 Edge \u3067\u306f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8868\u793a\u3067\u304d\u306a\u3044\u3002Firefox \u3084\u6700\u65b0\u306e Safari \u3067\u898b\u3066\u307b\u3057\u3044\u3002\u00a0\u21a9\n\n\n\n\n\n\u3075\u3060\u3093 Ruby \u3070\u304b\u308a\u4f7f\u3063\u3066\u3044\u308b\u79c1\u304c [Rust](https://www.rust-lang.org/en-US/) \u3067\u4f55\u304b\u4f5c\u3063\u3066\u307f\u305f\u304f\u306a\u3063\u305f\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6761\u4ef6\u3092\u6e80\u305f\u3059\u984c\u6750\u3092\u8003\u3048\u305f\u3002\n\n- Ruby \u3067\u3084\u308b\u306b\u306f\u3061\u3087\u3063\u3068\u8f9b\u3044\u8a08\u7b97\u91cf\u304c\u3042\u308b\u3002\n- \u7d50\u679c\u304c\u76ee\u3067\u898b\u3048\u3066\u300c\u306a\u3093\u304b\u4f5c\u3063\u305f\u300d\u6c17\u304c\u3059\u308b\u3002\n- Rust \u3092\u3061\u3087\u3063\u3074\u308a\u52c9\u5f37\u3057\u305f\u3060\u3051\u306e\u79c1\u306b\u3082\u3069\u3046\u306b\u304b\u4f5c\u308c\u305d\u3046\u3002\n\n\u300c\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\u300d\u3092\u4f5c\u308d\u3046\u3068\u601d\u3044\u3064\u3044\u305f\u3002\n\n# \u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\u3068\u306f\n\n\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\uff08\u306e\u6982\u5ff5\u304a\u3088\u3073\u305d\u3046\u3044\u3046\u8a33\u8a9e\uff09\u306f\u6b21\u306e\u6587\u732e\u3067\u7d39\u4ecb\u3055\u308c\u305f\u3082\u306e\u3002\n\n\u300e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u30ec\u30af\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3II\u3000\u904a\u3073\u306e\u63a2\u7d22\u300f\u5225\u518a\u30b5\u30a4\u30a8\u30f3\u30b992\uff0cA.K. \u30c7\u30e5\u30fc\u30c9\u30cb\u30fc \u8457\uff0c\u65e5\u7d4c\u30b5\u30a4\u30a8\u30f3\u30b9\uff081989\uff09\n\n\u3044\u308f\u3086\u308b\u30bb\u30eb\u30e9\u30fc\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306e\u4e00\u7a2e\u3002\n\n\u7e26\u6a2a\u306b\u4e26\u3093\u3060\u30bb\u30eb\u306e\u305d\u308c\u305e\u308c\u304c\u6574\u6570\u5024\u3092\u6301\u3061\uff0c\u6642\u523b\u3068\u3068\u3082\u306b\u5909\u5316\u3057\u3066\u3044\u304f\u3002\n\n\u3042\u308b\u30bb\u30eb\u306e\u6b21\u306e\u6642\u523b\u306e\u5024\u306f\u5468\u56f2\u306e\u30bb\u30eb\u306e\u5024\u3068\u306e\u517c\u306d\u5408\u3044\u3067\u6c7a\u307e\u308b\u3002\n\n\u5177\u4f53\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u7701\u7565\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u4e09\u3064\u3042\u3063\u3066\uff0c\u305d\u308c\u3092\u5909\u3048\u308b\u3068\u63a8\u79fb\u306e\u69d8\u5b50\u304c\u5287\u7684\u306b\u5909\u308f\u3063\u305f\u308a\u3059\u308b\u3002\n\n\u30d9\u30ed\u30a6\u30bd\u30d5\u30fb\u30b8\u30e3\u30dc\u30c1\u30f3\u30b9\u30ad\u30fc\u53cd\u5fdc\uff08BZ \u53cd\u5fdc\uff09\u3068\u3044\u3046\uff0c\u4e8c\u6b21\u5143\u7684\u306b\u304d\u308c\u3044\u306a\u6a21\u69d8\u304c\u5f62\u6210\u3055\u308c\u308b\u5316\u5b66\u53cd\u5fdc\u306e\u30b7\u30df\u30e5\u30fc\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8003\u6848\u3055\u308c\u305f\u3089\u3057\u3044\u3002\n\n\u203b\u7d50\u679c\u304c\u3059\u3050\u898b\u305f\u3044\u65b9\u306f\u300c[\u3067\u304d\u305f](#%E3%81%A7%E3%81%8D%E3%81%9F)\u300d\u306e\u7bc0\u306b\u98db\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n# \u958b\u767a\u65b9\u91dd\n\n\u30bb\u30eb\u30e9\u30fc\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306e\u8a08\u7b97\u306f\u304b\u306a\u308a\u5358\u7d14\u306a\u3082\u306e\u306a\u306e\u3067\uff0c\u516c\u5f0f\u6559\u6750\u306e\u65e5\u672c\u8a9e\u7248\u300c[\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eRust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/README.html)\u300d\u3092\u3042\u308b\u7a0b\u5ea6\u52c9\u5f37\u3057\u305f\u304f\u3089\u3044\u3067\u306a\u3093\u3068\u304b\u306a\u308a\u305d\u3046\u3002\n\n\u7d50\u679c\u306f\uff0c\u6642\u523b\u3054\u3068\u306e\u30bb\u30eb\u306e\u683c\u5b50\u3092 PNG \u753b\u50cf\u3068\u3057\u3066\u66f8\u304d\u51fa\u3059\u3053\u3068\u306b\u3059\u308b\u3002\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\u306f\u3061\u3087\u3063\u3068\u96e3\u3057\u305d\u3046\u3060\u3051\u3069\uff0c\u5b9f\u306f [image](https://crates.io/crates/image) \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306b\uff0c\u305f\u3063\u305f 50 \u884c\u3067\u30b8\u30e5\u30ea\u30a2\u96c6\u5408\u306e\u753b\u50cf\u3092\u66f8\u304d\u51fa\u3059 [julia.rs](https://github.com/PistonDevelopers/image/blob/master/examples/fractal.rs) \u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u3063\u305f\u306e\u3067\uff0c\u305d\u306e\u51fa\u529b\u90e8\u5206\u3092\u4e38\u5199\u3057\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u3068\u3044\u3046\u304b\uff0c\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u305f\u304b\u3089\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\u3092\u3084\u308d\u3046\u3068\u8003\u3048\u3064\u3044\u305f\u3093\u3060\u3051\u3069\u306d\u3002\n\n\u6b8b\u5ff5\u306a\u304c\u3089\uff0c\u3053\u306e image \u3063\u3066\u3084\u3064\u306f gcc \u306e\u7121\u3044\u74b0\u5883\u3067\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u3002\u3060\u304b\u3089\uff0cWindows \u3067\u52d5\u304b\u3059\u306e\u306f\u79c1\u306b\u306f\u96e3\u3057\u304f\u3066\u8ae6\u3081\u305f\u3002Mac \u3067\u3084\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u5404\u6642\u523b\u306e PNG \u753b\u50cf\u304c\u751f\u6210\u3067\u304d\u305f\u3089\uff0c\u305d\u308c\u3092 [APNG Assembler](http://apngasm.sourceforge.net/) \u3092\u4f7f\u3063\u3066 APNG\uff08Animation PNG\uff09[^apng]\u306b\u3059\u308b\u3002\u52d5\u753b\u3060\u305c\u3002\u3046\u307e\u304f\u3044\u3051\u3070\u300c\u4f55\u304b\u4f5c\u3063\u305f\u6c17\u304c\u3059\u308b\u300d\u3060\u308d\uff1f\n\n[^apng]: APNG \u306f Google Chrome \u3084 Edge \u3067\u306f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8868\u793a\u3067\u304d\u306a\u3044\u3002Firefox \u3084\u6700\u65b0\u306e Safari \u3067\u898b\u3066\u307b\u3057\u3044\u3002\n\n\n# \u4f5c\u308b\n\n\u307e\u305a\u306f\u3053\u308c\u3002\n\n```bash\ncargo new gotta --bin\n```\n\n\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3068\u3057\u3066\uff0crand \u3068 image\u3002\n\n```toml:Cargo.toml\n[dependencies]\nrand = \"0.3.0\"\nimage = \"0.10.0\"\n```\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u308c\u3060\u3051\u3002\n\n```rust:src/main.rs\nextern crate rand;\nextern crate image;\n\nuse rand::Rng;\n\nuse std::fs::File;\nuse std::path::Path;\n\n\nstruct Board {\n    width: u32,\n    height: u32,\n    buff: Vec<u8>,\n}\n\nstruct BoardParameter {\n    k1: f32,\n    k2: f32,\n    g: u8,\n}\n\nimpl Board {\n    fn new(width: u32, height: u32) -> Board {\n        Board {\n            width: width,\n            height: height,\n            buff: vec![0; (width * height) as usize]\n        }\n    }\n\n    fn seed(&mut self) {\n        let mut rng = rand::thread_rng();\n        for i in 0..self.buff.iter().count() {\n            self.buff[i] = rng.gen();\n        }\n    }\n\n    fn value(&self, x: u32, y: u32) -> u8 {\n        self.buff[(y * self.width + x) as usize]\n    }\n\n    fn set_value(&mut self, x: u32, y: u32, value: u8) {\n        self.buff[(y * self.width + x) as usize] = value;\n    }\n\n    fn copy_buff(&mut self, other: &Board) {\n      for (i, v) in other.buff.iter().enumerate() {\n        self.buff[i] = *v;\n      }\n    }\n\n    fn image(&self, filename: &str) {\n        let mut imgbuf = image::ImageBuffer::new(self.width, self.height);\n        for (x, y, pixel) in imgbuf.enumerate_pixels_mut() {\n             *pixel = image::Luma([self.value(x, y)]);\n        }\n        let ref mut fout = File::create(&Path::new(filename)).unwrap();\n        let _ = image::ImageLuma8(imgbuf).save(fout, image::PNG);\n    }\n\n    fn neighborhood(&self, x: u32, y: u32) -> [u8; 8] {\n        let x1: u32 = (x + self.width - 1) % self.width;\n        let x2: u32 = (x + 1) % self.width;\n        let y1: u32 = (y + self.height - 1) % self.height;\n        let y2: u32 = (y + 1) % self.height;\n        [\n          self.value(x1, y1), self.value(x, y1), self.value(x2, y1),\n          self.value(x1, y),                     self.value(x2, y),\n          self.value(x1, y2), self.value(x, y2), self.value(x2, y2)\n        ]\n    }\n\n    fn count_infected(&self, x: u32, y: u32) -> u8 {\n        let mut count: u8 = 0;\n        for value in &self.neighborhood(x, y) {\n            if (*value > 0) & (*value < 255) { count += 1; }\n        }\n        count\n    }\n\n    fn count_illed(&self, x: u32, y: u32) -> u8 {\n        let mut count: u8 = 0;\n        for value in &self.neighborhood(x, y) {\n            if *value == 255 { count += 1; }\n        }\n        count\n    }\n\n    fn sum(&self, x: u32, y: u32) -> u16 {\n        self.neighborhood(x, y).iter().fold(0u16, |sum, v| sum + *v as u16) + self.value(x, y) as u16\n    }\n\n    fn step(&mut self, params: &BoardParameter) {\n        let mut next_board = Board::new(self.width, self.height);\n        let mut value: u8;\n        for y in 0..self.height {\n            for x in 0..self.width {\n                value = self.value(x, y);\n                if value == 255 {\n                    next_board.set_value(x, y, 0);\n                } else {\n                    let c_infected = self.count_infected(x, y) as f32;\n                    let c_illed = self.count_illed(x, y) as f32;\n                    let mut next_value: u16;\n                    if value == 0 {\n                        let n1 = (c_infected / params.k1).floor() as u16;\n                        let n2 = (c_illed / params.k2).floor() as u16;\n                        next_value = n1 + n2;\n                    } else {\n                        let sum = self.sum(x, y) as f32;\n                        next_value = (sum / c_infected).floor() as u16 + params.g as u16;\n                    }\n                    if next_value > 255 {\n                        next_value = 255;\n                    }\n                    next_board.set_value(x, y, next_value as u8)\n                }\n            }\n        }\n        self.copy_buff(&next_board);\n    }\n}\n\n\nfn main() {\n    let mut b = Board::new(200, 160);\n    let params = BoardParameter{k1: 2.0, k2: 3.0, g: 3};\n    b.seed();\n    for i in 0..480 {\n        let s = format!(\"png/foo-{:04}.png\", i);\n        b.image(&s);\n        b.step(&params);\n    }\n}\n```\n\n\u753b\u50cf\u30b5\u30a4\u30ba\u306f `main` \u95a2\u6570\u306e `Board::new` \u306b\u4e0e\u3048\u3066\u3044\u308b\u3002\n\n\u3054\u3063\u305f\u716e\u30de\u30b7\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306f\u540c\u3058\u304f `BoardParameter` \u3068\u3057\u3066\u4e0e\u3048\u3066\u3044\u308b\u3002\n\n\u753b\u50cf\u751f\u6210\u6570\uff08\u30b3\u30de\u6570\uff09\u306f `for` \u306b\u4e0e\u3048\u3066\u3042\u308b\u3002\n\n\u307e\u3042\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5909\u3048\u308b\u305f\u3073\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u76f4\u3059\u306e\u304c\u30a4\u30b1\u3066\u306a\u3044\u3051\u3069\uff0c\u6700\u521d\u306a\u306e\u3067\u3053\u308c\u3067\u3044\u3044\u3053\u3068\u306b\u3059\u308b\u3002\n\n\u3069\u3093\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3060\u3068\u9762\u767d\u3044\u7d50\u679c\u306b\u306a\u308b\u306e\u304b\u306f\uff0c\u3088\u304f\u8abf\u3079\u3066\u306a\u3044\u3002\u8a66\u3057\u3066\u307f\u305f\u3044\u4eba\u306f\uff0c\u3068\u308a\u3042\u3048\u305a k1, k2 \u306e\u5024\u306f\u3042\u307e\u308a\u5909\u3048\u306a\u3044\u3067\uff0cg \u306e\u5024\u3092\u3044\u308d\u3044\u308d\u5909\u3048\u3066\u307f\u3066\u3002\n\n# \u5b9f\u884c\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3068\uff0cPNG \u3092\u683c\u7d0d\u3059\u308b `png` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3092\u3042\u3089\u304b\u3058\u3081\u4f5c\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\uff0c\n\n```bash\n$ mkdir png\n```\n\n\u3057\u3066\u304a\u304f\u3002\n\n\n\u6700\u521d\uff0c\n\n```bash\n$ cargo run\n```\n\n\u3068\u3084\u3063\u305f\u3089\uff0c\u304c\u3063\u304b\u308a\u3059\u308b\u307b\u3069\u9045\u304b\u3063\u305f\u3002\u3053\u308c\u3060\u3068\u30d3\u30eb\u30c9\u6642\u306b\u6700\u9069\u5316\u304c\u5165\u3089\u306a\u3044\u3089\u3057\u3044\u3002\n\n```bash\n$ cargo run --release\n```\n\n\u306b\u3057\u305f\u3089\u5287\u7684\u306b\u6539\u5584\u3057\u305f\u3002\n\n\u6b21\u306b APNG assembler \u3067\n\n```bash\n$ apngasm gotta.png png/*.png -l1 1 12\n```\n\n\u3068\u3084\u3063\u3066\uff0cAPNG \u30d5\u30a1\u30a4\u30eb\u300cgotta.png\u300d\u3092\u4f5c\u308b\u3002\n\n\u30aa\u30d7\u30b7\u30e7\u30f3 `-l1` \u306f\u30eb\u30fc\u30d7\u3057\u306a\u3044\uff08\u6700\u5f8c\u306e\u30b3\u30de\u3067\u6b62\u307e\u308b\uff09\u3053\u3068\uff0c`1 12` \u306f 1 \u30d5\u30ec\u30fc\u30e0\u304c 1/12 \u79d2\u3067\u3042\u308b\u3068\u3044\u3046\u6307\u5b9a\u3089\u3057\u3044\u3002\n\n# \u3067\u304d\u305f\n\n\u3067\u304d\u305f APNG \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u3053\u308c\u3002\n\n![gotta.png](https://qiita-image-store.s3.amazonaws.com/0/48101/45b8fae2-4d3c-6b09-19f2-dd3c2d9e111c.png)\n\n\u3048\u3048\u3068\uff0cQiita \u4e0a\u3060\u3068\u306a\u305c\u304b\u30ea\u30ed\u30fc\u30c9\u3057\u3066\u3082\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u7e70\u308a\u8fd4\u3057\u3066\u304f\u308c\u306a\u3044\u307f\u305f\u3044\u3002\n\n\u3082\u3046\u4e00\u5ea6\u898b\u305f\u3044\u65b9\u306f\u753b\u50cf\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304b\u3089 Firefox \u306a\u3069\u3067\u958b\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u611f\u60f3\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u8a00\u8a9e\u306f\u6577\u5c45\u304c\u9ad8\u3044\u3068\u601d\u3063\u3066\u3044\u305f\u3057\uff0cRust \u306f\u501f\u7528\u3068\u3044\u3063\u305f\u6982\u5ff5\u304c\u96e3\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u305f\u3051\u3069\uff0c\u601d\u3063\u305f\u307b\u3069\u60a9\u307e\u305a\u306b\u3067\u304d\u305f\u3002\n\nimage \u304c\u3088\u304f\u3067\u304d\u3066\u305f\u306e\u3068\uff0cRust \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306e\u30a8\u30fc\u30e9\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6709\u7528\u3060\u3063\u305f\u304b\u3089\u304b\u306a\u3002\n\n\u3053\u308c\u306a\u3089\u307e\u305f\u4f55\u304b\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u6c17\u306b\u306a\u308b\u3002\n\n"}