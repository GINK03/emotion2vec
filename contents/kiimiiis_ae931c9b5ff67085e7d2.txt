{"context": " More than 1 year has passed since last update.\n\nPHP\u3067\uff12\u5206\u6728\u69cb\u9020\u306einsert\n\n\u30b3\u30fc\u30c9\n\nTreeNode\nclass TreeNode {\n    public $value;\n    public $leftNode;\n    public $rightNode;\n}\n\n\n\nBinaryTree\nrequire_once 'TreeNode.php';\n\nclass BinaryTree {\n    public static function createNewNode($value) {\n        $node            = new TreeNode();\n        $node->value     = $value;\n        $node->leftNode  = null;\n        $node->rightNode = null;\n        return $node;\n    }\n\n    public static function insertNode($value, $node) {\n        if ($node->value == $value) {\n            return false;\n        }\n\n        if ($node->value > $value) {\n            //\u30ce\u30fc\u30c9\u306e\u5024\u3088\u308a\u5c0f\u3055\u3044\u6642\u3002\u5de6\u306e\u5b50\u306e\u6728\u306b\n            if ($node->leftNode != null) {\n                //\u65e2\u306b\u5de6\u306e\u6728\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u6b21\u306e\u5b50\u306b\u9032\u3080\n                self::insertNode($value, $node->leftNode);\n            } else {\n                //\u5de6\u306e\u6728\u306b\u30c7\u30fc\u30bf\u3092\u633f\u5165\n                $node->leftNode = self::createNewNode($value);\n                return true;\n            }\n        } else {\n            //\u30ce\u30fc\u30c9\u306e\u5024\u3088\u308a\u5927\u304d\u3044\u6642\u3002\u53f3\u306e\u5b50\u306e\u6728\u306b\n            if ($node->rightNode != null) {\n                //\u65e2\u306b\u53f3\u306e\u6728\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u6b21\u306e\u5b50\u306b\u9032\u3080\n                self::insertNode($value, $node->rightNode);\n            } else {\n                //\u53f3\u306e\u6728\u306b\u30c7\u30fc\u30bf\u3092\u633f\u5165\n                $node->rightNode = self::createNewNode($value);\n                return true;\n            }\n        }\n    }\n}\n\n\n\nbinaryTreeTest\n/* \n2\u5206\u6728\u306e\u30c6\u30b9\u30c8\n */\n\nrequire_once './../part/TreeNode.php';\nrequire_once './../part/BinaryTree.php';\n\n$tree = new TreeNode();\n$tree->value = 1000;\nBinaryTree::insertNode(2000, $tree);\nBinaryTree::insertNode(300, $tree);\nBinaryTree::insertNode(4000, $tree);\nBinaryTree::insertNode(5000, $tree);\nBinaryTree::insertNode(100, $tree);\nBinaryTree::insertNode(50, $tree);\nBinaryTree::insertNode(10, $tree);\nBinaryTree::insertNode(3000, $tree);\nBinaryTree::insertNode(400, $tree);\necho '<pre>';\nvar_dump($tree);\necho '</pre>';\n\n\n\n\n\u53c2\u8003\u66f8\u7c4d\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5b9d\u7bb1 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30c7\u30fc\u30bf\u69cb\u9020 \u7b2c2\u7248 \n\nGitHub\nhttps://github.com/Khanashima/algorithm\n#PHP\u3067\uff12\u5206\u6728\u69cb\u9020\u306einsert\n\n##\u30b3\u30fc\u30c9\n\n```php:TreeNode\nclass TreeNode {\n    public $value;\n    public $leftNode;\n    public $rightNode;\n}\n```\n\n```php:BinaryTree\nrequire_once 'TreeNode.php';\n\nclass BinaryTree {\n    public static function createNewNode($value) {\n        $node            = new TreeNode();\n        $node->value     = $value;\n        $node->leftNode  = null;\n        $node->rightNode = null;\n        return $node;\n    }\n\n    public static function insertNode($value, $node) {\n        if ($node->value == $value) {\n            return false;\n        }\n\n        if ($node->value > $value) {\n            //\u30ce\u30fc\u30c9\u306e\u5024\u3088\u308a\u5c0f\u3055\u3044\u6642\u3002\u5de6\u306e\u5b50\u306e\u6728\u306b\n            if ($node->leftNode != null) {\n                //\u65e2\u306b\u5de6\u306e\u6728\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u6b21\u306e\u5b50\u306b\u9032\u3080\n                self::insertNode($value, $node->leftNode);\n            } else {\n                //\u5de6\u306e\u6728\u306b\u30c7\u30fc\u30bf\u3092\u633f\u5165\n                $node->leftNode = self::createNewNode($value);\n                return true;\n            }\n        } else {\n            //\u30ce\u30fc\u30c9\u306e\u5024\u3088\u308a\u5927\u304d\u3044\u6642\u3002\u53f3\u306e\u5b50\u306e\u6728\u306b\n            if ($node->rightNode != null) {\n                //\u65e2\u306b\u53f3\u306e\u6728\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u6b21\u306e\u5b50\u306b\u9032\u3080\n                self::insertNode($value, $node->rightNode);\n            } else {\n                //\u53f3\u306e\u6728\u306b\u30c7\u30fc\u30bf\u3092\u633f\u5165\n                $node->rightNode = self::createNewNode($value);\n                return true;\n            }\n        }\n    }\n}\n```\n\n```php:binaryTreeTest\n/* \n2\u5206\u6728\u306e\u30c6\u30b9\u30c8\n */\n\nrequire_once './../part/TreeNode.php';\nrequire_once './../part/BinaryTree.php';\n\n$tree = new TreeNode();\n$tree->value = 1000;\nBinaryTree::insertNode(2000, $tree);\nBinaryTree::insertNode(300, $tree);\nBinaryTree::insertNode(4000, $tree);\nBinaryTree::insertNode(5000, $tree);\nBinaryTree::insertNode(100, $tree);\nBinaryTree::insertNode(50, $tree);\nBinaryTree::insertNode(10, $tree);\nBinaryTree::insertNode(3000, $tree);\nBinaryTree::insertNode(400, $tree);\necho '<pre>';\nvar_dump($tree);\necho '</pre>';\n\n```\n##\u53c2\u8003\u66f8\u7c4d\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5b9d\u7bb1 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30c7\u30fc\u30bf\u69cb\u9020 \u7b2c2\u7248 \n\n##GitHub\nhttps://github.com/Khanashima/algorithm\n", "tags": ["PHP", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}