{"context": " More than 1 year has passed since last update.\n\n\u53c2\u8003\nhttp://grails.jp/doc/latest/guide/testing.html\nhttp://grails.org/doc/latest/guide/testing.html\n\n\u306f\u3058\u3081\u306b\n\u4eca\u56de\u306fGrails\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c2.4\u3067\u3059\u3002\n\u6a19\u6e96\u3067Spock\u3067\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\ntest-app \u3082\u3057\u304f\u306f test-app unit:\n\u30b3\u30ec\u3067\u5b9f\u884c\u53ef\u80fd\u306a\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3069\u3042\u308a\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b\u6c17\u306b\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u3067\u3059\u3002\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u3001\u6df7\u4e71\u306e\u3082\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u73fe\u5728\u81ea\u5206\u304cGrails\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u3092\u52c9\u5f37\u4e2d\u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u307e\u3060\u5b8c\u6210\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nQiita\u306e\u4e0b\u66f8\u304d\u304c\u57cb\u307e\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u306e\u516c\u958b\u3068\u306a\u308a\u307e\u3059\u3002\n\u4eca\u5f8c\u3001\u5185\u5bb9\u306e\u4fee\u6b63\u3001\u8ffd\u8a18\u3092\u90fd\u5ea6\u884c\u3044\u307e\u3059\u3002\n\n\u8c46\u77e5\u8b58\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306a\u306e\u3067\u3001Grails\u306f\u74b0\u5883\u3092test\u3068\u3057\u3066\u3001DataSource.groovy\u3068Bootstrap.groovy\u3092\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u8aad\u307f\u8fbc\u307e\u3059\u3002\n\u30b3\u30ec\u306f\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u74b0\u5883\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff09\u306b\u4f9d\u5b58\u3055\u305b\u306a\u3044\u305f\u3081\u3067\u3059\u3002\nintegration\u30c6\u30b9\u30c8\u304c\u7d9a\u3044\u3066\u5b9f\u884c\u3055\u308c\u308b\u5834\u5408\u306b\u306f\u3001\u305d\u306e\u60c5\u5831\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\u65b9\u6cd5\ncreate-domain-class Test\u3068\u304bcreate-controller Test\u30b3\u30de\u30f3\u30c9\u3001create-tag-lib Test\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u305d\u308c\u7528\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\u304c\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u308b\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nTestSpec.groovy\npackage \u30d1\u30c3\u30b1\u30fc\u30b8\u540d\n\nimport grails.test.mixin.TestFor\nimport spock.lang.Specification\n\n/**\n * See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions\n */\n@TestFor(Test)\nclass TestSpec extends Specification {\n\n    def setup() {\n    }\n\n    def cleanup() {\n    }\n\n    void \"test something\"() {\n    }\n}\n\n\n\nTestControllerSpec.groovy\npackage \u30d1\u30c3\u30b1\u30fc\u30b8\u540d\n\nimport grails.test.mixin.TestFor\nimport spock.lang.Specification\n\n/**\n * See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions\n */\n@TestFor(TestController)\nclass TestControllerSpec extends Specification {\n\n    def setup() {\n    }\n\n    def cleanup() {\n    }\n\n    void \"test something\"() {\n    }\n}\n\n\n\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30c6\u30b9\u30c8\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5185\u5bb9\npackage \u30d1\u30c3\u30b1\u30fc\u30b8\u540d\n\nimport grails.converters.JSON\nimport grails.converters.XML\nimport grails.plugin.springsecurity.annotation.Secured\nimport org.springframework.web.multipart.MultipartFile\n\nclass TestController {\n\n    def hello() {\n        render \"hello\"\n    }\n\n    def redirectToHello() {\n        redirect(controller: 'test', action: 'hello')\n    }\n\n    def methodPrinter() {\n        render request.method\n    }\n\n    def home() {\n        render(view: 'homePage', model: [title: 'Hello World'])\n    }\n\n    def showTemplate() {\n        render(template:\"snippet\")\n    }\n\n    def showBookDetails() {\n       // render(model: [title: 'The Nature Of Necessity', author: 'Alvin Plantinga'])\n        [title: 'The Nature Of Necessity', author: 'Alvin Plantinga']\n    }\n\n    def renderXml() {\n        render (contentType: 'text/xml') {\n            book(title:\"Great\")\n        }\n    }\n\n    def renderJson() {\n        render(contentType: \"application/json\") {\n            book = \"Great\"\n        }\n    }\n\n    def xmlAndJsonRequest(TestCommand t) {\n        render \"Name is ${t.name}\"\n\n    }\n\n    def xmlAndJsonRequestWithoutBinding(){\n        request.withFormat {\n            xml {\n                // \u306a\u305c\u304bXML\u304c\u5fc5\u305anull\u306b\u306a\u308b\u3002\n                // Grails\u306e\u30d0\u30b0\uff1f\n                render \"The XML Title Is ${request.XML}.\"\n            }\n            json {\n                render \"The JSON Title Is ${request.JSON.title}.\"\n            }\n        }\n    }\n\n    def mimeTypeHandling(){\n        def data = [Hello:\"World\"]\n        request.withFormat {\n            xml { render data as XML}\n            json { render data as JSON}\n            html {data}\n        }\n    }\n\n    // http://grails.org/doc/latest/ref/Controllers/withForm.html\n    def formHandling() {\n        withForm {\n            render \"Good\"\n        }.invalidToken {\n            render \"Bad\"\n        }\n    }\n\n    def uploadFile() {\n        MultipartFile file = request.getFile(\"myFile\")\n        if(!file.isEmpty()) {\n            file.transferTo( new File(\"/tmp/upload/${file.originalFilename}\") )\n            render \"OK\"\n        } else {\n            render \"NG\"\n        }\n    }\n\n    def commandObjectHandling(TestCommand cmd) {\n        if(cmd.hasErrors()) {\n            render \"Bad\"\n        } else {\n            render \"Good\"\n        }\n    }\n\n    static allowedMethods = [save:'POST']\n    def save() {\n        render \"saved.\"\n    }\n\n    def showMessage() {\n        render g.message(code:'foo.bar')\n    }\n}\n\nclass TestCommand {\n    String name\n    Integer age\n\n    static constraints = {\n        name(blank:false, minSize: 1)\n        age(min: 1)\n    }\n}\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\npackage \u30d1\u30c3\u30b1\u30fc\u30b8\u540d\n\nimport grails.test.mixin.TestFor\nimport org.codehaus.groovy.grails.plugins.testing.GrailsMockMultipartFile\nimport org.codehaus.groovy.grails.web.servlet.mvc.SynchronizerTokensHolder\nimport spock.lang.Specification\n\nimport static javax.servlet.http.HttpServletResponse.SC_METHOD_NOT_ALLOWED\nimport static javax.servlet.http.HttpServletResponse.SC_OK\n\n\n/**\n * See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions\n */\n@TestFor(TestController)\nclass TestControllerSpec extends Specification {\n\n    def setup() {\n    }\n\n    def cleanup() {\n    }\n\n    void \"\u57fa\u672c\u7684\u306a\u30c6\u30b9\u30c8\"() {\n        when:\n        controller.hello()\n\n        then:\n        response.text == 'hello'\n    }\n\n    void \"\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u306e\u30c6\u30b9\u30c8\"() {\n        when:\n        controller.redirectToHello()\n\n        then:\n        response.redirectedUrl == '/test/hello'\n    }\n\n    void \"\u30ea\u30af\u30a8\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u78ba\u8a8d\"(){\n        when:\n        request.method ='POST'\n        controller.methodPrinter()\n        then:\n        response.text == \"POST\"\n    }\n\n    void \"\u30ea\u30af\u30a8\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u78ba\u8a8d\uff08\u8907\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\uff09\" () {\n        setup:\n        request.method = method\n        controller.methodPrinter()\n\n        expect:\n        response.text == result\n\n        where:\n        method ||result\n        'POST' || 'POST'\n        'GET'  || 'GET'\n    }\n\n    void \"\u8868\u793a\u3055\u308c\u308bview\u3068\u6e21\u3055\u308c\u308b\u30e2\u30c7\u30eb\u306e\u30c6\u30b9\u30c8\" (){\n        when:\n        controller.home()\n\n        then:\n        view == '/test/homePage'\n        model.title == 'Hello World'\n    }\n\n    void \"Map\u3092\u8fd4\u3059\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30c6\u30b9\u30c8\" () {\n        // \u4e0a\u8a18\u306e\u30c6\u30b9\u30c8\u3068\u9055\u3063\u3066\u3001contrller\u5074\u3067model\u3068\u308f\u3056\u308f\u3056\u6307\u5b9a\u305b\u305a\u306b\u30c7\u30fc\u3066\u3042\uff08Map)\u304c\u8fd4\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\n        // \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        when:\n        def model = controller.showBookDetails()\n\n        then:\n        model.author == 'Alvin Plantinga'\n    }\n\n    void \"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u8868\u793a\u30c6\u30b9\u30c8\" () {\n        // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e2d\u8eab\u306f\u76f4\u63a5\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3002\n        when:\n        controller.showTemplate()\n\n        then:\n        response.text == \"contents of template\"\n    }\n\n    void \"\u30c6\u30b9\u30c8\u306e\u305f\u3081\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e2d\u8eab\u3092\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\"() {\n        // GroovyPages \u30e2\u30c3\u30af\u3068\u3044\u3046\u3089\u3057\u3044\n        when:\n        views ['/test/_snippet.gsp'] = 'mock template content'\n        controller.showTemplate()\n\n        then:\n        response.text == 'mock template content'\n    }\n\n\n\n    void \"XML\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u30c6\u30b9\u30c8\"() {\n        // XML\u3082\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3002\n        // response.xml\u306fXmlSlurper\n        when:\n        controller.renderXml()\n\n        then:\n        response.text == \"<book title='Great'/>\"\n        response.xml.@title.text() == 'Great'\n    }\n\n    void \"JSON\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u30c6\u30b9\u30c8\"() {\n        // JSON\u3082\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u307e\u308c\u308b\n        // response.json\u306forg.codehaus.groovy.grails.web.json.JSONElemen\n        when:\n        controller.renderJson()\n\n        then:\n        response.text == '{\"book\":\"Great\"}'\n        response.json.book == 'Great'\n    }\n\n\n    void \"xml\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30b9\u30c8\"() {\n        when:\n        request.xml = new Test(name: \"koji\", age: 29)\n        controller.xmlAndJsonRequest()\n\n        then:\n        response.text == 'Name is koji'\n    }\n\n    void \"json\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30b9\u30c8\"() {\n        when:\n        request.json = new Test(name: \"koji\", age: 29)\n        controller.xmlAndJsonRequest()\n\n        then:\n        response.text == 'Name is koji'\n    }\n\n// \u306a\u3093\u304b\u3057\u3089\u3093\u304c\u52d5\u304b\u306a\u3044\u3002\n// \u9001\u4fe1\u306f\u3061\u3083\u3093\u3068\u51fa\u6765\u3066\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u5074\u3067\u3082\u3061\u3083\u3093\u3068XML\u6271\u3044\u306b\u306a\u308b\u3051\u3069\u3001\u4f55\u6545\u304bXML\u3068\u3057\u3066\u306e\u5024\u304c\u53d6\u308c\u305a\u306bNULL\u306b\u306a\u308b\u3002\n//    void \"xml\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30b9\u30c82\"() {\n//        when:\n//            //request.xml = \"<title>Wool</title>\"\n//            //request.xml = '<book title=\"The Stand\"><title>aaaaaaaa</title></book>'\n//            request.xml = new Test(name:\"koji\", age:29)\n//            controller.xmlAndJsonRequestWithoutBinding()\n//        then:\n//            response.text == 'The XML Title Is Hoge!'\n//    }\n\n    void \"json\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30b9\u30c82\"() {\n        when:\n        request.json = '{title:The Stand}'\n        controller.xmlAndJsonRequestWithoutBinding()\n\n        then:\n        response.text == 'The JSON Title Is The Stand.'\n    }\n\n    void \"\u30de\u30a4\u30e0\u30bf\u30a4\u30d7\u306e\u5236\u5fa1\u30c6\u30b9\u30c8\uff08\uff58\uff4d\uff4c\uff09\"(){\n        when:\n        // XML_CONTENT_TYPE\u3068\u3044\u3046\u5b9a\u6570\u3082\u3042\u308b\u306e\u3067\u305d\u3044\u3064\u3092\u6e21\u3057\u3066\u3082OK\n        request.contentType = 'application/xml'\n        controller.mimeTypeHandling()\n\n        then:\n        response.text == '<?xml version=\"1.0\" encoding=\"UTF-8\"?><map><entry key=\"Hello\">World</entry></map>'\n    }\n    void \"\u30de\u30a4\u30e0\u30bf\u30a4\u30d7\u306e\u5236\u5fa1\u30c6\u30b9\u30c8\uff08json\uff09\"(){\n        when:\n        // JSON_CONTENT_TYPE\u3068\u3044\u3046\u5b9a\u6570\u3082\u3042\u308b\u306e\u3067\u305d\u3044\u3064\u3092\u6e21\u3057\u3066\u3082OK\n        request.contentType = 'application/json'\n        controller.mimeTypeHandling()\n\n        then:\n        response.text == '{\"Hello\":\"World\"}'\n    }\n\n    void \"\u30d5\u30a9\u30fc\u30e0\u306e2\u91cd\u9001\u4fe1\u30c6\u30b9\u30c8\"() {\n        // withForm \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30c8\u30fc\u30af\u30f3\u304c\u5fc5\u9808\u3068\u306a\u308b\u3002\n        when:\n        controller.formHandling()\n\n        then:\n        response.text == \"Bad\"\n\n        when:\n        response.reset()\n        def tokenHolder = SynchronizerTokensHolder.store(session)\n\n        params[SynchronizerTokensHolder.TOKEN_URI] = '/test/formHandling'\n        params[SynchronizerTokensHolder.TOKEN_KEY] = tokenHolder.generateToken(params[SynchronizerTokensHolder.TOKEN_URI])\n        controller.formHandling()\n\n        then:\n        response.text == \"Good\"\n    }\n\n    void \"\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u30c6\u30b9\u30c8\"() {\n        when:\n        GrailsMockMultipartFile file = new GrailsMockMultipartFile('myFile', 'test.jpg', 'image/jpeg', 'some file data'.bytes)\n        request.addFile file\n        controller.uploadFile()\n\n        then:\n        file.targetFileLocation.path == '/tmp/upload/test.jpg'\n        response.text == \"OK\"\n    }\n\n    void \"Command\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30c6\u30b9\u30c8\"() {\n        setup:\n        def co = new TestCommand(name:name, age:age)\n        // \u3053\u306e\u30c6\u30b9\u30c8\u306e\u6bb5\u968e\u3067\u3001\u624b\u52d5\u3067validate\u3057\u3066\u304a\u304f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        // \u3068\u3044\u3046\u306e\u3082\u3001\u3053\u306e\u30c6\u30b9\u30c8\u306e\u6bb5\u968e\u3067\u624b\u52d5\u3067\u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08TestCommand\uff09\u3092new\u3057\u3066controller\u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u3067\u3001\n        // controller\u5074\u3067\u306f\u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306evalid()\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044\u305f\u3081\u3002\n        co.validate()\n        controller.commandObjectHandling(co)\n\n        expect:\n        response.text == result\n\n        where:\n        name  |age || result\n        'koji'| 29 || 'Good'\n        ''    | 29 || 'Bad'\n    }\n\n    void \"Command\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30c6\u30b9\u30c8(\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0)\"() {\n        setup:\n        // \u3053\u3063\u3061\u306e\u5834\u5408\u3001\u6e21\u3057\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092controller\u5074\u3067\u5224\u65ad\u3057\u3066\u81ea\u52d5\u7684\u306b\u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08TestCommand)\u306b\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u304f\u308c\u3066\u3001\n        // \u305d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067validate()\u3082\u88cf\u3067\u5b9f\u884c\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u304b\u3089\u3001\u624b\u52d5\u3067validate()\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n        params.name = name\n        params.age = age\n        controller.commandObjectHandling()\n\n        expect:\n        response.text == result\n\n        where:\n        name  |age || result\n        'koji'| 29 || 'Good'\n        ''    | 29 || 'Bad'\n    }\n\n    void \"allowedMethods\u306e\u30c6\u30b9\u30c8\uff08save\u30e1\u30bd\u30c3\u30c9\u306fPOST\u306e\u307f\u8a31\u53ef\u3068\u304b\uff09\"() {\n        setup:\n        request.method = method\n        controller.save()\n\n        expect:\n        response.status == result\n\n        // SC_OK\u3068\u304b\u306fjavax.servlet.http.HttpServletResponse\u30af\u30e9\u30b9\u306e\u5b9a\u6570\n        where:\n        method||result\n        'post'|| SC_OK\n        'get'|| SC_METHOD_NOT_ALLOWED\n        'put'|| SC_METHOD_NOT_ALLOWED\n        'update'|| SC_METHOD_NOT_ALLOWED\n        'delete' || SC_METHOD_NOT_ALLOWED\n    }\n\n    void \"\u30bf\u30b0\u30e9\u30a4\u30d6\u30e9\u30eag:message\u306e\u547c\u3073\u51fa\u3057\u30c6\u30b9\u30c8\"() {\n        when:\n        // \u3053\u306e\u30c6\u30b9\u30c8\u81ea\u4f53\u306b\u7279\u306b\u610f\u5473\u306f\u7121\u3044\u3051\u3069\u3001messageSource\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u52d5\u7684\u306bi18n\u306e\u7de8\u96c6\u304c\u3067\u304d\u308b\u3063\u307d\u3044\n        messageSource.addMessage(\"foo.bar\", request.locale, \"Hello World\")\n        controller.showMessage()\n\n        then:\n        response.text == \"Hello World\"\n    }\n\n}\n\n\n#\u53c2\u8003\n[http://grails.jp/doc/latest/guide/testing.html](http://grails.jp/doc/latest/guide/testing.html)\n[http://grails.org/doc/latest/guide/testing.html](http://grails.org/doc/latest/guide/testing.html)\n\n\n\n# \u306f\u3058\u3081\u306b\n\u4eca\u56de\u306fGrails\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c2.4\u3067\u3059\u3002\n\u6a19\u6e96\u3067Spock\u3067\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n`test-app` \u3082\u3057\u304f\u306f `test-app unit:`\n\n\u30b3\u30ec\u3067\u5b9f\u884c\u53ef\u80fd\u306a\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3069\u3042\u308a\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b\u6c17\u306b\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u3067\u3059\u3002\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u3001\u6df7\u4e71\u306e\u3082\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u73fe\u5728\u81ea\u5206\u304cGrails\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u3092\u52c9\u5f37\u4e2d\u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u307e\u3060\u5b8c\u6210\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nQiita\u306e\u4e0b\u66f8\u304d\u304c\u57cb\u307e\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u306e\u516c\u958b\u3068\u306a\u308a\u307e\u3059\u3002\n\u4eca\u5f8c\u3001\u5185\u5bb9\u306e\u4fee\u6b63\u3001\u8ffd\u8a18\u3092\u90fd\u5ea6\u884c\u3044\u307e\u3059\u3002\n\n#\u8c46\u77e5\u8b58\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306a\u306e\u3067\u3001Grails\u306f\u74b0\u5883\u3092**test**\u3068\u3057\u3066\u3001DataSource.groovy\u3068Bootstrap.groovy\u3092**\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b**\u8aad\u307f\u8fbc\u307e\u3059\u3002\n\u30b3\u30ec\u306f\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u74b0\u5883\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff09\u306b\u4f9d\u5b58\u3055\u305b\u306a\u3044\u305f\u3081\u3067\u3059\u3002\nintegration\u30c6\u30b9\u30c8\u304c\u7d9a\u3044\u3066\u5b9f\u884c\u3055\u308c\u308b\u5834\u5408\u306b\u306f\u3001\u305d\u306e\u60c5\u5831\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\n#\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\u65b9\u6cd5\n`create-domain-class Test`\u3068\u304b`create-controller Test`\u30b3\u30de\u30f3\u30c9\u3001`create-tag-lib Test`\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u305d\u308c\u7528\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\u304c\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u308b\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```groovy:TestSpec.groovy\npackage \u30d1\u30c3\u30b1\u30fc\u30b8\u540d\n\nimport grails.test.mixin.TestFor\nimport spock.lang.Specification\n\n/**\n * See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions\n */\n@TestFor(Test)\nclass TestSpec extends Specification {\n\n    def setup() {\n    }\n\n    def cleanup() {\n    }\n\n    void \"test something\"() {\n    }\n}\n```\n\n```groovy:TestControllerSpec.groovy\npackage \u30d1\u30c3\u30b1\u30fc\u30b8\u540d\n\nimport grails.test.mixin.TestFor\nimport spock.lang.Specification\n\n/**\n * See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions\n */\n@TestFor(TestController)\nclass TestControllerSpec extends Specification {\n\n    def setup() {\n    }\n\n    def cleanup() {\n    }\n\n    void \"test something\"() {\n    }\n}\n\n```\n\n\n#\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30c6\u30b9\u30c8\n\n```groovy:\u30c6\u30b9\u30c8\u5bfe\u8c61\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5185\u5bb9\npackage \u30d1\u30c3\u30b1\u30fc\u30b8\u540d\n\nimport grails.converters.JSON\nimport grails.converters.XML\nimport grails.plugin.springsecurity.annotation.Secured\nimport org.springframework.web.multipart.MultipartFile\n\nclass TestController {\n\n    def hello() {\n        render \"hello\"\n    }\n\n    def redirectToHello() {\n        redirect(controller: 'test', action: 'hello')\n    }\n\n    def methodPrinter() {\n        render request.method\n    }\n\n    def home() {\n        render(view: 'homePage', model: [title: 'Hello World'])\n    }\n\n    def showTemplate() {\n        render(template:\"snippet\")\n    }\n\n    def showBookDetails() {\n       // render(model: [title: 'The Nature Of Necessity', author: 'Alvin Plantinga'])\n        [title: 'The Nature Of Necessity', author: 'Alvin Plantinga']\n    }\n\n    def renderXml() {\n        render (contentType: 'text/xml') {\n            book(title:\"Great\")\n        }\n    }\n\n    def renderJson() {\n        render(contentType: \"application/json\") {\n            book = \"Great\"\n        }\n    }\n\n    def xmlAndJsonRequest(TestCommand t) {\n        render \"Name is ${t.name}\"\n\n    }\n\n    def xmlAndJsonRequestWithoutBinding(){\n        request.withFormat {\n            xml {\n                // \u306a\u305c\u304bXML\u304c\u5fc5\u305anull\u306b\u306a\u308b\u3002\n                // Grails\u306e\u30d0\u30b0\uff1f\n                render \"The XML Title Is ${request.XML}.\"\n            }\n            json {\n                render \"The JSON Title Is ${request.JSON.title}.\"\n            }\n        }\n    }\n\n    def mimeTypeHandling(){\n        def data = [Hello:\"World\"]\n        request.withFormat {\n            xml { render data as XML}\n            json { render data as JSON}\n            html {data}\n        }\n    }\n\n    // http://grails.org/doc/latest/ref/Controllers/withForm.html\n    def formHandling() {\n        withForm {\n            render \"Good\"\n        }.invalidToken {\n            render \"Bad\"\n        }\n    }\n\n    def uploadFile() {\n        MultipartFile file = request.getFile(\"myFile\")\n        if(!file.isEmpty()) {\n            file.transferTo( new File(\"/tmp/upload/${file.originalFilename}\") )\n            render \"OK\"\n        } else {\n            render \"NG\"\n        }\n    }\n\n    def commandObjectHandling(TestCommand cmd) {\n        if(cmd.hasErrors()) {\n            render \"Bad\"\n        } else {\n            render \"Good\"\n        }\n    }\n\n    static allowedMethods = [save:'POST']\n    def save() {\n        render \"saved.\"\n    }\n\n    def showMessage() {\n        render g.message(code:'foo.bar')\n    }\n}\n\nclass TestCommand {\n    String name\n    Integer age\n\n    static constraints = {\n        name(blank:false, minSize: 1)\n        age(min: 1)\n    }\n}\n```\n\n```groovy:\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\npackage \u30d1\u30c3\u30b1\u30fc\u30b8\u540d\n\nimport grails.test.mixin.TestFor\nimport org.codehaus.groovy.grails.plugins.testing.GrailsMockMultipartFile\nimport org.codehaus.groovy.grails.web.servlet.mvc.SynchronizerTokensHolder\nimport spock.lang.Specification\n\nimport static javax.servlet.http.HttpServletResponse.SC_METHOD_NOT_ALLOWED\nimport static javax.servlet.http.HttpServletResponse.SC_OK\n\n\n/**\n * See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions\n */\n@TestFor(TestController)\nclass TestControllerSpec extends Specification {\n\n    def setup() {\n    }\n\n    def cleanup() {\n    }\n\n    void \"\u57fa\u672c\u7684\u306a\u30c6\u30b9\u30c8\"() {\n        when:\n        controller.hello()\n\n        then:\n        response.text == 'hello'\n    }\n\n    void \"\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u306e\u30c6\u30b9\u30c8\"() {\n        when:\n        controller.redirectToHello()\n\n        then:\n        response.redirectedUrl == '/test/hello'\n    }\n\n    void \"\u30ea\u30af\u30a8\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u78ba\u8a8d\"(){\n        when:\n        request.method ='POST'\n        controller.methodPrinter()\n        then:\n        response.text == \"POST\"\n    }\n\n    void \"\u30ea\u30af\u30a8\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u78ba\u8a8d\uff08\u8907\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\uff09\" () {\n        setup:\n        request.method = method\n        controller.methodPrinter()\n\n        expect:\n        response.text == result\n\n        where:\n        method ||result\n        'POST' || 'POST'\n        'GET'  || 'GET'\n    }\n\n    void \"\u8868\u793a\u3055\u308c\u308bview\u3068\u6e21\u3055\u308c\u308b\u30e2\u30c7\u30eb\u306e\u30c6\u30b9\u30c8\" (){\n        when:\n        controller.home()\n\n        then:\n        view == '/test/homePage'\n        model.title == 'Hello World'\n    }\n\n    void \"Map\u3092\u8fd4\u3059\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30c6\u30b9\u30c8\" () {\n        // \u4e0a\u8a18\u306e\u30c6\u30b9\u30c8\u3068\u9055\u3063\u3066\u3001contrller\u5074\u3067model\u3068\u308f\u3056\u308f\u3056\u6307\u5b9a\u305b\u305a\u306b\u30c7\u30fc\u3066\u3042\uff08Map)\u304c\u8fd4\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\n        // \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        when:\n        def model = controller.showBookDetails()\n\n        then:\n        model.author == 'Alvin Plantinga'\n    }\n\n    void \"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u8868\u793a\u30c6\u30b9\u30c8\" () {\n        // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e2d\u8eab\u306f\u76f4\u63a5\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3002\n        when:\n        controller.showTemplate()\n\n        then:\n        response.text == \"contents of template\"\n    }\n\n    void \"\u30c6\u30b9\u30c8\u306e\u305f\u3081\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e2d\u8eab\u3092\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\"() {\n        // GroovyPages \u30e2\u30c3\u30af\u3068\u3044\u3046\u3089\u3057\u3044\n        when:\n        views ['/test/_snippet.gsp'] = 'mock template content'\n        controller.showTemplate()\n\n        then:\n        response.text == 'mock template content'\n    }\n\n\n\n    void \"XML\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u30c6\u30b9\u30c8\"() {\n        // XML\u3082\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3002\n        // response.xml\u306fXmlSlurper\n        when:\n        controller.renderXml()\n\n        then:\n        response.text == \"<book title='Great'/>\"\n        response.xml.@title.text() == 'Great'\n    }\n\n    void \"JSON\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u30c6\u30b9\u30c8\"() {\n        // JSON\u3082\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u307e\u308c\u308b\n        // response.json\u306forg.codehaus.groovy.grails.web.json.JSONElemen\n        when:\n        controller.renderJson()\n\n        then:\n        response.text == '{\"book\":\"Great\"}'\n        response.json.book == 'Great'\n    }\n\n\n    void \"xml\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30b9\u30c8\"() {\n        when:\n        request.xml = new Test(name: \"koji\", age: 29)\n        controller.xmlAndJsonRequest()\n\n        then:\n        response.text == 'Name is koji'\n    }\n\n    void \"json\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30b9\u30c8\"() {\n        when:\n        request.json = new Test(name: \"koji\", age: 29)\n        controller.xmlAndJsonRequest()\n\n        then:\n        response.text == 'Name is koji'\n    }\n\n// \u306a\u3093\u304b\u3057\u3089\u3093\u304c\u52d5\u304b\u306a\u3044\u3002\n// \u9001\u4fe1\u306f\u3061\u3083\u3093\u3068\u51fa\u6765\u3066\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u5074\u3067\u3082\u3061\u3083\u3093\u3068XML\u6271\u3044\u306b\u306a\u308b\u3051\u3069\u3001\u4f55\u6545\u304bXML\u3068\u3057\u3066\u306e\u5024\u304c\u53d6\u308c\u305a\u306bNULL\u306b\u306a\u308b\u3002\n//    void \"xml\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30b9\u30c82\"() {\n//        when:\n//            //request.xml = \"<title>Wool</title>\"\n//            //request.xml = '<book title=\"The Stand\"><title>aaaaaaaa</title></book>'\n//            request.xml = new Test(name:\"koji\", age:29)\n//            controller.xmlAndJsonRequestWithoutBinding()\n//        then:\n//            response.text == 'The XML Title Is Hoge!'\n//    }\n\n    void \"json\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30b9\u30c82\"() {\n        when:\n        request.json = '{title:The Stand}'\n        controller.xmlAndJsonRequestWithoutBinding()\n\n        then:\n        response.text == 'The JSON Title Is The Stand.'\n    }\n\n    void \"\u30de\u30a4\u30e0\u30bf\u30a4\u30d7\u306e\u5236\u5fa1\u30c6\u30b9\u30c8\uff08\uff58\uff4d\uff4c\uff09\"(){\n        when:\n        // XML_CONTENT_TYPE\u3068\u3044\u3046\u5b9a\u6570\u3082\u3042\u308b\u306e\u3067\u305d\u3044\u3064\u3092\u6e21\u3057\u3066\u3082OK\n        request.contentType = 'application/xml'\n        controller.mimeTypeHandling()\n\n        then:\n        response.text == '<?xml version=\"1.0\" encoding=\"UTF-8\"?><map><entry key=\"Hello\">World</entry></map>'\n    }\n    void \"\u30de\u30a4\u30e0\u30bf\u30a4\u30d7\u306e\u5236\u5fa1\u30c6\u30b9\u30c8\uff08json\uff09\"(){\n        when:\n        // JSON_CONTENT_TYPE\u3068\u3044\u3046\u5b9a\u6570\u3082\u3042\u308b\u306e\u3067\u305d\u3044\u3064\u3092\u6e21\u3057\u3066\u3082OK\n        request.contentType = 'application/json'\n        controller.mimeTypeHandling()\n\n        then:\n        response.text == '{\"Hello\":\"World\"}'\n    }\n\n    void \"\u30d5\u30a9\u30fc\u30e0\u306e2\u91cd\u9001\u4fe1\u30c6\u30b9\u30c8\"() {\n        // withForm \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30c8\u30fc\u30af\u30f3\u304c\u5fc5\u9808\u3068\u306a\u308b\u3002\n        when:\n        controller.formHandling()\n\n        then:\n        response.text == \"Bad\"\n\n        when:\n        response.reset()\n        def tokenHolder = SynchronizerTokensHolder.store(session)\n\n        params[SynchronizerTokensHolder.TOKEN_URI] = '/test/formHandling'\n        params[SynchronizerTokensHolder.TOKEN_KEY] = tokenHolder.generateToken(params[SynchronizerTokensHolder.TOKEN_URI])\n        controller.formHandling()\n\n        then:\n        response.text == \"Good\"\n    }\n\n    void \"\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u30c6\u30b9\u30c8\"() {\n        when:\n        GrailsMockMultipartFile file = new GrailsMockMultipartFile('myFile', 'test.jpg', 'image/jpeg', 'some file data'.bytes)\n        request.addFile file\n        controller.uploadFile()\n\n        then:\n        file.targetFileLocation.path == '/tmp/upload/test.jpg'\n        response.text == \"OK\"\n    }\n\n    void \"Command\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30c6\u30b9\u30c8\"() {\n        setup:\n        def co = new TestCommand(name:name, age:age)\n        // \u3053\u306e\u30c6\u30b9\u30c8\u306e\u6bb5\u968e\u3067\u3001\u624b\u52d5\u3067validate\u3057\u3066\u304a\u304f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        // \u3068\u3044\u3046\u306e\u3082\u3001\u3053\u306e\u30c6\u30b9\u30c8\u306e\u6bb5\u968e\u3067\u624b\u52d5\u3067\u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08TestCommand\uff09\u3092new\u3057\u3066controller\u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u3067\u3001\n        // controller\u5074\u3067\u306f\u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306evalid()\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044\u305f\u3081\u3002\n        co.validate()\n        controller.commandObjectHandling(co)\n\n        expect:\n        response.text == result\n\n        where:\n        name  |age || result\n        'koji'| 29 || 'Good'\n        ''    | 29 || 'Bad'\n    }\n\n    void \"Command\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30c6\u30b9\u30c8(\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0)\"() {\n        setup:\n        // \u3053\u3063\u3061\u306e\u5834\u5408\u3001\u6e21\u3057\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092controller\u5074\u3067\u5224\u65ad\u3057\u3066\u81ea\u52d5\u7684\u306b\u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08TestCommand)\u306b\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u304f\u308c\u3066\u3001\n        // \u305d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067validate()\u3082\u88cf\u3067\u5b9f\u884c\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u304b\u3089\u3001\u624b\u52d5\u3067validate()\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n        params.name = name\n        params.age = age\n        controller.commandObjectHandling()\n\n        expect:\n        response.text == result\n\n        where:\n        name  |age || result\n        'koji'| 29 || 'Good'\n        ''    | 29 || 'Bad'\n    }\n\n    void \"allowedMethods\u306e\u30c6\u30b9\u30c8\uff08save\u30e1\u30bd\u30c3\u30c9\u306fPOST\u306e\u307f\u8a31\u53ef\u3068\u304b\uff09\"() {\n        setup:\n        request.method = method\n        controller.save()\n\n        expect:\n        response.status == result\n\n        // SC_OK\u3068\u304b\u306fjavax.servlet.http.HttpServletResponse\u30af\u30e9\u30b9\u306e\u5b9a\u6570\n        where:\n        method||result\n        'post'|| SC_OK\n        'get'|| SC_METHOD_NOT_ALLOWED\n        'put'|| SC_METHOD_NOT_ALLOWED\n        'update'|| SC_METHOD_NOT_ALLOWED\n        'delete' || SC_METHOD_NOT_ALLOWED\n    }\n\n    void \"\u30bf\u30b0\u30e9\u30a4\u30d6\u30e9\u30eag:message\u306e\u547c\u3073\u51fa\u3057\u30c6\u30b9\u30c8\"() {\n        when:\n        // \u3053\u306e\u30c6\u30b9\u30c8\u81ea\u4f53\u306b\u7279\u306b\u610f\u5473\u306f\u7121\u3044\u3051\u3069\u3001messageSource\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u52d5\u7684\u306bi18n\u306e\u7de8\u96c6\u304c\u3067\u304d\u308b\u3063\u307d\u3044\n        messageSource.addMessage(\"foo.bar\", request.locale, \"Hello World\")\n        controller.showMessage()\n\n        then:\n        response.text == \"Hello World\"\n    }\n\n}\n```\n", "tags": ["Grails2.4.3"]}