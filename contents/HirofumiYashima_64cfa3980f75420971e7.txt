{"context": "BtoC\u30d3\u30b8\u30cd\u30b9 \u3067\u3001\u304a\u5ba2\u69d8 \u304b\u3089\u3044\u305f\u3060\u3044\u305f \u904e\u53bb\u306e\u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u30c8\u30fc\u30af\u5c65\u6b74\uff08\u97f3\u58f0\u30c7\u30fc\u30bf\uff09 \u3092 \u81ea\u52d5\u6587\u5b57\u8d77\u3053\u3057 \u3057\u305f \u30c6\u30ad\u30b9\u30c8\u30fb\u30c7\u30fc\u30bf \u304c \u624b\u5143\u306b\u3042\u308b \u5834\u5408\u3001 \u300c\u9867\u5ba2\u7a2e\u5225\u300d\u00d7\u300c\u30af\u30ec\u30fc\u30e0\u5bfe\u8c61\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u300d\u5225 \u306b\u3001\u4f1a\u8a71 \u5185 \u3067 \u767a\u8a71\u3055\u308c\u305f \u5358\u8a9e\u51fa\u73fe\u56de\u6570 \u3092 Python \u3067 \u30d0\u30c3\u30c1\u96c6\u8a08\uff06\u5b9a\u6642JSON\u30d5\u30a1\u30a4\u30eb\u51fa\u529b \u3057\u3066\u3001 \u65b0\u898f\u30af\u30ec\u30fc\u30e0\u5165\u96fb\u76f4\u5f8c \u306b\u3001\u904e\u53bb\u306e\u51fa\u73fe\u56de\u6570 \u4e0a\u4f4d\u5358\u8a9e \u3092 JSON\u30d5\u30a1\u30a4\u30eb \u306b \u53c2\u7167\u304b\u3051\u3066\u3001\u30af\u30ec\u30fc\u30e0\u5185\u5bb9 \u3092 \u4e88\u6e2c\u652f\u63f4\u3059\u308b\u30b7\u30b9\u30c6\u30e0 \u3092 \u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\uff08 \u7528\u9014 \uff09\n\n\n\uff08A) \u65b0\u898f\u30c7\u30fc\u30bf\u304c\u6765\u305f\u969b\u3001\u5f53\u8a72\u30c7\u30fc\u30bf \u3068 \u540c\u3058\u5c5e\u6027\u3092\u6301\u3064\u904e\u53bb\u30c7\u30fc\u30bf\u96c6\u5408 \u306b\u304a\u3051\u308b \u904e\u53bb\u306e\u983b\u51fa\u5358\u8a9e \u3092 json\u8f9e\u66f8 \u304b\u3089 \u53d6\u5f97\u3057\u3066\u3001\u65b0\u898f\u30c7\u30fc\u30bf\u306e\u7279\u6027 \u3092 \u4e88\u6e2c\u8868\u793a\u3059\u308b\n\uff08B) \u5404\u5c5e\u6027\u30b0\u30eb\u30fc\u30d7\u3054\u3068 \u306e \u30c7\u30fc\u30bf\u7279\u5fb4\u91cf \u3092 \u983b\u51fa\u5358\u8a9e\u306e\u7279\u5fb4\u3068\u3057\u3066\u5b9a\u7fa9 => \u30af\u30e9\u30b9\u5206\u985e\u3001\u30af\u30e9\u30b9\u9593\u8ddd\u96e2\u306e\u5c0e\u51fa\uff08\u30b3\u30b5\u30a4\u30f3\u8ddd\u96e2\u307b\u304b\u3001\u5404\u7a2e\u8ddd\u96e2\u5b9a\u7fa9\uff09\u3001\u30c8\u30d4\u30c3\u30af\u30fb\u30e2\u30c7\u30eb \u306a\u3069\u3001\u6a5f\u68b0\u5b66\u7fd2\u30fb\u81ea\u7136\u8a00\u8a9e\u51e6\u7406 \u30a8\u30f3\u30b8\u30f3 \u3078\u306e \u53d7\u3051\u6e21\u3057\n\n\n\n\u3010 \u30c7\u30fc\u30bf\u30fb\u30bb\u30c3\u30c8\u4f8b  \u3011\n\n\n\uff08 BtoC \u30d3\u30b8\u30cd\u30b9 \u306e \u4e8b\u696d\u4f1a\u793e \u9867\u5ba2\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc\u30c7\u30fc\u30bf \uff09\n\n\uff08 \u4f8b \uff09\n\uff08\u6587\u5b57\u30b3\u30fc\u30c9\u306f\u3001\u3059\u3067\u306b UTF8 \u306b\u5909\u63db\u6e08\u307f \uff09\n\n\u9867\u5ba2 \u4f1a\u54e1\u30af\u30e9\u30b9\u540d\n\n\u9867\u5ba2 \u8cfc\u5165\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u540d\u3000\n\u30af\u30ec\u30fc\u30e0\u5185\u5bb9\uff08\u30c6\u30ad\u30b9\u30c8\u30fb\u30c7\u30fc\u30bf\uff09\n\n\n\n\u203b \u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u6848\u4ef6\u3054\u3068 \u306e \u30af\u30ec\u30fc\u30e0\u5bfe\u8c61\u5546\u54c1\u306e\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306f\u3001\u4ee5\u4e0b\u306e\u30b7\u30b9\u30c6\u30e0\u52d5\u7dda\u3067\u3001\u30c7\u30fc\u30bf\u304c\u81ea\u52d5\u3067\u751f\u6210\u30fb\u84c4\u7a4d\u3055\u308c\u308b\u5efa\u3066\u4ed8\u3051\u3092\u60f3\u5b9a\u3002\n\n\n\u53d7\u4ed8\u30aa\u30da\u30ec\u30fc\u30bf\uff08\u4eba\u9593\uff09 \u306b \u96fb\u8a71 \u304c \u3064\u306a\u304c\u308b\u524d\u306e\u5de5\u7a0b\uff08\u81ea\u52d5\u96fb\u8a71\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0\uff09\u3067\u3001\u3069\u306e\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u306b\u3064\u3044\u3066\u306e\u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u304b\u3001\u30d7\u30c3\u30b7\u30e5\u30fb\u30dc\u30bf\u30f3\u3067\u9867\u5ba2\u306b\u9078\u629e\u3057\u3066\u9802\u304f\u52d5\u7dda\u304c\u3042\u308a\u3001\u30b7\u30b9\u30c6\u30e0\u306b\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u306e\u7a2e\u5225\u30c7\u30fc\u30bf \u304c \u5165\u529b\u3055\u308c\u3066\u3044\u308b\u60f3\u5b9a\n\n\n\n\u3010 \u4e0a\u8a18\u30c7\u30fc\u30bf \u3092 \u6d3b\u7528\u3057\u3066\u3001\u5b9f\u73fe\u3057\u305f\u3044\u51e6\u7406 \u3011\n\n\n\u307e\u305a\u306f\u3001\u3010 \u7528\u9014\uff08A) \u3011 \u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u4f8b \u3092 \u8003\u3048\u308b\n\n\n\n\u300c\u9867\u5ba2\u4f1a\u54e1\u30af\u30e9\u30b9\u300d\u00d7\u300c\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc \u306e \u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u300d\u306e\uff12\u8ef8\u3067\u3001\u300c\u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u30b0\u30eb\u30fc\u30d7\u300d \u3092 \u7d44\u6210\uff08\u5b9a\u7fa9\uff09\u3059\u308b\n\u4e0a\u8a18 \u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u30b0\u30eb\u30fc\u30d7 \u3054\u3068\u306b\u3001 \u904e\u53bb\u306e\u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u5185\u5bb9\uff08\u4f1a\u8a71\u97f3\u58f0\u30c7\u30fc\u30bf \u3092 \u30c6\u30ad\u30b9\u30c8\u30fb\u30c7\u30fc\u30bf \u306b \u81ea\u52d5\u6587\u5b57\u8d77\u3053\u3057\uff09 \u306e \u5358\u8a9e\u5225 \u51fa\u73fe\u56de\u6570 \u7d71\u8a08\u60c5\u5831\uff08\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09 \u3092 \u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3001\n\u304a\u5ba2\u69d8 \u304b\u3089 \u65b0\u898f\u306e\u30af\u30ec\u30fc\u30e0\u9023\u7d61 \u304c \u5165\u3063\u305f\u77ac\u9593\u306b\u3001\u305d\u306e\u30af\u30ec\u30fc\u30e0\u6848\u4ef6 \u304c \u5c5e\u3059\u308b \u300c\u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u30b0\u30eb\u30fc\u30d7\u300d \u3092 \u81ea\u52d5\u8a8d\u8b58\u3057\u3066\u3001\n\u5f53\u8a72\u300c\u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u30b0\u30eb\u30fc\u30d7\u300d \u306e \u3053\u308c\u307e\u3067\u3000\u306e\u3000\u30af\u30ec\u30fc\u30e0\u4f1a\u8a71\u5185 \u983b\u51fa\u5358\u8a9e\uff08\u51fa\u73fe\u56de\u6570\u4e0a\u4f4d N \u4ef6\uff09 \u3092 \u5358\u8a9e\u5225 \u51fa\u73fe\u56de\u6570 \u7d71\u8a08\u60c5\u5831\uff08\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3000\u3092 \u81ea\u52d5\u53c2\u7167\u3057\u3066\u3001\n\n\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc\u30aa\u30da\u30ec\u30fc\u30bf\uff08\u4eba\u9593\uff09 \u306e PC\u753b\u9762 \u306b \u51fa\u529b\u3059\u308b\n\n\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc\u30aa\u30da\u30ec\u30fc\u30bf\uff08\u4eba\u9593\uff09 \u306f\u3001\u305d\u306e\u5358\u8a9e\u30bb\u30c3\u30c8\u3092\u898b\u3066\u3001\u96fb\u8a71\u5fdc\u5bfe\u306e\u30b7\u30ca\u30ea\u30aa \u3092 \u5148\u56de\u308a\u3057\u3066 \u5fdc\u5bfe\u30c8\u30fc\u30af\u3092\u30a4\u30e1\u30fc\u30b8\u3059\u308b \u5fc3\u7406\u7684\u6642\u9593 \u3092 \u6301\u3066\u308b\u3088\u3046 \u652f\u63f4\u3059\u308b\n\n\n\n\u3010 Python \u30b9\u30af\u30ea\u30d7\u30c8 \u3011\n\n\n\uff08 \u904e\u53bb\u30af\u30ec\u30fc\u30e0\u5185\u5bb9 \u5c65\u6b74\u30c7\u30fc\u30bf\u30fb\u30bb\u30c3\u30c8 \u306e \u8aad\u307f\u8fbc\u307f \uff09\n\n\nAnaconda jupyter notebook\n!pwd\n!ls | grep customer_claims_data.csv\n!head customer_claims_data.csv\n\n\n\nPandas DataFrame \u3078\u306e \u53d6\u308a\u8fbc\u307f\n\n\nPython3\nimport pandas as pd\nclaims_pd = pd.read_csv('customer_claims_data.csv')\n# claims_pd.shape\n# claims_pd.info()\n# claims_pd.describe()\n# claims_pd.columns\n\n\n\n\u300c\u9867\u5ba2\u30b0\u30eb\u30fc\u30d7\u300d\u5225 \u306e \u300c\u904e\u53bb\u30af\u30ec\u30fc\u30e0\u4f1a\u8a71\u5185 \u5358\u8a9e\u5225 \u51fa\u73fe\u56de\u6570 \u7d71\u8a08\u30c7\u30fc\u30bf\u300d \u306e \u751f\u6210\n\n\nPython3\n# claims_pd.groupby(['cust_class', 'item_category']).count().head(100)\n\nclaims_pd['class_item_category_joint_col'] = claims_pd['cust_class'] + \"_\" + claims_pd['item_category'] \n# claims_pd.ix[35000:35010, ['class_item_category_joint_col', 'claim_desc']]\n\n\n\n\u300c\u4f1a\u54e1\u30af\u30e9\u30b9\u300d\u00d7\u300c\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u300d\u7d44\u307f\u5408\u308f\u305b\u30b0\u30eb\u30fc\u30d7 \u306e \u5168\u30d1\u30bf\u30fc\u30f3\uff08\u91cd\u8907\u6392\u9664\uff09 \u306e \u30ea\u30b9\u30c8 \u3092 \u751f\u6210\n\n\nPython3\nclass_item_category_unique_list = list(set(list(claims_pd['class_item_category_joint_col'])))\n# print(len(class_item_category_unique_list))\n# print(class_item_category_unique_list[0:20])\n# claims_pd.ix[claims_pd['class_item_category_joint_col'] == '\u30d7\u30e9\u30c1\u30ca\u4f1a\u54e1_\u9ad8\u7d1a\u30d9\u30c3\u30c9', ['class_item_category_joint_col', 'claim_desc']]\n\n\n\n\u30c8\u30fc\u30af\u30f3\u3054\u3068 \u306b \u5206\u304b\u3061\u66f8\u304d\u3057\u3066\u3001\u7279\u5b9a\u306e\u54c1\u8a5e\u306e\u307f \u62bd\u51fa\u3057\u3066 \u30ea\u30b9\u30c8 \u306b \u683c\u7d0d\u3059\u308b\u51e6\u7406 \u3092\u884c\u3046 \u30e1\u30bd\u30c3\u30c9\n\n\uff08 \u53c2\u8003 \uff09\n\nHirofumiYashima Qiita\u8a18\u4e8b \uff082016/01/06\uff09\u300cPython \u3067 MeCab \u3092\u4f7f\u3063\u3066\u3001\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\u306e\u30c8\u30fc\u30af\u30f3\u3060\u3051\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3057\u3066\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u5f0f\u300d\n\n\nPython3\ndef get_token_list(text, hinshi):\n    import MeCab\n    token_list = []\n    mt = MeCab.Tagger(\"-Ochasen -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd\")\n    mt.parse('') \n    node = mt.parseToNode(text)\n    while node:\n        feats = node.feature.split(',')\n        if feats[0] in hinshi :\n            try:\n                token_list.append(node.surface)\n            except:\n                print(\"err: \" + str(node.surface))\n\n        node = node.next\n\n    return token_list\n\n\n\n\u30c8\u30fc\u30af\u30f3\u30fb\u30ea\u30b9\u30c8 \u3092 \u53d7\u3051\u53d6\u308a\u3001\u30c8\u30fc\u30af\u30f3\u4ef6\u6570\u5206\u3001{\u30c8\u30fc\u30af\u30f3\u6587\u5b57\u5217 : \u305d\u306e\u30c8\u30fc\u30af\u30f3\u306e\u51fa\u73fe\u56de\u6570 } \u3092 \u683c\u7d0d\u3057\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 \u51e6\u7406 \u3092\u884c\u3046 \u30e1\u30bd\u30c3\u30c9\n\n\nPython3\ndef get_token_freq_dict_list(string_object):\n    from collections import Counter\n    counter = Counter(string_object)\n\n    output_list = []\n    for word, cnt in counter.most_common():\n        if len(word) < 2: # \u6587\u5b57\u6570\u304c\uff12\u6587\u5b57\u4ee5\u4e0b\uff08\uff11\u6587\u5b57\uff09\u306e\u30c8\u30fc\u30af\u30f3\u306f\u9664\u53bb\u3059\u308b\n            continue\n        else:\n            output_list.append({word : cnt})\n\n    # http://docs.python.jp/2/howto/sorting.html\n    return sorted(output_list, key=lambda x_dict: x_dict.keys())  \n\n\n\n\u300c\u4f1a\u54e1\u30af\u30e9\u30b9\u300d\u00d7\u300c\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u300d\u5168\u7d44\u307f\u5408\u308f\u305b \u9867\u5ba2\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u3001 \u8a72\u5f53\u9867\u5ba2 \u306e \u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u5185\u5bb9\uff08\u81ea\u7531\u30c6\u30ad\u30b9\u30c8\u8a18\u8ff0\u5f62\u5f0f\uff09 \u306e\u5358\u8a9e\u983b\u51fa\u7d71\u8a08\u60c5\u5831 \u3092 \u683c\u7d0d\u3057\u305f\u8f9e\u66f8 \u3092 \u8fd4\u3059 \u51e6\u7406 \u3092\u884c\u3046 \u30e1\u30bd\u30c3\u30c9\n\u5404\u9867\u5ba2\u30b0\u30eb\u30fc\u30d7 \u306e \u30a2\u30f3\u30b1\u30fc\u30c8 \u306b \u767b\u5834\u3059\u308b\u300c\u540d\u8a5e\u300d\u53ca\u3073\u300c\u51fa\u73fe\u56de\u6570\u300d\u3092\u56de\u6570\u591a\u3044\u9806\uff08\u964d\u9806\uff09\u3000\u3092 \u4ee5\u4e0b\u306e\u5f62\u5f0f \u3067 \u8fd4\u3059\n\n\njson\u30d5\u30a1\u30a4\u30eb\n{\"\u30b4\u30fc\u30eb\u30c9\u4f1a\u54e1_\u9ad8\u984d\u30aa\u30fc\u30c7\u30a3\u30aa\u6a5f\u5668\" : [{\"\u97f3\u8cea\" : 765}, {\"\u91cd\u4f4e\u97f3\" : 567}, {\"\u30b5\u30dd\u30fc\u30c8\" : 501}, {\"\u7f6e\u304d\u5834\u6240\" : 434}, ...... ],\n \"\u901a\u5e38\u4f1a\u54e1_\u9ad8\u984d\u30aa\u30fc\u30c7\u30a3\u30aa\u6a5f\u5668\" : [{\"\u4fa1\u683c\" : 976}, {\"\u6620\u753b\u9928\" : 650}, {\"\u91cd\u3055\" : 548}, .....],\n ....}\n\n\n\n\u3010 \u7d71\u8a08\u60c5\u5831\u8f9e\u66f8 \u306e \u751f\u6210 \u3011\n\n\nPython3\nfrom collections import defaultdict \noutput_dict = defaultdict(dict)\n\nfor class_item_category_name in class_item_category_unique_list:\n    tmp_df = claims_pd.ix[claims_pd['class_item_category_joint_col'] == class_item_category_name, ['claim_desc']]\n    claim_sentence_list = tmp_df['claim_desc'].tolist()\n    cleaned_claim_sentences = \"\"\n    for claim_sentence in claim_sentence_list:\n        cleanded_claim_sentence = str(claim_sentence).replace(\"[\",\"\").replace(\"]\",\"\").replace('\\\\r\\\\n','')\\\n                                                     .replace('\\\\u3000','').replace('nan','').replace(',','')\\\n                                                     .replace(\"'\", \"\").replace('\u30fb','').replace(' ','')\n        cleaned_claim_sentences += cleanded_claim_sentence # \u5168\u30ec\u30b3\u30fc\u30c9\uff08\u5168\u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u8a18\u9332\uff09\u306e\u300c\u30af\u30ec\u30fc\u30e0\u5185\u5bb9\u300d\u96fb\u8a71\u4f1a\u8a71\u6587\u5b57\u8d77\u3053\u3057\u30c6\u30ad\u30b9\u30c8\u6587 \u3092 \u6587\u5b57\u5217\u7d50\u5408\n\n        hinshi = [\"\u540d\u8a5e\"]\n        claim_noun_list = get_token_list(cleaned_claim_sentences, hinshi)\n\n        claim_token_counted_freq_dict_list = get_token_freq_dict_list(claim_noun_list)        \n        output_dict[class_item_category_name] = claim_token_counted_freq_dict_list\n\n\n\uff08 \u7d71\u8a08\u60c5\u5831\u8f9e\u66f8 \u3078\u306e \u51fa\u529b\u5185\u5bb9 \u78ba\u8a8d \uff09\n\nPython3\n# print(list(output_dict.keys())[0:20])\n\n\nkeys_whose_value_is_not_empty_list = [key for key in list(output_dict.keys()) if not(output_dict[key])==[]]\n# print(len(keys_whose_value_is_not_empty_list))\n\n#print(\"group_name : \\n\", keys_whose_value_is_not_empty_list[0], \"\\n\\n\", \"tokens : \\n\", output_dict[keys_whose_value_is_not_empty_list[0]])\n#print(\"group_name : \\n\", keys_whose_value_is_not_empty_list[1], \"\\n\\n\", \"tokens : \\n\", output_dict[keys_whose_value_is_not_empty_list[1]])\n#print(\"group_name : \\n\", keys_whose_value_is_not_empty_list[2], \"\\n\\n\", \"tokens : \\n\", output_dict[keys_whose_value_is_not_empty_list[2]])\n\n\n\n\u30a4\u30f3\u30c7\u30f3\u30c8\u6210\u5f62\u3057\u3066\u3001\u5168\u4ef6\u51fa\u529b\n\n\uff08 \u4ee5\u4e0b\u306f\u6587\u5b57\u5316\u3051 \uff09\n\nPython3\nimport json\nprint(json.dumps(output_dict, sort_keys=True, indent=4)))\n\n\n\n\uff08 \u4ee5\u4e0b\u3067OK \uff09\n\n\nPython3\nimport json\nprint(json.dumps(output_dict,\n                indent=4,\n                ensure_ascii=False,\n                sort_keys=True))\n\n\n\n\n\uff08 \u53c2\u8003 \uff09\n\nHirofumiYashima Qiita\u8a18\u4e8b\uff082016/03/24\uff09 \u300c\u3010 Python \u3011\u65e5\u672c\u8a9e\u6587\u5b57 \u3092 \u542b\u3080 \u8f9e\u66f8\uff08dict\uff09\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092 json.dump \u3057\u3066\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\u3059\u308b\u3068\u304d\u306f\u3001\u6587\u5b57\u5316\u3051\u9632\u3050\u305f\u3081\u306b\u3001\u5fc5\u305a ensure_ascii=False \u30aa\u30d7\u30b7\u30e7\u30f3\u6307\u5b9a \u3092\u4ed8\u3051\u308b\u300d\n\n\n\u7d71\u8a08\u60c5\u5831\u8f9e\u66f8 \u306e JSON\u30d5\u30a1\u30a4\u30eb \u51fa\u529b\uff08\u6587\u5b57\u30b3\u30fc\u30c9: UTF-8\uff09\n\n\nPython3\nimport codecs\n\nwith open('claim_token_freq_dict_per_cust_class_and_item_category.json\", 'w', 'utf-8') as f:\n    json.dumps(output_dict, f,\n               indent=4,\n               ensure_ascii=False,\n               sort_keys=True))\n\n\n\n__BtoC\u30d3\u30b8\u30cd\u30b9__ \u3067\u3001__\u304a\u5ba2\u69d8 \u304b\u3089\u3044\u305f\u3060\u3044\u305f \u904e\u53bb\u306e\u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u30c8\u30fc\u30af\u5c65\u6b74\uff08\u97f3\u58f0\u30c7\u30fc\u30bf\uff09__ \u3092 \u81ea\u52d5\u6587\u5b57\u8d77\u3053\u3057 \u3057\u305f \u30c6\u30ad\u30b9\u30c8\u30fb\u30c7\u30fc\u30bf \u304c \u624b\u5143\u306b\u3042\u308b \u5834\u5408\u3001 __\u300c\u9867\u5ba2\u7a2e\u5225\u300d\u00d7\u300c\u30af\u30ec\u30fc\u30e0\u5bfe\u8c61\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u300d\u5225__ \u306b\u3001__\u4f1a\u8a71 \u5185 \u3067 \u767a\u8a71\u3055\u308c\u305f \u5358\u8a9e\u51fa\u73fe\u56de\u6570__ \u3092 __Python \u3067 \u30d0\u30c3\u30c1\u96c6\u8a08\uff06\u5b9a\u6642JSON\u30d5\u30a1\u30a4\u30eb\u51fa\u529b__ \u3057\u3066\u3001 __\u65b0\u898f\u30af\u30ec\u30fc\u30e0\u5165\u96fb\u76f4\u5f8c__ \u306b\u3001__\u904e\u53bb\u306e\u51fa\u73fe\u56de\u6570 \u4e0a\u4f4d\u5358\u8a9e__ \u3092 __JSON\u30d5\u30a1\u30a4\u30eb \u306b \u53c2\u7167__\u304b\u3051\u3066\u3001__\u30af\u30ec\u30fc\u30e0\u5185\u5bb9 \u3092 \u4e88\u6e2c\u652f\u63f4__\u3059\u308b\u30b7\u30b9\u30c6\u30e0 \u3092 \u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n###__\uff08 \u7528\u9014 \uff09__\n\n* \uff08A) \u65b0\u898f\u30c7\u30fc\u30bf\u304c\u6765\u305f\u969b\u3001\u5f53\u8a72\u30c7\u30fc\u30bf \u3068 \u540c\u3058\u5c5e\u6027\u3092\u6301\u3064\u904e\u53bb\u30c7\u30fc\u30bf\u96c6\u5408 \u306b\u304a\u3051\u308b \u904e\u53bb\u306e\u983b\u51fa\u5358\u8a9e \u3092 json\u8f9e\u66f8 \u304b\u3089 \u53d6\u5f97\u3057\u3066\u3001\u65b0\u898f\u30c7\u30fc\u30bf\u306e\u7279\u6027 \u3092 \u4e88\u6e2c\u8868\u793a\u3059\u308b\n* \uff08B) \u5404\u5c5e\u6027\u30b0\u30eb\u30fc\u30d7\u3054\u3068 \u306e \u30c7\u30fc\u30bf\u7279\u5fb4\u91cf \u3092 \u983b\u51fa\u5358\u8a9e\u306e\u7279\u5fb4\u3068\u3057\u3066\u5b9a\u7fa9 => \u30af\u30e9\u30b9\u5206\u985e\u3001\u30af\u30e9\u30b9\u9593\u8ddd\u96e2\u306e\u5c0e\u51fa\uff08\u30b3\u30b5\u30a4\u30f3\u8ddd\u96e2\u307b\u304b\u3001\u5404\u7a2e\u8ddd\u96e2\u5b9a\u7fa9\uff09\u3001\u30c8\u30d4\u30c3\u30af\u30fb\u30e2\u30c7\u30eb \u306a\u3069\u3001\u6a5f\u68b0\u5b66\u7fd2\u30fb\u81ea\u7136\u8a00\u8a9e\u51e6\u7406 \u30a8\u30f3\u30b8\u30f3 \u3078\u306e \u53d7\u3051\u6e21\u3057\n\n___\n\n##__\u3010 \u30c7\u30fc\u30bf\u30fb\u30bb\u30c3\u30c8\u4f8b  \u3011__\n\n####__\uff08 BtoC \u30d3\u30b8\u30cd\u30b9 \u306e \u4e8b\u696d\u4f1a\u793e \u9867\u5ba2\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc\u30c7\u30fc\u30bf \uff09__\n\n__\uff08 \u4f8b \uff09__\n\n\uff08\u6587\u5b57\u30b3\u30fc\u30c9\u306f\u3001\u3059\u3067\u306b UTF8 \u306b\u5909\u63db\u6e08\u307f \uff09\n\n* __\u9867\u5ba2 \u4f1a\u54e1\u30af\u30e9\u30b9\u540d__\n* __\u9867\u5ba2 \u8cfc\u5165\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u540d__\u3000\n* __\u30af\u30ec\u30fc\u30e0\u5185\u5bb9\uff08\u30c6\u30ad\u30b9\u30c8\u30fb\u30c7\u30fc\u30bf\uff09__\n\n___\n\n####__\u203b \u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u6848\u4ef6\u3054\u3068 \u306e \u30af\u30ec\u30fc\u30e0\u5bfe\u8c61\u5546\u54c1\u306e\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306f\u3001\u4ee5\u4e0b\u306e\u30b7\u30b9\u30c6\u30e0\u52d5\u7dda\u3067\u3001\u30c7\u30fc\u30bf\u304c\u81ea\u52d5\u3067\u751f\u6210\u30fb\u84c4\u7a4d\u3055\u308c\u308b\u5efa\u3066\u4ed8\u3051\u3092\u60f3\u5b9a\u3002__\n\n* \u53d7\u4ed8\u30aa\u30da\u30ec\u30fc\u30bf\uff08\u4eba\u9593\uff09 \u306b \u96fb\u8a71 \u304c \u3064\u306a\u304c\u308b\u524d\u306e\u5de5\u7a0b\uff08\u81ea\u52d5\u96fb\u8a71\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0\uff09\u3067\u3001\u3069\u306e\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u306b\u3064\u3044\u3066\u306e\u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u304b\u3001\u30d7\u30c3\u30b7\u30e5\u30fb\u30dc\u30bf\u30f3\u3067\u9867\u5ba2\u306b\u9078\u629e\u3057\u3066\u9802\u304f\u52d5\u7dda\u304c\u3042\u308a\u3001\u30b7\u30b9\u30c6\u30e0\u306b\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u306e\u7a2e\u5225\u30c7\u30fc\u30bf \u304c \u5165\u529b\u3055\u308c\u3066\u3044\u308b\u60f3\u5b9a\n\n___\n\n##__\u3010 \u4e0a\u8a18\u30c7\u30fc\u30bf \u3092 \u6d3b\u7528\u3057\u3066\u3001\u5b9f\u73fe\u3057\u305f\u3044\u51e6\u7406 \u3011__\n\n####__\u307e\u305a\u306f\u3001\u3010 \u7528\u9014\uff08A) \u3011 \u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u4f8b \u3092 \u8003\u3048\u308b__\n\n* __\u300c\u9867\u5ba2\u4f1a\u54e1\u30af\u30e9\u30b9\u300d\u00d7\u300c\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc \u306e \u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u300d\u306e\uff12\u8ef8__\u3067\u3001__\u300c\u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u30b0\u30eb\u30fc\u30d7\u300d \u3092 \u7d44\u6210\uff08\u5b9a\u7fa9\uff09__\u3059\u308b\n* \u4e0a\u8a18 \u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u30b0\u30eb\u30fc\u30d7 \u3054\u3068\u306b\u3001 \u904e\u53bb\u306e\u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u5185\u5bb9\uff08\u4f1a\u8a71\u97f3\u58f0\u30c7\u30fc\u30bf \u3092 \u30c6\u30ad\u30b9\u30c8\u30fb\u30c7\u30fc\u30bf \u306b \u81ea\u52d5\u6587\u5b57\u8d77\u3053\u3057\uff09 \u306e __\u5358\u8a9e\u5225 \u51fa\u73fe\u56de\u6570 \u7d71\u8a08\u60c5\u5831\uff08\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09__ \u3092 \u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3001\n* \u304a\u5ba2\u69d8 \u304b\u3089 \u65b0\u898f\u306e\u30af\u30ec\u30fc\u30e0\u9023\u7d61 \u304c \u5165\u3063\u305f\u77ac\u9593\u306b\u3001\u305d\u306e\u30af\u30ec\u30fc\u30e0\u6848\u4ef6 \u304c \u5c5e\u3059\u308b \u300c\u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u30b0\u30eb\u30fc\u30d7\u300d \u3092 \u81ea\u52d5\u8a8d\u8b58\u3057\u3066\u3001\n* \u5f53\u8a72\u300c\u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u30b0\u30eb\u30fc\u30d7\u300d \u306e \u3053\u308c\u307e\u3067\u3000\u306e\u3000\u30af\u30ec\u30fc\u30e0\u4f1a\u8a71\u5185 \u983b\u51fa\u5358\u8a9e\uff08\u51fa\u73fe\u56de\u6570\u4e0a\u4f4d N \u4ef6\uff09 \u3092 __\u5358\u8a9e\u5225 \u51fa\u73fe\u56de\u6570 \u7d71\u8a08\u60c5\u5831\uff08\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09__\u3000\u3092 \u81ea\u52d5\u53c2\u7167\u3057\u3066\u3001\n* __\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc\u30aa\u30da\u30ec\u30fc\u30bf\uff08\u4eba\u9593\uff09 \u306e PC\u753b\u9762__ \u306b \u51fa\u529b\u3059\u308b\n* __\u30af\u30ec\u30fc\u30e0\u5bfe\u5fdc\u30aa\u30da\u30ec\u30fc\u30bf\uff08\u4eba\u9593\uff09__ \u306f\u3001__\u305d\u306e\u5358\u8a9e\u30bb\u30c3\u30c8\u3092\u898b\u3066\u3001\u96fb\u8a71\u5fdc\u5bfe\u306e\u30b7\u30ca\u30ea\u30aa \u3092 \u5148\u56de\u308a\u3057\u3066 \u5fdc\u5bfe\u30c8\u30fc\u30af\u3092\u30a4\u30e1\u30fc\u30b8\u3059\u308b \u5fc3\u7406\u7684\u6642\u9593__ \u3092 \u6301\u3066\u308b\u3088\u3046 \u652f\u63f4\u3059\u308b\n\n___\n\n##__\u3010 Python \u30b9\u30af\u30ea\u30d7\u30c8 \u3011__\n\n####__\uff08 \u904e\u53bb\u30af\u30ec\u30fc\u30e0\u5185\u5bb9 \u5c65\u6b74\u30c7\u30fc\u30bf\u30fb\u30bb\u30c3\u30c8 \u306e \u8aad\u307f\u8fbc\u307f \uff09__ \n\n```{bash:Anaconda jupyter notebook}\n!pwd\n!ls | grep customer_claims_data.csv\n!head customer_claims_data.csv\n```\n\n####__Pandas DataFrame \u3078\u306e \u53d6\u308a\u8fbc\u307f__\n \n```{python:Python3}\nimport pandas as pd\nclaims_pd = pd.read_csv('customer_claims_data.csv')\n# claims_pd.shape\n# claims_pd.info()\n# claims_pd.describe()\n# claims_pd.columns\n```\n\n####__\u300c\u9867\u5ba2\u30b0\u30eb\u30fc\u30d7\u300d\u5225 \u306e \u300c\u904e\u53bb\u30af\u30ec\u30fc\u30e0\u4f1a\u8a71\u5185 \u5358\u8a9e\u5225 \u51fa\u73fe\u56de\u6570 \u7d71\u8a08\u30c7\u30fc\u30bf\u300d \u306e \u751f\u6210__\n\n```{python:Python3}\n# claims_pd.groupby(['cust_class', 'item_category']).count().head(100)\n\nclaims_pd['class_item_category_joint_col'] = claims_pd['cust_class'] + \"_\" + claims_pd['item_category'] \n# claims_pd.ix[35000:35010, ['class_item_category_joint_col', 'claim_desc']]\n```\n\n* __\u300c\u4f1a\u54e1\u30af\u30e9\u30b9\u300d\u00d7\u300c\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u300d\u7d44\u307f\u5408\u308f\u305b\u30b0\u30eb\u30fc\u30d7 \u306e \u5168\u30d1\u30bf\u30fc\u30f3\uff08\u91cd\u8907\u6392\u9664\uff09 \u306e \u30ea\u30b9\u30c8 \u3092 \u751f\u6210__\n\n\n```{python:Python3}\nclass_item_category_unique_list = list(set(list(claims_pd['class_item_category_joint_col'])))\n# print(len(class_item_category_unique_list))\n# print(class_item_category_unique_list[0:20])\n# claims_pd.ix[claims_pd['class_item_category_joint_col'] == '\u30d7\u30e9\u30c1\u30ca\u4f1a\u54e1_\u9ad8\u7d1a\u30d9\u30c3\u30c9', ['class_item_category_joint_col', 'claim_desc']]\n```\n\n\n* __\u30c8\u30fc\u30af\u30f3\u3054\u3068 \u306b \u5206\u304b\u3061\u66f8\u304d\u3057\u3066\u3001\u7279\u5b9a\u306e\u54c1\u8a5e\u306e\u307f \u62bd\u51fa\u3057\u3066 \u30ea\u30b9\u30c8 \u306b \u683c\u7d0d\u3059\u308b\u51e6\u7406 \u3092\u884c\u3046 \u30e1\u30bd\u30c3\u30c9__\n\n__\uff08 \u53c2\u8003 \uff09__\n\n* [HirofumiYashima Qiita\u8a18\u4e8b \uff082016/01/06\uff09\u300cPython \u3067 MeCab \u3092\u4f7f\u3063\u3066\u3001\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\u306e\u30c8\u30fc\u30af\u30f3\u3060\u3051\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3057\u3066\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u5f0f\u300d](http://qiita.com/HirofumiYashima/items/bb326bc1ca62e337857e)\n\n\n```{python:Python3}\ndef get_token_list(text, hinshi):\n    import MeCab\n    token_list = []\n    mt = MeCab.Tagger(\"-Ochasen -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd\")\n    mt.parse('') \n    node = mt.parseToNode(text)\n    while node:\n        feats = node.feature.split(',')\n        if feats[0] in hinshi :\n            try:\n                token_list.append(node.surface)\n            except:\n                print(\"err: \" + str(node.surface))\n\n        node = node.next\n\n    return token_list\n```\n\n* __\u30c8\u30fc\u30af\u30f3\u30fb\u30ea\u30b9\u30c8 \u3092 \u53d7\u3051\u53d6\u308a\u3001\u30c8\u30fc\u30af\u30f3\u4ef6\u6570\u5206\u3001{\u30c8\u30fc\u30af\u30f3\u6587\u5b57\u5217 : \u305d\u306e\u30c8\u30fc\u30af\u30f3\u306e\u51fa\u73fe\u56de\u6570 } \u3092 \u683c\u7d0d\u3057\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 \u51e6\u7406 \u3092\u884c\u3046 \u30e1\u30bd\u30c3\u30c9__\n\n```{python:Python3}\ndef get_token_freq_dict_list(string_object):\n    from collections import Counter\n    counter = Counter(string_object)\n\n    output_list = []\n    for word, cnt in counter.most_common():\n        if len(word) < 2: # \u6587\u5b57\u6570\u304c\uff12\u6587\u5b57\u4ee5\u4e0b\uff08\uff11\u6587\u5b57\uff09\u306e\u30c8\u30fc\u30af\u30f3\u306f\u9664\u53bb\u3059\u308b\n            continue\n        else:\n            output_list.append({word : cnt})\n\n    # http://docs.python.jp/2/howto/sorting.html\n    return sorted(output_list, key=lambda x_dict: x_dict.keys())  \n```\n\n* __\u300c\u4f1a\u54e1\u30af\u30e9\u30b9\u300d\u00d7\u300c\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u300d\u5168\u7d44\u307f\u5408\u308f\u305b \u9867\u5ba2\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u3001 \u8a72\u5f53\u9867\u5ba2 \u306e \u30af\u30ec\u30fc\u30e0\u96fb\u8a71\u5185\u5bb9\uff08\u81ea\u7531\u30c6\u30ad\u30b9\u30c8\u8a18\u8ff0\u5f62\u5f0f\uff09 \u306e\u5358\u8a9e\u983b\u51fa\u7d71\u8a08\u60c5\u5831 \u3092 \u683c\u7d0d\u3057\u305f\u8f9e\u66f8 \u3092 \u8fd4\u3059 \u51e6\u7406 \u3092\u884c\u3046 \u30e1\u30bd\u30c3\u30c9__\n\n\n* __\u5404\u9867\u5ba2\u30b0\u30eb\u30fc\u30d7 \u306e \u30a2\u30f3\u30b1\u30fc\u30c8 \u306b \u767b\u5834\u3059\u308b\u300c\u540d\u8a5e\u300d\u53ca\u3073\u300c\u51fa\u73fe\u56de\u6570\u300d\u3092\u56de\u6570\u591a\u3044\u9806\uff08\u964d\u9806\uff09\u3000\u3092 \u4ee5\u4e0b\u306e\u5f62\u5f0f \u3067 \u8fd4\u3059__\n\n```{python:json\u30d5\u30a1\u30a4\u30eb}\n{\"\u30b4\u30fc\u30eb\u30c9\u4f1a\u54e1_\u9ad8\u984d\u30aa\u30fc\u30c7\u30a3\u30aa\u6a5f\u5668\" : [{\"\u97f3\u8cea\" : 765}, {\"\u91cd\u4f4e\u97f3\" : 567}, {\"\u30b5\u30dd\u30fc\u30c8\" : 501}, {\"\u7f6e\u304d\u5834\u6240\" : 434}, ...... ],\n \"\u901a\u5e38\u4f1a\u54e1_\u9ad8\u984d\u30aa\u30fc\u30c7\u30a3\u30aa\u6a5f\u5668\" : [{\"\u4fa1\u683c\" : 976}, {\"\u6620\u753b\u9928\" : 650}, {\"\u91cd\u3055\" : 548}, .....],\n ....}\n```\n\n####__\u3010 \u7d71\u8a08\u60c5\u5831\u8f9e\u66f8 \u306e \u751f\u6210 \u3011__\n\n```{python:Python3}\nfrom collections import defaultdict \noutput_dict = defaultdict(dict)\n \nfor class_item_category_name in class_item_category_unique_list:\n    tmp_df = claims_pd.ix[claims_pd['class_item_category_joint_col'] == class_item_category_name, ['claim_desc']]\n    claim_sentence_list = tmp_df['claim_desc'].tolist()\n    cleaned_claim_sentences = \"\"\n    for claim_sentence in claim_sentence_list:\n        cleanded_claim_sentence = str(claim_sentence).replace(\"[\",\"\").replace(\"]\",\"\").replace('\\\\r\\\\n','')\\\n                                                     .replace('\\\\u3000','').replace('nan','').replace(',','')\\\n                                                     .replace(\"'\", \"\").replace('\u30fb','').replace(' ','')\n        cleaned_claim_sentences += cleanded_claim_sentence # \u5168\u30ec\u30b3\u30fc\u30c9\uff08\u5168\u30af\u30ec\u30fc\u30e0\u6848\u4ef6\u8a18\u9332\uff09\u306e\u300c\u30af\u30ec\u30fc\u30e0\u5185\u5bb9\u300d\u96fb\u8a71\u4f1a\u8a71\u6587\u5b57\u8d77\u3053\u3057\u30c6\u30ad\u30b9\u30c8\u6587 \u3092 \u6587\u5b57\u5217\u7d50\u5408\n        \n        hinshi = [\"\u540d\u8a5e\"]\n        claim_noun_list = get_token_list(cleaned_claim_sentences, hinshi)\n        \n        claim_token_counted_freq_dict_list = get_token_freq_dict_list(claim_noun_list)        \n        output_dict[class_item_category_name] = claim_token_counted_freq_dict_list\n```\n\n__\uff08 \u7d71\u8a08\u60c5\u5831\u8f9e\u66f8 \u3078\u306e \u51fa\u529b\u5185\u5bb9 \u78ba\u8a8d \uff09__\n\n```{python:Python3}\n# print(list(output_dict.keys())[0:20])\n\n\nkeys_whose_value_is_not_empty_list = [key for key in list(output_dict.keys()) if not(output_dict[key])==[]]\n# print(len(keys_whose_value_is_not_empty_list))\n\n#print(\"group_name : \\n\", keys_whose_value_is_not_empty_list[0], \"\\n\\n\", \"tokens : \\n\", output_dict[keys_whose_value_is_not_empty_list[0]])\n#print(\"group_name : \\n\", keys_whose_value_is_not_empty_list[1], \"\\n\\n\", \"tokens : \\n\", output_dict[keys_whose_value_is_not_empty_list[1]])\n#print(\"group_name : \\n\", keys_whose_value_is_not_empty_list[2], \"\\n\\n\", \"tokens : \\n\", output_dict[keys_whose_value_is_not_empty_list[2]])\n```\n\n* __\u30a4\u30f3\u30c7\u30f3\u30c8\u6210\u5f62\u3057\u3066\u3001\u5168\u4ef6\u51fa\u529b__\n\n__\uff08 \u4ee5\u4e0b\u306f\u6587\u5b57\u5316\u3051 \uff09__\n\n```{python:Python3}\nimport json\nprint(json.dumps(output_dict, sort_keys=True, indent=4)))\n```\n\n* __\uff08 \u4ee5\u4e0b\u3067OK \uff09__\n\n```{python:Python3}\nimport json\nprint(json.dumps(output_dict,\n      \t\t    indent=4,\n          \t\tensure_ascii=False,\n          \t\tsort_keys=True))\n```\n\n___\n\n####__\uff08 \u53c2\u8003 \uff09__\n\n[HirofumiYashima Qiita\u8a18\u4e8b\uff082016/03/24\uff09 \u300c\u3010 Python \u3011\u65e5\u672c\u8a9e\u6587\u5b57 \u3092 \u542b\u3080 \u8f9e\u66f8\uff08dict\uff09\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092 json.dump \u3057\u3066\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\u3059\u308b\u3068\u304d\u306f\u3001\u6587\u5b57\u5316\u3051\u9632\u3050\u305f\u3081\u306b\u3001\u5fc5\u305a ensure_ascii=False \u30aa\u30d7\u30b7\u30e7\u30f3\u6307\u5b9a \u3092\u4ed8\u3051\u308b\u300d](http://qiita.com/HirofumiYashima/items/adf6876d4110a4085009)\n\n___\n\n####__\u7d71\u8a08\u60c5\u5831\u8f9e\u66f8 \u306e JSON\u30d5\u30a1\u30a4\u30eb \u51fa\u529b\uff08\u6587\u5b57\u30b3\u30fc\u30c9: UTF-8\uff09__\n\n```{python:Python3}\nimport codecs\n\nwith open('claim_token_freq_dict_per_cust_class_and_item_category.json\", 'w', 'utf-8') as f:\n\tjson.dumps(output_dict, f,\n      \t\t   indent=4,\n          \t   ensure_ascii=False,\n          \t   sort_keys=True))\n```\n", "tags": ["Python", "python3", "\u7d71\u8a08\u5b66", "statistics", "MachineLearning"]}