{"context": "\u300e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u308f\u305a\u306bPython\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u3066\u307f\u308b\u300f \uff08\u4ee5\u4e0b\u3001\u5143\u8a18\u4e8b\uff09\u306e\u5185\u5bb9\u3092chainer\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\u5143\u8a18\u4e8b\u306f\u975e\u5e38\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u4e01\u5be7\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u662f\u975e\u4e00\u8aad\u3092\u304a\u3059\u3059\u3081\u3059\u308b\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092pip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3060\u3051\n$ pip3 install numpy scipy scikit-learn chainer\n\n\n\u5b9f\u884c\nIPython Notebook\u4e0a\u3067\u5b9f\u884c\u3057\u305f\ngist\u306b\u3082\u4e0a\u3052\u307e\u3057\u305f\nhttps://gist.github.com/maueki/ae4ce4de7c689c2b6a2df9fd7a9a0c31\n\n\u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np\nimport sklearn.datasets\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport chainer\nfrom chainer import cuda, Function, gradient_check, Variable, optimizers, serializers, utils\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\n\n%matplotlib inline\n\n\n\u30c7\u30fc\u30bf\u751f\u6210\n\u5143\u8a18\u4e8b\u3068\u5168\u304f\u540c\u3058\nnp.random.seed(0)\nX,y=sklearn.datasets.make_moons(200,noise=0.20)\nplt.scatter(X[:,0], X[:,1], s=40, c=y, cmap=plt.cm.Spectral)\n\n\n\nChain\u4f5c\u6210\nn_units = 3\n\nclass Model(Chain):\n    def __init__(self):\n        super(Model, self).__init__(\n            l1=L.Linear(2, n_units),\n            l2=L.Linear(n_units, 2),\n        )\n\n    def __call__(self, x):\n        h1 = F.tanh(self.l1(x))\n        y = self.l2(h1)\n        return y\n\nChain\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8a18\u8ff0\u3001__call__\u30e1\u30bd\u30c3\u30c9\u306bforward\u95a2\u6570\u3092\u8a18\u8ff0\u3059\u308b\n\nClassifier Chain \u4f5c\u6210\nsoftmax\u95a2\u6570\u3092\u4f7f\u3063\u305f\u640d\u5931\u95a2\u6570\u306e\u5b9a\u7fa9\u7b49\u306fClassifier\u30af\u30e9\u30b9\u304c\u96a0\u853d\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u81ea\u4f5c\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\nmodel = L.Classifier(Model())\n\n\noptimizer \u4f5c\u6210\n\u5b66\u7fd2\u3001\u30e2\u30c7\u30eb\u306e\u66f4\u65b0\u306foptimizer\u304c\u884c\u3063\u3066\u304f\u308c\u308b\u3002\u4eca\u56de\u306f\u5143\u8a18\u4e8b\u3068\u306f\u7570\u306a\u308b\u304c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066Adam\u3092\u9078\u629e(SDG\u3067\u306f\u6e80\u8db3\u3044\u304f\u7d50\u679c\u306b\u306a\u3089\u306a\u304b\u3063\u305f)\noptimizer = optimizers.Adam()\noptimizer.setup(model)\n\n\n\u5b66\u7fd2\nx = Variable(X.astype(np.float32))\nt = Variable(y.astype(np.int32))\n\nfor _ in range(20000):\n    optimizer.update(model, x, t)\n\nchainer\u3067\u306f\u5165\u529b\u5024\u7b49\u3092Variable\u306b\u3057\u3066\u4e0e\u3048\u308b\u3002\u3053\u306e\u6642\u5165\u529b\u5024\u306ffloat32, \u51fa\u529b\u5024\u306fint32\u306b\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u305f\u3081\u578b\u5909\u63db\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\n\n\u7d50\u679c\u8868\u793a\ndef predict(model, x_data):\n    x = Variable(x_data.astype(np.float32))\n    y = model.predictor(x)\n    return np.argmax(y.data, axis=1)\n\nplot_decision_boundary(lambda x: predict(model, x))\n\n\n\u5143\u8a18\u4e8b\u306b\u8fd1\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\n# https://gist.github.com/dennybritz/ff8e7c2954dd47a4ce5f\ndef plot_decision_boundary(pred_func):\n    # Set min and max values and give it some padding\n    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\n    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n    h = 0.01\n    # Generate a grid of points with distance h between them\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\n    # Predict the function value for the whole gid\n    Z = pred_func(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    # Plot the contour and training examples\n    plt.contourf(xx, yy, Z, cmap=plt.cm.Spectral)\n    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Spectral)\n\n\n[\u300e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u308f\u305a\u306bPython\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u3066\u307f\u308b\u300f](http://qiita.com/moji_ai/items/9ae195739093277490fe) \uff08\u4ee5\u4e0b\u3001\u5143\u8a18\u4e8b\uff09\u306e\u5185\u5bb9\u3092chainer\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\n\u5143\u8a18\u4e8b\u306f\u975e\u5e38\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u4e01\u5be7\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u662f\u975e\u4e00\u8aad\u3092\u304a\u3059\u3059\u3081\u3059\u308b\u3002\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092`pip`\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3060\u3051\n\n```bash\n$ pip3 install numpy scipy scikit-learn chainer\n```\n\n# \u5b9f\u884c\n\nIPython Notebook\u4e0a\u3067\u5b9f\u884c\u3057\u305f\n\ngist\u306b\u3082\u4e0a\u3052\u307e\u3057\u305f\nhttps://gist.github.com/maueki/ae4ce4de7c689c2b6a2df9fd7a9a0c31\n\n## \u30a4\u30f3\u30dd\u30fc\u30c8\n\n```py3\nimport numpy as np\nimport sklearn.datasets\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport chainer\nfrom chainer import cuda, Function, gradient_check, Variable, optimizers, serializers, utils\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\n\n%matplotlib inline\n```\n\n## \u30c7\u30fc\u30bf\u751f\u6210\n\n[\u5143\u8a18\u4e8b](http://qiita.com/moji_ai/items/9ae195739093277490fe)\u3068\u5168\u304f\u540c\u3058\n\n```py3\nnp.random.seed(0)\nX,y=sklearn.datasets.make_moons(200,noise=0.20)\nplt.scatter(X[:,0], X[:,1], s=40, c=y, cmap=plt.cm.Spectral)\n```\n\n![chainer_1.png](https://qiita-image-store.s3.amazonaws.com/0/39647/8d70231c-8bf3-8611-f002-a6612f4522c0.png)\n\n## Chain\u4f5c\u6210\n\n```py3\nn_units = 3\n\nclass Model(Chain):\n    def __init__(self):\n        super(Model, self).__init__(\n            l1=L.Linear(2, n_units),\n            l2=L.Linear(n_units, 2),\n        )\n    \n    def __call__(self, x):\n        h1 = F.tanh(self.l1(x))\n        y = self.l2(h1)\n        return y\n```\n\n`Chain`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8a18\u8ff0\u3001`__call__`\u30e1\u30bd\u30c3\u30c9\u306bforward\u95a2\u6570\u3092\u8a18\u8ff0\u3059\u308b\n\n## Classifier Chain \u4f5c\u6210\n\nsoftmax\u95a2\u6570\u3092\u4f7f\u3063\u305f\u640d\u5931\u95a2\u6570\u306e\u5b9a\u7fa9\u7b49\u306f`Classifier`\u30af\u30e9\u30b9\u304c\u96a0\u853d\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u81ea\u4f5c\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\n\n```py3\nmodel = L.Classifier(Model())\n```\n\n## optimizer \u4f5c\u6210\n\n\u5b66\u7fd2\u3001\u30e2\u30c7\u30eb\u306e\u66f4\u65b0\u306foptimizer\u304c\u884c\u3063\u3066\u304f\u308c\u308b\u3002\u4eca\u56de\u306f\u5143\u8a18\u4e8b\u3068\u306f\u7570\u306a\u308b\u304c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066Adam\u3092\u9078\u629e(SDG\u3067\u306f\u6e80\u8db3\u3044\u304f\u7d50\u679c\u306b\u306a\u3089\u306a\u304b\u3063\u305f)\n\n```py3\noptimizer = optimizers.Adam()\noptimizer.setup(model)\n```\n\n## \u5b66\u7fd2\n\n```py3\nx = Variable(X.astype(np.float32))\nt = Variable(y.astype(np.int32))\n\nfor _ in range(20000):\n    optimizer.update(model, x, t)\n```\n\nchainer\u3067\u306f\u5165\u529b\u5024\u7b49\u3092`Variable`\u306b\u3057\u3066\u4e0e\u3048\u308b\u3002\u3053\u306e\u6642\u5165\u529b\u5024\u306f`float32`, \u51fa\u529b\u5024\u306f`int32`\u306b\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u305f\u3081\u578b\u5909\u63db\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\n\n## \u7d50\u679c\u8868\u793a\n\n```py3\ndef predict(model, x_data):\n    x = Variable(x_data.astype(np.float32))\n    y = model.predictor(x)\n    return np.argmax(y.data, axis=1)\n\nplot_decision_boundary(lambda x: predict(model, x))\n```\n\n![chainer_2.png](https://qiita-image-store.s3.amazonaws.com/0/39647/c7c96460-ff01-d4f3-612f-8d3bb96c3b1b.png)\n\n\u5143\u8a18\u4e8b\u306b\u8fd1\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\n\n```py3\n# https://gist.github.com/dennybritz/ff8e7c2954dd47a4ce5f\ndef plot_decision_boundary(pred_func):\n    # Set min and max values and give it some padding\n    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\n    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n    h = 0.01\n    # Generate a grid of points with distance h between them\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\n    # Predict the function value for the whole gid\n    Z = pred_func(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    # Plot the contour and training examples\n    plt.contourf(xx, yy, Z, cmap=plt.cm.Spectral)\n    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Spectral)\n```\n", "tags": ["Chainer", "python3"]}