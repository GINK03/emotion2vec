{"context": " More than 1 year has passed since last update.\n\nS3\u306b\u30ed\u30b0\u3092\u7f6e\u3044\u305f\u308a\nS3\u306b\u30ed\u30b0\u3092\u7f6e\u3044\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\u305f\u3060\u30011\u65e5\u5206\u306e\u30d5\u30a1\u30a4\u30eb\u304c1\u3064\u3067\u306f\u306a\u304f\u3001\u4f55\u500b\u306b\u3082\u5206\u304b\u308c\u3066\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002\n\u3042\u30fc\u3001\u3061\u3087\u3063\u3068\u30ed\u30b0\u306e\u89e3\u6790\u3057\u3088\u3063\u304b\u306a\u2606\u3068\u601d\u3046\u3068\u3001\n\u4e00\u3064\u4e00\u3064\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u2026\u898b\u3066\u2026\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u2026\u3093\u30fc\u3081\u3093\u3069\u3044\uff01\n\u30ed\u30b0\u304c\u30d5\u30a1\u30a4\u30eb\u3067\u5206\u304b\u308c\u3066\u3057\u307e\u3046\u3068\u4e00\u62ec\u3067grep\u3082\u3067\u304d\u306a\u3044\u3088\u30fc\uff01\u5168\u90e8\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u3081\u3093\u3069\u3044\u3088\u30fc\uff01\n\u8ab0\u304b\u3082\u3063\u3068\u52b9\u7387\u306e\u826f\u3044\u30ed\u30b0\u306e\u898b\u65b9\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff01\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u306a\u308a\u306bPython\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3092\u53d6\u5f97\u3057\u3066\u4e00\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3061\u3083\u304a\u3046\u301c\u3068\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f  \nPython\u521d\u5fc3\u8005\u306a\u306e\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u69cb\u6587\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u6559\u3048\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3054\u3056\u3044\u307e\u3059\u2026\uff01\n\nget_log.py\n#! /usr/bin/env python\n\nimport os\nimport sys\nimport codecs\nimport zipfile\nfrom boto.s3.connection import S3Connection\nfrom boto.s3 import key\n\ndef set_argument():\n    global log_file\n    global log_bucket_name\n    global directory_path\n    global log_directory\n    log_file = \"get-s3.log\"\n    log_bucket_name = \"\u53d6\u5f97\u3057\u305f\u3044\u30ed\u30b0\u304c\u3042\u308bS3\u306e\u30d0\u30b1\u30c3\u30c8\u540d\"\n    directory_path = \"\u53d6\u5f97\u3057\u305f\u3044\u30ed\u30b0\u3042\u308bS3\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\"\n    log_directory = \"\u53d6\u5f97\u3057\u305f\u30ed\u30b0\u306e\u7f6e\u304d\u5834\u6240\u3078\u306e\u30d1\u30b9\"\n\n    if (os.path.isfile(\"%s/%s\" %(log_directory, log_file))):\n        print '[ ERROR ] Already exists. Please retry.'\n        print 'Logfile path is %s%s' % (log_directory, log_file)\n        delete_downloaded_log()\n        sys.exit(1)\n\ndef download_from_s3():\n    print \"#-------------------------------------------------\"\n    print \"# Start download.\"\n    print \"#-------------------------------------------------\"\n    connection = S3Connection()\n    bucket = connection.get_bucket(log_bucket_name)\n    keys = bucket.get_all_keys(prefix = directory_path)\n    with codecs.open(\"%s/%s\" % (log_directory, log_file), \"a\", utf-8) as f:\n        for key in keys:\n            print \"Now downloading...\"\n            f.write(key.get_contents_as_string(encoding = \"utf-8\"))\n    print \"#-------------------------------------------------\"\n    print \"# Complete download.\"\n    print \"#-------------------------------------------------\"\n\ndef delete_downloaded_log():\n    print \"#-------------------------------------------------\"\n    print \"# Delete downloaded log file.\"\n    print \"#-------------------------------------------------\"\n    if os.path.exists(\"%s%s\" % (log_directory, log_file)):\n        os.remove(\"%s%s\" %(log_directory, log_file))\n\ndef main():\n    set_argument()\n    if not os.path.exists(log_directory):\n        os.makedirs(log_directory)\n    download_from_s3()\n    print \"Completed!!!\"\n\nif __name__ == '__main__':\n    main()\n\n\n\u304b\u3093\u305f\u30fc\u3093\uff01\nS3\u304b\u3089\u3072\u305f\u3059\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u8ffd\u8a18\u3057\u3066\u3044\u3063\u3066\u308b\u3060\u3051\u3067\u3059\u3002\n\u672c\u5f53\u306f\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u7d42\u308f\u3063\u305f\u3089\u30d5\u30a1\u30a4\u30eb\u3092zip\u306b\u5727\u7e2e\u3057\u3066\u307e\u305fS3\u306b\u7f6e\u304d\u76f4\u3057\u3066\u301c\u3068\u304b\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5272\u611b  \n\u3057\u304b\u3057CloudFront\u306e\u30ed\u30b0\u306a\u3093\u304b\u306f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3055\u3089\u306b\u89e3\u51cd\u3057\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u306e\u3067\u307e\u305f\u3072\u3068\u624b\u9593\uff01\n\u305c\u3072\u3001\u3061\u3087\u3053\u3061\u3087\u3053\u3063\u3068\u4e0a\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u6539\u4fee\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u266a\n# S3\u306b\u30ed\u30b0\u3092\u7f6e\u3044\u305f\u308a\n\nS3\u306b\u30ed\u30b0\u3092\u7f6e\u3044\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\u305f\u3060\u30011\u65e5\u5206\u306e\u30d5\u30a1\u30a4\u30eb\u304c1\u3064\u3067\u306f\u306a\u304f\u3001\u4f55\u500b\u306b\u3082\u5206\u304b\u308c\u3066\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002\n\u3042\u30fc\u3001\u3061\u3087\u3063\u3068\u30ed\u30b0\u306e\u89e3\u6790\u3057\u3088\u3063\u304b\u306a\u2606\u3068\u601d\u3046\u3068\u3001\n\u4e00\u3064\u4e00\u3064\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u2026\u898b\u3066\u2026\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u2026\u3093\u30fc\u3081\u3093\u3069\u3044\uff01\n\u30ed\u30b0\u304c\u30d5\u30a1\u30a4\u30eb\u3067\u5206\u304b\u308c\u3066\u3057\u307e\u3046\u3068\u4e00\u62ec\u3067grep\u3082\u3067\u304d\u306a\u3044\u3088\u30fc\uff01\u5168\u90e8\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u3081\u3093\u3069\u3044\u3088\u30fc\uff01\n\u8ab0\u304b\u3082\u3063\u3068\u52b9\u7387\u306e\u826f\u3044\u30ed\u30b0\u306e\u898b\u65b9\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff01\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u306a\u308a\u306bPython\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3092\u53d6\u5f97\u3057\u3066\u4e00\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3061\u3083\u304a\u3046\b\u301c\u3068\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f :blush: \n\nPython\u521d\u5fc3\u8005\u306a\u306e\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u69cb\u6587\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u6559\u3048\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3054\u3056\u3044\u307e\u3059\b\u2026\uff01\n\n```python:get_log.py\n#! /usr/bin/env python\n\nimport os\nimport sys\nimport codecs\nimport zipfile\nfrom boto.s3.connection import S3Connection\nfrom boto.s3 import key\n\ndef set_argument():\n    global log_file\n    global log_bucket_name\n    global directory_path\n    global log_directory\n    log_file = \"get-s3.log\"\n    log_bucket_name = \"\u53d6\u5f97\u3057\u305f\u3044\u30ed\u30b0\u304c\u3042\u308bS3\u306e\u30d0\u30b1\u30c3\u30c8\u540d\"\n    directory_path = \"\u53d6\u5f97\u3057\u305f\u3044\u30ed\u30b0\u3042\u308bS3\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\"\n    log_directory = \"\u53d6\u5f97\u3057\u305f\u30ed\u30b0\u306e\u7f6e\u304d\u5834\u6240\u3078\u306e\u30d1\u30b9\"\n\n    if (os.path.isfile(\"%s/%s\" %(log_directory, log_file))):\n        print '[ ERROR ] Already exists. Please retry.'\n        print 'Logfile path is %s%s' % (log_directory, log_file)\n        delete_downloaded_log()\n        sys.exit(1)\n\ndef download_from_s3():\n    print \"#-------------------------------------------------\"\n    print \"# Start download.\"\n    print \"#-------------------------------------------------\"\n    connection = S3Connection()\n    bucket = connection.get_bucket(log_bucket_name)\n    keys = bucket.get_all_keys(prefix = directory_path)\n    with codecs.open(\"%s/%s\" % (log_directory, log_file), \"a\", utf-8) as f:\n        for key in keys:\n            print \"Now downloading...\"\n            f.write(key.get_contents_as_string(encoding = \"utf-8\"))\n    print \"#-------------------------------------------------\"\n    print \"# Complete download.\"\n    print \"#-------------------------------------------------\"\n\ndef delete_downloaded_log():\n    print \"#-------------------------------------------------\"\n    print \"# Delete downloaded log file.\"\n    print \"#-------------------------------------------------\"\n    if os.path.exists(\"%s%s\" % (log_directory, log_file)):\n        os.remove(\"%s%s\" %(log_directory, log_file))\n\ndef main():\n    set_argument()\n    if not os.path.exists(log_directory):\n        os.makedirs(log_directory)\n    download_from_s3()\n    print \"Completed!!!\"\n\nif __name__ == '__main__':\n    main()\n```\n\n\u304b\u3093\u305f\u30fc\u3093\uff01\nS3\u304b\u3089\u3072\u305f\u3059\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u8ffd\u8a18\u3057\u3066\u3044\u3063\u3066\u308b\u3060\u3051\u3067\u3059\u3002\n\u672c\u5f53\u306f\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u7d42\u308f\u3063\u305f\u3089\u30d5\u30a1\u30a4\u30eb\u3092zip\u306b\u5727\u7e2e\u3057\u3066\u307e\u305fS3\u306b\u7f6e\u304d\u76f4\u3057\u3066\u301c\u3068\u304b\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5272\u611b :worried: \n\n\u3057\u304b\u3057CloudFront\u306e\u30ed\u30b0\u306a\u3093\u304b\u306f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3055\u3089\u306b\u89e3\u51cd\u3057\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u306e\u3067\u307e\u305f\u3072\u3068\u624b\u9593\uff01\n\u305c\u3072\u3001\u3061\u3087\u3053\u3061\u3087\u3053\u3063\u3068\u4e0a\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u6539\u4fee\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u266a\n", "tags": ["S3", "Python", "AWS", "boto"]}