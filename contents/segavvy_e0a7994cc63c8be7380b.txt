{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c4\u7ae0: \u5f62\u614b\u7d20\u89e3\u6790\n\n\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092MeCab\u3092\u4f7f\u3063\u3066\u5f62\u614b\u7d20\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.mecab\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\u306a\u304a\uff0c\u554f\u984c37, 38, 39\u306fmatplotlib\u3082\u3057\u304f\u306fGnuplot\u3092\u7528\u3044\u308b\u3068\u3088\u3044\uff0e\n\n\n39. Zipf\u306e\u6cd5\u5247\n\n\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u9806\u4f4d\u3092\u6a2a\u8ef8\uff0c\u305d\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u7e26\u8ef8\u3068\u3057\u3066\uff0c\u4e21\u5bfe\u6570\u30b0\u30e9\u30d5\u3092\u30d7\u30ed\u30c3\u30c8\u305b\u3088\uff0e\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport MeCab\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.mecab'\n\n\ndef parse_neko():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u5f62\u614b\u7d20\u89e3\u6790\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066neko.txt.mecab\u306b\u4fdd\u5b58\u3059\u308b\n    '''\n\n    with open(fname) as data_file, \\\n            open(fname_parsed, mode='w') as out_file:\n\n        mecab = MeCab.Tagger()\n        out_file.write(mecab.parse(data_file.read()))\n\n\ndef neco_lines():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5404\u5f62\u614b\u7d20\u3092\n    \u30fb\u8868\u5c64\u5f62\uff08surface\uff09\n    \u30fb\u57fa\u672c\u5f62\uff08base\uff09\n    \u30fb\u54c1\u8a5e\uff08pos\uff09\n    \u30fb\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\n    \u306e4\u3064\u3092\u30ad\u30fc\u3068\u3059\u308b\u8f9e\u66f8\u306b\u683c\u7d0d\u3057\u30011\u6587\u305a\u3064\u3001\u3053\u306e\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\n\n    \u623b\u308a\u5024\uff1a\n    1\u6587\u306e\u5404\u5f62\u614b\u7d20\u3092\u8f9e\u66f8\u5316\u3057\u305f\u30ea\u30b9\u30c8\n    '''\n    with open(fname_parsed) as file_parsed:\n\n        morphemes = []\n        for line in file_parsed:\n\n            # \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n            cols = line.split('\\t')\n            if(len(cols) < 2):\n                raise StopIteration     # \u533a\u5207\u308a\u304c\u306a\u3051\u308c\u3070\u7d42\u4e86\n            res_cols = cols[1].split(',')\n\n            # \u8f9e\u66f8\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n            morpheme = {\n                'surface': cols[0],\n                'base': res_cols[6],\n                'pos': res_cols[0],\n                'pos1': res_cols[1]\n            }\n            morphemes.append(morpheme)\n\n            # \u54c1\u8a5e\u7d30\u5206\u985e1\u304c'\u53e5\u70b9'\u306a\u3089\u6587\u306e\u7d42\u308f\u308a\u3068\u5224\u5b9a\n            if res_cols[1] == '\u53e5\u70b9':\n                yield morphemes\n                morphemes = []\n\n\n# \u5f62\u614b\u7d20\u89e3\u6790\nparse_neko()\n\n# Counter\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5358\u8a9e\u3092\u30bb\u30c3\u30c8\nword_counter = Counter()\nfor line in neco_lines():\n    word_counter.update([morpheme['surface'] for morpheme in line])\n\n# \u5168\u4ef6\u53d6\u5f97\nlist_word = word_counter.most_common()\n\n# \u51fa\u73fe\u6570\u306e\u30ea\u30b9\u30c8\u53d6\u5f97\ncounts = list(zip(*list_word))[1]\n\n# \u30b0\u30e9\u30d5\u3067\u4f7f\u3046\u30d5\u30a9\u30f3\u30c8\u60c5\u5831(\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307e\u307e\u3067\u306f\u65e5\u672c\u8a9e\u304c\u8868\u793a\u3067\u304d\u306a\u3044)\nfp = FontProperties(\n    fname='/usr/share/fonts/truetype/takao-gothic/TakaoGothic.ttf'\n)\n\n# \u6563\u5e03\u56f3\u306e\u30c7\u30fc\u30bf\u6307\u5b9a\nplt.scatter(\n    range(1, len(counts) + 1),  # x\u8ef8\uff1a\u9806\u4f4d\n    counts                      # y\u8ef8\uff1a\u51fa\u73fe\u983b\u5ea6\n)\n\n# \u8ef8\u306e\u5024\u306e\u7bc4\u56f2\u306e\u8abf\u6574\nplt.xlim(1, len(counts) + 1)\nplt.ylim(1, counts[0])\n\n# \u5bfe\u6570\u30b0\u30e9\u30d5\u306b\nplt.xscale('log')\nplt.yscale('log')\n\n# \u30b0\u30e9\u30d5\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u30e9\u30d9\u30eb\u6307\u5b9a\nplt.title(\"39. Zipf\u306e\u6cd5\u5247\", fontproperties=fp)\nplt.xlabel('\u51fa\u73fe\u5ea6\u9806\u4f4d', fontproperties=fp)\nplt.ylabel('\u51fa\u73fe\u983b\u5ea6', fontproperties=fp)\n\n# \u30b0\u30ea\u30c3\u30c9\u3092\u8868\u793a\nplt.grid(axis='both')\n\n# \u8868\u793a\nplt.show()\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\n\n\u6563\u5e03\u56f3\nparse_neko()\u3068neco_lines()\u306f\u524d\u554f\u3068\u540c\u3058\u3067\u3059\u3002\n\u4eca\u56de\u306f\u6563\u5e03\u56f3\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u6563\u5e03\u56f3\u306fpyplot.scatter()\u306bx\u8ef8\u306e\u914d\u5217\u3068y\u8ef8\u306e\u914d\u5217\u3092\u6e21\u305b\u3070\u4f5c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\u7c21\u5358\uff01\n\u5bfe\u6570\u30b0\u30e9\u30d5\u306b\u3059\u308b\u306b\u306f\u3001pyplot.xscale()\u3068pyplot.yscale()\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nZipf\u306e\u6cd5\u5247\u3068\u306f\n\u30b8\u30c3\u30d7\u3068\u304b\u30b8\u30d5\u3068\u304b\u8aad\u3080\u305d\u3046\u3067\u3001\u4f55\u304b\u3092\u96c6\u8a08\u3057\u305f\u6642\u306b\u3001\u305d\u306e\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u9806\u306b\u4e26\u3079\u308b\u3068\uff08\u500b\u3005\u306e\u9806\u4f4d\uff09\u00d7\uff08\u305d\u306e\u51fa\u73fe\u983b\u5ea6\uff09\u304c\u4e00\u5b9a\u306b\u306a\u308b\u6cd5\u5247\u3060\u305d\u3046\u3067\u3059\u3002\u3053\u306e\u6cd5\u5247\u901a\u308a\u306e\u5834\u5408\u306f\u3001\u4e21\u5bfe\u6570\u30b0\u30e9\u30d5\u306b\u66f8\u304f\u3068\u659c\u3081\u4e0b\u304c\u308a\u306e\u76f4\u7dda\u306b\u306a\u308a\u307e\u3059\u3002\u78ba\u304b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u3060\u3051\u3067\u306a\u304f\u3001\u3044\u308d\u3044\u308d\u306a\u81ea\u7136\u73fe\u8c61\u3001\u793e\u4f1a\u73fe\u8c61\u3067\u6210\u308a\u7acb\u3064\u5834\u5408\u304c\u3042\u308b\u3089\u3057\u3044\u306e\u3067\u3059\u3002\u306a\u3093\u3060\u304b\u4e0d\u601d\u8b70\u3002\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u30b0\u30b0\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3000\n40\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c4\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u9752\u7a7a\u6587\u5eab\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c4\u7ae0: \u5f62\u614b\u7d20\u89e3\u6790\n>\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092MeCab\u3092\u4f7f\u3063\u3066\u5f62\u614b\u7d20\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.mecab\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n>\n>\u306a\u304a\uff0c\u554f\u984c37, 38, 39\u306fmatplotlib\u3082\u3057\u304f\u306fGnuplot\u3092\u7528\u3044\u308b\u3068\u3088\u3044\uff0e\n\n###39. Zipf\u306e\u6cd5\u5247\n>\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u9806\u4f4d\u3092\u6a2a\u8ef8\uff0c\u305d\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u7e26\u8ef8\u3068\u3057\u3066\uff0c\u4e21\u5bfe\u6570\u30b0\u30e9\u30d5\u3092\u30d7\u30ed\u30c3\u30c8\u305b\u3088\uff0e\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport MeCab\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.mecab'\n\n\ndef parse_neko():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u5f62\u614b\u7d20\u89e3\u6790\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066neko.txt.mecab\u306b\u4fdd\u5b58\u3059\u308b\n\t'''\n\n\twith open(fname) as data_file, \\\n\t\t\topen(fname_parsed, mode='w') as out_file:\n\n\t\tmecab = MeCab.Tagger()\n\t\tout_file.write(mecab.parse(data_file.read()))\n\n\ndef neco_lines():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5404\u5f62\u614b\u7d20\u3092\n\t\u30fb\u8868\u5c64\u5f62\uff08surface\uff09\n\t\u30fb\u57fa\u672c\u5f62\uff08base\uff09\n\t\u30fb\u54c1\u8a5e\uff08pos\uff09\n\t\u30fb\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\n\t\u306e4\u3064\u3092\u30ad\u30fc\u3068\u3059\u308b\u8f9e\u66f8\u306b\u683c\u7d0d\u3057\u30011\u6587\u305a\u3064\u3001\u3053\u306e\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\n\n\t\u623b\u308a\u5024\uff1a\n\t1\u6587\u306e\u5404\u5f62\u614b\u7d20\u3092\u8f9e\u66f8\u5316\u3057\u305f\u30ea\u30b9\u30c8\n\t'''\n\twith open(fname_parsed) as file_parsed:\n\n\t\tmorphemes = []\n\t\tfor line in file_parsed:\n\n\t\t\t# \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n\t\t\tcols = line.split('\\t')\n\t\t\tif(len(cols) < 2):\n\t\t\t\traise StopIteration\t\t# \u533a\u5207\u308a\u304c\u306a\u3051\u308c\u3070\u7d42\u4e86\n\t\t\tres_cols = cols[1].split(',')\n\n\t\t\t# \u8f9e\u66f8\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\t\t\tmorpheme = {\n\t\t\t\t'surface': cols[0],\n\t\t\t\t'base': res_cols[6],\n\t\t\t\t'pos': res_cols[0],\n\t\t\t\t'pos1': res_cols[1]\n\t\t\t}\n\t\t\tmorphemes.append(morpheme)\n\n\t\t\t# \u54c1\u8a5e\u7d30\u5206\u985e1\u304c'\u53e5\u70b9'\u306a\u3089\u6587\u306e\u7d42\u308f\u308a\u3068\u5224\u5b9a\n\t\t\tif res_cols[1] == '\u53e5\u70b9':\n\t\t\t\tyield morphemes\n\t\t\t\tmorphemes = []\n\n\n# \u5f62\u614b\u7d20\u89e3\u6790\nparse_neko()\n\n# Counter\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5358\u8a9e\u3092\u30bb\u30c3\u30c8\nword_counter = Counter()\nfor line in neco_lines():\n\tword_counter.update([morpheme['surface'] for morpheme in line])\n\n# \u5168\u4ef6\u53d6\u5f97\nlist_word = word_counter.most_common()\n\n# \u51fa\u73fe\u6570\u306e\u30ea\u30b9\u30c8\u53d6\u5f97\ncounts = list(zip(*list_word))[1]\n\n# \u30b0\u30e9\u30d5\u3067\u4f7f\u3046\u30d5\u30a9\u30f3\u30c8\u60c5\u5831(\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307e\u307e\u3067\u306f\u65e5\u672c\u8a9e\u304c\u8868\u793a\u3067\u304d\u306a\u3044)\nfp = FontProperties(\n\tfname='/usr/share/fonts/truetype/takao-gothic/TakaoGothic.ttf'\n)\n\n# \u6563\u5e03\u56f3\u306e\u30c7\u30fc\u30bf\u6307\u5b9a\nplt.scatter(\n\trange(1, len(counts) + 1),\t# x\u8ef8\uff1a\u9806\u4f4d\n\tcounts\t\t\t\t\t\t# y\u8ef8\uff1a\u51fa\u73fe\u983b\u5ea6\n)\n\n# \u8ef8\u306e\u5024\u306e\u7bc4\u56f2\u306e\u8abf\u6574\nplt.xlim(1, len(counts) + 1)\nplt.ylim(1, counts[0])\n\n# \u5bfe\u6570\u30b0\u30e9\u30d5\u306b\nplt.xscale('log')\nplt.yscale('log')\n\n# \u30b0\u30e9\u30d5\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u30e9\u30d9\u30eb\u6307\u5b9a\nplt.title(\"39. Zipf\u306e\u6cd5\u5247\", fontproperties=fp)\nplt.xlabel('\u51fa\u73fe\u5ea6\u9806\u4f4d', fontproperties=fp)\nplt.ylabel('\u51fa\u73fe\u983b\u5ea6', fontproperties=fp)\n\n# \u30b0\u30ea\u30c3\u30c9\u3092\u8868\u793a\nplt.grid(axis='both')\n\n# \u8868\u793a\nplt.show()\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n![Kobito.WxS1CL.png](https://qiita-image-store.s3.amazonaws.com/0/139624/101c0980-f490-4fc7-7d7c-4c1463c46bbc.png \"Kobito.WxS1CL.png\")\n\n\n###\u6563\u5e03\u56f3\n`parse_neko()`\u3068`neco_lines()`\u306f[\u524d\u554f](http://qiita.com/segavvy/items/c53c35827524f875ba2d)\u3068\u540c\u3058\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u6563\u5e03\u56f3\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u6563\u5e03\u56f3\u306f[`pyplot.scatter()`](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.scatter)\u306bx\u8ef8\u306e\u914d\u5217\u3068y\u8ef8\u306e\u914d\u5217\u3092\u6e21\u305b\u3070\u4f5c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\u7c21\u5358\uff01\n\n\u5bfe\u6570\u30b0\u30e9\u30d5\u306b\u3059\u308b\u306b\u306f\u3001[`pyplot.xscale()`](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.xscale)\u3068[`pyplot.yscale()`](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.yscale)\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n###Zipf\u306e\u6cd5\u5247\u3068\u306f\n\u30b8\u30c3\u30d7\u3068\u304b\u30b8\u30d5\u3068\u304b\u8aad\u3080\u305d\u3046\u3067\u3001\u4f55\u304b\u3092\u96c6\u8a08\u3057\u305f\u6642\u306b\u3001\u305d\u306e\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u9806\u306b\u4e26\u3079\u308b\u3068`\uff08\u500b\u3005\u306e\u9806\u4f4d\uff09\u00d7\uff08\u305d\u306e\u51fa\u73fe\u983b\u5ea6\uff09`\u304c\u4e00\u5b9a\u306b\u306a\u308b\u6cd5\u5247\u3060\u305d\u3046\u3067\u3059\u3002\u3053\u306e\u6cd5\u5247\u901a\u308a\u306e\u5834\u5408\u306f\u3001\u4e21\u5bfe\u6570\u30b0\u30e9\u30d5\u306b\u66f8\u304f\u3068\u659c\u3081\u4e0b\u304c\u308a\u306e\u76f4\u7dda\u306b\u306a\u308a\u307e\u3059\u3002\u78ba\u304b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u3060\u3051\u3067\u306a\u304f\u3001\u3044\u308d\u3044\u308d\u306a\u81ea\u7136\u73fe\u8c61\u3001\u793e\u4f1a\u73fe\u8c61\u3067\u6210\u308a\u7acb\u3064\u5834\u5408\u304c\u3042\u308b\u3089\u3057\u3044\u306e\u3067\u3059\u3002\u306a\u3093\u3060\u304b\u4e0d\u601d\u8b70\u3002\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u30b0\u30b0\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3000\n40\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c4\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f[\u9752\u7a7a\u6587\u5eab](http://www.aozora.gr.jp)\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002*\n", "tags": ["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "Python", "mecab", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "\u5f62\u614b\u7d20\u89e3\u6790"]}