{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f C++ Advent Calendar 2015 \u306e24\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u6700\u8fd1\u306e\u4ed5\u4e8b\u3067\u306f\u3082\u3063\u3071\u3089PHP\u3070\u304b\u308a\u66f8\u3044\u3066\u307e\u3059\u304c\u3001C++\u3082\u89e6\u308c\u3066\u3044\u305f\u3044\u306a\u30fc\u3068\u3044\u3046\u4e8b\u3067\u53c2\u52a0\u3057\u307e\u3057\u305f\u3002\n\n\u524d\u66f8\u304d\n\u65e2\u5b58\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066PStade.Oven\u3084\u9ad8\u6a4b\u6676\u3055\u3093\u306eBoost.Range\u62e1\u5f35\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u3067\u3001\u30a2\u30d7\u30ea\u6bce\u306e\u5c02\u7528\u95a2\u6570\u3068\u3057\u3066\u4f7f\u3044\u305f\u3044\u3001\u3068\u3044\u3046\u7406\u7531\u3068\u81ea\u5206\u306e\u52c9\u5f37\u304c\u3066\u3089\u306b\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\nGitHub\u3078\u306e\u30ea\u30f3\u30af\n\n\u4f7f\u3044\u65b9\n#include \"range.h\"\n\nauto v = {1, 2, 3, 4, 5};\n// {2, 4}\nauto q = v | range::filtered_even();\n\nBoost\u306eRange Adaptors\u3068\u540c\u3058\u304f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u3088\u3063\u3066\u7e4b\u3052\u307e\u3059\u3002\n(\u9762\u5012\u306a\u70ba\u3001\u65e2\u5b58\u306eboost::adaptors\u30e9\u30a4\u30d6\u30e9\u30ea\u3092range::\u3067\u4f7f\u3048\u308b\u3088\u3046\u306bnamespace\u5185\u3067\n\nusing namespace boost::adaptors;\n\n\u3057\u3066\u3044\u307e\u3059)\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u8a18\u6cd5\u3067\u66f8\u3051\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u306b\u306f\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u8a18\u6cd5\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001operator|\u3092\u7cca\u4ed8\u3051\u3068\u3057\u3066\u3001Range\u5024(\u914d\u5217\u306b\u9650\u3089\u306a\u3044\u3001begin()\u3068end()\u3092\u5b9f\u88c5\u3057\u305f\u7bc4\u56f2\u3092\u8868\u3059\u5024)\u3068\u3001Range\u5024\u304b\u3089\u65b0\u305f\u306aRange\u5024\u3092\u8fd4\u3059\u5b9f\u88c5\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n// Range\u304b\u3089\u8981\u7d20\u306e\u578b\u3092\u5f97\u308b\ntemplate <class Range>\nauto _rangetype(Range&& r) ->\n    typename std::decay<\n        decltype(*std::begin(r))\n    >::type;\n// \u914d\u5217\u8981\u7d20\u306e\u578b\u53d6\u5f97\n#define rangedecltype(r) decltype(_rangetype(r))\n\nnamespace range {\n    //------------------------------\n    /// INTERNAL ONLY\n    /// \n    // {\n        struct _FilteredEvenHolder {};\n\n        template <typename T>\n        struct _is_even {\n            bool operator()(const T &t) const {\n                return t % 2 == 0;\n            }\n        };\n    // }\n\n    _FilteredEvenHolder filtered_even() { return _FilteredEvenHolder(); }\n\n    template <typename Range>\n    auto operator| (Range &r, const _FilteredEvenHolder &)\n    {\n        return r | boost::adaptors::filtered(_is_even<rangedecltype(r)>());\n    }\n\n    template <typename Range>\n    auto operator| (const Range &r, const _FilteredEvenHolder &)\n    {\n        return r | boost::adaptors::filtered(_is_even<rangedecltype(r)>());\n    }\n}\n\nBoost.Range.Adaptors\u306efiltered\u3092\u7279\u6b8a\u5316\u3057\u3066\u3044\u308b\u70bafiltered\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001boost::iterator_range\u3092\u8fd4\u3059\u3088\u3046\u306bfilterd\u306b\u5f53\u305f\u308b\u90e8\u5206\u3092\u81ea\u4f5c\u3082\u51fa\u6765\u307e\u3059\u3002\n\u3053\u306e\u5f62\u3092\u57fa\u672c\u5f62\u3068\u3057\u3066\u3001Range\u64cd\u4f5c\u95a2\u4fc2\u3092\u5168\u90e8range::hoge\u3067\u6e08\u307e\u305b\u3089\u308c\u308b\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u610f\u3057\u3066\u304a\u3051\u3070\u3001\u5b9f\u88c5\u6642\u3082\u8aad\u3080\u6642\u3082\u30b7\u30f3\u30d7\u30eb\u306b\u51fa\u6765\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3001\u3068\u3044\u3046\u7d39\u4ecb\u3067\u3057\u305f\u3002\n\nrange.h\u306b\u59cb\u307e\u308b\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\n\u4f5c\u6210\u306e\u969b\u306bBoost\u306eRange\u306e\u5b9f\u88c5\u3001PStade.Oven\u306e\u5b9f\u88c5\u3092\u591a\u5206\u306b\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n2\u5e74\u7a0b\u524d\u306b\u66f8\u3044\u305fC++11 & boost 1.49\u74b0\u5883\u306e\u5f53\u6642\u306e\u30b3\u30fc\u30c9\u306e\u307e\u307e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306eC++14 & boost 1.60\u306e\u74b0\u5883\u3067\u3082\u52d5\u4f5c\u3057\u307e\u3057\u305f\u3002\n\u6ce8\u610f\u3057\u3066\u4f5c\u6210\u3057\u3066\u306f\u3044\u307e\u3059\u304c\u3001\u4f55\u304b\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3054\u5831\u544a\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\nrange::sorted\u30fbrange::stable_sorted\u306b\u3064\u3044\u3066\n\u3053\u308c\u306f\u304b\u306a\u308a\u5b9f\u9a13\u7684\u306a\u5b9f\u88c5\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u5b9f\u88c5\u65b9\u6cd5\u306fPStade.Oven\u306eoven::sorted\u3068\u540c\u3058\u306a\u306e\u3067\u3059\u304c\u3001boost::iterator_range\u751f\u6210\u6642\u306b\u3082\u3068\u3068\u306a\u308bRange\u3092shared_ptr\u3067\u4fdd\u6301\u3059\u308b\u70ba\u3001\u9ad8\u30b3\u30b9\u30c8\u306a\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3001\u9762\u5012\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u4e00\u7aefvector\u5316\u3057\u3001std::sort\u3092\u3057\u305f\u65b9\u304c\u9ad8\u901f\u3067\u3059\u3002\n\n\u307e\u3068\u3081\n\u3053\u306e\u8a18\u4e8b\u306f\u3001 C++ Advent Calendar 2015 \u306e24\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3057\u305f\u3002\n\u660e\u65e5\u306f\u3001Reputeless\u3055\u3093\u306e\u8a18\u4e8b\u3001\u300c\u30b2\u30fc\u30e0\u3068\u30e1\u30c7\u30a3\u30a2\u30a2\u30fc\u30c8\u306e\u305f\u3081\u306e C++ \u30e9\u30a4\u30d6\u30e9\u30ea\u300cSiv3D\u300d\u300d\u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f [C++ Advent Calendar 2015](http://www.adventar.org/calendars/926) \u306e24\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u6700\u8fd1\u306e\u4ed5\u4e8b\u3067\u306f\u3082\u3063\u3071\u3089PHP\u3070\u304b\u308a\u66f8\u3044\u3066\u307e\u3059\u304c\u3001C++\u3082\u89e6\u308c\u3066\u3044\u305f\u3044\u306a\u30fc\u3068\u3044\u3046\u4e8b\u3067\u53c2\u52a0\u3057\u307e\u3057\u305f\u3002\n\n# \u524d\u66f8\u304d\n\n\u65e2\u5b58\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066[PStade.Oven](http://p-stade.sourceforge.net/oven/doc/html/index.html)\u3084\u9ad8\u6a4b\u6676\u3055\u3093\u306e[Boost.Range\u62e1\u5f35\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/faithandbrave/OvenToBoost)\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u3067\u3001\u30a2\u30d7\u30ea\u6bce\u306e\u5c02\u7528\u95a2\u6570\u3068\u3057\u3066\u4f7f\u3044\u305f\u3044\u3001\u3068\u3044\u3046\u7406\u7531\u3068\u81ea\u5206\u306e\u52c9\u5f37\u304c\u3066\u3089\u306b\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n[GitHub\u3078\u306e\u30ea\u30f3\u30af](https://github.com/wordijp/boost.range-oven-custom)\n\n# \u4f7f\u3044\u65b9\n\n```cpp\n#include \"range.h\"\n\nauto v = {1, 2, 3, 4, 5};\n// {2, 4}\nauto q = v | range::filtered_even();\n```\n\nBoost\u306eRange Adaptors\u3068\u540c\u3058\u304f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u3088\u3063\u3066\u7e4b\u3052\u307e\u3059\u3002\n\n(\u9762\u5012\u306a\u70ba\u3001\u65e2\u5b58\u306eboost::adaptors\u30e9\u30a4\u30d6\u30e9\u30ea\u3092range::\u3067\u4f7f\u3048\u308b\u3088\u3046\u306bnamespace\u5185\u3067\n```\nusing namespace boost::adaptors;\n```\n\u3057\u3066\u3044\u307e\u3059)\n\n# \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u8a18\u6cd5\u3067\u66f8\u3051\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u306b\u306f\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u8a18\u6cd5\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001operator|\u3092\u7cca\u4ed8\u3051\u3068\u3057\u3066\u3001Range\u5024(\u914d\u5217\u306b\u9650\u3089\u306a\u3044\u3001begin()\u3068end()\u3092\u5b9f\u88c5\u3057\u305f\u7bc4\u56f2\u3092\u8868\u3059\u5024)\u3068\u3001Range\u5024\u304b\u3089\u65b0\u305f\u306aRange\u5024\u3092\u8fd4\u3059\u5b9f\u88c5\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```cpp\n// Range\u304b\u3089\u8981\u7d20\u306e\u578b\u3092\u5f97\u308b\ntemplate <class Range>\nauto _rangetype(Range&& r) ->\n\ttypename std::decay<\n\t\tdecltype(*std::begin(r))\n\t>::type;\n// \u914d\u5217\u8981\u7d20\u306e\u578b\u53d6\u5f97\n#define rangedecltype(r) decltype(_rangetype(r))\n\nnamespace range {\n\t//------------------------------\n\t/// INTERNAL ONLY\n\t/// \n\t// {\n\t\tstruct _FilteredEvenHolder {};\n\t\t\n\t\ttemplate <typename T>\n\t\tstruct _is_even {\n\t\t\tbool operator()(const T &t) const {\n\t\t\t\treturn t % 2 == 0;\n\t\t\t}\n\t\t};\n\t// }\n\n\t_FilteredEvenHolder filtered_even() { return _FilteredEvenHolder(); }\n\n\ttemplate <typename Range>\n\tauto operator| (Range &r, const _FilteredEvenHolder &)\n\t{\n\t\treturn r | boost::adaptors::filtered(_is_even<rangedecltype(r)>());\n\t}\n\n\ttemplate <typename Range>\n\tauto operator| (const Range &r, const _FilteredEvenHolder &)\n\t{\n\t\treturn r | boost::adaptors::filtered(_is_even<rangedecltype(r)>());\n\t}\n}\n```\n\nBoost.Range.Adaptors\u306efiltered\u3092\u7279\u6b8a\u5316\u3057\u3066\u3044\u308b\u70bafiltered\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001boost::iterator_range\u3092\u8fd4\u3059\u3088\u3046\u306bfilterd\u306b\u5f53\u305f\u308b\u90e8\u5206\u3092\u81ea\u4f5c\u3082\u51fa\u6765\u307e\u3059\u3002\n\n\u3053\u306e\u5f62\u3092\u57fa\u672c\u5f62\u3068\u3057\u3066\u3001Range\u64cd\u4f5c\u95a2\u4fc2\u3092\u5168\u90e8range::hoge\u3067\u6e08\u307e\u305b\u3089\u308c\u308b\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u610f\u3057\u3066\u304a\u3051\u3070\u3001\u5b9f\u88c5\u6642\u3082\u8aad\u3080\u6642\u3082\u30b7\u30f3\u30d7\u30eb\u306b\u51fa\u6765\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3001\u3068\u3044\u3046\u7d39\u4ecb\u3067\u3057\u305f\u3002\n\n# range.h\u306b\u59cb\u307e\u308b\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\n\n\u4f5c\u6210\u306e\u969b\u306bBoost\u306eRange\u306e\u5b9f\u88c5\u3001PStade.Oven\u306e\u5b9f\u88c5\u3092\u591a\u5206\u306b\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n2\u5e74\u7a0b\u524d\u306b\u66f8\u3044\u305fC++11 & boost 1.49\u74b0\u5883\u306e\u5f53\u6642\u306e\u30b3\u30fc\u30c9\u306e\u307e\u307e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306eC++14 & boost 1.60\u306e\u74b0\u5883\u3067\u3082\u52d5\u4f5c\u3057\u307e\u3057\u305f\u3002\n\n\u6ce8\u610f\u3057\u3066\u4f5c\u6210\u3057\u3066\u306f\u3044\u307e\u3059\u304c\u3001\u4f55\u304b\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3054\u5831\u544a\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n## range::sorted\u30fbrange::stable_sorted\u306b\u3064\u3044\u3066\n\n\u3053\u308c\u306f\u304b\u306a\u308a\u5b9f\u9a13\u7684\u306a\u5b9f\u88c5\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u5b9f\u88c5\u65b9\u6cd5\u306fPStade.Oven\u306eoven::sorted\u3068\u540c\u3058\u306a\u306e\u3067\u3059\u304c\u3001boost::iterator_range\u751f\u6210\u6642\u306b\u3082\u3068\u3068\u306a\u308bRange\u3092shared_ptr\u3067\u4fdd\u6301\u3059\u308b\u70ba\u3001\u9ad8\u30b3\u30b9\u30c8\u306a\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3001\u9762\u5012\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u4e00\u7aefvector\u5316\u3057\u3001std::sort\u3092\u3057\u305f\u65b9\u304c\u9ad8\u901f\u3067\u3059\u3002\n\n# \u307e\u3068\u3081\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001 [C++ Advent Calendar 2015](http://www.adventar.org/calendars/926) \u306e24\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3057\u305f\u3002\n\u660e\u65e5\u306f\u3001Reputeless\u3055\u3093\u306e\u8a18\u4e8b\u3001\u300c\u30b2\u30fc\u30e0\u3068\u30e1\u30c7\u30a3\u30a2\u30a2\u30fc\u30c8\u306e\u305f\u3081\u306e C++ \u30e9\u30a4\u30d6\u30e9\u30ea\u300cSiv3D\u300d\u300d\u3067\u3059\u3002\n", "tags": ["C++", "boost"]}