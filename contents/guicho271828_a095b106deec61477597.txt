{"context": " More than 1 year has passed since last update.http://qiita.com/guicho271828/items/60236e32871b9eb610c7 \u306e\u7d9a\u304d\u3002\n\u305d\u3082\u305d\u3082\u8ad6\u3067\u3001\u305f\u3057\u304b\u5185\u7a4d\u578b\u306e\u914d\u5217\u30a2\u30af\u30bb\u30b9\u306f\u6295\u6a5f\u7684\u30e1\u30e2\u30ea\u8ee2\u9001\u4e91\u3005\u3067\u9045\u3044\u3093\u3060\u3063\u305f\u3002(p.46\u3001 \u300cikj, jki\u30eb\u30fc\u30d7\u306b\u3088\u308b\u5b9f\u73fe\u300d\u3002) \u5217\u65b9\u5411\u30a2\u30af\u30bb\u30b9\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3084\u3063\u3066\u307f\u305f (\u3053\u308c\u3063\u3066\u306f\u305f\u3057\u3066lisp\u3067\u3082\u6b63\u3057\u3044\u306e\u304b?)\n\u4e00\u5fdc\u3001\u5143\u306e\n(defun simple-gemm (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0)))\n  (declare (type matrix ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (col cols)\n        (dotimes (k cols)\n          (incf (aref mc row col)\n                (* (aref ma row k) (aref mb k col))))))\n    mc))\n(benchmark (10)\n  (simple-gemm *ma* *mb* *mc*)\n  ;; Evaluation took:\n  ;;   7.020 seconds of real time\n  ;;   7.020000 seconds of total run time (7.020000 user, 0.000000 system)\n  ;;   100.00% CPU\n  ;;   21,061,255,674 processor cycles\n  ;;   65,536 bytes consed\n  )\n\n\u306b\u5bfe\u3057\u3066\u3001\u30eb\u30fc\u30d7\u3092\u5165\u308c\u66ff\u3048\u305f\u3060\u3051\u306e\u4ee5\u4e0b\u306f\n(defun simple-gemm-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0)))\n  (declare (type matrix ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (dotimes (col cols)\n          (incf (aref mc row col)\n                (* (aref ma row k) (aref mb k col))))))\n                                           ; \\__ k \u306f\u5909\u5316\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\n    mc))\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   5.920 seconds of real time\n  ;;   5.920000 seconds of total run time (5.920000 user, 0.000000 system)\n  ;;   100.00% CPU\n  ;;   17,760,421,320 processor cycles\n  ;;   35,712 bytes consed\n  (simple-gemm-k *ma* *mb* *mc*))\n\n\u3060\u3063\u305f\u3002\u3069\u3046\u3084\u3089\u3053\u3063\u3061\u30d9\u30fc\u30b9\u306b\u3057\u306a\u3044\u3068\u3060\u3081\u305d\u3046\u3060\u3002\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u3044\u308d\u3044\u308d\u66f8\u304d\u76f4\u3059\u3002\n\ncache-gemm-k\n(defun cache-gemm-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type matrix ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k)))\n          (dotimes (col cols)\n            (incf (aref mc row col)\n                  (* cell (aref mb k col)))))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   5.084 seconds of real time\n  ;;   5.084000 seconds of total run time (5.080000 user, 0.004000 system)\n  ;;   100.00% CPU\n  ;;   15,252,688,222 processor cycles\n  ;;   30,224 bytes consed\n  (cache-gemm-k *ma* *mb* *mc*))\n\nok.\n\nrow-major-gemm-k\n(defun rm-gemm-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type matrix ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k))\n              (mb-index (array-row-major-index mb k 0))\n              (mc-index (array-row-major-index mc row 0)))\n          (dotimes (col cols)\n            (incf (row-major-aref mc mc-index)\n                  (* cell (row-major-aref mb mb-index)))\n            (incf mb-index)\n            (incf mc-index)))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   2.701 seconds of real time\n  ;;   2.708000 seconds of total run time (2.708000 user, 0.000000 system)\n  ;;   100.26% CPU\n  ;;   8,102,781,155 processor cycles\n  ;;   487,504 bytes consed\n  (rm-gemm-k *ma* *mb* *mc*))\n\nok. \u3061\u306a\u307f\u306b \u3082\u3068\u306e row-major-gemm \u306f \n(benchmark (10)\n  ;; Evaluation took:\n  ;;   3.115 seconds of real time\n  ;;   3.116000 seconds of total run time (3.116000 user, 0.000000 system)\n  ;;   100.03% CPU\n  ;;   9,347,123,164 processor cycles\n  ;;   55,072 bytes consed\n  (row-major-gemm *ma* *mb* *mc*))\n\n\nstatic size \u3067\u5ba3\u8a00\n\u3053\u3053\u3089\u3078\u3093\u304b\u3089\u96f2\u884c\u304d\u304c\u602a\u3057\u304f\u306a\u3063\u3066\u304d\u305f\u3002\n(defun rm-gemm+static-size-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k))\n              (mb-index (array-row-major-index mb k 0))\n              (mc-index (array-row-major-index mc row 0)))\n          (dotimes (col cols)\n            (incf (row-major-aref mc mc-index)\n                  (* cell (row-major-aref mb mb-index)))\n            (incf mb-index)\n            (incf mc-index)))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   2.696 seconds of real time\n  ;;   2.696000 seconds of total run time (2.696000 user, 0.000000 system)\n  ;;   100.00% CPU\n  ;;   8,088,876,210 processor cycles\n  ;;   33,056 bytes consed\n  (rm-gemm+static-size-k *ma* *mb* *mc*))\n\n\u3053\u308c\u306f\u3042\u3093\u307e\u308a\u5909\u308f\u3089\u306a\u3044\u306a\u3002\u6700\u521d\u306earray-dimension\u3067\u7d50\u679c(500)\u304c\u53d6\u3089\u308c\u3066\u3044\u308b\u304b\u3089\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u306e\u304b\u306a\u3002\u3053\u306e\u6642\u70b9\u306e\u30b3\u30fc\u30c9\u306f\n; disassembly for RM-GEMM+STATIC-SIZE-K\n; Size: 170 bytes. Origin: #x10030631A8\n; 1A8:       31FF             XOR EDI, EDI                    ; no-arg-parsing entry point\n; 1AA:       E98D000000       JMP L5\n; 1AF:       90               NOP\n; 1B0: L0:   31C9             XOR ECX, ECX\n; 1B2:       E978000000       JMP L4\n; 1B7:       660F1F840000000000 NOP\n; 1C0: L1:   4869C7F4010000   IMUL RAX, RDI, 500\n; 1C7:       4801C8           ADD RAX, RCX\n; 1CA:       498B5211         MOV RDX, [R10+17]\n; 1CE:       F30F105C4201     MOVSS XMM3, [RDX+RAX*2+1]\n; 1D4:       4869F1F4010000   IMUL RSI, RCX, 500\n; 1DB:       4869C7F4010000   IMUL RAX, RDI, 500\n; 1E2:       31DB             XOR EBX, EBX\n; 1E4:       EB3C             JMP L3\n; 1E6:       660F1F840000000000 NOP\n; 1EF:       90               NOP\n; 1F0: L2:   498B5111         MOV RDX, [R9+17]\n; 1F4:       F30F104C7201     MOVSS XMM1, [RDX+RSI*2+1]\n; 1FA:       F30F59CB         MULSS XMM1, XMM3\n; 1FE:       498B5011         MOV RDX, [R8+17]\n; 202:       F30F10544201     MOVSS XMM2, [RDX+RAX*2+1]\n; 208:       F30F58D1         ADDSS XMM2, XMM1\n; 20C:       498B5011         MOV RDX, [R8+17]\n; 210:       F30F11544201     MOVSS [RDX+RAX*2+1], XMM2\n; 216:       4883C602         ADD RSI, 2\n; 21A:       4883C002         ADD RAX, 2\n; 21E:       4883C302         ADD RBX, 2\n; 222: L3:   4881FBE8030000   CMP RBX, 1000\n; 229:       7CC5             JL L2\n; 22B:       4883C102         ADD RCX, 2\n; 22F: L4:   4881F9E8030000   CMP RCX, 1000\n; 236:       7C88             JL L1\n; 238:       4883C702         ADD RDI, 2\n; 23C: L5:   4881FFE8030000   CMP RDI, 1000\n; 243:       0F8C67FFFFFF     JL L0\n; 249:       498BD0           MOV RDX, R8\n; 24C:       488BE5           MOV RSP, RBP\n; 24F:       F8               CLC\n; 250:       5D               POP RBP\n; 251:       C3               RET\n\n\nloop unrolling\n\u624b\u3067\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u306e\u306f\u3082\u3046\u99ac\u9e7f\u3089\u3057\u3044\u306e\u3067\u6700\u521d\u304b\u3089\u63a2\u7d22\u3057\u305f\u3002\n\u3059\u308b\u3068 \u307e\u3063\u305f\u304f\u6539\u5584\u3055\u308c\u306a\u304b\u3063\u305f\u3002 \u306a\u305c\u3060\u3002\u624b\u3067\u66f8\u3044\u3066\u3082\u3060\u3081\u3060\u3002\n(defun rm-gemm+static-size+unroll-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k))\n              (mb-index (array-row-major-index mb k 0))\n              (mc-index (array-row-major-index mc row 0)))\n          (dotimes-unroll (col cols 2)\n            (incf (row-major-aref mc mc-index)\n                  (* cell (row-major-aref mb mb-index)))\n            (incf mb-index)\n            (incf mc-index)))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   2.699 seconds of real time\n  ;;   2.704000 seconds of total run time (2.704000 user, 0.000000 system)\n  ;;   100.19% CPU\n  ;;   8,098,862,660 processor cycles\n  ;;   0 bytes consed\n  (rm-gemm+static-size+unroll-k *ma* *mb* *mc*))\n\ndotimes-unroll \u306e\u5b9a\u7fa9\u304c\u3060\u3081\u306b\u9055\u3044\u306a\u3044\u3002\n\ndotimes-unroll2\ndotimes-unroll \u306f incf \u3092\u3044\u304f\u3064\u304b\u30b3\u30d4\u30fc\u3057\u3066\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u305f\u3002\u305d\u308c\u306f\u306a\u3093\u3068\u306a\u304f\u5acc\u306a\u611f\u3058\u304c\u3059\u308b\u3002\n\u305d\u3053\u3067symbol-macrolet \u3092\u7528\u3044\u3066\u672c\u5f53\u306b\u5b9a\u6570\u4f1d\u64ad\u3055\u305b\u305funroll\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\u7d50\u69cb\u9aa8\u304c\u6298\u308c\u305f\u3002\n\u307e\u305a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5909\u3048\u3066\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u5168\u3066\u306e\u5909\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3002\n\u3053\u308c\u3089\u306e\u5909\u6570\u306f\u5168\u3066symbol-macrolet\u3067\u96a0\u853d\u3055\u308c\u3001gensym\u3055\u308c\u305f\u5b9f\u969b\u306e\u5909\u6570\u540d\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n(ql:quickload :alexandria)\n(use-package :alexandria)\n(ql:quickload :priority-queue)\n(use-package :priority-queue)\n(ql:quickload :iterate)\n(use-package :iterate)\n(ql:quickload :trivia)\n(use-package :trivia)\n\n(defmacro dotimes-unroll2 ((var n unroll) parameters &body body)\n  (check-type var symbol)                   ; \\___ new!\n  (assert (and (constantp unroll) (numberp unroll)))\n  (with-gensyms (limit1 i) ; i is the true counter\n    (let (varlist bindings)\n      (dolist (p parameters)\n        (ematch (ensure-list p)\n          ((list x) ; x : user interface, replaced with y by symbol-macrolet\n           (with-gensyms (y)\n             (push (list x y) bindings) ; y is the true counter\n             (push (list y 0 `(+ ,y ,unroll)) varlist)))\n          ((list x start)\n           (with-gensyms (y)\n             (push (list x y) bindings)\n             (push (list y start `(+ ,y ,unroll)) varlist)))))\n      (push (list var i) bindings)\n      (push (list i 0 `(+ ,i ,unroll)) varlist)\n      (once-only (n)\n        `(locally (declare (fixnum ,n))\n           (let ((,limit1 (the fixnum (- ,n ,unroll))))\n             (declare (fixnum ,limit1))\n             (do (,@varlist)\n                 ((< ,limit1 ,i)\n                  (do (,@(mapcar (lambda-match\n                                   ((list y _ _) `(,y ,y (the fixnum (1+ ,y)))))\n                                 varlist))\n                      ((<= ,n ,i))\n                    (symbol-macrolet (,@bindings)\n                      ,@body)))\n               (declare (fixnum ,@(mapcar #'first varlist)))\n               ,@(iter (for j below unroll)\n                       (collect\n                           `(symbol-macrolet (,@(mapcar (lambda-match\n                                                          ((list x y) `(,x (the fixnum (+ ,y ,j)))))\n                                                  bindings))\n                              ,@body))))))))))\n\n\n\u6027\u80fd\u8a08\u6e2c: \u3060\u3081\u3060\u3063\u305f\u3002\u5909\u308f\u3089\u306a\u3044\u3002\u306a\u3093\u3067\u3060\u308d\u3046? \u3068\u66f8\u304f\u3068\u3060\u308c\u304b\u304c\u3084\u3063\u3066\u304f\u308c\u308b\u306f\u305a\u3002\n(defun rm-gemm+static-size+unroll-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k)))\n          (dotimes-unroll2 (col cols 2) ((mb-index (array-row-major-index mb k 0))\n                                         (mc-index (array-row-major-index mc row 0)))\n            (incf (row-major-aref mc mc-index)\n                  (* cell (row-major-aref mb mb-index)))))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   2.753 seconds of real time\n  ;;   2.752000 seconds of total run time (2.752000 user, 0.000000 system)\n  ;;   99.96% CPU\n  ;;   8,259,540,639 processor cycles\n  ;;   33,248 bytes consed\n  (rm-gemm+static-size+unroll-k *ma* *mb* *mc*))\n\ndisassemble:\n; disassembly for RM-GEMM+STATIC-SIZE+UNROLL-K\n; Size: 287 bytes. Origin: #x101075E738\n; 738:       4D31C9           XOR R9, R9                      ; no-arg-parsing entry point\n; 73B:       E901010000       JMP L7\n; 740: L0:   31F6             XOR ESI, ESI\n; 742:       E9E9000000       JMP L6\n; 747:       660F1F840000000000 NOP\n; 750: L1:   4969C9F4010000   IMUL RCX, R9, 500\n; 757:       4801F1           ADD RCX, RSI\n; 75A:       498B5611         MOV RDX, [R14+17]\n; 75E:       F30F104C4A01     MOVSS XMM1, [RDX+RCX*2+1]\n; 764:       4969C9F4010000   IMUL RCX, R9, 500\n; 76B:       4869DEF4010000   IMUL RBX, RSI, 500\n; 772:       31FF             XOR EDI, EDI\n; 774:       EB6D             JMP L3\n; 776:       660F1F840000000000 NOP\n; 77F:       90               NOP\n; 780: L2:   498B5011         MOV RDX, [R8+17]\n; 784:       F30F10545A01     MOVSS XMM2, [RDX+RBX*2+1]\n; 78A:       F30F59D1         MULSS XMM2, XMM1\n; 78E:       488B5011         MOV RDX, [RAX+17]\n; 792:       F30F105C4A01     MOVSS XMM3, [RDX+RCX*2+1]\n; 798:       F30F58DA         ADDSS XMM3, XMM2\n; 79C:       488B5011         MOV RDX, [RAX+17]\n; 7A0:       F30F115C4A01     MOVSS [RDX+RCX*2+1], XMM3\n; 7A6:       488D5102         LEA RDX, [RCX+2]\n; 7AA:       4C8D5302         LEA R10, [RBX+2]\n; 7AE:       4D8B6811         MOV R13, [R8+17]\n; 7B2:       F3430F10545501   MOVSS XMM2, [R13+R10*2+1]\n; 7B9:       F30F59D1         MULSS XMM2, XMM1\n; 7BD:       4C8B5011         MOV R10, [RAX+17]\n; 7C1:       F3410F105C5201   MOVSS XMM3, [R10+RDX*2+1]\n; 7C8:       F30F58DA         ADDSS XMM3, XMM2\n; 7CC:       4C8B5011         MOV R10, [RAX+17]\n; 7D0:       F3410F115C5201   MOVSS [R10+RDX*2+1], XMM3\n; 7D7:       4883C704         ADD RDI, 4\n; 7DB:       4883C104         ADD RCX, 4\n; 7DF:       4883C304         ADD RBX, 4\n; 7E3: L3:   4881FFE4030000   CMP RDI, 996\n; 7EA:       7E94             JLE L2\n; 7EC:       EB35             JMP L5\n; 7EE:       6690             NOP\n; 7F0: L4:   498B5011         MOV RDX, [R8+17]\n; 7F4:       F30F10545A01     MOVSS XMM2, [RDX+RBX*2+1]\n; 7FA:       F30F59D1         MULSS XMM2, XMM1\n; 7FE:       488B5011         MOV RDX, [RAX+17]\n; 802:       F30F105C4A01     MOVSS XMM3, [RDX+RCX*2+1]\n; 808:       F30F58DA         ADDSS XMM3, XMM2\n; 80C:       488B5011         MOV RDX, [RAX+17]\n; 810:       F30F115C4A01     MOVSS [RDX+RCX*2+1], XMM3\n; 816:       4883C102         ADD RCX, 2\n; 81A:       4883C302         ADD RBX, 2\n; 81E:       BFE8030000       MOV EDI, 1000\n; 823: L5:   4881FFE8030000   CMP RDI, 1000\n; 82A:       7CC4             JL L4\n; 82C:       4883C602         ADD RSI, 2\n; 830: L6:   4881FEE8030000   CMP RSI, 1000\n; 837:       0F8C13FFFFFF     JL L1\n; 83D:       4983C102         ADD R9, 2\n; 841: L7:   4981F9E8030000   CMP R9, 1000\n; 848:       0F8CF2FEFFFF     JL L0\n; 84E:       488BD0           MOV RDX, RAX\n; 851:       488BE5           MOV RSP, RBP\n; 854:       F8               CLC\n; 855:       5D               POP RBP\n; 856:       C3               RET\n\nmacroexpansion:\n(dotimes-unroll2 (col cols 2) ((mb-index (array-row-major-index mb k 0))\n                               (mc-index (array-row-major-index mc row 0)))\n   (incf (row-major-aref mc mc-index)\n         (* cell (row-major-aref mb mb-index))))\n\n(LET ((#:N849 COLS))\n  (LOCALLY\n   (DECLARE (FIXNUM #:N849))\n   (LET ((#:LIMIT1845 (THE FIXNUM (- #:N849 2))))\n     (DECLARE (FIXNUM #:LIMIT1845))\n     (DO ((#:I846 0 (+ #:I846 2))\n          (#:Y848 (ARRAY-ROW-MAJOR-INDEX MC ROW 0) (THE FIXNUM (+ #:Y848 2)))\n          (#:Y847 (ARRAY-ROW-MAJOR-INDEX MB K 0) (THE FIXNUM (+ #:Y847 2))))\n         ((< #:LIMIT1845 #:I846)\n          (DO ((#:I846 #:I846 (THE FIXNUM (1+ #:I846)))\n               (#:Y848 #:Y848 (THE FIXNUM (1+ #:Y848)))\n               (#:Y847 #:Y847 (THE FIXNUM (1+ #:Y847))))\n              ((<= #:N849 #:I846))\n            (DECLARE (FIXNUM #:I846 #:Y848 #:Y847))\n            (SYMBOL-MACROLET ((COL #:I846) (MC-INDEX #:Y848) (MB-INDEX #:Y847))\n              (INCF (ROW-MAJOR-AREF MC MC-INDEX)\n                    (* CELL (ROW-MAJOR-AREF MB MB-INDEX))))))\n       (DECLARE (FIXNUM #:I846 #:Y848 #:Y847))\n       (SYMBOL-MACROLET ((COL (THE FIXNUM (+ #:I846 0)))\n                         (MC-INDEX (THE FIXNUM (+ #:Y848 0)))\n                         (MB-INDEX (THE FIXNUM (+ #:Y847 0))))\n         (INCF (ROW-MAJOR-AREF MC MC-INDEX)\n               (* CELL (ROW-MAJOR-AREF MB MB-INDEX))))\n       (SYMBOL-MACROLET ((COL (THE FIXNUM (+ #:I846 1)))\n                         (MC-INDEX (THE FIXNUM (+ #:Y848 1)))\n                         (MB-INDEX (THE FIXNUM (+ #:Y847 1))))\n         (INCF (ROW-MAJOR-AREF MC MC-INDEX)\n               (* CELL (ROW-MAJOR-AREF MB MB-INDEX))))))))\n\n; equivalent to\n\n(LET ((#:N849 COLS))\n  (LOCALLY\n   (DECLARE (FIXNUM #:N849))\n   (LET ((#:LIMIT1845 (THE FIXNUM (- #:N849 2))))\n     (DECLARE (FIXNUM #:LIMIT1845))\n     (DO ((#:I846 0 (+ #:I846 2))\n          (#:Y848 (ARRAY-ROW-MAJOR-INDEX MC ROW 0) (THE FIXNUM (+ #:Y848 2)))\n          (#:Y847 (ARRAY-ROW-MAJOR-INDEX MB K 0) (THE FIXNUM (+ #:Y847 2))))\n         ((< #:LIMIT1845 #:I846)\n          (DO ((#:I846 #:I846 (THE FIXNUM (1+ #:I846)))\n               (#:Y848 #:Y848 (THE FIXNUM (1+ #:Y848)))\n               (#:Y847 #:Y847 (THE FIXNUM (1+ #:Y847))))\n              ((<= #:N849 #:I846))\n            (DECLARE (FIXNUM #:I846 #:Y848 #:Y847))\n            (INCF (ROW-MAJOR-AREF MC #:Y848)\n                  (* CELL (ROW-MAJOR-AREF MB #:Y847)))))\n       (DECLARE (FIXNUM #:I846 #:Y848 #:Y847))\n       (INCF (ROW-MAJOR-AREF MC (THE FIXNUM (+ #:Y848 0)))\n             (* CELL (ROW-MAJOR-AREF MB (THE FIXNUM (+ #:Y847 0)))))\n       (INCF (ROW-MAJOR-AREF MC (THE FIXNUM (+ #:Y848 1)))\n             (* CELL (ROW-MAJOR-AREF MB (THE FIXNUM (+ #:Y847 1)))))))))\n\n\n\u30e1\u30e2: VOP \u3092\u4f7f\u304a\u3046\u3068\u3044\u3046\u4e8b\u306b\u306a\u3063\u305f\u304c\u3001 data-vector-set-with-offset \u304c VOP \u306b\u5909\u63db\u3055\u308c\u306a\u304f\u3066full-call \u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u304b\u3064 always-transferrable \u306a\u306e\u3067 \u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u3069\u3046\u3059\u308b\u304b\u3002\nhttp://qiita.com/guicho271828/items/60236e32871b9eb610c7 \u306e\u7d9a\u304d\u3002\n\n\u305d\u3082\u305d\u3082\u8ad6\u3067\u3001\u305f\u3057\u304b[\u5185\u7a4d\u578b\u306e\u914d\u5217\u30a2\u30af\u30bb\u30b9\u306f\u6295\u6a5f\u7684\u30e1\u30e2\u30ea\u8ee2\u9001\u4e91\u3005\u3067\u9045\u3044\u3093\u3060\u3063\u305f\u3002](https://www.google.co.jp/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0ahUKEwjOq8OVoZ3LAhXjr6YKHWOaBOcQFggbMAA&url=http%3A%2F%2Fwww.cms-initiative.jp%2Fja%2Fevents%2F20130411katagiri.pdf&usg=AFQjCNHvqahcrZHPTu2y-BA4TzKqufyMMA&sig2=0oPbtfxxLS_QEquKKZl2Cw&bvm=bv.115339255,d.dGY)(p.46\u3001 \u300cikj, jki\u30eb\u30fc\u30d7\u306b\u3088\u308b\u5b9f\u73fe\u300d\u3002) \u5217\u65b9\u5411\u30a2\u30af\u30bb\u30b9\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3084\u3063\u3066\u307f\u305f (\u3053\u308c\u3063\u3066\u306f\u305f\u3057\u3066lisp\u3067\u3082\u6b63\u3057\u3044\u306e\u304b?)\n\n\u4e00\u5fdc\u3001\u5143\u306e\n\n```cl\n(defun simple-gemm (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0)))\n  (declare (type matrix ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (col cols)\n        (dotimes (k cols)\n          (incf (aref mc row col)\n                (* (aref ma row k) (aref mb k col))))))\n    mc))\n(benchmark (10)\n  (simple-gemm *ma* *mb* *mc*)\n  ;; Evaluation took:\n  ;;   7.020 seconds of real time\n  ;;   7.020000 seconds of total run time (7.020000 user, 0.000000 system)\n  ;;   100.00% CPU\n  ;;   21,061,255,674 processor cycles\n  ;;   65,536 bytes consed\n  )\n```\n\n\u306b\u5bfe\u3057\u3066\u3001\u30eb\u30fc\u30d7\u3092\u5165\u308c\u66ff\u3048\u305f\u3060\u3051\u306e\u4ee5\u4e0b\u306f\n\n```cl\n(defun simple-gemm-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0)))\n  (declare (type matrix ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (dotimes (col cols)\n          (incf (aref mc row col)\n                (* (aref ma row k) (aref mb k col))))))\n                                           ; \\__ k \u306f\u5909\u5316\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\n    mc))\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   5.920 seconds of real time\n  ;;   5.920000 seconds of total run time (5.920000 user, 0.000000 system)\n  ;;   100.00% CPU\n  ;;   17,760,421,320 processor cycles\n  ;;   35,712 bytes consed\n  (simple-gemm-k *ma* *mb* *mc*))\n```\n\n\u3060\u3063\u305f\u3002\u3069\u3046\u3084\u3089\u3053\u3063\u3061\u30d9\u30fc\u30b9\u306b\u3057\u306a\u3044\u3068\u3060\u3081\u305d\u3046\u3060\u3002\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u3044\u308d\u3044\u308d\u66f8\u304d\u76f4\u3059\u3002\n\n# cache-gemm-k\n\n```cl\n(defun cache-gemm-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type matrix ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k)))\n          (dotimes (col cols)\n            (incf (aref mc row col)\n                  (* cell (aref mb k col)))))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   5.084 seconds of real time\n  ;;   5.084000 seconds of total run time (5.080000 user, 0.004000 system)\n  ;;   100.00% CPU\n  ;;   15,252,688,222 processor cycles\n  ;;   30,224 bytes consed\n  (cache-gemm-k *ma* *mb* *mc*))\n```\n\nok.\n\n# row-major-gemm-k\n\n```cl\n(defun rm-gemm-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type matrix ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k))\n              (mb-index (array-row-major-index mb k 0))\n              (mc-index (array-row-major-index mc row 0)))\n          (dotimes (col cols)\n            (incf (row-major-aref mc mc-index)\n                  (* cell (row-major-aref mb mb-index)))\n            (incf mb-index)\n            (incf mc-index)))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   2.701 seconds of real time\n  ;;   2.708000 seconds of total run time (2.708000 user, 0.000000 system)\n  ;;   100.26% CPU\n  ;;   8,102,781,155 processor cycles\n  ;;   487,504 bytes consed\n  (rm-gemm-k *ma* *mb* *mc*))\n```\nok. \u3061\u306a\u307f\u306b \u3082\u3068\u306e row-major-gemm \u306f \n\n```cl\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   3.115 seconds of real time\n  ;;   3.116000 seconds of total run time (3.116000 user, 0.000000 system)\n  ;;   100.03% CPU\n  ;;   9,347,123,164 processor cycles\n  ;;   55,072 bytes consed\n  (row-major-gemm *ma* *mb* *mc*))\n```\n\n# static size \u3067\u5ba3\u8a00\n\n\u3053\u3053\u3089\u3078\u3093\u304b\u3089\u96f2\u884c\u304d\u304c\u602a\u3057\u304f\u306a\u3063\u3066\u304d\u305f\u3002\n\n```cl\n(defun rm-gemm+static-size-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k))\n              (mb-index (array-row-major-index mb k 0))\n              (mc-index (array-row-major-index mc row 0)))\n          (dotimes (col cols)\n            (incf (row-major-aref mc mc-index)\n                  (* cell (row-major-aref mb mb-index)))\n            (incf mb-index)\n            (incf mc-index)))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   2.696 seconds of real time\n  ;;   2.696000 seconds of total run time (2.696000 user, 0.000000 system)\n  ;;   100.00% CPU\n  ;;   8,088,876,210 processor cycles\n  ;;   33,056 bytes consed\n  (rm-gemm+static-size-k *ma* *mb* *mc*))\n```\n\n\u3053\u308c\u306f\u3042\u3093\u307e\u308a\u5909\u308f\u3089\u306a\u3044\u306a\u3002\u6700\u521d\u306earray-dimension\u3067\u7d50\u679c(500)\u304c\u53d6\u3089\u308c\u3066\u3044\u308b\u304b\u3089\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u306e\u304b\u306a\u3002\u3053\u306e\u6642\u70b9\u306e\u30b3\u30fc\u30c9\u306f\n\n```\n; disassembly for RM-GEMM+STATIC-SIZE-K\n; Size: 170 bytes. Origin: #x10030631A8\n; 1A8:       31FF             XOR EDI, EDI                    ; no-arg-parsing entry point\n; 1AA:       E98D000000       JMP L5\n; 1AF:       90               NOP\n; 1B0: L0:   31C9             XOR ECX, ECX\n; 1B2:       E978000000       JMP L4\n; 1B7:       660F1F840000000000 NOP\n; 1C0: L1:   4869C7F4010000   IMUL RAX, RDI, 500\n; 1C7:       4801C8           ADD RAX, RCX\n; 1CA:       498B5211         MOV RDX, [R10+17]\n; 1CE:       F30F105C4201     MOVSS XMM3, [RDX+RAX*2+1]\n; 1D4:       4869F1F4010000   IMUL RSI, RCX, 500\n; 1DB:       4869C7F4010000   IMUL RAX, RDI, 500\n; 1E2:       31DB             XOR EBX, EBX\n; 1E4:       EB3C             JMP L3\n; 1E6:       660F1F840000000000 NOP\n; 1EF:       90               NOP\n; 1F0: L2:   498B5111         MOV RDX, [R9+17]\n; 1F4:       F30F104C7201     MOVSS XMM1, [RDX+RSI*2+1]\n; 1FA:       F30F59CB         MULSS XMM1, XMM3\n; 1FE:       498B5011         MOV RDX, [R8+17]\n; 202:       F30F10544201     MOVSS XMM2, [RDX+RAX*2+1]\n; 208:       F30F58D1         ADDSS XMM2, XMM1\n; 20C:       498B5011         MOV RDX, [R8+17]\n; 210:       F30F11544201     MOVSS [RDX+RAX*2+1], XMM2\n; 216:       4883C602         ADD RSI, 2\n; 21A:       4883C002         ADD RAX, 2\n; 21E:       4883C302         ADD RBX, 2\n; 222: L3:   4881FBE8030000   CMP RBX, 1000\n; 229:       7CC5             JL L2\n; 22B:       4883C102         ADD RCX, 2\n; 22F: L4:   4881F9E8030000   CMP RCX, 1000\n; 236:       7C88             JL L1\n; 238:       4883C702         ADD RDI, 2\n; 23C: L5:   4881FFE8030000   CMP RDI, 1000\n; 243:       0F8C67FFFFFF     JL L0\n; 249:       498BD0           MOV RDX, R8\n; 24C:       488BE5           MOV RSP, RBP\n; 24F:       F8               CLC\n; 250:       5D               POP RBP\n; 251:       C3               RET\n```\n\n# loop unrolling\n\n\u624b\u3067\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u306e\u306f\u3082\u3046\u99ac\u9e7f\u3089\u3057\u3044\u306e\u3067\u6700\u521d\u304b\u3089\u63a2\u7d22\u3057\u305f\u3002\n\u3059\u308b\u3068 **\u307e\u3063\u305f\u304f\u6539\u5584\u3055\u308c\u306a\u304b\u3063\u305f**\u3002 \u306a\u305c\u3060\u3002\u624b\u3067\u66f8\u3044\u3066\u3082\u3060\u3081\u3060\u3002\n\n```cl\n(defun rm-gemm+static-size+unroll-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k))\n              (mb-index (array-row-major-index mb k 0))\n              (mc-index (array-row-major-index mc row 0)))\n          (dotimes-unroll (col cols 2)\n            (incf (row-major-aref mc mc-index)\n                  (* cell (row-major-aref mb mb-index)))\n            (incf mb-index)\n            (incf mc-index)))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   2.699 seconds of real time\n  ;;   2.704000 seconds of total run time (2.704000 user, 0.000000 system)\n  ;;   100.19% CPU\n  ;;   8,098,862,660 processor cycles\n  ;;   0 bytes consed\n  (rm-gemm+static-size+unroll-k *ma* *mb* *mc*))\n```\n\ndotimes-unroll \u306e\u5b9a\u7fa9\u304c\u3060\u3081\u306b\u9055\u3044\u306a\u3044\u3002\n\n# dotimes-unroll2\n\ndotimes-unroll \u306f incf \u3092\u3044\u304f\u3064\u304b\u30b3\u30d4\u30fc\u3057\u3066\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u305f\u3002\u305d\u308c\u306f\u306a\u3093\u3068\u306a\u304f\u5acc\u306a\u611f\u3058\u304c\u3059\u308b\u3002\n\n\u305d\u3053\u3067symbol-macrolet \u3092\u7528\u3044\u3066\u672c\u5f53\u306b\u5b9a\u6570\u4f1d\u64ad\u3055\u305b\u305funroll\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\u7d50\u69cb\u9aa8\u304c\u6298\u308c\u305f\u3002\n\u307e\u305a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5909\u3048\u3066\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u5168\u3066\u306e\u5909\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3002\n\u3053\u308c\u3089\u306e\u5909\u6570\u306f\u5168\u3066symbol-macrolet\u3067\u96a0\u853d\u3055\u308c\u3001gensym\u3055\u308c\u305f\u5b9f\u969b\u306e\u5909\u6570\u540d\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n\n```cl\n(ql:quickload :alexandria)\n(use-package :alexandria)\n(ql:quickload :priority-queue)\n(use-package :priority-queue)\n(ql:quickload :iterate)\n(use-package :iterate)\n(ql:quickload :trivia)\n(use-package :trivia)\n\n(defmacro dotimes-unroll2 ((var n unroll) parameters &body body)\n  (check-type var symbol)                   ; \\___ new!\n  (assert (and (constantp unroll) (numberp unroll)))\n  (with-gensyms (limit1 i) ; i is the true counter\n    (let (varlist bindings)\n      (dolist (p parameters)\n        (ematch (ensure-list p)\n          ((list x) ; x : user interface, replaced with y by symbol-macrolet\n           (with-gensyms (y)\n             (push (list x y) bindings) ; y is the true counter\n             (push (list y 0 `(+ ,y ,unroll)) varlist)))\n          ((list x start)\n           (with-gensyms (y)\n             (push (list x y) bindings)\n             (push (list y start `(+ ,y ,unroll)) varlist)))))\n      (push (list var i) bindings)\n      (push (list i 0 `(+ ,i ,unroll)) varlist)\n      (once-only (n)\n        `(locally (declare (fixnum ,n))\n           (let ((,limit1 (the fixnum (- ,n ,unroll))))\n             (declare (fixnum ,limit1))\n             (do (,@varlist)\n                 ((< ,limit1 ,i)\n                  (do (,@(mapcar (lambda-match\n                                   ((list y _ _) `(,y ,y (the fixnum (1+ ,y)))))\n                                 varlist))\n                      ((<= ,n ,i))\n                    (symbol-macrolet (,@bindings)\n                      ,@body)))\n               (declare (fixnum ,@(mapcar #'first varlist)))\n               ,@(iter (for j below unroll)\n                       (collect\n                           `(symbol-macrolet (,@(mapcar (lambda-match\n                                                          ((list x y) `(,x (the fixnum (+ ,y ,j)))))\n                                                  bindings))\n                              ,@body))))))))))\n\n```\n\n\u6027\u80fd\u8a08\u6e2c: \u3060\u3081\u3060\u3063\u305f\u3002\u5909\u308f\u3089\u306a\u3044\u3002\u306a\u3093\u3067\u3060\u308d\u3046? \u3068\u66f8\u304f\u3068\u3060\u308c\u304b\u304c\u3084\u3063\u3066\u304f\u308c\u308b\u306f\u305a\u3002\n\n```cl\n(defun rm-gemm+static-size+unroll-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k)))\n          (dotimes-unroll2 (col cols 2) ((mb-index (array-row-major-index mb k 0))\n                                         (mc-index (array-row-major-index mc row 0)))\n            (incf (row-major-aref mc mc-index)\n                  (* cell (row-major-aref mb mb-index)))))))\n    mc))\n\n(benchmark (10)\n  ;; Evaluation took:\n  ;;   2.753 seconds of real time\n  ;;   2.752000 seconds of total run time (2.752000 user, 0.000000 system)\n  ;;   99.96% CPU\n  ;;   8,259,540,639 processor cycles\n  ;;   33,248 bytes consed\n  (rm-gemm+static-size+unroll-k *ma* *mb* *mc*))\n```\n\ndisassemble:\n\n```\n; disassembly for RM-GEMM+STATIC-SIZE+UNROLL-K\n; Size: 287 bytes. Origin: #x101075E738\n; 738:       4D31C9           XOR R9, R9                      ; no-arg-parsing entry point\n; 73B:       E901010000       JMP L7\n; 740: L0:   31F6             XOR ESI, ESI\n; 742:       E9E9000000       JMP L6\n; 747:       660F1F840000000000 NOP\n; 750: L1:   4969C9F4010000   IMUL RCX, R9, 500\n; 757:       4801F1           ADD RCX, RSI\n; 75A:       498B5611         MOV RDX, [R14+17]\n; 75E:       F30F104C4A01     MOVSS XMM1, [RDX+RCX*2+1]\n; 764:       4969C9F4010000   IMUL RCX, R9, 500\n; 76B:       4869DEF4010000   IMUL RBX, RSI, 500\n; 772:       31FF             XOR EDI, EDI\n; 774:       EB6D             JMP L3\n; 776:       660F1F840000000000 NOP\n; 77F:       90               NOP\n; 780: L2:   498B5011         MOV RDX, [R8+17]\n; 784:       F30F10545A01     MOVSS XMM2, [RDX+RBX*2+1]\n; 78A:       F30F59D1         MULSS XMM2, XMM1\n; 78E:       488B5011         MOV RDX, [RAX+17]\n; 792:       F30F105C4A01     MOVSS XMM3, [RDX+RCX*2+1]\n; 798:       F30F58DA         ADDSS XMM3, XMM2\n; 79C:       488B5011         MOV RDX, [RAX+17]\n; 7A0:       F30F115C4A01     MOVSS [RDX+RCX*2+1], XMM3\n; 7A6:       488D5102         LEA RDX, [RCX+2]\n; 7AA:       4C8D5302         LEA R10, [RBX+2]\n; 7AE:       4D8B6811         MOV R13, [R8+17]\n; 7B2:       F3430F10545501   MOVSS XMM2, [R13+R10*2+1]\n; 7B9:       F30F59D1         MULSS XMM2, XMM1\n; 7BD:       4C8B5011         MOV R10, [RAX+17]\n; 7C1:       F3410F105C5201   MOVSS XMM3, [R10+RDX*2+1]\n; 7C8:       F30F58DA         ADDSS XMM3, XMM2\n; 7CC:       4C8B5011         MOV R10, [RAX+17]\n; 7D0:       F3410F115C5201   MOVSS [R10+RDX*2+1], XMM3\n; 7D7:       4883C704         ADD RDI, 4\n; 7DB:       4883C104         ADD RCX, 4\n; 7DF:       4883C304         ADD RBX, 4\n; 7E3: L3:   4881FFE4030000   CMP RDI, 996\n; 7EA:       7E94             JLE L2\n; 7EC:       EB35             JMP L5\n; 7EE:       6690             NOP\n; 7F0: L4:   498B5011         MOV RDX, [R8+17]\n; 7F4:       F30F10545A01     MOVSS XMM2, [RDX+RBX*2+1]\n; 7FA:       F30F59D1         MULSS XMM2, XMM1\n; 7FE:       488B5011         MOV RDX, [RAX+17]\n; 802:       F30F105C4A01     MOVSS XMM3, [RDX+RCX*2+1]\n; 808:       F30F58DA         ADDSS XMM3, XMM2\n; 80C:       488B5011         MOV RDX, [RAX+17]\n; 810:       F30F115C4A01     MOVSS [RDX+RCX*2+1], XMM3\n; 816:       4883C102         ADD RCX, 2\n; 81A:       4883C302         ADD RBX, 2\n; 81E:       BFE8030000       MOV EDI, 1000\n; 823: L5:   4881FFE8030000   CMP RDI, 1000\n; 82A:       7CC4             JL L4\n; 82C:       4883C602         ADD RSI, 2\n; 830: L6:   4881FEE8030000   CMP RSI, 1000\n; 837:       0F8C13FFFFFF     JL L1\n; 83D:       4983C102         ADD R9, 2\n; 841: L7:   4981F9E8030000   CMP R9, 1000\n; 848:       0F8CF2FEFFFF     JL L0\n; 84E:       488BD0           MOV RDX, RAX\n; 851:       488BE5           MOV RSP, RBP\n; 854:       F8               CLC\n; 855:       5D               POP RBP\n; 856:       C3               RET\n```\n\nmacroexpansion:\n\n```cl\n(dotimes-unroll2 (col cols 2) ((mb-index (array-row-major-index mb k 0))\n                               (mc-index (array-row-major-index mc row 0)))\n   (incf (row-major-aref mc mc-index)\n         (* cell (row-major-aref mb mb-index))))\n\n(LET ((#:N849 COLS))\n  (LOCALLY\n   (DECLARE (FIXNUM #:N849))\n   (LET ((#:LIMIT1845 (THE FIXNUM (- #:N849 2))))\n     (DECLARE (FIXNUM #:LIMIT1845))\n     (DO ((#:I846 0 (+ #:I846 2))\n          (#:Y848 (ARRAY-ROW-MAJOR-INDEX MC ROW 0) (THE FIXNUM (+ #:Y848 2)))\n          (#:Y847 (ARRAY-ROW-MAJOR-INDEX MB K 0) (THE FIXNUM (+ #:Y847 2))))\n         ((< #:LIMIT1845 #:I846)\n          (DO ((#:I846 #:I846 (THE FIXNUM (1+ #:I846)))\n               (#:Y848 #:Y848 (THE FIXNUM (1+ #:Y848)))\n               (#:Y847 #:Y847 (THE FIXNUM (1+ #:Y847))))\n              ((<= #:N849 #:I846))\n            (DECLARE (FIXNUM #:I846 #:Y848 #:Y847))\n            (SYMBOL-MACROLET ((COL #:I846) (MC-INDEX #:Y848) (MB-INDEX #:Y847))\n              (INCF (ROW-MAJOR-AREF MC MC-INDEX)\n                    (* CELL (ROW-MAJOR-AREF MB MB-INDEX))))))\n       (DECLARE (FIXNUM #:I846 #:Y848 #:Y847))\n       (SYMBOL-MACROLET ((COL (THE FIXNUM (+ #:I846 0)))\n                         (MC-INDEX (THE FIXNUM (+ #:Y848 0)))\n                         (MB-INDEX (THE FIXNUM (+ #:Y847 0))))\n         (INCF (ROW-MAJOR-AREF MC MC-INDEX)\n               (* CELL (ROW-MAJOR-AREF MB MB-INDEX))))\n       (SYMBOL-MACROLET ((COL (THE FIXNUM (+ #:I846 1)))\n                         (MC-INDEX (THE FIXNUM (+ #:Y848 1)))\n                         (MB-INDEX (THE FIXNUM (+ #:Y847 1))))\n         (INCF (ROW-MAJOR-AREF MC MC-INDEX)\n               (* CELL (ROW-MAJOR-AREF MB MB-INDEX))))))))\n\n; equivalent to\n\n(LET ((#:N849 COLS))\n  (LOCALLY\n   (DECLARE (FIXNUM #:N849))\n   (LET ((#:LIMIT1845 (THE FIXNUM (- #:N849 2))))\n     (DECLARE (FIXNUM #:LIMIT1845))\n     (DO ((#:I846 0 (+ #:I846 2))\n          (#:Y848 (ARRAY-ROW-MAJOR-INDEX MC ROW 0) (THE FIXNUM (+ #:Y848 2)))\n          (#:Y847 (ARRAY-ROW-MAJOR-INDEX MB K 0) (THE FIXNUM (+ #:Y847 2))))\n         ((< #:LIMIT1845 #:I846)\n          (DO ((#:I846 #:I846 (THE FIXNUM (1+ #:I846)))\n               (#:Y848 #:Y848 (THE FIXNUM (1+ #:Y848)))\n               (#:Y847 #:Y847 (THE FIXNUM (1+ #:Y847))))\n              ((<= #:N849 #:I846))\n            (DECLARE (FIXNUM #:I846 #:Y848 #:Y847))\n            (INCF (ROW-MAJOR-AREF MC #:Y848)\n                  (* CELL (ROW-MAJOR-AREF MB #:Y847)))))\n       (DECLARE (FIXNUM #:I846 #:Y848 #:Y847))\n       (INCF (ROW-MAJOR-AREF MC (THE FIXNUM (+ #:Y848 0)))\n             (* CELL (ROW-MAJOR-AREF MB (THE FIXNUM (+ #:Y847 0)))))\n       (INCF (ROW-MAJOR-AREF MC (THE FIXNUM (+ #:Y848 1)))\n             (* CELL (ROW-MAJOR-AREF MB (THE FIXNUM (+ #:Y847 1)))))))))\n\n```\n\n\u30e1\u30e2: VOP \u3092\u4f7f\u304a\u3046\u3068\u3044\u3046\u4e8b\u306b\u306a\u3063\u305f\u304c\u3001 data-vector-set-with-offset \u304c VOP \u306b\u5909\u63db\u3055\u308c\u306a\u304f\u3066full-call \u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u304b\u3064 always-transferrable \u306a\u306e\u3067 \u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u3069\u3046\u3059\u308b\u304b\u3002\n", "tags": ["lisp", "\u884c\u5217", "\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0"]}