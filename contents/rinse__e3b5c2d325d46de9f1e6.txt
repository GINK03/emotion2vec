{"context": " More than 1 year has passed since last update.\u307f\u306a\u3055\u3093\u3053\u3093\u3070\u3093\u306f\u3002\n\u4eca\u56de\u306fSFINAE\u3092\u4f7f\u3063\u305f\u30e1\u30bf\u95a2\u6570\u4f5c\u6210\u306e\u3072\u306a\u5f62\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u3001\u7279\u5b9a\u306e\u578b\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u3068\n\u7279\u5b9a\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n// has_type\u306f\u5f15\u6570\u306btype\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u8abf\u3079\u308b\nhas_type < std::true_type >  // std::true_type\u3092\u7d99\u627f  ;typename std::true_type::type\nhas_type < int >             // std::false_type\u3092\u7d99\u627f ;int::type\u306f\u306a\u3044\n\n// has_value\u306f\u5f15\u6570\u306bvalue\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u8abf\u3079\u308b\nhas_value < std::true_type > > // std::true_type\u3092\u7d99\u627f  ;std::true_type::value\nhas_value < int > > \u3000\u3000\u3000\u3000\u3000\u3000// std::false_type\u3092\u7d99\u627f ;int::value\u306f\u306a\u3044\n\n\u304a\u305d\u3089\u304f\u3053\u308c\u3089\u3092\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u306fSFINAE\u3092\u4f7f\u308f\u306a\u3044\u3068\u4f5c\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\uff08\u305f\u3076\u3093\uff09\u3002\n\u3055\u3066\u3001\u65e9\u901f\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u2026\u2026\u3068\u8a00\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u4e0b\u6e96\u5099\u3002\nstd::true_type\u3084std::false_type\u304c\u578b\u304b\u3089\u5024\u3092\u751f\u6210\u3059\u308b\u3082\u306e\u3060\u3068\u3057\u305f\u3089\u3001\u305d\u306e\u9006\u3067\u3059\u3002\n\u5024\u304b\u3089\u578b\u3092\u751f\u6210\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002\ntemplate < bool b >\nstruct meta_bool : std::true_type\n{ // std::true_type\n};\ntemplate <>\nstruct meta_bool < false >\n  : std::false_type\n{ // std::false_type\n};\n\n\u304a\u5f85\u305f\u305b\u3057\u307e\u3057\u305f\u3002\n\u307e\u305a\u306fhas_type\u304b\u3089\u3067\u3059\u3002\ntemplate < class Ty >\nstruct _has_type\n{\nprivate:\n  template < class U >\n  static auto confirm( U )\n    -> decltype( std::declval < typename U::type >(), std::true_type() );\n  static auto confirm( ... ) -> std::false_type;\npublic:\n  enum : bool { value = decltype( confirm( std::declval< Ty >() ) )::value };\n};\ntemplate < class Ty >\nusing has_type = meta_bool < _has_type < Ty >::value >;\n\n_has_type\u304c\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nSFINAE\u306f\u95a2\u6570\u3067\u3057\u304b\u50cd\u304b\u306a\u3044\u306e\u3067\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u5b9f\u969b\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u5b9a\u7fa9\u306f\u3042\u308a\u307e\u305b\u3093\u3002\ntemplate < class U >\nstatic auto confirm( U )\n  -> decltype( std::declval < typename U::type >(), std::true_type() );\n\n\u3053\u3053\u304c\u30ad\u30e2\u3067\u3059\u306d\u3002\n\u623b\u308a\u5024\u3067SFINAE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\ndecltype( std::declval < typename U::type >(), std::true_type() );\n\u5de6\u8fba\u3092\u7121\u8996\u3059\u308b\u30ab\u30f3\u30de\u6f14\u7b97\u5b50(,)\u306e\u4ed5\u69d8\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\ndecltype\u306e\u4e2d\u8eab\u306f\u5024\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001std::declval < typename U::type >()\u3068\u3057\u3066\u3044\u307e\u3059\u3002\nU::type&&\u578b\u306e\u4eee\u306e\u5024\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u6027\u8cea\u3092\u5229\u7528\u3057\u3066\u3001\u6700\u7d42\u7684\u306b\u306f\u7d76\u5bfe\u306bstd::true_type\u304c\u623b\u308a\u5024\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nU::type\u304c\u7121\u52b9\u306a\u3089\uff08U\u304ctype\u3092\u6301\u3063\u3066\u3044\u306a\u3051\u308c\u3070\uff09substitution fault\u304c\u767a\u751f\u3057\u3066\u6b21\u306econfirm\u3092\u898b\u306b\u884c\u304d\u307e\u3059\u3002\nstatic auto confirm( ... ) -> std::false_type;\u306f\u3069\u3093\u306a\u5024\u3082\u53d7\u3051\u53d6\u308c\u3066\u3001\u623b\u308a\u5024\u306fstd::false_type\u3067\u3059\u3002\n\u3059\u306a\u308f\u3061\u3001enum : bool { value = decltype( confirm( std::declval< Ty >() ) )::value };\u306f\nconfirm\u306bTy\u578b\u306e\u5024\u3092\u5165\u308c\u305f\u6642\u306e\u623b\u308a\u5024\u306e\u578b(std::true_type\u304bstd::false_type)\u3092\u5f97\u3066\u3001\u305d\u306evalue(true\u304bfalse)\u3092value\u306b\u5165\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3075\u3046\u3002\nmeta_bool\u306ftrue\u304bfalse\u3092\u5165\u308c\u308b\u3068std::true_type\u304bstd::false_type\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3067has_type\u306f\u5b8c\u6210\u3067\u3059\u3002\ntemplate < class Ty >\nusing has_type = meta_bool < _has_type < Ty >::value >;\n\n\u6b21\u306fvalue\u3067\u3059\u3002\n\u3053\u308c\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8abf\u3079\u308b\u306e\u3067\u3001\u5c11\u3057\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u306d\u3002\n\u3068\u306f\u8a00\u3048\u3001\u307b\u3068\u3093\u3069\u5909\u308f\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3080\u3057\u308d\u3055\u3063\u304d\u3088\u308a\u7c21\u5358\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ntemplate < class Ty >\nstruct _has_value\n{\nprivate:\n  template < class U >\n  static auto confirm( U u ) ->\n    decltype( u.value, std::true_type() );\n  static auto confirm( ... ) -> std::false_type;\npublic:\n  enum : bool { value = decltype( confirm( std::declval< Ty >() ) )::value };\\\n};\ntemplate < class Ty >\nusing has_value = rinse::meta_bool< _has_value< Ty >::value >;\n\n\u4ee5\u4e0a\u3067\u3059\u3002\n\u4f3c\u305f\u5f62\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\u5b9f\u7528\u3067\u306f\u3001\u3053\u308c\u3089\u3092std::enable_if\u306b\u4f7f\u3063\u3066\u3001\u3055\u3089\u306bSFINAE\u3092\u5229\u7528\u3059\u308b\u3068\u3044\u3046\u5f62\u306b\u306a\u308a\u307e\u3059\u304b\u306d\u3002\n\u30de\u30af\u30ed\u306a\u3093\u304b\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u3084\u578b\u3092\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u3092\u81ea\u52d5\u751f\u6210\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u697d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u5b9f\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u3082\u306e\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u5f15\u6570\u306e\u8abf\u3079\u65b9\u304c\u30d1\u30c3\u3068\u601d\u3044\u6d6e\u304b\u3070\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u3046\u3059\u308a\u3083\u3044\u3044\u3093\u3058\u3083\u306d\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u4f5c\u308a\u307e\u3057\u305f\u3002\u3088\u308d\u3057\u3051\u308c\u3070\u5408\u308f\u305b\u3066\u8aad\u3093\u3067\u3044\u305f\u3060\u3051\u308b\u3068\u559c\u3073\u307e\u3059\u3002=> \u7279\u5b9a\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5b58\u5728\u3092\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\n\u307f\u306a\u3055\u3093\u3053\u3093\u3070\u3093\u306f\u3002\n\n\u4eca\u56de\u306fSFINAE\u3092\u4f7f\u3063\u305f\u30e1\u30bf\u95a2\u6570\u4f5c\u6210\u306e\u3072\u306a\u5f62\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u3001\u7279\u5b9a\u306e\u578b\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u3068\n\u7279\u5b9a\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n```\n// has_type\u306f\u5f15\u6570\u306btype\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u8abf\u3079\u308b\nhas_type < std::true_type >  // std::true_type\u3092\u7d99\u627f  ;typename std::true_type::type\nhas_type < int >             // std::false_type\u3092\u7d99\u627f ;int::type\u306f\u306a\u3044\n\n// has_value\u306f\u5f15\u6570\u306bvalue\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u8abf\u3079\u308b\nhas_value < std::true_type > > // std::true_type\u3092\u7d99\u627f  ;std::true_type::value\nhas_value < int > > \u3000\u3000\u3000\u3000\u3000\u3000// std::false_type\u3092\u7d99\u627f ;int::value\u306f\u306a\u3044\n```\n\n\u304a\u305d\u3089\u304f\u3053\u308c\u3089\u3092\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u306fSFINAE\u3092\u4f7f\u308f\u306a\u3044\u3068\u4f5c\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\uff08\u305f\u3076\u3093\uff09\u3002\n\u3055\u3066\u3001\u65e9\u901f\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u2026\u2026\u3068\u8a00\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u4e0b\u6e96\u5099\u3002\nstd::true_type\u3084std::false_type\u304c\u578b\u304b\u3089\u5024\u3092\u751f\u6210\u3059\u308b\u3082\u306e\u3060\u3068\u3057\u305f\u3089\u3001\u305d\u306e\u9006\u3067\u3059\u3002\n\u5024\u304b\u3089\u578b\u3092\u751f\u6210\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002\n\n```\ntemplate < bool b >\nstruct meta_bool : std::true_type\n{ // std::true_type\n};\ntemplate <>\nstruct meta_bool < false >\n  : std::false_type\n{ // std::false_type\n};\n```\n\n\u304a\u5f85\u305f\u305b\u3057\u307e\u3057\u305f\u3002\n\u307e\u305a\u306fhas_type\u304b\u3089\u3067\u3059\u3002\n\n```\ntemplate < class Ty >\nstruct _has_type\n{\nprivate:\n  template < class U >\n  static auto confirm( U )\n    -> decltype( std::declval < typename U::type >(), std::true_type() );\n  static auto confirm( ... ) -> std::false_type;\npublic:\n  enum : bool { value = decltype( confirm( std::declval< Ty >() ) )::value };\n};\ntemplate < class Ty >\nusing has_type = meta_bool < _has_type < Ty >::value >;\n```\n\n_has_type\u304c\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nSFINAE\u306f\u95a2\u6570\u3067\u3057\u304b\u50cd\u304b\u306a\u3044\u306e\u3067\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u5b9f\u969b\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u5b9a\u7fa9\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```\ntemplate < class U >\nstatic auto confirm( U )\n  -> decltype( std::declval < typename U::type >(), std::true_type() );\n```\n\n\u3053\u3053\u304c\u30ad\u30e2\u3067\u3059\u306d\u3002\n\u623b\u308a\u5024\u3067SFINAE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n`decltype( std::declval < typename U::type >(), std::true_type() );`\n\u5de6\u8fba\u3092\u7121\u8996\u3059\u308b\u30ab\u30f3\u30de\u6f14\u7b97\u5b50(`,`)\u306e\u4ed5\u69d8\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\ndecltype\u306e\u4e2d\u8eab\u306f\u5024\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001`std::declval < typename U::type >()`\u3068\u3057\u3066\u3044\u307e\u3059\u3002\nU::type&&\u578b\u306e\u4eee\u306e\u5024\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u6027\u8cea\u3092\u5229\u7528\u3057\u3066\u3001\u6700\u7d42\u7684\u306b\u306f\u7d76\u5bfe\u306bstd::true_type\u304c\u623b\u308a\u5024\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nU::type\u304c\u7121\u52b9\u306a\u3089\uff08U\u304ctype\u3092\u6301\u3063\u3066\u3044\u306a\u3051\u308c\u3070\uff09substitution fault\u304c\u767a\u751f\u3057\u3066\u6b21\u306econfirm\u3092\u898b\u306b\u884c\u304d\u307e\u3059\u3002\n`static auto confirm( ... ) -> std::false_type;`\u306f\u3069\u3093\u306a\u5024\u3082\u53d7\u3051\u53d6\u308c\u3066\u3001\u623b\u308a\u5024\u306fstd::false_type\u3067\u3059\u3002\n\u3059\u306a\u308f\u3061\u3001`enum : bool { value = decltype( confirm( std::declval< Ty >() ) )::value };`\u306f\nconfirm\u306bTy\u578b\u306e\u5024\u3092\u5165\u308c\u305f\u6642\u306e\u623b\u308a\u5024\u306e\u578b(std::true_type\u304bstd::false_type)\u3092\u5f97\u3066\u3001\u305d\u306evalue(true\u304bfalse)\u3092value\u306b\u5165\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3075\u3046\u3002\nmeta_bool\u306ftrue\u304bfalse\u3092\u5165\u308c\u308b\u3068std::true_type\u304bstd::false_type\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3067has_type\u306f\u5b8c\u6210\u3067\u3059\u3002\n\n```\ntemplate < class Ty >\nusing has_type = meta_bool < _has_type < Ty >::value >;\n```\n\n\u6b21\u306fvalue\u3067\u3059\u3002\n\u3053\u308c\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8abf\u3079\u308b\u306e\u3067\u3001\u5c11\u3057\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u306d\u3002\n\u3068\u306f\u8a00\u3048\u3001\u307b\u3068\u3093\u3069\u5909\u308f\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3080\u3057\u308d\u3055\u3063\u304d\u3088\u308a\u7c21\u5358\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\ntemplate < class Ty >\nstruct _has_value\n{\nprivate:\n  template < class U >\n  static auto confirm( U u ) ->\n    decltype( u.value, std::true_type() );\n  static auto confirm( ... ) -> std::false_type;\npublic:\n  enum : bool { value = decltype( confirm( std::declval< Ty >() ) )::value };\\\n};\ntemplate < class Ty >\nusing has_value = rinse::meta_bool< _has_value< Ty >::value >;\n```\n\n\u4ee5\u4e0a\u3067\u3059\u3002\n\u4f3c\u305f\u5f62\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\u5b9f\u7528\u3067\u306f\u3001\u3053\u308c\u3089\u3092std::enable_if\u306b\u4f7f\u3063\u3066\u3001\u3055\u3089\u306bSFINAE\u3092\u5229\u7528\u3059\u308b\u3068\u3044\u3046\u5f62\u306b\u306a\u308a\u307e\u3059\u304b\u306d\u3002\n\u30de\u30af\u30ed\u306a\u3093\u304b\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u3084\u578b\u3092\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u3092\u81ea\u52d5\u751f\u6210\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u697d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n~~\u5b9f\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u3082\u306e\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u5f15\u6570\u306e\u8abf\u3079\u65b9\u304c\u30d1\u30c3\u3068\u601d\u3044\u6d6e\u304b\u3070\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u3046\u3059\u308a\u3083\u3044\u3044\u3093\u3058\u3083\u306d\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002~~\n\u4f5c\u308a\u307e\u3057\u305f\u3002\u3088\u308d\u3057\u3051\u308c\u3070\u5408\u308f\u305b\u3066\u8aad\u3093\u3067\u3044\u305f\u3060\u3051\u308b\u3068\u559c\u3073\u307e\u3059\u3002=> [\u7279\u5b9a\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5b58\u5728\u3092\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570](http://qiita.com/rinse_/items/a43ca5b9ea6df10ee40e)\n", "tags": ["C++11", "C++"]}