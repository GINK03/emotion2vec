{"context": " More than 1 year has passed since last update.\n\n\u4f7f\u7528\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\nScala 2.11.1\nPlay 2.2.1\nSecureSocial 2.1.4\n\nPlay\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3002\n\nshell\n$ play new play221ss214SNSLogin\n\n       _\n _ __ | | __ _ _  _\n| '_ \\| |/ _' | || |\n|  __/|_|\\____|\\__ /\n|_|            |__/\n\nplay 2.2.1 built with Scala 2.10.2 (running Java 1.7.0_67), http://www.playframework.com\n\nThe new application will be created in /Users/suzukijun/Documents/Homepage/Chatamp/play221ss214SNSLogin\n\nWhat is the application name? [play221ss214SNSLogin]\n> \n\nWhich template do you want to use for this new application? \n\n  1             - Create a simple Scala application\n  2             - Create a simple Java application\n\n> 1\nOK, application play221ss214SNSLogin is created.\n\nHave fun!\n\n$ cd play221ss214SNSLogin/\n\n\n\n\u5404\u7a2e\u8a2d\u5b9a\n\nplugins.sbt\u306e\u4fee\u6b63\nwar\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3067\u304d\u308b\u3088\u3046\u306bplay2war\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nproject/plugins.sbt\n// Comment to get more information during initialization\nlogLevel := Level.Warn\n\n// The Typesafe repository\nresolvers += \"Typesafe repository\" at \"http://repo.typesafe.com/typesafe/releases/\"\n\n// Use the Play sbt plugin for Play projects\naddSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.2.1\")\n\n// Use the Play sbt plugin for Play projects\naddSbtPlugin(\"com.github.play2war\" % \"play2-war-plugin\" % \"1.2\")\n\n\n\nbuild.sbt\u306e\u4fee\u6b63\nmysql\u3068SecureSocial\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u8ffd\u52a0\u3002\n\nbuild.sbt\nimport com.github.play2war.plugin._\n\n\nname := \"play221ss214SNSLogin\"\n\nversion := \"1.0-SNAPSHOT\"\n\nscalaVersion := \"2.11.1\"\n\nlibraryDependencies ++= Seq(\n  jdbc,\n  anorm,\n  cache,\n  \"mysql\" % \"mysql-connector-java\" % \"5.1.18\",\n  \"ws.securesocial\" %% \"securesocial\" % \"2.1.4\"\n)     \n\nplay.Project.playScalaSettings\n\nPlay2WarPlugin.play2WarSettings\n\nPlay2WarKeys.servletVersion := \"3.0\"\n\n\n\n\nplay.plugins\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0\n\nconf/play.plugins\n9994:securesocial.core.DefaultAuthenticatorStore\n9995:securesocial.core.DefaultIdGenerator\n9996:securesocial.core.providers.utils.DefaultPasswordValidator\n9997:securesocial.controllers.DefaultTemplatesPlugin\n9998:service.MyUserService\n9999:securesocial.core.providers.utils.BCryptPasswordHasher\n10000:securesocial.core.providers.TwitterProvider\n#10004:securesocial.core.providers.UsernamePasswordProvider\n\n\n\nroutes\u30d5\u30a1\u30a4\u30eb\u306e\u4fee\u6b63\n# Home page\nGET     /                           controllers.Application.index\n\n# Map static resources from the /public folder to the /assets URL path\nGET     /assets/*file               controllers.Assets.at(path=\"/public\", file)\n\n\n# Login page\nGET     /login                      securesocial.controllers.LoginPage.login\nGET     /logout                     securesocial.controllers.LoginPage.logout\n\n# User Registration and password handling \nGET     /signup                     securesocial.controllers.Registration.startSignUp\nPOST    /signup                     securesocial.controllers.Registration.handleStartSignUp\nGET     /signup/:token              securesocial.controllers.Registration.signUp(token)\nPOST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)\nGET     /reset                      securesocial.controllers.Registration.startResetPassword\nPOST    /reset                      securesocial.controllers.Registration.handleStartResetPassword\nGET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)\nPOST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)\nGET     /password                   securesocial.controllers.PasswordChange.page\nPOST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange\n\n# Providers entry points\nGET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)\nPOST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)\nGET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized\n\n\napplication.conf\u30d5\u30a1\u30a4\u30eb\u306e\u4fee\u6b63\n\uff11\u884c\u76ee\u306b\u4ee5\u4e0b\u306e\u884c\u3092\u8ffd\u52a0\n\nconf/application.conf\ninclude \"securesocial.conf\"\n\n\nMySQL\u306e\u8a2d\u5b9a\n\nebdb\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d\u3092\u3044\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u2028\n\nconf/application.conf\ndb.ebdb.driver=\"com.mysql.jdbc.Driver\"\ndb.ebdb.url=\"jdbc:mysql://localhost/ebdb\"\ndb.ebdb.user=\"[\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30e6\u30fc\u30b6\u30fc\u540d]\"\ndb.ebdb.pass=\"[\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30d1\u30b9\u30ef\u30fc\u30c9]\"\n#\u5b9f\u884c\u3055\u308c\u305fSQL\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\ndb.ebdb.logStatements=true\n\n\n\nsecuresocial.conf\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\nConsumer Key\u3068Consumer Secret\u306fTwitter\u306b\u30a2\u30d7\u30ea\u3092\u767b\u9332\u3057\u3066\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nconf/securesocial.conf\nsecuresocial {\n    onLoginGoTo=/\n    onLogoutGoTo=/login\n    ssl=false   \n\n    twitter {\n        requestTokenUrl=\"https://api.twitter.com/oauth/request_token\"\n        accessTokenUrl=\"https://api.twitter.com/oauth/access_token\"\n        authorizationUrl=\"https://api.twitter.com/oauth/authorize\"\n        consumerKey=\"[Your Twitter Consumer Key]\"\n        consumerSecret=\"[Your Twitter Consumer Secret]\"\n    }\n}\n\n\n\n\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\uff1a1.sql\nebdb\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306f\u3054\u81ea\u5206\u306e\u74b0\u5883\u306b\u3042\u308f\u305b\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3002\n\nconf/evolutions/ \u306e\u5f8c\u306b\u7d9a\u304f\u90e8\u5206\u306fdatabase\u540d\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nconf/evolutions/ebdb/1.sql\n# Ups\u4ee5\u4e0b\u306f\u30de\u30a4\u30b0\u30ec\u30fc\u30c8\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bSQL\n# --- !Ups                                                                                                                                                                          \n\n    CREATE TABLE user\n    (\n        id INT(12) UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,\n        name VARCHAR(200) NOT NULL UNIQUE,\n        first_name VARCHAR(200),\n        last_name VARCHAR(200),\n        full_name VARCHAR(200),\n        password VARCHAR(200),\n        avator_url VARCHAR(200),\n        email VARCHAR(200),\n        provider enum ('twitter', 'facebook', 'google', 'github', 'userpass', 'linkedin', 'foursquare', 'dropbox', 'xing', 'instagram', 'vk', 'weibo') NOT NULL,\n        auth_method VARCHAR(50),\n        oauth1token VARCHAR(200),\n        oauth1secret VARCHAR(200),\n        oauth2access_token VARCHAR(200),\n        oAuth2TokenType VARCHAR(200),\n        oAtuh2ExpiresIn INT,\n        oAuth2RefreshToken VARCHAR(200),\n        sex enum ('male', 'female', 'other') default 'other',\n        description TEXT,\n\n        created DATETIME NOT NULL,\n        modified DATETIME NOT NULL,\n\n        PRIMARY KEY (id)\n    ) CHARSET utf8 COMMENT = 'User Accounts';\n\n    /* Create Indexes */\n    CREATE UNIQUE INDEX USER_IDX ON user (name ASC);\n    CREATE INDEX ACCOUNT_IDX ON user (id ASC);\n\n\n# Downs\u4ee5\u4e0b\u306f\u30de\u30a4\u30b0\u30ec\u30fc\u30c8\u5dee\u3057\u623b\u3057\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bSQL\n# --- !Downs\n\n    DROP INDEX USER_IDX ON user;\n    DROP INDEX ACCOUNT_IDX ON user;\n\n    DROP TABLE user;\n\n\n\nController\u306e\u4fee\u6b63\n\nApplication.scala\u306e\u4fee\u6b63\n\napp/controllers/Application.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\nimport securesocial.core._\n\nobject Application extends securesocial.core.SecureSocial {\n\n  def index = SecuredAction { implicit request =>\n    // \u3053\u3053\u306b\u304f\u308b\u6642\u70b9\u3067fullName\u3084\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306f\u53d6\u5f97\u6e08\u307f                                                                           \n    val name = request.user.fullName\n    val provider = request.user.identityId.providerId\n\n    // \u305f\u3081\u3057\u306b\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3068\u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u53d6\u5f97\u3057\u3066\u307f\u308b\u3002                                                     \n    var token = \"\"\n    val oAuth1Info:Option[OAuth1Info] = request.user.oAuth1Info\n    oAuth1Info match {\n      case Some(info) => {\n        token = info.token\n        val secret = info.secret\n      }\n      case None => ()\n    }\n\n    Ok(views.html.index(name, provider, request.user.avatarUrl, token))\n  }\n\n  def page = UserAwareAction { implicit request =>\n    val userName = request.user match {\n      case Some(user) => user.fullName\n      case _ => \"guest\"\n    }\n    Ok(\"Hello %s\".format(userName))\n  }\n\n}\n\n\n\nModel\u306e\u4f5c\u6210\n\nUser\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\napp/models/User.scala\npackage models\n\nimport java.io.Serializable\nimport securesocial.core._\nimport securesocial.core.providers._\nimport anorm._ \nimport anorm.SqlParser._\n\nimport play.api.db._\nimport play.api.Play.current// DB.withConnection\u3067\u5fc5\u8981\n\n\ncase class User(\n    id:Pk[Long],\n    name:String,\n    provider:String,\n    email:Option[String],\n    passwordInfo:Option[PasswordInfo],\n    first_name:Option[String],\n    last_name:Option[String],\n    full_name:Option[String],\n    avatarUrl:Option[String],\n    authMethod: securesocial.core.AuthenticationMethod,\n    oAuth1Info: Option[securesocial.core.OAuth1Info],\n    oAuth2Info: Option[securesocial.core.OAuth2Info]) extends Identity\n{\n\n  def isEmpty : Boolean = {\n      id != NotAssigned\n      }\n\n  def identityId: securesocial.core.IdentityId = {\n      IdentityId(name, provider)\n  }\n\n  def firstName:String = {\n      if(first_name == null) return \"\"\n\n      first_name match {\n        case Some(s) => s\n          case None => \"\"\n      }\n  }\n\n  def lastName:String = {\n      if(last_name == null) return \"\"\n\n      last_name match {\n        case Some(s) => s\n          case None => \"\"\n      }\n  }\n\n  def fullName: String = {\n      if(full_name == null){\n        \"\"\n      }else{\n        full_name match {\n                case Some(s) => s\n              case None => \"\"\n        }\n      }\n  }\n\n}\n\nobject User {\n\n   val parser: RowParser[User] = {\n    get[Pk[Long]](\"user.id\") ~\n    get[String](\"user.name\") ~\n    get[String](\"user.provider\") ~\n    get[Option[String]](\"user.email\") ~\n    get[Option[String]](\"user.password\") ~\n    get[Option[String]](\"user.first_name\") ~\n    get[Option[String]](\"user.last_name\") ~\n    get[Option[String]](\"user.full_name\") ~\n    get[Option[String]](\"user.avator_url\") ~\n    get[String](\"user.auth_method\") ~\n    get[String](\"user.oauth1token\") ~\n    get[String](\"user.oauth1secret\") ~\n    get[String](\"user.oauth2access_token\") ~\n    get[Option[String]](\"user.oAuth2TokenType\") ~\n    get[Option[Int]](\"user.oAtuh2ExpiresIn\") ~\n    get[Option[String]](\"user.oAuth2RefreshToken\") map {\n      case id ~ name ~ provider ~ email ~ password ~ first_name ~ last_name ~ full_name ~ \n           avatorUrl ~ auth_method ~ oauth1token ~ oauth1secret ~ oauth2access_token ~ tokenType ~ expiresIn ~ oAuth2RefreshToken => \n        val pass = password match {\n          case Some(s) => {\n            id match {\n              case NotAssigned => None\n              case Id(num) => Some(new PasswordInfo(num.toString(), s))\n            }\n          }\n          case None => None\n        }\n\n        val authMethod = auth_method match {\n          case \"OAuth1\" => AuthenticationMethod.OAuth1\n          case _        => AuthenticationMethod.OAuth2\n        }\n        val oAuth1Info = if(oauth1token == null || oauth1token.length == 0) None else Some(OAuth1Info(oauth1token, oauth1secret))\n        val oAuth2Info = if(oauth2access_token == null || oauth2access_token.length == 0)\n               None\n             else\n               Some(OAuth2Info(oauth2access_token, null, null, null))\n        User(id, name, provider, email, pass, first_name, last_name, full_name, avatorUrl, authMethod, oAuth1Info, oAuth2Info)\n    }\n   }\n\n\n  def findByName(name:String, provider:String) : Option[User] = {\n    println(\"User.findByName. name:%s, provider: %s\".format(name, provider))\n\n    provider match {\n      case \"userpass\" => {  // mail & password login\n    DB.withConnection(\"ebdb\"){ implicit connection =>\n        val user = SQL(\"select * from user where name = {name}\").on('name -> name).as(User.parser.singleOpt)\n        println(\"email.  user = \" + user)\n        user\n    }\n      }\n      case _ => {  // SNS login\n        println(\"SNS Login: findByName\")\n\n    DB.withConnection(\"ebdb\"){ implicit connection =>\n        val user = SQL(\"select * from user where name = {name}\").on('name -> name).as(User.parser.singleOpt)\n        println(\"SNS user = \" + user)\n        user\n    }\n      }\n    }\n\n  }\n\n  def findById(id: Long): Option[User] = {\n    println(\"User.findById\")\n\n    DB.withConnection(\"ebdb\") { implicit connection =>\n      SQL(\"select * from user where id = {id}\").on('id -> id).as(User.parser.singleOpt)\n    }\n  }\n\n  def findByEmailAndProvider(email: String, providerId: String): Option[User] = {\n    println(\"User.findByEmailAndName\")\n\n    DB.withConnection(\"ebdb\") { implicit connection =>\n      SQL(\"select * from user where email = {email} and provider = {providerId}\").on('email -> email, 'providerId -> providerId).as(User.parser.singleOpt)\n    }\n  }\n\n  def insert(i : Identity) : Option[User] = {\n    val provider = i.identityId.providerId\n    val name = i.identityId.userId\n    val authMethod = i.authMethod\n    val avatarUrl = i.avatarUrl\n    val firstName = i.firstName\n    val fullName = i.fullName\n    val lastName = i.lastName\n    val oAuth1Info = i.oAuth1Info\n    val oAuth2Info = i.oAuth2Info\n    val email = i.email\n    val passwordOpt = i.passwordInfo\n    val password = passwordOpt match {\n      case Some(pass) => Some(pass.password)\n      case None => None\n    }\n\n    oAuth1Info match {\n      case Some(info) => println(\"oAuth1 token\" + info.token + \", secret = \" + info.secret)\n      case None => println(\"no oAuth1\")\n    }\n    oAuth2Info match {\n      case Some(info) => println(\"oAuth2 accesstoken = \" + info.accessToken )\n      case None => println(\"no oAuth2\")\n    }\n\n    val (token, secret) = oAuth1Info match {\n      case Some(info) => (info.token, info.secret)\n      case None => (\"\", \"\")\n    }\n    val (accessToken, tokenType, expiresIn, refreshToken):(String, Option[String], Option[Int], Option[String]) = oAuth2Info match {\n          case Some(info) => (info.accessToken, info.refreshToken, info.expiresIn, info.tokenType)\n          case None => (\"\", None, None, None)\n    }\n\n    insert(name,\n           password,\n           provider,\n           email,\n           authMethod,\n           avatarUrl,\n           firstName,\n           lastName,\n           fullName,\n           token,\n           secret,\n           accessToken,\n           tokenType,\n           expiresIn,\n           refreshToken)\n  }\n\n  def createNewUser(i: Identity) : Option[User] = {\n    println(\"User.createNewUser\")\n\n    insert(i)\n  }\n\n  def insert(name:String,\n      password:Option[String],\n      provider:String,\n      emailOpt:Option[String],\n      authMethod:AuthenticationMethod,\n      avatarUrlOpt:Option[String],\n      firstNameNullable:String,\n      lastNameNullable:String,\n      fullNameNullable:String,\n      oAuth1TokenNullable:String,\n      oAuth1SecretNullable:String,\n      oAuth2AccessTokenNullable:String,\n      oAuth2TokenType:Option[String],\n      oAtuh2ExpiresIn:Option[Int],\n      oAuth2RefreshToken:Option[String]\n  ) : Option[User] =\n  {\n    println(\"User.insert main\")\n\n    var user : Option[User] = findByName(name, provider)\n\n    user match {\n      case Some(_) => return user\n      case None => () // do nothing\n    }\n\n    DB.withConnection(\"ebdb\"){ implicit conn =>\n      var id:Option[Long] = None\n\n      val email = emailOpt.getOrElse(\"\")\n      val avatarUrl = avatarUrlOpt.getOrElse(\"\")\n      val firstName = if(firstNameNullable == null) None else Some(firstNameNullable)\n      val lastName =  if(lastNameNullable == null) None else Some(lastNameNullable)\n      val fullName = if(fullNameNullable == null) None else Some(fullNameNullable)\n      val oAuth1Token = if(oAuth1TokenNullable == null) None else Some(oAuth1TokenNullable)\n      val oAuth1Secret = if(oAuth1SecretNullable == null) None else Some(oAuth1SecretNullable)\n      val oAuth2AccessToken = if(oAuth2AccessTokenNullable == null) None else Some(oAuth2AccessTokenNullable)\n\n\n      val sqlQuery = SQL(\"\"\"\n                insert into user (name, password, provider, email, first_name, last_name, full_name, avator_url,\n                                  auth_method, oauth1token, oauth1secret, oauth2access_token, oAuth2TokenType, oAtuh2ExpiresIn, oAuth2RefreshToken, created, modified)\n                values ({name}, {password}, {provider}, {email}, {firstName}, {lastName}, {fullName}, {avatarUrl},\n                        {authMethod}, {oAuth1Token}, {oAuth1Secret}, {oAuth2AccessToken}, {oAuth2TokenType}, {oAtuh2ExpiresIn}, {oAuth2RefreshToken}, now(), now());\n            \"\"\")\n      id = sqlQuery.on(\n        'name -> name,\n        'password -> password,\n        'provider -> provider,\n        'email -> email,\n        'firstName -> firstName,\n        'lastName -> lastName,\n        'fullName -> fullName,\n        'avatarUrl -> avatarUrl,\n        'authMethod -> authMethod.toString(),\n        'oAuth1Token -> oAuth1Token,\n        'oAuth1Secret -> oAuth1Secret,\n        'oAuth2AccessToken -> oAuth2AccessToken,\n        'oAuth2TokenType -> oAuth2TokenType,\n        'oAtuh2ExpiresIn -> oAtuh2ExpiresIn,\n        'oAuth2RefreshToken -> oAuth2RefreshToken\n      ).executeInsert()\n\n      println(\"SQL Insert id \" + id)\n\n      val oAuth1Info = if(oAuth1TokenNullable == null) None else Some(OAuth1Info(oAuth1TokenNullable, oAuth1SecretNullable))\n      val oAuth2Info = if(oAuth2AccessTokenNullable == null) None else Some(OAuth2Info(oAuth2AccessTokenNullable, oAuth2TokenType, oAtuh2ExpiresIn, oAuth2RefreshToken))\n\n\n      id match {\n        case Some(num:Long) => {\n          password match {\n            case None => user = Some(new User(new Id(num), name, provider, emailOpt, None, firstName, lastName, fullName, avatarUrlOpt, authMethod, oAuth1Info, oAuth2Info))\n            case Some(s) => {\n              val pass = new PasswordInfo(num.toString(), s) // hasher:\u3053\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092hash\u3059\u308b\u306e\u306b\u672c\u4eba\u306eid\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\n              user = Some(new User(new Id(num), name, provider, emailOpt, Some(pass), firstName, lastName, fullName, avatarUrlOpt, authMethod, oAuth1Info, oAuth2Info))\n            }\n          }\n        }\n        case None => {\n          println(\"db user = None\")\n          user = None\n        }\n      }\n    } // end of DB.withConnection\n\n    user\n  }\n}\n\n\n\nMyUserService.scala\u306e\u4f5c\u6210\n\napp/service/MyUserService.scala\npackage service\n\nimport play.api.{Logger, Application}\n\nimport securesocial.core._\nimport securesocial.core.providers.Token\nimport securesocial.core.IdentityId\n\nimport models.User;\n\ncase class MySocialUser(localUser: User,\n                        identityId: IdentityId,\n                        firstName: String,\n                        lastName: String,\n                        fullName: String,\n                        email: Option[String],\n                        avatarUrl: Option[String],\n                        authMethod: AuthenticationMethod,\n                        oAuth1Info: Option[OAuth1Info] = None,\n                        oAuth2Info: Option[OAuth2Info] = None,\n                        passwordInfo: Option[PasswordInfo] = None) extends Identity\n\nobject MySocialUser {\n  def apply(user: User): MySocialUser = {\n    MySocialUser(\n        user,\n        IdentityId(user.name,user.provider),\n        user.firstName,\n        user.lastName,\n        user.fullName,\n        user.email,\n        user.avatarUrl,\n        user.authMethod,\n        user.oAuth1Info,\n        user.oAuth2Info,\n        user.passwordInfo)\n  }\n}\n\n\nclass MyUserService(application: Application) extends UserServicePlugin(application) {\n  private var tokens = Map[String, Token]()\n\n  def find(id: IdentityId): Option[Identity] = {\n    User.findByName(id.userId,id.providerId);\n  }\n\n  def findByEmailAndProvider(email: String, providerId: String): Option[Identity] = {\n    User.findByEmailAndProvider(email, providerId)\n  }\n\n  def save(i: Identity) = {\n    val ii=i.identityId\n    var user = User.findByName(ii.userId,ii.providerId);\n    user match {\n      case Some(u) => {\n        user = User.insert(u)\n        MySocialUser(user.get)\n      }\n      case None => {\n        println(\"save None Profile\")\n        user = User.createNewUser(i)\n        MySocialUser(user.get)\n      }\n    }\n  }\n\n  def save(token: Token) {\n    println(\"save(token:) token = \" + token)\n\n    tokens += (token.uuid -> token)\n  }\n\n  def findToken(token: String): Option[Token] = {\n    tokens.get(token)\n  }\n\n  def deleteToken(uuid: String) {\n    tokens -= uuid\n  }\n\n  def deleteTokens() {\n    tokens = Map()\n  }\n\n  def deleteExpiredTokens() {\n    tokens = tokens.filter(!_._2.isExpired)\n  }\n}\n\n\n\n\u30ab\u30b9\u30bf\u30e0View\u306e\u4f5c\u6210\n\nindex.scala.html\u306e\u4fee\u6b63\n\napp/views/index.scala.html\n@(user: String, provider: String, avatarUrl: Option[String], token: String)(implicit request: RequestHeader, lang: Lang)\n\n@import helper._\n@import securesocial.core.Registry\n@import securesocial.core.AuthenticationMethod._\n@import securesocial.core.providers.UsernamePasswordProvider.UsernamePassword\n\n@main(\"Welcome\") {\n  <div class=\"page-header\">\n    <h1>Welcome!</h1>\n  </div>\n\n  Welcome @(user)@@@(provider)!\n\n  @avatarUrl match {\n    case Some(url) => { <image src=\"@url\" /> }\n    case None => {}\n  }\n\n  <p>\n    Your access token is '@token'\n  </P>\n\n  <p>\n    <a href=\"/logout\">Logout</a>\n  </p>\n}\n\n\n\n\u5b9f\u884c\n\u3053\u3053\u307e\u3067\u3067\u52d5\u4f5c\u3059\u308b\u306f\u305a\u3067\u3059\u306e\u3067\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n$ play run\n\n\u30d6\u30e9\u30a6\u30b6\u3067 http://localhost:9000/ \u306b\u63a5\u7d9a\u3057\u3066\u3046\u307e\u304f\u30c4\u30a4\u30c3\u30bf\u30fc\u3067\u30ed\u30b0\u30a4\u30f3\u8a8d\u8a3c\u3067\u304d\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\n## \u4f7f\u7528\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\n\nScala 2.11.1\nPlay 2.2.1\nSecureSocial 2.1.4\n\n## Play\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\n\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3002\n\n```bash:shell\n$ play new play221ss214SNSLogin\n\n       _\n _ __ | | __ _ _  _\n| '_ \\| |/ _' | || |\n|  __/|_|\\____|\\__ /\n|_|            |__/\n\nplay 2.2.1 built with Scala 2.10.2 (running Java 1.7.0_67), http://www.playframework.com\n\nThe new application will be created in /Users/suzukijun/Documents/Homepage/Chatamp/play221ss214SNSLogin\n\nWhat is the application name? [play221ss214SNSLogin]\n> \n\nWhich template do you want to use for this new application? \n\n  1             - Create a simple Scala application\n  2             - Create a simple Java application\n\n> 1\nOK, application play221ss214SNSLogin is created.\n\nHave fun!\n\n$ cd play221ss214SNSLogin/\n```\n\n# \u5404\u7a2e\u8a2d\u5b9a\n\n## plugins.sbt\u306e\u4fee\u6b63\n\nwar\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3067\u304d\u308b\u3088\u3046\u306bplay2war\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```project/plugins.sbt\n// Comment to get more information during initialization\nlogLevel := Level.Warn\n\n// The Typesafe repository\nresolvers += \"Typesafe repository\" at \"http://repo.typesafe.com/typesafe/releases/\"\n\n// Use the Play sbt plugin for Play projects\naddSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.2.1\")\n\n// Use the Play sbt plugin for Play projects\naddSbtPlugin(\"com.github.play2war\" % \"play2-war-plugin\" % \"1.2\")\n```\n\n\n\n## build.sbt\u306e\u4fee\u6b63\n\nmysql\u3068SecureSocial\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u8ffd\u52a0\u3002\n\n```build.sbt\nimport com.github.play2war.plugin._\n\n\nname := \"play221ss214SNSLogin\"\n\nversion := \"1.0-SNAPSHOT\"\n\nscalaVersion := \"2.11.1\"\n\nlibraryDependencies ++= Seq(\n  jdbc,\n  anorm,\n  cache,\n  \"mysql\" % \"mysql-connector-java\" % \"5.1.18\",\n  \"ws.securesocial\" %% \"securesocial\" % \"2.1.4\"\n)     \n\nplay.Project.playScalaSettings\n\nPlay2WarPlugin.play2WarSettings\n\nPlay2WarKeys.servletVersion := \"3.0\"\n\n```\n\n## play.plugins\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0\n\n```conf/play.plugins\n9994:securesocial.core.DefaultAuthenticatorStore\n9995:securesocial.core.DefaultIdGenerator\n9996:securesocial.core.providers.utils.DefaultPasswordValidator\n9997:securesocial.controllers.DefaultTemplatesPlugin\n9998:service.MyUserService\n9999:securesocial.core.providers.utils.BCryptPasswordHasher\n10000:securesocial.core.providers.TwitterProvider\n#10004:securesocial.core.providers.UsernamePasswordProvider\n```\n\n## routes\u30d5\u30a1\u30a4\u30eb\u306e\u4fee\u6b63\n\n```conf/routes\n# Home page\nGET     /                           controllers.Application.index\n\n# Map static resources from the /public folder to the /assets URL path\nGET     /assets/*file               controllers.Assets.at(path=\"/public\", file)\n\n\n# Login page\nGET     /login                      securesocial.controllers.LoginPage.login\nGET     /logout                     securesocial.controllers.LoginPage.logout\n\n# User Registration and password handling \nGET     /signup                     securesocial.controllers.Registration.startSignUp\nPOST    /signup                     securesocial.controllers.Registration.handleStartSignUp\nGET     /signup/:token              securesocial.controllers.Registration.signUp(token)\nPOST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)\nGET     /reset                      securesocial.controllers.Registration.startResetPassword\nPOST    /reset                      securesocial.controllers.Registration.handleStartResetPassword\nGET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)\nPOST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)\nGET     /password                   securesocial.controllers.PasswordChange.page\nPOST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange\n\n# Providers entry points\nGET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)\nPOST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)\nGET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized\n```\n\n\n## application.conf\u30d5\u30a1\u30a4\u30eb\u306e\u4fee\u6b63\n\n\uff11\u884c\u76ee\u306b\u4ee5\u4e0b\u306e\u884c\u3092\u8ffd\u52a0\n\n```conf/application.conf\ninclude \"securesocial.conf\"\n```\n\nMySQL\u306e\u8a2d\u5b9a\n>ebdb\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d\u3092\u3044\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u2028\n\n```conf/application.conf\ndb.ebdb.driver=\"com.mysql.jdbc.Driver\"\ndb.ebdb.url=\"jdbc:mysql://localhost/ebdb\"\ndb.ebdb.user=\"[\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30e6\u30fc\u30b6\u30fc\u540d]\"\ndb.ebdb.pass=\"[\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30d1\u30b9\u30ef\u30fc\u30c9]\"\n#\u5b9f\u884c\u3055\u308c\u305fSQL\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\ndb.ebdb.logStatements=true\n```\n\n## securesocial.conf\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\n\nConsumer Key\u3068Consumer Secret\u306f[Twitter\u306b\u30a2\u30d7\u30ea\u3092\u767b\u9332](https://dev.twitter.com/)\u3057\u3066\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```conf/securesocial.conf\nsecuresocial {\n    onLoginGoTo=/\n    onLogoutGoTo=/login\n    ssl=false\t\n\n\ttwitter {\n    \trequestTokenUrl=\"https://api.twitter.com/oauth/request_token\"\n    \taccessTokenUrl=\"https://api.twitter.com/oauth/access_token\"\n    \tauthorizationUrl=\"https://api.twitter.com/oauth/authorize\"\n\t\tconsumerKey=\"[Your Twitter Consumer Key]\"\n\t\tconsumerSecret=\"[Your Twitter Consumer Secret]\"\n\t}\n}\n```\n\n\n## \u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\uff1a1.sql\n\nebdb\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306f\u3054\u81ea\u5206\u306e\u74b0\u5883\u306b\u3042\u308f\u305b\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3002\n\n>conf/evolutions/ \u306e\u5f8c\u306b\u7d9a\u304f\u90e8\u5206\u306fdatabase\u540d\u306b\u306a\u308a\u307e\u3059\u3002\n\n```sql:conf/evolutions/ebdb/1.sql\n# Ups\u4ee5\u4e0b\u306f\u30de\u30a4\u30b0\u30ec\u30fc\u30c8\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bSQL\n# --- !Ups                                                                                                                                                                          \n\n    CREATE TABLE user\n    (\n        id INT(12) UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,\n        name VARCHAR(200) NOT NULL UNIQUE,\n        first_name VARCHAR(200),\n        last_name VARCHAR(200),\n        full_name VARCHAR(200),\n        password VARCHAR(200),\n        avator_url VARCHAR(200),\n        email VARCHAR(200),\n        provider enum ('twitter', 'facebook', 'google', 'github', 'userpass', 'linkedin', 'foursquare', 'dropbox', 'xing', 'instagram', 'vk', 'weibo') NOT NULL,\n        auth_method VARCHAR(50),\n        oauth1token VARCHAR(200),\n        oauth1secret VARCHAR(200),\n        oauth2access_token VARCHAR(200),\n        oAuth2TokenType VARCHAR(200),\n        oAtuh2ExpiresIn INT,\n        oAuth2RefreshToken VARCHAR(200),\n        sex enum ('male', 'female', 'other') default 'other',\n        description TEXT,\n\n        created DATETIME NOT NULL,\n        modified DATETIME NOT NULL,\n\n        PRIMARY KEY (id)\n    ) CHARSET utf8 COMMENT = 'User Accounts';\n\n    /* Create Indexes */\n    CREATE UNIQUE INDEX USER_IDX ON user (name ASC);\n    CREATE INDEX ACCOUNT_IDX ON user (id ASC);\n\n\n# Downs\u4ee5\u4e0b\u306f\u30de\u30a4\u30b0\u30ec\u30fc\u30c8\u5dee\u3057\u623b\u3057\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bSQL\n# --- !Downs\n\n\tDROP INDEX USER_IDX ON user;\n\tDROP INDEX ACCOUNT_IDX ON user;\n\n\tDROP TABLE user;\n```\n\n# Controller\u306e\u4fee\u6b63\n\n## Application.scala\u306e\u4fee\u6b63\n\n```app/controllers/Application.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\nimport securesocial.core._\n\nobject Application extends securesocial.core.SecureSocial {\n\n  def index = SecuredAction { implicit request =>\n    // \u3053\u3053\u306b\u304f\u308b\u6642\u70b9\u3067fullName\u3084\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306f\u53d6\u5f97\u6e08\u307f                                                                           \n    val name = request.user.fullName\n    val provider = request.user.identityId.providerId\n\n    // \u305f\u3081\u3057\u306b\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3068\u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u53d6\u5f97\u3057\u3066\u307f\u308b\u3002                                                     \n    var token = \"\"\n    val oAuth1Info:Option[OAuth1Info] = request.user.oAuth1Info\n    oAuth1Info match {\n      case Some(info) => {\n        token = info.token\n        val secret = info.secret\n      }\n      case None => ()\n    }\n\n    Ok(views.html.index(name, provider, request.user.avatarUrl, token))\n  }\n\n  def page = UserAwareAction { implicit request =>\n    val userName = request.user match {\n      case Some(user) => user.fullName\n      case _ => \"guest\"\n    }\n    Ok(\"Hello %s\".format(userName))\n  }\n\n}\n```\n\n# Model\u306e\u4f5c\u6210\n\n## User\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\n```scala:app/models/User.scala\npackage models\n\nimport java.io.Serializable\nimport securesocial.core._\nimport securesocial.core.providers._\nimport anorm._ \nimport anorm.SqlParser._\n\nimport play.api.db._\nimport play.api.Play.current// DB.withConnection\u3067\u5fc5\u8981\n\n\ncase class User(\n    id:Pk[Long],\n    name:String,\n    provider:String,\n    email:Option[String],\n    passwordInfo:Option[PasswordInfo],\n    first_name:Option[String],\n    last_name:Option[String],\n    full_name:Option[String],\n    avatarUrl:Option[String],\n    authMethod: securesocial.core.AuthenticationMethod,\n    oAuth1Info: Option[securesocial.core.OAuth1Info],\n    oAuth2Info: Option[securesocial.core.OAuth2Info]) extends Identity\n{\n\n  def isEmpty : Boolean = {\n      id != NotAssigned\n      }\n  \n  def identityId: securesocial.core.IdentityId = {\n      IdentityId(name, provider)\n  }\n  \n  def firstName:String = {\n      if(first_name == null) return \"\"\n\n      first_name match {\n\t    case Some(s) => s\n\t      case None => \"\"\n      }\n  }\n  \n  def lastName:String = {\n      if(last_name == null) return \"\"\n\n      last_name match {\n\t    case Some(s) => s\n\t      case None => \"\"\n      }\n  }\n\n  def fullName: String = {\n      if(full_name == null){\n\t    \"\"\n      }else{\n\t    full_name match {\n\t            case Some(s) => s\n\t\t      case None => \"\"\n\t    }\n      }\n  }\n\n}\n\nobject User {\n  \n   val parser: RowParser[User] = {\n    get[Pk[Long]](\"user.id\") ~\n    get[String](\"user.name\") ~\n    get[String](\"user.provider\") ~\n    get[Option[String]](\"user.email\") ~\n    get[Option[String]](\"user.password\") ~\n    get[Option[String]](\"user.first_name\") ~\n    get[Option[String]](\"user.last_name\") ~\n    get[Option[String]](\"user.full_name\") ~\n    get[Option[String]](\"user.avator_url\") ~\n    get[String](\"user.auth_method\") ~\n    get[String](\"user.oauth1token\") ~\n    get[String](\"user.oauth1secret\") ~\n    get[String](\"user.oauth2access_token\") ~\n    get[Option[String]](\"user.oAuth2TokenType\") ~\n    get[Option[Int]](\"user.oAtuh2ExpiresIn\") ~\n    get[Option[String]](\"user.oAuth2RefreshToken\") map {\n      case id ~ name ~ provider ~ email ~ password ~ first_name ~ last_name ~ full_name ~ \n           avatorUrl ~ auth_method ~ oauth1token ~ oauth1secret ~ oauth2access_token ~ tokenType ~ expiresIn ~ oAuth2RefreshToken => \n        val pass = password match {\n          case Some(s) => {\n            id match {\n              case NotAssigned => None\n              case Id(num) => Some(new PasswordInfo(num.toString(), s))\n            }\n          }\n          case None => None\n        }\n        \n        val authMethod = auth_method match {\n          case \"OAuth1\" => AuthenticationMethod.OAuth1\n          case _        => AuthenticationMethod.OAuth2\n        }\n        val oAuth1Info = if(oauth1token == null || oauth1token.length == 0) None else Some(OAuth1Info(oauth1token, oauth1secret))\n        val oAuth2Info = if(oauth2access_token == null || oauth2access_token.length == 0)\n\t\t\t   None\n\t\t\t else\n\t\t\t   Some(OAuth2Info(oauth2access_token, null, null, null))\n        User(id, name, provider, email, pass, first_name, last_name, full_name, avatorUrl, authMethod, oAuth1Info, oAuth2Info)\n    }\n   }\n\n\n  def findByName(name:String, provider:String) : Option[User] = {\n    println(\"User.findByName. name:%s, provider: %s\".format(name, provider))\n\n    provider match {\n      case \"userpass\" => {  // mail & password login\n\tDB.withConnection(\"ebdb\"){ implicit connection =>\n\t    val user = SQL(\"select * from user where name = {name}\").on('name -> name).as(User.parser.singleOpt)\n\t    println(\"email.  user = \" + user)\n\t    user\n\t}\n      }\n      case _ => {  // SNS login\n        println(\"SNS Login: findByName\")\n\n\tDB.withConnection(\"ebdb\"){ implicit connection =>\n\t    val user = SQL(\"select * from user where name = {name}\").on('name -> name).as(User.parser.singleOpt)\n\t    println(\"SNS user = \" + user)\n\t    user\n\t}\n      }\n    }\n    \n  }\n\n  def findById(id: Long): Option[User] = {\n    println(\"User.findById\")\n\n    DB.withConnection(\"ebdb\") { implicit connection =>\n      SQL(\"select * from user where id = {id}\").on('id -> id).as(User.parser.singleOpt)\n    }\n  }\n\n  def findByEmailAndProvider(email: String, providerId: String): Option[User] = {\n    println(\"User.findByEmailAndName\")\n\n    DB.withConnection(\"ebdb\") { implicit connection =>\n      SQL(\"select * from user where email = {email} and provider = {providerId}\").on('email -> email, 'providerId -> providerId).as(User.parser.singleOpt)\n    }\n  }\n\n  def insert(i : Identity) : Option[User] = {\n    val provider = i.identityId.providerId\n    val name = i.identityId.userId\n    val authMethod = i.authMethod\n    val avatarUrl = i.avatarUrl\n    val firstName = i.firstName\n    val fullName = i.fullName\n    val lastName = i.lastName\n    val oAuth1Info = i.oAuth1Info\n    val oAuth2Info = i.oAuth2Info\n    val email = i.email\n    val passwordOpt = i.passwordInfo\n    val password = passwordOpt match {\n      case Some(pass) => Some(pass.password)\n      case None => None\n    }\n\n    oAuth1Info match {\n      case Some(info) => println(\"oAuth1 token\" + info.token + \", secret = \" + info.secret)\n      case None => println(\"no oAuth1\")\n    }\n    oAuth2Info match {\n      case Some(info) => println(\"oAuth2 accesstoken = \" + info.accessToken )\n      case None => println(\"no oAuth2\")\n    }\n    \n    val (token, secret) = oAuth1Info match {\n      case Some(info) => (info.token, info.secret)\n      case None => (\"\", \"\")\n    }\n    val (accessToken, tokenType, expiresIn, refreshToken):(String, Option[String], Option[Int], Option[String]) = oAuth2Info match {\n          case Some(info) => (info.accessToken, info.refreshToken, info.expiresIn, info.tokenType)\n          case None => (\"\", None, None, None)\n    }\n    \n    insert(name,\n           password,\n           provider,\n           email,\n           authMethod,\n           avatarUrl,\n           firstName,\n           lastName,\n           fullName,\n           token,\n           secret,\n           accessToken,\n           tokenType,\n           expiresIn,\n           refreshToken)\n  }\n  \n  def createNewUser(i: Identity) : Option[User] = {\n    println(\"User.createNewUser\")\n\n    insert(i)\n  }\n\n  def insert(name:String,\n      password:Option[String],\n      provider:String,\n      emailOpt:Option[String],\n      authMethod:AuthenticationMethod,\n      avatarUrlOpt:Option[String],\n      firstNameNullable:String,\n      lastNameNullable:String,\n      fullNameNullable:String,\n      oAuth1TokenNullable:String,\n      oAuth1SecretNullable:String,\n      oAuth2AccessTokenNullable:String,\n      oAuth2TokenType:Option[String],\n      oAtuh2ExpiresIn:Option[Int],\n      oAuth2RefreshToken:Option[String]\n  ) : Option[User] =\n  {\n    println(\"User.insert main\")\n\n    var user : Option[User] = findByName(name, provider)\n    \n    user match {\n      case Some(_) => return user\n      case None => () // do nothing\n    }\n\n    DB.withConnection(\"ebdb\"){ implicit conn =>\n      var id:Option[Long] = None\n      \n      val email = emailOpt.getOrElse(\"\")\n      val avatarUrl = avatarUrlOpt.getOrElse(\"\")\n      val firstName = if(firstNameNullable == null) None else Some(firstNameNullable)\n      val lastName =  if(lastNameNullable == null) None else Some(lastNameNullable)\n      val fullName = if(fullNameNullable == null) None else Some(fullNameNullable)\n      val oAuth1Token = if(oAuth1TokenNullable == null) None else Some(oAuth1TokenNullable)\n      val oAuth1Secret = if(oAuth1SecretNullable == null) None else Some(oAuth1SecretNullable)\n      val oAuth2AccessToken = if(oAuth2AccessTokenNullable == null) None else Some(oAuth2AccessTokenNullable)\n\n\n      val sqlQuery = SQL(\"\"\"\n                insert into user (name, password, provider, email, first_name, last_name, full_name, avator_url,\n                                  auth_method, oauth1token, oauth1secret, oauth2access_token, oAuth2TokenType, oAtuh2ExpiresIn, oAuth2RefreshToken, created, modified)\n                values ({name}, {password}, {provider}, {email}, {firstName}, {lastName}, {fullName}, {avatarUrl},\n                        {authMethod}, {oAuth1Token}, {oAuth1Secret}, {oAuth2AccessToken}, {oAuth2TokenType}, {oAtuh2ExpiresIn}, {oAuth2RefreshToken}, now(), now());\n\t\t\t\"\"\")\n      id = sqlQuery.on(\n\t    'name -> name,\n\t    'password -> password,\n\t    'provider -> provider,\n\t    'email -> email,\n\t    'firstName -> firstName,\n\t    'lastName -> lastName,\n\t    'fullName -> fullName,\n\t    'avatarUrl -> avatarUrl,\n\t    'authMethod -> authMethod.toString(),\n\t    'oAuth1Token -> oAuth1Token,\n\t    'oAuth1Secret -> oAuth1Secret,\n\t    'oAuth2AccessToken -> oAuth2AccessToken,\n\t    'oAuth2TokenType -> oAuth2TokenType,\n\t    'oAtuh2ExpiresIn -> oAtuh2ExpiresIn,\n\t    'oAuth2RefreshToken -> oAuth2RefreshToken\n      ).executeInsert()\n        \n      println(\"SQL Insert id \" + id)\n      \n      val oAuth1Info = if(oAuth1TokenNullable == null) None else Some(OAuth1Info(oAuth1TokenNullable, oAuth1SecretNullable))\n      val oAuth2Info = if(oAuth2AccessTokenNullable == null) None else Some(OAuth2Info(oAuth2AccessTokenNullable, oAuth2TokenType, oAtuh2ExpiresIn, oAuth2RefreshToken))\n\n\n      id match {\n        case Some(num:Long) => {\n          password match {\n            case None => user = Some(new User(new Id(num), name, provider, emailOpt, None, firstName, lastName, fullName, avatarUrlOpt, authMethod, oAuth1Info, oAuth2Info))\n            case Some(s) => {\n              val pass = new PasswordInfo(num.toString(), s) // hasher:\u3053\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092hash\u3059\u308b\u306e\u306b\u672c\u4eba\u306eid\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\n              user = Some(new User(new Id(num), name, provider, emailOpt, Some(pass), firstName, lastName, fullName, avatarUrlOpt, authMethod, oAuth1Info, oAuth2Info))\n            }\n          }\n        }\n        case None => {\n          println(\"db user = None\")\n          user = None\n        }\n      }\n    } // end of DB.withConnection\n\n    user\n  }\n}\n```\n\n\n## MyUserService.scala\u306e\u4f5c\u6210\n\n```app/service/MyUserService.scala\npackage service\n\nimport play.api.{Logger, Application}\n\nimport securesocial.core._\nimport securesocial.core.providers.Token\nimport securesocial.core.IdentityId\n\nimport models.User;\n\ncase class MySocialUser(localUser: User,\n                        identityId: IdentityId,\n                        firstName: String,\n                        lastName: String,\n                        fullName: String,\n                        email: Option[String],\n                        avatarUrl: Option[String],\n                        authMethod: AuthenticationMethod,\n                        oAuth1Info: Option[OAuth1Info] = None,\n                        oAuth2Info: Option[OAuth2Info] = None,\n                        passwordInfo: Option[PasswordInfo] = None) extends Identity\n\nobject MySocialUser {\n  def apply(user: User): MySocialUser = {\n    MySocialUser(\n        user,\n        IdentityId(user.name,user.provider),\n        user.firstName,\n        user.lastName,\n        user.fullName,\n        user.email,\n        user.avatarUrl,\n        user.authMethod,\n        user.oAuth1Info,\n        user.oAuth2Info,\n        user.passwordInfo)\n  }\n}\n\n\nclass MyUserService(application: Application) extends UserServicePlugin(application) {\n  private var tokens = Map[String, Token]()\n\n  def find(id: IdentityId): Option[Identity] = {\n    User.findByName(id.userId,id.providerId);\n  }\n\n  def findByEmailAndProvider(email: String, providerId: String): Option[Identity] = {\n    User.findByEmailAndProvider(email, providerId)\n  }\n\n  def save(i: Identity) = {\n    val ii=i.identityId\n    var user = User.findByName(ii.userId,ii.providerId);\n    user match {\n      case Some(u) => {\n        user = User.insert(u)\n        MySocialUser(user.get)\n      }\n      case None => {\n        println(\"save None Profile\")\n        user = User.createNewUser(i)\n        MySocialUser(user.get)\n      }\n    }\n  }\n\n  def save(token: Token) {\n    println(\"save(token:) token = \" + token)\n    \n    tokens += (token.uuid -> token)\n  }\n\n  def findToken(token: String): Option[Token] = {\n    tokens.get(token)\n  }\n\n  def deleteToken(uuid: String) {\n    tokens -= uuid\n  }\n\n  def deleteTokens() {\n    tokens = Map()\n  }\n\n  def deleteExpiredTokens() {\n    tokens = tokens.filter(!_._2.isExpired)\n  }\n}\n```\n\n# \u30ab\u30b9\u30bf\u30e0View\u306e\u4f5c\u6210\n\n### index.scala.html\u306e\u4fee\u6b63\n\n```html:app/views/index.scala.html\n@(user: String, provider: String, avatarUrl: Option[String], token: String)(implicit request: RequestHeader, lang: Lang)\n\n@import helper._\n@import securesocial.core.Registry\n@import securesocial.core.AuthenticationMethod._\n@import securesocial.core.providers.UsernamePasswordProvider.UsernamePassword\n\n@main(\"Welcome\") {\n  <div class=\"page-header\">\n    <h1>Welcome!</h1>\n  </div>\n\n  Welcome @(user)@@@(provider)!\n\n  @avatarUrl match {\n    case Some(url) => { <image src=\"@url\" /> }\n    case None => {}\n  }\n\n  <p>\n    Your access token is '@token'\n  </P>\n\n  <p>\n    <a href=\"/logout\">Logout</a>\n  </p>\n}\n```\n\n## \u5b9f\u884c\n\n\u3053\u3053\u307e\u3067\u3067\u52d5\u4f5c\u3059\u308b\u306f\u305a\u3067\u3059\u306e\u3067\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```bash:\n$ play run\n```\n\n\n\u30d6\u30e9\u30a6\u30b6\u3067 http://localhost:9000/ \u306b\u63a5\u7d9a\u3057\u3066\u3046\u307e\u304f\u30c4\u30a4\u30c3\u30bf\u30fc\u3067\u30ed\u30b0\u30a4\u30f3\u8a8d\u8a3c\u3067\u304d\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\n", "tags": ["Scala", "SecureSocial", "PlayFramework"]}