{"tags": ["Java", "neo4j", "\u30b0\u30e9\u30d5\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9"], "context": " More than 1 year has passed since last update.\u74b0\u5883\u306e\u69cb\u7bc9\u3084\u3001\u7c21\u5358\u306a\u8a66\u884c\u306f\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u3078\u3002\nJava\u7d44\u307f\u8fbc\u307f\u3067Neo4j\u3092\u4f7f\u3046\n\u57fa\u672c\u7684\u306a\u624b\u9806\u3068\u3057\u3066\u306f\n1.\u30b3\u30fc\u30c9\u66f8\u304f\n2.\u30b5\u30fc\u30d0\u7acb\u3061\u4e0a\u304c\u3063\u3066\u306a\u3044\u72b6\u614b\u3067\u5b9f\u884c\n3.\u30b5\u30fc\u30d0\u7acb\u3061\u4e0a\u3052\u3066\u30d6\u30e9\u30a6\u30b6\u3067\u78ba\u8a8d\n\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3046\u307e\u304f\u52d5\u3044\u3066\u308b\u304b\u3084\u3063\u3066\u307f\u3066\u307e\u3059\u3002\n\u30ce\u30fc\u30c9\u30fb\u95a2\u4fc2\u306eCreate\u306f\u4e0a\u8a18\u306e\u30da\u30fc\u30b8\u3067\u3084\u3063\u3061\u3083\u3063\u3066\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u518d\u8a18\u3057\u307e\u3059\u3002\n\nCreate.java\npackage com.example;\n\nimport org.neo4j.graphdb.*;\nimport org.neo4j.graphdb.factory.GraphDatabaseFactory;\nimport org.neo4j.graphdb.DynamicLabel; \n\n/**\n * \u30ce\u30fc\u30c9\u3068\u95a2\u4fc2\u306eCreate\n */\npublic class Create {\n\n    public enum MyRelationshipTypes implements RelationshipType {\n        KNOWS\n    }\n\n    public static void main(String[] args) {\n        GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase(\"data/graphdb\");\n\n        Transaction tx = graphDb.beginTx();\n        try {\n\n            //\uff12\u3064\u306e\u30ce\u30fc\u30c9\u3068\uff11\u3064\u306e\u95a2\u4fc2\u3092\u4f5c\u6210\n            Node firstNode = graphDb.createNode();\n            Node secondNode = graphDb.createNode();\n            Relationship relationship = firstNode.createRelationshipTo(secondNode, MyRelationshipTypes.KNOWS);\n\n            //\u305d\u308c\u305e\u308c\u306e\u30ce\u30fc\u30c9\u306b\u30e9\u30d9\u30eb\u3092\u8ffd\u52a0\n            Label firstLabel = DynamicLabel.label(\"bird\");\n            firstNode.addLabel(firstLabel);\n            Label secondLabel = DynamicLabel.label(\"little bird\");\n            secondNode.addLabel(secondLabel);\n\n            //\u305d\u308c\u305e\u308c\u306e\u30ce\u30fc\u30c9\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\n            firstNode.setProperty(\"message\", \"haine \");\n            secondNode.setProperty(\"message\", \"pooh\");\n            relationship.setProperty(\"message\", \"like \");\n            tx.success();\n\n            //\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u5370\u5b57\n            System.out.print(firstNode.getProperty(\"message\"));\n            System.out.print(relationship.getProperty(\"message\"));\n            System.out.print(secondNode.getProperty(\"message\"));\n        }\n        finally {\n            tx.close();\n            graphDb.shutdown();\n        }\n    }\n}\n\n\n\u6b21\u306b\u3001Delete\u3002\n\u307e\u305a\u306fID\u3092\u6307\u5b9a\u3057\u3066\u524a\u9664\u3059\u308b\u65b9\u6cd5\u3002\nDelete\u3092\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u307e\u305a\u691c\u7d22\u3092\u3057\u3066\u3069\u306e\u30ce\u30fc\u30c9\u3001\u3069\u306e\u95a2\u4fc2\u3092Delete\u3059\u308b\u304b\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\n\u30d6\u30e9\u30a6\u30b6\u3067\u524a\u9664\u3059\u308b\u30ce\u30fc\u30c9\u30fb\u95a2\u4fc2\u306eID\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3002\n\u306a\u304a\u3001\u30ce\u30fc\u30c9\u3092\u524a\u9664\u3059\u308b\u969b\u306b\u306f\u305d\u306e\u30ce\u30fc\u30c9\u304b\u3089\u51fa\u3066\u3044\u308b\u95a2\u4fc2\u304c\u5168\u3066\u524a\u9664\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u6a21\u69d8\n\nDeleteById.java\npackage com.example;\n\nimport org.neo4j.graphdb.*;\nimport org.neo4j.graphdb.factory.GraphDatabaseFactory;\n\n/**\n * ID\u306e\u691c\u7d22\u3092\u3057\u3066\u30ce\u30fc\u30c9\u30fb\u95a2\u4fc2\u3092\u524a\u9664\u3059\u308b\n */\npublic class DeleteById {\n\n    public enum MyRelationshipTypes implements RelationshipType {\n        KNOWS,\n        LIKES;\n    }\n\n    public static void main(String[] args) {\n        GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase(\"data/graphdb\");\n\n        Transaction tx = graphDb.beginTx();\n        try {\n\n            //\uff12\u3064\u306e\u30ce\u30fc\u30c9\u3068\uff11\u3064\u306e\u95a2\u4fc2\u3092\u4f5c\u6210\n            Node firstNode;\n            Node secondNode;\n            Relationship relationship;\n\n            //\u30ce\u30fc\u30c9\u306eID\u3092\u6307\u5b9a\u3057\u3066\u691c\u7d22\n            firstNode = graphDb.getNodeById(2);\n            secondNode = graphDb.getNodeById(3);\n            relationship = graphDb.getRelationshipById(1);\n\n            //\u78ba\u8a8d\u306e\u305f\u3081\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u3044\u308d\u3044\u308d\u8868\u793a\n            System.out.println(\"relation=\" + relationship.getProperty(\"message\"));\n            System.out.println(\"label=\" + firstNode.getLabels());    \n            System.out.println(firstNode.getSingleRelationship( MyRelationshipTypes.LIKES, Direction.OUTGOING ));         \n\n            //\u95a2\u4fc2\u3068\u30ce\u30fc\u30c9\u306e\u524a\u9664\n            relationship.delete();\n            firstNode.delete();\n            secondNode.delete();\n\n            tx.success();\n        }\n        finally {\n            tx.close();\n            graphDb.shutdown();\n        }\n    }\n}\n\n\n\u6b21\u306b\u3001\u30ce\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u306e\u30ce\u30fc\u30c9\u304b\u3089\u51fa\u3066\u3044\u308b\uff08\u307e\u305f\u306f\u5165\u3063\u3066\u304f\u308b\uff09\u95a2\u4fc2\u3092\u524a\u9664\u3059\u308b\u65b9\u6cd5\u3002\n\nDeleteByRelation.java\npackage com.example;\n\nimport org.neo4j.graphdb.*;\nimport org.neo4j.graphdb.factory.GraphDatabaseFactory;\n\n/**\n * \u95a2\u4fc2\u3092\u691c\u7d22\u3057\u524a\u9664\n */\npublic class DeleteByRelation {\n\n    public enum MyRelationshipTypes implements RelationshipType {\n        KNOWS,\n        LIKES;\n    }\n\n    public static void main(String[] args) {\n        GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase(\"data/graphdb\");\n\n        Transaction tx = graphDb.beginTx();\n        try {\n\n            //\uff12\u3064\u306e\u30ce\u30fc\u30c9\u3068\uff11\u3064\u306e\u95a2\u4fc2\u3092\u4f5c\u6210\n            Node firstNode;\n            Node secondNode;\n\n            //\u30ce\u30fc\u30c9\u306eID\u3092\u6307\u5b9a\n            firstNode = graphDb.getNodeById(0);\n            secondNode = graphDb.getNodeById(1);\n\n            //\u6307\u5b9a\u3057\u305f\u30ce\u30fc\u30c9\u304b\u3089\u51fa\u3066\u3044\u308b\u95a2\u4fc2\u3092\u524a\u9664\n            firstNode.getSingleRelationship(MyRelationshipTypes.KNOWS, Direction.OUTGOING).delete();\n            firstNode.delete();\n            secondNode.delete();\n\n            tx.success();\n        }\n        finally {\n            //tx.finish();\n            tx.close();\n            graphDb.shutdown();\n        }\n    }\n}\n\n\nfirstNode.getSingleRelationship(MyRelationshipTypes.KNOWS, Direction.OUTGOING).delete();\n\u306ffirst\u30ce\u30fc\u30c9\u304b\u3089KNOWS\u3068\u3044\u3046\u95a2\u4fc2\u304c\u51fa\u3066\u3044\u308b\u3068\u3044\u3046\u610f\u5473\u3092\u793a\u3059\u3002\n\u9006\u306b\u5165\u3063\u3066\u304f\u308b\u95a2\u4fc2\u3092\u524a\u9664\u3057\u305f\u3051\u308c\u3070\nfirstNode.getSingleRelationship(MyRelationshipTypes.KNOWS, Direction.INCOMING).delete();\n\u306b\u5909\u3048\u308c\u3070\u826f\u3044\u3002\n\u691c\u7d22\u306e\u4ed5\u65b9\u306b\u3088\u3063\u3066\u3055\u307e\u3056\u307e\u306a\u30ce\u30fc\u30c9\u30fb\u95a2\u4fc2\u3092\u3068\u3063\u3066\u3053\u308c\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u3001\u3042\u3068\u306f\u540c\u3058\u65b9\u6cd5\u3067\u524a\u9664\u3067\u304d\u308b\u306f\u305a\u3002\n\u4ee5\u964d\u3001\u3044\u308d\u3044\u308d\u8a66\u3057\u306a\u304c\u3089\u6709\u7528\u306a\u306e\u304c\u3042\u3063\u305f\u3089\u8ffd\u8a18\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3002\n\u74b0\u5883\u306e\u69cb\u7bc9\u3084\u3001\u7c21\u5358\u306a\u8a66\u884c\u306f\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u3078\u3002\n[Java\u7d44\u307f\u8fbc\u307f\u3067Neo4j\u3092\u4f7f\u3046](http://qiita.com/mikoto3510/items/e2c05459bb498f4e56d7)\n\n\u57fa\u672c\u7684\u306a\u624b\u9806\u3068\u3057\u3066\u306f\n1.\u30b3\u30fc\u30c9\u66f8\u304f\n2.\u30b5\u30fc\u30d0\u7acb\u3061\u4e0a\u304c\u3063\u3066\u306a\u3044\u72b6\u614b\u3067\u5b9f\u884c\n3.\u30b5\u30fc\u30d0\u7acb\u3061\u4e0a\u3052\u3066\u30d6\u30e9\u30a6\u30b6\u3067\u78ba\u8a8d\n\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3046\u307e\u304f\u52d5\u3044\u3066\u308b\u304b\u3084\u3063\u3066\u307f\u3066\u307e\u3059\u3002\n\n\u30ce\u30fc\u30c9\u30fb\u95a2\u4fc2\u306eCreate\u306f\u4e0a\u8a18\u306e\u30da\u30fc\u30b8\u3067\u3084\u3063\u3061\u3083\u3063\u3066\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u518d\u8a18\u3057\u307e\u3059\u3002\n\n```Create.java\npackage com.example;\n \nimport org.neo4j.graphdb.*;\nimport org.neo4j.graphdb.factory.GraphDatabaseFactory;\nimport org.neo4j.graphdb.DynamicLabel; \n\n/**\n * \u30ce\u30fc\u30c9\u3068\u95a2\u4fc2\u306eCreate\n */\npublic class Create {\n \n    public enum MyRelationshipTypes implements RelationshipType {\n        KNOWS\n    }\n \n    public static void main(String[] args) {\n        GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase(\"data/graphdb\");\n\n        Transaction tx = graphDb.beginTx();\n        try {\n        \t\n        \t//\uff12\u3064\u306e\u30ce\u30fc\u30c9\u3068\uff11\u3064\u306e\u95a2\u4fc2\u3092\u4f5c\u6210\n            Node firstNode = graphDb.createNode();\n            Node secondNode = graphDb.createNode();\n            Relationship relationship = firstNode.createRelationshipTo(secondNode, MyRelationshipTypes.KNOWS);\n \n            //\u305d\u308c\u305e\u308c\u306e\u30ce\u30fc\u30c9\u306b\u30e9\u30d9\u30eb\u3092\u8ffd\u52a0\n            Label firstLabel = DynamicLabel.label(\"bird\");\n            firstNode.addLabel(firstLabel);\n            Label secondLabel = DynamicLabel.label(\"little bird\");\n            secondNode.addLabel(secondLabel);\n            \n            //\u305d\u308c\u305e\u308c\u306e\u30ce\u30fc\u30c9\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\n            firstNode.setProperty(\"message\", \"haine \");\n            secondNode.setProperty(\"message\", \"pooh\");\n            relationship.setProperty(\"message\", \"like \");\n            tx.success();\n\n            //\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u5370\u5b57\n            System.out.print(firstNode.getProperty(\"message\"));\n            System.out.print(relationship.getProperty(\"message\"));\n            System.out.print(secondNode.getProperty(\"message\"));\n        }\n        finally {\n            tx.close();\n            graphDb.shutdown();\n        }\n    }\n}\n```\n\n\n\u6b21\u306b\u3001Delete\u3002\n\n\u307e\u305a\u306fID\u3092\u6307\u5b9a\u3057\u3066\u524a\u9664\u3059\u308b\u65b9\u6cd5\u3002\nDelete\u3092\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u307e\u305a\u691c\u7d22\u3092\u3057\u3066\u3069\u306e\u30ce\u30fc\u30c9\u3001\u3069\u306e\u95a2\u4fc2\u3092Delete\u3059\u308b\u304b\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\n\u30d6\u30e9\u30a6\u30b6\u3067\u524a\u9664\u3059\u308b\u30ce\u30fc\u30c9\u30fb\u95a2\u4fc2\u306eID\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3002\n\n**\u306a\u304a\u3001\u30ce\u30fc\u30c9\u3092\u524a\u9664\u3059\u308b\u969b\u306b\u306f\u305d\u306e\u30ce\u30fc\u30c9\u304b\u3089\u51fa\u3066\u3044\u308b\u95a2\u4fc2\u304c\u5168\u3066\u524a\u9664\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u6a21\u69d8**\n\n```DeleteById.java\npackage com.example;\n \nimport org.neo4j.graphdb.*;\nimport org.neo4j.graphdb.factory.GraphDatabaseFactory;\n\n/**\n * ID\u306e\u691c\u7d22\u3092\u3057\u3066\u30ce\u30fc\u30c9\u30fb\u95a2\u4fc2\u3092\u524a\u9664\u3059\u308b\n */\npublic class DeleteById {\n \n    public enum MyRelationshipTypes implements RelationshipType {\n        KNOWS,\n        LIKES;\n    }\n \n    public static void main(String[] args) {\n        GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase(\"data/graphdb\");\n       \n        Transaction tx = graphDb.beginTx();\n        try {\n        \t\n        \t//\uff12\u3064\u306e\u30ce\u30fc\u30c9\u3068\uff11\u3064\u306e\u95a2\u4fc2\u3092\u4f5c\u6210\n            Node firstNode;\n            Node secondNode;\n            Relationship relationship;\n            \n            //\u30ce\u30fc\u30c9\u306eID\u3092\u6307\u5b9a\u3057\u3066\u691c\u7d22\n            firstNode = graphDb.getNodeById(2);\n            secondNode = graphDb.getNodeById(3);\n            relationship = graphDb.getRelationshipById(1);\n            \n            //\u78ba\u8a8d\u306e\u305f\u3081\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u3044\u308d\u3044\u308d\u8868\u793a\n            System.out.println(\"relation=\" + relationship.getProperty(\"message\"));\n            System.out.println(\"label=\" + firstNode.getLabels());    \n            System.out.println(firstNode.getSingleRelationship( MyRelationshipTypes.LIKES, Direction.OUTGOING ));         \n            \n            //\u95a2\u4fc2\u3068\u30ce\u30fc\u30c9\u306e\u524a\u9664\n            relationship.delete();\n            firstNode.delete();\n            secondNode.delete();\n            \n            tx.success();\n        }\n        finally {\n            tx.close();\n            graphDb.shutdown();\n        }\n    }\n}\n```\n\n\u6b21\u306b\u3001\u30ce\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u306e\u30ce\u30fc\u30c9\u304b\u3089\u51fa\u3066\u3044\u308b\uff08\u307e\u305f\u306f\u5165\u3063\u3066\u304f\u308b\uff09\u95a2\u4fc2\u3092\u524a\u9664\u3059\u308b\u65b9\u6cd5\u3002\n\n```DeleteByRelation.java\npackage com.example;\n \nimport org.neo4j.graphdb.*;\nimport org.neo4j.graphdb.factory.GraphDatabaseFactory;\n\n/**\n * \u95a2\u4fc2\u3092\u691c\u7d22\u3057\u524a\u9664\n */\npublic class DeleteByRelation {\n \n    public enum MyRelationshipTypes implements RelationshipType {\n        KNOWS,\n        LIKES;\n    }\n \n    public static void main(String[] args) {\n        GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase(\"data/graphdb\");\n       \n        Transaction tx = graphDb.beginTx();\n        try {\n        \t\n        \t//\uff12\u3064\u306e\u30ce\u30fc\u30c9\u3068\uff11\u3064\u306e\u95a2\u4fc2\u3092\u4f5c\u6210\n            Node firstNode;\n            Node secondNode;\n            \n            //\u30ce\u30fc\u30c9\u306eID\u3092\u6307\u5b9a\n            firstNode = graphDb.getNodeById(0);\n            secondNode = graphDb.getNodeById(1);\n            \n            //\u6307\u5b9a\u3057\u305f\u30ce\u30fc\u30c9\u304b\u3089\u51fa\u3066\u3044\u308b\u95a2\u4fc2\u3092\u524a\u9664\n            firstNode.getSingleRelationship(MyRelationshipTypes.KNOWS, Direction.OUTGOING).delete();\n            firstNode.delete();\n            secondNode.delete();\n            \n            tx.success();\n        }\n        finally {\n            //tx.finish();\n            tx.close();\n            graphDb.shutdown();\n        }\n    }\n}\n```\n\n`firstNode.getSingleRelationship(MyRelationshipTypes.KNOWS, Direction.OUTGOING).delete();`\n\u306ffirst\u30ce\u30fc\u30c9\u304b\u3089KNOWS\u3068\u3044\u3046\u95a2\u4fc2\u304c\u51fa\u3066\u3044\u308b\u3068\u3044\u3046\u610f\u5473\u3092\u793a\u3059\u3002\n\u9006\u306b\u5165\u3063\u3066\u304f\u308b\u95a2\u4fc2\u3092\u524a\u9664\u3057\u305f\u3051\u308c\u3070\n`firstNode.getSingleRelationship(MyRelationshipTypes.KNOWS, Direction.INCOMING).delete();`\n\u306b\u5909\u3048\u308c\u3070\u826f\u3044\u3002\n\n\n\u691c\u7d22\u306e\u4ed5\u65b9\u306b\u3088\u3063\u3066\u3055\u307e\u3056\u307e\u306a\u30ce\u30fc\u30c9\u30fb\u95a2\u4fc2\u3092\u3068\u3063\u3066\u3053\u308c\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u3001\u3042\u3068\u306f\u540c\u3058\u65b9\u6cd5\u3067\u524a\u9664\u3067\u304d\u308b\u306f\u305a\u3002\n\n\n\n\u4ee5\u964d\u3001\u3044\u308d\u3044\u308d\u8a66\u3057\u306a\u304c\u3089\u6709\u7528\u306a\u306e\u304c\u3042\u3063\u305f\u3089\u8ffd\u8a18\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3002\n"}