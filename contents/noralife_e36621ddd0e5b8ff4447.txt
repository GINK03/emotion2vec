{"context": "AWS\u306b\u4ee3\u8868\u3055\u308c\u308bServerless Architecture\u306f\u30af\u30e9\u30a6\u30c9\u4e0a\u3067\u306e\u52d5\u4f5c\u304c\u524d\u63d0\u3067\u3059\u304c\u3001Serverless Framework\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u7528\u3044\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u3082\u52d5\u4f5c\u3055\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308b\u306e\u3067\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002AWS\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3053\u3068\u306a\u304f\u958b\u767a\u304c\u53ef\u80fd\u306b\u306a\u308b\u306e\u3067\u3001\u3088\u308a\u7d20\u65e9\u304f\u958b\u767a\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001AWS\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u65b9\u3082Serverless\u306e\u4e16\u754c\u3092\u4f53\u9a13\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3058\u3083\u3093\u3051\u3093\u3092\u884c\u3046API\u306e\u958b\u767a\u3092\u901a\u3057\u3066\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u306e\u958b\u767a\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u5b8c\u6210\u7248\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\n\nnoralife/serverless-janken\n\n\n\u69cb\u6210\nAPI Gateway\u3001Lambda\u3001DynamoDB\u3092\u7528\u3044\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u3053\u3053\u3067\u306f\u60f3\u5b9a\u3057\u307e\u3059\u3002\u30ed\u30fc\u30ab\u30eb\u958b\u767a\u74b0\u5883\u3067\u306f\u305d\u308c\u305e\u308c serverless-offline\u3001javascript\u30d5\u30a1\u30a4\u30eb\u3001DynamoDB Local \u304c\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n\n\u74b0\u5883\n\nmacOS sierra\nNode.js v4.6.2\nServerless Framework v1.4\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\nServerless Framework\u3092\u7528\u3044\u3066\u958b\u767a\u3059\u308b\u306e\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3044\u3001\u65b0\u3057\u3044\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n$ npm install -g serverless\n$ mkdir serverless-janken\n$ sls create -t aws-nodejs -n serverless-janken\n\n\n\u95a2\u9023\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nAPI Gateway\u306e\u4ee3\u7528\u3068\u3057\u3066\u5229\u7528\u3059\u308b serverless-offline \u30d7\u30e9\u30b0\u30a4\u30f3\u3001Serverless Framework\u304b\u3089DynamoDB Local\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b serverless-dynamodb-local \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n$ npm install aws-sdk\n$ npm install --save-dev serverless-offline\n$ npm install --save-dev serverless-dynamodb-local\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u3001Serverless Framework\u304b\u3089\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u306b\u8a18\u5165\u3057\u307e\u3059\u3002\n$ vi serverless.yml\n# service: serverless-janken \u306e\u4e0b\u306b\u4ee5\u4e0b\u3092\u8ffd\u8a18\nplugins: \n - serverless-dynamodb-local\n - serverless-offline\n\n\nDynamoDB Local \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nserverless-dynamodb-local \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u5229\u7528\u3057\u3066DynamoDB Local\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n$ sls dynamodb install\n\n\nDynamoDB Local \u30c6\u30fc\u30d6\u30eb\u306e\u5b9a\u7fa9\nDynamoDB Local\u3067\u5229\u7528\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u3001\u30d7\u30ec\u30a4\u30e4\u30fc\u540d\u3068Unixtime\u3092\u30ad\u30fc\u3068\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n$ mkdir migrations\n$ vi migrations/jankens.json\n# \u4e0b\u8a18\u5185\u5bb9\u3067\u4fdd\u5b58\u3059\u308b\n{\n    \"Table\": {\n        \"TableName\": \"jankens\",\n        \"KeySchema\": [{\n            \"AttributeName\": \"player\",\n            \"KeyType\": \"HASH\"\n        }, {\n            \"AttributeName\": \"unixtime\",\n            \"KeyType\": \"RANGE\"\n        }],\n        \"AttributeDefinitions\": [{\n            \"AttributeName\": \"player\",\n            \"AttributeType\": \"S\"\n        }, {\n            \"AttributeName\": \"unixtime\",\n            \"AttributeType\": \"N\"\n        }],\n        \"ProvisionedThroughput\": {\n            \"ReadCapacityUnits\": 1,\n            \"WriteCapacityUnits\": 1\n        }\n    },\n    \"Seeds\": [{\n        \"player\": \"user1\",\n        \"unixtime\": 1482418800,\n        \"player_hand\": \"rock\",\n        \"computer_hand\": \"paper\",\n        \"judge\": \"lose\"\n    }]\n}\n\n\nDynamoDB Local \u306e\u8d77\u52d5\nDynamoDB Local\u8d77\u52d5\u6642\u306b\u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u6210\u3068\u30b7\u30fc\u30c9\u30c7\u30fc\u30bf\u306e\u633f\u5165\u3092\u884c\u3046\u305f\u3081\u3001 serverless.yml \u306b\u8a2d\u5b9a\u3092\u5165\u308c\u307e\u3059\u3002\n\nserverless.yml\n# service: serverless-janken \u306e\u4e0b\u306b\u4ee5\u4e0b\u3092\u8ffd\u8a18\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migration: true\n    migration:\n      dir: ./migrations\n\n\nDynamoDB Local\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \n$ sls dynamodb start\nDynamodb Local Started, Visit: http://localhost:8000/shell\n\nTable creation completed for table: jankens\nSeed running complete for table: jankens\n\n\u30d6\u30e9\u30a6\u30b6\u3067 http://localhost:8000/shell \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u30c6\u30fc\u30d6\u30eb\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u5de6\u5074\u306e\u30a8\u30c7\u30a3\u30bf\u306b\u4e0b\u8a18\u3092\u8a18\u5165\u3057\u3001\u518d\u751f\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002\nvar params = {\n    TableName: 'jankens',\n};\ndynamodb.scan(params, function(err, data) {\n    if (err) ppJson(err);\n    else ppJson(data);\n});\n\n\u56f3\u306e\u3088\u3046\u306b\u53f3\u5074\u306b\u30b7\u30fc\u30c9\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u304c\u78ba\u8a8d\u3067\u304d\u308c\u3070\u3001\u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u6210\uff06\u30b7\u30fc\u30c9\u306e\u633f\u5165\u304c\u5b8c\u4e86\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nLambda\u306e\u958b\u767a\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30ed\u30b8\u30c3\u30af\u90e8\u5206\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002handler.js \u3092\u958b\u3044\u3066\u4ee5\u4e0b\u306e\u5185\u5bb9\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\u3058\u3083\u3093\u3051\u3093\u3092\u884c\u3046API playJanken \u3068\u3058\u3083\u3093\u3051\u3093\u7d50\u679c\u3092\u53c2\u7167\u3059\u308bAPI listJankens \u306e\u305f\u3081\u306e\u30ed\u30b8\u30c3\u30af\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u306fAWS\u3067\u3082\u30ed\u30fc\u30ab\u30eb\u3067\u3082\u52d5\u4f5c\u304c\u53ef\u80fd\u306a\u3088\u3046\u306b\u3001 event.isOffline \u3092\u898b\u3066\u63a5\u7d9a\u3059\u308bDynamoDB\u3092\u5207\u308a\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\n\nhander.js\n\"use strict\";\n\nvar AWS = require(\"aws-sdk\");\n\nvar judgeJanken = function (a, b) {\n    var c = (a - b + 3) % 3;\n    if (c === 0) return \"draw\";\n    if (c === 2) return \"win\";\n    return \"lose\";\n}\n\nvar getDynamoClient = function (event) {\n    var dynamodb = null;\n    if (\"isOffline\" in event && event.isOffline) {\n        dynamodb = new AWS.DynamoDB.DocumentClient({\n            region: \"localhost\",\n            endpoint: \"http://localhost:8000\"\n        });\n    } else { \n        dynamodb = new AWS.DynamoDB.DocumentClient();\n    }\n    return dynamodb;\n}\n\nmodule.exports.playJanken = function (event, context, callback) {\n    console.log(\"Received event:\", JSON.stringify(event, null, 2));\n    console.log(\"Received context:\", JSON.stringify(context, null, 2));\n\n    var dynamodb    = getDynamoClient(event);\n    var date        = new Date();\n    var unixtime    = Math.floor(date.getTime() /1000);\n\n    var hand        = [\"rock\", \"scissors\", \"paper\"];\n    var player_name = event.queryStringParameters.name;\n    var player_hand = event.queryStringParameters.hand;\n    var player      = hand.indexOf(player_hand);\n    var computer    = Math.floor( Math.random() * 3) ;\n    var judge       = judgeJanken(player, computer);\n\n    var params = {\n        TableName: \"jankens\",\n        Item: {\n            player: player_name,\n            unixtime: unixtime,\n            player_hand: player_hand,\n            computer_hand: hand[computer],\n            judge: judge\n        }\n    };\n\n    dynamodb.put(params, function(err) {\n        var response = {statusCode: null, body: null};\n        if (err) {\n            console.log(err);\n            response.statusCode = 500;\n            response.body = {code: 500, message: \"PutItem Error\"};\n        } else {\n            response.statusCode = 200;\n            response.body = JSON.stringify({\n                player: player_hand,\n                computer: hand[computer],\n                unixtime: unixtime,\n                judge: judge\n            });\n        }\n        callback(null, response);\n    });\n};\n\nmodule.exports.listJankens = function (event, context, callback) {\n    console.log(\"Received event:\", JSON.stringify(event, null, 2));\n    console.log(\"Received context:\", JSON.stringify(context, null, 2));\n\n    var dynamodb = getDynamoClient(event);\n    var params   = { TableName: \"jankens\" };\n\n    dynamodb.scan(params, function(err, data) {\n        var response = {statusCode: null, body: null};\n        if (err) {\n            console.log(err);\n            response.statusCode = 500;\n            response.body = {code: 500, message: \"ScanItem Error\"};\n        } else if (\"Items\" in data) {\n            response.statusCode = 200;\n            response.body = JSON.stringify({jankens: data[\"Items\"]});\n        }\n        callback(null, response);\n    });\n};\n\n\n\n\nAPI Gateway\u306e\u8a2d\u5b9a\n\u6700\u5f8c\u306b\u524d\u9805\u3067\u4f5c\u6210\u3057\u305f\u30ed\u30b8\u30c3\u30af\u3092\u547c\u3076\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b serverless.yml \u306b\u8a2d\u5b9a\u3092\u5165\u308c\u307e\u3059\u3002\n\nGET /jankens... \u3058\u3083\u3093\u3051\u3093\u7d50\u679c\u306e\u53c2\u7167\nPOST /jankens... \u3058\u3083\u3093\u3051\u3093\u3092\u884c\u3044\u7d50\u679c\u3092DynamoDB Local\u306b\u4fdd\u5b58\n\n\nserverless.yml\nservice: serverless-janken\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migration: true\n    migration:\n        dir: ./migrations\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  playJanken:\n    handler: handler.playJanken\n    events:\n      - http:\n          path: jankens\n          method: post\n  listJankens:\n    handler: handler.listJankens\n    events:\n      - http:\n          path: jankens\n          method: get\n\n\n\n\u30c6\u30b9\u30c8\n\u4ee5\u4e0a\u3067\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3001\u30ed\u30b8\u30c3\u30af\u3001\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u305d\u308d\u3063\u305f\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u3067\u8d77\u52d5\u3055\u305b\u3066\u5229\u7528\u3057\u3066\u307f\u307e\u3059\u3002\n$ sls offline\n\n\u5225\u306e\u30b7\u30a7\u30eb\u3067curl\u3067API\u3092\u53e9\u3044\u3066\u5229\u7528\u3057\u3066\u307f\u307e\u3059\u3002\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u5834\u5408\u306f sls dynamodb start \u3067DynamoDB Local\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n$ curl 'http://localhost:3000/jankens?hand=rock&name=test' -X POST\n{\"player\":\"rock\",\"computer\":\"scissors\",\"unixtime\":1482469235,\"judge\":\"win\"}\n$ curl 'http://localhost:3000/jankens'\n{\"jankens\":[{\"unixtime\":1482469235,\"player_hand\":\"rock\",\"judge\":\"win\",\"player\":\"test\",\"computer_hand\":\"scissors\"},{\"unixtime\":1482418800,\"player_hand\":\"rock\",\"judge\":\"lose\",\"player\":\"user1\",\"computer_hand\":\"paper\"}]}\n\n\nAWS\u306b\u30c7\u30d7\u30ed\u30a4\n\u30ed\u30fc\u30ab\u30eb\u3067\u958b\u767a\u304c\u3067\u304d\u305f\u3089\u3001AWS\u4e0a\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3059\u3002AWS\u3067\u52d5\u304b\u3059\u306b\u306f\u3001DynamoDB\u306e\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3068\u3001IAM\u30ed\u30fc\u30eb\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3057\u305f\u306e\u3067\u3001serverless.yml \u306b\u8ffd\u8a18\u3057\u3066\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nserverless.yml\nservice: serverless-janken\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migration: true\n    migration:\n        dir: ./migrations\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\npackage:\n  exclude:\n    - node_modules/**\n    - migrations/**\n    - .git/**\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  # DynamoDB\u306e\u5229\u7528\u306e\u8a31\u53ef\n  iamRoleStatements:\n    -  Effect: 'Allow'\n       Action:\n         - 'dynamodb:PutItem'\n         - 'dynamodb:Scan'\n       Resource: '*'\n\nfunctions:\n  playJanken:\n    handler: handler.playJanken\n    events:\n      - http:\n          path: jankens\n          method: post\n  listJankens:\n    handler: handler.listJankens\n    events:\n      - http:\n          path: jankens\n          method: get\n\n# DynamoDB Table\u306e\u4f5c\u6210\nresources:\n  Resources:\n    JankensTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: jankens\n        KeySchema:\n          - AttributeName: player\n            KeyType: HASH\n          - AttributeName: unixtime\n            KeyType: RANGE\n        AttributeDefinitions:\n          - AttributeName: player\n            AttributeType: S\n          - AttributeName: unixtime\n            AttributeType: N\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n\n\u6700\u5f8c\u306bServerless Command\u3067\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3059\u3002\n$ sls deploy\nServerless: Packaging service...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading service .zip file to S3 (1.81 KB)...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n......................\nServerless: Stack update finished...\nService Information\nservice: serverless-janken\nstage: dev\nregion: ***\napi keys:\n  None\nendpoints:\n  POST - https://***.amazonaws.com/dev/jankens\n  GET - https://***.amazonaws.com/dev/jankens\nfunctions:\n  serverless-janken-dev-playJanken: arn:aws:lambda:***:***:function:serverless-janken-dev-playJanken\n  serverless-janken-dev-listJankens: arn:aws:lambda:***:***:function:serverless-janken-dev-listJankens\n\n\u4ee5\u4e0a\u3067\u30ed\u30fc\u30ab\u30eb\u3067\u958b\u767a\u3057\u305fServerless \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092AWS\u306b\u30c7\u30d7\u30ed\u30a4\u304c\u3067\u304d\u307e\u3057\u305f\u3002\nAWS\u306b\u4ee3\u8868\u3055\u308c\u308bServerless Architecture\u306f\u30af\u30e9\u30a6\u30c9\u4e0a\u3067\u306e\u52d5\u4f5c\u304c\u524d\u63d0\u3067\u3059\u304c\u3001Serverless Framework\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u7528\u3044\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u3082\u52d5\u4f5c\u3055\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308b\u306e\u3067\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002AWS\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3053\u3068\u306a\u304f\u958b\u767a\u304c\u53ef\u80fd\u306b\u306a\u308b\u306e\u3067\u3001\u3088\u308a\u7d20\u65e9\u304f\u958b\u767a\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001AWS\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u65b9\u3082Serverless\u306e\u4e16\u754c\u3092\u4f53\u9a13\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3058\u3083\u3093\u3051\u3093\u3092\u884c\u3046API\u306e\u958b\u767a\u3092\u901a\u3057\u3066\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u306e\u958b\u767a\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u5b8c\u6210\u7248\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\n\n* [noralife/serverless-janken](https://github.com/noralife/serverless-janken)\n\n\n## \u69cb\u6210\n\nAPI Gateway\u3001Lambda\u3001DynamoDB\u3092\u7528\u3044\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u3053\u3053\u3067\u306f\u60f3\u5b9a\u3057\u307e\u3059\u3002\u30ed\u30fc\u30ab\u30eb\u958b\u767a\u74b0\u5883\u3067\u306f\u305d\u308c\u305e\u308c serverless-offline\u3001javascript\u30d5\u30a1\u30a4\u30eb\u3001DynamoDB Local \u304c\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n![Screen Shot 2016-12-23 at 14.55.06.png](https://qiita-image-store.s3.amazonaws.com/0/27509/b36f68ce-5e37-b597-2eae-0e67bd06d8dd.png \"Screen Shot 2016-12-23 at 14.55.06.png\")\n\n\n\n## \u74b0\u5883\n\n* macOS sierra\n* Node.js v4.6.2\n* Serverless Framework v1.4\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\nServerless Framework\u3092\u7528\u3044\u3066\u958b\u767a\u3059\u308b\u306e\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3044\u3001\u65b0\u3057\u3044\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```bash\n$ npm install -g serverless\n$ mkdir serverless-janken\n$ sls create -t aws-nodejs -n serverless-janken\n```\n\n## \u95a2\u9023\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nAPI Gateway\u306e\u4ee3\u7528\u3068\u3057\u3066\u5229\u7528\u3059\u308b **serverless-offline** \u30d7\u30e9\u30b0\u30a4\u30f3\u3001Serverless Framework\u304b\u3089DynamoDB Local\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b **serverless-dynamodb-local** \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```bash\n$ npm install aws-sdk\n$ npm install --save-dev serverless-offline\n$ npm install --save-dev serverless-dynamodb-local\n```\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u3001Serverless Framework\u304b\u3089\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u306b\u8a18\u5165\u3057\u307e\u3059\u3002\n\n```bash\n$ vi serverless.yml\n# service: serverless-janken \u306e\u4e0b\u306b\u4ee5\u4e0b\u3092\u8ffd\u8a18\nplugins: \n - serverless-dynamodb-local\n - serverless-offline\n```\n\n## DynamoDB Local \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n**serverless-dynamodb-local** \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u5229\u7528\u3057\u3066DynamoDB Local\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```bash\n$ sls dynamodb install\n```\n\n## DynamoDB Local \u30c6\u30fc\u30d6\u30eb\u306e\u5b9a\u7fa9\n\nDynamoDB Local\u3067\u5229\u7528\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u3001\u30d7\u30ec\u30a4\u30e4\u30fc\u540d\u3068Unixtime\u3092\u30ad\u30fc\u3068\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n```bash\n$ mkdir migrations\n$ vi migrations/jankens.json\n# \u4e0b\u8a18\u5185\u5bb9\u3067\u4fdd\u5b58\u3059\u308b\n{\n    \"Table\": {\n        \"TableName\": \"jankens\",\n        \"KeySchema\": [{\n            \"AttributeName\": \"player\",\n            \"KeyType\": \"HASH\"\n        }, {\n            \"AttributeName\": \"unixtime\",\n            \"KeyType\": \"RANGE\"\n        }],\n        \"AttributeDefinitions\": [{\n            \"AttributeName\": \"player\",\n            \"AttributeType\": \"S\"\n        }, {\n            \"AttributeName\": \"unixtime\",\n            \"AttributeType\": \"N\"\n        }],\n        \"ProvisionedThroughput\": {\n            \"ReadCapacityUnits\": 1,\n            \"WriteCapacityUnits\": 1\n        }\n    },\n    \"Seeds\": [{\n        \"player\": \"user1\",\n        \"unixtime\": 1482418800,\n        \"player_hand\": \"rock\",\n        \"computer_hand\": \"paper\",\n        \"judge\": \"lose\"\n    }]\n}\n```\n\n## DynamoDB Local \u306e\u8d77\u52d5\n\nDynamoDB Local\u8d77\u52d5\u6642\u306b\u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u6210\u3068\u30b7\u30fc\u30c9\u30c7\u30fc\u30bf\u306e\u633f\u5165\u3092\u884c\u3046\u305f\u3081\u3001 `serverless.yml` \u306b\u8a2d\u5b9a\u3092\u5165\u308c\u307e\u3059\u3002\n\n```serverless.yml\n# service: serverless-janken \u306e\u4e0b\u306b\u4ee5\u4e0b\u3092\u8ffd\u8a18\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migration: true\n    migration:\n      dir: ./migrations\n```\n\nDynamoDB Local\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \n\n```bash\n$ sls dynamodb start\nDynamodb Local Started, Visit: http://localhost:8000/shell\n\nTable creation completed for table: jankens\nSeed running complete for table: jankens\n```\n\n\u30d6\u30e9\u30a6\u30b6\u3067 **http://localhost:8000/shell** \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u30c6\u30fc\u30d6\u30eb\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u5de6\u5074\u306e\u30a8\u30c7\u30a3\u30bf\u306b\u4e0b\u8a18\u3092\u8a18\u5165\u3057\u3001\u518d\u751f\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002\n\n\n```javascript\nvar params = {\n    TableName: 'jankens',\n};\ndynamodb.scan(params, function(err, data) {\n    if (err) ppJson(err);\n    else ppJson(data);\n});\n```\n\n\u56f3\u306e\u3088\u3046\u306b\u53f3\u5074\u306b\u30b7\u30fc\u30c9\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u304c\u78ba\u8a8d\u3067\u304d\u308c\u3070\u3001\u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u6210\uff06\u30b7\u30fc\u30c9\u306e\u633f\u5165\u304c\u5b8c\u4e86\u3057\u3066\u3044\u307e\u3059\u3002\n\n![Screen Shot 2016-12-23 at 15.08.59.png](https://qiita-image-store.s3.amazonaws.com/0/27509/7a3fe40c-3101-084d-86a9-8f61ab2d22c0.png \"Screen Shot 2016-12-23 at 15.08.59.png\")\n\n## Lambda\u306e\u958b\u767a\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30ed\u30b8\u30c3\u30af\u90e8\u5206\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002`handler.js` \u3092\u958b\u3044\u3066\u4ee5\u4e0b\u306e\u5185\u5bb9\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\u3058\u3083\u3093\u3051\u3093\u3092\u884c\u3046API `playJanken` \u3068\u3058\u3083\u3093\u3051\u3093\u7d50\u679c\u3092\u53c2\u7167\u3059\u308bAPI `listJankens` \u306e\u305f\u3081\u306e\u30ed\u30b8\u30c3\u30af\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u306fAWS\u3067\u3082\u30ed\u30fc\u30ab\u30eb\u3067\u3082\u52d5\u4f5c\u304c\u53ef\u80fd\u306a\u3088\u3046\u306b\u3001 `event.isOffline` \u3092\u898b\u3066\u63a5\u7d9a\u3059\u308bDynamoDB\u3092\u5207\u308a\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\n\n```hander.js\n\"use strict\";\n\nvar AWS = require(\"aws-sdk\");\n\nvar judgeJanken = function (a, b) {\n    var c = (a - b + 3) % 3;\n    if (c === 0) return \"draw\";\n    if (c === 2) return \"win\";\n    return \"lose\";\n}\n\nvar getDynamoClient = function (event) {\n    var dynamodb = null;\n    if (\"isOffline\" in event && event.isOffline) {\n        dynamodb = new AWS.DynamoDB.DocumentClient({\n            region: \"localhost\",\n            endpoint: \"http://localhost:8000\"\n        });\n    } else { \n        dynamodb = new AWS.DynamoDB.DocumentClient();\n    }\n    return dynamodb;\n}\n\nmodule.exports.playJanken = function (event, context, callback) {\n    console.log(\"Received event:\", JSON.stringify(event, null, 2));\n    console.log(\"Received context:\", JSON.stringify(context, null, 2));\n\n    var dynamodb    = getDynamoClient(event);\n    var date        = new Date();\n    var unixtime    = Math.floor(date.getTime() /1000);\n\n    var hand        = [\"rock\", \"scissors\", \"paper\"];\n    var player_name = event.queryStringParameters.name;\n    var player_hand = event.queryStringParameters.hand;\n    var player      = hand.indexOf(player_hand);\n    var computer    = Math.floor( Math.random() * 3) ;\n    var judge       = judgeJanken(player, computer);\n\n    var params = {\n        TableName: \"jankens\",\n        Item: {\n            player: player_name,\n            unixtime: unixtime,\n            player_hand: player_hand,\n            computer_hand: hand[computer],\n            judge: judge\n        }\n    };\n\n    dynamodb.put(params, function(err) {\n        var response = {statusCode: null, body: null};\n        if (err) {\n            console.log(err);\n            response.statusCode = 500;\n            response.body = {code: 500, message: \"PutItem Error\"};\n        } else {\n            response.statusCode = 200;\n            response.body = JSON.stringify({\n                player: player_hand,\n                computer: hand[computer],\n                unixtime: unixtime,\n                judge: judge\n            });\n        }\n        callback(null, response);\n    });\n};\n\nmodule.exports.listJankens = function (event, context, callback) {\n    console.log(\"Received event:\", JSON.stringify(event, null, 2));\n    console.log(\"Received context:\", JSON.stringify(context, null, 2));\n\n    var dynamodb = getDynamoClient(event);\n    var params   = { TableName: \"jankens\" };\n\n    dynamodb.scan(params, function(err, data) {\n        var response = {statusCode: null, body: null};\n        if (err) {\n            console.log(err);\n            response.statusCode = 500;\n            response.body = {code: 500, message: \"ScanItem Error\"};\n        } else if (\"Items\" in data) {\n            response.statusCode = 200;\n            response.body = JSON.stringify({jankens: data[\"Items\"]});\n        }\n        callback(null, response);\n    });\n};\n\n```\n\n## API Gateway\u306e\u8a2d\u5b9a\n\n\u6700\u5f8c\u306b\u524d\u9805\u3067\u4f5c\u6210\u3057\u305f\u30ed\u30b8\u30c3\u30af\u3092\u547c\u3076\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b `serverless.yml` \u306b\u8a2d\u5b9a\u3092\u5165\u308c\u307e\u3059\u3002\n\n* GET /jankens... \u3058\u3083\u3093\u3051\u3093\u7d50\u679c\u306e\u53c2\u7167\n* POST /jankens... \u3058\u3083\u3093\u3051\u3093\u3092\u884c\u3044\u7d50\u679c\u3092DynamoDB Local\u306b\u4fdd\u5b58\n\n```serverless.yml\nservice: serverless-janken\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migration: true\n    migration:\n        dir: ./migrations\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  playJanken:\n    handler: handler.playJanken\n    events:\n      - http:\n          path: jankens\n          method: post\n  listJankens:\n    handler: handler.listJankens\n    events:\n      - http:\n          path: jankens\n          method: get\n```\n\n## \u30c6\u30b9\u30c8\n\n\u4ee5\u4e0a\u3067\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3001\u30ed\u30b8\u30c3\u30af\u3001\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u305d\u308d\u3063\u305f\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u3067\u8d77\u52d5\u3055\u305b\u3066\u5229\u7528\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n$ sls offline\n```\n\n\u5225\u306e\u30b7\u30a7\u30eb\u3067curl\u3067API\u3092\u53e9\u3044\u3066\u5229\u7528\u3057\u3066\u307f\u307e\u3059\u3002\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u5834\u5408\u306f `sls dynamodb start` \u3067DynamoDB Local\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```bash\n$ curl 'http://localhost:3000/jankens?hand=rock&name=test' -X POST\n{\"player\":\"rock\",\"computer\":\"scissors\",\"unixtime\":1482469235,\"judge\":\"win\"}\n$ curl 'http://localhost:3000/jankens'\n{\"jankens\":[{\"unixtime\":1482469235,\"player_hand\":\"rock\",\"judge\":\"win\",\"player\":\"test\",\"computer_hand\":\"scissors\"},{\"unixtime\":1482418800,\"player_hand\":\"rock\",\"judge\":\"lose\",\"player\":\"user1\",\"computer_hand\":\"paper\"}]}\n```\n\n## AWS\u306b\u30c7\u30d7\u30ed\u30a4\n\n\u30ed\u30fc\u30ab\u30eb\u3067\u958b\u767a\u304c\u3067\u304d\u305f\u3089\u3001AWS\u4e0a\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3059\u3002AWS\u3067\u52d5\u304b\u3059\u306b\u306f\u3001DynamoDB\u306e\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3068\u3001IAM\u30ed\u30fc\u30eb\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3057\u305f\u306e\u3067\u3001`serverless.yml` \u306b\u8ffd\u8a18\u3057\u3066\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```serverless.yml\nservice: serverless-janken\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migration: true\n    migration:\n        dir: ./migrations\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\npackage:\n  exclude:\n    - node_modules/**\n    - migrations/**\n    - .git/**\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  # DynamoDB\u306e\u5229\u7528\u306e\u8a31\u53ef\n  iamRoleStatements:\n    -  Effect: 'Allow'\n       Action:\n         - 'dynamodb:PutItem'\n         - 'dynamodb:Scan'\n       Resource: '*'\n\nfunctions:\n  playJanken:\n    handler: handler.playJanken\n    events:\n      - http:\n          path: jankens\n          method: post\n  listJankens:\n    handler: handler.listJankens\n    events:\n      - http:\n          path: jankens\n          method: get\n\n# DynamoDB Table\u306e\u4f5c\u6210\nresources:\n  Resources:\n    JankensTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: jankens\n        KeySchema:\n          - AttributeName: player\n            KeyType: HASH\n          - AttributeName: unixtime\n            KeyType: RANGE\n        AttributeDefinitions:\n          - AttributeName: player\n            AttributeType: S\n          - AttributeName: unixtime\n            AttributeType: N\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n```\n\n\u6700\u5f8c\u306bServerless Command\u3067\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3059\u3002\n\n```bash\n$ sls deploy\nServerless: Packaging service...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading service .zip file to S3 (1.81 KB)...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n......................\nServerless: Stack update finished...\nService Information\nservice: serverless-janken\nstage: dev\nregion: ***\napi keys:\n  None\nendpoints:\n  POST - https://***.amazonaws.com/dev/jankens\n  GET - https://***.amazonaws.com/dev/jankens\nfunctions:\n  serverless-janken-dev-playJanken: arn:aws:lambda:***:***:function:serverless-janken-dev-playJanken\n  serverless-janken-dev-listJankens: arn:aws:lambda:***:***:function:serverless-janken-dev-listJankens\n```\n\n\u4ee5\u4e0a\u3067\u30ed\u30fc\u30ab\u30eb\u3067\u958b\u767a\u3057\u305fServerless \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092AWS\u306b\u30c7\u30d7\u30ed\u30a4\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n", "tags": ["serverless", "DynamoDB", "lambda", "AWS"]}