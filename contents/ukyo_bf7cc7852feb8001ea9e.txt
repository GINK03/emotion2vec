{"context": " More than 1 year has passed since last update.ukyo/lz4.js\u3067node.js\u306eTransform stream\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u3067\u30e1\u30e2\u3002\u5b9f\u88c5\u306fC\u8a00\u8a9e\u3002\u4eca\u56de\u306e\u5b9f\u88c5\u306b\u3088\u3063\u3066\n\njs\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068c\u306e\u69cb\u9020\u4f53\u306e\u7d10\u4ed8\u3051\n\u8907\u6570\u306estream\u3092\u540c\u6642\u306b\u5b9f\u884c(\u591a\u5206)\n\n\u304c\u5b9f\u73fe\u3067\u304d\u305f\u611f\u3058\u3067\u3059\u3002\n\n\u5b9f\u88c5\u30e1\u30e2\nc: \u5e38\u306b\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u4ecb\u3059\u308b\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3002\n\nsrc/lz4js.h#15\nLZ4JS_compressionContext_t* LZ4JS_createCompressionContext(LZ4F_blockSizeID_t blockSizeID, LZ4F_blockMode_t blockMode, LZ4F_contentChecksum_t contentChecksum, unsigned int compressionLevel);\nLZ4F_decompressionContext_t* LZ4JS_createDecompressionContext();\nvoid LZ4JS_freeCompressionContext(LZ4JS_compressionContext_t* cctxPtr);\nvoid LZ4JS_freeDecompressionContext(LZ4F_decompressionContext_t* dctxPtr);\nint LZ4JS_compressBegin(LZ4JS_compressionContext_t* cctxPtr);\nint LZ4JS_compressUpdate(LZ4JS_compressionContext_t* cctxPtr);\nint LZ4JS_compressEnd(LZ4JS_compressionContext_t* cctxPtr);\nint LZ4JS_decompress(LZ4F_decompressionContext_t* dctxPtr);\n\n\njs: \u8fd4\u3063\u3066\u304d\u305f\u30dd\u30a4\u30f3\u30bf\u3092\u30ad\u30fc\u306b\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3002\n\nsrc/post.js#69\nfunction BaseCompressor(options) {\n  this.options = assign({}, defaultCompressOptions, options);\n  this.cctxPtr = _LZ4JS_createCompressionContext(/* ...\u4e2d\u7565... */); // \u30dd\u30a4\u30f3\u30bf\u8fd4\u3063\u3066\u304f\u308b\n  if (!this.cctxPtr) throw new Error('LZ4JS_createCompressionContext');\n  LZ4JS_instances[this.cctxPtr] = this; // \u30dd\u30a4\u30f3\u30bf\u3092\u30ad\u30fc\u306b\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\n  this.$error = null;\n}\n\n\njs: \u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u3001\u4eca\u56de\u306f\u30d0\u30a4\u30c8\u5217src\u3068\u9577\u3055srcSize\u3092\u7528\u610f\u3057\u3066C\u5074\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3002\n\nsrc/post.js#146\nCompressStream.prototype['_transform'] = function(chunk, encoding, callback) {\n  try {\n    /* ...\u4e2d\u7565... */\n    for (offset = 0; offset < chunk.length; offset += BUF_SIZE) {\n      this.srcSize = Math.min(chunk.length - offset, BUF_SIZE);\n      this.src = chunk.slice(offset, offset + this.srcSize);\n      this.compressUpdate(); // \u4ee5\u4e0b\u53c2\u7167\n    }\n    callback();\n  } catch (error) {\n    callback(error);\n  }\n};\n\n\n\nsrc/post.js#86\nBaseCompressor.prototype.compressUpdate = function(first_argument) {\n  _LZ4JS_compressUpdate(this.cctxPtr) || this.cleanup();\n};\n\n\nc: LZ4JS_read\u3067js\u304b\u3089\u5165\u529b\u3092\u884c\u3046(\u81ea\u4f5cfread\u7684\u306a\u3084\u3064\u3001\u4ee5\u4e0b\u53c2\u7167)\u3002\n\nsrc/lz4js.c#69\nint LZ4JS_compressUpdate(LZ4JS_compressionContext_t* cctxPtr) {\n  size_t n = LZ4F_compressUpdate(cctxPtr->cctx, dst, dstMaxSize, src, LZ4JS_read(cctxPtr, src, BUF_SIZE), NULL);\n  if (LZ4JS_validate(cctxPtr, n)) {\n    LZ4JS_write(cctxPtr, dst, n);\n    return 1;\n  }\n  return 0;\n}\n\n\nc: EM_ASM_INT\u3092\u4f7f\u3063\u3066js\u5074\u306e\u30b3\u30fc\u30c9\u306b\u30ad\u30fcptr\u3068\u30d0\u30a4\u30c8\u5217\u306e\u5148\u982d\u4f4d\u7f6ebuf\u3068\u6700\u5927\u30b5\u30a4\u30basize\u3092\u9001\u308b\u3002\n\nsrc/lz4js.c#14\nsize_t LZ4JS_read(void* ptr, char* buf, size_t size) {\n  return EM_ASM_INT({return LZ4JS_read($0, $1, $2)}, ptr, buf, size);\n}\n\n\njs: \u30ad\u30fc\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53c2\u7167\u3057\u3066\u3001\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b$read\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3002\n\nsrc/post.js#3\nfunction LZ4JS_read(id, srcPtr, size) {\n  return LZ4JS_instances[id].$read(srcPtr, size);\n}\n\n\njs: emscripten\u4e0a\u306e\u30e1\u30e2\u30eaHEAPU8\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u3080\u3002\n\nsrc/post.js#136\nCompressStream.prototype.$read = function(srcPtr, size) {\n  HEAPU8.set(new Uint8Array(this.src.buffer, this.src.byteOffset, this.srcSize), srcPtr);\n  return this.srcSize;\n};\n\n\nc: \u3059\u308b\u3068\u3001LZ4F_compressUpdate\u547c\u3073\u51fa\u3057\u6642\u70b9\u3067\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3002LZ4JS_validate\u3001LZ4JS_write\u3082\u540c\u69d8\u306bjs\u5074\u3068\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u3002\n\nsrc/lz4js.c#69\nint LZ4JS_compressUpdate(LZ4JS_compressionContext_t* cctxPtr) {\n  size_t n = LZ4F_compressUpdate(cctxPtr->cctx, dst, dstMaxSize, src, LZ4JS_read(cctxPtr, src, BUF_SIZE), NULL);\n  if (LZ4JS_validate(cctxPtr, n)) {\n    LZ4JS_write(cctxPtr, dst, n);\n    return 1;\n  }\n  return 0;\n}\n\n\n\n\u307e\u3068\u3081\nEM_ASM\u3001HEAPU8\u3084\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u76f4\u63a5\u5229\u7528\u3057\u3066\u30a2\u30af\u30ed\u30d0\u30c6\u30a3\u30c3\u30af\u306bjs\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3061\u306a\u307f\u306b\u3001js\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u306a\u306e\u3067c\u5074\u306e\u914d\u5217\u306fstream\u3054\u3068\u306b\u4f5c\u3089\u306a\u3044\u3067\u5171\u6709\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\n[ukyo/lz4.js](https://github.com/ukyo/lz4.js)\u3067node.js\u306eTransform stream\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u3067\u30e1\u30e2\u3002\u5b9f\u88c5\u306fC\u8a00\u8a9e\u3002\u4eca\u56de\u306e\u5b9f\u88c5\u306b\u3088\u3063\u3066\n\n* js\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068c\u306e\u69cb\u9020\u4f53\u306e\u7d10\u4ed8\u3051\n* \u8907\u6570\u306estream\u3092\u540c\u6642\u306b\u5b9f\u884c(\u591a\u5206)\n\n\u304c\u5b9f\u73fe\u3067\u304d\u305f\u611f\u3058\u3067\u3059\u3002\n\n## \u5b9f\u88c5\u30e1\u30e2\n\nc: \u5e38\u306b\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u4ecb\u3059\u308b\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3002\n\n```c:src/lz4js.h#15\nLZ4JS_compressionContext_t* LZ4JS_createCompressionContext(LZ4F_blockSizeID_t blockSizeID, LZ4F_blockMode_t blockMode, LZ4F_contentChecksum_t contentChecksum, unsigned int compressionLevel);\nLZ4F_decompressionContext_t* LZ4JS_createDecompressionContext();\nvoid LZ4JS_freeCompressionContext(LZ4JS_compressionContext_t* cctxPtr);\nvoid LZ4JS_freeDecompressionContext(LZ4F_decompressionContext_t* dctxPtr);\nint LZ4JS_compressBegin(LZ4JS_compressionContext_t* cctxPtr);\nint LZ4JS_compressUpdate(LZ4JS_compressionContext_t* cctxPtr);\nint LZ4JS_compressEnd(LZ4JS_compressionContext_t* cctxPtr);\nint LZ4JS_decompress(LZ4F_decompressionContext_t* dctxPtr);\n```\n\njs: \u8fd4\u3063\u3066\u304d\u305f\u30dd\u30a4\u30f3\u30bf\u3092\u30ad\u30fc\u306b\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3002\n\n```js:src/post.js#69\nfunction BaseCompressor(options) {\n  this.options = assign({}, defaultCompressOptions, options);\n  this.cctxPtr = _LZ4JS_createCompressionContext(/* ...\u4e2d\u7565... */); // \u30dd\u30a4\u30f3\u30bf\u8fd4\u3063\u3066\u304f\u308b\n  if (!this.cctxPtr) throw new Error('LZ4JS_createCompressionContext');\n  LZ4JS_instances[this.cctxPtr] = this; // \u30dd\u30a4\u30f3\u30bf\u3092\u30ad\u30fc\u306b\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\n  this.$error = null;\n}\n```\n\njs: \u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u3001\u4eca\u56de\u306f\u30d0\u30a4\u30c8\u5217`src`\u3068\u9577\u3055`srcSize`\u3092\u7528\u610f\u3057\u3066C\u5074\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3002\n\n```js:src/post.js#146\nCompressStream.prototype['_transform'] = function(chunk, encoding, callback) {\n  try {\n    /* ...\u4e2d\u7565... */\n    for (offset = 0; offset < chunk.length; offset += BUF_SIZE) {\n      this.srcSize = Math.min(chunk.length - offset, BUF_SIZE);\n      this.src = chunk.slice(offset, offset + this.srcSize);\n      this.compressUpdate(); // \u4ee5\u4e0b\u53c2\u7167\n    }\n    callback();\n  } catch (error) {\n    callback(error);\n  }\n};\n```\n\n```js:src/post.js#86\nBaseCompressor.prototype.compressUpdate = function(first_argument) {\n  _LZ4JS_compressUpdate(this.cctxPtr) || this.cleanup();\n};\n```\n\nc: `LZ4JS_read`\u3067js\u304b\u3089\u5165\u529b\u3092\u884c\u3046(\u81ea\u4f5c`fread`\u7684\u306a\u3084\u3064\u3001\u4ee5\u4e0b\u53c2\u7167)\u3002\n\n```c:src/lz4js.c#69\nint LZ4JS_compressUpdate(LZ4JS_compressionContext_t* cctxPtr) {\n  size_t n = LZ4F_compressUpdate(cctxPtr->cctx, dst, dstMaxSize, src, LZ4JS_read(cctxPtr, src, BUF_SIZE), NULL);\n  if (LZ4JS_validate(cctxPtr, n)) {\n    LZ4JS_write(cctxPtr, dst, n);\n    return 1;\n  }\n  return 0;\n}\n```\n\nc: `EM_ASM_INT`\u3092\u4f7f\u3063\u3066js\u5074\u306e\u30b3\u30fc\u30c9\u306b\u30ad\u30fc`ptr`\u3068\u30d0\u30a4\u30c8\u5217\u306e\u5148\u982d\u4f4d\u7f6e`buf`\u3068\u6700\u5927\u30b5\u30a4\u30ba`size`\u3092\u9001\u308b\u3002\n\n```c:src/lz4js.c#14\nsize_t LZ4JS_read(void* ptr, char* buf, size_t size) {\n  return EM_ASM_INT({return LZ4JS_read($0, $1, $2)}, ptr, buf, size);\n}\n```\n\njs: \u30ad\u30fc\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53c2\u7167\u3057\u3066\u3001\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b`$read`\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3002\n\n```js:src/post.js#3\nfunction LZ4JS_read(id, srcPtr, size) {\n  return LZ4JS_instances[id].$read(srcPtr, size);\n}\n```\n\njs: emscripten\u4e0a\u306e\u30e1\u30e2\u30ea`HEAPU8`\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u3080\u3002\n\n```js:src/post.js#136\nCompressStream.prototype.$read = function(srcPtr, size) {\n  HEAPU8.set(new Uint8Array(this.src.buffer, this.src.byteOffset, this.srcSize), srcPtr);\n  return this.srcSize;\n};\n```\n\nc: \u3059\u308b\u3068\u3001`LZ4F_compressUpdate`\u547c\u3073\u51fa\u3057\u6642\u70b9\u3067\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3002`LZ4JS_validate`\u3001`LZ4JS_write`\u3082\u540c\u69d8\u306bjs\u5074\u3068\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u3002\n\n```c:src/lz4js.c#69\nint LZ4JS_compressUpdate(LZ4JS_compressionContext_t* cctxPtr) {\n  size_t n = LZ4F_compressUpdate(cctxPtr->cctx, dst, dstMaxSize, src, LZ4JS_read(cctxPtr, src, BUF_SIZE), NULL);\n  if (LZ4JS_validate(cctxPtr, n)) {\n    LZ4JS_write(cctxPtr, dst, n);\n    return 1;\n  }\n  return 0;\n}\n```\n\n## \u307e\u3068\u3081\n\n`EM_ASM`\u3001`HEAPU8`\u3084\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u76f4\u63a5\u5229\u7528\u3057\u3066\u30a2\u30af\u30ed\u30d0\u30c6\u30a3\u30c3\u30af\u306bjs\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3061\u306a\u307f\u306b\u3001js\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u306a\u306e\u3067c\u5074\u306e\u914d\u5217\u306fstream\u3054\u3068\u306b\u4f5c\u3089\u306a\u3044\u3067\u5171\u6709\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\n", "tags": ["Emscripten", "JavaScript", "Node.js"]}