{"context": "\u5c11\u3057\u53e4\u3044\u3067\u3059\u304c\u3001Rob Pike\u306e\u4e26\u884c\u51e6\u7406\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u306e\u30d3\u30c7\u30aa\u3067\u53d6\u308a\u4e0a\u3052\u3089\u308c\u305f\u30b3\u30fc\u30c9\u307e\u3068\u3081\u3067\u3059\u3002\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3067\u898b\u308c\u307e\u3059\u3002\n\nGenerator \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\ngenerator.go\npackage main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n    \"runtime\"\n)\n\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    rand.Seed(time.Now().UnixNano())\n\n    c := boring(\"boring!\") // Function returning a channel.\n    for i := 0; i < 5; i++ {\n        fmt.Printf(\"You say: %q\\n\", <-c)\n    }\n    fmt.Println(\"You're boring: I'm leaving.\")\n}\n\nfunc boring(msg string) <-chan string {\n    c := make(chan string)\n    go func() { // We launch the goroutine from inside the function.\n        for i := 0; ; i++ {\n            c <- fmt.Sprintf(\"%s %d\", msg, i)\n            time.Sleep(time.Duration(rand.Intn(10)) * time.Second)\n        }\n\n    }()\n    return c // Return the channel to the caller.\n}\n\n\nchannel\u306f\u30d5\u30a1\u30fc\u30b9\u30c8\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u306e\u3067\u3001\u95a2\u6570\u306e\u5f15\u6570\u3084\u3001\u623b\u308a\u5024\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\nboring\u95a2\u6570\u5185\u3067\u30c1\u30a7\u30cd\u30eb\u3092\u4f5c\u308a\u3001go\u30eb\u30fc\u30c1\u30f3\u3092\u4f7f\u7528\u3057\u3001for\u6587\u306e\u7121\u9650\u30eb\u30fc\u30d7\u5185\u3067\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u306b\u9001\u4fe1\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c1\u30a7\u30cd\u30eb\u306f\u540c\u671f\u51e6\u7406\u306a\u306e\u3067\u3001\u30e1\u30a4\u30f3\u5074\u3067\u53d7\u4fe1\u3055\u308c\u308b\u307e\u3067\u3001boring\u95a2\u6570\u306f\u30d6\u30ed\u30c3\u30af\u3055\u308c\u307e\u3059\u3002\nboring\u95a2\u6570\u304b\u3089\u3001\u30c1\u30e3\u30cd\u30eb\u3092\u8fd4\u5374\u3057\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u5074\u3078\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u4e71\u6570\u3067\u4e00\u5b9a\u6642\u9593wait\u51e6\u7406\u3092\u5165\u308c\u3001\u9001\u53d7\u4fe1\u304c\u540c\u671f\u3067\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u5206\u304b\u308a\u3084\u3059\u304f\u3057\u3066\u307e\u3059\u3002\n\n\ngenerator2.go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    rand.Seed(time.Now().UnixNano())\n\n    joe := boring(\"Joe\") // Function returning a channel.\n    ann := boring(\"Ann\") // Function returning a channel.\n    for i := 0; i < 5; i++ {\n        fmt.Printf(\"You say: %q\\n\", <-joe)\n        fmt.Printf(\"You say: %q\\n\", <-ann)\n    }\n    fmt.Println(\"You're boring: I'm leaving.\")\n}\n\nfunc boring(msg string) <-chan string {\n// \u540c\u3058\u306a\u306e\u3067\u7701\u7565\n\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001boring\u95a2\u6570\u30922\u56de\u547c\u3073\u51fa\u3057\u3001\uff12\u3064\u306e\u30c1\u30e3\u30cd\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002boring\u95a2\u6570\u3092\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u306e\u3053\u3068\u3067\u3059\u3002\nJoe\u3068Ann\u304c\u30da\u30a2\u3067\u4ea4\u4e92\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002Ann\u306e\u65b9\u304c\u5148\u306b\u51e6\u7406\u3092\u7d42\u3048\u3066\u3082\u3001Joe\u306e\u51e6\u7406\u3092\u5f85\u3061\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001\u72ec\u7acb\u3057\u3066\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n\nMultiplexing \u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\n\nmultiplexing.go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    rand.Seed(time.Now().UnixNano())\n\n    c := fanIn(boring(\"Joe\"), boring(\"Ann\"))\n    for i := 0; i < 10; i++ {\n        fmt.Printf(\"You say: %q\\n\", <-c)\n    }\n    fmt.Println(\"You're boring: I'm leaving.\")\n}\n\nfunc fanIn(input1, input2 <-chan string) <-chan string {\n    c := make(chan string)\n    go func() {\n        for {\n            c <- <-input1\n        }\n    }()\n    go func() {\n        for {\n            c <- <-input2\n        }\n    }()\n    return c\n}\n\nfunc boring(msg string) <-chan string {\n// \u540c\u3058\u306a\u306e\u3067\u7701\u7565\n\n\nboring\u95a2\u6570\u306e\u30c1\u30e3\u30cd\u30eb\u3092\uff12\u3064\u5f15\u6570\u306b\u53d6\u308bfanIn\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u307e\u3059\u3002\n\u5185\u90e8\u3067go\u30eb\u30fc\u30c1\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u5225\u306ego\u30eb\u30fc\u30c1\u30f3\u3067\u72ec\u7acb\u3057\u3066\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a\u3001\u5148\u306b\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u65b9\u304b\u3089\u3001\u5171\u901a\u306e\u30c1\u30a7\u30cd\u30ebc\u306b\u9001\u4fe1\u3059\u308b\u305f\u3081\u3001Joe\u3068Ann\u304c\u72ec\u7acb\u3057\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n\u51fa\u529b\u7d50\u679c\nYou say: \"Joe 0\"\nYou say: \"Ann 0\"\nYou say: \"Joe 1\"\nYou say: \"Ann 1\"\nYou say: \"Ann 2\"\nYou say: \"Ann 3\"\nYou say: \"Ann 4\"\nYou say: \"Joe 2\"\nYou say: \"Joe 3\"\nYou say: \"Ann 5\"\nYou're boring: I'm leaving.\n\nProcess finished with exit code 0\n\n\n\nSelect \u30bb\u30ec\u30af\u30c8\n\nselect.go\nfunc fanIn(input1, input2 <-chan string) <-chan string {\n    c := make(chan string)\n\n    go func() {\n        for {\n            select {\n            case s := <-input1:\n                c <- s\n            case s := <-input2:\n                c <- s\n            }\n        }\n    }()\n\n    return c\n}\n\n\n\u5148\u307b\u3069\u306eMultiplexing\u3092\u3001select\u3067\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u540c\u3058\u52d5\u304d\u306b\u306a\u308a\u307e\u3059\u3002\ngo\u30eb\u30fc\u30c1\u30f31\u3064\u3067\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u307e\u3059\u3002\n\n\nQuit? \u505c\u6b62\uff1f\n\nquit.go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    rand.Seed(time.Now().UnixNano())\n\n    quit := make(chan bool)\n    c := boring(\"Joe\", quit)\n\n    for i := rand.Intn(10); i>=0; i-- {\n        fmt.Println(<-c)\n    }\n\n    quit <- true // send a quit signal after a certain amount of time.\n}\n\nfunc boring(msg string, quit <-chan bool) <-chan string {\n    c := make(chan string)\n    go func() { // We launch the goroutine from inside the function.\n        for i := 0; ; i++ {\n            select {\n            case c <- fmt.Sprintf(\"%s %d\", msg, i):\n            case <-quit:\n                return // exit the for-loop.\n            }\n        }\n    }()\n    return c // Return the channel to the caller.\n}\n\n\n\u30e1\u30a4\u30f3\u95a2\u6570\u304b\u3089\u30c1\u30a7\u30cd\u30eb\u3092boring\u95a2\u6570\u306b\u6e21\u3057\u3066\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u304b\u3089\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308a\u3001boring\u95a2\u6570\u3092\u505c\u6b62\u3055\u305b\u308b\u4f8b\u3067\u3059\u3002\n\u3082\u3063\u3068\u3082\u3053\u306e\u4f8b\u3067\u306f\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u3082\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u6b21\u306e\u4f8b\u306b\u3066\u3002\u3002\u3002\n\n\nRoundTrip \u30e9\u30a6\u30f3\u30c9\u30c8\u30ea\u30c3\u30d7\n\ncleanup.go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    rand.Seed(time.Now().UnixNano())\n\n    quit := make(chan bool)\n    c := boring(\"Joe\", quit)\n\n    for i := rand.Intn(10); i >= 0; i-- {\n        fmt.Println(<-c)\n    }\n\n    quit <- true // send a quit signal after a certain amount of time.\n\n    fmt.Printf(\"Joe is done. %t\", <-quit)\n}\n\nfunc boring(msg string, quit chan bool) <-chan string {\n    c := make(chan string)\n    go func() { // We launch the goroutine from inside the function.\n        for i := 0; ; i++ {\n            select {\n            case c <- fmt.Sprintf(\"%s %d\", msg, i):\n            case <-quit:\n                cleanup()\n                quit <- true\n                return // exit the for-loop.\n            }\n        }\n    }()\n    return c // Return the channel to the caller.\n}\n\nfunc cleanup() {\n    // do clean up tasks...\n}\n\n\nquit\u30c1\u30e3\u30cd\u30eb\u3092\u53cc\u65b9\u5411\u901a\u4fe1\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002boring\u95a2\u6570\u306b\u3066\u3001\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30ca\u30c3\u30d7\u51e6\u7406cleanup()\u3092\u3057\u3066\u304b\u3089\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3057\u3066\u307e\u3059\u3002\n\u5f8c\u7de8\u306f\u3053\u3061\u3089\n\u5c11\u3057\u53e4\u3044\u3067\u3059\u304c\u3001[Rob Pike\u306e\u4e26\u884c\u51e6\u7406\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u306e\u30d3\u30c7\u30aa](https://www.youtube.com/watch?v=f6kdp27TYZs)\u3067\u53d6\u308a\u4e0a\u3052\u3089\u308c\u305f\u30b3\u30fc\u30c9\u307e\u3068\u3081\u3067\u3059\u3002\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306e[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9]\n(https://github.com/adityamenon/Google-IO_2012_Go-Concurrency-Patterns)\u306f\u3053\u3061\u3089\u3067\u898b\u308c\u307e\u3059\u3002\n## Generator \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\n```go:generator.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n\t\"runtime\"\n)\n\nfunc main() {\n\truntime.GOMAXPROCS(runtime.NumCPU())\n\trand.Seed(time.Now().UnixNano())\n\n\tc := boring(\"boring!\") // Function returning a channel.\n\tfor i := 0; i < 5; i++ {\n\t\tfmt.Printf(\"You say: %q\\n\", <-c)\n\t}\n\tfmt.Println(\"You're boring: I'm leaving.\")\n}\n\nfunc boring(msg string) <-chan string {\n\tc := make(chan string)\n\tgo func() { // We launch the goroutine from inside the function.\n\t\tfor i := 0; ; i++ {\n\t\t\tc <- fmt.Sprintf(\"%s %d\", msg, i)\n\t\t\ttime.Sleep(time.Duration(rand.Intn(10)) * time.Second)\n\t\t}\n\n\t}()\n\treturn c // Return the channel to the caller.\n}\n```\n\n`channel`\u306f\u30d5\u30a1\u30fc\u30b9\u30c8\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u306e\u3067\u3001\u95a2\u6570\u306e\u5f15\u6570\u3084\u3001\u623b\u308a\u5024\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\nboring\u95a2\u6570\u5185\u3067\u30c1\u30a7\u30cd\u30eb\u3092\u4f5c\u308a\u3001go\u30eb\u30fc\u30c1\u30f3\u3092\u4f7f\u7528\u3057\u3001for\u6587\u306e\u7121\u9650\u30eb\u30fc\u30d7\u5185\u3067\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u306b\u9001\u4fe1\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c1\u30a7\u30cd\u30eb\u306f\u540c\u671f\u51e6\u7406\u306a\u306e\u3067\u3001\u30e1\u30a4\u30f3\u5074\u3067\u53d7\u4fe1\u3055\u308c\u308b\u307e\u3067\u3001boring\u95a2\u6570\u306f\u30d6\u30ed\u30c3\u30af\u3055\u308c\u307e\u3059\u3002\nboring\u95a2\u6570\u304b\u3089\u3001\u30c1\u30e3\u30cd\u30eb\u3092\u8fd4\u5374\u3057\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u5074\u3078\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u4e71\u6570\u3067\u4e00\u5b9a\u6642\u9593wait\u51e6\u7406\u3092\u5165\u308c\u3001\u9001\u53d7\u4fe1\u304c\u540c\u671f\u3067\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u5206\u304b\u308a\u3084\u3059\u304f\u3057\u3066\u307e\u3059\u3002\n***\n```go:generator2.go\nfunc main() {\n\truntime.GOMAXPROCS(runtime.NumCPU())\n\trand.Seed(time.Now().UnixNano())\n\n\tjoe := boring(\"Joe\") // Function returning a channel.\n\tann := boring(\"Ann\") // Function returning a channel.\n\tfor i := 0; i < 5; i++ {\n\t\tfmt.Printf(\"You say: %q\\n\", <-joe)\n\t\tfmt.Printf(\"You say: %q\\n\", <-ann)\n\t}\n\tfmt.Println(\"You're boring: I'm leaving.\")\n}\n\nfunc boring(msg string) <-chan string {\n// \u540c\u3058\u306a\u306e\u3067\u7701\u7565\n```\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001boring\u95a2\u6570\u30922\u56de\u547c\u3073\u51fa\u3057\u3001\uff12\u3064\u306e\u30c1\u30e3\u30cd\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002boring\u95a2\u6570\u3092\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u306e\u3053\u3068\u3067\u3059\u3002\nJoe\u3068Ann\u304c\u30da\u30a2\u3067\u4ea4\u4e92\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002Ann\u306e\u65b9\u304c\u5148\u306b\u51e6\u7406\u3092\u7d42\u3048\u3066\u3082\u3001Joe\u306e\u51e6\u7406\u3092\u5f85\u3061\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001\u72ec\u7acb\u3057\u3066\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n***\n## Multiplexing \u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\n\n```go:multiplexing.go\nfunc main() {\n\truntime.GOMAXPROCS(runtime.NumCPU())\n\trand.Seed(time.Now().UnixNano())\n\n\tc := fanIn(boring(\"Joe\"), boring(\"Ann\"))\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Printf(\"You say: %q\\n\", <-c)\n\t}\n\tfmt.Println(\"You're boring: I'm leaving.\")\n}\n\nfunc fanIn(input1, input2 <-chan string) <-chan string {\n\tc := make(chan string)\n\tgo func() {\n\t\tfor {\n\t\t\tc <- <-input1\n\t\t}\n\t}()\n\tgo func() {\n\t\tfor {\n\t\t\tc <- <-input2\n\t\t}\n\t}()\n\treturn c\n}\n\nfunc boring(msg string) <-chan string {\n// \u540c\u3058\u306a\u306e\u3067\u7701\u7565\n```\n`boring`\u95a2\u6570\u306e\u30c1\u30e3\u30cd\u30eb\u3092\uff12\u3064\u5f15\u6570\u306b\u53d6\u308b`fanIn`\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u307e\u3059\u3002\n\u5185\u90e8\u3067go\u30eb\u30fc\u30c1\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u5225\u306ego\u30eb\u30fc\u30c1\u30f3\u3067\u72ec\u7acb\u3057\u3066\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a\u3001\u5148\u306b\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u65b9\u304b\u3089\u3001\u5171\u901a\u306e\u30c1\u30a7\u30cd\u30eb`c`\u306b\u9001\u4fe1\u3059\u308b\u305f\u3081\u3001Joe\u3068Ann\u304c\u72ec\u7acb\u3057\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n#### \u51fa\u529b\u7d50\u679c\n\n```bash\nYou say: \"Joe 0\"\nYou say: \"Ann 0\"\nYou say: \"Joe 1\"\nYou say: \"Ann 1\"\nYou say: \"Ann 2\"\nYou say: \"Ann 3\"\nYou say: \"Ann 4\"\nYou say: \"Joe 2\"\nYou say: \"Joe 3\"\nYou say: \"Ann 5\"\nYou're boring: I'm leaving.\n\nProcess finished with exit code 0\n```\n\n***\n## Select \u30bb\u30ec\u30af\u30c8\n\n```go:select.go\nfunc fanIn(input1, input2 <-chan string) <-chan string {\n\tc := make(chan string)\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase s := <-input1:\n\t\t\t\tc <- s\n\t\t\tcase s := <-input2:\n\t\t\t\tc <- s\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn c\n}\n```\n\u5148\u307b\u3069\u306eMultiplexing\u3092\u3001`select`\u3067\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u540c\u3058\u52d5\u304d\u306b\u306a\u308a\u307e\u3059\u3002\ngo\u30eb\u30fc\u30c1\u30f31\u3064\u3067\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u307e\u3059\u3002\n\n***\n## Quit? \u505c\u6b62\uff1f\n```go:quit.go\nfunc main() {\n\truntime.GOMAXPROCS(runtime.NumCPU())\n\trand.Seed(time.Now().UnixNano())\n\n\tquit := make(chan bool)\n\tc := boring(\"Joe\", quit)\n\n\tfor i := rand.Intn(10); i>=0; i-- {\n\t\tfmt.Println(<-c)\n\t}\n\n\tquit <- true // send a quit signal after a certain amount of time.\n}\n\nfunc boring(msg string, quit <-chan bool) <-chan string {\n\tc := make(chan string)\n\tgo func() { // We launch the goroutine from inside the function.\n\t\tfor i := 0; ; i++ {\n\t\t\tselect {\n\t\t\tcase c <- fmt.Sprintf(\"%s %d\", msg, i):\n\t\t\tcase <-quit:\n\t\t\t\treturn // exit the for-loop.\n\t\t\t}\n\t\t}\n\t}()\n\treturn c // Return the channel to the caller.\n}\n```\n\u30e1\u30a4\u30f3\u95a2\u6570\u304b\u3089\u30c1\u30a7\u30cd\u30eb\u3092boring\u95a2\u6570\u306b\u6e21\u3057\u3066\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u304b\u3089\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308a\u3001boring\u95a2\u6570\u3092\u505c\u6b62\u3055\u305b\u308b\u4f8b\u3067\u3059\u3002\n\u3082\u3063\u3068\u3082\u3053\u306e\u4f8b\u3067\u306f\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u3082\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u6b21\u306e\u4f8b\u306b\u3066\u3002\u3002\u3002\n\n***\n## RoundTrip \u30e9\u30a6\u30f3\u30c9\u30c8\u30ea\u30c3\u30d7\n```go:cleanup.go\nfunc main() {\n\truntime.GOMAXPROCS(runtime.NumCPU())\n\trand.Seed(time.Now().UnixNano())\n\n\tquit := make(chan bool)\n\tc := boring(\"Joe\", quit)\n\n\tfor i := rand.Intn(10); i >= 0; i-- {\n\t\tfmt.Println(<-c)\n\t}\n\n\tquit <- true // send a quit signal after a certain amount of time.\n\n\tfmt.Printf(\"Joe is done. %t\", <-quit)\n}\n\nfunc boring(msg string, quit chan bool) <-chan string {\n\tc := make(chan string)\n\tgo func() { // We launch the goroutine from inside the function.\n\t\tfor i := 0; ; i++ {\n\t\t\tselect {\n\t\t\tcase c <- fmt.Sprintf(\"%s %d\", msg, i):\n\t\t\tcase <-quit:\n\t\t\t\tcleanup()\n\t\t\t\tquit <- true\n\t\t\t\treturn // exit the for-loop.\n\t\t\t}\n\t\t}\n\t}()\n\treturn c // Return the channel to the caller.\n}\n\nfunc cleanup() {\n\t// do clean up tasks...\n}\n```\n`quit`\u30c1\u30e3\u30cd\u30eb\u3092\u53cc\u65b9\u5411\u901a\u4fe1\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002boring\u95a2\u6570\u306b\u3066\u3001\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30ca\u30c3\u30d7\u51e6\u7406`cleanup()`\u3092\u3057\u3066\u304b\u3089\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3057\u3066\u307e\u3059\u3002\n\n[\u5f8c\u7de8\u306f\u3053\u3061\u3089](http://qiita.com/tfutada/items/dc8db894ac270a79ef2b)\n", "tags": ["Go", "concurrent", "Design", "pattern"]}