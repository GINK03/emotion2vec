{"context": " More than 1 year has passed since last update.Originally posted in http://aespinosa.github.io/blog/2015-05-16-fast-and-reproducible-ruby-workflows.html\nIf you're doing development and cloning ruby based repositories, sometimes you\nwant to cleanup your ruby gems spec or vendor/bundle directory.  It is important\nto do a clean 'bundle install' so you won't experience \"it works on my machine\"\nsyndrome.\nHowever, downloading gems from rubygems.org all the time is not the best\nexperience in the world if you have a large Gemfile or rubygems.org is down\nitself.\nJava developers have had this feature in maven with 'proxy repositories'.\nFortunately, you can do this same thing with Sonatype\nNexus.  Following the described documentation on\nproxy gem repositories1, Have something like this configured for\nrubygems.org:\nRepository ID: rubygems\nRepository Name: rubygems.org\nRepository Type: proxy\nRepository Policy: undefined\nRepository Format: rubygems\nContained in groups: \n\nRemote URL: https://rubygems.org\n\nLikewise, you can have this in your ~/.gemrc\n---\n:sources:\n- http://127.0.0.1:8081/nexus/content/repositories/rubygems/\n\nAnd ~/.bundle/config\n---\nBUNDLE_MIRROR__HTTPS://RUBYGEMS__ORG/: http://nexus.dev:8081/nexus/content/repositories/rubygems/\n\nNow, all gem downloads will be cached in nexus. The next time you do a 'git\nclean -fdx && bundle install', you don't have to wait to download the Internet\nto get your Ruby builds working.  This setup is useful especially for CI servers\nlike Jenkins so that the next subsequent build times will be siginificantly\nless.\n\n\n\n\nhttp://books.sonatype.com/nexus-book/reference/ruby-proxying-registries.html\u00a0\u21a9\n\n\n\nOriginally posted in http://aespinosa.github.io/blog/2015-05-16-fast-and-reproducible-ruby-workflows.html\n\nIf you're doing development and cloning ruby based repositories, sometimes you\nwant to cleanup your ruby gems spec or vendor/bundle directory.  It is important\nto do a clean 'bundle install' so you won't experience \"it works on my machine\"\nsyndrome.\n\nHowever, downloading gems from rubygems.org all the time is not the best\nexperience in the world if you have a large Gemfile or rubygems.org is down\nitself.\n\nJava developers have had this feature in maven with 'proxy repositories'.\nFortunately, you can do this same thing with [Sonatype\nNexus](https://sonatype.org/nexus).  Following the described documentation on\nproxy gem repositories[^1], Have something like this configured for\nrubygems.org:\n\n\n```\nRepository ID: rubygems\nRepository Name: rubygems.org\nRepository Type: proxy\nRepository Policy: undefined\nRepository Format: rubygems\nContained in groups: \n\nRemote URL: https://rubygems.org\n```\n\nLikewise, you can have this in your ~/.gemrc\n\n```\n---\n:sources:\n- http://127.0.0.1:8081/nexus/content/repositories/rubygems/\n```\n\nAnd ~/.bundle/config\n\n```\n---\nBUNDLE_MIRROR__HTTPS://RUBYGEMS__ORG/: http://nexus.dev:8081/nexus/content/repositories/rubygems/\n```\n\nNow, all gem downloads will be cached in nexus. The next time you do a 'git\nclean -fdx && bundle install', you don't have to wait to download the Internet\nto get your Ruby builds working.  This setup is useful especially for CI servers\nlike Jenkins so that the next subsequent build times will be siginificantly\nless.\n\n[^1]: <http://books.sonatype.com/nexus-book/reference/ruby-proxying-registries.html>\n", "tags": ["Ruby", "proxy"]}