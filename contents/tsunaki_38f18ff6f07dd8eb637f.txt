{"context": " More than 1 year has passed since last update.\u30e9\u30b8\u30b3\u30f3\u64cd\u4f5c\u3067\u4f5c\u6210\u3057\u305fWEB\u30b5\u30fc\u30d3\u30b9\u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9JAVA\u3067\u9023\u643a\u3059\u308b\u81ea\u4f5c\u306e\u30b5\u30f3\u30d7\u30eb\u3002\n\u64cd\u4f5c\u306b\u306fBackbone.js\u306a\u3069\u3067\u76f4\u63a5REST\u5b9f\u88c5\u3057\u3066\u3082\u3088\u304b\u3063\u305f\u304c\u3001\u4eca\u5f8c\u30a2\u30fc\u30e0\u306e\u53d6\u308a\u4ed8\u3051\u306a\u3069\u62e1\u5f35\u3059\u308b\u305f\u3081JAVA\u3067API\u5316\u3057\u305f\u3002\n(GIT : https://github.com/tsunaki00/radiocontrol)\n\u3010\u30a4\u30e1\u30fc\u30b8\u3011\n\n\n\u4f7f\u7528\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\n\u30fbhttpcore-4.2.2.jar\n\u30fbhttpclient-4.2.3.jar\n\u30fbjsonic-1.2.11.jar\n\u30fbs2-tiger-2.4.44.jar\uff08\u6c4e\u7528Bean\u3067\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001commons-beanutils\u306a\u3069\u3067\u3082OK)\n\n\n\u968e\u5c64\n org.tsunaruts.radiocontrolfw\n     \u2514\u2500 webservice\n             \u251c factory\n             \u2502  \u251c\u2500 impl\n             \u2502  \u2502    \u2514\u2500DefaultParserFactory.java\n             \u2502  \u2514\u2500 AbstractParserFactory.java\n             \u251c methods\n             \u2502    \u251c\u2500 AbstractWebMethod.java\n             \u2502    \u251c\u2500 GET.java\n             \u2502    \u2514\u2500 POST.java\n             \u251c parser\n             \u2502  \u251c\u2500 impl\n             \u2502  \u2502    \u2514\u2500JsonParser.java\n             \u2502  \u2514\u2500 AbstractParser.java\n             \u2514\u2500 WebService.java\n\n\u307e\u305a\u5916\u90e8\u304b\u3089\u547c\u3073\u51fa\u3057\u7528\u306e\u30af\u30e9\u30b9\n\u3010WebService.java\u3011\npackage org.tsunaruts.radiocontrolfw.webservice;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport org.tsunaruts.radiocontrolfw.webservice.methods.GET;\nimport org.tsunaruts.radiocontrolfw.webservice.methods.POST;\n\n/**\n * <pre>\n * WEB\u30b5\u30fc\u30d3\u30b9\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u767a\u884c\u3059\u308b\u30af\u30e9\u30b9\n * \u203b\u203bDI\u30b3\u30f3\u30c6\u30ca\u306a\u3069\u3067URL\u3092\u5916\u90e8\u304b\u3089\u8a2d\u5b9a\u3059\u308b\n * </pre>\n */\npublic class WebService {\n    /** URL */\n    public String url;\n    /**\n     * \n     * @param url\n     */\n    public void initialize(String url) {\n        this.url = url;\n    }\n\n    /**\n     * WEB\u30b5\u30fc\u30d3\u30b9\u3092\u5b9f\u884c\u3057\u307e\u3059 \n     *  \uff1cGET \u30e1\u30bd\u30c3\u30c9\uff1e\n     * @return \u5b9f\u884c\u7d50\u679cEntityList\n     */\n    public GET get(String path) {\n        return new GET(url, path);\n    }\n    /**\n     * WEB\u30b5\u30fc\u30d3\u30b9\u3092\u5b9f\u884c\u3057\u307e\u3059 \n     *  \uff1cPOST \u30e1\u30bd\u30c3\u30c9\uff1e\n     * @return \u5b9f\u884c\u7d50\u679cEntity\n     * @throws IOException \n     * @throws ParseException \n     */\n    public POST post(String path) {\n        return new POST(url, path);\n    }\n}\n\n\u6b21\u306bWEB\u30b5\u30fc\u30d3\u30b9\u306b\u5bfe\u5fdc\u3057\u305f\u30e1\u30bd\u30c3\u30c9\n\u3010AbstractWebMethod.java\u3011\npackage org.tsunaruts.radiocontrolfw.webservice.methods;\n\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.util.EntityUtils;\nimport org.seasar.framework.beans.util.BeanMap;\nimport org.seasar.framework.exception.IORuntimeException;\nimport org.seasar.framework.exception.ParseRuntimeException;\nimport org.tsunaruts.radiocontrolfw.webservice.factory.AbstractParserFactory;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.AbstractParser;\n\n/**\n * <pre>\n * WEB\u30e1\u30bd\u30c3\u30c9\u306e\u62bd\u8c61\u30af\u30e9\u30b9\n * </pre>\n */\npublic abstract class AbstractWebMethod {\n    /** WEB\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u30db\u30b9\u30c8\u540d   http://localhost */\n    protected String host;\n    /** WEB\u30b5\u30fc\u30d3\u30b9 path   /action */\n    protected String path;\n\n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     * @param host host\u3092\u8a2d\u5b9a\u3057\u307e\u3059 Examples : http://localhost\n     * @param path path\u3092\u8a2d\u5b9a      Examples : /action\n     */\n    public AbstractWebMethod(String host, String path) {\n        this.host = host;\n        this.path = path;\n    }\n\n    /**\n     * \u5b50\u30af\u30e9\u30b9\u3067HttpUriRequest\u3092\u751f\u6210\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @return HttpUriRequest\n     * @throws URISyntaxException URL\u306e\u7d44\u307f\u7acb\u3066\u5931\u6557\n     */\n    protected abstract HttpUriRequest getHttpUriRequest(BeanMap parameter) throws URISyntaxException;\n    /**\n     * @see getStringBodyResult\n     */\n    public String getStringBodyResult(){\n        return getStringBodyResult(null);\n    }\n    /**\n     * REST\u306e\u623b\u308a\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @return REST\u30ec\u30b9\u30dd\u30f3\u30b9\n     */\n    public String getStringBodyResult(BeanMap parameter) {\n        try {\n            HttpUriRequest request = getHttpUriRequest(parameter);\n            List<String> list = execute(request, String.class, false);\n            if (list != null && !list.isEmpty()) {\n                return list.get(0);\n            }\n            return null;\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        } catch (ParseException e) {\n            throw new ParseRuntimeException(e);\n        } catch (IOException e) {\n            throw new IORuntimeException(e);\n        }\n    }\n    public <T> T getSingleResult(Class<T> returnType) {\n        return getSingleResult(returnType, null);\n    }\n    /**\n     * REST\u306e\u623b\u308a\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n     * @param returnType \u623b\u308a\u5024\u306e\u578b\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @return REST\u30ec\u30b9\u30dd\u30f3\u30b9\n     */\n    public <T> T getSingleResult(Class<T> returnType, BeanMap parameter) {\n        try {\n            HttpUriRequest request = getHttpUriRequest(parameter);\n            List<T> list = execute(request, returnType, false);\n            if (list != null && !list.isEmpty()) {\n                return list.get(0);\n            }\n            return null;\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        } catch (ParseException e) {\n            throw new ParseRuntimeException(e);\n        } catch (IOException e) {\n            throw new IORuntimeException(e);\n        }\n    }\n    /**\n     * \n     * @return\n     */\n    public <T> List<T> getResultList(Class<T> returnType) {\n        return getResultList(returnType, null);\n    }\n    /**\n     * REST\u306e\u623b\u308a\u5024\u3092List\u8fd4\u3057\u307e\u3059\u3002\n     * @param returnType \u623b\u308a\u5024\u306e\u578b\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @return List&lt;REST\u30ec\u30b9\u30dd\u30f3\u30b9&gt;\n     */\n    public <T> List<T> getResultList(Class<T> returnType, BeanMap parameter) {\n        try {\n            HttpUriRequest request = getHttpUriRequest(parameter);\n            List<T> list = execute(request, returnType, true);\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n            return null;\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        } catch (ParseException e) {\n            throw new ParseRuntimeException(e);\n        } catch (IOException e) {\n            throw new IORuntimeException(e);\n        }\n    }\n    /**\n     * \u5916\u90e8WEB\u30b5\u30fc\u30d3\u30b9\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\n     * @param request \u30ea\u30af\u30a8\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n     * @param returnType \u623b\u308a\u5024\u578b\n     * @param isList \u623b\u308a\u5024\u306e\u7a2e\u985e\n     * @return REST\u30ec\u30b9\u30dd\u30f3\u30b9\n     * @throws ParseException \u30ec\u30b9\u30dd\u30f3\u30b9\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\n     * @throws IOException \u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u6642\u306e\u4f8b\u5916\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T> List<T> execute(HttpUriRequest request, Class<T> returnType, boolean isList) throws ParseException, IOException {\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n        HttpResponse response = httpClient.execute(request);\n        HttpEntity httpEntity = response.getEntity();\n        String body = EntityUtils.toString(httpEntity, \"UTF-8\");\n        AbstractParser parser = AbstractParserFactory.getParserFactory().getParser(httpEntity.getContentType().getValue());\n        if (returnType == String.class) {\n            List<T> ret = new ArrayList<>();\n            ret.add((T) body);\n            return ret;\n        }\n        if (parser == null) {\n            return null;\n        }\n        if (isList) {\n            return parser.parseList(body, returnType);\n        } else {\n            List<T> ret = new ArrayList<>();\n            ret.add(parser.parse(body, returnType));\n            return ret;\n        }\n    }\n    /**\n     * @see AbstractWebMethod#uriBuild(BeanMap)\n     * @return URIBuilder\n     */\n    protected URIBuilder uriBuild() {\n        return uriBuild(null);\n    }\n    /**\n     * URL\u7d44\u307f\u7acb\u3066\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf(GET\u306e\u307f)\n     * @return URIBuilder\n     */\n    protected URIBuilder uriBuild(BeanMap parameter) {\n        URIBuilder builder = new URIBuilder();\n        String scheme = \"http://\";\n        if (host.indexOf(\"://\") > -1) {\n            scheme = host.substring(0, host.indexOf(\"://\"));\n            host   = host.substring(host.indexOf(\"://\") + \"://\".length());\n        }\n        builder.setScheme(scheme);\n        builder.setHost(host);\n        builder.setPath(path);\n        if (parameter != null) {\n            Iterator<Map.Entry<String, Object>> ite = parameter.entrySet().iterator();\n            while(ite.hasNext()) {\n                Map.Entry<String, Object> entry = ite.next();\n                builder.setParameter(entry.getKey(), (String) entry.getValue());\n            }\n        }\n        return builder;\n    }\n}\n\n\n\u5404\u30ea\u30af\u30a8\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\uff08\u3068\u308a\u3042\u3048\u305aGET\u3068POST)\n\u3010GET.java\u3011\npackage org.tsunaruts.radiocontrolfw.webservice.methods;\n\nimport java.net.URISyntaxException;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.seasar.framework.beans.util.BeanMap;\n\n/**\n * <pre>\n *  GET\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u88c5\u3059\u308b\n * </pre>\n */\npublic class GET extends AbstractWebMethod {\n\n    public GET(String host, String path) {\n        super(host, path);\n    }\n\n    /* (non-Javadoc) */\n    @Override\n    protected HttpUriRequest getHttpUriRequest(BeanMap parameter)\n                                               throws URISyntaxException {\n        return new HttpGet(uriBuild(parameter).build().toString());\n    }\n}\n\n\n\u3010POST.java\u3011\npackage org.tsunaruts.radiocontrolfw.webservice.methods;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.seasar.framework.beans.util.BeanMap;\n\n/**\n * <pre>\n *  POST\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u88c5\u3059\u308b\n * </pre>\n */\npublic class POST  extends AbstractWebMethod {\n\n    public POST(String host, String path) {\n        super(host, path);\n    }\n\n    /* (non-Javadoc) */\n    @Override\n    protected HttpUriRequest getHttpUriRequest(BeanMap parameter)\n                                               throws URISyntaxException {\n        try {\n            URIBuilder builder = uriBuild();\n            List<NameValuePair> params = new ArrayList<NameValuePair>();\n            if (parameter != null) {\n                Iterator<Map.Entry<String, Object>> ite = parameter.entrySet().iterator();\n                while(ite.hasNext()) {\n                    Map.Entry<String, Object> entry = ite.next();\n                    params.add(new BasicNameValuePair(entry.getKey(), (String) entry.getValue()));\n                }\n            }\n            HttpPost post = new HttpPost(builder.build().toString());\n            post.setEntity(new UrlEncodedFormEntity(params));\n            return post;\n        } catch (UnsupportedEncodingException e) {\n            throw new URISyntaxException(parameter.toString(), host + path);\n        }\n    }\n}\n\n\u6700\u5f8c\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u89e3\u6790\u5468\u308a\u306e\u30af\u30e9\u30b9\nSOAP\u5bfe\u5fdc\u3092\u8003\u3048\u3066\u3001AbstractFactory\u3067\u5b9f\u88c5\n\u3010AbstractParserFactory.java\u3011\npackage org.tsunaruts.radiocontrolfw.webservice.factory;\n\nimport org.tsunaruts.radiocontrolfw.webservice.parser.AbstractParser;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.impl.JsonParser;\n\n/**\n * <pre>\n * contentType\u3092\u307f\u3066Parser\u3092\u751f\u6210\u3059\u308bFactory\u30af\u30e9\u30b9\n * </pre>\n */\npublic abstract class AbstractParserFactory {\n\n    /**\n     * \u74b0\u5883\u306b\u5408\u308f\u305b\u3066Factory\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\n     * @return AbstractParserFactory\n     */\n    public static AbstractParserFactory getParserFactory() {\n        return new DefaultParserFactory();\n    }\n\n    /**\n     * contentType\u3092\u307f\u3066Parser\u3092\u751f\u6210\u3057\u307e\u3059\n     * @param contentType contentType\n     * @return\n     */\n    public abstract AbstractParser getParser(String contentType);\n}\n\n\npackage org.tsunaruts.radiocontrolfw.webservice.factory.impl;\n\nimport org.tsunaruts.radiocontrolfw.webservice.factory.AbstractParserFactory;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.AbstractParser;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.impl.JsonParser;\n\n/**\n * <pre>\n *  \u30c7\u30d5\u30a9\u30eb\u30c8\u306eFactory\u30af\u30e9\u30b9\n * </pre>\n *\n */\npublic class DefaultParserFactory extends AbstractParserFactory {\n\n    /* (non-Javadoc) */\n    @Override\n    public AbstractParser getParser(String contentType) {\n        // JSON\u306e\u5834\u5408\n        if (contentType != null && contentType.indexOf(\"application/json\") > -1) {\n            return new JsonParser();\n        }\n        // SOAP, HTML, TEXT\u306e\u5834\u5408\n        return null;\n    }\n\n}\n\n\u3010AbstractParser.java\u3011\npackage org.tsunaruts.radiocontrolfw.webservice.parser;\n\nimport java.util.List;\n\n/**\n * <pre>\n * \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u89e3\u6790\u30af\u30e9\u30b9\n * </pre>\n */\npublic interface AbstractParser {\n    /**\n     * \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u89e3\u6790\u3057\u307e\u3059\n     * @param body \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\n     * @param clazz \u623b\u308a\n     * @return \u53d6\u5f97\u7d50\u679c\n     */\n    <T> T parse(String body, Class<T> clazz);\n    /**\n     * \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u89e3\u6790\u3057\u307e\u3059\n     * @param body \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\n     * @param clazz \u623b\u308a\n     * @return \u53d6\u5f97\u7d50\u679c\n     */\n    <T> List<T> parseList(String body, Class<T> clazz);\n\n\u3010JsonParser.java\u3011\npackage org.tsunaruts.radiocontrolfw.webservice.parser.impl;\n\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport net.arnx.jsonic.JSON;\nimport org.seasar.framework.beans.util.Beans;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.AbstractParser;\n\n/**\n * <pre>\n * JSON\u3092\u89e3\u6790\u3059\u308b\u30af\u30e9\u30b9\n * </pre>\n */\npublic class JsonParser implements AbstractParser {\n    /* (non-Javadoc) */\n    @Override\n    public <T> T parse(String body, Class<T> clazz) {\n        return JSON.decode(body, clazz);\n    }\n\n    /* (non-Javadoc) */\n    @Override\n    public <T> List<T> parseList(String body, Class<T> clazz) {\n        List<T> ret = new ArrayList<>();\n        @SuppressWarnings(\"unchecked\")\n        LinkedHashMap<String, Object>[] mapList = JSON.decode(body, LinkedHashMap[].class);\n        if (mapList != null) {\n            for (LinkedHashMap<String, Object> map : mapList) {\n                ret.add(Beans.createAndCopy(clazz, map).execute());\n            }\n        }\n        return ret;\n    }\n}\n\n\u3053\u308c\u3067\u5b8c\u4e86\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u305d\u306e\u307e\u307eJSON\u3067\u8fd4\u3059ACTION\u3092\u4f5c\u6210\u3057\u3066\u5358\u4f53\u30c6\u30b9\u30c8\n\n\u5b9f\u88c5\u306e\u30c6\u30b9\u30c8\npackage org.tsunaruts.radiocontrolfw.webservice;\n\nimport java.util.List;\nimport org.seasar.framework.beans.util.BeanMap;\n\npublic class WebServiceTest {\n\n    public static void main(String[] args) {\n        WebService webService = new WebService();\n        webService.initialize(\"http://localhost:8080/radiocontrol\");\n        BeanMap map = new BeanMap();\n        map.put(\"param1\", \"test1\");\n        map.put(\"param2\", \"test2\");\n        List<BeanMap> list = webService.get(\"/api/control/front\")\n                                  .getResultList(BeanMap.class, map);\n        System.out.println(list);\n    }\n}\n\n[{param1=test1}, {param2=test2}]\n\n\n\u7121\u4e8b\u306b\u52d5\u3044\u305f\u3002\n\u3010\u8ffd\u8a18\u3011\nString\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u305b\u308b\u4fee\u6b63\u3068Factory\u5468\u308a\u304c\u304a\u304b\u3057\u304b\u3063\u305f\u306e\u3067\u53cd\u6620\u3057\u307e\u3057\u305f\u3002\n\u30e9\u30b8\u30b3\u30f3\u64cd\u4f5c\u3067\u4f5c\u6210\u3057\u305fWEB\u30b5\u30fc\u30d3\u30b9\u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9JAVA\u3067\u9023\u643a\u3059\u308b\u81ea\u4f5c\u306e\u30b5\u30f3\u30d7\u30eb\u3002\n\u64cd\u4f5c\u306b\u306fBackbone.js\u306a\u3069\u3067\u76f4\u63a5REST\u5b9f\u88c5\u3057\u3066\u3082\u3088\u304b\u3063\u305f\u304c\u3001\u4eca\u5f8c\u30a2\u30fc\u30e0\u306e\u53d6\u308a\u4ed8\u3051\u306a\u3069\u62e1\u5f35\u3059\u308b\u305f\u3081JAVA\u3067API\u5316\u3057\u305f\u3002\n(GIT : https://github.com/tsunaki00/radiocontrol)\n\u3010\u30a4\u30e1\u30fc\u30b8\u3011\n![rest.png](https://qiita-image-store.s3.amazonaws.com/0/52867/9839fbb7-4137-99b0-d787-afb09277b6fd.png)\n\n\n## \u4f7f\u7528\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\n```\n\u30fbhttpcore-4.2.2.jar\n\u30fbhttpclient-4.2.3.jar\n\u30fbjsonic-1.2.11.jar\n\u30fbs2-tiger-2.4.44.jar\uff08\u6c4e\u7528Bean\u3067\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001commons-beanutils\u306a\u3069\u3067\u3082OK)\n```\n\n##\u968e\u5c64\n```\n org.tsunaruts.radiocontrolfw\n     \u2514\u2500 webservice\n             \u251c factory\n             \u2502  \u251c\u2500 impl\n             \u2502  \u2502    \u2514\u2500DefaultParserFactory.java\n             \u2502  \u2514\u2500 AbstractParserFactory.java\n             \u251c methods\n             \u2502    \u251c\u2500 AbstractWebMethod.java\n             \u2502    \u251c\u2500 GET.java\n             \u2502    \u2514\u2500 POST.java\n             \u251c parser\n             \u2502  \u251c\u2500 impl\n             \u2502  \u2502    \u2514\u2500JsonParser.java\n             \u2502  \u2514\u2500 AbstractParser.java\n             \u2514\u2500 WebService.java\n ```\n\n\u307e\u305a\u5916\u90e8\u304b\u3089\u547c\u3073\u51fa\u3057\u7528\u306e\u30af\u30e9\u30b9\n\u3010WebService.java\u3011\n\n``` java\npackage org.tsunaruts.radiocontrolfw.webservice;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport org.tsunaruts.radiocontrolfw.webservice.methods.GET;\nimport org.tsunaruts.radiocontrolfw.webservice.methods.POST;\n\n/**\n * <pre>\n * WEB\u30b5\u30fc\u30d3\u30b9\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u767a\u884c\u3059\u308b\u30af\u30e9\u30b9\n * \u203b\u203bDI\u30b3\u30f3\u30c6\u30ca\u306a\u3069\u3067URL\u3092\u5916\u90e8\u304b\u3089\u8a2d\u5b9a\u3059\u308b\n * </pre>\n */\npublic class WebService {\n    /** URL */\n    public String url;\n    /**\n     * \n     * @param url\n     */\n    public void initialize(String url) {\n        this.url = url;\n    }\n\n    /**\n     * WEB\u30b5\u30fc\u30d3\u30b9\u3092\u5b9f\u884c\u3057\u307e\u3059 \n     *  \uff1cGET \u30e1\u30bd\u30c3\u30c9\uff1e\n     * @return \u5b9f\u884c\u7d50\u679cEntityList\n     */\n    public GET get(String path) {\n        return new GET(url, path);\n    }\n    /**\n     * WEB\u30b5\u30fc\u30d3\u30b9\u3092\u5b9f\u884c\u3057\u307e\u3059 \n     *  \uff1cPOST \u30e1\u30bd\u30c3\u30c9\uff1e\n     * @return \u5b9f\u884c\u7d50\u679cEntity\n     * @throws IOException \n     * @throws ParseException \n     */\n    public POST post(String path) {\n        return new POST(url, path);\n    }\n}\n```\n\n\u6b21\u306bWEB\u30b5\u30fc\u30d3\u30b9\u306b\u5bfe\u5fdc\u3057\u305f\u30e1\u30bd\u30c3\u30c9\n\u3010AbstractWebMethod.java\u3011\n\n```java\npackage org.tsunaruts.radiocontrolfw.webservice.methods;\n\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.util.EntityUtils;\nimport org.seasar.framework.beans.util.BeanMap;\nimport org.seasar.framework.exception.IORuntimeException;\nimport org.seasar.framework.exception.ParseRuntimeException;\nimport org.tsunaruts.radiocontrolfw.webservice.factory.AbstractParserFactory;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.AbstractParser;\n\n/**\n * <pre>\n * WEB\u30e1\u30bd\u30c3\u30c9\u306e\u62bd\u8c61\u30af\u30e9\u30b9\n * </pre>\n */\npublic abstract class AbstractWebMethod {\n    /** WEB\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u30db\u30b9\u30c8\u540d   http://localhost */\n    protected String host;\n    /** WEB\u30b5\u30fc\u30d3\u30b9 path   /action */\n    protected String path;\n    \n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     * @param host host\u3092\u8a2d\u5b9a\u3057\u307e\u3059 Examples : http://localhost\n     * @param path path\u3092\u8a2d\u5b9a      Examples : /action\n     */\n    public AbstractWebMethod(String host, String path) {\n        this.host = host;\n        this.path = path;\n    }\n\n    /**\n     * \u5b50\u30af\u30e9\u30b9\u3067HttpUriRequest\u3092\u751f\u6210\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @return HttpUriRequest\n     * @throws URISyntaxException URL\u306e\u7d44\u307f\u7acb\u3066\u5931\u6557\n     */\n    protected abstract HttpUriRequest getHttpUriRequest(BeanMap parameter) throws URISyntaxException;\n    /**\n     * @see getStringBodyResult\n     */\n    public String getStringBodyResult(){\n        return getStringBodyResult(null);\n    }\n    /**\n     * REST\u306e\u623b\u308a\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @return REST\u30ec\u30b9\u30dd\u30f3\u30b9\n     */\n    public String getStringBodyResult(BeanMap parameter) {\n        try {\n            HttpUriRequest request = getHttpUriRequest(parameter);\n            List<String> list = execute(request, String.class, false);\n            if (list != null && !list.isEmpty()) {\n                return list.get(0);\n            }\n            return null;\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        } catch (ParseException e) {\n            throw new ParseRuntimeException(e);\n        } catch (IOException e) {\n            throw new IORuntimeException(e);\n        }\n    }\n    public <T> T getSingleResult(Class<T> returnType) {\n        return getSingleResult(returnType, null);\n    }\n    /**\n     * REST\u306e\u623b\u308a\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n     * @param returnType \u623b\u308a\u5024\u306e\u578b\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @return REST\u30ec\u30b9\u30dd\u30f3\u30b9\n     */\n    public <T> T getSingleResult(Class<T> returnType, BeanMap parameter) {\n        try {\n            HttpUriRequest request = getHttpUriRequest(parameter);\n            List<T> list = execute(request, returnType, false);\n            if (list != null && !list.isEmpty()) {\n                return list.get(0);\n            }\n            return null;\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        } catch (ParseException e) {\n            throw new ParseRuntimeException(e);\n        } catch (IOException e) {\n            throw new IORuntimeException(e);\n        }\n    }\n    /**\n     * \n     * @return\n     */\n    public <T> List<T> getResultList(Class<T> returnType) {\n        return getResultList(returnType, null);\n    }\n    /**\n     * REST\u306e\u623b\u308a\u5024\u3092List\u8fd4\u3057\u307e\u3059\u3002\n     * @param returnType \u623b\u308a\u5024\u306e\u578b\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @return List&lt;REST\u30ec\u30b9\u30dd\u30f3\u30b9&gt;\n     */\n    public <T> List<T> getResultList(Class<T> returnType, BeanMap parameter) {\n        try {\n            HttpUriRequest request = getHttpUriRequest(parameter);\n            List<T> list = execute(request, returnType, true);\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n            return null;\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        } catch (ParseException e) {\n            throw new ParseRuntimeException(e);\n        } catch (IOException e) {\n            throw new IORuntimeException(e);\n        }\n    }\n    /**\n     * \u5916\u90e8WEB\u30b5\u30fc\u30d3\u30b9\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\n     * @param request \u30ea\u30af\u30a8\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n     * @param returnType \u623b\u308a\u5024\u578b\n     * @param isList \u623b\u308a\u5024\u306e\u7a2e\u985e\n     * @return REST\u30ec\u30b9\u30dd\u30f3\u30b9\n     * @throws ParseException \u30ec\u30b9\u30dd\u30f3\u30b9\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\n     * @throws IOException \u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u6642\u306e\u4f8b\u5916\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T> List<T> execute(HttpUriRequest request, Class<T> returnType, boolean isList) throws ParseException, IOException {\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n        HttpResponse response = httpClient.execute(request);\n        HttpEntity httpEntity = response.getEntity();\n        String body = EntityUtils.toString(httpEntity, \"UTF-8\");\n        AbstractParser parser = AbstractParserFactory.getParserFactory().getParser(httpEntity.getContentType().getValue());\n        if (returnType == String.class) {\n            List<T> ret = new ArrayList<>();\n            ret.add((T) body);\n            return ret;\n        }\n        if (parser == null) {\n            return null;\n        }\n        if (isList) {\n            return parser.parseList(body, returnType);\n        } else {\n            List<T> ret = new ArrayList<>();\n            ret.add(parser.parse(body, returnType));\n            return ret;\n        }\n    }\n    /**\n     * @see AbstractWebMethod#uriBuild(BeanMap)\n     * @return URIBuilder\n     */\n    protected URIBuilder uriBuild() {\n        return uriBuild(null);\n    }\n    /**\n     * URL\u7d44\u307f\u7acb\u3066\n     * @param parameter \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf(GET\u306e\u307f)\n     * @return URIBuilder\n     */\n    protected URIBuilder uriBuild(BeanMap parameter) {\n        URIBuilder builder = new URIBuilder();\n        String scheme = \"http://\";\n        if (host.indexOf(\"://\") > -1) {\n            scheme = host.substring(0, host.indexOf(\"://\"));\n            host   = host.substring(host.indexOf(\"://\") + \"://\".length());\n        }\n        builder.setScheme(scheme);\n        builder.setHost(host);\n        builder.setPath(path);\n        if (parameter != null) {\n            Iterator<Map.Entry<String, Object>> ite = parameter.entrySet().iterator();\n            while(ite.hasNext()) {\n                Map.Entry<String, Object> entry = ite.next();\n                builder.setParameter(entry.getKey(), (String) entry.getValue());\n            }\n        }\n        return builder;\n    }\n}\n\n```\n\n\u5404\u30ea\u30af\u30a8\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\uff08\u3068\u308a\u3042\u3048\u305aGET\u3068POST)\n\u3010GET.java\u3011\n\n``` java\npackage org.tsunaruts.radiocontrolfw.webservice.methods;\n\nimport java.net.URISyntaxException;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.seasar.framework.beans.util.BeanMap;\n\n/**\n * <pre>\n *  GET\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u88c5\u3059\u308b\n * </pre>\n */\npublic class GET extends AbstractWebMethod {\n\n    public GET(String host, String path) {\n        super(host, path);\n    }\n    \n    /* (non-Javadoc) */\n    @Override\n    protected HttpUriRequest getHttpUriRequest(BeanMap parameter)\n                                               throws URISyntaxException {\n        return new HttpGet(uriBuild(parameter).build().toString());\n    }\n}\n\n```\n\n\u3010POST.java\u3011\n\n```java\npackage org.tsunaruts.radiocontrolfw.webservice.methods;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.seasar.framework.beans.util.BeanMap;\n\n/**\n * <pre>\n *  POST\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u88c5\u3059\u308b\n * </pre>\n */\npublic class POST  extends AbstractWebMethod {\n\n    public POST(String host, String path) {\n        super(host, path);\n    }\n    \n    /* (non-Javadoc) */\n    @Override\n    protected HttpUriRequest getHttpUriRequest(BeanMap parameter)\n                                               throws URISyntaxException {\n        try {\n            URIBuilder builder = uriBuild();\n            List<NameValuePair> params = new ArrayList<NameValuePair>();\n            if (parameter != null) {\n                Iterator<Map.Entry<String, Object>> ite = parameter.entrySet().iterator();\n                while(ite.hasNext()) {\n                    Map.Entry<String, Object> entry = ite.next();\n                    params.add(new BasicNameValuePair(entry.getKey(), (String) entry.getValue()));\n                }\n            }\n            HttpPost post = new HttpPost(builder.build().toString());\n            post.setEntity(new UrlEncodedFormEntity(params));\n            return post;\n        } catch (UnsupportedEncodingException e) {\n            throw new URISyntaxException(parameter.toString(), host + path);\n        }\n    }\n}\n```\n\n\u6700\u5f8c\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u89e3\u6790\u5468\u308a\u306e\u30af\u30e9\u30b9\nSOAP\u5bfe\u5fdc\u3092\u8003\u3048\u3066\u3001AbstractFactory\u3067\u5b9f\u88c5\n\n\u3010AbstractParserFactory.java\u3011\n\n```java\npackage org.tsunaruts.radiocontrolfw.webservice.factory;\n\nimport org.tsunaruts.radiocontrolfw.webservice.parser.AbstractParser;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.impl.JsonParser;\n\n/**\n * <pre>\n * contentType\u3092\u307f\u3066Parser\u3092\u751f\u6210\u3059\u308bFactory\u30af\u30e9\u30b9\n * </pre>\n */\npublic abstract class AbstractParserFactory {\n\n    /**\n     * \u74b0\u5883\u306b\u5408\u308f\u305b\u3066Factory\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\n     * @return AbstractParserFactory\n     */\n    public static AbstractParserFactory getParserFactory() {\n        return new DefaultParserFactory();\n    }\n    \n    /**\n     * contentType\u3092\u307f\u3066Parser\u3092\u751f\u6210\u3057\u307e\u3059\n     * @param contentType contentType\n     * @return\n     */\n    public abstract AbstractParser getParser(String contentType);\n}\n\n```\n\n```java\npackage org.tsunaruts.radiocontrolfw.webservice.factory.impl;\n\nimport org.tsunaruts.radiocontrolfw.webservice.factory.AbstractParserFactory;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.AbstractParser;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.impl.JsonParser;\n\n/**\n * <pre>\n *  \u30c7\u30d5\u30a9\u30eb\u30c8\u306eFactory\u30af\u30e9\u30b9\n * </pre>\n *\n */\npublic class DefaultParserFactory extends AbstractParserFactory {\n\n    /* (non-Javadoc) */\n    @Override\n    public AbstractParser getParser(String contentType) {\n        // JSON\u306e\u5834\u5408\n        if (contentType != null && contentType.indexOf(\"application/json\") > -1) {\n            return new JsonParser();\n        }\n        // SOAP, HTML, TEXT\u306e\u5834\u5408\n        return null;\n    }\n\n}\n```\n\n\u3010AbstractParser.java\u3011\n\n```java\npackage org.tsunaruts.radiocontrolfw.webservice.parser;\n\nimport java.util.List;\n\n/**\n * <pre>\n * \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u89e3\u6790\u30af\u30e9\u30b9\n * </pre>\n */\npublic interface AbstractParser {\n    /**\n     * \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u89e3\u6790\u3057\u307e\u3059\n     * @param body \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\n     * @param clazz \u623b\u308a\n     * @return \u53d6\u5f97\u7d50\u679c\n     */\n    <T> T parse(String body, Class<T> clazz);\n    /**\n     * \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u89e3\u6790\u3057\u307e\u3059\n     * @param body \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\n     * @param clazz \u623b\u308a\n     * @return \u53d6\u5f97\u7d50\u679c\n     */\n    <T> List<T> parseList(String body, Class<T> clazz);\n```\n\u3010JsonParser.java\u3011\n\n```java\npackage org.tsunaruts.radiocontrolfw.webservice.parser.impl;\n\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport net.arnx.jsonic.JSON;\nimport org.seasar.framework.beans.util.Beans;\nimport org.tsunaruts.radiocontrolfw.webservice.parser.AbstractParser;\n\n/**\n * <pre>\n * JSON\u3092\u89e3\u6790\u3059\u308b\u30af\u30e9\u30b9\n * </pre>\n */\npublic class JsonParser implements AbstractParser {\n    /* (non-Javadoc) */\n    @Override\n    public <T> T parse(String body, Class<T> clazz) {\n        return JSON.decode(body, clazz);\n    }\n\n    /* (non-Javadoc) */\n    @Override\n    public <T> List<T> parseList(String body, Class<T> clazz) {\n        List<T> ret = new ArrayList<>();\n        @SuppressWarnings(\"unchecked\")\n        LinkedHashMap<String, Object>[] mapList = JSON.decode(body, LinkedHashMap[].class);\n        if (mapList != null) {\n            for (LinkedHashMap<String, Object> map : mapList) {\n                ret.add(Beans.createAndCopy(clazz, map).execute());\n            }\n        }\n        return ret;\n    }\n}\n```\n\n\n\u3053\u308c\u3067\u5b8c\u4e86\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u305d\u306e\u307e\u307eJSON\u3067\u8fd4\u3059ACTION\u3092\u4f5c\u6210\u3057\u3066\u5358\u4f53\u30c6\u30b9\u30c8\n\n## \u5b9f\u88c5\u306e\u30c6\u30b9\u30c8\n\n```java\npackage org.tsunaruts.radiocontrolfw.webservice;\n\nimport java.util.List;\nimport org.seasar.framework.beans.util.BeanMap;\n\npublic class WebServiceTest {\n\n    public static void main(String[] args) {\n        WebService webService = new WebService();\n        webService.initialize(\"http://localhost:8080/radiocontrol\");\n        BeanMap map = new BeanMap();\n        map.put(\"param1\", \"test1\");\n        map.put(\"param2\", \"test2\");\n        List<BeanMap> list = webService.get(\"/api/control/front\")\n                                  .getResultList(BeanMap.class, map);\n        System.out.println(list);\n    }\n}\n```\n\n```\n[{param1=test1}, {param2=test2}]\n\n```\n\u7121\u4e8b\u306b\u52d5\u3044\u305f\u3002\n\n\u3010\u8ffd\u8a18\u3011\nString\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u305b\u308b\u4fee\u6b63\u3068Factory\u5468\u308a\u304c\u304a\u304b\u3057\u304b\u3063\u305f\u306e\u3067\u53cd\u6620\u3057\u307e\u3057\u305f\u3002\n", "tags": ["rest", "Java", "JSON"]}