{"tags": ["msgpack", "linear-rpc", "OpenCV"], "context": "\n\nmsgpack\u3068OpenCV\u3092\u4f7f\u3063\u3066\u3001iMAC\u306a\u3069\u306eiSight\u304b\u3089\u30d6\u30e9\u30a6\u30b6\u306b\u753b\u50cf\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u914d\u4fe1\nbase64encoded\u306adataURI\u3088\u308a\u3001createObjectURL\u306e\u304c\u901f\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\n\u307e\u3041\u3001HD\u753b\u50cf\u306edataURI\u3068\u304b\u9577\u3059\u304e\u306a\u306e\u3067\u5f53\u7136\u3068\u3044\u3048\u3070\u5f53\u7136\u306a\u306e\u3067\u3059\u304c\u3001Blob\u7d4c\u7531\u306eimg\u8cbc\u308a\u4ed8\u3051\u3068\u3044\u3046\u8a18\u4e8b\u3092\u3042\u307e\u308a\u898b\u3064\u3051\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3002\n\n\u6e96\u5099\nmsgpack\u306ebinary data\u3092WebSocket\u3092\u5229\u7528\u3057\u3066\u914d\u4fe1\u3059\u308b\u70ba\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nlinear-cpp\nlinear-js\n\n1.opencv\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ brew install opencv\n2.linear-cpp/linear-js\u3092clone, make\u306a\u3069\n## C++\n$ git clone --recursive https://github.com/linear-rpc/linear-cpp\n\n## linear-cpp/sample\u306ews_server_sample.cpp\u3092\u4e0b\u8a18\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\n$ cp ws_server_sample.cpp linear-cpp/sample\n$ cd linear-cpp; ./bootstrap && configure --with-sample && make\n\n$ git clone --recursive https://github.com/linear-rpc/linear-js\n## linear-js/src/linear.debug.js\u3092\u4e0b\u8a18\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 index.html\u3068\u540c\u3058\u5834\u6240\u306b\u914d\u7f6e\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u9001\u4fe1\u5074(C++)\n\nws_server_sample.cpp\n#include \"opencv2/opencv.hpp\"\n\n#include \"linear/ws_server.h\"\n#include \"linear/group.h\"\n\nint main() {\n  linear::shared_ptr<linear::Handler> dummy;\n  linear::WSServer server(dummy);\n\n  // open cam\n  cv::VideoCapture cap(0);\n  if(!cap.isOpened()) {\n    return -1;\n  }\n  // starts on INADDR_ANY:37800\n  server.Start(\"0.0.0.0\", 37800);\n  while (true) {\n    // capture image\n    cv::Mat frame, resized;\n    cap >> frame;\n    cv::resize(frame, resized, cv::Size(), 0.5, 0.5); // iMAC, orig: 1280x1024 -> 640x512\n    // show image on local window\n    cv::imshow(\"window\", resized);\n\n    // jpeg compression\n    std::vector<unsigned char> jpeg;\n    std::vector<int> param = std::vector<int>(2);\n    param[0] = CV_IMWRITE_JPEG_QUALITY;\n    param[1] = 95; // 0-100\n    cv::imencode(\".jpg\", resized, jpeg, param);\n\n    // send jpeg data\n    linear::Notify notify(\"image\", linear::type::binary(reinterpret_cast<char*>(jpeg.data()), jpeg.size()));\n    notify.Send(LINEAR_BROADCAST_GROUP);\n\n    // press 'q' to exit\n    int key = cv::waitKey(16); // wait 16ms => 60fps\n    if(key == 113) {\n      break;\n    }\n  }\n  cv::destroyAllWindows();\n  server.Stop();\n  return 0;\n}\n\n\n\n\u53d7\u4fe1\u5074(HTML + JavaScript)\n\nindex.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Jpeg Streaming</title>\n    <meta charset='utf-8'/>\n    <script type='text/javascript' src='linear.debug.js'></script>\n    <script>\n      window.onload = function() {\n        var transport = {\n                         type: 'websocket',\n                         host: '127.0.0.1',\n                         port: 37800,\n                         channel: 'linear',\n                        };\n        var client = new linear.client({transports: [transport]});\n        client.onnotify = function(notification) {\n          var blob = new Blob([linear.tobinary(notification.data)], {type: \"image/jpeg\"});\n          document.getElementById('view').src = URL.createObjectURL(blob);\n        };\n        client.connect();\n      };\n    </script>\n  </head>\n  <body id='body'>\n    <img id='view'></img>\n  </body>\n</html>\n\n\n\n\u78ba\u8a8d\n## \u30bf\u30fc\u30df\u30ca\u30eb\u3092\u958b\u3044\u3066\u3001\u30b5\u30fc\u30d0\u8d77\u52d5\n$ /path/to/ws_server_sample\n\n## \u540c\u3058PC\u4e0a\u306ebrowser\u3067index.html\u3092\u958b\u304f\u3002\uff08\u9055\u3046PC\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u306f\u3001index.html\u306ehost\u90e8\u5206\u3092\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3055\u305b\u3066\u3044\u308bPC\u306e\u30a2\u30c9\u30ec\u30b9\u3084FQDN\u306b\u66f8\u304d\u63db\u3048\uff09\n$ open /path/to/index.html\n\n\n\u30dd\u30a4\u30f3\u30c8\n\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u53d7\u4fe1\u3057\u305fjpeg\u306ebinary data\u3092\u76f4\u63a5\u30d6\u30e9\u30a6\u30b6\u306eimg\u30bf\u30b0\u306b\u8cbc\u308a\u4ed8\u3051\u308b\u306b\u306f\u3001Blob\u304c\u6709\u52b9\u3002(\u79c1\u306e\u74b0\u5883\u3067\u306f\u3001base64encoded\u306adata\u3092\u9001\u4fe1\u3057\u3066\u3001img\u30bf\u30b0\u306bdataURI\u3068\u3057\u3066\u8cbc\u308a\u4ed8\u3051\u308b\u3088\u308a10\u500d\u304f\u3089\u3044\u901f\u304b\u3063\u305f\u3067\u3059: img.src\u66f8\u304d\u63db\u3048\u524d\u5f8c\u306bconsole.time\u5165\u308c\u3066\u8a08\u6e2c)\n\u30b5\u30fc\u30d0\u30fb\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5408\u8a0870\u884c\u304f\u3089\u3044\u3067\u5b9f\u88c5\u3067\u304d\u3066\u591a\u5206\u3001\u7c21\u5358\u3002\nfile:: scheme\u3060\u308d\u3046\u304c\u4f55\u3060\u308d\u3046\u304c\u76f4\u63a5CORS\u53ef\u80fd\u3002(\u826f\u3057\u60aa\u3057\u3067\u3059\u304c)\n\u4eca\u56de\u306e\u5834\u5408\u3001msgpack\u3092\u7528\u3044\u308b\u30e1\u30ea\u30c3\u30c8\u306f\u306a\u3044\u3067\u3059\u304c\u3001jpeg\u30c7\u30fc\u30bf\u3068\u305d\u306e\u4ed6\u60c5\u5831\u306a\u3069\u3092\u6df7\u5728\u3055\u305b\u3066\u9001\u53d7\u4fe1\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u6709\u52b9\u306a\u306f\u305a\u3002\nWebAudio\u4f7f\u3048\u3070\u97f3\u58f0\u306a\u3069\u3082\u9001\u53d7\u4fe1&&\u30c7\u30b3\u30fc\u30c9\u51fa\u6765\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001P2P\u3067\u306f\u7121\u3044\u3067\u3059\u3057\u3001TCP\u3067\u3059\u3057\u3001\u30ea\u30c3\u30d7\u30b7\u30f3\u30af\u3068\u304b\u3082\u5927\u5909\u306a\u306e\u3067\u3001\u3061\u3083\u3093\u3068\u3057\u305f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306fWebRTC\u306e\u304c\u3088\u3044\u3068\u304a\u3082\u3044\u307e\u3046\u3059\u3002\n\n# msgpack\u3068OpenCV\u3092\u4f7f\u3063\u3066\u3001iMAC\u306a\u3069\u306eiSight\u304b\u3089\u30d6\u30e9\u30a6\u30b6\u306b\u753b\u50cf\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u914d\u4fe1\n**base64encoded\u306adataURI\u3088\u308a\u3001createObjectURL\u306e\u304c\u901f\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2**\n\u307e\u3041\u3001HD\u753b\u50cf\u306edataURI\u3068\u304b\u9577\u3059\u304e\u306a\u306e\u3067\u5f53\u7136\u3068\u3044\u3048\u3070\u5f53\u7136\u306a\u306e\u3067\u3059\u304c\u3001Blob\u7d4c\u7531\u306eimg\u8cbc\u308a\u4ed8\u3051\u3068\u3044\u3046\u8a18\u4e8b\u3092\u3042\u307e\u308a\u898b\u3064\u3051\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3002\n\n## \u6e96\u5099\nmsgpack\u306ebinary data\u3092WebSocket\u3092\u5229\u7528\u3057\u3066\u914d\u4fe1\u3059\u308b\u70ba\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n- [linear-cpp](https://github.com/linear-rpc/linear-cpp)\n- [linear-js](https://github.com/linear-rpc/linear-js)\n\n1.opencv\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n`$ brew install opencv`\n2.linear-cpp/linear-js\u3092clone, make\u306a\u3069\n<pre>\n\\## C++\n$ git clone --recursive https://github.com/linear-rpc/linear-cpp\n\n\\## linear-cpp/sample\u306ews_server_sample.cpp\u3092\u4e0b\u8a18\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\n$ cp ws_server_sample.cpp linear-cpp/sample\n$ cd linear-cpp; ./bootstrap && configure --with-sample && make\n\n$ git clone --recursive https://github.com/linear-rpc/linear-js\n\\## linear-js/src/linear.debug.js\u3092\u4e0b\u8a18\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 index.html\u3068\u540c\u3058\u5834\u6240\u306b\u914d\u7f6e\n</pre>\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n### \u9001\u4fe1\u5074(C++)\n```ws_server_sample.cpp\n#include \"opencv2/opencv.hpp\"\n\n#include \"linear/ws_server.h\"\n#include \"linear/group.h\"\n\nint main() {\n  linear::shared_ptr<linear::Handler> dummy;\n  linear::WSServer server(dummy);\n\n  // open cam\n  cv::VideoCapture cap(0);\n  if(!cap.isOpened()) {\n    return -1;\n  }\n  // starts on INADDR_ANY:37800\n  server.Start(\"0.0.0.0\", 37800);\n  while (true) {\n    // capture image\n    cv::Mat frame, resized;\n    cap >> frame;\n    cv::resize(frame, resized, cv::Size(), 0.5, 0.5); // iMAC, orig: 1280x1024 -> 640x512\n    // show image on local window\n    cv::imshow(\"window\", resized);\n\n    // jpeg compression\n    std::vector<unsigned char> jpeg;\n    std::vector<int> param = std::vector<int>(2);\n    param[0] = CV_IMWRITE_JPEG_QUALITY;\n    param[1] = 95; // 0-100\n    cv::imencode(\".jpg\", resized, jpeg, param);\n\n    // send jpeg data\n    linear::Notify notify(\"image\", linear::type::binary(reinterpret_cast<char*>(jpeg.data()), jpeg.size()));\n    notify.Send(LINEAR_BROADCAST_GROUP);\n\n    // press 'q' to exit\n    int key = cv::waitKey(16); // wait 16ms => 60fps\n    if(key == 113) {\n      break;\n    }\n  }\n  cv::destroyAllWindows();\n  server.Stop();\n  return 0;\n}\n```\n## \u53d7\u4fe1\u5074(HTML + JavaScript)\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Jpeg Streaming</title>\n    <meta charset='utf-8'/>\n    <script type='text/javascript' src='linear.debug.js'></script>\n    <script>\n      window.onload = function() {\n        var transport = {\n                         type: 'websocket',\n                         host: '127.0.0.1',\n                         port: 37800,\n                         channel: 'linear',\n                        };\n        var client = new linear.client({transports: [transport]});\n        client.onnotify = function(notification) {\n          var blob = new Blob([linear.tobinary(notification.data)], {type: \"image/jpeg\"});\n          document.getElementById('view').src = URL.createObjectURL(blob);\n        };\n        client.connect();\n      };\n    </script>\n  </head>\n  <body id='body'>\n    <img id='view'></img>\n  </body>\n</html>\n```\n\n## \u78ba\u8a8d\n<pre>\n## \u30bf\u30fc\u30df\u30ca\u30eb\u3092\u958b\u3044\u3066\u3001\u30b5\u30fc\u30d0\u8d77\u52d5\n$ /path/to/ws_server_sample\n\n## \u540c\u3058PC\u4e0a\u306ebrowser\u3067index.html\u3092\u958b\u304f\u3002\uff08\u9055\u3046PC\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u306f\u3001index.html\u306ehost\u90e8\u5206\u3092\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3055\u305b\u3066\u3044\u308bPC\u306e\u30a2\u30c9\u30ec\u30b9\u3084FQDN\u306b\u66f8\u304d\u63db\u3048\uff09\n$ open /path/to/index.html\n</pre>\n\n## \u30dd\u30a4\u30f3\u30c8\n- **\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u53d7\u4fe1\u3057\u305fjpeg\u306ebinary data\u3092\u76f4\u63a5\u30d6\u30e9\u30a6\u30b6\u306eimg\u30bf\u30b0\u306b\u8cbc\u308a\u4ed8\u3051\u308b\u306b\u306f\u3001Blob\u304c\u6709\u52b9\u3002**(\u79c1\u306e\u74b0\u5883\u3067\u306f\u3001base64encoded\u306adata\u3092\u9001\u4fe1\u3057\u3066\u3001img\u30bf\u30b0\u306bdataURI\u3068\u3057\u3066\u8cbc\u308a\u4ed8\u3051\u308b\u3088\u308a10\u500d\u304f\u3089\u3044\u901f\u304b\u3063\u305f\u3067\u3059: img.src\u66f8\u304d\u63db\u3048\u524d\u5f8c\u306bconsole.time\u5165\u308c\u3066\u8a08\u6e2c)\n- \u30b5\u30fc\u30d0\u30fb\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5408\u8a0870\u884c\u304f\u3089\u3044\u3067\u5b9f\u88c5\u3067\u304d\u3066\u591a\u5206\u3001\u7c21\u5358\u3002\n- file:: scheme\u3060\u308d\u3046\u304c\u4f55\u3060\u308d\u3046\u304c\u76f4\u63a5CORS\u53ef\u80fd\u3002(\u826f\u3057\u60aa\u3057\u3067\u3059\u304c)\n- \u4eca\u56de\u306e\u5834\u5408\u3001msgpack\u3092\u7528\u3044\u308b\u30e1\u30ea\u30c3\u30c8\u306f\u306a\u3044\u3067\u3059\u304c\u3001jpeg\u30c7\u30fc\u30bf\u3068\u305d\u306e\u4ed6\u60c5\u5831\u306a\u3069\u3092\u6df7\u5728\u3055\u305b\u3066\u9001\u53d7\u4fe1\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u6709\u52b9\u306a\u306f\u305a\u3002\n- WebAudio\u4f7f\u3048\u3070\u97f3\u58f0\u306a\u3069\u3082\u9001\u53d7\u4fe1&&\u30c7\u30b3\u30fc\u30c9\u51fa\u6765\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001P2P\u3067\u306f\u7121\u3044\u3067\u3059\u3057\u3001TCP\u3067\u3059\u3057\u3001\u30ea\u30c3\u30d7\u30b7\u30f3\u30af\u3068\u304b\u3082\u5927\u5909\u306a\u306e\u3067\u3001\u3061\u3083\u3093\u3068\u3057\u305f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306fWebRTC\u306e\u304c\u3088\u3044\u3068\u304a\u3082\u3044\u307e\u3046\u3059\u3002\n"}