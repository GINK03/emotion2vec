{"tags": ["CUDA", "NVIDIA", "GPGPU"], "context": "\n\n\u3053\u306e\u8a18\u4e8b\u306f\u306a\u306b\uff1f\n\u3000NVIDIA\u306eGPU\u306b\u306f\u300c\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u300d\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u300c\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u300d\u306e\u8a73\u7d30\u306f\u307e\u3041CUDA C \u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3084CUDA by Example\u3042\u305f\u308a\u3092\u8aad\u3081\u3070\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u300cGPU\u5074\u304b\u3089\u306f\u5909\u66f4\u3067\u304d\u306a\u3044\u3051\u308c\u3069\u3001\u30aa\u30f3\u30c1\u30c3\u30d7\u306a\u30e1\u30e2\u30ea\u3067\u3001\u3044\u3044\u611f\u3058\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u4e00\u3064\u306e\u5024\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u9762\u306b\u306f\u3081\u3063\u307d\u3046\u5f37\u3044\u300d\u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u3000\u3058\u3083\u3041\u3001\u300c\u305d\u306e\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u5909\u6570\u3060\u3051\u3058\u3083\u306a\u304f\u3066\u69cb\u9020\u4f53\u3084\u3001\u30af\u30e9\u30b9\u3082\u7f6e\u3051\u305f\u3089\u3044\u3044\u3088\u306d\u300d\u300cGPU\u5074\u304b\u3089\u306f\u3044\u3058\u308c\u306a\u3044\u3063\u3066\u3044\u3046\u3051\u3069\u3001\u3058\u3083\u3041\u3069\u3046\u3084\u3063\u3066\u521d\u671f\u5316\u3059\u308b\u306e\uff1f\u300d\u3068\u3044\u3046\u7591\u554f\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u3001\u8272\u3005\u904a\u3093\u3067\u307f\u305f\u306e\u3067\u3001\u305d\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5909\u6570\u3092\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304d\u305f\u3044\u5834\u5408\n\u3000\u53c2\u8003\u66f8\u3067\u4e00\u756a\u6700\u521d\u306b\u66f8\u3044\u3066\u3042\u308b\u4f8b\u3067\u3059\u3002\u4e00\u3064\u305a\u3064\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3000\u307e\u3059\u306f\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304d\u305f\u3044\u5909\u6570\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u3066\u5ba3\u8a00\u3057\u307e\u3059\u3002\n__constant__ int C1;\n\n\u3055\u3089\u306b\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u969b\u306b__constant__ int C1 = 3;\u3068\u3044\u3046\u3088\u3046\u306b\u3001\u5024\u3092\u4e0e\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u306a\u304a\u3001\u666e\u901a\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u540c\u69d8\u306b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3059\u308b\u307e\u3067\u751f\u304d\u6b8b\u308a\u7d9a\u3051\u307e\u3059\u3002\n\u3000\u3053\u3046\u3057\u3066\u5ba3\u8a00\u3057\u305fC1\u306f\u539f\u5247\u3068\u3057\u3066\u3001device\u5074\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307fonly\u306e\u30a2\u30af\u30bb\u30b9\u3057\u304b\u3067\u304d\u307e\u305b\u3093\u3002host\u5074\u304b\u3089\u306f\uff1f\u3068\u3044\u3046\u3068\u3001\u6b21\u306eAPI\u95a2\u6570\u3067\u5024\u3092\u4f55\u5ea6\u3067\u3082\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\ncudaMemcpyToSymbol(C1, &host_C1, sizeof(int));   //host\u304b\u3089\u66f8\u304d\u8fbc\u307f\ncudaMemcpyFromSymbol(&host_C1, C1, sizeof(int)); //host\u306b\u8aad\u307f\u8fbc\u307f\n\n\u4f8b\u3048\u3070\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u5024\u3092\u66f8\u304d\u8fbc\u3093\u3067\u304b\u3089\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3001\u7d42\u308f\u3063\u305f\u3089\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u3066\u3001\u307e\u305f\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u3044\u3046\u3053\u3068\u3082\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\ncudaMemcpyToSymbol(C1, &host_C1, sizeof(int)); //\u4e00\u56de\u76ee\u306e\u66f8\u304d\u8fbc\u307f\nkernel << <1, 1 >> >(dev_d1);\nhost_C1 = 100;\ncudaMemcpyToSymbol(C1, &host_C1, sizeof(int)); //\u4e8c\u56de\u76ee\u306e\u66f8\u304d\u8fbc\u307f\nkernel << <1, 1 >> >(dev_d1);\n\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u3066\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001host\u304b\u3089\u30b3\u30d4\u30fc\u3055\u308c\u305fdec_d1\u3068\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304b\u308c\u305fC1\u3068\u306e\u8db3\u3057\u7b97\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u4e00\u56de\u8db3\u3057\u7b97\u3092\u884c\u3063\u305f\u5f8c\u306b\u3001host\u5074\u304b\u3089C1\u3092\u66f8\u304d\u63db\u3048\u3066\u3001\u3082\u3046\u4e00\u5ea6\u8db3\u3057\u7b97\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nconstant_1.cu\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <iostream>\n#include \"GET_ERR.h\" //CUDA API\u95a2\u6570\u306e\u623b\u308a\u5024\u304b\u3089\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u30de\u30af\u30ed\"GET_ERR\"\u304c\u5165\u3063\u3066\u3044\u308b\nusing namespace std;\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5909\u6570\u3092\u5ba3\u8a00\n__constant__ int C1;\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306e\u5909\u6570\u3068\u3001\u9001\u3089\u308c\u3066\u304d\u305f\u5909\u6570\u3092\u8db3\u3057\u3066\u8868\u793a\n__global__ void kernel(int *d1) {\n    *d1 += C1;\n    printf(\"%d: calc on device\\n\", *d1);\n    //\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5024\u3092\u3044\u3058\u308d\u3046\u3068\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n    //C1 += 1;\n}\n\nint main() {\n    //\u3075\u3064\u3046\u306e\u5909\u6570\n    int host_d1 = 1;\n    int* dev_d1;\n    int host_C1 = 10;\n\n    //\u3044\u3064\u3082\u3069\u304a\u308a\u3001device\u3092\u9078\u629e\u3057\u3066\u3001\u5909\u6570\u306e\u9818\u57df\u3092device\u4e0a\u3067\u78ba\u4fdd\u3057\u3066\u3001\u30b3\u30d4\u30fc\n    GET_ERR(cudaSetDevice(0));\n    GET_ERR(cudaMalloc((void**)&dev_d1, sizeof(int)));\n    GET_ERR(cudaMemcpy(dev_d1, &host_d1, sizeof(int), cudaMemcpyHostToDevice));\n\n    //\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3002host\u5074\u304b\u3089\u3057\u304b\u66f8\u304d\u8fbc\u3081\u306a\u3044\u3002\n    GET_ERR(cudaMemcpyToSymbol(C1, &host_C1, sizeof(int)));\n\n    kernel << <1, 1 >> >(dev_d1);\n\n    //\u51e6\u7406\u5f8c\u3082\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5024\u304c\u5909\u5316\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u78ba\u304b\u3081\u308b\n    GET_ERR(cudaMemcpyFromSymbol(&host_C1, C1, sizeof(int)));\n    cout << host_C1 << \": value on constant memory\" << endl;\n\n    //\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3002host\u5074\u304b\u3089\u306a\u3089\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n    host_C1 = 100;\n    GET_ERR(cudaMemcpyToSymbol(C1, &host_C1, sizeof(int)));\n    cout <<\"value on constant memory is modified from host\" << endl;\n\n    //\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5024\u304c\u66f8\u304d\u63db\u3048\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u308b\n    GET_ERR(cudaMemcpyFromSymbol(&host_C1, C1, sizeof(int)));\n    cout << host_C1 << \": value on constant memory\" << endl;\n\n    kernel << <1, 1 >> >(dev_d1);\n\n    //\u5f8c\u7247\u4ed8\u3051\n    cudaFree(dev_d1);\n    GET_ERR(cudaDeviceReset());\n\n    return 0;\n}\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\n11: calc on device\n10: value on constant memory\nvalue on constant memory is modified from host\n100: value on constant memory\n111: calc on device\n\n\u7279\u7b46\u3059\u3079\u304d\u3053\u3068\u306f\u3001\n\u30fb\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304f\u5909\u6570\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u3067\u5ba3\u8a00\n\u30fbhost\u5074\u306e\u95a2\u6570\u304b\u3089cudaMemcpyToSymbol\u3067\u5024\u3092\u30b3\u30d4\u30fc\u3067\u304d\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u52d5\u304b\u3059\u524d\u5f8c\u3067\u306f\u5e7e\u3089\u3067\u3082\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\n\u30fb\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5909\u6570\u306fcudaMemcpyFromSymbol\u3067host\u5074\u304b\u3089\u8aad\u3081\u308b\n\u30fbdevice\u5074\u306e\u95a2\u6570\u304b\u3089\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306e\u3088\u3046\u306b\u4f7f\u3048\u308b\n\u30fb\uff08\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3068\u306f\u95a2\u4fc2\u304c\u306a\u3044\u3082\u306e\u306e\uff09host\u5074\u304b\u3089\u66f8\u304d\u8fbc\u307e\u308c\u305f\u5909\u6570dev_d1\u304c\u3001\u4e00\u56de\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u7d42\u4e86\u3057\u305f\u5f8c\u3082\u6b8b\u3063\u3066\u3044\u308b\n\u3068\u3044\u3063\u305f\u611f\u3058\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u958b\u767a\u74b0\u5883\u304cVS2015\u306e\u5834\u5408\u306f\u3001cudaMemcpyToSymbol\u306b\u304a\u3044\u3066\u300c\u5f15\u6570\u306e\u578b\u304c\u9593\u9055\u3063\u3066\u308b\u3088\u300d\u3068\u8d64\u6ce2\u7dda\u3092\u5f15\u3044\u3066\u8b66\u544a\u3055\u308c\u307e\u3059\u304c\u3001\u7121\u8996\u3059\u308b\u3057\u304b\u306a\u3044\u3067\u3059\u3002\n\n\u914d\u5217\u306e\u5834\u5408\n\u5909\u6570\u306e\u5834\u5408\u3068\u307b\u307c\u540c\u69d8\u306b\u3057\u3066\u914d\u5217\u3082\u6271\u3048\u307e\u3059\u3088\u3001\u3068\u3044\u3046\u4f8b\u3067\u3059\u3002\u5ba3\u8a00\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u4e0a\u3067\n__constant__ int C2[2];\n\n\u3068\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u3057\u3001host\u5074\u304b\u3089\u306e\u8aad\u307f\u66f8\u304d\u306f\u3001\ncudaMemcpyToSymbol(C2, host_C2, 2 * sizeof(int))\ncudaMemcpyToSymbol(host_C2, C2, 2 * sizeof(int))\n\n\u3068\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u3002\u305d\u308c\u3092\u8e0f\u307e\u3048\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304f\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002C2\u306e\u8981\u7d20\u3068\u3001host\u5074\u304b\u3089\u66f8\u304d\u8fbc\u307e\u308c\u305f\u914d\u5217d2\u306e\u8981\u7d20\u3068\u3092\u8db3\u3057\u3066\u3044\u307e\u3059\u3002\n\nconstant_string.cu\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <iostream>\n#include \"GET_ERR.h\" //CUDA API\u95a2\u6570\u306e\u623b\u308a\u5024\u304b\u3089\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u30de\u30af\u30ed\"GET_ERR\"\u304c\u5165\u3063\u3066\u3044\u308b\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u914d\u5217\u3092\u5ba3\u8a00\n__constant__ int C2[2];\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306e\u5909\u6570\u3068\u3001\u9001\u3089\u308c\u3066\u304d\u305f\u5909\u6570\u3092\u8db3\u3057\u3066\u8868\u793a\n//\u30b9\u30ec\u30c3\u30c9\u3092\u4e8c\u3064\u4f7f\u3063\u3066\u3061\u3087\u3063\u3074\u308a\u4e26\u5217\u5316\n__global__ void kernel(int *d2) {\n    int id = threadIdx.x;\n    d2[id] += C2[id];\n    __syncthreads(); //\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u8a08\u7b97\u3092\u7d42\u3048\u308b\u307e\u3067\u5f85\u3064\n    if(id == 0) printf(\"%d, %d\\n\", d2[0], d2[1]); //\u7d50\u679c\u3092\u8868\u793a\n}\n\nint main() {\n    //\u3075\u3064\u3046\u306e\u5909\u6570\n    int host_d2[2] = { 1,11 };\n    int* dev_d2;\n    int host_C2[2] = { 2,22 };\n\n    //\u3044\u3064\u3082\u3069\u304a\u308a\u3001device\u3092\u9078\u629e\u3057\u3066\u3001\u5909\u6570\u306e\u9818\u57df\u3092device\u4e0a\u3067\u78ba\u4fdd\u3057\u3066\u3001\u30b3\u30d4\u30fc\n    GET_ERR(cudaSetDevice(0));\n    GET_ERR(cudaMalloc((void**)&dev_d2, 2 * sizeof(int)));\n    GET_ERR(cudaMemcpy(dev_d2, host_d2, 2 * sizeof(int), cudaMemcpyHostToDevice));\n\n    //\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3002host\u5074\u304b\u3089\u3057\u304b\u66f8\u304d\u8fbc\u3081\u306a\u3044\u3002\n    GET_ERR(cudaMemcpyToSymbol(C2, host_C2, 2 * sizeof(int)));\n\n    kernel << <1, 2 >> >(dev_d2);\n\n    //\u5f8c\u7247\u4ed8\u3051\n    cudaFree(dev_d2);\n    GET_ERR(cudaDeviceReset());\n\n    return 0;\n}\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u30683, 33\u304c\u8868\u793a\u3055\u308c\u3066\u3001\u4e07\u3005\u6b73\u306a\u308f\u3051\u3067\u3059\u3002\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u914d\u5217\u3092\u5ba3\u8a00\u3059\u308b\u3068\u304d\u306b\u3001__constant__ int C2[2] = { 2,22 }; \u306e\u3088\u3046\u306b\u3067\u304d\u308b\u306e\u3082\u3001\u5909\u6570\u306e\u3068\u304d\u3068\u540c\u69d8\u3002\n\n\u3042\u308c\u308c\uff5e\uff1f\u304a\u304b\u3057\u3044\u306a\u3041\uff1f\uff1f\n\u3000\u5909\u6570\u306e\u5834\u5408\u306f\u3001device\u4e0a\u304b\u3089\u306e\u66f8\u304d\u63db\u3048\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u8a66\u3057\u306b\u914d\u5217\u306e\u5024\u3092\u5909\u3048\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u306a\u305c\u304b\u52d5\u304d\u307e\u3057\u305f\u3002\u3068\u308a\u3042\u3048\u305a\u305d\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\nconst_struct.cpp\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <iostream>\n#include \"GET_ERR.h\" //CUDA API\u95a2\u6570\u306e\u623b\u308a\u5024\u304b\u3089\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u30de\u30af\u30ed\"GET_ERR\"\u304c\u5165\u3063\u3066\u3044\u308b\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u914d\u5217\u3092\u5ba3\u8a00\n__constant__ int C2[2];\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\uff1f\u306e\u5909\u6570\u3092device\u5074\u3067\u66f8\u304d\u63db\u3048\u308b\u3002\u3053\u308c\u3067\u3082\u30d3\u30eb\u30c9\u304c\u901a\u308b\u30fb\u30fb\u30fb\n__device__ void add() {\n    C2[0] += 1; C2[1] += 1;\n}\n\n//host\u304b\u3089\u30b3\u30d4\u30fc\u3055\u308c\u305fd2\u3068\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304b\u308c\u305fC2\u3068\u306e\u8db3\u3057\u7b97\u3092\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\uff1f\u4e0a\u306e\u914d\u5217\u3092\u66f8\u304d\u63db\u3048\u308b\u524d\u5f8c\u3067\u884c\u3044\u3001\u7d50\u679c\u3092\u8868\u793a\n__global__ void kernel(int *d2) {\n    printf(\"%d, %d: values on constant memory BEFORE modified\\n\", C2[0], C2[1]);\n    d2[0] += C2[0]; d2[1] += C2[1];\n    printf(\"%d, %d: calc on device with values BEFORE modifed\\n\\n\", d2[0], d2[1]);\n\n    printf(\"values on constant memory? are modefied\\n\\n\");\n    add();\n\n    printf(\"%d, %d: values on constant memory AFTER modified\\n\", C2[0], C2[1]);\n    d2[0] += C2[0]; d2[1] += C2[1];\n    printf(\"%d, %d: calc on device with values AFTER modifed\\n\\n\", d2[0], d2[1]);\n}\n\nint main() {\n    int host_d2[2] = { 5,55 };\n    int* dev_d2;\n    int host_C2[2] = { 2,22 };\n    int temp[2] = { 0,0 };\n\n    //\u3044\u3064\u3082\u3069\u304a\u308a\u3001device\u3092\u9078\u629e\u3057\u3066\u3001\u5909\u6570\u306e\u9818\u57df\u3092device\u4e0a\u3067\u78ba\u4fdd\u3057\u3066\u3001\u30b3\u30d4\u30fc\n    GET_ERR(cudaSetDevice(0));\n    GET_ERR(cudaMalloc((void**)&dev_d2, 2 * sizeof(int)));\n    GET_ERR(cudaMemcpy(dev_d2, host_d2, 2 * sizeof(int), cudaMemcpyHostToDevice));\n\n    //\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\uff1f\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3002host\u5074\u304b\u3089\u3057\u304b\u66f8\u304d\u8fbc\u3081\u306a\u3044\u3002\n    GET_ERR(cudaMemcpyToSymbol(C2, host_C2, 2 * sizeof(int)));\n\n    //\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\uff1f\u304b\u3089\u306e\u8aad\u307f\u53d6\u308a\n    GET_ERR(cudaMemcpyFromSymbol(temp, C2, 2 * sizeof(int)));\n    printf(\"%d, %d: values on constant memory BEFORE modified, accessed from host\\n\\n\", temp[0], temp[1]);\n\n    kernel << <1, 1 >> >(dev_d2);\n    GET_ERR(cudaDeviceSynchronize());\n\n    //\u66f8\u304d\u63db\u3048\u3089\u308c\u305f\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\uff1f\u304b\u3089\u306e\u8aad\u307f\u53d6\u308a\n    GET_ERR(cudaMemcpyFromSymbol(temp, C2, 2 * sizeof(int)));\n    printf(\"%d, %d: values on constant memory AFTER modified, accessed from host\\n\", temp[0], temp[1]);\n\n    //\u5f8c\u7247\u4ed8\u3051\n    cudaFree(dev_d2);\n    GET_ERR(cudaDeviceReset());\n\n    return 0;\n}\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306fC2[0] += 1; C2[1] += 1;\u3067\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u69cb\u9020\u4f53\u306b\u5c5e\u3059\u308b\u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u304c\u3001\u306a\u305c\u304b\u30d3\u30eb\u30c9\u304c\u901a\u308a\u3001\u300c\u610f\u56f3\u3057\u305f\u3068\u304a\u308a\u306b\u300d\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002Code Generation\u306fcompute_50,sm_50\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306fx64\u3067\u3057\u305f\u3002\n\u3000\u5b9f\u884c\u7d50\u679c\u306f\u5927\u4f53\u3053\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n2, 22: values on constant memory BEFORE modified, accessed from host\n\n2, 22: values on constant memory BEFORE modified\n7, 77: calc on device with values BEFORE modifed\n\nvalues on constant memory? are modefied\n\n3, 23: values on constant memory AFTER modified\n10, 100: calc on device with values AFTER modifed\n\n3, 23: values on constant memory AFTER modified, accessed from host\n\n\u300c\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3063\u3066device\u4e0a\u304b\u3089\u306f\u66f8\u304d\u63db\u3048\u3089\u308c\u3078\u3093\u306e\u3068\u3061\u3083\u3046\u3093\uff1f\u307b\u3093\u307e\u306b\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304b\u308c\u3066\u3093\u306e\u3001\u3053\u306e\u914d\u5217\uff1f\u300d\u3068\u306a\u3063\u3066\u307e\u3059\u3002\u4e00\u65b9\u3067\u3001NVIDIA\u306e\u30b5\u30a4\u30c8\u3067\u306f\u5802\u3005\u3068\u914d\u5217\u3092\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u8b0e\u306f\u6df1\u307e\u308a\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u306e\u5834\u5408\n\u3000\u3042\u307e\u308a\u610f\u5473\u304c\u3042\u308b\u3068\u306f\u601d\u3048\u307e\u305b\u3093\u304c\u3001\u306a\u3093\u3068\u30af\u30e9\u30b9\u306b\u3082__constant__\u4fee\u98fe\u5b50\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u306a\u304a\u3001\u300cCUDA C \u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300d\u3067\u306f__constant__\u4fee\u98fe\u5b50\u306f\u300c\u30b9\u30ab\u30e9\u30fc\u5909\u6570\u307e\u305f\u306f\u914d\u5217\u5909\u6570\u300d\u306b\u3064\u3051\u308b\u3082\u306e\u3068\u3057\u3066\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff09\u3002\n\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9hage\u3092\u5ba3\u8a00\u3057\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\ntemplate<typename T>\nclass hage {\npublic:\n    T a;\n    __device__ inline T add(T b, T c) {return b + c;}\n    __host__ __device__ inline void modify_private(T imput) {private_a = imput;}\n    __host__ __device__ inline T get_private() { return private_a; }\nprivate:\n    T private_a;\n};\n\n\n\u30d1\u30d6\u30ea\u30c3\u30af\u306a\u30e1\u30f3\u30d0\u5909\u6570\u3068\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u306a\u30e1\u30f3\u30d0\u5909\u6570\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u305f\u666e\u901a\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\u4e00\u65b9\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u8a66\u3057\u306b\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n__host__ __device__ hage(T private_a0, T a0) :private_a(private_a0), a(a0){};   \n\n\u3059\u308b\u3068\u3001\u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002VC\u66f0\u304f\u3001dynamic initialization is not supported for __device__, __constant__ and __shared__ variables\"\uff09\u3060\u305d\u3046\u3067\u3001\u3069\u3046\u3082device\u5074\u306b\u7f6e\u304f\u30af\u30e9\u30b9\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u521d\u671f\u5316\u95a2\u6570\u3092\u30af\u30e9\u30b9\u306e\u5916\u306b\u4f5c\u3063\u3066\u3042\u3052\u307e\u3057\u305f\u3002\ntemplate<typename T>\nhage<T> init_ClassHage(T a0, T private_a0) {\n    hage<T> temp;\n    temp.a = a0;\n    temp.modify_private(private_a0);\n    return temp;\n}\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3092\u3057\u3066\u3042\u3052\u308b\u3068\u3046\u307e\u304f\u3044\u304d\u307e\u3057\u305f\u304c\u3001\u305d\u3046\u3059\u308b\u3068const\u4fee\u98fe\u5b50\u3092\u3064\u3051\u305f\u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316\u306f\u3069\u306a\u3044\u3057\u305f\u3089\u3048\u3048\u3093\u3084\uff1f\u4f7f\u308f\u308c\u3078\u3093\uff1f\u3068\u601d\u3063\u3066\u307e\u3059\u3002\n\u3000\u3067\u3001\u3053\u306e\u30af\u30e9\u30b9hage\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306b\u3042\u308b\u306f\u305a\u306e\u30af\u30e9\u30b9ClassOnConst\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u901a\u306b\u52d5\u304d\u307e\u3057\u305f\u3002\n\nconst_class.cpp\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <iostream>\n#include \"GET_ERR.h\" //CUDA API\u95a2\u6570\u306e\u623b\u308a\u5024\u304b\u3089\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u30de\u30af\u30ed\"GET_ERR\"\u304c\u5165\u3063\u3066\u3044\u308b\n\n//class hage\u3092\u5b9a\u7fa9\ntemplate<typename T>\nclass hage {\npublic:\n    T a;\n    __device__ inline T add(T b, T c) {return b + c;}\n    __host__ __device__ inline void modify_private(T imput) {private_a = imput;}\n    __host__ __device__ inline T get_private() { return private_a; }\n    //device\u4e0a\u306b\u7f6e\u304f\u30af\u30e9\u30b9\u306b\u30e1\u30f3\u30d0\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3082\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3082\u4f7f\u7528\u4e0d\u53ef\n    //__host__ __device__ hage(T private_a0, T a0) :private_a(private_a0), a(a0){}; \n    //__host__ __device__ hage(T private_a0, T a0) { private_a = private_a0; a = a0; };\n    __host__ __device__ ~hage() {};\nprivate:\n    T private_a;\n};\n\n//class hoge\u306e\u521d\u671f\u5316\u95a2\u6570\ntemplate<typename T>\n__host__ __device__ hage<T> init_ClassHage(T a0, T private_a0) {\n    hage<T> temp;\n    temp.a = a0;\n    temp.modify_private(private_a0);\n    return temp;\n}\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u30af\u30e9\u30b9\u3092\u5ba3\u8a00\n__constant__ hage<int> ClassOnConst;\n\n//\u540c\u3058class\"hage\"\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305fClassOnConst\u3068ClassNorm\u3092\u4f7f\u3063\u3066\u8db3\u3057\u7b97\u3092\u3057,\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\uff1f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u308b\ntemplate<typename T>\n__global__ void kernel(hage<T> *ClassNorm) {\n    //class hoge\u5185\u306ea\u306e\u521d\u671f\u5024\u3092\u53d7\u3051\u53d6\u308a\u3001\u8db3\u3057\u7b97\n    T init_a_ClassNorm = (*ClassNorm).a;\n    T init_a_ClassOnConst = ClassOnConst.a;\n    T sum_both_a = ClassOnConst.add((*ClassNorm).a, ClassOnConst.a);\n    printf(\"%d + %d = %d: initial a of ClassNorm and ClassOnConst and sum of both\\n\",\n        init_a_ClassNorm, init_a_ClassOnConst, sum_both_a);\n\n    //class hoge\u5185\u306eprivate_a\u306e\u521d\u671f\u5024\u3092\u53d7\u3051\u53d6\u308a\u8868\u793a\n    T private_ClassNorm = (*ClassNorm).get_private();\n    T private_ClassOnConst = ClassOnConst.get_private();\n    printf(\"%d ,%d: initial private_a of  ClassNorm and ClassOnConst\\n\",\n        private_ClassNorm, private_ClassOnConst);\n\n    //class hoge\u306eprivate_a\u306e\u5024\u3092,ClassOnConst\u3068ClassNorm\u3067\u5165\u308c\u66ff\u3048\u308b\n    (*ClassNorm).modify_private(private_ClassOnConst);\n    ClassOnConst.modify_private(private_ClassNorm);\n\n    //class hoge\u5185\u306eprivate_a\u306e\u5024\u3092\u53d7\u3051\u53d6\u308a\u8868\u793a\u3057,\u5165\u308c\u66ff\u3048\u3089\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    private_ClassNorm = (*ClassNorm).get_private();\n    private_ClassOnConst = ClassOnConst.get_private();\n    printf(\"%d ,%d: private_a AFTER modified of ClassNorm and ClassOnConst\\n\",\n        private_ClassNorm, private_ClassOnConst);\n\n    //\u5168\u304f\u306e\u4f59\u8ac7\u3060\u304c,device\u4e0a\u306e\u95a2\u6570\u304b\u3089\u3082\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3067\u304d\u308b\n    hage<float> hage_flo = init_ClassHage(1.1f, 1.1f);\n}\n\n\nint main() {\n    GET_ERR(cudaSetDevice(0));\n\n    //ClassNorm\u306e\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3001\u521d\u671f\u5024\u3092\u8a2d\u5b9a\n    //hage<int> host_ClassNorm = init_ClassHage(1, 10);\n    hage<int> host_ClassNorm = init_ClassHage(1,10);\n\n    hage<int> *dev_ClassNorm;\n    GET_ERR(cudaMalloc((void**)&dev_ClassNorm, sizeof(hage<int>)));\n    GET_ERR(cudaMemcpy(dev_ClassNorm,&host_ClassNorm,sizeof(hage<int>), cudaMemcpyHostToDevice));\n\n    //ClassNorm\u306b\u521d\u671f\u5024\u3092\u66f8\u304d\u8fbc\u3080\n    hage<int> host_ClassOnConst = init_ClassHage(3, 30);\n    GET_ERR(cudaMemcpyToSymbol(ClassOnConst, &host_ClassOnConst, sizeof(hage<int>)));\n\n    kernel<int> <<< 1, 1 >>>(dev_ClassNorm);\n\n    GET_ERR(cudaDeviceSynchronize());\n\n    //\u5f8c\u7247\u4ed8\u3051\n    cudaFree(dev_ClassNorm);\n    GET_ERR(cudaDeviceReset());\n\n    return 0;\n}\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u7d50\u679c\u304c\u3048\u3089\u308c\u307e\u3059\u3002\n1 + 3 = 4: initial a of ClassNorm and ClassOnConst and sum of both\n10 ,30: initial private_a of  ClassNorm and ClassOnConst\n30 ,10: private_a AFTER modified of ClassNorm and ClassOnConst\n\n\n\u307e\u3068\u3081\n\u3000__constant__\u4fee\u98fe\u5b50\u3092\u3064\u3051\u308b\u3068\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306b\u5909\u6570\u3084\u914d\u5217\u3092\u7f6e\u3051\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u306f\u602a\u3057\u3044\u3067\u3059\u304c\u3001\u4e00\u5fdc\u3064\u3051\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3057\u305f\u3002\u914d\u5217\u3001\u30af\u30e9\u30b9\u3067\u306f\u8981\u7d20\u3001\u30e1\u30f3\u30d0\u5909\u6570\u306e\u5024\u3092\u5909\u3048\u3089\u308c\u3066\u3057\u307e\u3044\u3001\u3069\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u304c\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n#\u3053\u306e\u8a18\u4e8b\u306f\u306a\u306b\uff1f\n\u3000NVIDIA\u306eGPU\u306b\u306f\u300c\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u300d\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u300c\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u300d\u306e\u8a73\u7d30\u306f\u307e\u3041[CUDA C \u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](https://www.amazon.co.jp/dp/B015R0M8TS/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)\u3084[CUDA by Example](https://www.amazon.co.jp/CUDA-Example-%E6%B1%8E%E7%94%A8GPU%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-Jason-Sanders/dp/4844329782)\u3042\u305f\u308a\u3092\u8aad\u3081\u3070\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u300cGPU\u5074\u304b\u3089\u306f\u5909\u66f4\u3067\u304d\u306a\u3044\u3051\u308c\u3069\u3001\u30aa\u30f3\u30c1\u30c3\u30d7\u306a\u30e1\u30e2\u30ea\u3067\u3001\u3044\u3044\u611f\u3058\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u4e00\u3064\u306e\u5024\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u9762\u306b\u306f\u3081\u3063\u307d\u3046\u5f37\u3044\u300d\u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u3000\u3058\u3083\u3041\u3001\u300c\u305d\u306e\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u5909\u6570\u3060\u3051\u3058\u3083\u306a\u304f\u3066\u69cb\u9020\u4f53\u3084\u3001\u30af\u30e9\u30b9\u3082\u7f6e\u3051\u305f\u3089\u3044\u3044\u3088\u306d\u300d\u300cGPU\u5074\u304b\u3089\u306f\u3044\u3058\u308c\u306a\u3044\u3063\u3066\u3044\u3046\u3051\u3069\u3001\u3058\u3083\u3041\u3069\u3046\u3084\u3063\u3066\u521d\u671f\u5316\u3059\u308b\u306e\uff1f\u300d\u3068\u3044\u3046\u7591\u554f\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u3001\u8272\u3005\u904a\u3093\u3067\u307f\u305f\u306e\u3067\u3001\u305d\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n#\u5909\u6570\u3092\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304d\u305f\u3044\u5834\u5408\n\u3000\u53c2\u8003\u66f8\u3067\u4e00\u756a\u6700\u521d\u306b\u66f8\u3044\u3066\u3042\u308b\u4f8b\u3067\u3059\u3002\u4e00\u3064\u305a\u3064\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3000\u307e\u3059\u306f\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304d\u305f\u3044\u5909\u6570\u3092__\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7__\u306b\u3066\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\n```\n__constant__ int C1;\n```\n\u3055\u3089\u306b\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u969b\u306b```__constant__ int C1 = 3;```\u3068\u3044\u3046\u3088\u3046\u306b\u3001\u5024\u3092\u4e0e\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u306a\u304a\u3001\u666e\u901a\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u540c\u69d8\u306b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3059\u308b\u307e\u3067\u751f\u304d\u6b8b\u308a\u7d9a\u3051\u307e\u3059\u3002\n\u3000\u3053\u3046\u3057\u3066\u5ba3\u8a00\u3057\u305fC1\u306f\u539f\u5247\u3068\u3057\u3066\u3001device\u5074\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307fonly\u306e\u30a2\u30af\u30bb\u30b9\u3057\u304b\u3067\u304d\u307e\u305b\u3093\u3002host\u5074\u304b\u3089\u306f\uff1f\u3068\u3044\u3046\u3068\u3001\u6b21\u306eAPI\u95a2\u6570\u3067\u5024\u3092\u4f55\u5ea6\u3067\u3082\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\n```\ncudaMemcpyToSymbol(C1, &host_C1, sizeof(int));   //host\u304b\u3089\u66f8\u304d\u8fbc\u307f\ncudaMemcpyFromSymbol(&host_C1, C1, sizeof(int)); //host\u306b\u8aad\u307f\u8fbc\u307f\n```\n\u4f8b\u3048\u3070\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u5024\u3092\u66f8\u304d\u8fbc\u3093\u3067\u304b\u3089\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3001\u7d42\u308f\u3063\u305f\u3089\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u3066\u3001\u307e\u305f\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u3044\u3046\u3053\u3068\u3082\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\n```\ncudaMemcpyToSymbol(C1, &host_C1, sizeof(int)); //\u4e00\u56de\u76ee\u306e\u66f8\u304d\u8fbc\u307f\nkernel << <1, 1 >> >(dev_d1);\nhost_C1 = 100;\ncudaMemcpyToSymbol(C1, &host_C1, sizeof(int)); //\u4e8c\u56de\u76ee\u306e\u66f8\u304d\u8fbc\u307f\nkernel << <1, 1 >> >(dev_d1);\n```\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u3066\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001host\u304b\u3089\u30b3\u30d4\u30fc\u3055\u308c\u305fdec_d1\u3068\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304b\u308c\u305fC1\u3068\u306e\u8db3\u3057\u7b97\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u4e00\u56de\u8db3\u3057\u7b97\u3092\u884c\u3063\u305f\u5f8c\u306b\u3001host\u5074\u304b\u3089C1\u3092\u66f8\u304d\u63db\u3048\u3066\u3001\u3082\u3046\u4e00\u5ea6\u8db3\u3057\u7b97\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp:constant_1.cu\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <iostream>\n#include \"GET_ERR.h\" //CUDA API\u95a2\u6570\u306e\u623b\u308a\u5024\u304b\u3089\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u30de\u30af\u30ed\"GET_ERR\"\u304c\u5165\u3063\u3066\u3044\u308b\nusing namespace std;\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5909\u6570\u3092\u5ba3\u8a00\n__constant__ int C1;\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306e\u5909\u6570\u3068\u3001\u9001\u3089\u308c\u3066\u304d\u305f\u5909\u6570\u3092\u8db3\u3057\u3066\u8868\u793a\n__global__ void kernel(int *d1) {\n\t*d1 += C1;\n\tprintf(\"%d: calc on device\\n\", *d1);\n\t//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5024\u3092\u3044\u3058\u308d\u3046\u3068\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n\t//C1 += 1;\n}\n\nint main() {\n\t//\u3075\u3064\u3046\u306e\u5909\u6570\n\tint host_d1 = 1;\n\tint* dev_d1;\n\tint host_C1 = 10;\n\n\t//\u3044\u3064\u3082\u3069\u304a\u308a\u3001device\u3092\u9078\u629e\u3057\u3066\u3001\u5909\u6570\u306e\u9818\u57df\u3092device\u4e0a\u3067\u78ba\u4fdd\u3057\u3066\u3001\u30b3\u30d4\u30fc\n\tGET_ERR(cudaSetDevice(0));\n\tGET_ERR(cudaMalloc((void**)&dev_d1, sizeof(int)));\n\tGET_ERR(cudaMemcpy(dev_d1, &host_d1, sizeof(int), cudaMemcpyHostToDevice));\n\n\t//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3002host\u5074\u304b\u3089\u3057\u304b\u66f8\u304d\u8fbc\u3081\u306a\u3044\u3002\n\tGET_ERR(cudaMemcpyToSymbol(C1, &host_C1, sizeof(int)));\n\n\tkernel << <1, 1 >> >(dev_d1);\n\n\t//\u51e6\u7406\u5f8c\u3082\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5024\u304c\u5909\u5316\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u78ba\u304b\u3081\u308b\n\tGET_ERR(cudaMemcpyFromSymbol(&host_C1, C1, sizeof(int)));\n\tcout << host_C1 << \": value on constant memory\" << endl;\n\n\t//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3002host\u5074\u304b\u3089\u306a\u3089\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n\thost_C1 = 100;\n\tGET_ERR(cudaMemcpyToSymbol(C1, &host_C1, sizeof(int)));\n\tcout <<\"value on constant memory is modified from host\" << endl;\n\n\t//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5024\u304c\u66f8\u304d\u63db\u3048\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u308b\n\tGET_ERR(cudaMemcpyFromSymbol(&host_C1, C1, sizeof(int)));\n\tcout << host_C1 << \": value on constant memory\" << endl;\n\n\tkernel << <1, 1 >> >(dev_d1);\n\n\t//\u5f8c\u7247\u4ed8\u3051\n\tcudaFree(dev_d1);\n\tGET_ERR(cudaDeviceReset());\n\n\treturn 0;\n}\n```\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\n\n```\n11: calc on device\n10: value on constant memory\nvalue on constant memory is modified from host\n100: value on constant memory\n111: calc on device\n```\n\u7279\u7b46\u3059\u3079\u304d\u3053\u3068\u306f\u3001\n\u30fb\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304f\u5909\u6570\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u3067\u5ba3\u8a00\n\u30fbhost\u5074\u306e\u95a2\u6570\u304b\u3089cudaMemcpyToSymbol\u3067\u5024\u3092\u30b3\u30d4\u30fc\u3067\u304d\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u52d5\u304b\u3059\u524d\u5f8c\u3067\u306f\u5e7e\u3089\u3067\u3082\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\n\u30fb\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u5909\u6570\u306fcudaMemcpyFromSymbol\u3067host\u5074\u304b\u3089\u8aad\u3081\u308b\n\u30fbdevice\u5074\u306e\u95a2\u6570\u304b\u3089\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306e\u3088\u3046\u306b\u4f7f\u3048\u308b\n\u30fb\uff08\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3068\u306f\u95a2\u4fc2\u304c\u306a\u3044\u3082\u306e\u306e\uff09host\u5074\u304b\u3089\u66f8\u304d\u8fbc\u307e\u308c\u305f\u5909\u6570dev_d1\u304c\u3001\u4e00\u56de\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u7d42\u4e86\u3057\u305f\u5f8c\u3082\u6b8b\u3063\u3066\u3044\u308b\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u958b\u767a\u74b0\u5883\u304cVS2015\u306e\u5834\u5408\u306f\u3001cudaMemcpyToSymbol\u306b\u304a\u3044\u3066\u300c\u5f15\u6570\u306e\u578b\u304c\u9593\u9055\u3063\u3066\u308b\u3088\u300d\u3068\u8d64\u6ce2\u7dda\u3092\u5f15\u3044\u3066\u8b66\u544a\u3055\u308c\u307e\u3059\u304c\u3001\u7121\u8996\u3059\u308b\u3057\u304b\u306a\u3044\u3067\u3059\u3002\n#\u914d\u5217\u306e\u5834\u5408\n \u5909\u6570\u306e\u5834\u5408\u3068\u307b\u307c\u540c\u69d8\u306b\u3057\u3066\u914d\u5217\u3082\u6271\u3048\u307e\u3059\u3088\u3001\u3068\u3044\u3046\u4f8b\u3067\u3059\u3002\u5ba3\u8a00\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u4e0a\u3067\n\n```\n__constant__ int C2[2];\n```\n\u3068\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u3057\u3001host\u5074\u304b\u3089\u306e\u8aad\u307f\u66f8\u304d\u306f\u3001\n\n```\ncudaMemcpyToSymbol(C2, host_C2, 2 * sizeof(int))\ncudaMemcpyToSymbol(host_C2, C2, 2 * sizeof(int))\n```\n\u3068\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u3002\u305d\u308c\u3092\u8e0f\u307e\u3048\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304f\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002C2\u306e\u8981\u7d20\u3068\u3001host\u5074\u304b\u3089\u66f8\u304d\u8fbc\u307e\u308c\u305f\u914d\u5217d2\u306e\u8981\u7d20\u3068\u3092\u8db3\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp:constant_string.cu\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <iostream>\n#include \"GET_ERR.h\" //CUDA API\u95a2\u6570\u306e\u623b\u308a\u5024\u304b\u3089\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u30de\u30af\u30ed\"GET_ERR\"\u304c\u5165\u3063\u3066\u3044\u308b\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u914d\u5217\u3092\u5ba3\u8a00\n__constant__ int C2[2];\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306e\u5909\u6570\u3068\u3001\u9001\u3089\u308c\u3066\u304d\u305f\u5909\u6570\u3092\u8db3\u3057\u3066\u8868\u793a\n//\u30b9\u30ec\u30c3\u30c9\u3092\u4e8c\u3064\u4f7f\u3063\u3066\u3061\u3087\u3063\u3074\u308a\u4e26\u5217\u5316\n__global__ void kernel(int *d2) {\n\tint id = threadIdx.x;\n\td2[id] += C2[id];\n\t__syncthreads(); //\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u8a08\u7b97\u3092\u7d42\u3048\u308b\u307e\u3067\u5f85\u3064\n\tif(id == 0) printf(\"%d, %d\\n\", d2[0], d2[1]); //\u7d50\u679c\u3092\u8868\u793a\n}\n\nint main() {\n\t//\u3075\u3064\u3046\u306e\u5909\u6570\n\tint host_d2[2] = { 1,11 };\n\tint* dev_d2;\n\tint host_C2[2] = { 2,22 };\n\n\t//\u3044\u3064\u3082\u3069\u304a\u308a\u3001device\u3092\u9078\u629e\u3057\u3066\u3001\u5909\u6570\u306e\u9818\u57df\u3092device\u4e0a\u3067\u78ba\u4fdd\u3057\u3066\u3001\u30b3\u30d4\u30fc\n\tGET_ERR(cudaSetDevice(0));\n\tGET_ERR(cudaMalloc((void**)&dev_d2, 2 * sizeof(int)));\n\tGET_ERR(cudaMemcpy(dev_d2, host_d2, 2 * sizeof(int), cudaMemcpyHostToDevice));\n\n\t//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3002host\u5074\u304b\u3089\u3057\u304b\u66f8\u304d\u8fbc\u3081\u306a\u3044\u3002\n\tGET_ERR(cudaMemcpyToSymbol(C2, host_C2, 2 * sizeof(int)));\n\n\tkernel << <1, 2 >> >(dev_d2);\n\n\t//\u5f8c\u7247\u4ed8\u3051\n\tcudaFree(dev_d2);\n\tGET_ERR(cudaDeviceReset());\n\n\treturn 0;\n}\n```\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068```3, 33```\u304c\u8868\u793a\u3055\u308c\u3066\u3001\u4e07\u3005\u6b73\u306a\u308f\u3051\u3067\u3059\u3002\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u914d\u5217\u3092\u5ba3\u8a00\u3059\u308b\u3068\u304d\u306b\u3001```__constant__ int C2[2] = { 2,22 };``` \u306e\u3088\u3046\u306b\u3067\u304d\u308b\u306e\u3082\u3001\u5909\u6570\u306e\u3068\u304d\u3068\u540c\u69d8\u3002\n\n##\u3042\u308c\u308c\uff5e\uff1f\u304a\u304b\u3057\u3044\u306a\u3041\uff1f\uff1f\n\u3000\u5909\u6570\u306e\u5834\u5408\u306f\u3001device\u4e0a\u304b\u3089\u306e\u66f8\u304d\u63db\u3048\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u8a66\u3057\u306b__\u914d\u5217\u306e\u5024\u3092\u5909\u3048\u308b__\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u306a\u305c\u304b\u52d5\u304d\u307e\u3057\u305f\u3002\u3068\u308a\u3042\u3048\u305a\u305d\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n```cpp:const_struct.cpp\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <iostream>\n#include \"GET_ERR.h\" //CUDA API\u95a2\u6570\u306e\u623b\u308a\u5024\u304b\u3089\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u30de\u30af\u30ed\"GET_ERR\"\u304c\u5165\u3063\u3066\u3044\u308b\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u914d\u5217\u3092\u5ba3\u8a00\n__constant__ int C2[2];\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\uff1f\u306e\u5909\u6570\u3092device\u5074\u3067\u66f8\u304d\u63db\u3048\u308b\u3002\u3053\u308c\u3067\u3082\u30d3\u30eb\u30c9\u304c\u901a\u308b\u30fb\u30fb\u30fb\n__device__ void add() {\n\tC2[0] += 1; C2[1] += 1;\n}\n\n//host\u304b\u3089\u30b3\u30d4\u30fc\u3055\u308c\u305fd2\u3068\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304b\u308c\u305fC2\u3068\u306e\u8db3\u3057\u7b97\u3092\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\uff1f\u4e0a\u306e\u914d\u5217\u3092\u66f8\u304d\u63db\u3048\u308b\u524d\u5f8c\u3067\u884c\u3044\u3001\u7d50\u679c\u3092\u8868\u793a\n__global__ void kernel(int *d2) {\n\tprintf(\"%d, %d: values on constant memory BEFORE modified\\n\", C2[0], C2[1]);\n\td2[0] += C2[0]; d2[1] += C2[1];\n\tprintf(\"%d, %d: calc on device with values BEFORE modifed\\n\\n\", d2[0], d2[1]);\n\n\tprintf(\"values on constant memory? are modefied\\n\\n\");\n\tadd();\n\n\tprintf(\"%d, %d: values on constant memory AFTER modified\\n\", C2[0], C2[1]);\n\td2[0] += C2[0]; d2[1] += C2[1];\n\tprintf(\"%d, %d: calc on device with values AFTER modifed\\n\\n\", d2[0], d2[1]);\n}\n\nint main() {\n\tint host_d2[2] = { 5,55 };\n\tint* dev_d2;\n\tint host_C2[2] = { 2,22 };\n\tint temp[2] = { 0,0 };\n\n\t//\u3044\u3064\u3082\u3069\u304a\u308a\u3001device\u3092\u9078\u629e\u3057\u3066\u3001\u5909\u6570\u306e\u9818\u57df\u3092device\u4e0a\u3067\u78ba\u4fdd\u3057\u3066\u3001\u30b3\u30d4\u30fc\n\tGET_ERR(cudaSetDevice(0));\n\tGET_ERR(cudaMalloc((void**)&dev_d2, 2 * sizeof(int)));\n\tGET_ERR(cudaMemcpy(dev_d2, host_d2, 2 * sizeof(int), cudaMemcpyHostToDevice));\n\n\t//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\uff1f\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3002host\u5074\u304b\u3089\u3057\u304b\u66f8\u304d\u8fbc\u3081\u306a\u3044\u3002\n\tGET_ERR(cudaMemcpyToSymbol(C2, host_C2, 2 * sizeof(int)));\n\n\t//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\uff1f\u304b\u3089\u306e\u8aad\u307f\u53d6\u308a\n\tGET_ERR(cudaMemcpyFromSymbol(temp, C2, 2 * sizeof(int)));\n\tprintf(\"%d, %d: values on constant memory BEFORE modified, accessed from host\\n\\n\", temp[0], temp[1]);\n\n\tkernel << <1, 1 >> >(dev_d2);\n\tGET_ERR(cudaDeviceSynchronize());\n\n\t//\u66f8\u304d\u63db\u3048\u3089\u308c\u305f\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\uff1f\u304b\u3089\u306e\u8aad\u307f\u53d6\u308a\n\tGET_ERR(cudaMemcpyFromSymbol(temp, C2, 2 * sizeof(int)));\n\tprintf(\"%d, %d: values on constant memory AFTER modified, accessed from host\\n\", temp[0], temp[1]);\n\n\t//\u5f8c\u7247\u4ed8\u3051\n\tcudaFree(dev_d2);\n\tGET_ERR(cudaDeviceReset());\n\n\treturn 0;\n}\n```\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f```C2[0] += 1; C2[1] += 1;```\u3067\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u69cb\u9020\u4f53\u306b\u5c5e\u3059\u308b\u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u304c\u3001\u306a\u305c\u304b\u30d3\u30eb\u30c9\u304c\u901a\u308a\u3001\u300c\u610f\u56f3\u3057\u305f\u3068\u304a\u308a\u306b\u300d\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002Code Generation\u306f```compute_50,sm_50```\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306fx64\u3067\u3057\u305f\u3002\n\u3000\u5b9f\u884c\u7d50\u679c\u306f\u5927\u4f53\u3053\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp:\n2, 22: values on constant memory BEFORE modified, accessed from host\n\n2, 22: values on constant memory BEFORE modified\n7, 77: calc on device with values BEFORE modifed\n\nvalues on constant memory? are modefied\n\n3, 23: values on constant memory AFTER modified\n10, 100: calc on device with values AFTER modifed\n\n3, 23: values on constant memory AFTER modified, accessed from host\n```\n\n\u300c\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u3063\u3066device\u4e0a\u304b\u3089\u306f\u66f8\u304d\u63db\u3048\u3089\u308c\u3078\u3093\u306e\u3068\u3061\u3083\u3046\u3093\uff1f\u307b\u3093\u307e\u306b\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u304b\u308c\u3066\u3093\u306e\u3001\u3053\u306e\u914d\u5217\uff1f\u300d\u3068\u306a\u3063\u3066\u307e\u3059\u3002\u4e00\u65b9\u3067\u3001[NVIDIA\u306e\u30b5\u30a4\u30c8](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory)\u3067\u306f\u5802\u3005\u3068\u914d\u5217\u3092\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u306b\u7f6e\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u8b0e\u306f\u6df1\u307e\u308a\u307e\u3059\u3002\n#\u30af\u30e9\u30b9\u306e\u5834\u5408\n\u3000\u3042\u307e\u308a\u610f\u5473\u304c\u3042\u308b\u3068\u306f\u601d\u3048\u307e\u305b\u3093\u304c\u3001\u306a\u3093\u3068\u30af\u30e9\u30b9\u306b\u3082```__constant__```\u4fee\u98fe\u5b50\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u306a\u304a\u3001\u300cCUDA C \u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300d\u3067\u306f```__constant__```\u4fee\u98fe\u5b50\u306f\u300c\u30b9\u30ab\u30e9\u30fc\u5909\u6570\u307e\u305f\u306f\u914d\u5217\u5909\u6570\u300d\u306b\u3064\u3051\u308b\u3082\u306e\u3068\u3057\u3066\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff09\u3002\n\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9hage\u3092\u5ba3\u8a00\u3057\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n\n```cpp:\ntemplate<typename T>\nclass hage {\npublic:\n\tT a;\n\t__device__ inline T add(T b, T c) {return b + c;}\n\t__host__ __device__ inline void modify_private(T imput) {private_a = imput;}\n\t__host__ __device__ inline T get_private() { return private_a; }\nprivate:\n\tT private_a;\n};\n\n```\n\u30d1\u30d6\u30ea\u30c3\u30af\u306a\u30e1\u30f3\u30d0\u5909\u6570\u3068\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u306a\u30e1\u30f3\u30d0\u5909\u6570\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u305f\u666e\u901a\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\u4e00\u65b9\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u8a66\u3057\u306b\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n```cpp:\n__host__ __device__ hage(T private_a0, T a0) :private_a(private_a0), a(a0){};\t\n```\n\u3059\u308b\u3068\u3001\u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002VC\u66f0\u304f\u3001```dynamic initialization is not supported for __device__, __constant__ and __shared__ variables\"```\uff09\u3060\u305d\u3046\u3067\u3001\u3069\u3046\u3082device\u5074\u306b\u7f6e\u304f\u30af\u30e9\u30b9\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u521d\u671f\u5316\u95a2\u6570\u3092\u30af\u30e9\u30b9\u306e\u5916\u306b\u4f5c\u3063\u3066\u3042\u3052\u307e\u3057\u305f\u3002\n\n```cpp:\ntemplate<typename T>\nhage<T> init_ClassHage(T a0, T private_a0) {\n\thage<T> temp;\n\ttemp.a = a0;\n\ttemp.modify_private(private_a0);\n\treturn temp;\n}\n```\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3092\u3057\u3066\u3042\u3052\u308b\u3068\u3046\u307e\u304f\u3044\u304d\u307e\u3057\u305f\u304c\u3001\u305d\u3046\u3059\u308b\u3068__const__\u4fee\u98fe\u5b50\u3092\u3064\u3051\u305f\u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316\u306f\u3069\u306a\u3044\u3057\u305f\u3089\u3048\u3048\u3093\u3084\uff1f\u4f7f\u308f\u308c\u3078\u3093\uff1f\u3068\u601d\u3063\u3066\u307e\u3059\u3002\n\u3000\u3067\u3001\u3053\u306e\u30af\u30e9\u30b9hage\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306b\u3042\u308b\u306f\u305a\u306e\u30af\u30e9\u30b9ClassOnConst\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u901a\u306b\u52d5\u304d\u307e\u3057\u305f\u3002\n\n```cpp:const_class.cpp\n#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include <iostream>\n#include \"GET_ERR.h\" //CUDA API\u95a2\u6570\u306e\u623b\u308a\u5024\u304b\u3089\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u30de\u30af\u30ed\"GET_ERR\"\u304c\u5165\u3063\u3066\u3044\u308b\n\n//class hage\u3092\u5b9a\u7fa9\ntemplate<typename T>\nclass hage {\npublic:\n\tT a;\n\t__device__ inline T add(T b, T c) {return b + c;}\n\t__host__ __device__ inline void modify_private(T imput) {private_a = imput;}\n\t__host__ __device__ inline T get_private() { return private_a; }\n\t//device\u4e0a\u306b\u7f6e\u304f\u30af\u30e9\u30b9\u306b\u30e1\u30f3\u30d0\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3082\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3082\u4f7f\u7528\u4e0d\u53ef\n\t//__host__ __device__ hage(T private_a0, T a0) :private_a(private_a0), a(a0){};\t\n\t//__host__ __device__ hage(T private_a0, T a0) { private_a = private_a0; a = a0; };\n\t__host__ __device__ ~hage() {};\nprivate:\n\tT private_a;\n};\n\n//class hoge\u306e\u521d\u671f\u5316\u95a2\u6570\ntemplate<typename T>\n__host__ __device__ hage<T> init_ClassHage(T a0, T private_a0) {\n\thage<T> temp;\n\ttemp.a = a0;\n\ttemp.modify_private(private_a0);\n\treturn temp;\n}\n\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\u30af\u30e9\u30b9\u3092\u5ba3\u8a00\n__constant__ hage<int> ClassOnConst;\n\n//\u540c\u3058class\"hage\"\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305fClassOnConst\u3068ClassNorm\u3092\u4f7f\u3063\u3066\u8db3\u3057\u7b97\u3092\u3057,\n//\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306e\uff1f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u308b\ntemplate<typename T>\n__global__ void kernel(hage<T> *ClassNorm) {\n\t//class hoge\u5185\u306ea\u306e\u521d\u671f\u5024\u3092\u53d7\u3051\u53d6\u308a\u3001\u8db3\u3057\u7b97\n\tT init_a_ClassNorm = (*ClassNorm).a;\n\tT init_a_ClassOnConst = ClassOnConst.a;\n\tT sum_both_a = ClassOnConst.add((*ClassNorm).a, ClassOnConst.a);\n\tprintf(\"%d + %d = %d: initial a of ClassNorm and ClassOnConst and sum of both\\n\",\n\t\tinit_a_ClassNorm, init_a_ClassOnConst, sum_both_a);\n\t\n\t//class hoge\u5185\u306eprivate_a\u306e\u521d\u671f\u5024\u3092\u53d7\u3051\u53d6\u308a\u8868\u793a\n\tT private_ClassNorm = (*ClassNorm).get_private();\n\tT private_ClassOnConst = ClassOnConst.get_private();\n\tprintf(\"%d ,%d: initial private_a of  ClassNorm and ClassOnConst\\n\",\n\t\tprivate_ClassNorm, private_ClassOnConst);\n\n\t//class hoge\u306eprivate_a\u306e\u5024\u3092,ClassOnConst\u3068ClassNorm\u3067\u5165\u308c\u66ff\u3048\u308b\n\t(*ClassNorm).modify_private(private_ClassOnConst);\n\tClassOnConst.modify_private(private_ClassNorm);\n\n\t//class hoge\u5185\u306eprivate_a\u306e\u5024\u3092\u53d7\u3051\u53d6\u308a\u8868\u793a\u3057,\u5165\u308c\u66ff\u3048\u3089\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n\tprivate_ClassNorm = (*ClassNorm).get_private();\n\tprivate_ClassOnConst = ClassOnConst.get_private();\n\tprintf(\"%d ,%d: private_a AFTER modified of ClassNorm and ClassOnConst\\n\",\n\t\tprivate_ClassNorm, private_ClassOnConst);\n\n\t//\u5168\u304f\u306e\u4f59\u8ac7\u3060\u304c,device\u4e0a\u306e\u95a2\u6570\u304b\u3089\u3082\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3067\u304d\u308b\n\thage<float> hage_flo = init_ClassHage(1.1f, 1.1f);\n}\n\n\nint main() {\n\tGET_ERR(cudaSetDevice(0));\n\n\t//ClassNorm\u306e\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3001\u521d\u671f\u5024\u3092\u8a2d\u5b9a\n\t//hage<int> host_ClassNorm = init_ClassHage(1, 10);\n\thage<int> host_ClassNorm = init_ClassHage(1,10);\n\n\thage<int> *dev_ClassNorm;\n\tGET_ERR(cudaMalloc((void**)&dev_ClassNorm, sizeof(hage<int>)));\n\tGET_ERR(cudaMemcpy(dev_ClassNorm,&host_ClassNorm,sizeof(hage<int>), cudaMemcpyHostToDevice));\n\n\t//ClassNorm\u306b\u521d\u671f\u5024\u3092\u66f8\u304d\u8fbc\u3080\n\thage<int> host_ClassOnConst = init_ClassHage(3, 30);\n\tGET_ERR(cudaMemcpyToSymbol(ClassOnConst, &host_ClassOnConst, sizeof(hage<int>)));\n\n\tkernel<int> <<< 1, 1 >>>(dev_ClassNorm);\n\n\tGET_ERR(cudaDeviceSynchronize());\n\n\t//\u5f8c\u7247\u4ed8\u3051\n\tcudaFree(dev_ClassNorm);\n\tGET_ERR(cudaDeviceReset());\n\n\treturn 0;\n}\n```\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u7d50\u679c\u304c\u3048\u3089\u308c\u307e\u3059\u3002\n\n```cpp\n1 + 3 = 4: initial a of ClassNorm and ClassOnConst and sum of both\n10 ,30: initial private_a of  ClassNorm and ClassOnConst\n30 ,10: private_a AFTER modified of ClassNorm and ClassOnConst\n```\n#\u307e\u3068\u3081\n\u3000```__constant__```\u4fee\u98fe\u5b50\u3092\u3064\u3051\u308b\u3068\u3001\u30b3\u30f3\u30b9\u30bf\u30f3\u30c8\u30e1\u30e2\u30ea\u4e0a\u306b\u5909\u6570\u3084\u914d\u5217\u3092\u7f6e\u3051\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u306f\u602a\u3057\u3044\u3067\u3059\u304c\u3001\u4e00\u5fdc\u3064\u3051\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3057\u305f\u3002\u914d\u5217\u3001\u30af\u30e9\u30b9\u3067\u306f\u8981\u7d20\u3001\u30e1\u30f3\u30d0\u5909\u6570\u306e\u5024\u3092\u5909\u3048\u3089\u308c\u3066\u3057\u307e\u3044\u3001\u3069\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u304c\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n"}