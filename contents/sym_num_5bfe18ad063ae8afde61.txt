{"context": "\n\n\u306f\u3058\u3081\u306b\nISLisp\u51e6\u7406\u7cfb\u3092\u81ea\u4f5c\u3057\u305f\u3068\u304d\u306bISLisp\u898f\u683c\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u691c\u67fb\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n\u5229\u7528\u65b9\u6cd5\n\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30bb\u30fc\u30d6\u3057\u3001\u51e6\u7406\u7cfb\u304b\u3089\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7d50\u679c\u304c\u753b\u9762\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u7bc4\u56f2\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306e\u90e8\u5206\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u51fa\u5178\nISLisp\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0\nhttp://islisp.org/jp/verification-jp.html\n\n\u30b3\u30fc\u30c9\n\n(defmacro test(form1 form2 :rest pred)\n  (cond ((null pred)\n         `(if (equal ,form1 ',form2)\n              (format (standard-output) \"\" ',form1)\n              ;;(format (standard-output) \"~S is ok~%\" ',form1)\n              (format (standard-output) \"~S is bad~%\" ',form1)))\n        ((and (not (null pred))(consp form1))\n         `(if (,@pred ,form1 ',form2)\n              (format (standard-output) \"\" ',form1)\n              ;;(format (standard-output) \"~S is ok~%\" ',form1)\n              (format (standard-output) \"~S is bad~%\" ',form1)))))\n\n\n(defclass foo-5 () \n   ((a :reader read-foo-a\n       :writer write-foo-a\n       :accessor access-foo-a\n       :boundp boundp-foo-a\n       :initarg a\n       :initform 1)))\n;;\n(test (generic-function-p #'read-foo-a) t)\n(test (generic-function-p #'write-foo-a) t)\n(test (generic-function-p #'access-foo-a) t)\n(test (generic-function-p #'boundp-foo-a) t)\n;;\n(defglobal x (create (class foo-5)))\n;;\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 1 eql)\n(test (access-foo-a x) 1 eql)\n;;\n(test (write-foo-a 10 x) 10 eql)\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 10 eql)\n(test (access-foo-a x) 10 eql)\n;;\n(test (setf (access-foo-a x) 100) 100 eql)\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 100 eql)\n(test (access-foo-a x) 100 eql)\n\n;;\n(defglobal x (create (class foo-5) 'a 10))\n;;\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 10 eql)\n(test (access-foo-a x) 10 eql)\n;;\n(defglobal x (create (class foo-5) 'b 99))\n;;\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 1 eql)\n(test (access-foo-a x) 1 eql)\n;;\n(defclass foo-6 ()\n   ((a :reader read-foo-a\n       :writer write-foo-a\n       :accessor access-foo-a\n       :boundp boundp-foo-a)))\n;;\n(defglobal x (create (class foo-6)))\n;;\n(test (boundp-foo-a x) nil)\n(test (write-foo-a 10 x) 10 eql)\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 10 eql)\n(test (access-foo-a x) 10 eql)\n(defglobal x (create (class foo-5) 'b 99))\n;;\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 1 eql)\n(test (access-foo-a x) 1 eql)\n;;\n(defclass foo-6 ()\n   ((a :reader read-foo-a\n       :writer write-foo-a\n       :accessor access-foo-a\n       :boundp boundp-foo-a)))\n;;\n(defglobal x (create (class foo-6)))\n;;\n(test (boundp-foo-a x) nil)\n(test (write-foo-a 10 x) 10 eql)\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 10 eql)\n(test (access-foo-a x) 10 eql)\n\n(defgeneric foo-g-1 (x))\n(test (generic-function-p #'foo-g-1) t)\n(defun foo-9 (x))\n(test (generic-function-p #'foo-9) nil)\n\n(defgeneric foo-g-4 (x))\n(defmethod foo-g-4 (x) 'object-1)\n(defmethod foo-g-4 :around (x) 'around-object-1)\n(defmethod foo-g-4 :before (x) 'before-object-1)\n(defmethod foo-g-4 :after (x) 'after-object-1)\n;; \n(defclass aa () ())\n(defgeneric foo-g-5 (x))\n(defmethod foo-g-5 ((x aa)) 'aa-1)\n(defmethod foo-g-5 :around ((x aa)) 'around-aa-1)\n(defmethod foo-g-5 :before ((x aa)) 'before-aa-1)\n(defmethod foo-g-5 :after ((x aa)) 'after-aa-1)\n\n(defclass c1 () ())\n(defclass c2 (c1) ())\n(defclass c3 (c2) ())\n(defclass c4 () ())\n(defglobal c1 (create (class c1)))\n(defglobal c2 (create (class c2)))\n(defglobal c3 (create (class c3)))\n(defglobal c4 (create (class c4)))\n\n(defgeneric foo-g-30 (x y)\n   (:method (x y)\n        '(<object> <object>))\n   (:method (x (y c1))\n        '(<object> c1))\n   (:method (x (y c2))\n        '(<object> c2))\n   (:method (x (y c3))\n        '(<object> c3))\n   (:method ((x c1) y)\n        '(c1 <object>))\n   (:method ((x c1) (y c1))\n        '(c1 c1))\n   (:method ((x c1) (y c2))\n        '(c1 c2))\n   (:method ((x c1) (y c3))\n        '(c1 c3))\n   (:method ((x c2) y)\n        '(c2 <object>))\n   (:method ((x c2) (y c1))\n        '(c2 c1))\n   (:method ((x c2) (y c2))\n        '(c2 c2))\n   (:method ((x c2) (y c3))\n        '(c2 c3))\n   (:method ((x c3) y)\n        '(c3 <object>))\n   (:method ((x c3) (y c1))\n        '(c3 c1))\n   (:method ((x c3) (y c2))\n        '(c3 c2))\n   (:method ((x c3) (y c3))\n        '(c3 c3))\n   )\n\n(test (foo-g-30 1 1) (<object> <object>) equal)\n(test (foo-g-30 1 c1) (<object> c1) equal)\n(test (foo-g-30 1 c2) (<object> c2) equal)\n(test (foo-g-30 1 c3) (<object> c3) equal)\n(test (foo-g-30 1 c4) (<object> <object>) equal)\n(test (foo-g-30 c1 1) (c1 <object>) equal)\n(test (foo-g-30 c1 c1) (c1 c1) equal)\n(test (foo-g-30 c1 c2) (c1 c2) equal)\n(test (foo-g-30 c1 c3) (c1 c3) equal)\n(test (foo-g-30 c1 c4) (c1 <object>) equal)\n(test (foo-g-30 c2 1) (c2 <object>) equal)\n(test (foo-g-30 c2 c1) (c2 c1) equal)\n(test (foo-g-30 c2 c2) (c2 c2) equal)\n(test (foo-g-30 c2 c3) (c2 c3) equal)\n(test (foo-g-30 c2 c4) (c2 <object>) equal)\n(test (foo-g-30 c3 1) (c3 <object>) equal)\n(test (foo-g-30 c3 c1) (c3 c1) equal)\n(test (foo-g-30 c3 c2) (c3 c2) equal)\n(test (foo-g-30 c3 c3) (c3 c3) equal)\n(test (foo-g-30 c3 c4) (c3 <object>) equal)\n(test (foo-g-30 c4 1) (<object> <object>) equal)\n(test (foo-g-30 c4 c1) (<object> c1) equal)\n(test (foo-g-30 c4 c2) (<object> c2) equal)\n(test (foo-g-30 c4 c3) (<object> c3) equal)\n(test (foo-g-30 c4 c4) (<object> <object>) equal)\n;;\n\n\n#\u306f\u3058\u3081\u306b\nISLisp\u51e6\u7406\u7cfb\u3092\u81ea\u4f5c\u3057\u305f\u3068\u304d\u306bISLisp\u898f\u683c\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u691c\u67fb\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n#\u5229\u7528\u65b9\u6cd5\n\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30bb\u30fc\u30d6\u3057\u3001\u51e6\u7406\u7cfb\u304b\u3089\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7d50\u679c\u304c\u753b\u9762\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n#\u7bc4\u56f2\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306e\u90e8\u5206\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u51fa\u5178\nISLisp\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0\nhttp://islisp.org/jp/verification-jp.html\n\n\n\n#\u30b3\u30fc\u30c9\n\n```\n\n(defmacro test(form1 form2 :rest pred)\n  (cond ((null pred)\n         `(if (equal ,form1 ',form2)\n              (format (standard-output) \"\" ',form1)\n              ;;(format (standard-output) \"~S is ok~%\" ',form1)\n              (format (standard-output) \"~S is bad~%\" ',form1)))\n        ((and (not (null pred))(consp form1))\n         `(if (,@pred ,form1 ',form2)\n              (format (standard-output) \"\" ',form1)\n              ;;(format (standard-output) \"~S is ok~%\" ',form1)\n              (format (standard-output) \"~S is bad~%\" ',form1)))))\n        \n\n(defclass foo-5 () \n   ((a :reader read-foo-a\n       :writer write-foo-a\n       :accessor access-foo-a\n       :boundp boundp-foo-a\n       :initarg a\n       :initform 1)))\n;;\n(test (generic-function-p #'read-foo-a) t)\n(test (generic-function-p #'write-foo-a) t)\n(test (generic-function-p #'access-foo-a) t)\n(test (generic-function-p #'boundp-foo-a) t)\n;;\n(defglobal x (create (class foo-5)))\n;;\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 1 eql)\n(test (access-foo-a x) 1 eql)\n;;\n(test (write-foo-a 10 x) 10 eql)\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 10 eql)\n(test (access-foo-a x) 10 eql)\n;;\n(test (setf (access-foo-a x) 100) 100 eql)\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 100 eql)\n(test (access-foo-a x) 100 eql)\n\n;;\n(defglobal x (create (class foo-5) 'a 10))\n;;\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 10 eql)\n(test (access-foo-a x) 10 eql)\n;;\n(defglobal x (create (class foo-5) 'b 99))\n;;\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 1 eql)\n(test (access-foo-a x) 1 eql)\n;;\n(defclass foo-6 ()\n   ((a :reader read-foo-a\n       :writer write-foo-a\n       :accessor access-foo-a\n       :boundp boundp-foo-a)))\n;;\n(defglobal x (create (class foo-6)))\n;;\n(test (boundp-foo-a x) nil)\n(test (write-foo-a 10 x) 10 eql)\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 10 eql)\n(test (access-foo-a x) 10 eql)\n(defglobal x (create (class foo-5) 'b 99))\n;;\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 1 eql)\n(test (access-foo-a x) 1 eql)\n;;\n(defclass foo-6 ()\n   ((a :reader read-foo-a\n       :writer write-foo-a\n       :accessor access-foo-a\n       :boundp boundp-foo-a)))\n;;\n(defglobal x (create (class foo-6)))\n;;\n(test (boundp-foo-a x) nil)\n(test (write-foo-a 10 x) 10 eql)\n(test (boundp-foo-a x) t)\n(test (read-foo-a x) 10 eql)\n(test (access-foo-a x) 10 eql)\n\n(defgeneric foo-g-1 (x))\n(test (generic-function-p #'foo-g-1) t)\n(defun foo-9 (x))\n(test (generic-function-p #'foo-9) nil)\n\n(defgeneric foo-g-4 (x))\n(defmethod foo-g-4 (x) 'object-1)\n(defmethod foo-g-4 :around (x) 'around-object-1)\n(defmethod foo-g-4 :before (x) 'before-object-1)\n(defmethod foo-g-4 :after (x) 'after-object-1)\n;; \n(defclass aa () ())\n(defgeneric foo-g-5 (x))\n(defmethod foo-g-5 ((x aa)) 'aa-1)\n(defmethod foo-g-5 :around ((x aa)) 'around-aa-1)\n(defmethod foo-g-5 :before ((x aa)) 'before-aa-1)\n(defmethod foo-g-5 :after ((x aa)) 'after-aa-1)\n\n(defclass c1 () ())\n(defclass c2 (c1) ())\n(defclass c3 (c2) ())\n(defclass c4 () ())\n(defglobal c1 (create (class c1)))\n(defglobal c2 (create (class c2)))\n(defglobal c3 (create (class c3)))\n(defglobal c4 (create (class c4)))\n\n(defgeneric foo-g-30 (x y)\n   (:method (x y)\n\t    '(<object> <object>))\n   (:method (x (y c1))\n\t    '(<object> c1))\n   (:method (x (y c2))\n\t    '(<object> c2))\n   (:method (x (y c3))\n\t    '(<object> c3))\n   (:method ((x c1) y)\n\t    '(c1 <object>))\n   (:method ((x c1) (y c1))\n\t    '(c1 c1))\n   (:method ((x c1) (y c2))\n\t    '(c1 c2))\n   (:method ((x c1) (y c3))\n\t    '(c1 c3))\n   (:method ((x c2) y)\n\t    '(c2 <object>))\n   (:method ((x c2) (y c1))\n\t    '(c2 c1))\n   (:method ((x c2) (y c2))\n\t    '(c2 c2))\n   (:method ((x c2) (y c3))\n\t    '(c2 c3))\n   (:method ((x c3) y)\n\t    '(c3 <object>))\n   (:method ((x c3) (y c1))\n\t    '(c3 c1))\n   (:method ((x c3) (y c2))\n\t    '(c3 c2))\n   (:method ((x c3) (y c3))\n\t    '(c3 c3))\n   )\n\n(test (foo-g-30 1 1) (<object> <object>) equal)\n(test (foo-g-30 1 c1) (<object> c1) equal)\n(test (foo-g-30 1 c2) (<object> c2) equal)\n(test (foo-g-30 1 c3) (<object> c3) equal)\n(test (foo-g-30 1 c4) (<object> <object>) equal)\n(test (foo-g-30 c1 1) (c1 <object>) equal)\n(test (foo-g-30 c1 c1) (c1 c1) equal)\n(test (foo-g-30 c1 c2) (c1 c2) equal)\n(test (foo-g-30 c1 c3) (c1 c3) equal)\n(test (foo-g-30 c1 c4) (c1 <object>) equal)\n(test (foo-g-30 c2 1) (c2 <object>) equal)\n(test (foo-g-30 c2 c1) (c2 c1) equal)\n(test (foo-g-30 c2 c2) (c2 c2) equal)\n(test (foo-g-30 c2 c3) (c2 c3) equal)\n(test (foo-g-30 c2 c4) (c2 <object>) equal)\n(test (foo-g-30 c3 1) (c3 <object>) equal)\n(test (foo-g-30 c3 c1) (c3 c1) equal)\n(test (foo-g-30 c3 c2) (c3 c2) equal)\n(test (foo-g-30 c3 c3) (c3 c3) equal)\n(test (foo-g-30 c3 c4) (c3 <object>) equal)\n(test (foo-g-30 c4 1) (<object> <object>) equal)\n(test (foo-g-30 c4 c1) (<object> c1) equal)\n(test (foo-g-30 c4 c2) (<object> c2) equal)\n(test (foo-g-30 c4 c3) (<object> c3) equal)\n(test (foo-g-30 c4 c4) (<object> <object>) equal)\n;;\n\n```\n", "tags": ["ISLisp", "lisp"]}