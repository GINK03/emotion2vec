{"context": "\u3053\u306e\u8a18\u4e8b\u306fPython-AdventCalandar-2016\u306e16\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u3053\u3093\u306b\u3061\u306f\u3002Python\u3057\u3066\u307e\u3059\u304b\uff1f\u9854\u8a8d\u8b58\u3057\u3066\u307e\u3059\u304b\uff1f\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u3057\u3066\u307e\u3059\u304b\uff1f\n\u3053\u306e\u8a18\u4e8b\u306fPython\u3067\u624b\u8efd\u306b\u9854\u8a8d\u8b58API\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u305f\u3044\u3068\u3044\u3046\u65b9\u306b\u5411\u3051\u305f\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u306f\u5b66\u8853\u7684\u306a\u8a71\u3092\u66f8\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u8272\u3005\u3068\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u826f\u304b\u3063\u305f\u306e\u3067\u3053\u306e\u984c\u76ee\u306b\u3057\u307e\u3057\u305f\u3002\n\u6700\u521d\u306b\u5ba3\u8a00\u3057\u3066\u304a\u304d\u307e\u3059\u304c\u3001\u4eca\u56de\u306fAWS\u3092\u30d5\u30eb\u306b\u4f7f\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u9854\u8a8d\u8b58\u306b\u3064\u3044\u3066\nOpenCV\u3067\u884c\u3046\u3053\u3068\u3082\u975e\u5e38\u306b\u5bb9\u6613\u3067\u3059\u304c\u3001\u4eca\u56de\u306fAWS\u3092\u30d5\u30eb\u306b\u4f7f\u3063\u3066\u3044\u304f\uff01\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4eca\u5e74\u306ere:invent\u3067\u767a\u8868\u3055\u308c\u305f\u30b5\u30fc\u30d3\u30b9\u300cAmazon Rekognition\u300d\u3092\u4f7f\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u4e00\u8a00\u3067\u8a00\u3048\u3070\u3001\u7269\u4f53\u3084\u9854\u3092\u9ad8\u7cbe\u5ea6\u306b\u8a8d\u8b58\u3057\u305f\u308a\u3001\u691c\u7d22\u3057\u305f\u308a\u3067\u304d\u308b\u51c4\u3044\u30b5\u30fc\u30d3\u30b9\u3067\u3059\uff08\u96d1\n\u8a73\u7d30\u306f https://aws.amazon.com/jp/rekognition/ \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u6599\u91d1\u8868\u306f\u4ee5\u4e0b\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4f7f\u3048\u3070\u4f7f\u3046\u307b\u3069\u6599\u91d1\u304c\u304b\u304b\u308b\u306e\u3067\u3054\u6ce8\u610f\u3092\u3002\n\nhttps://aws.amazon.com/jp/rekognition/pricing/\n\n\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3064\u3044\u3066\nAWS\u3067\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3068\u3044\u3048\u3070\u300cAPI Gateway + Lambda\u300d\u3067\u3059\u306d\u3002\n\u4eca\u56de\u306fPython\u88fd\u306e\u300cChalice\u300d\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u305d\u308c\u3089\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\nhttps://github.com/awslabs/chalice\n\nChalice\u3092\u4f7f\u3063\u3066\u307f\u308b\nchalice\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3068\u308a\u3042\u3048\u305a\u300chello world\u300d\u3057\u3066\u307f\u307e\u3059\u3002\n$ pip install chalice\n\n# freko\u306e\u90e8\u5206\u306f\u9069\u5f53\u306a\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u306b\u3057\u3066\u304f\u3060\u3055\u3044\n$ chalice new-project freko && cd freko\n$ cat app.py\n\nfrom chalice import Chalice\n\napp = Chalice(app_name=\"helloworld\")\n\n@app.route(\"/\")\ndef index():\n    return {\"hello\": \"world\"}\n\n$ chalice deploy\n...\nYour application is available at: https://endpoint/dev\n\n$ curl https://endpoint/dev\n{\"hello\": \"world\"}\n\n\u3053\u3053\u307e\u3067\u51fa\u6765\u305f\u3089\u3001\u3042\u3068\u306fS3\u3068Rekognition\u306eAPI\u3092\u53e9\u304f\u3060\u3051\u3067\u3059\u3002\n\nAWS\u306eAPI\u3092\u4f7f\u3046\n\nAWS\u306e\u8a2d\u5b9a\n\u65e2\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u4eba\u304c\u591a\u6570\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u307e\u305a\u306faws-cli\u3092\u4f7f\u3063\u3066\u8a2d\u5b9a\u3092\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30ea\u30fc\u30b8\u30e7\u30f3\u306f eu-west-1 \u3092\u9078\u629e\u3057\u307e\u3057\u305f\u3002Rekognition\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30ea\u30fc\u30b8\u30e7\u30f3\u306a\u3089\u3070\u3069\u3053\u3067\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n$ pip install awscli\n$ aws configure\n\nhttps://github.com/aws/aws-cli\nboto3\u3068\u3044\u3046Python\u88fd\u306eAWS-SDK\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n$ pip install boto3\n\nhttps://github.com/boto/boto3\n\nS3\u3078\u753b\u50cf\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\nGUI\u3067\u30dd\u30c1\u30dd\u30c1\u3084\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u5168\u90e8API\u3067\u4f5c\u308a\u307e\u3059\u3002\nREGION = 'eu-west-1'\n\nBUCKET = 'freko-default'\nS3 = boto3.resource('s3')\n\n# \u6307\u5b9a\u3057\u305f\u30d0\u30b1\u30c3\u30c8\u540d\u304c\u5b58\u5728\u3057\u3066\u3044\u306a\u3051\u308c\u3070S3\u306b\u30d0\u30b1\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\ndef create_s3_bucket_if_not_exists():\n    exists = True\n    try:\n        S3.meta.client.head_bucket(Bucket=BUCKET)\n    except botocore.exceptions.ClientError as ex:\n        error_code = int(ex.response['Error']['Code'])\n        if error_code == 404:\n            exists = False\n    if exists:\n        return\n    else:\n        try:\n            S3.create_bucket(Bucket=BUCKET, CreateBucketConfiguration={\n                'LocationConstraint': REGION})\n        except Exception as ex:\n            raise ChaliceViewError(\"fail to create bucket s3. error = \" + ex.message)\n    return\n\n# \u30d5\u30a1\u30a4\u30eb\u3092S3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\ndef upload_file_s3_bucket(obj_name, image_file_name):\n    try:\n        s3_object = S3.Object(BUCKET, obj_name)\n        s3_object.upload_file(image_file_name)\n    except Exception as ex:\n        raise ChaliceViewError(\"fail to upload file s3. error = \" + ex.message)\n\n\nReKognitionAPI\u3092\u4f7f\u3063\u3066\u9854\u8a8d\u8b58\u3059\u308b\n\nREKOGNITION = boto3.client('rekognition')\n\n# S3\u306e\u30d0\u30b1\u30c3\u30c8\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u3001\u9854\u8a8d\u8b58\u3059\u308b\ndef detect_faces(name):\n    try:\n        response = REKOGNITION.detect_faces(\n            Image={\n                'S3Object': {\n                    'Bucket': BUCKET,\n                    'Name': name,\n                }\n            },\n            Attributes=[\n                'DEFAULT',\n            ]\n        )\n        return response\n    except Exception as ex:\n        raise ChaliceViewError(\"fail to detect faces. error = \" + ex.message)\n\nAttributes\u306b\u300cALL\u300d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3088\u308a\u591a\u304f\u306e\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n\u30dd\u30ea\u30b7\u30fc\u3092\u5909\u66f4\u3059\u308b\nChalice\u306f\u30c7\u30d7\u30ed\u30a4\u6642\u306b\u30b3\u30fc\u30c9\u3067\u4f7f\u3063\u3066\u3044\u308bAPI\u3092\u8abf\u3079\u3066\u52dd\u624b\u306b\u30dd\u30ea\u30b7\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u307e\u3060\u30d7\u30ec\u30d3\u30e5\u30fc\u7248\u306a\u306e\u3067\u5168API\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\u3002S3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u3059\u308b\u969b\u306b\u4f7f\u7528\u3057\u305fupload_file\u306a\u3069\u306f\u8aad\u307f\u53d6\u3063\u3066\u304f\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\nS3\u3068ReKognition\u3092policy.json\u306eStatement\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\uff08\u30c6\u30b9\u30c8\u7528\u306a\u306e\u3067\u30d5\u30eb\u306b\u3057\u3066\u307e\u3059\uff09\n$ vim .chalice/policy.json\n\n\"Statement\": [\n    {\n      \"Action\": [\n        \"s3:*\"\n      ],\n      \"Resource\": \"*\",\n      \"Effect\": \"Allow\"\n    },\n    {\n      \"Action\": [\n        \"rekognition:*\"\n      ],\n      \"Resource\": \"*\",\n      \"Effect\": \"Allow\"\n    }\n\n    ...\n\n]\n\n\u30dd\u30ea\u30b7\u30fc\u3092\u81ea\u52d5\u751f\u6210\u305b\u305a\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002Makefile\u3068\u304b\u3092\u9069\u5f53\u306b\u4f5c\u3063\u3066\u767b\u9332\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n$ chalice deploy --no-autogen-policy\n\n\nAPI\u30ad\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u53e9\u304d\u653e\u984c\u3060\u3068\u6016\u3044\u306e\u3067\u3001API\u30ad\u30fc\u306b\u3088\u308b\u8a8d\u8a3c\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u5236\u9650\u3092\u4e00\u5fdc\u5165\u308c\u3066\u304a\u304d\u307e\u3059\u3002\n\u8a73\u7d30\u306f http://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/how-to-api-keys.html \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\nChalice\u3067\u306fapi_key_required=True\u306b\u3059\u308c\u3070API\u30ad\u30fc\u8a8d\u8a3c\u304c\u5fc5\u8981\u306aAPI\u304c\u51fa\u6765\u4e0a\u304c\u308a\u307e\u3059\u3002\n@app.route('/face', methods=['POST'], content_types=['application/json'], api_key_required=True)\n\n\n\u30c7\u30d7\u30ed\u30a4\u3057\u305fAPI\u3092\u53e9\u3044\u3066\u307f\u308b\n\u30c6\u30b9\u30c8\u7528\u306b\u30ec\u30ca\u3055\u3093\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nAPI\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f name = \u30d5\u30a1\u30a4\u30eb\u540d, base64 = \u753b\u50cf\u3092base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u6587\u5b57\u5217 \u3092\u5165\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nAPI\u30ad\u30fc\u3068URL\u306f\u5404\u81ea\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n$ (echo -n '{\"name\":\"lenna.jpg\", \"base64\": \"'; base64 lenna.jpg; echo '\"}') | curl -H \"x-api-key:your-api-key\" -H \"Content-Type:application/json\" -d @- https://your-place.execute-api.eu-west-1.amazonaws.com/dev/face | jq\n\n\u5358\u7d14\u306b\u753b\u50cf\u306b\u9854\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3060\u3051\u306a\u3089\u3001FaceDetails\u306b\u5024\u304c\u5b58\u5728\u3059\u308b && Confidence\u30d0\u30ea\u30e5\u30fc\u304c\u5927\u304d\u3044\u304b\u3069\u3046\u304b\u3092\u898b\u308b\u3060\u3051\u3067\u5341\u5206\u305d\u3046\u3067\u3059\u3002\n{\n  \"exists\": true,\n  \"response\": {\n    \"FaceDetails\": [\n      {\n        \"BoundingBox\": {\n          \"Width\": 0.4585798680782318,\n          \"Top\": 0.3210059106349945,\n          \"Left\": 0.34467455744743347,\n          \"Height\": 0.4585798680782318\n        },\n        \"Landmarks\": [\n          {\n            \"Y\": 0.501218318939209,\n            \"X\": 0.5236561894416809,\n            \"Type\": \"eyeLeft\"\n          },\n          {\n            \"Y\": 0.50351482629776,\n            \"X\": 0.6624458432197571,\n            \"Type\": \"eyeRight\"\n          },\n          {\n            \"Y\": 0.5982820391654968,\n            \"X\": 0.6305037140846252,\n            \"Type\": \"nose\"\n          },\n          {\n            \"Y\": 0.6746630072593689,\n            \"X\": 0.521257758140564,\n            \"Type\": \"mouthLeft\"\n          },\n          {\n            \"Y\": 0.6727028489112854,\n            \"X\": 0.6275562644004822,\n            \"Type\": \"mouthRight\"\n          }\n        ],\n        \"Pose\": {\n          \"Yaw\": 30.472450256347656,\n          \"Roll\": -1.429526448249817,\n          \"Pitch\": -5.346992015838623\n        },\n        \"Quality\": {\n          \"Sharpness\": 160,\n          \"Brightness\": 36.45581817626953\n        },\n        \"Confidence\": 99.94509887695312\n      }\n    ],\n    \"ResponseMetadata\": {\n      ...\n    },\n    \"OrientationCorrection\": \"ROTATE_0\"\n  }\n}\n\n\u3061\u306a\u307f\u306b\u9854\u8a8d\u8b58\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\n{\n  \"exists\": false,\n  \"response\": {\n    \"FaceDetails\": [],\n    \"ResponseMetadata\": {\n      ...\n    }\n  }\n}\n\n\n\u6700\u5f8c\u306b\nAWS-SDK\u306e\u4f7f\u3044\u65b9\u307f\u305f\u3044\u306a\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f...\u3002\u53cd\u7701\u305b\u305a\u306b\u3001\u6b21\u56de\u306fS3\u306bPut\u3055\u308c\u305f\u3089Rekognition\u3092\u547c\u3076\u307f\u305f\u3044\u306a\u304b\u3063\u3053\u3044\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u5168\u6587\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\nhttps://github.com/gotokatsuya/freko\n\u3053\u306e\u8a18\u4e8b\u306f[Python-AdventCalandar-2016](http://qiita.com/advent-calendar/2016/python)\u306e16\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002Python\u3057\u3066\u307e\u3059\u304b\uff1f\u9854\u8a8d\u8b58\u3057\u3066\u307e\u3059\u304b\uff1f\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u3057\u3066\u307e\u3059\u304b\uff1f\n\n\u3053\u306e\u8a18\u4e8b\u306fPython\u3067\u624b\u8efd\u306b\u9854\u8a8d\u8b58API\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u305f\u3044\u3068\u3044\u3046\u65b9\u306b\u5411\u3051\u305f\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u306f\u5b66\u8853\u7684\u306a\u8a71\u3092\u66f8\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u8272\u3005\u3068\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u826f\u304b\u3063\u305f\u306e\u3067\u3053\u306e\u984c\u76ee\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u6700\u521d\u306b\u5ba3\u8a00\u3057\u3066\u304a\u304d\u307e\u3059\u304c\u3001\u4eca\u56de\u306fAWS\u3092\u30d5\u30eb\u306b\u4f7f\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n## \u9854\u8a8d\u8b58\u306b\u3064\u3044\u3066\n\nOpenCV\u3067\u884c\u3046\u3053\u3068\u3082\u975e\u5e38\u306b\u5bb9\u6613\u3067\u3059\u304c\u3001\u4eca\u56de\u306fAWS\u3092\u30d5\u30eb\u306b\u4f7f\u3063\u3066\u3044\u304f\uff01\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4eca\u5e74\u306ere:invent\u3067\u767a\u8868\u3055\u308c\u305f\u30b5\u30fc\u30d3\u30b9\u300cAmazon Rekognition\u300d\u3092\u4f7f\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u4e00\u8a00\u3067\u8a00\u3048\u3070\u3001\u7269\u4f53\u3084\u9854\u3092\u9ad8\u7cbe\u5ea6\u306b\u8a8d\u8b58\u3057\u305f\u308a\u3001\u691c\u7d22\u3057\u305f\u308a\u3067\u304d\u308b\u51c4\u3044\u30b5\u30fc\u30d3\u30b9\u3067\u3059\uff08\u96d1\n\n\u8a73\u7d30\u306f https://aws.amazon.com/jp/rekognition/ \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u6599\u91d1\u8868\u306f\u4ee5\u4e0b\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4f7f\u3048\u3070\u4f7f\u3046\u307b\u3069\u6599\u91d1\u304c\u304b\u304b\u308b\u306e\u3067\u3054\u6ce8\u610f\u3092\u3002\n\n<img width=\"866\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-16 13.38.03.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/73483/2beff51d-3b7d-7398-ca2a-039bb9cd4878.png\">\n\nhttps://aws.amazon.com/jp/rekognition/pricing/\n\n## \u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3064\u3044\u3066\n\nAWS\u3067\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3068\u3044\u3048\u3070\u300cAPI Gateway + Lambda\u300d\u3067\u3059\u306d\u3002\n\n\u4eca\u56de\u306fPython\u88fd\u306e\u300cChalice\u300d\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u305d\u308c\u3089\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\n\nhttps://github.com/awslabs/chalice\n\n### Chalice\u3092\u4f7f\u3063\u3066\u307f\u308b\n\nchalice\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3068\u308a\u3042\u3048\u305a\u300chello world\u300d\u3057\u3066\u307f\u307e\u3059\u3002\n\n``` bash\n$ pip install chalice\n\n# freko\u306e\u90e8\u5206\u306f\u9069\u5f53\u306a\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u306b\u3057\u3066\u304f\u3060\u3055\u3044\n$ chalice new-project freko && cd freko\n$ cat app.py\n\nfrom chalice import Chalice\n\napp = Chalice(app_name=\"helloworld\")\n\n@app.route(\"/\")\ndef index():\n    return {\"hello\": \"world\"}\n\n$ chalice deploy\n...\nYour application is available at: https://endpoint/dev\n\n$ curl https://endpoint/dev\n{\"hello\": \"world\"}\n```\n\n\u3053\u3053\u307e\u3067\u51fa\u6765\u305f\u3089\u3001\u3042\u3068\u306fS3\u3068Rekognition\u306eAPI\u3092\u53e9\u304f\u3060\u3051\u3067\u3059\u3002\n\n## AWS\u306eAPI\u3092\u4f7f\u3046\n\n### AWS\u306e\u8a2d\u5b9a\n\n\u65e2\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u4eba\u304c\u591a\u6570\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u307e\u305a\u306f`aws-cli`\u3092\u4f7f\u3063\u3066\u8a2d\u5b9a\u3092\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30ea\u30fc\u30b8\u30e7\u30f3\u306f `eu-west-1` \u3092\u9078\u629e\u3057\u307e\u3057\u305f\u3002Rekognition\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30ea\u30fc\u30b8\u30e7\u30f3\u306a\u3089\u3070\u3069\u3053\u3067\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n``` bash\n$ pip install awscli\n$ aws configure\n```\nhttps://github.com/aws/aws-cli\n\nboto3\u3068\u3044\u3046Python\u88fd\u306eAWS-SDK\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n``` bash\n$ pip install boto3\n```\n\nhttps://github.com/boto/boto3\n\n\n### S3\u3078\u753b\u50cf\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\n\nGUI\u3067\u30dd\u30c1\u30dd\u30c1\u3084\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u5168\u90e8API\u3067\u4f5c\u308a\u307e\u3059\u3002\n\n```py\nREGION = 'eu-west-1'\n\nBUCKET = 'freko-default'\nS3 = boto3.resource('s3')\n\n# \u6307\u5b9a\u3057\u305f\u30d0\u30b1\u30c3\u30c8\u540d\u304c\u5b58\u5728\u3057\u3066\u3044\u306a\u3051\u308c\u3070S3\u306b\u30d0\u30b1\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\ndef create_s3_bucket_if_not_exists():\n    exists = True\n    try:\n        S3.meta.client.head_bucket(Bucket=BUCKET)\n    except botocore.exceptions.ClientError as ex:\n        error_code = int(ex.response['Error']['Code'])\n        if error_code == 404:\n            exists = False\n    if exists:\n        return\n    else:\n        try:\n            S3.create_bucket(Bucket=BUCKET, CreateBucketConfiguration={\n                'LocationConstraint': REGION})\n        except Exception as ex:\n            raise ChaliceViewError(\"fail to create bucket s3. error = \" + ex.message)\n    return\n\n# \u30d5\u30a1\u30a4\u30eb\u3092S3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\ndef upload_file_s3_bucket(obj_name, image_file_name):\n    try:\n        s3_object = S3.Object(BUCKET, obj_name)\n        s3_object.upload_file(image_file_name)\n    except Exception as ex:\n        raise ChaliceViewError(\"fail to upload file s3. error = \" + ex.message)\n```\n\n### ReKognitionAPI\u3092\u4f7f\u3063\u3066\u9854\u8a8d\u8b58\u3059\u308b\n\n```py \n\nREKOGNITION = boto3.client('rekognition')\n\n# S3\u306e\u30d0\u30b1\u30c3\u30c8\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u3001\u9854\u8a8d\u8b58\u3059\u308b\ndef detect_faces(name):\n    try:\n        response = REKOGNITION.detect_faces(\n            Image={\n                'S3Object': {\n                    'Bucket': BUCKET,\n                    'Name': name,\n                }\n            },\n            Attributes=[\n                'DEFAULT',\n            ]\n        )\n        return response\n    except Exception as ex:\n        raise ChaliceViewError(\"fail to detect faces. error = \" + ex.message)\n```\n\nAttributes\u306b\u300cALL\u300d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3088\u308a\u591a\u304f\u306e\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n### \u30dd\u30ea\u30b7\u30fc\u3092\u5909\u66f4\u3059\u308b\n\nChalice\u306f\u30c7\u30d7\u30ed\u30a4\u6642\u306b\u30b3\u30fc\u30c9\u3067\u4f7f\u3063\u3066\u3044\u308bAPI\u3092\u8abf\u3079\u3066\u52dd\u624b\u306b\u30dd\u30ea\u30b7\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u307e\u3060\u30d7\u30ec\u30d3\u30e5\u30fc\u7248\u306a\u306e\u3067\u5168API\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\u3002S3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u3059\u308b\u969b\u306b\u4f7f\u7528\u3057\u305f`upload_file`\u306a\u3069\u306f\u8aad\u307f\u53d6\u3063\u3066\u304f\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\n\nS3\u3068ReKognition\u3092policy.json\u306eStatement\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\uff08\u30c6\u30b9\u30c8\u7528\u306a\u306e\u3067\u30d5\u30eb\u306b\u3057\u3066\u307e\u3059\uff09\n\n``` bash\n$ vim .chalice/policy.json\n\n\"Statement\": [\n    {\n      \"Action\": [\n        \"s3:*\"\n      ],\n      \"Resource\": \"*\",\n      \"Effect\": \"Allow\"\n    },\n    {\n      \"Action\": [\n        \"rekognition:*\"\n      ],\n      \"Resource\": \"*\",\n      \"Effect\": \"Allow\"\n    }\n\n    ...\n\n]\n```\n\n\u30dd\u30ea\u30b7\u30fc\u3092\u81ea\u52d5\u751f\u6210\u305b\u305a\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002Makefile\u3068\u304b\u3092\u9069\u5f53\u306b\u4f5c\u3063\u3066\u767b\u9332\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```\n$ chalice deploy --no-autogen-policy\n```\n\n### API\u30ad\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\n\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u53e9\u304d\u653e\u984c\u3060\u3068\u6016\u3044\u306e\u3067\u3001API\u30ad\u30fc\u306b\u3088\u308b\u8a8d\u8a3c\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u5236\u9650\u3092\u4e00\u5fdc\u5165\u308c\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u8a73\u7d30\u306f http://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/how-to-api-keys.html \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\nChalice\u3067\u306f`api_key_required=True`\u306b\u3059\u308c\u3070API\u30ad\u30fc\u8a8d\u8a3c\u304c\u5fc5\u8981\u306aAPI\u304c\u51fa\u6765\u4e0a\u304c\u308a\u307e\u3059\u3002\n\n```py\n@app.route('/face', methods=['POST'], content_types=['application/json'], api_key_required=True)\n```\n\n## \u30c7\u30d7\u30ed\u30a4\u3057\u305fAPI\u3092\u53e9\u3044\u3066\u307f\u308b\n\n\u30c6\u30b9\u30c8\u7528\u306b\u30ec\u30ca\u3055\u3093\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n![lena.jpg](https://qiita-image-store.s3.amazonaws.com/0/73483/1912d9e9-eff3-9d60-b1dc-7891cefcb503.jpeg)\n\nAPI\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f name = \u30d5\u30a1\u30a4\u30eb\u540d, base64 = \u753b\u50cf\u3092base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u6587\u5b57\u5217 \u3092\u5165\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nAPI\u30ad\u30fc\u3068URL\u306f\u5404\u81ea\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n``` bash\n$ (echo -n '{\"name\":\"lenna.jpg\", \"base64\": \"'; base64 lenna.jpg; echo '\"}') | curl -H \"x-api-key:your-api-key\" -H \"Content-Type:application/json\" -d @- https://your-place.execute-api.eu-west-1.amazonaws.com/dev/face | jq\n```\n\n\u5358\u7d14\u306b\u753b\u50cf\u306b\u9854\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3060\u3051\u306a\u3089\u3001FaceDetails\u306b\u5024\u304c\u5b58\u5728\u3059\u308b && Confidence\u30d0\u30ea\u30e5\u30fc\u304c\u5927\u304d\u3044\u304b\u3069\u3046\u304b\u3092\u898b\u308b\u3060\u3051\u3067\u5341\u5206\u305d\u3046\u3067\u3059\u3002\n\n```json\n{\n  \"exists\": true,\n  \"response\": {\n    \"FaceDetails\": [\n      {\n        \"BoundingBox\": {\n          \"Width\": 0.4585798680782318,\n          \"Top\": 0.3210059106349945,\n          \"Left\": 0.34467455744743347,\n          \"Height\": 0.4585798680782318\n        },\n        \"Landmarks\": [\n          {\n            \"Y\": 0.501218318939209,\n            \"X\": 0.5236561894416809,\n            \"Type\": \"eyeLeft\"\n          },\n          {\n            \"Y\": 0.50351482629776,\n            \"X\": 0.6624458432197571,\n            \"Type\": \"eyeRight\"\n          },\n          {\n            \"Y\": 0.5982820391654968,\n            \"X\": 0.6305037140846252,\n            \"Type\": \"nose\"\n          },\n          {\n            \"Y\": 0.6746630072593689,\n            \"X\": 0.521257758140564,\n            \"Type\": \"mouthLeft\"\n          },\n          {\n            \"Y\": 0.6727028489112854,\n            \"X\": 0.6275562644004822,\n            \"Type\": \"mouthRight\"\n          }\n        ],\n        \"Pose\": {\n          \"Yaw\": 30.472450256347656,\n          \"Roll\": -1.429526448249817,\n          \"Pitch\": -5.346992015838623\n        },\n        \"Quality\": {\n          \"Sharpness\": 160,\n          \"Brightness\": 36.45581817626953\n        },\n        \"Confidence\": 99.94509887695312\n      }\n    ],\n    \"ResponseMetadata\": {\n      ...\n    },\n    \"OrientationCorrection\": \"ROTATE_0\"\n  }\n}\n```\n\n\n\u3061\u306a\u307f\u306b\u9854\u8a8d\u8b58\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```json\n{\n  \"exists\": false,\n  \"response\": {\n    \"FaceDetails\": [],\n    \"ResponseMetadata\": {\n      ...\n    }\n  }\n}\n```\n\n## \u6700\u5f8c\u306b\n\nAWS-SDK\u306e\u4f7f\u3044\u65b9\u307f\u305f\u3044\u306a\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f...\u3002\u53cd\u7701\u305b\u305a\u306b\u3001\u6b21\u56de\u306fS3\u306bPut\u3055\u308c\u305f\u3089Rekognition\u3092\u547c\u3076\u307f\u305f\u3044\u306a\u304b\u3063\u3053\u3044\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\u30b3\u30fc\u30c9\u5168\u6587\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\nhttps://github.com/gotokatsuya/freko\n", "tags": ["Python", "APIGateway", "lambda", "ReKognition", "chalice"]}