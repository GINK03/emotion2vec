{"tags": ["Julia", "Python"], "context": " More than 1 year has passed since last update.\u4f55\u756a\u714e\u3058\u3063\u3066\u611f\u3058\u306e\u30cd\u30bf\u3067\u3059\u3051\u3069...\nPython\u3088\u308a\u3082\u901f\u304f\u3001\u66f8\u304d\u65b9\u304cPython\u306b\u8fd1\u304f\u3001\u6700\u8fd1\u79c1\u306e\u4e2d\u3067\u6ce8\u76ee\u5ea6No.1\u306e\u8a00\u8a9e\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001Pythonista\u304cJulia\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u899a\u3048\u308b\u5fc5\u8981\u306e\u3042\u308b\u69cb\u6587\u306e\u9055\u3044\u3092\u3001Python\u3068Julia\u3067\u6bd4\u8f03\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\nJulia\u306e\u74b0\u5883\u69cb\u7bc9\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\n\n\u57fa\u790e\u77e5\u8b58\n\u30b3\u30fc\u30c9\u306b\u306f\u898b\u3084\u3059\u3044\u3088\u3046\u306b\u30a4\u30f3\u30c7\u30f3\u30c8\u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u304c\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u306f\u52d5\u4f5c\u306b\u95a2\u4fc2\u3057\u307e\u305b\u3093\u3002\n\njulia\nfor n = 1:10\nprintln(n)\nend\n\n\n1\u884c\u3067\u66f8\u304f\u5834\u5408\u306f;\u304c\u5fc5\u8981\u3067\u3059\u3002\n\njulia\nfor n = 1:10;println(n);end\n\n\n\u307e\u305flist\u306eindex\u306f0\u304b\u3089\u3067\u306f\u306a\u304f 1 \u304b\u3089\u3067\u3059\u3002\n\njulia\njulia> List = [0, 1, 2]\n3-element Array{Int64,1}:\n 0\n 1\n 2\n\njulia> println(List[1])\n0\n\n\n\nHello World!\n\npython\nprint \"Hello World!\"\n\n\n\njulia\nprintln(\"Hello World!\")\n\n\n\nfor Loop statements\n\npython\nfor i in range(10):\n    print i\n\n\n\njulia\nfor n = 0:9\n    println(n)\nend\n\n\n\nIf statements\n\npython\nhoge = \"hoge\"\nif hoge[0] == 'h' and hoge[1:] == \"oge\":\n    print \"hoge is hoge\"\nelif hoge == \"huge\" or hoge == \"hige\":\n    print \"hoge is huge or hige\"\nelse:\n    print \"hoge is\", hoge\n\n\nJulia\u306b\u304a\u3051\u308band\u306f&&\u3001or\u306f||\u3067\u3059\u3002\n\njulia\nhoge = \"hoge\"\nif hoge[1] == 'h' && hoge[2:4] == \"oge\"\n    println(\"hoge is hoge\")\nelseif hoge == \"huge\" || hoge == \"hige\"\n    println(\"hoge is huge or hige\")\nelse\n    println(\"hoge is \", hoge)\nend\n\n\nhoge[2:]\u3067\u3082\u52d5\u304f\u3093\u3067\u3059\u304c\u3001 WARNING: deprecated syntax \"x[i:]\". \u304c\u51fa\u308b\u306e\u3067hoge[2:4]\u3068\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\nException Handling (Try-Except)\n\npython\nList = [0, 1, 2]\ntry:\n    print List[3]\nexcept IndexError as e:\n    print e\n\n\n\njulia\nList = [0, 1, 2]\ntry\n    println(List[4])\ncatch e\n    if isa(e, BoundsError) # \"BoundsError\"\u306fPython\u3067\u8a00\u3046\"IndexError\"\u3067\u3059\n        println(e)\n    end\nend\n\n\n\nFunctions\n\npython\ndef huge(x, y):\n    z = x + y\n    return z\n\n\n\njulia\nfunction huge(x, y)\n    x + y\nend\n\n\n\u3082\u3057\u304f\u306f\n\njulia\nfunction huge(x, y)\n    z = x + y\n    return z\nend\n\n\n\nAnonymous Functions\n\npython\nz = lambda x, y : x + y \nz(1, 2)\n\n\n\njulia\nz = (x, y) -> x + y\nz(1, 2)\n\n\n\nWorking with Files\n\nRead\n\npython\nwith open(\"output.txt\") as f:\n    for line in f:\n        print line.rstrip() # Julia\u306e\u51fa\u529b\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u6539\u884c\u30b3\u30fc\u30c9\u3092\u524a\u9664\n\n\n\njulia\nopen(\"output.txt\") do f\n    lines = readlines(f)\n    for line in lines\n        print(line) # Julia\u306eprint()\u306b\u306f\u6539\u884c\u30b3\u30fc\u30c9\u304c\u5165\u308a\u307e\u305b\u3093\n    end\nend\n\n\n\u3082\u3057\u304f\u306f\n\njulia\nopen(\"output.txt\") do f\n    for line in eachline(f)\n        print(line)\n    end\nend\n\n\n\nWrite\n\npython\nwith open(\"output.txt\", \"w\") as f:\n    for i in range(10):\n        f.write(str(i) + \"\\n\")\n\n\n\njulia\nopen(\"output.txt\", \"w\") do f\n    for n = 0:9\n        write(f, string(n)\"\\n\")\n    end\nend\n\n\n\nList complemention\n\npython\n[[n**i for n in range(10)] for i in range(5)]\n\n\n\njulia\n[[n^i for n = 0:9] for i = 0:4]\n\n\n\u5404\u8981\u7d20\u306b10\u3092\u8db3\u3057\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\npython\n[n+10 for n in range(10)]\n\n\n\njulia\n10+[0:9]\n\n\n\n\u7d30\u304b\u3044\u8a71\n\nprintf\n\npython\nInteger = 2\nString  = \"hoge\"\nprint(\"Integer: %d String: %s\" % (Integer, String))\n\n\n\njulia\nInteger = 2\nString  = \"hoge\"\n@printf \"Integer: %d String: %s\" Integer String\n\n\n\nstrip()\n\npython\n>>> \"hoge\\n\".rstrip()\n'hoge'\n\n\n\njulia\njulia> rstrip(\"hoge\\n\", '\\n')\n\"hoge\"\n\n\n\n\u305d\u306e\u4ed6Julia\u306e\u826f\u3044\u3068\u3053\u308d\n\ninfix form\n\njulia\njulia> +(10, 20, 30)\n60\n\njulia> *(10, 20, 30)\n6000\n\n\n\u3082\u3057\u304f\u306f\n\njulia\njulia> f = +\n+ (generic function with 117 methods)\n\njulia> f(10, 20, 30)\n60\n\njulia> f = *\n* (generic function with 115 methods)\n\njulia> f(10, 20, 30)\n6000\n\n\n\ninverse divide\n\njulia\njulia> 1/3\n0.3333333333333333\n\njulia> 3\\1\n0.3333333333333333\n\n\n\nFunction chaining\n\njulia\njulia> [0:5] |> x -> x.^x |> sum\n3414\n\n\n\n\u53c2\u8003\nJulia Documentation\n\n\n\u4f55\u756a\u714e\u3058\u3063\u3066\u611f\u3058\u306e\u30cd\u30bf\u3067\u3059\u3051\u3069...\nPython\u3088\u308a\u3082[\u901f\u304f](http://julialang.org/benchmarks/)\u3001\u66f8\u304d\u65b9\u304cPython\u306b\u8fd1\u304f\u3001\u6700\u8fd1\u79c1\u306e\u4e2d\u3067\u6ce8\u76ee\u5ea6No.1\u306e\u8a00\u8a9e\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u3001Pythonista\u304cJulia\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u899a\u3048\u308b\u5fc5\u8981\u306e\u3042\u308b\u69cb\u6587\u306e\u9055\u3044\u3092\u3001Python\u3068Julia\u3067\u6bd4\u8f03\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nJulia\u306e\u74b0\u5883\u69cb\u7bc9\u306f[\u3053\u3061\u3089](http://julialang.org/downloads/)\u304b\u3089\u3069\u3046\u305e\n\n## \u57fa\u790e\u77e5\u8b58\n\n\u30b3\u30fc\u30c9\u306b\u306f\u898b\u3084\u3059\u3044\u3088\u3046\u306b\u30a4\u30f3\u30c7\u30f3\u30c8\u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u304c\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u306f\u52d5\u4f5c\u306b\u95a2\u4fc2\u3057\u307e\u305b\u3093\u3002\n\n```python:julia\nfor n = 1:10\nprintln(n)\nend\n```\n\n1\u884c\u3067\u66f8\u304f\u5834\u5408\u306f`;`\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```python:julia\nfor n = 1:10;println(n);end\n```\n\n\u307e\u305flist\u306eindex\u306f0\u304b\u3089\u3067\u306f\u306a\u304f **1** \u304b\u3089\u3067\u3059\u3002\n\n```python:julia\njulia> List = [0, 1, 2]\n3-element Array{Int64,1}:\n 0\n 1\n 2\n\njulia> println(List[1])\n0\n```\n\n## Hello World!\n\n```python:python\nprint \"Hello World!\"\n```\n\n```python:julia\nprintln(\"Hello World!\")\n```\n\n## for Loop statements\n\n```python:python\nfor i in range(10):\n\tprint i\n```\n\n```python:julia\nfor n = 0:9\n\tprintln(n)\nend\n```\n\n## If statements\n\n```python:python\nhoge = \"hoge\"\nif hoge[0] == 'h' and hoge[1:] == \"oge\":\n\tprint \"hoge is hoge\"\nelif hoge == \"huge\" or hoge == \"hige\":\n\tprint \"hoge is huge or hige\"\nelse:\n\tprint \"hoge is\", hoge\n```\n\nJulia\u306b\u304a\u3051\u308b`and`\u306f`&&`\u3001`or`\u306f`||`\u3067\u3059\u3002\n\n```python:julia\nhoge = \"hoge\"\nif hoge[1] == 'h' && hoge[2:4] == \"oge\"\n\tprintln(\"hoge is hoge\")\nelseif hoge == \"huge\" || hoge == \"hige\"\n\tprintln(\"hoge is huge or hige\")\nelse\n\tprintln(\"hoge is \", hoge)\nend\n```\n\n`hoge[2:]`\u3067\u3082\u52d5\u304f\u3093\u3067\u3059\u304c\u3001 *WARNING: deprecated syntax \"x[i:]\".* \u304c\u51fa\u308b\u306e\u3067`hoge[2:4]`\u3068\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n## Exception Handling (Try-Except)\n\n```python:python\nList = [0, 1, 2]\ntry:\n\tprint List[3]\nexcept IndexError as e:\n\tprint e\n```\n\n\n```python:julia\nList = [0, 1, 2]\ntry\n\tprintln(List[4])\ncatch e\n\tif isa(e, BoundsError) # \"BoundsError\"\u306fPython\u3067\u8a00\u3046\"IndexError\"\u3067\u3059\n\t\tprintln(e)\n\tend\nend\n```\n\n## Functions\n\n```python:python\ndef huge(x, y):\n\tz = x + y\n\treturn z\n```\n\n```python:julia\nfunction huge(x, y)\n\tx + y\nend\n```\n\n\u3082\u3057\u304f\u306f\n\n```python:julia\nfunction huge(x, y)\n\tz = x + y\n\treturn z\nend\n```\n\n### Anonymous Functions\n\n```python:python\nz = lambda x, y : x + y \nz(1, 2)\n```\n\n```python:julia\nz = (x, y) -> x + y\nz(1, 2)\n```\n\n\n## Working with Files\n\n### Read\n\n```python:python\nwith open(\"output.txt\") as f:\n\tfor line in f:\n\t\tprint line.rstrip() # Julia\u306e\u51fa\u529b\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u6539\u884c\u30b3\u30fc\u30c9\u3092\u524a\u9664\n```\n\n```python:julia\nopen(\"output.txt\") do f\n\tlines = readlines(f)\n\tfor line in lines\n\t\tprint(line) # Julia\u306eprint()\u306b\u306f\u6539\u884c\u30b3\u30fc\u30c9\u304c\u5165\u308a\u307e\u305b\u3093\n\tend\nend\n```\n\n\u3082\u3057\u304f\u306f\n\n```python:julia\nopen(\"output.txt\") do f\n\tfor line in eachline(f)\n\t\tprint(line)\n\tend\nend\n```\n\n### Write\n\n```python:python\nwith open(\"output.txt\", \"w\") as f:\n\tfor i in range(10):\n\t\tf.write(str(i) + \"\\n\")\n```\n\n```python:julia\nopen(\"output.txt\", \"w\") do f\n\tfor n = 0:9\n\t\twrite(f, string(n)\"\\n\")\n\tend\nend\n```\n\n\n## List complemention\n\n```python:python\n[[n**i for n in range(10)] for i in range(5)]\n```\n```python:julia\n[[n^i for n = 0:9] for i = 0:4]\n```\n\n\u5404\u8981\u7d20\u306b10\u3092\u8db3\u3057\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\n```python:python\n[n+10 for n in range(10)]\n```\n\n```python:julia\n10+[0:9]\n```\n\n\n\n## \u7d30\u304b\u3044\u8a71\n\n## printf\n\n```python:python\nInteger = 2\nString  = \"hoge\"\nprint(\"Integer: %d String: %s\" % (Integer, String))\n```\n\n```python:julia\nInteger = 2\nString  = \"hoge\"\n@printf \"Integer: %d String: %s\" Integer String\n```\n\n### strip()\n\n```python:python\n>>> \"hoge\\n\".rstrip()\n'hoge'\n```\n\n```python:julia\njulia> rstrip(\"hoge\\n\", '\\n')\n\"hoge\"\n```\n\n\n## \u305d\u306e\u4ed6Julia\u306e\u826f\u3044\u3068\u3053\u308d\n\n### infix form\n```python:julia\njulia> +(10, 20, 30)\n60\n\njulia> *(10, 20, 30)\n6000\n```\n\n\u3082\u3057\u304f\u306f\n\n```python:julia\njulia> f = +\n+ (generic function with 117 methods)\n\njulia> f(10, 20, 30)\n60\n\njulia> f = *\n* (generic function with 115 methods)\n\njulia> f(10, 20, 30)\n6000\n```\n\n### inverse divide\n\n```python:julia\njulia> 1/3\n0.3333333333333333\n\njulia> 3\\1\n0.3333333333333333\n```\n\n### Function chaining\n\n```python:julia\njulia> [0:5] |> x -> x.^x |> sum\n3414\n```\n\n\n# \u53c2\u8003\n[Julia Documentation](http://docs.julialang.org/en/release-0.3/)\n\n"}