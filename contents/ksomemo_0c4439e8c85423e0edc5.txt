{"context": "\n\nsqlserver2014\u304b\u3089\u79fb\u884c\u524d\u63d0\u306e\u30e1\u30e2\n\nwith\u4f7f\u3048\u308b\nconvert(date, column) \u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\n\u4ee3\u308f\u308a\u306b cast(column as date) or column::date\ndateadd, datediff \u306f\u4f7f\u3048\u305f\nexplain \u4f7f\u3048\u308b\n\n\n\u5909\u6570\u5229\u7528\n\ndeclare @varname type = value \u304c\u4f7f\u3048\u306a\u3044(t-sql\u306a\u306e\u3067\u5f53\u305f\u308a\u524d)\n\u4f7f\u3048\u306a\u3044\uff0b\u4e0b\u8a18\u69cb\u6587\u3088\u308a\u3001\u5b9a\u578b\u30af\u30a8\u30ea\u306e\u5fae\u8abf\u6574\u304c\u3081\u3093\u3069\u3046\u3060\u3063\u305f\n\n\nprepared_statement.sql\nprepare prep_select_plan (int, varchar) \nas \nselect\n  *\n  , $2 as myvar \nfrom\n  table_name\nwhere id = $1;\nexecute prep_select_plan (2, 'aa');\nexecute prep_select_plan (3, 'bb');\ndeallocate prep_select_plan;\n\n\n\n\u4e00\u6642\u30c6\u30fc\u30d6\u30eb\n\n#\u306b\u306a\u308c\u305f\u305b\u3044\u304b\u3001\u3068\u3066\u3082\u9762\u5012\u306b\u611f\u3058\u305f\nglobal\u4e00\u6642\u30c6\u30fc\u30d6\u30eb##table_name \u306b\u4f3c\u305f\u3082\u306e\u306f\u672a\u8abf\u67fb\n\n\ntemporary_table.sql\ncreate temporary table temp_table_name1 (id int, name varchar);\n\nselect *\ninto temporary table temp_table_name\nfrom (\n  select 1 as class, 2 as v1, 3 as v2\n  union all select 1, 4, 5 \n  union all select 2, 6, 7 \n  union all select 2, 8, 9 \n) t\n\n\n\nWindow\u95a2\u6570\n\nsqlserver\u306b\u3082\u3042\u308b\u3051\u3069\u4eca\u56de\u521d\u3081\u3066\u77e5\u3063\u305f\nlistagg within group\u3092\u521d\u3081\u3066\u898b\u305f\n\n\nlistagg.sql\nselect\n  class\n  , listagg(v1, ',') within group (order by null) as a\nfrom temp_table_name\ngroup by\n  class\n;\nselect\n  listagg(v1, ',') within group (order by class desc) as a\n  , count(1)\nfrom temp_table_name\n;\nselect\n  class\n  , listagg(v1, ',') within group (order by null) over () as a\nfrom temp_table_name\n;\nselect\n  class\n  , listagg(v1, ',') within group (order by class) over (partition by class) as a\nfrom temp_table_name\n\n\n\npostgresql\u3068\u306e\u6bd4\u8f03\n\ncopy\npostgresql\u306b\u3082\u3042\u308b\n\n\u9023\u756a\u30c6\u30fc\u30d6\u30eb\n\ngenerate_series.sql\n-- \u30ab\u30e9\u30e0\u306fgenerate_series\u306b\u306a\u308b\nselect\n  *\nfrom (select * from generate_series(1, 10)) as a\ncross join (select * from generate_series(1, 10)) as b\n\n\n\n\u914d\u5217\n\narray_access.sql\nselect\n  ids\n  , case when ids[0] is null then 'null!' else 'not null' end\n  , ids[1]\n  , ids[2]\n  , ids[3]\nfrom (select array[1, 2, 3] as ids) t\n\n\n\nsqlserver\u3067\u4f7f\u3063\u305f\u3053\u3068\u306a\u3044\narray_agg \u304c\u4f7f\u3048\u306a\u304b\u3063\u305f(\u7e26->\u6a2a)\nunnest \u304c\u4f7f\u3048\u306a\u304b\u3063\u305f(\u6a2a->\u7e26)\n\n\narray_agg.sql\nselect\n  class\n  , array_agg(v1)\nfrom temp_table_name\ngroup by\n  class\n\n\n\nunnest.sql\nselect\n  string\n  , unnest(array[id1, id2, id3]) as id\nfrom (\nselect\n  'str' as string\n  , '1' as id1\n  , '2' as id2\n  , '3' as id3\n) as t\n\n\n\njson\n\nsqlserver2014\u306b\u306f\u306a\u304b\u3063\u305f\n2016\u304b\u3089\u4f7f\u3048\u308b\u3089\u3057\u3044 (https://blogs.msdn.microsoft.com/jocapc/2015/05/16/json-support-in-sql-server-2016/)\n\n\njson.sql\nselect \n  -- \u2193\u4f7f\u3048\u306a\u304b\u3063\u305f\n  -- json_to_record('{\"key1\": \"value1\", \"key2\": 2}')\n    json_extract_path_text('{\"key1\": {\"nest_key\": \"nest_value\"}, \"key2\": 2}', 'key1', 'nest_key')\n  , json_extract_path_text('{\"key1\": {\"nest_key\": \"nest_value\"}, \"key2\": 2}', 'key1')\n  , json_extract_path_text('{\"key1\": {\"nest_key\": \"nest_value\"}, \"key2\": 2}', 'key100')\n  , json_extract_array_element_text('[1, 2, [3, 4], 5]', 2)\n  , json_extract_array_element_text('[1, 2, [3, 4], 5]', 100)\n  , json_array_length('[1, 2, [3, 4], 5]')\n  --, json_array_length('{\"1\": 2, \"[3, 4]\": 5]') -- error\n\n\n\nudf\n\u4e00\u89a7\u306f\u3053\u308c\u3092\u898b\u308b \nselect * \nfrom pg_proc\norder by proname\n\n\nhttp://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_join_pg.html\nhttp://stackoverflow.com/questions/33083500/how-to-get-a-list-of-udfs-in-redshift\n\n## sqlserver2014\u304b\u3089\u79fb\u884c\u524d\u63d0\u306e\u30e1\u30e2\n\n- with\u4f7f\u3048\u308b\n- convert(date, column) \u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\n- \u4ee3\u308f\u308a\u306b cast(column as date) or column::date\n- dateadd, datediff \u306f\u4f7f\u3048\u305f\n- explain \u4f7f\u3048\u308b\n\n\n### \u5909\u6570\u5229\u7528\n- declare @varname type = value \u304c\u4f7f\u3048\u306a\u3044(t-sql\u306a\u306e\u3067\u5f53\u305f\u308a\u524d)\n- \u4f7f\u3048\u306a\u3044\uff0b\u4e0b\u8a18\u69cb\u6587\u3088\u308a\u3001\u5b9a\u578b\u30af\u30a8\u30ea\u306e\u5fae\u8abf\u6574\u304c\u3081\u3093\u3069\u3046\u3060\u3063\u305f\n\n```prepared_statement.sql\nprepare prep_select_plan (int, varchar) \nas \nselect\n  *\n  , $2 as myvar \nfrom\n  table_name\nwhere id = $1;\nexecute prep_select_plan (2, 'aa');\nexecute prep_select_plan (3, 'bb');\ndeallocate prep_select_plan;\n```\n\n### \u4e00\u6642\u30c6\u30fc\u30d6\u30eb\n- #\u306b\u306a\u308c\u305f\u305b\u3044\u304b\u3001\u3068\u3066\u3082\u9762\u5012\u306b\u611f\u3058\u305f\n- global\u4e00\u6642\u30c6\u30fc\u30d6\u30eb##table_name \u306b\u4f3c\u305f\u3082\u306e\u306f\u672a\u8abf\u67fb\n\n```temporary_table.sql\ncreate temporary table temp_table_name1 (id int, name varchar);\n\nselect *\ninto temporary table temp_table_name\nfrom (\n  select 1 as class, 2 as v1, 3 as v2\n  union all select 1, 4, 5 \n  union all select 2, 6, 7 \n  union all select 2, 8, 9 \n) t\n```\n\n### Window\u95a2\u6570\n- sqlserver\u306b\u3082\u3042\u308b\u3051\u3069\u4eca\u56de\u521d\u3081\u3066\u77e5\u3063\u305f\n- listagg within group\u3092\u521d\u3081\u3066\u898b\u305f\n\n```listagg.sql\nselect\n  class\n  , listagg(v1, ',') within group (order by null) as a\nfrom temp_table_name\ngroup by\n  class\n;\nselect\n  listagg(v1, ',') within group (order by class desc) as a\n  , count(1)\nfrom temp_table_name\n;\nselect\n  class\n  , listagg(v1, ',') within group (order by null) over () as a\nfrom temp_table_name\n;\nselect\n  class\n  , listagg(v1, ',') within group (order by class) over (partition by class) as a\nfrom temp_table_name\n```\n\n\n## postgresql\u3068\u306e\u6bd4\u8f03\n\n### copy\npostgresql\u306b\u3082\u3042\u308b\n\n### \u9023\u756a\u30c6\u30fc\u30d6\u30eb\n```generate_series.sql\n-- \u30ab\u30e9\u30e0\u306fgenerate_series\u306b\u306a\u308b\nselect\n  *\nfrom (select * from generate_series(1, 10)) as a\ncross join (select * from generate_series(1, 10)) as b\n```\n\n### \u914d\u5217\n```array_access.sql\nselect\n  ids\n  , case when ids[0] is null then 'null!' else 'not null' end\n  , ids[1]\n  , ids[2]\n  , ids[3]\nfrom (select array[1, 2, 3] as ids) t\n```\n\n- sqlserver\u3067\u4f7f\u3063\u305f\u3053\u3068\u306a\u3044\n- array_agg \u304c\u4f7f\u3048\u306a\u304b\u3063\u305f(\u7e26->\u6a2a)\n- unnest \u304c\u4f7f\u3048\u306a\u304b\u3063\u305f(\u6a2a->\u7e26)\n\n```array_agg.sql\nselect\n  class\n  , array_agg(v1)\nfrom temp_table_name\ngroup by\n  class\n```\n\n```unnest.sql\nselect\n  string\n  , unnest(array[id1, id2, id3]) as id\nfrom (\nselect\n  'str' as string\n  , '1' as id1\n  , '2' as id2\n  , '3' as id3\n) as t\n```\n\n### json\n- sqlserver2014\u306b\u306f\u306a\u304b\u3063\u305f\n- 2016\u304b\u3089\u4f7f\u3048\u308b\u3089\u3057\u3044 (https://blogs.msdn.microsoft.com/jocapc/2015/05/16/json-support-in-sql-server-2016/)\n\n```json.sql\nselect \n  -- \u2193\u4f7f\u3048\u306a\u304b\u3063\u305f\n  -- json_to_record('{\"key1\": \"value1\", \"key2\": 2}')\n    json_extract_path_text('{\"key1\": {\"nest_key\": \"nest_value\"}, \"key2\": 2}', 'key1', 'nest_key')\n  , json_extract_path_text('{\"key1\": {\"nest_key\": \"nest_value\"}, \"key2\": 2}', 'key1')\n  , json_extract_path_text('{\"key1\": {\"nest_key\": \"nest_value\"}, \"key2\": 2}', 'key100')\n  , json_extract_array_element_text('[1, 2, [3, 4], 5]', 2)\n  , json_extract_array_element_text('[1, 2, [3, 4], 5]', 100)\n  , json_array_length('[1, 2, [3, 4], 5]')\n  --, json_array_length('{\"1\": 2, \"[3, 4]\": 5]') -- error\n```\n\n### udf\n\u4e00\u89a7\u306f\u3053\u308c\u3092\u898b\u308b \n\n```\nselect * \nfrom pg_proc\norder by proname\n```\n\n- http://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_join_pg.html\n- http://stackoverflow.com/questions/33083500/how-to-get-a-list-of-udfs-in-redshift\n", "tags": ["memo"]}