{"context": "\n\n\u79c1\u304c\u66f8\u7c4d\"\u5b9f\u8df5 \u6a5f\u68b0\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0\"\u3092\u8aad\u307f\u52c9\u5f37\u3057\u305f\u6642\u306b\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\u3068\u7b2c1\u7ae0\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n\u6a5f\u68b0\u5b66\u7fd2\u53c2\u8003\u30b5\u30a4\u30c8URL\n\nMPS Yokohama Deep Learning vol.01\n\n\u6570\u5b66\u7684\u57fa\u790e\u304b\u3089\u5b66\u3076 Deep Learning\nTwoToReal FAQ\nGithub:wrichert/BuildingMachineLearningSystemsWithPython\n\uff11\u7ae0\u3000Python\u3067\u59cb\u3081\u308b\u6a5f\u68b0\u5b66\u7fd2\nPython: SciPy \u3067\u7279\u5fb4\u91cf\u306e\u76f8\u95a2\u3092\u8abf\u3079\u308b\nPython: Scipy \u306e\u30ab\u30fc\u30d6\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u8a66\u3059\n\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3058\u3083\u306a\u3044\u4eba\u304c\u59cb\u3081\u308b\u4eba\u5de5\u77e5\u80fd: Scipy\u3068Matplotlib\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\nmatplotlib\u5165\u9580 - \u30b0\u30e9\u30d5\u306e\u4f53\u88c1\u3092\u6574\u3048\u308b\nmatplotlib\u5165\u9580\nNumPy \u3067\u56de\u5e30\u5206\u6790\n\n\n\n\"\u5b9f\u8df5 \u6a5f\u68b0\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0\"\u30e1\u30e2\n# Numpy\u3068\u306f\uff1f\n# \u5927\u898f\u6a21\u306a\u591a\u6b21\u5143\u914d\u5217\u3084\u884c\u5217\u306e\u30b5\u30dd\u30fc\u30c8\u3001\n# \u3053\u308c\u3089\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u5927\u898f\u6a21\u306a\u9ad8\u6c34\u6e96\u306e\u6570\u5b66\u95a2\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\nhttp://rest-term.com/archives/2999/\nhttp://wbhappy.hatenablog.jp/entry/2015/02/06/210000\n# ndarray.flags    \u914d\u5217\u30c7\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u60c5\u5831\n# ndarray.ndim     \u914d\u5217\u306e\u6b21\u5143\u6570\n# ndarray.size     \u914d\u5217\u306e\u8981\u7d20\u6570\n# ndarray.shape    \u5404\u6b21\u5143\u306e\u8981\u7d20\u6570\n# ndarray.itemsize 1\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\n# ndarray.strides  \u5404\u6b21\u5143\u3067\u6b21\u306e\u8981\u7d20\u306b\u79fb\u52d5\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u30d0\u30a4\u30c8\u6570\n# ndarray.nbytes   \u914d\u5217\u5168\u4f53\u306e\u30d0\u30a4\u30c8\u6570\n# ndarray.dtype    \u914d\u5217\u8981\u7d20\u306e\u30c7\u30fc\u30bf\u578b (numpy.dtype)\n\n>>> import numpy as np\n>>> np.version.full_version\n'1.8.0rc1'\n>>> a = np.array([0,1,2,3,4,5])\n>>> a\narray([0, 1, 2, 3, 4, 5])\n>>> a.ndim\n1\n>>> a.shape\n(6,)\n>>> b = a.reshape((3,2))\n>>> b\narray([[0, 1],\n       [2, 3],\n       [4, 5]])\n>>> b.ndim\n2\n>>> b.shape\n(3, 2)\n>>> b[1][0] = 77\n>>> b\narray([[ 0,  1],\n       [77,  3],\n       [ 4,  5]])\n>>> a\narray([ 0,  1, 77,  3,  4,  5])\n>>> c = a.reshape((3,2)).copy()\n>>> c\narray([[ 0,  1],\n       [77,  3],\n       [ 4,  5]])\n>>> c[0][0] = -99\n>>> a\narray([ 0,  1, 77,  3,  4,  5])\n>>> c\narray([[-99,   1],\n       [ 77,   3],\n       [  4,   5]])\n>>> a*2\narray([  0,   2, 154,   6,   8,  10])\n>>> a**2\narray([   0,    1, 5929,    9,   16,   25])\n>>> a[np.array([2,3,4])]\narray([77,  3,  4])\n>>> a>4\narray([False, False,  True, False, False,  True], dtype=bool)\n>>> a[a>4]\narray([77,  5])\n>>> a[a>4]=4\n>>> a\narray([0, 1, 4, 3, 4, 4])\n>>> a.clip(0,4)\narray([0, 1, 4, 3, 4, 4])\n>>> c = np.array([1,2,np.NAN, 3,4]) # \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u3068\u4eee\u5b9a\n>>> c\narray([  1.,   2.,  nan,   3.,   4.])\n>>> np.isnan(c) # \u6b20\u640d\u5024\u3092\u7f6e\u304d\u63db\u3048\u308b\narray([False, False,  True, False, False], dtype=bool)\n>>> c[~np.isnan(c)]\narray([ 1.,  2.,  3.,  4.])\n>>> np.mean(c[~np.isnan(c)])\n2.5\n>>> import timeit\n>>> normal_py_sec = timeit.timeit('sum(x*x for x in xrange(1000))',number=10000)\n>>> Naive_np_sec = timeit.timeit('sum(na*na)',setup=\"import numpy as np; na=np.arange(1000)\", number=10000)\n>>> good_np_sec = timeit.timeit('na.dot(na)',setup=\"import numpy as np;  na=np.arange(1000)\", number=10000)\n>>> print(\"Normal Python: %f sec\"%normal_py_sec)\nNormal Python: 0.836571 sec\n>>> print(\"Naive Numpy: %f sec\"%Naive_np_sec)\nNaive Numpy: 4.806356 sec\n>>> print(\"Good Numpy: %f sec\"%good_np_sec)\nGood Numpy: 0.039245 sec\n>>> a = np.array([1,2,3])\n>>> a.dtype\ndtype('int64')\n>>> np.array([1, \"stringry\"])\narray(['1', 'stringry'],\n      dtype='|S8')\n>>> np.array([1, \"stringy\", set([1,2,3])])\narray([1, 'stringy', set([1, 2, 3])], dtype=object)\n\n# http://rest-term.com/archives/2999/\u3088\u308a\n\n>>> import numpy as np\n>>> a = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) # \u914d\u5217\u306e\u751f\u6210\n>>> a\narray([[ 1,  2,  3],\n       [ 4,  5,  6],\n       [ 7,  8,  9],\n       [10, 11, 12]])\n>>> a.flags     # \u914d\u5217\u30c7\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u60c5\u5831\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  UPDATEIFCOPY : False\n>>> a.ndim      # \u6b21\u5143\u6570\n2\n>>> a.size      # \u8981\u7d20\u6570\n12\n>>> a.shape     # \u5404\u6b21\u5143\u306e\u8981\u7d20\u6570(\u884c\u6570,\u5217\u6570)\n(4, 3)\n>>> a.itemsize  # 1\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\n8\n>>> a.strides   # 24\u30d0\u30a4\u30c8\u3067\u6b21\u306e\u884c\u30018\u30d0\u30a4\u30c8\u3067\u6b21\u306e\u5217\n(24, 8)\n>>> a.nbytes    # \u914d\u5217\u5168\u4f53\u306e\u30d0\u30a4\u30c8\u6570\n96\n>>> a.dtype     # \u8981\u7d20\u306e\u30c7\u30fc\u30bf\u578b\ndtype('int64')\n\n>>> np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n>>> np.ones(5)\narray([ 1.,  1.,  1.,  1.,  1.])\n>>> np.ones([2,3])\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n>>> np.identity(3)                       # \u5358\u4f4d\u884c\u5217\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n>>> np.eye(3)                            # \u5217\u6570\u6307\u5b9a\u304c\u3067\u304d\u308b\u5358\u4f4d\u884c\u5217\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n>>> np.arange(10)                        # range()\u3068\u540c\u3058\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> np.araange(1,2,0.2)                  # \u59cb\u70b9,\u7d42\u70b9,\u5897\u5206\narray([ 1. ,  1.2,  1.4,  1.6,  1.8])\n>>> np.linspace(1,4,6)                   # \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3067\u304d\u308brange()\narray([ 1. ,  1.6,  2.2,  2.8,  3.4,  4. ])\n>>> np.logspace(2,3,4)                   # \u5bfe\u6570\narray([  100.        ,   215.443469  ,   464.15888336,  1000.        ])\n>>> np.logspace(2,4,4, base=2)           # \u5e952\narray([  4.        ,   6.34960421,  10.0793684 ,  16.        ])\n>>> np.tile([0,1,2,3,4], 2)              # \u751f\u6210\u3001\u8981\u7d20\u3092\u7e70\u308a\u8fd4\u3057\u305f\u914d\u5217\u3092\u8fd4\u3059\narray([0, 1, 2, 3, 4, 0, 1, 2, 3, 4])\n>>> a,b = np.meshgrid([1,2,3],[4,5,6,7]) # \u7e26\u6a2a\u306b\u7b49\u9593\u9694\u306a\u683c\u5b50\u72b6\u914d\u5217\n>>> a\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])\n>>> b\narray([[4, 4, 4],\n       [5, 5, 5],\n       [6, 6, 6],\n       [7, 7, 7]])\n>>> np.tri(3) # \u4e09\u89d2\u884c\u5217\narray([[ 1.,  0.,  0.],\n       [ 1.,  1.,  0.],\n       [ 1.,  1.,  1.]])\n>>> a = np.array([[0,1,2],[3,4,5],[6,7,8]])\n>>> a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> np.diag(a)                  # \u5165\u529b\u914d\u5217\u304b\u3089\u5bfe\u89d2\u8981\u7d20\u3092\u629c\u304d\u51fa\u3057\u305f\u914d\u5217\narray([0, 4, 8])\n>>> np.empty(5)                 # \u9818\u57df\u306e\u78ba\u4fdd\u306e\u307f\u3067\u521d\u671f\u5316\u306f\u3055\u308c\u306a\u3044\narray([  0.00000000e+000,   4.94065646e-324,   9.88131292e-324,\n         1.48219694e-323,   1.97626258e-323])\n>>> a = np.array([1,2,3])\n>>> b = a.copy()\n>>> b\narray([1, 2, 3])\n>>> np.random.randint(0,100,10) # \u751f\u6210\u3059\u308b\u4e71\u6570\u306e\u7bc4\u56f2(\u6700\u5c0f\u5024,\u6700\u5927\u5024,\u8981\u7d20\u6570)\u3092\u6307\u5b9a\narray([67, 65, 61, 15, 48, 57, 42, 21, 49, 57])\n>>> a = np.arange(10)\n>>> a\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> a = np.arange(10)\n>>> b = a.reshape((2,5))        # \u914d\u5217\u5f62\u72b6\u306e\u5909\u66f4(\u3053\u306e\u5834\u54082\u6b21\u5143\u914d\u5217\u3078)\n>>> b\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n>>> a.resize((2,5))             # \u8981\u7d20\u6570\u306f\u305d\u306e\u307e\u307e\u30672\u6b21\u5143\u914d\u5217\u306b\u5909\u66f4\n>>> a\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n>>> a = np.tile(np.arange(3),3) # range(3)\u306e3\u5217\u683c\u5b50\n>>> a\narray([0, 1, 2, 0, 1, 2, 0, 1, 2])\n>>> np.argmax(a)                # \u6700\u5927\u5024\u8981\u7d20\u306e\u3046\u3061\u3067\u6700\u3082\u5c0f\u3055\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n2\n>>> np.argmin(a)                # \u6700\u5c0f\u5024\u8981\u7d20\u306e\u3046\u3061\u3067\u6700\u3082\u5c0f\u3055\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n0\n>>> a = np.eye(3)               # 3\u3064\u914d\u5217\n>>> a\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n>>> np.nonzero(a)               # \u975e\u30bc\u30ed\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u8fd4\u3059(\u3053\u306e\u5834\u5408\u4e8c\u6b21\u5143\u914d\u5217\u306a\u306e\u3067\u4e8c\u3064)\n(array([0, 1, 2]), array([0, 1, 2]))\n>>> a = np.arange(15).reshape((3,5))\n>>> a\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n>>> np.where(a%2==0)            # \u6761\u4ef6\u306b\u5408\u81f4\u3057\u305f\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\n(array([0, 0, 0, 1, 1, 2, 2, 2]), array([0, 2, 4, 1, 3, 0, 2, 4]))\n>>> a = np.arange(10)\n>>> np.select([a<3, a>5],[a, a**2]) # \u8907\u6570\u6761\u4ef6\u691c\u7d22 \u7b2c\u4e00\u5f15\u6570:\u6761\u4ef6\u306e\u914d\u5217 \u7b2c\u4e8c\u5f15\u6570:\u6761\u4ef6\u306b\u5408\u81f4\u3057\u305f\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30bb\u30c3\u30c8\u3059\u308b\u5024\u306e\u914d\u5217\narray([ 0,  1,  2,  0,  0,  0, 36, 49, 64, 81])\n>>> a = np.arange(9).reshape((3,3))\n>>> a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> b = np.arange(8,-1,-1).reshape((3,3))\n>>> b\narray([[8, 7, 6],\n       [5, 4, 3],\n       [2, 1, 0]])\n>>> np.dstack((a,b))            # \u4e8c\u6b21\u5143\u914d\u5217\u3092\u7d50\u5408\u3057\u3066\u4e09\u6b21\u5143\u914d\u5217\u306b\u3059\u308b\narray([[[0, 8],\n        [1, 7],\n        [2, 6]],\n\n       [[3, 5],\n        [4, 4],\n        [5, 3]],\n\n       [[6, 2],\n        [7, 1],\n        [8, 0]]])\n>>> np.hstack((a,b))            # \u5217\u65b9\u5411\u306b\u7d50\u5408\narray([[0, 1, 2, 8, 7, 6],\n       [3, 4, 5, 5, 4, 3],\n       [6, 7, 8, 2, 1, 0]])\n>>> np.vstack((a,b))            # \u884c\u65b9\u5411\u306b\u7d50\u5408\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8],\n       [8, 7, 6],\n       [5, 4, 3],\n       [2, 1, 0]])\n>>> a = np.arange(16).reshape(2,2,4)\n>>> a\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\n>>> np.dsplit(a,2)              # 3\u6b21\u5143\u914d\u5217\u3092\u5206\u5272\n[array([[[ 0,  1],\n        [ 4,  5]],\n\n       [[ 8,  9],\n        [12, 13]]]), array([[[ 2,  3],\n        [ 6,  7]],\n\n       [[10, 11],\n        [14, 15]]])]\n>>> a = np.arange(16).reshape(4,4)\n>>> a\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n>>> np.hsplit(a,2)              # \u5217\u65b9\u5411\u306b\u5206\u5272\n[array([[ 0,  1],\n       [ 4,  5],\n       [ 8,  9],\n       [12, 13]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11],\n       [14, 15]])]\n>>> np.vsplit(a,2)              # \u884c\u65b9\u5411\u306b\u5206\u5272\n[array([[0, 1, 2, 3],\n       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],\n       [12, 13, 14, 15]])]\n>>> a = np.array([[1,2],[3,4]])\n>>> a\narray([[1, 2],\n       [3, 4]])\n>>> np.transpose(a)             # \u914d\u5217\u3092\u8ee2\u7f6e\narray([[1, 3],\n       [2, 4]])\n>>> a = np.array([[1,2,3]])\n>>> np.swapaxes(a,0,1)          # \u8ef8\u306e\u4ea4\u63db\narray([[1],\n       [2],\n       [3]])\n>>> a = np.random.randint(0,500,20)\n>>> a\narray([444,  97, 324, 492, 275,  95, 157, 336,  51, 249, 363, 409, 299,\n       432,  41, 469, 201, 308,  85, 455])\n>>> np.amax(a)                  # \u6700\u5927\u5024\n492\n>>> np.amin(a)                  # \u6700\u5c0f\u5024\n41\n>>> np.ptp(a)                   # \u5024\u306e\u7bc4\u56f2(\u6700\u5927\u5024-\u6700\u5c0f\u5024)\n451\n>>> np.mean(a)                  # \u7b97\u8853\u5e73\u5747\n279.10000000000002\n>>> np.median(a)                # \u4e2d\u592e\u5024\n303.5\n>>> np.std(a)                   # \u6a19\u6e96\u504f\u5dee\n146.4031761950539\n>>> np.var(a)                   # \u5206\u6563\n21433.889999999999\n>>> b = np.random.randint(0,500,20)\n>>> b\narray([375, 207, 495, 320, 472, 481, 491, 133, 279, 480, 232, 261, 492,\n       183, 168, 424,  95, 236, 176, 332])\n>>> np.corrcoef(a,b)            # \u76f8\u95a2\u4fc2\u6570\narray([[ 1.        ,  0.12452095],\n       [ 0.12452095,  1.        ]])\n>>> c = np.random.randint(0,10,20)\n>>> c\narray([6, 5, 9, 7, 9, 6, 4, 0, 1, 4, 6, 3, 2, 7, 9, 3, 4, 9, 4, 8])\n>>> np.histogram(c)             # \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n(array([1, 1, 1, 2, 4, 1, 3, 2, 1, 4]), array([ 0. ,  0.9,  1.8,  2.7,  3.6,  4.5,  5.4,  6.3,  7.2,  8.1,  9. ]))\n\n# SciPy\u3068\u306f?\n# \u591a\u304f\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63d0\u4f9b\n#  cluster : \u968e\u5c64\u30af\u30e9\u30b9\u30bf\u30a4\u30f3\u30b0/\u30d9\u30af\u30c8\u30ea\u91cf\u5b50\u5316/K\u5e73\u5747\u6cd5\n#  constants : \u7269\u7406\u6570\u5b66\u5b9a\u6570\n#  fftpack : \u30d5\u30fc\u30ea\u30a8\u5b9a\u7fa9\n#  integrate : \u7a4d\u5206\n#  interpolate : \u88dc\u9593(\u30ea\u30cb\u30a2,\u30ad\u30e5\u30fc\u30d3\u30c3\u30af\u306a\u3069)\n#  io : \u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\n#  linalg : BLAS\u3068LAPACK\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u305f\u7dda\u5f62\u4ee3\u6570\u30eb\u30fc\u30c1\u30f3\n#  maxentropy : \u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u5206\u5e03\n#  ndimage : n\u6b21\u5143\u753b\u50cf\u30d1\u30c3\u30b1\u30fc\u30b8\n#  odr : \u76f4\u4ea4\u8ddd\u96e2\u56de\u5e30\n#  optimize : \u6700\u9069\u5316\n#  signal : \u4fe1\u53f7\u51e6\u7406\n#  sparse : \u758e\u884c\u5217\n#  spatial : \u7a7a\u9593\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n#  special : \u30d9\u30c3\u30bb\u30eb\u95a2\u6570\u3001 \u3084\u3063\u3053\u30d3\u30a2\u30f3\u306a\u3069\u306e\u7279\u6b8a\u95a2\u6570\n#  stats : \u7d71\u8a08\n\n>>> import scipy, numpy\n>>> scipy.version.full_version\n'0.13.0b1'\n>>> scipy.dot is numpy.dot\nTrue # \u540d\u524d\u7a7a\u9593\u304cNumpy\u3068\u540c\u3058\n>>> data = sp.genfromtxt(\"sample/ch01/data/web_traffic.tsv\", delimiter='\\t')\n>>> print(data.shape)\n(743, 2)\n>>> print(data[:10])\n\n\n>>> import scipy as sp\n>>> data = sp.genfromtxt(\"./sample/ch01/data/web_traffic.tsv\", delimiter=\"\\t\") #  \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n>>> print(data[:10])\n [  2.00000000e+00   1.65600000e+03]\n [  3.00000000e+00   1.38600000e+03]\n [  4.00000000e+00   1.36500000e+03]\n [  5.00000000e+00   1.48800000e+03]\n [  6.00000000e+00   1.33700000e+03]\n [  7.00000000e+00   1.88300000e+03]\n [  8.00000000e+00   2.28300000e+03]\n [  9.00000000e+00   1.33500000e+03]\n [  1.00000000e+01   1.02500000e+03]]\n>>> print(data.shape)\n(743, 2)\n>>> x = data[:,0] # \u7d4c\u904e\u6642\u9593(SciPy:0\u756a\u76ee\u306e\u6b21\u5143\u3092\u62bd\u51fa\u3057\u308d)\n>>> y = data[:,1] # \u30a2\u30af\u30bb\u30b9\u6570\n>>> sp.sum(sp.isnan(y)) # \u4e0d\u9069\u5207\u306a\u5024\n0\n>>> x = x[~sp.isnan(y)] # \u4e0d\u9069\u5207\u306a\u5024\u3092\u53d6\u308a\u9664\u304f\n>>> y = y[~sp.isnan(y)] # \u4e0d\u9069\u5207\u306a\u5024\u3092\u53d6\u308a\u9664\u304f\n>>> import matplotlib.pyplot as plt # \u6563\u5e03\u56f3\n>>> plt.scatter(x,y)\n<matplotlib.collections.PathCollection object at 0x11192e5d0>\n>>> plt.title(\"Web traffic over the last month\")\n<matplotlib.text.Text object at 0x1118f7c90>\n>>> plt.xlabel(\"Time\")\n<matplotlib.text.Text object at 0x111636090>\n>>> plt.ylabel(\"Hits/hour\")\n<matplotlib.text.Text object at 0x111649fd0>\n>>> plt.xticks([w*7*24 for w in range(10)], ['week %i' %w for w in range(10)])\n([<matplotlib.axis.XTick object at 0x10e349710>, <matplotlib.axis.XTick object at 0x111653450>, <matplotlib.axis.XTick object at 0x11192edd0>, <matplotlib.axis.XTick object at 0x1119514d0>, <matplotlib.axis.XTick object at 0x111951c10>, <matplotlib.axis.XTick object at 0x113505390>, <matplotlib.axis.XTick object at 0x113505ad0>, <matplotlib.axis.XTick object at 0x11350e250>, <matplotlib.axis.XTick object at 0x11350e990>, <matplotlib.axis.XTick object at 0x11351a110>], <a list of 10 Text xticklabel objects>)\n>>> plt.autoscale(tight=True)\n>>> plt.grid()\n>>> plt.show()\n# \u30ab\u30fc\u30d6\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\n# polyfit(x,y,n) : \u56de\u5e30\u5206\u6790\u306b\u4f7f\u3046\u95a2\u6570(n\u6b21\u5f0f\u30672\u5909\u6570\u306e\u56de\u5e30\u5206\u6790)\n# \u56de\u5e30\u5206\u6790...\u76f8\u95a2\u95a2\u4fc2\u3084\u56e0\u679c\u95a2\u4fc2\u304c\u3042\u308b\u3068\u601d\u308f\u308c\u308b2\u3064\u306e\u5909\u6570\u306e\u3046\u3061\u3001\u4e00\u65b9\u306e\u5909\u6570\u304b\u3089\u5c06\u6765\u7684\u306a\u5024\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306e\u4e88\u6e2c\u5f0f\uff08\u56de\u5e30\u76f4\u7dda\uff09\u3092\u6c42\u3081\u308b\u305f\u3081\u306e\u624b\u6cd5\u3002\n>>> def error(f, x, y): #\u30e2\u30c7\u30eb\u95a2\u6570f\u304c\u5b58\u5728\u3059\u308b\u3068\u4eee\u5b9a\u3057\u305f\u6642\u306e\u8aa4\u5dee\n...     return sp.sum((f(x)-y)**2)\n>>> fp1, residuals, rank, sv, rcond = sp.polyfit(x, y, 1, full=True) # polyfit\u3067x,y\u3092\u6700\u5c0f\u4e8c\u4e57\u7684\u306b\u8fd1\u4f3c\u3068\u306a\u308b\u30e2\u30c7\u30eb\u306e\u4fc2\u6570\u3092\u53d6\u5f97\n>>> print(\"Model parameters: %s\" % fp1)\nModel parameters: [    2.57152281  1002.10684085]\n>>> print(residuals) # \u5270\u4f59\n[  3.19874315e+08]\n>>> print(rank) # \u884c\u5217\u306e\u30e9\u30f3\u30af\n2\n>>> print(rcond) # \u6761\u4ef6\u6570\u306e\u9006\u6570\n1.64979141459e-13\n\u53c2\u7167 : http://ktadaki.hatenablog.com/entry/2015/10/29/155340\n5\u500b\u306e\u5909\u6570\u306b\u5024\u3092\u5165\u308c\u3066\u3044\u308b\u304c\u3001\u4f7f\u3046\u306e\u306f\u6700\u521d\u306efp1\u306e\u307f\u3002fp1\u306e\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n[   2.59619213  989.02487106]\n\u3064\u307e\u308a\u3001\u3053\u3093\u306a\u5f0f\u3092\u5f97\u305f\u308f\u3051\u3060\u3002\nf(x)=2.59619213x+989.02487106\n>>> f1 = sp.poly1d(fp1) # \u30e2\u30c7\u30eb\u95a2\u6570\u3092\u4f5c\u6210\n>>> print(error(f1,x,y))\n319874314.777\n>>> import matplotlib.pyplot as plt # \u6563\u5e03\u56f3\n>>> plt.scatter(x,y)\n<matplotlib.collections.PathCollection object at 0x11192e5d0>\n>>> plt.title(\"Web traffic over the last month\")\n<matplotlib.text.Text object at 0x1118f7c90>\n>>> plt.xlabel(\"Time\")\n<matplotlib.text.Text object at 0x111636090>\n>>> plt.ylabel(\"Hits/hour\")\n<matplotlib.text.Text object at 0x111649fd0>\n>>> plt.xticks([w*7*24 for w in range(10)], ['week %i' %w for w in range(10)]) # x\u8ef8\u306e\u76ee\u76db\u308a\u3092\u66f8\u304d\u63db\u3048\u308b\u3002\u5f15\u6570\u306b\u306f\u300c\u3069\u306e\u4f4d\u7f6e\u306b\u300d\u300c\u4f55\u3092\u300d\u8868\u793a\u3059\u308b\u304b\u3092\u305d\u308c\u305e\u308c\u30ea\u30b9\u30c8\u3067\u6307\u5b9a\n([<matplotlib.axis.XTick object at 0x10e349710>, <matplotlib.axis.XTick object at 0x111653450>, <matplotlib.axis.XTick object at 0x11192edd0>, <matplotlib.axis.XTick object at 0x1119514d0>, <matplotlib.axis.XTick object at 0x111951c10>, <matplotlib.axis.XTick object at 0x113505390>, <matplotlib.axis.XTick object at 0x113505ad0>, <matplotlib.axis.XTick object at 0x11350e250>, <matplotlib.axis.XTick object at 0x11350e990>, <matplotlib.axis.XTick object at 0x11351a110>], <a list of 10 Text xticklabel objects>)\n>>> plt.autoscale(tight=True)\n<matplotlib.legend.Legend object at 0x10c587ad0>\n>>> fx = sp.linspace(0, x[-1], 1000) # \u30d7\u30ed\u30c3\u30c8\u7528\u306b\"x\u5024\"\u3092\u751f\u6210\n>>> plt.plot(fx, f1(fx), linewidth=4) # \u30ea\u30b9\u30c8\u3092\u30b0\u30e9\u30d5\u3068\u3057\u3066\u63cf\u5199\n[<matplotlib.lines.Line2D object at 0x10c587850>]\n>>> plt.legend([\"d=%i\" % f1.order], loc=\"upper left\") # \u51e1\u4f8b\u3092\u8868\u793a\n>>> plt.grid()\n>>> plt.show()\n\n>>> f2p = sp.polyfit(x, y, 2)\n>>> print(f2p)\n[  1.04688184e-02  -5.21727812e+00   1.96921629e+03]\n>>> f2 = sp.poly1d(f2p)\n>>> print(error(f2, x, y))\n182006476.432\n# f(x) = 0.0105322215 * x**2 - 5.26545650 * x + 1974.76802\n>>> plt.plot(fx, f2(fx), linewidth=4)\n# \u2191\u5148\u307b\u3069\u306e\u3084\u3064\u306b\u7d44\u307f\u8fbc\u3080\n# \u3088\u308a\u6b63\u78ba\u306a\u66f2\u7dda\u3060\u304c\u3001\u95a2\u6570\u304c\u8907\u96d1\n# \u6b21\u6570-3,10,100\u3067\u8a66\u3057\u305f\u2192\u904e\u5b66\u7fd2\n# \u6b21\u65701\u3067\u8a66\u3057\u305f \u2192 \u672a\u5b66\u7fd2\n# \u4e00\u3064\u76ee\u306e\u76f4\u7dda\u30923.5\u9031\u3088\u308a\u524d\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u5b66\u7fd2, \u4e8c\u3064\u76ee\u306e\u76f4\u7dda\u306f\u305d\u308c\u4ee5\u964d\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\n>>> inflection = 3.5*7*24 # \u5909\u5316\u70b9\u306e\u6642\u9593\u3092\u8a08\u7b97\n>>> xa = x[:inflection] # \u5909\u5316\u70b9\u524d\u306e\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\n>>> ya = y[:inflection]\n>>> xb = x[:inflection] # \u5909\u5316\u70b9\u5f8c\n>>> yb = y[:inflection]\n>>> fa = sp.poly1d(sp.polyfit(xa, ya, 1))\n>>> fb = sp.poly1d(sp.polyfit(xb, yb, 1))\n>>> fa_error = error(fa, xa, ya)\n>>> fb_error = error(fb, xb, yb)\n>>> print(\"Error inflection=%f\" % (fa_error + fb_error))\nError inflection=218985429.871767\n# plt.plot(fx, fa(fx), linewidth=4)\n# plt.plot(fx, fb(fx), linewidth=4) \u3067\u540c\u3058\u3088\u3046\u306b\u56f3\u8868\u793a\n# \u5909\u5316\u70b9\u4ee5\u964d\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u8aa4\u5dee\u3092\u8a08\u7b97\u3059\u308b\n>>> frac = 0.3 # \u30c6 \u30b9 \u30c8 \u306b \u7528 \u3044 \u308b \u30c7 \u30fc\u30bf  \u306e \u5272 \u5408\n>>> split_idx = int(frac * len(xb))\n>>> shuffled = sp.random.permutation(list(range(len(xb)))) # \u5168\u30c7\u30fc\u30bf\u306e30%\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3073\u51fa\u3059\n>>> test = sorted(shuffled[:split_idx]) # \u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\n>>> train = sorted(shuffled[split_idx:]) # \u8a13\u7df4\u7528\u306e\u30c7\u30fc\u30bf\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\n>>> # \u305d\u308c\u305e\u308c\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u8a13\u7df4\u3092\u884c\u3046\n>>> fbt1 = sp.poly1d(sp.polyfit(xb[train], yb[train], 1))\n>>> fbt2 = sp.poly1d(sp.polyfit(xb[train], yb[train], 2))\n>>> fbt3 = sp.poly1d(sp.polyfit(xb[train], yb[train], 3))\n>>> fbt10 = sp.poly1d(sp.polyfit(xb[train], yb[train], 10))\n>>> fbt100 = sp.poly1d(sp.polyfit(xb[train], yb[train], 100))\n/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/lib/polynomial.py:579: RuntimeWarning: overflow encountered in multiply\n  scale = NX.sqrt((lhs*lhs).sum(axis=0))\n/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/lib/polynomial.py:587: RankWarning: Polyfit may be poorly conditioned\n  warnings.warn(msg, RankWarning)\n>>> # \u305d\u308c\u305e\u308c\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u8a55\u4fa1\u3092\u884c\u3046\n>>> for f in [fbt1, fbt2, fbt3, fbt10, fbt100]:\n...     print(\"Error d=%i: %f\"  % (f.order, error(f, xb[test], yb[test])))\n...\nError d=1: 33618254.181783\nError d=2: 31298428.161162\nError d=3: 30849423.817712\nError d=10: 28969336.428648\nError d=55: 28919778.656526\n# \u6642\u9593\u5f53\u305f\u308a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c100,000\u3092\u8d85\u3048\u308b\u6642\u671f\u3092\u4e88\u60f3 - \u4e8c\u6b21\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u308b\n# \u591a\u9805\u5f0f\u304b\u3089100,000\u3092\u5f15\u304d\u7b97\u3057\u3066\u65b0\u3057\u3044\u591a\u9805\u5f0f\u3092\u4f5c\u308a\u3001\u305d\u306e\u65b0\u3057\u3044\u591a\u9805\u5f0f\u306b\u5bfe\u3057\u3066\u6839\u3092\u6c42\u3081\u308b\n>>> print(fbt2)\n          2\n0.004136 x - 1.662 x + 1677\n>>> print(fbt2-100000)\n          2\n0.004136 x - 1.662 x - 9.832e+04\n>>> from scipy.optimize import fsolve\n>>> reached_max = fsolve(fbt2-100000, 800)/(7*24)\n>>> print(\"100,000 hits/hour expected at week %f\" % reached_max[0])\n100,000 hits/hour expected at week 30.241873\n\n# 2\u7ae0 P27\n# \u30af\u30e9\u30b9\u5206\u985e/\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\n# \u30a2\u30a4\u30ea\u30b9\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n# \u7279\u5fae\u91cf\n# \u4e09\u89d2:Setosa \u4e38:Versucikir \u7f70:Virginica\n>>> from matplotlib import pyplot as plt\n>>> from sklearn.datasets import load_iris\n>>> import numpy as np\n>>> data = load_iris() # sklearn\u304b\u3089load_iris\u95a2\u6570\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\n>>> features = data['data']\n>>> feature_names = data['feature_names']\n>>> target = data['target']\n>>> target_names = data['target_names']\n>>> labels = target_names[target] # ?\n>>> for t,marker,c in zip(range(3), \">ox\",\"rgb\"):\n...     plt.scatter(features[target == t,0],\n...                 features[target == t,1],\n...                 marker = marker,\n...                 c = c) # \u30af\u30e9\u30b9\u3054\u3068\u306b\u8272\u306e\u7570\u306a\u308b\u30de\u30fc\u30ab\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\n...\n<matplotlib.collections.PathCollection object at 0x10a5ec668>\n<matplotlib.collections.PathCollection object at 0x10a287208>\n<matplotlib.collections.PathCollection object at 0x10a5fa908>\n# \u300c\u82b1\u5f01\u306e\u9577\u3055\u300d\u306f\u914d\u5217\u306e3\u756a\u76ee\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n>>> plength = features[:, 2]\n>>> is_setosa = (labels == 'setosa') # setosa\u304b\u3069\u3046\u304b\u306eboolean\u914d\u5217\u3092\u751f\u6210\n>>> max_setosa = plength[is_setosa].max()\n>>> min_non_setosa = plength[~is_setosa].min()\n>>> print('Maximum of setosa: {0}.'.format(max_setosa))\nMaximum of setosa: 1.9. # \u82b1\u5f01\u9577\u3055\u306e\u6700\u5927\u5024->1.9\n>>> print('Minimum of others: {0}.'.format(min_non_setosa))\nMinimum of others: 3.0. # \u82b1\u5f01\u9577\u3055\u306e\u6700\u5c0f\u5024->3.0\n>>> def apply_model( example ):\n...     if example[2] < 2:\n...         print(\"Iris Setosa\")\n...     else:\n...         print(\"Iris Virginica or Itis Versicolor\")\n# \u4ed6\u306e\u30a2\u30a4\u30ea\u30b9\u306e\u9055\u3044\u3092\u305b\u51fa\u6765\u308b\u3060\u3051\u6700\u5584\u306e\u65b9\u6cd5\u3067\n>>> features = features[~is_setosa]\n>>> labels = labels[~is_setosa]\n>>> virginica = (labels == 'virginica')\n>>> best_acc = -1.0\n>>> best_fi = -1.0\n>>> best_t = -1.0\n>>> for fi in range(features.shape[1]): # \u5404\u7279\u5fae\u91cf\u3054\u3068\u306b\u95be\u5024\u306e\u5019\u88dc\u3092\u751f\u6210\u3059\u308b\n...     thresh = features[:,fi].copy()\n...     thresh.sort()\n...     for t in thresh: # \u3059\u3079\u3066\u306e\u95be\u5024\u3067\u30c6\u30b9\u30c8\u3059\u308b\n...         pred = (features[:,fi] > t)\n...         acc = (labels[pred] == 'virginica').mean()\n...         if acc > best_acc:\n...             best_acc = acc\n...             best_fi  = fi\n...             best_t   = t\n>>> def apply_model( example ):\n...     if(example[best_fi] > best_t):\n...         print(\"virginica\")\n...     else:\n...         print(\"virsicolor\")\n# heldout.py\u3092\u8d77\u52d5\n# python3 ./sample/ch02/heldout.py\n>>> from threshold import learn_model, apply_model, accuracy\n>>> for ei in range(len(features)): # ei\u756a\u76ee\u3092\u9664\u3044\u305f\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u304f\u308c\u3093\u3059\u308b\n...     training = np.ones(len(features), bool)\n...     training[ei] = False\n...     testing = ~training\n...     model = learn_model(features[training], virginica[training])\n...     predictions = apply_model(features[testing], virginica[testing], model)\n...     error += np.sum(predictions != virginica[testing])\n\n####\u79c1\u304c\u66f8\u7c4d\"\u5b9f\u8df5 \u6a5f\u68b0\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0\"\u3092\u8aad\u307f\u52c9\u5f37\u3057\u305f\u6642\u306b\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\u3068\u7b2c1\u7ae0\u306e\u30e1\u30e2\u3067\u3059\u3002\n##\u6a5f\u68b0\u5b66\u7fd2\u53c2\u8003\u30b5\u30a4\u30c8URL\n\n+ <a href=\"https://www.youtube.com/watch?v=1t14aa0Chqo&feature=youtu.be&t=19m20s\">MPS Yokohama Deep Learning vol.01\n</a>\n+ <a href=\"http://gauc.no-ip.org/~hi_saito/MPS/mps_yokohama.html\">\u6570\u5b66\u7684\u57fa\u790e\u304b\u3089\u5b66\u3076 Deep Learning</a>\n+ <a href=\"http://www.twotoreal.com/u/wr/2/public/59/faq/\">TwoToReal FAQ</a>\n+ <a href=\"https://github.com/wrichert/BuildingMachineLearningSystemsWithPython\">Github:wrichert/BuildingMachineLearningSystemsWithPython</a>\n+ <a href=\"http://ai-programming.hatenablog.jp/entry/2016/02/19/204649\">\uff11\u7ae0\u3000Python\u3067\u59cb\u3081\u308b\u6a5f\u68b0\u5b66\u7fd2</a>\n+ <a href=\"http://blog.amedama.jp/entry/2015/09/28/213745\">Python: SciPy \u3067\u7279\u5fb4\u91cf\u306e\u76f8\u95a2\u3092\u8abf\u3079\u308b</a>\n+ <a href=\"http://momijiame.tumblr.com/post/112131904206/python-scipy-%E3%81%AE%E3%82%AB%E3%83%BC%E3%83%96%E3%83%95%E3%82%A3%E3%83%83%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E8%A9%A6%E3%81%99\">Python: Scipy \u306e\u30ab\u30fc\u30d6\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u8a66\u3059</a>\n+ <a href=\"http://ktadaki.hatenablog.com/entry/2015/10/29/155340\">\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3058\u3083\u306a\u3044\u4eba\u304c\u59cb\u3081\u308b\u4eba\u5de5\u77e5\u80fd: Scipy\u3068Matplotlib\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b</a>\n+ <a href=\"http://yubais.net/doc/matplotlib/modify.html\">matplotlib\u5165\u9580 - \u30b0\u30e9\u30d5\u306e\u4f53\u88c1\u3092\u6574\u3048\u308b</a>\n+ <a href=\"http://bicycle1885.hatenablog.com/entry/2014/02/14/023734\">matplotlib\u5165\u9580</a>\n+ <a href=\"http://bicycle1885.hatenablog.com/entry/2014/02/14/023734\">NumPy \u3067\u56de\u5e30\u5206\u6790\n</a>\n\n##\"\u5b9f\u8df5 \u6a5f\u68b0\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0\"\u30e1\u30e2\n\n```\n# Numpy\u3068\u306f\uff1f\n# \u5927\u898f\u6a21\u306a\u591a\u6b21\u5143\u914d\u5217\u3084\u884c\u5217\u306e\u30b5\u30dd\u30fc\u30c8\u3001\n# \u3053\u308c\u3089\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u5927\u898f\u6a21\u306a\u9ad8\u6c34\u6e96\u306e\u6570\u5b66\u95a2\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\nhttp://rest-term.com/archives/2999/\nhttp://wbhappy.hatenablog.jp/entry/2015/02/06/210000\n# ndarray.flags    \u914d\u5217\u30c7\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u60c5\u5831\n# ndarray.ndim     \u914d\u5217\u306e\u6b21\u5143\u6570\n# ndarray.size     \u914d\u5217\u306e\u8981\u7d20\u6570\n# ndarray.shape    \u5404\u6b21\u5143\u306e\u8981\u7d20\u6570\n# ndarray.itemsize 1\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\n# ndarray.strides  \u5404\u6b21\u5143\u3067\u6b21\u306e\u8981\u7d20\u306b\u79fb\u52d5\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u30d0\u30a4\u30c8\u6570\n# ndarray.nbytes   \u914d\u5217\u5168\u4f53\u306e\u30d0\u30a4\u30c8\u6570\n# ndarray.dtype    \u914d\u5217\u8981\u7d20\u306e\u30c7\u30fc\u30bf\u578b (numpy.dtype)\n\n>>> import numpy as np\n>>> np.version.full_version\n'1.8.0rc1'\n>>> a = np.array([0,1,2,3,4,5])\n>>> a\narray([0, 1, 2, 3, 4, 5])\n>>> a.ndim\n1\n>>> a.shape\n(6,)\n>>> b = a.reshape((3,2))\n>>> b\narray([[0, 1],\n       [2, 3],\n       [4, 5]])\n>>> b.ndim\n2\n>>> b.shape\n(3, 2)\n>>> b[1][0] = 77\n>>> b\narray([[ 0,  1],\n       [77,  3],\n       [ 4,  5]])\n>>> a\narray([ 0,  1, 77,  3,  4,  5])\n>>> c = a.reshape((3,2)).copy()\n>>> c\narray([[ 0,  1],\n       [77,  3],\n       [ 4,  5]])\n>>> c[0][0] = -99\n>>> a\narray([ 0,  1, 77,  3,  4,  5])\n>>> c\narray([[-99,   1],\n       [ 77,   3],\n       [  4,   5]])\n>>> a*2\narray([  0,   2, 154,   6,   8,  10])\n>>> a**2\narray([   0,    1, 5929,    9,   16,   25])\n>>> a[np.array([2,3,4])]\narray([77,  3,  4])\n>>> a>4\narray([False, False,  True, False, False,  True], dtype=bool)\n>>> a[a>4]\narray([77,  5])\n>>> a[a>4]=4\n>>> a\narray([0, 1, 4, 3, 4, 4])\n>>> a.clip(0,4)\narray([0, 1, 4, 3, 4, 4])\n>>> c = np.array([1,2,np.NAN, 3,4]) # \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u3068\u4eee\u5b9a\n>>> c\narray([  1.,   2.,  nan,   3.,   4.])\n>>> np.isnan(c) # \u6b20\u640d\u5024\u3092\u7f6e\u304d\u63db\u3048\u308b\narray([False, False,  True, False, False], dtype=bool)\n>>> c[~np.isnan(c)]\narray([ 1.,  2.,  3.,  4.])\n>>> np.mean(c[~np.isnan(c)])\n2.5\n>>> import timeit\n>>> normal_py_sec = timeit.timeit('sum(x*x for x in xrange(1000))',number=10000)\n>>> Naive_np_sec = timeit.timeit('sum(na*na)',setup=\"import numpy as np; na=np.arange(1000)\", number=10000)\n>>> good_np_sec = timeit.timeit('na.dot(na)',setup=\"import numpy as np;  na=np.arange(1000)\", number=10000)\n>>> print(\"Normal Python: %f sec\"%normal_py_sec)\nNormal Python: 0.836571 sec\n>>> print(\"Naive Numpy: %f sec\"%Naive_np_sec)\nNaive Numpy: 4.806356 sec\n>>> print(\"Good Numpy: %f sec\"%good_np_sec)\nGood Numpy: 0.039245 sec\n>>> a = np.array([1,2,3])\n>>> a.dtype\ndtype('int64')\n>>> np.array([1, \"stringry\"])\narray(['1', 'stringry'],\n      dtype='|S8')\n>>> np.array([1, \"stringy\", set([1,2,3])])\narray([1, 'stringy', set([1, 2, 3])], dtype=object)\n```\n\n```\n# http://rest-term.com/archives/2999/\u3088\u308a\n\n>>> import numpy as np\n>>> a = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) # \u914d\u5217\u306e\u751f\u6210\n>>> a\narray([[ 1,  2,  3],\n       [ 4,  5,  6],\n       [ 7,  8,  9],\n       [10, 11, 12]])\n>>> a.flags     # \u914d\u5217\u30c7\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u60c5\u5831\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  UPDATEIFCOPY : False\n>>> a.ndim      # \u6b21\u5143\u6570\n2\n>>> a.size      # \u8981\u7d20\u6570\n12\n>>> a.shape     # \u5404\u6b21\u5143\u306e\u8981\u7d20\u6570(\u884c\u6570,\u5217\u6570)\n(4, 3)\n>>> a.itemsize  # 1\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\n8\n>>> a.strides   # 24\u30d0\u30a4\u30c8\u3067\u6b21\u306e\u884c\u30018\u30d0\u30a4\u30c8\u3067\u6b21\u306e\u5217\n(24, 8)\n>>> a.nbytes    # \u914d\u5217\u5168\u4f53\u306e\u30d0\u30a4\u30c8\u6570\n96\n>>> a.dtype     # \u8981\u7d20\u306e\u30c7\u30fc\u30bf\u578b\ndtype('int64')\n\n>>> np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n>>> np.ones(5)\narray([ 1.,  1.,  1.,  1.,  1.])\n>>> np.ones([2,3])\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n>>> np.identity(3)                       # \u5358\u4f4d\u884c\u5217\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n>>> np.eye(3)                            # \u5217\u6570\u6307\u5b9a\u304c\u3067\u304d\u308b\u5358\u4f4d\u884c\u5217\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n>>> np.arange(10)                        # range()\u3068\u540c\u3058\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> np.araange(1,2,0.2)                  # \u59cb\u70b9,\u7d42\u70b9,\u5897\u5206\narray([ 1. ,  1.2,  1.4,  1.6,  1.8])\n>>> np.linspace(1,4,6)                   # \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3067\u304d\u308brange()\narray([ 1. ,  1.6,  2.2,  2.8,  3.4,  4. ])\n>>> np.logspace(2,3,4)                   # \u5bfe\u6570\narray([  100.        ,   215.443469  ,   464.15888336,  1000.        ])\n>>> np.logspace(2,4,4, base=2)           # \u5e952\narray([  4.        ,   6.34960421,  10.0793684 ,  16.        ])\n>>> np.tile([0,1,2,3,4], 2)              # \u751f\u6210\u3001\u8981\u7d20\u3092\u7e70\u308a\u8fd4\u3057\u305f\u914d\u5217\u3092\u8fd4\u3059\narray([0, 1, 2, 3, 4, 0, 1, 2, 3, 4])\n>>> a,b = np.meshgrid([1,2,3],[4,5,6,7]) # \u7e26\u6a2a\u306b\u7b49\u9593\u9694\u306a\u683c\u5b50\u72b6\u914d\u5217\n>>> a\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])\n>>> b\narray([[4, 4, 4],\n       [5, 5, 5],\n       [6, 6, 6],\n       [7, 7, 7]])\n>>> np.tri(3) # \u4e09\u89d2\u884c\u5217\narray([[ 1.,  0.,  0.],\n       [ 1.,  1.,  0.],\n       [ 1.,  1.,  1.]])\n>>> a = np.array([[0,1,2],[3,4,5],[6,7,8]])\n>>> a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> np.diag(a)                  # \u5165\u529b\u914d\u5217\u304b\u3089\u5bfe\u89d2\u8981\u7d20\u3092\u629c\u304d\u51fa\u3057\u305f\u914d\u5217\narray([0, 4, 8])\n>>> np.empty(5)                 # \u9818\u57df\u306e\u78ba\u4fdd\u306e\u307f\u3067\u521d\u671f\u5316\u306f\u3055\u308c\u306a\u3044\narray([  0.00000000e+000,   4.94065646e-324,   9.88131292e-324,\n         1.48219694e-323,   1.97626258e-323])\n>>> a = np.array([1,2,3])\n>>> b = a.copy()\n>>> b\narray([1, 2, 3])\n>>> np.random.randint(0,100,10) # \u751f\u6210\u3059\u308b\u4e71\u6570\u306e\u7bc4\u56f2(\u6700\u5c0f\u5024,\u6700\u5927\u5024,\u8981\u7d20\u6570)\u3092\u6307\u5b9a\narray([67, 65, 61, 15, 48, 57, 42, 21, 49, 57])\n>>> a = np.arange(10)\n>>> a\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> a = np.arange(10)\n>>> b = a.reshape((2,5))        # \u914d\u5217\u5f62\u72b6\u306e\u5909\u66f4(\u3053\u306e\u5834\u54082\u6b21\u5143\u914d\u5217\u3078)\n>>> b\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n>>> a.resize((2,5))             # \u8981\u7d20\u6570\u306f\u305d\u306e\u307e\u307e\u30672\u6b21\u5143\u914d\u5217\u306b\u5909\u66f4\n>>> a\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n>>> a = np.tile(np.arange(3),3) # range(3)\u306e3\u5217\u683c\u5b50\n>>> a\narray([0, 1, 2, 0, 1, 2, 0, 1, 2])\n>>> np.argmax(a)                # \u6700\u5927\u5024\u8981\u7d20\u306e\u3046\u3061\u3067\u6700\u3082\u5c0f\u3055\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n2\n>>> np.argmin(a)                # \u6700\u5c0f\u5024\u8981\u7d20\u306e\u3046\u3061\u3067\u6700\u3082\u5c0f\u3055\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n0\n>>> a = np.eye(3)               # 3\u3064\u914d\u5217\n>>> a\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n>>> np.nonzero(a)               # \u975e\u30bc\u30ed\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u8fd4\u3059(\u3053\u306e\u5834\u5408\u4e8c\u6b21\u5143\u914d\u5217\u306a\u306e\u3067\u4e8c\u3064)\n(array([0, 1, 2]), array([0, 1, 2]))\n>>> a = np.arange(15).reshape((3,5))\n>>> a\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n>>> np.where(a%2==0)            # \u6761\u4ef6\u306b\u5408\u81f4\u3057\u305f\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\n(array([0, 0, 0, 1, 1, 2, 2, 2]), array([0, 2, 4, 1, 3, 0, 2, 4]))\n>>> a = np.arange(10)\n>>> np.select([a<3, a>5],[a, a**2]) # \u8907\u6570\u6761\u4ef6\u691c\u7d22 \u7b2c\u4e00\u5f15\u6570:\u6761\u4ef6\u306e\u914d\u5217 \u7b2c\u4e8c\u5f15\u6570:\u6761\u4ef6\u306b\u5408\u81f4\u3057\u305f\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30bb\u30c3\u30c8\u3059\u308b\u5024\u306e\u914d\u5217\narray([ 0,  1,  2,  0,  0,  0, 36, 49, 64, 81])\n>>> a = np.arange(9).reshape((3,3))\n>>> a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> b = np.arange(8,-1,-1).reshape((3,3))\n>>> b\narray([[8, 7, 6],\n       [5, 4, 3],\n       [2, 1, 0]])\n>>> np.dstack((a,b))            # \u4e8c\u6b21\u5143\u914d\u5217\u3092\u7d50\u5408\u3057\u3066\u4e09\u6b21\u5143\u914d\u5217\u306b\u3059\u308b\narray([[[0, 8],\n        [1, 7],\n        [2, 6]],\n\n       [[3, 5],\n        [4, 4],\n        [5, 3]],\n\n       [[6, 2],\n        [7, 1],\n        [8, 0]]])\n>>> np.hstack((a,b))            # \u5217\u65b9\u5411\u306b\u7d50\u5408\narray([[0, 1, 2, 8, 7, 6],\n       [3, 4, 5, 5, 4, 3],\n       [6, 7, 8, 2, 1, 0]])\n>>> np.vstack((a,b))            # \u884c\u65b9\u5411\u306b\u7d50\u5408\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8],\n       [8, 7, 6],\n       [5, 4, 3],\n       [2, 1, 0]])\n>>> a = np.arange(16).reshape(2,2,4)\n>>> a\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\n>>> np.dsplit(a,2)              # 3\u6b21\u5143\u914d\u5217\u3092\u5206\u5272\n[array([[[ 0,  1],\n        [ 4,  5]],\n\n       [[ 8,  9],\n        [12, 13]]]), array([[[ 2,  3],\n        [ 6,  7]],\n\n       [[10, 11],\n        [14, 15]]])]\n>>> a = np.arange(16).reshape(4,4)\n>>> a\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n>>> np.hsplit(a,2)              # \u5217\u65b9\u5411\u306b\u5206\u5272\n[array([[ 0,  1],\n       [ 4,  5],\n       [ 8,  9],\n       [12, 13]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11],\n       [14, 15]])]\n>>> np.vsplit(a,2)              # \u884c\u65b9\u5411\u306b\u5206\u5272\n[array([[0, 1, 2, 3],\n       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],\n       [12, 13, 14, 15]])]\n>>> a = np.array([[1,2],[3,4]])\n>>> a\narray([[1, 2],\n       [3, 4]])\n>>> np.transpose(a)             # \u914d\u5217\u3092\u8ee2\u7f6e\narray([[1, 3],\n       [2, 4]])\n>>> a = np.array([[1,2,3]])\n>>> np.swapaxes(a,0,1)          # \u8ef8\u306e\u4ea4\u63db\narray([[1],\n       [2],\n       [3]])\n>>> a = np.random.randint(0,500,20)\n>>> a\narray([444,  97, 324, 492, 275,  95, 157, 336,  51, 249, 363, 409, 299,\n       432,  41, 469, 201, 308,  85, 455])\n>>> np.amax(a)                  # \u6700\u5927\u5024\n492\n>>> np.amin(a)                  # \u6700\u5c0f\u5024\n41\n>>> np.ptp(a)                   # \u5024\u306e\u7bc4\u56f2(\u6700\u5927\u5024-\u6700\u5c0f\u5024)\n451\n>>> np.mean(a)                  # \u7b97\u8853\u5e73\u5747\n279.10000000000002\n>>> np.median(a)                # \u4e2d\u592e\u5024\n303.5\n>>> np.std(a)                   # \u6a19\u6e96\u504f\u5dee\n146.4031761950539\n>>> np.var(a)                   # \u5206\u6563\n21433.889999999999\n>>> b = np.random.randint(0,500,20)\n>>> b\narray([375, 207, 495, 320, 472, 481, 491, 133, 279, 480, 232, 261, 492,\n       183, 168, 424,  95, 236, 176, 332])\n>>> np.corrcoef(a,b)            # \u76f8\u95a2\u4fc2\u6570\narray([[ 1.        ,  0.12452095],\n       [ 0.12452095,  1.        ]])\n>>> c = np.random.randint(0,10,20)\n>>> c\narray([6, 5, 9, 7, 9, 6, 4, 0, 1, 4, 6, 3, 2, 7, 9, 3, 4, 9, 4, 8])\n>>> np.histogram(c)             # \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n(array([1, 1, 1, 2, 4, 1, 3, 2, 1, 4]), array([ 0. ,  0.9,  1.8,  2.7,  3.6,  4.5,  5.4,  6.3,  7.2,  8.1,  9. ]))\n```\n\n```\n# SciPy\u3068\u306f?\n# \u591a\u304f\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63d0\u4f9b\n#  cluster : \u968e\u5c64\u30af\u30e9\u30b9\u30bf\u30a4\u30f3\u30b0/\u30d9\u30af\u30c8\u30ea\u91cf\u5b50\u5316/K\u5e73\u5747\u6cd5\n#  constants : \u7269\u7406\u6570\u5b66\u5b9a\u6570\n#  fftpack : \u30d5\u30fc\u30ea\u30a8\u5b9a\u7fa9\n#  integrate : \u7a4d\u5206\n#  interpolate : \u88dc\u9593(\u30ea\u30cb\u30a2,\u30ad\u30e5\u30fc\u30d3\u30c3\u30af\u306a\u3069)\n#  io : \u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\n#  linalg : BLAS\u3068LAPACK\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u305f\u7dda\u5f62\u4ee3\u6570\u30eb\u30fc\u30c1\u30f3\n#  maxentropy : \u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u5206\u5e03\n#  ndimage : n\u6b21\u5143\u753b\u50cf\u30d1\u30c3\u30b1\u30fc\u30b8\n#  odr : \u76f4\u4ea4\u8ddd\u96e2\u56de\u5e30\n#  optimize : \u6700\u9069\u5316\n#  signal : \u4fe1\u53f7\u51e6\u7406\n#  sparse : \u758e\u884c\u5217\n#  spatial : \u7a7a\u9593\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n#  special : \u30d9\u30c3\u30bb\u30eb\u95a2\u6570\u3001 \u3084\u3063\u3053\u30d3\u30a2\u30f3\u306a\u3069\u306e\u7279\u6b8a\u95a2\u6570\n#  stats : \u7d71\u8a08\n\n>>> import scipy, numpy\n>>> scipy.version.full_version\n'0.13.0b1'\n>>> scipy.dot is numpy.dot\nTrue # \u540d\u524d\u7a7a\u9593\u304cNumpy\u3068\u540c\u3058\n>>> data = sp.genfromtxt(\"sample/ch01/data/web_traffic.tsv\", delimiter='\\t')\n>>> print(data.shape)\n(743, 2)\n>>> print(data[:10])\n\n```\n\n```\n>>> import scipy as sp\n>>> data = sp.genfromtxt(\"./sample/ch01/data/web_traffic.tsv\", delimiter=\"\\t\") #  \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n>>> print(data[:10])\n [  2.00000000e+00   1.65600000e+03]\n [  3.00000000e+00   1.38600000e+03]\n [  4.00000000e+00   1.36500000e+03]\n [  5.00000000e+00   1.48800000e+03]\n [  6.00000000e+00   1.33700000e+03]\n [  7.00000000e+00   1.88300000e+03]\n [  8.00000000e+00   2.28300000e+03]\n [  9.00000000e+00   1.33500000e+03]\n [  1.00000000e+01   1.02500000e+03]]\n>>> print(data.shape)\n(743, 2)\n>>> x = data[:,0] # \u7d4c\u904e\u6642\u9593(SciPy:0\u756a\u76ee\u306e\u6b21\u5143\u3092\u62bd\u51fa\u3057\u308d)\n>>> y = data[:,1] # \u30a2\u30af\u30bb\u30b9\u6570\n>>> sp.sum(sp.isnan(y)) # \u4e0d\u9069\u5207\u306a\u5024\n0\n>>> x = x[~sp.isnan(y)] # \u4e0d\u9069\u5207\u306a\u5024\u3092\u53d6\u308a\u9664\u304f\n>>> y = y[~sp.isnan(y)] # \u4e0d\u9069\u5207\u306a\u5024\u3092\u53d6\u308a\u9664\u304f\n>>> import matplotlib.pyplot as plt # \u6563\u5e03\u56f3\n>>> plt.scatter(x,y)\n<matplotlib.collections.PathCollection object at 0x11192e5d0>\n>>> plt.title(\"Web traffic over the last month\")\n<matplotlib.text.Text object at 0x1118f7c90>\n>>> plt.xlabel(\"Time\")\n<matplotlib.text.Text object at 0x111636090>\n>>> plt.ylabel(\"Hits/hour\")\n<matplotlib.text.Text object at 0x111649fd0>\n>>> plt.xticks([w*7*24 for w in range(10)], ['week %i' %w for w in range(10)])\n([<matplotlib.axis.XTick object at 0x10e349710>, <matplotlib.axis.XTick object at 0x111653450>, <matplotlib.axis.XTick object at 0x11192edd0>, <matplotlib.axis.XTick object at 0x1119514d0>, <matplotlib.axis.XTick object at 0x111951c10>, <matplotlib.axis.XTick object at 0x113505390>, <matplotlib.axis.XTick object at 0x113505ad0>, <matplotlib.axis.XTick object at 0x11350e250>, <matplotlib.axis.XTick object at 0x11350e990>, <matplotlib.axis.XTick object at 0x11351a110>], <a list of 10 Text xticklabel objects>)\n>>> plt.autoscale(tight=True)\n>>> plt.grid()\n>>> plt.show()\n# \u30ab\u30fc\u30d6\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\n# polyfit(x,y,n) : \u56de\u5e30\u5206\u6790\u306b\u4f7f\u3046\u95a2\u6570(n\u6b21\u5f0f\u30672\u5909\u6570\u306e\u56de\u5e30\u5206\u6790)\n# \u56de\u5e30\u5206\u6790...\u76f8\u95a2\u95a2\u4fc2\u3084\u56e0\u679c\u95a2\u4fc2\u304c\u3042\u308b\u3068\u601d\u308f\u308c\u308b2\u3064\u306e\u5909\u6570\u306e\u3046\u3061\u3001\u4e00\u65b9\u306e\u5909\u6570\u304b\u3089\u5c06\u6765\u7684\u306a\u5024\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306e\u4e88\u6e2c\u5f0f\uff08\u56de\u5e30\u76f4\u7dda\uff09\u3092\u6c42\u3081\u308b\u305f\u3081\u306e\u624b\u6cd5\u3002\n>>> def error(f, x, y): #\u30e2\u30c7\u30eb\u95a2\u6570f\u304c\u5b58\u5728\u3059\u308b\u3068\u4eee\u5b9a\u3057\u305f\u6642\u306e\u8aa4\u5dee\n...     return sp.sum((f(x)-y)**2)\n>>> fp1, residuals, rank, sv, rcond = sp.polyfit(x, y, 1, full=True) # polyfit\u3067x,y\u3092\u6700\u5c0f\u4e8c\u4e57\u7684\u306b\u8fd1\u4f3c\u3068\u306a\u308b\u30e2\u30c7\u30eb\u306e\u4fc2\u6570\u3092\u53d6\u5f97\n>>> print(\"Model parameters: %s\" % fp1)\nModel parameters: [    2.57152281  1002.10684085]\n>>> print(residuals) # \u5270\u4f59\n[  3.19874315e+08]\n>>> print(rank) # \u884c\u5217\u306e\u30e9\u30f3\u30af\n2\n>>> print(rcond) # \u6761\u4ef6\u6570\u306e\u9006\u6570\n1.64979141459e-13\n\u53c2\u7167 : http://ktadaki.hatenablog.com/entry/2015/10/29/155340\n5\u500b\u306e\u5909\u6570\u306b\u5024\u3092\u5165\u308c\u3066\u3044\u308b\u304c\u3001\u4f7f\u3046\u306e\u306f\u6700\u521d\u306efp1\u306e\u307f\u3002fp1\u306e\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n[   2.59619213  989.02487106]\n\u3064\u307e\u308a\u3001\u3053\u3093\u306a\u5f0f\u3092\u5f97\u305f\u308f\u3051\u3060\u3002\nf(x)=2.59619213x+989.02487106\n>>> f1 = sp.poly1d(fp1) # \u30e2\u30c7\u30eb\u95a2\u6570\u3092\u4f5c\u6210\n>>> print(error(f1,x,y))\n319874314.777\n>>> import matplotlib.pyplot as plt # \u6563\u5e03\u56f3\n>>> plt.scatter(x,y)\n<matplotlib.collections.PathCollection object at 0x11192e5d0>\n>>> plt.title(\"Web traffic over the last month\")\n<matplotlib.text.Text object at 0x1118f7c90>\n>>> plt.xlabel(\"Time\")\n<matplotlib.text.Text object at 0x111636090>\n>>> plt.ylabel(\"Hits/hour\")\n<matplotlib.text.Text object at 0x111649fd0>\n>>> plt.xticks([w*7*24 for w in range(10)], ['week %i' %w for w in range(10)]) # x\u8ef8\u306e\u76ee\u76db\u308a\u3092\u66f8\u304d\u63db\u3048\u308b\u3002\u5f15\u6570\u306b\u306f\u300c\u3069\u306e\u4f4d\u7f6e\u306b\u300d\u300c\u4f55\u3092\u300d\u8868\u793a\u3059\u308b\u304b\u3092\u305d\u308c\u305e\u308c\u30ea\u30b9\u30c8\u3067\u6307\u5b9a\n([<matplotlib.axis.XTick object at 0x10e349710>, <matplotlib.axis.XTick object at 0x111653450>, <matplotlib.axis.XTick object at 0x11192edd0>, <matplotlib.axis.XTick object at 0x1119514d0>, <matplotlib.axis.XTick object at 0x111951c10>, <matplotlib.axis.XTick object at 0x113505390>, <matplotlib.axis.XTick object at 0x113505ad0>, <matplotlib.axis.XTick object at 0x11350e250>, <matplotlib.axis.XTick object at 0x11350e990>, <matplotlib.axis.XTick object at 0x11351a110>], <a list of 10 Text xticklabel objects>)\n>>> plt.autoscale(tight=True)\n<matplotlib.legend.Legend object at 0x10c587ad0>\n>>> fx = sp.linspace(0, x[-1], 1000) # \u30d7\u30ed\u30c3\u30c8\u7528\u306b\"x\u5024\"\u3092\u751f\u6210\n>>> plt.plot(fx, f1(fx), linewidth=4) # \u30ea\u30b9\u30c8\u3092\u30b0\u30e9\u30d5\u3068\u3057\u3066\u63cf\u5199\n[<matplotlib.lines.Line2D object at 0x10c587850>]\n>>> plt.legend([\"d=%i\" % f1.order], loc=\"upper left\") # \u51e1\u4f8b\u3092\u8868\u793a\n>>> plt.grid()\n>>> plt.show()\n```\n\n```\n>>> f2p = sp.polyfit(x, y, 2)\n>>> print(f2p)\n[  1.04688184e-02  -5.21727812e+00   1.96921629e+03]\n>>> f2 = sp.poly1d(f2p)\n>>> print(error(f2, x, y))\n182006476.432\n# f(x) = 0.0105322215 * x**2 - 5.26545650 * x + 1974.76802\n>>> plt.plot(fx, f2(fx), linewidth=4)\n# \u2191\u5148\u307b\u3069\u306e\u3084\u3064\u306b\u7d44\u307f\u8fbc\u3080\n# \u3088\u308a\u6b63\u78ba\u306a\u66f2\u7dda\u3060\u304c\u3001\u95a2\u6570\u304c\u8907\u96d1\n# \u6b21\u6570-3,10,100\u3067\u8a66\u3057\u305f\u2192\u904e\u5b66\u7fd2\n# \u6b21\u65701\u3067\u8a66\u3057\u305f \u2192 \u672a\u5b66\u7fd2\n# \u4e00\u3064\u76ee\u306e\u76f4\u7dda\u30923.5\u9031\u3088\u308a\u524d\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u5b66\u7fd2, \u4e8c\u3064\u76ee\u306e\u76f4\u7dda\u306f\u305d\u308c\u4ee5\u964d\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\n>>> inflection = 3.5*7*24 # \u5909\u5316\u70b9\u306e\u6642\u9593\u3092\u8a08\u7b97\n>>> xa = x[:inflection] # \u5909\u5316\u70b9\u524d\u306e\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\n>>> ya = y[:inflection]\n>>> xb = x[:inflection] # \u5909\u5316\u70b9\u5f8c\n>>> yb = y[:inflection]\n>>> fa = sp.poly1d(sp.polyfit(xa, ya, 1))\n>>> fb = sp.poly1d(sp.polyfit(xb, yb, 1))\n>>> fa_error = error(fa, xa, ya)\n>>> fb_error = error(fb, xb, yb)\n>>> print(\"Error inflection=%f\" % (fa_error + fb_error))\nError inflection=218985429.871767\n# plt.plot(fx, fa(fx), linewidth=4)\n# plt.plot(fx, fb(fx), linewidth=4) \u3067\u540c\u3058\u3088\u3046\u306b\u56f3\u8868\u793a\n# \u5909\u5316\u70b9\u4ee5\u964d\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u8aa4\u5dee\u3092\u8a08\u7b97\u3059\u308b\n>>> frac = 0.3 # \u30c6 \u30b9 \u30c8 \u306b \u7528 \u3044 \u308b \u30c7 \u30fc\u30bf  \u306e \u5272 \u5408\n>>> split_idx = int(frac * len(xb))\n>>> shuffled = sp.random.permutation(list(range(len(xb)))) # \u5168\u30c7\u30fc\u30bf\u306e30%\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3073\u51fa\u3059\n>>> test = sorted(shuffled[:split_idx]) # \u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\n>>> train = sorted(shuffled[split_idx:]) # \u8a13\u7df4\u7528\u306e\u30c7\u30fc\u30bf\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\n>>> # \u305d\u308c\u305e\u308c\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u8a13\u7df4\u3092\u884c\u3046\n>>> fbt1 = sp.poly1d(sp.polyfit(xb[train], yb[train], 1))\n>>> fbt2 = sp.poly1d(sp.polyfit(xb[train], yb[train], 2))\n>>> fbt3 = sp.poly1d(sp.polyfit(xb[train], yb[train], 3))\n>>> fbt10 = sp.poly1d(sp.polyfit(xb[train], yb[train], 10))\n>>> fbt100 = sp.poly1d(sp.polyfit(xb[train], yb[train], 100))\n/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/lib/polynomial.py:579: RuntimeWarning: overflow encountered in multiply\n  scale = NX.sqrt((lhs*lhs).sum(axis=0))\n/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/lib/polynomial.py:587: RankWarning: Polyfit may be poorly conditioned\n  warnings.warn(msg, RankWarning)\n>>> # \u305d\u308c\u305e\u308c\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u8a55\u4fa1\u3092\u884c\u3046\n>>> for f in [fbt1, fbt2, fbt3, fbt10, fbt100]:\n...     print(\"Error d=%i: %f\"  % (f.order, error(f, xb[test], yb[test])))\n...\nError d=1: 33618254.181783\nError d=2: 31298428.161162\nError d=3: 30849423.817712\nError d=10: 28969336.428648\nError d=55: 28919778.656526\n# \u6642\u9593\u5f53\u305f\u308a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c100,000\u3092\u8d85\u3048\u308b\u6642\u671f\u3092\u4e88\u60f3 - \u4e8c\u6b21\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u308b\n# \u591a\u9805\u5f0f\u304b\u3089100,000\u3092\u5f15\u304d\u7b97\u3057\u3066\u65b0\u3057\u3044\u591a\u9805\u5f0f\u3092\u4f5c\u308a\u3001\u305d\u306e\u65b0\u3057\u3044\u591a\u9805\u5f0f\u306b\u5bfe\u3057\u3066\u6839\u3092\u6c42\u3081\u308b\n>>> print(fbt2)\n          2\n0.004136 x - 1.662 x + 1677\n>>> print(fbt2-100000)\n          2\n0.004136 x - 1.662 x - 9.832e+04\n>>> from scipy.optimize import fsolve\n>>> reached_max = fsolve(fbt2-100000, 800)/(7*24)\n>>> print(\"100,000 hits/hour expected at week %f\" % reached_max[0])\n100,000 hits/hour expected at week 30.241873\n```\n\n```\n# 2\u7ae0 P27\n# \u30af\u30e9\u30b9\u5206\u985e/\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\n# \u30a2\u30a4\u30ea\u30b9\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n# \u7279\u5fae\u91cf\n# \u4e09\u89d2:Setosa \u4e38:Versucikir \u7f70:Virginica\n>>> from matplotlib import pyplot as plt\n>>> from sklearn.datasets import load_iris\n>>> import numpy as np\n>>> data = load_iris() # sklearn\u304b\u3089load_iris\u95a2\u6570\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\n>>> features = data['data']\n>>> feature_names = data['feature_names']\n>>> target = data['target']\n>>> target_names = data['target_names']\n>>> labels = target_names[target] # ?\n>>> for t,marker,c in zip(range(3), \">ox\",\"rgb\"):\n...     plt.scatter(features[target == t,0],\n...                 features[target == t,1],\n...                 marker = marker,\n...                 c = c) # \u30af\u30e9\u30b9\u3054\u3068\u306b\u8272\u306e\u7570\u306a\u308b\u30de\u30fc\u30ab\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\n...\n<matplotlib.collections.PathCollection object at 0x10a5ec668>\n<matplotlib.collections.PathCollection object at 0x10a287208>\n<matplotlib.collections.PathCollection object at 0x10a5fa908>\n# \u300c\u82b1\u5f01\u306e\u9577\u3055\u300d\u306f\u914d\u5217\u306e3\u756a\u76ee\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n>>> plength = features[:, 2]\n>>> is_setosa = (labels == 'setosa') # setosa\u304b\u3069\u3046\u304b\u306eboolean\u914d\u5217\u3092\u751f\u6210\n>>> max_setosa = plength[is_setosa].max()\n>>> min_non_setosa = plength[~is_setosa].min()\n>>> print('Maximum of setosa: {0}.'.format(max_setosa))\nMaximum of setosa: 1.9. # \u82b1\u5f01\u9577\u3055\u306e\u6700\u5927\u5024->1.9\n>>> print('Minimum of others: {0}.'.format(min_non_setosa))\nMinimum of others: 3.0. # \u82b1\u5f01\u9577\u3055\u306e\u6700\u5c0f\u5024->3.0\n>>> def apply_model( example ):\n...     if example[2] < 2:\n...         print(\"Iris Setosa\")\n...     else:\n...         print(\"Iris Virginica or Itis Versicolor\")\n# \u4ed6\u306e\u30a2\u30a4\u30ea\u30b9\u306e\u9055\u3044\u3092\u305b\u51fa\u6765\u308b\u3060\u3051\u6700\u5584\u306e\u65b9\u6cd5\u3067\n>>> features = features[~is_setosa]\n>>> labels = labels[~is_setosa]\n>>> virginica = (labels == 'virginica')\n>>> best_acc = -1.0\n>>> best_fi = -1.0\n>>> best_t = -1.0\n>>> for fi in range(features.shape[1]): # \u5404\u7279\u5fae\u91cf\u3054\u3068\u306b\u95be\u5024\u306e\u5019\u88dc\u3092\u751f\u6210\u3059\u308b\n...     thresh = features[:,fi].copy()\n...     thresh.sort()\n...     for t in thresh: # \u3059\u3079\u3066\u306e\u95be\u5024\u3067\u30c6\u30b9\u30c8\u3059\u308b\n...         pred = (features[:,fi] > t)\n...         acc = (labels[pred] == 'virginica').mean()\n...         if acc > best_acc:\n...             best_acc = acc\n...             best_fi  = fi\n...             best_t   = t\n>>> def apply_model( example ):\n...     if(example[best_fi] > best_t):\n...         print(\"virginica\")\n...     else:\n...         print(\"virsicolor\")\n# heldout.py\u3092\u8d77\u52d5\n# python3 ./sample/ch02/heldout.py\n>>> from threshold import learn_model, apply_model, accuracy\n>>> for ei in range(len(features)): # ei\u756a\u76ee\u3092\u9664\u3044\u305f\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u304f\u308c\u3093\u3059\u308b\n...     training = np.ones(len(features), bool)\n...     training[ei] = False\n...     testing = ~training\n...     model = learn_model(features[training], virginica[training])\n...     predictions = apply_model(features[testing], virginica[testing], model)\n...     error += np.sum(predictions != virginica[testing])\n```\n", "tags": ["Python", "\u30e1\u30e2", "\u6a5f\u68b0\u5b66\u7fd2"]}