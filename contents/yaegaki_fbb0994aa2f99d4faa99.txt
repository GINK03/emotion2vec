{"context": " More than 1 year has passed since last update.\u30bf\u30a4\u30c8\u30eb\u306b\u306fC#\u3001DLL\u3068\u66f8\u304d\u307e\u3057\u305f\u304c.Net\u3084Mono\u3067\u4f5c\u6210\u3055\u308c\u305f\u3082\u306e\u306a\u3089\u5927\u62b5\u5927\u4e08\u592b\u3067\u3059\u3002\n\u4eca\u56de\u306fMono.Cecil\u3092\u5229\u7528\u3057\u3066DLL\u304b\u3089\u6587\u5b57\u5217\u3092\u62bd\u51fa\u3057\u307e\u3057\u305f\u3002\nMono.Cecil\u3092\u4f7f\u7528\u3059\u308b\u3068\u7c21\u5358\u306bDLL\u3084EXE\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u305f\u308a\u5909\u66f4\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u4fbf\u5229\u3067\u3059\u3002\nMono.Cecil\u306fNuGet\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\u306e\u3067\u7c21\u5358\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nshowString.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApplication2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length == 1)\n            {\n                var assembly = Mono.Cecil.AssemblyDefinition.ReadAssembly(args[0]);\n                assembly.Modules\n                    .SelectMany(x => x.Types)\n                    .ToList()\n                    .ForEach((type) =>\n                {\n                    showString(type, assembly);\n                });\n            }\n            else\n            {\n                Console.WriteLine(\"\u5f15\u304d\u6570\u306bdll\u304bexe\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\n            }\n        }\n\n        static private void showString(Mono.Cecil.TypeDefinition type, Mono.Cecil.AssemblyDefinition assembly, string prefix = \"\")\n        {\n            if (prefix != \"\")\n            {\n                prefix += \".\";\n            }\n            if (type.Namespace != \"\")\n            {\n                prefix += type.Namespace + \".\";\n            }\n            prefix += type.Name;\n\n            type.NestedTypes.ToList().ForEach(x => {\n                showString(x, assembly, prefix);\n            });\n\n            type.Methods.ToList().ForEach((method) =>\n            {\n                var lineCount = 0;\n                if (method.HasBody)\n                {\n                    method.Body.Instructions.ToList().ForEach(inst =>\n                    {\n                        if (inst.OpCode == Mono.Cecil.Cil.OpCodes.Ldstr)\n                        {\n                            if (lineCount == 0)\n                            {\n                                Console.WriteLine(string.Format(\"{0}.{1}:\", prefix, method.Name));\n                            }\n                            Console.WriteLine(string.Format(\"{0}:{1}\", lineCount, inst.Operand.ToString()));\n                            lineCount++;\n                        }\n                    });\n                }\n\n                if (lineCount != 0)\n                {\n                    Console.WriteLine();\n                }\n            });\n        }\n    }\n}\n\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u6587\u5b57\u5217\u3092\u62bd\u51fa\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nConsoleApplication2.Program.<>c__DisplayClass3.<Main>b__0:\n0:\n\nConsoleApplication2.Program.<>c__DisplayClass8.<>c__DisplayClassb.<showString>b__7:\n0:{0}.{1}:\n1:{0}:{1}\n\nConsoleApplication2.Program.Main:\n0:\u5f15\u304d\u6570\u306bdll\u304bexe\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nConsoleApplication2.Program.showString:\n0:\n1:.\n2:\n3:.\n\n\n\n\n\u53c2\u8003\nHow to search for a string in a compiled assembly using Reflection or Mono.Cecil?\n\u30bf\u30a4\u30c8\u30eb\u306b\u306fC#\u3001DLL\u3068\u66f8\u304d\u307e\u3057\u305f\u304c.Net\u3084Mono\u3067\u4f5c\u6210\u3055\u308c\u305f\u3082\u306e\u306a\u3089\u5927\u62b5\u5927\u4e08\u592b\u3067\u3059\u3002\n\n\u4eca\u56de\u306f`Mono.Cecil`\u3092\u5229\u7528\u3057\u3066DLL\u304b\u3089\u6587\u5b57\u5217\u3092\u62bd\u51fa\u3057\u307e\u3057\u305f\u3002\n`Mono.Cecil`\u3092\u4f7f\u7528\u3059\u308b\u3068\u7c21\u5358\u306bDLL\u3084EXE\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u305f\u308a\u5909\u66f4\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u4fbf\u5229\u3067\u3059\u3002\n`Mono.Cecil`\u306fNuGet\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\u306e\u3067\u7c21\u5358\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```showString.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApplication2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length == 1)\n            {\n                var assembly = Mono.Cecil.AssemblyDefinition.ReadAssembly(args[0]);\n                assembly.Modules\n                    .SelectMany(x => x.Types)\n                    .ToList()\n                    .ForEach((type) =>\n                {\n                    showString(type, assembly);\n                });\n            }\n            else\n            {\n                Console.WriteLine(\"\u5f15\u304d\u6570\u306bdll\u304bexe\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\n            }\n        }\n\n        static private void showString(Mono.Cecil.TypeDefinition type, Mono.Cecil.AssemblyDefinition assembly, string prefix = \"\")\n        {\n            if (prefix != \"\")\n            {\n                prefix += \".\";\n            }\n            if (type.Namespace != \"\")\n            {\n                prefix += type.Namespace + \".\";\n            }\n            prefix += type.Name;\n\n            type.NestedTypes.ToList().ForEach(x => {\n                showString(x, assembly, prefix);\n            });\n\n            type.Methods.ToList().ForEach((method) =>\n            {\n                var lineCount = 0;\n                if (method.HasBody)\n                {\n                    method.Body.Instructions.ToList().ForEach(inst =>\n                    {\n                        if (inst.OpCode == Mono.Cecil.Cil.OpCodes.Ldstr)\n                        {\n                            if (lineCount == 0)\n                            {\n                                Console.WriteLine(string.Format(\"{0}.{1}:\", prefix, method.Name));\n                            }\n                            Console.WriteLine(string.Format(\"{0}:{1}\", lineCount, inst.Operand.ToString()));\n                            lineCount++;\n                        }\n                    });\n                }\n\n                if (lineCount != 0)\n                {\n                    Console.WriteLine();\n                }\n            });\n        }\n    }\n}\n\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u6587\u5b57\u5217\u3092\u62bd\u51fa\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```text\nConsoleApplication2.Program.<>c__DisplayClass3.<Main>b__0:\n0:\n\nConsoleApplication2.Program.<>c__DisplayClass8.<>c__DisplayClassb.<showString>b__7:\n0:{0}.{1}:\n1:{0}:{1}\n\nConsoleApplication2.Program.Main:\n0:\u5f15\u304d\u6570\u306bdll\u304bexe\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nConsoleApplication2.Program.showString:\n0:\n1:.\n2:\n3:.\n\n\n```\n\n## \u53c2\u8003\n[How to search for a string in a compiled assembly using Reflection or Mono.Cecil?](http://stackoverflow.com/questions/21910322/how-to-search-for-a-string-in-a-compiled-assembly-using-reflection-or-mono-cecil)\n", "tags": ["C#", "mono"]}