{"context": " More than 1 year has passed since last update.ExcelVBA\u3067\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\u30b3\u30fc\u30c9\u3002\nx64\u7248\u306b\u3082\u3055\u308a\u3052\u306a\u304f\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u308b\u3002\nx64\u7248\u3060\u3068\u3001API\u306e\u5b9a\u7fa9\u3067PtrSafe\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3001\u30dd\u30a4\u30f3\u30bf\u30b5\u30a4\u30ba\u304c64bit\u306b\u306a\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u7279\u306b\u30cf\u30f3\u30c9\u30e9\u306e\u578b\u3092Long\u304b\u3089LongPtr\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nOption Explicit\n\n#If VBA7 And Win64 Then\n\nPrivate Declare PtrSafe Function GetFileVersionInfoSize Lib \"version.dll\" Alias \"GetFileVersionInfoSizeA\" ( _\n    ByVal lptstrFilename As String, _\n    ByRef lpdwHandle As LongPtr) As Long\n\nPrivate Declare PtrSafe Function GetFileVersionInfo Lib \"version.dll\" Alias \"GetFileVersionInfoA\" ( _\n    ByVal lptstrFilename As String, _\n    ByVal dwHandle As LongPtr, _\n    ByVal dwLen As Long, _\n    ByRef lpData As Any) As Long\n\nPrivate Declare PtrSafe Function VerQueryValue Lib \"version.dll\" Alias \"VerQueryValueA\" ( _\n    ByRef pBlock As Any, _\n    ByVal lpSubBlock As String, _\n    ByRef lplpBuffer As Any, _\n    ByRef puLen As Long) As Long\n\nPrivate Declare PtrSafe Sub CopyMemory Lib \"kernel32.dll\" Alias \"RtlMoveMemory\" ( _\n    ByRef Destination As Any, _\n    ByRef Source As Any, _\n    ByVal Length As Long)\n\n#Else\n\nPrivate Declare Function GetFileVersionInfoSize Lib \"version.dll\" Alias \"GetFileVersionInfoSizeA\" ( _\n    ByVal lptstrFilename As String, _\n    ByRef lpdwHandle As Long) As Long\n\nPrivate Declare Function GetFileVersionInfo Lib \"version.dll\" Alias \"GetFileVersionInfoA\" ( _\n    ByVal lptstrFilename As String, _\n    ByVal dwHandle As Long, _\n    ByVal dwLen As Long, _\n    ByRef lpData As Any) As Long\n\nPrivate Declare Function VerQueryValue Lib \"version.dll\" Alias \"VerQueryValueA\" ( _\n    ByRef pBlock As Any, _\n    ByVal lpSubBlock As String, _\n    ByRef lplpBuffer As Any, _\n    ByRef puLen As Long) As Long\n\nPrivate Declare Sub CopyMemory Lib \"kernel32\" Alias \"RtlMoveMemory\" ( _\n    ByRef Destination As Any, _\n    ByRef Source As Any, _\n    ByVal Length As Long)\n\n#End If\n\nPrivate Type VS_FIXEDFILEINFO\n    dwSignature As Long\n    dwStrucVersionl As Integer\n    dwStrucVersionh As Integer\n    dwFileVersionMSl As Integer\n    dwFileVersionMSh As Integer\n    dwFileVersionLSl As Integer\n    dwFileVersionLSh As Integer\n    dwProductVersionMSl As Integer\n    dwProductVersionMSh As Integer\n    dwProductVersionLSl As Integer\n    dwProductVersionLSh As Integer\n    dwFileFlagsMask As Long\n    dwFileFlags As Long\n    dwFileOS As Long\n    dwFileType As Long\n    dwFileSubtype As Long\n    dwFileDateMS As Long\n    dwFileDateLS As Long\nEnd Type\n\nPrivate Type FILEINFOOUT\n    FileVersion As String\n    ProductVersion As String\nEnd Type\n\nPublic Sub GetVersion(ByVal path As String)\n\n#If VBA7 And Win64 Then\n    Dim handle As LongPtr\n    Dim verPointer As LongPtr\n#Else\n    Dim handle As Long\n    Dim verPointer As Long\n#End If\n    Dim size As Long\n    Dim verBufLen As Long\n    Dim fInfoOut As FILEINFOOUT\n    Dim fileInfo As VS_FIXEDFILEINFO\n    Dim buffer() As Byte\n\n    size = GetFileVersionInfoSize(path, handle)\n    If size = 0 Then\n        GoTo ErrorHandler\n    End If\n\n    ReDim buffer(size)\n    If Not CBool(GetFileVersionInfo(path, 0&, size, buffer(0))) Then\n        GoTo ErrorHandler\n    End If\n\n    If Not CBool(VerQueryValue(buffer(0), \"\\\", verPointer, verBufLen)) Then\n        GoTo ErrorHandler\n    End If\n\n    Call CopyMemory(fileInfo, ByVal verPointer, Len(fileInfo))\n\n    With fileInfo\n\n        fInfoOut.FileVersion = _\n            Format$(.dwFileVersionMSh) & \".\" & _\n            Format$(.dwFileVersionMSl) & \".\" & _\n            Format$(.dwFileVersionLSh) & \".\" & _\n            Format$(.dwFileVersionLSl)\n\n        fInfoOut.ProductVersion = _\n            Format$(.dwProductVersionMSh) & \".\" & _\n            Format$(.dwProductVersionMSl) & \".\" & _\n            Format$(.dwProductVersionLSh) & \".\" & _\n            Format$(.dwProductVersionLSl)\n\n    End With\n\n    Debug.Print \"File Version: \" & fInfoOut.FileVersion\n    Debug.Print \"Product Version: \" & fInfoOut.ProductVersion\n\n    Exit Sub\n\nErrorHandler:\n    Debug.Print \"Error!\"\nEnd Sub\n\n\nExcelVBA\u3067\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\u30b3\u30fc\u30c9\u3002\nx64\u7248\u306b\u3082\u3055\u308a\u3052\u306a\u304f\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u308b\u3002\nx64\u7248\u3060\u3068\u3001API\u306e\u5b9a\u7fa9\u3067PtrSafe\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3001\u30dd\u30a4\u30f3\u30bf\u30b5\u30a4\u30ba\u304c64bit\u306b\u306a\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u7279\u306b\u30cf\u30f3\u30c9\u30e9\u306e\u578b\u3092Long\u304b\u3089LongPtr\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n```vbnet\nOption Explicit\n\n#If VBA7 And Win64 Then\n\nPrivate Declare PtrSafe Function GetFileVersionInfoSize Lib \"version.dll\" Alias \"GetFileVersionInfoSizeA\" ( _\n    ByVal lptstrFilename As String, _\n    ByRef lpdwHandle As LongPtr) As Long\n\nPrivate Declare PtrSafe Function GetFileVersionInfo Lib \"version.dll\" Alias \"GetFileVersionInfoA\" ( _\n    ByVal lptstrFilename As String, _\n    ByVal dwHandle As LongPtr, _\n    ByVal dwLen As Long, _\n    ByRef lpData As Any) As Long\n\nPrivate Declare PtrSafe Function VerQueryValue Lib \"version.dll\" Alias \"VerQueryValueA\" ( _\n    ByRef pBlock As Any, _\n    ByVal lpSubBlock As String, _\n    ByRef lplpBuffer As Any, _\n    ByRef puLen As Long) As Long\n\nPrivate Declare PtrSafe Sub CopyMemory Lib \"kernel32.dll\" Alias \"RtlMoveMemory\" ( _\n    ByRef Destination As Any, _\n    ByRef Source As Any, _\n    ByVal Length As Long)\n\n#Else\n\nPrivate Declare Function GetFileVersionInfoSize Lib \"version.dll\" Alias \"GetFileVersionInfoSizeA\" ( _\n    ByVal lptstrFilename As String, _\n    ByRef lpdwHandle As Long) As Long\n\nPrivate Declare Function GetFileVersionInfo Lib \"version.dll\" Alias \"GetFileVersionInfoA\" ( _\n    ByVal lptstrFilename As String, _\n    ByVal dwHandle As Long, _\n    ByVal dwLen As Long, _\n    ByRef lpData As Any) As Long\n\nPrivate Declare Function VerQueryValue Lib \"version.dll\" Alias \"VerQueryValueA\" ( _\n    ByRef pBlock As Any, _\n    ByVal lpSubBlock As String, _\n    ByRef lplpBuffer As Any, _\n    ByRef puLen As Long) As Long\n\nPrivate Declare Sub CopyMemory Lib \"kernel32\" Alias \"RtlMoveMemory\" ( _\n    ByRef Destination As Any, _\n    ByRef Source As Any, _\n    ByVal Length As Long)\n\n#End If\n\nPrivate Type VS_FIXEDFILEINFO\n    dwSignature As Long\n    dwStrucVersionl As Integer\n    dwStrucVersionh As Integer\n    dwFileVersionMSl As Integer\n    dwFileVersionMSh As Integer\n    dwFileVersionLSl As Integer\n    dwFileVersionLSh As Integer\n    dwProductVersionMSl As Integer\n    dwProductVersionMSh As Integer\n    dwProductVersionLSl As Integer\n    dwProductVersionLSh As Integer\n    dwFileFlagsMask As Long\n    dwFileFlags As Long\n    dwFileOS As Long\n    dwFileType As Long\n    dwFileSubtype As Long\n    dwFileDateMS As Long\n    dwFileDateLS As Long\nEnd Type\n\nPrivate Type FILEINFOOUT\n    FileVersion As String\n    ProductVersion As String\nEnd Type\n\nPublic Sub GetVersion(ByVal path As String)\n\n#If VBA7 And Win64 Then\n    Dim handle As LongPtr\n    Dim verPointer As LongPtr\n#Else\n    Dim handle As Long\n    Dim verPointer As Long\n#End If\n    Dim size As Long\n    Dim verBufLen As Long\n    Dim fInfoOut As FILEINFOOUT\n    Dim fileInfo As VS_FIXEDFILEINFO\n    Dim buffer() As Byte\n    \n    size = GetFileVersionInfoSize(path, handle)\n    If size = 0 Then\n        GoTo ErrorHandler\n    End If\n    \n    ReDim buffer(size)\n    If Not CBool(GetFileVersionInfo(path, 0&, size, buffer(0))) Then\n        GoTo ErrorHandler\n    End If\n    \n    If Not CBool(VerQueryValue(buffer(0), \"\\\", verPointer, verBufLen)) Then\n        GoTo ErrorHandler\n    End If\n    \n    Call CopyMemory(fileInfo, ByVal verPointer, Len(fileInfo))\n    \n    With fileInfo\n    \n        fInfoOut.FileVersion = _\n            Format$(.dwFileVersionMSh) & \".\" & _\n            Format$(.dwFileVersionMSl) & \".\" & _\n            Format$(.dwFileVersionLSh) & \".\" & _\n            Format$(.dwFileVersionLSl)\n    \n        fInfoOut.ProductVersion = _\n            Format$(.dwProductVersionMSh) & \".\" & _\n            Format$(.dwProductVersionMSl) & \".\" & _\n            Format$(.dwProductVersionLSh) & \".\" & _\n            Format$(.dwProductVersionLSl)\n    \n    End With\n    \n    Debug.Print \"File Version: \" & fInfoOut.FileVersion\n    Debug.Print \"Product Version: \" & fInfoOut.ProductVersion\n    \n    Exit Sub\n    \nErrorHandler:\n    Debug.Print \"Error!\"\nEnd Sub\n```\n", "tags": ["ExcelVBA"]}