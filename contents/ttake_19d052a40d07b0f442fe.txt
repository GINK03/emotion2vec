{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u30fbException\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u5f15\u6570\u3092\u30e1\u30c3\u30bb\u30fc\u30b8(\u30ed\u30b0)\u306b\u51fa\u529b\u3057\u3066\u307b\u3057\u3044\u3002\n\u30fb\u30e1\u30bd\u30c3\u30c9\u3092\u3064\u304f\u308b\u5ea6\u306bTry Catch\u3092\u66f8\u304d\u305f\u304f\u306f\u306a\u3044\u3002\n\u30fb\u547c\u3073\u51fa\u3057\u30af\u30e9\u30b9\u306e\u5927\u672c\u306bTry Catch\u3092\u4ed5\u8fbc\u307f\u305f\u304f\u306a\u3044\u3002\n\u30fbAOP\u3067\u5bfe\u5fdc\u3057\u3088\u3046\uff01\n\n\u6b8b\u5ff5\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\nNUnit\u3067Assert.IsTrue(bool result)\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u5b50\u306fTrue\u304bFalse\u3057\u304b\u77e5\u3089\u306a\u3044\u306e\u3067\u6c17\u304c\u5229\u304d\u307e\u305b\u3093\u3002\n\nTestPage.cs\nstring a = \"\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\";\nstring b = \"\u72ac\";\n\npublic void TextContains(string a, string b)\n{\n    Assert.IsTrue( a.Contains(b) );// False\uff1a\u8a66\u9a13\u30a8\u30e9\u30fc\u3068\u306a\u308b\n}\n\n\n\n\u6b8b\u5ff5\u306a\u7d50\u679c\nMESSAGE:\n  Expected: True\n  But was:  False\n\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u4f55\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\n\u3053\u3093\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u307b\u3057\u3044\n\u5f15\u6570\u306e\u5024\u3082\u6559\u3048\u3066\u304f\u308c\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\u7d20\u6575\u306a\u7d50\u679c\nMESSAGE:\n  Expected: True\n  But was:  False\n=================\nTextContains\na: \u543e\u8f29\u306f\u732b\u3067\u3042\u308b\nb: \u72ac\n\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ed5\u8fbc\u3080\n\nC#\u3067AOP\u3092\u3059\u308b\u305f\u3081\u3001PostSharp\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u30fbVisual Studio\u7528\u306ePostSharp\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff06\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u30fbNuGet\u3067PostSharp\u3092\u53c2\u7167\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nException\u767a\u751f\u6642\u306b\u5272\u308a\u8fbc\u307f\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nNUint\u306e\u7d50\u679c\u30ec\u30dd\u30fc\u30c8\u306b\u306fAssertException\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u3001\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4e57\u3063\u53d6\u3063\u3066\u5f15\u6570\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\nTraceArgument.cs\n[Serializable]\npublic sealed class TraceArgument : OnMethodBoundaryAspect\n{\n    // Exception\u6642\u306b\u52d5\u4f5c\n    public override void OnException(MethodExecutionArgs args)\n    {\n        base.OnException(args);\n\n        // AssertException\u306e\u3068\u304d\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u62e1\u5f35\n        if (args.Exception.GetType() == typeof(AssertionException))\n            TraceMethodArguments(args);\n    }\n\n    private static void TraceMethodArguments(MethodExecutionArgs args)\n    {\n        // \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\n        Arguments parameters = args.Arguments;\n        if (parameters == null) return;\n\n        StringBuilder message = new StringBuilder();\n        message\n            .AppendLine(args.Exception.Message) // \u5f93\u6765\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n            .AppendLine(\"------------------\")\n            .AppendLine(args.Method.Name);  // \u30e1\u30bd\u30c3\u30c9\u540d\n\n        // \u5f15\u6570\u3092\u30eb\u30fc\u30d7\n        int index = 0;\n        string paramValue = null;\n        foreach (object p in parameters)\n        {\n            // \u5f15\u6570\u306e\u540d\u524d\n            string paramName = args.Method.GetParameters()[index].Name;\n\n            // \u5f15\u6570\u306e\u578b\n            Type type = p.GetType();\n\n            // \u578b\u3054\u3068\u306bValue\u3092\u53d6\u308a\u51fa\u3059\n            if (type == typeof(string) || type == typeof(int) || type == typeof(double) || type == typeof(decimal))\n            {\n                paramValue = (string)p;\n            }\n            else if (type.IsEnum)\n            {\n                paramValue = p.ToString();\n            }\n            else if (type == typeof(XmlDocument))\n            {\n                paramValue = ((XmlDocument)p).OuterXml;\n            }\n            else\n            { //try to serialize\n                try\n                {\n                    XmlSerializer serializer = new XmlSerializer(p.GetType());\n                    StringWriter strWriter = new StringWriter();\n\n                    serializer.Serialize(strWriter, p);\n                    paramValue = strWriter.ToString();\n                }\n                catch\n                {\n                    paramValue = \"[\u5f15\u6570\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f]\";\n                }\n            }\n            message\n                .Append(\"  \")\n                .Append(paramName).Append(\": \")\n                .Append(paramValue).AppendLine()\n                ;\n            index++;\n        }\n\n        // Exception\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a70\u3081\u306a\u304a\u3059\n        AssertionException ex = new AssertionException(message.ToString(), args.Exception);\n        throw ex;\n    }\n}\n\n\n\nTestPage.cs\n[TraceArgument]\npublic class WebDriverWrapper \n{\n    public void TextContains(string a, string b)\n    {\n        Assert.IsTrue( a.Contains(b) );\n    }\n}\n\n\n\uff15\uff0e\u8a66\u9a13\u306b\u5931\u6557\u3059\u308b(AssertException)\u3068\u5f15\u6570\u3092\u51fa\u529b\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\n\n\u7d20\u6575\u306a\u7d50\u679c\nMESSAGE:\n  Expected: True\n  But was:  False\n=================\nTextContains\na: \u543e\u8f29\u306f\u732b\u3067\u3042\u308b\nb: \u72ac\n\n\n\n\u601d\u3063\u305f\u3053\u3068\uff06\u5229\u7528\u4f8b\nPostSharp\u304c\u795e\u3044\u308f\u3086\u308b\u30b4\u30c3\u30c9\u3067\u3057\u305f\u3002\n\u7d19\u30e1\u30bd\u30c3\u30c9\u304c\u795e\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nOnMethodBoundaryAspect\u3067\u5272\u308a\u8fbc\u3081\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306fOnException\u4ee5\u5916\u306bOnEntry, OnExit, OnSuccess\u304c\u3042\u308a\u307e\u3059\u3002\n\u79c1\u306f\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30af\u30e9\u30b9\u3092Selenium\u306eWebDriver\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nNUnit\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3068\u304d\u306b\u3001\u5b9f\u969b\u306e\u5f15\u6570\u3067\u3069\u3093\u306a\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u305f\u306e\u304b\u308f\u304b\u308b\u3068\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u3002\nSelenium\u306f\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u6210\u529f\u3057\u305f\u306e\u306b\u30b5\u30fc\u30d0\u3067\u5931\u6557\u3057\u305f\u308a\u3001\n\u6642\u3005\u4e00\u56de\u3060\u3051\u5931\u6557\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u30a8\u30e9\u30fc\u539f\u56e0\u3092\u7c21\u5358\u306b\u77e5\u308c\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\n\n\u53c2\u8003\nException\u767a\u751f\u6642\u306b\u3059\u3079\u3066\u306e\u5909\u6570\u3092\u30c8\u30ec\u30fc\u30b9\u3059\u308b(StackOverflow.com)\n##\u6982\u8981\n\u30fbException\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u5f15\u6570\u3092\u30e1\u30c3\u30bb\u30fc\u30b8(\u30ed\u30b0)\u306b\u51fa\u529b\u3057\u3066\u307b\u3057\u3044\u3002\n\u30fb\u30e1\u30bd\u30c3\u30c9\u3092\u3064\u304f\u308b\u5ea6\u306bTry Catch\u3092\u66f8\u304d\u305f\u304f\u306f\u306a\u3044\u3002\n\u30fb\u547c\u3073\u51fa\u3057\u30af\u30e9\u30b9\u306e\u5927\u672c\u306bTry Catch\u3092\u4ed5\u8fbc\u307f\u305f\u304f\u306a\u3044\u3002\n\u30fbAOP\u3067\u5bfe\u5fdc\u3057\u3088\u3046\uff01\n\n##\u6b8b\u5ff5\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\n\nNUnit\u3067Assert.IsTrue(bool result)\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u5b50\u306fTrue\u304bFalse\u3057\u304b\u77e5\u3089\u306a\u3044\u306e\u3067\u6c17\u304c\u5229\u304d\u307e\u305b\u3093\u3002\n\n```csharp:TestPage.cs\nstring a = \"\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\";\nstring b = \"\u72ac\";\n\npublic void TextContains(string a, string b)\n{\n    Assert.IsTrue( a.Contains(b) );// False\uff1a\u8a66\u9a13\u30a8\u30e9\u30fc\u3068\u306a\u308b\n}\n```\n\n```:\u6b8b\u5ff5\u306a\u7d50\u679c\nMESSAGE:\n  Expected: True\n  But was:  False\n```\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u4f55\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\n##\u3053\u3093\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u307b\u3057\u3044\n\n\u5f15\u6570\u306e\u5024\u3082\u6559\u3048\u3066\u304f\u308c\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\n```:\u7d20\u6575\u306a\u7d50\u679c\nMESSAGE:\n  Expected: True\n  But was:  False\n=================\nTextContains\na: \u543e\u8f29\u306f\u732b\u3067\u3042\u308b\nb: \u72ac\n```\n\n##\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ed5\u8fbc\u3080\n\n###C#\u3067AOP\u3092\u3059\u308b\u305f\u3081\u3001PostSharp\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u30fbVisual Studio\u7528\u306e[PostSharp](http://visualstudiogallery.msdn.microsoft.com/a058d5d3-e654-43f8-a308-c3bdfdd0be4a)\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff06\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u30fbNuGet\u3067[PostSharp](https://www.nuget.org/packages/PostSharp/)\u3092\u53c2\u7167\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n###Exception\u767a\u751f\u6642\u306b\u5272\u308a\u8fbc\u307f\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nNUint\u306e\u7d50\u679c\u30ec\u30dd\u30fc\u30c8\u306b\u306fAssertException\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u3001\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4e57\u3063\u53d6\u3063\u3066\u5f15\u6570\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n```csharp:TraceArgument.cs\n[Serializable]\npublic sealed class TraceArgument : OnMethodBoundaryAspect\n{\n    // Exception\u6642\u306b\u52d5\u4f5c\n    public override void OnException(MethodExecutionArgs args)\n    {\n        base.OnException(args);\n\n        // AssertException\u306e\u3068\u304d\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u62e1\u5f35\n        if (args.Exception.GetType() == typeof(AssertionException))\n            TraceMethodArguments(args);\n    }\n\n    private static void TraceMethodArguments(MethodExecutionArgs args)\n    {\n        // \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\n        Arguments parameters = args.Arguments;\n        if (parameters == null) return;\n\n        StringBuilder message = new StringBuilder();\n        message\n            .AppendLine(args.Exception.Message) // \u5f93\u6765\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n            .AppendLine(\"------------------\")\n            .AppendLine(args.Method.Name);  // \u30e1\u30bd\u30c3\u30c9\u540d\n\n        // \u5f15\u6570\u3092\u30eb\u30fc\u30d7\n        int index = 0;\n        string paramValue = null;\n        foreach (object p in parameters)\n        {\n            // \u5f15\u6570\u306e\u540d\u524d\n            string paramName = args.Method.GetParameters()[index].Name;\n\n            // \u5f15\u6570\u306e\u578b\n            Type type = p.GetType();\n\n            // \u578b\u3054\u3068\u306bValue\u3092\u53d6\u308a\u51fa\u3059\n            if (type == typeof(string) || type == typeof(int) || type == typeof(double) || type == typeof(decimal))\n            {\n                paramValue = (string)p;\n            }\n            else if (type.IsEnum)\n            {\n                paramValue = p.ToString();\n            }\n            else if (type == typeof(XmlDocument))\n            {\n                paramValue = ((XmlDocument)p).OuterXml;\n            }\n            else\n            { //try to serialize\n                try\n                {\n                    XmlSerializer serializer = new XmlSerializer(p.GetType());\n                    StringWriter strWriter = new StringWriter();\n\n                    serializer.Serialize(strWriter, p);\n                    paramValue = strWriter.ToString();\n                }\n                catch\n                {\n                    paramValue = \"[\u5f15\u6570\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f]\";\n                }\n            }\n            message\n                .Append(\"  \")\n                .Append(paramName).Append(\": \")\n                .Append(paramValue).AppendLine()\n                ;\n            index++;\n        }\n\n        // Exception\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a70\u3081\u306a\u304a\u3059\n        AssertionException ex = new AssertionException(message.ToString(), args.Exception);\n        throw ex;\n    }\n}\n```\n\n```csharp:TestPage.cs\n[TraceArgument]\npublic class WebDriverWrapper \n{\n    public void TextContains(string a, string b)\n    {\n        Assert.IsTrue( a.Contains(b) );\n    }\n}\n```\n\n\uff15\uff0e\u8a66\u9a13\u306b\u5931\u6557\u3059\u308b(AssertException)\u3068\u5f15\u6570\u3092\u51fa\u529b\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\n\n```:\u7d20\u6575\u306a\u7d50\u679c\nMESSAGE:\n  Expected: True\n  But was:  False\n=================\nTextContains\na: \u543e\u8f29\u306f\u732b\u3067\u3042\u308b\nb: \u72ac\n```\n\n##\u601d\u3063\u305f\u3053\u3068\uff06\u5229\u7528\u4f8b\nPostSharp\u304c\u795e\u3044\u308f\u3086\u308b\u30b4\u30c3\u30c9\u3067\u3057\u305f\u3002\n\u7d19\u30e1\u30bd\u30c3\u30c9\u304c\u795e\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nOnMethodBoundaryAspect\u3067\u5272\u308a\u8fbc\u3081\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306fOnException\u4ee5\u5916\u306b[OnEntry, OnExit, OnSuccess](http://www.postsharp.net/aspects/method-decorator#title0)\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u79c1\u306f\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30af\u30e9\u30b9\u3092Selenium\u306eWebDriver\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nNUnit\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3068\u304d\u306b\u3001\u5b9f\u969b\u306e\u5f15\u6570\u3067\u3069\u3093\u306a\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u305f\u306e\u304b\u308f\u304b\u308b\u3068\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u3002\nSelenium\u306f\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u6210\u529f\u3057\u305f\u306e\u306b\u30b5\u30fc\u30d0\u3067\u5931\u6557\u3057\u305f\u308a\u3001\n\u6642\u3005\u4e00\u56de\u3060\u3051\u5931\u6557\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u30a8\u30e9\u30fc\u539f\u56e0\u3092\u7c21\u5358\u306b\u77e5\u308c\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\n\n##\u53c2\u8003\n[Exception\u767a\u751f\u6642\u306b\u3059\u3079\u3066\u306e\u5909\u6570\u3092\u30c8\u30ec\u30fc\u30b9\u3059\u308b(StackOverflow.com)](http://stackoverflow.com/questions/362124/how-to-trace-all-local-variables-when-an-exception-occurs)\n", "tags": ["NUnit", "Selenium", "PostSharp", "C#"]}