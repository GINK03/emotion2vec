{"tags": ["Haskell", "\u95a2\u6570\u578b\u8a00\u8a9e", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "\u5165\u9580"], "context": "\n\n\uff08 \u74b0\u5883 \uff09\n\n\nGHCi version 7.10.3\n\n\nMac Terminal\nHirofumiYashima-no-MacBook:haskell_lesson hirofumiyashima$ ghci --version\nThe Glorious Glasgow Haskell Compilation System, version 7.10.3\nHirofumiYashima-no-MacBook:haskell_lesson hirofumiyashima$ \n\n\n\n\u5927\u5ddd \u5fb3\u4e4b\uff08\u8457\uff09\u300e\u95a2\u6570\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5b9f\u8df5\u5165\u9580\u300fpp.284-286 \u3092 \u8aad\u3093\u3067\u3044\u3066\u3001Data.List.group \u306b \u89e6\u308c\u305f \u306e\u3067\u3001\u624b\u5143 \u3067 \u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\ngroup\u95a2\u6570 \u3092 import\n\n\nGHCi\nPrelude> import Data.List ( group )\nPrelude Data.List>\n\n\n\n\u95a2\u6570\u306e\u578b \u3092 \u78ba\u8a8d\n\n\n\u578b\u5909\u6570 Eq a \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u591a\u76f8\u578b\n\u5f15\u6570\u306b\u53d6\u308a\u3046\u308b\u30c7\u30fc\u30bf\u578b\u306f\u3001Eq a \u306a\u306e\u3067\u3001\u7b49\u4fa1\u6027\u3068\u3044\u3046\u6027\u8cea \u3092 \u5e2f\u3073\u305f\u578b\u30af\u30e9\u30b9 \u306e \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u307f \n\n\nGHCi\nPrelude Data.List> :t group\ngroup :: Eq a => [a] -> [[a]]\nPrelude Data.List>\n\n\n\nEq a \u578b \u306e \u5024 \u306b \u9069\u7528\u3057\u3066\u307f\u308b\n\n\n\u6587\u5b57\u5217 (=Char\u306e\u30ea\u30b9\u30c8\u3001[Char]\u578b\uff09\u306b\u9069\u7528\u3057\u3066\u307f\u308b\n\n\nGHCi\nPrelude Data.List> group \"AAABBBBCCDD\"\n[\"AAA\",\"BBBB\",\"CC\",\"DD\"]\nPrelude Data.List>\n\n\n\u540c\u3058\u8981\u7d20\u304c\u4e26\u3076\u5217\u3000\uff08\uff1d\u5143\u306e\u96c6\u5408 \u3092 \u69cb\u6210\u3059\u308b \u90e8\u5206\u96c6\u5408\u5217 \uff09\u304c\u3001\u65b0\u305f\u306b\u30ea\u30b9\u30c8\u306b\u5305\u307e\u308c\u3066\u3001\u4e8c\u91cd\u30ea\u30b9\u30c8 \u306b \u3057\u3066 \u8fd4\u3055\u308c\u305f\u3002\n\nGHCi\nPrelude Data.List> group \"AADDDDDCCFHYYYYAACCFFFFZ\"\n[\"AA\",\"DDDDD\",\"CC\",\"F\",\"H\",\"YYYY\",\"AA\",\"CC\",\"FFFF\",\"Z\"]\nPrelude Data.List>\n\n\n\n\u6574\u6570\u5217\u306b\u9069\u7528\u3057\u3066\u307f\u308b\n\n\nGHCi\nPrelude Data.List> group [1, 1, 5, 78, 94, 23, 11,11,11, 34, 45,45,45,45,1,1,1,6,5,78,78,5,5,5]\n[[1,1],[5],[78],[94],[23],[11,11,11],[34],[45,45,45,45],[1,1,1],[6],[5],[78,78],[5,5,5]]\nPrelude Data.List>\n\n\n\u540c\u3058\u8981\u7d20\u304c\u4e26\u3076\u5217\u3000\uff08\uff1d\u5143\u306e\u96c6\u5408 \u3092 \u69cb\u6210\u3059\u308b \u90e8\u5206\u96c6\u5408\u5217 \uff09\u304c\u3001\u65b0\u305f\u306b\u30ea\u30b9\u30c8\u306b\u5305\u307e\u308c\u3066\u3001\u4e8c\u91cd\u30ea\u30b9\u30c8 \u306b \u3057\u3066 \u8fd4\u3055\u308c\u305f\u3002\n\n\n\u8981\u7d20\u306e\u5024 \u3068 \u7e70\u308a\u8fd4\u3057\u56de\u6570 \u3092 \u8fd4\u3059\u3088\u3046 \u306b \u3057\u3066\u307f\u308b\n\n\nGHCi\nPrelude Data.List> let tmp = group \"AADDDDDCCFHYYYYAACCFFFFZ\"\nPrelude Data.List> tmp\n[\"AA\",\"DDDDD\",\"CC\",\"F\",\"H\",\"YYYY\",\"AA\",\"CC\",\"FFFF\",\"Z\"]\nPrelude Data.List> \n\n\n\n\u90e8\u5206\u96c6\u5408\u5217 \u3092 \u69cb\u6210\u3059\u308b \u5404\u90e8\u5206\u96c6\u5408 \u306e \u8981\u7d20\u306e\u5024 \n\n\nGHCi\nPrelude Data.List> map (\\l -> head l) tmp\n\"ADCFHYACFZ\"\nPrelude Data.List> \n\n\n\n\u90e8\u5206\u96c6\u5408\u5217 \u3092 \u69cb\u6210\u3059\u308b \u5404\u90e8\u5206\u96c6\u5408 \u306e \u8981\u7d20\u306e\u6570\n\n\nGHCi\nPrelude Data.List> map (\\l -> length l) tmp\n[2,5,2,1,1,4,2,2,4,1]\nPrelude Data.List> \n\n\n\nshow \u306b\u9069\u7528\u3057\u3066\u3001\u6587\u5b57\u5217\u306b\u3059\u308b\n\n\nGHCi\nPrelude Data.List> map (\\l -> show (length l)) tmp\n[\"2\",\"5\",\"2\",\"1\",\"1\",\"4\",\"2\",\"2\",\"4\",\"1\"]\nPrelude Data.List> \n\n\nshow \u3068 length \u3092 \u95a2\u6570\u5408\u6210\u3057\u3066\u3001(show . length) \u3068 \u66f8\u3044\u305f\u65b9 \u304c Haskell\u30e9\u30a4\u30af\n\nGHCi\nPrelude Data.List> map (\\l -> (show . length) l) tmp\n[\"2\",\"5\",\"2\",\"1\",\"1\",\"4\",\"2\",\"2\",\"4\",\"1\"]\nPrelude Data.List> \n\n\n\n\uff08 \u53c2\u8003 \uff09 show\u95a2\u6570\n\nPrelude Data.List Data.List> :t show\nshow :: Show a => a -> String\nPrelude Data.List Data.List> \n\n\n\n\u8981\u7d20\u306e\u5024\u3068\u6570 \u3092 \u307e\u3068\u3081\u3066 \u8fd4\u3059\n\n\u5404\u8981\u7d20\u5217\uff08\uff1d\u5404\u90e8\u5206\u96c6\u5408\uff09\u306e\u5024 \u306f\u3001Char \u3060\u304b\u3089\u3001(++)\u95a2\u6570 \u3092 \u9069\u7528\u3067\u304d\u306a\u3044\u30a8\u30e9\u30fc\n\nGHCi\nPrelude Data.List> map (\\l -> head l ++ \" : \" ++ show (length l)) tmp\n\n<interactive>:33:48:\n    Couldn't match type \u2018Char\u2019 with \u2018[Char]\u2019\n    Expected type: [[[Char]]]\n      Actual type: [[Char]]\n    In the second argument of \u2018map\u2019, namely \u2018tmp\u2019\n    In the expression:\n      map (\\ l -> head l ++ \" : \" ++ show (length l)) tmp\nPrelude Data.List> \nPrelude Data.List> map (\\l -> (head l) ++ \" : \" ++ show (length l)) tmp\n\n<interactive>:35:50:\n    Couldn't match type \u2018Char\u2019 with \u2018[Char]\u2019\n    Expected type: [[[Char]]]\n      Actual type: [[Char]]\n    In the second argument of \u2018map\u2019, namely \u2018tmp\u2019\n    In the expression:\n      map (\\ l -> (head l) ++ \" : \" ++ show (length l)) tmp\nPrelude Data.List> \n\n\nChar\u578b \u3092 show\u95a2\u6570 \u3092 \u9069\u7528\u3057\u3066\u3001String\u578b\uff08\uff1d[Char]\u578b\uff09\u306b \u578b\u5909\u63db \u3059\u308b\n\nGHCi\nPrelude Data.List> map (\\l -> (show . head) l) tmp\n[\"'A'\",\"'D'\",\"'C'\",\"'F'\",\"'H'\",\"'Y'\",\"'A'\",\"'C'\",\"'F'\",\"'Z'\"]\nPrelude Data.List> \n\n\n\u3053\u308c\u3067OK\n\nGHCi\nPrelude Data.List> map (\\l -> show (head l ) ++ \" : \" ++ show (length l)) tmp\n[\"'A' : 2\",\"'D' : 5\",\"'C' : 2\",\"'F' : 1\",\"'H' : 1\",\"'Y' : 4\",\"'A' : 2\",\"'C' : 2\",\"'F' : 4\",\"'Z' : 1\"]\nPrelude Data.List>\n\n\n\n\u4ee5\u4e0b \u3082 \u540c\u3058\n\n\nGHCi\nPrelude Data.List> map (\\l -> (show . head) l  ++ \" : \" ++ (show . length) l) tmp\n[\"'A' : 2\",\"'D' : 5\",\"'C' : 2\",\"'F' : 1\",\"'H' : 1\",\"'Y' : 4\",\"'A' : 2\",\"'C' : 2\",\"'F' : 4\",\"'Z' : 1\"]\nPrelude Data.List>\n\n\n\n(++) \u6f14\u7b97\u5b50\uff08\u95a2\u6570\uff09 \u306e \u5f15\u6570 \u3092 \u62ec\u5f27 \u3067 \u56f2\u3093\u3067\u898b\u3084\u3059\u304f\u3059\u308b\n\n\nGHCi\nPrelude Data.List> map (\\l -> ((show . head) l)  ++ \" : \" ++ ((show . length) l)) tmp\n[\"'A' : 2\",\"'D' : 5\",\"'C' : 2\",\"'F' : 1\",\"'H' : 1\",\"'Y' : 4\",\"'A' : 2\",\"'C' : 2\",\"'F' : 4\",\"'Z' : 1\"]\nPrelude Data.List> \n\n\n\n\u540c\u3058\u5024\uff08\u6587\u5b57 Char\uff09\u304c\u3001\u9055\u3046\u5024\u3092\u9593\u306b\u631f\u3093\u3067\u3001\u98db\u3073\u5730\u3067\u51fa\u3066\u304f\u308b\u5834\u5408\u3082\u3001\"Char : \u51fa\u73fe\u56de\u6570\" \u3092 \u307e\u3068\u3081\u3066\u8fd4\u3059\u5834\u5408\n\n\n\u30ea\u30b9\u30c8 \u3092 sort\u3057\u3066 \u304b\u3089\u3001\u540c\u3058\u64cd\u4f5c \u3092 \u884c\u3048\u3070 \u826f\u3044\u3002\n\n\nGHCi\nPrelude Data.List> sort \"AADDDDDCCFHYYYYAACCFFFFZ\"\n\n<interactive>:53:1:\n    Not in scope: \u2018sort\u2019\n    Perhaps you meant \u2018sqrt\u2019 (imported from Prelude)\nPrelude Data.List>\n\n\n\n\nGHCi\nPrelude Data.List> import Data.List ( sort )\nPrelude Data.List Data.List>\n\n\n\nsort\u95a2\u6570 \u3092 import__\n\nGHCi\nPrelude Data.List Data.List> sort \"AADDDDDCCFHYYYYAACCFFFFZ\"\n\"AAAACCCCDDDDDFFFFFHYYYYZ\"\nPrelude Data.List Data.List>\n\n\n\n\u7570\u306a\u308b\u5024 \u3092 \u9593\u306b\u631f\u3093\u3067\u51fa\u73fe\u3057\u3066\u3044\u305f \u540c\u3058\u5024 \u304c\u3001\u4e00\u7b87\u6240 \u306b \u96c6\u7d04\u3055\u308c\u305f\u3002\n\n\nGHCi\nPrelude Data.List Data.List> (group . sort) \"AADDDDDCCFHYYYYAACCFFFFZ\"\n[\"AAAA\",\"CCCC\",\"DDDDD\",\"FFFFF\",\"H\",\"YYYY\",\"Z\"]\nPrelude Data.List Data.List>\n\n\n\n\u4ee5\u4e0b\u3067\u3001\u6c42\u3081\u305f\u3044\u3082\u306e \u304c \u5f97\u3089\u308c\u305f\n\n\nGHCi\nPrelude Data.List Data.List> map (\\l -> show (head l ) ++ \" : \" ++ show (length l)) ((group . sort) \"AADDDDDCCFHYYYYAACCFFFFZ\")\n[\"'A' : 4\",\"'C' : 4\",\"'D' : 5\",\"'F' : 5\",\"'H' : 1\",\"'Y' : 4\",\"'Z' : 1\"]\nPrelude Data.List Data.List> \n\n\n\nGHCi\nPrelude Data.List Data.List> let original_string = \"AADDDDDCCFHYYYYAACCFFFFZ\"\nPrelude Data.List Data.List>\nPrelude Data.List Data.List> original_string \n\"AADDDDDCCFHYYYYAACCFFFFZ\"\nPrelude Data.List Data.List>\n\n\n\nGHCi\nPrelude Data.List Data.List> map (\\l -> show (head l ) ++ \" : \" ++ show (length l)) ((group . sort) original_string)\n[\"'A' : 4\",\"'C' : 4\",\"'D' : 5\",\"'F' : 5\",\"'H' : 1\",\"'Y' : 4\",\"'Z' : 1\"]\nPrelude Data.List Data.List> \n\n\n\n\u95a2\u6570 \u306b \u3059\u308b\n\n\nGHCi\nPrelude Data.List Data.List> let get_value_count s = map (\\l -> show (head l ) ++ \" : \" ++ show (length l)) ((group . sort) s)\nPrelude Data.List Data.List>\n\n\n\n\u9069\u7528\u3067\u304d\u308b \uff08\u5f15\u6570\u306b\u53d6\u308b\uff09 \u5024 \u306f\u3001Ord\uff08\u9806\u5e8f\u53ef\u80fd\u6027\uff09\u3068 Show\uff08\u6587\u5b57\u5217\u5909\u63db\u53ef\u80fd\u6027\uff09\u306e\u4e21\u8005 \u3092 \u6e80\u305f\u3059 \u5024 \u3092 \u8981\u7d20\u3068\u3057\u3066 \u69cb\u6210\u3055\u308c\u308b\u30ea\u30b9\u30c8\n\n\nGHCi\nPrelude Data.List Data.List> :t get_value_count \nget_value_count :: (Ord a, Show a) => [a] -> [[Char]]\nPrelude Data.List Data.List>\n\n\n\nGHCi\nPrelude Data.List Data.List> get_value_count \"AADDDDDCCFHYYYYAACCFFFFZ\"\n[\"'A' : 4\",\"'C' : 4\",\"'D' : 5\",\"'F' : 5\",\"'H' : 1\",\"'Y' : 4\",\"'Z' : 1\"]\nPrelude Data.List Data.List> \n\n\n\nGHCi\nPrelude Data.List Data.List> get_value_count original_string \n[\"'A' : 4\",\"'C' : 4\",\"'D' : 5\",\"'F' : 5\",\"'H' : 1\",\"'Y' : 4\",\"'Z' : 1\"]\nPrelude Data.List Data.List> \n\n\n###__\uff08 \u74b0\u5883 \uff09__\n\n* GHCi version 7.10.3\n\n```{bash:Mac Terminal}\nHirofumiYashima-no-MacBook:haskell_lesson hirofumiyashima$ ghci --version\nThe Glorious Glasgow Haskell Compilation System, version 7.10.3\nHirofumiYashima-no-MacBook:haskell_lesson hirofumiyashima$ \n```\n\n___\n\n\n\u5927\u5ddd \u5fb3\u4e4b\uff08\u8457\uff09\u300e\u95a2\u6570\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5b9f\u8df5\u5165\u9580\u300f_pp.284-286_ \u3092 \u8aad\u3093\u3067\u3044\u3066\u3001Data.List.group \u306b \u89e6\u308c\u305f \u306e\u3067\u3001\u624b\u5143 \u3067 \u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n####__group\u95a2\u6570 \u3092 import__\n\n```{haskell:GHCi}\nPrelude> import Data.List ( group )\nPrelude Data.List>\n```\n\n####__\u95a2\u6570\u306e\u578b \u3092 \u78ba\u8a8d__\n\n* \u578b\u5909\u6570 Eq a \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u591a\u76f8\u578b\n* \u5f15\u6570\u306b\u53d6\u308a\u3046\u308b\u30c7\u30fc\u30bf\u578b\u306f\u3001Eq a \u306a\u306e\u3067\u3001\u7b49\u4fa1\u6027\u3068\u3044\u3046\u6027\u8cea \u3092 \u5e2f\u3073\u305f\u578b\u30af\u30e9\u30b9 \u306e \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u307f \n\n```{haskell:GHCi}\nPrelude Data.List> :t group\ngroup :: Eq a => [a] -> [[a]]\nPrelude Data.List>\n```\n\n####__Eq a \u578b \u306e \u5024 \u306b \u9069\u7528\u3057\u3066\u307f\u308b__\n\n* \u6587\u5b57\u5217 (=Char\u306e\u30ea\u30b9\u30c8\u3001[Char]\u578b\uff09\u306b\u9069\u7528\u3057\u3066\u307f\u308b\n\n```{haskell:GHCi} \nPrelude Data.List> group \"AAABBBBCCDD\"\n[\"AAA\",\"BBBB\",\"CC\",\"DD\"]\nPrelude Data.List>\n```\n\n\u540c\u3058\u8981\u7d20\u304c\u4e26\u3076\u5217\u3000\uff08\uff1d\u5143\u306e\u96c6\u5408 \u3092 \u69cb\u6210\u3059\u308b \u90e8\u5206\u96c6\u5408\u5217 \uff09\u304c\u3001\u65b0\u305f\u306b\u30ea\u30b9\u30c8\u306b\u5305\u307e\u308c\u3066\u3001\u4e8c\u91cd\u30ea\u30b9\u30c8 \u306b \u3057\u3066 \u8fd4\u3055\u308c\u305f\u3002\n\n```{haskell:GHCi} \nPrelude Data.List> group \"AADDDDDCCFHYYYYAACCFFFFZ\"\n[\"AA\",\"DDDDD\",\"CC\",\"F\",\"H\",\"YYYY\",\"AA\",\"CC\",\"FFFF\",\"Z\"]\nPrelude Data.List>\n```\n\n* \u6574\u6570\u5217\u306b\u9069\u7528\u3057\u3066\u307f\u308b\n\n```{haskell:GHCi} \nPrelude Data.List> group [1, 1, 5, 78, 94, 23, 11,11,11, 34, 45,45,45,45,1,1,1,6,5,78,78,5,5,5]\n[[1,1],[5],[78],[94],[23],[11,11,11],[34],[45,45,45,45],[1,1,1],[6],[5],[78,78],[5,5,5]]\nPrelude Data.List>\n```\n\n\u540c\u3058\u8981\u7d20\u304c\u4e26\u3076\u5217\u3000\uff08\uff1d\u5143\u306e\u96c6\u5408 \u3092 \u69cb\u6210\u3059\u308b \u90e8\u5206\u96c6\u5408\u5217 \uff09\u304c\u3001\u65b0\u305f\u306b\u30ea\u30b9\u30c8\u306b\u5305\u307e\u308c\u3066\u3001\u4e8c\u91cd\u30ea\u30b9\u30c8 \u306b \u3057\u3066 \u8fd4\u3055\u308c\u305f\u3002\n\n___\n\n####__\u8981\u7d20\u306e\u5024 \u3068 \u7e70\u308a\u8fd4\u3057\u56de\u6570 \u3092 \u8fd4\u3059\u3088\u3046 \u306b \u3057\u3066\u307f\u308b__\n\n```{haskell:GHCi}\nPrelude Data.List> let tmp = group \"AADDDDDCCFHYYYYAACCFFFFZ\"\nPrelude Data.List> tmp\n[\"AA\",\"DDDDD\",\"CC\",\"F\",\"H\",\"YYYY\",\"AA\",\"CC\",\"FFFF\",\"Z\"]\nPrelude Data.List> \n```\n\n\n\n* \u90e8\u5206\u96c6\u5408\u5217 \u3092 \u69cb\u6210\u3059\u308b \u5404\u90e8\u5206\u96c6\u5408 \u306e \u8981\u7d20\u306e\u5024 \n\n```{haskell:GHCi} \nPrelude Data.List> map (\\l -> head l) tmp\n\"ADCFHYACFZ\"\nPrelude Data.List> \n```\n\n\n* \u90e8\u5206\u96c6\u5408\u5217 \u3092 \u69cb\u6210\u3059\u308b \u5404\u90e8\u5206\u96c6\u5408 \u306e \u8981\u7d20\u306e\u6570\n\n```{haskell:GHCi}\nPrelude Data.List> map (\\l -> length l) tmp\n[2,5,2,1,1,4,2,2,4,1]\nPrelude Data.List> \n```\n\n* show \u306b\u9069\u7528\u3057\u3066\u3001\u6587\u5b57\u5217\u306b\u3059\u308b\n\n```{haskell:GHCi} \nPrelude Data.List> map (\\l -> show (length l)) tmp\n[\"2\",\"5\",\"2\",\"1\",\"1\",\"4\",\"2\",\"2\",\"4\",\"1\"]\nPrelude Data.List> \n```\n\nshow \u3068 length \u3092 \u95a2\u6570\u5408\u6210\u3057\u3066\u3001(show . length) \u3068 \u66f8\u3044\u305f\u65b9 \u304c Haskell\u30e9\u30a4\u30af\n\n```{haskell:GHCi} \nPrelude Data.List> map (\\l -> (show . length) l) tmp\n[\"2\",\"5\",\"2\",\"1\",\"1\",\"4\",\"2\",\"2\",\"4\",\"1\"]\nPrelude Data.List> \n```\n\n___\n\n\n__\uff08 \u53c2\u8003 \uff09 show\u95a2\u6570__\n\n>Prelude Data.List Data.List> :t show\n>show :: Show a => a -> String\n>Prelude Data.List Data.List> \n\n___\n\n\n* \u8981\u7d20\u306e\u5024\u3068\u6570 \u3092 \u307e\u3068\u3081\u3066 \u8fd4\u3059\n\n\u5404\u8981\u7d20\u5217\uff08\uff1d\u5404\u90e8\u5206\u96c6\u5408\uff09\u306e\u5024 \u306f\u3001Char \u3060\u304b\u3089\u3001(++)\u95a2\u6570 \u3092 \u9069\u7528\u3067\u304d\u306a\u3044\u30a8\u30e9\u30fc\n\n```{haskell:GHCi} \nPrelude Data.List> map (\\l -> head l ++ \" : \" ++ show (length l)) tmp\n\n<interactive>:33:48:\n    Couldn't match type \u2018Char\u2019 with \u2018[Char]\u2019\n    Expected type: [[[Char]]]\n      Actual type: [[Char]]\n    In the second argument of \u2018map\u2019, namely \u2018tmp\u2019\n    In the expression:\n      map (\\ l -> head l ++ \" : \" ++ show (length l)) tmp\nPrelude Data.List> \nPrelude Data.List> map (\\l -> (head l) ++ \" : \" ++ show (length l)) tmp\n\n<interactive>:35:50:\n    Couldn't match type \u2018Char\u2019 with \u2018[Char]\u2019\n    Expected type: [[[Char]]]\n      Actual type: [[Char]]\n    In the second argument of \u2018map\u2019, namely \u2018tmp\u2019\n    In the expression:\n      map (\\ l -> (head l) ++ \" : \" ++ show (length l)) tmp\nPrelude Data.List> \n```\n\nChar\u578b \u3092 show\u95a2\u6570 \u3092 \u9069\u7528\u3057\u3066\u3001String\u578b\uff08\uff1d[Char]\u578b\uff09\u306b \u578b\u5909\u63db \u3059\u308b\n\n```{haskell:GHCi} \nPrelude Data.List> map (\\l -> (show . head) l) tmp\n[\"'A'\",\"'D'\",\"'C'\",\"'F'\",\"'H'\",\"'Y'\",\"'A'\",\"'C'\",\"'F'\",\"'Z'\"]\nPrelude Data.List> \n```\n\n\u3053\u308c\u3067OK\n\n```{haskell:GHCi} \nPrelude Data.List> map (\\l -> show (head l ) ++ \" : \" ++ show (length l)) tmp\n[\"'A' : 2\",\"'D' : 5\",\"'C' : 2\",\"'F' : 1\",\"'H' : 1\",\"'Y' : 4\",\"'A' : 2\",\"'C' : 2\",\"'F' : 4\",\"'Z' : 1\"]\nPrelude Data.List>\n```\n\n* \u4ee5\u4e0b \u3082 \u540c\u3058\n\n```{haskell:GHCi} \nPrelude Data.List> map (\\l -> (show . head) l  ++ \" : \" ++ (show . length) l) tmp\n[\"'A' : 2\",\"'D' : 5\",\"'C' : 2\",\"'F' : 1\",\"'H' : 1\",\"'Y' : 4\",\"'A' : 2\",\"'C' : 2\",\"'F' : 4\",\"'Z' : 1\"]\nPrelude Data.List>\n```\n\n* (++) \u6f14\u7b97\u5b50\uff08\u95a2\u6570\uff09 \u306e \u5f15\u6570 \u3092 \u62ec\u5f27 \u3067 \u56f2\u3093\u3067\u898b\u3084\u3059\u304f\u3059\u308b\n\n```{haskell:GHCi} \nPrelude Data.List> map (\\l -> ((show . head) l)  ++ \" : \" ++ ((show . length) l)) tmp\n[\"'A' : 2\",\"'D' : 5\",\"'C' : 2\",\"'F' : 1\",\"'H' : 1\",\"'Y' : 4\",\"'A' : 2\",\"'C' : 2\",\"'F' : 4\",\"'Z' : 1\"]\nPrelude Data.List> \n```\n\n\n####__\u540c\u3058\u5024\uff08\u6587\u5b57 Char\uff09\u304c\u3001\u9055\u3046\u5024\u3092\u9593\u306b\u631f\u3093\u3067\u3001\u98db\u3073\u5730\u3067\u51fa\u3066\u304f\u308b\u5834\u5408\u3082\u3001\"Char : \u51fa\u73fe\u56de\u6570\" \u3092 \u307e\u3068\u3081\u3066\u8fd4\u3059\u5834\u5408__\n\n* \u30ea\u30b9\u30c8 \u3092 sort\u3057\u3066 \u304b\u3089\u3001\u540c\u3058\u64cd\u4f5c \u3092 \u884c\u3048\u3070 \u826f\u3044\u3002\n\n```{haskell:GHCi}\nPrelude Data.List> sort \"AADDDDDCCFHYYYYAACCFFFFZ\"\n\n<interactive>:53:1:\n    Not in scope: \u2018sort\u2019\n    Perhaps you meant \u2018sqrt\u2019 (imported from Prelude)\nPrelude Data.List>\n```\n\n<img width=\"1278\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-05 17.19.33.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/55e57579-1c5a-50ee-ca54-19547bae1858.png\">\n\n\n\n```{haskell:GHCi}\nPrelude Data.List> import Data.List ( sort )\nPrelude Data.List Data.List>\n```\n\n####sort\u95a2\u6570 \u3092 import__\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> sort \"AADDDDDCCFHYYYYAACCFFFFZ\"\n\"AAAACCCCDDDDDFFFFFHYYYYZ\"\nPrelude Data.List Data.List>\n```\n\n* \u7570\u306a\u308b\u5024 \u3092 \u9593\u306b\u631f\u3093\u3067\u51fa\u73fe\u3057\u3066\u3044\u305f \u540c\u3058\u5024 \u304c\u3001\u4e00\u7b87\u6240 \u306b \u96c6\u7d04\u3055\u308c\u305f\u3002\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> (group . sort) \"AADDDDDCCFHYYYYAACCFFFFZ\"\n[\"AAAA\",\"CCCC\",\"DDDDD\",\"FFFFF\",\"H\",\"YYYY\",\"Z\"]\nPrelude Data.List Data.List>\n```\n\n* \u4ee5\u4e0b\u3067\u3001\u6c42\u3081\u305f\u3044\u3082\u306e \u304c \u5f97\u3089\u308c\u305f\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> map (\\l -> show (head l ) ++ \" : \" ++ show (length l)) ((group . sort) \"AADDDDDCCFHYYYYAACCFFFFZ\")\n[\"'A' : 4\",\"'C' : 4\",\"'D' : 5\",\"'F' : 5\",\"'H' : 1\",\"'Y' : 4\",\"'Z' : 1\"]\nPrelude Data.List Data.List> \n```\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> let original_string = \"AADDDDDCCFHYYYYAACCFFFFZ\"\nPrelude Data.List Data.List>\nPrelude Data.List Data.List> original_string \n\"AADDDDDCCFHYYYYAACCFFFFZ\"\nPrelude Data.List Data.List>\n```\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> map (\\l -> show (head l ) ++ \" : \" ++ show (length l)) ((group . sort) original_string)\n[\"'A' : 4\",\"'C' : 4\",\"'D' : 5\",\"'F' : 5\",\"'H' : 1\",\"'Y' : 4\",\"'Z' : 1\"]\nPrelude Data.List Data.List> \n```\n\n* __\u95a2\u6570 \u306b \u3059\u308b__\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> let get_value_count s = map (\\l -> show (head l ) ++ \" : \" ++ show (length l)) ((group . sort) s)\nPrelude Data.List Data.List>\n```\n\n* \u9069\u7528\u3067\u304d\u308b \uff08\u5f15\u6570\u306b\u53d6\u308b\uff09 \u5024 \u306f\u3001Ord\uff08\u9806\u5e8f\u53ef\u80fd\u6027\uff09\u3068 Show\uff08\u6587\u5b57\u5217\u5909\u63db\u53ef\u80fd\u6027\uff09\u306e\u4e21\u8005 \u3092 \u6e80\u305f\u3059 \u5024 \u3092 \u8981\u7d20\u3068\u3057\u3066 \u69cb\u6210\u3055\u308c\u308b\u30ea\u30b9\u30c8\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> :t get_value_count \nget_value_count :: (Ord a, Show a) => [a] -> [[Char]]\nPrelude Data.List Data.List>\n```\n\n\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> get_value_count \"AADDDDDCCFHYYYYAACCFFFFZ\"\n[\"'A' : 4\",\"'C' : 4\",\"'D' : 5\",\"'F' : 5\",\"'H' : 1\",\"'Y' : 4\",\"'Z' : 1\"]\nPrelude Data.List Data.List> \n```\n\n```{haskell:GHCi}\nPrelude Data.List Data.List> get_value_count original_string \n[\"'A' : 4\",\"'C' : 4\",\"'D' : 5\",\"'F' : 5\",\"'H' : 1\",\"'Y' : 4\",\"'Z' : 1\"]\nPrelude Data.List Data.List> \n```\n"}