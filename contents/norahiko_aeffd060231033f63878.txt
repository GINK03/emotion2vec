{"tags": ["Dart", "\u3069\u3046\u66f8\u304f"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u7b2c\u56db\u56de \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c\u3092Dart\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://qiita.com/items/9c514267214d3917edf2\nimport \"dart:math\";\n\nfinal List<int> xs = [0, 1, 0, -1];\nfinal List<int> ys = [1, 0, -1, 0];\nfinal int WIDTH = 5;\nfinal int HEIGHT = 5;\nfinal int shiftSize = (log(WIDTH * HEIGHT) / LN2).ceil().toInt();\n\nmain() {\n  test(\"\", 8512);\n  test(\"af\", 4256);\n  test(\"xy\", 4256);\n  test(\"pq qr rs st di in ns sx\", 184);\n  test(\"af pq qr rs st di in ns sx\", 92);\n  test(\"bg ch di ij no st\", 185);\n  test(\"bc af ch di no kp mr ns ot pu rs\", 16);\n  test(\"ab af\", 0);\n  test(\"ty xy\", 0);\n  test(\"bg ch ej gh lm lq mr ot rs sx\", 11);\n  test(\"ty ch hi mn kp mr rs sx\", 18);\n  test(\"xy ch hi mn kp mr rs sx\", 32);\n  test(\"ch hi mn kp mr rs sx\", 50);\n  test(\"ab cd uv wx\", 621);\n  test(\"gh mn st lq qr\", 685);\n  test(\"fg gl lm mr rs\", 171);\n  print(\"ok\");\n}\n\ntest(String input, int expect) {\n  assert(countPath(input) == expect);\n}\n\nint str2node(String chr) => chr.codeUnitAt(0) - \"a\".codeUnitAt(0);\n\nint pos2node(int x, int y) => y * WIDTH + x;\n\nint node2path(int from, int to) {\n  return (from < to) ? (from << shiftSize) + to : (to << shiftSize) + from;\n}\n\nint parsePath(String path) => node2path(str2node(path[0]), str2node(path[1]));\n\nint countPath(String input) {\n  Set<int> visited = new Set.from([0]);\n  Set<int> stop = new Set();\n  if(input != \"\") {\n    stop = new Set.from(input.split(\" \").map(parsePath));\n  }\n  return count(0, 0, visited, stop);\n}\n\nint count(int x, int y, Set visited, Set stop) {\n  if(x == WIDTH - 1 && y == HEIGHT - 1) return 1;\n  int sum = 0;\n\n  for(var i = 0; i < 4; i++) {\n    int nx = x + xs[i];\n    int ny = y + ys[i];\n    if(0 <= nx && 0 <= ny && nx < WIDTH && ny < HEIGHT) {\n      int curNode = pos2node(x, y);\n      int nextNode = pos2node(nx, ny);\n      int path = node2path(curNode, nextNode);\n\n      if(!visited.contains(nextNode) && !stop.contains(path)) {\n        visited.add(nextNode);\n        sum += count(nx, ny, visited, stop);\n        visited.remove(nextNode);\n      }\n    }\n  }\n  return sum;\n}\n\n\u7b2c\u56db\u56de \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c\u3092Dart\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://qiita.com/items/9c514267214d3917edf2\n\n```dart\nimport \"dart:math\";\n\nfinal List<int> xs = [0, 1, 0, -1];\nfinal List<int> ys = [1, 0, -1, 0];\nfinal int WIDTH = 5;\nfinal int HEIGHT = 5;\nfinal int shiftSize = (log(WIDTH * HEIGHT) / LN2).ceil().toInt();\n\nmain() {\n  test(\"\", 8512);\n  test(\"af\", 4256);\n  test(\"xy\", 4256);\n  test(\"pq qr rs st di in ns sx\", 184);\n  test(\"af pq qr rs st di in ns sx\", 92);\n  test(\"bg ch di ij no st\", 185);\n  test(\"bc af ch di no kp mr ns ot pu rs\", 16);\n  test(\"ab af\", 0);\n  test(\"ty xy\", 0);\n  test(\"bg ch ej gh lm lq mr ot rs sx\", 11);\n  test(\"ty ch hi mn kp mr rs sx\", 18);\n  test(\"xy ch hi mn kp mr rs sx\", 32);\n  test(\"ch hi mn kp mr rs sx\", 50);\n  test(\"ab cd uv wx\", 621);\n  test(\"gh mn st lq qr\", 685);\n  test(\"fg gl lm mr rs\", 171);\n  print(\"ok\");\n}\n\ntest(String input, int expect) {\n  assert(countPath(input) == expect);\n}\n\nint str2node(String chr) => chr.codeUnitAt(0) - \"a\".codeUnitAt(0);\n\nint pos2node(int x, int y) => y * WIDTH + x;\n\nint node2path(int from, int to) {\n  return (from < to) ? (from << shiftSize) + to : (to << shiftSize) + from;\n}\n\nint parsePath(String path) => node2path(str2node(path[0]), str2node(path[1]));\n\nint countPath(String input) {\n  Set<int> visited = new Set.from([0]);\n  Set<int> stop = new Set();\n  if(input != \"\") {\n    stop = new Set.from(input.split(\" \").map(parsePath));\n  }\n  return count(0, 0, visited, stop);\n}\n\nint count(int x, int y, Set visited, Set stop) {\n  if(x == WIDTH - 1 && y == HEIGHT - 1) return 1;\n  int sum = 0;\n\n  for(var i = 0; i < 4; i++) {\n    int nx = x + xs[i];\n    int ny = y + ys[i];\n    if(0 <= nx && 0 <= ny && nx < WIDTH && ny < HEIGHT) {\n      int curNode = pos2node(x, y);\n      int nextNode = pos2node(nx, ny);\n      int path = node2path(curNode, nextNode);\n\n      if(!visited.contains(nextNode) && !stop.contains(path)) {\n        visited.add(nextNode);\n        sum += count(nx, ny, visited, stop);\n        visited.remove(nextNode);\n      }\n    }\n  }\n  return sum;\n}\n```"}