{"context": "Project Euler\u3092D\u8a00\u8a9e\u3067\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u3067\u89e3\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u6700\u8fd1\u81ea\u5206\u306e\u4e2d\u3067\u7834\u58ca\u7684\u4ee3\u5165\u304c\u60aa\u306a\u306e\u3067\u306f\u306a\u3044\u304b\u3001\u3068\u8003\u3048\u3001\u30e9\u30e0\u30c0\u8a08\u7b97(\u7406\u89e3\u304c\u5341\u5206\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044)\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u7834\u58ca\u7684\u4ee3\u5165\u3092\u6975\u529b\u6e1b\u3089\u305d\u3046\u3068\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u500b\u4eba\u7684\u306b\u9762\u767d\u3044\u30b3\u30fc\u30c9\u304c\u751f\u307e\u308c\u305f\u306e\u3067D\u8a00\u8a9e\u306e\u8868\u73fe\u529b\u306e\u8c4a\u304b\u3055\u3092\u793a\u3059\u4f8b\u3068\u3057\u3066\u63d0\u793a\u3057\u3088\u3046\u3068\u8003\u3048\u305f\u304b\u3089\u3067\u3059\u3002\n\u305d\u308c\u3086\u3048\u306b\u3001\u4e00\u77acLisp\u3063\u307d\u304f\u898b\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5b89\u5fc3\u3057\u3066\u304f\u3060\u3055\u3044\u3001D\u8a00\u8a9e\u3067\u3059\u3002\n\u81ea\u660e\u306a\u7834\u58ca\u7684\u4ee3\u5165\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u518d\u5e30\u3092\u591a\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u6d41\u77f3\u306b\u7121\u540d\u518d\u5e30\u304c\u4f7f\u3048\u306a\u3044\u3068\u53b3\u3057\u3044\u306e\u3067Z Combinator\u3092\u4ee5\u4e0b\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5b9a\u7fa9\u3057\u3066\u305d\u308c\u3092\u7528\u3044\u307e\u3059\u3002\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\n\u3053\u3053\u3067\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3068\u306fmain\u95a2\u6570\u5185\u90e8\u306b\u4e00\u6587\u3057\u304b\u66f8\u304b\u304b\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u5b9a\u7fa9\u3057\u307e\u3059\u3002(\u305d\u308c\u3086\u3048\u3001import\u3084main\u95a2\u6570\u306e\u5b9a\u7fa9\u306a\u3069\u306f\u884c\u6570\u306b\u542b\u3081\u307e\u305b\u3093\u3002)\n\u307e\u305f\u3001\u57fa\u672c\u7684\u306b\u81ea\u5206\u3067\u89e3\u3044\u305f\u6642\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u304c\u3001\u4e00\u90e8\u81ea\u5206\u306e\u89e3\u6cd5\u3067\u306f\u3069\u3046\u306b\u3082\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u306e\u304c\u9762\u5012\u306a\u3068\u304d\u306b\u9650\u308a\u3001(\u5f53\u7136\u3067\u3059\u304c)\u81ea\u5206\u304c\u4e00\u5ea6\u6b63\u89e3\u3057\u305f\u5f8c\u306b\u4ed6\u306e\u65b9\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u3066\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002(\u305d\u308c\u3067\u3082\u9014\u4e2d\u3067\u9762\u5012\u304f\u3055\u304f\u306a\u3063\u3066\u8ae6\u3081\u3066\u3057\u307e\u3044\u4e00\u90e8\u8907\u6587\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3082\u5b58\u5728\u3057\u307e\u3059\u304c\u3001\u6642\u9593\u304c\u3042\u308c\u3070\u3044\u305a\u308c\u4fee\u6b63\u3057\u307e\u3059\u3002)\n\u307e\u305f\u3001\u53ef\u8aad\u6027\u3092\u8003\u616e\u3057\u3001\u9069\u5f53\u306b\u30a4\u30f3\u30c7\u30f3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u304b\u3089\u3001D\u8a00\u8a9e\u306e\u578b\u63a8\u8ad6\u3092\u6700\u5927\u9650\u306b\u7528\u3044\u3066\u5909\u6570(\u30e9\u30e0\u30c0\u5f0f\u306e\u5f15\u6570)\u306e\u578b\u306f\u3067\u304d\u308b\u3060\u3051\u7701\u7565\u3057\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u30b3\u30fc\u30c9\u306f\u4e0b\u304b\u3089\u9806\u306b\u8aad\u3093\u3067\u3044\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3059(\u5f15\u6570\u3068\u3057\u3066\u5024\u3092\u4e0e\u3048\u3066\u3044\u308b\u306e\u3067\u5b9f\u5f15\u6570\u304c\u4e0b\u306e\u65b9\u306b\u6765\u3066\u3001\u4eee\u5f15\u6570\u304c\u4e0a\u306e\u65b9\u306b\u6765\u307e\u3059)\u3002\n\u554f\u984c\u306fProject Euler\u306e\u516c\u5f0f\u30b5\u30a4\u30c8\u3067\u3001Creative Commons 2.0 \u8868\u793a-\u975e\u55b6\u5229-\u7d99\u627f \u306e\u3082\u3068\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u539f\u6587\u3092\u3001Puki Wiki\u306eProject Euler\u306e\u65e5\u672c\u8a9e\u8a33\u306e\u30da\u30fc\u30b8\u304b\u3089\u5f15\u7528\u3057\u3066\u3044\u307e\u3059(\u3053\u3061\u3089\u3082\u540c\u69d8\u306b Creative Commons 2.0 \u8868\u793a-\u975e\u55b6\u5229-\u7d99\u627f \u306e\u5143\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059)\u3002\n\u516c\u5f0f\u30b5\u30a4\u30c8 : projecteuler.net\n\u65e5\u672c\u8a9e\u8a33Wiki : odz.sakura.ne.jp/projecteuler/\n\u3067\u306f\u3001\u3055\u3063\u305d\u304f\u306f\u3058\u3081\u307e\u3057\u3087\u3046\u3002\n\nProblem 1\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below 1000.\n\n\u65e5\u672c\u8a9e\u8a33\n\n10\u672a\u6e80\u306e\u81ea\u7136\u6570\u306e\u3046\u3061, 3 \u3082\u3057\u304f\u306f 5 \u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u306f 3, 5, 6, 9 \u306e4\u3064\u304c\u3042\u308a, \u3053\u308c\u3089\u306e\u5408\u8a08\u306f 23 \u306b\u306a\u308b.\n\u540c\u3058\u3088\u3046\u306b\u3057\u3066, 1000 \u672a\u6e80\u306e 3 \u304b 5 \u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u6570\u5b57\u306e\u5408\u8a08\u3092\u6c42\u3081\u3088.\n\n\u3053\u308c\u306f\u307e\u3041\u3001\u5358\u7d14\u306bN\u30920\u304b\u3089999\u307e\u30671\u3064\u305a\u3064\u5897\u3084\u3057\u3066\u3044\u304d\u3001\u305d\u306eN\u306b\u5bfe\u3057\u3066\u9806\u306b\n\n\u5358\u7d14\u306b3\u30685\u306e\u6700\u5c0f\u516c\u500d\u6570\u3067\u3042\u308b15\u306e\u500d\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\n\u305d\u3046\u3067\u306a\u3051\u308c\u30705\u306e\u500d\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\n\u305d\u3046\u3067\u306a\u3051\u308c\u30703\u306e\u500d\u6570\u3067\u3042\u308b\u304b\n\n\u3068\u3044\u3046\u306e\u3092\u8abf\u3079\u3066\u3044\u3051\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\u305d\u308c\u3092\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u306e\u304c\u4ee5\u4e0b\nimport std.stdio,\n       std.range,\n       std.algorithm;\n\nvoid main() {\n  (1000.iota.filter!(x =>\n    (x % 15 == 0 ? true\n    : x % 5 == 0 ? true\n    : x % 3 == 0)).sum).writeln;\n}\n\n\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u89e3\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u6b21\u306b\u53c2\u308a\u307e\u3057\u3087\u3046\u3002\n\nProblem 2\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\u65e5\u672c\u8a9e\u8a33\n\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u9805\u306f\u524d\u306e2\u3064\u306e\u9805\u306e\u548c\u3067\u3042\u308b. \u6700\u521d\u306e2\u9805\u3092 1, 2 \u3068\u3059\u308c\u3070, \u6700\u521d\u306e10\u9805\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b.\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\u6570\u5217\u306e\u9805\u306e\u5024\u304c400\u4e07\u4ee5\u4e0b\u306e, \u5076\u6570\u5024\u306e\u9805\u306e\u7dcf\u548c\u3092\u6c42\u3081\u3088.\n\n\u306a\u308b\u307b\u3069\u301c\u3001\u3053\u3053\u3067\u306f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3092\u6271\u308f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u624b\u7d9a\u304d\u3063\u307d\u304f\u9806\u5f53\u306b\u73fe\u5b9f\u7684\u306a\u6642\u9593\u3067\u89e3\u3092\u5f97\u3088\u3046\u3068\u601d\u3046\u3068\u601d\u3046\u3068\u30e1\u30e2\u5316\u3092\u7528\u3044\u3066\u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u30eb\u30fc\u30d7\u3055\u305b\u3066\u305d\u306e\u6642\u306b\u7dcf\u548c\u3092\u8a08\u7b97\u3059\u308b\u89e3\u6cd5\u304c\u7c21\u5358\u306b\u6d6e\u304b\u3073\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u4eca\u56de\u306f\u305d\u306e\u624b\u6cd5\u304c\u4f7f\u3048\u306a\u3044\u306e\u3067\u518d\u5e30\u3067\u89e3\u304f\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n\u305d\u306e\u7d50\u679c\u304c\u4ee5\u4e0b\nimport std.algorithm,\n       std.range,\n       std.stdio;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  (max => \n    (solver =>\n      solver(1, 0, 0)\n    )(Z((ulong delegate(ulong, ulong, ulong)solver, ulong n1, ulong n2, ulong sum) =>\n        n2 < max ? solver(n1 + n2, n1, n2 % 2 == 0 ? sum + n2 : sum) : sum\n      ))\n  )(4000000).writeln;\n}\n\n\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u3068\u3057\u3066\u306f\u3001solver\u306e\u4e2d\u3067\u7121\u540d\u518d\u5e30\u3092\u884c\u3044\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u3001n\u56de\u76ee\u306e\u547c\u3073\u51fa\u3057\u306e\u3068\u304d\u306bn2\u306f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u7b2cn\u9805\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001n2\u304c\u5076\u6570\u3067\u3042\u308b\u306a\u3089\u3070\u305d\u308c\u3092sum\u306b\u52a0\u3048\u3066\u518d\u3073\u518d\u5e30\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\u540c\u69d8\u306b\u518d\u5e30\u3092\u7e70\u308a\u8fd4\u3057\u3001\u3042\u308bN\u56de\u76ee\u306bn2\u304c400\u4e07\u3092\u8d85\u3048\u305f\u6642\u3001\u518d\u5e30\u3092\u7d42\u4e86\u3057sum\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u30dd\u30a4\u30f3\u30c8\u306f\u30b3\u30fc\u30c9\u3092\u5c11\u3057\u3067\u3082\u77ed\u304f\u3057\u3088\u3046\u3068\u601d\u3048\u3070solver\u306e\u4e2d\u8eab\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002(\u5148\u307b\u3069\u306e\u30b3\u30fc\u30c9\u306f\u554f\u984c\u6587\u306b\u5bfe\u3057\u3066\u7d20\u76f4\u306b\u66f8\u3044\u305f\u3082\u306e\u3067\u3059)\nn2 < max ? solver(n1 + n2, n1, sum + n2) : sum / 2\n\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3068\u308a\u3042\u3048\u305an2\u304c400\u4e07\u306b\u306a\u308b\u307e\u3067\u306e\u5168\u90e8\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3057\u3001n2\u304c400\u4e07\u4ee5\u4e0a\u306b\u306a\u3063\u305f\u6642\u306b\u305d\u306e\u7dcf\u548c\u30922\u3067\u5272\u3063\u3066\u89e3\u3092\u5f97\u3066\u3044\u307e\u3059\u3002\n\u3067\u306f\u3001\u6b21\u306b\u53c2\u308a\u307e\u3057\u3087\u3046\n\nProblem 3\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143 ?\n\n\u65e5\u672c\u8a9e\u8a33\n\n13195 \u306e\u7d20\u56e0\u6570\u306f 5, 7, 13, 29 \u3067\u3042\u308b.\n600851475143 \u306e\u7d20\u56e0\u6570\u306e\u3046\u3061\u6700\u5927\u306e\u3082\u306e\u3092\u6c42\u3081\u3088.\n\n\u4eca\u56de(Problem 1 to 5)\u306e\u306a\u304b\u3067\u4e00\u756a\u82e6\u52b4\u3057\u305f\u306e\u304c\u3053\u306e\u554f\u984c\u3067\u3042\u308a\u3001\u552f\u4e00\u8907\u6587\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f(while\u3084foreach\u3092\u7121\u540d\u95a2\u6570\u306e\u518d\u5e30\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u89e3\u6d88\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30b3\u30fc\u30c9\u304c\u9577\u304f\u3066\u9762\u5012\u304f\u3055\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u59a5\u5354\u3057\u307e\u3057\u305f)\u3002\n\u307e\u305f\u3001\u50d5\u306e\u89e3\u6cd5\u3067\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u306e\u304c\u5927\u5909\u3060\u3063\u305f\u306e\u3067\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u5148\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nCodeIQ \u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u554f\u984c\u300c\u30c1\u30e7\u30b3\u306e\u91cf\u3092\u6e1b\u3089\u305b\uff01\u300dby @hyuki \u306b\u89e3\u7b54\u3057\u307e\u3057\u305f\n\u3053\u3053\u3067\u306f\u3001600851475143\u3068\u3044\u3046\u5de8\u5927\u306a\u6570\u306e\u7d20\u56e0\u6570\u3092\u8003\u3048\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u5148\u307b\u3069\u306e\u65b9\u304c\u5b9f\u88c5\u3055\u308c\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u53c2\u8003\u306b\u3057\u3066\u7d20\u56e0\u6570\u5206\u89e3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u7d20\u56e0\u6570\u5206\u89e3\u306e\u5b9f\u88c5\u3082\u542b\u3081\u3066\u89e3\u7b54\u306b\u7528\u3044\u305f\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\nimport std.algorithm,\n       std.random,\n       std.range,\n       std.stdio;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  (N => \n    (getRand =>\n      (mr_prime => \n        (rho_find_pd =>\n          (rho_prime_division =>\n            rho_prime_division(N, false).join.sort!\"a>b\".uniq.array[0]\n          )(Z((ulong[][] delegate(ulong, bool) rho_prime_division, ulong n, bool suppress_sort) =>\n            mr_prime(n) ?\n              [[n, 1]]\n            : (d =>\n                (ulong[][] res) {\n                  foreach (arr; rho_prime_division(d, true)) {\n                    (cnt => \n                      (q, k) {\n                        while (n % q == 0) {\n                          n /= q;\n                          cnt++;\n                        }\n                        res ~= [q, cnt];\n                      }(arr[0], arr[1])\n                    )(0);\n                  }\n\n                  res ~= rho_prime_division(n, true);\n                  return suppress_sort ? res : res.sort.array;\n                }([[]])\n              )(rho_find_pd(n))\n          ))\n        )((ulong n) => \n          (gcd =>\n            (f_gen =>\n              (k) {\n                  foreach (_; k.iota) {\n                    return ((ulong delegate(ulong) f) => \n                      ((ulong d, ulong x, ulong y) {\n                        while (d == 1) {\n                          x = f(x);\n                          y = f(f(y));\n                          d = gcd(n, (z => z < 0 ? z * -1 : z)(x - y));\n                        }\n\n                        return d < n ? d : n;\n                      })(1, 2, 2)\n                    )(f_gen());\n                  }\n                  return true;\n              }(3)\n            )(() => \n              (c) {\n                while(!(c != 0 && c != n - 2)) {\n                  c = getRand() % n;   \n                }\n                return ((ulong x) => (x * x + c) % n);\n              }(getRand() % n)\n            )\n          )(Z((ulong delegate(ulong, ulong) gcd, ulong a, ulong b) => b ? gcd(b, a%b) : a < 0 ? a * -1 : a))\n        )\n      )((ulong n) =>\n        (mod_pow =>\n          (_d => \n            (d => \n              (k) {\n                foreach(_; k.iota) {\n                  if (!\n                      (a =>\n                        (t =>\n                          (y) {\n                            while (t != n-1 && y != 1 && y != n-1) {\n                              y = (y * y) % n;\n                              t <<= 1;\n                            }\n\n                            if (y != n - 1 && (t & 1) == 0) {\n                              return false;\n                            } else {\n                              return true;\n                            }\n                          }(mod_pow(a, t, n))\n                        )(d)\n                      )(getRand() % (n - 1) + 1)) {\n                        return false;\n                      }\n                }\n\n                return true;\n\n              }(20)\n            )((d) {\n              while((d & 1) == 0) {\n                d >>= 1;\n              }\n              return d;\n            }(_d))\n          )(n - 1)\n        )((ulong base, ulong pwr, ulong mod) =>\n          (ulong r) {\n            while (pwr > 0) {\n              if((pwr & 1) == 1) {\n                r = (r * base) % mod;\n              }\n              base = (base * base) % mod;\n              pwr >>= 1;\n            }\n            return r;\n          }(1)\n        )\n      )\n    )(() =>\n      ((Mt19937 gen) =>\n        (gen.seed(unpredictableSeed), gen.front)\n      )(Mt19937.init)\n    )\n  )(600851475143).writeln;\n}\n\n\u4e00\u90e8\u3001\u7834\u58ca\u7684\u4ee3\u5165\u3084\u8907\u6587\u3092\u542b\u3080\u305f\u3081\u3001\u500b\u4eba\u7684\u306b\u306f\u3059\u3054\u304f\u518d\u5e30\u3067\u66f8\u304d\u76f4\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u6642\u9593\u304c\u306a\u3044\u306e\u3067\u3044\u305a\u308c\u6642\u9593\u304c\u3042\u308c\u3070\u66f8\u304d\u76f4\u3057\u307e\u3059\u3002\n\u89e3\u6cd5\u306f\u307e\u3041\u5358\u7d14\u306b\u3001\u7d20\u56e0\u6570\u5206\u89e3\u3057\u3066\u3001sort\u3057\u3066\u7d20\u56e0\u6570\u306e\u6700\u5927\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u6b21\u306b\u53c2\u308a\u307e\u3057\u3087\u3046\n\nProblem 4\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\nFind the largest palindrome made from the product of two 3-digit numbers.\n\n\u65e5\u672c\u8a9e\u8a33\n\n\u5de6\u53f3\u3069\u3061\u3089\u304b\u3089\u8aad\u3093\u3067\u3082\u540c\u3058\u5024\u306b\u306a\u308b\u6570\u3092\u56de\u6587\u6570\u3068\u3044\u3046. 2\u6841\u306e\u6570\u306e\u7a4d\u3067\u8868\u3055\u308c\u308b\u56de\u6587\u6570\u306e\u3046\u3061, \u6700\u5927\u306e\u3082\u306e\u306f 9009 = 91 \u00d7 99 \u3067\u3042\u308b.\n\u3067\u306f, 3\u6841\u306e\u6570\u306e\u7a4d\u3067\u8868\u3055\u308c\u308b\u56de\u6587\u6570\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u3088.\n\n\u306a\u308b\u307b\u3069\u301c\u3001\u3053\u308c\u306f\u3072\u3068\u3051\u305f\u305a\u3064\u53d6\u308a\u51fa\u3057\u3066\u9006\u9806\u306b\u3057\u3066\u3044\u3063\u305f\u3082\u306e\u304c\u5143\u306e\u6570\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3067\u5224\u5b9a\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u306e\u3067\u305d\u306e\u65b9\u91dd\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u305d\u308c\u304c\u4ee5\u4e0b\nimport std.algorithm,\n       std.random,\n       std.range,\n       std.stdio;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  (M =>\n    (N =>\n     (cond => \n        M.map!(m => N.map!(n => m * n)).join.filter!(x => cond(x)).array.sort!\"a>b\".array[0]\n      )((ulong number) => \n        (condSub =>\n          condSub(number, 0, 0, number)\n        )(Z((bool delegate(ulong, ulong, ulong, ulong) condSub, ulong number, ulong remaind, ulong reverse, ulong tmp) =>\n            (remaind =>\n              (reverse =>\n                (tmp =>\n                  tmp != 0 ? condSub(number, remaind, reverse, tmp) : reverse == number\n                )(tmp / 10)\n              )(reverse * 10 + remaind)\n            )(tmp % 10)\n          ))\n      )\n    )(100.iota(1000))\n  )(100.iota(1000)).writeln;\n}\n\n\u307e\u30fc\u3001\u3053\u3046\u306a\u308a\u307e\u3059\u3002\u30dd\u30a4\u30f3\u30c8\u306fmod 10\u3067\u6841\u3092\u3068\u308a\u3060\u3059\u3001\u3050\u3089\u3044\u3067\u3059\u304b\u306d\u3002\n\u305d\u308c\u3067\u306f\u4eca\u56de\u306e\u6700\u5f8c\u306b\u53c2\u308a\u307e\u3057\u3087\u3046\n\nProblem 5\n\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n\n\u65e5\u672c\u8a9e\u8a33\n\n2520 \u306f 1 \u304b\u3089 10 \u306e\u6570\u5b57\u306e\u5168\u3066\u306e\u6574\u6570\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u3067\u3042\u308a, \u305d\u306e\u3088\u3046\u306a\u6570\u5b57\u306e\u4e2d\u3067\u306f\u6700\u5c0f\u306e\u5024\u3067\u3042\u308b.\n\u3067\u306f, 1 \u304b\u3089 20 \u307e\u3067\u306e\u6574\u6570\u5168\u3066\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u306e\u4e2d\u3067\u6700\u5c0f\u306e\u6b63\u306e\u6570\u306f\u3044\u304f\u3089\u306b\u306a\u308b\u304b.\n\n\u306a\u308b\u307b\u3069\u3001\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308c\u3070\u3044\u3044\u3063\u307d\u3044\u3067\u3059\u306d\u3002\nlcm\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3042\u3068\u306f\u305d\u308c\u3092\u7528\u3044\u3066foldl1(D\u8a00\u8a9e\u3067\u306freduce)\u306b\u6e21\u305b\u3070\u89e3\u304c\u5f97\u3089\u308c\u305d\u3046\u3067\u3059\u306d\u3002\nlcm\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u3001gcd\u3082\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u3059\u3079\u3066\u3092\u5b9f\u88c5\u3057\u3001\u89e3\u7b54\u306b\u7528\u3044\u305f\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\nimport std.algorithm,\n       std.random,\n       std.range,\n       std.stdio;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  (N =>\n    (gcd => \n      (lcm =>\n        1.iota(N).reduce!((a, b) => lcm(b, a))\n      )((int a, int b) => a * b / gcd(a, b))\n    )(Z((int delegate(int, int) gcd, int a, int b) => b ? gcd(b, a%b) : a < 0 ? a * -1 : a))\n  )(20).writeln;\n}\n\n\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u3059\u306d\u301c\n\u3053\u308c\u306f\u5358\u7d14\u306b1~20\u306e\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b\u3060\u3051\u3067\u3059\u3002\u3068\u3044\u3046\u306e\u3082\u3001\n1 \u304b\u3089 20 \u307e\u3067\u306e\u6574\u6570\u5168\u3066\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u306e\u4e2d\u3067\u6700\u5c0f\u306e\u6b63\u306e\u6570 \u21d4 1\u304b\u308920\u307e\u3067\u306e\u5404\u6570\u306e\u6700\u5c0f\u516c\u500d\u6570\n\u3068\u306a\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u307e\u3068\u3081\n\u4ee5\u4e0a\u3067D\u8a00\u8a9e\u3067\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u3067Project Euler\u306eProblem 1\u304b\u3089Problem 5\u3092\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nD\u8a00\u8a9e\u306fC/C++\u306b\u4ee3\u8868\u3055\u308c\u308b\u624b\u7d9a\u304d\u5f62\u306e\u3088\u3046\u306b\u3082\u66f8\u304f\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3057\u3001\u4e0a\u306b\u793a\u3057\u305f\u3088\u3046\u306b\u3082\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nD\u8a00\u8a9e\u306e\u8868\u73fe\u529b\u306e\u8c4a\u304b\u3055\u3092\u793a\u305b\u305f\u3067\u3057\u3087\u3046\u304b?\n\u3068\u308a\u3042\u3048\u305a\u3001\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3002\n\u6642\u9593(\u3068\u9700\u8981)\u304c\u3042\u308c\u3070\u3044\u305a\u308cProblem 6\u4ee5\u964d\u306b\u3064\u3044\u3066\u3082\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3059\n`Project Euler`\u3092D\u8a00\u8a9e\u3067\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u3067\u89e3\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u6700\u8fd1\u81ea\u5206\u306e\u4e2d\u3067\u7834\u58ca\u7684\u4ee3\u5165\u304c\u60aa\u306a\u306e\u3067\u306f\u306a\u3044\u304b\u3001\u3068\u8003\u3048\u3001\u30e9\u30e0\u30c0\u8a08\u7b97(\u7406\u89e3\u304c\u5341\u5206\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044)\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u7834\u58ca\u7684\u4ee3\u5165\u3092\u6975\u529b\u6e1b\u3089\u305d\u3046\u3068\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u500b\u4eba\u7684\u306b\u9762\u767d\u3044\u30b3\u30fc\u30c9\u304c\u751f\u307e\u308c\u305f\u306e\u3067D\u8a00\u8a9e\u306e\u8868\u73fe\u529b\u306e\u8c4a\u304b\u3055\u3092\u793a\u3059\u4f8b\u3068\u3057\u3066\u63d0\u793a\u3057\u3088\u3046\u3068\u8003\u3048\u305f\u304b\u3089\u3067\u3059\u3002\n\u305d\u308c\u3086\u3048\u306b\u3001\u4e00\u77ac`Lisp`\u3063\u307d\u304f\u898b\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5b89\u5fc3\u3057\u3066\u304f\u3060\u3055\u3044\u3001D\u8a00\u8a9e\u3067\u3059\u3002\n\u81ea\u660e\u306a\u7834\u58ca\u7684\u4ee3\u5165\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u518d\u5e30\u3092\u591a\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u6d41\u77f3\u306b\u7121\u540d\u518d\u5e30\u304c\u4f7f\u3048\u306a\u3044\u3068\u53b3\u3057\u3044\u306e\u3067`Z Combinator`\u3092\u4ee5\u4e0b\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5b9a\u7fa9\u3057\u3066\u305d\u308c\u3092\u7528\u3044\u307e\u3059\u3002\n\n```d\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n```\n\n\u3053\u3053\u3067\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3068\u306f`main`\u95a2\u6570\u5185\u90e8\u306b\u4e00\u6587\u3057\u304b\u66f8\u304b\u304b\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u5b9a\u7fa9\u3057\u307e\u3059\u3002(\u305d\u308c\u3086\u3048\u3001`import`\u3084`main`\u95a2\u6570\u306e\u5b9a\u7fa9\u306a\u3069\u306f\u884c\u6570\u306b\u542b\u3081\u307e\u305b\u3093\u3002)\n\u307e\u305f\u3001\u57fa\u672c\u7684\u306b\u81ea\u5206\u3067\u89e3\u3044\u305f\u6642\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u304c\u3001\u4e00\u90e8\u81ea\u5206\u306e\u89e3\u6cd5\u3067\u306f\u3069\u3046\u306b\u3082\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u306e\u304c\u9762\u5012\u306a\u3068\u304d\u306b\u9650\u308a\u3001(\u5f53\u7136\u3067\u3059\u304c)\u81ea\u5206\u304c\u4e00\u5ea6\u6b63\u89e3\u3057\u305f\u5f8c\u306b\u4ed6\u306e\u65b9\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u3066\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002(\u305d\u308c\u3067\u3082\u9014\u4e2d\u3067\u9762\u5012\u304f\u3055\u304f\u306a\u3063\u3066\u8ae6\u3081\u3066\u3057\u307e\u3044\u4e00\u90e8\u8907\u6587\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3082\u5b58\u5728\u3057\u307e\u3059\u304c\u3001\u6642\u9593\u304c\u3042\u308c\u3070\u3044\u305a\u308c\u4fee\u6b63\u3057\u307e\u3059\u3002)\n\u307e\u305f\u3001\u53ef\u8aad\u6027\u3092\u8003\u616e\u3057\u3001\u9069\u5f53\u306b\u30a4\u30f3\u30c7\u30f3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u304b\u3089\u3001D\u8a00\u8a9e\u306e\u578b\u63a8\u8ad6\u3092\u6700\u5927\u9650\u306b\u7528\u3044\u3066\u5909\u6570(\u30e9\u30e0\u30c0\u5f0f\u306e\u5f15\u6570)\u306e\u578b\u306f\u3067\u304d\u308b\u3060\u3051\u7701\u7565\u3057\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u30b3\u30fc\u30c9\u306f\u4e0b\u304b\u3089\u9806\u306b\u8aad\u3093\u3067\u3044\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3059(\u5f15\u6570\u3068\u3057\u3066\u5024\u3092\u4e0e\u3048\u3066\u3044\u308b\u306e\u3067\u5b9f\u5f15\u6570\u304c\u4e0b\u306e\u65b9\u306b\u6765\u3066\u3001\u4eee\u5f15\u6570\u304c\u4e0a\u306e\u65b9\u306b\u6765\u307e\u3059)\u3002\n\n\u554f\u984c\u306fProject Euler\u306e\u516c\u5f0f\u30b5\u30a4\u30c8\u3067\u3001Creative Commons 2.0 \u8868\u793a-\u975e\u55b6\u5229-\u7d99\u627f \u306e\u3082\u3068\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u539f\u6587\u3092\u3001Puki Wiki\u306eProject Euler\u306e\u65e5\u672c\u8a9e\u8a33\u306e\u30da\u30fc\u30b8\u304b\u3089\u5f15\u7528\u3057\u3066\u3044\u307e\u3059(\u3053\u3061\u3089\u3082\u540c\u69d8\u306b Creative Commons 2.0 \u8868\u793a-\u975e\u55b6\u5229-\u7d99\u627f \u306e\u5143\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059)\u3002\n\u516c\u5f0f\u30b5\u30a4\u30c8 : [projecteuler.net](https://projecteuler.net)\n\u65e5\u672c\u8a9e\u8a33Wiki : [odz.sakura.ne.jp/projecteuler/](http://odz.sakura.ne.jp/projecteuler/)\n\n\n\u3067\u306f\u3001\u3055\u3063\u305d\u304f\u306f\u3058\u3081\u307e\u3057\u3087\u3046\u3002\n\n#Problem 1\n>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n>\n>Find the sum of all the multiples of 3 or 5 below 1000.\n\n\u65e5\u672c\u8a9e\u8a33\n\n>10\u672a\u6e80\u306e\u81ea\u7136\u6570\u306e\u3046\u3061, 3 \u3082\u3057\u304f\u306f 5 \u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u306f 3, 5, 6, 9 \u306e4\u3064\u304c\u3042\u308a, \u3053\u308c\u3089\u306e\u5408\u8a08\u306f 23 \u306b\u306a\u308b.\n>\u540c\u3058\u3088\u3046\u306b\u3057\u3066, 1000 \u672a\u6e80\u306e 3 \u304b 5 \u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u6570\u5b57\u306e\u5408\u8a08\u3092\u6c42\u3081\u3088.\n\n\u3053\u308c\u306f\u307e\u3041\u3001\u5358\u7d14\u306bN\u30920\u304b\u3089999\u307e\u30671\u3064\u305a\u3064\u5897\u3084\u3057\u3066\u3044\u304d\u3001\u305d\u306eN\u306b\u5bfe\u3057\u3066\u9806\u306b\n\n* \u5358\u7d14\u306b3\u30685\u306e\u6700\u5c0f\u516c\u500d\u6570\u3067\u3042\u308b15\u306e\u500d\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\n* \u305d\u3046\u3067\u306a\u3051\u308c\u30705\u306e\u500d\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\n* \u305d\u3046\u3067\u306a\u3051\u308c\u30703\u306e\u500d\u6570\u3067\u3042\u308b\u304b\n\n\u3068\u3044\u3046\u306e\u3092\u8abf\u3079\u3066\u3044\u3051\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\u305d\u308c\u3092\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u306e\u304c\u4ee5\u4e0b\n\n```d\nimport std.stdio,\n       std.range,\n       std.algorithm;\n\nvoid main() {\n  (1000.iota.filter!(x =>\n    (x % 15 == 0 ? true\n    : x % 5 == 0 ? true\n    : x % 3 == 0)).sum).writeln;\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u89e3\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u6b21\u306b\u53c2\u308a\u307e\u3057\u3087\u3046\u3002\n\n\n#Problem 2\n>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n>\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n>\n>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\u65e5\u672c\u8a9e\u8a33\n\n>\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u9805\u306f\u524d\u306e2\u3064\u306e\u9805\u306e\u548c\u3067\u3042\u308b. \u6700\u521d\u306e2\u9805\u3092 1, 2 \u3068\u3059\u308c\u3070, \u6700\u521d\u306e10\u9805\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b.\n>\n>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n>\u6570\u5217\u306e\u9805\u306e\u5024\u304c400\u4e07\u4ee5\u4e0b\u306e, \u5076\u6570\u5024\u306e\u9805\u306e\u7dcf\u548c\u3092\u6c42\u3081\u3088.\n\n\u306a\u308b\u307b\u3069\u301c\u3001\u3053\u3053\u3067\u306f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3092\u6271\u308f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u624b\u7d9a\u304d\u3063\u307d\u304f\u9806\u5f53\u306b\u73fe\u5b9f\u7684\u306a\u6642\u9593\u3067\u89e3\u3092\u5f97\u3088\u3046\u3068\u601d\u3046\u3068\u601d\u3046\u3068\u30e1\u30e2\u5316\u3092\u7528\u3044\u3066\u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u30eb\u30fc\u30d7\u3055\u305b\u3066\u305d\u306e\u6642\u306b\u7dcf\u548c\u3092\u8a08\u7b97\u3059\u308b\u89e3\u6cd5\u304c\u7c21\u5358\u306b\u6d6e\u304b\u3073\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u4eca\u56de\u306f\u305d\u306e\u624b\u6cd5\u304c\u4f7f\u3048\u306a\u3044\u306e\u3067\u518d\u5e30\u3067\u89e3\u304f\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n\n\u305d\u306e\u7d50\u679c\u304c\u4ee5\u4e0b\n\n```d\nimport std.algorithm,\n       std.range,\n       std.stdio;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  (max => \n    (solver =>\n      solver(1, 0, 0)\n    )(Z((ulong delegate(ulong, ulong, ulong)solver, ulong n1, ulong n2, ulong sum) =>\n        n2 < max ? solver(n1 + n2, n1, n2 % 2 == 0 ? sum + n2 : sum) : sum\n      ))\n  )(4000000).writeln;\n}\n```\n\n\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u3068\u3057\u3066\u306f\u3001`solver`\u306e\u4e2d\u3067\u7121\u540d\u518d\u5e30\u3092\u884c\u3044\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u3001`n`\u56de\u76ee\u306e\u547c\u3073\u51fa\u3057\u306e\u3068\u304d\u306b`n2`\u306f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u7b2c`n`\u9805\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001`n2`\u304c\u5076\u6570\u3067\u3042\u308b\u306a\u3089\u3070\u305d\u308c\u3092sum\u306b\u52a0\u3048\u3066\u518d\u3073\u518d\u5e30\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\u540c\u69d8\u306b\u518d\u5e30\u3092\u7e70\u308a\u8fd4\u3057\u3001\u3042\u308b`N`\u56de\u76ee\u306b`n2`\u304c400\u4e07\u3092\u8d85\u3048\u305f\u6642\u3001\u518d\u5e30\u3092\u7d42\u4e86\u3057`sum`\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u30dd\u30a4\u30f3\u30c8\u306f\u30b3\u30fc\u30c9\u3092\u5c11\u3057\u3067\u3082\u77ed\u304f\u3057\u3088\u3046\u3068\u601d\u3048\u3070`solver`\u306e\u4e2d\u8eab\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002(\u5148\u307b\u3069\u306e\u30b3\u30fc\u30c9\u306f\u554f\u984c\u6587\u306b\u5bfe\u3057\u3066\u7d20\u76f4\u306b\u66f8\u3044\u305f\u3082\u306e\u3067\u3059)\n\n```d\nn2 < max ? solver(n1 + n2, n1, sum + n2) : sum / 2\n```\n\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3068\u308a\u3042\u3048\u305a`n2`\u304c400\u4e07\u306b\u306a\u308b\u307e\u3067\u306e\u5168\u90e8\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3057\u3001`n2`\u304c400\u4e07\u4ee5\u4e0a\u306b\u306a\u3063\u305f\u6642\u306b\u305d\u306e\u7dcf\u548c\u30922\u3067\u5272\u3063\u3066\u89e3\u3092\u5f97\u3066\u3044\u307e\u3059\u3002\n\n\n\u3067\u306f\u3001\u6b21\u306b\u53c2\u308a\u307e\u3057\u3087\u3046\n\n\n#Problem 3\n>The prime factors of 13195 are 5, 7, 13 and 29.\n>\n>What is the largest prime factor of the number 600851475143 ?\n\n\u65e5\u672c\u8a9e\u8a33\n\n>13195 \u306e\u7d20\u56e0\u6570\u306f 5, 7, 13, 29 \u3067\u3042\u308b.\n>\n>600851475143 \u306e\u7d20\u56e0\u6570\u306e\u3046\u3061\u6700\u5927\u306e\u3082\u306e\u3092\u6c42\u3081\u3088.\n\n\u4eca\u56de(Problem 1 to 5)\u306e\u306a\u304b\u3067\u4e00\u756a\u82e6\u52b4\u3057\u305f\u306e\u304c\u3053\u306e\u554f\u984c\u3067\u3042\u308a\u3001\u552f\u4e00\u8907\u6587\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f(`while`\u3084`foreach`\u3092\u7121\u540d\u95a2\u6570\u306e\u518d\u5e30\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u89e3\u6d88\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30b3\u30fc\u30c9\u304c\u9577\u304f\u3066\u9762\u5012\u304f\u3055\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u59a5\u5354\u3057\u307e\u3057\u305f)\u3002\n\u307e\u305f\u3001\u50d5\u306e\u89e3\u6cd5\u3067\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u306e\u304c\u5927\u5909\u3060\u3063\u305f\u306e\u3067\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u5148\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n[CodeIQ \u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u554f\u984c\u300c\u30c1\u30e7\u30b3\u306e\u91cf\u3092\u6e1b\u3089\u305b\uff01\u300dby @hyuki \u306b\u89e3\u7b54\u3057\u307e\u3057\u305f](http://antimon2.hatenablog.jp/entry/2013/02/15/214029)\n\n\u3053\u3053\u3067\u306f\u3001`600851475143`\u3068\u3044\u3046\u5de8\u5927\u306a\u6570\u306e\u7d20\u56e0\u6570\u3092\u8003\u3048\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u5148\u307b\u3069\u306e\u65b9\u304c\u5b9f\u88c5\u3055\u308c\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u53c2\u8003\u306b\u3057\u3066\u7d20\u56e0\u6570\u5206\u89e3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u7d20\u56e0\u6570\u5206\u89e3\u306e\u5b9f\u88c5\u3082\u542b\u3081\u3066\u89e3\u7b54\u306b\u7528\u3044\u305f\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\n\n```d\nimport std.algorithm,\n       std.random,\n       std.range,\n       std.stdio;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  (N => \n    (getRand =>\n      (mr_prime => \n        (rho_find_pd =>\n          (rho_prime_division =>\n            rho_prime_division(N, false).join.sort!\"a>b\".uniq.array[0]\n          )(Z((ulong[][] delegate(ulong, bool) rho_prime_division, ulong n, bool suppress_sort) =>\n            mr_prime(n) ?\n              [[n, 1]]\n            : (d =>\n                (ulong[][] res) {\n                  foreach (arr; rho_prime_division(d, true)) {\n                    (cnt => \n                      (q, k) {\n                        while (n % q == 0) {\n                          n /= q;\n                          cnt++;\n                        }\n                        res ~= [q, cnt];\n                      }(arr[0], arr[1])\n                    )(0);\n                  }\n\n                  res ~= rho_prime_division(n, true);\n                  return suppress_sort ? res : res.sort.array;\n                }([[]])\n              )(rho_find_pd(n))\n          ))\n        )((ulong n) => \n          (gcd =>\n            (f_gen =>\n              (k) {\n                  foreach (_; k.iota) {\n                    return ((ulong delegate(ulong) f) => \n                      ((ulong d, ulong x, ulong y) {\n                        while (d == 1) {\n                          x = f(x);\n                          y = f(f(y));\n                          d = gcd(n, (z => z < 0 ? z * -1 : z)(x - y));\n                        }\n\n                        return d < n ? d : n;\n                      })(1, 2, 2)\n                    )(f_gen());\n                  }\n                  return true;\n              }(3)\n            )(() => \n              (c) {\n                while(!(c != 0 && c != n - 2)) {\n                  c = getRand() % n;   \n                }\n                return ((ulong x) => (x * x + c) % n);\n              }(getRand() % n)\n            )\n          )(Z((ulong delegate(ulong, ulong) gcd, ulong a, ulong b) => b ? gcd(b, a%b) : a < 0 ? a * -1 : a))\n        )\n      )((ulong n) =>\n        (mod_pow =>\n          (_d => \n            (d => \n              (k) {\n                foreach(_; k.iota) {\n                  if (!\n                      (a =>\n                        (t =>\n                          (y) {\n                            while (t != n-1 && y != 1 && y != n-1) {\n                              y = (y * y) % n;\n                              t <<= 1;\n                            }\n\n                            if (y != n - 1 && (t & 1) == 0) {\n                              return false;\n                            } else {\n                              return true;\n                            }\n                          }(mod_pow(a, t, n))\n                        )(d)\n                      )(getRand() % (n - 1) + 1)) {\n                        return false;\n                      }\n                }\n\n                return true;\n\n              }(20)\n            )((d) {\n              while((d & 1) == 0) {\n                d >>= 1;\n              }\n              return d;\n            }(_d))\n          )(n - 1)\n        )((ulong base, ulong pwr, ulong mod) =>\n          (ulong r) {\n            while (pwr > 0) {\n              if((pwr & 1) == 1) {\n                r = (r * base) % mod;\n              }\n              base = (base * base) % mod;\n              pwr >>= 1;\n            }\n            return r;\n          }(1)\n        )\n      )\n    )(() =>\n      ((Mt19937 gen) =>\n        (gen.seed(unpredictableSeed), gen.front)\n      )(Mt19937.init)\n    )\n  )(600851475143).writeln;\n}\n```\n\n\u4e00\u90e8\u3001\u7834\u58ca\u7684\u4ee3\u5165\u3084\u8907\u6587\u3092\u542b\u3080\u305f\u3081\u3001\u500b\u4eba\u7684\u306b\u306f\u3059\u3054\u304f\u518d\u5e30\u3067\u66f8\u304d\u76f4\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u6642\u9593\u304c\u306a\u3044\u306e\u3067\u3044\u305a\u308c\u6642\u9593\u304c\u3042\u308c\u3070\u66f8\u304d\u76f4\u3057\u307e\u3059\u3002\n\n\u89e3\u6cd5\u306f\u307e\u3041\u5358\u7d14\u306b\u3001\u7d20\u56e0\u6570\u5206\u89e3\u3057\u3066\u3001`sort`\u3057\u3066\u7d20\u56e0\u6570\u306e\u6700\u5927\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u6b21\u306b\u53c2\u308a\u307e\u3057\u3087\u3046\n\n\n#Problem 4\n>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\n>\n>Find the largest palindrome made from the product of two 3-digit numbers.\n\n\u65e5\u672c\u8a9e\u8a33\n\n>\u5de6\u53f3\u3069\u3061\u3089\u304b\u3089\u8aad\u3093\u3067\u3082\u540c\u3058\u5024\u306b\u306a\u308b\u6570\u3092\u56de\u6587\u6570\u3068\u3044\u3046. 2\u6841\u306e\u6570\u306e\u7a4d\u3067\u8868\u3055\u308c\u308b\u56de\u6587\u6570\u306e\u3046\u3061, \u6700\u5927\u306e\u3082\u306e\u306f 9009 = 91 \u00d7 99 \u3067\u3042\u308b.\n>\n>\u3067\u306f, 3\u6841\u306e\u6570\u306e\u7a4d\u3067\u8868\u3055\u308c\u308b\u56de\u6587\u6570\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u3088.\n\n\u306a\u308b\u307b\u3069\u301c\u3001\u3053\u308c\u306f\u3072\u3068\u3051\u305f\u305a\u3064\u53d6\u308a\u51fa\u3057\u3066\u9006\u9806\u306b\u3057\u3066\u3044\u3063\u305f\u3082\u306e\u304c\u5143\u306e\u6570\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3067\u5224\u5b9a\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u306e\u3067\u305d\u306e\u65b9\u91dd\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u305d\u308c\u304c\u4ee5\u4e0b\n\n```d\nimport std.algorithm,\n       std.random,\n       std.range,\n       std.stdio;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  (M =>\n    (N =>\n     (cond => \n        M.map!(m => N.map!(n => m * n)).join.filter!(x => cond(x)).array.sort!\"a>b\".array[0]\n      )((ulong number) => \n        (condSub =>\n          condSub(number, 0, 0, number)\n        )(Z((bool delegate(ulong, ulong, ulong, ulong) condSub, ulong number, ulong remaind, ulong reverse, ulong tmp) =>\n            (remaind =>\n              (reverse =>\n                (tmp =>\n                  tmp != 0 ? condSub(number, remaind, reverse, tmp) : reverse == number\n                )(tmp / 10)\n              )(reverse * 10 + remaind)\n            )(tmp % 10)\n          ))\n      )\n    )(100.iota(1000))\n  )(100.iota(1000)).writeln;\n}\n```\n\n\u307e\u30fc\u3001\u3053\u3046\u306a\u308a\u307e\u3059\u3002\u30dd\u30a4\u30f3\u30c8\u306f`mod 10`\u3067\u6841\u3092\u3068\u308a\u3060\u3059\u3001\u3050\u3089\u3044\u3067\u3059\u304b\u306d\u3002\n\n\u305d\u308c\u3067\u306f\u4eca\u56de\u306e\u6700\u5f8c\u306b\u53c2\u308a\u307e\u3057\u3087\u3046\n\n\n#Problem 5\n>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n>\n>What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n\n\u65e5\u672c\u8a9e\u8a33\n\n>2520 \u306f 1 \u304b\u3089 10 \u306e\u6570\u5b57\u306e\u5168\u3066\u306e\u6574\u6570\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u3067\u3042\u308a, \u305d\u306e\u3088\u3046\u306a\u6570\u5b57\u306e\u4e2d\u3067\u306f\u6700\u5c0f\u306e\u5024\u3067\u3042\u308b.\n>\n>\u3067\u306f, 1 \u304b\u3089 20 \u307e\u3067\u306e\u6574\u6570\u5168\u3066\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u306e\u4e2d\u3067\u6700\u5c0f\u306e\u6b63\u306e\u6570\u306f\u3044\u304f\u3089\u306b\u306a\u308b\u304b.\n\n\u306a\u308b\u307b\u3069\u3001\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308c\u3070\u3044\u3044\u3063\u307d\u3044\u3067\u3059\u306d\u3002\n`lcm`\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3042\u3068\u306f\u305d\u308c\u3092\u7528\u3044\u3066`foldl1(D\u8a00\u8a9e\u3067\u306freduce)`\u306b\u6e21\u305b\u3070\u89e3\u304c\u5f97\u3089\u308c\u305d\u3046\u3067\u3059\u306d\u3002\n`lcm`\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u3001`gcd`\u3082\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u3059\u3079\u3066\u3092\u5b9f\u88c5\u3057\u3001\u89e3\u7b54\u306b\u7528\u3044\u305f\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\n\n```d\nimport std.algorithm,\n       std.random,\n       std.range,\n       std.stdio;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  (N =>\n    (gcd => \n      (lcm =>\n        1.iota(N).reduce!((a, b) => lcm(b, a))\n      )((int a, int b) => a * b / gcd(a, b))\n    )(Z((int delegate(int, int) gcd, int a, int b) => b ? gcd(b, a%b) : a < 0 ? a * -1 : a))\n  )(20).writeln;\n}\n```\n\n\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u3059\u306d\u301c\n\u3053\u308c\u306f\u5358\u7d14\u306b1~20\u306e\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b\u3060\u3051\u3067\u3059\u3002\u3068\u3044\u3046\u306e\u3082\u3001\n1 \u304b\u3089 20 \u307e\u3067\u306e\u6574\u6570\u5168\u3066\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u306e\u4e2d\u3067\u6700\u5c0f\u306e\u6b63\u306e\u6570 \u21d4 1\u304b\u308920\u307e\u3067\u306e\u5404\u6570\u306e\u6700\u5c0f\u516c\u500d\u6570\n\u3068\u306a\u308b\u304b\u3089\u3067\u3059\u3002\n\n\n\n#\u307e\u3068\u3081\n\u4ee5\u4e0a\u3067D\u8a00\u8a9e\u3067\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u3067`Project Euler`\u306e`Problem 1`\u304b\u3089`Problem 5`\u3092\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nD\u8a00\u8a9e\u306f`C/C++`\u306b\u4ee3\u8868\u3055\u308c\u308b\u624b\u7d9a\u304d\u5f62\u306e\u3088\u3046\u306b\u3082\u66f8\u304f\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3057\u3001\u4e0a\u306b\u793a\u3057\u305f\u3088\u3046\u306b\u3082\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nD\u8a00\u8a9e\u306e\u8868\u73fe\u529b\u306e\u8c4a\u304b\u3055\u3092\u793a\u305b\u305f\u3067\u3057\u3087\u3046\u304b?\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3002\n\u6642\u9593(\u3068\u9700\u8981)\u304c\u3042\u308c\u3070\u3044\u305a\u308c`Problem 6`\u4ee5\u964d\u306b\u3064\u3044\u3066\u3082\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3059\n", "tags": ["dlang", "ProjectEuler", "D\u8a00\u8a9eLisp"]}