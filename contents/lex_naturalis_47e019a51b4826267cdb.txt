{"tags": ["\u60c5\u5f31", "Haskell"], "context": " More than 1 year has passed since last update.\uff08\u5143\u30cd\u30bf\u306f http://nabetani.sakura.ne.jp/hena/ord9nummake/ \uff09\n\u306a\u3093\u306e\u5de5\u592b\u3082\u306a\u304f\u6975\u304f\u57fa\u672c\u7684\u306a\u30ea\u30b9\u30c8\u64cd\u4f5c\u3092\u9023\u306d\u3066\u89e3\u304f\u3002\n\nConstructingNumbers.hs\n\nmodule Main where\nimport Control.Applicative\nimport System.Environment (getArgs)\nimport Data.List\n\n-- 6\u306e\u500b\u6570\u3068\u540c\u3058\u3060\u30519\u3092\u30ab\u30fc\u30c9\u306b\u8ffd\u52a0\u3057\u3066\u30014\u6841\u6570\u5b57\u5217\u3092\u69cb\u6210\u3057\n-- \u6700\u5f8c\u306b6\u30689\u306e\u500b\u6570\u304c\u5143\u3005\u306e\u500b\u6570\u4ee5\u4e0a\u306b\u306a\u308b\u3082\u306e\u3092\u9664\u53bb\uff08\u305f\u3060\u30576\u304c\u591a\u3044\u3068\u304b\u306a\u308a\u9045\u3044\uff09\nconstruct :: String -> [String]\nconstruct n =   nub $ sort $ filter check $ \n              filter ((/='0').head) $ map (take 4) $ permutations $\n              (++) n $ take num $ repeat '9'\n  where num = length $ filter (=='6') $ n\n        check = (<=num) . length . filter (\\x -> x=='6' || x=='9')\n\n-- \u81ea\u5206\u7528\u30e1\u30e2\n-- filter check $ filter ((/='0').head) \u3068\u3044\u3046\u9023\u9396\u304c\u6c17\u306b\u5165\u3089\u306a\u3044\u306a\u3089\u3070\n-- filter p . filter q \u306f filter (&&) <$> p <*> q \u3067\u3001(->)\u30d5\u30a1\u30f3\u30af\u30bf\u3067\u306f \n-- <$>\u306f(.)\u306b\u7b49\u4fa1\u306b\u306a\u308b\u304b\u3089\u3053\u308c\u306f\u3064\u307e\u308a filter ((&&).p <*> q)\u3068\u7b49\u4fa1\u3067\n-- \u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3066 filter ((&&).check<*>(/='0').head) \u3068\u3057\u3066\u3082\u3044\u3044\u3002\n-- \u307e\u3042\u3067\u3082\u3053\u308c\u306f(->)\u30a2\u30d7\u30ea\u30ab\u30c6\u30a3\u30f4\u30fb\u30d5\u30a1\u30f3\u30af\u30bf\u306e\u6feb\u7528\u3060\u3088\u306a\u2026\u2026\n\n\n-- \u5148\u306b4\u6841\u6570\u5b57\u5217\u3092\u69cb\u6210\u3057\u305f\u4e0a\u3067\u30016\u30929\u306b\u7f6e\u304d\u63db\u3048\u308b\uff086\u304c\u591a\u304f\u3066\u3082\u307e\u3042\u307e\u3042\u901f\u3044\uff09\n-- \u30a2\u30d7\u30ea\u30ab\u30c6\u30a3\u30f4\u30fb\u30d5\u30a1\u30f3\u30af\u30bf\u3068\u3057\u3066\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u306b\u306f\u3046\u3063\u3066\u3064\u3051\u306e\u4e8b\u4f8b\u3067\u306f\u3042\u308b\nconstruct2 :: String -> [String]\nconstruct2 = nub . sort . concat . map convert . nub .\n             filter ((/='0').head) . map (take 4) . permutations\n  where convert [] = [[]]\n        convert (s:ss) = case s of\n          '6' -> (:)<$>['6','9']<*>convert ss\n          _ -> (:)<$>[s]<*>convert ss\n\n\nsolve :: String -> String\nsolve str = \n  let result = construct2 digits\n      (num, digits) = parse str\n  in case length result >= num of\n       True -> result !! (num-1)\n       False -> \"-\"\n\nparse :: String -> (Int, String)\nparse str = (read n,tail d)\n  where (n, d) = break (==':') str\n\n-- \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u89e3\u7b54\u3092\u51fa\u529b\nmain = solve<$>concat<$>getArgs >>= putStrLn\n\n\n\n\n\uff08\u5143\u30cd\u30bf\u306f http://nabetani.sakura.ne.jp/hena/ord9nummake/ \uff09\n\n\u306a\u3093\u306e\u5de5\u592b\u3082\u306a\u304f\u6975\u304f\u57fa\u672c\u7684\u306a\u30ea\u30b9\u30c8\u64cd\u4f5c\u3092\u9023\u306d\u3066\u89e3\u304f\u3002\n\n```hs:ConstructingNumbers.hs\n\nmodule Main where\nimport Control.Applicative\nimport System.Environment (getArgs)\nimport Data.List\n\n-- 6\u306e\u500b\u6570\u3068\u540c\u3058\u3060\u30519\u3092\u30ab\u30fc\u30c9\u306b\u8ffd\u52a0\u3057\u3066\u30014\u6841\u6570\u5b57\u5217\u3092\u69cb\u6210\u3057\n-- \u6700\u5f8c\u306b6\u30689\u306e\u500b\u6570\u304c\u5143\u3005\u306e\u500b\u6570\u4ee5\u4e0a\u306b\u306a\u308b\u3082\u306e\u3092\u9664\u53bb\uff08\u305f\u3060\u30576\u304c\u591a\u3044\u3068\u304b\u306a\u308a\u9045\u3044\uff09\nconstruct :: String -> [String]\nconstruct n =   nub $ sort $ filter check $ \n              filter ((/='0').head) $ map (take 4) $ permutations $\n              (++) n $ take num $ repeat '9'\n  where num = length $ filter (=='6') $ n\n        check = (<=num) . length . filter (\\x -> x=='6' || x=='9')\n\n-- \u81ea\u5206\u7528\u30e1\u30e2\n-- filter check $ filter ((/='0').head) \u3068\u3044\u3046\u9023\u9396\u304c\u6c17\u306b\u5165\u3089\u306a\u3044\u306a\u3089\u3070\n-- filter p . filter q \u306f filter (&&) <$> p <*> q \u3067\u3001(->)\u30d5\u30a1\u30f3\u30af\u30bf\u3067\u306f \n-- <$>\u306f(.)\u306b\u7b49\u4fa1\u306b\u306a\u308b\u304b\u3089\u3053\u308c\u306f\u3064\u307e\u308a filter ((&&).p <*> q)\u3068\u7b49\u4fa1\u3067\n-- \u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3066 filter ((&&).check<*>(/='0').head) \u3068\u3057\u3066\u3082\u3044\u3044\u3002\n-- \u307e\u3042\u3067\u3082\u3053\u308c\u306f(->)\u30a2\u30d7\u30ea\u30ab\u30c6\u30a3\u30f4\u30fb\u30d5\u30a1\u30f3\u30af\u30bf\u306e\u6feb\u7528\u3060\u3088\u306a\u2026\u2026\n\n\n-- \u5148\u306b4\u6841\u6570\u5b57\u5217\u3092\u69cb\u6210\u3057\u305f\u4e0a\u3067\u30016\u30929\u306b\u7f6e\u304d\u63db\u3048\u308b\uff086\u304c\u591a\u304f\u3066\u3082\u307e\u3042\u307e\u3042\u901f\u3044\uff09\n-- \u30a2\u30d7\u30ea\u30ab\u30c6\u30a3\u30f4\u30fb\u30d5\u30a1\u30f3\u30af\u30bf\u3068\u3057\u3066\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u306b\u306f\u3046\u3063\u3066\u3064\u3051\u306e\u4e8b\u4f8b\u3067\u306f\u3042\u308b\nconstruct2 :: String -> [String]\nconstruct2 = nub . sort . concat . map convert . nub .\n             filter ((/='0').head) . map (take 4) . permutations\n  where convert [] = [[]]\n        convert (s:ss) = case s of\n          '6' -> (:)<$>['6','9']<*>convert ss\n          _ -> (:)<$>[s]<*>convert ss\n\n\nsolve :: String -> String\nsolve str = \n  let result = construct2 digits\n      (num, digits) = parse str\n  in case length result >= num of\n       True -> result !! (num-1)\n       False -> \"-\"\n\nparse :: String -> (Int, String)\nparse str = (read n,tail d)\n  where (n, d) = break (==':') str\n\n-- \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u89e3\u7b54\u3092\u51fa\u529b\nmain = solve<$>concat<$>getArgs >>= putStrLn\n\n```\n"}