{"context": " More than 1 year has passed since last update.\u53bb\u308b 12 \u6708 3 \u65e5\u3001\u3064\u3044\u306b Swift \u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306b\u306a\u308a\u307e\u3057\u305f\uff01\uff01\n\u50d5\u306f\u3001\u4eca\u5ea6 try! Swift \u3067 Swift \u306b\u3064\u3044\u3066\u8a71\u3059\u4e88\u5b9a\u306a\u3093\u3067\u3059\u304c\u3001 Swift \u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306b\u306a\u3063\u305f\u304b\u3089\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u4e2d\u8eab\u307e\u3067\u898b\u3066\u8a3c\u62e0\u3092\u63b4\u3093\u3060\u4e0a\u3067\u8a71\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\u305d\u3093\u306a\u308f\u3051\u3067\u65e9\u901f\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3082\u3046\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u76ee\u7684\u306a\u304f\u6f2b\u7136\u3068\u8aad\u3080\u306e\u3082\u8f9b\u3044\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u52c9\u5f37\u304c\u3066\u3089 Swift \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u9020\u3057\u3066\u524d\u304b\u3089\u307b\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u305f\u69cb\u6587\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\uff08 \u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3053\u3061\u3089 \uff09\u3002\n\u6539\u9020\u306e\u5185\u5bb9\u306f\u6b21\u306e\u4e8c\u3064\u3067\u3059\u3002\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b Either<L, R> \u3068\u3044\u3046\u578b\u3092\u8ffd\u52a0\n\nEither<L, R> \u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc L|R \u3092\u8ffd\u52a0\n\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n// Int|String \u306f Either<Int, String> \u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\nlet e: Int|String = .Left(42)\n\nswitch e {\ncase let .Left(left):\n    print(\"left: \\(left)\")\ncase let.Right(right):\n    print(\"right: \\(right)\")\n}\n\n\u3053\u308c\u306f\u3001 \"Swift 3.0\u3067\u8ffd\u52a0\u3055\u308c\u305d\u3046\u306aEither\u306b\u3064\u3044\u3066\" \u3067\u3001 Either \u306b\u3064\u3044\u3066\u8a00\u8a9e\u30ec\u30d9\u30eb\u3067\u3053\u3093\u306a\u30b5\u30dd\u30fc\u30c8\u304c\u3042\u308c\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u8ff0\u3079\u305f\u3082\u306e\u306e\u4e00\u90e8\u3092\u3001\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u6295\u7a3f\u3092\u8aad\u3081\u3070\u3001\u6b21\u306e\u4e8c\u3064\u306e\u3053\u3068\u3092\u5b66\u3079\u307e\u3059\u3002\n\nSwift \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6539\u9020\u3057\u3066\u72ec\u81ea\u306e\u578b\u3084\u95a2\u6570\u3001\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\nSwift \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u9020\u3057\u3066\u72ec\u81ea\u69cb\u6587\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\n\n\u524d\u8005\u306b\u95a2\u3057\u3066\u306f\u3068\u3066\u3082\u7c21\u5358\u306a\u306e\u3067\u5b8c\u74a7\u306b\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u5f8c\u8005\u306b\u3064\u3044\u3066\u306f\u3001\u3068\u3066\u3082\u3053\u306e\u6295\u7a3f\u3092\u8aad\u3093\u3060\u304b\u3089\u3068\u3044\u3063\u3066\u5b8c\u74a7\u306b\u628a\u63e1\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3069\u3093\u306a\u69cb\u6587\u3092\u8ffd\u52a0\u3059\u308b\u304b\u306b\u3082\u3088\u308a\u307e\u3059\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u4e2d\u8eab\u3092\u9685\u3005\u307e\u3067\u7406\u89e3\u3059\u308b\u306e\u306f\u307b\u307c\u4e0d\u53ef\u80fd\u3067\u3059\u3002\u3068\u306f\u3044\u3048\u3001\u4f55\u306e\u624b\u304c\u304b\u308a\u3082\u306a\u3044\u3068\u3053\u308d\u304b\u3089\u69cb\u6587\u3092\u62e1\u5f35\u3059\u308b\u306e\u306f\u306a\u304b\u306a\u304b\u5927\u5909\u306a\u306e\u3067\u3001\u3069\u3046\u3044\u3046\u98a8\u306b\u3084\u308c\u3070\u3044\u3044\u304b\u3068\u3044\u3046\u96f0\u56f2\u6c17\u304c\u4f1d\u308f\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b Either \u3068\u3044\u3046\u578b\u3092\u8ffd\u52a0\n\u3053\u308c\u306f Swift \u306e\u7bc4\u56f2\u5185\u306a\u306e\u3067\u8a71\u306f\u7c21\u5358\u3067\u3059\u3002\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30b3\u30fc\u30c9\u306f apple/swift \u306e stdlib/public/core \u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002 Optional.swift \u306a\u3069\u3082\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u306b Either.swift \u3092\u4f5c\u3063\u3066\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\u4e2d\u8eab\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f Either \u3068\u3044\u3046\u578b\u3055\u3048\u3042\u308c\u3070\u3044\u3044\u306e\u3067\u3001\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u306f\u4f5c\u3089\u305a\u2193\u3060\u3051\u3068\u3057\u307e\u3059\u3002\npublic enum Either<L, R> {\n    case Left(L)\n    case Right(R)\n}\n\n\u3053\u308c\u3060\u3051\u3067 OK \u3068\u8a00\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001 \u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u306f\u30d3\u30eb\u30c9\u5bfe\u8c61\u3068\u306a\u308a\u307e\u305b\u3093\u3002  stdlib/public/core/CMakeLists.txt \u306b Either.swift \u3092\u8ffd\u52a0\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u3067\u4e26\u3093\u3067\u3044\u308b\u306e\u3067\u2193\u306e\u3088\u3046\u306b\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n...\nContiguousArrayBuffer.swift\nEither.swift\nEmptyCollection.swift\n...\n\n\u3053\u308c\u3067\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b Either \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u4f55\u3082 import \u3057\u306a\u304f\u3066\u3082\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u3002\nlet e: Either<Int, String> = .Left(42)\n\nswitch e {\ncase let .Left(left):\n    print(\"left: \\(left)\")\ncase let.Right(right):\n    print(\"right: \\(right)\")\n}\n\n\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\nleft: 42\n\n\nEither<L, R> \u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc L|R \u3092\u8ffd\u52a0\n\u3055\u3066\u3001\u96e3\u3057\u3044\u306e\u306f\u3053\u3053\u304b\u3089\u3067\u3059\u3002\nSwift \u306b\u304a\u3044\u3066\u3001 Optional \u3092\u4f7f\u3063\u3066\u30a8\u30e9\u30fc\u3092\u6271\u3046\u3068\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u3002\u3057\u304b\u3057 Optional \u306f\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u4fdd\u6301\u3067\u304d\u306a\u3044\u306e\u304c\u8f9b\u3044\u306e\u3067\u3001\u4ee3\u308f\u308a\u306b Either \u3092\u4f7f\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u3002\u3067\u3059\u304c\u3001 Optional \u306b\u306f Int? \u306e\u3088\u3046\u306a\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3084 Optional Chaining \u306a\u3069\u306e\u4fbf\u5229\u306a\u69cb\u6587\u304c\u3042\u308b\u306e\u306b\u5bfe\u3057\u3001 Either \u306f\u81ea\u4f5c\u3057\u305f\u578b\u306a\u306e\u3067\u4f55\u306e\u30b5\u30dd\u30fc\u30c8\u3082\u3042\u308a\u307e\u305b\u3093\u3002 Optional \u306e\u4ee3\u308f\u308a\u306b Either \u3092\u4f7f\u3046\u3068\u30b3\u30fc\u30c9\u4e2d\u3067\u4f7f\u3044\u307e\u304f\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u305d\u306e\u3088\u3046\u306a\u69cb\u6587\u304c\u306a\u3044\u306e\u306f\u8f9b\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001 Foo? \u304c Optional<Foo> \u3092\u8868\u3059\u3088\u3046\u306b\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u4e2d\u306e\u30d1\u30fc\u30b5\u3092\u6539\u9020\u3057\u3066 Foo|Bar \u3068\u66f8\u3051\u3070 Either<Foo, Bar> \u3092\u8868\u3059\u3088\u3046\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u69cb\u6587\u306f  TypeScript \u3084 Ceylon \u306e Union type \u306b\u4f3c\u305b\u305f\u3082\u306e\u3067\u3059\u3002\n\u30b3\u30f3\u30d1\u30a4\u30e9\u95a2\u9023\u306e\u30b3\u30fc\u30c9\u306f lib \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4e0b\u306b\u3042\u308a\u307e\u3059\uff08\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u306f include/swift \uff09\u3002 lib \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3055\u3089\u306b\u3044\u304f\u3064\u304b\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\nParse: \u5b57\u53e5\u89e3\u6790\u3001\u69cb\u6587\u89e3\u6790\u95a2\u9023\nAST: \u62bd\u8c61\u69cb\u6587\u6728\u95a2\u9023\nSema: \u610f\u5473\u89e3\u6790\u95a2\u9023\nSIL: Swift \u306e\u4e2d\u9593\u8a00\u8a9e\uff08 Swift Intermediate language \uff09\u95a2\u9023\n\n\u4eca\u56de\u95a2\u9023\u3059\u308b\u306e\u306f Parse \u3068\u3001 Parse \u306e\u4e2d\u306e\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u904e\u7a0b\u3067 AST \u306e\u4e2d\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u304f\u3089\u3044\u3067\u3059\u3002\n\n\u65b9\u91dd\n\u4eca\u56de\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u69cb\u6587\u89e3\u6790\u3092\u6539\u9020\u3057\u3066\u52d5\u4f5c\u3092\u5909\u66f4\u3067\u304d\u308b\u304b\u8a66\u3059\u306e\u3068\u3001\u305d\u306e\u904e\u7a0b\u3067\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u3053\u3068\u3067\u5168\u4f53\u69cb\u9020\u3092\u304a\u307c\u308d\u3052\u306b\u3082\u3064\u304b\u3080\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\u3001\u53b3\u5bc6\u306b\u6b63\u3057\u3044\u5b9f\u88c5\u306f\u76ee\u6307\u3057\u307e\u305b\u3093\u3002\n\u307e\u305a\u3001 Foo|Bar \u3092\u6b63\u78ba\u306b\u5199\u3057\u3068\u3063\u305f\u62bd\u8c61\u69cb\u6587\u6728\u3092\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u3001 Either \u306e\u69cb\u6587\u306b\u5bfe\u5fdc\u3057\u305f\u30ce\u30fc\u30c9\u3092\u62bd\u8c61\u69cb\u6587\u6728\u306b\u3082\u52a0\u3048\u308b\u306a\u3069\u3001 AST \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30bd\u30fc\u30b9\u306b\u3082\u8272\u3005\u3068\u4fee\u6b63\u3092\u52a0\u3048\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u4eca\u56de\u306f\u3001 Foo|Bar \u3092\u30d1\u30fc\u30b9\u3059\u308b\u3068 Either<Foo, Bar> \u306e\u62bd\u8c61\u69cb\u6587\u6728\u3092\u5410\u304d\u51fa\u3059\u3088\u3046\u306b\u3057\u3066\u8aa4\u9b54\u5316\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u672c\u6765\u306f (Foo|Bar)|Baz \u304c Either<Either<Foo, Bar>, Baz> \u3068\u89e3\u91c8\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3067\u3059\u304c\u3001\u62ec\u5f27\u3092\u8003\u3048\u59cb\u3081\u308b\u3068\u30bf\u30d7\u30eb\u3068\u7af6\u5408\u3059\u308b\u306a\u3069\u3068\u3066\u3082\u8907\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u4eca\u56de\u306f\u62ec\u5f27\u3092\u6271\u3044\u307e\u305b\u3093\u3002\n\u6700\u5f8c\u306b\u3001 Either \u3067\u306f Optional \u306e\u3088\u3046\u306b let a: Optional<Int> = 42 \u306e\u3088\u3046\u306a\u6697\u9ed9\u306e\u578b\u5909\u63db\u3082\u3057\u304f\u306f\u30b5\u30d6\u30bf\u30a4\u30d4\u30f3\u30b0\u3092\u5b9f\u73fe\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u3053\u308c\u3082\u4eca\u56de\u306f\u6271\u3044\u307e\u305b\u3093\u3002\u3042\u304f\u307e\u3067\u3001\u578b\u3068\u3057\u3066 Foo|Bar \u306e\u3088\u3046\u306b\u66f8\u304f\u3068 Either<Foo, Bar> \u3068\u89e3\u91c8\u3055\u308c\u308b\u3053\u3068\u3060\u3051\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\n\u30d1\u30fc\u30b5\u306e\u4fee\u6b63\n\u4eca\u56de\u3084\u308b\u306e\u306f\u578b\u306e\u30d1\u30fc\u30b9\u3067\u3059\u3002 lib/Parse \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u3092\u6f01\u3063\u3066\u308b\u3068 ParseType.cpp \u3068\u3044\u3046\u307e\u3055\u306b\u30c9\u30f3\u30d4\u30b7\u30e3\u3063\u307d\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3057\u305f\u3002\nEither \u306f Optional \u306b\u8fd1\u3044\u306e\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u3066 \"Optional\" \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u691c\u7d22\u3057\u3066\u307f\u307e\u3059\u3002\n\nparseTypeSimple\u306e\u5909\u66f4\n\u95a2\u9023\u3057\u305d\u3046\u306a\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u308b\u3068\u3001 parseTypeSimple \u3068\u3044\u3046\u95a2\u6570\u304c\u5927\u5143\u306b\u306a\u3063\u3066\u305d\u3046\u3067\u3059\u3002\nParserResult<TypeRepr> Parser::parseTypeSimple(Diag<> MessageID,\n                                                 bool HandleCodeCompletion) {\n    ...\n      if (isOptionalToken(Tok)) {\n        ty = parseTypeOptional(ty.get());\n        continue;\n      }\n      if (isImplicitlyUnwrappedOptionalToken(Tok)) {\n        ty = parseTypeImplicitlyUnwrappedOptional(ty.get());\n        continue;\n      }\n\n\u4e0b\u306e\u3088\u3046\u306b\u3001 Either \u7528\u306e\u30b3\u30fc\u30c9\u3082\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\nParserResult<TypeRepr> Parser::parseTypeSimple(Diag<> MessageID,\n                                                 bool HandleCodeCompletion) {\n    ...\n      if (isOptionalToken(Tok)) {\n        ty = parseTypeOptional(ty.get());\n        continue;\n      }\n      if (isImplicitlyUnwrappedOptionalToken(Tok)) {\n        ty = parseTypeImplicitlyUnwrappedOptional(ty.get());\n        continue;\n      }\n      if (isEitherToken(Tok)) {\n        ty = parseTypeEither(ty.get());\n        continue;\n      }\n\n\u3053\u308c\u3067\u3001 isEitherToken \u3068 parseTypeEither \u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3057\u305f\u3002\u305d\u308c\u305e\u308c\u3001 isOptionalToken \u3068 parseTypeOptional \u3092\u771f\u4f3c\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\n\nisEitherToken\u306e\u5b9f\u88c5\nisOptionalToken \u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nbool Parser::isOptionalToken(const Token &T) const {\n  // A postfix '?' by itself is obviously optional.\n  if (T.is(tok::question_postfix))\n    return true;\n\n  // A postfix or bound infix operator token that begins with '?' can be\n  // optional too. We'll munch off the '?', so long as it is left-bound with\n  // the type (i.e., parsed as a postfix or unspaced binary operator).\n  if ((T.is(tok::oper_postfix) || T.is(tok::oper_binary_unspaced)) &&\n      T.getText().startswith(\"?\"))\n    return true;\n  return false;\n}\n\n\u3069\u3046\u3084\u3089\u3001\u30c8\u30fc\u30af\u30f3\u306e\u7a2e\u985e\u3068\u6587\u5b57\u5217\u304c\u60f3\u5b9a\u901a\u308a\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002 tok \u306f include/swift/Parse/Token.h \u306b\u6b21\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nenum class tok {\n  unknown = 0,\n  eof,\n  code_complete,\n  identifier,\n  oper_binary_unspaced,   // \"x+y\"\n  oper_binary_spaced,     // \"x + y\"\n  oper_postfix,\n  oper_prefix,\n  dollarident,\n  integer_literal,\n  floating_literal,\n  string_literal,\n  sil_local_name,      // %42 in SIL mode.\n  pound_if,\n  pound_else,\n  pound_elseif,\n  pound_endif,\n  pound_line,\n  pound_available,\n  comment,\n\n#define KEYWORD(X) kw_ ## X,\n#define PUNCTUATOR(X, Y) X,\n#include \"swift/Parse/Tokens.def\"\n\n  NUM_TOKENS\n};\n\nquestion_postfix \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u304c\u3001 include \u3055\u308c\u305f Tokens.def \u306e\u4e2d\u306b\u3042\u308a\u307e\u3059\u3002\n\u3055\u3066\u3001\u4eca Foo|Bar \u306e\u3088\u3046\u306a\u578b\u3092\u30d1\u30fc\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u8a72\u5f53\u3057\u305d\u3046\u306a\u3082\u306e\u306f\u4e8c\u9805\u6f14\u7b97\u3092\u6271\u3063\u3066\u3044\u305d\u3046\u306a\u6b21\u306e\u4e8c\u3064\u3067\u3059\u3002\noper_binary_unspaced,   // \"x+y\"\noper_binary_spaced,     // \"x + y\"\n\nInt? \u3092 Int ? \u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001 Either \u3082\u305d\u308c\u3092\u306a\u3089\u3063\u3066 Foo | Bar \u306e\u3088\u3046\u306a\u8868\u8a18\u306f\u3067\u304d\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u3046\u3059\u308b\u3068 oper_binary_unspaced \u304c\u6b8b\u308a\u307e\u3059\u3002\nisOptionalToken \u3092\u771f\u4f3c\u3066 isEitherToken \u3092\u5b9f\u88c5\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\nbool Parser::isEitherToken(const Token &T) const {\n  if (T.is(tok::oper_binary_unspaced) && T.getText().startswith(\"|\"))\n    return true;\n  return false;\n}\n\n\nparseTypeEither\u306e\u5b9f\u88c5\nparseTypeEither \u3092\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u540c\u3058\u304f parseTypeOptional \u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u3087\u3046\u3002\nParserResult<OptionalTypeRepr> Parser::parseTypeOptional(TypeRepr *base) {\n  SourceLoc questionLoc = consumeOptionalToken();\n  return makeParserResult(new (Context) OptionalTypeRepr(base, questionLoc));\n}\n\n\u3069\u3046\u3084\u3089\u3001\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u307f\u3060\u3057\u3066\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3092\u5143\u306b\u62bd\u8c61\u69cb\u6587\u6728\u306e\u30ce\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002 grep \u3057\u3066\u8abf\u3079\u308b\u3068 OptionalTypeRepr \u306f AST \u306e\u4e2d\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u65b9\u91dd\u3067\u6c7a\u3081\u305f\u901a\u308a EitherTypeRepr \u3092\u5b9f\u88c5\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u69cb\u6587\u6728\u306b\u7f6e\u304d\u63db\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u5bfe\u51e6\u3057\u307e\u3059\u3002\nAST \u306e\u4e2d\u3092\u63a2\u3057\u3066\u3044\u308b\u3068\u3001 GenericIdentTypeRepr \u3068\u3044\u3046\u305d\u308c\u3063\u307d\u3044\u30af\u30e9\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\nGenericIdentTypeRepr \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u4f7f\u3044\u65b9\u306f\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u30d1\u30fc\u30b9\u3057\u3066\u308b\u7b87\u6240\u3092\u771f\u4f3c\u3057\u307e\u3057\u3087\u3046\u3002\nSourceLoc LAngle, RAngle;\n SmallVector<TypeRepr*, 8> GenericArgs;\n if (startsWithLess(Tok)) {\n   if (parseGenericArguments(GenericArgs, LAngle, RAngle))\n     return nullptr;\n }\n EndLoc = Loc;\n\n ComponentIdentTypeRepr *CompT;\n if (!GenericArgs.empty())\n   CompT = new (Context) GenericIdentTypeRepr(Loc, Name,\n                                        Context.AllocateCopy(GenericArgs),\n                                        SourceRange(LAngle, RAngle));\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b\u306f\u6b21\u306e\u3082\u306e\u3092\u6e21\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u7b2c\u4e00\u5f15\u6570: \u30c8\u30fc\u30af\u30f3\u306e\u4f4d\u7f6e\n\u7b2c\u4e8c\u5f15\u6570: \u578b\u306e\u540d\u524d\uff08\u4eca\u56de\u306f Either \u306b\u3057\u305f\u3044\uff09\n\u7b2c\u4e09\u5f15\u6570: \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\n\u7b2c\u56db\u5f15\u6570: \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e < \u304b\u3089 > \u307e\u3067\u306e\u4f4d\u7f6e\u306e\u7bc4\u56f2\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3068\u308a\u3042\u3048\u305a | \u306e\u4f4d\u7f6e\u3092\u6e21\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n// \u7b2c\u4e00\u5f15\u6570\u306b\u6e21\u3059\u5024\nSourceLoc verticalLoc = consumeEitherToken();\n\n\u7b2c\u4e8c\u5f15\u6570\u306f \"Either\" \u3092\u6e21\u305b\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u3001\u5f15\u6570\u306e\u578b\u304c Identifier \u3067\u3059\u3002\u3057\u304b\u3082\u3001 Identifier \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u96a0\u853d\u3055\u308c\u3066\u3066\u3001\u76f4\u63a5\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u7121\u7406\u3084\u308a\u516c\u958b\u3057\u3066\u547c\u3093\u3067\u307f\u307e\u3057\u305f\u304c\u3001\u69cb\u6587\u6728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u306a\u3044\u6587\u5b57\u5217\u3060\u3063\u305f\u305f\u3081\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nIdentifier \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u3088\u304f\u898b\u308b\u3068\u3001\u30b3\u30e1\u30f3\u30c8\u3067\u6b21\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3057\u305f\u3002\nclass Identifier {\n  ...\n\n  /// Constructor, only accessible by ASTContext, which handles the uniquing.\n  explicit Identifier(const char *Ptr) : Pointer(Ptr) {}\n\n\u3069\u3046\u3084\u3089 ASTContext \u3092\u4f7f\u3048\u3070\u826f\u3044\u3088\u3046\u3067\u3059\u3002 ASTContext \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6f01\u308b\u3068\u3001 getIdentifier \u3068\u3044\u3046\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u6587\u5b57\u5217\u3092\u767b\u9332\u3057\u3066 Identifier \u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\u5143\u306b\u623b\u3063\u3066 ParseType.cpp \u306e\u4e2d\u3092\u691c\u7d22\u3059\u308b\u3068\u3001 Context.getIdentifier(\"...\") \u306e\u3088\u3046\u306a\u5f62\u3067\u4f7f\u3063\u3066\u3044\u308b\u7b87\u6240\u3092\u767a\u898b\u3057\u307e\u3057\u305f\u3002\u591a\u5206 Context \u304c Parser \u306e\u30e1\u30f3\u30d0\u5909\u6570\u306a\u306e\u3067\u3057\u3087\u3046\u3002\u3053\u308c\u3092\u771f\u4f3c\u3066\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n// \u7b2c\u4e8c\u5f15\u6570\u306b\u6e21\u3059\u5024\nContext.getIdentifier(\"Either\")\n\n\u7b2c\u4e09\u5f15\u6570\u306b\u306f\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u578b\u306e\u30d1\u30fc\u30b9\u3067\u306f Context.AllocateCopy(GenericArgs) \u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3001 GenericArgs \u306e\u30b3\u30d4\u30fc\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u306e GenericArgs \u306f SmallVector<TypeRepr*, 8> GenericArgs; \u3068\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u3001 Either \u3067\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4e8c\u3064\u3042\u308c\u3070\u3044\u3044\u306e\u3067\u3001\u304a\u305d\u3089\u304f\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\nSmallVector<TypeRepr*, 2> GenericArgs;\n\nSmallVector \u306e\u4f7f\u3044\u65b9\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001 grep \u3059\u308b\u3068 push_back \u30e1\u30bd\u30c3\u30c9\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u4eca\u3001 Foo|Bar \u306e Foo \u3068 Bar \u3092\u8ffd\u52a0\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u3002 parseTypeEither \u306f parseTypeOptional \u540c\u69d8\u306b\u5f15\u6570\u3067 TypeRepr * \u3092\u53d7\u3051\u3066\u3044\u307e\u3059\u3002\u304a\u305d\u3089\u304f parseTypeOptional \u304c\u53d7\u3051\u3066\u3044\u308b\u306e\u306f Foo? \u306e\u3068\u304d\u306e Foo \u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3059\u308b\u3068\u3001 parseTypeEither \u3067\u306f GenericArgs \u306b\u3053\u308c\u3092\u8ffd\u52a0\u3057\u3066\u3084\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\nSmallVector<TypeRepr*, 2> GenericArgs;\nGenericArgs.push_back(base);\n\nFoo|Bar \u306e Bar \u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u3067\u3057\u3087\u3046\uff1f\u6700\u521d\u306b SourceLoc verticalLoc = consumeEitherToken(); \u3067\u30c8\u30fc\u30af\u30f3\u3092\u6d88\u8cbb\u3057\u305f\u306e\u3067\u3001\u540d\u524d\u304b\u3089\u3057\u3066\u6b21\u306b parseTypeXxx \u3092\u547c\u3073\u51fa\u3059\u3068 | \u306e\u6b21\u304b\u3089\u30d1\u30fc\u30b9\u3057\u3066\u304f\u308c\u305d\u3046\u3067\u3059\u3002\u4eca\u3001 Foo|Bar \u306e Bar \u306e\u90e8\u5206\u306b\u306f\u3069\u3093\u306a\u578b\u3082\u6765\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u7279\u5b9a\u306e parseTypeXxx \u3067\u306f\u306a\u304f\u6700\u3082\u6c4e\u7528\u306a\u95a2\u6570\u3092\u4f7f\u3044\u305f\u3044\u3067\u3059\u3002\u63a2\u3059\u3068 parseType \u304c\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\nparseType \u306e\u623b\u308a\u5024\u306f ParserResult \u3067\u5305\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e2d\u8eab\u306e TypeRepr \u3092\u53d6\u308a\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3082\u3001\u9069\u5f53\u306b\u691c\u7d22\u3057\u305f\u3089\u3084\u308a\u65b9\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\nSmallVector<TypeRepr*, 2> GenericArgs;\nGenericArgs.push_back(base);\nGenericArgs.push_back(parseType().get());\n\n// \u7b2c\u4e09\u5f15\u6570\u306b\u6e21\u3059\u5024\nContext.AllocateCopy(GenericArgs)\n\n\u3055\u3066\u3001\u3042\u3068\u306f\u7b2c\u56db\u5f15\u6570\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u306f\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e < \u3068 > \u306e\u4f4d\u7f6e\u3067\u3057\u305f\u304c\u3001\u91cd\u8981\u3067\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u4eca\u306f | \u306e\u4f4d\u7f6e\u3092\u6e21\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n// \u7b2c\u56db\u5f15\u6570\u306b\u6e21\u3059\u5024\nSourceRange(verticalLoc, verticalLoc)\n\nconsumeOptionalToken \u306b\u5bfe\u5fdc\u3057\u305f consumeEitherToken \u306f\u5f8c\u3067\u4f5c\u308b\u3068\u3057\u3066\u3001\u3053\u308c\u307e\u3067\u3092\u307e\u3068\u3081\u308b\u3068 parseTypeEither \u306f\u6b21\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\nParserResult<GenericIdentTypeRepr> Parser::parseTypeEither(TypeRepr *base) {\n  SourceLoc verticalLoc = consumeEitherToken();\n  SmallVector<TypeRepr*, 2> GenericArgs;\n  GenericArgs.push_back(base);\n  GenericArgs.push_back(parseType().get());\n  return makeParserResult(new (Context) GenericIdentTypeRepr(verticalLoc,\n                                          Context.getIdentifier(\"Either\"),\n                                          Context.AllocateCopy(GenericArgs),\n                                          SourceRange(verticalLoc, verticalLoc)));\n}\n\n\nconsumeEitherToken\u306e\u5b9f\u88c5\nconsumeOptionalToken \u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nSourceLoc Parser::consumeOptionalToken() {\n  assert(isOptionalToken(Tok) && \"not a '?' token?!\");\n  return consumeStartingCharacterOfCurrentToken();\n}\n\nconsumeEitherToken \u3092\u4f5c\u308b\u306e\u306f\u771f\u4f3c\u3059\u308c\u3070\u7c21\u5358\u305d\u3046\u3067\u3059\u3002\nSourceLoc Parser::consumeEitherToken() {\n  assert(isEitherToken(Tok) && \"not a '|' token?!\");\n  return consumeStartingCharacterOfCurrentToken();\n}\n\n\n\u30d3\u30eb\u30c9\u3068\u5b9f\u884c\n\u3055\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4fee\u6b63\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\napple/swift \u306e\u30d3\u30eb\u30c9\u3068\u5b9f\u884c\u306b\u306f\u2193\u306e\u6295\u7a3f\u304c\u5f79\u306b\u7acb\u3061\u307e\u3057\u305f\u3002\n\n\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306b\u306a\u3063\u305fSwift\u3092\u30d3\u30eb\u30c9\u3057\u3066\u307f\u308b\nSwift\u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3055\u308c\u305f\u306e\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30e1\u30bd\u30c3\u30c9\u8ffd\u52a0\u3057\u3066\u307f\u308b\n\n\u30d3\u30eb\u30c9\u304c\u3067\u304d\u305f\u3089\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u3088\u3046\u306a either.swift \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\nlet e: Int|String = .Left(42)\n\nswitch e {\ncase let .Left(left):\n    print(\"left: \\(left)\")\ncase let.Right(right):\n    print(\"right: \\(right)\")\n}\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\nleft: 42\n\n\u72ec\u81ea\u306e\u69cb\u6587 Int|String \u304c\u3061\u3083\u3093\u3068\u52d5\u304d\u307e\u3057\u305f\u306d\uff01\uff01\n\n\u307e\u3068\u3081\nSwift \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u9020\u3057\u3066\u72ec\u81ea\u306e\u69cb\u6587\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u69cb\u6587\u89e3\u6790\u3092\u4fee\u6b63\u3057\u3066\u65b0\u3057\u3044\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306b\u81ea\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u9020\u3059\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3053\u3068\u3067\u898b\u3048\u3066\u304f\u308b\u3053\u3068\u3082\u3042\u308b\u306f\u305a\u3067\u3059\u3002 Swift \u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3055\u308c\u3066\u3001\u3053\u308c\u304b\u3089 Swift 3.0 \u3092\u3069\u3093\u306a\u3082\u306e\u306b\u3059\u3079\u304d\u304b\u307f\u3093\u306a\u3067\u8a71\u3057\u5408\u304a\u3046\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001 Swift \u306f\u3053\u3046\u3042\u308b\u3079\u304d\u3060\u3001\u3053\u3053\u304c\u6c17\u306b\u5165\u3089\u306a\u3044\u3001\u3068\u601d\u3046\u3068\u3053\u308d\u306e\u3042\u308b\u4eba\u306f\u3001\u8b70\u8ad6\u3092\u6df1\u3081\u308b\u305f\u3081\u306b\u307e\u305a\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\uff08\u9593\u9055\u3063\u3066\u3082\u81ea\u5206\u3067\u6539\u9020\u3057\u305f\u3082\u306e\u3092\u3044\u304d\u306a\u308a\u30d7\u30eb\u30ea\u30af\u3067\u9001\u308a\u3064\u3051\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u3061\u3083\u3093\u3068\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u6307\u91dd\u306b\u6cbf\u3063\u3066\u884c\u52d5\u3057\u307e\u3057\u3087\u3046\u3002\uff09\n\u53bb\u308b 12 \u6708 3 \u65e5\u3001\u3064\u3044\u306b [Swift \u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306b\u306a\u308a\u307e\u3057\u305f](https://swift.org/)\uff01\uff01\n\n\u50d5\u306f\u3001\u4eca\u5ea6 [try! Swift](http://blog.kishikawakatsumi.com/entry/2015/12/02/193302) \u3067 Swift \u306b\u3064\u3044\u3066\u8a71\u3059\u4e88\u5b9a\u306a\u3093\u3067\u3059\u304c\u3001 Swift \u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306b\u306a\u3063\u305f\u304b\u3089\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u4e2d\u8eab\u307e\u3067\u898b\u3066\u8a3c\u62e0\u3092\u63b4\u3093\u3060\u4e0a\u3067\u8a71\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u3093\u306a\u308f\u3051\u3067\u65e9\u901f\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3082\u3046\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u76ee\u7684\u306a\u304f\u6f2b\u7136\u3068\u8aad\u3080\u306e\u3082\u8f9b\u3044\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u52c9\u5f37\u304c\u3066\u3089 Swift \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u9020\u3057\u3066\u524d\u304b\u3089\u307b\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u305f\u69cb\u6587\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\uff08 [\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3053\u3061\u3089](https://github.com/koher/swift-with-either) \uff09\u3002\n\n\u6539\u9020\u306e\u5185\u5bb9\u306f\u6b21\u306e\u4e8c\u3064\u3067\u3059\u3002\n\n- \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b `Either<L, R>` \u3068\u3044\u3046\u578b\u3092\u8ffd\u52a0\n- `Either<L, R>` \u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc `L|R` \u3092\u8ffd\u52a0\n\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```swift\n// Int|String \u306f Either<Int, String> \u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\nlet e: Int|String = .Left(42)\n\nswitch e {\ncase let .Left(left):\n    print(\"left: \\(left)\")\ncase let.Right(right):\n    print(\"right: \\(right)\")\n}\n```\n\n\u3053\u308c\u306f\u3001 [\"Swift 3.0\u3067\u8ffd\u52a0\u3055\u308c\u305d\u3046\u306aEither\u306b\u3064\u3044\u3066\"](http://qiita.com/koher/items/288f01cddb0bbb6aa4e1#either-%E3%81%AE%E8%A8%80%E8%AA%9E%E3%83%AC%E3%83%99%E3%83%AB%E3%81%A7%E3%81%AE%E7%89%B9%E5%88%A5%E3%81%AA%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88) \u3067\u3001 `Either` \u306b\u3064\u3044\u3066\u8a00\u8a9e\u30ec\u30d9\u30eb\u3067\u3053\u3093\u306a\u30b5\u30dd\u30fc\u30c8\u304c\u3042\u308c\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u8ff0\u3079\u305f\u3082\u306e\u306e\u4e00\u90e8\u3092\u3001\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u6295\u7a3f\u3092\u8aad\u3081\u3070\u3001\u6b21\u306e\u4e8c\u3064\u306e\u3053\u3068\u3092\u5b66\u3079\u307e\u3059\u3002\n\n- Swift \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6539\u9020\u3057\u3066\u72ec\u81ea\u306e\u578b\u3084\u95a2\u6570\u3001\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\n- Swift \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u9020\u3057\u3066\u72ec\u81ea\u69cb\u6587\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\n\n\u524d\u8005\u306b\u95a2\u3057\u3066\u306f\u3068\u3066\u3082\u7c21\u5358\u306a\u306e\u3067\u5b8c\u74a7\u306b\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u5f8c\u8005\u306b\u3064\u3044\u3066\u306f\u3001\u3068\u3066\u3082\u3053\u306e\u6295\u7a3f\u3092\u8aad\u3093\u3060\u304b\u3089\u3068\u3044\u3063\u3066\u5b8c\u74a7\u306b\u628a\u63e1\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3069\u3093\u306a\u69cb\u6587\u3092\u8ffd\u52a0\u3059\u308b\u304b\u306b\u3082\u3088\u308a\u307e\u3059\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u4e2d\u8eab\u3092\u9685\u3005\u307e\u3067\u7406\u89e3\u3059\u308b\u306e\u306f\u307b\u307c\u4e0d\u53ef\u80fd\u3067\u3059\u3002\u3068\u306f\u3044\u3048\u3001\u4f55\u306e\u624b\u304c\u304b\u308a\u3082\u306a\u3044\u3068\u3053\u308d\u304b\u3089\u69cb\u6587\u3092\u62e1\u5f35\u3059\u308b\u306e\u306f\u306a\u304b\u306a\u304b\u5927\u5909\u306a\u306e\u3067\u3001\u3069\u3046\u3044\u3046\u98a8\u306b\u3084\u308c\u3070\u3044\u3044\u304b\u3068\u3044\u3046\u96f0\u56f2\u6c17\u304c\u4f1d\u308f\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b Either<L, R> \u3068\u3044\u3046\u578b\u3092\u8ffd\u52a0\n\n\u3053\u308c\u306f Swift \u306e\u7bc4\u56f2\u5185\u306a\u306e\u3067\u8a71\u306f\u7c21\u5358\u3067\u3059\u3002\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30b3\u30fc\u30c9\u306f [apple/swift](https://github.com/apple/swift) \u306e stdlib/public/core \u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002 Optional.swift \u306a\u3069\u3082\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u306b Either.swift \u3092\u4f5c\u3063\u3066\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u4e2d\u8eab\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f `Either` \u3068\u3044\u3046\u578b\u3055\u3048\u3042\u308c\u3070\u3044\u3044\u306e\u3067\u3001\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u306f\u4f5c\u3089\u305a\u2193\u3060\u3051\u3068\u3057\u307e\u3059\u3002\n\n```swift\npublic enum Either<L, R> {\n    case Left(L)\n    case Right(R)\n}\n```\n\n\u3053\u308c\u3060\u3051\u3067 OK \u3068\u8a00\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001 __\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u306f\u30d3\u30eb\u30c9\u5bfe\u8c61\u3068\u306a\u308a\u307e\u305b\u3093__\u3002  stdlib/public/core/CMakeLists.txt \u306b Either.swift \u3092\u8ffd\u52a0\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u3067\u4e26\u3093\u3067\u3044\u308b\u306e\u3067\u2193\u306e\u3088\u3046\u306b\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n```\n...\nContiguousArrayBuffer.swift\nEither.swift\nEmptyCollection.swift\n...\n```\n\n\u3053\u308c\u3067\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b `Either` \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u4f55\u3082 `import` \u3057\u306a\u304f\u3066\u3082\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u3002\n\n```swift\nlet e: Either<Int, String> = .Left(42)\n\nswitch e {\ncase let .Left(left):\n    print(\"left: \\(left)\")\ncase let.Right(right):\n    print(\"right: \\(right)\")\n}\n```\n\n\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```\nleft: 42\n```\n\n## Either\\<L, R\\> \u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc L|R \u3092\u8ffd\u52a0\n\n\u3055\u3066\u3001\u96e3\u3057\u3044\u306e\u306f\u3053\u3053\u304b\u3089\u3067\u3059\u3002\n\nSwift \u306b\u304a\u3044\u3066\u3001 `Optional` \u3092\u4f7f\u3063\u3066\u30a8\u30e9\u30fc\u3092\u6271\u3046\u3068[\u3068\u3066\u3082\u4fbf\u5229](http://qiita.com/koher/items/c6f446bad54442a28bf4)\u3067\u3059\u3002\u3057\u304b\u3057 `Optional` \u306f\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u4fdd\u6301\u3067\u304d\u306a\u3044\u306e\u304c\u8f9b\u3044\u306e\u3067\u3001\u4ee3\u308f\u308a\u306b `Either` \u3092[\u4f7f\u3044\u305f\u304f\u306a\u308a\u307e\u3059](http://qiita.com/koher/items/288f01cddb0bbb6aa4e1#optional%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83)\u3002\u3067\u3059\u304c\u3001 `Optional` \u306b\u306f `Int?` \u306e\u3088\u3046\u306a\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3084 Optional Chaining \u306a\u3069\u306e\u4fbf\u5229\u306a\u69cb\u6587\u304c\u3042\u308b\u306e\u306b\u5bfe\u3057\u3001 `Either` \u306f\u81ea\u4f5c\u3057\u305f\u578b\u306a\u306e\u3067\u4f55\u306e\u30b5\u30dd\u30fc\u30c8\u3082\u3042\u308a\u307e\u305b\u3093\u3002 `Optional` \u306e\u4ee3\u308f\u308a\u306b `Either` \u3092\u4f7f\u3046\u3068\u30b3\u30fc\u30c9\u4e2d\u3067\u4f7f\u3044\u307e\u304f\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u305d\u306e\u3088\u3046\u306a\u69cb\u6587\u304c\u306a\u3044\u306e\u306f\u8f9b\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001 `Foo?` \u304c `Optional<Foo>` \u3092\u8868\u3059\u3088\u3046\u306b\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u4e2d\u306e\u30d1\u30fc\u30b5\u3092\u6539\u9020\u3057\u3066 `Foo|Bar` \u3068\u66f8\u3051\u3070 `Either<Foo, Bar>` \u3092\u8868\u3059\u3088\u3046\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u69cb\u6587\u306f  TypeScript \u3084 Ceylon \u306e Union type \u306b\u4f3c\u305b\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u95a2\u9023\u306e\u30b3\u30fc\u30c9\u306f lib \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4e0b\u306b\u3042\u308a\u307e\u3059\uff08\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u306f include/swift \uff09\u3002 lib \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3055\u3089\u306b\u3044\u304f\u3064\u304b\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n- Parse: \u5b57\u53e5\u89e3\u6790\u3001\u69cb\u6587\u89e3\u6790\u95a2\u9023\n- AST: \u62bd\u8c61\u69cb\u6587\u6728\u95a2\u9023\n- Sema: \u610f\u5473\u89e3\u6790\u95a2\u9023\n- SIL: Swift \u306e\u4e2d\u9593\u8a00\u8a9e\uff08 Swift Intermediate language \uff09\u95a2\u9023\n\n\u4eca\u56de\u95a2\u9023\u3059\u308b\u306e\u306f Parse \u3068\u3001 Parse \u306e\u4e2d\u306e\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u904e\u7a0b\u3067 AST \u306e\u4e2d\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u304f\u3089\u3044\u3067\u3059\u3002\n\n### \u65b9\u91dd\n\n\u4eca\u56de\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u69cb\u6587\u89e3\u6790\u3092\u6539\u9020\u3057\u3066\u52d5\u4f5c\u3092\u5909\u66f4\u3067\u304d\u308b\u304b\u8a66\u3059\u306e\u3068\u3001\u305d\u306e\u904e\u7a0b\u3067\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u3053\u3068\u3067\u5168\u4f53\u69cb\u9020\u3092\u304a\u307c\u308d\u3052\u306b\u3082\u3064\u304b\u3080\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\u3001\u53b3\u5bc6\u306b\u6b63\u3057\u3044\u5b9f\u88c5\u306f\u76ee\u6307\u3057\u307e\u305b\u3093\u3002\n\n\u307e\u305a\u3001 `Foo|Bar` \u3092\u6b63\u78ba\u306b\u5199\u3057\u3068\u3063\u305f\u62bd\u8c61\u69cb\u6587\u6728\u3092\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u3001 `Either` \u306e\u69cb\u6587\u306b\u5bfe\u5fdc\u3057\u305f\u30ce\u30fc\u30c9\u3092\u62bd\u8c61\u69cb\u6587\u6728\u306b\u3082\u52a0\u3048\u308b\u306a\u3069\u3001 AST \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30bd\u30fc\u30b9\u306b\u3082\u8272\u3005\u3068\u4fee\u6b63\u3092\u52a0\u3048\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u4eca\u56de\u306f\u3001 `Foo|Bar` \u3092\u30d1\u30fc\u30b9\u3059\u308b\u3068 `Either<Foo, Bar>` \u306e\u62bd\u8c61\u69cb\u6587\u6728\u3092\u5410\u304d\u51fa\u3059\u3088\u3046\u306b\u3057\u3066\u8aa4\u9b54\u5316\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u672c\u6765\u306f `(Foo|Bar)|Baz` \u304c `Either<Either<Foo, Bar>, Baz>` \u3068\u89e3\u91c8\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3067\u3059\u304c\u3001\u62ec\u5f27\u3092\u8003\u3048\u59cb\u3081\u308b\u3068\u30bf\u30d7\u30eb\u3068\u7af6\u5408\u3059\u308b\u306a\u3069\u3068\u3066\u3082\u8907\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u4eca\u56de\u306f\u62ec\u5f27\u3092\u6271\u3044\u307e\u305b\u3093\u3002\n\n\u6700\u5f8c\u306b\u3001 `Either` \u3067\u306f `Optional` \u306e\u3088\u3046\u306b `let a: Optional<Int> = 42` \u306e\u3088\u3046\u306a\u6697\u9ed9\u306e\u578b\u5909\u63db\u3082\u3057\u304f\u306f\u30b5\u30d6\u30bf\u30a4\u30d4\u30f3\u30b0\u3092\u5b9f\u73fe\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u3053\u308c\u3082\u4eca\u56de\u306f\u6271\u3044\u307e\u305b\u3093\u3002\u3042\u304f\u307e\u3067\u3001\u578b\u3068\u3057\u3066 `Foo|Bar` \u306e\u3088\u3046\u306b\u66f8\u304f\u3068 `Either<Foo, Bar>` \u3068\u89e3\u91c8\u3055\u308c\u308b\u3053\u3068\u3060\u3051\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\n### \u30d1\u30fc\u30b5\u306e\u4fee\u6b63\n\n\u4eca\u56de\u3084\u308b\u306e\u306f\u578b\u306e\u30d1\u30fc\u30b9\u3067\u3059\u3002 lib/Parse \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u3092\u6f01\u3063\u3066\u308b\u3068 ParseType.cpp \u3068\u3044\u3046\u307e\u3055\u306b\u30c9\u30f3\u30d4\u30b7\u30e3\u3063\u307d\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n`Either` \u306f `Optional` \u306b\u8fd1\u3044\u306e\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u3066 \"Optional\" \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u691c\u7d22\u3057\u3066\u307f\u307e\u3059\u3002\n\n#### parseTypeSimple\u306e\u5909\u66f4\n\n\u95a2\u9023\u3057\u305d\u3046\u306a\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u308b\u3068\u3001 `parseTypeSimple` \u3068\u3044\u3046\u95a2\u6570\u304c\u5927\u5143\u306b\u306a\u3063\u3066\u305d\u3046\u3067\u3059\u3002\n\n```cpp\nParserResult<TypeRepr> Parser::parseTypeSimple(Diag<> MessageID,\n                                                 bool HandleCodeCompletion) {\n    ...\n      if (isOptionalToken(Tok)) {\n        ty = parseTypeOptional(ty.get());\n        continue;\n      }\n      if (isImplicitlyUnwrappedOptionalToken(Tok)) {\n        ty = parseTypeImplicitlyUnwrappedOptional(ty.get());\n        continue;\n      }\n```\n\n\u4e0b\u306e\u3088\u3046\u306b\u3001 `Either` \u7528\u306e\u30b3\u30fc\u30c9\u3082\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\n```cpp\nParserResult<TypeRepr> Parser::parseTypeSimple(Diag<> MessageID,\n                                                 bool HandleCodeCompletion) {\n    ...\n      if (isOptionalToken(Tok)) {\n        ty = parseTypeOptional(ty.get());\n        continue;\n      }\n      if (isImplicitlyUnwrappedOptionalToken(Tok)) {\n        ty = parseTypeImplicitlyUnwrappedOptional(ty.get());\n        continue;\n      }\n      if (isEitherToken(Tok)) {\n        ty = parseTypeEither(ty.get());\n        continue;\n      }\n```\n\n\u3053\u308c\u3067\u3001 `isEitherToken` \u3068 `parseTypeEither` \u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3057\u305f\u3002\u305d\u308c\u305e\u308c\u3001 `isOptionalToken` \u3068 `parseTypeOptional` \u3092\u771f\u4f3c\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\n\n#### isEitherToken\u306e\u5b9f\u88c5\n\n`isOptionalToken` \u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nbool Parser::isOptionalToken(const Token &T) const {\n  // A postfix '?' by itself is obviously optional.\n  if (T.is(tok::question_postfix))\n    return true;\n\n  // A postfix or bound infix operator token that begins with '?' can be\n  // optional too. We'll munch off the '?', so long as it is left-bound with\n  // the type (i.e., parsed as a postfix or unspaced binary operator).\n  if ((T.is(tok::oper_postfix) || T.is(tok::oper_binary_unspaced)) &&\n      T.getText().startswith(\"?\"))\n    return true;\n  return false;\n}\n```\n\n\u3069\u3046\u3084\u3089\u3001\u30c8\u30fc\u30af\u30f3\u306e\u7a2e\u985e\u3068\u6587\u5b57\u5217\u304c\u60f3\u5b9a\u901a\u308a\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002 `tok` \u306f include/swift/Parse/Token.h \u306b\u6b21\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nenum class tok {\n  unknown = 0,\n  eof,\n  code_complete,\n  identifier,\n  oper_binary_unspaced,   // \"x+y\"\n  oper_binary_spaced,     // \"x + y\"\n  oper_postfix,\n  oper_prefix,\n  dollarident,\n  integer_literal,\n  floating_literal,\n  string_literal,\n  sil_local_name,      // %42 in SIL mode.\n  pound_if,\n  pound_else,\n  pound_elseif,\n  pound_endif,\n  pound_line,\n  pound_available,\n  comment,\n\n#define KEYWORD(X) kw_ ## X,\n#define PUNCTUATOR(X, Y) X,\n#include \"swift/Parse/Tokens.def\"\n\n  NUM_TOKENS\n};\n```\n\n`question_postfix` \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u304c\u3001 `include` \u3055\u308c\u305f Tokens.def \u306e\u4e2d\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u4eca `Foo|Bar` \u306e\u3088\u3046\u306a\u578b\u3092\u30d1\u30fc\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u8a72\u5f53\u3057\u305d\u3046\u306a\u3082\u306e\u306f\u4e8c\u9805\u6f14\u7b97\u3092\u6271\u3063\u3066\u3044\u305d\u3046\u306a\u6b21\u306e\u4e8c\u3064\u3067\u3059\u3002\n\n```cpp\noper_binary_unspaced,   // \"x+y\"\noper_binary_spaced,     // \"x + y\"\n```\n\n`Int?` \u3092 `Int ?` \u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001 `Either` \u3082\u305d\u308c\u3092\u306a\u3089\u3063\u3066 `Foo | Bar` \u306e\u3088\u3046\u306a\u8868\u8a18\u306f\u3067\u304d\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u3046\u3059\u308b\u3068 `oper_binary_unspaced` \u304c\u6b8b\u308a\u307e\u3059\u3002\n\n`isOptionalToken` \u3092\u771f\u4f3c\u3066 `isEitherToken` \u3092\u5b9f\u88c5\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\nbool Parser::isEitherToken(const Token &T) const {\n  if (T.is(tok::oper_binary_unspaced) && T.getText().startswith(\"|\"))\n    return true;\n  return false;\n}\n```\n\n#### parseTypeEither\u306e\u5b9f\u88c5\n\n`parseTypeEither` \u3092\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u540c\u3058\u304f `parseTypeOptional` \u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n```cpp\nParserResult<OptionalTypeRepr> Parser::parseTypeOptional(TypeRepr *base) {\n  SourceLoc questionLoc = consumeOptionalToken();\n  return makeParserResult(new (Context) OptionalTypeRepr(base, questionLoc));\n}\n```\n\n\u3069\u3046\u3084\u3089\u3001\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u307f\u3060\u3057\u3066\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3092\u5143\u306b\u62bd\u8c61\u69cb\u6587\u6728\u306e\u30ce\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002 grep \u3057\u3066\u8abf\u3079\u308b\u3068 `OptionalTypeRepr` \u306f AST \u306e\u4e2d\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u65b9\u91dd\u3067\u6c7a\u3081\u305f\u901a\u308a `EitherTypeRepr` \u3092\u5b9f\u88c5\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u69cb\u6587\u6728\u306b\u7f6e\u304d\u63db\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u5bfe\u51e6\u3057\u307e\u3059\u3002\n\nAST \u306e\u4e2d\u3092\u63a2\u3057\u3066\u3044\u308b\u3068\u3001 `GenericIdentTypeRepr` \u3068\u3044\u3046\u305d\u308c\u3063\u307d\u3044\u30af\u30e9\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n\n`GenericIdentTypeRepr` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u4f7f\u3044\u65b9\u306f\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u30d1\u30fc\u30b9\u3057\u3066\u308b\u7b87\u6240\u3092\u771f\u4f3c\u3057\u307e\u3057\u3087\u3046\u3002\n\n```cpp\nSourceLoc LAngle, RAngle;\n SmallVector<TypeRepr*, 8> GenericArgs;\n if (startsWithLess(Tok)) {\n   if (parseGenericArguments(GenericArgs, LAngle, RAngle))\n     return nullptr;\n }\n EndLoc = Loc;\n\n ComponentIdentTypeRepr *CompT;\n if (!GenericArgs.empty())\n   CompT = new (Context) GenericIdentTypeRepr(Loc, Name,\n                                        Context.AllocateCopy(GenericArgs),\n                                        SourceRange(LAngle, RAngle));\n```\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b\u306f\u6b21\u306e\u3082\u306e\u3092\u6e21\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n- \u7b2c\u4e00\u5f15\u6570: \u30c8\u30fc\u30af\u30f3\u306e\u4f4d\u7f6e\n- \u7b2c\u4e8c\u5f15\u6570: \u578b\u306e\u540d\u524d\uff08\u4eca\u56de\u306f `Either` \u306b\u3057\u305f\u3044\uff09\n- \u7b2c\u4e09\u5f15\u6570: \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\n- \u7b2c\u56db\u5f15\u6570: \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e `<` \u304b\u3089 `>` \u307e\u3067\u306e\u4f4d\u7f6e\u306e\u7bc4\u56f2\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3068\u308a\u3042\u3048\u305a `|` \u306e\u4f4d\u7f6e\u3092\u6e21\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```cpp\n// \u7b2c\u4e00\u5f15\u6570\u306b\u6e21\u3059\u5024\nSourceLoc verticalLoc = consumeEitherToken();\n```\n\n\u7b2c\u4e8c\u5f15\u6570\u306f `\"Either\"` \u3092\u6e21\u305b\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u3001\u5f15\u6570\u306e\u578b\u304c `Identifier` \u3067\u3059\u3002\u3057\u304b\u3082\u3001 `Identifier` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u96a0\u853d\u3055\u308c\u3066\u3066\u3001\u76f4\u63a5\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u7121\u7406\u3084\u308a\u516c\u958b\u3057\u3066\u547c\u3093\u3067\u307f\u307e\u3057\u305f\u304c\u3001\u69cb\u6587\u6728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u306a\u3044\u6587\u5b57\u5217\u3060\u3063\u305f\u305f\u3081\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n`Identifier` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u3088\u304f\u898b\u308b\u3068\u3001\u30b3\u30e1\u30f3\u30c8\u3067\u6b21\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3057\u305f\u3002\n\n```cpp\nclass Identifier {\n  ...\n\n  /// Constructor, only accessible by ASTContext, which handles the uniquing.\n  explicit Identifier(const char *Ptr) : Pointer(Ptr) {}\n```\n\n\u3069\u3046\u3084\u3089 `ASTContext` \u3092\u4f7f\u3048\u3070\u826f\u3044\u3088\u3046\u3067\u3059\u3002 `ASTContext` \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6f01\u308b\u3068\u3001 `getIdentifier` \u3068\u3044\u3046\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u6587\u5b57\u5217\u3092\u767b\u9332\u3057\u3066 `Identifier` \u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n\u5143\u306b\u623b\u3063\u3066 ParseType.cpp \u306e\u4e2d\u3092\u691c\u7d22\u3059\u308b\u3068\u3001 `Context.getIdentifier(\"...\")` \u306e\u3088\u3046\u306a\u5f62\u3067\u4f7f\u3063\u3066\u3044\u308b\u7b87\u6240\u3092\u767a\u898b\u3057\u307e\u3057\u305f\u3002\u591a\u5206 `Context` \u304c `Parser` \u306e\u30e1\u30f3\u30d0\u5909\u6570\u306a\u306e\u3067\u3057\u3087\u3046\u3002\u3053\u308c\u3092\u771f\u4f3c\u3066\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n```cpp\n// \u7b2c\u4e8c\u5f15\u6570\u306b\u6e21\u3059\u5024\nContext.getIdentifier(\"Either\")\n```\n\n\u7b2c\u4e09\u5f15\u6570\u306b\u306f\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u578b\u306e\u30d1\u30fc\u30b9\u3067\u306f `Context.AllocateCopy(GenericArgs)` \u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3001 `GenericArgs` \u306e\u30b3\u30d4\u30fc\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u306e `GenericArgs` \u306f `SmallVector<TypeRepr*, 8> GenericArgs;` \u3068\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u3001 `Either` \u3067\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4e8c\u3064\u3042\u308c\u3070\u3044\u3044\u306e\u3067\u3001\u304a\u305d\u3089\u304f\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n```cpp\nSmallVector<TypeRepr*, 2> GenericArgs;\n```\n\n`SmallVector` \u306e\u4f7f\u3044\u65b9\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001 grep \u3059\u308b\u3068 `push_back` \u30e1\u30bd\u30c3\u30c9\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u4eca\u3001 `Foo|Bar` \u306e `Foo` \u3068 `Bar` \u3092\u8ffd\u52a0\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u3002 `parseTypeEither` \u306f `parseTypeOptional` \u540c\u69d8\u306b\u5f15\u6570\u3067 `TypeRepr *` \u3092\u53d7\u3051\u3066\u3044\u307e\u3059\u3002\u304a\u305d\u3089\u304f `parseTypeOptional` \u304c\u53d7\u3051\u3066\u3044\u308b\u306e\u306f `Foo?` \u306e\u3068\u304d\u306e `Foo` \u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3059\u308b\u3068\u3001 `parseTypeEither` \u3067\u306f `GenericArgs` \u306b\u3053\u308c\u3092\u8ffd\u52a0\u3057\u3066\u3084\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n```cpp\nSmallVector<TypeRepr*, 2> GenericArgs;\nGenericArgs.push_back(base);\n```\n\n`Foo|Bar` \u306e `Bar` \u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u3067\u3057\u3087\u3046\uff1f\u6700\u521d\u306b `SourceLoc verticalLoc = consumeEitherToken();` \u3067\u30c8\u30fc\u30af\u30f3\u3092\u6d88\u8cbb\u3057\u305f\u306e\u3067\u3001\u540d\u524d\u304b\u3089\u3057\u3066\u6b21\u306b `parseTypeXxx` \u3092\u547c\u3073\u51fa\u3059\u3068 `|` \u306e\u6b21\u304b\u3089\u30d1\u30fc\u30b9\u3057\u3066\u304f\u308c\u305d\u3046\u3067\u3059\u3002\u4eca\u3001 `Foo|Bar` \u306e `Bar` \u306e\u90e8\u5206\u306b\u306f\u3069\u3093\u306a\u578b\u3082\u6765\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u7279\u5b9a\u306e `parseTypeXxx` \u3067\u306f\u306a\u304f\u6700\u3082\u6c4e\u7528\u306a\u95a2\u6570\u3092\u4f7f\u3044\u305f\u3044\u3067\u3059\u3002\u63a2\u3059\u3068 `parseType` \u304c\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n`parseType` \u306e\u623b\u308a\u5024\u306f `ParserResult` \u3067\u5305\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e2d\u8eab\u306e `TypeRepr` \u3092\u53d6\u308a\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3082\u3001\u9069\u5f53\u306b\u691c\u7d22\u3057\u305f\u3089\u3084\u308a\u65b9\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\n```cpp\nSmallVector<TypeRepr*, 2> GenericArgs;\nGenericArgs.push_back(base);\nGenericArgs.push_back(parseType().get());\n\n// \u7b2c\u4e09\u5f15\u6570\u306b\u6e21\u3059\u5024\nContext.AllocateCopy(GenericArgs)\n```\n\n\u3055\u3066\u3001\u3042\u3068\u306f\u7b2c\u56db\u5f15\u6570\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u306f\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e `<` \u3068 `>` \u306e\u4f4d\u7f6e\u3067\u3057\u305f\u304c\u3001\u91cd\u8981\u3067\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u4eca\u306f `|` \u306e\u4f4d\u7f6e\u3092\u6e21\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```cpp\n// \u7b2c\u56db\u5f15\u6570\u306b\u6e21\u3059\u5024\nSourceRange(verticalLoc, verticalLoc)\n```\n\n`consumeOptionalToken` \u306b\u5bfe\u5fdc\u3057\u305f `consumeEitherToken` \u306f\u5f8c\u3067\u4f5c\u308b\u3068\u3057\u3066\u3001\u3053\u308c\u307e\u3067\u3092\u307e\u3068\u3081\u308b\u3068 `parseTypeEither` \u306f\u6b21\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n```cpp\nParserResult<GenericIdentTypeRepr> Parser::parseTypeEither(TypeRepr *base) {\n  SourceLoc verticalLoc = consumeEitherToken();\n  SmallVector<TypeRepr*, 2> GenericArgs;\n  GenericArgs.push_back(base);\n  GenericArgs.push_back(parseType().get());\n  return makeParserResult(new (Context) GenericIdentTypeRepr(verticalLoc,\n                                          Context.getIdentifier(\"Either\"),\n                                          Context.AllocateCopy(GenericArgs),\n                                          SourceRange(verticalLoc, verticalLoc)));\n}\n```\n\n#### consumeEitherToken\u306e\u5b9f\u88c5\n\n`consumeOptionalToken` \u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nSourceLoc Parser::consumeOptionalToken() {\n  assert(isOptionalToken(Tok) && \"not a '?' token?!\");\n  return consumeStartingCharacterOfCurrentToken();\n}\n```\n\n`consumeEitherToken` \u3092\u4f5c\u308b\u306e\u306f\u771f\u4f3c\u3059\u308c\u3070\u7c21\u5358\u305d\u3046\u3067\u3059\u3002\n\n```cpp\nSourceLoc Parser::consumeEitherToken() {\n  assert(isEitherToken(Tok) && \"not a '|' token?!\");\n  return consumeStartingCharacterOfCurrentToken();\n}\n```\n\n## \u30d3\u30eb\u30c9\u3068\u5b9f\u884c\n\n\u3055\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4fee\u6b63\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n[apple/swift](https://github.com/apple/swift) \u306e\u30d3\u30eb\u30c9\u3068\u5b9f\u884c\u306b\u306f\u2193\u306e\u6295\u7a3f\u304c\u5f79\u306b\u7acb\u3061\u307e\u3057\u305f\u3002\n\n- [\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306b\u306a\u3063\u305fSwift\u3092\u30d3\u30eb\u30c9\u3057\u3066\u307f\u308b](http://qiita.com/shu223/items/99b5ecc0ac5af2566c9c)\n- [Swift\u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3055\u308c\u305f\u306e\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30e1\u30bd\u30c3\u30c9\u8ffd\u52a0\u3057\u3066\u307f\u308b](http://qiita.com/shimesaba/items/a6f6403f4208705e0c30)\n\n\u30d3\u30eb\u30c9\u304c\u3067\u304d\u305f\u3089\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u3088\u3046\u306a either.swift \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```swift\nlet e: Int|String = .Left(42)\n\nswitch e {\ncase let .Left(left):\n    print(\"left: \\(left)\")\ncase let.Right(right):\n    print(\"right: \\(right)\")\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```\nleft: 42\n```\n\n\u72ec\u81ea\u306e\u69cb\u6587 `Int|String` \u304c\u3061\u3083\u3093\u3068\u52d5\u304d\u307e\u3057\u305f\u306d\uff01\uff01\n\n## \u307e\u3068\u3081\n\nSwift \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u9020\u3057\u3066\u72ec\u81ea\u306e\u69cb\u6587\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u69cb\u6587\u89e3\u6790\u3092\u4fee\u6b63\u3057\u3066\u65b0\u3057\u3044\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306b\u81ea\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u9020\u3059\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3053\u3068\u3067\u898b\u3048\u3066\u304f\u308b\u3053\u3068\u3082\u3042\u308b\u306f\u305a\u3067\u3059\u3002 Swift \u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3055\u308c\u3066\u3001\u3053\u308c\u304b\u3089 [Swift 3.0 \u3092\u3069\u3093\u306a\u3082\u306e\u306b\u3059\u3079\u304d\u304b\u307f\u3093\u306a\u3067\u8a71\u3057\u5408\u304a\u3046](https://github.com/apple/swift-evolution)\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001 Swift \u306f\u3053\u3046\u3042\u308b\u3079\u304d\u3060\u3001\u3053\u3053\u304c\u6c17\u306b\u5165\u3089\u306a\u3044\u3001\u3068\u601d\u3046\u3068\u3053\u308d\u306e\u3042\u308b\u4eba\u306f\u3001\u8b70\u8ad6\u3092\u6df1\u3081\u308b\u305f\u3081\u306b\u307e\u305a\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\uff08\u9593\u9055\u3063\u3066\u3082\u81ea\u5206\u3067\u6539\u9020\u3057\u305f\u3082\u306e\u3092\u3044\u304d\u306a\u308a\u30d7\u30eb\u30ea\u30af\u3067\u9001\u308a\u3064\u3051\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u3061\u3083\u3093\u3068[\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u6307\u91dd](https://github.com/apple/swift-evolution/blob/master/README.md)\u306b\u6cbf\u3063\u3066\u884c\u52d5\u3057\u307e\u3057\u3087\u3046\u3002\uff09\n", "tags": ["Swift", "\u30b3\u30f3\u30d1\u30a4\u30e9", "\u69cb\u6587\u89e3\u6790"]}