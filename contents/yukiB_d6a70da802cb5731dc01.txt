{"context": "\n\n\u306f\u3058\u3081\u306b\npython\u304b\u3089MySQL\u3092\u53e9\u304f\u969b\uff0c\u4f55\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304b\uff1fSQLAlchemy,Django,peewee\u3042\u305f\u308a\u3092\u4f7f\u3063\u3066\u3044\u308b\u65b9\u304c\u591a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff0e\u79c1\u306f\u8272\u3005\u4f7f\u3063\u3066\u307f\u3066\u7d50\u5c40SQLAlchemy\u306b\u843d\u3061\u7740\u3044\u3066\u3044\u307e\u3059\u304c\uff0c\u4f55\u5343\u4e07\uff0c\u4f55\u5104\u30aa\u30fc\u30c0\u306e\u30c7\u30fc\u30bf\u306b\u306a\u308b\u3068\u51e6\u7406\u304c\u9045\u304f\u975e\u5e38\u306b\u3084\u3063\u304b\u3044\u3067\u3059\uff0e\n\u306a\u306e\u3067\u4eca\u56de\u306f\uff08\u5927\u304d\u306a\u30c7\u30fc\u30bf\u306bsql\u4f7f\u3046\u306a\u3068\u304b\u9ad8\u901f\u51e6\u7406\u306bpython\u4f7f\u3046\u306a\u3068\u3044\u3046\u8a71\u306f\u4e00\u65e6\u7f6e\u3044\u3066\u304a\u3044\u3066\uff09\uff0cSQLAlchemy\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u51e6\u7406\u3092\u3044\u304b\u306b\u9ad8\u901f\u306b\u3059\u308b\u304b\uff0c\u4f55\u9805\u76ee\u304b\u306b\u5206\u3051\u3066\u5099\u5fd8\u9332\u3092\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\nSQLAlchemy\u3092~\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\uff0cSQLAlchemy\u3092\u4f7f\u3063\u3066DB\u306b\u30c7\u30fc\u30bf\u3092INSERT,SELECT\u3059\u308b\u969b\u306epython\u9ad8\u901f\u5316TIPS\u3054\u3063\u305f\u716e\u3067\u3059\uff0e\u672c\u5f53\u306f\u8a18\u4e8b\u3092\u5206\u3051\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u3067\u3059\u304c\uff0c\u81ea\u5206\u3067\u898b\u8fd4\u3059\u969b\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u307b\u3046\u304c\u5b09\u3057\u3044\u306e\u3067\u3053\u3046\u3057\u307e\u3057\u305f\uff0e\n\u306a\u304a\uff0c\u4eca\u56de\u4f7f\u7528\u3059\u308b\u30b3\u30fc\u30c9\u306f\u5168\u3066github\u306b\u304a\u3044\u3066\u3042\u308b\u306e\u3067\uff0c\u3088\u3051\u308c\u3070\u305d\u3061\u3089\u3082\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0e\n\n\u5b9f\u884c\u74b0\u5883\n\nUbuntu 16.04.1\nIntel(R) Core(TM) i7-6700K CPU @ 4.00GHz\n\u4eee\u60f38\u30b3\u30a2\u3001\u7269\u74064\u30b3\u30a2\nPython 3.5.2\n\n\nDB\u69cb\u9020\n\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u3067\u4f7f\u7528\u3059\u308bDB\u69cb\u9020\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\nuser table\n\n\n\nid\nname\nage\nteam_id\ncreated_at\nupdated_at\n\n\n\n\n1\nJohn1\n12\n4\n1486030539\n1486030539\n\n\n2\nKevin2\n54\n12\n1486030539\n1486030539\n\n\n...\n\n\n\n\n\n\n\n\n\nteam table\n\n\n\nid\nname\ncreated_at\nupdated_at\n\n\n\n\n1\nA\n1486030539\n1486030539\n\n\n2\nB\n1486030539\n1486030539\n\n\n...\n\n\n\n\n\n\nuser\u306fteam\u306e\u5916\u90e8\u30ad\u30fc\u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff0e\n\nINSERT\u7de8\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092team, user\u30c6\u30fc\u30d6\u30eb\u306b\u767b\u9332\u3057\u307e\u3059\uff0e\nteam_list = ['A', 'B',...,'Z']\nuser_list = [('John', 14, 'C'), ...]\n\n\u3068\u3044\u3046\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\uff0e\nteam\u6570\u306fA~Z\u306e26\uff0cuser\u6570\u306f10\u4e07\u3067\u3059\uff0e\n\n0. 1\u3064\u305a\u3064SQLAlchemy Table object\u3092\u4f5c\u3063\u30661\u3064\u305a\u3064Insert\n\u3055\u3059\u304c\u306b\u3053\u3093\u306a\u3084\u308a\u65b9\u306f\u6700\u521d\u304b\u3089\u3057\u307e\u305b\u3093\u304c\uff0c\u6bd4\u8f03\u306e\u305f\u3081\u306b\u3053\u3053\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\uff0e\nclass Base(object):\n\n    def __iter__(self):\n        return iter(self.__dict__.items())\n\n    def dict(self):\n        return self.__dict__\n\n    @classmethod\n    def query(cls):\n        if not hasattr(cls, \"_query\"):\n            cls._query = database.session().query_property()\n        return cls._query\n\nclass User(Base):\n\n    def __repr__(self):\n        return '<User %r>' % (self.id)\n\n    def __init__(self, name, age, team):\n        self.name = name\n        self.age = age\n        self.team = team\n        self.updated_at = time.time()\n        self.created_at = time.time()\n\n    @staticmethod\n    def create_dict(name, age, team_id):\n        return {'name': name, 'age': age, 'team_id': team_id,\n                'updated_at': time.time(), 'created_at': time.time()}\n\n\nsignup_user = Table('user', metadata,\n                    Column('id', BigInteger, nullable=False,\n                           primary_key=True, autoincrement=True),\n                    Column('name', Unicode(255), nullable=False),\n                    Column('age', Integer, nullable=False),\n                    Column('team_id', ForeignKey('team.id'), nullable=False),\n                    Column('updated_at', BigInteger, nullable=False),\n                    Column('created_at', BigInteger, nullable=False))\n\nmapper(User, signup_user,\n       properties={\n           'id': signup_user.c.id,\n           'name': signup_user.c.name,\n           'age': signup_user.c.age,\n           'team': relationship(Team),\n           'updated_at': signup_user.c.updated_at,\n           'created_at': signup_user.c.created_at\n       })\n\nUser.__table__ = signup_user\n\n\u306e\u3088\u3046\u306bTable\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\uff0eDB\u5074\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u6e96\u5099\u306f\u3053\u3093\u306a\u304b\u3093\u3058\nfrom sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nmetadata = MetaData()\nengine = create_engine(uri, encoding='utf-8', pool_recycle=3600)\nsession = scoped_session(sessionmaker(autocommit=False,\n                                               autoflush=True,\n                                               expire_on_commit=False,\n                                               bind=_engine))\n\nmetadata.create_all(bind=_engine)\n\nteam\u3092\u767b\u9332\u3059\u308b\u90e8\u5206\u306f\u7701\u7565\u3057\u307e\u3059\u304c\uff0c\ndef insert_user(name, age, team):\n    u = User(name, age, team)\n    session.add(u)\n    session.commit()\n\nteams = Team.query().all()\n# team_dict = {'A': <Team1>, 'B': <Team2>, ...}\nteam_dict = {t.name: t for t in teams}\n[insert_user(d[0], d[1], team_dict[d[2]]) for d in data_list]\n\n\u306e\u3088\u3046\u306b1\u3064\u305a\u3064User\u3092\u4f5c\u6210\u3057\uff0cadd, commit\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n1. \u8907\u6570\u307e\u3068\u3081\u3066Insert\uff0e\n\u660e\u3089\u304b\u306b0.\u306f\u52b9\u7387\u304c\u60aa\u3044\u306e\u3067\uff0c\u8907\u6570\u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u6c17\u306b\u8ffd\u52a0\u3067\u304d\u308badd_all\u3092\u4f7f\u3044\u307e\u3059\uff0e\nusers = [User(d[0], d[1], team_dict[d[2]]) for d in data_list]\ndatabase.session().add_all(users)\ndatabase.session().commit()\n\n\u30b3\u30fc\u30c9\u3068\u3057\u3066\u3082\u3060\u3044\u3076\u30b9\u30c3\u30ad\u30ea\u3057\u307e\u3057\u305f\uff0e\n\n2. bulk insert\nSQLAlchemy\u306eORM\u306b\u306fbulk_save_objects\u304c\u3042\u308a\u307e\u3059 \uff0e\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass UserTable(Base):\n    __tablename__ = \"user\"\n    id = Column(BigInteger,  nullable=False,\n                primary_key=True, autoincrement=True)\n    name = Column(Unicode(255), nullable=False)\n    age = Column(Integer, nullable=False)\n    team_id = Column(BigInteger, nullable=False)\n    updated_at = Column(BigInteger, nullable=False)\n    created_at = Column(BigInteger, nullable=False)\n\n\u306e\u3088\u3046\u306bTable\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\uff0c\nsession.bulk_save_objects(\n    [UserTable(name=d[0],\n               age=d[1],\n               team_id=team_dict[d[2]].id,\n               updated_at = time.time(),\n               created_at = time.time())\n     for d in data_list], return_defaults=True)\nsession.commit()\n\n\u306e\u3088\u3046\u306b\u633f\u5165\u3057\u307e\u3059\uff0e\u5916\u90e8\u30ad\u30fc\u7b49\u306e\u6271\u3044\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n3. sqlalchemy.core\u3092\u4f7f\u3046\nORM\u306f\u4f7f\u3044\u3084\u3059\u304f\uff0c\u30b3\u30fc\u30c9\u3082\u77ed\u304f\u3067\u304d\u308b\u4e0a\uff0crollback\u306a\u3069\u306e\u7d30\u304b\u3044\u5236\u5fa1\u3092\u88cf\u5074\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u7b49\u69d8\u3005\u306a\u5229\u70b9\u3092\u6709\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u30af\u30a8\u30ea\u751f\u6210\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5927\u304d\u304f\u9ad8\u901f\u5316\u3092\u8003\u3048\u308b\u6642\u306b\u306f\u30cd\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\uff0e sqlalchemy.core\u3092\u4f7f\u3046\u3068\u624b\u9593\u306f\u5897\u3048\u307e\u3059\u304c\uff0cORM\u3092\u4f7f\u3046\u3088\u308a\u3082\u9ad8\u901f\u306b\u30af\u30a8\u30ea\u3092\u767a\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nusers = [{'name':d[0], 'age': d[1], 'team_id': team_dict[d[2]]['id'],\n          'updated_at': time.time(), 'created_at': time.time()} for d in data_list]\nsession.execute(User.__table__.insert(), users)\nsession.commit()\n\n\n\u6bd4\u8f03\n0~3\u307e\u3067\u3092\u307e\u3068\u3081\u3066\u901f\u5ea6\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\nSqlAlchemy ORM: elapsed time of insertion: 62.205 [sec]\nSqlAlchemy ORM multi insert: elapsed time of insertion: 1.421 [sec]\nSqlAlchemy ORM bulk insert: elapsed time of insertion: 1.170 [sec]\nSqlAlchemy core bulk insert: elapsed time of insertion: 0.261 [sec]\n\nsqlalchemy.core...\u3000\u5727\u5012\u7684...!!\u3000bulk insert\u3068\u6bd4\u3079\u3066\u30825,6\u500d\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\nORM\u3092\u4f7f\u3046\u306b\u3057\u3066\u3082bulk insert\u3092\u4f7f\u3046\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u306d\uff0e\n\n\u304a\u307e\u3051. bulk insert\u306e\u5206\u5272\u306f\u4e0d\u8981\uff1f\nbulk insert\u306e\u969b\uff0c\u3042\u308b\u7a0b\u5ea6\u5927\u304d\u3044\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\u969b\u306f\u5206\u5272\u3057\u305f\u307b\u3046\u304c\u901f\u3044\uff0c\u307f\u305f\u3044\u306a\u8a71\u3092\u3069\u3053\u304b\u3067\u805e\u3044\u305f\u3053\u3068\u3042\u308b\u6c17\u304c\u3057\u305f\u306e\u3067sqlalchemy.core\u3092\u4f7f\u3063\u3066\u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f(100\u4e07\u4ef6)\uff0e\nSqlAlchemy core bulk insert (10): elapsed time of insertion: 51.066 [sec]\nSqlAlchemy core bulk insert (20): elapsed time of insertion: 37.913 [sec]\nSqlAlchemy core bulk insert (50): elapsed time of insertion: 27.323 [sec]\nSqlAlchemy core bulk insert (100): elapsed time of insertion: 23.954 [sec]\nSqlAlchemy core bulk insert (150): elapsed time of insertion: 22.607 [sec]\nSqlAlchemy core bulk insert (200): elapsed time of insertion: 21.853 [sec]\nSqlAlchemy core bulk insert (500): elapsed time of insertion: 20.139 [sec]\nSqlAlchemy core bulk insert (750): elapsed time of insertion: 19.399 [sec]\nSqlAlchemy core bulk insert (1000): elapsed time of insertion: 19.362 [sec]\nSqlAlchemy core bulk insert (5000): elapsed time of insertion: 19.493 [sec]\nSqlAlchemy core bulk insert (10000): elapsed time of insertion: 19.387 [sec]\nSqlAlchemy core bulk insert (20000): elapsed time of insertion: 18.983 [sec]\nSqlAlchemy core bulk insert (50000): elapsed time of insertion: 19.641 [sec]\nSqlAlchemy core bulk insert (100000): elapsed time of insertion: 19.022 [sec]\nSqlAlchemy core bulk insert (500000): elapsed time of insertion: 19.837 [sec]\n\n\u3046\u30fc\u3093\uff0c\u3069\u3046\u3084\u3089\u6c17\u306e\u305b\u3044\u3060\u3063\u305f\u307f\u305f\u3044\u3067\u3059...\n\nSELECT\u7de8\n\u5148\u307b\u3069\u767b\u9332\u3057\u305fteam, user\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\uff0e\nteam\u6570\u306fA~Z\u306e26\uff0cuser\u6570\u306f100\u4e07\u3067\u3059\uff0e\n\u307e\u305a\u306f\u5358\u7d14\u306b\uff0c\u5e74\u9f62\u9ad8\u3044\u9806\u306b[{'id': 10, 'name': 'John', 'age': 34, 'team': 'K'}, {...}, ...]\n\u306e\u3088\u3046\u306a\u8f9e\u66f8\u30ea\u30b9\u30c8\u3092limit\uff08\u4eca\u56de\u306f100\uff09\u4ef6\u8fd4\u3059\u51e6\u7406\u3092\u3064\u304f\u308a\u307e\u3059\uff0e\n\n0. MySQL\u5074\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0(Index\u7b49)\n\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u307e\u305a\u306f\u3057\u3063\u304b\u308aMySQL\u5074\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3057\u307e\u3057\u3087\u3046\uff0e\n\u4eca\u56de\u306e\u4f8b\u3067\u306fuser.age\u306bindex\u3092\u8cbc\u308b\u3060\u3051\u3067\u7d0410\u500d\u51e6\u7406\u304c\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\uff0e\n\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u95a2\u3057\u3066\u306f\u3059\u3067\u306b\u69d8\u3005\u306a\u8a18\u4e8b\u304c\u3042\u308b\u306e\u3067\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\uff0e\n\n1. ORM\u3092\u4f7f\u7528\nusers = User.query().order_by(desc(User.age)).limit(limit).all()\nresult = [{'id': u.id, 'name': u.name, 'age': u.age, 'team': u.team.name}\n          for u in users]\n\n\u77ed\u3044\uff01\u3000\u3044\u3044\u3067\u3059\u306d\u30fc\uff0e\u5916\u90e8\u30ad\u30fc\u3067\u7e4b\u304c\u3063\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u307e\u305f\u304c\u308b\u3088\u3046\u306a\u5834\u5408\u306f\u7279\u306b\u30b3\u30fc\u30c9\u304c\u77ed\u304f\u306a\u308b\u306e\u3067\u3042\u308a\u304c\u305f\u3044\u3067\u3059\uff0e\n\n2. sqlalchemy.core\u3092\u4f7f\u7528\nsqlalchemy\u306eselect\u95a2\u6570\u3092\u7528\u3044\u307e\u3059\uff0e\nfrom sqlalchemy import select, desc, and_, func\n\nu = User.__table__.c\nt = Team.__table__.c\nsel = select([u.id, u.name, u.age, t.name])\\\n       .select_from(User.__table__.join(Team.__table__, t.id == u.team_id))\\\n       .order_by(desc(u.age)).limit(limit)\nresult = [{'id': r[0], 'name': r[1], 'age': r[2], 'team': r[3]}\n          for r in session.execute(sel)]\n\n\u3060\u3044\u3076\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\n\n3. multiprocessing\u4f75\u7528\n\u3053\u306e\u4f8b\u3067\u306fsql\u51e6\u7406\u3068\u76f4\u63a5\u306f\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\uff0c\u30c7\u30fc\u30bf\u6570\u304c\u5897\u3048\u3066\u304d\u305f\u5834\u5408\uff0c\u4e26\u5217\u51e6\u7406\u3092\u304b\u307e\u305b\u308b\u3068\u5287\u7684\u306b\u51e6\u7406\u901f\u5ea6\u304c\u6539\u5584\u3057\u307e\u3059\uff0e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u306e\u3067\u3088\u308d\u3057\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0e\nfrom multiprocessing import Pool\nimport multiprocessing as multi\n\n\ndef get_user(r):\n    return {'id': r[0], 'name': r[1], 'age': r[2], 'team': r[3]}\n\n\ndef select_user_multi():\n    u = User.__table__.c\n    t = Team.__table__.c\n    sel = select([u.id, u.name, u.age, t.name])\\\n          .select_from(User.__table__.join(Team.__table__, t.id == u.team_id))\\\n          .order_by(desc(u.age)).limit(limit)\n    p = Pool(multi.cpu_count())\n    result = p.map(get_user, session.execute(sel))\n    p.close()\n    return result\n\n\n\u6bd4\u8f03\nsqlAlchemy ORM: elapsed time: 0.3291 [sec]\nsqlAlchemy core: elapsed time: 0.5837 [sec]\nsqlAlchemy core with multiprocessing: elapsed time: 0.0096 [sec]\n\n\u3042\u308c...\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\u30af\u30a8\u30ea\u304c\u5358\u7d14\u3060\u3063\u305f\u304b\u3089\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0emultiprocessing\u3092\u304b\u307e\u305b\u305f\u7d50\u679c\u306f\u3060\u3044\u3076\u901f\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\n\n\u304a\u307e\u30511. count\n\u7d9a\u3044\u3066\uff0cteam\u3054\u3068\u306euser\u6570\u306e\u96c6\u8a08\u3092\u3057\u3066\u307f\u307e\u3059\uff0e\u5c11\u3057\u30af\u30a8\u30ea\u3092\u8907\u96d1\u306b\u3057\u3066\uff0c\u305d\u308c\u305e\u308c\u306e\u30c1\u30fc\u30e0\u306b\u5c5e\u3057\u3066\u3044\u308b50\u6b73\u672a\u6e80\u306e\u30e6\u30fc\u30b6\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057{'A': 1400, 'B': 2122, ....}\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u51e6\u7406\u3092\u304a\u3053\u306a\u3044\u307e\u3059\uff0e\n\u306a\u304a\uff0c\u30ab\u30a6\u30f3\u30c8\u51e6\u7406\u306e\u9ad8\u901f\u5316\u81ea\u4f53\u306f\u3053\u3061\u3089\uff08InnoDB\u3067COUNT()\u3092\u6271\u3046\u969b\u306e\u6ce8\u610f\u4e8b\u9805\u3042\u308c\u3053\u308c\u3002\uff09\u304c\u5927\u5909\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\n\nORM\ndef select_teams_orm():\n    return Team.query().all()\n\nteams = select_teams_orm()\ncounts = {tm.name: User.query()\\\n              .filter(and_(User.team == tm, User.age < 50)).count()\\\n              for tm in teams}\n\n\u76f8\u5909\u308f\u3089\u305a\u77ed\u3044\uff01\n\nsqlalchemy.core\ndef select_teams_core():\n    t = Team.__table__.c\n    sel = select([t.id, t.name]).select_from(Team.__table__)\n    res = session.execute(sel)\n    result = [{'id': r[0], 'name': r[1]} for r in res]\n    return result\n\nteams = select_teams_core()\nsess = lambda sel: session.execute(sel)\nu = User.__table__.c\ncounts = {tm['name']: sess(\n        select([func.count()]).select_from(User.__table__)\\\n        .where(and_(u.team_id == tm['id'], u.age < 50))\\\n).scalar() for tm in teams}\n\n\u308f\u304b\u308a\u306b\u304f\u3044\uff011\u30eb\u30fc\u30d7\u3067\u6e08\u307e\u305b\u308b\u305f\u3081\u306b\u4e0a\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u5206\u89e3\u3059\u308b\u3068\ndef create_query(team_id): # \u30af\u30a8\u30ea\u4f5c\u6210\u3000team id\u3068user age\u3067\u7d5e\u308a\u8fbc\u307f\n    u = User.__table__.c\n    return select([func.count()]).select_from(User.__table__)\\\n             .where(add_(u.team_id == team_id, u.age < 50))\n\nqueries = [create_query(tm['id']) for tm in teams] # \u30c1\u30fc\u30e0\u3054\u3068\u306b\u30af\u30a8\u30ea\u4f5c\u6210\ncounts = [session.execute(q) for q in queries] # \u30af\u30a8\u30ea\u767a\u884c\nresult = [{tm['name']: c.scalar()} for tm,c in zip(teams,counts)] # {'A': count, ...} \u8f9e\u66f8\u4f5c\u6210\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\uff0e\u307e\u305f\u3060\u3044\u3076\u30b3\u30fc\u30c9\u91cf\u304c\u5897\u3048\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\n\nmultiprocessing\n\u4eca\u5ea6\u306fSELECT\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\u3068\u3053\u308d\u304b\u3089\u4e26\u5217\u5316\u3057\u3066\u307f\u307e\u3059\uff0e\n\u6ce8\u610f\u70b9\u306f\uff0cJoblib\u306eParallelize\u306f\u4f7f\u3048\u306a\u3044\uff0cscoped_session\u3067\u4f5c\u6210\u3057\u305fsession\u306f\u4e26\u5217\u51e6\u7406\u5185\u3067\u306f\u4f7f\u3048\u306a\u3044\uff0c\u306e\u4e8c\u70b9\u3067\u3059\uff0e\nsession = sessionmaker(autocommit=False, # scoped_session \u306f\u30c0\u30e1\n                       autoflush=True,\n                       expire_on_commit=False,\n                       bind=_engine)\n\ndef count_user(team):\n    u = User.__table__.c\n    sel = select([func.count()]).select_from(User.__table__)\\\n          .where(and_(u.team_id == team['id'], u.age < 50))\n    result = session.execute(sel).scalar()\n    return result\n\n\ndef count_user_multi():\n    teams = select_teams_core()\n    p = Pool(multi.cpu_count())\n    counts = p.map(count_user, teams)\n    counts = {t['name']: c for t, c in zip(teams, counts)}\n    p.close()\n    session.close()\n    return counts\n\n\n\u30af\u30a8\u30ea\u306e\u6539\u5584\n\u4eca\u56de\uff0c\u30c1\u30fc\u30e0\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30af\u30a8\u30ea\u3092\u6295\u3052\u3066\u3044\u307e\u3059\u304c\uff0c\u305d\u3082\u305d\u3082\nSELECT DISTINCT(team.id), team.name, COUNT(*)\nFROM user JOIN team ON team.id = user.team_id\nWHERE user.age < 50 GROUP BY team.id;\n\n\u3068\u3059\u308c\u3070\u6295\u3052\u308b\u30af\u30a8\u30ea\u306f\u4e00\u56de\u3067\u3044\u3044\u306e\u3067\u4fee\u6b63\u3057\u307e\u3059\uff0e\nu = User.__table__.c\nt = User.__table__.c\nsel = select([func.distinct(t.id), t.name, func.count()])\\\n      .select_from(User.__table__.join(Team.__table__, t.id == u.team_id))\\\n      .where(u.age < 50).group_by(t.id)\ncounts = {r[1]: r[2] for r in database.session().execute(sel)}\n\n\n\u6bd4\u8f03\nsqlAlchemy ORM: elapsed time: 0.9522 [sec]\nsqlAlchemy core: elapsed time: 0.7772 [sec]\nsqlAlchemy core with multiprocessing: elapsed time: 0.0733 [sec]\n--\nsqlAlchemy core with fixed query: elapsed time: 0.2207 [sec]\n\n\u4eca\u5ea6\u306fcore\u3092\u4f7f\u3046\u307b\u3046\u304cORM\u3088\u308a\u82e5\u5e72\u901f\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\u4e26\u5217\u5316\u3059\u308b\u3068\u5927\u4f5310\u500d\u7a0b\u5ea6\u901f\u304f\u306a\u308b\u3088\u3046\u3067\u3059\uff0e\u307e\u305f\uff0c\u30af\u30a8\u30ea\u3092\u6539\u826f\u3057\u4e00\u56de\u6295\u3052\u308c\u3070\u6e08\u3080\u3088\u3046\u306b\u3057\u305f\u5834\u5408\uff0c\u5143\u306e\u30af\u30a8\u30ea\u3088\u308a\u306f\u4e09\u500d\u5f37\u901f\u304f\u306a\u3063\u305f\u3082\u306e\u306e\uff0c\u4e26\u5217\u5316\u3057\u305f\u3082\u306e\u306b\u306f\u9060\u304f\u53ca\u3073\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\n\n\u304a\u307e\u30512. \u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u30af\u30a8\u30ea\n\u5148\u307b\u3069\u306fcore\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\uff0c\u30c1\u30fc\u30e0\u3054\u3068\u306b\u5e74\u9f62\u9ad8\u3044\u9806\u306b100\u540d\u53d6\u5f97\u3057\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\uff0e\n[{'id': 1, 'name': 'A', 'users': [{'id': 400, 'name': 'Kevin', 'age': 32}, {...}, ...]},\n {'id': 2, 'name': 'B', 'users': [...]},\n  ...]\n\n\u30b3\u30fc\u30c9\u306f\u7701\u304d\u307e\u3059\u304c\uff08\u8a73\u3057\u304f\u306fgithub\u306e\u65b9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\uff0c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\nsqlAlchemy ORM: elapsed time: 0.9782 [sec]\nsqlAlchemy core: elapsed time: 0.8864 [sec]\nsqlAlchemy core with multiprocessing: elapsed time: 0.0807 [sec]\n\n\u3053\u306e\u4f8b\u306e\u5834\u5408\uff0cORM\u3068core\u306e\u5dee\u304c0.1sec\u7a0b\u5ea6\u306a\u306e\u3067\u305d\u3053\u307e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\uff0c100\u4e07\u4ef6\u3067\u3053\u308c\u304f\u3089\u3044\u306e\u5dee\u306a\u306e\u3067\uff0c\u3082\u3063\u3068\u30af\u30a8\u30ea\u304c\u8907\u96d1\u306b\u306a\u308b\u30fb\u4ef6\u6570\u304c\u591a\u304f\u306a\u308b\u5834\u5408\u306fsqlalchemy.core\u3092\u4f7f\u3046\u30fb\u4e26\u5217\u5316\u3059\u308b\u306e\u304c\u6709\u7528\u305d\u3046\u3067\u3059\uff0e\n\n\u304a\u308f\u308a\u306b\n\u4ee5\u4e0a\uff0cINSERT\u7de8\uff0cSELECT\u7de8\u3068\u898b\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u307e\u3068\u3081\u308b\u3068\uff0c\n\n\u307e\u305a\u306fsql\uff0c\u30af\u30a8\u30ea\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\nInsert\u306f\u30b3\u30fc\u30c9\u91cf\u3082\u305d\u3053\u307e\u3067\u5897\u3048\u305a\uff0c\u901f\u5ea6\u306f5,6\u500d\u306b\u306a\u308b\u305f\u3081core\u3092\u4f7f\u3046\u306e\u304c\u3088\u3055\u305d\u3046\uff0e\nbulk insert\u306f\u5206\u5272\u633f\u5165\u3057\u3066\u3082\u901f\u304f\u306a\u3089\u306a\u3044\nSelect\u306fORM\u304b\u3089core\u306b\u79fb\u884c\u3059\u308b\u306810%\u8fd1\u304f\u9ad8\u901f\u5316\u3067\u304d\u308b\u304c\uff0c\u30b3\u30fc\u30c9\u91cf\u304c\u5897\u5927\u3059\u308b\uff0e\nSelect\u3092\u4e26\u5217\u5316\u3059\u308b\u3068\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u304c\u53ef\u80fd\uff08\u4eca\u56de\u306f10\u500d\u8fd1\u3044\u7d50\u679c\u304c\u3067\u307e\u3057\u305f\u304c\uff0c\u3053\u306e\u8fba\u308a\u306f\u306e\u30de\u30b7\u30f3\u6027\u80fd\u306b\u3088\u308a\u5927\u304d\u304f\u5909\u308f\u308b\u3068\u304a\u3082\u308f\u308c\u307e\u3059\uff09\n\n\u3067\u3057\u305f\uff0eORM\u306e\u826f\u3055\u306f\u307b\u307c\u6bba\u3057\u3066\u3057\u307e\u3046\u3057\uff0c\u3082\u306f\u3084\u5225\u306e\u8a00\u8a9e\u3092\u4f7f\u3048\u3070\u3044\u3044\u3068\u3044\u3046\u8a71\u3082\u3042\u308a\u307e\u3059\u304c\uff0cpython\u3092\u4f7f\u308f\u3056\u308b\u3092\u3048\u306a\u3044\u6642\u306f\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5185\u5bb9\u306b\u5408\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u3089\u308c\u308b\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u306d\uff0e\n\n\u53c2\u8003\u6587\u732e\n\nSQL\u3092\u901f\u304f\u3059\u308b\u305e(http://www.geocities.jp/mickindex/database/db_optimize.html)\nSQLAlchemy ORM \u3067\u30af\u30a8\u30ea\u751f\u6210\u306e\u9ad8\u901f\u5316(http://qiita.com/methane/items/342264e6b564f06abfe7)\nPython sqlalchemy \u301c \u5909\u6570 \u304c\u57cb\u3081\u8fbc\u307e\u308c\u305f sql\u6587\u3092 sqlalchemy \u306e session.execute() \u306b\u6e21\u3057\u3066\u3001\u52d5\u7684SQL\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b(http://qiita.com/HirofumiYashima/items/9f459950ab9c878f7f21)\nSQL Alchemy\u3092\u9b54\u6539\u9020\u3057\u305f(http://qiita.com/haminiku/items/895b5d06befc9c8c8c51)\n\u6f22\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u9053(http://nippondanji.blogspot.jp/2010/03/innodbcount.html)\n\n# \u306f\u3058\u3081\u306b\n\npython\u304b\u3089MySQL\u3092\u53e9\u304f\u969b\uff0c\u4f55\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304b\uff1f[SQLAlchemy](http://www.sqlalchemy.org/),[Django](http://djangoproject.jp/),[peewee](http://docs.peewee-orm.com/en/latest/)\u3042\u305f\u308a\u3092\u4f7f\u3063\u3066\u3044\u308b\u65b9\u304c\u591a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff0e\u79c1\u306f\u8272\u3005\u4f7f\u3063\u3066\u307f\u3066\u7d50\u5c40SQLAlchemy\u306b\u843d\u3061\u7740\u3044\u3066\u3044\u307e\u3059\u304c\uff0c\u4f55\u5343\u4e07\uff0c\u4f55\u5104\u30aa\u30fc\u30c0\u306e\u30c7\u30fc\u30bf\u306b\u306a\u308b\u3068\u51e6\u7406\u304c\u9045\u304f\u975e\u5e38\u306b\u3084\u3063\u304b\u3044\u3067\u3059\uff0e\n\n\u306a\u306e\u3067\u4eca\u56de\u306f\uff08\u5927\u304d\u306a\u30c7\u30fc\u30bf\u306bsql\u4f7f\u3046\u306a\u3068\u304b\u9ad8\u901f\u51e6\u7406\u306bpython\u4f7f\u3046\u306a\u3068\u3044\u3046\u8a71\u306f\u4e00\u65e6\u7f6e\u3044\u3066\u304a\u3044\u3066\uff09\uff0cSQLAlchemy\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u51e6\u7406\u3092\u3044\u304b\u306b\u9ad8\u901f\u306b\u3059\u308b\u304b\uff0c\u4f55\u9805\u76ee\u304b\u306b\u5206\u3051\u3066\u5099\u5fd8\u9332\u3092\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\n\nSQLAlchemy\u3092~\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\uff0cSQLAlchemy\u3092\u4f7f\u3063\u3066DB\u306b\u30c7\u30fc\u30bf\u3092INSERT,SELECT\u3059\u308b\u969b\u306epython\u9ad8\u901f\u5316TIPS\u3054\u3063\u305f\u716e\u3067\u3059\uff0e\u672c\u5f53\u306f\u8a18\u4e8b\u3092\u5206\u3051\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u3067\u3059\u304c\uff0c\u81ea\u5206\u3067\u898b\u8fd4\u3059\u969b\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u307b\u3046\u304c\u5b09\u3057\u3044\u306e\u3067\u3053\u3046\u3057\u307e\u3057\u305f\uff0e\n\n\u306a\u304a\uff0c\u4eca\u56de\u4f7f\u7528\u3059\u308b\u30b3\u30fc\u30c9\u306f\u5168\u3066[github](https://github.com/yukiB/compare-sqlalchemy-speed)\u306b\u304a\u3044\u3066\u3042\u308b\u306e\u3067\uff0c\u3088\u3051\u308c\u3070\u305d\u3061\u3089\u3082\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0e\n\n# \u5b9f\u884c\u74b0\u5883\n\n- Ubuntu 16.04.1\n- Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz\n- \u4eee\u60f38\u30b3\u30a2\u3001\u7269\u74064\u30b3\u30a2\n- Python 3.5.2\n\n# DB\u69cb\u9020\n\n\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u3067\u4f7f\u7528\u3059\u308bDB\u69cb\u9020\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n##### user table\n\n| id  | name  |  age  | team_id |created_at|updated_at|\n|:---:|:-----:|:-----:|:-------:|:--------:|:--------:|\n|  1  | John1 |  12   |    4    |1486030539|1486030539|\n|  2  |Kevin2 |  54   |    12   |1486030539|1486030539|\n|...\n\n##### team table\n\n| id  | name  |created_at|updated_at|\n|:---:|:-----:|:--------:|:--------:|\n|  1  | A |1486030539|1486030539|\n|  2  | B |1486030539|1486030539|\n|...\n\nuser\u306fteam\u306e\u5916\u90e8\u30ad\u30fc\u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff0e\n\n# INSERT\u7de8\n\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092team, user\u30c6\u30fc\u30d6\u30eb\u306b\u767b\u9332\u3057\u307e\u3059\uff0e\n\n```py3\nteam_list = ['A', 'B',...,'Z']\nuser_list = [('John', 14, 'C'), ...]\n```\n\n\u3068\u3044\u3046\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\uff0e\nteam\u6570\u306fA~Z\u306e26\uff0cuser\u6570\u306f10\u4e07\u3067\u3059\uff0e\n\n## 0. 1\u3064\u305a\u3064SQLAlchemy Table object\u3092\u4f5c\u3063\u30661\u3064\u305a\u3064Insert\n\n\u3055\u3059\u304c\u306b\u3053\u3093\u306a\u3084\u308a\u65b9\u306f\u6700\u521d\u304b\u3089\u3057\u307e\u305b\u3093\u304c\uff0c\u6bd4\u8f03\u306e\u305f\u3081\u306b\u3053\u3053\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\uff0e\n\n```py3\nclass Base(object):\n\n    def __iter__(self):\n        return iter(self.__dict__.items())\n\n    def dict(self):\n        return self.__dict__\n\n    @classmethod\n    def query(cls):\n        if not hasattr(cls, \"_query\"):\n            cls._query = database.session().query_property()\n        return cls._query\n```\n\n```py3\nclass User(Base):\n\n    def __repr__(self):\n        return '<User %r>' % (self.id)\n\n    def __init__(self, name, age, team):\n        self.name = name\n        self.age = age\n        self.team = team\n        self.updated_at = time.time()\n        self.created_at = time.time()\n\n    @staticmethod\n    def create_dict(name, age, team_id):\n        return {'name': name, 'age': age, 'team_id': team_id,\n                'updated_at': time.time(), 'created_at': time.time()}\n\n\nsignup_user = Table('user', metadata,\n                    Column('id', BigInteger, nullable=False,\n                           primary_key=True, autoincrement=True),\n                    Column('name', Unicode(255), nullable=False),\n                    Column('age', Integer, nullable=False),\n                    Column('team_id', ForeignKey('team.id'), nullable=False),\n                    Column('updated_at', BigInteger, nullable=False),\n                    Column('created_at', BigInteger, nullable=False))\n\nmapper(User, signup_user,\n       properties={\n           'id': signup_user.c.id,\n           'name': signup_user.c.name,\n           'age': signup_user.c.age,\n           'team': relationship(Team),\n           'updated_at': signup_user.c.updated_at,\n           'created_at': signup_user.c.created_at\n       })\n\nUser.__table__ = signup_user\n```\n\n\u306e\u3088\u3046\u306bTable\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\uff0eDB\u5074\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u6e96\u5099\u306f\u3053\u3093\u306a\u304b\u3093\u3058\n\n```py3\nfrom sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nmetadata = MetaData()\nengine = create_engine(uri, encoding='utf-8', pool_recycle=3600)\nsession = scoped_session(sessionmaker(autocommit=False,\n                                               autoflush=True,\n                                               expire_on_commit=False,\n                                               bind=_engine))\n\nmetadata.create_all(bind=_engine)\n```\n\nteam\u3092\u767b\u9332\u3059\u308b\u90e8\u5206\u306f\u7701\u7565\u3057\u307e\u3059\u304c\uff0c\n\n```py3\ndef insert_user(name, age, team):\n    u = User(name, age, team)\n    session.add(u)\n    session.commit()\n\nteams = Team.query().all()\n# team_dict = {'A': <Team1>, 'B': <Team2>, ...}\nteam_dict = {t.name: t for t in teams}\n[insert_user(d[0], d[1], team_dict[d[2]]) for d in data_list]\n```\n\n\u306e\u3088\u3046\u306b1\u3064\u305a\u3064User\u3092\u4f5c\u6210\u3057\uff0cadd, commit\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n## 1. \u8907\u6570\u307e\u3068\u3081\u3066Insert\uff0e\n\n\u660e\u3089\u304b\u306b0.\u306f\u52b9\u7387\u304c\u60aa\u3044\u306e\u3067\uff0c\u8907\u6570\u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u6c17\u306b\u8ffd\u52a0\u3067\u304d\u308b`add_all`\u3092\u4f7f\u3044\u307e\u3059\uff0e\n\n```py3\nusers = [User(d[0], d[1], team_dict[d[2]]) for d in data_list]\ndatabase.session().add_all(users)\ndatabase.session().commit()\n```\n\n\u30b3\u30fc\u30c9\u3068\u3057\u3066\u3082\u3060\u3044\u3076\u30b9\u30c3\u30ad\u30ea\u3057\u307e\u3057\u305f\uff0e\n\n## 2. bulk insert\n\nSQLAlchemy\u306eORM\u306b\u306fbulk_save_objects\u304c\u3042\u308a\u307e\u3059 \uff0e\n\n```py3\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass UserTable(Base):\n    __tablename__ = \"user\"\n    id = Column(BigInteger,  nullable=False,\n                primary_key=True, autoincrement=True)\n    name = Column(Unicode(255), nullable=False)\n    age = Column(Integer, nullable=False)\n    team_id = Column(BigInteger, nullable=False)\n    updated_at = Column(BigInteger, nullable=False)\n    created_at = Column(BigInteger, nullable=False)\n```\n\n\u306e\u3088\u3046\u306bTable\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\uff0c\n\n```\nsession.bulk_save_objects(\n    [UserTable(name=d[0],\n               age=d[1],\n               team_id=team_dict[d[2]].id,\n               updated_at = time.time(),\n               created_at = time.time())\n     for d in data_list], return_defaults=True)\nsession.commit()\n```\n\n\u306e\u3088\u3046\u306b\u633f\u5165\u3057\u307e\u3059\uff0e\u5916\u90e8\u30ad\u30fc\u7b49\u306e\u6271\u3044\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n## 3. sqlalchemy.core\u3092\u4f7f\u3046\n\nORM\u306f\u4f7f\u3044\u3084\u3059\u304f\uff0c\u30b3\u30fc\u30c9\u3082\u77ed\u304f\u3067\u304d\u308b\u4e0a\uff0crollback\u306a\u3069\u306e\u7d30\u304b\u3044\u5236\u5fa1\u3092\u88cf\u5074\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u7b49\u69d8\u3005\u306a\u5229\u70b9\u3092\u6709\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u30af\u30a8\u30ea\u751f\u6210\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5927\u304d\u304f\u9ad8\u901f\u5316\u3092\u8003\u3048\u308b\u6642\u306b\u306f\u30cd\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\uff0e [sqlalchemy.core](http://docs.sqlalchemy.org/en/latest/core/tutorial.html)\u3092\u4f7f\u3046\u3068\u624b\u9593\u306f\u5897\u3048\u307e\u3059\u304c\uff0cORM\u3092\u4f7f\u3046\u3088\u308a\u3082\u9ad8\u901f\u306b\u30af\u30a8\u30ea\u3092\u767a\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n```py3\nusers = [{'name':d[0], 'age': d[1], 'team_id': team_dict[d[2]]['id'],\n          'updated_at': time.time(), 'created_at': time.time()} for d in data_list]\nsession.execute(User.__table__.insert(), users)\nsession.commit()\n```\n\n## \u6bd4\u8f03\n\n0~3\u307e\u3067\u3092\u307e\u3068\u3081\u3066\u901f\u5ea6\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n```\nSqlAlchemy ORM: elapsed time of insertion: 62.205 [sec]\nSqlAlchemy ORM multi insert: elapsed time of insertion: 1.421 [sec]\nSqlAlchemy ORM bulk insert: elapsed time of insertion: 1.170 [sec]\nSqlAlchemy core bulk insert: elapsed time of insertion: 0.261 [sec]\n```\n\nsqlalchemy.core...\u3000\u5727\u5012\u7684...!!\u3000bulk insert\u3068\u6bd4\u3079\u3066\u30825,6\u500d\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\nORM\u3092\u4f7f\u3046\u306b\u3057\u3066\u3082bulk insert\u3092\u4f7f\u3046\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u306d\uff0e\n\n## \u304a\u307e\u3051. bulk insert\u306e\u5206\u5272\u306f\u4e0d\u8981\uff1f\n\nbulk insert\u306e\u969b\uff0c\u3042\u308b\u7a0b\u5ea6\u5927\u304d\u3044\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\u969b\u306f\u5206\u5272\u3057\u305f\u307b\u3046\u304c\u901f\u3044\uff0c\u307f\u305f\u3044\u306a\u8a71\u3092\u3069\u3053\u304b\u3067\u805e\u3044\u305f\u3053\u3068\u3042\u308b\u6c17\u304c\u3057\u305f\u306e\u3067sqlalchemy.core\u3092\u4f7f\u3063\u3066\u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f(100\u4e07\u4ef6)\uff0e\n\n```\nSqlAlchemy core bulk insert (10): elapsed time of insertion: 51.066 [sec]\nSqlAlchemy core bulk insert (20): elapsed time of insertion: 37.913 [sec]\nSqlAlchemy core bulk insert (50): elapsed time of insertion: 27.323 [sec]\nSqlAlchemy core bulk insert (100): elapsed time of insertion: 23.954 [sec]\nSqlAlchemy core bulk insert (150): elapsed time of insertion: 22.607 [sec]\nSqlAlchemy core bulk insert (200): elapsed time of insertion: 21.853 [sec]\nSqlAlchemy core bulk insert (500): elapsed time of insertion: 20.139 [sec]\nSqlAlchemy core bulk insert (750): elapsed time of insertion: 19.399 [sec]\nSqlAlchemy core bulk insert (1000): elapsed time of insertion: 19.362 [sec]\nSqlAlchemy core bulk insert (5000): elapsed time of insertion: 19.493 [sec]\nSqlAlchemy core bulk insert (10000): elapsed time of insertion: 19.387 [sec]\nSqlAlchemy core bulk insert (20000): elapsed time of insertion: 18.983 [sec]\nSqlAlchemy core bulk insert (50000): elapsed time of insertion: 19.641 [sec]\nSqlAlchemy core bulk insert (100000): elapsed time of insertion: 19.022 [sec]\nSqlAlchemy core bulk insert (500000): elapsed time of insertion: 19.837 [sec]\n```\n\n\u3046\u30fc\u3093\uff0c\u3069\u3046\u3084\u3089\u6c17\u306e\u305b\u3044\u3060\u3063\u305f\u307f\u305f\u3044\u3067\u3059...\n\n# SELECT\u7de8\n\n\u5148\u307b\u3069\u767b\u9332\u3057\u305fteam, user\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\uff0e\nteam\u6570\u306fA~Z\u306e26\uff0cuser\u6570\u306f100\u4e07\u3067\u3059\uff0e\n\n\u307e\u305a\u306f\u5358\u7d14\u306b\uff0c\u5e74\u9f62\u9ad8\u3044\u9806\u306b`[{'id': 10, 'name': 'John', 'age': 34, 'team': 'K'}, {...}, ...]`\n\u306e\u3088\u3046\u306a\u8f9e\u66f8\u30ea\u30b9\u30c8\u3092limit\uff08\u4eca\u56de\u306f100\uff09\u4ef6\u8fd4\u3059\u51e6\u7406\u3092\u3064\u304f\u308a\u307e\u3059\uff0e\n\n## 0. MySQL\u5074\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0(Index\u7b49)\n\n\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u307e\u305a\u306f\u3057\u3063\u304b\u308aMySQL\u5074\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3057\u307e\u3057\u3087\u3046\uff0e\n\u4eca\u56de\u306e\u4f8b\u3067\u306fuser.age\u306bindex\u3092\u8cbc\u308b\u3060\u3051\u3067\u7d0410\u500d\u51e6\u7406\u304c\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\uff0e\n\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u95a2\u3057\u3066\u306f\u3059\u3067\u306b\u69d8\u3005\u306a\u8a18\u4e8b\u304c\u3042\u308b\u306e\u3067\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\uff0e\n\n## 1. ORM\u3092\u4f7f\u7528\n\n```py3\nusers = User.query().order_by(desc(User.age)).limit(limit).all()\nresult = [{'id': u.id, 'name': u.name, 'age': u.age, 'team': u.team.name}\n          for u in users]\n```\n\n\u77ed\u3044\uff01\u3000\u3044\u3044\u3067\u3059\u306d\u30fc\uff0e\u5916\u90e8\u30ad\u30fc\u3067\u7e4b\u304c\u3063\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u307e\u305f\u304c\u308b\u3088\u3046\u306a\u5834\u5408\u306f\u7279\u306b\u30b3\u30fc\u30c9\u304c\u77ed\u304f\u306a\u308b\u306e\u3067\u3042\u308a\u304c\u305f\u3044\u3067\u3059\uff0e\n\n## 2. sqlalchemy.core\u3092\u4f7f\u7528\n\nsqlalchemy\u306eselect\u95a2\u6570\u3092\u7528\u3044\u307e\u3059\uff0e\n\n```py3\nfrom sqlalchemy import select, desc, and_, func\n\nu = User.__table__.c\nt = Team.__table__.c\nsel = select([u.id, u.name, u.age, t.name])\\\n       .select_from(User.__table__.join(Team.__table__, t.id == u.team_id))\\\n       .order_by(desc(u.age)).limit(limit)\nresult = [{'id': r[0], 'name': r[1], 'age': r[2], 'team': r[3]}\n          for r in session.execute(sel)]\n```\n\n\u3060\u3044\u3076\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\n\n## 3. multiprocessing\u4f75\u7528\n\n\u3053\u306e\u4f8b\u3067\u306fsql\u51e6\u7406\u3068\u76f4\u63a5\u306f\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\uff0c\u30c7\u30fc\u30bf\u6570\u304c\u5897\u3048\u3066\u304d\u305f\u5834\u5408\uff0c\u4e26\u5217\u51e6\u7406\u3092\u304b\u307e\u305b\u308b\u3068\u5287\u7684\u306b\u51e6\u7406\u901f\u5ea6\u304c\u6539\u5584\u3057\u307e\u3059\uff0e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f[\u4ee5\u524d\u8a18\u4e8b\u3092\u66f8\u3044\u305f](http://qiita.com/yukiB/items/203a6248c2d466b80d38)\u306e\u3067\u3088\u308d\u3057\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0e\n\n```py3\nfrom multiprocessing import Pool\nimport multiprocessing as multi\n\n\ndef get_user(r):\n    return {'id': r[0], 'name': r[1], 'age': r[2], 'team': r[3]}\n\n\ndef select_user_multi():\n    u = User.__table__.c\n    t = Team.__table__.c\n    sel = select([u.id, u.name, u.age, t.name])\\\n          .select_from(User.__table__.join(Team.__table__, t.id == u.team_id))\\\n          .order_by(desc(u.age)).limit(limit)\n    p = Pool(multi.cpu_count())\n    result = p.map(get_user, session.execute(sel))\n    p.close()\n    return result\n```\n\n## \u6bd4\u8f03\n\n```\nsqlAlchemy ORM: elapsed time: 0.3291 [sec]\nsqlAlchemy core: elapsed time: 0.5837 [sec]\nsqlAlchemy core with multiprocessing: elapsed time: 0.0096 [sec]\n```\n\n\u3042\u308c...\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\u30af\u30a8\u30ea\u304c\u5358\u7d14\u3060\u3063\u305f\u304b\u3089\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0emultiprocessing\u3092\u304b\u307e\u305b\u305f\u7d50\u679c\u306f\u3060\u3044\u3076\u901f\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\n\n## \u304a\u307e\u30511. count\n\n\u7d9a\u3044\u3066\uff0cteam\u3054\u3068\u306euser\u6570\u306e\u96c6\u8a08\u3092\u3057\u3066\u307f\u307e\u3059\uff0e\u5c11\u3057\u30af\u30a8\u30ea\u3092\u8907\u96d1\u306b\u3057\u3066\uff0c\u305d\u308c\u305e\u308c\u306e\u30c1\u30fc\u30e0\u306b\u5c5e\u3057\u3066\u3044\u308b50\u6b73\u672a\u6e80\u306e\u30e6\u30fc\u30b6\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057`{'A': 1400, 'B': 2122, ....}`\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u51e6\u7406\u3092\u304a\u3053\u306a\u3044\u307e\u3059\uff0e\n\n\u306a\u304a\uff0c\u30ab\u30a6\u30f3\u30c8\u51e6\u7406\u306e\u9ad8\u901f\u5316\u81ea\u4f53\u306f\u3053\u3061\u3089\uff08[InnoDB\u3067COUNT()\u3092\u6271\u3046\u969b\u306e\u6ce8\u610f\u4e8b\u9805\u3042\u308c\u3053\u308c\u3002](http://nippondanji.blogspot.jp/2010/03/innodbcount.html)\uff09\u304c\u5927\u5909\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\n\n### ORM\n\n```py3\ndef select_teams_orm():\n    return Team.query().all()\n\nteams = select_teams_orm()\ncounts = {tm.name: User.query()\\\n              .filter(and_(User.team == tm, User.age < 50)).count()\\\n              for tm in teams}\n```\n\n\u76f8\u5909\u308f\u3089\u305a\u77ed\u3044\uff01\n\n### sqlalchemy.core\n\n```py3\ndef select_teams_core():\n    t = Team.__table__.c\n    sel = select([t.id, t.name]).select_from(Team.__table__)\n    res = session.execute(sel)\n    result = [{'id': r[0], 'name': r[1]} for r in res]\n    return result\n\nteams = select_teams_core()\nsess = lambda sel: session.execute(sel)\nu = User.__table__.c\ncounts = {tm['name']: sess(\n        select([func.count()]).select_from(User.__table__)\\\n        .where(and_(u.team_id == tm['id'], u.age < 50))\\\n).scalar() for tm in teams}\n```\n\n\u308f\u304b\u308a\u306b\u304f\u3044\uff011\u30eb\u30fc\u30d7\u3067\u6e08\u307e\u305b\u308b\u305f\u3081\u306b\u4e0a\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u5206\u89e3\u3059\u308b\u3068\n\n```py3\ndef create_query(team_id): # \u30af\u30a8\u30ea\u4f5c\u6210\u3000team id\u3068user age\u3067\u7d5e\u308a\u8fbc\u307f\n    u = User.__table__.c\n    return select([func.count()]).select_from(User.__table__)\\\n             .where(add_(u.team_id == team_id, u.age < 50))\n\nqueries = [create_query(tm['id']) for tm in teams] # \u30c1\u30fc\u30e0\u3054\u3068\u306b\u30af\u30a8\u30ea\u4f5c\u6210\ncounts = [session.execute(q) for q in queries] # \u30af\u30a8\u30ea\u767a\u884c\nresult = [{tm['name']: c.scalar()} for tm,c in zip(teams,counts)] # {'A': count, ...} \u8f9e\u66f8\u4f5c\u6210\n```\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\uff0e\u307e\u305f\u3060\u3044\u3076\u30b3\u30fc\u30c9\u91cf\u304c\u5897\u3048\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\n\n### multiprocessing\n\n\u4eca\u5ea6\u306fSELECT\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\u3068\u3053\u308d\u304b\u3089\u4e26\u5217\u5316\u3057\u3066\u307f\u307e\u3059\uff0e\n\u6ce8\u610f\u70b9\u306f\uff0c**Joblib\u306eParallelize\u306f\u4f7f\u3048\u306a\u3044\uff0c`scoped_session`\u3067\u4f5c\u6210\u3057\u305fsession\u306f\u4e26\u5217\u51e6\u7406\u5185\u3067\u306f\u4f7f\u3048\u306a\u3044**\uff0c\u306e\u4e8c\u70b9\u3067\u3059\uff0e\n\n```py3\nsession = sessionmaker(autocommit=False, # scoped_session \u306f\u30c0\u30e1\n                       autoflush=True,\n                       expire_on_commit=False,\n                       bind=_engine)\n\ndef count_user(team):\n    u = User.__table__.c\n    sel = select([func.count()]).select_from(User.__table__)\\\n          .where(and_(u.team_id == team['id'], u.age < 50))\n    result = session.execute(sel).scalar()\n    return result\n\n\ndef count_user_multi():\n    teams = select_teams_core()\n    p = Pool(multi.cpu_count())\n    counts = p.map(count_user, teams)\n    counts = {t['name']: c for t, c in zip(teams, counts)}\n    p.close()\n    session.close()\n    return counts\n```\n\n#### \u30af\u30a8\u30ea\u306e\u6539\u5584\n\n\u4eca\u56de\uff0c\u30c1\u30fc\u30e0\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30af\u30a8\u30ea\u3092\u6295\u3052\u3066\u3044\u307e\u3059\u304c\uff0c\u305d\u3082\u305d\u3082\n\n```sql\nSELECT DISTINCT(team.id), team.name, COUNT(*)\nFROM user JOIN team ON team.id = user.team_id\nWHERE user.age < 50 GROUP BY team.id;\n```\n\u3068\u3059\u308c\u3070\u6295\u3052\u308b\u30af\u30a8\u30ea\u306f\u4e00\u56de\u3067\u3044\u3044\u306e\u3067\u4fee\u6b63\u3057\u307e\u3059\uff0e\n\n```py3\nu = User.__table__.c\nt = User.__table__.c\nsel = select([func.distinct(t.id), t.name, func.count()])\\\n      .select_from(User.__table__.join(Team.__table__, t.id == u.team_id))\\\n      .where(u.age < 50).group_by(t.id)\ncounts = {r[1]: r[2] for r in database.session().execute(sel)}\n```\n\n### \u6bd4\u8f03\n\n```\nsqlAlchemy ORM: elapsed time: 0.9522 [sec]\nsqlAlchemy core: elapsed time: 0.7772 [sec]\nsqlAlchemy core with multiprocessing: elapsed time: 0.0733 [sec]\n--\nsqlAlchemy core with fixed query: elapsed time: 0.2207 [sec]\n```\n\n\u4eca\u5ea6\u306fcore\u3092\u4f7f\u3046\u307b\u3046\u304cORM\u3088\u308a\u82e5\u5e72\u901f\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\u4e26\u5217\u5316\u3059\u308b\u3068\u5927\u4f5310\u500d\u7a0b\u5ea6\u901f\u304f\u306a\u308b\u3088\u3046\u3067\u3059\uff0e\u307e\u305f\uff0c\u30af\u30a8\u30ea\u3092\u6539\u826f\u3057\u4e00\u56de\u6295\u3052\u308c\u3070\u6e08\u3080\u3088\u3046\u306b\u3057\u305f\u5834\u5408\uff0c\u5143\u306e\u30af\u30a8\u30ea\u3088\u308a\u306f\u4e09\u500d\u5f37\u901f\u304f\u306a\u3063\u305f\u3082\u306e\u306e\uff0c\u4e26\u5217\u5316\u3057\u305f\u3082\u306e\u306b\u306f\u9060\u304f\u53ca\u3073\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\n\n## \u304a\u307e\u30512. \u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u30af\u30a8\u30ea\n\n\u5148\u307b\u3069\u306fcore\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\uff0c\u30c1\u30fc\u30e0\u3054\u3068\u306b\u5e74\u9f62\u9ad8\u3044\u9806\u306b100\u540d\u53d6\u5f97\u3057\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\uff0e\n\n```\n[{'id': 1, 'name': 'A', 'users': [{'id': 400, 'name': 'Kevin', 'age': 32}, {...}, ...]},\n {'id': 2, 'name': 'B', 'users': [...]},\n  ...]\n```\n\n\u30b3\u30fc\u30c9\u306f\u7701\u304d\u307e\u3059\u304c\uff08\u8a73\u3057\u304f\u306f[github](https://github.com/yukiB/compare-sqlalchemy-speed)\u306e\u65b9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\uff0c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n```\nsqlAlchemy ORM: elapsed time: 0.9782 [sec]\nsqlAlchemy core: elapsed time: 0.8864 [sec]\nsqlAlchemy core with multiprocessing: elapsed time: 0.0807 [sec]\n```\n\n\u3053\u306e\u4f8b\u306e\u5834\u5408\uff0cORM\u3068core\u306e\u5dee\u304c0.1sec\u7a0b\u5ea6\u306a\u306e\u3067\u305d\u3053\u307e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\uff0c100\u4e07\u4ef6\u3067\u3053\u308c\u304f\u3089\u3044\u306e\u5dee\u306a\u306e\u3067\uff0c\u3082\u3063\u3068\u30af\u30a8\u30ea\u304c\u8907\u96d1\u306b\u306a\u308b\u30fb\u4ef6\u6570\u304c\u591a\u304f\u306a\u308b\u5834\u5408\u306fsqlalchemy.core\u3092\u4f7f\u3046\u30fb\u4e26\u5217\u5316\u3059\u308b\u306e\u304c\u6709\u7528\u305d\u3046\u3067\u3059\uff0e\n\n# \u304a\u308f\u308a\u306b\n\n\u4ee5\u4e0a\uff0cINSERT\u7de8\uff0cSELECT\u7de8\u3068\u898b\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u307e\u3068\u3081\u308b\u3068\uff0c\n\n- \u307e\u305a\u306fsql\uff0c\u30af\u30a8\u30ea\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n- Insert\u306f\u30b3\u30fc\u30c9\u91cf\u3082\u305d\u3053\u307e\u3067\u5897\u3048\u305a\uff0c\u901f\u5ea6\u306f5,6\u500d\u306b\u306a\u308b\u305f\u3081core\u3092\u4f7f\u3046\u306e\u304c\u3088\u3055\u305d\u3046\uff0e\n- bulk insert\u306f\u5206\u5272\u633f\u5165\u3057\u3066\u3082\u901f\u304f\u306a\u3089\u306a\u3044\n- Select\u306fORM\u304b\u3089core\u306b\u79fb\u884c\u3059\u308b\u306810%\u8fd1\u304f\u9ad8\u901f\u5316\u3067\u304d\u308b\u304c\uff0c\u30b3\u30fc\u30c9\u91cf\u304c\u5897\u5927\u3059\u308b\uff0e\n- Select\u3092\u4e26\u5217\u5316\u3059\u308b\u3068\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u304c\u53ef\u80fd\uff08\u4eca\u56de\u306f10\u500d\u8fd1\u3044\u7d50\u679c\u304c\u3067\u307e\u3057\u305f\u304c\uff0c\u3053\u306e\u8fba\u308a\u306f\u306e\u30de\u30b7\u30f3\u6027\u80fd\u306b\u3088\u308a\u5927\u304d\u304f\u5909\u308f\u308b\u3068\u304a\u3082\u308f\u308c\u307e\u3059\uff09\n\n\u3067\u3057\u305f\uff0eORM\u306e\u826f\u3055\u306f\u307b\u307c\u6bba\u3057\u3066\u3057\u307e\u3046\u3057\uff0c\u3082\u306f\u3084\u5225\u306e\u8a00\u8a9e\u3092\u4f7f\u3048\u3070\u3044\u3044\u3068\u3044\u3046\u8a71\u3082\u3042\u308a\u307e\u3059\u304c\uff0cpython\u3092\u4f7f\u308f\u3056\u308b\u3092\u3048\u306a\u3044\u6642\u306f\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5185\u5bb9\u306b\u5408\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u3089\u308c\u308b\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u306d\uff0e\n\n# \u53c2\u8003\u6587\u732e\n\n\n- SQL\u3092\u901f\u304f\u3059\u308b\u305e(<http://www.geocities.jp/mickindex/database/db_optimize.html>)\n- SQLAlchemy ORM \u3067\u30af\u30a8\u30ea\u751f\u6210\u306e\u9ad8\u901f\u5316(<http://qiita.com/methane/items/342264e6b564f06abfe7>)\n- Python sqlalchemy \u301c \u5909\u6570 \u304c\u57cb\u3081\u8fbc\u307e\u308c\u305f sql\u6587\u3092 sqlalchemy \u306e session.execute() \u306b\u6e21\u3057\u3066\u3001\u52d5\u7684SQL\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b(<http://qiita.com/HirofumiYashima/items/9f459950ab9c878f7f21>)\n- SQL Alchemy\u3092\u9b54\u6539\u9020\u3057\u305f(<http://qiita.com/haminiku/items/895b5d06befc9c8c8c51>)\n- \u6f22\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u9053(<http://nippondanji.blogspot.jp/2010/03/innodbcount.html>)\n\n\n\n", "tags": ["python3", "sqlalchemy", "Python"]}