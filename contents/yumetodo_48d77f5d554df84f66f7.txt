{"context": " More than 1 year has passed since last update.\u914d\u5217\u3092\u91cd\u8907\u306a\u304f\u4e71\u6570\u3067\u57cb\u3081\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\u306a\u3093\u3067\u5510\u7a81\u306b\u305d\u3093\u306a\u8a71\u304c\u59cb\u307e\u3063\u305f\u304b\u3068\u3044\u3046\u3068\nC#\u3082\u3057\u304f\u306fC\u3067\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u6b32\u3057\u3044\u3067\u3059\u3002\u3010\u5185\u5bb9\u3011... - Yahoo!\u77e5\u6075\u888b\n\u306b\u56de\u7b54\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u304b\u3089\u3067\u3059\u3002C#\u306a\u3093\u3066\u77e5\u3089\u3093\u3057\u3001\u3044\u307e\u3069\u304dC\u3067\u66f8\u304f\u4eba\u306a\u3093\u3066\u5c45\u306a\u3044\u3067\u3057\u3087\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067C++11\u306e\u7bc4\u56f2\u3067\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u30fb\u30fb\u30fb\u306f\u3044\u305d\u3053\u3001\u4eca\u6642C++11\u306a\u3093\u3066\u3044\u3046\u592a\u53e4\u306e\u898f\u683c\u3067\u66f8\u304f\u306a\u3068\u304b\u8a00\u308f\u306a\u3044\u3002\n\u3068\u308a\u3042\u3048\u305aint\u578b\u306evector\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u306b\u3059\u308b\u306e\u3082\u3055\u3057\u3066\u5927\u5909\u3067\u306f\u306a\u3044\u3067\u3059\u306d\u3002\n\u4e0b\u306e3\u3064\u306e\u307b\u304b\u306b\u3055\u3089\u306b3\u3064\u306e\u65b9\u6cd5\u304c\nC++\u3067\u52b9\u7387\u3088\u304f\u91cd\u8907\u306e\u306a\u3044\u4e71\u6570\u5217\u3092\u751f\u6210\u3059\u308b\n\u3067\u63d0\u793a\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u3063\u3061\u306e\u65b9\u304c\u901f\u3044\u3067\u3059\u3002\n\n\u307e\u305a\u306f\u7d50\u8ad6\n\u3053\u308c\u4f7f\u3048\u3070\u3044\u3044\u3093\u3058\u3083\u306d\u3002\n\nrandseq.hpp\n#pragma once\n\n#include <random>\n#include <vector>\n#include <iostream>\n#include <cstdint>\n#include <algorithm>\n#include <stdexcept>\n#include <unordered_set>\n#include <functional>\n#include <limits>\n#include <type_traits>\n\nstd::mt19937 create_rand_engine(){\n    std::random_device rnd;\n    std::vector<std::uint_least32_t> v(10);// \u521d\u671f\u5316\u7528\u30d9\u30af\u30bf\n    std::generate(v.begin(), v.end(), std::ref(rnd));// \u30d9\u30af\u30bf\u306e\u521d\u671f\u5316\n    std::seed_seq seed(v.begin(), v.end());\n    return std::mt19937(seed);// \u4e71\u6570\u30a8\u30f3\u30b8\u30f3\n}\n\nnamespace detail {\n    template<typename T> auto diff(T n1, T n2) -> typename std::make_unsigned<T>::type {\n        static_assert(std::is_integral<T>::value, \"T is not integral.\");\n        if (n1 < n2) std::swap(n1, n2);\n        return static_cast<typename std::make_unsigned<T>::type>(n1 - n2);\n    }\n}\n\ntemplate<typename type> std::vector<type> make_rand_array_unique(const size_t size, type rand_min, type rand_max){\n    if(rand_min > rand_max) std::swap(rand_min, rand_max);\n    const auto max_min_diff = detail::diff(rand_max, rand_min) + 1;\n    if(max_min_diff < size) throw std::runtime_error(\"Invalid argument\");\n\n    std::vector<type> tmp;\n    auto engine = create_rand_engine();\n    std::uniform_int_distribution<type> distribution(rand_min, rand_max);\n\n    const size_t make_size = (static_cast<uintmax_t>(std::numeric_limits<double>::max()) < size) ? ((std::numeric_limits<size_t>::max() - size / 5) < size) ? size : size + size / 5 : static_cast<size_t>(size*1.2);\n    tmp.reserve(make_size);\n    while(tmp.size() < size){\n        while(tmp.size() < make_size) tmp.push_back(distribution(engine));\n        std::sort(tmp.begin(), tmp.end());\n        auto unique_end = std::unique(tmp.begin(), tmp.end());\n\n        if(size < static_cast<size_t>(std::distance(tmp.begin(), unique_end))){\n            unique_end = std::next(tmp.begin(), size);\n        }\n        tmp.erase(unique_end, tmp.end());\n    }\n\n    std::shuffle(tmp.begin(), tmp.end(), engine);\n    return tmp;\n}\n\ntemplate<typename type> std::vector<type> make_rand_array_select(const size_t size, type rand_min, type rand_max) {\n    if (rand_min > rand_max) std::swap(rand_min, rand_max);\n    const auto max_min_diff = detail::diff(rand_max, rand_min) + 1;\n    if (max_min_diff < size) throw std::runtime_error(\"Invalid argument\");\n\n    std::vector<type> tmp;\n    tmp.reserve(max_min_diff);\n\n    for (auto i = rand_min; i <= rand_max; ++i)tmp.push_back(i);\n\n    auto engine = create_rand_engine();\n    std::uniform_int_distribution<type> distribution(rand_min, rand_max);\n\n    for (size_t cnt = 0; cnt < size; ++cnt) {\n        size_t pos = std::uniform_int_distribution<size_t>(cnt, tmp.size() - 1)(engine);\n\n        if (cnt != pos) std::swap(tmp[cnt], tmp[pos]);\n    }\n    tmp.erase(std::next(tmp.begin(), size), tmp.end());\n\n    return tmp;\n}\n\ntemplate<typename type> std::vector<type> make_rand_array_just_shuffle(const size_t size, type rand_min, type rand_max) {\n    if (rand_min > rand_max) std::swap(rand_min, rand_max);\n    const auto max_min_diff = detail::diff(rand_max, rand_min) + 1;\n    if (max_min_diff != size) throw std::runtime_error(\"Invalid argument\");\n\n    auto engine = create_rand_engine();\n    std::uniform_int_distribution<type> distribution(rand_min, rand_max);\n    std::vector<type> re(size);\n    auto t = rand_min;\n    std::generate(re.begin(), re.end(), [&t]() { return t++; });\n    std::shuffle(re.begin(), re.end(), engine);\n    return re;\n}\n\ntemplate<typename type> std::vector<type> make_rand_array(const size_t size, type rand_min, type rand_max) {\n    if (rand_min > rand_max) std::swap(rand_min, rand_max);\n    const auto max_min_diff = detail::diff(rand_max, rand_min) + 1;\n    if (max_min_diff < size) throw std::runtime_error(\"Invalid argument\");\n\n    if (max_min_diff == size) return make_rand_array_just_shuffle(size, rand_min, rand_max);\n    else if (static_cast<uintmax_t>(std::numeric_limits<double>::max()) < max_min_diff || size < (max_min_diff * 0.04)) {\n        return make_rand_array_unique(size, rand_min, rand_max);\n    }\n    else {\n        return make_rand_array_select(size, rand_min, rand_max);\n    }\n}\n\n\n\u4f7f\u3044\u65b9\n#include <chrono>\n#include <utility>\n#include <string>\n#include\"randseq.hpp\"\n\ntemplate<class T>\nvoid print_elapsed_time(const std::string& str, T start, T end){\n    std::cout << str << \" : \"\n        << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()\n        << \" msec.\"\n        << std::endl;\n}\nint main(){\n    using clock = std::chrono::high_resolution_clock;\n\n    try{\n        for(auto val : {1, 5, 10, 16, 18, 19, 20, 100, 500}){\n            constexpr size_t array_num = 10000;\n            const int rand_max = val*array_num;\n            const int rand_min = -val*array_num;\n\n            std::cout << \"array_num : \" << array_num << \" rand_max : \" << rand_max << \" rand_min : \" << rand_min << std::endl;\n            const auto t0 = clock::now();\n\n            for(size_t cnt = 0; cnt < 100; ++cnt){\n                make_rand_array(array_num, rand_min, rand_max);\n            }\n\n            print_elapsed_time(\"make_rand_array\", t0, clock::now());\n        }\n    }\n    catch(const std::exception& er){\n        std::cerr << er.what() << std::endl;\n    }\n\n#ifdef _WIN32\n    system(\"pause\");\n#endif\n    return 0;\n}\n\n\n\u65b9\u6cd51 std::unordered_map\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u3063\u3066\u91cd\u8907\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u9811\u5f35\u308c\u3070noexcept\u306b\u3067\u304d\u308b\u3093\u3067\u3057\u3087\u3046\u304c\u3001\u9762\u5012\u305d\u3046\u306a\u306e\u3067\u3001\u3061\u3083\u3093\u3068catch\u3057\u3066\u3042\u3052\u3066\u304f\u3060\u3055\u3044\u3002\n\u3042\u3001\u3084\u305f\u3089\u9577\u3044\u306e\u306fshuffle\u3057\u305f\u307b\u3046\u304c\u901f\u305d\u3046\u306a\u3068\u304d\u306fshuffle\u3059\u308b\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u3061\u306a\u307f\u306bstd::random_shuffle\u306fC++14\u3067\u306f\u975e\u63a8\u5968\u306a\u306e\u3067std::shuffle\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u5927\u4e8b\u306a\u306e\u306f\u6700\u5f8c\u306eelse\u7bc0\u3002\nstd::map/std::unordered_map\u306ekey\u306e\u5b58\u5728\u78ba\u8a8d\u306fcount\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u304c\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u305d\u3046\u3044\u3048\u3070std::map\u3063\u3066\u5b58\u5728\u3057\u306a\u3044key\u3092operator[]\u3067\u53c2\u7167\u3059\u308b\u3068\u5024\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u521d\u671f\u5316\u3055\u308c\u305f\u72b6\u614b\u306e\u8981\u7d20\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u3093\u3067\u3059\u306d\u3002\u4fbf\u5229\u3002\nstd::map\u306e\u7b2c2\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5024\u9069\u5207\u306a\u4f8b\u304b\u3069\u3046\u304b\u306f\u308f\u304b\u308a\u307e\u305b... - Yahoo!\u77e5\u6075\u888b\n#include <vector>\n#include <unordered_map>\n#include <utility>\n#include <random>\n#include <cstdint>\n#include <algorithm>\n#include <stdexcept>\n#include <functional>\nstd::mt19937 create_rand_engine(){\n    std::random_device rnd;\n    std::vector<std::uint_least32_t> v(10);// \u521d\u671f\u5316\u7528\u30d9\u30af\u30bf\n    std::generate(v.begin(), v.end(), std::ref(rnd));// \u30d9\u30af\u30bf\u306e\u521d\u671f\u5316\n    std::seed_seq seed(v.begin(), v.end());\n    return std::mt19937(seed);// \u4e71\u6570\u30a8\u30f3\u30b8\u30f3\n}\nstd::unordered_map<int, size_t> make_index(const std::vector<int>& arr){\n    std::unordered_map<int, size_t> re_index;\n    for(const auto& i : arr) ++re_index[i];//\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20\u306b\u5bfe\u3057\u3066\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u306e\u30670\u306b\u306a\u308b\u304b\u3089\u3053\u308c\u3067\u3044\u3044\n    return re_index;\n}\nstd::vector<int> make_rand_array(const size_t size, int min, int max){\n    if(min > max) std::swap(min, max);\n    const size_t max_min_diff = static_cast<size_t>(max - min + 1);\n    if(max_min_diff < size) throw std::runtime_error(\"\u5f15\u6570\u304c\u7570\u5e38\u3067\u3059\");\n\n    auto engine = create_rand_engine();\n    std::vector<int> re(size);\n    if(max_min_diff == size){\n        auto i = min;\n        for(auto & r : re) r = i++;\n        std::shuffle(re.begin(), re.end(), engine);\n    }\n    else if(max_min_diff + 1U == size){\n        std::uniform_int_distribution<size_t> distribution(0, size - 1);// distribution\n        const auto point = distribution(engine);\n        auto tmp = min;\n        for(auto it = re.begin(); it < re.begin() + point; ++it, ++tmp) *it = tmp;\n        ++tmp;\n        for(auto it = re.begin() + point; it < re.end(); ++it, ++tmp) *it = tmp;\n        std::shuffle(re.begin(), re.end(), engine);\n    }\n    else{\n        std::uniform_int_distribution<int> distribution(min, max);// distribution\n        for(auto& r : re) r = distribution(engine);//\u4e71\u6570\u3067\u57cb\u3081\u308b\n        for(auto re_index = make_index(re); re_index.size() != re.size(); re_index = make_index(re)){//\u91cd\u8907\u306f\u65b0\u305f\u306a\u4e71\u6570\u3067\u57cb\u3081\u308b\n            for(auto& r : re) if(1 < re_index[r]){\n                r = distribution(engine);\n                --re_index[r];\n            }\n        }\n    }\n    return re;\n}\n\n\u4f7f\u7528\u4f8b\n#include <iostream>\n#include <exception>\nint main(){\n    try{\n        const auto arr = make_rand_array(12, 100, 1);\n        for(auto i : arr) std::cout << i << \", \";\n        std::cout << std::endl;\n    }\n    catch(const std::exception& er){\n        std::cerr << er.what() << std::endl;\n    }\n    return 0;\n}\n\n\n\u65b9\u6cd52 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u7dda\u5f62\u63a2\u7d22\u3057\u3066\u91cd\u8907\u30c1\u30a7\u30c3\u30af\u3059\u308b(AinoMegumi\u6c0f)\n\u53cb\u9054\u306a\u306e\u3067\u8a66\u3057\u306b\u30cd\u30bf\u632f\u308a\u3057\u305f\u3089\u66f8\u3044\u3066\u304f\u308c\u307e\u3057\u305f\u3002\n\u91cd\u8907\u3057\u306a\u3044\u4e71\u6570\u914d\u5217(C++14\u7248)\n\u3054\u3081\u3093\u3001\u5fae\u5999\u306b\u5909\u3048\u3055\u305b\u3066\u3002\n#include <random>\n#include <vector>\n#include <iostream>\n#include <cstdint>\n#include <algorithm>\n#include <stdexcept>\n#include <functional>\nstd::mt19937 create_rand_engine(){\n    std::random_device rnd;\n    std::vector<std::uint_least32_t> v(10);// \u521d\u671f\u5316\u7528\u30d9\u30af\u30bf\n    std::generate(v.begin(), v.end(), std::ref(rnd));// \u30d9\u30af\u30bf\u306e\u521d\u671f\u5316\n    std::seed_seq seed(v.begin(), v.end());\n    return std::mt19937(seed);// \u4e71\u6570\u30a8\u30f3\u30b8\u30f3\n}\n\nstd::vector<int> make_rand_array(const size_t size, int rand_min, int rand_max) {\n    if (rand_min > rand_max) std::swap(rand_min, rand_max);\n    const size_t max_min_diff = static_cast<size_t>(rand_max - rand_min + 1);\n    if(max_min_diff < size) throw std::runtime_error(\"\u5f15\u6570\u304c\u7570\u5e38\u3067\u3059\");\n\n    std::vector<int> re(size);\n    std::uniform_int_distribution<int> rand(rand_min, rand_max);\n    auto mt = create_rand_engine();\n    for (auto& i : re)i = rand(mt);\n    bool is_all_no_conflict = false;\n    do {    \n        is_all_no_conflict = true;\n        for (auto j = re.begin(); j != re.end(); ++j) {\n            for (auto k = j + 1; k != re.end(); ++k) {\n                if (*k == *j) {\n                    *k = rand(mt);\n                    is_all_no_conflict = false;\n                }\n            }\n        }\n    } while (!is_all_no_conflict);\n    return re;\n}\n\n\n\u65b9\u6cd53 std::unordered_set\u3092\u4f7f\u3046\n\u91cd\u8907\u3057\u306a\u3044\u4e71\u6570\u914d\u5217(Java\u7248/\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u6d3b\u7528?\u7248)\n\u3092\u307f\u3066\u3066\u3001java.util.HashSet\u4fbf\u5229\u3060\u306a\u3041\u3068\u601d\u3063\u3066\u305f\u3093\u3067\u3059\u304c\u3001\u3075\u3068C++\u306b\u305d\u308c\u304f\u3089\u3044\u3042\u308b\u3088\u306a\uff1f\u3068\u601d\u3063\u3066\u3050\u3050\u3063\u305f\u3089\ndata structures - Java HashSet equiv in c++ - Stack Overflow\n\u3048\uff1fstd::unordered_set\u3063\u3066\u30bd\u30fc\u30c8\u3057\u306a\u3044\u306e\uff1f\n\nC++11\u306eunordered_set\u3068\u3001set\u3068\u306e\u6240\u8981\u6642\u9593\u3092\u6bd4\u8f03\u3059\u308b - minus9d's diary\nunrodered_set\u306f\u3001set\u3068\u7570\u306a\u308a\u3001\u633f\u5165\u3057\u305f\u6570\u5b57\u3092\u30bd\u30fc\u30c8\u305b\u305a\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\n\u304a\u304a\u3001\u52dd\u3061\u78ba\u5b9a\u3084\u3093\uff01(\u5f8c\u8ff0:\u305d\u3046\u3067\u3082\u306a\u304b\u3063\u305f)\u3060\u308c\u3060\u3088\n\n\u914d\u5217\u3092\u91cd\u8907\u306a\u304f\u4e71\u6570\u3067\u57cb\u3081\u308b\u65b9\u6cd5\u306fstd::set/std::unordered_set\u306a\u3093\u304b\u3082\u8003\u3048\u3089\u308c\u308b\u3093\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u4f7f\u308f\u305a\u306b\u3084\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u4e71\u6570\u5165\u308c\u3066shuffle\u3059\u308b\u306e\u306f\u975e\u52b9\u7387\u7684\u306b\u601d\u3048\u308b\u306e\u3067\u3002(\u901f\u5ea6\u8a08\u6e2c\u3057\u3066\u306a\u3044orz)\n\n\u306a\u3093\u3066\u307b\u3056\u3044\u3066\u305f\u306e(\u79c1\u3060)\u3002\n#include <random>\n#include <vector>\n#include <iostream>\n#include <cstdint>\n#include <algorithm>\n#include <stdexcept>\n#include <unordered_set>\n#include <functional>\nstd::mt19937 create_rand_engine(){\n    std::random_device rnd;\n    std::vector<std::uint_least32_t> v(10);// \u521d\u671f\u5316\u7528\u30d9\u30af\u30bf\n    std::generate(v.begin(), v.end(), std::ref(rnd));// \u30d9\u30af\u30bf\u306e\u521d\u671f\u5316\n    std::seed_seq seed(v.begin(), v.end());\n    return std::mt19937(seed);// \u4e71\u6570\u30a8\u30f3\u30b8\u30f3\n}\nstd::vector<int> make_rand_array(const size_t size, int rand_min, int rand_max) {\n    if (rand_min > rand_max) std::swap(rand_min, rand_max);\n    const size_t max_min_diff = static_cast<size_t>(rand_max - rand_min + 1);\n    if (max_min_diff < size) throw std::runtime_error(\"\u5f15\u6570\u304c\u7570\u5e38\u3067\u3059\");\n\n    std::unordered_set<int> tmp;\n    auto engine = create_rand_engine();\n    std::uniform_int_distribution<int> distribution(rand_min, rand_max);\n    while (tmp.size() < size) tmp.insert(distribution(engine));\n    return std::vector<int>(tmp.begin(), tmp.end());\n}\n\n\n\u901f\u5ea6\u6bd4\u8f03\n\u3044\u3084\u3042\u3001\u4e0b\u898b\u308c\u3070\u308f\u304b\u308b\u3051\u3069\u3001\u3053\u3053\u307e\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3064\u304b\u3046\u3084\u3064\u304c\u9045\u3044\u3068\u306f\u601d\u308f\u306a\u304b\u3063\u305f\u3002\u306a\u3093\u3067\u3060\u308d\u3046\u306a\u3041\u30fb\u30fb\u30fb\u3002\u3044\u304f\u3089\u306a\u3093\u3067\u3082\u9045\u3059\u304e\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u3060\u308c\u304b\u6559\u3048\u3066\u304f\u3060\u3044\u3002\n\n\n\n\u9805\u76ee\n\u95a2\u6570\u540d\n\n\n\n\n\u65b9\u6cd51 : std::unordered_map\nmake_rand_array_1\n\n\n\u65b9\u6cd52 : \u7dda\u5f62\u63a2\u7d22\nmake_rand_array_2\n\n\n\u65b9\u6cd53 : std::unordered_set\nmake_rand_array_3\n\n\n\n\nclang 3.7.0 on Wandbox\n\nhttp://melpon.org/wandbox/permlink/hkHklM6K9GdTl2KY\nclang++ prog.cc -stdlib=libc++ -Wall -Wextra -O2 -march=native -std=c++11 \narray_num : 100000rand_max : 1000000rand_min : -10000\nmake_rand_array_1 : 372 msec.\nmake_rand_array_2 : 17811 msec.\nmake_rand_array_3 : 41 msec.\n\n\ngcc 5.2.0 on Wandbox\n\nhttp://melpon.org/wandbox/permlink/Syzbm0YgS8EuODxb\ng++ prog.cc -Wall -Wextra -O2 -march=native -std=c++11 \narray_num : 100000rand_max : 1000000rand_min : -10000\nmake_rand_array_1 : 338 msec.\nmake_rand_array_2 : 28659 msec.\nmake_rand_array_3 : 38 msec.\n\n\nVisual Studio 2015 Community on myPC\n\u3053\u308c\u3060\u3051\u81ea\u5206\u306ePC\u4e0a\u3067\u3059\u3002CPU\u306fIntel(R) Core(TM) i5-4200M\u3067\u3059\u3002\n\n/GS /GL /analyze- /W3 /Gy /Zc:wchar_t /Zi /Gm- /O2 /sdl /Fd\"Release\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"NDEBUG\" /D \"_CONSOLE\" /D \"_UNICODE\" /D \"UNICODE\" /errorReport:prompt /WX- /Zc:forScope /Gd /Oy- /Oi /MD /Fa\"Release\\\" /EHsc /nologo /Fo\"Release\\\" /Fp\"Release\\rand_array.pch\" \narray_num : 100000rand_max : 1000000rand_min : -10000\nmake_rand_array_1 : 163 msec.\nmake_rand_array_2 : 17249 msec.\nmake_rand_array_3 : 36 msec.\n\n\u914d\u5217\u3092\u91cd\u8907\u306a\u304f\u4e71\u6570\u3067\u57cb\u3081\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\u306a\u3093\u3067\u5510\u7a81\u306b\u305d\u3093\u306a\u8a71\u304c\u59cb\u307e\u3063\u305f\u304b\u3068\u3044\u3046\u3068\n[C#\u3082\u3057\u304f\u306fC\u3067\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u6b32\u3057\u3044\u3067\u3059\u3002\u3010\u5185\u5bb9\u3011... - Yahoo!\u77e5\u6075\u888b](http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q10150708440)\n\u306b\u56de\u7b54\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u304b\u3089\u3067\u3059\u3002C#\u306a\u3093\u3066\u77e5\u3089\u3093\u3057\u3001\u3044\u307e\u3069\u304dC\u3067\u66f8\u304f\u4eba\u306a\u3093\u3066\u5c45\u306a\u3044\u3067\u3057\u3087\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067C++11\u306e\u7bc4\u56f2\u3067\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u30fb\u30fb\u30fb\u306f\u3044\u305d\u3053\u3001\u4eca\u6642C++11\u306a\u3093\u3066\u3044\u3046\u592a\u53e4\u306e\u898f\u683c\u3067\u66f8\u304f\u306a\u3068\u304b\u8a00\u308f\u306a\u3044\u3002\n\n\u3068\u308a\u3042\u3048\u305aint\u578b\u306evector\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u306b\u3059\u308b\u306e\u3082\u3055\u3057\u3066\u5927\u5909\u3067\u306f\u306a\u3044\u3067\u3059\u306d\u3002\n\n\u4e0b\u306e3\u3064\u306e\u307b\u304b\u306b\u3055\u3089\u306b3\u3064\u306e\u65b9\u6cd5\u304c\n[C++\u3067\u52b9\u7387\u3088\u304f\u91cd\u8907\u306e\u306a\u3044\u4e71\u6570\u5217\u3092\u751f\u6210\u3059\u308b](http://qiita.com/hmito/items/9f4bdc8442b6f6b3c7bc)\n\u3067\u63d0\u793a\u3055\u308c\u3066\u304a\u308a\u3001**\u305d\u3063\u3061\u306e\u65b9\u304c\u901f\u3044**\u3067\u3059\u3002\n\n## \u307e\u305a\u306f\u7d50\u8ad6\n\n\u3053\u308c\u4f7f\u3048\u3070\u3044\u3044\u3093\u3058\u3083\u306d\u3002\n\n```cpp:randseq.hpp\n#pragma once\n\n#include <random>\n#include <vector>\n#include <iostream>\n#include <cstdint>\n#include <algorithm>\n#include <stdexcept>\n#include <unordered_set>\n#include <functional>\n#include <limits>\n#include <type_traits>\n\nstd::mt19937 create_rand_engine(){\n\tstd::random_device rnd;\n\tstd::vector<std::uint_least32_t> v(10);// \u521d\u671f\u5316\u7528\u30d9\u30af\u30bf\n\tstd::generate(v.begin(), v.end(), std::ref(rnd));// \u30d9\u30af\u30bf\u306e\u521d\u671f\u5316\n\tstd::seed_seq seed(v.begin(), v.end());\n\treturn std::mt19937(seed);// \u4e71\u6570\u30a8\u30f3\u30b8\u30f3\n}\n\nnamespace detail {\n\ttemplate<typename T> auto diff(T n1, T n2) -> typename std::make_unsigned<T>::type {\n\t\tstatic_assert(std::is_integral<T>::value, \"T is not integral.\");\n\t\tif (n1 < n2) std::swap(n1, n2);\n\t\treturn static_cast<typename std::make_unsigned<T>::type>(n1 - n2);\n\t}\n}\n\ntemplate<typename type> std::vector<type> make_rand_array_unique(const size_t size, type rand_min, type rand_max){\n\tif(rand_min > rand_max) std::swap(rand_min, rand_max);\n\tconst auto max_min_diff = detail::diff(rand_max, rand_min) + 1;\n\tif(max_min_diff < size) throw std::runtime_error(\"Invalid argument\");\n\n\tstd::vector<type> tmp;\n\tauto engine = create_rand_engine();\n\tstd::uniform_int_distribution<type> distribution(rand_min, rand_max);\n\n\tconst size_t make_size = (static_cast<uintmax_t>(std::numeric_limits<double>::max()) < size) ? ((std::numeric_limits<size_t>::max() - size / 5) < size) ? size : size + size / 5 : static_cast<size_t>(size*1.2);\n\ttmp.reserve(make_size);\n\twhile(tmp.size() < size){\n\t\twhile(tmp.size() < make_size) tmp.push_back(distribution(engine));\n\t\tstd::sort(tmp.begin(), tmp.end());\n\t\tauto unique_end = std::unique(tmp.begin(), tmp.end());\n\n\t\tif(size < static_cast<size_t>(std::distance(tmp.begin(), unique_end))){\n\t\t\tunique_end = std::next(tmp.begin(), size);\n\t\t}\n\t\ttmp.erase(unique_end, tmp.end());\n\t}\n\n\tstd::shuffle(tmp.begin(), tmp.end(), engine);\n\treturn tmp;\n}\n\ntemplate<typename type> std::vector<type> make_rand_array_select(const size_t size, type rand_min, type rand_max) {\n\tif (rand_min > rand_max) std::swap(rand_min, rand_max);\n\tconst auto max_min_diff = detail::diff(rand_max, rand_min) + 1;\n\tif (max_min_diff < size) throw std::runtime_error(\"Invalid argument\");\n\n\tstd::vector<type> tmp;\n\ttmp.reserve(max_min_diff);\n\n\tfor (auto i = rand_min; i <= rand_max; ++i)tmp.push_back(i);\n\n\tauto engine = create_rand_engine();\n\tstd::uniform_int_distribution<type> distribution(rand_min, rand_max);\n\n\tfor (size_t cnt = 0; cnt < size; ++cnt) {\n\t\tsize_t pos = std::uniform_int_distribution<size_t>(cnt, tmp.size() - 1)(engine);\n\n\t\tif (cnt != pos) std::swap(tmp[cnt], tmp[pos]);\n\t}\n\ttmp.erase(std::next(tmp.begin(), size), tmp.end());\n\n\treturn tmp;\n}\n\ntemplate<typename type> std::vector<type> make_rand_array_just_shuffle(const size_t size, type rand_min, type rand_max) {\n\tif (rand_min > rand_max) std::swap(rand_min, rand_max);\n\tconst auto max_min_diff = detail::diff(rand_max, rand_min) + 1;\n\tif (max_min_diff != size) throw std::runtime_error(\"Invalid argument\");\n\n\tauto engine = create_rand_engine();\n\tstd::uniform_int_distribution<type> distribution(rand_min, rand_max);\n\tstd::vector<type> re(size);\n\tauto t = rand_min;\n\tstd::generate(re.begin(), re.end(), [&t]() { return t++; });\n\tstd::shuffle(re.begin(), re.end(), engine);\n\treturn re;\n}\n\ntemplate<typename type> std::vector<type> make_rand_array(const size_t size, type rand_min, type rand_max) {\n\tif (rand_min > rand_max) std::swap(rand_min, rand_max);\n\tconst auto max_min_diff = detail::diff(rand_max, rand_min) + 1;\n\tif (max_min_diff < size) throw std::runtime_error(\"Invalid argument\");\n\n\tif (max_min_diff == size) return make_rand_array_just_shuffle(size, rand_min, rand_max);\n\telse if (static_cast<uintmax_t>(std::numeric_limits<double>::max()) < max_min_diff || size < (max_min_diff * 0.04)) {\n\t\treturn make_rand_array_unique(size, rand_min, rand_max);\n\t}\n\telse {\n\t\treturn make_rand_array_select(size, rand_min, rand_max);\n\t}\n}\n```\n\n\u4f7f\u3044\u65b9\n\n```cpp\n#include <chrono>\n#include <utility>\n#include <string>\n#include\"randseq.hpp\"\n\ntemplate<class T>\nvoid print_elapsed_time(const std::string& str, T start, T end){\n\tstd::cout << str << \" : \"\n\t\t<< std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()\n\t\t<< \" msec.\"\n\t\t<< std::endl;\n}\nint main(){\n\tusing clock = std::chrono::high_resolution_clock;\n\n\ttry{\n\t\tfor(auto val : {1, 5, 10, 16, 18, 19, 20, 100, 500}){\n\t\t\tconstexpr size_t array_num = 10000;\n\t\t\tconst int rand_max = val*array_num;\n\t\t\tconst int rand_min = -val*array_num;\n\n\t\t\tstd::cout << \"array_num : \" << array_num << \" rand_max : \" << rand_max << \" rand_min : \" << rand_min << std::endl;\n\t\t\tconst auto t0 = clock::now();\n\n\t\t\tfor(size_t cnt = 0; cnt < 100; ++cnt){\n\t\t\t\tmake_rand_array(array_num, rand_min, rand_max);\n\t\t\t}\n\n\t\t\tprint_elapsed_time(\"make_rand_array\", t0, clock::now());\n\t\t}\n\t}\n\tcatch(const std::exception& er){\n\t\tstd::cerr << er.what() << std::endl;\n\t}\n\n#ifdef _WIN32\n\tsystem(\"pause\");\n#endif\n\treturn 0;\n}\n```\n## \u65b9\u6cd51 std::unordered_map\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u3063\u3066\u91cd\u8907\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n\u9811\u5f35\u308c\u3070noexcept\u306b\u3067\u304d\u308b\u3093\u3067\u3057\u3087\u3046\u304c\u3001\u9762\u5012\u305d\u3046\u306a\u306e\u3067\u3001\u3061\u3083\u3093\u3068catch\u3057\u3066\u3042\u3052\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3042\u3001\u3084\u305f\u3089\u9577\u3044\u306e\u306fshuffle\u3057\u305f\u307b\u3046\u304c\u901f\u305d\u3046\u306a\u3068\u304d\u306fshuffle\u3059\u308b\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u3061\u306a\u307f\u306b``std::random_shuffle``\u306f[C++14\u3067\u306f\u975e\u63a8\u5968](https://meetingcpp.com/index.php/br/items/stdrandom_shuffle-is-deprecated.html)\u306a\u306e\u3067``std::shuffle``\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u5927\u4e8b\u306a\u306e\u306f\u6700\u5f8c\u306eelse\u7bc0\u3002\n\n``std::map/std::unordered_map``\u306ekey\u306e\u5b58\u5728\u78ba\u8a8d\u306fcount\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u304c\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n\u305d\u3046\u3044\u3048\u3070std::map\u3063\u3066\u5b58\u5728\u3057\u306a\u3044key\u3092operator[]\u3067\u53c2\u7167\u3059\u308b\u3068\u5024\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u521d\u671f\u5316\u3055\u308c\u305f\u72b6\u614b\u306e\u8981\u7d20\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u3093\u3067\u3059\u306d\u3002\u4fbf\u5229\u3002\n[std::map\u306e\u7b2c2\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5024\u9069\u5207\u306a\u4f8b\u304b\u3069\u3046\u304b\u306f\u308f\u304b\u308a\u307e\u305b... - Yahoo!\u77e5\u6075\u888b](http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11150714191)\n\n```cpp\n#include <vector>\n#include <unordered_map>\n#include <utility>\n#include <random>\n#include <cstdint>\n#include <algorithm>\n#include <stdexcept>\n#include <functional>\nstd::mt19937 create_rand_engine(){\n\tstd::random_device rnd;\n    std::vector<std::uint_least32_t> v(10);// \u521d\u671f\u5316\u7528\u30d9\u30af\u30bf\n    std::generate(v.begin(), v.end(), std::ref(rnd));// \u30d9\u30af\u30bf\u306e\u521d\u671f\u5316\n    std::seed_seq seed(v.begin(), v.end());\n    return std::mt19937(seed);// \u4e71\u6570\u30a8\u30f3\u30b8\u30f3\n}\nstd::unordered_map<int, size_t> make_index(const std::vector<int>& arr){\n\tstd::unordered_map<int, size_t> re_index;\n\tfor(const auto& i : arr) ++re_index[i];//\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20\u306b\u5bfe\u3057\u3066\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u306e\u30670\u306b\u306a\u308b\u304b\u3089\u3053\u308c\u3067\u3044\u3044\n\treturn re_index;\n}\nstd::vector<int> make_rand_array(const size_t size, int min, int max){\n\tif(min > max) std::swap(min, max);\n    const size_t max_min_diff = static_cast<size_t>(max - min + 1);\n\tif(max_min_diff < size) throw std::runtime_error(\"\u5f15\u6570\u304c\u7570\u5e38\u3067\u3059\");\n\n    auto engine = create_rand_engine();\n    std::vector<int> re(size);\n    if(max_min_diff == size){\n    \tauto i = min;\n    \tfor(auto & r : re) r = i++;\n\t\tstd::shuffle(re.begin(), re.end(), engine);\n    }\n\telse if(max_min_diff + 1U == size){\n    \tstd::uniform_int_distribution<size_t> distribution(0, size - 1);// distribution\n    \tconst auto point = distribution(engine);\n    \tauto tmp = min;\n\t\tfor(auto it = re.begin(); it < re.begin() + point; ++it, ++tmp) *it = tmp;\n\t\t++tmp;\n\t\tfor(auto it = re.begin() + point; it < re.end(); ++it, ++tmp) *it = tmp;\n\t\tstd::shuffle(re.begin(), re.end(), engine);\n\t}\n\telse{\n    \tstd::uniform_int_distribution<int> distribution(min, max);// distribution\n    \tfor(auto& r : re) r = distribution(engine);//\u4e71\u6570\u3067\u57cb\u3081\u308b\n    \tfor(auto re_index = make_index(re); re_index.size() != re.size(); re_index = make_index(re)){//\u91cd\u8907\u306f\u65b0\u305f\u306a\u4e71\u6570\u3067\u57cb\u3081\u308b\n    \t\tfor(auto& r : re) if(1 < re_index[r]){\n    \t\t\tr = distribution(engine);\n    \t\t\t--re_index[r];\n    \t\t}\n    \t}\n\t}\n\treturn re;\n}\n```\n\n\u4f7f\u7528\u4f8b\n\n```cpp\n#include <iostream>\n#include <exception>\nint main(){\n\ttry{\n\t    const auto arr = make_rand_array(12, 100, 1);\n\t    for(auto i : arr) std::cout << i << \", \";\n\t    std::cout << std::endl;\n\t}\n\tcatch(const std::exception& er){\n\t\tstd::cerr << er.what() << std::endl;\n\t}\n    return 0;\n}\n```\n\n## \u65b9\u6cd52 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u7dda\u5f62\u63a2\u7d22\u3057\u3066\u91cd\u8907\u30c1\u30a7\u30c3\u30af\u3059\u308b(AinoMegumi\u6c0f)\n\n\u53cb\u9054\u306a\u306e\u3067\u8a66\u3057\u306b\u30cd\u30bf\u632f\u308a\u3057\u305f\u3089\u66f8\u3044\u3066\u304f\u308c\u307e\u3057\u305f\u3002\n[\u91cd\u8907\u3057\u306a\u3044\u4e71\u6570\u914d\u5217(C++14\u7248)](http://qiita.com/AinoMegumi/items/0d183910gomed51df904f828)\n\n\u3054\u3081\u3093\u3001\u5fae\u5999\u306b\u5909\u3048\u3055\u305b\u3066\u3002\n\n```cpp\n#include <random>\n#include <vector>\n#include <iostream>\n#include <cstdint>\n#include <algorithm>\n#include <stdexcept>\n#include <functional>\nstd::mt19937 create_rand_engine(){\n\tstd::random_device rnd;\n    std::vector<std::uint_least32_t> v(10);// \u521d\u671f\u5316\u7528\u30d9\u30af\u30bf\n    std::generate(v.begin(), v.end(), std::ref(rnd));// \u30d9\u30af\u30bf\u306e\u521d\u671f\u5316\n    std::seed_seq seed(v.begin(), v.end());\n    return std::mt19937(seed);// \u4e71\u6570\u30a8\u30f3\u30b8\u30f3\n}\n\nstd::vector<int> make_rand_array(const size_t size, int rand_min, int rand_max) {\n    if (rand_min > rand_max) std::swap(rand_min, rand_max);\n    const size_t max_min_diff = static_cast<size_t>(rand_max - rand_min + 1);\n    if(max_min_diff < size) throw std::runtime_error(\"\u5f15\u6570\u304c\u7570\u5e38\u3067\u3059\");\n\n    std::vector<int> re(size);\n    std::uniform_int_distribution<int> rand(rand_min, rand_max);\n    auto mt = create_rand_engine();\n    for (auto& i : re)i = rand(mt);\n    bool is_all_no_conflict = false;\n    do {    \n        is_all_no_conflict = true;\n        for (auto j = re.begin(); j != re.end(); ++j) {\n            for (auto k = j + 1; k != re.end(); ++k) {\n                if (*k == *j) {\n                    *k = rand(mt);\n                    is_all_no_conflict = false;\n                }\n            }\n        }\n    } while (!is_all_no_conflict);\n    return re;\n}\n```\n\n## \u65b9\u6cd53 std::unordered_set\u3092\u4f7f\u3046\n\n[\u91cd\u8907\u3057\u306a\u3044\u4e71\u6570\u914d\u5217(Java\u7248/\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u6d3b\u7528?\u7248)](http://qiita.com/tsuyoshi_cho/items/2c10819b9f667e41dfe2)\n\u3092\u307f\u3066\u3066\u3001``java.util.HashSet``\u4fbf\u5229\u3060\u306a\u3041\u3068\u601d\u3063\u3066\u305f\u3093\u3067\u3059\u304c\u3001\u3075\u3068C++\u306b\u305d\u308c\u304f\u3089\u3044\u3042\u308b\u3088\u306a\uff1f\u3068\u601d\u3063\u3066\u3050\u3050\u3063\u305f\u3089\n[data structures - Java HashSet equiv in c++ - Stack Overflow](http://stackoverflow.com/questions/24644190/java-hashset-equiv-in-c)\n\u3048\uff1f``std::unordered_set``\u3063\u3066\u30bd\u30fc\u30c8\u3057\u306a\u3044\u306e\uff1f\n\n>[C++11\u306eunordered_set\u3068\u3001set\u3068\u306e\u6240\u8981\u6642\u9593\u3092\u6bd4\u8f03\u3059\u308b - minus9d's diary](http://minus9d.hatenablog.com/entry/20130819/1376922187)\n>unrodered_set\u306f\u3001set\u3068\u7570\u306a\u308a\u3001\u633f\u5165\u3057\u305f\u6570\u5b57\u3092\u30bd\u30fc\u30c8\u305b\u305a\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\n~~\u304a\u304a\u3001\u52dd\u3061\u78ba\u5b9a\u3084\u3093\uff01~~(\u5f8c\u8ff0:\u305d\u3046\u3067\u3082\u306a\u304b\u3063\u305f)\u3060\u308c\u3060\u3088\n\n>\u914d\u5217\u3092\u91cd\u8907\u306a\u304f\u4e71\u6570\u3067\u57cb\u3081\u308b\u65b9\u6cd5\u306f``std::set/std::unordered_set``\u306a\u3093\u304b\u3082\u8003\u3048\u3089\u308c\u308b\u3093\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u4f7f\u308f\u305a\u306b\u3084\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n>\u4e71\u6570\u5165\u308c\u3066shuffle\u3059\u308b\u306e\u306f\u975e\u52b9\u7387\u7684\u306b\u601d\u3048\u308b\u306e\u3067\u3002(\u901f\u5ea6\u8a08\u6e2c\u3057\u3066\u306a\u3044orz)\n\n\u306a\u3093\u3066\u307b\u3056\u3044\u3066\u305f\u306e(\u79c1\u3060)\u3002\n\n\n```cpp\n#include <random>\n#include <vector>\n#include <iostream>\n#include <cstdint>\n#include <algorithm>\n#include <stdexcept>\n#include <unordered_set>\n#include <functional>\nstd::mt19937 create_rand_engine(){\n    std::random_device rnd;\n    std::vector<std::uint_least32_t> v(10);// \u521d\u671f\u5316\u7528\u30d9\u30af\u30bf\n    std::generate(v.begin(), v.end(), std::ref(rnd));// \u30d9\u30af\u30bf\u306e\u521d\u671f\u5316\n    std::seed_seq seed(v.begin(), v.end());\n    return std::mt19937(seed);// \u4e71\u6570\u30a8\u30f3\u30b8\u30f3\n}\nstd::vector<int> make_rand_array(const size_t size, int rand_min, int rand_max) {\n\tif (rand_min > rand_max) std::swap(rand_min, rand_max);\n\tconst size_t max_min_diff = static_cast<size_t>(rand_max - rand_min + 1);\n\tif (max_min_diff < size) throw std::runtime_error(\"\u5f15\u6570\u304c\u7570\u5e38\u3067\u3059\");\n\n\tstd::unordered_set<int> tmp;\n\tauto engine = create_rand_engine();\n\tstd::uniform_int_distribution<int> distribution(rand_min, rand_max);\n\twhile (tmp.size() < size) tmp.insert(distribution(engine));\n\treturn std::vector<int>(tmp.begin(), tmp.end());\n}\n```\n\n## \u901f\u5ea6\u6bd4\u8f03\n\n\u3044\u3084\u3042\u3001\u4e0b\u898b\u308c\u3070\u308f\u304b\u308b\u3051\u3069\u3001\u3053\u3053\u307e\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3064\u304b\u3046\u3084\u3064\u304c\u9045\u3044\u3068\u306f\u601d\u308f\u306a\u304b\u3063\u305f\u3002\u306a\u3093\u3067\u3060\u308d\u3046\u306a\u3041\u30fb\u30fb\u30fb\u3002\u3044\u304f\u3089\u306a\u3093\u3067\u3082\u9045\u3059\u304e\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u3060\u308c\u304b\u6559\u3048\u3066\u304f\u3060\u3044\u3002\n\n| \u9805\u76ee                       | \u95a2\u6570\u540d            |\n|----------------------------|-------------------|\n| \u65b9\u6cd51 : std::unordered_map | make_rand_array_1 |\n| \u65b9\u6cd52 : \u7dda\u5f62\u63a2\u7d22           | make_rand_array_2 |\n| \u65b9\u6cd53 : std::unordered_set | make_rand_array_3 |\n\n### clang 3.7.0 on Wandbox\n>http://melpon.org/wandbox/permlink/hkHklM6K9GdTl2KY\n>clang++ prog.cc -stdlib=libc++ -Wall -Wextra -O2 -march=native -std=c++11 \n>array_num : 100000rand_max : 1000000rand_min : -10000\n>make_rand_array_1 : 372 msec.\n>make_rand_array_2 : 17811 msec.\n>make_rand_array_3 : 41 msec.\n\n### gcc 5.2.0 on Wandbox\n>http://melpon.org/wandbox/permlink/Syzbm0YgS8EuODxb\n>g++ prog.cc -Wall -Wextra -O2 -march=native -std=c++11 \n>array_num : 100000rand_max : 1000000rand_min : -10000\n>make_rand_array_1 : 338 msec.\n>make_rand_array_2 : 28659 msec.\n>make_rand_array_3 : 38 msec.\n\n### Visual Studio 2015 Community on myPC\n\n\u3053\u308c\u3060\u3051\u81ea\u5206\u306ePC\u4e0a\u3067\u3059\u3002CPU\u306f``Intel(R) Core(TM) i5-4200M``\u3067\u3059\u3002\n>/GS /GL /analyze- /W3 /Gy /Zc:wchar_t /Zi /Gm- /O2 /sdl /Fd\"Release\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"NDEBUG\" /D \"\\_CONSOLE\" /D \"\\_UNICODE\" /D \"UNICODE\" /errorReport:prompt /WX- /Zc:forScope /Gd /Oy- /Oi /MD /Fa\"Release\\\" /EHsc /nologo /Fo\"Release\\\" /Fp\"Release\\rand_array.pch\" \n>array_num : 100000rand_max : 1000000rand_min : -10000\n>make_rand_array_1 : 163 msec.\n>make_rand_array_2 : 17249 msec.\n>make_rand_array_3 : 36 msec.\n", "tags": ["C++", "C++11", "std:shuffle, :unordered_map", "Random", "algorithm"]}