{"context": " More than 1 year has passed since last update.\u4f55\u56de\u304bMeshblu\u306e\u30b3\u30f3\u30c6\u30ca\u3092\u518d\u4f5c\u6210\u3057\u3066\u4f5c\u696d\u3057\u3066\u3044\u308b\u3068MQTT-HTTP Bridge\u304c\u7a81\u7136\u52d5\u304b\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u306f\u3058\u3081\u306fNode.js\u306e\u30b3\u30fc\u30c9\u306e\u30c7\u30d0\u30c3\u30b0\u306b\u9069\u5f53\u306a\u3068\u3053\u308d\u3067console.log\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001Meshblu\u3067\u306fdebug\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3092\u6d3b\u7528\u3057\u3066\u307f\u307e\u3059\u3002\u7d50\u5c40MQTT-HTTP Bridge\u304c\u52d5\u304b\u306a\u304f\u306a\u3063\u305f\u306e\u306fRedis\u3068\u9023\u643a\u3059\u308b\u8a2d\u5b9a\u304c\u629c\u3051\u3066\u3044\u305f\u305f\u3081\u3067\u3057\u305f\u3002\n\ndebug\u30d1\u30c3\u30b1\u30fc\u30b8\nMeshblu\u306e\u4e00\u90e8\u306e\u30b3\u30fc\u30c9\u3067\u306fdebug\u30d1\u30c3\u30b1\u30fc\u30b8\u3092require\u3057\u3066\u3044\u307e\u3059\u3002\u540d\u524d\u3092\u5f15\u6570\u306b\u3057\u3066debug\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nworker.js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n\n\n\u30c7\u30d0\u30c3\u30b0\u3092\u6709\u52b9\u306b\u3059\u308b\u5834\u5408\u306fDEBUG\u74b0\u5883\u5909\u6570\u306bdebug\u95a2\u6570\u3067\u5f15\u6570\u306b\u3057\u305f\u540d\u524d\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nDEBUG=worker node example/app\n\n\u8907\u6570\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u3057\u307e\u3059\u3002\nDEBUG=worker,http node example/app\n\n\n\u4f7f\u3044\u65b9\nMesublu\u306e\u5834\u5408debug\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n~/docker_apps/meshblu/lib/sendMessage.js\nvar debug = require('debug')('meshblu:sendMessage');\n\n\nNode.js\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fSupervisor\u304b\u3089\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u3067supervisor.conf\u306b\u74b0\u5883\u5909\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n~/docker_apps/meshblu/docker/supervisor.conf\n[program:node]\nenvironment=DEBUG=\"meshblu:sendMessage\"\ncommand=/usr/bin/node /var/www/server.js --http --coap --mqtt\n\n\n\u30c7\u30d0\u30c3\u30b0\u3057\u305f\u3044\u3068\u3053\u308d\u306bdebug\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n~/docker_apps/meshblu/lib/sendMessage.js\n            debug('Sending message', emitMsg);\n            debug('protocol',check.protocol);\n            if(check.protocol === 'mqtt'){\n              mqttEmitter(check.uuid, wrapMqttMessage(topic, emitMsg), {qos: data.qos || DEFAULT_QO\\\nS});\n            }\n            else{\n              socketEmitter(check.uuid, topic, emitMsg);\n            }\n\n\ndocker logs\u306b\u30c7\u30d0\u30c3\u30b0\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n$ docker logs -f meshblu\nWed, 25 Mar 2015 14:30:53 GMT meshblu:sendMessage Sending message { devices: [ 'my-iot' ],\n  payload: { yello: 'on' },\n  fromUuid: 'temp-sens' }\nWed, 25 Mar 2015 14:30:53 GMT meshblu:sendMessage protocol undefined\n\n\nRedis\u306e\u6709\u52b9\u5316\n\u30c7\u30d0\u30c3\u30b0\u3057\u3066\u3044\u304f\u3068mqttServer.js\u306esocketEmitter\u95a2\u6570\u3067emit\u304c\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u306fprotocol\u304chttp\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u5bfe\u3057\u3066MQTT\u304b\u3089HTTP\u306b\u30d6\u30ea\u30c3\u30b8\u3059\u308b\u3068\u304d\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u30d6\u30ea\u30c3\u30b8\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u306fRedis\u306e\u8a2d\u5b9a\u304cconfig.js\u304b\u3089\u8aad\u307f\u53d6\u308c\u306a\u3044\u305f\u3081\uff44\u3057\u305f\u3002\n\n~/docker_apps/meshblu/lib/mqttServer.js\n  if(config.redis && config.redis.host){\n    var redis = require('./redis');\n    io = require('socket.io-emitter')(redis.client);\n  }\n...\n  function socketEmitter(uuid, topic, data){\n    if(io){\n      io.in(uuid).emit(topic, data);\n    }\n  }\n\n\nredis\u306e\u8a2d\u5b9a\u5024\u306f\u74b0\u5883\u5909\u6570\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\n~/docker_apps/meshblu/config.js\n  redis: {\n    host: process.env.REDIS_HOST,\n    port: parseInt(process.env.REDIS_PORT),\n    password: process.env.REDIS_PASSWORD\n  },\n\n\ndocker run\u306e\u74b0\u5883\u5909\u6570\u306bRedis\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u3066\u8d77\u52d5\u3057\u307e\u3059\u3002\n docker run -d --name meshblu \\\n  -p 3000:3000 \\\n  -p 4443:4443 \\\n  -p 5683:5683 \\\n  -p 1883:1883 \\\n  -e PORT=3000 \\\n  -e MQTT_PORT=1883 \\\n  -e MQTT_PASSWORD=skynetpass \\\n  -e MONGODB_URI=mongodb://localhost:27017/skynet \\\n  -e REDIS_HOST=localhost \\\n  -e REDIS_PASSWORD=localhost \\\n  -e SSL_PORT=4443 \\\n  -e SSL_CERT=/opt/meshblu/certs/server.crt \\\n  -e SSL_KEY=/opt/meshblu/certs/server.key \\\n  -v $PWD:/var/www \\\n  -v $PWD/docker:/etc/supervisor/conf.d \\\n  -v $HOME/docker_apps/certs/meshblu:/opt/meshblu/certs \\\n  meshblu\n\n\npub/sub\n\u6700\u521d\u306bpublish\u3068subscribe\u306e\u30c7\u30d0\u30a4\u30b9\u306eUUID/TOKEN\u3092~/.bashrc\u3078\u74b0\u5883\u5909\u6570\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n~/.bashrc\nexport TEMP_SENS_UUID=temp-sens\nexport TEMP_SENS_TOKEN=123\nexport MY_IOT_UUID=my-iot\nexport MY_IOT_TOKEN=456\n\n\n\u6700\u521d\u306bcurl\u3067subscribe\u3057\u307e\u3059\u3002\n$ curl -X GET \\\n  \"http://localhost:3000/subscribe\" \\\n  --insecure \\\n  --header \"meshblu_auth_uuid: $MY_IOT_UUID\" \\\n  --header \"meshblu_auth_token: $MY_IOT_TOKEN\"\n\n\u6b21\u306b\u65b0\u3057\u3044\u30b7\u30a7\u30eb\u3092\u958b\u304dMosquitto\u304b\u3089publish\u3057\u307e\u3059\u3002\n$ mosquitto_pub \\\n  -h localhost  \\\n  -p 1883 \\\n  -t message \\\n  -m '{\"devices\": [\"'\"$MY_IOT_UUID\"'\"], \"payload\": {\"yello\":\"on\"}}' \\\n  -u $TEMP_SENS_UUID \\\n  -P $TEMP_SENS_TOKEN \\\n  -d\nClient mosqpub/39356-minion1.c sending CONNECT\nClient mosqpub/39356-minion1.c received CONNACK\nClient mosqpub/39356-minion1.c sending PUBLISH (d0, q0, r0, m1, 'message', ... (50 bytes))\nClient mosqpub/39356-minion1.c sending DISCONNECT\n\ncurl\u3067subscribe\u3057\u3066\u3044\u308b\u30b7\u30a7\u30eb\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6a19\u6e96\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n{\"devices\":[\"my-iot\"],\"payload\":{\"yello\":\"on\"},\"fromUuid\":\"temp-sens\"},\n\n\u4f55\u56de\u304bMeshblu\u306e\u30b3\u30f3\u30c6\u30ca\u3092\u518d\u4f5c\u6210\u3057\u3066\u4f5c\u696d\u3057\u3066\u3044\u308b\u3068MQTT-HTTP Bridge\u304c\u7a81\u7136\u52d5\u304b\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u306f\u3058\u3081\u306fNode.js\u306e\u30b3\u30fc\u30c9\u306e\u30c7\u30d0\u30c3\u30b0\u306b\u9069\u5f53\u306a\u3068\u3053\u308d\u3067console.log\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001Meshblu\u3067\u306fdebug\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3092\u6d3b\u7528\u3057\u3066\u307f\u307e\u3059\u3002\u7d50\u5c40MQTT-HTTP Bridge\u304c\u52d5\u304b\u306a\u304f\u306a\u3063\u305f\u306e\u306fRedis\u3068\u9023\u643a\u3059\u308b\u8a2d\u5b9a\u304c\u629c\u3051\u3066\u3044\u305f\u305f\u3081\u3067\u3057\u305f\u3002\n\n## debug\u30d1\u30c3\u30b1\u30fc\u30b8\n\nMeshblu\u306e\u4e00\u90e8\u306e\u30b3\u30fc\u30c9\u3067\u306f[debug](https://github.com/visionmedia/debug)\u30d1\u30c3\u30b1\u30fc\u30b8\u3092require\u3057\u3066\u3044\u307e\u3059\u3002\u540d\u524d\u3092\u5f15\u6570\u306b\u3057\u3066debug\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n``` js:worker.js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n\u30c7\u30d0\u30c3\u30b0\u3092\u6709\u52b9\u306b\u3059\u308b\u5834\u5408\u306fDEBUG\u74b0\u5883\u5909\u6570\u306bdebug\u95a2\u6570\u3067\u5f15\u6570\u306b\u3057\u305f\u540d\u524d\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n``` bash\nDEBUG=worker node example/app\n```\n\n\u8907\u6570\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u3057\u307e\u3059\u3002\n\n``` bash\nDEBUG=worker,http node example/app\n```\n\n### \u4f7f\u3044\u65b9\n\nMesublu\u306e\u5834\u5408debug\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n```js:~/docker_apps/meshblu/lib/sendMessage.js\nvar debug = require('debug')('meshblu:sendMessage');\n```\n\nNode.js\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fSupervisor\u304b\u3089\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u3067`supervisor.conf`\u306b\u74b0\u5883\u5909\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```bash:~/docker_apps/meshblu/docker/supervisor.conf\n[program:node]\nenvironment=DEBUG=\"meshblu:sendMessage\"\ncommand=/usr/bin/node /var/www/server.js --http --coap --mqtt\n```\n\n\u30c7\u30d0\u30c3\u30b0\u3057\u305f\u3044\u3068\u3053\u308d\u306bdebug\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```js:~/docker_apps/meshblu/lib/sendMessage.js\n            debug('Sending message', emitMsg);\n            debug('protocol',check.protocol);\n            if(check.protocol === 'mqtt'){\n              mqttEmitter(check.uuid, wrapMqttMessage(topic, emitMsg), {qos: data.qos || DEFAULT_QO\\\nS});\n            }\n            else{\n              socketEmitter(check.uuid, topic, emitMsg);\n            }\n```\n\n`docker logs`\u306b\u30c7\u30d0\u30c3\u30b0\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` bash\n$ docker logs -f meshblu\nWed, 25 Mar 2015 14:30:53 GMT meshblu:sendMessage Sending message { devices: [ 'my-iot' ],\n  payload: { yello: 'on' },\n  fromUuid: 'temp-sens' }\nWed, 25 Mar 2015 14:30:53 GMT meshblu:sendMessage protocol undefined\n```\n\n## Redis\u306e\u6709\u52b9\u5316\n\n\u30c7\u30d0\u30c3\u30b0\u3057\u3066\u3044\u304f\u3068`mqttServer.js`\u306esocketEmitter\u95a2\u6570\u3067emit\u304c\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u306fprotocol\u304chttp\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u5bfe\u3057\u3066MQTT\u304b\u3089HTTP\u306b\u30d6\u30ea\u30c3\u30b8\u3059\u308b\u3068\u304d\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u30d6\u30ea\u30c3\u30b8\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u306fRedis\u306e\u8a2d\u5b9a\u304c`config.js`\u304b\u3089\u8aad\u307f\u53d6\u308c\u306a\u3044\u305f\u3081\uff44\u3057\u305f\u3002\n\n```js:~/docker_apps/meshblu/lib/mqttServer.js\n  if(config.redis && config.redis.host){\n    var redis = require('./redis');\n    io = require('socket.io-emitter')(redis.client);\n  }\n...\n  function socketEmitter(uuid, topic, data){\n    if(io){\n      io.in(uuid).emit(topic, data);\n    }\n  }\n```\n\nredis\u306e\u8a2d\u5b9a\u5024\u306f\u74b0\u5883\u5909\u6570\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\n```js:~/docker_apps/meshblu/config.js\n  redis: {\n    host: process.env.REDIS_HOST,\n    port: parseInt(process.env.REDIS_PORT),\n    password: process.env.REDIS_PASSWORD\n  },\n```\n\n`docker run`\u306e\u74b0\u5883\u5909\u6570\u306bRedis\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u3066\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n``` bash\n docker run -d --name meshblu \\\n  -p 3000:3000 \\\n  -p 4443:4443 \\\n  -p 5683:5683 \\\n  -p 1883:1883 \\\n  -e PORT=3000 \\\n  -e MQTT_PORT=1883 \\\n  -e MQTT_PASSWORD=skynetpass \\\n  -e MONGODB_URI=mongodb://localhost:27017/skynet \\\n  -e REDIS_HOST=localhost \\\n  -e REDIS_PASSWORD=localhost \\\n  -e SSL_PORT=4443 \\\n  -e SSL_CERT=/opt/meshblu/certs/server.crt \\\n  -e SSL_KEY=/opt/meshblu/certs/server.key \\\n  -v $PWD:/var/www \\\n  -v $PWD/docker:/etc/supervisor/conf.d \\\n  -v $HOME/docker_apps/certs/meshblu:/opt/meshblu/certs \\\n  meshblu\n```\n\n### pub/sub\n\n\u6700\u521d\u306bpublish\u3068subscribe\u306e\u30c7\u30d0\u30a4\u30b9\u306eUUID/TOKEN\u3092`~/.bashrc`\u3078\u74b0\u5883\u5909\u6570\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n``` bash:~/.bashrc\nexport TEMP_SENS_UUID=temp-sens\nexport TEMP_SENS_TOKEN=123\nexport MY_IOT_UUID=my-iot\nexport MY_IOT_TOKEN=456\n```\n\n\u6700\u521d\u306bcurl\u3067subscribe\u3057\u307e\u3059\u3002\n\n``` bash\n$ curl -X GET \\\n  \"http://localhost:3000/subscribe\" \\\n  --insecure \\\n  --header \"meshblu_auth_uuid: $MY_IOT_UUID\" \\\n  --header \"meshblu_auth_token: $MY_IOT_TOKEN\"\n```\n\n\u6b21\u306b\u65b0\u3057\u3044\u30b7\u30a7\u30eb\u3092\u958b\u304dMosquitto\u304b\u3089publish\u3057\u307e\u3059\u3002\n\n``` bash\n$ mosquitto_pub \\\n  -h localhost  \\\n  -p 1883 \\\n  -t message \\\n  -m '{\"devices\": [\"'\"$MY_IOT_UUID\"'\"], \"payload\": {\"yello\":\"on\"}}' \\\n  -u $TEMP_SENS_UUID \\\n  -P $TEMP_SENS_TOKEN \\\n  -d\nClient mosqpub/39356-minion1.c sending CONNECT\nClient mosqpub/39356-minion1.c received CONNACK\nClient mosqpub/39356-minion1.c sending PUBLISH (d0, q0, r0, m1, 'message', ... (50 bytes))\nClient mosqpub/39356-minion1.c sending DISCONNECT\n```\n\ncurl\u3067subscribe\u3057\u3066\u3044\u308b\u30b7\u30a7\u30eb\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6a19\u6e96\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n\n``` bash\n{\"devices\":[\"my-iot\"],\"payload\":{\"yello\":\"on\"},\"fromUuid\":\"temp-sens\"},\n```\n", "tags": ["Meshblu1.1.1", "debug2.1.3", "Redis2.2.12", "mqtt3.1.1", "supervisor3.0a8-1.1"]}