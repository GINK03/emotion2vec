{"context": "\n\n\u4f5c\u6210\u76ee\u7684\n\u300e\u5727\u7e2e\u65b0\u805e\u300f\u306eDTM\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u6b32\u3057\u304b\u3063\u305f(\u500b\u4eba\u7684\u7528\u9014)\u3002\nhttps://twitter.com/asshuku?lang=ja\n\u3044\u3061\u3044\u3061RSS\u306e\u60c5\u5831\u3092\u5168\u90e8\u898b\u308b\u306e\u3082\u5927\u5909\u3067\u3059\u3088\u306d\u3002\u659c\u3081\u8aad\u307f\u3057\u3066\u3042\u308b\u7a0b\u5ea6\u308f\u304b\u308b\u306a\u3089\u305d\u308c\u306b\u8d8a\u3057\u305f\u3053\u3068\u306f\u306a\u3044\u3068\u8003\u3048\u305f\u306e\u3067\u3001\u4f5c\u6210\u3057\u3088\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u3010\u53c2\u8003URL\u3011\nMeCab\u3068Python\u3067\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u66f8\u3044\u3066\u307f\u308b(\u6539)\nPython\u304b\u3089Twitter\u691c\u7d22\u3092\u304b\u3051\u3001\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067\u6587\u7ae0\u751f\u6210\u3092\u3057\u3066\u307f\u308b\u3002\nRaspberry Pi\u304b\u3089python3 + twython\u3067\u30c4\u30a4\u30c3\u30bf\u30fc\u306b\u6295\u7a3f\u3057\u3066\u307f\u308b\n\n\u30b3\u30fc\u30c9\n\ntestBot.py\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport MeCab\nimport feedparser\nimport random\nfrom twython import Twython, TwythonError\n\nCONSUMER_KEY = \"\u5929\u5149\u6e80\u308b\u51e6\u306b\u6211\u306f\u5728\u308a\"\nCONSUMER_SECRET = \"\u9ec4\u6cc9\u306e\u9580\u958b\u304f\u51e6\u306b\u6c5d\u5728\u308a\"\nACCESS_KEY = \"\u51fa\u3067\u3088\u795e\u306e\u96f7\"\nACCESS_SECRET = \"\u30a4\u30f3\u30c7\u30a3\u30b0\u30cd\u30a4\u30b7\u30e7\u30f3\uff01\uff01\"\napi = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET);\n\n\ndef resist_url():\n    rss_url = []\n    rss_url.append(\"http://dtmsokuhou.blog.jp/index.rdf\")\n    rss_url.append(\"http://kohrogi.com/?feed=rss2\")\n    rss_url.append(\"http://www.dtmstation.com/index.rdf\")\n    return rss_url\n\n\ndef get_rss_text(rss_url):\n    all_sentence = []\n    latest_entry = []\n    news_dic = []\n\n    for rss in rss_url:\n        news_dic.append(feedparser.parse(rss))\n    for news in news_dic:\n        latest_entry.append(news['entries'][0])\n        print(news.feed.title)\n    for entry in latest_entry:\n        print(entry.title)\n        all_sentence.append(entry.title)\n\n    return all_sentence\n\n\ndef analysis_sentence(all_sentence):\n    tagger = MeCab.Tagger(\"-Owakati\")\n    temp_str = \"\".join(all_sentence)\n    word_list = tagger.parse(temp_str)\n    word_list = word_list.replace('\\n','')\n    word_list = word_list.replace(' ', '')\n    word_list += \" \"\n    markov = {}\n    word1 = \"\"\n    word2 = \"\"\n    for word in word_list:\n        if word1 and word2:\n            if (word1, word2) not in markov:\n                markov[(word1, word2)] = []\n            markov[(word1, word2)].append(word)\n        word1, word2 = word2, word\n    if (word_list[len(word_list)-2], \" \") not in markov:\n        markov[(word_list[len(word_list)-2], \" \")] = []\n        print(word_list[len(word_list)-2], \" \")\n    markov[(word_list[len(word_list)-2], \" \")].append(\" \")\n    return markov, word_list\n\n\ndef create_sentence(markov, word_list):\n    count = 0\n    sentence = \"\"\n    currentWord = \"\"\n    pastWord = \"\"\n    word1, word2 = random.choice(list(markov.keys()))\n    while count in range(100):\n        currentWord = random.choice(markov[(word1, word2)])\n        if currentWord == pastWord:\n            break\n        sentence += currentWord\n        pastWord = currentWord\n        word1, word2 = word2, currentWord\n        count += 1\n    print(sentence)\n    return sentence\n\n\ndef tweet(sentence):\n    try:\n        api.update_status(status=sentence)\n    except TwythonError as e:\n        print(e)\n\n\nif __name__ == \"__main__\":\n    rss_url = resist_url()\n    all_sentence = get_rss_text(rss_url)\n    markov, word_list = analysis_sentence(all_sentence)\n    sentence = create_sentence(markov, word_list)\n    #print(sentence)\n    tweet(sentence)\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\u25a0\u53d6\u5f97\u3057\u3066\u304d\u305f\u6587\u7ae0\n\u3010\u671f\u9593\u9650\u5b9a\u3011 LA-2A \u30e2\u30c7\u30ea\u30f3\u30b0\u30b3\u30f3\u30d7\u300cCA-2A\u300d \u7121\u6599\u914d\u5e03\u4e2d\n\u30de\u30a6\u30b9\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u6240\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u64cd\u4f5c\u3067\u304d\u308b\u30d5\u30a3\u30b8\u30ab\u30eb\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc \u300enOb \u300f\u306f\u9ad8\u7d1a\u30aa\u30fc\u30c7\u30a3\u30aa\u6a5f\u5668\u306e\u3088\u3046\u306a\u7f8e\u3057\u3044\u5916\u89b3\u3067\u3042\u308b\n\u30c4\u30de\u30df\u3082\u30b9\u30a4\u30c3\u30c1\u3082\u7121\u3044!?Apogee\u306eThe Element\u30b7\u30ea\u30fc\u30ba\u306f\u3001\u672a\u6765\u306aTB\u30aa\u30fc\u30c7\u30a3\u30aa\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3060\u3063\u305f\n\u25a0\u751f\u6210\u3057\u305f\u6587\u7ae0\n\u30fb1\u56de\u76ee\uff1aement\u30b7\u30ea\u30fc\u30ba\u306f\u3001\u672a\u6765\u306aTB\u30aa\u30fc\u30c7\u30a3\u30aa\u30a4\u30f3\u30bf\u306e\u5834\u6240\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3060\u3063\u305f\n\u30fb2\u56de\u76ee\uff1aElement\u30b7\u30ea\u30fc\u30ba\u306f\u3001\u672a\u6765\u306aTB\u30aa\u30fc\u30c7\u30a3\u30aa\u6a5f\u5668\u306e\u3088\u3046\u306a\u7f8e\u3057\u3044\u5916\u89b3\u3067\u3042\u308b\u30c4\u30de\u30df\u3082\u30b9\u30a4\u30c3\u30c1\u3082\u7121\u3044!?Apoge\n\u30fb3\u56de\u76ee\uff1a\u308b\u30d5\u30a3\u30b8\u30ab\u30eb\u30b3\u30f3\u30d7\u300cCA-2A\u300d\u7121\u6599\u914d\u5e03\u4e2d\u30de\u30a6\u30b9\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u6240\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3060\u3063\u305f\n\n\u8ab2\u984c\n\n\u30a8\u30e9\u30fc\u306b\u5168\u304f\u5bfe\u51e6\u3057\u3066\u3044\u306a\u3044(140\u6587\u5b57\u5236\u9650\u3001\u901a\u4fe1\u969c\u5bb3...\u7b49)\n\u2192\u6587\u7ae0\u4f5c\u6210\u6642\u306b\u5236\u9650\u3092\u8a2d\u3051\u308b\u3001\u901a\u4fe1\u969c\u5bb3\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\n\u6587\u7ae0\u304c\u610f\u5473\u3092\u306a\u3057\u3066\u3044\u306a\u3044(\u6587\u982d\u304c\u540d\u8a5e\u59cb\u307e\u308a\u3067\u306a\u3044\u3001\u82f1\u8a9e\u304c\u9014\u4e2d\u3067\u3076\u3064\u5207\u308a\u306b\u306a\u3063\u3066\u3044\u308b...\u7b49)\n\u2192\u5206\u304b\u3061\u66f8\u304d\u306e\u307f\u3067\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6587\u6cd5\u306e\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u3066\u8272\u3005\u3084\u308b\u3002\n\u3000\u82f1\u8a9e\u306f\u2026\u2026MeCab\u306e\u8f9e\u66f8\u3092\u3044\u3058\u308c\u3070\u3069\u3046\u306b\u304b\u306a\u308b\u306e\u304b\u306a\uff1f\nRSS\u53d6\u5f97\u5148\u304c\u5c11\u306a\u3044\n\u2192\u5897\u3084\u3059\n\n\n\u53cd\u7701\u70b9\n\u3000\u30b3\u30fc\u30c9\u306f\u307b\u307c\u4e38\u30d1\u30af\u30ea\u306a\u308f\u3051\u3067\u3059\u304c\u3001\u7d50\u5c40\u66f8\u304d\u7d42\u308f\u3063\u305f\u5f8c\u306b\u5185\u5bb9\u3092\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\u3000\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u7406\u89e3\u3067\u304d\u306a\u3044\u3068\u65e9\u3055\u304c\u3067\u306a\u3044\u306e\u3067\u3001\u7406\u89e3\u529b\u3092\u9ad8\u3081\u305f\u3044\u3067\u3059\u306d\u3002\n\u3000\u3042\u3068\u306f\u809d\u5fc3\u306e\u4e2d\u8eab\u304c\u2026\u2026\u3002\u5727\u7e2e\u65b0\u805e\u304a\u3088\u3073\u3057\u3085\u3046\u307e\u3044\u541b\u304a\u3088\u3073\u304b\u3089\u3057\u3059\u3054\u3044\u3002\n# \u4f5c\u6210\u76ee\u7684\n\u300e\u5727\u7e2e\u65b0\u805e\u300f\u306eDTM\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u6b32\u3057\u304b\u3063\u305f(\u500b\u4eba\u7684\u7528\u9014)\u3002\nhttps://twitter.com/asshuku?lang=ja\n\u3044\u3061\u3044\u3061RSS\u306e\u60c5\u5831\u3092\u5168\u90e8\u898b\u308b\u306e\u3082\u5927\u5909\u3067\u3059\u3088\u306d\u3002\u659c\u3081\u8aad\u307f\u3057\u3066\u3042\u308b\u7a0b\u5ea6\u308f\u304b\u308b\u306a\u3089\u305d\u308c\u306b\u8d8a\u3057\u305f\u3053\u3068\u306f\u306a\u3044\u3068\u8003\u3048\u305f\u306e\u3067\u3001\u4f5c\u6210\u3057\u3088\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u3010\u53c2\u8003URL\u3011\n[MeCab\u3068Python\u3067\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u66f8\u3044\u3066\u307f\u308b(\u6539)](http://weboo-returns.com/blog/enhanced-markov-chain-by-python/)\n[Python\u304b\u3089Twitter\u691c\u7d22\u3092\u304b\u3051\u3001\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067\u6587\u7ae0\u751f\u6210\u3092\u3057\u3066\u307f\u308b\u3002](http://qiita.com/Gen6/items/3f3b4696d534b02ed4a3)\n[Raspberry Pi\u304b\u3089python3 + twython\u3067\u30c4\u30a4\u30c3\u30bf\u30fc\u306b\u6295\u7a3f\u3057\u3066\u307f\u308b](http://cranberrytree.blogspot.jp/2015/02/raspberry-pipython3-twython.html)\n\n# \u30b3\u30fc\u30c9\n\n```testBot.py\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport MeCab\nimport feedparser\nimport random\nfrom twython import Twython, TwythonError\n\nCONSUMER_KEY = \"\u5929\u5149\u6e80\u308b\u51e6\u306b\u6211\u306f\u5728\u308a\"\nCONSUMER_SECRET = \"\u9ec4\u6cc9\u306e\u9580\u958b\u304f\u51e6\u306b\u6c5d\u5728\u308a\"\nACCESS_KEY = \"\u51fa\u3067\u3088\u795e\u306e\u96f7\"\nACCESS_SECRET = \"\u30a4\u30f3\u30c7\u30a3\u30b0\u30cd\u30a4\u30b7\u30e7\u30f3\uff01\uff01\"\napi = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET);\n\n\ndef resist_url():\n    rss_url = []\n    rss_url.append(\"http://dtmsokuhou.blog.jp/index.rdf\")\n    rss_url.append(\"http://kohrogi.com/?feed=rss2\")\n    rss_url.append(\"http://www.dtmstation.com/index.rdf\")\n    return rss_url\n\n\ndef get_rss_text(rss_url):\n    all_sentence = []\n    latest_entry = []\n    news_dic = []\n\n    for rss in rss_url:\n        news_dic.append(feedparser.parse(rss))\n    for news in news_dic:\n        latest_entry.append(news['entries'][0])\n        print(news.feed.title)\n    for entry in latest_entry:\n        print(entry.title)\n        all_sentence.append(entry.title)\n\n    return all_sentence\n\n\ndef analysis_sentence(all_sentence):\n    tagger = MeCab.Tagger(\"-Owakati\")\n    temp_str = \"\".join(all_sentence)\n    word_list = tagger.parse(temp_str)\n    word_list = word_list.replace('\\n','')\n    word_list = word_list.replace(' ', '')\n    word_list += \" \"\n    markov = {}\n    word1 = \"\"\n    word2 = \"\"\n    for word in word_list:\n        if word1 and word2:\n            if (word1, word2) not in markov:\n                markov[(word1, word2)] = []\n            markov[(word1, word2)].append(word)\n        word1, word2 = word2, word\n    if (word_list[len(word_list)-2], \" \") not in markov:\n        markov[(word_list[len(word_list)-2], \" \")] = []\n        print(word_list[len(word_list)-2], \" \")\n    markov[(word_list[len(word_list)-2], \" \")].append(\" \")\n    return markov, word_list\n\n\ndef create_sentence(markov, word_list):\n    count = 0\n    sentence = \"\"\n    currentWord = \"\"\n    pastWord = \"\"\n    word1, word2 = random.choice(list(markov.keys()))\n    while count in range(100):\n        currentWord = random.choice(markov[(word1, word2)])\n        if currentWord == pastWord:\n            break\n        sentence += currentWord\n        pastWord = currentWord\n        word1, word2 = word2, currentWord\n        count += 1\n    print(sentence)\n    return sentence\n\n\ndef tweet(sentence):\n    try:\n        api.update_status(status=sentence)\n    except TwythonError as e:\n        print(e)\n\n\nif __name__ == \"__main__\":\n    rss_url = resist_url()\n    all_sentence = get_rss_text(rss_url)\n    markov, word_list = analysis_sentence(all_sentence)\n    sentence = create_sentence(markov, word_list)\n    #print(sentence)\n    tweet(sentence)\n\n```\n\n# \u5b9f\u884c\u7d50\u679c\n\n\u25a0\u53d6\u5f97\u3057\u3066\u304d\u305f\u6587\u7ae0\n\u3010\u671f\u9593\u9650\u5b9a\u3011 LA-2A \u30e2\u30c7\u30ea\u30f3\u30b0\u30b3\u30f3\u30d7\u300cCA-2A\u300d \u7121\u6599\u914d\u5e03\u4e2d\n\u30de\u30a6\u30b9\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u6240\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u64cd\u4f5c\u3067\u304d\u308b\u30d5\u30a3\u30b8\u30ab\u30eb\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc \u300enOb \u300f\u306f\u9ad8\u7d1a\u30aa\u30fc\u30c7\u30a3\u30aa\u6a5f\u5668\u306e\u3088\u3046\u306a\u7f8e\u3057\u3044\u5916\u89b3\u3067\u3042\u308b\n\u30c4\u30de\u30df\u3082\u30b9\u30a4\u30c3\u30c1\u3082\u7121\u3044!?Apogee\u306eThe Element\u30b7\u30ea\u30fc\u30ba\u306f\u3001\u672a\u6765\u306aTB\u30aa\u30fc\u30c7\u30a3\u30aa\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3060\u3063\u305f\n\n\u25a0\u751f\u6210\u3057\u305f\u6587\u7ae0\n\u30fb1\u56de\u76ee\uff1aement\u30b7\u30ea\u30fc\u30ba\u306f\u3001\u672a\u6765\u306aTB\u30aa\u30fc\u30c7\u30a3\u30aa\u30a4\u30f3\u30bf\u306e\u5834\u6240\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3060\u3063\u305f\n\u30fb2\u56de\u76ee\uff1aElement\u30b7\u30ea\u30fc\u30ba\u306f\u3001\u672a\u6765\u306aTB\u30aa\u30fc\u30c7\u30a3\u30aa\u6a5f\u5668\u306e\u3088\u3046\u306a\u7f8e\u3057\u3044\u5916\u89b3\u3067\u3042\u308b\u30c4\u30de\u30df\u3082\u30b9\u30a4\u30c3\u30c1\u3082\u7121\u3044!?Apoge\n\u30fb3\u56de\u76ee\uff1a\u308b\u30d5\u30a3\u30b8\u30ab\u30eb\u30b3\u30f3\u30d7\u300cCA-2A\u300d\u7121\u6599\u914d\u5e03\u4e2d\u30de\u30a6\u30b9\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u6240\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3060\u3063\u305f\n\n# \u8ab2\u984c\n\n1. \u30a8\u30e9\u30fc\u306b\u5168\u304f\u5bfe\u51e6\u3057\u3066\u3044\u306a\u3044(140\u6587\u5b57\u5236\u9650\u3001\u901a\u4fe1\u969c\u5bb3...\u7b49)\n\u2192\u6587\u7ae0\u4f5c\u6210\u6642\u306b\u5236\u9650\u3092\u8a2d\u3051\u308b\u3001\u901a\u4fe1\u969c\u5bb3\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\n\n2. \u6587\u7ae0\u304c\u610f\u5473\u3092\u306a\u3057\u3066\u3044\u306a\u3044(\u6587\u982d\u304c\u540d\u8a5e\u59cb\u307e\u308a\u3067\u306a\u3044\u3001\u82f1\u8a9e\u304c\u9014\u4e2d\u3067\u3076\u3064\u5207\u308a\u306b\u306a\u3063\u3066\u3044\u308b...\u7b49)\n\u2192\u5206\u304b\u3061\u66f8\u304d\u306e\u307f\u3067\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6587\u6cd5\u306e\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u3066\u8272\u3005\u3084\u308b\u3002\n\u3000\u82f1\u8a9e\u306f\u2026\u2026MeCab\u306e\u8f9e\u66f8\u3092\u3044\u3058\u308c\u3070\u3069\u3046\u306b\u304b\u306a\u308b\u306e\u304b\u306a\uff1f\n\n3. RSS\u53d6\u5f97\u5148\u304c\u5c11\u306a\u3044\n\u2192\u5897\u3084\u3059\n\n# \u53cd\u7701\u70b9\n\n\u3000\u30b3\u30fc\u30c9\u306f\u307b\u307c\u4e38\u30d1\u30af\u30ea\u306a\u308f\u3051\u3067\u3059\u304c\u3001\u7d50\u5c40\u66f8\u304d\u7d42\u308f\u3063\u305f\u5f8c\u306b\u5185\u5bb9\u3092\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\u3000\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u7406\u89e3\u3067\u304d\u306a\u3044\u3068\u65e9\u3055\u304c\u3067\u306a\u3044\u306e\u3067\u3001\u7406\u89e3\u529b\u3092\u9ad8\u3081\u305f\u3044\u3067\u3059\u306d\u3002\n\u3000\u3042\u3068\u306f\u809d\u5fc3\u306e\u4e2d\u8eab\u304c\u2026\u2026\u3002\u5727\u7e2e\u65b0\u805e\u304a\u3088\u3073\u3057\u3085\u3046\u307e\u3044\u541b\u304a\u3088\u3073\u304b\u3089\u3057\u3059\u3054\u3044\u3002\n", "tags": ["Python", "python3", "\u5f62\u614b\u7d20\u89e3\u6790", "Twitter", "\u30de\u30eb\u30b3\u30d5\u9023\u9396"]}