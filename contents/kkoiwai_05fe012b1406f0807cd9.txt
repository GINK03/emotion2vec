{"context": "\u4e00\u5fdc gist\u306b\u3082\u5f35\u3063\u3066\u304a\u3044\u305f\u3002\n\u4ed5\u7d44\u307f\u306f\u7c21\u5358\u3002\n\nKVS\u306e\u5168\u3066\u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3092json\u3067\u8fd4\u3059\u95a2\u6570 get_all \u3092\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3002\ninit\u306e\u5f15\u6570\u306b\u3001chaincode\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u3089\u3001\u305d\u306echaincode\u306eget_all\u3092\u547c\u3073\u51fa\u3057\u3001KVS\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3002\n\u4eca\u306e\u6642\u70b9\u3067\u306f\u53e4\u3044chaincode\u3092\u7121\u52b9\u306b\u3059\u308b\u3068\u304b\u305d\u3046\u3044\u3046\u3053\u3068\u306f\u7701\u7565\u3002\n\n\u3053\u308c\u3067\u9014\u4e2d\u3067chaincode\u66f8\u304d\u63db\u3048\u305f\u3044\u3063\u3066\u3053\u3068\u306b\u306a\u3063\u3066\u3082\u5927\u4e08\u592b\u3002\n\u306a\u304a\u3001json\u306e\u8aad\u307f\u66f8\u304d\u306b\u969b\u3057\u3066\u306fgolang \u306f \u3086\u308b\u3075\u308f\u306b JSON \u3092\u6271\u3048\u307e\u3041\u3059!\u3092\u3081\u3063\u3061\u3083\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u3044\u308d\u3044\u308d\u81ea\u4fe1\u306a\u3044\u90e8\u5206\u304c\u3044\u3063\u3071\u3044\u306a\u306e\u3067\u7a81\u3063\u8fbc\u307f\u6c42\u3081\u3066\u6652\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nget_all\u95a2\u6570\n\nmigrate_worldstate.go\nfunc (t *SimpleChaincode) Query(stub *shim.ChaincodeStub, function string, args []string) ([]byte, error) {\n  if function == \"get_all\" {\n        if len(args) != 0 {\n            fmt.Printf(\"Incorrect number of arguments passed\"); return nil, errors.New(\"QUERY: Incorrect number of arguments passed\")\n        }\n        return t.get_all(stub)\n    }\n    return nil, errors.New(\"QUERY: No such function.\")\n}\n\nfunc (t *SimpleChaincode) get_all(stub *shim.ChaincodeStub) ([]byte, error) {\n\n    var tupples [][]string\n\n    keysIter, err := stub.RangeQueryState(\"\", \"~\")\n    if err != nil {\n        return nil, errors.New(\"Unable to start the iterator\")\n    }\n\n    defer keysIter.Close()\n\n    for keysIter.HasNext() {\n        key, val, iterErr := keysIter.Next()\n        if iterErr != nil {\n            return nil, fmt.Errorf(\"keys operation failed. Error accessing state: %s\", err)\n        }\n        tupple := []string{ key , string(val) }\n        tupples=append(tupples, tupple)\n\n    }\n\n    marshalledTupples, err := json.Marshal(tupples)\n    return []byte(marshalledTupples), nil\n}\n\n\n\ninit\u90e8\u5206\n\nmigrate_worldstate.go\nfunc (t *SimpleChaincode) Init(stub *shim.ChaincodeStub, function string, args []string) ([]byte, error) {\n\n  if len(args) == 1 {\n        // migrate from old chaincode. args[0] should have chaincode address\n        val, err := stub.QueryChaincode(args[0],\"get_all\", []string{} )\n        if err != nil {\n            return nil, errors.New(\"Unable to call chaincode \" + args[0])\n        }\n\n        var states interface{}\n        err = json.Unmarshal(val, &states)\n        if err != nil {\n            return nil, errors.New(\"Unable to marshal chaincode return value \" + string(val))\n        }\n\n        for _, stateIf := range states.([]interface{}){\n            state := stateIf.([]interface{})\n            stateKey := state[0].(string)\n            stateVal := state[1].(string)\n            if stateKey == \"\" {\n                return nil, errors.New(\"Unable to PutState: missing statekey [ \" + stateKey +\" , \"+ string(stateVal) + \" ]\")\n            }\n            err = stub.PutState(stateKey, []byte(stateVal))\n            if err != nil {\n                return nil, errors.New(\"Unable to PutState [ \" + stateKey +\" , \"+ string(stateVal) + \" ]\")\n            }\n        }\n    }\n\n    return nil, nil\n}\n\n\n\u4e00\u5fdc [gist](https://gist.github.com/kkoiwai/d07311d040b7be5476b50d73662e994b)\u306b\u3082\u5f35\u3063\u3066\u304a\u3044\u305f\u3002\n\n\u4ed5\u7d44\u307f\u306f\u7c21\u5358\u3002\n\n* KVS\u306e\u5168\u3066\u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3092json\u3067\u8fd4\u3059\u95a2\u6570 get_all \u3092\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3002\n* init\u306e\u5f15\u6570\u306b\u3001chaincode\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u3089\u3001\u305d\u306echaincode\u306eget_all\u3092\u547c\u3073\u51fa\u3057\u3001KVS\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3002\n* \u4eca\u306e\u6642\u70b9\u3067\u306f\u53e4\u3044chaincode\u3092\u7121\u52b9\u306b\u3059\u308b\u3068\u304b\u305d\u3046\u3044\u3046\u3053\u3068\u306f\u7701\u7565\u3002\n\n\n\u3053\u308c\u3067\u9014\u4e2d\u3067chaincode\u66f8\u304d\u63db\u3048\u305f\u3044\u3063\u3066\u3053\u3068\u306b\u306a\u3063\u3066\u3082\u5927\u4e08\u592b\u3002\n\n\u306a\u304a\u3001json\u306e\u8aad\u307f\u66f8\u304d\u306b\u969b\u3057\u3066\u306f[golang \u306f \u3086\u308b\u3075\u308f\u306b JSON \u3092\u6271\u3048\u307e\u3041\u3059!](https://www.kaoriya.net/blog/2016/06/25/)\u3092\u3081\u3063\u3061\u3083\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u3044\u308d\u3044\u308d\u81ea\u4fe1\u306a\u3044\u90e8\u5206\u304c\u3044\u3063\u3071\u3044\u306a\u306e\u3067\u7a81\u3063\u8fbc\u307f\u6c42\u3081\u3066\u6652\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n## get_all\u95a2\u6570\n\n```migrate_worldstate.go\nfunc (t *SimpleChaincode) Query(stub *shim.ChaincodeStub, function string, args []string) ([]byte, error) {\n  if function == \"get_all\" {\n\t\tif len(args) != 0 {\n\t\t\tfmt.Printf(\"Incorrect number of arguments passed\"); return nil, errors.New(\"QUERY: Incorrect number of arguments passed\")\n\t\t}\n\t\treturn t.get_all(stub)\n\t}\n\treturn nil, errors.New(\"QUERY: No such function.\")\n}\n\nfunc (t *SimpleChaincode) get_all(stub *shim.ChaincodeStub) ([]byte, error) {\n\n\tvar tupples [][]string\n\n\tkeysIter, err := stub.RangeQueryState(\"\", \"~\")\n\tif err != nil {\n\t\treturn nil, errors.New(\"Unable to start the iterator\")\n\t}\n\n\tdefer keysIter.Close()\n\n\tfor keysIter.HasNext() {\n\t\tkey, val, iterErr := keysIter.Next()\n\t\tif iterErr != nil {\n\t\t\treturn nil, fmt.Errorf(\"keys operation failed. Error accessing state: %s\", err)\n\t\t}\n\t\ttupple := []string{ key , string(val) }\n\t\ttupples=append(tupples, tupple)\n\n\t}\n\n\tmarshalledTupples, err := json.Marshal(tupples)\n\treturn []byte(marshalledTupples), nil\n}\n```\n\n## init\u90e8\u5206\n\n```migrate_worldstate.go\nfunc (t *SimpleChaincode) Init(stub *shim.ChaincodeStub, function string, args []string) ([]byte, error) {\n\n  if len(args) == 1 {\n\t\t// migrate from old chaincode. args[0] should have chaincode address\n\t\tval, err := stub.QueryChaincode(args[0],\"get_all\", []string{} )\n\t\tif err != nil {\n\t\t\treturn nil, errors.New(\"Unable to call chaincode \" + args[0])\n\t\t}\n\t\t\n\t\tvar states interface{}\n\t\terr = json.Unmarshal(val, &states)\n\t\tif err != nil {\n\t\t\treturn nil, errors.New(\"Unable to marshal chaincode return value \" + string(val))\n\t\t}\n\t\t\n\t\tfor _, stateIf := range states.([]interface{}){\n\t\t\tstate := stateIf.([]interface{})\n\t\t\tstateKey := state[0].(string)\n\t\t\tstateVal := state[1].(string)\n\t\t\tif stateKey == \"\" {\n\t\t\t\treturn nil, errors.New(\"Unable to PutState: missing statekey [ \" + stateKey +\" , \"+ string(stateVal) + \" ]\")\n\t\t\t}\n\t\t\terr = stub.PutState(stateKey, []byte(stateVal))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errors.New(\"Unable to PutState [ \" + stateKey +\" , \"+ string(stateVal) + \" ]\")\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn nil, nil\n}\n```\n", "tags": ["Hyperledger", "Chaincode", "Blockchain"]}