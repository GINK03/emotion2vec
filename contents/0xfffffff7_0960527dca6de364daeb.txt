{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nC++\u306emain\u95a2\u6570\u306b\u5168\u3066\u30d9\u30bf\u66f8\u304d\u3067\u66f8\u3044\u3066HTTP2\u306e\u901a\u4fe1\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u6700\u901f\u5b9f\u88c5\u306a\u306e\u3067\u6700\u4f4e\u9650\u306e\u901a\u4fe1\u306b\u9650\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nMac\u3068Windows\u4e21\u65b9\u3067\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002\n\u63a5\u7d9a\u5148\u306f\u300cnghttp2.org\u300d\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\u5909\u66f4\u3057\u305f\u3044\u4eba\u306fhost\u306e\u90e8\u5206\u3092\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002(\u305d\u306e\u5834\u5408\u306fHEADERS_FRAME\u3082\u66f8\u304d\u63db\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059)\n\u4eca\u56de\u306f\u5e73\u6587\u3067\u6d41\u308c\u308b\u901a\u4fe1\u3067\u3059\u3002\nSSL\u7248\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001main\u95a2\u6570\u3060\u3051\u3068\u3044\u3044\u3064\u3064\u3082\u30013\u3064\u3060\u3051\u5197\u9577\u306a\u51e6\u7406\u3092\u95a2\u6570\u5316\u3057\u3066\u307e\u3059\u3002\u6570\u884c\u7a0b\u5ea6\u306e\u5b9a\u578b\u51e6\u7406\u3067\u3059\u3002\n\u53c2\u8003\u306b\u3057\u305f\u306e\u306f\u3053\u3061\u3089\u306e\u8cc7\u6599\u3067\u3059\u3002\nhttps://speakerdeck.com/syucream/2-zui-su-shi-zhuang-v3\n\n\u4f9d\u5b58\nwindows\u306e\u5834\u5408\u306f\u4e0b\u8a18\u306e\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u3000Ws2_32.lib\n\n\u76ee\u7684\nHTTP2\u306e\u6700\u521d\u306e\u30cf\u30fc\u30c9\u30eb\u3092\u8d85\u3048\u308b\u305f\u3081\u306e\u52c9\u5f37\u3002\nmain\u95a2\u6570\u306b\u5168\u3066\u66f8\u304f\u4e8b\u306b\u3088\u3063\u3066\u51e6\u7406\u306e\u6d41\u308c\u3092\u660e\u78ba\u306b\u3059\u308b\u3002\n\u30d0\u30a4\u30ca\u30ea\u3082\u305d\u306e\u307e\u307e\u30bd\u30fc\u30b9\u306b\u6253\u3061\u8fbc\u3080\u3053\u3068\u306b\u3088\u3063\u3066\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u5b9f\u88c5\n[https://github.com/0xfffffff7/HelloHttp2]\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string>\n\n#ifdef WIN32\n#include <winsock2.h>\n#include <windows.h>\n#pragma warning(disable:4996)\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <netdb.h>\n#include <fcntl.h>\n#include <signal.h>\n#include <unistd.h>\n#define SOCKET int\n#define SD_BOTH SHUT_WR\n#endif\n\n\n#define READ_BUF_SIZE 4096\n#define BUF_SIZE 4097\n#define PORT 80\n#define BINARY_FRAME_LENGTH 9\n\n\n// 3\u30d0\u30a4\u30c8\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30aa\u30fc\u30c0\u30fc\u30924\u30d0\u30a4\u30c8\u6574\u6570\u3078\u5909\u63db\u3059\u308b\u95a2\u6570.\nchar* to_framedata3byte(char *p, int &n);\n\nint get_error();\n\nvoid close_socket(SOCKET socket);\n\nint main(int argc, char **argv)\n{\n\n\n    //------------------------------------------------------------\n    // \u63a5\u7d9a\u5148\u30db\u30b9\u30c8\u540d.\n    // HTTP2\u306b\u5bfe\u5fdc\u3057\u305f\u30db\u30b9\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059.\n    //------------------------------------------------------------\n    std::string host = \"nghttp2.org\";\n\n\n\n\n    //------------------------------------------------------------\n    // TCP\u306e\u6e96\u5099.\n    //------------------------------------------------------------\n#ifdef WIN32\n    WSADATA wsaData;\n    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n        return 0;\n    }\n#endif\n\n    int error = 0;\n    struct hostent *hp;\n    struct sockaddr_in addr;\n    SOCKET _socket;\n\n    if (!(hp = gethostbyname(host.c_str()))){\n        return -1;\n    }\n    memset(&addr, 0, sizeof(addr));\n    addr.sin_addr = *(struct in_addr*)hp->h_addr_list[0];\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(PORT);\n\n    if ((_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))<0){\n        return -1;\n    }\n    if (connect(_socket, (struct sockaddr *)&addr, sizeof(addr))<0){\n        return -1;\n    }\n\n\n\n    //------------------------------------------------------------\n    // HTTP2\u306e\u6e96\u5099.\n    // SSL\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u4e0b\u8a18\u306e24\u30aa\u30af\u30c6\u30c3\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u3067\u3001\n    // \u3053\u308c\u304b\u3089HTTP2\u901a\u4fe1\u3092\u59cb\u3081\u308b\u3053\u3068\u3092\u4f1d\u3048\u308b.\n    //------------------------------------------------------------\n    std::string pri = \"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\";\n    int r = (int)::send(_socket, pri.c_str(), pri.length(), NULL);\n\n\n    //------------------------------------------------------------\n    // \u5168\u3066\u306e\u30c7\u30fc\u30bf\u306f\u30d0\u30a4\u30ca\u30ea\u30d5\u30ec\u30fc\u30e0\u3067\u9001\u53d7\u4fe1\u3055\u308c\u308b\n    // \u30d0\u30a4\u30ca\u30ea\u30d5\u30ec\u30fc\u30e0\u306f\u5171\u901a\u306e9\u30d0\u30a4\u30c8\u30d8\u30c3\u30c0\u3068\u3001\u30c7\u30fc\u30bf\u672c\u4f53\u3067\u3042\u308bpayload\u3092\u6301\u3064\n    //\n    // \u25cf\u30d8\u30c3\u30c0\u90e8\u5206\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n    //\n    //   1-3\u30d0\u30a4\u30c8\u76ee  payload\u306e\u9577\u3055\u3002\u9577\u3055\u306b\u30d8\u30c3\u30c0\u306e9\u30d0\u30a4\u30c8\u306f\u542b\u307e\u308c\u306a\u3044\u3002.\n    //   4\u30d0\u30a4\u30c8\u76ee\u3000\u30d5\u30ec\u30fc\u30e0\u306e\u30bf\u30a4\u30d7.\n    //   5\u30d0\u30a4\u30c8\u76ee\u3000\u30d5\u30e9\u30b0.\n    //   6-9\u30d0\u30a4\u30c8\u76ee\u3000\u30b9\u30c8\u30ea\u30fc\u30e0ID.(\u6700\u521d\u306e1bit\u306f\u4e88\u7d04\u3067\u5fc5\u305a0)\n    //\n    //  |Length(24bit)|Type(8bit)|Flags(8bit)|Reserve(1bit)|Stream Identifier(31bit)|\n    //  |Frame Payload(Length\u30d0\u30a4\u30c8\u5206)|\n    //\n    //\n    // [\u30d5\u30ec\u30fc\u30e0\u306e\u30bf\u30a4\u30d7]\n    //\n    // DATA(0x00)  \u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3084\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u3092\u8ee2\u9001\u3059\u308b\n    // HEADERS(0x01)  \u5727\u7e2e\u6e08\u307f\u306eHTTP\u30d8\u30c3\u30c0\u30fc\u3092\u8ee2\u9001\u3059\u308b\n    // PRIORITY(0x02)  \u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u512a\u5148\u5ea6\u3092\u5909\u66f4\u3059\u308b\n    // RST_STREAM(0x03)  \u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d42\u4e86\u3092\u901a\u77e5\u3059\u308b\n    // SETTINGS(0x04)  \u63a5\u7d9a\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\n    // PUSH_PROMISE(0x05)  \u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u30d7\u30c3\u30b7\u30e5\u3092\u901a\u77e5\u3059\u308b\n    // PING(0x06)  \u63a5\u7d9a\u72b6\u6cc1\u3092\u78ba\u8a8d\u3059\u308b\n    // GOAWAY(0x07)  \u63a5\u7d9a\u306e\u7d42\u4e86\u3092\u901a\u77e5\u3059\u308b\n    // WINDOW_UPDATE(0x08)   \u30d5\u30ed\u30fc\u5236\u5fa1\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u66f4\u65b0\u3059\u308b\n    // CONTINUATION(0x09)  HEADERS\u30d5\u30ec\u30fc\u30e0\u3084PUSH_PROMISE\u30d5\u30ec\u30fc\u30e0\u306e\u7d9a\u304d\u306e\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3059\u308b\n    //\n    // \u305d\u308c\u305e\u308c\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3084\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u306f\u30b9\u30c8\u30ea\u30fc\u30e0ID\u304c\u4ed8\u4e0e\u3055\u308c\u308b.\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u767a\u884c\u3055\u308c\u308b\u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f\u5947\u6570.\n    // \u30b5\u30fc\u30d0\u30fc\u304b\u3089\u767a\u884c\u3055\u308c\u308b\u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f\u5076\u6570.\n    // \u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u306f\u512a\u5148\u9806\u4f4d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059.\n    // \u4eca\u56de\u306f\u30b9\u30c8\u30ea\u30fc\u30e0ID\u300c1\u300d\u3060\u3051\u3092\u4f7f\u7528\u3057\u307e\u3059.\n    //------------------------------------------------------------\n\n    //------------------------------------------------------------\n    // HTTP2\u901a\u4fe1\u306e\u30d5\u30ed\u30fc\n    //\n    // \u307e\u305a\u6700\u521d\u306bSetting\u30d5\u30ec\u30fc\u30e0\u3092\u5fc5\u305a\u4ea4\u63db\u3057\u307e\u3059.\n    // Setting\u30d5\u30ec\u30fc\u30e0\u3092\u4ea4\u63db\u3057\u305f\u3089\u3001\u8a2d\u5b9a\u3092\u9069\u7528\u3057\u305f\u3053\u3068\u3092\u4f1d\u3048\u308b\u305f\u3081\u306b\u5fc5\u305aACK\u3092\u9001\u308a\u307e\u3059.\n    //\n    // Client -> Server  SettingFrame\n    // Client <- Server  SettingFrame\n    // Client -> Server  ACK\n    // Client <- Server  ACK\n    //\n    // Client -> Server  HEADERS_FRAME (GET\u306a\u3069)\n    // Client <- Server  HEADERS_FRAME (\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306a\u3069)\n    // Client <- Server  DATA_FRAME (Body)\n    // \n    // Client -> Server  GOAWAY_FRAME (\u9001\u4fe1\u7d42\u4e86)\n    //------------------------------------------------------------\n\n    //------------------------------------------------------------\n    // Setting\u30d5\u30ec\u30fc\u30e0\u306e\u9001\u4fe1.\n    // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u306f\u300c0x04\u300d\n    // \u5168\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u63a1\u7528\u3059\u308b\u305f\u3081payload\u306f\u7a7a\u3067\u3059\u3002\n    // Setting\u30d5\u30ec\u30fc\u30e0\u306e\u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f0\u3067\u3059.(\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u5168\u4f53\u306b\u9069\u7528\u3055\u308c\u308b\u305f\u3081)\n    //\n    // \u4eca\u56de\u306f\u7a7a\u3067\u3059\u304cSetting\u30d5\u30ec\u30fc\u30e0\u306epayload\u306f\u6b21\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3059.\n    //\n    // |Identifer(16bit)|Value(32bit)|\n    // \u4e0a\u8a18\u3092\u8a2d\u5b9a\u5024\u306e\u6570\u3060\u3051\u9023\u7d50\u3055\u305b\u3001\u6700\u7d42\u7684\u306a\u9577\u3055\u3092\u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\u306eLength\u306b\u8a18\u8ff0\u3057\u307e\u3059.\n    //\n    // Identifer\u306f\u6b21\u306e\u3082\u306e\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n    // SETTINGS_HEADER_TABLE_SIZE (0x1)  \u521d\u671f\u5024\u306f 4,096 \u30aa\u30af\u30c6\u30c3\u30c8\n    // SETTINGS_ENABLE_PUSH (0x2)  \u521d\u671f\u5024\u306f1\n    // SETTINGS_MAX_CONCURRENT_STREAMS (0x3)  \u521d\u671f\u72b6\u614b\u3067\u306f\u7121\u5236\u9650\n    // SETTINGS_INITIAL_WINDOW_SIZE (0x4)   \u521d\u671f\u5024\u306f 2^16-1 (65,535)\n    // SETTINGS_MAX_FRAME_SIZE (0x5)    \u521d\u671f\u5024\u306f 2^24-1 (16777215)\n    // SETTINGS_MAX_HEADER_LIST_SIZE (0x6)   \u521d\u671f\u5024\u306f\u7121\u5236\u9650\n    //------------------------------------------------------------\n    const char settingframe[BINARY_FRAME_LENGTH] = { 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 };\n\n    r = (int)::send(_socket, settingframe, BINARY_FRAME_LENGTH, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n\n\n    //------------------------------------------------------------\n    // Setting\u30d5\u30ec\u30fc\u30e0\u306e\u53d7\u4fe1.\n    //------------------------------------------------------------\n    char buf[BUF_SIZE] = { 0 };\n    char* p = buf;\n\n    r = (int)::recv(_socket, p, READ_BUF_SIZE, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n\n\n\n    //------------------------------------------------------------\n    // ACK\u306e\u9001\u4fe1.\n    // ACK\u306fSetting\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u3063\u305f\u5074\u304c\u9001\u308b\u5fc5\u8981\u304c\u3042\u308b.\n    // ACK\u306fSetting\u30d5\u30ec\u30fc\u30e0\u306e\u30d5\u30e9\u30b0\u306b0x01\u3092\u7acb\u3066\u3066payload\u3092\u7a7a\u306b\u3057\u305f\u3082\u306e.\n    //\n    // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u306f\u300c0x04\u300d\n    // 5\u30d0\u30a4\u30c8\u76ee\u306b\u30d5\u30e9\u30b00x01\u3092\u7acb\u3066\u307e\u3059\u3002\n    //------------------------------------------------------------\n    const char settingframeAck[BINARY_FRAME_LENGTH] = { 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00 };\n\n    r = (int)::send(_socket, settingframeAck, BINARY_FRAME_LENGTH, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n\n\n    // \u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306eACK\u306e\u53d7\u4fe1\u306f\u4e0b\u3067\u3084\u308a\u307e\u3059..\n\n    //------------------------------------------------------------\n    // HEADERS\u30d5\u30ec\u30fc\u30e0\u306e\u9001\u4fe1.\n    //\n    // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u306f\u300c0x01\u300d\n    // \u3053\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u5fc5\u8981\u306a\u30d8\u30c3\u30c0\u304c\u3059\u3079\u3066\u542b\u307e\u308c\u3066\u3044\u3066\u3053\u308c\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u7d42\u308f\u3089\u305b\u308b\u3053\u3068\u3092\u793a\u3059\u305f\u3081\u306b\u3001\n    // END_STREAM(0x1)\u3068END_HEADERS(0x4)\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n    // \u5177\u4f53\u7684\u306b\u306f5\u30d0\u30a4\u30c8\u76ee\u306e\u30d5\u30e9\u30b0\u306b\u300c0x05\u300d\u3092\u7acb\u3066\u307e\u3059\u3002\n    // \u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f\u300c0x01\u300d\u3092\u4f7f\u3044\u307e\u3059.\n    //\n    // \u3053\u3053\u307e\u3067\u3067\u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\u306f\u300c\u30da\u30a4\u30ed\u30fc\u30c9\u306e\u9577\u3055(3\u30d0\u30a4\u30c8), 0x01, 0x05, 0x00, 0x00, 0x00, 0x01\u300d\u306b\u306a\u308a\u307e\u3059.\n    //\n    //\n    // \u25cfHTTP1.1\u3067\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\n    // \u3000\u3000\"GET / HTTP1/1\"\n    // \u3000\u3000\"Host: nghttp2.org\n    //\n    // \u25cfHTTP2\u3067\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\n    //      :method GET\n    //      :path /\n    //      :scheme http\n    //      :authority nghttp2.org\n    //\n    // \u672c\u6765HTTP2\u306fHPACK\u3068\u3044\u3046\u65b9\u6cd5\u3067\u5727\u7e2e\u3057\u307e\u3059.\n    // \u4eca\u56de\u306f\u4e0a\u8a18\u306eHTTP2\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u3092\u5727\u7e2e\u306a\u3057\u3067\u8a18\u8ff0\u3057\u307e\u3059.\n    //\n    // \u4e00\u3064\u306e\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8a18\u8ff0\u4f8b\n    //\n    // |0|0|0|0|      0|   // \u6700\u521d\u306e4\u30d3\u30c3\u30c8\u306f\u5727\u7e2e\u306b\u95a2\u3059\u308b\u60c5\u5831\u3001\u6b21\u306e4\u30d3\u30c3\u30c8\u306f\u30d8\u30c3\u30c0\u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30af\u30b9.(\u4eca\u56de\u306f\u5727\u7e2e\u3057\u306a\u3044\u306e\u3067\u3059\u3079\u30660)\n    // |0|            7|   // \u6700\u521d\u306e1bit\u306f\u5727\u7e2e\u306b\u95a2\u3059\u308b\u60c5\u5831(\u4eca\u56de\u306f0)\u3001\u6b21\u306e7bit\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u9577\u3055\n    // |:method|           // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u305d\u306e\u307e\u307eASCII\u306e\u30aa\u30af\u30c6\u30c3\u30c8\u3067\u66f8\u304f\u3002\n    // |0|            3|   // \u6700\u521d\u306e1bit\u306f\u5727\u7e2e\u306b\u95a2\u3059\u308b\u60c5\u5831(\u4eca\u56de\u306f0)\u3001\u6b21\u306e7bit\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u9577\u3055\n    // |GET|               // \u5024\u3092\u305d\u306e\u307e\u307eASCII\u306e\u30aa\u30af\u30c6\u30c3\u30c8\u3067\u66f8\u304f\u3002\n    //\n    // \u4e0a\u8a18\u304c\u4e00\u3064\u306e\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8a18\u8ff0\u4f8b\u3067\u3001\u30d8\u30c3\u30c0\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u6570\u3060\u3051\u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059.\n    //\n    //------------------------------------------------------------\n    const char headersframe[69] = { \n    0x00, 0x00, 0x3c, 0x01, 0x04, 0x00, 0x00, 0x00, 0x01,  // \u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\n    0x00,                                                  // \u5727\u7e2e\u60c5\u5831\n    0x07, 0x3a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,        // 7 :method\n    0x03, 0x47, 0x45, 0x54,                                // 3 GET\n    0x00,                                                  // \u5727\u7e2e\u60c5\u5831\n    0x05, 0x3a, 0x70, 0x61, 0x74, 0x68,                    // 5 :path\n    0x01, 0x2f,                                            // 1 /\n    0x00,                                                  // \u5727\u7e2e\u60c5\u5831\n    0x07, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,        // 7 :scheme\n    0x04, 0x68, 0x74, 0x74, 0x70,                          // 4 http\n    0x00,                                                  // \u5727\u7e2e\u60c5\u5831\n    0x0a, 0x3a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,      // 10 :authority\n    0x0b, 0x6e, 0x67, 0x68, 0x74, 0x74, 0x70, 0x32, 0x2e, 0x6f, 0x72, 0x67   // 11 nghttp2.org\n    };\n\n    r = (int)::send(_socket, headersframe, 69, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n\n\n    //------------------------------------------------------------\n    // HEADERS\u30d5\u30ec\u30fc\u30e0\u306e\u53d7\u4fe1.\n    //------------------------------------------------------------\n    int payload_length = 0;\n    int frame_type = 0;\n\n    // \u307e\u305a\u306f\u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u3066payload\u306elength\u3092\u53d6\u5f97\u3059\u308b\u3002\n    while (1){\n\n        memset(buf, 0x00, BINARY_FRAME_LENGTH);\n        p = buf;\n\n        r = (int)::recv(_socket, p, BINARY_FRAME_LENGTH, NULL);\n        if (r == -1){\n            error = get_error();\n            ::shutdown(_socket, SD_BOTH);\n            close_socket(_socket);\n            return 0;\n        }\n\n        // ACK\u304c\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067ACK\u306a\u3089\u7121\u8996\u3057\u3066\u6b21\u3092\u8aad\u3080\u3002\n        if (memcmp(buf, settingframeAck, BINARY_FRAME_LENGTH) == 0){\n            continue;\n        }\n        else{\n\n            // payload\u306e\u9577\u3055\u3092\u53d6\u5f97\u3059\u308b\u3002\n            p = to_framedata3byte(p, payload_length);\n\n            // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u304cHEADERS_FRAME\u3067\u306f\u306a\u304b\u3063\u305f\u3089\u8aad\u307f\u98db\u3070\u3059\u3002\n            memcpy(&frame_type, p, 1);\n            if (frame_type != 1){\n\n                r = (int)::recv(_socket, p, payload_length, NULL);\n                if (r == -1){\n                    error = get_error();\n                    ::shutdown(_socket, SD_BOTH);\n                    close_socket(_socket);\n                    return 0;\n                }\n\n                continue;\n            }\n            break;\n        }\n    }\n\n    // \u6b21\u306bHEADERS\u30d5\u30ec\u30fc\u30e0\u306epayload\u3092\u53d7\u4fe1\u3059\u308b\u3002\n    memset(buf, 0x00, payload_length);\n    p = buf;\n    r = (int)::recv(_socket, p, payload_length, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n\n\n    //------------------------------------------------------------\n    // DATA\u30d5\u30ec\u30fc\u30e0\u306e\u53d7\u4fe1.\n    //------------------------------------------------------------\n\n    // \u307e\u305a\u306f\u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u3066payload\u306elength\u3092\u53d6\u5f97\u3059\u308b\u3002\n    memset(buf, 0x00, BINARY_FRAME_LENGTH);\n    p = buf;\n    r = (int)::recv(_socket, p, BINARY_FRAME_LENGTH, NULL);\n    to_framedata3byte(p, payload_length);\n\n    // \u6b21\u306bpayload\u3092\u53d7\u4fe1\u3059\u308b\u3002\n    while (payload_length > 0){\n\n        memset(buf, 0x00, BUF_SIZE);\n        p = buf;\n\n        r = (int)::recv(_socket, p, READ_BUF_SIZE, NULL);\n        if (r == -1){\n            error = get_error();\n            ::shutdown(_socket, SD_BOTH);\n            close_socket(_socket);\n            return 0;\n        }\n        payload_length -= r;\n\n        printf(\"%s\", p);\n    }\n\n\n    //------------------------------------------------------------\n    // GOAWAY\u306e\u9001\u4fe1.\n    //\n    // \u3053\u308c\u4ee5\u4e0a\u30c7\u30fc\u30bf\u3092\u9001\u53d7\u4fe1\u3057\u306a\u3044\u5834\u5408\u306fGOAWAY\u30d5\u30ec\u30fc\u30e0\u3092\u9001\u4fe1\u3057\u307e\u3059.\n    // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u306f\u300c0x07\u300d\n    // \u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f\u300c0x00\u300d(\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u5168\u4f53\u306b\u9069\u7528\u3059\u308b\u305f\u3081)\n    //------------------------------------------------------------\n    const char goawayframe[17] = { 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00 };\n\n    r = (int)::send(_socket, goawayframe, 17, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n\n\n\n    //------------------------------------------------------------\n    // \u5f8c\u59cb\u672b.\n    //------------------------------------------------------------\n    ::shutdown(_socket, SD_BOTH);\n    close_socket(_socket);\n\n    return 0;\n\n}\n\nvoid close_socket(SOCKET socket){\n#ifdef WIN32\n    ::closesocket(socket);\n    WSACleanup();\n#else\n    ::close(socket);\n#endif\n}\n\nint get_error(){\n#ifdef WIN32\n    return WSAGetLastError();\n#endif\n    return errno;\n}\n\nchar* to_framedata3byte(char *p, int &n){\n    u_char buf[4] = { 0 };\n    memcpy(&(buf[1]), p, 3);\n    memcpy(&n, buf, 4);\n    n = ntohl(n);\n    p += 3;\n    return p;\n}\n\n\u3000\u3000\n\n\u7d50\u679c\n\u901a\u4fe1\u306b\u554f\u984c\u306a\u3051\u308c\u3070\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u6b21\u306e\u3088\u3046\u306ahtml\u304c\u8868\u793a\u3055\u308c\u308b\u3067\u3057\u3087\u3046\u3002\n<!DOCTYPE html>\n<!--[if IEMobile 7 ]><html class=\"no-js iem7\"><![endif]-->\n<!--[if lt IE 9]><html class=\"no-js lte-ie8\"><![endif]-->\n<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class=\"no-js\" lang=\"en\"><!--<![endif]-->\n<head>\n  <meta charset=\"utf-8\">\n  <title>Nghttp2: HTTP/2 C Library - nghttp2.org</title>\n  <meta name=\"author\" content=\"Tatsuhiro Tsujikawa\">\n\n\n  <meta name=\"description\" content=\"Nghttp2: HTTP/2 C Library Feb 16th, 2015 11:16 pm nghttp2 is an implementation of HTTP/2 in C.\nHTTP/2 and HPACK has been approved by IETF,\nwe are &hellip;\">\n\n\n  <!-- http://t.co/dKP3o1e -->\n  <meta name=\"HandheldFriendly\" content=\"True\">\n  <meta name=\"MobileOptimized\" content=\"320\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n\n  <link rel=\"canonical\" href=\"//nghttp2.org\">\n  <link href=\"/favicon.png\" rel=\"icon\">\n  <link href=\"/stylesheets/screen.css\" media=\"screen, projection\" rel=\"stylesheet\" type=\"text/css\">\n  <link href=\"/atom.xml\" rel=\"alternate\" title=\"nghttp2.org\" type=\"application/atom+xml\">\n  <script src=\"/javascripts/modernizr-2.0.js\"></script>\n  <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n  <script>!window.jQuery && document.write(unescape('%3Cscript src=\"./javascripts/libs/jquery.min.js\"%3E%3C/script%3E'))</script>\n  <script src=\"/javascripts/octopress.js\" type=\"text/javascript\"></script>\n  <!--Fonts from Google\"s Web font directory at http://google.com/webfonts -->\n<link href=\"//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n\n  </head>\n\n<body   >\n  <header role=\"banner\"><hgroup>\n  <h1><a href=\"/\">nghttp2.org</a></h1>\n\n    <h2>HTTP/2 C library and tools</h2>\n\n</hgroup>\n\n</header>\n  <nav role=\"navigation\"><ul class=\"subscription\" data-subscription=\"rss\">\n  <li><a href=\"/atom.xml\" rel=\"subscribe-rss\" title=\"subscribe via RSS\">RSS</a></li>\n\n</ul>\n\n<form action=\"https://www.google.com/search\" method=\"get\">\n  <fieldset role=\"search\">\n    <input type=\"hidden\" name=\"q\" value=\"site://nghttp2.org\" />\n    <input class=\"search\" type=\"text\" name=\"q\" results=\"0\" placeholder=\"Search\"/>\n  </fieldset>\n</form>\n\n<ul class=\"main-navigation\">\n  <li><a href=\"/\">Top</a></li>\n  <li><a href=\"/blog/\">Blog</a></li>\n  <li><a href=\"/blog/archives\">Archives</a></li>\n  <li><a href=\"/documentation/\">Documentation</a></li>\n  <li><a href=\"/httpbin\">Httpbin</a></li>\n  <li><a href=\"https://github.com/tatsuhiro-t/nghttp2/releases\">Releases</a></li>\n  <li><a href=\"https://github.com/tatsuhiro-t/nghttp2\">Source Code</a></li>\n</ul>\n\n</nav>\n  <div id=\"main\">\n    <div id=\"content\">\n      <div>\n<article role=\"article\">\n\n  <header>\n    <h1 class=\"entry-title\">Nghttp2: HTTP/2 C Library</h1>\n    <p class=\"meta\">\n\n<time class='entry-date' datetime='2015-02-16T23:16:00+09:00'><span class='date'><span class='date-month'>Feb</span> <span class='date-day'>16</span><span class='date-suffix'>th</span>, <span class='date-year'>2015</span></span> <span class='time'>11:16 pm</span></time></p>\n  </header>\n\n  <p>nghttp2 is an implementation of HTTP/2 in C.\n<a href=\"https://www.ietf.org/blog/2015/02/http2-approved/\">HTTP/2 and HPACK has been approved by IETF</a>,\nwe are now waiting for their publication as RFCs.</p>\n\n<p>The framing layer of HTTP/2 is implemented as a form of reusable C\nlibrary.  On top of that, we have implemented HTTP/2 <a href=\"/documentation/nghttp.1.html\">client</a>, <a href=\"/documentation/nghttpd.1.html\">server</a>\nand <a href=\"/documentation/nghttpx.1.html\">proxy</a>.\nWe have also developed <a href=\"/documentation/h2load.1.html\">load test and benchmarking tool</a> for HTTP/2 and SPDY.</p>\n\n<p>We have participated in httpbis working group since HTTP/2 draft-04,\nwhich is the first implementation draft.  Since then we have updated\nnghttp2 library constantly to latest specification and nghttp2 is now\none of the most mature <a href=\"https://github.com/http2/http2-spec/wiki/Implementations\">HTTP/2 implementations</a>.</p>\n\n<p>All C APIs are <a href=\"/documentation/apiref.html\">fully documented</a>.</p>\n\n<p>HTTP/2 utilizes header compression method called <a href=\"http://http2.github.io/http2-spec/compression.html\">HPACK</a>.  We offer\nHPACK encoder and decoder are available as <a href=\"/documentation/tutorial-hpack.html\">public API</a>.</p>\n\n<p>nghttp2 library itself is a bit low-level.  The experimental <a href=\"/documentation/libnghttp2_asio.html\">high level C++ API</a> is also available.</p>\n\n<p>We have <a href=\"/documentation/python-apiref.html\">Python binding</a> of this libary, but we have not covered\neverything yet.</p>\n\n     <footer>\n      <p class=\"meta\">\n\n<time class='entry-date' datetime='2015-02-16T23:16:00+09:00'><span class='date'><span class='date-month'>Feb</span> <span class='date-day'>16</span><span class='date-suffix'>th</span>, <span class='date-year'>2015</span></span> <span class='time'>11:16 pm</span></time>\n\n      </p>\n\n        <div class=\"sharing\">\n\n  <a href=\"//twitter.com/share\" class=\"twitter-share-button\" data-url=\"//nghttp2.org/index.html\" data-via=\"\" data-counturl=\"//nghttp2.org/index.html\" >Tweet</a>\n\n\n\n</div>\n\n\n    </footer>\n\n</article>\n\n</div>\n\n<aside class=\"sidebar\">\n\n    <section>\n  <h1>Recent Posts</h1>\n  <ul id=\"recent_posts\">\n\n      <li class=\"post\">\n        <a href=\"/blog/2015/03/14/nghttp2-v0-7-7/\">Nghttp2 v0.7.7</a>\n      </li>\n\n      <li class=\"post\">\n        <a href=\"/blog/2015/03/14/nghttp2-v0-7-6/\">Nghttp2 v0.7.6</a>\n      </li>\n\n      <li class=\"post\">\n        <a href=\"/blog/2015/02/27/nghttp2-v0-7-5/\">Nghttp2 v0.7.5</a>\n      </li>\n\n      <li class=\"post\">\n        <a href=\"/blog/2015/02/15/nghttp2-v0-7-4/\">Nghttp2 v0.7.4</a>\n      </li>\n\n      <li class=\"post\">\n        <a href=\"/blog/2015/02/10/nghttp2-dot-org-enabled-http2-server-push/\">nghttp2.org Enabled HTTP/2 Server Push</a>\n      </li>\n\n  </ul>\n</section>\n\n</aside>\n    </div>\n  </div>\n  <footer role=\"contentinfo\"><p>\n  Copyright &copy; 2015 - Tatsuhiro Tsujikawa -\n  <span class=\"credit\">Powered by <a href=\"http://octopress.org\">Octopress</a></span>\n</p>\n\n</footer>\n\n  <script type=\"text/javascript\">\n    (function(){\n      var twitterWidgets = document.createElement('script');\n      twitterWidgets.type = 'text/javascript';\n      twitterWidgets.async = true;\n      twitterWidgets.src = '//platform.twitter.com/widgets.js';\n      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);\n    })();\n  </script>\n\n</body>\n</html>\n\n#\u6982\u8981\n\nC++\u306emain\u95a2\u6570\u306b\u5168\u3066\u30d9\u30bf\u66f8\u304d\u3067\u66f8\u3044\u3066HTTP2\u306e\u901a\u4fe1\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u6700\u901f\u5b9f\u88c5\u306a\u306e\u3067\u6700\u4f4e\u9650\u306e\u901a\u4fe1\u306b\u9650\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nMac\u3068Windows\u4e21\u65b9\u3067\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002\n\n\u63a5\u7d9a\u5148\u306f\u300cnghttp2.org\u300d\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\u5909\u66f4\u3057\u305f\u3044\u4eba\u306fhost\u306e\u90e8\u5206\u3092\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002(\u305d\u306e\u5834\u5408\u306fHEADERS_FRAME\u3082\u66f8\u304d\u63db\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059)\n\n\u4eca\u56de\u306f\u5e73\u6587\u3067\u6d41\u308c\u308b\u901a\u4fe1\u3067\u3059\u3002\nSSL\u7248\u306f[\u3053\u3061\u3089](http://qiita.com/0xfffffff7/items/0e19d255abb84372bb9a)\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001main\u95a2\u6570\u3060\u3051\u3068\u3044\u3044\u3064\u3064\u3082\u30013\u3064\u3060\u3051\u5197\u9577\u306a\u51e6\u7406\u3092\u95a2\u6570\u5316\u3057\u3066\u307e\u3059\u3002\u6570\u884c\u7a0b\u5ea6\u306e\u5b9a\u578b\u51e6\u7406\u3067\u3059\u3002\n\n\u53c2\u8003\u306b\u3057\u305f\u306e\u306f\u3053\u3061\u3089\u306e\u8cc7\u6599\u3067\u3059\u3002\nhttps://speakerdeck.com/syucream/2-zui-su-shi-zhuang-v3\n\n\n#\u4f9d\u5b58\nwindows\u306e\u5834\u5408\u306f\u4e0b\u8a18\u306e\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u3000Ws2_32.lib\n\n\n#\u76ee\u7684\n\nHTTP2\u306e\u6700\u521d\u306e\u30cf\u30fc\u30c9\u30eb\u3092\u8d85\u3048\u308b\u305f\u3081\u306e\u52c9\u5f37\u3002\nmain\u95a2\u6570\u306b\u5168\u3066\u66f8\u304f\u4e8b\u306b\u3088\u3063\u3066\u51e6\u7406\u306e\u6d41\u308c\u3092\u660e\u78ba\u306b\u3059\u308b\u3002\n\u30d0\u30a4\u30ca\u30ea\u3082\u305d\u306e\u307e\u307e\u30bd\u30fc\u30b9\u306b\u6253\u3061\u8fbc\u3080\u3053\u3068\u306b\u3088\u3063\u3066\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\n#\u5b9f\u88c5\n\n[https://github.com/0xfffffff7/HelloHttp2]\n\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string>\n\n#ifdef WIN32\n#include <winsock2.h>\n#include <windows.h>\n#pragma warning(disable:4996)\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <netdb.h>\n#include <fcntl.h>\n#include <signal.h>\n#include <unistd.h>\n#define SOCKET int\n#define SD_BOTH SHUT_WR\n#endif\n\n\n#define READ_BUF_SIZE 4096\n#define BUF_SIZE 4097\n#define PORT 80\n#define BINARY_FRAME_LENGTH 9\n\n\n// 3\u30d0\u30a4\u30c8\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30aa\u30fc\u30c0\u30fc\u30924\u30d0\u30a4\u30c8\u6574\u6570\u3078\u5909\u63db\u3059\u308b\u95a2\u6570.\nchar* to_framedata3byte(char *p, int &n);\n\nint get_error();\n\nvoid close_socket(SOCKET socket);\n\nint main(int argc, char **argv)\n{\n    \n    \n    //------------------------------------------------------------\n    // \u63a5\u7d9a\u5148\u30db\u30b9\u30c8\u540d.\n    // HTTP2\u306b\u5bfe\u5fdc\u3057\u305f\u30db\u30b9\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059.\n    //------------------------------------------------------------\n    std::string host = \"nghttp2.org\";\n    \n    \n    \n    \n    //------------------------------------------------------------\n    // TCP\u306e\u6e96\u5099.\n    //------------------------------------------------------------\n#ifdef WIN32\n    WSADATA\twsaData;\n    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n        return 0;\n    }\n#endif\n    \n    int error = 0;\n    struct hostent *hp;\n    struct sockaddr_in addr;\n    SOCKET _socket;\n    \n    if (!(hp = gethostbyname(host.c_str()))){\n        return -1;\n    }\n    memset(&addr, 0, sizeof(addr));\n    addr.sin_addr = *(struct in_addr*)hp->h_addr_list[0];\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(PORT);\n    \n    if ((_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))<0){\n        return -1;\n    }\n    if (connect(_socket, (struct sockaddr *)&addr, sizeof(addr))<0){\n        return -1;\n    }\n    \n    \n    \n    //------------------------------------------------------------\n    // HTTP2\u306e\u6e96\u5099.\n    // SSL\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u4e0b\u8a18\u306e24\u30aa\u30af\u30c6\u30c3\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u3067\u3001\n    // \u3053\u308c\u304b\u3089HTTP2\u901a\u4fe1\u3092\u59cb\u3081\u308b\u3053\u3068\u3092\u4f1d\u3048\u308b.\n    //------------------------------------------------------------\n    std::string pri = \"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\";\n    int r = (int)::send(_socket, pri.c_str(), pri.length(), NULL);\n    \n\n    //------------------------------------------------------------\n    // \u5168\u3066\u306e\u30c7\u30fc\u30bf\u306f\u30d0\u30a4\u30ca\u30ea\u30d5\u30ec\u30fc\u30e0\u3067\u9001\u53d7\u4fe1\u3055\u308c\u308b\n    // \u30d0\u30a4\u30ca\u30ea\u30d5\u30ec\u30fc\u30e0\u306f\u5171\u901a\u306e9\u30d0\u30a4\u30c8\u30d8\u30c3\u30c0\u3068\u3001\u30c7\u30fc\u30bf\u672c\u4f53\u3067\u3042\u308bpayload\u3092\u6301\u3064\n    //\n    // \u25cf\u30d8\u30c3\u30c0\u90e8\u5206\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n    //\n    //   1-3\u30d0\u30a4\u30c8\u76ee  payload\u306e\u9577\u3055\u3002\u9577\u3055\u306b\u30d8\u30c3\u30c0\u306e9\u30d0\u30a4\u30c8\u306f\u542b\u307e\u308c\u306a\u3044\u3002.\n    //   4\u30d0\u30a4\u30c8\u76ee\u3000\u30d5\u30ec\u30fc\u30e0\u306e\u30bf\u30a4\u30d7.\n    //   5\u30d0\u30a4\u30c8\u76ee\u3000\u30d5\u30e9\u30b0.\n    //   6-9\u30d0\u30a4\u30c8\u76ee\u3000\u30b9\u30c8\u30ea\u30fc\u30e0ID.(\u6700\u521d\u306e1bit\u306f\u4e88\u7d04\u3067\u5fc5\u305a0)\n    //\n    //  |Length(24bit)|Type(8bit)|Flags(8bit)|Reserve(1bit)|Stream Identifier(31bit)|\n    //  |Frame Payload(Length\u30d0\u30a4\u30c8\u5206)|\n    //\n    //\n    // [\u30d5\u30ec\u30fc\u30e0\u306e\u30bf\u30a4\u30d7]\n    //\n    // DATA(0x00)  \u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3084\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u3092\u8ee2\u9001\u3059\u308b\n    // HEADERS(0x01)  \u5727\u7e2e\u6e08\u307f\u306eHTTP\u30d8\u30c3\u30c0\u30fc\u3092\u8ee2\u9001\u3059\u308b\n    // PRIORITY(0x02)  \u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u512a\u5148\u5ea6\u3092\u5909\u66f4\u3059\u308b\n    // RST_STREAM(0x03)  \u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d42\u4e86\u3092\u901a\u77e5\u3059\u308b\n    // SETTINGS(0x04)  \u63a5\u7d9a\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\n    // PUSH_PROMISE(0x05)  \u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u30d7\u30c3\u30b7\u30e5\u3092\u901a\u77e5\u3059\u308b\n    // PING(0x06)  \u63a5\u7d9a\u72b6\u6cc1\u3092\u78ba\u8a8d\u3059\u308b\n    // GOAWAY(0x07)  \u63a5\u7d9a\u306e\u7d42\u4e86\u3092\u901a\u77e5\u3059\u308b\n    // WINDOW_UPDATE(0x08)   \u30d5\u30ed\u30fc\u5236\u5fa1\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u66f4\u65b0\u3059\u308b\n    // CONTINUATION(0x09)  HEADERS\u30d5\u30ec\u30fc\u30e0\u3084PUSH_PROMISE\u30d5\u30ec\u30fc\u30e0\u306e\u7d9a\u304d\u306e\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3059\u308b\n    //\n    // \u305d\u308c\u305e\u308c\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3084\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u306f\u30b9\u30c8\u30ea\u30fc\u30e0ID\u304c\u4ed8\u4e0e\u3055\u308c\u308b.\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u767a\u884c\u3055\u308c\u308b\u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f\u5947\u6570.\n    // \u30b5\u30fc\u30d0\u30fc\u304b\u3089\u767a\u884c\u3055\u308c\u308b\u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f\u5076\u6570.\n    // \u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u306f\u512a\u5148\u9806\u4f4d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059.\n    // \u4eca\u56de\u306f\u30b9\u30c8\u30ea\u30fc\u30e0ID\u300c1\u300d\u3060\u3051\u3092\u4f7f\u7528\u3057\u307e\u3059.\n    //------------------------------------------------------------\n\n    //------------------------------------------------------------\n    // HTTP2\u901a\u4fe1\u306e\u30d5\u30ed\u30fc\n    //\n    // \u307e\u305a\u6700\u521d\u306bSetting\u30d5\u30ec\u30fc\u30e0\u3092\u5fc5\u305a\u4ea4\u63db\u3057\u307e\u3059.\n    // Setting\u30d5\u30ec\u30fc\u30e0\u3092\u4ea4\u63db\u3057\u305f\u3089\u3001\u8a2d\u5b9a\u3092\u9069\u7528\u3057\u305f\u3053\u3068\u3092\u4f1d\u3048\u308b\u305f\u3081\u306b\u5fc5\u305aACK\u3092\u9001\u308a\u307e\u3059.\n    //\n    // Client -> Server  SettingFrame\n    // Client <- Server  SettingFrame\n    // Client -> Server  ACK\n    // Client <- Server  ACK\n    //\n    // Client -> Server  HEADERS_FRAME (GET\u306a\u3069)\n    // Client <- Server  HEADERS_FRAME (\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306a\u3069)\n    // Client <- Server  DATA_FRAME (Body)\n    // \n    // Client -> Server  GOAWAY_FRAME (\u9001\u4fe1\u7d42\u4e86)\n    //------------------------------------------------------------\n    \n    //------------------------------------------------------------\n    // Setting\u30d5\u30ec\u30fc\u30e0\u306e\u9001\u4fe1.\n    // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u306f\u300c0x04\u300d\n    // \u5168\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u63a1\u7528\u3059\u308b\u305f\u3081payload\u306f\u7a7a\u3067\u3059\u3002\n    // Setting\u30d5\u30ec\u30fc\u30e0\u306e\u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f0\u3067\u3059.(\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u5168\u4f53\u306b\u9069\u7528\u3055\u308c\u308b\u305f\u3081)\n    //\n    // \u4eca\u56de\u306f\u7a7a\u3067\u3059\u304cSetting\u30d5\u30ec\u30fc\u30e0\u306epayload\u306f\u6b21\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3059.\n    //\n    // |Identifer(16bit)|Value(32bit)|\n    // \u4e0a\u8a18\u3092\u8a2d\u5b9a\u5024\u306e\u6570\u3060\u3051\u9023\u7d50\u3055\u305b\u3001\u6700\u7d42\u7684\u306a\u9577\u3055\u3092\u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\u306eLength\u306b\u8a18\u8ff0\u3057\u307e\u3059.\n    //\n    // Identifer\u306f\u6b21\u306e\u3082\u306e\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n    // SETTINGS_HEADER_TABLE_SIZE (0x1)  \u521d\u671f\u5024\u306f 4,096 \u30aa\u30af\u30c6\u30c3\u30c8\n    // SETTINGS_ENABLE_PUSH (0x2)  \u521d\u671f\u5024\u306f1\n    // SETTINGS_MAX_CONCURRENT_STREAMS (0x3)  \u521d\u671f\u72b6\u614b\u3067\u306f\u7121\u5236\u9650\n    // SETTINGS_INITIAL_WINDOW_SIZE (0x4)   \u521d\u671f\u5024\u306f 2^16-1 (65,535)\n    // SETTINGS_MAX_FRAME_SIZE (0x5)    \u521d\u671f\u5024\u306f 2^24-1 (16777215)\n    // SETTINGS_MAX_HEADER_LIST_SIZE (0x6)   \u521d\u671f\u5024\u306f\u7121\u5236\u9650\n    //------------------------------------------------------------\n    const char settingframe[BINARY_FRAME_LENGTH] = { 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 };\n    \n    r = (int)::send(_socket, settingframe, BINARY_FRAME_LENGTH, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n    \n    \n    //------------------------------------------------------------\n    // Setting\u30d5\u30ec\u30fc\u30e0\u306e\u53d7\u4fe1.\n    //------------------------------------------------------------\n    char buf[BUF_SIZE] = { 0 };\n    char* p = buf;\n    \n    r = (int)::recv(_socket, p, READ_BUF_SIZE, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n    \n    \n    \n    //------------------------------------------------------------\n    // ACK\u306e\u9001\u4fe1.\n    // ACK\u306fSetting\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u3063\u305f\u5074\u304c\u9001\u308b\u5fc5\u8981\u304c\u3042\u308b.\n    // ACK\u306fSetting\u30d5\u30ec\u30fc\u30e0\u306e\u30d5\u30e9\u30b0\u306b0x01\u3092\u7acb\u3066\u3066payload\u3092\u7a7a\u306b\u3057\u305f\u3082\u306e.\n    //\n    // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u306f\u300c0x04\u300d\n    // 5\u30d0\u30a4\u30c8\u76ee\u306b\u30d5\u30e9\u30b00x01\u3092\u7acb\u3066\u307e\u3059\u3002\n    //------------------------------------------------------------\n    const char settingframeAck[BINARY_FRAME_LENGTH] = { 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00 };\n    \n    r = (int)::send(_socket, settingframeAck, BINARY_FRAME_LENGTH, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n    \n    \n    // \u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306eACK\u306e\u53d7\u4fe1\u306f\u4e0b\u3067\u3084\u308a\u307e\u3059..\n\n    //------------------------------------------------------------\n    // HEADERS\u30d5\u30ec\u30fc\u30e0\u306e\u9001\u4fe1.\n    //\n    // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u306f\u300c0x01\u300d\n    // \u3053\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u5fc5\u8981\u306a\u30d8\u30c3\u30c0\u304c\u3059\u3079\u3066\u542b\u307e\u308c\u3066\u3044\u3066\u3053\u308c\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u7d42\u308f\u3089\u305b\u308b\u3053\u3068\u3092\u793a\u3059\u305f\u3081\u306b\u3001\n    // END_STREAM(0x1)\u3068END_HEADERS(0x4)\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n    // \u5177\u4f53\u7684\u306b\u306f5\u30d0\u30a4\u30c8\u76ee\u306e\u30d5\u30e9\u30b0\u306b\u300c0x05\u300d\u3092\u7acb\u3066\u307e\u3059\u3002\n    // \u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f\u300c0x01\u300d\u3092\u4f7f\u3044\u307e\u3059.\n    //\n    // \u3053\u3053\u307e\u3067\u3067\u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\u306f\u300c\u30da\u30a4\u30ed\u30fc\u30c9\u306e\u9577\u3055(3\u30d0\u30a4\u30c8), 0x01, 0x05, 0x00, 0x00, 0x00, 0x01\u300d\u306b\u306a\u308a\u307e\u3059.\n    //\n    //\n    // \u25cfHTTP1.1\u3067\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\n    // \u3000\u3000\"GET / HTTP1/1\"\n    // \u3000\u3000\"Host: nghttp2.org\n    //\n    // \u25cfHTTP2\u3067\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\n    //      :method GET\n    //      :path /\n    //      :scheme http\n    //      :authority nghttp2.org\n    //\n    // \u672c\u6765HTTP2\u306fHPACK\u3068\u3044\u3046\u65b9\u6cd5\u3067\u5727\u7e2e\u3057\u307e\u3059.\n    // \u4eca\u56de\u306f\u4e0a\u8a18\u306eHTTP2\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u3092\u5727\u7e2e\u306a\u3057\u3067\u8a18\u8ff0\u3057\u307e\u3059.\n    //\n    // \u4e00\u3064\u306e\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8a18\u8ff0\u4f8b\n    //\n    // |0|0|0|0|      0|   // \u6700\u521d\u306e4\u30d3\u30c3\u30c8\u306f\u5727\u7e2e\u306b\u95a2\u3059\u308b\u60c5\u5831\u3001\u6b21\u306e4\u30d3\u30c3\u30c8\u306f\u30d8\u30c3\u30c0\u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30af\u30b9.(\u4eca\u56de\u306f\u5727\u7e2e\u3057\u306a\u3044\u306e\u3067\u3059\u3079\u30660)\n    // |0|            7|   // \u6700\u521d\u306e1bit\u306f\u5727\u7e2e\u306b\u95a2\u3059\u308b\u60c5\u5831(\u4eca\u56de\u306f0)\u3001\u6b21\u306e7bit\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u9577\u3055\n    // |:method|           // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u305d\u306e\u307e\u307eASCII\u306e\u30aa\u30af\u30c6\u30c3\u30c8\u3067\u66f8\u304f\u3002\n    // |0|            3|   // \u6700\u521d\u306e1bit\u306f\u5727\u7e2e\u306b\u95a2\u3059\u308b\u60c5\u5831(\u4eca\u56de\u306f0)\u3001\u6b21\u306e7bit\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u9577\u3055\n    // |GET|               // \u5024\u3092\u305d\u306e\u307e\u307eASCII\u306e\u30aa\u30af\u30c6\u30c3\u30c8\u3067\u66f8\u304f\u3002\n    //\n    // \u4e0a\u8a18\u304c\u4e00\u3064\u306e\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8a18\u8ff0\u4f8b\u3067\u3001\u30d8\u30c3\u30c0\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u6570\u3060\u3051\u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059.\n    //\n    //------------------------------------------------------------\n    const char headersframe[69] = { \n    0x00, 0x00, 0x3c, 0x01, 0x04, 0x00, 0x00, 0x00, 0x01,  // \u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\n    0x00,                                                  // \u5727\u7e2e\u60c5\u5831\n    0x07, 0x3a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,        // 7 :method\n    0x03, 0x47, 0x45, 0x54,                                // 3 GET\n    0x00,                                                  // \u5727\u7e2e\u60c5\u5831\n    0x05, 0x3a, 0x70, 0x61, 0x74, 0x68,                    // 5 :path\n    0x01, 0x2f,                                            // 1 /\n    0x00,                                                  // \u5727\u7e2e\u60c5\u5831\n    0x07, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,        // 7 :scheme\n    0x04, 0x68, 0x74, 0x74, 0x70,                          // 4 http\n    0x00,                                                  // \u5727\u7e2e\u60c5\u5831\n    0x0a, 0x3a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,      // 10 :authority\n    0x0b, 0x6e, 0x67, 0x68, 0x74, 0x74, 0x70, 0x32, 0x2e, 0x6f, 0x72, 0x67   // 11 nghttp2.org\n    };\n    \n    r = (int)::send(_socket, headersframe, 69, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n    \n    \n    //------------------------------------------------------------\n    // HEADERS\u30d5\u30ec\u30fc\u30e0\u306e\u53d7\u4fe1.\n    //------------------------------------------------------------\n    int payload_length = 0;\n    int frame_type = 0;\n    \n    // \u307e\u305a\u306f\u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u3066payload\u306elength\u3092\u53d6\u5f97\u3059\u308b\u3002\n    while (1){\n        \n        memset(buf, 0x00, BINARY_FRAME_LENGTH);\n        p = buf;\n        \n        r = (int)::recv(_socket, p, BINARY_FRAME_LENGTH, NULL);\n        if (r == -1){\n            error = get_error();\n            ::shutdown(_socket, SD_BOTH);\n            close_socket(_socket);\n            return 0;\n        }\n        \n        // ACK\u304c\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067ACK\u306a\u3089\u7121\u8996\u3057\u3066\u6b21\u3092\u8aad\u3080\u3002\n        if (memcmp(buf, settingframeAck, BINARY_FRAME_LENGTH) == 0){\n            continue;\n        }\n        else{\n            \n            // payload\u306e\u9577\u3055\u3092\u53d6\u5f97\u3059\u308b\u3002\n            p = to_framedata3byte(p, payload_length);\n            \n            // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u304cHEADERS_FRAME\u3067\u306f\u306a\u304b\u3063\u305f\u3089\u8aad\u307f\u98db\u3070\u3059\u3002\n            memcpy(&frame_type, p, 1);\n            if (frame_type != 1){\n                \n                r = (int)::recv(_socket, p, payload_length, NULL);\n                if (r == -1){\n                    error = get_error();\n                    ::shutdown(_socket, SD_BOTH);\n                    close_socket(_socket);\n                    return 0;\n                }\n                \n                continue;\n            }\n            break;\n        }\n    }\n    \n    // \u6b21\u306bHEADERS\u30d5\u30ec\u30fc\u30e0\u306epayload\u3092\u53d7\u4fe1\u3059\u308b\u3002\n    memset(buf, 0x00, payload_length);\n    p = buf;\n    r = (int)::recv(_socket, p, payload_length, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n    \n    \n    //------------------------------------------------------------\n    // DATA\u30d5\u30ec\u30fc\u30e0\u306e\u53d7\u4fe1.\n    //------------------------------------------------------------\n    \n    // \u307e\u305a\u306f\u30d8\u30c3\u30c0\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u3066payload\u306elength\u3092\u53d6\u5f97\u3059\u308b\u3002\n    memset(buf, 0x00, BINARY_FRAME_LENGTH);\n    p = buf;\n    r = (int)::recv(_socket, p, BINARY_FRAME_LENGTH, NULL);\n    to_framedata3byte(p, payload_length);\n    \n    // \u6b21\u306bpayload\u3092\u53d7\u4fe1\u3059\u308b\u3002\n    while (payload_length > 0){\n        \n        memset(buf, 0x00, BUF_SIZE);\n        p = buf;\n        \n        r = (int)::recv(_socket, p, READ_BUF_SIZE, NULL);\n        if (r == -1){\n            error = get_error();\n            ::shutdown(_socket, SD_BOTH);\n            close_socket(_socket);\n            return 0;\n        }\n        payload_length -= r;\n        \n        printf(\"%s\", p);\n    }\n    \n    \n    //------------------------------------------------------------\n    // GOAWAY\u306e\u9001\u4fe1.\n    //\n    // \u3053\u308c\u4ee5\u4e0a\u30c7\u30fc\u30bf\u3092\u9001\u53d7\u4fe1\u3057\u306a\u3044\u5834\u5408\u306fGOAWAY\u30d5\u30ec\u30fc\u30e0\u3092\u9001\u4fe1\u3057\u307e\u3059.\n    // \u30d5\u30ec\u30fc\u30e0\u30bf\u30a4\u30d7\u306f\u300c0x07\u300d\n    // \u30b9\u30c8\u30ea\u30fc\u30e0ID\u306f\u300c0x00\u300d(\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u5168\u4f53\u306b\u9069\u7528\u3059\u308b\u305f\u3081)\n    //------------------------------------------------------------\n    const char goawayframe[17] = { 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00 };\n    \n    r = (int)::send(_socket, goawayframe, 17, NULL);\n    if (r == -1){\n        error = get_error();\n        ::shutdown(_socket, SD_BOTH);\n        close_socket(_socket);\n        return 0;\n    }\n    \n    \n\n    //------------------------------------------------------------\n    // \u5f8c\u59cb\u672b.\n    //------------------------------------------------------------\n    ::shutdown(_socket, SD_BOTH);\n    close_socket(_socket);\n    \n    return 0;\n    \n}\n\nvoid close_socket(SOCKET socket){\n#ifdef WIN32\n    ::closesocket(socket);\n    WSACleanup();\n#else\n    ::close(socket);\n#endif\n}\n\nint get_error(){\n#ifdef WIN32\n    return WSAGetLastError();\n#endif\n    return errno;\n}\n\nchar* to_framedata3byte(char *p, int &n){\n    u_char buf[4] = { 0 };\n    memcpy(&(buf[1]), p, 3);\n    memcpy(&n, buf, 4);\n    n = ntohl(n);\n    p += 3;\n    return p;\n}\n```\n\n\u3000\u3000\n\n#\u7d50\u679c\n\n\u901a\u4fe1\u306b\u554f\u984c\u306a\u3051\u308c\u3070\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u6b21\u306e\u3088\u3046\u306ahtml\u304c\u8868\u793a\u3055\u308c\u308b\u3067\u3057\u3087\u3046\u3002\n\n```html\n<!DOCTYPE html>\n<!--[if IEMobile 7 ]><html class=\"no-js iem7\"><![endif]-->\n<!--[if lt IE 9]><html class=\"no-js lte-ie8\"><![endif]-->\n<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class=\"no-js\" lang=\"en\"><!--<![endif]-->\n<head>\n  <meta charset=\"utf-8\">\n  <title>Nghttp2: HTTP/2 C Library - nghttp2.org</title>\n  <meta name=\"author\" content=\"Tatsuhiro Tsujikawa\">\n\n  \n  <meta name=\"description\" content=\"Nghttp2: HTTP/2 C Library Feb 16th, 2015 11:16 pm nghttp2 is an implementation of HTTP/2 in C.\nHTTP/2 and HPACK has been approved by IETF,\nwe are &hellip;\">\n  \n\n  <!-- http://t.co/dKP3o1e -->\n  <meta name=\"HandheldFriendly\" content=\"True\">\n  <meta name=\"MobileOptimized\" content=\"320\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n  \n  <link rel=\"canonical\" href=\"//nghttp2.org\">\n  <link href=\"/favicon.png\" rel=\"icon\">\n  <link href=\"/stylesheets/screen.css\" media=\"screen, projection\" rel=\"stylesheet\" type=\"text/css\">\n  <link href=\"/atom.xml\" rel=\"alternate\" title=\"nghttp2.org\" type=\"application/atom+xml\">\n  <script src=\"/javascripts/modernizr-2.0.js\"></script>\n  <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n  <script>!window.jQuery && document.write(unescape('%3Cscript src=\"./javascripts/libs/jquery.min.js\"%3E%3C/script%3E'))</script>\n  <script src=\"/javascripts/octopress.js\" type=\"text/javascript\"></script>\n  <!--Fonts from Google\"s Web font directory at http://google.com/webfonts -->\n<link href=\"//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n\n  </head>\n\n<body   >\n  <header role=\"banner\"><hgroup>\n  <h1><a href=\"/\">nghttp2.org</a></h1>\n  \n    <h2>HTTP/2 C library and tools</h2>\n  \n</hgroup>\n\n</header>\n  <nav role=\"navigation\"><ul class=\"subscription\" data-subscription=\"rss\">\n  <li><a href=\"/atom.xml\" rel=\"subscribe-rss\" title=\"subscribe via RSS\">RSS</a></li>\n  \n</ul>\n  \n<form action=\"https://www.google.com/search\" method=\"get\">\n  <fieldset role=\"search\">\n    <input type=\"hidden\" name=\"q\" value=\"site://nghttp2.org\" />\n    <input class=\"search\" type=\"text\" name=\"q\" results=\"0\" placeholder=\"Search\"/>\n  </fieldset>\n</form>\n  \n<ul class=\"main-navigation\">\n  <li><a href=\"/\">Top</a></li>\n  <li><a href=\"/blog/\">Blog</a></li>\n  <li><a href=\"/blog/archives\">Archives</a></li>\n  <li><a href=\"/documentation/\">Documentation</a></li>\n  <li><a href=\"/httpbin\">Httpbin</a></li>\n  <li><a href=\"https://github.com/tatsuhiro-t/nghttp2/releases\">Releases</a></li>\n  <li><a href=\"https://github.com/tatsuhiro-t/nghttp2\">Source Code</a></li>\n</ul>\n\n</nav>\n  <div id=\"main\">\n    <div id=\"content\">\n      <div>\n<article role=\"article\">\n  \n  <header>\n    <h1 class=\"entry-title\">Nghttp2: HTTP/2 C Library</h1>\n    <p class=\"meta\">\n\n<time class='entry-date' datetime='2015-02-16T23:16:00+09:00'><span class='date'><span class='date-month'>Feb</span> <span class='date-day'>16</span><span class='date-suffix'>th</span>, <span class='date-year'>2015</span></span> <span class='time'>11:16 pm</span></time></p>\n  </header>\n  \n  <p>nghttp2 is an implementation of HTTP/2 in C.\n<a href=\"https://www.ietf.org/blog/2015/02/http2-approved/\">HTTP/2 and HPACK has been approved by IETF</a>,\nwe are now waiting for their publication as RFCs.</p>\n\n<p>The framing layer of HTTP/2 is implemented as a form of reusable C\nlibrary.  On top of that, we have implemented HTTP/2 <a href=\"/documentation/nghttp.1.html\">client</a>, <a href=\"/documentation/nghttpd.1.html\">server</a>\nand <a href=\"/documentation/nghttpx.1.html\">proxy</a>.\nWe have also developed <a href=\"/documentation/h2load.1.html\">load test and benchmarking tool</a> for HTTP/2 and SPDY.</p>\n\n<p>We have participated in httpbis working group since HTTP/2 draft-04,\nwhich is the first implementation draft.  Since then we have updated\nnghttp2 library constantly to latest specification and nghttp2 is now\none of the most mature <a href=\"https://github.com/http2/http2-spec/wiki/Implementations\">HTTP/2 implementations</a>.</p>\n\n<p>All C APIs are <a href=\"/documentation/apiref.html\">fully documented</a>.</p>\n\n<p>HTTP/2 utilizes header compression method called <a href=\"http://http2.github.io/http2-spec/compression.html\">HPACK</a>.  We offer\nHPACK encoder and decoder are available as <a href=\"/documentation/tutorial-hpack.html\">public API</a>.</p>\n\n<p>nghttp2 library itself is a bit low-level.  The experimental <a href=\"/documentation/libnghttp2_asio.html\">high level C++ API</a> is also available.</p>\n\n<p>We have <a href=\"/documentation/python-apiref.html\">Python binding</a> of this libary, but we have not covered\neverything yet.</p>\n\n     <footer>\n      <p class=\"meta\">\n        \n<time class='entry-date' datetime='2015-02-16T23:16:00+09:00'><span class='date'><span class='date-month'>Feb</span> <span class='date-day'>16</span><span class='date-suffix'>th</span>, <span class='date-year'>2015</span></span> <span class='time'>11:16 pm</span></time>\n        \n      </p>\n      \n        <div class=\"sharing\">\n  \n  <a href=\"//twitter.com/share\" class=\"twitter-share-button\" data-url=\"//nghttp2.org/index.html\" data-via=\"\" data-counturl=\"//nghttp2.org/index.html\" >Tweet</a>\n  \n  \n  \n</div>\n\n      \n    </footer>\n  \n</article>\n\n</div>\n\n<aside class=\"sidebar\">\n  \n    <section>\n  <h1>Recent Posts</h1>\n  <ul id=\"recent_posts\">\n    \n      <li class=\"post\">\n        <a href=\"/blog/2015/03/14/nghttp2-v0-7-7/\">Nghttp2 v0.7.7</a>\n      </li>\n    \n      <li class=\"post\">\n        <a href=\"/blog/2015/03/14/nghttp2-v0-7-6/\">Nghttp2 v0.7.6</a>\n      </li>\n    \n      <li class=\"post\">\n        <a href=\"/blog/2015/02/27/nghttp2-v0-7-5/\">Nghttp2 v0.7.5</a>\n      </li>\n    \n      <li class=\"post\">\n        <a href=\"/blog/2015/02/15/nghttp2-v0-7-4/\">Nghttp2 v0.7.4</a>\n      </li>\n    \n      <li class=\"post\">\n        <a href=\"/blog/2015/02/10/nghttp2-dot-org-enabled-http2-server-push/\">nghttp2.org Enabled HTTP/2 Server Push</a>\n      </li>\n    \n  </ul>\n</section>\n\n</aside>\n    </div>\n  </div>\n  <footer role=\"contentinfo\"><p>\n  Copyright &copy; 2015 - Tatsuhiro Tsujikawa -\n  <span class=\"credit\">Powered by <a href=\"http://octopress.org\">Octopress</a></span>\n</p>\n\n</footer>\n  \n  <script type=\"text/javascript\">\n    (function(){\n      var twitterWidgets = document.createElement('script');\n      twitterWidgets.type = 'text/javascript';\n      twitterWidgets.async = true;\n      twitterWidgets.src = '//platform.twitter.com/widgets.js';\n      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);\n    })();\n  </script>\n\n</body>\n</html>\n```\n", "tags": ["http2", "C++", "C"]}