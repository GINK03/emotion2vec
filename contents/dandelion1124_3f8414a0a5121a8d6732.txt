{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u66f8\u3044\u305fUMat\u306e\u5185\u90e8\u51e6\u7406\u306e\u7d9a\u7de8\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u3053\u3053\u3067\u306fOpenCV\u306eUMat\u5185\u90e8\u3067\u3069\u306e\u3088\u3046\u306bOpenCL\u306e\u51e6\u7406\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u306b\u3064\u3044\u3066\u3082\u3046\u5c11\u3057\u8a73\u7d30\u306b\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\u5bfe\u8c61\u8aad\u8005\n\u672c\u8a18\u4e8b\u306e\u5bfe\u8c61\u8aad\u8005\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\nUMat\u306e\u5185\u90e8\u51e6\u7406\u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u65b9or\nUMat\u306eOpenCL\u5b9f\u88c5\u3092\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3044\u308b\u65b9\n\n\nUMat(OpenCL)\u306e\u51e6\u7406\u306e\u6d41\u308c\n\u3053\u3053\u3067\u306fcv::threshold\u3092\u4f8b\u306b\u6319\u3052\u3066UMat\u306e\u5185\u90e8\u51e6\u7406(OpenCL)\u3092\u8aac\u660e\u3057\u307e\u3059\uff0e\ncv::threshold\u306e\u5165\u529b\u304cUMat\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6d41\u308c\u3067\u51e6\u7406\u304c\u884c\u308f\u308c\u307e\u3059\uff0e\ncv::threshold\n\u2192ocl_threshold\n \u2192OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n \u2192OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u6307\u5b9a\n \u2192OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\n\n\u3068\u3044\u3046\u3053\u3068\u3067OpenCL\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u306a\u3089\u304a\u306a\u3058\u307f\u306e\u4ee5\u4e0b\u306e\u51e6\u7406\u304cUMat(OpenCL)\u306e\u4e2d\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\nOpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\nOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u6307\u5b9a\nOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\n\n\u4ee5\u964d\uff0c\u3053\u308c\u3089\u306e\u51e6\u7406\u5185\u5bb9\u306b\u3064\u3044\u3066\u8ff0\u3079\u3066\u3044\u304d\u307e\u3059\uff0e\n\nOpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\nocl::Kernel\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3044\u307e\u3059\uff0e\ncv::threshold\u306e\u5165\u529b\u304cUMat\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308c\u3070\u4ee5\u4e0b\u306e\u51e6\u7406\u3067OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3044\u307e\u3059\uff0e\nocl::Kernel k(\"threshold\", ocl::imgproc::threshold_oclsrc,\n              format(\"-D %s -D T=%s -D T1=%s -D STRIDE_SIZE=%d%s\", thresholdMap[thresh_type],\n                     ocl::typeToStr(ktype), ocl::typeToStr(depth), stride_size,\n                     doubleSupport ? \" -D DOUBLE_SUPPORT\" : \"\"));\n\nocl::Kernel\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n\n\n\u5f15\u6570\n\u610f\u5473\n\n\n\n\n\u7b2c1\u5f15\u6570\nOpenCL\u30ab\u30fc\u30cd\u30eb\u540d\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306fthreshold\uff09\n\n\n\u7b2c2\u5f15\u6570\nOpenCL\u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u304c\u683c\u7d0d\u3055\u308c\u305f\u5909\u6570\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306focl::imgproc::threshold_oclsrc\uff09\n\n\n\u7b2c3\u5f15\u6570\n\u30ab\u30fc\u30cd\u30eb\u306e\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306ftype\uff0cdepth\uff0cstride\u30b5\u30a4\u30ba\u3092\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6e21\u3057\u3066\u3044\u308b\uff09\n\n\n\u7b2c4\u5f15\u6570\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\uff09\n\n\n\n\nOpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u683c\u7d0d\u5834\u6240\n\u524d\u8ff0\u306e\u901a\u308acv::threshold\u306eOpenCL\u30ab\u30fc\u30cd\u30eb\u306focl::imgproc::threshold_oclsrc\u306e\u4e2d\u306b\u6587\u5b57\u5217\u3068\u3057\u3066\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u304c\uff0cOpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u5b9f\u4f53\u306fOpenCV\u306e\u3069\u3053\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\uff0cOpenCV\u30d3\u30eb\u30c9\u6642\u306b\u751f\u6210\u3055\u308c\u308bopencl_kernels_imgproc.cpp\u306b\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\nthreshold_oclsrc\u306eOpenCL\u30ab\u30fc\u30cd\u30eb\u3092\u629c\u7c8b\u3057\u305f\u3082\u306e\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff0e\nconst struct ProgramEntry threshold={\"threshold\",\n\"#ifdef DOUBLE_SUPPORT\\n\"\n\"#ifdef cl_amd_fp64\\n\"\n\"#pragma OPENCL EXTENSION cl_amd_fp64:enable\\n\"\n\"#elif defined (cl_khr_fp64)\\n\"\n\"#pragma OPENCL EXTENSION cl_khr_fp64:enable\\n\"\n\"#endif\\n\"\n\"#endif\\n\"\n\"__kernel void threshold(__global const uchar * srcptr, int src_step, int src_offset,\\n\"\n\"__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols,\\n\"\n\"T1 thresh, T1 max_val, T1 min_val)\\n\"\n\"{\\n\"\n\"int gx = get_global_id(0);\\n\"\n\"int gy = get_global_id(1) * STRIDE_SIZE;\\n\"\n\"if (gx < cols)\\n\"\n\"{\\n\"\n\"int src_index = mad24(gy, src_step, mad24(gx, (int)sizeof(T), src_offset));\\n\"\n\"int dst_index = mad24(gy, dst_step, mad24(gx, (int)sizeof(T), dst_offset));\\n\"\n\n\u5f15\u7528\u7b26\u3084\\n\u304c\u3042\u3063\u3066\u8aad\u307f\u306b\u304f\u3044\u3093\u3060\u3051\u3069\u30fb\u30fb\u30fb\u3068\u601d\u3063\u305f\u65b9\u306f\u5b89\u5fc3\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\nmodules\\imgproc\\src\\opencl\\threshold.cl\u306b\u5143\u306eOpenCL\u30b3\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cOpenCV\u3067OpenCL\u3092\u4f7f\u3063\u3066\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\u304b\u3092\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u540c\u68b1\u306e*.cl\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3080\u3068\u3088\u3044\u3067\u3057\u3087\u3046\uff0e\n\u203bOpenCV\u30d3\u30eb\u30c9\u6642\u306b\u3053\u308c\u3089\u306e.cl\u30d5\u30a1\u30a4\u30eb\u304copencl_kernels_imgproc.cpp\u7b49\u306b\u307e\u3068\u3081\u3089\u308c\u308b\u3068\u3044\u3046\u4f5c\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\nOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u6307\u5b9a\nocl::Kernel\u30af\u30e9\u30b9\u306eargs\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3053\u3068\u3067OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\nocl_threshold\u3067\u306f\u4ee5\u4e0b\u306e\u51e6\u7406\u306b\u3088\u3063\u3066OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u5f15\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\nk.args(ocl::KernelArg::ReadOnlyNoSize(src), ocl::KernelArg::WriteOnly(dst, cn, kercn),\n       ocl::KernelArg::Constant(Mat(1, 1, depth, Scalar::all(thresh))),\n       ocl::KernelArg::Constant(Mat(1, 1, depth, Scalar::all(maxval))),\n       ocl::KernelArg::Constant(Mat(1, 1, depth, Scalar::all(min_val))));\n\n\nOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\nocl::Kernel\u30af\u30e9\u30b9\u306erun\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3053\u3068\u3067OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\uff0e\nocl_threshold\u3067\u306f\u4ee5\u4e0b\u306e\u51e6\u7406\u306b\u3088\u3063\u3066OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\uff0e\nsize_t globalsize[2] = { (size_t)dst.cols * cn / kercn, (size_t)dst.rows };\nglobalsize[1] = (globalsize[1] + stride_size - 1) / stride_size;\nreturn k.run(2, globalsize, NULL, false);\n\nrun\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n\n\n\u5f15\u6570\n\u610f\u5473\n\n\n\n\n\u7b2c1\u5f15\u6570\n\u6b21\u5143\u6570\n\n\n\u7b2c2\u5f15\u6570\nglobal_work_size\n\n\n\u7b2c3\u5f15\u6570\nlocal_work_size\n\n\n\u7b2c4\u5f15\u6570\n\u30ab\u30fc\u30cd\u30eb\u5b9f\u884c\u5f85\u3061\u3092\u884c\u3046\u304b\u5426\u304b\u3092\u6307\u5b9a\u3059\u308b\u30d6\u30fc\u30eb\u5024\n\n\n\n\n\u88dc\u8db3\n\nOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\nOpenCV\u306eUMat\u3067\u306fOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u4ed5\u7d44\u307f\u304c\u5099\u308f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u5177\u4f53\u7684\u306b\u306focl::Program\u30af\u30e9\u30b9\u306egetProg\u30e1\u30bd\u30c3\u30c9\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u51e6\u7406\u304c\u52d5\u3044\u3066\u3044\u307e\u3059\uff0e\u305d\u3057\u3066\uff0c\u4e00\u5ea6\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305fOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306fmap\u306b\u683c\u7d0d\u3055\u308c\u3066\u304a\u308a\uff0c\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3067\u691c\u7d22\u3057\u3066\u30d2\u30c3\u30c8\u3057\u305fOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\nProgram getProg(const ProgramSource& src,\n                const String& buildflags, String& errmsg)\n{\n    String prefix = Program::getPrefix(buildflags);\n    HashKey k(src.hash(), crc64((const uchar*)prefix.c_str(), prefix.size()));\n    phash_t::iterator it = phash.find(k);\n    if( it != phash.end() )\n        return it->second;\n    //String filename = format(\"%08x%08x_%08x%08x.clb2\",\n    Program prog(src, buildflags, errmsg);\n    if(prog.ptr())\n        phash.insert(std::pair<HashKey,Program>(k, prog));\n    return prog;\n}\n\n\u3053\u306egetProg\u30e1\u30bd\u30c3\u30c9\u306focl::Kernel\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089\uff0c\u4e00\u5ea6\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305fOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u95a2\u3057\u3066\u306fOpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u884c\u308f\u308c\u307e\u305b\u3093\uff0e\n\n\u8ffd\u8a18\uff082016/5/5\uff09\ntwitter\u4e0a\u3067\u4ee5\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u304d\u307e\u3057\u305f\uff0e\n\n\u3054\u6307\u6458\u306e\u3088\u3046\u306bOpenCV\u3067\u72ec\u81ea\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u80cc\u666f\u306f\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u3067\u3059\u306d\u30fb\u30fb\u30fb\uff0e\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u4eca\u56de\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n#include <opencv2/core.hpp>\n#include <opencv2/imgproc.hpp>\n#include <opencv2/imgcodecs.hpp>\n#include <opencv2/highgui.hpp>\n\n#include <iostream>\n\nint main(int argc, char *argv[])\n{\n    cv::Mat src = cv::imread(\"lena.jpg\", cv::IMREAD_GRAYSCALE);\n    if (src.empty())\n    {\n        std::cerr << \"Failed to open image file.\" << std::endl;\n        return -1;\n    }\n\n    cv::UMat u_src, u_bin;\n    src.copyTo(u_src);\n\n    cv::threshold(u_src, u_bin, 100, 255, cv::THRESH_BINARY);\n\n    cv::namedWindow(\"threshold\");\n    cv::imshow(\"threshold\", u_bin);\n    cv::waitKey(0);\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\u304a\u308f\u308a\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u306fOpenCV\u306eUMat\u5185\u90e8\u3067\u3069\u306e\u3088\u3046\u306bOpenCL\u306e\u51e6\u7406\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\uff0e\n\n\u5099\u8003\n\u7b46\u8005\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u307e\u3057\u305f\uff0e\n\nOpenCV 3.1.0\nWindows 10 Pro\uff0864bit\uff09\nVisual Studio 2013 Update5\nNVIDIA CUDA Toolkit 7.5\n\n# \u306f\u3058\u3081\u306b\n\u4ee5\u524d\u66f8\u3044\u305f[UMat\u306e\u5185\u90e8\u51e6\u7406](http://qiita.com/dandelion1124/items/fad18a164108158585e3)\u306e\u7d9a\u7de8\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u3053\u3053\u3067\u306fOpenCV\u306eUMat\u5185\u90e8\u3067\u3069\u306e\u3088\u3046\u306bOpenCL\u306e\u51e6\u7406\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u306b\u3064\u3044\u3066\u3082\u3046\u5c11\u3057\u8a73\u7d30\u306b\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n# \u5bfe\u8c61\u8aad\u8005\n\u672c\u8a18\u4e8b\u306e\u5bfe\u8c61\u8aad\u8005\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n- UMat\u306e\u5185\u90e8\u51e6\u7406\u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u65b9<br>or\n- UMat\u306eOpenCL\u5b9f\u88c5\u3092\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3044\u308b\u65b9\n\n# UMat(OpenCL)\u306e\u51e6\u7406\u306e\u6d41\u308c\n\u3053\u3053\u3067\u306fcv::threshold\u3092\u4f8b\u306b\u6319\u3052\u3066UMat\u306e\u5185\u90e8\u51e6\u7406(OpenCL)\u3092\u8aac\u660e\u3057\u307e\u3059\uff0e\ncv::threshold\u306e\u5165\u529b\u304cUMat\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6d41\u308c\u3067\u51e6\u7406\u304c\u884c\u308f\u308c\u307e\u3059\uff0e\n\n<pre>\ncv::threshold\n\u2192ocl_threshold\n \u2192OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n \u2192OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u6307\u5b9a\n \u2192OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\n</pre>\n\n\u3068\u3044\u3046\u3053\u3068\u3067OpenCL\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u306a\u3089\u304a\u306a\u3058\u307f\u306e\u4ee5\u4e0b\u306e\u51e6\u7406\u304cUMat(OpenCL)\u306e\u4e2d\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n- OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n- OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u6307\u5b9a\n- OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\n\n\u4ee5\u964d\uff0c\u3053\u308c\u3089\u306e\u51e6\u7406\u5185\u5bb9\u306b\u3064\u3044\u3066\u8ff0\u3079\u3066\u3044\u304d\u307e\u3059\uff0e\n\n## OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\nocl::Kernel\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3044\u307e\u3059\uff0e\ncv::threshold\u306e\u5165\u529b\u304cUMat\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308c\u3070\u4ee5\u4e0b\u306e\u51e6\u7406\u3067OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3044\u307e\u3059\uff0e\n\n```cpp:\nocl::Kernel k(\"threshold\", ocl::imgproc::threshold_oclsrc,\n              format(\"-D %s -D T=%s -D T1=%s -D STRIDE_SIZE=%d%s\", thresholdMap[thresh_type],\n                     ocl::typeToStr(ktype), ocl::typeToStr(depth), stride_size,\n                     doubleSupport ? \" -D DOUBLE_SUPPORT\" : \"\"));\n```\n\nocl::Kernel\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n| \u5f15\u6570    | \u610f\u5473|\n|:-------|:------------|\n|\u7b2c1\u5f15\u6570 |OpenCL\u30ab\u30fc\u30cd\u30eb\u540d<br>\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306f**threshold**\uff09 |\n|\u7b2c2\u5f15\u6570 |OpenCL\u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u304c\u683c\u7d0d\u3055\u308c\u305f\u5909\u6570<br>\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306f**ocl::imgproc::threshold_oclsrc**\uff09 |\n|\u7b2c3\u5f15\u6570 |\u30ab\u30fc\u30cd\u30eb\u306e\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3<br>\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306f**type**\uff0c**depth**\uff0c**stride\u30b5\u30a4\u30ba**\u3092\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6e21\u3057\u3066\u3044\u308b\uff09 |\n|\u7b2c4\u5f15\u6570 |\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8<br>\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\uff09 |\n\n### OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u683c\u7d0d\u5834\u6240\n\u524d\u8ff0\u306e\u901a\u308acv::threshold\u306eOpenCL\u30ab\u30fc\u30cd\u30eb\u306f**ocl::imgproc::threshold_oclsrc**\u306e\u4e2d\u306b\u6587\u5b57\u5217\u3068\u3057\u3066\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u304c\uff0cOpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u5b9f\u4f53\u306fOpenCV\u306e\u3069\u3053\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\uff0cOpenCV\u30d3\u30eb\u30c9\u6642\u306b\u751f\u6210\u3055\u308c\u308bopencl_kernels_imgproc.cpp\u306b\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n**threshold_oclsrc**\u306eOpenCL\u30ab\u30fc\u30cd\u30eb\u3092\u629c\u7c8b\u3057\u305f\u3082\u306e\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff0e\n\n```cpp:\nconst struct ProgramEntry threshold={\"threshold\",\n\"#ifdef DOUBLE_SUPPORT\\n\"\n\"#ifdef cl_amd_fp64\\n\"\n\"#pragma OPENCL EXTENSION cl_amd_fp64:enable\\n\"\n\"#elif defined (cl_khr_fp64)\\n\"\n\"#pragma OPENCL EXTENSION cl_khr_fp64:enable\\n\"\n\"#endif\\n\"\n\"#endif\\n\"\n\"__kernel void threshold(__global const uchar * srcptr, int src_step, int src_offset,\\n\"\n\"__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols,\\n\"\n\"T1 thresh, T1 max_val, T1 min_val)\\n\"\n\"{\\n\"\n\"int gx = get_global_id(0);\\n\"\n\"int gy = get_global_id(1) * STRIDE_SIZE;\\n\"\n\"if (gx < cols)\\n\"\n\"{\\n\"\n\"int src_index = mad24(gy, src_step, mad24(gx, (int)sizeof(T), src_offset));\\n\"\n\"int dst_index = mad24(gy, dst_step, mad24(gx, (int)sizeof(T), dst_offset));\\n\"\n```\n\n<br>**\u5f15\u7528\u7b26\u3084\\n\u304c\u3042\u3063\u3066\u8aad\u307f\u306b\u304f\u3044\u3093\u3060\u3051\u3069\u30fb\u30fb\u30fb**\u3068\u601d\u3063\u305f\u65b9\u306f\u5b89\u5fc3\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n<code>modules\\imgproc\\src\\opencl\\threshold.cl</code>\u306b\u5143\u306eOpenCL\u30b3\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cOpenCV\u3067OpenCL\u3092\u4f7f\u3063\u3066\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\u304b\u3092\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u540c\u68b1\u306e*.cl\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3080\u3068\u3088\u3044\u3067\u3057\u3087\u3046\uff0e\n\u203bOpenCV\u30d3\u30eb\u30c9\u6642\u306b\u3053\u308c\u3089\u306e.cl\u30d5\u30a1\u30a4\u30eb\u304copencl_kernels_imgproc.cpp\u7b49\u306b\u307e\u3068\u3081\u3089\u308c\u308b\u3068\u3044\u3046\u4f5c\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n## OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u6307\u5b9a\nocl::Kernel\u30af\u30e9\u30b9\u306eargs\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3053\u3068\u3067OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\nocl_threshold\u3067\u306f\u4ee5\u4e0b\u306e\u51e6\u7406\u306b\u3088\u3063\u3066OpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u5f15\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\n```cpp:\nk.args(ocl::KernelArg::ReadOnlyNoSize(src), ocl::KernelArg::WriteOnly(dst, cn, kercn),\n       ocl::KernelArg::Constant(Mat(1, 1, depth, Scalar::all(thresh))),\n       ocl::KernelArg::Constant(Mat(1, 1, depth, Scalar::all(maxval))),\n       ocl::KernelArg::Constant(Mat(1, 1, depth, Scalar::all(min_val))));\n```\n\n## OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\nocl::Kernel\u30af\u30e9\u30b9\u306erun\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3053\u3068\u3067OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\uff0e\nocl_threshold\u3067\u306f\u4ee5\u4e0b\u306e\u51e6\u7406\u306b\u3088\u3063\u3066OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```cpp:\nsize_t globalsize[2] = { (size_t)dst.cols * cn / kercn, (size_t)dst.rows };\nglobalsize[1] = (globalsize[1] + stride_size - 1) / stride_size;\nreturn k.run(2, globalsize, NULL, false);\n```\n\nrun\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n| \u5f15\u6570    |\u610f\u5473|\n|:-------|:------------|\n|\u7b2c1\u5f15\u6570 |\u6b21\u5143\u6570|\n|\u7b2c2\u5f15\u6570 |global_work_size|\n|\u7b2c3\u5f15\u6570 |local_work_size|\n|\u7b2c4\u5f15\u6570 |\u30ab\u30fc\u30cd\u30eb\u5b9f\u884c\u5f85\u3061\u3092\u884c\u3046\u304b\u5426\u304b\u3092\u6307\u5b9a\u3059\u308b\u30d6\u30fc\u30eb\u5024 |\n\n# \u88dc\u8db3\n## OpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\nOpenCV\u306eUMat\u3067\u306fOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u4ed5\u7d44\u307f\u304c\u5099\u308f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u5177\u4f53\u7684\u306b\u306focl::Program\u30af\u30e9\u30b9\u306egetProg\u30e1\u30bd\u30c3\u30c9\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u51e6\u7406\u304c\u52d5\u3044\u3066\u3044\u307e\u3059\uff0e\u305d\u3057\u3066\uff0c\u4e00\u5ea6\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305fOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306fmap\u306b\u683c\u7d0d\u3055\u308c\u3066\u304a\u308a\uff0c\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3067\u691c\u7d22\u3057\u3066\u30d2\u30c3\u30c8\u3057\u305fOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n```cpp:\nProgram getProg(const ProgramSource& src,\n                const String& buildflags, String& errmsg)\n{\n    String prefix = Program::getPrefix(buildflags);\n    HashKey k(src.hash(), crc64((const uchar*)prefix.c_str(), prefix.size()));\n    phash_t::iterator it = phash.find(k);\n    if( it != phash.end() )\n        return it->second;\n    //String filename = format(\"%08x%08x_%08x%08x.clb2\",\n    Program prog(src, buildflags, errmsg);\n    if(prog.ptr())\n        phash.insert(std::pair<HashKey,Program>(k, prog));\n    return prog;\n}\n```\n\n\u3053\u306egetProg\u30e1\u30bd\u30c3\u30c9\u306focl::Kernel\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089\uff0c\u4e00\u5ea6\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305fOpenCL\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u95a2\u3057\u3066\u306fOpenCL\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u884c\u308f\u308c\u307e\u305b\u3093\uff0e\n\n### \u8ffd\u8a18\uff082016/5/5\uff09\n\ntwitter\u4e0a\u3067\u4ee5\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u304d\u307e\u3057\u305f\uff0e\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/dandelion1124\">@dandelion1124</a> OpenCL\u306e\u30ab\u30fc\u30cd\u30eb\u306f\u4e00\u5ea6\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u307e\u3059\u306e\u3067\u3001OpenCV\u72ec\u81ea\u3067\u3082\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u305f\u3060\u3057\u307e\u3060\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u5bff\u547d\u306b\u3064\u3044\u3066\u306f\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u304c</p>&mdash; \u307e\u304a\uff08\u677e\u5ca1\u6d0b\uff09 (@kuronekodaisuki) <a href=\"https://twitter.com/kuronekodaisuki/status/727907955446665217\">2016\u5e745\u67084\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\u3054\u6307\u6458\u306e\u3088\u3046\u306bOpenCV\u3067\u72ec\u81ea\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u80cc\u666f\u306f\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u3067\u3059\u306d\u30fb\u30fb\u30fb\uff0e\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u4eca\u56de\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n```cpp:\n#include <opencv2/core.hpp>\n#include <opencv2/imgproc.hpp>\n#include <opencv2/imgcodecs.hpp>\n#include <opencv2/highgui.hpp>\n\n#include <iostream>\n\nint main(int argc, char *argv[])\n{\n    cv::Mat src = cv::imread(\"lena.jpg\", cv::IMREAD_GRAYSCALE);\n    if (src.empty())\n    {\n        std::cerr << \"Failed to open image file.\" << std::endl;\n        return -1;\n    }\n\n    cv::UMat u_src, u_bin;\n    src.copyTo(u_src);\n\n    cv::threshold(u_src, u_bin, 100, 255, cv::THRESH_BINARY);\n\n    cv::namedWindow(\"threshold\");\n    cv::imshow(\"threshold\", u_bin);\n    cv::waitKey(0);\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n# \u304a\u308f\u308a\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u306fOpenCV\u306eUMat\u5185\u90e8\u3067\u3069\u306e\u3088\u3046\u306bOpenCL\u306e\u51e6\u7406\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\uff0e\n\n# \u5099\u8003\n\u7b46\u8005\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u307e\u3057\u305f\uff0e\n\n* [OpenCV 3.1.0](https://github.com/Itseez/opencv/releases/tag/3.1.0)\n* Windows 10 Pro\uff0864bit\uff09\n* Visual Studio 2013 Update5\n* NVIDIA CUDA Toolkit 7.5\n", "tags": ["OpenCV", "OpenCL", "\u753b\u50cf\u51e6\u7406", "C++"]}