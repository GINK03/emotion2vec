{"context": "\n\n\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b & \u547c\u3076\nfunc increment(n: Int) -> Int {\n    return n + 1\n}\n\nlet increment = { (n: Int) in n + 1 }\nlet increment = { (n) in n + 1 }\nlet increment = { n in n + 1 }\nlet increment = { $0 + 1 }\n\nincrement(4)  // 5\n\n\n\n\u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\n\u300c\u30ab\u30ea\u30fc\u5316\u300d\u3055\u308c\u305f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u69cb\u6587\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u5ec3\u6b62\u4e88\u5b9a  \nfunc makeConst(n: Int)(_: Int) -> Int {\n    return n\n}\n\nmakeConst(4)(7)  // 4\n\n\u4eca\u5f8c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\nfunc makeConst(n: Int) -> Int -> Int { \n    return { (_: Int) in n }\n}\n\n\n\n\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\nlet m: Int? = nil\nlet n: Int? = 0\n\nif let m = m, n = n {\n    print(m + n)\n}\n\n\n\n\u4e8c\u91cd\u306e\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\nlet p: Int?? = nil          // \u5916\u5074\u304c nil\nlet q: Int?? = nil as Int?  // \u5185\u5074\u304c nil\nlet r: Int?? = 0\n\n\u3061\u306a\u307f\u306b Haskell \u3060\u3068\np = Nothing\nq = Just (Nothing)\nr = Just (Just 0)\n\n\n\nMap\n\nlet a: Int? = nil\nlet b: Int? = 2\n\na.map { n in n + 1 }  // nil\nb.map { n in n + 1 }  // 3\n\nlet a = [0, 1, 2, 3, 4]\na.map { n in n * 2 + 1 }  // [1, 3, 5, 7, 9]\n\nlet s = Set([1, 2, 3])\ns.map { x in x + 1 }  // [3, 4, 2]\n\n\u96c6\u5408\u3082 map \u3059\u308b\u3068\u914d\u5217\u306b\u306a\u3063\u3066\u3057\u307e\u3046... \n\n\nflatten\n\n\u4e8c\u91cd\u306e\u30ea\u30b9\u30c8\u3092\u4e00\u91cd\u306b\u3059\u308b\n[[1, 2], [3, 4]].flatten()\n// [1, 2, 3, 4]\n\n\u4e8c\u91cd\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306e flatten \u306f\u306a\u3044 \n\n\nflatMap\n\nmap \u3057\u3066 flatten \u3059\u308b\n[10, 20, 30].flatMap { n in [n, n + 1] }\n// [10, 11, 20, 21, 30, 31]\n\nfunc divide10(n: Int) -> Int? {\n    guard n != 0 else {\n        return nil\n    }\n    return 10 / n\n}\n\n(nil as Int?).flatMap(divide10)  // nil\n(0   as Int?).flatMap(divide10)  // nil\n(5   as Int?).flatMap(divide10)  // 2\n\n\n\n\u30e2\u30ce\u30a4\u30c9\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\nprotocol Monoid {\n    init()\n    func + (left: Self, right: Self) -> Self\n}\n\nextension Int: Monoid {\n}\nextension Array: Monoid {\n}\n\nfunc reduce<S: SequenceType\n        where S.Generator.Element: Monoid>\n        (sequence: S) -> S.Generator.Element {\n    return sequence.reduce(\n        S.Generator.Element(), combine: +)\n}\n\nreduce([] as [Int])    // 0\nreduce([] as [[Int]])  // []\nreduce([0, 1, 2, 3])   // 6\nreduce([[0, 1, 2], [3, 4], [5, 6, 7, 8]])\n// [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n\n\nSwift \u3067\u3067\u304d\u306a\u3044\u3053\u3068 \n\n\n\u672b\u5c3e\u547c\u3073\u51fa\u3057\u6700\u9069\u5316\n\n\n\u6700\u9069\u5316\u5668\u304c\u9811\u5f35\u308c\u3070\u3067\u304d\u308b\u3053\u3068\u3082\u3042\u308b\n\n\n\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3084\u30e2\u30ca\u30c9\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\n\n\n\u30ea\u30b9\u30c8\u3084\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306e map \u3084 flatMap \u306f\u30b7\u30b0\u30cd\u30c1\u30e3\u30fc\u304c\u300c\u540c\u3058\u300d\u3060\u3051\u3067\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u306f\u5171\u901a\u5316\u3055\u308c\u3066\u3044\u306a\u3044\n\n\n\n# \u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b & \u547c\u3076\n\n```swift\nfunc increment(n: Int) -> Int {\n    return n + 1\n}\n\nlet increment = { (n: Int) in n + 1 }\nlet increment = { (n) in n + 1 }\nlet increment = { n in n + 1 }\nlet increment = { $0 + 1 }\n```\n\n```swift\nincrement(4)  // 5\n```\n\n----\n\n# \u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\n\n\u300c\u30ab\u30ea\u30fc\u5316\u300d\u3055\u308c\u305f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u69cb\u6587\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u5ec3\u6b62\u4e88\u5b9a :disappointed: \n\n```swift\nfunc makeConst(n: Int)(_: Int) -> Int {\n    return n\n}\n\nmakeConst(4)(7)  // 4\n```\n\n\u4eca\u5f8c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\n\n```swift\nfunc makeConst(n: Int) -> Int -> Int { \n    return { (_: Int) in n }\n}\n```\n\n----\n\n# \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\n\n```swift\nlet m: Int? = nil\nlet n: Int? = 0\n\nif let m = m, n = n {\n    print(m + n)\n}\n```\n\n----\n\n# \u4e8c\u91cd\u306e\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\n\n```swift\nlet p: Int?? = nil          // \u5916\u5074\u304c nil\nlet q: Int?? = nil as Int?  // \u5185\u5074\u304c nil\nlet r: Int?? = 0\n```\n\n\u3061\u306a\u307f\u306b Haskell \u3060\u3068\n\n```hs\np = Nothing\nq = Just (Nothing)\nr = Just (Just 0)\n```\n\n----\n\n# `Map`\n\n```swift\nlet a: Int? = nil\nlet b: Int? = 2\n\na.map { n in n + 1 }  // nil\nb.map { n in n + 1 }  // 3\n```\n\n```swift\nlet a = [0, 1, 2, 3, 4]\na.map { n in n * 2 + 1 }  // [1, 3, 5, 7, 9]\n```\n\n```swift\nlet s = Set([1, 2, 3])\ns.map { x in x + 1 }  // [3, 4, 2]\n```\n\n\u96c6\u5408\u3082 `map` \u3059\u308b\u3068\u914d\u5217\u306b\u306a\u3063\u3066\u3057\u307e\u3046... :disappointed:\n\n----\n\n# `flatten`\n\n\u4e8c\u91cd\u306e\u30ea\u30b9\u30c8\u3092\u4e00\u91cd\u306b\u3059\u308b\n\n```swift\n[[1, 2], [3, 4]].flatten()\n// [1, 2, 3, 4]\n```\n\n\u4e8c\u91cd\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306e `flatten` \u306f\u306a\u3044 :disappointed:\n\n----\n\n# `flatMap`\n\n`map` \u3057\u3066 `flatten` \u3059\u308b\n\n```swift\n[10, 20, 30].flatMap { n in [n, n + 1] }\n// [10, 11, 20, 21, 30, 31]\n```\n\n```swift\nfunc divide10(n: Int) -> Int? {\n    guard n != 0 else {\n        return nil\n    }\n    return 10 / n\n}\n\n(nil as Int?).flatMap(divide10)  // nil\n(0   as Int?).flatMap(divide10)  // nil\n(5   as Int?).flatMap(divide10)  // 2\n```\n\n----\n\n# \u30e2\u30ce\u30a4\u30c9\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\n\n```swift\nprotocol Monoid {\n    init()\n    func + (left: Self, right: Self) -> Self\n}\n\nextension Int: Monoid {\n}\nextension Array: Monoid {\n}\n\nfunc reduce<S: SequenceType\n        where S.Generator.Element: Monoid>\n        (sequence: S) -> S.Generator.Element {\n    return sequence.reduce(\n        S.Generator.Element(), combine: +)\n}\n\nreduce([] as [Int])    // 0\nreduce([] as [[Int]])  // []\nreduce([0, 1, 2, 3])   // 6\nreduce([[0, 1, 2], [3, 4], [5, 6, 7, 8]])\n// [0, 1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n----\n\n# Swift \u3067\u3067\u304d\u306a\u3044\u3053\u3068 :disappointed:\n\n- \u672b\u5c3e\u547c\u3073\u51fa\u3057\u6700\u9069\u5316\n  - \u6700\u9069\u5316\u5668\u304c\u9811\u5f35\u308c\u3070\u3067\u304d\u308b\u3053\u3068\u3082\u3042\u308b\n- \u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3084\u30e2\u30ca\u30c9\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\n  - \u30ea\u30b9\u30c8\u3084\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306e `map` \u3084 `flatMap` \u306f\u30b7\u30b0\u30cd\u30c1\u30e3\u30fc\u304c\u300c\u540c\u3058\u300d\u3060\u3051\u3067\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u3057\u3066\u306f\u5171\u901a\u5316\u3055\u308c\u3066\u3044\u306a\u3044\n", "tags": ["Swift", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}