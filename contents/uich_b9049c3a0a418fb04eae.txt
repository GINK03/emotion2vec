{"context": "\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\u4eca\u56de\u306f\u3053\u3046\u3044\u3063\u305f\u51e6\u7406\u304c\u70b9\u5728\u3057\u3066\u3066\u3001\u4f8b\u3048\u3070\u3053\u308c\u3092\u5168\u3066MQ\u7d4c\u7531\u306b\u3059\u308b\u5834\u5408\u306e\u8a71\u3067\u3059\u3002\n@Autowired\nTooHeavyProcessor processor;\n\npublic void doSomething() {\n  // do something..\n\n  // too heavy process in async.\n  async(() -> processor.process(...));\n}\n\n\n\u524d\u6e96\u5099\n\nRabbit MQ\nInstalling on Homebrew\n$ brew update\n$ brew install rabbitmq\n$ brew services start rabbitmq \n\n\nSpring Boot\nStart with Spring Initializr\n\nLombok\nAMQP\nWeb\n\n\nMaven\n\u4f9d\u5b58\u6027\u3092\u8ffd\u52a0\u3002\n\npom.xml\n<dependency>\n  <groupId>org.apache.commons</groupId>\n  <artifactId>commons-lang3</artifactId>\n  <version>3.5</version>\n</dependency>\n<dependency>\n  <groupId>org.apache.commons</groupId>\n  <artifactId>commons-collections4</artifactId>\n  <version>4.1</version>\n</dependency>\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3002\n\npom.xml\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-compiler-plugin</artifactId>\n  <configuration>\n    <compilerArgument>-parameters</compilerArgument>\n    <fork>true</fork>\n  </configuration>\n</plugin>\n\n\n\n\u5927\u307e\u304b\u306a\u5909\u66f4\u5185\u5bb9\n\n\u51e6\u7406\u5185\u5bb9\n\n\u5909\u66f4\u524d\n[Heavy process]@any\n\n\n\u5909\u66f4\u5f8c\n[Heavy process]@any -> (queue) -> [Heavy process]@consumer\n\n\n\u5404\u30af\u30e9\u30b9\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\nTooHeavyProcessor.java\npublic interface TooHeavyProcessor {\n\n  void action(User user, Item item, Date date);\n\n  void process(String key, Date date);\n}\n\n\n\n\u5b9f\u88c5\u30af\u30e9\u30b9\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\n\u3053\u306e\u30af\u30e9\u30b9\u3092MQ\u306eProducer\u5074\u3067\u52d5\u3044\u3066\u3044\u308b\u306e\u3067Consumer\u5074\u306b\u6301\u3063\u3066\u3044\u304d\u305f\u3044\u3002\n\nDefaultTooHeavyProcessor.java\n@Slf4j(topic = \"\u7d50\u679c\")\npublic class DefaultTooHeavyProcessor implements TooHeavyProcessor {\n\n  @Override\n  public void action(User user, Item item, Date date) {\n    // \u5b9f\u884c\u7d50\u679c\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u30ed\u30ae\u30f3\u30b0\n    log.info(\"{} actions to {} at {}!!\", StringUtils.toString(user), StringUtils.toString(item),\n      FORMATTER.format(date));\n  }\n\n  @Override\n  public void process(String key, Date date) {\n    // \u5b9f\u884c\u7d50\u679c\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u30ed\u30ae\u30f3\u30b0\n    log.info(\"process for {} at {}\", key, FORMATTER.format(date));\n  }\n\n}\n\n\n\u547c\u3073\u51fa\u3057\u81ea\u4f53\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u3057\u305f\u3044\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u601d\u3044\u3064\u3044\u305f\u306e\u304cSpEL(Spring Expression Language)\u3002\nprocessor.action(user, item, date);\n\n\u3053\u308c\u3092\n\nproducer\nString el = \"@processor.action(#user, #item, #date)\";\nMap<String, Object> params = new LinkedHashMap<>();\nparams.add(\"user\", user);\nparams.add(\"item\", item);\nparams.add(\"date\", date);\n\nELExpression message = new ELExpression(el, params);\n\n// MQ\u306b\u9001\u4fe1\namqpMessageTemplate.convertAndSend(\"el.exchange\", null, message);\n\n\n\nconsumer\npublic void receive(ELMessage message) {\n  // SpEL\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d1\u30fc\u30b9\n}\n\n\n\u3068\u3044\u3046\u5f62\u306b\u3057\u305f\u3089Consumer\u5074\u3067\u5b9f\u884c\u53ef\u80fd\u306b\u306a\u308b\u306f\u305a\u3002\n\nMQ\u9001\u4fe1\u30af\u30e9\u30b9\u5b9f\u88c5\nTooHeavyProcessor\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u969b\u306bDefaultTooHeavyProcessor\u3092\u5b9f\u884c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001SpEL\u3092\u4f5c\u3063\u3066\u305d\u308c\u3092MQ\u306b\u9001\u4fe1\u3059\u308b\u3088\u3046\u306a\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3002\n\u547c\u3073\u51fa\u3055\u308c\u305f\u969b\u306b\u52d5\u7684\u306a\u6319\u52d5\u304c\u6c42\u3081\u3089\u308c\u308b\u306e\u3067Proxy\u3067\u5b9f\u88c5\u3059\u308b\u3002\nProxy\u4f5c\u6210\u65b9\u6cd5\u306f\u6b21\u306e\u3088\u3046\u306a\u65b9\u6cd5\u3002\n\nProxy\nimport org.springframework.util.ClassUtils;\n\nprivate String beanName = \"processor\";\nprivate String Class<?> type = TooHeavyProcessor.class;\n\n@Autowired\nprivate AmqpTemplate messageTemplate;\n\nProxy.newProxyInstance(ClassUtils.getDefaultClassLoader(),\n  new Class[] { this.type }, (bean, method, args) -> {\n    // SpEL\u751f\u6210\n    // beanName\u3068method\u3068args\u304b\u3089ELExpression\u3092\u751f\u6210\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30e1\u30bd\u30c3\u30c9\n    ELExpression el = SpelUtils.createELExpression(this.beanName, method, args);\n    // MQ\u306b\u9001\u4fe1\n    this.messageTemplate.convertAndSend(\"el.exchange\", null, el);\n    return null;\n  });\n\n\n\u3053\u308c\u3092Bean\u767b\u9332\u3057\u305f\u3044\u306e\u3067\u3001FactoryBean\u3067\u751f\u6210\u3059\u308b\n\nMessagingTooHeavyProcessorProxyFactoryBean.java\n@Component\npublic class MessagingTooHeavyProcessorProxyFactoryBean implements FactoryBean<TooHeavyProcessor>, InitializingBean {\n\n  private final String beanName = \"processor\";\n  private final Class<TooHeavyProcessor> type = TooHeavyProcessor.class;\n\n  private TooHeavyProcessor proxy;\n\n  @Autowired\n  private AmqpTemplate messageTemplate;\n\n  @Override\n  public void afterPropertiesSet() {\n    this.proxy = (TooHeavyProcessor) /* proxy\u4f5c\u6210 */;\n  }\n\n  @Override\n  public TooHeavyProcessor getObject() {\n    return this.proxy;\n  }\n\n  @Override\n  public Class<?> getObjectType() {\n    return this.type;\n  }\n\n  @Override\n  public boolean isSingleton() {\n    return true;\n  }\n}\n\n\n\nMQ Receiver\u30af\u30e9\u30b9\n\nELReceiver\n@Component\npublic class ELReceiver {\n\n  /** SpEL\u3092\u89e3\u6790\u3057\u3066\u5b9f\u884c\u3059\u308b\u30af\u30e9\u30b9 */\n  @Autowired\n  private ELExecutor elExecutor;\n\n  // Exchange\u3068Queue\u3092\u5b9a\u7fa9\u3057\u3066Rabbit\u5074\u306b\u7121\u3051\u308c\u3070\u4f5c\u6210\u3059\u308b\n  @RabbitListener(bindings = @QueueBinding(\n    value = @Queue(value = \"el.queue\", durable = \"true\"),\n    exchange = @Exchange(value = \"el.exchange\", type = ExchangeTypes.FANOUT, durable = \"true\")))\n  public void receive(ELExpression el) {\n    // SpEL\u3092\u89e3\u6790\u3057\u3066\u5b9f\u884c\n    this.elExecutor.execute(el);\n  }\n}\n\n\nSpEL\u306e\u89e3\u6790\u3068\u5b9f\u884c\u306f\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a73\u3057\u304f\u8a18\u8f09\u304c\u3042\u308b\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\nStandardEvaluationContext\u306e\u4f5c\u308a\u65b9\u3060\u3051\u3002\n\nELExecutor.java\n@Autowired\nprivate ApplicationContext appContext;\n\nprivate StandardEvaluationContext createContext(Map<String, Object> args) {\n  StandardEvaluationContext context = new StandardEvaluationContext();\n\n  // \u5909\u6570\u3092\u767b\u9332\n  args.forEach((key, value) -> context.setVariable(key, value));\n  // Bean\u540d\u304b\u3089Bean\u3092\u89e3\u6c7a\u3067\u304d\u308b\u3088\u3046\u306bBeanResolver\u3092\u767b\u9332\n  context.setBeanResolver(\n    (_self, beanName) -> this.appContext.getBean(beanName));\n\n  return context;\n}\n\n\n\u3053\u306e\u6642\u3001MessagingTooHeavyProcessorProxyFactoryBean\u3067Bean\u540d\u3092processor\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3061\u3083\u3093\u3068Bean\u540d\u3092\u5408\u308f\u305b\u308b\u3002\n\u305d\u308c\u3068\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067Bean\u540d\u3092\u5207\u308a\u66ff\u3048\u305f\u3044\u304b\u3089\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u3057\u3066\u304a\u304f\u3002\n\nMessagingTooHeavyProcessorProxyFactoryBean.java\n// \"messaging\"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u6642\u306e\u307fBean\u767b\u9332\u3059\u308b\n@Profile(\"messaging\")\n@Component(\"processor\")\npublic class MessagingTooHeavyProcessorProxyFactoryBean\n\n\n\nDefaultTooHeavyProcessor.java\n// \"default\"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u6642\u306e\u307fBean\u767b\u9332\u3059\u308b\n@Profile(\"default\")\n@Component(\"processor\")\npublic class DefaultTooHeavyProcessor\n\n\n\n\u52d5\u4f5c\u78ba\u8a8d\u6e96\u5099\n\nWeb API\n\u30c8\u30ea\u30ac\u30fc\u7528\u306bWeb API\u306e\u53e3\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3002\n\nELDemoController.java\n// Producer\u5074\u3060\u3051\u5fc5\u8981\n@Profile(\"producer\")\n@RestController\npublic class ELDemoController {\n\n  @Autowired\n  private TooHeavyProcessor processor;\n\n  @GetMapping(\"/action\")\n  public ActionResult action() {\n    User user = this.randomUser();\n    Item item = this.randomItem();\n    Date date = this.randomDate();\n\n    this.processor.action(user, item, this.randomDate());\n\n    return new ActionResult(user, item, date);\n  }\n\n  @GetMapping(\"/process\")\n  public ProcessResult process() {\n    String key = RandomStringUtils.randomAlphanumeric(10);\n    Date date = this.randomDate();\n\n    this.processor.process(key, date);\n\n    return new ProcessResult(key, date);\n  }\n\n  // private\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\n}\n\n\n\n\u30ed\u30ae\u30f3\u30b0\n\nMessagingTooHeavyProcessorProxyFactoryBean.java\n@Slf4j(topic = \"\u9001\u4fe1\u5074\")\npublic class MessagingTooHeavyProcessorProxyFactoryBean {\n  // ... //\n  @Override\n  public void afterPropertiesSet() {\n    // ... //\n    log.info(\"{}\", StringUtils.toString(el));\n    this.messageTemplate.convertAndSend(\"el.exchange\", null, el);\n  }\n  // ... //\n}\n\n\n\nELReceiver.java\n// Consumer\u5074\u3060\u3051\u5fc5\u8981\n@Profile(\"consumer\")\n@Slf4j(topic = \"\u53d7\u4fe1\u5074\")\npublic class ELReceiver {\n  // ... //\n  public void receive(ELExpression el) {\n    log.info(\"{}\", el);\n    this.elExecutor.execute(el);\n  }\n  // ... //\n}\n\n\n\nDefaultTooHeavyProcessor.java\n@Slf4j(topic = \"\u7d50\u679c\")\npublic class DefaultTooHeavyProcessor {\n  private static final FastDateFormat FORMATTER = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss.SSS\");\n\n  @Override\n  public void action(User user, Item item, Date date) {\n    log.info(\"{} actions to {} at {}!!\", StringUtils.toString(user), StringUtils.toString(item),\n      FORMATTER.format(date));\n  }\n\n  @Override\n  public void process(String key, Date date) {\n    log.info(\"process for {} at {}\", key, FORMATTER.format(date));\n  }\n}\n\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30d1\u30c6\u30a3\u8a2d\u5b9a\n\napplication.yaml\nspring:\n  jackson:\n    # \u898b\u3084\u3059\u3044\u3088\u3046\u306bJSON\u65e5\u6642\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n    date-format: yyyy-MM-dd HH:mm:ss.SSS\n\n---\nspring:\n  profiles: producer\nserver:\n    port: 8080\n\n---\nspring:\n  profiles: consumer\nserver:\n    port: 8181\n\n\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\n\u901a\u5e38\u8d77\u52d5\n\u6700\u521d\u306e\u91cd\u305f\u3044\u51e6\u7406\u3092\u305d\u306e\u307e\u307e\u5b9f\u884c\u3059\u308b\u3060\u3051\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002\n$ mvn spring-boot:run -Dspring.profiles.active=\"default,producer\"\n\n$ curl http://localhost:8080/process --silent | jq \".\"\n{\n  \"key\": \"39iYWmzDpn\",\n  \"date\": \"2017-07-03 00:05:31.211\"\n}\n\n\u8d77\u52d5\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u6b21\u306e\u30ed\u30b0\u304c\u51fa\u307e\u3059\u3002\n[\u7d50\u679c] process for 39iYWmzDpn at 2017-07-03 00:05:31.211\n\n\u3053\u308c\u3092\u6b21\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u3048\u3066MQ\u306eConsumer\u5074\u3067\u5b9f\u884c\u3055\u305b\u307e\u3059\u3002\n\nMQ\u7d4c\u7531\u306e\u51e6\u7406\u3092\u3055\u305b\u308b\u305f\u3081\u306e\u8d77\u52d5\n\nRabbitMQ\u30b5\u30fc\u30d0\u8d77\u52d5\n$ brew services start rabbitmq\n==> Successfully started `rabbitmq` (label: homebrew.mxcl.rabbitmq)\n\n\n\u7ba1\u7406\u753b\u9762\u78ba\u8a8d\nhttp://localhost:15672/\u306b\u30a2\u30af\u30bb\u30b9\n\n\nExchange\u3068Queue\u78ba\u8a8d\n\u307e\u3060\u4f55\u3082\u306a\u3044\u3002\n\n\n\nReceiver\u5074\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\n$ mvn spring-boot:run -Dspring.profiles.active=\"consumer,default\"\n\n\nExchange\u3068Queue\u78ba\u8a8d\nSpring-Boot\u306e\u5834\u5408\u306fRabbitAdmin\u306eBean\u767b\u9332\u306f\u81ea\u52d5\u3067\u3055\u308c\u308b\u3089\u3057\u3044\u3002\nExchange\n\nQueue\n\n\nConsumer\u5074\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\n\u6b21\u306fdefault\u3067\u306f\u306a\u304fmessaging\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067\u8d77\u52d5\u3059\u308b\u3002\n$ mvn spring-boot:run -Dspring.profiles.active=\"messaging,producer\"\n\n\n\u78ba\u8a8d\n$ curl http://localhost:8080/process --silent | jq \".\"\n{\n  \"key\": \"ar9VXblj5S\",\n  \"date\": \"2017-08-27 11:55:29.319\"\n}\n\n\n\u9001\u4fe1\u5074\u306e\u30ed\u30b0\n[\u9001\u4fe1\u5074] ELExpression:{\n  \"expression\" : \"@processor.process(#key, #date)\",\n  \"args\" : {\n    \"key\" : \"ar9VXblj5S\",\n    \"date\" : \"2017-08-27 11:55:29.319\"\n  }\n}\n\n\n\n\u53d7\u4fe1\u5074\u306e\u30ed\u30b0\n[\u53d7\u4fe1\u5074] ELExpression:{\n  \"expression\" : \"@processor.process(#key, #date)\",\n  \"args\" : {\n    \"key\" : \"ar9VXblj5S\",\n    \"date\" : \"2017-08-27 11:55:29.319\"\n  }\n}\n[\u7d50\u679c] process for ar9VXblj5S at 2017-08-27 11:55:29.319\n\n\n\n\u307e\u3068\u3081\nSpEL\u4fbf\u5229\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fGitHub\u306b\u4e0a\u3052\u3066\u307e\u3059\u3002\n# \u3084\u308a\u305f\u3044\u3053\u3068\n\n\u4eca\u56de\u306f\u3053\u3046\u3044\u3063\u305f\u51e6\u7406\u304c\u70b9\u5728\u3057\u3066\u3066\u3001\u4f8b\u3048\u3070\u3053\u308c\u3092\u5168\u3066MQ\u7d4c\u7531\u306b\u3059\u308b\u5834\u5408\u306e\u8a71\u3067\u3059\u3002\n\n```java\n@Autowired\nTooHeavyProcessor processor;\n\npublic void doSomething() {\n  // do something..\n\n  // too heavy process in async.\n  async(() -> processor.process(...));\n}\n```\n\n# \u524d\u6e96\u5099\n\n## Rabbit MQ\n\n[Installing on Homebrew](https://www.rabbitmq.com/install-homebrew.html)\n\n```bash\n$ brew update\n$ brew install rabbitmq\n$ brew services start rabbitmq \n```\n\n## Spring Boot\n\n[Start with Spring Initializr](http://start.spring.io/)\n\n- Lombok\n- AMQP\n- Web\n\n## Maven\n\n\u4f9d\u5b58\u6027\u3092\u8ffd\u52a0\u3002\n\n```xml:pom.xml\n<dependency>\n  <groupId>org.apache.commons</groupId>\n  <artifactId>commons-lang3</artifactId>\n  <version>3.5</version>\n</dependency>\n<dependency>\n  <groupId>org.apache.commons</groupId>\n  <artifactId>commons-collections4</artifactId>\n  <version>4.1</version>\n</dependency>\n```\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3002\n\n```xml:pom.xml\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-compiler-plugin</artifactId>\n  <configuration>\n    <compilerArgument>-parameters</compilerArgument>\n    <fork>true</fork>\n  </configuration>\n</plugin>\n```\n\n# \u5927\u307e\u304b\u306a\u5909\u66f4\u5185\u5bb9\n\n## \u51e6\u7406\u5185\u5bb9\n\n### \u5909\u66f4\u524d\n\n```\n[Heavy process]@any\n```\n\n### \u5909\u66f4\u5f8c\n\n```\n[Heavy process]@any -> (queue) -> [Heavy process]@consumer\n```\n\n# \u5404\u30af\u30e9\u30b9\n\n## \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\n```java:TooHeavyProcessor.java\npublic interface TooHeavyProcessor {\n\n  void action(User user, Item item, Date date);\n\n  void process(String key, Date date);\n}\n```\n\n## \u5b9f\u88c5\u30af\u30e9\u30b9\n\n### \u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\n\n\u3053\u306e\u30af\u30e9\u30b9\u3092MQ\u306eProducer\u5074\u3067\u52d5\u3044\u3066\u3044\u308b\u306e\u3067Consumer\u5074\u306b\u6301\u3063\u3066\u3044\u304d\u305f\u3044\u3002\n\n```java:DefaultTooHeavyProcessor.java\n@Slf4j(topic = \"\u7d50\u679c\")\npublic class DefaultTooHeavyProcessor implements TooHeavyProcessor {\n\n  @Override\n  public void action(User user, Item item, Date date) {\n    // \u5b9f\u884c\u7d50\u679c\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u30ed\u30ae\u30f3\u30b0\n    log.info(\"{} actions to {} at {}!!\", StringUtils.toString(user), StringUtils.toString(item),\n      FORMATTER.format(date));\n  }\n\n  @Override\n  public void process(String key, Date date) {\n    // \u5b9f\u884c\u7d50\u679c\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u30ed\u30ae\u30f3\u30b0\n    log.info(\"process for {} at {}\", key, FORMATTER.format(date));\n  }\n\n}\n```\n\n\u547c\u3073\u51fa\u3057\u81ea\u4f53\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u3057\u305f\u3044\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u601d\u3044\u3064\u3044\u305f\u306e\u304cSpEL(Spring Expression Language)\u3002\n\n```java\nprocessor.action(user, item, date);\n```\n\n\u3053\u308c\u3092\n\n```java:producer\nString el = \"@processor.action(#user, #item, #date)\";\nMap<String, Object> params = new LinkedHashMap<>();\nparams.add(\"user\", user);\nparams.add(\"item\", item);\nparams.add(\"date\", date);\n\nELExpression message = new ELExpression(el, params);\n\n// MQ\u306b\u9001\u4fe1\namqpMessageTemplate.convertAndSend(\"el.exchange\", null, message);\n```\n\n```java:consumer\npublic void receive(ELMessage message) {\n  // SpEL\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d1\u30fc\u30b9\n}\n```\n\n\u3068\u3044\u3046\u5f62\u306b\u3057\u305f\u3089Consumer\u5074\u3067\u5b9f\u884c\u53ef\u80fd\u306b\u306a\u308b\u306f\u305a\u3002\n\n### MQ\u9001\u4fe1\u30af\u30e9\u30b9\u5b9f\u88c5\n\n`TooHeavyProcessor`\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u969b\u306b`DefaultTooHeavyProcessor`\u3092\u5b9f\u884c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001SpEL\u3092\u4f5c\u3063\u3066\u305d\u308c\u3092MQ\u306b\u9001\u4fe1\u3059\u308b\u3088\u3046\u306a\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3002\n\n\u547c\u3073\u51fa\u3055\u308c\u305f\u969b\u306b\u52d5\u7684\u306a\u6319\u52d5\u304c\u6c42\u3081\u3089\u308c\u308b\u306e\u3067`Proxy`\u3067\u5b9f\u88c5\u3059\u308b\u3002\n`Proxy`\u4f5c\u6210\u65b9\u6cd5\u306f\u6b21\u306e\u3088\u3046\u306a\u65b9\u6cd5\u3002\n\n```java:Proxy\nimport org.springframework.util.ClassUtils;\n\nprivate String beanName = \"processor\";\nprivate String Class<?> type = TooHeavyProcessor.class;\n\n@Autowired\nprivate AmqpTemplate messageTemplate;\n\nProxy.newProxyInstance(ClassUtils.getDefaultClassLoader(),\n  new Class[] { this.type }, (bean, method, args) -> {\n    // SpEL\u751f\u6210\n    // beanName\u3068method\u3068args\u304b\u3089ELExpression\u3092\u751f\u6210\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30e1\u30bd\u30c3\u30c9\n    ELExpression el = SpelUtils.createELExpression(this.beanName, method, args);\n    // MQ\u306b\u9001\u4fe1\n    this.messageTemplate.convertAndSend(\"el.exchange\", null, el);\n    return null;\n  });\n```\n\u3053\u308c\u3092`Bean`\u767b\u9332\u3057\u305f\u3044\u306e\u3067\u3001`FactoryBean`\u3067\u751f\u6210\u3059\u308b\n\n```java:MessagingTooHeavyProcessorProxyFactoryBean.java\n@Component\npublic class MessagingTooHeavyProcessorProxyFactoryBean implements FactoryBean<TooHeavyProcessor>, InitializingBean {\n\n  private final String beanName = \"processor\";\n  private final Class<TooHeavyProcessor> type = TooHeavyProcessor.class;\n\n  private TooHeavyProcessor proxy;\n\n  @Autowired\n  private AmqpTemplate messageTemplate;\n\n  @Override\n  public void afterPropertiesSet() {\n    this.proxy = (TooHeavyProcessor) /* proxy\u4f5c\u6210 */;\n  }\n\n  @Override\n  public TooHeavyProcessor getObject() {\n    return this.proxy;\n  }\n\n  @Override\n  public Class<?> getObjectType() {\n    return this.type;\n  }\n\n  @Override\n  public boolean isSingleton() {\n    return true;\n  }\n}\n```\n\n## MQ Receiver\u30af\u30e9\u30b9\n\n```java:ELReceiver\n@Component\npublic class ELReceiver {\n\n  /** SpEL\u3092\u89e3\u6790\u3057\u3066\u5b9f\u884c\u3059\u308b\u30af\u30e9\u30b9 */\n  @Autowired\n  private ELExecutor elExecutor;\n\n  // Exchange\u3068Queue\u3092\u5b9a\u7fa9\u3057\u3066Rabbit\u5074\u306b\u7121\u3051\u308c\u3070\u4f5c\u6210\u3059\u308b\n  @RabbitListener(bindings = @QueueBinding(\n    value = @Queue(value = \"el.queue\", durable = \"true\"),\n    exchange = @Exchange(value = \"el.exchange\", type = ExchangeTypes.FANOUT, durable = \"true\")))\n  public void receive(ELExpression el) {\n    // SpEL\u3092\u89e3\u6790\u3057\u3066\u5b9f\u884c\n    this.elExecutor.execute(el);\n  }\n}\n```\n\nSpEL\u306e\u89e3\u6790\u3068\u5b9f\u884c\u306f[\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html)\u306b\u8a73\u3057\u304f\u8a18\u8f09\u304c\u3042\u308b\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n`StandardEvaluationContext`\u306e\u4f5c\u308a\u65b9\u3060\u3051\u3002\n\n```java:ELExecutor.java\n@Autowired\nprivate ApplicationContext appContext;\n\nprivate StandardEvaluationContext createContext(Map<String, Object> args) {\n  StandardEvaluationContext context = new StandardEvaluationContext();\n\n  // \u5909\u6570\u3092\u767b\u9332\n  args.forEach((key, value) -> context.setVariable(key, value));\n  // Bean\u540d\u304b\u3089Bean\u3092\u89e3\u6c7a\u3067\u304d\u308b\u3088\u3046\u306bBeanResolver\u3092\u767b\u9332\n  context.setBeanResolver(\n    (_self, beanName) -> this.appContext.getBean(beanName));\n\n  return context;\n}\n```\n\n\u3053\u306e\u6642\u3001`MessagingTooHeavyProcessorProxyFactoryBean`\u3067Bean\u540d\u3092`processor`\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3061\u3083\u3093\u3068Bean\u540d\u3092\u5408\u308f\u305b\u308b\u3002\n\u305d\u308c\u3068\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067Bean\u540d\u3092\u5207\u308a\u66ff\u3048\u305f\u3044\u304b\u3089\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u3057\u3066\u304a\u304f\u3002\n\n```java:MessagingTooHeavyProcessorProxyFactoryBean.java\n// \"messaging\"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u6642\u306e\u307fBean\u767b\u9332\u3059\u308b\n@Profile(\"messaging\")\n@Component(\"processor\")\npublic class MessagingTooHeavyProcessorProxyFactoryBean\n```\n\n```java:DefaultTooHeavyProcessor.java\n// \"default\"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u6642\u306e\u307fBean\u767b\u9332\u3059\u308b\n@Profile(\"default\")\n@Component(\"processor\")\npublic class DefaultTooHeavyProcessor\n```\n\n# \u52d5\u4f5c\u78ba\u8a8d\u6e96\u5099\n\n## Web API\n\n\u30c8\u30ea\u30ac\u30fc\u7528\u306bWeb API\u306e\u53e3\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3002\n\n```java:ELDemoController.java\n// Producer\u5074\u3060\u3051\u5fc5\u8981\n@Profile(\"producer\")\n@RestController\npublic class ELDemoController {\n\n  @Autowired\n  private TooHeavyProcessor processor;\n\n  @GetMapping(\"/action\")\n  public ActionResult action() {\n    User user = this.randomUser();\n    Item item = this.randomItem();\n    Date date = this.randomDate();\n\n    this.processor.action(user, item, this.randomDate());\n\n    return new ActionResult(user, item, date);\n  }\n\n  @GetMapping(\"/process\")\n  public ProcessResult process() {\n    String key = RandomStringUtils.randomAlphanumeric(10);\n    Date date = this.randomDate();\n\n    this.processor.process(key, date);\n\n    return new ProcessResult(key, date);\n  }\n\n  // private\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\n}\n```\n\n## \u30ed\u30ae\u30f3\u30b0\n\n```java:MessagingTooHeavyProcessorProxyFactoryBean.java\n@Slf4j(topic = \"\u9001\u4fe1\u5074\")\npublic class MessagingTooHeavyProcessorProxyFactoryBean {\n  // ... //\n  @Override\n  public void afterPropertiesSet() {\n    // ... //\n    log.info(\"{}\", StringUtils.toString(el));\n    this.messageTemplate.convertAndSend(\"el.exchange\", null, el);\n  }\n  // ... //\n}\n```\n\n```java:ELReceiver.java\n// Consumer\u5074\u3060\u3051\u5fc5\u8981\n@Profile(\"consumer\")\n@Slf4j(topic = \"\u53d7\u4fe1\u5074\")\npublic class ELReceiver {\n  // ... //\n  public void receive(ELExpression el) {\n    log.info(\"{}\", el);\n    this.elExecutor.execute(el);\n  }\n  // ... //\n}\n```\n\n```java:DefaultTooHeavyProcessor.java\n@Slf4j(topic = \"\u7d50\u679c\")\npublic class DefaultTooHeavyProcessor {\n  private static final FastDateFormat FORMATTER = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss.SSS\");\n\n  @Override\n  public void action(User user, Item item, Date date) {\n    log.info(\"{} actions to {} at {}!!\", StringUtils.toString(user), StringUtils.toString(item),\n      FORMATTER.format(date));\n  }\n\n  @Override\n  public void process(String key, Date date) {\n    log.info(\"process for {} at {}\", key, FORMATTER.format(date));\n  }\n}\n```\n\n## \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30d1\u30c6\u30a3\u8a2d\u5b9a\n\n```yaml:application.yaml\nspring:\n  jackson:\n    # \u898b\u3084\u3059\u3044\u3088\u3046\u306bJSON\u65e5\u6642\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n    date-format: yyyy-MM-dd HH:mm:ss.SSS\n\n---\nspring:\n  profiles: producer\nserver:\n    port: 8080\n\n---\nspring:\n  profiles: consumer\nserver:\n    port: 8181\n\n```\n\n# \u52d5\u4f5c\u78ba\u8a8d\n\n## \u901a\u5e38\u8d77\u52d5\n\n\u6700\u521d\u306e\u91cd\u305f\u3044\u51e6\u7406\u3092\u305d\u306e\u307e\u307e\u5b9f\u884c\u3059\u308b\u3060\u3051\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n```bash\n$ mvn spring-boot:run -Dspring.profiles.active=\"default,producer\"\n```\n\n```bash\n$ curl http://localhost:8080/process --silent | jq \".\"\n{\n  \"key\": \"39iYWmzDpn\",\n  \"date\": \"2017-07-03 00:05:31.211\"\n}\n```\n\n\u8d77\u52d5\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u6b21\u306e\u30ed\u30b0\u304c\u51fa\u307e\u3059\u3002\n\n```\n[\u7d50\u679c] process for 39iYWmzDpn at 2017-07-03 00:05:31.211\n```\n\n\u3053\u308c\u3092\u6b21\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u3048\u3066MQ\u306eConsumer\u5074\u3067\u5b9f\u884c\u3055\u305b\u307e\u3059\u3002\n\n## MQ\u7d4c\u7531\u306e\u51e6\u7406\u3092\u3055\u305b\u308b\u305f\u3081\u306e\u8d77\u52d5\n\n### RabbitMQ\u30b5\u30fc\u30d0\u8d77\u52d5\n\n```bash\n$ brew services start rabbitmq\n==> Successfully started `rabbitmq` (label: homebrew.mxcl.rabbitmq)\n```\n\n### \u7ba1\u7406\u753b\u9762\u78ba\u8a8d\n\n`http://localhost:15672/`\u306b\u30a2\u30af\u30bb\u30b9\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-05 17.20.28.png](https://qiita-image-store.s3.amazonaws.com/0/66760/9ee00f5b-9052-5410-48aa-6d5c340372da.png)\n\n#### Exchange\u3068Queue\u78ba\u8a8d\n\n\u307e\u3060\u4f55\u3082\u306a\u3044\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-05 17.22.51.png](https://qiita-image-store.s3.amazonaws.com/0/66760/1878568d-4808-132e-af7d-cb2e88162935.png)\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-05 17.24.13.png](https://qiita-image-store.s3.amazonaws.com/0/66760/62373863-3b06-9a58-21b3-9aaf44dc1613.png)\n\n### Receiver\u5074\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\n\n```bash\n$ mvn spring-boot:run -Dspring.profiles.active=\"consumer,default\"\n```\n\n#### Exchange\u3068Queue\u78ba\u8a8d\n\nSpring-Boot\u306e\u5834\u5408\u306f`RabbitAdmin`\u306eBean\u767b\u9332\u306f\u81ea\u52d5\u3067\u3055\u308c\u308b\u3089\u3057\u3044\u3002\n\nExchange\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-05 17.38.00.png](https://qiita-image-store.s3.amazonaws.com/0/66760/46e20147-6d28-c3ac-837d-a4e89f10734d.png)\n\nQueue\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-05 17.37.04.png](https://qiita-image-store.s3.amazonaws.com/0/66760/7fae57df-b343-0288-442d-e9cac4006f18.png)\n\n### Consumer\u5074\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\n\n\u6b21\u306f`default`\u3067\u306f\u306a\u304f`messaging`\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067\u8d77\u52d5\u3059\u308b\u3002\n\n```bash\n$ mvn spring-boot:run -Dspring.profiles.active=\"messaging,producer\"\n```\n\n## \u78ba\u8a8d\n\n```bash\n$ curl http://localhost:8080/process --silent | jq \".\"\n{\n  \"key\": \"ar9VXblj5S\",\n  \"date\": \"2017-08-27 11:55:29.319\"\n}\n```\n\n```:\u9001\u4fe1\u5074\u306e\u30ed\u30b0\n[\u9001\u4fe1\u5074] ELExpression:{\n  \"expression\" : \"@processor.process(#key, #date)\",\n  \"args\" : {\n    \"key\" : \"ar9VXblj5S\",\n    \"date\" : \"2017-08-27 11:55:29.319\"\n  }\n}\n```\n\n```:\u53d7\u4fe1\u5074\u306e\u30ed\u30b0\n[\u53d7\u4fe1\u5074] ELExpression:{\n  \"expression\" : \"@processor.process(#key, #date)\",\n  \"args\" : {\n    \"key\" : \"ar9VXblj5S\",\n    \"date\" : \"2017-08-27 11:55:29.319\"\n  }\n}\n[\u7d50\u679c] process for ar9VXblj5S at 2017-08-27 11:55:29.319\n```\n\n# \u307e\u3068\u3081\n\nSpEL\u4fbf\u5229\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f[GitHub](https://github.com/uich/demo-el-messaging)\u306b\u4e0a\u3052\u3066\u307e\u3059\u3002\n", "tags": ["RabbitMQ3.6.6", "spring4.3.6", "Java1.8.0"]}