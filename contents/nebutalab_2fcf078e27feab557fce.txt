{"tags": ["rust0.5"], "context": " More than 1 year has passed since last update.\u6ce8\u91c8\uff1a\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306fRust 0.5\u3067\u66f8\u304b\u308c\u305f\u3082\u306e\u3067\u3001\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\uff081.3\uff09\u3067\u306f\u5168\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\nRust\u3067\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3002Generics\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\u914d\u5217\u306e\u8981\u7d20\u304cOrd\u30c8\u30ec\u30a4\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u3089\u3070\u4f55\u3067\u3082\u30bd\u30fc\u30c8\u3067\u304d\u308b\u3002\n\nquicksort.rs\nuse cmp::Ord;\n\nfn partition<T: Ord>(ns: &mut [T], l: uint, r: uint) -> uint {\n  let p = &mut ns[l];\n  let mut i = l + 1;\n  for uint::range(l+1,r) |j| {\n    if ns[j] < *p {\n      ns[i] <-> ns[j];\n      i += 1;\n    }\n  }\n  ns[l] <-> ns[i-1];\n  i - 1\n}\n\nfn quicksort<T: Ord>(ns: &mut [T], l: uint, r: uint) -> uint {\n  if r-l <= 1{\n    0\n  }else{\n    let p = partition(ns,l,r);\n    let a = quicksort(ns,l,p);\n    let b = quicksort(ns,p+1,r);\n    a + b + (r-l-1)\n  }\n}\n\nfn main(){\n  let nums: ~mut [int] = vec::to_mut(~[1,3,2,5,10,4,6,7,8,9]);\n  print_vector(nums);\n  io::println(\"\");\n  quicksort(nums,0,vec::len(nums));\n  print_vector(nums);\n}\n\nfn print_vector(ns: &[int]) {\n  for ns.each |&n| {\n    io::print(fmt!(\"%d \",n));\n  }\n  io::println(\"\");\n}\n\n\n\n\u30b9\u30ef\u30c3\u30d7\u306e\u6f14\u7b97\u5b50 <-> \u306f\u8a00\u8a9e\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\u6700\u521d\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3059\u307e\u3067\u3001Mutable/immutable\u306e\u914d\u5217\u306e\u53d7\u3051\u6e21\u3057\u3084\u30dd\u30a4\u30f3\u30bf\u306e\u7a2e\u985e\u306e\u4e0d\u4e00\u81f4\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u7d50\u69cb\u6012\u3089\u308c\u3001\u3044\u308d\u3044\u308d\u3044\u3058\u304f\u3063\u3066\u5408\u308f\u305b\u305f\u304c\u7d50\u69cb\u96e3\u3057\u3044\u3002Haskeller\u7684\u30e1\u30f3\u30bf\u30ea\u30c6\u30a3\u30fc\u304b\u3089\u8a00\u3048\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u53b3\u3057\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u305d\u308c\u3060\u3051\u5b9f\u884c\u6642\u306b\u5b89\u5168\u3060\u3068\u671f\u5f85\u3067\u304d\u308b\u3002\n**\u6ce8\u91c8\uff1a\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306fRust 0.5\u3067\u66f8\u304b\u308c\u305f\u3082\u306e\u3067\u3001\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\uff081.3\uff09\u3067\u306f\u5168\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044**\n\nRust\u3067\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3002Generics\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\u914d\u5217\u306e\u8981\u7d20\u304cOrd\u30c8\u30ec\u30a4\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u3089\u3070\u4f55\u3067\u3082\u30bd\u30fc\u30c8\u3067\u304d\u308b\u3002\n\n```rust:quicksort.rs\nuse cmp::Ord;\n\nfn partition<T: Ord>(ns: &mut [T], l: uint, r: uint) -> uint {\n  let p = &mut ns[l];\n  let mut i = l + 1;\n  for uint::range(l+1,r) |j| {\n    if ns[j] < *p {\n      ns[i] <-> ns[j];\n      i += 1;\n    }\n  }\n  ns[l] <-> ns[i-1];\n  i - 1\n}\n\nfn quicksort<T: Ord>(ns: &mut [T], l: uint, r: uint) -> uint {\n  if r-l <= 1{\n    0\n  }else{\n    let p = partition(ns,l,r);\n    let a = quicksort(ns,l,p);\n    let b = quicksort(ns,p+1,r);\n    a + b + (r-l-1)\n  }\n}\n\nfn main(){\n  let nums: ~mut [int] = vec::to_mut(~[1,3,2,5,10,4,6,7,8,9]);\n  print_vector(nums);\n  io::println(\"\");\n  quicksort(nums,0,vec::len(nums));\n  print_vector(nums);\n}\n\nfn print_vector(ns: &[int]) {\n  for ns.each |&n| {\n    io::print(fmt!(\"%d \",n));\n  }\n  io::println(\"\");\n}\n\n```\n\n\u30b9\u30ef\u30c3\u30d7\u306e\u6f14\u7b97\u5b50 <-> \u306f\u8a00\u8a9e\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\u6700\u521d\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3059\u307e\u3067\u3001Mutable/immutable\u306e\u914d\u5217\u306e\u53d7\u3051\u6e21\u3057\u3084\u30dd\u30a4\u30f3\u30bf\u306e\u7a2e\u985e\u306e\u4e0d\u4e00\u81f4\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u7d50\u69cb\u6012\u3089\u308c\u3001\u3044\u308d\u3044\u308d\u3044\u3058\u304f\u3063\u3066\u5408\u308f\u305b\u305f\u304c\u7d50\u69cb\u96e3\u3057\u3044\u3002Haskeller\u7684\u30e1\u30f3\u30bf\u30ea\u30c6\u30a3\u30fc\u304b\u3089\u8a00\u3048\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u53b3\u3057\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u305d\u308c\u3060\u3051\u5b9f\u884c\u6642\u306b\u5b89\u5168\u3060\u3068\u671f\u5f85\u3067\u304d\u308b\u3002\n"}