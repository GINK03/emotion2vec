{"context": "\n\nPython + dlib\u3067\u9854\u691c\u51fa\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ndlib\u3092\u5165\u308c\u308b\u524d\u306bCMAKE\u3001Boost\u3001Boost Python\u3001G++\u4ed6\u3044\u308d\u3044\u308d\u5fc5\u8981\nUbuntu\u3067OpenCV\u3068dlib\u3092\u5c0e\u5165\ndlib\u3092\u7528\u3044\u305fselective search\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u5165\u51fa\u529b\u306bOpenCV\u30fbscikit-image\u3042\u305f\u308a\u3092\u5165\u308c\u308b\n\u4eca\u56de\u306fOpenCV\u3092\u5229\u7528\n\n\u30b3\u30fc\u30c9\ndlib\u3067\u306f\u9854\u3063\u307d\u3055\u306e\u30b9\u30b3\u30a2\u3092\u51fa\u305b\u308b\n\u591a\u5c11\u50be\u3044\u3066\u3044\u3066\u3082\u691c\u51fa\u3057\u3066\u304f\u308c\u308b\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u3001\u56de\u8ee2\u3055\u305b\u306a\u304c\u3089\u691c\u51fa\u3059\u308b\u5834\u5408\u3067\u3082\u56de\u8ee2\u89d2\u306f45\u5ea6\u305a\u3064\u304f\u3089\u3044\u3067\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\n\u3042\u308b\u7a0b\u5ea6\u4f4e\u3044\u30b9\u30b3\u30a2\uff08CUT_OFF\u306e\u5024\uff09\u3067\u30b9\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u3092\u304b\u3051\u3066\u3001\u7d5e\u308a\u8fbc\u3093\u3060\u30a8\u30ea\u30a2\u3092\u56de\u8ee2\u3055\u305b\u306a\u304c\u3089\u30b9\u30b3\u30a2\u304c\u9ad8\u304f\u306a\u308b\u3088\u3046\u306b\u89d2\u5ea6\u3092\u8abf\u6574\u3057\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3068\u601d\u3063\u3066\u8a66\u3057\u305f\u3051\u3069\u3001\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u308b\n\u691c\u51fa\u7d50\u679c\u306b\u51fa\u3066\u304f\u308btype\u306f\u691c\u51fa\u5668\u306e\u7a2e\u985e\uff08\u9854\u304c\u6b63\u9762\u304b\u6a2a\u5411\u304d\u304b\u3068\u304b\uff1f\uff09\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3089\u3057\u3044\n\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u305f\u3068\u3053\u308d\u306f\u3001\u691c\u51fa\u3057\u305f\u9854\u304b\u308968\u306e\u7279\u5fb4\u70b9\u3092\u53d6\u308a\u51fa\u3057\u3066\u304f\u308c\u308b\n\u3069\u306e\u70b9\u304c\u76ee\u30fb\u9f3b\u30fb\u8f2a\u90ed\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3068\u304b\u308f\u304b\u308b\u306a\u3089\u3001\u3082\u3046\u5c11\u3057\u6539\u826f\u3067\u304d\u305d\u3046\n\ndetect_face.py\n# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os, sys, imghdr, shutil, dlib, cv2\n\nCWD = os.getcwd()\nDIR_ORIGIN = CWD + '/images/'\nDIR_DESTINATION = CWD + '/faces/'\nCUT_OFF = -0.1\n\ndetector = dlib.get_frontal_face_detector()\n# predictor = dlib.shape_predictor('./shape_predictor_68_face_landmarks.dat')\n\ndef getFaces(path_full):\n    results = []\n    image = cv2.imread(path_full)\n    height, width = image.shape[:2]\n    rects, scores, types = detector.run(image, 1, CUT_OFF)\n    for i, rect in enumerate(rects):\n        top, bottom, left, right = rect.top(), rect.bottom(), rect.left(), rect.right()\n        if min(top, height - bottom - 1, left, width - right - 1) < 0:\n            continue\n        results.append({\n            'image'       : image[top : bottom, left : right],\n            'score'       : scores[i],\n            'orientation' : types[i]\n        })\n        # shape = predictor(image, rect)\n        # for i in range(shape.num_parts):\n        #     print(shape.part(i))\n    return results\n\ncount = 1\nfor path, subdirs, files in os.walk(DIR_ORIGIN):\n    for name in files:\n            path_full = os.path.join(path, name)\n            if imghdr.what(path_full) in ['jpeg']:\n                faces = getFaces(path_full)\n                for face in faces:\n                    file_name = '{destination_dir}/{score}_{type}_{count}_dlib.jpg'.format(\n                        destination_dir = DIR_DESTINATION,\n                        score = face['score'],\n                        type = int(face['orientation']),\n                        count = count\n                    )\n                    cv2.imwrite(file_name, face['image'], [cv2.IMWRITE_JPEG_QUALITY, 100])\n                    count += 1\n                print(path_full)\n\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8\nchainer\u306b\u3088\u308b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067AV\u5973\u512a\u306e\u985e\u4f3c\u753b\u50cf\u691c\u7d22\u30b5\u30fc\u30d3\u30b9\u3092\u3064\u304f\u3063\u305f\u30ce\u30a6\u30cf\u30a6\u3092\u516c\u958b\u3059\u308b\nOpenCV\u3068dlib\u3092\u9023\u643a\u3057\u305f\u9854\u691c\u51fa\u30d7\u30ed\u30b0\u30e9\u30e0\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea dlib\nOpenFace 0.2.0: Higher accuracy and halved execution time\nOpenCV\u3068Dlib\u3068OpenFace\u3067\u9854\u691c\u51fa\u3092\u3057\u305f\u77e5\u898b\u307e\u3068\u3081\n\u6a5f\u68b0\u5b66\u7fd2\u3067\u7528\u3044\u308b\u9854\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e00\u4f5c\u308a\u65b9\uff08\uff13\uff1a\u5019\u88dc\u753b\u50cf\u304b\u3089\u9854\u753b\u50cf\u751f\u6210\u305d\u306e\uff11\uff09\n# Python + dlib\u3067\u9854\u691c\u51fa\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\ndlib\u3092\u5165\u308c\u308b\u524d\u306bCMAKE\u3001Boost\u3001Boost Python\u3001G++\u4ed6\u3044\u308d\u3044\u308d\u5fc5\u8981\n\n[Ubuntu\u3067OpenCV\u3068dlib\u3092\u5c0e\u5165](http://qiita.com/nanto710/items/aac934896d40c6b8cf0b)\n\n[dlib\u3092\u7528\u3044\u305fselective search](http://kivantium.hateblo.jp/entry/2015/07/25/184346)\n\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u5165\u51fa\u529b\u306bOpenCV\u30fbscikit-image\u3042\u305f\u308a\u3092\u5165\u308c\u308b\n\u4eca\u56de\u306fOpenCV\u3092\u5229\u7528\n\n## \u30b3\u30fc\u30c9\n\ndlib\u3067\u306f\u9854\u3063\u307d\u3055\u306e\u30b9\u30b3\u30a2\u3092\u51fa\u305b\u308b\n\u591a\u5c11\u50be\u3044\u3066\u3044\u3066\u3082\u691c\u51fa\u3057\u3066\u304f\u308c\u308b\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u3001\u56de\u8ee2\u3055\u305b\u306a\u304c\u3089\u691c\u51fa\u3059\u308b\u5834\u5408\u3067\u3082\u56de\u8ee2\u89d2\u306f45\u5ea6\u305a\u3064\u304f\u3089\u3044\u3067\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\n\u3042\u308b\u7a0b\u5ea6\u4f4e\u3044\u30b9\u30b3\u30a2\uff08CUT_OFF\u306e\u5024\uff09\u3067\u30b9\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u3092\u304b\u3051\u3066\u3001\u7d5e\u308a\u8fbc\u3093\u3060\u30a8\u30ea\u30a2\u3092\u56de\u8ee2\u3055\u305b\u306a\u304c\u3089\u30b9\u30b3\u30a2\u304c\u9ad8\u304f\u306a\u308b\u3088\u3046\u306b\u89d2\u5ea6\u3092\u8abf\u6574\u3057\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3068\u601d\u3063\u3066\u8a66\u3057\u305f\u3051\u3069\u3001\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u308b\n\u691c\u51fa\u7d50\u679c\u306b\u51fa\u3066\u304f\u308btype\u306f\u691c\u51fa\u5668\u306e\u7a2e\u985e\uff08\u9854\u304c\u6b63\u9762\u304b\u6a2a\u5411\u304d\u304b\u3068\u304b\uff1f\uff09\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3089\u3057\u3044\n\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u305f\u3068\u3053\u308d\u306f\u3001\u691c\u51fa\u3057\u305f\u9854\u304b\u308968\u306e\u7279\u5fb4\u70b9\u3092\u53d6\u308a\u51fa\u3057\u3066\u304f\u308c\u308b\n\u3069\u306e\u70b9\u304c\u76ee\u30fb\u9f3b\u30fb\u8f2a\u90ed\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3068\u304b\u308f\u304b\u308b\u306a\u3089\u3001\u3082\u3046\u5c11\u3057\u6539\u826f\u3067\u304d\u305d\u3046\n\n```python:detect_face.py\n# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os, sys, imghdr, shutil, dlib, cv2\n\nCWD = os.getcwd()\nDIR_ORIGIN = CWD + '/images/'\nDIR_DESTINATION = CWD + '/faces/'\nCUT_OFF = -0.1\n\ndetector = dlib.get_frontal_face_detector()\n# predictor = dlib.shape_predictor('./shape_predictor_68_face_landmarks.dat')\n\ndef getFaces(path_full):\n    results = []\n    image = cv2.imread(path_full)\n    height, width = image.shape[:2]\n    rects, scores, types = detector.run(image, 1, CUT_OFF)\n    for i, rect in enumerate(rects):\n        top, bottom, left, right = rect.top(), rect.bottom(), rect.left(), rect.right()\n        if min(top, height - bottom - 1, left, width - right - 1) < 0:\n            continue\n        results.append({\n            'image'       : image[top : bottom, left : right],\n            'score'       : scores[i],\n            'orientation' : types[i]\n        })\n        # shape = predictor(image, rect)\n        # for i in range(shape.num_parts):\n        #     print(shape.part(i))\n    return results\n\ncount = 1\nfor path, subdirs, files in os.walk(DIR_ORIGIN):\n    for name in files:\n            path_full = os.path.join(path, name)\n            if imghdr.what(path_full) in ['jpeg']:\n                faces = getFaces(path_full)\n                for face in faces:\n                    file_name = '{destination_dir}/{score}_{type}_{count}_dlib.jpg'.format(\n                        destination_dir = DIR_DESTINATION,\n                        score = face['score'],\n                        type = int(face['orientation']),\n                        count = count\n                    )\n                    cv2.imwrite(file_name, face['image'], [cv2.IMWRITE_JPEG_QUALITY, 100])\n                    count += 1\n                print(path_full)\n```\n\n## \u53c2\u8003\u30b5\u30a4\u30c8\n\n[chainer\u306b\u3088\u308b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067AV\u5973\u512a\u306e\u985e\u4f3c\u753b\u50cf\u691c\u7d22\u30b5\u30fc\u30d3\u30b9\u3092\u3064\u304f\u3063\u305f\u30ce\u30a6\u30cf\u30a6\u3092\u516c\u958b\u3059\u308b](http://qiita.com/xolmon/items/0b82f4861cf93fd28e33)\n\n[OpenCV\u3068dlib\u3092\u9023\u643a\u3057\u305f\u9854\u691c\u51fa\u30d7\u30ed\u30b0\u30e9\u30e0](http://kivantium.hateblo.jp/entry/2015/04/05/223841)\n\n[\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea dlib](http://qiita.com/nonbiri15/items/9561c8194ba0b2041bd0)\n\n[OpenFace 0.2.0: Higher accuracy and halved execution time](https://bamos.github.io/2016/01/19/openface-0.2.0/)\n\n[OpenCV\u3068Dlib\u3068OpenFace\u3067\u9854\u691c\u51fa\u3092\u3057\u305f\u77e5\u898b\u307e\u3068\u3081](http://vaaaaaanquish.hatenablog.com/entry/2016/06/28/004811)\n\n[\u6a5f\u68b0\u5b66\u7fd2\u3067\u7528\u3044\u308b\u9854\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e00\u4f5c\u308a\u65b9\uff08\uff13\uff1a\u5019\u88dc\u753b\u50cf\u304b\u3089\u9854\u753b\u50cf\u751f\u6210\u305d\u306e\uff11\uff09](http://qiita.com/ligerbolt/items/2bfb28b5cd1eaf0fa816)\n", "tags": ["dlib", "Python"]}