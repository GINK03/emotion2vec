{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c4\u7ae0: \u5f62\u614b\u7d20\u89e3\u6790\n\n\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092MeCab\u3092\u4f7f\u3063\u3066\u5f62\u614b\u7d20\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.mecab\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\u306a\u304a\uff0c\u554f\u984c37, 38, 39\u306fmatplotlib\u3082\u3057\u304f\u306fGnuplot\u3092\u7528\u3044\u308b\u3068\u3088\u3044\uff0e\n\n\n35. \u540d\u8a5e\u306e\u9023\u63a5\n\n\u540d\u8a5e\u306e\u9023\u63a5\uff08\u9023\u7d9a\u3057\u3066\u51fa\u73fe\u3059\u308b\u540d\u8a5e\uff09\u3092\u6700\u9577\u4e00\u81f4\u3067\u62bd\u51fa\u305b\u3088\uff0e\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport MeCab\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.mecab'\n\n\ndef parse_neko():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u5f62\u614b\u7d20\u89e3\u6790\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066neko.txt.mecab\u306b\u4fdd\u5b58\u3059\u308b\n    '''\n\n    with open(fname) as data_file, \\\n            open(fname_parsed, mode='w') as out_file:\n\n        mecab = MeCab.Tagger()\n        out_file.write(mecab.parse(data_file.read()))\n\n\ndef neco_lines():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5404\u5f62\u614b\u7d20\u3092\n    \u30fb\u8868\u5c64\u5f62\uff08surface\uff09\n    \u30fb\u57fa\u672c\u5f62\uff08base\uff09\n    \u30fb\u54c1\u8a5e\uff08pos\uff09\n    \u30fb\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\n    \u306e4\u3064\u3092\u30ad\u30fc\u3068\u3059\u308b\u8f9e\u66f8\u306b\u683c\u7d0d\u3057\u30011\u6587\u305a\u3064\u3001\u3053\u306e\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\n\n    \u623b\u308a\u5024\uff1a\n    1\u6587\u306e\u5404\u5f62\u614b\u7d20\u3092\u8f9e\u66f8\u5316\u3057\u305f\u30ea\u30b9\u30c8\n    '''\n    with open(fname_parsed) as file_parsed:\n\n        morphemes = []\n        for line in file_parsed:\n\n            # \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n            cols = line.split('\\t')\n            if(len(cols) < 2):\n                raise StopIteration     # \u533a\u5207\u308a\u304c\u306a\u3051\u308c\u3070\u7d42\u4e86\n            res_cols = cols[1].split(',')\n\n            # \u8f9e\u66f8\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n            morpheme = {\n                'surface': cols[0],\n                'base': res_cols[6],\n                'pos': res_cols[0],\n                'pos1': res_cols[1]\n            }\n            morphemes.append(morpheme)\n\n            # \u54c1\u8a5e\u7d30\u5206\u985e1\u304c'\u53e5\u70b9'\u306a\u3089\u6587\u306e\u7d42\u308f\u308a\u3068\u5224\u5b9a\n            if res_cols[1] == '\u53e5\u70b9':\n                yield morphemes\n                morphemes = []\n\n\n# \u5f62\u614b\u7d20\u89e3\u6790\nparse_neko()\n\n# 1\u6587\u305a\u3064\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u62bd\u51fa\nlist_series_noun = []       # \u51fa\u73fe\u9806\u30ea\u30b9\u30c8\u3001\u91cd\u8907\u3042\u308a\nfor line in neco_lines():\n    nouns = []      # \u898b\u3064\u3051\u305f\u540d\u8a5e\u306e\u30ea\u30b9\u30c8\n    for morpheme in line:\n\n        # \u540d\u8a5e\u306a\u3089nouns\u306b\u8ffd\u52a0\n        if morpheme['pos'] == '\u540d\u8a5e':\n            nouns.append(morpheme['surface'])\n\n        # \u540d\u8a5e\u4ee5\u5916\u306a\u3089\u3001\u305d\u308c\u307e\u3067\u306e\u9023\u7d9a\u3059\u308b\u540d\u8a5e\u3092list_series_noun\u306b\u8ffd\u52a0\n        else:\n            if len(nouns) > 1:\n                list_series_noun.append(\"\".join(nouns))\n            nouns = []\n\n    # \u540d\u8a5e\u3067\u7d42\u308f\u308b\u884c\u304c\u3042\u3063\u305f\u5834\u5408\u306f\u3001\u6700\u5f8c\u306e\u9023\u7d9a\u3059\u308b\u540d\u8a5e\u3092list_series_noun\u306b\u8ffd\u52a0\n    if len(nouns) > 1:\n        list_series_noun.append(\"\".join(nouns))\n\n# \u91cd\u8907\u9664\u53bb\nseries_noun = set(list_series_noun)\n\n# \u78ba\u8a8d\u3057\u3084\u3059\u3044\u3088\u3046list_series_noun\u3092\u4f7f\u3063\u3066\u51fa\u73fe\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\nprint(sorted(series_noun, key=list_series_noun.index))\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\u9577\u3044\u306e\u3067\u5148\u982d\u90e8\u5206\u306e\u307f\u3067\u3059\u3002\n\n\u7aef\u672b\uff08\u5148\u982d\u90e8\u5206\uff09\n['\u4eba\u9593\u4e2d', '\u4e00\u756a\u7370\u60aa', '\u6642\u5999', '\u4e00\u6bdb', '\u305d\u306e\u5f8c\u732b', '\u3053\u3093\u306a\u7247\u8f2a', '\u4e00\u5ea6', '\u3077\u3046\u3077\u3046\u3068\u7159', '\u90b8\u5185', '\u4e09\u6bdb', '\u6696\u304b\u305d\u3046', '\u66f8\u751f\u4ee5\u5916', '\u518d\u3073\u304a\u3055\u3093', '\u540c\u3058\u4e8b', '\u56db\u4e94\u904d', '\u3053\u306e\u9593\u304a\u3055\u3093', '\u4e09\u99ac', '\u5fa1\u53f0\u6240', '\u3089\u5185', '\u307e\u307e\u5965', '\u4f4f\u5bb6', '\u304e\u308a\u307b\u3068\u3093\u3069', '\u52c9\u5f37\u5bb6', '\u52e4\u52c9\u5bb6', '\u4e8c\u4e09\u30da\u30fc\u30b8', '\u4e3b\u4eba\u4ee5\u5916', '\u9650\u308a\u543e\u8f29', '\u671d\u4e3b\u4eba', '\u305d\u306e\u5f8c\u3044\u308d\u3044\u308d\u7d4c\u9a13', '\u4e00\u756a\u5fc3\u6301', '\u4e8c\u4eba', '\u4e00\u3064\u5e8a', '\u4e00\u4eba', '\u6700\u5f8c\u5927\u5909', '\u2014\u2014\u3053\u3068', '\u2014\u2014\u732b', '\u795e\u7d4c\u80c3\u5f31\u6027', '\u5c3b\u307a\u305f\u3092\u3072\u3069\u304f', '\u8a00\u8a9e\u540c\u65ad', '\u5bb6\u5185\u7dcf\u304c\u304b\u308a', '\u7b4b\u5411', '\u767d\u541b', '\u5ea6\u6bce', '\u5148\u65e5\u7389', '\u56db\u758b', '\u4e09\u65e5\u76ee', '\u732b\u65cf', '\u5b8c\u304f\u3057', '\u5bb6\u65cf\u7684\u751f\u6d3b',\n\n\n\u7d50\u679c\u5168\u4f53\u306fGitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30ed\u30b8\u30c3\u30af\u306b\u3064\u3044\u3066\nparse_neko()\u3068neco_lines()\u306f\u524d\u554f\u3068\u540c\u3058\u3067\u3059\u3002\n\u4eca\u56de\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u5c11\u3057\u591a\u3081\u306b\u3044\u308c\u3066\u307f\u307e\u3057\u305f\u3002\u540d\u8a5e\u304c\u7d9a\u304f\u9593\u306fnouns\u306b\u8ffd\u52a0\u3057\u3066\u3044\u3063\u3066\u3001\u540d\u8a5e\u4ee5\u5916\u304c\u304d\u305f\u6642\u306b\u305d\u308c\u307e\u3067\u306b\u305f\u3081\u305fnouns\u3092\u9023\u7d50\u3057\u3066list_series_noun\u306b\u8ffd\u52a0\u3059\u308b\u6d41\u308c\u3067\u3059\u3002\n\u306a\u304a\u3001\u3053\u308c\u3060\u3068\u6700\u5f8c\u304c\u540d\u8a5e\u3067\u7d42\u308f\u3063\u305f\u5834\u5408\u306blist_series_noun\u306b\u8ffd\u52a0\u3055\u308c\u306a\u3044\u306e\u3067\u30011\u884c\u5206\u306e\u30eb\u30fc\u30d7\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u3082\u540c\u3058\u51e6\u7406\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u4eca\u56de\u306e\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306f\u5fc5\u305a\u884c\u304c\u53e5\u70b9\u3067\u7d42\u308f\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u8ffd\u52a0\u3055\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3000\n36\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c4\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u9752\u7a7a\u6587\u5eab\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c4\u7ae0: \u5f62\u614b\u7d20\u89e3\u6790\n>\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092MeCab\u3092\u4f7f\u3063\u3066\u5f62\u614b\u7d20\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.mecab\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n>\n>\u306a\u304a\uff0c\u554f\u984c37, 38, 39\u306fmatplotlib\u3082\u3057\u304f\u306fGnuplot\u3092\u7528\u3044\u308b\u3068\u3088\u3044\uff0e\n\n###35. \u540d\u8a5e\u306e\u9023\u63a5\n>\u540d\u8a5e\u306e\u9023\u63a5\uff08\u9023\u7d9a\u3057\u3066\u51fa\u73fe\u3059\u308b\u540d\u8a5e\uff09\u3092\u6700\u9577\u4e00\u81f4\u3067\u62bd\u51fa\u305b\u3088\uff0e\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport MeCab\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.mecab'\n\n\ndef parse_neko():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u5f62\u614b\u7d20\u89e3\u6790\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066neko.txt.mecab\u306b\u4fdd\u5b58\u3059\u308b\n\t'''\n\n\twith open(fname) as data_file, \\\n\t\t\topen(fname_parsed, mode='w') as out_file:\n\n\t\tmecab = MeCab.Tagger()\n\t\tout_file.write(mecab.parse(data_file.read()))\n\n\ndef neco_lines():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5404\u5f62\u614b\u7d20\u3092\n\t\u30fb\u8868\u5c64\u5f62\uff08surface\uff09\n\t\u30fb\u57fa\u672c\u5f62\uff08base\uff09\n\t\u30fb\u54c1\u8a5e\uff08pos\uff09\n\t\u30fb\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\n\t\u306e4\u3064\u3092\u30ad\u30fc\u3068\u3059\u308b\u8f9e\u66f8\u306b\u683c\u7d0d\u3057\u30011\u6587\u305a\u3064\u3001\u3053\u306e\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\n\n\t\u623b\u308a\u5024\uff1a\n\t1\u6587\u306e\u5404\u5f62\u614b\u7d20\u3092\u8f9e\u66f8\u5316\u3057\u305f\u30ea\u30b9\u30c8\n\t'''\n\twith open(fname_parsed) as file_parsed:\n\n\t\tmorphemes = []\n\t\tfor line in file_parsed:\n\n\t\t\t# \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n\t\t\tcols = line.split('\\t')\n\t\t\tif(len(cols) < 2):\n\t\t\t\traise StopIteration\t\t# \u533a\u5207\u308a\u304c\u306a\u3051\u308c\u3070\u7d42\u4e86\n\t\t\tres_cols = cols[1].split(',')\n\n\t\t\t# \u8f9e\u66f8\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\t\t\tmorpheme = {\n\t\t\t\t'surface': cols[0],\n\t\t\t\t'base': res_cols[6],\n\t\t\t\t'pos': res_cols[0],\n\t\t\t\t'pos1': res_cols[1]\n\t\t\t}\n\t\t\tmorphemes.append(morpheme)\n\n\t\t\t# \u54c1\u8a5e\u7d30\u5206\u985e1\u304c'\u53e5\u70b9'\u306a\u3089\u6587\u306e\u7d42\u308f\u308a\u3068\u5224\u5b9a\n\t\t\tif res_cols[1] == '\u53e5\u70b9':\n\t\t\t\tyield morphemes\n\t\t\t\tmorphemes = []\n\n\n# \u5f62\u614b\u7d20\u89e3\u6790\nparse_neko()\n\n# 1\u6587\u305a\u3064\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u62bd\u51fa\nlist_series_noun = []\t\t# \u51fa\u73fe\u9806\u30ea\u30b9\u30c8\u3001\u91cd\u8907\u3042\u308a\nfor line in neco_lines():\n\tnouns = []\t\t# \u898b\u3064\u3051\u305f\u540d\u8a5e\u306e\u30ea\u30b9\u30c8\n\tfor morpheme in line:\n\n\t\t# \u540d\u8a5e\u306a\u3089nouns\u306b\u8ffd\u52a0\n\t\tif morpheme['pos'] == '\u540d\u8a5e':\n\t\t\tnouns.append(morpheme['surface'])\n\n\t\t# \u540d\u8a5e\u4ee5\u5916\u306a\u3089\u3001\u305d\u308c\u307e\u3067\u306e\u9023\u7d9a\u3059\u308b\u540d\u8a5e\u3092list_series_noun\u306b\u8ffd\u52a0\n\t\telse:\n\t\t\tif len(nouns) > 1:\n\t\t\t\tlist_series_noun.append(\"\".join(nouns))\n\t\t\tnouns = []\n\n\t# \u540d\u8a5e\u3067\u7d42\u308f\u308b\u884c\u304c\u3042\u3063\u305f\u5834\u5408\u306f\u3001\u6700\u5f8c\u306e\u9023\u7d9a\u3059\u308b\u540d\u8a5e\u3092list_series_noun\u306b\u8ffd\u52a0\n\tif len(nouns) > 1:\n\t\tlist_series_noun.append(\"\".join(nouns))\n\n# \u91cd\u8907\u9664\u53bb\nseries_noun = set(list_series_noun)\n\n# \u78ba\u8a8d\u3057\u3084\u3059\u3044\u3088\u3046list_series_noun\u3092\u4f7f\u3063\u3066\u51fa\u73fe\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\nprint(sorted(series_noun, key=list_series_noun.index))\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n\u9577\u3044\u306e\u3067\u5148\u982d\u90e8\u5206\u306e\u307f\u3067\u3059\u3002\n\n```console:\u7aef\u672b\uff08\u5148\u982d\u90e8\u5206\uff09\n['\u4eba\u9593\u4e2d', '\u4e00\u756a\u7370\u60aa', '\u6642\u5999', '\u4e00\u6bdb', '\u305d\u306e\u5f8c\u732b', '\u3053\u3093\u306a\u7247\u8f2a', '\u4e00\u5ea6', '\u3077\u3046\u3077\u3046\u3068\u7159', '\u90b8\u5185', '\u4e09\u6bdb', '\u6696\u304b\u305d\u3046', '\u66f8\u751f\u4ee5\u5916', '\u518d\u3073\u304a\u3055\u3093', '\u540c\u3058\u4e8b', '\u56db\u4e94\u904d', '\u3053\u306e\u9593\u304a\u3055\u3093', '\u4e09\u99ac', '\u5fa1\u53f0\u6240', '\u3089\u5185', '\u307e\u307e\u5965', '\u4f4f\u5bb6', '\u304e\u308a\u307b\u3068\u3093\u3069', '\u52c9\u5f37\u5bb6', '\u52e4\u52c9\u5bb6', '\u4e8c\u4e09\u30da\u30fc\u30b8', '\u4e3b\u4eba\u4ee5\u5916', '\u9650\u308a\u543e\u8f29', '\u671d\u4e3b\u4eba', '\u305d\u306e\u5f8c\u3044\u308d\u3044\u308d\u7d4c\u9a13', '\u4e00\u756a\u5fc3\u6301', '\u4e8c\u4eba', '\u4e00\u3064\u5e8a', '\u4e00\u4eba', '\u6700\u5f8c\u5927\u5909', '\u2014\u2014\u3053\u3068', '\u2014\u2014\u732b', '\u795e\u7d4c\u80c3\u5f31\u6027', '\u5c3b\u307a\u305f\u3092\u3072\u3069\u304f', '\u8a00\u8a9e\u540c\u65ad', '\u5bb6\u5185\u7dcf\u304c\u304b\u308a', '\u7b4b\u5411', '\u767d\u541b', '\u5ea6\u6bce', '\u5148\u65e5\u7389', '\u56db\u758b', '\u4e09\u65e5\u76ee', '\u732b\u65cf', '\u5b8c\u304f\u3057', '\u5bb6\u65cf\u7684\u751f\u6d3b',\n```\n\n\u7d50\u679c\u5168\u4f53\u306f[GitHub](https://github.com/segavvy/nlp100_Python/tree/master/35)\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n###\u30ed\u30b8\u30c3\u30af\u306b\u3064\u3044\u3066\n`parse_neko()`\u3068`neco_lines()`\u306f[\u524d\u554f](http://qiita.com/segavvy/items/92f1177b6f095eb686a8)\u3068\u540c\u3058\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u5c11\u3057\u591a\u3081\u306b\u3044\u308c\u3066\u307f\u307e\u3057\u305f\u3002\u540d\u8a5e\u304c\u7d9a\u304f\u9593\u306f`nouns`\u306b\u8ffd\u52a0\u3057\u3066\u3044\u3063\u3066\u3001\u540d\u8a5e\u4ee5\u5916\u304c\u304d\u305f\u6642\u306b\u305d\u308c\u307e\u3067\u306b\u305f\u3081\u305f`nouns`\u3092\u9023\u7d50\u3057\u3066`list_series_noun`\u306b\u8ffd\u52a0\u3059\u308b\u6d41\u308c\u3067\u3059\u3002\n\u306a\u304a\u3001\u3053\u308c\u3060\u3068\u6700\u5f8c\u304c\u540d\u8a5e\u3067\u7d42\u308f\u3063\u305f\u5834\u5408\u306b`list_series_noun`\u306b\u8ffd\u52a0\u3055\u308c\u306a\u3044\u306e\u3067\u30011\u884c\u5206\u306e\u30eb\u30fc\u30d7\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u3082\u540c\u3058\u51e6\u7406\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u4eca\u56de\u306e\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306f\u5fc5\u305a\u884c\u304c\u53e5\u70b9\u3067\u7d42\u308f\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u8ffd\u52a0\u3055\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3000\n36\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c4\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f[\u9752\u7a7a\u6587\u5eab](http://www.aozora.gr.jp)\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002*\n", "tags": ["\u5f62\u614b\u7d20\u89e3\u6790", "mecab", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "Python", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af"]}