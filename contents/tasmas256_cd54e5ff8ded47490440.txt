{"context": "\u7c21\u5358\u306aAkka\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3001\u53d7\u4fe1\u3057\u3066\u30a8\u30b3\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nStep1\n\nGradle\n\nbuild.gradle\napply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'com.typesafe.akka:akka-actor_2.11:2.4.7'\n}\n\n\n\nClient\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u306fProps\u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u6d41\u5100\u307f\u305f\u3044\u3067\u3059\u3002\n\u8a73\u7d30\u306f\u5f8c\u65e5\u8abf\u3079\u3066\u8f09\u305b\u307e\u3059\u3002\n\nClient.java\npackage com.example;\nimport akka.actor.*;\nimport akka.event.Logging;\nimport akka.event.LoggingAdapter;\n\n/**\n * \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n */\npublic class Client extends UntypedActor {\n\n    /** Server */\n    private final ActorRef          server;\n\n    /** \u30ed\u30ac\u30fc */\n    private final LoggingAdapter    logger;\n\n    /**\n     * \u30a2\u30af\u30bf\u30fc\u751f\u6210\u7528\u306eProps\u3092\u8fd4\u3059\n     * \n     * @return  Props\n     */\n    public static Props props() {\n        return Props.create(Client.class);\n    }\n\n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     */\n    public Client() {\n        server = context().system().actorOf(Server.props(), \"Server\");\n        logger = Logging.getLogger(context().system(), this);\n        getSelf().tell(\"Start\", getSelf());\n    }\n\n    /**\n     * \u53d7\u4fe1\u51e6\u7406\n     */\n    @Override\n    public void onReceive(Object message) throws Exception {\n        logger.info(message.toString());\n        if (message instanceof String) {\n            if (message.equals(\"Start\")) {\n                server.tell(\"\u3053\u3093\u306b\u3061\u306f\", getSelf());\n                return;\n            }\n        }\n        // \u4e0a\u8a18\u4ee5\u5916\u306f\u51e6\u7406\u3057\u306a\u3044\n        unhandled(message);\n    }\n\n    /**\n     * \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n     * \n     * @param args  \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\n     */\n    public static void main(String[] args) {\n        ActorSystem.create(\"Apps\").actorOf(Client.props(), \"Client\");\n    }\n}\n\n\n\nServer\n\nServer.java\npackage com.example;\nimport akka.actor.Props;\nimport akka.actor.UntypedActor;\nimport akka.event.Logging;\nimport akka.event.LoggingAdapter;\n\n/**\n * \u30b5\u30fc\u30d0\n */\npublic class Server extends UntypedActor {\n\n    /** \u30ed\u30ac\u30fc */\n    private final LoggingAdapter    logger;\n\n    /**\n     * \u30a2\u30af\u30bf\u30fc\u751f\u6210\u7528\u306eProps\u3092\u8fd4\u3059\n     * \n     * @return  Props\n     */\n    public static Props props() {\n        return Props.create(Server.class);\n    }\n\n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     */\n    public Server() {\n        logger = Logging.getLogger(context().system(), this);\n    }\n\n    /**\n     * \u53d7\u4fe1\u51e6\u7406\n     */\n    @Override\n    public void onReceive(Object message) throws Exception {\n        logger.info(message.toString());\n        if (message instanceof String) {\n            getSender().tell(\"Echo \" + (String)message, getSelf());\n        }\n    }\n\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n[INFO] [06/24/2016 14:11:58.689] [Apps-akka.actor.default-dispatcher-2] [akka://Apps/user/Client] Start\n[INFO] [06/24/2016 14:11:58.690] [Apps-akka.actor.default-dispatcher-5] [akka://Apps/user/Server] \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 14:11:58.691] [Apps-akka.actor.default-dispatcher-3] [akka://Apps/user/Client] Echo \u3053\u3093\u306b\u3061\u306f\n\n\nStep2\nscheduler\u3092\u4f7f\u7528\u3057\u3066\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\nscheduleOnes\u306f1\u56de\u304d\u308a\u3067\u3059\u3002schedule\u3092\u4f7f\u7528\u3059\u308b\u3068\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\nClient\n\nClient.java\npackage com.example;\nimport java.util.concurrent.TimeUnit;\n\nimport akka.actor.*;\nimport akka.event.Logging;\nimport akka.event.LoggingAdapter;\nimport scala.concurrent.duration.Duration;\n\n/**\n * \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n */\npublic class Client extends UntypedActor {\n\n    /** Server */\n    private final ActorRef          server;\n\n    /** \u30ed\u30ac\u30fc */\n    private final LoggingAdapter    logger;\n\n    /**\n     * \u30a2\u30af\u30bf\u30fc\u751f\u6210\u7528\u306eProps\u3092\u8fd4\u3059\n     * \n     * @return  Props\n     */\n    public static Props props() {\n        return Props.create(Client.class);\n    }\n\n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     */\n    public Client() {\n        server = context().system().actorOf(Server.props(), \"Server\");\n        logger = Logging.getLogger(context().system(), this);\n        getSelf().tell(\"Start\", getSelf());\n    }\n\n    /**\n     * \u53d7\u4fe1\u51e6\u7406\n     */\n    @Override\n    public void onReceive(Object message) throws Exception {\n        logger.info(message.toString());\n        if (message instanceof String) {\n            if (message.equals(\"Start\")) {\n                server.tell(\"\u3053\u3093\u306b\u3061\u306f\", getSelf());\n                nextShedule(); \n                return;\n            }\n        }\n        unhandled(message);\n    }\n\n    /**\n     * \u6b21\u51e6\u7406\u3092\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3059\u308b\n     */\n    private void nextShedule() {\n        context().system().scheduler().scheduleOnce(\n                Duration.create(5, TimeUnit.SECONDS),   // delay\n                getSelf(),                              // receiver\n                \"Start\",                                // message\n                context().dispatcher(),                 // executor\n                getSelf()                               //sender\n                );\n    }\n\n    /**\n     * \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n     * \n     * @param args  \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\n     */\n    public static void main(String[] args) {\n        ActorSystem.create(\"Apps\").actorOf(Client.props(), \"Client\");\n    }\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n[INFO] [06/24/2016 15:25:12.290] [Apps-akka.actor.default-dispatcher-3] [akka://Apps/user/Client] Start\n[INFO] [06/24/2016 15:25:12.293] [Apps-akka.actor.default-dispatcher-4] [akka://Apps/user/Server] \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:12.293] [Apps-akka.actor.default-dispatcher-3] [akka://Apps/user/Client] Echo \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:17.312] [Apps-akka.actor.default-dispatcher-7] [akka://Apps/user/Client] Start\n[INFO] [06/24/2016 15:25:17.313] [Apps-akka.actor.default-dispatcher-3] [akka://Apps/user/Server] \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:17.313] [Apps-akka.actor.default-dispatcher-7] [akka://Apps/user/Client] Echo \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:22.334] [Apps-akka.actor.default-dispatcher-2] [akka://Apps/user/Client] Start\n[INFO] [06/24/2016 15:25:22.334] [Apps-akka.actor.default-dispatcher-7] [akka://Apps/user/Server] \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:22.334] [Apps-akka.actor.default-dispatcher-2] [akka://Apps/user/Client] Echo \u3053\u3093\u306b\u3061\u306f\n\n\u505c\u6b62\u3059\u308b\u51e6\u7406\u3092\u5165\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u5ef6\u3005\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\n\u7c21\u5358\u306aAkka\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3001\u53d7\u4fe1\u3057\u3066\u30a8\u30b3\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n## Step1\n\n### Gradle\n\n```gralde:build.gradle\napply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'com.typesafe.akka:akka-actor_2.11:2.4.7'\n}\n```\n\n### Client\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u306fProps\u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u6d41\u5100\u307f\u305f\u3044\u3067\u3059\u3002\n\u8a73\u7d30\u306f\u5f8c\u65e5\u8abf\u3079\u3066\u8f09\u305b\u307e\u3059\u3002\n\n```java:Client.java\npackage com.example;\nimport akka.actor.*;\nimport akka.event.Logging;\nimport akka.event.LoggingAdapter;\n\n/**\n * \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n */\npublic class Client extends UntypedActor {\n    \n    /** Server */\n    private final ActorRef          server;\n    \n    /** \u30ed\u30ac\u30fc */\n    private final LoggingAdapter    logger;\n    \n    /**\n     * \u30a2\u30af\u30bf\u30fc\u751f\u6210\u7528\u306eProps\u3092\u8fd4\u3059\n     * \n     * @return  Props\n     */\n    public static Props props() {\n        return Props.create(Client.class);\n    }\n    \n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     */\n    public Client() {\n        server = context().system().actorOf(Server.props(), \"Server\");\n        logger = Logging.getLogger(context().system(), this);\n        getSelf().tell(\"Start\", getSelf());\n    }\n    \n    /**\n     * \u53d7\u4fe1\u51e6\u7406\n     */\n    @Override\n    public void onReceive(Object message) throws Exception {\n        logger.info(message.toString());\n        if (message instanceof String) {\n            if (message.equals(\"Start\")) {\n                server.tell(\"\u3053\u3093\u306b\u3061\u306f\", getSelf());\n                return;\n            }\n        }\n        // \u4e0a\u8a18\u4ee5\u5916\u306f\u51e6\u7406\u3057\u306a\u3044\n        unhandled(message);\n    }\n\n    /**\n     * \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n     * \n     * @param args  \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\n     */\n    public static void main(String[] args) {\n        ActorSystem.create(\"Apps\").actorOf(Client.props(), \"Client\");\n    }\n}\n```\n\n### Server\n\n```java:Server.java\npackage com.example;\nimport akka.actor.Props;\nimport akka.actor.UntypedActor;\nimport akka.event.Logging;\nimport akka.event.LoggingAdapter;\n\n/**\n * \u30b5\u30fc\u30d0\n */\npublic class Server extends UntypedActor {\n    \n    /** \u30ed\u30ac\u30fc */\n    private final LoggingAdapter    logger;\n    \n    /**\n     * \u30a2\u30af\u30bf\u30fc\u751f\u6210\u7528\u306eProps\u3092\u8fd4\u3059\n     * \n     * @return  Props\n     */\n    public static Props props() {\n        return Props.create(Server.class);\n    }\n    \n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     */\n    public Server() {\n        logger = Logging.getLogger(context().system(), this);\n    }\n    \n    /**\n     * \u53d7\u4fe1\u51e6\u7406\n     */\n    @Override\n    public void onReceive(Object message) throws Exception {\n        logger.info(message.toString());\n        if (message instanceof String) {\n            getSender().tell(\"Echo \" + (String)message, getSelf());\n        }\n    }\n    \n}\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```log\n[INFO] [06/24/2016 14:11:58.689] [Apps-akka.actor.default-dispatcher-2] [akka://Apps/user/Client] Start\n[INFO] [06/24/2016 14:11:58.690] [Apps-akka.actor.default-dispatcher-5] [akka://Apps/user/Server] \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 14:11:58.691] [Apps-akka.actor.default-dispatcher-3] [akka://Apps/user/Client] Echo \u3053\u3093\u306b\u3061\u306f\n```\n\n## Step2\n\nscheduler\u3092\u4f7f\u7528\u3057\u3066\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\nscheduleOnes\u306f1\u56de\u304d\u308a\u3067\u3059\u3002schedule\u3092\u4f7f\u7528\u3059\u308b\u3068\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n### Client\n\n```java:Client.java\npackage com.example;\nimport java.util.concurrent.TimeUnit;\n\nimport akka.actor.*;\nimport akka.event.Logging;\nimport akka.event.LoggingAdapter;\nimport scala.concurrent.duration.Duration;\n\n/**\n * \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n */\npublic class Client extends UntypedActor {\n    \n    /** Server */\n    private final ActorRef          server;\n    \n    /** \u30ed\u30ac\u30fc */\n    private final LoggingAdapter    logger;\n    \n    /**\n     * \u30a2\u30af\u30bf\u30fc\u751f\u6210\u7528\u306eProps\u3092\u8fd4\u3059\n     * \n     * @return  Props\n     */\n    public static Props props() {\n        return Props.create(Client.class);\n    }\n    \n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     */\n    public Client() {\n        server = context().system().actorOf(Server.props(), \"Server\");\n        logger = Logging.getLogger(context().system(), this);\n        getSelf().tell(\"Start\", getSelf());\n    }\n    \n    /**\n     * \u53d7\u4fe1\u51e6\u7406\n     */\n    @Override\n    public void onReceive(Object message) throws Exception {\n        logger.info(message.toString());\n        if (message instanceof String) {\n            if (message.equals(\"Start\")) {\n                server.tell(\"\u3053\u3093\u306b\u3061\u306f\", getSelf());\n                nextShedule(); \n                return;\n            }\n        }\n        unhandled(message);\n    }\n    \n    /**\n     * \u6b21\u51e6\u7406\u3092\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3059\u308b\n     */\n    private void nextShedule() {\n        context().system().scheduler().scheduleOnce(\n                Duration.create(5, TimeUnit.SECONDS),   // delay\n                getSelf(),                              // receiver\n                \"Start\",                                // message\n                context().dispatcher(),                 // executor\n                getSelf()                               //sender\n                );\n    }\n\n    /**\n     * \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n     * \n     * @param args  \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\n     */\n    public static void main(String[] args) {\n        ActorSystem.create(\"Apps\").actorOf(Client.props(), \"Client\");\n    }\n}\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```log\n[INFO] [06/24/2016 15:25:12.290] [Apps-akka.actor.default-dispatcher-3] [akka://Apps/user/Client] Start\n[INFO] [06/24/2016 15:25:12.293] [Apps-akka.actor.default-dispatcher-4] [akka://Apps/user/Server] \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:12.293] [Apps-akka.actor.default-dispatcher-3] [akka://Apps/user/Client] Echo \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:17.312] [Apps-akka.actor.default-dispatcher-7] [akka://Apps/user/Client] Start\n[INFO] [06/24/2016 15:25:17.313] [Apps-akka.actor.default-dispatcher-3] [akka://Apps/user/Server] \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:17.313] [Apps-akka.actor.default-dispatcher-7] [akka://Apps/user/Client] Echo \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:22.334] [Apps-akka.actor.default-dispatcher-2] [akka://Apps/user/Client] Start\n[INFO] [06/24/2016 15:25:22.334] [Apps-akka.actor.default-dispatcher-7] [akka://Apps/user/Server] \u3053\u3093\u306b\u3061\u306f\n[INFO] [06/24/2016 15:25:22.334] [Apps-akka.actor.default-dispatcher-2] [akka://Apps/user/Client] Echo \u3053\u3093\u306b\u3061\u306f\n```\n\n\u505c\u6b62\u3059\u308b\u51e6\u7406\u3092\u5165\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u5ef6\u3005\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\n", "tags": ["Akka", "Java"]}