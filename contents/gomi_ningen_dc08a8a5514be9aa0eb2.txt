{"context": "\u3053\u306e\u8a18\u4e8b\u306f RxSwift\u52c9\u5f37\u4f1a \u306e\u767a\u8868\u88dc\u8db3\u8cc7\u6599\u3067\u3059\n\u3000Swift\u3067\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b9f\u73fe\u3059\u308b RxSwift \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3053\u3053\u6700\u8fd1\u6ce8\u76ee\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u305d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u3067\u306f\u306a\u304f\u3001 \u30e9\u30a4\u30d6\u30e9\u30ea\u81ea\u4f53\u306e\u4f5c\u308a\u65b9 \u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\u4e00\u3064\u306e\u8a18\u4e8b\u3067\u3059\u3079\u3066\u3092\u8aac\u660e\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u53b3\u3057\u3044\u306e\u3067\u3001\u307e\u305a Observer \u3084 Observable \u3068\u3044\u3063\u305f\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u305d\u306e\u5468\u8fba\u306b\u3064\u3044\u3066\u3001\u3072\u3068\u3064\u305a\u3064\u4f5c\u3063\u3066\u3044\u304f\u6d41\u308c\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u6ce8\u610f\u4e8b\u9805\n\n\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u7406\u89e3\u3057\u306a\u304f\u3066\u3082 RxSwift \u306f\u5341\u5206\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\n\u307e\u3060 Rx \u7cfb\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u65b9\u306f\u3001\u307e\u305a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\n\n\nQiita\u306e\u8a18\u4e8b\u3092\u8aad\u3080\u306e\u3082\u3088\u3044\u3067\u3059\u304c\u3001\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084Example\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u8aad\u307f\u306a\u304c\u3089\u3001\u307e\u305a\u306f\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u308b\u3053\u3068\u3092\u5f37\u304f\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u610f\u5916\u306b\u7c21\u5358\u306b\u4f7f\u3044\u3069\u3053\u308d\u304c\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\u8a18\u4e8b\u306e\u5185\u5bb9\u7684\u306b\u306f Rx \u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5229\u7528\u7d4c\u9a13\u304c\u306a\u304f\u3066\u3082\u5206\u304b\u308b\u3088\u3046\u306b\u66f8\u3044\u305f\u3064\u3082\u308a\u3067\u3059\n\u4ee5\u4e0b\u306e\u5b9f\u88c5\u306f RxSwift \u306e\u3082\u306e\u3067\u3042\u308a\u3001\u4ed6\u8a00\u8a9e\u306e Rx \u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306f\u5b9f\u88c5\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\n\n\nObserver\u30d1\u30bf\u30fc\u30f3\u306e\u5fa9\u7fd2\n\u4ee5\u4e0b\u306e\u554f\u984c\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u3044\u304d\u307e\u3059\n\n\u3010\u554f\u984c\u3011 A \u304c\u66f4\u65b0\u3055\u308c\u305f\u3053\u3068\u3092\u3001B \u306b\u901a\u77e5\u3057\u305f\u3044\n\u3010\u89e3\u6c7a\u7b56\u3011 A \u304c B \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u6301\u3057\u3001B \u306b \u5909\u66f4\u3092\u4f1d\u3048\u308b\n\n\u89e3\u6c7a\u7b56\u3092\u5358\u7d14\u306b\u5b9f\u88c5\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u69cb\u9020\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\n\n\u3000\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u304c\u3001\u554f\u984c\u3092\u3057\u3063\u304b\u308a\u3068\u89e3\u6c7a\u3067\u304d\u3066\u3044\u307e\u3059\u3002\u7d9a\u3044\u3066\u300c\u901a\u77e5\u5148\u304c\u5897\u3048\u305d\u3046\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u6761\u4ef6\u304c\u52a0\u308f\u3063\u305f\u3092\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u307e\u307e\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u554f\u984c\u304c\u767a\u751f\u3057\u305d\u3046\u3067\u3059\u3002\n\n\u901a\u77e5\u5148\u304c\u5897\u6e1b\u3059\u308b\u305f\u3073\u306b A \u306e\u5185\u90e8\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\u901a\u77e5\u5148\u306eI/F\u306e\u5909\u66f4\u306b\u3088\u308a A \u306e\u5185\u90e8\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\n\u3000\u3053\u306e2\u70b9\u306f\u3068\u3082\u306b\u3001\u901a\u77e5\u5143\u304c\u901a\u77e5\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8a73\u7d30\u3092\u77e5\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u751f\u3058\u3066\u3044\u308b\u554f\u984c\u3067\u3059\u3002\u901a\u77e5\u5143\u306f\u3069\u3046\u3042\u304c\u3044\u3066\u3082\u3001\u901a\u77e5\u5148\u3092\u4fdd\u6301\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u8a73\u7d30\u3092\u77e5\u3063\u305f\u307e\u307e\u4fdd\u6301\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u306f\u305a\u3067\u3059\u3002\n\u3000\u3057\u305f\u304c\u3063\u3066\u901a\u77e5\u5143\u306f\u3001\u5fc5\u8981\u306e\u306a\u3044\u60c5\u5831\u3092\u305d\u304e\u843d\u3068\u3057\u305f\u72b6\u614b\u3067\u901a\u77e5\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u6301\u3059\u308c\u3070\u3001\u554f\u984c\u304c\u89e3\u6c7a\u3057\u305d\u3046\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u901a\u77e5\u5148\u306b\u5171\u901a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08Swift\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\uff09\u3092\u5207\u308c\u3070\u3088\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3000\u307e\u305f\u3001\u901a\u77e5\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7a2e\u985e\u3092\u5897\u3084\u3057\u305f\u3044\u3068\u3059\u308c\u3070\u3001\u3053\u3061\u3089\u3082\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5207\u3063\u3066\u304a\u304f\u3068\u4f7f\u3044\u307e\u308f\u3057\u304c\u52b9\u3044\u3066\u4fbf\u5229\u3067\u3059\u3002Observer \u304c Observable \u304b\u3089\u306e\u901a\u77e5\u3092\u53d7\u3051\u53d6\u308a\u59cb\u3081\u308b\u305f\u3081\u306e attach \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3068\u3001\u901a\u77e5\u306e\u53d7\u3051\u53d6\u308a\u3092\u89e3\u9664\u3059\u308b\u305f\u3081\u306e detach \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308c\u3070\u5341\u5206\u3067\u3057\u3087\u3046\u3002\n\n\u3000\u3053\u306e\u5f62\u5f0f\u3092 pull \u578b Observer \u30d1\u30bf\u30fc\u30f3\u3068\u547c\u3073\u307e\u3059\u3002Observer \u304c\u901a\u77e5\u3092\u53d7\u3051\u305f\u3042\u3068\u306b\u3001Observable \u304b\u3089\u5024\u3092\u5f15\u3063\u5f35\u3063\u3066\u3053\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\u306b pull \u3068\u3044\u3046\u540d\u524d\u304c\u4ed8\u3044\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b Observable \u304c\u66f4\u65b0\u6642\u306b Observer \u306b\u5bfe\u3057\u3066\u5024\u3092\u6295\u3052\u308b\u3088\u3046\u306a\u5b9f\u88c5\u3082\u53ef\u80fd\u3067\u3059\u3002\u3053\u3061\u3089\u306f push \u578b\u3068\u3088\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3000\u3053\u306e UML \u3092 Swift \u306e\u5b9f\u88c5\u3078\u5358\u7d14\u306b\u843d\u3068\u3057\u8fbc\u3080\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002Swift\u306e protocol \u306f\u3001generic type parameter \u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u4ee3\u308f\u308a\u306b\u95a2\u9023\u578b (\u301c2.1: typealias, 2.2+: associatedtype) \u3067\u8868\u73fe\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3000\u3053\u3053\u307e\u3067\u304f\u308c\u3070 Observer\u30d1\u30bf\u30fc\u30f3\u306e\u57fa\u790e\u306b\u3064\u3044\u3066\u306f\u306a\u3093\u3068\u306a\u304f\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u6b21\u7bc0\u3067\u306f RxSwift \u3067\u306f\u3069\u306e\u3088\u3046\u306b push \u578b\u306e Observer \u30d1\u30bf\u30fc\u30f3\u306b\u7528\u3044\u3089\u308c\u308b\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u69cb\u6210\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nObserver, Observable \u3092\u4f5c\u308b\uff08Rx\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e0b\u3054\u3057\u3089\u3048\uff09\n\u3000\u3053\u3053\u304b\u3089\u306f\u5b9f\u969b\u306b RxSwift \u3067\u3069\u306e\u3088\u3046\u306b Observer \u3068 Observable \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u57fa\u672c\u7684\u306b\u306f push \u578b\u306e Observer \u30d1\u30bf\u30fc\u30f3\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3057\u3066\u3044\u3051\u3070\u826f\u3044\u3060\u3051\u3067\u3059\u3002\u305f\u3060\u3057Rx\u3067\u306f\u5024\u3092\u5358\u7d14\u306b\u901a\u77e5\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6210\u529f(Next)\u3001\u5931\u6557(Error)\u3001\u5b8c\u4e86(Completed)\u3068\u3044\u3046\u6587\u8108\u3092\u3064\u3051\u305f \u30a4\u30d9\u30f3\u30c8 \u3092\u901a\u77e5\u3057\u307e\u3059\u3002\u307e\u305f\u3001Observer \u3092 Observable \u306b\u767b\u9332\u3057\u305f\u969b\u306b Disposable \u3068\u3044\u3046I/F\u3092\u6301\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3057\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8cfc\u8aad\u89e3\u9664\u306e\u6a5f\u69cb\u3092\u6301\u305f\u305b\u3066\u3044\u308b\u70b9\u3082\u7279\u5fb4\u7684\u3067\u3059\u3002\npublic enum Event<Element> {\n    case Next(Element)\n    case Error(ErrorType)\n    case Completed\n}\n\n\u3057\u305f\u304c\u3063\u3066\u5b9f\u73fe\u3057\u305f\u3044\u69cb\u9020\u306f\u4e0b\u56f3\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n\n\nObserverType, ObservableType \u306e\u5b9f\u88c5\n\u3000\u524d\u8ff0\u3057\u305f\u3068\u304a\u308a\u3001protocol \u306b\u306f generic type parameter \u3092\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u307e\u305a\u95a2\u9023\u578b\u3092\u7528\u3044\u3066 ObserverType \u3068 ObservableType \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n// \u901a\u77e5\u5148\npublic protocol ObserverType {\n\n    typealias E\n\n    // \u901a\u77e5\u3092\u53d7\u3051\u308b\u53e3\n    func on(event: Event<E>)\n\n}\n\n// \u901a\u77e5\u5143\npublic protocol ObservableType {\n\n    typealias E\n\n    // \u901a\u77e5\u5148\u3092\u767b\u9332\u3059\u308b\u53e3\n    func subscribe<O: ObserverType where O.E == E>(observer: O) -> Disposable\n\n}\n\n\npublic protocol Disposable {\n\n    func dispose()\n\n}\n\n\nObservable \u306e\u5b9f\u88c5\n\u3000\u3055\u3066\u3001\u3053\u3046\u3057\u3066\u5b9a\u7fa9\u3057\u305f ObservableType \u30d7\u30ed\u30c8\u30b3\u30eb \u3092 generic type parameter \u3092\u7528\u3044\u305f\u30af\u30e9\u30b9\u306b\u843d\u3068\u3057\u8fbc\u307f\u307e\u3059\u3002Swift\u306e\u8a00\u8a9e\u6a5f\u80fd\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u306f\u919c\u3044\u8868\u73fe\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 \u672c\u6765\u3067\u3042\u308c\u3070\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3067\u304d\u306a\u3044\u3088\u3046\u306b abstract class \u306b\u3059\u308b\u3088\u3046\u306a\u90e8\u5206 \u3060\u3068\u601d\u3044\u307e\u3059\u3002RxSwift \u5185\u3067\u306f\u3001\u82e6\u3057\u7d1b\u308c\u3067\u3059\u304c @noreturn \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\npublic class Observable<Element>: ObservableType {\n\n    public typealias E = Element\n\n    public func subscribe<O : ObserverType where O.E == E>(observer: O) -> Disposable {\n        abstractMethod()\n    }\n\n}\n\n/// \u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u82e6\u8089\u306e\u7b56\n@noreturn func abstractMethod() -> Void {\n    fatalError(\"abstract method\")\n}\n\n\u3000\u3053\u3053\u3067\u767b\u5834\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u306f\u3001\u306a\u305c\u304b\u7686\u3055\u3093\u5927\u597d\u304d\u306a type erasure \u3067\u3059\u304c\u3001\u3053\u308c\u3092\u3084\u3089\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u306e\u306f\u6c7a\u3057\u3066\u8912\u3081\u3089\u308c\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u500b\u4eba\u7684\u306b\u306f\u666e\u901a\u306bJava\u3088\u308a\u52a3\u3063\u3066\u308b\u3067\u3057\u3087\u3063\u3066\u611f\u60f3\u3067\u3059\uff08\u2190\u708e\u4e0a\u3057\u305d\u3046\uff09\u3002Swift \u306e protocol \u304c generic type parameter \u3092\u6301\u3066\u306a\u3044\u7406\u7531\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u306e\u8a18\u4e8b\u306b\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u3053\u306e\u70b9\u306b\u3064\u3044\u3066\u81ea\u5206\u306f\u7406\u89e3\u3067\u304d\u3066\u306f\u3044\u307e\u305b\u3093\u3002\n\nAnyObserver \u306e\u5b9f\u88c5\n\u3000ObserverType \u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u307b\u3046\u3082 generic type parameter \u3092\u4f7f\u3063\u305f\u5f62\u3067\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u901a\u77e5\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3092\u3059\u308b\u306e\u304c Observer \u306e\u5f79\u5272\u3067\u3042\u308b\u306e\u3067\u3001\u5358\u7d14\u306b Event<E> -> Void \u3092\u53d7\u3051\u53d6\u308a\u3001 on(Event<E>) \u3067\u9069\u5207\u306b\u547c\u3073\u51fa\u3057\u3066\u3042\u3052\u308c\u3070 OK \u3067\u3059\u3002\npublic class AnyObserver<Element>: ObserverType {\n\n    public typealias E = Element\n    public typealias EventHandler = Event<E> -> Void\n    private let eventHandler: EventHandler\n\n    public init(eventHandler: EventHandler) {\n        self.eventHandler = eventHandler\n    }\n\n    public init<O: ObserverType where O.E == Element>(observer: O) {\n        self.eventHandler = observer.on\n    }\n\n    public func on(event: Event<E>) {\n        eventHandler(event)\n    }\n\n}\n\nSwift\u306e\u8a00\u8a9e\u4ed5\u69d8\u306b\u963b\u307e\u308c\u3001\u968f\u5206\u9060\u56de\u308a\u306b\u306f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u7121\u4e8b Observable<Element> \u3068 Observer<Element> \u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\nObservable\u306e\u5177\u8c61\u30af\u30e9\u30b9\u3092\u4f5c\u308d\u3046\n\nBag, SubscriptionDisposable \u306e\u5b9f\u88c5\n\u3000\u5148\u307b\u3069\u5b9a\u7fa9\u3057\u305f Observable<Element> \u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5b9f\u88c5\u304c\u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u306f subscribe \u3067\u3059\u3002\u3053\u3053\u3067\u306f\u53d7\u3051\u53d6\u3063\u305f observer \u3092\u4fdd\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3000\n\u3000observer \u306f O: ObserverType where O.E == E \u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u6e21\u3063\u3066\u304d\u307e\u3059\u304c\u3001ObserverType \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3053\u3068\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u3067\u304d\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089 ObserverType \u306f abstract type member \u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u578b\u5236\u7d04\u3092\u5229\u7528\u3057\u3066 AnyObserver<E> \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3042\u3052\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u4f8b\u304c\u7a1a\u62d9\u3067\u7533\u3057\u8a33\u306a\u3044\u306e\u3067\u3059\u304c\u3001Observable<String> \u3067\u3042\u308b\u3088\u3046\u306a StringObservable \u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3057\u3066\u3001\u66f8\u304d\u51fa\u3057\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff08\u5b9f\u969b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u3053\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff09\u3002\npublic class StringObservable: Observable<String> {\n\n    private var observers: [AnyObserver<String>] = []\n\n    private var _string: String\n    public var string: String {\n        get {\n            return _string\n        }\n        set(value) {\n            self._string = value\n            observers.forEach { $0.on(.Next(value)) }\n        }\n    }\n\n    public init(string: String) {\n        self._string = string\n    }\n\n\n    public func subscribe<O : ObserverType where O.E == E>(observer: O) -> Disposable {\n        observers.append(AnyObserver(observer: observer))\n        // \u3064\u3065\u304f...\n    }\n\n}\n\n\u3000subscribe \u306b\u6e21\u3063\u305f observer \u306f\u3001observers \u306b\u767b\u9332\u3055\u308c\u3001\u4f55\u304b\u30a4\u30d9\u30f3\u30c8\u304c\u3042\u3063\u305f\u3089\u901a\u77e5\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u30a4\u30d9\u30f3\u30c8\u8cfc\u8aad\u306e\u6a5f\u80fd\u306e\u5b9f\u88c5\u306f\u3053\u308c\u3067\u3068\u308a\u3042\u3048\u305aOK\u3068\u3057\u307e\u3057\u3087\u3046\uff08\u3044\u308d\u3044\u308d\u7d30\u304b\u3044\u554f\u984c\u306f\u3042\u308a\u307e\u3059\u304c\u3068\u308a\u3042\u3048\u305a\u7f6e\u3044\u3066\u304a\u304f\uff09\u3002\n\u3000\n\u3000\u7d9a\u3044\u3066\u30a4\u30d9\u30f3\u30c8\u8cfc\u8aad\u89e3\u9664\u306e\u4ed5\u7d44\u307f\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u5358\u306b observers \u304b\u3089\u8cfc\u8aad\u3092\u89e3\u9664\u3057\u305f\u3044 observer \u3092\u524a\u9664\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3060\u3051\u3067\u3059\u3002\u73fe\u72b6\u306f\u914d\u5217\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u8f9e\u66f8\u7684\u306a\u3082\u306e\u306b\u7a81\u3063\u8fbc\u3093\u3067\u30ad\u30fc\u3092\u6307\u5b9a\u3057\u3066\u524a\u9664\u3067\u304d\u305f\u65b9\u304c\u3001\u53d6\u308a\u56de\u3057\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\u3000\n\u3000\u305d\u3053\u3067\u3001\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3068\u540c\u6642\u306b\u3001 id \u3092\u767a\u884c\u3059\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 Bag \u3092\u4f5c\u308a\u307e\u3059\u3002\u5dee\u3057\u5f53\u305f\u3063\u3066\u306e\u554f\u984c\u306f\u3001\u3069\u306e\u3088\u3046\u306b id \u3092\u751f\u6210\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3053\u3053\u3067\u306f Swift \u306e unsafeAddressOf \u30e1\u30bd\u30c3\u30c9\u304c\u6697\u8e8d\u3057\u307e\u3059\u3002\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u305d\u306e\u3082\u306e\u304c\u3042\u308b\u7a2e\u306e id \u306e\u5f79\u5272\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30e1\u30e2\u30ea\u306e\u756a\u5730\u3092\u53d6\u5f97\u3059\u308b\u306e\u304c unsafeAddressOf \u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\nimport Swift\n\n// \u30af\u30e9\u30b9\u3068\u3057\u3066\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30e1\u30e2\u30ea\u5185\u3067\u30e6\u30cb\u30fc\u30af\u306a\u5b58\u5728\u306b\u306a\u308c\u308b\nclass Identity {\n\n    var value: Int32 = 0\n\n}\n\n// hash\u5024\u8a08\u7b97\u306e\u304a\u307e\u3058\u306a\u3044\u7684\u306a\u30e4\u30c4\n// \u3053\u306e\u3042\u305f\u308a\u3092\u53c2\u7167(http://stackoverflow.com/posts/12996028/revisions)\nfunc hash(_x: Int) -> Int {\n    var x = _x\n    x = ((x >> 16) ^ x) &* 0x45d9f3b\n    x = ((x >> 16) ^ x) &* 0x45d9f3b\n    x = ((x >> 16) ^ x)\n    return x;\n}\n\npublic struct BagKey: Hashable {\n\n    let uniqueIdentity: Identity?\n    let key: Int\n\n    public var hashValue: Int {\n        get {\n            // unsafeAddressOf \u3067 \u30e1\u30e2\u30ea\u756a\u5730\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\n            return uniqueIdentity\n                .map { hash(key) ^ (unsafeAddressOf($0).hashValue) } ?? hash(key)\n        }\n    }\n\n}\n\n// BagKey\u306e\u7b49\u5024\u6027\u3092\u6bd4\u8f03\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\npublic func == (lhs: BagKey, rhs: BagKey) -> Bool {\n    return lhs.key == rhs.key\n        && lhs.uniqueIdentity === rhs.uniqueIdentity\n}\n\n\u3000\u3053\u3046\u3057\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30ad\u30fc\u3068\u306a\u308b BagKey \u306e\u5b9f\u88c5\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\u7d9a\u3044\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u672c\u4f53\u3068\u306a\u308b Bag \u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3057\u3087\u3046\u3002RxSwift \u306e Bag \u306e\u5b9f\u88c5\u306f\u8981\u7d20\u6570\u304c\u5c11\u306a\u3044\u3068\u304d\u306b\u6700\u9069\u5316\u3055\u308c\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u304c\u306e\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u8cea\u3060\u3051\u629c\u304d\u51fa\u3059\u3068\u305f\u3060\u306e Key-Value store \u3067\u3059\u3002\npublic struct Bag<T> {\n\n    public typealias KeyType = BagKey\n    private typealias ScopeUniqueTokenType = Int\n    typealias Entry = (key: BagKey, value: T)\n\n    private var dictionary: [BagKey:T] = [BagKey:T]()\n\n    private var uniqueIdentity: Identity?\n    private var nextKey: ScopeUniqueTokenType = 0\n\n    public init() {}\n\n    public mutating func insert(element: T) -> BagKey {\n        nextKey = nextKey &+ 1\n        if nextKey == 0 {\n            uniqueIdentity = Identity()\n        }\n        let key = BagKey(uniqueIdentity: uniqueIdentity, key: nextKey)\n        dictionary[key] = element\n        return key\n    }\n\n    public var count: Int {\n        return dictionary.count\n    }\n\n    public mutating func removeAll() {\n        dictionary.removeAll(keepCapacity: false)\n    }\n\n    public mutating func removeKey(key: BagKey) -> T? {\n        return dictionary.removeValueForKey(key)\n    }\n\n}\n\n\u3000\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002\u3082\u3046\u4e00\u5ea6\u3084\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002Observable#subscribe \u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u884c\u3044\u305f\u3044\u306e\u3067\u3057\u305f\u3002\n\n\u53d7\u3051\u53d6\u3063\u305f observer \u3092 Bag \u306b\u7a81\u3063\u8fbc\u3080\uff08\u901a\u77e5\u5148\u3092\u4fdd\u6301\u3059\u308b\uff09\n\u53d7\u3051\u53d6\u3063\u305f observer \u3092 Bag \u304b\u3089\u4e00\u610f\u306b\u63a2\u305b\u308b\u3088\u3046\u306a\u30ad\u30fc\u3068\u3001Observable \u81ea\u8eab\u306e\u5f31\u53c2\u7167\u3092\u6301\u3061\u3001dispose \u3067\u8cfc\u8aad\u89e3\u9664\u304c\u3067\u304d\u308b\u3088\u3046\u306a Disposable \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\n\n\u30002. \u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b Disposable \u306e\u5177\u8c61\u30af\u30e9\u30b9\u3068\u3057\u3066 SubscriptionDisposable \u3068\u3044\u3046\u3082\u306e\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u69cb\u9020\u306f\u3068\u3066\u3082\u5358\u7d14\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\nstruct SubscriptionDisposable<T: SynchronizedUnsubscribeType>: Disposable {\n\n    private let key: T.DisposeKey\n    private weak var owner: T?\n\n    init(owner: T, key: T.DisposeKey) {\n        self.owner = owner\n        self.key = key\n    }\n\n    func dispose() {\n        owner?.synchronizedUnsubscribe(key)\n    }\n\n}\n\nprotocol SynchronizedUnsubscribeType: class {\n\n    typealias DisposeKey\n\n    func synchronizedUnsubscribe(disposeKey: DisposeKey)\n\n}\n\n\u3000observer \u3092\u6240\u6709\u3057\u3066\u3044\u308b owner \u306b\u30ad\u30fc\u3092\u6307\u5b9a\u3057\u3066\u8cfc\u8aad\u89e3\u9664\u304c\u3067\u304d\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001 owner \u81ea\u8eab\u306f SynchronizedUnsubscribeType \u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3044\u3063\u305f\u90e8\u5206\u3082\u542b\u3081\u3066 StringObservable \u306e\u5b9f\u88c5\u3092\u4fee\u6b63\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\npublic class StringObservable: Observable<String>, SynchronizedUnsubscribeType {\n\n    typealias DisposeKey = Bag<AnyObserver<String>>.KeyType\n\n    var bag: Bag<AnyObserver<String>> = Bag()\n\n    private var _string: String\n    private var string: String {\n        get {\n            return _string\n        }\n        set(value) {\n            self._string = value\n            bag.on(.Next(value))\n        }\n    }\n\n    public init(string: String) {\n        self._string = string\n    }\n\n\n    public func subscribe<O : ObserverType where O.E == E>(observer: O) -> Disposable {\n        let key = bag.insert(AnyObserver(observer: observer))\n        return SubscriptionDisposable(owner: self, key: key)\n    }\n\n    func synchronizedUnsubscribe(disposeKey: DisposeKey) {\n        bag.removeKey(disposeKey)\n    }\n\n}\n\n\u3000\u3053\u308c\u304c\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u4e0b\u3067\u6b63\u3057\u304f\u52d5\u304f\u304b\u3068\u3044\u3046\u3068\u3001\u307e\u305f\u305d\u308c\u306f\u5225\u306e\u8a71\u306a\u306e\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u4e0b\u3067 Observer \u30d1\u30bf\u30fc\u30f3\u3092\u5b9f\u73fe\u3055\u305b\u308b\u305f\u3081\u306e Rx \u306e\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u51fa\u63c3\u3044\u307e\u3057\u305f\u3002\u5229\u7528\u5074\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\nlet observable = StringObservable(string: \"cocoa\")\nlet disposable = observable.subscribe(AnyObserver<String> {\n    switch $0 {\n    case .Next(let str): NSLog(str)\n    default: break\n    }\n})\n\nobservable.value = \"chino\"  //=> NSLog(\"chino\") \u3082\u5b9f\u884c\u3055\u308c\u308b\nobservable.value = \"maya\"  //=> NSLog(\"maya\") \u3082\u5b9f\u884c\u3055\u308c\u308b\nobservable.value = \"megu\"  //=> NSLog(\"megu\") \u3082\u5b9f\u884c\u3055\u308c\u308b\n\ndisposable.dispose()\nobservable.value = \"tippy\"   //=> \u306a\u306b\u3082\u304a\u3053\u3089\u306a\u3044\n\n\u3000\u3053\u3053\u307e\u3067\u304d\u305f\u3089\u3082\u3046 BehaviorSubject \u3084 Variable \u306e\u5b9f\u88c5\u3092\u8aad\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u5bfe\u5fdc\u306e\u305f\u3081\u306e\u30ed\u30c3\u30af\u51e6\u7406\u306a\u3069\u3082\u5b8c\u7d50\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u52c9\u5f37\u306b\u306a\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\u6b21\u7bc0\u3067\u306f\u305d\u306e\u5b9f\u88c5\u3092\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\nBehaviorSubject, Variable \u306e\u5b9f\u88c5\n\nBehaviorSubject\n\u3000\u524d\u7bc0\u3067\u306f\u3001String\u5024\u3092\u72b6\u614b\u3068\u3057\u3066\u6301\u3064 Observable \u306e\u5177\u8c61\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3092\u4e00\u822c\u5316\u3057\u3066\u4efb\u610f\u306e\u578b\u306e\u5024\u3092\u72b6\u614b\u3068\u3057\u3066\u6301\u3064\u3088\u3046\u306a Observable \u304c\u3042\u308c\u3070\u4fbf\u5229\u305d\u3046\u3067\u3059\u3002\u307e\u305f\u3001\u3053\u3046\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u901a\u77e5\u5143\u306b\u306a\u308a\u3046\u308b\u3068\u540c\u6642\u306b\u3001\u901a\u77e5\u5148\u306b\u306a\u308b\u3053\u3068\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u3002\u3053\u306e\u6027\u8cea\u3092 SubjectType \u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u666e\u6bb5\u306f\u901a\u77e5\u5143\u3068\u3057\u3066\u632f\u308b\u821e\u3044\u307e\u3059\u304c\u3001\u5fc5\u8981\u306a\u6642\u306b\u901a\u77e5\u5148\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3078\u306e\u5909\u63db\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305b\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b asObserver() \u3092\u6301\u3063\u3066\u3044\u308c\u3070\u5927\u4e08\u592b\u305d\u3046\u3067\u3059\u3002\n// \u901a\u77e5\u5143\u306b\u3082\u901a\u77e5\u5148\u306b\u3082\u306a\u308a\u3046\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8868\u3059\npublic protocol SubjectType: ObservableType { // \u666e\u6bb5\u306f Observable \u3068\u3057\u3066\u3075\u308b\u307e\u3046\n\n    typealias SubjectObserverType: ObserverType\n\n    func asObserver() -> SubjectObserverType // \u5fc5\u8981\u306a\u3068\u304d\u306b SubjectObserverType \u306b\u5909\u63db\u3067\u304d\u308b\n\n}\n\n\u3000\u307e\u305f\u3001BehaviorSubject \u3092\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b NSRecursiveLock \u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f lock \u3057\u3066\u3044\u308b\u5834\u5408\u306b\u540c\u4e00\u30b9\u30ec\u30c3\u30c9\u4ee5\u5916\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u3092\u3001unlock \u3055\u308c\u308b\u307e\u3067\u5f85\u305f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002\u4f7f\u3044\u65b9\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u76f4\u611f\u7684\u306a\u3082\u306e\u3067\u3059\u3002\nfunc setNumber(number: Int) {\n    lock.lock()\n    self.number = number\n    lock.unlock()\n}\n\n\u3000\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u629c\u3051\u308b\u3068\u304d\u306b\u5fc5\u305a unlock \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u70b9\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306a\u306e\u304b\u3001RxSwift \u3067\u306f defer \u3092\u4f7f\u3063\u305f\u6b21\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u304c\u3061\u3089\u307b\u3089\u898b\u53d7\u3051\u3089\u308c\u307e\u3059\uff08\u3068\u306f\u3044\u3048\u7d71\u4e00\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\uff09\u3002\nfunc setNumber(number: Int) {\n    lock.lock(); defer { lock.unlock() }\n    self.number = number\n}\n\n\u3000\u3053\u308c\u3089\u3092\u8e0f\u307e\u3048\u305f\u4e0a\u3067 BehaviorSubject \u306e\u5b9f\u88c5\u3092\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u57fa\u672c\u7684\u306b\u306f\u524d\u7bc0\u3067\u5b9f\u88c5\u3057\u305f StringObservable \u306b\u5bfe\u3057\u3066\u3001SubjectType, Disposable \u306e\u5b9f\u88c5\u3068\u6392\u4ed6\u5236\u5fa1\u3092\u8ffd\u52a0\u3057\u305f\u3060\u3051\u306e\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\npublic final class BehaviorSubject<Element>\n    : Observable<Element>\n    , SubjectType\n    , ObserverType\n    , SynchronizedUnsubscribeType\n    , Disposable {\n\n    public typealias SubjectObserverType = BehaviorSubject<Element>\n    typealias DisposeKey = Bag<AnyObserver<Element>>.KeyType\n\n    private let lock = NSRecursiveLock()\n\n    // BehaviorSubject \u304c\u6301\u3064\u72b6\u614b\n    private var value: Element   // \u4fdd\u6301\u3057\u3066\u3044\u308b\u5024\u305d\u306e\u3082\u306e\n    private var disposed = false // dispose\u6e08\u307f\u304b\u3069\u3046\u304b\u3092\u4fdd\u6301\u3059\u308b\u3060\u3051\n    private var observers = Bag<AnyObserver<Element>>() // \u901a\u77e5\u5148\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\n    private var stoppedEvent: Event<Element>?           // \u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u9589\u3058\u305f\u3068\u304d\u3001\u305d\u306e\u7d42\u7aef\u3092\u4fdd\u6301\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\n\n    public init(value: Element) {\n        self.value = value\n    }\n\n    public func on(event: Event<E>) {\n        lock.lock(); defer { lock.unlock() }\n        guard stoppedEvent == nil && !disposed else { return } // \u3059\u3067\u306b\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u9589\u3058\u3066\u3044\u308b\u3068\u304d\u306f\u4f55\u3082\u3057\u306a\u3044\n        switch event {\n        case .Next(let value): self.value = value\n        case .Error, .Completed: self.stoppedEvent = event\n        }\n        observers.forEach { $0.on(event) } // observer\u5404\u4f4d\u306b\u901a\u77e5\n    }\n\n    public override func subscribe<O : ObserverType where O.E == Element>(observer: O) -> Disposable {\n        lock.lock(); defer { lock.unlock() }\n        if disposed {\n            // \u3059\u3067\u306b dispose \u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8cfc\u8aad\u3067\u304d\u306a\u3044\u65e8\u306e\u30a8\u30e9\u30fc\u5024\u3092\u8fd4\u3059\n            observer.on(.Error(NSError(domain: \"RxErrorDomain\", code: 0, userInfo: [\"message\":\"already disposed\"])))\n            // \u8cfc\u8aad\u306b\u81f3\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u4f55\u3082\u3057\u306a\u3044 Disposable \u3092\u8fd4\u3059\uff08\u4e0b\u90e8\u306b\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\uff09\n            return NopDisposable.instance\n        } else if let stoppedEvent = stoppedEvent {\n            // \u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30a8\u30e9\u30fc\u304b\u5b8c\u4e86\u30a4\u30d9\u30f3\u30c8\u306b\u3088\u3063\u3066\u9589\u3058\u3066\u3044\u308b\u306e\u3067\u3001\u6700\u7d42\u30a4\u30d9\u30f3\u30c8\u3092\u8fd4\u3059\n            observer.on(stoppedEvent)\n            // \u8cfc\u8aad\u306b\u81f3\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u4f55\u3082\u3057\u306a\u3044 Disposable \u3092\u8fd4\u3059\uff08\u4e0b\u90e8\u306b\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\uff09\n            return NopDisposable.instance\n        } else {\n            // \u901a\u5e38\u901a\u308a\u3001\u901a\u77e5\u5148\u30ea\u30b9\u30c8\u306b\u3076\u3061\u8fbc\u307f\u3001SubcriptionDisposable\u3092\u8fd4\u3059\n            let key = observers.insert(AnyObserver(observer: observer))\n            observer.on(.Next(value))\n            return SubscriptionDisposable(owner: self, key: key)\n        }\n    }\n\n    func synchronizedUnsubscribe(disposeKey: DisposeKey) {\n        lock.lock(); defer { lock.unlock() }\n        if !disposed {\n            observers.removeKey(disposeKey)\n        }\n    }\n\n    public func asObserver() -> BehaviorSubject<Element> {\n        return self\n    }\n\n    public func dispose() {\n        lock.lock(); defer { lock.unlock() }\n        disposed = true\n        observers.removeAll()\n        stoppedEvent = nil\n    }\n\n}\n\npublic class NopDisposable: Disposable {\n\n    private init() {}\n    public static let instance = NopDisposable()\n\n    public func dispose() {}\n\n}\n\n\u3000\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u30b3\u30fc\u30c9\u306f\u524d\u7bc0\u3068\u307b\u307c\u540c\u3058\u5f62\u3068\u306a\u308a\u307e\u3059\u3002\nlet observable = BehaviorSubject(value: \"cocoa\")\nlet disposable = observable.subscribe(AnyObserver<String> {\n    switch $0 {\n    case .Next(let str): NSLog(str)\n    default: break\n    }\n})\nobservable.on(.Next(\"chino\")) //=> NSLog(\"chino\") \u3055\u308c\u308b\n\ndisposable.dispose()\nobservable.on(.Next(\"megu\"))  //=> AnyObserver\u306e\u8cfc\u8aad\u3092\u89e3\u9664\u3057\u3066\u3044\u308b\u306e\u3067\u3001NSLog\u3055\u308c\u306a\u3044\n\n\nVariable\n\u3000BehaviorSubject \u306f on \u3067 .Error \u3084 .Completed \u3092\u6e21\u3059\u3053\u3068\u306b\u3088\u308a\u9589\u3058\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001\u305f\u3060\u306e\u5024\u3092 Observable \u306b\u3057\u305f\u3044\u3060\u3051\u306a\u3089\u305d\u3093\u306a\u6a5f\u80fd\u306f\u8981\u3089\u306a\u3044\u306f\u305a\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u305d\u3046\u3044\u3063\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u96a0\u853d\u3057\u3001\u3082\u3063\u3068\u5909\u6570\u30e9\u30a4\u30af\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u304c Variable \u3067\u3059\u3002\u57fa\u672c\u7684\u306b\u5b9f\u88c5\u306f\u3001\u305f\u3060\u306e\u5909\u6570\u30e9\u30c3\u30d1\u30fc + asObservable \u306e\u305f\u3081\u306b\u4fdd\u6301\u3057\u3066\u3044\u308bBehaviorSubject \u3067\u3059\u304c\u3001\u4e0d\u8981\u306aAPI\u306e\u96a0\u853d\u3068\u3001\u5909\u6570\u3068\u3057\u3066\u6271\u3046\u306e\u306b\u4fbf\u5229\u306a computed property \u3092\u751f\u3084\u3059\u5f79\u5272\u3092\u62c5\u3063\u3066\u3044\u308b\u3068\u8a00\u3063\u3066\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\npublic class Variable<Element> {\n\n    public typealias E = Element\n\n    private let subject: BehaviorSubject<Element>\n    private var lock = NSRecursiveLock()\n    private var _value: E\n\n    public var value: E {\n        get {\n            lock.lock(); defer { lock.unlock() }\n            return _value\n        }\n        set(newValue) {\n            lock.lock()\n            _value = newValue\n            lock.unlock()\n            subject.on(.Next(newValue))\n        }\n    }\n\n    public init(_ value: Element) {\n        _value = value\n        subject = BehaviorSubject(value: value)\n    }\n\n    public func asObservable() -> Observable<E> {\n        return subject\n    }\n\n    deinit {\n        subject.on(.Completed)\n    }\n\n}\n\n\u3000\u3053\u3046\u3057\u3066\u53d6\u308a\u56de\u3057\u306e\u304d\u304f Variable \u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002RxSwift \u306b\u306f\u4ed6\u306b PublishSubject \u3084 ReplaySubject \u3068\u3044\u3046\u3088\u3046\u306a Subject \uff08\u901a\u77e5\u5143\u306b\u3082\u901a\u77e5\u5148\u306b\u3082\u306a\u308a\u3046\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u304c\u5b58\u5728\u3057\u307e\u3059\u306e\u3067\u3001\u307e\u305f\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u5225\u306e\u8a18\u4e8b\u3067\u3054\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u3053\u307e\u3067\u8a18\u4e8b\u306e\u5185\u5bb9\u3092\u7406\u89e3\u3057\u306a\u304c\u3089\u8aad\u307f\u9032\u3081\u3066\u3044\u308b\u65b9\u3067\u3042\u308c\u3070\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u3055\u3048\u3059\u308c\u3070\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u5927\u4f53\u308f\u304b\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u307e\u3068\u3081\n\u3000\u6b74\u53f2\u7684\u7d4c\u7def\u306f\u3068\u3082\u3042\u308c\u3001Rx \u306e\u57fa\u672c\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3042\u308b Observable, Observer \u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8aac\u660e\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\uff08\u81ea\u5206\u306f\u6b74\u53f2\u7684\u7d4c\u7def\u306f\u77e5\u3089\u306a\u3044\u306e\u3067\u5b9f\u969b\u306e\u6d41\u308c\u306f\u9055\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff09\n\npush \u578b Observer \u30d1\u30bf\u30fc\u30f3\u304c\u57fa\u672c\u7684\u306a\u51fa\u767a\u70b9\n\u5024\u306b next, error, completed \u3068\u3044\u3046\u6587\u8108\u3092\u3064\u3051\u305f\u3082\u306e\u304c push \u306e\u5bfe\u8c61\u7269\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u7279\u5fb4\u7684\n\u8cfc\u8aad\u89e3\u9664\u306e\u4ed5\u7d44\u307f\u3092 Disposable \u306b\u5206\u96e2\u3057\u3066\u3044\u308b\u306e\u304c\u7279\u5fb4\u7684\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u308b\u3068 Observable, Observer \u3068\u3044\u3063\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u81ea\u7136\u306b\u5c0e\u304d\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n\n\u3000\u307e\u305f\u3001Observable \u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u306e\u3046\u3061\u306e\u3072\u3068\u3064\u3067\u3042\u308b BehaviorSubject \u3084 Variable \u306a\u3069\u306b\u3064\u3044\u3066\u306f\u6b21\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u8a00\u3048\u307e\u3059\u3002\n\n\u3042\u308b\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u89b3\u6e2c\u53ef\u80fd\u306a\u72b6\u614b\uff08Observable\uff09\u306b\u7c21\u5358\u306b\u30ea\u30d5\u30c8\u30a2\u30c3\u30d7\u3055\u305b\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u5f79\u5272\u3092\u6301\u3064\n\u540c\u6642\u306b\u3001\u89b3\u6e2c\u8005\u5074\uff08Observer\uff09\u306b\u3082\u5909\u63db\u3067\u304d\u308b\u72b6\u614b\u306b\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\n\u4e2d\u8eab\u306f\u3001\u5358\u7d14\u306b push \u578b Observer \u30d1\u30bf\u30fc\u30f3\u306e Observable \u304c\u3084\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u3092\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3060\u3051\n\n\u3000\u6700\u5f8c\u306b\u3082\u3046\u4e00\u5ea6\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u304c\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u3001RxSwift \u306f\u4f7f\u3048\u307e\u3059\u306e\u3067\u3001\u5229\u7528\u3092\u8ff7\u3063\u3066\u3044\u308b\u65b9\u306f\u3001\u5df7\u306b\u98db\u3073\u4ea4\u3046\u8a18\u4e8b\u306b\u60d1\u308f\u3055\u308c\u305a\u3001\u662f\u975e\u516c\u5f0f\u306e Example \u3084 Playground \u3092\u771f\u4f3c\u3057\u3066\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nAppendix\n\n\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\nRxSwift\u306fMIT\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a18\u4e8b\u5185\u306e\u30b3\u30fc\u30c9\u306f\u30e9\u30a4\u30bb\u30f3\u30b9\u306b\u57fa\u3065\u304d\u3001\u305d\u306e\u307e\u307e\u63b2\u8f09\u3057\u3066\u3044\u308b\u7b87\u6240\u3084\u6539\u5909\u3057\u3066\u63b2\u8f09\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\nThe MIT License Copyright \u00a9 2015 Krunoslav Zaher All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n<div class=\"alert alert-info text-center\">\u3053\u306e\u8a18\u4e8b\u306f <a href=\"http://connpass.com/event/27933/\">RxSwift\u52c9\u5f37\u4f1a</a> \u306e\u767a\u8868\u88dc\u8db3\u8cc7\u6599\u3067\u3059</div>\n\n\u3000Swift\u3067\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b9f\u73fe\u3059\u308b `RxSwift` \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3053\u3053\u6700\u8fd1\u6ce8\u76ee\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u305d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u3067\u306f\u306a\u304f\u3001 **\u30e9\u30a4\u30d6\u30e9\u30ea\u81ea\u4f53\u306e\u4f5c\u308a\u65b9** \u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\u4e00\u3064\u306e\u8a18\u4e8b\u3067\u3059\u3079\u3066\u3092\u8aac\u660e\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u53b3\u3057\u3044\u306e\u3067\u3001\u307e\u305a `Observer` \u3084 `Observable` \u3068\u3044\u3063\u305f\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u305d\u306e\u5468\u8fba\u306b\u3064\u3044\u3066\u3001\u3072\u3068\u3064\u305a\u3064\u4f5c\u3063\u3066\u3044\u304f\u6d41\u308c\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n### \u6ce8\u610f\u4e8b\u9805\n\n* \u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u7406\u89e3\u3057\u306a\u304f\u3066\u3082 RxSwift \u306f\u5341\u5206\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\n* \u307e\u3060 Rx \u7cfb\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u65b9\u306f\u3001\u307e\u305a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\n  * Qiita\u306e\u8a18\u4e8b\u3092\u8aad\u3080\u306e\u3082\u3088\u3044\u3067\u3059\u304c\u3001[\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md)\u3084[Example](https://github.com/ReactiveX/RxSwift/tree/master/RxExample/RxExample/Examples)\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u8aad\u307f\u306a\u304c\u3089\u3001\u307e\u305a\u306f\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u308b\u3053\u3068\u3092\u5f37\u304f\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u610f\u5916\u306b\u7c21\u5358\u306b\u4f7f\u3044\u3069\u3053\u308d\u304c\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n* \u8a18\u4e8b\u306e\u5185\u5bb9\u7684\u306b\u306f Rx \u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5229\u7528\u7d4c\u9a13\u304c\u306a\u304f\u3066\u3082\u5206\u304b\u308b\u3088\u3046\u306b\u66f8\u3044\u305f\u3064\u3082\u308a\u3067\u3059\n* \u4ee5\u4e0b\u306e\u5b9f\u88c5\u306f RxSwift \u306e\u3082\u306e\u3067\u3042\u308a\u3001\u4ed6\u8a00\u8a9e\u306e Rx \u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306f\u5b9f\u88c5\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\n\n## Observer\u30d1\u30bf\u30fc\u30f3\u306e\u5fa9\u7fd2\n\n\u4ee5\u4e0b\u306e\u554f\u984c\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u3044\u304d\u307e\u3059\n\n* \u3010\u554f\u984c\u3011 A \u304c\u66f4\u65b0\u3055\u308c\u305f\u3053\u3068\u3092\u3001B \u306b\u901a\u77e5\u3057\u305f\u3044\n* \u3010\u89e3\u6c7a\u7b56\u3011 A \u304c B \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u6301\u3057\u3001B \u306b \u5909\u66f4\u3092\u4f1d\u3048\u308b\n\n\u89e3\u6c7a\u7b56\u3092\u5358\u7d14\u306b\u5b9f\u88c5\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u69cb\u9020\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\n\n![](https://qiita-image-store.s3.amazonaws.com/0/56771/c13c3d7e-7525-11b3-f854-98ea4a492b92.png)\n\n\u3000\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u304c\u3001\u554f\u984c\u3092\u3057\u3063\u304b\u308a\u3068\u89e3\u6c7a\u3067\u304d\u3066\u3044\u307e\u3059\u3002\u7d9a\u3044\u3066\u300c\u901a\u77e5\u5148\u304c\u5897\u3048\u305d\u3046\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u6761\u4ef6\u304c\u52a0\u308f\u3063\u305f\u3092\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u307e\u307e\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u554f\u984c\u304c\u767a\u751f\u3057\u305d\u3046\u3067\u3059\u3002\n\n* \u901a\u77e5\u5148\u304c\u5897\u6e1b\u3059\u308b\u305f\u3073\u306b A \u306e\u5185\u90e8\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n* \u901a\u77e5\u5148\u306eI/F\u306e\u5909\u66f4\u306b\u3088\u308a A \u306e\u5185\u90e8\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\n\u3000\u3053\u306e2\u70b9\u306f\u3068\u3082\u306b\u3001\u901a\u77e5\u5143\u304c\u901a\u77e5\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8a73\u7d30\u3092\u77e5\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u751f\u3058\u3066\u3044\u308b\u554f\u984c\u3067\u3059\u3002\u901a\u77e5\u5143\u306f\u3069\u3046\u3042\u304c\u3044\u3066\u3082\u3001\u901a\u77e5\u5148\u3092\u4fdd\u6301\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u8a73\u7d30\u3092\u77e5\u3063\u305f\u307e\u307e\u4fdd\u6301\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u306f\u305a\u3067\u3059\u3002\n\n\u3000\u3057\u305f\u304c\u3063\u3066\u901a\u77e5\u5143\u306f\u3001\u5fc5\u8981\u306e\u306a\u3044\u60c5\u5831\u3092\u305d\u304e\u843d\u3068\u3057\u305f\u72b6\u614b\u3067\u901a\u77e5\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u6301\u3059\u308c\u3070\u3001\u554f\u984c\u304c\u89e3\u6c7a\u3057\u305d\u3046\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u901a\u77e5\u5148\u306b\u5171\u901a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08Swift\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\uff09\u3092\u5207\u308c\u3070\u3088\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n![](https://qiita-image-store.s3.amazonaws.com/0/56771/6cfb9826-a193-2489-93e6-5de7a262e41f.png)\n\n\u3000\u307e\u305f\u3001\u901a\u77e5\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7a2e\u985e\u3092\u5897\u3084\u3057\u305f\u3044\u3068\u3059\u308c\u3070\u3001\u3053\u3061\u3089\u3082\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5207\u3063\u3066\u304a\u304f\u3068\u4f7f\u3044\u307e\u308f\u3057\u304c\u52b9\u3044\u3066\u4fbf\u5229\u3067\u3059\u3002`Observer` \u304c `Observable` \u304b\u3089\u306e\u901a\u77e5\u3092\u53d7\u3051\u53d6\u308a\u59cb\u3081\u308b\u305f\u3081\u306e `attach` \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3068\u3001\u901a\u77e5\u306e\u53d7\u3051\u53d6\u308a\u3092\u89e3\u9664\u3059\u308b\u305f\u3081\u306e `detach` \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308c\u3070\u5341\u5206\u3067\u3057\u3087\u3046\u3002\n\n![](https://qiita-image-store.s3.amazonaws.com/0/56771/24f5e3f9-ebfc-e7ea-90c2-d07fc353e915.png)\n\n\n\u3000\u3053\u306e\u5f62\u5f0f\u3092 pull \u578b Observer \u30d1\u30bf\u30fc\u30f3\u3068\u547c\u3073\u307e\u3059\u3002`Observer` \u304c\u901a\u77e5\u3092\u53d7\u3051\u305f\u3042\u3068\u306b\u3001`Observable` \u304b\u3089\u5024\u3092\u5f15\u3063\u5f35\u3063\u3066\u3053\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\u306b pull \u3068\u3044\u3046\u540d\u524d\u304c\u4ed8\u3044\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b `Observable` \u304c\u66f4\u65b0\u6642\u306b `Observer` \u306b\u5bfe\u3057\u3066\u5024\u3092\u6295\u3052\u308b\u3088\u3046\u306a\u5b9f\u88c5\u3082\u53ef\u80fd\u3067\u3059\u3002\u3053\u3061\u3089\u306f push \u578b\u3068\u3088\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\n![](https://qiita-image-store.s3.amazonaws.com/0/56771/54b62248-2987-111a-8fb6-4864d862252a.png)\n\n\u3000\u3053\u306e UML \u3092 Swift \u306e\u5b9f\u88c5\u3078\u5358\u7d14\u306b\u843d\u3068\u3057\u8fbc\u3080\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002Swift\u306e protocol \u306f\u3001generic type parameter \u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u4ee3\u308f\u308a\u306b\u95a2\u9023\u578b (\u301c2.1: `typealias`, 2.2+: `associatedtype`) \u3067\u8868\u73fe\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3000\u3053\u3053\u307e\u3067\u304f\u308c\u3070 Observer\u30d1\u30bf\u30fc\u30f3\u306e\u57fa\u790e\u306b\u3064\u3044\u3066\u306f\u306a\u3093\u3068\u306a\u304f\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u6b21\u7bc0\u3067\u306f RxSwift \u3067\u306f\u3069\u306e\u3088\u3046\u306b push \u578b\u306e Observer \u30d1\u30bf\u30fc\u30f3\u306b\u7528\u3044\u3089\u308c\u308b\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u69cb\u6210\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## Observer, Observable \u3092\u4f5c\u308b\uff08Rx\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e0b\u3054\u3057\u3089\u3048\uff09\n\n\u3000\u3053\u3053\u304b\u3089\u306f\u5b9f\u969b\u306b RxSwift \u3067\u3069\u306e\u3088\u3046\u306b Observer \u3068 Observable \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u57fa\u672c\u7684\u306b\u306f push \u578b\u306e Observer \u30d1\u30bf\u30fc\u30f3\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3057\u3066\u3044\u3051\u3070\u826f\u3044\u3060\u3051\u3067\u3059\u3002\u305f\u3060\u3057Rx\u3067\u306f\u5024\u3092\u5358\u7d14\u306b\u901a\u77e5\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6210\u529f(Next)\u3001\u5931\u6557(Error)\u3001\u5b8c\u4e86(Completed)\u3068\u3044\u3046\u6587\u8108\u3092\u3064\u3051\u305f **\u30a4\u30d9\u30f3\u30c8** \u3092\u901a\u77e5\u3057\u307e\u3059\u3002\u307e\u305f\u3001`Observer` \u3092 `Observable` \u306b\u767b\u9332\u3057\u305f\u969b\u306b `Disposable` \u3068\u3044\u3046I/F\u3092\u6301\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3057\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8cfc\u8aad\u89e3\u9664\u306e\u6a5f\u69cb\u3092\u6301\u305f\u305b\u3066\u3044\u308b\u70b9\u3082\u7279\u5fb4\u7684\u3067\u3059\u3002\n\n```swift\npublic enum Event<Element> {\n    case Next(Element)\n    case Error(ErrorType)\n    case Completed\n}\n```\n\n\u3057\u305f\u304c\u3063\u3066\u5b9f\u73fe\u3057\u305f\u3044\u69cb\u9020\u306f\u4e0b\u56f3\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n![](https://qiita-image-store.s3.amazonaws.com/0/56771/c21b4d12-3cb4-5684-dc3e-9239d80a75e2.png)\n\n\n### ObserverType, ObservableType \u306e\u5b9f\u88c5\n\n\u3000\u524d\u8ff0\u3057\u305f\u3068\u304a\u308a\u3001protocol \u306b\u306f generic type parameter \u3092\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u307e\u305a\u95a2\u9023\u578b\u3092\u7528\u3044\u3066 `ObserverType` \u3068 `ObservableType` \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```swift\n// \u901a\u77e5\u5148\npublic protocol ObserverType {\n    \n    typealias E\n    \n    // \u901a\u77e5\u3092\u53d7\u3051\u308b\u53e3\n    func on(event: Event<E>)\n    \n}\n\n// \u901a\u77e5\u5143\npublic protocol ObservableType {\n\n    typealias E\n    \n    // \u901a\u77e5\u5148\u3092\u767b\u9332\u3059\u308b\u53e3\n    func subscribe<O: ObserverType where O.E == E>(observer: O) -> Disposable\n    \n}\n\n\npublic protocol Disposable {\n    \n    func dispose()\n    \n}\n```\n\n### Observable \u306e\u5b9f\u88c5\n\n\u3000\u3055\u3066\u3001\u3053\u3046\u3057\u3066\u5b9a\u7fa9\u3057\u305f ObservableType \u30d7\u30ed\u30c8\u30b3\u30eb \u3092 generic type parameter \u3092\u7528\u3044\u305f\u30af\u30e9\u30b9\u306b\u843d\u3068\u3057\u8fbc\u307f\u307e\u3059\u3002Swift\u306e\u8a00\u8a9e\u6a5f\u80fd\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u306f\u919c\u3044\u8868\u73fe\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 **\u672c\u6765\u3067\u3042\u308c\u3070\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3067\u304d\u306a\u3044\u3088\u3046\u306b abstract class \u306b\u3059\u308b\u3088\u3046\u306a\u90e8\u5206** \u3060\u3068\u601d\u3044\u307e\u3059\u3002RxSwift \u5185\u3067\u306f\u3001\u82e6\u3057\u7d1b\u308c\u3067\u3059\u304c `@noreturn` \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n```swift\npublic class Observable<Element>: ObservableType {\n    \n    public typealias E = Element\n    \n    public func subscribe<O : ObserverType where O.E == E>(observer: O) -> Disposable {\n        abstractMethod()\n    }\n    \n}\n\n/// \u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u82e6\u8089\u306e\u7b56\n@noreturn func abstractMethod() -> Void {\n    fatalError(\"abstract method\")\n}\n```\n\n\u3000\u3053\u3053\u3067\u767b\u5834\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u306f\u3001\u306a\u305c\u304b\u7686\u3055\u3093\u5927\u597d\u304d\u306a type erasure \u3067\u3059\u304c\u3001\u3053\u308c\u3092\u3084\u3089\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u306e\u306f\u6c7a\u3057\u3066\u8912\u3081\u3089\u308c\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u500b\u4eba\u7684\u306b\u306f\u666e\u901a\u306bJava\u3088\u308a\u52a3\u3063\u3066\u308b\u3067\u3057\u3087\u3063\u3066\u611f\u60f3\u3067\u3059\uff08\u2190\u708e\u4e0a\u3057\u305d\u3046\uff09\u3002Swift \u306e protocol \u304c generic type parameter \u3092\u6301\u3066\u306a\u3044\u7406\u7531\u306b\u3064\u3044\u3066\u306f\u3001[\u3053\u306e\u8a18\u4e8b](http://qiita.com/omochimetaru/items/b41e7699ea25a324aefa)\u306b\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u3053\u306e\u70b9\u306b\u3064\u3044\u3066\u81ea\u5206\u306f\u7406\u89e3\u3067\u304d\u3066\u306f\u3044\u307e\u305b\u3093\u3002\n\n### AnyObserver \u306e\u5b9f\u88c5\n\n\u3000ObserverType \u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u307b\u3046\u3082 generic type parameter \u3092\u4f7f\u3063\u305f\u5f62\u3067\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u901a\u77e5\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3092\u3059\u308b\u306e\u304c `Observer` \u306e\u5f79\u5272\u3067\u3042\u308b\u306e\u3067\u3001\u5358\u7d14\u306b `Event<E> -> Void` \u3092\u53d7\u3051\u53d6\u308a\u3001 `on(Event<E>)` \u3067\u9069\u5207\u306b\u547c\u3073\u51fa\u3057\u3066\u3042\u3052\u308c\u3070 OK \u3067\u3059\u3002\n\n```swift\npublic class AnyObserver<Element>: ObserverType {\n    \n    public typealias E = Element\n    public typealias EventHandler = Event<E> -> Void\n    private let eventHandler: EventHandler\n    \n    public init(eventHandler: EventHandler) {\n        self.eventHandler = eventHandler\n    }\n    \n    public init<O: ObserverType where O.E == Element>(observer: O) {\n        self.eventHandler = observer.on\n    }\n    \n    public func on(event: Event<E>) {\n        eventHandler(event)\n    }\n    \n}\n```\n\nSwift\u306e\u8a00\u8a9e\u4ed5\u69d8\u306b\u963b\u307e\u308c\u3001\u968f\u5206\u9060\u56de\u308a\u306b\u306f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u7121\u4e8b `Observable<Element>` \u3068 `Observer<Element>` \u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\n## Observable\u306e\u5177\u8c61\u30af\u30e9\u30b9\u3092\u4f5c\u308d\u3046\n### Bag, SubscriptionDisposable \u306e\u5b9f\u88c5\n\n\n\u3000\u5148\u307b\u3069\u5b9a\u7fa9\u3057\u305f `Observable<Element>` \u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5b9f\u88c5\u304c\u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u306f `subscribe` \u3067\u3059\u3002\u3053\u3053\u3067\u306f\u53d7\u3051\u53d6\u3063\u305f `observer` \u3092\u4fdd\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3000\n\u3000`observer` \u306f `O: ObserverType where O.E == E` \u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u6e21\u3063\u3066\u304d\u307e\u3059\u304c\u3001`ObserverType` \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3053\u3068\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u3067\u304d\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089 `ObserverType` \u306f abstract type member \u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u578b\u5236\u7d04\u3092\u5229\u7528\u3057\u3066 `AnyObserver<E>` \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3042\u3052\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u4f8b\u304c\u7a1a\u62d9\u3067\u7533\u3057\u8a33\u306a\u3044\u306e\u3067\u3059\u304c\u3001`Observable<String>` \u3067\u3042\u308b\u3088\u3046\u306a `StringObservable` \u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3057\u3066\u3001\u66f8\u304d\u51fa\u3057\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff08\u5b9f\u969b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u3053\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff09\u3002\n\n```swift\npublic class StringObservable: Observable<String> {\n\n    private var observers: [AnyObserver<String>] = []\n    \n    private var _string: String\n    public var string: String {\n        get {\n            return _string\n        }\n        set(value) {\n            self._string = value\n            observers.forEach { $0.on(.Next(value)) }\n        }\n    }\n    \n    public init(string: String) {\n        self._string = string\n    }\n\n    \n    public func subscribe<O : ObserverType where O.E == E>(observer: O) -> Disposable {\n        observers.append(AnyObserver(observer: observer))\n        // \u3064\u3065\u304f...\n    }\n   \n}\n```\n\n\u3000`subscribe` \u306b\u6e21\u3063\u305f `observer` \u306f\u3001`observers` \u306b\u767b\u9332\u3055\u308c\u3001\u4f55\u304b\u30a4\u30d9\u30f3\u30c8\u304c\u3042\u3063\u305f\u3089\u901a\u77e5\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u30a4\u30d9\u30f3\u30c8\u8cfc\u8aad\u306e\u6a5f\u80fd\u306e\u5b9f\u88c5\u306f\u3053\u308c\u3067\u3068\u308a\u3042\u3048\u305aOK\u3068\u3057\u307e\u3057\u3087\u3046\uff08\u3044\u308d\u3044\u308d\u7d30\u304b\u3044\u554f\u984c\u306f\u3042\u308a\u307e\u3059\u304c\u3068\u308a\u3042\u3048\u305a\u7f6e\u3044\u3066\u304a\u304f\uff09\u3002\n\u3000\n\u3000\u7d9a\u3044\u3066\u30a4\u30d9\u30f3\u30c8\u8cfc\u8aad\u89e3\u9664\u306e\u4ed5\u7d44\u307f\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u5358\u306b `observers` \u304b\u3089\u8cfc\u8aad\u3092\u89e3\u9664\u3057\u305f\u3044 `observer` \u3092\u524a\u9664\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3060\u3051\u3067\u3059\u3002\u73fe\u72b6\u306f\u914d\u5217\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u8f9e\u66f8\u7684\u306a\u3082\u306e\u306b\u7a81\u3063\u8fbc\u3093\u3067\u30ad\u30fc\u3092\u6307\u5b9a\u3057\u3066\u524a\u9664\u3067\u304d\u305f\u65b9\u304c\u3001\u53d6\u308a\u56de\u3057\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\u3000\n\u3000\u305d\u3053\u3067\u3001\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3068\u540c\u6642\u306b\u3001 id \u3092\u767a\u884c\u3059\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 `Bag` \u3092\u4f5c\u308a\u307e\u3059\u3002\u5dee\u3057\u5f53\u305f\u3063\u3066\u306e\u554f\u984c\u306f\u3001\u3069\u306e\u3088\u3046\u306b id \u3092\u751f\u6210\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3053\u3053\u3067\u306f Swift \u306e `unsafeAddressOf` \u30e1\u30bd\u30c3\u30c9\u304c\u6697\u8e8d\u3057\u307e\u3059\u3002\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u305d\u306e\u3082\u306e\u304c\u3042\u308b\u7a2e\u306e id \u306e\u5f79\u5272\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30e1\u30e2\u30ea\u306e\u756a\u5730\u3092\u53d6\u5f97\u3059\u308b\u306e\u304c `unsafeAddressOf` \u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\nimport Swift\n\n// \u30af\u30e9\u30b9\u3068\u3057\u3066\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30e1\u30e2\u30ea\u5185\u3067\u30e6\u30cb\u30fc\u30af\u306a\u5b58\u5728\u306b\u306a\u308c\u308b\nclass Identity {\n\n    var value: Int32 = 0\n    \n}\n\n// hash\u5024\u8a08\u7b97\u306e\u304a\u307e\u3058\u306a\u3044\u7684\u306a\u30e4\u30c4\n// \u3053\u306e\u3042\u305f\u308a\u3092\u53c2\u7167(http://stackoverflow.com/posts/12996028/revisions)\nfunc hash(_x: Int) -> Int {\n    var x = _x\n    x = ((x >> 16) ^ x) &* 0x45d9f3b\n    x = ((x >> 16) ^ x) &* 0x45d9f3b\n    x = ((x >> 16) ^ x)\n    return x;\n}\n\npublic struct BagKey: Hashable {\n\n    let uniqueIdentity: Identity?\n    let key: Int\n    \n    public var hashValue: Int {\n        get {\n            // unsafeAddressOf \u3067 \u30e1\u30e2\u30ea\u756a\u5730\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\n            return uniqueIdentity\n                .map { hash(key) ^ (unsafeAddressOf($0).hashValue) } ?? hash(key)\n        }\n    }\n    \n}\n\n// BagKey\u306e\u7b49\u5024\u6027\u3092\u6bd4\u8f03\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\npublic func == (lhs: BagKey, rhs: BagKey) -> Bool {\n    return lhs.key == rhs.key\n        && lhs.uniqueIdentity === rhs.uniqueIdentity\n}\n```\n\n\u3000\u3053\u3046\u3057\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30ad\u30fc\u3068\u306a\u308b `BagKey` \u306e\u5b9f\u88c5\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\u7d9a\u3044\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u672c\u4f53\u3068\u306a\u308b `Bag` \u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3057\u3087\u3046\u3002RxSwift \u306e `Bag` \u306e\u5b9f\u88c5\u306f\u8981\u7d20\u6570\u304c\u5c11\u306a\u3044\u3068\u304d\u306b\u6700\u9069\u5316\u3055\u308c\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u304c\u306e\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u8cea\u3060\u3051\u629c\u304d\u51fa\u3059\u3068\u305f\u3060\u306e Key-Value store \u3067\u3059\u3002\n\n```swift\npublic struct Bag<T> {\n    \n    public typealias KeyType = BagKey\n    private typealias ScopeUniqueTokenType = Int\n    typealias Entry = (key: BagKey, value: T)\n    \n    private var dictionary: [BagKey:T] = [BagKey:T]()\n\n    private var uniqueIdentity: Identity?\n    private var nextKey: ScopeUniqueTokenType = 0\n    \n    public init() {}\n    \n    public mutating func insert(element: T) -> BagKey {\n        nextKey = nextKey &+ 1\n        if nextKey == 0 {\n            uniqueIdentity = Identity()\n        }\n        let key = BagKey(uniqueIdentity: uniqueIdentity, key: nextKey)\n        dictionary[key] = element\n        return key\n    }\n    \n    public var count: Int {\n        return dictionary.count\n    }\n    \n    public mutating func removeAll() {\n        dictionary.removeAll(keepCapacity: false)\n    }\n    \n    public mutating func removeKey(key: BagKey) -> T? {\n        return dictionary.removeValueForKey(key)\n    }\n    \n}\n```\n\n\u3000\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002\u3082\u3046\u4e00\u5ea6\u3084\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002`Observable#subscribe` \u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u884c\u3044\u305f\u3044\u306e\u3067\u3057\u305f\u3002\n\n\n1. \u53d7\u3051\u53d6\u3063\u305f `observer` \u3092 `Bag` \u306b\u7a81\u3063\u8fbc\u3080\uff08\u901a\u77e5\u5148\u3092\u4fdd\u6301\u3059\u308b\uff09\n2. \u53d7\u3051\u53d6\u3063\u305f `observer` \u3092 `Bag` \u304b\u3089\u4e00\u610f\u306b\u63a2\u305b\u308b\u3088\u3046\u306a\u30ad\u30fc\u3068\u3001`Observable` \u81ea\u8eab\u306e\u5f31\u53c2\u7167\u3092\u6301\u3061\u3001`dispose` \u3067\u8cfc\u8aad\u89e3\u9664\u304c\u3067\u304d\u308b\u3088\u3046\u306a `Disposable` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\n\n\u3000`2.` \u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b `Disposable` \u306e\u5177\u8c61\u30af\u30e9\u30b9\u3068\u3057\u3066 `SubscriptionDisposable` \u3068\u3044\u3046\u3082\u306e\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u69cb\u9020\u306f\u3068\u3066\u3082\u5358\u7d14\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\nstruct SubscriptionDisposable<T: SynchronizedUnsubscribeType>: Disposable {\n    \n    private let key: T.DisposeKey\n    private weak var owner: T?\n    \n    init(owner: T, key: T.DisposeKey) {\n        self.owner = owner\n        self.key = key\n    }\n    \n    func dispose() {\n        owner?.synchronizedUnsubscribe(key)\n    }\n    \n}\n\nprotocol SynchronizedUnsubscribeType: class {\n    \n    typealias DisposeKey\n    \n    func synchronizedUnsubscribe(disposeKey: DisposeKey)\n    \n}\n```\n\n\u3000`observer` \u3092\u6240\u6709\u3057\u3066\u3044\u308b `owner` \u306b\u30ad\u30fc\u3092\u6307\u5b9a\u3057\u3066\u8cfc\u8aad\u89e3\u9664\u304c\u3067\u304d\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001 `owner` \u81ea\u8eab\u306f `SynchronizedUnsubscribeType` \u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3044\u3063\u305f\u90e8\u5206\u3082\u542b\u3081\u3066 `StringObservable` \u306e\u5b9f\u88c5\u3092\u4fee\u6b63\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\npublic class StringObservable: Observable<String>, SynchronizedUnsubscribeType {\n    \n    typealias DisposeKey = Bag<AnyObserver<String>>.KeyType\n\n    var bag: Bag<AnyObserver<String>> = Bag()\n    \n    private var _string: String\n    private var string: String {\n        get {\n            return _string\n        }\n        set(value) {\n            self._string = value\n            bag.on(.Next(value))\n        }\n    }\n    \n    public init(string: String) {\n        self._string = string\n    }\n\n    \n    public func subscribe<O : ObserverType where O.E == E>(observer: O) -> Disposable {\n        let key = bag.insert(AnyObserver(observer: observer))\n        return SubscriptionDisposable(owner: self, key: key)\n    }\n    \n    func synchronizedUnsubscribe(disposeKey: DisposeKey) {\n        bag.removeKey(disposeKey)\n    }\n   \n}\n```\n\n\u3000\u3053\u308c\u304c\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u4e0b\u3067\u6b63\u3057\u304f\u52d5\u304f\u304b\u3068\u3044\u3046\u3068\u3001\u307e\u305f\u305d\u308c\u306f\u5225\u306e\u8a71\u306a\u306e\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u4e0b\u3067 Observer \u30d1\u30bf\u30fc\u30f3\u3092\u5b9f\u73fe\u3055\u305b\u308b\u305f\u3081\u306e Rx \u306e\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u51fa\u63c3\u3044\u307e\u3057\u305f\u3002\u5229\u7528\u5074\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n```swift\nlet observable = StringObservable(string: \"cocoa\")\nlet disposable = observable.subscribe(AnyObserver<String> {\n    switch $0 {\n    case .Next(let str): NSLog(str)\n    default: break\n    }\n})\n\nobservable.value = \"chino\"  //=> NSLog(\"chino\") \u3082\u5b9f\u884c\u3055\u308c\u308b\nobservable.value = \"maya\"  //=> NSLog(\"maya\") \u3082\u5b9f\u884c\u3055\u308c\u308b\nobservable.value = \"megu\"  //=> NSLog(\"megu\") \u3082\u5b9f\u884c\u3055\u308c\u308b\n\ndisposable.dispose()\nobservable.value = \"tippy\"   //=> \u306a\u306b\u3082\u304a\u3053\u3089\u306a\u3044\n```\n\n\u3000\u3053\u3053\u307e\u3067\u304d\u305f\u3089\u3082\u3046 `BehaviorSubject` \u3084 `Variable` \u306e\u5b9f\u88c5\u3092\u8aad\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u5bfe\u5fdc\u306e\u305f\u3081\u306e\u30ed\u30c3\u30af\u51e6\u7406\u306a\u3069\u3082\u5b8c\u7d50\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u52c9\u5f37\u306b\u306a\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\u6b21\u7bc0\u3067\u306f\u305d\u306e\u5b9f\u88c5\u3092\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n## BehaviorSubject, Variable \u306e\u5b9f\u88c5\n### BehaviorSubject\n\n\u3000\u524d\u7bc0\u3067\u306f\u3001String\u5024\u3092\u72b6\u614b\u3068\u3057\u3066\u6301\u3064 `Observable` \u306e\u5177\u8c61\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3092\u4e00\u822c\u5316\u3057\u3066\u4efb\u610f\u306e\u578b\u306e\u5024\u3092\u72b6\u614b\u3068\u3057\u3066\u6301\u3064\u3088\u3046\u306a `Observable` \u304c\u3042\u308c\u3070\u4fbf\u5229\u305d\u3046\u3067\u3059\u3002\u307e\u305f\u3001\u3053\u3046\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u901a\u77e5\u5143\u306b\u306a\u308a\u3046\u308b\u3068\u540c\u6642\u306b\u3001\u901a\u77e5\u5148\u306b\u306a\u308b\u3053\u3068\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u3002\u3053\u306e\u6027\u8cea\u3092 `SubjectType` \u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u666e\u6bb5\u306f\u901a\u77e5\u5143\u3068\u3057\u3066\u632f\u308b\u821e\u3044\u307e\u3059\u304c\u3001\u5fc5\u8981\u306a\u6642\u306b\u901a\u77e5\u5148\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3078\u306e\u5909\u63db\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305b\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b `asObserver()` \u3092\u6301\u3063\u3066\u3044\u308c\u3070\u5927\u4e08\u592b\u305d\u3046\u3067\u3059\u3002\n\n```swift\n// \u901a\u77e5\u5143\u306b\u3082\u901a\u77e5\u5148\u306b\u3082\u306a\u308a\u3046\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8868\u3059\npublic protocol SubjectType: ObservableType { // \u666e\u6bb5\u306f Observable \u3068\u3057\u3066\u3075\u308b\u307e\u3046\n    \n    typealias SubjectObserverType: ObserverType\n    \n    func asObserver() -> SubjectObserverType // \u5fc5\u8981\u306a\u3068\u304d\u306b SubjectObserverType \u306b\u5909\u63db\u3067\u304d\u308b\n    \n}\n```\n\n\u3000\u307e\u305f\u3001`BehaviorSubject` \u3092\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b [`NSRecursiveLock`](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSRecursiveLock_Class/) \u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f `lock` \u3057\u3066\u3044\u308b\u5834\u5408\u306b\u540c\u4e00\u30b9\u30ec\u30c3\u30c9\u4ee5\u5916\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u3092\u3001`unlock` \u3055\u308c\u308b\u307e\u3067\u5f85\u305f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002\u4f7f\u3044\u65b9\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u76f4\u611f\u7684\u306a\u3082\u306e\u3067\u3059\u3002\n\n```swift\nfunc setNumber(number: Int) {\n    lock.lock()\n    self.number = number\n    lock.unlock()\n}\n```\n\n\u3000\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u629c\u3051\u308b\u3068\u304d\u306b\u5fc5\u305a `unlock` \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u70b9\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306a\u306e\u304b\u3001RxSwift \u3067\u306f `defer` \u3092\u4f7f\u3063\u305f\u6b21\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u304c\u3061\u3089\u307b\u3089\u898b\u53d7\u3051\u3089\u308c\u307e\u3059\uff08\u3068\u306f\u3044\u3048\u7d71\u4e00\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\uff09\u3002\n\n```swift\nfunc setNumber(number: Int) {\n    lock.lock(); defer { lock.unlock() }\n    self.number = number\n}\n```\n\n\u3000\u3053\u308c\u3089\u3092\u8e0f\u307e\u3048\u305f\u4e0a\u3067 `BehaviorSubject` \u306e\u5b9f\u88c5\u3092\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u57fa\u672c\u7684\u306b\u306f\u524d\u7bc0\u3067\u5b9f\u88c5\u3057\u305f `StringObservable` \u306b\u5bfe\u3057\u3066\u3001`SubjectType`, `Disposable` \u306e\u5b9f\u88c5\u3068\u6392\u4ed6\u5236\u5fa1\u3092\u8ffd\u52a0\u3057\u305f\u3060\u3051\u306e\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```swift\npublic final class BehaviorSubject<Element>\n    : Observable<Element>\n    , SubjectType\n    , ObserverType\n    , SynchronizedUnsubscribeType\n    , Disposable {\n    \n    public typealias SubjectObserverType = BehaviorSubject<Element>\n    typealias DisposeKey = Bag<AnyObserver<Element>>.KeyType\n\n    private let lock = NSRecursiveLock()\n\n    // BehaviorSubject \u304c\u6301\u3064\u72b6\u614b\n    private var value: Element   // \u4fdd\u6301\u3057\u3066\u3044\u308b\u5024\u305d\u306e\u3082\u306e\n    private var disposed = false // dispose\u6e08\u307f\u304b\u3069\u3046\u304b\u3092\u4fdd\u6301\u3059\u308b\u3060\u3051\n    private var observers = Bag<AnyObserver<Element>>() // \u901a\u77e5\u5148\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\n    private var stoppedEvent: Event<Element>?           // \u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u9589\u3058\u305f\u3068\u304d\u3001\u305d\u306e\u7d42\u7aef\u3092\u4fdd\u6301\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\n    \n    public init(value: Element) {\n        self.value = value\n    }\n\n    public func on(event: Event<E>) {\n        lock.lock(); defer { lock.unlock() }\n        guard stoppedEvent == nil && !disposed else { return } // \u3059\u3067\u306b\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u9589\u3058\u3066\u3044\u308b\u3068\u304d\u306f\u4f55\u3082\u3057\u306a\u3044\n        switch event {\n        case .Next(let value): self.value = value\n        case .Error, .Completed: self.stoppedEvent = event\n        }\n        observers.forEach { $0.on(event) } // observer\u5404\u4f4d\u306b\u901a\u77e5\n    }\n    \n    public override func subscribe<O : ObserverType where O.E == Element>(observer: O) -> Disposable {\n        lock.lock(); defer { lock.unlock() }\n        if disposed {\n            // \u3059\u3067\u306b dispose \u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8cfc\u8aad\u3067\u304d\u306a\u3044\u65e8\u306e\u30a8\u30e9\u30fc\u5024\u3092\u8fd4\u3059\n            observer.on(.Error(NSError(domain: \"RxErrorDomain\", code: 0, userInfo: [\"message\":\"already disposed\"])))\n            // \u8cfc\u8aad\u306b\u81f3\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u4f55\u3082\u3057\u306a\u3044 Disposable \u3092\u8fd4\u3059\uff08\u4e0b\u90e8\u306b\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\uff09\n            return NopDisposable.instance\n        } else if let stoppedEvent = stoppedEvent {\n            // \u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30a8\u30e9\u30fc\u304b\u5b8c\u4e86\u30a4\u30d9\u30f3\u30c8\u306b\u3088\u3063\u3066\u9589\u3058\u3066\u3044\u308b\u306e\u3067\u3001\u6700\u7d42\u30a4\u30d9\u30f3\u30c8\u3092\u8fd4\u3059\n            observer.on(stoppedEvent)\n            // \u8cfc\u8aad\u306b\u81f3\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u4f55\u3082\u3057\u306a\u3044 Disposable \u3092\u8fd4\u3059\uff08\u4e0b\u90e8\u306b\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\uff09\n            return NopDisposable.instance\n        } else {\n            // \u901a\u5e38\u901a\u308a\u3001\u901a\u77e5\u5148\u30ea\u30b9\u30c8\u306b\u3076\u3061\u8fbc\u307f\u3001SubcriptionDisposable\u3092\u8fd4\u3059\n            let key = observers.insert(AnyObserver(observer: observer))\n            observer.on(.Next(value))\n            return SubscriptionDisposable(owner: self, key: key)\n        }\n    }\n    \n    func synchronizedUnsubscribe(disposeKey: DisposeKey) {\n        lock.lock(); defer { lock.unlock() }\n        if !disposed {\n            observers.removeKey(disposeKey)\n        }\n    }\n    \n    public func asObserver() -> BehaviorSubject<Element> {\n        return self\n    }\n\n    public func dispose() {\n        lock.lock(); defer { lock.unlock() }\n        disposed = true\n        observers.removeAll()\n        stoppedEvent = nil\n    }\n\n}\n\npublic class NopDisposable: Disposable {\n    \n    private init() {}\n    public static let instance = NopDisposable()\n    \n    public func dispose() {}\n    \n}\n```\n\n\u3000\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u30b3\u30fc\u30c9\u306f\u524d\u7bc0\u3068\u307b\u307c\u540c\u3058\u5f62\u3068\u306a\u308a\u307e\u3059\u3002\n\n```swift\nlet observable = BehaviorSubject(value: \"cocoa\")\nlet disposable = observable.subscribe(AnyObserver<String> {\n    switch $0 {\n    case .Next(let str): NSLog(str)\n    default: break\n    }\n})\nobservable.on(.Next(\"chino\")) //=> NSLog(\"chino\") \u3055\u308c\u308b\n\ndisposable.dispose()\nobservable.on(.Next(\"megu\"))  //=> AnyObserver\u306e\u8cfc\u8aad\u3092\u89e3\u9664\u3057\u3066\u3044\u308b\u306e\u3067\u3001NSLog\u3055\u308c\u306a\u3044\n```\n\n### Variable\n\n\u3000`BehaviorSubject` \u306f `on` \u3067 `.Error` \u3084 `.Completed` \u3092\u6e21\u3059\u3053\u3068\u306b\u3088\u308a\u9589\u3058\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001\u305f\u3060\u306e\u5024\u3092 `Observable` \u306b\u3057\u305f\u3044\u3060\u3051\u306a\u3089\u305d\u3093\u306a\u6a5f\u80fd\u306f\u8981\u3089\u306a\u3044\u306f\u305a\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u305d\u3046\u3044\u3063\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u96a0\u853d\u3057\u3001\u3082\u3063\u3068\u5909\u6570\u30e9\u30a4\u30af\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u304c `Variable` \u3067\u3059\u3002\u57fa\u672c\u7684\u306b\u5b9f\u88c5\u306f\u3001\u305f\u3060\u306e\u5909\u6570\u30e9\u30c3\u30d1\u30fc + `asObservable` \u306e\u305f\u3081\u306b\u4fdd\u6301\u3057\u3066\u3044\u308b`BehaviorSubject` \u3067\u3059\u304c\u3001\u4e0d\u8981\u306aAPI\u306e\u96a0\u853d\u3068\u3001\u5909\u6570\u3068\u3057\u3066\u6271\u3046\u306e\u306b\u4fbf\u5229\u306a computed property \u3092\u751f\u3084\u3059\u5f79\u5272\u3092\u62c5\u3063\u3066\u3044\u308b\u3068\u8a00\u3063\u3066\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```swift\npublic class Variable<Element> {\n    \n    public typealias E = Element\n    \n    private let subject: BehaviorSubject<Element>\n    private var lock = NSRecursiveLock()\n    private var _value: E\n    \n    public var value: E {\n        get {\n            lock.lock(); defer { lock.unlock() }\n            return _value\n        }\n        set(newValue) {\n            lock.lock()\n            _value = newValue\n            lock.unlock()\n            subject.on(.Next(newValue))\n        }\n    }\n    \n    public init(_ value: Element) {\n        _value = value\n        subject = BehaviorSubject(value: value)\n    }\n    \n    public func asObservable() -> Observable<E> {\n        return subject\n    }\n    \n    deinit {\n        subject.on(.Completed)\n    }\n    \n}\n```\n\n\u3000\u3053\u3046\u3057\u3066\u53d6\u308a\u56de\u3057\u306e\u304d\u304f `Variable` \u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002RxSwift \u306b\u306f\u4ed6\u306b `PublishSubject` \u3084 `ReplaySubject` \u3068\u3044\u3046\u3088\u3046\u306a `Subject` \uff08\u901a\u77e5\u5143\u306b\u3082\u901a\u77e5\u5148\u306b\u3082\u306a\u308a\u3046\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u304c\u5b58\u5728\u3057\u307e\u3059\u306e\u3067\u3001\u307e\u305f\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u5225\u306e\u8a18\u4e8b\u3067\u3054\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u3053\u307e\u3067\u8a18\u4e8b\u306e\u5185\u5bb9\u3092\u7406\u89e3\u3057\u306a\u304c\u3089\u8aad\u307f\u9032\u3081\u3066\u3044\u308b\u65b9\u3067\u3042\u308c\u3070\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u3055\u3048\u3059\u308c\u3070\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u5927\u4f53\u308f\u304b\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n## \u307e\u3068\u3081\n\n\u3000\u6b74\u53f2\u7684\u7d4c\u7def\u306f\u3068\u3082\u3042\u308c\u3001Rx \u306e\u57fa\u672c\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3042\u308b `Observable`, `Observer` \u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8aac\u660e\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\uff08\u81ea\u5206\u306f\u6b74\u53f2\u7684\u7d4c\u7def\u306f\u77e5\u3089\u306a\u3044\u306e\u3067\u5b9f\u969b\u306e\u6d41\u308c\u306f\u9055\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff09\n\n* push \u578b Observer \u30d1\u30bf\u30fc\u30f3\u304c\u57fa\u672c\u7684\u306a\u51fa\u767a\u70b9\n* \u5024\u306b next, error, completed \u3068\u3044\u3046\u6587\u8108\u3092\u3064\u3051\u305f\u3082\u306e\u304c push \u306e\u5bfe\u8c61\u7269\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u7279\u5fb4\u7684\n* \u8cfc\u8aad\u89e3\u9664\u306e\u4ed5\u7d44\u307f\u3092 `Disposable` \u306b\u5206\u96e2\u3057\u3066\u3044\u308b\u306e\u304c\u7279\u5fb4\u7684\n* \u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u308b\u3068 `Observable`, `Observer` \u3068\u3044\u3063\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u81ea\u7136\u306b\u5c0e\u304d\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n\n\u3000\u307e\u305f\u3001Observable \u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u306e\u3046\u3061\u306e\u3072\u3068\u3064\u3067\u3042\u308b `BehaviorSubject` \u3084 `Variable` \u306a\u3069\u306b\u3064\u3044\u3066\u306f\u6b21\u306e\u3088\u3046\u306a\u3053\u3068\u304c\b\u8a00\u3048\u307e\u3059\u3002\n\n* \u3042\u308b\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u89b3\u6e2c\u53ef\u80fd\u306a\u72b6\u614b\uff08Observable\uff09\u306b\u7c21\u5358\u306b\u30ea\u30d5\u30c8\u30a2\u30c3\u30d7\u3055\u305b\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u5f79\u5272\u3092\u6301\u3064\n* \u540c\u6642\u306b\u3001\u89b3\u6e2c\u8005\u5074\uff08Observer\uff09\u306b\u3082\u5909\u63db\u3067\u304d\u308b\u72b6\u614b\u306b\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\n* \u4e2d\u8eab\u306f\u3001\u5358\u7d14\u306b push \u578b Observer \u30d1\u30bf\u30fc\u30f3\u306e Observable \u304c\u3084\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u3092\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3060\u3051\n\n\u3000\u6700\u5f8c\u306b\u3082\u3046\u4e00\u5ea6\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u304c\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u3001`RxSwift` \u306f\u4f7f\u3048\u307e\u3059\u306e\u3067\u3001\u5229\u7528\u3092\u8ff7\u3063\u3066\u3044\u308b\u65b9\u306f\u3001\u5df7\u306b\u98db\u3073\u4ea4\u3046\u8a18\u4e8b\u306b\u60d1\u308f\u3055\u308c\u305a\u3001\u662f\u975e\u516c\u5f0f\u306e Example \u3084 Playground \u3092\u771f\u4f3c\u3057\u3066\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n# Appendix\n## \u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\n\nRxSwift\u306fMIT\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a18\u4e8b\u5185\u306e\u30b3\u30fc\u30c9\u306f\u30e9\u30a4\u30bb\u30f3\u30b9\u306b\u57fa\u3065\u304d\u3001\u305d\u306e\u307e\u307e\u63b2\u8f09\u3057\u3066\u3044\u308b\u7b87\u6240\u3084\u6539\u5909\u3057\u3066\u63b2\u8f09\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\n\nThe MIT License Copyright \u00a9 2015 Krunoslav Zaher All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n", "tags": ["RxSwift", "Swift", "Rx", "ReactiveExtensions", "iOS"]}