{"context": "\n\n\u25a0\u74b0\u5883\nSpring Boot 1.2.5.Release\nSpring Security 4.0.1.Release\nJava 8\nMaven 3.3.1\n\n\u25a0\u6982\u8981\nSpring Boot\u3067\u8a8d\u8a3c\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u6642\u306b\u8a8d\u8a3c\u3092\u901a\u3055\u306a\u3044\u305f\u3081\u306e\u5de5\u592b\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u624b\u9806\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u25a0pom.xml\n\u4eca\u56de\u8aac\u660e\u3059\u308b\u7bc4\u56f2\u3067\u306f\u4e0d\u8981\u306a\u3082\u306e\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u30fb\u30fb\u30fb\n\npom.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n<!-- \u25a0Spring Boot\u672c\u4f53 -->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.2.5.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n<!-- \u25a0Spring Boot\u95a2\u9023 -->\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n<!-- \u25a0\u30c6\u30b9\u30c8\u95a2\u9023 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-test</artifactId>\n            <version>4.0.1.RELEASE</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n             <groupId>com.jayway.jsonpath</groupId>\n            <artifactId>json-path</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.skyscreamer</groupId>\n            <artifactId>jsonassert</artifactId>\n            <version>1.2.3</version>\n            <scope>test</scope>\n        </dependency>\n\n<!-- \u25a0Java\u30e9\u30a4\u30d6\u30e9\u30ea -->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.4</version>\n            <scope>provided</scope>\n        </dependency>\n\n<!-- \u25a0\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af -->\n        <dependency>\n            <groupId>org.webjars</groupId>\n            <artifactId>jquery</artifactId>\n            <version>2.1.4</version>\n        </dependency>\n        <dependency>\n            <groupId>org.webjars</groupId>\n            <artifactId>bootstrap</artifactId>\n            <version>3.3.1</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n\n\n\u25a0\u8a73\u7d30\n\u307e\u305a\u306f\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u884c\u3046\u30af\u30e9\u30b9\u304b\u3089\u3067\u3059\u3002\n\nAppsRestControllerTest.java\npackage com.sample.apps.controller;\n\nimport com.sample.SampleApplication;\nimport com.sample.common.test.controller.AbstractRestControllerTest;\nimport com.sample.common.test.data.AppsData;\nimport com.sample.apps.service.AppsService;\n\nimport org.hamcrest.CoreMatchers;\nimport org.hamcrest.Matchers;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultHandlers;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\n/**\n * AppsRestController\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = SampleApplication.class)\n@WebAppConfiguration\npublic class AppsRestControllerTest extends AbstractRestControllerTest {\n\n    @Mock\n    private AppsService appsService;\n\n    @InjectMocks\n    @Autowired\n    private AppsRestController appsRestController;\n\n    @Test\n    public void test_DataAppsDetail_OK() {\n        try {\n            long keyId = AppsData.getAppsData().getKeyId();\n            // \u30b5\u30fc\u30d3\u30b9\u5c64\u306e\u30e2\u30c3\u30af\n            Mockito.doReturn(AppsData.getAppsData()).when(appsService).findByKeyId(Mockito.anyLong());\n\n            // \u8a8d\u8a3c\u6e08\u307f\u306b\u3059\u308b\n            mvc.setAuthentication();\n            // WebAPI\u3092\u5b9f\u884c\n            mvc.mockMvc.perform(MockMvcRequestBuilders\n                    .get(\"/data/apps/detail/{keyId}\", keyId)\n                    )\n                // \u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\n                .andExpect(SecurityMockMvcResultMatchers.authenticated())\n                // HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u304cOK(200)\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                // contentType\u306e\u8a55\u4fa1\n                .andExpect(MockMvcResultMatchers\n                        .content().contentType(\"application/json;charset=UTF-8\"))\n                // content\u5185\u5bb9\u306e\u8a55\u4fa1(content\u306e\u30b5\u30a4\u30ba\u304c0\u3067\u306f\u306a\u3044)\n                .andExpect(MockMvcResultMatchers.jsonPath(\n                        \"$\", CoreMatchers.not(Matchers.hasSize(0))))\n                // content\u5185\u5bb9\u306e\u8a55\u4fa1(\u4ed5\u69d8\u3067\u5b9a\u3081\u3089\u308c\u305f\u30ab\u30e9\u30e0\u304c\u5b58\u5728\u3059\u308b\u304b)\n                .andExpect(MockMvcResultMatchers\n                        .jsonPath(\"$.keyId\").exists())\n                .andExpect(MockMvcResultMatchers\n                        .jsonPath(\"$.keyName\").exists())\n                // request\u3001response\u3092\u51fa\u529b\n                .andDo(MockMvcResultHandlers.print());\n\n            Mockito.verify(appsService).findByKeyId(Mockito.anyLong());\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\u3002\n            // \u8a8d\u8a3c\u6e08\u307f\u306b\u3059\u308b\n            mvc.setAuthentication();\n\n\u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u8a8d\u8a3c\u304c\u5fc5\u8981\u306aWebAPI\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u8a73\u7d30\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305a\u306fRestController\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046\u62bd\u8c61\u30af\u30e9\u30b9\n\nAbstractRestControllerTest.java\npackage com.sample.common.test.controller;\n\nimport com.sample.SampleApplication;\nimport com.sample.common.test.rules.MockMvcResource;\n\nimport org.junit.Rule;\nimport org.junit.runner.RunWith;\nimport org.mockito.junit.MockitoJUnit;\nimport org.mockito.junit.MockitoRule;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\n\n/**\n * RestController\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046\u62bd\u8c61\u30af\u30e9\u30b9\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = SampleApplication.class)\n@WebAppConfiguration\npublic abstract class AbstractRestControllerTest {\n\n    @Rule\n    @Autowired\n    public MockMvcResource mvc;\n\n    @Rule\n    public MockitoRule rule = MockitoJUnit.rule();\n}\n\n\nMockitoRule\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30e2\u30c3\u30af\u3092\u4ed5\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u7528\u610f\u3057\u307e\u3059\u3002\nMockMvcResource\u306f\u81ea\u524d\u3067\u4f5c\u6210\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u5171\u901a\u3067\u4f7f\u7528\u3059\u308b\u5185\u5bb9\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\nMockMvcResource.java\npackage com.sample.common.test.rules;\n\nimport javax.servlet.Filter;\n\nimport com.sample.common.test.data.LoginUserData;\n\nimport org.junit.rules.ExternalResource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers;\nimport org.springframework.stereotype.Component;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\n/**\n * \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u5171\u901a\u3067\u4f7f\u7528\u3059\u308b\u5185\u5bb9\u3092\u5b9a\u7fa9\u3059\u308b\n */\n@Component\npublic class MockMvcResource extends ExternalResource {\n\n    @Autowired\n    private WebApplicationContext webAppContext;\n\n    private SecurityContext securityContext;\n\n    @Autowired\n    private Filter springSecurityFilterChain;\n\n    public MockMvc mockMvc;\n\n    @Override\n    protected void before() throws Exception {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webAppContext)\n                .apply(SecurityMockMvcConfigurers.springSecurity())\n                .build();\n    }\n\n    @Override\n    protected void after() {\n        SecurityContextHolder.clearContext();\n    }\n\n    /**\n     * \u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u308b\n     */\n    public void setAuthentication(){\n        Authentication authentication =\n                new UsernamePasswordAuthenticationToken(\n                        LoginUserData.getLoginUserData(),\n                        LoginUserData.getLoginUserData().getPassword(),\n                        AuthorityUtils.createAuthorityList(\"ROLE_USER\"));\n        securityContext = SecurityContextHolder.createEmptyContext();\n        securityContext.setAuthentication(authentication);\n        SecurityContextHolder.setContext(securityContext);\n    }\n}\n\n\n\n\u4ee5\u4e0b\u304c\u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n    /**\n     * \u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u308b\n     */\n    public void setAuthentication(){\n        Authentication authentication =\n                new UsernamePasswordAuthenticationToken(\n                        LoginUserData.getLoginUserData(),\n                        LoginUserData.getLoginUserData().getPassword(),\n                        AuthorityUtils.createAuthorityList(\"ROLE_USER\"));\n        securityContext = SecurityContextHolder.createEmptyContext();\n        securityContext.setAuthentication(authentication);\n        SecurityContextHolder.setContext(securityContext);\n    }\n\nUsernamePasswordAuthenticationToken\u30af\u30e9\u30b9\u306b\u8a8d\u8a3c\u3055\u305b\u308b\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u6e21\u3057\u3066\u3001\u305d\u308c\u3092\n        securityContext.setAuthentication(authentication);\n        SecurityContextHolder.setContext(securityContext);\n\n\u3068\u3057\u3066SecurityContextHolder\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3042\u3052\u308b\u3068\u8a8d\u8a3c\u6e08\u307f\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u51fa\u3066\u304d\u305fUsernamePasswordAuthenticationToken\u3084SecurityContextHolder\u306a\u3069\u306f\u3059\u3079\u3066Spring Security\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\nSpring Security\u306e\u30af\u30e9\u30b9\u3092\u99c6\u4f7f\u3059\u308b\u3053\u3068\u3067\u8a8d\u8a3c\u6e08\u307f\u306b\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\u307e\u305f\u3001\u3053\u306e\u969b\u6e21\u3059\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u306f\u4f55\u3067\u3082\u3088\u3044\u3067\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u306f\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u5171\u901a\u3067\u4f7f\u3044\u307e\u308f\u305b\u308b\u3088\u3046\u306b\u5225\u30af\u30e9\u30b9\u306b\u3057\u307e\u3057\u305f\u3002\n\nLoginUserData.java\npackage com.sample.common.test.data;\n\nimport com.sample.db.domain.entity.loginuser.custom.MLoginUser;\nimport com.sample.login.service.data.LoginUser;\n\n/**\n * \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3067\u4f7f\u7528\u3059\u308b\u8a8d\u8a3c\u30e6\u30fc\u30b6\u30fc\u306e\u60c5\u5831\n */\npublic class LoginUserData {\n\n    private static final MLoginUser mLoginUser = new MLoginUser(\n            \"user1\", // String loginUserId;\n            \"user1\" // String password;\n            );\n\n    private static final LoginUser loginUser = new LoginUser(mLoginUser);\n\n    public static LoginUser getLoginUserData(){\n        return loginUser;\n    }\n}\n\n\nbefore\u3001after\u30e1\u30bd\u30c3\u30c9\u3067\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u5171\u6709\u306e\u524d\u51e6\u7406\u3001\u5f8c\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n    @Override\n    protected void before() throws Exception {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webAppContext)\n                .apply(SecurityMockMvcConfigurers.springSecurity())\n                .build();\n    }\n\n    @Override\n    protected void after() {\n        SecurityContextHolder.clearContext();\n    }\n\n\n\u25a0\u307e\u3068\u3081\n\u30fb\u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u8a8d\u8a3c\u304c\u5fc5\u8981\u306aWebAPI\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u30fbSpring Security\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u8a8d\u8a3c\u6e08\u307f\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u30fb\u8a8d\u8a3c\u60c5\u5831\u306f\u9069\u5f53\u3067OK\n\n\u25a0\u53c2\u8003\u8cc7\u6599\nFrom 0 to Spring Security 4.0\nSpring Boot\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5358\u4f53\u30c6\u30b9\u30c8\n# \u25a0\u74b0\u5883\nSpring Boot 1.2.5.Release\nSpring Security 4.0.1.Release\nJava 8\nMaven 3.3.1\n\n# \u25a0\u6982\u8981\nSpring Boot\u3067\u8a8d\u8a3c\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u6642\u306b\u8a8d\u8a3c\u3092\u901a\u3055\u306a\u3044\u305f\u3081\u306e\u5de5\u592b\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u624b\u9806\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n# \u25a0pom.xml\n\n\u4eca\u56de\u8aac\u660e\u3059\u308b\u7bc4\u56f2\u3067\u306f\u4e0d\u8981\u306a\u3082\u306e\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u30fb\u30fb\u30fb\n\n```pom.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n<!-- \u25a0Spring Boot\u672c\u4f53 -->\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n \t\t<version>1.2.5.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n<!-- \u25a0Spring Boot\u95a2\u9023 -->\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n<!-- \u25a0\u30c6\u30b9\u30c8\u95a2\u9023 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t<artifactId>spring-security-test</artifactId>\n\t\t\t<version>4.0.1.RELEASE</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t     <groupId>com.jayway.jsonpath</groupId>\n\t\t    <artifactId>json-path</artifactId>\n\t\t    <scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t    <groupId>org.skyscreamer</groupId>\n\t\t    <artifactId>jsonassert</artifactId>\n\t\t    <version>1.2.3</version>\n\t\t    <scope>test</scope>\n\t\t</dependency>\n\n<!-- \u25a0Java\u30e9\u30a4\u30d6\u30e9\u30ea -->\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<version>1.16.4</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\n<!-- \u25a0\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af -->\n\t\t<dependency>\n\t\t\t<groupId>org.webjars</groupId>\n\t\t\t<artifactId>jquery</artifactId>\n\t\t\t<version>2.1.4</version>\n\t\t</dependency>\n\t    <dependency>\n\t        <groupId>org.webjars</groupId>\n\t        <artifactId>bootstrap</artifactId>\n\t        <version>3.3.1</version>\n\t    </dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n```\n\n# \u25a0\u8a73\u7d30\n\n\u307e\u305a\u306f\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u884c\u3046\u30af\u30e9\u30b9\u304b\u3089\u3067\u3059\u3002\n\n```java:AppsRestControllerTest.java\npackage com.sample.apps.controller;\n\nimport com.sample.SampleApplication;\nimport com.sample.common.test.controller.AbstractRestControllerTest;\nimport com.sample.common.test.data.AppsData;\nimport com.sample.apps.service.AppsService;\n\nimport org.hamcrest.CoreMatchers;\nimport org.hamcrest.Matchers;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultHandlers;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\n/**\n * AppsRestController\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = SampleApplication.class)\n@WebAppConfiguration\npublic class AppsRestControllerTest extends AbstractRestControllerTest {\n\n\t@Mock\n\tprivate AppsService appsService;\n\n\t@InjectMocks\n\t@Autowired\n\tprivate AppsRestController appsRestController;\n\n\t@Test\n\tpublic void test_DataAppsDetail_OK() {\n\t\ttry {\n\t\t\tlong keyId = AppsData.getAppsData().getKeyId();\n\t\t\t// \u30b5\u30fc\u30d3\u30b9\u5c64\u306e\u30e2\u30c3\u30af\n\t\t\tMockito.doReturn(AppsData.getAppsData()).when(appsService).findByKeyId(Mockito.anyLong());\n\n\t\t\t// \u8a8d\u8a3c\u6e08\u307f\u306b\u3059\u308b\n\t\t\tmvc.setAuthentication();\n\t\t\t// WebAPI\u3092\u5b9f\u884c\n\t\t\tmvc.mockMvc.perform(MockMvcRequestBuilders\n\t\t\t\t\t.get(\"/data/apps/detail/{keyId}\", keyId)\n\t\t\t\t\t)\n\t\t\t\t// \u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\n\t\t\t\t.andExpect(SecurityMockMvcResultMatchers.authenticated())\n\t\t\t\t// HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u304cOK(200)\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().isOk())\n\t\t\t\t// contentType\u306e\u8a55\u4fa1\n\t\t\t\t.andExpect(MockMvcResultMatchers\n\t\t\t\t\t\t.content().contentType(\"application/json;charset=UTF-8\"))\n\t\t\t\t// content\u5185\u5bb9\u306e\u8a55\u4fa1(content\u306e\u30b5\u30a4\u30ba\u304c0\u3067\u306f\u306a\u3044)\n\t\t\t\t.andExpect(MockMvcResultMatchers.jsonPath(\n\t\t\t\t\t\t\"$\", CoreMatchers.not(Matchers.hasSize(0))))\n\t\t\t\t// content\u5185\u5bb9\u306e\u8a55\u4fa1(\u4ed5\u69d8\u3067\u5b9a\u3081\u3089\u308c\u305f\u30ab\u30e9\u30e0\u304c\u5b58\u5728\u3059\u308b\u304b)\n\t\t\t\t.andExpect(MockMvcResultMatchers\n\t\t\t\t\t\t.jsonPath(\"$.keyId\").exists())\n\t\t\t\t.andExpect(MockMvcResultMatchers\n\t\t\t\t\t\t.jsonPath(\"$.keyName\").exists())\n\t\t\t\t// request\u3001response\u3092\u51fa\u529b\n\t\t\t\t.andDo(MockMvcResultHandlers.print());\n\n\t\t\tMockito.verify(appsService).findByKeyId(Mockito.anyLong());\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```java\n\t\t\t// \u8a8d\u8a3c\u6e08\u307f\u306b\u3059\u308b\n\t\t\tmvc.setAuthentication();\n```\n\n\u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u8a8d\u8a3c\u304c\u5fc5\u8981\u306aWebAPI\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u8a73\u7d30\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305a\u306fRestController\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046\u62bd\u8c61\u30af\u30e9\u30b9\n\n```java:AbstractRestControllerTest.java\npackage com.sample.common.test.controller;\n\nimport com.sample.SampleApplication;\nimport com.sample.common.test.rules.MockMvcResource;\n\nimport org.junit.Rule;\nimport org.junit.runner.RunWith;\nimport org.mockito.junit.MockitoJUnit;\nimport org.mockito.junit.MockitoRule;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\n\n/**\n * RestController\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046\u62bd\u8c61\u30af\u30e9\u30b9\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = SampleApplication.class)\n@WebAppConfiguration\npublic abstract class AbstractRestControllerTest {\n\n\t@Rule\n    @Autowired\n    public MockMvcResource mvc;\n\n\t@Rule\n\tpublic MockitoRule rule = MockitoJUnit.rule();\n}\n```\n\nMockitoRule\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30e2\u30c3\u30af\u3092\u4ed5\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u7528\u610f\u3057\u307e\u3059\u3002\n\nMockMvcResource\u306f\u81ea\u524d\u3067\u4f5c\u6210\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u5171\u901a\u3067\u4f7f\u7528\u3059\u308b\u5185\u5bb9\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n```java:MockMvcResource.java\npackage com.sample.common.test.rules;\n\nimport javax.servlet.Filter;\n\nimport com.sample.common.test.data.LoginUserData;\n\nimport org.junit.rules.ExternalResource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers;\nimport org.springframework.stereotype.Component;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\n/**\n * \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u5171\u901a\u3067\u4f7f\u7528\u3059\u308b\u5185\u5bb9\u3092\u5b9a\u7fa9\u3059\u308b\n */\n@Component\npublic class MockMvcResource extends ExternalResource {\n\n\t@Autowired\n\tprivate WebApplicationContext webAppContext;\n\n\tprivate SecurityContext securityContext;\n\n\t@Autowired\n\tprivate Filter springSecurityFilterChain;\n\n\tpublic MockMvc mockMvc;\n\n\t@Override\n\tprotected void before() throws Exception {\n\t\tmockMvc = MockMvcBuilders.webAppContextSetup(webAppContext)\n\t\t\t\t.apply(SecurityMockMvcConfigurers.springSecurity())\n\t\t\t\t.build();\n\t}\n\n\t@Override\n\tprotected void after() {\n\t\tSecurityContextHolder.clearContext();\n\t}\n\n\t/**\n\t * \u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u308b\n\t */\n\tpublic void setAuthentication(){\n\t\tAuthentication authentication =\n\t\t\t\tnew UsernamePasswordAuthenticationToken(\n\t\t\t\t\t\tLoginUserData.getLoginUserData(),\n\t\t\t\t\t\tLoginUserData.getLoginUserData().getPassword(),\n\t\t\t\t\t\tAuthorityUtils.createAuthorityList(\"ROLE_USER\"));\n\t\tsecurityContext = SecurityContextHolder.createEmptyContext();\n\t\tsecurityContext.setAuthentication(authentication);\n\t\tSecurityContextHolder.setContext(securityContext);\n\t}\n}\n\n```\n\n\u4ee5\u4e0b\u304c\u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\n```java\n\t/**\n\t * \u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u308b\n\t */\n\tpublic void setAuthentication(){\n\t\tAuthentication authentication =\n\t\t\t\tnew UsernamePasswordAuthenticationToken(\n\t\t\t\t\t\tLoginUserData.getLoginUserData(),\n\t\t\t\t\t\tLoginUserData.getLoginUserData().getPassword(),\n\t\t\t\t\t\tAuthorityUtils.createAuthorityList(\"ROLE_USER\"));\n\t\tsecurityContext = SecurityContextHolder.createEmptyContext();\n\t\tsecurityContext.setAuthentication(authentication);\n\t\tSecurityContextHolder.setContext(securityContext);\n\t}\n```\n\nUsernamePasswordAuthenticationToken\u30af\u30e9\u30b9\u306b\u8a8d\u8a3c\u3055\u305b\u308b\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u6e21\u3057\u3066\u3001\u305d\u308c\u3092\n\n```java:\n        securityContext.setAuthentication(authentication);\n\t\tSecurityContextHolder.setContext(securityContext);\n```\n\u3068\u3057\u3066SecurityContextHolder\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3042\u3052\u308b\u3068\u8a8d\u8a3c\u6e08\u307f\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u51fa\u3066\u304d\u305fUsernamePasswordAuthenticationToken\u3084SecurityContextHolder\u306a\u3069\u306f\u3059\u3079\u3066Spring Security\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\nSpring Security\u306e\u30af\u30e9\u30b9\u3092\u99c6\u4f7f\u3059\u308b\u3053\u3068\u3067\u8a8d\u8a3c\u6e08\u307f\u306b\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u3053\u306e\u969b\u6e21\u3059\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u306f\u4f55\u3067\u3082\u3088\u3044\u3067\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u306f\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u5171\u901a\u3067\u4f7f\u3044\u307e\u308f\u305b\u308b\u3088\u3046\u306b\u5225\u30af\u30e9\u30b9\u306b\u3057\u307e\u3057\u305f\u3002\n\n```java:LoginUserData.java\npackage com.sample.common.test.data;\n\nimport com.sample.db.domain.entity.loginuser.custom.MLoginUser;\nimport com.sample.login.service.data.LoginUser;\n\n/**\n * \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3067\u4f7f\u7528\u3059\u308b\u8a8d\u8a3c\u30e6\u30fc\u30b6\u30fc\u306e\u60c5\u5831\n */\npublic class LoginUserData {\n\n\tprivate static final MLoginUser mLoginUser = new MLoginUser(\n\t\t\t\"user1\", // String loginUserId;\n\t\t\t\"user1\" // String password;\n\t\t\t);\n\n\tprivate static final LoginUser loginUser = new LoginUser(mLoginUser);\n\n\tpublic static LoginUser getLoginUserData(){\n\t\treturn loginUser;\n\t}\n}\n```\n\nbefore\u3001after\u30e1\u30bd\u30c3\u30c9\u3067\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u5171\u6709\u306e\u524d\u51e6\u7406\u3001\u5f8c\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java\n\t@Override\n\tprotected void before() throws Exception {\n\t\tmockMvc = MockMvcBuilders.webAppContextSetup(webAppContext)\n\t\t\t\t.apply(SecurityMockMvcConfigurers.springSecurity())\n\t\t\t\t.build();\n\t}\n\n\t@Override\n\tprotected void after() {\n\t\tSecurityContextHolder.clearContext();\n\t}\n```\n\n\n# \u25a0\u307e\u3068\u3081\n\u30fb\u8a8d\u8a3c\u6e08\u307f\u306b\u3055\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u8a8d\u8a3c\u304c\u5fc5\u8981\u306aWebAPI\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u30fbSpring Security\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u8a8d\u8a3c\u6e08\u307f\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u30fb\u8a8d\u8a3c\u60c5\u5831\u306f\u9069\u5f53\u3067OK\n\n\n# \u25a0\u53c2\u8003\u8cc7\u6599\n[From 0 to Spring Security 4.0](http://www.slideshare.net/SpringCentral/spring-security0to40-41084141)\n[Spring Boot\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5358\u4f53\u30c6\u30b9\u30c8](http://blog.okazuki.jp/entry/2015/07/14/205627)\n\n\n\n\n", "tags": ["SpringBoot", "Java", "spring"]}