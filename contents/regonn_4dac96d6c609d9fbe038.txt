{"tags": ["\u6a5f\u68b0\u5b66\u7fd2", "jiji", "TensorFlow", "DigitalOcean", "Ruby"], "context": "\n\n\u76ee\u7684\nTensorFlow\u3092\u4f7f\u3063\u305f\u70ba\u66ff(FX)\u306e\u30c8\u30ec\u30fc\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \uff5e\u30b7\u30b9\u30c6\u30e0\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304b\u3089\u30c8\u30ec\u30fc\u30c9\u307e\u3067\uff5e \u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u3066\u3001\u30c8\u30ec\u30fc\u30c9\u306e\u6210\u7e3e\u306f\u826f\u3044\u3082\u306e\u306e\u3001\u53d6\u5f15\u56de\u6570\u304c\u6e1b\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u8907\u6570\u901a\u8ca8\u3067\u53d6\u5f15\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\u3055\u3089\u306b\u4eca\u56de\u306f Digital Ocean VPS \u3067\u5b9f\u969b\u306b\u52d5\u304b\u3059\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n\u203b \u5b9f\u969b\u306e\u53d6\u5f15\u306f\u81ea\u5df1\u8cac\u4efb\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u306d\u3002\n\n\u53d6\u5f15Agent\u306e\u30b3\u30fc\u30c9\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u8907\u6570\u901a\u8ca8\u5bfe\u5fdc\u3057\u3066\u3044\u3063\u305f\u611f\u3058\u3002Tensorflow \u5074\u306e\u30b3\u30fc\u30c9\u306f\u3044\u3058\u3063\u3066\u306a\u3044\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u95a2\u4fc2\u3067\u30a4\u30de\u30a4\u30c1\u306a\u90e8\u5206\u3082\u3042\u308b\u3002\nCurrency \u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u6570\u6301\u3064\u3053\u3068\u3067\u5bfe\u5fdc\u3057\u305f\u3002\n\ntensorflow_agent.rb\n# coding: utf-8\n\nrequire 'jiji/model/agents/agent'\nrequire 'httpclient'\nrequire 'json'\n\n# \u3053\u3053\u3067\u901a\u8ca8\u30da\u30a2\u3092\u8907\u6570\u6307\u5b9a\u3002\u305f\u3060\u3057\u3001jiji\u4e0a\u3067\u540c\u6642\u306b\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\u306e\u306f5\u901a\u8ca8\u30da\u30a2\u307e\u3067\u3002\nTRADE_CURRENCIES = %i(USDJPY EURUSD USDJPY).freeze\n\n# \u901a\u8ca8\u5358\u4f4d\u3002\u6700\u9ad8\u3067 \u901a\u8ca8\u30da\u30a2\u00d7\u901a\u8ca8\u5358\u4f4d \u5206\u4fdd\u6709\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nCURRENCY_UNIT = 10000\n\nTENSORFLOW_API_URL = \"http://tensorflow:5000/api/estimator\".freeze\n\nclass TensorFlowAgent\n  include Jiji::Model::Agents::Agent\n\n  def self.description\n    <<-STR\nTensorFlow\u3068\u9023\u643a\u3057\u3066\u30c8\u30ec\u30fc\u30c9\u3059\u308b\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\n      STR\n  end\n\n  def self.property_infos\n    [\n      Property.new('exec_mode',\n                   '\u52d5\u4f5c\u30e2\u30fc\u30c9(\"collect\" or \"trade\" or \"test\")',\n                   \"collect\")\n    ]\n  end\n\n  def post_create\n    @mode = create_mode(@exec_mode)\n    @currencies = TRADE_CURRENCIES.map { |currency_pair| Currency.new(currency_pair, broker, @mode) }\n  end\n\n  # \u6b21\u306e\u30ec\u30fc\u30c8\u3092\u53d7\u3051\u53d6\u308b\n  def next_tick(tick)\n    timestamp = tick.timestamp\n    return if already_check?(timestamp)\n    @current_timestamp = timestamp\n    logger.info \"check for crossing at #{timestamp}\"\n    @currencies.each do |currency|\n      currency.next_tick(tick)\n      logger.info currency.do_trade\n    end\n  end\n\n  # 1\u65e5\u306b2\u56de\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n  def already_check?(timestamp)\n    return true if (timestamp.hour % 12).nonzero?\n    !@current_timestamp.nil? && @current_timestamp.mday == timestamp.mday && @current_timestamp.hour == timestamp.hour\n  end\n\n  def create_mode(mode)\n    case mode\n    when 'trade' then\n      TradeMode.new\n    when 'collect' then\n      CollectMode.new\n    else\n      TestMode.new\n    end\n  end\n\n  # \u30c7\u30fc\u30bf\u53ce\u96c6\u30e2\u30fc\u30c9\n  #\n  # TensorFlow\u3067\u306e\u4e88\u6e2c\u3092\u4f7f\u7528\u305b\u305a\u306b\u79fb\u52d5\u5e73\u5747\u306e\u30b7\u30b0\u30ca\u30eb\u306e\u307f\u3067\u30c8\u30ec\u30fc\u30c9\u3092\u884c\u3044\u3001\n  # \u7d50\u679c\u3092DB\u306b\u4fdd\u5b58\u3059\u308b\n  #\n  class CollectMode\n    def do_trade?(signal, sell_or_buy)\n      true\n    end\n\n    # \u30dd\u30b8\u30b7\u30e7\u30f3\u304c\u9589\u3058\u3089\u308c\u305f\u3089\u3001\u30c8\u30ec\u30fc\u30c9\u7d50\u679c\u3068\u30b7\u30b0\u30ca\u30eb\u3092DB\u306b\u767b\u9332\u3059\u308b\n    def after_position_closed(signal, position)\n      TradeAndSignals.create_from(signal, position).save\n    end\n  end\n\n  # \u30c6\u30b9\u30c8\u30e2\u30fc\u30c9\n  #\n  # TensorFlow\u3067\u306e\u4e88\u6e2c\u3092\u4f7f\u7528\u305b\u305a\u306b\u79fb\u52d5\u5e73\u5747\u306e\u30b7\u30b0\u30ca\u30eb\u306e\u307f\u3067\u30c8\u30ec\u30fc\u30c9\u3059\u308b\n  # \u30c8\u30ec\u30fc\u30c9\u7d50\u679c\u306f\u53ce\u96c6\u3057\u306a\u3044\n  #\n  class TestMode\n    def do_trade?(signal, sell_or_buy)\n      true\n    end\n\n    def after_position_closed(signal, position)\n      # do nothing.\n    end\n  end\n\n  # \u53d6\u5f15\u30e2\u30fc\u30c9\n  #\n  # TensorFlow\u3067\u306e\u4e88\u6e2c\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30ec\u30fc\u30c9\u3059\u308b\u3002\n  # \u30c8\u30ec\u30fc\u30c9\u7d50\u679c\u306f\u53ce\u96c6\u3057\u306a\u3044\n  #\n  class TradeMode\n    def initialize\n      @client = HTTPClient.new\n    end\n\n    # \u30c8\u30ec\u30fc\u30c9\u3092\u52dd\u6557\u4e88\u6e2c\u3092tensorflow\u306b\u554f\u3044\u5408\u308f\u305b\u308b\n    def do_trade?(signal, sell_or_buy)\n      body = { sell_or_buy: sell_or_buy }.merge(signal)\n      body.delete(:ma5)\n      body.delete(:ma10)\n\n      result = @client.post(TENSORFLOW_API_URL, {\n                              body: JSON.generate(body),\n                              header: {\n                                'Content-Type' => 'application/json'\n                              }\n                            })\n      # up \u3068\u4e88\u6e2c\u3055\u308c\u305f\u5834\u5408\u306e\u307f\u30c8\u30ec\u30fc\u30c9\n      JSON.parse(result.body)[\"result\"] == \"up\"\n    end\n\n    def after_position_closed(signal, position)\n      # do nothing.\n    end\n  end\nend\n\n# \u30c8\u30ec\u30fc\u30c9\u7d50\u679c\u3068\u305d\u306e\u6642\u306e\u5404\u7a2e\u6307\u6a19\u3002\n# MongoDB\u306b\u683c\u7d0d\u3057\u3066TensorFlow\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u3059\u308b\nclass TradeAndSignals\n  include Mongoid::Document\n\n  store_in collection: 'tensorflow_example_trade_and_signals'\n\n  field :macd_difference,    type: Float # macd - macd_signal\n\n  field :rsi,                type: Float\n\n  field :slope_10,           type: Float # 10\u65e5\u79fb\u52d5\u5e73\u5747\u7dda\u306e\u50be\u304d\n  field :slope_25,           type: Float # 25\u65e5\u79fb\u52d5\u5e73\u5747\u7dda\u306e\u50be\u304d\n  field :slope_50,           type: Float # 50\u65e5\u79fb\u52d5\u5e73\u5747\u7dda\u306e\u50be\u304d\n\n  field :ma_10_estrangement, type: Float # 10\u65e5\u79fb\u52d5\u5e73\u5747\u304b\u3089\u306e\u4e56\u96e2\u7387\n  field :ma_25_estrangement, type: Float\n  field :ma_50_estrangement, type: Float\n\n  field :profit_or_loss,     type: Float\n  field :sell_or_buy,        type: Symbol\n  field :entered_at,         type: Time\n  field :exited_at,          type: Time\n\n  def self.create_from(signal_data, position)\n    TradeAndSignals.new do |ts|\n      signal_data.each do |pair|\n        next if pair[0] == :ma5 || pair[0] == :ma10\n        ts.send(\"#{pair[0]}=\".to_sym, pair[1])\n      end\n      ts.profit_or_loss = position.profit_or_loss\n      ts.sell_or_buy    = position.sell_or_buy\n      ts.entered_at     = position.entered_at\n      ts.exited_at      = position.exited_at\n    end\n  end\nend\n\nclass Currency\n  def initialize(currency_pair, broker, mode)\n    @currency_pair = currency_pair\n    @broker = broker\n    @mode = mode\n    @cross = Cross.new\n  end\n\n  def next_tick(tick)\n    prepare_signals(tick) unless @macd\n    @current_signals = calculate_signals(tick[@currency_pair])\n    @cross.next_data(@current_signals[:ma5], @current_signals[:ma10])\n  end\n\n  def do_trade\n    # 5\u65e5\u79fb\u52d5\u5e73\u5747\u306810\u65e5\u79fb\u52d5\u5e73\u5747\u306e\u30af\u30ed\u30b9\u3067\u30c8\u30ec\u30fc\u30c9\n    if @cross.cross_up?\n      log_text = buy\n    elsif @cross.cross_down?\n      log_text = sell\n    end\n    log_text || \"#{@currency_pair} has no crossing\"\n  end\n\n  def buy\n    close_exist_positions\n    return \"#{@currency_pair} is cross up but tensorflow decided no-go\" unless @mode.do_trade?(@current_signals, \"buy\")\n    result = @broker.buy(@currency_pair, CURRENCY_UNIT)\n    @current_position = @broker.positions[result.trade_opened.internal_id]\n    @current_hold_signals = @current_signals\n    \"#{@currency_pair} is cross up and traded\"\n  end\n\n  def sell\n    close_exist_positions\n    return \"#{@currency_pair} is cross down but tensorflow decided no-go\" unless @mode.do_trade?(@current_signals, \"sell\")\n    result = @broker.sell(@currency_pair, CURRENCY_UNIT)\n    @current_position = @broker.positions[result.trade_opened.internal_id]\n    @current_hold_signals = @current_signals\n    \"#{@currency_pair} is cross down and traded\"\n  end\n\n  def close_exist_positions\n    return unless @current_position\n    @current_position.close\n    @mode.after_position_closed(@current_hold_signals, @current_position)\n    @current_position = nil\n    @current_hold_signals = nil\n  end\n\n  def calculate_signals(tick)\n    price = tick.bid\n    macd = @macd.next_data(price)\n    ma10 = @ma10.next_data(price)\n    ma25 = @ma25.next_data(price)\n    ma50 = @ma50.next_data(price)\n    {\n      ma5:  @ma5.next_data(price),\n      ma10: ma10,\n      macd_difference: macd ? macd[:macd] - macd[:signal] : nil,\n      rsi:  @rsi.next_data(price),\n      slope_10: ma10 ? @ma10v.next_data(ma10) : nil,\n      slope_25: ma25 ? @ma25v.next_data(ma25) : nil,\n      slope_50: ma50 ? @ma50v.next_data(ma50) : nil,\n      ma_10_estrangement: ma10 ? calculate_estrangement(price, ma10) : nil,\n      ma_25_estrangement: ma25 ? calculate_estrangement(price, ma25) : nil,\n      ma_50_estrangement: ma50 ? calculate_estrangement(price, ma50) : nil\n    }\n  end\n\n  def prepare_signals(tick)\n    create_signals\n    retrieve_rates(tick.timestamp).each do |rate|\n      calculate_signals(rate.close)\n    end\n  end\n\n  def create_signals\n    @macd  = Signals::MACD.new\n    @ma5   = Signals::MovingAverage.new(5)\n    @ma10  = Signals::MovingAverage.new(10)\n    @ma25  = Signals::MovingAverage.new(25)\n    @ma50  = Signals::MovingAverage.new(50)\n    @ma5v  = Signals::Vector.new(5)\n    @ma10v = Signals::Vector.new(10)\n    @ma25v = Signals::Vector.new(25)\n    @ma50v = Signals::Vector.new(50)\n    @rsi   = Signals::RSI.new(9)\n  end\n\n  def retrieve_rates(time)\n    @broker.retrieve_rates(@currency_pair, :one_day, time - 60 * 60 * 24 * 60, time)\n  end\n\n  def calculate_estrangement(price, ma)\n    ((BigDecimal.new(price, 10) - ma) / ma * 100).to_f\n  end\nend\n\n\n\n\nDigital Ocean \u3078\u306e\u30c7\u30d7\u30ed\u30a4\u624b\u9806\n\nDigital Ocean \u4e0a\u3067 Droplet \u3092\u4f5c\u6210\n\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3061\u4e0a\u3052\u308b\u3002Digital Ocean \u306e\u30c7\u30b6\u30a4\u30f3\u304c\u5168\u4f53\u7684\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u597d\u304d\u3002\n\u3068\u308a\u3042\u3048\u305a\u516c\u5f0f\u3060\u3068 CentOS \u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3001CentOS \u3067\u30b5\u30fc\u30d0\u30fc\u306esize\u306f\u4e00\u756a\u5c0f\u3055\u3044\u3084\u3064\u306b\u3057\u3066\u304a\u304f\u3002(\u904b\u7528\u4e2d\u306f\u57fa\u672c\u7684\u306b12\u6642\u9593\u306b1\u56de\u3057\u304b\u30a2\u30af\u30b7\u30e7\u30f3\u8d77\u3053\u3055\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3067\u5341\u5206\u306a\u306f\u305a)\n\n\nCentOS\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u74b0\u5883\u69cb\u7bc9\n\u5148\u306b\u3001\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306eDNS\u306e\u8a2d\u5b9a\u3068\u3001Digital Ocean \u5074\u3067\u3082\u30e1\u30cb\u30e5\u30fc\u306eNetworks\u304b\u3089\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306fssh\u30ad\u30fc\u3092\u767b\u9332\u3057\u3066root\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u308b\u306e\u3067\u3001sudo \u30b3\u30de\u30f3\u30c9\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u9069\u5b9c\u5fc5\u8981\u306a\u3068\u3053\u308d\u306b\u306f\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\nDigital Ocean \u306e\u7ba1\u7406\u753b\u9762\u306b\u66f8\u304b\u308c\u3066\u3044\u308b IP \u30a2\u30c9\u30ec\u30b9\u306b ssh root@{IP\u30a2\u30c9\u30ec\u30b9} \u3067\u30a2\u30af\u30bb\u30b9\n\n# \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ yum update -y\n$ yum install -y epel-release\n$ yum install -y docker git certbot # Let's Encrypt \u3092\u5229\u7528\u3059\u308b\u306e\u3067 certbot \u3092\u5165\u308c\u308b\n$ certbot certonly --standalone -d {\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3} # \u6301\u3063\u3066\u3044\u308b\u30c9\u30e1\u30a4\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u8a3c\u660e\u66f8\u3092\u767a\u884c\n\n# docker \u306e\u8a2d\u5b9a\n$ service docker start\n$ chkconfig docker on\n\n# docker-compose \u306e\u69cb\u7bc9\n$ curl -L https://github.com/docker/compose/releases/download/1.8.1/docker-compose-Linux-x86_64 > /tmp/docker-compose #\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u6700\u65b0\u306e\u5165\u308c\u308c\u3070\u554f\u984c\u306a\u3044?\n$ mv /tmp/docker-compose /usr/local/bin/\n$ chmod +x /usr/local/bin/docker-compose\n\n# jiji \u306e\u69cb\u7bc9\n$ git clone https://github.com/unageanu/jiji-with-tensorflow-example.git\n$ mkdir -p jiji-with-tensorflow-example/cert\n$ mv /etc/letsencrypt/archive/{\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3}/cert1.pem jiji-with-tensorflow-example/cert/server.crt # Let's Encrypt \u3067\u4f5c\u6210\u3057\u305f\u8a3c\u660e\u66f8\u3092\u79fb\u52d5\n$ mv /etc/letsencrypt/archive/{\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3}/privkey1.pem jiji-with-tensorflow-example/cert/server.key\n$ cd jiji-with-tensorflow-example\n$ chown root.root cert/server.key\n$ chmod 600 cert/server.key\n$ vi docker-compose.yml # USER_SECRET \u3092\u66f4\u65b0\n$ vi build/tensorflow/Dockerfile # 3\u884c\u76ee\u306b `RUN pip install --upgrade pip` \u3092\u633f\u5165(\u6700\u65b0\u7248\u306epip\u3067\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u8ffd\u52a0)\n$ docker-compose up -d\n\n\ncollect \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u7acb\u3061\u4e0a\u304c\u3063\u305f\u30b5\u30fc\u30d0\u30fc https://{\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3}:10443 \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001jiji\u4e0a\u3067\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u767b\u9332\u3057\u3066 collect mode \u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n\u5b66\u7fd2\u3055\u305b\u308b\n# mongo DB\u306b\u5024\u304c\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\n$ docker exec -it jiji_example__mongodb  mongo\n> use jiji\n> db.tensorflow_example_trade_and_signals.find().count()\n> quit()\n\n# \u5b66\u7fd2\u3055\u305b\u308b\n$ docker exec -it jiji_example__tensorflow /bin/bash\n# cd /scripts/\n# python train.py\n\n# \u305f\u307e\u306b server.py \u304c\u843d\u3061\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u3063\u305f\u306e\u3067\u3001forever.js \u3092\u4f7f\u3063\u3066\u305a\u3063\u3068\u7acb\u3061\u4e0a\u3052\u72b6\u614b\u306b\u3057\u3066\u304a\u304f(docker \u306e\u4e2d\u3092\u3044\u3058\u308b\u306e\u306f\u3042\u307e\u308a\u884c\u5100\u304c\u826f\u304f\u306a\u3044\u304c\u3002\u3002\u3002)\n# apt update\n# apt install -y nodejs npm\n# npm install forever -g\n# ln -s /usr/bin/nodejs /usr/bin/node\n# forever start -c /usr/bin/python server.py\n\n\ntrade \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u4eca\u5ea6\u306f trade mode \u3067\u5b9f\u884c\u3057\u3066\u4e0a\u624b\u304f\u3044\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3002\n\n\u611f\u60f3\n\u4eca\u56de\u3084\u3063\u3066\u307f\u3066\u3001docker \u306e\u77e5\u8b58\u3068\u304b\u8272\u3005\u3064\u3044\u305f\u3002\u3053\u3046\u3044\u3046\u89e6\u308c\u308b\u30aa\u30e2\u30c1\u30e3\u7684\u306a\u3082\u306e\u304c\u3042\u308b\u3068\u5b66\u7fd2\u3063\u3066\u9032\u3080\u611f\u3058\u3002\njiji\u306b\u306f\u304b\u306a\u308a\u611f\u8b1d\u3057\u3066\u307e\u3059\u3002\n# \u76ee\u7684\n[TensorFlow\u3092\u4f7f\u3063\u305f\u70ba\u66ff(FX)\u306e\u30c8\u30ec\u30fc\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \uff5e\u30b7\u30b9\u30c6\u30e0\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304b\u3089\u30c8\u30ec\u30fc\u30c9\u307e\u3067\uff5e](http://qiita.com/jiji_platform/items/268377c542706e6f44b1) \u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u3066\u3001\u30c8\u30ec\u30fc\u30c9\u306e\u6210\u7e3e\u306f\u826f\u3044\u3082\u306e\u306e\u3001\u53d6\u5f15\u56de\u6570\u304c\u6e1b\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u8907\u6570\u901a\u8ca8\u3067\u53d6\u5f15\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\u3055\u3089\u306b\u4eca\u56de\u306f [Digital Ocean VPS](https://www.digitalocean.com/) \u3067\u5b9f\u969b\u306b\u52d5\u304b\u3059\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n\n\u203b \u5b9f\u969b\u306e\u53d6\u5f15\u306f\u81ea\u5df1\u8cac\u4efb\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u306d\u3002\n\n# \u53d6\u5f15Agent\u306e\u30b3\u30fc\u30c9\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u8907\u6570\u901a\u8ca8\u5bfe\u5fdc\u3057\u3066\u3044\u3063\u305f\u611f\u3058\u3002Tensorflow \u5074\u306e\u30b3\u30fc\u30c9\u306f\u3044\u3058\u3063\u3066\u306a\u3044\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u95a2\u4fc2\u3067\u30a4\u30de\u30a4\u30c1\u306a\u90e8\u5206\u3082\u3042\u308b\u3002\nCurrency \u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u6570\u6301\u3064\u3053\u3068\u3067\u5bfe\u5fdc\u3057\u305f\u3002\n\n```tensorflow_agent.rb\n# coding: utf-8\n\nrequire 'jiji/model/agents/agent'\nrequire 'httpclient'\nrequire 'json'\n\n# \u3053\u3053\u3067\u901a\u8ca8\u30da\u30a2\u3092\u8907\u6570\u6307\u5b9a\u3002\u305f\u3060\u3057\u3001jiji\u4e0a\u3067\u540c\u6642\u306b\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\u306e\u306f5\u901a\u8ca8\u30da\u30a2\u307e\u3067\u3002\nTRADE_CURRENCIES = %i(USDJPY EURUSD USDJPY).freeze\n\n# \u901a\u8ca8\u5358\u4f4d\u3002\u6700\u9ad8\u3067 \u901a\u8ca8\u30da\u30a2\u00d7\u901a\u8ca8\u5358\u4f4d \u5206\u4fdd\u6709\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nCURRENCY_UNIT = 10000\n\nTENSORFLOW_API_URL = \"http://tensorflow:5000/api/estimator\".freeze\n\nclass TensorFlowAgent\n  include Jiji::Model::Agents::Agent\n\n  def self.description\n    <<-STR\nTensorFlow\u3068\u9023\u643a\u3057\u3066\u30c8\u30ec\u30fc\u30c9\u3059\u308b\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\n      STR\n  end\n\n  def self.property_infos\n    [\n      Property.new('exec_mode',\n                   '\u52d5\u4f5c\u30e2\u30fc\u30c9(\"collect\" or \"trade\" or \"test\")',\n                   \"collect\")\n    ]\n  end\n\n  def post_create\n    @mode = create_mode(@exec_mode)\n    @currencies = TRADE_CURRENCIES.map { |currency_pair| Currency.new(currency_pair, broker, @mode) }\n  end\n\n  # \u6b21\u306e\u30ec\u30fc\u30c8\u3092\u53d7\u3051\u53d6\u308b\n  def next_tick(tick)\n    timestamp = tick.timestamp\n    return if already_check?(timestamp)\n    @current_timestamp = timestamp\n    logger.info \"check for crossing at #{timestamp}\"\n    @currencies.each do |currency|\n      currency.next_tick(tick)\n      logger.info currency.do_trade\n    end\n  end\n\n  # 1\u65e5\u306b2\u56de\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n  def already_check?(timestamp)\n    return true if (timestamp.hour % 12).nonzero?\n    !@current_timestamp.nil? && @current_timestamp.mday == timestamp.mday && @current_timestamp.hour == timestamp.hour\n  end\n\n  def create_mode(mode)\n    case mode\n    when 'trade' then\n      TradeMode.new\n    when 'collect' then\n      CollectMode.new\n    else\n      TestMode.new\n    end\n  end\n\n  # \u30c7\u30fc\u30bf\u53ce\u96c6\u30e2\u30fc\u30c9\n  #\n  # TensorFlow\u3067\u306e\u4e88\u6e2c\u3092\u4f7f\u7528\u305b\u305a\u306b\u79fb\u52d5\u5e73\u5747\u306e\u30b7\u30b0\u30ca\u30eb\u306e\u307f\u3067\u30c8\u30ec\u30fc\u30c9\u3092\u884c\u3044\u3001\n  # \u7d50\u679c\u3092DB\u306b\u4fdd\u5b58\u3059\u308b\n  #\n  class CollectMode\n    def do_trade?(signal, sell_or_buy)\n      true\n    end\n\n    # \u30dd\u30b8\u30b7\u30e7\u30f3\u304c\u9589\u3058\u3089\u308c\u305f\u3089\u3001\u30c8\u30ec\u30fc\u30c9\u7d50\u679c\u3068\u30b7\u30b0\u30ca\u30eb\u3092DB\u306b\u767b\u9332\u3059\u308b\n    def after_position_closed(signal, position)\n      TradeAndSignals.create_from(signal, position).save\n    end\n  end\n\n  # \u30c6\u30b9\u30c8\u30e2\u30fc\u30c9\n  #\n  # TensorFlow\u3067\u306e\u4e88\u6e2c\u3092\u4f7f\u7528\u305b\u305a\u306b\u79fb\u52d5\u5e73\u5747\u306e\u30b7\u30b0\u30ca\u30eb\u306e\u307f\u3067\u30c8\u30ec\u30fc\u30c9\u3059\u308b\n  # \u30c8\u30ec\u30fc\u30c9\u7d50\u679c\u306f\u53ce\u96c6\u3057\u306a\u3044\n  #\n  class TestMode\n    def do_trade?(signal, sell_or_buy)\n      true\n    end\n\n    def after_position_closed(signal, position)\n      # do nothing.\n    end\n  end\n\n  # \u53d6\u5f15\u30e2\u30fc\u30c9\n  #\n  # TensorFlow\u3067\u306e\u4e88\u6e2c\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30ec\u30fc\u30c9\u3059\u308b\u3002\n  # \u30c8\u30ec\u30fc\u30c9\u7d50\u679c\u306f\u53ce\u96c6\u3057\u306a\u3044\n  #\n  class TradeMode\n    def initialize\n      @client = HTTPClient.new\n    end\n\n    # \u30c8\u30ec\u30fc\u30c9\u3092\u52dd\u6557\u4e88\u6e2c\u3092tensorflow\u306b\u554f\u3044\u5408\u308f\u305b\u308b\n    def do_trade?(signal, sell_or_buy)\n      body = { sell_or_buy: sell_or_buy }.merge(signal)\n      body.delete(:ma5)\n      body.delete(:ma10)\n\n      result = @client.post(TENSORFLOW_API_URL, {\n                              body: JSON.generate(body),\n                              header: {\n                                'Content-Type' => 'application/json'\n                              }\n                            })\n      # up \u3068\u4e88\u6e2c\u3055\u308c\u305f\u5834\u5408\u306e\u307f\u30c8\u30ec\u30fc\u30c9\n      JSON.parse(result.body)[\"result\"] == \"up\"\n    end\n\n    def after_position_closed(signal, position)\n      # do nothing.\n    end\n  end\nend\n\n# \u30c8\u30ec\u30fc\u30c9\u7d50\u679c\u3068\u305d\u306e\u6642\u306e\u5404\u7a2e\u6307\u6a19\u3002\n# MongoDB\u306b\u683c\u7d0d\u3057\u3066TensorFlow\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u3059\u308b\nclass TradeAndSignals\n  include Mongoid::Document\n\n  store_in collection: 'tensorflow_example_trade_and_signals'\n\n  field :macd_difference,    type: Float # macd - macd_signal\n\n  field :rsi,                type: Float\n\n  field :slope_10,           type: Float # 10\u65e5\u79fb\u52d5\u5e73\u5747\u7dda\u306e\u50be\u304d\n  field :slope_25,           type: Float # 25\u65e5\u79fb\u52d5\u5e73\u5747\u7dda\u306e\u50be\u304d\n  field :slope_50,           type: Float # 50\u65e5\u79fb\u52d5\u5e73\u5747\u7dda\u306e\u50be\u304d\n\n  field :ma_10_estrangement, type: Float # 10\u65e5\u79fb\u52d5\u5e73\u5747\u304b\u3089\u306e\u4e56\u96e2\u7387\n  field :ma_25_estrangement, type: Float\n  field :ma_50_estrangement, type: Float\n\n  field :profit_or_loss,     type: Float\n  field :sell_or_buy,        type: Symbol\n  field :entered_at,         type: Time\n  field :exited_at,          type: Time\n\n  def self.create_from(signal_data, position)\n    TradeAndSignals.new do |ts|\n      signal_data.each do |pair|\n        next if pair[0] == :ma5 || pair[0] == :ma10\n        ts.send(\"#{pair[0]}=\".to_sym, pair[1])\n      end\n      ts.profit_or_loss = position.profit_or_loss\n      ts.sell_or_buy    = position.sell_or_buy\n      ts.entered_at     = position.entered_at\n      ts.exited_at      = position.exited_at\n    end\n  end\nend\n\nclass Currency\n  def initialize(currency_pair, broker, mode)\n    @currency_pair = currency_pair\n    @broker = broker\n    @mode = mode\n    @cross = Cross.new\n  end\n\n  def next_tick(tick)\n    prepare_signals(tick) unless @macd\n    @current_signals = calculate_signals(tick[@currency_pair])\n    @cross.next_data(@current_signals[:ma5], @current_signals[:ma10])\n  end\n\n  def do_trade\n    # 5\u65e5\u79fb\u52d5\u5e73\u5747\u306810\u65e5\u79fb\u52d5\u5e73\u5747\u306e\u30af\u30ed\u30b9\u3067\u30c8\u30ec\u30fc\u30c9\n    if @cross.cross_up?\n      log_text = buy\n    elsif @cross.cross_down?\n      log_text = sell\n    end\n    log_text || \"#{@currency_pair} has no crossing\"\n  end\n\n  def buy\n    close_exist_positions\n    return \"#{@currency_pair} is cross up but tensorflow decided no-go\" unless @mode.do_trade?(@current_signals, \"buy\")\n    result = @broker.buy(@currency_pair, CURRENCY_UNIT)\n    @current_position = @broker.positions[result.trade_opened.internal_id]\n    @current_hold_signals = @current_signals\n    \"#{@currency_pair} is cross up and traded\"\n  end\n\n  def sell\n    close_exist_positions\n    return \"#{@currency_pair} is cross down but tensorflow decided no-go\" unless @mode.do_trade?(@current_signals, \"sell\")\n    result = @broker.sell(@currency_pair, CURRENCY_UNIT)\n    @current_position = @broker.positions[result.trade_opened.internal_id]\n    @current_hold_signals = @current_signals\n    \"#{@currency_pair} is cross down and traded\"\n  end\n\n  def close_exist_positions\n    return unless @current_position\n    @current_position.close\n    @mode.after_position_closed(@current_hold_signals, @current_position)\n    @current_position = nil\n    @current_hold_signals = nil\n  end\n\n  def calculate_signals(tick)\n    price = tick.bid\n    macd = @macd.next_data(price)\n    ma10 = @ma10.next_data(price)\n    ma25 = @ma25.next_data(price)\n    ma50 = @ma50.next_data(price)\n    {\n      ma5:  @ma5.next_data(price),\n      ma10: ma10,\n      macd_difference: macd ? macd[:macd] - macd[:signal] : nil,\n      rsi:  @rsi.next_data(price),\n      slope_10: ma10 ? @ma10v.next_data(ma10) : nil,\n      slope_25: ma25 ? @ma25v.next_data(ma25) : nil,\n      slope_50: ma50 ? @ma50v.next_data(ma50) : nil,\n      ma_10_estrangement: ma10 ? calculate_estrangement(price, ma10) : nil,\n      ma_25_estrangement: ma25 ? calculate_estrangement(price, ma25) : nil,\n      ma_50_estrangement: ma50 ? calculate_estrangement(price, ma50) : nil\n    }\n  end\n\n  def prepare_signals(tick)\n    create_signals\n    retrieve_rates(tick.timestamp).each do |rate|\n      calculate_signals(rate.close)\n    end\n  end\n\n  def create_signals\n    @macd  = Signals::MACD.new\n    @ma5   = Signals::MovingAverage.new(5)\n    @ma10  = Signals::MovingAverage.new(10)\n    @ma25  = Signals::MovingAverage.new(25)\n    @ma50  = Signals::MovingAverage.new(50)\n    @ma5v  = Signals::Vector.new(5)\n    @ma10v = Signals::Vector.new(10)\n    @ma25v = Signals::Vector.new(25)\n    @ma50v = Signals::Vector.new(50)\n    @rsi   = Signals::RSI.new(9)\n  end\n\n  def retrieve_rates(time)\n    @broker.retrieve_rates(@currency_pair, :one_day, time - 60 * 60 * 24 * 60, time)\n  end\n\n  def calculate_estrangement(price, ma)\n    ((BigDecimal.new(price, 10) - ma) / ma * 100).to_f\n  end\nend\n\n```\n\n# Digital Ocean \u3078\u306e\u30c7\u30d7\u30ed\u30a4\u624b\u9806\n## Digital Ocean \u4e0a\u3067 Droplet \u3092\u4f5c\u6210\n\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3061\u4e0a\u3052\u308b\u3002Digital Ocean \u306e\u30c7\u30b6\u30a4\u30f3\u304c\u5168\u4f53\u7684\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u597d\u304d\u3002\n\u3068\u308a\u3042\u3048\u305a\u516c\u5f0f\u3060\u3068 CentOS \u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3001CentOS \u3067\u30b5\u30fc\u30d0\u30fc\u306esize\u306f\u4e00\u756a\u5c0f\u3055\u3044\u3084\u3064\u306b\u3057\u3066\u304a\u304f\u3002(\u904b\u7528\u4e2d\u306f\u57fa\u672c\u7684\u306b12\u6642\u9593\u306b1\u56de\u3057\u304b\u30a2\u30af\u30b7\u30e7\u30f3\u8d77\u3053\u3055\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3067\u5341\u5206\u306a\u306f\u305a)\n![DigitalOcean_-_Create_Droplets.png](https://qiita-image-store.s3.amazonaws.com/0/10375/bdb1780a-97af-1a39-46f6-33a24c12257c.png)\n\n## CentOS\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u74b0\u5883\u69cb\u7bc9\n\n\u5148\u306b\u3001\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306eDNS\u306e\u8a2d\u5b9a\u3068\u3001Digital Ocean \u5074\u3067\u3082\u30e1\u30cb\u30e5\u30fc\u306eNetworks\u304b\u3089\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n\n\u307e\u305f\u3001\u4eca\u56de\u306fssh\u30ad\u30fc\u3092\u767b\u9332\u3057\u3066root\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u308b\u306e\u3067\u3001`sudo` \u30b3\u30de\u30f3\u30c9\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u9069\u5b9c\u5fc5\u8981\u306a\u3068\u3053\u308d\u306b\u306f\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n\nDigital Ocean \u306e\u7ba1\u7406\u753b\u9762\u306b\u66f8\u304b\u308c\u3066\u3044\u308b IP \u30a2\u30c9\u30ec\u30b9\u306b `ssh root@{IP\u30a2\u30c9\u30ec\u30b9}` \u3067\u30a2\u30af\u30bb\u30b9\n\n```shell-session\n\n# \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ yum update -y\n$ yum install -y epel-release\n$ yum install -y docker git certbot # Let's Encrypt \u3092\u5229\u7528\u3059\u308b\u306e\u3067 certbot \u3092\u5165\u308c\u308b\n$ certbot certonly --standalone -d {\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3} # \u6301\u3063\u3066\u3044\u308b\u30c9\u30e1\u30a4\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u8a3c\u660e\u66f8\u3092\u767a\u884c\n\n# docker \u306e\u8a2d\u5b9a\n$ service docker start\n$ chkconfig docker on\n\n# docker-compose \u306e\u69cb\u7bc9\n$ curl -L https://github.com/docker/compose/releases/download/1.8.1/docker-compose-Linux-x86_64 > /tmp/docker-compose #\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u6700\u65b0\u306e\u5165\u308c\u308c\u3070\u554f\u984c\u306a\u3044?\n$ mv /tmp/docker-compose /usr/local/bin/\n$ chmod +x /usr/local/bin/docker-compose\n\n# jiji \u306e\u69cb\u7bc9\n$ git clone https://github.com/unageanu/jiji-with-tensorflow-example.git\n$ mkdir -p jiji-with-tensorflow-example/cert\n$ mv /etc/letsencrypt/archive/{\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3}/cert1.pem jiji-with-tensorflow-example/cert/server.crt # Let's Encrypt \u3067\u4f5c\u6210\u3057\u305f\u8a3c\u660e\u66f8\u3092\u79fb\u52d5\n$ mv /etc/letsencrypt/archive/{\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3}/privkey1.pem jiji-with-tensorflow-example/cert/server.key\n$ cd jiji-with-tensorflow-example\n$ chown root.root cert/server.key\n$ chmod 600 cert/server.key\n$ vi docker-compose.yml # USER_SECRET \u3092\u66f4\u65b0\n$ vi build/tensorflow/Dockerfile # 3\u884c\u76ee\u306b `RUN pip install --upgrade pip` \u3092\u633f\u5165(\u6700\u65b0\u7248\u306epip\u3067\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u8ffd\u52a0)\n$ docker-compose up -d\n```\n\n## collect \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u7acb\u3061\u4e0a\u304c\u3063\u305f\u30b5\u30fc\u30d0\u30fc https://{\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3}:10443 \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001jiji\u4e0a\u3067\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u767b\u9332\u3057\u3066 collect mode \u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n## \u5b66\u7fd2\u3055\u305b\u308b\n\n```shell-session\n# mongo DB\u306b\u5024\u304c\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\n$ docker exec -it jiji_example__mongodb  mongo\n> use jiji\n> db.tensorflow_example_trade_and_signals.find().count()\n> quit()\n\n# \u5b66\u7fd2\u3055\u305b\u308b\n$ docker exec -it jiji_example__tensorflow /bin/bash\n# cd /scripts/\n# python train.py\n\n# \u305f\u307e\u306b server.py \u304c\u843d\u3061\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u3063\u305f\u306e\u3067\u3001forever.js \u3092\u4f7f\u3063\u3066\u305a\u3063\u3068\u7acb\u3061\u4e0a\u3052\u72b6\u614b\u306b\u3057\u3066\u304a\u304f(docker \u306e\u4e2d\u3092\u3044\u3058\u308b\u306e\u306f\u3042\u307e\u308a\u884c\u5100\u304c\u826f\u304f\u306a\u3044\u304c\u3002\u3002\u3002)\n# apt update\n# apt install -y nodejs npm\n# npm install forever -g\n# ln -s /usr/bin/nodejs /usr/bin/node\n# forever start -c /usr/bin/python server.py\n```\n\n## trade \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u4eca\u5ea6\u306f trade mode \u3067\u5b9f\u884c\u3057\u3066\u4e0a\u624b\u304f\u3044\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3002\n\n## \u611f\u60f3\n\u4eca\u56de\u3084\u3063\u3066\u307f\u3066\u3001docker \u306e\u77e5\u8b58\u3068\u304b\u8272\u3005\u3064\u3044\u305f\u3002\u3053\u3046\u3044\u3046\u89e6\u308c\u308b\u30aa\u30e2\u30c1\u30e3\u7684\u306a\u3082\u306e\u304c\u3042\u308b\u3068\u5b66\u7fd2\u3063\u3066\u9032\u3080\u611f\u3058\u3002\njiji\u306b\u306f\u304b\u306a\u308a\u611f\u8b1d\u3057\u3066\u307e\u3059\u3002\n"}