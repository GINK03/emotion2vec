{"context": "Slick(play-slick)\u3067\u30af\u30a8\u30ea\u3092\u5171\u6709\u3057\u305f\u3044\u6642\u306eTips\n\n\u74b0\u5883\n\nScala 2.11.6\nPlay 2.4.4\nplay-slick 1.1.0\nslick 3.1.0\n\n\nSlick\uff08play-slick\uff09\u3067DB\u30a2\u30af\u30bb\u30b9\n\u57fa\u672c\u5f62\u306f\u3053\u3093\u306a\u611f\u3058\npackage repositories\n\nimport javax.inject.Inject\n\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.Future\n\nimport play.api.db.slick.{DatabaseConfigProvider, HasDatabaseConfigProvider}\n\nimport com.google.inject.ImplementedBy\nimport models.Tables\nimport models.Tables._\nimport slick.driver.JdbcProfile\n\n@ImplementedBy(classOf[FooRepository])\ntrait FooRepositoryLike\n  extends HasDatabaseConfigProvider[JdbcProfile] {\n\n  def findById(id: String): Future[Option[(FooRow, BarRow)]]\n}\n\nclass FooRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends FooRepositoryLike {\n  import driver.api._\n\n  def findById(id: String): Future[Option[(FooRow, BarRow)]] = {\n\n    val query = for {\n      f <- Foo if f.id === id.bind\n      b <- Bar if b.id === f.barId\n      // and more...\n    } yield (f, b)\n\n    db.run(query.result.headOption)\n  }\n}\n\n\u3067\u3001\u4eca\u56de\u306e\u4e3b\u984c\u3067\u3042\u308b\u30af\u30a8\u30ea\u3063\u3066\u547c\u3093\u3067\u308b\u306e\u304c\u2191\u306e val query = for {... \u306e\u90e8\u5206\n\u8907\u96d1\u306a\u30c6\u30fc\u30d6\u30eb\u69cb\u6210\u3060\u3068\u3053\u3053\u304c\u7d50\u69cb\u80a5\u5927\u5316\u3059\u308b\u3002\n\u3055\u3089\u306b\u2191\u306efindById\u3068\u540c\u3058\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u5225\u306e\u30e1\u30bd\u30c3\u30c9\u3084\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u305d\u308c\u305e\u308c\u306b\u540c\u3058\u30af\u30a8\u30ea\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306f\u5197\u9577\u3002\u4fdd\u5b88\u6027\u306b\u6b20\u3051\u308b\u3002\u306e\u3067\u5171\u6709\u3057\u305f\u3044\u3002\n\n\u540c\u4e00\u30af\u30e9\u30b9\u5185\u3067\u5171\u6709\n\u540c\u4e00\u30af\u30e9\u30b9\u5185\u3067\u3042\u308c\u3070\u30af\u30a8\u30ea\u90e8\u5206\u3060\u3051 lazy val \u3068\u304b\u3067\u5207\u308a\u51fa\u3057\u3066\u4f7f\u3044\u56de\u3059\u3002\nclass FooRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends FooRepositoryLike {\n  import driver.api._\n\n  /*\n   * \u5207\u308a\u51fa\u3057\u305f\u30af\u30a8\u30ea\n   */\n  lazy val fooQuery = for {\n    f <- Foo if f.id === id.bind\n    b <- Bar if b.id === f.barId\n    // and more...\n  } yield (f, b)\n\n  def findById(id: String): Future[Option[(FooRow, BarRow)]] = \n    db.run(fooQuery.filter(_._1.id === id.bind).result.headOption)\n\n  def findAll(): Future[Seq[(FooRow, BarRow)]] = \n    db.run(fooQuery.sortBy(_._1.createAt.desc).result)\n}\n\n\n\u5225\u30af\u30e9\u30b9\u3067\u5171\u6709\n\u540c\u3058\u30af\u30a8\u30ea\u3092\u5225\u30af\u30e9\u30b9\u3067\u4f7f\u3044\u305f\u3044\u5834\u5408\u3001 trait \u306b\u5207\u308a\u51fa\u3057\u3066\u30df\u30c3\u30af\u30b9\u30a4\u30f3\n/*\n * \u5207\u308a\u51fa\u3057\u305f\u30af\u30a8\u30ea\n */\ntrait FooQuery\n  extends HasDatabaseConfigProvider[JdbcProfile] {\n  import driver.api._\n\n  lazy val fooQuery = for {\n    f <- Foo if f.id === id.bind\n    b <- Bar if b.id === f.barId\n    // and more...\n  } yield (f, b)\n}\n\nclass FooRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends FooRepositoryLike with FooQuery {\n  import driver.api._\n\n  def findById(id: String): Future[Option[(FooRow, BarRow)]] = \n    db.run(fooQuery.filter(_._1.id === id.bind).result.headOption)\n\n  def findAll(): Future[Seq[(FooRow, BarRow)]] = \n    db.run(fooQuery.sortBy(_._1.createAt.desc).result)\n}\n\n// ----------------\n\nclass BazRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends BazRepositoryLike with FooQuery {\n  import driver.api._\n\n  def findById(id: String): Future[Option[(BazRow, FooRow, BarRow)]] = {\n    val query = for {\n      bz <- Baz if bz.id === id.bind\n      (f, b) <- fooQuery if f.id === bz.fooId\n    } yield (bz, f, b)\n\n    db.run(query.result.headOption)\n  }\n}\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u5207\u308a\u51fa\u3057\u305f trait \u306e\u3053\u306e\u90e8\u5206\ntrait FooQuery\n  extends HasDatabaseConfigProvider[JdbcProfile] {\n  import driver.api._\n\n// ...\n\n\u3053\u306e extends \u3068 import \u304c\u306a\u3044\u3068\u2193\u307f\u305f\u3044\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n\nError: value === is not a member of Tables.profile.simple.Column[String]\n\n\n\u53c2\u8003\n\nSlick 2.0.2 Error: value === is not a member of Tables.profile.simple.Column[String]\nSlick\u3067\u5171\u901a\u306e\u30af\u30a8\u30ea\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\nPlaySlick\u3067\u4f7f\u3063\u3066\u307f\u308bSlick3.1\u306b\u3088\u308bDB\u64cd\u4f5c\n\nSlick(play-slick)\u3067\u30af\u30a8\u30ea\u3092\u5171\u6709\u3057\u305f\u3044\u6642\u306eTips\n\n## \u74b0\u5883\n\n- Scala 2.11.6\n- Play 2.4.4\n- play-slick 1.1.0\n- slick 3.1.0\n\n## Slick\uff08play-slick\uff09\u3067DB\u30a2\u30af\u30bb\u30b9\n\n\u57fa\u672c\u5f62\u306f\u3053\u3093\u306a\u611f\u3058\n\n```scala\npackage repositories\n\nimport javax.inject.Inject\n\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.Future\n\nimport play.api.db.slick.{DatabaseConfigProvider, HasDatabaseConfigProvider}\n\nimport com.google.inject.ImplementedBy\nimport models.Tables\nimport models.Tables._\nimport slick.driver.JdbcProfile\n\n@ImplementedBy(classOf[FooRepository])\ntrait FooRepositoryLike\n  extends HasDatabaseConfigProvider[JdbcProfile] {\n\n  def findById(id: String): Future[Option[(FooRow, BarRow)]]\n}\n\nclass FooRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends FooRepositoryLike {\n  import driver.api._\n\n  def findById(id: String): Future[Option[(FooRow, BarRow)]] = {\n\n    val query = for {\n      f <- Foo if f.id === id.bind\n      b <- Bar if b.id === f.barId\n      // and more...\n    } yield (f, b)\n\n    db.run(query.result.headOption)\n  }\n}\n```\n\n\u3067\u3001\u4eca\u56de\u306e\u4e3b\u984c\u3067\u3042\u308b\u30af\u30a8\u30ea\u3063\u3066\u547c\u3093\u3067\u308b\u306e\u304c\u2191\u306e `val query = for {...` \u306e\u90e8\u5206\n\u8907\u96d1\u306a\u30c6\u30fc\u30d6\u30eb\u69cb\u6210\u3060\u3068\u3053\u3053\u304c\u7d50\u69cb\u80a5\u5927\u5316\u3059\u308b\u3002\n\n\u3055\u3089\u306b\u2191\u306e`findById`\u3068\u540c\u3058\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u5225\u306e\u30e1\u30bd\u30c3\u30c9\u3084\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u305d\u308c\u305e\u308c\u306b\u540c\u3058\u30af\u30a8\u30ea\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306f\u5197\u9577\u3002\u4fdd\u5b88\u6027\u306b\u6b20\u3051\u308b\u3002\u306e\u3067\u5171\u6709\u3057\u305f\u3044\u3002\n\n## \u540c\u4e00\u30af\u30e9\u30b9\u5185\u3067\u5171\u6709\n\n\u540c\u4e00\u30af\u30e9\u30b9\u5185\u3067\u3042\u308c\u3070\u30af\u30a8\u30ea\u90e8\u5206\u3060\u3051 `lazy val` \u3068\u304b\u3067\u5207\u308a\u51fa\u3057\u3066\u4f7f\u3044\u56de\u3059\u3002\n\n```scala\nclass FooRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends FooRepositoryLike {\n  import driver.api._\n\n  /*\n   * \u5207\u308a\u51fa\u3057\u305f\u30af\u30a8\u30ea\n   */\n  lazy val fooQuery = for {\n    f <- Foo if f.id === id.bind\n    b <- Bar if b.id === f.barId\n    // and more...\n  } yield (f, b)\n\n  def findById(id: String): Future[Option[(FooRow, BarRow)]] = \n    db.run(fooQuery.filter(_._1.id === id.bind).result.headOption)\n\n  def findAll(): Future[Seq[(FooRow, BarRow)]] = \n    db.run(fooQuery.sortBy(_._1.createAt.desc).result)\n}\n```\n\n## \u5225\u30af\u30e9\u30b9\u3067\u5171\u6709\n\n\u540c\u3058\u30af\u30a8\u30ea\u3092\u5225\u30af\u30e9\u30b9\u3067\u4f7f\u3044\u305f\u3044\u5834\u5408\u3001 `trait` \u306b\u5207\u308a\u51fa\u3057\u3066\u30df\u30c3\u30af\u30b9\u30a4\u30f3\n\n```scala\n/*\n * \u5207\u308a\u51fa\u3057\u305f\u30af\u30a8\u30ea\n */\ntrait FooQuery\n  extends HasDatabaseConfigProvider[JdbcProfile] {\n  import driver.api._\n\n  lazy val fooQuery = for {\n    f <- Foo if f.id === id.bind\n    b <- Bar if b.id === f.barId\n    // and more...\n  } yield (f, b)\n}\n\nclass FooRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends FooRepositoryLike with FooQuery {\n  import driver.api._\n\n  def findById(id: String): Future[Option[(FooRow, BarRow)]] = \n    db.run(fooQuery.filter(_._1.id === id.bind).result.headOption)\n\n  def findAll(): Future[Seq[(FooRow, BarRow)]] = \n    db.run(fooQuery.sortBy(_._1.createAt.desc).result)\n}\n\n// ----------------\n\nclass BazRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends BazRepositoryLike with FooQuery {\n  import driver.api._\n\n  def findById(id: String): Future[Option[(BazRow, FooRow, BarRow)]] = {\n    val query = for {\n      bz <- Baz if bz.id === id.bind\n      (f, b) <- fooQuery if f.id === bz.fooId\n    } yield (bz, f, b)\n\n    db.run(query.result.headOption)\n  }\n}\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u5207\u308a\u51fa\u3057\u305f `trait` \u306e\u3053\u306e\u90e8\u5206\n\n```scala\ntrait FooQuery\n  extends HasDatabaseConfigProvider[JdbcProfile] {\n  import driver.api._\n\n// ...\n```\n\n\u3053\u306e `extends` \u3068 `import` \u304c\u306a\u3044\u3068\u2193\u307f\u305f\u3044\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n```\nError: value === is not a member of Tables.profile.simple.Column[String]\n```\n\n## \u53c2\u8003\n\n- [Slick 2.0.2 Error: value === is not a member of Tables.profile.simple.Column[String]](http://stackoverflow.com/questions/23721583/slick-2-0-2-error-value-is-not-a-member-of-tables-profile-simple-columnstr)\n- [Slick\u3067\u5171\u901a\u306e\u30af\u30a8\u30ea\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5](http://qiita.com/mikamix/items/9545255ca326fe0c967b)\n- [PlaySlick\u3067\u4f7f\u3063\u3066\u307f\u308bSlick3.1\u306b\u3088\u308bDB\u64cd\u4f5c](http://catcher-in-the-tech.net/2333/)\n", "tags": ["slick", "PlayFramework", "Scala"]}