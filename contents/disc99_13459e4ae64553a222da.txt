{"context": "\n\u3053\u3061\u3089\u306e\u6295\u7a3f\u306e\u3068\u304d\u306b\u4f5c\u6210\u3057\u305f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u65b0\u305f\u306bHogen\u3068\u3044\u3046\u540d\u524d\u306b\u5909\u66f4\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8a73\u7d30\u306b\u95a2\u3057\u3066\u306f\u8fd1\u65e5\u516c\u958b\u3055\u305b\u3066\u3082\u3089\u3046\u306e\u3067\u3001\u3088\u308d\u3057\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u6700\u8fd1\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u306fJava\u3001\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb(Gradle)\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9(Spock\u3001Geb)\u306e\u7d44\u307f\u5408\u308f\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u3066Groovy\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u5897\u3048\u3066\u304d\u307e\u3057\u305f\u3002\nJava\u3067\u306eDB\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\u306fDbSetup\u304c\u697d\n\n\u305d\u3093\u306a\u4e2d\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u62dd\u898b\u3055\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\nGroovy\u3067\u4f3c\u305f\u3088\u3046\u306ainsert\u3092\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\ninsert.groovy\nSql sql = Sql.newInstance(\"jdbc:h2:mem:\", \"org.h2.Driver\")\n\ndef table = sql.dataSet('item_master')\ntable.add(id:1, name:'Apple', price:500)\ntable.add(id:2, name:'Orange', price:250)\n// ...\n\n\n\n\u3053\u308c\u3067\u3082\u5341\u5206\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u305b\u306a\u3089Spock\u306e\u30c7\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u306b\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306aDSL\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\ninsert.groovy\nSql h2 = Sql.newInstance(\"jdbc:h2:mem:\", \"org.h2.Driver\")\n\nTableSetup.insert h2, {\n    table 'item_master'\n    rows {\n        id | name     | price\n        1  | 'Apple'  | 500\n        2  | 'Orange' | 250\n    }\n}\n//  -> insert into item_master (id, name, price) values (1, Apple, 500)\n//     insert into item_master (id, name, price) values (2, Orange, 250)\n//     ...\n\n\n\n\u500b\u4eba\u5dee\u306f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3082\u3068\u306eadd\u30e1\u30bd\u30c3\u30c9\u3088\u308a\u76f4\u611f\u7684\u306b\u30c6\u30fc\u30d6\u30eb\u304c\u8a18\u8ff0\u51fa\u6765\u307e\u3059\u3002\n\u5168\u3066\u306e\u30bd\u30fc\u30b9:Github\n\n\u4ed5\u7d44\u307f\nTableSetup#insert\u306e\u7b2c\u4e00\u5f15\u6570\u306bSql\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u3057\u3001\u305d\u308c\u4ee5\u964d\u306ftable\u3068rows\u3092\u5b9a\u7fa9\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u53ef\u5909\u9577\u5f15\u6570\u3067\u6e21\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7d9a\u3051\u3066\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u6e21\u305b\u3070\u8907\u6570\u30c6\u30fc\u30d6\u30eb\u306b\u3082\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\nTableSetup.groovy\nclass TableSetup {\n\n    def static insert(Sql sql, @DelegatesTo(TableInsertHandler) Closure... cls) {\n        cls.each {\n            def tableInsert = new TableInsertHandler(sql: sql)\n            def handler = it.rehydrate(tableInsert, this, this)\n            handler.resolveStrategy = Closure.DELEGATE_ONLY\n            handler()\n        }\n    }\n\n    static class TableInsertHandler {\n        Sql sql\n        String table\n        def table(String table) { this.table = table }\n        def rows(Closure cl) {\n            TableParser.asTable(cl).toMapList().each {\n                sql.dataSet(table).add(it)\n            }\n        }\n    }\n}\n\n\n\n\nSpock\u3067\u4f7f\u308f\u308c\u3066\u308b\u30c7\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\u578b\u306for\u306e\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u884c\u3044List\u306b\u5909\u63db\u3059\u308b\u3088\u3046\u306a\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nTableParser.groovy,PropertyColumnConverter.groovy,Row.groovy,Column.groovy\nclass TableParser {\n\n    private static ThreadLocal<List> context = new ThreadLocal<List>()\n\n    static or(self, arg) {\n        appendRow(self, arg)\n    }\n\n    static appendRow(value, nextValue) {\n        def row = new Row(values: [value])\n        context.get().add(row)\n        row.or(nextValue)\n    }\n\n    static asListOfRows(Closure tableData) {\n        context.set([])\n        use(TableParser) {\n            tableData.delegate = new PropertyColumnConverter()\n            tableData.resolveStrategy = Closure.DELEGATE_FIRST\n            tableData()\n        }\n        context.get()\n    }\n\n    static asTable(Closure tableData) {\n        def list = asListOfRows(tableData)\n        new Table(list.head().values, list.tail())\n    }\n}\n\nclass PropertyColumnConverter {\n\n    def getProperty(String property) {\n        new Column(name: property)\n    }\n}\n\n@ToString\nclass Column {\n    String name\n}\n\n@ToString\nclass Row {\n\n    List values = []\n\n    def or(arg) {\n        values.add(arg)\n        this\n    }\n}\n\n\n\nGroovy\u306f\u6700\u8fd1\u4f7f\u3044\u59cb\u3081\u305f\u3068\u3053\u308d\u3067\u3059\u304cJava\u3068\u6bd4\u3079\u3066\u30b7\u30f3\u30d7\u30eb\u306a\u8a18\u8ff0\u3084\u3001\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u3057\u3084\u3059\u3055\u306a\u3069\u3053\u3046\u3044\u3063\u305f\u6642\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u697d\u3057\u3044\u3067\u3059\u306d\uff01\n\n\u53c2\u8003\nDomain-Specific Languages\nSimple Table DSL in Groovy\n\n> \u3053\u3061\u3089\u306e\u6295\u7a3f\u306e\u3068\u304d\u306b\u4f5c\u6210\u3057\u305f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u65b0\u305f\u306b`Hogen`\u3068\u3044\u3046\u540d\u524d\u306b\u5909\u66f4\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8a73\u7d30\u306b\u95a2\u3057\u3066\u306f\u8fd1\u65e5\u516c\u958b\u3055\u305b\u3066\u3082\u3089\u3046\u306e\u3067\u3001\u3088\u308d\u3057\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u6700\u8fd1\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u306fJava\u3001\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb(Gradle)\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9(Spock\u3001Geb)\u306e\u7d44\u307f\u5408\u308f\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u3066Groovy\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u5897\u3048\u3066\u304d\u307e\u3057\u305f\u3002\n\n[Java\u3067\u306eDB\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\u306fDbSetup\u304c\u697d\n](http://qiita.com/ikemo/items/a27ece72fe2af3683ff6)\n\u305d\u3093\u306a\u4e2d\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u62dd\u898b\u3055\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\nGroovy\u3067\u4f3c\u305f\u3088\u3046\u306ainsert\u3092\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```Groovy:insert.groovy\nSql sql = Sql.newInstance(\"jdbc:h2:mem:\", \"org.h2.Driver\")\n\ndef table = sql.dataSet('item_master')\ntable.add(id:1, name:'Apple', price:500)\ntable.add(id:2, name:'Orange', price:250)\n// ...\n\n```\n\n\u3053\u308c\u3067\u3082\u5341\u5206\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u305b\u306a\u3089Spock\u306e\u30c7\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u306b\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306aDSL\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n```Groovy:insert.groovy\nSql h2 = Sql.newInstance(\"jdbc:h2:mem:\", \"org.h2.Driver\")\n\nTableSetup.insert h2, {\n    table 'item_master'\n    rows {\n        id | name     | price\n        1  | 'Apple'  | 500\n        2  | 'Orange' | 250\n    }\n}\n//  -> insert into item_master (id, name, price) values (1, Apple, 500)\n//     insert into item_master (id, name, price) values (2, Orange, 250)\n//     ...\n\n```\n\n\u500b\u4eba\u5dee\u306f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3082\u3068\u306eadd\u30e1\u30bd\u30c3\u30c9\u3088\u308a\u76f4\u611f\u7684\u306b\u30c6\u30fc\u30d6\u30eb\u304c\u8a18\u8ff0\u51fa\u6765\u307e\u3059\u3002\n[\u5168\u3066\u306e\u30bd\u30fc\u30b9:Github](https://github.com/disc99/table-setup)\n\n\n\n## \u4ed5\u7d44\u307f\n\nTableSetup#insert\u306e\u7b2c\u4e00\u5f15\u6570\u306bSql\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u3057\u3001\u305d\u308c\u4ee5\u964d\u306ftable\u3068rows\u3092\u5b9a\u7fa9\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u53ef\u5909\u9577\u5f15\u6570\u3067\u6e21\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7d9a\u3051\u3066\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u6e21\u305b\u3070\u8907\u6570\u30c6\u30fc\u30d6\u30eb\u306b\u3082\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n```Groovy:TableSetup.groovy\nclass TableSetup {\n\n    def static insert(Sql sql, @DelegatesTo(TableInsertHandler) Closure... cls) {\n        cls.each {\n            def tableInsert = new TableInsertHandler(sql: sql)\n            def handler = it.rehydrate(tableInsert, this, this)\n            handler.resolveStrategy = Closure.DELEGATE_ONLY\n            handler()\n        }\n    }\n\n    static class TableInsertHandler {\n        Sql sql\n        String table\n        def table(String table) { this.table = table }\n        def rows(Closure cl) {\n            TableParser.asTable(cl).toMapList().each {\n                sql.dataSet(table).add(it)\n            }\n        }\n    }\n}\n\n```\n\n\n<br>\nSpock\u3067\u4f7f\u308f\u308c\u3066\u308b\u30c7\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\u578b\u306for\u306e\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u884c\u3044List\u306b\u5909\u63db\u3059\u308b\u3088\u3046\u306a\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n```groovy:TableParser.groovy,PropertyColumnConverter.groovy,Row.groovy,Column.groovy\nclass TableParser {\n\n    private static ThreadLocal<List> context = new ThreadLocal<List>()\n\n    static or(self, arg) {\n        appendRow(self, arg)\n    }\n\n    static appendRow(value, nextValue) {\n        def row = new Row(values: [value])\n        context.get().add(row)\n        row.or(nextValue)\n    }\n\n    static asListOfRows(Closure tableData) {\n        context.set([])\n        use(TableParser) {\n            tableData.delegate = new PropertyColumnConverter()\n            tableData.resolveStrategy = Closure.DELEGATE_FIRST\n            tableData()\n        }\n        context.get()\n    }\n\n    static asTable(Closure tableData) {\n        def list = asListOfRows(tableData)\n        new Table(list.head().values, list.tail())\n    }\n}\n\nclass PropertyColumnConverter {\n\n    def getProperty(String property) {\n        new Column(name: property)\n    }\n}\n\n@ToString\nclass Column {\n    String name\n}\n\n@ToString\nclass Row {\n\n    List values = []\n\n    def or(arg) {\n        values.add(arg)\n        this\n    }\n}\n\n```\n\nGroovy\u306f\u6700\u8fd1\u4f7f\u3044\u59cb\u3081\u305f\u3068\u3053\u308d\u3067\u3059\u304cJava\u3068\u6bd4\u3079\u3066\u30b7\u30f3\u30d7\u30eb\u306a\u8a18\u8ff0\u3084\u3001\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u3057\u3084\u3059\u3055\u306a\u3069\u3053\u3046\u3044\u3063\u305f\u6642\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u697d\u3057\u3044\u3067\u3059\u306d\uff01\n\n\n\n### \u53c2\u8003\n[Domain-Specific Languages](http://docs.groovy-lang.org/docs/latest/html/documentation/core-domain-specific-languages.html)\n[Simple Table DSL in Groovy](http://tux2323.blogspot.jp/2013/04/simple-table-dsl-in-groovy.html)\n", "tags": ["RDBMS", "spock", "Java", "DSL", "Groovy"]}