{"tags": ["Java8", "JavaScript", "Groovy", "Underscore.js", "jQuery"], "context": " More than 1 year has passed since last update.each() \u3068\u304b map() \u3068\u304b\u3001\u30ea\u30b9\u30c8\u3084\u30de\u30c3\u30d7\u3092\u64cd\u4f5c\u3059\u308b\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u3001\u8a00\u8a9e\u3054\u3068\u306b\u3069\u3046\u66f8\u304f\u304b\u306e\u30e1\u30e2\u3002\n\u5bfe\u8c61\u306f\u3001\u81ea\u5206\u304c\u3088\u304f\u4f7f\u3046 Java(8 \u4ee5\u4e0a), Groovy, JavaScript(Underscore.js, jQuery) \u3060\u3051\u3002\n\n\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3092\u9806\u6b21\u51e6\u7406\u3059\u308b\n\nJava\nimport java.util.Arrays;\n...\n\nArrays.asList(1, 2, 3, 4).forEach(System.out::println);\n\n\nGroovy\n[1, 2, 3, 4].each {println it}\n\n\nJavaScript\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u5f15\u6570\u306e\u9806\u5e8f\u304c\u7570\u306a\u308b\u306e\u3067\u6ce8\u610f\u3002\n\nUnderscore.js\n_.each([1, 2, 3, 4], function(e, i, array) {\n    console.log(e);\n});\n\n\njQuery\n$.each([1, 2, 3, 4], function(i, e) {\n    console.log(e);\n});\n\n\n\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u305f\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\n\nJava\nimport java.util.Arrays;\n...\n\nArrays.asList(1, 2, 3, 4).stream()\n                         .filter(i -> i % 2 == 0)\n                         .forEach(System.out::println);\n\n\nGroovy\n[1, 2, 3, 4].findAll {it % 2 == 0}\n            .each {println it}\n\n\nJavaScript\n\nUnderscore.js\nvar array = _.filter([1, 2, 3, 4], function(e) {\n    return e % 2 === 0;\n});\n\nconsole.log(array);\n\n\njQuery\nvar array = $.grep([1, 2, 3, 4], function(e, i) {\n    return e % 2 === 0;\n});\n\nconsole.log(array);\n\neach \u3068\u306f\u5f15\u6570\u306e\u9806\u756a\u304c\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u5148\u982d\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\n\nJava\nimport java.util.Arrays;\nimport java.util.Optional;\n...\n\nOptional<Integer> result = Arrays.asList(1, 2, 3, 4).stream()\n                                                    .filter(i -> i % 2 == 0)\n                                                    .findFirst();\n\nSystem.out.println(result.get());\n\n\nGroovy\nprintln([1, 2, 3, 4].find {it % 2 == 0})\n\n\nJavaScript\n\nUnderscore.js\nconsole.log(_.find([1, 2, 3, 4], function(e) {\n    return e % 2 === 0;\n}));\n\n\njQuery\n\u306a\u3057\n\n\u30ea\u30b9\u30c8\u306e\u5168\u8981\u7d20\u304c\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u78ba\u8a8d\u3059\u308b\n\nJava\nimport java.util.Arrays;\n...\n\nboolean result = Arrays.asList(1, 2, 3, 4).stream().allMatch(i -> i < 10);\n\nSystem.out.println(result);\n\n\nGroovy\nprintln([1, 2, 3, 4].every {it < 10})\n\n\nJavaScript\n\nUnderscore.js\nconsole.log(_.every([1, 2, 3, 4], function(e) {\n    return e < 10;\n}));\n\n\njQuery\n\u306a\u3057\n\n\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306e\u3046\u3061\u3001\u3044\u305a\u308c\u304b\u304c\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\n\nJava\nboolean result = Arrays.asList(1, 2, 3, 4).stream().anyMatch(i -> i == 3);\n\nSystem.out.println(result);\n\n\nGroovy\nprintln([1, 2, 3, 4].any {it == 3})\n\n\nJavaScript\n\nUnderscore.js\nconsole.log(_.any([1, 2, 3, 4], function(e) {\n    return e === 3;\n}));\n\n\njQuery\n\u306a\u3057\n\n\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3092\u51e6\u7406\u3057\u3066\u5225\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5909\u63db\u5f8c\u306e\u5024\u3067\u69cb\u7bc9\u3055\u308c\u305f\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\n\nJava\nimport static java.util.stream.Collectors.*;\nimport java.util.Arrays;\nimport java.util.List;\n...\n\nArrays.asList(1, 2, 3, 4)\n      .stream()\n      .map(i -> i * 10)\n      .forEach(System.out::println);\n\n\nGroovy\n[1, 2, 3, 4].collect {it * 10}\n            .each {println it}\n\n\nJavaScript\n\nUnderscore.js\nvar array = _.map([1, 2, 3, 4], function(e) {\n    return e * 10;\n});\n\nconsole.log(array);\n\n\njQuery\nvar array = $.map([1, 2, 3, 4], function(e, i) {\n    return e * 10;\n});\n\nconsole.log(array);\n\n\n\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u304b\u3089\u6570\u5024\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u5408\u8a08\u3092\u53d6\u5f97\u3059\u308b\n\nJava\nimport java.util.Arrays;\n...\n\nint sum = Arrays.asList(\"1\", \"12\", \"123\", \"1234\")\n                .stream()\n                .mapToInt(s -> s.length())\n                .sum();\n\nSystem.out.println(sum);\n\ncollect(Collectors.summingInt()) \u3084 reduce() \u3092\u4f7f\u3046\u65b9\u6cd5\u3082\u3042\u308b\u3002\n\nGroovy\nprintln([\"1\", \"12\", \"123\", \"1234\"].inject(0, {memo, s -> memo + s.length()}))\n\nprintln([\"1\", \"12\", \"123\", \"1234\"].collect {it.length()}.sum())\n\n\nJavaScript\n\nUnderscore.js\nvar sum = _.reduce(['1', '12', '123', '1234'], function(memo, s) {\n    return memo + s.length;\n}, 0);\n\nconsole.log(sum);\n\n\njQuery\n\u306a\u3057\n\n\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u5168\u3066\u62bd\u51fa\u3057\u3066\u3001\uff11\u3064\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\nGroovy \u3068 Underscore.js \u306f\u3001\u6df1\u304f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3067\u3082\u3001\u518d\u5e30\u7684\u306b\u8981\u7d20\u3092\u62bd\u51fa\u3057\u3066\u5e73\u3089\u306b\u3057\u3066\u304f\u308c\u308b\u3002\nJava \u306e\u5b9f\u88c5\u4f8b\u3067\u306f\u3001\uff11\u968e\u5c64\u307e\u3067\u3057\u304b\u898b\u306b\u884c\u304b\u306a\u3044\u306e\u3067\u3001\u5b8c\u5168\u306b\u5e73\u3089\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n\nJava\nimport java.util.Arrays;\nimport java.util.List;\n...\n\nList<Integer> list1 = Arrays.asList(1, 2);\nList<Integer> list2 = Arrays.asList(3, 4);\nList<Integer> list3 = Arrays.asList(5, 6);\n\nArrays.asList(list1, list2, list3)\n      .stream()\n      .flatMap(list -> list.stream())\n      .forEach(System.out::println);\n\n\nGroovy:\ndef array = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n]\n\nprintln array.flatten()\n\n\nJavaScript\n\nUnderscore.js\nvar array = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n];\n\nconsole.log(_.flatten(array));\n\n\njQuery\n\u306a\u3057\n\n\u8981\u7d20\u306e\u91cd\u8907\u3092\u53d6\u308a\u9664\u304f\n\nJava\nimport java.util.Arrays;\n...\n\nArrays.asList(3, 1, 2, 1, 4, 2, 3, 4)\n      .stream()\n      .distinct()\n      .forEach(System.out::println);\n\n\u6bd4\u8f03\u306b\u306f equals() \u30e1\u30bd\u30c3\u30c9\u304c\u7528\u3044\u3089\u308c\u308b\u3002\n\nGroovy\nprintln ([3, 1, 2, 1, 4, 2, 3, 4].unique())\n\n\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u6bd4\u8f03\u30ed\u30b8\u30c3\u30af\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\nJavaScript\n\nUnderscore.js\nconsole.log( _.uniq([3, 1, 2, 1, 4, 2, 3, 4]) );\n\n\u6bd4\u8f03\u306b\u306f === \u6f14\u7b97\u5b50\u304c\u7528\u3044\u3089\u308c\u308b\u3002\n\njQuery\n\u306a\u3057\n\n\u30ea\u30b9\u30c8\u3092\u30bd\u30fc\u30c8\u3059\u308b\n\nJava\nimport java.util.Arrays;\nimport java.util.List;\n...\n\nList<Integer> list = Arrays.asList(4, 1, 3, 2);\nlist.sort(Integer::compare);\nSystem.out.println(list);\n\n\nGroovy\nprintln( [4, 1, 3, 2].sort() )\n\n\nJavaScript\n\nUnderscore.js\nvar array = _.sortBy([4, 1, 3, 2], function(e) {\n    return e;\n});\n\nconsole.log(array);\n\n\u7b2c\u4e8c\u5f15\u6570\u306e\u95a2\u6570\u306f\u3001\u30bd\u30fc\u30c8\u3067\u4f7f\u7528\u3059\u308b\u5024\u3092\u8fd4\u3059\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\uff08\u6bd4\u8f03\u51e6\u7406\uff08comparator\uff09\u3092\u5b9f\u88c5\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u3044\uff09\u3002\n\njQuery\n\u306a\u3057\u3002\n\n\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u6700\u5c0f\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\n\u5404\u8a00\u8a9e\u3001\u6700\u5927\u306e\u5834\u5408\u306f max \u306b\u5909\u308f\u308b\u3060\u3051\u3002\n\nJava\nimport java.util.Arrays;\nimport java.util.Optional;\n...\n\nOptional<Integer> min = Arrays.asList(1, 2, 3, 4).stream().min(Integer::compare);\nSystem.out.println(min.get());\n\n\nGroovy\nprintln([1, 2, 3, 4].min())\n\n\nJavaScript\n\nUnderscore.js\nvar min = _.min([1, 2, 3, 4]);\nconsole.log(min);\n\n\njQuery\n\u306a\u3057\n\n\u30de\u30c3\u30d7\u306e\u5404\u8981\u7d20\u3092\u9806\u6b21\u51e6\u7406\u3059\u308b\n\nJava\nimport java.util.HashMap;\nimport java.util.Map;\n...\n\nMap<String, String> map = new HashMap<>();\nmap.put(\"hoge\", \"HOGE\");\nmap.put(\"fuga\", \"FUGA\");\nmap.put(\"piyo\", \"PIYO\");\n\nmap.forEach((key, value) -> {\n    System.out.println(key + \" : \" + value);\n});\n\n\nGroovy\n[hoge: 'HOGE', fuga: 'FUGA', piyo: 'PIYO'].each {key, value ->\n    println \"${key} : ${value}\"\n}\n\n\nJavaScript\n\nUnderscore.js\nvar map = {hoge: 'HOGE', fuga: 'FUGA', piyo: 'PIYO'};\n\n_.each(map, function(value, key, obj) {\n    console.log(key + ' : ' + value);\n});\n\n\njQuery\nvar map = {hoge: 'HOGE', fuga: 'FUGA', piyo: 'PIYO'};\n\n$.each(map, function(key, value) {\n    console.log(key + ' : ' + value);\n});\n\n\n\u30de\u30c3\u30d7\u306e\u5404\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u51e6\u7406\u3057\u3066\u6700\u7d42\u7684\u306b\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3059\u308b\n\nJava\nimport java.util.HashMap;\nimport java.util.Map;\n...\n\nMap<String, String> map = new HashMap<>();\nmap.put(\"hoge\", \"HOGE\");\nmap.put(\"fuga\", \"FUGA\");\nmap.put(\"piyo\", \"PIYO\");\n\nmap.entrySet()\n   .stream()\n   .map(e -> e.getKey() + e.getValue())\n   .forEach(System.out::println);\n\n\nGroovy\n[hoge: 'HOGE', fuga: 'FUGA', piyo: 'PIYO']\n    .collect {it.key + it.value}\n    .each {println it}\n\n\nJavaScript\n\nUnderscore.js\nvar map = {hoge: 'HOGE', fuga: 'UGA', piyo: 'PIYO'};\n\nvar array = _.map(map, function(value, key) {\n    return key + value;\n});\n\nconsole.log(array);\n\n\njQuery\nvar map = {hoge: 'HOGE', fuga: 'UGA', piyo: 'PIYO'};\n\nvar array = $.map(map, function(value, key) {\n    return key + value;\n});\n\nconsole.log(array);\n\n\n\u30e1\u30bd\u30c3\u30c9\uff08\u95a2\u6570\uff09\u540d\u5bfe\u5fdc\u8868\n\n\n\nJava\nGroovy\nUnderscore.js\njQuery\n\n\n\n\nforEach\neach\neach\neach\n\n\nfilter\nfindAll\nfilter\ngrep\n\n\n-\nfind\nfind\n-\n\n\nallMatch\nevery\nevery\n-\n\n\nanyMatch\nany\nany\n-\n\n\nmap\ncollect\nmap\nmap\n\n\nreduce\ninject\nreduce\n-\n\n\nflatMap\nflatten\nflatten\n-\n\n\ndistinct\nunique\nuniq\n-\n\n\nsort\nsort\nsortBy\n-\n\n\nmin\nmin\nmin\n-\n\n\nmax\nmax\nmax\n-\n\n\n\n\n\u53c2\u8003\n\nJava Stream\u30e1\u30e2(Hishidama's Java8 Stream Memo)\nCollection (Groovy JDK)\nObject (Groovy JDK)\nGroovy - JN1015-Collections\nList (Groovy JDK)\nUtilities - jQuery \u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\nUtilities | jQuery API Documentation\nUnderscore.js\nJava Platform SE 8\n\n`each()` \u3068\u304b `map()` \u3068\u304b\u3001\u30ea\u30b9\u30c8\u3084\u30de\u30c3\u30d7\u3092\u64cd\u4f5c\u3059\u308b\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u3001\u8a00\u8a9e\u3054\u3068\u306b\u3069\u3046\u66f8\u304f\u304b\u306e\u30e1\u30e2\u3002\n\n\u5bfe\u8c61\u306f\u3001\u81ea\u5206\u304c\u3088\u304f\u4f7f\u3046 Java(8 \u4ee5\u4e0a), Groovy, JavaScript(Underscore.js, jQuery) \u3060\u3051\u3002\n\n#\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3092\u9806\u6b21\u51e6\u7406\u3059\u308b\n##Java\n```java:\nimport java.util.Arrays;\n...\n\nArrays.asList(1, 2, 3, 4).forEach(System.out::println);\n```\n\n##Groovy\n```groovy:\n[1, 2, 3, 4].each {println it}\n```\n\n##JavaScript\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u5f15\u6570\u306e\u9806\u5e8f\u304c\u7570\u306a\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n###Underscore.js\n```js:\n_.each([1, 2, 3, 4], function(e, i, array) {\n    console.log(e);\n});\n```\n\n###jQuery\n```js:\n$.each([1, 2, 3, 4], function(i, e) {\n    console.log(e);\n});\n```\n\n#\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u305f\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\n##Java\n```java:\nimport java.util.Arrays;\n...\n\nArrays.asList(1, 2, 3, 4).stream()\n                         .filter(i -> i % 2 == 0)\n                         .forEach(System.out::println);\n```\n\n##Groovy\n```groovy:\n[1, 2, 3, 4].findAll {it % 2 == 0}\n            .each {println it}\n```\n\n##JavaScript\n###Underscore.js\n```js:\nvar array = _.filter([1, 2, 3, 4], function(e) {\n    return e % 2 === 0;\n});\n\nconsole.log(array);\n```\n\n###jQuery\n```js:\nvar array = $.grep([1, 2, 3, 4], function(e, i) {\n    return e % 2 === 0;\n});\n\nconsole.log(array);\n```\n\n`each` \u3068\u306f\u5f15\u6570\u306e\u9806\u756a\u304c\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n#\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u5148\u982d\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\n##Java\n```java:\nimport java.util.Arrays;\nimport java.util.Optional;\n...\n\nOptional<Integer> result = Arrays.asList(1, 2, 3, 4).stream()\n                                                    .filter(i -> i % 2 == 0)\n                                                    .findFirst();\n\nSystem.out.println(result.get());\n```\n\n##Groovy\n```groovy:\nprintln([1, 2, 3, 4].find {it % 2 == 0})\n```\n\n##JavaScript\n###Underscore.js\n```js:\nconsole.log(_.find([1, 2, 3, 4], function(e) {\n    return e % 2 === 0;\n}));\n```\n\n###jQuery\n\u306a\u3057\n\n#\u30ea\u30b9\u30c8\u306e\u5168\u8981\u7d20\u304c\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u78ba\u8a8d\u3059\u308b\n##Java\n```java:\nimport java.util.Arrays;\n...\n\nboolean result = Arrays.asList(1, 2, 3, 4).stream().allMatch(i -> i < 10);\n\nSystem.out.println(result);\n```\n\n##Groovy\n```groovy:\nprintln([1, 2, 3, 4].every {it < 10})\n```\n\n##JavaScript\n###Underscore.js\n```js:\nconsole.log(_.every([1, 2, 3, 4], function(e) {\n    return e < 10;\n}));\n```\n\n###jQuery\n\u306a\u3057\n\n#\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306e\u3046\u3061\u3001\u3044\u305a\u308c\u304b\u304c\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\n##Java\n```java:\nboolean result = Arrays.asList(1, 2, 3, 4).stream().anyMatch(i -> i == 3);\n\nSystem.out.println(result);\n```\n\n##Groovy\n```groovy:\nprintln([1, 2, 3, 4].any {it == 3})\n```\n\n##JavaScript\n###Underscore.js\n```js:\nconsole.log(_.any([1, 2, 3, 4], function(e) {\n    return e === 3;\n}));\n```\n\n###jQuery\n\u306a\u3057\n\n#\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3092\u51e6\u7406\u3057\u3066\u5225\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5909\u63db\u5f8c\u306e\u5024\u3067\u69cb\u7bc9\u3055\u308c\u305f\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\n##Java\n```java:\nimport static java.util.stream.Collectors.*;\nimport java.util.Arrays;\nimport java.util.List;\n...\n\nArrays.asList(1, 2, 3, 4)\n      .stream()\n      .map(i -> i * 10)\n      .forEach(System.out::println);\n```\n\n##Groovy\n```groovy:\n[1, 2, 3, 4].collect {it * 10}\n            .each {println it}\n```\n\n##JavaScript\n###Underscore.js\n```js:\nvar array = _.map([1, 2, 3, 4], function(e) {\n    return e * 10;\n});\n\nconsole.log(array);\n```\n\n###jQuery\n```js:\nvar array = $.map([1, 2, 3, 4], function(e, i) {\n    return e * 10;\n});\n\nconsole.log(array);\n```\n\n#\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u304b\u3089\u6570\u5024\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u5408\u8a08\u3092\u53d6\u5f97\u3059\u308b\n##Java\n```java:\nimport java.util.Arrays;\n...\n\nint sum = Arrays.asList(\"1\", \"12\", \"123\", \"1234\")\n                .stream()\n                .mapToInt(s -> s.length())\n                .sum();\n\nSystem.out.println(sum);\n```\n\n`collect(Collectors.summingInt())` \u3084 `reduce()` \u3092\u4f7f\u3046\u65b9\u6cd5\u3082\u3042\u308b\u3002\n\n##Groovy\n```groovy:\nprintln([\"1\", \"12\", \"123\", \"1234\"].inject(0, {memo, s -> memo + s.length()}))\n\nprintln([\"1\", \"12\", \"123\", \"1234\"].collect {it.length()}.sum())\n```\n\n##JavaScript\n###Underscore.js\n```js:\nvar sum = _.reduce(['1', '12', '123', '1234'], function(memo, s) {\n    return memo + s.length;\n}, 0);\n\nconsole.log(sum);\n```\n\n###jQuery\n\u306a\u3057\n\n#\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u5168\u3066\u62bd\u51fa\u3057\u3066\u3001\uff11\u3064\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\nGroovy \u3068 Underscore.js \u306f\u3001\u6df1\u304f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3067\u3082\u3001\u518d\u5e30\u7684\u306b\u8981\u7d20\u3092\u62bd\u51fa\u3057\u3066\u5e73\u3089\u306b\u3057\u3066\u304f\u308c\u308b\u3002\nJava \u306e\u5b9f\u88c5\u4f8b\u3067\u306f\u3001\uff11\u968e\u5c64\u307e\u3067\u3057\u304b\u898b\u306b\u884c\u304b\u306a\u3044\u306e\u3067\u3001\u5b8c\u5168\u306b\u5e73\u3089\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n\n##Java\n```java:\nimport java.util.Arrays;\nimport java.util.List;\n...\n\nList<Integer> list1 = Arrays.asList(1, 2);\nList<Integer> list2 = Arrays.asList(3, 4);\nList<Integer> list3 = Arrays.asList(5, 6);\n\nArrays.asList(list1, list2, list3)\n      .stream()\n      .flatMap(list -> list.stream())\n      .forEach(System.out::println);\n```\n\n##Groovy:\n```groovy:\ndef array = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n]\n\nprintln array.flatten()\n```\n\n##JavaScript\n###Underscore.js\n```js:\nvar array = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n];\n\nconsole.log(_.flatten(array));\n```\n\n###jQuery\n\u306a\u3057\n\n#\u8981\u7d20\u306e\u91cd\u8907\u3092\u53d6\u308a\u9664\u304f\n##Java\n```java:\nimport java.util.Arrays;\n...\n\nArrays.asList(3, 1, 2, 1, 4, 2, 3, 4)\n      .stream()\n      .distinct()\n      .forEach(System.out::println);\n```\n\n\u6bd4\u8f03\u306b\u306f `equals()` \u30e1\u30bd\u30c3\u30c9\u304c\u7528\u3044\u3089\u308c\u308b\u3002\n\n##Groovy\n```groovy:\nprintln ([3, 1, 2, 1, 4, 2, 3, 4].unique())\n```\n\n\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u6bd4\u8f03\u30ed\u30b8\u30c3\u30af\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n##JavaScript\n###Underscore.js\n```js:\nconsole.log( _.uniq([3, 1, 2, 1, 4, 2, 3, 4]) );\n```\n\n\u6bd4\u8f03\u306b\u306f `===` \u6f14\u7b97\u5b50\u304c\u7528\u3044\u3089\u308c\u308b\u3002\n\n###jQuery\n\u306a\u3057\n\n#\u30ea\u30b9\u30c8\u3092\u30bd\u30fc\u30c8\u3059\u308b\n##Java\n```java:\nimport java.util.Arrays;\nimport java.util.List;\n...\n\nList<Integer> list = Arrays.asList(4, 1, 3, 2);\nlist.sort(Integer::compare);\nSystem.out.println(list);\n```\n\n##Groovy\n```groovy:\nprintln( [4, 1, 3, 2].sort() )\n```\n\n##JavaScript\n###Underscore.js\n```js:\nvar array = _.sortBy([4, 1, 3, 2], function(e) {\n    return e;\n});\n\nconsole.log(array);\n```\n\n\u7b2c\u4e8c\u5f15\u6570\u306e\u95a2\u6570\u306f\u3001\u30bd\u30fc\u30c8\u3067\u4f7f\u7528\u3059\u308b\u5024\u3092\u8fd4\u3059\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\uff08\u6bd4\u8f03\u51e6\u7406\uff08comparator\uff09\u3092\u5b9f\u88c5\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u3044\uff09\u3002\n\n###jQuery\n\u306a\u3057\u3002\n\n#\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u6700\u5c0f\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\n\u5404\u8a00\u8a9e\u3001\u6700\u5927\u306e\u5834\u5408\u306f `max` \u306b\u5909\u308f\u308b\u3060\u3051\u3002\n\n##Java\n```java:\nimport java.util.Arrays;\nimport java.util.Optional;\n...\n\nOptional<Integer> min = Arrays.asList(1, 2, 3, 4).stream().min(Integer::compare);\nSystem.out.println(min.get());\n```\n\n##Groovy\n```groovy:\nprintln([1, 2, 3, 4].min())\n```\n\n##JavaScript\n###Underscore.js\n```js:\nvar min = _.min([1, 2, 3, 4]);\nconsole.log(min);\n```\n\n###jQuery\n\u306a\u3057\n\n\n\n#\u30de\u30c3\u30d7\u306e\u5404\u8981\u7d20\u3092\u9806\u6b21\u51e6\u7406\u3059\u308b\n##Java\n```java:\nimport java.util.HashMap;\nimport java.util.Map;\n...\n\nMap<String, String> map = new HashMap<>();\nmap.put(\"hoge\", \"HOGE\");\nmap.put(\"fuga\", \"FUGA\");\nmap.put(\"piyo\", \"PIYO\");\n\nmap.forEach((key, value) -> {\n    System.out.println(key + \" : \" + value);\n});\n```\n\n##Groovy\n```groovy:\n[hoge: 'HOGE', fuga: 'FUGA', piyo: 'PIYO'].each {key, value ->\n    println \"${key} : ${value}\"\n}\n```\n\n##JavaScript\n###Underscore.js\n```js:\nvar map = {hoge: 'HOGE', fuga: 'FUGA', piyo: 'PIYO'};\n\n_.each(map, function(value, key, obj) {\n    console.log(key + ' : ' + value);\n});\n```\n\n###jQuery\n```js:\nvar map = {hoge: 'HOGE', fuga: 'FUGA', piyo: 'PIYO'};\n\n$.each(map, function(key, value) {\n    console.log(key + ' : ' + value);\n});\n```\n\n#\u30de\u30c3\u30d7\u306e\u5404\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u51e6\u7406\u3057\u3066\u6700\u7d42\u7684\u306b\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3059\u308b\n##Java\n```java:\nimport java.util.HashMap;\nimport java.util.Map;\n...\n\nMap<String, String> map = new HashMap<>();\nmap.put(\"hoge\", \"HOGE\");\nmap.put(\"fuga\", \"FUGA\");\nmap.put(\"piyo\", \"PIYO\");\n\nmap.entrySet()\n   .stream()\n   .map(e -> e.getKey() + e.getValue())\n   .forEach(System.out::println);\n```\n\n##Groovy\n```groovy:\n[hoge: 'HOGE', fuga: 'FUGA', piyo: 'PIYO']\n    .collect {it.key + it.value}\n    .each {println it}\n```\n\n##JavaScript\n###Underscore.js\n```js:\nvar map = {hoge: 'HOGE', fuga: 'UGA', piyo: 'PIYO'};\n\nvar array = _.map(map, function(value, key) {\n    return key + value;\n});\n\nconsole.log(array);\n```\n\n###jQuery\n```js:\nvar map = {hoge: 'HOGE', fuga: 'UGA', piyo: 'PIYO'};\n\nvar array = $.map(map, function(value, key) {\n    return key + value;\n});\n\nconsole.log(array);\n```\n\n\n\n#\u30e1\u30bd\u30c3\u30c9\uff08\u95a2\u6570\uff09\u540d\u5bfe\u5fdc\u8868\n|Java|Groovy|Underscore.js|jQuery|\n|:---|:-----|:------------|:-----|\n|forEach|each|each|each|\n|filter|findAll|filter|grep|\n|-|find|find|-|\n|allMatch|every|every|-|\n|anyMatch|any|any|-|\n|map|collect|map|map|\n|reduce|inject|reduce|-|\n|flatMap|flatten|flatten|-|\n|distinct|unique|uniq|-|\n|sort|sort|sortBy|-|\n|min|min|min|-|\n|max|max|max|-|\n\n\n#\u53c2\u8003\n- [Java Stream\u30e1\u30e2(Hishidama's Java8 Stream Memo)](http://www.ne.jp/asahi/hishidama/home/tech/java/stream.html)\n- [Collection (Groovy JDK)](http://groovy.codehaus.org/groovy-jdk/java/util/Collection.html)\n- [Object (Groovy JDK)](http://groovy.codehaus.org/groovy-jdk/java/lang/Object.html)\n- [Groovy - JN1015-Collections](http://groovy.codehaus.org/JN1015-Collections)\n- [List (Groovy JDK)](http://groovy.codehaus.org/groovy-jdk/java/util/List.html)\n- [Utilities - jQuery \u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://semooh.jp/jquery/api/utilities/)\n- [Utilities | jQuery API Documentation](http://api.jquery.com/category/utilities/)\n- [Underscore.js](http://underscorejs.org/#)\n- [Java Platform SE 8](http://docs.oracle.com/javase/jp/8/api/)\n"}