{"context": " More than 1 year has passed since last update.\u4eca\u65e5\u306funderscore\u7684\u306a\u66f8\u304d\u65b9\u304c\u597d\u304d\u306a\u4eba\u306e\u305f\u3081\u306eSTL\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\nSTL\u306f\u5927\u304d\u304f\u5206\u3051\u3066\u6b21\u306e\u3088\u3046\u306a\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b3\u30f3\u30c6\u30ca\u3002 vector list map...\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9 thread C++11\u306e\u307f\nI/O iostream fstream...\nC\u8a00\u8a9e C\u306e\u30d8\u30c3\u30c0\u3044\u308d\u3044\u308d\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 algorithm \u4eca\u65e5\u306e\u76ee\u7389\n\u305d\u306e\u307b\u304b(\u6b63\u898f\u8868\u73fe \u4f8b\u5916 \u6642\u9593\u7cfb \u4e71\u6570\u7cfb...etc)\n\n\u516c\u5f0f\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u898b\u308b\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3082\u306a\u3093\u3060\u305d\u306e\u4ed6\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u304c\u4e00\u756a\u826f\u304f\u4f7f\u3044\u305d\u3046\u3001\u30e1\u30bf\u95a2\u6570\u3092\u9664\u304f\u3068\u4e00\u756a\u95a2\u6570\u304c\u3042\u308b\u3063\u3066\u3044\u3046\u3053\u3068\u3067\u5225\u67a0\u3067\u898b\u305f\u65b9\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u6700\u5f8c\u306e\u7d30\u304b\u3044\u5974\u306f\u5fc5\u8981\u3067\u3042\u308c\u3070\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u3066\u3064\u304b\u3046\u3063\u3066\u3044\u3046\u30b9\u30bf\u30f3\u30b9\u3067\u3044\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nunderscore.js\njavascript\u306b\u306funderscore.js lodash.js\u3068\u304b\u3044\u3046\u8d85\u4fbf\u5229\u95a2\u6570\u578b\u3063\u307d\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u304c\u597d\u304d\u306a\u4eba\u3067\u6700\u8fd1C++\u59cb\u3081\u305f\u3063\u3066\u4eba\u306f\u3053\u306eunderscore.js\u7684\u306a\u66f8\u304d\u65b9\u304c\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u305d\u3046\u3002\u50d5\u3082\u305d\u3046\u3002\nhttp://underscorejs.org/\nhttps://lodash.com/docs\n\nSTL\nC++\u306e\u6a5f\u80fd\u306b\u521d\u3081\u304b\u3089\u5099\u308f\u3063\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u6a19\u6e96\u30c6\u30f3\u30d7\u30ec\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nhttp://www.cplusplus.com/reference/\n\nunderscore\u306e\u3088\u3046\u306aSTL\u306e\u4f7f\u3044\u65b9\n\u65e9\u901f\u4f7f\u3044\u65b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\n\nfor_each (underscore \u306e each)\n\nfor_each.cpp\n#include <algorithm>\n#include <vector>\n\nint main() {\n    //\u5076\u6570\u3060\u3051\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    std::vector<int> num = {1, 2, 3, 4, 5, 6, 7, 8};\n    std::vector<int> even;\n\n    std::for_each(num.begin(), num.end(), [&](const int i){\n        if (i % 2 == 0) {\n            even.push_back(i);\n        }\n    });\n}\n\n\n\n\ntransform (underscore \u306e map)\n\ntransform.cpp\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::vector<int> a = {1, 2, 3, 4, 5};\n    std::vector<int> b;\n    b.resize(a.size());  //\u3053\u308c\u3084\u3089\u306a\u3044\u3068\u58ca\u308c\u308b\n\n    std::transform(a.begin(), a.end(), b.begin(), [](const int i){\n        return i * i;\n    });\n\n    // b = {1, 4, 9, 16, 25};\n}\n\n\n\naccumulate (underscore \u306e reduce)\n\naccumulate.cpp\n#include <numeric> //algorithm\u3058\u3083\u306a\u304f\u3066numeric\u306b\u5165\u3063\u3066\u308b\u306e\u306b\u6ce8\u610f\n#include <vector>\n\nint main() {\n    std::vector<std::string> a = {\"this\", \"is\", \"an\", \"apple.\"};\n    std::string b = std::accumulate(a.begin(), a.end(), std::string(), [](const std::string res, const std::string n){\n        //res\u306f\u524d\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c \"this is an\" \u306a\u3069\n        return res + \" \" + n;\n    });\n    //b -> \"this is an apple.\"\n}\n\n\n\u4e0a\u8a18 map\u3068reduce\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u6587\u7ae0\u306e\u5358\u8a9e\u3092\u6570\u3048\u308b\u30ed\u30b8\u30c3\u30af\u304c\u3059\u3050\u306b\u3067\u3082\u7d44\u3081\u305d\u3046\u3067\u3059\u306d\u3002\n\n\u96c6\u5408\u6f14\u7b97 (underscore\u306e union, intersection, difference, xor)\nset_union set_difference set_intersection set_symmetric_difference\u3063\u3066\u3044\u3046\u306e\u304c\u305d\u308c\u305e\u308cunderscore\u306e\u96c6\u5408\u6f14\u7b97\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\nset.cpp\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::vector<int> a = {1, 2, 3, 4, 5};\n    std::vector<int> b = {1, 3, 5, 7, 9};\n    std::vector<int> c(a.size()); //\u30e1\u30e2\u30ea\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304f\n\n    //\u30bd\u30fc\u30c8\u6e08\u307f\u3068\u3057\u3066\u304a\u304f\n    std::sort(a.begin(), a.end());\n    std::sort(b.begin(), b.end());\n\n    //\u96c6\u5408\u6f14\u7b97\u3067\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8fd4\u5374\u3055\u308c\u308b\n    auto u_it = set_union(a.begin, a.end(), b.begin(), b.end(), c.begin());\n    //auto i_it = set_intersection(a.begin, a.end(), b.begin(), b.end(), c.begin());\n    //auto d_it = set_difference(a.begin, a.end(), b.begin(), b.end(), c.begin());\n    //auto s_it = set_symmetric_difference(a.begin, a.end(), b.begin(), b.end(), c.begin());\n\n    //\u30b5\u30a4\u30ba\u3092\u623b\u3059\n    c.resize(u_it - c.begin()); // c -> {1, 2, 3, 4, 5, 7, 9}\n}\n\n\n\u3053\u308c\u306f\u3042\u307e\u308a\u4f7f\u3044\u3084\u3059\u304f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\nunique (underscore \u306e uniq)\n\nunique.cpp\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::vector<int> a = {1, 2, 4, 5, 2, 3, 5};\n    //\u30bd\u30fc\u30c8\u3057\u3066\u306a\u3044\u3068\u7121\u610f\u5473\n    std::sort(a.begin(), a.end());\n    auto it = std::unique(a.begin(), a.end());\n\n    //\u30b5\u30a4\u30ba\u5909\u66f4\n    a.resize(it - a.begin()); // a-> {1, 2, 3, 4, 5};\n}\n\n\n\n\ncount_if (underscore \u306e countBy)\n#include <algorithm>\n#include <vector>\n\nint main() {\n    vector<int> a = {1, 2, 3, 4, 5, 6};\n    const auto even = std::count_if(a.begin(), b.end(), [](const int i){\n        return i % 2 == 0;\n    });\n    // even -> 3\n}\n\n\u306a\u3069\u306a\u3069\u3001\u4ed6\u306b\u3082 filter\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u3084\u3001find\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u3092\u57fa\u672c\u5f62\u3068\u3057\u3066STL\u3067\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308b\u7fd2\u6163\u3092\u3064\u3051\u308b\u3068C++\u3089\u3057\u3044\u3044\u3044\u30b3\u30fc\u30c9\u304c\u51fa\u6765\u4e0a\u304c\u308b\u3053\u3068\u9593\u9055\u3044\u7121\u3057\u3067\u3059\u306d\u3002\n\u306a\u304a\u3001for_each\u306f\u305d\u308c\u3063\u307d\u3044\u306e\u304c\u3059\u3067\u306b\u7d44\u307f\u8fbc\u307f\u306b\u3042\u308a\u307e\u3059\u304c\u3001\u306a\u3093\u3068\u306a\u304f\u4ed6\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306e\u5bfe\u79f0\u6027\u3068\u304b\u8003\u3048\u308b\u3068\u3053\u3063\u3061\u306eSTL\u306e\u65b9\u304c\u6c17\u6301\u3061\u826f\u3044\u6c17\u304c\u3057\u3066\u3044\u307e\u3059\u3002\nunderscore\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308b\u3053\u3068\u3067javascript\u3067\u306e\u5b9f\u88c5\u306b\u4f55\u304b\u5929\u5553\u3092\u5f97\u305f\u4eba\u3082\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u304c\u3001C++\u3067\u306fSTL\u304c\u305d\u306e\u5929\u5553\u306b\u3042\u305f\u308b\u304b\u3082\u3057\u3066\u307e\u305b\u3093\u3002\n\u4eca\u65e5\u306funderscore\u7684\u306a\u66f8\u304d\u65b9\u304c\u597d\u304d\u306a\u4eba\u306e\u305f\u3081\u306eSTL\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\nSTL\u306f\u5927\u304d\u304f\u5206\u3051\u3066\u6b21\u306e\u3088\u3046\u306a\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n+ \u30b3\u30f3\u30c6\u30ca\u3002 vector list map...  \n+ \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9 thread C++11\u306e\u307f\n+ I/O iostream fstream...\n+ C\u8a00\u8a9e C\u306e\u30d8\u30c3\u30c0\u3044\u308d\u3044\u308d\n+ \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 algorithm \u4eca\u65e5\u306e\u76ee\u7389\n+ \u305d\u306e\u307b\u304b(\u6b63\u898f\u8868\u73fe \u4f8b\u5916 \u6642\u9593\u7cfb \u4e71\u6570\u7cfb...etc)\n\n\u516c\u5f0f\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u898b\u308b\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3082\u306a\u3093\u3060\u305d\u306e\u4ed6\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u304c\u4e00\u756a\u826f\u304f\u4f7f\u3044\u305d\u3046\u3001\u30e1\u30bf\u95a2\u6570\u3092\u9664\u304f\u3068\u4e00\u756a\u95a2\u6570\u304c\u3042\u308b\u3063\u3066\u3044\u3046\u3053\u3068\u3067\u5225\u67a0\u3067\u898b\u305f\u65b9\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u6700\u5f8c\u306e\u7d30\u304b\u3044\u5974\u306f\u5fc5\u8981\u3067\u3042\u308c\u3070\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u3066\u3064\u304b\u3046\u3063\u3066\u3044\u3046\u30b9\u30bf\u30f3\u30b9\u3067\u3044\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n#underscore.js\n\njavascript\u306b\u306funderscore.js lodash.js\u3068\u304b\u3044\u3046\u8d85\u4fbf\u5229\u95a2\u6570\u578b\u3063\u307d\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u304c\u597d\u304d\u306a\u4eba\u3067\u6700\u8fd1C++\u59cb\u3081\u305f\u3063\u3066\u4eba\u306f\u3053\u306eunderscore.js\u7684\u306a\u66f8\u304d\u65b9\u304c\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u305d\u3046\u3002\u50d5\u3082\u305d\u3046\u3002\n\nhttp://underscorejs.org/\nhttps://lodash.com/docs\n\n#STL\n\nC++\u306e\u6a5f\u80fd\u306b\u521d\u3081\u304b\u3089\u5099\u308f\u3063\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u6a19\u6e96\u30c6\u30f3\u30d7\u30ec\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\nhttp://www.cplusplus.com/reference/\n\n#underscore\u306e\u3088\u3046\u306aSTL\u306e\u4f7f\u3044\u65b9\n\n\u65e9\u901f\u4f7f\u3044\u65b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\n\n## for_each (underscore \u306e each)\n\n```for_each.cpp\n#include <algorithm>\n#include <vector>\n\nint main() {\n    //\u5076\u6570\u3060\u3051\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    std::vector<int> num = {1, 2, 3, 4, 5, 6, 7, 8};\n    std::vector<int> even;\n\n    std::for_each(num.begin(), num.end(), [&](const int i){\n        if (i % 2 == 0) {\n            even.push_back(i);\n        }\n    });\n}\n\n```\n\n## transform (underscore \u306e map)\n\n```transform.cpp\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::vector<int> a = {1, 2, 3, 4, 5};\n    std::vector<int> b;\n    b.resize(a.size());  //\u3053\u308c\u3084\u3089\u306a\u3044\u3068\u58ca\u308c\u308b\n\n    std::transform(a.begin(), a.end(), b.begin(), [](const int i){\n        return i * i;\n    });\n\n    // b = {1, 4, 9, 16, 25};\n}\n```\n\n## accumulate (underscore \u306e reduce)\n```accumulate.cpp\n#include <numeric> //algorithm\u3058\u3083\u306a\u304f\u3066numeric\u306b\u5165\u3063\u3066\u308b\u306e\u306b\u6ce8\u610f\n#include <vector>\n\nint main() {\n    std::vector<std::string> a = {\"this\", \"is\", \"an\", \"apple.\"};\n    std::string b = std::accumulate(a.begin(), a.end(), std::string(), [](const std::string res, const std::string n){\n        //res\u306f\u524d\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c \"this is an\" \u306a\u3069\n        return res + \" \" + n;\n    });\n    //b -> \"this is an apple.\"\n}\n```\n\n\u4e0a\u8a18 map\u3068reduce\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u6587\u7ae0\u306e\u5358\u8a9e\u3092\u6570\u3048\u308b\u30ed\u30b8\u30c3\u30af\u304c\u3059\u3050\u306b\u3067\u3082\u7d44\u3081\u305d\u3046\u3067\u3059\u306d\u3002\n\n## \u96c6\u5408\u6f14\u7b97 (underscore\u306e union, intersection, difference, xor)\n\nset_union set_difference set_intersection set_symmetric_difference\u3063\u3066\u3044\u3046\u306e\u304c\u305d\u308c\u305e\u308cunderscore\u306e\u96c6\u5408\u6f14\u7b97\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n```set.cpp\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::vector<int> a = {1, 2, 3, 4, 5};\n    std::vector<int> b = {1, 3, 5, 7, 9};\n    std::vector<int> c(a.size()); //\u30e1\u30e2\u30ea\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304f\n    \n    //\u30bd\u30fc\u30c8\u6e08\u307f\u3068\u3057\u3066\u304a\u304f\n    std::sort(a.begin(), a.end());\n    std::sort(b.begin(), b.end());\n\n    //\u96c6\u5408\u6f14\u7b97\u3067\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8fd4\u5374\u3055\u308c\u308b\n    auto u_it = set_union(a.begin, a.end(), b.begin(), b.end(), c.begin());\n    //auto i_it = set_intersection(a.begin, a.end(), b.begin(), b.end(), c.begin());\n    //auto d_it = set_difference(a.begin, a.end(), b.begin(), b.end(), c.begin());\n    //auto s_it = set_symmetric_difference(a.begin, a.end(), b.begin(), b.end(), c.begin());\n    \n    //\u30b5\u30a4\u30ba\u3092\u623b\u3059\n    c.resize(u_it - c.begin()); // c -> {1, 2, 3, 4, 5, 7, 9}\n}\n```\n\u3053\u308c\u306f\u3042\u307e\u308a\u4f7f\u3044\u3084\u3059\u304f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\n## unique (underscore \u306e uniq)\n\n```unique.cpp\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::vector<int> a = {1, 2, 4, 5, 2, 3, 5};\n    //\u30bd\u30fc\u30c8\u3057\u3066\u306a\u3044\u3068\u7121\u610f\u5473\n    std::sort(a.begin(), a.end());\n    auto it = std::unique(a.begin(), a.end());\n    \n    //\u30b5\u30a4\u30ba\u5909\u66f4\n    a.resize(it - a.begin()); // a-> {1, 2, 3, 4, 5};\n}\n\n```\n\n##count_if (underscore \u306e countBy)\n```\n#include <algorithm>\n#include <vector>\n\nint main() {\n    vector<int> a = {1, 2, 3, 4, 5, 6};\n    const auto even = std::count_if(a.begin(), b.end(), [](const int i){\n        return i % 2 == 0;\n    });\n    // even -> 3\n}\n```\n\n\u306a\u3069\u306a\u3069\u3001\u4ed6\u306b\u3082 filter\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u3084\u3001find\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u3092\u57fa\u672c\u5f62\u3068\u3057\u3066STL\u3067\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308b\u7fd2\u6163\u3092\u3064\u3051\u308b\u3068C++\u3089\u3057\u3044\u3044\u3044\u30b3\u30fc\u30c9\u304c\u51fa\u6765\u4e0a\u304c\u308b\u3053\u3068\u9593\u9055\u3044\u7121\u3057\u3067\u3059\u306d\u3002\n\u306a\u304a\u3001for_each\u306f\u305d\u308c\u3063\u307d\u3044\u306e\u304c\u3059\u3067\u306b\u7d44\u307f\u8fbc\u307f\u306b\u3042\u308a\u307e\u3059\u304c\u3001\u306a\u3093\u3068\u306a\u304f\u4ed6\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306e\u5bfe\u79f0\u6027\u3068\u304b\u8003\u3048\u308b\u3068\u3053\u3063\u3061\u306eSTL\u306e\u65b9\u304c\u6c17\u6301\u3061\u826f\u3044\u6c17\u304c\u3057\u3066\u3044\u307e\u3059\u3002\nunderscore\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308b\u3053\u3068\u3067javascript\u3067\u306e\u5b9f\u88c5\u306b\u4f55\u304b\u5929\u5553\u3092\u5f97\u305f\u4eba\u3082\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u304c\u3001C++\u3067\u306fSTL\u304c\u305d\u306e\u5929\u5553\u306b\u3042\u305f\u308b\u304b\u3082\u3057\u3066\u307e\u305b\u3093\u3002\n", "tags": ["C++", "C++11"]}