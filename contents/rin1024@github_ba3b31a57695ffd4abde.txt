{"context": "\n\n\u3053\u3093\u306a\u65b9\u306b\u30aa\u30b9\u30b9\u30e1\u306a\u304a\u8a71\n\u7121\u7dda\u901a\u4fe1\u3057\u305f\u3044\u3051\u3069\u3001\nXBee(1)\u3055\u3093\u306f\u00a52,500\u304f\u3089\u3044\u3057\u3066\u5b89\u304f\u306a\u3063\u305f\u306b\u305b\u3088\u5927\u91cf\u306b\u3064\u304b\u3046\u3068\u5272\u9ad8\u3060\u3057\u3001\nESP-WROOM-02\u3055\u3093(2)\u306f\u00a51,000\u4ee5\u4e0b\u3067\u5b89\u3044\u3051\u3069Wifi\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7d44\u3080\u307b\u3069\u306f...\n\u3068\u3088\u304f\u3070\u308a\u306a\u30a2\u30ca\u30bf\u306b\u3002\n\u6d88\u8cbb\u96fb\u529b\u304a\u3055\u3048\u3081\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7d44\u3080\u307b\u3069\u8ce2\u3044\u306e\u306f\u4e0d\u8981\u3001\n\u3064\u3044\u3067\u306b\u3044\u3046\u3068\u9001\u4fe1\u3060\u3051\u3068\u304b\u3067\u3082ok\u3067\u3059\u3088\uff01\u3063\u3066\u65b9\u306b\u306f\u6050\u3089\u304f\u30d9\u30b9\u30c8\u306a\u9078\u629e\u80a2\u3001\n315MHz\u3055\u3093\u306e\u304a\u8a71\u3067\u3059\u3002\n\u203b \u3042\u3068\u306f\u901a\u4fe1\u901f\u5ea6\u3082\u3068\u3081\u3066\u305f\u308a\u3001\u901a\u4fe1\u8ddd\u96e2\u6c42\u3081\u3066\u3044\u308b\u5834\u5408\u306f\u5fae\u5999\u304b\u3082\u3002\n\n\u3072\u3064\u3088\u3046\u306a\u3082\u306e\n\nArduino UNO x 2\nhttps://www.switch-science.com/catalog/789/\n\n\u9001\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb(315MHz) [RF315-TX5-R]\nhttp://www.aitendo.com/product/4138\n\n\n\nVCC\n1.8 - 3.6V\n\n\n\n\n\u52d5\u4f5c\u96fb\u6d41\n10mA\n\n\n\u5916\u5f62\u5bf8\u6cd5\n11.0 x 16.0 x 5.0mm\n\n\n\n\n\u53d7\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb\uff08315MHz\uff09 [RF315-RXB12]\nhttp://www.aitendo.com/product/2607\n\n\n\nVCC\n3.3 - 5.0V\n\n\n\n\n\u52d5\u4f5c\u96fb\u6d41\n2.5 - 2.7mA\n\n\n\u51fa\u529b\n300 - 500m\n\n\n\u5916\u5f62\u5bf8\u6cd5\n30.0 x 8.5 x 5.0mm\n\n\n\u30d0\u30f3\u30c9\u5e45\n200KHz\n\n\n\n\n\u914d\u7dda\n\n\u9001\u4fe1\u5074\n\n\n\n\nArduino UNO\n\u9001\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb\u5074(RF315-TX5-R)\n\n\n\n\n3.3V\nVCC\n\n\nD12\nDATA\n\n\nGND\nGND\n\n\n\n\u00a0\n\n\u53d7\u4fe1\u5074\n\n\n\n\nArduino UNO\n\u53d7\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb\uff08RF315-RXB12)\n\n\n\n\n3.3V\nVCC\n\n\nD11\nDATA\n\n\nGND\nGND\n\n\n\n\n\u30bd\u30fc\u30b9\n\u9001\u53d7\u4fe1\u306f\u3001\u304a\u624b\u8efd\u7121\u7dda\u7528\u30e2\u30b8\u30e5\u30fc\u30eb VirtualWire \u3092\u3064\u304b\u3044\u307e\u3059\u3002\nhttps://www.pjrc.com/teensy/td_libs_VirtualWire.html\n\n\u9001\u4fe1\u5074\n\nsend.ino\n/**\n * 315MHz\u901a\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb \u9001\u4fe1\u5074\u30d7\u30ed\u30b0\u30e9\u30e0\n * \u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: RF315-TX5-R\n * /\n#include <VirtualWire.h>\n\n#define SEND_PIN 12 // D12\n\nvoid setup() {\n  vw_set_tx_pin(SEND_PIN);\n  vw_setup(2000);\n}\n\nvoid loop() { \n  int numData = 25;\n  char datas[numData];\n  for (int i=0;i<numData;i++) {\n    datas[i] = i;\n  }\n  vw_send((uint8_t *)datas, numData);\n  vw_wait_tx();\n}\n\n\n\u9001\u4fe1\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u5834\u5408(2byte\u305a\u3064\u9001\u308b\u3068\u304b)\u3001\nvw_setup\u306e2000ms\u30926~7000ms\u304f\u3089\u3044\u307e\u3067\u4e0a\u3052\u308b\u3068\u3001\n\u9001\u4fe1\u901f\u5ea6\u304c\u3042\u304c\u308b\u3088\u3046\u3067\u3059\u3002\n\u4e0a\u306e\u4f8b\u306e\u3088\u3046\u306b\u8907\u6570\u30d0\u30a4\u30c8\u9001\u308b\u5834\u5408\u306f\u30012000\u304f\u3089\u3044\u304c\u5b89\u5b9a\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u91cf\u3001\u4e3b\u89b3\u7684\u8a55\u4fa1\u306a\u306e\u3067\u8aa4\u5dee\u306f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\n\u4e00\u5ea6\u306b\u9001\u308b\u9001\u4fe1\u91cf\u306f25\u304f\u3089\u3044\u304cmax\u3067\u300130\u3068\u304b\u9001\u308b\u3068\u5c4a\u304b\u306a\u304f\u306a\u3063\u305f\u308a\u3057\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u53d7\u4fe1\u5074\n\nrecv.ino\n/**\n * 315MHz\u901a\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb \u53d7\u4fe1\u5074\u30d7\u30ed\u30b0\u30e9\u30e0\n * \u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: RF315-RXB12\n * /\n#include <VirtualWire.h>\n\n#define RECV_PIN 11\n\nvoid setup() {\n  delay(1000);\n  Serial.begin(9600);\n  Serial.println(\"receiver setup\");\n\n  vw_set_rx_pin(RECV_PIN);\n  vw_setup(2000);\n  vw_rx_start();\n}\n\nvoid loop() {\n  uint8_t buf[VW_MAX_MESSAGE_LEN];\n  uint8_t buflen = VW_MAX_MESSAGE_LEN;\n  if (vw_get_message(buf, &buflen)) {\n    Serial.print(\"Got: \");\n    for (int i = 0; i < buflen; i++) {\n      Serial.print(buf[i], DEC);\n      Serial.print(' ');\n    }\n    Serial.println();\n  }\n}\n\n\n\n\u304a\u307e\u3051\n\u6587\u5b57\u5217\u306e\u9001\u4fe1\u3092\u3057\u305f\u3044\u65b9\u5411\u3051\u306e\u30b5\u30f3\u30d7\u30eb\u843d\u3061\u3066\u305f\u306e\u3067\u3001\u307a\u305f\u308a\u3002\nhttp://www.buildcircuit.com/how-to-use-rf-module-with-arduino/\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n[^1] ... https://www.switch-science.com/catalog/996/\n[^2] ... https://www.switch-science.com/catalog/2346/\n\n\u304a\u307e\u3051 \u305d\u306e2(\u3061\u3087\u3063\u3063\u3068\u3060\u3051\u7701\u96fb\u529b\u5316)\nVDD\u3092\u9001\u4fe1\u3059\u308b\u3068\u304d\u3060\u3051\u6d41\u3059\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\n\u3061\u3087\u3063\u3068\u3060\u3051\u7701\u96fb\u529b\u5316(\u3063\u3066\u307b\u3069\u5909\u308f\u3089\u306a\u304b\u3063\u305f\u6c17\u3082\u3057\u307e\u3059\u304c\u2026)\u3002\n\u3061\u306a\u307f\u306b\u30c6\u30b9\u30c8\u306f\u4e0b\u8a18\u306eArduino Pro mini 3.3V 16MHz\u3064\u304b\u3044\u307e\u3057\u305f\u3002\nhttp://www.tinyosshop.com/index.php?route=product/product&product_id=275\n\n\n\n\u901a\u5e38\u6642(\u30a2\u30a4\u30c9\u30eb\u6642)\n\u9001\u4fe1\u6642\n\n\n\n\n\u7d0410mA\n\u7d0417mA\n\n\n\n\u30bd\u30fc\u30b9\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\n\nsend2.ino\n/**\n * 315MHz\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u7c21\u6613\u9001\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\n * VDD\u306b3.3V\u5e38\u6642\u63a5\u7d9a\u3067\u306f\u306a\u304f\u3001SEND_EN_PIN\u3068VDD\u3064\u306a\u3044\u3067\u901a\u5e38\u6642\u306flow\u306b\u3057\u3066\u7701\u96fb\u529b\u306b\u3059\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n */\n#include <VirtualWire.h>\n\n#define MY_ID 90\n#define SEND_PIN 2 // DATA <-> D12\n#define SEND_EN_PIN 3 // VDD <-> D3\n\n#define PACKET_ID 0\n#define PACKET_TYPE 1\n#define PACKET_DATA 2\n\n#define SEND_INTERVAL 10000\n\nunsigned long sendTimer;\n\nvoid setup() {\n  pinMode(SEND_EN_PIN, OUTPUT);\n  digitalWrite(SEND_EN_PIN, LOW);\n\n  vw_set_tx_pin(SEND_PIN);\n  //vw_set_ptt_inverted(true);\n  vw_setup(2000); // Bits per sec\n}\n\nvoid loop() {\n  if (millis() - sendTimer > SEND_INTERVAL) {\n    digitalWrite(SEND_EN_PIN, HIGH);\n    delay(50); // wait for wakeup\n\n    for (int j=0;j<10;j++) {\n      int numCount = 25; // 25\u304f\u3089\u3044\u304cmax\u300130\u3068\u304b\u306b\u3059\u308b\u3068\u843d\u3061\u308b\n      char counts[numCount];\n      counts[PACKET_ID] = MY_ID;\n      counts[PACKET_TYPE] = j * 10;\n      for (int i=PACKET_DATA;i<numCount;i++) {\n        counts[i] = i;\n      }\n      vw_send((uint8_t *)counts, numCount);\n      vw_wait_tx(); // Wait until the whole message is gone\n    }\n\n    digitalWrite(SEND_EN_PIN, LOW);\n\n    sendTimer = millis();\n  }\n}\n\n\n# \u3053\u3093\u306a\u65b9\u306b\u30aa\u30b9\u30b9\u30e1\u306a\u304a\u8a71\n\n\u7121\u7dda\u901a\u4fe1\u3057\u305f\u3044\u3051\u3069\u3001\nXBee(*1)\u3055\u3093\u306f\u00a52,500\u304f\u3089\u3044\u3057\u3066\u5b89\u304f\u306a\u3063\u305f\u306b\u305b\u3088\u5927\u91cf\u306b\u3064\u304b\u3046\u3068\u5272\u9ad8\u3060\u3057\u3001\nESP-WROOM-02\u3055\u3093(*2)\u306f\u00a51,000\u4ee5\u4e0b\u3067\u5b89\u3044\u3051\u3069Wifi\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7d44\u3080\u307b\u3069\u306f...\n\u3068\u3088\u304f\u3070\u308a\u306a\u30a2\u30ca\u30bf\u306b\u3002\n\n\u6d88\u8cbb\u96fb\u529b\u304a\u3055\u3048\u3081\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7d44\u3080\u307b\u3069\u8ce2\u3044\u306e\u306f\u4e0d\u8981\u3001\n\u3064\u3044\u3067\u306b\u3044\u3046\u3068\u9001\u4fe1\u3060\u3051\u3068\u304b\u3067\u3082ok\u3067\u3059\u3088\uff01\u3063\u3066\u65b9\u306b\u306f\u6050\u3089\u304f\u30d9\u30b9\u30c8\u306a\u9078\u629e\u80a2\u3001\n315MHz\u3055\u3093\u306e\u304a\u8a71\u3067\u3059\u3002\n\n\u203b \u3042\u3068\u306f\u901a\u4fe1\u901f\u5ea6\u3082\u3068\u3081\u3066\u305f\u308a\u3001\u901a\u4fe1\u8ddd\u96e2\u6c42\u3081\u3066\u3044\u308b\u5834\u5408\u306f\u5fae\u5999\u304b\u3082\u3002\n\n# \u3072\u3064\u3088\u3046\u306a\u3082\u306e\n\n![](https://docid81hrs3j1.cloudfront.net/contents/large/789_201602_102.jpg)\nArduino UNO x 2\nhttps://www.switch-science.com/catalog/789/\n\n![](http://www.aitendo.com/data/aitendo/_/70726f647563742f32303132303332395f3836363631382e676966003235300000660066.jpg)\n\u9001\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb(315MHz) [RF315-TX5-R]\nhttp://www.aitendo.com/product/4138\n\n| VCC | 1.8 - 3.6V |\n|:-----------------|------------------:|:------------------:|\n| \u52d5\u4f5c\u96fb\u6d41 | 10mA |\n| \u5916\u5f62\u5bf8\u6cd5 | 11.0 x 16.0 x 5.0mm |\n\n![](http://www.aitendo.com/data/aitendo/_/70726f647563742f633734313231343365362e676966003235300000660066.jpg)\n\u53d7\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb\uff08315MHz\uff09 [RF315-RXB12]\nhttp://www.aitendo.com/product/2607\n\n| VCC | 3.3 - 5.0V |\n|:-----------------|------------------:|:------------------:|\n| \u52d5\u4f5c\u96fb\u6d41 | 2.5 - 2.7mA | \n| \u51fa\u529b | 300 - 500m | \n| \u5916\u5f62\u5bf8\u6cd5 | 30.0 x 8.5 x 5.0mm |\n| \u30d0\u30f3\u30c9\u5e45 | 200KHz |\n\n\n# \u914d\u7dda\n\n## \u9001\u4fe1\u5074\n\n![15725349_10210964879495655_2123920786_o.jpg](https://qiita-image-store.s3.amazonaws.com/0/2915/29ce1883-00da-818e-e157-7f4c932dd72e.jpeg)\n\n| Arduino UNO | \u9001\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb\u5074(RF315-TX5-R) |\n|:-----------------|------------------:|:------------------:|\n| 3.3V | VCC |\n| D12 | DATA |\n| GND | GND |\n\n&nbsp;\n\n## \u53d7\u4fe1\u5074\n\n![15540128_10210964879255649_1344473852_o.jpg](https://qiita-image-store.s3.amazonaws.com/0/2915/f286eba3-4dfb-69a7-a2f2-2b9415018c82.jpeg)\n\n| Arduino UNO | \u53d7\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb\uff08RF315-RXB12) |\n|:-----------------|------------------:|:------------------:|\n| 3.3V | VCC |\n| D11 | DATA |\n| GND | GND |\n\n\n# \u30bd\u30fc\u30b9\n\n\u9001\u53d7\u4fe1\u306f\u3001\u304a\u624b\u8efd\u7121\u7dda\u7528\u30e2\u30b8\u30e5\u30fc\u30eb VirtualWire \u3092\u3064\u304b\u3044\u307e\u3059\u3002\nhttps://www.pjrc.com/teensy/td_libs_VirtualWire.html\n\n## \u9001\u4fe1\u5074\n```c:send.ino\n/**\n * 315MHz\u901a\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb \u9001\u4fe1\u5074\u30d7\u30ed\u30b0\u30e9\u30e0\n * \u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: RF315-TX5-R\n * /\n#include <VirtualWire.h>\n\n#define SEND_PIN 12 // D12\n\nvoid setup() {\n  vw_set_tx_pin(SEND_PIN);\n  vw_setup(2000);\n}\n\nvoid loop() { \n  int numData = 25;\n  char datas[numData];\n  for (int i=0;i<numData;i++) {\n    datas[i] = i;\n  }\n  vw_send((uint8_t *)datas, numData);\n  vw_wait_tx();\n}\n```\n\n\u9001\u4fe1\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u5834\u5408(2byte\u305a\u3064\u9001\u308b\u3068\u304b)\u3001\nvw_setup\u306e2000ms\u30926~7000ms\u304f\u3089\u3044\u307e\u3067\u4e0a\u3052\u308b\u3068\u3001\n\u9001\u4fe1\u901f\u5ea6\u304c\u3042\u304c\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u4e0a\u306e\u4f8b\u306e\u3088\u3046\u306b\u8907\u6570\u30d0\u30a4\u30c8\u9001\u308b\u5834\u5408\u306f\u30012000\u304f\u3089\u3044\u304c\u5b89\u5b9a\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u91cf\u3001\u4e3b\u89b3\u7684\u8a55\u4fa1\u306a\u306e\u3067\u8aa4\u5dee\u306f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\n\u4e00\u5ea6\u306b\u9001\u308b\u9001\u4fe1\u91cf\u306f25\u304f\u3089\u3044\u304cmax\u3067\u300130\u3068\u304b\u9001\u308b\u3068\u5c4a\u304b\u306a\u304f\u306a\u3063\u305f\u308a\u3057\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\n## \u53d7\u4fe1\u5074\n```c:recv.ino\n/**\n * 315MHz\u901a\u4fe1\u30e2\u30b8\u30e5\u30fc\u30eb \u53d7\u4fe1\u5074\u30d7\u30ed\u30b0\u30e9\u30e0\n * \u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: RF315-RXB12\n * /\n#include <VirtualWire.h>\n\n#define RECV_PIN 11\n\nvoid setup() {\n  delay(1000);\n  Serial.begin(9600);\n  Serial.println(\"receiver setup\");\n\n  vw_set_rx_pin(RECV_PIN);\n  vw_setup(2000);\n  vw_rx_start();\n}\n\nvoid loop() {\n  uint8_t buf[VW_MAX_MESSAGE_LEN];\n  uint8_t buflen = VW_MAX_MESSAGE_LEN;\n  if (vw_get_message(buf, &buflen)) {\n    Serial.print(\"Got: \");\n    for (int i = 0; i < buflen; i++) {\n      Serial.print(buf[i], DEC);\n      Serial.print(' ');\n    }\n    Serial.println();\n  }\n}\n```\n\n# \u304a\u307e\u3051\n\n\u6587\u5b57\u5217\u306e\u9001\u4fe1\u3092\u3057\u305f\u3044\u65b9\u5411\u3051\u306e\u30b5\u30f3\u30d7\u30eb\u843d\u3061\u3066\u305f\u306e\u3067\u3001\u307a\u305f\u308a\u3002\nhttp://www.buildcircuit.com/how-to-use-rf-module-with-arduino/\n\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\n[^1] ... https://www.switch-science.com/catalog/996/\n[^2] ... https://www.switch-science.com/catalog/2346/\n\n\n# \u304a\u307e\u3051 \u305d\u306e2(\u3061\u3087\u3063\u3063\u3068\u3060\u3051\u7701\u96fb\u529b\u5316)\n\nVDD\u3092\u9001\u4fe1\u3059\u308b\u3068\u304d\u3060\u3051\u6d41\u3059\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\n\u3061\u3087\u3063\u3068\u3060\u3051\u7701\u96fb\u529b\u5316(\u3063\u3066\u307b\u3069\u5909\u308f\u3089\u306a\u304b\u3063\u305f\u6c17\u3082\u3057\u307e\u3059\u304c\u2026)\u3002\n\n\u3061\u306a\u307f\u306b\u30c6\u30b9\u30c8\u306f\u4e0b\u8a18\u306eArduino Pro mini 3.3V 16MHz\u3064\u304b\u3044\u307e\u3057\u305f\u3002\nhttp://www.tinyosshop.com/index.php?route=product/product&product_id=275\n\n| \u901a\u5e38\u6642(\u30a2\u30a4\u30c9\u30eb\u6642) | \u9001\u4fe1\u6642 |\n|:-----------------|------------------:|:------------------:|\n| \u7d0410mA | \u7d0417mA |\n\n\u30bd\u30fc\u30b9\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c:send2.ino\n/**\n * 315MHz\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u7c21\u6613\u9001\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\n * VDD\u306b3.3V\u5e38\u6642\u63a5\u7d9a\u3067\u306f\u306a\u304f\u3001SEND_EN_PIN\u3068VDD\u3064\u306a\u3044\u3067\u901a\u5e38\u6642\u306flow\u306b\u3057\u3066\u7701\u96fb\u529b\u306b\u3059\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n */\n#include <VirtualWire.h>\n\n#define MY_ID 90\n#define SEND_PIN 2 // DATA <-> D12\n#define SEND_EN_PIN 3 // VDD <-> D3\n\n#define PACKET_ID 0\n#define PACKET_TYPE 1\n#define PACKET_DATA 2\n\n#define SEND_INTERVAL 10000\n\nunsigned long sendTimer;\n\nvoid setup() {\n  pinMode(SEND_EN_PIN, OUTPUT);\n  digitalWrite(SEND_EN_PIN, LOW);\n\n  vw_set_tx_pin(SEND_PIN);\n  //vw_set_ptt_inverted(true);\n  vw_setup(2000); // Bits per sec\n}\n \nvoid loop() {\n  if (millis() - sendTimer > SEND_INTERVAL) {\n    digitalWrite(SEND_EN_PIN, HIGH);\n    delay(50); // wait for wakeup\n\n    for (int j=0;j<10;j++) {\n      int numCount = 25; // 25\u304f\u3089\u3044\u304cmax\u300130\u3068\u304b\u306b\u3059\u308b\u3068\u843d\u3061\u308b\n      char counts[numCount];\n      counts[PACKET_ID] = MY_ID;\n      counts[PACKET_TYPE] = j * 10;\n      for (int i=PACKET_DATA;i<numCount;i++) {\n        counts[i] = i;\n      }\n      vw_send((uint8_t *)counts, numCount);\n      vw_wait_tx(); // Wait until the whole message is gone\n    }\n  \n    digitalWrite(SEND_EN_PIN, LOW);\n\n    sendTimer = millis();\n  }\n}\n```\n\n\n\n", "tags": ["Arduino", "\u96fb\u5b50\u5de5\u4f5c", "\u7121\u7dda\u901a\u4fe1", "315MHz"]}