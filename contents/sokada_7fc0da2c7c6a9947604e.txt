{"context": " More than 1 year has passed since last update.Tutsplus\n\nInstallation\nMy way of doing this. \nCreate a dir and index.php. Then follow my blog post. \n\nData Types Primer\nIn main.js\nvar Person = function(config) {\n    this.name = config.name;\n    this.age = config.age;\n    this.occupation = config.occupation;\n};\n\nPerson.prototype.work = function() {\n    return this.name + ' is working.';\n};\n\nPerson.prototype.work is added for common function. \nIn Chrome console. Check if all are loaded.\nBackbone\n$ // for jquery\n_ // underscore\nperson = new Person({name:'Shinokada', age:55,occupation:'Teacher')};\nperson //check it also __prototype__\nperson.name\nperson.age\nperson.occupation\nperson.work()\n\n\nYour First Backbone Model\nCreating a backbone object.\nvar Person = Backbone.Model.extend({\n\n});\n\nCheck it in console. \nvar person = new Person;\nperson\n\nSetting default.\nvar Person = Backbone.Model.extend({\n    defaults: {\n        name: 'John Doe',\n        age: 30,\n        occupation: 'worker'\n    },\n    work: function() {\n        return this.get('name') + ' is working.';\n    }\n});\n\n\nUsing object.get('attribute')\nYou can find these under attribute.\nvar person = new Person;\nperson\n// see under attribute.\nperson.get('name')\nperson.get('age')//backbone is keeping track of data.\nperson.work()\n\nOverride it. In Chrome console\nvar person = new Person({name:'Shin Okada', age:55});\nperson // to see attribute\n\nThis will only override name and age. toJSON method can access the object. In Chrome.\nperson.toJSON() \n\nSetting properties. In Chrome.\nperson.set('occupation', 'Web developer');\nperson.toJSON()\n\nperson.set({occupation:'intructor'});// Passing an object. This will work as well.\n\n\nValidating-Models\nAdding validation rules.\nperson.set('age',-50); // this will work and add age -50.\n\nAdd validate function\nvalidate: function(attrs) {\n    console.log(attrs);\n},\n\nBackbone pass all the object properties to attrs in the validate method. This validate will be called only when you are setting. \nvar person = new Person({name:\"Shin Okada\", age: 55});\n//This will not call validate.\n\n//But actually it calls validate and outputs the object.\nperson.get('name');// this won't call it either.\nperson.set('age', -10); // this will call the validate and console the object at the moment.\n\nAdding validation.\nvalidate: function(attrs) {\n    if ( attrs.age < 0 ) {\n        return 'Age must be positive, stupid.';\n    }\n},\n\nIn Chrome\nvar person = new Person({name:\"Shin Okada\", age:55});\n// undefined\nperson.set('age',-20);\n//false. This only returns boolean, does not return Age\u2026\n// Fails the validation and only false will be returned.\n\nHow to fetch the error message. Create a listener.\nperson.on('error', function(model, error){\n    console.log(error);\n}); \n//listen for error event\nperson.set ('age',-70);\n// This will display the error message as well.\n\nperson.toJSON();\n//This shows that the previous one did not updated the object. Validation worked.\n\nAdding validation to name as well.\nif ( ! attrs.name ) {\n        return 'Every person must have a name, fool.';\n    }   \n\nIn Chrome,\nperson.set('name','');\n//will return false \n\n\nViews\nvar Person = Backbone.Model.extend({\ndefaults: {\n    name: 'John Doe',\n    age: 30,\n    occupation: 'worker'\n}\n});\n\nvar PersonView = Backbone.View.extend({\n\n});\n\nIn Chrome\nvar personView = new PersonView;\npersonView\n// see under d to find $el and el\npersonView.el\n<div></div>\nperonView.$el\n// element is wrapped with jQuery\n[<div></div>]\n\nIf you want to override the tagname to li instead of div.\nvar PersonView = Backbone.View.extend({\n    tagName: 'li',\n});\n\nConsole in Chrome\nvar personView = new PersonView;\nperonView.el\n//<li></li>\n\nYou can add class name to this li.\nclassName: 'person'\n\nRepeat it in console.\nOr adding id.\nidName : 'myid'\n\nConstructor method, initialize: which automatically run.\ninitialize: function() {\n    console.log('Hi there');\n}\n\nIn console\nvar personView = new PersonView;\n// Hi there.\n\n\nrender method\nCreate an instance of model and add it to view.\nvar person = new Person;\nvar personView = new PersonView({ model: person });\n\nSo far we got the following codes.\n// main.js\nvar Person = Backbone.Model.extend({\n    defaults: {\n        name: 'John Doe',\n        age: 30,\n        occupation: 'worker'\n    }\n});\n\nvar PersonView = Backbone.View.extend({\n    tagName: 'li',\n\n    initialize: function() {\n        console.log(this.model);\n    },\n\n    render: function() {\n\n    }\n});\n\nvar person = new Person;\nvar personView = new PersonView({ model: person });\n\nWhen you reload the page it will initialize and show the model.\nChange to this.\n    initialize: function() {\n\n    },\n\n    render: function() {\n        this.$el.html( this.model.get('name') );// when you add render(), it will add this.model name to el ellement.\n    }\n\nIn console,\npersonView\npersonView.el // only li tag\npersonView.render(); // to render \npersonView.el // this will show name\n\nAdd this.render(); to initialize.\nAnd in console,\npersonView.el// will display name\n$(document.body).html(personView.el);//to add to body using jquery.\n\nAdding more to render becomes crowed and it is anti-patter,\n// anti-pattern, no good\n    this.$el.html( this.model.get('name') + ' (' + this.model.get('age') + ') - ' + this.model.get('occupation') );\n\n\nInline-Templates\nvar PersonView = Backbone.View.extend({\n    tagName: 'li',\n\n    template: _.template(\"<strong><%= name %></strong> (<%= age %>) - <%= occupation %>\"),\n    //function is stored in template:\n    // underscorejs template\n    // <%= name %> to render variables\n\n    initialize: function() {\n        this.render();\n    },\n\n    render: function() {\n        this.$el.html( this.template(this.model.toJSON()) );\n        // call it as function and pass the date to use.\n    }\n});\n\nIn console\npersonView.el\n$(document.body).append(personView.el);\n\n\nExternal-Templates\nAdd the following to index.html\n<script id=\"personTemplate\" type=\"text/template\">\n<strong><%= name %></strong> (<%= age %>) - <%= occupation %>\n</script>\n\nSince there is no javascript, you have to add type=\"text/template. This will prevent executing as a javascript.\nIn main.js you need to fetch the above.\n// method one\ntemplate: _.template( $('#personTemplate').html() ),\n\n// method two\ntemplate: '#personTemplate',\n\nrender: function(){\n    var template = _.template( $(this.template) );\n    this.$el.html( template );\n}\n\n\nFinal\nconsole \npersonView.el\n\nmain.js\nvar Person = Backbone.Model.extend({\n    defaults: {\n        name: 'John Doe',\n        age: 30,\n        occupation: 'worker'\n    }\n});\n\nvar PersonView = Backbone.View.extend({\n    tagName: 'li',\n\n    template: _.template( $('#personTemplate').html() ),\n\n    initialize: function() {\n        this.render();\n    },\n\n    render: function() {\n        this.$el.html( this.template(this.model.toJSON()) );\n    }\n});\n\nvar person = new Person;\nvar personView = new PersonView({ model: person });\n\n// Bleh. This gets messy quickly.\nvar person2 = new Person({ name: 'Jeffrey Way', age: 27 });\nvar personView2 = new PersonView({ model: person2 });\n\n\nCollections\nWhen you have more than one person/object, you need to use collections. Adding Backbone.Collection.extend().\n// A List of People\nvar PeopleCollection = Backbone.Collection.extend({\nmodel: Person //pass the name of model\n});\n\nIn console\nnew PeopleCollection\n\nAdd a new Collection in main.js add and console.log it.\nvar peopleCollection = new PeopleCollection;\npeopleCollection.add(person);\n\nconsole.log(peopleCollection);\n\nIn console, it shows length one, which is one model.\npeopleCollection.toJSON();\n\nIn main.js Add one more person2.\nvar person = new Person;\nvar personView = new PersonView({model: person});\n\nvar peopleCollection = new PeopleCollection;\npeopleCollection.add(person);\n\nvar person2 = new Person({name:'Shin Okada', age : 55});\nvar personView2 = new PersonView({model: person2});\n\npeopleCollection.add(person2);\n\nconsole.log(peopleCollection);\n\nIn console\npeopleCollection.toJSON();//this will show two objects.\n\nYou can clean it up by followings. You can add array of object as following.\nvar peopleCollection = new PeopleCollection([\n    {\n        name: 'Jeffrey Way',\n        age: 27\n    },\n    {\n        name: 'John Doe',\n        age: 50,\n        occupation: 'web designer'\n    },\n    {\n        name: 'Sally Doe',\n        age: 29,\n        occupation: 'graphic designer'\n    }\n]);\n\nconsole.log(peopleCollection);\n\nIn console,\npeopleCollection.toJSON();  \n\nvar model = peopleCollection.at(0);\nmodel\n// and see under attributes\nmodel.get('name');\n// return the name\nmodel.set('occupation', 'web developer');\nmodel.toJSON();\n// to see added item\npeopleCollection.toJSON();\n// to see updated items.\n\njeff=peopleCollection.getByCid('c0');\nJSON.stringify(jeff);\n\n//if jeff has id:123\njeff=peopleCollection.get(123);\nJSON.stringify(jeff);\n\n\nFinal Code\nmain.js\n// Person Model\nvar Person = Backbone.Model.extend({\n    defaults: {\n        name: 'John Doe',\n        age: 30,\n        occupation: 'worker'\n    }\n});\n\n// A List of People\nvar PeopleCollection = Backbone.Collection.extend({\n    model: Person\n});\n\n// The View for a Person\nvar PersonView = Backbone.View.extend({\n    tagName: 'li',\n\n    template: _.template( $('#personTemplate').html() ),\n\n    initialize: function() {\n        this.render();\n    },\n\n    render: function() {\n        this.$el.html( this.template(this.model.toJSON()) );\n    }\n});\n\nvar peopleCollection = new PeopleCollection([\n    {\n        name: 'Jeffrey Way',\n        age: 27\n    },\n    {\n        name: 'John Doe',\n        age: 50,\n        occupation: 'web designer'\n    },\n    {\n        name: 'Sally Doe',\n        age: 29,\n        occupation: 'graphic designer'\n    }\n]);\n\nconsole.log(peopleCollection);\n\n\nCollection-Views\nWhen you have more than one colleciton view, you need to use collecion view. We need a view to render all the person view.\n// View for all people\nvar PeopleView = Backbone.View.extend({\ntagName: 'ul',\n\ninitialize: function(){\n    console.log(this.collection);\n},\n\nrender: function() {\n    // filter through all items in a collection\n    // for each, create a new PersonView\n    // append to root element\n}\n});\n\nNext we need to access to peopleCollection in PeopleView. We create a collection by var peopleCollection before. Add this at the end.\nvar peopleView = new PeopleView({ collection: peopleCollection });\n\nThis will console an object with length of 3.\nNext take out the previous initialize and add the following.\nrender: function(){\n    console.log(this.collection);\n}\n\nIn console, peopleView.render() and see under _proto, and __proto_ to find out all the methods and each() method. Then change render() again.\nrender: function(){\n    console.log(this.collection.each);\n}\n\nThis will display the each method.\nChange the render to the followings.\nthis.collection.each(function(person)){//model or person\n    console.log(person);\n}\n\nIn console, \npeopleView.render();\n\nYou need to watch this. There are more to it.   \n\nFinal Code\n// Person Model\nvar Person = Backbone.Model.extend({\n    defaults: {\n        name: 'John Doe',\n        age: 30,\n        occupation: 'worker'\n    }\n});\n\n// A List of People\nvar PeopleCollection = Backbone.Collection.extend({\n    model: Person\n});\n\n\n// View for all people\nvar PeopleView = Backbone.View.extend({\n    tagName: 'ul',\n\n    render: function() {\n        // filter through all items in a collection\n        // for each, create a new PersonView\n        // append to root element\n\n        this.collection.each(function(person) {\n            var personView = new PersonView({ model: person });\n            this.$el.append(personView.render().el);\n        }, this);\n\n        return this;\n    }\n});\n\n// The View for a Person\nvar PersonView = Backbone.View.extend({\n    tagName: 'li',\n\n    template: _.template( $('#personTemplate').html() ),\n\n    render: function() {\n        this.$el.html( this.template(this.model.toJSON()) );\n        return this;\n    }\n});\n\nvar peopleCollection = new PeopleCollection([\n    {\n        name: 'Jeffrey Way',\n        age: 27\n    },\n    {\n        name: 'John Doe',\n        age: 50,\n        occupation: 'web designer'\n    },\n    {\n        name: 'Sally Doe',\n        age: 29,\n        occupation: 'graphic designer'\n    }\n]);\n\nvar peopleView = new PeopleView({ collection: peopleCollection });\n$(document.body).append(peopleView.render().el);\n\nTutsplus\n\n## Installation\nMy way of doing this. \n\nCreate a dir and index.php. Then follow my [blog post](http://www.cecilieo.com/techblog/using-bash-script-on-sublime-text-2/). \n\n\n## Data Types Primer\n\nIn main.js\n\n\tvar Person = function(config) {\n\t\tthis.name = config.name;\n\t\tthis.age = config.age;\n\t\tthis.occupation = config.occupation;\n\t};\n\t\n\tPerson.prototype.work = function() {\n\t\treturn this.name + ' is working.';\n\t};\n\t\nPerson.prototype.work is added for common function.\t\n\nIn Chrome console. Check if all are loaded.\n\n\tBackbone\n\t$ // for jquery\n\t_ // underscore\n\tperson = new Person({name:'Shinokada', age:55,occupation:'Teacher')};\n\tperson //check it also __prototype__\n\tperson.name\n\tperson.age\n\tperson.occupation\n\tperson.work()\n\n\n## Your First Backbone Model\n\nCreating a backbone object.\n\n\tvar Person = Backbone.Model.extend({\n\t\n    });\n    \nCheck it in console. \n\n\tvar person = new Person;\n\tperson\n\t\nSetting default.\n\n\tvar Person = Backbone.Model.extend({\n\t\tdefaults: {\n\t\t\tname: 'John Doe',\n\t\t\tage: 30,\n\t\t\toccupation: 'worker'\n\t\t},\n\t\twork: function() {\n\t\t\treturn this.get('name') + ' is working.';\n\t\t}\n\t});\n\n### Using object.get('attribute')\nYou can find these under attribute.\n\n\tvar person = new Person;\n\tperson\n\t// see under attribute.\n\tperson.get('name')\n\tperson.get('age')//backbone is keeping track of data.\n\tperson.work()\n\t\nOverride it. In Chrome console\n\n\tvar person = new Person({name:'Shin Okada', age:55});\n\tperson // to see attribute\n\t\nThis will only override name and age. toJSON method can access the object. In Chrome.\n\n\tperson.toJSON()\t\n\nSetting properties. In Chrome.\n\n\tperson.set('occupation', 'Web developer');\n\tperson.toJSON()\n\t\n\tperson.set({occupation:'intructor'});// Passing an object. This will work as well.\n\n## Validating-Models\t\nAdding validation rules.\n\n\tperson.set('age',-50); // this will work and add age -50.\n\t\nAdd validate function\n\n\tvalidate: function(attrs) {\n\t\tconsole.log(attrs);\n\t},\n\nBackbone pass all the object properties to attrs in the validate method. This validate will be called only when you are setting. \n\n\tvar person = new Person({name:\"Shin Okada\", age: 55});\n\t//This will not call validate.\n\t\n\t//But actually it calls validate and outputs the object.\n\tperson.get('name');// this won't call it either.\n\tperson.set('age', -10); // this will call the validate and console the object at the moment.\n\nAdding validation.\n\n\tvalidate: function(attrs) {\n\t\tif ( attrs.age < 0 ) {\n\t\t\treturn 'Age must be positive, stupid.';\n\t\t}\n\t},\n\t\nIn Chrome\n\t\n\tvar person = new Person({name:\"Shin Okada\", age:55});\n\t// undefined\n\tperson.set('age',-20);\n\t//false. This only returns boolean, does not return Age\u2026\n\t// Fails the validation and only false will be returned.\n\t\nHow to fetch the error message. Create a listener.\n\n\tperson.on('error', function(model, error){\n\t\tconsole.log(error);\n\t});\t\n\t//listen for error event\n\tperson.set ('age',-70);\n\t// This will display the error message as well.\n\t\n\tperson.toJSON();\n\t//This shows that the previous one did not updated the object. Validation worked.\n\t\nAdding validation to name as well.\n\n\tif ( ! attrs.name ) {\n\t\t\treturn 'Every person must have a name, fool.';\n\t\t}\t\n\t\nIn Chrome,\n\t\n\tperson.set('name','');\n\t//will return false\t\n\t\n\t\n## Views\n\n\n\tvar Person = Backbone.Model.extend({\n\tdefaults: {\n\t\tname: 'John Doe',\n\t\tage: 30,\n\t\toccupation: 'worker'\n\t}\n\t});\n\n\tvar PersonView = Backbone.View.extend({\n\t\n\t});\n\t\nIn Chrome\n\n\tvar personView = new PersonView;\n\tpersonView\n\t// see under d to find $el and el\n\tpersonView.el\n\t<div></div>\n\tperonView.$el\n\t// element is wrapped with jQuery\n\t[<div></div>]\n\nIf you want to override the tagname to li instead of div.\n\n\tvar PersonView = Backbone.View.extend({\n\t\ttagName: 'li',\n\t});\n\nConsole in Chrome\n\n\tvar personView = new PersonView;\n\tperonView.el\n\t//<li></li>\n\t\nYou can add class name to this li.\n\n\tclassName: 'person'\n\t\nRepeat it in console.\n\nOr adding id.\n\n\tidName : 'myid'\n\t\nConstructor method, initialize: which automatically run.\n\n\tinitialize: function() {\n\t\tconsole.log('Hi there');\n\t}\n\t\nIn console\n\n\tvar personView = new PersonView;\n\t// Hi there.\n\n\n### render method\n\nCreate an instance of model and add it to view.\n\n\tvar person = new Person;\n\tvar personView = new PersonView({ model: person });\n\nSo far we got the following codes.\n\n\t// main.js\n\tvar Person = Backbone.Model.extend({\n\t\tdefaults: {\n\t\t\tname: 'John Doe',\n\t\t\tage: 30,\n\t\t\toccupation: 'worker'\n\t\t}\n\t});\n\t\n\tvar PersonView = Backbone.View.extend({\n\t\ttagName: 'li',\n\t\n\t\tinitialize: function() {\n\t\t\tconsole.log(this.model);\n\t\t},\n\t\n\t\trender: function() {\n\t\t\t\n\t\t}\n\t});\n\t\n\tvar person = new Person;\n\tvar personView = new PersonView({ model: person });\n\nWhen you reload the page it will initialize and show the model.\n\nChange to this.\n\n\t\tinitialize: function() {\n\t\t\t\n\t\t},\n\t\n\t\trender: function() {\n\t\t\tthis.$el.html( this.model.get('name') );// when you add render(), it will add this.model name to el ellement.\n\t\t}\n\t\t\nIn console,\n\n\tpersonView\n\tpersonView.el // only li tag\n\tpersonView.render(); // to render \n\tpersonView.el // this will show name\n\t\nAdd this.render(); to initialize.\n\nAnd in console,\n\n\tpersonView.el// will display name\n\t$(document.body).html(personView.el);//to add to body using jquery.\n\t\nAdding more to render becomes crowed and it is anti-patter,\n\n\t// anti-pattern, no good\n\t\tthis.$el.html( this.model.get('name') + ' (' + this.model.get('age') + ') - ' + this.model.get('occupation') );\n\t\n## Inline-Templates\n\n\n\tvar PersonView = Backbone.View.extend({\n\t\ttagName: 'li',\n\t\n\t\ttemplate: _.template(\"<strong><%= name %></strong> (<%= age %>) - <%= occupation %>\"),\n\t\t//function is stored in template:\n\t\t// underscorejs template\n\t\t// <%= name %> to render variables\n\t\t\n\t\tinitialize: function() {\n\t\t\tthis.render();\n\t\t},\n\t\n\t\trender: function() {\n\t\t\tthis.$el.html( this.template(this.model.toJSON()) );\n\t\t\t// call it as function and pass the date to use.\n\t\t}\n\t});\n\nIn console\n\n\tpersonView.el\n\t$(document.body).append(personView.el);\n\n\n\n## External-Templates\n\nAdd the following to index.html\n\n\t<script id=\"personTemplate\" type=\"text/template\">\n\t<strong><%= name %></strong> (<%= age %>) - <%= occupation %>\n\t</script>\n\nSince there is no javascript, you have to add type=\"text/template. This will prevent executing as a javascript.\n\nIn main.js you need to fetch the above.\n\n\t// method one\n\ttemplate: _.template( $('#personTemplate').html() ),\n\t\n\t// method two\n\ttemplate: '#personTemplate',\n\n\trender: function(){\n\t\tvar template = _.template( $(this.template) );\n\t\tthis.$el.html( template );\n\t}\n\n### Final\n\nconsole \n\t\n\tpersonView.el\n\t\nmain.js\n\n\tvar Person = Backbone.Model.extend({\n\t\tdefaults: {\n\t\t\tname: 'John Doe',\n\t\t\tage: 30,\n\t\t\toccupation: 'worker'\n\t\t}\n\t});\n\t\n\tvar PersonView = Backbone.View.extend({\n\t\ttagName: 'li',\n\t\n\t\ttemplate: _.template( $('#personTemplate').html() ),\n\t\n\t\tinitialize: function() {\n\t\t\tthis.render();\n\t\t},\n\t\n\t\trender: function() {\n\t\t\tthis.$el.html( this.template(this.model.toJSON()) );\n\t\t}\n\t});\n\t\n\tvar person = new Person;\n\tvar personView = new PersonView({ model: person });\n\t\n\t// Bleh. This gets messy quickly.\n\tvar person2 = new Person({ name: 'Jeffrey Way', age: 27 });\n\tvar personView2 = new PersonView({ model: person2 });\n\t\n\n## Collections\n\nWhen you have more than one person/object, you need to use collections. Adding Backbone.Collection.extend().\n\n\t// A List of People\n\tvar PeopleCollection = Backbone.Collection.extend({\n\tmodel: Person //pass the name of model\n\t});\n\nIn console\n\n\tnew PeopleCollection\n\t\nAdd a new Collection in main.js add and console.log it.\n\n\tvar peopleCollection = new PeopleCollection;\n\tpeopleCollection.add(person);\n\n\tconsole.log(peopleCollection);\n\nIn console, it shows length one, which is one model.\n\n\tpeopleCollection.toJSON();\n\t\nIn main.js Add one more person2.\n\n\tvar person = new Person;\n\tvar personView = new PersonView({model: person});\n\t\n\tvar peopleCollection = new PeopleCollection;\n\tpeopleCollection.add(person);\n\t\n\tvar person2 = new Person({name:'Shin Okada', age : 55});\n\tvar personView2 = new PersonView({model: person2});\n\t\n\tpeopleCollection.add(person2);\n\t\n\tconsole.log(peopleCollection);\n\t\nIn console\n\t\n\tpeopleCollection.toJSON();//this will show two objects.\n\t\nYou can clean it up by followings. You can add array of object as following.\n\n\t\n\tvar peopleCollection = new PeopleCollection([\n\t\t{\n\t\t\tname: 'Jeffrey Way',\n\t\t\tage: 27\n\t\t},\n\t\t{\n\t\t\tname: 'John Doe',\n\t\t\tage: 50,\n\t\t\toccupation: 'web designer'\n\t\t},\n\t\t{\n\t\t\tname: 'Sally Doe',\n\t\t\tage: 29,\n\t\t\toccupation: 'graphic designer'\n\t\t}\n\t]);\n\t\n\tconsole.log(peopleCollection);\n\t\nIn console,\n\n\tpeopleCollection.toJSON();\t\n\n\tvar model = peopleCollection.at(0);\n\tmodel\n\t// and see under attributes\n\tmodel.get('name');\n\t// return the name\n\tmodel.set('occupation', 'web developer');\n\tmodel.toJSON();\n\t// to see added item\n\tpeopleCollection.toJSON();\n\t// to see updated items.\n\t\n\tjeff=peopleCollection.getByCid('c0');\n\tJSON.stringify(jeff);\n\t\n\t//if jeff has id:123\n\tjeff=peopleCollection.get(123);\n\tJSON.stringify(jeff);\n\n\t\n\t\n### Final Code\nmain.js\n\n\t// Person Model\n\tvar Person = Backbone.Model.extend({\n\t\tdefaults: {\n\t\t\tname: 'John Doe',\n\t\t\tage: 30,\n\t\t\toccupation: 'worker'\n\t\t}\n\t});\n\t\n\t// A List of People\n\tvar PeopleCollection = Backbone.Collection.extend({\n\t\tmodel: Person\n\t});\n\t\n\t// The View for a Person\n\tvar PersonView = Backbone.View.extend({\n\t\ttagName: 'li',\n\t\n\t\ttemplate: _.template( $('#personTemplate').html() ),\n\t\n\t\tinitialize: function() {\n\t\t\tthis.render();\n\t\t},\n\t\n\t\trender: function() {\n\t\t\tthis.$el.html( this.template(this.model.toJSON()) );\n\t\t}\n\t});\n\t\n\tvar peopleCollection = new PeopleCollection([\n\t\t{\n\t\t\tname: 'Jeffrey Way',\n\t\t\tage: 27\n\t\t},\n\t\t{\n\t\t\tname: 'John Doe',\n\t\t\tage: 50,\n\t\t\toccupation: 'web designer'\n\t\t},\n\t\t{\n\t\t\tname: 'Sally Doe',\n\t\t\tage: 29,\n\t\t\toccupation: 'graphic designer'\n\t\t}\n\t]);\n\t\n\tconsole.log(peopleCollection);\n\t\n\n\n\n\t\n## Collection-Views\nWhen you have more than one colleciton view, you need to use collecion view. We need a view to render all the person view.\n\n\t// View for all people\n\tvar PeopleView = Backbone.View.extend({\n\ttagName: 'ul',\n\n\tinitialize: function(){\n\t\tconsole.log(this.collection);\n\t},\n\n\trender: function() {\n\t\t// filter through all items in a collection\n\t\t// for each, create a new PersonView\n\t\t// append to root element\n\t}\n\t});\n\nNext we need to access to peopleCollection in PeopleView. We create a collection by var peopleCollection before. Add this at the end.\n\n\tvar peopleView = new PeopleView({ collection: peopleCollection });\n\t\nThis will console an object with length of 3.\n\nNext take out the previous initialize and add the following.\n\n\trender: function(){\n\t\tconsole.log(this.collection);\n\t}\n\t\nIn console, peopleView.render() and see under \\__proto__, and \\__proto__ to find out all the methods and each() method. Then change render() again.\n\n\trender: function(){\n\t\tconsole.log(this.collection.each);\n\t}\n\nThis will display the each method.\n\nChange the render to the followings.\n\n\tthis.collection.each(function(person)){//model or person\n\t\tconsole.log(person);\n\t}\n\t\nIn console, \n\n\tpeopleView.render();\n\t\nYou need to watch this. There are more to it.\t\n\n\n### Final Code\n\n\t// Person Model\n\tvar Person = Backbone.Model.extend({\n\t\tdefaults: {\n\t\t\tname: 'John Doe',\n\t\t\tage: 30,\n\t\t\toccupation: 'worker'\n\t\t}\n\t});\n\t\n\t// A List of People\n\tvar PeopleCollection = Backbone.Collection.extend({\n\t\tmodel: Person\n\t});\n\t\n\t\n\t// View for all people\n\tvar PeopleView = Backbone.View.extend({\n\t\ttagName: 'ul',\n\t\n\t\trender: function() {\n\t\t\t// filter through all items in a collection\n\t\t\t// for each, create a new PersonView\n\t\t\t// append to root element\n\t\t\t\n\t\t\tthis.collection.each(function(person) {\n\t\t\t\tvar personView = new PersonView({ model: person });\n\t\t\t\tthis.$el.append(personView.render().el);\n\t\t\t}, this);\n\t\n\t\t\treturn this;\n\t\t}\n\t});\n\t\n\t// The View for a Person\n\tvar PersonView = Backbone.View.extend({\n\t\ttagName: 'li',\n\t\n\t\ttemplate: _.template( $('#personTemplate').html() ),\n\t\n\t\trender: function() {\n\t\t\tthis.$el.html( this.template(this.model.toJSON()) );\n\t\t\treturn this;\n\t\t}\n\t});\n\t\n\tvar peopleCollection = new PeopleCollection([\n\t\t{\n\t\t\tname: 'Jeffrey Way',\n\t\t\tage: 27\n\t\t},\n\t\t{\n\t\t\tname: 'John Doe',\n\t\t\tage: 50,\n\t\t\toccupation: 'web designer'\n\t\t},\n\t\t{\n\t\t\tname: 'Sally Doe',\n\t\t\tage: 29,\n\t\t\toccupation: 'graphic designer'\n\t\t}\n\t]);\n\t\n\tvar peopleView = new PeopleView({ collection: peopleCollection });\n\t$(document.body).append(peopleView.render().el);\n\t\n\n", "tags": ["Backbone.js"]}