{"context": "\n\n\u4f55\u306e\u8a18\u4e8b\uff1f\n\u6700\u8fd1\uff08\uff1f\uff09\u6d41\u884c\u306e\u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af\u3001Common Lisp\u306f\u306a\u304b\u3063\u305f\u3088\u3046\u306a\u306e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\n\nzundoko.lisp\n;;;; zundoko problem\n\n;; \u521d\u671f\u5316\n(defun init-zundoko ()\n  ; \u30ba\u30f3\u30c9\u30b3\u72b6\u614b\n  (defparameter *zundoko-stat* '())\n  ; \u30ba\u30f3\u30c9\u30b3\u5b9a\u7fa9\n  (defvar +zun+ 0)\n  (defvar +doko+ 1)\n  ; \u30ad\u30e8\u30b7\u5224\u5b9a\u6642\u306e\u30ba\u30f3\u30c9\u30b3\u30d1\u30bf\u30fc\u30f3\n  (defvar +zundoko-pat+ (list 0 0 0 0 1)))\n\n;; \u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af\u95a2\u6570\n(defun zundoko (out-stream)\n  (setf *zundoko-stat* (append *zundoko-stat* (list (random 2))))\n\n  ;; \u30ba\u30f3\u30c9\u30b3\u3057\u3059\u304e\u306a\u3044\u3088\u3046\u306bcdr\u3059\u308b\n  (if (> (length *zundoko-stat*) 5)\n    (setf *zundoko-stat* (cdr *zundoko-stat*)))\n\n  (if (equal (length *zundoko-stat*) 5)\n    ;; \u8981\u7d20\u304c5\u500b\u306a\u3089\u30ad\u30e8\u30b7\u5224\u5b9a\n    (progn \n      ;; \u73fe\u5728\u306e\u72b6\u614b\u3067\u30ba\u30f3\u30c9\u30b3\u3059\u308b\n      (mapcar \n        (lambda (x)\n          (if (equal x +zun+)\n            (format out-stream \"\u30ba\u30f3 \")\n            (format out-stream \"\u30c9\u30b3 \")))\n        *zundoko-stat*)\n\n      ;; \u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3057\u305f\u3089\uff3c\u30ad\u30e8\u30b7\uff0f\u3059\u308b\n      (if (reduce (lambda (x y) (and x y)) (mapcar #'equal *zundoko-stat* +zundoko-pat+))\n        (progn \n          (format out-stream \"\uff3c\u30ad\u30e8\u30b7\uff0f\")\n          t)\n        nil))\n\n    ;; \u8981\u7d20\u304c5\u500b\u672a\u6e80\u306a\u3089\u30ba\u30f3\u30c9\u30b3\u30c1\u30e3\u30fc\u30b8\u4e2d\n    (progn \n      (format out-stream \"\u30ba\u30f3\u30c9\u30b3\u30c1\u30e3\u30fc\u30b8\u4e2d\")\n      nil))\n)\n\n;; \u521d\u671f\u5316\n(init-zundoko)\n\n\n(zundoko t)\u3059\u308b\u3068\u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n(zundoko nil)\u3059\u308c\u3070\u753b\u9762\u51fa\u529b\u306f\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u305f\u3068\u3048\u3070\u521d\u5fc3\u8005\u306e\u52c9\u5f37\u7528\u306b\u3001\n\u300c\u3053\u306e\u95a2\u6570\u309210,000\u56de\u5b9f\u884c\u3057\u305f\u969b\u306b\uff3c\u30ad\u30e8\u30b7\uff0f\u3059\u308b\u78ba\u7acb\u3092\u6c42\u3081\u3088\u300d\u307f\u305f\u3044\u306a\u8ab2\u984c\u306b\u304d\u3063\u3068\u3064\u304b\u3048\u308b\u3060\u308d\u3046\n\u3068\u3044\u3046\u5e0c\u671b\u3092\u5c11\u306a\u304f\u3068\u3082\u66f8\u3044\u3066\u308b\u6642\u70b9\u3067\u306f\u3082\u3063\u3066\u3044\u307e\u3059\u3002:)\n\nLisp\u3063\u307d\u304f\u306a\u3044\n\u3054\u3081\u3093\u306d\u3001\u4e00\u751f\u61f8\u547d\u30ba\u30f3\u30c9\u30b3\u3059\u308b\u304b\u3089\u3086\u308b\u3057\u3066\uff1e\uff1c\n# \u4f55\u306e\u8a18\u4e8b\uff1f\n\u6700\u8fd1\uff08\uff1f\uff09\u6d41\u884c\u306e\u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af\u3001Common Lisp\u306f\u306a\u304b\u3063\u305f\u3088\u3046\u306a\u306e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\n\n```cl:zundoko.lisp \n;;;; zundoko problem\n\n;; \u521d\u671f\u5316\n(defun init-zundoko ()\n  ; \u30ba\u30f3\u30c9\u30b3\u72b6\u614b\n  (defparameter *zundoko-stat* '())\n  ; \u30ba\u30f3\u30c9\u30b3\u5b9a\u7fa9\n  (defvar +zun+ 0)\n  (defvar +doko+ 1)\n  ; \u30ad\u30e8\u30b7\u5224\u5b9a\u6642\u306e\u30ba\u30f3\u30c9\u30b3\u30d1\u30bf\u30fc\u30f3\n  (defvar +zundoko-pat+ (list 0 0 0 0 1)))\n\n;; \u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af\u95a2\u6570\n(defun zundoko (out-stream)\n  (setf *zundoko-stat* (append *zundoko-stat* (list (random 2))))\n\n  ;; \u30ba\u30f3\u30c9\u30b3\u3057\u3059\u304e\u306a\u3044\u3088\u3046\u306bcdr\u3059\u308b\n  (if (> (length *zundoko-stat*) 5)\n    (setf *zundoko-stat* (cdr *zundoko-stat*)))\n\n  (if (equal (length *zundoko-stat*) 5)\n    ;; \u8981\u7d20\u304c5\u500b\u306a\u3089\u30ad\u30e8\u30b7\u5224\u5b9a\n    (progn \n      ;; \u73fe\u5728\u306e\u72b6\u614b\u3067\u30ba\u30f3\u30c9\u30b3\u3059\u308b\n      (mapcar \n        (lambda (x)\n          (if (equal x +zun+)\n            (format out-stream \"\u30ba\u30f3 \")\n            (format out-stream \"\u30c9\u30b3 \")))\n        *zundoko-stat*)\n\n      ;; \u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3057\u305f\u3089\uff3c\u30ad\u30e8\u30b7\uff0f\u3059\u308b\n      (if (reduce (lambda (x y) (and x y)) (mapcar #'equal *zundoko-stat* +zundoko-pat+))\n        (progn \n          (format out-stream \"\uff3c\u30ad\u30e8\u30b7\uff0f\")\n          t)\n        nil))\n\n    ;; \u8981\u7d20\u304c5\u500b\u672a\u6e80\u306a\u3089\u30ba\u30f3\u30c9\u30b3\u30c1\u30e3\u30fc\u30b8\u4e2d\n    (progn \n      (format out-stream \"\u30ba\u30f3\u30c9\u30b3\u30c1\u30e3\u30fc\u30b8\u4e2d\")\n      nil))\n)\n\n;; \u521d\u671f\u5316\n(init-zundoko)\n```\n```(zundoko t)```\u3059\u308b\u3068\u30ad\u30e8\u30b7\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n```(zundoko nil)```\u3059\u308c\u3070\u753b\u9762\u51fa\u529b\u306f\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u305f\u3068\u3048\u3070\u521d\u5fc3\u8005\u306e\u52c9\u5f37\u7528\u306b\u3001\n\u300c\u3053\u306e\u95a2\u6570\u309210,000\u56de\u5b9f\u884c\u3057\u305f\u969b\u306b\uff3c\u30ad\u30e8\u30b7\uff0f\u3059\u308b\u78ba\u7acb\u3092\u6c42\u3081\u3088\u300d\u307f\u305f\u3044\u306a\u8ab2\u984c\u306b\u304d\u3063\u3068\u3064\u304b\u3048\u308b\u3060\u308d\u3046\n\u3068\u3044\u3046\u5e0c\u671b\u3092\u5c11\u306a\u304f\u3068\u3082\u66f8\u3044\u3066\u308b\u6642\u70b9\u3067\u306f\u3082\u3063\u3066\u3044\u307e\u3059\u3002:)\n\n#Lisp\u3063\u307d\u304f\u306a\u3044\n\u3054\u3081\u3093\u306d\u3001\u4e00\u751f\u61f8\u547d\u30ba\u30f3\u30c9\u30b3\u3059\u308b\u304b\u3089\u3086\u308b\u3057\u3066\uff1e\uff1c\n\n", "tags": ["CommonLisp", "lisp", "SBCL", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7"]}