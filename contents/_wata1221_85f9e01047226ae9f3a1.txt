{"context": " More than 1 year has passed since last update.\n\nbinary\n\nElf1 100\u70b9\n\u554f\u984c\u30d5\u30a1\u30a4\u30eb\n\n$file binary\nbinary: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x18dc5a21c6f0313a73840f9591328a75dbc1e624, not stripped\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u805e\u304b\u308c\u308b\n\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u4f55\u3082\u8d77\u3053\u3089\u306a\u3044\n\n$./binary \n*********************************\n  welcome to cracking challenge\n*********************************\nEnter you password: a\n\ngdb\u3067\u5b9f\u884c\u3057\u306a\u304c\u3089exit\u3057\u306a\u3044\u3088\u3046\u306b\u9032\u3081\u3066\u3044\u304f\n0x400986 <main+34>:        test   rax,rax\n(gdb)set $rax=0\n\n0x4008f6 <xxxx+97>:        mov    DWORD PTR [rbp-0x7e4],eax\n(gdb)set $eax=0xc\n\n0x400930 <xxxx+155>:        test   eax,eax\n(gdb)set $eax=0x0\n\n0x4007f0 <xxxxx+118>:        test   eax,eax\n(gdb)set $eax=0x0\n\n\n\u3053\u306e\u3088\u3046\u306b\u5206\u5c90\u3092\u30b9\u30eb\u30fc\u3057\u3066\u3044\u304f\u3068flag\u304c\u8868\u793a\u3055\u308c\u308b\nFlag: ping-pong@\n\u3057\u304b\u3057\u3053\u306eflag\u306f\u901a\u3089\u306a\u304b\u3063\u305f\u3002\n\u306a\u306e\u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6c42\u3081\u308b\n\n0x4007c3 <xxxxx+73>:    call   0x400c10 <base64_decode>\n\u3053\u3053\u3067\u5165\u529b\u3057\u305f\u3082\u306e\u3092base64\u3067\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u3044\u308b\n\n0x4007cf <xxxxx+85>:   mov    eax,0x400f40\nRAX: 0x400f40 --> 0x6c460072696d6173 ('samir')\n0x400f40\u306b\u306fsamir\u3068\u3044\u3046\u6587\u5b57\u5217\u304c\u5165\u3063\u3066\u3044\u308b\n\n0x4007df <xxxxx+101>:  repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]\n\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u3082\u306e\u3068samir\u3092\u6bd4\u8f03\u3057\u3066\u3044\u308b\n\n\u3068\u3044\u3046\u3053\u3068\u3067samir\u3092base64\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u3082\u306e\u3092\u5165\u529b\u3057\u3066\u307f\u308b\n\n./binary \n*********************************\n  welcome to cracking challenge\n*********************************\nEnter you password: c2FtaXI=\nFlag: ping-pong@\n\n\n\u3053\u308c\u3089\u3092\u5165\u529b\u3057\u3066\u3082\u6b63\u89e3\u306b\u306a\u3089\u306a\u3044\nping-pong@\nsamir\nc2FtaXI=\n\u304a\u304b\u3057\u3044\u3002\nflag\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u3044\u308b\u5834\u6240\u3092\u898b\u3066\u307f\u308b\n\n0x400861 <xxxxx+231>:   call   0x400c10 <base64_decode>\n\u3053\u306e\u3068\u304d\u306e\u5f15\u6570\narg[0]: 0x7fffffffdb10 (\"cGluZy1wb25n\")\narg[1]: 0xc ('\\x0c')\narg[2]: 0x7fffffffdb40 --> 0x0 \n\ncGluZy1wb25n\u3000\u3053\u308c\u3092base64\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u3068ping-pong\n\n\u5f8c\u308d\u306b\u3064\u3044\u3066\u3044\u305f@\u304c\u3044\u3089\u306a\u304b\u3063\u305f\u3089\u3057\u3044\u3002\u3000\u3068\u3044\u3046\u3053\u3068\u3067\nFlag\u3000ping-pong\n\n\n\nElf2 100\u70b9\n\u554f\u984c\u30d5\u30a1\u30a4\u30eb\n\n$file run\nrun: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0xff97fa3797bb95b425e482fb0772c1accf55762a, not stripped\n\n\n\u5b9f\u884c\u3057\u3066\u3082\u7121\u53cd\u5fdc\nbokken\u306b\u5165\u308c\u3066\u307f\u308b\n\u3068\u308a\u3042\u3048\u305aStrings\u3092\u898b\u308b\u3068\n\n0x00400881 7 str.xxyyzz\n0x00400878 9 str.Flags\n0x0040086e 10 str..flag.txt\n\n\n\u3069\u3053\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n\n/ function: sym.xxyyzz (94)\n| 0x00400697  sym.xxyyzz:\n| 0x00400697     55               push rbp\n| 0x00400698     4889e5           mov rbp, rsp\n| 0x0040069b     4883ec10         sub rsp, 0x10\n| 0x0040069f     ba6c084000       mov edx, 0x40086c\n| 0x004006a4     b86e084000       mov eax, str..flag.txt\n| 0x004006a9     4889d6           mov rsi, rdx\n| 0x004006ac     4889c7           mov rdi, rax\n| 0x004006af     e89cfeffff       call dword imp.fopen\n|     ; imp.fopen()\n| 0x004006b4     488945f8         mov [rbp-0x8], rax\n| 0x004006b8     48837df800       cmp qword [rbp-0x8], 0x0\n| 0x004006bd     750a             jnz loc.004006c9\n| 0x004006bf     bf00000000       mov edi, 0x0\n| 0x004006c4     e8a7feffff       call dword imp.exit\n|     ; imp.exit()\n| ; CODE (JMP) XREF 0x004006bd (sym.xxyyzz)\n/ loc: loc.004006c9 (44)\n| 0x004006c9  loc.004006c9:\n| 0x004006c9     b978084000       mov ecx, str.Flags\n| 0x004006ce     488b45f8         mov rax, [rbp-0x8]\n| 0x004006d2     ba81084000       mov edx, str.xxyyzz\n| 0x004006d7     4889ce           mov rsi, rcx\n| 0x004006da     4889c7           mov rdi, rax\n| 0x004006dd     b800000000       mov eax, 0x0\n| 0x004006e2     e849feffff       call dword imp.fprintf\n|     ; imp.fprintf()\n| 0x004006e7     488b45f8         mov rax, [rbp-0x8]\n| 0x004006eb     4889c7           mov rdi, rax\n| 0x004006ee     e81dfeffff       call dword imp.fclose\n|     ; imp.fclose()\n| 0x004006f3     c9               leave\n\\ 0x004006f4     c3               ret\n\n\nflag.txt\u3092\u958b\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u3089\u4f55\u304b\u3092\u66f8\u304d\u8fbc\u3080\u306e\u304b\u306a\u30fc\u3000\u3068\u3044\u3046\u3053\u3068\u3067\u4f55\u3092\u66f8\u304d\u8fbc\u3080\u304bgdb\u3067\u898b\u3066\u307f\u308b\n\n(gdb)disas xxyyzz\nDump of assembler code for function xxyyzz:\n   0x0000000000400697 <+0>: push   rbp\n   0x0000000000400698 <+1>: mov    rbp,rsp\n   0x000000000040069b <+4>: sub    rsp,0x10\n   0x000000000040069f <+8>: mov    edx,0x40086c\n   0x00000000004006a4 <+13>:    mov    eax,0x40086e\n   0x00000000004006a9 <+18>:    mov    rsi,rdx\n   0x00000000004006ac <+21>:    mov    rdi,rax\n   0x00000000004006af <+24>:    call   0x400550 <fopen@plt>\n   0x00000000004006b4 <+29>:    mov    QWORD PTR [rbp-0x8],rax\n   0x00000000004006b8 <+33>:    cmp    QWORD PTR [rbp-0x8],0x0\n   0x00000000004006bd <+38>:    jne    0x4006c9 <xxyyzz+50>\n   0x00000000004006bf <+40>:    mov    edi,0x0\n   0x00000000004006c4 <+45>:    call   0x400570 <exit@plt>\n   0x00000000004006c9 <+50>:    mov    ecx,0x400878\n   0x00000000004006ce <+55>:    mov    rax,QWORD PTR [rbp-0x8]\n   0x00000000004006d2 <+59>:    mov    edx,0x400881\n   0x00000000004006d7 <+64>:    mov    rsi,rcx\n   0x00000000004006da <+67>:    mov    rdi,rax\n   0x00000000004006dd <+70>:    mov    eax,0x0\n   0x00000000004006e2 <+75>:    call   0x400530 <fprintf@plt>\n   0x00000000004006e7 <+80>:    mov    rax,QWORD PTR [rbp-0x8]\n   0x00000000004006eb <+84>:    mov    rdi,rax\n   0x00000000004006ee <+87>:    call   0x400510 <fclose@plt>\n   0x00000000004006f3 <+92>:    leave  \n   0x00000000004006f4 <+93>:    ret  \n\n\nfprintf\u306e\u5f15\u6570\u3092\u78ba\u8a8d\n\n(gdb) x/s 0x400878\n0x400878:    \"Flag: %s\"\n(gdb) x/s 0x400881\n0x400881 <__FUNCTION__.3311>:    \"xxyyzz\"\n\n\nFlag : xxyyzz \u304c\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3089\u3057\u3044\u3000\u3053\u308c\u3092submit\u3057\u305f\u3089\u6b63\u89e3\u3067\u3057\u305f\u3002\n\n\nPE 1 100\u70b9\n\u554f\u984c\u30d5\u30a1\u30a4\u30eb\n\n$file level1.exe \nlevel1.exe: PE32 executable (console) Intel 80386, for MS Windows\n\n\n\u5b9f\u884c\u3059\u308b\n\n****************\n  it's so easy\n****************\nenter the secret key: a\n\n\n\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u4f55\u3082\u8d77\u3053\u3089\u306a\u3044\nida\u3067\u4e2d\u8eab\u3092\u898b\u308b\nstrings\u306bFlag is:\u3000\u3068\u3044\u3046\u6587\u5b57\u304c\u3042\u308b\u306e\u3067\u305d\u3053\u3092\u898b\u308b\n\n0x00401A40\u3067\u30b8\u30e3\u30f3\u30d7\u3057\u306a\u3051\u308c\u3070\u826f\u3055\u305d\u3046\nOllyDbg\u3067\u898b\u308b\n\n00401704  /$  55            PUSH EBP\n00401705  |.  89E5          MOV EBP,ESP\n00401707  |.  83EC 18       SUB ESP,18\n0040170A  |.  A1 00934800   MOV EAX,DWORD PTR DS:[<&KERNEL32.IsDebug>; |\n0040170F  |.  FFD0          CALL NEAR EAX                            ; |[IsDebuggerPresent\n00401711  |.  83F8 01       CMP EAX,1                                ; |\n00401714  |.  0F94C0        SETE AL                                  ; |\n00401717  |.  84C0          TEST AL,AL                               ; |\n00401719  |.  74 1D         JE SHORT level1.00401738                 ; |\n0040171B  |.  C70424 E80300>MOV DWORD PTR SS:[ESP],3E8               ; |\n00401722  |.  A1 38934800   MOV EAX,DWORD PTR DS:[<&KERNEL32.Sleep>] ; |\n00401727  |.  FFD0          CALL NEAR EAX                            ; \\Sleep\n00401729  |.  83EC 04       SUB ESP,4\n0040172C  |.  C70424 000000>MOV DWORD PTR SS:[ESP],0                 ; |\n00401733  |.  E8 48460100   CALL <JMP.&msvcrt.exit>                  ; \\exit\n00401738  |>  C9            LEAVE\n00401739  \\.  C3            RETN\n\n\nIsDebuggerPresent\u304c\u3042\u308b\u306e\u3067\u9069\u5f53\u306b\u3064\u3076\u3057\n0x00401a40\u3092JNE SHORT 00401A98\u3084NOP\u306a\u3069\u306b\u3059\u308b\u3068flag\u304c\u3067\u308b\nFlag is :aiiajc(eik\n\n\nPE 2 100\u70b9\n\u554f\u984c\u30d5\u30a1\u30a4\u30eb\n\n$file binary-pe.exe \nbinary-pe.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows\n\n\n\u5b9f\u884c\u3059\u308b\n\nenter the key: a\n\n\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u4f55\u3082\u8d77\u3053\u3089\u306a\u3044\n\nida\u306estrings\u3092\u898b\u308b\n\n0x004014AC\u3053\u306ecmp\u547d\u4ee4\u304c\u3042\u3063\u3066\u3044\u308c\u3070flag\u304c\u8868\u793a\u3055\u308c\u308b\u307f\u305f\u3044\nOllyDbg\u3067\u5024\u3092\u78ba\u8a8d\u3059\u308b\n\n\u3053\u308c\u309210\u9032\u6570\u306b\u3057\u305f\u3082\u306e\u3092\u5165\u529b\n\nenter the key: 1309495\nFlag: 1309495\n\nFlag : 1309495\n\n\n\nPE 3 200\u70b9\n\u554f\u984c\u30d5\u30a1\u30a4\u30eb\n\n$file bin.exe \nbin.exe: data\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u30d0\u30a4\u30ca\u30ea\u30a8\u30c7\u30a3\u30bf\u306b\u308c\u308b\n00000000  4e 5a 90 00 03 00 00 00  04 00 00 00 ff ff 00 00  |NZ..............|\n00000010  b8 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |........@.......|\n00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 00 00 00 00  00 00 00 00 80 00 00 00  |................|\n00000040  0e 1f ba 0e 00 b4 09 cd  21 b8 01 4c cd 21 54 68  |........!..L.!Th|\n00000050  69 73 20 70 72 6f 67 72  61 6d 20 63 61 6e 6e 6f  |is program canno|\n00000060  74 20 62 65 20 72 75 6e  20 69 6e 20 44 4f 53 20  |t be run in DOS |\n00000070  6d 6f 64 65 2e 0d 0d 0a  24 00 00 00 00 00 00 00  |mode....$.......|\n00000080  50 45 00 00 4c 01 08 00  d8 3f 6b 54 00 1c 0a 00  |PE..L....?kT....|\n00000090  1a 38 00 00 e0 00 07 03  0b 01 02 17 00 be 06 00  |.8..............|\n\n\n\u5148\u982d\u306eNZ\u3092MZ\u306b\u76f4\u3059\n\n$file bin.exe \nbin.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows\n\n\n\u5b9f\u884c\u3059\u308b\n\n*****************************************\n         welcome in cairo ctf\n*****************************************\n\n\nida\u306estrings\u3092\u898b\u308b\u3068Flag:\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\n\n.text:00401491                 push    ebp\n.text:00401492                 mov     ebp, esp\n.text:00401494                 push    ebx\n.text:00401495                 sub     esp, 24h\n.text:00401498                 lea     eax, [ebp-11h]\n.text:0040149B                 mov     ecx, eax\n.text:0040149D                 call    nullsub_2\n.text:004014A2                 lea     eax, [ebp-18h]\n.text:004014A5                 lea     edx, [ebp-11h]\n.text:004014A8                 mov     [esp+4], edx\n.text:004014AC                 mov     dword ptr [esp], offset aFlagflag ; \"flagflag\"\n.text:004014B3                 mov     ecx, eax\n.text:004014B5                 call    sub_44473C\n.text:004014BA                 sub     esp, 8\n.text:004014BD                 lea     eax, [ebp-11h]\n.text:004014C0                 mov     ecx, eax\n.text:004014C2                 call    nullsub_3\n.text:004014C7                 lea     eax, [ebp-0Ch]\n.text:004014CA                 lea     edx, [ebp-18h]\n.text:004014CD                 mov     [esp], edx\n.text:004014D0                 mov     ecx, eax\n.text:004014D2                 call    sub_444960\n.text:004014D7                 sub     esp, 4\n.text:004014DA                 lea     eax, [ebp-10h]\n.text:004014DD                 lea     edx, [ebp-0Ch]\n.text:004014E0                 mov     [esp+4], edx\n.text:004014E4                 mov     [esp], eax\n.text:004014E7                 call    sub_4013B0\n.text:004014EC                 lea     eax, [ebp-18h]\n.text:004014EF                 lea     edx, [ebp-10h]\n.text:004014F2                 mov     [esp], edx\n.text:004014F5                 mov     ecx, eax\n.text:004014F7                 call    sub_445BC8\n.text:004014FC                 sub     esp, 4\n.text:004014FF                 lea     eax, [ebp-10h]\n.text:00401502                 mov     ecx, eax\n.text:00401504                 call    sub_445B38\n.text:00401509                 lea     eax, [ebp-0Ch]\n.text:0040150C                 mov     ecx, eax\n.text:0040150E                 call    sub_445B38\n.text:00401513                 mov     dword ptr [esp+4], offset aFlag ; \"Flag: \"\n.text:0040151B                 mov     dword ptr [esp], offset dword_472F80\n.text:00401522                 call    sub_465CE4\n.text:00401527                 lea     edx, [ebp-18h]\n.text:0040152A                 mov     [esp+4], edx\n.text:0040152E                 mov     [esp], eax\n.text:00401531                 call    sub_465F20\n.text:00401536                 mov     dword ptr [esp+4], offset asc_474075 ; \"\\n\"\n.text:0040153E                 mov     [esp], eax\n.text:00401541                 call    sub_465CE4\n.text:00401546                 lea     eax, [ebp-18h]\n.text:00401549                 mov     ecx, eax\n.text:0040154B                 call    sub_445B38\n.text:00401550                 jmp     short loc_401596\n\n\n\u30c7\u30d0\u30c3\u30ac\u3067\u666e\u901a\u306b\u5b9f\u884c\u3057\u3066\u3044\u308b\u30680x00401491\u3053\u306e\u51e6\u7406\u306b\u5165\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u9069\u5f53\u306b\u98db\u3070\u3057\u3066\u3042\u3052\u308b\n\u81ea\u5206\u306f\u3061\u3087\u3046\u30690x004010ff\u306b\u3044\u305f\u306e\u3067\u305d\u3053\u304b\u3089\u98db\u3070\u3057\u3066\u3042\u3052\u307e\u3057\u305f\u3002\n\n*****************************************\n         welcome in cairo ctf\n*****************************************\nFlag: galfgalf\n\n\nFlag: galfgalf\n\n\nCTF KeyGen 300\u70b9(\u30d0\u30a4\u30ca\u30ea\u90e8\u5206)\n\u554f\u984c\u30d5\u30a1\u30a4\u30eb\n\n$file KeyGen.exe \nKeyGen.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows\n\n\n.NET\u306a\u306e\u3067\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\nJetBrains dotPeek\n\nusing System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace bruter\n{\n  internal class Program\n  {\n    public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)\n    {\n      byte[] bytes = Encoding.ASCII.GetBytes(Environment.UserName.ToLower().PadLeft(8, 'a'));\n      using (MemoryStream memoryStream = new MemoryStream())\n      {\n        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())\n        {\n          rijndaelManaged.KeySize = 256;\n          rijndaelManaged.BlockSize = 128;\n          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, bytes, 1000);\n          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);\n          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);\n          rijndaelManaged.Mode = CipherMode.CBC;\n          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))\n          {\n            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);\n            cryptoStream.Close();\n          }\n          return memoryStream.ToArray();\n        }\n      }\n    }\n\n   public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)\n    {\n      byte[] bytes = Encoding.ASCII.GetBytes(Environment.UserName.ToLower().PadLeft(8, 'a'));\n      using (MemoryStream memoryStream = new MemoryStream())\n      {\n        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())\n        {\n          rijndaelManaged.KeySize = 256;\n          rijndaelManaged.BlockSize = 128;\n          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, bytes, 1000);\n          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);\n          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);\n          rijndaelManaged.Mode = CipherMode.CBC;\n          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))\n          {\n            cryptoStream.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);\n            cryptoStream.Close();\n          }\n          return memoryStream.ToArray();\n        }\n      }\n    }\n\n   public static string EncryptText(string input, string password)\n    {\n      return Convert.ToBase64String(Program.AES_Encrypt(Encoding.UTF8.GetBytes(input), SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(password))));\n    }\n\n   public static string DecryptText(string input, string password)\n    {\n      return Encoding.UTF8.GetString(Program.AES_Decrypt(Convert.FromBase64String(input), SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(password))));\n    }\n\n private static void Main(string[] args)\n    {\n      string str = Environment.MachineName.ToLower().Substring(0, 3).PadRight(10, 'Z');\n      string password = str + ((int) str[0] % 2 == 0 ? \"E\" : \"O\");\n      try\n      {\n        >Console.WriteLine(Program.DecryptText(\"PUIrT3Y/JtMMnOoxew7Mj937vKbBYgVPfOL5MdQ1VgE=\", password));\n        Console.ReadLine();\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(\"Try again\");\n      }\n    }\n  }\n}\n\n\nmain\u306b\u3042\u308b\u30de\u30b7\u30f3\u30cd\u30fc\u30e0\u3068\nAES_Decrypt\u306b\u3042\u308b\u30e6\u30fc\u30b6\u30fc\u30cd\u30fc\u30e0\u3092\u7dcf\u5f53\u308a\u3059\u308c\u3070\u30c7\u30b3\u30fc\u30c9\u3067\u304d\u305d\u3046\n\nstring str = Environment.MachineName.ToLower().Substring(0, 3).PadRight(10, 'Z');\n\n\nbyte[] bytes = Encoding.ASCII.GetBytes(Environment.UserName.ToLower().PadLeft(8, 'a'));\n\n\n\u30e6\u30fc\u30b6\u30fc\u540d\u306f\u30d0\u30a4\u30ca\u30ea\u306e\u4e2d\u306b\u66f8\u3044\u3066\u3042\u308b\n\nC:\\Users\\Adham\\Documents\\CTF\\bruter\\bruter\\obj\\x86\\Release\\bruter.pdb\n\n\n\u9069\u5f53\u306b\u30de\u30b7\u30fc\u30f3\u540d\u3060\u3051\u7dcf\u5f53\u308a\n\u30de\u30b7\u30f3\u30cd\u30fc\u30e0\u5148\u982d ozi\u3000\u306e\u3068\u304d\u306b\u3046\u307e\u304f\u30c7\u30b3\u30fc\u30c9\u3067\u304d\u305f\nFlag: IWISHCTFSHADKEYGENS\n\nPE4\u306f\u89e3\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u554f\u984c\u30d5\u30a1\u30a4\u30eb\n\nExploit 1\u3000\u3082\u89e3\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u554f\u984c\u30d5\u30a1\u30a4\u30eb\n178.63.58.69 3016 \nusr: ctf, pass: canyoudoit \nflag in /home/flag/flag.txt\n\n#binary \n###Elf1 100\u70b9\n[\u554f\u984c\u30d5\u30a1\u30a4\u30eb](https://www.dropbox.com/s/m9jxgru0r9ggb70/binary?dl=0)\n\n>```text\n$file binary\nbinary: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x18dc5a21c6f0313a73840f9591328a75dbc1e624, not stripped\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u805e\u304b\u308c\u308b\n\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u4f55\u3082\u8d77\u3053\u3089\u306a\u3044\n\n>```text\n$./binary \n*********************************\n  welcome to cracking challenge\n*********************************\nEnter you password: a\n```\ngdb\u3067\u5b9f\u884c\u3057\u306a\u304c\u3089exit\u3057\u306a\u3044\u3088\u3046\u306b\u9032\u3081\u3066\u3044\u304f\n\n>```text\n0x400986 <main+34>:        test   rax,rax\n(gdb)set $rax=0\n\n>0x4008f6 <xxxx+97>:        mov    DWORD PTR [rbp-0x7e4],eax\n(gdb)set $eax=0xc\n\n>0x400930 <xxxx+155>:        test   eax,eax\n(gdb)set $eax=0x0\n\n>0x4007f0 <xxxxx+118>:        test   eax,eax\n(gdb)set $eax=0x0\n```\n\n\u3053\u306e\u3088\u3046\u306b\u5206\u5c90\u3092\u30b9\u30eb\u30fc\u3057\u3066\u3044\u304f\u3068flag\u304c\u8868\u793a\u3055\u308c\u308b\n\nFlag: ping-pong@\n\u3057\u304b\u3057\u3053\u306eflag\u306f\u901a\u3089\u306a\u304b\u3063\u305f\u3002\n\n\u306a\u306e\u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6c42\u3081\u308b\n\n>```text\n0x4007c3 <xxxxx+73>:\tcall   0x400c10 <base64_decode>\n\u3053\u3053\u3067\u5165\u529b\u3057\u305f\u3082\u306e\u3092base64\u3067\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u3044\u308b\n\n>0x4007cf <xxxxx+85>:\tmov    eax,0x400f40\nRAX: 0x400f40 --> 0x6c460072696d6173 ('samir')\n0x400f40\u306b\u306fsamir\u3068\u3044\u3046\u6587\u5b57\u5217\u304c\u5165\u3063\u3066\u3044\u308b\n\n>0x4007df <xxxxx+101>:\trepz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]\n\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u3082\u306e\u3068samir\u3092\u6bd4\u8f03\u3057\u3066\u3044\u308b\n\n>\u3068\u3044\u3046\u3053\u3068\u3067samir\u3092base64\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u3082\u306e\u3092\u5165\u529b\u3057\u3066\u307f\u308b\n\n>./binary \n*********************************\n  welcome to cracking challenge\n*********************************\nEnter you password: c2FtaXI=\nFlag: ping-pong@\n```\n\n\u3053\u308c\u3089\u3092\u5165\u529b\u3057\u3066\u3082\u6b63\u89e3\u306b\u306a\u3089\u306a\u3044\nping-pong@\nsamir\nc2FtaXI=\n\n\u304a\u304b\u3057\u3044\u3002\nflag\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u3044\u308b\u5834\u6240\u3092\u898b\u3066\u307f\u308b\n\n>```text\n0x400861 <xxxxx+231>:\tcall   0x400c10 <base64_decode>\n\u3053\u306e\u3068\u304d\u306e\u5f15\u6570\narg[0]: 0x7fffffffdb10 (\"cGluZy1wb25n\")\narg[1]: 0xc ('\\x0c')\narg[2]: 0x7fffffffdb40 --> 0x0 \n\n>cGluZy1wb25n\u3000\u3053\u308c\u3092base64\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u3068ping-pong\n```\n\u5f8c\u308d\u306b\u3064\u3044\u3066\u3044\u305f@\u304c\u3044\u3089\u306a\u304b\u3063\u305f\u3089\u3057\u3044\u3002\u3000\u3068\u3044\u3046\u3053\u3068\u3067\nFlag\u3000ping-pong\n\n---\n###Elf2 100\u70b9\n[\u554f\u984c\u30d5\u30a1\u30a4\u30eb](https://www.dropbox.com/s/adysvqvld0t1k7a/run?dl=0)\n\n>```text\n$file run\nrun: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0xff97fa3797bb95b425e482fb0772c1accf55762a, not stripped\n```\n\n\u5b9f\u884c\u3057\u3066\u3082\u7121\u53cd\u5fdc\n[bokken](http://www.radare.org/y/?p=gui)\u306b\u5165\u308c\u3066\u307f\u308b\n\u3068\u308a\u3042\u3048\u305aStrings\u3092\u898b\u308b\u3068\n\n>```text\n0x00400881 7 str.xxyyzz\n0x00400878 9 str.Flags\n0x0040086e 10 str..flag.txt\n```\n\n\u3069\u3053\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n\n>```text\n/ function: sym.xxyyzz (94)\n| 0x00400697  sym.xxyyzz:\n| 0x00400697     55               push rbp\n| 0x00400698     4889e5           mov rbp, rsp\n| 0x0040069b     4883ec10         sub rsp, 0x10\n| 0x0040069f     ba6c084000       mov edx, 0x40086c\n| 0x004006a4     b86e084000       mov eax, str..flag.txt\n| 0x004006a9     4889d6           mov rsi, rdx\n| 0x004006ac     4889c7           mov rdi, rax\n| 0x004006af     e89cfeffff       call dword imp.fopen\n|     ; imp.fopen()\n| 0x004006b4     488945f8         mov [rbp-0x8], rax\n| 0x004006b8     48837df800       cmp qword [rbp-0x8], 0x0\n| 0x004006bd     750a             jnz loc.004006c9\n| 0x004006bf     bf00000000       mov edi, 0x0\n| 0x004006c4     e8a7feffff       call dword imp.exit\n|     ; imp.exit()\n| ; CODE (JMP) XREF 0x004006bd (sym.xxyyzz)\n/ loc: loc.004006c9 (44)\n| 0x004006c9  loc.004006c9:\n| 0x004006c9     b978084000       mov ecx, str.Flags\n| 0x004006ce     488b45f8         mov rax, [rbp-0x8]\n| 0x004006d2     ba81084000       mov edx, str.xxyyzz\n| 0x004006d7     4889ce           mov rsi, rcx\n| 0x004006da     4889c7           mov rdi, rax\n| 0x004006dd     b800000000       mov eax, 0x0\n| 0x004006e2     e849feffff       call dword imp.fprintf\n|     ; imp.fprintf()\n| 0x004006e7     488b45f8         mov rax, [rbp-0x8]\n| 0x004006eb     4889c7           mov rdi, rax\n| 0x004006ee     e81dfeffff       call dword imp.fclose\n|     ; imp.fclose()\n| 0x004006f3     c9               leave\n\\ 0x004006f4     c3               ret\n```\n\nflag.txt\u3092\u958b\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u3089\u4f55\u304b\u3092\u66f8\u304d\u8fbc\u3080\u306e\u304b\u306a\u30fc\u3000\u3068\u3044\u3046\u3053\u3068\u3067\u4f55\u3092\u66f8\u304d\u8fbc\u3080\u304bgdb\u3067\u898b\u3066\u307f\u308b\n\n>```text\n(gdb)disas xxyyzz\nDump of assembler code for function xxyyzz:\n   0x0000000000400697 <+0>:\tpush   rbp\n   0x0000000000400698 <+1>:\tmov    rbp,rsp\n   0x000000000040069b <+4>:\tsub    rsp,0x10\n   0x000000000040069f <+8>:\tmov    edx,0x40086c\n   0x00000000004006a4 <+13>:\tmov    eax,0x40086e\n   0x00000000004006a9 <+18>:\tmov    rsi,rdx\n   0x00000000004006ac <+21>:\tmov    rdi,rax\n   0x00000000004006af <+24>:\tcall   0x400550 <fopen@plt>\n   0x00000000004006b4 <+29>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x00000000004006b8 <+33>:\tcmp    QWORD PTR [rbp-0x8],0x0\n   0x00000000004006bd <+38>:\tjne    0x4006c9 <xxyyzz+50>\n   0x00000000004006bf <+40>:\tmov    edi,0x0\n   0x00000000004006c4 <+45>:\tcall   0x400570 <exit@plt>\n   0x00000000004006c9 <+50>:\tmov    ecx,0x400878\n   0x00000000004006ce <+55>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x00000000004006d2 <+59>:\tmov    edx,0x400881\n   0x00000000004006d7 <+64>:\tmov    rsi,rcx\n   0x00000000004006da <+67>:\tmov    rdi,rax\n   0x00000000004006dd <+70>:\tmov    eax,0x0\n   0x00000000004006e2 <+75>:\tcall   0x400530 <fprintf@plt>\n   0x00000000004006e7 <+80>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x00000000004006eb <+84>:\tmov    rdi,rax\n   0x00000000004006ee <+87>:\tcall   0x400510 <fclose@plt>\n   0x00000000004006f3 <+92>:\tleave  \n   0x00000000004006f4 <+93>:\tret  \n```\n\nfprintf\u306e\u5f15\u6570\u3092\u78ba\u8a8d\n\n>```text\n(gdb) x/s 0x400878\n0x400878:\t \"Flag: %s\"\n(gdb) x/s 0x400881\n0x400881 <__FUNCTION__.3311>:\t \"xxyyzz\"\n```\n\nFlag : xxyyzz \u304c\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3089\u3057\u3044\u3000\u3053\u308c\u3092submit\u3057\u305f\u3089\u6b63\u89e3\u3067\u3057\u305f\u3002\n\n---\n###PE 1 100\u70b9\n[\u554f\u984c\u30d5\u30a1\u30a4\u30eb](https://www.dropbox.com/s/plzoinvwqihu43q/level1.exe?dl=0)\n\n>```text\n$file level1.exe \nlevel1.exe: PE32 executable (console) Intel 80386, for MS Windows\n```\n\n\u5b9f\u884c\u3059\u308b\n\n>```text\n****************\n  it's so easy\n****************\nenter the secret key: a\n```\n\n\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u4f55\u3082\u8d77\u3053\u3089\u306a\u3044\n[ida](https://www.hex-rays.com/products/ida/index.shtml)\u3067\u4e2d\u8eab\u3092\u898b\u308b\nstrings\u306bFlag is:\u3000\u3068\u3044\u3046\u6587\u5b57\u304c\u3042\u308b\u306e\u3067\u305d\u3053\u3092\u898b\u308b\n\n![kore.png](https://qiita-image-store.s3.amazonaws.com/0/60391/842466de-9460-181f-4ea2-ac1d74789be9.png)\n\n0x00401A40\u3067\u30b8\u30e3\u30f3\u30d7\u3057\u306a\u3051\u308c\u3070\u826f\u3055\u305d\u3046\n[OllyDbg](http://www.ollydbg.de/)\u3067\u898b\u308b\n\n>```text\n00401704  /$  55            PUSH EBP\n00401705  |.  89E5          MOV EBP,ESP\n00401707  |.  83EC 18       SUB ESP,18\n0040170A  |.  A1 00934800   MOV EAX,DWORD PTR DS:[<&KERNEL32.IsDebug>; |\n0040170F  |.  FFD0          CALL NEAR EAX                            ; |[IsDebuggerPresent\n00401711  |.  83F8 01       CMP EAX,1                                ; |\n00401714  |.  0F94C0        SETE AL                                  ; |\n00401717  |.  84C0          TEST AL,AL                               ; |\n00401719  |.  74 1D         JE SHORT level1.00401738                 ; |\n0040171B  |.  C70424 E80300>MOV DWORD PTR SS:[ESP],3E8               ; |\n00401722  |.  A1 38934800   MOV EAX,DWORD PTR DS:[<&KERNEL32.Sleep>] ; |\n00401727  |.  FFD0          CALL NEAR EAX                            ; \\Sleep\n00401729  |.  83EC 04       SUB ESP,4\n0040172C  |.  C70424 000000>MOV DWORD PTR SS:[ESP],0                 ; |\n00401733  |.  E8 48460100   CALL <JMP.&msvcrt.exit>                  ; \\exit\n00401738  |>  C9            LEAVE\n00401739  \\.  C3            RETN\n```\n\nIsDebuggerPresent\u304c\u3042\u308b\u306e\u3067\u9069\u5f53\u306b\u3064\u3076\u3057\n0x00401a40\u3092JNE SHORT 00401A98\u3084NOP\u306a\u3069\u306b\u3059\u308b\u3068flag\u304c\u3067\u308b\n\nFlag is :aiiajc(eik\n\n---\n###PE 2 100\u70b9\n[\u554f\u984c\u30d5\u30a1\u30a4\u30eb](https://www.dropbox.com/s/3lgvscrqjmf8kkp/binary-pe.exe?dl=0)\n\n>```text\n$file binary-pe.exe \nbinary-pe.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows\n```\n\n\u5b9f\u884c\u3059\u308b\n\n>```text\nenter the key: a\n```\n\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u4f55\u3082\u8d77\u3053\u3089\u306a\u3044\n\nida\u306estrings\u3092\u898b\u308b\n![kore.png](https://qiita-image-store.s3.amazonaws.com/0/60391/cc9a0e3e-45b2-73aa-ca80-3080ca312434.png)\n\n0x004014AC\u3053\u306ecmp\u547d\u4ee4\u304c\u3042\u3063\u3066\u3044\u308c\u3070flag\u304c\u8868\u793a\u3055\u308c\u308b\u307f\u305f\u3044\nOllyDbg\u3067\u5024\u3092\u78ba\u8a8d\u3059\u308b\n\n![kore2.png](https://qiita-image-store.s3.amazonaws.com/0/60391/768702c7-3aa6-321f-9967-29491a96d0d0.png)\n\n\u3053\u308c\u309210\u9032\u6570\u306b\u3057\u305f\u3082\u306e\u3092\u5165\u529b\n\n>```text\nenter the key: 1309495\nFlag: 1309495\n```\nFlag : 1309495\n\n---\n###PE 3 200\u70b9\n[\u554f\u984c\u30d5\u30a1\u30a4\u30eb](https://www.dropbox.com/s/n0w3yg2rsxjjtqh/bin.exe?dl=0)\n\n>```text\n$file bin.exe \nbin.exe: data\n```\n\u3068\u3044\u3046\u3053\u3068\u3067\u30d0\u30a4\u30ca\u30ea\u30a8\u30c7\u30a3\u30bf\u306b\u308c\u308b\n\n>```text\n00000000  4e 5a 90 00 03 00 00 00  04 00 00 00 ff ff 00 00  |NZ..............|\n00000010  b8 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |........@.......|\n00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 00 00 00 00  00 00 00 00 80 00 00 00  |................|\n00000040  0e 1f ba 0e 00 b4 09 cd  21 b8 01 4c cd 21 54 68  |........!..L.!Th|\n00000050  69 73 20 70 72 6f 67 72  61 6d 20 63 61 6e 6e 6f  |is program canno|\n00000060  74 20 62 65 20 72 75 6e  20 69 6e 20 44 4f 53 20  |t be run in DOS |\n00000070  6d 6f 64 65 2e 0d 0d 0a  24 00 00 00 00 00 00 00  |mode....$.......|\n00000080  50 45 00 00 4c 01 08 00  d8 3f 6b 54 00 1c 0a 00  |PE..L....?kT....|\n00000090  1a 38 00 00 e0 00 07 03  0b 01 02 17 00 be 06 00  |.8..............|\n```\n\n\u5148\u982d\u306eNZ\u3092MZ\u306b\u76f4\u3059\n\n>```text\n$file bin.exe \nbin.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows\n```\n\n\u5b9f\u884c\u3059\u308b\n\n>```text\n*****************************************\n         welcome in cairo ctf\n*****************************************\n```\n\nida\u306estrings\u3092\u898b\u308b\u3068Flag:\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\n\n>```text\n.text:00401491                 push    ebp\n.text:00401492                 mov     ebp, esp\n.text:00401494                 push    ebx\n.text:00401495                 sub     esp, 24h\n.text:00401498                 lea     eax, [ebp-11h]\n.text:0040149B                 mov     ecx, eax\n.text:0040149D                 call    nullsub_2\n.text:004014A2                 lea     eax, [ebp-18h]\n.text:004014A5                 lea     edx, [ebp-11h]\n.text:004014A8                 mov     [esp+4], edx\n.text:004014AC                 mov     dword ptr [esp], offset aFlagflag ; \"flagflag\"\n.text:004014B3                 mov     ecx, eax\n.text:004014B5                 call    sub_44473C\n.text:004014BA                 sub     esp, 8\n.text:004014BD                 lea     eax, [ebp-11h]\n.text:004014C0                 mov     ecx, eax\n.text:004014C2                 call    nullsub_3\n.text:004014C7                 lea     eax, [ebp-0Ch]\n.text:004014CA                 lea     edx, [ebp-18h]\n.text:004014CD                 mov     [esp], edx\n.text:004014D0                 mov     ecx, eax\n.text:004014D2                 call    sub_444960\n.text:004014D7                 sub     esp, 4\n.text:004014DA                 lea     eax, [ebp-10h]\n.text:004014DD                 lea     edx, [ebp-0Ch]\n.text:004014E0                 mov     [esp+4], edx\n.text:004014E4                 mov     [esp], eax\n.text:004014E7                 call    sub_4013B0\n.text:004014EC                 lea     eax, [ebp-18h]\n.text:004014EF                 lea     edx, [ebp-10h]\n.text:004014F2                 mov     [esp], edx\n.text:004014F5                 mov     ecx, eax\n.text:004014F7                 call    sub_445BC8\n.text:004014FC                 sub     esp, 4\n.text:004014FF                 lea     eax, [ebp-10h]\n.text:00401502                 mov     ecx, eax\n.text:00401504                 call    sub_445B38\n.text:00401509                 lea     eax, [ebp-0Ch]\n.text:0040150C                 mov     ecx, eax\n.text:0040150E                 call    sub_445B38\n.text:00401513                 mov     dword ptr [esp+4], offset aFlag ; \"Flag: \"\n.text:0040151B                 mov     dword ptr [esp], offset dword_472F80\n.text:00401522                 call    sub_465CE4\n.text:00401527                 lea     edx, [ebp-18h]\n.text:0040152A                 mov     [esp+4], edx\n.text:0040152E                 mov     [esp], eax\n.text:00401531                 call    sub_465F20\n.text:00401536                 mov     dword ptr [esp+4], offset asc_474075 ; \"\\n\"\n.text:0040153E                 mov     [esp], eax\n.text:00401541                 call    sub_465CE4\n.text:00401546                 lea     eax, [ebp-18h]\n.text:00401549                 mov     ecx, eax\n.text:0040154B                 call    sub_445B38\n.text:00401550                 jmp     short loc_401596\n```\n\n\u30c7\u30d0\u30c3\u30ac\u3067\u666e\u901a\u306b\u5b9f\u884c\u3057\u3066\u3044\u308b\u30680x00401491\u3053\u306e\u51e6\u7406\u306b\u5165\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u9069\u5f53\u306b\u98db\u3070\u3057\u3066\u3042\u3052\u308b\n\u81ea\u5206\u306f\u3061\u3087\u3046\u30690x004010ff\u306b\u3044\u305f\u306e\u3067\u305d\u3053\u304b\u3089\u98db\u3070\u3057\u3066\u3042\u3052\u307e\u3057\u305f\u3002\n\n>```text\n*****************************************\n         welcome in cairo ctf\n*****************************************\nFlag: galfgalf\n```\n\nFlag: galfgalf\n\n---\n###CTF KeyGen 300\u70b9(\u30d0\u30a4\u30ca\u30ea\u90e8\u5206)\n[\u554f\u984c\u30d5\u30a1\u30a4\u30eb](https://www.dropbox.com/s/46r9oqawytignq7/KeyGen.exe?dl=0)\n\n>```text\n$file KeyGen.exe \nKeyGen.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows\n```\n\n.NET\u306a\u306e\u3067\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\n[JetBrains dotPeek](https://www.jetbrains.com/decompiler/)\n\n>```csharp\nusing System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\n>namespace bruter\n{\n  internal class Program\n  {\n    public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)\n    {\n      byte[] bytes = Encoding.ASCII.GetBytes(Environment.UserName.ToLower().PadLeft(8, 'a'));\n      using (MemoryStream memoryStream = new MemoryStream())\n      {\n        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())\n        {\n          rijndaelManaged.KeySize = 256;\n          rijndaelManaged.BlockSize = 128;\n          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, bytes, 1000);\n          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);\n          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);\n          rijndaelManaged.Mode = CipherMode.CBC;\n          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))\n          {\n            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);\n            cryptoStream.Close();\n          }\n          return memoryStream.ToArray();\n        }\n      }\n    }\n\n>    public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)\n    {\n      byte[] bytes = Encoding.ASCII.GetBytes(Environment.UserName.ToLower().PadLeft(8, 'a'));\n      using (MemoryStream memoryStream = new MemoryStream())\n      {\n        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())\n        {\n          rijndaelManaged.KeySize = 256;\n          rijndaelManaged.BlockSize = 128;\n          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, bytes, 1000);\n          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);\n          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);\n          rijndaelManaged.Mode = CipherMode.CBC;\n          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))\n          {\n            cryptoStream.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);\n            cryptoStream.Close();\n          }\n          return memoryStream.ToArray();\n        }\n      }\n    }\n\n>    public static string EncryptText(string input, string password)\n    {\n      return Convert.ToBase64String(Program.AES_Encrypt(Encoding.UTF8.GetBytes(input), SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(password))));\n    }\n\n>    public static string DecryptText(string input, string password)\n    {\n      return Encoding.UTF8.GetString(Program.AES_Decrypt(Convert.FromBase64String(input), SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(password))));\n    }\n\n  >  private static void Main(string[] args)\n    {\n      string str = Environment.MachineName.ToLower().Substring(0, 3).PadRight(10, 'Z');\n      string password = str + ((int) str[0] % 2 == 0 ? \"E\" : \"O\");\n      try\n      {\n        >Console.WriteLine(Program.DecryptText(\"PUIrT3Y/JtMMnOoxew7Mj937vKbBYgVPfOL5MdQ1VgE=\", password));\n        Console.ReadLine();\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(\"Try again\");\n      }\n    }\n  }\n}\n```\n\nmain\u306b\u3042\u308b\u30de\u30b7\u30f3\u30cd\u30fc\u30e0\u3068\nAES_Decrypt\u306b\u3042\u308b\u30e6\u30fc\u30b6\u30fc\u30cd\u30fc\u30e0\u3092\u7dcf\u5f53\u308a\u3059\u308c\u3070\u30c7\u30b3\u30fc\u30c9\u3067\u304d\u305d\u3046\n\n>```csharp\nstring str = Environment.MachineName.ToLower().Substring(0, 3).PadRight(10, 'Z');\n\n\n>byte[] bytes = Encoding.ASCII.GetBytes(Environment.UserName.ToLower().PadLeft(8, 'a'));\n```\n\n\u30e6\u30fc\u30b6\u30fc\u540d\u306f\u30d0\u30a4\u30ca\u30ea\u306e\u4e2d\u306b\u66f8\u3044\u3066\u3042\u308b\n\n>```text\nC:\\Users\\Adham\\Documents\\CTF\\bruter\\bruter\\obj\\x86\\Release\\bruter.pdb\n```\n\n\u9069\u5f53\u306b\u30de\u30b7\u30fc\u30f3\u540d\u3060\u3051\u7dcf\u5f53\u308a\n\u30de\u30b7\u30f3\u30cd\u30fc\u30e0\u5148\u982d ozi\u3000\u306e\u3068\u304d\u306b\u3046\u307e\u304f\u30c7\u30b3\u30fc\u30c9\u3067\u304d\u305f\nFlag: IWISHCTFSHADKEYGENS\n\n---\n\nPE4\u306f\u89e3\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n[\u554f\u984c\u30d5\u30a1\u30a4\u30eb](https://www.dropbox.com/s/t85t2aqq03u6qig/binary404.exe?dl=0)\n\n---\nExploit 1\u3000\u3082\u89e3\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n[\u554f\u984c\u30d5\u30a1\u30a4\u30eb](https://www.dropbox.com/s/guybo6d50zdj4gm/server.elf?dl=0)\n\n178.63.58.69 3016 \nusr: ctf, pass: canyoudoit \nflag in /home/flag/flag.txt\n\n---\n\n", "tags": ["CTF"]}