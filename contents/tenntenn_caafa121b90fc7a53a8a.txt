{"context": "\n\n\u306f\u3058\u3081\u306b\ngo test\uff08GAE/Go\u306e\u5834\u5408\u306fgoapp test\uff09\u3067\u3001\u81ea\u8eab\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u308b\u969b\u3001\u975e\u5e38\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u304c\u5104\u52ab\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u7279\u306bGAE\u3060\u3068aetest\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\nGAE/Go\u306e\u30c6\u30b9\u30c8\u3092\u65e9\u304f\u3059\u308b\u306b\u306f\u3001favclip/testerator\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f7f\u3044\u307e\u308f\u3059\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u305d\u308c\u3067\u3082\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001\u3069\u3046\u306b\u304b\u66f4\u65b0\u306e\u3042\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u95a2\u308f\u308b\u30c6\u30b9\u30c8\u3060\u3051\u5b9f\u884c\u3067\u304d\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u3067\u306fgit\u306a\u3069\u3092\u4f7f\u3063\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3057\u3066\u3044\u308b\u524d\u63d0\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u304a\u305d\u3089\u304f\u3061\u3083\u3093\u3068\u52d5\u304f\u3060\u308d\u3046\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001\u307e\u3060\u691c\u8a3c\u4e2d\u306a\u306e\u3067\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u524d\u306b\u306f\u3001\u3061\u3083\u3093\u3068\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3092\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\u3002\n\ncoverprofile\u3092\u4f7f\u3046\ngo test\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u3001-coverprofile\u3068\u3044\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u6307\u5b9a\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30c6\u30b9\u30c8\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u89e3\u6790\u7d50\u679c\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001fmt\u30d1\u30c3\u30b1\u30fc\u30b8\u306ecoverprofile\u3092\u51fa\u529b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ go version\ngo version go1.6.2 darwin/amd64\n$ go test -coverprofile=~/Desktop/coverprofile fmt\nok      fmt     0.115s  coverage: 92.3% of statements\n$ head ~/Desktop/coverprofile\nmode: set\nfmt/format.go:30.13,31.29 1 1\nfmt/format.go:31.29,34.3 2 1\nfmt/format.go:67.28,69.2 1 1\nfmt/format.go:71.33,74.2 2 1\nfmt/format.go:77.85,80.11 3 1\nfmt/format.go:84.2,85.11 2 1\nfmt/format.go:96.2,96.8 1 1\nfmt/format.go:80.11,83.3 2 0\nfmt/format.go:85.11,86.21 1 1\n\n\u3053\u308c\u3092\u898b\u308b\u3068\u30012\u884c\u76ee\u4ee5\u964d\u306f\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u3069\u306e\u90e8\u5206\u3092\u4f55\u56de\u901a\u3063\u305f\u304b\u3068\u3044\u3046\u60c5\u5831\u306e\u3088\u3046\u3067\u3059\uff08\u53c2\u8003\uff09\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u51e6\u7406\u306f\u518d\u5e30\u7684\u306b\u306f\u3067\u304d\u305a\u30011\u3064\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5bfe\u3057\u30661\u56de\u305a\u3064go test -coverprofile\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u6570\u3060\u3051coverprofile\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\u3053\u306ecoverprofile\u3092go tool cover\u3092\u4f7f\u3063\u3066\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u53ef\u8996\u5316\u3059\u308b\u65b9\u6cd5\u306f\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u3088\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306ecoverprofile\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u691c\u7d22\u3059\u308c\u3070\u3001\u5dee\u5206\u306e\u3042\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u30c6\u30b9\u30c8\u3060\u3051\u8d70\u3089\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u306f\uff1f\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u3064\u307e\u308a\u3001\n\n\u4e88\u3081\u3001\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u3059\u3079\u3066\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5bfe\u3057\u3066coverprofile\u3092\u4f5c\u6210\u3059\u308b\n\n.go\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\uff08\u901a\u5e38\u306e\u958b\u767a\uff09\n\u3059\u3079\u3066\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306ecoverprofile\u306e\u4e2d\u304b\u3089\u7de8\u96c6\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u304b\u691c\u7d22\u3059\u308b\n\u7de8\u96c6\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306b_test.go\u304c\u3042\u308c\u3070\u305d\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3082\u5bfe\u8c61\u306b\u3059\u308b\n\u30d2\u30c3\u30c8\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u306ecoverprofile\u3092\u4f5c\u6210\u3059\u308b\n\n\u306e\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u3059\u308b\u5ea6\u306bcoverprofile\u3092\u66f4\u65b0\u3057\u3066\u3044\u3051\u3070\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3060\u3051\u30c6\u30b9\u30c8\u3055\u308c\u308b\u3068\u3044\u3046\u8a33\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\ncoverprofile\u306e\u4f5c\u6210\n\u307e\u305a\u306f\u5404\u30d1\u30c3\u30b1\u30fc\u30b8\u306ecoverprofile\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u4e0a\u8ff0\u306e\u3068\u304a\u308a1\u30d1\u30c3\u30b1\u30fc\u30b8\u305a\u3064\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n$PJROOT\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306esrc\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u3057\u3066\u5834\u5408\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30a7\u30eb\u3092\u5b9f\u884c\u3059\u308c\u3070OK\u3067\u3059\u3002\n\u5404\u30d1\u30c3\u30b1\u30fc\u30b8\u306ecoverprofile\u306f\u5404\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\nfor PKG in `find $PJROOT -type d`\ndo\n    goapp test -coverprofile=$PJROOT/$PKG/coverprofile $PKG\ndone\n\n\u3053\u3053\u3067\u306f\u3001\u4f5c\u6210\u3057\u305fcoverprofile\u3092git\u3067\u30b3\u30df\u30c3\u30c8\u3057\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306b\u8f09\u305b\u308b\u524d\u63d0\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e8b\u60c5\u3067\u30b3\u30df\u30c3\u30c8\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u3001.gitignore\u306b\u5165\u308c\u3066\u3001\u624b\u5143\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3059\u308b\u305f\u3073\u306b\u3001\u5909\u66f4\u306e\u3042\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u306b\u4f9d\u5b58\u3059\u308bcoverprofile\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\ncoverprofile\u304b\u3089\u306e\u691c\u7d22\ncoverprofile\u304b\u3089\u306e\u691c\u7d22\u306f\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\u5c11\u3057\u9577\u3044\u3067\u3059\u304c\u3001\u3056\u3063\u3068\u6bb4\u308a\u66f8\u3044\u305f\u3082\u306e\u3092\u4ee5\u4e0b\u306b\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\ndeppkg.go\npackage main\n\nimport (\n    \"bufio\"\n    \"bytes\"\n    \"flag\"\n    \"fmt\"\n    \"go/build\"\n    \"io/ioutil\"\n    \"os\"\n    \"path/filepath\"\n    \"strings\"\n)\n\nvar (\n    pjroot  string\n    profile string\n)\n\nfunc init() {\n    flag.StringVar(&pjroot, \"pjroot\", \".\", \"project root\")\n    flag.StringVar(&profile, \"profile\", \"coverprofile\", \"coverprofile file name\")\n}\n\n// files \u306f.go\u30d5\u30a1\u30a4\u30eb\u3068_test.go\u30d5\u30a1\u30a4\u30eb\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nfunc files() (gofiles, testfiles []string) {\n    for _, f := range flag.Args() {\n        if filepath.Ext(f) != \".go\" {\n            continue\n        }\n\n        if strings.HasSuffix(f, \"_test.go\") {\n            testfiles = append(testfiles, f)\n        } else {\n            gofiles = append(gofiles, f)\n        }\n    }\n    return\n}\n\n// DependencyFinder \u306f\u4efb\u610f\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f9d\u5b58\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u63a2\u3059\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\ntype DependencyFinder struct {\n    pkgs         map[string]bool\n    testfiles    []string\n    gofiles      []string\n    profiles     []string\n    pjroot       string\n    coverprofile string\n    pfs          map[string]*bytes.Buffer\n}\n\n// NewDependencyFinder \u306f\u65b0\u3057\u3044 DependencyFinder \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nfunc NewDependencyFinder(pjroot, coverprofile string, gofiles, testfiles []string) *DependencyFinder {\n    return &DependencyFinder{\n        pkgs:         map[string]bool{},\n        testfiles:    testfiles,\n        gofiles:      gofiles,\n        pjroot:       pjroot,\n        coverprofile: coverprofile,\n    }\n}\n\n// packageFromTestFiles \u306f\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u305d\u306e\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u3068\u3057\u3066\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) fromTestFiles() {\n\n    for _, tf := range df.testfiles {\n        path, err := filepath.Abs(tf)\n        if err != nil {\n            continue\n        }\n        dir := filepath.Dir(path)\n\n        pkg, err := build.ImportDir(dir, build.FindOnly|build.IgnoreVendor)\n        if err != nil {\n            continue\n        }\n\n        df.pkgs[pkg.ImportPath] = true\n    }\n}\n\n// findProfiles \u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u63a2\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) findProfiles() error {\n    return filepath.Walk(df.pjroot, func(path string, info os.FileInfo, err error) error {\n        if err != nil {\n            return err\n        }\n\n        if !info.IsDir() && info.Name() == df.coverprofile {\n            f, err := filepath.Rel(df.pjroot, path)\n            if err != nil {\n                return err\n            }\n            df.profiles = append(df.profiles, f)\n        }\n        return nil\n    })\n}\n\n// fromProfiles \u306f coverprofile \u304b\u3089\u6307\u5b9a\u3057\u305f.go\u30d5\u30a1\u30a4\u30eb\u304c\u4f9d\u5b58\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) fromProfiles() error {\n\n    df.pfs = map[string]*bytes.Buffer{}\n    for _, gofile := range df.gofiles {\n        for _, profile := range df.profiles {\n            gf, err := filepath.Rel(df.pjroot, gofile)\n            if err != nil {\n                return err\n            }\n\n            pkg, err := df.dependPackage(gf, profile)\n            if err != nil {\n                return err\n            }\n\n            if pkg != \"\" {\n                df.pkgs[pkg] = true\n            }\n        }\n    }\n\n    return nil\n}\n\n// dependPackage \u306f coverprofile \u306b\u6307\u5b9a\u3057\u305fGo\u30d5\u30a1\u30a4\u30eb\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u53d6\u5f97\u3057\u307e\u3059\u3002\n// \u4f9d\u5b58\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) dependPackage(gf, pf string) (string, error) {\n    buf, ok := df.pfs[pf]\n    if !ok {\n        b, err := ioutil.ReadFile(filepath.Join(df.pjroot, pf))\n        if err != nil {\n            return \"\", err\n        }\n        buf = bytes.NewBuffer(b)\n        df.pfs[pf] = buf\n    }\n\n    defer buf.Reset()\n\n    s := bufio.NewScanner(buf)\n    for s.Scan() {\n        if strings.Contains(s.Text(), gf) {\n            pkg := filepath.Dir(pf)\n            return pkg, nil\n        }\n    }\n\n    return \"\", s.Err()\n}\n\n// Find \u306fGo\u30d5\u30a1\u30a4\u30eb\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) Find() ([]string, error) {\n\n    df.fromTestFiles()\n\n    if err := df.findProfiles(); err != nil {\n        return nil, err\n    }\n\n    if err := df.fromProfiles(); err != nil {\n        return nil, err\n    }\n\n    var pkgs []string\n    for pkg := range df.pkgs {\n        pkgs = append(pkgs, pkg)\n    }\n\n    return pkgs, nil\n}\n\nfunc main() {\n    flag.Parse()\n\n    gofiles, testfiles := files()\n\n    df := NewDependencyFinder(pjroot, profile, gofiles, testfiles)\n    pkgs, err := df.Find()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error: %v\", err)\n        os.Exit(1)\n    }\n\n    for _, pkg := range pkgs {\n        fmt.Println(pkg)\n    }\n}\n\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u306f\u3001git diff\u306a\u3069\u304b\u3089\u6e21\u3055\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u6e21\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u306e\u3046\u3061.go\u3068_test.go\u3092\u5bfe\u8c61\u306b\u3001\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e00\u89a7\u3092\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u3001GOPATH\u76f4\u4e0b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306esrc\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3068coverprofile\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6e21\u3057\u307e\u3059\u3002\ncoverprofile\u306f\u5404\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u3042\u308b\u524d\u63d0\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\u30d3\u30eb\u30c9\u306f\u666e\u901a\u306bgo build\u3067\u3067\u304d\u307e\u3059\u3002\n$ go build -o deppkg deppkg.go\n\n\n\u5dee\u5206\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\n\u4f5c\u6210\u3057\u305f\u30c4\u30fc\u30eb\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u53d6\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bgit diff --name-only\u306e\u7d50\u679c\u3092\u30d1\u30a4\u30d7\u3067\u6e21\u3059\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n$ git diff --name-only | deppkg -pjroot=$PJROOT\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u6a19\u6e96\u51fa\u529b\u306b\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u3055\u3089\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30a7\u30eb\u3092\u66f8\u3044\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059\u3002\n\u3053\u308c\u3092git\u306epre-commit\u30d5\u30c3\u30af\u306b\u4ed5\u639b\u3051\u3066\u304a\u3051\u3070\u3001\u30b3\u30df\u30c3\u30c8\u3059\u308b\u524d\u306b\u30c6\u30b9\u30c8\u304c\u3067\u304d\u3066\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u306a\u304a\u3001GAE\u306e\u5834\u5408\u306f\u3001go test\u306e\u3068\u3053\u308d\u3092goapp test\u306b\u7f6e\u304d\u63db\u3048\u3066\u4e0b\u3055\u3044\u3002\n#!/bin/sh\n\nPJROOT=`dirname $0`/src\nDEPPKG=`which deppkg`\n\nfor PKG in `git diff --name-only HEAD | xargs deppkg -pjroot $PJROOT`\ndo\n    echo \"start test for $PKG\"\n    go test -coverprofile=$PJROOT/$PKG/coverprofile $PKG\n    if [ $? != 0 ]; then\n        exit 1\n    fi\ndone\n\ncoverprofile\u3092\u30b3\u30df\u30c3\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001pull\u3059\u308b\u5ea6\u306b\u4e0a\u8a18\u306e\u30b7\u30a7\u30eb\u3092\u4f7f\u3063\u3066coverprofile\u3092\u66f4\u65b0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u304a\u308f\u308a\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001coverprofile\u3092\u4f7f\u3063\u305f\u5dee\u5206\u306e\u3042\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3092\u30c6\u30b9\u30c8\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\nGAE/Go\u306e\u30c6\u30b9\u30c8\u304c\u9045\u304f\u3066\u60a9\u3093\u3067\u308b\u65b9\u306e\u5c11\u3057\u3067\u3082\u304a\u5f79\u306b\u7acb\u3066\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306e\u4fee\u6b63\u3057\u305f\u3068\u304d\u306b\u30c6\u30b9\u30c8\u304c\u6f0f\u308c\u308b\u305e\u3068\u3044\u3046\u6307\u6458\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u3067\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u306f\u3058\u3081\u306b\n\n`go test`\uff08GAE/Go\u306e\u5834\u5408\u306f`goapp test`\uff09\u3067\u3001\u81ea\u8eab\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u308b\u969b\u3001\u975e\u5e38\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u304c\u5104\u52ab\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u7279\u306bGAE\u3060\u3068`aetest`\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\nGAE/Go\u306e\u30c6\u30b9\u30c8\u3092\u65e9\u304f\u3059\u308b\u306b\u306f\u3001[favclip/testerator](https://github.com/favclip/testerator)\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f7f\u3044\u307e\u308f\u3059\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u305d\u308c\u3067\u3082\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001\u3069\u3046\u306b\u304b\u66f4\u65b0\u306e\u3042\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u95a2\u308f\u308b\u30c6\u30b9\u30c8\u3060\u3051\u5b9f\u884c\u3067\u304d\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u3067\u306f`git`\u306a\u3069\u3092\u4f7f\u3063\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3057\u3066\u3044\u308b\u524d\u63d0\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u304a\u305d\u3089\u304f\u3061\u3083\u3093\u3068\u52d5\u304f\u3060\u308d\u3046\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001\u307e\u3060\u691c\u8a3c\u4e2d\u306a\u306e\u3067\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u524d\u306b\u306f\u3001\u3061\u3083\u3093\u3068\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3092\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\u3002\n\n## coverprofile\u3092\u4f7f\u3046\n\n`go test`\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u3001`-coverprofile`\u3068\u3044\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u6307\u5b9a\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30c6\u30b9\u30c8\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u89e3\u6790\u7d50\u679c\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001`fmt`\u30d1\u30c3\u30b1\u30fc\u30b8\u306e`coverprofile`\u3092\u51fa\u529b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\n$ go version\ngo version go1.6.2 darwin/amd64\n$ go test -coverprofile=~/Desktop/coverprofile fmt\nok      fmt     0.115s  coverage: 92.3% of statements\n$ head ~/Desktop/coverprofile\nmode: set\nfmt/format.go:30.13,31.29 1 1\nfmt/format.go:31.29,34.3 2 1\nfmt/format.go:67.28,69.2 1 1\nfmt/format.go:71.33,74.2 2 1\nfmt/format.go:77.85,80.11 3 1\nfmt/format.go:84.2,85.11 2 1\nfmt/format.go:96.2,96.8 1 1\nfmt/format.go:80.11,83.3 2 0\nfmt/format.go:85.11,86.21 1 1\n```\n\n\u3053\u308c\u3092\u898b\u308b\u3068\u30012\u884c\u76ee\u4ee5\u964d\u306f\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u3069\u306e\u90e8\u5206\u3092\u4f55\u56de\u901a\u3063\u305f\u304b\u3068\u3044\u3046\u60c5\u5831\u306e\u3088\u3046\u3067\u3059\uff08[\u53c2\u8003](https://github.com/golang/go/blob/master/src/cmd/cover/profile.go#L56)\uff09\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u51e6\u7406\u306f\u518d\u5e30\u7684\u306b\u306f\u3067\u304d\u305a\u30011\u3064\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5bfe\u3057\u30661\u56de\u305a\u3064`go test -coverprofile`\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u6570\u3060\u3051`coverprofile`\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\n\u3053\u306e`coverprofile`\u3092`go tool cover`\u3092\u4f7f\u3063\u3066\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u53ef\u8996\u5316\u3059\u308b\u65b9\u6cd5\u306f\u3001[\u3053\u3061\u3089\u306e\u8a18\u4e8b](https://blog.golang.org/cover)\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u3088\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u306e`coverprofile`\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u691c\u7d22\u3059\u308c\u3070\u3001\u5dee\u5206\u306e\u3042\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u30c6\u30b9\u30c8\u3060\u3051\u8d70\u3089\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u306f\uff1f\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u3064\u307e\u308a\u3001\n\n1. \u4e88\u3081\u3001\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u3059\u3079\u3066\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5bfe\u3057\u3066`coverprofile`\u3092\u4f5c\u6210\u3059\u308b\n2. `.go`\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\uff08\u901a\u5e38\u306e\u958b\u767a\uff09\n3. \u3059\u3079\u3066\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e`coverprofile`\u306e\u4e2d\u304b\u3089\u7de8\u96c6\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u304b\u691c\u7d22\u3059\u308b\n4. \u7de8\u96c6\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306b`_test.go`\u304c\u3042\u308c\u3070\u305d\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3082\u5bfe\u8c61\u306b\u3059\u308b\n5. \u30d2\u30c3\u30c8\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u306e`coverprofile`\u3092\u4f5c\u6210\u3059\u308b\n\n\u306e\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u3059\u308b\u5ea6\u306b`coverprofile`\u3092\u66f4\u65b0\u3057\u3066\u3044\u3051\u3070\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3060\u3051\u30c6\u30b9\u30c8\u3055\u308c\u308b\u3068\u3044\u3046\u8a33\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n## coverprofile\u306e\u4f5c\u6210\n\n\u307e\u305a\u306f\u5404\u30d1\u30c3\u30b1\u30fc\u30b8\u306e`coverprofile`\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u4e0a\u8ff0\u306e\u3068\u304a\u308a1\u30d1\u30c3\u30b1\u30fc\u30b8\u305a\u3064\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n`$PJROOT`\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e`src`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u3057\u3066\u5834\u5408\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30a7\u30eb\u3092\u5b9f\u884c\u3059\u308c\u3070OK\u3067\u3059\u3002\n\u5404\u30d1\u30c3\u30b1\u30fc\u30b8\u306e`coverprofile`\u306f\u5404\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\n```\nfor PKG in `find $PJROOT -type d`\ndo\n\tgoapp test -coverprofile=$PJROOT/$PKG/coverprofile $PKG\ndone\n```\n\n\u3053\u3053\u3067\u306f\u3001\u4f5c\u6210\u3057\u305f`coverprofile`\u3092`git`\u3067\u30b3\u30df\u30c3\u30c8\u3057\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306b\u8f09\u305b\u308b\u524d\u63d0\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e8b\u60c5\u3067\u30b3\u30df\u30c3\u30c8\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u3001`.gitignore`\u306b\u5165\u308c\u3066\u3001\u624b\u5143\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3059\u308b\u305f\u3073\u306b\u3001\u5909\u66f4\u306e\u3042\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u306b\u4f9d\u5b58\u3059\u308b`coverprofile`\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n## coverprofile\u304b\u3089\u306e\u691c\u7d22\n\n`coverprofile`\u304b\u3089\u306e\u691c\u7d22\u306f\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\u5c11\u3057\u9577\u3044\u3067\u3059\u304c\u3001\u3056\u3063\u3068\u6bb4\u308a\u66f8\u3044\u305f\u3082\u306e\u3092\u4ee5\u4e0b\u306b\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n```deppkg.go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"flag\"\n\t\"fmt\"\n\t\"go/build\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nvar (\n\tpjroot  string\n\tprofile string\n)\n\nfunc init() {\n\tflag.StringVar(&pjroot, \"pjroot\", \".\", \"project root\")\n\tflag.StringVar(&profile, \"profile\", \"coverprofile\", \"coverprofile file name\")\n}\n\n// files \u306f.go\u30d5\u30a1\u30a4\u30eb\u3068_test.go\u30d5\u30a1\u30a4\u30eb\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nfunc files() (gofiles, testfiles []string) {\n\tfor _, f := range flag.Args() {\n\t\tif filepath.Ext(f) != \".go\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tif strings.HasSuffix(f, \"_test.go\") {\n\t\t\ttestfiles = append(testfiles, f)\n\t\t} else {\n\t\t\tgofiles = append(gofiles, f)\n\t\t}\n\t}\n\treturn\n}\n\n// DependencyFinder \u306f\u4efb\u610f\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f9d\u5b58\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u63a2\u3059\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\ntype DependencyFinder struct {\n\tpkgs         map[string]bool\n\ttestfiles    []string\n\tgofiles      []string\n\tprofiles     []string\n\tpjroot       string\n\tcoverprofile string\n\tpfs          map[string]*bytes.Buffer\n}\n\n// NewDependencyFinder \u306f\u65b0\u3057\u3044 DependencyFinder \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nfunc NewDependencyFinder(pjroot, coverprofile string, gofiles, testfiles []string) *DependencyFinder {\n\treturn &DependencyFinder{\n\t\tpkgs:         map[string]bool{},\n\t\ttestfiles:    testfiles,\n\t\tgofiles:      gofiles,\n\t\tpjroot:       pjroot,\n\t\tcoverprofile: coverprofile,\n\t}\n}\n\n// packageFromTestFiles \u306f\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u305d\u306e\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u3068\u3057\u3066\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) fromTestFiles() {\n\n\tfor _, tf := range df.testfiles {\n\t\tpath, err := filepath.Abs(tf)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tdir := filepath.Dir(path)\n\n\t\tpkg, err := build.ImportDir(dir, build.FindOnly|build.IgnoreVendor)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tdf.pkgs[pkg.ImportPath] = true\n\t}\n}\n\n// findProfiles \u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u63a2\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) findProfiles() error {\n\treturn filepath.Walk(df.pjroot, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !info.IsDir() && info.Name() == df.coverprofile {\n\t\t\tf, err := filepath.Rel(df.pjroot, path)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdf.profiles = append(df.profiles, f)\n\t\t}\n\t\treturn nil\n\t})\n}\n\n// fromProfiles \u306f coverprofile \u304b\u3089\u6307\u5b9a\u3057\u305f.go\u30d5\u30a1\u30a4\u30eb\u304c\u4f9d\u5b58\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) fromProfiles() error {\n\n\tdf.pfs = map[string]*bytes.Buffer{}\n\tfor _, gofile := range df.gofiles {\n\t\tfor _, profile := range df.profiles {\n\t\t\tgf, err := filepath.Rel(df.pjroot, gofile)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tpkg, err := df.dependPackage(gf, profile)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif pkg != \"\" {\n\t\t\t\tdf.pkgs[pkg] = true\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// dependPackage \u306f coverprofile \u306b\u6307\u5b9a\u3057\u305fGo\u30d5\u30a1\u30a4\u30eb\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u53d6\u5f97\u3057\u307e\u3059\u3002\n// \u4f9d\u5b58\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) dependPackage(gf, pf string) (string, error) {\n\tbuf, ok := df.pfs[pf]\n\tif !ok {\n\t\tb, err := ioutil.ReadFile(filepath.Join(df.pjroot, pf))\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tbuf = bytes.NewBuffer(b)\n\t\tdf.pfs[pf] = buf\n\t}\n\n\tdefer buf.Reset()\n\n\ts := bufio.NewScanner(buf)\n\tfor s.Scan() {\n\t\tif strings.Contains(s.Text(), gf) {\n\t\t\tpkg := filepath.Dir(pf)\n\t\t\treturn pkg, nil\n\t\t}\n\t}\n\n\treturn \"\", s.Err()\n}\n\n// Find \u306fGo\u30d5\u30a1\u30a4\u30eb\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (df *DependencyFinder) Find() ([]string, error) {\n\n\tdf.fromTestFiles()\n\n\tif err := df.findProfiles(); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := df.fromProfiles(); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar pkgs []string\n\tfor pkg := range df.pkgs {\n\t\tpkgs = append(pkgs, pkg)\n\t}\n\n\treturn pkgs, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tgofiles, testfiles := files()\n\n\tdf := NewDependencyFinder(pjroot, profile, gofiles, testfiles)\n\tpkgs, err := df.Find()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfor _, pkg := range pkgs {\n\t\tfmt.Println(pkg)\n\t}\n}\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u306f\u3001`git diff`\u306a\u3069\u304b\u3089\u6e21\u3055\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u6e21\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u306e\u3046\u3061`.go`\u3068`_test.go`\u3092\u5bfe\u8c61\u306b\u3001\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e00\u89a7\u3092\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u3001`GOPATH`\u76f4\u4e0b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e`src`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3068`coverprofile`\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6e21\u3057\u307e\u3059\u3002\n`coverprofile`\u306f\u5404\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u3042\u308b\u524d\u63d0\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n\u30d3\u30eb\u30c9\u306f\u666e\u901a\u306b`go build`\u3067\u3067\u304d\u307e\u3059\u3002\n\n```\n$ go build -o deppkg deppkg.go\n```\n\n\n## \u5dee\u5206\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\n\n\u4f5c\u6210\u3057\u305f\u30c4\u30fc\u30eb\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u53d6\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b`git diff --name-only`\u306e\u7d50\u679c\u3092\u30d1\u30a4\u30d7\u3067\u6e21\u3059\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n```\n$ git diff --name-only | deppkg -pjroot=$PJROOT\n```\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u6a19\u6e96\u51fa\u529b\u306b\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u3055\u3089\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30a7\u30eb\u3092\u66f8\u3044\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059\u3002\n\u3053\u308c\u3092`git`\u306e`pre-commit`\u30d5\u30c3\u30af\u306b\u4ed5\u639b\u3051\u3066\u304a\u3051\u3070\u3001\u30b3\u30df\u30c3\u30c8\u3059\u308b\u524d\u306b\u30c6\u30b9\u30c8\u304c\u3067\u304d\u3066\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u306a\u304a\u3001GAE\u306e\u5834\u5408\u306f\u3001`go test`\u306e\u3068\u3053\u308d\u3092`goapp test`\u306b\u7f6e\u304d\u63db\u3048\u3066\u4e0b\u3055\u3044\u3002\n\n```\n#!/bin/sh\n\nPJROOT=`dirname $0`/src\nDEPPKG=`which deppkg`\n\nfor PKG in `git diff --name-only HEAD | xargs deppkg -pjroot $PJROOT`\ndo\n    echo \"start test for $PKG\"\n    go test -coverprofile=$PJROOT/$PKG/coverprofile $PKG\n    if [ $? != 0 ]; then\n        exit 1\n    fi\ndone\n```\n\n`coverprofile`\u3092\u30b3\u30df\u30c3\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`pull`\u3059\u308b\u5ea6\u306b\u4e0a\u8a18\u306e\u30b7\u30a7\u30eb\u3092\u4f7f\u3063\u3066`coverprofile`\u3092\u66f4\u65b0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u304a\u308f\u308a\u306b\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001`coverprofile`\u3092\u4f7f\u3063\u305f\u5dee\u5206\u306e\u3042\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3092\u30c6\u30b9\u30c8\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\nGAE/Go\u306e\u30c6\u30b9\u30c8\u304c\u9045\u304f\u3066\u60a9\u3093\u3067\u308b\u65b9\u306e\u5c11\u3057\u3067\u3082\u304a\u5f79\u306b\u7acb\u3066\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306e\u4fee\u6b63\u3057\u305f\u3068\u304d\u306b\u30c6\u30b9\u30c8\u304c\u6f0f\u308c\u308b\u305e\u3068\u3044\u3046\u6307\u6458\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u3067\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["GAE", "Go", "GoogleCloudPlatform"]}