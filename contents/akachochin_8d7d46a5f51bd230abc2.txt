{"tags": ["Linux", "kernel"], "context": "\n\n\u306f\u3058\u3081\u306b\nLinux\u306e\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u30de\u30c3\u30d7\u5468\u8fba\u306e\u77e5\u8b58\u304c\u3001\u610f\u5916\u3068\u3042\u3084\u3075\u3084\u306a\u7b87\u6240\u304c\u3042\u3063\u305f\u306e\u3067\u78ba\u8a8d\u3057\u305f\u3044\u3068\u601d\u3063\u305f\u3053\u3068\u3001\u305d\u306e\u4ed6\u306b\u3082\u8af8\u3005\u306e\u76ee\u7684\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u306e\u70b9\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u7279\u306b\u8a18\u8f09\u306e\u306a\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306b\u5f93\u3044\u307e\u3059\u3002\n\n\n\n\u9805\u76ee\n\u5024\n\n\n\n\nLinux\u30d0\u30fc\u30b8\u30e7\u30f3\n4.9\n\n\nCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\narm\n\n\n\u5b9f\u884c\u5f62\u5f0f\u30d5\u30a1\u30a4\u30eb\nELF32\n\n\n\n\n.text, .data, \u30e6\u30fc\u30b6\u7a7a\u9593\u306e\u30b9\u30bf\u30c3\u30af\n.text, .data\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u751f\u6210\u306fexec()\u306e\u51e6\u7406\u306e\u4e00\u74b0\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u308b\u306e\u306f\u3001\u4ee5\u4e0bdo_execveat_common()\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308b2\u3064\u306e\u95a2\u6570bprm_mm_init()\u3068exec_binprm()\u3067\u3059\u3002\n\nfs/exec.c\n/*\n * sys_execve() executes a new program.\n */\nstatic int do_execveat_common(int fd, struct filename *filename,\n                  struct user_arg_ptr argv,\n                  struct user_arg_ptr envp,\n                  int flags)\n{\n    /* \u7565 */\n    retval = bprm_mm_init(bprm);\n    if (retval)\n        goto out_unmark;\n    /* \u7565 */\n    retval = exec_binprm(bprm);\n    if (retval < 0)\n        goto out;\n\n\n\u307e\u305a\u6700\u521d\u306bbprm_mm_init()\u3092\u898b\u307e\u3059\u3002\n\nfs/exec.c\nstatic int bprm_mm_init(struct linux_binprm *bprm)\n{\n    /* \u7565 */\n    /* \u5b9f\u884c\u5f62\u5f0f\u30d5\u30a1\u30a4\u30eb\u4f9d\u5b58\u306e\u521d\u671f\u5316\u3002\u4eca\u56de\u898b\u308b\u306e\u306f\u3053\u3063\u3061 */\n    err = __bprm_mm_init(bprm);\n    if (err)\n        goto err;\n\n    return 0;\n\n\n\u5b9f\u8cea\u7684\u306a\u51e6\u7406\u306f\u3001__bprm_mm_init()\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\u5b9f\u306f\u3001__bprm_mm_init()\u3067\u306f\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u69cb\u7bc9\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\n\nfs/exec.c\nstatic int __bprm_mm_init(struct linux_binprm *bprm)\n{\n    bprm->vma = vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);\n    /* \u7565 */\n    /*\n     * Place the stack at the largest stack address the architecture\n     * supports. Later, we'll move this to an appropriate place. We don't\n     * use STACK_TOP because that can depend on attributes which aren't\n     * configured yet.\n     */\n    BUILD_BUG_ON(VM_STACK_FLAGS & VM_STACK_INCOMPLETE_SETUP);\n    vma->vm_end = STACK_TOP_MAX;\n    vma->vm_start = vma->vm_end - PAGE_SIZE;\n    vma->vm_flags = VM_SOFTDIRTY | VM_STACK_FLAGS | VM_STACK_INCOMPLETE_SETUP;\n    vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);\n    INIT_LIST_HEAD(&vma->anon_vma_chain);\n\n    err = insert_vm_struct(mm, vma);\n    if (err)\n        goto err;\n\n    mm->stack_vm = mm->total_vm = 1;\n\n\n\u7e70\u308a\u8fd4\u3057\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u5b9f\u65bd\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\u5411\u3051\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f5c\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u6642\u70b9\u3067\u306f\u3001\u81ea\u30d7\u30ed\u30bb\u30b9\u306b\u8a72\u5f53\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u8a2d\u5b9a\u306f\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u3002\n\nSTACK_TOP_MAX\u3000- \u30e6\u30fc\u30b6\u30b9\u30bf\u30c3\u30af\u306e\u5e95\u306e\u30a2\u30c9\u30ec\u30b9 -\nvm_end(\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\u306e\u672b\u5c3e\u9818\u57df)\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308bSTACK_TOP_MAX\u306f\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\narch/arm/include/asm/processor.h\n#ifdef __KERNEL__\n#define STACK_TOP   ((current->personality & ADDR_LIMIT_32BIT) ? \\\n             TASK_SIZE : TASK_SIZE_26)\n#define STACK_TOP_MAX   TASK_SIZE\n#endif\n\n\n\narch/arm/include/asm/memory.h\n#ifdef CONFIG_MMU\n\n/*\n * TASK_SIZE - the maximum size of a user space task.\n * TASK_UNMAPPED_BASE - the lower boundary of the mmap VM area\n */\n#define TASK_SIZE       (UL(CONFIG_PAGE_OFFSET) - UL(SZ_16M))\n\n\nPAGE_OFFSET\u3068\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u30a4\u30e1\u30fc\u30b8\u304c\u7f6e\u304b\u308c\u308b\u9818\u57df\u306e\u5148\u982d\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3067\u3059\u3002\u53b3\u5bc6\u306b\u306f\u7570\u306a\u308b\u306e\u3067\u3059\u304c\u3001\u30a4\u30e1\u30fc\u30b8\u306e\u5bb9\u6613\u3055\u3092\u512a\u5148\u3055\u305b\u308b\u5834\u5408\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3068\u8003\u3048\u3066\u3082\u5dee\u3057\u652f\u3048\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u5b9a\u7fa9\u306e\u540d\u524d\u304b\u3089\u3001\u610f\u5473\u304c\u60f3\u50cf\u3057\u306b\u304f\u3044\u306e\u3067\u6ce8\u610f\u3067\u3059\u3002\narm\u306e\u5834\u5408\u3001\u305d\u306e\u5024\u306fKconfig\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002(\u3053\u3053\u3067\u6c7a\u307e\u3063\u305f\u5024\u304c\u3001CONFIG_PAGE_OFFSET\u306b\u306a\u308a\u307e\u3059)\u3002\n\narch/arm/Kconfig\nconfig PAGE_OFFSET\n    hex  \n    default PHYS_OFFSET if !MMU \n    default 0x40000000 if VMSPLIT_1G\n    default 0x80000000 if VMSPLIT_2G\n    default 0xB0000000 if VMSPLIT_3G_OPT\n    default 0xC0000000\n\n\n\u306a\u304a\u3001\u3053\u306e\u6587\u7ae0\u5185\u3067\u306f\u3001PAGE_OFFSET\u306e\u5024\u30920xc0000000\u3068\u3057\u307e\u3059\u3002\n\u8a71\u3092\u623b\u3057\u307e\u3059\u3002\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305f\u3053\u3068\u304b\u3089\u3001STACK_TOP_MAX\u306e\u5024\u306f\u30010xc0000000 - 16Mbyte = 0xbf000000 \u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u30b9\u30bf\u30c3\u30af\u306e\u30b5\u30a4\u30ba\u306f\u66ab\u5b9a\u7684\u306b4kbyte\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n.text, .data, .bss\n\u6b21\u306bexec_binprm()\u3092\u898b\u307e\u3059\u3002\n\nfs/exec.c\n\nstatic int exec_binprm(struct linux_binprm *bprm)\n{\n    /* \u7565 */\n    ret = search_binary_handler(bprm);\n    /* \u7565 */\n\n\n\nfs/exec.c\n\nint search_binary_handler(struct linux_binprm *bprm)\n{\n    /* \u7565 */\n retry:\n    read_lock(&binfmt_lock);\n    list_for_each_entry(fmt, &formats, lh) {\n        if (!try_module_get(fmt->module))\n            continue;\n        read_unlock(&binfmt_lock);\n        bprm->recursion_depth++;\n        retval = fmt->load_binary(bprm);\n    /* \u7565 */\n\n\n\u5b9f\u8cea\u7684\u306a\u51e6\u7406\u306f\u3001search_binary_handler()\u306efmt->load_binary()\u306b\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u7d50\u8ad6\u304b\u3089\u66f8\u304f\u3068\u3001ELF32\u306e\u5834\u5408\u3001fs/binfmt_elf.c\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308bload_elf_binary()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u203b\u3053\u306e\u3042\u305f\u308a\u3001\u8abf\u3079\u3066\u307f\u305f\u3044\u65b9\u306f\u3001fs/exec.c\u5185\u3092\u300cformats\u300d\u3067\u691c\u7d22\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u3046\u3059\u308b\u3068\u3001formats\u30ea\u30b9\u30c8\u306b\u30d0\u30a4\u30ca\u30ea\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u767b\u9332\u3059\u308b\u95a2\u6570\u304c\u3042\u308b\u306f\u305a\u3067\u3059\u3002\u305d\u3053\u3092\u8db3\u304c\u304b\u308a\u306b\u3057\u3066\u8abf\u3079\u3066\u307f\u308b\u3068\u306f\u304b\u3069\u308b\u3067\u3057\u3087\u3046\u3002\n\nelf\u30d0\u30a4\u30ca\u30ea\u306b\u3064\u3044\u3066\n\u6b21\u306b\u3001load_elf_binary()\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u5c11\u3057\u9577\u3044\u3067\u3059\u304c\u3001\u3082\u3068\u3082\u3068\u3053\u306e\u95a2\u6570\u306f400\u884c\u4ee5\u4e0a\u3042\u308b\u306e\u3067\u305d\u3053\u306f\u3054\u52d8\u5f01\u3092\u3002\u9069\u6642\u30b3\u30e1\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u969b\u3001ELF\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u306e\u5177\u4f53\u4f8b\u304c\u3042\u308b\u3068\u52a9\u3051\u306b\u306a\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u304a\u307e\u3051\u3067\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u306e\u5177\u4f53\u4f8b\nfyoshida-ThinkPad-X201% readelf -l a\n\nElf \u30d5\u30a1\u30a4\u30eb\u30bf\u30a4\u30d7\u306f EXEC (\u5b9f\u884c\u53ef\u80fd\u30d5\u30a1\u30a4\u30eb) \u3067\u3059\n\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8 0x102c0\n8 \u500b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u3001\u59cb\u70b9\u30aa\u30d5\u30bb\u30c3\u30c8 52\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0:\n  \u30bf\u30a4\u30d7       \u30aa\u30d5\u30bb\u30c3\u30c8 \u4eee\u60f3Addr   \u7269\u7406Addr   FileSiz MemSiz  Flg Align\n  EXIDX          0x000498 0x00010498 0x00010498 0x00008 0x00008 R   0x4\n  PHDR           0x000034 0x00010034 0x00010034 0x00100 0x00100 R E 0x4\n  INTERP         0x000134 0x00010134 0x00010134 0x00019 0x00019 R   0x1\n      [Requesting program interpreter: /lib/ld-linux-armhf.so.3]\n  LOAD           0x000000 0x00010000 0x00010000 0x004a4 0x004a4 R E 0x10000\n  LOAD           0x0004a4 0x000204a4 0x000204a4 0x00118 0x0011c RW  0x10000\n  DYNAMIC        0x0004b0 0x000204b0 0x000204b0 0x000e8 0x000e8 RW  0x4\n  NOTE           0x000150 0x00010150 0x00010150 0x00044 0x00044 R   0x4\n  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10\n  /* \u4ee5\u4e0b\u7565 */\n\n\n\nfs/binfmt_elf.c\nstatic int load_elf_binary(struct linux_binprm *bprm)\n{\n    /* \u7565 */\n    /* \n     * \u308f\u304b\u308a\u306b\u304f\u3044\u304c\u3001bprm->mm\u306fflush_old_exec()\u3067current(\u81ea\u30d7\u30ed\u30bb\u30b9)\u306emm\u306b\u53cd\u6620\u3055\u308c\u308b\u3002\n     * \u3088\u3063\u3066\u3001\u3053\u3053\u3067\u5148\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\u304c\u53ef\u8996\u306b\u306a\u308b\n     */\n    /* Flush all traces of the currently running executable */\n    retval = flush_old_exec(bprm);\n    /* \u7565 */\n    /* \u3053\u306e\u4e2d\u3067\u30b9\u30bf\u30c3\u30af\u7d61\u307f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u4e2d\u3067\u3001\u76f4\u5024\u3067expand_size=128kbyte\u3068\u3057\u3066\u3044\u308b\u3002*/\n    /* Do this so that we can load the interpreter, if need be.  We will\n       change some of these later */\n    retval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),\n                 executable_stack);\n    /* \u7565 */ \n    /* \u5c5e\u6027PT_LOAD\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u306b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b */\n    for(i = 0, elf_ppnt = elf_phdata;\n        i < loc->elf_ex.e_phnum; i++, elf_ppnt++) {\n        int elf_prot = 0, elf_flags;\n        unsigned long k, vaddr;\n        unsigned long total_size = 0;\n\n        if (elf_ppnt->p_type != PT_LOAD)\n            continue;\n\n        /* \u7565 */\n\n        if (elf_ppnt->p_flags & PF_R)\n            elf_prot |= PROT_READ;\n        if (elf_ppnt->p_flags & PF_W)\n            elf_prot |= PROT_WRITE;\n        if (elf_ppnt->p_flags & PF_X)\n            elf_prot |= PROT_EXEC;\n\n        elf_flags = MAP_PRIVATE | MAP_DENYWRITE | MAP_EXECUTABLE;\n\n        vaddr = elf_ppnt->p_vaddr;\n        if (loc->elf_ex.e_type == ET_EXEC || load_addr_set) {\n            elf_flags |= MAP_FIXED;\n        } else if (loc->elf_ex.e_type == ET_DYN) {\n            /* \u7565\u3002\u4eca\u56de\u306f\u52d5\u7684\u30ea\u30f3\u30af\u306e\u30b3\u30fc\u30c9\u306f\u6271\u308f\u306a\u3044 */\n        }\n\n        /* \n         * \u898b\u3064\u3051\u305f.text, .data\u306b\u3064\u3044\u3066\u3001\u81ea\u30d7\u30ed\u30bb\u30b9\u306b\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092\u884c\u3044\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u751f\u6210\u3059\u308b\u3002\n         * elf_map()\u306e\u4e2d\u3067\u306fvm_mmap()\u3092\u547c\u3076\u3053\u3068\u304c\u30e1\u30a4\u30f3\u3002\n         */\n        error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt,\n                elf_prot, elf_flags, total_size);\n        /* \u7565 */\n        /* \n         * \u3053\u306e\u30eb\u30fc\u30d7\u306e\u672b\u5c3e\u8fd1\u8fba\u306f\u3001\n         * elf_bss, elf_brk, start_code, end_code, start_data, end_data\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u51e6\u7406\n         */\n    }\n\n    /* \u7565 */\n\n    /* BSS\u9818\u57df\u3092\u4f5c\u308b\u3002.data\u9818\u57df\u304c\u30a2\u30c9\u30ec\u30b9\u306e\u4e0b\u4f4d\u306b\u5411\u304b\u3063\u3066\u4f38\u3073\u3066\u3044\u304f */\n    retval = set_brk(elf_bss, elf_brk);\n    /* \u7565 */\n    set_binfmt(&elf_format);\n    /* \u7565 */\n    /* start_code, end_code\u306f.text\u9818\u57df\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3001\u672b\u5c3e\u30a2\u30c9\u30ec\u30b9 */\n    current->mm->end_code = end_code;\n    current->mm->start_code = start_code;\n    /* start_code, end_code\u306f.data\u9818\u57df\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3001\u672b\u5c3e\u30a2\u30c9\u30ec\u30b9 */\n    current->mm->start_data = start_data;\n    current->mm->end_data = end_data;\n    /* \u30b9\u30bf\u30c3\u30af */\n    current->mm->start_stack = bprm->p;\n    /* \u7565 */\n\n\n\u306a\u304a\u3001\u4ee5\u4e0b\u306e\u70b9\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n.text\u3060\u3051\u3067\u306a\u304f\u3001.data\u306b\u3064\u3044\u3066\u3082MAP_PRIVATE(\u5171\u6709\u3057\u306a\u3044), MAP_DENYWRITE(\u4fdd\u8b77\u5c5e\u6027\u3067Write\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u3067\u3082\u3001\u3072\u3068\u307e\u305a\u66f8\u8fbc\u307f\u7981\u6b62\u3067\u30de\u30c3\u30d7), MAP_EXECUTABLE(\u5b9f\u884c\u6a29\u3092\u8a2d\u5b9a\u53ef\u80fd\u3002\u5b9f\u884c\u6a29\u3092\u5373\u3064\u3051\u308b\u308f\u3051\u3067\u306f\u306a\u3044)\u3068\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u306f\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u884c\u3046\u306e\u306f\u3001\u81ea\u30d7\u30ed\u30bb\u30b9\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b.text\u3068.data\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u633f\u5165\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u6642\u70b9\u3067\u7269\u7406\u30e1\u30e2\u30ea\u3068\u306e\u3072\u3082\u4ed8\u3051\u306f\u884c\u3044\u307e\u305b\u3093\u3002\u305d\u308c\u306f\u30c7\u30de\u30f3\u30c9\u30da\u30fc\u30b8\u30f3\u30b0\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\n\n\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u30d9\u30fc\u30b9\u30a2\u30c9\u30ec\u30b9\n\u307e\u305f\u3001\u7a81\u7136\u3067\u3059\u304c\u3001\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u9818\u57df\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u5024\u304c\u3042\u308a\u307e\u3059\u3002\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5b9f\u884c\u3055\u308c\u305f\u3068\u304d\u306a\u3069\u306b\u3053\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\narch/arm/include/asm/elf.h\n/* This is the location that an ET_DYN program is loaded if exec'ed.  Typical\n   use of this is to invoke \"./ld.so someprog\" to test out a new version of\n   the loader.  We need to make sure that it is out of the way of the program\n   that it will \"exec\", and that there is sufficient room for the brk.  */\n\n#define ELF_ET_DYN_BASE (TASK_SIZE / 3 * 2)\n\n\n\n\u3053\u3053\u307e\u3067\u306e\u307e\u3068\u3081\n\u3053\u3053\u307e\u3067\u66f8\u3044\u305f\u3053\u3068\u3092\u307e\u3068\u3081\u308b\u3068\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306f\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u306a\u304a\u3001\u3053\u3053\u307e\u3067\u898b\u3066\u304d\u305f\u901a\u308a\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306fconfig\u306b\u3088\u3063\u3066\u304b\u306a\u308a\u7570\u306a\u308a\u307e\u3059\u3002\u3088\u3063\u3066\u3001\u4ed5\u4e8b\u3084\u958b\u767a\u3067\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306b\u3064\u3044\u3066\u77e5\u308a\u305f\u3044\u5834\u5408\u3001\u3053\u306e\u6587\u66f8\u306b\u66f8\u304b\u308c\u305f\u3053\u3068\u3092\u30d9\u30fc\u30b9\u306b\u5404\u81ea\u3054\u78ba\u8a8d\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\n\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af\n\u30d7\u30ed\u30bb\u30b9\u304c\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u4f7f\u308f\u308c\u308b\u30b9\u30bf\u30c3\u30af(\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af)\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u3054\u3068(task_struct\u3067\u7ba1\u7406\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068)\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u751f\u6210\u3055\u308c\u308b\u5834\u6240\u306ffork()\u306e\u4e00\u51e6\u7406\u3067\u3059\u3002\n\nkernel/fork.c\nstatic struct task_struct *dup_task_struct(struct task_struct *orig, int node)\n{\n    struct task_struct *tsk;\n    unsigned long *stack;\n\n    /* \u7565 */\n    tsk = alloc_task_struct_node(node);\n    /* \u7565 */\n\n    stack = alloc_thread_stack_node(tsk, node);\n    /* \u7565 */\n\n    /* \u5358\u306b\u30b3\u30d4\u30fc\u5143\u306etask_struct orig\u306e\u5185\u5bb9\u3092tsk\u306b\u8907\u5199\u3057\u3066\u3044\u308b\u3060\u3051 */\n    err = arch_dup_task_struct(tsk, orig);\n\n    /* \u7565 */\n    tsk->stack = stack;\n    /* \u7565 */\n\n    setup_thread_stack(tsk, orig);\n    /* \u7565 */\n    set_task_stack_end_magic(tsk);\n    /* \u7565 */\n\n\nalloc_task_struct_node()\u306f\u3001kmem_cache_alloc_node()\u7d4c\u7531\u3067task struct\u69cb\u9020\u4f53\u3092\u5272\u308a\u5f53\u3066\u308b\u3060\u3051\u3067\u3059\u3002\n\nkernel/fork.c\nstatic unsigned long *alloc_thread_stack_node(struct task_struct *tsk, int node)\n{\n#ifdef CONFIG_VMAP_STACK\n    /* \n     * \u4eca\u56de\u306f\u5bfe\u8c61\u5916\u3060\u304c\u3001x86, ia64\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3053\u3061\u3089\u304c\u6709\u52b9\u306b\u306a\u308b\u3088\u3046\u3060\u3002 \n     * \u3082\u3061\u308d\u3093distribution\u306b\u3088\u3063\u3066\u306f\u7570\u306a\u3063\u3066\u304f\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n     */\n#else\n    /* \u4eca\u56de\u306f\u3053\u3061\u3089 */\n    struct page *page = alloc_pages_node(node, THREADINFO_GFP,\n                         THREAD_SIZE_ORDER);\n\n    return page ? page_address(page) : NULL;\n#endif\n}\n\n\n\u3061\u306a\u307f\u306b\u3001THREAD_SIZE_ORDER\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u3088\u3063\u3066\u30012\u30da\u30fc\u30b8\u5206\u306e\u30da\u30fc\u30b8\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u5272\u308a\u5f53\u3066\u305f\u9818\u57df\u304c\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002\n\narch/arm/include/asm/thread_info.h\n#define THREAD_SIZE_ORDER   1\n#define THREAD_SIZE     (PAGE_SIZE << THREAD_SIZE_ORDER)\n\n\n\u3061\u306a\u307f\u306b\u30011\u30da\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\u306f\u3001\u6975\u3081\u3066\u6a19\u6e96\u7684\u306b4kbyte\u3067\u3059\u3002\n\narch/arm/include/asm/page.h\n#define PAGE_SHIFT      12\n#define PAGE_SIZE       (_AC(1,UL) << PAGE_SHIFT)\n\n\nsetup_thread_stack(), set_task_stack_end_magic()\u3092\u7d4c\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u72b6\u614b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n(\u8a73\u3057\u304f\u306f\u3001setup_thread_stack(), set_task_stack_end_magic()\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044)\n\n\n\u6700\u5f8c\u306b\n\u3056\u3063\u304f\u308a\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30e1\u30e2\u30ea\u304c\u3089\u307f\u306e\u6a5f\u80fd\u8a2d\u8a08\u3092\u3057\u305f\u308a\u3001\u4e0d\u5177\u5408\u89e3\u6790\u3092\u3059\u308b\u969b\u306b\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306e\u30a4\u30e1\u30fc\u30b8\u304c\u3067\u304d\u308b\u3053\u3068\u306f\u91cd\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001arm\u3060\u3051\u3067\u306a\u304f\u3001x86\u306a\u3069\u306e\u7570\u306a\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092\u8abf\u67fb\u3059\u308b\u969b\u306b\u3082\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\u6587\u732e\nLinux\u30ab\u30fc\u30cd\u30eb\u89e3\u8aad\u5ba4\nLinkers&Loaders\n## \u306f\u3058\u3081\u306b\n\nLinux\u306e\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u30de\u30c3\u30d7\u5468\u8fba\u306e\u77e5\u8b58\u304c\u3001\u610f\u5916\u3068\u3042\u3084\u3075\u3084\u306a\u7b87\u6240\u304c\u3042\u3063\u305f\u306e\u3067\u78ba\u8a8d\u3057\u305f\u3044\u3068\u601d\u3063\u305f\u3053\u3068\u3001\u305d\u306e\u4ed6\u306b\u3082\u8af8\u3005\u306e\u76ee\u7684\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u306e\u70b9\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u7279\u306b\u8a18\u8f09\u306e\u306a\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306b\u5f93\u3044\u307e\u3059\u3002\n\n| \u9805\u76ee | \u5024 |\n|:---|:---|\n| Linux\u30d0\u30fc\u30b8\u30e7\u30f3 | 4.9 |\n| CPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3 | arm |\n| \u5b9f\u884c\u5f62\u5f0f\u30d5\u30a1\u30a4\u30eb | ELF32 |\n\n## .text, .data, \u30e6\u30fc\u30b6\u7a7a\u9593\u306e\u30b9\u30bf\u30c3\u30af\n\n.text, .data\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u751f\u6210\u306fexec()\u306e\u51e6\u7406\u306e\u4e00\u74b0\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u308b\u306e\u306f\u3001\u4ee5\u4e0bdo_execveat_common()\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308b2\u3064\u306e\u95a2\u6570bprm_mm_init()\u3068exec_binprm()\u3067\u3059\u3002\n\n```c:fs/exec.c\n/*\n * sys_execve() executes a new program.\n */\nstatic int do_execveat_common(int fd, struct filename *filename,\n                  struct user_arg_ptr argv,\n                  struct user_arg_ptr envp,\n                  int flags)\n{\n    /* \u7565 */\n    retval = bprm_mm_init(bprm);\n    if (retval)\n        goto out_unmark;\n    /* \u7565 */\n    retval = exec_binprm(bprm);\n    if (retval < 0)\n        goto out;\n```\n\n\u307e\u305a\u6700\u521d\u306bbprm_mm_init()\u3092\u898b\u307e\u3059\u3002\n\n```c:fs/exec.c\nstatic int bprm_mm_init(struct linux_binprm *bprm)\n{\n    /* \u7565 */\n    /* \u5b9f\u884c\u5f62\u5f0f\u30d5\u30a1\u30a4\u30eb\u4f9d\u5b58\u306e\u521d\u671f\u5316\u3002\u4eca\u56de\u898b\u308b\u306e\u306f\u3053\u3063\u3061 */\n    err = __bprm_mm_init(bprm);\n    if (err)\n        goto err;\n\n    return 0;\n```\n\n\u5b9f\u8cea\u7684\u306a\u51e6\u7406\u306f\u3001\\_\\_bprm\\_mm\\_init()\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\u5b9f\u306f\u3001\\_\\_bprm\\_mm\\_init()\u3067\u306f\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u69cb\u7bc9\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n### \u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\n\n```c:fs/exec.c\nstatic int __bprm_mm_init(struct linux_binprm *bprm)\n{\n    bprm->vma = vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);\n    /* \u7565 */\n    /*\n     * Place the stack at the largest stack address the architecture\n     * supports. Later, we'll move this to an appropriate place. We don't\n     * use STACK_TOP because that can depend on attributes which aren't\n     * configured yet.\n     */\n    BUILD_BUG_ON(VM_STACK_FLAGS & VM_STACK_INCOMPLETE_SETUP);\n    vma->vm_end = STACK_TOP_MAX;\n    vma->vm_start = vma->vm_end - PAGE_SIZE;\n    vma->vm_flags = VM_SOFTDIRTY | VM_STACK_FLAGS | VM_STACK_INCOMPLETE_SETUP;\n    vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);\n    INIT_LIST_HEAD(&vma->anon_vma_chain);\n\n    err = insert_vm_struct(mm, vma);\n    if (err)\n        goto err;\n\n    mm->stack_vm = mm->total_vm = 1;\n```\n\n\u7e70\u308a\u8fd4\u3057\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u5b9f\u65bd\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\u5411\u3051\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092**\u4f5c\u308b**\u3053\u3068\u3067\u3059\u3002**\u3053\u306e\u6642\u70b9\u3067\u306f\u3001\u81ea\u30d7\u30ed\u30bb\u30b9\u306b\u8a72\u5f53\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u8a2d\u5b9a\u306f\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u3002**\n\n#### STACK_TOP_MAX\u3000- \u30e6\u30fc\u30b6\u30b9\u30bf\u30c3\u30af\u306e\u5e95\u306e\u30a2\u30c9\u30ec\u30b9 -\n\nvm_end(\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\u306e\u672b\u5c3e\u9818\u57df)\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308bSTACK_TOP_MAX\u306f\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c:arch/arm/include/asm/processor.h\n#ifdef __KERNEL__\n#define STACK_TOP   ((current->personality & ADDR_LIMIT_32BIT) ? \\\n             TASK_SIZE : TASK_SIZE_26)\n#define STACK_TOP_MAX   TASK_SIZE\n#endif\n```\n\n```c:arch/arm/include/asm/memory.h\n#ifdef CONFIG_MMU\n\n/*\n * TASK_SIZE - the maximum size of a user space task.\n * TASK_UNMAPPED_BASE - the lower boundary of the mmap VM area\n */\n#define TASK_SIZE       (UL(CONFIG_PAGE_OFFSET) - UL(SZ_16M))\n```\n\nPAGE_OFFSET\u3068\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u30a4\u30e1\u30fc\u30b8\u304c\u7f6e\u304b\u308c\u308b\u9818\u57df\u306e\u5148\u982d\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3067\u3059\u3002\u53b3\u5bc6\u306b\u306f\u7570\u306a\u308b\u306e\u3067\u3059\u304c\u3001\u30a4\u30e1\u30fc\u30b8\u306e\u5bb9\u6613\u3055\u3092\u512a\u5148\u3055\u305b\u308b\u5834\u5408\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3068\u8003\u3048\u3066\u3082\u5dee\u3057\u652f\u3048\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u5b9a\u7fa9\u306e\u540d\u524d\u304b\u3089\u3001\u610f\u5473\u304c\u60f3\u50cf\u3057\u306b\u304f\u3044\u306e\u3067\u6ce8\u610f\u3067\u3059\u3002\narm\u306e\u5834\u5408\u3001\u305d\u306e\u5024\u306fKconfig\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002(\u3053\u3053\u3067\u6c7a\u307e\u3063\u305f\u5024\u304c\u3001CONFIG_PAGE_OFFSET\u306b\u306a\u308a\u307e\u3059)\u3002\n\n```:arch/arm/Kconfig\nconfig PAGE_OFFSET\n    hex  \n    default PHYS_OFFSET if !MMU \n    default 0x40000000 if VMSPLIT_1G\n    default 0x80000000 if VMSPLIT_2G\n    default 0xB0000000 if VMSPLIT_3G_OPT\n    default 0xC0000000\n```\n\n\u306a\u304a\u3001\u3053\u306e\u6587\u7ae0\u5185\u3067\u306f\u3001PAGE_OFFSET\u306e\u5024\u30920xc0000000\u3068\u3057\u307e\u3059\u3002\n\n\u8a71\u3092\u623b\u3057\u307e\u3059\u3002\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305f\u3053\u3068\u304b\u3089\u3001STACK_TOP_MAX\u306e\u5024\u306f\u30010xc0000000 - 16Mbyte = 0xbf000000 \u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u30b9\u30bf\u30c3\u30af\u306e\u30b5\u30a4\u30ba\u306f\u66ab\u5b9a\u7684\u306b4kbyte\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n### .text, .data, .bss\n\n\u6b21\u306bexec_binprm()\u3092\u898b\u307e\u3059\u3002\n\n```c:fs/exec.c\n\nstatic int exec_binprm(struct linux_binprm *bprm)\n{\n    /* \u7565 */\n    ret = search_binary_handler(bprm);\n    /* \u7565 */\n```\n\n\n```c:fs/exec.c\n\nint search_binary_handler(struct linux_binprm *bprm)\n{\n    /* \u7565 */\n retry:\n    read_lock(&binfmt_lock);\n    list_for_each_entry(fmt, &formats, lh) {\n        if (!try_module_get(fmt->module))\n            continue;\n        read_unlock(&binfmt_lock);\n        bprm->recursion_depth++;\n        retval = fmt->load_binary(bprm);\n    /* \u7565 */\n```\n\n\u5b9f\u8cea\u7684\u306a\u51e6\u7406\u306f\u3001search_binary_handler()\u306efmt->load_binary()\u306b\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u7d50\u8ad6\u304b\u3089\u66f8\u304f\u3068\u3001ELF32\u306e\u5834\u5408\u3001fs/binfmt_elf.c\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308bload_elf_binary()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u203b\u3053\u306e\u3042\u305f\u308a\u3001\u8abf\u3079\u3066\u307f\u305f\u3044\u65b9\u306f\u3001fs/exec.c\u5185\u3092\u300cformats\u300d\u3067\u691c\u7d22\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u3046\u3059\u308b\u3068\u3001formats\u30ea\u30b9\u30c8\u306b\u30d0\u30a4\u30ca\u30ea\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u767b\u9332\u3059\u308b\u95a2\u6570\u304c\u3042\u308b\u306f\u305a\u3067\u3059\u3002\u305d\u3053\u3092\u8db3\u304c\u304b\u308a\u306b\u3057\u3066\u8abf\u3079\u3066\u307f\u308b\u3068\u306f\u304b\u3069\u308b\u3067\u3057\u3087\u3046\u3002\n\n### elf\u30d0\u30a4\u30ca\u30ea\u306b\u3064\u3044\u3066\n\n\u6b21\u306b\u3001load_elf_binary()\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u5c11\u3057\u9577\u3044\u3067\u3059\u304c\u3001\u3082\u3068\u3082\u3068\u3053\u306e\u95a2\u6570\u306f400\u884c\u4ee5\u4e0a\u3042\u308b\u306e\u3067\u305d\u3053\u306f\u3054\u52d8\u5f01\u3092\u3002\u9069\u6642\u30b3\u30e1\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u969b\u3001ELF\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u306e\u5177\u4f53\u4f8b\u304c\u3042\u308b\u3068\u52a9\u3051\u306b\u306a\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u304a\u307e\u3051\u3067\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n```:\u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u306e\u5177\u4f53\u4f8b\nfyoshida-ThinkPad-X201% readelf -l a\n\nElf \u30d5\u30a1\u30a4\u30eb\u30bf\u30a4\u30d7\u306f EXEC (\u5b9f\u884c\u53ef\u80fd\u30d5\u30a1\u30a4\u30eb) \u3067\u3059\n\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8 0x102c0\n8 \u500b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u3001\u59cb\u70b9\u30aa\u30d5\u30bb\u30c3\u30c8 52\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0:\n  \u30bf\u30a4\u30d7       \u30aa\u30d5\u30bb\u30c3\u30c8 \u4eee\u60f3Addr   \u7269\u7406Addr   FileSiz MemSiz  Flg Align\n  EXIDX          0x000498 0x00010498 0x00010498 0x00008 0x00008 R   0x4\n  PHDR           0x000034 0x00010034 0x00010034 0x00100 0x00100 R E 0x4\n  INTERP         0x000134 0x00010134 0x00010134 0x00019 0x00019 R   0x1\n      [Requesting program interpreter: /lib/ld-linux-armhf.so.3]\n  LOAD           0x000000 0x00010000 0x00010000 0x004a4 0x004a4 R E 0x10000\n  LOAD           0x0004a4 0x000204a4 0x000204a4 0x00118 0x0011c RW  0x10000\n  DYNAMIC        0x0004b0 0x000204b0 0x000204b0 0x000e8 0x000e8 RW  0x4\n  NOTE           0x000150 0x00010150 0x00010150 0x00044 0x00044 R   0x4\n  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10\n  /* \u4ee5\u4e0b\u7565 */\n```\n\n\n```c:fs/binfmt_elf.c\nstatic int load_elf_binary(struct linux_binprm *bprm)\n{\n    /* \u7565 */\n    /* \n     * \u308f\u304b\u308a\u306b\u304f\u3044\u304c\u3001bprm->mm\u306fflush_old_exec()\u3067current(\u81ea\u30d7\u30ed\u30bb\u30b9)\u306emm\u306b\u53cd\u6620\u3055\u308c\u308b\u3002\n     * \u3088\u3063\u3066\u3001\u3053\u3053\u3067\u5148\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u7a7a\u9593\u30b9\u30bf\u30c3\u30af\u304c\u53ef\u8996\u306b\u306a\u308b\n     */\n    /* Flush all traces of the currently running executable */\n    retval = flush_old_exec(bprm);\n    /* \u7565 */\n    /* \u3053\u306e\u4e2d\u3067\u30b9\u30bf\u30c3\u30af\u7d61\u307f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u4e2d\u3067\u3001\u76f4\u5024\u3067expand_size=128kbyte\u3068\u3057\u3066\u3044\u308b\u3002*/\n    /* Do this so that we can load the interpreter, if need be.  We will\n       change some of these later */\n    retval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),\n                 executable_stack);\n    /* \u7565 */ \n    /* \u5c5e\u6027PT_LOAD\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u306b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b */\n    for(i = 0, elf_ppnt = elf_phdata;\n        i < loc->elf_ex.e_phnum; i++, elf_ppnt++) {\n        int elf_prot = 0, elf_flags;\n        unsigned long k, vaddr;\n        unsigned long total_size = 0;\n\n        if (elf_ppnt->p_type != PT_LOAD)\n            continue;\n\n        /* \u7565 */\n\n        if (elf_ppnt->p_flags & PF_R)\n            elf_prot |= PROT_READ;\n        if (elf_ppnt->p_flags & PF_W)\n            elf_prot |= PROT_WRITE;\n        if (elf_ppnt->p_flags & PF_X)\n            elf_prot |= PROT_EXEC;\n\n        elf_flags = MAP_PRIVATE | MAP_DENYWRITE | MAP_EXECUTABLE;\n\n        vaddr = elf_ppnt->p_vaddr;\n        if (loc->elf_ex.e_type == ET_EXEC || load_addr_set) {\n            elf_flags |= MAP_FIXED;\n        } else if (loc->elf_ex.e_type == ET_DYN) {\n            /* \u7565\u3002\u4eca\u56de\u306f\u52d5\u7684\u30ea\u30f3\u30af\u306e\u30b3\u30fc\u30c9\u306f\u6271\u308f\u306a\u3044 */\n        }\n\n        /* \n         * \u898b\u3064\u3051\u305f.text, .data\u306b\u3064\u3044\u3066\u3001\u81ea\u30d7\u30ed\u30bb\u30b9\u306b\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092\u884c\u3044\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u751f\u6210\u3059\u308b\u3002\n         * elf_map()\u306e\u4e2d\u3067\u306fvm_mmap()\u3092\u547c\u3076\u3053\u3068\u304c\u30e1\u30a4\u30f3\u3002\n         */\n        error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt,\n                elf_prot, elf_flags, total_size);\n        /* \u7565 */\n        /* \n         * \u3053\u306e\u30eb\u30fc\u30d7\u306e\u672b\u5c3e\u8fd1\u8fba\u306f\u3001\n         * elf_bss, elf_brk, start_code, end_code, start_data, end_data\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u51e6\u7406\n         */\n    }\n\n    /* \u7565 */\n\n    /* BSS\u9818\u57df\u3092\u4f5c\u308b\u3002.data\u9818\u57df\u304c\u30a2\u30c9\u30ec\u30b9\u306e\u4e0b\u4f4d\u306b\u5411\u304b\u3063\u3066\u4f38\u3073\u3066\u3044\u304f */\n    retval = set_brk(elf_bss, elf_brk);\n    /* \u7565 */\n    set_binfmt(&elf_format);\n    /* \u7565 */\n    /* start_code, end_code\u306f.text\u9818\u57df\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3001\u672b\u5c3e\u30a2\u30c9\u30ec\u30b9 */\n    current->mm->end_code = end_code;\n    current->mm->start_code = start_code;\n    /* start_code, end_code\u306f.data\u9818\u57df\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3001\u672b\u5c3e\u30a2\u30c9\u30ec\u30b9 */\n    current->mm->start_data = start_data;\n    current->mm->end_data = end_data;\n    /* \u30b9\u30bf\u30c3\u30af */\n    current->mm->start_stack = bprm->p;\n    /* \u7565 */\n```\n\n\u306a\u304a\u3001\u4ee5\u4e0b\u306e\u70b9\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n - .text\u3060\u3051\u3067\u306a\u304f\u3001.data\u306b\u3064\u3044\u3066\u3082MAP_PRIVATE(\u5171\u6709\u3057\u306a\u3044), MAP_DENYWRITE(\u4fdd\u8b77\u5c5e\u6027\u3067Write\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u3067\u3082\u3001\u3072\u3068\u307e\u305a\u66f8\u8fbc\u307f\u7981\u6b62\u3067\u30de\u30c3\u30d7), MAP_EXECUTABLE(\u5b9f\u884c\u6a29\u3092\u8a2d\u5b9a**\u53ef\u80fd**\u3002\u5b9f\u884c\u6a29\u3092\u5373\u3064\u3051\u308b\u308f\u3051\u3067\u306f\u306a\u3044)\u3068\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u306f\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n - \u3053\u3053\u3067\u884c\u3046\u306e\u306f\u3001**\u81ea\u30d7\u30ed\u30bb\u30b9\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b.text\u3068.data\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u633f\u5165\u3059\u308b**\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u6642\u70b9\u3067\u7269\u7406\u30e1\u30e2\u30ea\u3068\u306e\u3072\u3082\u4ed8\u3051\u306f\u884c\u3044\u307e\u305b\u3093\u3002\u305d\u308c\u306f\u30c7\u30de\u30f3\u30c9\u30da\u30fc\u30b8\u30f3\u30b0\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\n### \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u30d9\u30fc\u30b9\u30a2\u30c9\u30ec\u30b9\n\n\u307e\u305f\u3001\u7a81\u7136\u3067\u3059\u304c\u3001\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u9818\u57df\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u5024\u304c\u3042\u308a\u307e\u3059\u3002\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5b9f\u884c\u3055\u308c\u305f\u3068\u304d\u306a\u3069\u306b\u3053\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n```c:arch/arm/include/asm/elf.h\n/* This is the location that an ET_DYN program is loaded if exec'ed.  Typical\n   use of this is to invoke \"./ld.so someprog\" to test out a new version of\n   the loader.  We need to make sure that it is out of the way of the program\n   that it will \"exec\", and that there is sufficient room for the brk.  */\n\n#define ELF_ET_DYN_BASE (TASK_SIZE / 3 * 2)\n```\n\n### \u3053\u3053\u307e\u3067\u306e\u307e\u3068\u3081\n\n\u3053\u3053\u307e\u3067\u66f8\u3044\u305f\u3053\u3068\u3092\u307e\u3068\u3081\u308b\u3068\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306f\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u306a\u304a\u3001\u3053\u3053\u307e\u3067\u898b\u3066\u304d\u305f\u901a\u308a\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306fconfig\u306b\u3088\u3063\u3066\u304b\u306a\u308a\u7570\u306a\u308a\u307e\u3059\u3002\u3088\u3063\u3066\u3001\u4ed5\u4e8b\u3084\u958b\u767a\u3067\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306b\u3064\u3044\u3066\u77e5\u308a\u305f\u3044\u5834\u5408\u3001\u3053\u306e\u6587\u66f8\u306b\u66f8\u304b\u308c\u305f\u3053\u3068\u3092\u30d9\u30fc\u30b9\u306b\u5404\u81ea\u3054\u78ba\u8a8d\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n![memmap2.jpg](https://qiita-image-store.s3.amazonaws.com/0/19975/7c718856-8fae-a42d-d561-da31ca939186.jpeg)\n\n### \u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af\n\n\u30d7\u30ed\u30bb\u30b9\u304c\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u4f7f\u308f\u308c\u308b\u30b9\u30bf\u30c3\u30af(\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af)\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u3054\u3068(task_struct\u3067\u7ba1\u7406\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068)\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u751f\u6210\u3055\u308c\u308b\u5834\u6240\u306ffork()\u306e\u4e00\u51e6\u7406\u3067\u3059\u3002\n\n```c:kernel/fork.c\nstatic struct task_struct *dup_task_struct(struct task_struct *orig, int node)\n{\n    struct task_struct *tsk;\n    unsigned long *stack;\n\n    /* \u7565 */\n    tsk = alloc_task_struct_node(node);\n    /* \u7565 */\n\n    stack = alloc_thread_stack_node(tsk, node);\n    /* \u7565 */\n\n    /* \u5358\u306b\u30b3\u30d4\u30fc\u5143\u306etask_struct orig\u306e\u5185\u5bb9\u3092tsk\u306b\u8907\u5199\u3057\u3066\u3044\u308b\u3060\u3051 */\n    err = arch_dup_task_struct(tsk, orig);\n\n    /* \u7565 */\n    tsk->stack = stack;\n    /* \u7565 */\n\n    setup_thread_stack(tsk, orig);\n    /* \u7565 */\n    set_task_stack_end_magic(tsk);\n    /* \u7565 */\n```\n\nalloc_task_struct_node()\u306f\u3001kmem_cache_alloc_node()\u7d4c\u7531\u3067task struct\u69cb\u9020\u4f53\u3092\u5272\u308a\u5f53\u3066\u308b\u3060\u3051\u3067\u3059\u3002\n\n```c:kernel/fork.c\nstatic unsigned long *alloc_thread_stack_node(struct task_struct *tsk, int node)\n{\n#ifdef CONFIG_VMAP_STACK\n    /* \n     * \u4eca\u56de\u306f\u5bfe\u8c61\u5916\u3060\u304c\u3001x86, ia64\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3053\u3061\u3089\u304c\u6709\u52b9\u306b\u306a\u308b\u3088\u3046\u3060\u3002 \n     * \u3082\u3061\u308d\u3093distribution\u306b\u3088\u3063\u3066\u306f\u7570\u306a\u3063\u3066\u304f\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n     */\n#else\n    /* \u4eca\u56de\u306f\u3053\u3061\u3089 */\n    struct page *page = alloc_pages_node(node, THREADINFO_GFP,\n                         THREAD_SIZE_ORDER);\n\n    return page ? page_address(page) : NULL;\n#endif\n}\n```\n\n\u3061\u306a\u307f\u306b\u3001THREAD_SIZE_ORDER\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u3088\u3063\u3066\u30012\u30da\u30fc\u30b8\u5206\u306e\u30da\u30fc\u30b8\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u5272\u308a\u5f53\u3066\u305f\u9818\u57df\u304c\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c:arch/arm/include/asm/thread_info.h\n#define THREAD_SIZE_ORDER   1\n#define THREAD_SIZE     (PAGE_SIZE << THREAD_SIZE_ORDER)\n```\n\n\u3061\u306a\u307f\u306b\u30011\u30da\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\u306f\u3001\u6975\u3081\u3066\u6a19\u6e96\u7684\u306b4kbyte\u3067\u3059\u3002\n\n```c:arch/arm/include/asm/page.h\n#define PAGE_SHIFT      12\n#define PAGE_SIZE       (_AC(1,UL) << PAGE_SHIFT)\n```\n\nsetup_thread_stack(), set_task_stack_end_magic()\u3092\u7d4c\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u72b6\u614b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n(\u8a73\u3057\u304f\u306f\u3001setup_thread_stack(), set_task_stack_end_magic()\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044)\n\n![memmap1.jpg](https://qiita-image-store.s3.amazonaws.com/0/19975/086e7faf-859b-a885-4ac1-6a27ec248588.jpeg)\n\n## \u6700\u5f8c\u306b\n\n\u3056\u3063\u304f\u308a\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30e1\u30e2\u30ea\u304c\u3089\u307f\u306e\u6a5f\u80fd\u8a2d\u8a08\u3092\u3057\u305f\u308a\u3001\u4e0d\u5177\u5408\u89e3\u6790\u3092\u3059\u308b\u969b\u306b\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306e\u30a4\u30e1\u30fc\u30b8\u304c\u3067\u304d\u308b\u3053\u3068\u306f\u91cd\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001arm\u3060\u3051\u3067\u306a\u304f\u3001x86\u306a\u3069\u306e\u7570\u306a\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092\u8abf\u67fb\u3059\u308b\u969b\u306b\u3082\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u53c2\u8003\u6587\u732e\nLinux\u30ab\u30fc\u30cd\u30eb\u89e3\u8aad\u5ba4\nLinkers&Loaders\n"}