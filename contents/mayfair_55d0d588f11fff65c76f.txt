{"tags": ["ESP8266", "Arduino", "myThings"], "context": " More than 1 year has passed since last update.\n\n\u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\nMasato Shimizu\u3055\u3093\u306e\u8a18\u4e8b\u300cmyThings\u3092\u306f\u3058\u3081\u3088\u3046 - Part7: \u30c8\u30ea\u30ac\u30fc\u306e\u95be\u5024\u76e3\u8996\u3092Raspberry Pi\u3067\u884c\u3046\u300d\u3067\u306f\u74b0\u5883\u30bb\u30f3\u30b5BME280\u304b\u3089\u8aad\u307f\u53d6\u3063\u305f\u6e29\u5ea6\u306e\u5024\u3068\u95be\u5024\u3092Raspberry Pi\u4e0a\u3067\u6bd4\u8f03\u3057\u3066\u30c8\u30ea\u30ac\u30fc\u3092\u767a\u706b\u3059\u308b\u65b9\u6cd5\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3068\u540c\u3058\u3053\u3068\u3092ESP8266\u3067\u884c\u3046\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nmyThings\u30a2\u30d7\u30ea\u306e\u8a2d\u5b9a\u306f\u5143\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5b9f\u88c5\n\u30d5\u30a1\u30a4\u30eb\u306f2\u3064\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u3084IDCF Cloud\u3067\u306eUUID\u3084\u30c8\u30fc\u30af\u30f3\u306a\u3069\u3001\u5404\u81ea\u3067\u5909\u66f4\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u3082\u306e\u306fconfig.h\u3068\u3044\u3046\u540d\u524d\u3067Arduino IDE\u4e0a\u3067\u5225\u306e\u30bf\u30d6\uff08\u5b9f\u4f53\u306f\u30bf\u30d6\u3068\u540c\u3058\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\uff09\u306b\u3057\u3066\u5206\u96e2\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nconfig.h\n// Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306eSSID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\nconst char* ssid = \"********\";\nconst char* password = \"********\";\n\n// IDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u30b5\u30fc\u30d0\u306e\u60c5\u5831\nconst char* host = \"210.***.***.***\";\nconst char* trigger_1_uuid = \"********-****-****-****-************\";\nconst char* trigger_1_token = \"********\";\n\n// \u30c8\u30ea\u30ac\u30fc\u3092\u304b\u3051\u308b\u6e29\u5ea6\u306e\u95be\u5024\nconst float threshold = 27.0;\n\n\n\nIDCF_Trigger_HTTP\n#include <Wire.h>\n\n#include <ESP8266WiFi.h>\n#include <BME280_MOD-1022.h>\n\n#include \"config.h\"\n\nfloat temperature = 0.0;\nfloat humidity = 0.0;\nfloat pressure = 0.0;\n\nvoid printFormattedFloat(float val) {\n  char buffer[10];\n\n  dtostrf(val, 4, 2, buffer);\n  Serial.print(buffer);\n}\n\nvoid setup() {\n  // I2C\u306e\u901a\u4fe1\u3092\u958b\u59cb\n  // SDA: DIO4\n  // SCL: DIO14\n  Wire.begin(4, 14);\n\n  // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u958b\u59cb\n  Serial.begin(115200);\n\n  // BME280\u3092\u521d\u671f\u5316\n  BME280.readCompensationParams();\n\n  // \u30aa\u30fc\u30d0\u30fc\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u56de\u6570\u3092\u8a2d\u5b9a\n  BME280.writeOversamplingTemperature(os1x);\n  BME280.writeOversamplingHumidity(os1x);\n  BME280.writeOversamplingPressure(os1x);\n}\n\nvoid loop() {\n  // BME280\u30921\u5ea6\u3060\u3051\u6e2c\u5b9a\u3092\u884c\u3046\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\u3057\u8a08\u6e2c\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u6a5f\n  BME280.writeMode(smForced);\n  while (BME280.isMeasuring()) {\n    delay(1);\n  }\n\n  // BME280\u304b\u3089\u6e2c\u5b9a\u5024\u3092\u8aad\u307f\u53d6\u308b\n  BME280.readMeasurements();\n  temperature = BME280.getTemperature();\n  humidity = BME280.getHumidity();\n  pressure = BME280.getPressure();\n\n  // \u8aad\u307f\u53d6\u3063\u305f\u6e29\u5ea6\u3092\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\n  Serial.print(\"Temperature: \");\n  printFormattedFloat(temperature);\n  Serial.println(\"\u00baC\");\n\n  // \u3082\u3057\u73fe\u5728\u306e\u6e29\u5ea6\u304c\u95be\u5024\u3088\u308a\u3082\u9ad8\u3051\u308c\u3070\u4ee5\u4e0b\u3092\u5b9f\u884c\n  if (temperature > threshold) {\n    if (WiFi.status() != WL_CONNECTED) {\n      Serial.print(\"Connecting to \");\n      Serial.print(ssid);\n      Serial.println(\"...\");\n      WiFi.begin(ssid, password);\n\n      if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n        Serial.println(\"Failed\");\n        return;\n      } else {\n        Serial.println(\"WiFi connected\");\n        Serial.println(\"IP address: \");\n        Serial.println(WiFi.localIP());\n      }\n    }\n\n    Serial.print(\"Connecting to \");\n    Serial.println(host);\n    WiFiClient client;\n    if (!client.connect(host, 80)) {\n      Serial.println(\"Connection failed\");\n      return;\n    }\n\n    // IDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u30b5\u30fc\u30d0\u306e/data/{trigger-1\u306euuid}\u306bHTTP POST\n    String url = \"/data/\";\n    url += trigger_1_uuid;\n    client.print(String(\"POST \") + url + \" HTTP/1.1\\r\\n\" +\n                 \"Host: \" + host + \"\\r\\n\" +\n                 \"meshblu_auth_uuid: \" + trigger_1_uuid + \"\\r\\n\" +\n                 \"meshblu_auth_token: \" + trigger_1_token + \"\\r\\n\" +\n                 \"Connection: close\\r\\n\\r\\n\");\n    delay(100);\n\n    while (client.available()) {\n      String line = client.readStringUntil('\\r');\n      Serial.print(line);\n    }\n  }\n\n  delay(5000);\n}\n\n\n\n\u53c2\u7167\n\nmyThings\u3092\u306f\u3058\u3081\u3088\u3046 - Part7: \u30c8\u30ea\u30ac\u30fc\u306e\u95be\u5024\u76e3\u8996\u3092Raspberry Pi\u3067\u884c\u3046\nESP8266\u3067IDCF Cloud\u306b\u3064\u306a\u3050\n\n# \u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\n\nMasato Shimizu\u3055\u3093\u306e\u8a18\u4e8b\u300c[myThings\u3092\u306f\u3058\u3081\u3088\u3046 - Part7: \u30c8\u30ea\u30ac\u30fc\u306e\u95be\u5024\u76e3\u8996\u3092Raspberry Pi\u3067\u884c\u3046](http://qiita.com/masato/items/010bcfba67bd70838ce9)\u300d\u3067\u306f\u74b0\u5883\u30bb\u30f3\u30b5BME280\u304b\u3089\u8aad\u307f\u53d6\u3063\u305f\u6e29\u5ea6\u306e\u5024\u3068\u95be\u5024\u3092Raspberry Pi\u4e0a\u3067\u6bd4\u8f03\u3057\u3066\u30c8\u30ea\u30ac\u30fc\u3092\u767a\u706b\u3059\u308b\u65b9\u6cd5\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3068\u540c\u3058\u3053\u3068\u3092ESP8266\u3067\u884c\u3046\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nmyThings\u30a2\u30d7\u30ea\u306e\u8a2d\u5b9a\u306f\u5143\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5b9f\u88c5\n\n\u30d5\u30a1\u30a4\u30eb\u306f2\u3064\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u3084IDCF Cloud\u3067\u306eUUID\u3084\u30c8\u30fc\u30af\u30f3\u306a\u3069\u3001\u5404\u81ea\u3067\u5909\u66f4\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u3082\u306e\u306fconfig.h\u3068\u3044\u3046\u540d\u524d\u3067Arduino IDE\u4e0a\u3067\u5225\u306e\u30bf\u30d6\uff08\u5b9f\u4f53\u306f\u30bf\u30d6\u3068\u540c\u3058\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\uff09\u306b\u3057\u3066\u5206\u96e2\u3057\u3066\u3044\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-09-21 9.49.44.png](https://qiita-image-store.s3.amazonaws.com/0/92577/3ea587c7-7642-1ea1-059e-36362a07d3de.png)\n\n```cpp:config.h\n// Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306eSSID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\nconst char* ssid = \"********\";\nconst char* password = \"********\";\n\n// IDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u30b5\u30fc\u30d0\u306e\u60c5\u5831\nconst char* host = \"210.***.***.***\";\nconst char* trigger_1_uuid = \"********-****-****-****-************\";\nconst char* trigger_1_token = \"********\";\n\n// \u30c8\u30ea\u30ac\u30fc\u3092\u304b\u3051\u308b\u6e29\u5ea6\u306e\u95be\u5024\nconst float threshold = 27.0;\n```\n\n```cpp:IDCF_Trigger_HTTP\n#include <Wire.h>\n\n#include <ESP8266WiFi.h>\n#include <BME280_MOD-1022.h>\n\n#include \"config.h\"\n\nfloat temperature = 0.0;\nfloat humidity = 0.0;\nfloat pressure = 0.0;\n\nvoid printFormattedFloat(float val) {\n  char buffer[10];\n\n  dtostrf(val, 4, 2, buffer);\n  Serial.print(buffer);\n}\n\nvoid setup() {\n  // I2C\u306e\u901a\u4fe1\u3092\u958b\u59cb\n  // SDA: DIO4\n  // SCL: DIO14\n  Wire.begin(4, 14);\n\n  // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u958b\u59cb\n  Serial.begin(115200);\n\n  // BME280\u3092\u521d\u671f\u5316\n  BME280.readCompensationParams();\n\n  // \u30aa\u30fc\u30d0\u30fc\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u56de\u6570\u3092\u8a2d\u5b9a\n  BME280.writeOversamplingTemperature(os1x);\n  BME280.writeOversamplingHumidity(os1x);\n  BME280.writeOversamplingPressure(os1x);\n}\n\nvoid loop() {\n  // BME280\u30921\u5ea6\u3060\u3051\u6e2c\u5b9a\u3092\u884c\u3046\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\u3057\u8a08\u6e2c\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u6a5f\n  BME280.writeMode(smForced);\n  while (BME280.isMeasuring()) {\n    delay(1);\n  }\n\n  // BME280\u304b\u3089\u6e2c\u5b9a\u5024\u3092\u8aad\u307f\u53d6\u308b\n  BME280.readMeasurements();\n  temperature = BME280.getTemperature();\n  humidity = BME280.getHumidity();\n  pressure = BME280.getPressure();\n\n  // \u8aad\u307f\u53d6\u3063\u305f\u6e29\u5ea6\u3092\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\n  Serial.print(\"Temperature: \");\n  printFormattedFloat(temperature);\n  Serial.println(\"\u00baC\");\n\n  // \u3082\u3057\u73fe\u5728\u306e\u6e29\u5ea6\u304c\u95be\u5024\u3088\u308a\u3082\u9ad8\u3051\u308c\u3070\u4ee5\u4e0b\u3092\u5b9f\u884c\n  if (temperature > threshold) {\n    if (WiFi.status() != WL_CONNECTED) {\n      Serial.print(\"Connecting to \");\n      Serial.print(ssid);\n      Serial.println(\"...\");\n      WiFi.begin(ssid, password);\n\n      if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n        Serial.println(\"Failed\");\n        return;\n      } else {\n        Serial.println(\"WiFi connected\");\n        Serial.println(\"IP address: \");\n        Serial.println(WiFi.localIP());\n      }\n    }\n\n    Serial.print(\"Connecting to \");\n    Serial.println(host);\n    WiFiClient client;\n    if (!client.connect(host, 80)) {\n      Serial.println(\"Connection failed\");\n      return;\n    }\n\n    // IDCF\u30c1\u30e3\u30f3\u30cd\u30eb\u30b5\u30fc\u30d0\u306e/data/{trigger-1\u306euuid}\u306bHTTP POST\n    String url = \"/data/\";\n    url += trigger_1_uuid;\n    client.print(String(\"POST \") + url + \" HTTP/1.1\\r\\n\" +\n                 \"Host: \" + host + \"\\r\\n\" +\n                 \"meshblu_auth_uuid: \" + trigger_1_uuid + \"\\r\\n\" +\n                 \"meshblu_auth_token: \" + trigger_1_token + \"\\r\\n\" +\n                 \"Connection: close\\r\\n\\r\\n\");\n    delay(100);\n\n    while (client.available()) {\n      String line = client.readStringUntil('\\r');\n      Serial.print(line);\n    }\n  }\n\n  delay(5000);\n}\n```\n\n# \u53c2\u7167\n* [myThings\u3092\u306f\u3058\u3081\u3088\u3046 - Part7: \u30c8\u30ea\u30ac\u30fc\u306e\u95be\u5024\u76e3\u8996\u3092Raspberry Pi\u3067\u884c\u3046](http://qiita.com/masato/items/010bcfba67bd70838ce9)\n* [ESP8266\u3067IDCF Cloud\u306b\u3064\u306a\u3050](http://qiita.com/mayfair/items/bb09ad04942104be5578)\n"}