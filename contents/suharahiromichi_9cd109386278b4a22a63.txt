{"context": "\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u3057\u304f\u307f\u3092\u3064\u304f\u308b\n2015/08/11\n2015/08/16\n2015/09/12 \u300c\u30b9\u30e2\u30fc\u30eb SSReflect \u306e\u88fd\u4f5c\u300d\u304b\u3089\u6539\u984c\n@suharahiromichi\n\n\u306f\u3058\u3081\u306b\n\u547d\u984c(Prop\u578b)\u3092bool\u578b\u306e\u5f0f\u306b\u5909\u63db\u3059\u308b\u3053\u3068\uff08\u3068\u305d\u306e\u9006\uff09\u3092\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u547c\u3073\u307e\u3059\u3002\n\u4f8b\uff1a x = y \u3068 x == y\n\u547d\u984c\u3092bool\u578b\u306e\u8a08\u7b97\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001\u547d\u984c\u306e\u8a3c\u660e\u304c\u7c21\u5358\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u300c\u72ed\u3044\u7bc4\u56f2\u300d\u3067\u884c\u3044\u3001\u8a3c\u660e\u306e\u52b9\u7387\u5316\u3092\u56f3\u308b\u306e\u304c\u3001Coq\u306eSmall Scale Reflection (SSReflect) \u62e1\u5f35\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001SSReflect\u306e\u3057\u304f\u307f\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u306b\u3001Starndard Coq\u3067\u300cSSReflect\u3082\u3069\u304d\u300d\u3092\u4f5c\u308a\u3001Leibniz\u540c\u5024\u95a2\u4fc2\u3068bool\u5024\u7b49\u5f0f\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u3067\u304d\u308b\u307e\u3067\u3092\u793a\u3057\u307e\u3059\u3002\n\u305d\u308c\u3092\u901a\u3057\u3066\u3001Coq\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3(coersion)\u3084\u3001\u30ab\u30ce\u30cb\u30ab\u30eb\u30fb\u30b9\u30c8\u30e9\u30af\u30c1\u30e3(Canonical Structure)\u306e\u8aac\u660e\u3082\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u306e\u5728\u51e6\n\nMarkdown\u7248\u306f\u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u304b\u3089\u751f\u6210\u3057\u305f\u3002\nhttps://github.com/suharahiromichi/coq/tree/master/ssr/ssr_small_ssreflect_2.v\n\u4ee5\u4e0b\u306e\u7248\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u3002\n8.4pl3\n\n\n\u6982\u8981\n\n\u8aac\u660e\u306e\u6d41\u308c\n\nbool\u578b\u304b\u3089Prop\u578b\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\u3059\u308b\u3002\nReflect\u88dc\u984c\u306e\u8a3c\u660e\u3059\u308b\u3002iffP\u3001idP\u3002\neqType\u578b\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u3068\u3001eq_op (==) \u306e\u5b9a\u7fa9\u3001\u88dc\u984ceqP\u306e\u8a3c\u660e\u3092\u3059\u308b\u3002\n\u6c7a\u5b9a\u53ef\u80fd\u306abool\u5024\u7b49\u5f0f\u3068Leibniz\u540c\u5024\u95a2\u4fc2\u306e\u7b49\u4fa1\u6027\u306e\u8a3c\u660e\u3059\u308b\u3002\neqType\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\nView\u3068\u305d\u306e\u88dc\u984c\u306e\u8a3c\u660e\u3059\u308b\u3002elimT\u3001introT\u3002\nLeibniz\u540c\u5024\u95a2\u4fc2\u3068bool\u5024\u7b49\u5f0f\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\uff08x = y \u3068 x == y \u306e\u76f8\u4e92\u5909\u63db\uff09\u306e\u4f8b\u3002\n\u300c==\u300d\u306e\u5bfe\u79f0\u6027\u306e\u8a3c\u660e\u306e\u4f8b\u3002\n\n\nupdown\u578b\n\u3053\u306e\u3046\u3061\u30014.\u30685.\u30687.\u306f\u3001\u7b49\u5f0f\u306e\u4e21\u8fba\u306e\u578b\u3054\u3068\u306b\u304a\u3053\u306a\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u3053\u3067\u306f\u3001UP(up),OFF(off),DOWN(dn)\u306e\u4e09\u5024\u3092\u3068\u308bupdown\u578b\u3092\u4f8b\u3068\u3059\u308b\u3002\nupdown\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\nInductive updown : Set :=\n| up\n| off\n| dn.\n\n\n\nupdown\u578b\u3092\u5f15\u6570\u3068\u3059\u308b\u3001\u6c7a\u5b9a\u53ef\u80fd\u306abool\u5024\u7b49\u5f0f\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\nDefinition eqUD (x y : updown) : bool :=\n  match x, y with\n    | up,  up  => true\n    | off, off => true\n    | dn,  dn  => true\n    | _,   _   => false\n  end.\n\n\n\n\n\u8aac\u660e\n\n\u6e96\u5099\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n\nUnset Printing Implicit Defensive.\nSet Print All.\n(* Set Printing Coercions. *)\n\nModule SmallSSR.\n\n\n\u6700\u521d\u306e\u3075\u305f\u3064\u3067\u5f15\u6570\u306e\u4e00\u90e8\u3092\u7701\u7565\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\u305f\u3060\u3057\u3001\u4eca\u56de\u306f\u3053\u306e\u8a2d\u5b9a\u306e\u6709\u7121\u304c\u5f71\u97ff\u3057\u306a\u3044\u3088\u3046\u306b\u95a2\u6570\u7b49\u306e()\u3001{}\u3084@\u3092\u9069\u5207\u306b\u4f7f\u3044\u5206\u3051\u3066\u3044\u308b\u3002\uff08{}\u306f\u7701\u7565\u3067\u304d\u308b\u5f15\u6570\u3001@\u306f\u305d\u308c\u3092\u7701\u7565\u305b\u305a\u6307\u5b9a\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\uff09\nSet Printing Coercions \u306f\u3001\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u7701\u7565\u305b\u305a\u306b\u8868\u793a\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u304c\u3001*goals*\u3084*response*\u30d0\u30c3\u30d5\u30a1 \u306b\u3057\u304b\u5f71\u97ff\u3057\u306a\u3044\u3002\n\nbool\u578b\u304b\u3089Prop\u578b\uff08\u547d\u984c\u578b\uff09\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\nbool\u578b\u304b\u3089Prop\u578b\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\nDefinition is_true (x : bool) : Prop := x = true.\nCheck is_true : bool -> Prop.\nCheck true : bool. \nCheck is_true true : Prop.\n\n\n\nbool\u578b\u306e\u5024\u3092Prop\u578b\u306e\u5024\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\uff08\u57cb\u3081\u8fbc\u3080\u3068\u3082\u3044\u3046\uff09\u3002\u3053\u308c\u306f\u3001is_true : bool -> Prop \u3068\u3044\u3046\u95a2\u6570\u3092\u3001\u8868\u8a18\u4e0a\u3001\u7701\u7565\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3059\u308b\u3002\n\nFail Check true : Prop.                     (* \u307e\u3060\u3001is_true\u306f\u7701\u3051\u306a\u3044\u3002 *)\n\n\nbool\u578b\u304b\u3089Prop\u578b\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u5ba3\u8a00\u3059\u308b\u3002\n\nCoercion is_true : bool >-> Sortclass.      (* \u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u306e\u5ba3\u8a00 *)\nPrint Graph.                                (* [is_true] : bool >-> Sortclass *)\n\n\n\u3059\u308b\u3068\u3002\u3002\u3002\n\nCheck true : Prop.                          (* \u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002 *)\n\n\n\u3082\u3057\u3001Set Printing Coercions \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001*response*\u30d0\u30c3\u30d5\u30a1\u306b\u306f\u7701\u7565\u3055\u308c\u305fis_true\u304c\u88dc\u308f\u308c\u3066\u3001is_true true : Prop \u3068\u8868\u793a\u3055\u308c\u308b\u3002\n\nReflect \u3068 Reflect\u88dc\u984c\nreflect P b \u306f\u3001\u547d\u984cP\u3068bool\u5024b\u304c\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\nInductive reflect (P : Prop) : bool -> Prop :=\n| ReflectT :   P -> reflect P true\n| ReflectF : ~ P -> reflect P false.\n\n\n\n\u3075\u305f\u3064\u306eReflect\u88dc\u984c\u3092\u8a3c\u660e\u3057\u3066\u304a\u304f\u3002\u3042\u3068\u3067bool\u5024\u7b49\u5f0f\u304cLeibniz\u540c\u5024\u95a2\u4fc2\u304c\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068\u306e\u8a3c\u660e\u306b\u4f7f\u3046\u3002\n\n\u88dc\u984c iffP\nP<->Q \u306e\u3068\u304d\u3001reflect P b \u306a\u3089 reflect Q b\u3002\n\u8a3c\u660e\u306e\u6982\u8981\uff1a\n\n\nreflect P true  \u3067\u3001P->Q   \u306a\u3089\u3001reflect Q true\n\n\nreflect P false \u3067\u3001~P->~Q \u306a\u3089\u3001reflect Q false\n\n\nP->Q \u3060\u3051\u3067\u306f\u3060\u3081\u3067\u3001Q->P \u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\n\n\nLemma iffP : forall {P Q : Prop} {b : bool},\n               reflect P b -> (P -> Q) -> (Q -> P) -> reflect Q b.\nProof.\n  intros P Q b HPb HPQ HQP.\n  case HPb; intros HP.\n  - apply ReflectT. auto.\n  - apply ReflectF. auto.\nQed.\n\n\n\n\n\u88dc\u984c idP\nreflect (is_true b) b \u306f\u3001\u6210\u7acb\u3059\u308b\u3002\n\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3001forall b : bool, reflect b b \u3068\u66f8\u3044\u3066\u3082\u3088\u3044\u3002\n\nLemma idP : forall {b : bool}, reflect (is_true b) b.\nProof.\n  intros b.\n  case b.\n  - now apply ReflectT.\n  - now apply ReflectF.\nQed.\n\n\n\n\neqType\u578b\u30af\u30e9\u30b9\nbool\u5024\u7b49\u5f0f\u304c\u5b9a\u7fa9\u3055\u308c\u3001\u305d\u308c\u3068 Leibniz\u540c\u5024\u95a2\u4fc2\u306e\u7b49\u4fa1\u6027\u304c\u8a3c\u660e\u3055\u308c\u305f\u578b\u306e\u30af\u30e9\u30b9\u3067\u3042\u308b\u3002\n\nRecord mixin_of (T : Type) :=\n  EqMixin {\n      op : T -> T -> bool;                         (* op\u306fbool\u5024\u7b49\u5f0f *)\n      a : forall x y : T, reflect (x = y) (op x y) (* op\u306fLeibniz\u540c\u5024\u95a2\u4fc2\u3068\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068 *)\n    }.\n\nRecord eqType :=\n  EqType {\n      sort : Type;                          (* \u88dc\u8db31\u53c2\u7167 *)\n      m : mixin_of sort\n    }.\n\nCheck @op : forall T : Type, mixin_of T -> T -> T -> bool.\n\n\n\n\u5b9f\u969b\u306b\u4f7f\u3046\u305f\u3081\u306b\u3001eq_op (==) \u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\u30ec\u30b3\u30fc\u30c9\u306e\u30bb\u30ec\u30af\u30bfop\u306b\u3001\u30ec\u30b3\u30fc\u30c9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9(m T)\u3092\u9069\u7528\u3059\u308b\u3002\u305f\u3060\u3057\u3001(sort T)\u306f\u3001mixin_of\u306e\u578b\u5f15\u6570\u3067\u3001T:=(sort T)\u3068\u306a\u308b\u3002\n\nDefinition eq_op {T : eqType} := @op (sort T) (m T).\nNotation \"x == y\" := (eq_op x y) (at level 70, no associativity).\n\nCheck eq_op : (sort _) -> (sort _) -> bool.\n\n\neq_op \u306f3\u3064\u306e\u5f15\u6570\u3092\u53d6\u308b\u304c\u3001{}\u3067\u56f2\u3093\u3060\u6700\u521d\u306e\u5f15\u6570T\u306fimplicit\u306b\u306a\u308b\u3002\n== \u306e\u3068\u304d\u3082\u6700\u521d\u306e\u5f15\u6570T\u306f\u7701\u7565\u3055\u308c\u308b\u3002\n\nCheck @eq_op : forall (T : eqType), (sort T) -> (sort T) -> bool.\n\n\n\u3057\u304b\u3057\u3001@eq_op\u3068\u3059\u308b\u3068\u3001\u5f15\u6570T\u3092\u6307\u5b9a\u3057\u305f\u308a\u3001Check\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u88dc\u984c eqP\neq_op \u306f Leibniz\u540c\u5024\u95a2\u4fc2\u3068\u7b49\u4fa1\u3067\u3042\u308b\u3068\u3044\u3046\u88dc\u984c\u3092\u8a3c\u660e\u3057\u3066\u304a\u304f\u3002\u3053\u306e\u88dc\u984c\u306f\u6700\u5f8c\u306b\u4f7f\u3046\u3002\n\nLemma eqP : forall {T : eqType} {x y : sort T},\n              reflect (x = y) (eq_op x y).\nProof.\n  intro T.\n  case T.\n  intros sort m x y.\n  case m.\n  intros op a.\n  apply a.\nQed.\n\n\n\n\nupdown\u578b\u306e\u4f8b\n\nbool\u5024\u7b49\u5f0f\u3068Leibniz\u540c\u5024\u95a2\u4fc2\u306e\u7b49\u4fa1\u6027\u3092\u8a3c\u660e\u3059\u308b\u3002\n\nLemma updown_eqP : forall (x y : updown), reflect (x = y) (eqUD x y).\nProof.\n  intros x y.\n  now apply (iffP idP); case x; case y.\n  Undo 1.\n  Check @iffP (is_true (eqUD x y))  (x = y) (eqUD x y) (@idP (eqUD x y)).\n  apply (iffP idP).\n  - case x; case y; auto;                   (* eqUD x y -> x = y *)\n    (intros H; inversion H).\n  - unfold is_true.\n    case x; case y; auto;                   (* x = y ->  eqUD x y = true *)\n    (intros H; inversion H).\nQed.\n\n\n\neq \u3068 eqUD \u306e\u9055\u3044\u3002\n\nCheck eq   : updown -> updown -> Prop.    (* Leibniz\u540c\u5024\u95a2\u4fc2 *)\nCheck eqUD : updown -> updown -> bool.    (* bool\u5024\u7b49\u5f0f *)\nCheck eqUD : updown -> updown -> Prop.    (* bool\u578b\u304b\u3089Prop\u578b\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u304c\u6709\u52b9\u306a\u305f\u3081\u3002 *)\n\n\n\n\nupdown_eqType\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3002\neqType\u578b\u30af\u30e9\u30b9\u304b\u3089updown_eqType\u578b\u3092\u4f5c\u308b\u3002\n\nDefinition updown_eqMixin := @EqMixin updown eqUD updown_eqP.\nDefinition updown_eqType := @EqType updown updown_eqMixin.\n\nFail Check eq_op up up : bool.          (* \uff01\uff1f *)\nFail Check up == up : bool.             (* \uff01\uff1f *)\n\n\n\neq_op \u306bupdown\u578b\u306e\u5024\u304c\u66f8\u3051\u306a\u3044\uff01\uff1f\n\u4ee5\u4e0b\u306b\u8aac\u660e\u3059\u308b\u3002\neq_op (==) \u306f\u3001\u6b21\u306e\u578b\u3092\u6301\u3064\u3002\n\nCheck @eq_op : forall T : eqType, sort T -> sort T -> bool.\n\n\n\u6700\u521d\u306e\u5f15\u6570\u3092\u7701\u7565\u305b\u305a\u306b\u3001updown_eqType \u3068\u66f8\u3044\u305f\u5834\u5408\u3001\n\nCheck @eq_op updown_eqType : (sort updown_eqType) -> (sort updown_eqType) -> bool.\n\n\nsort updown_eqType \u306f updown \u3067\u3042\u308b\u304b\u3089\u3001\n\nCheck @eq_op updown_eqType : updown -> updown -> bool.\n\n\n\u4ee5\u964d\u306e\u5f15\u6570\u306b\u306fupdown\u578b\u306e\u5024\u3092\u76f4\u63a5\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nCheck @eq_op updown_eqType up up : bool.\n\n\n\u3057\u304b\u3057\u3001\u6700\u521d\u306e\u5f15\u6570T:=updown_eqType\u7701\u7565\u3057\u3066\u3001\u4ee5\u964d\u306e\u5f15\u6570\u306btrue\u3092\u66f8\u3044\u305f\u5834\u5408\u3001\n\nFail Check eq_op up up.\n\n\nError: The term \"up\" has type \"updown\" while it is expected to have type \"sort ?241\"\n\u6700\u521d\u306e\u5f15\u6570\u304cupdown_eqType\u3067\u3042\u308b\u3053\u3068\u304c\u5224\u3089\u306a\u3044\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u5224\u3089\u306a\u3044\u3002eqType\u578b\u3067\u3042\u308b\u3053\u3068\u306f\u5224\u3063\u3066\u3082\u3001\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3059\u3079\u3066\u30c1\u30a7\u30c3\u30af\u3059\u308b\u308f\u3051\u306b\u306f\u3044\u304b\u306a\u3044\u305f\u3081\u3002\n\u307e\u305f\u3001sort\u306f\u3001\u4ee5\u4e0b\u306e\u578b\u3067\u3042\u308a\u3001\u3053\u308c\u3082 updown_eqType \u304b\u3089 updown \u3092\u6c42\u3081\u308b\u3053\u3068\u306f\u3067\u304d\u3066\u3082\u3001\u305d\u306e\u9006\u306f\u3067\u304d\u306a\u3044\u3002\n\nCheck sort : eqType -> Type.\nCheck sort updown_eqType : Type.\nEval compute in sort updown_eqType.         (* updown *)\n\n\n\n\u305d\u3053\u3067\u3001Canonical Structure\u30b3\u30de\u30f3\u30c9\u306b\u3088\u3063\u3066\u3001updown_eqType\u3092eqType\u578b\u306e\u5024\u3068\u3057\u3066\u5f15\u6570\u306e\u63a8\u8ad6\u306b\u4f7f\u3046\u3088\u3046\u3001\u767b\u9332\u3059\u308b\u3002\u3053\u306e\u3068\u304dupdown_eqType\u306feqType\u306eCanonical Instance\u307e\u305f\u306f\u3001\u5358\u306bCanonical\u3068\u547c\u3076\u3002\n\u3072\u3068\u305f\u3073\u3001\u6700\u521d\u306e\u5f15\u6570\u304cT:=updown_eqType\u3067\u3042\u308b\u3068\u5224\u308c\u3070\u3001\uff08\u7701\u7565\u3057\u306a\u3044\u3068\u304d\u3068\u540c\u69d8\u306b\uff09sort updown_eqType \u306f updown \u306a\u306e\u3067\u3001\u4ee5\u964d\u306e\u5f15\u6570\u306bupdown\u578b\u306e\u5024\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3064\u307e\u308a\u3001\nupdown_eqType\u3092Canonical\u306b\u3059\u308b\u3068\u3001\u7701\u7565\u3055\u308c\u305f\u6700\u521d\u306e\uff08eqType\u578b\u306e\uff09\u5f15\u6570\u306f\u3001updown_eqType \u3067\u3042\u308b\u3068\u63a8\u8ad6\u3067\u304d\u308b\u306e\u3067\u3001\u6700\u521d\u306e\u5f15\u6570\u3092\u7701\u7565\u3057\u305feq_op\u307e\u305f\u306f == \u306bupdown\u578b\u306e\u5024\u3092\u66f8\u3044\u3066\u3082\u3088\u3044\u3002\n\u4ee5\u4e0a\u3088\u308a\u3001\u5b9f\u969b\u306b\u3001Canonical Structure\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u3001updown_eqType \u3092 eqType\u306eCanonical(Canonical Instance)\u306b\u3059\u308b\u3002\n\nCanonical Structure updown_eqType.            (* \u88dc\u8db32 *)\nPrint Canonical Projections.                  (* updown <- sort ( updown_eqType ) *)\n\n\n\n\u3059\u308b\u3068\u3002\u3002\u3002\nupdown\u578b\u306e\u5024\u306b\u5bfe\u3057\u3066\u3001== \u304c\u4f7f\u7528\u53ef\u80fd\u306b\u306a\u308b\u3002\uff08eq_op\u306e\u6700\u521d\u306e\u5f15\u6570 T:=updown_eqType \u304c\u7701\u7565\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\uff09\n\nCheck eq_op up up : bool.\nCheck up == up : bool.\n\n(* \u5ff5\u306e\u305f\u3081\u3002 *)\nCheck up : updown.\nCheck up : sort updown_eqType.\n\n\n\n\u86c7\u8db3\uff1a\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u8868\u8a18\u4e0a\u3067\u3001\u578b\u3092\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u7701\u7565\u3067\u304d\u308b\u3053\u3068\u3067\u3042\u308b\u3002\u4e00\u65b9\u3001\u30ab\u30ce\u30cb\u30ab\u30eb\u30fb\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u30fc\u306f\u3001\u7701\u7565\u3055\u308c\u305f\u5f15\u6570\u3092\u63a8\u8ad6\u3059\u308b\u305f\u3081\u306e\u30d2\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n\nView\u3068\u305d\u306e\u88dc\u984c\nSSReflect\u3067\u306f\u3001apply/V \u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u306eV\u3092View\u3068\u547c\u3076\u3002View\u306e\u307fapply\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001View Hint\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u305f\u88dc\u984c\u304c\u81ea\u52d5\u7684\u306b\u88dc\u308f\u308c\u308b\uff08\u5834\u5408\u304c\u3042\u308b\uff09\u3002\nView Hint\u3068\u3057\u3066\u4f7f\u308f\u308c\u308b\u3053\u3068\u306e\u591a\u3044\u88dc\u984c\u306belimT\u3068introT\u304c\u3042\u308b\u3002\u305d\u308c\u3092\u8a3c\u660e\u3057\u3066\u304a\u304f\u3002\n\nLemma introTF :\n  forall {P : Prop} {b c : bool},\n    reflect P b ->\n    (match c with\n       | true => P\n       | false => ~ P\n     end) ->\n    b = c.\nProof.\n  intros P b c Hb.\n  case c; case Hb; intros H1 H2.\n  - reflexivity.\n  - exfalso. now apply H1.\n  - exfalso. now apply H2.\n  - reflexivity.\nQed.\n\nLemma elimTF :\n  forall {P : Prop} {b c : bool},\n    reflect P b ->\n    b = c ->\n    (match c with\n       | true => P\n       | false => ~ P\n     end).\nProof.\n  intros P b c Hb Hbc.\n  rewrite <- Hbc.\n  now case Hb; intro H; apply H.\nQed.\n\nLemma elimT :\n  forall {P : Prop} {b : bool}, reflect P b -> b -> P.\nProof.\n  intros P b Hb.\n  Check (@elimTF P b true Hb).\n  now apply (@elimTF P b true Hb).\nQed.\n\nLemma introT :\n  forall {P : Prop} {b : bool}, reflect P b -> P -> b.\nProof.\n  intros P b Hb.\n  Check (@introTF P b true Hb).\n  now apply (@introTF P b true Hb).\nQed.\n\n\n\n\nLeibniz\u540c\u5024\u95a2\u4fc2\u3068bool\u5024\u7b49\u5f0f\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\uff08x = y \u3068 x == y \u306e\u76f8\u4e92\u5909\u63db\uff09\u306e\u4f8b\nSSReflect\u3067\u306f\u3001\u30b4\u30fc\u30eb\u304cx = y\u306e\u3068\u304d\u3001apply/eqP\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067x == y\u306b\u5909\u63db\u3055\u308c\u308b\u3002\u3053\u306e\u3068\u304d\u3001View Hint\u3068\u3057\u3066\u3001elimT \u304c\u4f7f\u308f\u308c\u308b\u3002\u3059\u306a\u308f\u3061\u3001apply (elimT eqP) \u3067\u3042\u308b\u3002\n\u307e\u305f\u3001\u30b4\u30fc\u30eb\u304cx == y\u306e\u3068\u304d\u3001\u304a\u306a\u3058\u304fapply/eqP\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067x = y\u306b\u5909\u63db\u3055\u308c\u308b\u3002\u3053\u306e\u3068\u304d\u3001View Hint\u3068\u3057\u3066\u3001introT \u304c\u4f7f\u308f\u308c\u308b\u3002\u3059\u306a\u308f\u3061\u3001apply (introT eqP) \u3067\u3042\u308b\u3002\n\u30b4\u30fc\u30eb\u306b\u9069\u7528\u3059\u308b\u4f8b\n\nGoal forall x y : updown, x == y -> x = y.\nProof.\n  intros x y H.\n  apply (elimT eqP).                        (* apply/eqP *)\n  (* Goal : x == y *)\n  apply (introT eqP).                       (* apply/eqP *)\n  (* Goal : x = y *)\n  apply (elimT eqP).                        (* apply/eqP *)\n  (* Goal : x == y *)\n  now apply H.\nQed.\n\n\n\n\u524d\u63d0H\u306b\u9069\u7528\u3059\u308b\u4f8b\n\nGoal forall x y : updown, x == y -> x = y.\nProof.\n  intros x y H.\n  Check (elimT eqP H) : x = y.\n  rewrite (elimT eqP H).\n  Undo 1.\n  apply (elimT eqP) in H.\n  rewrite H.\n  reflexivity.\nQed.\n\n\n\n\n\u300c==\u300d\u306e\u5bfe\u79f0\u6027\u306e\u8a3c\u660e\n\u3053\u308c\u306f\u3001Leibniz\u540c\u5024\u95a2\u4fc2\u3092\u4f7f\u3063\u3066\u8a3c\u660e\u3067\u304d\u308b\u3002\n\u5fc5\u8981\u306aView\u88dc\u984c\u3092\u8a3c\u660e\u3059\u308b\u3002\n\nLemma equivPif :\n  forall {P Q : Prop} {b : bool},\n    reflect P b -> (Q -> P) -> (P -> Q) -> \n    (match b with\n       | true => Q\n       | false => ~ Q\n     end).\nProof.\n  intros P Q b Hb.\n  case Hb; auto.\nQed.\n\n\n\n\u30b4\u30fc\u30eb\u306e\u300c=\u300d\u306e\u4e21\u8fba\u306fbool\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nLemma ud_eq_sym (x y : updown) : (x == y) = (y == x).\nProof.\n  apply (introTF eqP).                      (* Goal : if y == x then x = y else x <> y *)\n  now apply (equivPif eqP).                 (* Goal 1 : x = y -> y = x *)\n                                            (* Goal 2 : y = x -> x = y *)\nQed.\n\n\n\neqType\u4e00\u822c\u3067\u8a3c\u660e\u3059\u308b\u5834\u5408\n\nLemma eq_sym (T : eqType) (x y : sort T) : (x == y) = (y == x).\nProof.\n  apply (introTF eqP).\n  now apply (equivPif eqP).\nQed.\n\n\n\n\u30ab\u30ce\u30cb\u30ab\u30eb\u30fb\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u304c\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5358\u306bapply\u3059\u308c\u3070\u3088\u3044\u3002\n\nGoal forall (x y : updown), (x == y) = (y == x).\nProof.\n  intros x y.\n  apply eq_sym.\nQed.\n\n\n\n\n\u88dc\u8db31\nEqType \u306e sort : Type \u3092 sort :> Type \u3068\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001eqType\u304b\u3089Type\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u6709\u52b9\u306b\u3067\u304d\u308b\u3002\n[sort] : eqType >-> Sortclass\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\nLemma eqP (T : eqType) : forall {x y : sort T},...\n\u306esort\u3092\u7701\u7565\u3057\u3066\u3001\nLemma eqP (T : eqType) : forall {x y : T},...\n\u3068\u8868\u8a18\u3067\u304d\u308b\u3002\u307e\u305f\u3001eq_op \u304c\u3001\nCheck @eq_op updown_eqType : updown_eqType -> updown_eqType -> bool.\n\u3068\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u30ab\u30ce\u30cb\u30ab\u30eb\u306b\u3088\u308b\u5f15\u6570\u306e\u63a8\u8ad6\u3068\u306f\u5168\u304f\u5225\u306e\u3053\u3068\u3067\u3042\u308b\u3002\u4eca\u56de\u306f\u3001\u305d\u308c\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306b\u3001eqType\u306esort\u306b\u3088\u308b\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3001sort\u306b\u3088\u308beqType\u304b\u3089Type\u3078\u306e\u5909\u63db\u306f\u3001\u3059\u3079\u3066\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u88dc\u8db32\nDefinition\u3068Canonical Structure\u30b3\u30de\u30f3\u30c9\u3092\u307e\u3068\u3081\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3002\nCanonical Structure updown_eqType := @EqType updown bool_eqMixin.\n\u307e\u305f\u3001SSReflect\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nCanonical updown_eqType := @EqType updown bool_eqMixin.\n\u3044\u305a\u308c\u306e\u5834\u5408\u3082\u3001(@\u3092\u66f8\u304b\u306a\u3044\u3053\u3068\u3067\uff09EqType\u306e\u7b2c1\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nEnd SmallSSR.\n\n\n\nSSReflect\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3042\u308b\u5834\u5408\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n(*\nModule UseSSR.\n\n\n\n\nSSReflect\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\n\nupdown\u578b\u306e\u4f8b\n\u30b9\u30e2\u30fc\u30eb SSReflect \u3067\u5b9a\u7fa9\u3057\u305fupdown_eqType\u578b\u3092\u672c\u7269\u306eSSReflect\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u308b\u3002eqType\u578b\u30af\u30e9\u30b9\u306f\u3001SSReflect\u306eeqtype.v\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u4f7f\u3046\u3002\n\nRequire Import ssreflect ssrfun ssrbool eqtype ssrnat.\n\nLemma updown_eqP (x y : updown) : reflect (x = y) (eqUD x y).\nProof.\n  by apply (iffP idP); case x; case y.\nQed.\nDefinition updown_eqMixin := EqMixin updown_eqP.\nCanonical updown_eqType := EqType updown updown_eqMixin.\n\n\n\nSSReflect\u306b\u304a\u3044\u3066\u3001\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u3001Leibniz\u540c\u5024\u95a2\u4fc2\u3068bool\u5024\u7b49\u5f0f\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0a\u306e\u5b9a\u7fa9\uff08\u7b49\u4fa1\u6027\u306e\u8a3c\u660e\u3068\u3001\u578b\u306e\u5b9a\u7fa9\uff09\u3060\u3051\u3092\u3059\u308c\u3070\u3088\u3044\u3002\n\nGoal forall x y : updown, x == y -> x = y.\nProof.\n  move=> x y H.\n  apply/eqP.                                (* apply (elimT eqP) *)\n  (* Goal : x == y *)\n  apply/eqP.                                (* apply (introT eqP) *)\n  (* Goal : x = y *)\n  apply/eqP.                                (* apply (elimT eqP) *)\n  (* Goal : x == y *)\n  by apply H.\nQed.\n\nLemma ud_eq_sym (x y : updown) : (x == y) = (y == x).\nProof.\n  by apply/eqP/eqP.\nQed.\n\n\n\nSSReflect\u306eeqType\u306e\u5b9a\u7fa9\u3067\u306f\u3001\u88dc\u8db31\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u304c\u6709\u52b9\u306b\u306a\u308b\u306e\u3067\u3001sort T \u3068\u3057\u306a\u3044\u3002\n\nLemma eq_sym (T : eqType) (x y : T) : (x == y) = (y == x).\nProof.\n    by apply/eqP/eqP.\nQed.\n\nGoal forall (x y : updown), (x == y) = (y == x).\nProof.\n  intros x y.\n  apply eq_sym.\nQed.\n\nEnd UseSSR.\n*)\n\n\n\n\n\u307e\u3068\u3081\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u3057\u304f\u307f\u3092\u3064\u304f\u3063\u3066\u307f\u305f\u3002\neqType\u578b\u3092\u3064\u304b\u3046\u3002\n\u305d\u306e\u3068\u304d\u306b\u3001Leibniz\u540c\u5024\u95a2\u4fc2(x = y) \u3068\u3001bool\u5024\u7b49\u5f0f(x == y)\u304c\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068\u3092\u8a3c\u660e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u300c==\u300d\u3092\u4f7f\u3046\u305f\u3081\u306b\u3001\u30ab\u30ce\u30cb\u30ab\u30eb\uff08\u30ab\u30ce\u30cb\u30ab\u30eb\u30fb\u30b9\u30c8\u30e9\u30af\u30c1\u30e3Canonical Structure)\u3092\u4f7f\u3046\u3002\n\n\n\u53c2\u8003\u6587\u732e\n\n\u30a2\u30d5\u30a7\u30eb\u30c8 \u30ec\u30ca\u30eb\u30c9, \u300c\u5b9a\u7406\u8a3c\u660e\u652f\u63f4\u7cfb Coq \u306b\u3088\u308b\u5f62\u5f0f\u691c\u8a3c\u300d,https://staff.aist.go.jp/reynald.affeldt/ssrcoq/coq-kyoto2015.pdf\nAssia Mahboubi, Enrico Tassi, \"Canonical Structures for the working Coq user\",https://hal.inria.fr/hal-00816703v1/document\nBeta Ziliani, Matthieu Sozeau, \"A Unification Algorithm for COQ Featuring Universe Polymorphism and Overloading\",https://www.mpi-sws.org/~beta/papers/unicoq.pdf\nmathink, \u300ctree@SSReflect\u300dhttp://www.mathink.net/program/ssr_tree.html\n@suharahiromichi, \u300cSSReflect\u306eView\u3068View Hint\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\u300dhttp://qiita.com/suharahiromichi/items/02c7f42809f2d20ba11a\n\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u3057\u304f\u307f\u3092\u3064\u304f\u308b\n======\n2015/08/11\n\n2015/08/16\n\n2015/09/12 \u300c\u30b9\u30e2\u30fc\u30eb SSReflect \u306e\u88fd\u4f5c\u300d\u304b\u3089\u6539\u984c\n\n@suharahiromichi\n\n\n# \u306f\u3058\u3081\u306b\n\u547d\u984c(Prop\u578b)\u3092bool\u578b\u306e\u5f0f\u306b\u5909\u63db\u3059\u308b\u3053\u3068\uff08\u3068\u305d\u306e\u9006\uff09\u3092\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u547c\u3073\u307e\u3059\u3002\n\u4f8b\uff1a ``x = y`` \u3068 ``x == y``\n\u547d\u984c\u3092bool\u578b\u306e\u8a08\u7b97\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001\u547d\u984c\u306e\u8a3c\u660e\u304c\u7c21\u5358\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u300c\u72ed\u3044\u7bc4\u56f2\u300d\u3067\u884c\u3044\u3001\u8a3c\u660e\u306e\u52b9\u7387\u5316\u3092\u56f3\u308b\u306e\u304c\u3001Coq\u306eSmall Scale Reflection (SSReflect) \u62e1\u5f35\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001SSReflect\u306e\u3057\u304f\u307f\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u306b\u3001Starndard Coq\u3067\u300cSSReflect\u3082\u3069\u304d\u300d\u3092\u4f5c\u308a\u3001Leibniz\u540c\u5024\u95a2\u4fc2\u3068bool\u5024\u7b49\u5f0f\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u3067\u304d\u308b\u307e\u3067\u3092\u793a\u3057\u307e\u3059\u3002\n\u305d\u308c\u3092\u901a\u3057\u3066\u3001Coq\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3(coersion)\u3084\u3001\u30ab\u30ce\u30cb\u30ab\u30eb\u30fb\u30b9\u30c8\u30e9\u30af\u30c1\u30e3(Canonical Structure)\u306e\u8aac\u660e\u3082\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# \u4eca\u56de\u306e\u30bd\u30fc\u30b9\u306e\u5728\u51e6\n\n- Markdown\u7248\u306f\u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u304b\u3089\u751f\u6210\u3057\u305f\u3002\nhttps://github.com/suharahiromichi/coq/tree/master/ssr/ssr_small_ssreflect_2.v\n\n- \u4ee5\u4e0b\u306e\u7248\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u3002\n``8.4pl3``\n\n\n# \u6982\u8981\n\n## \u8aac\u660e\u306e\u6d41\u308c\n\n1. bool\u578b\u304b\u3089Prop\u578b\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n2. Reflect\u88dc\u984c\u306e\u8a3c\u660e\u3059\u308b\u3002iffP\u3001idP\u3002\n3. eqType\u578b\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u3068\u3001eq_op (``==``) \u306e\u5b9a\u7fa9\u3001\u88dc\u984ceqP\u306e\u8a3c\u660e\u3092\u3059\u308b\u3002\n4. \u6c7a\u5b9a\u53ef\u80fd\u306abool\u5024\u7b49\u5f0f\u3068Leibniz\u540c\u5024\u95a2\u4fc2\u306e\u7b49\u4fa1\u6027\u306e\u8a3c\u660e\u3059\u308b\u3002\n5. eqType\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n6. View\u3068\u305d\u306e\u88dc\u984c\u306e\u8a3c\u660e\u3059\u308b\u3002elimT\u3001introT\u3002\n7. Leibniz\u540c\u5024\u95a2\u4fc2\u3068bool\u5024\u7b49\u5f0f\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\uff08x = y \u3068 x == y \u306e\u76f8\u4e92\u5909\u63db\uff09\u306e\u4f8b\u3002\n8. \u300c==\u300d\u306e\u5bfe\u79f0\u6027\u306e\u8a3c\u660e\u306e\u4f8b\u3002\n\n\n## updown\u578b\n\u3053\u306e\u3046\u3061\u30014.\u30685.\u30687.\u306f\u3001\u7b49\u5f0f\u306e\u4e21\u8fba\u306e\u578b\u3054\u3068\u306b\u304a\u3053\u306a\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u3053\u3067\u306f\u3001UP(up),OFF(off),DOWN(dn)\u306e\u4e09\u5024\u3092\u3068\u308bupdown\u578b\u3092\u4f8b\u3068\u3059\u308b\u3002\n\nupdown\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n\n```coq:\n\nInductive updown : Set :=\n| up\n| off\n| dn.\n\n\n```\nupdown\u578b\u3092\u5f15\u6570\u3068\u3059\u308b\u3001\u6c7a\u5b9a\u53ef\u80fd\u306abool\u5024\u7b49\u5f0f\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n\n```coq:\n\nDefinition eqUD (x y : updown) : bool :=\n  match x, y with\n    | up,  up  => true\n    | off, off => true\n    | dn,  dn  => true\n    | _,   _   => false\n  end.\n\n\n```\n\n# \u8aac\u660e\n\n## \u6e96\u5099\n\n\n```coq:\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n\nUnset Printing Implicit Defensive.\nSet Print All.\n(* Set Printing Coercions. *)\n\nModule SmallSSR.\n\n```\n\u6700\u521d\u306e\u3075\u305f\u3064\u3067\u5f15\u6570\u306e\u4e00\u90e8\u3092\u7701\u7565\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\u305f\u3060\u3057\u3001\u4eca\u56de\u306f\u3053\u306e\u8a2d\u5b9a\u306e\u6709\u7121\u304c\u5f71\u97ff\u3057\u306a\u3044\u3088\u3046\u306b\u95a2\u6570\u7b49\u306e``()``\u3001``{}``\u3084``@``\u3092\u9069\u5207\u306b\u4f7f\u3044\u5206\u3051\u3066\u3044\u308b\u3002\uff08``{}``\u306f\u7701\u7565\u3067\u304d\u308b\u5f15\u6570\u3001``@``\u306f\u305d\u308c\u3092\u7701\u7565\u305b\u305a\u6307\u5b9a\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\uff09\n\n``Set Printing Coercions`` \u306f\u3001\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u7701\u7565\u305b\u305a\u306b\u8868\u793a\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u304c\u3001``*goals*``\u3084``*response*``\u30d0\u30c3\u30d5\u30a1 \u306b\u3057\u304b\u5f71\u97ff\u3057\u306a\u3044\u3002\n\n\n## bool\u578b\u304b\u3089Prop\u578b\uff08\u547d\u984c\u578b\uff09\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\nbool\u578b\u304b\u3089Prop\u578b\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n\n```coq:\n\nDefinition is_true (x : bool) : Prop := x = true.\nCheck is_true : bool -> Prop.\nCheck true : bool. \nCheck is_true true : Prop.\n\n\n```\nbool\u578b\u306e\u5024\u3092Prop\u578b\u306e\u5024\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\uff08\u57cb\u3081\u8fbc\u3080\u3068\u3082\u3044\u3046\uff09\u3002\u3053\u308c\u306f\u3001``is_true : bool -> Prop`` \u3068\u3044\u3046\u95a2\u6570\u3092\u3001\u8868\u8a18\u4e0a\u3001\u7701\u7565\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3059\u308b\u3002\n\n\n\n```coq:\n\nFail Check true : Prop.                     (* \u307e\u3060\u3001is_true\u306f\u7701\u3051\u306a\u3044\u3002 *)\n\n```\nbool\u578b\u304b\u3089Prop\u578b\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u5ba3\u8a00\u3059\u308b\u3002\n\n\n```coq:\n\nCoercion is_true : bool >-> Sortclass.      (* \u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u306e\u5ba3\u8a00 *)\nPrint Graph.                                (* [is_true] : bool >-> Sortclass *)\n\n```\n\u3059\u308b\u3068\u3002\u3002\u3002\n\n\n```coq:\n\nCheck true : Prop.                          (* \u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002 *)\n\n```\n\u3082\u3057\u3001``Set Printing Coercions`` \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001``*response*``\u30d0\u30c3\u30d5\u30a1\u306b\u306f\u7701\u7565\u3055\u308c\u305fis_true\u304c\u88dc\u308f\u308c\u3066\u3001``is_true true : Prop`` \u3068\u8868\u793a\u3055\u308c\u308b\u3002\n\n\n## Reflect \u3068 Reflect\u88dc\u984c\n\n``reflect P b`` \u306f\u3001\u547d\u984cP\u3068bool\u5024b\u304c\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\n\n```coq:\n\nInductive reflect (P : Prop) : bool -> Prop :=\n| ReflectT :   P -> reflect P true\n| ReflectF : ~ P -> reflect P false.\n\n\n```\n\u3075\u305f\u3064\u306eReflect\u88dc\u984c\u3092\u8a3c\u660e\u3057\u3066\u304a\u304f\u3002\u3042\u3068\u3067bool\u5024\u7b49\u5f0f\u304cLeibniz\u540c\u5024\u95a2\u4fc2\u304c\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068\u306e\u8a3c\u660e\u306b\u4f7f\u3046\u3002\n\n\n### \u88dc\u984c iffP\n\n``P<->Q`` \u306e\u3068\u304d\u3001``reflect P b`` \u306a\u3089 ``reflect Q b``\u3002\n\u8a3c\u660e\u306e\u6982\u8981\uff1a\n\n- ``reflect P true``  \u3067\u3001``P->Q``   \u306a\u3089\u3001``reflect Q true``\n- ``reflect P false`` \u3067\u3001``~P->~Q`` \u306a\u3089\u3001``reflect Q false``\n- ``P->Q`` \u3060\u3051\u3067\u306f\u3060\u3081\u3067\u3001``Q->P`` \u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\n\n\n```coq:\n\nLemma iffP : forall {P Q : Prop} {b : bool},\n               reflect P b -> (P -> Q) -> (Q -> P) -> reflect Q b.\nProof.\n  intros P Q b HPb HPQ HQP.\n  case HPb; intros HP.\n  - apply ReflectT. auto.\n  - apply ReflectF. auto.\nQed.\n\n\n```\n\n### \u88dc\u984c idP\n\n``reflect (is_true b) b`` \u306f\u3001\u6210\u7acb\u3059\u308b\u3002\n\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3001``forall b : bool, reflect b b`` \u3068\u66f8\u3044\u3066\u3082\u3088\u3044\u3002\n\n\n```coq:\n\nLemma idP : forall {b : bool}, reflect (is_true b) b.\nProof.\n  intros b.\n  case b.\n  - now apply ReflectT.\n  - now apply ReflectF.\nQed.\n\n\n```\n\n## eqType\u578b\u30af\u30e9\u30b9\nbool\u5024\u7b49\u5f0f\u304c\u5b9a\u7fa9\u3055\u308c\u3001\u305d\u308c\u3068 Leibniz\u540c\u5024\u95a2\u4fc2\u306e\u7b49\u4fa1\u6027\u304c\u8a3c\u660e\u3055\u308c\u305f\u578b\u306e\u30af\u30e9\u30b9\u3067\u3042\u308b\u3002\n\n\n```coq:\n\nRecord mixin_of (T : Type) :=\n  EqMixin {\n      op : T -> T -> bool;                         (* op\u306fbool\u5024\u7b49\u5f0f *)\n      a : forall x y : T, reflect (x = y) (op x y) (* op\u306fLeibniz\u540c\u5024\u95a2\u4fc2\u3068\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068 *)\n    }.\n\nRecord eqType :=\n  EqType {\n      sort : Type;                          (* \u88dc\u8db31\u53c2\u7167 *)\n      m : mixin_of sort\n    }.\n\nCheck @op : forall T : Type, mixin_of T -> T -> T -> bool.\n\n\n```\n\u5b9f\u969b\u306b\u4f7f\u3046\u305f\u3081\u306b\u3001eq_op (``==``) \u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\u30ec\u30b3\u30fc\u30c9\u306e\u30bb\u30ec\u30af\u30bfop\u306b\u3001\u30ec\u30b3\u30fc\u30c9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9(m T)\u3092\u9069\u7528\u3059\u308b\u3002\u305f\u3060\u3057\u3001(sort T)\u306f\u3001mixin_of\u306e\u578b\u5f15\u6570\u3067\u3001T:=(sort T)\u3068\u306a\u308b\u3002\n\n\n```coq:\n\nDefinition eq_op {T : eqType} := @op (sort T) (m T).\nNotation \"x == y\" := (eq_op x y) (at level 70, no associativity).\n\nCheck eq_op : (sort _) -> (sort _) -> bool.\n\n```\neq_op \u306f3\u3064\u306e\u5f15\u6570\u3092\u53d6\u308b\u304c\u3001``{}``\u3067\u56f2\u3093\u3060\u6700\u521d\u306e\u5f15\u6570T\u306fimplicit\u306b\u306a\u308b\u3002\n``==`` \u306e\u3068\u304d\u3082\u6700\u521d\u306e\u5f15\u6570T\u306f\u7701\u7565\u3055\u308c\u308b\u3002\n\n\n\n```coq:\n\nCheck @eq_op : forall (T : eqType), (sort T) -> (sort T) -> bool.\n\n```\n\u3057\u304b\u3057\u3001``@eq_op``\u3068\u3059\u308b\u3068\u3001\u5f15\u6570T\u3092\u6307\u5b9a\u3057\u305f\u308a\u3001Check\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n### \u88dc\u984c eqP\neq_op \u306f Leibniz\u540c\u5024\u95a2\u4fc2\u3068\u7b49\u4fa1\u3067\u3042\u308b\u3068\u3044\u3046\u88dc\u984c\u3092\u8a3c\u660e\u3057\u3066\u304a\u304f\u3002\u3053\u306e\u88dc\u984c\u306f\u6700\u5f8c\u306b\u4f7f\u3046\u3002\n\n\n```coq:\n\nLemma eqP : forall {T : eqType} {x y : sort T},\n              reflect (x = y) (eq_op x y).\nProof.\n  intro T.\n  case T.\n  intros sort m x y.\n  case m.\n  intros op a.\n  apply a.\nQed.\n\n\n```\n\n## updown\u578b\u306e\u4f8b\n\n\n### bool\u5024\u7b49\u5f0f\u3068Leibniz\u540c\u5024\u95a2\u4fc2\u306e\u7b49\u4fa1\u6027\u3092\u8a3c\u660e\u3059\u308b\u3002\n\n\n```coq:\n\nLemma updown_eqP : forall (x y : updown), reflect (x = y) (eqUD x y).\nProof.\n  intros x y.\n  now apply (iffP idP); case x; case y.\n  Undo 1.\n  Check @iffP (is_true (eqUD x y))  (x = y) (eqUD x y) (@idP (eqUD x y)).\n  apply (iffP idP).\n  - case x; case y; auto;                   (* eqUD x y -> x = y *)\n    (intros H; inversion H).\n  - unfold is_true.\n    case x; case y; auto;                   (* x = y ->  eqUD x y = true *)\n    (intros H; inversion H).\nQed.\n\n\n```\neq \u3068 eqUD \u306e\u9055\u3044\u3002\n\n\n```coq:\n\nCheck eq   : updown -> updown -> Prop.    (* Leibniz\u540c\u5024\u95a2\u4fc2 *)\nCheck eqUD : updown -> updown -> bool.    (* bool\u5024\u7b49\u5f0f *)\nCheck eqUD : updown -> updown -> Prop.    (* bool\u578b\u304b\u3089Prop\u578b\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u304c\u6709\u52b9\u306a\u305f\u3081\u3002 *)\n\n\n```\n\n### updown_eqType\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3002\neqType\u578b\u30af\u30e9\u30b9\u304b\u3089updown_eqType\u578b\u3092\u4f5c\u308b\u3002\n\n\n```coq:\n\nDefinition updown_eqMixin := @EqMixin updown eqUD updown_eqP.\nDefinition updown_eqType := @EqType updown updown_eqMixin.\n\nFail Check eq_op up up : bool.          (* \uff01\uff1f *)\nFail Check up == up : bool.             (* \uff01\uff1f *)\n\n\n```\neq_op \u306bupdown\u578b\u306e\u5024\u304c\u66f8\u3051\u306a\u3044\uff01\uff1f\n\u4ee5\u4e0b\u306b\u8aac\u660e\u3059\u308b\u3002\neq_op (``==``) \u306f\u3001\u6b21\u306e\u578b\u3092\u6301\u3064\u3002\n\n\n```coq:\n\nCheck @eq_op : forall T : eqType, sort T -> sort T -> bool.\n\n```\n\u6700\u521d\u306e\u5f15\u6570\u3092\u7701\u7565\u305b\u305a\u306b\u3001updown_eqType \u3068\u66f8\u3044\u305f\u5834\u5408\u3001\n\n\n```coq:\n\nCheck @eq_op updown_eqType : (sort updown_eqType) -> (sort updown_eqType) -> bool.\n\n```\n\n``sort updown_eqType`` \u306f updown \u3067\u3042\u308b\u304b\u3089\u3001\n\n\n```coq:\n\nCheck @eq_op updown_eqType : updown -> updown -> bool.\n\n```\n\u4ee5\u964d\u306e\u5f15\u6570\u306b\u306fupdown\u578b\u306e\u5024\u3092\u76f4\u63a5\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n```coq:\n\nCheck @eq_op updown_eqType up up : bool.\n\n```\n\u3057\u304b\u3057\u3001\u6700\u521d\u306e\u5f15\u6570``T:=updown_eqType``\u7701\u7565\u3057\u3066\u3001\u4ee5\u964d\u306e\u5f15\u6570\u306btrue\u3092\u66f8\u3044\u305f\u5834\u5408\u3001\n\n\n```coq:\n\nFail Check eq_op up up.\n\n```\n\n``Error: The term \"up\" has type \"updown\" while it is expected to have type \"sort ?241\"``\n\u6700\u521d\u306e\u5f15\u6570\u304cupdown_eqType\u3067\u3042\u308b\u3053\u3068\u304c\u5224\u3089\u306a\u3044\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u5224\u3089\u306a\u3044\u3002eqType\u578b\u3067\u3042\u308b\u3053\u3068\u306f\u5224\u3063\u3066\u3082\u3001\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3059\u3079\u3066\u30c1\u30a7\u30c3\u30af\u3059\u308b\u308f\u3051\u306b\u306f\u3044\u304b\u306a\u3044\u305f\u3081\u3002\n\u307e\u305f\u3001sort\u306f\u3001\u4ee5\u4e0b\u306e\u578b\u3067\u3042\u308a\u3001\u3053\u308c\u3082 updown_eqType \u304b\u3089 updown \u3092\u6c42\u3081\u308b\u3053\u3068\u306f\u3067\u304d\u3066\u3082\u3001\u305d\u306e\u9006\u306f\u3067\u304d\u306a\u3044\u3002\n\n\n```coq:\n\nCheck sort : eqType -> Type.\nCheck sort updown_eqType : Type.\nEval compute in sort updown_eqType.         (* updown *)\n\n\n```\n\u305d\u3053\u3067\u3001Canonical Structure\u30b3\u30de\u30f3\u30c9\u306b\u3088\u3063\u3066\u3001updown_eqType\u3092eqType\u578b\u306e\u5024\u3068\u3057\u3066\u5f15\u6570\u306e\u63a8\u8ad6\u306b\u4f7f\u3046\u3088\u3046\u3001\u767b\u9332\u3059\u308b\u3002\u3053\u306e\u3068\u304dupdown_eqType\u306feqType\u306eCanonical Instance\u307e\u305f\u306f\u3001\u5358\u306bCanonical\u3068\u547c\u3076\u3002\n\u3072\u3068\u305f\u3073\u3001\u6700\u521d\u306e\u5f15\u6570\u304c``T:=updown_eqType``\u3067\u3042\u308b\u3068\u5224\u308c\u3070\u3001\uff08\u7701\u7565\u3057\u306a\u3044\u3068\u304d\u3068\u540c\u69d8\u306b\uff09``sort updown_eqType`` \u306f updown \u306a\u306e\u3067\u3001\u4ee5\u964d\u306e\u5f15\u6570\u306bupdown\u578b\u306e\u5024\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3064\u307e\u308a\u3001\nupdown_eqType\u3092Canonical\u306b\u3059\u308b\u3068\u3001\u7701\u7565\u3055\u308c\u305f\u6700\u521d\u306e\uff08eqType\u578b\u306e\uff09\u5f15\u6570\u306f\u3001updown_eqType \u3067\u3042\u308b\u3068\u63a8\u8ad6\u3067\u304d\u308b\u306e\u3067\u3001\u6700\u521d\u306e\u5f15\u6570\u3092\u7701\u7565\u3057\u305feq_op\u307e\u305f\u306f ``==`` \u306bupdown\u578b\u306e\u5024\u3092\u66f8\u3044\u3066\u3082\u3088\u3044\u3002\n\u4ee5\u4e0a\u3088\u308a\u3001\u5b9f\u969b\u306b\u3001Canonical Structure\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u3001updown_eqType \u3092 eqType\u306eCanonical(Canonical Instance)\u306b\u3059\u308b\u3002\n\n\n```coq:\n\nCanonical Structure updown_eqType.            (* \u88dc\u8db32 *)\nPrint Canonical Projections.                  (* updown <- sort ( updown_eqType ) *)\n\n\n```\n\u3059\u308b\u3068\u3002\u3002\u3002\nupdown\u578b\u306e\u5024\u306b\u5bfe\u3057\u3066\u3001``==`` \u304c\u4f7f\u7528\u53ef\u80fd\u306b\u306a\u308b\u3002\uff08eq_op\u306e\u6700\u521d\u306e\u5f15\u6570 ``T:=updown_eqType`` \u304c\u7701\u7565\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\uff09\n\n\n```coq:\n\nCheck eq_op up up : bool.\nCheck up == up : bool.\n\n(* \u5ff5\u306e\u305f\u3081\u3002 *)\nCheck up : updown.\nCheck up : sort updown_eqType.\n\n\n```\n\u86c7\u8db3\uff1a\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u8868\u8a18\u4e0a\u3067\u3001\u578b\u3092\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u7701\u7565\u3067\u304d\u308b\u3053\u3068\u3067\u3042\u308b\u3002\u4e00\u65b9\u3001\u30ab\u30ce\u30cb\u30ab\u30eb\u30fb\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u30fc\u306f\u3001\u7701\u7565\u3055\u308c\u305f\u5f15\u6570\u3092\u63a8\u8ad6\u3059\u308b\u305f\u3081\u306e\u30d2\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n\n\n## View\u3068\u305d\u306e\u88dc\u984c\nSSReflect\u3067\u306f\u3001``apply/V`` \u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u306eV\u3092View\u3068\u547c\u3076\u3002View\u306e\u307fapply\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001View Hint\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u305f\u88dc\u984c\u304c\u81ea\u52d5\u7684\u306b\u88dc\u308f\u308c\u308b\uff08\u5834\u5408\u304c\u3042\u308b\uff09\u3002\nView Hint\u3068\u3057\u3066\u4f7f\u308f\u308c\u308b\u3053\u3068\u306e\u591a\u3044\u88dc\u984c\u306b``elimT``\u3068``introT``\u304c\u3042\u308b\u3002\u305d\u308c\u3092\u8a3c\u660e\u3057\u3066\u304a\u304f\u3002\n\n\n\n```coq:\n\nLemma introTF :\n  forall {P : Prop} {b c : bool},\n    reflect P b ->\n    (match c with\n       | true => P\n       | false => ~ P\n     end) ->\n    b = c.\nProof.\n  intros P b c Hb.\n  case c; case Hb; intros H1 H2.\n  - reflexivity.\n  - exfalso. now apply H1.\n  - exfalso. now apply H2.\n  - reflexivity.\nQed.\n\nLemma elimTF :\n  forall {P : Prop} {b c : bool},\n    reflect P b ->\n    b = c ->\n    (match c with\n       | true => P\n       | false => ~ P\n     end).\nProof.\n  intros P b c Hb Hbc.\n  rewrite <- Hbc.\n  now case Hb; intro H; apply H.\nQed.\n\nLemma elimT :\n  forall {P : Prop} {b : bool}, reflect P b -> b -> P.\nProof.\n  intros P b Hb.\n  Check (@elimTF P b true Hb).\n  now apply (@elimTF P b true Hb).\nQed.\n\nLemma introT :\n  forall {P : Prop} {b : bool}, reflect P b -> P -> b.\nProof.\n  intros P b Hb.\n  Check (@introTF P b true Hb).\n  now apply (@introTF P b true Hb).\nQed.\n\n\n```\n\n## Leibniz\u540c\u5024\u95a2\u4fc2\u3068bool\u5024\u7b49\u5f0f\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\uff08x = y \u3068 x == y \u306e\u76f8\u4e92\u5909\u63db\uff09\u306e\u4f8b\nSSReflect\u3067\u306f\u3001\u30b4\u30fc\u30eb\u304c``x = y``\u306e\u3068\u304d\u3001``apply/eqP``\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067``x == y``\u306b\u5909\u63db\u3055\u308c\u308b\u3002\u3053\u306e\u3068\u304d\u3001View Hint\u3068\u3057\u3066\u3001elimT \u304c\u4f7f\u308f\u308c\u308b\u3002\u3059\u306a\u308f\u3061\u3001``apply (elimT eqP)`` \u3067\u3042\u308b\u3002\n\u307e\u305f\u3001\u30b4\u30fc\u30eb\u304c``x == y``\u306e\u3068\u304d\u3001\u304a\u306a\u3058\u304f``apply/eqP``\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067``x = y``\u306b\u5909\u63db\u3055\u308c\u308b\u3002\u3053\u306e\u3068\u304d\u3001View Hint\u3068\u3057\u3066\u3001introT \u304c\u4f7f\u308f\u308c\u308b\u3002\u3059\u306a\u308f\u3061\u3001``apply (introT eqP)`` \u3067\u3042\u308b\u3002\n\n\n \u30b4\u30fc\u30eb\u306b\u9069\u7528\u3059\u308b\u4f8b\n\n\n```coq:\n\nGoal forall x y : updown, x == y -> x = y.\nProof.\n  intros x y H.\n  apply (elimT eqP).                        (* apply/eqP *)\n  (* Goal : x == y *)\n  apply (introT eqP).                       (* apply/eqP *)\n  (* Goal : x = y *)\n  apply (elimT eqP).                        (* apply/eqP *)\n  (* Goal : x == y *)\n  now apply H.\nQed.\n\n\n```\n\n \u524d\u63d0H\u306b\u9069\u7528\u3059\u308b\u4f8b\n\n\n```coq:\n\nGoal forall x y : updown, x == y -> x = y.\nProof.\n  intros x y H.\n  Check (elimT eqP H) : x = y.\n  rewrite (elimT eqP H).\n  Undo 1.\n  apply (elimT eqP) in H.\n  rewrite H.\n  reflexivity.\nQed.\n\n\n```\n\n## \u300c==\u300d\u306e\u5bfe\u79f0\u6027\u306e\u8a3c\u660e\n\u3053\u308c\u306f\u3001Leibniz\u540c\u5024\u95a2\u4fc2\u3092\u4f7f\u3063\u3066\u8a3c\u660e\u3067\u304d\u308b\u3002\n\n\u5fc5\u8981\u306aView\u88dc\u984c\u3092\u8a3c\u660e\u3059\u308b\u3002\n\n\n```coq:\n\nLemma equivPif :\n  forall {P Q : Prop} {b : bool},\n    reflect P b -> (Q -> P) -> (P -> Q) -> \n    (match b with\n       | true => Q\n       | false => ~ Q\n     end).\nProof.\n  intros P Q b Hb.\n  case Hb; auto.\nQed.\n\n\n```\n\u30b4\u30fc\u30eb\u306e\u300c=\u300d\u306e\u4e21\u8fba\u306fbool\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n```coq:\n\nLemma ud_eq_sym (x y : updown) : (x == y) = (y == x).\nProof.\n  apply (introTF eqP).                      (* Goal : if y == x then x = y else x <> y *)\n  now apply (equivPif eqP).                 (* Goal 1 : x = y -> y = x *)\n                                            (* Goal 2 : y = x -> x = y *)\nQed.\n\n\n```\neqType\u4e00\u822c\u3067\u8a3c\u660e\u3059\u308b\u5834\u5408\n\n\n```coq:\n\nLemma eq_sym (T : eqType) (x y : sort T) : (x == y) = (y == x).\nProof.\n  apply (introTF eqP).\n  now apply (equivPif eqP).\nQed.\n\n\n```\n\u30ab\u30ce\u30cb\u30ab\u30eb\u30fb\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u304c\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5358\u306bapply\u3059\u308c\u3070\u3088\u3044\u3002\n\n\n```coq:\n\nGoal forall (x y : updown), (x == y) = (y == x).\nProof.\n  intros x y.\n  apply eq_sym.\nQed.\n\n\n```\n\n# \u88dc\u8db31\nEqType \u306e ``sort : Type`` \u3092 ``sort :> Type`` \u3068\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001eqType\u304b\u3089Type\u3078\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u6709\u52b9\u306b\u3067\u304d\u308b\u3002\n\n``[sort] : eqType >-> Sortclass``\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\n\n``Lemma eqP (T : eqType) : forall {x y : sort T},...``\n\u306esort\u3092\u7701\u7565\u3057\u3066\u3001\n\n``Lemma eqP (T : eqType) : forall {x y : T},...``\n\u3068\u8868\u8a18\u3067\u304d\u308b\u3002\u307e\u305f\u3001eq_op \u304c\u3001\n\n``Check @eq_op updown_eqType : updown_eqType -> updown_eqType -> bool.``\n\u3068\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u30ab\u30ce\u30cb\u30ab\u30eb\u306b\u3088\u308b\u5f15\u6570\u306e\u63a8\u8ad6\u3068\u306f\u5168\u304f\u5225\u306e\u3053\u3068\u3067\u3042\u308b\u3002\u4eca\u56de\u306f\u3001\u305d\u308c\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306b\u3001eqType\u306esort\u306b\u3088\u308b\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3001sort\u306b\u3088\u308beqType\u304b\u3089Type\u3078\u306e\u5909\u63db\u306f\u3001\u3059\u3079\u3066\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\n# \u88dc\u8db32\nDefinition\u3068Canonical Structure\u30b3\u30de\u30f3\u30c9\u3092\u307e\u3068\u3081\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n``Canonical Structure updown_eqType := @EqType updown bool_eqMixin.``\n\u307e\u305f\u3001SSReflect\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n``Canonical updown_eqType := @EqType updown bool_eqMixin.``\n\u3044\u305a\u308c\u306e\u5834\u5408\u3082\u3001(@\u3092\u66f8\u304b\u306a\u3044\u3053\u3068\u3067\uff09EqType\u306e\u7b2c1\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n\n```coq:\n\nEnd SmallSSR.\n\n\n```\n\n SSReflect\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3042\u308b\u5834\u5408\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n```coq:\n\n(*\nModule UseSSR.\n\n\n```\n\n# SSReflect\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\n\n## updown\u578b\u306e\u4f8b\n\u30b9\u30e2\u30fc\u30eb SSReflect \u3067\u5b9a\u7fa9\u3057\u305fupdown_eqType\u578b\u3092\u672c\u7269\u306eSSReflect\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u308b\u3002eqType\u578b\u30af\u30e9\u30b9\u306f\u3001SSReflect\u306e``eqtype.v``\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u4f7f\u3046\u3002\n\n\n```coq:\n\nRequire Import ssreflect ssrfun ssrbool eqtype ssrnat.\n\nLemma updown_eqP (x y : updown) : reflect (x = y) (eqUD x y).\nProof.\n  by apply (iffP idP); case x; case y.\nQed.\nDefinition updown_eqMixin := EqMixin updown_eqP.\nCanonical updown_eqType := EqType updown updown_eqMixin.\n\n\n```\nSSReflect\u306b\u304a\u3044\u3066\u3001\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u3001Leibniz\u540c\u5024\u95a2\u4fc2\u3068bool\u5024\u7b49\u5f0f\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0a\u306e\u5b9a\u7fa9\uff08\u7b49\u4fa1\u6027\u306e\u8a3c\u660e\u3068\u3001\u578b\u306e\u5b9a\u7fa9\uff09\u3060\u3051\u3092\u3059\u308c\u3070\u3088\u3044\u3002\n\n\n\n```coq:\n\nGoal forall x y : updown, x == y -> x = y.\nProof.\n  move=> x y H.\n  apply/eqP.                                (* apply (elimT eqP) *)\n  (* Goal : x == y *)\n  apply/eqP.                                (* apply (introT eqP) *)\n  (* Goal : x = y *)\n  apply/eqP.                                (* apply (elimT eqP) *)\n  (* Goal : x == y *)\n  by apply H.\nQed.\n\nLemma ud_eq_sym (x y : updown) : (x == y) = (y == x).\nProof.\n  by apply/eqP/eqP.\nQed.\n\n\n```\nSSReflect\u306eeqType\u306e\u5b9a\u7fa9\u3067\u306f\u3001\u88dc\u8db31\u306e\u30b3\u30a2\u30fc\u30b7\u30e7\u30f3\u304c\u6709\u52b9\u306b\u306a\u308b\u306e\u3067\u3001sort T \u3068\u3057\u306a\u3044\u3002\n\n\n```coq:\n\nLemma eq_sym (T : eqType) (x y : T) : (x == y) = (y == x).\nProof.\n    by apply/eqP/eqP.\nQed.\n\nGoal forall (x y : updown), (x == y) = (y == x).\nProof.\n  intros x y.\n  apply eq_sym.\nQed.\n\nEnd UseSSR.\n*)\n\n\n```\n\n# \u307e\u3068\u3081\n\n1. \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u3057\u304f\u307f\u3092\u3064\u304f\u3063\u3066\u307f\u305f\u3002\n\n2. eqType\u578b\u3092\u3064\u304b\u3046\u3002\n\n3. \u305d\u306e\u3068\u304d\u306b\u3001Leibniz\u540c\u5024\u95a2\u4fc2(x = y) \u3068\u3001bool\u5024\u7b49\u5f0f(x == y)\u304c\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068\u3092\u8a3c\u660e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n3. \u300c==\u300d\u3092\u4f7f\u3046\u305f\u3081\u306b\u3001\u30ab\u30ce\u30cb\u30ab\u30eb\uff08\u30ab\u30ce\u30cb\u30ab\u30eb\u30fb\u30b9\u30c8\u30e9\u30af\u30c1\u30e3Canonical Structure)\u3092\u4f7f\u3046\u3002\n\n\n# \u53c2\u8003\u6587\u732e\n\n1. \u30a2\u30d5\u30a7\u30eb\u30c8 \u30ec\u30ca\u30eb\u30c9, \u300c\u5b9a\u7406\u8a3c\u660e\u652f\u63f4\u7cfb Coq \u306b\u3088\u308b\u5f62\u5f0f\u691c\u8a3c\u300d,https://staff.aist.go.jp/reynald.affeldt/ssrcoq/coq-kyoto2015.pdf\n\n2. Assia Mahboubi, Enrico Tassi, \"Canonical Structures for the working Coq user\",https://hal.inria.fr/hal-00816703v1/document\n\n2. Beta Ziliani, Matthieu Sozeau, \"A Unification Algorithm for COQ Featuring Universe Polymorphism and Overloading\",https://www.mpi-sws.org/~beta/papers/unicoq.pdf\n\n3. mathink, \u300ctree@SSReflect\u300dhttp://www.mathink.net/program/ssr_tree.html\n\n2. @suharahiromichi, \u300cSSReflect\u306eView\u3068View Hint\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\u300dhttp://qiita.com/suharahiromichi/items/02c7f42809f2d20ba11a\n\n\n```\n", "tags": ["Coq", "ssreflect", "\u8a3c\u660e", "MathComp"]}