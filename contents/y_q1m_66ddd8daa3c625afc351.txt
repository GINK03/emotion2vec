{"context": "\n\n\u6982\u8981\nJava \u3067 YAML \u3092\u6271\u3063\u3066\u307f\u307e\u3059\u3002YAML \u64cd\u4f5c\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u3001 @hryshtk \u3055\u3093\u306e\u300cJava\u306eYAML\u30e9\u30a4\u30d6\u30e9\u30ea\u6bd4\u8f03\u300d\u3092\u62dd\u898b\u3057\u305f\u3068\u3053\u308d\u3001SnakeYAML\u304c\u3088\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001YAML\u304c\u3069\u3093\u306a\u3082\u306e\u304b\u306b\u3064\u3044\u3066\u306f YAML(Wikipedia) \u3078\u306e\u30ea\u30f3\u30af\u3092\u8a18\u3059\u306b\u3068\u3069\u3081\u307e\u3059\u3002\n\n\u4f9d\u5b58\u306e\u8ffd\u52a0\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3060\u3068 oss.sonatype \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001Maven Central\u306b\u3082\u7f6e\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u307e\u3059\u3002\n\nbuild.gradle\ndependencies {\n    compile 'org.yaml:snakeyaml:1.17'\n\n\n\n\u6e96\u5099\ndump \u306b\u3059\u308b\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\nPerson.java\npackage jp.toastkid.verification;\n\npublic class Person {\n    String firstName;\n    String familyName;\n    String nationality;\n    int age;\n}\n\n\n\ndump\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 yaml \u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\n\nClient\nimport org.yaml.snakeyaml.Yaml;\n\npublic class SnakeYamlVerificaation {\n    public static void main(final String[] args) {\n        final Person p = new Person();\n        p.firstName    = \"John\";\n        p.familyName   = \"Kay\";\n        p.nationality  = \"UK\";\n        p.age          = 28;\n        final Yaml y = new Yaml();\n        System.out.println(y.dump(p));\n    }\n}\n\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u2026\u2026\n\n\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u8a18\u306e\u901a\u308a\u5931\u6557\u3059\u308b\nException in thread \"main\" org.yaml.snakeyaml.error.YAMLException: No JavaBean properties found in jp.toastkid.verification.Person\n    at org.yaml.snakeyaml.introspector.PropertyUtils.getPropertiesMap(PropertyUtils.java:87)\n    at org.yaml.snakeyaml.introspector.PropertyUtils.createPropertySet(PropertyUtils.java:110)\n    at org.yaml.snakeyaml.introspector.PropertyUtils.getProperties(PropertyUtils.java:102)\n    at org.yaml.snakeyaml.introspector.PropertyUtils.getProperties(PropertyUtils.java:94)\n    at org.yaml.snakeyaml.representer.Representer.getProperties(Representer.java:246)\n    at org.yaml.snakeyaml.representer.Representer$RepresentJavaBean.representData(Representer.java:50)\n    at org.yaml.snakeyaml.representer.BaseRepresenter.representData(BaseRepresenter.java:105)\n    at org.yaml.snakeyaml.representer.BaseRepresenter.represent(BaseRepresenter.java:64)\n    at org.yaml.snakeyaml.Yaml.dumpAll(Yaml.java:242)\n    at org.yaml.snakeyaml.Yaml.dumpAll(Yaml.java:206)\n    at org.yaml.snakeyaml.Yaml.dump(Yaml.java:181)\n    at jp.toastkid.verification.SnakeYamlVerificaation.main(SnakeYamlVerificaation.java:12)\n\n\nSnakeYAML\u3067\u6271\u3046\u30af\u30e9\u30b9\u306b\u306f Getter & Setter \u304c\u8981\u308b\u3088\u3046\u3067\u3059\u3002 Person \u30af\u30e9\u30b9\u306b Getter & Setter \u3092(Eclipse \u306e\u81ea\u52d5\u751f\u6210\u6a5f\u80fd\u306b\u3088\u308a)\u8ffd\u52a0\u3057\u3066\u518d\u5ea6\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n!!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\n\n\n\nload\n\u5148\u307b\u3069\u306e\u5b9f\u884c\u7d50\u679c\u306e\u6587\u5b57\u5217\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5fa9\u5143\u3057\u3066\u307f\u307e\u3059\u3002\n\nload\nfinal Yaml y = new Yaml();\nfinal Person loaded = (Person) y.load(\"!!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\");\nSystem.out.printf(\"%s %s(%s), age = %d\", loaded.firstName, loaded.familyName, loaded.nationality, loaded.age);\n\n\n\u8aad\u307f\u8fbc\u3080\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u306f\u3061\u3087\u3063\u3068\u4e0d\u4fbf\u306b\u601d\u3063\u305f\u3089\u3001\u3061\u3083\u3093\u3068 loadAs \u3068\u3044\u3046 class \u3092\u5f15\u6570\u306b\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u901a\u5e38\u306f\u3053\u3061\u3089\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\nloadAs\nfinal Person p1 = y.loadAs(\"!!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\", Person.class);\n\n\n\n\u5b9f\u884c\u7d50\u679c\nJohn Kay(UK), age = 28\n\n\n\n\u8907\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6271\u3046\n\ndump\nPerson \u3092\u591a\u5c11\u62e1\u5f35\u3057(\u5f8c\u8ff0)\u3001List \u306b\u8a70\u3081\u3066 dump \u3057\u3066\u307f\u307e\u3059\u3002\nfinal List<Person> people = Arrays.asList(\n                new Person.Builder().setFirstName(\"John\").setFamilyName(\"Kay\")\n                        .setNationality(\"UK\").setAge(28).build(),\n                new Person.Builder().setFirstName(\"Don\").setFamilyName(\"Hall\")\n                        .setNationality(\"US\").setAge(28).build(),\n                new Person.Builder().setFirstName(\"Ken\").setFamilyName(\"Rodriguez\")\n                        .setNationality(\"AR\").setAge(28).build());\nfinal Yaml y = new Yaml();\nSystem.out.println(y.dump(people));\n\n\n\u5b9f\u884c\u7d50\u679c\n- !!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\n- !!jp.toastkid.verification.Person {age: 28, familyName: Hall, firstName: Don, nationality: US}\n- !!jp.toastkid.verification.Person {age: 28, familyName: Rodriguez, firstName: Ken,\n  nationality: AR}\n\n\n\n\u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 dump \u3057\u305f yaml \u3092 load\n\u3053\u3046\u3044\u3046\u6642\u306b\u30d2\u30a2\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u4f7f\u3048\u306a\u3044 Java \u306f\u5730\u5473\u306b\u3064\u3089\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nfinal List<Person> loaded = y.loadAs(\n        \"- !!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\\n\"\n        + \"- !!jp.toastkid.verification.Person {age: 28, familyName: Hall, firstName: Don, nationality: US}\\n\"\n        + \"- !!jp.toastkid.verification.Person {age: 28, familyName: Rodriguez, firstName: Ken,\"\n        + \"  nationality: AR}\", List.class);\nloaded.forEach(p -> System.out.printf(\"%s %s(%s), age = %d\\n\",\n                p.getFirstName(), p.getFamilyName(), p.getNationality(), p.getAge())\n\n\n\u5b9f\u884c\u7d50\u679c\nJohn Kay(UK), age = 28\nDon Hall(US), age = 28\nKen Rodriguez(AR), age = 28\n\n\n\nPerson \u30af\u30e9\u30b9\u306e\u4fee\u6b63\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3092\u3084\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b Builder Pattern \u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u3069\u3046\u3082 Setter \u3068 Getter \u306f\u4e21\u65b9\u6301\u305f\u305b\u306a\u3044\u3068\u30c0\u30e1\u306a\u3088\u3046\u3067\u3001\u304a\u307e\u3051\u306b load \u3059\u308b\u969b\u306b\u306f\u7a7a\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5fc5\u8981\u306a\u305f\u3081\u3001\u3053\u3093\u306a\u306b\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u2026\u2026\n\nPerson.java\npublic class Person {\n    private String firstName;\n    private String familyName;\n    private String nationality;\n    private int    age;\n\n    public static class Builder {\n\n        private String firstName;\n        private String familyName;\n        private String nationality;\n        private int    age;\n\n        public Builder setFirstName(final String firstName) {\n            this.firstName = firstName;\n            return this;\n        }\n\n        public Builder setFamilyName(final String familyName) {\n            this.familyName = familyName;\n            return this;\n        }\n\n        public Builder setNationality(final String nationality) {\n            this.nationality = nationality;\n            return this;\n        }\n\n        public Builder setAge(final int age) {\n            this.age = age;\n            return this;\n        }\n\n        public Person build() {\n            return new Person(this);\n        }\n    }\n\n    public Person() {\n        /* NOP. */\n    }\n\n    private Person(final Builder b) {\n        this.firstName   = b.firstName;\n        this.familyName  = b.familyName;\n        this.nationality = b.nationality;\n        this.age         = b.age;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getFamilyName() {\n        return familyName;\n    }\n\n    public String getNationality() {\n        return nationality;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setFirstName(final String firstName) {\n        this.firstName = firstName;\n    }\n\n    public void setFamilyName(final String familyName) {\n        this.familyName = familyName;\n    }\n\n    public void setNationality(final String nationality) {\n        this.nationality = nationality;\n    }\n\n    public void setAge(final int age) {\n        this.age = age;\n    }\n\n}\n\n\n\nYAML\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\n\u4e0b\u8a18\u306e\u3088\u3046\u306a yaml \u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3001\n\npeople.yaml\n- !!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\n- !!jp.toastkid.verification.Person {age: 28, familyName: Hall, firstName: Don, nationality: US}\n- !!jp.toastkid.verification.Person {age: 28, familyName: Rodriguez, firstName: Ken,\n  nationality: AR}\n\n\nloadAs \u306e\u5f15\u6570\u306b FileInputStream \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\npublic static void main(final String[] args) throws IOException {\n    final Yaml y = new Yaml();\n    try (final InputStream in = Files.newInputStream(Paths.get(\"people.yaml\"))) {\n        final List<Person> loaded = y.loadAs(in, List.class);\n        loaded.forEach(p -> System.out.printf(\"%s %s(%s), age = %d\\n\",\n                    p.getFirstName(), p.getFamilyName(), p.getNationality(), p.getAge())\n                );\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nJohn Kay(UK), age = 28\nDon Hall(US), age = 28\nKen Rodriguez(AR), age = 28\n\n\n\n\n\u53c2\u8003\n\nJava\u306eYAML\u30e9\u30a4\u30d6\u30e9\u30ea\u6bd4\u8f03\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n# \u6982\u8981\nJava \u3067 YAML \u3092\u6271\u3063\u3066\u307f\u307e\u3059\u3002YAML \u64cd\u4f5c\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u3001 @hryshtk \u3055\u3093\u306e\u300c[Java\u306eYAML\u30e9\u30a4\u30d6\u30e9\u30ea\u6bd4\u8f03](http://qiita.com/hryshtk/items/94e9110e05b53a7915ca)\u300d\u3092\u62dd\u898b\u3057\u305f\u3068\u3053\u308d\u3001[SnakeYAML](https://bitbucket.org/asomov/snakeyaml/wiki/Documentation)\u304c\u3088\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u306a\u304a\u3001YAML\u304c\u3069\u3093\u306a\u3082\u306e\u304b\u306b\u3064\u3044\u3066\u306f [YAML(Wikipedia)](https://ja.wikipedia.org/wiki/YAML) \u3078\u306e\u30ea\u30f3\u30af\u3092\u8a18\u3059\u306b\u3068\u3069\u3081\u307e\u3059\u3002\n\n## \u4f9d\u5b58\u306e\u8ffd\u52a0\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3060\u3068 oss.sonatype \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001[Maven Central](http://search.maven.org/#artifactdetails%7Corg.yaml%7Csnakeyaml%7C1.17%7Cbundle)\u306b\u3082\u7f6e\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u307e\u3059\u3002\n\n```groovy:build.gradle\ndependencies {\n    compile 'org.yaml:snakeyaml:1.17'\n```\n\n## \u6e96\u5099\ndump \u306b\u3059\u308b\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```java:Person.java\npackage jp.toastkid.verification;\n\npublic class Person {\n    String firstName;\n    String familyName;\n    String nationality;\n    int age;\n}\n```\n\n## dump\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 yaml \u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java:Client\nimport org.yaml.snakeyaml.Yaml;\n\npublic class SnakeYamlVerificaation {\n    public static void main(final String[] args) {\n        final Person p = new Person();\n        p.firstName    = \"John\";\n        p.familyName   = \"Kay\";\n        p.nationality  = \"UK\";\n        p.age          = 28;\n        final Yaml y = new Yaml();\n        System.out.println(y.dump(p));\n    }\n}\n```\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u2026\u2026\n\n```:\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u8a18\u306e\u901a\u308a\u5931\u6557\u3059\u308b\nException in thread \"main\" org.yaml.snakeyaml.error.YAMLException: No JavaBean properties found in jp.toastkid.verification.Person\n\tat org.yaml.snakeyaml.introspector.PropertyUtils.getPropertiesMap(PropertyUtils.java:87)\n\tat org.yaml.snakeyaml.introspector.PropertyUtils.createPropertySet(PropertyUtils.java:110)\n\tat org.yaml.snakeyaml.introspector.PropertyUtils.getProperties(PropertyUtils.java:102)\n\tat org.yaml.snakeyaml.introspector.PropertyUtils.getProperties(PropertyUtils.java:94)\n\tat org.yaml.snakeyaml.representer.Representer.getProperties(Representer.java:246)\n\tat org.yaml.snakeyaml.representer.Representer$RepresentJavaBean.representData(Representer.java:50)\n\tat org.yaml.snakeyaml.representer.BaseRepresenter.representData(BaseRepresenter.java:105)\n\tat org.yaml.snakeyaml.representer.BaseRepresenter.represent(BaseRepresenter.java:64)\n\tat org.yaml.snakeyaml.Yaml.dumpAll(Yaml.java:242)\n\tat org.yaml.snakeyaml.Yaml.dumpAll(Yaml.java:206)\n\tat org.yaml.snakeyaml.Yaml.dump(Yaml.java:181)\n\tat jp.toastkid.verification.SnakeYamlVerificaation.main(SnakeYamlVerificaation.java:12)\n```\n\nSnakeYAML\u3067\u6271\u3046\u30af\u30e9\u30b9\u306b\u306f Getter & Setter \u304c\u8981\u308b\u3088\u3046\u3067\u3059\u3002 Person \u30af\u30e9\u30b9\u306b Getter & Setter \u3092(Eclipse \u306e\u81ea\u52d5\u751f\u6210\u6a5f\u80fd\u306b\u3088\u308a)\u8ffd\u52a0\u3057\u3066\u518d\u5ea6\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```:\u5b9f\u884c\u7d50\u679c\n!!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\n```\n\n## load\n\u5148\u307b\u3069\u306e\u5b9f\u884c\u7d50\u679c\u306e\u6587\u5b57\u5217\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5fa9\u5143\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java:load\nfinal Yaml y = new Yaml();\nfinal Person loaded = (Person) y.load(\"!!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\");\nSystem.out.printf(\"%s %s(%s), age = %d\", loaded.firstName, loaded.familyName, loaded.nationality, loaded.age);\n```\n\n\u8aad\u307f\u8fbc\u3080\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u306f\u3061\u3087\u3063\u3068\u4e0d\u4fbf\u306b\u601d\u3063\u305f\u3089\u3001\u3061\u3083\u3093\u3068 loadAs \u3068\u3044\u3046 class \u3092\u5f15\u6570\u306b\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u901a\u5e38\u306f\u3053\u3061\u3089\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n```java:loadAs\nfinal Person p1 = y.loadAs(\"!!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\", Person.class);\n```\n\n```:\u5b9f\u884c\u7d50\u679c\nJohn Kay(UK), age = 28\n```\n\n## \u8907\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6271\u3046\n\n### dump\nPerson \u3092\u591a\u5c11\u62e1\u5f35\u3057(\u5f8c\u8ff0)\u3001List \u306b\u8a70\u3081\u3066 dump \u3057\u3066\u307f\u307e\u3059\u3002\n\n```java\nfinal List<Person> people = Arrays.asList(\n                new Person.Builder().setFirstName(\"John\").setFamilyName(\"Kay\")\n                        .setNationality(\"UK\").setAge(28).build(),\n                new Person.Builder().setFirstName(\"Don\").setFamilyName(\"Hall\")\n                        .setNationality(\"US\").setAge(28).build(),\n                new Person.Builder().setFirstName(\"Ken\").setFamilyName(\"Rodriguez\")\n                        .setNationality(\"AR\").setAge(28).build());\nfinal Yaml y = new Yaml();\nSystem.out.println(y.dump(people));\n```\n\n```:\u5b9f\u884c\u7d50\u679c\n- !!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\n- !!jp.toastkid.verification.Person {age: 28, familyName: Hall, firstName: Don, nationality: US}\n- !!jp.toastkid.verification.Person {age: 28, familyName: Rodriguez, firstName: Ken,\n  nationality: AR}\n```\n\n### \u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 dump \u3057\u305f yaml \u3092 load\n\u3053\u3046\u3044\u3046\u6642\u306b\u30d2\u30a2\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u4f7f\u3048\u306a\u3044 Java \u306f\u5730\u5473\u306b\u3064\u3089\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java\nfinal List<Person> loaded = y.loadAs(\n        \"- !!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\\n\"\n        + \"- !!jp.toastkid.verification.Person {age: 28, familyName: Hall, firstName: Don, nationality: US}\\n\"\n        + \"- !!jp.toastkid.verification.Person {age: 28, familyName: Rodriguez, firstName: Ken,\"\n        + \"  nationality: AR}\", List.class);\nloaded.forEach(p -> System.out.printf(\"%s %s(%s), age = %d\\n\",\n                p.getFirstName(), p.getFamilyName(), p.getNationality(), p.getAge())\n```\n\n```:\u5b9f\u884c\u7d50\u679c\nJohn Kay(UK), age = 28\nDon Hall(US), age = 28\nKen Rodriguez(AR), age = 28\n```\n\n### Person \u30af\u30e9\u30b9\u306e\u4fee\u6b63\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3092\u3084\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b Builder Pattern \u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u3069\u3046\u3082 Setter \u3068 Getter \u306f\u4e21\u65b9\u6301\u305f\u305b\u306a\u3044\u3068\u30c0\u30e1\u306a\u3088\u3046\u3067\u3001\u304a\u307e\u3051\u306b load \u3059\u308b\u969b\u306b\u306f\u7a7a\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5fc5\u8981\u306a\u305f\u3081\u3001\u3053\u3093\u306a\u306b\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u2026\u2026\n\n```java:Person.java\npublic class Person {\n    private String firstName;\n    private String familyName;\n    private String nationality;\n    private int    age;\n\n    public static class Builder {\n\n        private String firstName;\n        private String familyName;\n        private String nationality;\n        private int    age;\n\n        public Builder setFirstName(final String firstName) {\n            this.firstName = firstName;\n            return this;\n        }\n\n        public Builder setFamilyName(final String familyName) {\n            this.familyName = familyName;\n            return this;\n        }\n\n        public Builder setNationality(final String nationality) {\n            this.nationality = nationality;\n            return this;\n        }\n\n        public Builder setAge(final int age) {\n            this.age = age;\n            return this;\n        }\n\n        public Person build() {\n            return new Person(this);\n        }\n    }\n\n    public Person() {\n        /* NOP. */\n    }\n\n    private Person(final Builder b) {\n        this.firstName   = b.firstName;\n        this.familyName  = b.familyName;\n        this.nationality = b.nationality;\n        this.age         = b.age;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getFamilyName() {\n        return familyName;\n    }\n\n    public String getNationality() {\n        return nationality;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setFirstName(final String firstName) {\n        this.firstName = firstName;\n    }\n\n    public void setFamilyName(final String familyName) {\n        this.familyName = familyName;\n    }\n\n    public void setNationality(final String nationality) {\n        this.nationality = nationality;\n    }\n\n    public void setAge(final int age) {\n        this.age = age;\n    }\n\n}\n```\n\n## YAML\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\n\u4e0b\u8a18\u306e\u3088\u3046\u306a yaml \u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3001\n\n```yaml:people.yaml\n- !!jp.toastkid.verification.Person {age: 28, familyName: Kay, firstName: John, nationality: UK}\n- !!jp.toastkid.verification.Person {age: 28, familyName: Hall, firstName: Don, nationality: US}\n- !!jp.toastkid.verification.Person {age: 28, familyName: Rodriguez, firstName: Ken,\n  nationality: AR}\n```\n\nloadAs \u306e\u5f15\u6570\u306b FileInputStream \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```java\npublic static void main(final String[] args) throws IOException {\n    final Yaml y = new Yaml();\n    try (final InputStream in = Files.newInputStream(Paths.get(\"people.yaml\"))) {\n        final List<Person> loaded = y.loadAs(in, List.class);\n        loaded.forEach(p -> System.out.printf(\"%s %s(%s), age = %d\\n\",\n                    p.getFirstName(), p.getFamilyName(), p.getNationality(), p.getAge())\n                );\n    }\n}\n```\n\n```:\u5b9f\u884c\u7d50\u679c\nJohn Kay(UK), age = 28\nDon Hall(US), age = 28\nKen Rodriguez(AR), age = 28\n```\n\n----\n\n# \u53c2\u8003\n1. [Java\u306eYAML\u30e9\u30a4\u30d6\u30e9\u30ea\u6bd4\u8f03](http://qiita.com/hryshtk/items/94e9110e05b53a7915ca)\n2. [\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://bitbucket.org/asomov/snakeyaml/wiki/Documentation)\n", "tags": ["Java", "YAML"]}