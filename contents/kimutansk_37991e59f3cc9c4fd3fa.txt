{"tags": ["AWS", "awsIoT", "Scala", "mqtt"], "context": " More than 1 year has passed since last update.\n\n\u4f55\u3092\u3001\u3069\u3093\u306a\u7d4c\u7def\u3067\u3084\u3063\u3066\u307f\u305f\u306e\u304b\uff1f\n\u4e0b\u8a18\u306e\u524d\u56de\u306e\u8a18\u4e8b\u306e\u7d9a\u304d\u3067\u3001\u4eca\u5ea6\u306fSubscribe\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u3001\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\u3042\u3068\u3001\u524d\u56de\u306e\u30b3\u30fc\u30c9\u306f\u672c\u6765\u306f\u6307\u5b9a\u4e0d\u8981\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u3066\u3044\u305f\u305f\u3081\u3001\u305d\u306e\u3042\u305f\u308a\u306e\u6574\u7406\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u4ed6\u306e\u7d4c\u7def\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3002\n- AWS IoT\u306bJVM\u7cfb\u8a00\u8a9e\uff08Scala\uff09\u304b\u3089\u63a5\u7d9a\u3059\u308b\u306b\u306f\uff08Publish\uff09\n\nAWS IoT\u306b\u5bfe\u3059\u308bSubscribe\u3092\u884c\u3046\u30b3\u30fc\u30c9\n\u524d\u56de\u306b\u65e2\u306b\u63a5\u7d9a\u81ea\u4f53\u306f\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u5358\u7d14\u306bPublish\u3068Subscribe\u3092\u5165\u308c\u66ff\u3048\u305f\u3060\u3051\u3067\u3059\u3002\n\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u30da\u30fc\u30b8\u304b\u3089\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nhttps://github.com/kimutansk/aws-iot-example/\n\nMqttSubscriber.scala\nimport org.eclipse.paho.client.mqttv3.{MqttClient, MqttConnectOptions}\n\n/** MQTT Subscribe Test Class */\nobject MqttSubscriber {\n  def main(args: Array[String]) {\n    // Connect Target\n    val brokerURI:String = \"ssl://******.iot.ap-northeast-1.amazonaws.com:8883\"\n\n    // SocketFactoryGenerate\n    val socketFactory = SocketFactoryGenerator.generateFromFilePath(\"/etc/cert/rootCA.pem\", \"/etc/cert/cert.pem\", \"/etc/cert/private.pem\")\n\n    // MQTT Client generate\n    val client:MqttClient = new MqttClient(brokerURI, \"mqtt-subscriber\")\n    client.setCallback(new SubscribeMqttCallback)\n    val options:MqttConnectOptions = new MqttConnectOptions()\n    options.setSocketFactory(socketFactory)\n    client.connect(options)\n\n    client.subscribe(\"test-topic\")\n    Thread.sleep(60000)\n  }\n}\n\n\n\nSocketFactoryGenerator.scala\nimport java.io.{ByteArrayInputStream, InputStream, InputStreamReader}\nimport java.nio.file.{Files, Paths}\nimport java.security.cert.{CertificateFactory, X509Certificate}\nimport java.security.{KeyPair, KeyStore, Security}\nimport javax.net.ssl.{KeyManagerFactory, SSLContext, SSLSocketFactory, TrustManagerFactory}\n\nimport org.bouncycastle.cert.X509CertificateHolder\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter\nimport org.bouncycastle.openssl.{PEMKeyPair, PEMParser}\n\n/** Factory for [[javax.net.ssl.SSLSocketFactory]] instances. */\nobject SocketFactoryGenerator {\n\n  /**\n   * Generate [[javax.net.ssl.SSLSocketFactory]] from pem file paths.\n   *\n   * @param rootCaFilePath Root CA file path\n   * @param certFilePath Certificate file path\n   * @param keyFilePath Private key file path\n   * @return Generated [[javax.net.ssl.SSLSocketFactory]]\n   */\n  def generateFromFilePath(rootCaFilePath:String, certFilePath:String, keyFilePath:String):SSLSocketFactory = {\n    Security.addProvider(new BouncyCastleProvider())\n\n    // load Root CA certificate\n    val rootCaParser:PEMParser  = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(rootCaFilePath)))))\n    val rootCaCertHolder:X509CertificateHolder = rootCaParser.readObject().asInstanceOf[X509CertificateHolder]\n    val rootCaCert:X509Certificate = convertToJavaCertificate(rootCaCertHolder)\n    rootCaParser.close()\n\n    // load Server certificate\n    val certParser:PEMParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(certFilePath)))))\n    val serverCertHolder:X509CertificateHolder = certParser.readObject.asInstanceOf[X509CertificateHolder]\n    val serverCert:X509Certificate = convertToJavaCertificate(serverCertHolder)\n    certParser.close()\n\n    // load Private Key\n    val keyParser:PEMParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(keyFilePath)))))\n    val pemKeyPair:PEMKeyPair = keyParser.readObject.asInstanceOf[PEMKeyPair]\n    val keyPair:KeyPair = new JcaPEMKeyConverter().getKeyPair(pemKeyPair)\n    keyParser.close()\n\n    // Root CA certificate is used to authenticate server\n    val rootCAKeyStore:KeyStore = KeyStore.getInstance(KeyStore.getDefaultType())\n    rootCAKeyStore.load(null, null)\n    rootCAKeyStore.setCertificateEntry(\"ca-certificate\", convertToJavaCertificate(rootCaCertHolder))\n    val tmf:TrustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n    tmf.init(rootCAKeyStore);\n\n    // client key and certificates are sent to server so it can authenticate us\n    val ks:KeyStore  = KeyStore.getInstance(KeyStore.getDefaultType())\n    ks.load(null, null)\n    ks.setCertificateEntry(\"certificate\", serverCert)\n    ks.setKeyEntry(\"private-key\", keyPair.getPrivate(), \"DummyPassword\".toCharArray, Array(serverCert))\n    val kmf:KeyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm())\n    kmf.init(ks, \"DummyPassword\".toCharArray());\n\n    // finally, create SSL socket factory\n    val context:SSLContext = SSLContext.getInstance(\"TLSv1.2\")\n    context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null)\n\n    context.getSocketFactory()\n  }\n\n\n  def convertToJavaCertificate(certificateHolder:X509CertificateHolder):X509Certificate = {\n     val is:InputStream = new ByteArrayInputStream(certificateHolder.toASN1Structure.getEncoded);\n    try {\n      CertificateFactory.getInstance(\"X.509\").generateCertificate(is).asInstanceOf[X509Certificate]\n    } finally is.close()\n  }\n}\n\n\n\nSubscribeMqttCallback.scala\nimport org.eclipse.paho.client.mqttv3.{IMqttDeliveryToken, MqttCallback, MqttMessage}\n\n/** Subscribe MqttCallBack */\nclass SubscribeMqttCallback extends MqttCallback{\n\n  override def deliveryComplete(iMqttDeliveryToken: IMqttDeliveryToken): Unit = ???\n\n  override def messageArrived(s: String, mqttMessage: MqttMessage): Unit = {\n    System.out.println(\"Message received. : Topic=\" + s + \", Payload=\" + mqttMessage.toString)\n  }\n\n  override def connectionLost(throwable: Throwable): Unit = ???\n}\n\n\n\n\u5b9f\u969b\u306e\u52d5\u4f5c\u78ba\u8a8d\nmosquitto_pub\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u969b\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6295\u5165\u3057\u3066\u307f\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306bScala\u5074\u3067MQTTMessage\u304c\u53d6\u5f97\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n\u30e1\u30c3\u30bb\u30fc\u30b8Publish\u5074\n\n# mosquitto_pub --cafile rootCA.pem --cert cert.pem --key private.pem -h ******.iot.ap-northeast-1.amazonaws.com -p 8883 -q 1 -d -t test-topic -i mosquitto-publisher -m TestPublishMessage\nClient mosquitto-publisher sending CONNECT\nClient mosquitto-publisher received CONNACK\nClient mosquitto-publisher sending PUBLISH (d0, q1, r0, m1, 'test-topic', ... (18 bytes))\nClient mosquitto-publisher received PUBACK (Mid: 1)\nClient mosquitto-publisher sending DISCONNECT\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8Subscribe\u5074\n\n\uff08\u8d77\u52d5\u30b3\u30de\u30f3\u30c9\uff09\nMessage received. : Topic=test-topic, Payload=TestPublishMessage\n\n\n\u6700\u5f8c\u306b\n\u3053\u308c\u3067\u3001\u6700\u7d42\u7684\u306b\u306f\u7570\u5e38\u7cfb\u306a\u3069\u306e\u30b3\u30fc\u30c9\u306e\u6574\u7406\u3084\u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\u306a\u3069\u306e\u8db3\u56de\u308a\u306f\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u304c\u3001AWS IoT\u306b\u5bfe\u3057\u3066JVM\u8a00\u8a9e\u304b\u3089Publish\u3068Subscribe\u304c\u51fa\u6765\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\nAWS IoT\u306e\u6a5f\u80fd\u306f\u5f37\u529b\u3067\u3059\u304c\u3001\u5168\u3066\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3001\u3068\u3044\u3046\u72b6\u6cc1\u306b\u304a\u3044\u3066\u306f\u3053\u3046\u3084\u3063\u3066\u4e2d\u9014\u534a\u7aef\u306b\u4f7f\u7528\u3059\u308b\u306e\u3082\u3042\u308a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n## \u4f55\u3092\u3001\u3069\u3093\u306a\u7d4c\u7def\u3067\u3084\u3063\u3066\u307f\u305f\u306e\u304b\uff1f\n\u4e0b\u8a18\u306e\u524d\u56de\u306e\u8a18\u4e8b\u306e\u7d9a\u304d\u3067\u3001\u4eca\u5ea6\u306fSubscribe\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u3001\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\u3042\u3068\u3001\u524d\u56de\u306e\u30b3\u30fc\u30c9\u306f\u672c\u6765\u306f\u6307\u5b9a\u4e0d\u8981\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u3066\u3044\u305f\u305f\u3081\u3001\u305d\u306e\u3042\u305f\u308a\u306e\u6574\u7406\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u4ed6\u306e\u7d4c\u7def\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3002\n- [AWS IoT\u306bJVM\u7cfb\u8a00\u8a9e\uff08Scala\uff09\u304b\u3089\u63a5\u7d9a\u3059\u308b\u306b\u306f\uff08Publish\uff09](http://qiita.com/kimutansk/items/2a4a7ce628fcd054342a)\n## AWS IoT\u306b\u5bfe\u3059\u308bSubscribe\u3092\u884c\u3046\u30b3\u30fc\u30c9\n\u524d\u56de\u306b\u65e2\u306b\u63a5\u7d9a\u81ea\u4f53\u306f\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u5358\u7d14\u306bPublish\u3068Subscribe\u3092\u5165\u308c\u66ff\u3048\u305f\u3060\u3051\u3067\u3059\u3002\n\n\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u30da\u30fc\u30b8\u304b\u3089\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nhttps://github.com/kimutansk/aws-iot-example/\n\n```scala:MqttSubscriber.scala\nimport org.eclipse.paho.client.mqttv3.{MqttClient, MqttConnectOptions}\n\n/** MQTT Subscribe Test Class */\nobject MqttSubscriber {\n  def main(args: Array[String]) {\n    // Connect Target\n    val brokerURI:String = \"ssl://******.iot.ap-northeast-1.amazonaws.com:8883\"\n\n    // SocketFactoryGenerate\n    val socketFactory = SocketFactoryGenerator.generateFromFilePath(\"/etc/cert/rootCA.pem\", \"/etc/cert/cert.pem\", \"/etc/cert/private.pem\")\n\n    // MQTT Client generate\n    val client:MqttClient = new MqttClient(brokerURI, \"mqtt-subscriber\")\n    client.setCallback(new SubscribeMqttCallback)\n    val options:MqttConnectOptions = new MqttConnectOptions()\n    options.setSocketFactory(socketFactory)\n    client.connect(options)\n\n    client.subscribe(\"test-topic\")\n    Thread.sleep(60000)\n  }\n}\n```\n\n```scala:SocketFactoryGenerator.scala\nimport java.io.{ByteArrayInputStream, InputStream, InputStreamReader}\nimport java.nio.file.{Files, Paths}\nimport java.security.cert.{CertificateFactory, X509Certificate}\nimport java.security.{KeyPair, KeyStore, Security}\nimport javax.net.ssl.{KeyManagerFactory, SSLContext, SSLSocketFactory, TrustManagerFactory}\n\nimport org.bouncycastle.cert.X509CertificateHolder\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter\nimport org.bouncycastle.openssl.{PEMKeyPair, PEMParser}\n\n/** Factory for [[javax.net.ssl.SSLSocketFactory]] instances. */\nobject SocketFactoryGenerator {\n\n  /**\n   * Generate [[javax.net.ssl.SSLSocketFactory]] from pem file paths.\n   *\n   * @param rootCaFilePath Root CA file path\n   * @param certFilePath Certificate file path\n   * @param keyFilePath Private key file path\n   * @return Generated [[javax.net.ssl.SSLSocketFactory]]\n   */\n  def generateFromFilePath(rootCaFilePath:String, certFilePath:String, keyFilePath:String):SSLSocketFactory = {\n    Security.addProvider(new BouncyCastleProvider())\n\n    // load Root CA certificate\n    val rootCaParser:PEMParser  = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(rootCaFilePath)))))\n    val rootCaCertHolder:X509CertificateHolder = rootCaParser.readObject().asInstanceOf[X509CertificateHolder]\n    val rootCaCert:X509Certificate = convertToJavaCertificate(rootCaCertHolder)\n    rootCaParser.close()\n\n    // load Server certificate\n    val certParser:PEMParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(certFilePath)))))\n    val serverCertHolder:X509CertificateHolder = certParser.readObject.asInstanceOf[X509CertificateHolder]\n    val serverCert:X509Certificate = convertToJavaCertificate(serverCertHolder)\n    certParser.close()\n\n    // load Private Key\n    val keyParser:PEMParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(keyFilePath)))))\n    val pemKeyPair:PEMKeyPair = keyParser.readObject.asInstanceOf[PEMKeyPair]\n    val keyPair:KeyPair = new JcaPEMKeyConverter().getKeyPair(pemKeyPair)\n    keyParser.close()\n\n    // Root CA certificate is used to authenticate server\n    val rootCAKeyStore:KeyStore = KeyStore.getInstance(KeyStore.getDefaultType())\n    rootCAKeyStore.load(null, null)\n    rootCAKeyStore.setCertificateEntry(\"ca-certificate\", convertToJavaCertificate(rootCaCertHolder))\n    val tmf:TrustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n    tmf.init(rootCAKeyStore);\n\n    // client key and certificates are sent to server so it can authenticate us\n    val ks:KeyStore  = KeyStore.getInstance(KeyStore.getDefaultType())\n    ks.load(null, null)\n    ks.setCertificateEntry(\"certificate\", serverCert)\n    ks.setKeyEntry(\"private-key\", keyPair.getPrivate(), \"DummyPassword\".toCharArray, Array(serverCert))\n    val kmf:KeyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm())\n    kmf.init(ks, \"DummyPassword\".toCharArray());\n\n    // finally, create SSL socket factory\n    val context:SSLContext = SSLContext.getInstance(\"TLSv1.2\")\n    context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null)\n\n    context.getSocketFactory()\n  }\n\n\n  def convertToJavaCertificate(certificateHolder:X509CertificateHolder):X509Certificate = {\n     val is:InputStream = new ByteArrayInputStream(certificateHolder.toASN1Structure.getEncoded);\n    try {\n      CertificateFactory.getInstance(\"X.509\").generateCertificate(is).asInstanceOf[X509Certificate]\n    } finally is.close()\n  }\n}\n```\n\n```scala:SubscribeMqttCallback.scala\nimport org.eclipse.paho.client.mqttv3.{IMqttDeliveryToken, MqttCallback, MqttMessage}\n\n/** Subscribe MqttCallBack */\nclass SubscribeMqttCallback extends MqttCallback{\n\n  override def deliveryComplete(iMqttDeliveryToken: IMqttDeliveryToken): Unit = ???\n\n  override def messageArrived(s: String, mqttMessage: MqttMessage): Unit = {\n    System.out.println(\"Message received. : Topic=\" + s + \", Payload=\" + mqttMessage.toString)\n  }\n\n  override def connectionLost(throwable: Throwable): Unit = ???\n}\n```\n\n## \u5b9f\u969b\u306e\u52d5\u4f5c\u78ba\u8a8d\nmosquitto_pub\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u969b\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6295\u5165\u3057\u3066\u307f\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306bScala\u5074\u3067MQTTMessage\u304c\u53d6\u5f97\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n- \u30e1\u30c3\u30bb\u30fc\u30b8Publish\u5074\n\n```\n# mosquitto_pub --cafile rootCA.pem --cert cert.pem --key private.pem -h ******.iot.ap-northeast-1.amazonaws.com -p 8883 -q 1 -d -t test-topic -i mosquitto-publisher -m TestPublishMessage\nClient mosquitto-publisher sending CONNECT\nClient mosquitto-publisher received CONNACK\nClient mosquitto-publisher sending PUBLISH (d0, q1, r0, m1, 'test-topic', ... (18 bytes))\nClient mosquitto-publisher received PUBACK (Mid: 1)\nClient mosquitto-publisher sending DISCONNECT\n```\n\n- \u30e1\u30c3\u30bb\u30fc\u30b8Subscribe\u5074\n\n```\n\uff08\u8d77\u52d5\u30b3\u30de\u30f3\u30c9\uff09\nMessage received. : Topic=test-topic, Payload=TestPublishMessage\n```\n\n## \u6700\u5f8c\u306b\n\u3053\u308c\u3067\u3001\u6700\u7d42\u7684\u306b\u306f\u7570\u5e38\u7cfb\u306a\u3069\u306e\u30b3\u30fc\u30c9\u306e\u6574\u7406\u3084\u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\u306a\u3069\u306e\u8db3\u56de\u308a\u306f\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u304c\u3001AWS IoT\u306b\u5bfe\u3057\u3066JVM\u8a00\u8a9e\u304b\u3089Publish\u3068Subscribe\u304c\u51fa\u6765\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\nAWS IoT\u306e\u6a5f\u80fd\u306f\u5f37\u529b\u3067\u3059\u304c\u3001\u5168\u3066\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3001\u3068\u3044\u3046\u72b6\u6cc1\u306b\u304a\u3044\u3066\u306f\u3053\u3046\u3084\u3063\u3066\u4e2d\u9014\u534a\u7aef\u306b\u4f7f\u7528\u3059\u308b\u306e\u3082\u3042\u308a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\n"}