{"context": " More than 1 year has passed since last update.\n\n\u74b0\u5883\n\nJava 8\nJoox 1.3.0\nJsoup 1.8.3\n\n\u3044\u304f\u3064\u304b XML \u306e\u30d1\u30fc\u30b9\u3092 Java \u3067\u5b9f\u9a13\u3057\u3066\u307f\u305f\u3002CSS\u3092\u3064\u304b\u3063\u305f\u30bb\u30ec\u30af\u30bf\u3060\u3068\u30c6\u30ad\u30b9\u30c8\u30ce\u30fc\u30c9\u306e\u9078\u629e\u304c\u3061\u3087\u3063\u3068\u96e3\u3057\u3044\u3002\n\nXMLParse\npackage example.xml;\n\nimport org.joox.Match;\nimport org.jsoup.Jsoup;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathFactory;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.core.Is.is;\nimport static org.joox.JOOX.$;\nimport static org.joox.JOOX.attr;\n\npublic class XMLParse {\n    public static void main(final String[] args) throws Exception {\n        final Path path = Paths.get(\"data/sample.xml\");\n        useDOM(path);\n        useXPath(path);\n        useJSoup(path);\n        useJoox(path);\n    }\n\n\n    private static void useDOM(final Path path) throws Exception {\n        final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory\n                .newInstance();\n        final DocumentBuilder documentBuilder = documentBuilderFactory\n                .newDocumentBuilder();\n        final Document document = documentBuilder.parse(path.toFile());\n\n        assertThat(document.getElementsByTagName(\"h1\").item(0).getTextContent(),\n                is(\"header text\"));\n        final Element html = document.getDocumentElement();\n\n        // h1\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        assertThat(html.getElementsByTagName(\"h1\").item(0).getTextContent(),\n                is(\"header text\"));\n        // h1\u306eclass\u5c5e\u6027\u3092\u53d6\u5f97\n        assertThat(html.getElementsByTagName(\"h1\").item(0).getAttributes()\n                .getNamedItem(\"class\").getNodeValue(), is(\"header1\"));\n\n        // 2\u756a\u76ee\u306ediv\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        assertThat(\n                html.getElementsByTagName(\"div\").item(1).getChildNodes().item(0)\n                        .getNodeValue().trim(), is(\"div2\"));\n        // 2\u756a\u76ee\u306ediv\u306eul\u306eli\u3092\u53d6\u5f97\n        assertThat(\n                html.getElementsByTagName(\"ul\").item(1).getChildNodes().item(1)\n                        .getChildNodes().item(0).getTextContent(), is(\"111\"));\n        // \u540c\u3058\u30ce\u30fc\u30c9\n        assertThat(\n                html.getElementsByTagName(\"div\").item(1).getChildNodes().item(1)\n                        .getChildNodes().item(1).getTextContent(), is(\"111\"));\n        // \u6b21\u306eli\n        assertThat(\n                html.getElementsByTagName(\"div\").item(1).getChildNodes().item(1)\n                        .getChildNodes().item(3).getTextContent(), is(\"222\"));\n    }\n\n    private static void useXPath(final Path path) throws Exception {\n        final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory\n                .newInstance();\n        final DocumentBuilder documentBuilder = documentBuilderFactory\n                .newDocumentBuilder();\n        final Document document = documentBuilder.parse(path.toFile());\n\n        final XPath xpath = XPathFactory.newInstance().newXPath();\n\n        // h1\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        final String h1 = (String) xpath\n                .evaluate(\"/html/body/div/h1/text()\", document,\n                        XPathConstants.STRING);\n        assertThat(h1, is(\"header text\"));\n\n        // h1\u306eclass\u5c5e\u6027\u3092\u53d6\u5f97\n        final String h1c = (String) xpath\n                .evaluate(\"/html/body/div/h1/@class\", document,\n                        XPathConstants.STRING);\n        assertThat(h1c, is(\"header1\"));\n\n        // 2\u756a\u76ee\u306ediv\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        final String div = (String) xpath\n                .evaluate(\"//div[2]/text()\", document, XPathConstants.STRING);\n        assertThat(div.trim(), is(\"div2\"));\n\n        // 2\u756a\u76ee\u306ediv\u306eul\u306eli\u3092\u53d6\u5f97\n        final String li = (String) xpath\n                .evaluate(\"//div[2]/ul[1]/li[1]/text()\", document,\n                        XPathConstants.STRING);\n        assertThat(li, is(\"111\"));\n\n        // \u6b21\u306eli\u306e\u4e2d\u8eab\n        final String li3 = (String) xpath\n                .evaluate(\"//div[2]/ul[1]/li[2]/text()\", document,\n                        XPathConstants.STRING);\n        assertThat(li3, is(\"222\"));\n\n    }\n\n    private static void useJSoup(final Path path) throws Exception {\n        final org.jsoup.nodes.Document document = Jsoup\n                .parse(path.toFile(), StandardCharsets.UTF_8.toString());\n\n\n        // h1\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        final String h1 = document.select(\"html > body > div:nth-child(1) > h1\")\n                .text();\n        assertThat(h1, is(\"header text\"));\n\n        // h1\u306eclass\u5c5e\u6027\u3092\u53d6\u5f97\n\n        final String h1c = document\n                .select(\"html > body > div:nth-child(1) > h1\").attr(\"class\");\n        assertThat(h1c, is(\"header1\"));\n\n//        // 2\u756a\u76ee\u306ediv\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n//        final String div = document.select(\"div:nth-child(2) :be\")\n//        assertThat(div.trim(), is(\"div2\"));\n\n        // 2\u756a\u76ee\u306ediv\u306eul\u306eli\u3092\u53d6\u5f97\n        final String li = document\n                .select(\"div:nth-child(2) > ul:nth-child(1) > li:nth-child(1)\")\n                .text();\n        assertThat(li, is(\"111\"));\n\n\n        // \u6b21\u306eli\u306e\u4e2d\u8eab\n        final String li3 = document\n                .select(\"div:nth-child(2) > ul:nth-child(1) > li:nth-child(2)\")\n                .text();\n        assertThat(li3, is(\"222\"));\n\n\n    }\n\n    private static void useJoox(final Path path) throws Exception {\n        final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory\n                .newInstance();\n        final DocumentBuilder documentBuilder = documentBuilderFactory\n                .newDocumentBuilder();\n        final Document document = documentBuilder.parse(path.toFile());\n\n        final Match match = $(document);\n\n        // h1\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        final String h1 = match.find(\"html body\").find(\"div\").find(\"h1\").eq(0).text();\n        assertThat(h1, is(\"header text\"));\n\n        // h1\u306eclass\u5c5e\u6027\u3092\u53d6\u5f97\n\n        final String h1c = match.find(\"h1\").filter(attr(\"class\")).attr(\"class\");\n        assertThat(h1c, is(\"header1\"));\n\n//        // 2\u756a\u76ee\u306ediv\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n//        final String div = match.xpath(\"//div[2]\").content(1);\n//        assertThat(div.trim(), is(\"div2\"));\n\n        // 2\u756a\u76ee\u306ediv\u306eul\u306eli\u3092\u53d6\u5f97\n        final String li = match\n                .find(\"div:nth-child(2) > ul:nth-child(1) > li:nth-child(1)\")\n                .text();\n        assertThat(li, is(\"111\"));\n\n        // \u540c\u3058\n        final String li4 = match.find(\"div\").eq(1).find(\"ul\").eq(0).find(\"li\")\n                .eq(0).text();\n        assertThat(li4, is(\"111\"));\n\n        // \u6b21\u306eli\u306e\u4e2d\u8eab\n        final String li3 = match.find(\"div\").eq(1).find(\"ul\").eq(0).find(\"li\")\n                .eq(1).text();\n        assertThat(li3, is(\"222\"));\n\n    }\n}\n\n\n\u6700\u4f4e\u3067\u3082XPath\u306f\u3084\u3089\u306a\u3044\u3068DOM\u3092\u76f4\u63a5\u306f\u3081\u3093\u3069\u304f\u3055\u3044\u3002\n\u30b5\u30f3\u30d7\u30eb\u306b\u4f7f\u3063\u305f XML \u306f\u4ee5\u4e0b\u3002\n\nsample.xml\n<html>\n    <head>\n        <title>the title</title>\n    </head>\n    <body>\n        <div>\n            div1\n            <h1 class=\"header1\">header text</h1>\n            body text\n            <ul>\n                <li>aaa</li>\n            </ul>\n        </div>\n        <div>\n            div2\n            <ul>\n                <li>111</li>\n\n                <li>222</li>\n            </ul>\n        </div>\n        <div>\n            <h1>second text</h1>\n        </div>\n    </body>\n</html>\n\n\n# \u74b0\u5883\n* Java 8\n* Joox 1.3.0\n* Jsoup 1.8.3\n\n\u3044\u304f\u3064\u304b XML \u306e\u30d1\u30fc\u30b9\u3092 Java \u3067\u5b9f\u9a13\u3057\u3066\u307f\u305f\u3002CSS\u3092\u3064\u304b\u3063\u305f\u30bb\u30ec\u30af\u30bf\u3060\u3068\u30c6\u30ad\u30b9\u30c8\u30ce\u30fc\u30c9\u306e\u9078\u629e\u304c\u3061\u3087\u3063\u3068\u96e3\u3057\u3044\u3002\n\n```java:XMLParse\npackage example.xml;\n\nimport org.joox.Match;\nimport org.jsoup.Jsoup;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathFactory;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.core.Is.is;\nimport static org.joox.JOOX.$;\nimport static org.joox.JOOX.attr;\n\npublic class XMLParse {\n    public static void main(final String[] args) throws Exception {\n        final Path path = Paths.get(\"data/sample.xml\");\n        useDOM(path);\n        useXPath(path);\n        useJSoup(path);\n        useJoox(path);\n    }\n\n\n    private static void useDOM(final Path path) throws Exception {\n        final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory\n                .newInstance();\n        final DocumentBuilder documentBuilder = documentBuilderFactory\n                .newDocumentBuilder();\n        final Document document = documentBuilder.parse(path.toFile());\n\n        assertThat(document.getElementsByTagName(\"h1\").item(0).getTextContent(),\n                is(\"header text\"));\n        final Element html = document.getDocumentElement();\n\n        // h1\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        assertThat(html.getElementsByTagName(\"h1\").item(0).getTextContent(),\n                is(\"header text\"));\n        // h1\u306eclass\u5c5e\u6027\u3092\u53d6\u5f97\n        assertThat(html.getElementsByTagName(\"h1\").item(0).getAttributes()\n                .getNamedItem(\"class\").getNodeValue(), is(\"header1\"));\n\n        // 2\u756a\u76ee\u306ediv\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        assertThat(\n                html.getElementsByTagName(\"div\").item(1).getChildNodes().item(0)\n                        .getNodeValue().trim(), is(\"div2\"));\n        // 2\u756a\u76ee\u306ediv\u306eul\u306eli\u3092\u53d6\u5f97\n        assertThat(\n                html.getElementsByTagName(\"ul\").item(1).getChildNodes().item(1)\n                        .getChildNodes().item(0).getTextContent(), is(\"111\"));\n        // \u540c\u3058\u30ce\u30fc\u30c9\n        assertThat(\n                html.getElementsByTagName(\"div\").item(1).getChildNodes().item(1)\n                        .getChildNodes().item(1).getTextContent(), is(\"111\"));\n        // \u6b21\u306eli\n        assertThat(\n                html.getElementsByTagName(\"div\").item(1).getChildNodes().item(1)\n                        .getChildNodes().item(3).getTextContent(), is(\"222\"));\n    }\n\n    private static void useXPath(final Path path) throws Exception {\n        final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory\n                .newInstance();\n        final DocumentBuilder documentBuilder = documentBuilderFactory\n                .newDocumentBuilder();\n        final Document document = documentBuilder.parse(path.toFile());\n\n        final XPath xpath = XPathFactory.newInstance().newXPath();\n\n        // h1\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        final String h1 = (String) xpath\n                .evaluate(\"/html/body/div/h1/text()\", document,\n                        XPathConstants.STRING);\n        assertThat(h1, is(\"header text\"));\n\n        // h1\u306eclass\u5c5e\u6027\u3092\u53d6\u5f97\n        final String h1c = (String) xpath\n                .evaluate(\"/html/body/div/h1/@class\", document,\n                        XPathConstants.STRING);\n        assertThat(h1c, is(\"header1\"));\n\n        // 2\u756a\u76ee\u306ediv\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        final String div = (String) xpath\n                .evaluate(\"//div[2]/text()\", document, XPathConstants.STRING);\n        assertThat(div.trim(), is(\"div2\"));\n\n        // 2\u756a\u76ee\u306ediv\u306eul\u306eli\u3092\u53d6\u5f97\n        final String li = (String) xpath\n                .evaluate(\"//div[2]/ul[1]/li[1]/text()\", document,\n                        XPathConstants.STRING);\n        assertThat(li, is(\"111\"));\n\n        // \u6b21\u306eli\u306e\u4e2d\u8eab\n        final String li3 = (String) xpath\n                .evaluate(\"//div[2]/ul[1]/li[2]/text()\", document,\n                        XPathConstants.STRING);\n        assertThat(li3, is(\"222\"));\n\n    }\n\n    private static void useJSoup(final Path path) throws Exception {\n        final org.jsoup.nodes.Document document = Jsoup\n                .parse(path.toFile(), StandardCharsets.UTF_8.toString());\n\n\n        // h1\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        final String h1 = document.select(\"html > body > div:nth-child(1) > h1\")\n                .text();\n        assertThat(h1, is(\"header text\"));\n\n        // h1\u306eclass\u5c5e\u6027\u3092\u53d6\u5f97\n\n        final String h1c = document\n                .select(\"html > body > div:nth-child(1) > h1\").attr(\"class\");\n        assertThat(h1c, is(\"header1\"));\n\n//        // 2\u756a\u76ee\u306ediv\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n//        final String div = document.select(\"div:nth-child(2) :be\")\n//        assertThat(div.trim(), is(\"div2\"));\n\n        // 2\u756a\u76ee\u306ediv\u306eul\u306eli\u3092\u53d6\u5f97\n        final String li = document\n                .select(\"div:nth-child(2) > ul:nth-child(1) > li:nth-child(1)\")\n                .text();\n        assertThat(li, is(\"111\"));\n\n\n        // \u6b21\u306eli\u306e\u4e2d\u8eab\n        final String li3 = document\n                .select(\"div:nth-child(2) > ul:nth-child(1) > li:nth-child(2)\")\n                .text();\n        assertThat(li3, is(\"222\"));\n\n\n    }\n\n    private static void useJoox(final Path path) throws Exception {\n        final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory\n                .newInstance();\n        final DocumentBuilder documentBuilder = documentBuilderFactory\n                .newDocumentBuilder();\n        final Document document = documentBuilder.parse(path.toFile());\n\n        final Match match = $(document);\n\n        // h1\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n        final String h1 = match.find(\"html body\").find(\"div\").find(\"h1\").eq(0).text();\n        assertThat(h1, is(\"header text\"));\n\n        // h1\u306eclass\u5c5e\u6027\u3092\u53d6\u5f97\n\n        final String h1c = match.find(\"h1\").filter(attr(\"class\")).attr(\"class\");\n        assertThat(h1c, is(\"header1\"));\n\n//        // 2\u756a\u76ee\u306ediv\u306e\u30c6\u30ad\u30b9\u30c8\u53d6\u5f97\n//        final String div = match.xpath(\"//div[2]\").content(1);\n//        assertThat(div.trim(), is(\"div2\"));\n\n        // 2\u756a\u76ee\u306ediv\u306eul\u306eli\u3092\u53d6\u5f97\n        final String li = match\n                .find(\"div:nth-child(2) > ul:nth-child(1) > li:nth-child(1)\")\n                .text();\n        assertThat(li, is(\"111\"));\n\n        // \u540c\u3058\n        final String li4 = match.find(\"div\").eq(1).find(\"ul\").eq(0).find(\"li\")\n                .eq(0).text();\n        assertThat(li4, is(\"111\"));\n\n        // \u6b21\u306eli\u306e\u4e2d\u8eab\n        final String li3 = match.find(\"div\").eq(1).find(\"ul\").eq(0).find(\"li\")\n                .eq(1).text();\n        assertThat(li3, is(\"222\"));\n\n    }\n}\n```\n\u6700\u4f4e\u3067\u3082XPath\u306f\u3084\u3089\u306a\u3044\u3068DOM\u3092\u76f4\u63a5\u306f\u3081\u3093\u3069\u304f\u3055\u3044\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u306b\u4f7f\u3063\u305f XML \u306f\u4ee5\u4e0b\u3002\n\n```xml:sample.xml\n<html>\n    <head>\n        <title>the title</title>\n    </head>\n    <body>\n        <div>\n            div1\n            <h1 class=\"header1\">header text</h1>\n            body text\n            <ul>\n                <li>aaa</li>\n            </ul>\n        </div>\n        <div>\n            div2\n            <ul>\n                <li>111</li>\n\n                <li>222</li>\n            </ul>\n        </div>\n        <div>\n            <h1>second text</h1>\n        </div>\n    </body>\n</html>\n```\n", "tags": ["Java", "XML", "dom", "xpath"]}