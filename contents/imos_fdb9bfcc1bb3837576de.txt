{"context": "\u4e00\u884c\u305a\u3064\u3067\u3042\u308c\u3070 stdout \u3092 read_line \u3057\u3066 stdin \u306b write \u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u3070\u826f\u3044\u3051\u3069\u3001\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u307f\u305f\u3044\u306b\u305d\u306e\u8fba\u3092\u6c17\u306b\u3057\u305f\u304f\u306a\u3051\u308c\u3070 unsafe \u3092\u4f7f\u3063\u3066\u3064\u306a\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nuse std::process::{Child, Command, Stdio};\nuse std::os::unix::io::{AsRawFd, FromRawFd};\n\nfn stdout_to_stdin(process: &Child) -> Option<Stdio> {\n  if let Some(ref stdout) = process.stdout {\n    return Some(unsafe { Stdio::from_raw_fd(stdout.as_raw_fd()) });\n  }\n  None\n}\n\nfn main() {\n  let mut process1 = Command::new(\"bash\")\n      .arg(\"-c\")\n      .arg(\"while (( i < 100 )); do echo $((i+=1)); done\")\n      .stdout(Stdio::piped())\n      .spawn().expect(\"failed to run\");\n  let mut process2 = Command::new(\"grep\")\n      .arg(\"1\")\n      .stdin(stdout_to_stdin(&process1).expect(\"broken pipe\"))\n      .spawn().expect(\"failed to run\");\n  process1.wait();\n  process2.wait();\n}\n\n\u4e00\u884c\u305a\u3064\u3067\u3042\u308c\u3070 stdout \u3092 read_line \u3057\u3066 stdin \u306b write \u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u3070\u826f\u3044\u3051\u3069\u3001\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u307f\u305f\u3044\u306b\u305d\u306e\u8fba\u3092\u6c17\u306b\u3057\u305f\u304f\u306a\u3051\u308c\u3070 unsafe \u3092\u4f7f\u3063\u3066\u3064\u306a\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```rust\nuse std::process::{Child, Command, Stdio};\nuse std::os::unix::io::{AsRawFd, FromRawFd};\n\nfn stdout_to_stdin(process: &Child) -> Option<Stdio> {\n  if let Some(ref stdout) = process.stdout {\n    return Some(unsafe { Stdio::from_raw_fd(stdout.as_raw_fd()) });\n  }\n  None\n}\n\nfn main() {\n  let mut process1 = Command::new(\"bash\")\n      .arg(\"-c\")\n      .arg(\"while (( i < 100 )); do echo $((i+=1)); done\")\n      .stdout(Stdio::piped())\n      .spawn().expect(\"failed to run\");\n  let mut process2 = Command::new(\"grep\")\n      .arg(\"1\")\n      .stdin(stdout_to_stdin(&process1).expect(\"broken pipe\"))\n      .spawn().expect(\"failed to run\");\n  process1.wait();\n  process2.wait();\n}\n```\n", "tags": ["rust"]}