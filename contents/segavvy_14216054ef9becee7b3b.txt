{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c7\u7ae0: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\n\nartist.json.gz\u306f\uff0c\u30aa\u30fc\u30d7\u30f3\u306a\u97f3\u697d\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9MusicBrainz\u306e\u4e2d\u3067\uff0c\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306b\u95a2\u3059\u308b\u3082\u306e\u3092JSON\u5f62\u5f0f\u306b\u5909\u63db\u3057\uff0cgzip\u5f62\u5f0f\u3067\u5727\u7e2e\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308b\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306f\uff0c1\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c1\u884c\u306bJSON\u5f62\u5f0f\u3067\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff0eJSON\u5f62\u5f0f\u306e\u6982\u8981\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\uff0e\n\n\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\n\u578b\n\u5185\u5bb9\n\u4f8b\n\n\n\n\nid\n\u30e6\u30cb\u30fc\u30af\u8b58\u5225\u5b50\n\u6574\u6570\n20660\n\n\ngid\n\u30b0\u30ed\u30fc\u30d0\u30eb\u8b58\u5225\u5b50\n\u6587\u5b57\u5217\n\"ecf9f3a3-35e9-4c58-acaa-e707fba45060\"\n\n\nname\n\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\n\u6587\u5b57\u5217\n\"Oasis\"\n\n\nsort_name\n\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\uff08\u8f9e\u66f8\u9806\u6574\u5217\u7528\uff09\n\u6587\u5b57\u5217\n\"Oasis\"\n\n\narea\n\u6d3b\u52d5\u5834\u6240\n\u6587\u5b57\u5217\n\"United Kingdom\"\n\n\naliases\n\u5225\u540d\n\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\n\n\n\naliases[].name\n\u5225\u540d\n\u6587\u5b57\u5217\n\"\u30aa\u30a2\u30b7\u30b9\"\n\n\naliases[].sort_name\n\u5225\u540d\uff08\u6574\u5217\u7528\uff09\n\u6587\u5b57\u5217\n\"\u30aa\u30a2\u30b7\u30b9\"\n\n\nbegin\n\u6d3b\u52d5\u958b\u59cb\u65e5\n\u8f9e\u66f8\n\n\n\nbegin.year\n\u6d3b\u52d5\u958b\u59cb\u5e74\n\u6574\u6570\n1991\n\n\nbegin.month\n\u6d3b\u52d5\u958b\u59cb\u6708\n\u6574\u6570\n\n\n\nbegin.date\n\u6d3b\u52d5\u958b\u59cb\u65e5\n\u6574\u6570\n\n\n\nend\n\u6d3b\u52d5\u7d42\u4e86\u65e5\n\u8f9e\u66f8\n\n\n\nend.year\n\u6d3b\u52d5\u7d42\u4e86\u5e74\n\u6574\u6570\n2009\n\n\nend.month\n\u6d3b\u52d5\u7d42\u4e86\u6708\n\u6574\u6570\n8\n\n\nend.date\n\u6d3b\u52d5\u7d42\u4e86\u65e5\n\u6574\u6570\n28\n\n\ntags\n\u30bf\u30b0\n\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\n\n\n\ntags[].count\n\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u305f\u56de\u6570\n\u6574\u6570\n1\n\n\ntags[].value\n\u30bf\u30b0\u5185\u5bb9\n\u6587\u5b57\u5217\n\"rock\"\n\n\nrating\n\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\n\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\n\nrating.count\n\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u6295\u7968\u6570\n\u6574\u6570\n13\n\n\nrating.value\n\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u5024\uff08\u5e73\u5747\u5024\uff09\n\u6574\u6570\n86\n\n\n\nartist.json.gz\u306e\u30c7\u30fc\u30bf\u3092Key-Value-Store (KVS) \u304a\u3088\u3073\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5fd7\u5411\u578b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u30fb\u691c\u7d22\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\uff0eKVS\u3068\u3057\u3066\u306f\uff0cLevelDB\uff0cRedis\uff0cKyotoCabinet\u7b49\u3092\u7528\u3044\u3088\uff0e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5fd7\u5411\u578b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u3057\u3066\uff0cMongoDB\u3092\u63a1\u7528\u3057\u305f\u304c\uff0cCouchDB\u3084RethinkDB\u7b49\u3092\u7528\u3044\u3066\u3082\u3088\u3044\uff0e\n\n\n60. KVS\u306e\u69cb\u7bc9\n\nKey-Value-Store (KVS) \u3092\u7528\u3044\uff0c\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\uff08name\uff09\u304b\u3089\u6d3b\u52d5\u5834\u6240\uff08area\uff09\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u69cb\u7bc9\u305b\u3088\uff0e\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport gzip\nimport json\nimport leveldb\n\nfname = 'artist.json.gz'\nfname_db = 'test_db'\n\n# LevelDB\u30aa\u30fc\u30d7\u30f3\u3001\u306a\u3051\u308c\u3070\u4f5c\u6210\ndb = leveldb.LevelDB(fname_db)\n\n# gz\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3001\u30d1\u30fc\u30b9\nwith gzip.open(fname, 'rt') as data_file:\n    for line in data_file:\n        data_json = json.loads(line)\n\n        # key=name+id\u3001value=area\u3068\u3057\u3066DB\u3078\u8ffd\u52a0\n        key = data_json['name'] + '\\t' + str(data_json['id'])\n        value = data_json.get('area')       # area\u306f\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u30c1\u30a7\u30c3\u30af\n        if value is None:\n            value = ''\n        db.Put(key.encode(), value.encode())\n\n# \u78ba\u8a8d\u306e\u305f\u3081\u767b\u9332\u4ef6\u6570\u3092\u8868\u793a\nprint('{}\u4ef6\u767b\u9332\u3057\u307e\u3057\u305f\u3002'.format(len(list(db.RangeIter(include_value=False)))))\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\n\u5b9f\u884c\u7d50\u679c\n921337\u4ef6\u767b\u9332\u3057\u307e\u3057\u305f\u3002\n\n\n\nLevelDB\u306b\u3064\u3044\u3066\n\u4eca\u56de\u306fKVS\u3068\u3057\u3066LevelDB\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002LevelDB\u306fGoogle\u304cBigTable\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u30d9\u30fc\u30b9\u306bOSS\u5316\u3057\u305fKVS\u3060\u305d\u3046\u3067\u3059\u3002\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30b5\u30a4\u30c8\u306f\u3053\u3061\u3089\u3067\u3059\u3002\u65e5\u672c\u8a9e\u3067\u306e\u89e3\u8aac\u306f\u3001yo-chan\u3055\u3093\u306e\u30d6\u30ed\u30b0\u306eLevelDB\u5165\u9580 (\u57fa\u672c\u7de8)\u304c\u975e\u5e38\u306b\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\nLevelDB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u554f\u984c\u306b\u53d6\u308a\u7d44\u3080\u524d\u306b\u74b0\u5883\u69cb\u7bc9\u304c\u5fc5\u8981\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306fconda\u3067\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u7c21\u5358\u306b\u3067\u304d\u307e\u3057\u305f\u3002LevelDB\u3092python\u3067\u4f7f\u3046\u305f\u3081\u306epython-leveldb\u3082\u540c\u6642\u306b\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n\nLevelDB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nsegavvy@ubuntu:~$ conda search leveldb\nFetching package metadata .......\nleveldb                      1.19                          0  defaults        \npython-leveldb               0.194                    py27_0  defaults        \n                             0.194                    py34_0  defaults        \n                             0.194                    py35_0  defaults        \nsegavvy@ubuntu:~$ conda install leveldb\nFetching package metadata .......\nSolving package specifications: ..........\n\nPackage plan for installation in environment /home/segavvy/anaconda3:\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    snappy-1.1.3               |                0         214 KB\n    leveldb-1.19               |                0         320 KB\n    conda-4.2.13               |           py35_0         402 KB\n    ------------------------------------------------------------\n                                           Total:         936 KB\n\nThe following NEW packages will be INSTALLED:\n\n    leveldb: 1.19-0       \n    snappy:  1.1.3-0      \n\nThe following packages will be UPDATED:\n\n    conda:   4.2.12-py35_0 --> 4.2.13-py35_0\n\nProceed ([y]/n)? y\n\nFetching packages ...\nsnappy-1.1.3-0 100% |################################| Time: 0:00:00 436.20 kB/s\nleveldb-1.19-0 100% |################################| Time: 0:00:00 586.67 kB/s\nconda-4.2.13-p 100% |################################| Time: 0:00:00   8.57 MB/s\nExtracting packages ...\n[      COMPLETE      ]|############################################################| 100%\nUnlinking packages ...\n[      COMPLETE      ]|############################################################| 100%\nLinking packages ...\n[      COMPLETE      ]|############################################################| 100%\n\n\n\npython-leveldb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nsegavvy@ubuntu:~$ conda install python-leveldb\nFetching package metadata .......\nSolving package specifications: ..........\n\nPackage plan for installation in environment /home/segavvy/anaconda3:\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    python-leveldb-0.194       |           py35_0          75 KB\n\nThe following NEW packages will be INSTALLED:\n\n    python-leveldb: 0.194-py35_0\n\nProceed ([y]/n)? y\n\nFetching packages ...\npython-leveldb 100% |#########################################| Time: 0:00:00 459.40 kB/s\nExtracting packages ...\n[      COMPLETE      ]|############################################################| 100%\nLinking packages ...\n[      COMPLETE      ]|############################################################| 100%\n\n\n\u3053\u308c\u3067import\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nLevelDB\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u78ba\u8a8d\nsegavvy@ubuntu:~$ python\nPython 3.5.2 |Anaconda 4.1.1 (64-bit)| (default, Jul  2 2016, 17:53:06) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import leveldb\n>>> \n\n\n\nLevelDB\u306e\u4f7f\u3044\u65b9\nLevelDB\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u306e\u3067\u3001help\u3067\u3060\u3044\u305f\u3044\u4f7f\u3044\u65b9\u304c\u628a\u63e1\u3067\u304d\u307e\u3057\u305f\u3002\n\nLevelDB\u306e\u30d8\u30eb\u30d7\u306e\u8868\u793a\nsegavvy@ubuntu:~$ python \nPython 3.5.2 |Anaconda 4.1.1 (64-bit)| (default, Jul  2 2016, 17:53:06) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import leveldb\n>>> help(leveldb)\n\n\n\nLevelDB\u306e\u30d8\u30eb\u30d7\uff08\u5148\u982d\u90e8\u5206\uff09\nHelp on module leveldb:\n\nNAME\n    leveldb\n\nCLASSES\n    builtins.Exception(builtins.BaseException)\n        LevelDBError\n    builtins.object\n        LevelDB\n        Snapshot\n        WriteBatch\n\n    class LevelDB(builtins.object)\n     |  LevelDB(filename, **kwargs) -> leveldb object\n     |  \n     |  Open a LevelDB database, from the given directory.\n     |  \n     |  Only the parameter filename is mandatory.\n     |  \n     |  filename                                    the database directory\n     |  create_if_missing (default: True)           if True, creates a new database if none exists\n     |  error_if_exists   (default: False)          if True, raises and error if the database already exists\n     |  paranoid_checks   (default: False)          if True, raises an error as soon as an internal corruption is detected\n     |  block_cache_size  (default: 8 * (2 << 20))  maximum allowed size for the block cache in bytes\n     |  write_buffer_size (default  2 * (2 << 20))  \n     |  block_size        (default: 4096)           unit of transfer for the block cache in bytes\n     |  max_open_files:   (default: 1000)\n     |  block_restart_interval           \n     |  \n     |  Snappy compression is used, if available.\n     |  \n     |  Some methods support the following parameters, having these semantics:\n     |  \n     |   verify_checksum: iff True, the operation will check for checksum mismatches\n     |   fill_cache:      iff True, the operation will fill the cache with the data read\n     |   sync:            iff True, the operation will be guaranteed to sync the operation to disk\n     |  \n     |  Methods supported are:\n     |  \n     |   Get(key, verify_checksums = False, fill_cache = True): get value, raises KeyError if key not found\n     |  \n     |      key: the query key\n     |  \n     |   Put(key, value, sync = False): put key/value pair\n     |  \n     |      key: the key\n\uff08\u4ee5\u4e0b\u7565\uff09\n\n\n\u5b9f\u88c5\u306e\u6d41\u308c\u306f\u3001\u307e\u305aleveldb.LevelDB()\u3067\u4fdd\u5b58\u5148\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u65b0\u898f\u4f5c\u6210\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3042\u3068\u306f\u3001LevelDB.Put()\u3067key\u3068value\u306e\u30da\u30a2\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\n\n\u6d3b\u52d5\u5834\u6240\u306e\u6b20\u843d\n\u3053\u306e\u30c7\u30fc\u30bf\u306e\u6d3b\u52d5\u5834\u6240\uff08area\uff09\u306e\u60c5\u5831\u306f\u3001\u534a\u5206\u5f31\u306e\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306b\u3057\u304b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6d3b\u52d5\u5834\u6240\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306b\u95a2\u3057\u3066\u306f\u7a7a\u6587\u5b57\u5217\u3092\u767b\u9332\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u306e\u91cd\u8907\n\u6700\u521d\u306f\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u3065\u304b\u305a\u306b\u3001key\u3068\u3057\u3066\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u3001value\u3068\u3057\u3066\u6d3b\u52d5\u5834\u6240\u3092\u767b\u9332\u3059\u308b\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u306e\u91cd\u8907\u3092\u8003\u616e\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u30b3\u30fc\u30c9\n# gz\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3001\u30d1\u30fc\u30b9\nwith gzip.open(fname, 'rt') as data_file:\n    for line in data_file:\n        data_json = json.loads(line)\n\n        # name\u3068area\u3092DB\u3078\u8ffd\u52a0\n        name = data_json['name']            # name\u306f\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\n        area = data_json.get('area')        # area\u306f\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u30c1\u30a7\u30c3\u30af\n        if area is None:\n            area = ''\n        db.Put(name.encode(), area.encode())\n\n\n\u3057\u304b\u3057\u3001\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u306f\u554f\u984c\u306e\u4f8b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bOasis\u3067\u3055\u30483\u4ef6\u3082\u5b58\u5728\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\nLevelDB.Put()\u306fkey\u304c\u540c\u3058\u5834\u5408\u306bvalue\u3092\u66f4\u65b0\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u91cd\u8907\u3057\u3066\u3044\u308b\u3068\u5f8c\u52dd\u3061\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u5148\u306b\u767b\u9332\u3057\u305f\u60c5\u5831\u304c\u6b20\u843d\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u4eca\u56de\u306f\u3001key\u306b\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u3068\u30e6\u30cb\u30fc\u30af\u8b58\u5225\u5b50\uff08id\uff09\u3092\\t\u3067\u9023\u7d50\u3057\u305f\u3082\u306e\u3092\u4f7f\u3046\u5f62\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u6587\u5b57\u5217\u3068\u30d0\u30a4\u30c8\u5217\u306e\u5909\u63db\nLebelDB\u306f\u3001key\u3068value\u3092\u3069\u3061\u3089\u3082\u30d0\u30a4\u30c8\u5217\u3067\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6587\u5b57\u5217\u304b\u3089\u30d0\u30a4\u30c8\u5217\u3078\u306e\u5909\u63db\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u6587\u5b57\u5217\u304b\u3089\u30d0\u30a4\u30c8\u5217\u3078\u306e\u5909\u63db\u306fstr.encode()\u3067\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fUTF-8\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u9006\u306bUTF-8\u306e\u30d0\u30a4\u30c8\u5217\u304b\u3089\u6587\u5b57\u5217\u306b\u306f\u3001bytes.decode()\u3067\u623b\u305b\u307e\u3059\u3002\n\n\u767b\u9332\u306e\u78ba\u8a8d\n\u4eca\u56de\u306e\u554f\u984c\u306f\u767b\u9332\u306e\u307f\u3067\u3001\u767b\u9332\u3067\u304d\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\u306f\u6b21\u306e\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u6700\u5f8c\u306eLevelDB.RangeIter()\u3067\u767b\u9332\u5185\u5bb9\u5168\u4ef6\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u3001\u4ef6\u6570\u3060\u3051\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4ef6\u6570\u3092\u53d6\u5f97\u3057\u305f\u3044\u3060\u3051\u306a\u306e\u3067\u3001include_value=False\u3092\u6307\u5b9a\u3057\u3066\u3001key\u306e\u307f\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\n61\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c7\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306f\u30af\u30ea\u30a8\u30a4\u30c6\u30a3\u30d6\u30fb\u30b3\u30e2\u30f3\u30ba \u8868\u793a - \u975e\u55b6\u5229 - \u7d99\u627f 3.0 \u975e\u79fb\u690d\uff08\u65e5\u672c\u8a9e\u8a33\uff09\u3067\u3059\u3002\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c7\u7ae0: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\n>artist.json.gz\u306f\uff0c\u30aa\u30fc\u30d7\u30f3\u306a\u97f3\u697d\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9MusicBrainz\u306e\u4e2d\u3067\uff0c\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306b\u95a2\u3059\u308b\u3082\u306e\u3092JSON\u5f62\u5f0f\u306b\u5909\u63db\u3057\uff0cgzip\u5f62\u5f0f\u3067\u5727\u7e2e\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308b\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306f\uff0c1\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c1\u884c\u306bJSON\u5f62\u5f0f\u3067\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff0eJSON\u5f62\u5f0f\u306e\u6982\u8981\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\uff0e\n>\n>|\u30d5\u30a3\u30fc\u30eb\u30c9|\u578b|\u5185\u5bb9|\u4f8b|\n>|--------|--------|-----|----|\n>|id|\u30e6\u30cb\u30fc\u30af\u8b58\u5225\u5b50|\u6574\u6570|20660|\n>|gid|\u30b0\u30ed\u30fc\u30d0\u30eb\u8b58\u5225\u5b50|\u6587\u5b57\u5217|\"ecf9f3a3-35e9-4c58-acaa-e707fba45060\"|\n>|name|\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d|\u6587\u5b57\u5217|\"Oasis\"|\n>|sort_name|\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\uff08\u8f9e\u66f8\u9806\u6574\u5217\u7528\uff09|\u6587\u5b57\u5217|\"Oasis\"|\n>|area|\u6d3b\u52d5\u5834\u6240|\u6587\u5b57\u5217|\"United Kingdom\"|\n>|aliases|\u5225\u540d|\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8||\n>|aliases[].name|\u5225\u540d|\u6587\u5b57\u5217|\"\u30aa\u30a2\u30b7\u30b9\"|\n>|aliases[].sort_name|\u5225\u540d\uff08\u6574\u5217\u7528\uff09|\u6587\u5b57\u5217|\"\u30aa\u30a2\u30b7\u30b9\"|\n>|begin|\u6d3b\u52d5\u958b\u59cb\u65e5|\u8f9e\u66f8||\n>|begin.year|\u6d3b\u52d5\u958b\u59cb\u5e74|\u6574\u6570|1991|\n>|begin.month|\u6d3b\u52d5\u958b\u59cb\u6708|\u6574\u6570||\n>|begin.date|\u6d3b\u52d5\u958b\u59cb\u65e5|\u6574\u6570||\n>|end|\u6d3b\u52d5\u7d42\u4e86\u65e5|\u8f9e\u66f8||\n>|end.year|\u6d3b\u52d5\u7d42\u4e86\u5e74|\u6574\u6570|2009|\n>|end.month|\u6d3b\u52d5\u7d42\u4e86\u6708|\u6574\u6570|8|\n>|end.date|\u6d3b\u52d5\u7d42\u4e86\u65e5|\u6574\u6570|28|\n>|tags|\u30bf\u30b0|\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8||\n>|tags[].count|\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u305f\u56de\u6570|\u6574\u6570|1|\n>|tags[].value|\u30bf\u30b0\u5185\u5bb9|\u6587\u5b57\u5217|\"rock\"|\n>|rating|\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0|\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8||\n>|rating.count|\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u6295\u7968\u6570|\u6574\u6570|13|\n>|rating.value|\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u5024\uff08\u5e73\u5747\u5024\uff09|\u6574\u6570|86|\n>\n>artist.json.gz\u306e\u30c7\u30fc\u30bf\u3092Key-Value-Store (KVS) \u304a\u3088\u3073\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5fd7\u5411\u578b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u30fb\u691c\u7d22\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\uff0eKVS\u3068\u3057\u3066\u306f\uff0cLevelDB\uff0cRedis\uff0cKyotoCabinet\u7b49\u3092\u7528\u3044\u3088\uff0e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5fd7\u5411\u578b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u3057\u3066\uff0cMongoDB\u3092\u63a1\u7528\u3057\u305f\u304c\uff0cCouchDB\u3084RethinkDB\u7b49\u3092\u7528\u3044\u3066\u3082\u3088\u3044\uff0e\n\n###60. KVS\u306e\u69cb\u7bc9\n>Key-Value-Store (KVS) \u3092\u7528\u3044\uff0c\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\uff08name\uff09\u304b\u3089\u6d3b\u52d5\u5834\u6240\uff08area\uff09\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u69cb\u7bc9\u305b\u3088\uff0e\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport gzip\nimport json\nimport leveldb\n\nfname = 'artist.json.gz'\nfname_db = 'test_db'\n\n# LevelDB\u30aa\u30fc\u30d7\u30f3\u3001\u306a\u3051\u308c\u3070\u4f5c\u6210\ndb = leveldb.LevelDB(fname_db)\n\n# gz\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3001\u30d1\u30fc\u30b9\nwith gzip.open(fname, 'rt') as data_file:\n\tfor line in data_file:\n\t\tdata_json = json.loads(line)\n\n\t\t# key=name+id\u3001value=area\u3068\u3057\u3066DB\u3078\u8ffd\u52a0\n\t\tkey = data_json['name'] + '\\t' + str(data_json['id'])\n\t\tvalue = data_json.get('area')\t\t# area\u306f\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u30c1\u30a7\u30c3\u30af\n\t\tif value is None:\n\t\t\tvalue = ''\n\t\tdb.Put(key.encode(), value.encode())\n\n# \u78ba\u8a8d\u306e\u305f\u3081\u767b\u9332\u4ef6\u6570\u3092\u8868\u793a\nprint('{}\u4ef6\u767b\u9332\u3057\u307e\u3057\u305f\u3002'.format(len(list(db.RangeIter(include_value=False)))))\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n\n```console:\u5b9f\u884c\u7d50\u679c\n921337\u4ef6\u767b\u9332\u3057\u307e\u3057\u305f\u3002\n```\n\n###LevelDB\u306b\u3064\u3044\u3066\n\n\u4eca\u56de\u306fKVS\u3068\u3057\u3066LevelDB\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002LevelDB\u306fGoogle\u304cBigTable\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u30d9\u30fc\u30b9\u306bOSS\u5316\u3057\u305fKVS\u3060\u305d\u3046\u3067\u3059\u3002\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30b5\u30a4\u30c8\u306f[\u3053\u3061\u3089](https://github.com/google/leveldb)\u3067\u3059\u3002\u65e5\u672c\u8a9e\u3067\u306e\u89e3\u8aac\u306f\u3001yo-chan\u3055\u3093\u306e\u30d6\u30ed\u30b0\u306e[LevelDB\u5165\u9580 (\u57fa\u672c\u7de8)]\n(http://yosuke-furukawa.hatenablog.com/entry/2014/05/05/095207)\u304c\u975e\u5e38\u306b\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\n###LevelDB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u554f\u984c\u306b\u53d6\u308a\u7d44\u3080\u524d\u306b\u74b0\u5883\u69cb\u7bc9\u304c\u5fc5\u8981\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306fconda\u3067\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u7c21\u5358\u306b\u3067\u304d\u307e\u3057\u305f\u3002LevelDB\u3092python\u3067\u4f7f\u3046\u305f\u3081\u306epython-leveldb\u3082\u540c\u6642\u306b\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n\n```console:LevelDB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nsegavvy@ubuntu:~$ conda search leveldb\nFetching package metadata .......\nleveldb                      1.19                          0  defaults        \npython-leveldb               0.194                    py27_0  defaults        \n                             0.194                    py34_0  defaults        \n                             0.194                    py35_0  defaults        \nsegavvy@ubuntu:~$ conda install leveldb\nFetching package metadata .......\nSolving package specifications: ..........\n\nPackage plan for installation in environment /home/segavvy/anaconda3:\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    snappy-1.1.3               |                0         214 KB\n    leveldb-1.19               |                0         320 KB\n    conda-4.2.13               |           py35_0         402 KB\n    ------------------------------------------------------------\n                                           Total:         936 KB\n\nThe following NEW packages will be INSTALLED:\n\n    leveldb: 1.19-0       \n    snappy:  1.1.3-0      \n\nThe following packages will be UPDATED:\n\n    conda:   4.2.12-py35_0 --> 4.2.13-py35_0\n\nProceed ([y]/n)? y\n\nFetching packages ...\nsnappy-1.1.3-0 100% |################################| Time: 0:00:00 436.20 kB/s\nleveldb-1.19-0 100% |################################| Time: 0:00:00 586.67 kB/s\nconda-4.2.13-p 100% |################################| Time: 0:00:00   8.57 MB/s\nExtracting packages ...\n[      COMPLETE      ]|############################################################| 100%\nUnlinking packages ...\n[      COMPLETE      ]|############################################################| 100%\nLinking packages ...\n[      COMPLETE      ]|############################################################| 100%\n```\n\n```console:python-leveldb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nsegavvy@ubuntu:~$ conda install python-leveldb\nFetching package metadata .......\nSolving package specifications: ..........\n\nPackage plan for installation in environment /home/segavvy/anaconda3:\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    python-leveldb-0.194       |           py35_0          75 KB\n\nThe following NEW packages will be INSTALLED:\n\n    python-leveldb: 0.194-py35_0\n\nProceed ([y]/n)? y\n\nFetching packages ...\npython-leveldb 100% |#########################################| Time: 0:00:00 459.40 kB/s\nExtracting packages ...\n[      COMPLETE      ]|############################################################| 100%\nLinking packages ...\n[      COMPLETE      ]|############################################################| 100%\n```\n\n\u3053\u308c\u3067import\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```console:LevelDB\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u78ba\u8a8d\nsegavvy@ubuntu:~$ python\nPython 3.5.2 |Anaconda 4.1.1 (64-bit)| (default, Jul  2 2016, 17:53:06) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import leveldb\n>>> \n```\n\n###LevelDB\u306e\u4f7f\u3044\u65b9\nLevelDB\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u306e\u3067\u3001help\u3067\u3060\u3044\u305f\u3044\u4f7f\u3044\u65b9\u304c\u628a\u63e1\u3067\u304d\u307e\u3057\u305f\u3002\n\n```console:LevelDB\u306e\u30d8\u30eb\u30d7\u306e\u8868\u793a\nsegavvy@ubuntu:~$ python \nPython 3.5.2 |Anaconda 4.1.1 (64-bit)| (default, Jul  2 2016, 17:53:06) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import leveldb\n>>> help(leveldb)\n```\n\n```console:LevelDB\u306e\u30d8\u30eb\u30d7\uff08\u5148\u982d\u90e8\u5206\uff09\nHelp on module leveldb:\n\nNAME\n    leveldb\n\nCLASSES\n    builtins.Exception(builtins.BaseException)\n        LevelDBError\n    builtins.object\n        LevelDB\n        Snapshot\n        WriteBatch\n    \n    class LevelDB(builtins.object)\n     |  LevelDB(filename, **kwargs) -> leveldb object\n     |  \n     |  Open a LevelDB database, from the given directory.\n     |  \n     |  Only the parameter filename is mandatory.\n     |  \n     |  filename                                    the database directory\n     |  create_if_missing (default: True)           if True, creates a new database if none exists\n     |  error_if_exists   (default: False)          if True, raises and error if the database already exists\n     |  paranoid_checks   (default: False)          if True, raises an error as soon as an internal corruption is detected\n     |  block_cache_size  (default: 8 * (2 << 20))  maximum allowed size for the block cache in bytes\n     |  write_buffer_size (default  2 * (2 << 20))  \n     |  block_size        (default: 4096)           unit of transfer for the block cache in bytes\n     |  max_open_files:   (default: 1000)\n     |  block_restart_interval           \n     |  \n     |  Snappy compression is used, if available.\n     |  \n     |  Some methods support the following parameters, having these semantics:\n     |  \n     |   verify_checksum: iff True, the operation will check for checksum mismatches\n     |   fill_cache:      iff True, the operation will fill the cache with the data read\n     |   sync:            iff True, the operation will be guaranteed to sync the operation to disk\n     |  \n     |  Methods supported are:\n     |  \n     |   Get(key, verify_checksums = False, fill_cache = True): get value, raises KeyError if key not found\n     |  \n     |      key: the query key\n     |  \n     |   Put(key, value, sync = False): put key/value pair\n     |  \n     |      key: the key\n\uff08\u4ee5\u4e0b\u7565\uff09\n```\n\n\u5b9f\u88c5\u306e\u6d41\u308c\u306f\u3001\u307e\u305a`leveldb.LevelDB()`\u3067\u4fdd\u5b58\u5148\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u65b0\u898f\u4f5c\u6210\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3042\u3068\u306f\u3001`LevelDB.Put()`\u3067key\u3068value\u306e\u30da\u30a2\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\n\n###\u6d3b\u52d5\u5834\u6240\u306e\u6b20\u843d\n\n\u3053\u306e\u30c7\u30fc\u30bf\u306e\u6d3b\u52d5\u5834\u6240\uff08area\uff09\u306e\u60c5\u5831\u306f\u3001\u534a\u5206\u5f31\u306e\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306b\u3057\u304b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6d3b\u52d5\u5834\u6240\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306b\u95a2\u3057\u3066\u306f\u7a7a\u6587\u5b57\u5217\u3092\u767b\u9332\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n###\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u306e\u91cd\u8907\n\n\u6700\u521d\u306f\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u3065\u304b\u305a\u306b\u3001key\u3068\u3057\u3066\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u3001value\u3068\u3057\u3066\u6d3b\u52d5\u5834\u6240\u3092\u767b\u9332\u3059\u308b\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n```python:\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u306e\u91cd\u8907\u3092\u8003\u616e\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u30b3\u30fc\u30c9\n# gz\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3001\u30d1\u30fc\u30b9\nwith gzip.open(fname, 'rt') as data_file:\n\tfor line in data_file:\n\t\tdata_json = json.loads(line)\n\n\t\t# name\u3068area\u3092DB\u3078\u8ffd\u52a0\n\t\tname = data_json['name']\t\t\t# name\u306f\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\n\t\tarea = data_json.get('area')\t\t# area\u306f\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u30c1\u30a7\u30c3\u30af\n\t\tif area is None:\n\t\t\tarea = ''\n\t\tdb.Put(name.encode(), area.encode())\n```\n\n\u3057\u304b\u3057\u3001\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u306f\u554f\u984c\u306e\u4f8b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bOasis\u3067\u3055\u30483\u4ef6\u3082\u5b58\u5728\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\n`LevelDB.Put()`\u306fkey\u304c\u540c\u3058\u5834\u5408\u306bvalue\u3092\u66f4\u65b0\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u91cd\u8907\u3057\u3066\u3044\u308b\u3068\u5f8c\u52dd\u3061\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u5148\u306b\u767b\u9332\u3057\u305f\u60c5\u5831\u304c\u6b20\u843d\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u4eca\u56de\u306f\u3001key\u306b\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u540d\u3068\u30e6\u30cb\u30fc\u30af\u8b58\u5225\u5b50\uff08id\uff09\u3092`\\t`\u3067\u9023\u7d50\u3057\u305f\u3082\u306e\u3092\u4f7f\u3046\u5f62\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n###\u6587\u5b57\u5217\u3068\u30d0\u30a4\u30c8\u5217\u306e\u5909\u63db\n\nLebelDB\u306f\u3001key\u3068value\u3092\u3069\u3061\u3089\u3082\u30d0\u30a4\u30c8\u5217\u3067\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6587\u5b57\u5217\u304b\u3089\u30d0\u30a4\u30c8\u5217\u3078\u306e\u5909\u63db\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u6587\u5b57\u5217\u304b\u3089\u30d0\u30a4\u30c8\u5217\u3078\u306e\u5909\u63db\u306f[`str.encode()`](http://docs.python.jp/3/library/stdtypes.html#str.encode)\u3067\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fUTF-8\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u9006\u306bUTF-8\u306e\u30d0\u30a4\u30c8\u5217\u304b\u3089\u6587\u5b57\u5217\u306b\u306f\u3001[`bytes.decode()`]\n(http://docs.python.jp/3/library/stdtypes.html#bytes.decode)\u3067\u623b\u305b\u307e\u3059\u3002\n\n###\u767b\u9332\u306e\u78ba\u8a8d\n\n\u4eca\u56de\u306e\u554f\u984c\u306f\u767b\u9332\u306e\u307f\u3067\u3001\u767b\u9332\u3067\u304d\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\u306f\u6b21\u306e\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u6700\u5f8c\u306e`LevelDB.RangeIter()`\u3067\u767b\u9332\u5185\u5bb9\u5168\u4ef6\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u3001\u4ef6\u6570\u3060\u3051\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4ef6\u6570\u3092\u53d6\u5f97\u3057\u305f\u3044\u3060\u3051\u306a\u306e\u3067\u3001`include_value=False`\u3092\u6307\u5b9a\u3057\u3066\u3001key\u306e\u307f\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3000\n61\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c7\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306f[\u30af\u30ea\u30a8\u30a4\u30c6\u30a3\u30d6\u30fb\u30b3\u30e2\u30f3\u30ba \u8868\u793a - \u975e\u55b6\u5229 - \u7d99\u627f 3.0 \u975e\u79fb\u690d](https://creativecommons.org/licenses/by-nc-sa/3.0/)\uff08[\u65e5\u672c\u8a9e\u8a33](https://creativecommons.org/licenses/by-nc-sa/3.0/deed.ja)\uff09\u3067\u3059\u3002*\n\n", "tags": ["Python", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "leveldb", "KVS"]}