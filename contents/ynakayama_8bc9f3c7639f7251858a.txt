{"context": " More than 1 year has passed since last update.\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u6982\u8981\n\u5b9f\u88c5\u6839\u62e0\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nK-means++\nK-means\n\u82f1\u8a9e\u3067\u3059\u3051\u3069\u65e5\u672c\u8a9e\u306e\u30da\u30fc\u30b8\u3088\u308a\u60c5\u5831\u91cf\u304c\u591a\u304f\u307e\u305f\u53b3\u5bc6\u6027\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nscikit-learn \u306e\u6982\u8981\nPython \u3067\u6a5f\u68b0\u5b66\u7fd2\u306e\u3042\u308c\u3053\u308c\u3092\u3067\u304d\u308b\u8d85\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u3053\u306e\u8fba\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\nscikit-learn\nscikit-learn \u306e\u7d39\u4ecb\n\n\u524d\u63d0\n\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u6587\u5b57\u5217\u3054\u3068\u306b\u6539\u884c\u3067\u533a\u5207\u3089\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u60f3\u5b9a\u3057\u307e\u3059\u3002\n\u4f7f\u3044\u65b9\u3068\u3057\u3066\u306f python clustering.py input.txt output.txt \u306e\u3088\u3046\u306b\u5f15\u6570\u306b\u5165\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u9014\u4e2d print() \u3067\u9014\u4e2d\u7d50\u679c\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u5f8c\u306e\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u305c\u3072\u9069\u5f53\u306a\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3066\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5b9f\u88c5\n\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\nclustering.py\n\u30af\u30e9\u30b9\u30bf\u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u307f\u3092\u5f15\u7528\u3057\u307e\u3059\u3002\n\nclustering.py\n\ndef make_cluster(self):\n    \"\"\" \u30af\u30e9\u30b9\u30bf\u3092\u751f\u6210\u3057\u3066\u8fd4\u3059\n    \"\"\"\n\n    # \u51e6\u7406\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u306b\u3088\u308b\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\n    texts = self._read_from_file()\n    print(\"texts are %(texts)s\" %locals() )\n\n    # TF-IDF \u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\u3059\u308b\n    vectorizer = TfidfVectorizer(\n        max_df=self.max_df,\n        max_features=self.max_features,\n        stop_words='english'\n        )\n    X = vectorizer.fit_transform(texts)\n    print(\"X values are %(X)s\" %locals() )\n\n    # KMeans \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30c7\u30fc\u30bf\u306e\u91cf\u3084\u7279\u6027\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u3082\u306e\u3092\u4e0e\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n    km = MiniBatchKMeans(\n        n_clusters=self.num_clusters,\n        init='k-means++', batch_size=1000,\n        n_init=10, max_no_improvement=10,\n        verbose=True\n        )\n    km.fit(X)\n    labels = km.labels_\n\n    # \u5c5e\u3059\u308b\u30af\u30e9\u30b9\u30bf\u3068\u305d\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\n    transformed = km.transform(X)\n    dists = np.zeros(labels.shape)\n    for i in range(len(labels)):\n        dists[i] = transformed[i, labels[i]]\n\n    clusters = []\n    for i in range(self.num_clusters):\n        cluster = []\n        ii = np.where(labels==i)[0]\n        dd = dists[ii]\n        di = np.vstack([dd,ii]).transpose().tolist()\n        di.sort()\n        for d, j in di:\n            cluster.append(texts[int(j)])\n        clusters.append(cluster)\n\n    # \u751f\u6210\u3057\u305f\u30af\u30e9\u30b9\u30bf\u3092\u8fd4\u3059\n    return clusters\n\n\n\n\u8003\u5bdf\nscikit-learn \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u304d\u308f\u3081\u3066\u7c21\u7d20\u306a\u30b3\u30fc\u30c9\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\u591a\u7a2e\u591a\u69d8\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u968f\u6240\u3067\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\u5b9f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5229\u7528\u3067\u306f\u30c7\u30fc\u30bf\u306e\u7279\u6027\u306b\u3042\u308f\u305b\u3066\u3053\u308c\u3089\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n## \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u6982\u8981\n\n\u5b9f\u88c5\u6839\u62e0\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[K-means++](http://en.wikipedia.org/wiki/K-means%2B%2B)\n[K-means](http://en.wikipedia.org/wiki/K-means_clustering)\n\u82f1\u8a9e\u3067\u3059\u3051\u3069\u65e5\u672c\u8a9e\u306e\u30da\u30fc\u30b8\u3088\u308a\u60c5\u5831\u91cf\u304c\u591a\u304f\u307e\u305f\u53b3\u5bc6\u6027\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n### scikit-learn \u306e\u6982\u8981\n\nPython \u3067\u6a5f\u68b0\u5b66\u7fd2\u306e\u3042\u308c\u3053\u308c\u3092\u3067\u304d\u308b\u8d85\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u3053\u306e\u8fba\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n[scikit-learn](http://scikit-learn.org)\n[scikit-learn \u306e\u7d39\u4ecb](http://sucrose.hatenablog.com/entry/2013/05/25/133021)\n\n### \u524d\u63d0\n\n\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u6587\u5b57\u5217\u3054\u3068\u306b\u6539\u884c\u3067\u533a\u5207\u3089\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u60f3\u5b9a\u3057\u307e\u3059\u3002\n\u4f7f\u3044\u65b9\u3068\u3057\u3066\u306f python clustering.py input.txt output.txt \u306e\u3088\u3046\u306b\u5f15\u6570\u306b\u5165\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u9014\u4e2d print() \u3067\u9014\u4e2d\u7d50\u679c\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u5f8c\u306e\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u305c\u3072\u9069\u5f53\u306a\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3066\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n### \u5b9f\u88c5\n\n\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n[clustering.py](https://github.com/ynakayama/sandbox/blob/master/python/sklearn/clustering.py)\n\n\u30af\u30e9\u30b9\u30bf\u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u307f\u3092\u5f15\u7528\u3057\u307e\u3059\u3002\n\n```python:clustering.py\n\ndef make_cluster(self):\n    \"\"\" \u30af\u30e9\u30b9\u30bf\u3092\u751f\u6210\u3057\u3066\u8fd4\u3059\n    \"\"\"\n\n    # \u51e6\u7406\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u306b\u3088\u308b\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\n    texts = self._read_from_file()\n    print(\"texts are %(texts)s\" %locals() )\n\n    # TF-IDF \u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\u3059\u308b\n    vectorizer = TfidfVectorizer(\n        max_df=self.max_df,\n        max_features=self.max_features,\n        stop_words='english'\n        )\n    X = vectorizer.fit_transform(texts)\n    print(\"X values are %(X)s\" %locals() )\n\n    # KMeans \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30c7\u30fc\u30bf\u306e\u91cf\u3084\u7279\u6027\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u3082\u306e\u3092\u4e0e\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n    km = MiniBatchKMeans(\n        n_clusters=self.num_clusters,\n        init='k-means++', batch_size=1000,\n        n_init=10, max_no_improvement=10,\n        verbose=True\n        )\n    km.fit(X)\n    labels = km.labels_\n\n    # \u5c5e\u3059\u308b\u30af\u30e9\u30b9\u30bf\u3068\u305d\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\n    transformed = km.transform(X)\n    dists = np.zeros(labels.shape)\n    for i in range(len(labels)):\n        dists[i] = transformed[i, labels[i]]\n\n    clusters = []\n    for i in range(self.num_clusters):\n        cluster = []\n        ii = np.where(labels==i)[0]\n        dd = dists[ii]\n        di = np.vstack([dd,ii]).transpose().tolist()\n        di.sort()\n        for d, j in di:\n            cluster.append(texts[int(j)])\n        clusters.append(cluster)\n\n    # \u751f\u6210\u3057\u305f\u30af\u30e9\u30b9\u30bf\u3092\u8fd4\u3059\n    return clusters\n```\n\n### \u8003\u5bdf\n\nscikit-learn \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u304d\u308f\u3081\u3066\u7c21\u7d20\u306a\u30b3\u30fc\u30c9\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\u591a\u7a2e\u591a\u69d8\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u968f\u6240\u3067\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\u5b9f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5229\u7528\u3067\u306f\u30c7\u30fc\u30bf\u306e\u7279\u6027\u306b\u3042\u308f\u305b\u3066\u3053\u308c\u3089\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n", "tags": ["Python", "clustering", "scikit-learn", "MachineLearning"]}