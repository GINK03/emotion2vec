{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3068 Python \u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u305f\u3081\uff0c\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4 Web \u30da\u30fc\u30b8\u306b\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u306b\u6311\u6226\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u305d\u306e\u4e2d\u3067\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u3084\uff0c\u6291\u3048\u3066\u304a\u304f\u3079\u304d\u30c6\u30af\u30cb\u30c3\u30af\u7b49\u3005\u3092\u30e1\u30e2\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\uff0e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306fGitHub\u3067\u3082\u516c\u958b\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u7b2c1\u7ae0\n\u7b2c2\u7ae0\u30fb\u524d\u7de8\n\n\u7b2c2\u7ae0\u30fb\u5f8c\u7de8\u306e\u7d9a\u304d\u3067\u3059\uff0e\n\n\n\u8a00\u3044\u8a33\n\u3057\u3070\u3089\u304f\u30b5\u30dc\u3063\u3066\u3044\u305f\u304a\u304b\u3052\u3067\uff0c\u4ee5\u524d\u81ea\u5206\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u89e3\u304d\u306a\u304c\u3089\u306e\u8a18\u4e8b\u57f7\u7b46\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\u300c3\u65e5\u524d\u306e\u81ea\u5206\u306f\u4ed6\u4eba\u300d\u3092\u5730\u3067\u884c\u304f\u30b9\u30bf\u30a4\u30eb\uff0e\n\u305d\u306e\u9593\u306b\u7fd2\u719f\u5ea6\u3082\u7d50\u69cb\u5909\u308f\u3063\u3066\u3044\u3066\uff0c\u3042\u3046\u3042\u3046\u8a00\u3044\u306a\u304c\u3089\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3092\u773a\u3081\u3066\u3044\u307e\u3057\u305f\uff0e\n\u66f4\u65b0\u306e\u9593\u304c\u7a7a\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\uff0c\u4ed6\u5c71\u306e\u77f3\u3068\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\uff0e\n\n\u7b2c3\u7ae0: \u6b63\u898f\u8868\u73fe\n\nWikipedia\u306e\u8a18\u4e8b\u3092\u4ee5\u4e0b\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u66f8\u304d\u51fa\u3057\u305f\u30d5\u30a1\u30a4\u30ebjawiki-country.json.gz\u304c\u3042\u308b\uff0e\n1\u884c\u306b1\u8a18\u4e8b\u306e\u60c5\u5831\u304cJSON\u5f62\u5f0f\u3067\u683c\u7d0d\u3055\u308c\u308b\n\u5404\u884c\u306b\u306f\u8a18\u4e8b\u540d\u304c\"title\"\u30ad\u30fc\u306b\uff0c\u8a18\u4e8b\u672c\u6587\u304c\"text\"\u30ad\u30fc\u306e\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3055\u308c\uff0c\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cJSON\u5f62\u5f0f\u3067\u66f8\u304d\u51fa\u3055\u308c\u308b\n\u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u306fgzip\u3067\u5727\u7e2e\u3055\u308c\u308b\n\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n\n20. JSON\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\nWikipedia\u8a18\u4e8b\u306eJSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u300c\u30a4\u30ae\u30ea\u30b9\u300d\u306b\u95a2\u3059\u308b\u8a18\u4e8b\u672c\u6587\u3092\u8868\u793a\u305b\u3088\uff0e\u554f\u984c21-29\u3067\u306f\uff0c\u3053\u3053\u3067\u62bd\u51fa\u3057\u305f\u8a18\u4e8b\u672c\u6587\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n20.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 20.py\n\nimport json\n\nwith open(\"jawiki-country.json\") as f:\n    article_json = f.readline()\n    while article_json:\n        article_dict = json.loads(article_json)\n        if article_dict[\"title\"] == u\"\u30a4\u30ae\u30ea\u30b9\":\n            print(article_dict[\"text\"])\n        article_json = f.readline()\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u4eca\u56de\u7528\u3044\u308b jawiki-country.json.gz \u306f 9.9MB \u3082\u3042\u3063\u3066\u7d50\u69cb\u91cd\u3044\u306e\u3067\uff0creadline() \u3067\u4e00\u884c\u305a\u3064\u8aad\u3093\u3067\u3044\u3063\u3066\u300c\u30a4\u30ae\u30ea\u30b9\u300d\u306e\u8a18\u4e8b\u3060\u3051 print \uff08\u4ed6\u8a18\u4e8b\u306f\u30b9\u30eb\u30fc\uff09\u3057\u3066\u3044\u307e\u3059\uff0e\nreadlines() \u3068\u304b\u3059\u308b\u3068\u3057\u3070\u3089\u304f\u52d5\u4f5c\u304c\u505c\u6b62\u3059\u308b\u6c17\u304c\u3057\u307e\u3059\u3057\uff0c\u3088\u308a\u5e83\u6c4e\u306a\u7528\u9014\u304c\u3042\u308b\u306a\u3089\u3068\u3082\u304b\u304f\u300c\u30a4\u30ae\u30ea\u30b9\u300d\u306e\u8a18\u4e8b\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u3066\u64cd\u4f5c\u3057\u3066\u3044\u304f\u306e\u3067\u3053\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u4eca\u56de\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306f\uff0c\u30d5\u30a1\u30a4\u30eb\u306e\u5404\u884c\u304c JSON \u5f62\u5f0f\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\u305f\u3060\u8aad\u307f\u8fbc\u3080\u3060\u3051\uff08json.load()\uff09\u3067\u306f\u64cd\u4f5c\u304c\u4e0a\u624b\u304f\u884c\u3048\u305a JSON \u306e\u30e1\u30ea\u30c3\u30c8\u3092\u751f\u304b\u305b\u306a\u3044\u306e\u3067\uff0cjson.loads() \u3092\u5229\u7528\u3057\u3066 JSON \u5f62\u5f0f\uff08\u4eca\u56de\u306f\u5b9f\u8cea\u8f9e\u66f8\uff09\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\n\u3053\u3053\u304b\u3089\u3057\u3070\u3089\u304f\u300c\u30a4\u30ae\u30ea\u30b9\u300d\u306e\u8a18\u4e8b\u3060\u3051\u62bd\u51fa\u3059\u308b\u4f5c\u696d\u304c\u7d9a\u304f\u306e\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u307e\u3057\u305f\uff0e\n\nextract_from_json.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# extract_from_json.py\n\nimport json\n\n\ndef extract_from_json(title):\n    with open(\"jawiki-country.json\") as f:\n        json_data = f.readline()\n        while json_data:\n            article_dict = json.loads(json_data)\n            if article_dict[\"title\"] == title:\n                return article_dict[\"text\"]\n            else:\n                json_data = f.readline()\n    return \"\"\n\n\n\n20.py \u3068\u7570\u306a\u308a\uff0c\u4eca\u56de\u306e\u95a2\u6570\u306f\u30bf\u30a4\u30c8\u30eb\u3092\u5f15\u6570\u306b\u6e21\u3059\u3068\u305d\u306e\u8a18\u4e8b\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\uff08\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\uff09\uff0e\n\n21. \u30ab\u30c6\u30b4\u30ea\u540d\u3092\u542b\u3080\u884c\u3092\u62bd\u51fa\n\n\u8a18\u4e8b\u4e2d\u3067\u30ab\u30c6\u30b4\u30ea\u540d\u3092\u5ba3\u8a00\u3057\u3066\u3044\u308b\u884c\u3092\u62bd\u51fa\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n21.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 21.py\n\nfrom mymodule import extract_from_json\n\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    if \"Category\" in line:\n        print(line)\n\n# python3 \u306a\u3089\u3053\u308c\u3067\u3082\u8868\u793a\u53ef\u80fd\uff08list \u3060\u3051\u3069\uff09\n# print([line for line in lines if \"Category\" in line])\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u6b63\u898f\u8868\u73fe\u306e\u7ae0\u306a\u306e\u306b\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u308f\u305a\uff0e\u307e\u3042\u3053\u3061\u3089\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3057\u2026\n\u3068\u3044\u3046\u308f\u3051\u3067 \"Category\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u542b\u3080\u884c\u3060\u3051 print \u3057\u3066\u3044\u307e\u3059\uff0e\n\u5185\u5305\u8a18\u6cd5\u3067\u66f8\u3051\u3070\u3059\u3063\u304d\u308a\u53ce\u307e\u308b\u306e\u3067\u3059\u304c\uff0cPython2 \u3067\u306f Unicode \u6587\u5b57\u5217\u3092\u542b\u3080\u30ea\u30b9\u30c8\u3092\u305d\u306e\u307e\u307e print \u3059\u308b\u3068\u30a8\u30b9\u30b1\u30fc\u30d7\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\u65e5\u672c\u8a9e\u3068\u3057\u3066\u8aad\u3081\u308b\u5f62\u3067\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\uff0e\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f Python3 \u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u306e\u3067\uff0c Python3 \u3067\u5b9f\u884c\u3059\u308b\u3068\u4e0a\u624b\u304f\u51e6\u7406\u3057\u3066\u304f\u308c\u307e\u3059\uff0e\n\n22. \u30ab\u30c6\u30b4\u30ea\u540d\u306e\u62bd\u51fa\n\n\u8a18\u4e8b\u306e\u30ab\u30c6\u30b4\u30ea\u540d\u3092\uff08\u884c\u5358\u4f4d\u3067\u306f\u306a\u304f\u540d\u524d\u3067\uff09\u62bd\u51fa\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n22.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 22.py\n\nimport re\nfrom mymodule import extract_from_json\n\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    category_line = re.search(\"^\\[\\[Category:(.*?)(|\\|.*)\\]\\]$\", line)\n    if category_line is not None:\n        print(category_line.group(1))\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u307e\u305a21.\u3068\u540c\u69d8\u306b\u30ab\u30c6\u30b4\u30ea\u884c\u3092\u629c\u304d\u51fa\u3057\u3066\uff0c\u305d\u3053\u304b\u3089\u540d\u524d\u3060\u3051\u3092 re.search() \u3092\u7528\u3044\u3066\u62bd\u51fa\u3057\u307e\u3059\uff0e\nre.search() \u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u6587\u5b57\u5217\u306e\u4e2d\u3067\uff0c\u7b2c1\u5f15\u6570\u306e\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3059\u308b\u7b87\u6240\u304c\u3042\u308c\u3070 MatchObject \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\uff0e\nMatchObject \u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u306f\u3055\u3066\u304a\u304d\uff0c.group() \u3092\u4f7f\u3046\u3068\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u4eca\u56de\u3067\u3044\u3048\u3070 category_line.group(0) \u3067\u306f\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u5168\u4f53\uff08e.g. \"[[Category:\u30a4\u30ae\u30ea\u30b9|*]]\"\uff09\u304c\uff0ccategory_line.group(1) \u3067\u306f\u6700\u521d\u306b\u30de\u30c3\u30c1\u3057\u305f\u90e8\u5206\u6587\u5b57\u5217\uff08e.g. \u30a4\u30ae\u30ea\u30b9\uff09\u304c\u5f97\u3089\u308c\u307e\u3059\uff0e\n\u305d\u3057\u3066\u809d\u5fc3\u306e\u6b63\u898f\u8868\u73fe\u306a\u306e\u3067\u3059\u304c\uff0c\u8a73\u7d30\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u4e38\u6295\u3052\u3057\u3066\uff0c\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u5177\u4f53\u7684\u306a\u9069\u5fdc\u4f8b\u3092\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u51e6\u7406\u3059\u308b\u30ab\u30c6\u30b4\u30ea\u884c\u306f\u3053\u3061\u3089\uff0821.py \u306e\u5b9f\u884c\u7d50\u679c\uff09\n\n22.py\u306e\u5b9f\u884c\u7d50\u679c\n$ python 22.py\n[[Category:\u30a4\u30ae\u30ea\u30b9|*]]\n[[Category:\u82f1\u9023\u90a6\u738b\u56fd|*]]\n[[Category:G8\u52a0\u76df\u56fd]]\n[[Category:\u6b27\u5dde\u9023\u5408\u52a0\u76df\u56fd]]\n[[Category:\u6d77\u6d0b\u56fd\u5bb6]]\n[[Category:\u541b\u4e3b\u56fd]]\n[[Category:\u5cf6\u56fd|\u304f\u308c\u3044\u3068\u3075\u308a\u3066\u3093]]\n[[Category:1801\u5e74\u306b\u8a2d\u7acb\u3055\u308c\u305f\u5dde\u30fb\u5730\u57df]]\n\n\n\u57fa\u672c\u7684\u306b\u306f [[Category:\u30ab\u30c6\u30b4\u30ea\u540d]] \u3067\u3059\u304c\uff0c\u4e00\u90e8 | \u3067\u533a\u5207\u3063\u3066\u8aad\u307f\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff0e\u306a\u306e\u3067\u65b9\u91dd\u3068\u3057\u3066\u306f\uff0c\n\n\u307e\u305a [[Category: \u3067\u59cb\u307e\u308b\n\u4f55\u304b\u3057\u3089\u306e\u6587\u5b57\u5217\uff08\u30ab\u30c6\u30b4\u30ea\u540d\uff09\u304c\u6765\u308b\n\n\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f | \u3067\u533a\u5207\u3089\u308c\u305f\u8aad\u307f\u4eee\u540d\u304c\u6765\u308b\n\n\n\u6700\u5f8c\u306b ]] \u3067\u7de0\u3081\u308b\n\n\u3068\u3044\u3063\u305f\u5f62\u306b\u306a\u308a\u307e\u3059\uff0e\n\u3053\u308c\u3092\u6b63\u898f\u8868\u73fe\u3067\u8868\u3059\u3068\uff08\u6700\u9069\u304b\u306f\u81ea\u4fe1\u304c\u3042\u308a\u307e\u305b\u3093\u304c\uff09 \"^\\[\\[Category:(.*?)(\\|.*)*\\]\\]$\" \u3068\u306a\u308a\u307e\u3059\uff0e\n\n\n\n\u610f\u56f3\n\u5b9f\u969b\u306e\u6b63\u898f\u8868\u73fe\n\u89e3\u8aac\n\n\n\n\n\u307e\u305a [[Category: \u3067\u59cb\u307e\u308b\n^\\[\\[Category:\n^ \u3067\u5148\u982d\u6307\u5b9a\n\n\n\u4f55\u304b\u3057\u3089\u306e\u6587\u5b57\u5217\uff08\u30ab\u30c6\u30b4\u30ea\u540d\uff09\u304c\u6765\u308b\n(.*?)\n\u4efb\u610f\u306e\u6587\u5b57\u5217\u3068\u6700\u77ed\u4e00\u81f4\n\n\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f `\n` \u3067\u533a\u5207\u3089\u308c\u305f\u8aad\u307f\u4eee\u540d\u304c\u6765\u308b\n`(\\\n\n\n\u6700\u5f8c\u306b ]] \u3067\u7de0\u3081\u308b\n\\]\\]$\n\u7d42\u7aef\u3092\u793a\u3059 $ \u306f\u5fc5\u8981\u306a\u3044\u304b\u3082\n\n\n\n\n23. \u30bb\u30af\u30b7\u30e7\u30f3\u69cb\u9020\n\n\u8a18\u4e8b\u4e2d\u306b\u542b\u307e\u308c\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u540d\u3068\u305d\u306e\u30ec\u30d9\u30eb\uff08\u4f8b\u3048\u3070\"== \u30bb\u30af\u30b7\u30e7\u30f3\u540d ==\"\u306a\u30891\uff09\u3092\u8868\u793a\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n23.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 23.py\n\nimport re\nfrom mymodule import extract_from_json\n\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    section_line = re.search(\"^(=+)\\s*(.*?)\\s*(=+)$\", line)\n    if section_line is not None:\n        print(section_line.group(2), len(section_line.group(1)) - 1)\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u57fa\u672c\u69cb\u9020\u306f 22. \u3068\u540c\u69d8\u3067\u3059\u304c\uff0c\u4eca\u56de\u306f\u30bb\u30af\u30b7\u30e7\u30f3\u540d\uff08e.g. == \u30bb\u30af\u30b7\u30e7\u30f3 ==\uff09\u304c\u5bfe\u8c61\u306a\u306e\u3067\u305d\u308c\u3092\u62fe\u3063\u3066\u3044\u304d\u307e\u3059\uff0e\n\u5fae\u5999\u306b\u8868\u8a18\u63fa\u308c\u304c\u3042\u3063\u305f\u306e\u3067\uff08==\u30bb\u30af\u30b7\u30e7\u30f3==\uff0c== \u30bb\u30af\u30b7\u30e7\u30f3 ==\uff09\u305d\u308c\u3092\u5438\u53ce\u3067\u304d\u308b\u3088\u3046\u306b\u7a7a\u767d\u6587\u5b57\u3092\u8868\u3059 \\s \u3092\u9593\u306b\u631f\u3093\u3067\u3042\u308a\u307e\u3059\uff0e\n\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30ec\u30d9\u30eb\u306f == \u306e\u9577\u3055\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\uff08==1==\uff0c===2===\uff0c...\uff09\u305d\u306e\u9577\u3055\u3092\u53d6\u5f97\u3057\u3066 -1 \u3059\u308b\u3053\u3068\u3067\u7b97\u51fa\u3057\u3066\u3044\u307e\u3059\uff0e\n\n24. \u30d5\u30a1\u30a4\u30eb\u53c2\u7167\u306e\u62bd\u51fa\n\n\u8a18\u4e8b\u304b\u3089\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u30e1\u30c7\u30a3\u30a2\u30d5\u30a1\u30a4\u30eb\u3092\u3059\u3079\u3066\u629c\u304d\u51fa\u305b\uff0e\n\n\n\u56de\u7b54\n\n24.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 24.py\n\nimport re\nfrom mymodule import extract_from_json\n\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    file_line = re.search(u\"(File|\u30d5\u30a1\u30a4\u30eb):(.*?)\\|\", line)\n    if file_line is not None:\n        print(file_line.group(2))\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u5f53\u521d File: \u304b\u3089\u59cb\u307e\u308b\u3082\u306e\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u3066\u3044\u305f...\u9593\u629c\u3051\uff0e\n\u6b63\u898f\u8868\u73fe\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u65e5\u672c\u8a9e\u304c\u5165\u3063\u3066\u304f\u308b\u90fd\u5408\u4e0a Unicode \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\uff0cPython \u306e\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u3067\u306f\u306f\u8a31\u3055\u308c\u308b\u3089\u3057\u3044\uff0e\n\u3088\u304f r\"hogehoge\" \u3068\u3057\u3066 raw \u6587\u5b57\u5217\u306b\u3057\u3066\u3044\u308b\u4f8b\u3092\u3088\u304f\u898b\u307e\u3059\u304c\uff0c\u3053\u308c\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u304c\u30c0\u30d6\u3063\u3066\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3092\u9632\u3050\u3082\u306e\u306a\u306e\u3067\uff0c\u5c11\u306a\u304f\u3068\u3082\u30de\u30b9\u30c8\u3067\u306f\u306a\u3044\u611f\u3058\uff1f\n\u3055\u3089\u306b\u8a00\u3048\u3070\u7e70\u308a\u8fd4\u3057\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u3092\u4f7f\u3044\u56de\u3059\u306e\u3067\u3042\u308c\u3070 re.compile() \u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u65b9\u304c\u52b9\u7387\u7684\u3089\u3057\u3044\u3067\u3059\uff0e\u304c\uff0c\u6700\u5f8c\u306b\u4f7f\u7528\u3057\u305f\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u308b\u3068\u306e\u3053\u3068\u306a\u306e\u3067\uff0c\u4eca\u56de\u306f\u305d\u3053\u307e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3055\u305d\u3046\uff0e\n\n25. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u62bd\u51fa\n\n\u8a18\u4e8b\u4e2d\u306b\u542b\u307e\u308c\u308b\u300c\u57fa\u790e\u60c5\u5831\u300d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u5024\u3092\u62bd\u51fa\u3057\uff0c\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u683c\u7d0d\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n25.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 25.py\n\nimport re\nfrom mymodule import extract_from_json\n\ntemp_dict = {}\nlines = re.split(r\"\\n[\\|}]\", extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\"))\n\nfor line in lines:\n    temp_line = re.search(\"^(.*?)\\s=\\s(.*)\", line, re.S)\n    if temp_line is not None:\n        temp_dict[temp_line.group(1)] = temp_line.group(2)\n\nfor k, v in sorted(temp_dict.items(), key=lambda x: x[1]):\n    print(k, v)\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f |\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d = \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u5bb9 \u3068\u3044\u3046\u5f62\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u308c\u306b\u5408\u308f\u305b\u305f\u6b63\u898f\u8868\u73fe\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u4e0a\u8a18\u306e\u901a\u308a ^\\|(.*?)\\s=\\s(.*) \u3068\u66f8\u304f\u30681\u756a\u76ee\u306e\u62ec\u5f27\u5185\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\uff0c2\u756a\u3081\u306e\u62ec\u5f27\u5185\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u5bb9\u3068\u306a\u308b\u306e\u3067\u305d\u308c\u3092\u8f9e\u66f8\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\uff0e\n\u57fa\u672c\u7684\u306b\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f |\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d = \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u5bb9 \u3068\u3044\u3046\u5f62\u3067 \u5404\u884c\u306b \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0c\u3061\u3087\u3063\u3068\u516c\u5f0f\u56fd\u540d\u304c\u5384\u4ecb\u3067\u3057\u305f\uff0e\n\n\u516c\u5f0f\u56fd\u540d\n|\u516c\u5f0f\u56fd\u540d = {{lang|en|United Kingdom of Great Britain and Northern Ireland}}<ref>\u82f1\u8a9e\u4ee5\u5916\u3067\u306e\u6b63\u5f0f\u56fd\u540d:<br/>\n*{{lang|gd|An R\u00ecoghachd Aonaichte na Breatainn Mh\u00f2r agus Eirinn mu Thuath}}\uff08[[\u30b9\u30b3\u30c3\u30c8\u30e9\u30f3\u30c9\u30fb\u30b2\u30fc\u30eb\u8a9e]]\uff09<br/>\n*{{lang|cy|Teyrnas Gyfunol Prydain Fawr a Gogledd Iwerddon}}\uff08[[\u30a6\u30a7\u30fc\u30eb\u30ba\u8a9e]]\uff09<br/>\n*{{lang|ga|R\u00edocht Aontaithe na Breataine M\u00f3ire agus Tuaisceart na h\u00c9ireann}}\uff08[[\u30a2\u30a4\u30eb\u30e9\u30f3\u30c9\u8a9e]]\uff09<br/>\n*{{lang|kw|An Rywvaneth Unys a Vreten Veur hag Iwerdhon Gl\u00e9dh}}\uff08[[\u30b3\u30fc\u30f3\u30a6\u30a9\u30fc\u30eb\u8a9e]]\uff09<br/>\n*{{lang|sco|Unitit Kinrick o Great Breetain an Northren Ireland}}\uff08[[\u30b9\u30b3\u30c3\u30c8\u30e9\u30f3\u30c9\u8a9e]]\uff09<br/>\n**{{lang|sco|Claught K\u00e4ngrick o Docht Br\u00e4tain an Norlin Airlann}}\u3001{{lang|sco|Unitet K\u00e4ngdom o Great Brittain an Norlin Airlann}}\uff08\u30a2\u30eb\u30b9\u30bf\u30fc\u30fb\u30b9\u30b3\u30c3\u30c8\u30e9\u30f3\u30c9\u8a9e\uff09</ref>\n\n\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u6539\u884c\uff08\u6587\u5b57=\\n\uff09\u3092\u542b\u3093\u3067\u8907\u6570\u884c\u306b\u307e\u305f\u304c\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u306e\u8fba\u3092\u4e0a\u624b\u304f\u51e6\u7406\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\u7d50\u5c40\uff0c\n\n\nsplit() \u3059\u308b\u969b\u306b\uff0c\\n \u3067\u306f\u306a\u304f \\n| or \\n} \u3067\uff08re.split()\uff09\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5883\u306b\u306a\u308b\u3068\u3053\u308d\u3067 split()\n\n\n} \u304c\u7d61\u3093\u3067\u304f\u308b\u306e\u306f \u4e00\u756a\u6700\u5f8c\u3067 | \u304c\u51fa\u3066\u3053\u306a\u3044\u304b\u3089\u3067\u3059\n\n\n\n\\n \u3082\u542b\u3081\u3066 re.search() \u3059\u308b\u305f\u3081\u306b re.S \u3068\u3044\u3046\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n\n| \u304c split() \u3067\u5439\u3063\u98db\u3093\u3067\u3044\u308b\u306e\u3067 search() \u3067\u8003\u616e\n\n\u3068\u8272\u3005\u8a66\u884c\u932f\u8aa4\u3057\u3066\u3067\u304d\u307e\u3057\u305f\uff0e\n\u4e00\u5fdc\u4e2d\u8eab\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081 for loop \u3067 print \u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u308c\u307e\u305f Python3 \u63a8\u5968\uff0e\u4f55\u3060\u304b\u3093\u3060\u3044\u3063\u3066 Python3 \u4fbf\u5229\u3060...\n\n26. \u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u306e\u9664\u53bb\n\n25\u306e\u51e6\u7406\u6642\u306b\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u306e\u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\uff08\u5f31\u3044\u5f37\u8abf\uff0c\u5f37\u8abf\uff0c\u5f37\u3044\u5f37\u8abf\u306e\u3059\u3079\u3066\uff09\u3092\u9664\u53bb\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u305b\u3088\uff08\u53c2\u8003: \u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868\uff09\uff0e\n\n\n\u56de\u7b54\n\n26.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 26.py\n\nimport re\nfrom mymodule import extract_from_json\n\ntemp_dict = {}\nlines = re.split(r\"\\n[\\|}]\", extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\"))\n\nfor line in lines:\n    temp_line = re.search(\"^(.*?)\\s=\\s(.*)\", line, re.S)\n    if temp_line is not None:\n        temp_dict[temp_line.group(1)] = re.sub(r\"'{2,5}\", r\"\", temp_line.group(2))\n\n# 25.py \u3068\u540c\u69d8 Python3 \u53c2\u7167\nfor k, v in sorted(temp_dict.items(), key=lambda x: x[1]):\n    print(k, v)\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\nre.sub \u306f\u6b63\u898f\u8868\u73fe\u306b\u30de\u30c3\u30c1\u3059\u308b\u90e8\u5206\u3092\u7f6e\u63db\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u3067\u3059\uff0e\n\u4eca\u56de\u306f2\u500b\u4ee5\u4e0a5\u500b\u4ee5\u4e0b\u306e ' \u3092\u6d88\u53bb\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e\n{n, m} \u3068\u66f8\u304f\u3068\u76f4\u524d\u306e\u6587\u5b57\u304cn\u500b\u4ee5\u4e0am\u500b\u4ee5\u4e0b\u3068\u6b63\u898f\u8868\u73fe\u3067\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u307e\u3042\u4eca\u56de\u306f\u7d14\u7c8b\u306b ' \u3092\u5168\u9664\u53bb\u3059\u308c\u3070\u3088\u304b\u3063\u305f\u6c17\u3082...\n\n27. \u5185\u90e8\u30ea\u30f3\u30af\u306e\u9664\u53bb\n\n26\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u306e\u5185\u90e8\u30ea\u30f3\u30af\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u9664\u53bb\u3057\uff0c\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u305b\u3088\uff08\u53c2\u8003: \u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868\uff09\uff0e\n\n\n\u56de\u7b54\n\n27.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 27.py\n\nimport re\nfrom mymodule import extract_from_json\n\n\ndef remove_markup(str):\n    str = re.sub(r\"'{2,5}\", r\"\", str)\n    str = re.sub(r\"\\[{2}([^|\\]]+?\\|)*(.+?)\\]{2}\", r\"\\2\", str)\n    return str\n\ntemp_dict = {}\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    category_line = re.search(\"^\\|(.*?)\\s=\\s(.*)\", line)\n    if category_line is not None:\n        temp_dict[category_line.group(1)] = remove_markup(category_line.group(2))\n\nfor k, v in sorted(temp_dict.items(), key=lambda x: x[0]):\n    print(k, v)\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u9664\u53bb\u3059\u308b\u95a2\u6570 remove_markup() \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n\n\n\n\u884c\u756a\u53f7\n\u9664\u53bb\u5bfe\u8c61\n\n\n\n\n1\u884c\u76ee\n\u5f37\u8abf\uff0826\u3068\u540c\u69d8\uff09\n\n\n2\u884c\u76ee\n\u5185\u90e8\u30ea\u30f3\u30af\n\n\n\n\u5185\u90e8\u30ea\u30f3\u30af\u306e\u8a18\u8ff0\u6cd5\u306b\u306f\n\n[[\u8a18\u4e8b\u540d]]\n[[\u8a18\u4e8b\u540d|\u8868\u793a\u6587\u5b57]]\n[[\u8a18\u4e8b\u540d#\u7bc0\u540d|\u8868\u793a\u6587\u5b57]] \n\n\u306e3\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u3044\u305a\u308c\u3082\u300c[[ \u304b\u3089\u59cb\u307e\u3063\u3066\uff0c\u4f55\u3089\u304b\u306e\u8a18\u53f7\uff08]]\uff0c|\uff0c#\uff09\u304c\u6765\u308b\u307e\u3067\u304c\u8a18\u4e8b\u540d\u300d\u3068\u3044\u3046\u6cd5\u5247\u304c\u3042\u308b\u306e\u3067\uff0c\u305d\u308c\u306b\u6e96\u62e0\u3057\u305f\u6b63\u898f\u8868\u73fe\u3092\u66f8\u304d\u307e\u3057\u305f\uff0e\n\n28. MediaWiki\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u306e\u9664\u53bb\n\n27\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u53ef\u80fd\u306a\u9650\u308a\u9664\u53bb\u3057\uff0c\u56fd\u306e\u57fa\u672c\u60c5\u5831\u3092\u6574\u5f62\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n28.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 28.py\n\nimport re\nfrom mymodule import extract_from_json\n\n\ndef remove_markup(str):\n    str = re.sub(r\"'{2,5}\", r\"\", str)\n    str = re.sub(r\"\\[{2}([^|\\]]+?\\|)*(.+?)\\]{2}\", r\"\\2\", str)\n    str = re.sub(r\"\\{{2}.+?\\|.+?\\|(.+?)\\}{2}\", r\"\\1 \", str)\n    str = re.sub(r\"<.*?>\", r\"\", str)\n    str = re.sub(r\"\\[.*?\\]\", r\"\", str)\n    return str\n\ntemp_dict = {}\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    temp_line = re.search(\"^\\|(.*?)\\s=\\s(.*)\", line)\n    if temp_line is not None:\n        temp_dict[temp_line.group(1)] = remove_markup(temp_line.group(2))\n\nfor k, v in sorted(temp_dict.items(), key=lambda x: x[0]):\n    print(k, v)\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n27\u306b\u52a0\u3048\uff0c\n\n\n\n\u884c\u756a\u53f7\n\u9664\u53bb\u5bfe\u8c61\n\n\n\n\n1\u884c\u76ee\n\u5f37\u8abf\uff0826\u3068\u540c\u69d8\uff09\n\n\n2\u884c\u76ee\n\u5185\u90e8\u30ea\u30f3\u30af\uff0827\u3068\u540c\u69d8\uff09\n\n\n3\u884c\u76ee\n\uff08\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868\u306b\u306f\u7121\u3044\u3051\u3069\uff09\u8a00\u8a9e\u3092\u6307\u5b9a\u3057\u305f\u8868\u8a18\n\n\n4\u884c\u76ee\n\u30b3\u30e1\u30f3\u30c8\n\n\n5\u884c\u76ee\n\u5916\u90e8\u30ea\u30f3\u30af\n\n\n\n\u3092\u9664\u53bb\u3067\u304d\u308b\u3088\u3046\u306b remove_markup() \u3092\u66f8\u304d\u63db\u3048\u307e\u3057\u305f\uff0e\n\n29. \u56fd\u65d7\u753b\u50cf\u306eURL\u3092\u53d6\u5f97\u3059\u308b\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5185\u5bb9\u3092\u5229\u7528\u3057\uff0c\u56fd\u65d7\u753b\u50cf\u306eURL\u3092\u53d6\u5f97\u305b\u3088\uff0e\uff08\u30d2\u30f3\u30c8: MediaWiki API\u306eimageinfo\u3092\u547c\u3073\u51fa\u3057\u3066\uff0c\u30d5\u30a1\u30a4\u30eb\u53c2\u7167\u3092URL\u306b\u5909\u63db\u3059\u308c\u3070\u3088\u3044\uff09\n\n\n\u56de\u7b54\n\n29.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 29.py\n\nimport re\nimport requests\nfrom mymodule import extract_from_json\n\n\ndef json_search(json_data):\n    ret_dict = {}\n    for k, v in json_data.items():\n        if isinstance(v, list):\n            for e in v:\n                ret_dict.update(json_search(e))\n        elif isinstance(v, dict):\n            ret_dict.update(json_search(v))\n        else:\n            ret_dict[k] = v\n    return ret_dict\n\n\ndef remove_markup(str):\n    str = re.sub(r\"'{2,5}\", r\"\", str)\n    str = re.sub(r\"\\[{2}([^|\\]]+?\\|)*(.+?)\\]{2}\", r\"\\2\", str)\n    str = re.sub(r\"\\{{2}.+?\\|.+?\\|(.+?)\\}{2}\", r\"\\1 \", str)\n    str = re.sub(r\"<.*?>\", r\"\", str)\n    str = re.sub(r\"\\[.*?\\]\", r\"\", str)\n    return str\n\ntemp_dict = {}\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    temp_line = re.search(\"^\\|(.*?)\\s=\\s(.*)\", line)\n    if temp_line is not None:\n        temp_dict[temp_line.group(1)] = remove_markup(temp_line.group(2))\n\nurl = \"https://en.wikipedia.org/w/api.php\"\npayload = {\"action\": \"query\",\n           \"titles\": \"File:{}\".format(temp_dict[u\"\u56fd\u65d7\u753b\u50cf\"]),\n           \"prop\": \"imageinfo\",\n           \"format\": \"json\",\n           \"iiprop\": \"url\"}\n\njson_data = requests.get(url, params=payload).json()\n\nprint(json_search(json_data)[\"url\"])\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\nPython \u3067 API \u3092\u53e9\u304f\u305f\u3081\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u3093\u3060\u308d\u3046\uff1f\n\u3068\u8abf\u3079\u3066\u307f\u308b\u3068\u3053\u308c\u304c\u306a\u304b\u306a\u304b\u3084\u3084\u3053\u3057\u304f...\n\n\nurllib \u304c\u5f93\u6765\u7528\u3044\u3089\u308c\u3066\u304d\u305f\n\nurllib2 \u3067\u8907\u96d1\u306a\u8a2d\u5b9a\u304c\u53ef\u80fd\u306b\u306a\u3063\u305f\nPython 3 \u304b\u3089\u7d71\u5408\u3055\u308c\u3066 \u65b0\u751f\u3000urllib\u3000\u3068\u306a\u3063\u305f\n\u4f7f\u3044\u3065\u3089\u3044\u306e\u3067 requests \u304c\u958b\u767a\u3055\u308c\u305f\n\nrequests \u306e\u88cf\u5074\u306b\u306f urllib3 \u304c\u3044\u308b\n\n...\u3068\u307e\u3042\u7d50\u8ad6\u304b\u3089\u8a00\u3048\u3070 requests \u304c\u304a\u3059\u3059\u3081\u3060\u3088\uff0c\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3067\u3059\uff0e\nPython 3 \u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3067\u3082\uff0c\n\n\u3088\u308a\u9ad8\u3044\u30ec\u30d9\u30eb\u306e http \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068\u3057\u3066\u306f\u3001 Requests package \u304c\u304a\u5968\u3081\u3067\u3059\u3002\n\n\u3068\u304b\uff0cRequests \u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u81f3\u3063\u3066\u306f\uff0c\n\nRequests: \u4eba\u9593\u306e\u305f\u3081\u306eHTTP\n\uff08\u4e2d\u7565\uff09\nPython\u306e\u6a19\u6e96\u306e urllib2 \u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u5fc5\u8981\u3068\u3055\u308c\u308b\u307b\u3068\u3093\u3069\u306eHTTP\u306e\u6a5f\u80fd\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u304c\u3001API\u304c\u307e\u3068\u3082\u306b \u4f7f\u3048\u307e\u305b\u3093 \u3002\n\n\u3068\u304b\u5f37\u3044\u6587\u9762\u3067 requests \u304c\u304a\u3059\u3059\u3081\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3054\u53c2\u7167\u3044\u305f\u3060\u304f\u3068\u3057\u3066\uff0c\u4eca\u56de\u306f API \u3092\u53e9\u3044\u305f\u7d50\u679c\u3092 JSON \u3067\u53d7\u3051\u53d6\u3063\u3066\u51e6\u7406\u3057\u307e\u3057\u305f\uff0e\n\u8fd4\u3063\u3066\u304f\u308b JSON \u306e\u69cb\u9020\u304c\u3084\u3084\u3053\u3057\u304b\u3063\u305f\u306e\u3067\uff0c\u5168\u63a2\u67fb\u3057\u3066 URL \u306e\u66f8\u3044\u3066\u3042\u308b\u7b87\u6240\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u304a\u308f\u308a\u306b\n\u7b2c4\u7ae0\u3078\u3068\u7d9a\u304d\u307e\u3059\uff0e\n\n# \u306f\u3058\u3081\u306b\n\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3068 Python \u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u305f\u3081\uff0c\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4 Web \u30da\u30fc\u30b8\u306b\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306b\u6311\u6226\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u305d\u306e\u4e2d\u3067\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u3084\uff0c\u6291\u3048\u3066\u304a\u304f\u3079\u304d\u30c6\u30af\u30cb\u30c3\u30af\u7b49\u3005\u3092\u30e1\u30e2\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\uff0e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f[GitHub](https://github.com/gamma1129/nlp100)\u3067\u3082\u516c\u958b\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n- [\u7b2c1\u7ae0](http://qiita.com/gamma1129/items/37bf660cf4e4b21d4267)\n- [\u7b2c2\u7ae0\u30fb\u524d\u7de8](http://qiita.com/gamma1129/items/92b23219a5b9d8333dad)\n- [\u7b2c2\u7ae0\u30fb\u5f8c\u7de8](http://qiita.com/gamma1129/items/6afee2034d6028847e1a)\u306e\u7d9a\u304d\u3067\u3059\uff0e\n\n# \u8a00\u3044\u8a33\n\u3057\u3070\u3089\u304f\u30b5\u30dc\u3063\u3066\u3044\u305f\u304a\u304b\u3052\u3067\uff0c\u4ee5\u524d\u81ea\u5206\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u89e3\u304d\u306a\u304c\u3089\u306e\u8a18\u4e8b\u57f7\u7b46\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\u300c3\u65e5\u524d\u306e\u81ea\u5206\u306f\u4ed6\u4eba\u300d\u3092\u5730\u3067\u884c\u304f\u30b9\u30bf\u30a4\u30eb\uff0e\n\u305d\u306e\u9593\u306b\u7fd2\u719f\u5ea6\u3082\u7d50\u69cb\u5909\u308f\u3063\u3066\u3044\u3066\uff0c\u3042\u3046\u3042\u3046\u8a00\u3044\u306a\u304c\u3089\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3092\u773a\u3081\u3066\u3044\u307e\u3057\u305f\uff0e\n\u66f4\u65b0\u306e\u9593\u304c\u7a7a\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\uff0c\u4ed6\u5c71\u306e\u77f3\u3068\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\uff0e\n\n\n# \u7b2c3\u7ae0: \u6b63\u898f\u8868\u73fe\n\n> Wikipedia\u306e\u8a18\u4e8b\u3092\u4ee5\u4e0b\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u66f8\u304d\u51fa\u3057\u305f\u30d5\u30a1\u30a4\u30ebjawiki-country.json.gz\u304c\u3042\u308b\uff0e\n\n>1\u884c\u306b1\u8a18\u4e8b\u306e\u60c5\u5831\u304cJSON\u5f62\u5f0f\u3067\u683c\u7d0d\u3055\u308c\u308b\n\u5404\u884c\u306b\u306f\u8a18\u4e8b\u540d\u304c\"title\"\u30ad\u30fc\u306b\uff0c\u8a18\u4e8b\u672c\u6587\u304c\"text\"\u30ad\u30fc\u306e\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3055\u308c\uff0c\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cJSON\u5f62\u5f0f\u3067\u66f8\u304d\u51fa\u3055\u308c\u308b\n\u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u306fgzip\u3067\u5727\u7e2e\u3055\u308c\u308b\n\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n\n## 20. JSON\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\n> Wikipedia\u8a18\u4e8b\u306eJSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u300c\u30a4\u30ae\u30ea\u30b9\u300d\u306b\u95a2\u3059\u308b\u8a18\u4e8b\u672c\u6587\u3092\u8868\u793a\u305b\u3088\uff0e\u554f\u984c21-29\u3067\u306f\uff0c\u3053\u3053\u3067\u62bd\u51fa\u3057\u305f\u8a18\u4e8b\u672c\u6587\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u305b\u3088\uff0e\n\n\n### \u56de\u7b54\n```python:20.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 20.py\n\nimport json\n\nwith open(\"jawiki-country.json\") as f:\n    article_json = f.readline()\n    while article_json:\n        article_dict = json.loads(article_json)\n        if article_dict[\"title\"] == u\"\u30a4\u30ae\u30ea\u30b9\":\n            print(article_dict[\"text\"])\n        article_json = f.readline()\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u4eca\u56de\u7528\u3044\u308b jawiki-country.json.gz \u306f 9.9MB \u3082\u3042\u3063\u3066\u7d50\u69cb\u91cd\u3044\u306e\u3067\uff0c`readline()` \u3067\u4e00\u884c\u305a\u3064\u8aad\u3093\u3067\u3044\u3063\u3066\u300c\u30a4\u30ae\u30ea\u30b9\u300d\u306e\u8a18\u4e8b\u3060\u3051 `print` \uff08\u4ed6\u8a18\u4e8b\u306f\u30b9\u30eb\u30fc\uff09\u3057\u3066\u3044\u307e\u3059\uff0e\n`readlines()` \u3068\u304b\u3059\u308b\u3068\u3057\u3070\u3089\u304f\u52d5\u4f5c\u304c\u505c\u6b62\u3059\u308b\u6c17\u304c\u3057\u307e\u3059\u3057\uff0c\u3088\u308a\u5e83\u6c4e\u306a\u7528\u9014\u304c\u3042\u308b\u306a\u3089\u3068\u3082\u304b\u304f\u300c\u30a4\u30ae\u30ea\u30b9\u300d\u306e\u8a18\u4e8b\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u3066\u64cd\u4f5c\u3057\u3066\u3044\u304f\u306e\u3067\u3053\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\n\u4eca\u56de\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306f\uff0c\u30d5\u30a1\u30a4\u30eb\u306e\u5404\u884c\u304c JSON \u5f62\u5f0f\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\u305f\u3060\u8aad\u307f\u8fbc\u3080\u3060\u3051\uff08`json.load()`\uff09\u3067\u306f\u64cd\u4f5c\u304c\u4e0a\u624b\u304f\u884c\u3048\u305a JSON \u306e\u30e1\u30ea\u30c3\u30c8\u3092\u751f\u304b\u305b\u306a\u3044\u306e\u3067\uff0c`json.loads()` \u3092\u5229\u7528\u3057\u3066 JSON \u5f62\u5f0f\uff08\u4eca\u56de\u306f\u5b9f\u8cea\u8f9e\u66f8\uff09\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\uff0e\n\n### \u30e2\u30b8\u30e5\u30fc\u30eb\u5316\n\n\u3053\u3053\u304b\u3089\u3057\u3070\u3089\u304f\u300c\u30a4\u30ae\u30ea\u30b9\u300d\u306e\u8a18\u4e8b\u3060\u3051\u62bd\u51fa\u3059\u308b\u4f5c\u696d\u304c\u7d9a\u304f\u306e\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u307e\u3057\u305f\uff0e\n\n```python:extract_from_json.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# extract_from_json.py\n\nimport json\n\n\ndef extract_from_json(title):\n    with open(\"jawiki-country.json\") as f:\n        json_data = f.readline()\n        while json_data:\n            article_dict = json.loads(json_data)\n            if article_dict[\"title\"] == title:\n                return article_dict[\"text\"]\n            else:\n                json_data = f.readline()\n    return \"\"\n\n```\n\n`20.py` \u3068\u7570\u306a\u308a\uff0c\u4eca\u56de\u306e\u95a2\u6570\u306f\u30bf\u30a4\u30c8\u30eb\u3092\u5f15\u6570\u306b\u6e21\u3059\u3068\u305d\u306e\u8a18\u4e8b\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\uff08\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\uff09\uff0e\n\n## 21. \u30ab\u30c6\u30b4\u30ea\u540d\u3092\u542b\u3080\u884c\u3092\u62bd\u51fa\n> \u8a18\u4e8b\u4e2d\u3067\u30ab\u30c6\u30b4\u30ea\u540d\u3092\u5ba3\u8a00\u3057\u3066\u3044\u308b\u884c\u3092\u62bd\u51fa\u305b\u3088\uff0e\n\n### \u56de\u7b54\n```python:21.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 21.py\n\nfrom mymodule import extract_from_json\n\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    if \"Category\" in line:\n        print(line)\n\n# python3 \u306a\u3089\u3053\u308c\u3067\u3082\u8868\u793a\u53ef\u80fd\uff08list \u3060\u3051\u3069\uff09\n# print([line for line in lines if \"Category\" in line])\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u6b63\u898f\u8868\u73fe\u306e\u7ae0\u306a\u306e\u306b\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u308f\u305a\uff0e\u307e\u3042\u3053\u3061\u3089\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3057\u2026\n\u3068\u3044\u3046\u308f\u3051\u3067 \"Category\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u542b\u3080\u884c\u3060\u3051 `print` \u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u5185\u5305\u8a18\u6cd5\u3067\u66f8\u3051\u3070\u3059\u3063\u304d\u308a\u53ce\u307e\u308b\u306e\u3067\u3059\u304c\uff0cPython2 \u3067\u306f Unicode \u6587\u5b57\u5217\u3092\u542b\u3080\u30ea\u30b9\u30c8\u3092\u305d\u306e\u307e\u307e `print` \u3059\u308b\u3068\u30a8\u30b9\u30b1\u30fc\u30d7\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\u65e5\u672c\u8a9e\u3068\u3057\u3066\u8aad\u3081\u308b\u5f62\u3067\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\uff0e\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f Python3 \u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u306e\u3067\uff0c Python3 \u3067\u5b9f\u884c\u3059\u308b\u3068\u4e0a\u624b\u304f\u51e6\u7406\u3057\u3066\u304f\u308c\u307e\u3059\uff0e\n\n\n## 22. \u30ab\u30c6\u30b4\u30ea\u540d\u306e\u62bd\u51fa\n> \u8a18\u4e8b\u306e\u30ab\u30c6\u30b4\u30ea\u540d\u3092\uff08\u884c\u5358\u4f4d\u3067\u306f\u306a\u304f\u540d\u524d\u3067\uff09\u62bd\u51fa\u305b\u3088\uff0e\n\n### \u56de\u7b54\n\n```python:22.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 22.py\n\nimport re\nfrom mymodule import extract_from_json\n\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    category_line = re.search(\"^\\[\\[Category:(.*?)(|\\|.*)\\]\\]$\", line)\n    if category_line is not None:\n        print(category_line.group(1))\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u307e\u305a21.\u3068\u540c\u69d8\u306b\u30ab\u30c6\u30b4\u30ea\u884c\u3092\u629c\u304d\u51fa\u3057\u3066\uff0c\u305d\u3053\u304b\u3089\u540d\u524d\u3060\u3051\u3092 `re.search()` \u3092\u7528\u3044\u3066\u62bd\u51fa\u3057\u307e\u3059\uff0e\n`re.search()` \u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u6587\u5b57\u5217\u306e\u4e2d\u3067\uff0c\u7b2c1\u5f15\u6570\u306e\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3059\u308b\u7b87\u6240\u304c\u3042\u308c\u3070 `MatchObject` \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\uff0e\n`MatchObject` \u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u306f\u3055\u3066\u304a\u304d\uff0c`.group()` \u3092\u4f7f\u3046\u3068\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u4eca\u56de\u3067\u3044\u3048\u3070 `category_line.group(0)` \u3067\u306f\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u5168\u4f53\uff08e.g. `\"[[Category:\u30a4\u30ae\u30ea\u30b9|*]]\"`\uff09\u304c\uff0c`category_line.group(1)` \u3067\u306f\u6700\u521d\u306b\u30de\u30c3\u30c1\u3057\u305f\u90e8\u5206\u6587\u5b57\u5217\uff08e.g. `\u30a4\u30ae\u30ea\u30b9`\uff09\u304c\u5f97\u3089\u308c\u307e\u3059\uff0e\n\n\u305d\u3057\u3066\u809d\u5fc3\u306e\u6b63\u898f\u8868\u73fe\u306a\u306e\u3067\u3059\u304c\uff0c\u8a73\u7d30\u306f[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.python.jp/2/howto/regex.html)\u306b\u4e38\u6295\u3052\u3057\u3066\uff0c\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u5177\u4f53\u7684\u306a\u9069\u5fdc\u4f8b\u3092\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u51e6\u7406\u3059\u308b\u30ab\u30c6\u30b4\u30ea\u884c\u306f\u3053\u3061\u3089\uff0821.py \u306e\u5b9f\u884c\u7d50\u679c\uff09\n\n```bash:22.py\u306e\u5b9f\u884c\u7d50\u679c\n$ python 22.py\n[[Category:\u30a4\u30ae\u30ea\u30b9|*]]\n[[Category:\u82f1\u9023\u90a6\u738b\u56fd|*]]\n[[Category:G8\u52a0\u76df\u56fd]]\n[[Category:\u6b27\u5dde\u9023\u5408\u52a0\u76df\u56fd]]\n[[Category:\u6d77\u6d0b\u56fd\u5bb6]]\n[[Category:\u541b\u4e3b\u56fd]]\n[[Category:\u5cf6\u56fd|\u304f\u308c\u3044\u3068\u3075\u308a\u3066\u3093]]\n[[Category:1801\u5e74\u306b\u8a2d\u7acb\u3055\u308c\u305f\u5dde\u30fb\u5730\u57df]]\n```\n\n\u57fa\u672c\u7684\u306b\u306f `[[Category:\u30ab\u30c6\u30b4\u30ea\u540d]]` \u3067\u3059\u304c\uff0c\u4e00\u90e8 `|` \u3067\u533a\u5207\u3063\u3066\u8aad\u307f\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff0e\u306a\u306e\u3067\u65b9\u91dd\u3068\u3057\u3066\u306f\uff0c\n\n- \u307e\u305a `[[Category:` \u3067\u59cb\u307e\u308b\n- \u4f55\u304b\u3057\u3089\u306e\u6587\u5b57\u5217\uff08\u30ab\u30c6\u30b4\u30ea\u540d\uff09\u304c\u6765\u308b\n\t- \u5834\u5408\u306b\u3088\u3063\u3066\u306f `|` \u3067\u533a\u5207\u3089\u308c\u305f\u8aad\u307f\u4eee\u540d\u304c\u6765\u308b\n- \u6700\u5f8c\u306b `]]` \u3067\u7de0\u3081\u308b\n\n\u3068\u3044\u3063\u305f\u5f62\u306b\u306a\u308a\u307e\u3059\uff0e\n\u3053\u308c\u3092\u6b63\u898f\u8868\u73fe\u3067\u8868\u3059\u3068\uff08\u6700\u9069\u304b\u306f\u81ea\u4fe1\u304c\u3042\u308a\u307e\u305b\u3093\u304c\uff09 `\"^\\[\\[Category:(.*?)(\\|.*)*\\]\\]$\"` \u3068\u306a\u308a\u307e\u3059\uff0e\n\n| \u610f\u56f3 | \u5b9f\u969b\u306e\u6b63\u898f\u8868\u73fe | \u89e3\u8aac |\n|-----------|------------|------------|\n|\u307e\u305a `[[Category:` \u3067\u59cb\u307e\u308b|`^\\[\\[Category:`|^ \u3067\u5148\u982d\u6307\u5b9a|\n|\u4f55\u304b\u3057\u3089\u306e\u6587\u5b57\u5217\uff08\u30ab\u30c6\u30b4\u30ea\u540d\uff09\u304c\u6765\u308b|`(.*?)`|\u4efb\u610f\u306e\u6587\u5b57\u5217\u3068\u6700\u77ed\u4e00\u81f4|\n| \u5834\u5408\u306b\u3088\u3063\u3066\u306f `|` \u3067\u533a\u5207\u3089\u308c\u305f\u8aad\u307f\u4eee\u540d\u304c\u6765\u308b | `(\\|.*)*` | `(\\|.*)*?` \u306e\u65b9\u304c\u9069\u5207\u304b\u3082 |\n| \u6700\u5f8c\u306b `]]` \u3067\u7de0\u3081\u308b | `\\]\\]$` | \u7d42\u7aef\u3092\u793a\u3059 `$` \u306f\u5fc5\u8981\u306a\u3044\u304b\u3082 |\n\n\n\n## 23. \u30bb\u30af\u30b7\u30e7\u30f3\u69cb\u9020\n> \u8a18\u4e8b\u4e2d\u306b\u542b\u307e\u308c\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u540d\u3068\u305d\u306e\u30ec\u30d9\u30eb\uff08\u4f8b\u3048\u3070\"== \u30bb\u30af\u30b7\u30e7\u30f3\u540d ==\"\u306a\u30891\uff09\u3092\u8868\u793a\u305b\u3088\uff0e\n\n### \u56de\u7b54\n```python:23.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 23.py\n\nimport re\nfrom mymodule import extract_from_json\n\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    section_line = re.search(\"^(=+)\\s*(.*?)\\s*(=+)$\", line)\n    if section_line is not None:\n        print(section_line.group(2), len(section_line.group(1)) - 1)\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\n\u57fa\u672c\u69cb\u9020\u306f 22. \u3068\u540c\u69d8\u3067\u3059\u304c\uff0c\u4eca\u56de\u306f\u30bb\u30af\u30b7\u30e7\u30f3\u540d\uff08e.g. == \u30bb\u30af\u30b7\u30e7\u30f3 ==\uff09\u304c\u5bfe\u8c61\u306a\u306e\u3067\u305d\u308c\u3092\u62fe\u3063\u3066\u3044\u304d\u307e\u3059\uff0e\n\u5fae\u5999\u306b\u8868\u8a18\u63fa\u308c\u304c\u3042\u3063\u305f\u306e\u3067\uff08==\u30bb\u30af\u30b7\u30e7\u30f3==\uff0c== \u30bb\u30af\u30b7\u30e7\u30f3 ==\uff09\u305d\u308c\u3092\u5438\u53ce\u3067\u304d\u308b\u3088\u3046\u306b\u7a7a\u767d\u6587\u5b57\u3092\u8868\u3059 `\\s` \u3092\u9593\u306b\u631f\u3093\u3067\u3042\u308a\u307e\u3059\uff0e\n\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30ec\u30d9\u30eb\u306f `==` \u306e\u9577\u3055\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\uff08==1==\uff0c===2===\uff0c...\uff09\u305d\u306e\u9577\u3055\u3092\u53d6\u5f97\u3057\u3066 -1 \u3059\u308b\u3053\u3068\u3067\u7b97\u51fa\u3057\u3066\u3044\u307e\u3059\uff0e\n\n## 24. \u30d5\u30a1\u30a4\u30eb\u53c2\u7167\u306e\u62bd\u51fa\n> \u8a18\u4e8b\u304b\u3089\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u30e1\u30c7\u30a3\u30a2\u30d5\u30a1\u30a4\u30eb\u3092\u3059\u3079\u3066\u629c\u304d\u51fa\u305b\uff0e\n\n### \u56de\u7b54\n```python:24.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 24.py\n\nimport re\nfrom mymodule import extract_from_json\n\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    file_line = re.search(u\"(File|\u30d5\u30a1\u30a4\u30eb):(.*?)\\|\", line)\n    if file_line is not None:\n        print(file_line.group(2))\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u5f53\u521d `File:` \u304b\u3089\u59cb\u307e\u308b\u3082\u306e\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u3066\u3044\u305f...\u9593\u629c\u3051\uff0e\n\n\u6b63\u898f\u8868\u73fe\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u65e5\u672c\u8a9e\u304c\u5165\u3063\u3066\u304f\u308b\u90fd\u5408\u4e0a `Unicode` \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\uff0cPython \u306e\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u3067\u306f\u306f\u8a31\u3055\u308c\u308b\u3089\u3057\u3044\uff0e\n\u3088\u304f `r\"hogehoge\"` \u3068\u3057\u3066 raw \u6587\u5b57\u5217\u306b\u3057\u3066\u3044\u308b\u4f8b\u3092\u3088\u304f\u898b\u307e\u3059\u304c\uff0c\u3053\u308c\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u304c\u30c0\u30d6\u3063\u3066\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3092\u9632\u3050\u3082\u306e\u306a\u306e\u3067\uff0c\u5c11\u306a\u304f\u3068\u3082\u30de\u30b9\u30c8\u3067\u306f\u306a\u3044\u611f\u3058\uff1f\n\u3055\u3089\u306b\u8a00\u3048\u3070\u7e70\u308a\u8fd4\u3057\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u3092\u4f7f\u3044\u56de\u3059\u306e\u3067\u3042\u308c\u3070 `re.compile()` \u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u65b9\u304c\u52b9\u7387\u7684\u3089\u3057\u3044\u3067\u3059\uff0e\u304c\uff0c\u6700\u5f8c\u306b\u4f7f\u7528\u3057\u305f\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u308b\u3068\u306e\u3053\u3068\u306a\u306e\u3067\uff0c\u4eca\u56de\u306f\u305d\u3053\u307e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3055\u305d\u3046\uff0e\n\n## 25. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u62bd\u51fa\n> \u8a18\u4e8b\u4e2d\u306b\u542b\u307e\u308c\u308b\u300c\u57fa\u790e\u60c5\u5831\u300d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u5024\u3092\u62bd\u51fa\u3057\uff0c\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u683c\u7d0d\u305b\u3088\uff0e\n\n\n### \u56de\u7b54\n\n```python:25.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 25.py\n\nimport re\nfrom mymodule import extract_from_json\n\ntemp_dict = {}\nlines = re.split(r\"\\n[\\|}]\", extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\"))\n\nfor line in lines:\n    temp_line = re.search(\"^(.*?)\\s=\\s(.*)\", line, re.S)\n    if temp_line is not None:\n        temp_dict[temp_line.group(1)] = temp_line.group(2)\n\nfor k, v in sorted(temp_dict.items(), key=lambda x: x[1]):\n    print(k, v)\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n~~\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f `|\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d = \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u5bb9` \u3068\u3044\u3046\u5f62\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u308c\u306b\u5408\u308f\u305b\u305f\u6b63\u898f\u8868\u73fe\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u4e0a\u8a18\u306e\u901a\u308a `^\\|(.*?)\\s=\\s(.*)` \u3068\u66f8\u304f\u30681\u756a\u76ee\u306e\u62ec\u5f27\u5185\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\uff0c2\u756a\u3081\u306e\u62ec\u5f27\u5185\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u5bb9\u3068\u306a\u308b\u306e\u3067\u305d\u308c\u3092\u8f9e\u66f8\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\uff0e~~\n\n\u57fa\u672c\u7684\u306b\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f `|\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d = \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u5bb9` \u3068\u3044\u3046\u5f62\u3067 **\u5404\u884c\u306b** \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0c\u3061\u3087\u3063\u3068\u516c\u5f0f\u56fd\u540d\u304c\u5384\u4ecb\u3067\u3057\u305f\uff0e\n\n```json:\u516c\u5f0f\u56fd\u540d\n|\u516c\u5f0f\u56fd\u540d = {{lang|en|United Kingdom of Great Britain and Northern Ireland}}<ref>\u82f1\u8a9e\u4ee5\u5916\u3067\u306e\u6b63\u5f0f\u56fd\u540d:<br/>\n*{{lang|gd|An R\u00ecoghachd Aonaichte na Breatainn Mh\u00f2r agus Eirinn mu Thuath}}\uff08[[\u30b9\u30b3\u30c3\u30c8\u30e9\u30f3\u30c9\u30fb\u30b2\u30fc\u30eb\u8a9e]]\uff09<br/>\n*{{lang|cy|Teyrnas Gyfunol Prydain Fawr a Gogledd Iwerddon}}\uff08[[\u30a6\u30a7\u30fc\u30eb\u30ba\u8a9e]]\uff09<br/>\n*{{lang|ga|R\u00edocht Aontaithe na Breataine M\u00f3ire agus Tuaisceart na h\u00c9ireann}}\uff08[[\u30a2\u30a4\u30eb\u30e9\u30f3\u30c9\u8a9e]]\uff09<br/>\n*{{lang|kw|An Rywvaneth Unys a Vreten Veur hag Iwerdhon Gl\u00e9dh}}\uff08[[\u30b3\u30fc\u30f3\u30a6\u30a9\u30fc\u30eb\u8a9e]]\uff09<br/>\n*{{lang|sco|Unitit Kinrick o Great Breetain an Northren Ireland}}\uff08[[\u30b9\u30b3\u30c3\u30c8\u30e9\u30f3\u30c9\u8a9e]]\uff09<br/>\n**{{lang|sco|Claught K\u00e4ngrick o Docht Br\u00e4tain an Norlin Airlann}}\u3001{{lang|sco|Unitet K\u00e4ngdom o Great Brittain an Norlin Airlann}}\uff08\u30a2\u30eb\u30b9\u30bf\u30fc\u30fb\u30b9\u30b3\u30c3\u30c8\u30e9\u30f3\u30c9\u8a9e\uff09</ref>\n\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u6539\u884c\uff08\u6587\u5b57=`\\n`\uff09\u3092\u542b\u3093\u3067\u8907\u6570\u884c\u306b\u307e\u305f\u304c\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u306e\u8fba\u3092\u4e0a\u624b\u304f\u51e6\u7406\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u7d50\u5c40\uff0c\n\n* `split()` \u3059\u308b\u969b\u306b\uff0c`\\n` \u3067\u306f\u306a\u304f `\\n|` or `\\n}` \u3067\uff08`re.split()`\uff09\n\t* \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5883\u306b\u306a\u308b\u3068\u3053\u308d\u3067 `split()`\n\t* `}` \u304c\u7d61\u3093\u3067\u304f\u308b\u306e\u306f \u4e00\u756a\u6700\u5f8c\u3067 `|` \u304c\u51fa\u3066\u3053\u306a\u3044\u304b\u3089\u3067\u3059\n* `\\n` \u3082\u542b\u3081\u3066 `re.search()` \u3059\u308b\u305f\u3081\u306b `re.S` \u3068\u3044\u3046\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n* `|` \u304c `split()` \u3067\u5439\u3063\u98db\u3093\u3067\u3044\u308b\u306e\u3067 `search()` \u3067\u8003\u616e\n\n\u3068\u8272\u3005\u8a66\u884c\u932f\u8aa4\u3057\u3066\u3067\u304d\u307e\u3057\u305f\uff0e\n\n\u4e00\u5fdc\u4e2d\u8eab\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081 `for loop` \u3067 `print` \u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u308c\u307e\u305f Python3 \u63a8\u5968\uff0e\u4f55\u3060\u304b\u3093\u3060\u3044\u3063\u3066 Python3 \u4fbf\u5229\u3060...\n\n\n## 26. \u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u306e\u9664\u53bb\n> 25\u306e\u51e6\u7406\u6642\u306b\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u306e\u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\uff08\u5f31\u3044\u5f37\u8abf\uff0c\u5f37\u8abf\uff0c\u5f37\u3044\u5f37\u8abf\u306e\u3059\u3079\u3066\uff09\u3092\u9664\u53bb\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u305b\u3088\uff08\u53c2\u8003: [\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868](https://ja.wikipedia.org/wiki/Help:\u65e9\u898b\u8868)\uff09\uff0e\n\n\n### \u56de\u7b54\n```python:26.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 26.py\n\nimport re\nfrom mymodule import extract_from_json\n\ntemp_dict = {}\nlines = re.split(r\"\\n[\\|}]\", extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\"))\n\nfor line in lines:\n    temp_line = re.search(\"^(.*?)\\s=\\s(.*)\", line, re.S)\n    if temp_line is not None:\n        temp_dict[temp_line.group(1)] = re.sub(r\"'{2,5}\", r\"\", temp_line.group(2))\n\n# 25.py \u3068\u540c\u69d8 Python3 \u53c2\u7167\nfor k, v in sorted(temp_dict.items(), key=lambda x: x[1]):\n    print(k, v)\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\n`re.sub` \u306f\u6b63\u898f\u8868\u73fe\u306b\u30de\u30c3\u30c1\u3059\u308b\u90e8\u5206\u3092\u7f6e\u63db\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u3067\u3059\uff0e\n\u4eca\u56de\u306f2\u500b\u4ee5\u4e0a5\u500b\u4ee5\u4e0b\u306e `'` \u3092\u6d88\u53bb\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e\n`{n, m}` \u3068\u66f8\u304f\u3068\u76f4\u524d\u306e\u6587\u5b57\u304cn\u500b\u4ee5\u4e0am\u500b\u4ee5\u4e0b\u3068\u6b63\u898f\u8868\u73fe\u3067\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n~~\u307e\u3042\u4eca\u56de\u306f\u7d14\u7c8b\u306b `'` \u3092\u5168\u9664\u53bb\u3059\u308c\u3070\u3088\u304b\u3063\u305f\u6c17\u3082...~~\n\n## 27. \u5185\u90e8\u30ea\u30f3\u30af\u306e\u9664\u53bb\n> 26\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u306e\u5185\u90e8\u30ea\u30f3\u30af\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u9664\u53bb\u3057\uff0c\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u305b\u3088\uff08\u53c2\u8003: [\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868](https://ja.wikipedia.org/wiki/Help:\u65e9\u898b\u8868)\uff09\uff0e\n\n### \u56de\u7b54\n```python:27.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 27.py\n\nimport re\nfrom mymodule import extract_from_json\n\n\ndef remove_markup(str):\n    str = re.sub(r\"'{2,5}\", r\"\", str)\n    str = re.sub(r\"\\[{2}([^|\\]]+?\\|)*(.+?)\\]{2}\", r\"\\2\", str)\n    return str\n\ntemp_dict = {}\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    category_line = re.search(\"^\\|(.*?)\\s=\\s(.*)\", line)\n    if category_line is not None:\n        temp_dict[category_line.group(1)] = remove_markup(category_line.group(2))\n\nfor k, v in sorted(temp_dict.items(), key=lambda x: x[0]):\n    print(k, v)\n    \n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u9664\u53bb\u3059\u308b\u95a2\u6570 `remove_markup()` \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n\n| \u884c\u756a\u53f7 | \u9664\u53bb\u5bfe\u8c61 |\n|-----------|------------|\n|1\u884c\u76ee|\u5f37\u8abf\uff0826\u3068\u540c\u69d8\uff09|\n|2\u884c\u76ee|\u5185\u90e8\u30ea\u30f3\u30af|\n\n\u5185\u90e8\u30ea\u30f3\u30af\u306e\u8a18\u8ff0\u6cd5\u306b\u306f\n\n* [[\u8a18\u4e8b\u540d]]\n* [[\u8a18\u4e8b\u540d|\u8868\u793a\u6587\u5b57]]\n* [[\u8a18\u4e8b\u540d#\u7bc0\u540d|\u8868\u793a\u6587\u5b57]] \n\n\u306e3\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u3044\u305a\u308c\u3082\u300c`[[` \u304b\u3089\u59cb\u307e\u3063\u3066\uff0c\u4f55\u3089\u304b\u306e\u8a18\u53f7\uff08`]]`\uff0c`|`\uff0c`#`\uff09\u304c\u6765\u308b\u307e\u3067\u304c\u8a18\u4e8b\u540d\u300d\u3068\u3044\u3046\u6cd5\u5247\u304c\u3042\u308b\u306e\u3067\uff0c\u305d\u308c\u306b\u6e96\u62e0\u3057\u305f\u6b63\u898f\u8868\u73fe\u3092\u66f8\u304d\u307e\u3057\u305f\uff0e\n\n\n## 28. MediaWiki\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u306e\u9664\u53bb\n> 27\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u53ef\u80fd\u306a\u9650\u308a\u9664\u53bb\u3057\uff0c\u56fd\u306e\u57fa\u672c\u60c5\u5831\u3092\u6574\u5f62\u305b\u3088\uff0e\n\n### \u56de\u7b54\n```python:28.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 28.py\n\nimport re\nfrom mymodule import extract_from_json\n\n\ndef remove_markup(str):\n    str = re.sub(r\"'{2,5}\", r\"\", str)\n    str = re.sub(r\"\\[{2}([^|\\]]+?\\|)*(.+?)\\]{2}\", r\"\\2\", str)\n    str = re.sub(r\"\\{{2}.+?\\|.+?\\|(.+?)\\}{2}\", r\"\\1 \", str)\n    str = re.sub(r\"<.*?>\", r\"\", str)\n    str = re.sub(r\"\\[.*?\\]\", r\"\", str)\n    return str\n\ntemp_dict = {}\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    temp_line = re.search(\"^\\|(.*?)\\s=\\s(.*)\", line)\n    if temp_line is not None:\n        temp_dict[temp_line.group(1)] = remove_markup(temp_line.group(2))\n\nfor k, v in sorted(temp_dict.items(), key=lambda x: x[0]):\n    print(k, v)\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\n27\u306b\u52a0\u3048\uff0c\n\n| \u884c\u756a\u53f7 | \u9664\u53bb\u5bfe\u8c61 |\n|-----------|------------|\n|1\u884c\u76ee|\u5f37\u8abf\uff0826\u3068\u540c\u69d8\uff09|\n|2\u884c\u76ee|\u5185\u90e8\u30ea\u30f3\u30af\uff0827\u3068\u540c\u69d8\uff09|\n|3\u884c\u76ee|\uff08\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868\u306b\u306f\u7121\u3044\u3051\u3069\uff09\u8a00\u8a9e\u3092\u6307\u5b9a\u3057\u305f\u8868\u8a18|\n|4\u884c\u76ee|\u30b3\u30e1\u30f3\u30c8|\n|5\u884c\u76ee|\u5916\u90e8\u30ea\u30f3\u30af|\n\n\u3092\u9664\u53bb\u3067\u304d\u308b\u3088\u3046\u306b `remove_markup()` \u3092\u66f8\u304d\u63db\u3048\u307e\u3057\u305f\uff0e\n\n\n## 29. \u56fd\u65d7\u753b\u50cf\u306eURL\u3092\u53d6\u5f97\u3059\u308b\n> \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5185\u5bb9\u3092\u5229\u7528\u3057\uff0c\u56fd\u65d7\u753b\u50cf\u306eURL\u3092\u53d6\u5f97\u305b\u3088\uff0e\uff08\u30d2\u30f3\u30c8: MediaWiki API\u306eimageinfo\u3092\u547c\u3073\u51fa\u3057\u3066\uff0c\u30d5\u30a1\u30a4\u30eb\u53c2\u7167\u3092URL\u306b\u5909\u63db\u3059\u308c\u3070\u3088\u3044\uff09\n\n\n\n### \u56de\u7b54\n```python:29.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 29.py\n\nimport re\nimport requests\nfrom mymodule import extract_from_json\n\n\ndef json_search(json_data):\n    ret_dict = {}\n    for k, v in json_data.items():\n        if isinstance(v, list):\n            for e in v:\n                ret_dict.update(json_search(e))\n        elif isinstance(v, dict):\n            ret_dict.update(json_search(v))\n        else:\n            ret_dict[k] = v\n    return ret_dict\n\n\ndef remove_markup(str):\n    str = re.sub(r\"'{2,5}\", r\"\", str)\n    str = re.sub(r\"\\[{2}([^|\\]]+?\\|)*(.+?)\\]{2}\", r\"\\2\", str)\n    str = re.sub(r\"\\{{2}.+?\\|.+?\\|(.+?)\\}{2}\", r\"\\1 \", str)\n    str = re.sub(r\"<.*?>\", r\"\", str)\n    str = re.sub(r\"\\[.*?\\]\", r\"\", str)\n    return str\n\ntemp_dict = {}\nlines = extract_from_json(u\"\u30a4\u30ae\u30ea\u30b9\").split(\"\\n\")\n\nfor line in lines:\n    temp_line = re.search(\"^\\|(.*?)\\s=\\s(.*)\", line)\n    if temp_line is not None:\n        temp_dict[temp_line.group(1)] = remove_markup(temp_line.group(2))\n\nurl = \"https://en.wikipedia.org/w/api.php\"\npayload = {\"action\": \"query\",\n           \"titles\": \"File:{}\".format(temp_dict[u\"\u56fd\u65d7\u753b\u50cf\"]),\n           \"prop\": \"imageinfo\",\n           \"format\": \"json\",\n           \"iiprop\": \"url\"}\n\njson_data = requests.get(url, params=payload).json()\n\nprint(json_search(json_data)[\"url\"])\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\nPython \u3067 API \u3092\u53e9\u304f\u305f\u3081\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u3093\u3060\u308d\u3046\uff1f\n\u3068\u8abf\u3079\u3066\u307f\u308b\u3068\u3053\u308c\u304c\u306a\u304b\u306a\u304b\u3084\u3084\u3053\u3057\u304f...\n\n* `urllib` \u304c\u5f93\u6765\u7528\u3044\u3089\u308c\u3066\u304d\u305f\n* `urllib2` \u3067\u8907\u96d1\u306a\u8a2d\u5b9a\u304c\u53ef\u80fd\u306b\u306a\u3063\u305f\n* Python 3 \u304b\u3089\u7d71\u5408\u3055\u308c\u3066 \u65b0\u751f\u3000`urllib`\u3000\u3068\u306a\u3063\u305f\n* \u4f7f\u3044\u3065\u3089\u3044\u306e\u3067 `requests` \u304c\u958b\u767a\u3055\u308c\u305f\n* `requests` \u306e\u88cf\u5074\u306b\u306f `urllib3` \u304c\u3044\u308b\n\n...\u3068\u307e\u3042\u7d50\u8ad6\u304b\u3089\u8a00\u3048\u3070 `requests` \u304c\u304a\u3059\u3059\u3081\u3060\u3088\uff0c\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3067\u3059\uff0e\n[Python 3 \u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.python.jp/3.5/library/urllib.request.html) \u3067\u3082\uff0c\n\n> \u3088\u308a\u9ad8\u3044\u30ec\u30d9\u30eb\u306e http \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068\u3057\u3066\u306f\u3001 Requests package \u304c\u304a\u5968\u3081\u3067\u3059\u3002\n\n\u3068\u304b\uff0c[Requests \u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://requests-docs-ja.readthedocs.org/en/latest/)\u306b\u81f3\u3063\u3066\u306f\uff0c\n\n> Requests: \u4eba\u9593\u306e\u305f\u3081\u306eHTTP\n>\uff08\u4e2d\u7565\uff09\n> Python\u306e\u6a19\u6e96\u306e urllib2 \u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u5fc5\u8981\u3068\u3055\u308c\u308b\u307b\u3068\u3093\u3069\u306eHTTP\u306e\u6a5f\u80fd\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u304c\u3001API\u304c\u307e\u3068\u3082\u306b \u4f7f\u3048\u307e\u305b\u3093 \u3002\n\n\u3068\u304b\u5f37\u3044\u6587\u9762\u3067 `requests` \u304c\u304a\u3059\u3059\u3081\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3054\u53c2\u7167\u3044\u305f\u3060\u304f\u3068\u3057\u3066\uff0c\u4eca\u56de\u306f API \u3092\u53e9\u3044\u305f\u7d50\u679c\u3092 JSON \u3067\u53d7\u3051\u53d6\u3063\u3066\u51e6\u7406\u3057\u307e\u3057\u305f\uff0e\n\u8fd4\u3063\u3066\u304f\u308b JSON \u306e\u69cb\u9020\u304c\u3084\u3084\u3053\u3057\u304b\u3063\u305f\u306e\u3067\uff0c\u5168\u63a2\u67fb\u3057\u3066 URL \u306e\u66f8\u3044\u3066\u3042\u308b\u7b87\u6240\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\n# \u304a\u308f\u308a\u306b\n\u7b2c4\u7ae0\u3078\u3068\u7d9a\u304d\u307e\u3059\uff0e\n", "tags": ["NLP", "Python", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u6b63\u898f\u8868\u73fe"]}