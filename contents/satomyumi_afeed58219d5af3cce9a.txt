{"context": " More than 1 year has passed since last update.Perl\u3067\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u51fa\u6765\u306a\u3044\u69d8\u3067\u3059\u306d\u3002\u307e\u3041\u3053\u3093\u306a\u3060\u3051\u5909\u6570\u306e\u578b\u306b\u3086\u308b\u3086\u308b\u3060\u3063\u305f\u3089\u3001\u51fa\u6765\u308b\u308f\u3051\u3082\u306a\u3044\u306e\u304b\u3068\u601d\u3063\u305f\u308a\u3082\u3057\u307e\u3059\u304c\u3001\u3001\u3001\n\u4ee3\u66ff\u7b56\u3068\u3057\u3066\u3053\u3093\u306a\u306e\u304c\u3042\u308b\u307f\u305f\u3044\u3002\n\u79c1\u3068\u3057\u3066\u306f\u3001\u307e\u3068\u307e\u3063\u3066\u3066\u3044\u3044\u306a\u30fc\u3063\u3066\u611f\u3058\u3067\u3059\u3002\n\nTriangle.pm\npackage Triangle;\nuse Carp qw(croak);\n\nmy $subSpace = sub {\n        my($a,$b,$c) = @_;\n        my $s = ($a + $b + $c) / 2;\n        my $inRoot = $s * ($s - $a) * ($s - $b) * ($s - $c);\n        if ($inRoot >= 0){\n                return sqrt($inRoot);\n        }else{\n                croak \"you cannot construct the triangle with the sides $a, $b, $c !\";\n        }\n};\nsub new{\n        my ($class,$a,$b,$c) = @_;\n        bless{a=>$a, b=>$b,c=>$c, s=>$subSpace->($a,$b,$c)};\n#       my $self = {a=>$a, b=>$b, c=>$c};\n#       bless $self, $class;\n#       return $self;\n}\n\nsub space{\n        my ($self) = shift;\n        warn \"You are about to calculate the space of \", ref($self), \"!!!\\n\";\n        return $self->{s};\n}\n\n\nsub getSides{\n       my $self = shift;\n       return ($self->{a}, $self->{b}, $self->{c});\n}\n\nsub setSides{\n       my ($self, $a, $b, $c) = @_;\n       $self->{a} = $a;\n       $self->{b} = $b;\n       $self->{c} = $c;\n       $self->{s} = $subSpace->($a,$b,$c);\n}\n\n1;\n\n\n\u3053\u306egetter setter\u306e\u90e8\u5206\u3092\u3001\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u540d\u306b\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u5f15\u6570\u306e\u6570\u306b\u5fdc\u3058\u3066\u547c\u3076\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5909\u3048\u307e\u3059\u3002\n\nTriangle.pm\uff5e\u305d\u306e2\uff5e\nsub sides{\n        my $self = shift; # invocant\n        unless (@_) { # getter\n                return ($self->{a}, $self->{b}, $self->{c}); # return properties\n        } else { # setter\n                my ($a, $b, $c) = @_;\n                # get values from arguemnts and set properties\n                $self->{a} = $a;\n                $self->{b} = $b;\n                $self->{c} = $c;\n                $self->{s} = $subSpace->($a,$b,$c);\n        }\n}\n\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3053\u3093\u306a\u3082\u3093\u3067\u3001\u3042\u3068\u306f\u30b3\u30ec\u3092\u547c\u3076\u5074\u3067\u3001\u547c\u3076\u30e1\u30bd\u30c3\u30c9\u3092setSides, getSides\u304b\u3089\u305d\u308c\u305e\u308csides\u306b\u7d71\u4e00\u3057\u305f\u3089\u5b8c\u4e86\u3067\u3059\u3002\n\u547c\u3076\u5074\u306e\u30b3\u30fc\u30c9\u306e\u4f8b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\ntriangleSpace.pl\n#! /bin/perl -w\n\nuse Triangle;\n\nmy $tri = Triangle->new(3,4,5);\nmy $space = $tri->space;\nprint \"sides are \", join(\",\",$tri->sides), \". \\n\";\nprint \"Triangle is \",$tri,\" and its space is \",$space,\"\\n\";\n\nmy ($a,$b,$c) = $tri->sides;\n$tri->sides($a,$b,$c);\n$space = $tri->space;\nprint \"sides are \",join(\", \",$tri->sides), \". \\n\";\nprint \"Triangle is \",$tri,\" and its space is \",$space,\"\\n\";\n\n\n\u540c\u3058\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u9802\u3051\u305f\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3081\u3093\u3069\u3044\u3093\u3060\u304b\u306a\u3093\u3060\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u3053\u3093\u306a\u3084\u308a\u65b9\u3082\u51fa\u6765\u308b\u3093\u3067\u3059\u306d\uff5e\u3000\u52c9\u5f37\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nPerl\u3067\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u51fa\u6765\u306a\u3044\u69d8\u3067\u3059\u306d\u3002\u307e\u3041\u3053\u3093\u306a\u3060\u3051\u5909\u6570\u306e\u578b\u306b\u3086\u308b\u3086\u308b\u3060\u3063\u305f\u3089\u3001\u51fa\u6765\u308b\u308f\u3051\u3082\u306a\u3044\u306e\u304b\u3068\u601d\u3063\u305f\u308a\u3082\u3057\u307e\u3059\u304c\u3001\u3001\u3001\n\n\u4ee3\u66ff\u7b56\u3068\u3057\u3066\u3053\u3093\u306a\u306e\u304c\u3042\u308b\u307f\u305f\u3044\u3002\n\u79c1\u3068\u3057\u3066\u306f\u3001\u307e\u3068\u307e\u3063\u3066\u3066\u3044\u3044\u306a\u30fc\u3063\u3066\u611f\u3058\u3067\u3059\u3002\n\n````Triangle.pm\npackage Triangle;\nuse Carp qw(croak);\n\nmy $subSpace = sub {\n        my($a,$b,$c) = @_;\n        my $s = ($a + $b + $c) / 2;\n        my $inRoot = $s * ($s - $a) * ($s - $b) * ($s - $c);\n        if ($inRoot >= 0){\n                return sqrt($inRoot);\n        }else{\n                croak \"you cannot construct the triangle with the sides $a, $b, $c !\";\n        }\n};\nsub new{\n        my ($class,$a,$b,$c) = @_;\n        bless{a=>$a, b=>$b,c=>$c, s=>$subSpace->($a,$b,$c)};\n#       my $self = {a=>$a, b=>$b, c=>$c};\n#       bless $self, $class;\n#       return $self;\n}\n\nsub space{\n        my ($self) = shift;\n        warn \"You are about to calculate the space of \", ref($self), \"!!!\\n\";\n        return $self->{s};\n}\n\n\nsub getSides{\n       my $self = shift;\n       return ($self->{a}, $self->{b}, $self->{c});\n}\n\nsub setSides{\n       my ($self, $a, $b, $c) = @_;\n       $self->{a} = $a;\n       $self->{b} = $b;\n       $self->{c} = $c;\n       $self->{s} = $subSpace->($a,$b,$c);\n}\n\n1;\n````\n\n\u3053\u306egetter setter\u306e\u90e8\u5206\u3092\u3001\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u540d\u306b\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u5f15\u6570\u306e\u6570\u306b\u5fdc\u3058\u3066\u547c\u3076\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5909\u3048\u307e\u3059\u3002\n\n````Triangle.pm\uff5e\u305d\u306e2\uff5e\nsub sides{\n        my $self = shift; # invocant\n        unless (@_) { # getter\n                return ($self->{a}, $self->{b}, $self->{c}); # return properties\n        } else { # setter\n                my ($a, $b, $c) = @_;\n                # get values from arguemnts and set properties\n                $self->{a} = $a;\n                $self->{b} = $b;\n                $self->{c} = $c;\n                $self->{s} = $subSpace->($a,$b,$c);\n        }\n}\n````\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3053\u3093\u306a\u3082\u3093\u3067\u3001\u3042\u3068\u306f\u30b3\u30ec\u3092\u547c\u3076\u5074\u3067\u3001\u547c\u3076\u30e1\u30bd\u30c3\u30c9\u3092setSides, getSides\u304b\u3089\u305d\u308c\u305e\u308csides\u306b\u7d71\u4e00\u3057\u305f\u3089\u5b8c\u4e86\u3067\u3059\u3002\n\n\u547c\u3076\u5074\u306e\u30b3\u30fc\u30c9\u306e\u4f8b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\n````triangleSpace.pl\n#! /bin/perl -w\n\nuse Triangle;\n\nmy $tri = Triangle->new(3,4,5);\nmy $space = $tri->space;\nprint \"sides are \", join(\",\",$tri->sides), \". \\n\";\nprint \"Triangle is \",$tri,\" and its space is \",$space,\"\\n\";\n\nmy ($a,$b,$c) = $tri->sides;\n$tri->sides($a,$b,$c);\n$space = $tri->space;\nprint \"sides are \",join(\", \",$tri->sides), \". \\n\";\nprint \"Triangle is \",$tri,\" and its space is \",$space,\"\\n\";\n````\n\n\n\u540c\u3058\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u9802\u3051\u305f\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u3081\u3093\u3069\u3044\u3093\u3060\u304b\u306a\u3093\u3060\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u3053\u3093\u306a\u3084\u308a\u65b9\u3082\u51fa\u6765\u308b\u3093\u3067\u3059\u306d\uff5e\u3000\u52c9\u5f37\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n\n", "tags": ["Perl", "Beginner", "oop"]}