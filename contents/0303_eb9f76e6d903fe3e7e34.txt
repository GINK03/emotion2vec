{"context": "\n\n\u6982\u8981\n\nC#\u306b\u3042\u308bLINQ\u306e\u8003\u3048\u65b9\u3092MayaPython\u3067\u3082\u5f79\u7acb\u3066\u3089\u308c\u306a\u3044\u304b\uff1f\n\u3068\u3044\u3046\u306e\u3092\u63a2\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n\n\u3082\u3063\u3068\u697d\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u30ea\u30b9\u30c8\u64cd\u4f5c\u3092\u3057\u305f\u3044\u3002\nC#\u3068\u4f3c\u305f\u3088\u3046\u306a\u66f8\u304d\u65b9\u304c\u51fa\u6765\u308c\u3070\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u30b3\u30b9\u30c8\u304c\u4e0b\u304c\u308b\u306f\u305a\u3002\n\n\nLINQ\u3068\u306f\nLINQ\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306f\u4ed6\u30b5\u30a4\u30c8\u306b\u304a\u4efb\u305b\u3059\u308b\u3068\u3057\u3066\u3001\uff08\u53c2\u8003\u30b5\u30a4\u30c8\u3092\u30da\u30fc\u30b8\u6700\u4e0b\u90e8\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\uff09\n\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\u300c\u30ea\u30b9\u30c8\u306a\u3069\u306b\u5bfe\u3057\u3066SQL\u6587\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u3067\u5024\u3092\u30d5\u30a3\u30eb\u30bf\u3057\u305f\u308a\u52a0\u5de5\u3057\u305f\u308a\u3059\u308b\u6a5f\u80fd\u300d\u3067\u3059\u3002\n\u5b9f\u969b\u306bLINQ\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nLinqSample.cs\nvar hoge = new int[] { 0, 1, 2, 3, 4, 5 };\nvar hogehoge = hoge.where(n => n > 3).select(n => n * n);\nforeach (var x in hogehoge)\n    Debug.WriteLine(x);\n\n>>> 16\n>>> 25\n\n\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3092Python\u306e\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3067\u66f8\u304f\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nlist_comprehension_sample.py\nhoge = [0, 1, 2, 3, 4, 5]\nhogehoge = [x * x for x in hoge if x > 3]\nfor x in hogehoge:\n    print x\n\n>>> 16\n>>> 25\n\n\n\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u304c\u3042\u308c\u3070\u3044\u3044\u304b\u306a\uff5e\u3068\u601d\u3044\u307e\u3059\u306d\u3002\uff08\u6d41\u77f3Python\uff09\n\u3055\u3089\u306bPython\u3067\u306f\u30b9\u30e9\u30a4\u30b9\u304c\u4f7f\u3048\u308b\u306e\u3067\u30ea\u30b9\u30c8\u64cd\u4f5c\u3067\u56f0\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u3067\u3059\u3002\nLINQ\u306e\u7279\u5fb4\u3068\u3057\u3066\u306f\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3084\u9045\u5ef6\u8a55\u4fa1\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u304c\u3001\n\u5358\u7d14\u306b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u3057\u3064\u3064\u3001\u308f\u304b\u308a\u3084\u3059\u304f\u66f8\u304d\u3084\u3059\u3044\u3068\u3044\u3046\u306e\u304c\u5927\u304d\u306a\u30e1\u30ea\u30c3\u30c8\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nPython\u306e\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3084\u30b9\u30e9\u30a4\u30b9\u3067\u8907\u96d1\u306a\u64cd\u4f5c\u3092\u66f8\u304f\u3068\u8457\u3057\u304f\u53ef\u8aad\u6027\u304c\u843d\u3061\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3092\u8e0f\u307e\u3048\u3064\u3064\u3001LINQ\u306e\u826f\u3044\u90e8\u5206\u3092\u306a\u3093\u3068\u304b\u518d\u73fe\u3067\u304d\u306a\u3044\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u8a66\u4f5c\u7b2c\uff11\u5f3e\n\n\u307e\u305a\u306f\u96f0\u56f2\u6c17\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3060\u3051\u305d\u308c\u3063\u307d\u304f\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nLINQ\u3068\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3001\u5358\u4f53\u52b9\u679c\u3060\u3051\u8fd1\u3065\u3051\u3066\u307f\u305f\u306e\u304c\u8a66\u4f5c\u7b2c\uff11\u5f3e\u3067\u3059\u3002\n\niterator_v1.py\nclass GeneralIterator(object):\n    \"\"\"LINQ\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u4f7f\u3063\u3066\u30ea\u30b9\u30c8\u64cd\u4f5c\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30af\u30e9\u30b9\n\n    <usage>\n    selection = GeneralIterator(cmds.ls(sl=True))\n    selection.count()\n    for x in selection.generator(): print x\n    selection.last()\n    selection.first()\n    selection.at(3)\n    selection.distinct()\n    selection.skip(3)\n    selection.take(3)\n    selection.all(lambda x: x.startswith('mesh_'))\n    selection.any(lambda x: x.startswith('skel_'))\n    selection.contains(\"grp_\")\n    selection.union([\"group1\", \"group2\"])\n    selection.reverse()\n    selection.select(lambda x: cmds.getAttr(x + '.tx'))\n    selection.where(lambda x: x.endswith('_offset'))\n    \"\"\"\n\n    def __init__(self, list=None):\n        self.set_list(list)\n\n    def set_list(self, list):\n        self.__list = list\n\n    def is_empty(self):\n        return self.__list is None or len(self.__list) == 0\n\n    def print_items(self):\n        for x in self.generator():\n            print x\n\n    def count(self):\n        if self.is_empty():\n            return 0\n        return len(self.__list)\n\n    def generator(self):\n        for x in self.__list:\n            yield x\n\n    def first(self, default=None):\n        if self.is_empty():\n            return default\n        return self.__list[0]\n\n    def last(self, default=None):\n        if self.is_empty():\n            return default\n        return self.__list[-1]\n\n    def at(self, index, default=None):\n        if index <= self.count():\n            return self.__list[index]\n        return default\n\n    def distinct(self):\n        return list(set(self.__list))\n\n    def skip(self, count):\n        if count < self.count():\n            return self.__list[count:]\n\n    def take(self, count):\n        if count <= self.count():\n            return self.__list[:count]\n\n    def all(self, func):\n        for x in self.generator():\n            if not func(x):\n                return False\n        return True\n\n    def any(self, func):\n        for x in self.generator():\n            if func(x):\n                return True\n        return False\n\n    def contains(self, obj):\n        for x in self.generator():\n            if x == obj:\n                return True\n        return False\n\n    def union(self, list):\n        return self.__list + list\n\n    def reverse(self):\n        return list(reversed(self.__list))\n\n    def select(self, func):\n        return [func(x) for x in self.__list]\n\n    def where(self, func):\n        return [x for x in self.__list if func(x)]\n\n\n\n\u307e\u3041\u3068\u308a\u3042\u3048\u305a\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u306d\u3002\n\u5024\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306f\u3067\u304d\u307e\u305b\u3093\u3057\u3001\u9045\u5ef6\u8a55\u4fa1\u3068\u3044\u3046\u8981\u7d20\u3082\u307e\u3063\u305f\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u30e1\u30bd\u30c3\u30c9\u540d\u3068Python\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u5185\u5bb9\u304c\u3056\u3063\u304f\u308a\u8133\u5185\u5909\u63db\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u8a66\u4f5c\u7b2c\uff12\u5f3e\n\n\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u304c\u6b32\u3057\u3044\u3067\u3059\u306d\u3002\u9045\u5ef6\u5b9f\u884c\u3082\u3067\u304d\u308c\u3070\u6b32\u3057\u3044\u3002\nLINQ\u306e\u5b9f\u88c5\u65b9\u6cd5\u3092\u8aad\u3093\u3067\u307f\u3066\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3048\u3070\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u304c\u4f5c\u308c\u308b\u304b\u3082\u3068\u601d\u3063\u3066\u8a66\u3057\u305f\u306e\u304c\u7b2c\uff12\u5f3e\u3067\u3059\u3002\n\niterator_v2.py\nclass EnumerableIterator(object):\n    \"\"\"LINQ\u306e\u3088\u3046\u306b\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3068\u9045\u5ef6\u5b9f\u884c\u7684\u306a\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u305f\u30ea\u30b9\u30c8\u64cd\u4f5c\u30af\u30e9\u30b9\n\n        [usage]\n        hoge = EnumerableIterator(range(10))\n        for x in hoge.where(lambda x: x > 7).select(lambda x: x * x): print x\n    \"\"\"\n\n    def __init__(self, list=None, func=None):\n        self._set_list(list)\n        self.func = func\n\n    def _set_list(self, list):\n        self.__list = list\n\n    def __execute_func(self):\n        if self.func is None:\n            return self.__list\n        return self.func(self.__list)\n\n    def __iter__(self):\n        for x in self.__execute_func():\n            yield x\n\n    def to_list(self):\n        return self.__execute_func()\n\n    def count(self):\n        return len(self.__execute_func())\n\n    def __is_empty(self, list):\n        return list is None or len(list) == 0\n\n    def first(self, default=None):\n        result = self.__execute_func()\n        if self.__is_empty(result):\n            return default\n        return result[0]\n\n    def last(self, default=None):\n        result = self.__execute_func()\n        if self.__is_empty(result):\n            return default\n        return result[-1]\n\n    def at(self, index, default=None):\n        result = self.__execute_func()\n        if self.__is_empty(result):\n            return default\n        if index <= len(result):\n            return list[index]\n        return default\n\n    def distinct(self):\n        return list(set(self.__execute_func()))\n\n    def skip(self, count):\n        result = self.__execute_func()\n        return result[count:]\n\n    def take(self, count):\n        result = self.__execute_func()\n        return result[:count]\n\n    def all(self, func):\n        for x in self:\n            if not func(x):\n                return False\n        return True\n\n    def any(self, func):\n        for x in self:\n            if func(x):\n                return True\n        return False\n\n    def contains(self, obj):\n        for x in self:\n            if x == obj:\n                return True\n        return False\n\n    def union(self, list):\n        return self.__execute_func() + list\n\n    def reverse(self):\n        return list(reversed(self.__execute_func()))\n\n    def where(self, func):\n        def action(list):\n            result = list\n            if self.func is not None:\n                result = self.func(list)\n            return [x for x in result if func(x)]\n        return EnumerableIterator(self.__list, action)\n\n    def select(self, func):\n        def action(list):\n            result = list\n            if self.func is not None:\n                result = self.func(list)\n            return [func(x) for x in result]\n        return EnumerableIterator(self.__list, action)\n\n\n\n\u66f8\u3044\u3066\u3044\u3066\u7d50\u69cb\u6df7\u4e71\u3057\u307e\u3057\u305f\u306d\u30fb\u30fb\u30fb\u3002select\u3068where\u4ee5\u5916\u306f\u5024\u304b\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u304c\u3001\n\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3082\u306e\u306fEnumerableIterator\u3092\u8fd4\u3059\u5b9f\u88c5\u306b\u3059\u308b\u306e\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3063\u305f\u52d5\u7684\u30e1\u30bd\u30c3\u30c9\u3092\u84c4\u7a4d\u3057\u3001\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nLINQ\u306e\u9045\u5ef6\u8a55\u4fa1\u3068\u540c\u3058\u306b\u306a\u3063\u305f\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u304c\u3001\u30af\u30a8\u30ea\u69cb\u7bc9\u3068\u5b9f\u884c\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u5206\u96e2\u3067\u304d\u305f\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u8a66\u4f5c\u7b2c\uff12\u5f3e\u3092\u4f7f\u3046\n\n\u3053\u306e\u307e\u307e\u3067\u306fMaya\u95a2\u4fc2\u306a\u3044\u5185\u5bb9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067Maya\u3067\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\niterator_v2.py\nclass EnumerableSelection(EnumerableIterator):\n    \"\"\"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9078\u629e\u30a4\u30c6\u30ec\u30fc\u30bf\n\n    [usage]\n    selection = Selection()\n\n    for x in selection.where(lambda x: x.endswith('_offset')).select(lambda x: cmds.getAttr(x + '.tx')):\n        print x\n\n    print selection \\\n        .where(lambda  x: x.endswith('Group')) \\\n        .select(lambda x: cmds.getAttr(x + '.tx')) \\\n        .where(lambda  x: x > 0.1) \\\n        .first()\n    \"\"\"\n\n    def __init__(self, flat=True):\n        super(EnumerableSelection, self).__init__()\n        self.__flat = flat\n        self.update()\n\n    def update(self):\n        self._set_list(cmds.ls(sl=True, fl=self.__flat))\n\n\n\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3059\u308b\u3068\u3044\u3046\u306f\u3088\u304f\u4f7f\u3046\u306e\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u304b\u306d\u3002\n\u6b8b\u5ff5\u306a\u306e\u306f\u9014\u4e2d\u6539\u884c\u306b\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u304c\u5fc5\u8981\u306a\u70b9\u3067\u3059\u306d\u30fb\u30fb\u30fb\u305d\u3057\u3066lambda\u30fb\u30fb\u30fb\n\n\u611f\u60f3\n\nitertools\u3084more-itertools\u3068\u3044\u3046\u624b\u3082\u3042\u308b\u3093\u3067\u3059\u304c\u3001\u66f8\u304d\u65b9\u306f\u3084\u3063\u3071\u308aLINQ\u306e\u65b9\u304c\u597d\u307f\u3067\u3059\u306d\u3002\n\u3082\u3063\u3068\u8a00\u8a9e\u4ed5\u69d8\u3092\u7406\u89e3\u3057\u3066\u4f7f\u3044\u3053\u306a\u305b\u308c\u3070\u3001Pythonic\u306a\u66f8\u304d\u65b9\u304c\u3067\u304d\u308b\u3093\u3060\u308d\u3046\u306a\u3068\u611f\u3058\u307e\u3059\u3002\n\u591a\u65b9\u9762\u304b\u3089\u306e\u30c4\u30c3\u30b3\u30df\u3084\u30a2\u30c9\u30d0\u30a4\u30b9\u3082\u5f85\u3061\u3064\u3064\u3001\u8ffd\u52a0\u306e\u304a\u52c9\u5f37\u3092\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\n\nLINQ\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u4e00\u89a7\u3068\u3001\u307b\u307c\u5168\u90e8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002 - \u5730\u5e73\u7dda\u306b\u884c\u304f\nLINQ\u306e\u4ed5\u7d44\u307f\uff06\u9045\u5ef6\u8a55\u4fa1\u306e\u6b63\u3057\u3044\u57fa\u790e\u77e5\u8b58 \uff0d \uff20IT\nMasala Github\nitertools\u3001more-itertools\u306e\u7d39\u4ecb\n\n#**\u6982\u8981**\nC#\u306b\u3042\u308bLINQ\u306e\u8003\u3048\u65b9\u3092MayaPython\u3067\u3082\u5f79\u7acb\u3066\u3089\u308c\u306a\u3044\u304b\uff1f\n\u3068\u3044\u3046\u306e\u3092\u63a2\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n##\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n- \u3082\u3063\u3068\u697d\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u30ea\u30b9\u30c8\u64cd\u4f5c\u3092\u3057\u305f\u3044\u3002\n- C#\u3068\u4f3c\u305f\u3088\u3046\u306a\u66f8\u304d\u65b9\u304c\u51fa\u6765\u308c\u3070\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u30b3\u30b9\u30c8\u304c\u4e0b\u304c\u308b\u306f\u305a\u3002\n\n##LINQ\u3068\u306f\nLINQ\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306f\u4ed6\u30b5\u30a4\u30c8\u306b\u304a\u4efb\u305b\u3059\u308b\u3068\u3057\u3066\u3001\uff08\u53c2\u8003\u30b5\u30a4\u30c8\u3092\u30da\u30fc\u30b8\u6700\u4e0b\u90e8\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\uff09\n\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\u300c*\u30ea\u30b9\u30c8\u306a\u3069\u306b\u5bfe\u3057\u3066SQL\u6587\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u3067\u5024\u3092\u30d5\u30a3\u30eb\u30bf\u3057\u305f\u308a\u52a0\u5de5\u3057\u305f\u308a\u3059\u308b\u6a5f\u80fd*\u300d\u3067\u3059\u3002\n\u5b9f\u969b\u306bLINQ\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp:LinqSample.cs\nvar hoge = new int[] { 0, 1, 2, 3, 4, 5 };\nvar hogehoge = hoge.where(n => n > 3).select(n => n * n);\nforeach (var x in hogehoge)\n    Debug.WriteLine(x);\n\n>>> 16\n>>> 25\n```\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3092Python\u306e**\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18**\u3067\u66f8\u304f\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```python:list_comprehension_sample.py\nhoge = [0, 1, 2, 3, 4, 5]\nhogehoge = [x * x for x in hoge if x > 3]\nfor x in hogehoge:\n    print x\n\n>>> 16\n>>> 25\n```\n\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u304c\u3042\u308c\u3070\u3044\u3044\u304b\u306a\uff5e\u3068\u601d\u3044\u307e\u3059\u306d\u3002\uff08\u6d41\u77f3Python\uff09\n\u3055\u3089\u306bPython\u3067\u306f\u30b9\u30e9\u30a4\u30b9\u304c\u4f7f\u3048\u308b\u306e\u3067\u30ea\u30b9\u30c8\u64cd\u4f5c\u3067\u56f0\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u3067\u3059\u3002\n\nLINQ\u306e\u7279\u5fb4\u3068\u3057\u3066\u306f**\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3**\u3084**\u9045\u5ef6\u8a55\u4fa1**\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u304c\u3001\n\u5358\u7d14\u306b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u3057\u3064\u3064\u3001\u308f\u304b\u308a\u3084\u3059\u304f\u66f8\u304d\u3084\u3059\u3044\u3068\u3044\u3046\u306e\u304c\u5927\u304d\u306a\u30e1\u30ea\u30c3\u30c8\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nPython\u306e\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3084\u30b9\u30e9\u30a4\u30b9\u3067\u8907\u96d1\u306a\u64cd\u4f5c\u3092\u66f8\u304f\u3068\u8457\u3057\u304f\u53ef\u8aad\u6027\u304c\u843d\u3061\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3092\u8e0f\u307e\u3048\u3064\u3064\u3001LINQ\u306e\u826f\u3044\u90e8\u5206\u3092\u306a\u3093\u3068\u304b\u518d\u73fe\u3067\u304d\u306a\u3044\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n#**\u8a66\u4f5c\u7b2c\uff11\u5f3e**\n\u307e\u305a\u306f\u96f0\u56f2\u6c17\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3060\u3051\u305d\u308c\u3063\u307d\u304f\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nLINQ\u3068\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3001\u5358\u4f53\u52b9\u679c\u3060\u3051\u8fd1\u3065\u3051\u3066\u307f\u305f\u306e\u304c\u8a66\u4f5c\u7b2c\uff11\u5f3e\u3067\u3059\u3002\n\n```python:iterator_v1.py\nclass GeneralIterator(object):\n    \"\"\"LINQ\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u4f7f\u3063\u3066\u30ea\u30b9\u30c8\u64cd\u4f5c\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30af\u30e9\u30b9\n\n    <usage>\n    selection = GeneralIterator(cmds.ls(sl=True))\n    selection.count()\n    for x in selection.generator(): print x\n    selection.last()\n    selection.first()\n    selection.at(3)\n    selection.distinct()\n    selection.skip(3)\n    selection.take(3)\n    selection.all(lambda x: x.startswith('mesh_'))\n    selection.any(lambda x: x.startswith('skel_'))\n    selection.contains(\"grp_\")\n    selection.union([\"group1\", \"group2\"])\n    selection.reverse()\n    selection.select(lambda x: cmds.getAttr(x + '.tx'))\n    selection.where(lambda x: x.endswith('_offset'))\n    \"\"\"\n\n    def __init__(self, list=None):\n        self.set_list(list)\n\n    def set_list(self, list):\n        self.__list = list\n\n    def is_empty(self):\n        return self.__list is None or len(self.__list) == 0\n\n    def print_items(self):\n        for x in self.generator():\n            print x\n\n    def count(self):\n        if self.is_empty():\n            return 0\n        return len(self.__list)\n\n    def generator(self):\n        for x in self.__list:\n            yield x\n    \n    def first(self, default=None):\n        if self.is_empty():\n            return default\n        return self.__list[0]\n\n    def last(self, default=None):\n        if self.is_empty():\n            return default\n        return self.__list[-1]\n\n    def at(self, index, default=None):\n        if index <= self.count():\n            return self.__list[index]\n        return default\n\n    def distinct(self):\n        return list(set(self.__list))\n\n    def skip(self, count):\n        if count < self.count():\n            return self.__list[count:]\n        \n    def take(self, count):\n        if count <= self.count():\n            return self.__list[:count]\n\n    def all(self, func):\n        for x in self.generator():\n            if not func(x):\n                return False\n        return True\n\n    def any(self, func):\n        for x in self.generator():\n            if func(x):\n                return True\n        return False\n\n    def contains(self, obj):\n        for x in self.generator():\n            if x == obj:\n                return True\n        return False\n\n    def union(self, list):\n        return self.__list + list\n\n    def reverse(self):\n        return list(reversed(self.__list))\n\n    def select(self, func):\n        return [func(x) for x in self.__list]\n\n    def where(self, func):\n        return [x for x in self.__list if func(x)]\n\n```\n*\u307e\u3041\u3068\u308a\u3042\u3048\u305a\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u306d\u3002\n\u5024\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306f\u3067\u304d\u307e\u305b\u3093\u3057\u3001\u9045\u5ef6\u8a55\u4fa1\u3068\u3044\u3046\u8981\u7d20\u3082\u307e\u3063\u305f\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u30e1\u30bd\u30c3\u30c9\u540d\u3068Python\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u5185\u5bb9\u304c\u3056\u3063\u304f\u308a\u8133\u5185\u5909\u63db\u3067\u304d\u307e\u3057\u305f\u3002*\n\n#**\u8a66\u4f5c\u7b2c\uff12\u5f3e**\n\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u304c\u6b32\u3057\u3044\u3067\u3059\u306d\u3002\u9045\u5ef6\u5b9f\u884c\u3082\u3067\u304d\u308c\u3070\u6b32\u3057\u3044\u3002\nLINQ\u306e\u5b9f\u88c5\u65b9\u6cd5\u3092\u8aad\u3093\u3067\u307f\u3066\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3048\u3070\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u304c\u4f5c\u308c\u308b\u304b\u3082\u3068\u601d\u3063\u3066\u8a66\u3057\u305f\u306e\u304c\u7b2c\uff12\u5f3e\u3067\u3059\u3002\n\n```python:iterator_v2.py\nclass EnumerableIterator(object):\n    \"\"\"LINQ\u306e\u3088\u3046\u306b\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3068\u9045\u5ef6\u5b9f\u884c\u7684\u306a\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u305f\u30ea\u30b9\u30c8\u64cd\u4f5c\u30af\u30e9\u30b9\n    \n        [usage]\n        hoge = EnumerableIterator(range(10))\n        for x in hoge.where(lambda x: x > 7).select(lambda x: x * x): print x\n    \"\"\"\n\n    def __init__(self, list=None, func=None):\n        self._set_list(list)\n        self.func = func\n\n    def _set_list(self, list):\n        self.__list = list\n\n    def __execute_func(self):\n        if self.func is None:\n            return self.__list\n        return self.func(self.__list)\n        \n    def __iter__(self):\n        for x in self.__execute_func():\n            yield x\n\n    def to_list(self):\n        return self.__execute_func()\n\n    def count(self):\n        return len(self.__execute_func())\n\n    def __is_empty(self, list):\n        return list is None or len(list) == 0\n\n    def first(self, default=None):\n        result = self.__execute_func()\n        if self.__is_empty(result):\n            return default\n        return result[0]\n\n    def last(self, default=None):\n        result = self.__execute_func()\n        if self.__is_empty(result):\n            return default\n        return result[-1]\n\n    def at(self, index, default=None):\n        result = self.__execute_func()\n        if self.__is_empty(result):\n            return default\n        if index <= len(result):\n            return list[index]\n        return default\n\n    def distinct(self):\n        return list(set(self.__execute_func()))\n\n    def skip(self, count):\n        result = self.__execute_func()\n        return result[count:]\n        \n    def take(self, count):\n        result = self.__execute_func()\n        return result[:count]\n\n    def all(self, func):\n        for x in self:\n            if not func(x):\n                return False\n        return True\n\n    def any(self, func):\n        for x in self:\n            if func(x):\n                return True\n        return False\n\n    def contains(self, obj):\n        for x in self:\n            if x == obj:\n                return True\n        return False\n\n    def union(self, list):\n        return self.__execute_func() + list\n\n    def reverse(self):\n        return list(reversed(self.__execute_func()))\n\n    def where(self, func):\n        def action(list):\n            result = list\n            if self.func is not None:\n                result = self.func(list)\n            return [x for x in result if func(x)]\n        return EnumerableIterator(self.__list, action)\n\n    def select(self, func):\n        def action(list):\n            result = list\n            if self.func is not None:\n                result = self.func(list)\n            return [func(x) for x in result]\n        return EnumerableIterator(self.__list, action)\n\n```\n*\u66f8\u3044\u3066\u3044\u3066\u7d50\u69cb\u6df7\u4e71\u3057\u307e\u3057\u305f\u306d\u30fb\u30fb\u30fb\u3002select\u3068where\u4ee5\u5916\u306f\u5024\u304b\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u304c\u3001\n\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3082\u306e\u306fEnumerableIterator\u3092\u8fd4\u3059\u5b9f\u88c5\u306b\u3059\u308b\u306e\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3063\u305f\u52d5\u7684\u30e1\u30bd\u30c3\u30c9\u3092\u84c4\u7a4d\u3057\u3001\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nLINQ\u306e\u9045\u5ef6\u8a55\u4fa1\u3068\u540c\u3058\u306b\u306a\u3063\u305f\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u304c\u3001\u30af\u30a8\u30ea\u69cb\u7bc9\u3068\u5b9f\u884c\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u5206\u96e2\u3067\u304d\u305f\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002*\n\n#**\u8a66\u4f5c\u7b2c\uff12\u5f3e\u3092\u4f7f\u3046**\n\u3053\u306e\u307e\u307e\u3067\u306fMaya\u95a2\u4fc2\u306a\u3044\u5185\u5bb9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067Maya\u3067\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n```python:iterator_v2.py\nclass EnumerableSelection(EnumerableIterator):\n    \"\"\"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9078\u629e\u30a4\u30c6\u30ec\u30fc\u30bf\n\n    [usage]\n    selection = Selection()\n\n    for x in selection.where(lambda x: x.endswith('_offset')).select(lambda x: cmds.getAttr(x + '.tx')):\n        print x\n\n    print selection \\\n        .where(lambda  x: x.endswith('Group')) \\\n        .select(lambda x: cmds.getAttr(x + '.tx')) \\\n        .where(lambda  x: x > 0.1) \\\n        .first()\n    \"\"\"\n\n    def __init__(self, flat=True):\n        super(EnumerableSelection, self).__init__()\n        self.__flat = flat\n        self.update()\n\n    def update(self):\n        self._set_list(cmds.ls(sl=True, fl=self.__flat))\n```\n*\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3059\u308b\u3068\u3044\u3046\u306f\u3088\u304f\u4f7f\u3046\u306e\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u304b\u306d\u3002\n\u6b8b\u5ff5\u306a\u306e\u306f\u9014\u4e2d\u6539\u884c\u306b\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u304c\u5fc5\u8981\u306a\u70b9\u3067\u3059\u306d\u30fb\u30fb\u30fb\u305d\u3057\u3066lambda\u30fb\u30fb\u30fb*\n\n#**\u611f\u60f3**\nitertools\u3084more-itertools\u3068\u3044\u3046\u624b\u3082\u3042\u308b\u3093\u3067\u3059\u304c\u3001\u66f8\u304d\u65b9\u306f\u3084\u3063\u3071\u308aLINQ\u306e\u65b9\u304c\u597d\u307f\u3067\u3059\u306d\u3002\n\u3082\u3063\u3068\u8a00\u8a9e\u4ed5\u69d8\u3092\u7406\u89e3\u3057\u3066\u4f7f\u3044\u3053\u306a\u305b\u308c\u3070\u3001Pythonic\u306a\u66f8\u304d\u65b9\u304c\u3067\u304d\u308b\u3093\u3060\u308d\u3046\u306a\u3068\u611f\u3058\u307e\u3059\u3002\n\u591a\u65b9\u9762\u304b\u3089\u306e\u30c4\u30c3\u30b3\u30df\u3084\u30a2\u30c9\u30d0\u30a4\u30b9\u3082\u5f85\u3061\u3064\u3064\u3001\u8ffd\u52a0\u306e\u304a\u52c9\u5f37\u3092\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#**\u53c2\u8003\u30b5\u30a4\u30c8**\n- [LINQ\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u4e00\u89a7\u3068\u3001\u307b\u307c\u5168\u90e8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002 - \u5730\u5e73\u7dda\u306b\u884c\u304f](http://d.hatena.ne.jp/chiheisen/20111031/1320068429)\n- [LINQ\u306e\u4ed5\u7d44\u307f\uff06\u9045\u5ef6\u8a55\u4fa1\u306e\u6b63\u3057\u3044\u57fa\u790e\u77e5\u8b58 \uff0d \uff20IT](http://www.atmarkit.co.jp/fdotnet/chushin/greatblogentry_06/greatblogentry_06_01.html)\n- [Masala Github](https://github.com/hachibeeDI/masala)\n- [itertools\u3001more-itertools\u306e\u7d39\u4ecb](http://qiita.com/Tsutomu-KKE@github/items/ddb5076ef62745f03b56)\n", "tags": ["maya", "Python"]}