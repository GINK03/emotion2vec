{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u524d\u56deSpring Cloud Stream\u3067kafka\u306b\u63a5\u7d9a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u8a66\u3057\u305f\u304c\u3001\u4eca\u56de\u306fkafka\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8907\u6570\u306eoutput\u306b\u632f\u308a\u5206\u3051\u308bmulti output\u3092\u8a66\u3057\u3066\u307f\u308b\u3002\n\n\u74b0\u5883\n\u524d\u56de\u3068\u540c\u3058\n\n\u624b\u9806\n\u524d\u56de\u4f5c\u3063\u305f1\u79d2\u304a\u304d\u306b\u6642\u9593\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u9001\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u5143\u306b\u3001\u6642\u9593\u306e\u79d2\u304c\u5076\u6570\u304b\u5947\u6570\u304b\u3092\u5224\u65ad\u3057\u3066\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5076\u6570\u7528\u306etopic\u3068\u5947\u6570\u7528\u306etopic\u306b\u632f\u308a\u5206\u3051\u308b\u51e6\u7406\u3092\u4f5c\u6210\u3059\u308b\u3002\n\nkafka\u63a5\u7d9a\u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\u524d\u56de\n\u203b\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3082\u4e0a\u8a18\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u6d41\u7528\u3057\u307e\u3059\u3002\n\nkafka\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u3051\u53d6\u308a\u7528\u306e\u8a2d\u5b9a\u3092\u884c\u3046\n\napplication.yml\u306b\u51fa\u529b\u5148\u306etopic\u3092\u8ffd\u52a0\n\u5076\u6570\u7528\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u5947\u6570\u7528\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u304d\u8fbc\u3080topic\u3092\u6307\u5b9a\nspring:\n  cloud:\n    stream:\n      bindings:\n        output: spring.cloud.stream.test.topic\n        input: spring.cloud.stream.test.topic\n        even: spring.cloud.stream.test.even.topic # \u5076\u6570\n        odd: spring.cloud.stream.test.odd.topic # \u5947\u6570\n\n\n\u5076\u6570\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30c1\u30e3\u30cd\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210\n\nEvenOutput.java\npackage com.example;\n\nimport org.springframework.cloud.stream.annotation.Output;\nimport org.springframework.messaging.MessageChannel;\n\npublic interface EvenOutput {\n  String OUTPUT = \"spring.cloud.stream.test.even.topic\";\n\n  @Output(\"spring.cloud.stream.test.even.topic\")\n  MessageChannel output();\n}\n\n\n\n\u5947\u6570\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30c1\u30e3\u30cd\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210\n\nOddOutput.java\npackage com.example;\n\nimport org.springframework.cloud.stream.annotation.Output;\nimport org.springframework.messaging.MessageChannel;\n\npublic interface OddOutput {\n  String OUTPUT = \"spring.cloud.stream.test.odd.topic\";\n\n  @Output(\"spring.cloud.stream.test.odd.topic\")\n  MessageChannel output();\n}\n\n\n\n\u524d\u56de\u4f5c\u3063\u305fSampleSink\u3092\u6539\u9020\u3059\u308b\n\u524d\u56de\u4f5c\u3063\u305f\u3001SampleSink\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u632f\u308a\u5206\u3051\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3059\u308b\n\u524d\u56de\u306e\u72b6\u614b\n\nSampleSink.java\npackage com.example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.integration.annotation.ServiceActivator;\n\n@EnableBinding(Sink.class)\npublic class SampleSink {\n\n  private static Logger logger = LoggerFactory.getLogger(SampleSink.class);\n\n  @ServiceActivator(inputChannel = Sink.INPUT)\n  public void sink(Object payload) {\n    logger.info(\"Received: \" + payload);\n  }\n}\n\n\n\u5909\u66f4\u5f8c\n\n\n@EnableBidding\u306b{}(\u914d\u5217\u5f62\u5f0f)\u3067Sink.class\u306e\u4ed6\u306b\u3001\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fEvenOutput.class\u3068OddOutput.class\u3092\u6307\u5b9a\n\n@Autowired\u3067\u3001EvenOutput\u3068OddOutput\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u6307\u5b9a\nLocalDateTime\u306e\u79d2\u3092\u53d6\u5f97\u3057\u3066\u3001\u5076\u6570\u3060\u3063\u305f\u3089evenOutput.output().send(...)\u3001\u5947\u6570\u3060\u3063\u305f\u3089oddOutput.output().send(...)\u306e\u3088\u3046\u306b\u6761\u4ef6\u306b\u3088\u3063\u3066\u66f8\u304d\u8fbc\u3080topic\u3092\u5909\u66f4\u3059\u308b\n\n\npackage com.example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.integration.annotation.ServiceActivator;\nimport org.springframework.messaging.support.GenericMessage;\n\nimport java.time.LocalDateTime;\n\n@EnableBinding({Sink.class, EvenOutput.class, OddOutput.class})\npublic class SampleSink {\n\n  private static Logger logger = LoggerFactory.getLogger(SampleSink.class);\n\n  @Autowired\n  private EvenOutput evenOutput;\n\n  @Autowired\n  private OddOutput oddOutput;\n\n  @ServiceActivator(inputChannel = Sink.INPUT)\n  public void sink(Object payload) {\n    logger.info(\"Received: \" + payload);\n    LocalDateTime now = (LocalDateTime) payload;\n    if (now.getSecond() % 2 == 0) {\n      logger.info(\"output even: \" + payload);\n      evenOutput.output().send(new GenericMessage<Object>(now));\n    } else {\n      logger.info(\"output odd : \" + payload);\n      oddOutput.output().send(new GenericMessage<Object>(now));\n    }\n  }\n}\n\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b\n\n\u524d\u56de\u540c\u69d8\u4ee5\u4e0b\u3092\u4e8b\u524d\u306b\u5b9f\u65bd\n\nzookeeper\u3092\u7acb\u3061\u4e0a\u3052\u308b\nkafka\u3092\u7acb\u3061\u4e0a\u3052\u308b\n\n\nSpringBootApplication\u306e\u8d77\u52d5\nApplication\u3092\u8d77\u52d5\u3059\u308b\u3068\u3001\u5076\u6570\u3001\u5947\u6570\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\n...\n(\u7701\u7565)\n...\ncom.example.SpringCloudStreamKafkaDemoApplication --spring.output.ansi.enabled=always\n2015-12-06 10:54:49.168  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : Starting SpringCloudStreamKafkaDemoApplication on MBP-15UAC-184.local with PID 53162 (/Users/tgoto/Develop/git/spring-cloud-stream-kafka-demo/build/classes/main started by tgoto in /Users/tgoto/Develop/git/spring-cloud-stream-kafka-demo)\n2015-12-06 10:54:49.172  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : No profiles are active\n2015-12-06 10:54:49.233  INFO 53162 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@647fd8ce: startup date [Sun Dec 06 10:54:49 JST 2015]; root of context hierarchy\n2015-12-06 10:54:49.738  INFO 53162 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'configurationPropertiesRebinderAutoConfiguration' of type [class org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$2d142414] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n2015-12-06 10:54:49.916  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : Started SpringCloudStreamKafkaDemoApplication in 1.065 seconds (JVM running for 1.76)\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v1.3.0.RELEASE)\n\n2015-12-06 10:54:50.075  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : No profiles are active\n2015-12-06 10:54:50.090  INFO 53162 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7922d892: startup date [Sun Dec 06 10:54:50 JST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@647fd8ce\n2015-12-06 10:54:51.035  INFO 53162 --- [           main] o.s.b.f.config.PropertiesFactoryBean     : Loading properties file from URL [jar:file:/Users/tgoto/.gradle/caches/modules-2/files-2.1/org.springframework.integration/spring-integration-core/4.2.1.RELEASE/bb42e637833fd9c17df6092790d6209872e0bd65/spring-integration-core-4.2.1.RELEASE.jar!/META-INF/spring.integration.default.properties]\n2015-12-06 10:54:51.039  INFO 53162 --- [           main] o.s.i.config.IntegrationRegistrar        : No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. \n...\n(\u7701\u7565)\n...\n2015-12-06 10:55:30.551  INFO 53162 --- [           main] s.i.k.i.KafkaMessageDrivenChannelAdapter : started org.springframework.integration.kafka.inbound.KafkaMessageDrivenChannelAdapter@6d5f4900\n2015-12-06 10:55:30.553  INFO 53162 --- [           main] o.s.c.s.b.k.KafkaMessageChannelBinder$4  : Adding {message-handler:inbound.spring.cloud.stream.test.topic} as a subscriber to the 'bridge.spring.cloud.stream.test.topic' channel\n2015-12-06 10:55:30.553  INFO 53162 --- [           main] o.s.c.s.b.k.KafkaMessageChannelBinder$4  : started inbound.spring.cloud.stream.test.topic\n2015-12-06 10:55:30.555  INFO 53162 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0\n2015-12-06 10:55:30.556  INFO 53162 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 2147482647\n2015-12-06 10:55:30.626  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : Received: 2015-12-05T12:10:43.528\n2015-12-06 10:55:30.626  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : output odd : 2015-12-05T12:10:43.528\n2015-12-06 10:55:30.629  INFO 53162 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)\n2015-12-06 10:55:30.632  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : Started SpringCloudStreamKafkaDemoApplication in 41.911 seconds (JVM running for 42.478)\n2015-12-06 10:55:30.753  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : Received: 2015-12-05T12:10:44.617\n2015-12-06 10:55:30.753  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : output even: 2015-12-05T12:10:44.617\n2015-12-06 10:55:30.858  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : Received: 2015-12-05T12:10:45.622\n2015-12-06 10:55:30.859  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : output odd : 2015-12-05T12:10:45.622\n2015-12-06 10:55:30.860  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : Received: 2015-12-05T12:10:46.623\n2015-12-06 10:55:30.860  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : output even: 2015-12-05T12:10:46.623\n\n\ntopic\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n~ \u276f\u276f\u276f /usr/local/bin/kafka-topics.sh  --list --zookeeper localhost:2181\nspring.cloud.stream.test.even.topic\nspring.cloud.stream.test.odd.topic\nspring.cloud.stream.test.topic\n\n\ntopic\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\nLocalDateTime\u306e\u5024\u307e\u3067\u306f\u898b\u3048\u306a\u3044\u304c\u4f55\u304b\u3057\u3089\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u306f\u3044\u308b\u3002\n~ \u276f\u276f\u276f /usr/local/bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic spring.cloud.stream.test.even.topic\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n????,\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n???.\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n????0\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n????2\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n# \u306f\u3058\u3081\u306b\n\u524d\u56de[Spring Cloud Stream\u3067kafka\u306b\u63a5\u7d9a](http://qiita.com/gosshys/items/42c8037da942bfb3d8bc)\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u8a66\u3057\u305f\u304c\u3001\u4eca\u56de\u306fkafka\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8907\u6570\u306eoutput\u306b\u632f\u308a\u5206\u3051\u308bmulti output\u3092\u8a66\u3057\u3066\u307f\u308b\u3002\n\n# \u74b0\u5883\n[\u524d\u56de](http://qiita.com/gosshys/items/42c8037da942bfb3d8bc#%E7%92%B0%E5%A2%83)\u3068\u540c\u3058\n\n# \u624b\u9806\n\u524d\u56de\u4f5c\u3063\u305f1\u79d2\u304a\u304d\u306b\u6642\u9593\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u9001\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u5143\u306b\u3001\u6642\u9593\u306e\u79d2\u304c\u5076\u6570\u304b\u5947\u6570\u304b\u3092\u5224\u65ad\u3057\u3066\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5076\u6570\u7528\u306etopic\u3068\u5947\u6570\u7528\u306etopic\u306b\u632f\u308a\u5206\u3051\u308b\u51e6\u7406\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n## kafka\u63a5\u7d9a\u7528\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\n[\u524d\u56de](http://qiita.com/gosshys/items/42c8037da942bfb3d8bc#%E6%89%8B%E9%A0%86)\n\u203b\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3082\u4e0a\u8a18\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u6d41\u7528\u3057\u307e\u3059\u3002\n\n## kafka\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u3051\u53d6\u308a\u7528\u306e\u8a2d\u5b9a\u3092\u884c\u3046\n### application.yml\u306b\u51fa\u529b\u5148\u306etopic\u3092\u8ffd\u52a0\n\u5076\u6570\u7528\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u5947\u6570\u7528\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u304d\u8fbc\u3080topic\u3092\u6307\u5b9a\n\n```\nspring:\n  cloud:\n    stream:\n      bindings:\n        output: spring.cloud.stream.test.topic\n        input: spring.cloud.stream.test.topic\n        even: spring.cloud.stream.test.even.topic # \u5076\u6570\n        odd: spring.cloud.stream.test.odd.topic # \u5947\u6570\n```\n\n### \u5076\u6570\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30c1\u30e3\u30cd\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210\n\n```java:EvenOutput.java\npackage com.example;\n\nimport org.springframework.cloud.stream.annotation.Output;\nimport org.springframework.messaging.MessageChannel;\n\npublic interface EvenOutput {\n  String OUTPUT = \"spring.cloud.stream.test.even.topic\";\n\n  @Output(\"spring.cloud.stream.test.even.topic\")\n  MessageChannel output();\n}\n```\n\n### \u5947\u6570\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30c1\u30e3\u30cd\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210\n\n```java:OddOutput.java\npackage com.example;\n\nimport org.springframework.cloud.stream.annotation.Output;\nimport org.springframework.messaging.MessageChannel;\n\npublic interface OddOutput {\n  String OUTPUT = \"spring.cloud.stream.test.odd.topic\";\n\n  @Output(\"spring.cloud.stream.test.odd.topic\")\n  MessageChannel output();\n}\n```\n\n### \u524d\u56de\u4f5c\u3063\u305f`SampleSink`\u3092\u6539\u9020\u3059\u308b\n[\u524d\u56de](http://qiita.com/gosshys/items/42c8037da942bfb3d8bc#kafka%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B)\u4f5c\u3063\u305f\u3001`SampleSink`\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u632f\u308a\u5206\u3051\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3059\u308b\n\n**\u524d\u56de\u306e\u72b6\u614b**\n\n```java:SampleSink.java\npackage com.example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.integration.annotation.ServiceActivator;\n\n@EnableBinding(Sink.class)\npublic class SampleSink {\n\n  private static Logger logger = LoggerFactory.getLogger(SampleSink.class);\n\n  @ServiceActivator(inputChannel = Sink.INPUT)\n  public void sink(Object payload) {\n    logger.info(\"Received: \" + payload);\n  }\n}\n```\n\n**\u5909\u66f4\u5f8c**\n\n- @EnableBidding\u306b`{}`(\u914d\u5217\u5f62\u5f0f)\u3067`Sink.class`\u306e\u4ed6\u306b\u3001\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f`EvenOutput.class`\u3068`OddOutput.class`\u3092\u6307\u5b9a\n- @Autowired\u3067\u3001`EvenOutput`\u3068`OddOutput`\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u6307\u5b9a\n- LocalDateTime\u306e\u79d2\u3092\u53d6\u5f97\u3057\u3066\u3001\u5076\u6570\u3060\u3063\u305f\u3089`evenOutput.output().send(...)`\u3001\u5947\u6570\u3060\u3063\u305f\u3089`oddOutput.output().send(...)\u306e\u3088\u3046\u306b\u6761\u4ef6\u306b\u3088\u3063\u3066\u66f8\u304d\u8fbc\u3080topic\u3092\u5909\u66f4\u3059\u308b`\n\n```\npackage com.example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.integration.annotation.ServiceActivator;\nimport org.springframework.messaging.support.GenericMessage;\n\nimport java.time.LocalDateTime;\n\n@EnableBinding({Sink.class, EvenOutput.class, OddOutput.class})\npublic class SampleSink {\n\n  private static Logger logger = LoggerFactory.getLogger(SampleSink.class);\n\n  @Autowired\n  private EvenOutput evenOutput;\n\n  @Autowired\n  private OddOutput oddOutput;\n\n  @ServiceActivator(inputChannel = Sink.INPUT)\n  public void sink(Object payload) {\n    logger.info(\"Received: \" + payload);\n    LocalDateTime now = (LocalDateTime) payload;\n    if (now.getSecond() % 2 == 0) {\n      logger.info(\"output even: \" + payload);\n      evenOutput.output().send(new GenericMessage<Object>(now));\n    } else {\n      logger.info(\"output odd : \" + payload);\n      oddOutput.output().send(new GenericMessage<Object>(now));\n    }\n  }\n}\n```\n\n### \u5b9f\u884c\u3057\u3066\u307f\u308b\n\n#### \u524d\u56de\u540c\u69d8\u4ee5\u4e0b\u3092\u4e8b\u524d\u306b\u5b9f\u65bd\n\n- zookeeper\u3092\u7acb\u3061\u4e0a\u3052\u308b\n- kafka\u3092\u7acb\u3061\u4e0a\u3052\u308b\n\n#### SpringBootApplication\u306e\u8d77\u52d5\n\nApplication\u3092\u8d77\u52d5\u3059\u308b\u3068\u3001\u5076\u6570\u3001\u5947\u6570\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\n\n```\n...\n(\u7701\u7565)\n...\ncom.example.SpringCloudStreamKafkaDemoApplication --spring.output.ansi.enabled=always\n2015-12-06 10:54:49.168  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : Starting SpringCloudStreamKafkaDemoApplication on MBP-15UAC-184.local with PID 53162 (/Users/tgoto/Develop/git/spring-cloud-stream-kafka-demo/build/classes/main started by tgoto in /Users/tgoto/Develop/git/spring-cloud-stream-kafka-demo)\n2015-12-06 10:54:49.172  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : No profiles are active\n2015-12-06 10:54:49.233  INFO 53162 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@647fd8ce: startup date [Sun Dec 06 10:54:49 JST 2015]; root of context hierarchy\n2015-12-06 10:54:49.738  INFO 53162 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'configurationPropertiesRebinderAutoConfiguration' of type [class org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$2d142414] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n2015-12-06 10:54:49.916  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : Started SpringCloudStreamKafkaDemoApplication in 1.065 seconds (JVM running for 1.76)\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v1.3.0.RELEASE)\n\n2015-12-06 10:54:50.075  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : No profiles are active\n2015-12-06 10:54:50.090  INFO 53162 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7922d892: startup date [Sun Dec 06 10:54:50 JST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@647fd8ce\n2015-12-06 10:54:51.035  INFO 53162 --- [           main] o.s.b.f.config.PropertiesFactoryBean     : Loading properties file from URL [jar:file:/Users/tgoto/.gradle/caches/modules-2/files-2.1/org.springframework.integration/spring-integration-core/4.2.1.RELEASE/bb42e637833fd9c17df6092790d6209872e0bd65/spring-integration-core-4.2.1.RELEASE.jar!/META-INF/spring.integration.default.properties]\n2015-12-06 10:54:51.039  INFO 53162 --- [           main] o.s.i.config.IntegrationRegistrar        : No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. \n...\n(\u7701\u7565)\n...\n2015-12-06 10:55:30.551  INFO 53162 --- [           main] s.i.k.i.KafkaMessageDrivenChannelAdapter : started org.springframework.integration.kafka.inbound.KafkaMessageDrivenChannelAdapter@6d5f4900\n2015-12-06 10:55:30.553  INFO 53162 --- [           main] o.s.c.s.b.k.KafkaMessageChannelBinder$4  : Adding {message-handler:inbound.spring.cloud.stream.test.topic} as a subscriber to the 'bridge.spring.cloud.stream.test.topic' channel\n2015-12-06 10:55:30.553  INFO 53162 --- [           main] o.s.c.s.b.k.KafkaMessageChannelBinder$4  : started inbound.spring.cloud.stream.test.topic\n2015-12-06 10:55:30.555  INFO 53162 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0\n2015-12-06 10:55:30.556  INFO 53162 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 2147482647\n2015-12-06 10:55:30.626  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : Received: 2015-12-05T12:10:43.528\n2015-12-06 10:55:30.626  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : output odd : 2015-12-05T12:10:43.528\n2015-12-06 10:55:30.629  INFO 53162 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)\n2015-12-06 10:55:30.632  INFO 53162 --- [           main] .e.SpringCloudStreamKafkaDemoApplication : Started SpringCloudStreamKafkaDemoApplication in 41.911 seconds (JVM running for 42.478)\n2015-12-06 10:55:30.753  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : Received: 2015-12-05T12:10:44.617\n2015-12-06 10:55:30.753  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : output even: 2015-12-05T12:10:44.617\n2015-12-06 10:55:30.858  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : Received: 2015-12-05T12:10:45.622\n2015-12-06 10:55:30.859  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : output odd : 2015-12-05T12:10:45.622\n2015-12-06 10:55:30.860  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : Received: 2015-12-05T12:10:46.623\n2015-12-06 10:55:30.860  INFO 53162 --- [pool-4-thread-1] com.example.SampleSink                   : output even: 2015-12-05T12:10:46.623\n```\n\n#### topic\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n\n```\n~ \u276f\u276f\u276f /usr/local/bin/kafka-topics.sh  --list --zookeeper localhost:2181\nspring.cloud.stream.test.even.topic\nspring.cloud.stream.test.odd.topic\nspring.cloud.stream.test.topic\n```\n\n#### topic\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\n\n`LocalDateTime`\u306e\u5024\u307e\u3067\u306f\u898b\u3048\u306a\u3044\u304c\u4f55\u304b\u3057\u3089\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u306f\u3044\u308b\u3002\n\n```\n~ \u276f\u276f\u276f /usr/local/bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic spring.cloud.stream.test.even.topic\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n????,\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n???.\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n????0\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n\n????2\n?\n contentType8\"application/x-java-object;type=java.time.LocalDateTime\"\n                                                                     ?\n```\n", "tags": ["spring-boot", "Kafka"]}