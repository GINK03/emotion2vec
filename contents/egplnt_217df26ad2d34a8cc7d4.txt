{"context": "\u521d\u3081\u3066Watson IoT Platform\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3001\u3068\u3044\u3046\u304b\u305f\u306e\u305f\u3081\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002\nWatson IoT Platform\u3092\u4f7f\u3063\u3066\u307f\u308b\u3067IoT\u30a2\u30d7\u30ea\u3092\u6e96\u5099\u3057\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u30b5\u30f3\u30d7\u30eb\u306e\u30d3\u30fc\u30b3\u30f3\u304b\u3089\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u4f7f\u3063\u3066TensorFlow\u3067\u6a5f\u68b0\u5b66\u7fd2\u3057\u3001\u30d3\u30fc\u30b3\u30f3\u3067\u691c\u77e5\u3055\u308c\u305f\u52d5\u7dda\u306e\u9055\u3044\u304b\u3089\u30a2\u30de\u30c1\u30e5\u30a2/\u666e\u901a/\u30d7\u30ed\u306e\u5224\u5b9a\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\nBeacon\u304b\u3089\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u53ef\u8996\u5316\u3059\u308b\n\n\n\u30d3\u30fc\u30b3\u30f3\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u53ef\u8996\u5316\u3059\u308b\u3092\u53c2\u7167\u3057\u3001\u30d3\u30fc\u30b3\u30f3\u304b\u3089\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\u3002\nBeacon\u304b\u3089\u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u306e\u5dee\u5206\u3092\u7b97\u51fa\u3057\u307e\u3059\uff08\u4f8b\uff1a\u5730\u70b9\uff11\u2192\uff12\u306e\u79fb\u52d5\u6642\u9593\u3001\u5730\u70b9\uff12\u2192\uff13\u306e\u79fb\u52d5\u6642\u9593\u3001\u7b49\uff09\n\n\n\nTensorFlow\u3092\u6e96\u5099\u3059\u308b\n\n\nTensorFlow\u3092\u4f7f\u3063\u3066IoT\u30c7\u30fc\u30bf\u3092\u4eba\u5de5\u77e5\u80fd\u3057\u3066\u307f\u308b\u3092\u53c2\u7167\u3057\u3066TensorFlow\u3092\u7528\u610f\u3057\u307e\u3059\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u7528\u610f\u3057\u3001\u4f4d\u7f6e\u60c5\u5831\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\n\n\niot_results_loader.py\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\n\nclass IoTResults:\n\n    def __float__(data):\n        return 1.0\n\n    def __init__(self, data):\n        self.raw  = data.copy()\n        self.data = data\n\n    def predictor_data(self):\n        return self.data\n\n    def train_data(self):\n        return self.__drop_outcome(self.__train_data())\n\n    def test_data(self):\n        return self.__drop_outcome(self.__test_data())\n\n    def train_up_down(self):\n        return self.__good_bad(self.__train_data()[\"outcome\"])\n\n    def test_up_down(self):\n        return self.__good_bad(self.__test_data()[\"outcome\"])\n\n    def __train_data(self):\n        # \u5168\u30c7\u30fc\u30bf\u306e 2/3 \u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\n        return self.data.loc[lambda df: df.index % 3 != 0, :]\n\n    def __test_data(self):\n        # \u5168\u30c7\u30fc\u30bf\u306e 1/3 \u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\n        return self.data.loc[lambda df: df.index % 3 == 0, :]\n\n    def __drop_outcome(self, data):\n        return data.drop(\"outcome\", axis=1)\n\n    def __good_bad(self, outcome):\n        return outcome.apply(\n            lambda p: pd.Series([\n                1 if p <=  0 else 0,\n                1 if p ==1  else 0,\n                1 if p > 1  else 0\n            ], index=['amateur', 'regular', 'pros']))\n\n\nclass IoTResultsLoader:\n\n    def retrieve_iot_data(self):\n        df = pd.DataFrame(\n            {'move1to2': [25,27,56,30,33,27,65,8,28,26,33,55,31,7,31,52,27,29,31,30,28,61,28,7,30,31,58,33,31,29,27,8,31,30,58,61,29,31,27,31,33,9,29,30,33,28,31,33,30,59,29,27,28,10,31,33,29,9,29,57,31,32,30,29,33,32,34,29,32,8,29,30,31,30,29,28,3,56,29,31,33,9,30,31,33,29,31,30,31,55,32,31,30,28,31,9,33,32,33,32],\n              'move2to3': [12,14,32,12,11,14,32,2,15,14,13,32,15,2,12,43,18,14,15,12,13,34,14,4,15,14,29,14,15,14,14,2,15,14,38,36,18,14,17,15,15,2,18,16,15,14,15,16,17,38,17,15,14,3,18,16,15,2,15,33,14,15,16,15,12,13,17,15,14,2,16,15,16,14,16,18,15,32,15,16,18,1,15,14,16,18,14,15,13,34,18,14,16,16,15,3,14,15,16,14],\n             'move3to4': [20,18,25,21,23,25,26,8,19,18,20,48,22,6,24,42,23,19,20,18,23,35,22,6,24,22,40,19,20,30,22,7,28,24,33,28,25,30,28,29,27,6,12,20,18,20,22,21,22,34,28,30,26,7,25,20,19,6,21,27,18,20,18,20,24,26,22,28,24,8,24,25,21,22,28,26,19,32,23,21,24,6,21,20,19,22,25,27,26,34,24,20,23,19,22,7,27,23,24,18],\n             'move4to5': [50,44,58,56,48,42,60,40,58,54,56,60,44,40,58,62,50,52,54,56,48,46,50,42,56,60,64,52,56,60,58,44,44,48,54,52,56,60,62,64,58,48,58,48,48,50,54,60,62,52,48,44,50,54,52,58,46,48,50,56,62,60,54,48,44,52,54,58,50,48,48,52,58,62,60,52,60,58,56,48,44,52,56,54,58,48,52,54,50,58,54,56,62,60,60,52,48,46,58,48],\n             'outcome': [1,1,0,1,1,1,0,2,1,1,1,0,1,2,1,0,1,1,1,1,1,0,1,2,1,1,0,1,1,1,1,2,1,1,0,0,1,1,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,2,1,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1]})\n        return df\n\n\n\n\n\n3. \u5b9f\u884c\u3057\u307e\u3059\n\npython train.py\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3059\n\npython server.py\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\n\u4e0a\u8a18\u306eNode-RED\u306e\u30d5\u30ed\u30fc\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3001amateur/regular/pros\u306e\u5224\u5b9a\u3092\u78ba\u8a8d\u3057\u307e\u3059\n\npython -m tensorflow.tensorboard --logdir=./logs\u306a\u3069\u3067tensorboard\u3092\u7a3c\u50cd\u3057\u30d6\u30e9\u30a6\u30b6\u3067\uff08TensorFlow\u7a3c\u50cd\u30b5\u30fc\u30d0\u30fc):6006\u3078\u30a2\u30af\u30bb\u30b9\u3057\u3066\u5b66\u7fd2\u306e\u72b6\u6cc1\u306a\u3069\u3092\u78ba\u8a8d\u3057\u307e\u3059\n\n\n\n\n\u53c2\u8003\nTensorFlow\u3092\u4f7f\u3063\u305f\u70ba\u66ff(FX)\u306e\u30c8\u30ec\u30fc\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u5927\u5909\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u521d\u3081\u3066Watson IoT Platform\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3001\u3068\u3044\u3046\u304b\u305f\u306e\u305f\u3081\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002\n[Watson IoT Platform\u3092\u4f7f\u3063\u3066\u307f\u308b](http://qiita.com/egplnt/items/af867711a7191923b2ff)\u3067IoT\u30a2\u30d7\u30ea\u3092\u6e96\u5099\u3057\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u30b5\u30f3\u30d7\u30eb\u306e\u30d3\u30fc\u30b3\u30f3\u304b\u3089\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u4f7f\u3063\u3066TensorFlow\u3067\u6a5f\u68b0\u5b66\u7fd2\u3057\u3001\u30d3\u30fc\u30b3\u30f3\u3067\u691c\u77e5\u3055\u308c\u305f\u52d5\u7dda\u306e\u9055\u3044\u304b\u3089\u30a2\u30de\u30c1\u30e5\u30a2/\u666e\u901a/\u30d7\u30ed\u306e\u5224\u5b9a\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n# Beacon\u304b\u3089\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u53ef\u8996\u5316\u3059\u308b\n1. [\u30d3\u30fc\u30b3\u30f3\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u53ef\u8996\u5316\u3059\u308b](http://qiita.com/egplnt/items/d8ad8a703d1d4b94d657)\u3092\u53c2\u7167\u3057\u3001\u30d3\u30fc\u30b3\u30f3\u304b\u3089\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\u3002\n2. Beacon\u304b\u3089\u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u306e\u5dee\u5206\u3092\u7b97\u51fa\u3057\u307e\u3059\uff08\u4f8b\uff1a\u5730\u70b9\uff11\u2192\uff12\u306e\u79fb\u52d5\u6642\u9593\u3001\u5730\u70b9\uff12\u2192\uff13\u306e\u79fb\u52d5\u6642\u9593\u3001\u7b49\uff09\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 16.05.50.png](https://qiita-image-store.s3.amazonaws.com/0/125842/d2eb2a4a-f990-29a1-f111-8b8921ce3b46.png)\n\n\n# TensorFlow\u3092\u6e96\u5099\u3059\u308b\n1. [TensorFlow\u3092\u4f7f\u3063\u3066IoT\u30c7\u30fc\u30bf\u3092\u4eba\u5de5\u77e5\u80fd\u3057\u3066\u307f\u308b](http://qiita.com/egplnt/items/3246711349bc1d97bdb8)\u3092\u53c2\u7167\u3057\u3066TensorFlow\u3092\u7528\u610f\u3057\u307e\u3059\n2. \u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u7528\u610f\u3057\u3001\u4f4d\u7f6e\u60c5\u5831\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\n\n```py:iot_results_loader.py\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\n\nclass IoTResults:\n\n    def __float__(data):\n        return 1.0\n\n    def __init__(self, data):\n        self.raw  = data.copy()\n        self.data = data\n\n    def predictor_data(self):\n        return self.data\n\n    def train_data(self):\n        return self.__drop_outcome(self.__train_data())\n\n    def test_data(self):\n        return self.__drop_outcome(self.__test_data())\n\n    def train_up_down(self):\n        return self.__good_bad(self.__train_data()[\"outcome\"])\n\n    def test_up_down(self):\n        return self.__good_bad(self.__test_data()[\"outcome\"])\n\n    def __train_data(self):\n        # \u5168\u30c7\u30fc\u30bf\u306e 2/3 \u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\n        return self.data.loc[lambda df: df.index % 3 != 0, :]\n\n    def __test_data(self):\n        # \u5168\u30c7\u30fc\u30bf\u306e 1/3 \u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\n        return self.data.loc[lambda df: df.index % 3 == 0, :]\n\n    def __drop_outcome(self, data):\n        return data.drop(\"outcome\", axis=1)\n\n    def __good_bad(self, outcome):\n        return outcome.apply(\n            lambda p: pd.Series([\n                1 if p <=  0 else 0,\n                1 if p ==1  else 0,\n                1 if p > 1  else 0\n            ], index=['amateur', 'regular', 'pros']))\n\n\nclass IoTResultsLoader:\n\n    def retrieve_iot_data(self):\n        df = pd.DataFrame(\n            {'move1to2': [25,27,56,30,33,27,65,8,28,26,33,55,31,7,31,52,27,29,31,30,28,61,28,7,30,31,58,33,31,29,27,8,31,30,58,61,29,31,27,31,33,9,29,30,33,28,31,33,30,59,29,27,28,10,31,33,29,9,29,57,31,32,30,29,33,32,34,29,32,8,29,30,31,30,29,28,3,56,29,31,33,9,30,31,33,29,31,30,31,55,32,31,30,28,31,9,33,32,33,32],\n              'move2to3': [12,14,32,12,11,14,32,2,15,14,13,32,15,2,12,43,18,14,15,12,13,34,14,4,15,14,29,14,15,14,14,2,15,14,38,36,18,14,17,15,15,2,18,16,15,14,15,16,17,38,17,15,14,3,18,16,15,2,15,33,14,15,16,15,12,13,17,15,14,2,16,15,16,14,16,18,15,32,15,16,18,1,15,14,16,18,14,15,13,34,18,14,16,16,15,3,14,15,16,14],\n             'move3to4': [20,18,25,21,23,25,26,8,19,18,20,48,22,6,24,42,23,19,20,18,23,35,22,6,24,22,40,19,20,30,22,7,28,24,33,28,25,30,28,29,27,6,12,20,18,20,22,21,22,34,28,30,26,7,25,20,19,6,21,27,18,20,18,20,24,26,22,28,24,8,24,25,21,22,28,26,19,32,23,21,24,6,21,20,19,22,25,27,26,34,24,20,23,19,22,7,27,23,24,18],\n             'move4to5': [50,44,58,56,48,42,60,40,58,54,56,60,44,40,58,62,50,52,54,56,48,46,50,42,56,60,64,52,56,60,58,44,44,48,54,52,56,60,62,64,58,48,58,48,48,50,54,60,62,52,48,44,50,54,52,58,46,48,50,56,62,60,54,48,44,52,54,58,50,48,48,52,58,62,60,52,60,58,56,48,44,52,56,54,58,48,52,54,50,58,54,56,62,60,60,52,48,46,58,48],\n             'outcome': [1,1,0,1,1,1,0,2,1,1,1,0,1,2,1,0,1,1,1,1,1,0,1,2,1,1,0,1,1,1,1,2,1,1,0,0,1,1,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,2,1,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1]})\n        return df\n\n\n```\n \n# 3. \u5b9f\u884c\u3057\u307e\u3059\n\n1. `python train.py`\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3059\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 16.10.44.png](https://qiita-image-store.s3.amazonaws.com/0/125842/20721135-8dc7-f8c9-7181-261e3118e3c7.png)\n\n2. `python server.py`\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\n3. \u4e0a\u8a18\u306eNode-RED\u306e\u30d5\u30ed\u30fc\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3001amateur/regular/pros\u306e\u5224\u5b9a\u3092\u78ba\u8a8d\u3057\u307e\u3059\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 15.12.10.png](https://qiita-image-store.s3.amazonaws.com/0/125842/cb54d68d-5a2b-afe6-0a8e-d060d209c6a8.png)\n\n4. `python -m tensorflow.tensorboard --logdir=./logs`\u306a\u3069\u3067tensorboard\u3092\u7a3c\u50cd\u3057\u30d6\u30e9\u30a6\u30b6\u3067`\uff08TensorFlow\u7a3c\u50cd\u30b5\u30fc\u30d0\u30fc):6006`\u3078\u30a2\u30af\u30bb\u30b9\u3057\u3066\u5b66\u7fd2\u306e\u72b6\u6cc1\u306a\u3069\u3092\u78ba\u8a8d\u3057\u307e\u3059\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 16.17.34.png](https://qiita-image-store.s3.amazonaws.com/0/125842/56f7a455-c856-47a9-9d11-3e9c90f936dc.png)\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 16.17.43.png](https://qiita-image-store.s3.amazonaws.com/0/125842/8e003694-cf2a-a1ed-de28-b123ac8b78ed.png)\n\n\n### \u53c2\u8003\n\n[TensorFlow\u3092\u4f7f\u3063\u305f\u70ba\u66ff(FX)\u306e\u30c8\u30ec\u30fc\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://qiita.com/jiji_platform/items/268377c542706e6f44b1)\u3092\u5927\u5909\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n\n\n\n", "tags": ["watsoniotplatform", "node-red", "IoT", "wiotp", "wiotp408"]}