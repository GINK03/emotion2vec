{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b\u300c.NET\u306b\u3088\u308b\u753b\u50cf\u51e6\u7406\u306e\u9ad8\u901f\u5316Tips\uff1a\u975eunsafe\u7de8\u300d\u3092\u6295\u7a3f\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306funsafe\u306a\u30b3\u30fc\u30c9\u3082\u5229\u7528\u3057\u305f\u9ad8\u901f\u5316\u306eTips\u3092\u7e8f\u3081\u3055\u305b\u3066\u8cb0\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n2015/11/08 \u6539\u7a3f\n\u30b5\u30f3\u30d7\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u3042\u307e\u308a\u306b\u6295\u3052\u3063\u3071\u306a\u3057\u3067\u4f55\u306e\u8aac\u660e\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5168\u4f53\u7684\u306b\u898b\u76f4\u3057\u307e\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u5168\u6587\u304c\u7121\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u305d\u306e\u3046\u3061\u3069\u3053\u304b\u306b\u516c\u958b\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n2015/12/12 \u8ffd\u8a18\n\u672c\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u308c\u308b\u969b\u306f\u3001\u4ee5\u4e0b\u3082\u3042\u308f\u305b\u3066\u3054\u4e00\u8aad\u3044\u305f\u3060\u304f\u3053\u3068\u3092\u63a8\u5968\u3044\u305f\u3057\u307e\u3059\u3002\n\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u30ea\u30bd\u30fc\u30b9\u306e\u30ea\u30fc\u30af\u3092\u56de\u907f\u3059\u308b\u65b9\u6cd5\n\n\u306a\u304a\u672c\u7a3f\u306f\u4f8b\u5916\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\u4f8b\u5916\u51e6\u7406\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n.NET\u3067Bitmap\u3001BitmapData\u3092\u6271\u3046\u5834\u5408\u306e\u4f8b\u5916\u51e6\u7406\u306b\u3064\u3044\u3066\n\n\u524d\u63d0\u6761\u4ef6\n\u672c\u6587\u306e\u4e2d\u3067\u306f\u3001\u7279\u306b\u8a18\u8f09\u304c\u306a\u3044\u9650\u308a\u4ee5\u4e0b\u306e\u524d\u63d0\u6761\u4ef6\u306e\u3082\u3068\u8a55\u4fa1\u3092\u884c\u3044\u307e\u3059\u3002\n* CPU\uff1aIntel Core i7-4770\uff083.4GHz\uff09\n* \u30e1\u30e2\u30ea\uff1a24GB\n* .NET Framework 4.5.2\n* Visual Studio 2015\n* Release\u30d3\u30eb\u30c9\u3067\u30b3\u30fc\u30c9\u306e\u6700\u9069\u5316\u3092\u6709\u52b9\u5316\n* 24bit\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u767d\u9ed2\u4e8c\u5024\u753b\u50cf\u3078\u5909\u63db\n* \u753b\u50cf\u306fLenna.png\u3092\u5229\u7528\n* \u6642\u9593\u8a08\u6e2c\u306f\u305d\u308c\u305e\u308c500\u56de\u5b9f\u65bd\u3057\u305f\u5e73\u5747\u5024\u3092\u63a1\u7528\n\nTips\u9069\u7528\u524d\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30d9\u30fc\u30b9\u306bTips\u306e\u8aac\u660e\u3068\u9069\u7528\u5f8c\u3092\u884c\u3044\u307e\u3059\u3002\n\u524d\u56de\u306e\u8a18\u4e8b\u306e\u6700\u7d42\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n        /// <summary>\n        /// \u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u4e8c\u5024\u5316\u3059\u308b\u3002\n        /// </summary>\n        /// <param name=\"src\">\u5909\u63db\u5bfe\u8c61\u306e\u30ab\u30e9\u30fc\u753b\u50cf\u3002</param>\n        /// <returns>\u5909\u63db\u7d50\u679c\u306e\u4e8c\u5024\u753b\u50cf</returns>\n        public static System.Drawing.Bitmap Binarize(System.Drawing.Bitmap src)\n        {\n            // \u5909\u63db\u7d50\u679c\u306eBitmap\u3092\u4f5c\u6210\u3059\u308b\n            System.Drawing.Bitmap dest =\n                new System.Drawing.Bitmap(\n                    src.Width, src.Height, System.Drawing.Imaging.PixelFormat.Format1bppIndexed);\n\n            // Bitmap\u3092\u30ed\u30c3\u30af\u3057\u3001BitmapData\u3092\u53d6\u5f97\u3059\u308b\n            System.Drawing.Imaging.BitmapData srcBitmapData =\n                src.LockBits(\n                    new System.Drawing.Rectangle(0, 0, src.Width, src.Height),\n                    System.Drawing.Imaging.ImageLockMode.WriteOnly, src.PixelFormat);\n\n            System.Drawing.Imaging.BitmapData destBitmapData =\n                dest.LockBits(\n                    new System.Drawing.Rectangle(0, 0, dest.Width, dest.Height),\n                    System.Drawing.Imaging.ImageLockMode.WriteOnly, dest.PixelFormat);\n\n            // \u5909\u63db\u5bfe\u8c61\u306e\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u60c5\u5831\u3092\u30d0\u30a4\u30c8\u5217\u3078\u66f8\u304d\u51fa\u3059\n            byte[] srcPixels = new byte[srcBitmapData.Stride * src.Height];\n            System.Runtime.InteropServices.Marshal.Copy(srcBitmapData.Scan0, srcPixels, 0, srcPixels.Length);\n\n            // \u4e8c\u5024\u753b\u50cf\u3078\u5909\u63db\u3057\u305f\u7d50\u679c\u3092\u4fdd\u7ba1\u3059\u308b\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\n            byte[] destPixels = new byte[destBitmapData.Stride * destBitmapData.Height];\n            for (int y = 0; y < destBitmapData.Height; y++)\n            {\n                for (int x = 0; x < destBitmapData.Width; x++)\n                {\n                    // 24bit\u30ab\u30e9\u30fc\u3092256\u968e\u5c64\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u3001180\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u767d\u3068\u5224\u5b9a\u3059\u308b\n                    if (128 <= ConvertToGrayscale(srcPixels, x, y, srcBitmapData.Stride))\n                    {\n                        // \u4e8c\u5024\u753b\u50cf\u306f1\u30d3\u30c3\u30c8\u305a\u3064\u683c\u7d0d\u3055\u308c\u308b\u305f\u3081\u3001\u5ea7\u6a19\u306f8\u3067\u5272\u3063\u305f\u30a2\u30c9\u30ec\u30b9\u306e\u30d0\u30a4\u30c8\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n                        int pos = (x >> 3) + destBitmapData.Stride * y;\n                        // \u8a72\u5f53\u306e\u30d3\u30c3\u30c8\u3092\u7acb\u3066\u308b\u3053\u3068\u3067\u3001\u767d\u306b\u3059\u308b\n                        destPixels[pos] |= (byte)(0x80 >> (x & 0x7));\n                    }\n                }\n            }\n            // \u4e8c\u5024\u30c7\u30fc\u30bf\u3092\u4fdd\u7ba1\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u7d50\u679c\u3068\u306a\u308bBitmapData\u3078\u66f8\u304d\u51fa\u3059\n            System.Runtime.InteropServices.Marshal.Copy(destPixels, 0, destBitmapData.Scan0, destPixels.Length);\n\n            // BitmapData\u306e\u30ed\u30c3\u30af\u3092\u89e3\u9664\u3059\u308b\n            src.UnlockBits(srcBitmapData);\n            dest.UnlockBits(destBitmapData);\n\n            return dest;\n        }\n\n        const int RedFactor = (int)(0.298912 * 1024);\n        const int GreenFactor = (int)(0.586611 * 1024);\n        const int BlueFactor = (int)(0.114478 * 1024);\n        /// <summary>\n        /// \u6307\u5b9a\u3055\u308c\u305f\u5ea7\u6a19\u306e\u30d4\u30af\u30bb\u30eb\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5024\u3092\u6c42\u3081\u308b\n        /// </summary>\n        /// <param name=\"srcPixels\">\u5909\u63db\u5143\u753b\u50cf\u306eBitmap\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u914d\u5217</param>\n        /// <param name=\"x\">X\u5ea7\u6a19</param>\n        /// <param name=\"y\">Y\u5ea7\u6a19</param>\n        /// <param name=\"stride\">\u30b9\u30ad\u30e3\u30f3\u5e45</param>\n        /// <returns>\u5909\u63db\u7d50\u679c</returns>\n        private static int ConvertToGrayscale(byte[] srcPixels, int x, int y, int stride)\n        {\n            int position = x * 3 + stride * y;\n            byte b = srcPixels[position + 0];\n            byte g = srcPixels[position + 1];\n            byte r = srcPixels[position + 2];\n\n            return (r * RedFactor + g * GreenFactor + b * BlueFactor) >> 10;\n        }\n\n\nunsafe\u30b3\u30fc\u30c9\u3092\u7528\u3044\u305f\u9ad8\u901f\u5316\u306e\u691c\u8a0e\n\u307e\u305a\u305d\u3082\u305d\u3082\u306a\u305cunsafe\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u3068\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6539\u5584\u304c\u898b\u8fbc\u3081\u308b\u306e\u304b\uff1f\u3068\u3044\u3046\u70b9\u304b\u3089\u8aac\u660e\u3057\u307e\u3059\u3002\n\u524d\u8ff0\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u51e6\u7406\u3092\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002\n1. BitmapData\u3092\u4e00\u65e6byte\u914d\u5217\u3078\u30b3\u30d4\u30fc\u3059\u308b\n2. byte\u914d\u5217\u304b\u3089\u30d4\u30af\u30bb\u30eb\u60c5\u5831\u3092\u53d6\u5f97\n3. 24bit\u30ab\u30e9\u30fc\u3092256\u968e\u8abf\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30b9\u3078\u5909\u63db\u3092\u7d4c\u7531\u3057\u3066\u767d\u9ed2\u4e8c\u5024\u3078\u5909\u63db\n4. \u767d\u9ed2\u4e8c\u5024\u3092\u7d50\u679cbyte\u914d\u5217\u306b\u8a2d\u5b9a\n5. \u7d50\u679cbyte\u914d\u5217\u3092BitmapData\u3078\u4e00\u6c17\u306b\u66f8\u304d\u51fa\u3059\n\u3053\u306e\u6642\u3001byte\u914d\u5217\u306e\u5b9f\u4f53\u306f.NET Framework\u304c\u7ba1\u7406\u3057\u3066\u3044\u308b\u30d2\u30fc\u30d7\u9818\u57df\u306b\u78ba\u4fdd\u3055\u308c\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306a\u8a71\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30d2\u30fc\u30d7\u9818\u57df\u4e0a\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u5b89\u5168\u306a\u5206\u3001\u9045\u304f\u3082\u3042\u308a\u307e\u3059\u3002\n\u306a\u305c\u30d2\u30fc\u30d7\u9818\u57df\u306f\u9045\u3044\u306e\u304b\u306f\u3001\u307e\u305f\u5225\u9014\u8a18\u4e8b\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u70ba\u3001unsafe\u306a\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u304c\u671f\u5f85\u3067\u304d\u307e\u3059\u3002\n\u3068\u306f\u8a00\u3048\u3001\u4e00\u6982\u306bunsafe\u3092\u5229\u7528\u3059\u308b\u3068\u3044\u3063\u3066\u3082\u9078\u629e\u80a2\u306f\u8907\u6570\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u3071\u3063\u3068\u601d\u3044\u3064\u304f\u306e\u306f\u4ee5\u4e0b\u306e4\u30d1\u30bf\u30fc\u30f3\u3067\u3057\u3087\u3046\u304b\uff1f\n\u79c1\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3060\u3051\u3067\u4ed6\u306b\u3082\u65b9\u6cd5\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3002\u3002\n\n\u30d0\u30a4\u30c8\u914d\u5217\u306f\u305d\u306e\u307e\u307e\u4f7f\u3046\u304c\u3001\u30a2\u30c9\u30ec\u30b9\u3092\u56fa\u5b9a\uff08fixed\uff09\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\u30d0\u30a4\u30c8\u914d\u5217\u3092\u30d2\u30fc\u30d7\u3067\u306f\u306a\u304f\u30b9\u30bf\u30c3\u30af\u4e0a\u3078\u78ba\u4fdd\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u9818\u57df\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u30ef\u30fc\u30af\u306b\u5229\u7528\u3059\u308b\nBitmapData\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u76f4\u63a5\u8aad\u307f\u66f8\u304d\u3059\u308b\n\n\u4ee5\u4e0b\u304c\u305d\u306e\u5bfe\u5fdc\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u9069\u7528\u3057\u305f\u306e\u306f\u5909\u63db\u524d\u306e\u753b\u50cf\u306eRead\u5074\u3060\u3051\u3067Write\u5074\u306f\u305d\u306e\u307e\u307e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nWrite\u5074\u306f\u307e\u305f\u5f8c\u534a\u3067\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n\n\nNo.\n\u9805\u76ee\n\u5b9f\u884c\u6642\u9593[ms]\n\n\n\n\n1\n\u5909\u66f4\u524d\n1.2205\n\n\n2\n\u30d0\u30a4\u30c8\u914d\u5217\u306f\u305d\u306e\u307e\u307e\u4f7f\u3046\u304c\u3001\u30a2\u30c9\u30ec\u30b9\u3092\u56fa\u5b9a\uff08fixed\uff09\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\n0.9485\n\n\n3\n\u30d0\u30a4\u30c8\u914d\u5217\u3092\u30d2\u30fc\u30d7\u3067\u306f\u306a\u304f\u30b9\u30bf\u30c3\u30af\u4e0a\u3078\u78ba\u4fdd\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\n0.9657\n\n\n4\n\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u9818\u57df\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u30ef\u30fc\u30af\u306b\u5229\u7528\u3059\u308b\n0.9366\n\n\n5\nBitmapData\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u76f4\u63a5\u8aad\u307f\u66f8\u304d\u3059\u308b\n0.7658\n\n\n\n\u5f53\u7136\u3068\u3044\u3048\u3070\u5f53\u7136\u3067\u3059\u304c\u3001\u300cBitmapData\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u76f4\u63a5\u8aad\u307f\u66f8\u304d\u3059\u308b\u300d\u304c\u65ad\u30c8\u30c4\u3067\u65e9\u3044\u3067\u3059\u306d\u3002\n\u305d\u308c\u4ee5\u5916\u306f\u8aa4\u5dee\u306e\u7bc4\u56f2\u306b\u601d\u3048\u307e\u3059\u3002\n\u500b\u3005\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\u3055\u3066\u3001\u4e0a\u8868\u306eNo.5\u3092Write\u5074\u306b\u3082\u9069\u7528\u3057\u305f\u7d50\u679c\u304c\u4e0b\u8868\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n\n\nNo.\n\u9805\u76ee\n\u5b9f\u884c\u6642\u9593[ms]\n\n\n\n\n1\n\u8aad\u307f\u8fbc\u307f\u5074\u306e\u307f\u9069\u7528\n0.7727\n\n\n2\n\u66f8\u304d\u8fbc\u307f\u5074\u306b\u3082\u9069\u7528\n0.7809\n\n\n\n\u30fb\u30fb\u30fb\u8aa4\u5dee\u3092\u8003\u616e\u3059\u308b\u3068\u3001\u52b9\u679c\u304c\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\u3067\u306fWrite\u30a2\u30af\u30bb\u30b9\u306fbyte\u914d\u5217\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3082\u3001unsafe\u306a\u30b3\u30fc\u30c9\u3082\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7684\u306a\u9055\u3044\u306f\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u4e0a\u8a18\u691c\u8a3c\u306b\u52b9\u679c\u304c\u898b\u53d7\u3051\u3089\u308c\u306a\u3044\u539f\u56e0\u306f\u4ee5\u4e0b\u306e2\u30b1\u30fc\u30b9\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n1. byte\u914d\u5217\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3082unsafe\u306a\u30b3\u30fc\u30c9\u3082\u66f8\u304d\u8fbc\u307f\u306f\u6027\u80fd\u5dee\u306f\u51fa\u306b\u304f\u3044\n2. Write\u5074\u306f\u4e8c\u5024\u753b\u50cf\u3067\u30d4\u30af\u30bb\u30eb\u6570\u304c\u5c11\u306a\u304f\u3001\u4e14\u3064\u767d\u30d4\u30af\u30bb\u30eb\u306e\u6642\u306e\u307f\u3057\u304b\u66f8\u304d\u8fbc\u307f\u3092\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u524d\u8ff0\u306e\u691c\u8a3c\u3067\u306f\u6b63\u3057\u304f\u8a55\u4fa1\u3067\u304d\u3066\u3044\u306a\u3044\n\u3068\u3044\u3046\u308f\u3051\u3067\u300124bit\u30ab\u30e9\u30fc\u306eBitmap\u3092\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\u3002\uff08\u30b3\u30fc\u30c9\u306f\u5f8c\u8ff0\uff09\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n\n\nNo.\n\u9805\u76ee\n\u5b9f\u884c\u6642\u9593[ms]\n\n\n\n\n1\nbyte\u914d\u5217\u540c\u58eb\u3067\u30b3\u30d4\u30fc\n1.9674\n\n\n2\nRead\u5074\u3092unsafe\u306b\u5909\u66f4\n1.4915\n\n\n3\nWrite\u5074\u3092unsafe\u306b\u5909\u66f4\n1.1421\n\n\n4\nRead\u5074\u30fbWrite\u5074\u3068\u3082\u306bunsafe\u306b\u5909\u66f4\n0.8836\n\n\n\nWrite\u5074\u306e\u65b9\u304c\u3001\u5f71\u97ff\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002\n\u3057\u305f\u304c\u3063\u3066\u524d\u8ff0\u306e\u691c\u8a3c\u306f\u3084\u306f\u308a\u30a2\u30af\u30bb\u30b9\u56de\u6570\u304cRead\u306b\u6bd4\u3079\u3066Write\u304c\u5727\u5012\u7684\u306b\u5c11\u306a\u304b\u3063\u305f\u305b\u3044\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u8003\u5bdf\n\u3053\u3053\u307e\u3067\u306e\u691c\u8a3c\u3092\u901a\u3057\u3066\u4ee5\u4e0b\u306e\u4e8b\u304c\u8a00\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n1. \u30d2\u30fc\u30d7\u4e0a\u306e\u30d0\u30a4\u30c8\u914d\u5217\u3092\u76f4\u63a5\u5229\u7528\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001unsafe\u306a\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u4e8b\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5411\u4e0a\u3092\u56f3\u308c\u308b\u3053\u3068\u304c\u3042\u308b\n2. Read\u3088\u308a\u3082Write\u306e\u969b\u306b\u52b9\u679c\u304c\u3067\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\n3. \u305f\u3060\u3057\u4e00\u6982\u306bunsafe\u306b\u3059\u308c\u3070\u5fc5\u305a\u52b9\u679c\u304c\u8868\u308c\u308b\u3068\u3082\u9650\u3089\u306a\u3044\n3. Bitmap\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3001BitmapData\u3078\u76f4\u63a5\u30dd\u30a4\u30f3\u30bf\u30a2\u30af\u30bb\u30b9\u3059\u308b\u4e8b\u304c\u6700\u3082\u65e9\u3044\u53ef\u80fd\u6027\u304c\u9ad8\u304f\u3001\u305d\u308c\u4ee5\u5916\uff08byte\u914d\u5217\u306e\u30a2\u30c9\u30ec\u30b9\u56fa\u5b9a\u3001\u30b9\u30bf\u30c3\u30af\u9818\u57df\u4e0a\u306e\u914d\u5217\u3001\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u306a\u30ef\u30fc\u30af\u9818\u57df\uff09\u306f\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u305d\u308c\u305e\u308c\u306b\u5927\u304d\u306a\u5dee\u7570\u306f\u898b\u53d7\u3051\u3089\u308c\u306a\u304b\u3063\u305f\n\u5b9f\u969b\u306e\u3068\u3053\u308d\u3001\u4eca\u56de\u306e\u753b\u50cf\u3067\u3042\u308c\u3070unsafe\u306a\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u306a\u304f\u3066\u30822[ms]\u3082\u304b\u304b\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u308f\u3056\u308f\u3056unsafe\u306a\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u4fa1\u5024\u306f\u4f4e\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305f\u3060\u3057\u3001\u9ad8\u89e3\u50cf\u5ea6\u306a\u753b\u50cf\u3092\u6271\u3063\u305f\u5834\u5408\u3001\u7121\u8996\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308a\u5f97\u307e\u3059\u3057\u3001\u4eca\u56de\u306e\u4e8c\u5024\u5316\u306f\u540c\u4e00\u30d4\u30af\u30bb\u30eb\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f1\u56de\u304d\u308a\u3067\u3057\u305f\u304c\u3001\u753b\u50cf\u51e6\u7406\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u306f\u4f55\u5ea6\u3082\u540c\u3058\u30d4\u30af\u30bb\u30eb\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\n\u30b1\u30fc\u30b9\u6bce\u306b\u691c\u8a3c\u3057\u305f\u3046\u3048\u3067\u3001unsafe\u306e\u5229\u7528\u53ef\u5426\u306f\u5224\u65ad\u3057\u305f\u307b\u3046\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\u3067\u306f\u6700\u5f8c\u306b\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\u3092\u5f35\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\n\n\u5171\u901a\u306e\u4fee\u6b63\u70b9\n\u307e\u305a24bit\u30ab\u30e9\u30fc\u304b\u3089\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5024\u306b\u5909\u63db\u3059\u308bConvertToGrayscale\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\u5909\u66f4\u524d\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u63db\u5143\u306e\u30d4\u30af\u30bb\u30eb\u60c5\u5831\u3092\u683c\u7d0d\u3057\u305fbyte\u914d\u5217\u3092\u6e21\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n        private static int ConvertToGrayscale(byte[] srcPixels, int x, int y, int stride)\n        {\n            int position = x * 3 + stride * y;\n            byte b = srcPixels[position + 0];\n            byte g = srcPixels[position + 1];\n            byte r = srcPixels[position + 2];\n\n            return (r * RedFactor + g * GreenFactor + b * BlueFactor) >> 10;\n        }\n\n\u3053\u306e\u5f15\u6570\u306ebyte\u914d\u5217\u306e\u5ba3\u8a00\u3092byte\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u30e1\u30bd\u30c3\u30c9\u5185\u90e8\u306f\u4e00\u5207\u5909\u66f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u914d\u5217\u3068\u30dd\u30a4\u30f3\u30bf\u306f\u3053\u3053\u3067\u306f\u540c\u3058\u3088\u3046\u306b\u6271\u3048\u307e\u3059\u3002\n        private static int ConvertToGrayscale(byte* srcPixels, int x, int y, int stride)\n        {\n            int position = x * 3 + stride * y;\n            byte b = srcPixels[position + 0];\n            byte g = srcPixels[position + 1];\n            byte r = srcPixels[position + 2];\n\n            return (r * RedFactor + g * GreenFactor + b * BlueFactor) >> 10;\n        }\n\n\u305d\u308c\u304b\u3089ConvertToGrayscale\u306e\u547c\u3073\u51fa\u3057\u5074\u3067\u3001byte\u914d\u5217\u3092\u6e21\u3057\u3066\u3044\u308b\u500b\u6240\u3092byte\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u5909\u66f4\u524d\u3067\nif (128 <= ConvertToGrayscale(srcPixels, x, y, srcBitmapData.Stride))\n\n\u4ee5\u4e0b\u304c\u5909\u66f4\u5f8c\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\nbyte* srcPtr\nif (128 <= ConvertToGrayscale(srcPtr, x, y, srcBitmapData.Stride))\n\nsrcPtr\u304cbyte\u30dd\u30a4\u30f3\u30bf\u306b\u3042\u305f\u308a\u307e\u3059\u304c\u3001byte\u30dd\u30a4\u30f3\u30bf\u306e\u53d6\u5f97\u306e\u4ed5\u65b9\u306f\u524d\u8ff0\u306e\u5404\u624b\u6cd5\u3067\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u4ee5\u4e0b\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u30d0\u30a4\u30c8\u914d\u5217\u306f\u305d\u306e\u307e\u307e\u4f7f\u3046\u304c\u3001\u30a2\u30c9\u30ec\u30b9\u3092\u56fa\u5b9a\uff08fixed\uff09\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\nbyte\u914d\u5217\u306e\u30e1\u30e2\u30ea\u7a7a\u9593\u3078\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306fbyte\u914d\u5217srcPixels\u304b\u3089byte\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n            unsafe\n            {\n                fixed(byte* srcPtr = srcPixels)\n                {\n                    // \u3053\u306e\u4e2d\u3078\u5177\u4f53\u7684\u306a\u51e6\u7406\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n                }\n            }\n\nunsafe\u306a\u30b3\u30fc\u30c9\u5168\u4f53\u3092unsafe\u30d6\u30ed\u30c3\u30af\u3067\u304f\u304f\u308a\u3001\u305d\u306e\u4e2d\u3067using\u3068\u985e\u4f3c\u3057\u305f\u8a18\u6cd5\u3067fixed\u3092\u5229\u7528\u3057\u3066byte\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u3001\u305d\u306e\u30d6\u30ed\u30c3\u30af\u5185\u3067\u5177\u4f53\u7684\u306a\u51e6\u7406\u3092\u8a18\u8f09\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u30d0\u30a4\u30c8\u914d\u5217\u3092\u30d2\u30fc\u30d7\u3067\u306f\u306a\u304f\u30b9\u30bf\u30c3\u30af\u4e0a\u3078\u78ba\u4fdd\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\n\u5909\u66f4\u524d\u306e\u30b3\u30fc\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bbyte\u914d\u5217\u3092\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3057\u305f\u3002\nbyte[] srcPixels = new byte[srcBitmapData.Stride * src.Height];\n\n\u3053\u3053\u3092stackalloc\u3092\u4f7f\u3063\u3066\u30b9\u30bf\u30c3\u30af\u4e0a\u306b\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001stackalloc\u3067\u53d6\u5f97\u3057\u305f\u30e1\u30e2\u30ea\u3092\u5229\u7528\u3059\u308b\u7b87\u6240\u5168\u4f53\u3092unsafe\u30d6\u30ed\u30c3\u30af\u3067\u304f\u304f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nunsafe\n{\n    int srcLength = srcBitmapData.Stride * src.Height;\n    byte* srcPtr = stackalloc byte[srcLength];\n    // \u3044\u304b\u306b\u5177\u4f53\u7684\u306a\u51e6\u7406\u3092\u8a18\u8f09\u3059\u308b\n}\n\n\u307e\u305f\u3001\u5143\u3005\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067BitmapData\u306e\u5024\u3092byte\u914d\u5217\u3078\u30b3\u30d4\u30fc\u3057\u3066\u3044\u307e\u3057\u305f\u3002\nSystem.Runtime.InteropServices.Marshal.Copy(srcBitmapData.Scan0, srcPixels, 0, srcPixels.Length);\n\n\u3053\u308c\u3092byte\u30dd\u30a4\u30f3\u30bf\u3078\u30b3\u30d4\u30fc\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\nusing (System.IO.UnmanagedMemoryStream inputStream = new System.IO.UnmanagedMemoryStream((byte*)srcBitmapData.Scan0, srcLength))\nusing (System.IO.UnmanagedMemoryStream outputStream = new System.IO.UnmanagedMemoryStream((byte*)srcPtr, srcLength, srcLength, System.IO.FileAccess.Write))\n{\n    inputStream.CopyTo(outputStream);\n}\n\n\u4ed6\u306b\u3082\u30b3\u30d4\u30fc\u3059\u308b\u65b9\u6cd5\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3053\u308c\u304c\u304a\u624b\u8efd\u3067\u9ad8\u901f\u3067\u3059\u3002\n\u3042\u3068\u306f\u5171\u901a\u306e\u5909\u66f4\u3092\u9069\u7528\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u9818\u57df\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u30ef\u30fc\u30af\u306b\u5229\u7528\u3059\u308b\u5834\u5408\n\u5909\u66f4\u524d\u306e\u30b3\u30fc\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bbyte\u914d\u5217\u3092\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3057\u305f\u3002\nbyte[] srcPixels = new byte[srcBitmapData.Stride * src.Height];\n\n\u3053\u3053\u3092Marshal.AllocCoTaskMem\u3092\u4f7f\u3063\u3066\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u9818\u57df\u306b\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001\u4ed6\u3068\u540c\u69d8\u306bunsafe\u30d6\u30ed\u30c3\u30af\u3067\u304f\u304f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nunsafe\n{\n    // \u5909\u63db\u5bfe\u8c61\u306e\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u60c5\u5831\u3092\u30d0\u30a4\u30c8\u5217\u3078\u66f8\u304d\u51fa\u3059\n    int srcLength = srcBitmapData.Stride * src.Height;\n    IntPtr srcIntPtr = System.Runtime.InteropServices.Marshal.AllocCoTaskMem(srcLength);\n    try\n    {\n        byte* srcPtr = (byte*)srcIntPtr;\n        // \u3053\u3053\u306b\u51e6\u7406\u3092\u8a18\u8f09\u3059\u308b\n    }\n    finally\n    {\n        System.Runtime.InteropServices.Marshal.FreeCoTaskMem(srcIntPtr);\n    }\n}\n\n\u3053\u306e\u969b\u306b\u7279\u306b\u6ce8\u610f\u3057\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u306e\u306f\u3001AllocCoTaskMem\u3067\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306f\u5fc5\u305aFreeCoTaskMem\u3067\u958b\u653e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u958b\u653e\u6f0f\u308c\u304c\u767a\u751f\u3059\u308b\u3068\u30ea\u30bd\u30fc\u30b9\u304c\u30ea\u30fc\u30af\u3057\u307e\u3059\u3002\n\u307e\u305fsrcPtr\u3078\u30ad\u30e3\u30b9\u30c8\u3057\u305f\u306e\u3061\u306b\u3001stackalloc\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u3001BitmapData\u306e\u60c5\u5831\u3092\u30dd\u30a4\u30f3\u30bf\u3078\u30b3\u30d4\u30fc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nBitmapData\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u76f4\u63a5\u8aad\u307f\u66f8\u304d\u3059\u308b\u5834\u5408\n\u3042\u308b\u610f\u5473\u3001\u3053\u308c\u304c\u4e00\u756a\u7c21\u5358\u3067\u3059\u3002\nbyte\u914d\u5217\u306e\u5ba3\u8a00\u306a\u3069\u3092\u524a\u9664\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bBitmapData\u306e\u60c5\u5831\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30dd\u30a4\u30f3\u30bf\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\nunsafe\n{\n    byte* srcPtr = (byte*)srcBitmapData.Scan0;\n}\n\nBitmapData\u306e\u30e1\u30e2\u30ea\u7a7a\u9593\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u306a\u308b\u306e\u3067\u3001\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\u3082\u5fc5\u8981\u306a\u3044\u305f\u3081\u3001\u30ea\u30bd\u30fc\u30b9\u7684\u306b\u3082\u51e6\u7406\u901f\u5ea6\u7684\u306b\u3082\u5f53\u7136\u306a\u304c\u3089\u4e00\u756a\u6709\u5229\u3067\u3059\u3002\n\u3057\u304b\u3082\u3001\u3042\u3068\u306f\u5171\u901a\u306e\u5909\u66f4\u3092\u884c\u3063\u305fConvertToGrayscale\u3078\u6e21\u3059\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3060\u3051\u3067\u30b3\u30fc\u30c9\u81ea\u4f53\u3082\u4e00\u756a\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\u5b9f\u306e\u3068\u3053\u308d\u3001unsafe\u3092\u5229\u7528\u3057\u306a\u3044\u30b3\u30fc\u30c9\u3088\u308a\u3082\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\n24bit\u30ab\u30e9\u30fcBitmap\u306e\u5358\u7d14\u30b3\u30d4\u30fc\n\n\u914d\u5217\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\n        private static void CopyByBiteArray(System.Drawing.Imaging.BitmapData srcBitmapData, System.Drawing.Imaging.BitmapData destBitmapData)\n        {\n            // \u5909\u63db\u5bfe\u8c61\u306e\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u60c5\u5831\u3092\u30d0\u30a4\u30c8\u5217\u3078\u66f8\u304d\u51fa\u3059\n            byte[] srcPixels = new byte[srcBitmapData.Stride * srcBitmapData.Height];\n            System.Runtime.InteropServices.Marshal.Copy(srcBitmapData.Scan0, srcPixels, 0, srcPixels.Length);\n            // \u4e8c\u5024\u753b\u50cf\u3078\u5909\u63db\u3057\u305f\u7d50\u679c\u3092\u4fdd\u7ba1\u3059\u308b\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\n            byte[] destPixels = new byte[destBitmapData.Stride * destBitmapData.Height];\n            for (int y = 0; y < srcBitmapData.Height; y++)\n            {\n                for (int x = 0; x < srcBitmapData.Stride; x++)\n                {\n                    destPixels[destBitmapData.Stride * y + x] = srcPixels[srcBitmapData.Stride * y + x];\n                }\n            }\n            // \u4e8c\u5024\u30c7\u30fc\u30bf\u3092\u4fdd\u7ba1\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u7d50\u679c\u3068\u306a\u308bBitmapData\u3078\u66f8\u304d\u51fa\u3059\n            System.Runtime.InteropServices.Marshal.Copy(destPixels, 0, destBitmapData.Scan0, destPixels.Length);\n        }\n\n\n\u76f4\u63a5BitmapData\u3092\u64cd\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\n        private static void CopyByPointer(System.Drawing.Imaging.BitmapData srcBitmapData, System.Drawing.Imaging.BitmapData destBitmapData)\n        {\n            unsafe\n            {\n                byte* srcPixels = (byte*)srcBitmapData.Scan0;\n                byte* destPixels = (byte*)destBitmapData.Scan0;\n                for (int y = 0; y < srcBitmapData.Height; y++)\n                {\n                    for (int x = 0; x < srcBitmapData.Stride; x++)\n                    {\n                        destPixels[destBitmapData.Stride * y + x] = srcPixels[srcBitmapData.Stride * y + x];\n                    }\n                }\n            }\n        }\n\n# \u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b\u300c[.NET\u306b\u3088\u308b\u753b\u50cf\u51e6\u7406\u306e\u9ad8\u901f\u5316Tips\uff1a\u975eunsafe\u7de8](http://qiita.com/Nuits/items/4a2fbc0f4e8583bd5531)\u300d\u3092\u6295\u7a3f\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306funsafe\u306a\u30b3\u30fc\u30c9\u3082\u5229\u7528\u3057\u305f\u9ad8\u901f\u5316\u306eTips\u3092\u7e8f\u3081\u3055\u305b\u3066\u8cb0\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n> 2015/11/08 \u6539\u7a3f\n> \u30b5\u30f3\u30d7\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u3042\u307e\u308a\u306b\u6295\u3052\u3063\u3071\u306a\u3057\u3067\u4f55\u306e\u8aac\u660e\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5168\u4f53\u7684\u306b\u898b\u76f4\u3057\u307e\u3057\u305f\u3002\n> \u30b3\u30fc\u30c9\u5168\u6587\u304c\u7121\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u305d\u306e\u3046\u3061\u3069\u3053\u304b\u306b\u516c\u958b\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n> 2015/12/12 \u8ffd\u8a18\n> \u672c\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u308c\u308b\u969b\u306f\u3001\u4ee5\u4e0b\u3082\u3042\u308f\u305b\u3066\u3054\u4e00\u8aad\u3044\u305f\u3060\u304f\u3053\u3068\u3092\u63a8\u5968\u3044\u305f\u3057\u307e\u3059\u3002\n> [\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u30ea\u30bd\u30fc\u30b9\u306e\u30ea\u30fc\u30af\u3092\u56de\u907f\u3059\u308b\u65b9\u6cd5](http://qiita.com/Nuits/items/9ce6a205a50bf8e3dbeb)\n\n**\u306a\u304a\u672c\u7a3f\u306f\u4f8b\u5916\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\u4f8b\u5916\u51e6\u7406\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n[.NET\u3067Bitmap\u3001BitmapData\u3092\u6271\u3046\u5834\u5408\u306e\u4f8b\u5916\u51e6\u7406\u306b\u3064\u3044\u3066](http://qiita.com/Nuits/items/2c1dfa00db3aef39d3ae)**\n\n# \u524d\u63d0\u6761\u4ef6\n\u672c\u6587\u306e\u4e2d\u3067\u306f\u3001\u7279\u306b\u8a18\u8f09\u304c\u306a\u3044\u9650\u308a\u4ee5\u4e0b\u306e\u524d\u63d0\u6761\u4ef6\u306e\u3082\u3068\u8a55\u4fa1\u3092\u884c\u3044\u307e\u3059\u3002\n* CPU\uff1aIntel Core i7-4770\uff083.4GHz\uff09\n* \u30e1\u30e2\u30ea\uff1a24GB\n* .NET Framework 4.5.2\n* Visual Studio 2015\n* Release\u30d3\u30eb\u30c9\u3067\u30b3\u30fc\u30c9\u306e\u6700\u9069\u5316\u3092\u6709\u52b9\u5316\n* 24bit\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u767d\u9ed2\u4e8c\u5024\u753b\u50cf\u3078\u5909\u63db\n* \u753b\u50cf\u306f[Lenna.png](https://en.wikipedia.org/wiki/File:Lenna.png \"Lenna.png\")\u3092\u5229\u7528\n* \u6642\u9593\u8a08\u6e2c\u306f\u305d\u308c\u305e\u308c500\u56de\u5b9f\u65bd\u3057\u305f\u5e73\u5747\u5024\u3092\u63a1\u7528\n\n# Tips\u9069\u7528\u524d\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30d9\u30fc\u30b9\u306bTips\u306e\u8aac\u660e\u3068\u9069\u7528\u5f8c\u3092\u884c\u3044\u307e\u3059\u3002\n\u524d\u56de\u306e\u8a18\u4e8b\u306e\u6700\u7d42\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp\n        /// <summary>\n        /// \u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u4e8c\u5024\u5316\u3059\u308b\u3002\n        /// </summary>\n        /// <param name=\"src\">\u5909\u63db\u5bfe\u8c61\u306e\u30ab\u30e9\u30fc\u753b\u50cf\u3002</param>\n        /// <returns>\u5909\u63db\u7d50\u679c\u306e\u4e8c\u5024\u753b\u50cf</returns>\n        public static System.Drawing.Bitmap Binarize(System.Drawing.Bitmap src)\n        {\n            // \u5909\u63db\u7d50\u679c\u306eBitmap\u3092\u4f5c\u6210\u3059\u308b\n            System.Drawing.Bitmap dest =\n                new System.Drawing.Bitmap(\n                    src.Width, src.Height, System.Drawing.Imaging.PixelFormat.Format1bppIndexed);\n\n            // Bitmap\u3092\u30ed\u30c3\u30af\u3057\u3001BitmapData\u3092\u53d6\u5f97\u3059\u308b\n            System.Drawing.Imaging.BitmapData srcBitmapData =\n                src.LockBits(\n                    new System.Drawing.Rectangle(0, 0, src.Width, src.Height),\n                    System.Drawing.Imaging.ImageLockMode.WriteOnly, src.PixelFormat);\n\n            System.Drawing.Imaging.BitmapData destBitmapData =\n                dest.LockBits(\n                    new System.Drawing.Rectangle(0, 0, dest.Width, dest.Height),\n                    System.Drawing.Imaging.ImageLockMode.WriteOnly, dest.PixelFormat);\n\n            // \u5909\u63db\u5bfe\u8c61\u306e\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u60c5\u5831\u3092\u30d0\u30a4\u30c8\u5217\u3078\u66f8\u304d\u51fa\u3059\n            byte[] srcPixels = new byte[srcBitmapData.Stride * src.Height];\n            System.Runtime.InteropServices.Marshal.Copy(srcBitmapData.Scan0, srcPixels, 0, srcPixels.Length);\n\n            // \u4e8c\u5024\u753b\u50cf\u3078\u5909\u63db\u3057\u305f\u7d50\u679c\u3092\u4fdd\u7ba1\u3059\u308b\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\n            byte[] destPixels = new byte[destBitmapData.Stride * destBitmapData.Height];\n            for (int y = 0; y < destBitmapData.Height; y++)\n            {\n                for (int x = 0; x < destBitmapData.Width; x++)\n                {\n                    // 24bit\u30ab\u30e9\u30fc\u3092256\u968e\u5c64\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u3001180\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u767d\u3068\u5224\u5b9a\u3059\u308b\n                    if (128 <= ConvertToGrayscale(srcPixels, x, y, srcBitmapData.Stride))\n                    {\n                        // \u4e8c\u5024\u753b\u50cf\u306f1\u30d3\u30c3\u30c8\u305a\u3064\u683c\u7d0d\u3055\u308c\u308b\u305f\u3081\u3001\u5ea7\u6a19\u306f8\u3067\u5272\u3063\u305f\u30a2\u30c9\u30ec\u30b9\u306e\u30d0\u30a4\u30c8\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n                        int pos = (x >> 3) + destBitmapData.Stride * y;\n                        // \u8a72\u5f53\u306e\u30d3\u30c3\u30c8\u3092\u7acb\u3066\u308b\u3053\u3068\u3067\u3001\u767d\u306b\u3059\u308b\n                        destPixels[pos] |= (byte)(0x80 >> (x & 0x7));\n                    }\n                }\n            }\n            // \u4e8c\u5024\u30c7\u30fc\u30bf\u3092\u4fdd\u7ba1\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u7d50\u679c\u3068\u306a\u308bBitmapData\u3078\u66f8\u304d\u51fa\u3059\n            System.Runtime.InteropServices.Marshal.Copy(destPixels, 0, destBitmapData.Scan0, destPixels.Length);\n\n            // BitmapData\u306e\u30ed\u30c3\u30af\u3092\u89e3\u9664\u3059\u308b\n            src.UnlockBits(srcBitmapData);\n            dest.UnlockBits(destBitmapData);\n\n            return dest;\n        }\n\n        const int RedFactor = (int)(0.298912 * 1024);\n        const int GreenFactor = (int)(0.586611 * 1024);\n        const int BlueFactor = (int)(0.114478 * 1024);\n        /// <summary>\n        /// \u6307\u5b9a\u3055\u308c\u305f\u5ea7\u6a19\u306e\u30d4\u30af\u30bb\u30eb\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5024\u3092\u6c42\u3081\u308b\n        /// </summary>\n        /// <param name=\"srcPixels\">\u5909\u63db\u5143\u753b\u50cf\u306eBitmap\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u914d\u5217</param>\n        /// <param name=\"x\">X\u5ea7\u6a19</param>\n        /// <param name=\"y\">Y\u5ea7\u6a19</param>\n        /// <param name=\"stride\">\u30b9\u30ad\u30e3\u30f3\u5e45</param>\n        /// <returns>\u5909\u63db\u7d50\u679c</returns>\n        private static int ConvertToGrayscale(byte[] srcPixels, int x, int y, int stride)\n        {\n            int position = x * 3 + stride * y;\n            byte b = srcPixels[position + 0];\n            byte g = srcPixels[position + 1];\n            byte r = srcPixels[position + 2];\n\n            return (r * RedFactor + g * GreenFactor + b * BlueFactor) >> 10;\n        }\n```\n\n# unsafe\u30b3\u30fc\u30c9\u3092\u7528\u3044\u305f\u9ad8\u901f\u5316\u306e\u691c\u8a0e\n\u307e\u305a\u305d\u3082\u305d\u3082\u306a\u305cunsafe\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u3068\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6539\u5584\u304c\u898b\u8fbc\u3081\u308b\u306e\u304b\uff1f\u3068\u3044\u3046\u70b9\u304b\u3089\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u524d\u8ff0\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u51e6\u7406\u3092\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002\n1. BitmapData\u3092\u4e00\u65e6byte\u914d\u5217\u3078\u30b3\u30d4\u30fc\u3059\u308b\n2. byte\u914d\u5217\u304b\u3089\u30d4\u30af\u30bb\u30eb\u60c5\u5831\u3092\u53d6\u5f97\n3. 24bit\u30ab\u30e9\u30fc\u3092256\u968e\u8abf\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30b9\u3078\u5909\u63db\u3092\u7d4c\u7531\u3057\u3066\u767d\u9ed2\u4e8c\u5024\u3078\u5909\u63db\n4. \u767d\u9ed2\u4e8c\u5024\u3092\u7d50\u679cbyte\u914d\u5217\u306b\u8a2d\u5b9a\n5. \u7d50\u679cbyte\u914d\u5217\u3092BitmapData\u3078\u4e00\u6c17\u306b\u66f8\u304d\u51fa\u3059\n\n\u3053\u306e\u6642\u3001byte\u914d\u5217\u306e\u5b9f\u4f53\u306f.NET Framework\u304c\u7ba1\u7406\u3057\u3066\u3044\u308b\u30d2\u30fc\u30d7\u9818\u57df\u306b\u78ba\u4fdd\u3055\u308c\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306a\u8a71\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30d2\u30fc\u30d7\u9818\u57df\u4e0a\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u5b89\u5168\u306a\u5206\u3001\u9045\u304f\u3082\u3042\u308a\u307e\u3059\u3002\n\u306a\u305c\u30d2\u30fc\u30d7\u9818\u57df\u306f\u9045\u3044\u306e\u304b\u306f\u3001\u307e\u305f\u5225\u9014\u8a18\u4e8b\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u306e\u70ba\u3001unsafe\u306a\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u304c\u671f\u5f85\u3067\u304d\u307e\u3059\u3002\n\u3068\u306f\u8a00\u3048\u3001\u4e00\u6982\u306bunsafe\u3092\u5229\u7528\u3059\u308b\u3068\u3044\u3063\u3066\u3082\u9078\u629e\u80a2\u306f\u8907\u6570\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u3071\u3063\u3068\u601d\u3044\u3064\u304f\u306e\u306f\u4ee5\u4e0b\u306e4\u30d1\u30bf\u30fc\u30f3\u3067\u3057\u3087\u3046\u304b\uff1f\n\u79c1\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3060\u3051\u3067\u4ed6\u306b\u3082\u65b9\u6cd5\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3002\u3002\n\n1. \u30d0\u30a4\u30c8\u914d\u5217\u306f\u305d\u306e\u307e\u307e\u4f7f\u3046\u304c\u3001\u30a2\u30c9\u30ec\u30b9\u3092\u56fa\u5b9a\uff08fixed\uff09\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\n2. \u30d0\u30a4\u30c8\u914d\u5217\u3092\u30d2\u30fc\u30d7\u3067\u306f\u306a\u304f\u30b9\u30bf\u30c3\u30af\u4e0a\u3078\u78ba\u4fdd\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\n3. \u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u9818\u57df\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u30ef\u30fc\u30af\u306b\u5229\u7528\u3059\u308b\n4. BitmapData\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u76f4\u63a5\u8aad\u307f\u66f8\u304d\u3059\u308b\n\n\u4ee5\u4e0b\u304c\u305d\u306e\u5bfe\u5fdc\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u9069\u7528\u3057\u305f\u306e\u306f\u5909\u63db\u524d\u306e\u753b\u50cf\u306eRead\u5074\u3060\u3051\u3067Write\u5074\u306f\u305d\u306e\u307e\u307e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nWrite\u5074\u306f\u307e\u305f\u5f8c\u534a\u3067\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n|No.|\u9805\u76ee                                                                                     |     \u5b9f\u884c\u6642\u9593[ms]|\n|-----:|:--------------------------------------------------------------|------------:|\n|1|\u5909\u66f4\u524d                                                                                    |1.2205|\n|2|\u30d0\u30a4\u30c8\u914d\u5217\u306f\u305d\u306e\u307e\u307e\u4f7f\u3046\u304c\u3001\u30a2\u30c9\u30ec\u30b9\u3092\u56fa\u5b9a\uff08fixed\uff09\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b|0.9485|\n|3|\u30d0\u30a4\u30c8\u914d\u5217\u3092\u30d2\u30fc\u30d7\u3067\u306f\u306a\u304f\u30b9\u30bf\u30c3\u30af\u4e0a\u3078\u78ba\u4fdd\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b|0.9657|\n|4|\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u9818\u57df\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u30ef\u30fc\u30af\u306b\u5229\u7528\u3059\u308b|0.9366|\n|5|BitmapData\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u76f4\u63a5\u8aad\u307f\u66f8\u304d\u3059\u308b|0.7658|\n\n\u5f53\u7136\u3068\u3044\u3048\u3070\u5f53\u7136\u3067\u3059\u304c\u3001\u300cBitmapData\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u76f4\u63a5\u8aad\u307f\u66f8\u304d\u3059\u308b\u300d\u304c\u65ad\u30c8\u30c4\u3067\u65e9\u3044\u3067\u3059\u306d\u3002\n\u305d\u308c\u4ee5\u5916\u306f\u8aa4\u5dee\u306e\u7bc4\u56f2\u306b\u601d\u3048\u307e\u3059\u3002\n\u500b\u3005\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u4e0a\u8868\u306eNo.5\u3092Write\u5074\u306b\u3082\u9069\u7528\u3057\u305f\u7d50\u679c\u304c\u4e0b\u8868\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n|No.|\u9805\u76ee                                                                                     |     \u5b9f\u884c\u6642\u9593[ms]|\n|-----:|:--------------------------------------------------------------|------------:|\n|1|\u8aad\u307f\u8fbc\u307f\u5074\u306e\u307f\u9069\u7528|0.7727|\n|2|\u66f8\u304d\u8fbc\u307f\u5074\u306b\u3082\u9069\u7528|0.7809|\n\n\u30fb\u30fb\u30fb\u8aa4\u5dee\u3092\u8003\u616e\u3059\u308b\u3068\u3001\u52b9\u679c\u304c\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\u3067\u306fWrite\u30a2\u30af\u30bb\u30b9\u306fbyte\u914d\u5217\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3082\u3001unsafe\u306a\u30b3\u30fc\u30c9\u3082\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7684\u306a\u9055\u3044\u306f\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u4e0a\u8a18\u691c\u8a3c\u306b\u52b9\u679c\u304c\u898b\u53d7\u3051\u3089\u308c\u306a\u3044\u539f\u56e0\u306f\u4ee5\u4e0b\u306e2\u30b1\u30fc\u30b9\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n1. byte\u914d\u5217\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3082unsafe\u306a\u30b3\u30fc\u30c9\u3082\u66f8\u304d\u8fbc\u307f\u306f\u6027\u80fd\u5dee\u306f\u51fa\u306b\u304f\u3044\n2. Write\u5074\u306f\u4e8c\u5024\u753b\u50cf\u3067\u30d4\u30af\u30bb\u30eb\u6570\u304c\u5c11\u306a\u304f\u3001\u4e14\u3064\u767d\u30d4\u30af\u30bb\u30eb\u306e\u6642\u306e\u307f\u3057\u304b\u66f8\u304d\u8fbc\u307f\u3092\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u524d\u8ff0\u306e\u691c\u8a3c\u3067\u306f\u6b63\u3057\u304f\u8a55\u4fa1\u3067\u304d\u3066\u3044\u306a\u3044\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u300124bit\u30ab\u30e9\u30fc\u306eBitmap\u3092\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\u3002\uff08\u30b3\u30fc\u30c9\u306f\u5f8c\u8ff0\uff09\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n|No.|\u9805\u76ee                                                                                     |     \u5b9f\u884c\u6642\u9593[ms]|\n|-----:|:--------------------------------------------------------------|------------:|\n|1|byte\u914d\u5217\u540c\u58eb\u3067\u30b3\u30d4\u30fc|1.9674|\n|2|Read\u5074\u3092unsafe\u306b\u5909\u66f4|1.4915|\n|3|Write\u5074\u3092unsafe\u306b\u5909\u66f4|1.1421|\n|4|Read\u5074\u30fbWrite\u5074\u3068\u3082\u306bunsafe\u306b\u5909\u66f4|0.8836|\n\nWrite\u5074\u306e\u65b9\u304c\u3001\u5f71\u97ff\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002\n\u3057\u305f\u304c\u3063\u3066\u524d\u8ff0\u306e\u691c\u8a3c\u306f\u3084\u306f\u308a\u30a2\u30af\u30bb\u30b9\u56de\u6570\u304cRead\u306b\u6bd4\u3079\u3066Write\u304c\u5727\u5012\u7684\u306b\u5c11\u306a\u304b\u3063\u305f\u305b\u3044\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n# \u8003\u5bdf\n\u3053\u3053\u307e\u3067\u306e\u691c\u8a3c\u3092\u901a\u3057\u3066\u4ee5\u4e0b\u306e\u4e8b\u304c\u8a00\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n1. \u30d2\u30fc\u30d7\u4e0a\u306e\u30d0\u30a4\u30c8\u914d\u5217\u3092\u76f4\u63a5\u5229\u7528\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001unsafe\u306a\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u4e8b\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5411\u4e0a\u3092\u56f3\u308c\u308b\u3053\u3068\u304c\u3042\u308b\n2. Read\u3088\u308a\u3082Write\u306e\u969b\u306b\u52b9\u679c\u304c\u3067\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\n3. \u305f\u3060\u3057\u4e00\u6982\u306bunsafe\u306b\u3059\u308c\u3070\u5fc5\u305a\u52b9\u679c\u304c\u8868\u308c\u308b\u3068\u3082\u9650\u3089\u306a\u3044\n3. Bitmap\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3001BitmapData\u3078\u76f4\u63a5\u30dd\u30a4\u30f3\u30bf\u30a2\u30af\u30bb\u30b9\u3059\u308b\u4e8b\u304c\u6700\u3082\u65e9\u3044\u53ef\u80fd\u6027\u304c\u9ad8\u304f\u3001\u305d\u308c\u4ee5\u5916\uff08byte\u914d\u5217\u306e\u30a2\u30c9\u30ec\u30b9\u56fa\u5b9a\u3001\u30b9\u30bf\u30c3\u30af\u9818\u57df\u4e0a\u306e\u914d\u5217\u3001\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u306a\u30ef\u30fc\u30af\u9818\u57df\uff09\u306f\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u305d\u308c\u305e\u308c\u306b\u5927\u304d\u306a\u5dee\u7570\u306f\u898b\u53d7\u3051\u3089\u308c\u306a\u304b\u3063\u305f\n\n\u5b9f\u969b\u306e\u3068\u3053\u308d\u3001\u4eca\u56de\u306e\u753b\u50cf\u3067\u3042\u308c\u3070unsafe\u306a\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u306a\u304f\u3066\u30822[ms]\u3082\u304b\u304b\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u308f\u3056\u308f\u3056unsafe\u306a\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u4fa1\u5024\u306f\u4f4e\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305f\u3060\u3057\u3001\u9ad8\u89e3\u50cf\u5ea6\u306a\u753b\u50cf\u3092\u6271\u3063\u305f\u5834\u5408\u3001\u7121\u8996\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308a\u5f97\u307e\u3059\u3057\u3001\u4eca\u56de\u306e\u4e8c\u5024\u5316\u306f\u540c\u4e00\u30d4\u30af\u30bb\u30eb\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f1\u56de\u304d\u308a\u3067\u3057\u305f\u304c\u3001\u753b\u50cf\u51e6\u7406\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u306f\u4f55\u5ea6\u3082\u540c\u3058\u30d4\u30af\u30bb\u30eb\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\n\u30b1\u30fc\u30b9\u6bce\u306b\u691c\u8a3c\u3057\u305f\u3046\u3048\u3067\u3001unsafe\u306e\u5229\u7528\u53ef\u5426\u306f\u5224\u65ad\u3057\u305f\u307b\u3046\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\n\u3067\u306f\u6700\u5f8c\u306b\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\u3092\u5f35\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n# \u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\n## \u5171\u901a\u306e\u4fee\u6b63\u70b9\n\u307e\u305a24bit\u30ab\u30e9\u30fc\u304b\u3089\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5024\u306b\u5909\u63db\u3059\u308bConvertToGrayscale\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\u5909\u66f4\u524d\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u63db\u5143\u306e\u30d4\u30af\u30bb\u30eb\u60c5\u5831\u3092\u683c\u7d0d\u3057\u305fbyte\u914d\u5217\u3092\u6e21\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n```csharp\n        private static int ConvertToGrayscale(byte[] srcPixels, int x, int y, int stride)\n        {\n            int position = x * 3 + stride * y;\n            byte b = srcPixels[position + 0];\n            byte g = srcPixels[position + 1];\n            byte r = srcPixels[position + 2];\n\n            return (r * RedFactor + g * GreenFactor + b * BlueFactor) >> 10;\n        }\n```\n\n\u3053\u306e\u5f15\u6570\u306ebyte\u914d\u5217\u306e\u5ba3\u8a00\u3092byte\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u30e1\u30bd\u30c3\u30c9\u5185\u90e8\u306f\u4e00\u5207\u5909\u66f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u914d\u5217\u3068\u30dd\u30a4\u30f3\u30bf\u306f\u3053\u3053\u3067\u306f\u540c\u3058\u3088\u3046\u306b\u6271\u3048\u307e\u3059\u3002\n\n```csharp\n        private static int ConvertToGrayscale(byte* srcPixels, int x, int y, int stride)\n        {\n            int position = x * 3 + stride * y;\n            byte b = srcPixels[position + 0];\n            byte g = srcPixels[position + 1];\n            byte r = srcPixels[position + 2];\n\n            return (r * RedFactor + g * GreenFactor + b * BlueFactor) >> 10;\n        }\n```\n\n\u305d\u308c\u304b\u3089ConvertToGrayscale\u306e\u547c\u3073\u51fa\u3057\u5074\u3067\u3001byte\u914d\u5217\u3092\u6e21\u3057\u3066\u3044\u308b\u500b\u6240\u3092byte\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u5909\u66f4\u524d\u3067\n\n```csharp\nif (128 <= ConvertToGrayscale(srcPixels, x, y, srcBitmapData.Stride))\n```\n\n\u4ee5\u4e0b\u304c\u5909\u66f4\u5f8c\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```csharp\nbyte* srcPtr\nif (128 <= ConvertToGrayscale(srcPtr, x, y, srcBitmapData.Stride))\n```\n\nsrcPtr\u304cbyte\u30dd\u30a4\u30f3\u30bf\u306b\u3042\u305f\u308a\u307e\u3059\u304c\u3001byte\u30dd\u30a4\u30f3\u30bf\u306e\u53d6\u5f97\u306e\u4ed5\u65b9\u306f\u524d\u8ff0\u306e\u5404\u624b\u6cd5\u3067\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u4ee5\u4e0b\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\n## \u30d0\u30a4\u30c8\u914d\u5217\u306f\u305d\u306e\u307e\u307e\u4f7f\u3046\u304c\u3001\u30a2\u30c9\u30ec\u30b9\u3092\u56fa\u5b9a\uff08fixed\uff09\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\n\nbyte\u914d\u5217\u306e\u30e1\u30e2\u30ea\u7a7a\u9593\u3078\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306fbyte\u914d\u5217srcPixels\u304b\u3089byte\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp\n            unsafe\n            {\n                fixed(byte* srcPtr = srcPixels)\n                {\n                    // \u3053\u306e\u4e2d\u3078\u5177\u4f53\u7684\u306a\u51e6\u7406\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n                }\n            }\n```\n\nunsafe\u306a\u30b3\u30fc\u30c9\u5168\u4f53\u3092unsafe\u30d6\u30ed\u30c3\u30af\u3067\u304f\u304f\u308a\u3001\u305d\u306e\u4e2d\u3067using\u3068\u985e\u4f3c\u3057\u305f\u8a18\u6cd5\u3067fixed\u3092\u5229\u7528\u3057\u3066byte\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u3001\u305d\u306e\u30d6\u30ed\u30c3\u30af\u5185\u3067\u5177\u4f53\u7684\u306a\u51e6\u7406\u3092\u8a18\u8f09\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n## \u30d0\u30a4\u30c8\u914d\u5217\u3092\u30d2\u30fc\u30d7\u3067\u306f\u306a\u304f\u30b9\u30bf\u30c3\u30af\u4e0a\u3078\u78ba\u4fdd\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\n\n\u5909\u66f4\u524d\u306e\u30b3\u30fc\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bbyte\u914d\u5217\u3092\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n```csharp\nbyte[] srcPixels = new byte[srcBitmapData.Stride * src.Height];\n```\n\n\u3053\u3053\u3092stackalloc\u3092\u4f7f\u3063\u3066\u30b9\u30bf\u30c3\u30af\u4e0a\u306b\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001stackalloc\u3067\u53d6\u5f97\u3057\u305f\u30e1\u30e2\u30ea\u3092\u5229\u7528\u3059\u308b\u7b87\u6240\u5168\u4f53\u3092unsafe\u30d6\u30ed\u30c3\u30af\u3067\u304f\u304f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```csharp\nunsafe\n{\n    int srcLength = srcBitmapData.Stride * src.Height;\n    byte* srcPtr = stackalloc byte[srcLength];\n    // \u3044\u304b\u306b\u5177\u4f53\u7684\u306a\u51e6\u7406\u3092\u8a18\u8f09\u3059\u308b\n}\n```\n\n\u307e\u305f\u3001\u5143\u3005\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067BitmapData\u306e\u5024\u3092byte\u914d\u5217\u3078\u30b3\u30d4\u30fc\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n```csharp\nSystem.Runtime.InteropServices.Marshal.Copy(srcBitmapData.Scan0, srcPixels, 0, srcPixels.Length);\n```\n\n\u3053\u308c\u3092byte\u30dd\u30a4\u30f3\u30bf\u3078\u30b3\u30d4\u30fc\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n```csharp\nusing (System.IO.UnmanagedMemoryStream inputStream = new System.IO.UnmanagedMemoryStream((byte*)srcBitmapData.Scan0, srcLength))\nusing (System.IO.UnmanagedMemoryStream outputStream = new System.IO.UnmanagedMemoryStream((byte*)srcPtr, srcLength, srcLength, System.IO.FileAccess.Write))\n{\n    inputStream.CopyTo(outputStream);\n}\n```\n\n\u4ed6\u306b\u3082\u30b3\u30d4\u30fc\u3059\u308b\u65b9\u6cd5\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3053\u308c\u304c\u304a\u624b\u8efd\u3067\u9ad8\u901f\u3067\u3059\u3002\n\u3042\u3068\u306f\u5171\u901a\u306e\u5909\u66f4\u3092\u9069\u7528\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n## \u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u9818\u57df\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u30ef\u30fc\u30af\u306b\u5229\u7528\u3059\u308b\u5834\u5408\n\n\u5909\u66f4\u524d\u306e\u30b3\u30fc\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bbyte\u914d\u5217\u3092\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n```csharp\nbyte[] srcPixels = new byte[srcBitmapData.Stride * src.Height];\n```\n\n\u3053\u3053\u3092Marshal.AllocCoTaskMem\u3092\u4f7f\u3063\u3066\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u9818\u57df\u306b\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001\u4ed6\u3068\u540c\u69d8\u306bunsafe\u30d6\u30ed\u30c3\u30af\u3067\u304f\u304f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```csharp\nunsafe\n{\n    // \u5909\u63db\u5bfe\u8c61\u306e\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u60c5\u5831\u3092\u30d0\u30a4\u30c8\u5217\u3078\u66f8\u304d\u51fa\u3059\n    int srcLength = srcBitmapData.Stride * src.Height;\n    IntPtr srcIntPtr = System.Runtime.InteropServices.Marshal.AllocCoTaskMem(srcLength);\n    try\n    {\n        byte* srcPtr = (byte*)srcIntPtr;\n        // \u3053\u3053\u306b\u51e6\u7406\u3092\u8a18\u8f09\u3059\u308b\n    }\n    finally\n    {\n        System.Runtime.InteropServices.Marshal.FreeCoTaskMem(srcIntPtr);\n    }\n}\n```\n\n\u3053\u306e\u969b\u306b\u7279\u306b\u6ce8\u610f\u3057\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u306e\u306f\u3001AllocCoTaskMem\u3067\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306f\u5fc5\u305aFreeCoTaskMem\u3067\u958b\u653e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u958b\u653e\u6f0f\u308c\u304c\u767a\u751f\u3059\u308b\u3068\u30ea\u30bd\u30fc\u30b9\u304c\u30ea\u30fc\u30af\u3057\u307e\u3059\u3002\n\n\u307e\u305fsrcPtr\u3078\u30ad\u30e3\u30b9\u30c8\u3057\u305f\u306e\u3061\u306b\u3001stackalloc\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u3001BitmapData\u306e\u60c5\u5831\u3092\u30dd\u30a4\u30f3\u30bf\u3078\u30b3\u30d4\u30fc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## BitmapData\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u76f4\u63a5\u8aad\u307f\u66f8\u304d\u3059\u308b\u5834\u5408\n\n\u3042\u308b\u610f\u5473\u3001\u3053\u308c\u304c\u4e00\u756a\u7c21\u5358\u3067\u3059\u3002\nbyte\u914d\u5217\u306e\u5ba3\u8a00\u306a\u3069\u3092\u524a\u9664\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bBitmapData\u306e\u60c5\u5831\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30dd\u30a4\u30f3\u30bf\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\n\n```csharp\nunsafe\n{\n    byte* srcPtr = (byte*)srcBitmapData.Scan0;\n}\n```\n\nBitmapData\u306e\u30e1\u30e2\u30ea\u7a7a\u9593\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u306a\u308b\u306e\u3067\u3001\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\u3082\u5fc5\u8981\u306a\u3044\u305f\u3081\u3001\u30ea\u30bd\u30fc\u30b9\u7684\u306b\u3082\u51e6\u7406\u901f\u5ea6\u7684\u306b\u3082\u5f53\u7136\u306a\u304c\u3089\u4e00\u756a\u6709\u5229\u3067\u3059\u3002\n\u3057\u304b\u3082\u3001\u3042\u3068\u306f\u5171\u901a\u306e\u5909\u66f4\u3092\u884c\u3063\u305fConvertToGrayscale\u3078\u6e21\u3059\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3060\u3051\u3067\u30b3\u30fc\u30c9\u81ea\u4f53\u3082\u4e00\u756a\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\u5b9f\u306e\u3068\u3053\u308d\u3001unsafe\u3092\u5229\u7528\u3057\u306a\u3044\u30b3\u30fc\u30c9\u3088\u308a\u3082\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\n## 24bit\u30ab\u30e9\u30fcBitmap\u306e\u5358\u7d14\u30b3\u30d4\u30fc\n\n### \u914d\u5217\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\n\n```csharp\n        private static void CopyByBiteArray(System.Drawing.Imaging.BitmapData srcBitmapData, System.Drawing.Imaging.BitmapData destBitmapData)\n        {\n            // \u5909\u63db\u5bfe\u8c61\u306e\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u60c5\u5831\u3092\u30d0\u30a4\u30c8\u5217\u3078\u66f8\u304d\u51fa\u3059\n            byte[] srcPixels = new byte[srcBitmapData.Stride * srcBitmapData.Height];\n            System.Runtime.InteropServices.Marshal.Copy(srcBitmapData.Scan0, srcPixels, 0, srcPixels.Length);\n            // \u4e8c\u5024\u753b\u50cf\u3078\u5909\u63db\u3057\u305f\u7d50\u679c\u3092\u4fdd\u7ba1\u3059\u308b\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\n            byte[] destPixels = new byte[destBitmapData.Stride * destBitmapData.Height];\n            for (int y = 0; y < srcBitmapData.Height; y++)\n            {\n                for (int x = 0; x < srcBitmapData.Stride; x++)\n                {\n                    destPixels[destBitmapData.Stride * y + x] = srcPixels[srcBitmapData.Stride * y + x];\n                }\n            }\n            // \u4e8c\u5024\u30c7\u30fc\u30bf\u3092\u4fdd\u7ba1\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u7d50\u679c\u3068\u306a\u308bBitmapData\u3078\u66f8\u304d\u51fa\u3059\n            System.Runtime.InteropServices.Marshal.Copy(destPixels, 0, destBitmapData.Scan0, destPixels.Length);\n        }\n```\n\n### \u76f4\u63a5BitmapData\u3092\u64cd\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\n\n```csharp\n        private static void CopyByPointer(System.Drawing.Imaging.BitmapData srcBitmapData, System.Drawing.Imaging.BitmapData destBitmapData)\n        {\n            unsafe\n            {\n                byte* srcPixels = (byte*)srcBitmapData.Scan0;\n                byte* destPixels = (byte*)destBitmapData.Scan0;\n                for (int y = 0; y < srcBitmapData.Height; y++)\n                {\n                    for (int x = 0; x < srcBitmapData.Stride; x++)\n                    {\n                        destPixels[destBitmapData.Stride * y + x] = srcPixels[srcBitmapData.Stride * y + x];\n                    }\n                }\n            }\n        }\n```\n", "tags": [".NET", "C#", "\u753b\u50cf\u51e6\u7406"]}