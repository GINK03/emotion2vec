{"tags": ["Java", "java8", "\u30c7\u30fc\u30bf\u5206\u6790"], "context": "\n\n\u76ee\u7684\n\n\u91cd\u307f\u4ed8\u304d\u306e\u5fa9\u5143\u62bd\u51fa\u30fb\u975e\u5fa9\u5143\u62bd\u51fa\u306f\u307b\u3068\u3093\u3069\u5b9f\u88c5\u4f8b\u304c\u3042\u307e\u308a\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n\u51fa\u6765\u308b\u3053\u3068\u30fb\u51fa\u6765\u306a\u3044\u3053\u3068\n\n\u51fa\u6765\u308b\u3053\u3068\n\n\u6a19\u672c\u62bd\u51fa\u306e\u8981\u7d20\u306f\u7dcf\u79f0\u578b\u3067\u3001\u3069\u3093\u306a\u8981\u7d20\u3067\u3082Welcome\n\u975e\u5fa9\u5143\u30fb\u5fa9\u5143\u62bd\u51fa\u306e\u3044\u305a\u308c\u306b\u3082\u5bfe\u5fdc\n\n\n\u51fa\u6765\u306a\u3044\u3053\u3068\n\n\u4eca\u306e\u5b9f\u88c5\u3067\u306f\u91cd\u307f\u306f\u5c0f\u6570\u7b2c\u4e09\u4f4d\u307e\u3067\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3002\n\n\n\u6539\u826f\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u91cd\u307f\u306e\u7c92\u5ea6\u3092\u7d30\u304b\u304f\u3059\u308b\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u4f4e\u4e0b\u3059\u308b\u3002\n\n\n\n\n\u5b9f\u88c5\n\n\u6bcd\u96c6\u56e3\u3092\u8868\u3059\u30af\u30e9\u30b9\uff08Population.java\uff09\n\nPopulation.java\npublic class Population<T> {\n    private final ArrayList<T> population;\n    private final Random rand = new Random();\n    private static final BigDecimal ORDER_SHIFT = new BigDecimal(1000);\n\n    private Population(ArrayList<T> population) {\n        this.population = population;\n    }\n\n    public static <T> Population<T> of(Map<T, BigDecimal> pattern) {\n        ArrayList<T> population = new ArrayList<>(1000);\n        for(Map.Entry<T, BigDecimal> entry : pattern.entrySet()){\n            for(int i = 0, j = entry.getValue().multiply(ORDER_SHIFT).intValueExact(); i < j; i++) {\n                population.add(entry.getKey());\n            }\n        }\n\n        Collections.shuffle(population);\n\n        return new Population<T>(population);\n    }\n\n    // \u975e\u5fa9\u5143\u62bd\u51fa\n    public T samplingWithoutReplacement() {\n        int index = rand.nextInt(population.size());\n        T sample = population.get(index);\n        population.removeAll(Collections.singleton(sample));\n        /*\n         * \u540c\u7fa9\u3067\u3059\u304c\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u52a3\u5316\u3057\u305f\u305f\u3081\u4e0d\u63a1\u7528\u3068\u3057\u307e\u3057\u305f\u3002\n         * \uff08\u6bce\u56de\u30e9\u30e0\u30c0\u5f0f\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u5f53\u7136\u304b\u3002\u3002\u3002\uff09\n         * population.removeIf(element -> sample.equals(element))\n         */\n        return sample;\n    }\n\n    // \u5fa9\u5143\u62bd\u51fa\n    public T samplingWithReplacement() {\n        int index = rand.nextInt(population.size());\n        T sample = population.get(index);\n        return sample;\n    }\n}\n\n\n\n\u547c\u3073\u51fa\u3057\u5074\uff08Population.java\uff09\n\nPopulationMain.java\npublic class PopulationMain {\n    public static void main(String[] args) {\n        Map<String, BigDecimal> pattern = new HashMap<String, BigDecimal>() {\n            {\n                put(\"A\", new BigDecimal(\"0.300\"));\n                put(\"B\", new BigDecimal(\"0.200\"));\n                put(\"C\", new BigDecimal(\"0.100\"));\n                put(\"D\", new BigDecimal(\"0.100\"));\n                put(\"E\", new BigDecimal(\"0.100\"));\n                put(\"F\", new BigDecimal(\"0.050\"));\n                put(\"G\", new BigDecimal(\"0.050\"));\n                put(\"H\", new BigDecimal(\"0.050\"));\n                put(\"I\", new BigDecimal(\"0.050\"));\n            }\n        };\n\n        long start = System.currentTimeMillis();\n        Population<String> population = Population.of(pattern);\n\n        List<String> list1 = new ArrayList<>();\n        for (int i = 0; i < 1000000; i++) {\n            list1.add(population.samplingWithReplacement());\n        }\n        list1.stream()\n                .collect(Collectors.groupingBy(s -> s, Collectors.counting()))\n                .forEach((k, v) -> System.out.println(k + \":\" + v));\n\n        List<String> list2 = new ArrayList<>();\n        for (int i = 0; i < 100000; i++) {\n            Population<String> tmpPopulation = Population.of(pattern);\n            list2.add(tmpPopulation.samplingWithoutReplacement());\n        }\n        list2.stream()\n                .collect(Collectors.groupingBy(s -> s, Collectors.counting()))\n                .forEach((k, v) -> System.out.println(k + \":\" + v));\n\n    }\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u5fa9\u5143\u62bd\u51fa\n100\u4e07\u56de\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\n\n\n\u6a19\u672c\n\u91cd\u307f\n\u62bd\u51fa\u6570\n\n\n\n\nA\n0.300\n299645\n\n\nB\n0.200\n200083\n\n\nC\n0.100\n100023\n\n\nD\n0.100\n100277\n\n\nE\n0.100\n99930\n\n\nF\n0.050\n49842\n\n\nG\n0.050\n50015\n\n\nH\n0.050\n49981\n\n\nI\n0.050\n50204\n\n\n\n\n\u975e\u5fa9\u5143\u62bd\u51fa\n\u3053\u3053\u307e\u3067\u66f8\u3044\u3066\u304a\u3044\u3066\u306a\u3093\u3067\u3059\u304c\u3001\u975e\u5fa9\u5143\u62bd\u51fa\u3092\u8a3c\u660e\u3059\u308b\u3053\u3068\u3063\u3066\u51fa\u6765\u307e\u3059\u3067\u3057\u3087\u3046\u304b\u3002\u3002\u3002\n\n\u6240\u611f\n\n\u975e\u5fa9\u5143\u62bd\u51fa\u306e\u8a3c\u660e\u3053\u305d\u51fa\u6765\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5b9f\u73fe\u306f\u51fa\u6765\u3066\u3044\u308b\u306f\u305a\u3002\u3002\u3002\uff1f\n\u611a\u76f4\u306a\u5b9f\u88c5\u3067\u3059\u304c\u3001\u6848\u5916\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3082\u60aa\u304f\u306a\u304f\u3001\u5b9f\u7528\u306b\u582a\u3048\u305d\u3046\u3067\u3059\u3002\n\u6bcd\u96c6\u56e3\u3092\u8868\u3059\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306fArrayList\u3084LinkedList\u3001EclipseCollections\u306eFastList\u3092\u8a66\u3057\u307e\u3057\u305f\u304c\u3001ArrayList\u304c\u4e00\u756a\u9ad8\u901f\u3067\u3057\u305f\u3002\n\n# \u76ee\u7684\n* \u91cd\u307f\u4ed8\u304d\u306e\u5fa9\u5143\u62bd\u51fa\u30fb\u975e\u5fa9\u5143\u62bd\u51fa\u306f\u307b\u3068\u3093\u3069\u5b9f\u88c5\u4f8b\u304c\u3042\u307e\u308a\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n# \u51fa\u6765\u308b\u3053\u3068\u30fb\u51fa\u6765\u306a\u3044\u3053\u3068\n## \u51fa\u6765\u308b\u3053\u3068\n* \u6a19\u672c\u62bd\u51fa\u306e\u8981\u7d20\u306f\u7dcf\u79f0\u578b\u3067\u3001\u3069\u3093\u306a\u8981\u7d20\u3067\u3082Welcome\n* \u975e\u5fa9\u5143\u30fb\u5fa9\u5143\u62bd\u51fa\u306e\u3044\u305a\u308c\u306b\u3082\u5bfe\u5fdc\n\n## \u51fa\u6765\u306a\u3044\u3053\u3068\n* \u4eca\u306e\u5b9f\u88c5\u3067\u306f\u91cd\u307f\u306f\u5c0f\u6570\u7b2c\u4e09\u4f4d\u307e\u3067\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3002\n    * \u6539\u826f\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u91cd\u307f\u306e\u7c92\u5ea6\u3092\u7d30\u304b\u304f\u3059\u308b\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u4f4e\u4e0b\u3059\u308b\u3002\n\n# \u5b9f\u88c5\n## \u6bcd\u96c6\u56e3\u3092\u8868\u3059\u30af\u30e9\u30b9\uff08Population.java\uff09\n```java:Population.java\npublic class Population<T> {\n\tprivate final ArrayList<T> population;\n\tprivate final Random rand = new Random();\n\tprivate static final BigDecimal ORDER_SHIFT = new BigDecimal(1000);\n\n\tprivate Population(ArrayList<T> population) {\n\t\tthis.population = population;\n\t}\n\n\tpublic static <T> Population<T> of(Map<T, BigDecimal> pattern) {\n\t\tArrayList<T> population = new ArrayList<>(1000);\n\t\tfor(Map.Entry<T, BigDecimal> entry : pattern.entrySet()){\n\t\t\tfor(int i = 0, j = entry.getValue().multiply(ORDER_SHIFT).intValueExact(); i < j; i++) {\n\t\t\t\tpopulation.add(entry.getKey());\n\t\t\t}\n\t\t}\n\n\t\tCollections.shuffle(population);\n\n\t\treturn new Population<T>(population);\n\t}\n\n\t// \u975e\u5fa9\u5143\u62bd\u51fa\n\tpublic T samplingWithoutReplacement() {\n\t\tint index = rand.nextInt(population.size());\n\t\tT sample = population.get(index);\n\t\tpopulation.removeAll(Collections.singleton(sample));\n\t\t/*\n\t\t * \u540c\u7fa9\u3067\u3059\u304c\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u52a3\u5316\u3057\u305f\u305f\u3081\u4e0d\u63a1\u7528\u3068\u3057\u307e\u3057\u305f\u3002\n\t\t * \uff08\u6bce\u56de\u30e9\u30e0\u30c0\u5f0f\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u5f53\u7136\u304b\u3002\u3002\u3002\uff09\n\t\t * population.removeIf(element -> sample.equals(element))\n\t\t */\n\t\treturn sample;\n\t}\n\n\t// \u5fa9\u5143\u62bd\u51fa\n\tpublic T samplingWithReplacement() {\n\t\tint index = rand.nextInt(population.size());\n\t\tT sample = population.get(index);\n\t\treturn sample;\n\t}\n}\n```\n\n## \u547c\u3073\u51fa\u3057\u5074\uff08Population.java\uff09\n```java:PopulationMain.java\npublic class PopulationMain {\n\tpublic static void main(String[] args) {\n\t\tMap<String, BigDecimal> pattern = new HashMap<String, BigDecimal>() {\n\t\t\t{\n\t\t\t\tput(\"A\", new BigDecimal(\"0.300\"));\n\t\t\t\tput(\"B\", new BigDecimal(\"0.200\"));\n\t\t\t\tput(\"C\", new BigDecimal(\"0.100\"));\n\t\t\t\tput(\"D\", new BigDecimal(\"0.100\"));\n\t\t\t\tput(\"E\", new BigDecimal(\"0.100\"));\n\t\t\t\tput(\"F\", new BigDecimal(\"0.050\"));\n\t\t\t\tput(\"G\", new BigDecimal(\"0.050\"));\n\t\t\t\tput(\"H\", new BigDecimal(\"0.050\"));\n\t\t\t\tput(\"I\", new BigDecimal(\"0.050\"));\n\t\t\t}\n\t\t};\n\n\t\tlong start = System.currentTimeMillis();\n\t\tPopulation<String> population = Population.of(pattern);\n\n\t\tList<String> list1 = new ArrayList<>();\n\t\tfor (int i = 0; i < 1000000; i++) {\n\t\t\tlist1.add(population.samplingWithReplacement());\n\t\t}\n\t\tlist1.stream()\n\t\t\t\t.collect(Collectors.groupingBy(s -> s, Collectors.counting()))\n\t\t\t\t.forEach((k, v) -> System.out.println(k + \":\" + v));\n\n\t\tList<String> list2 = new ArrayList<>();\n\t\tfor (int i = 0; i < 100000; i++) {\n\t\t\tPopulation<String> tmpPopulation = Population.of(pattern);\n\t\t\tlist2.add(tmpPopulation.samplingWithoutReplacement());\n\t\t}\n\t\tlist2.stream()\n\t\t\t\t.collect(Collectors.groupingBy(s -> s, Collectors.counting()))\n\t\t\t\t.forEach((k, v) -> System.out.println(k + \":\" + v));\n\n\t}\n}\n```\n\n# \u5b9f\u884c\u7d50\u679c\n## \u5fa9\u5143\u62bd\u51fa\n100\u4e07\u56de\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\n| \u6a19\u672c | \u91cd\u307f | \u62bd\u51fa\u6570 |\n|:-:|:-:|:-:|\n| A | 0.300 | 299645 |\n| B | 0.200 | 200083 |\n| C | 0.100 | 100023 |\n| D | 0.100 | 100277 |\n| E | 0.100 | 99930 |\n| F | 0.050 | 49842 |\n| G | 0.050 | 50015 |\n| H | 0.050 | 49981 |\n| I | 0.050 | 50204 |\n\n## \u975e\u5fa9\u5143\u62bd\u51fa\n\u3053\u3053\u307e\u3067\u66f8\u3044\u3066\u304a\u3044\u3066\u306a\u3093\u3067\u3059\u304c\u3001\u975e\u5fa9\u5143\u62bd\u51fa\u3092\u8a3c\u660e\u3059\u308b\u3053\u3068\u3063\u3066\u51fa\u6765\u307e\u3059\u3067\u3057\u3087\u3046\u304b\u3002\u3002\u3002\n\n# \u6240\u611f\n* \u975e\u5fa9\u5143\u62bd\u51fa\u306e\u8a3c\u660e\u3053\u305d\u51fa\u6765\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5b9f\u73fe\u306f\u51fa\u6765\u3066\u3044\u308b\u306f\u305a\u3002\u3002\u3002\uff1f\n* \u611a\u76f4\u306a\u5b9f\u88c5\u3067\u3059\u304c\u3001\u6848\u5916\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3082\u60aa\u304f\u306a\u304f\u3001\u5b9f\u7528\u306b\u582a\u3048\u305d\u3046\u3067\u3059\u3002\n* \u6bcd\u96c6\u56e3\u3092\u8868\u3059\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306fArrayList\u3084LinkedList\u3001EclipseCollections\u306eFastList\u3092\u8a66\u3057\u307e\u3057\u305f\u304c\u3001ArrayList\u304c\u4e00\u756a\u9ad8\u901f\u3067\u3057\u305f\u3002\n"}