{"context": " More than 1 year has passed since last update.\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u306f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u306b\u89e3\u6790\u624b\u6cd5\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u307e\u3067\u672a\u77e5\u3060\u3063\u305f\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u767a\u898b\u3057\u3001\u65b0\u305f\u306a\u77e5\u898b\u3092\u7372\u5f97\u3059\u308b\u3053\u3068\u3067\u3059\u304c\u3001\u3057\u3070\u3057\u3070\u6a5f\u68b0\u5b66\u7fd2\u3068\u5171\u901a\u306e\u6280\u6cd5\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\u3054\u304f\u5358\u7d14\u306a\u8003\u3048\u65b9\u3068\u3057\u3066\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u306e\u7d50\u679c\u3092\u3082\u3063\u3066\u3059\u308c\u3070\u6b8b\u308a\u306e\u305d\u306e\u4ed6\u306e\u30c7\u30fc\u30bf\u3082\u540c\u69d8\u306b\u77e5\u8b58\u306e\u9069\u7528\u304c\u53ef\u80fd\u3067\u3042\u308a\u3001\u7d50\u679c\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6b63\u78ba\u6027\u3092\u5411\u4e0a\u3055\u305b\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u5b66\u5e74\u5168\u4f53\u306e\u751f\u5f92\u306e\u6210\u7e3e\u3092\u5206\u985e\u3059\u308b\n\u524d\u56de\u306f\u751f\u5f92\u306e\u79d1\u76ee\u3054\u3068\u306e\u6210\u7e3e\u304b\u3089\u305d\u306e\u50be\u5411\u3054\u3068\u306b\u73ed\u5206\u3051\u3092\u3059\u308b\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u751f\u5f92\u305f\u3061\u3092\u53d7\u3051\u6301\u3063\u3066\u3044\u308b\u5148\u751f\u306f\u3053\u306e\u73ed\u5206\u3051\u7d50\u679c\u3092\u3082\u3068\u306b\u5b66\u5e74\u5168\u4f53\u306e\u751f\u5f92\u3082\u5206\u985e\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u8b58\u5225\u95a2\u6570\u306e\u4e00\u7a2e\u3067\u3042\u308b\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u30de\u30b7\u30f3\u3068\u3001\u78ba\u7387\u7684\u5206\u985e\u5668\u3067\u3042\u308b\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u306f\u8003\u3048\u65b9\u3082\u624b\u6cd5\u3082\u307e\u3063\u305f\u304f\u5225\u306e\u3082\u306e\u3067\u3059\u3002\n\nscikit-learn \u3092\u4f7f\u3046\nscikit-learn \u306e\u7d20\u6674\u3089\u3057\u3044\u3068\u3053\u308d\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u4e2d\u306e\u3072\u3068\u3064\u3068\u3057\u3066\u7570\u306a\u308b\u624b\u6cd5\u3067\u3082\u4e00\u8cab\u6027\u306e\u3042\u308b API \u304c\u8a2d\u8a08\u3055\u308c\u3066\u304a\u308a\u3001\u3088\u304f\u4f3c\u305f\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u53ef\u80fd\u306a\u3068\u3053\u308d\u3067\u306f\u306a\u3044\u304b\u3068\u7b46\u8005\u306f\u8003\u3048\u3066\u3044\u307e\u3059\u3002\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import svm\n\n# \u30c7\u30fc\u30bf\u306e\u63b2\u8f09\u304c\u5197\u9577\u306a\u306e\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e .csv \u3092\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f\u306b\nfeatures = np.genfromtxt('data.csv', delimiter=',')\n\n# K-means \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u30e9\u30d9\u30eb\u3092\u5206\u985e\u3059\u308b\nkmeans_model = KMeans(n_clusters=3, random_state=10).fit(features)\nlabels = kmeans_model.labels_\n\nclf = GaussianNB() # \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u306b\u3088\u308b\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5206\u985e\u5668\n#clf = svm.SVC(kernel='rbf', C=1) # RBF \u30ab\u30fc\u30cd\u30eb\u306b\u3088\u308b\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u30de\u30b7\u30f3\n\n# \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\u3092\u3082\u3068\u306b\u5206\u985e\u5668\u3092\u935b\u3048\u308b\nclf.fit(features, labels)\n\n# \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf (\u5b66\u5e74\u306e\u4ed6\u306e\u751f\u5f92\u305f\u3061\u306e\u6210\u7e3e) \u3092\u8aad\u307f\u8fbc\u3080\ntest_X = np.genfromtxt('test.csv', delimiter=',')\n\n# \u5206\u985e\u5668\u3067\u5206\u985e\u3059\u308b\nresults = clf.predict(test_X)\n\n# \u7d50\u679c\u3092\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\nranks = []\nfor result, feature in zip(results, test_X):\n    ranks.append([result, feature, feature.sum()])\n\nranks.sort(key=lambda x:(-x[2]))\n\nfor rank in ranks:\n    print(rank)\n\n\n\u307e\u3068\u3081\n\u5b9f\u969b\u306b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u3084\u3063\u3066\u307f\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u306e\u624b\u6cd5\u3067\u30af\u30e9\u30b9\u3054\u3068\u306e\u5883\u754c\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u308f\u308b\u304b\u76ee\u3067\u898b\u3066\u628a\u63e1\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u5148\u306f\u305d\u308c\u305e\u308c\u306e\u7406\u8ad6\u306e\u8a71\u306b\u306a\u3063\u3066\u304f\u308b\u308f\u3051\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u306f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u306b\u89e3\u6790\u624b\u6cd5\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u307e\u3067\u672a\u77e5\u3060\u3063\u305f\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u767a\u898b\u3057\u3001\u65b0\u305f\u306a\u77e5\u898b\u3092\u7372\u5f97\u3059\u308b\u3053\u3068\u3067\u3059\u304c\u3001\u3057\u3070\u3057\u3070\u6a5f\u68b0\u5b66\u7fd2\u3068\u5171\u901a\u306e\u6280\u6cd5\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\n\u3054\u304f\u5358\u7d14\u306a\u8003\u3048\u65b9\u3068\u3057\u3066\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u306e\u7d50\u679c\u3092\u3082\u3063\u3066\u3059\u308c\u3070\u6b8b\u308a\u306e\u305d\u306e\u4ed6\u306e\u30c7\u30fc\u30bf\u3082\u540c\u69d8\u306b\u77e5\u8b58\u306e\u9069\u7528\u304c\u53ef\u80fd\u3067\u3042\u308a\u3001\u7d50\u679c\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6b63\u78ba\u6027\u3092\u5411\u4e0a\u3055\u305b\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\n## \u5b66\u5e74\u5168\u4f53\u306e\u751f\u5f92\u306e\u6210\u7e3e\u3092\u5206\u985e\u3059\u308b\n\n[\u524d\u56de](http://qiita.com/ynakayama/items/1223b6844a1a044e2e3b)\u306f\u751f\u5f92\u306e\u79d1\u76ee\u3054\u3068\u306e\u6210\u7e3e\u304b\u3089\u305d\u306e\u50be\u5411\u3054\u3068\u306b\u73ed\u5206\u3051\u3092\u3059\u308b\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u751f\u5f92\u305f\u3061\u3092\u53d7\u3051\u6301\u3063\u3066\u3044\u308b\u5148\u751f\u306f\u3053\u306e\u73ed\u5206\u3051\u7d50\u679c\u3092\u3082\u3068\u306b\u5b66\u5e74\u5168\u4f53\u306e\u751f\u5f92\u3082\u5206\u985e\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\n\u8b58\u5225\u95a2\u6570\u306e\u4e00\u7a2e\u3067\u3042\u308b\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u30de\u30b7\u30f3\u3068\u3001\u78ba\u7387\u7684\u5206\u985e\u5668\u3067\u3042\u308b\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u306f\u8003\u3048\u65b9\u3082\u624b\u6cd5\u3082\u307e\u3063\u305f\u304f\u5225\u306e\u3082\u306e\u3067\u3059\u3002\n\n### scikit-learn \u3092\u4f7f\u3046\n\nscikit-learn \u306e\u7d20\u6674\u3089\u3057\u3044\u3068\u3053\u308d\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u4e2d\u306e\u3072\u3068\u3064\u3068\u3057\u3066\u7570\u306a\u308b\u624b\u6cd5\u3067\u3082[\u4e00\u8cab\u6027\u306e\u3042\u308b API](http://scikit-learn.org/stable/modules/classes.html) \u304c\u8a2d\u8a08\u3055\u308c\u3066\u304a\u308a\u3001\u3088\u304f\u4f3c\u305f\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u53ef\u80fd\u306a\u3068\u3053\u308d\u3067\u306f\u306a\u3044\u304b\u3068\u7b46\u8005\u306f\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n```py3\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import svm\n\n# \u30c7\u30fc\u30bf\u306e\u63b2\u8f09\u304c\u5197\u9577\u306a\u306e\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e .csv \u3092\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f\u306b\nfeatures = np.genfromtxt('data.csv', delimiter=',')\n\n# K-means \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u30e9\u30d9\u30eb\u3092\u5206\u985e\u3059\u308b\nkmeans_model = KMeans(n_clusters=3, random_state=10).fit(features)\nlabels = kmeans_model.labels_\n\nclf = GaussianNB() # \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u306b\u3088\u308b\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5206\u985e\u5668\n#clf = svm.SVC(kernel='rbf', C=1) # RBF \u30ab\u30fc\u30cd\u30eb\u306b\u3088\u308b\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u30de\u30b7\u30f3\n\n# \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\u3092\u3082\u3068\u306b\u5206\u985e\u5668\u3092\u935b\u3048\u308b\nclf.fit(features, labels)\n\n# \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf (\u5b66\u5e74\u306e\u4ed6\u306e\u751f\u5f92\u305f\u3061\u306e\u6210\u7e3e) \u3092\u8aad\u307f\u8fbc\u3080\ntest_X = np.genfromtxt('test.csv', delimiter=',')\n\n# \u5206\u985e\u5668\u3067\u5206\u985e\u3059\u308b\nresults = clf.predict(test_X)\n\n# \u7d50\u679c\u3092\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\nranks = []\nfor result, feature in zip(results, test_X):\n    ranks.append([result, feature, feature.sum()])\n\nranks.sort(key=lambda x:(-x[2]))\n\nfor rank in ranks:\n    print(rank)\n```\n\n## \u307e\u3068\u3081\n\n\u5b9f\u969b\u306b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u3084\u3063\u3066\u307f\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u306e\u624b\u6cd5\u3067\u30af\u30e9\u30b9\u3054\u3068\u306e\u5883\u754c\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u308f\u308b\u304b\u76ee\u3067\u898b\u3066\u628a\u63e1\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u5148\u306f\u305d\u308c\u305e\u308c\u306e\u7406\u8ad6\u306e\u8a71\u306b\u306a\u3063\u3066\u304f\u308b\u308f\u3051\u3067\u3059\u3002\n", "tags": ["MachineLearning", "scikit-learn", "svm", "NaiveBayes", "Python"]}