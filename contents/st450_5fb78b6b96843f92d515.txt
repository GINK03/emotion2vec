{"context": "\n\n\u306f\u3058\u3081\u306b\nDapper\u3092\u4f7f\u3044\u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\u3092\u3059\u308b\u3068\u304d\u3001\u3044\u3061\u3044\u3061\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001T4\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306b\u30af\u30e9\u30b9\u3092\u751f\u6210\u3067\u304d\u306a\u3044\u304b\u3068\u8abf\u3079\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3002\n\n\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u30b5\u30f3\u30d7\u30eb\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u6587\u5b57\u5217\u306e\u5b9a\u7fa9\nDefinitin.xml\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u6587\u5b57\u5217\u306e\u5b9a\u7fa9\u3092\u884c\u3046\n\nDefinition.xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Definisions>\n  <ConnectionString name=\"CStr1\" string=\"Data Source=LOCALHOST;Initial Catalog=Catalog1;Integrated Security=True\" />\n  <ConnectionString name=\"CStr2\" string=\"Data Source=LOCALHOST;Initial Catalog=Catalog2;Integrated Security=True\" />\n</Definisions>\n\n\n\n\u5404\u30c6\u30fc\u30d6\u30eb\u6bce\u306b\u4f5c\u6210\u3059\u308btt\u30d5\u30a1\u30a4\u30eb\n\u5909\u66f4\u3059\u308b\u7b87\u6240\u306f\u300cTargetDB\u300d\u3001\u300cTable\u300d\u306e\u307f\u3067\u3001\u3067\u304d\u308b\u3060\u3051\u7c21\u7565\u5316\u3092\u884c\u3063\u305f\u3002\n\nEFile.tt\n<#@ template debug=\"true\" hostspecific=\"true\" language=\"C#\" #>\n<#@ output encoding=\"UTF-8\" #>\n<#@ assembly name=\"System.Core\" #>\n<#@ assembly name=\"System.Xml\" #>\n<#@ assembly name=\"System.Xml.Linq\" #>\n<#@ assembly name=\"System.Data\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"System.Text\" #>\n<#@ import namespace=\"System.Collections.Generic\" #>\n<#@ import namespace=\"System.Xml.Linq\" #>\n<#@ import namespace=\"System.Data\" #>\n<#@ import namespace=\"System.Data.SqlClient\" #>\n<#@ output extension=\".cs\" #>\n\n<#\n    var TargetDB = \"CStr1\";\n    var Table = \"\uff25\u30d5\u30a1\u30a4\u30eb\";\n\n#>\n<#@ include file=\"TableToClass.ttinclude\" #>\n\n\n\n\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5171\u901att\u30d5\u30a1\u30a4\u30eb\n\nTableToClass.ttinclude\n<#\n    var file = this.Host.ResolvePath(\"Definition.xml\");\n\n    var xdoc = XDocument.Load(file);\n    var defs = from def in xdoc.Descendants(\"ConnectionString\")\n                select new\n                {\n                    Name = def.Attribute(\"name\").Value,\n                    ConnStr = def.Attribute(\"string\").Value,\n                };\n\n    var connstr = defs.Where(r => r.Name == TargetDB)\n        .Select(r => r.ConnStr).Single();\n\n    var list = new List<Colums>();\n    using (var conn = new SqlConnection(connstr))\n    {\n        conn.Open();\n        var cmd = new SqlCommand(string.Format(Colums.SQL, Table), conn);\n        using (var rd = cmd.ExecuteReader())\n        {\n            while(rd.Read())\n                list.Add(new Colums(rd));\n        }\n    }\n\n#>\n\nnamespace DapperClassLibrary\n{\n    /// <summary>\n    /// <#= Table #>\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\n    /// </summary>\n    public partial class <#= Table #>Table\n    {\n<#\n    foreach(var col in list)\n    {\n#>\n        <#= col.GetProperty() #>\n<#\n    }\n#>\n        public static string SQL =\n@\"\nSELECT <#= string.Join(\",\", list.Select(r => r.COLUMN_NAME).ToArray()) #>\n    FROM <#= Table #>\n\";\n\n        public void SetDataSample(string[] fields)\n        {\n<#\n    var i = 0;\n    foreach(var col in list)\n    {\n#>\n            <#= col.GetSetData(i++) #>\n<#\n    }\n#>\n        }\n    }\n\n}\n\n<#+\n    class Colums {\n        public string TABLE_NAME { get; set; }\n        public string COLUMN_NAME { get; set; }\n        public int ORDINAL_POSITION { get; set; }\n        public string IS_NULLABLE { get; set; }\n        public string DATA_TYPE { get; set; }\n        public int? CHARACTER_MAXIMUM_LENGTH { get; set; }\n        public byte? NUMERIC_PRECISION { get; set; }\n        public int? NUMERIC_SCALE { get; set; }\n\n        public static string SQL =\n@\"\nSELECT TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, IS_NULLABLE, DATA_TYPE, \n    CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = '{0}'\nORDER BY ORDINAL_POSITION\n\";\n\n        public Colums()\n        {\n\n        }\n\n        public Colums(SqlDataReader rd)\n        {\n            TABLE_NAME = rd.GetString(0);\n            COLUMN_NAME = rd.GetString(1);\n            ORDINAL_POSITION = rd.GetInt32(2);\n            IS_NULLABLE = rd.GetString(3);\n            DATA_TYPE = rd.GetString(4);\n            CHARACTER_MAXIMUM_LENGTH = rd.IsDBNull(5) ? \n                (int?)null : rd.GetInt32(5);\n            NUMERIC_PRECISION = rd.IsDBNull(6) ?\n                (byte?)null : rd.GetByte(6);\n            NUMERIC_SCALE = rd.IsDBNull(7) ?\n                (int?)null : rd.GetInt32(7);\n        }\n\n        public bool IsNullable()\n        {\n            var type = dicType[DATA_TYPE];\n\n            return (dicNullabel[type] && IS_NULLABLE == \"YES\");\n        }\n\n        public string GetSetData(int i)\n        {\n            var type = dicType[DATA_TYPE];\n\n            var fld = string.Format(\"fields[{0}]\", i);\n\n            if (!IsNullable())\n            {\n                if (type == \"string\")\n                    return string.Format(\"{0} = {1};\", COLUMN_NAME, fld);\n\n                return string.Format(\"{0} = {1}.Parse({2});\", \n                    COLUMN_NAME, type, fld);\n            }\n\n            return string.Format(\n                \"{0} = string.IsNullOrEmpty({2}) ? ({1}?)null : {1}.Parse({2});\",\n                COLUMN_NAME, type, fld);\n        }\n\n        public string GetProperty()\n        {\n            var type = dicType[DATA_TYPE];\n\n            return string.Format(\"public {0}{1} {2} \",\n                type, GetNullable(), COLUMN_NAME) + \"{ get; set; }\";\n        }\n\n        private string GetNullable()\n        {\n            return IsNullable() ? \"?\" : \"\";\n        }\n\n        private static Dictionary<string, bool> dicNullabel =\n                new Dictionary<string, bool>()\n        {\n            {\"string\", false},\n            {\"int\", true},\n            {\"byte\", true},\n            {\"short\", true},\n            {\"decimal\", true},\n            {\"bool\", true},\n        };\n\n        private static Dictionary<string, string> dicType =\n                new Dictionary<string, string>()\n        {\n            {\"char\", \"string\"},\n            {\"varchar\", \"string\"},\n            {\"nvarchar\", \"string\"},\n            {\"nchar\", \"string\"},\n            {\"int\", \"int\"},\n            {\"tinyint\", \"byte\"},\n            {\"smallint\", \"short\"},\n            {\"decimal\", \"decimal\"},\n            {\"bit\", \"bool\"},\n        };\n    }\n#>\n\n\n\n\u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\n\nEFile.cs\nnamespace DapperClassLibrary\n{\n    /// <summary>\n    /// EFile\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\n    /// </summary>\n    public partial class EFileTable\n    {\n        public string \u65bd\u8a2d\u30b3\u30fc\u30c9 { get; set; }\n        public string \u30c7\u30fc\u30bf\u8b58\u5225\u756a\u53f7 { get; set; }\n        public string \u9000\u9662\u5e74\u6708\u65e5 { get; set; }\n        public string \u5165\u9662\u5e74\u6708\u65e5 { get; set; }\n        public string \u30c7\u30fc\u30bf\u533a\u5206 { get; set; }\n        public decimal? \u9806\u5e8f\u756a\u53f7 { get; set; }\n        public string \u75c5\u9662\u70b9\u6570\u30de\u30b9\u30bf\u30b3\u30fc\u30c9 { get; set; }\n        public string \u30ec\u30bb\u30d7\u30c8\u96fb\u7b97\u30b3\u30fc\u30c9 { get; set; }\n        public string \u89e3\u91c8\u756a\u53f7 { get; set; }\n        public string \u8a3a\u7642\u884c\u70ba\u540d\u79f0 { get; set; }\n        public int? \u884c\u70ba\u70b9\u6570 { get; set; }\n        public int? \u884c\u70ba\u85ac\u5264\u6599 { get; set; }\n        public int? \u884c\u70ba\u6750\u6599\u6599 { get; set; }\n        public string \u5186\u70b9\u533a\u5206 { get; set; }\n        public short? \u884c\u70ba\u56de\u6570 { get; set; }\n        public string \u4fdd\u967a\u8005\u756a\u53f7 { get; set; }\n        public string \u30ec\u30bb\u30d7\u30c8\u7a2e\u5225\u30b3\u30fc\u30c9 { get; set; }\n        public string \u5b9f\u65bd\u5e74\u6708\u65e5 { get; set; }\n        public string \u30ec\u30bb\u30d7\u30c8\u79d1\u533a\u5206 { get; set; }\n        public string \u8a3a\u7642\u79d1\u533a\u5206 { get; set; }\n        public string \u533b\u5e2b\u30b3\u30fc\u30c9 { get; set; }\n        public string \u75c5\u68df\u30b3\u30fc\u30c9 { get; set; }\n        public string \u75c5\u68df\u533a\u5206 { get; set; }\n        public string \u5165\u5916\u533a\u5206 { get; set; }\n        public string \u65bd\u8a2d\u30bf\u30a4\u30d7 { get; set; }\n        public string \u8a3a\u7642\u5e74\u6708 { get; set; }\n        public int? \u884c { get; set; }\n        public static string SQL =\n@\"\nSELECT \u65bd\u8a2d\u30b3\u30fc\u30c9,\u30c7\u30fc\u30bf\u8b58\u5225\u756a\u53f7,\u9000\u9662\u5e74\u6708\u65e5,\u5165\u9662\u5e74\u6708\u65e5,\u30c7\u30fc\u30bf\u533a\u5206,\n        \u9806\u5e8f\u756a\u53f7,\u75c5\u9662\u70b9\u6570\u30de\u30b9\u30bf\u30b3\u30fc\u30c9,\u30ec\u30bb\u30d7\u30c8\u96fb\u7b97\u30b3\u30fc\u30c9,\u89e3\u91c8\u756a\u53f7,\n        \u8a3a\u7642\u884c\u70ba\u540d\u79f0,\u884c\u70ba\u70b9\u6570,\u884c\u70ba\u85ac\u5264\u6599,\u884c\u70ba\u6750\u6599\u6599,\u5186\u70b9\u533a\u5206,\u884c\u70ba\u56de\u6570,\n        \u4fdd\u967a\u8005\u756a\u53f7,\u30ec\u30bb\u30d7\u30c8\u7a2e\u5225\u30b3\u30fc\u30c9,\u5b9f\u65bd\u5e74\u6708\u65e5,\u30ec\u30bb\u30d7\u30c8\u79d1\u533a\u5206,\n        \u8a3a\u7642\u79d1\u533a\u5206,\u533b\u5e2b\u30b3\u30fc\u30c9,\u75c5\u68df\u30b3\u30fc\u30c9,\u75c5\u68df\u533a\u5206,\u5165\u5916\u533a\u5206,\u65bd\u8a2d\u30bf\u30a4\u30d7,\n        \u8a3a\u7642\u5e74\u6708,\u884c\n    FROM \uff25\u30d5\u30a1\u30a4\u30eb\n\";\n\n        public void SetDataSample(string[] fields)\n        {\n            \u65bd\u8a2d\u30b3\u30fc\u30c9 = fields[0];\n            \u30c7\u30fc\u30bf\u8b58\u5225\u756a\u53f7 = fields[1];\n            \u9000\u9662\u5e74\u6708\u65e5 = fields[2];\n            \u5165\u9662\u5e74\u6708\u65e5 = fields[3];\n            \u30c7\u30fc\u30bf\u533a\u5206 = fields[4];\n            \u9806\u5e8f\u756a\u53f7 = string.IsNullOrEmpty(fields[5]) ? (decimal?)null : decimal.Parse(fields[5]);\n            \u75c5\u9662\u70b9\u6570\u30de\u30b9\u30bf\u30b3\u30fc\u30c9 = fields[6];\n            \u30ec\u30bb\u30d7\u30c8\u96fb\u7b97\u30b3\u30fc\u30c9 = fields[7];\n            \u89e3\u91c8\u756a\u53f7 = fields[8];\n            \u8a3a\u7642\u884c\u70ba\u540d\u79f0 = fields[9];\n            \u884c\u70ba\u70b9\u6570 = string.IsNullOrEmpty(fields[10]) ? (int?)null : int.Parse(fields[10]);\n            \u884c\u70ba\u85ac\u5264\u6599 = string.IsNullOrEmpty(fields[11]) ? (int?)null : int.Parse(fields[11]);\n            \u884c\u70ba\u6750\u6599\u6599 = string.IsNullOrEmpty(fields[12]) ? (int?)null : int.Parse(fields[12]);\n            \u5186\u70b9\u533a\u5206 = fields[13];\n            \u884c\u70ba\u56de\u6570 = string.IsNullOrEmpty(fields[14]) ? (short?)null : short.Parse(fields[14]);\n            \u4fdd\u967a\u8005\u756a\u53f7 = fields[15];\n            \u30ec\u30bb\u30d7\u30c8\u7a2e\u5225\u30b3\u30fc\u30c9 = fields[16];\n            \u5b9f\u65bd\u5e74\u6708\u65e5 = fields[17];\n            \u30ec\u30bb\u30d7\u30c8\u79d1\u533a\u5206 = fields[18];\n            \u8a3a\u7642\u79d1\u533a\u5206 = fields[19];\n            \u533b\u5e2b\u30b3\u30fc\u30c9 = fields[20];\n            \u75c5\u68df\u30b3\u30fc\u30c9 = fields[21];\n            \u75c5\u68df\u533a\u5206 = fields[22];\n            \u5165\u5916\u533a\u5206 = fields[23];\n            \u65bd\u8a2d\u30bf\u30a4\u30d7 = fields[24];\n            \u8a3a\u7642\u5e74\u6708 = fields[25];\n            \u884c = string.IsNullOrEmpty(fields[26]) ? (int?)null : int.Parse(fields[26]);\n        }\n    }\n}\n\n\n\n\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u304b\u3089\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u30b5\u30f3\u30d7\u30eb\n\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306f\u8907\u6570\u306e\u7d50\u679c\u3092\u8fd4\u3057\u305f\u308a\u3001\u5143\u30c6\u30fc\u30d6\u30eb\u3068\u7570\u306a\u308b\u3053\u3068\u304b\u3089\u3001\u76f4\u63a5\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u304b\u3089\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3002\n\n\u5404\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u6bce\u306b\u4f5c\u6210\u3059\u308btt\u30d5\u30a1\u30a4\u30eb\n\nSpResultFromProc\u5fc5\u8981\u5ea6.tt\n<#@ template debug=\"true\" hostspecific=\"true\" language=\"C#\" #>\n<#@ output encoding=\"UTF-8\" #>\n<#@ assembly name=\"System.Core\" #>\n<#@ assembly name=\"System.Xml\" #>\n<#@ assembly name=\"System.Xml.Linq\" #>\n<#@ assembly name=\"System.Data\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"System.Text\" #>\n<#@ import namespace=\"System.Collections.Generic\" #>\n<#@ import namespace=\"System.Xml.Linq\" #>\n<#@ import namespace=\"System.Data\" #>\n<#@ import namespace=\"System.Data.SqlClient\" #>\n<#@ output extension=\".cs\" #>\n\n<#\n    var TargetDB = \"CStr1\";\n    var SpName = \"Proc\u5fc5\u8981\u5ea6\";\n    // \u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30b8\u30e3\u30fc\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30bf\u3092\u6307\u5b9a\n    var AddParams = new Action<SqlCommand>(p =>\n    {\n        p.Parameters.Add(new SqlParameter(\"ymd\", \"20160710\"));\n    });\n    var Folder = \"\";\n#>\n<#@ include file=\"SpToClass.ttinclude\" #>\n\n\n\n\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u304b\u3089\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5171\u901att\u30d5\u30a1\u30a4\u30eb\n\nSpToClass.ttinclude\n<#\n    var file = this.Host.ResolvePath(\"Definition.xml\");\n\n    var xdoc = XDocument.Load(file);\n    var defs = from def in xdoc.Descendants(\"ConnectionString\")\n                select new\n                {\n                    Name = def.Attribute(\"name\").Value,\n                    ConnStr = def.Attribute(\"string\").Value,\n                };\n\n    var connstr = defs.Where(r => r.Name == TargetDB)\n        .Select(r => r.ConnStr).Single();\n\n    var list = new List<Colums[]>();\n    using (var conn = new SqlConnection(connstr))\n    {\n        conn.Open();\n\n        var cmd = new SqlCommand(SpName, conn);\n        cmd.CommandType = CommandType.StoredProcedure;\n        cmd.CommandTimeout = 50000;\n        AddParams(cmd);\n\n        using (var rd = cmd.ExecuteReader())\n        {\n            Console.WriteLine(rd.FieldCount);\n            do\n            {\n                var st = rd.GetSchemaTable();\n                list.Add(Enumerable.Range(0, rd.FieldCount)\n                    .Select(i => new Colums(rd, i, st.Rows[i])).ToArray());\n            } \n            while (rd.NextResult());\n        }\n    }\n\n    var resultCount = 0;\n#>\nusing System;\n\nnamespace DapperClassLibrary<#= Folder #>\n{\n<#\n    foreach(var arr in list)\n    {\n#>\n    /// <summary>\n    /// <#= SpName #>\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\n    /// </summary>\n    public partial class SpResultFrom<#= SpName #><#= resultCount++ #>\n    {\n<#\n        foreach(var col in arr)\n        {\n#>\n        <#= col.GetProperty() #>\n<#\n        }\n#>\n\n        public static string SQL = @\"<#= SpName #>\";\n\n        /*\n        declare @temp table (\n<#\n        var arrFld = string.Join(\",\\n\", arr.Select(r => r.GetFieldDef()).ToArray()).Split('\\n');\n\n        foreach(var col in arrFld)\n        {\n#>\n            <#= col #>\n<#\n        }\n#>\n        );\n        */\n    }\n<#\n    }\n#>\n\n}\n\n<#+\n    class Colums\n    {\n        public string ColumnName { get; set; }\n        public Type Type { get; set; }\n        public string DbType { get; set; }\n        public DataRow Row { get; set; }\n\n        public Colums()\n        {\n\n        }\n\n        public Colums(SqlDataReader rd, int i, DataRow row)\n        {\n            ColumnName = rd.GetName(i);\n            Type = rd.GetFieldType(i);\n            Row = row;\n            DbType = Row[\"DataTypeName\"].ToString();\n        }\n\n        public bool IsNullable()\n        {\n            var type = dicType[DbType];\n            var IsNull = (bool)Row[\"AllowDBNull\"];\n            return (dicNullabel[type] && IsNull);\n        }\n\n        public string GetProperty()\n        {\n            var type = dicType[DbType];\n\n            return string.Format(\"public {0}{1} {2} \",\n                type, GetNullable(), ColumnName) + \"{ get; set; }\";\n        }\n\n        public string GetFieldDef()\n        {\n            return string.Format(\"{0}{1}\", \n                    dicDdlFld[Row[\"DataTypeName\"].ToString()](this),\n                    IsNullable() ? \"\" : \" NOT NULL\");\n        }\n\n        private string GetNullable()\n        {\n            return IsNullable() ? \"?\" : \"\";\n        }\n\n        private static Dictionary<string, Func<Colums, string>> dicDdlFld =\n                new Dictionary<string, Func<Colums, string>>()\n        {\n            {\"char\", m => string.Format(\"[{0}] {1}({2})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"ColumnSize\"]) },\n            {\"varchar\", m => string.Format(\"[{0}] {1}({2})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"ColumnSize\"]) },\n            {\"nvarchar\", m => string.Format(\"[{0}] {1}({2})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"ColumnSize\"]) },\n            {\"nchar\", m => string.Format(\"[{0}] {1}({2})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"ColumnSize\"])},\n            {\"int\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"tinyint\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"smallint\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"bigint\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"decimal\", m => string.Format(\"[{0}] {1}({2},{3})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"NumericPrecision\"], m.Row[\"NumericScale\"])},\n            {\"bit\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"date\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"datetime\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n        };\n\n        private static Dictionary<string, bool> dicNullabel =\n                new Dictionary<string, bool>()\n        {\n            {\"string\", false},\n            {\"int\", true},\n            {\"long\", true},\n            {\"byte\", true},\n            {\"short\", true},\n            {\"decimal\", true},\n            {\"bool\", true},\n            {\"DateTime\", true},\n        };\n\n        private static Dictionary<string, string> dicType =\n                new Dictionary<string, string>()\n        {\n            {\"char\", \"string\"},\n            {\"varchar\", \"string\"},\n            {\"nvarchar\", \"string\"},\n            {\"nchar\", \"string\"},\n            {\"int\", \"int\"},\n            {\"tinyint\", \"byte\"},\n            {\"smallint\", \"short\"},\n            {\"bigint\", \"long\"},\n            {\"decimal\", \"decimal\"},\n            {\"bit\", \"bool\"},\n            {\"date\", \"DateTime\"},\n            {\"datetime\", \"DateTime\"},\n        };\n    }\n#>\n\n\n\n\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30b8\u30e3\u30fc\u304b\u3089\u3067\u304d\u305f\u30af\u30e9\u30b9\n\nSpResultFromProc\u5fc5\u8981\u5ea6.cs\nusing System;\n\nnamespace DapperClassLibrary\n{\n    /// <summary>\n    /// Proc\u5fc5\u8981\u5ea628H\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\n    /// </summary>\n    public partial class SpResultFromProc\u5fc5\u8981\u5ea60\n    {\n        public DateTime? \u5bfe\u8c61\u65e5 { get; set; }\n        public string \u60a3\u8005\u540d { get; set; }\n        public int? \u5e74\u9f62 { get; set; }\n        public string WARDCODE { get; set; }\n        public string ROOMCODE { get; set; }\n        public decimal? \u5275\u50b7\u51e6\u7f6e { get; set; }\n        public decimal? \u547c\u5438\u30b1\u30a2 { get; set; }\n        public decimal? \u70b9\u6ef4\u30e9\u30a4\u30f3 { get; set; }\n        public decimal? \u5fc3\u96fb\u56f3 { get; set; }\n        public decimal? \u30b7\u30ea\u30f3\u30b8\u30dd\u30f3\u30d7 { get; set; }\n        public decimal? \u8f38\u8840 { get; set; }\n        public decimal? \u5c02\u9580\u7684\u6cbb\u7642 { get; set; }\n        public decimal? \u6551\u6025\u5165\u9662 { get; set; }\n        public decimal? \u5bdd\u8fd4\u308a { get; set; }\n        public decimal? \u79fb\u8b72 { get; set; }\n        public decimal? \u53e3\u8154\u6e05\u6f54 { get; set; }\n        public decimal? \u98df\u4e8b\u6442\u53d6 { get; set; }\n        public decimal? \u8863\u670d\u306e\u7740\u8131 { get; set; }\n        public decimal? \u8a3a\u7642\u6307\u793a { get; set; }\n        public decimal? \u5371\u967a\u884c\u52d5 { get; set; }\n        public decimal? \u958b\u982d\u624b\u8853 { get; set; }\n        public decimal? \u958b\u80f8\u624b\u8853 { get; set; }\n        public decimal? \u958b\u8179\u624b\u8853 { get; set; }\n        public decimal? \u9aa8\u624b\u8853 { get; set; }\n        public decimal? \u8179\u8154\u93e1\u624b\u8853 { get; set; }\n        public decimal? \u5168\u8eab\u9ebb\u9154\u624b\u8853 { get; set; }\n        public decimal? \u6551\u547d\u5185\u79d1\u6cbb\u7642 { get; set; }\n        public decimal? A { get; set; }\n        public decimal? B { get; set; }\n        public decimal? C { get; set; }\n        public int? \u5165\u9662\u66a6\u65e5 { get; set; }\n        public string \u57fa\u6e96 { get; set; }\n        public byte? T\u5275\u50b7\u51e6\u7f6e { get; set; }\n        public byte? T\u5c40\u6240\u9670\u5727\u9589\u9396\u51e6\u7f6e { get; set; }\n        public byte? T\u91cd\u5ea6\u8925\u7621\u51e6\u7f6e { get; set; }\n        public byte? T\u4eba\u5de5\u547c\u5438 { get; set; }\n        public byte? T\u9178\u7d20\u5438\u5165 { get; set; }\n        public byte? T\u5580\u75f0\u5438\u5f15 { get; set; }\n        public byte? T\u547c\u5438\u5fc3\u62cd\u76e3\u8996 { get; set; }\n        public byte? T\u8f38\u8840 { get; set; }\n        public byte? T\u30b7\u30ea\u30f3\u30b8\u30dd\u30f3\u30d7 { get; set; }\n        public byte? T\u6551\u6025\u5165\u9662\u5f53\u65e5 { get; set; }\n        public byte? T\u6551\u6025\u5165\u9662\u7fcc\u65e5 { get; set; }\n\n        public static string SQL = @\"Proc\u5fc5\u8981\u5ea6\";\n\n        /*\n        declare @temp table (\n            [\u5bfe\u8c61\u65e5] date,\n            [\u60a3\u8005\u540d] nvarchar(42) NOT NULL,\n            [\u5e74\u9f62] int,\n            [WARDCODE] varchar(4) NOT NULL,\n            [ROOMCODE] char(4) NOT NULL,\n            [\u5275\u50b7\u51e6\u7f6e] decimal(38,4),\n            [\u547c\u5438\u30b1\u30a2] decimal(38,4),\n            [\u70b9\u6ef4\u30e9\u30a4\u30f3] decimal(38,4),\n            [\u5fc3\u96fb\u56f3] decimal(38,4),\n            [\u30b7\u30ea\u30f3\u30b8\u30dd\u30f3\u30d7] decimal(38,4),\n            [\u8f38\u8840] decimal(38,4),\n            [\u5c02\u9580\u7684\u6cbb\u7642] decimal(38,4),\n            [\u6551\u6025\u5165\u9662] decimal(38,4),\n            [\u5bdd\u8fd4\u308a] decimal(38,4),\n            [\u79fb\u8b72] decimal(38,4),\n            [\u53e3\u8154\u6e05\u6f54] decimal(38,4),\n            [\u98df\u4e8b\u6442\u53d6] decimal(38,4),\n            [\u8863\u670d\u306e\u7740\u8131] decimal(38,4),\n            [\u8a3a\u7642\u6307\u793a] decimal(38,4),\n            [\u5371\u967a\u884c\u52d5] decimal(38,4),\n            [\u958b\u982d\u624b\u8853] decimal(38,4),\n            [\u958b\u80f8\u624b\u8853] decimal(38,4),\n            [\u958b\u8179\u624b\u8853] decimal(38,4),\n            [\u9aa8\u624b\u8853] decimal(38,4),\n            [\u8179\u8154\u93e1\u624b\u8853] decimal(38,4),\n            [\u5168\u8eab\u9ebb\u9154\u624b\u8853] decimal(38,4),\n            [\u6551\u547d\u5185\u79d1\u6cbb\u7642] decimal(38,4),\n            [A] decimal(38,4),\n            [B] decimal(38,4),\n            [C] decimal(38,4),\n            [\u5165\u9662\u66a6\u65e5] int,\n            [\u57fa\u6e96] varchar(2) NOT NULL,\n            [T\u5275\u50b7\u51e6\u7f6e] tinyint,\n            [T\u5c40\u6240\u9670\u5727\u9589\u9396\u51e6\u7f6e] tinyint,\n            [T\u91cd\u5ea6\u8925\u7621\u51e6\u7f6e] tinyint,\n            [T\u4eba\u5de5\u547c\u5438] tinyint,\n            [T\u9178\u7d20\u5438\u5165] tinyint,\n            [T\u5580\u75f0\u5438\u5f15] tinyint,\n            [T\u547c\u5438\u5fc3\u62cd\u76e3\u8996] tinyint,\n            [T\u8f38\u8840] tinyint,\n            [T\u30b7\u30ea\u30f3\u30b8\u30dd\u30f3\u30d7] tinyint,\n            [T\u6551\u6025\u5165\u9662\u5f53\u65e5] tinyint,\n            [T\u6551\u6025\u5165\u9662\u7fcc\u65e5] tinyint\n        );\n        */\n    }\n\n}\n\n\n#\u306f\u3058\u3081\u306b\nDapper\u3092\u4f7f\u3044\u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\u3092\u3059\u308b\u3068\u304d\u3001\u3044\u3061\u3044\u3061\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001T4\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306b\u30af\u30e9\u30b9\u3092\u751f\u6210\u3067\u304d\u306a\u3044\u304b\u3068\u8abf\u3079\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3002\n\n#\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u30b5\u30f3\u30d7\u30eb\n##\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u6587\u5b57\u5217\u306e\u5b9a\u7fa9\nDefinitin.xml\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u6587\u5b57\u5217\u306e\u5b9a\u7fa9\u3092\u884c\u3046\n\n```xml:Definition.xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Definisions>\n  <ConnectionString name=\"CStr1\" string=\"Data Source=LOCALHOST;Initial Catalog=Catalog1;Integrated Security=True\" />\n  <ConnectionString name=\"CStr2\" string=\"Data Source=LOCALHOST;Initial Catalog=Catalog2;Integrated Security=True\" />\n</Definisions>\n```\n##\u5404\u30c6\u30fc\u30d6\u30eb\u6bce\u306b\u4f5c\u6210\u3059\u308btt\u30d5\u30a1\u30a4\u30eb\n\u5909\u66f4\u3059\u308b\u7b87\u6240\u306f\u300cTargetDB\u300d\u3001\u300cTable\u300d\u306e\u307f\u3067\u3001\u3067\u304d\u308b\u3060\u3051\u7c21\u7565\u5316\u3092\u884c\u3063\u305f\u3002\n\n```text:EFile.tt\n<#@ template debug=\"true\" hostspecific=\"true\" language=\"C#\" #>\n<#@ output encoding=\"UTF-8\" #>\n<#@ assembly name=\"System.Core\" #>\n<#@ assembly name=\"System.Xml\" #>\n<#@ assembly name=\"System.Xml.Linq\" #>\n<#@ assembly name=\"System.Data\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"System.Text\" #>\n<#@ import namespace=\"System.Collections.Generic\" #>\n<#@ import namespace=\"System.Xml.Linq\" #>\n<#@ import namespace=\"System.Data\" #>\n<#@ import namespace=\"System.Data.SqlClient\" #>\n<#@ output extension=\".cs\" #>\n\n<#\n    var TargetDB = \"CStr1\";\n    var Table = \"\uff25\u30d5\u30a1\u30a4\u30eb\";\n\n#>\n<#@ include file=\"TableToClass.ttinclude\" #>\n```\n##\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5171\u901att\u30d5\u30a1\u30a4\u30eb\n\n```text:TableToClass.ttinclude\n<#\n    var file = this.Host.ResolvePath(\"Definition.xml\");\n\n    var xdoc = XDocument.Load(file);\n    var defs = from def in xdoc.Descendants(\"ConnectionString\")\n                select new\n                {\n                    Name = def.Attribute(\"name\").Value,\n                    ConnStr = def.Attribute(\"string\").Value,\n                };\n\n    var connstr = defs.Where(r => r.Name == TargetDB)\n        .Select(r => r.ConnStr).Single();\n\n\tvar list = new List<Colums>();\n    using (var conn = new SqlConnection(connstr))\n    {\n        conn.Open();\n        var cmd = new SqlCommand(string.Format(Colums.SQL, Table), conn);\n        using (var rd = cmd.ExecuteReader())\n        {\n            while(rd.Read())\n\t\t\t\tlist.Add(new Colums(rd));\n\t\t}\n\t}\n\n#>\n\nnamespace DapperClassLibrary\n{\n    /// <summary>\n    /// <#= Table #>\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\n    /// </summary>\n    public partial class <#= Table #>Table\n    {\n<#\n    foreach(var col in list)\n    {\n#>\n\t\t<#= col.GetProperty() #>\n<#\n    }\n#>\n\t\tpublic static string SQL =\n@\"\nSELECT <#= string.Join(\",\", list.Select(r => r.COLUMN_NAME).ToArray()) #>\n\tFROM <#= Table #>\n\";\n\n\t\tpublic void SetDataSample(string[] fields)\n\t\t{\n<#\n\tvar i = 0;\n    foreach(var col in list)\n    {\n#>\n\t\t\t<#= col.GetSetData(i++) #>\n<#\n    }\n#>\n\t\t}\n    }\n\n}\n\n<#+\n    class Colums {\n        public string TABLE_NAME { get; set; }\n        public string COLUMN_NAME { get; set; }\n        public int ORDINAL_POSITION { get; set; }\n        public string IS_NULLABLE { get; set; }\n        public string DATA_TYPE { get; set; }\n        public int? CHARACTER_MAXIMUM_LENGTH { get; set; }\n        public byte? NUMERIC_PRECISION { get; set; }\n        public int? NUMERIC_SCALE { get; set; }\n\n        public static string SQL =\n@\"\nSELECT TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, IS_NULLABLE, DATA_TYPE, \n    CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = '{0}'\nORDER BY ORDINAL_POSITION\n\";\n\n        public Colums()\n        {\n\n        }\n\n        public Colums(SqlDataReader rd)\n        {\n            TABLE_NAME = rd.GetString(0);\n            COLUMN_NAME = rd.GetString(1);\n            ORDINAL_POSITION = rd.GetInt32(2);\n            IS_NULLABLE = rd.GetString(3);\n            DATA_TYPE = rd.GetString(4);\n            CHARACTER_MAXIMUM_LENGTH = rd.IsDBNull(5) ? \n                (int?)null : rd.GetInt32(5);\n            NUMERIC_PRECISION = rd.IsDBNull(6) ?\n                (byte?)null : rd.GetByte(6);\n            NUMERIC_SCALE = rd.IsDBNull(7) ?\n                (int?)null : rd.GetInt32(7);\n        }\n\n        public bool IsNullable()\n        {\n            var type = dicType[DATA_TYPE];\n\n            return (dicNullabel[type] && IS_NULLABLE == \"YES\");\n        }\n\n        public string GetSetData(int i)\n        {\n            var type = dicType[DATA_TYPE];\n\n            var fld = string.Format(\"fields[{0}]\", i);\n\n            if (!IsNullable())\n            {\n                if (type == \"string\")\n                    return string.Format(\"{0} = {1};\", COLUMN_NAME, fld);\n\n                return string.Format(\"{0} = {1}.Parse({2});\", \n                    COLUMN_NAME, type, fld);\n            }\n\n            return string.Format(\n                \"{0} = string.IsNullOrEmpty({2}) ? ({1}?)null : {1}.Parse({2});\",\n                COLUMN_NAME, type, fld);\n        }\n\n        public string GetProperty()\n        {\n            var type = dicType[DATA_TYPE];\n\n            return string.Format(\"public {0}{1} {2} \",\n                type, GetNullable(), COLUMN_NAME) + \"{ get; set; }\";\n        }\n\n        private string GetNullable()\n        {\n            return IsNullable() ? \"?\" : \"\";\n        }\n\n        private static Dictionary<string, bool> dicNullabel =\n                new Dictionary<string, bool>()\n        {\n            {\"string\", false},\n            {\"int\", true},\n            {\"byte\", true},\n            {\"short\", true},\n            {\"decimal\", true},\n            {\"bool\", true},\n        };\n\n        private static Dictionary<string, string> dicType =\n                new Dictionary<string, string>()\n        {\n            {\"char\", \"string\"},\n            {\"varchar\", \"string\"},\n            {\"nvarchar\", \"string\"},\n            {\"nchar\", \"string\"},\n            {\"int\", \"int\"},\n            {\"tinyint\", \"byte\"},\n            {\"smallint\", \"short\"},\n            {\"decimal\", \"decimal\"},\n            {\"bit\", \"bool\"},\n        };\n    }\n#>\n```\n##\u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\n\n```csharp:EFile.cs\nnamespace DapperClassLibrary\n{\n\t/// <summary>\n    /// EFile\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\n    /// </summary>\n    public partial class EFileTable\n    {\n\t\tpublic string \u65bd\u8a2d\u30b3\u30fc\u30c9 { get; set; }\n\t\tpublic string \u30c7\u30fc\u30bf\u8b58\u5225\u756a\u53f7 { get; set; }\n\t\tpublic string \u9000\u9662\u5e74\u6708\u65e5 { get; set; }\n\t\tpublic string \u5165\u9662\u5e74\u6708\u65e5 { get; set; }\n\t\tpublic string \u30c7\u30fc\u30bf\u533a\u5206 { get; set; }\n\t\tpublic decimal? \u9806\u5e8f\u756a\u53f7 { get; set; }\n\t\tpublic string \u75c5\u9662\u70b9\u6570\u30de\u30b9\u30bf\u30b3\u30fc\u30c9 { get; set; }\n\t\tpublic string \u30ec\u30bb\u30d7\u30c8\u96fb\u7b97\u30b3\u30fc\u30c9 { get; set; }\n\t\tpublic string \u89e3\u91c8\u756a\u53f7 { get; set; }\n\t\tpublic string \u8a3a\u7642\u884c\u70ba\u540d\u79f0 { get; set; }\n\t\tpublic int? \u884c\u70ba\u70b9\u6570 { get; set; }\n\t\tpublic int? \u884c\u70ba\u85ac\u5264\u6599 { get; set; }\n\t\tpublic int? \u884c\u70ba\u6750\u6599\u6599 { get; set; }\n\t\tpublic string \u5186\u70b9\u533a\u5206 { get; set; }\n\t\tpublic short? \u884c\u70ba\u56de\u6570 { get; set; }\n\t\tpublic string \u4fdd\u967a\u8005\u756a\u53f7 { get; set; }\n\t\tpublic string \u30ec\u30bb\u30d7\u30c8\u7a2e\u5225\u30b3\u30fc\u30c9 { get; set; }\n\t\tpublic string \u5b9f\u65bd\u5e74\u6708\u65e5 { get; set; }\n\t\tpublic string \u30ec\u30bb\u30d7\u30c8\u79d1\u533a\u5206 { get; set; }\n\t\tpublic string \u8a3a\u7642\u79d1\u533a\u5206 { get; set; }\n\t\tpublic string \u533b\u5e2b\u30b3\u30fc\u30c9 { get; set; }\n\t\tpublic string \u75c5\u68df\u30b3\u30fc\u30c9 { get; set; }\n\t\tpublic string \u75c5\u68df\u533a\u5206 { get; set; }\n\t\tpublic string \u5165\u5916\u533a\u5206 { get; set; }\n\t\tpublic string \u65bd\u8a2d\u30bf\u30a4\u30d7 { get; set; }\n\t\tpublic string \u8a3a\u7642\u5e74\u6708 { get; set; }\n\t\tpublic int? \u884c { get; set; }\n        public static string SQL =\n@\"\nSELECT \u65bd\u8a2d\u30b3\u30fc\u30c9,\u30c7\u30fc\u30bf\u8b58\u5225\u756a\u53f7,\u9000\u9662\u5e74\u6708\u65e5,\u5165\u9662\u5e74\u6708\u65e5,\u30c7\u30fc\u30bf\u533a\u5206,\n        \u9806\u5e8f\u756a\u53f7,\u75c5\u9662\u70b9\u6570\u30de\u30b9\u30bf\u30b3\u30fc\u30c9,\u30ec\u30bb\u30d7\u30c8\u96fb\u7b97\u30b3\u30fc\u30c9,\u89e3\u91c8\u756a\u53f7,\n        \u8a3a\u7642\u884c\u70ba\u540d\u79f0,\u884c\u70ba\u70b9\u6570,\u884c\u70ba\u85ac\u5264\u6599,\u884c\u70ba\u6750\u6599\u6599,\u5186\u70b9\u533a\u5206,\u884c\u70ba\u56de\u6570,\n        \u4fdd\u967a\u8005\u756a\u53f7,\u30ec\u30bb\u30d7\u30c8\u7a2e\u5225\u30b3\u30fc\u30c9,\u5b9f\u65bd\u5e74\u6708\u65e5,\u30ec\u30bb\u30d7\u30c8\u79d1\u533a\u5206,\n        \u8a3a\u7642\u79d1\u533a\u5206,\u533b\u5e2b\u30b3\u30fc\u30c9,\u75c5\u68df\u30b3\u30fc\u30c9,\u75c5\u68df\u533a\u5206,\u5165\u5916\u533a\u5206,\u65bd\u8a2d\u30bf\u30a4\u30d7,\n        \u8a3a\u7642\u5e74\u6708,\u884c\n\tFROM \uff25\u30d5\u30a1\u30a4\u30eb\n\";\n\n\t\tpublic void SetDataSample(string[] fields)\n\t\t{\n\t\t\t\u65bd\u8a2d\u30b3\u30fc\u30c9 = fields[0];\n\t\t\t\u30c7\u30fc\u30bf\u8b58\u5225\u756a\u53f7 = fields[1];\n\t\t\t\u9000\u9662\u5e74\u6708\u65e5 = fields[2];\n\t\t\t\u5165\u9662\u5e74\u6708\u65e5 = fields[3];\n\t\t\t\u30c7\u30fc\u30bf\u533a\u5206 = fields[4];\n\t\t\t\u9806\u5e8f\u756a\u53f7 = string.IsNullOrEmpty(fields[5]) ? (decimal?)null : decimal.Parse(fields[5]);\n\t\t\t\u75c5\u9662\u70b9\u6570\u30de\u30b9\u30bf\u30b3\u30fc\u30c9 = fields[6];\n\t\t\t\u30ec\u30bb\u30d7\u30c8\u96fb\u7b97\u30b3\u30fc\u30c9 = fields[7];\n\t\t\t\u89e3\u91c8\u756a\u53f7 = fields[8];\n\t\t\t\u8a3a\u7642\u884c\u70ba\u540d\u79f0 = fields[9];\n\t\t\t\u884c\u70ba\u70b9\u6570 = string.IsNullOrEmpty(fields[10]) ? (int?)null : int.Parse(fields[10]);\n\t\t\t\u884c\u70ba\u85ac\u5264\u6599 = string.IsNullOrEmpty(fields[11]) ? (int?)null : int.Parse(fields[11]);\n\t\t\t\u884c\u70ba\u6750\u6599\u6599 = string.IsNullOrEmpty(fields[12]) ? (int?)null : int.Parse(fields[12]);\n\t\t\t\u5186\u70b9\u533a\u5206 = fields[13];\n\t\t\t\u884c\u70ba\u56de\u6570 = string.IsNullOrEmpty(fields[14]) ? (short?)null : short.Parse(fields[14]);\n\t\t\t\u4fdd\u967a\u8005\u756a\u53f7 = fields[15];\n\t\t\t\u30ec\u30bb\u30d7\u30c8\u7a2e\u5225\u30b3\u30fc\u30c9 = fields[16];\n\t\t\t\u5b9f\u65bd\u5e74\u6708\u65e5 = fields[17];\n\t\t\t\u30ec\u30bb\u30d7\u30c8\u79d1\u533a\u5206 = fields[18];\n\t\t\t\u8a3a\u7642\u79d1\u533a\u5206 = fields[19];\n\t\t\t\u533b\u5e2b\u30b3\u30fc\u30c9 = fields[20];\n\t\t\t\u75c5\u68df\u30b3\u30fc\u30c9 = fields[21];\n\t\t\t\u75c5\u68df\u533a\u5206 = fields[22];\n\t\t\t\u5165\u5916\u533a\u5206 = fields[23];\n\t\t\t\u65bd\u8a2d\u30bf\u30a4\u30d7 = fields[24];\n\t\t\t\u8a3a\u7642\u5e74\u6708 = fields[25];\n\t\t\t\u884c = string.IsNullOrEmpty(fields[26]) ? (int?)null : int.Parse(fields[26]);\n\t\t}\n    }\n}\n```\n\n#\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u304b\u3089\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u30b5\u30f3\u30d7\u30eb\n\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306f\u8907\u6570\u306e\u7d50\u679c\u3092\u8fd4\u3057\u305f\u308a\u3001\u5143\u30c6\u30fc\u30d6\u30eb\u3068\u7570\u306a\u308b\u3053\u3068\u304b\u3089\u3001\u76f4\u63a5\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u304b\u3089\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3002\n##\u5404\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u6bce\u306b\u4f5c\u6210\u3059\u308btt\u30d5\u30a1\u30a4\u30eb\n\n```text:SpResultFromProc\u5fc5\u8981\u5ea6.tt\n<#@ template debug=\"true\" hostspecific=\"true\" language=\"C#\" #>\n<#@ output encoding=\"UTF-8\" #>\n<#@ assembly name=\"System.Core\" #>\n<#@ assembly name=\"System.Xml\" #>\n<#@ assembly name=\"System.Xml.Linq\" #>\n<#@ assembly name=\"System.Data\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"System.Text\" #>\n<#@ import namespace=\"System.Collections.Generic\" #>\n<#@ import namespace=\"System.Xml.Linq\" #>\n<#@ import namespace=\"System.Data\" #>\n<#@ import namespace=\"System.Data.SqlClient\" #>\n<#@ output extension=\".cs\" #>\n\n<#\n    var TargetDB = \"CStr1\";\n    var SpName = \"Proc\u5fc5\u8981\u5ea6\";\n    // \u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30b8\u30e3\u30fc\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30bf\u3092\u6307\u5b9a\n    var AddParams = new Action<SqlCommand>(p =>\n    {\n        p.Parameters.Add(new SqlParameter(\"ymd\", \"20160710\"));\n    });\n    var Folder = \"\";\n#>\n<#@ include file=\"SpToClass.ttinclude\" #>\n```\n##\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u304b\u3089\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5171\u901att\u30d5\u30a1\u30a4\u30eb\n\n```text:SpToClass.ttinclude\n<#\n    var file = this.Host.ResolvePath(\"Definition.xml\");\n\n    var xdoc = XDocument.Load(file);\n    var defs = from def in xdoc.Descendants(\"ConnectionString\")\n                select new\n                {\n                    Name = def.Attribute(\"name\").Value,\n                    ConnStr = def.Attribute(\"string\").Value,\n                };\n\n    var connstr = defs.Where(r => r.Name == TargetDB)\n        .Select(r => r.ConnStr).Single();\n\n\tvar list = new List<Colums[]>();\n    using (var conn = new SqlConnection(connstr))\n    {\n        conn.Open();\n\n        var cmd = new SqlCommand(SpName, conn);\n        cmd.CommandType = CommandType.StoredProcedure;\n        cmd.CommandTimeout = 50000;\n        AddParams(cmd);\n\n        using (var rd = cmd.ExecuteReader())\n        {\n            Console.WriteLine(rd.FieldCount);\n            do\n            {\n                var st = rd.GetSchemaTable();\n                list.Add(Enumerable.Range(0, rd.FieldCount)\n\t\t\t\t\t.Select(i => new Colums(rd, i, st.Rows[i])).ToArray());\n            } \n            while (rd.NextResult());\n        }\n\t}\n\n\tvar resultCount = 0;\n#>\nusing System;\n\nnamespace DapperClassLibrary<#= Folder #>\n{\n<#\n\tforeach(var arr in list)\n\t{\n#>\n\t/// <summary>\n    /// <#= SpName #>\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\n    /// </summary>\n    public partial class SpResultFrom<#= SpName #><#= resultCount++ #>\n    {\n<#\n\t\tforeach(var col in arr)\n\t\t{\n#>\n\t\t<#= col.GetProperty() #>\n<#\n\t    }\n#>\n\n\t\tpublic static string SQL = @\"<#= SpName #>\";\n\n\t\t/*\n\t\tdeclare @temp table (\n<#\n\t\tvar arrFld = string.Join(\",\\n\", arr.Select(r => r.GetFieldDef()).ToArray()).Split('\\n');\n\n\t\tforeach(var col in arrFld)\n\t\t{\n#>\n\t\t\t<#= col #>\n<#\n\t    }\n#>\n\t\t);\n\t\t*/\n    }\n<#\n    }\n#>\n\n}\n\n<#+\n    class Colums\n    {\n        public string ColumnName { get; set; }\n        public Type Type { get; set; }\n        public string DbType { get; set; }\n        public DataRow Row { get; set; }\n\n        public Colums()\n        {\n\n        }\n\n        public Colums(SqlDataReader rd, int i, DataRow row)\n        {\n            ColumnName = rd.GetName(i);\n            Type = rd.GetFieldType(i);\n            Row = row;\n            DbType = Row[\"DataTypeName\"].ToString();\n        }\n\n        public bool IsNullable()\n        {\n            var type = dicType[DbType];\n            var IsNull = (bool)Row[\"AllowDBNull\"];\n            return (dicNullabel[type] && IsNull);\n        }\n\n        public string GetProperty()\n        {\n            var type = dicType[DbType];\n\n            return string.Format(\"public {0}{1} {2} \",\n                type, GetNullable(), ColumnName) + \"{ get; set; }\";\n        }\n\n        public string GetFieldDef()\n        {\n            return string.Format(\"{0}{1}\", \n                    dicDdlFld[Row[\"DataTypeName\"].ToString()](this),\n                    IsNullable() ? \"\" : \" NOT NULL\");\n        }\n\n        private string GetNullable()\n        {\n            return IsNullable() ? \"?\" : \"\";\n        }\n\n        private static Dictionary<string, Func<Colums, string>> dicDdlFld =\n                new Dictionary<string, Func<Colums, string>>()\n        {\n            {\"char\", m => string.Format(\"[{0}] {1}({2})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"ColumnSize\"]) },\n            {\"varchar\", m => string.Format(\"[{0}] {1}({2})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"ColumnSize\"]) },\n            {\"nvarchar\", m => string.Format(\"[{0}] {1}({2})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"ColumnSize\"]) },\n            {\"nchar\", m => string.Format(\"[{0}] {1}({2})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"ColumnSize\"])},\n            {\"int\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"tinyint\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"smallint\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"bigint\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"decimal\", m => string.Format(\"[{0}] {1}({2},{3})\", m.ColumnName, m.Row[\"DataTypeName\"], m.Row[\"NumericPrecision\"], m.Row[\"NumericScale\"])},\n            {\"bit\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"date\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n            {\"datetime\", m => string.Format(\"[{0}] {1}\", m.ColumnName, m.Row[\"DataTypeName\"])},\n        };\n\n        private static Dictionary<string, bool> dicNullabel =\n                new Dictionary<string, bool>()\n        {\n            {\"string\", false},\n            {\"int\", true},\n            {\"long\", true},\n            {\"byte\", true},\n            {\"short\", true},\n            {\"decimal\", true},\n            {\"bool\", true},\n            {\"DateTime\", true},\n        };\n\n        private static Dictionary<string, string> dicType =\n                new Dictionary<string, string>()\n        {\n            {\"char\", \"string\"},\n            {\"varchar\", \"string\"},\n            {\"nvarchar\", \"string\"},\n            {\"nchar\", \"string\"},\n            {\"int\", \"int\"},\n            {\"tinyint\", \"byte\"},\n            {\"smallint\", \"short\"},\n            {\"bigint\", \"long\"},\n            {\"decimal\", \"decimal\"},\n            {\"bit\", \"bool\"},\n            {\"date\", \"DateTime\"},\n            {\"datetime\", \"DateTime\"},\n        };\n    }\n#>\n```\n##\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30b8\u30e3\u30fc\u304b\u3089\u3067\u304d\u305f\u30af\u30e9\u30b9\n\n```csharp:SpResultFromProc\u5fc5\u8981\u5ea6.cs\nusing System;\n\nnamespace DapperClassLibrary\n{\n    /// <summary>\n    /// Proc\u5fc5\u8981\u5ea628H\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\n    /// </summary>\n    public partial class SpResultFromProc\u5fc5\u8981\u5ea60\n    {\n\t\tpublic DateTime? \u5bfe\u8c61\u65e5 { get; set; }\n\t\tpublic string \u60a3\u8005\u540d { get; set; }\n\t\tpublic int? \u5e74\u9f62 { get; set; }\n\t\tpublic string WARDCODE { get; set; }\n\t\tpublic string ROOMCODE { get; set; }\n\t\tpublic decimal? \u5275\u50b7\u51e6\u7f6e { get; set; }\n\t\tpublic decimal? \u547c\u5438\u30b1\u30a2 { get; set; }\n\t\tpublic decimal? \u70b9\u6ef4\u30e9\u30a4\u30f3 { get; set; }\n\t\tpublic decimal? \u5fc3\u96fb\u56f3 { get; set; }\n\t\tpublic decimal? \u30b7\u30ea\u30f3\u30b8\u30dd\u30f3\u30d7 { get; set; }\n\t\tpublic decimal? \u8f38\u8840 { get; set; }\n\t\tpublic decimal? \u5c02\u9580\u7684\u6cbb\u7642 { get; set; }\n\t\tpublic decimal? \u6551\u6025\u5165\u9662 { get; set; }\n\t\tpublic decimal? \u5bdd\u8fd4\u308a { get; set; }\n\t\tpublic decimal? \u79fb\u8b72 { get; set; }\n\t\tpublic decimal? \u53e3\u8154\u6e05\u6f54 { get; set; }\n\t\tpublic decimal? \u98df\u4e8b\u6442\u53d6 { get; set; }\n\t\tpublic decimal? \u8863\u670d\u306e\u7740\u8131 { get; set; }\n\t\tpublic decimal? \u8a3a\u7642\u6307\u793a { get; set; }\n\t\tpublic decimal? \u5371\u967a\u884c\u52d5 { get; set; }\n\t\tpublic decimal? \u958b\u982d\u624b\u8853 { get; set; }\n\t\tpublic decimal? \u958b\u80f8\u624b\u8853 { get; set; }\n\t\tpublic decimal? \u958b\u8179\u624b\u8853 { get; set; }\n\t\tpublic decimal? \u9aa8\u624b\u8853 { get; set; }\n\t\tpublic decimal? \u8179\u8154\u93e1\u624b\u8853 { get; set; }\n\t\tpublic decimal? \u5168\u8eab\u9ebb\u9154\u624b\u8853 { get; set; }\n\t\tpublic decimal? \u6551\u547d\u5185\u79d1\u6cbb\u7642 { get; set; }\n\t\tpublic decimal? A { get; set; }\n\t\tpublic decimal? B { get; set; }\n\t\tpublic decimal? C { get; set; }\n\t\tpublic int? \u5165\u9662\u66a6\u65e5 { get; set; }\n\t\tpublic string \u57fa\u6e96 { get; set; }\n\t\tpublic byte? T\u5275\u50b7\u51e6\u7f6e { get; set; }\n\t\tpublic byte? T\u5c40\u6240\u9670\u5727\u9589\u9396\u51e6\u7f6e { get; set; }\n\t\tpublic byte? T\u91cd\u5ea6\u8925\u7621\u51e6\u7f6e { get; set; }\n\t\tpublic byte? T\u4eba\u5de5\u547c\u5438 { get; set; }\n\t\tpublic byte? T\u9178\u7d20\u5438\u5165 { get; set; }\n\t\tpublic byte? T\u5580\u75f0\u5438\u5f15 { get; set; }\n\t\tpublic byte? T\u547c\u5438\u5fc3\u62cd\u76e3\u8996 { get; set; }\n\t\tpublic byte? T\u8f38\u8840 { get; set; }\n\t\tpublic byte? T\u30b7\u30ea\u30f3\u30b8\u30dd\u30f3\u30d7 { get; set; }\n\t\tpublic byte? T\u6551\u6025\u5165\u9662\u5f53\u65e5 { get; set; }\n\t\tpublic byte? T\u6551\u6025\u5165\u9662\u7fcc\u65e5 { get; set; }\n\n\t\tpublic static string SQL = @\"Proc\u5fc5\u8981\u5ea6\";\n\n\t\t/*\n\t\tdeclare @temp table (\n\t\t\t[\u5bfe\u8c61\u65e5] date,\n\t\t\t[\u60a3\u8005\u540d] nvarchar(42) NOT NULL,\n\t\t\t[\u5e74\u9f62] int,\n\t\t\t[WARDCODE] varchar(4) NOT NULL,\n\t\t\t[ROOMCODE] char(4) NOT NULL,\n\t\t\t[\u5275\u50b7\u51e6\u7f6e] decimal(38,4),\n\t\t\t[\u547c\u5438\u30b1\u30a2] decimal(38,4),\n\t\t\t[\u70b9\u6ef4\u30e9\u30a4\u30f3] decimal(38,4),\n\t\t\t[\u5fc3\u96fb\u56f3] decimal(38,4),\n\t\t\t[\u30b7\u30ea\u30f3\u30b8\u30dd\u30f3\u30d7] decimal(38,4),\n\t\t\t[\u8f38\u8840] decimal(38,4),\n\t\t\t[\u5c02\u9580\u7684\u6cbb\u7642] decimal(38,4),\n\t\t\t[\u6551\u6025\u5165\u9662] decimal(38,4),\n\t\t\t[\u5bdd\u8fd4\u308a] decimal(38,4),\n\t\t\t[\u79fb\u8b72] decimal(38,4),\n\t\t\t[\u53e3\u8154\u6e05\u6f54] decimal(38,4),\n\t\t\t[\u98df\u4e8b\u6442\u53d6] decimal(38,4),\n\t\t\t[\u8863\u670d\u306e\u7740\u8131] decimal(38,4),\n\t\t\t[\u8a3a\u7642\u6307\u793a] decimal(38,4),\n\t\t\t[\u5371\u967a\u884c\u52d5] decimal(38,4),\n\t\t\t[\u958b\u982d\u624b\u8853] decimal(38,4),\n\t\t\t[\u958b\u80f8\u624b\u8853] decimal(38,4),\n\t\t\t[\u958b\u8179\u624b\u8853] decimal(38,4),\n\t\t\t[\u9aa8\u624b\u8853] decimal(38,4),\n\t\t\t[\u8179\u8154\u93e1\u624b\u8853] decimal(38,4),\n\t\t\t[\u5168\u8eab\u9ebb\u9154\u624b\u8853] decimal(38,4),\n\t\t\t[\u6551\u547d\u5185\u79d1\u6cbb\u7642] decimal(38,4),\n\t\t\t[A] decimal(38,4),\n\t\t\t[B] decimal(38,4),\n\t\t\t[C] decimal(38,4),\n\t\t\t[\u5165\u9662\u66a6\u65e5] int,\n\t\t\t[\u57fa\u6e96] varchar(2) NOT NULL,\n\t\t\t[T\u5275\u50b7\u51e6\u7f6e] tinyint,\n\t\t\t[T\u5c40\u6240\u9670\u5727\u9589\u9396\u51e6\u7f6e] tinyint,\n\t\t\t[T\u91cd\u5ea6\u8925\u7621\u51e6\u7f6e] tinyint,\n\t\t\t[T\u4eba\u5de5\u547c\u5438] tinyint,\n\t\t\t[T\u9178\u7d20\u5438\u5165] tinyint,\n\t\t\t[T\u5580\u75f0\u5438\u5f15] tinyint,\n\t\t\t[T\u547c\u5438\u5fc3\u62cd\u76e3\u8996] tinyint,\n\t\t\t[T\u8f38\u8840] tinyint,\n\t\t\t[T\u30b7\u30ea\u30f3\u30b8\u30dd\u30f3\u30d7] tinyint,\n\t\t\t[T\u6551\u6025\u5165\u9662\u5f53\u65e5] tinyint,\n\t\t\t[T\u6551\u6025\u5165\u9662\u7fcc\u65e5] tinyint\n\t\t);\n\t\t*/\n    }\n\n}\n```\n", "tags": ["C#", "T4", "SQLServer", "Dapper"]}