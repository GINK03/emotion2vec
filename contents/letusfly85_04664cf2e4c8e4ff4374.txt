{"context": " More than 1 year has passed since last update.\u524d\u56de\u306e\u6295\u7a3f\u3067\u3001POST\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u305f\u306e\u3067\u3001\u672c\u65e5\u306f\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\nhttps://github.com/letusfly85/IoT_data_curator\n\n\u76ee\u6b21\n\nIotDataControllerSpec.scala\u30d5\u30a1\u30a4\u30eb\u306e\u5b9f\u88c5\nnode\u3092\u5229\u7528\u3057\u3066\u3001dynalite\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\n.travis.yml\u3092\u7de8\u96c6\u3057\u3066\u3001sbt test\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u5b9a\u7fa9\n\n\n1. IotDataControllerSpec.scala\u30d5\u30a1\u30a4\u30eb\u306e\u5b9f\u88c5\n\u4e0b\u8a18\u306b\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u307e\u3059\u3002\uff11\u884c\uff11\u884c\u30b3\u30e1\u30f3\u30c8\u3092\u3064\u3051\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\uff1aScalaTestingWithSpecs2\n\n\ntest/IotDataControllerSpec.scala\nimport controllers.IotDataController\nimport org.specs2.runner._\nimport org.junit.runner._\nimport play.api.libs.json.Json\n\nimport play.api.test._\n\n/**\n  * \u3053\u308c\u306f\u3001IotDataController\u306espec\u3067\u3059\u3002\n  * create, findBy\u30e1\u30bd\u30c3\u30c9\u306e\u6b63\u5e38\u7cfb\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n  *\n  */\n@RunWith(classOf[JUnitRunner])\nobject IotDataControllerSpec extends PlaySpecification {\n  val controller = new IotDataController\n\n  \"IotDataController#create\" should {\n    \"create IoTData on dynalite and get success status\" in {\n\n      //FakeRequest\u306b\u3001Json\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\n      val request = FakeRequest().withJsonBody(Json.parse(\"\"\"{\"id\":\"10\"}\"\"\"))\n\n      //`create`\u30e1\u30bd\u30c3\u30c9\u306b`request`\u3092\u6e21\u3057\u3066\u3001\u5b9f\u884c\n      val result = controller.create().apply(request)\n\n      //result\u3092String\u578b\u306b\u5909\u63db\n      val bodyText = contentAsString(result)\n\n      //\u7d50\u679c\u306e\u6587\u5b57\u5217\u304c\u60f3\u5b9a\u901a\u308a\u3067\u3042\u308b\u304b\u3092\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\n      bodyText must be equalTo(s\"\"\"{\"id\":\"10\",\"status\":\"success\"}\"\"\")\n    }\n  }\n\n  \"IotDataController#findBy\" should {\n    \"find IoTData on dynalite and get records\" in {\n      val request = FakeRequest().withJsonBody(Json.parse(\"\"\"{\"id\":\"10\"}\"\"\"))\n      val result = controller.findBy().apply(request)\n      val bodyText = contentAsString(result)\n\n      println(bodyText)\n      bodyText must be equalTo(s\"\"\"{\"detail\":\"100\",\"id\":\"10\"}\"\"\")\n    }\n  }\n}\n\n\n\n2. node\u3092\u5229\u7528\u3057\u3066\u3001dynalite\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\ndocker\u306eport\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u5229\u7528\u3057\u3066\u3001dynalite\u306f127.0.0.1:80\u3067\u30b5\u30fc\u30d3\u30b9\u5f85\u53d7\u3092\u3057\u3066\u3082\u3089\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nnode/create-table.js\nvar AWS = require('aws-sdk')\nAWS.config.loadFromPath('node/config.json');\n\nvar dynamo = new AWS.DynamoDB({region: 'us-east-1', endpoint: 'http://127.0.0.1'})\n\nvar params = {\n    TableName : \"IotData\",\n    KeySchema: [\n        { AttributeName: \"id\",     KeyType: \"HASH\"},  //Partition key\n        { AttributeName: \"detail\", KeyType: \"RANGE\" }  //Sort key\n    ],\n    AttributeDefinitions: [\n        { AttributeName: \"id\", AttributeType: \"N\" },\n        { AttributeName: \"detail\", AttributeType: \"S\" }\n    ],\n    ProvisionedThroughput: {\n        ReadCapacityUnits: 1,\n        WriteCapacityUnits: 1\n    }\n};\n\ndynamo.createTable(params, function(err, data) {\n    if (err) {\n        console.error(\"Unable to create table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n        console.log(\"Created table. Table description JSON:\", JSON.stringify(data, null, 2));\n    }\n});\n\ndynamo.describeTable(params, function(err, data) {\n    if (err) {\n        console.log(err, err.stack);\n    } else {\n        console.log(data);\n    }\n});\n\n\n\n3. .travis.yml\u3092\u7de8\u96c6\u3057\u3066\u3001sbt test\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u5b9a\u7fa9\n.travis.yml\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n3-1. \u30dd\u30a4\u30f3\u30c8\n\n\nscala 2.11.7, oraclejdk8\u3068\u3057\u306a\u3044\u3068\u3001sbt\u3067\u4f9d\u5b58\u95a2\u4fc2\u3092\u89e3\u6c7a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u3053\u3053\u306f\u56fa\u5b9a\u306b\u3057\u306a\u3044\u3068\u30c0\u30e1\u305d\u3046\u3067\u3059\u306d\u3002\n\nbefore_install\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3001dynalite\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001npm\u3068node\u30b3\u30de\u30f3\u30c9\u3092\u5229\u7528\u3057\u3066\u3001dynalite\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\nscript\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3001\u30c0\u30df\u30fc\u306eaws\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\n\ntravis.yml\nlanguage: scala\nscala:\n  - 2.11.7\njdk:\n  - oraclejdk8\n\nservices:\n  - docker\n\nbefore_install:\n  - docker run -d -p 127.0.0.1:80:4567 -t letusfly85/dynalite dynalite\n  - npm install aws-sdk\n  - node node/create-table.js\n\nscript:\n  - mkdir -p /home/travis/.aws\n  - cp conf/credentials /home/travis/.aws/credentials\n  - sbt clean compile test\n\n\n\n\u7d50\u679c\n\n\n\u6240\u611f\n\u307e\u3041\u3001\u3084\u308c\u306a\u3044\u3053\u3068\u3082\u306a\u3044\u3088\u306d\uff01\u3068\u3044\u3063\u305f\u5370\u8c61\u3067\u3059\u3002\n\n\u4eca\u5f8c\u306eTODO\n\nsbt\u3067\u4f9d\u5b58\u89e3\u6c7a\u3092travisci\u304c\u6bce\u56de\u3084\u3063\u3066\u308b\u3051\u3069\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u304bdocker\u3067\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u3093\u3060\u3063\u3051\n\u30d1\u30c3\u30b1\u30fc\u30b8\u30f3\u30b0\u3069\u3046\u3059\u3093\u3060\u3063\u3051\n\u30a2\u30fc\u30ad\u30d5\u30a1\u30af\u30c8\u3069\u3053\u306b\u3076\u3061\u8fbc\u3080\u3093\u3060\u3063\u3051\n\u30ea\u30ea\u30fc\u30b7\u30f3\u30b0\u3069\u3046\u3059\u3093\u3060\u3063\u3051\uff08drone.io\u4f7f\u3044\u305f\u3044\uff09\nDynalite\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3063\u3066\u3001java\u306esdk\u3058\u3083\u306a\u304f\u3066AWScala\u4f7f\u3044\u305f\u3044\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3063\u3066akka-nbench\u3068\u304b\u3067\u3068\u308a\u305f\u3044\u306a\nakka, spark\u9023\u643a\u3084\u3063\u3061\u3083\u3044\u305f\u3044\n\n\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u3002\n\n[\u524d\u56de\u306e\u6295\u7a3f](../../letusfly85/items/138cd821e3f3f4c5486f)\u3067\u3001POST\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u305f\u306e\u3067\u3001\u672c\u65e5\u306f\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\nhttps://github.com/letusfly85/IoT_data_curator\n\n## \u76ee\u6b21\n\n1. IotDataControllerSpec.scala\u30d5\u30a1\u30a4\u30eb\u306e\u5b9f\u88c5\n2. node\u3092\u5229\u7528\u3057\u3066\u3001dynalite\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\n3. .travis.yml\u3092\u7de8\u96c6\u3057\u3066\u3001`sbt test`\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u5b9a\u7fa9\n\n## 1. IotDataControllerSpec.scala\u30d5\u30a1\u30a4\u30eb\u306e\u5b9f\u88c5\n\n\u4e0b\u8a18\u306b\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u307e\u3059\u3002\uff11\u884c\uff11\u884c\u30b3\u30e1\u30f3\u30c8\u3092\u3064\u3051\u3066\u307f\u307e\u3057\u305f\u3002\n\n* [\u53c2\u8003\uff1aScalaTestingWithSpecs2](https://www.playframework.com/documentation/2.4.x/ScalaTestingWithSpecs2)\n\n```test/IotDataControllerSpec.scala\nimport controllers.IotDataController\nimport org.specs2.runner._\nimport org.junit.runner._\nimport play.api.libs.json.Json\n\nimport play.api.test._\n\n/**\n  * \u3053\u308c\u306f\u3001IotDataController\u306espec\u3067\u3059\u3002\n  * create, findBy\u30e1\u30bd\u30c3\u30c9\u306e\u6b63\u5e38\u7cfb\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n  *\n  */\n@RunWith(classOf[JUnitRunner])\nobject IotDataControllerSpec extends PlaySpecification {\n  val controller = new IotDataController\n\n  \"IotDataController#create\" should {\n    \"create IoTData on dynalite and get success status\" in {\n\n      //FakeRequest\u306b\u3001Json\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\n      val request = FakeRequest().withJsonBody(Json.parse(\"\"\"{\"id\":\"10\"}\"\"\"))\n\n      //`create`\u30e1\u30bd\u30c3\u30c9\u306b`request`\u3092\u6e21\u3057\u3066\u3001\u5b9f\u884c\n      val result = controller.create().apply(request)\n\n      //result\u3092String\u578b\u306b\u5909\u63db\n      val bodyText = contentAsString(result)\n\n      //\u7d50\u679c\u306e\u6587\u5b57\u5217\u304c\u60f3\u5b9a\u901a\u308a\u3067\u3042\u308b\u304b\u3092\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\n      bodyText must be equalTo(s\"\"\"{\"id\":\"10\",\"status\":\"success\"}\"\"\")\n    }\n  }\n\n  \"IotDataController#findBy\" should {\n    \"find IoTData on dynalite and get records\" in {\n      val request = FakeRequest().withJsonBody(Json.parse(\"\"\"{\"id\":\"10\"}\"\"\"))\n      val result = controller.findBy().apply(request)\n      val bodyText = contentAsString(result)\n\n      println(bodyText)\n      bodyText must be equalTo(s\"\"\"{\"detail\":\"100\",\"id\":\"10\"}\"\"\")\n    }\n  }\n}\n```\n\n## 2. node\u3092\u5229\u7528\u3057\u3066\u3001dynalite\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\n\ndocker\u306eport\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u5229\u7528\u3057\u3066\u3001dynalite\u306f`127.0.0.1:80`\u3067\u30b5\u30fc\u30d3\u30b9\u5f85\u53d7\u3092\u3057\u3066\u3082\u3089\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```node/create-table.js\nvar AWS = require('aws-sdk')\nAWS.config.loadFromPath('node/config.json');\n\nvar dynamo = new AWS.DynamoDB({region: 'us-east-1', endpoint: 'http://127.0.0.1'})\n\nvar params = {\n    TableName : \"IotData\",\n    KeySchema: [\n        { AttributeName: \"id\",     KeyType: \"HASH\"},  //Partition key\n        { AttributeName: \"detail\", KeyType: \"RANGE\" }  //Sort key\n    ],\n    AttributeDefinitions: [\n        { AttributeName: \"id\", AttributeType: \"N\" },\n        { AttributeName: \"detail\", AttributeType: \"S\" }\n    ],\n    ProvisionedThroughput: {\n        ReadCapacityUnits: 1,\n        WriteCapacityUnits: 1\n    }\n};\n\ndynamo.createTable(params, function(err, data) {\n    if (err) {\n        console.error(\"Unable to create table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n        console.log(\"Created table. Table description JSON:\", JSON.stringify(data, null, 2));\n    }\n});\n\ndynamo.describeTable(params, function(err, data) {\n    if (err) {\n        console.log(err, err.stack);\n    } else {\n        console.log(data);\n    }\n});\n```\n\n## 3. .travis.yml\u3092\u7de8\u96c6\u3057\u3066\u3001`sbt test`\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u5b9a\u7fa9\n\n`.travis.yml`\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n### 3-1. \u30dd\u30a4\u30f3\u30c8\n\n* `scala 2.11.7`, `oraclejdk8`\u3068\u3057\u306a\u3044\u3068\u3001sbt\u3067\u4f9d\u5b58\u95a2\u4fc2\u3092\u89e3\u6c7a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u3053\u3053\u306f\u56fa\u5b9a\u306b\u3057\u306a\u3044\u3068\u30c0\u30e1\u305d\u3046\u3067\u3059\u306d\u3002\n* `before_install`\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3001dynalite\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001npm\u3068node\u30b3\u30de\u30f3\u30c9\u3092\u5229\u7528\u3057\u3066\u3001dynalite\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n* `script`\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3001\u30c0\u30df\u30fc\u306eaws\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\n```.travis.yml\nlanguage: scala\nscala:\n  - 2.11.7\njdk:\n  - oraclejdk8\n\nservices:\n  - docker\n\nbefore_install:\n  - docker run -d -p 127.0.0.1:80:4567 -t letusfly85/dynalite dynalite\n  - npm install aws-sdk\n  - node node/create-table.js\n\nscript:\n  - mkdir -p /home/travis/.aws\n  - cp conf/credentials /home/travis/.aws/credentials\n  - sbt clean compile test\n```\n\n## \u7d50\u679c\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-02-17 17.52.51.png](https://qiita-image-store.s3.amazonaws.com/0/49547/b46988d0-f860-6ca4-1d19-435c0a3e08d6.png)\n\n## \u6240\u611f\n\n\u307e\u3041\u3001\u3084\u308c\u306a\u3044\u3053\u3068\u3082\u306a\u3044\u3088\u306d\uff01\u3068\u3044\u3063\u305f\u5370\u8c61\u3067\u3059\u3002\n\n## \u4eca\u5f8c\u306eTODO\n\n* sbt\u3067\u4f9d\u5b58\u89e3\u6c7a\u3092travisci\u304c\u6bce\u56de\u3084\u3063\u3066\u308b\u3051\u3069\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u304bdocker\u3067\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u3093\u3060\u3063\u3051\n* \u30d1\u30c3\u30b1\u30fc\u30b8\u30f3\u30b0\u3069\u3046\u3059\u3093\u3060\u3063\u3051\n* \u30a2\u30fc\u30ad\u30d5\u30a1\u30af\u30c8\u3069\u3053\u306b\u3076\u3061\u8fbc\u3080\u3093\u3060\u3063\u3051\n* \u30ea\u30ea\u30fc\u30b7\u30f3\u30b0\u3069\u3046\u3059\u3093\u3060\u3063\u3051\uff08drone.io\u4f7f\u3044\u305f\u3044\uff09\n* Dynalite\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3063\u3066\u3001java\u306esdk\u3058\u3083\u306a\u304f\u3066[AWScala](https://github.com/seratch/AWScala)\u4f7f\u3044\u305f\u3044\n* \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3063\u3066[akka-nbench](https://github.com/kotakanbe/akka-nbench)\u3068\u304b\u3067\u3068\u308a\u305f\u3044\u306a\n* akka, spark\u9023\u643a\u3084\u3063\u3061\u3083\u3044\u305f\u3044\n\n\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u3002\n", "tags": ["TravisCI", "PlayFramework", "DynamoDB", "dynalite", "docker"]}