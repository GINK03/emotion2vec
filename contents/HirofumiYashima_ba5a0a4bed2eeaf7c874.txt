{"context": " More than 1 year has passed since last update.\n\n\u524d\u56de\u306e Qiita \u6295\u7a3f\u8a18\u4e8b \u3067\u7d39\u4ecb\u3057\u305f\u30b3\u30f3\u30bd\u30fc\u30eb\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6a5f\u80fd\u62e1\u5f35\u7248\u3092\u3064\u304f\u3063\u3066\u307f\u305f\u3002\n\n\uff08\u524d\u56de \u306e \u8a18\u4e8b)\n\n\n\n\u3000\uff08\u62e1\u5f35\u3057\u305f\u6a5f\u80fd\uff09\n\nword2vec \u610f\u5473\u8a08\u7b97 \u51e6\u7406\u3092\u3000\u300c\u3064\u3065\u3051\u307e\u3059\u304b\uff1f\u300d \u3068\u805e\u3044\u3066\u304f\u308b\u753b\u9762\u3092\u8ffd\u52a0\u3002\n\n\u300c\u304a\u308f\u308b\u300d \u3068 \u5165\u529b\u3059\u308b\u307e\u3067\u3001\u4f55\u56de\u3067\u3082\u3001\u524d\u56de\u3068\u7570\u306a\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u3069\u3046\u3057\u306e\u610f\u5473\u8a08\u7b97\u3092\u884c\u3048\u308b\u4ed5\u69d8\u306b\u5909\u66f4\u3002\n\n\u3010\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3011\n\n\u3059\u3079\u3066\u306e\u300c\u5165\u529b\u30ad\u30fc\u30ef\u30fc\u30c9 \u3068 \u610f\u5473\u8a08\u7b97\u306e\u7d50\u679c\u300d\u304c\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3002\n\n\uff08 \u4f5c\u6210 & \u6295\u7a3f\u52d5\u6a5f \uff09\n\n\u4ed5\u4e8b\u5148\u306e\u4f1a\u793e\u95a2\u4fc2\u3067\u3001 word2vec \u89e3\u6790\u3092\u884c\u3063\u3066\u3044\u3066\u3001Google Mikolov \u8ad6\u6587 \u306e\u3053\u3068\u3068\u304b \u8aac\u660e\u3057\u3066\u3044\u305f\u3089\u3001\u610f\u5473\u306e\u8db3\u3057\u7b97\u5f15\u304d\u7b97\u3059\u308b\u3068\u304d\uff08\u203b Python \u306e word2vec_analogy()\u30e1\u30bd\u30c3\u30c9\uff09\u306b\u3001\u5f15\u6570\u306b\u6e21\u3059\u5358\u8a9e\u306e\u9806\u756a\u304c\u308f\u304b\u3089\u306a\u3044 \uff08 \u30dd\u30b8\u30c6\u30a3\u30d6\u30fb\u30ef\u30fc\u30c9\u3063\u3066\u306a\u306b\uff1f\u3000\u30cd\u30ac\u30c6\u30a3\u30d6\u30fb\u30ef\u30fc\u30c9\u306f\uff1f\uff1f \u306a\u3093\u3067\u30dd\u30b8\u306b\uff12\u3064\u3042\u308b\u306e\uff1f etc... )   \n\n\n\u3067\u3001\u8aac\u660e\u3057\u3066\u3082\u3001\u307e\u305f\u4ed6\u306e\u540c\u50da\u306a\u308a\u4e0a\u53f8\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u5bfe\u8a71\u5f0f\u306b\u5358\u8a9e\u3092\u5165\u529b\u3059\u308b\u3068\u3001\u7b54\u3048\u304c\u304b\u3048\u3063\u3066\u304f\u308b\uff08 & \u30b3\u30fc\u30d1\u30b9\u306b\u5b58\u5728\u3057\u306a\u3044\u5358\u8a9e\u3092\u5165\u308c\u305f\u308a\u3001\u30ab\u30ec\u30f3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306a\u3044\u30c6\u30ad\u30b9\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307e\u305b\u3088\u3046\u3068\u3057\u305f\u3089\u30a8\u30e9\u30fc\u304c\u305d\u308c\u306a\u308a\u306b\u3061\u3083\u3093\u3068\u51fa\u308b\uff09\u30b3\u30f3\u30bd\u30fc\u30eb\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u304f\u3063\u3066\u307f\u305f \n\n\n\u6570\u65e5\u5f8c\u306b\u3001\u307b\u304b\u306e\u4eba\u306b\u3082\u307f\u305b\u305f\u3044\u304b\u3089\u3001\u305d\u3046\u3060\u541b\u3001\u30a6\u30a7\u30d6\u304b\u3089\u3060\u308c\u3067\u3082\u898b\u3089\u308c\u308b\u3042\u308c\u3001Qiita \u306b\u3042\u3052\u3066\u3088\u3001\u3068\u8a00\u308f\u308c\u305f\u306e\u3067\u3001\u30a2\u30c3\u30d7\u3057\u3066\u3001\u7a1a\u62d9\u306a\u304c\u3089\u516c\u5171\u30a6\u30a7\u30d6\u7a7a\u9593\u306b\u3042\u3052\u3055\u305b\u3066\u3044\u305f\u3060\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \uff08\u672c\u6765\u3067\u3042\u308c\u3070\u3001Django \u3084\u3089\u306a\u3093\u3084\u3089\u3064\u304b\u3063\u3066\u3001\u304d\u3061\u3093\u3068\u30a6\u30a7\u30d6\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u64cd\u4f5c\u3067\u304d\u308b Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u304c\u3001\u3001\u3001\uff09\n\n\uff08 \u5b9f\u884c\u753b\u9762 \uff09\n\n\n\u203b \u30b3\u30fc\u30c9\u306e\u5168\u6587\u306f\u3001\u3053\u306e\u8a18\u4e8b\u306e\u6700\u5f8c\u306b\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u306f\u3001\u5bb6\u96fb\u30fb\u30b2\u30fc\u30e0\u65b0\u5546\u54c1 \u60c5\u5831\u30cb\u30e5\u30fc\u30b9\u30fb\u30b5\u30a4\u30c8 \u300cAV watch\u300d   \u5168\u904e\u53bb\u8a18\u4e8b\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u30fb\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\n\n\uff08\uff11\uff09Python new_calc_2.py \u3067\u8d77\u52d5\n\n\n\uff08\u8d77\u52d5\u753b\u9762\uff09\n\n\n\n\uff08\uff12\uff09\u610f\u5473\u8a08\u7b97\u3092\u884c\u3046 \u5358\u8a9e \u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5165\u529b\n\n\n\n\uff08\uff13\uff09\u610f\u5473\u8a08\u7b97 \u5b8c\u4e86\u3002\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\n\n\n\n\uff08\uff14\uff09\u5225\u306e\u5358\u8a9e\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3001\u3064\u3065\u3051\u3066\u610f\u5473\u8a08\u7b97\u3092\u7d9a\u884c\u3059\u308b\u304b\u3001\u305f\u305a\u306d\u3066\u304f\u308b\n\n\n\n\uff08\uff15\uff09\u300c\u3064\u3065\u3051\u308b\u300d\u3092\u5165\u529b\u3059\u308b\u3068\u3001\u65b0\u305f\u306a \u5358\u8a9e\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u5165\u529b\u304c\u6c42\u3081\u3089\u308c\u308b\n\n\n\n\n\n\n\n\n\uff08\uff16\uff09\u300c\u304a\u308f\u308a\u300d\u3068\u5165\u529b\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b8c\u4e86\u3059\u308b\n\n\n\u3053\u308c\u307e\u3067\u306b\u5b9f\u884c\u3057\u305f\u610f\u5473\u8a08\u7b97\u306e\u5165\u529b\u5358\u8a9e \u3068 \u7d50\u679c\u306e\u3059\u3079\u3066\u304c\u3001\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u307f\u30fb\u4fdd\u5b58\u3055\u308c\u308b\u3002\n\n\n\n\uff08\u7d50\u679c\u51fa\u529b\u30d5\u30a1\u30a4\u30eb output.csv \u306e\u4e2d\u8eab\uff09\n\n\n\n( Python \u30b9\u30af\u30ea\u30d7\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb )\n\n\nnew_calc_2.py\n#!/usr/bin/enb python2.7\n# -*- coding: utf-8 -*-\n\nimport os.path, sys, word2vec, math, codecs\nimport simplejson as json\nimport types\n\ndef pp(obj):\n    if isinstance(obj, list) or isinstance(obj, dict):\n        orig = json.dumps(obj, indent=4)\n        return eval(\"u'''%s'''\" % orig).encode('utf-8')\n    else:\n        return obj\n\n\ndef create_word2vec_model(wakatigaki_textfile, model_size):\n    word2vec.word2vec(wakatigaki_textfile, 'data.bin', size=model_size, verbose=True)\n    return word2vec.load('data.bin')  #return a word2vec model \n\ndef get_choice_if_null_input(choice):\n    print(\"\\n\\n\\n***** \u300c\u7d99\u7d9a \u300d\u304b\u300c\u65b0\u898f \u300d\u306e\u3044\u305a\u308c\u304b\u3092\u9078\u629e\u3057\u3066\u3001\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 *****\\n\")\n    choice = \"\"\n    choice  = raw_input()\n\n    while (choice != \"\u7d99\u7d9a\") and (choice != \"\u65b0\u898f\"):\n        print(\"\\n\u300c\u7d99\u7d9a \u300d\u304b\u300c\u65b0\u898f \u300d\u306e\u3044\u305a\u308c\u304b\u3092\u9078\u629e\u3057\u3066\u3001\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n        choice  = raw_input()\n\n    while (choice == \"\u7d99\u7d9a\") or (choice == \"\u65b0\u898f\"):\n        return choice\n\n\ndef get_correct_corpus_filename(corpus_file): \n    while (corpus_file == \"\"):\n        print(\"\u8aad\u307f\u8fbc\u307e\u305b\u308b\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n        print(\"\\n\u8aad\u307f\u8fbc\u307e\u305b\u308b\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u8a9e\u53e5\u3068\u8a9e\u53e5\u306e\u3042\u3044\u3060\u3092\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3067\u3042\u3051\u305f\u5f62\u5f0f\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\")\n        print(\"\\n\u3053\u306e\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001Mecab \u3068\u3044\u3046\u7121\u6599\u30c4\u30fc\u30eb\u3092\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001mecab -Owakati \u30d5\u30a1\u30a4\u30eb\u540d > \u751f\u6210\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d \u3068\u5165\u529b\u3057\u3066\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\\n\")\n\n        corpus_file = raw_input()\n\n    while (\"txt\" not in corpus_file):\n        print(\"\u8aad\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u304c\u9055\u3044\u307e\u3059\u3002\")\n        print(\"\\n\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u6700\u5f8c\u304c\u300c.txt\u300d \u3067\u7d42\u308f\u308b\u30c6\u30ad\u30b9\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\\n\")\n        corpus_file = \"\"\n        corpus_file = raw_input()\n\n    while not(os.path.exists(corpus_file)):\n        print(\"\u5165\u529b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30ab\u30ec\u30f3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u306a\u304b\u306b\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\")\n        print(\"\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n        corpus_file = raw_input()\n\n    return corpus_file\n\n\ndef get_correct_model_size(model_size):\n    print(\"***** \u30e2\u30c7\u30eb\u306e\u6b21\u5143\u6570\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u534a\u89d2\u6570\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 *****\")\n    model_size = raw_input()\n    return model_size\n\ndef get_number_for_model_size(model_size):\n    print(\"***** \u534a\u89d2\u6570\u5b57\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u534a\u89d2\u6570\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 *****\")\n    model_size = raw_input()\n    return model_size\n\n\ndef get_word2vec_model_when_keizoku( ): \n    message = '''\n\n******************************************************************************************************\n\n\u524d\u56de\u3001\u8aad\u307f\u8fbc\u307e\u305b\u305f\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u3001\u672b\u5c3e\u306b\u300c.txt\u300d\u3092\u542b\u3081\u3066\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n (\u4e0a\u8a18\u306e\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30fb\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\n \u300c\u7d99\u7d9a \u300d\u3092\u9078\u629e\u3057\u305f\u305f\u3081\u3001\u4eca\u56de\u3001\u65b0\u305f\u306b\u30e2\u30c7\u30eb\u30fb\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306f\u4f5c\u6210\u3057\u307e\u305b\u3093\u304c\u3001\n \u610f\u5473\u8a08\u7b97 \u5b9f\u884c\u6642\u306b\u5165\u529b\u3059\u308b\u5358\u8a9e\u304c\u3001\u8a08\u7b97\u5bfe\u8c61\u306e\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306b\u5b58\u5728\u3059\u308b\u306e\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u4e0a\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n******************************************************************************************************\n\n'''\n\n    print(message)\n    corpus_file = raw_input()\n    corpus_file = get_correct_corpus_filename(corpus_file)\n\n    return [corpus_file, word2vec.load('data.bin')]\n    print(\"\\n\\n\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u306e\u751f\u6210\u4f5c\u696d\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\\n\u610f\u5473\u8a08\u7b97\u306e\u7d50\u679c\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\u3002\\n\\n\") \n\n\ndef get_word2v3c_model_when_shinki():\n    print(\"***** \u65b0\u3057\u3044\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u306b\u4f7f\u7528\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 *****\\n\")\n\n    corpus_file = raw_input()\n    corpus_file = get_correct_corpus_filename(corpus_file)\n\n    print(\"***** \u65b0\u3057\u3044\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u751f\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u6b21\u5143\u6570\u3092\u6570\u5b57\u3067\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\uff08\u4f8b\uff1a300\uff09 *****\\n\")\n    model_size = raw_input()\n\n    while (model_size == \"\"):\n        model_size = get_correct_model_size(model_size)\n\n    while not(model_size.isdigit()):\n        model_size = get_number_for_model_size(model_size)\n\n\n    message = '''\n\n\n******************************************************************************************************\n\n\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u304b\u3089\u3001\u610f\u5473\u8a08\u7b97\u3092\u884c\u3046\u305f\u3081\u306e\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u3092\u751f\u6210\u4e2d\u3067\u3059\u3002\n\n\u7d42\u308f\u308b\u307e\u3067\u3001\u6570\u5206\u301c\u6570\u6642\u9593\u5358\u4f4d\u3067\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n******************************************************************************************************\n\n'''\n\n    print(message)\n    return [corpus_file, create_word2vec_model(corpus_file, model_size)]\n    print(\"\\n\\n\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u306e\u751f\u6210\u4f5c\u696d\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\\n\u610f\u5473\u8a08\u7b97\u306e\u7d50\u679c\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\u3002\\n\\n\")\n\n\ndef get_word_frequency_in_corpus(input_word, corpus_file):\n    count = 0\n\n    f = open(corpus_file)\n    lines = f.readlines()\n\n    for line in lines:\n        if input_word in line:\n            count += 1\n        else:\n            count = count\n\n    f.close()\n    return(count)\n\n\ndef check_and_register_input_word(counterpart_word_at_example, corpus_file, word_list):\n    input = \"\" # \u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u306e\u30e6\u30fc\u30b6\u5165\u529b\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(str\u578b\uff09\n\n    while (input  == \"\"):\n        print(\"\\n\\n\\n***** \u3055\u304d\u307b\u3069\u306e\u4f8b\u3067\u3001\u300c\" + str(counterpart_word_at_example) + \"\u300d\u306e\u4f4d\u7f6e\u306b\u304f\u308b\u8a00\u8449\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5165\u529b\u5f8c\u306b\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u4ee5\u4e0b\u540c\u3058\uff09 *****\")\n        input = raw_input()\n        input = input.strip() # \u5165\u529b\u6587\u5b57\u5217\u306e\u3046\u3061\u3001\u7a7a\u767d\u3092\u9664\u53bb\u3002\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u306e\u307f\u5165\u529b\u3057\u305f\u5834\u5408\u306f\u3001\u4e0b\u306e\u51e6\u7406\u3067\u3001\"\" \u3082\u3057\u304f\u306f None \u6271\u3044\u3055\u308c\u308b\n\n        if (input == \"\") or (input is None):\n            print(\"\u4f55\u3082\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u5358\u8a9e\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n            continue\n\n        if input != \"\":    \n            rowcount = 0\n            rowcount = get_word_frequency_in_corpus(input, corpus_file)\n\n            while (rowcount == 0):\n                print(\"\\n\\n\u5165\u529b\u3057\u305f\u5358\u8a9e\u306f\u3001\u610f\u5473\u8a08\u7b97\u3092\u884c\u3046\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u306a\u304b\u306b\u3001\u767b\u5834\u3057\u306a\u3044\u5358\u8a9e\u3067\u3059\u3002\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306b\u5b58\u5728\u3059\u308b\u5358\u8a9e\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n                input = raw_input()\n                rowcount = get_word_frequency_in_corpus(input, corpus_file)\n\n            word_list.append(input) #Terminal\u753b\u9762\u304b\u3089\u306e\u6a19\u6e96\u5165\u529b\u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u8981\u7d20\u306b\u8ffd\u8a18\n            print(\"\\n\\n\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3057\u305f\u3002\")\n            print(\"\\n\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u4e2d\u3001\u3053\u306e\u5358\u8a9e\u3092\u542b\u3080\u884c\u6570\u306f\u3001\" + str(rowcount) + \"\u884c \u3067\u3057\u305f\u3002\")\n\n    return word_list\n    del input\n\n\ndef execute_meaning_calc(corpus_file, word2vec_model, word_list, result_list):\n    word_list = check_and_register_input_word(\"\u6771\u4eac\", corpus_file, word_list)\n    word_list = check_and_register_input_word(\"\u30a2\u30e1\u30ea\u30ab\", corpus_file, word_list)\n    word_list = check_and_register_input_word(\"\u65e5\u672c\", corpus_file, word_list)\n\n    print(\"\\n\\n***** \u610f\u5473\u8a08\u7b97\u306e\u5b9f\u884c\u306b\u5fc5\u8981\u306a\u5165\u529b\u304c\u3059\u3079\u3066\u7d42\u308f\u308a\u307e\u3057\u305f\u3002 *****\\n\")\n\n    ### ( \u30e6\u30fc\u30b6\u5b9a\u7fa9\u6587\u5b57\u5217 \u3092 word2vec_model.analogy\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3057\u3066\u3001\u610f\u5473\u8a08\u7b97\u3092\u5b9f\u884c )\n    if (len(word_list) == 3):\n        try:\n            result = word2vec_model.analogy(pos=[word_list[0], word_list[1]],  neg=[word_list[2]], n=10)\n            given_word_pair = str(word_list[2]) + \" => \" + str(word_list[0])  + \" , \" + str(round(math.floor(1), 3)) + \"\\n\"\n\n            print(\"\\n\\n ***************************** \u610f\u5473\u8a08\u7b97\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\u7d50\u679c\u306f\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 *****************************\")\n            print(\"\\n\\n\u3010\u6700\u521d\u306b\u4e0e\u3048\u305f\u8a9e\u53e5\u306e\u610f\u5473\u95a2\u4fc2 \u3011\\n\")\n            print(given_word_pair)\n\n            output_file_line = given_word_pair.replace(\" \" , \"\") # \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3092\u8a70\u3081\u308b\n            output_file_line = output_file_line.replace('\"', '')\n            output_file_line = output_file_line.replace(\"=>\" ,\",\")\n            result_list.append(output_file_line)\n\n            print(\"\\n\\n\u3010\u6307\u5b9a\u8a9e\u53e5\u306b\u95a2\u3057\u3066\u3001\u300c\u6700\u521d\u306b\u4e0e\u3048\u305f\u8a9e\u53e5\u306e\u30da\u30a2\u300d \u3068 \u540c\u7b49\u306e\u610f\u5473\u95a2\u4fc2\u306e\u4e2d\u306b\u3042\u308b\u3068\u3001word2vec \u304c\u63a8\u5b9a\u3057\u305f \u8a9e\u53e5\u306e\u7d44\u307f\u5408\u308f\u305b \u3011\")\n            print(\"\\n    ( \u6700\u5f8c\u306b\u66f8\u304b\u308c\u305f\u6570\u5024\u304c 1.00 \u306b\u8fd1\u3044\u8a9e\u53e5\u306e\u30da\u30a2\u307b\u3069\u3001\u7d50\u679c\u306e\u78ba\u304b\u3089\u3057\u3055\u306b\u81ea\u4fe1\u304c\u3042\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5224\u65ad\u3057\u307e\u3057\u305f\u3002 )    \\n\\n\")\n\n            for word in result:\n                esitimated_word_pair = str(word_list[1]) + \" => \" + str(word[0]) + \" , \" + str(round(word[1],3))\n                std_output_line = esitimated_word_pair.replace('\"', '')\n                print(std_output_line)\n\n                std_output_line = esitimated_word_pair.replace(\" \" , \"\") # \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3092\u8a70\u3081\u308b\n                std_output_line = esitimated_word_pair.replace(\"=>\" ,\",\")\n                output_file_line = std_output_line + \"\\n\"\n                result_list.append(output_file_line)\n\n            print(\"\\n\\n\u51e6\u7406\u304c\u3059\u3079\u3066\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n        except:\n            print(\"\\n\\n\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u8aad\u307f\u8fbc\u3093\u3060\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306b\uff11\u5ea6\u3082\u51fa\u73fe\u3057\u306a\u3044\u8a9e\u53e5\u3092\u5165\u529b\u3057\u305f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\")\n        finally:\n            print(\"\\n\\n ***************************** \u610f\u5473\u8a08\u7b97\u304c\u7d42\u308f\u308a\u307e\u3057\u305f*********************************************************\")\n            del word_list\n            return result_list\n\n\ndef get_user_instruction():\n    print(\"\\n\\n\\n\u3064\u3065\u3051\u3066\u4ed6\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u610f\u5473\u8a08\u7b97\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u300c\u3064\u3065\u3051\u308b\u300d\u3092\u3001\u7d42\u308f\u308b\u5834\u5408\u306f\u3001\u300c\u304a\u308f\u308a\u300d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\\n\")\n    instruction = raw_input()\n\n    while (instruction.strip() == \"\") or (instruction.strip() is None):  # \u5165\u529b\u6587\u5b57\u5217\u306e\u3046\u3061\u3001\u7a7a\u767d\u3092\u9664\u53bb\u3057\u3066\u3001\u5224\u5b9a\n        print(\"\u4f55\u3082\u5165\u529b\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3001\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3057\u304b\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\\n\u300c\u3064\u3065\u3051\u308b\u300d \u3082\u3057\u304f\u306f \u300c\u304a\u308f\u308a\u300d\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n        instruction = raw_input()\n\n    while (instruction != \"\u3064\u3065\u3051\u308b\") and (instruction != \"\u304a\u308f\u308a\"):\n        print(\"\u300c\u3064\u3065\u3051\u308b\u300d \u3082\u3057\u304f\u306f \u300c\u304a\u308f\u308a\u300d\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n        instruction = \"\"\n        instruction = raw_input()\n\n\n    if (instruction == \"\u3064\u3065\u3051\u308b\"):\n        user_instruction = instruction\n\n    if (instruction == \"\u304a\u308f\u308a\"):\n        user_instruction = instruction\n\n    return user_instruction\n\n\n\n### [\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9 \u304a\u308f\u308a]\n\n### [\u4ee5\u4e0b\u3001\u51e6\u7406\u306e\u672c\u4f53 \uff08main \uff09\n\n### ( \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u76f4\u5f8c\u306b\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u305b\u308b\u8aac\u660e\u6587 )\n\nmessage = '''\n\n\n***************************************( \u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b63\u5e38\u306b\u8d77\u52d5\u3057\u307e\u3057\u305f )***************************************\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u300c\u610f\u5473\u8a08\u7b97 \u96fb\u5353\u6a5f \u300d\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\u3001\u30c6\u30ad\u30b9\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u305f\u3000\u548c\u6587 \u3082\u3057\u304f\u306f \u82f1\u6587 \u6587\u66f8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u304c\u7d42\u308f\u308b\u3068\u3001\u6587\u66f8\u5185\u306b\u767b\u5834\u3059\u308b \u5358\u8a9e  \u3069\u3046\u3057\u306e\u610f\u5473\u4e0a\u306e\u8ddd\u96e2\u95a2\u4fc2\u3092\u3001\u6570\u5b66\u306e\u3010\u591a\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u3011\u306b\u69cb\u9020\u5316\u3059\u308b\u6570\u5b66\u51e6\u7406\u3092\u884c\u3044\u3001\u6587\u66f8\u306b\u767b\u5834\u3059\u308b\u5358\u8a9e \u3069\u3046\u3057\u306e\u300c\u610f\u5473\u300d\u306e\u8db3\u3057\u7b97\u30fb\u5f15\u304d\u7b97 \u3092 \u304a\u3053\u306a\u3044\u307e\u3059\u3002\n\n\n\u4f8b\u3048\u3070\u3001\u8aad\u307f\u8fbc\u3093\u3060\u6587\u66f8\u306e\u306a\u304b\u306b\u3001\u300c\u65e5\u672c \u300d\u30fb\u300c\u30a2\u30e1\u30ea\u30ab \u300d\u30fb\u300c\u6771\u4eac \u300d\u30fb\u300c\u30ef\u30b7\u30f3\u30c8\u30f3 \u300d\u306e\uff14\u3064\u306e\u5358\u8a9e\u304c\u66f8\u304b\u308c\u3066\u3044\u305f\u3068\u3057\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u6587\u66f8\u3092\u8aad\u307f\u8fbc\u307e\u305b\u305f\u5f8c\u3067\u3001\u753b\u9762\u4e0a\u3067\u3001 \u300c\u65e5\u672c \u300d\u3001 \u300c\u6771\u4eac \u300d\u3001 \u300c\u30a2\u30e1\u30ea\u30ab \u300d \u3068\u3044\u3046 \uff13\u3064\u306e\u5358\u8a9e\u3092\u5165\u529b\u3059\u308b\u3068\u3001\n\u300c\u65e5\u672c\u306b\u3068\u3063\u3066\u306e\u6771\u4eac \u300d\u304c\u3001\u300c\u30a2\u30e1\u30ea\u30ab \u300d\u306b\u3068\u3063\u3066\u306e\u4f55\u306b\u76f8\u5f53\u3059\u308b\u304b\u3092\u63a8\u6e2c\u3057\u3001\u6570\u5b66\u7684\u306b\u59a5\u5f53\u3068\u601d\u308f\u308c\u308b\u5358\u8a9e\u304c\u3001\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u4e0a\u306e\u5165\u529b\u4f8b\u3067\u306f\u3001\u300c\u30ef\u30b7\u30f3\u30c8\u30f3 \u300d\u3068\u3044\u3046\u8a00\u8449\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n\n\u5165\u529b\u3059\u308b\u5358\u8a9e\u3068\u3001\u610f\u5473\u8a08\u7b97\u306e\u7d50\u679c\u51fa\u529b\u3067\u8868\u793a\u3055\u308c\u308b\u5358\u8a9e\u306f\u3001\u3044\u305a\u308c\u3082 \u6700\u521d\u306b\u8aad\u307f\u8fbc\u307e\u305b\u305f\u6587\u66f8\u306b\u767b\u5834\u3059\u308b\u5358\u8a9e\u3067\u3059\u3002\n\n\u5358\u8a9e\u3092\u5165\u529b\u3059\u308b\u969b\u3001\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306b\u767b\u5834\u3057\u306a\u3044\u5358\u8a9e\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n****************************************************************************************************************\n\n'''\n\nprint(message)\n\n### \uff08\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f \u3068 word2vec\u30e2\u30c7\u30eb\u306e\u751f\u6210 \uff09\n\nmessage = '''\n\n\n\n***** \u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304b\u308c\u305f\u6587\u7ae0\u306e\u610f\u5473\u7a7a\u9593\u306e\u69cb\u9020\u3092\u3001\u6570\u5b66\u7684\u306a\u300c\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u300d\u306b\u5909\u63db\u51e6\u7406\u3057\u307e\u3059\u3002*****\n\n\u904e\u53bb\u306b \u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u305f\u3053\u3068\u304c\u3042\u308a\u3001\u305d\u306e\u3068\u304d\u751f\u6210\u3055\u308c\u305f \uff08\u30d5\u30a1\u30a4\u30eb\u540d\uff09'data.bin' \u306e\u30c7\u30fc\u30bf\u30fb\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u300c\u7d99\u7d9a\u300d\u3068\u5165\u529b\u3057\u3001\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \n\n\u4eca\u56de\u3001\u65b0\u3057\u304f\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u3001\u4f5c\u696d\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u300c\u65b0\u898f\u300d\u3068\u5165\u529b\u5f8c\u3001\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3059\u3067\u306b\u751f\u6210\u6e08\u307f\u306e'data.bin'\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u5229\u7528\u3059\u308b\u3068\u3001'data.bin'\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\u306b\u304b\u304b\u308b\u6570\u5206\u301c\u6570\u5341\u5206\u4ee5\u4e0a\u306e\u8a08\u7b97\u5b9f\u884c\u6642\u9593\u3092\u7bc0\u7d04\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n****************************************************************************************************************************\n\n'''\n\nprint(message)\nchoice = raw_input()\n\nwhile (choice  != \"\u7d99\u7d9a\") and (choice != \"\u65b0\u898f\"):\n    choice = get_choice_if_null_input(choice)\n\nword2vec_model = \"\"\n\nif (choice == \"\u7d99\u7d9a\"):\n    corpus_file, word2vec_model = get_word2vec_model_when_keizoku()\nelif (choice == \"\u65b0\u898f\"):\n    corpus_file, word2vec_model = get_word2v3c_model_when_shinki()\nelse:\n    pass\n\n### \u30e6\u30fc\u30b6\u5165\u529b\u6587\u5b57\u5217 \u3092 word2vec\u30e1\u30bd\u30c3\u30c9\u306e\u5404\u5f15\u6570\u306b\u8a2d\u5b9a\n\nword_list = [] # \u751f\u6210\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u683c\u7d0d\u5148\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08list\u578b\uff09\u306e\u5ba3\u8a00\u3068\u521d\u671f\u5316\nresult_list = []\n\n# \u610f\u5473\u8a08\u7b97\u3092\u5b9f\u884c\u3057\u3066\u3001\u7d50\u679c\u3092 result_list \u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\nresult_list = execute_meaning_calc(corpus_file, word2vec_model, word_list, result_list)\n\n# \u610f\u5473\u8a08\u7b97 \u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3059\u308b\nuser_instruction =  \"\"\n\nif user_instruction == \"\":\n    user_instruction =  get_user_instruction()\n    while (user_instruction == \"\u3064\u3065\u3051\u308b\"):\n        word_list = []\n        result_list = execute_meaning_calc(corpus_file, word2vec_model, word_list, result_list)\n        user_instruction =  \"\"\n        user_instruction =  get_user_instruction()\n\n    if user_instruction == \"\u304a\u308f\u308b\":\n        print(\"\u610f\u5473\u8a08\u7b97 \u96fb\u5353\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\\n\\n\")\n\n\n\n# \u4f5c\u696d\u5185\u5bb9\u3092 output.csv \u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3057\u3066\u4fdd\u5b58\nf = open(\"output.csv\", 'w')\nf.writelines(result_list)\nf.close()\n\nmessage = '''\n\n************************************************************************************************************\n\n\n\u610f\u5473\u8a08\u7b97\u96fb\u5353\u3078\u306e\u5165\u529b\u3068\u7d50\u679c\u3092\u3001\\\"output.csv\\\" \u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\n\n\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30fb\u30d5\u30a1\u30a4\u30eb \u3068 \u6587\u66f8\u30d5\u30a1\u30a4\u30eb \u304c\u7f6e\u304b\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u306b\u3042\u308a\u307e\u3059\u3002\n\n\n**************************( \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u306f\u3053\u308c\u3067\u7d42\u308f\u308a\u3067\u3059\u3002\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002 )**************************\n\n'''\n\nprint(message)\n\n\n\n## [\u524d\u56de\u306e _Qiita_ \u6295\u7a3f\u8a18\u4e8b](http://qiita.com/HirofumiYashima/items/c09866870332bbeccd19) \u3067\u7d39\u4ecb\u3057\u305f\u30b3\u30f3\u30bd\u30fc\u30eb\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6a5f\u80fd\u62e1\u5f35\u7248\u3092\u3064\u304f\u3063\u3066\u307f\u305f\u3002\n\n#### **\uff08\u524d\u56de \u306e \u8a18\u4e8b)**\n![pic.png](https://qiita-image-store.s3.amazonaws.com/0/43487/71cfc43a-931a-c9ac-9a62-0baa18e3d64c.png)\n\n#\u3000\uff08\u62e1\u5f35\u3057\u305f\u6a5f\u80fd\uff09\n### _word2vec_ \u610f\u5473\u8a08\u7b97 \u51e6\u7406\u3092\u3000\u300c\u3064\u3065\u3051\u307e\u3059\u304b\uff1f\u300d \u3068\u805e\u3044\u3066\u304f\u308b\u753b\u9762\u3092\u8ffd\u52a0\u3002\n### \u300c\u304a\u308f\u308b\u300d \u3068 \u5165\u529b\u3059\u308b\u307e\u3067\u3001\u4f55\u56de\u3067\u3082\u3001\u524d\u56de\u3068\u7570\u306a\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u3069\u3046\u3057\u306e\u610f\u5473\u8a08\u7b97\u3092\u884c\u3048\u308b\u4ed5\u69d8\u306b\u5909\u66f4\u3002\n### \u3010\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3011\n####\u3059\u3079\u3066\u306e\u300c\u5165\u529b\u30ad\u30fc\u30ef\u30fc\u30c9 \u3068 \u610f\u5473\u8a08\u7b97\u306e\u7d50\u679c\u300d\u304c\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3002\n\n\n## \uff08 \u4f5c\u6210 & \u6295\u7a3f\u52d5\u6a5f \uff09\n###### \u4ed5\u4e8b\u5148\u306e\u4f1a\u793e\u95a2\u4fc2\u3067\u3001 _word2vec_ \u89e3\u6790\u3092\u884c\u3063\u3066\u3044\u3066\u3001_Google Mikolov_ \u8ad6\u6587 \u306e\u3053\u3068\u3068\u304b \u8aac\u660e\u3057\u3066\u3044\u305f\u3089\u3001\u610f\u5473\u306e\u8db3\u3057\u7b97\u5f15\u304d\u7b97\u3059\u308b\u3068\u304d\uff08\u203b _Python_ \u306e word2vec_analogy()\u30e1\u30bd\u30c3\u30c9\uff09\u306b\u3001\u5f15\u6570\u306b\u6e21\u3059\u5358\u8a9e\u306e\u9806\u756a\u304c\u308f\u304b\u3089\u306a\u3044 \uff08 \u30dd\u30b8\u30c6\u30a3\u30d6\u30fb\u30ef\u30fc\u30c9\u3063\u3066\u306a\u306b\uff1f\u3000\u30cd\u30ac\u30c6\u30a3\u30d6\u30fb\u30ef\u30fc\u30c9\u306f\uff1f\uff1f \u306a\u3093\u3067\u30dd\u30b8\u306b\uff12\u3064\u3042\u308b\u306e\uff1f _etc..._ ) :disappointed_relieved: :weary: :pensive: \n\n##### \u3067\u3001\u8aac\u660e\u3057\u3066\u3082\u3001\u307e\u305f\u4ed6\u306e\u540c\u50da\u306a\u308a\u4e0a\u53f8\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u5bfe\u8a71\u5f0f\u306b\u5358\u8a9e\u3092\u5165\u529b\u3059\u308b\u3068\u3001\u7b54\u3048\u304c\u304b\u3048\u3063\u3066\u304f\u308b\uff08 & \u30b3\u30fc\u30d1\u30b9\u306b\u5b58\u5728\u3057\u306a\u3044\u5358\u8a9e\u3092\u5165\u308c\u305f\u308a\u3001\u30ab\u30ec\u30f3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306a\u3044\u30c6\u30ad\u30b9\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307e\u305b\u3088\u3046\u3068\u3057\u305f\u3089\u30a8\u30e9\u30fc\u304c\u305d\u308c\u306a\u308a\u306b\u3061\u3083\u3093\u3068\u51fa\u308b\uff09\u30b3\u30f3\u30bd\u30fc\u30eb\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u304f\u3063\u3066\u307f\u305f :computer: \n\n##### \u6570\u65e5\u5f8c\u306b\u3001\u307b\u304b\u306e\u4eba\u306b\u3082\u307f\u305b\u305f\u3044\u304b\u3089\u3001\u305d\u3046\u3060\u541b\u3001\u30a6\u30a7\u30d6\u304b\u3089\u3060\u308c\u3067\u3082\u898b\u3089\u308c\u308b\u3042\u308c\u3001_Qiita_ \u306b\u3042\u3052\u3066\u3088\u3001\u3068\u8a00\u308f\u308c\u305f\u306e\u3067\u3001\u30a2\u30c3\u30d7\u3057\u3066\u3001\u7a1a\u62d9\u306a\u304c\u3089\u516c\u5171\u30a6\u30a7\u30d6\u7a7a\u9593\u306b\u3042\u3052\u3055\u305b\u3066\u3044\u305f\u3060\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \uff08\u672c\u6765\u3067\u3042\u308c\u3070\u3001_Django_ \u3084\u3089\u306a\u3093\u3084\u3089\u3064\u304b\u3063\u3066\u3001\u304d\u3061\u3093\u3068\u30a6\u30a7\u30d6\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u64cd\u4f5c\u3067\u304d\u308b _Web_ \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u304c\u3001\u3001\u3001\uff09\n\n## **\uff08 \u5b9f\u884c\u753b\u9762 \uff09**\n### \u203b \u30b3\u30fc\u30c9\u306e\u5168\u6587\u306f\u3001\u3053\u306e\u8a18\u4e8b\u306e\u6700\u5f8c\u306b\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n####\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u306f\u3001[\u5bb6\u96fb\u30fb\u30b2\u30fc\u30e0\u65b0\u5546\u54c1 \u60c5\u5831\u30cb\u30e5\u30fc\u30b9\u30fb\u30b5\u30a4\u30c8 \u300cAV watch\u300d](http://av.watch.impress.co.jp/)   \u5168\u904e\u53bb\u8a18\u4e8b\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u30fb\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\n\n## **\uff08\uff11\uff09_Python new_calc_2.py_ \u3067\u8d77\u52d5**\n### **\uff08\u8d77\u52d5\u753b\u9762\uff09**\n![pic_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/f457fc7f-f7ba-4714-c359-198d1ab444ba.png)\n\n#### **\uff08\uff12\uff09\u610f\u5473\u8a08\u7b97\u3092\u884c\u3046 \u5358\u8a9e \u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5165\u529b**\n![pic_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/24e849e9-e4b8-cc1f-0563-645d5ad41709.png)\n\n#### **\uff08\uff13\uff09\u610f\u5473\u8a08\u7b97 \u5b8c\u4e86\u3002\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b**\n![pic_3.png](https://qiita-image-store.s3.amazonaws.com/0/43487/7892f0c5-590b-d2e0-a3f1-8f5042ed1356.png)\n\n#### **\uff08\uff14\uff09\u5225\u306e\u5358\u8a9e\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3001\u3064\u3065\u3051\u3066\u610f\u5473\u8a08\u7b97\u3092\u7d9a\u884c\u3059\u308b\u304b\u3001\u305f\u305a\u306d\u3066\u304f\u308b**\n![pic_4.png](https://qiita-image-store.s3.amazonaws.com/0/43487/5f60a0ac-2f06-6c34-818e-d437ead61256.png)\n\n#### **\uff08\uff15\uff09\u300c\u3064\u3065\u3051\u308b\u300d\u3092\u5165\u529b\u3059\u308b\u3068\u3001\u65b0\u305f\u306a \u5358\u8a9e\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u5165\u529b\u304c\u6c42\u3081\u3089\u308c\u308b**\n![pic_5.png](https://qiita-image-store.s3.amazonaws.com/0/43487/a01cf5be-0a30-4095-4a5a-8e749c51f1f3.png)\n\n\n![pic_6.png](https://qiita-image-store.s3.amazonaws.com/0/43487/3a42d5e8-7a15-4e6c-155a-c6811d717eec.png)\n\n\n![pic_7.png](https://qiita-image-store.s3.amazonaws.com/0/43487/e9e10f39-7393-8784-0073-b885a5a04416.png)\n\n\n![pic_8.png](https://qiita-image-store.s3.amazonaws.com/0/43487/8df1943f-3a9a-f974-48d2-633aae5fd528.png)\n\n\n![pic_9.png](https://qiita-image-store.s3.amazonaws.com/0/43487/25d1599f-43a9-d348-121b-dbf0ba7e8c9b.png)\n\n\n![pic_10.png](https://qiita-image-store.s3.amazonaws.com/0/43487/c1e53bc7-c198-5ac6-5071-2bdb80509a01.png)\n\n### **\uff08\uff16\uff09\u300c\u304a\u308f\u308a\u300d\u3068\u5165\u529b\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b8c\u4e86\u3059\u308b**\n### \u3053\u308c\u307e\u3067\u306b\u5b9f\u884c\u3057\u305f\u610f\u5473\u8a08\u7b97\u306e\u5165\u529b\u5358\u8a9e \u3068 \u7d50\u679c\u306e\u3059\u3079\u3066\u304c\u3001\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u307f\u30fb\u4fdd\u5b58\u3055\u308c\u308b\u3002\n![pic_11.png](https://qiita-image-store.s3.amazonaws.com/0/43487/c774fcc5-29ce-35a5-e7cd-6d2f0af850ea.png)\n\n\n![pic_12.png](https://qiita-image-store.s3.amazonaws.com/0/43487/af7736ec-651a-a141-2a63-c1738af9ea11.png)\n\n### **\uff08\u7d50\u679c\u51fa\u529b\u30d5\u30a1\u30a4\u30eb _output.csv_ \u306e\u4e2d\u8eab\uff09**\n![pic_13.png](https://qiita-image-store.s3.amazonaws.com/0/43487/b416e4d0-e9d7-7e72-dfca-f5c3240f8947.png)\n\n\n## **( Python \u30b9\u30af\u30ea\u30d7\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb )**\n```{python:new_calc_2.py}\n#!/usr/bin/enb python2.7\n# -*- coding: utf-8 -*-\n\nimport os.path, sys, word2vec, math, codecs\nimport simplejson as json\nimport types\n\ndef pp(obj):\n    if isinstance(obj, list) or isinstance(obj, dict):\n        orig = json.dumps(obj, indent=4)\n        return eval(\"u'''%s'''\" % orig).encode('utf-8')\n    else:\n        return obj\n\n\ndef create_word2vec_model(wakatigaki_textfile, model_size):\n    word2vec.word2vec(wakatigaki_textfile, 'data.bin', size=model_size, verbose=True)\n    return word2vec.load('data.bin')  #return a word2vec model \n\ndef get_choice_if_null_input(choice):\n    print(\"\\n\\n\\n***** \u300c\u7d99\u7d9a \u300d\u304b\u300c\u65b0\u898f \u300d\u306e\u3044\u305a\u308c\u304b\u3092\u9078\u629e\u3057\u3066\u3001\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 *****\\n\")\n    choice = \"\"\n    choice  = raw_input()\n\n    while (choice != \"\u7d99\u7d9a\") and (choice != \"\u65b0\u898f\"):\n        print(\"\\n\u300c\u7d99\u7d9a \u300d\u304b\u300c\u65b0\u898f \u300d\u306e\u3044\u305a\u308c\u304b\u3092\u9078\u629e\u3057\u3066\u3001\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n        choice  = raw_input()\n        \n    while (choice == \"\u7d99\u7d9a\") or (choice == \"\u65b0\u898f\"):\n        return choice\n\n\ndef get_correct_corpus_filename(corpus_file): \n    while (corpus_file == \"\"):\n        print(\"\u8aad\u307f\u8fbc\u307e\u305b\u308b\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n        print(\"\\n\u8aad\u307f\u8fbc\u307e\u305b\u308b\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u8a9e\u53e5\u3068\u8a9e\u53e5\u306e\u3042\u3044\u3060\u3092\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3067\u3042\u3051\u305f\u5f62\u5f0f\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\")\n        print(\"\\n\u3053\u306e\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001Mecab \u3068\u3044\u3046\u7121\u6599\u30c4\u30fc\u30eb\u3092\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001mecab -Owakati \u30d5\u30a1\u30a4\u30eb\u540d > \u751f\u6210\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d \u3068\u5165\u529b\u3057\u3066\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\\n\")\n\n        corpus_file = raw_input()\n    \n    while (\"txt\" not in corpus_file):\n        print(\"\u8aad\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u304c\u9055\u3044\u307e\u3059\u3002\")\n        print(\"\\n\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u6700\u5f8c\u304c\u300c.txt\u300d \u3067\u7d42\u308f\u308b\u30c6\u30ad\u30b9\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\\n\")\n        corpus_file = \"\"\n        corpus_file = raw_input()\n    \n    while not(os.path.exists(corpus_file)):\n        print(\"\u5165\u529b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30ab\u30ec\u30f3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u306a\u304b\u306b\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\")\n        print(\"\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n        corpus_file = raw_input()\n    \n    return corpus_file\n\n\ndef get_correct_model_size(model_size):\n    print(\"***** \u30e2\u30c7\u30eb\u306e\u6b21\u5143\u6570\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u534a\u89d2\u6570\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 *****\")\n    model_size = raw_input()\n    return model_size\n\ndef get_number_for_model_size(model_size):\n    print(\"***** \u534a\u89d2\u6570\u5b57\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u534a\u89d2\u6570\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 *****\")\n    model_size = raw_input()\n    return model_size\n    \n\ndef get_word2vec_model_when_keizoku( ): \n    message = '''\n    \n******************************************************************************************************\n\n\u524d\u56de\u3001\u8aad\u307f\u8fbc\u307e\u305b\u305f\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u3001\u672b\u5c3e\u306b\u300c.txt\u300d\u3092\u542b\u3081\u3066\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n (\u4e0a\u8a18\u306e\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30fb\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n   \n \u300c\u7d99\u7d9a \u300d\u3092\u9078\u629e\u3057\u305f\u305f\u3081\u3001\u4eca\u56de\u3001\u65b0\u305f\u306b\u30e2\u30c7\u30eb\u30fb\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306f\u4f5c\u6210\u3057\u307e\u305b\u3093\u304c\u3001\n \u610f\u5473\u8a08\u7b97 \u5b9f\u884c\u6642\u306b\u5165\u529b\u3059\u308b\u5358\u8a9e\u304c\u3001\u8a08\u7b97\u5bfe\u8c61\u306e\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306b\u5b58\u5728\u3059\u308b\u306e\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u4e0a\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n******************************************************************************************************\n\n'''\n\n    print(message)\n    corpus_file = raw_input()\n    corpus_file = get_correct_corpus_filename(corpus_file)\n\n    return [corpus_file, word2vec.load('data.bin')]\n    print(\"\\n\\n\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u306e\u751f\u6210\u4f5c\u696d\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\\n\u610f\u5473\u8a08\u7b97\u306e\u7d50\u679c\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\u3002\\n\\n\") \n   \n\ndef get_word2v3c_model_when_shinki():\n    print(\"***** \u65b0\u3057\u3044\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u306b\u4f7f\u7528\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 *****\\n\")\n\n    corpus_file = raw_input()\n    corpus_file = get_correct_corpus_filename(corpus_file)\n\n    print(\"***** \u65b0\u3057\u3044\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u751f\u6210\u3059\u308b\u30e2\u30c7\u30eb\u306e\u6b21\u5143\u6570\u3092\u6570\u5b57\u3067\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\uff08\u4f8b\uff1a300\uff09 *****\\n\")\n    model_size = raw_input()\n\n    while (model_size == \"\"):\n        model_size = get_correct_model_size(model_size)\n    \n    while not(model_size.isdigit()):\n        model_size = get_number_for_model_size(model_size)\n\n\n    message = '''\n\n\n******************************************************************************************************\n\n\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u304b\u3089\u3001\u610f\u5473\u8a08\u7b97\u3092\u884c\u3046\u305f\u3081\u306e\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u3092\u751f\u6210\u4e2d\u3067\u3059\u3002\n\n\u7d42\u308f\u308b\u307e\u3067\u3001\u6570\u5206\u301c\u6570\u6642\u9593\u5358\u4f4d\u3067\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n******************************************************************************************************\n\n'''\n\n    print(message)\n    return [corpus_file, create_word2vec_model(corpus_file, model_size)]\n    print(\"\\n\\n\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u306e\u751f\u6210\u4f5c\u696d\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\\n\u610f\u5473\u8a08\u7b97\u306e\u7d50\u679c\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\u3002\\n\\n\")\n   \n\ndef get_word_frequency_in_corpus(input_word, corpus_file):\n    count = 0\n\n    f = open(corpus_file)\n    lines = f.readlines()\n    \n    for line in lines:\n        if input_word in line:\n            count += 1\n        else:\n            count = count\n\n    f.close()\n    return(count)\n\n\ndef check_and_register_input_word(counterpart_word_at_example, corpus_file, word_list):\n    input = \"\" # \u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u306e\u30e6\u30fc\u30b6\u5165\u529b\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(str\u578b\uff09\n\n    while (input  == \"\"):\n        print(\"\\n\\n\\n***** \u3055\u304d\u307b\u3069\u306e\u4f8b\u3067\u3001\u300c\" + str(counterpart_word_at_example) + \"\u300d\u306e\u4f4d\u7f6e\u306b\u304f\u308b\u8a00\u8449\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5165\u529b\u5f8c\u306b\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u4ee5\u4e0b\u540c\u3058\uff09 *****\")\n        input = raw_input()\n        input = input.strip() # \u5165\u529b\u6587\u5b57\u5217\u306e\u3046\u3061\u3001\u7a7a\u767d\u3092\u9664\u53bb\u3002\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u306e\u307f\u5165\u529b\u3057\u305f\u5834\u5408\u306f\u3001\u4e0b\u306e\u51e6\u7406\u3067\u3001\"\" \u3082\u3057\u304f\u306f None \u6271\u3044\u3055\u308c\u308b\n\n        if (input == \"\") or (input is None):\n            print(\"\u4f55\u3082\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u5358\u8a9e\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n            continue\n        \n        if input != \"\":    \n            rowcount = 0\n            rowcount = get_word_frequency_in_corpus(input, corpus_file)\n       \n            while (rowcount == 0):\n                print(\"\\n\\n\u5165\u529b\u3057\u305f\u5358\u8a9e\u306f\u3001\u610f\u5473\u8a08\u7b97\u3092\u884c\u3046\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u306a\u304b\u306b\u3001\u767b\u5834\u3057\u306a\u3044\u5358\u8a9e\u3067\u3059\u3002\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306b\u5b58\u5728\u3059\u308b\u5358\u8a9e\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n                input = raw_input()\n                rowcount = get_word_frequency_in_corpus(input, corpus_file)\n            \n            word_list.append(input) #Terminal\u753b\u9762\u304b\u3089\u306e\u6a19\u6e96\u5165\u529b\u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u8981\u7d20\u306b\u8ffd\u8a18\n            print(\"\\n\\n\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3057\u305f\u3002\")\n            print(\"\\n\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u4e2d\u3001\u3053\u306e\u5358\u8a9e\u3092\u542b\u3080\u884c\u6570\u306f\u3001\" + str(rowcount) + \"\u884c \u3067\u3057\u305f\u3002\")\n    \n    return word_list\n    del input\n\n\ndef execute_meaning_calc(corpus_file, word2vec_model, word_list, result_list):\n    word_list = check_and_register_input_word(\"\u6771\u4eac\", corpus_file, word_list)\n    word_list = check_and_register_input_word(\"\u30a2\u30e1\u30ea\u30ab\", corpus_file, word_list)\n    word_list = check_and_register_input_word(\"\u65e5\u672c\", corpus_file, word_list)\n\n    print(\"\\n\\n***** \u610f\u5473\u8a08\u7b97\u306e\u5b9f\u884c\u306b\u5fc5\u8981\u306a\u5165\u529b\u304c\u3059\u3079\u3066\u7d42\u308f\u308a\u307e\u3057\u305f\u3002 *****\\n\")\n\n    ### ( \u30e6\u30fc\u30b6\u5b9a\u7fa9\u6587\u5b57\u5217 \u3092 word2vec_model.analogy\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3057\u3066\u3001\u610f\u5473\u8a08\u7b97\u3092\u5b9f\u884c )\n    if (len(word_list) == 3):\n        try:\n            result = word2vec_model.analogy(pos=[word_list[0], word_list[1]],  neg=[word_list[2]], n=10)\n            given_word_pair = str(word_list[2]) + \" => \" + str(word_list[0])  + \" , \" + str(round(math.floor(1), 3)) + \"\\n\"\n\n            print(\"\\n\\n ***************************** \u610f\u5473\u8a08\u7b97\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\u7d50\u679c\u306f\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 *****************************\")\n            print(\"\\n\\n\u3010\u6700\u521d\u306b\u4e0e\u3048\u305f\u8a9e\u53e5\u306e\u610f\u5473\u95a2\u4fc2 \u3011\\n\")\n            print(given_word_pair)\n\n            output_file_line = given_word_pair.replace(\" \" , \"\") # \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3092\u8a70\u3081\u308b\n            output_file_line = output_file_line.replace('\"', '')\n            output_file_line = output_file_line.replace(\"=>\" ,\",\")\n            result_list.append(output_file_line)\n\n            print(\"\\n\\n\u3010\u6307\u5b9a\u8a9e\u53e5\u306b\u95a2\u3057\u3066\u3001\u300c\u6700\u521d\u306b\u4e0e\u3048\u305f\u8a9e\u53e5\u306e\u30da\u30a2\u300d \u3068 \u540c\u7b49\u306e\u610f\u5473\u95a2\u4fc2\u306e\u4e2d\u306b\u3042\u308b\u3068\u3001word2vec \u304c\u63a8\u5b9a\u3057\u305f \u8a9e\u53e5\u306e\u7d44\u307f\u5408\u308f\u305b \u3011\")\n            print(\"\\n    ( \u6700\u5f8c\u306b\u66f8\u304b\u308c\u305f\u6570\u5024\u304c 1.00 \u306b\u8fd1\u3044\u8a9e\u53e5\u306e\u30da\u30a2\u307b\u3069\u3001\u7d50\u679c\u306e\u78ba\u304b\u3089\u3057\u3055\u306b\u81ea\u4fe1\u304c\u3042\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5224\u65ad\u3057\u307e\u3057\u305f\u3002 )    \\n\\n\")\n\n            for word in result:\n                esitimated_word_pair = str(word_list[1]) + \" => \" + str(word[0]) + \" , \" + str(round(word[1],3))\n                std_output_line = esitimated_word_pair.replace('\"', '')\n                print(std_output_line)\n\n                std_output_line = esitimated_word_pair.replace(\" \" , \"\") # \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3092\u8a70\u3081\u308b\n                std_output_line = esitimated_word_pair.replace(\"=>\" ,\",\")\n                output_file_line = std_output_line + \"\\n\"\n                result_list.append(output_file_line)\n                \n            print(\"\\n\\n\u51e6\u7406\u304c\u3059\u3079\u3066\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n        except:\n            print(\"\\n\\n\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u8aad\u307f\u8fbc\u3093\u3060\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306b\uff11\u5ea6\u3082\u51fa\u73fe\u3057\u306a\u3044\u8a9e\u53e5\u3092\u5165\u529b\u3057\u305f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\")\n        finally:\n            print(\"\\n\\n ***************************** \u610f\u5473\u8a08\u7b97\u304c\u7d42\u308f\u308a\u307e\u3057\u305f*********************************************************\")\n            del word_list\n            return result_list\n        \n\ndef get_user_instruction():\n    print(\"\\n\\n\\n\u3064\u3065\u3051\u3066\u4ed6\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u610f\u5473\u8a08\u7b97\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u300c\u3064\u3065\u3051\u308b\u300d\u3092\u3001\u7d42\u308f\u308b\u5834\u5408\u306f\u3001\u300c\u304a\u308f\u308a\u300d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\\n\")\n    instruction = raw_input()\n\n    while (instruction.strip() == \"\") or (instruction.strip() is None):  # \u5165\u529b\u6587\u5b57\u5217\u306e\u3046\u3061\u3001\u7a7a\u767d\u3092\u9664\u53bb\u3057\u3066\u3001\u5224\u5b9a\n        print(\"\u4f55\u3082\u5165\u529b\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3001\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3057\u304b\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\\n\u300c\u3064\u3065\u3051\u308b\u300d \u3082\u3057\u304f\u306f \u300c\u304a\u308f\u308a\u300d\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n        instruction = raw_input()\n    \n    while (instruction != \"\u3064\u3065\u3051\u308b\") and (instruction != \"\u304a\u308f\u308a\"):\n        print(\"\u300c\u3064\u3065\u3051\u308b\u300d \u3082\u3057\u304f\u306f \u300c\u304a\u308f\u308a\u300d\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n        instruction = \"\"\n        instruction = raw_input()\n    \n\n    if (instruction == \"\u3064\u3065\u3051\u308b\"):\n        user_instruction = instruction\n\n    if (instruction == \"\u304a\u308f\u308a\"):\n        user_instruction = instruction\n\n    return user_instruction\n\n\n\n### [\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9 \u304a\u308f\u308a]\n\n### [\u4ee5\u4e0b\u3001\u51e6\u7406\u306e\u672c\u4f53 \uff08main \uff09\n\n### ( \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u76f4\u5f8c\u306b\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u305b\u308b\u8aac\u660e\u6587 )\n\nmessage = '''\n\n\n***************************************( \u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b63\u5e38\u306b\u8d77\u52d5\u3057\u307e\u3057\u305f )***************************************\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u300c\u610f\u5473\u8a08\u7b97 \u96fb\u5353\u6a5f \u300d\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\u3001\u30c6\u30ad\u30b9\u30c8\u30fb\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u305f\u3000\u548c\u6587 \u3082\u3057\u304f\u306f \u82f1\u6587 \u6587\u66f8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u304c\u7d42\u308f\u308b\u3068\u3001\u6587\u66f8\u5185\u306b\u767b\u5834\u3059\u308b \u5358\u8a9e  \u3069\u3046\u3057\u306e\u610f\u5473\u4e0a\u306e\u8ddd\u96e2\u95a2\u4fc2\u3092\u3001\u6570\u5b66\u306e\u3010\u591a\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u3011\u306b\u69cb\u9020\u5316\u3059\u308b\u6570\u5b66\u51e6\u7406\u3092\u884c\u3044\u3001\u6587\u66f8\u306b\u767b\u5834\u3059\u308b\u5358\u8a9e \u3069\u3046\u3057\u306e\u300c\u610f\u5473\u300d\u306e\u8db3\u3057\u7b97\u30fb\u5f15\u304d\u7b97 \u3092 \u304a\u3053\u306a\u3044\u307e\u3059\u3002\n\n\n\u4f8b\u3048\u3070\u3001\u8aad\u307f\u8fbc\u3093\u3060\u6587\u66f8\u306e\u306a\u304b\u306b\u3001\u300c\u65e5\u672c \u300d\u30fb\u300c\u30a2\u30e1\u30ea\u30ab \u300d\u30fb\u300c\u6771\u4eac \u300d\u30fb\u300c\u30ef\u30b7\u30f3\u30c8\u30f3 \u300d\u306e\uff14\u3064\u306e\u5358\u8a9e\u304c\u66f8\u304b\u308c\u3066\u3044\u305f\u3068\u3057\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u6587\u66f8\u3092\u8aad\u307f\u8fbc\u307e\u305b\u305f\u5f8c\u3067\u3001\u753b\u9762\u4e0a\u3067\u3001 \u300c\u65e5\u672c \u300d\u3001 \u300c\u6771\u4eac \u300d\u3001 \u300c\u30a2\u30e1\u30ea\u30ab \u300d \u3068\u3044\u3046 \uff13\u3064\u306e\u5358\u8a9e\u3092\u5165\u529b\u3059\u308b\u3068\u3001\n\u300c\u65e5\u672c\u306b\u3068\u3063\u3066\u306e\u6771\u4eac \u300d\u304c\u3001\u300c\u30a2\u30e1\u30ea\u30ab \u300d\u306b\u3068\u3063\u3066\u306e\u4f55\u306b\u76f8\u5f53\u3059\u308b\u304b\u3092\u63a8\u6e2c\u3057\u3001\u6570\u5b66\u7684\u306b\u59a5\u5f53\u3068\u601d\u308f\u308c\u308b\u5358\u8a9e\u304c\u3001\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u4e0a\u306e\u5165\u529b\u4f8b\u3067\u306f\u3001\u300c\u30ef\u30b7\u30f3\u30c8\u30f3 \u300d\u3068\u3044\u3046\u8a00\u8449\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n\n\u5165\u529b\u3059\u308b\u5358\u8a9e\u3068\u3001\u610f\u5473\u8a08\u7b97\u306e\u7d50\u679c\u51fa\u529b\u3067\u8868\u793a\u3055\u308c\u308b\u5358\u8a9e\u306f\u3001\u3044\u305a\u308c\u3082 \u6700\u521d\u306b\u8aad\u307f\u8fbc\u307e\u305b\u305f\u6587\u66f8\u306b\u767b\u5834\u3059\u308b\u5358\u8a9e\u3067\u3059\u3002\n\n\u5358\u8a9e\u3092\u5165\u529b\u3059\u308b\u969b\u3001\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306b\u767b\u5834\u3057\u306a\u3044\u5358\u8a9e\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n****************************************************************************************************************\n\n'''\n\nprint(message)\n\n### \uff08\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f \u3068 word2vec\u30e2\u30c7\u30eb\u306e\u751f\u6210 \uff09\n\nmessage = '''\n\n\n\n***** \u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304b\u308c\u305f\u6587\u7ae0\u306e\u610f\u5473\u7a7a\u9593\u306e\u69cb\u9020\u3092\u3001\u6570\u5b66\u7684\u306a\u300c\u7279\u5fb4\u7a7a\u9593\u30e2\u30c7\u30eb\u300d\u306b\u5909\u63db\u51e6\u7406\u3057\u307e\u3059\u3002*****\n\n\u904e\u53bb\u306b \u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u305f\u3053\u3068\u304c\u3042\u308a\u3001\u305d\u306e\u3068\u304d\u751f\u6210\u3055\u308c\u305f \uff08\u30d5\u30a1\u30a4\u30eb\u540d\uff09'data.bin' \u306e\u30c7\u30fc\u30bf\u30fb\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u300c\u7d99\u7d9a\u300d\u3068\u5165\u529b\u3057\u3001\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \n\n\u4eca\u56de\u3001\u65b0\u3057\u304f\u6587\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u3001\u4f5c\u696d\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u300c\u65b0\u898f\u300d\u3068\u5165\u529b\u5f8c\u3001\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3059\u3067\u306b\u751f\u6210\u6e08\u307f\u306e'data.bin'\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u5229\u7528\u3059\u308b\u3068\u3001'data.bin'\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\u306b\u304b\u304b\u308b\u6570\u5206\u301c\u6570\u5341\u5206\u4ee5\u4e0a\u306e\u8a08\u7b97\u5b9f\u884c\u6642\u9593\u3092\u7bc0\u7d04\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n****************************************************************************************************************************\n\n'''\n\nprint(message)\nchoice = raw_input()\n\nwhile (choice  != \"\u7d99\u7d9a\") and (choice != \"\u65b0\u898f\"):\n    choice = get_choice_if_null_input(choice)\n\nword2vec_model = \"\"\n\nif (choice == \"\u7d99\u7d9a\"):\n    corpus_file, word2vec_model = get_word2vec_model_when_keizoku()\nelif (choice == \"\u65b0\u898f\"):\n    corpus_file, word2vec_model = get_word2v3c_model_when_shinki()\nelse:\n    pass\n\n### \u30e6\u30fc\u30b6\u5165\u529b\u6587\u5b57\u5217 \u3092 word2vec\u30e1\u30bd\u30c3\u30c9\u306e\u5404\u5f15\u6570\u306b\u8a2d\u5b9a\n   \nword_list = [] # \u751f\u6210\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u683c\u7d0d\u5148\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08list\u578b\uff09\u306e\u5ba3\u8a00\u3068\u521d\u671f\u5316\nresult_list = []\n\n# \u610f\u5473\u8a08\u7b97\u3092\u5b9f\u884c\u3057\u3066\u3001\u7d50\u679c\u3092 result_list \u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\nresult_list = execute_meaning_calc(corpus_file, word2vec_model, word_list, result_list)\n\n# \u610f\u5473\u8a08\u7b97 \u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3059\u308b\nuser_instruction =  \"\"\n\nif user_instruction == \"\":\n    user_instruction =  get_user_instruction()\n    while (user_instruction == \"\u3064\u3065\u3051\u308b\"):\n        word_list = []\n        result_list = execute_meaning_calc(corpus_file, word2vec_model, word_list, result_list)\n        user_instruction =  \"\"\n        user_instruction =  get_user_instruction()\n\n    if user_instruction == \"\u304a\u308f\u308b\":\n        print(\"\u610f\u5473\u8a08\u7b97 \u96fb\u5353\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\\n\\n\")\n       \n\n\n# \u4f5c\u696d\u5185\u5bb9\u3092 output.csv \u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3057\u3066\u4fdd\u5b58\nf = open(\"output.csv\", 'w')\nf.writelines(result_list)\nf.close()\n\nmessage = '''\n\n************************************************************************************************************\n\n\n\u610f\u5473\u8a08\u7b97\u96fb\u5353\u3078\u306e\u5165\u529b\u3068\u7d50\u679c\u3092\u3001\\\"output.csv\\\" \u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\n\n\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30fb\u30d5\u30a1\u30a4\u30eb \u3068 \u6587\u66f8\u30d5\u30a1\u30a4\u30eb \u304c\u7f6e\u304b\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u306b\u3042\u308a\u307e\u3059\u3002\n\n\n**************************( \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u306f\u3053\u308c\u3067\u7d42\u308f\u308a\u3067\u3059\u3002\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002 )**************************\n\n'''\n\nprint(message)\n\n```\n", "tags": ["python2.7", "Python", "word2vec", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "NLP"]}