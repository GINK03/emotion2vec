{"tags": ["CodeIgniter", "CodeIgniter3"], "context": "\n\nCodeigniter3.0.3\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u307e\u3068\u3081\n\u9045\u308c\u3066\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3002\n\u7533\u3057\u8a33\u3064\u3044\u3067\u306b\u3001\u9762\u767d\u304f\u306a\u3044\u30c6\u30fc\u30de\u3067\u3059\u304c\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\n\u57fa\u672c\u30eb\u30fc\u30eb\n\u300c/system/libraries/Form_validation.php\u300d\n\u5185\u306b\u3042\u308b\u3001\n\u300crequired\u300d\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u5185\u5bb9\u306b\u3064\u3044\u3066\u30bd\u30fc\u30b9\u8aad\u307f\u307e\u3057\u3087\u3046\u3001\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u8abf\u67fb\u5bfe\u8c61\n\nCodeigniter3.0.3\n\n\n\u57fa\u790e\u77e5\u8b58\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u3063\u3066\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u8a18\u8ff0\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nexsample.php\n    // \u4f8b\uff11\uff1a\u4e00\u756a\u5358\u7d14\u306a\u66f8\u304d\u65b9    \n    // $_POST['first_name'] = 'tomcat';\n    $this->form_validation->set_rules('first_name', 'lang:first_name', 'max_length[100]');\n\n\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u540d\u304c\u305d\u306e\u307e\u307e\u30e1\u30bd\u30c3\u30c9\u540d\u3068\u306a\u308a\u307e\u3059\u3002\n\u30d5\u30a9\u30fc\u30e0\u306b\u5165\u529b\u3055\u308c\u305f\u5024\u304c\u7b2c\u4e00\u5f15\u6570\u3068\u3057\u3066\u6e21\u308a\u307e\u3059\u3002\n[]\u306b\u56f2\u307e\u308c\u305f\u90e8\u5206\uff08\u4f8b1\u3067\u306e100\uff09\u304c\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u306e\u7b2c\u4e8c\u5f15\u6570\u3068\u3057\u3066\u6e21\u308a\u307e\u3059\u3002\n\nForm_validation.php\n    // \u4f8b1\u306b\u5bfe\u5fdc\u3057\u305f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\n    // \u3053\u3053\u306b\u306f $str = 'tomcat'; $val = '100'; \u304c\u6765\u307e\u3059\u3002\n    public function max_length($str, $val)\n    {\n        if ( ! is_numeric($val))\n        {\n            return FALSE;\n        }\n\n        return ($val >= mb_strlen($str));\n    }\n\n\n\n\u672c\u7de8\n\nrequired\n\nForm_validation.php\n    public function required($str)\n    {\n        return is_array($str) ? (bool) count($str) : (trim($str) !== '');\n    }\n\n\n\n\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\n\u914d\u5217\u5bfe\u5fdc\n\n\nregex_match\n\nForm_validation.php\n    public function regex_match($str, $regex)\n    {\n        return (bool) preg_match($regex, $str);\n    }\n\n\n\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u7528\u3057\u305f\u3001\u6587\u5b57\u30c1\u30a7\u30c3\u30af\n\u8a73\u3057\u304f\u306fPHP\u30de\u30cb\u30e5\u30a2\u30eb\u53c2\u7167\u306e\u3053\u3068\nhttp://php.net/manual/ja/function.preg-match.php\n\nmatches\n\nForm_validation.php\n    public function matches($str, $field)\n    {\n        return isset($this->_field_data[$field], $this->_field_data[$field]['postdata'])\n            ? ($str === $this->_field_data[$field]['postdata'])\n            : FALSE;\n    }\n\n\n\u4ed6\u306e\u30ab\u30e9\u30e0\u3068\u4e00\u81f4\u3059\u308b\u304b\u306e\u78ba\u8a8d\n\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u78ba\u8a8d\u3001\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u78ba\u8a8d\u306a\u306e\u3067\u3088\u304f\u4f7f\u3046\n\ndiffers\n\nForm_validation.php\n    public function differs($str, $field)\n    {\n        return ! (isset($this->_field_data[$field]) && $this->_field_data[$field]['postdata'] === $str);\n    }\n\n\n\u4ed6\u306e\u30ab\u30e9\u30e0\u3068\u4e00\u81f4\u3057\u306a\u3044\n\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u518d\u8a2d\u5b9a\u3068\u304b\uff1f\nmatches\u306e\u53cd\u5bfe\n\nis_unique\n\nForm_validation.php\n    public function is_unique($str, $field)\n    {\n        sscanf($field, '%[^.].%[^.]', $table, $field);\n        return isset($this->CI->db)\n            ? ($this->CI->db->limit(1)->get_where($table, array($field => $str))->num_rows() === 0)\n            : FALSE;\n    }\n\n\n\u7279\u5b9a\u306e\u30c6\u30fc\u30d6\u30eb\u306e\u7279\u5b9a\u306e\u30ab\u30e9\u30e0\u3067\u3001\u30e6\u30cb\u30fc\u30af\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\n\u81ea\u5206\u81ea\u8eab\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u9664\u5916\u3067\u304d\u306a\u3044\u3001\u524a\u9664\u6e08\u30ec\u30b3\u30fc\u30c9\u306e\u9664\u5916\u7b49\u306e\u5c0f\u8ce2\u3057\u3044\u51e6\u7406\u3092\u631f\u3081\u306a\u3044\u306e\u3067\u3001\u5b9f\u7528\u6027\u306f\u30fb\u30fb\u30fb\n\nmin_length\n\nForm_validation.php\n    public function min_length($str, $val)\n    {\n        if ( ! is_numeric($val))\n        {\n            return FALSE;\n        }\n\n        return ($val <= mb_strlen($str));\n    }\n\n\n\u6700\u4f4e\u6587\u5b57\u6570\n\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8a2d\u5b9a\u306a\u3069\u306b\n\nmax_length\n\nForm_validation.php\n    public function max_length($str, $val)\n    {\n        if ( ! is_numeric($val))\n        {\n            return FALSE;\n        }\n\n        return ($val >= mb_strlen($str));\n    }\n\n\n\u6700\u5927\u6587\u5b57\u6570\ninput\u7cfb\u3067\u306f\u307b\u307c\u5fc5\u9808\uff1f\n\nexact_length\n\nForm_validation.php\n\n    public function exact_length($str, $val)\n    {\n        if ( ! is_numeric($val))\n        {\n            return FALSE;\n        }\n\n        return (mb_strlen($str) === (int) $val);\n    }\n\n\n\u6307\u5b9a\u6587\u5b57\u6570\u304b\u3069\u3046\u304b\n\u90f5\u4fbf\u756a\u53f7\u3068\u304b\uff1f\u9577\u3055\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u3082\u306e\n\nvalid_url\n\nForm_validation.php\n\n    public function valid_url($str)\n    {\n        if (empty($str))\n        {\n            return FALSE;\n        }\n        elseif (preg_match('/^(?:([^:]*)\\:)?\\/\\/(.+)$/', $str, $matches))\n        {\n            if (empty($matches[2]))\n            {\n                return FALSE;\n            }\n            elseif ( ! in_array($matches[1], array('http', 'https'), TRUE))\n            {\n                return FALSE;\n            }\n\n            $str = $matches[2];\n        }\n\n        $str = 'http://'.$str;\n\n        // There's a bug affecting PHP 5.2.13, 5.3.2 that considers the\n        // underscore to be a valid hostname character instead of a dash.\n        // Reference: https://bugs.php.net/bug.php?id=51192\n        if (version_compare(PHP_VERSION, '5.2.13', '==') OR version_compare(PHP_VERSION, '5.3.2', '=='))\n        {\n            sscanf($str, 'http://%[^/]', $host);\n            $str = substr_replace($str, strtr($host, array('_' => '-', '-' => '_')), 7, strlen($host));\n        }\n\n        return (filter_var($str, FILTER_VALIDATE_URL) !== FALSE);\n    }\n\n\nURL\u3068\u3057\u3066\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u3053\u3053\u306b\u6765\u3066\u3001\u3061\u3087\u3063\u3068\u9762\u767d\u3044\u30eb\u30fc\u30eb\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\u307e\u305a\u3001\u4eca\u56de\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306b\u3042\u305f\u3063\u3066\u3001\u6ce8\u76ee\u3057\u305f\u90e8\u5206\u304c\u4ee5\u4e0b\u306e\u4e00\u6587\u3067\u3059\u3002\npreg_match('/^(?:([^:]*)\\:)?\\/\\/(.+)$/', $str, $matches)\n\u52c9\u5f37\u4e0d\u8db3\u3067\u521d\u3081\u3066\u77e5\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u306e\u6b63\u898f\u8868\u73fe\u306e\u300c(?:\u301c\u301c)\u300d\u306e\u90e8\u5206\u306f\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u306a\u3044\n\u3068\u3044\u3046\u610f\u5473\u3089\u3057\u3044\u3067\u3059\u3002\uff08\u30ad\u30e3\u30d7\u30c1\u30e3\u3068\u306f\u3053\u3053\u3067\u3044\u3046$matches\u306b\u5165\u308c\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5dee\u3057\u652f\u3048\u3042\u308a\u307e\u305b\u3093\u3002\uff09\n\u3053\u306e\u5834\u5408\u3067\u3059\u3068\u3001\u5916\u5074\u306e\u4e38\u30ab\u30c3\u30b3\u306f\u5fc5\u8981\u306a\u3044\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u4e38\u30ab\u30c3\u30b3\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u306a\u3044\u3068\u3044\u3046\u6307\u5b9a\u3092\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u3067\u3001$matches\u306e\u4e2d\u306b\u3069\u3046\u3044\u3046\u9806\u756a\u3067\u6587\u5b57\u5217\u304c\u683c\u7d0d\u3055\u308c\u308b\u306e\u304b\u3068\u3066\u3082\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\n\u3055\u3066\u3001\u305d\u306e\u5f8c\u306e\u8a18\u8ff0\u3067\u3059\u304c\u3001PHP\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\u30b3\u30e1\u30f3\u30c8\u4ed8\u304d\u306e\u6761\u4ef6\u5f0f\u304c\u51fa\u3066\u304d\u307e\u3059\u304c\u30013.0\u3067\u306fPHP5.4\u4ee5\u4e0a\u306a\u306e\u3067\u305d\u306e\u3046\u3061\u5916\u3055\u308c\u308b\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\u4f55\u306b\u305b\u3088\u3001\u6b74\u53f2\u3092\u611f\u3058\u308b\u8a18\u8ff0\u3067\u3059\u3002\uff082.0\u306e\u9803\u3001\u3053\u3053\u306b\u95a2\u3059\u308b\u9762\u767d\u3044\u3084\u308a\u3068\u308a\u304c\u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306eissue\u3067\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u4eca\u30ed\u30b0\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u6b8b\u5ff5\uff09\n\nvalid_email\n\nForm_validation.php\n\n\n    public function valid_email($str)\n    {\n        if (function_exists('idn_to_ascii') && $atpos = strpos($str, '@'))\n        {\n            $str = substr($str, 0, ++$atpos).idn_to_ascii(substr($str, $atpos));\n        }\n\n        return (bool) filter_var($str, FILTER_VALIDATE_EMAIL);\n    }\n\n\n\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u3057\u3066\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u3082\u3046\u3072\u3068\u3064\u9762\u767d\u3044\u30eb\u30fc\u30eb\u3067\u3059\u3002\nidn_to_ascii\u3068\u306f\u3001\u8aa4\u89e3\u3092\u6050\u308c\u305a\u8a00\u3046\u3068\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001\u65e5\u672c\u8a9e\u30c9\u30e1\u30a4\u30f3\u306a\u3069\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u3061\u3083\u3093\u3068\u6271\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u65e5\u672c\u8a9e\u30c9\u30e1\u30a4\u30f3\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306fGoogle\u304c\u5bfe\u5fdc\u3059\u308b\u3068\u544a\u77e5\u3057\u305f\u4ee5\u4e0a\u3001\u4eca\u5f8c\u3042\u308b\u7a0b\u5ea6\u306f\u666e\u53ca\u3059\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\nhttps://googleblog.blogspot.jp/2014/08/a-first-step-toward-more-global-email.html\n\nvalid_emails\n\nForm_validation.php\n\n    public function valid_emails($str)\n    {\n        if (strpos($str, ',') === FALSE)\n        {\n            return $this->valid_email(trim($str));\n        }\n\n        foreach (explode(',', $str) as $email)\n        {\n            if (trim($email) !== '' && $this->valid_email(trim($email)) === FALSE)\n            {\n                return FALSE;\n            }\n        }\n\n        return TRUE;\n    }\n\n\n\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\u8907\u6570\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u6b63\u3057\u3044\u304b\u3001\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u30ab\u30f3\u30de\u3067\u3076\u3063\u305f\u5207\u3063\u3066\u3001valid_email\u306b\u6295\u3052\u3066\u304f\u308c\u307e\u3059\u3002\n\nvalid_ip\n\nForm_validation.php\n\n    public function valid_ip($ip, $which = '')\n    {\n        return $this->CI->input->valid_ip($ip, $which);\n    }\n\n\nIP\u30a2\u30c9\u30ec\u30b9\u3068\u3057\u3066\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u51e6\u7406\u306e\u672c\u4f53\u306f/system/libraries/Input.php\u306b\u3042\u308a\u307e\u3059\u3002\n\nInput.php\n    public function valid_ip($ip, $which = '')\n    {\n        $which = strtolower($which);\n\n        // First check if filter_var is available\n        if (is_callable('filter_var'))\n        {\n            switch ($which) {\n                case 'ipv4':\n                    $flag = FILTER_FLAG_IPV4;\n                    break;\n                case 'ipv6':\n                    $flag = FILTER_FLAG_IPV6;\n                    break;\n                default:\n                    $flag = '';\n                    break;\n            }\n\n            return (bool) filter_var($ip, FILTER_VALIDATE_IP, $flag);\n        }\n\n        if ($which !== 'ipv6' && $which !== 'ipv4')\n        {\n            if (strpos($ip, ':') !== FALSE)\n            {\n                $which = 'ipv6';\n            }\n            elseif (strpos($ip, '.') !== FALSE)\n            {\n                $which = 'ipv4';\n            }\n            else\n            {\n                return FALSE;\n            }\n        }\n\n        $func = '_valid_'.$which;\n        return $this->$func($ip);\n    }\n\n    // --------------------------------------------------------------------\n\n    /**\n    * Validate IPv4 Address\n    *\n    * Updated version suggested by Geert De Deckere\n    *\n    * @access   protected\n    * @param    string\n    * @return   bool\n    */\n    protected function _valid_ipv4($ip)\n    {\n        $ip_segments = explode('.', $ip);\n\n        // Always 4 segments needed\n        if (count($ip_segments) !== 4)\n        {\n            return FALSE;\n        }\n        // IP can not start with 0\n        if ($ip_segments[0][0] == '0')\n        {\n            return FALSE;\n        }\n\n        // Check each segment\n        foreach ($ip_segments as $segment)\n        {\n            // IP segments must be digits and can not be\n            // longer than 3 digits or greater then 255\n            if ($segment == '' OR preg_match(\"/[^0-9]/\", $segment) OR $segment > 255 OR strlen($segment) > 3)\n            {\n                return FALSE;\n            }\n        }\n\n        return TRUE;\n    }\n\n    // --------------------------------------------------------------------\n\n    /**\n    * Validate IPv6 Address\n    *\n    * @access   protected\n    * @param    string\n    * @return   bool\n    */\n    protected function _valid_ipv6($str)\n    {\n        // 8 groups, separated by :\n        // 0-ffff per group\n        // one set of consecutive 0 groups can be collapsed to ::\n\n        $groups = 8;\n        $collapsed = FALSE;\n\n        $chunks = array_filter(\n            preg_split('/(:{1,2})/', $str, NULL, PREG_SPLIT_DELIM_CAPTURE)\n        );\n\n        // Rule out easy nonsense\n        if (current($chunks) == ':' OR end($chunks) == ':')\n        {\n            return FALSE;\n        }\n\n        // PHP supports IPv4-mapped IPv6 addresses, so we'll expect those as well\n        if (strpos(end($chunks), '.') !== FALSE)\n        {\n            $ipv4 = array_pop($chunks);\n\n            if ( ! $this->_valid_ipv4($ipv4))\n            {\n                return FALSE;\n            }\n\n            $groups--;\n        }\n\n        while ($seg = array_pop($chunks))\n        {\n            if ($seg[0] == ':')\n            {\n                if (--$groups == 0)\n                {\n                    return FALSE;   // too many groups\n                }\n\n                if (strlen($seg) > 2)\n                {\n                    return FALSE;   // long separator\n                }\n\n                if ($seg == '::')\n                {\n                    if ($collapsed)\n                    {\n                        return FALSE;   // multiple collapsed\n                    }\n\n                    $collapsed = TRUE;\n                }\n            }\n            elseif (preg_match(\"/[^0-9a-f]/i\", $seg) OR strlen($seg) > 4)\n            {\n                return FALSE; // invalid segment\n            }\n        }\n\n        return $collapsed OR $groups == 1;\n    }\n\n\nfilter_var\u306f\u3053\u3053\u3067\u3082\u5927\u6d3b\u8e8d\u3067\u3059\u306d\u3002\n\nalpha\n\nForm_validation.php\n    public function alpha($str)\n    {\n        return ctype_alpha($str);\n    }\n\n\nPHP\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u95a2\u6570\u306b\u6e21\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u30b7\u30f3\u30d7\u30eb\u3067\u3044\u3044\u3067\u3059\u306d\u3002\n\u53c2\u8003\u6587\u732e\uff1a\u3000http://php.net/manual/ja/function.ctype-alpha.php\n\nalpha_numeric\n\nForm_validation.php\n    public function alpha_numeric($str)\n    {\n        return ctype_alnum((string) $str);\n    }\n\n\n\u3053\u3061\u3089\u3082PHP\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u95a2\u6570\u306b\u6e21\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u30b7\u30f3\u30d7\u30eb\u3067\u3044\u3044\u3067\u3059\u306d\u3002\n\u53c2\u8003\u6587\u732e\uff1a\u3000http://php.net/manual/ja/function.ctype-alnum.php\n#Codeigniter3.0.3\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u307e\u3068\u3081\n\n\u9045\u308c\u3066\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3002\n\u7533\u3057\u8a33\u3064\u3044\u3067\u306b\u3001\u9762\u767d\u304f\u306a\u3044\u30c6\u30fc\u30de\u3067\u3059\u304c\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\n## \u57fa\u672c\u30eb\u30fc\u30eb\n\u300c/system/libraries/Form_validation.php\u300d\n\u5185\u306b\u3042\u308b\u3001\n\u300crequired\u300d\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u5185\u5bb9\u306b\u3064\u3044\u3066\u30bd\u30fc\u30b9\u8aad\u307f\u307e\u3057\u3087\u3046\u3001\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\n### \u8abf\u67fb\u5bfe\u8c61\n- Codeigniter3.0.3\n\n### \u57fa\u790e\u77e5\u8b58\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u3063\u3066\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u8a18\u8ff0\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```exsample.php\n\t// \u4f8b\uff11\uff1a\u4e00\u756a\u5358\u7d14\u306a\u66f8\u304d\u65b9 \t\n\t// $_POST['first_name'] = 'tomcat';\n\t$this->form_validation->set_rules('first_name', 'lang:first_name', 'max_length[100]');\n```\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u540d\u304c\u305d\u306e\u307e\u307e\u30e1\u30bd\u30c3\u30c9\u540d\u3068\u306a\u308a\u307e\u3059\u3002\n\u30d5\u30a9\u30fc\u30e0\u306b\u5165\u529b\u3055\u308c\u305f\u5024\u304c\u7b2c\u4e00\u5f15\u6570\u3068\u3057\u3066\u6e21\u308a\u307e\u3059\u3002\n[]\u306b\u56f2\u307e\u308c\u305f\u90e8\u5206\uff08\u4f8b1\u3067\u306e100\uff09\u304c\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u306e\u7b2c\u4e8c\u5f15\u6570\u3068\u3057\u3066\u6e21\u308a\u307e\u3059\u3002\n\n```Form_validation.php\n\t// \u4f8b1\u306b\u5bfe\u5fdc\u3057\u305f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\n\t// \u3053\u3053\u306b\u306f $str = 'tomcat'; $val = '100'; \u304c\u6765\u307e\u3059\u3002\n\tpublic function max_length($str, $val)\n\t{\n\t\tif ( ! is_numeric($val))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\treturn ($val >= mb_strlen($str));\n\t}\n```\n\n## \u672c\u7de8\n\n### required\n\n```Form_validation.php\n\tpublic function required($str)\n\t{\n\t\treturn is_array($str) ? (bool) count($str) : (trim($str) !== '');\n\t}\n```\n- \u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\n- \u914d\u5217\u5bfe\u5fdc\n\n### regex_match\n\n```Form_validation.php\n\tpublic function regex_match($str, $regex)\n\t{\n\t\treturn (bool) preg_match($regex, $str);\n\t}\n```\n\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u7528\u3057\u305f\u3001\u6587\u5b57\u30c1\u30a7\u30c3\u30af\n\u8a73\u3057\u304f\u306fPHP\u30de\u30cb\u30e5\u30a2\u30eb\u53c2\u7167\u306e\u3053\u3068\nhttp://php.net/manual/ja/function.preg-match.php\n\n### matches\n\n```Form_validation.php\n\tpublic function matches($str, $field)\n\t{\n\t\treturn isset($this->_field_data[$field], $this->_field_data[$field]['postdata'])\n\t\t\t? ($str === $this->_field_data[$field]['postdata'])\n\t\t\t: FALSE;\n\t}\n```\n\u4ed6\u306e\u30ab\u30e9\u30e0\u3068\u4e00\u81f4\u3059\u308b\u304b\u306e\u78ba\u8a8d\n\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u78ba\u8a8d\u3001\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u78ba\u8a8d\u306a\u306e\u3067\u3088\u304f\u4f7f\u3046\n\n### differs\n\n```Form_validation.php\n\tpublic function differs($str, $field)\n\t{\n\t\treturn ! (isset($this->_field_data[$field]) && $this->_field_data[$field]['postdata'] === $str);\n\t}\n```\n\u4ed6\u306e\u30ab\u30e9\u30e0\u3068\u4e00\u81f4\u3057\u306a\u3044\n\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u518d\u8a2d\u5b9a\u3068\u304b\uff1f\nmatches\u306e\u53cd\u5bfe\n\n### is_unique\n\n```Form_validation.php\n\tpublic function is_unique($str, $field)\n\t{\n\t\tsscanf($field, '%[^.].%[^.]', $table, $field);\n\t\treturn isset($this->CI->db)\n\t\t\t? ($this->CI->db->limit(1)->get_where($table, array($field => $str))->num_rows() === 0)\n\t\t\t: FALSE;\n\t}\n```\n\u7279\u5b9a\u306e\u30c6\u30fc\u30d6\u30eb\u306e\u7279\u5b9a\u306e\u30ab\u30e9\u30e0\u3067\u3001\u30e6\u30cb\u30fc\u30af\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\n\u81ea\u5206\u81ea\u8eab\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u9664\u5916\u3067\u304d\u306a\u3044\u3001\u524a\u9664\u6e08\u30ec\u30b3\u30fc\u30c9\u306e\u9664\u5916\u7b49\u306e\u5c0f\u8ce2\u3057\u3044\u51e6\u7406\u3092\u631f\u3081\u306a\u3044\u306e\u3067\u3001\u5b9f\u7528\u6027\u306f\u30fb\u30fb\u30fb\n\n\n\n### min_length\n\n```Form_validation.php\n\tpublic function min_length($str, $val)\n\t{\n\t\tif ( ! is_numeric($val))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\treturn ($val <= mb_strlen($str));\n\t}\n```\n\u6700\u4f4e\u6587\u5b57\u6570\n\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8a2d\u5b9a\u306a\u3069\u306b\n\n### max_length\n\n```Form_validation.php\n\tpublic function max_length($str, $val)\n\t{\n\t\tif ( ! is_numeric($val))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\treturn ($val >= mb_strlen($str));\n\t}\n```\n\u6700\u5927\u6587\u5b57\u6570\ninput\u7cfb\u3067\u306f\u307b\u307c\u5fc5\u9808\uff1f\n\n### exact_length\n\n```Form_validation.php\n\n\tpublic function exact_length($str, $val)\n\t{\n\t\tif ( ! is_numeric($val))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\treturn (mb_strlen($str) === (int) $val);\n\t}\n```\n\u6307\u5b9a\u6587\u5b57\u6570\u304b\u3069\u3046\u304b\n\u90f5\u4fbf\u756a\u53f7\u3068\u304b\uff1f\u9577\u3055\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u3082\u306e\n\n### valid_url\n\n```Form_validation.php\n\n\tpublic function valid_url($str)\n\t{\n\t\tif (empty($str))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t\telseif (preg_match('/^(?:([^:]*)\\:)?\\/\\/(.+)$/', $str, $matches))\n\t\t{\n\t\t\tif (empty($matches[2]))\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\telseif ( ! in_array($matches[1], array('http', 'https'), TRUE))\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$str = $matches[2];\n\t\t}\n\n\t\t$str = 'http://'.$str;\n\n\t\t// There's a bug affecting PHP 5.2.13, 5.3.2 that considers the\n\t\t// underscore to be a valid hostname character instead of a dash.\n\t\t// Reference: https://bugs.php.net/bug.php?id=51192\n\t\tif (version_compare(PHP_VERSION, '5.2.13', '==') OR version_compare(PHP_VERSION, '5.3.2', '=='))\n\t\t{\n\t\t\tsscanf($str, 'http://%[^/]', $host);\n\t\t\t$str = substr_replace($str, strtr($host, array('_' => '-', '-' => '_')), 7, strlen($host));\n\t\t}\n\n\t\treturn (filter_var($str, FILTER_VALIDATE_URL) !== FALSE);\n\t}\n```\n\nURL\u3068\u3057\u3066\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u3053\u3053\u306b\u6765\u3066\u3001\u3061\u3087\u3063\u3068\u9762\u767d\u3044\u30eb\u30fc\u30eb\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\u307e\u305a\u3001\u4eca\u56de\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306b\u3042\u305f\u3063\u3066\u3001\u6ce8\u76ee\u3057\u305f\u90e8\u5206\u304c\u4ee5\u4e0b\u306e\u4e00\u6587\u3067\u3059\u3002\n`preg_match('/^(?:([^:]*)\\:)?\\/\\/(.+)$/', $str, $matches)`\n\u52c9\u5f37\u4e0d\u8db3\u3067\u521d\u3081\u3066\u77e5\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u306e\u6b63\u898f\u8868\u73fe\u306e\u300c(?:\u301c\u301c)\u300d\u306e\u90e8\u5206\u306f*\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u306a\u3044*\n\u3068\u3044\u3046\u610f\u5473\u3089\u3057\u3044\u3067\u3059\u3002\uff08\u30ad\u30e3\u30d7\u30c1\u30e3\u3068\u306f\u3053\u3053\u3067\u3044\u3046`$matches`\u306b\u5165\u308c\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5dee\u3057\u652f\u3048\u3042\u308a\u307e\u305b\u3093\u3002\uff09\n\u3053\u306e\u5834\u5408\u3067\u3059\u3068\u3001\u5916\u5074\u306e\u4e38\u30ab\u30c3\u30b3\u306f\u5fc5\u8981\u306a\u3044\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u4e38\u30ab\u30c3\u30b3\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u306a\u3044\u3068\u3044\u3046\u6307\u5b9a\u3092\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u3067\u3001`$matches`\u306e\u4e2d\u306b\u3069\u3046\u3044\u3046\u9806\u756a\u3067\u6587\u5b57\u5217\u304c\u683c\u7d0d\u3055\u308c\u308b\u306e\u304b\u3068\u3066\u3082\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\n\u3055\u3066\u3001\u305d\u306e\u5f8c\u306e\u8a18\u8ff0\u3067\u3059\u304c\u3001PHP\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\u30b3\u30e1\u30f3\u30c8\u4ed8\u304d\u306e\u6761\u4ef6\u5f0f\u304c\u51fa\u3066\u304d\u307e\u3059\u304c\u30013.0\u3067\u306fPHP5.4\u4ee5\u4e0a\u306a\u306e\u3067\u305d\u306e\u3046\u3061\u5916\u3055\u308c\u308b\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\u4f55\u306b\u305b\u3088\u3001\u6b74\u53f2\u3092\u611f\u3058\u308b\u8a18\u8ff0\u3067\u3059\u3002\uff082.0\u306e\u9803\u3001\u3053\u3053\u306b\u95a2\u3059\u308b\u9762\u767d\u3044\u3084\u308a\u3068\u308a\u304c\u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306eissue\u3067\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u4eca\u30ed\u30b0\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u6b8b\u5ff5\uff09\n\n### valid_email\n\n```Form_validation.php\n\n\n\tpublic function valid_email($str)\n\t{\n\t\tif (function_exists('idn_to_ascii') && $atpos = strpos($str, '@'))\n\t\t{\n\t\t\t$str = substr($str, 0, ++$atpos).idn_to_ascii(substr($str, $atpos));\n\t\t}\n\n\t\treturn (bool) filter_var($str, FILTER_VALIDATE_EMAIL);\n\t}\n```\n\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u3057\u3066\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u3082\u3046\u3072\u3068\u3064\u9762\u767d\u3044\u30eb\u30fc\u30eb\u3067\u3059\u3002\n`idn_to_ascii`\u3068\u306f\u3001\u8aa4\u89e3\u3092\u6050\u308c\u305a\u8a00\u3046\u3068\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001\u65e5\u672c\u8a9e\u30c9\u30e1\u30a4\u30f3\u306a\u3069\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u3061\u3083\u3093\u3068\u6271\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u65e5\u672c\u8a9e\u30c9\u30e1\u30a4\u30f3\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306fGoogle\u304c\u5bfe\u5fdc\u3059\u308b\u3068\u544a\u77e5\u3057\u305f\u4ee5\u4e0a\u3001\u4eca\u5f8c\u3042\u308b\u7a0b\u5ea6\u306f\u666e\u53ca\u3059\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\nhttps://googleblog.blogspot.jp/2014/08/a-first-step-toward-more-global-email.html\n\n### valid_emails\n\n```Form_validation.php\n\n\tpublic function valid_emails($str)\n\t{\n\t\tif (strpos($str, ',') === FALSE)\n\t\t{\n\t\t\treturn $this->valid_email(trim($str));\n\t\t}\n\n\t\tforeach (explode(',', $str) as $email)\n\t\t{\n\t\t\tif (trim($email) !== '' && $this->valid_email(trim($email)) === FALSE)\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\treturn TRUE;\n\t}\n```\n\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\u8907\u6570\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u6b63\u3057\u3044\u304b\u3001\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u30ab\u30f3\u30de\u3067\u3076\u3063\u305f\u5207\u3063\u3066\u3001`valid_email`\u306b\u6295\u3052\u3066\u304f\u308c\u307e\u3059\u3002\n\n### valid_ip\n\n```Form_validation.php\n\n\tpublic function valid_ip($ip, $which = '')\n\t{\n\t\treturn $this->CI->input->valid_ip($ip, $which);\n\t}\n```\nIP\u30a2\u30c9\u30ec\u30b9\u3068\u3057\u3066\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u51e6\u7406\u306e\u672c\u4f53\u306f`/system/libraries/Input.php`\u306b\u3042\u308a\u307e\u3059\u3002\n\n```Input.php\n\tpublic function valid_ip($ip, $which = '')\n\t{\n\t\t$which = strtolower($which);\n\n\t\t// First check if filter_var is available\n\t\tif (is_callable('filter_var'))\n\t\t{\n\t\t\tswitch ($which) {\n\t\t\t\tcase 'ipv4':\n\t\t\t\t\t$flag = FILTER_FLAG_IPV4;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ipv6':\n\t\t\t\t\t$flag = FILTER_FLAG_IPV6;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$flag = '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn (bool) filter_var($ip, FILTER_VALIDATE_IP, $flag);\n\t\t}\n\n\t\tif ($which !== 'ipv6' && $which !== 'ipv4')\n\t\t{\n\t\t\tif (strpos($ip, ':') !== FALSE)\n\t\t\t{\n\t\t\t\t$which = 'ipv6';\n\t\t\t}\n\t\t\telseif (strpos($ip, '.') !== FALSE)\n\t\t\t{\n\t\t\t\t$which = 'ipv4';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$func = '_valid_'.$which;\n\t\treturn $this->$func($ip);\n\t}\n\n\t// --------------------------------------------------------------------\n\n\t/**\n\t* Validate IPv4 Address\n\t*\n\t* Updated version suggested by Geert De Deckere\n\t*\n\t* @access\tprotected\n\t* @param\tstring\n\t* @return\tbool\n\t*/\n\tprotected function _valid_ipv4($ip)\n\t{\n\t\t$ip_segments = explode('.', $ip);\n\n\t\t// Always 4 segments needed\n\t\tif (count($ip_segments) !== 4)\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t\t// IP can not start with 0\n\t\tif ($ip_segments[0][0] == '0')\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// Check each segment\n\t\tforeach ($ip_segments as $segment)\n\t\t{\n\t\t\t// IP segments must be digits and can not be\n\t\t\t// longer than 3 digits or greater then 255\n\t\t\tif ($segment == '' OR preg_match(\"/[^0-9]/\", $segment) OR $segment > 255 OR strlen($segment) > 3)\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\treturn TRUE;\n\t}\n\n\t// --------------------------------------------------------------------\n\n\t/**\n\t* Validate IPv6 Address\n\t*\n\t* @access\tprotected\n\t* @param\tstring\n\t* @return\tbool\n\t*/\n\tprotected function _valid_ipv6($str)\n\t{\n\t\t// 8 groups, separated by :\n\t\t// 0-ffff per group\n\t\t// one set of consecutive 0 groups can be collapsed to ::\n\n\t\t$groups = 8;\n\t\t$collapsed = FALSE;\n\n\t\t$chunks = array_filter(\n\t\t\tpreg_split('/(:{1,2})/', $str, NULL, PREG_SPLIT_DELIM_CAPTURE)\n\t\t);\n\n\t\t// Rule out easy nonsense\n\t\tif (current($chunks) == ':' OR end($chunks) == ':')\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// PHP supports IPv4-mapped IPv6 addresses, so we'll expect those as well\n\t\tif (strpos(end($chunks), '.') !== FALSE)\n\t\t{\n\t\t\t$ipv4 = array_pop($chunks);\n\n\t\t\tif ( ! $this->_valid_ipv4($ipv4))\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$groups--;\n\t\t}\n\n\t\twhile ($seg = array_pop($chunks))\n\t\t{\n\t\t\tif ($seg[0] == ':')\n\t\t\t{\n\t\t\t\tif (--$groups == 0)\n\t\t\t\t{\n\t\t\t\t\treturn FALSE;\t// too many groups\n\t\t\t\t}\n\n\t\t\t\tif (strlen($seg) > 2)\n\t\t\t\t{\n\t\t\t\t\treturn FALSE;\t// long separator\n\t\t\t\t}\n\n\t\t\t\tif ($seg == '::')\n\t\t\t\t{\n\t\t\t\t\tif ($collapsed)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn FALSE;\t// multiple collapsed\n\t\t\t\t\t}\n\n\t\t\t\t\t$collapsed = TRUE;\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (preg_match(\"/[^0-9a-f]/i\", $seg) OR strlen($seg) > 4)\n\t\t\t{\n\t\t\t\treturn FALSE; // invalid segment\n\t\t\t}\n\t\t}\n\n\t\treturn $collapsed OR $groups == 1;\n\t}\n```\n`filter_var`\u306f\u3053\u3053\u3067\u3082\u5927\u6d3b\u8e8d\u3067\u3059\u306d\u3002\n\n\n\n### alpha\n\n```Form_validation.php\n\tpublic function alpha($str)\n\t{\n\t\treturn ctype_alpha($str);\n\t}\n```\nPHP\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u95a2\u6570\u306b\u6e21\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u30b7\u30f3\u30d7\u30eb\u3067\u3044\u3044\u3067\u3059\u306d\u3002\n\u53c2\u8003\u6587\u732e\uff1a\u3000http://php.net/manual/ja/function.ctype-alpha.php\n\n### alpha_numeric\n\n```Form_validation.php\n\tpublic function alpha_numeric($str)\n\t{\n\t\treturn ctype_alnum((string) $str);\n\t}\n```\n\u3053\u3061\u3089\u3082PHP\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u95a2\u6570\u306b\u6e21\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u30b7\u30f3\u30d7\u30eb\u3067\u3044\u3044\u3067\u3059\u306d\u3002\n\u53c2\u8003\u6587\u732e\uff1a\u3000http://php.net/manual/ja/function.ctype-alnum.php\n"}