{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nSpring Expression Language\u3092\u4f7f\u3063\u3066\u76f8\u95a2\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u76f8\u95a2\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u3092\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u306f\u3001\n\nEL\u3092\u4f7f\u3046\u65b9\u6cd5\nEntity\u306e\u306a\u304b\u306b\u3001valide\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\n\n\u304c\u3042\u308b\u304b\u3068\u304a\u3082\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u5236\u7d04\u3082\u30b9\u30ad\u30fc\u30de\u60c5\u5831\u3067\u3042\u308b\u3053\u3068\u3001\u5236\u7d04\u6761\u4ef6\u306f\u5236\u7d04\u5bfe\u8c61\u306e\u3067\u304d\u308b\u3060\u3051\u8fd1\u304f\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3001\u5ba3\u8a00\u7684\u3067\u3042\u308b\u3053\u3068\u3001\u304c\u5927\u5207\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001groups\u306e\u4f7f\u3044\u65b9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e00\u822c\u7684\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306egroups\u306b\u8a2d\u5b9a\u3059\u308b\u30e9\u30d9\u30eb\u7684\u306a\u4f7f\u3044\u65b9\u304c\u7d39\u4ecb\u3055\u308c\u308b\u4e8b\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30e9\u30d9\u30eb\u3068\u3057\u3066\u3067\u306f\u306a\u304f\u5b9f\u969b\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\n\u74b0\u5883\n\nJDK1.8\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\n\njavax-validation-api\nspring-mvc\nspring-context\nhibernate-validation\n\u307b\u304b\n\n\n\u53c2\u8003\n[JSR 303] :Bean Validation\nSpring framework Reference document\noval object validation framework\n\n\u5b9f\u88c5\n\n\u30b3\u30fc\u30c9\n\nValidTrue.java\n@Target(value={ TYPE,FIELD,METHOD })\n@Retention(RUNTIME)\n@Constraint(validatedBy={ SpELValidator.class })\npublic @interface ValidTrue{\n    String value() default \"true\";\n    String message() default \"error!\";\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n}\n\n\n\nSpELValidator.java\npublic class SpELValidator implements ConstraintValidator<ValidTrue, Object>{\n    ExpressionParser parser =  new SpelExpressionParser();\n    ValidTrue annotation;\n\n    @Override\n    public void initialize(ValidTrue annotation) {\n        this.annotation = annotation;\n    }\n    @Override\n    public boolean isValid(Object value, ConstraintValidatorContext context) {\n        context.buildConstraintViolationWithTemplate(annotation.message());\n\n        EvaluationContext evContext = new StandardEvaluationContext(value);\n\n        Expression exp = parser.parseExpression(annotation.value());\n        return (boolean)exp.getValue(evContext, boolean.class);\n    }\n}\n\n\n\ntest\n\n1. @ValidTrue type\n\nEntity.java\n@ValidTrue(\"from < to\")\npublic class Entity{\n    public LocalDate from;\n    public LocalDate to;\n}\n\n\n\n2. @AsserTrue type\n\nEntity.java\n//@ValidTrue(\"from < to\")\npublic class Entity{\n    public LocalDate from;\n    public LocalDate to;\n\n    @AssertTrue\n    private isValid(){ return from.isBefore(to); }\n}\n\n\n\nValidTrueTest.java\npublic class ValidTrueTest {\n    @Test\n    public void test() throws Exception{\n        ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();\n        Validator validator = validatorFactory.getValidator();\n\n        Entity e = new Entity();\n        e.from = LocalDate.now();\n        e.to = LocalDate.MIN;\n        validator.validate(e).stream().peek(System.out::println).findFirst().ifPresent( Assert::assertNotNull );\n    }\n}\n\n\n\n\u7d50\u679c\nConstraintViolationImpl{interpolatedMessage='error!', propertyPath=, rootBeanClass=class com.test.batch.Entity, messageTemplate='error!'}\n\n\uff11\u306e\u4f8b\u306f\u3001SpEL\u3067\u306a\u304f\u3066\u3082\u57fa\u672c\u540c\u3058\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001EL\u306e\u8868\u73fe\u529b\u306e\u53ca\u3076\u304b\u304e\u308a\u3069\u3093\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u3067\u3082\u304b\u3051\u307e\u3059\u3002\nboolean\u3092\u8fd4\u305b\u3070\u3044\u3044\u3060\u3051\u3002\n\uff12\u306e\u4f8b\u306f\u6a19\u6e96\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3@AssertTrue\u3092\u7528\u3044\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\uff08\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5909\u66f4\u3057\u3066\u3057\u307e\u3046\uff09\u306e\u304c\u500b\u4eba\u7684\u306b\u3069\u3046\u304b\u3068\u601d\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001private\u3067\u5ba3\u8a00\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u308c\u3060\u3068\u6c17\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u3068\u3053\u308d\u304c\u30fb\u30fb\u30fb\n\ngroups\u3092\u4f7f\u3063\u3066\u307f\u308b\n\ntest\n\n1. @ValidTrue type\n\nTypeA.java\n@ValidTrue(\"from<to\")\npublic interface TypeA  {   \n}\n\n\n\nTypeB.java\n@ValidTrue(\"from>to\")\npublic interface TypeB  {   \n}\n\n\n\nEntity.java\npublic class Entity implements TypeA,TypeB{\n    public LocalDate from;\n    public LocalDate to;\n\n\n\nValidTrueTest.java\npublic class ValidTrueTest {\n    @Test\n    public void test() throws Exception{\n        ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();\n        Validator validator = validatorFactory.getValidator();\n\n        Entity e = new Entity();\n        e.from = LocalDate.now();\n        e.to = LocalDate.MIN;\n        validator.validate(e,TypeA.class).stream().peek(System.out::println).findFirst().ifPresent( Assert::assertNotNull );\n    }\n}\n\n\n\n2. @AssertTrue type\n\nTypeA.java\npublic interface TypeA  {   \n    public LocalDate getFrom();\n    public LocalDate getTo();\n\n    @AssertTrue\n    public default boolean isValid(){\n        return getFrom().isBefore(getTo());\n    }\n}\n\n\n\nTypeB.java\npublic interface TypeB  {   \n    public LocalDate getFrom();\n    public LocalDate getTo();\n\n    @AssertTrue\n    public default boolean isValid(){\n        return getFrom().isAfter(getTo());\n    }\n}\n\n\n\nEntity.java\npublic class Entity implements TypeA,TypeB{\n    @NotNull\n    public LocalDate from;\n    @NotNull\n    public LocalDate to;\n\n    @Override\n    public LocalDate getFrom(){ return from; }\n    @Override\n    public LocalDate getTo(){ return to; }\n\n\n\nValidTrueTest.java\npublic class ValidTrueTest {\n    @Test\n    public void test() throws Exception{\n        ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();\n        Validator validator = validatorFactory.getValidator();\n\n        Entity e = new Entity();\n        e.from = LocalDate.now();\n        e.to = LocalDate.MIN;\n        validator.validate(e,Entity.class,TypeA.class).stream().peek(System.out::println).findFirst().ifPresent( Assert::assertNotNull );\n    }\n}\n\n\n\n\u7d50\u679c\n\u5236\u7d04\u6761\u4ef6\u304c\u591a\u3044\u3068\u304d\u3001\u4e00\u3064\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306bTypeA\u7528\u306e\u5236\u7d04\u3068TypeB\u7528\u306e\u5236\u7d04\u3092\u6ca2\u5c71\u66f8\u304f\u3068\u3054\u3061\u3083\u3054\u3061\u3083\u3059\u308b\u306a\u3089\u3001\u3053\u306e\u3088\u3046\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u5236\u7d04\u3092\u5206\u3051\u3066\u66f8\u304f\u306e\u306f\u826f\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\n\u4eee\u9762\u3092\u5f35\u308a\u66ff\u3048\u308b\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u3057\u3087\u3046\u304b\u3002\ngetter/setter\u3082\u304d\u3061\u3093\u3068\u66f8\u3044\u3066\u304a\u3051\u3070\u3001TypeA\u578b\u3068\u3057\u3066\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3057\u3002\u540c\u3058Bean\u3060\u3051\u3069\u5185\u5bb9\u306b\u3088\u3063\u3066\u8907\u6570\u306e\u610f\u5473\u306b\u5207\u308a\u66ff\u3048\u3089\u308c\u307e\u3059\u3002\n\u4f8b\uff09\n* \u672a\u5b9f\u52b9\u306e\u7533\u8acb / \u5b9f\u884c\u4e2d\u306e\u7533\u8acb / \u5b9f\u884c\u6e08\u307f\u306e\u7533\u8acb\u3000\uff08\u6642\u9593\u306b\u3088\u3063\u3066\u9077\u79fb\u3059\u308b\u5834\u5408\uff09\n* \u56fa\u5b9a\u91d1\u5229\u30ed\u30fc\u30f3 / \u5909\u52d5\u91d1\u5229\u30ed\u30fc\u30f3\u3000\uff08\u305d\u3082\u305d\u3082\u8907\u6570\u306e\u30bf\u30a4\u30d7\u304c\u3042\u308b\u5834\u5408\uff09\n\u306a\u3069\u306a\u3069\u3002\n\u305d\u308c\u305e\u308c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7528\u610f\u3057\u3066validation\u3092\u5207\u308a\u63db\u3048\u3064\u3064\u3001\u305d\u308c\u305e\u308c\u5225\u3005\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u516c\u958b\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u6bb5\u968e\u306a\u3089\u3053\u306e\u5024\u304c\u306f\u3044\u3063\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3001\u306a\u3069\u306a\u3069\u3002\n\n\u7d50\u8ad6\n\ngroup\u4fbf\u5229\uff01\nValidTrue\u60aa\u304f\u306a\u3044\u3068\u601d\u3046\u3093\u3060\u304c\u30fb\u30fb\u30fbAssertTrue\u3067\u826f\u3044\u3068\u3044\u308f\u308c\u308b\u3068\u30fb\u30fb\u30fb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u81ea\u8eab\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u8981\u7d20\u3082EL\u3060\u3068\u5f15\u3063\u5f35\u3063\u3066\u3053\u308c\u308b\u306e\u306f\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n\nQiita\u521d\u3081\u3066\u306e\u6295\u7a3f\u306b\u306a\u308a\u307e\u3059\u3002\u3082\u3057\u5185\u5bb9\u3001\u66f8\u304d\u65b9\u306a\u3069\u554f\u984c\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u307e\u305b\u3002\n# \u6982\u8981\n\n[Spring Expression Language][spel]\u3092\u4f7f\u3063\u3066\u76f8\u95a2\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u76f8\u95a2\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u3092\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u306f\u3001\n\n0. EL\u3092\u4f7f\u3046\u65b9\u6cd5\n1. Entity\u306e\u306a\u304b\u306b\u3001valide\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\n\n\u304c\u3042\u308b\u304b\u3068\u304a\u3082\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n_\u5236\u7d04\u3082\u30b9\u30ad\u30fc\u30de\u60c5\u5831\u3067\u3042\u308b\u3053\u3068\u3001\u5236\u7d04\u6761\u4ef6\u306f\u5236\u7d04\u5bfe\u8c61\u306e\u3067\u304d\u308b\u3060\u3051\u8fd1\u304f\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3001\u5ba3\u8a00\u7684\u3067\u3042\u308b\u3053\u3068\u3001\u304c\u5927\u5207\u3060\u3068\u601d\u3044\u307e\u3059\u3002_\n\n\u3055\u3089\u306b\u3001groups\u306e\u4f7f\u3044\u65b9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e00\u822c\u7684\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306egroups\u306b\u8a2d\u5b9a\u3059\u308b\u30e9\u30d9\u30eb\u7684\u306a\u4f7f\u3044\u65b9\u304c\u7d39\u4ecb\u3055\u308c\u308b\u4e8b\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30e9\u30d9\u30eb\u3068\u3057\u3066\u3067\u306f\u306a\u304f\u5b9f\u969b\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\n\n## \u74b0\u5883\n* JDK1.8\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\n* javax-validation-api\n* spring-mvc\n* spring-context\n* hibernate-validation\n* \u307b\u304b\n\n## \u53c2\u8003\n[[JSR 303] :Bean Validation](http://beanvalidation.org/1.0/spec/)\n[Spring framework Reference document][spring]\n[oval object validation framework][oval]\n\n# \u5b9f\u88c5\n## \u30b3\u30fc\u30c9\n```Java:ValidTrue.java\n@Target(value={ TYPE,FIELD,METHOD })\n@Retention(RUNTIME)\n@Constraint(validatedBy={ SpELValidator.class })\npublic @interface ValidTrue{\n    String value() default \"true\";\n    String message() default \"error!\";\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n}\n```\n```Java:SpELValidator.java\npublic class SpELValidator implements ConstraintValidator<ValidTrue, Object>{\n\tExpressionParser parser =  new SpelExpressionParser();\n\tValidTrue annotation;\n\n\t@Override\n\tpublic void initialize(ValidTrue annotation) {\n\t\tthis.annotation = annotation;\n\t}\n\t@Override\n\tpublic boolean isValid(Object value, ConstraintValidatorContext context) {\n\t\tcontext.buildConstraintViolationWithTemplate(annotation.message());\n\t\t\n\t\tEvaluationContext evContext = new StandardEvaluationContext(value);\n\t\t\n\t\tExpression exp = parser.parseExpression(annotation.value());\n\t\treturn (boolean)exp.getValue(evContext, boolean.class);\n\t}\n}\n```\n## test\n\n### 1. @ValidTrue type\n\n```Java:Entity.java\n@ValidTrue(\"from < to\")\npublic class Entity{\n\tpublic LocalDate from;\n\tpublic LocalDate to;\n}\n```\n### 2. @AsserTrue type\n```Java:Entity.java\n//@ValidTrue(\"from < to\")\npublic class Entity{\n\tpublic LocalDate from;\n\tpublic LocalDate to;\n\n    @AssertTrue\n    private isValid(){ return from.isBefore(to); }\n}\n```\n```Java:ValidTrueTest.java\npublic class ValidTrueTest {\n\t@Test\n\tpublic void test() throws Exception{\n\t\tValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();\n        Validator validator = validatorFactory.getValidator();\n       \n        Entity e = new Entity();\n        e.from = LocalDate.now();\n        e.to = LocalDate.MIN;\n        validator.validate(e).stream().peek(System.out::println).findFirst().ifPresent( Assert::assertNotNull );\n    }\n}\n```\n## \u7d50\u679c\n    ConstraintViolationImpl{interpolatedMessage='error!', propertyPath=, rootBeanClass=class com.test.batch.Entity, messageTemplate='error!'}\n\n\uff11\u306e\u4f8b\u306f\u3001[SpEL][spel]\u3067\u306a\u304f\u3066\u3082\u57fa\u672c\u540c\u3058\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001EL\u306e\u8868\u73fe\u529b\u306e\u53ca\u3076\u304b\u304e\u308a\u3069\u3093\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u3067\u3082\u304b\u3051\u307e\u3059\u3002\nboolean\u3092\u8fd4\u305b\u3070\u3044\u3044\u3060\u3051\u3002\n\uff12\u306e\u4f8b\u306f\u6a19\u6e96\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3@AssertTrue\u3092\u7528\u3044\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\uff08\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5909\u66f4\u3057\u3066\u3057\u307e\u3046\uff09\u306e\u304c\u500b\u4eba\u7684\u306b\u3069\u3046\u304b\u3068\u601d\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001private\u3067\u5ba3\u8a00\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u308c\u3060\u3068\u6c17\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u3068\u3053\u308d\u304c\u30fb\u30fb\u30fb\n\n# groups\u3092\u4f7f\u3063\u3066\u307f\u308b\n\n##test\n\n### 1. @ValidTrue type\n```Java:TypeA.java\n@ValidTrue(\"from<to\")\npublic interface TypeA  {\t\n}\n```\n```Java:TypeB.java\n@ValidTrue(\"from>to\")\npublic interface TypeB  {\t\n}\n```\n```Java:Entity.java\npublic class Entity implements TypeA,TypeB{\n\tpublic LocalDate from;\n\tpublic LocalDate to;\n```\n\n```Java:ValidTrueTest.java\npublic class ValidTrueTest {\n\t@Test\n\tpublic void test() throws Exception{\n\t\tValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();\n        Validator validator = validatorFactory.getValidator();\n       \n        Entity e = new Entity();\n        e.from = LocalDate.now();\n        e.to = LocalDate.MIN;\n        validator.validate(e,TypeA.class).stream().peek(System.out::println).findFirst().ifPresent( Assert::assertNotNull );\n    }\n}\n```\n\n### 2. @AssertTrue type\n```Java:TypeA.java\npublic interface TypeA  {\t\n    public LocalDate getFrom();\n    public LocalDate getTo();\n\n    @AssertTrue\n    public default boolean isValid(){\n        return getFrom().isBefore(getTo());\n    }\n}\n```\n```Java:TypeB.java\npublic interface TypeB  {\t\n    public LocalDate getFrom();\n    public LocalDate getTo();\n\n    @AssertTrue\n    public default boolean isValid(){\n        return getFrom().isAfter(getTo());\n    }\n}\n```\n```Java:Entity.java\npublic class Entity implements TypeA,TypeB{\n    @NotNull\n\tpublic LocalDate from;\n    @NotNull\n\tpublic LocalDate to;\n\n    @Override\n    public LocalDate getFrom(){ return from; }\n    @Override\n    public LocalDate getTo(){ return to; }\n```\n\n```Java:ValidTrueTest.java\npublic class ValidTrueTest {\n\t@Test\n\tpublic void test() throws Exception{\n\t\tValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();\n        Validator validator = validatorFactory.getValidator();\n       \n        Entity e = new Entity();\n        e.from = LocalDate.now();\n        e.to = LocalDate.MIN;\n        validator.validate(e,Entity.class,TypeA.class).stream().peek(System.out::println).findFirst().ifPresent( Assert::assertNotNull );\n    }\n}\n```\n##\u7d50\u679c\n\n\u5236\u7d04\u6761\u4ef6\u304c\u591a\u3044\u3068\u304d\u3001\u4e00\u3064\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306bTypeA\u7528\u306e\u5236\u7d04\u3068TypeB\u7528\u306e\u5236\u7d04\u3092\u6ca2\u5c71\u66f8\u304f\u3068\u3054\u3061\u3083\u3054\u3061\u3083\u3059\u308b\u306a\u3089\u3001\u3053\u306e\u3088\u3046\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u5236\u7d04\u3092\u5206\u3051\u3066\u66f8\u304f\u306e\u306f\u826f\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u4eee\u9762\u3092\u5f35\u308a\u66ff\u3048\u308b\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u3057\u3087\u3046\u304b\u3002\ngetter/setter\u3082\u304d\u3061\u3093\u3068\u66f8\u3044\u3066\u304a\u3051\u3070\u3001TypeA\u578b\u3068\u3057\u3066\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3057\u3002\u540c\u3058Bean\u3060\u3051\u3069\u5185\u5bb9\u306b\u3088\u3063\u3066\u8907\u6570\u306e\u610f\u5473\u306b\u5207\u308a\u66ff\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u4f8b\uff09\n* \u672a\u5b9f\u52b9\u306e\u7533\u8acb / \u5b9f\u884c\u4e2d\u306e\u7533\u8acb / \u5b9f\u884c\u6e08\u307f\u306e\u7533\u8acb\u3000\uff08\u6642\u9593\u306b\u3088\u3063\u3066\u9077\u79fb\u3059\u308b\u5834\u5408\uff09\n* \u56fa\u5b9a\u91d1\u5229\u30ed\u30fc\u30f3 / \u5909\u52d5\u91d1\u5229\u30ed\u30fc\u30f3\u3000\uff08\u305d\u3082\u305d\u3082\u8907\u6570\u306e\u30bf\u30a4\u30d7\u304c\u3042\u308b\u5834\u5408\uff09\n\u306a\u3069\u306a\u3069\u3002\n\n\u305d\u308c\u305e\u308c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7528\u610f\u3057\u3066validation\u3092\u5207\u308a\u63db\u3048\u3064\u3064\u3001\u305d\u308c\u305e\u308c\u5225\u3005\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u516c\u958b\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u6bb5\u968e\u306a\u3089\u3053\u306e\u5024\u304c\u306f\u3044\u3063\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3001\u306a\u3069\u306a\u3069\u3002\n\n# \u7d50\u8ad6\n* group\u4fbf\u5229\uff01\n* ValidTrue\u60aa\u304f\u306a\u3044\u3068\u601d\u3046\u3093\u3060\u304c\u30fb\u30fb\u30fbAssertTrue\u3067\u826f\u3044\u3068\u3044\u308f\u308c\u308b\u3068\u30fb\u30fb\u30fb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u81ea\u8eab\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u8981\u7d20\u3082EL\u3060\u3068\u5f15\u3063\u5f35\u3063\u3066\u3053\u308c\u308b\u306e\u306f\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n---\n\nQiita\u521d\u3081\u3066\u306e\u6295\u7a3f\u306b\u306a\u308a\u307e\u3059\u3002\u3082\u3057\u5185\u5bb9\u3001\u66f8\u304d\u65b9\u306a\u3069\u554f\u984c\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u307e\u305b\u3002\n\n\n[oval]:http://oval.sourceforge.net/\n[spring]:http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/\n[spel]:http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#expressions\n[evernote]:https://evernote.com/intl/jp/\n", "tags": ["Java", "springframework", "Validation", "Hibernate", "javax.validation"]}