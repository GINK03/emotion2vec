{"context": " More than 1 year has passed since last update.Akka\u306f\u3001\u57fa\u672c\u7684\u306b\u306f\u30d1\u30b9\u306e\u901a\u3063\u3066\u3044\u308b\u5834\u6240\u306bconf\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u304f\u3053\u3068\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001\n\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u3044\u308b\u6642\u306b\u306f\u3001\u30b3\u30fc\u30c9\u306b\u76f4\u306b\u66f8\u3044\u3066\u3057\u307e\u3044\u305f\u3044\u3053\u3068\u3042\u308a\u307e\u3059\u3088\u306d\u3002\n\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306b\u4f7f\u3048\u308b\u65b9\u6cd5\u3067\u3059\u3002\nimport akka.actor.ActorSystem\nimport com.typesafe.config.ConfigFactory\n    val customConf = ConfigFactory.parseString(\"\"\"\n      akka.actor.deployment {\n        /my-service {\n          router = round-robin-pool\n          nr-of-instances = 3\n        }\n      }\n      \"\"\")\n    // ConfigFactory.load sandwiches customConfig between default reference\n    // config and default overrides, and then resolves it.\n    val system = ActorSystem(\"MySystem\", ConfigFactory.load(customConf))\n\n\u901a\u5e38\u306fval system = ActorSystem(\"MySystem\")\u3068\u5ba3\u8a00\u3059\u308b\u3068\u3053\u308d\u3092\u3001\u7b2c\u4e8c\u5f15\u6570\u306bConfig\u3092\u6e21\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u306b\u3088\u308a\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u3067\u8907\u6570\u306e\u30a2\u30af\u30bf\u30fc\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3044\u5206\u3051\u308b\u3068\u304d\u306b\u4f7f\u3048\u307e\u3059\u3002\n\nActorSystem.scala\nobject ActorSystem extends scala.AnyRef {\n    .\n    .\n    .\n\n  def apply(name : scala.Predef.String, config : com.typesafe.config.Config) : akka.actor.ActorSystem = { /* compiled code */ }\n\n    .\n    .\n    .\n}\n\n\nAkka Documentation - Configuration - Configuring multiple ActorSystem\nGitHub: ActorSystem.scala\nAkka\u306f\u3001\u57fa\u672c\u7684\u306b\u306f\u30d1\u30b9\u306e\u901a\u3063\u3066\u3044\u308b\u5834\u6240\u306bconf\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u304f\u3053\u3068\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001\n\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u3044\u308b\u6642\u306b\u306f\u3001\u30b3\u30fc\u30c9\u306b\u76f4\u306b\u66f8\u3044\u3066\u3057\u307e\u3044\u305f\u3044\u3053\u3068\u3042\u308a\u307e\u3059\u3088\u306d\u3002\n\n\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306b\u4f7f\u3048\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\n```scala\nimport akka.actor.ActorSystem\nimport com.typesafe.config.ConfigFactory\n    val customConf = ConfigFactory.parseString(\"\"\"\n      akka.actor.deployment {\n        /my-service {\n          router = round-robin-pool\n          nr-of-instances = 3\n        }\n      }\n      \"\"\")\n    // ConfigFactory.load sandwiches customConfig between default reference\n    // config and default overrides, and then resolves it.\n    val system = ActorSystem(\"MySystem\", ConfigFactory.load(customConf))\n```\n\n\u901a\u5e38\u306f`val system = ActorSystem(\"MySystem\")`\u3068\u5ba3\u8a00\u3059\u308b\u3068\u3053\u308d\u3092\u3001\u7b2c\u4e8c\u5f15\u6570\u306b`Config`\u3092\u6e21\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u306b\u3088\u308a\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u3067\u8907\u6570\u306e\u30a2\u30af\u30bf\u30fc\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3044\u5206\u3051\u308b\u3068\u304d\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n```scala:ActorSystem.scala\nobject ActorSystem extends scala.AnyRef {\n\t.\n\t.\n\t.\n\n  def apply(name : scala.Predef.String, config : com.typesafe.config.Config) : akka.actor.ActorSystem = { /* compiled code */ }\n\n  \t.\n  \t.\n  \t.\n}\n```\n\n\n[Akka Documentation - Configuration - Configuring multiple ActorSystem](http://doc.akka.io/docs/akka/2.3.7/general/configuration.html#Configuring_multiple_ActorSystem)\n\n[GitHub: ActorSystem.scala](https://github.com/akka/akka/blob/master/akka-actor/src/main/scala/akka/actor/ActorSystem.scala)\n", "tags": ["Scala", "Akka2.3.7"]}