{"tags": ["Python", "\u6570\u5b66", "\u6700\u9069\u5316", "\u7d44\u5408\u305b\u6700\u9069\u5316"], "context": " More than 1 year has passed since last update.\n\n \u554f\u984c\n\u70b9(\u30ce\u30fc\u30c9)\u3068\u9053\u8def\u5019\u88dc(\u30a8\u30c3\u30b8)\u304b\u3089\u306a\u308b\u30b0\u30e9\u30d5\u306b\u304a\u3044\u3066\u3001\n\u30a8\u30c3\u30b8\u4e0a\u306b\u9053\u8def\u3092\u8a2d\u7f6e\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\n\u3044\u304f\u3064\u304b\u306e\u30ce\u30fc\u30c9\u9593\u3067\u79fb\u52d5\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3002\n\u79fb\u52d5\u3057\u305f\u3044\u30ce\u30fc\u30c9\u306e\u7d44\u306e\u96c6\u5408\u3092\u9700\u8981\u3068\u3088\u3076\u3002\n\u9700\u8981\u3092\u6e80\u305f\u3059\u7dcf\u79fb\u52d5\u8ddd\u96e2\u3092\u5229\u4fbf\u6027\u3068\u3059\u308b\u3002\n\u8a2d\u7f6e\u8cbb\u7528\u3068\u5229\u4fbf\u6027\u3092\u6700\u9069\u5316\u305b\u3088\u3002\n\n\u7d44\u5408\u305b\u6700\u9069\u5316\u3092\u4f7f\u3046\u3068\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3082\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n \u8003\u3048\u65b9\n\u8a2d\u7f6e\u8cbb\u7528\u3060\u3051\u3067\u3042\u308c\u3070\u3001\u6a19\u6e96\u554f\u984c\u306e\u4e2d\u306e\u6700\u5c0f\u5168\u57df\u6728\u554f\u984c\u307e\u305f\u306f\u30b7\u30e5\u30bf\u30a4\u30ca\u30fc\u6728\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\n\u5229\u4fbf\u6027\u3060\u3051\u3067\u3042\u308c\u3070\u3001\u6a19\u6e96\u554f\u984c\u306e\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u306e\u5909\u7a2e\u3067\u3042\u308b\u591a\u54c1\u7a2e\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u3068\u306a\u308a\u307e\u3059\u3002\n\u8a2d\u7f6e\u8cbb\u7528\u3092\u4e0b\u3052\u308b\u3068\u5229\u4fbf\u6027\u304c\u60aa\u304f\u306a\u308a\u3001\u5229\u4fbf\u6027\u3092\u4e0a\u3052\u308b\u3068\u8a2d\u7f6e\u8cbb\u7528\u304c\u60aa\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u8907\u6570\u306e\u8a55\u4fa1\u5c3a\u5ea6\u304c\u3042\u308b\u6700\u9069\u5316\u554f\u984c\u3092\u591a\u76ee\u7684\u6700\u9069\u5316\u554f\u984c\u3068\u3088\u3073\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u8a2d\u7f6e\u8cbb\u7528\u3068\u5229\u4fbf\u6027\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u3092\u6c42\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u8a2d\u7f6e\u8cbb\u7528\u306b\u4e0a\u9650\u3092\u3064\u3051\u306a\u304c\u3089\u3001\u591a\u54c1\u7a2e\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u30d9\u30fc\u30b9\u306e\u6570\u7406\u554f\u984c\u3092\u4f55\u56de\u3082\u89e3\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n \u5b9a\u5f0f\u5316\n\n\nobjectiveobjective\\mbox{objective}\n\u2211i\u2211j\u2211kxijk\u2211i\u2211j\u2211kxijk\\sum_i{\\sum_j{\\sum_k{x_{ijk}}}}\n\u5229\u4fbf\u6027\n\n\nvariablesvariables\\mbox{variables}\nxijk\u22650\u00a0\u2200i,j,kxijk\u22650\u00a0\u2200i,j,kx_{ijk} \\ge 0 ~ \\forall i, j, k\n\u9700\u8981i\u306b\u5bfe\u3059\u308b\u30ce\u30fc\u30c9j\u304b\u3089\u30ce\u30fc\u30c9j\u3078\u306e\u6d41\u91cf\n\n\nyjk\u2208{0,1}\u00a0\u2200j,kyjk\u2208{0,1}\u00a0\u2200j,ky_{jk} \\in \\{0, 1\\} ~ \\forall j, k\n\u30ce\u30fc\u30c9j\u3068\u30ce\u30fc\u30c9k\u9593\u306b\u9053\u8def\u3092\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b\n\n\nsubject tosubject to\\mbox{subject to}\n\u2211j,kyjk\u2264\u4e0a\u9650\u2211j,kyjk\u2264\u4e0a\u9650\\sum_{j,k}{y_{jk}} \\le \u4e0a\u9650\n\u8a2d\u7f6e\u8cbb\u7528\u4e0a\u9650\n\n\nxijk\u2264yjk\u00a0\u2200i,j,kxijk\u2264yjk\u00a0\u2200i,j,kx_{ijk} \\le y_{jk} ~ \\forall i, j, k\nx\u306e\u5236\u7d04\n\n\n\u2211kxijk=\u2211kxikj+\u9700\u8981\u00a0\u2200i,j\u2211kxijk=\u2211kxikj+\u9700\u8981\u00a0\u2200i,j\\sum_k{x_{ijk}} = \\sum_k{x_{ikj}} + \u9700\u8981 ~ \\forall i, j\n\u6d41\u91cf\u4fdd\u5b58\n\n\n\n Python\u3067\u89e3\u304f\n\u5fc5\u8981\u306a\u3082\u306e\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n\npython\nimport random, numpy as np, pandas as pd, networkx as nx, matplotlib.pyplot as plt\nfrom itertools import chain, combinations\nfrom pulp import *\n\ndef draw(g):\n    \"\"\"\u63cf\u753b\"\"\"\n    nx.draw_networkx_labels(g, pos=pos)\n    nx.draw_networkx_nodes(g, node_color='w', pos=pos)\n    nx.draw_networkx_edges(g, pos=pos)\n    plt.show()\ndef addvar(cnt=[0], *args, **kwargs):\n    \"\"\"\u5909\u6570\u4f5c\u6210\"\"\"\n    cnt[0] += 1\n    return LpVariable('v%d'%cnt[0], lowBound=0, *args, **kwargs)\n\n\n\u30e9\u30f3\u30c0\u30e0\u306b\u554f\u984c\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u9700\u8981\u306f\u4e00\u90e8\u306e\u30ce\u30fc\u30c9\u9593\u306e\u307f\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\n\npython\nn = 16 # \u30ce\u30fc\u30c9\u6570\ng = nx.random_graphs.fast_gnp_random_graph(n, 0.26, 8) # \u30b0\u30e9\u30d5\nrn = g.nodes() # \u30ce\u30fc\u30c9\u30ea\u30b9\u30c8\npos = nx.spring_layout(g, pos={i:(i/4, i%4) for i in rn}) # \u30ce\u30fc\u30c9\u4f4d\u7f6e\nfor i, j in g.edges():\n    v = pos[i] - pos[j]\n    g[i][j]['dist'] = np.sqrt(v.dot(v)) # \u8ddd\u96e2\ndems = random.sample(list(combinations(rn, 2)), 10) # \u9700\u8981\ndraw(g)\n\n\n\n\u8a66\u3057\u306b\u6700\u5c0f\u5168\u57df\u6728\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\n\npython\nh = nx.minimum_spanning_tree(g, 'dist')\ndraw(h)\n\n\n\n\u89e3\u3044\u3066\u307f\u307e\u3059\u3002\n\npython\nrved = [(j, i) for i, j in g.edges()] # \u9006\u5411\u304d\u306e\u8fba\n# \u9700\u8981\u3054\u3068\u306e\u6d41\u91cf\na = pd.DataFrame([(df, dt, ef, et, g.edge[ef][et]['dist'], addvar()) \n                  for df, dt in dems for ef, et in chain(g.edges(), rved)], \n                 columns=['DeFr', 'DeTo', 'EdFr', 'EdTo', 'Dist', 'Var'])\n# \u8fba\u3092\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b\nb = pd.DataFrame([(fr, to, g.edge[fr][to]['dist'], addvar(cat=LpBinary)) \n                  for fr, to in g.edges()], columns=['Fr', 'To', 'Dist', 'Var'])\nres = [] # \u89e3(\u8a2d\u7f6e\u8cbb\u7528, \u5229\u4fbf\u6027, \u30b0\u30e9\u30d5)\nmxcst = 999 # \u8a2d\u7f6e\u8cbb\u7528\u4e0a\u9650\nwhile True:\n    m = LpProblem() # \u6570\u7406\u30e2\u30c7\u30eb\n    m += lpDot(a.Dist, a.Var) + lpDot(b.Dist, b.Var)*1e-6 # \u76ee\u7684\u95a2\u6570(\u5229\u4fbf\u6027)\n    m += lpDot(b.Dist, b.Var) <= mxcst # \u8a2d\u7f6e\u8cbb\u7528\u4e0a\u9650\n    for _, r in a.iterrows():\n        i, j = r.EdFr, r.EdTo\n        if i > j: i, j = j, i\n        # \u6d41\u91cf\u3092\u6d41\u3059\u5834\u5408\u306f\u3001\u8a2d\u7f6e\u3059\u308b\n        m += r.Var <= lpSum(b.query('Fr==%s & To==%s'%(i,j)).Var)\n    for (df, dt), c in a.groupby(('DeFr', 'DeTo')):\n        for nd in rn:\n            z = 1 if nd == df else -1 if nd == dt else 0\n            # \u6d41\u91cf\u4fdd\u5b58\n            m += lpSum(c.query('EdFr == %s'%nd).Var) == \\\n                 lpSum(c.query('EdTo == %s'%nd).Var) + z\n    m.solve() # \u6c42\u89e3\n    if m.status != 1: break\n    a['Val'] = a.Var.apply(lambda v: value(v)) # \u7d50\u679c(\u6d41\u91cf)\n    b['Val'] = b.Var.apply(lambda v: value(v)) # \u7d50\u679c(\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b)\n    cst = value(lpDot(b.Dist, b.Var)) # \u8a2d\u7f6e\u8cbb\u7528\n    val = value(m.objective) # \u5229\u4fbf\u6027\n    mxcst = cst - 1e-3 # \u6b21\u306e\u8a2d\u7f6e\u8cbb\u7528\u4e0a\u9650\n    h = nx.Graph()\n    h.add_edges_from([(r.Fr, r.To) for _, r in b[b.Val == 1].iterrows()])\n    res.append((cst, val, h))\n\n\n\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u8a2d\u7f6e\u8cbb\u7528\u304c\u4e0a\u304c\u308b\u307b\u3069\u5229\u4fbf\u6027\u304c\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\npython\nplt.rcParams['font.family'] = 'IPAexGothic'\nplt.plot([r[0] for r in res], [r[1] for r in res])\nplt.xlabel('\u8a2d\u7f6e\u8cbb\u7528')\nplt.ylabel('\u5229\u4fbf\u6027')\n\n\n\n\u5229\u4fbf\u6027\u304c\u6700\u3082\u826f\u3044\u5834\u5408\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\n\npython\ndraw(res[0][2])\n\n\n\n\u8a2d\u7f6e\u8cbb\u7528\u306e\u79fb\u308a\u5909\u308f\u308a\u3092GIF\u30a2\u30cb\u30e1\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0a\n# <i class='fa fa-hand-o-right' /> \u554f\u984c\n\n```\n\u70b9(\u30ce\u30fc\u30c9)\u3068\u9053\u8def\u5019\u88dc(\u30a8\u30c3\u30b8)\u304b\u3089\u306a\u308b\u30b0\u30e9\u30d5\u306b\u304a\u3044\u3066\u3001\n\u30a8\u30c3\u30b8\u4e0a\u306b\u9053\u8def\u3092\u8a2d\u7f6e\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\n\u3044\u304f\u3064\u304b\u306e\u30ce\u30fc\u30c9\u9593\u3067\u79fb\u52d5\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3002\n\u79fb\u52d5\u3057\u305f\u3044\u30ce\u30fc\u30c9\u306e\u7d44\u306e\u96c6\u5408\u3092\u9700\u8981\u3068\u3088\u3076\u3002\n\u9700\u8981\u3092\u6e80\u305f\u3059\u7dcf\u79fb\u52d5\u8ddd\u96e2\u3092\u5229\u4fbf\u6027\u3068\u3059\u308b\u3002\n\u8a2d\u7f6e\u8cbb\u7528\u3068\u5229\u4fbf\u6027\u3092\u6700\u9069\u5316\u305b\u3088\u3002\n```\n\n[\u7d44\u5408\u305b\u6700\u9069\u5316](http://qiita.com/Tsutomu-KKE@github/items/bfbf4c185ed7004b5721)\u3092\u4f7f\u3046\u3068\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3082\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# <i class='fa fa-hand-o-right' /> \u8003\u3048\u65b9\n\n\u8a2d\u7f6e\u8cbb\u7528\u3060\u3051\u3067\u3042\u308c\u3070\u3001[\u6a19\u6e96\u554f\u984c](http://qiita.com/Tsutomu-KKE@github/items/0f6c1a4415d196e64314)\u306e\u4e2d\u306e[\u6700\u5c0f\u5168\u57df\u6728](https://ja.wikipedia.org/wiki/%E5%85%A8%E5%9F%9F%E6%9C%A8)\u554f\u984c\u307e\u305f\u306f[\u30b7\u30e5\u30bf\u30a4\u30ca\u30fc\u6728](https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%A5%E3%82%BF%E3%82%A4%E3%83%8A%E3%83%BC%E6%9C%A8)\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\n\u5229\u4fbf\u6027\u3060\u3051\u3067\u3042\u308c\u3070\u3001\u6a19\u6e96\u554f\u984c\u306e\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u306e\u5909\u7a2e\u3067\u3042\u308b\u591a\u54c1\u7a2e\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u8a2d\u7f6e\u8cbb\u7528\u3092\u4e0b\u3052\u308b\u3068\u5229\u4fbf\u6027\u304c\u60aa\u304f\u306a\u308a\u3001\u5229\u4fbf\u6027\u3092\u4e0a\u3052\u308b\u3068\u8a2d\u7f6e\u8cbb\u7528\u304c\u60aa\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u8907\u6570\u306e\u8a55\u4fa1\u5c3a\u5ea6\u304c\u3042\u308b\u6700\u9069\u5316\u554f\u984c\u3092\u591a\u76ee\u7684\u6700\u9069\u5316\u554f\u984c\u3068\u3088\u3073\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u8a2d\u7f6e\u8cbb\u7528\u3068\u5229\u4fbf\u6027\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u3092\u6c42\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u8a2d\u7f6e\u8cbb\u7528\u306b\u4e0a\u9650\u3092\u3064\u3051\u306a\u304c\u3089\u3001\u591a\u54c1\u7a2e\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u30d9\u30fc\u30b9\u306e\u6570\u7406\u554f\u984c\u3092\u4f55\u56de\u3082\u89e3\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n# <i class='fa fa-hand-o-right' /> \u5b9a\u5f0f\u5316\n\n<table>\n<tr><td>$\\mbox{objective}$</td><td>$\\sum_i{\\sum_j{\\sum_k{x_{ijk}}}}$</td><td>\u5229\u4fbf\u6027</td></tr>\n<tr><td rowspan=\"2\">$\\mbox{variables}$</td><td>$x_{ijk} \\ge 0 ~ \\forall i, j, k$</td><td>\u9700\u8981i\u306b\u5bfe\u3059\u308b\u30ce\u30fc\u30c9j\u304b\u3089\u30ce\u30fc\u30c9j\u3078\u306e\u6d41\u91cf</td></tr>\n<tr><td>$y_{jk} \\in \\{0, 1\\} ~ \\forall j, k$</td><td>\u30ce\u30fc\u30c9j\u3068\u30ce\u30fc\u30c9k\u9593\u306b\u9053\u8def\u3092\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b</td></tr>\n<tr><td rowspan=\"3\">$\\mbox{subject to}$</td><td>$\\sum_{j,k}{y_{jk}} \\le \u4e0a\u9650$</td><td>\u8a2d\u7f6e\u8cbb\u7528\u4e0a\u9650</td></tr>\n<tr><td>$x_{ijk} \\le y_{jk} ~ \\forall i, j, k$</td><td>x\u306e\u5236\u7d04</td></tr>\n<tr><td>$\\sum_k{x_{ijk}} = \\sum_k{x_{ikj}} + \u9700\u8981 ~ \\forall i, j$</td><td>\u6d41\u91cf\u4fdd\u5b58</td></tr>\n</table>\n\n# <i class='fa fa-hand-o-right' /> Python\u3067\u89e3\u304f\n\n\u5fc5\u8981\u306a\u3082\u306e\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n\n```py3:python\nimport random, numpy as np, pandas as pd, networkx as nx, matplotlib.pyplot as plt\nfrom itertools import chain, combinations\nfrom pulp import *\n\ndef draw(g):\n    \"\"\"\u63cf\u753b\"\"\"\n    nx.draw_networkx_labels(g, pos=pos)\n    nx.draw_networkx_nodes(g, node_color='w', pos=pos)\n    nx.draw_networkx_edges(g, pos=pos)\n    plt.show()\ndef addvar(cnt=[0], *args, **kwargs):\n    \"\"\"\u5909\u6570\u4f5c\u6210\"\"\"\n    cnt[0] += 1\n    return LpVariable('v%d'%cnt[0], lowBound=0, *args, **kwargs)\n```\n\n\u30e9\u30f3\u30c0\u30e0\u306b\u554f\u984c\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u9700\u8981\u306f\u4e00\u90e8\u306e\u30ce\u30fc\u30c9\u9593\u306e\u307f\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\n\n```py3:python\nn = 16 # \u30ce\u30fc\u30c9\u6570\ng = nx.random_graphs.fast_gnp_random_graph(n, 0.26, 8) # \u30b0\u30e9\u30d5\nrn = g.nodes() # \u30ce\u30fc\u30c9\u30ea\u30b9\u30c8\npos = nx.spring_layout(g, pos={i:(i/4, i%4) for i in rn}) # \u30ce\u30fc\u30c9\u4f4d\u7f6e\nfor i, j in g.edges():\n    v = pos[i] - pos[j]\n    g[i][j]['dist'] = np.sqrt(v.dot(v)) # \u8ddd\u96e2\ndems = random.sample(list(combinations(rn, 2)), 10) # \u9700\u8981\ndraw(g)\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/66505425-3948-709f-8fe4-8125ebbb1e68.png)\n\n\u8a66\u3057\u306b\u6700\u5c0f\u5168\u57df\u6728\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\n\n```py3:python\nh = nx.minimum_spanning_tree(g, 'dist')\ndraw(h)\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/8091f53b-c5dd-69f3-9fbd-cc92250eb3b8.png)\n\n\u89e3\u3044\u3066\u307f\u307e\u3059\u3002\n\n```py3:python\nrved = [(j, i) for i, j in g.edges()] # \u9006\u5411\u304d\u306e\u8fba\n# \u9700\u8981\u3054\u3068\u306e\u6d41\u91cf\na = pd.DataFrame([(df, dt, ef, et, g.edge[ef][et]['dist'], addvar()) \n                  for df, dt in dems for ef, et in chain(g.edges(), rved)], \n                 columns=['DeFr', 'DeTo', 'EdFr', 'EdTo', 'Dist', 'Var'])\n# \u8fba\u3092\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b\nb = pd.DataFrame([(fr, to, g.edge[fr][to]['dist'], addvar(cat=LpBinary)) \n                  for fr, to in g.edges()], columns=['Fr', 'To', 'Dist', 'Var'])\nres = [] # \u89e3(\u8a2d\u7f6e\u8cbb\u7528, \u5229\u4fbf\u6027, \u30b0\u30e9\u30d5)\nmxcst = 999 # \u8a2d\u7f6e\u8cbb\u7528\u4e0a\u9650\nwhile True:\n    m = LpProblem() # \u6570\u7406\u30e2\u30c7\u30eb\n    m += lpDot(a.Dist, a.Var) + lpDot(b.Dist, b.Var)*1e-6 # \u76ee\u7684\u95a2\u6570(\u5229\u4fbf\u6027)\n    m += lpDot(b.Dist, b.Var) <= mxcst # \u8a2d\u7f6e\u8cbb\u7528\u4e0a\u9650\n    for _, r in a.iterrows():\n        i, j = r.EdFr, r.EdTo\n        if i > j: i, j = j, i\n        # \u6d41\u91cf\u3092\u6d41\u3059\u5834\u5408\u306f\u3001\u8a2d\u7f6e\u3059\u308b\n        m += r.Var <= lpSum(b.query('Fr==%s & To==%s'%(i,j)).Var)\n    for (df, dt), c in a.groupby(('DeFr', 'DeTo')):\n        for nd in rn:\n            z = 1 if nd == df else -1 if nd == dt else 0\n            # \u6d41\u91cf\u4fdd\u5b58\n            m += lpSum(c.query('EdFr == %s'%nd).Var) == \\\n                 lpSum(c.query('EdTo == %s'%nd).Var) + z\n    m.solve() # \u6c42\u89e3\n    if m.status != 1: break\n    a['Val'] = a.Var.apply(lambda v: value(v)) # \u7d50\u679c(\u6d41\u91cf)\n    b['Val'] = b.Var.apply(lambda v: value(v)) # \u7d50\u679c(\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b)\n    cst = value(lpDot(b.Dist, b.Var)) # \u8a2d\u7f6e\u8cbb\u7528\n    val = value(m.objective) # \u5229\u4fbf\u6027\n    mxcst = cst - 1e-3 # \u6b21\u306e\u8a2d\u7f6e\u8cbb\u7528\u4e0a\u9650\n    h = nx.Graph()\n    h.add_edges_from([(r.Fr, r.To) for _, r in b[b.Val == 1].iterrows()])\n    res.append((cst, val, h))\n```\n\n\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u8a2d\u7f6e\u8cbb\u7528\u304c\u4e0a\u304c\u308b\u307b\u3069\u5229\u4fbf\u6027\u304c\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n```py3:python\nplt.rcParams['font.family'] = 'IPAexGothic'\nplt.plot([r[0] for r in res], [r[1] for r in res])\nplt.xlabel('\u8a2d\u7f6e\u8cbb\u7528')\nplt.ylabel('\u5229\u4fbf\u6027')\n```\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/fcad1d1e-3c6e-aba1-eed4-4dd489957b05.png)\n\n\n\u5229\u4fbf\u6027\u304c\u6700\u3082\u826f\u3044\u5834\u5408\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\n\n```py3:python\ndraw(res[0][2])\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/51ff15d6-76cc-bf5d-faa2-ebdd680e827f.png)\n\n\u8a2d\u7f6e\u8cbb\u7528\u306e\u79fb\u308a\u5909\u308f\u308a\u3092GIF\u30a2\u30cb\u30e1\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n![anim.gif](https://qiita-image-store.s3.amazonaws.com/0/13955/ab1b70e6-7e55-88e5-e530-8264d035dab9.gif)\n\n\u4ee5\u4e0a\n"}