{"tags": ["Python", "OpenCV"], "context": " More than 1 year has passed since last update.\n\nresize\ncv2.resize(src, dsize[, dst[, fx[, fy[, interpolation]]]])\n\n\n\n\uff5cMethod\ninterpolation\n\n\n\n\nNearest Neighbor\ncv2.INTER_NEAREST\n\n\nBilinear\ncv2.INTER_LINEAR\n\n\nBicubic\ncv2.INTER_CUBIC\n\n\n\n\nipython\nIn [51]: rszNN = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_NEAREST)\n    ...: rszBL = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_LINEAR)\n    ...: rszBC = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_CUBIC)\n\n\n\n\npython\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\n\nrszNN = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_NEAREST)\nrszBL = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_LINEAR)\nrszBC = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_CUBIC)\n\nsz  = np.array([I.shape[0],I.shape[1]])\ncsz = np.array([32,32])\ntlpos = (sz - csz)//2\nbrpos = tlpos + csz\n\ncroppedNN = rszNN[tlpos[0]:brpos[0],tlpos[1]:brpos[1],:]\ncroppedBL = rszBL[tlpos[0]:brpos[0],tlpos[1]:brpos[1],:]\ncroppedBC = rszBC[tlpos[0]:brpos[0],tlpos[1]:brpos[1],:]\n\nfig, axes = plt.subplots(ncols=3)\naxes[0].imshow(croppedNN)\naxes[0].set_title('nearest')\naxes[0].set(adjustable='box-forced',aspect='equal')\naxes[1].imshow(croppedBL)\naxes[1].set_title('bilinear')\naxes[1].set(adjustable='box-forced',aspect='equal')\naxes[2].imshow(croppedBC)\naxes[2].set_title('bicubic')\naxes[2].set(adjustable='box-forced',aspect='equal')\nfig.show()\n\n\n\nrotate\n\u753b\u50cf\u306e\u4e2d\u5fc3\u3092\u539f\u70b9\u306b\u56de\u8ee2\u3059\u308b\u5834\u5408\u306f\u3001getRotationMatrix2D\u3068warpAffine\u3092\u4f7f\u3046\u3002\u305f\u3060\u3057\u3001\u5f8c\u8ff0\u3059\u308bscipy\u306erotate\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u7c21\u5358\u306b\u3067\u304d\u308b\u3002\ncv2.getRotationMatrix2D(center, angle, scale)\ncv2.warpAffine(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]])\n\npython\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import ndimage\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\n\nrIntr = 15\nrs = 0\nre = 360\n\nIr = []\n\nfor r in range(rs, re+1, rIntr):\n    center = tuple(np.array(I.shape[0:2])/2)\n    rotMat = cv2.getRotationMatrix2D(center, r, 1.0)    \n    Irot = cv2.warpAffine(I, rotMat, I.shape[0:2], flags=cv2.INTER_LINEAR)\n    Ir.append(Irot)\n\ncols = 4\nrows = int(np.ceil(len(Ir) / float(cols)))\n\nfig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(3*cols,3*rows))\n\nfor idx, I in enumerate(Ir):\n    r = idx // cols\n    c = idx % cols\n\n    title = 'rotate=%d' % (rIntr*idx)\n\n    axes[r,c].imshow(cv2.cvtColor(I, cv2.COLOR_BGR2RGB))\n    axes[r,c].set_title(title)\n    axes[r,c].set(adjustable='box-forced',aspect='equal')\n    axes[r,c].get_xaxis().set_visible(False)\n    axes[r,c].get_yaxis().set_visible(False)    \n\nfor i in range(idx+1, rows*cols):\n    r = i // cols\n    c = i % cols\n    fig.delaxes(axes[r,c])\n\nfig.show()\n\n\n\n\nscipy\nrotate\u306fscipy\u3067\u3084\u308b\u306e\u304c\u7c21\u5358\nscipy.ndimage.interpolation.rotate(input, angle, axes=(1, 0), reshape=True, output=None, order=3, mode='constant', cval=0.0, prefilter=True)\n\npython\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import ndimage\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\n\nrIntr = 15\nrs = 0\nre = 360\n\nIr = []\n\nfor r in range(rs, re+1, rIntr):\n    Irot = ndimage.rotate(I, r, reshape=False)\n    Ir.append(Irot)\n\ncols = 4\nrows = int(np.ceil(len(Ir) / float(cols)))\n\nfig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(3*cols,3*rows))\n\nfor idx, I in enumerate(Ir):\n    r = idx // cols\n    c = idx % cols\n\n    title = 'rotate=%d' % (rIntr*idx)\n\n    axes[r,c].imshow(cv2.cvtColor(I, cv2.COLOR_BGR2RGB))\n    axes[r,c].set_title(title)\n    axes[r,c].set(adjustable='box-forced',aspect='equal')\n    axes[r,c].get_xaxis().set_visible(False)\n    axes[r,c].get_yaxis().set_visible(False)    \n\nfor i in range(idx+1, rows*cols):\n    r = i // cols\n    c = i % cols\n    fig.delaxes(axes[r,c])\n\nfig.show()\n\n\n\n\nflip\ncv2.flip(src, flipCode[, dst])\nflipCode\u304c\u3069\u3063\u3061\u304cvertical\u304bhorizontal\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308b\nflipCode = 0 ... vertical\nflipCode = 1 ... horizontal\n\u5f8c\u8ff0\u306enumpy\u306efliplr, flipud\u3092\u4f7f\u3063\u3066\u3082\u3044\u3044\u304b\u3082\u3002\nlr\u306fleft\u3001right\u3001ud\u306fup\u3001down\u306e\u610f\u5473\u3002\n\npython\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import ndimage\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\nIv = cv2.flip(I, 0)\nIh = cv2.flip(I, 1)\n\n\nfig, axes = plt.subplots(ncols=3, figsize=(15,10))\n\naxes[0].imshow(cv2.cvtColor(I, cv2.COLOR_BGR2RGB))\naxes[0].set_title('original')\naxes[0].set(adjustable='box-forced',aspect='equal')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)\n\naxes[1].imshow(cv2.cvtColor(Iv, cv2.COLOR_BGR2RGB))\naxes[1].set_title('flip vertical')\naxes[1].set(adjustable='box-forced',aspect='equal')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)\n\naxes[2].imshow(cv2.cvtColor(Ih, cv2.COLOR_BGR2RGB))\naxes[2].set_title('flip horizontal')\naxes[2].set(adjustable='box-forced',aspect='equal')\naxes[2].get_xaxis().set_visible(False)\naxes[2].get_yaxis().set_visible(False)\n\nfig.show()\n\n\n\n\nnumpy\nnumpy.fliplr(m)\n\u6c34\u5e73\u65b9\u5411 flip\nnumpy.flipud(m)\n\u5782\u76f4\u65b9\u5411 flip\n\npython\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import ndimage\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\nIv = np.flipud(I)\nIh = np.fliplr(I)\n\n\nfig, axes = plt.subplots(ncols=3, figsize=(15,10))\n\naxes[0].imshow(cv2.cvtColor(I, cv2.COLOR_BGR2RGB))\naxes[0].set_title('original')\naxes[0].set(adjustable='box-forced',aspect='equal')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)\n\naxes[1].imshow(cv2.cvtColor(Iv, cv2.COLOR_BGR2RGB))\naxes[1].set_title('flip vertical')\naxes[1].set(adjustable='box-forced',aspect='equal')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)\n\naxes[2].imshow(cv2.cvtColor(Ih, cv2.COLOR_BGR2RGB))\naxes[2].set_title('flip horizontal')\naxes[2].set(adjustable='box-forced',aspect='equal')\naxes[2].get_xaxis().set_visible(False)\naxes[2].get_yaxis().set_visible(False)\n\nfig.show()\n\n\n\n# resize\n\n[cv2.resize(src, dsize[, dst[, fx[, fy[, interpolation]]]])](http://docs.opencv.org/3.0-last-rst/modules/imgproc/doc/geometric_transformations.html#resize)\n\n\uff5cMethod|interpolation|\n|:---:|:---:|\n|Nearest Neighbor|cv2.INTER_NEAREST|\n|Bilinear|cv2.INTER_LINEAR|\n|Bicubic|cv2.INTER_CUBIC|\n\n```lang:ipython\nIn [51]: rszNN = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_NEAREST)\n    ...: rszBL = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_LINEAR)\n    ...: rszBC = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_CUBIC)\n```\n![resize.png](https://qiita-image-store.s3.amazonaws.com/0/100523/2586aefb-b0b4-3457-cde6-1ac4c668488e.png)\n\n\n```lang:python\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\n\nrszNN = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_NEAREST)\nrszBL = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_LINEAR)\nrszBC = cv2.resize(I, (I.shape[1]*2, I.shape[0]*2), interpolation=cv2.INTER_CUBIC)\n\nsz  = np.array([I.shape[0],I.shape[1]])\ncsz = np.array([32,32])\ntlpos = (sz - csz)//2\nbrpos = tlpos + csz\n\ncroppedNN = rszNN[tlpos[0]:brpos[0],tlpos[1]:brpos[1],:]\ncroppedBL = rszBL[tlpos[0]:brpos[0],tlpos[1]:brpos[1],:]\ncroppedBC = rszBC[tlpos[0]:brpos[0],tlpos[1]:brpos[1],:]\n\nfig, axes = plt.subplots(ncols=3)\naxes[0].imshow(croppedNN)\naxes[0].set_title('nearest')\naxes[0].set(adjustable='box-forced',aspect='equal')\naxes[1].imshow(croppedBL)\naxes[1].set_title('bilinear')\naxes[1].set(adjustable='box-forced',aspect='equal')\naxes[2].imshow(croppedBC)\naxes[2].set_title('bicubic')\naxes[2].set(adjustable='box-forced',aspect='equal')\nfig.show()\n```\n\n# rotate\n\n\u753b\u50cf\u306e\u4e2d\u5fc3\u3092\u539f\u70b9\u306b\u56de\u8ee2\u3059\u308b\u5834\u5408\u306f\u3001getRotationMatrix2D\u3068warpAffine\u3092\u4f7f\u3046\u3002\u305f\u3060\u3057\u3001\u5f8c\u8ff0\u3059\u308bscipy\u306erotate\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u7c21\u5358\u306b\u3067\u304d\u308b\u3002\n\n[cv2.getRotationMatrix2D(center, angle, scale)](http://docs.opencv.org/3.0-last-rst/modules/imgproc/doc/geometric_transformations.html#getrotationmatrix2d)\n\n[cv2.warpAffine(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]])](http://docs.opencv.org/3.0-last-rst/modules/imgproc/doc/geometric_transformations.html#warpaffine)\n\n\n\n\n```lang:python\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import ndimage\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\n\nrIntr = 15\nrs = 0\nre = 360\n\nIr = []\n\nfor r in range(rs, re+1, rIntr):\n    center = tuple(np.array(I.shape[0:2])/2)\n    rotMat = cv2.getRotationMatrix2D(center, r, 1.0)    \n    Irot = cv2.warpAffine(I, rotMat, I.shape[0:2], flags=cv2.INTER_LINEAR)\n    Ir.append(Irot)\n\ncols = 4\nrows = int(np.ceil(len(Ir) / float(cols)))\n\nfig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(3*cols,3*rows))\n\nfor idx, I in enumerate(Ir):\n    r = idx // cols\n    c = idx % cols\n    \n    title = 'rotate=%d' % (rIntr*idx)\n    \n    axes[r,c].imshow(cv2.cvtColor(I, cv2.COLOR_BGR2RGB))\n    axes[r,c].set_title(title)\n    axes[r,c].set(adjustable='box-forced',aspect='equal')\n    axes[r,c].get_xaxis().set_visible(False)\n    axes[r,c].get_yaxis().set_visible(False)    \n\nfor i in range(idx+1, rows*cols):\n    r = i // cols\n    c = i % cols\n    fig.delaxes(axes[r,c])\n\nfig.show()\n```\n![rotate_opencv.png](https://qiita-image-store.s3.amazonaws.com/0/100523/6968f13a-ea6e-7f59-aa3f-2f0438485500.png)\n\n## scipy\nrotate\u306fscipy\u3067\u3084\u308b\u306e\u304c\u7c21\u5358\n\n[scipy.ndimage.interpolation.rotate(input, angle, axes=(1, 0), reshape=True, output=None, order=3, mode='constant', cval=0.0, prefilter=True)](http://docs.scipy.org/doc/scipy-0.16.0/reference/generated/scipy.ndimage.interpolation.rotate.html)\n\n```lang:python\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import ndimage\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\n\nrIntr = 15\nrs = 0\nre = 360\n\nIr = []\n\nfor r in range(rs, re+1, rIntr):\n    Irot = ndimage.rotate(I, r, reshape=False)\n    Ir.append(Irot)\n\ncols = 4\nrows = int(np.ceil(len(Ir) / float(cols)))\n\nfig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(3*cols,3*rows))\n\nfor idx, I in enumerate(Ir):\n    r = idx // cols\n    c = idx % cols\n    \n    title = 'rotate=%d' % (rIntr*idx)\n    \n    axes[r,c].imshow(cv2.cvtColor(I, cv2.COLOR_BGR2RGB))\n    axes[r,c].set_title(title)\n    axes[r,c].set(adjustable='box-forced',aspect='equal')\n    axes[r,c].get_xaxis().set_visible(False)\n    axes[r,c].get_yaxis().set_visible(False)    \n\nfor i in range(idx+1, rows*cols):\n    r = i // cols\n    c = i % cols\n    fig.delaxes(axes[r,c])\n\nfig.show()\n```\n![rotate_scipy.png](https://qiita-image-store.s3.amazonaws.com/0/100523/32e72eaf-5769-33b5-b93e-8884eba83bf0.png)\n\n\n# flip\n\n[cv2.flip(src, flipCode[, dst])](http://docs.opencv.org/3.0-last-rst/modules/core/doc/operations_on_arrays.html?highlight=flip#flip)\n\nflipCode\u304c\u3069\u3063\u3061\u304cvertical\u304bhorizontal\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308b\n\nflipCode = 0 ... vertical\nflipCode = 1 ... horizontal\n\n\u5f8c\u8ff0\u306enumpy\u306efliplr, flipud\u3092\u4f7f\u3063\u3066\u3082\u3044\u3044\u304b\u3082\u3002\nlr\u306fleft\u3001right\u3001ud\u306fup\u3001down\u306e\u610f\u5473\u3002\n\n```lang:python\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import ndimage\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\nIv = cv2.flip(I, 0)\nIh = cv2.flip(I, 1)\n\n\nfig, axes = plt.subplots(ncols=3, figsize=(15,10))\n\naxes[0].imshow(cv2.cvtColor(I, cv2.COLOR_BGR2RGB))\naxes[0].set_title('original')\naxes[0].set(adjustable='box-forced',aspect='equal')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)\n\naxes[1].imshow(cv2.cvtColor(Iv, cv2.COLOR_BGR2RGB))\naxes[1].set_title('flip vertical')\naxes[1].set(adjustable='box-forced',aspect='equal')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)\n\naxes[2].imshow(cv2.cvtColor(Ih, cv2.COLOR_BGR2RGB))\naxes[2].set_title('flip horizontal')\naxes[2].set(adjustable='box-forced',aspect='equal')\naxes[2].get_xaxis().set_visible(False)\naxes[2].get_yaxis().set_visible(False)\n\nfig.show()\n```\n![flip_opencv.png](https://qiita-image-store.s3.amazonaws.com/0/100523/2606b807-444a-e8be-7eb3-132732858645.png)\n\n## numpy\n\n[numpy.fliplr(m)](http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.fliplr.html#numpy.fliplr)\n\u6c34\u5e73\u65b9\u5411 flip\n[numpy.flipud(m)](http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.flipud.html)\n\u5782\u76f4\u65b9\u5411 flip\n\n```lang:python\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import ndimage\n\nI = cv2.imread('./data/SIDBA/Lenna.bmp')\nIv = np.flipud(I)\nIh = np.fliplr(I)\n\n\nfig, axes = plt.subplots(ncols=3, figsize=(15,10))\n\naxes[0].imshow(cv2.cvtColor(I, cv2.COLOR_BGR2RGB))\naxes[0].set_title('original')\naxes[0].set(adjustable='box-forced',aspect='equal')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)\n\naxes[1].imshow(cv2.cvtColor(Iv, cv2.COLOR_BGR2RGB))\naxes[1].set_title('flip vertical')\naxes[1].set(adjustable='box-forced',aspect='equal')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)\n\naxes[2].imshow(cv2.cvtColor(Ih, cv2.COLOR_BGR2RGB))\naxes[2].set_title('flip horizontal')\naxes[2].set(adjustable='box-forced',aspect='equal')\naxes[2].get_xaxis().set_visible(False)\naxes[2].get_yaxis().set_visible(False)\n\nfig.show()\n```\n\n![flip_numpy.png](https://qiita-image-store.s3.amazonaws.com/0/100523/dfc94455-78d1-3a64-4b0f-1c2f628cf86e.png)\n"}