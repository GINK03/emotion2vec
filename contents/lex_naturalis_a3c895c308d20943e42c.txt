{"context": " More than 1 year has passed since last update.\nRPN.hs\nmodule Main where\nimport System.Environment (getArgs)\nimport Control.Applicative\n\ndata RPValue = Number Int | Plus | Minus | Multiply | Divide deriving (Eq, Show)\ndata Frak = F Int Int deriving (Eq)\ninstance Show Frak where\n  show (F n 0) = \"NaN\"\n  show (F n 1) = show n\n  show (F n m) = show n ++ \"/\" ++ show m\ntype Stack = [Frak]\n\nreduce (F 0 0) = F 0 0\nreduce (F n m) = F (div n (gcd n m)) (div m (gcd n m))\nplus (F n m) (F a b) = reduce $ F (n*b+a*m) (m*b)\nminus (F n m) (F a b) = reduce $ F (n*b-a*m) (m*b)\nmultiply (F n m) (F a b) = reduce $ F (n*a) (m*b)\ndivide (F n m) (F a 0) = F 0 0\ndivide (F n m) (F a b) = reduce $ F (n*b) (m*a)\n\nprocess :: Stack -> RPValue -> Stack\nprocess (x:y:xs) Plus = (plus y x):xs\nprocess (x:y:xs) Minus = (minus y x):xs\nprocess (x:y:xs) Multiply = (multiply y x):xs\nprocess (x:y:xs) Divide = (divide y x):xs\nprocess xs (Number n) = (F n 1):xs\n\nparse :: String -> [RPValue]\nparse = map parse' . words\n  where\n    parse' \"+\" = Plus\n    parse' \"-\" = Minus\n    parse' \"*\" = Multiply\n    parse' \"/\" = Divide\n    parse' str = Number (read str)\n\ncalc :: String -> Stack\ncalc str = foldl process [] (parse str)\n\nmain = mapM_ print =<< calc.head <$> getArgs\n\n\n\n> ./RPN \" 12 7 + 5 6 * / 7 8 + 19 2 * / - 20 3 + 11 /\"\n23/11\n68/285\n\n> ./RPN \" 12 0 / 1 3 / +\"\nNaN\n\n```hs:RPN.hs\nmodule Main where\nimport System.Environment (getArgs)\nimport Control.Applicative\n\ndata RPValue = Number Int | Plus | Minus | Multiply | Divide deriving (Eq, Show)\ndata Frak = F Int Int deriving (Eq)\ninstance Show Frak where\n  show (F n 0) = \"NaN\"\n  show (F n 1) = show n\n  show (F n m) = show n ++ \"/\" ++ show m\ntype Stack = [Frak]\n\nreduce (F 0 0) = F 0 0\nreduce (F n m) = F (div n (gcd n m)) (div m (gcd n m))\nplus (F n m) (F a b) = reduce $ F (n*b+a*m) (m*b)\nminus (F n m) (F a b) = reduce $ F (n*b-a*m) (m*b)\nmultiply (F n m) (F a b) = reduce $ F (n*a) (m*b)\ndivide (F n m) (F a 0) = F 0 0\ndivide (F n m) (F a b) = reduce $ F (n*b) (m*a)\n\nprocess :: Stack -> RPValue -> Stack\nprocess (x:y:xs) Plus = (plus y x):xs\nprocess (x:y:xs) Minus = (minus y x):xs\nprocess (x:y:xs) Multiply = (multiply y x):xs\nprocess (x:y:xs) Divide = (divide y x):xs\nprocess xs (Number n) = (F n 1):xs\n\nparse :: String -> [RPValue]\nparse = map parse' . words\n  where\n    parse' \"+\" = Plus\n    parse' \"-\" = Minus\n    parse' \"*\" = Multiply\n    parse' \"/\" = Divide\n    parse' str = Number (read str)\n\ncalc :: String -> Stack\ncalc str = foldl process [] (parse str)\n\nmain = mapM_ print =<< calc.head <$> getArgs\n\n```\n\n```shell-session\n> ./RPN \" 12 7 + 5 6 * / 7 8 + 19 2 * / - 20 3 + 11 /\"\n23/11\n68/285\n\n> ./RPN \" 12 0 / 1 3 / +\"\nNaN\n```\n", "tags": ["\u30ac\u30e9\u30af\u30bf", "\u60c5\u5f31"]}