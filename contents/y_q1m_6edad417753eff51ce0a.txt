{"context": "\n\n\u6982\u8981\nReactive Extensions \u5b9f\u88c5\u306e1\u3064\u3067\u3042\u308b Reactor Core \u306b\u306f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30de\u30c6\u30ea\u30a2\u30eb \"Lite Rx API Hands-on\" \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3068\u77e5\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u65e9\u901f\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\"Lite Rx API Hands-on\" \u3068\u306f\n\"Eclipse Collections Kata\" \u306e\u3088\u3046\u306b\u3001JUnit \u306e\u7a74\u958b\u304d\u30b3\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u308c\u3092\u30c6\u30b9\u30c8\u304c\u901a\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5b66\u7fd2\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002JUnit \u3092\u52d5\u304b\u305b\u308b\u74b0\u5883\u3067\u3042\u308c\u3070\u3069\u3053\u3067\u3082\u5b9f\u65bd\u3067\u304d\u307e\u3059\u3002\u984c\u6750\u306f Reactor Core \u3067\u3059\u304c\u3001\u30a4\u30f3\u30bf\u30d5\u30a7\u30a4\u30b9\u306e\u3088\u304f\u4f3c\u3066\u3044\u308b RxJava \u306e\u7df4\u7fd2\u306b\u3082\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u306a\u304a\u3001Reactor Core \u306f Java SE 8\u3067\u8ffd\u52a0\u3055\u308c\u305f\u30af\u30e9\u30b9(\u4e3b\u306b\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30a4\u30b9)\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u305f\u3081\u3001 Java SE 8\u4ee5\u4e0a\u3067\u306a\u3044\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\nReactor Core\u3068\u306f\nReactive Extensions \u5b9f\u88c5\u306e1\u3064\u3067\u3059\u3002RxJava \u306b\u4f3c\u305f\u30a4\u30f3\u30bf\u30d5\u30a7\u30a4\u30b9\u306a\u304c\u3089\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u547d\u540d\u3084\u8a2d\u8a08\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f \u300cReactor Core 2.5: \u3082\u3046\u4e00\u3064\u306eJava\u5411\u3051Reactive Extensions\u5b9f\u88c5\u300d \u306b\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u3069\u3046\u3067\u3082\u3044\u3044\u3053\u3068\u3092\u66f8\u304f\u3068\u3001\"Reactor Core\" \u3067\u753b\u50cf\u691c\u7d22\u3092\u3059\u308b\u3068\u3001\u5fc3\u3092\u63fa\u3055\u3076\u3089\u308c\u308b\u58ee\u5927\u306a\u69cb\u9020\u7269\u306e\u753b\u50cf\u304c\u4e0a\u4f4d\u306b\u51fa\u307e\u3059\u3002\n\nReactive Extensions \u3068\u306f\nReactive Streams \u3092\u547d\u4ee4\u578b\u8a00\u8a9e\u306e\u30d1\u30e9\u30c0\u30a4\u30e0\u3067\u5229\u7528\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u305d\u3046\u3067\u3059\u3002\u3042\u3048\u3066\u66f8\u304f\u307b\u3069\u306e\u3053\u3068\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 Reactive Extensions \u306e\u7565\u304c Rx \u3067\u3059\u3002\nReactive Extensions \u3084 Reactive Streams \u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306f \u300cReactive Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 - \u305d\u3057\u3066Spring 5\u3078\u300d\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u307e\u3060\u304a\u8aad\u307f\u3067\u306a\u3051\u308c\u3070\u3001\u3054\u4e00\u8aad\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n\n\u6ce8\u610f\n\n\u30e1\u30bd\u30c3\u30c9\u540d\u306e\u8868\u8a18\nClass#method \u306f static \u30e1\u30bd\u30c3\u30c9\u3092\u3001Class.method \u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u3001\u305d\u308c\u305e\u308c\u793a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001Flux#just \u306f Flux \u30af\u30e9\u30b9\u306e static \u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308b just \u3092\u6307\u3057\u307e\u3059\u3002\n\n\u5b9f\u884c\u74b0\u5883\n\u524d\u8ff0\u306e\u901a\u308a\u3001\u3053\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u3092\u5b9f\u65bd\u3059\u308b\u969b\u306f Java SE 8 \u306e\u30b3\u30fc\u30c9\u304c\u52d5\u4f5c\u3059\u308b\u74b0\u5883\u3092\u7528\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\nOS\nWindows10\n\n\n\n\nJava SE\n1.8.0_91\n\n\nGradle\n2.12\n\n\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u53d6\u5f97\n\"Lite Rx API Hands-on\" \u306f GitHub \u4e0a\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305a GitHub \u306e\u30ea\u30dd\u30b8\u30c8\u30ea \u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002zip\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3082\u3088\u3044\u3067\u3059\u3057\u3001\u4eca\u5f8c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ca2\u732e\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306a\u3089\u30d5\u30a9\u30fc\u30af\u3057\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\nGradle \u5bfe\u5fdc\nGradle \u3067\u306e\u30d3\u30eb\u30c9\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u307e\u305a\u305d\u3053\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u5e78\u3044\u3001\u8907\u96d1\u306a\u8a2d\u5b9a\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u7f6e\u63db\u3059\u308b\u7a0b\u5ea6\u3067\u4f5c\u308c\u307e\u3057\u305f\u3002\u4e0b\u8a18\u306b\u793a\u3057\u307e\u3059\u3002\n\nbuild.gradle\napply plugin: 'java'\n\ndef jdkVersion      = '1.8'\nsourceCompatibility = jdkVersion\ntargetCompatibility = jdkVersion\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'io.projectreactor:reactor-core:3.0.0.RC1'\n    compile 'ch.qos.logback:logback-classic:1.1.3'\n    testCompile 'junit:junit:4.12'\n    testCompile 'io.reactivex:rxjava:1.1.5'\n}\n\n\n\n\u78ba\u8a8d\ntest \u3092 gradle \u304b\u3089\u5b9f\u884c\u3059\u308b\u3068\u3001\u3059\u3079\u3066\u5931\u6557\u3057\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\n$ gradle test\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n\nio.pivotal.literx.Part01CreateFlux > fromValues FAILED\n    java.lang.NullPointerException at Part01CreateFlux.java:38\n\n......\u4e2d\u7565......\n\nio.pivotal.literx.Part09BlockingToReactive > fastPublisherSlowSubscriber FAILED\n    java.lang.NullPointerException at Part09BlockingToReactive.java:62\n\n33 tests completed, 33 failed\n:test FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':test'.\n> There were failing tests. See the report at: lite-rx-api-hands-on/build/reports/tests/index.html\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 7.434 secs\n\n\n\u30c6\u30b9\u30c8\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u5f53\u7136\u3067\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30ec\u30dd\u30fc\u30c8\u306e HTML \u30d5\u30a1\u30a4\u30eb\u304c build/reports/tests/index.html \u306b\u751f\u6210\u3055\u308c\u3066\u3044\u308c\u3070\u3001gradle \u306e\u8a2d\u5b9a\u304c\u3061\u3083\u3093\u3068\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u306e\u78ba\u8a8d\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3067\u306f\u3001\u9806\u306b\u89e3\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u3001\u89e3\u7b54\u3092\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u672a\u6311\u6226\u306e\u65b9\u306f\u3054\u89a7\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u6a21\u7bc4\u89e3\u7b54\u306f\u3053\u3061\u3089\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u53c2\u7167\u53ef\u80fd\u3067\u3059\u3002\u3069\u3046\u3057\u3066\u3082\u308f\u304b\u3089\u306a\u3044\u554f\u984c\u304c\u3042\u308b\u306a\u3089\u8997\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\nPart1 CreateFlux\n\nLearn how to create Flux instances.\n\n\nFlux Javadoc\nTestSubscriber Javadoc\n\n\u307e\u305a Flux \u306e\u751f\u6210\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 Flux \u306f RxJava \u306e Observable \u306b\u5f53\u305f\u308b\u3001\u8907\u6570\u306e\u8981\u7d20\u3092\u6301\u3064 Publisher \u3067\u3059\u3002\n\nReturn an empty Flux\n\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u7279\u306b\u8a00\u3046\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nFlux#just\nFlux<String> emptyFlux() {\n    return Flux.just();\n}\n\n\n\nReturn a Flux that contains 2 values \"foo\" and \"bar\" without using an array or a collection\n\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u7279\u306b\u8a00\u3046\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002Flux#just \u306f\u53ef\u5909\u9577\u5f15\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\nFlux#just\nFlux<String> fooBarFluxFromValues() {\n    return Flux.just(\"foo\", \"bar\");\n}\n\n\n\n\u304a\u307e\u30511\n\u3042\u307e\u308a\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u4e0b\u8a182\u3064\u3067\u3082\u30c6\u30b9\u30c8\u306f\u30d1\u30b9\u3057\u307e\u3059\u3002\n\nFlux#fromArray\nreturn Flux.fromArray(new String[]{\"foo\", \"bar\"});\n\n\n\nFlux#fromIterable\nreturn Flux.fromIterable(Arrays.asList(\"foo\", \"bar\"));\n\n\n\n\u304a\u307e\u30512\nReactor Core \u3067\u306f\u8981\u7d201\u3064\u306e Flux (\u4e71\u66b4\u306a\u8868\u73fe)\u3068\u3057\u3066 Mono \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u30922\u3064 concatWith \u3067\u3064\u306a\u3052\u308b\u3084\u308a\u65b9\u3067\u3082\u30c6\u30b9\u30c8\u306f\u901a\u308a\u307e\u3059\u3002\n\nMono#concatWith\nreturn Mono.just(\"foo\").concatWith(Mono.just(\"bar\"));\n\n\n\nCreate a Flux from a List that contains 2 values \"foo\" and \"bar\"\n\u5148\u307b\u3069\u306e Flux#fromIterable \u3067\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\nFlux#fromIterable\nFlux<String> fooBarFluxFromList() {\n    return Flux.fromIterable(Arrays.asList(\"foo\", \"bar\"));\n}\n\n\n\nCreate a Flux that emits an IllegalStateException\nFlux#error \u3068\u3044\u3046\u306e\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nFlux#error\nFlux<String> errorFlux() {\n    return Flux.error(new IllegalStateException());\n}\n\n\n\nCreate a Flux that never terminates\nFlux#never \u3092\u4f7f\u3044\u307e\u3059\u3002\n\nFlux#never\nFlux<String> neverTerminatedFlux() {\n    return Flux.never();\n}\n\n\n\nCreate a Flux that emits an increasing value each 100ms\n100ms \u5f85\u6a5f\u3059\u308b Flux \u3092 Flux#intervalMillis \u3067\u751f\u6210\u3057\u307e\u3059\u3002\n\nFlux#intervalMillis\nFlux<Long> counter() {\n    return Flux.intervalMillis(100L);\n}\n\n\n\nPart2 CreateMono\n\nLearn how to create Mono instances.\n\n\nMono Javadoc\nTestSubscriber Javadoc\n\n\u6b21\u306f\u5358\u4e00\u306e\u8981\u7d20\u3092\u6301\u3064 Mono \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002 Mono \u306f RxJava \u306e Single \u306b\u5f53\u305f\u308b\u3082\u306e\u3067\u3059\u3002 Flux \u3068\u306e\u9023\u643a\u304c\u30b9\u30e0\u30fc\u30ba\u306b\u5b9f\u884c\u3067\u304d\u308b\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nReturn an empty Mono\n\u305d\u306e\u307e\u307e\u3059\u304e\u3066\u4f55\u3082\u66f8\u304f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nMono#empty\nMono<String> emptyMono() {\n    return Mono.empty();\n}\n\n\n\nReturn a Mono that contains a \"foo\" value\n\u547c\u3073\u51fa\u3057\u5143\u30c6\u30b9\u30c8\u306f fromValue \u30e1\u30bd\u30c3\u30c9\u3067\u3059\u304c\u3001just \u3092\u4f7f\u3044\u307e\u3059\u3002\nMono<String> fooMono() {\n    return Mono.just(\"foo\");\n}\n\n\nCreate a Mono that emits an IllegalStateException\nFlux \u306e\u6642\u3068\u5927\u5dee\u3042\u308a\u307e\u305b\u3093\u3002\n\nMono#error\nMono<String> errorMono() {\n    return Mono.error(new IllegalStateException());\n}\n\n\n\nPart3 Transform\n\nLearn how to transform values.\n\n\u8981\u7d20\u306e\u5024\u3092\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002ReactiveUserRepository \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 repository \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\u3055\u3063\u304d\u307e\u3067\u306b\u6bd4\u3079\u308b\u3068\u5927\u5206\u96e3\u3057\u304f\u306a\u308a\u307e\u3059\u3002\n\nCapitalize the user username, firstname and lastname\n\u5404\u8981\u7d20\u306e\u5909\u66f4\u3092\u3059\u308b\u306b\u306f map \u3092\u4f7f\u3044\u307e\u3059\u3002\u7b2c0\u8981\u7d20\u306e User \u3092\u6301\u3064 Mono \u304c\u5f15\u6570\u3067\u6e21\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u306e\u5404\u8981\u7d20\u3092 UpperCase \u306b\u5909\u66f4\u3057\u3001\u65b0\u3057\u3044User \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8a70\u3081\u307e\u3059\u3002\n\nMono.map\nMono<User> capitalizeOne(final Mono<User> mono) {\n    return mono.map(person -> new User(\n                person.getUsername().toUpperCase(),\n                person.getFirstname().toUpperCase(),\n                person.getLastname().toUpperCase())\n            );\n}\n\n\n\nCapitalize the users username, firstName and lastName\n\u5148\u307b\u3069\u306e Mono \u3068\u540c\u3058\u51e6\u7406\u3092 Flux \u3067\u3084\u308a\u307e\u3059\u3002\n\nFlux.map\nFlux<User> capitalizeMany(final Flux<User> flux) {\n    return flux.map(user -> new User(\n                user.getUsername().toUpperCase(),\n                user.getFirstname().toUpperCase(),\n                user.getLastname().toUpperCase()\n            )\n    );\n}\n\n\n\nCapitalize the users username, firstName and lastName using asyncCapitalizeUser()\n\u3059\u3067\u306b User \u3092\u6e21\u3059\u3068 Capitalize \u3055\u308c\u305f User \u3092\u6301\u3064 Mono \u3092\u8fd4\u3059 asyncCapitalizeUser \u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3042\u3068\u306f\u305d\u308c\u3092 flatMap \u4e2d\u3067\u547c\u3076\u3060\u3051\u3067\u3059\u3002\n\nFlux.flatMap\nFlux<User> asyncCapitalizeMany(final Flux<User> flux) {\n    return flux.flatMap(user -> asyncCapitalizeUser(user));\n}\n\n\n\nPart4 Merge\n\nLearn how to merge flux.\n\n\u8907\u6570\u306e Flux \u3092\u5408\u6210\u3059\u308b\u51e6\u7406\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\nMerge flux1 and flux2 values with interleave\nFlux.mergeWith \u3092\u4f7f\u3063\u3066\u30012\u3064\u306e Flux \u3092 merge \u3059\u308b\u3060\u3051\u306e\u7c21\u5358\u306a\u304a\u4ed5\u4e8b\u3067\u3059\u3002\n\nFlux#merge\nFlux<User> mergeFluxWithInterleave(final Flux<User> flux1, final Flux<User> flux2) {\n    return Flux.merge(flux1, flux2);\n}\n\n\n\nFlux.mergeWith\nFlux<User> mergeFluxWithInterleave(final Flux<User> flux1, final Flux<User> flux2) {\n    return flux1.mergeWith(flux2);\n}\n\n\n\nMerge flux1 and flux2 values with no interleave (flux1 values, and then flux2 values)\nFlux \u540c\u58eb\u306e\u7d50\u5408\u306b\u306f merge \u306e\u307b\u304b\u306b concat \u3082\u3042\u308a\u307e\u3059\u3002\n\nFlux#concat\nFlux<User> mergeFluxWithNoInterleave(final Flux<User> flux1, final Flux<User> flux2) {\n    return Flux.concat(flux1, flux2);\n}\n\n\n\u9055\u3044\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\u300c\u975e\u540c\u671f\u3084\u4e26\u5217\u51e6\u7406\u306b\u3082\u5f79\u7acb\u3064RxJava\u306e\u4f7f\u3044\u65b9\u300d\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u8a73\u7d30\u306f\u305d\u3061\u3089\u306e\u8a18\u4e8b\u3067\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n\n\n\nmethod name\ndesription\n\n\n\n\nmerge\n\u7d50\u5408\u5f8c\u5168\u4f53\u3067\u9806\u5e8f\u3092\u4e26\u3079\u66ff\u3048\u308b\n\n\nconcat\n\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u9806\u306b\u7d50\u5408\n\n\n\n\nCreate a Flux containing the values of the 2 Mono\nmono1\u306eand\u3067mono2\u3092\u3064\u306a\u3052\u308b\u65b9\u6cd5\u3001Flux \u306e concat\u30e1\u30bd\u30c3\u30c9\u3067\u3064\u306a\u3052\u308b\u65b9\u6cd5\u30012\u3064\u3084\u308a\u65b9\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\nMono.concatWith\nFlux<User> createFluxFromMultipleMono(final Mono<User> mono1, final Mono<User> mono2) {\n    return mono1.concatWith(mono2);\n}\n\n\n\nFlux#concat\nFlux<User> createFluxFromMultipleMono(final Mono<User> mono1, final Mono<User> mono2) {\n    return Flux.concat(mono1, mono2);\n}\n\n\n\nPart5 Request\n\nLearn how to control the demand.\n\nReactor Core \u306e\u30c6\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b\u5f79\u7acb\u3064 TestSubscriber \u306e\u4f7f\u3044\u65b9\u3092\u5c11\u3057\u5b66\u3073\u307e\u3059\u3002\n\nCreate a TestSubscriber that requests initially no value\nTestSubscriber<User> createSubscriber(final Flux<User> flux) {\n    return TestSubscriber.subscribe(flux, 0);\n}\n\n\nRequest one value\nvoid requestOne(final TestSubscriber<User> testSubscriber) {\n    testSubscriber.request(1L);\n}\n\n\nReturn a Flux with all users stored in the repository that prints automatically logs for all Reactive Streams signals\nFlux.log\u3092\u547c\u3073\u307e\u3059\u3002\nFlux<User> fluxWithLog() {\n    final Logger logger = Loggers.getLogger(getClass());\n    return repository.findAll().log();\n}\n\n\nReturn a Flux with all users stored in the repository that prints \"Starring:\" on subscribe, \"firstname lastname\" for all values and \"The end!\" on complete\ndoOnSubscribe \u3067 subscribe \u76f4\u5f8c\u306b1\u56de\u3060\u3051\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3001 doOnNext \u3067\u5168\u8981\u7d20\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3001doOnComplete \u3067\u7d42\u4e86\u6642\u306b1\u56de\u3060\u3051\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nreturn repository.findAll()\n            .doOnSubscribe(sub -> System.out.println(\"Starring:\"))\n            .doOnNext(user -> System.out.println(\n                   String.format(\"%s %s\", user.getFirstname(), user.getLastname())))\n            .doOnComplete(() -> System.out.println(\"The end!\"));\n\n\n\u5b9f\u884c\u7d50\u679c\nStarring:\nSkyler White\nJesse Pinkman\nWalter White\nSaul Goodman\nThe end!\n\n\n\nPart6 OtherOperations\n\nLearn how to use various other operators.\n\n\u3055\u307e\u3056\u307e\u306a operator \u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\nCreate a Flux of user from Flux of username, firstname and lastname.\nzip \u3067 Tuple3 \u306b\u307e\u3068\u3081\u3001\u305d\u308c\u3092\u3055\u3089\u306b map \u3067 User \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\nFlux#zip&Flux.map\nFlux<User> userFluxFromStringFlux(\n    final Flux<String> usernameFlux,\n    final Flux<String> firstnameFlux,\n    final Flux<String> lastnameFlux\n    ) {\n    return Flux.zip(usernameFlux, firstnameFlux, lastnameFlux)\n               .map(tuple3 -> new User(tuple3.t1, tuple3.t2, tuple3.t3));\n}\n\n\n\nreturn the mono which returns faster its value\n\u8907\u6570\u306e Mono \u3092\u53d7\u3051\u53d6\u308a\u3001\u6700\u3082\u65e9\u3044 Mono \u3092\u8fd4\u3059 Mono#first \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nMono#first\nMono<User> useFastestMono(final Mono<User> mono1, final Mono<User> mono2) {\n    return Mono.first(mono1, mono2);\n}\n\n\n\nreturn the flux which returns faster the first value\nFlux \u306b\u3082 Flux#firstEmitting \u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\nFlux#firstEmitting\nFlux<User> useFastestFlux(final Flux<User> flux1, final Flux<User> flux2) {\n    return Flux.firstEmitting(flux1, flux2);\n}\n\n\n\nConvert the input Flux to a Mono that represents the complete signal of the flux\nMono<Void> \u3092\u8fd4\u3059 Flux.then \u3092\u4f7f\u3044\u307e\u3059\u3002\n\nFlux.then\nMono<Void> endOfFlux(final Flux<User> flux) {\n    return flux.then();\n}\n\n\n\nReturn a Mono<User> containing Saul when an error occurs in the input Mono, else do not change the input Mono.\n\u30a8\u30e9\u30fc\u767a\u751f\u6642\u306f User.SAUL \u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u6642\u306f\u6e21\u3057\u305f Mono \u3092\u3001\u305d\u308c\u305e\u308c\u8fd4\u3057\u307e\u3059\u3002 Mono.otherwise \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nMono.otherwise\nMono<User> betterCallSaulForBogusMono(final Mono<User> mono) {\n    return mono.otherwise(e -> Mono.just(User.SAUL));\n}\n\n\n\nReturn a Flux containing Saul when an error occurs in the input Flux, else do not change the input Flux.\n\u305d\u306e\u3082\u306e\u305a\u3070\u308a\u306a Flux.onErrorReturn \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\nFlux.onErrorReturn\nFlux<User> betterCallSaulForBogusFlux(final Flux<User> flux) {\n    return flux.onErrorReturn(User.SAUL);\n}\n\n\n\u9577\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u4f11\u61a9\u3092\u5165\u308c\u308b\u306e\u3067\u3042\u308c\u3070\u3053\u306e\u8fba\u304c\u3061\u3087\u3046\u3069\u3088\u3044\u3067\u3059\u3002\n\nPart7 ReactiveToBlocking\n\nLearn how to turn Reactive API to blocking one.\n\nMono \u3084 Flux \u3092\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306a\u96c6\u5408\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\n\nReturn the user contained in that Mono\nMono.block \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u305d\u306e Mono \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4fdd\u6709\u3059\u308b\u5358\u4e00\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\nMono.block\nUser monoToValue(final Mono<User> mono) {\n    return mono.block();\n}\n\n\n\nReturn the users contained in that Flux\nFlux.toIterable \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u305d\u306e Flux \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4fdd\u6709\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e00\u89a7\u3092 Iterable \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\nFlux.toIterable\nIterable<User> fluxToValues(final Flux<User> flux) {\n    return flux.toIterable();\n}\n\n\n\nPart8 Conversion\n\nLearn how to convert from/to Java 8+ CompletableFuture, RxJava Observable/Single and Reactor Stream.\nMono and Flux already implements Reactive Streams interfaces so they are natively\nReactive Streams compliant + there are Mono.from(Publisher) and Flux.from(Publisher) factory methods.\n\nReactor Core \u3068 RxJava \u3001\u3042\u308b\u3044\u306f CompletableFuture \u3068\u306e\u5909\u63db\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\nConvert Flux to RxJava Observable thanks to a Reactor converter\nReactor Core \u3067\u306f Flux & Mono \u3068 RxJava \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u76f8\u4e92\u5909\u63db\u3059\u308b RxJava1Adapter \u3068\u3044\u3046\u3082\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nRxJava1Adapter#publisherToObservable\nObservable<User> fromFluxToObservable(final Flux<User> flux) {\n    return RxJava1Adapter.publisherToObservable(flux);\n}\n\n\n\u4e00\u5fdc\u3001Observable#from \u3068 Flux.toIterable \u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3063\u3066\u3082\u540c\u3058\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u3002\n\nObservable#from\nObservable<User> fromFluxToObservable(final Flux<User> flux) {\n    return Observable.from(flux.toIterable());\n}\n\n\n\nConvert RxJava Observable to Flux thanks to a Reactor converter\nRxJava1Adapter#observableToFlux \u3092\u4f7f\u3048\u3070\u4e00\u767a\u3067\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\nRxJava1Adapter#observableToFlux\nFlux<User> fromObservableToFlux(final Observable<User> observable) {\n    return RxJava1Adapter.observableToFlux(observable);\n}\n\n\n\nConvert Mono to RxJava Single thanks to a Reactor converter\nRxJava1Adapter#publisherToSingle \u3092\u4f7f\u3044\u307e\u3059\u3002\n\nRxJava1Adapter#publisherToSingle\nSingle<User> fromMonoToSingle(final Mono<User> mono) {\n    return RxJava1Adapter.publisherToSingle(mono);\n}\n\n\n\nConvert RxJava Single to Mono thanks to a Reactor converter\nRxJava1Adapter#singleToMono \u3092\u4f7f\u3044\u307e\u3059\u3002\n\nRxJava1Adapter#singleToMono\nMono<User> fromSingleToMono(final Single<User> single) {\n    return RxJava1Adapter.singleToMono(single);\n}\n\n\n\nConvert Mono to Java 8+ CompletableFuture thanks to a Reactor converter\nMono.toFuture \u3092\u4f7f\u3048\u3070\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\nMono.toFuture\nCompletableFuture<User> fromMonoToCompletableFuture(final Mono<User> mono) {\n    return mono.toFuture();\n}\n\n\n\nConvert Java 8+ CompletableFuture to Mono thanks to a Reactor converter\nMono#fromFuture \u3067\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\nMono#fromFuture\nMono<User> fromCompletableFutureToMono(final CompletableFuture<User> future) {\n    return Mono.fromFuture(future);\n}\n\n\n\nPart9 BlockingToReactive\n\nLearn how to call blocking code from Reactive one with adapted concurrency strategy for blocking code that produces or receives data.\nFor those who know RxJava:\n - RxJava subscribeOn = Reactor subscribeOn\n - RxJava observeOn = Reactor publishOn\n\n\u3053\u306e\u7ae0\u306f\u4e00\u969b\u96e3\u3057\u3044\u3067\u3059\u3002\n\nCreate a Flux for reading all users from the blocking repository, and run it with an elastic scheduler\nBlockingRepository \u306f\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u56de\u6570\u3092\u8a18\u9332\u3057\u3066\u3044\u3066\u30011\u56de\u3067\u3082\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u547c\u3073\u51fa\u3057\u5143\u306e assertEquals(0, repository.getCallCount());\u304c\u901a\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b Flux#defer \u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u554f\u984c\u306f API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u3082\u3057\u304f\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u3092\u8aad\u3080\u529b\u304c\u8a66\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nFlux#defer\nFlux<User> blockingRepositoryToFlux(final BlockingRepository<User> repository) {\n    return Flux.defer(() -> Flux.fromIterable(repository.findAll()))\n               .subscribeOn(Schedulers.elastic());\n}\n\n\n\nInsert users contained in the Flux parameter in the blocking repository using a parallel scheduler\n\u6ce8\u610f\u3059\u3079\u304d\u306f subscribeOn \u3067\u306f\u306a\u304f publishOn \u3092\u4f7f\u3063\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\u524d\u8005\u3060\u3068\u51e6\u7406\u304c\u59cb\u307e\u308a\u307e\u305b\u3093\u3002\n\nFlux.publishOn\nMono<Void> fluxToBlockingRepository(final Flux<User> flux, final BlockingRepository<User> repository) {\n    return flux.publishOn(Schedulers.parallel())\n               .doOnNext(user -> repository.save(user))\n               .then();\n}\n\n\n\nReturn a valid Mono of user for null input and non null input user (hint: Reactive Streams does not accept null values)\n\u524d2\u3064\u3068\u96e3\u3057\u3055\u306b\u5dee\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306f Mono#justOrEmpty \u3092\u4f7f\u3046\u3060\u3051\u3067\u3057\u305f\u3002\n\nMono#justOrEmpty\nMono<User> nullAwareUserToMono(final User user) {\n    return Mono.justOrEmpty(user);\n}\n\n\n\n\u7d42\u4e86\n\u4e0a\u8a18\u3067\u3059\u3079\u3066\u306e\u554f\u984c\u3092\u7d42\u3048\u307e\u3057\u305f\u3002\u6700\u5f8c\u306b $ gradle test \u3092\u5b9f\u884c\u3059\u308b\u3068\u81ea\u5df1\u6e80\u8db3\u306b\u6d78\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n$ gradle test\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n\nBUILD SUCCESSFUL\n\nTotal time: 15.729 secs\n\n\n\n\u304a\u307e\u3051\uff1aLogger\n\u4eca\u56de\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306f\u76f4\u63a5\u4f7f\u7528\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001Reactor Core \u306b\u306f\u72ec\u81ea\u306e Logger \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u30022\u7cfb\u30683\u7cfb\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53d6\u5f97\u65b9\u6cd5\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306f3\u7cfb\u3067\u306e\u4f8b\u3067\u3059\u3002\nLogger logger = Loggers.getLogger(getClass());\n\n\n\u53c2\u8003\n\nReactor Core-2.5.0.M4(GitHub Repository)\n\u6a21\u7bc4\u89e3\u7b54\n\u4eca\u56de\u306e\u79c1\u306e\u89e3\u7b54\u5168\u4f53\n\n# \u6982\u8981\nReactive Extensions \u5b9f\u88c5\u306e1\u3064\u3067\u3042\u308b [Reactor Core](https://github.com/reactor/reactor-core/) \u306b\u306f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30de\u30c6\u30ea\u30a2\u30eb [\"Lite Rx API Hands-on\"](https://github.com/reactor/lite-rx-api-hands-on) \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3068\u77e5\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u65e9\u901f\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \"Lite Rx API Hands-on\" \u3068\u306f\n\"[Eclipse Collections Kata](https://github.com/eclipse/eclipse-collections-kata)\" \u306e\u3088\u3046\u306b\u3001JUnit \u306e\u7a74\u958b\u304d\u30b3\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u308c\u3092\u30c6\u30b9\u30c8\u304c\u901a\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5b66\u7fd2\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002JUnit \u3092\u52d5\u304b\u305b\u308b\u74b0\u5883\u3067\u3042\u308c\u3070\u3069\u3053\u3067\u3082\u5b9f\u65bd\u3067\u304d\u307e\u3059\u3002\u984c\u6750\u306f Reactor Core \u3067\u3059\u304c\u3001\u30a4\u30f3\u30bf\u30d5\u30a7\u30a4\u30b9\u306e\u3088\u304f\u4f3c\u3066\u3044\u308b RxJava \u306e\u7df4\u7fd2\u306b\u3082\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u306a\u304a\u3001Reactor Core \u306f Java SE 8\u3067\u8ffd\u52a0\u3055\u308c\u305f\u30af\u30e9\u30b9(\u4e3b\u306b\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30a4\u30b9)\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u305f\u3081\u3001 Java SE 8\u4ee5\u4e0a\u3067\u306a\u3044\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\n## [Reactor Core](https://github.com/reactor/reactor-core/)\u3068\u306f\nReactive Extensions \u5b9f\u88c5\u306e1\u3064\u3067\u3059\u3002RxJava \u306b\u4f3c\u305f\u30a4\u30f3\u30bf\u30d5\u30a7\u30a4\u30b9\u306a\u304c\u3089\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u547d\u540d\u3084\u8a2d\u8a08\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f \u300c[Reactor Core 2.5: \u3082\u3046\u4e00\u3064\u306eJava\u5411\u3051Reactive Extensions\u5b9f\u88c5](http://qiita.com/sugibuchi/items/e933ae4b5ec512054de2)\u300d \u306b\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u3069\u3046\u3067\u3082\u3044\u3044\u3053\u3068\u3092\u66f8\u304f\u3068\u3001[\"Reactor Core\" \u3067\u753b\u50cf\u691c\u7d22](http://image.search.yahoo.co.jp/search?p=Reactor+Core&ei=UTF-8&fr=mozff)\u3092\u3059\u308b\u3068\u3001\u5fc3\u3092\u63fa\u3055\u3076\u3089\u308c\u308b\u58ee\u5927\u306a\u69cb\u9020\u7269\u306e\u753b\u50cf\u304c\u4e0a\u4f4d\u306b\u51fa\u307e\u3059\u3002\n\n## Reactive Extensions \u3068\u306f\nReactive Streams \u3092\u547d\u4ee4\u578b\u8a00\u8a9e\u306e\u30d1\u30e9\u30c0\u30a4\u30e0\u3067\u5229\u7528\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u305d\u3046\u3067\u3059\u3002\u3042\u3048\u3066\u66f8\u304f\u307b\u3069\u306e\u3053\u3068\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 Reactive Extensions \u306e\u7565\u304c Rx \u3067\u3059\u3002\n\nReactive Extensions \u3084 Reactive Streams \u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306f \u300c[Reactive Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 - \u305d\u3057\u3066Spring 5\u3078](http://www.slideshare.net/makingx/reactive-web-spring-5-jjugccc-cccef3)\u300d\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u307e\u3060\u304a\u8aad\u307f\u3067\u306a\u3051\u308c\u3070\u3001\u3054\u4e00\u8aad\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n----\n# \u6ce8\u610f\n\n## \u30e1\u30bd\u30c3\u30c9\u540d\u306e\u8868\u8a18\nClass#method \u306f static \u30e1\u30bd\u30c3\u30c9\u3092\u3001Class.method \u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u3001\u305d\u308c\u305e\u308c\u793a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001```Flux#just``` \u306f Flux \u30af\u30e9\u30b9\u306e static \u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308b just \u3092\u6307\u3057\u307e\u3059\u3002\n\n## \u5b9f\u884c\u74b0\u5883\n\u524d\u8ff0\u306e\u901a\u308a\u3001\u3053\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u3092\u5b9f\u65bd\u3059\u308b\u969b\u306f Java SE 8 \u306e\u30b3\u30fc\u30c9\u304c\u52d5\u4f5c\u3059\u308b\u74b0\u5883\u3092\u7528\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n| OS | Windows10\n|:---|:---\n| Java SE | 1.8.0_91\n| Gradle  | 2.12\n\n----\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u53d6\u5f97\n\"Lite Rx API Hands-on\" \u306f GitHub \u4e0a\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305a [GitHub \u306e\u30ea\u30dd\u30b8\u30c8\u30ea](https://github.com/reactor/lite-rx-api-hands-on) \u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002[zip](https://github.com/reactor/lite-rx-api-hands-on/archive/master.zip)\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3082\u3088\u3044\u3067\u3059\u3057\u3001\u4eca\u5f8c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ca2\u732e\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306a\u3089\u30d5\u30a9\u30fc\u30af\u3057\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n# Gradle \u5bfe\u5fdc\nGradle \u3067\u306e\u30d3\u30eb\u30c9\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u307e\u305a\u305d\u3053\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u5e78\u3044\u3001\u8907\u96d1\u306a\u8a2d\u5b9a\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u7f6e\u63db\u3059\u308b\u7a0b\u5ea6\u3067\u4f5c\u308c\u307e\u3057\u305f\u3002\u4e0b\u8a18\u306b\u793a\u3057\u307e\u3059\u3002\n\n```groovy:build.gradle\napply plugin: 'java'\n\ndef jdkVersion      = '1.8'\nsourceCompatibility = jdkVersion\ntargetCompatibility = jdkVersion\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'io.projectreactor:reactor-core:3.0.0.RC1'\n    compile 'ch.qos.logback:logback-classic:1.1.3'\n    testCompile 'junit:junit:4.12'\n    testCompile 'io.reactivex:rxjava:1.1.5'\n}\n```\n\n## \u78ba\u8a8d\ntest \u3092 gradle \u304b\u3089\u5b9f\u884c\u3059\u308b\u3068\u3001\u3059\u3079\u3066\u5931\u6557\u3057\u307e\u3059\u3002\n\n```:\u30c6\u30b9\u30c8\u5b9f\u884c\n$ gradle test\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n\nio.pivotal.literx.Part01CreateFlux > fromValues FAILED\n    java.lang.NullPointerException at Part01CreateFlux.java:38\n\n......\u4e2d\u7565......\n\nio.pivotal.literx.Part09BlockingToReactive > fastPublisherSlowSubscriber FAILED\n    java.lang.NullPointerException at Part09BlockingToReactive.java:62\n\n33 tests completed, 33 failed\n:test FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':test'.\n> There were failing tests. See the report at: lite-rx-api-hands-on/build/reports/tests/index.html\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 7.434 secs\n```\n\n\u30c6\u30b9\u30c8\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u5f53\u7136\u3067\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30ec\u30dd\u30fc\u30c8\u306e HTML \u30d5\u30a1\u30a4\u30eb\u304c build/reports/tests/index.html \u306b\u751f\u6210\u3055\u308c\u3066\u3044\u308c\u3070\u3001gradle \u306e\u8a2d\u5b9a\u304c\u3061\u3083\u3093\u3068\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u306e\u78ba\u8a8d\u3068\u306a\u308a\u307e\u3059\u3002\n\n<img width=\"503\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 (108).png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/102004/6d1430c1-4979-c87a-c884-40498473285d.png\">\n\n\n\u3067\u306f\u3001\u9806\u306b\u89e3\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u3001\u89e3\u7b54\u3092\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u672a\u6311\u6226\u306e\u65b9\u306f\u3054\u89a7\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u6a21\u7bc4\u89e3\u7b54\u306f[\u3053\u3061\u3089\u306e\u30ea\u30dd\u30b8\u30c8\u30ea](https://github.com/reactor/lite-rx-api-hands-on/tree/complete)\u304b\u3089\u53c2\u7167\u53ef\u80fd\u3067\u3059\u3002\u3069\u3046\u3057\u3066\u3082\u308f\u304b\u3089\u306a\u3044\u554f\u984c\u304c\u3042\u308b\u306a\u3089\u8997\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n----\n\n# Part1 CreateFlux\n> Learn how to create Flux instances.\n\n1. <a href=\"http://projectreactor.io/core/docs/api/reactor/core/publisher/Flux.html\">Flux Javadoc</a>\n2. <a href=\"http://projectreactor.io/core/docs/api/reactor/core/test/TestSubscriber.html\">TestSubscriber Javadoc</a>\n\n\u307e\u305a Flux \u306e\u751f\u6210\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 Flux \u306f RxJava \u306e Observable \u306b\u5f53\u305f\u308b\u3001\u8907\u6570\u306e\u8981\u7d20\u3092\u6301\u3064 Publisher \u3067\u3059\u3002\n\n## Return an empty Flux\n\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u7279\u306b\u8a00\u3046\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```java:Flux#just\nFlux<String> emptyFlux() {\n    return Flux.just();\n}\n```\n\n## Return a Flux that contains 2 values \"foo\" and \"bar\" without using an array or a collection\n\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u7279\u306b\u8a00\u3046\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002Flux#just \u306f\u53ef\u5909\u9577\u5f15\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java:Flux#just\nFlux<String> fooBarFluxFromValues() {\n    return Flux.just(\"foo\", \"bar\");\n}\n```\n\n### \u304a\u307e\u30511\n\u3042\u307e\u308a\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u4e0b\u8a182\u3064\u3067\u3082\u30c6\u30b9\u30c8\u306f\u30d1\u30b9\u3057\u307e\u3059\u3002\n\n```java:Flux#fromArray\nreturn Flux.fromArray(new String[]{\"foo\", \"bar\"});\n```\n\n```java:Flux#fromIterable\nreturn Flux.fromIterable(Arrays.asList(\"foo\", \"bar\"));\n```\n\n### \u304a\u307e\u30512\nReactor Core \u3067\u306f\u8981\u7d201\u3064\u306e Flux (\u4e71\u66b4\u306a\u8868\u73fe)\u3068\u3057\u3066 Mono \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u30922\u3064 concatWith \u3067\u3064\u306a\u3052\u308b\u3084\u308a\u65b9\u3067\u3082\u30c6\u30b9\u30c8\u306f\u901a\u308a\u307e\u3059\u3002\n\n```java:Mono#concatWith\nreturn Mono.just(\"foo\").concatWith(Mono.just(\"bar\"));\n```\n\n## Create a Flux from a List that contains 2 values \"foo\" and \"bar\"\n\u5148\u307b\u3069\u306e Flux#fromIterable \u3067\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n```java:Flux#fromIterable\nFlux<String> fooBarFluxFromList() {\n    return Flux.fromIterable(Arrays.asList(\"foo\", \"bar\"));\n}\n```\n\n## Create a Flux that emits an IllegalStateException\nFlux#error \u3068\u3044\u3046\u306e\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```java:Flux#error\nFlux<String> errorFlux() {\n    return Flux.error(new IllegalStateException());\n}\n```\n\n## Create a Flux that never terminates\nFlux#never \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```java:Flux#never\nFlux<String> neverTerminatedFlux() {\n    return Flux.never();\n}\n```\n\n## Create a Flux that emits an increasing value each 100ms\n100ms \u5f85\u6a5f\u3059\u308b Flux \u3092 Flux#intervalMillis \u3067\u751f\u6210\u3057\u307e\u3059\u3002\n\n```java:Flux#intervalMillis\nFlux<Long> counter() {\n    return Flux.intervalMillis(100L);\n}\n```\n\n# Part2 CreateMono\n> Learn how to create Mono instances.\n\n1. <a href=\"http://projectreactor.io/core/docs/api/reactor/core/publisher/Mono.html\">Mono Javadoc</a>\n2. <a href=\"http://projectreactor.io/core/docs/api/reactor/core/test/TestSubscriber.html\">TestSubscriber Javadoc</a>\n\n\u6b21\u306f\u5358\u4e00\u306e\u8981\u7d20\u3092\u6301\u3064 Mono \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002 Mono \u306f RxJava \u306e Single \u306b\u5f53\u305f\u308b\u3082\u306e\u3067\u3059\u3002 Flux \u3068\u306e\u9023\u643a\u304c\u30b9\u30e0\u30fc\u30ba\u306b\u5b9f\u884c\u3067\u304d\u308b\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n## Return an empty Mono\n\u305d\u306e\u307e\u307e\u3059\u304e\u3066\u4f55\u3082\u66f8\u304f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```java:Mono#empty\nMono<String> emptyMono() {\n    return Mono.empty();\n}\n```\n\n## Return a Mono that contains a \"foo\" value\n\u547c\u3073\u51fa\u3057\u5143\u30c6\u30b9\u30c8\u306f fromValue \u30e1\u30bd\u30c3\u30c9\u3067\u3059\u304c\u3001just \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```Mono#just\nMono<String> fooMono() {\n    return Mono.just(\"foo\");\n}\n```\n\n## Create a Mono that emits an IllegalStateException\nFlux \u306e\u6642\u3068\u5927\u5dee\u3042\u308a\u307e\u305b\u3093\u3002\n\n```java:Mono#error\nMono<String> errorMono() {\n    return Mono.error(new IllegalStateException());\n}\n```\n\n# Part3 Transform\n> Learn how to transform values.\n\n\u8981\u7d20\u306e\u5024\u3092\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002ReactiveUserRepository \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 repository \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\u3055\u3063\u304d\u307e\u3067\u306b\u6bd4\u3079\u308b\u3068\u5927\u5206\u96e3\u3057\u304f\u306a\u308a\u307e\u3059\u3002\n\n## Capitalize the user username, firstname and lastname\n\u5404\u8981\u7d20\u306e\u5909\u66f4\u3092\u3059\u308b\u306b\u306f map \u3092\u4f7f\u3044\u307e\u3059\u3002\u7b2c0\u8981\u7d20\u306e User \u3092\u6301\u3064 Mono \u304c\u5f15\u6570\u3067\u6e21\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u306e\u5404\u8981\u7d20\u3092 UpperCase \u306b\u5909\u66f4\u3057\u3001\u65b0\u3057\u3044User \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8a70\u3081\u307e\u3059\u3002\n\n```java:Mono.map\nMono<User> capitalizeOne(final Mono<User> mono) {\n    return mono.map(person -> new User(\n                person.getUsername().toUpperCase(),\n                person.getFirstname().toUpperCase(),\n                person.getLastname().toUpperCase())\n            );\n}\n```\n\n## Capitalize the users username, firstName and lastName\n\u5148\u307b\u3069\u306e Mono \u3068\u540c\u3058\u51e6\u7406\u3092 Flux \u3067\u3084\u308a\u307e\u3059\u3002\n\n```java:Flux.map\nFlux<User> capitalizeMany(final Flux<User> flux) {\n    return flux.map(user -> new User(\n                user.getUsername().toUpperCase(),\n                user.getFirstname().toUpperCase(),\n                user.getLastname().toUpperCase()\n            )\n    );\n}\n```\n\n## Capitalize the users username, firstName and lastName using asyncCapitalizeUser()\n\u3059\u3067\u306b User \u3092\u6e21\u3059\u3068 Capitalize \u3055\u308c\u305f User \u3092\u6301\u3064 Mono \u3092\u8fd4\u3059 asyncCapitalizeUser \u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3042\u3068\u306f\u305d\u308c\u3092 flatMap \u4e2d\u3067\u547c\u3076\u3060\u3051\u3067\u3059\u3002\n\n```java:Flux.flatMap\nFlux<User> asyncCapitalizeMany(final Flux<User> flux) {\n    return flux.flatMap(user -> asyncCapitalizeUser(user));\n}\n```\n\n# Part4 Merge\n> Learn how to merge flux.\n\n\u8907\u6570\u306e Flux \u3092\u5408\u6210\u3059\u308b\u51e6\u7406\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\n## Merge flux1 and flux2 values with interleave\nFlux.mergeWith \u3092\u4f7f\u3063\u3066\u30012\u3064\u306e Flux \u3092 merge \u3059\u308b\u3060\u3051\u306e\u7c21\u5358\u306a\u304a\u4ed5\u4e8b\u3067\u3059\u3002\n\n```java:Flux#merge\nFlux<User> mergeFluxWithInterleave(final Flux<User> flux1, final Flux<User> flux2) {\n    return Flux.merge(flux1, flux2);\n}\n```\n\n```java:Flux.mergeWith\nFlux<User> mergeFluxWithInterleave(final Flux<User> flux1, final Flux<User> flux2) {\n    return flux1.mergeWith(flux2);\n}\n```\n\n## Merge flux1 and flux2 values with no interleave (flux1 values, and then flux2 values)\nFlux \u540c\u58eb\u306e\u7d50\u5408\u306b\u306f merge \u306e\u307b\u304b\u306b [concat](https://github.com/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/Flux.java#L407) \u3082\u3042\u308a\u307e\u3059\u3002\n\n```java:Flux#concat\nFlux<User> mergeFluxWithNoInterleave(final Flux<User> flux1, final Flux<User> flux2) {\n    return Flux.concat(flux1, flux2);\n}\n```\n\n\u9055\u3044\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\u300c[\u975e\u540c\u671f\u3084\u4e26\u5217\u51e6\u7406\u306b\u3082\u5f79\u7acb\u3064RxJava\u306e\u4f7f\u3044\u65b9](http://qiita.com/disc99/items/1b2e44a1105008ec3ac9)\u300d\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u8a73\u7d30\u306f\u305d\u3061\u3089\u306e\u8a18\u4e8b\u3067\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n\n| method name | desription\n|:---|:---\n| [merge](https://github.com/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/Flux.java#L917)  | \u7d50\u5408\u5f8c\u5168\u4f53\u3067\u9806\u5e8f\u3092\u4e26\u3079\u66ff\u3048\u308b\n| [concat](https://github.com/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/Flux.java#L407) | \u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u9806\u306b\u7d50\u5408\n\n## Create a Flux containing the values of the 2 Mono\nmono1\u306eand\u3067mono2\u3092\u3064\u306a\u3052\u308b\u65b9\u6cd5\u3001Flux \u306e concat\u30e1\u30bd\u30c3\u30c9\u3067\u3064\u306a\u3052\u308b\u65b9\u6cd5\u30012\u3064\u3084\u308a\u65b9\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n```java:Mono.concatWith\nFlux<User> createFluxFromMultipleMono(final Mono<User> mono1, final Mono<User> mono2) {\n    return mono1.concatWith(mono2);\n}\n```\n\n```java:Flux#concat\nFlux<User> createFluxFromMultipleMono(final Mono<User> mono1, final Mono<User> mono2) {\n    return Flux.concat(mono1, mono2);\n}\n```\n\n# Part5 Request\n> Learn how to control the demand.\n\nReactor Core \u306e\u30c6\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b\u5f79\u7acb\u3064 TestSubscriber \u306e\u4f7f\u3044\u65b9\u3092\u5c11\u3057\u5b66\u3073\u307e\u3059\u3002\n\n## Create a TestSubscriber that requests initially no value\n\n```java\nTestSubscriber<User> createSubscriber(final Flux<User> flux) {\n    return TestSubscriber.subscribe(flux, 0);\n}\n```\n\n## Request one value\n\n```java\nvoid requestOne(final TestSubscriber<User> testSubscriber) {\n    testSubscriber.request(1L);\n}\n```\n\n## Return a Flux with all users stored in the repository that prints automatically logs for all Reactive Streams signals\n[Flux.log](https://github.com/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/Flux.java#L3020)\u3092\u547c\u3073\u307e\u3059\u3002\n\n```java\nFlux<User> fluxWithLog() {\n    final Logger logger = Loggers.getLogger(getClass());\n    return repository.findAll().log();\n}\n```\n\n\n\n## Return a Flux with all users stored in the repository that prints \"Starring:\" on subscribe, \"firstname lastname\" for all values and \"The end!\" on complete\n\ndoOnSubscribe \u3067 subscribe \u76f4\u5f8c\u306b1\u56de\u3060\u3051\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3001 doOnNext \u3067\u5168\u8981\u7d20\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3001doOnComplete \u3067\u7d42\u4e86\u6642\u306b1\u56de\u3060\u3051\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```java\nreturn repository.findAll()\n            .doOnSubscribe(sub -> System.out.println(\"Starring:\"))\n            .doOnNext(user -> System.out.println(\n                   String.format(\"%s %s\", user.getFirstname(), user.getLastname())))\n            .doOnComplete(() -> System.out.println(\"The end!\"));\n```\n\n```:\u5b9f\u884c\u7d50\u679c\nStarring:\nSkyler White\nJesse Pinkman\nWalter White\nSaul Goodman\nThe end!\n```\n\n# Part6 OtherOperations\n> Learn how to use various other operators.\n\n\u3055\u307e\u3056\u307e\u306a operator \u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\n## Create a Flux of user from Flux of username, firstname and lastname.\nzip \u3067 Tuple3 \u306b\u307e\u3068\u3081\u3001\u305d\u308c\u3092\u3055\u3089\u306b map \u3067 User \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n```java:Flux#zip&Flux.map\nFlux<User> userFluxFromStringFlux(\n    final Flux<String> usernameFlux,\n    final Flux<String> firstnameFlux,\n    final Flux<String> lastnameFlux\n    ) {\n    return Flux.zip(usernameFlux, firstnameFlux, lastnameFlux)\n               .map(tuple3 -> new User(tuple3.t1, tuple3.t2, tuple3.t3));\n}\n```\n\n## return the mono which returns faster its value\n\u8907\u6570\u306e Mono \u3092\u53d7\u3051\u53d6\u308a\u3001\u6700\u3082\u65e9\u3044 Mono \u3092\u8fd4\u3059 Mono#first \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```java:Mono#first\nMono<User> useFastestMono(final Mono<User> mono1, final Mono<User> mono2) {\n    return Mono.first(mono1, mono2);\n}\n```\n\n## return the flux which returns faster the first value\nFlux \u306b\u3082 Flux#firstEmitting \u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\n```java:Flux#firstEmitting\nFlux<User> useFastestFlux(final Flux<User> flux1, final Flux<User> flux2) {\n    return Flux.firstEmitting(flux1, flux2);\n}\n```\n\n## Convert the input Flux<User> to a Mono<Void> that represents the complete signal of the flux\nMono&lt;Void> \u3092\u8fd4\u3059 Flux.then \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```java:Flux.then\nMono<Void> endOfFlux(final Flux<User> flux) {\n    return flux.then();\n}\n```\n\n## Return a Mono&lt;User> containing Saul when an error occurs in the input Mono, else do not change the input Mono.\n\u30a8\u30e9\u30fc\u767a\u751f\u6642\u306f User.SAUL \u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u6642\u306f\u6e21\u3057\u305f Mono \u3092\u3001\u305d\u308c\u305e\u308c\u8fd4\u3057\u307e\u3059\u3002 Mono.otherwise \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```java:Mono.otherwise\nMono<User> betterCallSaulForBogusMono(final Mono<User> mono) {\n    return mono.otherwise(e -> Mono.just(User.SAUL));\n}\n```\n\n## Return a Flux<User> containing Saul when an error occurs in the input Flux, else do not change the input Flux.\n\u305d\u306e\u3082\u306e\u305a\u3070\u308a\u306a Flux.onErrorReturn \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\n```java:Flux.onErrorReturn\nFlux<User> betterCallSaulForBogusFlux(final Flux<User> flux) {\n    return flux.onErrorReturn(User.SAUL);\n}\n```\n\n\u9577\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u4f11\u61a9\u3092\u5165\u308c\u308b\u306e\u3067\u3042\u308c\u3070\u3053\u306e\u8fba\u304c\u3061\u3087\u3046\u3069\u3088\u3044\u3067\u3059\u3002\n\n# Part7 ReactiveToBlocking\n> Learn how to turn Reactive API to blocking one.\n\nMono \u3084 Flux \u3092\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306a\u96c6\u5408\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\n\n## Return the user contained in that Mono\nMono.block \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u305d\u306e Mono \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4fdd\u6709\u3059\u308b\u5358\u4e00\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```java:Mono.block\nUser monoToValue(final Mono<User> mono) {\n    return mono.block();\n}\n```\n\n\n## Return the users contained in that Flux\nFlux.toIterable \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u305d\u306e Flux \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4fdd\u6709\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e00\u89a7\u3092 Iterable \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```java:Flux.toIterable\nIterable<User> fluxToValues(final Flux<User> flux) {\n    return flux.toIterable();\n}\n```\n\n# Part8 Conversion\n> Learn how to convert from/to Java 8+ CompletableFuture, RxJava Observable/Single and Reactor Stream.\n> \n> Mono and Flux already implements Reactive Streams interfaces so they are natively\n> Reactive Streams compliant + there are Mono.from(Publisher) and Flux.from(Publisher) factory methods.\n\nReactor Core \u3068 RxJava \u3001\u3042\u308b\u3044\u306f [CompletableFuture](https://docs.oracle.com/javase/jp/8/docs/api/java/util/concurrent/CompletableFuture.html) \u3068\u306e\u5909\u63db\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\n## Convert Flux to RxJava Observable thanks to a Reactor converter\nReactor Core \u3067\u306f Flux & Mono \u3068 RxJava \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u76f8\u4e92\u5909\u63db\u3059\u308b RxJava1Adapter \u3068\u3044\u3046\u3082\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java:RxJava1Adapter#publisherToObservable\nObservable<User> fromFluxToObservable(final Flux<User> flux) {\n    return RxJava1Adapter.publisherToObservable(flux);\n}\n```\n\n\u4e00\u5fdc\u3001Observable#from \u3068 Flux.toIterable \u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3063\u3066\u3082\u540c\u3058\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u3002\n\n```java:Observable#from\nObservable<User> fromFluxToObservable(final Flux<User> flux) {\n    return Observable.from(flux.toIterable());\n}\n```\n\n## Convert RxJava Observable to Flux thanks to a Reactor converter\nRxJava1Adapter#observableToFlux \u3092\u4f7f\u3048\u3070\u4e00\u767a\u3067\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\n```java:RxJava1Adapter#observableToFlux\nFlux<User> fromObservableToFlux(final Observable<User> observable) {\n    return RxJava1Adapter.observableToFlux(observable);\n}\n```\n\n## Convert Mono to RxJava Single thanks to a Reactor converter\nRxJava1Adapter#publisherToSingle \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```java:RxJava1Adapter#publisherToSingle\nSingle<User> fromMonoToSingle(final Mono<User> mono) {\n    return RxJava1Adapter.publisherToSingle(mono);\n}\n```\n\n## Convert RxJava Single to Mono thanks to a Reactor converter\nRxJava1Adapter#singleToMono \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```java:RxJava1Adapter#singleToMono\nMono<User> fromSingleToMono(final Single<User> single) {\n    return RxJava1Adapter.singleToMono(single);\n}\n```\n\n## Convert Mono to Java 8+ CompletableFuture thanks to a Reactor converter\nMono.toFuture \u3092\u4f7f\u3048\u3070\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\n```java:Mono.toFuture\nCompletableFuture<User> fromMonoToCompletableFuture(final Mono<User> mono) {\n    return mono.toFuture();\n}\n```\n\n## Convert Java 8+ CompletableFuture to Mono thanks to a Reactor converter\nMono#fromFuture \u3067\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\n```java:Mono#fromFuture\nMono<User> fromCompletableFutureToMono(final CompletableFuture<User> future) {\n    return Mono.fromFuture(future);\n}\n```\n\n# Part9 BlockingToReactive\n> Learn how to call blocking code from Reactive one with adapted concurrency strategy for blocking code that produces or receives data.\n> \n> For those who know RxJava:\n>  - RxJava subscribeOn = Reactor subscribeOn\n>  - RxJava observeOn = Reactor publishOn\n\n\u3053\u306e\u7ae0\u306f\u4e00\u969b\u96e3\u3057\u3044\u3067\u3059\u3002\n\n## Create a Flux for reading all users from the blocking repository, and run it with an elastic scheduler\nBlockingRepository \u306f\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u56de\u6570\u3092\u8a18\u9332\u3057\u3066\u3044\u3066\u30011\u56de\u3067\u3082\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u547c\u3073\u51fa\u3057\u5143\u306e ```assertEquals(0, repository.getCallCount());```\u304c\u901a\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b Flux#defer \u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u554f\u984c\u306f API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u3082\u3057\u304f\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u3092\u8aad\u3080\u529b\u304c\u8a66\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java:Flux#defer\nFlux<User> blockingRepositoryToFlux(final BlockingRepository<User> repository) {\n    return Flux.defer(() -> Flux.fromIterable(repository.findAll()))\n               .subscribeOn(Schedulers.elastic());\n}\n```\n\n## Insert users contained in the Flux parameter in the blocking repository using a parallel scheduler\n\u6ce8\u610f\u3059\u3079\u304d\u306f subscribeOn \u3067\u306f\u306a\u304f publishOn \u3092\u4f7f\u3063\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\u524d\u8005\u3060\u3068\u51e6\u7406\u304c\u59cb\u307e\u308a\u307e\u305b\u3093\u3002\n\n```java:Flux.publishOn\nMono<Void> fluxToBlockingRepository(final Flux<User> flux, final BlockingRepository<User> repository) {\n    return flux.publishOn(Schedulers.parallel())\n               .doOnNext(user -> repository.save(user))\n               .then();\n}\n```\n\n## Return a valid Mono of user for null input and non null input user (hint: Reactive Streams does not accept null values)\n\u524d2\u3064\u3068\u96e3\u3057\u3055\u306b\u5dee\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306f Mono#justOrEmpty \u3092\u4f7f\u3046\u3060\u3051\u3067\u3057\u305f\u3002\n\n```java:Mono#justOrEmpty\nMono<User> nullAwareUserToMono(final User user) {\n    return Mono.justOrEmpty(user);\n}\n```\n\n# \u7d42\u4e86\n\u4e0a\u8a18\u3067\u3059\u3079\u3066\u306e\u554f\u984c\u3092\u7d42\u3048\u307e\u3057\u305f\u3002\u6700\u5f8c\u306b ```$ gradle test``` \u3092\u5b9f\u884c\u3059\u308b\u3068\u81ea\u5df1\u6e80\u8db3\u306b\u6d78\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```:\u5b9f\u884c\u7d50\u679c\n$ gradle test\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n\nBUILD SUCCESSFUL\n\nTotal time: 15.729 secs\n```\n\n# \u304a\u307e\u3051\uff1aLogger\n\u4eca\u56de\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306f\u76f4\u63a5\u4f7f\u7528\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001Reactor Core \u306b\u306f\u72ec\u81ea\u306e Logger \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u30022\u7cfb\u30683\u7cfb\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53d6\u5f97\u65b9\u6cd5\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306f3\u7cfb\u3067\u306e\u4f8b\u3067\u3059\u3002\n\n```java\nLogger logger = Loggers.getLogger(getClass());\n```\n\n# \u53c2\u8003\n- [Reactor Core-2.5.0.M4(GitHub Repository)](https://github.com/reactor/reactor-core/tree/v2.5.0.M4)\n- [\u6a21\u7bc4\u89e3\u7b54](https://github.com/reactor/lite-rx-api-hands-on/tree/complete)\n- [\u4eca\u56de\u306e\u79c1\u306e\u89e3\u7b54\u5168\u4f53](https://github.com/toastkidjp/lite-rx-api-hands-on/tree/qiita)\n", "tags": ["Reactor", "ReactiveExtensions", "RxJava", "Java", "java8"]}