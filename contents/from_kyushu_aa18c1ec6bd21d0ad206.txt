{"tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305fTick-Tack-Toe\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f\u304a\u3088\u305d30\u5206\u524d\u5f8c\u3002\n\u30dc\u30fc\u30c9\u30922\u6b21\u5143\u914d\u5217\u306b\u3057\u305f\u304c\u3001\u5b9f\u88c5\u3057\u7d42\u3048\u3066\u304b\u3089\u6587\u5b57\u5217\u306b\u3057\u305f\u307b\u3046\u304c\u3084\u308a\u3084\u3059\u304b\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u611f\u3058\u305f\u3002\n\u30dc\u30fc\u30c9\u306e\u5e83\u3055\u3092Board\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u6642\u306b\u6307\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u305f\u3081\u4e94\u76ee\u4e26\u3079\u3060\u308d\u3046\u304c\u5341\u76ee\u4e26\u3079\u3060\u308d\u3046\u304c\u3084\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u660e\u3089\u304b\u306b\u7121\u99c4\u3067\u3042\u308b\u3002\n\u8a2d\u554f\u3067\u306f\u4e09\u76ee\u4e26\u3079\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3060\u304b\u3089\u7d20\u76f4\u306b9\u30de\u30b9\u306e\u30dc\u30fc\u30c9\u306e\u307f\u8003\u3048\u3066\u304a\u3051\u3070\u3044\u3044\u3082\u306e\u306e\u3001\u4eca\u56de\u306f\u307b\u3068\u3093\u3069\u5f71\u97ff\u304c\u306a\u3044\u3068\u306f\u8a00\u3048\u660e\u3089\u304b\u306b\u30bf\u30a4\u30e0\u30ed\u30b9\u3068\u306a\u308a\u5f97\u308b\u7b87\u6240\u3067\u3042\u308b\u3002\nclass Board\n  class Foul < StandardError; end\n\n  attr_reader :width\n  def initialize width\n    @width = width\n    @board = @width.times.map{Array.new(@width)}\n  end\n\n  def set player, x, y\n    if @board[y][x].nil?\n      @board[y][x] = player\n    else\n      raise Foul\n    end\n  end\n\n  def check player\n    all_player = -> (n) {n === player}\n    case1 = @board.select{|line| line.all? &all_player}.size > 0\n    case2 = @width.times.select{|x| @width.times.map{|y| @board[y][x]}.all? &all_player}.size > 0\n    case3 = @width.times.map{|w| @board[w][w]}.all?(&all_player) || @width.times.map{|w| @board[w][@width - w - 1]}.all?(&all_player)\n    case1 or case2 or case3\n  end\nend\n\nclass Game\n  def initialize width\n    @board = Board.new width\n  end\n\n  def start input\n    [@board.width**2, input.length].min.times do |n|\n      player = (n % 2 === 0) ? \"o\" : \"x\"\n      coordinate = point_to_coordinate input[n].to_i\n      begin\n        @board.set player, *coordinate\n      rescue Board::Foul => e\n        target = (n % 2 === 0) ? \"x\" : \"o\"\n        return \"Foul : #{target} won.\"\n      end\n\n      if @board.check player\n        return \"#{player} won.\"\n      end\n    end\n    \"Draw game.\"\n  end\n\n  def point_to_coordinate point\n    x = (point - 1) % @board.width\n    y = (point - 1) / @board.width\n    [x, y]\n  end\nend\n\nrequire 'minitest/autorun'\ndescribe 'Tick-Tack-Toe' do\n  [\n    [\"79538246\", \"x won.\"],\n    [\"35497162193\", \"x won.\"],\n    [\"61978543\", \"x won.\"],\n    [\"254961323121\", \"x won.\"],\n    [\"6134278187\", \"x won.\"],\n    [\"4319581\", \"Foul : x won.\"],\n    [\"9625663381\", \"Foul : x won.\"],\n    [\"7975662\", \"Foul : x won.\"],\n    [\"2368799597\", \"Foul : x won.\"],\n    [\"18652368566\", \"Foul : x won.\"],\n    [\"965715\", \"o won.\"],\n    [\"38745796\", \"o won.\"],\n    [\"371929\", \"o won.\"],\n    [\"758698769\", \"o won.\"],\n    [\"42683953\", \"o won.\"],\n    [\"618843927\", \"Foul : o won.\"],\n    [\"36535224\", \"Foul : o won.\"],\n    [\"882973\", \"Foul : o won.\"],\n    [\"653675681\", \"Foul : o won.\"],\n    [\"9729934662\", \"Foul : o won.\"],\n    [\"972651483927\", \"Draw game.\"],\n    [\"5439126787\", \"Draw game.\"],\n    [\"142583697\", \"Draw game.\"],\n    [\"42198637563\", \"Draw game.\"],\n    [\"657391482\", \"Draw game.\"]\n  ].each do |test|\n    input, expect = test\n    it input do\n      game = Game.new 3\n      assert_equal game.start(input), expect\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[Tick-Tack-Toe](http://nabetani.sakura.ne.jp/hena/1/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f\u304a\u3088\u305d30\u5206\u524d\u5f8c\u3002\n\n\u30dc\u30fc\u30c9\u30922\u6b21\u5143\u914d\u5217\u306b\u3057\u305f\u304c\u3001\u5b9f\u88c5\u3057\u7d42\u3048\u3066\u304b\u3089\u6587\u5b57\u5217\u306b\u3057\u305f\u307b\u3046\u304c\u3084\u308a\u3084\u3059\u304b\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u611f\u3058\u305f\u3002\n\u30dc\u30fc\u30c9\u306e\u5e83\u3055\u3092`Board`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u6642\u306b\u6307\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u305f\u3081\u4e94\u76ee\u4e26\u3079\u3060\u308d\u3046\u304c\u5341\u76ee\u4e26\u3079\u3060\u308d\u3046\u304c\u3084\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u660e\u3089\u304b\u306b\u7121\u99c4\u3067\u3042\u308b\u3002\n\u8a2d\u554f\u3067\u306f\u4e09\u76ee\u4e26\u3079\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3060\u304b\u3089\u7d20\u76f4\u306b9\u30de\u30b9\u306e\u30dc\u30fc\u30c9\u306e\u307f\u8003\u3048\u3066\u304a\u3051\u3070\u3044\u3044\u3082\u306e\u306e\u3001\u4eca\u56de\u306f\u307b\u3068\u3093\u3069\u5f71\u97ff\u304c\u306a\u3044\u3068\u306f\u8a00\u3048\u660e\u3089\u304b\u306b\u30bf\u30a4\u30e0\u30ed\u30b9\u3068\u306a\u308a\u5f97\u308b\u7b87\u6240\u3067\u3042\u308b\u3002\n\n```ruby\nclass Board\n  class Foul < StandardError; end\n\n  attr_reader :width\n  def initialize width\n    @width = width\n    @board = @width.times.map{Array.new(@width)}\n  end\n\n  def set player, x, y\n    if @board[y][x].nil?\n      @board[y][x] = player\n    else\n      raise Foul\n    end\n  end\n\n  def check player\n    all_player = -> (n) {n === player}\n    case1 = @board.select{|line| line.all? &all_player}.size > 0\n    case2 = @width.times.select{|x| @width.times.map{|y| @board[y][x]}.all? &all_player}.size > 0\n    case3 = @width.times.map{|w| @board[w][w]}.all?(&all_player) || @width.times.map{|w| @board[w][@width - w - 1]}.all?(&all_player)\n    case1 or case2 or case3\n  end\nend\n\nclass Game\n  def initialize width\n    @board = Board.new width\n  end\n\n  def start input\n    [@board.width**2, input.length].min.times do |n|\n      player = (n % 2 === 0) ? \"o\" : \"x\"\n      coordinate = point_to_coordinate input[n].to_i\n      begin\n        @board.set player, *coordinate\n      rescue Board::Foul => e\n        target = (n % 2 === 0) ? \"x\" : \"o\"\n        return \"Foul : #{target} won.\"\n      end\n\n      if @board.check player\n        return \"#{player} won.\"\n      end\n    end\n    \"Draw game.\"\n  end\n\n  def point_to_coordinate point\n    x = (point - 1) % @board.width\n    y = (point - 1) / @board.width\n    [x, y]\n  end\nend\n\nrequire 'minitest/autorun'\ndescribe 'Tick-Tack-Toe' do\n  [\n    [\"79538246\", \"x won.\"],\n    [\"35497162193\", \"x won.\"],\n    [\"61978543\", \"x won.\"],\n    [\"254961323121\", \"x won.\"],\n    [\"6134278187\", \"x won.\"],\n    [\"4319581\", \"Foul : x won.\"],\n    [\"9625663381\", \"Foul : x won.\"],\n    [\"7975662\", \"Foul : x won.\"],\n    [\"2368799597\", \"Foul : x won.\"],\n    [\"18652368566\", \"Foul : x won.\"],\n    [\"965715\", \"o won.\"],\n    [\"38745796\", \"o won.\"],\n    [\"371929\", \"o won.\"],\n    [\"758698769\", \"o won.\"],\n    [\"42683953\", \"o won.\"],\n    [\"618843927\", \"Foul : o won.\"],\n    [\"36535224\", \"Foul : o won.\"],\n    [\"882973\", \"Foul : o won.\"],\n    [\"653675681\", \"Foul : o won.\"],\n    [\"9729934662\", \"Foul : o won.\"],\n    [\"972651483927\", \"Draw game.\"],\n    [\"5439126787\", \"Draw game.\"],\n    [\"142583697\", \"Draw game.\"],\n    [\"42198637563\", \"Draw game.\"],\n    [\"657391482\", \"Draw game.\"]\n  ].each do |test|\n    input, expect = test\n    it input do\n      game = Game.new 3\n      assert_equal game.start(input), expect\n    end\n  end\nend\n```\n"}