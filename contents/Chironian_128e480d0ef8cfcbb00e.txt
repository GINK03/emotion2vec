{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\n\u521d\u5fc3\u8005C++er Advent Calendar 2016\u306e\u6628\u65e5\u306e\u8a18\u4e8b\u3067\u9762\u767d\u3044\u554f\u984c\u304c\u4e0a\u304c\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u5bfe\u7b56\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u8a18\u4e8b\u3067\u306fuint8_t\u3001uint16_t\u3001uint32_t\u3001uint64_t\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u305f\u95a2\u6570\u306bDWORD\u3092\u4e0e\u3048\u305f\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3068\u306e\u3053\u3068\u3002DWORD\u3068uint32_t\u3063\u3066\u540c\u3058\u3082\u306e\u306e\u7b48\u306a\u306e\u3067DWORD\u3067\u547c\u3073\u51fa\u305b\u306a\u3044\u3063\u3066\u5909\u3067\u3059\u306d\u3002\n\u7a2e\u660e\u304b\u3057\u3082\u8a18\u4e8b\u306b\u3042\u308a\u307e\u3057\u305f\u3002Visual C++\u3067\u306fuint32_t\u306funsinged int\u3001DWORD\u306funsigned long\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u578b\u304c\u9055\u3046\u305f\u3081\u3001\u6697\u9ed9\u306e\u578b\u5909\u63db\u3067\u66d6\u6627\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305d\u3046\u3067\u3059\u3002\n\u306a\u308b\u307b\u3069\u3002\n\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092SFINAE\u3057\u3066\u5bfe\u7b56\u3067\u304d\u307e\u3059\u3002\n\u3059\u3063\u3054\u3044\u5ba3\u8a00\u304c\u9577\u3063\u305f\u3089\u3057\u304f\u306a\u308b\u306e\u3067\u30de\u30af\u30ed\u3067\u7e2e\u3081\u307e\u3057\u305f\u3002C++11\u4ee5\u4e0a\u3067\u901a\u308a\u307e\u3059\u3002\n\u30a4\u30cd\u30fc\u30d6\u30e9\u304c\u7121\u3044\u65b9\u304c\u30b9\u30c3\u30ad\u30ea\u3059\u308b\u306e\u3067nullptr_t\u30c6\u30af\u30cb\u30c3\u30af\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n#include <iostream>\n#include <type_traits>\n#ifdef __WIN32__\n    #include <windows.h>\n#else\n    typedef unsigned long DWORD;\n#endif\n\n#define TEMPLATE(dType)                                                     \\\n    template                                                                \\\n    <                                                                       \\\n        typename tType,                                                     \\\n        typename std::enable_if                                             \\\n        <                                                                   \\\n            (sizeof(tType) == sizeof(dType)) &&                             \\\n            (std::is_signed<tType>::value == std::is_signed<dType>::value), \\\n            std::nullptr_t                                                  \\\n        >::type=nullptr                                                     \\\n    >\n\nTEMPLATE(std::uint8_t)  void f(tType) {std::cout << \"uint8_t\\n\";}\nTEMPLATE(std::uint16_t) void f(tType) {std::cout << \"uint16_t\\n\";}\nTEMPLATE(std::uint32_t) void f(tType) {std::cout << \"uint32_t\\n\";}\nTEMPLATE(std::uint64_t) void f(tType) {std::cout << \"uint64_t\\n\";}\n\nint main()\n{\n    DWORD x = 12345;\n    f(x);\n}\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n\n[\u521d\u5fc3\u8005C++er Advent Calendar 2016](http://www.adventar.org/calendars/1691#list-2016-12-23)\u306e\u6628\u65e5\u306e\u8a18\u4e8b\u3067[\u9762\u767d\u3044\u554f\u984c](http://dev.activebasic.com/egtra/2016/12/23/939/)\u304c\u4e0a\u304c\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u5bfe\u7b56\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u8a18\u4e8b\u3067\u306fuint8_t\u3001uint16_t\u3001uint32_t\u3001uint64_t\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u305f\u95a2\u6570\u306bDWORD\u3092\u4e0e\u3048\u305f\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3068\u306e\u3053\u3068\u3002DWORD\u3068uint32_t\u3063\u3066\u540c\u3058\u3082\u306e\u306e\u7b48\u306a\u306e\u3067DWORD\u3067\u547c\u3073\u51fa\u305b\u306a\u3044\u3063\u3066\u5909\u3067\u3059\u306d\u3002\n\n\u7a2e\u660e\u304b\u3057\u3082\u8a18\u4e8b\u306b\u3042\u308a\u307e\u3057\u305f\u3002Visual C++\u3067\u306fuint32_t\u306funsinged int\u3001DWORD\u306funsigned long\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u578b\u304c\u9055\u3046\u305f\u3081\u3001\u6697\u9ed9\u306e\u578b\u5909\u63db\u3067\u66d6\u6627\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305d\u3046\u3067\u3059\u3002\n\u306a\u308b\u307b\u3069\u3002\n\n\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092[SFINAE](http://d.hatena.ne.jp/prettysoft/20101104/1399911110)\u3057\u3066\u5bfe\u7b56\u3067\u304d\u307e\u3059\u3002\n\u3059\u3063\u3054\u3044\u5ba3\u8a00\u304c\u9577\u3063\u305f\u3089\u3057\u304f\u306a\u308b\u306e\u3067\u30de\u30af\u30ed\u3067\u7e2e\u3081\u307e\u3057\u305f\u3002C++11\u4ee5\u4e0a\u3067\u901a\u308a\u307e\u3059\u3002\n\u30a4\u30cd\u30fc\u30d6\u30e9\u304c\u7121\u3044\u65b9\u304c\u30b9\u30c3\u30ad\u30ea\u3059\u308b\u306e\u3067[nullptr_t\u30c6\u30af\u30cb\u30c3\u30af](http://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462)\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n\n```C++\n#include <iostream>\n#include <type_traits>\n#ifdef __WIN32__\n    #include <windows.h>\n#else\n    typedef unsigned long DWORD;\n#endif\n\n#define TEMPLATE(dType)                                                     \\\n    template                                                                \\\n    <                                                                       \\\n        typename tType,                                                     \\\n        typename std::enable_if                                             \\\n        <                                                                   \\\n            (sizeof(tType) == sizeof(dType)) &&                             \\\n            (std::is_signed<tType>::value == std::is_signed<dType>::value), \\\n            std::nullptr_t                                                  \\\n        >::type=nullptr                                                     \\\n    >\n\nTEMPLATE(std::uint8_t)  void f(tType) {std::cout << \"uint8_t\\n\";}\nTEMPLATE(std::uint16_t) void f(tType) {std::cout << \"uint16_t\\n\";}\nTEMPLATE(std::uint32_t) void f(tType) {std::cout << \"uint32_t\\n\";}\nTEMPLATE(std::uint64_t) void f(tType) {std::cout << \"uint64_t\\n\";}\n\nint main()\n{\n    DWORD x = 12345;\n    f(x);\n}\n```\n", "tags": ["C++11", "C++"]}