{"context": "\n\n\u524d\u63d0\n\nJava 8\n\u81ea\u5206\u306fJava\u521d\u5fc3\u8005\n\n\u30b3\u30e1\u30f3\u30c8\u6b04\u306b\u3066\u3053\u3046\u3044\u3046\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u304c\u3042\u308b\u3088\u3001\u306a\u3069\u306e\u3054\u5831\u544a\u304a\u5f85\u3061\u3057\u3066\u307e\u3059\u3002\n\nprivate\u306a\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u306f\u3064\u3089\u3044\n/*\n\u4f8b\u3048\u3070Hoge\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\nint foo(int i) {\n  return i+i;\n}\n\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3059\u308b\n*/\n\nHoge hoge = new Hoge();\nMethod m = Hoge.class.getDeclaredMethod(\"foo\", int.class);\nm.setAccessible(true);\nint ret = (int)m.invoke(hoge, 10); // -> ret == 20\n\n\u3067\u3082\u3053\u308c\u3060\u3051\u306a\u3089\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u304a\u4e16\u8a71\u306b\u306a\u308b\u306a\u3069\u3059\u308c\u3070\u5927\u3057\u305f\u4e8b\u304c\u306a\u3044\uff08\u6c17\u304c\u3059\u308b\uff09\u3002\n\nprivate\u306a\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304cprivate\u306ainterface\u3060\u3063\u305f\u3089\u3082\u3063\u3068\u3064\u3089\u3044\n\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u304c\u8fd1\u3044\u4e8b\u3092\u3057\u3066\u3044\u305f\u306e\u3067\u5927\u5909\u53c2\u8003\u306b\u306a\u3063\u305f\u3002\u2192\u6280\u8853\u898b\u805e\u9332 - \u5916\u90e8\u63d0\u4f9b\u306eInterface\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u304c\u3042\u308b\u4e8b\u306b\u3059\u308b\u3002\n\uff08\u4eca\u56de\u306e\u4f8b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\uff09\npublic class Hoge {\n  // \u30af\u30e9\u30b9\u5185\u304b\u3089\u306f\u3053\u306e\u3088\u3046\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\n  public int boo(int i) {\n    return foo(i, (int i) -> i+i);\n  }\n\n  private int foo(int i, InnerInterface innerInterfaceInstance) {\n    return innerInterfaceInstance.apply(i);\n  }\n\n\u3000@FunctionalInterface // \u306a\u304f\u3066\u3082\u3044\u3044\u3051\u3069\n  private interface InnerInterface {\n    int apply(int i);\n  }\n\n}\n\n\u3082\u3057\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306a\u3089\u3001getDeclaredConstructor\u304b\u3089\u306enewInstance\u3068\u304b\u3084\u3063\u3061\u3083\u3046\u3053\u3068\u304c\u4e00\u5fdc\u53ef\u80fd\u306a\u306e\u3067\u3059\u304c\u3001\u30a4\u30f3\u30ca\u30fc\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\uff08\uff1f\uff09\u3060\u3068\u96e3\u3057\u3044\u3002\n\u3053\u308c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u3002\n\u3053\u308c\u306b\u81f3\u308b\u307e\u3067\u5931\u6557\u304c\u7121\u9650\u306b\u3042\u308a\u307e\u3057\u305f\u304c\u6ce8\u610f\u70b9\u306f\u5f8c\u8ff0\u3002\n@Test\npublic void testFoo() throws Exception {\n  Hoge hoge = new Hoge();\n\n  // Interface\u5185\u90e8\u306e\u51e6\u7406\u3092\u79fb\u8b72\u3055\u308c\u308bcallback\n  class InterfaceHandler implements InvocationHandler {\n    @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        String name = method.getName();\n        return getClass().getMethod(name, method.getParameterTypes()).invoke(this, args);\n\n    public int apply(int i) {\n      // apply()\u306b\u3057\u3066\u307b\u3057\u3044\u5185\u5bb9\u3092\u66f8\u304f\n      // \u4f8b\uff1a\n      return i * i;\n    }\n  }\n\n  // \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u306e\u6307\u5b9a\u304c\u5927\u5909\u306a\u306e\u3067for\u30eb\u30fc\u30d7\u3067\u540d\u524d\u304b\u3089\u63a2\u3059\n  Method fooDummy = null;\n  for (Method m : Hoge.class.getDeclaredMethods()) {\n    if (m.getName().equals(\"foo\")) {\n      fooDummy = m;\n    }\n  }\n\n  // \u9ed2\u9b54\u8853\u7684\u8a2d\u5b9a\n  Class<?> interfaceClass = foo.getParameterTypes()[1]; // 2\u500b\u76ee\u306e\u5f15\u6570\n  ClassLoader loader = interfaceClass.getClassLoader();\n  Class<?>[] interfaces = new Class<?>[] {interfaceClass};\n  InvocationHandler handler = new InterfaceHandler();\n  Object proxyInstance = Proxy.newProxyInstance(loader, interfaces, handler);\n\n  fooDummy.setAccessible(true);\n\n  // \u5b9f\u884c\uff01\n  int ret = (int)fooDummy.invoke(hoge, 10, proxyInstance);\n\n  assertEquals(ret, 100) // -> passed\n\n}\n\njava.lang.reflect.InvocationHanlder\njava.lang.reflect.Proxy\n\u306e\uff12\u3064\u3092\u5229\u7528\u3057\u3066\u3001interface\u306e\u95a2\u6570\u3092\u3053\u3063\u3061\u3067\u6307\u5b9a\u3057\u3066\u3084\u308b\u611f\u3058\u3067\u3059\u306d\u3002\n\n\u6ce8\u610f\u70b9\n\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u578b\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067for\u30eb\u30fc\u30d7\u4f7f\u3063\u3066\u540d\u524d\u3067method\u3092\u53d6\u308a\u51fa\u3059\u3002\uff08\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\uff09\n\u3061\u306a\u307f\u306bHoge#boo()\u307f\u305f\u3044\u306b\u30e9\u30e0\u30c0\u6e21\u3059\u3068\u6012\u3089\u308c\u307e\u3059\u3002invoke\u306e\u5f15\u6570\u304cObject\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\n\u7d50\u8ad6\npackage private\u306b\u3057\u3088\u3046\u306a\n\u3069\u3046\u3084\u3089\u3001AOP\uff08\u30a2\u30b9\u30da\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff09\u306e\u5b9f\u73fe\u306e\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u308b\u3089\u3057\u3044\uff08\u4e0b\u8a18\u53c2\u7167\uff09\n\n\u305d\u306e\u4ed6\u306e\u53c2\u8003\u306b\u306a\u308b\u30b5\u30a4\u30c8\n\u52d5\u7684\u30d7\u30ed\u30ad\u30b7\u306b\u3088\u308b\u30a2\u30b9\u30da\u30af\u30c8\u3068\u3057\u3066\u306e\u5b9f\u88c5\njava.lang.reflect.Proxy\u306e\u4f7f\u3044\u65b9\uff08\uff11\uff09\n# \u524d\u63d0\n- Java 8\n- \u81ea\u5206\u306fJava\u521d\u5fc3\u8005\n\n\u30b3\u30e1\u30f3\u30c8\u6b04\u306b\u3066\u3053\u3046\u3044\u3046\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u304c\u3042\u308b\u3088\u3001\u306a\u3069\u306e\u3054\u5831\u544a\u304a\u5f85\u3061\u3057\u3066\u307e\u3059\u3002\n\n# private\u306a\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u306f\u3064\u3089\u3044\n```java\n/*\n\u4f8b\u3048\u3070Hoge\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\nint foo(int i) {\n  return i+i;\n}\n\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3059\u308b\n*/\n\nHoge hoge = new Hoge();\nMethod m = Hoge.class.getDeclaredMethod(\"foo\", int.class);\nm.setAccessible(true);\nint ret = (int)m.invoke(hoge, 10); // -> ret == 20\n```\n\u3067\u3082\u3053\u308c\u3060\u3051\u306a\u3089\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u304a\u4e16\u8a71\u306b\u306a\u308b\u306a\u3069\u3059\u308c\u3070\u5927\u3057\u305f\u4e8b\u304c\u306a\u3044\uff08\u6c17\u304c\u3059\u308b\uff09\u3002\n\n# private\u306a\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304cprivate\u306ainterface\u3060\u3063\u305f\u3089\u3082\u3063\u3068\u3064\u3089\u3044\n\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u304c\u8fd1\u3044\u4e8b\u3092\u3057\u3066\u3044\u305f\u306e\u3067\u5927\u5909\u53c2\u8003\u306b\u306a\u3063\u305f\u3002\u2192[\u6280\u8853\u898b\u805e\u9332 - \u5916\u90e8\u63d0\u4f9b\u306eInterface\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b](http://www18.atwiki.jp/bovecrach/pages/55.html)\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u304c\u3042\u308b\u4e8b\u306b\u3059\u308b\u3002\n\uff08\u4eca\u56de\u306e\u4f8b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\uff09\n\n```java\npublic class Hoge {\n  // \u30af\u30e9\u30b9\u5185\u304b\u3089\u306f\u3053\u306e\u3088\u3046\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\n  public int boo(int i) {\n    return foo(i, (int i) -> i+i);\n  }\n\n  private int foo(int i, InnerInterface innerInterfaceInstance) {\n    return innerInterfaceInstance.apply(i);\n  }\n\n\u3000@FunctionalInterface // \u306a\u304f\u3066\u3082\u3044\u3044\u3051\u3069\n  private interface InnerInterface {\n    int apply(int i);\n  }\n \n}\n```\n\u3082\u3057\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306a\u3089\u3001getDeclaredConstructor\u304b\u3089\u306enewInstance\u3068\u304b\u3084\u3063\u3061\u3083\u3046\u3053\u3068\u304c\u4e00\u5fdc\u53ef\u80fd\u306a\u306e\u3067\u3059\u304c\u3001\u30a4\u30f3\u30ca\u30fc\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\uff08\uff1f\uff09\u3060\u3068\u96e3\u3057\u3044\u3002\n\n\u3053\u308c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u3002\n\u3053\u308c\u306b\u81f3\u308b\u307e\u3067\u5931\u6557\u304c\u7121\u9650\u306b\u3042\u308a\u307e\u3057\u305f\u304c\u6ce8\u610f\u70b9\u306f\u5f8c\u8ff0\u3002\n\n```java\n@Test\npublic void testFoo() throws Exception {\n  Hoge hoge = new Hoge();\n\n  // Interface\u5185\u90e8\u306e\u51e6\u7406\u3092\u79fb\u8b72\u3055\u308c\u308bcallback\n  class InterfaceHandler implements InvocationHandler {\n    @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        String name = method.getName();\n        return getClass().getMethod(name, method.getParameterTypes()).invoke(this, args);\n    \n    public int apply(int i) {\n      // apply()\u306b\u3057\u3066\u307b\u3057\u3044\u5185\u5bb9\u3092\u66f8\u304f\n      // \u4f8b\uff1a\n      return i * i;\n    }\n  }\n\n  // \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u306e\u6307\u5b9a\u304c\u5927\u5909\u306a\u306e\u3067for\u30eb\u30fc\u30d7\u3067\u540d\u524d\u304b\u3089\u63a2\u3059\n  Method fooDummy = null;\n  for (Method m : Hoge.class.getDeclaredMethods()) {\n    if (m.getName().equals(\"foo\")) {\n      fooDummy = m;\n    }\n  }\n\n  // \u9ed2\u9b54\u8853\u7684\u8a2d\u5b9a\n  Class<?> interfaceClass = foo.getParameterTypes()[1]; // 2\u500b\u76ee\u306e\u5f15\u6570\n  ClassLoader loader = interfaceClass.getClassLoader();\n  Class<?>[] interfaces = new Class<?>[] {interfaceClass};\n  InvocationHandler handler = new InterfaceHandler();\n  Object proxyInstance = Proxy.newProxyInstance(loader, interfaces, handler);\n\n  fooDummy.setAccessible(true);\n  \n  // \u5b9f\u884c\uff01\n  int ret = (int)fooDummy.invoke(hoge, 10, proxyInstance);\n\n  assertEquals(ret, 100) // -> passed\n\n}\n```\n\njava.lang.reflect.InvocationHanlder\njava.lang.reflect.Proxy\n\u306e\uff12\u3064\u3092\u5229\u7528\u3057\u3066\u3001interface\u306e\u95a2\u6570\u3092\u3053\u3063\u3061\u3067\u6307\u5b9a\u3057\u3066\u3084\u308b\u611f\u3058\u3067\u3059\u306d\u3002\n\n# \u6ce8\u610f\u70b9\n- \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u578b\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067for\u30eb\u30fc\u30d7\u4f7f\u3063\u3066\u540d\u524d\u3067method\u3092\u53d6\u308a\u51fa\u3059\u3002\uff08\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\uff09\n- \u3061\u306a\u307f\u306bHoge#boo()\u307f\u305f\u3044\u306b\u30e9\u30e0\u30c0\u6e21\u3059\u3068\u6012\u3089\u308c\u307e\u3059\u3002invoke\u306e\u5f15\u6570\u304cObject\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3057\u3087\u3046\u304b\uff1f\n\n# \u7d50\u8ad6\npackage private\u306b\u3057\u3088\u3046\u306a\n\n\u3069\u3046\u3084\u3089\u3001AOP\uff08\u30a2\u30b9\u30da\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff09\u306e\u5b9f\u73fe\u306e\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u308b\u3089\u3057\u3044\uff08\u4e0b\u8a18\u53c2\u7167\uff09\n\n# \u305d\u306e\u4ed6\u306e\u53c2\u8003\u306b\u306a\u308b\u30b5\u30a4\u30c8\n[\u52d5\u7684\u30d7\u30ed\u30ad\u30b7\u306b\u3088\u308b\u30a2\u30b9\u30da\u30af\u30c8\u3068\u3057\u3066\u306e\u5b9f\u88c5](http://ffy.afy-system.jp/tips/t_004.html)\n[java.lang.reflect.Proxy\u306e\u4f7f\u3044\u65b9\uff08\uff11\uff09](http://qiita.com/obaQ/items/e401d41059d81149da52)\n", "tags": ["Java", "JUnit", "test", "java8"]}