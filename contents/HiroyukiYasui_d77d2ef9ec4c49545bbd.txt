{"context": "\u3000\u6700\u8fd1\u306e\u30a2\u30c8\u30ea\u30a8\u79cb\u8449\u539f\u3055\u3093\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3001\u8cea\u554f\u3084\u30b3\u30e1\u30f3\u30c8\u3092Slack\u306b\u6295\u7a3f\u3059\u308b\u3068\u73fe\u5834\u306ePepper\u304c\u767a\u8a71\u3059\u308b\u3068\u3044\u3046\u30a2\u30d7\u30ea\u304c\u3059\u3054\u304f\u826f\u304f\u3066\u3001\u81ea\u5206\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u304c\u304d\u3063\u304b\u3051\u3067\u3059\u3002\n\u3000\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u3092\u4f5c\u3089\u308c\u305f\u65b9\u306b\u304a\u805e\u304d\u3057\u305f\u3068\u3053\u308d\u3001Slack\u306eReal Time Messaging API\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u306e\u3053\u3068\u3002\u30cf\u30fc\u30c9\u30eb\u304c\u9ad8\u305d\u3046\u30fb\u30fb\uff08\u5b9f\u969b\u81ea\u5206\u306b\u306f\u30cf\u30fc\u30c9\u30eb\u304c\u9ad8\u304b\u3063\u305f\uff09\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u5148\u99c6\u8005\u306e\u65b9\u3005\u306e\u60c5\u5831\u3092\u5143\u306b\u3001\u306a\u3093\u3068\u304b\u5f62\u306b\u306a\u308a\u307e\u3057\u305f\u306e\u3067\u6295\u7a3f\u3057\u307e\u3059\u3002\n\n\u6ce8\u610f\u4e8b\u9805\n\u3000\u30bd\u30d5\u30c8\u30d0\u30f3\u30af\u30ed\u30dc\u30c6\u30a3\u30af\u30b9\u682a\u5f0f\u4f1a\u793e\u306ePepper\u3092\u6d3b\u7528\u3057\u3001\u72ec\u81ea\u958b\u767a\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u958b\u767a\u74b0\u5883\nMacOS Sierra 10.12.2\nChoregraphe 2.4.3.28\nPepper\n\n\u53c2\u8003\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nPepper \u30cf\u30c3\u30ab\u30bd\u30f3\u306b\u5f79\u306b\u7acb\u3061\u305d\u3046\u306a \u30dc\u30c3\u30af\u30b9\u3092 4\u3064\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001Slack\u306e\u7279\u5b9a\u306echannel\u306b\u6295\u7a3f\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3000Animated Say Text\u3000\u3067\u767a\u8a71\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u982d\uff08\u524d\u65b9\uff09\u3092\u30bf\u30c3\u30c1\u3067\u7d42\u4e86\u3067\u3059\u3002\n\n\nReal Time Messaging API\u306e\u63a5\u7d9a\u306b\u3064\u3044\u3066\n\u3000Slack\u306eReal Time Messaging API\u306e\u63a5\u7d9a\u5148\u306f\u56fa\u5b9a\u3067\u306f\u306a\u304f\u3001rtm.start\u30e1\u30bd\u30c3\u30c9\u3067\u52d5\u7684\u306b\u53d6\u5f97\u3057\u305fURL\u3092\u4f7f\u7528\u3057\u3066\u3001WebSocket\u3067\u63a5\u7d9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306eURL\u306e\u63a5\u7d9a\u307e\u3067\u306e\u6709\u52b9\u671f\u9650\u306f30\u79d2\u3067\u3059\u3002\n\u3000\u307e\u305f\u3001\u63a5\u7d9a\u5f8c\u3082\u3057\u3070\u3089\u304f\u3059\u308b\u3068\u81ea\u52d5\u3067\u5207\u65ad\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u3053\u307e\u3081\u306bping\u3092\u9001\u308a\u3001\u63a5\u7d9a\u3092\u7dad\u6301\u3057\u307e\u3059\u3002\n\nWebSocket\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6e96\u5099\n\u3000Pepper\u306b\u306fPython\u306eWebSocket\u95a2\u9023\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u4f7f\u7528\u3059\u308b\u30dc\u30c3\u30af\u30b9\u3067\u305d\u306e\u4fdd\u5b58\u5148\u3092\u30ed\u30fc\u30c9\u30d1\u30b9\u306b\u542b\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u306blib\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u914d\u4e0b\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u53d6\u5f97\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3044\u305f\u3057\u307e\u3057\u305f\u3002\nPepper \u30cf\u30c3\u30ab\u30bd\u30f3\u306b\u5f79\u306b\u7acb\u3061\u305d\u3046\u306a \u30dc\u30c3\u30af\u30b9\u3092 4\u3064\n\u3000\u4f7f\u7528\u3059\u308b\u30dc\u30c3\u30af\u30b9\u5074\u3067\u306f\u3001\u3000import\u306e\u524d\u306b\u3001\u5148\u307b\u3069\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u306elib\u3082\u691c\u7d22\u5bfe\u8c61\u306b\u306a\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\uff08\u30d3\u30d8\u30a4\u30d3\u30a2\u30d1\u30b9\u3092\u57fa\u70b9\u306b\u3057\u305f\u76f8\u5bfe\u30d1\u30b9\u3067lib\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30d3\u30d8\u30a4\u30d3\u30a2\u306e\u4f4d\u7f6e\u3092\u5909\u66f4\u3057\u305f\u3089\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\uff09\n\u307e\u305f\u3001\u30dc\u30c3\u30af\u30b9\u7d42\u4e86\u6642\u306b\u30d1\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002\n# websocket\u95a2\u9023\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d1\u30b9\u3092\u8ffd\u52a0\nimport sys, os\nself.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), \"../lib\")\nif self.folderName not in sys.path:\n   sys.path.append(self.folderName)\n   self.pathModified = True\n\nif self.pathModified and self.folderName and self.folderName in sys.path:\n            sys.path.remove(self.folderName)\n\n\n\u4f5c\u6210\u3057\u305f\u30dc\u30c3\u30af\u30b9\u306b\u3064\u3044\u3066\n\u5168\u90e8\u3067\uff14\u3064\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u30dc\u30c3\u30af\u30b9\u306f https://github.com/piroku/SlackSample \u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u3000\u3000\n\nbx_Slack_ChannelList\u30dc\u30c3\u30af\u30b9\n\n\u3000channels.list\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3001channel\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3042\u3068\u3067\u4f7f\u7528\u3059\u308bReal Time Messaging API\u306emessage\u30a4\u30d9\u30f3\u30c8\u3067\u306f\u3001\u6295\u7a3f\u3055\u308c\u305fchannel\u304cid\u5024\u3067\u9001\u3089\u308c\u3066\u304f\u308b\u306e\u3067\u3001channel\u540d\u3092\u5909\u63db\u3059\u308b\u30de\u30b9\u30bf\u3068\u3057\u3066\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u53d6\u5f97\u3057\u305f\u60c5\u5831\u306f\u3001ALMemory\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ad\u30fc\uff08SlackSample/Channels\uff09\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n\u30dc\u30c3\u30af\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\u3000channels.list\u30e1\u30bd\u30c3\u30c9\u306eurl\u3068Slack\u306eWebAPI\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306etoken\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002token\u306f\u3001\u3053\u3061\u3089\u3067\u53d6\u5f97\u3057\u305f\u3082\u306e\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u30bd\u30fc\u30b9\uff08\u4e00\u90e8\uff09\n\nbx_Slack_ChannelList\u30dc\u30c3\u30af\u30b9\uff08\u4e00\u90e8)\ndef onInput_onStart(self):\n\n        try:\n            import requests, json\n            # Slack Web API token\n            token = self.getParameter('token')\n            # Web API https://slack.com/api/channels.list\n            url = self.getParameter('url')\n            # self.logger.info(url)\n            payload = {'token' : token}\n            response = requests.post(url, data=payload).json()\n            okresult = str(response['ok'])\n            if(okresult==\"True\"):\n                # Channel List\u3092\u53d6\u5f97 \u30e1\u30e2\u30ea\u306b\u683c\u7d0d\n                channels = json.dumps(response['channels'])\n                self.memory.insertData(\"SlackSample/Channels\", channels)\n                # onStopped\n                self.onStopped()\n            elif(okresult==\"False\"):\n                raise Exception('channels.list error: %s' % response['error'].encode('utf-8'))\n            else:\n                raise Exception('channels.list error')\n\n        except Exception as e:\n            #self.logger.error('Failed to http post')\n            #self.logger.error('message:' + str(e))\n            # onError\u306b\u51fa\u529b\n            raise Exception, e\n\n\n\nbx_Slack_rtmstart\u30dc\u30c3\u30af\u30b9\n\u3000rtm.start\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3001Real Time Messaging API\u306e\u63a5\u7d9a\u5148\u306eURL\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u53d6\u5f97\u3057\u305fURL\u306e\u6587\u5b57\u5217\u306f\u3001onStopped()\u3067\u51fa\u529b\u3057\u307e\u3059\u3002\n\n\n\u30dc\u30c3\u30af\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\u3000rtm.start\u30e1\u30bd\u30c3\u30c9\u306eurl\u3068Slack\u306eWebAPI\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306etoken\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\uff08token\u306f\u524d\u8ff0\u306e\u3082\u306e\u3068\u540c\u3058\u3067\u3059\uff09\n\n\n\u30bd\u30fc\u30b9\uff08\u4e00\u90e8\uff09\n\nbx_Slack_rtmstart\u30dc\u30c3\u30af\u30b9\uff08\u4e00\u90e8)\n    def onInput_onStart(self):\n\n        try:\n            import requests, json\n            # Slack Web API token\n            token = self.getParameter('token')\n            # Web API rtm.start url https://slack.com/api/rtm.start\n            url = self.getParameter('url')\n            # self.logger.info(url)\n            payload = {'token' : token}\n            response = requests.post(url, data=payload).json()\n            okresult = str(response['ok'])\n            if(okresult==\"True\"):\n                # WebSocket\u306eurl\u3092\u53d6\u5f97\u3002\n                wsurl = response['url'].encode('utf-8')\n                # onStopped\u306b\u51fa\u529b\n                self.onStopped(wsurl)\n            elif(okresult==\"False\"):\n                raise Exception('rtm.start error: %s' % response['error'].encode('utf-8'))\n            else:\n                raise Exception('rtm.start error')\n\n        except Exception as e:\n            #self.logger.error('Failed to http post')\n            #self.logger.error('message:' + str(e))\n            # onError\u306b\u51fa\u529b\n            raise Exception, e\n\n\n\nbx_Slack_rtm\u30dc\u30c3\u30af\u30b9\n\u3000\u3000bx_Slack_rtmstart\u30dc\u30c3\u30af\u30b9\u3067\u53d6\u5f97\u3057\u305fURL\u3092onStart\u306b\u6307\u5b9a\u3057\u3001WebSocket\u3067\u63a5\u7d9a\u3057\u307e\u3059\u3002\u63a5\u7d9a\u304c\u78ba\u7acb\u3059\u308b\u3068hello\u30a4\u30d9\u30f3\u30c8\u304c\u9001\u3089\u308c\u3066\u304d\u307e\u3059\u306e\u3067\u3001ping\u306e\u30bf\u30a4\u30de\u30fc\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30a4\u30d9\u30f3\u30c8\u306fon_message\u306b\u901a\u77e5\u3055\u308c\u3066\u304f\u308b\u306e\u3067\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u3046\u3061message\u30a4\u30d9\u30f3\u30c8\u306e\u307f\u3092\u3000onTypeMessage()\u306b\u51fa\u529b\u3057\u307e\u3059\u3002\u3000\n\n\n\u30dc\u30c3\u30af\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\nping\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\u30bd\u30fc\u30b9\n\u3000path\u6587\u5b57\u5217\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\n```py:bx_Slack_rtm\u30dc\u30c3\u30af\u30b9\nclass MyClass(GeneratedClass):\n    def init(self):\n        GeneratedClass.init(self)\ndef onLoad(self):\n    self.framemanager = ALProxy('ALFrameManager')\n    self.folderName = None\n    self.pathModified = False\n    self.ws = None\n    self.bOpening = False\n    self.periodic_task = None\n\ndef onUnload(self):\n    if self.ws != None:\n        self.ws.close()\n    if self.pathModified and self.folderName and self.folderName in sys.path:\n        sys.path.remove(self.folderName)\n    self.folderName = None\n    self.pathModified = False\n    self.on_pingStop\n    self.ws = None\n    self.bOpening = False\n    self.periodic_task = None\n\ndef onInput_onStart(self, p):\n\n    # websocket\u95a2\u9023\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d1\u30b9\u3092\u8ffd\u52a0\n    import sys, os\n    self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), \"../lib/\")\n    if self.folderName not in sys.path:\n        sys.path.append(self.folderName)\n        self.pathModified = True\n\n    if self.bOpening:\n        self.logger.info('websocket client already opening..')\n        return\n\n    # websocket\u901a\u4fe1\u306e\u958b\u59cb\n    import websocket\n    self.serverURI = p\n\n    websocket.enableTrace(True)\n    self.logger.info(self.serverURI)\n    self.ws = websocket.WebSocketApp(self.serverURI,\n            on_message = self.on_message,\n            on_error = self.on_error,\n            on_close = self.on_close)\n    self.ws.on_open = self.on_open\n    try:\n        self.ws.run_forever()\n    except Exception as e:\n        # self.logger.error('Failed to websocket')\n        # self.logger.error('message:' + str(e))\n        raise Exception, e\n\ndef onInput_sendMessage(self, data):\n    import json\n    if self.bOpening:\n        #self.logger.info(\"send!!\")\n        data = json.dumps(data)\n        self.ws.send(data)\n        self.onMessageSent()\n\ndef on_message(self, ws, message):\n\n    import json\n    data = json.loads(message)\n    self.onMessage(json.dumps(data))\n\n    type = data['type'].encode('utf-8')\n    self.logger.info(type)\n\n    # type\u5224\u5b9a\n    if(type == \"hello\"):\n        # \u63a5\u7d9a\u6210\u529f\n        #self.logger.info(\"start!!\")\n        self.on_pingStart()\n    elif(type == \"message\"):\n        self.onTypeMessage(json.dumps(data))\n    elif(type == \"pong\"):\n        # ping\u306e\u8fd4\u7b54\n        pass\n\ndef on_error(self, ws, error):\n    self.bOpening = False\n    self.logger.info('WebSocket Error: %s' % error)\n\ndef on_close(self, ws):\n    self.bOpening = False\n    self.on_PingStop()\n    self.logger.info('Websocket closed')\n\ndef on_open(self, ws):\n    self.bOpening = True\n    self.logger.info('Websocket open')\n\ndef on_pingStart(self):\n    import qi\n    self.periodic_task = qi.PeriodicTask()\n    self.periodic_task.setName(\"SlackPingTask\")\n    self.periodic_task.setCallback(self.on_ping)\n    self.periodic_task.setUsPeriod(self.getParameter('ping (s)')*1000*1000)\n    self.periodic_task.start(False)\n\ndef on_ping(self):\n    import json\n    ping = {'type':'ping'}\n    # ping \u3092\u9001\u308b\u3002\n    self.onInput_sendMessage(ping)\n\ndef on_pingStop(self):\n    if self.periodic_task != None:\n        self.periodic_task.stop()\n\ndef onInput_onStop(self):\n    self.onUnload() #it is recommended to reuse the clean-up as the box is stopped\n    self.onStopped() #activate the output of the box\n\n##bx_filter_message\u30dc\u30c3\u30af\u30b9\n\u3000[message\u30a4\u30d9\u30f3\u30c8](https://api.slack.com/events/message)\u306b\u306f\u3001Slack\u30c1\u30fc\u30e0\u306e\u5168\u3066\u306echannel\u306e\u6295\u7a3f\u304c\u901a\u77e5\u3055\u308c\u3066\u304d\u307e\u3059\u3002\u5168\u3066\u306e\u6295\u7a3f\u3092\u767a\u8a71\u3059\u308b\u308f\u3051\u306b\u306f\u3044\u304b\u306a\u3044\u306e\u3067\u3001\u7279\u5b9a\u306echannel\u306e\u6295\u7a3f\u304b\u3069\u3046\u304b\u3092\u3053\u306e\u30dc\u30c3\u30af\u30b9\u3067\u5224\u65ad\u3057\u307e\u3059\u3002[message\u30a4\u30d9\u30f3\u30c8](https://api.slack.com/events/message)\u3067\u901a\u77e5\u3055\u308c\u308bjson\u30c7\u30fc\u30bf\u306b\u306f\u3001channel\u306e\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\u304c\u3001channel\u540d\u3067\u306f\u306a\u304f\u3001ID\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4e8b\u524d\u306bbx_Slack_ChannelList\u30dc\u30c3\u30af\u30b9\u3067\u53d6\u5f97\u3057\u305fChannelList\u304b\u3089channel\u540d\u306b\u5909\u63db\u3057\u3001\u5bfe\u8c61\u306echannel\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\u5bfe\u8c61\u306eChannel\u306b\u3064\u3044\u3066\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u307e\u3057\u305f\u3002\n\u3000\u5bfe\u8c61\u306eChannel\u306e\u6295\u7a3f\u306etext\u5024\u306f\u3001onSayMessage()\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u306e\u3067\u3001Animated Say\u306a\u3069\u3067\u767a\u8a71\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n![bx_Slack_filter.png](https://qiita-image-store.s3.amazonaws.com/0/131693/fc94c20b-0819-7d11-3f5b-7b4f2379c704.png)\n###\u30dc\u30c3\u30af\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n \u5bfe\u8c61\u306echannel\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n![bx_Slack_filter_para.png](https://qiita-image-store.s3.amazonaws.com/0/131693/990b2b6c-501f-8d20-af47-dc3ffd5ce165.png)\n###\u30bd\u30fc\u30b9\uff08\u4e00\u90e8\uff09\n```py:bx_filter_message\u30dc\u30c3\u30af\u30b9\uff08\u4e00\u90e8)\n   def onInput_onStart(self, p):\n\n        targetChannel = self.getParameter('channel')\n        if(targetChannel == ''):\n            self.logger.error(\"Parameter 'channel' isnot set\")\n        else:\n\n            import json\n            data = json.loads(p)\n\n            # \u30e1\u30e2\u30ea\u306b\u683c\u7d0d\u3057\u305fchannellist\u3092\u5143\u306b\u6295\u7a3f\u3055\u308c\u305fchannel\u306eid\u5024\u304b\u3089name\u5024\u306b\u5909\u63db\u3059\u308b\n            msgChannelName = ''\n            msgChannelId = data['channel'].encode('utf-8')\n            msgText = data[\"text\"].encode(\"utf-8\")\n            #self.logger.info(msgText)\n\n            slackChannels=self.memory.getData(\"SlackSample/Channels\")\n            channelList=json.loads(slackChannels)\n\n            for ch in channelList:\n                id = ch[\"id\"].encode('utf-8')\n                if( id == msgChannelId):\n                    msgChannelName = ch['name'].encode('utf-8')\n                    break;\n            # \u5bfe\u8c61\u306echannel\u3067\u3042\u308c\u3070\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092onSayMessage\u306b\u51fa\u529b\n            if(targetChannel == msgChannelName):\n                self.onSayMessage(msgText)\n\n        self.onStopped()\n\n\n\u6700\u5f8c\u306b\n\u307b\u307c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u6295\u7a3f\u3055\u308c\u305f\u5185\u5bb9\u3067Pepper\u304c\u558b\u308b\u306e\u3067\u3001WebSocket\u3063\u3066\u3059\u3054\u3044\uff01\u3068\u601d\u3044\u307e\u3057\u305f\u3002\u5fdc\u7528\u3068\u3057\u3066\u3001\u96e2\u308c\u305f\u4eba\u3068\u306e\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3084\u3001\u6295\u7a3f\u3092\u30b3\u30de\u30f3\u30c9\u306b\u898b\u7acb\u3066\u3066\u3001Pepper\u305d\u306e\u3082\u306e\u3092\u9060\u9694\u64cd\u4f5c\u3057\u3066\u3057\u307e\u3046\u306a\u3069\u3068\u3044\u3063\u305f\u3053\u3068\u306b\u4f7f\u3048\u306a\u3044\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3093\u306a\u98a8\u306b\u4f7f\u3063\u3066\u307f\u305f\u3088\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\u3000\u6700\u8fd1\u306e[\u30a2\u30c8\u30ea\u30a8\u79cb\u8449\u539f\u3055\u3093](http://pepper-atelier-akihabara.jp/)\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3001**\u8cea\u554f\u3084\u30b3\u30e1\u30f3\u30c8\u3092Slack\u306b\u6295\u7a3f\u3059\u308b\u3068\u73fe\u5834\u306ePepper\u304c\u767a\u8a71\u3059\u308b**\u3068\u3044\u3046\u30a2\u30d7\u30ea\u304c\u3059\u3054\u304f\u826f\u304f\u3066\u3001\u81ea\u5206\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u304c\u304d\u3063\u304b\u3051\u3067\u3059\u3002\n\u3000\u5b9f\u969b\u306b\u30a2\u30d7\u30ea\u3092\u4f5c\u3089\u308c\u305f\u65b9\u306b\u304a\u805e\u304d\u3057\u305f\u3068\u3053\u308d\u3001Slack\u306e[Real Time Messaging API](https://api.slack.com/rtm)\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u306e\u3053\u3068\u3002\u30cf\u30fc\u30c9\u30eb\u304c\u9ad8\u305d\u3046\u30fb\u30fb\uff08\u5b9f\u969b\u81ea\u5206\u306b\u306f\u30cf\u30fc\u30c9\u30eb\u304c\u9ad8\u304b\u3063\u305f\uff09\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u5148\u99c6\u8005\u306e\u65b9\u3005\u306e\u60c5\u5831\u3092\u5143\u306b\u3001\u306a\u3093\u3068\u304b\u5f62\u306b\u306a\u308a\u307e\u3057\u305f\u306e\u3067\u6295\u7a3f\u3057\u307e\u3059\u3002\n\n#\u6ce8\u610f\u4e8b\u9805\n\u3000\u30bd\u30d5\u30c8\u30d0\u30f3\u30af\u30ed\u30dc\u30c6\u30a3\u30af\u30b9\u682a\u5f0f\u4f1a\u793e\u306ePepper\u3092\u6d3b\u7528\u3057\u3001\u72ec\u81ea\u958b\u767a\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n#\u958b\u767a\u74b0\u5883\nMacOS Sierra 10.12.2\nChoregraphe 2.4.3.28\nPepper\n\n#\u53c2\u8003\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n[Pepper \u30cf\u30c3\u30ab\u30bd\u30f3\u306b\u5f79\u306b\u7acb\u3061\u305d\u3046\u306a \u30dc\u30c3\u30af\u30b9\u3092 4\u3064](http://qiita.com/tkawata1025/items/df181d22e44f9150a01d)\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001Slack\u306e\u7279\u5b9a\u306echannel\u306b\u6295\u7a3f\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3000Animated Say Text\u3000\u3067\u767a\u8a71\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u982d\uff08\u524d\u65b9\uff09\u3092\u30bf\u30c3\u30c1\u3067\u7d42\u4e86\u3067\u3059\u3002\n\n![\u30db\u3099\u30c3\u30af\u30b9.png](https://qiita-image-store.s3.amazonaws.com/0/131693/16894807-a51b-a135-e80a-a2e8ba0227f4.png)\n\n#Real Time Messaging API\u306e\u63a5\u7d9a\u306b\u3064\u3044\u3066\n\u3000Slack\u306e[Real Time Messaging API](https://api.slack.com/rtm)\u306e\u63a5\u7d9a\u5148\u306f\u56fa\u5b9a\u3067\u306f\u306a\u304f\u3001[rtm.start\u30e1\u30bd\u30c3\u30c9](https://api.slack.com/methods/rtm.start)\u3067\u52d5\u7684\u306b\u53d6\u5f97\u3057\u305fURL\u3092\u4f7f\u7528\u3057\u3066\u3001WebSocket\u3067\u63a5\u7d9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306eURL\u306e\u63a5\u7d9a\u307e\u3067\u306e\u6709\u52b9\u671f\u9650\u306f30\u79d2\u3067\u3059\u3002\n\u3000\u307e\u305f\u3001\u63a5\u7d9a\u5f8c\u3082\u3057\u3070\u3089\u304f\u3059\u308b\u3068\u81ea\u52d5\u3067\u5207\u65ad\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u3053\u307e\u3081\u306bping\u3092\u9001\u308a\u3001\u63a5\u7d9a\u3092\u7dad\u6301\u3057\u307e\u3059\u3002\n\n#WebSocket\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6e96\u5099\n\u3000Pepper\u306b\u306fPython\u306eWebSocket\u95a2\u9023\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u4f7f\u7528\u3059\u308b\u30dc\u30c3\u30af\u30b9\u3067\u305d\u306e\u4fdd\u5b58\u5148\u3092\u30ed\u30fc\u30c9\u30d1\u30b9\u306b\u542b\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u306blib\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u914d\u4e0b\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n![\u30e2\u30b7\u3099\u30e5\u30fc\u30eb.png](https://qiita-image-store.s3.amazonaws.com/0/131693/4c979479-14ac-4401-afb0-7438465183a3.png)\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u53d6\u5f97\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3044\u305f\u3057\u307e\u3057\u305f\u3002\n[Pepper \u30cf\u30c3\u30ab\u30bd\u30f3\u306b\u5f79\u306b\u7acb\u3061\u305d\u3046\u306a \u30dc\u30c3\u30af\u30b9\u3092 4\u3064](http://qiita.com/tkawata1025/items/df181d22e44f9150a01d)\n\n\u3000\u4f7f\u7528\u3059\u308b\u30dc\u30c3\u30af\u30b9\u5074\u3067\u306f\u3001\u3000import\u306e\u524d\u306b\u3001\u5148\u307b\u3069\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u306elib\u3082\u691c\u7d22\u5bfe\u8c61\u306b\u306a\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\uff08\u30d3\u30d8\u30a4\u30d3\u30a2\u30d1\u30b9\u3092\u57fa\u70b9\u306b\u3057\u305f\u76f8\u5bfe\u30d1\u30b9\u3067lib\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30d3\u30d8\u30a4\u30d3\u30a2\u306e\u4f4d\u7f6e\u3092\u5909\u66f4\u3057\u305f\u3089\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\uff09\n\u307e\u305f\u3001\u30dc\u30c3\u30af\u30b9\u7d42\u4e86\u6642\u306b\u30d1\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002\n\n```py:\n# websocket\u95a2\u9023\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d1\u30b9\u3092\u8ffd\u52a0\nimport sys, os\nself.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), \"../lib\")\nif self.folderName not in sys.path:\n   sys.path.append(self.folderName)\n   self.pathModified = True\n```\n```py:\nif self.pathModified and self.folderName and self.folderName in sys.path:\n            sys.path.remove(self.folderName)\n```\n\n#\u4f5c\u6210\u3057\u305f\u30dc\u30c3\u30af\u30b9\u306b\u3064\u3044\u3066\n \u5168\u90e8\u3067\uff14\u3064\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u30dc\u30c3\u30af\u30b9\u306f https://github.com/piroku/SlackSample \u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u3000\u3000\n##bx_Slack_ChannelList\u30dc\u30c3\u30af\u30b9\n![bx_Slack_ChannelList.png](https://qiita-image-store.s3.amazonaws.com/0/131693/48ed9bed-5fa0-2a1f-a4b7-e5c90c335d93.png)\n\u3000[channels.list\u30e1\u30bd\u30c3\u30c9](https://api.slack.com/methods/channels.list)\u3092\u4f7f\u7528\u3057\u3001channel\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3042\u3068\u3067\u4f7f\u7528\u3059\u308b[Real Time Messaging API](https://api.slack.com/rtm)\u306e[message\u30a4\u30d9\u30f3\u30c8](https://api.slack.com/events/message)\u3067\u306f\u3001\u6295\u7a3f\u3055\u308c\u305fchannel\u304cid\u5024\u3067\u9001\u3089\u308c\u3066\u304f\u308b\u306e\u3067\u3001channel\u540d\u3092\u5909\u63db\u3059\u308b\u30de\u30b9\u30bf\u3068\u3057\u3066\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u53d6\u5f97\u3057\u305f\u60c5\u5831\u306f\u3001ALMemory\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ad\u30fc\uff08SlackSample/Channels\uff09\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n###\u30dc\u30c3\u30af\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\u3000[channels.list\u30e1\u30bd\u30c3\u30c9](https://api.slack.com/methods/channels.list)\u306eurl\u3068Slack\u306eWebAPI\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306etoken\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002token\u306f\u3001[\u3053\u3061\u3089](https://api.slack.com/docs/oauth-test-tokens)\u3067\u53d6\u5f97\u3057\u305f\u3082\u306e\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n![bx_Slack_ChannelList_para.png](https://qiita-image-store.s3.amazonaws.com/0/131693/8fd4ad6f-941a-a586-acdd-7fca727703a8.png)\n###\u30bd\u30fc\u30b9\uff08\u4e00\u90e8\uff09\n```py:bx_Slack_ChannelList\u30dc\u30c3\u30af\u30b9\uff08\u4e00\u90e8)\ndef onInput_onStart(self):\n\n        try:\n            import requests, json\n            # Slack Web API token\n            token = self.getParameter('token')\n            # Web API https://slack.com/api/channels.list\n            url = self.getParameter('url')\n            # self.logger.info(url)\n            payload = {'token' : token}\n            response = requests.post(url, data=payload).json()\n            okresult = str(response['ok'])\n            if(okresult==\"True\"):\n                # Channel List\u3092\u53d6\u5f97 \u30e1\u30e2\u30ea\u306b\u683c\u7d0d\n                channels = json.dumps(response['channels'])\n                self.memory.insertData(\"SlackSample/Channels\", channels)\n                # onStopped\n                self.onStopped()\n            elif(okresult==\"False\"):\n                raise Exception('channels.list error: %s' % response['error'].encode('utf-8'))\n            else:\n                raise Exception('channels.list error')\n\n        except Exception as e:\n            #self.logger.error('Failed to http post')\n            #self.logger.error('message:' + str(e))\n            # onError\u306b\u51fa\u529b\n            raise Exception, e\n```\n##bx_Slack_rtmstart\u30dc\u30c3\u30af\u30b9\n\u3000[rtm.start\u30e1\u30bd\u30c3\u30c9](https://api.slack.com/methods/rtm.start)\u3092\u4f7f\u7528\u3057\u3001[Real Time Messaging API](https://api.slack.com/rtm)\u306e\u63a5\u7d9a\u5148\u306eURL\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u53d6\u5f97\u3057\u305fURL\u306e\u6587\u5b57\u5217\u306f\u3001onStopped()\u3067\u51fa\u529b\u3057\u307e\u3059\u3002\n![bx_Slack_rtmstart.png](https://qiita-image-store.s3.amazonaws.com/0/131693/c0c61a26-a8e8-2aa2-f87d-251c10216135.png)\n###\u30dc\u30c3\u30af\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\u3000[rtm.start\u30e1\u30bd\u30c3\u30c9](https://api.slack.com/methods/rtm.start)\u306eurl\u3068Slack\u306eWebAPI\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306etoken\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\uff08token\u306f\u524d\u8ff0\u306e\u3082\u306e\u3068\u540c\u3058\u3067\u3059\uff09\n![bx_Slack_rtmstart_para.png](https://qiita-image-store.s3.amazonaws.com/0/131693/9fea3283-42a5-4a0a-30c2-bf0ca7a55e42.png)\n###\u30bd\u30fc\u30b9\uff08\u4e00\u90e8\uff09\n```py:bx_Slack_rtmstart\u30dc\u30c3\u30af\u30b9\uff08\u4e00\u90e8)\n    def onInput_onStart(self):\n\n        try:\n            import requests, json\n            # Slack Web API token\n            token = self.getParameter('token')\n            # Web API rtm.start url https://slack.com/api/rtm.start\n            url = self.getParameter('url')\n            # self.logger.info(url)\n            payload = {'token' : token}\n            response = requests.post(url, data=payload).json()\n            okresult = str(response['ok'])\n            if(okresult==\"True\"):\n                # WebSocket\u306eurl\u3092\u53d6\u5f97\u3002\n                wsurl = response['url'].encode('utf-8')\n                # onStopped\u306b\u51fa\u529b\n                self.onStopped(wsurl)\n            elif(okresult==\"False\"):\n                raise Exception('rtm.start error: %s' % response['error'].encode('utf-8'))\n            else:\n                raise Exception('rtm.start error')\n\n        except Exception as e:\n            #self.logger.error('Failed to http post')\n            #self.logger.error('message:' + str(e))\n            # onError\u306b\u51fa\u529b\n            raise Exception, e\n```\n#bx_Slack_rtm\u30dc\u30c3\u30af\u30b9\n\u3000\u3000bx_Slack_rtmstart\u30dc\u30c3\u30af\u30b9\u3067\u53d6\u5f97\u3057\u305fURL\u3092onStart\u306b\u6307\u5b9a\u3057\u3001WebSocket\u3067\u63a5\u7d9a\u3057\u307e\u3059\u3002\u63a5\u7d9a\u304c\u78ba\u7acb\u3059\u308b\u3068[hello\u30a4\u30d9\u30f3\u30c8](https://api.slack.com/events/hello)\u304c\u9001\u3089\u308c\u3066\u304d\u307e\u3059\u306e\u3067\u3001ping\u306e\u30bf\u30a4\u30de\u30fc\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30a4\u30d9\u30f3\u30c8\u306fon_message\u306b\u901a\u77e5\u3055\u308c\u3066\u304f\u308b\u306e\u3067\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u3046\u3061[message\u30a4\u30d9\u30f3\u30c8](https://api.slack.com/events/message)\u306e\u307f\u3092\u3000onTypeMessage()\u306b\u51fa\u529b\u3057\u307e\u3059\u3002\u3000\n![bx_Slack_rtm.png](https://qiita-image-store.s3.amazonaws.com/0/131693/c7387ca0-3866-c2dd-c140-aaca07fa2219.png)\n### \u30dc\u30c3\u30af\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n ping\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n![bx_Slack_rtm_para.png](https://qiita-image-store.s3.amazonaws.com/0/131693/ddcc86e0-e175-ee48-0d9a-fbec9bb56fca.png)\n###\u30bd\u30fc\u30b9\n:asterisk:\u3000path\u6587\u5b57\u5217\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\n```py:bx_Slack_rtm\u30dc\u30c3\u30af\u30b9\nclass MyClass(GeneratedClass):\n    def __init__(self):\n        GeneratedClass.__init__(self)\n\n    def onLoad(self):\n        self.framemanager = ALProxy('ALFrameManager')\n        self.folderName = None\n        self.pathModified = False\n        self.ws = None\n        self.bOpening = False\n        self.periodic_task = None\n\n    def onUnload(self):\n        if self.ws != None:\n            self.ws.close()\n        if self.pathModified and self.folderName and self.folderName in sys.path:\n            sys.path.remove(self.folderName)\n        self.folderName = None\n        self.pathModified = False\n        self.on_pingStop\n        self.ws = None\n        self.bOpening = False\n        self.periodic_task = None\n\n    def onInput_onStart(self, p):\n\n        # websocket\u95a2\u9023\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d1\u30b9\u3092\u8ffd\u52a0\n        import sys, os\n        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), \"../lib/\")\n        if self.folderName not in sys.path:\n            sys.path.append(self.folderName)\n            self.pathModified = True\n\n        if self.bOpening:\n            self.logger.info('websocket client already opening..')\n            return\n\n        # websocket\u901a\u4fe1\u306e\u958b\u59cb\n        import websocket\n        self.serverURI = p\n\n        websocket.enableTrace(True)\n        self.logger.info(self.serverURI)\n        self.ws = websocket.WebSocketApp(self.serverURI,\n                on_message = self.on_message,\n                on_error = self.on_error,\n                on_close = self.on_close)\n        self.ws.on_open = self.on_open\n        try:\n            self.ws.run_forever()\n        except Exception as e:\n            # self.logger.error('Failed to websocket')\n            # self.logger.error('message:' + str(e))\n            raise Exception, e\n\n    def onInput_sendMessage(self, data):\n        import json\n        if self.bOpening:\n            #self.logger.info(\"send!!\")\n            data = json.dumps(data)\n            self.ws.send(data)\n            self.onMessageSent()\n\n    def on_message(self, ws, message):\n\n        import json\n        data = json.loads(message)\n        self.onMessage(json.dumps(data))\n\n        type = data['type'].encode('utf-8')\n        self.logger.info(type)\n\n        # type\u5224\u5b9a\n        if(type == \"hello\"):\n            # \u63a5\u7d9a\u6210\u529f\n            #self.logger.info(\"start!!\")\n            self.on_pingStart()\n        elif(type == \"message\"):\n            self.onTypeMessage(json.dumps(data))\n        elif(type == \"pong\"):\n            # ping\u306e\u8fd4\u7b54\n            pass\n\n    def on_error(self, ws, error):\n        self.bOpening = False\n        self.logger.info('WebSocket Error: %s' % error)\n\n    def on_close(self, ws):\n        self.bOpening = False\n        self.on_PingStop()\n        self.logger.info('Websocket closed')\n\n    def on_open(self, ws):\n        self.bOpening = True\n        self.logger.info('Websocket open')\n\n    def on_pingStart(self):\n        import qi\n        self.periodic_task = qi.PeriodicTask()\n        self.periodic_task.setName(\"SlackPingTask\")\n        self.periodic_task.setCallback(self.on_ping)\n        self.periodic_task.setUsPeriod(self.getParameter('ping (s)')*1000*1000)\n        self.periodic_task.start(False)\n        \n    def on_ping(self):\n        import json\n        ping = {'type':'ping'}\n        # ping \u3092\u9001\u308b\u3002\n        self.onInput_sendMessage(ping)\n\n    def on_pingStop(self):\n        if self.periodic_task != None:\n            self.periodic_task.stop()\n\n    def onInput_onStop(self):\n        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped\n        self.onStopped() #activate the output of the box\n```\n##bx_filter_message\u30dc\u30c3\u30af\u30b9\n\u3000[message\u30a4\u30d9\u30f3\u30c8](https://api.slack.com/events/message)\u306b\u306f\u3001Slack\u30c1\u30fc\u30e0\u306e\u5168\u3066\u306echannel\u306e\u6295\u7a3f\u304c\u901a\u77e5\u3055\u308c\u3066\u304d\u307e\u3059\u3002\u5168\u3066\u306e\u6295\u7a3f\u3092\u767a\u8a71\u3059\u308b\u308f\u3051\u306b\u306f\u3044\u304b\u306a\u3044\u306e\u3067\u3001\u7279\u5b9a\u306echannel\u306e\u6295\u7a3f\u304b\u3069\u3046\u304b\u3092\u3053\u306e\u30dc\u30c3\u30af\u30b9\u3067\u5224\u65ad\u3057\u307e\u3059\u3002[message\u30a4\u30d9\u30f3\u30c8](https://api.slack.com/events/message)\u3067\u901a\u77e5\u3055\u308c\u308bjson\u30c7\u30fc\u30bf\u306b\u306f\u3001channel\u306e\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\u304c\u3001channel\u540d\u3067\u306f\u306a\u304f\u3001ID\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4e8b\u524d\u306bbx_Slack_ChannelList\u30dc\u30c3\u30af\u30b9\u3067\u53d6\u5f97\u3057\u305fChannelList\u304b\u3089channel\u540d\u306b\u5909\u63db\u3057\u3001\u5bfe\u8c61\u306echannel\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\u5bfe\u8c61\u306eChannel\u306b\u3064\u3044\u3066\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u307e\u3057\u305f\u3002\n\u3000\u5bfe\u8c61\u306eChannel\u306e\u6295\u7a3f\u306etext\u5024\u306f\u3001onSayMessage()\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u306e\u3067\u3001Animated Say\u306a\u3069\u3067\u767a\u8a71\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n![bx_Slack_filter.png](https://qiita-image-store.s3.amazonaws.com/0/131693/fc94c20b-0819-7d11-3f5b-7b4f2379c704.png)\n###\u30dc\u30c3\u30af\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n \u5bfe\u8c61\u306echannel\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n![bx_Slack_filter_para.png](https://qiita-image-store.s3.amazonaws.com/0/131693/990b2b6c-501f-8d20-af47-dc3ffd5ce165.png)\n###\u30bd\u30fc\u30b9\uff08\u4e00\u90e8\uff09\n```py:bx_filter_message\u30dc\u30c3\u30af\u30b9\uff08\u4e00\u90e8)\n   def onInput_onStart(self, p):\n\n        targetChannel = self.getParameter('channel')\n        if(targetChannel == ''):\n            self.logger.error(\"Parameter 'channel' isnot set\")\n        else:\n\n            import json\n            data = json.loads(p)\n\n            # \u30e1\u30e2\u30ea\u306b\u683c\u7d0d\u3057\u305fchannellist\u3092\u5143\u306b\u6295\u7a3f\u3055\u308c\u305fchannel\u306eid\u5024\u304b\u3089name\u5024\u306b\u5909\u63db\u3059\u308b\n            msgChannelName = ''\n            msgChannelId = data['channel'].encode('utf-8')\n            msgText = data[\"text\"].encode(\"utf-8\")\n            #self.logger.info(msgText)\n\n            slackChannels=self.memory.getData(\"SlackSample/Channels\")\n            channelList=json.loads(slackChannels)\n\n            for ch in channelList:\n                id = ch[\"id\"].encode('utf-8')\n                if( id == msgChannelId):\n                    msgChannelName = ch['name'].encode('utf-8')\n                    break;\n            # \u5bfe\u8c61\u306echannel\u3067\u3042\u308c\u3070\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092onSayMessage\u306b\u51fa\u529b\n            if(targetChannel == msgChannelName):\n                self.onSayMessage(msgText)\n\n        self.onStopped()\n```\n#\u6700\u5f8c\u306b\n \u307b\u307c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u6295\u7a3f\u3055\u308c\u305f\u5185\u5bb9\u3067Pepper\u304c\u558b\u308b\u306e\u3067\u3001WebSocket\u3063\u3066\u3059\u3054\u3044\uff01\u3068\u601d\u3044\u307e\u3057\u305f\u3002\u5fdc\u7528\u3068\u3057\u3066\u3001\u96e2\u308c\u305f\u4eba\u3068\u306e\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3084\u3001\u6295\u7a3f\u3092\u30b3\u30de\u30f3\u30c9\u306b\u898b\u7acb\u3066\u3066\u3001Pepper\u305d\u306e\u3082\u306e\u3092\u9060\u9694\u64cd\u4f5c\u3057\u3066\u3057\u307e\u3046\u306a\u3069\u3068\u3044\u3063\u305f\u3053\u3068\u306b\u4f7f\u3048\u306a\u3044\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3093\u306a\u98a8\u306b\u4f7f\u3063\u3066\u307f\u305f\u3088\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n", "tags": ["Pepper", "Slack"]}