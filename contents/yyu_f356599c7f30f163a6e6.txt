{"context": " More than 1 year has passed since last update.\n\u3053\u306e\u8a18\u4e8b\u306b\u3042\u308b\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306eGist\u306b\u307e\u3068\u3081\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://gist.github.com/yoshimuraYuu/96ca584da1d04efb248b\n\n\u4f8b\u3048\u3070\u6570\u5b57$0, 1, \\dots, 25$\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8$a, b, \\dots, z$\u3078\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u6b21\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u3092\u5b9a\u7fa9\u3057\u305f\u3068\u3057\u307e\u3059\u3002\nlet alphabet = ['a'; 'b'; 'c'; 'd'; 'e'; 'f'; 'g'; 'h'; 'i'; 'j'; 'k'; 'l'; 'm'; 'n'; 'o'; 'p'; 'q'; 'r'; 's'; 't'; 'u'; 'v'; 'w'; 'x'; 'y'; 'z']\n\n\u3053\u3053\u3067\u306f\u4f8b\u3068\u3057\u3066\u30011\u304b\u308925\u307e\u3067\u306e\u6570\u5b57\u3067\u69cb\u6210\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u4e0a\u8a18\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u6587\u5b57\u306e\u30ea\u30b9\u30c8\u3078\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308b\u3068\u3057\u307e\u3059\u3002\n\n\u76f4\u611f\u7684\u306a\u5b9f\u88c5\n\u307e\u305a\u3001\u30ea\u30b9\u30c8\u3092\u5148\u982d\u304b\u3089\u8abf\u3079\u3066\u3044\u3063\u3066$n$\u756a\u76ee\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570nth\u3092\u5b9a\u7fa9\u3057\u307e\u3059 1\u3002\nlet rec nth l = function\n    0   ->  List.hd l\n|   i   ->  nth (List.tl l) (i - 1) \n\n\n\u3053\u306enth\u3092\u4f7f\u3063\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30ea\u30b9\u30c8alphabet\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nlet rec trans1 = function\n    []      -> []\n|   x::xs   -> nth alphabet x :: trans1 xs\n\n\u307e\u305anth\u306f$n$\u56de\u518d\u5e30\u3059\u308b\u306e\u3067\u3001\u8a08\u7b97\u91cf$O(n)$\u306e\u95a2\u6570\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u95a2\u6570\u3092\u30ea\u30b9\u30c8\u306e\u9577\u3055\u5206\u547c\u3073\u51fa\u3057\u3066\u3044\u308btrans1\u306e\u8a08\u7b97\u91cf\u306f\u3001\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092$n$\u3001\u8981\u7d20\u306e\u5e73\u5747\u3092$m$\u3068\u3059\u308b\u3068$O(n \\times m)$\u3068\u3044\u3046\u8a08\u7b97\u91cf\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3059\u308b\u95a2\u6570\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u5f15\u6570l\u3068n\u3092\u53d6\u308a\u3001trans1 l\u3092$n$\u56de\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\nlet rec test1 l = function\n    0   -> ();\n|   i   -> \n        let _ = trans1 l in\n        test1 (i - 1)\n\n\u6b21\u306e\u4f8b\u3092time\u30b3\u30de\u30f3\u30c9\u3067\u3069\u308c\u304f\u3089\u3044\u304b\u304b\u308b\u306e\u304b\u6e2c\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\ntest1 [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1] 1000000\n\n$ time ocaml trans.ml\nocaml trans.ml  2.09s user 0.01s system 99% cpu 2.101 total\n\n\u4e00\u65b9\u3067\u3001\u3053\u306e\u4f8b\u306f\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\ntest1 [25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25] 1000000\n\n$ time ocaml trans.ml\nocaml trans.ml  15.36s user 0.02s system 99% cpu 15.503 total\n\n\u3053\u306e\u5dee\u3092\u57cb\u3081\u308b\u306e\u304c\u5f53\u9762\u306e\u76ee\u6a19\u3067\u3059\u3002\n\n\u52b9\u7387\u7684\u306a\u5b9f\u88c5\n\u30ea\u30b9\u30c8\u3092\u300c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30bd\u30fc\u30c8\u3055\u308c\u305f\u4e8c\u5206\u6728\u300d\u3078\u5909\u63db\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u6728\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002N\u306f\u30ce\u30fc\u30c9\u3067L\u306f\u30ea\u30fc\u30d5\u3092\u8868\u3057\u307e\u3059\u3002\ntype 'a tree =\n    L of 'a\n|   N of int * 'a tree * 'a tree\n\n\u4e8c\u5206\u63a2\u7d22\u306e\u3088\u3046\u306b\u3001\u8981\u7d20\u3092\u534a\u5206\u534a\u5206\u306b\u3057\u3066\u3044\u304f\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nlet join = function\n    ((L _) as t1), ((L _) as t2)                  -> N(2, t1, t2)\n|   ((L _) as t1), ((N(n, _, _)) as t2) |\n    ((N(n, _, _)) as t1), ((L _) as t2)           -> N(n + 1, t1, t2)\n|   ((N(n1, _, _)) as t1), ((N (n2, _, _)) as t2) -> N(n1 + n2, t1, t2)\n\nlet rec inner = function\n    []          -> []\n|   x::[]       -> [x]\n|   x::(y::xs)  -> (join (x, y)) :: inner xs\n\nlet rec build_tree = function\n    x::[]       -> x\n|   xs          -> build_tree (inner xs)\n\n\u8907\u96d1\u3067\u3059\u304c\u3001\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u4e00\u65e6\u4e8c\u5206\u6728\u3078\u5909\u63db\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n# build_tree (List.map (fun x -> L x) alphabet);;\n- : char tree =\nN (26,\n N (16,\n  N (8, N (4, N (2, L 'a', L 'b'), N (2, L 'c', L 'd')),\n   N (4, N (2, L 'e', L 'f'), N (2, L 'g', L 'h'))),\n  N (8, N (4, N (2, L 'i', L 'j'), N (2, L 'k', L 'l')),\n   N (4, N (2, L 'm', L 'n'), N (2, L 'o', L 'p')))),\n N (10,\n  N (8, N (4, N (2, L 'q', L 'r'), N (2, L 's', L 't')),\n   N (4, N (2, L 'u', L 'v'), N (2, L 'w', L 'x'))),\n  N (2, L 'y', L 'z')))\n\n\u3053\u306e\u4e8c\u5206\u6728\u304b\u3089$n$\u756a\u76ee\u306e\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3059\u95a2\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nlet rec extract_tree = function\n    0, N(_, (L e), r)     -> e\n|   1, N(2, (L _), (L r)) -> r\n|   n, N(_, (L _), r)     -> extract_tree (n - 1, r)\n|   n, N(n1, l, (L e)) when n + 1 == n1 -> e\n|   n, N(c, (N(cl, _, _) as l), r) ->\n        if n < cl then\n            extract_tree (n, l)\n        else\n            extract_tree (n - cl, r)\n|   _   -> failwith \"error\"\n\n\u307e\u305a\u3001extract_tree\u306b0\u3068\u5de6\u304c\u30ea\u30fc\u30d5\u306e\u6728\u304c\u6e21\u3055\u308c\u305f\u5834\u5408\u3001\u5de6\u5074\u306e\u6728\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u6b21\u306b\u5de6\u304c\u30ea\u30fc\u30d5\u3067\u53f3\u3082\u30ea\u30fc\u30d5\u306e\u5927\u304d\u30552\u306e\u6728\u306b\u5bfe\u3057\u3066\u30011\u304c\u5165\u529b\u3055\u308c\u305f\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5de6\u304c\u30ea\u30fc\u30d5\u3067\u53f3\u304c\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u53f3\u306e\u30ce\u30fc\u30c9\u3092\u518d\u5e30\u7684\u306b\u8abf\u3079\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u5de6\u304c\u30ce\u30fc\u30c9\u3067\u53f3\u304c\u30ea\u30fc\u30d5\u306e\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306a\u6761\u4ef6\u3067\u53f3\u306e\u30ea\u30fc\u30d5\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u53f3\u3068\u5de6\u304c\u4e21\u65b9\u30ce\u30fc\u30c9\u3067\u3042\u308b\u5834\u5408\u306f\u5165\u529bn\u306b\u5fdc\u3058\u3066\u6b21\u306e\u4e8c\u3064\u306b\u5206\u5c90\u3057\u307e\u3059\u3002\n\n\u3057\u3063\u304b\u308a\u53d6\u308a\u51fa\u305b\u308b\u306e\u304b\u3092\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u3067\u691c\u8a3c\u3057\u307e\u3059\u3002\nlet alphabet_tree = build_tree (List.map (fun x -> L x) alphabet)\nlet check_extract_tree () = \n    let rec loop i =\n        if i > 25 then []\n        else extract_tree (i, alphabet_tree) :: loop (i + 1)\n    in\n    loop 0\n\n# check_extract_tree ();;\n- : char list =\n['a'; 'b'; 'c'; 'd'; 'e'; 'f'; 'g'; 'h'; 'i'; 'j'; 'k'; 'l'; 'm'; 'n'; 'o';\n 'p'; 'q'; 'r'; 's'; 't'; 'u'; 'v'; 'w'; 'x'; 'y'; 'z']\n\n\u305d\u3057\u3066\u3001\u6570\u5b57\u306e\u30ea\u30b9\u30c8\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u30ea\u30b9\u30c8\u3078\u5909\u63db\u3059\u308b\u52b9\u7387\u7684\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nlet rec trans2 l =\n    match l with\n        []      -> []\n    |   x::xs   -> extract_tree (x, alphabet_tree) :: trans2 xs\n\n\u30c6\u30b9\u30c8\u7528\u306e\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\nlet rec test2 l = function\n    0   -> ();\n|   i   -> \n        let _ = trans2 l in\n        test2 l (i - 1);;\n\n\u305d\u308c\u3067\u306f\u30c6\u30b9\u30c8\u3067\u3059\u3002\ntest2 [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1] 1000000\n\n$ time ocaml trans.ml\nocaml trans.ml  9.55s user 0.01s system 99% cpu 9.557 total\n\n\u3069\u308c\u304f\u3089\u3044\u306e\u5dee\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u304b\u3002\ntest2 [25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25] 1000000\n\n$ time ocaml trans.ml\nocaml trans.ml  5.64s user 0.01s system 99% cpu 5.652 total\n\ntest1\u306b\u6bd4\u3079\u3066\u5dee\u304c\u5c11\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u7d50\u8ad6\n\u30ea\u30b9\u30c8\u304b\u3089\u4e8c\u5206\u6728\u3078\u5909\u63db\u3059\u308b\u8a08\u7b97\u91cf\u306f\u3001\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092$n$\u3068\u3057\u3066$O(\\log_2(n))$\u3067\u3059\u3002\u3053\u306e\u4e8c\u5206\u6728\u304b\u3089\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\u8a08\u7b97\u91cf\u306f$O(\\log_2(n))$\u306a\u306e\u3067\u3001trans2 l\u306fl\u306e\u9577\u3055\u3092$m$\u3068\u3059\u308b\u3068\u3001$O\\left((m + 1) \\log_2(n)\\right)$\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u76f4\u611f\u7684\u306a\u5b9f\u88c5\u306e\u8a08\u7b97\u91cf\u304c$O(n \\times m)$\u306a\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u5b9f\u88c5\u306e\u65b9\u304c\u52b9\u7387\u7684\u3067\u3042\u308b\u3068\u8a00\u3048\u305d\u3046\u3067\u3059\u3002\n\n\u53c2\u8003\u6587\u732e\n\nProvably perfect shuffle algorithms\n\n\n\n\n\nOCaml\u306b\u306fList.nth\u3068\u3044\u3046\u6a5f\u80fd\u304c\u540c\u3058\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306fnth\u306e\u52d5\u4f5c\u3092\u5206\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u3001\u3042\u3048\u3066\u518d\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u00a0\u21a9\n\n\n\n> \u3053\u306e\u8a18\u4e8b\u306b\u3042\u308b\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306eGist\u306b\u307e\u3068\u3081\u3066\u3042\u308a\u307e\u3059\u3002\n> https://gist.github.com/yoshimuraYuu/96ca584da1d04efb248b\n\n\u4f8b\u3048\u3070\u6570\u5b57$0, 1, \\dots, 25$\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8$a, b, \\dots, z$\u3078\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u6b21\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u3092\u5b9a\u7fa9\u3057\u305f\u3068\u3057\u307e\u3059\u3002\n\n```ocaml\nlet alphabet = ['a'; 'b'; 'c'; 'd'; 'e'; 'f'; 'g'; 'h'; 'i'; 'j'; 'k'; 'l'; 'm'; 'n'; 'o'; 'p'; 'q'; 'r'; 's'; 't'; 'u'; 'v'; 'w'; 'x'; 'y'; 'z']\n```\n\n\u3053\u3053\u3067\u306f\u4f8b\u3068\u3057\u3066\u30011\u304b\u308925\u307e\u3067\u306e\u6570\u5b57\u3067\u69cb\u6210\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u4e0a\u8a18\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u6587\u5b57\u306e\u30ea\u30b9\u30c8\u3078\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308b\u3068\u3057\u307e\u3059\u3002\n\n# \u76f4\u611f\u7684\u306a\u5b9f\u88c5\n\n\u307e\u305a\u3001\u30ea\u30b9\u30c8\u3092\u5148\u982d\u304b\u3089\u8abf\u3079\u3066\u3044\u3063\u3066$n$\u756a\u76ee\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570`nth`\u3092\u5b9a\u7fa9\u3057\u307e\u3059 [^why_does_implement_nth]\u3002\n\n[^why_does_implement_nth]: OCaml\u306b\u306f`List.nth`\u3068\u3044\u3046\u6a5f\u80fd\u304c\u540c\u3058\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f`nth`\u306e\u52d5\u4f5c\u3092\u5206\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u3001\u3042\u3048\u3066\u518d\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n```ocaml\nlet rec nth l = function\n    0   ->  List.hd l\n|   i   ->  nth (List.tl l) (i - 1) \n\n```\n\n\u3053\u306e`nth`\u3092\u4f7f\u3063\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30ea\u30b9\u30c8`alphabet`\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```ocaml\nlet rec trans1 = function\n    []      -> []\n|   x::xs   -> nth alphabet x :: trans1 xs\n```\n\n\u307e\u305a`nth`\u306f$n$\u56de\u518d\u5e30\u3059\u308b\u306e\u3067\u3001\u8a08\u7b97\u91cf$O(n)$\u306e\u95a2\u6570\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u95a2\u6570\u3092\u30ea\u30b9\u30c8\u306e\u9577\u3055\u5206\u547c\u3073\u51fa\u3057\u3066\u3044\u308b`trans1`\u306e\u8a08\u7b97\u91cf\u306f\u3001\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092$n$\u3001\u8981\u7d20\u306e\u5e73\u5747\u3092$m$\u3068\u3059\u308b\u3068$O(n \\times m)$\u3068\u3044\u3046\u8a08\u7b97\u91cf\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6b21\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3059\u308b\u95a2\u6570\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u5f15\u6570`l`\u3068`n`\u3092\u53d6\u308a\u3001`trans1 l`\u3092$n$\u56de\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\n```ocaml\nlet rec test1 l = function\n    0   -> ();\n|   i   -> \n        let _ = trans1 l in\n        test1 (i - 1)\n```\n\n\u6b21\u306e\u4f8b\u3092`time`\u30b3\u30de\u30f3\u30c9\u3067\u3069\u308c\u304f\u3089\u3044\u304b\u304b\u308b\u306e\u304b\u6e2c\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\n\n```ocaml\ntest1 [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1] 1000000\n```\n\n```console\n$ time ocaml trans.ml\nocaml trans.ml  2.09s user 0.01s system 99% cpu 2.101 total\n```\n\n\u4e00\u65b9\u3067\u3001\u3053\u306e\u4f8b\u306f\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```ocaml\ntest1 [25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25] 1000000\n```\n\n```console\n$ time ocaml trans.ml\nocaml trans.ml  15.36s user 0.02s system 99% cpu 15.503 total\n```\n\n\u3053\u306e\u5dee\u3092\u57cb\u3081\u308b\u306e\u304c\u5f53\u9762\u306e\u76ee\u6a19\u3067\u3059\u3002\n\n# \u52b9\u7387\u7684\u306a\u5b9f\u88c5\n\n\u30ea\u30b9\u30c8\u3092\u300c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30bd\u30fc\u30c8\u3055\u308c\u305f\u4e8c\u5206\u6728\u300d\u3078\u5909\u63db\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u6728\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002`N`\u306f\u30ce\u30fc\u30c9\u3067`L`\u306f\u30ea\u30fc\u30d5\u3092\u8868\u3057\u307e\u3059\u3002\n\n```ocaml\ntype 'a tree =\n    L of 'a\n|   N of int * 'a tree * 'a tree\n```\n\n\u4e8c\u5206\u63a2\u7d22\u306e\u3088\u3046\u306b\u3001\u8981\u7d20\u3092\u534a\u5206\u534a\u5206\u306b\u3057\u3066\u3044\u304f\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```ocaml\nlet join = function\n    ((L _) as t1), ((L _) as t2)                  -> N(2, t1, t2)\n|   ((L _) as t1), ((N(n, _, _)) as t2) |\n    ((N(n, _, _)) as t1), ((L _) as t2)           -> N(n + 1, t1, t2)\n|   ((N(n1, _, _)) as t1), ((N (n2, _, _)) as t2) -> N(n1 + n2, t1, t2)\n\nlet rec inner = function\n    []          -> []\n|   x::[]       -> [x]\n|   x::(y::xs)  -> (join (x, y)) :: inner xs\n\nlet rec build_tree = function\n    x::[]       -> x\n|   xs          -> build_tree (inner xs)\n```\n\n\u8907\u96d1\u3067\u3059\u304c\u3001\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n![buil_tree_reduce.png](https://qiita-image-store.s3.amazonaws.com/0/10815/d31cc28e-3bd5-a2f4-1592-f51f6f47a795.png)\n\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u4e00\u65e6\u4e8c\u5206\u6728\u3078\u5909\u63db\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```ocaml\n# build_tree (List.map (fun x -> L x) alphabet);;\n- : char tree =\nN (26,\n N (16,\n  N (8, N (4, N (2, L 'a', L 'b'), N (2, L 'c', L 'd')),\n   N (4, N (2, L 'e', L 'f'), N (2, L 'g', L 'h'))),\n  N (8, N (4, N (2, L 'i', L 'j'), N (2, L 'k', L 'l')),\n   N (4, N (2, L 'm', L 'n'), N (2, L 'o', L 'p')))),\n N (10,\n  N (8, N (4, N (2, L 'q', L 'r'), N (2, L 's', L 't')),\n   N (4, N (2, L 'u', L 'v'), N (2, L 'w', L 'x'))),\n  N (2, L 'y', L 'z')))\n```\n\n\u3053\u306e\u4e8c\u5206\u6728\u304b\u3089$n$\u756a\u76ee\u306e\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3059\u95a2\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```ocaml\nlet rec extract_tree = function\n    0, N(_, (L e), r)     -> e\n|   1, N(2, (L _), (L r)) -> r\n|   n, N(_, (L _), r)     -> extract_tree (n - 1, r)\n|   n, N(n1, l, (L e)) when n + 1 == n1 -> e\n|   n, N(c, (N(cl, _, _) as l), r) ->\n        if n < cl then\n            extract_tree (n, l)\n        else\n            extract_tree (n - cl, r)\n|   _   -> failwith \"error\"\n```\n\n\u307e\u305a\u3001`extract_tree`\u306b`0`\u3068\u5de6\u304c\u30ea\u30fc\u30d5\u306e\u6728\u304c\u6e21\u3055\u308c\u305f\u5834\u5408\u3001\u5de6\u5074\u306e\u6728\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n![extract1_reduce.png](https://qiita-image-store.s3.amazonaws.com/0/10815/e6672c19-2b20-972f-8743-c17defb7cb8d.png)\n\n\u6b21\u306b\u5de6\u304c\u30ea\u30fc\u30d5\u3067\u53f3\u3082\u30ea\u30fc\u30d5\u306e\u5927\u304d\u30552\u306e\u6728\u306b\u5bfe\u3057\u3066\u3001`1`\u304c\u5165\u529b\u3055\u308c\u305f\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![extract2_reduce.png](https://qiita-image-store.s3.amazonaws.com/0/10815/b54450a8-c615-eadd-98ce-0d35f5d2a2f1.png)\n\n\u5de6\u304c\u30ea\u30fc\u30d5\u3067\u53f3\u304c\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u53f3\u306e\u30ce\u30fc\u30c9\u3092\u518d\u5e30\u7684\u306b\u8abf\u3079\u3066\u3044\u304d\u307e\u3059\u3002\n\n![extract3_reduce.png](https://qiita-image-store.s3.amazonaws.com/0/10815/be4c92fa-2008-0a01-f53e-e127e2152f21.png)\n\n\u5de6\u304c\u30ce\u30fc\u30c9\u3067\u53f3\u304c\u30ea\u30fc\u30d5\u306e\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306a\u6761\u4ef6\u3067\u53f3\u306e\u30ea\u30fc\u30d5\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n![extract4_reduce.png](https://qiita-image-store.s3.amazonaws.com/0/10815/8d59aacc-df44-7adf-e15b-0a8d3a5cb72b.png)\n\n\u53f3\u3068\u5de6\u304c\u4e21\u65b9\u30ce\u30fc\u30c9\u3067\u3042\u308b\u5834\u5408\u306f\u5165\u529b`n`\u306b\u5fdc\u3058\u3066\u6b21\u306e\u4e8c\u3064\u306b\u5206\u5c90\u3057\u307e\u3059\u3002\n\n![extract5_reduce.png](https://qiita-image-store.s3.amazonaws.com/0/10815/c3a0dcaf-2069-7258-5465-711e632406f7.png)\n\n\u3057\u3063\u304b\u308a\u53d6\u308a\u51fa\u305b\u308b\u306e\u304b\u3092\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u3067\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n```ocaml\nlet alphabet_tree = build_tree (List.map (fun x -> L x) alphabet)\nlet check_extract_tree () = \n    let rec loop i =\n        if i > 25 then []\n        else extract_tree (i, alphabet_tree) :: loop (i + 1)\n    in\n    loop 0\n```\n\n\n```ocaml\n# check_extract_tree ();;\n- : char list =\n['a'; 'b'; 'c'; 'd'; 'e'; 'f'; 'g'; 'h'; 'i'; 'j'; 'k'; 'l'; 'm'; 'n'; 'o';\n 'p'; 'q'; 'r'; 's'; 't'; 'u'; 'v'; 'w'; 'x'; 'y'; 'z']\n```\n\n\u305d\u3057\u3066\u3001\u6570\u5b57\u306e\u30ea\u30b9\u30c8\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u30ea\u30b9\u30c8\u3078\u5909\u63db\u3059\u308b\u52b9\u7387\u7684\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```ocaml\nlet rec trans2 l =\n    match l with\n        []      -> []\n    |   x::xs   -> extract_tree (x, alphabet_tree) :: trans2 xs\n```\n\n\u30c6\u30b9\u30c8\u7528\u306e\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```ocaml\nlet rec test2 l = function\n    0   -> ();\n|   i   -> \n        let _ = trans2 l in\n        test2 l (i - 1);;\n```\n\n\u305d\u308c\u3067\u306f\u30c6\u30b9\u30c8\u3067\u3059\u3002\n\n```ocaml\ntest2 [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1] 1000000\n```\n\n```console\n$ time ocaml trans.ml\nocaml trans.ml  9.55s user 0.01s system 99% cpu 9.557 total\n```\n\n\u3069\u308c\u304f\u3089\u3044\u306e\u5dee\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\n```ocaml\ntest2 [25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25; 25] 1000000\n```\n\n```console\n$ time ocaml trans.ml\nocaml trans.ml  5.64s user 0.01s system 99% cpu 5.652 total\n```\n\n`test1`\u306b\u6bd4\u3079\u3066\u5dee\u304c\u5c11\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n# \u7d50\u8ad6\n\n\u30ea\u30b9\u30c8\u304b\u3089\u4e8c\u5206\u6728\u3078\u5909\u63db\u3059\u308b\u8a08\u7b97\u91cf\u306f\u3001\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092$n$\u3068\u3057\u3066$O(\\log_2(n))$\u3067\u3059\u3002\u3053\u306e\u4e8c\u5206\u6728\u304b\u3089\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\u8a08\u7b97\u91cf\u306f$O(\\log_2(n))$\u306a\u306e\u3067\u3001`trans2 l`\u306f`l`\u306e\u9577\u3055\u3092$m$\u3068\u3059\u308b\u3068\u3001$O\\left((m + 1) \\log_2(n)\\right)$\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u76f4\u611f\u7684\u306a\u5b9f\u88c5\u306e\u8a08\u7b97\u91cf\u304c$O(n \\times m)$\u306a\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u5b9f\u88c5\u306e\u65b9\u304c\u52b9\u7387\u7684\u3067\u3042\u308b\u3068\u8a00\u3048\u305d\u3046\u3067\u3059\u3002\n\n# \u53c2\u8003\u6587\u732e\n\n- [Provably perfect shuffle algorithms](http://okmij.org/ftp/Haskell/perfect-shuffle.txt)\n", "tags": ["OCaml", "functional", "algorithm", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}