{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\nresque \u306b\u300c\u8d77\u52d5\u3057\u3066\u306d\u300d\u300c\u505c\u6b62\u3057\u3066\u306d\u300d\u3068\u3044\u3046\u30ad\u30e5\u30fc\u3092\u7a4d\u3080\u3068 EC2 \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8d77\u52d5\u30fb\u505c\u6b62\u3059\u308b\n\u2191 \u7528\u306e\u30d7\u30ed\u30bb\u30b9\u306f daemon-spawn \u3067\u5e38\u99d0\u5316\nEC2 \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u8d77\u52d5\u30fb\u505c\u6b62\u306f AWS CLI \u3092\u5229\u7528\u3057\u3066\u5b9f\u73fe\u3059\u308b\n\n\nAWS CLI \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo easy_install pip \n$ sudo pip install awscli \n$ aws configure --profile my_profile\nAWS Access Key ID [None]: AKIAYB7....\nAWS Secret Access Key []: q-SLuyqi+oV....\nDefault region name []: ap-northeast-1\nDefault output format []: \u203b\u4f55\u3082\u5165\u529b\u305b\u305a Enter\n\n\u203b\u4e8b\u524d\u306b EC2 \u64cd\u4f5c\u7528\u306e IAM \u3092\u4f5c\u6210\u3057\u3066\u3001Access Key\uff0fSecret Access Key \u3092\u6255\u3044\u51fa\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n\n\u53c2\u8003\uff1a\u7b2c1\u56de\u3000AWS CLI\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff1a\u30a4\u30f3\u30d5\u30e9\u5c4b\u306eAWS\u306f\u3058\u3081\u305f\u65e5\u8a18\u2500GUI\u3092\u6368\u3066\u3088\n\n\u5b9f\u88c5\n\napp/workers/instaces_manager.rb\nEC2_REGION = Settings.aws_ec2.region\nCLI_PROFILE = Settings.aws_ec2.profile\n\nclass InstancesManager\n  # \u51e6\u7406\u7a2e\u5225\n  RUN_INSTANCES      = 1    # \u8d77\u52d5\n  TERMINATE_INSTANCE = 100  # \u505c\u6b62\n\n  @queue = Settings.resque.manager.queue\n\n  def self.perform(processing_type, options = {})\n    begin\n      logger = Logger.new(File.join(Rails.root, Settings.resque.manager.log_file))\n\n      # \u51e6\u7406\u958b\u59cb\n      start_time = Time.now\n      logger.info(\"[PID:#{$$}]: instances_manager start at: #{start_time}\")\n\n      # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u30fb\u505c\u6b62\n      begin\n        case processing_type\n          when RUN_INSTANCES      then run_instances(options['count'])\n          when TERMINATE_INSTANCE then terminate_instance(options['instance_id'])\n        end\n        logger.info(\"[PID:#{$$}]: success: processing_type=#{processing_type}, options=#{options}\")\n      rescue =>e\n        logger.error(\"[PID:#{$$}]: failure: processing_type=#{processing_type}, options=#{options}\")\n        logger.error(e)\n      end\n\n      # \u51e6\u7406\u7d42\u4e86\n      finished_time = Time.now\n      logger.info(\"[PID:#{$$}]: instances_manager finished: #{start_time}(from) - #{finished_time}(to): #{finished_time - start_time}(processing time)\")\n    rescue =>e\n      logger.error(e)\n    end\n  end\n\n  def self.run_instances(count)\n    image_id            = Settings.aws_ec2.xxx.image_id\n    instance_type       = Settings.aws_ec2.xxx.instance_type\n    key_name            = Settings.aws_ec2.xxx.key_name\n    security_group_name = Settings.aws_ec2.xxx.security_group_name\n\n    command = [\n        'aws ec2 run-instances',\n        '--image-id', image_id,\n        '--count', count,\n        '--instance-type', instance_type,\n        '--key-name', key_name,\n        '--security-groups', security_group_name,\n        '--region', EC2_REGION,\n        '--profile', CLI_PROFILE\n    ].join(' ')\n    IO.popen(command){}\n  end\n\n  def self.terminate_instance(instance_id)\n    command = [\n        'aws ec2 terminate-instances',\n        '--instance-ids', instance_id,\n        '--region', EC2_REGION,\n        '--profile', CLI_PROFILE\n    ].join(' ')\n    IO.popen(command){}\n  end\nend\n\n\n\nbin/instances_manage_worker.rb\n#!/usr/bin/env ruby\nrequire File.expand_path('../../config/application', __FILE__)\nRails.application.require_environment!\n\nclass InstancesManageDaemon < DaemonSpawn::Base\n  def start(args)\n    @worker = Resque::Worker.new(Settings.resque.manager.queue)\n    @worker.work\n  end\n\n  def stop\n    # \u51e6\u7406\u4e2d\u306ejob\u3092\u5b8c\u4e86\u5f8c\u3001shutdown\u3059\u308b\n    @worker.try(:shutdown)\n  end\nend\n\nInstancesManageDaemon.spawn!({\n  :working_dir => Rails.root,\n  :pid_file => File.join(Rails.root, Settings.resque.manager.pid_file),\n  :log_file => File.join(Rails.root, Settings.resque.manager.log_file),\n  :sync_log => true,\n  :singleton => true\n})\n\n\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8d77\u52d5\u3059\u308b\nResque.enqueue(InstancesManager, InstancesManager::RUN_INSTANCES, count: 5)\n\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u505c\u6b62\u3059\u308b\nResque.enqueue(InstancesManager, InstancesManager::TERMINATE_INSTANCE, instance_id: my_instance_id)\n\ndef my_instance_id\n  command = '/usr/bin/curl \"http://169.254.169.254/latest/meta-data/instance-id\"'\n  IO.popen(command){|io| io.gets}\nend\n\n## \u6982\u8981\n\n- resque \u306b\u300c\u8d77\u52d5\u3057\u3066\u306d\u300d\u300c\u505c\u6b62\u3057\u3066\u306d\u300d\u3068\u3044\u3046\u30ad\u30e5\u30fc\u3092\u7a4d\u3080\u3068 EC2 \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8d77\u52d5\u30fb\u505c\u6b62\u3059\u308b\n- \u2191 \u7528\u306e\u30d7\u30ed\u30bb\u30b9\u306f daemon-spawn \u3067\u5e38\u99d0\u5316\n- EC2 \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u8d77\u52d5\u30fb\u505c\u6b62\u306f AWS CLI \u3092\u5229\u7528\u3057\u3066\u5b9f\u73fe\u3059\u308b\n\n## AWS CLI \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\n$ sudo easy_install pip \n$ sudo pip install awscli \n$ aws configure --profile my_profile\nAWS Access Key ID [None]: AKIAYB7....\nAWS Secret Access Key []: q-SLuyqi+oV....\nDefault region name []: ap-northeast-1\nDefault output format []: \u203b\u4f55\u3082\u5165\u529b\u305b\u305a Enter\n\n\u203b\u4e8b\u524d\u306b EC2 \u64cd\u4f5c\u7528\u306e IAM \u3092\u4f5c\u6210\u3057\u3066\u3001Access Key\uff0fSecret Access Key \u3092\u6255\u3044\u51fa\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n```\n\u53c2\u8003\uff1a[\u7b2c1\u56de\u3000AWS CLI\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff1a\u30a4\u30f3\u30d5\u30e9\u5c4b\u306eAWS\u306f\u3058\u3081\u305f\u65e5\u8a18\u2500GUI\u3092\u6368\u3066\u3088](http://gihyo.jp/admin/serial/01/awscli_diary/0001)\n\n## \u5b9f\u88c5\n\n```ruby:app/workers/instaces_manager.rb\nEC2_REGION = Settings.aws_ec2.region\nCLI_PROFILE = Settings.aws_ec2.profile\n\nclass InstancesManager\n  # \u51e6\u7406\u7a2e\u5225\n  RUN_INSTANCES      = 1    # \u8d77\u52d5\n  TERMINATE_INSTANCE = 100  # \u505c\u6b62\n\n  @queue = Settings.resque.manager.queue\n\n  def self.perform(processing_type, options = {})\n    begin\n      logger = Logger.new(File.join(Rails.root, Settings.resque.manager.log_file))\n\n      # \u51e6\u7406\u958b\u59cb\n      start_time = Time.now\n      logger.info(\"[PID:#{$$}]: instances_manager start at: #{start_time}\")\n\n      # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u30fb\u505c\u6b62\n      begin\n        case processing_type\n          when RUN_INSTANCES      then run_instances(options['count'])\n          when TERMINATE_INSTANCE then terminate_instance(options['instance_id'])\n        end\n        logger.info(\"[PID:#{$$}]: success: processing_type=#{processing_type}, options=#{options}\")\n      rescue =>e\n        logger.error(\"[PID:#{$$}]: failure: processing_type=#{processing_type}, options=#{options}\")\n        logger.error(e)\n      end\n\n      # \u51e6\u7406\u7d42\u4e86\n      finished_time = Time.now\n      logger.info(\"[PID:#{$$}]: instances_manager finished: #{start_time}(from) - #{finished_time}(to): #{finished_time - start_time}(processing time)\")\n    rescue =>e\n      logger.error(e)\n    end\n  end\n\n  def self.run_instances(count)\n    image_id            = Settings.aws_ec2.xxx.image_id\n    instance_type       = Settings.aws_ec2.xxx.instance_type\n    key_name            = Settings.aws_ec2.xxx.key_name\n    security_group_name = Settings.aws_ec2.xxx.security_group_name\n\n    command = [\n        'aws ec2 run-instances',\n        '--image-id', image_id,\n        '--count', count,\n        '--instance-type', instance_type,\n        '--key-name', key_name,\n        '--security-groups', security_group_name,\n        '--region', EC2_REGION,\n        '--profile', CLI_PROFILE\n    ].join(' ')\n    IO.popen(command){}\n  end\n\n  def self.terminate_instance(instance_id)\n    command = [\n        'aws ec2 terminate-instances',\n        '--instance-ids', instance_id,\n        '--region', EC2_REGION,\n        '--profile', CLI_PROFILE\n    ].join(' ')\n    IO.popen(command){}\n  end\nend\n```\n\n```ruby:bin/instances_manage_worker.rb\n#!/usr/bin/env ruby\nrequire File.expand_path('../../config/application', __FILE__)\nRails.application.require_environment!\n\nclass InstancesManageDaemon < DaemonSpawn::Base\n  def start(args)\n    @worker = Resque::Worker.new(Settings.resque.manager.queue)\n    @worker.work\n  end\n\n  def stop\n    # \u51e6\u7406\u4e2d\u306ejob\u3092\u5b8c\u4e86\u5f8c\u3001shutdown\u3059\u308b\n    @worker.try(:shutdown)\n  end\nend\n\nInstancesManageDaemon.spawn!({\n  :working_dir => Rails.root,\n  :pid_file => File.join(Rails.root, Settings.resque.manager.pid_file),\n  :log_file => File.join(Rails.root, Settings.resque.manager.log_file),\n  :sync_log => true,\n  :singleton => true\n})\n```\n\n### \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8d77\u52d5\u3059\u308b\n\n```ruby\nResque.enqueue(InstancesManager, InstancesManager::RUN_INSTANCES, count: 5)\n```\n\n### \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u505c\u6b62\u3059\u308b\n\n```ruby\nResque.enqueue(InstancesManager, InstancesManager::TERMINATE_INSTANCE, instance_id: my_instance_id)\n\ndef my_instance_id\n  command = '/usr/bin/curl \"http://169.254.169.254/latest/meta-data/instance-id\"'\n  IO.popen(command){|io| io.gets}\nend\n```\n", "tags": ["AWS", "aws-cli", "Resque"]}