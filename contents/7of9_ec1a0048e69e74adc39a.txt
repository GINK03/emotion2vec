{"tags": ["zybo", "VHDL"], "context": "\n\u52d5\u4f5c\u74b0\u5883\nVivado 2015.4 on Windows 8.1 pro (64bit)\n\n\nhttp://zynqhowto.blogspot.jp/2014/03/zynq-how-to.html\n\u306eLab1.pdf\u3092\u53c2\u8003\u306bClock Divider\u306eVHDL\u30d5\u30a1\u30a4\u30eb\u3068\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u3092\u8a66\u3057\u3066\u3044\u308b\u3002\n\nUniClkDiv.vhd\nVHDL\u5b9f\u88c5\u306e\u8a18\u8ff0(UniClkDiv.vhd)\u306fBehavioral\u306eend;\u304c\u629c\u3051\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u306e\u307e\u307e\u306e\u5b9f\u88c5\u3060\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6700\u5f8c\u306e\u884c(end;)\u3092\u8ffd\u52a0\u3057\u305f\u3002\n\nUniClkDiv.vhd\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nentity clk_gen is\nport(   Clk : in std_logic;\n        Clk_mod : out std_logic\n        );\nend clk_gen;\n\narchitecture Behavioral of clk_gen is\n    signal counter : integer := 0;\n    constant divide : integer := 100;\nbegin\n    process(Clk)\n    begin\n        if( rising_edge(Clk) ) then\n            if(counter < divide/2 - 1) then\n                counter <= counter + 1;\n                Clk_mod <= '1';\n            elsif(counter < divide - 1) then\n                counter <= counter + 1;\n                Clk_mod <= '0';\n            else\n                Clk_mod <= '1';\n                counter <= 0;\n            end if;\n        end if;\n    end process;   \nend;\n\n\n\n\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\n\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u5074\u306f\u753b\u50cf\u306e\u30bd\u30fc\u30b9\u305d\u306e\u307e\u307e\u3067\u3082\u554f\u984c\u306a\u304b\u3063\u305f\u3002\n\ntestbench.tb\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nentity testbench IS\nend testbench;\n\narchitecture behavior of testbench IS\n    signal clk, clk_mod : std_logic;\n    constant clk_period : time := 10 ns;\nbegin\n-- Component Instantiation\nuut: entity work.clk_gen PORT MAP (\n    clk => clk,\n    clk_mod => clk_mod);\nclk_process : process -- generate a 100 MHz Clock.\nbegin\n    clk <= '0';\n    wait for clk_period/2; -- for 5 ns signal is '0'.\n    clk <= '1';\n    wait for clk_period/2; -- for next 5 ns signal is '1'.\nend process;\nend;\n\n\n\n\u5b9f\u884c\nRun Simulation\u3092\u5b9f\u884c\u3057\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n5ns\u3054\u3068\u306bH/L\u5207\u66ff\u3048\u306eclk\u306b\u5bfe\u3057\u3066clk_mod\u306f100\u5206\u5468\u3057\u3066500ns\u306e\u3068\u3053\u308d\u3067H/L\u5207\u66ff\u3048\u3057\u3066\u3044\u308b\u306e\u3067\u3001Clock Divider\u3068\u3057\u3066\u52d5\u4f5c\u3057\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nVivado 2015.4 on Windows 8.1 pro (64bit)\n```\n\nhttp://zynqhowto.blogspot.jp/2014/03/zynq-how-to.html\n\u306eLab1.pdf\u3092\u53c2\u8003\u306bClock Divider\u306eVHDL\u30d5\u30a1\u30a4\u30eb\u3068\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u3092\u8a66\u3057\u3066\u3044\u308b\u3002\n\n### UniClkDiv.vhd\n\nVHDL\u5b9f\u88c5\u306e\u8a18\u8ff0(UniClkDiv.vhd)\u306fBehavioral\u306eend;\u304c\u629c\u3051\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u306e\u307e\u307e\u306e\u5b9f\u88c5\u3060\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6700\u5f8c\u306e\u884c(`end;`)\u3092\u8ffd\u52a0\u3057\u305f\u3002\n\n```UniClkDiv.vhd\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nentity clk_gen is\nport(   Clk : in std_logic;\n        Clk_mod : out std_logic\n        );\nend clk_gen;\n\narchitecture Behavioral of clk_gen is\n    signal counter : integer := 0;\n    constant divide : integer := 100;\nbegin\n    process(Clk)\n    begin\n        if( rising_edge(Clk) ) then\n            if(counter < divide/2 - 1) then\n                counter <= counter + 1;\n                Clk_mod <= '1';\n            elsif(counter < divide - 1) then\n                counter <= counter + 1;\n                Clk_mod <= '0';\n            else\n                Clk_mod <= '1';\n                counter <= 0;\n            end if;\n        end if;\n    end process;   \nend;\n```\n\n### \u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\n\n\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u5074\u306f\u753b\u50cf\u306e\u30bd\u30fc\u30b9\u305d\u306e\u307e\u307e\u3067\u3082\u554f\u984c\u306a\u304b\u3063\u305f\u3002\n\n```vhdl:testbench.tb\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nentity testbench IS\nend testbench;\n\narchitecture behavior of testbench IS\n    signal clk, clk_mod : std_logic;\n    constant clk_period : time := 10 ns;\nbegin\n-- Component Instantiation\nuut: entity work.clk_gen PORT MAP (\n    clk => clk,\n    clk_mod => clk_mod);\nclk_process : process -- generate a 100 MHz Clock.\nbegin\n    clk <= '0';\n    wait for clk_period/2; -- for 5 ns signal is '0'.\n    clk <= '1';\n    wait for clk_period/2; -- for next 5 ns signal is '1'.\nend process;\nend;\n```\n\n### \u5b9f\u884c\n\nRun Simulation\u3092\u5b9f\u884c\u3057\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/f03ec276-7449-5db9-8025-187cf530ff62.png)\n\n5ns\u3054\u3068\u306bH/L\u5207\u66ff\u3048\u306eclk\u306b\u5bfe\u3057\u3066clk_mod\u306f100\u5206\u5468\u3057\u3066500ns\u306e\u3068\u3053\u308d\u3067H/L\u5207\u66ff\u3048\u3057\u3066\u3044\u308b\u306e\u3067\u3001Clock Divider\u3068\u3057\u3066\u52d5\u4f5c\u3057\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\n\n"}