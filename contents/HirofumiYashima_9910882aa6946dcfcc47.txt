{"context": " More than 1 year has passed since last update.\n\n\u4ee5\u4e0b\u306e\u6559\u79d1\u66f8\u306e pp.62\uff5e65 \u6240\u53ce\u306e Java\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3001\u300c\u3079\u304d\u4e57\u6cd5\u300d\u306e\u8a08\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u624b\u9806\u3092\u5fe0\u5b9f\u306b\u5b9f\u88c5\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\u3002\n\n\n\u3053\u306eJava\u306e\u30b3\u30fc\u30c9\u3092\u3001Python\u306b\u7f6e\u304d\u63db\u3048\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n\u8d64\u9593\u4e16\u7d00\uff08\u8457\uff09\u300eJava\u306b\u3088\u308b\u5fdc\u7528\u6570\u5024\u8a08\u7b97\u300f\uff08\u6280\u5831\u5802\u51fa\u7248\uff09\n\n\n\n\uff08 \u8a08\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u3001\u4e0a\u8a18\u6559\u79d1\u66f8\u306e\u307b\u304b\u3001\u4ee5\u4e0b\u3082\u53c2\u8003 \uff09\n\n\nT.Kouya's Webpage \u7b2c11\u7ae0 \u884c\u5217\u306e\u56fa\u6709\u5024\u30fb\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\n\n\u83c5\u6cbc\u7814\u7a76\u5ba4\uff08\u9759\u5ca1\u7406\u5de5\u79d1\u5927\u5b66\uff09\u300c\u6570\u5024\u8a08\u7b97\u300d\n\n\n\n\n\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\n\neigen_value.py\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math, copy\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \n\u3053\u308c\u304b\u3089\u51e6\u7406\u3092\u884c\u3046\u884c\u5217\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u6b63\u65b9\u884c\u5217\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u683c\u7d0d\u5834\u6240\u3092\u3001\u7d76\u5bfe\u30d1\u30b9\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\"\n\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n\n    file_path = raw_input()\n\n    # \u30e6\u30fc\u30b6\u304c\u6307\u5b9a\u3057\u305f\u7d76\u5bfe\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u884c\u5217\u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n    (dim, matrix) = read_matrix_data(file_path)\n\n    # \u5143\u306ematrix\u3092\u58ca\u3055\u306a\u3044\u3088\u3046\u306bcopy\u3059\u308b\n    A = copy.deepcopy(matrix) \n\n    # \u7e70\u308a\u8fd4\u3057\u56de\u6570\u306e\u6307\u793a\u3092\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u308b\n    iteration_time = receive_iteration_time_instruction()\n\n    print(\"\\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u4ee5\u4e0b\u306e\u884c\u5217\u306b\u5bfe\u3057\u3066\u3001\u3079\u304d\u5e38\u6cd5\u3092{iteration_time}\u56de\u3000\u5b9f\u884c\u3057\u3066\u3001\u6700\u5927\u56fa\u6709\u5024\u3092\u6c42\u3081\u307e\u3059\u3002\\n\\n {matrix}\"\\\n          .format(iteration_time=iteration_time, matrix=np.array(A)))\n\n    # \u8aad\u307f\u8fbc\u3080\u884c\u5217\u306f\u3001\u884c\u6570\u3068\u5217\u6570\u304c\u7b49\u3057\u3044\u6b63\u65b9\u884c\u5217\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u884c\u6570n\u3092\u53d6\u5f97\n    n = dim \n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u3092\u3082\u3068\u306b\u3001\u4e09\u89d2\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u5ba3\u8a00\n    X = list(np.ones(n))\n    Y = list(np.zeros(n))\n\n    # \u3079\u304d\u4e57\u6cd5 \u3092\u5b9f\u884c \n    max = power_method_max(n, X)\n\n    #\u7d50\u679c\u3092\u51fa\u529b\n    print(\"\\n\\n\")\n    print(\"[\u8a08\u7b97\u56de\u6570]  Rayleigh\u5546\u3000\u6700\u5927\u56fa\u6709\u5024\")\n\n    for i in range(iteration_time):\n        power_method_y(n, X, Y, max)\n        power_method_x(n, A, X, Y)\n        rayleigh = power_method_rayleigh(n, X, Y)\n        max = power_method_max(n, X)\n        print(\"[{cnt}]\\t{rayleigh}\\t{max}\".format(cnt=(i+1), rayleigh=rayleigh, max=max)) \n\n\n    print(\"\\n\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\")\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### \u884c\u5217\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9\ndef read_matrix_data(file_path):\n    dim = 0\n    matrix = []\n    num = []\n\n    for line in open(file_path):\n        row = line.split(' ') #\u884c\u5217\u30c7\u30fc\u30bf\u3092\uff11\u884c\u305a\u3064\u8aad\u307f\u8fbc\u307f\n        for element in row:\n            num.append(float(element)) #\u884c\u5217\u30c7\u30fc\u30bf\u306e\u3042\u308b\uff11\u884c\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u8fbc\u307f\n        matrix.append(num) #\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u300cmatrix\u300d\u306e\u8981\u7d20\u306b\u3001\u884c\u5217\u30c7\u30fc\u30bf\u306e\uff11\u884c\u3092append\uff08\uff12\u6b21\u5143\u914d\u5217\u306e\u751f\u6210\uff09\n        num = []\n        dim += 1\n\n    return (dim, matrix) #\uff12\u6b21\u5143\u914d\u5217 (list\u3092\u8981\u7d20\u306b\u3082\u3064list) \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092return\n\n\n#####\ndef receive_iteration_time_instruction():\n    print(\"\\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u308f\u3059\u7e70\u308a\u8fd4\u3057\u56de\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n    iteration_time = int(raw_input())\n    return iteration_time\n\n\n\n##### \ndef power_method_max(n, X):\n    max = 0\n    max_num = 0\n\n    for cnt in range(n):\n        if(math.fabs(X[cnt]) > max):\n            max = math.fabs(X[cnt])\n            max_num = cnt\n\n    return X[max_num]\n\n#####\ndef power_method_y(n, X, Y, max):\n    for cnt in range(n):\n        Y[cnt] = X[cnt] / max\n\n#####\ndef power_method_x(n, A, X, Y):\n    for cnt1 in range(n):\n        X[cnt1] = 0\n        for cnt2 in range(n):\n            X[cnt1] += A[cnt1][cnt2]*Y[cnt2]\n\n#####\ndef power_method_rayleigh(n, X, Y):\n    temp1 = 0\n    temp2 = 0\n\n    for cnt in range(n):\n        temp1 += X[cnt]*Y[cnt]\n        temp2 += Y[cnt]*Y[cnt]\n\n    return (temp1 / temp2)\n\n\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n\n\n\n\n\uff08 \u5b9f\u884c \uff09\n\n\nUbuntu Terminal\nls data.txt\ncat data.txt\n\npython eigen_value.py\n\n\n\n\uff08\u5b9f\u884c\u753b\u9762\uff09\n\n\n\n\n\uff08\u7d50\u679c\uff09\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5b9f\u884c\u56de\u6570 15\u56de\u3067\u307f\u308b\u9650\u308a\u3001\u6700\u5927\u56fa\u6709\u5024\u306f\u30015\u306b\u53ce\u675f\u3057\u3066\u3044\u308b\u3002\n\n\uff08\u7d50\u679c\u306e\u691c\u8a3c\uff09\n\n\nNunpy / Scipy \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u56fa\u6709\u5024\u6f14\u7b97\u30e1\u30bd\u30c3\u30c9\u306e\u6f14\u7b97\u7d50\u679c\u3068\u7a81\u5408\u305b\n\n\nPython 2.7\nimport scipy\nimport scipy.linalg\nfrom numpy import *\n\nA = mat([[1, 8], [2, 1]])\nprint(A)\n\nlinalg.eig(A)\n\nimport pprint\npprint.pprint(linalg.eig(A))\n\n\n\n\u56fa\u6709\u5024 5 \u3068 -3 \u306e\u3046\u3061\u3001\u7d76\u5bfe\u5024\u304c\u6700\u5927\u306a\u306e\u306f\u3001\uff15\u3067\u3042\u308b\uff08\u6574\u5408\u7684\uff01\uff09\n\n\n\n\n\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3082\u5b9f\u884c\u3057\u3066\u307f\u305f\uff08\u7d50\u679c\u306f\u540c\u3058\uff09\u3002\n\n\nHatena Blog Numpy\u306e\u56fa\u6709\u5024\u3068\u56fa\u6709\u30d9\u30af\u30c8\u30eb\n\n\nPython 2.7\nimport numpy as np\n\nA = np.array([[1, 8], [2, 1]])\nprint(A)\npprint.pprint(A)\n\nla, v = np.linalg.eig(A)\nla, v\n\npprint.pprint(la)\npprint.pprint(v)\n\nindex = np.where(la==max(la))[0][0]\nv[:, index]\n\nprint(max(la))\n\n\n\n\n\n\u305d\u306e\u4ed6\u3001\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u30b3\u30fc\u30c9\n\n\u3086\u3068\u308a\u306e\u96d1\u8a18\u5e33 \u300cpython \u3067 \u3079\u304d\u4e57\u6cd5\u300d\n\n\n\u4ee5\u4e0b\u306e\u8aa4\u5dee\u5224\u5b9a\u3092\u542b\u3093\u3060\u30b3\u30fc\u30c9\u3068\u3001\u7701\u3044\u305f\u30b3\u30fc\u30c9\u306e\u4e21\u8005\u304c\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u3002\n\n\nif np.abs(koyuuchi[0] - koyuuchi[1]) < a_err + r_err*(np.abs(koyuuchi[0]) + np.abs(koyuuchi[1])): return koyuuchi[1][0][0], i\n\n\n\u305f\u3060\u3057\u3001\u4ee5\u4e0b\u306f\u8aa4\u308a\n\n*\uff08\u8aa4\uff09\n\nreturn koyuuchi[0][0]\n\n*\uff08\u4ee5\u4e0b\u304c\u6b63\u3057\u3044\uff09\n\n\u203bkoyuuchi\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\uff12\u6b21\u5143\u914d\u5217\u3067\u306f\u306a\u304f\u3001\u30b9\u30ab\u30e9\u30fc\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\nreturn koyuuchi\n\n\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u62dd\u501f\u3057\u305f\u300c\u3079\u304d\u4e57\u6cd5\u300d\u5b9f\u88c5\u30e1\u30bd\u30c3\u30c9\u3092\u7d44\u307f\u8fbc\u3093\u3060 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\neigen_value_2.py\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math, copy\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \n\u3053\u308c\u304b\u3089\u51e6\u7406\u3092\u884c\u3046\u884c\u5217\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u6b63\u65b9\u884c\u5217\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u683c\u7d0d\u5834\u6240\u3092\u3001\u7d76\u5bfe\u30d1\u30b9\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\"\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n\n    file_path = raw_input()\n\n    # \u30e6\u30fc\u30b6\u304c\u6307\u5b9a\u3057\u305f\u7d76\u5bfe\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u884c\u5217\u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n    (dim, matrix) = read_matrix_data(file_path)\n\n    # \u5143\u306ematrix\u3092\u58ca\u3055\u306a\u3044\u3088\u3046\u306bcopy\u3059\u308b\n    tmp = copy.deepcopy(matrix) \n    A = np.array(tmp)\n\n    # \u7e70\u308a\u8fd4\u3057\u56de\u6570\u306e\u6307\u793a\u3092\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u308b\n    iteration_time = receive_iteration_time_instruction()\n\n    print(\"\\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u4ee5\u4e0b\u306e\u884c\u5217\u306b\u5bfe\u3057\u3066\u3001\u3079\u304d\u5e38\u6cd5\u3092{iteration_time}\u56de\u3000\u5b9f\u884c\u3057\u3066\u3001\u6700\u5927\u56fa\u6709\u5024\u3092\u6c42\u3081\u307e\u3059\u3002\\n\\n {matrix}\"\\\n          .format(iteration_time=iteration_time, matrix=np.array(A)))\n\n    # \u8aad\u307f\u8fbc\u3080\u884c\u5217\u306f\u3001\u884c\u6570\u3068\u5217\u6570\u304c\u7b49\u3057\u3044\u6b63\u65b9\u884c\u5217\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u884c\u6570n\u3092\u53d6\u5f97\n    n = dim \n\n    # \u884c\u5217X\u3092\u521d\u671f\u5316\u5ba3\u8a00\uff08\u8981\u7d20\uff1a\u3059\u3079\u3066\uff11\uff09\n    X = np.ones(n)\n\n    # \u3079\u304d\u4e57\u6cd5 \u3092\u5b9f\u884c \n    eigen_value = power_method(A, X, iteration_time)\n\n    #\u7d50\u679c\u3092\u51fa\u529b\n    print(\"\\n\")\n    print(\"\\n\u6700\u5927\u56fa\u6709\u5024 (\u3079\u304d\u4e57\u6cd5\uff09: {eigen_value}\\n\\n\".format(eigen_value=eigen_value))\n    print(\"\u6700\u5927\u56fa\u6709\u5024 (Numpy) : {numpy_caliculated}\\n\".format(numpy_caliculated = np.max(np.linalg.eig(A)[0])))\n\n    print(\"\\n\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\\n\\n\")\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### \u884c\u5217\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9\ndef read_matrix_data(file_path):\n    dim = 0\n    matrix = []\n    num = []\n\n    for line in open(file_path):\n        row = line.split(' ') #\u884c\u5217\u30c7\u30fc\u30bf\u3092\uff11\u884c\u305a\u3064\u8aad\u307f\u8fbc\u307f\n        for element in row:\n            num.append(float(element)) #\u884c\u5217\u30c7\u30fc\u30bf\u306e\u3042\u308b\uff11\u884c\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u8fbc\u307f\n        matrix.append(num) #\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u300cmatrix\u300d\u306e\u8981\u7d20\u306b\u3001\u884c\u5217\u30c7\u30fc\u30bf\u306e\uff11\u884c\u3092append\uff08\uff12\u6b21\u5143\u914d\u5217\u306e\u751f\u6210\uff09\n        num = []\n        dim += 1\n\n    return (dim, matrix) #\uff12\u6b21\u5143\u914d\u5217 (list\u3092\u8981\u7d20\u306b\u3082\u3064list) \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092return\n\n\n#####\ndef receive_iteration_time_instruction():\n    print(\"\\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u308f\u3059\u7e70\u308a\u8fd4\u3057\u56de\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n    iteration_time = int(raw_input())\n    return iteration_time\n\n\n\n##### \ndef power_method(A, X, iteration_time):\n    q = [X, 0]\n\n    for cnt in xrange(iteration_time):\n        q[0] = q[0] / np.linalg.norm(q[0]) #preventing overflow / underflow\n        q[1] = np.dot(A, q[0])\n        eigen_value = np.dot(q[1].T, q[1]) / np.dot(q[1].T, q[0])\n\n        #preparation for next time in the loop \n        q[0] = q[1]\n\n    return eigen_value\n\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n\n\n\n\uff08\u5b9f\u884c\u753b\u9762\uff09\n\n\n\n\uff08\u7d50\u679c\uff09\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5b9f\u884c\u56de\u6570 15\u56de\u3067\u307f\u308b\u9650\u308a\u3001\u6700\u5927\u56fa\u6709\u5024\u306f\u30015\u306b\u53ce\u675f\u3057\u3066\u3044\u308b\u3002\n##### __\u4ee5\u4e0b\u306e\u6559\u79d1\u66f8\u306e pp.62\uff5e65 \u6240\u53ce\u306e Java\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3001\u300c\u3079\u304d\u4e57\u6cd5\u300d\u306e\u8a08\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u624b\u9806\u3092\u5fe0\u5b9f\u306b\u5b9f\u88c5\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\u3002__\n\n##### __\u3053\u306eJava\u306e\u30b3\u30fc\u30c9\u3092\u3001Python\u306b\u7f6e\u304d\u63db\u3048\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002__\n\n* __[\u8d64\u9593\u4e16\u7d00\uff08\u8457\uff09\u300eJava\u306b\u3088\u308b\u5fdc\u7528\u6570\u5024\u8a08\u7b97\u300f\uff08\u6280\u5831\u5802\u51fa\u7248\uff09](http://gihodobooks.jp/book/3334-4.html)__\n\n![3334-4.jpg](https://qiita-image-store.s3.amazonaws.com/0/43487/92314ec7-c10a-1bd0-56c9-a4afaadaead6.jpeg)\n\n##### __\uff08 \u8a08\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u3001\u4e0a\u8a18\u6559\u79d1\u66f8\u306e\u307b\u304b\u3001\u4ee5\u4e0b\u3082\u53c2\u8003 \uff09__\n* [T.Kouya's Webpage \u7b2c11\u7ae0 \u884c\u5217\u306e\u56fa\u6709\u5024\u30fb\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u8a08\u7b97](http://na-inet.jp/nasoft/chap11.pdf)\n\n* [\u83c5\u6cbc\u7814\u7a76\u5ba4\uff08\u9759\u5ca1\u7406\u5de5\u79d1\u5927\u5b66\uff09\u300c\u6570\u5024\u8a08\u7b97\u300d](http://www.sist.ac.jp/~suganuma/kougi/other_lecture/SE/num/num.htm#3.3)\n___\n\n\n### \u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\n\n```{Python:eigen_value.py}\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math, copy\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \n\u3053\u308c\u304b\u3089\u51e6\u7406\u3092\u884c\u3046\u884c\u5217\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u6b63\u65b9\u884c\u5217\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u683c\u7d0d\u5834\u6240\u3092\u3001\u7d76\u5bfe\u30d1\u30b9\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\"\n\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n\n    file_path = raw_input()\n\n    # \u30e6\u30fc\u30b6\u304c\u6307\u5b9a\u3057\u305f\u7d76\u5bfe\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u884c\u5217\u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n    (dim, matrix) = read_matrix_data(file_path)\n\n    # \u5143\u306ematrix\u3092\u58ca\u3055\u306a\u3044\u3088\u3046\u306bcopy\u3059\u308b\n    A = copy.deepcopy(matrix) \n\n    # \u7e70\u308a\u8fd4\u3057\u56de\u6570\u306e\u6307\u793a\u3092\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u308b\n    iteration_time = receive_iteration_time_instruction()\n\n    print(\"\\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u4ee5\u4e0b\u306e\u884c\u5217\u306b\u5bfe\u3057\u3066\u3001\u3079\u304d\u5e38\u6cd5\u3092{iteration_time}\u56de\u3000\u5b9f\u884c\u3057\u3066\u3001\u6700\u5927\u56fa\u6709\u5024\u3092\u6c42\u3081\u307e\u3059\u3002\\n\\n {matrix}\"\\\n          .format(iteration_time=iteration_time, matrix=np.array(A)))\n\n    # \u8aad\u307f\u8fbc\u3080\u884c\u5217\u306f\u3001\u884c\u6570\u3068\u5217\u6570\u304c\u7b49\u3057\u3044\u6b63\u65b9\u884c\u5217\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u884c\u6570n\u3092\u53d6\u5f97\n    n = dim \n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u3092\u3082\u3068\u306b\u3001\u4e09\u89d2\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u5ba3\u8a00\n    X = list(np.ones(n))\n    Y = list(np.zeros(n))\n\n    # \u3079\u304d\u4e57\u6cd5 \u3092\u5b9f\u884c \n    max = power_method_max(n, X)\n\n    #\u7d50\u679c\u3092\u51fa\u529b\n    print(\"\\n\\n\")\n    print(\"[\u8a08\u7b97\u56de\u6570]  Rayleigh\u5546\u3000\u6700\u5927\u56fa\u6709\u5024\")\n    \n    for i in range(iteration_time):\n        power_method_y(n, X, Y, max)\n        power_method_x(n, A, X, Y)\n        rayleigh = power_method_rayleigh(n, X, Y)\n        max = power_method_max(n, X)\n        print(\"[{cnt}]\\t{rayleigh}\\t{max}\".format(cnt=(i+1), rayleigh=rayleigh, max=max)) \n\n\n    print(\"\\n\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\")\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### \u884c\u5217\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9\ndef read_matrix_data(file_path):\n    dim = 0\n    matrix = []\n    num = []\n\n    for line in open(file_path):\n        row = line.split(' ') #\u884c\u5217\u30c7\u30fc\u30bf\u3092\uff11\u884c\u305a\u3064\u8aad\u307f\u8fbc\u307f\n        for element in row:\n            num.append(float(element)) #\u884c\u5217\u30c7\u30fc\u30bf\u306e\u3042\u308b\uff11\u884c\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u8fbc\u307f\n        matrix.append(num) #\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u300cmatrix\u300d\u306e\u8981\u7d20\u306b\u3001\u884c\u5217\u30c7\u30fc\u30bf\u306e\uff11\u884c\u3092append\uff08\uff12\u6b21\u5143\u914d\u5217\u306e\u751f\u6210\uff09\n        num = []\n        dim += 1\n\n    return (dim, matrix) #\uff12\u6b21\u5143\u914d\u5217 (list\u3092\u8981\u7d20\u306b\u3082\u3064list) \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092return\n\n\n#####\ndef receive_iteration_time_instruction():\n    print(\"\\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u308f\u3059\u7e70\u308a\u8fd4\u3057\u56de\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n    iteration_time = int(raw_input())\n    return iteration_time\n\n\n\n##### \ndef power_method_max(n, X):\n    max = 0\n    max_num = 0\n    \n    for cnt in range(n):\n        if(math.fabs(X[cnt]) > max):\n            max = math.fabs(X[cnt])\n            max_num = cnt\n\n    return X[max_num]\n\n#####\ndef power_method_y(n, X, Y, max):\n    for cnt in range(n):\n        Y[cnt] = X[cnt] / max\n\n#####\ndef power_method_x(n, A, X, Y):\n    for cnt1 in range(n):\n        X[cnt1] = 0\n        for cnt2 in range(n):\n            X[cnt1] += A[cnt1][cnt2]*Y[cnt2]\n\n#####\ndef power_method_rayleigh(n, X, Y):\n    temp1 = 0\n    temp2 = 0\n    \n    for cnt in range(n):\n        temp1 += X[cnt]*Y[cnt]\n        temp2 += Y[cnt]*Y[cnt]\n\n    return (temp1 / temp2)\n\n\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n```\n\n___\n\n### __\uff08 \u5b9f\u884c \uff09__\n\n```{UNIX:Ubuntu Terminal}\nls data.txt\ncat data.txt\n\npython eigen_value.py\n```\n\n##### **\uff08\u5b9f\u884c\u753b\u9762\uff09**\n![pic_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/03f69b08-d9ae-614d-3f6a-41daa1db6b84.png)\n\n___\n\n\n### __\uff08\u7d50\u679c\uff09__\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5b9f\u884c\u56de\u6570 15\u56de\u3067\u307f\u308b\u9650\u308a\u3001\u6700\u5927\u56fa\u6709\u5024\u306f\u30015\u306b\u53ce\u675f\u3057\u3066\u3044\u308b\u3002\n\n### __\uff08\u7d50\u679c\u306e\u691c\u8a3c\uff09__\n#### __Nunpy / Scipy \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u56fa\u6709\u5024\u6f14\u7b97\u30e1\u30bd\u30c3\u30c9\u306e\u6f14\u7b97\u7d50\u679c\u3068\u7a81\u5408\u305b__\n\n\n```{Python:Python 2.7}\nimport scipy\nimport scipy.linalg\nfrom numpy import *\n\nA = mat([[1, 8], [2, 1]])\nprint(A)\n\nlinalg.eig(A)\n\nimport pprint\npprint.pprint(linalg.eig(A))\n```\n\n#####__\u56fa\u6709\u5024 5 \u3068 -3 \u306e\u3046\u3061\u3001\u7d76\u5bfe\u5024\u304c\u6700\u5927\u306a\u306e\u306f\u3001\uff15\u3067\u3042\u308b\uff08\u6574\u5408\u7684\uff01\uff09__\n\n![pic_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/cb383cfb-e34b-28df-6d84-38b475f6a6f1.png)\n\n___\n\n###__\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3082\u5b9f\u884c\u3057\u3066\u307f\u305f\uff08\u7d50\u679c\u306f\u540c\u3058\uff09\u3002__\n\n* [Hatena Blog Numpy\u306e\u56fa\u6709\u5024\u3068\u56fa\u6709\u30d9\u30af\u30c8\u30eb](http://ksmzn.hatenablog.com/entry/2014/02/16/004921)\n\n```{Python:Python 2.7}\nimport numpy as np\n\nA = np.array([[1, 8], [2, 1]])\nprint(A)\npprint.pprint(A)\n\nla, v = np.linalg.eig(A)\nla, v\n\npprint.pprint(la)\npprint.pprint(v)\n\nindex = np.where(la==max(la))[0][0]\nv[:, index]\n\nprint(max(la))\n```\n\n![pic_3.png](https://qiita-image-store.s3.amazonaws.com/0/43487/c97097bb-53e4-7df7-f4a2-a4f28fa39317.png)\n\n\n___\n\n\n### \u305d\u306e\u4ed6\u3001\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u30b3\u30fc\u30c9\n\n* __[\u3086\u3068\u308a\u306e\u96d1\u8a18\u5e33 \u300cpython \u3067 \u3079\u304d\u4e57\u6cd5\u300d](http://yutorialudra.blogspot.jp/2013/03/python.html)__\n\n\n##### __\u4ee5\u4e0b\u306e\u8aa4\u5dee\u5224\u5b9a\u3092\u542b\u3093\u3060\u30b3\u30fc\u30c9\u3068\u3001\u7701\u3044\u305f\u30b3\u30fc\u30c9\u306e\u4e21\u8005\u304c\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u3002__\n\n>\n if np.abs(koyuuchi[0] - koyuuchi[1]) < a_err + r_err*(np.abs(koyuuchi[0]) + np.abs(koyuuchi[1])): return koyuuchi[1][0][0], i\n\n\n##### **\u305f\u3060\u3057\u3001\u4ee5\u4e0b\u306f\u8aa4\u308a**\n\n*__\uff08\u8aa4\uff09__\n> return koyuuchi[0][0]\n\n*__\uff08\u4ee5\u4e0b\u304c\u6b63\u3057\u3044\uff09__\n#####\u203bkoyuuchi\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\uff12\u6b21\u5143\u914d\u5217\u3067\u306f\u306a\u304f\u3001\u30b9\u30ab\u30e9\u30fc\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\n\n_return koyuuchi_\n\n\n#### __\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u62dd\u501f\u3057\u305f\u300c\u3079\u304d\u4e57\u6cd5\u300d\u5b9f\u88c5\u30e1\u30bd\u30c3\u30c9\u3092\u7d44\u307f\u8fbc\u3093\u3060 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002__\n\n```{Python:eigen_value_2.py}\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math, copy\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \n\u3053\u308c\u304b\u3089\u51e6\u7406\u3092\u884c\u3046\u884c\u5217\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u6b63\u65b9\u884c\u5217\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u683c\u7d0d\u5834\u6240\u3092\u3001\u7d76\u5bfe\u30d1\u30b9\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\"\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n\n    file_path = raw_input()\n\n    # \u30e6\u30fc\u30b6\u304c\u6307\u5b9a\u3057\u305f\u7d76\u5bfe\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u884c\u5217\u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n    (dim, matrix) = read_matrix_data(file_path)\n\n    # \u5143\u306ematrix\u3092\u58ca\u3055\u306a\u3044\u3088\u3046\u306bcopy\u3059\u308b\n    tmp = copy.deepcopy(matrix) \n    A = np.array(tmp)\n\n    # \u7e70\u308a\u8fd4\u3057\u56de\u6570\u306e\u6307\u793a\u3092\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u308b\n    iteration_time = receive_iteration_time_instruction()\n\n    print(\"\\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u4ee5\u4e0b\u306e\u884c\u5217\u306b\u5bfe\u3057\u3066\u3001\u3079\u304d\u5e38\u6cd5\u3092{iteration_time}\u56de\u3000\u5b9f\u884c\u3057\u3066\u3001\u6700\u5927\u56fa\u6709\u5024\u3092\u6c42\u3081\u307e\u3059\u3002\\n\\n {matrix}\"\\\n          .format(iteration_time=iteration_time, matrix=np.array(A)))\n\n    # \u8aad\u307f\u8fbc\u3080\u884c\u5217\u306f\u3001\u884c\u6570\u3068\u5217\u6570\u304c\u7b49\u3057\u3044\u6b63\u65b9\u884c\u5217\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u884c\u6570n\u3092\u53d6\u5f97\n    n = dim \n\n    # \u884c\u5217X\u3092\u521d\u671f\u5316\u5ba3\u8a00\uff08\u8981\u7d20\uff1a\u3059\u3079\u3066\uff11\uff09\n    X = np.ones(n)\n\n    # \u3079\u304d\u4e57\u6cd5 \u3092\u5b9f\u884c \n    eigen_value = power_method(A, X, iteration_time)\n\n    #\u7d50\u679c\u3092\u51fa\u529b\n    print(\"\\n\")\n    print(\"\\n\u6700\u5927\u56fa\u6709\u5024 (\u3079\u304d\u4e57\u6cd5\uff09: {eigen_value}\\n\\n\".format(eigen_value=eigen_value))\n    print(\"\u6700\u5927\u56fa\u6709\u5024 (Numpy) : {numpy_caliculated}\\n\".format(numpy_caliculated = np.max(np.linalg.eig(A)[0])))\n\n    print(\"\\n\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\\n\\n\")\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### \u884c\u5217\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9\ndef read_matrix_data(file_path):\n    dim = 0\n    matrix = []\n    num = []\n\n    for line in open(file_path):\n        row = line.split(' ') #\u884c\u5217\u30c7\u30fc\u30bf\u3092\uff11\u884c\u305a\u3064\u8aad\u307f\u8fbc\u307f\n        for element in row:\n            num.append(float(element)) #\u884c\u5217\u30c7\u30fc\u30bf\u306e\u3042\u308b\uff11\u884c\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u8fbc\u307f\n        matrix.append(num) #\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u300cmatrix\u300d\u306e\u8981\u7d20\u306b\u3001\u884c\u5217\u30c7\u30fc\u30bf\u306e\uff11\u884c\u3092append\uff08\uff12\u6b21\u5143\u914d\u5217\u306e\u751f\u6210\uff09\n        num = []\n        dim += 1\n\n    return (dim, matrix) #\uff12\u6b21\u5143\u914d\u5217 (list\u3092\u8981\u7d20\u306b\u3082\u3064list) \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092return\n\n\n#####\ndef receive_iteration_time_instruction():\n    print(\"\\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u308f\u3059\u7e70\u308a\u8fd4\u3057\u56de\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\")\n    iteration_time = int(raw_input())\n    return iteration_time\n\n\n\n##### \ndef power_method(A, X, iteration_time):\n    q = [X, 0]\n    \n    for cnt in xrange(iteration_time):\n        q[0] = q[0] / np.linalg.norm(q[0]) #preventing overflow / underflow\n        q[1] = np.dot(A, q[0])\n        eigen_value = np.dot(q[1].T, q[1]) / np.dot(q[1].T, q[0])\n\n        #preparation for next time in the loop \n        q[0] = q[1]\n\n    return eigen_value\n\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n```\n\n\n##### **\uff08\u5b9f\u884c\u753b\u9762\uff09**\n![pic_4.png](https://qiita-image-store.s3.amazonaws.com/0/43487/a6413893-866a-bfa4-736d-097dcb46c770.png)\n\n\n### __\uff08\u7d50\u679c\uff09__\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5b9f\u884c\u56de\u6570 15\u56de\u3067\u307f\u308b\u9650\u308a\u3001\u6700\u5927\u56fa\u6709\u5024\u306f\u30015\u306b\u53ce\u675f\u3057\u3066\u3044\u308b\u3002\n", "tags": ["Python", "\u6570\u5024\u8a08\u7b97", "\u6570\u5b66", "\u7d71\u8a08\u5b66", "statistics"]}