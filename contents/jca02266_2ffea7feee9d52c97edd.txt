{"context": " More than 1 year has passed since last update.(\u524d\u56de\u306e\u7d9a\u304d)\n\u4eca\u56de\u306f\u3001\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u95a2\u4fc2\u306b\u3064\u3044\u3066\u8003\u3048\u308b\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u304c\u3042\u308a\u3046\u308b\u3002\n\n\u56fa\u5b9a\u30c7\u30fc\u30bf\n\u30de\u30b9\u30bf\u30c7\u30fc\u30bf\uff08\u901a\u5e38\u56fa\u5b9a\u3060\u304c\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u306b\u3088\u3063\u3066\u5909\u5316\u304c\u3042\u308a\u3046\u308b\uff09\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n\u671f\u5f85\u3059\u308b\u7d50\u679c\n\n\u30de\u30b9\u30bf\u30c7\u30fc\u30bf\u306a\u3069\u306f\u3001\u30c6\u30b9\u30c8\u306b\u3088\u3063\u3066\u4f7f\u3044\u307e\u308f\u305b\u305f\u65b9\u304c\u3044\u3044\u3002\u305d\u3046\u8003\u3048\u308b\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u69cb\u6210\u306f\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u968e\u5c64\u69cb\u9020\u304c\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u4e88\u60f3\u3059\u308b\u3002\n\u3053\u308c\u4ee5\u5916\u306e\u30d1\u30bf\u30fc\u30f3\u3082\u3042\u308a\u5f97\u308b\u3060\u308d\u3046\u304c\u307e\u305a\u306f\u3053\u308c\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002\n\u306a\u304a\u3001\u30d5\u30a1\u30a4\u30eb\u540d.csv\u3068\u30c6\u30fc\u30d6\u30eb\u540d\u3068Bean\u306e\u540d\u524d\u306f\u4e00\u81f4\u3055\u305b\u308b\u524d\u63d0\u3068\u3059\u308b\u3002\u671f\u5f85\u3059\u308b\u7d50\u679c\u306fexpect*.csv\u3068\u3044\u3046\u540d\u524d\u306b\u3057\u3066\u307f\u305f\u3002\nsrc/test/resources\n  +---- sql\n  |       +--- fixed_data.sql\n  |       +--- master1.sql\n  |       +--- master2.sql\n  |       +--- test_data1.sql\n  |       +--- test_data2.sql\n  |\n  `---- fixtures\n          +--- fixed_data.csv\n          |\n          `-- master_pattern1\n                +--- master1.csv\n                +--- master2.csv\n                +--- test_pattern1\n                |      +--- expect.csv\n                |      +--- test_data1.csv\n                |      `--- test_data2.csv\n                `--- test_pattern2\n                       +--- expect.csv\n                       +--- test_data1.csv\n                       `--- test_data2.csv\n\n\u307e\u305a\u306f\u30c6\u30fc\u30d6\u30eb\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3057\u3088\u3046\n\u30c6\u30fc\u30d6\u30eb\u306f\u4ee5\u4e0b\u306b\u3059\u308b\u3002\u5358\u7d14\u306b\u3059\u308b\u305f\u3081\u306b\u9805\u76ee\u3068\u578b\u306f\u5408\u308f\u305b\u305f\u3002\u3055\u3089\u306b\u3001\u5358\u7d14\u306b\u3059\u308b\u305f\u3081\u306b\u4e0a\u306e\u56f3\u3088\u308a\u3082\u30d1\u30bf\u30fc\u30f3\u3092\u6e1b\u3089\u3057\u3066\u3044\u308b\u3002\n\nsrc/test/resources/sql/fixed_data.sql\ndrop table fixed_data\ncreate table  fixed_data  (id numeric(2), str varchar(30))\n\n\n\nsrc/test/resources/sql/master1.sql\ndrop table master1\ncreate table  master1     (id numeric(2), str varchar(30))\n\n\n\nsrc/test/resources/sql/test_data1.sql\ndrop table test_data1\ncreate table  test_data1  (id numeric(2), str varchar(30))\n\n\n\u6b21\u306b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u3059\u308b\n\nsrc/test/resources/fixtures/fixed_data.csv\nid,str\n1,fixed1\n2,fixed2\n\n\n\nsrc/test/resources/fixtures/master_pattern1/master1.csv\nid,str\n1,master1_1\n2,master1_2\n\n\n\nsrc/test/resources/fixtures/master_pattern1/test_pattern1/expect.csv\nid,str1,str2,str3\n1,fixed1,master1_1,pattern1_test_data1_1\n2,fixed2,master1_2,pattern1_test_data1_2\n\n\n\nsrc/test/resources/fixtures/master_pattern1/test_pattern1/test_data1.csv\nid,str\n1,pattern1_test_data1_1\n2,pattern1_test_data1_2\n\n\nBean\u3082\u5fc5\u8981\u3067\u3042\u308b\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nsrc/main/java/jp/sample/fixed_data.java\npackage jp.sample;\n\nimport lombok.Data;\n\n@Data\npublic class fixed_data {\n    int id;\n    String str;\n}\n\n\n\u540c\u3058\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u7d9a\u304f\u305f\u3081\u3001fixed_data \u30af\u30e9\u30b9\u3060\u3051\u63b2\u8f09\u3057\u305f\u3002master1 \u306a\u3069\u306e\u30bd\u30fc\u30b9\u306f\u540c\u69d8\u306e\u5185\u5bb9\u306a\u306e\u3067\u7701\u7565\u3059\u308b\u3002\n\u3053\u308c\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u5bfe\u8c61\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u3068\u3059\u308b\u3002\n\nsrc/main/java/jp/sample/JavaDBSample5.java\npackage jp.sample;\n\nimport java.util.List;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport org.springframework.jdbc.core.BeanPropertyRowMapper;\n\n@Component\npublic class JavaDBSample5 {\n  @Autowired\n  JdbcTemplate jdbcTemplate;\n\n  @Transactional\n  public List<Result> select1() {\n    return jdbcTemplate.query(\"select\"\n                              + \"  f.id\"\n                              + \" ,f.str as str1\"\n                              + \" ,m.str as str2\"\n                              + \" ,t.str as str3\"\n                              + \" from fixed_data f\"\n                              + \" left join master1 m\"\n                              + \"   on f.id = m.id\"\n                              + \" left join test_data1 t\"\n                              + \"   on m.id = t.id\",\n      new RowMapper<Result>() {\n\n          @Override\n          public Result mapRow(ResultSet rs, int rowNum) throws SQLException {\n            Result result = new Result();\n            result.setId(rs.getInt(\"ID\"));\n            result.setStr1(rs.getString(\"STR1\"));\n            result.setStr2(rs.getString(\"STR2\"));\n            result.setStr3(rs.getString(\"STR3\"));\n            return result;\n          }\n      });\n  }\n}\n\n\nBean\u30af\u30e9\u30b9 Result \u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\nsrc/main/java/jp/sample/Result.java\npackage jp.sample;\n\nimport lombok.Data;\n\n@Data\npublic class Result {\n    int id;\n    String str1;\n    String str2;\n    String str3;\n}\n\n\n\u3055\u3066\u3001TestDataUtils \u3067\u3001\u5148\u307b\u3069\u691c\u8a0e\u3057\u305f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u69cb\u6210\u3092\u8aad\u3080\u65b9\u6cd5\u3092\u8003\u3048\u308b\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30c8\u30c3\u30d7\u30d5\u30a9\u30eb\u30c0 fixtures \u306f\u56fa\u5b9a\u3060\u3068\u3057\u3066\u3001test_pattern1 \u3068\u3044\u3046\u30d5\u30a9\u30eb\u30c0\u540d\u3092\u4e0e\u3048\u3089\u308c\u305f\u3089\u305d\u306e\u968e\u5c64\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066insert\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u3069\u3046\u3060\u308d\u3046\u304b\u3068\u8003\u3048\u3066\u307f\u305f\u3002\n\u30b7\u30b0\u30cd\u30c1\u30e3\u30fc\u306f\u4ee5\u4e0b\u3067\u3042\u308b\npublic void loadFixtures(String patternName)\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001expect \u3067\u59cb\u307e\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30c6\u30fc\u30d6\u30eb\u306b\u5165\u308c\u306a\u3044\u3088\u3046\u7279\u5225\u6271\u3044\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3055\u3066\u3001\u5b9f\u88c5\u3067\u3042\u308b\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\npackage jp.sample;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.io.Reader;\nimport java.sql.Connection;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.init.ScriptUtils;\nimport org.springframework.util.StringUtils;\n\nimport au.com.bytecode.opencsv.bean.CsvToBean;\nimport au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;\n\npublic class TestDataUtils {\n    DataSource dataSource;\n\n    public TestDataUtils(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n\n    public void executeScript(Resource resource) {\n        ResourceDatabasePopulator rdp = new ResourceDatabasePopulator();\n        rdp.addScript(resource);\n        rdp.setSqlScriptEncoding(\"UTF-8\");\n        rdp.setIgnoreFailedDrops(true);\n        rdp.setContinueOnError(false);\n\n        Connection conn = DataSourceUtils.getConnection(dataSource);\n        rdp.populate(conn);\n    }\n\n    public void executeScript(String resourcePath) {\n        Resource resource = new ClassPathResource(resourcePath);\n        executeScript(resource);\n    }\n\n    public void executeScript(File file) {\n        Resource resource = new FileSystemResource(file);\n        executeScript(resource);\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, Resource resource) throws IOException {\n        HeaderColumnNameMappingStrategy strategy = new HeaderColumnNameMappingStrategy();\n        strategy.setType(clazz);\n\n        CsvToBean csv = new CsvToBean();\n\n        try (Reader reader = new InputStreamReader(resource.getInputStream(), \"UTF-8\")) {\n            return csv.parse(strategy, reader);\n        }\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, String csvPath) throws IOException {\n        Resource resource = new ClassPathResource(csvPath, getClass());\n\n        return getBeans(clazz, resource);\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, File file) throws IOException {\n        Resource resource = new FileSystemResource(file);\n\n        return getBeans(clazz, resource);\n    }\n\n    public void insert(Resource resource, List beans) throws IOException {\n        String script;\n        try (LineNumberReader reader = new LineNumberReader(new InputStreamReader(resource.getInputStream()))) {\n            script = ScriptUtils.readScript(reader, \"--\", \";\");\n        }\n\n        NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(dataSource);\n        for (Object bean : beans) {\n            npjt.update(script, new BeanPropertySqlParameterSource(bean));\n        }\n    }\n\n    public void insert(String sqlPath, List beans) throws IOException {\n        Resource resource = new ClassPathResource(sqlPath, getClass());\n\n        insert(resource, beans);\n    }\n\n    void loadFile(File csvFile) throws IOException, ClassNotFoundException {\n        String fileName = csvFile.getName();\n        String tableName = StringUtils.stripFilenameExtension(fileName);\n\n        Class clazz = Class.forName(\"jp.sample.\" + tableName);\n        List beans = getBeans(clazz, csvFile);\n\n        Resource sqlCreateScript = new ClassPathResource(\"/sql/ddl/\" + tableName + \".sql\", getClass());\n        Resource sqlInsertScript = new ClassPathResource(\"/sql/dml/\" + tableName + \".sql\", getClass());\n\n        executeScript(sqlCreateScript);\n\n        insert(sqlInsertScript, beans);\n    }\n\n    private void loadParentFiles(File dir) throws IOException, ClassNotFoundException {\n        File parent = dir.getParentFile();\n        boolean top = parent.getName().equalsIgnoreCase(\"fixtures\");\n\n        if (!top) {\n            loadParentFiles(parent);\n        }\n\n        for (File file : parent.listFiles()) {\n            if (file.isFile()) {\n                if (file.getName().toLowerCase().startsWith(\"expect\")) {\n                    continue;\n                }\n\n                if (!\"csv\".equalsIgnoreCase(StringUtils.getFilenameExtension(file.getName()))) {\n                    continue;\n                }\n\n                loadFile(file);\n            }\n        }\n\n        if (top) {\n            return;\n        }\n    }\n\n    private void loadChildFiles(File dir) throws IOException, ClassNotFoundException {\n        for (File file : dir.listFiles()) {\n            if (file.isDirectory()) {\n                loadChildFiles(file);\n            } else {\n                if (file.getName().toLowerCase().startsWith(\"expect\")) {\n                    continue;\n                }\n\n                if (!\"csv\".equalsIgnoreCase(StringUtils.getFilenameExtension(file.getName()))) {\n                    continue;\n                }\n\n                loadFile(file);\n            }\n        }\n    }\n\n    private File searchPath(File dir, String patternName) {\n        for (File file : dir.listFiles()) {\n            if (file.isDirectory()) {\n                if (patternName.equalsIgnoreCase(file.getName())) {\n                    return file;\n                }\n                File ret = searchPath(file, patternName);\n                if (ret != null) {\n                    return ret;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public void loadFixtures(String patternName) throws IOException, ClassNotFoundException {\n        Resource resource = new ClassPathResource(\"/fixtures\", getClass());\n\n        File dir = searchPath(resource.getFile(), patternName);\n        if (dir == null) {\n            throw new FileNotFoundException(\"directory \\\"\" + patternName + \"\\\" does not exists in /fixtures\");\n        }\n\n        loadParentFiles(dir);\n        loadChildFiles(dir);\n    }\n\n    private <T> List<T> loadBeans(Class<T> clazz, File dir, String fileName) throws IOException {\n        fileName = fileName + \".csv\";\n\n        for (File file : dir.listFiles()) {\n            if (file.isFile()) {\n                if (fileName.equalsIgnoreCase(file.getName())) {\n                    return getBeans(clazz, file);\n                }\n            }\n        }\n\n        throw new FileNotFoundException(\"file \\\"\" + fileName + \"\\\" does not exist in \\\"\" + dir.getPath());\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, String patternName, String filename) throws IOException {\n        Resource resource = new ClassPathResource(\"/fixtures\", getClass());\n        File dir = searchPath(resource.getFile(), patternName);\n        if (dir == null) {\n            throw new FileNotFoundException(\"directory \\\"\" + patternName + \"\\\" does not exists in /fixtures\");\n        }\n\n        return loadBeans(clazz, dir, filename);\n    }\n\n}\n\n\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nsrc/test/java/jp/sample/JavaDBSample5Test.java\npackage jp.sample;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.ContextConfiguration;\n\nimport org.junit.runner.RunWith;\nimport org.junit.*;\n\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class JavaDBSample5Test {\n\n    @Autowired\n    DataSource dataSource;\n\n    @Autowired\n    JavaDBSample5 obj;\n\n    TestDataUtils td;\n\n    @Before\n    public void setUp() throws IOException, ClassNotFoundException {\n        td = new TestDataUtils(dataSource);\n        td.loadFixtures(\"test_pattern1\");\n    }\n\n    @Test\n    public void testSampleSelect() throws IOException {\n        List<Result> expect = td.getBeans(Result.class, \"test_pattern1\", \"expect\");\n        List<Result> actual = obj.sampleSelect();\n        assertThat(actual, is(expect));\n    }\n}\n\n\n\u3061\u3087\u3063\u3068\u3001\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u6a5f\u80fd\u3082\u8272\u3005\u7d30\u304b\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u6b21\u56de\u3053\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3068\u3068\u3082\u306b\u3001\u4f7f\u3044\u65b9\u3084\u4f55\u304c\u52b9\u7387\u7684\u306a\u306e\u304b\u3001\u554f\u984c\u70b9\u3068\u3057\u3066\u4f55\u304c\u6b8b\u3063\u3066\u3044\u308b\u304b\u6574\u7406\u3057\u3088\u3046\u3002\n\u86c7\u8db3\uff1a\u3053\u3053\u306b\u6765\u3066\u3001TestDataUtils \u3068\u3044\u3046\u540d\u524d\u3088\u308a\u306f\u3001FixtureHelper \u306e\u65b9\u304c\u304b\u3063\u3053\u3044\u3044\u304b\u306a\u3042\u3063\u3068\u601d\u3044\u59cb\u3081\u305f\u3002\u691c\u7d22\u3057\u3066\u307f\u305f\u3089\u540c\u540d\u306e\u30af\u30e9\u30b9(? Java\u3067\u306f\u306a\u3044)\u306f\u3042\u308b\u3088\u3046\u3060\u3002\n\u8ffd\u8a18\uff1a\n\u5f53\u521d\u3001\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u52d5\u4f5c\u306f\n\nsetUp() \u3067\u3001resources/sql \u914d\u4e0b\u306eSQL\u3092\u3059\u3079\u3066\u5b9f\u884c(\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210)\u3059\u308b\nsetUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3059\u308b\n\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\n\u3068\u306a\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u3044\u305f\u306e\u3060\u304c\u3001\u4f5c\u3063\u3066\u307f\u305f\u3089\n\nsetUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u306b\u5bfe\u5fdc\u3059\u308b resources/sql/ddl \u914d\u4e0b\u306eSQL\u3092\u5b9f\u884c\u3059\u308b(\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210)\nsetUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u306b\u5bfe\u5fdc\u3059\u308b resources/sql/dml \u914d\u4e0b\u306eINSERT\u7528SQL\u3092CSV\u3092\u4e0e\u3048\u3066\u30ed\u30fc\u30c9\u3059\u308b\n\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\n\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002INSERT\u7528SQL\u3092\u7528\u610f\u3057\u306a\u3044\u3068\u884c\u3051\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u70b9(\u624b\u629c\u304d)\u304c\u76ee\u6a19\u3068\u96e2\u308c\u3066\u304a\u308a\u3001CSV\u306e\u30ed\u30fc\u30c9\u306b\u5fc5\u8981\u306a\u30c6\u30fc\u30d6\u30eb\u3060\u3051\u3092\u4f5c\u6210\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u4f9d\u5b58\u5ea6\u306e\u78ba\u8a8d\u3068\u3044\u3046\u70b9\u3067\u826f\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\u73fe\u5728\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3044\u308b\n\nsetUp() \u3067\u3001\u3059\u3079\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u6700\u521d\u306b\u524a\u9664\u3059\u308b(\u30aa\u30d7\u30b7\u30e7\u30f3)\nsetUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u306b\u5bfe\u5fdc\u3059\u308b resources/sql \u914d\u4e0b\u306eSQL\u3092\u5b9f\u884c\u3059\u308b(\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210)\nsetUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u306b\u5bfe\u5fdc\u3059\u308b INSERT\u6587\u3092CSV\u306e\u9805\u76ee\u540d\u304b\u3089SQL\u3092\u4f5c\u6210\u3057\u30ed\u30fc\u30c9\u3059\u308b\n\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\n\u6700\u521d\u306b\u5168\u30c6\u30fc\u30d6\u30eb\u3092DROP\u3059\u308b\u70b9\u3001INSERT\u7528\u306eSQL\u3092\u4e8b\u524d\u306b\u7528\u610f\u3057\u306a\u304f\u3066\u3088\u3044\u3088\u3046\u306b\u3059\u308b\u70b9\u3092\u6b21\u56de\u6539\u5584\u3059\u308b\u3002\n\u7279\u306b\u3001\u5168\u30c6\u30fc\u30d6\u30eb\u306eDROP\u306f\u500b\u3005\u306e\u30c6\u30b9\u30c8\u306e\u4f9d\u5b58\u3092\u306a\u304f\u3059\u305f\u3081\u306b\u5fc5\u9808\u3067\u3042\u308b\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u305f\u306e\u3067\u8ffd\u52a0\u3092\u691c\u8a0e\u3057\u3066\u3044\u308b\u3002\u305f\u3060\u3001\u305d\u3046\u3057\u305f\u304f\u306a\u3044\u5834\u9762\u3082\u3042\u308b\u3060\u308d\u3046\u3068\u601d\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u6a5f\u80fd\u306b\u3057\u3088\u3046\u3068\u601d\u3046\u3002\n(\u524d\u56de\u306e\u7d9a\u304d)\n\n\u4eca\u56de\u306f\u3001\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u95a2\u4fc2\u306b\u3064\u3044\u3066\u8003\u3048\u308b\u3002\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u304c\u3042\u308a\u3046\u308b\u3002\n\n* \u56fa\u5b9a\u30c7\u30fc\u30bf\n* \u30de\u30b9\u30bf\u30c7\u30fc\u30bf\uff08\u901a\u5e38\u56fa\u5b9a\u3060\u304c\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u306b\u3088\u3063\u3066\u5909\u5316\u304c\u3042\u308a\u3046\u308b\uff09\n* \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n* \u671f\u5f85\u3059\u308b\u7d50\u679c\n\n\u30de\u30b9\u30bf\u30c7\u30fc\u30bf\u306a\u3069\u306f\u3001\u30c6\u30b9\u30c8\u306b\u3088\u3063\u3066\u4f7f\u3044\u307e\u308f\u305b\u305f\u65b9\u304c\u3044\u3044\u3002\u305d\u3046\u8003\u3048\u308b\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u69cb\u6210\u306f\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u968e\u5c64\u69cb\u9020\u304c\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u4e88\u60f3\u3059\u308b\u3002\n\u3053\u308c\u4ee5\u5916\u306e\u30d1\u30bf\u30fc\u30f3\u3082\u3042\u308a\u5f97\u308b\u3060\u308d\u3046\u304c\u307e\u305a\u306f\u3053\u308c\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002\n\n\u306a\u304a\u3001\u30d5\u30a1\u30a4\u30eb\u540d.csv\u3068\u30c6\u30fc\u30d6\u30eb\u540d\u3068Bean\u306e\u540d\u524d\u306f\u4e00\u81f4\u3055\u305b\u308b\u524d\u63d0\u3068\u3059\u308b\u3002\u671f\u5f85\u3059\u308b\u7d50\u679c\u306fexpect*.csv\u3068\u3044\u3046\u540d\u524d\u306b\u3057\u3066\u307f\u305f\u3002\n\n```\nsrc/test/resources\n  +---- sql\n  |       +--- fixed_data.sql\n  |       +--- master1.sql\n  |       +--- master2.sql\n  |       +--- test_data1.sql\n  |       +--- test_data2.sql\n  |\n  `---- fixtures\n          +--- fixed_data.csv\n          |\n          `-- master_pattern1\n                +--- master1.csv\n                +--- master2.csv\n                +--- test_pattern1\n                |      +--- expect.csv\n                |      +--- test_data1.csv\n                |      `--- test_data2.csv\n                `--- test_pattern2\n                       +--- expect.csv\n                       +--- test_data1.csv\n                       `--- test_data2.csv\n```\n\n\u307e\u305a\u306f\u30c6\u30fc\u30d6\u30eb\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3057\u3088\u3046\n\n\u30c6\u30fc\u30d6\u30eb\u306f\u4ee5\u4e0b\u306b\u3059\u308b\u3002\u5358\u7d14\u306b\u3059\u308b\u305f\u3081\u306b\u9805\u76ee\u3068\u578b\u306f\u5408\u308f\u305b\u305f\u3002\u3055\u3089\u306b\u3001\u5358\u7d14\u306b\u3059\u308b\u305f\u3081\u306b\u4e0a\u306e\u56f3\u3088\u308a\u3082\u30d1\u30bf\u30fc\u30f3\u3092\u6e1b\u3089\u3057\u3066\u3044\u308b\u3002\n\n```sql:src/test/resources/sql/fixed_data.sql\ndrop table fixed_data\ncreate table  fixed_data  (id numeric(2), str varchar(30))\n```\n``` sql:src/test/resources/sql/master1.sql\ndrop table master1\ncreate table  master1     (id numeric(2), str varchar(30))\n```\n``` sql:src/test/resources/sql/test_data1.sql\ndrop table test_data1\ncreate table  test_data1  (id numeric(2), str varchar(30))\n```\n\n\u6b21\u306b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u3059\u308b\n\n```src/test/resources/fixtures/fixed_data.csv\nid,str\n1,fixed1\n2,fixed2\n```\n\n```src/test/resources/fixtures/master_pattern1/master1.csv\nid,str\n1,master1_1\n2,master1_2\n```\n\n```src/test/resources/fixtures/master_pattern1/test_pattern1/expect.csv\nid,str1,str2,str3\n1,fixed1,master1_1,pattern1_test_data1_1\n2,fixed2,master1_2,pattern1_test_data1_2\n```\n\n```src/test/resources/fixtures/master_pattern1/test_pattern1/test_data1.csv\nid,str\n1,pattern1_test_data1_1\n2,pattern1_test_data1_2\n```\n\nBean\u3082\u5fc5\u8981\u3067\u3042\u308b\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```java:src/main/java/jp/sample/fixed_data.java\npackage jp.sample;\n\nimport lombok.Data;\n\n@Data\npublic class fixed_data {\n    int id;\n    String str;\n}\n```\n\n\u540c\u3058\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u7d9a\u304f\u305f\u3081\u3001`fixed_data` \u30af\u30e9\u30b9\u3060\u3051\u63b2\u8f09\u3057\u305f\u3002`master1` \u306a\u3069\u306e\u30bd\u30fc\u30b9\u306f\u540c\u69d8\u306e\u5185\u5bb9\u306a\u306e\u3067\u7701\u7565\u3059\u308b\u3002\n\n\u3053\u308c\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u5bfe\u8c61\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u3068\u3059\u308b\u3002\n\n```java:src/main/java/jp/sample/JavaDBSample5.java \npackage jp.sample;\n\nimport java.util.List;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport org.springframework.jdbc.core.BeanPropertyRowMapper;\n \n@Component\npublic class JavaDBSample5 {\n  @Autowired\n  JdbcTemplate jdbcTemplate;\n\n  @Transactional\n  public List<Result> select1() {\n    return jdbcTemplate.query(\"select\"\n                              + \"  f.id\"\n                              + \" ,f.str as str1\"\n                              + \" ,m.str as str2\"\n                              + \" ,t.str as str3\"\n                              + \" from fixed_data f\"\n                              + \" left join master1 m\"\n                              + \"   on f.id = m.id\"\n                              + \" left join test_data1 t\"\n                              + \"   on m.id = t.id\",\n      new RowMapper<Result>() {\n\n          @Override\n          public Result mapRow(ResultSet rs, int rowNum) throws SQLException {\n            Result result = new Result();\n            result.setId(rs.getInt(\"ID\"));\n            result.setStr1(rs.getString(\"STR1\"));\n            result.setStr2(rs.getString(\"STR2\"));\n            result.setStr3(rs.getString(\"STR3\"));\n            return result;\n          }\n      });\n  }\n}\n```\n\nBean\u30af\u30e9\u30b9 Result \u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n```java:src/main/java/jp/sample/Result.java \npackage jp.sample;\n\nimport lombok.Data;\n\n@Data\npublic class Result {\n    int id;\n    String str1;\n    String str2;\n    String str3;\n}\n```\n\n\u3055\u3066\u3001TestDataUtils \u3067\u3001\u5148\u307b\u3069\u691c\u8a0e\u3057\u305f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u69cb\u6210\u3092\u8aad\u3080\u65b9\u6cd5\u3092\u8003\u3048\u308b\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30c8\u30c3\u30d7\u30d5\u30a9\u30eb\u30c0 fixtures \u306f\u56fa\u5b9a\u3060\u3068\u3057\u3066\u3001test_pattern1 \u3068\u3044\u3046\u30d5\u30a9\u30eb\u30c0\u540d\u3092\u4e0e\u3048\u3089\u308c\u305f\u3089\u305d\u306e\u968e\u5c64\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066insert\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u3069\u3046\u3060\u308d\u3046\u304b\u3068\u8003\u3048\u3066\u307f\u305f\u3002\n\u30b7\u30b0\u30cd\u30c1\u30e3\u30fc\u306f\u4ee5\u4e0b\u3067\u3042\u308b\n\n```\npublic void loadFixtures(String patternName)\n```\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001expect \u3067\u59cb\u307e\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30c6\u30fc\u30d6\u30eb\u306b\u5165\u308c\u306a\u3044\u3088\u3046\u7279\u5225\u6271\u3044\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u3055\u3066\u3001\u5b9f\u88c5\u3067\u3042\u308b\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n```java:\npackage jp.sample;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.io.Reader;\nimport java.sql.Connection;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.init.ScriptUtils;\nimport org.springframework.util.StringUtils;\n\nimport au.com.bytecode.opencsv.bean.CsvToBean;\nimport au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;\n\npublic class TestDataUtils {\n    DataSource dataSource;\n\n    public TestDataUtils(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n\n    public void executeScript(Resource resource) {\n        ResourceDatabasePopulator rdp = new ResourceDatabasePopulator();\n        rdp.addScript(resource);\n        rdp.setSqlScriptEncoding(\"UTF-8\");\n        rdp.setIgnoreFailedDrops(true);\n        rdp.setContinueOnError(false);\n\n        Connection conn = DataSourceUtils.getConnection(dataSource);\n        rdp.populate(conn);\n    }\n\n    public void executeScript(String resourcePath) {\n        Resource resource = new ClassPathResource(resourcePath);\n        executeScript(resource);\n    }\n\n    public void executeScript(File file) {\n        Resource resource = new FileSystemResource(file);\n        executeScript(resource);\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, Resource resource) throws IOException {\n        HeaderColumnNameMappingStrategy strategy = new HeaderColumnNameMappingStrategy();\n        strategy.setType(clazz);\n\n        CsvToBean csv = new CsvToBean();\n\n        try (Reader reader = new InputStreamReader(resource.getInputStream(), \"UTF-8\")) {\n            return csv.parse(strategy, reader);\n        }\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, String csvPath) throws IOException {\n        Resource resource = new ClassPathResource(csvPath, getClass());\n\n        return getBeans(clazz, resource);\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, File file) throws IOException {\n        Resource resource = new FileSystemResource(file);\n\n        return getBeans(clazz, resource);\n    }\n\n    public void insert(Resource resource, List beans) throws IOException {\n        String script;\n        try (LineNumberReader reader = new LineNumberReader(new InputStreamReader(resource.getInputStream()))) {\n            script = ScriptUtils.readScript(reader, \"--\", \";\");\n        }\n\n        NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(dataSource);\n        for (Object bean : beans) {\n            npjt.update(script, new BeanPropertySqlParameterSource(bean));\n        }\n    }\n\n    public void insert(String sqlPath, List beans) throws IOException {\n        Resource resource = new ClassPathResource(sqlPath, getClass());\n\n        insert(resource, beans);\n    }\n\n    void loadFile(File csvFile) throws IOException, ClassNotFoundException {\n        String fileName = csvFile.getName();\n        String tableName = StringUtils.stripFilenameExtension(fileName);\n\n        Class clazz = Class.forName(\"jp.sample.\" + tableName);\n        List beans = getBeans(clazz, csvFile);\n\n        Resource sqlCreateScript = new ClassPathResource(\"/sql/ddl/\" + tableName + \".sql\", getClass());\n        Resource sqlInsertScript = new ClassPathResource(\"/sql/dml/\" + tableName + \".sql\", getClass());\n\n        executeScript(sqlCreateScript);\n\n        insert(sqlInsertScript, beans);\n    }\n\n    private void loadParentFiles(File dir) throws IOException, ClassNotFoundException {\n        File parent = dir.getParentFile();\n        boolean top = parent.getName().equalsIgnoreCase(\"fixtures\");\n\n        if (!top) {\n            loadParentFiles(parent);\n        }\n\n        for (File file : parent.listFiles()) {\n            if (file.isFile()) {\n                if (file.getName().toLowerCase().startsWith(\"expect\")) {\n                    continue;\n                }\n\n                if (!\"csv\".equalsIgnoreCase(StringUtils.getFilenameExtension(file.getName()))) {\n                    continue;\n                }\n\n                loadFile(file);\n            }\n        }\n\n        if (top) {\n            return;\n        }\n    }\n\n    private void loadChildFiles(File dir) throws IOException, ClassNotFoundException {\n        for (File file : dir.listFiles()) {\n            if (file.isDirectory()) {\n                loadChildFiles(file);\n            } else {\n                if (file.getName().toLowerCase().startsWith(\"expect\")) {\n                    continue;\n                }\n\n                if (!\"csv\".equalsIgnoreCase(StringUtils.getFilenameExtension(file.getName()))) {\n                    continue;\n                }\n\n                loadFile(file);\n            }\n        }\n    }\n\n    private File searchPath(File dir, String patternName) {\n        for (File file : dir.listFiles()) {\n            if (file.isDirectory()) {\n                if (patternName.equalsIgnoreCase(file.getName())) {\n                    return file;\n                }\n                File ret = searchPath(file, patternName);\n                if (ret != null) {\n                    return ret;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public void loadFixtures(String patternName) throws IOException, ClassNotFoundException {\n        Resource resource = new ClassPathResource(\"/fixtures\", getClass());\n\n        File dir = searchPath(resource.getFile(), patternName);\n        if (dir == null) {\n            throw new FileNotFoundException(\"directory \\\"\" + patternName + \"\\\" does not exists in /fixtures\");\n        }\n\n        loadParentFiles(dir);\n        loadChildFiles(dir);\n    }\n\n    private <T> List<T> loadBeans(Class<T> clazz, File dir, String fileName) throws IOException {\n        fileName = fileName + \".csv\";\n\n        for (File file : dir.listFiles()) {\n            if (file.isFile()) {\n                if (fileName.equalsIgnoreCase(file.getName())) {\n                    return getBeans(clazz, file);\n                }\n            }\n        }\n\n        throw new FileNotFoundException(\"file \\\"\" + fileName + \"\\\" does not exist in \\\"\" + dir.getPath());\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, String patternName, String filename) throws IOException {\n        Resource resource = new ClassPathResource(\"/fixtures\", getClass());\n        File dir = searchPath(resource.getFile(), patternName);\n        if (dir == null) {\n            throw new FileNotFoundException(\"directory \\\"\" + patternName + \"\\\" does not exists in /fixtures\");\n        }\n\n        return loadBeans(clazz, dir, filename);\n    }\n\n}\n```\n\n\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```java:src/test/java/jp/sample/JavaDBSample5Test.java\npackage jp.sample;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.ContextConfiguration;\n\nimport org.junit.runner.RunWith;\nimport org.junit.*;\n\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class JavaDBSample5Test {\n\n    @Autowired\n    DataSource dataSource;\n\n    @Autowired\n    JavaDBSample5 obj;\n\n    TestDataUtils td;\n\n    @Before\n    public void setUp() throws IOException, ClassNotFoundException {\n        td = new TestDataUtils(dataSource);\n        td.loadFixtures(\"test_pattern1\");\n    }\n\n    @Test\n    public void testSampleSelect() throws IOException {\n        List<Result> expect = td.getBeans(Result.class, \"test_pattern1\", \"expect\");\n        List<Result> actual = obj.sampleSelect();\n        assertThat(actual, is(expect));\n    }\n}\n```\n\n\u3061\u3087\u3063\u3068\u3001\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u6a5f\u80fd\u3082\u8272\u3005\u7d30\u304b\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u6b21\u56de\u3053\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3068\u3068\u3082\u306b\u3001\u4f7f\u3044\u65b9\u3084\u4f55\u304c\u52b9\u7387\u7684\u306a\u306e\u304b\u3001\u554f\u984c\u70b9\u3068\u3057\u3066\u4f55\u304c\u6b8b\u3063\u3066\u3044\u308b\u304b\u6574\u7406\u3057\u3088\u3046\u3002\n\n\u86c7\u8db3\uff1a\u3053\u3053\u306b\u6765\u3066\u3001TestDataUtils \u3068\u3044\u3046\u540d\u524d\u3088\u308a\u306f\u3001FixtureHelper \u306e\u65b9\u304c\u304b\u3063\u3053\u3044\u3044\u304b\u306a\u3042\u3063\u3068\u601d\u3044\u59cb\u3081\u305f\u3002\u691c\u7d22\u3057\u3066\u307f\u305f\u3089\u540c\u540d\u306e\u30af\u30e9\u30b9(? Java\u3067\u306f\u306a\u3044)\u306f\u3042\u308b\u3088\u3046\u3060\u3002\n\n\u8ffd\u8a18\uff1a\n\n\u5f53\u521d\u3001\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u52d5\u4f5c\u306f\n\n1. setUp() \u3067\u3001resources/sql \u914d\u4e0b\u306eSQL\u3092\u3059\u3079\u3066\u5b9f\u884c(\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210)\u3059\u308b\n2. setUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3059\u308b\n3. \u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\n\u3068\u306a\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u3044\u305f\u306e\u3060\u304c\u3001\u4f5c\u3063\u3066\u307f\u305f\u3089\n\n1. setUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u306b\u5bfe\u5fdc\u3059\u308b resources/sql/ddl \u914d\u4e0b\u306eSQL\u3092\u5b9f\u884c\u3059\u308b(\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210)\n2. setUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u306b\u5bfe\u5fdc\u3059\u308b resources/sql/dml \u914d\u4e0b\u306eINSERT\u7528SQL\u3092CSV\u3092\u4e0e\u3048\u3066\u30ed\u30fc\u30c9\u3059\u308b\n3. \u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\n\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002INSERT\u7528SQL\u3092\u7528\u610f\u3057\u306a\u3044\u3068\u884c\u3051\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u70b9(\u624b\u629c\u304d)\u304c\u76ee\u6a19\u3068\u96e2\u308c\u3066\u304a\u308a\u3001CSV\u306e\u30ed\u30fc\u30c9\u306b\u5fc5\u8981\u306a\u30c6\u30fc\u30d6\u30eb\u3060\u3051\u3092\u4f5c\u6210\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u4f9d\u5b58\u5ea6\u306e\u78ba\u8a8d\u3068\u3044\u3046\u70b9\u3067\u826f\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u73fe\u5728\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3044\u308b\n\n1. setUp() \u3067\u3001\u3059\u3079\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u6700\u521d\u306b\u524a\u9664\u3059\u308b(\u30aa\u30d7\u30b7\u30e7\u30f3)\n2. setUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u306b\u5bfe\u5fdc\u3059\u308b resources/sql \u914d\u4e0b\u306eSQL\u3092\u5b9f\u884c\u3059\u308b(\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210)\n3. setUp() \u3067\u3001fixtures/ \u914d\u4e0b\u306ecsv\u306b\u5bfe\u5fdc\u3059\u308b INSERT\u6587\u3092CSV\u306e\u9805\u76ee\u540d\u304b\u3089SQL\u3092\u4f5c\u6210\u3057\u30ed\u30fc\u30c9\u3059\u308b\n4. \u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\n\u6700\u521d\u306b\u5168\u30c6\u30fc\u30d6\u30eb\u3092DROP\u3059\u308b\u70b9\u3001INSERT\u7528\u306eSQL\u3092\u4e8b\u524d\u306b\u7528\u610f\u3057\u306a\u304f\u3066\u3088\u3044\u3088\u3046\u306b\u3059\u308b\u70b9\u3092\u6b21\u56de\u6539\u5584\u3059\u308b\u3002\n\u7279\u306b\u3001\u5168\u30c6\u30fc\u30d6\u30eb\u306eDROP\u306f\u500b\u3005\u306e\u30c6\u30b9\u30c8\u306e\u4f9d\u5b58\u3092\u306a\u304f\u3059\u305f\u3081\u306b\u5fc5\u9808\u3067\u3042\u308b\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u305f\u306e\u3067\u8ffd\u52a0\u3092\u691c\u8a0e\u3057\u3066\u3044\u308b\u3002\u305f\u3060\u3001\u305d\u3046\u3057\u305f\u304f\u306a\u3044\u5834\u9762\u3082\u3042\u308b\u3060\u308d\u3046\u3068\u601d\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u6a5f\u80fd\u306b\u3057\u3088\u3046\u3068\u601d\u3046\u3002\n", "tags": ["Java", "spring"]}