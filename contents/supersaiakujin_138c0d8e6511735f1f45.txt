{"context": " More than 1 year has passed since last update.Python\u3067PCA\u3092\u884c\u3046\u306b\u306fscikit-learn\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nPCA\u306e\u8aac\u660e\u306f\u4e16\u306e\u4e2d\u306b\u6ca2\u5c71\u3042\u308b\u306e\u3067\u3053\u3053\u3067\u306f\u3057\u306a\u3044\u3067\u3068\u308a\u3042\u3048\u305a\u4f7f\u3044\u65b9\u3060\u3051\u8aac\u660e\u3057\u307e\u3059\u3002\n\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3067\u3059\u3002\nn_components\u306fcomponent\u306e\u6570\u3067\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u3044\u3068\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\u3042\u3068\u306f\u3001fit\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\u3002\n\npython\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(X)\n\n\n\u8a73\u7d30\u306f\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\n\u3053\u3093\u306a\u611f\u3058\u3067\u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\nshuffle\u306f\u5225\u306b\u3057\u3066\u3082\u3057\u306a\u304f\u3066\u3082\u3069\u3061\u3089\u3067\u3082\u3044\u3044\u3067\u3059\u3002\n\nipython\nIn [10]: x = np.linspace(0.2,1,100)\n\nIn [11]: y = 0.8*x + np.random.randn(100)*0.1\n\nIn [12]: X = np.vstack([x, y]).T\n\nIn [13]: np.random.shuffle(X)\n\n\n\n\nPCA\nPCA\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nipython\nIn [14]: from sklearn.decomposition import PCA\n\nIn [15]: pca = PCA(n_components=2)\n\nIn [16]: pca.fit(X)\nOut[16]: PCA(copy=True, n_components=2, whiten=False)\n\n\n\n\u4e3b\u6210\u5206\u306e\u78ba\u8a8d\n\u4e3b\u6210\u5206\u306fcomponents_\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u3064\u3044\u3067\u306b\u5e73\u5747\u3068\u5171\u5206\u6563\u884c\u5217\u306fmean_, get_covariance()\u3067\u898b\u308c\u307e\u3059\u3002\n\nipython\nIn [17]: print 'components'\n    ...: print pca.components_\n    ...: print 'mean'\n    ...: print pca.mean_\n    ...: print 'covariance'\n    ...: print pca.get_covariance()\n    ...: \ncomponents\n[[ 0.71487492  0.69925235]\n [-0.69925235  0.71487492]]\nmean\n[ 0.6         0.47190318]\ncovariance\n[[ 0.05441077  0.04603365]\n [ 0.04603365  0.0523763 ]]\n\n\n\u3053\u3053\u3067\u81ea\u5206\u3067\u5e73\u5747\u3068\u5171\u5206\u6563\u884c\u5217\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\u3002\n\u5e73\u5747\u306f\u5404\u6210\u5206\u6bce\u306b\u5e73\u5747\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u5171\u5206\u6563\u884c\u5217\u306f\u5171\u5206\u6563\u3092\u8a08\u7b97\u3057\u305f\u3082\u306e\u3067\u3059\u3002(\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u304c)\n\u5171\u5206\u6563\u3092\u8a08\u7b97\u3059\u308b\u3068\u304d\u306ebias=1\u306f\u5206\u6563\u3001\u5171\u5206\u6563\u306e\u5206\u6bcd\u3092\u4f55\u306b\u3059\u308b\u304b\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u30c7\u30fc\u30bf\u6570\u3067\u5272\u308b\u305f\u3081\u306b1\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u30020\u3060\u3068\u30c7\u30fc\u30bf\u6570-1\u3067\u5272\u3089\u308c\u307e\u3059\u3002\n\u7d50\u679c\u304c\u540c\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\nipython\nIn [22]: mn = np.mean(X,axis=0)\n\nIn [23]: z = X - mn\n\nIn [24]: cv = np.cov(z[:,0],z[:,1],bias=1)\n\nIn [25]: print 'mean'\n    ...: print mn\n    ...: print 'covariance'\n    ...: print cv\n    ...: \nmean\n[ 0.6         0.47190318]\ncovariance\n[[ 0.05441077  0.04603365]\n [ 0.04603365  0.0523763 ]]\n\n\n\u6b21\u306b\u5171\u5206\u6563\u884c\u5217\u306e\u56fa\u6709\u5024\u3068\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\u5171\u5206\u6563\u884c\u5217\u306e\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306f\u4e3b\u6210\u5206\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n\u56fa\u6709\u5024\u3068\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306fnumpy.linalg.eig\u3067\u8a08\u7b97\u3057\u307e\u3059\u3002\n\nipython\nW, v = np.linalg.eig(cv)\n\nprint 'eigenvector'\nprint v\nprint 'eigenvalue'\nprint W\n\neigenvector\n[[ 0.71487492 -0.69925235]\n [ 0.69925235  0.71487492]]\neigenvalue\n[ 0.09943842  0.00734865]\n\n\nW\u304c\u56fa\u6709\u5024\u3067v\u306f\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\n\u3053\u3053\u3067\u3001\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306f\u5217\u30d9\u30af\u30c8\u30eb\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u7e26\u306b\u4e26\u3093\u3067\u3044\u307e\u3059\uff09\n\u3064\u307e\u308av[:,0]\u304c\u7b2c\uff11\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\ncomponents_\u306f\u884c\u30d9\u30af\u30c8\u30eb\uff08\u6a2a\u306b\u4e26\u3093\u3067\u3044\u307e\u3059\uff09\u306a\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u4e00\u81f4\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\uff08\u203b\u305f\u307e\u306b\u65b9\u5411\u304c\uff11\uff18\uff10\u5ea6\u53cd\u8ee2\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\uff09\n\u5171\u5206\u6563\u884c\u5217\u306b\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3092\u304b\u3051\u3066\u307f\u307e\u3059\u3002\n\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3068PCA\u306e\u4e3b\u6210\u5206\u306f\u540c\u3058\u306a\u306e\u3067\u3001\u5171\u5206\u6563\u884c\u5217\u306b\u4e3b\u6210\u5206\u3092\u304b\u3051\u3066\u3044\u308b\u3053\u3068\u3068\u540c\u3058\u3067\u3059\u3002\n\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306a\u306e\u3067\u65b9\u5411\u306f\u5909\u308f\u3089\u306a\u3044\u3067\u3059\u3002\n\nipython\nIn [28]: print cv.dot(v[:,0].reshape(2,1))\n    ...: print v[:,0]*W[0]\n    ...: print cv.dot(v[:,1].reshape(2,1))\n    ...: print v[:,1]*W[1]\n[[ 0.07108603]\n [ 0.06953255]]\n[ 0.07108603  0.06953255]\n[[-0.00513856]\n [ 0.00525337]]\n[-0.00513856  0.00525337]\n\n\n\n\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n\u7b2c\uff11\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u3068\u7b2c\uff12\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u3092\u30c7\u30fc\u30bf\u4e0a\u306b\u8868\u793a\u3057\u3066\u898b\u307e\u3059\u3002\n\u7b2c\uff11\u4e3b\u6210\u5206\u304c\u5206\u6563\u306e\u5927\u304d\u3044\u65b9\u5411\u3092\u5411\u3044\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\nProjection\n\u30c7\u30fc\u30bf\u3092\u4e3b\u6210\u5206\u306bProjection\u3057\u3066\u307f\u307e\u3059\u3002\nProjection\u306f\u5177\u4f53\u7684\u306b\u306f\u30c7\u30fc\u30bf\u3068\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3092\u53d6\u308b\u3053\u3068\u3067\u3059\u3002\n\nipython\nIn [30]: Xd = pca.transform(X)\n\n\n\u5b9f\u969b\u306b\u30c7\u30fc\u30bf\u3068\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3092\u3068\u3063\u3066\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068\u540c\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\nipython\nIn [31]: print pca.components_[0]\n    ...: print pca.components_[1]\n    ...: print X[0,:]\n    ...: print z[0,:]\n    ...: print pca.components_[0].dot(z[0,:]), pca.components_[1].dot(z[0,:])\n    ...: print Xd[0,:]\n[ 0.71487492  0.69925235]\n[-0.69925235  0.71487492]\n[ 0.57979798  0.47996242]\n[-0.02020202  0.00805924]\n-0.00880647453855 0.0198876592146\n[-0.00880647  0.01988766]\n\n\nProjection\u3057\u305f\u30c7\u30fc\u30bf\u3092Plot\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nPlot\u3055\u308c\u305f\u5f62\u3092\u898b\u308b\u3068\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u304c\u65b0\u3057\u3044\u8ef8\u306b\u306a\u308b\u3088\u3046\u306b\u56de\u8ee2\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\nMNIST\nMNIST\u306e\u30c7\u30fc\u30bf\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nMNIST\u306f\u624b\u66f8\u304d\u6587\u5b57\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u306f\u3053\u3053\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3082\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\uff08\u203b\u4eca\u56de\u306fTensorflow\u306esample\u30b3\u30fc\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3053\u308d\u3092\u62dd\u501f\u3057\u3066\u304d\u307e\u3057\u305f\u3002\uff09\n\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u6587\u5b57\u2019\uff13\u2019\u306e\u30c7\u30fc\u30bf256\u500b\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\uff08\u5168\u90e8\u4f7f\u3046\u3068\u591a\u3044\u306e\u3067\uff09\n\nPCA\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306bcomponent\u6570\u309250\u306b\u3057\u307e\u3057\u305f\u3002\uff0850\u306b\u7279\u306b\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093\uff09\n\nipython\nIn [36]: from sklearn.decomposition import PCA\n\nIn [37]: N = 50\n\nIn [38]: pca = PCA(n_components=N)\n\nIn [39]: pca.fit(X)\nOut[39]: PCA(copy=True, n_components=50, whiten=False)\n\n\n\u4e3b\u6210\u5206\u3092\u753b\u50cf\u5316\u3057\u3066\u8868\u793a\u3057\u305f\u306e\u304c\u4e0b\u8a18\u3067\u3059\u3002\n\nProjection\u3059\u308b\u3068\u5f53\u7136\u3067\u3059\u304c50\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3067\u6b21\u5143\u5727\u7e2e\u304c\u3067\u304d\u307e\u3059\u3002\n\nipython\nIn [44]: Xd = pca.transform(X)\n\nIn [45]: print X.shape\n(256, 784)\n\nIn [46]: print Xd.shape\n(256, 50)\n\n\n\u5143\u306e\u6b21\u5143\u306b\u623b\u3057\u3066\u307f\u307e\u3059\u3002\n\u623b\u3059\u306b\u306finverse_transform\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nipython\nIn [51]: Xe = pca.inverse_transform(Xd)\n\nIn [52]: print Xe.shape\n(256, 784)\n\n\n\u30aa\u30ea\u30b8\u30ca\u30eb\u3068\u6b21\u5143\u5727\u7e2e\u3057\u305f\u7d50\u679c\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u6bb5\u304c\u30aa\u30ea\u30b8\u30ca\u30eb\u3067\u3001\u4e0b\u6bb5\u304c\u6b21\u5143\u5727\u7e2e\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u6b21\u5143\u6570\u304c50\u3060\u3063\u305f\u306e\u3067\u3042\u307e\u308a\u5dee\u304c\u308f\u304b\u308a\u3065\u3089\u3044\u3067\u3059\u304c\u3001\u5fae\u5999\u306b\u9055\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u6b21\u5143\u6570\u3092\uff13\u306b\u3057\u3066\u3084\u3063\u305f\u7d50\u679c\u304c\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b21\u5143\u5727\u7e2e\u3057\u305f\u7d50\u679c\u306f\u3001\u6b21\u5143\u6570\u304c\u6975\u7aef\u306b\u5c11\u306a\u3044\u306e\u3067\u7d30\u304b\u3044\u5909\u5316\u304c\u8868\u73fe\u3067\u304d\u305a\u306b\u307f\u3093\u306a\u540c\u3058\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u307e\u3057\u305f\u3002\n\ncode\n\npython\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# generate data\nx = np.linspace(0.2,1,100)\ny = 0.8*x + np.random.randn(100)*0.1\nX = np.vstack([x, y]).T\nnp.random.shuffle(X)\n\n# plot data\nfig = plt.figure()\naxes = fig.add_subplot(111,aspect='equal')\naxes.scatter(X[:,0],X[:,1])\naxes.set_xlim([-0.2, 1.4])\naxes.set_ylim([-0.2, 1.4])\naxes.set_xlabel('x0')\naxes.set_ylabel('x1')\naxes.vlines(0,-0.2,1.4,linestyles='dashed')\naxes.hlines(0,-0.2,1.4,linestyles='dashed')\n\n# PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(X)\n\n# print components and mean\nprint 'components'\nprint pca.components_\nprint 'mean'\nprint pca.mean_\nprint 'covariance'\nprint pca.get_covariance()\n\nmn = np.mean(X,axis=0)\nz = X - mn\ncv = np.cov(z[:,0],z[:,1],bias=1)\nprint 'mean'\nprint mn\nprint 'covariance'\nprint cv\n\nW, v = np.linalg.eig(cv)\nprint 'eigenvector'\nprint v\nprint 'eigenvalue'\nprint W\n\n# covariance matrix x eigenvector\nprint cv.dot(v[:,0].reshape(2,1))\nprint v[:,0]*W[0]\nprint cv.dot(v[:,1].reshape(2,1))\nprint v[:,1]*W[1]\n# display \nfig = plt.figure()\naxes = fig.add_subplot(111,aspect='equal')\naxes.scatter(X[:,0],X[:,1])\naxes.set_xlim([-0.2, 1.4])\naxes.set_ylim([-0.2, 1.4])\naxes.set_xlabel('x0')\naxes.set_ylabel('x1')\naxes.vlines(0,-0.2,1.4,linestyles='dashed')\naxes.hlines(0,-0.2,1.4,linestyles='dashed')\naxes.quiver(pca.mean_[0], pca.mean_[1], pca.components_[0,0],pca.components_[0,1], color='red', width=0.01, scale=3)\naxes.quiver(pca.mean_[0], pca.mean_[1], pca.components_[1,0],pca.components_[1,1], color='blue', width=0.01, scale=3)\n\n# projection\nXd = pca.transform(X)\nprint pca.components_[0]\nprint pca.components_[1]\nprint X[0,:]\nprint z[0,:]\nprint pca.components_[0].dot(z[0,:]), pca.components_[1].dot(z[0,:])\nprint Xd[0,:]\n\nfig = plt.figure()\naxes = fig.add_subplot(111,aspect='equal')\naxes.scatter(Xd[:,0],Xd[:,1])\naxes.set_xlabel('xd0')\naxes.set_ylabel('xd1')\naxes.set_xlim([-1.0, 1.0])\naxes.set_ylim([-1.,1.0])\naxes.vlines(0,-1.0,1.0,linestyles='dashed')\naxes.hlines(0,-1.0,1.0,linestyles='dashed')\n\n\n\npython\n# MNIST\n# generate data  \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport gzip\nimage_filename = './data/mnist/train-images-idx3-ubyte.gz'\nlabel_filename = './data/mnist/train-labels-idx1-ubyte.gz'\ndef _read32(bytestream):\n  dt = np.dtype(np.uint32).newbyteorder('>')\n  return np.frombuffer(bytestream.read(4), dtype=dt)[0]\n\nwith gzip.open(image_filename) as bytestream:\n    magic = _read32(bytestream)\n    num_images = _read32(bytestream)\n    rows = _read32(bytestream)\n    cols = _read32(bytestream)\n    buf = bytestream.read(rows * cols * num_images)\n    data = np.frombuffer(buf, dtype=np.uint8)\n    data = data.reshape(num_images, rows, cols)\n\nwith gzip.open(label_filename) as bytestream:\n    magic = _read32(bytestream)\n    num_items = _read32(bytestream)\n    buf = bytestream.read(num_items)\n    labels = np.frombuffer(buf, dtype=np.uint8)\n\nXall = data[labels == 3, :, :]\nX = Xall[0:256,:,:].reshape(256,28*28)\nX = X /255.0\n# PCA  \nfrom sklearn.decomposition import PCA\nN = 3\npca = PCA(n_components=N)\npca.fit(X)\n\n# plot\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\ncols = 10\nrows = int(np.ceil(N/float(cols)))\n\nfig, axes = plt.subplots(ncols=cols, nrows=rows, figsize=(20,10))\n\nfor i in range(N):\n    r = i // cols\n    c = i % cols\n    axes[r, c].imshow(pca.components_[i].reshape(28,28),vmin=-0.5,vmax=0.5, cmap = cm.Greys_r)\n    axes[r, c].set_title('component %d' % i)\n    axes[r, c].get_xaxis().set_visible(False)\n    axes[r, c].get_yaxis().set_visible(False)\n\n# projection\nXd = pca.transform(X)\nprint X.shape\nprint Xd.shape\n\n# inverse\nXe = pca.inverse_transform(Xd)\nprint Xe.shape\n\n\nfig, axes = plt.subplots(ncols=10, nrows=2, figsize=(30,4))\n\n\nfor i in range(10):\n    axes[0, i].imshow(X[i,:].reshape(28,28),vmin=0.0,vmax=1.0, cmap = cm.Greys_r)\n    axes[0, i].set_title('original %d' % i)\n    axes[0, i].get_xaxis().set_visible(False)\n    axes[0, i].get_yaxis().set_visible(False)\n\n    axes[1, i].imshow(Xe[i,:].reshape(28,28),vmin=0.0,vmax=1.0, cmap = cm.Greys_r)\n    axes[1, i].set_title('dimension reduction %d' % i)\n    axes[1, i].get_xaxis().set_visible(False)\n    axes[1, i].get_yaxis().set_visible(False)\n\n\nPython\u3067**PCA**\u3092\u884c\u3046\u306b\u306f**scikit-learn**\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nPCA\u306e\u8aac\u660e\u306f\u4e16\u306e\u4e2d\u306b\u6ca2\u5c71\u3042\u308b\u306e\u3067\u3053\u3053\u3067\u306f\u3057\u306a\u3044\u3067\u3068\u308a\u3042\u3048\u305a\u4f7f\u3044\u65b9\u3060\u3051\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3067\u3059\u3002\nn_components\u306fcomponent\u306e\u6570\u3067\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u3044\u3068\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\u3042\u3068\u306f\u3001fit\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\u3002\n\n```lang:python\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(X)\n```\n\n\u8a73\u7d30\u306f[\u3053\u3053](http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html#sklearn.decomposition.PCA.fit_transform)\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n\n\n## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\n\u3053\u3093\u306a\u611f\u3058\u3067\u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\nshuffle\u306f\u5225\u306b\u3057\u3066\u3082\u3057\u306a\u304f\u3066\u3082\u3069\u3061\u3089\u3067\u3082\u3044\u3044\u3067\u3059\u3002\n\n```lang:ipython\nIn [10]: x = np.linspace(0.2,1,100)\n\nIn [11]: y = 0.8*x + np.random.randn(100)*0.1\n\nIn [12]: X = np.vstack([x, y]).T\n\nIn [13]: np.random.shuffle(X)\n```\n\n![pca1.png](https://qiita-image-store.s3.amazonaws.com/0/100523/4fa5e450-cf14-24ca-6cab-ad9f42419ff4.png)\n\n## PCA\nPCA\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```lang:ipython\nIn [14]: from sklearn.decomposition import PCA\n\nIn [15]: pca = PCA(n_components=2)\n\nIn [16]: pca.fit(X)\nOut[16]: PCA(copy=True, n_components=2, whiten=False)\n```\n\n## \u4e3b\u6210\u5206\u306e\u78ba\u8a8d\n**\u4e3b\u6210\u5206**\u306fcomponents_\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u3064\u3044\u3067\u306b**\u5e73\u5747**\u3068**\u5171\u5206\u6563\u884c\u5217**\u306fmean_, get_covariance()\u3067\u898b\u308c\u307e\u3059\u3002\n\n```lang:ipython\nIn [17]: print 'components'\n    ...: print pca.components_\n    ...: print 'mean'\n    ...: print pca.mean_\n    ...: print 'covariance'\n    ...: print pca.get_covariance()\n    ...: \ncomponents\n[[ 0.71487492  0.69925235]\n [-0.69925235  0.71487492]]\nmean\n[ 0.6         0.47190318]\ncovariance\n[[ 0.05441077  0.04603365]\n [ 0.04603365  0.0523763 ]]\n```\n\n\u3053\u3053\u3067\u81ea\u5206\u3067**\u5e73\u5747**\u3068**\u5171\u5206\u6563\u884c\u5217**\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\u3002\n\u5e73\u5747\u306f\u5404\u6210\u5206\u6bce\u306b\u5e73\u5747\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u5171\u5206\u6563\u884c\u5217\u306f\u5171\u5206\u6563\u3092\u8a08\u7b97\u3057\u305f\u3082\u306e\u3067\u3059\u3002(\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u304c)\n\u5171\u5206\u6563\u3092\u8a08\u7b97\u3059\u308b\u3068\u304d\u306ebias=1\u306f\u5206\u6563\u3001\u5171\u5206\u6563\u306e\u5206\u6bcd\u3092\u4f55\u306b\u3059\u308b\u304b\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u30c7\u30fc\u30bf\u6570\u3067\u5272\u308b\u305f\u3081\u306b1\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u30020\u3060\u3068\u30c7\u30fc\u30bf\u6570-1\u3067\u5272\u3089\u308c\u307e\u3059\u3002\n\u7d50\u679c\u304c\u540c\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```lang:ipython\nIn [22]: mn = np.mean(X,axis=0)\n\nIn [23]: z = X - mn\n\nIn [24]: cv = np.cov(z[:,0],z[:,1],bias=1)\n\nIn [25]: print 'mean'\n    ...: print mn\n    ...: print 'covariance'\n    ...: print cv\n    ...: \nmean\n[ 0.6         0.47190318]\ncovariance\n[[ 0.05441077  0.04603365]\n [ 0.04603365  0.0523763 ]]\n```\n\n\u6b21\u306b**\u5171\u5206\u6563\u884c\u5217**\u306e**\u56fa\u6709\u5024**\u3068**\u56fa\u6709\u30d9\u30af\u30c8\u30eb**\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\u5171\u5206\u6563\u884c\u5217\u306e\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306f\u4e3b\u6210\u5206\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n\u56fa\u6709\u5024\u3068\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306fnumpy.linalg.eig\u3067\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n```lang:ipython\nW, v = np.linalg.eig(cv)\n\nprint 'eigenvector'\nprint v\nprint 'eigenvalue'\nprint W\n\neigenvector\n[[ 0.71487492 -0.69925235]\n [ 0.69925235  0.71487492]]\neigenvalue\n[ 0.09943842  0.00734865]\n```\nW\u304c\u56fa\u6709\u5024\u3067v\u306f\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\n\u3053\u3053\u3067\u3001\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306f**\u5217\u30d9\u30af\u30c8\u30eb**\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u7e26\u306b\u4e26\u3093\u3067\u3044\u307e\u3059\uff09\n\u3064\u307e\u308av[:,0]\u304c\u7b2c\uff11\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\ncomponents_\u306f**\u884c\u30d9\u30af\u30c8\u30eb**\uff08\u6a2a\u306b\u4e26\u3093\u3067\u3044\u307e\u3059\uff09\u306a\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u4e00\u81f4\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\uff08\u203b\u305f\u307e\u306b\u65b9\u5411\u304c\uff11\uff18\uff10\u5ea6\u53cd\u8ee2\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\uff09\n\n\n\u5171\u5206\u6563\u884c\u5217\u306b\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3092\u304b\u3051\u3066\u307f\u307e\u3059\u3002\n\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3068PCA\u306e\u4e3b\u6210\u5206\u306f\u540c\u3058\u306a\u306e\u3067\u3001\u5171\u5206\u6563\u884c\u5217\u306b\u4e3b\u6210\u5206\u3092\u304b\u3051\u3066\u3044\u308b\u3053\u3068\u3068\u540c\u3058\u3067\u3059\u3002\n\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306a\u306e\u3067\u65b9\u5411\u306f\u5909\u308f\u3089\u306a\u3044\u3067\u3059\u3002\n\n```lang:ipython\nIn [28]: print cv.dot(v[:,0].reshape(2,1))\n    ...: print v[:,0]*W[0]\n    ...: print cv.dot(v[:,1].reshape(2,1))\n    ...: print v[:,1]*W[1]\n[[ 0.07108603]\n [ 0.06953255]]\n[ 0.07108603  0.06953255]\n[[-0.00513856]\n [ 0.00525337]]\n[-0.00513856  0.00525337]\n```\n\n## \u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n\u7b2c\uff11\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u3068\u7b2c\uff12\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u3092\u30c7\u30fc\u30bf\u4e0a\u306b\u8868\u793a\u3057\u3066\u898b\u307e\u3059\u3002\n\u7b2c\uff11\u4e3b\u6210\u5206\u304c\u5206\u6563\u306e\u5927\u304d\u3044\u65b9\u5411\u3092\u5411\u3044\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n![pca2.png](https://qiita-image-store.s3.amazonaws.com/0/100523/c253e314-79a3-deda-b5f8-9977b8eed249.png)\n\n## Projection\n\u30c7\u30fc\u30bf\u3092\u4e3b\u6210\u5206\u306b**Projection**\u3057\u3066\u307f\u307e\u3059\u3002\nProjection\u306f\u5177\u4f53\u7684\u306b\u306f\u30c7\u30fc\u30bf\u3068\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3092\u53d6\u308b\u3053\u3068\u3067\u3059\u3002\n\n```lang:ipython\nIn [30]: Xd = pca.transform(X)\n```\n\n\u5b9f\u969b\u306b\u30c7\u30fc\u30bf\u3068\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3092\u3068\u3063\u3066\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068\u540c\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```lang:ipython\nIn [31]: print pca.components_[0]\n    ...: print pca.components_[1]\n    ...: print X[0,:]\n    ...: print z[0,:]\n    ...: print pca.components_[0].dot(z[0,:]), pca.components_[1].dot(z[0,:])\n    ...: print Xd[0,:]\n[ 0.71487492  0.69925235]\n[-0.69925235  0.71487492]\n[ 0.57979798  0.47996242]\n[-0.02020202  0.00805924]\n-0.00880647453855 0.0198876592146\n[-0.00880647  0.01988766]\n```\n\nProjection\u3057\u305f\u30c7\u30fc\u30bf\u3092Plot\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nPlot\u3055\u308c\u305f\u5f62\u3092\u898b\u308b\u3068\u4e3b\u6210\u5206\u30d9\u30af\u30c8\u30eb\u304c\u65b0\u3057\u3044\u8ef8\u306b\u306a\u308b\u3088\u3046\u306b\u56de\u8ee2\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n![pca3.png](https://qiita-image-store.s3.amazonaws.com/0/100523/dabb510f-06ef-3920-4de8-3681746590be.png)\n\n## MNIST\nMNIST\u306e\u30c7\u30fc\u30bf\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nMNIST\u306f\u624b\u66f8\u304d\u6587\u5b57\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u306f[\u3053\u3053](http://yann.lecun.com/exdb/mnist/)\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3082\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\uff08\u203b\u4eca\u56de\u306fTensorflow\u306esample\u30b3\u30fc\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3053\u308d\u3092\u62dd\u501f\u3057\u3066\u304d\u307e\u3057\u305f\u3002\uff09\n\n\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u6587\u5b57\u2019\uff13\u2019\u306e\u30c7\u30fc\u30bf256\u500b\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\uff08\u5168\u90e8\u4f7f\u3046\u3068\u591a\u3044\u306e\u3067\uff09\n![pca5.png](https://qiita-image-store.s3.amazonaws.com/0/100523/2da71f95-785b-9c3c-ed58-ea35e8eac3d2.png)\n\nPCA\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306bcomponent\u6570\u309250\u306b\u3057\u307e\u3057\u305f\u3002\uff0850\u306b\u7279\u306b\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093\uff09\n\n```lang:ipython\nIn [36]: from sklearn.decomposition import PCA\n\nIn [37]: N = 50\n\nIn [38]: pca = PCA(n_components=N)\n\nIn [39]: pca.fit(X)\nOut[39]: PCA(copy=True, n_components=50, whiten=False)\n```\n\n\u4e3b\u6210\u5206\u3092\u753b\u50cf\u5316\u3057\u3066\u8868\u793a\u3057\u305f\u306e\u304c\u4e0b\u8a18\u3067\u3059\u3002\n![pca4.png](https://qiita-image-store.s3.amazonaws.com/0/100523/083cbece-ca1d-e3b7-d153-0e9c54968ff6.png)\n\nProjection\u3059\u308b\u3068\u5f53\u7136\u3067\u3059\u304c50\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3067\u6b21\u5143\u5727\u7e2e\u304c\u3067\u304d\u307e\u3059\u3002\n\n```lang:ipython\nIn [44]: Xd = pca.transform(X)\n\nIn [45]: print X.shape\n(256, 784)\n\nIn [46]: print Xd.shape\n(256, 50)\n```\n\n\u5143\u306e\u6b21\u5143\u306b\u623b\u3057\u3066\u307f\u307e\u3059\u3002\n\u623b\u3059\u306b\u306finverse_transform\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```lang:ipython\nIn [51]: Xe = pca.inverse_transform(Xd)\n\nIn [52]: print Xe.shape\n(256, 784)\n```\n\n\u30aa\u30ea\u30b8\u30ca\u30eb\u3068\u6b21\u5143\u5727\u7e2e\u3057\u305f\u7d50\u679c\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u6bb5\u304c\u30aa\u30ea\u30b8\u30ca\u30eb\u3067\u3001\u4e0b\u6bb5\u304c\u6b21\u5143\u5727\u7e2e\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u6b21\u5143\u6570\u304c50\u3060\u3063\u305f\u306e\u3067\u3042\u307e\u308a\u5dee\u304c\u308f\u304b\u308a\u3065\u3089\u3044\u3067\u3059\u304c\u3001\u5fae\u5999\u306b\u9055\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n![pca6.png](https://qiita-image-store.s3.amazonaws.com/0/100523/948fb121-a819-191f-f648-fcec141f9dbb.png)\n\n\n\u6b21\u5143\u6570\u3092\uff13\u306b\u3057\u3066\u3084\u3063\u305f\u7d50\u679c\u304c\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b21\u5143\u5727\u7e2e\u3057\u305f\u7d50\u679c\u306f\u3001\u6b21\u5143\u6570\u304c\u6975\u7aef\u306b\u5c11\u306a\u3044\u306e\u3067\u7d30\u304b\u3044\u5909\u5316\u304c\u8868\u73fe\u3067\u304d\u305a\u306b\u307f\u3093\u306a\u540c\u3058\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n![pca7.png](https://qiita-image-store.s3.amazonaws.com/0/100523/62a34f2b-7e33-21c5-c7ad-8b3bbe1bc628.png)\n\n\n\u4ee5\u4e0b\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u307e\u3057\u305f\u3002\n\n# code\n\n```lang:python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# generate data\nx = np.linspace(0.2,1,100)\ny = 0.8*x + np.random.randn(100)*0.1\nX = np.vstack([x, y]).T\nnp.random.shuffle(X)\n\n# plot data\nfig = plt.figure()\naxes = fig.add_subplot(111,aspect='equal')\naxes.scatter(X[:,0],X[:,1])\naxes.set_xlim([-0.2, 1.4])\naxes.set_ylim([-0.2, 1.4])\naxes.set_xlabel('x0')\naxes.set_ylabel('x1')\naxes.vlines(0,-0.2,1.4,linestyles='dashed')\naxes.hlines(0,-0.2,1.4,linestyles='dashed')\n\n# PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(X)\n\n# print components and mean\nprint 'components'\nprint pca.components_\nprint 'mean'\nprint pca.mean_\nprint 'covariance'\nprint pca.get_covariance()\n\nmn = np.mean(X,axis=0)\nz = X - mn\ncv = np.cov(z[:,0],z[:,1],bias=1)\nprint 'mean'\nprint mn\nprint 'covariance'\nprint cv\n\nW, v = np.linalg.eig(cv)\nprint 'eigenvector'\nprint v\nprint 'eigenvalue'\nprint W\n\n# covariance matrix x eigenvector\nprint cv.dot(v[:,0].reshape(2,1))\nprint v[:,0]*W[0]\nprint cv.dot(v[:,1].reshape(2,1))\nprint v[:,1]*W[1]\n# display \nfig = plt.figure()\naxes = fig.add_subplot(111,aspect='equal')\naxes.scatter(X[:,0],X[:,1])\naxes.set_xlim([-0.2, 1.4])\naxes.set_ylim([-0.2, 1.4])\naxes.set_xlabel('x0')\naxes.set_ylabel('x1')\naxes.vlines(0,-0.2,1.4,linestyles='dashed')\naxes.hlines(0,-0.2,1.4,linestyles='dashed')\naxes.quiver(pca.mean_[0], pca.mean_[1], pca.components_[0,0],pca.components_[0,1], color='red', width=0.01, scale=3)\naxes.quiver(pca.mean_[0], pca.mean_[1], pca.components_[1,0],pca.components_[1,1], color='blue', width=0.01, scale=3)\n\n# projection\nXd = pca.transform(X)\nprint pca.components_[0]\nprint pca.components_[1]\nprint X[0,:]\nprint z[0,:]\nprint pca.components_[0].dot(z[0,:]), pca.components_[1].dot(z[0,:])\nprint Xd[0,:]\n\nfig = plt.figure()\naxes = fig.add_subplot(111,aspect='equal')\naxes.scatter(Xd[:,0],Xd[:,1])\naxes.set_xlabel('xd0')\naxes.set_ylabel('xd1')\naxes.set_xlim([-1.0, 1.0])\naxes.set_ylim([-1.,1.0])\naxes.vlines(0,-1.0,1.0,linestyles='dashed')\naxes.hlines(0,-1.0,1.0,linestyles='dashed')\n```\n\n```lang:python\n# MNIST\n# generate data  \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport gzip\nimage_filename = './data/mnist/train-images-idx3-ubyte.gz'\nlabel_filename = './data/mnist/train-labels-idx1-ubyte.gz'\ndef _read32(bytestream):\n  dt = np.dtype(np.uint32).newbyteorder('>')\n  return np.frombuffer(bytestream.read(4), dtype=dt)[0]\n\nwith gzip.open(image_filename) as bytestream:\n    magic = _read32(bytestream)\n    num_images = _read32(bytestream)\n    rows = _read32(bytestream)\n    cols = _read32(bytestream)\n    buf = bytestream.read(rows * cols * num_images)\n    data = np.frombuffer(buf, dtype=np.uint8)\n    data = data.reshape(num_images, rows, cols)\n\nwith gzip.open(label_filename) as bytestream:\n    magic = _read32(bytestream)\n    num_items = _read32(bytestream)\n    buf = bytestream.read(num_items)\n    labels = np.frombuffer(buf, dtype=np.uint8)\n\nXall = data[labels == 3, :, :]\nX = Xall[0:256,:,:].reshape(256,28*28)\nX = X /255.0\n# PCA  \nfrom sklearn.decomposition import PCA\nN = 3\npca = PCA(n_components=N)\npca.fit(X)\n\n# plot\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\ncols = 10\nrows = int(np.ceil(N/float(cols)))\n\nfig, axes = plt.subplots(ncols=cols, nrows=rows, figsize=(20,10))\n\nfor i in range(N):\n    r = i // cols\n    c = i % cols\n    axes[r, c].imshow(pca.components_[i].reshape(28,28),vmin=-0.5,vmax=0.5, cmap = cm.Greys_r)\n    axes[r, c].set_title('component %d' % i)\n    axes[r, c].get_xaxis().set_visible(False)\n    axes[r, c].get_yaxis().set_visible(False)\n    \n# projection\nXd = pca.transform(X)\nprint X.shape\nprint Xd.shape\n\n# inverse\nXe = pca.inverse_transform(Xd)\nprint Xe.shape\n\n\nfig, axes = plt.subplots(ncols=10, nrows=2, figsize=(30,4))\n\n\nfor i in range(10):\n    axes[0, i].imshow(X[i,:].reshape(28,28),vmin=0.0,vmax=1.0, cmap = cm.Greys_r)\n    axes[0, i].set_title('original %d' % i)\n    axes[0, i].get_xaxis().set_visible(False)\n    axes[0, i].get_yaxis().set_visible(False)\n    \n    axes[1, i].imshow(Xe[i,:].reshape(28,28),vmin=0.0,vmax=1.0, cmap = cm.Greys_r)\n    axes[1, i].set_title('dimension reduction %d' % i)\n    axes[1, i].get_xaxis().set_visible(False)\n    axes[1, i].get_yaxis().set_visible(False)\n```\n", "tags": ["Python", "scikit-learn"]}