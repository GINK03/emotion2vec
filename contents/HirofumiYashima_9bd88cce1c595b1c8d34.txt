{"tags": ["lisp", "common-lisp", "\u5165\u9580", "Mac", "\u74b0\u5883\u69cb\u7bc9"], "context": " More than 1 year has passed since last update.\n\nLispbox \u306e MacBook \u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u304c\u5206\u304b\u308a\u3084\u3059\u3044\n\n\nThe Strange Storage (2013/07/22) Lisp in a Box\n\n\n\n1. \u4ee5\u4e0b \u304b\u3089 lispbox \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n\nLispbox\n\n\n\n\n2. zip\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u89e3\u51cd\n\n\n\n3. \u89e3\u51cd\u5f8c\u306b\u751f\u6210\u3055\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u76f4\u4e0b\u306b\u3042\u308b emacs\u30a2\u30a4\u30b3\u30f3\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u8d77\u52d5\n\n\"CL-USER>\" \u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u70b9\u6ec5\u8868\u793a\u3055\u308c\u308b\u3002\n\n\n\n4. \u5f0f\u3092\u5165\u529b\u3057\u3066\u3001REPL\u306e\u52d5\u4f5c\u78ba\u8a8d\n\n\n\uff08 \u53c2\u8003 \uff09\n\nPeter Seixal\uff08\u8457\uff09\u3001\u4f50\u91ce\u30fb\u6c34\u4e38\u30fb\u5712\u57ce\u30fb\u91d1\u5b50\uff08\u5171\u8a33\uff09\u300e\u5b9f\u8df5 Common Lisp\u300f\uff08Ohmsha\uff09\n\nlisp\n(+ 1 5)\n\n\"hello, world\"\n\n(format t \"hello, world\")\n\n(write-line \"hello, world\")\n\n(print \"hello, world\")\n\n\n\n\nlisp\n'(1 2 3)\n\n(list 1 2 3)\n\n(length (list 1 2 3))\n\n(defun len (x)\n   (cond ((null x) 0)\n         (t (1+ (length (cdr x)))) ))\n\n(len (list 1 2 3))\n\n(len (list 1 2 3 45 6 7 8 9))\n\n(len '(1 3 5 7))\n\n\n\n\nlisp\n(defun foo (x) (* 2 x))\n\n(foo 5)\n\n(foo 10)\n\n(atom 't)\n\n(atom 'abc)\n\n(atom 1)\n\n(atom (list 1 2 3))\n\n\n\n\n\nxyzzy Lisp Programming Common Lisp \u5165\u9580 \u300c\u6761\u4ef6\u5206\u5c90\u300d\u4ee5\u964d\u306e\u30da\u30fc\u30b8\n\n\n\u518d\u5e30\u5b9a\u7fa9\u306e\u57fa\u672c\n\u307e\u305a\u306f\u7c21\u5358\u306a\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u968e\u4e57\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\n\nlisp\n(defun fact (x)\n    (if (zerop x)\n        1\n        (* x (fact (1- x)))))\n\n\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u3001if\u3067\u306f\u306a\u304f\u3001cond \u3067 \u8a18\u8ff0\u3057\u3066\u307f\u308b\u3002\n\nlisp\n(defun fact2 (x)\n  (cond ((zerop x) 1)\n        (t (* x (fact2 (1- x))))))\n\n(fact2 5)\n(fact2 3)\n\n\n\n\u5f15\u6570\u3092\u8907\u6570\u500b\u3068\u308b\u95a2\u6570 \u3092 \u5b9a\u7fa9\u3057\u3066\u307f\u308b\n\nlisp\n(defun sum (x y)\n  (+ x y))\n\n(sum 10 36)\n\n\n\n\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u3068 \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 \u3059\u308b\u95a2\u6570 \u306e \u6319\u52d5\u3092\u78ba\u8a8d\n\nlisp\n(1- 10)\n(1- 0)\n\n(1+ 0)\n(1+ 2)\n\n\n\n\nlisp\n(defun minus_one (x)\n  (1- x)\n\n\n(minus_one 5)\n(minus_one 0)\n(minus_one -1)\n\n\n\n\n\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30a6\u30a7\u30d6\u30fb\u30c0\u30a4\u30a2\u30ea\u30fc (2011/12/12) \u518d\u5e30\u30d7\u30ed\u30b0\u30e9\u30e0\u3044\u308d\u3044\u308d\n\n\n\u6211\u3005\u306e member \u306e\u5b9a\u7fa9\u3067\u306f\uff0c\u30ea\u30b9\u30c8\u306e\u6a2a\u65b9\u5411\u306b\u518d\u5e30\u304c\u884c\u308f\u308c\u308b\uff0e\n\n\ncommon-lisp\neval> (defun our-member (item list)\n       (cond ((endp list) nil)                  <-- \u7a7a\u30ea\u30b9\u30c8\u306e\u3068\u304d\n             ((equal item (car list)) list)     <-- \u5148\u982d\u8981\u7d20\u304c\u30de\u30c3\u30c1\n             (t (our-member item (cdr list))))) <-- \u4e00\u822c\u306e\u5834\u5408\n\n\n\n\n\n\n\n\u4ee5\u4e0b\u3001\u300e\u521d\u3081\u3066\u306e\u4eba\u306e\u305f\u3081\u306eLISP\u300f\u672c p.79\n\n\nlisp\n(defun last-elem (x)\n   (cond ((null (cdr x)) (car x))\n         (t (last-elem2 (cdr x))) ))\n\n\n(defun last-elem2 (x)\n  (cond ((null (cdr x)) (car x))\n        (t (last-elem2 (cdr x))) ))\n\n\n# \u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\n(last-elem (list 1 2 3 4 5 6 7))\n\n(last-elem (list 'a 'b 'c 'd 'e))\n\n\n\n\n\u4ee5\u4e0b\u3001\u300e\u521d\u3081\u3066\u306e\u4eba\u306e\u305f\u3081\u306eLISP\u300f\u672c p.86\n\n\nlisp\n(defun test (n x)\n  (cond ((minusp n) nil)\n        ((zerop n) (car x))\n        (t (tst (1- n) (cdr x))) ))\n\n\n# \u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\n(test 2 (list 'a 'b 'c 'd 'e 'f 'g))\n(test 0 (list 'a 'b 'c 'd 'e 'f 'g))\n(test -2 (list 'a 'b 'c 'd 'e 'f 'g))\n\n\n\n\n\n\u4ee5\u4e0b\u3001\u300e\u521d\u3081\u3066\u306e\u4eba\u306e\u305f\u3081\u306eLISP\u300f\u672c p.87\nerror\u95a2\u6570\u304c\u5b9f\u884c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u5f15\u6570\u304c \u8ca0\u6570\u304b\u3001null \u3060\u3063\u305f\u5834\u5408\u306e\u8fd4\u308a\u5024\u3092\u3001'error \u30a2\u30c8\u30e0 \u306b \u5909\u66f4\n\n\n\nlisp\n(defun nth (n x)\n  (cond ((< n 0) 'error)\n        (t (nth2 n x)) ))\n\n(defun nth2 (n x)\n  (cond ((null x) 'error)\n        ((= n 0) (car x))\n        (t (nth2 (1- n) (cdr x))) ))\n\n# \u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\n(nth 2 (list 'a 'b 'c 'd 'e 'f 'g))\n(nth 0 (list 'a 'b 'c 'd 'e 'f 'g))\n(nth -2 (list 'a 'b 'c 'd 'e 'f 'g))\n\n\n\u8ca0\u6570\u306e\u5834\u5408\u3001\u51e6\u7406\u304c\u7d42\u4e86\u3057\u306a\u304f\u306a\u308b\n\nerror\u95a2\u6570\u304c\u5b9f\u884c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u5f15\u6570\u304c \u8ca0\u6570\u304b\u3001null \u3060\u3063\u305f\u5834\u5408\u306e\u8fd4\u308a\u5024\u3092\u3001nil \u306b \u5909\u66f4\n\nlisp\n(defun nth (n x)\n  (cond ((< n 0) nil)\n        (t (nth2 n x)) ))\n\n(defun nth2 (n x)\n  (cond ((null x) nil)\n        ((= n 0) (car x))\n        (t (nth2 (1- n) (cdr x))) ))\n\n# \u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\n(nth 2 (list 'a 'b 'c 'd 'e 'f 'g))\n(nth 0 (list 'a 'b 'c 'd 'e 'f 'g))\n(nth -2 (list 'a 'b 'c 'd 'e 'f 'g))\n\n\n\u8ca0\u6570\u306e\u5834\u5408\u3001\u51e6\u7406\u304c\u7d42\u4e86\u3057\u306a\u304f\u306a\u308b\n\n\n\n\uff08 \u305d\u306e\u4ed6\u3001\u53c2\u8003\u30a6\u30a7\u30d6\u30da\u30fc\u30b8 \uff09\n\n\nHatena::Diary \u3082\u3046\u30ab\u30c4\u4e3c\u3067\u3044\u3044\u3088\u306a (2010/09/03) \u300c[Lisp] \u521d\u3081\u3066\u306e\u4eba\u306e\u305f\u3081\u306eLISP (\u7b2c6\u8b1b-\u7b2c7\u8b1b) \u300d\nxyzzy Lisp Programming \u300cCommon Lisp \u5165\u9580\u300d\n\n###__Lispbox \u306e MacBook \u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u304c\u5206\u304b\u308a\u3084\u3059\u3044__\n\n* [The Strange Storage (2013/07/22) Lisp in a Box](http://www.storange.jp/2013/07/lisp-in-box.html)\n\n___\n\n####__1. \u4ee5\u4e0b \u304b\u3089 lispbox \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9__\n####__[Lispbox](https://common-lisp.net/project/lispbox/)__\n\n<img width=\"1039\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-02-26 18.41.40.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/61b57eb1-918a-a528-1e3a-f6fadf8e9a6b.png\">\n\n___\n\n####__2. zip\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u89e3\u51cd__\n\n___\n\n####__3. \u89e3\u51cd\u5f8c\u306b\u751f\u6210\u3055\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u76f4\u4e0b\u306b\u3042\u308b emacs\u30a2\u30a4\u30b3\u30f3\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u8d77\u52d5__\n__\"CL-USER>\" \u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u70b9\u6ec5\u8868\u793a\u3055\u308c\u308b\u3002__\n\n<img width=\"1124\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-02-26 18.09.30.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/bcdb2874-269b-6589-b269-907d92c52383.png\">\n\n___\n\n####__4. \u5f0f\u3092\u5165\u529b\u3057\u3066\u3001REPL\u306e\u52d5\u4f5c\u78ba\u8a8d__\n\n#####__\uff08 \u53c2\u8003 \uff09__\n\n__Peter Seixal\uff08\u8457\uff09\u3001\u4f50\u91ce\u30fb\u6c34\u4e38\u30fb\u5712\u57ce\u30fb\u91d1\u5b50\uff08\u5171\u8a33\uff09\u300e\u5b9f\u8df5 Common Lisp\u300f\uff08Ohmsha\uff09__\n\n\n```{lisp:lisp}\n(+ 1 5)\n\n\"hello, world\"\n\n(format t \"hello, world\")\n\n(write-line \"hello, world\")\n\n(print \"hello, world\")\n```\n\n<img width=\"748\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-02-26 18.09.38.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/f02987cf-139d-78b6-a79f-fc2833fefac3.png\">\n\n\n```{lisp:lisp}\n'(1 2 3)\n\n(list 1 2 3)\n\n(length (list 1 2 3))\n\n(defun len (x)\n   (cond ((null x) 0)\n         (t (1+ (length (cdr x)))) ))\n\n(len (list 1 2 3))\n\n(len (list 1 2 3 45 6 7 8 9))\n\n(len '(1 3 5 7))\n```\n\n<img width=\"946\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-02-26 18.25.34.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/f72b02a6-4d8d-ec81-958b-18a32a1eb6d9.png\">\n\n```{lisp:lisp}\n(defun foo (x) (* 2 x))\n\n(foo 5)\n\n(foo 10)\n\n(atom 't)\n\n(atom 'abc)\n\n(atom 1)\n\n(atom (list 1 2 3))\n```\n\n<img width=\"1062\" alt=\"A.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/31dbc46e-6d3c-9737-1891-66ad67131d4e.png\">\n<img width=\"1064\" alt=\"B.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/5fc1afd0-c67b-239f-474c-6c94b0c8fba9.png\">\n\n* [xyzzy Lisp Programming Common Lisp \u5165\u9580 \u300c\u6761\u4ef6\u5206\u5c90\u300d\u4ee5\u964d\u306e\u30da\u30fc\u30b8](http://www.geocities.jp/m_hiroi/xyzzy_lisp/abclisp03.html)\n\n> __\u518d\u5e30\u5b9a\u7fa9\u306e\u57fa\u672c__\n>\n>\u307e\u305a\u306f\u7c21\u5358\u306a\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u968e\u4e57\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\n```{lisp:lisp}\n(defun fact (x)\n    (if (zerop x)\n        1\n        (* x (fact (1- x)))))\n```\n\n<img width=\"1060\" alt=\"C_recursive.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/d5230158-2315-1213-0561-e34221604763.png\">\n\n__\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u3001if\u3067\u306f\u306a\u304f\u3001cond \u3067 \u8a18\u8ff0\u3057\u3066\u307f\u308b\u3002__\n\n```{lisp:lisp}\n(defun fact2 (x)\n  (cond ((zerop x) 1)\n        (t (* x (fact2 (1- x))))))\n\n(fact2 5)\n(fact2 3)\n```\n\n<img width=\"773\" alt=\"D_recursive_cond.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/54df7bd4-4643-efa8-be1e-724dd77f5b99.png\">\n\n__\u5f15\u6570\u3092\u8907\u6570\u500b\u3068\u308b\u95a2\u6570 \u3092 \u5b9a\u7fa9\u3057\u3066\u307f\u308b__\n\n```{lisp:lisp}\n(defun sum (x y)\n  (+ x y))\n  \n(sum 10 36)\n```\n\n<img width=\"1066\" alt=\"E_sum.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/75c5606b-2ca8-2a0c-b69e-50ce8ac13058.png\">\n\n__\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u3068 \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 \u3059\u308b\u95a2\u6570 \u306e \u6319\u52d5\u3092\u78ba\u8a8d__\n\n```{lisp:lisp}\n(1- 10)\n(1- 0)\n\n(1+ 0)\n(1+ 2)\n```\n\n<img width=\"1060\" alt=\"Fincrement_decrement.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/cea76eb4-ee4d-f021-4cc8-f99337cf8449.png\">\n\n```{lisp:lisp}\n(defun minus_one (x)\n  (1- x)\n\n\n(minus_one 5)\n(minus_one 0)\n(minus_one -1)\n```\n\n<img width=\"1059\" alt=\"G_minus_one.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/e71c2433-688e-f035-7f6c-3f6220a14c9f.png\">\n\n* [\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30a6\u30a7\u30d6\u30fb\u30c0\u30a4\u30a2\u30ea\u30fc (2011/12/12) \u518d\u5e30\u30d7\u30ed\u30b0\u30e9\u30e0\u3044\u308d\u3044\u308d](http://blog.livedoor.jp/s-koide/archives/1869345.html)\n\n>\u6211\u3005\u306e member \u306e\u5b9a\u7fa9\u3067\u306f\uff0c\u30ea\u30b9\u30c8\u306e\u6a2a\u65b9\u5411\u306b\u518d\u5e30\u304c\u884c\u308f\u308c\u308b\uff0e\n>\n>>```{lisp:common-lisp}\n>>eval> (defun our-member (item list)\n>>        (cond ((endp list) nil)                  <-- \u7a7a\u30ea\u30b9\u30c8\u306e\u3068\u304d\n>>              ((equal item (car list)) list)     <-- \u5148\u982d\u8981\u7d20\u304c\u30de\u30c3\u30c1\n>>              (t (our-member item (cdr list))))) <-- \u4e00\u822c\u306e\u5834\u5408\n>>```\n>\n\n<img width=\"817\" alt=\"H_recursive_cond_2.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/e642f542-c61e-3114-ce3b-8982faa57914.png\">\n\n___\n\n* \u4ee5\u4e0b\u3001\u300e\u521d\u3081\u3066\u306e\u4eba\u306e\u305f\u3081\u306eLISP\u300f\u672c p.79\n\n```{lisp:lisp}\n(defun last-elem (x)\n   (cond ((null (cdr x)) (car x))\n         (t (last-elem2 (cdr x))) ))\n\n\n(defun last-elem2 (x)\n  (cond ((null (cdr x)) (car x))\n        (t (last-elem2 (cdr x))) ))\n\n\n# \u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\n(last-elem (list 1 2 3 4 5 6 7))\n\n(last-elem (list 'a 'b 'c 'd 'e))\n```\n\n<img width=\"812\" alt=\"I_last_elem.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/16a179bf-d67b-4683-7b30-ce13c15230d0.png\">\n\n* \u4ee5\u4e0b\u3001\u300e\u521d\u3081\u3066\u306e\u4eba\u306e\u305f\u3081\u306eLISP\u300f\u672c p.86\n\n```{lisp:lisp}\n(defun test (n x)\n  (cond ((minusp n) nil)\n        ((zerop n) (car x))\n\t\t(t (tst (1- n) (cdr x))) ))\n\n\n# \u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\n(test 2 (list 'a 'b 'c 'd 'e 'f 'g))\n(test 0 (list 'a 'b 'c 'd 'e 'f 'g))\n(test -2 (list 'a 'b 'c 'd 'e 'f 'g))\n```\n\n<img width=\"1003\" alt=\"add_1.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/a8fea6bc-3c99-98f0-1638-327b09bbf113.png\">\n\n___\n\n* \u4ee5\u4e0b\u3001\u300e\u521d\u3081\u3066\u306e\u4eba\u306e\u305f\u3081\u306eLISP\u300f\u672c p.87\n__error\u95a2\u6570\u304c\u5b9f\u884c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u5f15\u6570\u304c \u8ca0\u6570\u304b\u3001null \u3060\u3063\u305f\u5834\u5408\u306e\u8fd4\u308a\u5024\u3092\u3001'error \u30a2\u30c8\u30e0 \u306b \u5909\u66f4__\n\n```{lisp:lisp}\n(defun nth (n x)\n  (cond ((< n 0) 'error)\n        (t (nth2 n x)) ))\n\n(defun nth2 (n x)\n  (cond ((null x) 'error)\n        ((= n 0) (car x))\n\t\t(t (nth2 (1- n) (cdr x))) ))\n\n# \u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\n(nth 2 (list 'a 'b 'c 'd 'e 'f 'g))\n(nth 0 (list 'a 'b 'c 'd 'e 'f 'g))\n(nth -2 (list 'a 'b 'c 'd 'e 'f 'g))\n```\n\n__\u8ca0\u6570\u306e\u5834\u5408\u3001\u51e6\u7406\u304c\u7d42\u4e86\u3057\u306a\u304f\u306a\u308b__\n\n<img width=\"749\" alt=\"add_2.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/05446896-1359-854e-d855-3b300d9cab89.png\">\n\n__error\u95a2\u6570\u304c\u5b9f\u884c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u5f15\u6570\u304c \u8ca0\u6570\u304b\u3001null \u3060\u3063\u305f\u5834\u5408\u306e\u8fd4\u308a\u5024\u3092\u3001nil \u306b \u5909\u66f4__\n\n```{lisp:lisp}\n(defun nth (n x)\n  (cond ((< n 0) nil)\n        (t (nth2 n x)) ))\n\n(defun nth2 (n x)\n  (cond ((null x) nil)\n        ((= n 0) (car x))\n\t\t(t (nth2 (1- n) (cdr x))) ))\n\n# \u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\n(nth 2 (list 'a 'b 'c 'd 'e 'f 'g))\n(nth 0 (list 'a 'b 'c 'd 'e 'f 'g))\n(nth -2 (list 'a 'b 'c 'd 'e 'f 'g))\n```\n\n__\u8ca0\u6570\u306e\u5834\u5408\u3001\u51e6\u7406\u304c\u7d42\u4e86\u3057\u306a\u304f\u306a\u308b__\n\n<img width=\"806\" alt=\"add_3.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/a48ab50b-2262-ef77-a1b6-55d0f2ec802c.png\">\n\n___\n\n##__\uff08 \u305d\u306e\u4ed6\u3001\u53c2\u8003\u30a6\u30a7\u30d6\u30da\u30fc\u30b8 \uff09__\n\n* [Hatena::Diary \u3082\u3046\u30ab\u30c4\u4e3c\u3067\u3044\u3044\u3088\u306a (2010/09/03) \u300c[Lisp] \u521d\u3081\u3066\u306e\u4eba\u306e\u305f\u3081\u306eLISP (\u7b2c6\u8b1b-\u7b2c7\u8b1b) \u300d](http://d.hatena.ne.jp/Rion778/20100903/1283442853)\n\n* [xyzzy Lisp Programming \u300cCommon Lisp \u5165\u9580\u300d](http://www.geocities.jp/m_hiroi/xyzzy_lisp/abclisp03.html)\n"}