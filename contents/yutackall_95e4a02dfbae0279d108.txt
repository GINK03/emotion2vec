{"context": " More than 1 year has passed since last update.\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u3068\u306e\u9023\u643a\u6642\u306b\u3088\u304f\u3042\u308b\u306e\u304c\u3001\u4f7f\u7528\u3067\u304d\u308b\u6587\u5b57\u306e\u554f\u984c\n\u3068\u3042\u308b\u6c7a\u6e08\u7cfb\u306e\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u3068\u306e\u9023\u643a\u3067\u3001\u4f7f\u7528\u53ef\u80fd\u306a\u5168\u89d2\u6587\u5b57\u306f\u3001JISX0208 ( JIS \u975e\u6f22\u5b57 + JIS \u7b2c\u4e00\u6c34\u6e96 + JIS \u7b2c\u4e8c\u6c34\u6e96 ) \u3060\u3051\u3067\u3059\u3063\u3066\u66f8\u3044\u3066\u3042\u3063\u3066\u3001\u3057\u3070\u3089\u304f\u9014\u65b9\u306b\u66ae\u308c\u305f\u5f8c\u3001\u8272\u3005\u3068\u8abf\u3079\u3066\u4f55\u3068\u304b\u5b9f\u88c5\u3067\u304d\u305f\u3002\n\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u3001\u6b63\u898f\u8868\u73fe\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3084\u308a\u65b9\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3068\u308a\u3042\u3048\u305a\u3001concerns \u306b\u4f5c\u6210\u3057\u305f  \n\napp/models/concerns/character_code.rb\nmodule CharacterCode\n  extend ActiveSupport::Concern\n  # \u4f7f\u7528\u3067\u304d\u308b\u6587\u5b57\u306f\u3001JISX0208 ( JIS \u975e\u6f22\u5b57 + JIS \u7b2c\u4e00\u6c34\u6e96 + JIS \u7b2c\u4e8c\u6c34\u6e96 ) \n  REGEXP = /\\A#{\"[\u3000-\u2542\u4e9c-\u8155\u5f0c-\u7199]\".encode(\"SHIFT_JIS\")}+\\z/\n\n  def self.jisx0208_include?(target_string)\n    REGEXP.match(target_string.encode(\"SHIFT_JIS\")).present?\n  rescue Encoding::UndefinedConversionError\n    false\n  end\nend\n\n\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001\u534a\u89d2\u82f1\u6570\u5b57\u7b49\u3082 OK \u306e\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u3001\u6b63\u898f\u8868\u73fe\u306b\u305d\u306e\u307e\u307e\u8ffd\u52a0  \n\napp/models/concerns/character_code.rb\nmodule CharacterCode\n  extend ActiveSupport::Concern\n  # \u4f7f\u7528\u3067\u304d\u308b\u6587\u5b57\u306f\u3001\u534a\u89d2\u82f1\u6570\u5b57\u3068 JISX0208 ( JIS \u975e\u6f22\u5b57 + JIS \u7b2c\u4e00\u6c34\u6e96 + JIS \u7b2c\u4e8c\u6c34\u6e96 ) \n  REGEXP = /\\A#{\"[0-9a-zA-Z\u3000-\u2542\u4e9c-\u8155\u5f0c-\u7199]\".encode(\"SHIFT_JIS\")}+\\z/\n\n  def self.jisx0208_include?(target_string)\n    REGEXP.match(target_string.encode(\"SHIFT_JIS\")).present?\n  rescue Encoding::UndefinedConversionError\n    false\n  end\nend\n\n\n\u4eca\u56de\u306f\u3001DB\u306b\u767b\u9332\u3059\u308b\u6642\u70b9\u3067\u5f3e\u304d\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u30e2\u30c7\u30eb\u306e validate \u306b\u8ffd\u52a0\u3057\u305f\n\napp/models/user.rb\nclass User < ActiveRecord::Base\n  include CharacterCode\n\n  validate :validate_last_name_available, if: -> { last_name.present? }\n  validate :validate_first_name_available, if: -> { first_name.present? }\n\n  private\n  def validate_last_name_available\n    errors.add(:last_name, '\u306b\u4f7f\u7528\u3067\u304d\u306a\u3044\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059') unless CharacterCode.jisx0208_include?(last_name)\n  end\n\n  def validate_first_name_available\n    errors.add(:first_name, '\u306b\u4f7f\u7528\u3067\u304d\u306a\u3044\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059') unless CharacterCode.jisx0208_include?(first_name)\n  end\nend\n\n\n\u6b63\u898f\u8868\u73fe\u3092\u4fee\u6b63\u3059\u308c\u3070\u3001\u30ab\u30bf\u30ab\u30ca[\u30a1-\u30f6]\u3060\u3051\u3068\u304b\u3001\u3072\u3089\u304c\u306a[\u3041-\u3093]\u3060\u3051\u3068\u304b\u3082\u53ef\u80fd\u3002\n\u4f7f\u7528\u3067\u304d\u308b\u6587\u5b57\u306f\u4e0b\u8a18\u3067\u8abf\u3079\u305f  \nhttp://ash.jp/code/codetbl2.htm \n\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u3068\u306e\u9023\u643a\u6642\u306b\u3088\u304f\u3042\u308b\u306e\u304c\u3001\u4f7f\u7528\u3067\u304d\u308b\u6587\u5b57\u306e\u554f\u984c\n\n\u3068\u3042\u308b\u6c7a\u6e08\u7cfb\u306e\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u3068\u306e\u9023\u643a\u3067\u3001\u4f7f\u7528\u53ef\u80fd\u306a\u5168\u89d2\u6587\u5b57\u306f\u3001JISX0208 ( JIS \u975e\u6f22\u5b57 + JIS \u7b2c\u4e00\u6c34\u6e96 + JIS \u7b2c\u4e8c\u6c34\u6e96 ) \u3060\u3051\u3067\u3059\u3063\u3066\u66f8\u3044\u3066\u3042\u3063\u3066\u3001\u3057\u3070\u3089\u304f\u9014\u65b9\u306b\u66ae\u308c\u305f\u5f8c\u3001\u8272\u3005\u3068\u8abf\u3079\u3066\u4f55\u3068\u304b\u5b9f\u88c5\u3067\u304d\u305f\u3002\n\n\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u3001\u6b63\u898f\u8868\u73fe\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3084\u308a\u65b9\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3068\u308a\u3042\u3048\u305a\u3001concerns \u306b\u4f5c\u6210\u3057\u305f  \n\n```ruby:app/models/concerns/character_code.rb\nmodule CharacterCode\n  extend ActiveSupport::Concern\n  # \u4f7f\u7528\u3067\u304d\u308b\u6587\u5b57\u306f\u3001JISX0208 ( JIS \u975e\u6f22\u5b57 + JIS \u7b2c\u4e00\u6c34\u6e96 + JIS \u7b2c\u4e8c\u6c34\u6e96 ) \n  REGEXP = /\\A#{\"[\u3000-\u2542\u4e9c-\u8155\u5f0c-\u7199]\".encode(\"SHIFT_JIS\")}+\\z/\n\n  def self.jisx0208_include?(target_string)\n    REGEXP.match(target_string.encode(\"SHIFT_JIS\")).present?\n  rescue Encoding::UndefinedConversionError\n    false\n  end\nend\n```\n\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001\u534a\u89d2\u82f1\u6570\u5b57\u7b49\u3082 OK \u306e\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u3001\u6b63\u898f\u8868\u73fe\u306b\u305d\u306e\u307e\u307e\u8ffd\u52a0  \n\n```ruby:app/models/concerns/character_code.rb\nmodule CharacterCode\n  extend ActiveSupport::Concern\n  # \u4f7f\u7528\u3067\u304d\u308b\u6587\u5b57\u306f\u3001\u534a\u89d2\u82f1\u6570\u5b57\u3068 JISX0208 ( JIS \u975e\u6f22\u5b57 + JIS \u7b2c\u4e00\u6c34\u6e96 + JIS \u7b2c\u4e8c\u6c34\u6e96 ) \n  REGEXP = /\\A#{\"[0-9a-zA-Z\u3000-\u2542\u4e9c-\u8155\u5f0c-\u7199]\".encode(\"SHIFT_JIS\")}+\\z/\n\n  def self.jisx0208_include?(target_string)\n    REGEXP.match(target_string.encode(\"SHIFT_JIS\")).present?\n  rescue Encoding::UndefinedConversionError\n    false\n  end\nend\n```\n\n\u4eca\u56de\u306f\u3001DB\u306b\u767b\u9332\u3059\u308b\u6642\u70b9\u3067\u5f3e\u304d\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u30e2\u30c7\u30eb\u306e validate \u306b\u8ffd\u52a0\u3057\u305f\n\n```ruby:app/models/user.rb\nclass User < ActiveRecord::Base\n  include CharacterCode\n\n  validate :validate_last_name_available, if: -> { last_name.present? }\n  validate :validate_first_name_available, if: -> { first_name.present? }\n\n  private\n  def validate_last_name_available\n    errors.add(:last_name, '\u306b\u4f7f\u7528\u3067\u304d\u306a\u3044\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059') unless CharacterCode.jisx0208_include?(last_name)\n  end\n\n  def validate_first_name_available\n    errors.add(:first_name, '\u306b\u4f7f\u7528\u3067\u304d\u306a\u3044\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059') unless CharacterCode.jisx0208_include?(first_name)\n  end\nend\n```\n\n\u6b63\u898f\u8868\u73fe\u3092\u4fee\u6b63\u3059\u308c\u3070\u3001\u30ab\u30bf\u30ab\u30ca`[\u30a1-\u30f6]`\u3060\u3051\u3068\u304b\u3001\u3072\u3089\u304c\u306a`[\u3041-\u3093]`\u3060\u3051\u3068\u304b\u3082\u53ef\u80fd\u3002\n\n\u4f7f\u7528\u3067\u304d\u308b\u6587\u5b57\u306f\u4e0b\u8a18\u3067\u8abf\u3079\u305f  \n\nhttp://ash.jp/code/codetbl2.htm  \n", "tags": ["Rails4", "\u6587\u5b57\u30b3\u30fc\u30c9", "Ruby2.1.1"]}