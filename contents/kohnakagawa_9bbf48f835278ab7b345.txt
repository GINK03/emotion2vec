{"context": "\n\n\u306f\u3058\u3081\u306b\nVerlet list\u69cb\u7bc9\u306eSIMD\u5316\u3092\u884c\u3063\u3066\u4e00\u5fdc\u5b8c\u6210\u3057\u305f\u306e\u3067\u30e1\u30e2\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308b\u3002\u3044\u304f\u3064\u304b\u6280\u8853\u7684\u56f0\u96e3\u304c\u3042\u3063\u305f\u306e\u3067\u4f55\u56de\u304b\u306b\u5206\u3051\u3066\u8a18\u4e8b\u3068\u3057\u3066\u6295\u7a3f\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\uff08\u306f\u3058\u3081\u306b\u8a00\u3063\u3066\u304a\u304f\u3068\u3001\u3053\u306e\u8a18\u4e8b\u306e\u901a\u308a\u306e\u9806\u756a\u306bSIMD\u5316\u3057\u305f\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u308b\u3068\u82e5\u5e72\u9055\u548c\u611f\u3092\u611f\u3058\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\uff09\n\nCUDA\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306fGPU\u3092\u7528\u3044\u305f\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u306b\u304a\u3051\u308bVerlet list\u69cb\u7bc9\u3068\u7d9a GPU\u3092\u7528\u3044\u305f\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u306b\u304a\u3051\u308bVerlet list\u69cb\u7bc9 ~\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u7de8~\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u3053\u3053\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n\nSIMD\u5316\u524d\u306e\u30b3\u30fc\u30c9\n\u307e\u305aSIMD\u5316\u3059\u308b\u307e\u3048\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\nfor (int32_t icell = 0; icell < all_cell_; icell++) { // \u3059\u3079\u3066\u306eicell\u306b\u3064\u3044\u3066\n  const auto icell_beg = cell_pointer_[icell];    // icell\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u30c7\u30fc\u30bf\u306e\u5148\u982d\u30a2\u30c9\u30ec\u30b9\n  const auto icell_size = number_in_cell_[icell]; // icell\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u30c7\u30fc\u30bf\u306e\u7d42\u7aef\u30a2\u30c9\u30ec\u30b9\n  const int32_t* pid_of_neigh_cell_loc = &ptcl_id_of_neigh_cell_[icell][0]; // \u96a3\u63a5\u30bb\u30eb\u306b\u542b\u307e\u308c\u308b\u7c92\u5b50\u30c7\u30fc\u30bf\n  const int32_t num_of_neigh_cell = ptcl_id_of_neigh_cell_[icell].size(); // \u96a3\u63a5\u30bb\u30eb\u306b\u542b\u307e\u308c\u308b\u7c92\u5b50\u30c7\u30fc\u30bf\u6570\n  for (int32_t l = 0; l < icell_size; l++) { // icell\u306b\u3044\u308b\u3059\u3079\u3066\u306e\u7c92\u5b50\u306b\u3064\u3044\u3066\n    const auto i = l + icell_beg;\n    const auto qi = q[i];\n    for (int32_t k = l + 1; k < num_of_neigh_cell; k++) { //icell\u306e\u96a3\u63a5\u30bb\u30eb\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u7c92\u5b50\u306b\u3064\u3044\u3066\n      const auto j = pid_of_neigh_cell_loc[k];\n      RegistInteractPair(qi, q[j], i, j); // search_length_\u4ee5\u5185\u3067\u3042\u308c\u3070\u30da\u30a2\u3092Verlet list\u306b\u767b\u9332\n    }\n  }\n}\n\n\u3053\u3053\u3067RegistInteractPair\u306e\u95a2\u6570\u5185\u3067\u306f\n1. \u4e8c\u3064\u306e\u7c92\u5b50\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n2. search_length_\u672a\u6e80\u3067\u3042\u308c\u3070\u7c92\u5b50i\u3068\u7c92\u5b50j\u306e\u756a\u53f7\u3092\u6607\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\n3. \u7c92\u5b50\u756a\u53f7\u304c\u5c0f\u3055\u3044\u65b9\u3092key_particles_\u3001\u7c92\u5b50\u756a\u53f7\u304c\u5927\u304d\u3044\u65b9\u3092partner_particles_\u306e\u914d\u5217\u306b\u305d\u308c\u305e\u308c\u30b9\u30c8\u30a2\n4. \u7c92\u5b50\u30da\u30a2\u306e\u6570\u3068\u3001key_particles_\u306b\u76f8\u4e92\u4f5c\u7528\u3057\u3066\u3044\u308b\u7c92\u5b50\u6570\u3092\u8a08\u7b97\n\u306e\u56db\u3064\u306e\u51e6\u7406\u3092\u884c\u3046\u3002\u5b9f\u88c5\u306f\u6b21\u306e\u901a\u308a\u306b\u306a\u308b\u3002\nvoid RegistInteractPair(const Vec& qi,\n                        const Vec& qj,\n                        const int32_t index1,\n                        const int32_t index2) {\n  const auto dx = qj.x - qi.x;\n  const auto dy = qj.y - qi.y;\n  const auto dz = qj.z - qi.z;\n  const auto r2 = dx * dx + dy * dy + dz * dz; // \u4e8c\u7c92\u5b50\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n  if (r2 > search_length2_) return; // search_length\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u4ee5\u964d\u306e\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7\n  int i, j;\n  if (index1 < index2) { // index\u3092\u6607\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\u3002\n    i = index1;\n    j = index2;\n  } else {\n    i = index2;\n    j = index1;\n  }\n  key_particles_[number_of_pairs_] = i;     // <-SIMD\u5316\u3067\u304d\u308b\uff1f\n  partner_particles_[number_of_pairs_] = j; // <-SIMD\u5316\u3067\u304d\u308b\uff1f\n  number_of_partners_[i]++;                 // <-SIMD\u5316\u3067\u304d\u308b\uff1f\n  number_of_pairs_++;                       // <-SIMD\u5316\u3067\u304d\u308b\uff1f\n}\n\n\n\u307e\u305a\u8003\u3048\u308b\u3053\u3068\n\u3072\u3068\u307e\u305a\u6700\u5185\u30eb\u30fc\u30d7\u3092\uff14\u500d\u5c55\u958b\u3057\u3066SIMD\u5316\u3059\u308b\u65b9\u91dd\u3067\u3044\u304f\u3053\u3068\u306b\u3059\u308b\u3002\u3053\u306e\u90e8\u5206\u306fLJ\u529b\u8a08\u7b97\u306eSIMD\u5316\u3068\u540c\u3058\u3084\u308a\u65b9\u3002\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u300cSIMD\u5316\u3067\u304d\u308b\uff1f\u300d\u3068\u793a\u3057\u305f\u7b87\u6240\u306fSIMD\u5316\u304c\u96e3\u3057\u305d\u3046\u306a\u306e\u3067\u3072\u3068\u307e\u305a32bit\u305a\u3064\u30b9\u30c8\u30a2\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n\u4e8c\u7c92\u5b50\u9593\u8ddd\u96e2\u306e\u8a08\u7b97\nLJ\u529b\u8a08\u7b97\u306eSIMD\u5316\u3068\u5168\u304f\u540c\u3058\u3088\u3046\u306b\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092_mm256_load_pd\u3067\u4e00\u767a\u3067\u30ed\u30fc\u30c9\u3057\u305f\u306e\u3061\u3001\u76f8\u5bfe\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\u3059\u308b\u3002\nconst auto ja = pid_of_neigh_cell_loc[k + l + 1];\nconst v4df vqja = _mm256_load_pd(reinterpret_cast<const double*>(q + ja));\nv4df dvqa = vqja - vqi;\n\nconst auto jb = pid_of_neigh_cell_loc[k + l + 2];\nconst v4df vqjb = _mm256_load_pd(reinterpret_cast<const double*>(q + jb));\nv4df dvqb = vqjb - vqi;\n\nconst auto jc = pid_of_neigh_cell_loc[k + l + 3];\nconst v4df vqjc = _mm256_load_pd(reinterpret_cast<const double*>(q + jc));\nv4df dvqc = vqjc - vqi;\n\nconst auto jd = pid_of_neigh_cell_loc[k + l + 4];\nconst v4df vqjd = _mm256_load_pd(reinterpret_cast<const double*>(q + jd));\nv4df dvqd = vqjd - vqi;\n\n\uff14\u3064\u306e\u76f8\u5bfe\u30d9\u30af\u30c8\u30eb\u304b\u3089\uff14\u3064\u306e\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u305f\u3044\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306bshuffle\u547d\u4ee4\u3092\u7528\u3044\u3066\u76f8\u5bfe\u30d9\u30af\u30c8\u30eb\u306e\u30c7\u30fc\u30bf\u3092\u4e26\u3073\u66ff\u3048\u308b\u3053\u3068\u306b\u3059\u308b\u3002\ndvqa = {dxa, dya, dza, 0}  4x4transpose {dxa, dxb, dxc, dxd}\ndvqb = {dxb, dyb, dzb, 0}        ->     {dya, dyb, dyc, dyd}\ndvqc = {dxc, dyc, dzc, 0}               {dza, dzb, dzc, dzd}\ndvqd = {dxd, dyd, dzd, 0}               {  0,   0,   0,   0}\n\n\u3053\u306e\u3042\u3068\u3001dvqa*dvqa + dvqb*dvqb + dvqc*dvqc \u30674\u3064\u306e\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u30ab\u30c3\u30c8\u30aa\u30d5\u51e6\u7406\n\u3053\u306e\u3042\u3068\u3001\u3069\u306e\u756a\u53f7\u306e\u7c92\u5b50\u304csearch_length_\u4ee5\u5185\u306b\u3042\u308b\u306e\u304b\u3092\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306b\u306f\u6bd4\u8f03\u95a2\u6570\u3068\u3044\u3046\u3082\u306e\u3092\u7528\u3044\u308b\u3002\n__m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8)\n\nIntel intrinsics guide\u3092\u521d\u3081\u3066\u898b\u305f\u3068\u304d\u306f\u3061\u3087\u3063\u3068\u30ae\u30e7\u30c3\u3068\u3057\u3066\u3057\u307e\u3063\u305f\u304c\u30014\u3064\u306e\u500d\u7cbe\u5ea6\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u7b2c\u4e09\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u6bd4\u8f03\u6f14\u7b97\u3092\u5b9f\u884c\u3057\u3066\u3001true\u3067\u3042\u308c\u30700xFFFFFFFFFFFFFFFF\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u30700\u3092\u4ee3\u5165\u3057\u305f\u5024\u3092\u8fd4\u3059\u3002\u6bd4\u8f03\u6f14\u7b97\u306f32\u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u4eca\u884c\u3044\u305f\u3044\u306e\u306f\ndr^{2} \\le r^{2}_{s}\ndr2\u2264r2s{dr^{2} \\le r^{2}_{s}\n}\n\u3067\u3042\u308a\u3001_CMP_LE_OS\u3068\u3044\u3046\u306e\u304c\u305d\u308c\u306b\u76f8\u5f53\u3059\u308b\u3088\u3046\u306a\u306e\u3067\u3001\n// dr2_abcd\u306b\u306f\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u60c5\u5831\u304c\u7c92\u5b50\uff14\u3064\u5206\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n// vsl2\u306fsearch_length\u306e\u4e8c\u4e57\u306e\u30c7\u30fc\u30bf\u304c\uff14\u3064\u5206\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\nv4df dr2_flag = _mm256_cmp_pd(dr2_abcd, vsl2, _CMP_LE_OS);\n\n\u3067rsr_{s}\u4ee5\u5185\u306b\u3042\u308b\u7c92\u5b50\u304c\u3069\u308c\u304b\u304c\u308f\u304b\u308b\u3002\n\u529b\u306e\u8a08\u7b97\u306e\u3068\u304d\u306b\u306f\u3001\u3053\u308c\u3092mask\u3068\u3057\u3066\u529b\u306e\u60c5\u5831\u30920\u30af\u30ea\u30a2\u3059\u308b\u306e\u3060\u304c\u3001\u3044\u307e\u306frsr_{s}\u4ee5\u5185\u306b\u3044\u308b\u306e\u304b\u305d\u3046\u3067\u306a\u3044\u306e\u304b\u3060\u3051\u304c\u77e5\u308a\u305f\u3044\u3002256bit\u3082\u3044\u3089\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u309232bit\u30c7\u30fc\u30bf\u306b\u76f4\u3059\u305f\u3081\u306b\u6b21\u306e\u95a2\u6570\u3092\u7528\u3044\u308b\u3002\nint _mm256_movemask_pd (__m256d a)\n\n\u5148\u307b\u3069\u306emask\u3092\u3053\u306e\u95a2\u6570\u306b\u6e21\u3059\u3068\u4f8b\u3048\u3070\u3001\n256 bit mask                                                        32 bit\nffffffffffffffff0000000000000000ffffffffffffffff0000000000000000 -> 00001010\n\n\u3068\u306a\u308b\u3002\n\u3053\u306e\u5f8c\u3067\u5404\u30d3\u30c3\u30c8\u304c0\u304b1\u3067\u3042\u308b\u304b\u3092\u898b\u3066\u3084\u308c\u3070\u5404\u7c92\u5b50\u304crsr_{s}\u4ee5\u5185\u306b\u3044\u308b\u306e\u304b\u3069\u3046\u304b\u304c\u5206\u304b\u308b\u3002\u53f3\u3078bit\u30b7\u30d5\u30c8\u3057\u3066\u3084\u308c\u3070\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u8a08\u7b97\u3067\u304d\u308b\u3002\nint flag = _mm256_movemask_pd(mask);\nconst bool ja_in_range = flag & 1;\nif (ja_in_range) RegistInteractPair(qi, q[ja], i, ja);\n\nflag >>= 1;\nconst bool jb_in_range = flag & 1;\nif (jb_in_range) RegistInteractPair(qi, q[jb], i, jb);\n\nflag >>= 1;\nconst bool jc_in_range = flag & 1;\nif (jc_in_range) RegistInteractPair(qi, q[jc], i, jc);\n\nflag >>= 1;\nconst bool jd_in_range = flag & 1;\nif (jd_in_range) RegistInteractPair(qi, q[jd], i, jd);\n\nbit shift\u3068mask\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u5404\u30d3\u30c3\u30c8\u304c1\u304b0\u3067\u3042\u308b\u304b\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u5f97\u3089\u308c\u305f\u30d3\u30c3\u30c8\u306b\u5fdc\u3058\u3066\u7c92\u5b50id\u306e\u60c5\u5831\u3092\u30b9\u30c8\u30a2\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u3092\u9010\u4e00\u5224\u65ad\u3057\u3066\u3044\u3051\u3070\u3088\u3044\u3002\n\n\u7d50\u679c\n\u4e0a\u8a18\u306e\u3053\u3068\u3092\u8e0f\u307e\u3048\u3066\u5b9f\u88c5\u3057\u305f\u306e\u304c\u3053\u308c\u306eMakePairListFusedLoopSIMDSeqStore\u3067\u3042\u308b\u3002\u6b8b\u5ff5\u306a\u304c\u3089\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f...\n\n\n\n\n\u5b9f\u884c\u6642\u9593\n\n\n\n\nreference\n22674[ms]\n\n\nsimd_seq_store\n24222[ms]\n\n\n\n\n\u307e\u3068\u3081\n\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066LJ\u529b\u8a08\u7b97\u306eSIMD\u5316\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u65b9\u6cd5\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u300c\u6700\u5185\u30eb\u30fc\u30d7\uff14\u500d\u5c55\u958b\uff0b\u8ddd\u96e2\u8a08\u7b97\u306eSIMD\u5316+\u7c92\u5b50\u756a\u53f7\u306f\u9010\u6b21\u30b9\u30c8\u30a2\u300d\u3092\u884c\u3063\u3066\u307f\u305f\u3002\u6b21\u56de\u306f\u9010\u6b21\u30b9\u30c8\u30a2\u3092\u3057\u306a\u3044\u3084\u308a\u65b9\u3092\u7d39\u4ecb\u3057\u3001reference\u3088\u308a\u65e9\u304f\u3059\u308b\u3002\n#\u306f\u3058\u3081\u306b\nVerlet list\u69cb\u7bc9\u306eSIMD\u5316\u3092\u884c\u3063\u3066\u4e00\u5fdc\u5b8c\u6210\u3057\u305f\u306e\u3067\u30e1\u30e2\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://github.com/kohnakagawa/md_neighbor_list)\u306b\u3042\u308b\u3002\u3044\u304f\u3064\u304b\u6280\u8853\u7684\u56f0\u96e3\u304c\u3042\u3063\u305f\u306e\u3067\u4f55\u56de\u304b\u306b\u5206\u3051\u3066\u8a18\u4e8b\u3068\u3057\u3066\u6295\u7a3f\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\uff08\u306f\u3058\u3081\u306b\u8a00\u3063\u3066\u304a\u304f\u3068\u3001\u3053\u306e\u8a18\u4e8b\u306e\u901a\u308a\u306e\u9806\u756a\u306bSIMD\u5316\u3057\u305f\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u308b\u3068\u82e5\u5e72\u9055\u548c\u611f\u3092\u611f\u3058\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\uff09\n\n* CUDA\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306f[GPU\u3092\u7528\u3044\u305f\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u306b\u304a\u3051\u308bVerlet list\u69cb\u7bc9](http://qiita.com/kohnakagawa/items/76105c1e49a6fa92f9a0)\u3068[\u7d9a GPU\u3092\u7528\u3044\u305f\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u306b\u304a\u3051\u308bVerlet list\u69cb\u7bc9 ~\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\b\u7de8~](http://qiita.com/kohnakagawa/items/1229b49704becabaa526)\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n* \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f[\u3053\u3053](http://qiita.com/kaityo256/items/4bbad9ecbfa32aff8ed6)\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n#SIMD\u5316\u524d\u306e\u30b3\u30fc\u30c9\n\u307e\u305aSIMD\u5316\u3059\u308b\u307e\u3048\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\n```C++\nfor (int32_t icell = 0; icell < all_cell_; icell++) { // \u3059\u3079\u3066\u306eicell\u306b\u3064\u3044\u3066\n  const auto icell_beg = cell_pointer_[icell];    // icell\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u30c7\u30fc\u30bf\u306e\u5148\u982d\u30a2\u30c9\u30ec\u30b9\n  const auto icell_size = number_in_cell_[icell]; // icell\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u30c7\u30fc\u30bf\u306e\u7d42\u7aef\u30a2\u30c9\u30ec\u30b9\n  const int32_t* pid_of_neigh_cell_loc = &ptcl_id_of_neigh_cell_[icell][0]; // \u96a3\u63a5\u30bb\u30eb\u306b\u542b\u307e\u308c\u308b\u7c92\u5b50\u30c7\u30fc\u30bf\n  const int32_t num_of_neigh_cell = ptcl_id_of_neigh_cell_[icell].size(); // \u96a3\u63a5\u30bb\u30eb\u306b\u542b\u307e\u308c\u308b\u7c92\u5b50\u30c7\u30fc\u30bf\u6570\n  for (int32_t l = 0; l < icell_size; l++) { // icell\u306b\u3044\u308b\u3059\u3079\u3066\u306e\u7c92\u5b50\u306b\u3064\u3044\u3066\n    const auto i = l + icell_beg;\n    const auto qi = q[i];\n    for (int32_t k = l + 1; k < num_of_neigh_cell; k++) { //icell\u306e\u96a3\u63a5\u30bb\u30eb\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u7c92\u5b50\u306b\u3064\u3044\u3066\n      const auto j = pid_of_neigh_cell_loc[k];\n      RegistInteractPair(qi, q[j], i, j); // search_length_\u4ee5\u5185\u3067\u3042\u308c\u3070\u30da\u30a2\u3092Verlet list\u306b\u767b\u9332\n    }\n  }\n}\n```\n\n\u3053\u3053\u3067RegistInteractPair\u306e\u95a2\u6570\u5185\u3067\u306f\n1. \u4e8c\u3064\u306e\u7c92\u5b50\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n2. search_length_\u672a\u6e80\u3067\u3042\u308c\u3070\u7c92\u5b50i\u3068\u7c92\u5b50j\u306e\u756a\u53f7\u3092\u6607\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\n3. \u7c92\u5b50\u756a\u53f7\u304c\u5c0f\u3055\u3044\u65b9\u3092key_particles_\u3001\u7c92\u5b50\u756a\u53f7\u304c\u5927\u304d\u3044\u65b9\u3092partner_particles_\u306e\u914d\u5217\u306b\u305d\u308c\u305e\u308c\u30b9\u30c8\u30a2\n4. \u7c92\u5b50\u30da\u30a2\u306e\u6570\u3068\u3001key_particles_\u306b\u76f8\u4e92\u4f5c\u7528\u3057\u3066\u3044\u308b\u7c92\u5b50\u6570\u3092\u8a08\u7b97\n\u306e\u56db\u3064\u306e\u51e6\u7406\u3092\u884c\u3046\u3002\u5b9f\u88c5\u306f\u6b21\u306e\u901a\u308a\u306b\u306a\u308b\u3002\n\n```C++\nvoid RegistInteractPair(const Vec& qi,\n                        const Vec& qj,\n                        const int32_t index1,\n                        const int32_t index2) {\n  const auto dx = qj.x - qi.x;\n  const auto dy = qj.y - qi.y;\n  const auto dz = qj.z - qi.z;\n  const auto r2 = dx * dx + dy * dy + dz * dz; // \u4e8c\u7c92\u5b50\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n  if (r2 > search_length2_) return; // search_length\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u4ee5\u964d\u306e\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7\n  int i, j;\n  if (index1 < index2) { // index\u3092\u6607\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\u3002\n    i = index1;\n    j = index2;\n  } else {\n    i = index2;\n    j = index1;\n  }\n  key_particles_[number_of_pairs_] = i;     // <-SIMD\u5316\u3067\u304d\u308b\uff1f\n  partner_particles_[number_of_pairs_] = j; // <-SIMD\u5316\u3067\u304d\u308b\uff1f\n  number_of_partners_[i]++;                 // <-SIMD\u5316\u3067\u304d\u308b\uff1f\n  number_of_pairs_++;                       // <-SIMD\u5316\u3067\u304d\u308b\uff1f\n}\n```\n\n#\u307e\u305a\u8003\u3048\u308b\u3053\u3068\n\u3072\u3068\u307e\u305a\u6700\u5185\u30eb\u30fc\u30d7\u3092\uff14\u500d\u5c55\u958b\u3057\u3066SIMD\u5316\u3059\u308b\u65b9\u91dd\u3067\u3044\u304f\u3053\u3068\u306b\u3059\u308b\u3002\u3053\u306e\u90e8\u5206\u306f[LJ\u529b\u8a08\u7b97\u306eSIMD\u5316](http://qiita.com/kaityo256/items/34c371c6d040be1bdc30)\u3068\u540c\u3058\u3084\u308a\u65b9\u3002\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u300cSIMD\u5316\u3067\u304d\u308b\uff1f\u300d\u3068\u793a\u3057\u305f\u7b87\u6240\u306fSIMD\u5316\u304c\u96e3\u3057\u305d\u3046\u306a\u306e\u3067\u3072\u3068\u307e\u305a32bit\u305a\u3064\u30b9\u30c8\u30a2\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n#\u4e8c\u7c92\u5b50\u9593\u8ddd\u96e2\u306e\u8a08\u7b97\n[LJ\u529b\u8a08\u7b97\u306eSIMD\u5316](http://qiita.com/kaityo256/items/dacbe5a16abbc83eb107)\u3068\u5168\u304f\u540c\u3058\u3088\u3046\u306b\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092_mm256_load_pd\u3067\u4e00\u767a\u3067\u30ed\u30fc\u30c9\u3057\u305f\u306e\u3061\u3001\u76f8\u5bfe\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\u3059\u308b\u3002\n\n```c++\nconst auto ja = pid_of_neigh_cell_loc[k + l + 1];\nconst v4df vqja = _mm256_load_pd(reinterpret_cast<const double*>(q + ja));\nv4df dvqa = vqja - vqi;\n\nconst auto jb = pid_of_neigh_cell_loc[k + l + 2];\nconst v4df vqjb = _mm256_load_pd(reinterpret_cast<const double*>(q + jb));\nv4df dvqb = vqjb - vqi;\n\nconst auto jc = pid_of_neigh_cell_loc[k + l + 3];\nconst v4df vqjc = _mm256_load_pd(reinterpret_cast<const double*>(q + jc));\nv4df dvqc = vqjc - vqi;\n\nconst auto jd = pid_of_neigh_cell_loc[k + l + 4];\nconst v4df vqjd = _mm256_load_pd(reinterpret_cast<const double*>(q + jd));\nv4df dvqd = vqjd - vqi;\n```\n\n\uff14\u3064\u306e\u76f8\u5bfe\u30d9\u30af\u30c8\u30eb\u304b\u3089\uff14\u3064\u306e\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u305f\u3044\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306bshuffle\u547d\u4ee4\u3092\u7528\u3044\u3066\u76f8\u5bfe\u30d9\u30af\u30c8\u30eb\u306e\u30c7\u30fc\u30bf\u3092\u4e26\u3073\u66ff\u3048\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n```c++\ndvqa = {dxa, dya, dza, 0}  4x4transpose {dxa, dxb, dxc, dxd}\ndvqb = {dxb, dyb, dzb, 0}        ->     {dya, dyb, dyc, dyd}\ndvqc = {dxc, dyc, dzc, 0}               {dza, dzb, dzc, dzd}\ndvqd = {dxd, dyd, dzd, 0}               {  0,   0,   0,   0}\n```\n\n\u3053\u306e\u3042\u3068\u3001dvqa*dvqa + dvqb*dvqb + dvqc*dvqc \u30674\u3064\u306e\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n#\u30ab\u30c3\u30c8\u30aa\u30d5\u51e6\u7406\n\u3053\u306e\u3042\u3068\u3001\u3069\u306e\u756a\u53f7\u306e\u7c92\u5b50\u304csearch_length_\u4ee5\u5185\u306b\u3042\u308b\u306e\u304b\u3092\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306b\u306f\u6bd4\u8f03\u95a2\u6570\u3068\u3044\u3046\u3082\u306e\u3092\u7528\u3044\u308b\u3002\n\n```c++\n__m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8)\n```\n\n[Intel intrinsics guide](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm256_cmp_pd&expand=688)\u3092\u521d\u3081\u3066\u898b\u305f\u3068\u304d\u306f\u3061\u3087\u3063\u3068\u30ae\u30e7\u30c3\u3068\u3057\u3066\u3057\u307e\u3063\u305f\u304c\u30014\u3064\u306e\u500d\u7cbe\u5ea6\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u7b2c\u4e09\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u6bd4\u8f03\u6f14\u7b97\u3092\u5b9f\u884c\u3057\u3066\u3001true\u3067\u3042\u308c\u30700xFFFFFFFFFFFFFFFF\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u30700\u3092\u4ee3\u5165\u3057\u305f\u5024\u3092\u8fd4\u3059\u3002\u6bd4\u8f03\u6f14\u7b97\u306f32\u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u4eca\u884c\u3044\u305f\u3044\u306e\u306f\n\n```math\ndr^{2} \\le r^{2}_{s}\n```\n\n\u3067\u3042\u308a\u3001_CMP_LE_OS\u3068\u3044\u3046\u306e\u304c\u305d\u308c\u306b\u76f8\u5f53\u3059\u308b\u3088\u3046\u306a\u306e\u3067\u3001\n\n```c++\n// dr2_abcd\u306b\u306f\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u60c5\u5831\u304c\u7c92\u5b50\uff14\u3064\u5206\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n// vsl2\u306fsearch_length\u306e\u4e8c\u4e57\u306e\u30c7\u30fc\u30bf\u304c\uff14\u3064\u5206\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\nv4df dr2_flag = _mm256_cmp_pd(dr2_abcd, vsl2, _CMP_LE_OS);\n```\n\n\u3067$r_{s}$\u4ee5\u5185\u306b\u3042\u308b\u7c92\u5b50\u304c\u3069\u308c\u304b\u304c\u308f\u304b\u308b\u3002\n\u529b\u306e\u8a08\u7b97\u306e\u3068\u304d\u306b\u306f\u3001\u3053\u308c\u3092mask\u3068\u3057\u3066\u529b\u306e\u60c5\u5831\u30920\u30af\u30ea\u30a2\u3059\u308b\u306e\u3060\u304c\u3001\u3044\u307e\u306f$r_{s}$\u4ee5\u5185\u306b\u3044\u308b\u306e\u304b\u305d\u3046\u3067\u306a\u3044\u306e\u304b\u3060\u3051\u304c\u77e5\u308a\u305f\u3044\u3002256bit\u3082\u3044\u3089\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u309232bit\u30c7\u30fc\u30bf\u306b\u76f4\u3059\u305f\u3081\u306b\u6b21\u306e\u95a2\u6570\u3092\u7528\u3044\u308b\u3002\n\n```c++\nint _mm256_movemask_pd (__m256d a)\n```\n\n\u5148\u307b\u3069\u306emask\u3092\u3053\u306e\u95a2\u6570\u306b\u6e21\u3059\u3068\u4f8b\u3048\u3070\u3001\n\n```\n256 bit mask                                                        32 bit\nffffffffffffffff0000000000000000ffffffffffffffff0000000000000000 -> 00001010\n```\n\n\u3068\u306a\u308b\u3002\n\u3053\u306e\u5f8c\u3067\u5404\u30d3\u30c3\u30c8\u304c0\u304b1\u3067\u3042\u308b\u304b\u3092\u898b\u3066\u3084\u308c\u3070\u5404\u7c92\u5b50\u304c$r_{s}$\u4ee5\u5185\u306b\u3044\u308b\u306e\u304b\u3069\u3046\u304b\u304c\u5206\u304b\u308b\u3002\u53f3\u3078bit\u30b7\u30d5\u30c8\u3057\u3066\u3084\u308c\u3070\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u8a08\u7b97\u3067\u304d\u308b\u3002\n\n```c++\nint flag = _mm256_movemask_pd(mask);\nconst bool ja_in_range = flag & 1;\nif (ja_in_range) RegistInteractPair(qi, q[ja], i, ja);\n\nflag >>= 1;\nconst bool jb_in_range = flag & 1;\nif (jb_in_range) RegistInteractPair(qi, q[jb], i, jb);\n\nflag >>= 1;\nconst bool jc_in_range = flag & 1;\nif (jc_in_range) RegistInteractPair(qi, q[jc], i, jc);\n\nflag >>= 1;\nconst bool jd_in_range = flag & 1;\nif (jd_in_range) RegistInteractPair(qi, q[jd], i, jd);\n```\n\nbit shift\u3068mask\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u5404\u30d3\u30c3\u30c8\u304c1\u304b0\u3067\u3042\u308b\u304b\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u5f97\u3089\u308c\u305f\u30d3\u30c3\u30c8\u306b\u5fdc\u3058\u3066\u7c92\u5b50id\u306e\u60c5\u5831\u3092\u30b9\u30c8\u30a2\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u3092\u9010\u4e00\u5224\u65ad\u3057\u3066\u3044\u3051\u3070\u3088\u3044\u3002\n\n#\u7d50\u679c\n\u4e0a\u8a18\u306e\u3053\u3068\u3092\u8e0f\u307e\u3048\u3066\u5b9f\u88c5\u3057\u305f\u306e\u304c[\u3053\u308c](https://github.com/kohnakagawa/md_neighbor_list/blob/master/neighlist_cpu_simd.hpp)\u306eMakePairListFusedLoopSIMDSeqStore\u3067\u3042\u308b\u3002\u6b8b\u5ff5\u306a\u304c\u3089\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f...\n\n|  | \u5b9f\u884c\u6642\u9593 |\n|:-:|:-:|\n|reference| 22674[ms]  |\n|simd_seq_store|  24222[ms] |\n\n#\u307e\u3068\u3081\n\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066[LJ\u529b\u8a08\u7b97\u306eSIMD\u5316](http://qiita.com/kaityo256/items/dacbe5a16abbc83eb107)\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u65b9\u6cd5\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u300c\u6700\u5185\u30eb\u30fc\u30d7\uff14\u500d\u5c55\u958b\uff0b\u8ddd\u96e2\u8a08\u7b97\u306eSIMD\u5316+\u7c92\u5b50\u756a\u53f7\u306f\u9010\u6b21\u30b9\u30c8\u30a2\u300d\u3092\u884c\u3063\u3066\u307f\u305f\u3002\u6b21\u56de\u306f\u9010\u6b21\u30b9\u30c8\u30a2\u3092\u3057\u306a\u3044\u3084\u308a\u65b9\u3092\u7d39\u4ecb\u3057\u3001reference\u3088\u308a\u65e9\u304f\u3059\u308b\u3002\n", "tags": ["C++", "AVX2", "AVX"]}