{"context": "\u4eca\u56de\u306f\u3001\u524d\u56de\u306e\u6295\u7a3f\u304b\u3089\u5f15\u304d\u7d9a\u304d\u3001Spring MVC\u30d9\u30fc\u30b9\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067Servlet 3.0\u304b\u3089\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u305f\u975e\u540c\u671f\u51e6\u7406\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306e\u8aac\u660e\u3092\u884c\u3044\u307e\u3059\u3002\u524d\u56de\u306f\u300c\u975e\u540c\u671f\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u3066\u304b\u3089HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u65b9\u5f0f\u300d\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u300c\u975e\u540c\u671f\u5b9f\u884c\u306e\u51e6\u7406\u4e2d\u306bHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u65b9\u5f0f\u300d\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002Spring MVC\u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u65b9\u5f0f\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u52d5\u4f5c\u78ba\u8a8d\u74b0\u5883\n\nJava SE 8\nTomcat 8.5.5 (Servlet 3.1)\nSpring Framework 4.3.3.RELESAE\nSpring Boot 1.4.1.RELEASE\n\n\n\u524d\u63d0\u77e5\u8b58\n\n\u300cSpring MVC(+Spring Boot)\u4e0a\u3067\u306e\u975e\u540c\u671f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u7406\u89e3\u3059\u308b -\u524d\u7de8-\u300d\n\n\nSpring MVC\u3067Push\u578b\u306e\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\u975e\u540c\u671f\u5b9f\u884c\u306e\u51e6\u7406\u4e2d\u306bHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u65b9\u5f0f\u306f\u3001\u3072\u3068\u3064\u306eHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8907\u6570\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u5206\u5272\u3057\u3066\u8fd4\u5374(Push)\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\"HTTP Streaming\"\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u65b9\u5f0f\u3067\u3059\u3002\u307e\u305a\u306f\u3001Spring MVC\u3067Push\u578b\u306e\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\npackage com.example.component;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter;\n\nimport java.io.IOException;\n\n@Controller\n@RequestMapping(\"/streaming\")\npublic class StreamingController {\n\n    @Autowired\n    AsyncHelper asyncHelper;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ResponseBodyEmitter streaming(@RequestParam(defaultValue = \"1\") long eventNumber, @RequestParam(defaultValue = \"0\") long intervalSec) throws IOException {\n        Console.println(\"Start get.\");\n\n        ResponseBodyEmitter emitter = new ResponseBodyEmitter();\n        asyncHelper.streaming(emitter, eventNumber, intervalSec);\n\n        Console.println(\"End get.\");\n        return emitter;\n    }\n\n}\n\n@Component\npublic class AsyncHelper {\n    // ...\n    @Async\n    public void streaming(ResponseBodyEmitter emitter, long eventNumber, long intervalSec) throws IOException {\n        Console.println(\"Start Async processing.\");\n\n        for (long i = 1; i <= eventNumber; i++) {\n            sleep(intervalSec);\n            emitter.send(\"msg\" + i + \"\\r\\n\");\n        }\n\n        emitter.complete();\n\n        Console.println(\"End Async processing.\");\n    }\n    // ...\n}\n\ncURL\u3084\u30d6\u30e9\u30a6\u30b6\u3092\u4f7f\u7528\u3057\u3066\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30011\u79d2\u9593\u9694\u30672\u56de\u306e\u30a4\u30d9\u30f3\u30c8(\u30e1\u30c3\u30bb\u30fc\u30b8)\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306bPush\u3057\u307e\u3059\u3002\n$ curl -D - http://localhost:8080/streaming?eventNumber=2\\&intervalSec=1\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:00:22 GMT\n\nmsg1\nmsg2\n\n\n\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u8868\u73fe\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u300c(1\u79d2\u5f85\u6a5f) -> msg1 -> (1\u79d2\u5f85\u6a5f) -> msg2\u300d\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\nSpring MVC\u306ePush\u578b\u975e\u540c\u671f\u51e6\u7406\u3092\u7d10\u89e3\u304f\n\u57fa\u672c\u7684\u306a\u4ed5\u7d44\u307f\u306f\u300c\u975e\u540c\u671f\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u3066\u304b\u3089HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u65b9\u5f0f\u300d\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u975e\u540c\u671f\u51e6\u7406\u4e2d\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u7d75\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001Controller\u306e\u51e6\u7406\u304c\u7d42\u4e86\u3057\u305f\u5f8c\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u3044\u3063\u305f\u3093\u30d5\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u3067\u3001\u5206\u5272\u30ec\u30b9\u30dd\u30f3\u30b9(Transfer-Encoding: chunked)\u306b\u306a\u308b\u3053\u3068\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u901a\u77e5\u3057\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\u4ee5\u964d\u306e\u51e6\u7406\u3067\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30c7\u30fc\u30bf\u304c\u5206\u5272\u3057\u3066\u9001\u3089\u308c\u3066\u304f\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u51e6\u7406\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u7d75\u306b\u306f\u8868\u73fe\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306bPush\u3059\u308b\u30c7\u30fc\u30bf\u306fHttpMessageConverter\u306b\u3088\u3063\u3066\u5909\u63db\u3055\u308c\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002HttpMessageConverter\u3092\u5229\u7528\u3059\u308b\u3068\u3001Jackson\u3092\u4f7f\u7528\u3057\u3066JavaBean\u3092JSON\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30c7\u30fc\u30bf\u3092Push\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nSseEmitter\u306e\u5229\u7528\nResponseBodyEmitter\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066Server-Sent Events(SSE)\u306e\u30b5\u30fc\u30d0\u30fc\u5b9f\u88c5\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002Spring MVC\u306f\u3001SSE\u306e\u5b9f\u88c5\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30af\u30e9\u30b9\u3068\u3057\u3066SseEmitter\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002SseEmitter\u306fResponseBodyEmitter\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3001HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u30bf\u30a4\u30d7(text/event-stream)\u3068\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u62e1\u5f35\u3057\u3066\u3044\u307e\u3059\u3002\npackage com.example.component;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.io.IOException;\n\n@Controller\n@RequestMapping(\"/sse\")\npublic class SseController {\n\n    @Autowired\n    AsyncHelper asyncHelper;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public SseEmitter sse(@RequestParam(defaultValue = \"1\") long eventNumber, @RequestParam(defaultValue = \"0\") long intervalSec) throws IOException {\n        Console.println(\"Start get.\");\n\n        SseEmitter emitter = new SseEmitter();\n        asyncHelper.sse(emitter, eventNumber, intervalSec);\n\n        Console.println(\"End get.\");\n        return emitter;\n    }\n\n}\n\n@Component\npublic class AsyncHelper {\n    // ...\n    @Async\n    public void sse(SseEmitter emitter, long eventNumber, long intervalSec) throws IOException {\n        Console.println(\"Start Async processing.\");\n\n        for (long i = 1; i <= eventNumber; i++) {\n            sleep(intervalSec);\n            emitter.send(\"msg\" + i);\n        }\n\n        emitter.complete();\n\n        Console.println(\"End Async processing.\");\n    }\n    // ...\n}\n\ncURL\u3084\u30d6\u30e9\u30a6\u30b6\u3092\u4f7f\u7528\u3057\u3066SSE\u51e6\u7406\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30011\u79d2\u9593\u9694\u30672\u56de\u306eSSE\u30a4\u30d9\u30f3\u30c8\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306bPush\u3057\u307e\u3059\u3002\n$ curl -D - http://localhost:8080/sse?eventNumber=2\\&intervalSec=1\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:30:25 GMT\n\ndata:msg1\n\ndata:msg2\n\n\n\n\n\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u6307\u5b9a\nSSE\u306e\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u306fdata\u4ee5\u5916\u306b\u3082\u3044\u304f\u3064\u304b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f\u3001SseEventBuilder\u3092\u4f7f\u3044\u307e\u3059\u3002SseEventBuilder\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001SseEmitter#event\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nemitter.send(SseEmitter.event()\n        .comment(\"This is test event\")\n        .id(UUID.randomUUID().toString())\n        .name(\"onlog\")\n        .reconnectTime(3000)\n        .data(\"msg\" + i));\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:31:35 GMT\n\n:This is test event\nid:c62ae77f-85fe-41ac-bfff-c03b0020a816\nevent:onlog\nretry:3000\ndata:msg1\n\n:This is test event\nid:d283757e-9d67-4be5-b858-3c6b543c7b5d\nevent:onlog\nretry:3000\ndata:msg2\n\n\n\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u306e\u6307\u5b9a\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u306f\u3001\u524d\u56de\u7d39\u4ecb\u3057\u305f\u3068\u304a\u308aSpring MVC\u5074\u306e\u8a2d\u5b9a\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u51e6\u7406\u6bce\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n@RequestMapping(method = RequestMethod.GET)\npublic SseEmitter sse(@RequestParam(defaultValue = \"1\") long eventNumber, @RequestParam(defaultValue = \"0\") long intervalSec) throws IOException {\n    // ....\n    SseEmitter emitter = new SseEmitter(0L);\n    // ...\n    return emitter;\n}\n\nResponseBodyEmitter\u3082\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u52d5\u4f5c\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\n$ curl -D - http://localhost:8080/sse?eventNumber=2\\&intervalSec=2\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:35:27 GMT\n\n:This is test event\nid:ff6799cc-0a35-4bde-95b8-5bc1b621abcf\nevent:onlog\nretry:3000\ndata:msg1\n\n{\"timestamp\":\"2016-10-05T16:35:31.060+0000\",\"status\":200,\"error\":\"OK\",\"exception\":\"org.springframework.web.context.request.async.AsyncRequestTimeoutException\",\"message\":\"No message available\",\"path\":\"/sse\"}\n\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u308b\u3068AsyncRequestTimeoutException\u304c\u767a\u751f\u3059\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001Spring MVC\u306e\u52d5\u4f5c\u3068\u3057\u3066\u306f\u6b63\u3057\u305d\u3046\u3067\u3059\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u306f\u306a\u304fJSON\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u901a\u77e5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u901a\u77e5\nController\u30af\u30e9\u30b9\u3067AsyncRequestTimeoutException\u306e\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001SseEventBuilder\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30c7\u30fc\u30bf\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3057\u3066\u3044\u307e\u3059\u3002\n@Controller\n@RequestMapping(\"/sse\")\npublic class SseController {\n    private static final Logger logger = LoggerFactory.getLogger(SseController.class);\n    // ...\n    @ExceptionHandler\n    @ResponseBody\n    public String handleAsyncRequestTimeoutException(AsyncRequestTimeoutException e) {\n        logger.error(\"timeout error is occurred.\", e);\n        return SseEmitter.event().data(\"timeout!!\").build().stream()\n                .map(d -> d.getData().toString())\n                .collect(Collectors.joining());\n    }\n}\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u767a\u751f\u3055\u305b\u308b\u3068\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u901a\u77e5\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:46:31 GMT\n\ndata:msg1\n\ndata:timeout!!\n\n\n\n\n\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\u975e\u540c\u671f\u51e6\u7406\u306e\u4e2d\u3067\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3068\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u304c\u691c\u77e5\u3055\u308c\u308b\u307e\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u306e\u901a\u4fe1\u304c\u7d42\u4e86\u3057\u307e\u305b\u3093\u3002\u305f\u3081\u3057\u306b\u975e\u540c\u671f\u51e6\u7406\u306e\u4e2d\u3067\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n@Component\npublic class AsyncHelper {\n    // ...\n    @Async\n    public void sse(SseEmitter emitter, long eventNumber, long intervalSec) throws IOException {\n        Console.println(\"Start Async processing.\");\n\n        if (intervalSec == 999) {\n            throw new IllegalStateException(\"Special parameter for confirm error.\");\n        }\n        // ...\n    }\n    // ...\n}\n\n$ curl -D - http://localhost:8080/sse?eventNumber=2\\&intervalSec=999\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:48:46 GMT\n\ndata:timeout!!\n\n\n\n\u3053\u308c\u306f\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u4e2d\u3067\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u4f8b\u5916\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u305f\u5f8c\u306e\u51e6\u7406\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u306e\uff12\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nsend\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u500b\u5225\u306b\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3059\u308b\nSpring MVC\u306eExceptionResolver\u306e\u4ed5\u7d44\u307f\u3068\u9023\u643a\u3057\u3066\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3059\u308b\n\n\n\u500b\u5225\u306b\u30a8\u30e9\u30fc\u3092\u901a\u77e5\n\u500b\u5225\u306b\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3001send\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3057\u307e\u3059\u3002\ntry {\n    // ...\n} catch (Exception e) {\n    logger.error(\"system error is occurred.\"e);\n    emitter.send(\"error !!\");\n    emitter.complete();\n    return;\n}\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:51:38 GMT\n\ndata:error !!\n\n\n\n\nExceptionResolver\u306e\u4ed5\u7d44\u307f\u3068\u9023\u643a\u3057\u3066\u30a8\u30e9\u30fc\u3092\u901a\u77e5\nExceptionResolver\u306e\u4ed5\u7d44\u307f\u3068\u9023\u643a\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3001completeWithError\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3057\u307e\u3059\u3002\ntry {\n    // ...\n} catch (Exception e) {\n    emitter.completeWithError(e);\n    return;\n}\n\ncompleteWithError\u30e1\u30bd\u30c3\u30c9\u306b\u4f8b\u5916\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001Spring MVC\u306eExceptionResolver\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u3067\u3001Controller\u30af\u30e9\u30b9\u3067\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001SseEventBuilder\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30c7\u30fc\u30bf\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3057\u3066\u3044\u307e\u3059\u3002\n@Controller\n@RequestMapping(\"/sse\")\npublic class SseController {\n    private static final Logger logger = LoggerFactory.getLogger(SseController.class);\n    // ...\n    @ExceptionHandler\n    @ResponseBody\n    public String handleException(Exception e) {\n        logger.error(\"system error is occurred.\", e);\n        return SseEmitter.event().data(\"error !!\").build().stream()\n                .map(d -> d.getData().toString())\n                .collect(Collectors.joining());\n    }\n}\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Sun, 22 May 2016 18:30:11 GMT\n\ndata:error !!\n\n\n\n\nStreamingResponseBody\u306e\u5229\u7528\nSpring MVC\u306f\u3001HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u306eOutputStream\u306b\u76f4\u63a5\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u4ed5\u7d44\u307f\u306f\u3001\u524d\u56de\u7d39\u4ecb\u3057\u305fCallable\u5229\u7528\u6642\u3068\u540c\u69d8\u306b\u3001Spring MVC\u7ba1\u7406\u4e0b\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n@Controller\n@RequestMapping(\"/streaming\")\npublic class StreamingController {\n\n    @RequestMapping(path = \"direct\", method = RequestMethod.GET)\n    public StreamingResponseBody directStreaming(@RequestParam(defaultValue = \"1\") long eventNumber, @RequestParam(defaultValue = \"0\") long intervalSec) throws IOException {\n        Console.println(\"Start get.\");\n\n        // StreamingResponseBody\u306ewriteTo\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u306b\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\n        // StreamingResponseBody\u306f\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306a\u306e\u3067Java SE 8+\u306a\u3089\u30e9\u30e0\u30c0\u5f0f\u304c\u4f7f\u3048\u307e\u3059\u3002\n        StreamingResponseBody responseBody = outputStream -> {\n            Console.println(\"Start Async processing.\");\n\n            if (intervalSec == 999) {\n                throw new IllegalStateException(\"Special parameter for confirm error.\");\n            }\n\n            for (long i = 1; i <= eventNumber; i++) {\n                try {\n                    TimeUnit.SECONDS.sleep(intervalSec);\n                } catch (InterruptedException e) {\n                    Thread.interrupted();\n                }\n                outputStream.write((\"msg\" + i + \"\\r\\n\").getBytes());\n                outputStream.flush();\n            }\n\n            Console.println(\"End Async processing.\");\n        };\n\n        Console.println(\"End get.\");\n        return responseBody;\n    }\n}\n\n$ curl -D - http://localhost:8080/streaming/direct?eventNumber=2\\&intervalSec=1\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:53:43 GMT\n\nmsg1\nmsg2\n\n\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\n$ curl -D - http://localhost:8080/streaming/direct?eventNumber=2\\&intervalSec=2\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:54:40 GMT\n\nmsg1\n{\"timestamp\":\"2016-10-05T16:54:41.902+0000\",\"status\":200,\"error\":\"OK\",\"exception\":\"org.springframework.web.context.request.async.AsyncRequestTimeoutException\",\"message\":\"No message available\",\"path\":\"/streaming/direct\"}\n\n\n\u30a8\u30e9\u30fc\u6642\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b@ExceptionHandler\u3092\u4f7f\u7528\u3057\u3066AsyncRequestTimeoutException\u3092\u534a\u304a\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\n@Controller\n@RequestMapping(\"/streaming\")\npublic class StreamingController {\n    private static final Logger logger = LoggerFactory.getLogger(StreamingController.class);\n    // ...\n    @ExceptionHandler\n    @ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)\n    @ResponseBody\n    public String handleAsyncRequestTimeoutException(AsyncRequestTimeoutException e) {\n        logger.error(\"Timeout error is occurred.\", e);\n        return \"timeout!!\";\n    }\n    // ...\n}\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u767a\u751f\u3055\u305b\u308b\u3068\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u901a\u77e5\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 17:01:53 GMT\n\nmsg1\ntimeout!!\n\n\n\n\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\u975e\u540c\u671f\u51e6\u7406\u5185\u3067\u767a\u751f\u3057\u305f\u4f8b\u5916\u306f\u3001Spring MVC\u306eExceptionResolver\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3055\u308c\u308b\u305f\u3081\u3001StreamingResponseBody\u72ec\u81ea\u306e\u5b9f\u88c5\u306f\u4e0d\u8981\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001@ExceptionHandler\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n@Controller\n@RequestMapping(\"/streaming\")\npublic class StreamingController {\n    private static final Logger logger = LoggerFactory.getLogger(StreamingController.class);\n    // ...\n    @ExceptionHandler\n    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n    @ResponseBody\n    public String handleException(Exception e) {\n        logger.error(\"System error is occurred.\", e);\n        return \"error!!\";\n    }\n}\n\n\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b\u3068\u3001\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 500 \nContent-Type: text/plain;charset=UTF-8\nContent-Length: 7\nDate: Wed, 05 Oct 2016 17:06:50 GMT\nConnection: close\n\nerror!!\n\n\n\nSpring Boot\u4e0a\u3067\u306e\u5b9f\u88c5\nSpring Boot\u72ec\u81ea\u306e\u4ed5\u7d44\u307f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\uff08\u3053\u308c\u307e\u3067\u8aac\u660e\u3057\u3066\u304d\u305f\u5185\u5bb9\u306f\u3001Spring Boot\u4e0a\u3067\u52d5\u304b\u3057\u3066\u3044\u307e\u3059w\uff09\n\n\u307e\u3068\u3081\n\uff12\u56de\u306b\u308f\u3051\u3066Spring MVC\u30d9\u30fc\u30b9\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067Servlet 3.0\u304b\u3089\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u305f\u975e\u540c\u671f\u51e6\u7406\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u4eca\u56de\u7d39\u4ecb\u3057\u305f\u65b9\u5f0f\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30c7\u30fc\u30bf\u3092\u9001\u4fe1(Push)\u3057\u305f\u3044\u5834\u5408\u306b\u5229\u7528\u3059\u308b\u65b9\u5f0f\u3067\u3059\u3002\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u6709\u540d\u306a\u306e\u304cWebSokcet\u3067\u3059\u3002Java\u3067\u3082Java EE 7\u304b\u3089WebSokcet\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u304a\u308a\u3001Tomcat\u306a\u3069\u306eAP\u30b5\u30fc\u30d0\u30fc\u4e0a\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Spring\u3082WebScoket\u3068\u306e\u9023\u643a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u304a\u308a\u3001WebSokcet\u30a2\u30d7\u30ea\u3092Spring\u30b9\u30bf\u30a4\u30eb\u3067\u958b\u767a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Spring\u4e0a\u3067\u306eWebSokcet\u306e\u958b\u767a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u3069\u3053\u304b\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u305f\u3076\u3093\u3082\u3046\u3061\u3087\u3063\u3068\u5148\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u30fb\u30fb\u30fb  \n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\nhttp://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-async\nhttp://qiita.com/kazuki43zoo/items/ce88dea403c596249e8a\n\n\u4eca\u56de\u306f\u3001[\u524d\u56de\u306e\u6295\u7a3f](http://qiita.com/kazuki43zoo/items/ce88dea403c596249e8a)\u304b\u3089\u5f15\u304d\u7d9a\u304d\u3001Spring MVC\u30d9\u30fc\u30b9\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067Servlet 3.0\u304b\u3089\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u305f\u975e\u540c\u671f\u51e6\u7406\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306e\u8aac\u660e\u3092\u884c\u3044\u307e\u3059\u3002\u524d\u56de\u306f\u300c\u975e\u540c\u671f\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u3066\u304b\u3089HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u65b9\u5f0f\u300d\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u300c\u975e\u540c\u671f\u5b9f\u884c\u306e\u51e6\u7406\u4e2d\u306bHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u65b9\u5f0f\u300d\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002Spring MVC\u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u65b9\u5f0f\u306b\u3064\u3044\u3066\u306f\u3001[\u3053\u3061\u3089](http://qiita.com/kazuki43zoo/items/ce88dea403c596249e8a#spring-mvc%E3%81%8C%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%AE%E6%96%B9%E5%BC%8F)\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n# \u52d5\u4f5c\u78ba\u8a8d\u74b0\u5883\n\n* Java SE 8\n* Tomcat 8.5.5 (Servlet 3.1)\n* Spring Framework 4.3.3.RELESAE\n* Spring Boot 1.4.1.RELEASE\n\n# \u524d\u63d0\u77e5\u8b58\n\n* \u300c[Spring MVC(+Spring Boot)\u4e0a\u3067\u306e\u975e\u540c\u671f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u7406\u89e3\u3059\u308b -\u524d\u7de8-](http://qiita.com/kazuki43zoo/items/ce88dea403c596249e8a)\u300d\n\n# Spring MVC\u3067Push\u578b\u306e\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\n\u975e\u540c\u671f\u5b9f\u884c\u306e\u51e6\u7406\u4e2d\u306bHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u65b9\u5f0f\u306f\u3001\u3072\u3068\u3064\u306eHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8907\u6570\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u5206\u5272\u3057\u3066\u8fd4\u5374(Push)\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\"HTTP Streaming\"\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u65b9\u5f0f\u3067\u3059\u3002\u307e\u305a\u306f\u3001Spring MVC\u3067Push\u578b\u306e\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java\npackage com.example.component;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter;\n\nimport java.io.IOException;\n\n@Controller\n@RequestMapping(\"/streaming\")\npublic class StreamingController {\n\n    @Autowired\n    AsyncHelper asyncHelper;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ResponseBodyEmitter streaming(@RequestParam(defaultValue = \"1\") long eventNumber, @RequestParam(defaultValue = \"0\") long intervalSec) throws IOException {\n        Console.println(\"Start get.\");\n\n        ResponseBodyEmitter emitter = new ResponseBodyEmitter();\n        asyncHelper.streaming(emitter, eventNumber, intervalSec);\n\n        Console.println(\"End get.\");\n        return emitter;\n    }\n\n}\n```\n```java\n@Component\npublic class AsyncHelper {\n    // ...\n    @Async\n    public void streaming(ResponseBodyEmitter emitter, long eventNumber, long intervalSec) throws IOException {\n        Console.println(\"Start Async processing.\");\n\n        for (long i = 1; i <= eventNumber; i++) {\n            sleep(intervalSec);\n            emitter.send(\"msg\" + i + \"\\r\\n\");\n        }\n\n        emitter.complete();\n\n        Console.println(\"End Async processing.\");\n    }\n    // ...\n}\n```\n\ncURL\u3084\u30d6\u30e9\u30a6\u30b6\u3092\u4f7f\u7528\u3057\u3066\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30011\u79d2\u9593\u9694\u30672\u56de\u306e\u30a4\u30d9\u30f3\u30c8(\u30e1\u30c3\u30bb\u30fc\u30b8)\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306bPush\u3057\u307e\u3059\u3002\n\n```bash\n$ curl -D - http://localhost:8080/streaming?eventNumber=2\\&intervalSec=1\n```\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:00:22 GMT\n\nmsg1\nmsg2\n```\n\n\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u8868\u73fe\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u300c(1\u79d2\u5f85\u6a5f) -> `msg1` -> (1\u79d2\u5f85\u6a5f) -> `msg2`\u300d\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n# Spring MVC\u306ePush\u578b\u975e\u540c\u671f\u51e6\u7406\u3092\u7d10\u89e3\u304f\n\n\u57fa\u672c\u7684\u306a\u4ed5\u7d44\u307f\u306f\u300c\u975e\u540c\u671f\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u3066\u304b\u3089HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u65b9\u5f0f\u300d\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u975e\u540c\u671f\u51e6\u7406\u4e2d\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u958b\u59cb\u3059\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u7d75\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n![spring-mvc-async-streaming.png](https://qiita-image-store.s3.amazonaws.com/0/117313/3c45f797-3207-1ce6-7aad-76169cead503.png)\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001Controller\u306e\u51e6\u7406\u304c\u7d42\u4e86\u3057\u305f\u5f8c\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u3044\u3063\u305f\u3093\u30d5\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u3067\u3001\u5206\u5272\u30ec\u30b9\u30dd\u30f3\u30b9(`Transfer-Encoding: chunked`)\u306b\u306a\u308b\u3053\u3068\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u901a\u77e5\u3057\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\u4ee5\u964d\u306e\u51e6\u7406\u3067\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30c7\u30fc\u30bf\u304c\u5206\u5272\u3057\u3066\u9001\u3089\u308c\u3066\u304f\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u51e6\u7406\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u7d75\u306b\u306f\u8868\u73fe\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306bPush\u3059\u308b\u30c7\u30fc\u30bf\u306f`HttpMessageConverter`\u306b\u3088\u3063\u3066\u5909\u63db\u3055\u308c\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002`HttpMessageConverter`\u3092\u5229\u7528\u3059\u308b\u3068\u3001Jackson\u3092\u4f7f\u7528\u3057\u3066JavaBean\u3092JSON\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30c7\u30fc\u30bf\u3092Push\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# SseEmitter\u306e\u5229\u7528\n\n\n`ResponseBodyEmitter`\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066[Server-Sent Events(SSE)](https://www.w3.org/TR/eventsource/)\u306e\u30b5\u30fc\u30d0\u30fc\u5b9f\u88c5\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002Spring MVC\u306f\u3001SSE\u306e\u5b9f\u88c5\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30af\u30e9\u30b9\u3068\u3057\u3066`SseEmitter`\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002`SseEmitter`\u306f`ResponseBodyEmitter`\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3001HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u30bf\u30a4\u30d7(`text/event-stream`)\u3068\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u62e1\u5f35\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java\npackage com.example.component;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.io.IOException;\n\n@Controller\n@RequestMapping(\"/sse\")\npublic class SseController {\n\n    @Autowired\n    AsyncHelper asyncHelper;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public SseEmitter sse(@RequestParam(defaultValue = \"1\") long eventNumber, @RequestParam(defaultValue = \"0\") long intervalSec) throws IOException {\n        Console.println(\"Start get.\");\n\n        SseEmitter emitter = new SseEmitter();\n        asyncHelper.sse(emitter, eventNumber, intervalSec);\n\n        Console.println(\"End get.\");\n        return emitter;\n    }\n\n}\n```\n```java\n@Component\npublic class AsyncHelper {\n    // ...\n    @Async\n    public void sse(SseEmitter emitter, long eventNumber, long intervalSec) throws IOException {\n        Console.println(\"Start Async processing.\");\n\n        for (long i = 1; i <= eventNumber; i++) {\n            sleep(intervalSec);\n            emitter.send(\"msg\" + i);\n        }\n\n        emitter.complete();\n\n        Console.println(\"End Async processing.\");\n    }\n    // ...\n}\n```\n\ncURL\u3084\u30d6\u30e9\u30a6\u30b6\u3092\u4f7f\u7528\u3057\u3066SSE\u51e6\u7406\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30011\u79d2\u9593\u9694\u30672\u56de\u306eSSE\u30a4\u30d9\u30f3\u30c8\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306bPush\u3057\u307e\u3059\u3002\n\n```bash\n$ curl -D - http://localhost:8080/sse?eventNumber=2\\&intervalSec=1\n```\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:30:25 GMT\n\ndata:msg1\n\ndata:msg2\n\n```\n\n## \u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u6307\u5b9a\n\nSSE\u306e\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u306f`data`\u4ee5\u5916\u306b\u3082\u3044\u304f\u3064\u304b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f\u3001`SseEventBuilder`\u3092\u4f7f\u3044\u307e\u3059\u3002`SseEventBuilder`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001`SseEmitter#event`\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```java\nemitter.send(SseEmitter.event()\n        .comment(\"This is test event\")\n        .id(UUID.randomUUID().toString())\n        .name(\"onlog\")\n        .reconnectTime(3000)\n        .data(\"msg\" + i));\n```\n\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:31:35 GMT\n\n:This is test event\nid:c62ae77f-85fe-41ac-bfff-c03b0020a816\nevent:onlog\nretry:3000\ndata:msg1\n\n:This is test event\nid:d283757e-9d67-4be5-b858-3c6b543c7b5d\nevent:onlog\nretry:3000\ndata:msg2\n\n```\n\n## \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u306e\u6307\u5b9a\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u306f\u3001\u524d\u56de\u7d39\u4ecb\u3057\u305f\u3068\u304a\u308aSpring MVC\u5074\u306e\u8a2d\u5b9a\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u51e6\u7406\u6bce\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n```java\n@RequestMapping(method = RequestMethod.GET)\npublic SseEmitter sse(@RequestParam(defaultValue = \"1\") long eventNumber, @RequestParam(defaultValue = \"0\") long intervalSec) throws IOException {\n    // ....\n    SseEmitter emitter = new SseEmitter(0L);\n    // ...\n    return emitter;\n}\n```\n\n`ResponseBodyEmitter`\u3082\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n## \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u52d5\u4f5c\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\n\n```bash\n$ curl -D - http://localhost:8080/sse?eventNumber=2\\&intervalSec=2\n```\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:35:27 GMT\n\n:This is test event\nid:ff6799cc-0a35-4bde-95b8-5bc1b621abcf\nevent:onlog\nretry:3000\ndata:msg1\n\n{\"timestamp\":\"2016-10-05T16:35:31.060+0000\",\"status\":200,\"error\":\"OK\",\"exception\":\"org.springframework.web.context.request.async.AsyncRequestTimeoutException\",\"message\":\"No message available\",\"path\":\"/sse\"}\n```\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u308b\u3068`AsyncRequestTimeoutException`\u304c\u767a\u751f\u3059\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001Spring MVC\u306e\u52d5\u4f5c\u3068\u3057\u3066\u306f\u6b63\u3057\u305d\u3046\u3067\u3059\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u306f\u306a\u304fJSON\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u901a\u77e5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n### \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u901a\u77e5\n\nController\u30af\u30e9\u30b9\u3067`AsyncRequestTimeoutException`\u306e\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001`SseEventBuilder`\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30c7\u30fc\u30bf\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java\n@Controller\n@RequestMapping(\"/sse\")\npublic class SseController {\n    private static final Logger logger = LoggerFactory.getLogger(SseController.class);\n    // ...\n    @ExceptionHandler\n    @ResponseBody\n    public String handleAsyncRequestTimeoutException(AsyncRequestTimeoutException e) {\n        logger.error(\"timeout error is occurred.\", e);\n        return SseEmitter.event().data(\"timeout!!\").build().stream()\n                .map(d -> d.getData().toString())\n                .collect(Collectors.joining());\n    }\n}\n```\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u767a\u751f\u3055\u305b\u308b\u3068\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u901a\u77e5\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\n\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:46:31 GMT\n\ndata:msg1\n\ndata:timeout!!\n\n```\n\n## \u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\n\u975e\u540c\u671f\u51e6\u7406\u306e\u4e2d\u3067\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3068\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u304c\u691c\u77e5\u3055\u308c\u308b\u307e\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u306e\u901a\u4fe1\u304c\u7d42\u4e86\u3057\u307e\u305b\u3093\u3002\u305f\u3081\u3057\u306b\u975e\u540c\u671f\u51e6\u7406\u306e\u4e2d\u3067\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java\n@Component\npublic class AsyncHelper {\n    // ...\n    @Async\n    public void sse(SseEmitter emitter, long eventNumber, long intervalSec) throws IOException {\n        Console.println(\"Start Async processing.\");\n\n        if (intervalSec == 999) {\n            throw new IllegalStateException(\"Special parameter for confirm error.\");\n        }\n        // ...\n    }\n    // ...\n}\n```\n\n```bash\n$ curl -D - http://localhost:8080/sse?eventNumber=2\\&intervalSec=999\n```\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:48:46 GMT\n\ndata:timeout!!\n\n```\n\n\u3053\u308c\u306f\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u4e2d\u3067\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u4f8b\u5916\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u305f\u5f8c\u306e\u51e6\u7406\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u306e\uff12\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n* `send`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u500b\u5225\u306b\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3059\u308b\n* Spring MVC\u306e`ExceptionResolver`\u306e\u4ed5\u7d44\u307f\u3068\u9023\u643a\u3057\u3066\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3059\u308b\n\n### \u500b\u5225\u306b\u30a8\u30e9\u30fc\u3092\u901a\u77e5\n\n\u500b\u5225\u306b\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3001`send`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3057\u307e\u3059\u3002\n\n```java\ntry {\n    // ...\n} catch (Exception e) {\n    logger.error(\"system error is occurred.\"e);\n    emitter.send(\"error !!\");\n    emitter.complete();\n    return;\n}\n```\n\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:51:38 GMT\n\ndata:error !!\n\n```\n\n### ExceptionResolver\u306e\u4ed5\u7d44\u307f\u3068\u9023\u643a\u3057\u3066\u30a8\u30e9\u30fc\u3092\u901a\u77e5\n\n`ExceptionResolver`\u306e\u4ed5\u7d44\u307f\u3068\u9023\u643a\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3001`completeWithError`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3057\u307e\u3059\u3002\n\n```java\ntry {\n    // ...\n} catch (Exception e) {\n    emitter.completeWithError(e);\n    return;\n}\n```\n\n`completeWithError`\u30e1\u30bd\u30c3\u30c9\u306b\u4f8b\u5916\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001Spring MVC\u306e`ExceptionResolver`\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u3067\u3001Controller\u30af\u30e9\u30b9\u3067\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001`SseEventBuilder`\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30c7\u30fc\u30bf\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java\n@Controller\n@RequestMapping(\"/sse\")\npublic class SseController {\n    private static final Logger logger = LoggerFactory.getLogger(SseController.class);\n    // ...\n    @ExceptionHandler\n    @ResponseBody\n    public String handleException(Exception e) {\n        logger.error(\"system error is occurred.\", e);\n        return SseEmitter.event().data(\"error !!\").build().stream()\n                .map(d -> d.getData().toString())\n                .collect(Collectors.joining());\n    }\n}\n```\n\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: text/event-stream;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Sun, 22 May 2016 18:30:11 GMT\n\ndata:error !!\n\n```\n\n# StreamingResponseBody\u306e\u5229\u7528\n\nSpring MVC\u306f\u3001HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u306e`OutputStream`\u306b\u76f4\u63a5\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u4ed5\u7d44\u307f\u306f\u3001\u524d\u56de\u7d39\u4ecb\u3057\u305f`Callable`\u5229\u7528\u6642\u3068\u540c\u69d8\u306b\u3001Spring MVC\u7ba1\u7406\u4e0b\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```java\n@Controller\n@RequestMapping(\"/streaming\")\npublic class StreamingController {\n\n    @RequestMapping(path = \"direct\", method = RequestMethod.GET)\n    public StreamingResponseBody directStreaming(@RequestParam(defaultValue = \"1\") long eventNumber, @RequestParam(defaultValue = \"0\") long intervalSec) throws IOException {\n        Console.println(\"Start get.\");\n\n        // StreamingResponseBody\u306ewriteTo\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u306b\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\n        // StreamingResponseBody\u306f\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306a\u306e\u3067Java SE 8+\u306a\u3089\u30e9\u30e0\u30c0\u5f0f\u304c\u4f7f\u3048\u307e\u3059\u3002\n        StreamingResponseBody responseBody = outputStream -> {\n            Console.println(\"Start Async processing.\");\n\n            if (intervalSec == 999) {\n                throw new IllegalStateException(\"Special parameter for confirm error.\");\n            }\n\n            for (long i = 1; i <= eventNumber; i++) {\n                try {\n                    TimeUnit.SECONDS.sleep(intervalSec);\n                } catch (InterruptedException e) {\n                    Thread.interrupted();\n                }\n                outputStream.write((\"msg\" + i + \"\\r\\n\").getBytes());\n                outputStream.flush();\n            }\n\n            Console.println(\"End Async processing.\");\n        };\n\n        Console.println(\"End get.\");\n        return responseBody;\n    }\n}\n```\n\n```bash\n$ curl -D - http://localhost:8080/streaming/direct?eventNumber=2\\&intervalSec=1\n```\n\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:53:43 GMT\n\nmsg1\nmsg2\n```\n\n## \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\n\n```\n$ curl -D - http://localhost:8080/streaming/direct?eventNumber=2\\&intervalSec=2\n```\n\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 16:54:40 GMT\n\nmsg1\n{\"timestamp\":\"2016-10-05T16:54:41.902+0000\",\"status\":200,\"error\":\"OK\",\"exception\":\"org.springframework.web.context.request.async.AsyncRequestTimeoutException\",\"message\":\"No message available\",\"path\":\"/streaming/direct\"}\n```\n\n\u30a8\u30e9\u30fc\u6642\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b`@ExceptionHandler`\u3092\u4f7f\u7528\u3057\u3066`AsyncRequestTimeoutException`\u3092\u534a\u304a\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\n\n```java\n@Controller\n@RequestMapping(\"/streaming\")\npublic class StreamingController {\n    private static final Logger logger = LoggerFactory.getLogger(StreamingController.class);\n    // ...\n    @ExceptionHandler\n    @ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)\n    @ResponseBody\n    public String handleAsyncRequestTimeoutException(AsyncRequestTimeoutException e) {\n        logger.error(\"Timeout error is occurred.\", e);\n        return \"timeout!!\";\n    }\n    // ...\n}\n```\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u767a\u751f\u3055\u305b\u308b\u3068\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u901a\u77e5\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\n\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 200 \nTransfer-Encoding: chunked\nDate: Wed, 05 Oct 2016 17:01:53 GMT\n\nmsg1\ntimeout!!\n```\n\n## \u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\n\u975e\u540c\u671f\u51e6\u7406\u5185\u3067\u767a\u751f\u3057\u305f\u4f8b\u5916\u306f\u3001Spring MVC\u306e`ExceptionResolver`\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3055\u308c\u308b\u305f\u3081\u3001`StreamingResponseBody`\u72ec\u81ea\u306e\u5b9f\u88c5\u306f\u4e0d\u8981\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001`@ExceptionHandler`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n```java\n@Controller\n@RequestMapping(\"/streaming\")\npublic class StreamingController {\n    private static final Logger logger = LoggerFactory.getLogger(StreamingController.class);\n    // ...\n    @ExceptionHandler\n    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n    @ResponseBody\n    public String handleException(Exception e) {\n        logger.error(\"System error is occurred.\", e);\n        return \"error!!\";\n    }\n}\n```\n\n\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b\u3068\u3001\u30a8\u30e9\u30fc\u3092\u901a\u77e5\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\n\n```text:\u30b3\u30f3\u30bd\u30fc\u30eb\nHTTP/1.1 500 \nContent-Type: text/plain;charset=UTF-8\nContent-Length: 7\nDate: Wed, 05 Oct 2016 17:06:50 GMT\nConnection: close\n\nerror!!\n```\n\n# Spring Boot\u4e0a\u3067\u306e\u5b9f\u88c5\n\nSpring Boot\u72ec\u81ea\u306e\u4ed5\u7d44\u307f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\uff08\u3053\u308c\u307e\u3067\u8aac\u660e\u3057\u3066\u304d\u305f\u5185\u5bb9\u306f\u3001Spring Boot\u4e0a\u3067\u52d5\u304b\u3057\u3066\u3044\u307e\u3059w\uff09\n\n\n# \u307e\u3068\u3081\n\uff12\u56de\u306b\u308f\u3051\u3066Spring MVC\u30d9\u30fc\u30b9\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067Servlet 3.0\u304b\u3089\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u305f\u975e\u540c\u671f\u51e6\u7406\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u4eca\u56de\u7d39\u4ecb\u3057\u305f\u65b9\u5f0f\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30c7\u30fc\u30bf\u3092\u9001\u4fe1(Push)\u3057\u305f\u3044\u5834\u5408\u306b\u5229\u7528\u3059\u308b\u65b9\u5f0f\u3067\u3059\u3002\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u6709\u540d\u306a\u306e\u304cWebSokcet\u3067\u3059\u3002Java\u3067\u3082Java EE 7\u304b\u3089WebSokcet\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u304a\u308a\u3001Tomcat\u306a\u3069\u306eAP\u30b5\u30fc\u30d0\u30fc\u4e0a\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Spring\u3082WebScoket\u3068\u306e\u9023\u643a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u304a\u308a\u3001WebSokcet\u30a2\u30d7\u30ea\u3092Spring\u30b9\u30bf\u30a4\u30eb\u3067\u958b\u767a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Spring\u4e0a\u3067\u306eWebSokcet\u306e\u958b\u767a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u3069\u3053\u304b\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u305f\u3076\u3093\u3082\u3046\u3061\u3087\u3063\u3068\u5148\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u30fb\u30fb\u30fb :sweat_smile: \n\n# \u53c2\u8003\u30b5\u30a4\u30c8\n\n* http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-async\n* http://qiita.com/kazuki43zoo/items/ce88dea403c596249e8a\n", "tags": ["spring-boot", "spring-mvc", "Java", "spring", "JavaEE"]}