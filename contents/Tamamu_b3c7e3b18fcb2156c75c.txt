{"tags": ["rust", "C++", "HelloWorld"], "context": "\u521d\u6295\u7a3f\u3067\u3059\u3002\n\u7a1a\u62d9\u306a\u304c\u3089\u3001Rust\u3067\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u7fd2\u4f5c\u3068\u3057\u3066C++\u306eiostream\u3092\u6a21\u5023\u3057\u3066\u307f\u307e\u3057\u305f\u3002\niostream\u3092Rust\u306b\u79fb\u690d\u3059\u308b\u306e\u304c\u76ee\u7684\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u6a19\u6e96\u51fa\u529b\u306e\u307f\u306e\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nhttps://gist.github.com/tamamu/7ec2242d95a81990be129cd9ed7bcdc9\n\nhelloworld.rs\nuse std::ops::Shl;\n\nstruct Rsout;\nstruct Endl;\n\nimpl<'a> Shl<&'a str> for Rsout {\n    type Output = Rsout;\n\n    fn shl(self, _rhs: &'a str) -> Rsout {\n        print!(\"{}\", _rhs);\n        self\n    }\n}\n\nimpl Shl<i32> for Rsout {\n    type Output = Rsout;\n\n    fn shl(self, _rhs: i32) -> Rsout {\n        print!(\"{}\", _rhs);\n        self\n    }\n}\n\nimpl Shl<Endl> for Rsout {\n    type Output = Rsout;\n\n    fn shl(self, _rhs: Endl) -> Rsout {\n        print!(\"\\n\");\n        self\n    }\n}\n\n\nfn main() {\n    Rsout << \"Hello, \" << \"world!\" << Endl;\n    Rsout << \"1 + 2 = \" << 1 + 2 << Endl;\n}\n\n\n\u3061\u306a\u307f\u306bC++\u3067\u66f8\u3044\u305f\u540c\u3058\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3053\u3061\u3089\u3002\n\nhelloworld.cpp\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    cout << \"Hello, \" << \"world!\" << endl;\n    cout << \"1 + 2 = \" << 1 + 2 << endl;\n}\n\n\n\u307e\u3060\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u90e8\u5206\u306e\u66f8\u304d\u65b9\u304c\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001&str\u578b\u306e\u5b9f\u88c5\u306b\u6642\u9593\u3092\u304b\u3051\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u2026\u2026\u3002\n\u6982\u5ff5\u306f\u7406\u89e3\u51fa\u6765\u3066\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u3084\u306f\u308a\u91cf\u3092\u66f8\u304b\u306a\u3044\u3068\u6163\u308c\u307e\u305b\u3093\u306d\u3002\nRust\u3067\u306e\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u3084\u308a\u65b9\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\nThe book - Operators and Overloading\n\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\nThe book - Lifetimes\n\u521d\u6295\u7a3f\u3067\u3059\u3002\n\n\u7a1a\u62d9\u306a\u304c\u3089\u3001Rust\u3067\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u7fd2\u4f5c\u3068\u3057\u3066C++\u306eiostream\u3092\u6a21\u5023\u3057\u3066\u307f\u307e\u3057\u305f\u3002\niostream\u3092Rust\u306b\u79fb\u690d\u3059\u308b\u306e\u304c\u76ee\u7684\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u6a19\u6e96\u51fa\u529b\u306e\u307f\u306e\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nhttps://gist.github.com/tamamu/7ec2242d95a81990be129cd9ed7bcdc9\n\n```rust:helloworld.rs\nuse std::ops::Shl;\n\nstruct Rsout;\nstruct Endl;\n\nimpl<'a> Shl<&'a str> for Rsout {\n    type Output = Rsout;\n\n    fn shl(self, _rhs: &'a str) -> Rsout {\n        print!(\"{}\", _rhs);\n        self\n    }\n}\n\nimpl Shl<i32> for Rsout {\n    type Output = Rsout;\n\n    fn shl(self, _rhs: i32) -> Rsout {\n        print!(\"{}\", _rhs);\n        self\n    }\n}\n\nimpl Shl<Endl> for Rsout {\n    type Output = Rsout;\n\n    fn shl(self, _rhs: Endl) -> Rsout {\n        print!(\"\\n\");\n        self\n    }\n}\n\n\nfn main() {\n    Rsout << \"Hello, \" << \"world!\" << Endl;\n    Rsout << \"1 + 2 = \" << 1 + 2 << Endl;\n}\n```\n\n\u3061\u306a\u307f\u306bC++\u3067\u66f8\u3044\u305f\u540c\u3058\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3053\u3061\u3089\u3002\n\n```cpp:helloworld.cpp\n#include <iostream>\n\nusing namespace std;\n \nint main()\n{\n    cout << \"Hello, \" << \"world!\" << endl;\n    cout << \"1 + 2 = \" << 1 + 2 << endl;\n}\n```\n\n\u307e\u3060\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u90e8\u5206\u306e\u66f8\u304d\u65b9\u304c\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001&str\u578b\u306e\u5b9f\u88c5\u306b\u6642\u9593\u3092\u304b\u3051\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u2026\u2026\u3002\n\u6982\u5ff5\u306f\u7406\u89e3\u51fa\u6765\u3066\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u3084\u306f\u308a\u91cf\u3092\u66f8\u304b\u306a\u3044\u3068\u6163\u308c\u307e\u305b\u3093\u306d\u3002\n\n\nRust\u3067\u306e\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u3084\u308a\u65b9\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n[The book - Operators and Overloading](https://doc.rust-lang.org/book/operators-and-overloading.html)\n\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n[The book - Lifetimes](https://doc.rust-lang.org/book/lifetimes.html)\n"}