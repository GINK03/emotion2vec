{"context": " More than 1 year has passed since last update.\n\nWhat\u2019s Ajax?\nAjax for \u201cAsynchronous JavaScript and XML\u201d. It\u2019s not a new kind of language. In fact it\u2019s a kind a technique that enable to refreshing partial webpage, utilising Javascript, which will lower the Net communication load and improve viewing experience.\n\nHow does it work?\nIn most case it\u2019s triggered by a button on the webpage, which will call a function to send a HTTPRequest and then refresh part of the webpage according to received HTTPResponse, or do something locally, like shelter something or uncover something\n\nMore Details?\n\nOk, Firstly: A workder.\nI need a XMLHttpRequest object, which enables explorer exchange information with server without reload the whole webpage. In other word, it's the HTTP client.\nvariable = new XHLHttpRequest( );\n\nSome old explorers(IE5/6) use ActiveXObject object:\nvariable = new ActiveXObject(\u201cMicrosoft.XMLHTTP\u201d);\n\nSo, combine these two I have:\nvar xmlhttp;\nif ( window.XMLHttpRequest )\n  {\n    xmlhttp = new XMLHttpRequest( );\n  }\nelse\n  {\n    // add support for different version of IE\n    var versions = [\"Microsoft.XMLHTTP\", \"Msxml2.XMLHTTP.3.0\", \"Msxml2.XMLHTTP.6.0\"]; \n    for( i = 3; i--; )\n      {\n        try\n          {\n            xmlhttp = new ActiveXObject( versions[i] );\n            break;\n          }catch(error){}\n      }\n    if( !xmlhttp )\n    {\n      throw new Error(\"This browser does not support XMLHttpRequest.\");\n    }\n  };\n\n--\n\nSecondly: Send HTTP request to server.\nSome basic knowledge of HTTP is required, which I would not note down here. \n\nThere're two HTTP request methods -- GET and POST. Basically, GET method satisfy most requirement:request for a webpage or resoueces ... But if I want to upload customized informations, such as username and password, to server, POST is a better choice.\n\nThree useful methods:\n/*\n* Creating a HTTP request\n* @ Parameters:\n* @ method { String } \"GET\" or \"POST\"\n* @ uri { String } Resources URI\n* @ async { Boolean } Asynchronous or not. True if Ajax.  \n*/\nfunction open( method, url, async )\n{ /*Unknown*/; }\n\n/*\n* Customize request header\n* @ Parameters:\n* @ header { String } Header. Like 'Content-type'.\n* @ value { String } Value of header. Like 'text'.\n*/\nfunction setRequestHeader( header,value )\n{ /* Unknown */ }\n\n/*\n* Sent the request\n* @Parameters:\n* @ content { String } Body of the http request. Only needed in POST method\n*/\nfunction sent( content )\n{ /*Unknown*/; }\n\n\nExamples:\n\nGET\n    // sent short message using GET method\n    xmlhttp.open( \"GET\", \"demo.asp?fname=Bill\", true );\n    xmlhttp.send( );\n\n\n\nPOST\n    // sent message using POST method\n    xmlhttp.open( \"POST\", \"ajax_test.asp\", true );\n    xmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n    xmlhttp.send( \"fname=Bill\" );\n\n\n--\n\nThridly: Handel response and do sth. to the webpage\n\n1.receiveResponse\n// Pure text response\ntextResponse = xmlhttp.responseText;\n// or xml response\nxmlResponse = xmlhttp.responseXML;\n\n\n\n2.parseXml(optional)\n//XML response can be transfer into text by:\n\nxml = xmlhttp.responseXML;\ntext = '';\nx = xml.getElementsByTangName(\"TAG\");\nfor ( i = 0; i < x.length; i++)\n  {\n    //do something to transfer xml into text(html)\n    text = text + x[i].childNodes[0].nodeValue + \"</br>\";\n  }\n\n\n\nrefreshHtml\ndocument.getElementById(\"myDiv\").innerHTML=txt;\n\n\n\n\nDone?\nNot perfectly. Infact, before receiving the Html you need to make sure that it's ready by using. The state and status of the response can be acquire by \nxmlhttp.readyState\n\nand\nxmlhttp.status\n\nWe can asure the response is safely received using a event handler. \n\nensureFullyReceive\nxmlhttp.onreadystatechange = funtion(){\n  if( xmlhttp.readyState==4 && xmlhttp.status==200 )\n    {\n      //reveive response and refresh page\n      document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText;\n    }\n}\n\n\np.s.: I am not sure what exactly 'onreadystatechange' is. In my personal understanding, in every important state of the communication( when state changes ), the 'reveive function' will break away from it and execute 'onreadystatechange'.  It just like a event handler(listener) in Java.\n--\n\nDONE?\nYes! This is what Ajax all about! Have fun coding!\n\n\nAttachments:\nMeaning of State \n\n\n\nvalue\nmeaning\n\n\n\n\n0\nUninitialized\n\n\n1\nConnection established\n\n\n2\nResponse receiced\n\n\n3\nProcessing response\n\n\n4\nDone\n\n\n\nMeaning of Status\n\n\n\nvalue\nmeaning\n\n\n\n\n200\n\"ok\"\n\n\n400\nUnknown page\n\n\n\n\n## What\u2019s Ajax?\nAjax for \u201cAsynchronous JavaScript and XML\u201d. It\u2019s not a new kind of language. In fact it\u2019s a kind a technique that enable to refreshing partial webpage, utilising Javascript, which will lower the Net communication load and improve viewing experience.\n\n## How does it work?\nIn most case it\u2019s triggered by a button on the webpage, which will call a function to send a HTTPRequest and then refresh part of the webpage according to received HTTPResponse, or do something locally, like shelter something or uncover something\n\n##More Details?\n \n### Ok, Firstly: A workder.\n I need a XMLHttpRequest object, which enables explorer exchange information with server without reload the whole webpage. In other word, it's the HTTP client.\n\n```js:\nvariable = new XHLHttpRequest( );\n```\n\nSome old explorers(IE5/6) use ActiveXObject object:\n\n```js:\nvariable = new ActiveXObject(\u201cMicrosoft.XMLHTTP\u201d);\n```\n\nSo, combine these two I have:\n\n```js:\nvar xmlhttp;\nif ( window.XMLHttpRequest )\n  {\n    xmlhttp = new XMLHttpRequest( );\n  }\nelse\n  {\n    // add support for different version of IE\n    var versions = [\"Microsoft.XMLHTTP\", \"Msxml2.XMLHTTP.3.0\", \"Msxml2.XMLHTTP.6.0\"]; \n    for( i = 3; i--; )\n  \t  {\n        try\n          {\n            xmlhttp = new ActiveXObject( versions[i] );\n            break;\n          }catch(error){}\n      }\n\tif( !xmlhttp )\n\t{\n\t  throw new Error(\"This browser does not support XMLHttpRequest.\");\n\t}\n  };\n```\n\n--\n\n### Secondly: Send HTTP request to server.\n\tSome basic knowledge of HTTP is required, which I would not note down here. \n\t\nThere're two HTTP request methods -- GET and POST. Basically, GET method satisfy most requirement:request for a webpage or resoueces ... But if I want to upload customized informations, such as username and password, to server, POST is a better choice.\n\n####Three useful methods:\n\n```js:\n/*\n* Creating a HTTP request\n* @ Parameters:\n* @ method { String } \"GET\" or \"POST\"\n* @ uri { String } Resources URI\n* @ async { Boolean } Asynchronous or not. True if Ajax.  \n*/\nfunction open( method, url, async )\n{ /*Unknown*/; }\n\n/*\n* Customize request header\n* @ Parameters:\n* @ header { String } Header. Like 'Content-type'.\n* @ value { String } Value of header. Like 'text'.\n*/\nfunction setRequestHeader( header,value )\n{ /* Unknown */ }\n\n/*\n* Sent the request\n* @Parameters:\n* @ content { String } Body of the http request. Only needed in POST method\n*/\nfunction sent( content )\n{ /*Unknown*/; }\n```\n\n#### Examples:\n\n```js:GET\n\t// sent short message using GET method\n\txmlhttp.open( \"GET\", \"demo.asp?fname=Bill\", true );\n\txmlhttp.send( );\n```\n\n```javasctipt:POST\n\t// sent message using POST method\n\txmlhttp.open( \"POST\", \"ajax_test.asp\", true );\n\txmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n\txmlhttp.send( \"fname=Bill\" );\n```\n\n--\n\n### Thridly: Handel response and do sth. to the webpage\n\n```js:1.receiveResponse\n// Pure text response\ntextResponse = xmlhttp.responseText;\n// or xml response\nxmlResponse = xmlhttp.responseXML;\n```\n\n```js:2.parseXml(optional)\n//XML response can be transfer into text by:\n\nxml = xmlhttp.responseXML;\ntext = '';\nx = xml.getElementsByTangName(\"TAG\");\nfor ( i = 0; i < x.length; i++)\n  {\n    //do something to transfer xml into text(html)\n    text = text + x[i].childNodes[0].nodeValue + \"</br>\";\n  }\n```\n\n```js:refreshHtml\ndocument.getElementById(\"myDiv\").innerHTML=txt;\n```\n\n---\n\n###Done?\nNot perfectly. Infact, before receiving the Html you need to make sure that it's ready by using. The state and status of the response can be acquire by \n\n```\nxmlhttp.readyState\n```\t\t\t\nand\n\n``` \nxmlhttp.status\n```\n\nWe can asure the response is safely received using a event handler. \n\n```js:ensureFullyReceive\nxmlhttp.onreadystatechange = funtion(){\n  if( xmlhttp.readyState==4 && xmlhttp.status==200 )\n\t{\n\t  //reveive response and refresh page\n      document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText;\n\t}\n}\n```\np.s.: I am not sure what exactly 'onreadystatechange' is. In my personal understanding, in every important state of the communication( when state changes ), the 'reveive function' will break away from it and execute 'onreadystatechange'.  It just like a event handler(listener) in Java.\n\n--\n\n#DONE?\nYes! This is what Ajax all about! Have fun coding!\n\n----------------\n\n#### Attachments:\nMeaning of State \n\n| value  | meaning |\n|:------:|:-------:|\n|0| Uninitialized |\n|1| Connection established |\n|2| Response receiced |\n|3| Processing response |\n|4| Done|\n\nMeaning of Status\n\n| value | meaning |\n|:-:|:-:|\n|200| \"ok\"|\n|400|Unknown page|\n\n\n\n\n\n\n", "tags": ["JavaScript", "Ajax", "HTML"]}