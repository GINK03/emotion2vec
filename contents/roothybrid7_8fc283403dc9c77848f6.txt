{"context": " More than 1 year has passed since last update.Parse.com\u3067\u306f\u3001Push Notification\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u898b\u305f\u76ee\u306b\u3082\u308f\u304b\u308a\u3084\u3059\u3044UI\u306eDashboard\u304b\u3089Push notification\u3092\u9001\u4fe1\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\n\u305d\u308c\u4ee5\u5916\u306bREST API\u3092\u4f7f\u3063\u3066\u3001\u30a2\u30d7\u30ea\u5074\u304b\u3089Push notification\u3092\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002\nDeviceToken\u3092\u4f7f\u3063\u3066\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u304c\u82e5\u5e72\u308f\u304b\u308a\u306b\u304f\u304b\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\nParse API\u3078\u306e\u9001\u4fe1\nPush notification\u306f\u6700\u4f4e\u9650alert\u304c\u3042\u308c\u3070\u3044\u3044\u306e\u3067\u3001curl\u3092\u4f7f\u3046\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u9001\u4fe1\u3057\u307e\u3059\u3002\nX-Parse-Application-Id(Application ID)\u3068X-Parse-REST-API-Key(REST API Key)\u306f\u3001Dashboard\u306eOverview\u304b\u3089\u53d6\u5f97\u51fa\u6765\u307e\u3059\u3002\n\u5f8c\u306f\u306a\u3093\u3068\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u72b6\u614b\u3067\u3001Document\u3092\u898b\u3066\u3044\u308b\u5834\u5408\u3001\u30b3\u30fc\u30c9\u4f8b\u306b\u76f4\u63a5Key\u304c\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u306e\u307e\u307e\u5b9f\u884c\u51fa\u6765\u307e\u3059!!\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <Application ID>\" \\\n  -H \"X-Parse-REST-API-Key: <REST API Key>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"alert\": \"The Giants won against the Mets 2-3.\"\n        }\n      }' \\\n  https://api.parse.com/1/push\n\n\nParse\u306eNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3064\u3044\u3066\n\u7c21\u5358\u306b\u8868\u3059\u3068\u4e0b\u8a18\u306eJSON\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\nwhere\u306e\u3068\u3053\u308d\u306b\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u306e\u3067\u3001\u3053\u3053\u306bdeviceToken\u3092\u6307\u5b9a\u3059\u308c\u3070\u7279\u5b9a\u306e\u7aef\u672b\u306bPush Notificaiton\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\ndata\u306e\u3068\u3053\u308d\u306b\u3001iOS\u307e\u305f\u306fAndroid\u306enotification\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\n\u9001\u4fe1\u65e5\u6642\u3001\u6709\u52b9\u671f\u9650\u306e\u6307\u5b9a\u304c\u7c21\u5358\n\nwhere\u306e\u3068\u3053\u308d\u306b\u3001\u6761\u4ef6Query\u3092\u6307\u5b9a\u3067\u304d\u308b\n\n\n\n$lt(less then)\u3001$in(containd in)\u306a\u3069\u3001\u4e00\u822c\u7684\u306a\u6761\u4ef6\u6f14\u7b97\u5b50\u304c\u3072\u3068\u901a\u308a\u63c3\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u67d4\u8edf\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u53ef\u80fd\n\n\n\n\nparse_push.py\n{'where': {'deviceToken': [],                   # Query API\u3092\u4f7f\u3063\u305f\u6761\u4ef6\u6307\u5b9a\n    },\n    'push_time': '2013-01-23T12:00:00Z',        # \u901a\u77e5\u958b\u59cb\u65e5\u6642(iso)\n    'expiration_interval': '518400',            # \u6709\u52b9\u671f\u9650\n    'expiration_time': '2013-01-23T21:08:39Z',  # \u6709\u52b9\u671f\u9650\u65e5\u6642\u6307\u5b9a(iso)\n    'data': {\n        'alert': 'message',\n        'badge': 'Increment',                   # Number or 'Increment'(iOS only).\n        'sound': 'sound bundle',                # iOS only.\n        'content-available': '1',               # Newsstand content count(iOS only).\n        'action': 'Intent',                     # Android only.\n        'title': 'Notification!!',              # Android only.\n    }\n}\n\n\n\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nparse_push2.py\n{'data': {'alert': 'push notification message!',\n          'badge': 'Increment',\n          'sound': 'default'},\n 'where': {'deviceToken': {'$in': [u'<deviceToken1>', u'<deviceToken2>']}}}\n\n\n\n\u30b3\u30fc\u30c9\u4f8b\nPython\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\napn.py\n# coding: utf-8\n\nPARSE_API_BASE = 'https://api.parse.com'\nPARSE_PUSH_API = '/1/push'\nPARSE_PUSH_URL = PARSE_API_BASE + PARSE_PUSH_API\n# Push Notification\u306b\u5fc5\u8981\u306aKey\u3092HTTP Header\u3067\u6307\u5b9a\nHEADERS = {\n    \"X-Parse-Application-Id\": \"<Application ID>\",\n    \"X-Parse-REST-API-Key\": \"<REST API Key>\",\n    \"X-Parse-Master-Key\": \"<Master Key>\",\n    \"Content-Type\": \"application/json\"\n}\n\n\nclass APNMessageQueue(object):\n    \"\"\" APN(Apple Push notification)\u7528\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8caf\u3081\u308b\n    \"\"\"\n    structure = {\n        'user_id': lambda x: (x is not None and len(x) > 0),\n        'notify_token': lambda x: (x is not None and len(x) > 0),\n        'message': lambda x: (x is not None and len(x) > 0),\n    }\n\n    def __init__(self, *args, **kwargs):\n        for k in self.structure.keys():\n            self.__setattr__(k, kwargs.get(k, None))\n\n    @classmethod\n    def create(cls, user_id, notify_token, message):\n        src_props = dict(\n            user_id=user_id,\n            notify_token=notify_token,\n            message=message,\n        )\n        props = {}\n\n        for k, func in cls.structure.iteritems():\n            value = src_props.get(k)\n            if func(value):\n                props[k] = value\n\n        if props:\n            return APNMessageQueue(**props)\n        return None\n\n\ndef create_notify_message(message, badge='Increment', sound='default'):\n    \"\"\" Notification\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u3001PushNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4f5c\u6210\n\n    Args:\n        message: Alert\u30e1\u30c3\u30bb\u30fc\u30b8.\n        badge: \u30d0\u30c3\u30c1\u30ab\u30a6\u30f3\u30c8('Increment'\u306fParse.com\u72ec\u81ea).\n        sound: Notification\u52b9\u679c\u97f3.\n\n    Return:\n        PushNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217.\n\n    \"\"\"\n    return {'alert': message, 'badge': badge, 'sound': sound}\n\n\ndef create_request_data(notify_token, apn_data):\n    \"\"\" Parse Notification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u4f5c\u6210\n\n    Args:\n        notify_token: \u30c7\u30d0\u30a4\u30b9\u30c8\u30fc\u30af\u30f3\u304b\u305d\u308c\u306e\u30ea\u30b9\u30c8.\n        apn_data: Apple Push Notification\u30c7\u30fc\u30bf.\n\n    Returns:\n        ParseNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf.\n\n    \"\"\"\n    request_data = {'data': apn_data}\n    if isinstance(notify_token, list):\n        request_data['where'] = {'deviceToken': {'$in': notify_token}}\n    else:\n        request_data['where'] = {'deviceToken': notify_token}\n    return request_data\n\n\ndef process_do_send(request_data):\n    \"\"\" ParseNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066PushNotification\u9001\u4fe1\n\n    Args:\n        request_data: ParseNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\n\n    Returns:\n        \u6b63\u5e38\u7d42\u4e86\u304b\u30a8\u30e9\u30fc\u304b\u3092\u8fd4\u3059\n\n    \"\"\"\n    import json\n    from urllib2 import Request, urlopen, URLError\n\n    payload = json.dumps(request_data)\n    request = Request(PARSE_PUSH_URL, payload, HEADERS)\n    try:\n        response = urlopen(request)\n        data = json.loads(response.read())\n        if isinstance(data, dict):\n            return data.get('result', False)\n    except URLError, e:\n        if hasattr(e, 'reason'):\n            print 'We failed to reach a server.'\n            print 'Reason: %s' % e.reason\n        elif hasattr(e, 'code'):\n            print 'The server couldn\\'t fulfill the request.'\n            print 'Error code: %d' % e.code\n    return False\n\n\ndef send_notification(notify_queue_list):\n    \"\"\" APNs\u3078PushNotification\u3092\u9001\u4fe1\n\n    APNs\u30b5\u30fc\u30d0\u30fc\u3078PushNotification\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4e00\u6589\u9001\u4fe1\n\n    Args:\n        notify_queue_list: APNMessageQueue\u306elist\n\n    \"\"\"\n    from itertools import groupby\n    notify_sorted_queue_list = sorted(notify_queue_list, key=lambda x: x.message)\n    # \u540c\u3058\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u307e\u3068\u3081\u3066\u9001\u308b\n    for message, group in groupby(notify_sorted_queue_list, key=lambda x: x.message):\n        distict_tokens = list(set([user.notify_token for user in group]))\n        aps_data = create_notify_message(message)\n        request_data = create_request_data(distict_tokens, aps_data)\n        print request_data\n        process_do_send(request_data)\n\n\n\u4f7f\u3046\u5074\u306f\u3053\u3046\n\nmain.py\n# coding: utf-8\n\ndef send_push_parse_for_apn(message):\n    import models\n    import apn\n\n    # \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u304b\u3089\u3001Notification\u7528deviceToken\u4e00\u89a7\u3092\u53d6\u5f97\n    targets = [x for x in models.User.find_by_existing_notify_token() if x is not None]\n    notify_token_list = [apn.APNMessageQueue(x.user_id, x.notify_token, message) for x in targets]\n\n    if len(notify_token_list) > 0:\n        # \u767a\u5c04\u30fc\n        apn.send_notification(notify_token_list)\n\nif __name__ == '__main__':\n    send_push_parse_for_apn('\u3042\u30dc\u30fc\u30fc\u3093!!')\n\n\n\nParse.com\u3067\u306f\u3001Push Notification\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u898b\u305f\u76ee\u306b\u3082\u308f\u304b\u308a\u3084\u3059\u3044UI\u306eDashboard\u304b\u3089Push notification\u3092\u9001\u4fe1\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\n\u305d\u308c\u4ee5\u5916\u306bREST API\u3092\u4f7f\u3063\u3066\u3001\u30a2\u30d7\u30ea\u5074\u304b\u3089Push notification\u3092\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002\nDeviceToken\u3092\u4f7f\u3063\u3066\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u304c\u82e5\u5e72\u308f\u304b\u308a\u306b\u304f\u304b\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\n##Parse API\u3078\u306e\u9001\u4fe1\n\nPush notification\u306f\u6700\u4f4e\u9650`alert`\u304c\u3042\u308c\u3070\u3044\u3044\u306e\u3067\u3001`curl`\u3092\u4f7f\u3046\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u9001\u4fe1\u3057\u307e\u3059\u3002\n`X-Parse-Application-Id`(Application ID)\u3068`X-Parse-REST-API-Key`(REST API Key)\u306f\u3001Dashboard\u306eOverview\u304b\u3089\u53d6\u5f97\u51fa\u6765\u307e\u3059\u3002\n\u5f8c\u306f\u306a\u3093\u3068\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u72b6\u614b\u3067\u3001Document\u3092\u898b\u3066\u3044\u308b\u5834\u5408\u3001\u30b3\u30fc\u30c9\u4f8b\u306b\u76f4\u63a5Key\u304c\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u306e\u307e\u307e\u5b9f\u884c\u51fa\u6765\u307e\u3059!!\n\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <Application ID>\" \\\n  -H \"X-Parse-REST-API-Key: <REST API Key>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"alert\": \"The Giants won against the Mets 2-3.\"\n        }\n      }' \\\n  https://api.parse.com/1/push\n```\n\n##Parse\u306eNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3064\u3044\u3066\n\n\u7c21\u5358\u306b\u8868\u3059\u3068\u4e0b\u8a18\u306eJSON\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n`where`\u306e\u3068\u3053\u308d\u306b\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u306e\u3067\u3001\u3053\u3053\u306b`deviceToken`\u3092\u6307\u5b9a\u3059\u308c\u3070\u7279\u5b9a\u306e\u7aef\u672b\u306bPush Notificaiton\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n- `data`\u306e\u3068\u3053\u308d\u306b\u3001iOS\u307e\u305f\u306fAndroid\u306enotification\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\n- \u9001\u4fe1\u65e5\u6642\u3001\u6709\u52b9\u671f\u9650\u306e\u6307\u5b9a\u304c\u7c21\u5358\n- `where`\u306e\u3068\u3053\u308d\u306b\u3001\u6761\u4ef6Query\u3092\u6307\u5b9a\u3067\u304d\u308b\n  - `$lt`(less then)\u3001`$in`(containd in)\u306a\u3069\u3001\u4e00\u822c\u7684\u306a\u6761\u4ef6\u6f14\u7b97\u5b50\u304c\u3072\u3068\u901a\u308a\u63c3\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u67d4\u8edf\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u53ef\u80fd\n\n```parse_push.py\n{'where': {'deviceToken': [],                   # Query API\u3092\u4f7f\u3063\u305f\u6761\u4ef6\u6307\u5b9a\n    },\n    'push_time': '2013-01-23T12:00:00Z',        # \u901a\u77e5\u958b\u59cb\u65e5\u6642(iso)\n    'expiration_interval': '518400',            # \u6709\u52b9\u671f\u9650\n    'expiration_time': '2013-01-23T21:08:39Z',  # \u6709\u52b9\u671f\u9650\u65e5\u6642\u6307\u5b9a(iso)\n    'data': {\n        'alert': 'message',\n        'badge': 'Increment',                   # Number or 'Increment'(iOS only).\n        'sound': 'sound bundle',                # iOS only.\n        'content-available': '1',               # Newsstand content count(iOS only).\n        'action': 'Intent',                     # Android only.\n        'title': 'Notification!!',              # Android only.\n    }\n}\n```\n\n\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```parse_push2.py\n{'data': {'alert': 'push notification message!',\n          'badge': 'Increment',\n          'sound': 'default'},\n 'where': {'deviceToken': {'$in': [u'<deviceToken1>', u'<deviceToken2>']}}}\n```\n\n###\u30b3\u30fc\u30c9\u4f8b\n\nPython\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```apn.py\n# coding: utf-8\n\nPARSE_API_BASE = 'https://api.parse.com'\nPARSE_PUSH_API = '/1/push'\nPARSE_PUSH_URL = PARSE_API_BASE + PARSE_PUSH_API\n# Push Notification\u306b\u5fc5\u8981\u306aKey\u3092HTTP Header\u3067\u6307\u5b9a\nHEADERS = {\n    \"X-Parse-Application-Id\": \"<Application ID>\",\n    \"X-Parse-REST-API-Key\": \"<REST API Key>\",\n    \"X-Parse-Master-Key\": \"<Master Key>\",\n    \"Content-Type\": \"application/json\"\n}\n\n\nclass APNMessageQueue(object):\n    \"\"\" APN(Apple Push notification)\u7528\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8caf\u3081\u308b\n    \"\"\"\n    structure = {\n        'user_id': lambda x: (x is not None and len(x) > 0),\n        'notify_token': lambda x: (x is not None and len(x) > 0),\n        'message': lambda x: (x is not None and len(x) > 0),\n    }\n\n    def __init__(self, *args, **kwargs):\n        for k in self.structure.keys():\n            self.__setattr__(k, kwargs.get(k, None))\n\n    @classmethod\n    def create(cls, user_id, notify_token, message):\n        src_props = dict(\n            user_id=user_id,\n            notify_token=notify_token,\n            message=message,\n        )\n        props = {}\n\n        for k, func in cls.structure.iteritems():\n            value = src_props.get(k)\n            if func(value):\n                props[k] = value\n\n        if props:\n            return APNMessageQueue(**props)\n        return None\n\n\ndef create_notify_message(message, badge='Increment', sound='default'):\n    \"\"\" Notification\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u3001PushNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4f5c\u6210\n\n    Args:\n        message: Alert\u30e1\u30c3\u30bb\u30fc\u30b8.\n        badge: \u30d0\u30c3\u30c1\u30ab\u30a6\u30f3\u30c8('Increment'\u306fParse.com\u72ec\u81ea).\n        sound: Notification\u52b9\u679c\u97f3.\n\n    Return:\n        PushNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217.\n\n    \"\"\"\n    return {'alert': message, 'badge': badge, 'sound': sound}\n\n\ndef create_request_data(notify_token, apn_data):\n    \"\"\" Parse Notification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u4f5c\u6210\n\n    Args:\n        notify_token: \u30c7\u30d0\u30a4\u30b9\u30c8\u30fc\u30af\u30f3\u304b\u305d\u308c\u306e\u30ea\u30b9\u30c8.\n        apn_data: Apple Push Notification\u30c7\u30fc\u30bf.\n\n    Returns:\n        ParseNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf.\n\n    \"\"\"\n    request_data = {'data': apn_data}\n    if isinstance(notify_token, list):\n        request_data['where'] = {'deviceToken': {'$in': notify_token}}\n    else:\n        request_data['where'] = {'deviceToken': notify_token}\n    return request_data\n\n\ndef process_do_send(request_data):\n    \"\"\" ParseNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066PushNotification\u9001\u4fe1\n\n    Args:\n        request_data: ParseNotification\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\n\n    Returns:\n        \u6b63\u5e38\u7d42\u4e86\u304b\u30a8\u30e9\u30fc\u304b\u3092\u8fd4\u3059\n\n    \"\"\"\n    import json\n    from urllib2 import Request, urlopen, URLError\n\n    payload = json.dumps(request_data)\n    request = Request(PARSE_PUSH_URL, payload, HEADERS)\n    try:\n        response = urlopen(request)\n        data = json.loads(response.read())\n        if isinstance(data, dict):\n            return data.get('result', False)\n    except URLError, e:\n        if hasattr(e, 'reason'):\n            print 'We failed to reach a server.'\n            print 'Reason: %s' % e.reason\n        elif hasattr(e, 'code'):\n            print 'The server couldn\\'t fulfill the request.'\n            print 'Error code: %d' % e.code\n    return False\n\n\ndef send_notification(notify_queue_list):\n    \"\"\" APNs\u3078PushNotification\u3092\u9001\u4fe1\n\n    APNs\u30b5\u30fc\u30d0\u30fc\u3078PushNotification\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4e00\u6589\u9001\u4fe1\n\n    Args:\n        notify_queue_list: APNMessageQueue\u306elist\n\n    \"\"\"\n    from itertools import groupby\n    notify_sorted_queue_list = sorted(notify_queue_list, key=lambda x: x.message)\n    # \u540c\u3058\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u307e\u3068\u3081\u3066\u9001\u308b\n    for message, group in groupby(notify_sorted_queue_list, key=lambda x: x.message):\n        distict_tokens = list(set([user.notify_token for user in group]))\n        aps_data = create_notify_message(message)\n        request_data = create_request_data(distict_tokens, aps_data)\n        print request_data\n        process_do_send(request_data)\n```\n\n\u4f7f\u3046\u5074\u306f\u3053\u3046\n\n```main.py\n# coding: utf-8\n\ndef send_push_parse_for_apn(message):\n    import models\n    import apn\n\n    # \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u304b\u3089\u3001Notification\u7528deviceToken\u4e00\u89a7\u3092\u53d6\u5f97\n    targets = [x for x in models.User.find_by_existing_notify_token() if x is not None]\n    notify_token_list = [apn.APNMessageQueue(x.user_id, x.notify_token, message) for x in targets]\n\n    if len(notify_token_list) > 0:\n        # \u767a\u5c04\u30fc\n        apn.send_notification(notify_token_list)\n\nif __name__ == '__main__':\n    send_push_parse_for_apn('\u3042\u30dc\u30fc\u30fc\u3093!!')\n```\n", "tags": ["iOS", "api", "Python", "apple"]}