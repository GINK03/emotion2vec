{"context": " More than 1 year has passed since last update.\n\n\u4f55\u3092\u3001\u3069\u3093\u306a\u7d4c\u7def\u3067\u3084\u3063\u3066\u307f\u305f\u306e\u304b\uff1f\nAWS IoT\u306bJVM\u7cfb\u8a00\u8a9e\uff08Scala\uff09\u304b\u3089\u76f4\u63a5MQTT\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066\u63a5\u7d9a\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u304b\u3068\u3044\u3046\u78ba\u8a8d\u3002\n\u4e0b\u8a18\u306e\u8a18\u4e8b\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u73fe\u72b6AWS IoT\u306b\u5bfe\u3057\u3066\u76f4\u63a5\u63a5\u7d9a\u3057\u3066\u3044\u308b\u4e8b\u4f8b\u3068\u3057\u3066\u3001mosquitto\u306eCLI\u3092\u4f7f\u3046\u3082\u306e\u3001Python\u306epaho-mqtt\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u3001Node.js\u3067\u63a5\u7d9a\u3059\u308b\u3082\u306e\u306e3\u7a2e\u985e\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\u305f\u3060\u3001JVM\u7cfb\u8a00\u8a9e\u304b\u3089\u63a5\u7d9a\u3057\u3066\u3044\u308b\u4e8b\u4f8b\u306f\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n\n\u592a\u967d\u5149\u30d1\u30cd\u30eb\u306e\u767a\u96fb\u91cf\u3092AWS IoT\u3068Amazon Elasticsearch Service\u3092\u4f7f\u3063\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u308b(mosquitto/Python)\n\nAWS IoT\u306e\u30ec\u30a4\u30c6\u30f3\u30b7\u30fc\u3092\u6e2c\u3063\u3066\u307f\u305f\uff08\uff11\uff09(Node.js)\n\n\u5c1a\u3001AWS IoT\u7528\u306eJava SDK\u306b\u306f\u300cAWS IoT\u306b\u5bfe\u3057\u3066Publish\u3059\u308b\u300d\u3068\u3044\u3046API\u306e\u307f\u5b58\u5728\u3057\u3066\u307e\u3059\u3002\n- AWS SDK Reference AWSIotDataClient\n\u4e0a\u8a18\u306eSDK\u3092\u7528\u3044\u305f\u5834\u5408\u3001AWS IoT\u306b\u5bfe\u3057\u3066Subscribe\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n\u3064\u307e\u308a\u3001AWS\u7684\u306a\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u306f\u300cAWS IoT\u306b\u306f\u6295\u5165\u306e\u307f\u884c\u3044\u3001\u53d6\u5f97\uff0f\u6d3b\u7528\u306fAWS IoT\u304b\u3089\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u4e0a\u3067\u5225\u30b5\u30fc\u30d3\u30b9\u306b\u8ee2\u9001\u3057\u3066\u884c\u3063\u3066\u306d\u300d\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3060\u3068\u63a8\u6e2c\u3055\u308c\u307e\u3059\u3002\n\u305f\u3060\u3001\u305d\u308c\u3060\u3068\u5143\u3005JVM\u7cfb\u8a00\u8a9e\u304b\u3089MQTT Broker\u306b\u5bfe\u3057\u3066Subscribe\u3057\u3066\u53d6\u5f97\u30c7\u30fc\u30bf\u3092\u6d3b\u7528\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u3044\u307e\u3044\u3061\u79fb\u884c\u3057\u305a\u3089\u3044\u3067\u3059\u3002\u3068\u3044\u3046\u304b\u5143\u3005\u305d\u308c\u3092\u524d\u63d0\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3067\u306fAWS IoT\u3068\u306f\u9023\u643a\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3068\u3001\u3053\u3053\u307e\u3067\u3067\u308f\u304b\u3063\u305f\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001\u3064\u307e\u308a\u306fAWS IoT\u3092\u5358\u306a\u308bMQTT Broker\u306eSaaS\u3068\u3057\u3066\u4f7f\u3046\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u304b\u3001\u3068\u3044\u3046\u308f\u3051\u306a\u306e\u3067\u3001\u7d50\u69cb\u5947\u7279\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306a\u6c17\u306f\u3057\u307e\u3059\u3002\n\u3068\u306f\u3044\u3048\u3001\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u51fa\u6765\u308b\u304b\u3060\u3051\u306f\u78ba\u8a8d\u3057\u3066\u304a\u3053\u3046\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\u5c1a\u3001AWS IoT\u306f\u5b8c\u5168\u5f93\u91cf\u8ab2\u91d1\u3067\u30d5\u30eb\u30de\u30cd\u30fc\u30b8\u30c9\u306aMQTT Broker\u3092\u4f7f\u3048\u308b\u305f\u3081\u3001\u6271\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u305d\u308c\u307b\u3069\u591a\u304f\u306a\u3044\u74b0\u5883\u306b\u304a\u3044\u3066\u306f\u5358\u306a\u308bMQTT Broker\u306eSaaS\u3068\u3057\u3066\u6271\u3063\u3066\u3082\u975e\u5e38\u306b\u512a\u79c0\u3060\u3068\u306f\u601d\u3044\u307e\u3059\u3002\u6d41\u91cf\u591a\u304f\u306a\u3063\u305f\u3089\u5225\u30b5\u30fc\u30d3\u30b9\u306b\u6d41\u305b\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3057\u3002\n\nAWS IoT\u306e\u8a2d\u5b9a\n\u4e0b\u8a18\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3001\u300c\u30e2\u30ce\u306e\u4f5c\u6210\u300d\u300c\u30e2\u30ce\u306e\u8a3c\u660e\u66f8\u3092\u4f5c\u6210\u300d\u300c\u30dd\u30ea\u30b7\u306e\u4f5c\u6210\u3068\u8a3c\u660e\u66f8\u3068\u306e\u7d10\u4ed8\u3051\u300d\u300c\u30e2\u30ce\u3068\u8a3c\u660e\u66f8\u3068\u306e\u7d10\u4ed8\u3051\u300d\u3092\u884c\u3044\u3001\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n- \u592a\u967d\u5149\u30d1\u30cd\u30eb\u306e\u767a\u96fb\u91cf\u3092AWS IoT\u3068Amazon Elasticsearch Service\u3092\u4f7f\u3063\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u308b\n\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\u306f\u4e0b\u8a18\u306e\u540d\u79f0\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n- cert.pem\n- private.pem\n- rootCa.pem\n\u3068\u3044\u3046\u5f62\u3067\u3001\u8a3c\u660e\u66f8\u306f\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u524d\u63d0\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\nAWS IoT\u306b\u5bfe\u3059\u308bPublish\u3092\u884c\u3046\u30b3\u30fc\u30c9\nAWS IoT\u306b\u5bfe\u3059\u308bPublish\u3092\u884c\u3046\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5c1a\u3001SocketFactoryGenerator\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u300cpassword\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306f\u5b9f\u8cea\u7684\u306b\u4f7f\u7528\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u4f55\u3067\u3082\u554f\u984c\u306a\u3044\u3067\u3059\u3002\n\u30fb\u30fb\u30fb\u306a\u3089\u305d\u3082\u305d\u3082\u7f6e\u304f\u306a\u3088\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u304c\u3001\u305d\u308c\u306fSubscribe\u306e\u6642\u306b\u3067\u3082\u8a02\u6b63\u3057\u307e\u3059\uff3e\uff3e\uff1b\n\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u30da\u30fc\u30b8\u304b\u3089\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nhttps://github.com/kimutansk/aws-iot-example/\n\nMqttPublisher.scala\nimport org.eclipse.paho.client.mqttv3.{MqttMessage, MqttConnectOptions, MqttClient}\n\n/** MQTT Publish Test Class */\nobject MqttPublisher {\n  def main(args: Array[String]) {\n    // Connect Target\n    val brokerURI:String = \"ssl://******.iot.ap-northeast-1.amazonaws.com:8883\"\n\n    // SocketFactoryGenerate\n    val socketFactory = SocketFactoryGenerator.generateFromFilePath(\"/etc/cert/rootCA.pem\", \"/etc/cert/cert.pem\", \"/etc/cert/private.pem\", \"password\")\n\n    // MQTT Client generate\n    val client:MqttClient = new MqttClient(brokerURI, \"mqtt-publisher\")\n    client.setCallback(new PublishMqttCallback)\n    val options:MqttConnectOptions = new MqttConnectOptions()\n    options.setSocketFactory(socketFactory)\n    client.connect(options)\n\n\n    val message:MqttMessage = new MqttMessage(\"Test Message\".getBytes(\"UTF-8\"))\n    client.publish(\"test-topic\", message)\n  }\n}\n\n\n\nSocketFactoryGenerator.scala\nimport java.io.{ByteArrayInputStream, InputStream, InputStreamReader}\nimport java.nio.file.{Files, Paths}\nimport java.security.cert.{CertificateFactory, X509Certificate}\nimport java.security.{KeyPair, KeyStore, Security}\nimport javax.net.ssl.{KeyManagerFactory, SSLContext, SSLSocketFactory, TrustManagerFactory}\n\nimport org.bouncycastle.cert.X509CertificateHolder\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter\nimport org.bouncycastle.openssl.{PEMKeyPair, PEMParser}\n\n/** Factory for [[javax.net.ssl.SSLSocketFactory]] instances. */\nobject SocketFactoryGenerator {\n\n  /**\n   * Generate [[javax.net.ssl.SSLSocketFactory]] from pem file paths.\n   *\n   * @param rootCaFilePath Root CA file path\n   * @param certFilePath Certificate file path\n   * @param keyFilePath Private key file path\n   * @return Generated [[javax.net.ssl.SSLSocketFactory]]\n   */\n  def generateFromFilePath(rootCaFilePath:String, certFilePath:String, keyFilePath:String, keyStorePassword:String):SSLSocketFactory = {\n    Security.addProvider(new BouncyCastleProvider())\n\n    // load Root CA certificate\n    val rootCaParser:PEMParser  = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(rootCaFilePath)))))\n    val rootCaCertHolder:X509CertificateHolder = rootCaParser.readObject().asInstanceOf[X509CertificateHolder]\n    val rootCaCert:X509Certificate = convertToJavaCertificate(rootCaCertHolder)\n    rootCaParser.close()\n\n    // load Server certificate\n    val certParser:PEMParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(certFilePath)))))\n    val serverCertHolder:X509CertificateHolder = certParser.readObject.asInstanceOf[X509CertificateHolder]\n    val serverCert:X509Certificate = convertToJavaCertificate(serverCertHolder)\n    certParser.close()\n\n    // load Private Key\n    val keyParser:PEMParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(keyFilePath)))))\n    val pemKeyPair:PEMKeyPair = keyParser.readObject.asInstanceOf[PEMKeyPair]\n    val keyPair:KeyPair = new JcaPEMKeyConverter().getKeyPair(pemKeyPair)\n    keyParser.close()\n\n    // Root CA certificate is used to authenticate server\n    val rootCAKeyStore:KeyStore = KeyStore.getInstance(KeyStore.getDefaultType())\n    rootCAKeyStore.load(null, null)\n    rootCAKeyStore.setCertificateEntry(\"ca-certificate\", convertToJavaCertificate(rootCaCertHolder))\n    val tmf:TrustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n    tmf.init(rootCAKeyStore);\n\n    // client key and certificates are sent to server so it can authenticate us\n    val ks:KeyStore  = KeyStore.getInstance(KeyStore.getDefaultType())\n    ks.load(null, null)\n    ks.setCertificateEntry(\"certificate\", serverCert)\n    ks.setKeyEntry(\"private-key\", keyPair.getPrivate(), keyStorePassword.toCharArray, Array(serverCert))\n    val kmf:KeyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm())\n    kmf.init(ks, keyStorePassword.toCharArray());\n\n    // finally, create SSL socket factory\n    val context:SSLContext = SSLContext.getInstance(\"TLSv1.2\")\n    context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null)\n\n    context.getSocketFactory()\n  }\n\n\n  def convertToJavaCertificate(certificateHolder:X509CertificateHolder):X509Certificate = {\n     val is:InputStream = new ByteArrayInputStream(certificateHolder.toASN1Structure.getEncoded);\n    try {\n      CertificateFactory.getInstance(\"X.509\").generateCertificate(is).asInstanceOf[X509Certificate]\n    } finally is.close()\n  }\n}\n\n\n\nPublishMqttCallback.scala\nimport org.eclipse.paho.client.mqttv3.{IMqttDeliveryToken, MqttMessage, MqttCallback}\n\n/** Publish MqttCallBack */\nclass PublishMqttCallback extends MqttCallback{\n  // Nop\n  override def deliveryComplete(iMqttDeliveryToken: IMqttDeliveryToken): Unit = ???\n\n  override def messageArrived(s: String, mqttMessage: MqttMessage): Unit = ???\n\n  override def connectionLost(throwable: Throwable): Unit = ???\n}\n\n\n\n\u5b9f\u969b\u306e\u52d5\u4f5c\u78ba\u8a8d\nmosquitto_sub\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u969b\u306b\u6295\u5165\u3055\u308c\u308b\u304b\u3092\u78ba\u304b\u3081\u3066\u307f\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306bScala\u5074\u306e\u30b3\u30fc\u30c9\u304b\u3089\u6295\u5165\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304cSubscribe\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n# mosquitto_sub --cafile rootCA.pem --cert cert.pem --key private.pem -h ******.iot.ap-northeast-1.amazonaws.com -p 8883 -q 1 -d -t test-topic -i mosquitto-subscriber\nClient mosquitto-subscriber sending CONNECT\nClient mosquitto-subscriber received CONNACK\nClient mosquitto-subscriber sending SUBSCRIBE (Mid: 1, Topic: test-topic, QoS: 1)\nClient mosquitto-subscriber received SUBACK\nSubscribed (mid: 1): 1\nClient mosquitto-subscriber received PUBLISH (d0, q1, r0, m1, 'test-topic', ... (12 bytes))\nClient mosquitto-subscriber sending PUBACK (Mid: 1)\nTest Message\n\n\n\u6700\u5f8c\u306b\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001SSLSocketFactory\u3092\u5dee\u3057\u66ff\u3048\u308b\u3053\u3068\u3067\u3001Scala\u304b\u3089AWS IoT\u306b\u76f4\u63a5\u63a5\u7d9a\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306ePublish\u304c\u884c\u3048\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u304a\u305d\u3089\u304fSubscribe\u3082\u540c\u3058\u65b9\u5f0f\u3067\u53ef\u80fd\u3060\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001\u6b21\u306b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n## \u4f55\u3092\u3001\u3069\u3093\u306a\u7d4c\u7def\u3067\u3084\u3063\u3066\u307f\u305f\u306e\u304b\uff1f\nAWS IoT\u306bJVM\u7cfb\u8a00\u8a9e\uff08Scala\uff09\u304b\u3089\u76f4\u63a5MQTT\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066\u63a5\u7d9a\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u304b\u3068\u3044\u3046\u78ba\u8a8d\u3002\n\u4e0b\u8a18\u306e\u8a18\u4e8b\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u73fe\u72b6AWS IoT\u306b\u5bfe\u3057\u3066\u76f4\u63a5\u63a5\u7d9a\u3057\u3066\u3044\u308b\u4e8b\u4f8b\u3068\u3057\u3066\u3001mosquitto\u306eCLI\u3092\u4f7f\u3046\u3082\u306e\u3001Python\u306epaho-mqtt\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u3001Node.js\u3067\u63a5\u7d9a\u3059\u308b\u3082\u306e\u306e3\u7a2e\u985e\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\u305f\u3060\u3001JVM\u7cfb\u8a00\u8a9e\u304b\u3089\u63a5\u7d9a\u3057\u3066\u3044\u308b\u4e8b\u4f8b\u306f\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n- [\u592a\u967d\u5149\u30d1\u30cd\u30eb\u306e\u767a\u96fb\u91cf\u3092AWS IoT\u3068Amazon Elasticsearch Service\u3092\u4f7f\u3063\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u308b](http://qiita.com/ToshiakiEnami/items/7b4b3090f3687979d21a)(mosquitto/Python)\n- [AWS IoT\u306e\u30ec\u30a4\u30c6\u30f3\u30b7\u30fc\u3092\u6e2c\u3063\u3066\u307f\u305f\uff08\uff11\uff09](http://qiita.com/okapin/items/107f76de6643a03b9ad3)(Node.js)\n\n\u5c1a\u3001AWS IoT\u7528\u306eJava SDK\u306b\u306f\u300cAWS IoT\u306b\u5bfe\u3057\u3066Publish\u3059\u308b\u300d\u3068\u3044\u3046API\u306e\u307f\u5b58\u5728\u3057\u3066\u307e\u3059\u3002\n- [AWS SDK Reference AWSIotDataClient](http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/iotdata/AWSIotDataClient.html)\n\n\u4e0a\u8a18\u306eSDK\u3092\u7528\u3044\u305f\u5834\u5408\u3001AWS IoT\u306b\u5bfe\u3057\u3066Subscribe\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n\u3064\u307e\u308a\u3001AWS\u7684\u306a\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u306f\u300cAWS IoT\u306b\u306f\u6295\u5165\u306e\u307f\u884c\u3044\u3001\u53d6\u5f97\uff0f\u6d3b\u7528\u306fAWS IoT\u304b\u3089\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u4e0a\u3067\u5225\u30b5\u30fc\u30d3\u30b9\u306b\u8ee2\u9001\u3057\u3066\u884c\u3063\u3066\u306d\u300d\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3060\u3068\u63a8\u6e2c\u3055\u308c\u307e\u3059\u3002\n\n\u305f\u3060\u3001\u305d\u308c\u3060\u3068\u5143\u3005JVM\u7cfb\u8a00\u8a9e\u304b\u3089MQTT Broker\u306b\u5bfe\u3057\u3066Subscribe\u3057\u3066\u53d6\u5f97\u30c7\u30fc\u30bf\u3092\u6d3b\u7528\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u3044\u307e\u3044\u3061\u79fb\u884c\u3057\u305a\u3089\u3044\u3067\u3059\u3002\u3068\u3044\u3046\u304b\u5143\u3005\u305d\u308c\u3092\u524d\u63d0\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3067\u306fAWS IoT\u3068\u306f\u9023\u643a\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3068\u3001\u3053\u3053\u307e\u3067\u3067\u308f\u304b\u3063\u305f\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001\u3064\u307e\u308a\u306fAWS IoT\u3092\u5358\u306a\u308bMQTT Broker\u306eSaaS\u3068\u3057\u3066\u4f7f\u3046\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u304b\u3001\u3068\u3044\u3046\u308f\u3051\u306a\u306e\u3067\u3001\u7d50\u69cb\u5947\u7279\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306a\u6c17\u306f\u3057\u307e\u3059\u3002\n\u3068\u306f\u3044\u3048\u3001\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u51fa\u6765\u308b\u304b\u3060\u3051\u306f\u78ba\u8a8d\u3057\u3066\u304a\u3053\u3046\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n\u5c1a\u3001AWS IoT\u306f\u5b8c\u5168\u5f93\u91cf\u8ab2\u91d1\u3067\u30d5\u30eb\u30de\u30cd\u30fc\u30b8\u30c9\u306aMQTT Broker\u3092\u4f7f\u3048\u308b\u305f\u3081\u3001\u6271\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u305d\u308c\u307b\u3069\u591a\u304f\u306a\u3044\u74b0\u5883\u306b\u304a\u3044\u3066\u306f\u5358\u306a\u308bMQTT Broker\u306eSaaS\u3068\u3057\u3066\u6271\u3063\u3066\u3082\u975e\u5e38\u306b\u512a\u79c0\u3060\u3068\u306f\u601d\u3044\u307e\u3059\u3002\u6d41\u91cf\u591a\u304f\u306a\u3063\u305f\u3089\u5225\u30b5\u30fc\u30d3\u30b9\u306b\u6d41\u305b\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3057\u3002\n\n## AWS IoT\u306e\u8a2d\u5b9a\n\u4e0b\u8a18\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3001\u300c\u30e2\u30ce\u306e\u4f5c\u6210\u300d\u300c\u30e2\u30ce\u306e\u8a3c\u660e\u66f8\u3092\u4f5c\u6210\u300d\u300c\u30dd\u30ea\u30b7\u306e\u4f5c\u6210\u3068\u8a3c\u660e\u66f8\u3068\u306e\u7d10\u4ed8\u3051\u300d\u300c\u30e2\u30ce\u3068\u8a3c\u660e\u66f8\u3068\u306e\u7d10\u4ed8\u3051\u300d\u3092\u884c\u3044\u3001\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n- [\u592a\u967d\u5149\u30d1\u30cd\u30eb\u306e\u767a\u96fb\u91cf\u3092AWS IoT\u3068Amazon Elasticsearch Service\u3092\u4f7f\u3063\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u308b](http://qiita.com/ToshiakiEnami/items/7b4b3090f3687979d21a)\n\n\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\u306f\u4e0b\u8a18\u306e\u540d\u79f0\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n- cert.pem\n- private.pem\n- rootCa.pem\n\n\u3068\u3044\u3046\u5f62\u3067\u3001\u8a3c\u660e\u66f8\u306f\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u524d\u63d0\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n## AWS IoT\u306b\u5bfe\u3059\u308bPublish\u3092\u884c\u3046\u30b3\u30fc\u30c9\nAWS IoT\u306b\u5bfe\u3059\u308bPublish\u3092\u884c\u3046\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5c1a\u3001SocketFactoryGenerator\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u300cpassword\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306f\u5b9f\u8cea\u7684\u306b\u4f7f\u7528\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u4f55\u3067\u3082\u554f\u984c\u306a\u3044\u3067\u3059\u3002\n\u30fb\u30fb\u30fb\u306a\u3089\u305d\u3082\u305d\u3082\u7f6e\u304f\u306a\u3088\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u304c\u3001\u305d\u308c\u306fSubscribe\u306e\u6642\u306b\u3067\u3082\u8a02\u6b63\u3057\u307e\u3059\uff3e\uff3e\uff1b\n\n\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u30da\u30fc\u30b8\u304b\u3089\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nhttps://github.com/kimutansk/aws-iot-example/\n\n```scala:MqttPublisher.scala\nimport org.eclipse.paho.client.mqttv3.{MqttMessage, MqttConnectOptions, MqttClient}\n\n/** MQTT Publish Test Class */\nobject MqttPublisher {\n  def main(args: Array[String]) {\n    // Connect Target\n    val brokerURI:String = \"ssl://******.iot.ap-northeast-1.amazonaws.com:8883\"\n\n    // SocketFactoryGenerate\n    val socketFactory = SocketFactoryGenerator.generateFromFilePath(\"/etc/cert/rootCA.pem\", \"/etc/cert/cert.pem\", \"/etc/cert/private.pem\", \"password\")\n\n    // MQTT Client generate\n    val client:MqttClient = new MqttClient(brokerURI, \"mqtt-publisher\")\n    client.setCallback(new PublishMqttCallback)\n    val options:MqttConnectOptions = new MqttConnectOptions()\n    options.setSocketFactory(socketFactory)\n    client.connect(options)\n\n\n    val message:MqttMessage = new MqttMessage(\"Test Message\".getBytes(\"UTF-8\"))\n    client.publish(\"test-topic\", message)\n  }\n}\n```\n\n```scala:SocketFactoryGenerator.scala\nimport java.io.{ByteArrayInputStream, InputStream, InputStreamReader}\nimport java.nio.file.{Files, Paths}\nimport java.security.cert.{CertificateFactory, X509Certificate}\nimport java.security.{KeyPair, KeyStore, Security}\nimport javax.net.ssl.{KeyManagerFactory, SSLContext, SSLSocketFactory, TrustManagerFactory}\n\nimport org.bouncycastle.cert.X509CertificateHolder\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter\nimport org.bouncycastle.openssl.{PEMKeyPair, PEMParser}\n\n/** Factory for [[javax.net.ssl.SSLSocketFactory]] instances. */\nobject SocketFactoryGenerator {\n\n  /**\n   * Generate [[javax.net.ssl.SSLSocketFactory]] from pem file paths.\n   *\n   * @param rootCaFilePath Root CA file path\n   * @param certFilePath Certificate file path\n   * @param keyFilePath Private key file path\n   * @return Generated [[javax.net.ssl.SSLSocketFactory]]\n   */\n  def generateFromFilePath(rootCaFilePath:String, certFilePath:String, keyFilePath:String, keyStorePassword:String):SSLSocketFactory = {\n    Security.addProvider(new BouncyCastleProvider())\n\n    // load Root CA certificate\n    val rootCaParser:PEMParser  = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(rootCaFilePath)))))\n    val rootCaCertHolder:X509CertificateHolder = rootCaParser.readObject().asInstanceOf[X509CertificateHolder]\n    val rootCaCert:X509Certificate = convertToJavaCertificate(rootCaCertHolder)\n    rootCaParser.close()\n\n    // load Server certificate\n    val certParser:PEMParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(certFilePath)))))\n    val serverCertHolder:X509CertificateHolder = certParser.readObject.asInstanceOf[X509CertificateHolder]\n    val serverCert:X509Certificate = convertToJavaCertificate(serverCertHolder)\n    certParser.close()\n\n    // load Private Key\n    val keyParser:PEMParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(keyFilePath)))))\n    val pemKeyPair:PEMKeyPair = keyParser.readObject.asInstanceOf[PEMKeyPair]\n    val keyPair:KeyPair = new JcaPEMKeyConverter().getKeyPair(pemKeyPair)\n    keyParser.close()\n\n    // Root CA certificate is used to authenticate server\n    val rootCAKeyStore:KeyStore = KeyStore.getInstance(KeyStore.getDefaultType())\n    rootCAKeyStore.load(null, null)\n    rootCAKeyStore.setCertificateEntry(\"ca-certificate\", convertToJavaCertificate(rootCaCertHolder))\n    val tmf:TrustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n    tmf.init(rootCAKeyStore);\n\n    // client key and certificates are sent to server so it can authenticate us\n    val ks:KeyStore  = KeyStore.getInstance(KeyStore.getDefaultType())\n    ks.load(null, null)\n    ks.setCertificateEntry(\"certificate\", serverCert)\n    ks.setKeyEntry(\"private-key\", keyPair.getPrivate(), keyStorePassword.toCharArray, Array(serverCert))\n    val kmf:KeyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm())\n    kmf.init(ks, keyStorePassword.toCharArray());\n\n    // finally, create SSL socket factory\n    val context:SSLContext = SSLContext.getInstance(\"TLSv1.2\")\n    context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null)\n\n    context.getSocketFactory()\n  }\n\n\n  def convertToJavaCertificate(certificateHolder:X509CertificateHolder):X509Certificate = {\n     val is:InputStream = new ByteArrayInputStream(certificateHolder.toASN1Structure.getEncoded);\n    try {\n      CertificateFactory.getInstance(\"X.509\").generateCertificate(is).asInstanceOf[X509Certificate]\n    } finally is.close()\n  }\n}\n```\n\n```scala:PublishMqttCallback.scala\nimport org.eclipse.paho.client.mqttv3.{IMqttDeliveryToken, MqttMessage, MqttCallback}\n\n/** Publish MqttCallBack */\nclass PublishMqttCallback extends MqttCallback{\n  // Nop\n  override def deliveryComplete(iMqttDeliveryToken: IMqttDeliveryToken): Unit = ???\n\n  override def messageArrived(s: String, mqttMessage: MqttMessage): Unit = ???\n\n  override def connectionLost(throwable: Throwable): Unit = ???\n}\n```\n\n## \u5b9f\u969b\u306e\u52d5\u4f5c\u78ba\u8a8d\nmosquitto_sub\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u969b\u306b\u6295\u5165\u3055\u308c\u308b\u304b\u3092\u78ba\u304b\u3081\u3066\u307f\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306bScala\u5074\u306e\u30b3\u30fc\u30c9\u304b\u3089\u6295\u5165\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304cSubscribe\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n```\n# mosquitto_sub --cafile rootCA.pem --cert cert.pem --key private.pem -h ******.iot.ap-northeast-1.amazonaws.com -p 8883 -q 1 -d -t test-topic -i mosquitto-subscriber\nClient mosquitto-subscriber sending CONNECT\nClient mosquitto-subscriber received CONNACK\nClient mosquitto-subscriber sending SUBSCRIBE (Mid: 1, Topic: test-topic, QoS: 1)\nClient mosquitto-subscriber received SUBACK\nSubscribed (mid: 1): 1\nClient mosquitto-subscriber received PUBLISH (d0, q1, r0, m1, 'test-topic', ... (12 bytes))\nClient mosquitto-subscriber sending PUBACK (Mid: 1)\nTest Message\n```\n\n## \u6700\u5f8c\u306b\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001SSLSocketFactory\u3092\u5dee\u3057\u66ff\u3048\u308b\u3053\u3068\u3067\u3001Scala\u304b\u3089AWS IoT\u306b\u76f4\u63a5\u63a5\u7d9a\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306ePublish\u304c\u884c\u3048\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u304a\u305d\u3089\u304fSubscribe\u3082\u540c\u3058\u65b9\u5f0f\u3067\u53ef\u80fd\u3060\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001\u6b21\u306b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n", "tags": ["AWS", "awsIoT", "Scala", "mqtt"]}