{"context": " More than 1 year has passed since last update.OmniAuth\u306a\u3069\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\n\nOmniAuth\u3067\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3068\u9023\u643a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u4e0d\u8981\n\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u4e0d\u8981\u3067\u3082\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u8ffd\u52a0\u3001\u66f4\u65b0\u306f\u53ef\u80fd\n\n\nOmniAuth\u3067\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3068\u9023\u643a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u5fc5\u9808\n\n\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3067\u3001Devise\u3067\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u66f4\u6a5f\u80fd\u3092\u4f5c\u3063\u305f\u3002\nDevise\u3067\u30ed\u30b0\u30a4\u30f3\u6a5f\u80fd\u3092\u4f5c\u308b\u3068\u3001edit_user_registration_path\u304c\u81ea\u52d5\u306b\u4f5c\u3089\u308c\u308b\u306f\u305a\u306a\u306e\u3067\u3001\u305d\u3053\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3002\nlink_to('\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5909\u3048\u308b', edit_user_registration_path(@user))\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u66f4\u306e\u5165\u529b\u30d5\u30a9\u30fc\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3002\n\nregistrations.html.slim\n.main\n  .container\n    .row\n      .span4.offset4\n        h2\n          | \u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u66f4\n          = resource_name.to_s.humanize\n        = form_for(resource, :as => resource_name, :url => registration_path(resource_name), :html => { :method => :put }) do |f|\n          = devise_error_messages!\n          - if current_user.encrypted_password.present?\n            div\n              = f.label :current_password, '\u73fe\u5728\u306e\u30d1\u30b9\u30ef\u30fc\u30c9'\n              br\n              = f.password_field :current_password\n          div\n            = f.label :password, '\u65b0\u3057\u3044\u30d1\u30b9\u30ef\u30fc\u30c9'\n            br\n            = f.password_field :password, :autocomplete => 'on'\n          div\n            = f.label :password_confirmation, '\u65b0\u3057\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3082\u3046\u4e00\u5ea6'\n            br\n            = f.password_field :password_confirmation\n          div\n            = f.submit '\u66f4\u65b0\u3059\u308b'\n\n\nUser\u60c5\u5831\u3092\u66f4\u65b0\u3059\u308b\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30e1\u30bd\u30c3\u30c9\u306fDevise::RegistrationsController\u306eupdate\u3002\n\nregistration_controller.rb\n # PUT /resource\n  # We need to use a copy of the resource because we don't want to change\n  # the current user in place.\n  def update\n    self.resource = resource_class.to_adapter.get!(send(:\"current_#{resource_name}\").to_key)\n    prev_unconfirmed_email = resource.unconfirmed_email if resource.respond_to?(:unconfirmed_email)\n\n    if update_resource(resource, account_update_params)\n      yield resource if block_given?\n      if is_flashing_format?\n        flash_key = update_needs_confirmation?(resource, prev_unconfirmed_email) ?\n          :update_needs_confirmation : :updated\n        set_flash_message :notice, flash_key\n      end\n      sign_in resource_name, resource, bypass: true\n      respond_with resource, location: after_update_path_for(resource)\n    else\n      clean_up_passwords resource\n      respond_with resource\n    end\n  end\n\n# ...\n\nprotected\n\n# ...\n\n # By default we want to require a password checks on update.\n  # You can overwrite this method in your own RegistrationsController.\n  def update_resource(resource, params)\n    resource.update_with_password(params)\n  end\n\n\n\n\u305d\u306e\u4e2d\u3067\u3082\u3001\u5b9f\u969b\u306b\u66f4\u65b0\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u306f if update_resource(resource, account_update_params) \u306e\u90e8\u5206\u3002\n\u306a\u306e\u3067\u3001devise\u3092\u4f7f\u3063\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3067update_resource\u3092override\u3057\u3066\u3001\u3082\u3057\u3082\u307e\u3060\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u767b\u9332\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u78ba\u8a8d\u305b\u305a\u306b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u3066\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u767b\u9332\u3057\u3066\u3044\u308b\u3068\u304d\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u78ba\u8a8d\u3057\u3066\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3059\u308b\u3002\n\nregistrations_controller.rb\n\nclass RegistrationsController < Devise::RegistrationsController\n  before_filter :configure_permitted_parameters, if: :devise_controller?\n\n #override\n  def update_resource(resource, params)\n    resource.update_with_password_if_password_present(params)\n  end\n\n  def configure_permitted_parameters\n     devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:email, :pen_name, :password, :password_confirmation, :current_password) }\n  end\n\n\n\n\u3053\u306e\u3088\u3046\u306b\u3001Devise\u306eRegistrationsController\u3092\u7d99\u627f\u3057\u305f\u5148\u3067override\u3002\n\nuser.rb\nclass User < ActiveRecord::Base\n\n# \u7701\u7565  \n\ndevise :database_authenticatable, :registerable,\n    :recoverable, :rememberable, :trackable, :validatable\n\n# \u7701\u7565\n\n  def update_with_password_if_password_present(params)\n    if encrypted_password.present?\n      return update_with_password(params)\n    else\n      result = update_attributes(params)\n      clean_up_passwords\n      return result\n    end\n  end\n\n\n\u306a\u304a\u3001DatabaseAuthenticatable\u306eupdate_with_password\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3002\n\ndatabase_authenticatable.rb\n      # Update record attributes when :current_password matches, otherwise returns\n      # error on :current_password. It also automatically rejects :password and\n      # :password_confirmation if they are blank.\n      def update_with_password(params, *options)\n        current_password = params.delete(:current_password)\n\n        if params[:password].blank?\n          params.delete(:password)\n          params.delete(:password_confirmation) if params[:password_confirmation].blank?\n        end\n\n        result = if valid_password?(current_password)\n          update_attributes(params, *options)\n        else\n          self.assign_attributes(params, *options)\n          self.valid?\n          self.errors.add(:current_password, current_password.blank? ? :blank : :invalid)\n          false\n        end\n\n        clean_up_passwords\n        result\n      end\n\n\n\u53c2\u8003 \n\nhttps://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-edit-their-password\nhttps://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-edit-their-account-without-providing-a-password\nhttp://easyramble.com/user-account-update-without-password-on-devise.html\n\n\nOmniAuth\u306a\u3069\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\n\n- OmniAuth\u3067\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3068\u9023\u643a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u4e0d\u8981\n  - \u30d1\u30b9\u30ef\u30fc\u30c9\u4e0d\u8981\u3067\u3082\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u8ffd\u52a0\u3001\u66f4\u65b0\u306f\u53ef\u80fd\n- OmniAuth\u3067\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3068\u9023\u643a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u5fc5\u9808\n\n\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3067\u3001Devise\u3067\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u66f4\u6a5f\u80fd\u3092\u4f5c\u3063\u305f\u3002\n\nDevise\u3067\u30ed\u30b0\u30a4\u30f3\u6a5f\u80fd\u3092\u4f5c\u308b\u3068\u3001edit_user_registration_path\u304c\u81ea\u52d5\u306b\u4f5c\u3089\u308c\u308b\u306f\u305a\u306a\u306e\u3067\u3001\u305d\u3053\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3002\n\n```\nlink_to('\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5909\u3048\u308b', edit_user_registration_path(@user))\n```\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u66f4\u306e\u5165\u529b\u30d5\u30a9\u30fc\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3002\n\n```slim:registrations.html.slim\n.main\n  .container\n    .row\n      .span4.offset4\n        h2\n          | \u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u66f4\n          = resource_name.to_s.humanize\n        = form_for(resource, :as => resource_name, :url => registration_path(resource_name), :html => { :method => :put }) do |f|\n          = devise_error_messages!\n          - if current_user.encrypted_password.present?\n            div\n              = f.label :current_password, '\u73fe\u5728\u306e\u30d1\u30b9\u30ef\u30fc\u30c9'\n              br\n              = f.password_field :current_password\n          div\n            = f.label :password, '\u65b0\u3057\u3044\u30d1\u30b9\u30ef\u30fc\u30c9'\n            br\n            = f.password_field :password, :autocomplete => 'on'\n          div\n            = f.label :password_confirmation, '\u65b0\u3057\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3082\u3046\u4e00\u5ea6'\n            br\n            = f.password_field :password_confirmation\n          div\n            = f.submit '\u66f4\u65b0\u3059\u308b'\n```\n\n\nUser\u60c5\u5831\u3092\u66f4\u65b0\u3059\u308b\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30e1\u30bd\u30c3\u30c9\u306fDevise::RegistrationsController\u306eupdate\u3002\n\n```ruby:registration_controller.rb\n # PUT /resource\n  # We need to use a copy of the resource because we don't want to change\n  # the current user in place.\n  def update\n    self.resource = resource_class.to_adapter.get!(send(:\"current_#{resource_name}\").to_key)\n    prev_unconfirmed_email = resource.unconfirmed_email if resource.respond_to?(:unconfirmed_email)\n\n    if update_resource(resource, account_update_params)\n      yield resource if block_given?\n      if is_flashing_format?\n        flash_key = update_needs_confirmation?(resource, prev_unconfirmed_email) ?\n          :update_needs_confirmation : :updated\n        set_flash_message :notice, flash_key\n      end\n      sign_in resource_name, resource, bypass: true\n      respond_with resource, location: after_update_path_for(resource)\n    else\n      clean_up_passwords resource\n      respond_with resource\n    end\n  end\n\n# ...\n\nprotected\n\n# ...\n\n # By default we want to require a password checks on update.\n  # You can overwrite this method in your own RegistrationsController.\n  def update_resource(resource, params)\n    resource.update_with_password(params)\n  end\n\n```\n\n\u305d\u306e\u4e2d\u3067\u3082\u3001\u5b9f\u969b\u306b\u66f4\u65b0\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u306f *if update_resource(resource, account_update_params)* \u306e\u90e8\u5206\u3002\n\n\u306a\u306e\u3067\u3001devise\u3092\u4f7f\u3063\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3067update_resource\u3092override\u3057\u3066\u3001\u3082\u3057\u3082\u307e\u3060\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u767b\u9332\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u78ba\u8a8d\u305b\u305a\u306b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u3066\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u767b\u9332\u3057\u3066\u3044\u308b\u3068\u304d\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u78ba\u8a8d\u3057\u3066\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3059\u308b\u3002\n\n\n```ruby:registrations_controller.rb\n\nclass RegistrationsController < Devise::RegistrationsController\n  before_filter :configure_permitted_parameters, if: :devise_controller?\n\n #override\n  def update_resource(resource, params)\n    resource.update_with_password_if_password_present(params)\n  end\n\n  def configure_permitted_parameters\n     devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:email, :pen_name, :password, :password_confirmation, :current_password) }\n  end\n\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001Devise\u306eRegistrationsController\u3092\u7d99\u627f\u3057\u305f\u5148\u3067override\u3002\n\n```ruby:user.rb\nclass User < ActiveRecord::Base\n\n# \u7701\u7565  \n\ndevise :database_authenticatable, :registerable,\n    :recoverable, :rememberable, :trackable, :validatable\n\n# \u7701\u7565\n\n  def update_with_password_if_password_present(params)\n    if encrypted_password.present?\n      return update_with_password(params)\n    else\n      result = update_attributes(params)\n      clean_up_passwords\n      return result\n    end\n  end\n```\n\n\u306a\u304a\u3001DatabaseAuthenticatable\u306eupdate_with_password\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3002\n\n\n```ruby:database_authenticatable.rb\n      # Update record attributes when :current_password matches, otherwise returns\n      # error on :current_password. It also automatically rejects :password and\n      # :password_confirmation if they are blank.\n      def update_with_password(params, *options)\n        current_password = params.delete(:current_password)\n\n        if params[:password].blank?\n          params.delete(:password)\n          params.delete(:password_confirmation) if params[:password_confirmation].blank?\n        end\n\n        result = if valid_password?(current_password)\n          update_attributes(params, *options)\n        else\n          self.assign_attributes(params, *options)\n          self.valid?\n          self.errors.add(:current_password, current_password.blank? ? :blank : :invalid)\n          false\n        end\n\n        clean_up_passwords\n        result\n      end\n```\n\n\n\n\n\u53c2\u8003 \n\n- https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-edit-their-password\n- https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-edit-their-account-without-providing-a-password\n- http://easyramble.com/user-account-update-without-password-on-devise.html\n", "tags": ["Ruby", "Rails", "devise"]}