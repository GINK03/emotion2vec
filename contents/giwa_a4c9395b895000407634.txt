{"context": " More than 1 year has passed since last update.\n\nSummary\nCircleCI\u306e\u74b0\u5883\u5909\u6570\u3068Github\u306eAPI\u3092\u4f7f\u3063\u3066\u3001PR\u306eID\u3092\u308f\u308a\u3060\u3057\u3001\u305d\u306ePR\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u30b3\u30e1\u30f3\u30c8\u3059\u308b\u305f\u3081\u306ePython\u306e\u30b3\u30fc\u30c9\n\nMotivation\nGithub\u306ePR\u5185\u3067\u5b8c\u7d50\u3055\u305b\u308b\u305f\u3081\u306bCircle CI\u3067\u30c6\u30b9\u30c8\u304b\u3089\u3001PR\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u3002\n\nHow to use\ngithub = Github()\n\ngithub.issue_comment('comment that you post in PR thread')\n\n\n\nCode\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport json\nimport pprint\n\nimport requests\n\n__all__ = ['Github']\n\nBASE_URL = \"https://api.github.com\"\nTOKEN = 'YOUR TOKEN'\nORG = \"YOUR ORG or USERNAME\"\nREPO = \"YOUR REPOSITORY NAME\"\nGET_PULLURL_TMP = \"{base_url}/repos/{org}/{repo}/pulls\"\nCACHE_FILE = '/tmp/github_pull_info'\nbranch = os.environ['CIRCLE_BRANCH']\n\n\nclass Github(object):\n    def __init__(self):\n        self._pull_info = None\n        self._headers = {'Content-Type': 'application/json',\n                         'Authorization': 'token ' + TOKEN}\n        if os.path.isfile(CACHE_FILE):\n            self._read_cache()\n        else:\n            self._get_pull_info()\n            self._write_cache()\n\n    def _generate_pulls_url(self):\n        \"\"\"\n        Generate pull url\n        HOST/repos/:owner/:repo/pulls\n        \"\"\"\n        return GET_PULLURL_TMP.format(base_url=BASE_URL, org=ORG, repo=REPO)\n\n    def _get_pull_info(self):\n        \"\"\"\n        Get pull infor using pull API\n        There is an assumption that one branch is used for one PR\n        \"\"\"\n        url = self._generate_pulls_url()\n        params = {'head': ORG + \":\" + branch}\n        r = requests.get(url, headers=self._headers, params=params)\n        if r.status_code == 200:\n            self._pull_info = json.loads(r.text)\n\n    def _generate_comment_url(self):\n        \"\"\"\n        Generate comment url\n        HOST/repos/:owner/:repo/issues/:num/comments\n        \"\"\"\n        return self._pull_info[0]['issue_url'] + '/comments'\n\n    def _write_cache(self):\n        with open(CACHE_FILE, 'w') as f:\n            f.write(json.dumps(self._pull_info))\n            f.flush()\n\n    def _read_cache(self):\n        l = None\n        with open(CACHE_FILE, 'r') as f:\n            l = f.readlines()[0]\n        if l and self._pull_info == None:\n            self._pull_info = json.loads(l)\n\n    def issue_comment(self, comment):\n        \"\"\" Post issue comment for this PR \"\"\"\n        url = self._generate_comment_url()\n        data = json.dumps({'body': comment})\n        r = requests.post(url, headers=self._headers, data=data)\n        pprint.pprint(json.loads(r.text))\n\n\nif __name__ == \"__main__\":\n    github = Github()\n    comment = 'test'\n    github.issue_comment(comment)\n\n\nSome assumeptions\n\n\u4e00\u3064\u306e\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u3001\u4e00\u3064\u306ePR\u3057\u304b\u4f5c\u6210\u3055\u308c\u306a\u3044\u3002\n\u30d1\u30e9\u30ec\u30eb\u3067\u8907\u6570\u5b9f\u884c\u3055\u308c\u306a\u3044 #PR\u306e\u60c5\u5831\u3092API\u3068\u3063\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3001API\u3092\u53e9\u304f\u56de\u6570\u3092\u6e1b\u3089\u3057\u3066\u3044\u308b\u305f\u3081\u3002\n\u7d30\u304b\u3044\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u3057\u3066\u3044\u306a\u3044\u3002\n\n\n\n## Summary\nCircleCI\u306e\u74b0\u5883\u5909\u6570\u3068Github\u306eAPI\u3092\u4f7f\u3063\u3066\u3001PR\u306eID\u3092\u308f\u308a\u3060\u3057\u3001\u305d\u306ePR\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u30b3\u30e1\u30f3\u30c8\u3059\u308b\u305f\u3081\u306ePython\u306e\u30b3\u30fc\u30c9\n\n## Motivation\nGithub\u306ePR\u5185\u3067\u5b8c\u7d50\u3055\u305b\u308b\u305f\u3081\u306b\u0001Circle CI\u3067\u30c6\u30b9\u30c8\u304b\u3089\u3001PR\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u3002\n\n\n\n## How to use\n\n```python\ngithub = Github()\n\ngithub.issue_comment('comment that you post in PR thread')\n\n```\n\n## Code\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport json\nimport pprint\n\nimport requests\n\n__all__ = ['Github']\n\nBASE_URL = \"https://api.github.com\"\nTOKEN = 'YOUR TOKEN'\nORG = \"YOUR ORG or USERNAME\"\nREPO = \"YOUR REPOSITORY NAME\"\nGET_PULLURL_TMP = \"{base_url}/repos/{org}/{repo}/pulls\"\nCACHE_FILE = '/tmp/github_pull_info'\nbranch = os.environ['CIRCLE_BRANCH']\n\n\nclass Github(object):\n    def __init__(self):\n        self._pull_info = None\n        self._headers = {'Content-Type': 'application/json',\n                         'Authorization': 'token ' + TOKEN}\n        if os.path.isfile(CACHE_FILE):\n            self._read_cache()\n        else:\n            self._get_pull_info()\n            self._write_cache()\n\n    def _generate_pulls_url(self):\n        \"\"\"\n        Generate pull url\n        HOST/repos/:owner/:repo/pulls\n        \"\"\"\n        return GET_PULLURL_TMP.format(base_url=BASE_URL, org=ORG, repo=REPO)\n\n    def _get_pull_info(self):\n        \"\"\"\n        Get pull infor using pull API\n        There is an assumption that one branch is used for one PR\n        \"\"\"\n        url = self._generate_pulls_url()\n        params = {'head': ORG + \":\" + branch}\n        r = requests.get(url, headers=self._headers, params=params)\n        if r.status_code == 200:\n            self._pull_info = json.loads(r.text)\n\n    def _generate_comment_url(self):\n        \"\"\"\n        Generate comment url\n        HOST/repos/:owner/:repo/issues/:num/comments\n        \"\"\"\n        return self._pull_info[0]['issue_url'] + '/comments'\n\n    def _write_cache(self):\n        with open(CACHE_FILE, 'w') as f:\n            f.write(json.dumps(self._pull_info))\n            f.flush()\n\n    def _read_cache(self):\n        l = None\n        with open(CACHE_FILE, 'r') as f:\n            l = f.readlines()[0]\n        if l and self._pull_info == None:\n            self._pull_info = json.loads(l)\n\n    def issue_comment(self, comment):\n        \"\"\" Post issue comment for this PR \"\"\"\n        url = self._generate_comment_url()\n        data = json.dumps({'body': comment})\n        r = requests.post(url, headers=self._headers, data=data)\n        pprint.pprint(json.loads(r.text))\n\n\nif __name__ == \"__main__\":\n    github = Github()\n    comment = 'test'\n    github.issue_comment(comment)\n```\n\n\n## Some assumeptions\n* \u4e00\u3064\u306e\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u3001\u4e00\u3064\u306ePR\u3057\u304b\u4f5c\u6210\u3055\u308c\u306a\u3044\u3002\n* \u30d1\u30e9\u30ec\u30eb\u3067\u8907\u6570\u5b9f\u884c\u3055\u308c\u306a\u3044 #PR\u306e\u60c5\u5831\u3092API\u3068\u3063\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3001API\u3092\u53e9\u304f\u56de\u6570\u3092\u6e1b\u3089\u3057\u3066\u3044\u308b\u305f\u3081\u3002\n* \u7d30\u304b\u3044\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u3057\u3066\u3044\u306a\u3044\u3002\n\n", "tags": ["Python", "CircleCI", "GitHub"]}