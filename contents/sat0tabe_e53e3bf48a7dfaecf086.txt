{"context": "Select\u7cfb\u306e\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092Powershell\u3067\u4f5c\u6210\u3057\u305f\u306e\u3067\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u307e\u3059\u3002\n\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u306fSQLDatabase\u5411\u3051\u306a\u306e\u3067\u30ea\u30c8\u30e9\u30a4\u51e6\u7406\u4ed8\u304d\u3067\u3059\u3002\n\nGet-CustoDatabaseData.ps1\nfunction Get-CustomDatabaseData\n{\n    [CmdletBinding()]\n    param (\n        [string] $FilePath,\n        [string] $Sql=\"\"\n    )\n\n    #Check filepath.\n    if (!$Sql) {\n        if (!(Test-Path $FilePath)) {\n            throw (\"Specified File({0}) is not found!\" -f $FilePath)\n        }\n    }\n\n    $connectionString = \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30b9\u30c8\u30ea\u30f3\u30b0\u53d6\u5f97\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n\n    $maxRetry = 5\n    foreach ($i in 1..$maxRetry) {\n        try {\n            $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)\n\n            #Check Sql option\n            if($Sql -eq \"\") {\n                $Sql = Get-Content $FilePath -Raw\n            }\n\n            Write-Verbose (\"`t Datasource: {0}\" -f $connection.DataSource)\n            Write-Verbose (\"`t Database: {0}\" -f $connection.Database)\n            Write-Verbose (\"`t SqlQuery: {0}\" -f $Sql)\n\n            $connection.Open()\n\n            $command = $connection.CreateCommand()\n            $command.CommandText = $Sql\n\n            $responseDataset =  New-Object -TypeName System.Data.DataSet\n            $adapter = New-Object -TypeName System.Data.SqlClient.SqlDataAdapter $command\n\n            [void]$adapter.Fill($responseDataset)\n\n            return $responseDataset\n\n        }\n        catch [System.Data.SqlClient.SqlException] {\n            $tentativeErrorNumbers = @(40627, 40613, 40545, 40540, 40501, 40197, 10929, 10928, 10060, 10054, 10053, 233, 64, 20)\n            $ex = $_.Exception\n            if (($i -eq $maxRetry) -or ($ex.Number -notin $tentativeErrorNumbers)) {\n                throw\n            }\n            Write-Warning (\"SqlCommand failed. retry after delay. ({0}/{1})\" -f $i, $maxRetry)\n            sleep 30\n        }\n        finally {\n            if ($connection -ne $null) {\n                $connection.Close()\n            }\n            $connection.Dispose();\n            $command.Dispose();\n            $ResponseDataset.Dispose();\n            $adapter.Dispose();\n        }\n\n    }\n\n}\n\n\nSelect\u7cfb\u306e\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092Powershell\u3067\u4f5c\u6210\u3057\u305f\u306e\u3067\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u307e\u3059\u3002\n\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u306fSQLDatabase\u5411\u3051\u306a\u306e\u3067\u30ea\u30c8\u30e9\u30a4\u51e6\u7406\u4ed8\u304d\u3067\u3059\u3002\n\n\n``` Get-CustoDatabaseData.ps1\nfunction Get-CustomDatabaseData\n{\n    [CmdletBinding()]\n    param (\n        [string] $FilePath,\n        [string] $Sql=\"\"\n    )\n\n    #Check filepath.\n\tif (!$Sql) {\n        if (!(Test-Path $FilePath)) {\n            throw (\"Specified File({0}) is not found!\" -f $FilePath)\n        }\n    }\n\n    $connectionString = \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30b9\u30c8\u30ea\u30f3\u30b0\u53d6\u5f97\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n\n    $maxRetry = 5\n    foreach ($i in 1..$maxRetry) {\n        try {\n            $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)\n            \n            #Check Sql option\n            if($Sql -eq \"\") {\n                $Sql = Get-Content $FilePath -Raw\n            }\n\n            Write-Verbose (\"`t Datasource: {0}\" -f $connection.DataSource)\n            Write-Verbose (\"`t Database: {0}\" -f $connection.Database)\n            Write-Verbose (\"`t SqlQuery: {0}\" -f $Sql)\n\n            $connection.Open()\n\n            $command = $connection.CreateCommand()\n            $command.CommandText = $Sql\n\t        \n            $responseDataset =  New-Object -TypeName System.Data.DataSet\n            $adapter = New-Object -TypeName System.Data.SqlClient.SqlDataAdapter $command\n\n            [void]$adapter.Fill($responseDataset)\n\n            return $responseDataset\n\n        }\n        catch [System.Data.SqlClient.SqlException] {\n            $tentativeErrorNumbers = @(40627, 40613, 40545, 40540, 40501, 40197, 10929, 10928, 10060, 10054, 10053, 233, 64, 20)\n            $ex = $_.Exception\n            if (($i -eq $maxRetry) -or ($ex.Number -notin $tentativeErrorNumbers)) {\n                throw\n            }\n            Write-Warning (\"SqlCommand failed. retry after delay. ({0}/{1})\" -f $i, $maxRetry)\n            sleep 30\n        }\n        finally {\n            if ($connection -ne $null) {\n                $connection.Close()\n            }\n            $connection.Dispose();\n            $command.Dispose();\n            $ResponseDataset.Dispose();\n            $adapter.Dispose();\n        }\n\n    }\n\n}\n```\n", "tags": ["PowerShell", "SQLServer", "SQL"]}