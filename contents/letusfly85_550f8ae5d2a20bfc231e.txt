{"context": " More than 1 year has passed since last update.\u307e\u3060\u3001\u3061\u3087\u3063\u3068\u66f8\u304d\u304b\u3051\u3067\u3059\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\noauth2\u7cfb\u306eREST\u30b5\u30fc\u30d3\u30b9\u306b\u3001\u81ea\u524d\u306eplay2\u3067\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u8a8d\u8a3c\u306b\u6210\u529f\u3057\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u307f\u30b5\u30fc\u30d3\u30b9\u306e\u7d99\u7d9a\u3092\u8a31\u53ef\u3057\u305f\u3044\n\n\u4f5c\u6210\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\nhttps://github.com/letusfly85/play2-call-auth-sample\n\n1. \u5229\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\n\n\u3084\u308b\u3053\u3068\nGitHub\nversion\n\u88dc\u8db3\n\n\n\n\nhttp\u30a2\u30af\u30bb\u30b9\ndispatch\n\"net.databinder.dispatch\" %% \"dispatch-core\" % \"0.11.3\"\nplay2.4.x\u30680.11.2\u306e\u7d44\u307f\u5408\u308f\u305b\u3060\u3068\u3001class not found exception \u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3002\n\n\njson\u30d1\u30fc\u30b5\u30fc\nargonaut\n\"io.argonaut\" %% \"argonaut\" % \"6.1\"\n\n\n\n\n\nbuild.sbt\nname := \"\"\"call-auth-sample\"\"\"\n\nversion := \"1.0-SNAPSHOT\"\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayScala)\n\nscalaVersion := \"2.11.7\"\n\nlibraryDependencies ++= Seq(\n  jdbc,\n  cache,\n  specs2 % Test,\n  \"net.databinder.dispatch\" %% \"dispatch-core\" % \"0.11.3\",\n  \"io.argonaut\" %% \"argonaut\" % \"6.1\"\n)\n\nresolvers += \"scalaz-bintray\" at \"http://dl.bintray.com/scalaz/releases\"\n\n// Play provides two styles of routers, one expects its actions to be injected, the\n// other, legacy style, accesses its actions statically.\nroutesGenerator := InjectedRoutesGenerator\n\n\n\n\n2. \u30b5\u30f3\u30d7\u30eb\u3067\u5229\u7528\u3057\u305foauth\u306e\u30b5\u30fc\u30d3\u30b9\n\u524d\u56de\u306e\u6295\u7a3f\u3067\u4f5c\u6210\u3057\u305foauth\u306eplay2\u30a2\u30d7\u30ea\u3092docker\u4e0a\u3067\u52d5\u304b\u3057\u3066\u5229\u7528\u3057\u307e\u3057\u305f\u3002\naccess_token\u3092\u4e0b\u8a18\u3067\u53d6\u5f97\u3057\u3066\u3001\ncurl http://localhost:9000/oauth/access_token -X POST -d \"client_id=bob_client_id\" -d \"client_secret=bob_client_secret\" -d \"grant_type=client_credentials\"\n\n\u30ea\u30bd\u30fc\u30b9\u53d6\u5f97\u3059\u308b\u3001\u3092play2\u3067\u3057\u305f\u3044\ncurl --dump-header - -H \"Authorization: Bearer ${access_token}\" http://localhost:9000/resources\n\n\u3068\u3001\u3044\u3046\u3053\u3068\u3067\u3001\ndocker run -i -p 80:9000 -e \"JAVA_OPTS=-Dplay.evolutions.db.default.autoApply=true\" letusfly85/play-sample-auth\n\n\u3067docker run\u3057\u307e\u3057\u305f\u3002\n\n3. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\nroutes\u306b\u4eca\u56de\u5b9f\u65bd\u3057\u305f\u3044\u51e6\u7406\u7528\u306erouting\u3092\u7528\u610f\u3057\u307e\u3059\u3002\nGET     /auth/access_token          controllers.AuthController.accessToken\n\nAuthController\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\napp/controllers/AuthController.scala\npackage controllers\n\nimport dispatch.{url, Http}\nimport dispatch._, Defaults._\n\nimport play.api.mvc.{Action, Controller}\n\nimport argonaut._, Argonaut._\n\n\nclass AuthController extends Controller {\n\n  //access token\u3092\u8a70\u3081\u308bcase class\u3092\u7528\u610f\n  case class UserAuthToken(tokenType: String, accessToken: String, expiresIn: Int, refreshToken: String)\n\n  //codec\u3092\u7528\u610f\n  implicit def UserAuthTokenCodecJson =\n    casecodec4(UserAuthToken.apply, UserAuthToken.unapply)(\"token_type\", \"access_token\", \"expires_in\", \"refresh_token\")\n\n  def accessToken = Action {implicit request =>\n    val authUrl = System.getProperty(\"auth.url\")\n\n    val host = url(authUrl)\n    val request = host / \"oauth\" / \"access_token\"\n\n    //curl http://localhost:9000/oauth/access_token -X POST -d \"client_id=bob_client_id\" -d \"client_secret=bob_client_secret\" -d \"grant_type=client_credentials\"\n    val requestAsJson = request.POST.setContentType(\"application/json\", \"UTF-8\")\n    val postWithBody  = requestAsJson << \"\"\"{\"client_id\": \"bob_client_id\", \"client_secret\": \"bob_client_secret\", \"grant_type\": \"client_credentials\"}\"\"\"\n\n    val result = Http(postWithBody OK as.String).apply()\n\n    val option: Option[UserAuthToken] =\n      Parse.decodeOption[UserAuthToken](result)\n\n    option match {\n      case Some(opt) =>\n        println(opt)\n\n        //curl --dump-header - -H \"Authorization: Bearer ${access_token}\" http://localhost:9000/resources\n        val resourceRequest = host / \"resources\"\n        val resourceRequestWithHeader = resourceRequest.setHeader(\"Authorization\", s\"${opt.tokenType} ${opt.accessToken}\")\n\n        val resourceResult = Http(resourceRequestWithHeader OK as.String).apply()\n        println(resourceResult)\n\n      case None => println(\"error....\")\n    }\n    Ok(\"ok\")\n  }\n\n}\n\n\n\n4. \u5b9f\u884c\u3059\u308b\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b9\u30bf\u30fc\u30c8\nsbt -Dauth.url=*.*.*.* run\n\n\u30ed\u30fc\u30ab\u30eb\u3067\u52d5\u3044\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092curl\u7d4c\u7531\u3067\u5b9f\u884c\u3059\u308b\ncurl -XGET localhost:9000/auth/access_token\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nUserAuthToken(Bearer,3YioO5Bf0tGEwj7QB5gVe80b0ubogJOKZD421VC1,2241,zJtszWyIzcfePqeufRcNjxrhu54vIDZ74b02XniM)\n{\"account\":{\"email\":\"bob@example.com\"},\"clientId\":\"bob_client_id\",\"redirectUri\":null}\n\n\n5. \u6240\u611f\ndispatch\u3068argonaut\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3046\u307e\u3044\u3053\u3068play2\u304b\u3089\u3082\u8907\u6570\u306eweb service\u9023\u643a\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u306d\uff01\ndispatch\u306efailure\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u3082\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u898b\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001akka\u3068\u3082\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u3057\u3066\u307f\u305f\u3044\u3067\u3059\u306d\uff3e\uff3e\n\n\u672c\u65e5\u306f\u3053\u3053\u307e\u3067\u3068\u306a\u308a\u307e\u3059\u3002\n\u307e\u3060\u3001\u3061\u3087\u3063\u3068\u66f8\u304d\u304b\u3051\u3067\u3059\u3002\n\n## \u3084\u308a\u305f\u3044\u3053\u3068\n\noauth2\u7cfb\u306eREST\u30b5\u30fc\u30d3\u30b9\u306b\u3001\u81ea\u524d\u306eplay2\u3067\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u8a8d\u8a3c\u306b\u6210\u529f\u3057\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u307f\u30b5\u30fc\u30d3\u30b9\u306e\u7d99\u7d9a\u3092\u8a31\u53ef\u3057\u305f\u3044\n\n## \u4f5c\u6210\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\n\nhttps://github.com/letusfly85/play2-call-auth-sample\n\n## 1. \u5229\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\n| \u3084\u308b\u3053\u3068 |GitHub|version|\u88dc\u8db3|\n|:-----------|:------------|:------------|:---|\n| http\u30a2\u30af\u30bb\u30b9|[dispatch](https://github.com/dispatch/reboot)|\"net.databinder.dispatch\" %% \"dispatch-core\" % \"0.11.3\"|play2.4.x\u30680.11.2\u306e\u7d44\u307f\u5408\u308f\u305b\u3060\u3068\u3001class not found exception \u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3002|\n|json\u30d1\u30fc\u30b5\u30fc|[argonaut](https://github.com/argonaut-io/argonaut)|\"io.argonaut\" %% \"argonaut\" % \"6.1\"||\n\n```build.sbt\nname := \"\"\"call-auth-sample\"\"\"\n\nversion := \"1.0-SNAPSHOT\"\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayScala)\n\nscalaVersion := \"2.11.7\"\n\nlibraryDependencies ++= Seq(\n  jdbc,\n  cache,\n  specs2 % Test,\n  \"net.databinder.dispatch\" %% \"dispatch-core\" % \"0.11.3\",\n  \"io.argonaut\" %% \"argonaut\" % \"6.1\"\n)\n\nresolvers += \"scalaz-bintray\" at \"http://dl.bintray.com/scalaz/releases\"\n\n// Play provides two styles of routers, one expects its actions to be injected, the\n// other, legacy style, accesses its actions statically.\nroutesGenerator := InjectedRoutesGenerator\n\n```\n\n## 2. \u30b5\u30f3\u30d7\u30eb\u3067\u5229\u7528\u3057\u305foauth\u306e\u30b5\u30fc\u30d3\u30b9\n\n[\u524d\u56de\u306e\u6295\u7a3f](../../letusfly85/items/abcde91a37dadf8c72b0)\u3067\u4f5c\u6210\u3057\u305foauth\u306eplay2\u30a2\u30d7\u30ea\u3092docker\u4e0a\u3067\u52d5\u304b\u3057\u3066\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\naccess_token\u3092\u4e0b\u8a18\u3067\u53d6\u5f97\u3057\u3066\u3001\n\n```bash\ncurl http://localhost:9000/oauth/access_token -X POST -d \"client_id=bob_client_id\" -d \"client_secret=bob_client_secret\" -d \"grant_type=client_credentials\"\n```\n\n\u30ea\u30bd\u30fc\u30b9\u53d6\u5f97\u3059\u308b\u3001\u3092play2\u3067\u3057\u305f\u3044\n\n```bash\ncurl --dump-header - -H \"Authorization: Bearer ${access_token}\" http://localhost:9000/resources\n```\n\n\u3068\u3001\u3044\u3046\u3053\u3068\u3067\u3001\n\n```bash\ndocker run -i -p 80:9000 -e \"JAVA_OPTS=-Dplay.evolutions.db.default.autoApply=true\" letusfly85/play-sample-auth\n```\n\n\u3067`docker run`\u3057\u307e\u3057\u305f\u3002\n\n## 3. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\n\nroutes\u306b\u4eca\u56de\u5b9f\u65bd\u3057\u305f\u3044\u51e6\u7406\u7528\u306erouting\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```conf/routes\nGET     /auth/access_token          controllers.AuthController.accessToken\n```\n\nAuthController\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\n```app/controllers/AuthController.scala\npackage controllers\n\nimport dispatch.{url, Http}\nimport dispatch._, Defaults._\n\nimport play.api.mvc.{Action, Controller}\n\nimport argonaut._, Argonaut._\n\n\nclass AuthController extends Controller {\n\n  //access token\u3092\u8a70\u3081\u308bcase class\u3092\u7528\u610f\n  case class UserAuthToken(tokenType: String, accessToken: String, expiresIn: Int, refreshToken: String)\n\n  //codec\u3092\u7528\u610f\n  implicit def UserAuthTokenCodecJson =\n    casecodec4(UserAuthToken.apply, UserAuthToken.unapply)(\"token_type\", \"access_token\", \"expires_in\", \"refresh_token\")\n\n  def accessToken = Action {implicit request =>\n    val authUrl = System.getProperty(\"auth.url\")\n\n    val host = url(authUrl)\n    val request = host / \"oauth\" / \"access_token\"\n\n    //curl http://localhost:9000/oauth/access_token -X POST -d \"client_id=bob_client_id\" -d \"client_secret=bob_client_secret\" -d \"grant_type=client_credentials\"\n    val requestAsJson = request.POST.setContentType(\"application/json\", \"UTF-8\")\n    val postWithBody  = requestAsJson << \"\"\"{\"client_id\": \"bob_client_id\", \"client_secret\": \"bob_client_secret\", \"grant_type\": \"client_credentials\"}\"\"\"\n\n    val result = Http(postWithBody OK as.String).apply()\n\n    val option: Option[UserAuthToken] =\n      Parse.decodeOption[UserAuthToken](result)\n\n    option match {\n      case Some(opt) =>\n        println(opt)\n\n        //curl --dump-header - -H \"Authorization: Bearer ${access_token}\" http://localhost:9000/resources\n        val resourceRequest = host / \"resources\"\n        val resourceRequestWithHeader = resourceRequest.setHeader(\"Authorization\", s\"${opt.tokenType} ${opt.accessToken}\")\n\n        val resourceResult = Http(resourceRequestWithHeader OK as.String).apply()\n        println(resourceResult)\n\n      case None => println(\"error....\")\n    }\n    Ok(\"ok\")\n  }\n\n}\n```\n\n## 4. \u5b9f\u884c\u3059\u308b\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b9\u30bf\u30fc\u30c8\n\n```bash\nsbt -Dauth.url=*.*.*.* run\n```\n\n\u30ed\u30fc\u30ab\u30eb\u3067\u52d5\u3044\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092curl\u7d4c\u7531\u3067\u5b9f\u884c\u3059\u308b\n\n```bash\ncurl -XGET localhost:9000/auth/access_token\n```\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n```bash\nUserAuthToken(Bearer,3YioO5Bf0tGEwj7QB5gVe80b0ubogJOKZD421VC1,2241,zJtszWyIzcfePqeufRcNjxrhu54vIDZ74b02XniM)\n{\"account\":{\"email\":\"bob@example.com\"},\"clientId\":\"bob_client_id\",\"redirectUri\":null}\n```\n\n## 5. \u6240\u611f\n\ndispatch\u3068argonaut\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3046\u307e\u3044\u3053\u3068play2\u304b\u3089\u3082\u8907\u6570\u306eweb service\u9023\u643a\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u306d\uff01\ndispatch\u306efailure\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u3082\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u898b\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001akka\u3068\u3082\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u3057\u3066\u307f\u305f\u3044\u3067\u3059\u306d\uff3e\uff3e\n\n\n---\n\n\u672c\u65e5\u306f\u3053\u3053\u307e\u3067\u3068\u306a\u308a\u307e\u3059\u3002\n", "tags": ["PlayFramework", "Scala", "OAuth", "microservices", "JSON"]}