{"tags": ["Erlang"], "context": " More than 1 year has passed since last update.Erlang\u306e\u4fee\u884c\u4e2d\u3002erlang\u3067\u7279\u5b9a\u306e\u6570\u5b57\u3092\u5165\u308c\u308b\u3068\u3001\u7d20\u6570\u3068\u5408\u6210\u6570\u3067\u5206\u3051\u3066\u3001\u305d\u308c\u305e\u308c\u304c\u5165\u3063\u305flist\u3092\u8fd4\u3059\u3068\u3044\u3046\u3082\u306e\u3092\u4f5c\u3063\u305f\u3002\n\nSource\n- module(primenum).\n- export([primenum/1, printnum/2]).\n\nprimenum(Num) when Num >= 2 ->\n        primecheck(2, Num);\nprimenum(_Others) ->\n        false.\n\nprimecheck(TargetNum, TargetNum) ->\n        true;\nprimecheck(Num, TargetNum) when TargetNum rem Num =:= 0 ->\n        false;\nprimecheck(Num, TargetNum) ->\n        primecheck(Num+1, TargetNum).\n\n\ncreatelist(Num, List) when Num == 0 ->\n        List;\ncreatelist(Num, List) ->\n        createlist(Num-1 ,[Num | List]).\n\n\nprintnum(Num, Type) when Type =:= \"Prime\" ->\n        List = createlist(Num, []),\n        PrimeNum = lists:filter(fun(X) -> primenum(X) end, List);\nprintnum(Num, Type) when Type =:= \"Composit\" ->\n        List = createlist(Num, []),\n        PrimeNum = lists:filter(fun(X) -> primenum(X) end, List),\n        CompositNum = List -- PrimeNum.\n\n\n\u5b9f\u884c\u7d50\u679c\n2> primenum:printnum(100, \"Prime\").\n[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,\n 79,83,89,97]\n3> primenum:printnum(100, \"Composit\").\n[1,4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30,32,\n 33,34,35,36,38,39,40,42|...]\n\nErlang\u306e\u4fee\u884c\u4e2d\u3002erlang\u3067\u7279\u5b9a\u306e\u6570\u5b57\u3092\u5165\u308c\u308b\u3068\u3001\u7d20\u6570\u3068\u5408\u6210\u6570\u3067\u5206\u3051\u3066\u3001\u305d\u308c\u305e\u308c\u304c\u5165\u3063\u305flist\u3092\u8fd4\u3059\u3068\u3044\u3046\u3082\u306e\u3092\u4f5c\u3063\u305f\u3002\n\n#Source\n```erlang\n- module(primenum).\n- export([primenum/1, printnum/2]).\n\nprimenum(Num) when Num >= 2 ->\n        primecheck(2, Num);\nprimenum(_Others) ->\n        false.\n\nprimecheck(TargetNum, TargetNum) ->\n        true;\nprimecheck(Num, TargetNum) when TargetNum rem Num =:= 0 ->\n        false;\nprimecheck(Num, TargetNum) ->\n        primecheck(Num+1, TargetNum).\n\n\ncreatelist(Num, List) when Num == 0 ->\n        List;\ncreatelist(Num, List) ->\n        createlist(Num-1 ,[Num | List]).\n\n\nprintnum(Num, Type) when Type =:= \"Prime\" ->\n        List = createlist(Num, []),\n        PrimeNum = lists:filter(fun(X) -> primenum(X) end, List);\nprintnum(Num, Type) when Type =:= \"Composit\" ->\n        List = createlist(Num, []),\n        PrimeNum = lists:filter(fun(X) -> primenum(X) end, List),\n        CompositNum = List -- PrimeNum.\n```\n#\u5b9f\u884c\u7d50\u679c\n```erlang\n2> primenum:printnum(100, \"Prime\").\n[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,\n 79,83,89,97]\n3> primenum:printnum(100, \"Composit\").\n[1,4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30,32,\n 33,34,35,36,38,39,40,42|...]\n```\n"}