{"context": " More than 1 year has passed since last update.\u672c\u65e5\u306f\u79c1\u3001SHOO\u304c\u67d0\u6240\u306b\u8d77\u7a3f\u3057\u305f H.e.l.l.o. w.o.r.l.d! D \u306b\u3064\u3044\u3066\u89e3\u8aac\u3044\u305f\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3054\u89a7\u306b\u5165\u308c\u307e\u3057\u3087\u3046\nimport std.string, std.range, std.algorithm, std.conv, std.array;\n\nstruct D\n{\n    string msg;\n    D opDispatch(string s)() @property\n    {\n        return typeof(return)(\n            ((a, b)=>a.equal(b))(\n                msg.retro().cycle().take(2),\n                msg.chain(s).retro().take(2).array().retro())\n                ? ((a, b)=>(\n                    a.insertInPlace(msg.countUntil(b)+1, \", \"), a.idup)\n                  )(msg.dup, msg.retro().take(2).array().retro())~s\n                : text(msg,s));\n    }\n    string d(T)() @property\n    {\n        return text(msg, T.stringof.toLower(), \"! \", T.stringof);\n    }\n}\nstruct H\n{\n    static D opDispatch(string s)() @property { return D(typeof(this).stringof~s); }\n}\n\npragma(msg, H.e.l.l.o. w.o.r.l.d! D);\n\nvoid main() {}\n\n\n\"Hello, world!\"\u306f\u3082\u3046\u53e4\u3044\n\u904e\u53bb\u306e\"Hello, world!\"\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\n#include <stdio.h>\nint main(int argc, const char *argv[])\n{\n    printf(\"Hello, world! C\\n\");\n    return 0;\n}\n\n\u8868\u793a\u306e\u305f\u3081\u306b\u5b9f\u884c\u304c\u5fc5\u8981\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000\u30c0\u30b5\u3044\uff01\u3000\uff1c\n\uffe3^Y^Y^Y^Y^\uffe3\nD\u8a00\u8a9e\u306a\u3089 pragma(msg, ...) \u3084CTFE\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f7f\u3046\u3053\u3068\u3067\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u4efb\u610f\u306e\u51e6\u7406\u3092\u884c\u3063\u305f\u7d50\u679c\u306e\u8868\u793a\u304c\u53ef\u80fd\npragma(msg, H.e.l.l.o. w.o.r.l.d! D);\n\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000\u3053\u3093\u306a\u306b\u3082\u30b9\u30bf\u30a4\u30ea\u30c3\u30b7\u30e5\u3000\uff1c\n\uffe3^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^\uffe3\n\n\u7d4c\u7def\n\n\u25cb\u6708\u00d7\u65e5 D\u8a00\u8a9e\u304c Dark Language \u3060\u306a\u3093\u3060\u3068dis\u3089\u308c\u308b\n\u591c\u3001\u4ed5\u4e8b\u304b\u3089\u5e30\u3063\u3066\u3001\u304a\u3082\u3080\u308d\u306bTwitter\u3092\u3084\u3063\u305f\u3002\n\u3053\u3044\u3064\u3089\u3001Dark Language\u3060\u306a\u3093\u3060\u3068\u304d\u3063\u3068\u30c7\u30de\u30ab\u30bb\u306b\u3061\u304c\u3044\u306d\u30a7\u3002\n\u4ffa\u305f\u3061\u3092\u3070\u304b\u306b\u3057\u3084\u304c\u3063\u3066\u3002\n\n\u25cb\u6708\u25b3\u65e5 \u30a2\u30f3\u30b5\u30a4\u30af\u30ed\u30da\u30c7\u30a3\u30a2\u306e\"Hello, world!\"\u304c\u58ca\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u3065\u304f\n\u4eca\u65e5\u3001\u30a2\u30f3\u30b5\u30a4\u30af\u30ed\u30da\u30c7\u30a3\u30a2\u306e\u8a18\u4e8b\u304b\u3089\u6614\u306e\"Hello, world!\"\u306e\u4e16\u8a71\u3092\u983c\u307e\u308c\u305f\u3002\n\u76ae\u3092\u3072\u3093\u3080\u3044\u305fJava\u306e\u3088\u3046\u306a\u5974\u3060\u3002\n\u30b3\u30fc\u30c9\u304c\u901a\u3089\u306a\u3044\u3063\u3066\u3093\u3067\u3001dmd\u306b\u6295\u3052\u3053\u3093\u3060\u3089\u3001\u5974\u3089\u3001writeln\u306eproperty\u6587\u304c\u901a\u3089\u306a\u304b\u3063\u305f\u308aDeprecation\u3092\u5f15\u304d\u51fa\u3057\u305f\u308a\n\u559a\u3044\u305f\u3042\u3052\u304f\u3084\u3063\u3068\u6b7b\u306b\u3084\u304c\u308b\u3002\n\n\u25b3\u6708\u25a1\u65e5 UFCS\u306e\u767b\u5834\n\u4eca\u671d\uff15\u6642\u9803\u3001\u5b87\u5b99\u670d\u307f\u3066\u3048\u306a\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7740\u305f\"Hello, world!\"\u306b\u7a81\u7136\u305f\u305f\u304d\u8d77\u3053\u3055\u308c\u3066\u4ffa\u306f\u8208\u596e\u3057\u305f\u3002\n\u306a\u3093\u3067\u3082\u3001D\u8a00\u8a9e\u306b\u65b0\u6a5f\u80fd\u306e\u8ffd\u52a0\u304c\u3042\u3063\u305f\u3089\u3057\u3044\u3002\n\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf\u30fc\u306e\u9023\u4e2d\u3068\u304d\u305f\u3089\u3001\u591c\u3082\u5bdd\u306a\u3044\u3067\u30b3\u30df\u30c3\u30c8\u3070\u304b\u308a\u3084\u3063\u3066\u308b\u304b\u3089\u3053\u3093\u306a\u4e8b\u306b\u306a\u308b\u3093\u3060\u3002\n\n\u25cb\u6708\u25bd\u65e5 \u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u524a\u9664\u3092\u6c7a\u610f\n\u6614\u304b\u3089\u3053\u306e\u3044\u307e\u3044\u307e\u3057\u3044\u5b87\u5b99\u670d\u3092\u3064\u3051\u305f\u307e\u307e\u306a\u3093\u3067\u3001\u80cc\u4e2d\u304c\u3080\u308c\u3061\u307e\u3063\u3066\u5999\u306b\u304b\u3086\u3044\u3002\n\u3044\u3089\u3044\u3089\u3059\u308b\u3093\u3067\u3001\u8179\u3044\u305b\u306b\u3042\u306e\"Hello, world!\"\u306e\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u629c\u304d\u306b\u3057\u3066\u3084\u3063\u305f\u3002\n\u3044\u3044\u6c17\u5473\u3060\u3002\n\n\u25cb\u6708\u25cb\u65e5 UFCS\u3068opDispatch\u306e\u7d44\u307f\u5408\u308f\u305b\n\u3042\u307e\u308a\u306b\u80cc\u4e2d\u304c\u304b\u3086\u3044\u3093\u3067\u533b\u52d9\u5ba4\u306b\u3044\u3063\u305f\u3089\u3001\u80cc\u4e2d\u306b\u3067\u3063\u3051\u3048opDispatch\u3092\u8cbc\u3089\u308c\u305f\u3002\n\u305d\u308c\u304b\u3089\u3001\u3082\u3046\u4ffa\u306f\u5b87\u5b99\u670d\u3092\u7740\u306a\u304f\u3066\u3044\u3044\u3068\u533b\u8005\u304c\u3044\u3063\u305f\u3002\n\u304a\u304b\u3052\u3067\u4eca\u591c\u306f\u3088\u304f\u7720\u308c\u305d\u3046\u3060\u305c\u3002\n\n\u25cb\u6708\u25ce\u65e5 \u30bb\u30df\u30b3\u30ed\u30f3\u3092\u4f7f\u3063\u305f\u3089\u8ca0\u3051\u304b\u3068\u601d\u3063\u3066\u3044\u308b\n\u671d\u8d77\u304d\u305f\u3089\u3001opDispatch\u3060\u3051\u3067\u306a\u304fRange\u306b\u3082UCFS\u304c\u3067\u304d\u3066\u3084\u304c\u3063\u305f\u3002\n\u5f15\u7528\u7b26\u306e\u4ee3\u308f\u308a\u306b\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u3084\u3051\u306b\u7169\u3044\u3093\u3067\u3001\u8db3\u5f15\u304d\u305a\u3063\u3066\u898b\u306b\u884c\u3063\u305f\u3089\u6570\u304c\u5897\u3048\u3066\u308b\u3002\n\u5f15\u7528\u7b26\u3092\u4e8c\u500b\u629c\u3044\u305f\u304f\u3089\u3044\u3067\u5897\u3048\u3084\u304c\u3063\u3066\u3002\n\u304a\u3048\u3089\u65b9\u306b\u898b\u3064\u304b\u3063\u305f\u3089\u5927\u5909\u3060\u3002\n\n\u25cb\u6708\u25c7\u65e5 \u7279\u5fb4\u306e\u3042\u308b\u90e8\u5206\u3092\u4f7f\u3063\u3066\u30ab\u30f3\u30de\u633f\u5165\u4f4d\u7f6e\u3092\u63a2\u3059\n\u6628\u65e5\u3001\u3053\u306e\u30ed\u30b8\u30c3\u30af\u304b\u3089\u9003\u3052\u51fa\u305d\u3046\u3068\u3057\u305f\u30ab\u30f3\u307e\u304c\u4e00\u3064\u3001\u5c04\u3055\u3064\u3055\u308c\u305f\u3001\u3066\u3000\u306f\u306a\u3057\u3060\u3002\n\u591c\u3001\u304b\u3089\u3060\u4e2d\u3000\u3042\u3064\u3044\u304b\u3086\u3044\u3002\n\u80f8\u306e\u306f\u308c\u7269\u3000\u304b\u304d\u3080\u3057\u305f\u3089\u3000\u8089\u304c\u304f\u3055\u308a\u843d\u3061\u3084\u304c\u305f\u3002\n\u3044\u3063\u305f\u3044\u304a\u308c\u3000\u3069\u3046\u306a\u3000\u3066\n\n\u25cb\u6708\u2661\u65e5 \u5909\u6570\u304c\u5fc5\u8981\u306a\u3089\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u3046\n\u3068\u304f\u3061\u3087\u3046\u3000\u307f\u3064\u3000\u3051\u305f\u3000\u3082\u3000\u3068\u3066\u3082\u304b\u3086\u3044\n\u5909\u6570\u3000\u3072\u3064\u3088\u3046\u306e\u3001\u3089\u3080\u3060\u3000\u306e\u3057\u304d\u3000\u3064\u304b\u3046\n\n\u25cb\u6708\u22bf\u65e5 \u6700\u5f8c\u306e\u30a8\u30af\u30b9\u30af\u30e9\u30e1\u30fc\u30b7\u30e7\u30f3\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u7de0\u3081\u304f\u304f\u308b\n\u304b\u3086\u3044\u3000\u304b\u3086\u3044\u3000\u30a8\u30af\u30b9\u30af\u30e9\u30e1\u30fc\u30b7\u30e7\u30f3\u30fc\u304d\u305f\n\u3072\u3069\u3044\u3066\u3093\u3077\u308c\u306a\u3093\u3066\u3000\u3053\u308d\u3057\n\u3046\u307e\u304b\u3063\u3000\u3067\u3059\u3002\n4\nD\u8a00\u8a9e\n\uff73\uff8f\uff70\n\n\u89e3\u8aac(\u65e5\u672c\u8a9eOFF\u3067\u304a\u5c4a\u3051\u3044\u305f\u3057\u307e\u3059)\nimport std.algorithm: equal;\nunittest\n{\n    // UCFS, equal\n    static assert(\"Hel\".equal(\"Hel\") == equal(\"Hel\", \"Hel\"));\n\n    // lambda syntax\n    static assert( (a => a+1)(1) == 2 );\n    static assert( (a => a+1)(1) == (delegate int(int a){return a+1;})(1) );\n    static assert( (a => a+1)(1) == ((int a){return a+1;})(1) );\n    static assert( (a => a+1)(1) == ((a){return a+1;})(1) );\n}\n\nimport std.algorithm;\nimport std.algorithm: countUntil;\nimport std.range: retro, cycle, take, array, chain;\nunittest\n{\n    // range compare\n    static assert( __traits(compiles, \"leH\" == \"leH\"));\n    static assert(!__traits(compiles, \"Hel\".retro() == \"leH\"));\n    static assert( __traits(compiles, \"Hel\".retro().equal(\"leH\")));\n    static assert(\"Hel\".retro().equal(\"leH\"));\n\n    // retro\n    static assert(\"Hel\".retro().equal(\"leH\"));\n\n    // take\n    static assert(\"HelHelHelHelHelHelHel\".take(7).equal(\"HelHelH\"));\n\n    // cycle + take\n    static assert(\"Hel\".cycle().take(7).equal(\"HelHelH\"));\n\n    // chain\n    static assert(\"Hel\".chain(\"l\").equal(\"Hel\" ~ \"l\"));\n\n    // countUntil\n    static assert(\"Hellowo\".countUntil(\"ow\") == \"Hell\".length);\n\n    // /*take + retro*/ take + array + retro\n    static assert(!__traits(compiles, \"Hel\".take(2).retro().equal(\"eH\")));\n    static assert(\"Hel\".take(2).array().retro().equal(\"eH\"));\n}\n\nimport std.array: insertInPlace;\nunittest\n{\n    /* insertInPlace ... (\u00b4\u30fb\u03c9\u30fb\uff40) */\n    string msg = \"owo\";\n    msg.insertInPlace(1, \", \");\n    assert(msg == \"o, wo\");\n}\n\nimport std.array;\nunittest\n{\n    /* lambda + insertInPlace ... (\uff40\u30fb\u03c9\u30fb\u00b4) */\n    static assert((a=>(a.insertInPlace(1, \", \"), a))(\"owo\".dup) == \"o, wo\");\n}\n\nimport std.conv: text, toLower;\nunittest\n{\n    // text\n    static assert(text(\"a\", 1) == \"a1\");\n\n    // toLower\n    static assert(\"AbCdE\".toLower() == \"abcde\");\n}\n\nunittest\n{\n    struct H\n    {\n        // \u578b\u540d H \u306b . \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\n        static string opDispatch(string s)() @property\n        {\n            return typeof(this).stringof~s;\n        }\n    }\n    static assert(H.e == \"He\");\n}\n\nunittest\n{\n    struct D {string msg;}\n    struct H\n    {\n        // \u578b\u540d H \u306b . \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\u3057\u305f\u306e\u3092 D \u578b\u306b\u3059\u308b\n        static D opDispatch(string s)() @property\n        {\n            return D(typeof(this).stringof~s);\n        }\n    }\n    static assert(H.e == D(\"He\"));\n}\n\nunittest\n{\n    struct D\n    {\n        string msg;\n        // . \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\n        D opDispatch(string s)() @property\n        {\n            return typeof(return)(text(msg, s));\n        }\n    }\n    struct H\n    {\n        static D opDispatch(string s)() @property { return D(typeof(this).stringof~s); }\n    }\n    static assert(H.e.l == D(\"He\").l);\n    static assert(D(\"He\").l == D(\"Hel\"));\n    static assert(H.e.l.l.o.w.o.r.l.d == D(\"Helloworld\"));\n}\n\nimport std.algorithm, std.range;\nunittest\n{\n    /+\n    (a, b)=>a.equal(b))(\n            msg.retro().cycle().take(2),\n            msg.chain(s).retro().take(2).array().retro())\n    +/\n    // msg\u306e\u6700\u5f8c2\u6587\u5b57\u306e\u9006\u9806\u3092\u5f97\u308b\n    auto left(string msg, string s)\n    {\n        return msg.retro().cycle().take(2);\n    }\n    static assert(equal(left(\"He\",\"l\"),        \"eH\"));\n    static assert(equal(left(\"Hel\",\"l\"),       \"le\"));\n    static assert(equal(left(\"Hell\",\"o\"),      \"ll\"));\n    static assert(equal(left(\"Hello\",\"w\"),     \"ol\"));\n    static assert(equal(left(\"Hellow\",\"o\"),    \"wo\"));\n    static assert(equal(left(\"Hellowo\",\"r\"),   \"ow\"));\n    static assert(equal(left(\"Hellowor\",\"l\"),  \"ro\"));\n    static assert(equal(left(\"Helloworl\",\"d\"), \"lr\"));\n\n    // msg\u3068s\u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u306e\u6700\u5f8c2\u6587\u5b57\u3092\u5f97\u308b\n    auto right(string msg, string s)\n    {\n        return msg.chain(s).retro().take(2).array().retro();\n    }\n    static assert(equal(right(\"He\",\"l\"),        \"el\"));\n    static assert(equal(right(\"Hel\",\"l\"),       \"ll\"));\n    static assert(equal(right(\"Hell\",\"o\"),      \"lo\"));\n    static assert(equal(right(\"Hello\",\"w\"),     \"ow\"));\n    static assert(equal(right(\"Hellow\",\"o\"),    \"wo\"));\n    static assert(equal(right(\"Hellowo\",\"r\"),   \"or\"));\n    static assert(equal(right(\"Hellowor\",\"l\"),  \"rl\"));\n    static assert(equal(right(\"Helloworl\",\"d\"), \"ld\"));\n\n    // \u8981\u3059\u308b\u306b msg\u3068s\u3092\u9023\u7d50\u3057\u305f\u6700\u5f8c\u306e3\u6587\u5b57\u304c\u56de\u6587\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\n    bool test(string msg, string s)\n    {\n        return equal(left(msg,s), right(msg,s));\n    }\n    static assert(!test(\"He\",\"l\"));\n    static assert(!test(\"Hel\",\"l\"));\n    static assert(!test(\"Hell\",\"o\"));\n    static assert(!test(\"Hello\",\"w\"));\n    static assert( test(\"Hellow\",\"o\")); // <<=========\n    static assert(!test(\"Hellowo\",\"r\"));\n    static assert(!test(\"Hellowor\",\"l\"));\n    static assert(!test(\"Helloworl\",\"d\"));\n}\n\nimport std.array, std.algorithm, std.range;\nunittest\n{\n    /+\n    ((a, b)=>(\n      a.insertInPlace(msg.countUntil(b)+1, \", \"), a.idup)\n    )(msg.dup, msg.retro().take(2).array().retro())~s\n    +/\n\n    // msg\u306e\u30b3\u30d4\u30fc(\u7de8\u96c6\u53ef\u80fd)\u3092\u8fd4\u3059\n    auto left(string msg, string s)\n    {\n        return msg.dup;\n    }\n    static assert(left(\"Hellow\", \"o\") == \"Hellow\");\n\n    // msg\u306e\u6700\u5f8c2\u3064\u3092\u5f97\u308b\n    auto right(string msg, string s)\n    {\n        return msg.retro().take(2).array().retro();\n    }\n    static assert(right(\"Hellow\", \"o\").equal(\"ow\"));\n\n    // a\u306e\u4e2d\u304b\u3089b\u3092\u898b\u3064\u3051\u3066\u305d\u306e\u7b87\u6240\u306b\", \"\u3092\u633f\u5165\n    string test(R)(char[] a, R b)\n    {\n        a.insertInPlace(a.countUntil(b)+1, \", \");\n        return a.idup;\n    }\n    static assert(test(left(\"Hellow\", \"o\"), right(\"Hellow\", \"o\")) == \"Hello, w\");\n}\n\nimport std.string, std.range, std.algorithm, std.conv, std.array;\nunittest\n{\n    struct D\n    {\n        string msg;\n        // \u307e\u3068\u3081\u308b\u3068\n        D opDispatch(string s)() @property\n        {\n            return typeof(return)(\n                ((a, b)=>a.equal(b))(\n                    msg.retro().cycle().take(2),\n                    msg.chain(s).retro().take(2).array().retro())\n                    ? ((a, b)=>(\n                        a.insertInPlace(msg.countUntil(b)+1, \", \"), a.idup)\n                      )(msg.dup, msg.retro().take(2).array().retro())~s\n                    : text(msg,s));\n        }\n    }\n    struct H\n    {\n        static D opDispatch(string s)() @property { return D(typeof(this).stringof~s); }\n    }\n\n    static assert(H.e.l.l.o. w.o.r.l.d == D(\"Hello, world\"));\n}\n\nimport std.string, std.range, std.algorithm, std.conv, std.array;\nunittest\n{\n    struct D\n    {\n        string msg;\n        // \u6700\u5f8c\u306ed\u3060\u3051\u95a2\u6570\u3092\u5225\u9014\u7528\u610f\u3057\u3066 \"d! D\" \u3092\u9023\u7d50\u3055\u305b\u308b\n        string d(T)() @property\n        {\n            return text(msg, T.stringof.toLower(), \"! \", T.stringof);\n        }\n    }\n\n    static assert(D(\"Hello, worl\").d!D == \"Hello, world! D\");\n}\n\n\n\u307e\u3068\u3081\n\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\nimport std.string, std.range, std.algorithm, std.conv, std.array;\n\nstruct D\n{\n    string msg;\n    D opDispatch(string s)() @property\n    {\n        return typeof(return)(\n            ((a, b)=>a.equal(b))(\n                msg.retro().cycle().take(2),\n                msg.chain(s).retro().take(2).array().retro())\n                ? ((a, b)=>(\n                    a.insertInPlace(msg.countUntil(b)+1, \", \"), a.idup)\n                  )(msg.dup, msg.retro().take(2).array().retro())~s\n                : text(msg,s));\n    }\n    string d(T)() @property\n    {\n        return text(msg, T.stringof.toLower(), \"! \", T.stringof);\n    }\n}\nstruct H\n{\n    static D opDispatch(string s)() @property { return D(typeof(this).stringof~s); }\n}\n\npragma(msg, H.e.l.l.o. w.o.r.l.d! D);\n\nvoid main() {}\n\n\u3064\u307e\u308a\n\u3053\u3053\u307e\u3067\u66f8\u3044\u305f\u51e6\u7406\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000\u5168\u90e8\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8a55\u4fa1\u53ef\u80fd\uff01\uff01\uff01\uff01\u3000\uff1c\n\uffe3^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^\uffe3\n\u304a\u5f8c\u304c\u3088\u308d\u3057\u3044\u3088\u3046\u3067\n\u304a\u6b21\u306f4\u65e5\u76ee @__DaLong \u3067\u3059\u3002\n\u672c\u65e5\u306f\u79c1\u3001SHOO\u304c[\u67d0\u6240\u306b\u8d77\u7a3f](http://ja.uncyclopedia.info/wiki/D%E8%A8%80%E8%AA%9E#.E3.83.97.E3.83.AD.E3.82.B0.E3.83.A9.E3.83.A0.E3.82.BD.E3.83.BC.E3.82.B9.E3.81.AE.E4.BE.8B)\u3057\u305f `H.e.l.l.o. w.o.r.l.d! D` \u306b\u3064\u3044\u3066\u89e3\u8aac\u3044\u305f\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3054\u89a7\u306b\u5165\u308c\u307e\u3057\u3087\u3046\n\n```d\nimport std.string, std.range, std.algorithm, std.conv, std.array;\n\nstruct D\n{\n    string msg;\n    D opDispatch(string s)() @property\n    {\n        return typeof(return)(\n            ((a, b)=>a.equal(b))(\n                msg.retro().cycle().take(2),\n                msg.chain(s).retro().take(2).array().retro())\n                ? ((a, b)=>(\n                    a.insertInPlace(msg.countUntil(b)+1, \", \"), a.idup)\n                  )(msg.dup, msg.retro().take(2).array().retro())~s\n                : text(msg,s));\n    }\n    string d(T)() @property\n    {\n        return text(msg, T.stringof.toLower(), \"! \", T.stringof);\n    }\n}\nstruct H\n{\n    static D opDispatch(string s)() @property { return D(typeof(this).stringof~s); }\n}\n\npragma(msg, H.e.l.l.o. w.o.r.l.d! D);\n\nvoid main() {}\n```\n\n\n# \"Hello, world!\"\u306f\u3082\u3046\u53e4\u3044\n\n\u904e\u53bb\u306e\"Hello, world!\"\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\n\n```c\n#include <stdio.h>\nint main(int argc, const char *argv[])\n{\n\tprintf(\"Hello, world! C\\n\");\n\treturn 0;\n}\n```\n\n\u8868\u793a\u306e\u305f\u3081\u306b\u5b9f\u884c\u304c\u5fc5\u8981\n\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000\u30c0\u30b5\u3044\uff01\u3000\uff1c\n\uffe3^Y^Y^Y^Y^\uffe3\n\nD\u8a00\u8a9e\u306a\u3089 `pragma(msg, ...)` \u3084CTFE\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f7f\u3046\u3053\u3068\u3067\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u4efb\u610f\u306e\u51e6\u7406\u3092\u884c\u3063\u305f\u7d50\u679c\u306e\u8868\u793a\u304c\u53ef\u80fd\n\n```d\npragma(msg, H.e.l.l.o. w.o.r.l.d! D);\n```\n\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000\u3053\u3093\u306a\u306b\u3082\u30b9\u30bf\u30a4\u30ea\u30c3\u30b7\u30e5\u3000\uff1c\n\uffe3^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^\uffe3\n\n# \u7d4c\u7def\n## \u25cb\u6708\u00d7\u65e5 D\u8a00\u8a9e\u304c Dark Language \u3060\u306a\u3093\u3060\u3068dis\u3089\u308c\u308b\n\n\u591c\u3001\u4ed5\u4e8b\u304b\u3089\u5e30\u3063\u3066\u3001\u304a\u3082\u3080\u308d\u306bTwitter\u3092\u3084\u3063\u305f\u3002\n\u3053\u3044\u3064\u3089\u3001Dark Language\u3060\u306a\u3093\u3060\u3068\u304d\u3063\u3068\u30c7\u30de\u30ab\u30bb\u306b\u3061\u304c\u3044\u306d\u30a7\u3002\n\u4ffa\u305f\u3061\u3092\u3070\u304b\u306b\u3057\u3084\u304c\u3063\u3066\u3002\n\n## \u25cb\u6708\u25b3\u65e5 \u30a2\u30f3\u30b5\u30a4\u30af\u30ed\u30da\u30c7\u30a3\u30a2\u306e\"Hello, world!\"\u304c\u58ca\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u3065\u304f\n\n\u4eca\u65e5\u3001\u30a2\u30f3\u30b5\u30a4\u30af\u30ed\u30da\u30c7\u30a3\u30a2\u306e\u8a18\u4e8b\u304b\u3089\u6614\u306e\"Hello, world!\"\u306e\u4e16\u8a71\u3092\u983c\u307e\u308c\u305f\u3002\n\u76ae\u3092\u3072\u3093\u3080\u3044\u305fJava\u306e\u3088\u3046\u306a\u5974\u3060\u3002\n\u30b3\u30fc\u30c9\u304c\u901a\u3089\u306a\u3044\u3063\u3066\u3093\u3067\u3001dmd\u306b\u6295\u3052\u3053\u3093\u3060\u3089\u3001\u5974\u3089\u3001writeln\u306eproperty\u6587\u304c\u901a\u3089\u306a\u304b\u3063\u305f\u308aDeprecation\u3092\u5f15\u304d\u51fa\u3057\u305f\u308a\n\u559a\u3044\u305f\u3042\u3052\u304f\u3084\u3063\u3068\u6b7b\u306b\u3084\u304c\u308b\u3002\n\n## \u25b3\u6708\u25a1\u65e5 UFCS\u306e\u767b\u5834\n\n\u4eca\u671d\uff15\u6642\u9803\u3001\u5b87\u5b99\u670d\u307f\u3066\u3048\u306a\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7740\u305f\"Hello, world!\"\u306b\u7a81\u7136\u305f\u305f\u304d\u8d77\u3053\u3055\u308c\u3066\u4ffa\u306f\u8208\u596e\u3057\u305f\u3002\n\u306a\u3093\u3067\u3082\u3001D\u8a00\u8a9e\u306b\u65b0\u6a5f\u80fd\u306e\u8ffd\u52a0\u304c\u3042\u3063\u305f\u3089\u3057\u3044\u3002\n\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf\u30fc\u306e\u9023\u4e2d\u3068\u304d\u305f\u3089\u3001\u591c\u3082\u5bdd\u306a\u3044\u3067\u30b3\u30df\u30c3\u30c8\u3070\u304b\u308a\u3084\u3063\u3066\u308b\u304b\u3089\u3053\u3093\u306a\u4e8b\u306b\u306a\u308b\u3093\u3060\u3002\n\n## \u25cb\u6708\u25bd\u65e5 \u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u524a\u9664\u3092\u6c7a\u610f\n\n\u6614\u304b\u3089\u3053\u306e\u3044\u307e\u3044\u307e\u3057\u3044\u5b87\u5b99\u670d\u3092\u3064\u3051\u305f\u307e\u307e\u306a\u3093\u3067\u3001\u80cc\u4e2d\u304c\u3080\u308c\u3061\u307e\u3063\u3066\u5999\u306b\u304b\u3086\u3044\u3002\n\u3044\u3089\u3044\u3089\u3059\u308b\u3093\u3067\u3001\u8179\u3044\u305b\u306b\u3042\u306e\"Hello, world!\"\u306e\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u629c\u304d\u306b\u3057\u3066\u3084\u3063\u305f\u3002\n\u3044\u3044\u6c17\u5473\u3060\u3002\n\n## \u25cb\u6708\u25cb\u65e5 UFCS\u3068opDispatch\u306e\u7d44\u307f\u5408\u308f\u305b\n\n\u3042\u307e\u308a\u306b\u80cc\u4e2d\u304c\u304b\u3086\u3044\u3093\u3067\u533b\u52d9\u5ba4\u306b\u3044\u3063\u305f\u3089\u3001\u80cc\u4e2d\u306b\u3067\u3063\u3051\u3048opDispatch\u3092\u8cbc\u3089\u308c\u305f\u3002\n\u305d\u308c\u304b\u3089\u3001\u3082\u3046\u4ffa\u306f\u5b87\u5b99\u670d\u3092\u7740\u306a\u304f\u3066\u3044\u3044\u3068\u533b\u8005\u304c\u3044\u3063\u305f\u3002\n\u304a\u304b\u3052\u3067\u4eca\u591c\u306f\u3088\u304f\u7720\u308c\u305d\u3046\u3060\u305c\u3002\n\n## \u25cb\u6708\u25ce\u65e5 \u30bb\u30df\u30b3\u30ed\u30f3\u3092\u4f7f\u3063\u305f\u3089\u8ca0\u3051\u304b\u3068\u601d\u3063\u3066\u3044\u308b\n\n\u671d\u8d77\u304d\u305f\u3089\u3001opDispatch\u3060\u3051\u3067\u306a\u304fRange\u306b\u3082UCFS\u304c\u3067\u304d\u3066\u3084\u304c\u3063\u305f\u3002\n\u5f15\u7528\u7b26\u306e\u4ee3\u308f\u308a\u306b\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u3084\u3051\u306b\u7169\u3044\u3093\u3067\u3001\u8db3\u5f15\u304d\u305a\u3063\u3066\u898b\u306b\u884c\u3063\u305f\u3089\u6570\u304c\u5897\u3048\u3066\u308b\u3002\n\u5f15\u7528\u7b26\u3092\u4e8c\u500b\u629c\u3044\u305f\u304f\u3089\u3044\u3067\u5897\u3048\u3084\u304c\u3063\u3066\u3002\n\u304a\u3048\u3089\u65b9\u306b\u898b\u3064\u304b\u3063\u305f\u3089\u5927\u5909\u3060\u3002\n\n## \u25cb\u6708\u25c7\u65e5 \u7279\u5fb4\u306e\u3042\u308b\u90e8\u5206\u3092\u4f7f\u3063\u3066\u30ab\u30f3\u30de\u633f\u5165\u4f4d\u7f6e\u3092\u63a2\u3059\n\n\u6628\u65e5\u3001\u3053\u306e\u30ed\u30b8\u30c3\u30af\u304b\u3089\u9003\u3052\u51fa\u305d\u3046\u3068\u3057\u305f\u30ab\u30f3\u307e\u304c\u4e00\u3064\u3001\u5c04\u3055\u3064\u3055\u308c\u305f\u3001\u3066\u3000\u306f\u306a\u3057\u3060\u3002\n\u591c\u3001\u304b\u3089\u3060\u4e2d\u3000\u3042\u3064\u3044\u304b\u3086\u3044\u3002\n\u80f8\u306e\u306f\u308c\u7269\u3000\u304b\u304d\u3080\u3057\u305f\u3089\u3000\u8089\u304c\u304f\u3055\u308a\u843d\u3061\u3084\u304c\u305f\u3002\n\u3044\u3063\u305f\u3044\u304a\u308c\u3000\u3069\u3046\u306a\u3000\u3066\n\n## \u25cb\u6708\u2661\u65e5 \u5909\u6570\u304c\u5fc5\u8981\u306a\u3089\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u3046\n\n\u3068\u304f\u3061\u3087\u3046\u3000\u307f\u3064\u3000\u3051\u305f\u3000\u3082\u3000\u3068\u3066\u3082\u304b\u3086\u3044\n\u5909\u6570\u3000\u3072\u3064\u3088\u3046\u306e\u3001\u3089\u3080\u3060\u3000\u306e\u3057\u304d\u3000\u3064\u304b\u3046\n\n## \u25cb\u6708\u22bf\u65e5 \u6700\u5f8c\u306e\u30a8\u30af\u30b9\u30af\u30e9\u30e1\u30fc\u30b7\u30e7\u30f3\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u7de0\u3081\u304f\u304f\u308b\n\n\u304b\u3086\u3044\u3000\u304b\u3086\u3044\u3000\u30a8\u30af\u30b9\u30af\u30e9\u30e1\u30fc\u30b7\u30e7\u30f3\u30fc\u304d\u305f\n\u3072\u3069\u3044\u3066\u3093\u3077\u308c\u306a\u3093\u3066\u3000\u3053\u308d\u3057\n\u3046\u307e\u304b\u3063\u3000\u3067\u3059\u3002\n4\n\nD\u8a00\u8a9e\n\uff73\uff8f\uff70\n\n\n# \u89e3\u8aac(\u65e5\u672c\u8a9eOFF\u3067\u304a\u5c4a\u3051\u3044\u305f\u3057\u307e\u3059)\n\n```d\nimport std.algorithm: equal;\nunittest\n{\n\t// UCFS, equal\n\tstatic assert(\"Hel\".equal(\"Hel\") == equal(\"Hel\", \"Hel\"));\n\t\n\t// lambda syntax\n\tstatic assert( (a => a+1)(1) == 2 );\n\tstatic assert( (a => a+1)(1) == (delegate int(int a){return a+1;})(1) );\n\tstatic assert( (a => a+1)(1) == ((int a){return a+1;})(1) );\n\tstatic assert( (a => a+1)(1) == ((a){return a+1;})(1) );\n}\n```\n\n```d\nimport std.algorithm;\nimport std.algorithm: countUntil;\nimport std.range: retro, cycle, take, array, chain;\nunittest\n{\n\t// range compare\n\tstatic assert( __traits(compiles, \"leH\" == \"leH\"));\n\tstatic assert(!__traits(compiles, \"Hel\".retro() == \"leH\"));\n\tstatic assert( __traits(compiles, \"Hel\".retro().equal(\"leH\")));\n\tstatic assert(\"Hel\".retro().equal(\"leH\"));\n\t\n\t// retro\n\tstatic assert(\"Hel\".retro().equal(\"leH\"));\n\t\n\t// take\n\tstatic assert(\"HelHelHelHelHelHelHel\".take(7).equal(\"HelHelH\"));\n\t\n\t// cycle + take\n\tstatic assert(\"Hel\".cycle().take(7).equal(\"HelHelH\"));\n\t\n\t// chain\n\tstatic assert(\"Hel\".chain(\"l\").equal(\"Hel\" ~ \"l\"));\n\t\t\n\t// countUntil\n\tstatic assert(\"Hellowo\".countUntil(\"ow\") == \"Hell\".length);\n\t\n\t// /*take + retro*/ take + array + retro\n\tstatic assert(!__traits(compiles, \"Hel\".take(2).retro().equal(\"eH\")));\n\tstatic assert(\"Hel\".take(2).array().retro().equal(\"eH\"));\n}\n```\n\n```d\nimport std.array: insertInPlace;\nunittest\n{\n\t/* insertInPlace ... (\u00b4\u30fb\u03c9\u30fb\uff40) */\n\tstring msg = \"owo\";\n\tmsg.insertInPlace(1, \", \");\n\tassert(msg == \"o, wo\");\n}\n```\n\n```d\nimport std.array;\nunittest\n{\n\t/* lambda + insertInPlace ... (\uff40\u30fb\u03c9\u30fb\u00b4) */\n\tstatic assert((a=>(a.insertInPlace(1, \", \"), a))(\"owo\".dup) == \"o, wo\");\n}\n```\n\n```d\nimport std.conv: text, toLower;\nunittest\n{\n\t// text\n\tstatic assert(text(\"a\", 1) == \"a1\");\n\t\n\t// toLower\n\tstatic assert(\"AbCdE\".toLower() == \"abcde\");\n}\n```\n\n```d\nunittest\n{\n\tstruct H\n\t{\n\t\t// \u578b\u540d H \u306b . \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\n\t\tstatic string opDispatch(string s)() @property\n\t\t{\n\t\t\treturn typeof(this).stringof~s;\n\t\t}\n\t}\n\tstatic assert(H.e == \"He\");\n}\n```\n\n```d\nunittest\n{\n\tstruct D {string msg;}\n\tstruct H\n\t{\n\t\t// \u578b\u540d H \u306b . \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\u3057\u305f\u306e\u3092 D \u578b\u306b\u3059\u308b\n\t\tstatic D opDispatch(string s)() @property\n\t\t{\n\t\t\treturn D(typeof(this).stringof~s);\n\t\t}\n\t}\n\tstatic assert(H.e == D(\"He\"));\n}\n```\n\n```d\nunittest\n{\n\tstruct D\n\t{\n\t\tstring msg;\n\t\t// . \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\n\t\tD opDispatch(string s)() @property\n\t\t{\n\t\t\treturn typeof(return)(text(msg, s));\n\t\t}\n\t}\n\tstruct H\n\t{\n\t\tstatic D opDispatch(string s)() @property { return D(typeof(this).stringof~s); }\n\t}\n\tstatic assert(H.e.l == D(\"He\").l);\n\tstatic assert(D(\"He\").l == D(\"Hel\"));\n\tstatic assert(H.e.l.l.o.w.o.r.l.d == D(\"Helloworld\"));\n}\n```\n\n```d\nimport std.algorithm, std.range;\nunittest\n{\n\t/+\n\t(a, b)=>a.equal(b))(\n\t        msg.retro().cycle().take(2),\n\t        msg.chain(s).retro().take(2).array().retro())\n\t+/\n\t// msg\u306e\u6700\u5f8c2\u6587\u5b57\u306e\u9006\u9806\u3092\u5f97\u308b\n\tauto left(string msg, string s)\n\t{\n\t\treturn msg.retro().cycle().take(2);\n\t}\n\tstatic assert(equal(left(\"He\",\"l\"),        \"eH\"));\n\tstatic assert(equal(left(\"Hel\",\"l\"),       \"le\"));\n\tstatic assert(equal(left(\"Hell\",\"o\"),      \"ll\"));\n\tstatic assert(equal(left(\"Hello\",\"w\"),     \"ol\"));\n\tstatic assert(equal(left(\"Hellow\",\"o\"),    \"wo\"));\n\tstatic assert(equal(left(\"Hellowo\",\"r\"),   \"ow\"));\n\tstatic assert(equal(left(\"Hellowor\",\"l\"),  \"ro\"));\n\tstatic assert(equal(left(\"Helloworl\",\"d\"), \"lr\"));\n\t\n\t// msg\u3068s\u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u306e\u6700\u5f8c2\u6587\u5b57\u3092\u5f97\u308b\n\tauto right(string msg, string s)\n\t{\n\t\treturn msg.chain(s).retro().take(2).array().retro();\n\t}\n\tstatic assert(equal(right(\"He\",\"l\"),        \"el\"));\n\tstatic assert(equal(right(\"Hel\",\"l\"),       \"ll\"));\n\tstatic assert(equal(right(\"Hell\",\"o\"),      \"lo\"));\n\tstatic assert(equal(right(\"Hello\",\"w\"),     \"ow\"));\n\tstatic assert(equal(right(\"Hellow\",\"o\"),    \"wo\"));\n\tstatic assert(equal(right(\"Hellowo\",\"r\"),   \"or\"));\n\tstatic assert(equal(right(\"Hellowor\",\"l\"),  \"rl\"));\n\tstatic assert(equal(right(\"Helloworl\",\"d\"), \"ld\"));\n\t\n\t// \u8981\u3059\u308b\u306b msg\u3068s\u3092\u9023\u7d50\u3057\u305f\u6700\u5f8c\u306e3\u6587\u5b57\u304c\u56de\u6587\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\n\tbool test(string msg, string s)\n\t{\n\t\treturn equal(left(msg,s), right(msg,s));\n\t}\n\tstatic assert(!test(\"He\",\"l\"));\n\tstatic assert(!test(\"Hel\",\"l\"));\n\tstatic assert(!test(\"Hell\",\"o\"));\n\tstatic assert(!test(\"Hello\",\"w\"));\n\tstatic assert( test(\"Hellow\",\"o\")); // <<=========\n\tstatic assert(!test(\"Hellowo\",\"r\"));\n\tstatic assert(!test(\"Hellowor\",\"l\"));\n\tstatic assert(!test(\"Helloworl\",\"d\"));\n}\n```\n\n```d\nimport std.array, std.algorithm, std.range;\nunittest\n{\n\t/+\n\t((a, b)=>(\n\t  a.insertInPlace(msg.countUntil(b)+1, \", \"), a.idup)\n\t)(msg.dup, msg.retro().take(2).array().retro())~s\n\t+/\n\t\n\t// msg\u306e\u30b3\u30d4\u30fc(\u7de8\u96c6\u53ef\u80fd)\u3092\u8fd4\u3059\n\tauto left(string msg, string s)\n\t{\n\t\treturn msg.dup;\n\t}\n\tstatic assert(left(\"Hellow\", \"o\") == \"Hellow\");\n\t\n\t// msg\u306e\u6700\u5f8c2\u3064\u3092\u5f97\u308b\n\tauto right(string msg, string s)\n\t{\n\t\treturn msg.retro().take(2).array().retro();\n\t}\n\tstatic assert(right(\"Hellow\", \"o\").equal(\"ow\"));\n\t\n\t// a\u306e\u4e2d\u304b\u3089b\u3092\u898b\u3064\u3051\u3066\u305d\u306e\u7b87\u6240\u306b\", \"\u3092\u633f\u5165\n\tstring test(R)(char[] a, R b)\n\t{\n\t\ta.insertInPlace(a.countUntil(b)+1, \", \");\n\t\treturn a.idup;\n\t}\n\tstatic assert(test(left(\"Hellow\", \"o\"), right(\"Hellow\", \"o\")) == \"Hello, w\");\n}\n```\n\n```d\nimport std.string, std.range, std.algorithm, std.conv, std.array;\nunittest\n{\n\tstruct D\n\t{\n\t\tstring msg;\n\t\t// \u307e\u3068\u3081\u308b\u3068\n\t\tD opDispatch(string s)() @property\n\t\t{\n\t\t\treturn typeof(return)(\n\t\t\t    ((a, b)=>a.equal(b))(\n\t\t\t        msg.retro().cycle().take(2),\n\t\t\t        msg.chain(s).retro().take(2).array().retro())\n\t\t\t        ? ((a, b)=>(\n\t\t\t            a.insertInPlace(msg.countUntil(b)+1, \", \"), a.idup)\n\t\t\t          )(msg.dup, msg.retro().take(2).array().retro())~s\n\t\t\t        : text(msg,s));\n\t\t}\n\t}\n\tstruct H\n\t{\n\t\tstatic D opDispatch(string s)() @property { return D(typeof(this).stringof~s); }\n\t}\n\t\n\tstatic assert(H.e.l.l.o. w.o.r.l.d == D(\"Hello, world\"));\n}\n```\n\n```d\nimport std.string, std.range, std.algorithm, std.conv, std.array;\nunittest\n{\n\tstruct D\n\t{\n\t\tstring msg;\n\t\t// \u6700\u5f8c\u306ed\u3060\u3051\u95a2\u6570\u3092\u5225\u9014\u7528\u610f\u3057\u3066 \"d! D\" \u3092\u9023\u7d50\u3055\u305b\u308b\n\t\tstring d(T)() @property\n\t\t{\n\t\t\treturn text(msg, T.stringof.toLower(), \"! \", T.stringof);\n\t\t}\n\t}\n\t\n\tstatic assert(D(\"Hello, worl\").d!D == \"Hello, world! D\");\n}\n```\n\n# \u307e\u3068\u3081\n\n\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\n\n```d\nimport std.string, std.range, std.algorithm, std.conv, std.array;\n\nstruct D\n{\n    string msg;\n    D opDispatch(string s)() @property\n    {\n        return typeof(return)(\n            ((a, b)=>a.equal(b))(\n                msg.retro().cycle().take(2),\n                msg.chain(s).retro().take(2).array().retro())\n                ? ((a, b)=>(\n                    a.insertInPlace(msg.countUntil(b)+1, \", \"), a.idup)\n                  )(msg.dup, msg.retro().take(2).array().retro())~s\n                : text(msg,s));\n    }\n    string d(T)() @property\n    {\n        return text(msg, T.stringof.toLower(), \"! \", T.stringof);\n    }\n}\nstruct H\n{\n    static D opDispatch(string s)() @property { return D(typeof(this).stringof~s); }\n}\n\npragma(msg, H.e.l.l.o. w.o.r.l.d! D);\n\nvoid main() {}\n```\n\n\u3064\u307e\u308a\n\n\u3053\u3053\u307e\u3067\u66f8\u3044\u305f\u51e6\u7406\n\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000\u5168\u90e8\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8a55\u4fa1\u53ef\u80fd\uff01\uff01\uff01\uff01\u3000\uff1c\n\uffe3^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^\uffe3\n\n\u304a\u5f8c\u304c\u3088\u308d\u3057\u3044\u3088\u3046\u3067\n\n\n\u304a\u6b21\u306f4\u65e5\u76ee [@__DaLong](http://qiita.com/users/__DaLong) \u3067\u3059\u3002", "tags": ["dlang", "Dlanguage"]}