{"context": "\n\n\u6982\u8981\nMQTT\u3092\u304a\u8a66\u3057\u3059\u308b\u305f\u3081\u306bAndroid\u304b\u3089AWS IoT\u3084SORACOM beam\u306b\u63a5\u7d9a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nAWS IoT\u3068\u306e\u63a5\u7d9a\u306fMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306ePaho\u3092\u4f7f\u304a\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001AWS SDK for Android\u306ejavadoc\u3092\u8aad\u3093\u3067\u307f\u308b\u3068AWS IoT\u95a2\u9023\u306e\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u306e\u3067\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u203b\u3053\u3053\u3067\u306f\u30d6\u30ed\u30fc\u30ab\u30fc\u5074\u306e\u8a2d\u5b9a\u306b\u3064\u3044\u3066\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u5b9f\u88c5\u306b\u7d5e\u3063\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u6e96\u5099\n\u307e\u305a\u306f\u4f9d\u5b58\u95a2\u4fc2\u306bAWS SDK\u3092\u8ffd\u52a0\u3002\ndependencies {\n    compile 'com.amazonaws:aws-android-sdk-core:2.+'\n    compile 'com.amazonaws:aws-android-sdk-iot:2.+'\n} \n\n\u30d3\u30eb\u30c9\u3059\u308b\u3068\u3001Paho\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u8ffd\u52a0\u3055\u308c\u308b\u306e\u3067\u3001AWS SDK\u306eMQTT\u95a2\u9023\u306e\u5b9f\u88c5\u306fPaho\u306e\u30e9\u30c3\u30d1\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\nService\u3078\u306eAWS IoT\u306e\u5b9f\u88c5\nAndroid\u306e\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306bAWS IoT\u3068\u306e\u901a\u4fe1\u3092\u304a\u3053\u306a\u3046\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n\u63a5\u7d9a\u958b\u59cb\nAWS Console\u3067AWS IoT\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u304a\u3053\u306a\u3046\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3001\u8a3c\u660e\u66f8\u3068\u79d8\u5bc6\u9375\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\uff08\u53c2\u8003: AWS IoT\u3068Ruby\u88fdMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067Pub/Sub\u3057\u3066\u307f\u305f\uff09\n\u751f\u6210\u3055\u308c\u305f\u60c5\u5831\u3092\u4f7f\u3063\u3066\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\n\u63a5\u7d9a\u306b\u306f\u30ad\u30fc\u30b9\u30c8\u30a2\u304c\u5fc5\u8981\u3068\u306a\u308b\u305f\u3081\u3001\u30a2\u30bb\u30c3\u30c8\u306b\u683c\u7d0d\u3057\u3066\u304a\u3044\u305f\u8a3c\u660e\u66f8\u3068\u79d8\u5bc6\u9375\u3092\u8aad\u307f\u51fa\u3057\u30ad\u30fc\u30b9\u30c8\u30a2\u306b\u683c\u7d0d\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002 (\u8a3c\u660e\u66f8\u3068\u79d8\u5bc6\u9375\u306e\u6271\u3044\u306f\u672c\u756a\u904b\u7528\u3067\u306f\u3061\u3083\u3093\u3068\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3067\u3059\u3002) \nACCOUNT_ENDPOINT_PREFIX\u306f\u3001XXXXXXXXXXX.iot.REGION.amazonaws.com\u306e\u5148\u982d (XXXXXXXXXXX) \u306e\u90e8\u5206\u3067\u3059\u3002\nCLIENT_ID\u3001CERT_ID\u3001KEY_STORE_NAME\u3001KEY_STORE_PASSWORD\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3059\u3002\npublic class MqttService extends Service {\n    private AWSIotMqttManager mqttManager;\n    private static final String CLIENT_ID = \"xxxxx\";\n    private static final String ACCOUNT_ENDPOINT_PREFIX = \"xxxxx\";\n    private static final String CERT_ID = \"xxxxx\";\n    private static final String KEY_STORE_NAME = \"xxxxx.jks\";\n    private static final String KEY_STORE_PASSWORD = \"xxxxx\";\n    private static final String CERT_FILE = \"xxxxx-certificate.pem.crt\";\n    private static final String PRIVATE_KEY_FILE = \"xxxxx-private.pem.key\";\n    private String keyStorePath;\n    private KeyStore keyStore;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        mqttManager = new AWSIotMqttManager(CLIENT_ID, Region.getRegion(Regions.AP_NORTHEAST_1), ACCOUNT_ENDPOINT_PREFIX);\n        keyStorePath = getFilesDir().getAbsolutePath();\n        boolean isPresent = AWSIotKeystoreHelper.isKeystorePresent(keyStorePath, KEY_STORE_NAME);\n        if (isPresent) {\n            keyStore = AWSIotKeystoreHelper.getIotKeystore(CERT_ID, keyStorePath, KEY_STORE_NAME, KEY_STORE_PASSWORD);\n        } else {\n            saveCertificateAndPrivateKey(keyStorePath);\n            keyStore = AWSIotKeystoreHelper.getIotKeystore(CERT_ID, keyStorePath, KEY_STORE_NAME, KEY_STORE_PASSWORD);\n        }\n        mqttManager.connect(keyStore, new AWSIotMqttClientStatusCallback() {\n            @Override\n            public void onStatusChanged(AWSIotMqttClientStatus status, Throwable throwable) {\n                Log.d(TAG, \"AWSIotMqttClientStatus changed.\");\n            }\n        });\n    }\n    private void saveCertificateAndPrivateKey(String keyStorePath) {\n        String cert = assetsFileToString(CERT_FILE);\n        String priv = assetsFileToString(PRIVATE_KEY_FILE);\n        AWSIotKeystoreHelper.saveCertificateAndPrivateKey(CERT_ID, cert, priv, keyStorePath, KEY_STORE_NAME, KEY_STORE_PASSWORD);\n    }\n\n    private String assetsFileToString(String file) {\n        // \u7701\u7565: \u30a2\u30bb\u30c3\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u3060\u3057\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u3059\u3002\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (mqttManager != null) {\n            mqttManager.disconnect();\n        }\n    }\n}\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1 (Pub)\nJSON\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5f15\u6570\u306bpublishString\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53e9\u304f\u3060\u3051\u3067\u3059\u3002\n\u30c8\u30d4\u30c3\u30af\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3059\u3002\nif (mqttManager != null) {\n    mqttManager.publishString(msg, TOPIC, AWSIotMqttQos.QOS0);\n}\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1 (Sub)\n\u3059\u307f\u307e\u305b\u3093\u3001\u3001\u3001\u8a66\u3057\u3066\u307e\u305b\u3093\u3002subscribeToTopic\u30e1\u30bd\u30c3\u30c9\u3067Subscribe\u3057\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u53d7\u3051\u53d6\u308b\u3060\u3051\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u63a5\u7d9a\u5148\u3092SORACOM beam\u306b\u5909\u66f4\u3059\u308b\nAWS IoT\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f7f\u308f\u305a\u306b\u3001Paho\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u76f4\u63a5\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u63a5\u7d9a\u958b\u59cb\n\u30ad\u30fc\u30b9\u30c8\u30a2\u304c\u8981\u3089\u306a\u3044\u306e\u3067\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n    private MqttClient mqttClient;\n    private static final String BROKER_ENDPOINT = \"tcp://beam.soracom.io:xxxx\";\n\n   @Override\n    public void onCreate() {\n        super.onCreate();\n        try {\n            mqttClient = new MqttClient(BROKER_ENDPOINT, CLIENT_ID, new MemoryPersistence());\n            MqttConnectOptions connOpts = new MqttConnectOptions();\n            connOpts.setCleanSession(true);\n            mqttClient.connect(connOpts);\n        } catch (MqttException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (mqttClient != null) {\n            try {\n                mqttClient.disconnect();\n            } catch (MqttException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1 (Pub)\n\u3053\u3061\u3089\u306fJSON\u3092\u4e00\u65e6MqttMessage\u306b\u683c\u7d0d\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nif (mqttClient != null) {\n    MqttMessage sendMessage = new MqttMessage(msg.getBytes());\n    sendMessage.setQos(0);\n    mqttClient.publish(TOPIC, sendMessage);\n}\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1 (Sub)\n\u3059\u307f\u307e\u305b\u3093\u3001\u3001\u3001\u3053\u3061\u3089\u3082\u8a66\u3057\u3066\u307e\u305b\u3093\u3002subscribe\u30e1\u30bd\u30c3\u30c9\u3068setCallback\u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u73fe\u3067\u304d\u308b\u306f\u305a\u3002\n\n\u53c2\u8003\u60c5\u5831\n\nGitHub AWS SDK for Android, https://github.com/aws/aws-sdk-android\n\nAWS SDK for Android javadoc, http://docs.aws.amazon.com/AWSAndroidSDK/latest/javadoc/\n\nPaho, https://www.eclipse.org/paho/clients/java/\n\nAWS IoT\u3068Ruby\u88fdMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067Pub/Sub\u3057\u3066\u307f\u305f\n\n# \u6982\u8981\nMQTT\u3092\u304a\u8a66\u3057\u3059\u308b\u305f\u3081\u306bAndroid\u304b\u3089AWS IoT\u3084SORACOM beam\u306b\u63a5\u7d9a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nAWS IoT\u3068\u306e\u63a5\u7d9a\u306fMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e[Paho](https://www.eclipse.org/paho/clients/java/)\u3092\u4f7f\u304a\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001AWS SDK for Android\u306ejavadoc\u3092\u8aad\u3093\u3067\u307f\u308b\u3068AWS IoT\u95a2\u9023\u306e\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u306e\u3067\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u203b\u3053\u3053\u3067\u306f\u30d6\u30ed\u30fc\u30ab\u30fc\u5074\u306e\u8a2d\u5b9a\u306b\u3064\u3044\u3066\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u5b9f\u88c5\u306b\u7d5e\u3063\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n# \u6e96\u5099\n\u307e\u305a\u306f\u4f9d\u5b58\u95a2\u4fc2\u306bAWS SDK\u3092\u8ffd\u52a0\u3002\n\n```groovy\ndependencies {\n    compile 'com.amazonaws:aws-android-sdk-core:2.+'\n    compile 'com.amazonaws:aws-android-sdk-iot:2.+'\n} \n```\n\u30d3\u30eb\u30c9\u3059\u308b\u3068\u3001Paho\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u8ffd\u52a0\u3055\u308c\u308b\u306e\u3067\u3001AWS SDK\u306eMQTT\u95a2\u9023\u306e\u5b9f\u88c5\u306fPaho\u306e\u30e9\u30c3\u30d1\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n# Service\u3078\u306eAWS IoT\u306e\u5b9f\u88c5\n\nAndroid\u306e\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306bAWS IoT\u3068\u306e\u901a\u4fe1\u3092\u304a\u3053\u306a\u3046\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n## \u63a5\u7d9a\u958b\u59cb\nAWS Console\u3067AWS IoT\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u304a\u3053\u306a\u3046\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3001\u8a3c\u660e\u66f8\u3068\u79d8\u5bc6\u9375\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\uff08\u53c2\u8003: [AWS IoT\u3068Ruby\u88fdMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067Pub/Sub\u3057\u3066\u307f\u305f](http://qiita.com/hiroeorz@github/items/f933ad1158a08506922a)\uff09\n\n\u751f\u6210\u3055\u308c\u305f\u60c5\u5831\u3092\u4f7f\u3063\u3066\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\n\u63a5\u7d9a\u306b\u306f\u30ad\u30fc\u30b9\u30c8\u30a2\u304c\u5fc5\u8981\u3068\u306a\u308b\u305f\u3081\u3001\u30a2\u30bb\u30c3\u30c8\u306b\u683c\u7d0d\u3057\u3066\u304a\u3044\u305f\u8a3c\u660e\u66f8\u3068\u79d8\u5bc6\u9375\u3092\u8aad\u307f\u51fa\u3057\u30ad\u30fc\u30b9\u30c8\u30a2\u306b\u683c\u7d0d\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002 (\u8a3c\u660e\u66f8\u3068\u79d8\u5bc6\u9375\u306e\u6271\u3044\u306f\u672c\u756a\u904b\u7528\u3067\u306f\u3061\u3083\u3093\u3068\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3067\u3059\u3002) \n\nACCOUNT_ENDPOINT_PREFIX\u306f\u3001XXXXXXXXXXX.iot.REGION.amazonaws.com\u306e\u5148\u982d (XXXXXXXXXXX) \u306e\u90e8\u5206\u3067\u3059\u3002\nCLIENT_ID\u3001CERT_ID\u3001KEY_STORE_NAME\u3001KEY_STORE_PASSWORD\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3059\u3002\n\n```java\npublic class MqttService extends Service {\n    private AWSIotMqttManager mqttManager;\n    private static final String CLIENT_ID = \"xxxxx\";\n    private static final String ACCOUNT_ENDPOINT_PREFIX = \"xxxxx\";\n    private static final String CERT_ID = \"xxxxx\";\n    private static final String KEY_STORE_NAME = \"xxxxx.jks\";\n    private static final String KEY_STORE_PASSWORD = \"xxxxx\";\n    private static final String CERT_FILE = \"xxxxx-certificate.pem.crt\";\n    private static final String PRIVATE_KEY_FILE = \"xxxxx-private.pem.key\";\n    private String keyStorePath;\n    private KeyStore keyStore;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        mqttManager = new AWSIotMqttManager(CLIENT_ID, Region.getRegion(Regions.AP_NORTHEAST_1), ACCOUNT_ENDPOINT_PREFIX);\n        keyStorePath = getFilesDir().getAbsolutePath();\n        boolean isPresent = AWSIotKeystoreHelper.isKeystorePresent(keyStorePath, KEY_STORE_NAME);\n        if (isPresent) {\n            keyStore = AWSIotKeystoreHelper.getIotKeystore(CERT_ID, keyStorePath, KEY_STORE_NAME, KEY_STORE_PASSWORD);\n        } else {\n            saveCertificateAndPrivateKey(keyStorePath);\n            keyStore = AWSIotKeystoreHelper.getIotKeystore(CERT_ID, keyStorePath, KEY_STORE_NAME, KEY_STORE_PASSWORD);\n        }\n        mqttManager.connect(keyStore, new AWSIotMqttClientStatusCallback() {\n            @Override\n            public void onStatusChanged(AWSIotMqttClientStatus status, Throwable throwable) {\n                Log.d(TAG, \"AWSIotMqttClientStatus changed.\");\n            }\n        });\n    }\n    private void saveCertificateAndPrivateKey(String keyStorePath) {\n        String cert = assetsFileToString(CERT_FILE);\n        String priv = assetsFileToString(PRIVATE_KEY_FILE);\n        AWSIotKeystoreHelper.saveCertificateAndPrivateKey(CERT_ID, cert, priv, keyStorePath, KEY_STORE_NAME, KEY_STORE_PASSWORD);\n    }\n \n    private String assetsFileToString(String file) {\n        // \u7701\u7565: \u30a2\u30bb\u30c3\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u3060\u3057\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u3059\u3002\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (mqttManager != null) {\n            mqttManager.disconnect();\n        }\n    }\n}\n```\n## \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1 (Pub) \nJSON\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5f15\u6570\u306bpublishString\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53e9\u304f\u3060\u3051\u3067\u3059\u3002\n\u30c8\u30d4\u30c3\u30af\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3059\u3002\n\n```java\nif (mqttManager != null) {\n    mqttManager.publishString(msg, TOPIC, AWSIotMqttQos.QOS0);\n}\n```\n## \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1 (Sub) \n\u3059\u307f\u307e\u305b\u3093\u3001\u3001\u3001\u8a66\u3057\u3066\u307e\u305b\u3093\u3002`subscribeToTopic`\u30e1\u30bd\u30c3\u30c9\u3067Subscribe\u3057\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u53d7\u3051\u53d6\u308b\u3060\u3051\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u63a5\u7d9a\u5148\u3092SORACOM beam\u306b\u5909\u66f4\u3059\u308b\nAWS IoT\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f7f\u308f\u305a\u306b\u3001Paho\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u76f4\u63a5\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n## \u63a5\u7d9a\u958b\u59cb\n\n\u30ad\u30fc\u30b9\u30c8\u30a2\u304c\u8981\u3089\u306a\u3044\u306e\u3067\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\n```java\n    private MqttClient mqttClient;\n    private static final String BROKER_ENDPOINT = \"tcp://beam.soracom.io:xxxx\";\n\n   @Override\n    public void onCreate() {\n        super.onCreate();\n        try {\n            mqttClient = new MqttClient(BROKER_ENDPOINT, CLIENT_ID, new MemoryPersistence());\n            MqttConnectOptions connOpts = new MqttConnectOptions();\n            connOpts.setCleanSession(true);\n            mqttClient.connect(connOpts);\n        } catch (MqttException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (mqttClient != null) {\n            try {\n                mqttClient.disconnect();\n            } catch (MqttException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n\n## \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1 (Pub) \n\u3053\u3061\u3089\u306fJSON\u3092\u4e00\u65e6MqttMessage\u306b\u683c\u7d0d\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```java\nif (mqttClient != null) {\n    MqttMessage sendMessage = new MqttMessage(msg.getBytes());\n    sendMessage.setQos(0);\n    mqttClient.publish(TOPIC, sendMessage);\n}\n```\n## \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1 (Sub) \n\u3059\u307f\u307e\u305b\u3093\u3001\u3001\u3001\u3053\u3061\u3089\u3082\u8a66\u3057\u3066\u307e\u305b\u3093\u3002`subscribe`\u30e1\u30bd\u30c3\u30c9\u3068`setCallback`\u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u73fe\u3067\u304d\u308b\u306f\u305a\u3002\n\n# \u53c2\u8003\u60c5\u5831\n* GitHub AWS SDK for Android, https://github.com/aws/aws-sdk-android\n* AWS SDK for Android javadoc, http://docs.aws.amazon.com/AWSAndroidSDK/latest/javadoc/\n* Paho, https://www.eclipse.org/paho/clients/java/\n* [AWS IoT\u3068Ruby\u88fdMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067Pub/Sub\u3057\u3066\u307f\u305f](http://qiita.com/hiroeorz@github/items/f933ad1158a08506922a)\n", "tags": ["AWS", "awsIoT", "SORACOM", "Android", "mqtt"]}