{"tags": ["Azure", "Microsoft", "PowerShell"], "context": "\n\n\u6982\u8981\nAutomation\u30a2\u30ab\u30a6\u30f3\u30c8\u306bPowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u767b\u9332\u3057\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u306b\u5408\u308f\u305b\u3066\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u8d77\u52d5/\u505c\u6b62\u3057\u307e\u3059\u3002\n\u4eee\u60f3\u30de\u30b7\u30f3\u306e\u8d77\u52d5/\u505c\u6b62\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u30d7\u30ea\u30f3\u30b7\u30d1\u30eb\u3068\u3057\u3066\u767b\u9332\u3057\u305fActive Directory\u30a2\u30ab\u30a6\u30f3\u30c8\u6a29\u9650\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u60c5\u5831\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\nAzureVM\u3092\u81ea\u52d5\u8d77\u52d5/\u505c\u6b62\u3055\u305b\u308b\u624b\u9806\u66f8\uff08\u7121\u6599\uff09\nScheduling a runbook in Azure Automation\n\n\n2016\u5e744\u67087\u65e5\u8ffd\u8a18:\n\u4e0b\u8a18\u624b\u9806\u306f\u3068\u3066\u3082\u9577\u304f\u3066\u9762\u5012\u306a\u306e\u3067\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u3066PowerShell Gallery\u3078\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u3078\u3069\u3046\u305e\u3002 \u3010\u518d\u3011[Microsoft Azure]\u52e4\u52d9\u6642\u9593\u4e2d\u3060\u3051\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u52d5\u304b\u3059\uff08\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u306b\u3088\u308b\u81ea\u52d5\u8d77\u52d5\u30fb\u505c\u6b62\uff09 \n\n\n\u6e96\u5099\n\u5fc5\u8981\u306aPowerShell\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nPowerShell\u304b\u3089Microsoft Azure\u3092\u7ba1\u7406\u3059\u308b\u3010\u6e96\u5099\u7de8\u3011\n\n\u624b\u9806\n\n\u30b9\u30c6\u30c3\u30d7 \n\n\n\u30ed\u30b0\u30a4\u30f3\n\u307e\u3060\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002\nPS C:\\> Login-AzureRmAccount\n\n\n\u5909\u6570\u3092\u5b9a\u7fa9\n\u5f8c\u304b\u3089\u4f7f\u3046\u5909\u6570\u3092\u3042\u3089\u304b\u3058\u3081\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u304a\u597d\u307f\u3067\u6c7a\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u4e0b\u306e\u8aac\u660e\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\u3068Automation\u30a2\u30ab\u30a6\u30f3\u30c8\u540d\u306f\u540c\u4e00\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nPS C:\\> $ApplicationName = \"schevm\" #AD\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\nPS C:\\> $ApplicationPassword = \"myPassword!\" #AD\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d1\u30b9\u30ef\u30fc\u30c9\nPS C:\\> $Context = Get-AzureRmContext\nPS C:\\> $SubscriptionId = $Context.Subscription.SubscriptionId.ToString()\nPS C:\\> $TenantId = $Context.Tenant.TenantId.ToString()\nPS C:\\> $ResourceGroupName = \"rg01\" #\u30ea\u30bd\u30fc\u30b9\u30b0\u30eb\u30fc\u30d7\u540d\nPS C:\\> $AutomationAccountName = \"schevm\" #Automation\u30a2\u30ab\u30a6\u30f3\u30c8\u540d\nPS C:\\> $StartRunbookName = \"Start-SingleAzureRmVm\" #RunBook\u540d\nPS C:\\> $StopRunbookName = \"Stop-SingleAzureRmVm\" #RunBook\u540d\nPS C:\\> $StartScheduleName = \"Start Vm\" #VM\u8d77\u52d5\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u540d\nPS C:\\> $StopScheduleName = \"Stop Vm\" #VM\u505c\u6b62\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u540d\nPS C:\\> $ScheduleParams = @{ResourceGroupName=$ResourceGroupName;VmName=\"MyVmName\"} #RunBook\u8d77\u52d5\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3002\u4eee\u60f3\u30de\u30b7\u30f3\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\u30b9\u30c6\u30c3\u30d7  AD\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\n\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u3068IdentifierUri\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3059\u3002\u5f8c\u8005\u306f\u4e00\u610f\u3067\u3042\u308c\u3070\u3088\u3044\u306f\u305a\u3067\u3059\u3002\nPS C:\\> $NewApp = New-AzureRmADApplication -DisplayName $ApplicationName -Password $ApplicationPassword -HomePage \"https://management.azure.com/subscriptions/${SubscriptionId}/resourcegroups/${ResourceGroupName}/providers/Microsoft.Automation/automationAccounts/${AutomationAccountName}\"  -IdentifierUris \"https://spn/${SubscriptionId}/${ApplicationName}\"\n\n\n\u30b9\u30c6\u30c3\u30d7  AD\u30b5\u30fc\u30d3\u30b9\u30d7\u30ea\u30f3\u30b7\u30d1\u30eb\u3092\u4f5c\u6210\nPS C:\\> > $NewSp = New-AzureRmADServicePrincipal -ApplicationId $NewApp.ApplicationId\n\n\n\u30b9\u30c6\u30c3\u30d7  AD\u30b5\u30fc\u30d3\u30b9\u30d7\u30ea\u30f3\u30b7\u30d1\u30eb\u306b\u30ed\u30fc\u30eb\u3092\u5272\u308a\u5f53\u3066\n\u30ea\u30bd\u30fc\u30b9\u306e\u8aad\u307f\u53d6\u308a\u304c\u3067\u304d\u308b\u3088\u3046\u306bReader\u3068\u3001\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u8d77\u52d5/\u505c\u6b62\u3067\u304d\u308b\u3088\u3046\u306bVirtual Machine Contributor\u3092\u5272\u308a\u5f53\u3066\u307e\u3057\u305f\u3002\nPS C:\\> New-AzureRmRoleAssignment -ServicePrincipalName $NewSp.ServicePrincipalName -RoleDefinitionName \"Reader\" -ResourceGroupName $ResourceGroupName\nPS C:\\> New-AzureRmRoleAssignment -ServicePrincipalName $NewSp.ServicePrincipalName -RoleDefinitionName \"Virtual Machine Contributor\" -ResourceGroupName $ResourceGroupName\n\n\n\u30b9\u30c6\u30c3\u30d7  Automation\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\nPS C:\\> New-AzureRmAutomationAccount -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Location \"Japan East\"\n\n\n\u30b9\u30c6\u30c3\u30d7  Automation\u30a2\u30ab\u30a6\u30f3\u30c8\u3078\u8cc7\u7523\u3092\u4f5c\u6210\nCredential\u8cc7\u7523\u3068\u3001Variable\u8cc7\u7523\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u5f8c\u3067\u51fa\u3066\u304f\u308bRunBook\u306e\u4e2d\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u4f5c\u6210\u3059\u308b\u8cc7\u7523\u540d\u3092\u5909\u66f4\u3059\u308b\u3068\u304d\u306f\u3001RunBook\u5b9f\u884c\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3042\u308f\u305b\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nPS C:\\> $PsCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $NewApp.ApplicationId,(ConvertTo-SecureString -AsPlainText -Force $ApplicationPassword)\nPS C:\\> New-AzureRmAutomationCredential -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name AzureCredential -Value $PsCred\nPS C:\\> New-AzureRmAutomationVariable -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name \"TenantId\" -Value $TenantId -Encrypted $false\n\n\n\u30b9\u30c6\u30c3\u30d7  RunBook\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\n\u8d77\u52d5\u7528PowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\n\u6b21\u306e\u5185\u5bb9\u3092\u9069\u5f53\u306a\u540d\u524d.ps1\u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\nStart-SingleAzureRmVm.ps1\nWorkflow Start-SingleAzureRmVm {\n    Param(\n        [parameter(mandatory=$false)]\n        [String]\n        $CredentialAssetName = \"AzureCredential\",\n\n        [parameter(mandatory=$false)]\n        [String]\n        $TenantIdAssetName = \"TenantId\",\n\n        [parameter(mandatory=$true)]\n        [String]\n        $ResourceGroupName,\n\n        [parameter(mandatory=$true)]\n        [String]\n        $VmName,\n\n        [parameter(mandatory=$false)]\n        [Boolean]\n        $DryRun = $false\n    )\n\n\n    <#\n    We do not work on Sunday and Saturday\n    #>\n    function IsBusinessDay {\n        $dow = (Get-Date).DayOfWeek\n\n        !($dow -eq [DayOfWeek]::Sunday -or $dow -eq [DayOfWeek]::Saturday)\n    }\n\n    <#\n    Login Azure RM\n    #>\n    function LoginAzureRm {\n        param([String]$CredentialAssetName, [String]$TenantIdAssetName)\n\n        $Cred = Get-AutomationPSCredential -Name $CredentialAssetName\n        $TenantId = Get-AutomationVariable -Name $TenantIdAssetName\n\n        if(!$Cred) {\n            Throw \"Could not find an Automation Credential Asset named '${CredentialAssetName}'. Make sure you have created one in this Automation Account.\"\n        }\n\n        Login-AzureRmAccount -ServicePrincipal -Credential $Cred -TenantId $TenantId | Out-Null\n    }\n\n    <#\n    Returns true if Virtual Machine already started.\n    #>\n    function IsVmAllocated {\n        param([String]$ResourceGroupName, [String]$VmName)\n\n        $Vm = Get-AzureRmVM -Name $VmName -ResourceGroupName $ResourceGroupName -Status -ErrorAction Continue\n\n        if (!$Vm) {\n            Throw \"Virtual machine '${VmName}' not found in Resource Group '${ResourceGroupName}'.\"\n        }\n\n        $Status = $Vm.Statuses | ?{ $_.Code -eq \"PowerState/deallocated\" }\n\n        $Status -eq $null\n    }\n\n    <#\n    Start virtual machine.\n    Rertrying 3 times until success.\n    #>\n    function StartVm {\n        param([String]$ResourceGroupName, [String]$VmName)        \n\n        $TryCount = 0\n\n        Do {\n            $TryCount++\n\n            Write-Output \"Trying to start Virtual Machine '${VmName}', Count=${TryCount}\"\n\n            $Result = Start-AzureRmVM -ResourceGroupName $ResourceGroupName -Name $VmName -ErrorAction Continue\n\n            if ($Result.IsSuccessStatusCode) {\n                Write-Output \"Virtual Machine '${VmName}' started.\"\n            }\n            else {\n                Write-Output \"Virtual Machine '${VmName}' cannot start.\"\n                Start-Sleep -Seconds 15\n            }\n        } while($TryCount -le 3 -and !$Result.IsSuccessStatusCode)\n    }\n\n    ############\n    # Main\n    ############\n    if (IsBusinessDay) {\n        LoginAzureRm -CredentialAssetName $CredentialAssetName -TenantIdAssetName $TenantIdAssetName\n\n        if (IsVmAllocated -ResourceGroupName $ResourceGroupName -VmName $VmName) {\n            Write-Output \"Virtual machine '${VmName}' is already allocated.\"\n        }\n        else {\n            if ($DryRun) {\n                Write-Output \"DryRun mode, nothing to do.\"\n            } else {\n                StartVm -ResourceGroupName $ResourceGroupName -VmName $VmName\n            }\n        }\n    } else {\n        Write-Output \"Today is not a business day, nothing to do.\"\n    }\n}\n\n\n\n\u505c\u6b62\u7528PowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\n\u6b21\u306e\u5185\u5bb9\u3092\u9069\u5f53\u306a\u540d\u524d.ps1\u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\nStop-SingleAzureRmVm.ps1\nWorkflow Stop-SingleAzureRmVm {\n    Param(\n        [parameter(mandatory=$false)]\n        [String]\n        $CredentialAssetName = \"AzureCredential\",\n\n        [parameter(mandatory=$false)]\n        [String]\n        $TenantIdAssetName = \"TenantId\",\n\n        [parameter(mandatory=$true)]\n        [String]\n        $ResourceGroupName,\n\n        [parameter(mandatory=$true)]\n        [String]\n        $VmName,\n\n        [parameter(mandatory=$false)]\n        [Boolean]\n        $DryRun = $false\n    )\n\n    <#\n    Login Azure RM\n    #>\n    function LoginAzureRm {\n        param([String]$CredentialAssetName, [String]$TenantIdAssetName)\n\n        $Cred = Get-AutomationPSCredential -Name $CredentialAssetName\n        $TenantId = Get-AutomationVariable -Name $TenantIdAssetName\n\n        if(!$Cred) {\n            Throw \"Could not find an Automation Credential Asset named '${CredentialAssetName}'. Make sure you have created one in this Automation Account.\"\n        }\n\n        Login-AzureRmAccount -ServicePrincipal -Credential $Cred -TenantId $TenantId | Out-Null\n    }\n\n    <#\n    Returns true if Virtual Machine already started.\n    #>\n    function IsVmAllocated {\n        param([String]$ResourceGroupName, [String]$VmName)\n\n        $Vm = Get-AzureRmVM -Name $VmName -ResourceGroupName $ResourceGroupName -Status -ErrorAction Continue\n\n        if (!$Vm) {\n            Throw \"Virtual machine '${VmName}' not found in Resource Group '${ResourceGroupName}'.\"\n        }\n\n        $Status = $Vm.Statuses | ?{ $_.Code -eq \"PowerState/deallocated\" }\n\n        $Status -eq $null\n    }\n\n    <#\n    Start virtual machine.\n    Rertrying 3 times until success.\n    #>\n    function StopVm {\n        param([String]$ResourceGroupName, [String]$VmName)        \n\n        $TryCount = 0\n\n        Do {\n            $TryCount++\n\n            Write-Output \"Trying to stop Virtual Machine '${VmName}', Count=${TryCount}\"\n\n            $Result = Stop-AzureRmVM -ResourceGroupName $ResourceGroupName -Name $VmName -Force -ErrorAction Continue\n\n            if ($Result.IsSuccessStatusCode) {\n                Write-Output \"Virtual Machine '${VmName}' stoped.\"\n            }\n            else {\n                Write-Output \"Virtual Machine '${VmName}' cannot stop.\"\n                Start-Sleep -Seconds 15\n            }\n        } while($TryCount -le 3 -and !$Result.IsSuccessStatusCode)\n    }\n\n    ############\n    # Main\n    ############\n    LoginAzureRm -CredentialAssetName $CredentialAssetName -TenantIdAssetName $TenantIdAssetName\n\n    if (IsVmAllocated -ResourceGroupName $ResourceGroupName -VmName $VmName) {\n        if ($DryRun) {\n            Write-Output \"DryRun mode, nothing to do.\"\n        } else {\n            StopVm -ResourceGroupName $ResourceGroupName -VmName $VmName\n        }\n    }\n    else {\n        Write-Output \"Virtual machine '${VmName}' is not running.\"\n    }\n}\n\n\n\nPowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\nPS C:\\> Import-AzureRmAutomationRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Path .\\Start-SingleAzureRmVm.ps1 -Name $StartRunBookName  -Type PowerShellWorkflow\nPS C:\\> Import-AzureRmAutomationRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Path .\\Stop-SingleAzureRmVm.ps1 -Name $StopRunBookName  -Type PowerShellWorkflow\n\n\n PowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\u4e0a\u8a18\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305fPowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002\n\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\n\u8aac\u660e\n\u5fc5\u9808\n\u65e2\u5b9a\u5024\n\n\n\n\nCredentialAssetName\n\u8cc7\u683c\u60c5\u5831\u3092\u5b9a\u7fa9\u3057\u305f\u8cc7\u7523\u540d\u3067\u3059\u3002\n\nAzureCredential\n\n\nTenantIdAssetName\nTenantId\u3092\u5b9a\u7fa9\u3057\u305f\u8cc7\u7523\u540d\u3067\u3059\u3002\n\nTenantId\n\n\nResourceGroupName\n\u30ea\u30bd\u30fc\u30b9\u30b0\u30eb\u30fc\u30d7\u540d\u3067\u3059\u3002\n\u25cb\n\n\n\nVmName\n\u4eee\u60f3\u30de\u30b7\u30f3\u540d\u3067\u3059\u3002\n\u25cb\n\n\n\nDryRun\n$true\u306b\u3059\u308b\u3068\u3001\u5b9f\u969b\u306b\u8d77\u52d5/\u505c\u6b62\u306f\u3057\u307e\u305b\u3093\u3002\n\n$false\n\n\n\n\n \u30c6\u30b9\u30c8\u5b9f\u884c\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3001Azure\u30dd\u30fc\u30bf\u30eb\u4e0a\u304b\u3089\u30c6\u30b9\u30c8\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n[\u3059\u3079\u3066\u306e\u30ea\u30bd\u30fc\u30b9] > AutoMaition\u30a2\u30ab\u30a6\u30f3\u30c8\u540d > [RunBook]  > RunBook\u540d > [\u30c6\u30b9\u30c8\u30a6\u30a3\u30f3\u30c9\u30a6] \u3068\u8fbf\u308b\u3068\u3001\u30c6\u30b9\u30c8\u5b9f\u884c\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u7de8\u96c6\u3059\u308b\u3068\u304d\u306f\u2026\u2026\n\u30a4\u30f3\u30dd\u30fc\u30c8\u5f8c\u306b\u7de8\u96c6\u3059\u308b\u3068\u304d\u306f\u3001Azure\u30dd\u30fc\u30bf\u30eb\u304b\u3089\u3067\u306f\u306a\u304f\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3057\u3066\u4e0a\u66f8\u304d\u30a4\u30f3\u30dd\u30fc\u30c8\uff08-Force\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\uff09\u3059\u308b\u307b\u3046\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u3002\nAzure\u30dd\u30fc\u30bf\u30eb\u3067\u7de8\u96c6\u3057\u3066\u3082\u3001\u53cd\u6620\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b9\u30c6\u30c3\u30d7  RunBook\u3092\u767a\u884c\n\u5b9f\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u767a\u884c\u3057\u307e\u3059\u3002\nPS C:\\> Publish-AzureRmAutomationRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name $StartRunBookName\nPS C:\\> Publish-AzureRmAutomationRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name $StopRunBookName\n\n\n\u30b9\u30c6\u30c3\u30d7  \u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u8a2d\u5b9a\n\nVM\u8d77\u52d5\u7528\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u6210\n9:00\u306b\u8d77\u52d5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u9069\u5f53\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nPS C:\\> New-AzureRmAutomationSchedule -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name $StartScheduleName -StartTime ((Get-Date \"9:00\").AddDays(1)) -DayInterval 1\n\n\nVM\u505c\u6b62\u7528\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u6210\n18:00\u306b\u505c\u6b62\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u9069\u5f53\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nPS C:\\> New-AzureRmAutomationSchedule -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name $StopScheduleName -StartTime ((Get-Date \"18:00\").AddDays(1)) -DayInterval 1\n\n\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3068RunBook\u3092\u30ea\u30f3\u30af\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3068RunBook\u3092\u30ea\u30f3\u30af\u3057\u307e\u3059\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3053\u3053\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\nPS C:\\> Register-AzureRmAutomationScheduledRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Parameters $ScheduleParams -RunbookName $StartRunbookName -ScheduleName $StartScheduleName\nPS C:\\> Register-AzureRmAutomationScheduledRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Parameters $ScheduleParams -RunbookName $StopRunbookName -ScheduleName $StopScheduleName\n\n\n\u6700\u5f8c\u306b\nWindows \u4eee\u60f3\u30de\u30b7\u30f3\u306e\u8d77\u52d5/\u505c\u6b62\u3092\u7e70\u308a\u8fd4\u3059\u3068\u3001\u30ec\u30b8\u30b9\u30c8\u30ea\u306b\u672a\u4f7f\u7528\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u60c5\u5831\u304c\u305f\u307e\u3063\u3066\u3044\u304d\u3001\u4e0d\u5b89\u5b9a\u306b\u306a\u308b\u305d\u3046\u3067\u3059\u3002\n\u3053\u3061\u3089\u306b\u56de\u907f\u7b56\u304c\u3042\u308a\u307e\u3059\u3002\nhttps://blogs.technet.microsoft.com/jpaztech/2016/02/18/delete-nic/\n# \u6982\u8981\n\nAutomation\u30a2\u30ab\u30a6\u30f3\u30c8\u306bPowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u767b\u9332\u3057\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u306b\u5408\u308f\u305b\u3066\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u8d77\u52d5/\u505c\u6b62\u3057\u307e\u3059\u3002\n\n\u4eee\u60f3\u30de\u30b7\u30f3\u306e\u8d77\u52d5/\u505c\u6b62\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u30d7\u30ea\u30f3\u30b7\u30d1\u30eb\u3068\u3057\u3066\u767b\u9332\u3057\u305fActive Directory\u30a2\u30ab\u30a6\u30f3\u30c8\u6a29\u9650\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u4e0b\u8a18\u60c5\u5831\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n- [AzureVM\u3092\u81ea\u52d5\u8d77\u52d5/\u505c\u6b62\u3055\u305b\u308b\u624b\u9806\u66f8\uff08\u7121\u6599\uff09](http://qiita.com/HHFactory/items/3d75a189e809a3e3d36c)\n- [Scheduling a runbook in Azure Automation](https://azure.microsoft.com/en-us/documentation/articles/automation-scheduling-a-runbook/)\n\n\n----\n**2016\u5e744\u67087\u65e5\u8ffd\u8a18:**\n\u4e0b\u8a18\u624b\u9806\u306f\u3068\u3066\u3082\u9577\u304f\u3066\u9762\u5012\u306a\u306e\u3067\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u3066PowerShell Gallery\u3078\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u3061\u3089\u3078\u3069\u3046\u305e\u3002 [\u3010\u518d\u3011[Microsoft Azure]\u52e4\u52d9\u6642\u9593\u4e2d\u3060\u3051\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u52d5\u304b\u3059\uff08\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u306b\u3088\u308b\u81ea\u52d5\u8d77\u52d5\u30fb\u505c\u6b62\uff09](http://qiita.com/sengoku/items/99b14b4705528580a97a) \n\n----\n\n# \u6e96\u5099\n\n\u5fc5\u8981\u306aPowerShell\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n[PowerShell\u304b\u3089Microsoft Azure\u3092\u7ba1\u7406\u3059\u308b\u3010\u6e96\u5099\u7de8\u3011](http://qiita.com/sengoku/items/614a1d8faf52061c95cc)\n\n# \u624b\u9806\n\n## \u30b9\u30c6\u30c3\u30d7 :zero: \n\n### \u30ed\u30b0\u30a4\u30f3\n\n\u307e\u3060\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002\n\n```\nPS C:\\> Login-AzureRmAccount\n```\n\n### \u5909\u6570\u3092\u5b9a\u7fa9\n\n\u5f8c\u304b\u3089\u4f7f\u3046\u5909\u6570\u3092\u3042\u3089\u304b\u3058\u3081\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u304a\u597d\u307f\u3067\u6c7a\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u4e0b\u306e\u8aac\u660e\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\u3068Automation\u30a2\u30ab\u30a6\u30f3\u30c8\u540d\u306f\u540c\u4e00\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```ps1:\nPS C:\\> $ApplicationName = \"schevm\" #AD\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\nPS C:\\> $ApplicationPassword = \"myPassword!\" #AD\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d1\u30b9\u30ef\u30fc\u30c9\nPS C:\\> $Context = Get-AzureRmContext\nPS C:\\> $SubscriptionId = $Context.Subscription.SubscriptionId.ToString()\nPS C:\\> $TenantId = $Context.Tenant.TenantId.ToString()\nPS C:\\> $ResourceGroupName = \"rg01\" #\u30ea\u30bd\u30fc\u30b9\u30b0\u30eb\u30fc\u30d7\u540d\nPS C:\\> $AutomationAccountName = \"schevm\" #Automation\u30a2\u30ab\u30a6\u30f3\u30c8\u540d\nPS C:\\> $StartRunbookName = \"Start-SingleAzureRmVm\" #RunBook\u540d\nPS C:\\> $StopRunbookName = \"Stop-SingleAzureRmVm\" #RunBook\u540d\nPS C:\\> $StartScheduleName = \"Start Vm\" #VM\u8d77\u52d5\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u540d\nPS C:\\> $StopScheduleName = \"Stop Vm\" #VM\u505c\u6b62\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u540d\nPS C:\\> $ScheduleParams = @{ResourceGroupName=$ResourceGroupName;VmName=\"MyVmName\"} #RunBook\u8d77\u52d5\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3002\u4eee\u60f3\u30de\u30b7\u30f3\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n```\n\n## \u30b9\u30c6\u30c3\u30d7 :one: AD\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\n\n\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u3068IdentifierUri\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3059\u3002\u5f8c\u8005\u306f\u4e00\u610f\u3067\u3042\u308c\u3070\u3088\u3044\u306f\u305a\u3067\u3059\u3002\n\n```ps1:\nPS C:\\> $NewApp = New-AzureRmADApplication -DisplayName $ApplicationName -Password $ApplicationPassword -HomePage \"https://management.azure.com/subscriptions/${SubscriptionId}/resourcegroups/${ResourceGroupName}/providers/Microsoft.Automation/automationAccounts/${AutomationAccountName}\"  -IdentifierUris \"https://spn/${SubscriptionId}/${ApplicationName}\"\n```\n\n## \u30b9\u30c6\u30c3\u30d7 :two: AD\u30b5\u30fc\u30d3\u30b9\u30d7\u30ea\u30f3\u30b7\u30d1\u30eb\u3092\u4f5c\u6210\n\n```ps1:\nPS C:\\> > $NewSp = New-AzureRmADServicePrincipal -ApplicationId $NewApp.ApplicationId\n```\n\n## \u30b9\u30c6\u30c3\u30d7 :three: AD\u30b5\u30fc\u30d3\u30b9\u30d7\u30ea\u30f3\u30b7\u30d1\u30eb\u306b\u30ed\u30fc\u30eb\u3092\u5272\u308a\u5f53\u3066\n\n\u30ea\u30bd\u30fc\u30b9\u306e\u8aad\u307f\u53d6\u308a\u304c\u3067\u304d\u308b\u3088\u3046\u306b`Reader`\u3068\u3001\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u8d77\u52d5/\u505c\u6b62\u3067\u304d\u308b\u3088\u3046\u306b`Virtual Machine Contributor`\u3092\u5272\u308a\u5f53\u3066\u307e\u3057\u305f\u3002\n\n```ps1:\nPS C:\\> New-AzureRmRoleAssignment -ServicePrincipalName $NewSp.ServicePrincipalName -RoleDefinitionName \"Reader\" -ResourceGroupName $ResourceGroupName\nPS C:\\> New-AzureRmRoleAssignment -ServicePrincipalName $NewSp.ServicePrincipalName -RoleDefinitionName \"Virtual Machine Contributor\" -ResourceGroupName $ResourceGroupName\n```\n\n## \u30b9\u30c6\u30c3\u30d7 :four: Automation\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\n\n```ps1:\nPS C:\\> New-AzureRmAutomationAccount -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Location \"Japan East\"\n```\n\n## \u30b9\u30c6\u30c3\u30d7 :five: Automation\u30a2\u30ab\u30a6\u30f3\u30c8\u3078\u8cc7\u7523\u3092\u4f5c\u6210\n\nCredential\u8cc7\u7523\u3068\u3001Variable\u8cc7\u7523\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u5f8c\u3067\u51fa\u3066\u304f\u308bRunBook\u306e\u4e2d\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u4f5c\u6210\u3059\u308b\u8cc7\u7523\u540d\u3092\u5909\u66f4\u3059\u308b\u3068\u304d\u306f\u3001RunBook\u5b9f\u884c\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3042\u308f\u305b\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```ps1:\nPS C:\\> $PsCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $NewApp.ApplicationId,(ConvertTo-SecureString -AsPlainText -Force $ApplicationPassword)\nPS C:\\> New-AzureRmAutomationCredential -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name AzureCredential -Value $PsCred\nPS C:\\> New-AzureRmAutomationVariable -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name \"TenantId\" -Value $TenantId -Encrypted $false\n```\n\n## \u30b9\u30c6\u30c3\u30d7 :six: RunBook\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\n### \u8d77\u52d5\u7528PowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\n\n\u6b21\u306e\u5185\u5bb9\u3092`\u9069\u5f53\u306a\u540d\u524d.ps1`\u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n```ps1:Start-SingleAzureRmVm.ps1\nWorkflow Start-SingleAzureRmVm {\n    Param(\n        [parameter(mandatory=$false)]\n        [String]\n        $CredentialAssetName = \"AzureCredential\",\n\n        [parameter(mandatory=$false)]\n        [String]\n        $TenantIdAssetName = \"TenantId\",\n\n        [parameter(mandatory=$true)]\n        [String]\n        $ResourceGroupName,\n\n        [parameter(mandatory=$true)]\n        [String]\n        $VmName,\n\n        [parameter(mandatory=$false)]\n        [Boolean]\n        $DryRun = $false\n    )\n\n\n    <#\n    We do not work on Sunday and Saturday\n    #>\n    function IsBusinessDay {\n        $dow = (Get-Date).DayOfWeek\n\n        !($dow -eq [DayOfWeek]::Sunday -or $dow -eq [DayOfWeek]::Saturday)\n    }\n\n    <#\n    Login Azure RM\n    #>\n    function LoginAzureRm {\n        param([String]$CredentialAssetName, [String]$TenantIdAssetName)\n\n        $Cred = Get-AutomationPSCredential -Name $CredentialAssetName\n        $TenantId = Get-AutomationVariable -Name $TenantIdAssetName\n\n        if(!$Cred) {\n            Throw \"Could not find an Automation Credential Asset named '${CredentialAssetName}'. Make sure you have created one in this Automation Account.\"\n        }\n\n        Login-AzureRmAccount -ServicePrincipal -Credential $Cred -TenantId $TenantId | Out-Null\n    }\n\n    <#\n    Returns true if Virtual Machine already started.\n    #>\n    function IsVmAllocated {\n        param([String]$ResourceGroupName, [String]$VmName)\n        \n        $Vm = Get-AzureRmVM -Name $VmName -ResourceGroupName $ResourceGroupName -Status -ErrorAction Continue\n        \n        if (!$Vm) {\n            Throw \"Virtual machine '${VmName}' not found in Resource Group '${ResourceGroupName}'.\"\n        }\n\n        $Status = $Vm.Statuses | ?{ $_.Code -eq \"PowerState/deallocated\" }\n\n        $Status -eq $null\n    }\n\n    <#\n    Start virtual machine.\n    Rertrying 3 times until success.\n    #>\n    function StartVm {\n        param([String]$ResourceGroupName, [String]$VmName)        \n\n        $TryCount = 0\n\n        Do {\n            $TryCount++\n\n            Write-Output \"Trying to start Virtual Machine '${VmName}', Count=${TryCount}\"\n\n            $Result = Start-AzureRmVM -ResourceGroupName $ResourceGroupName -Name $VmName -ErrorAction Continue\n\n            if ($Result.IsSuccessStatusCode) {\n                Write-Output \"Virtual Machine '${VmName}' started.\"\n            }\n            else {\n                Write-Output \"Virtual Machine '${VmName}' cannot start.\"\n                Start-Sleep -Seconds 15\n            }\n        } while($TryCount -le 3 -and !$Result.IsSuccessStatusCode)\n    }\n\n    ############\n    # Main\n    ############\n    if (IsBusinessDay) {\n        LoginAzureRm -CredentialAssetName $CredentialAssetName -TenantIdAssetName $TenantIdAssetName\n\n        if (IsVmAllocated -ResourceGroupName $ResourceGroupName -VmName $VmName) {\n            Write-Output \"Virtual machine '${VmName}' is already allocated.\"\n        }\n        else {\n            if ($DryRun) {\n                Write-Output \"DryRun mode, nothing to do.\"\n            } else {\n                StartVm -ResourceGroupName $ResourceGroupName -VmName $VmName\n            }\n        }\n    } else {\n        Write-Output \"Today is not a business day, nothing to do.\"\n    }\n}\n```\n\n### \u505c\u6b62\u7528PowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\n\n\u6b21\u306e\u5185\u5bb9\u3092`\u9069\u5f53\u306a\u540d\u524d.ps1`\u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n```ps1:Stop-SingleAzureRmVm.ps1\nWorkflow Stop-SingleAzureRmVm {\n    Param(\n        [parameter(mandatory=$false)]\n        [String]\n        $CredentialAssetName = \"AzureCredential\",\n\n        [parameter(mandatory=$false)]\n        [String]\n        $TenantIdAssetName = \"TenantId\",\n\n        [parameter(mandatory=$true)]\n        [String]\n        $ResourceGroupName,\n\n        [parameter(mandatory=$true)]\n        [String]\n        $VmName,\n\n        [parameter(mandatory=$false)]\n        [Boolean]\n        $DryRun = $false\n    )\n\n    <#\n    Login Azure RM\n    #>\n    function LoginAzureRm {\n        param([String]$CredentialAssetName, [String]$TenantIdAssetName)\n\n        $Cred = Get-AutomationPSCredential -Name $CredentialAssetName\n        $TenantId = Get-AutomationVariable -Name $TenantIdAssetName\n\n        if(!$Cred) {\n            Throw \"Could not find an Automation Credential Asset named '${CredentialAssetName}'. Make sure you have created one in this Automation Account.\"\n        }\n\n        Login-AzureRmAccount -ServicePrincipal -Credential $Cred -TenantId $TenantId | Out-Null\n    }\n\n    <#\n    Returns true if Virtual Machine already started.\n    #>\n    function IsVmAllocated {\n        param([String]$ResourceGroupName, [String]$VmName)\n        \n        $Vm = Get-AzureRmVM -Name $VmName -ResourceGroupName $ResourceGroupName -Status -ErrorAction Continue\n        \n        if (!$Vm) {\n            Throw \"Virtual machine '${VmName}' not found in Resource Group '${ResourceGroupName}'.\"\n        }\n\n        $Status = $Vm.Statuses | ?{ $_.Code -eq \"PowerState/deallocated\" }\n\n        $Status -eq $null\n    }\n\n    <#\n    Start virtual machine.\n    Rertrying 3 times until success.\n    #>\n    function StopVm {\n        param([String]$ResourceGroupName, [String]$VmName)        \n\n        $TryCount = 0\n\n        Do {\n            $TryCount++\n\n            Write-Output \"Trying to stop Virtual Machine '${VmName}', Count=${TryCount}\"\n\n            $Result = Stop-AzureRmVM -ResourceGroupName $ResourceGroupName -Name $VmName -Force -ErrorAction Continue\n\n            if ($Result.IsSuccessStatusCode) {\n                Write-Output \"Virtual Machine '${VmName}' stoped.\"\n            }\n            else {\n                Write-Output \"Virtual Machine '${VmName}' cannot stop.\"\n                Start-Sleep -Seconds 15\n            }\n        } while($TryCount -le 3 -and !$Result.IsSuccessStatusCode)\n    }\n\n    ############\n    # Main\n    ############\n    LoginAzureRm -CredentialAssetName $CredentialAssetName -TenantIdAssetName $TenantIdAssetName\n\n    if (IsVmAllocated -ResourceGroupName $ResourceGroupName -VmName $VmName) {\n        if ($DryRun) {\n            Write-Output \"DryRun mode, nothing to do.\"\n        } else {\n            StopVm -ResourceGroupName $ResourceGroupName -VmName $VmName\n        }\n    }\n    else {\n        Write-Output \"Virtual machine '${VmName}' is not running.\"\n    }\n}\n```\n\n### PowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\n\u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n```ps1:\nPS C:\\> Import-AzureRmAutomationRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Path .\\Start-SingleAzureRmVm.ps1 -Name $StartRunBookName  -Type PowerShellWorkflow\nPS C:\\> Import-AzureRmAutomationRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Path .\\Stop-SingleAzureRmVm.ps1 -Name $StopRunBookName  -Type PowerShellWorkflow\n```\n\n### :bulb: PowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\n\u4e0a\u8a18\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305fPowerShell\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002\n\n| \u30d1\u30e9\u30e1\u30fc\u30bf\u540d | \u8aac\u660e | \u5fc5\u9808 | \u65e2\u5b9a\u5024 |\n|------------|------|------|-------|\n|CredentialAssetName | \u8cc7\u683c\u60c5\u5831\u3092\u5b9a\u7fa9\u3057\u305f\u8cc7\u7523\u540d\u3067\u3059\u3002 | |AzureCredential |\n|TenantIdAssetName | TenantId\u3092\u5b9a\u7fa9\u3057\u305f\u8cc7\u7523\u540d\u3067\u3059\u3002 | | TenantId |\n| ResourceGroupName | \u30ea\u30bd\u30fc\u30b9\u30b0\u30eb\u30fc\u30d7\u540d\u3067\u3059\u3002 | \u25cb | |\n| VmName | \u4eee\u60f3\u30de\u30b7\u30f3\u540d\u3067\u3059\u3002 | \u25cb | |\n| DryRun | $true\u306b\u3059\u308b\u3068\u3001\u5b9f\u969b\u306b\u8d77\u52d5/\u505c\u6b62\u306f\u3057\u307e\u305b\u3093\u3002 | | $false |\n\n\n### :bulb: \u30c6\u30b9\u30c8\u5b9f\u884c\n\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3001Azure\u30dd\u30fc\u30bf\u30eb\u4e0a\u304b\u3089\u30c6\u30b9\u30c8\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n[\u3059\u3079\u3066\u306e\u30ea\u30bd\u30fc\u30b9] > *AutoMaition\u30a2\u30ab\u30a6\u30f3\u30c8\u540d* > [RunBook]  > *RunBook\u540d* > [\u30c6\u30b9\u30c8\u30a6\u30a3\u30f3\u30c9\u30a6] \u3068\u8fbf\u308b\u3068\u3001\u30c6\u30b9\u30c8\u5b9f\u884c\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n![test-runbook.JPG](https://qiita-image-store.s3.amazonaws.com/0/59475/f979402a-f162-e10e-a002-97bfe2287565.jpeg)\n\n\n### :bulb: \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u7de8\u96c6\u3059\u308b\u3068\u304d\u306f\u2026\u2026\n\n\u30a4\u30f3\u30dd\u30fc\u30c8\u5f8c\u306b\u7de8\u96c6\u3059\u308b\u3068\u304d\u306f\u3001Azure\u30dd\u30fc\u30bf\u30eb\u304b\u3089\u3067\u306f\u306a\u304f\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3057\u3066\u4e0a\u66f8\u304d\u30a4\u30f3\u30dd\u30fc\u30c8\uff08`-Force`\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\uff09\u3059\u308b\u307b\u3046\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u3002\nAzure\u30dd\u30fc\u30bf\u30eb\u3067\u7de8\u96c6\u3057\u3066\u3082\u3001\u53cd\u6620\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n## \u30b9\u30c6\u30c3\u30d7 :seven: RunBook\u3092\u767a\u884c\n\n\u5b9f\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u767a\u884c\u3057\u307e\u3059\u3002\n\n```ps1:\nPS C:\\> Publish-AzureRmAutomationRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name $StartRunBookName\nPS C:\\> Publish-AzureRmAutomationRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name $StopRunBookName\n```\n\n## \u30b9\u30c6\u30c3\u30d7 :eight: \u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u8a2d\u5b9a\n\n### VM\u8d77\u52d5\u7528\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u6210\n\n9:00\u306b\u8d77\u52d5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u9069\u5f53\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```ps1:\nPS C:\\> New-AzureRmAutomationSchedule -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name $StartScheduleName -StartTime ((Get-Date \"9:00\").AddDays(1)) -DayInterval 1\n```\n\n### VM\u505c\u6b62\u7528\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u6210\n\n18:00\u306b\u505c\u6b62\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u9069\u5f53\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```ps1:\nPS C:\\> New-AzureRmAutomationSchedule -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Name $StopScheduleName -StartTime ((Get-Date \"18:00\").AddDays(1)) -DayInterval 1\n```\n\n### \u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3068RunBook\u3092\u30ea\u30f3\u30af\n\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3068RunBook\u3092\u30ea\u30f3\u30af\u3057\u307e\u3059\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3053\u3053\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```ps1:\nPS C:\\> Register-AzureRmAutomationScheduledRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Parameters $ScheduleParams -RunbookName $StartRunbookName -ScheduleName $StartScheduleName\nPS C:\\> Register-AzureRmAutomationScheduledRunbook -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName -Parameters $ScheduleParams -RunbookName $StopRunbookName -ScheduleName $StopScheduleName\n```\n\n# \u6700\u5f8c\u306b\n\nWindows \u4eee\u60f3\u30de\u30b7\u30f3\u306e\u8d77\u52d5/\u505c\u6b62\u3092\u7e70\u308a\u8fd4\u3059\u3068\u3001\u30ec\u30b8\u30b9\u30c8\u30ea\u306b\u672a\u4f7f\u7528\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u60c5\u5831\u304c\u305f\u307e\u3063\u3066\u3044\u304d\u3001\u4e0d\u5b89\u5b9a\u306b\u306a\u308b\u305d\u3046\u3067\u3059\u3002\n\n\u3053\u3061\u3089\u306b\u56de\u907f\u7b56\u304c\u3042\u308a\u307e\u3059\u3002\nhttps://blogs.technet.microsoft.com/jpaztech/2016/02/18/delete-nic/\n"}