{"context": " More than 1 year has passed since last update.Django\u306e\u7ba1\u7406\u30b3\u30de\u30f3\u30c9\u304b\u3089, Django\u306e\u74b0\u5883\u3067Python\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3055\u305b\u308b\u30ab\u30b9\u30bf\u30e0\u30b3\u30de\u30f3\u30c9\u30af\u30e9\u30b9.\n\u4f55\u3089\u304b\u306e\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u3068, \u30ed\u30ac\u30fc\u306b\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3092\u5410\u3044\u3066, \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c91\u3092\u8fd4\u3059.\n\u3053\u3093\u306a\u304b\u3093\u3058\u306b\u4f7f\u3046.\n$ python manage.py script do_something.py && do_next || else_do\n\n\napp/management/commands/script.py\n# -*- coding: utf-8\n\n\nimport sys\nimport logging\n\nfrom django.core.management.base import LabelCommand, CommandError\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass Command(LabelCommand):\n    help = u'Executes the specified script file in current context.'\n    args = u'[file]'\n    label = u'script file'\n\n    # Prevent to validate installed models.\n    requires_model_validation = False\n\n    def handle_label(self, label, **options):\n        try:\n            locals_ = {u'__name__': u'__main__'}\n            globals_ = {}\n            execfile(label, locals_, globals_)\n        except Exception:\n            logger.exception(u'Got an error in executing %s.' % label)\n            raise CommandError\n\n\nDjango\u306e\u7ba1\u7406\u30b3\u30de\u30f3\u30c9\u304b\u3089, Django\u306e\u74b0\u5883\u3067Python\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3055\u305b\u308b\u30ab\u30b9\u30bf\u30e0\u30b3\u30de\u30f3\u30c9\u30af\u30e9\u30b9.\n\n\u4f55\u3089\u304b\u306e\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u3068, \u30ed\u30ac\u30fc\u306b\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3092\u5410\u3044\u3066, \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c91\u3092\u8fd4\u3059.\n\n\u3053\u3093\u306a\u304b\u3093\u3058\u306b\u4f7f\u3046.\n\n```\n$ python manage.py script do_something.py && do_next || else_do\n```\n\n```py:app/management/commands/script.py\n# -*- coding: utf-8\n\n\nimport sys\nimport logging\n\nfrom django.core.management.base import LabelCommand, CommandError\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass Command(LabelCommand):\n    help = u'Executes the specified script file in current context.'\n    args = u'[file]'\n    label = u'script file'\n\n    # Prevent to validate installed models.\n    requires_model_validation = False\n\n    def handle_label(self, label, **options):\n        try:\n            locals_ = {u'__name__': u'__main__'}\n            globals_ = {}\n            execfile(label, locals_, globals_)\n        except Exception:\n            logger.exception(u'Got an error in executing %s.' % label)\n            raise CommandError\n```", "tags": ["Python", "Django"]}