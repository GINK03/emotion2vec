{"context": "\n\nC-Style for statement has been deprecated.\nAs you know C-Style for statement has been deprecated, and will be removed in Swift 3.0.  Then I wrote an article about how to rewrite your C-Style for statements into new Swift 3.0 ready style, based on typical scenarios.\n\nNote: This article is an English translated version of this article.\n\nfor var i = 0 ; i < 100 ; i++\nThis scenario is the most typical for statement from 0 to 99.\n// C-Style for statement\nfor var i = 0 ; i < 100 ; i++ {\n    print(\"\\(i)\")\n}\n\n// Swift 3.0 ready\n(0 ..< 100).forEach { print(\"\\($0)\") }\n\n// Swift 3.0 ready\nfor i in (0 ..< 100) {\n    print(\"\\(i)\")\n}\n\n\nfor var i = 99 ; i >= 0 ; i--\nTypical downward for statement from 99 to 0.\n// C-Style for statement\nfor var i = 99 ; i >= 0 ; i-- {\n    print(\"\\(i)\")\n}\n\nYou ay use reverse().\n// Swift 3.0 ready\n(0 ..< 100).reverse().forEach { print(\"\\($0)\") }\n\n// Swift 3.0 ready\nfor i in (0 ..< 100).reverse() {\n    print(\"\\(i)\")\n}\n\n\nfor var i = 0 ; i < 100 ; i += 2\nCase where it's incrementation is more then one.\n// C-Style for statement\nfor var i = 0; i < 100 ; i += 2 {\n    print(\"\\(i)\")\n}\n\nYou may use stride(). It has a parameter not only to but also through.\n// Swift 3.0 ready\n0.stride(to: 100, by: 2).forEach { print(\"\\($0)\") }\n\n\n\nDifference between stride(to:by:) an stride(through:by:)\n\nNote that to refers to \"less than\", and through refers to \"equal or less than\".  Please see these examples.\n0.stride(to: 20, by: 5) // 0, 5, 10, 15\n\n0.stride(through: 20, by: 5) // 0, 5, 10, 15, 20\n\n\n\nfor var i = 98 ; i >= 0 ; i -= 2\nCase when decrementing.\n// C-Style for statement\nfor var i = 98 ; i >= 0 ; i -= 2 {\n    print(\"\\(i)\")\n}\n\n// Swift 3.0 ready\n98.stride(through: 0, by: -2).forEach { print(\"\\($0)\") }\n\n// Swift 3.0 ready\n0.stride(to: 100, by: 2).reverse().forEach { print(\"\\($0)\") }\n\n// Swift 3.0 ready\nfor i in 0.stride(to: 100, by: 2).reverse() {\n    print(\"\\(i)\")\n}\n\n\nWhen incrementation or decrementation is given in body code, and it's varying depending on condition.\nI cannot come up with good example, but say, incrementation is depending on it's squared number is whether odd or even. (This example is totally a fictional)\n// C-Style for statement\nfor var i = 0 ; i < 100 ; {\n    print(\"\\(i)\")\n    if (i * i) % 2 == 0 { i += 1 }\n    else { i += 2 }\n}\n\nYou may rewrite this with while statement.\n// Swift 3.0 ready\nvar i = 0\nwhile i < 100 {\n    print(\"\\(i)\")\n    if (i * i) % 2 == 0 { i += 1 }\n    else { i += 2 }\n}\n\n\nWhen there are some cases to leave for statement.\nI cannot come up with good example once again, but say, there is a case when you generate a random number and leave for statement depending on the generated number.\n// C-Style for statement\nfor var i = 0 ; i < 100 ; i++ {\n    print(\"\\(i)\")\n    if arc4random_uniform(10) == 0 { break }\n}\n\nYou may not use forEach {} to break for statement, so you may use for-in statement.\n// error: forEach \u3067 break \u306f\u4f7f\u3048\u306a\u3044\n(0 ..< 100).forEach {\n    print(\"\\(i)\")\n    if arc4random_uniform(10) == 0 { break } // error\n}\n\n// Swift 3.0 ready\nfor i in 0 ..< 100 {\n    print(\"\\(i)\")\n    if arc4random_uniform(10) == 0 { break } // OK\n}\n\nIf your code has continue statement, you may not use forEach statement, so as break statement.  So please rewrite that code with for-in statement as well.\n\nFloating number, Not Integer\nYou may use stride() for CGFloat and Double because they are Strideable as well.\nCGFloat(0).stride(to: 100, by: 1.5).forEach { print(\"\\($0)\") }\n\n0.0.stride(to: 100.0, by: 1.5).forEach { print(\"\\($0)\") }\n\n\nThe last word\nWhen Apple announces Swift 3.0, Apple may state something like \"We provide best converter you can count on.\"  Well, I am sorry, I don't think I would trust.  Instead, Apple gave us some time to rewrite part of our code bit by bit, and this is much better way to be part of the Swift revolution.\nThen Swift programmers!! Have a happy coding!!\nSwift Version:\nApple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)\n\n# C-Style `for` statement has been deprecated.\n\nAs you know C-Style `for` statement has been deprecated, and will be removed in Swift 3.0.  Then I wrote an article about how to rewrite your C-Style `for` statements into new Swift 3.0 ready style, based on typical scenarios.\n\n<img width=\"633\" alt=\"Screen Shot 2016-04-08 at 11.55.56 AM.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/65634/43f22d89-fa88-395c-8a56-612167bb9ae0.png\">\n\nNote: This article is an English translated version of this [article](http://qiita.com/codelynx/items/899c26dd2cbdba7d2b00).\n\n## for var i = 0 ; i < 100 ; i++\n\nThis scenario is the most typical `for` statement from 0 to 99.\n\n```.swift\n// C-Style for statement\nfor var i = 0 ; i < 100 ; i++ {\n\tprint(\"\\(i)\")\n}\n```\n\n```.swift\n// Swift 3.0 ready\n(0 ..< 100).forEach { print(\"\\($0)\") }\n```\n\n```.swift\n// Swift 3.0 ready\nfor i in (0 ..< 100) {\n\tprint(\"\\(i)\")\n}\n```\n\n## for var i = 99 ; i >= 0 ; i--\n\nTypical downward `for` statement from 99 to 0.\n\n```.swift\n// C-Style for statement\nfor var i = 99 ; i >= 0 ; i-- {\n\tprint(\"\\(i)\")\n}\n```\n\nYou ay use `reverse()`.\n\n```.swift\n// Swift 3.0 ready\n(0 ..< 100).reverse().forEach { print(\"\\($0)\") }\n```\n\n```.swift\n// Swift 3.0 ready\nfor i in (0 ..< 100).reverse() {\n\tprint(\"\\(i)\")\n}\n```\n\n## for var i = 0 ; i < 100 ; i += 2\n\nCase where it's incrementation is more then one.\n\n\n```.swift\n// C-Style for statement\nfor var i = 0; i < 100 ; i += 2 {\n\tprint(\"\\(i)\")\n}\n```\n\nYou may use `stride()`. It has a parameter not only `to` but also `through`.\n\n```.swift\n// Swift 3.0 ready\n0.stride(to: 100, by: 2).forEach { print(\"\\($0)\") }\n```\n\n> #### Difference between `stride(to:by:)` an `stride(through:by:)`\n>\n> Note that `to` refers to \"less than\", and `through` refers to \"equal or less than\".  Please see these examples.\n>\n>```.swift\n>0.stride(to: 20, by: 5) // 0, 5, 10, 15\n>```\n>\n>```.swift\n>0.stride(through: 20, by: 5) // 0, 5, 10, 15, 20\n>```\n\n## for var i = 98 ; i >= 0 ; i -= 2\n\nCase when decrementing.\n\n```.swift\n// C-Style for statement\nfor var i = 98 ; i >= 0 ; i -= 2 {\n\tprint(\"\\(i)\")\n}\n```\n\n```.swift\n// Swift 3.0 ready\n98.stride(through: 0, by: -2).forEach { print(\"\\($0)\") }\n```\n\n```.swift\n// Swift 3.0 ready\n0.stride(to: 100, by: 2).reverse().forEach { print(\"\\($0)\") }\n```\n\n```.swift\n// Swift 3.0 ready\nfor i in 0.stride(to: 100, by: 2).reverse() {\n\tprint(\"\\(i)\")\n}\n```\n\n## When incrementation or decrementation is given in body code, and it's varying depending on condition.\n\nI cannot come up with good example, but say, incrementation is depending on it's squared number is whether odd or even. (This example is totally a fictional)\n\n```.swift\n// C-Style for statement\nfor var i = 0 ; i < 100 ; {\n\tprint(\"\\(i)\")\n\tif (i * i) % 2 == 0 { i += 1 }\n\telse { i += 2 }\n}\n```\n\nYou may rewrite this with `while` statement.\n\n```.swift\n// Swift 3.0 ready\nvar i = 0\nwhile i < 100 {\n\tprint(\"\\(i)\")\n\tif (i * i) % 2 == 0 { i += 1 }\n\telse { i += 2 }\n}\n```\n\n## When there are some cases to leave `for` statement.\n\nI cannot come up with good example once again, but say, there is a case when you generate a random number and leave `for` statement depending on the generated number.\n\n```.swift\n// C-Style for statement\nfor var i = 0 ; i < 100 ; i++ {\n\tprint(\"\\(i)\")\n\tif arc4random_uniform(10) == 0 { break }\n}\n```\n\nYou may not use `forEach {}` to break `for` statement, so you may use `for`-`in` statement.\n\n```.swift\n// error: forEach \u3067 break \u306f\u4f7f\u3048\u306a\u3044\n(0 ..< 100).forEach {\n\tprint(\"\\(i)\")\n\tif arc4random_uniform(10) == 0 { break } // error\n}\n```\n\n```.swift\n// Swift 3.0 ready\nfor i in 0 ..< 100 {\n\tprint(\"\\(i)\")\n\tif arc4random_uniform(10) == 0 { break } // OK\n}\n```\n\nIf your code has `continue` statement, you may not use `forEach` statement, so as `break` statement.  So please rewrite that code with `for`-`in` statement as well.\n\n## Floating number, Not Integer\n\nYou may use `stride()` for `CGFloat` and `Double` because they are `Strideable` as well.\n\n```.swift\nCGFloat(0).stride(to: 100, by: 1.5).forEach { print(\"\\($0)\") }\n```\n\n```.swift\n0.0.stride(to: 100.0, by: 1.5).forEach { print(\"\\($0)\") }\n```\n\n## The last word \n\nWhen Apple announces Swift 3.0, Apple may state something like \"We provide best converter you can count on.\"  Well, I am sorry, I don't think I would trust.  Instead, Apple gave us some time to rewrite part of our code bit by bit, and this is much better way to be part of the Swift revolution.\n\nThen Swift programmers!! Have a happy coding!!\n\n```.console\nSwift Version:\nApple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)\n```\n", "tags": ["Swift", "Swift3.0"]}