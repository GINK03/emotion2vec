{"tags": ["CoffeeScript", "AngularJS", "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411", "promise"], "context": " More than 1 year has passed since last update.\u6628\u65e5\u306f\u3081\u3061\u3083\u304f\u3061\u3083\u7720\u3044\u4e2d\u66f8\u3044\u305f\u306e\u3067\u3068\u3066\u3082\u5fae\u5999\u306a\u306e\u304c\u51fa\u6765\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u66f8\u304d\u76f4\u3057\u307e\u3059\u3002\n\n\u9806\u6b21\n\u3053\u308c\u306f\u6628\u65e5\u3068\u540c\u3058\u3002\npromise\n.then f\n.then g\n.then h\n# ...\n\n\n\u5206\u5c90\uff1a p_if\n\n\n\u5f79\u5272\np_if \u306f\u3001\u76f4\u524d\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u53d7\u3051\u3066\u3001\u7d9a\u304f\u51e6\u7406\u3092\u5206\u96e2\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\u3002\n\n\u4ed5\u69d8\np_if \u306e\u4ed5\u69d8\u306f\u6b21\u306e\u901a\u308a\u3067\u3042\u308b\np_if: condStmt -> thenStmt -> elseStmt -> selectionStmt\ncondStmt: X -> Bool|P(Bool)\nthenStmt: X -> Y|P(Y)\nelseStmt: X -> Y|P(Y)\nselectionStmt: X -> P(Y)\n\n\n\np_if \u306f 3 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\n\n\ncondStmt \u306f\u3001X \u578b\u306e\u5024\u3092\u53d7\u3051\u3066\u3001\u771f\u507d\u5024\u3092\u8fd4\u3059\nthenStmt \u306f\u3001condStmt \u304c\u771f\u3092\u8fd4\u3057\u305f\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u308b\u3002X \u578b\u306e\u5024\u3092\u53d7\u3051\u3066\u3001Y \u578b\u306e\u5024\u3092\u8fd4\u3059\u3002\nelseStmt \u306f\u3001condStmt \u304c\u507d\u3092\u8fd4\u3057\u305f\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n\n\np_if \u306f 1 \u3064\u306e\u95a2\u6570\u3092\u8fd4\u3059\n\n\nselectionStmt \u306f\u3001condStmt, thenStmt, elseStmt \u3092\u3044\u3044\u611f\u3058\u306b\u7d44\u307f\u5408\u308f\u305b\u305f \u95a2\u6570\u3092\u8fd4\u3059\u3002\n\n\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u6b21\u306e\u3088\u3046\u306a\u8a18\u8ff0\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\npromise\n.then stmt1\n.then stmt2\n.then p_if condStmt, thenStmt, elseStmt\n.then stmt3\n.then stmt4\n# ...\n\n\n\u5b9f\u88c5\nangular.module(\"structuredProgramming\").factory \"p_if\", [\"$q\", ($q) ->\n  return (condStmt, thenStmt, elseStmt) ->\n    return (x) ->\n      return $q.when condStmt x\n      .then (b) ->\n        return if b then thenStmt x else elseStmt x\n]\n\n# test\ndescribe \"test for p_if\", ->\n  condStmt = (n) -> n % 2\n  thenStmt = (n) -> n * 3 + 1\n  elseStmt = (n) -> n / 2\n\n  it \"p_if true\", (done) ->\n    inject [\"$rootScope\", \"$q\", \"p_if\", ($rootScope, $q, p_if) ->\n      deferred = $q.defer()\n      deferred.promise\n      .then p_if condStmt, thenStmt, elseStmt\n      .then (n) ->\n        expect(n).toBe 16\n      .finally done\n      deferred.resolve 5\n      $rootScope.$apply()\n    ]\n  it \"p_if false\", (done) ->\n    inject [\"$rootScope\", \"$q\", \"p_if\", ($rootScope, $q, p_if) ->\n      deferred = $q.defer()\n      deferred.promise\n      .then p_if condStmt, thenStmt, elseStmt\n      .then (n) ->\n        expect(n).toBe 3\n      .finally done\n      deferred.resolve 6\n      $rootScope.$apply()\n    ]\n\n\n\u53cd\u5fa9\uff1a p_while\n\n\n\u5f79\u5272\np_while \u306f\u76f4\u524d\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u53d7\u3051\u3066\u3001\u51e6\u7406\u3092\u53cd\u5fa9\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\n\n\u4ed5\u69d8\np_while: condStmt -> doStmt -> iterationStmt\ncondStmt: X -> Bool|P(Bool)\ndoStmt: X -> X|P(X)\niterationStmt: X -> P(X)\n\ndoStmt \u304c X -> Y|P(Y) \u3067\u306a\u3044\u306e\u306f\u3001doStmt \u306e\u8fd4\u308a\u5024\u3092\u518d\u3073 condStmt \u3067\u8a55\u4fa1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3089\u3060\u3002\n\n\u5b9f\u88c5\nangular.module(\"structuredProgramming\").factory \"p_while\", [\"$q\", ($q) ->\n  return (condStmt, doStmt) ->\n    iterStmt = (x) ->\n      return $q.when condStmt x\n      .then (b) ->\n        if b\n          return doStmt x\n          .then iterStmt\n        else\n          return x\n    return iterStmt\n\n# test\ndescribe \"test for p_while\", ->\n  ifCondStmt = (d) -> d[0] % 2\n  ifThenStmt = (d) -> [d[0] * 3 + 1, d[1] + 1]\n  ifElseStmt = (d) -> [d[0] / 2, d[1] + 1]\n  condStmt = (d) -> d[0] > 1\n  it \"p_while\", (done) ->\n    inject [\"$rootScope\", \"$q\", \"p_while\", \"p_if\", ($rootScope, $q, p_while, p_if) ->\n      doStmt = p_if ifCondStmt, ifThenStmt, ifElseStmt\n      deferred = $q.defer()\n      deferred.promise\n      .then p_while condStmt, doStmt\n      .then (d) ->\n        expect(d[1]).toBe 16\n      .finally done\n      deferred.resolve [7, 0]\n      $rootScope.$apply()\n    ]\n\n\n\u305d\u306e\u4ed6\n\npromise \u306e\u81ea\u6162\u306f\u3001\u300c\u3044\u3064\u300d\u5024\u3092\u5305\u307f\u8fbc\u3080\u304b\u3092\u554f\u308f\u306a\u3044\u3068\u3044\u3046\u3068\u3053\u308d\u3060\u3002\n\np_if, p_while \u306f\u3001\u3053\u306e\u9244\u5247\u3092\u7834\u3089\u306a\u3044\u3088\u3046\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u3002\n\n\n\u305d\u306e\u8a3c\u62e0\u306b\u3001\u30c6\u30b9\u30c8\u3067\u306f\u3001 p_if, p_while \u3092\u8a2d\u7f6e\u3057\u7d42\u308f\u3063\u305f\u5f8c\u3067\u3001deferred.resolve \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3002\n\n\n\np_if \u3092\u5fdc\u7528\u3059\u308c\u3070 p_switch, p_unless \u306a\u3069\u3082\u66f8\u3051\u305d\u3046\u3002\n\np_while \u3092\u9014\u4e2d\u3067\u629c\u3051\u308b p_break \u3082\u5b9f\u88c5\u3057\u305f\u3044\u3002\n\u30a8\u30e9\u30fc\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u672a\u5b9f\u88c5\u3002\u305f\u3060 promise \u306b\u306f\u5927\u57df\u8131\u51fa\u6a5f\u69cb\u3082\u5099\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u306f\u7121\u3044\u3068\u601d\u308f\u308c\u308b\u3002\n\n\u307e\u3041\u305d\u306e\u3046\u3061\u3084\u308a\u307e\u3059\u3002\n\u6628\u65e5\u306f\u3081\u3061\u3083\u304f\u3061\u3083\u7720\u3044\u4e2d\u66f8\u3044\u305f\u306e\u3067\u3068\u3066\u3082\u5fae\u5999\u306a\u306e\u304c\u51fa\u6765\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u66f8\u304d\u76f4\u3057\u307e\u3059\u3002\n\n# \u9806\u6b21\n\u3053\u308c\u306f\u6628\u65e5\u3068\u540c\u3058\u3002\n\n```coffeescript\npromise\n.then f\n.then g\n.then h\n# ...\n```\n\n# \u5206\u5c90\uff1a `p_if`\n## \u5f79\u5272\n`p_if` \u306f\u3001\u76f4\u524d\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u53d7\u3051\u3066\u3001\u7d9a\u304f\u51e6\u7406\u3092\u5206\u96e2\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\u3002\n\n## \u4ed5\u69d8\n`p_if` \u306e\u4ed5\u69d8\u306f\u6b21\u306e\u901a\u308a\u3067\u3042\u308b\n\n```\np_if: condStmt -> thenStmt -> elseStmt -> selectionStmt\ncondStmt: X -> Bool|P(Bool)\nthenStmt: X -> Y|P(Y)\nelseStmt: X -> Y|P(Y)\nselectionStmt: X -> P(Y)\n```\n\n- `p_if` \u306f 3 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\n    - condStmt \u306f\u3001X \u578b\u306e\u5024\u3092\u53d7\u3051\u3066\u3001\u771f\u507d\u5024\u3092\u8fd4\u3059\n    - thenStmt \u306f\u3001condStmt \u304c\u771f\u3092\u8fd4\u3057\u305f\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u308b\u3002X \u578b\u306e\u5024\u3092\u53d7\u3051\u3066\u3001Y \u578b\u306e\u5024\u3092\u8fd4\u3059\u3002\n    - elseStmt \u306f\u3001condStmt \u304c\u507d\u3092\u8fd4\u3057\u305f\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u308b\u3002\n- `p_if` \u306f 1 \u3064\u306e\u95a2\u6570\u3092\u8fd4\u3059\n    - selectionStmt \u306f\u3001condStmt, thenStmt, elseStmt \u3092\u3044\u3044\u611f\u3058\u306b\u7d44\u307f\u5408\u308f\u305b\u305f \u95a2\u6570\u3092\u8fd4\u3059\u3002\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u6b21\u306e\u3088\u3046\u306a\u8a18\u8ff0\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\n```coffeescript\npromise\n.then stmt1\n.then stmt2\n.then p_if condStmt, thenStmt, elseStmt\n.then stmt3\n.then stmt4\n# ...\n```\n\n## \u5b9f\u88c5\n\n```coffeescript\nangular.module(\"structuredProgramming\").factory \"p_if\", [\"$q\", ($q) ->\n  return (condStmt, thenStmt, elseStmt) ->\n    return (x) ->\n      return $q.when condStmt x\n      .then (b) ->\n        return if b then thenStmt x else elseStmt x\n]\n```\n\n```coffeescript\n# test\ndescribe \"test for p_if\", ->\n  condStmt = (n) -> n % 2\n  thenStmt = (n) -> n * 3 + 1\n  elseStmt = (n) -> n / 2\n\n  it \"p_if true\", (done) ->\n    inject [\"$rootScope\", \"$q\", \"p_if\", ($rootScope, $q, p_if) ->\n      deferred = $q.defer()\n      deferred.promise\n      .then p_if condStmt, thenStmt, elseStmt\n      .then (n) ->\n        expect(n).toBe 16\n      .finally done\n      deferred.resolve 5\n      $rootScope.$apply()\n    ]\n  it \"p_if false\", (done) ->\n    inject [\"$rootScope\", \"$q\", \"p_if\", ($rootScope, $q, p_if) ->\n      deferred = $q.defer()\n      deferred.promise\n      .then p_if condStmt, thenStmt, elseStmt\n      .then (n) ->\n        expect(n).toBe 3\n      .finally done\n      deferred.resolve 6\n      $rootScope.$apply()\n    ]\n```\n\n# \u53cd\u5fa9\uff1a `p_while`\n## \u5f79\u5272\n`p_while` \u306f\u76f4\u524d\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u53d7\u3051\u3066\u3001\u51e6\u7406\u3092\u53cd\u5fa9\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\n\n## \u4ed5\u69d8\n```\np_while: condStmt -> doStmt -> iterationStmt\ncondStmt: X -> Bool|P(Bool)\ndoStmt: X -> X|P(X)\niterationStmt: X -> P(X)\n```\n\n`doStmt` \u304c `X -> Y|P(Y)` \u3067\u306a\u3044\u306e\u306f\u3001doStmt \u306e\u8fd4\u308a\u5024\u3092\u518d\u3073 condStmt \u3067\u8a55\u4fa1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3089\u3060\u3002\n\n## \u5b9f\u88c5\n```coffeescript\nangular.module(\"structuredProgramming\").factory \"p_while\", [\"$q\", ($q) ->\n  return (condStmt, doStmt) ->\n    iterStmt = (x) ->\n      return $q.when condStmt x\n      .then (b) ->\n        if b\n          return doStmt x\n          .then iterStmt\n        else\n          return x\n    return iterStmt\n```\n\n```coffeescript\n# test\ndescribe \"test for p_while\", ->\n  ifCondStmt = (d) -> d[0] % 2\n  ifThenStmt = (d) -> [d[0] * 3 + 1, d[1] + 1]\n  ifElseStmt = (d) -> [d[0] / 2, d[1] + 1]\n  condStmt = (d) -> d[0] > 1\n  it \"p_while\", (done) ->\n    inject [\"$rootScope\", \"$q\", \"p_while\", \"p_if\", ($rootScope, $q, p_while, p_if) ->\n      doStmt = p_if ifCondStmt, ifThenStmt, ifElseStmt\n      deferred = $q.defer()\n      deferred.promise\n      .then p_while condStmt, doStmt\n      .then (d) ->\n        expect(d[1]).toBe 16\n      .finally done\n      deferred.resolve [7, 0]\n      $rootScope.$apply()\n    ]\n```\n\n# \u305d\u306e\u4ed6\n- promise \u306e\u81ea\u6162\u306f\u3001\u300c\u3044\u3064\u300d\u5024\u3092\u5305\u307f\u8fbc\u3080\u304b\u3092\u554f\u308f\u306a\u3044\u3068\u3044\u3046\u3068\u3053\u308d\u3060\u3002\n- `p_if`, `p_while` \u306f\u3001\u3053\u306e\u9244\u5247\u3092\u7834\u3089\u306a\u3044\u3088\u3046\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u3002\n    - \u305d\u306e\u8a3c\u62e0\u306b\u3001\u30c6\u30b9\u30c8\u3067\u306f\u3001 `p_if`, `p_while` \u3092\u8a2d\u7f6e\u3057\u7d42\u308f\u3063\u305f\u5f8c\u3067\u3001`deferred.resolve` \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3002\n- `p_if` \u3092\u5fdc\u7528\u3059\u308c\u3070 `p_switch`, `p_unless` \u306a\u3069\u3082\u66f8\u3051\u305d\u3046\u3002\n- `p_while` \u3092\u9014\u4e2d\u3067\u629c\u3051\u308b `p_break` \u3082\u5b9f\u88c5\u3057\u305f\u3044\u3002\n- \u30a8\u30e9\u30fc\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u672a\u5b9f\u88c5\u3002\u305f\u3060 promise \u306b\u306f\u5927\u57df\u8131\u51fa\u6a5f\u69cb\u3082\u5099\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u306f\u7121\u3044\u3068\u601d\u308f\u308c\u308b\u3002\n\n\u307e\u3041\u305d\u306e\u3046\u3061\u3084\u308a\u307e\u3059\u3002\n"}