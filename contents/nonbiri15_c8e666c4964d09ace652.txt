{"context": " More than 1 year has passed since last update.py_face_detection.markdown\u3092\u5143\u306b\n\u300cOpenCV-Python Tutorials\u300d \u548c\u8a33\u306e\u4e2d\u306e\nFace Detection using Haar Cascades\n\u306e\u8a33\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u539f\u6587\u306e\u82f1\u8a9e\u306e\u5f8c\u306b\u3001\u548c\u8a33\u3092\u8a18\u8f09\u3057\u307e\u3057\u305f\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u8208\u5473\u3092\u3082\u3063\u3066\u3044\u305f\u3060\u304f\u306e\u306b\u5f79\u7acb\u3066\u3070\u5e78\u3044\u3067\u3059\u3002\n\nFace Detection using Haar Cascades {#tutorial_py_face_detection}\n\nHaar Cascades\u3092\u7528\u3044\u305f\u9854\u691c\u51fa\n\nGoal\nIn this session,\n\n  We will see the basics of face detection using Haar Feature-based Cascade Classifiers\n  We will extend the same for eye detection etc.\n\n\u3053\u306e\u7bc0\u3067\u306f,\n\n Haar \u7279\u5fb4\u91cf\u306b\u3082\u3068\u3065\u304fCascade \u8b58\u5225\u5668\u3092\u7528\u3044\u305f\u9854\u691c\u51fa\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3059\u3002\n \u305d\u308c\u3092\u62e1\u5f35\u3057\u3066\u76ee\u691c\u51fa\u306a\u3069\u306b\u7528\u3044\u307e\u3059\u3002\n\n\nBasics\nObject Detection using Haar feature-based cascade classifiers is an effective object detection\nmethod proposed by Paul Viola and Michael Jones in their paper, \"Rapid Object Detection using a\nBoosted Cascade of Simple Features\" in 2001. It is a machine learning based approach where a cascade\nfunction is trained from a lot of positive and negative images. It is then used to detect objects in\nother images.\nHaar \u7279\u5fb4\u91cf\u306b\u3082\u3068\u3065\u304fCascade \u8b58\u5225\u5668\u3092\u7528\u3044\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u691c\u51fa\u306f\u3001\u52b9\u7387\u7684\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u691c\u51fa\u65b9\u6cd5\u3067\u3001 Paul Viola \u3068 Michael Jones\u306b\u3088\u3063\u3066\"Rapid Object Detection using a\nBoosted Cascade of Simple Features\" (2001)\u306e\u8ad6\u6587\u306e\u4e2d\u3067\u63d0\u6848\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u624b\u6cd5\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u306b\u57fa\u3065\u304f\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u3042\u308a\u3001\u305d\u306e\u4e2d\u3067\u4f7f\u308f\u308c\u308b\u5404\u3005\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u8b58\u5225\u5668\u306f\u305f\u304f\u3055\u3093\u306e\u30dd\u30b8\u30c6\u30a3\u30d6\u753b\u50cf\u3068\u30cd\u30ac\u30c6\u30a3\u30d6\u753b\u50cf\u304b\u3089\u8a13\u7df4\u3055\u308c\u307e\u3059\u3002\u8a13\u7df4\u306e\u5f8c\u306b\u3001\u4ed6\u306e\u753b\u50cf\u306e\u4e2d\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u691c\u51fa\u3059\u308b\u306e\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\nHere we will work with face detection. Initially, the algorithm needs a lot of positive images\n(images of faces) and negative images (images without faces) to train the classifier. Then we need\nto extract features from it. For this, haar features shown in below image are used. They are just\nlike our convolutional kernel. Each feature is a single value obtained by subtracting sum of pixels\nunder white rectangle from sum of pixels under black rectangle.\n\n\u3055\u3042\u3001\u9854\u691c\u51fa\u306b\u3064\u3044\u3066\u59cb\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u305f\u304f\u3055\u3093\u306e\u30dd\u30b8\u30c6\u30a3\u30d6\u753b\u50cf\u7fa4(\u9854\u753b\u50cf\u7fa4)\u3068\u30cd\u30ac\u30c6\u30a3\u30d6\u753b\u50cf\u7fa4(\u9854\u306e\u306a\u3044\u753b\u50cf\u7fa4)\u3092\u8b58\u5225\u5668\u3092\u8a13\u7df4\u3059\u308b\u306e\u306b\u7528\u3044\u307e\u3059\u3002\u6b21\u306b\u3001\u753b\u50cf\u304b\u3089\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u306b\u3001\u4e0b\u306e\u56f3\u306b\u793a\u3059Haar\u7279\u5fb4\u91cf\u304c\u7528\u3044\u3089\u308c\u307e\u3059\u3002Haar\u7279\u5fb4\u91cf\u306f\u3001\u7573\u307f\u8fbc\u307f\u30ab\u30fc\u30cd\u30eb\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u306f\u5358\u4e00\u306e\u6570\u5024\u3067\u3042\u308a\u3001\u9ed2\u306e\u77e9\u5f62\u306e\u4f4d\u7f6e\u306e\u753b\u7d20\u306e\u8f1d\u5ea6\u306e\u5408\u8a08\u304b\u3089\u767d\u306e\u77e9\u5f62\u306e\u4f4d\u7f6e\u306e\u753b\u7d20\u306e\u8f1d\u5ea6\u306e\u5408\u8a08\u3092\u5dee\u3057\u5f15\u3044\u305f\u3082\u306e\u3067\u3059\u3002\nNow all possible sizes and locations of each kernel is used to calculate plenty of features. (Just\nimagine how much computation it needs? Even a 24x24 window results over 160000 features). For each\nfeature calculation, we need to find sum of pixels under white and black rectangles. To solve this,\nthey introduced the integral images. It simplifies calculation of sum of pixels, how large may be\nthe number of pixels, to an operation involving just four pixels. Nice, isn't it? It makes things\nsuper-fast.\n\u3053\u306e\u3068\u304d\u3001\u305d\u308c\u305e\u308c\u306e\u30ab\u30fc\u30cd\u30eb\u306e\u3068\u308a\u3046\u308b\u5927\u304d\u3055\u3068\u4f4d\u7f6e\u306e\u5168\u3066\u304c\u3001\u305f\u304f\u3055\u3093\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\n(\u3069\u308c\u304f\u3089\u3044\u306e\u6570\u306e\u8a08\u7b97\u304c\u5fc5\u8981\u306a\u306e\u304b\u60f3\u50cf\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u300224x24\u753b\u7d20\u306e\u7a93\u3067\u3055\u3048\u300116000\u4ee5\u4e0a\u306e\u7279\u5fb4\u91cf\u306b\u306a\u308a\u307e\u3059\u3002) \u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u5f7c\u3089\u306f\u7a4d\u5206\u753b\u50cf\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\u7a4d\u5206\u753b\u50cf\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u753b\u7d20\u5024\u306e\u5408\u8a08\u306e\u8a08\u7b97\u3092\u7c21\u5358\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u753b\u7d20\u306e\u6570\u304c\u3069\u3093\u306a\u306b\u591a\u304f\u3066\u3082\u3001(\u7a4d\u5206\u753b\u50cf\u306e)\uff14\u3064\u306e\u753b\u7d20\u306e\u5024\u3092\u7528\u3044\u308b\u6f14\u7b97\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\u7d20\u6575\u3067\u3057\u3087\u3046\u3002\u7a4d\u5206\u753b\u50cf\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u3068\u3063\u3066\u3082\u901f\u304f\u3057\u3066\u3044\u307e\u3059\u3002\nBut among all these features we calculated, most of them are irrelevant. For example, consider the\nimage below. Top row shows two good features. The first feature selected seems to focus on the\nproperty that the region of the eyes is often darker than the region of the nose and cheeks. The\nsecond feature selected relies on the property that the eyes are darker than the bridge of the nose.\nBut the same windows applying on cheeks or any other place is irrelevant. So how do we select the\nbest features out of 160000+ features? It is achieved by Adaboost.\n\n\u3057\u304b\u3057\u3001\u8a08\u7b97\u3057\u305f\u3053\u308c\u3089\u306e\u7279\u5fb4\u91cf\u306e\u5927\u534a\u306f\u3001(\u9854\u304b\u3069\u3046\u304b\u306e\u8b58\u5225\u306b\u306f)\u7121\u95a2\u4fc2\u3067\u3059\u3002\u4f8b\u3068\u3057\u3066\u4e0b\u306e\u56f3\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\u30c8\u30c3\u30d7\u306e\u884c\u306b\uff12\u3064\u306e\u3088\u3044\u7279\u5fb4\u91cf\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306e\u9078\u3070\u308c\u305f\u7279\u5fb4\u91cf\u306f\u3001\u76ee\u306e\u9818\u57df\u306f\u3001\u9f3b\u3068\u982c\u306e\u9818\u57df\u3088\u308a\u3082\u6697\u304f\u306a\u308a\u304c\u3061\u3067\u3042\u308b\u3068\u3044\u3046\u7279\u6027\u306b\u7740\u76ee\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u30022\u756a\u76ee\u306b\u9078\u3070\u308c\u305f\u7279\u5fb4\u91cf\u306f\u4e21\u76ee\u306e\u9818\u57df\u306f\u9f3b\u7b4b\u3088\u308a\u3082\u6697\u3044\u3068\u3044\u3046\u7279\u6027\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u3067\u3082\u3001\u540c\u3058\u7a93\u3067\u3042\u3063\u3066\u3082\u3001\u982c\u3084\u5225\u306e\u5834\u6240\u306b\u7528\u3044\u3089\u308c\u305f\u3082\u306e\u306f\u3001(\u9854\u304b\u3069\u3046\u304b\u306e\u8b58\u5225\u306b\u306f)\u7121\u95a2\u4fc2\u3067\u3059\u3002\u305d\u308c\u3067\u306f\u3001\u3069\u3046\u3084\u3063\u306616000\u4ee5\u4e0a\u306e\u7279\u5fb4\u91cf\u304b\u3089\u6700\u9069\u306a\u8907\u6570\u306e\u7279\u5fb4\u91cf\u3092\u9078\u629e\u3057\u305f\u3089\u3044\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3000\u305d\u308c\u306fAdaBoost\u306b\u3088\u3063\u3066\u9054\u6210\u3055\u308c\u307e\u3057\u305f\u3002\nFor this, we apply each and every feature on all the training images. For each feature, it finds the\nbest threshold which will classify the faces to positive and negative. But obviously, there will be\nerrors or misclassifications. We select the features with minimum error rate, which means they are\nthe features that best classifies the face and non-face images. (The process is not as simple as\nthis. Each image is given an equal weight in the beginning. After each classification, weights of\nmisclassified images are increased. Then again same process is done. New error rates are calculated.\nAlso new weights. The process is continued until required accuracy or error rate is achieved or\nrequired number of features are found).\n\u3053\u308c\u306b\u3088\u308a\u3001\u5168\u3066\u306e\u8a13\u7df4\u753b\u50cf\u306b\u5bfe\u3057\u3066\u5404\u3005\u306e\u7279\u5fb4\u91cf\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u3067\u3001\u9854\u5019\u88dc\u3092\u30dd\u30b8\u30c6\u30a3\u30d6\u3068\u30cd\u30ac\u30c6\u30a3\u30d6\u306b\u5206\u985e\u3059\u308b\u6700\u5584\u306e\u95be\u5024\u3092\u898b\u3064\u3051\u307e\u3059\u3002\u3057\u304b\u3057\u660e\u3089\u304b\u306a\u3088\u3046\u306b\u3001\u30a8\u30e9\u30fc\u3001\u8aa4\u5206\u985e\u304c\u751f\u3058\u307e\u3059\u3002\u6700\u5c0f\u306e\u30a8\u30e9\u30fc\u7387\u3068\u306a\u308b\u7279\u5fb4\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u9854\u3068\u975e\u9854\u753b\u50cf\u3092\u6700\u3082\u3088\u304f\u5206\u985e\u3059\u308b\u7279\u5fb4\u91cf\u3067\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002(\u5b9f\u969b\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3053\u3053\u306b\u66f8\u3044\u305f\u307b\u3069\u7c21\u5358\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6700\u521d\u306f\u5168\u3066\u306e\u753b\u50cf\u304c\u540c\u3058\u91cd\u307f\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5206\u985e\u306e\u5f8c\u3067\u3001\u8aa4\u5206\u985e\u753b\u50cf\u306e\u91cd\u307f\u304c\u5897\u3084\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u8981\u6c42\u7cbe\u5ea6\u304b\u30a8\u30e9\u30fc\u7387\u304c\u9054\u6210\u3055\u308c\u308b\u304b\u3001\u8981\u6c42\u5024\u306e\u6570\u306e\u7279\u5fb4\u91cf\u304c\u898b\u3064\u3051\u3089\u308c\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\u3002)\nFinal classifier is a weighted sum of these weak classifiers. It is called weak because it alone\ncan't classify the image, but together with others forms a strong classifier. The paper says even\n200 features provide detection with 95% accuracy. Their final setup had around 6000 features.\n(Imagine a reduction from 160000+ features to 6000 features. That is a big gain).\n\u6700\u5f8c\u306e\u8b58\u5225\u5668\u304c\u3053\u308c\u3089\u306e\u5f31\u8b58\u5225\u5668\u306e\u91cd\u307f\u4ed8\u3051\u3068\u3057\u3066\u5f97\u3089\u308c\u307e\u3059\u3002\uff08\u5f31\u8b58\u5225\u5668\u306f\uff09\u305d\u308c\u5358\u72ec\u3067\u306f\u753b\u50cf\u3092\u5206\u985e\u3067\u304d\u306a\u3044\u306e\u3067\u5f31\u8b58\u5225\u5668\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u8907\u6570\u306e\u5f31\u8b58\u5225\u5668\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u5f37\u8b58\u5225\u5668\u3092\u5f62\u6210\u3057\u307e\u3059\u3002\u305d\u306e\u8ad6\u6587\u306b\u3088\u308c\u3070\u3001200\u500b\u306e\u7279\u5fb4\u91cf\u3067\u3055\u3048\u300195%\u7cbe\u5ea6\u306e\u691c\u51fa\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u5f7c\u3089\u306e\u6700\u5f8c\u306e\u69cb\u6210\u3067\u306f\u3001\u7d046000\u500b\u306e\u7279\u5fb4\u91cf\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002(160000\u4ee5\u4e0a\u306e\u7279\u5fb4\u304b\u30896000\u306e\u7279\u5fb4\u306b\u524a\u6e1b\u3055\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u3092\u8003\u3048\u306b\u5165\u308c\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u305a\u3044\u3076\u3093\u6e1b\u3063\u305f\u3067\u3057\u3087\u3046\u3002)\nSo now you take an image. Take each 24x24 window. Apply 6000 features to it. Check if it is face or\nnot. Wow.. Wow.. Isn't it a little inefficient and time consuming? Yes, it is. Authors have a good\nsolution for that.\n\u305d\u308c\u3067\u4eca\uff11\u679a\u306e\u753b\u50cf\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u5404\u3005\u306e24x24\u753b\u7d20\u306e\u7a93\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u7a93\u306b6000\u500b\u306e\u7279\u5fb4\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u305d\u308c\u304c\u9854\u304b\u975e\u9854\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\u3042\u3042\u3001\u3061\u3087\u3063\u3068\u3070\u304b\u3057\u975e\u52b9\u7387\u3067\u6642\u9593\u3092\u7121\u99c4\u306b\u3057\u3066\u3044\u307e\u305b\u3093\u304b\uff1f\u305d\u3046\u3067\u3059\u3002\u8457\u8005\u305f\u3061\u306f\u305d\u308c\u306b\u3088\u3044\u89e3\u6c7a\u6cd5\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\nIn an image, most of the image region is non-face region. So it is a better idea to have a simple\nmethod to check if a window is not a face region. If it is not, discard it in a single shot. Don't\nprocess it again. Instead focus on region where there can be a face. This way, we can find more time\nto check a possible face region.\n1\u679a\u306e\u753b\u50cf\u3067\u306f\u3001\u753b\u50cf\u306e\u5927\u90e8\u5206\u306e\u9818\u57df\u306f\u975e\u9854\u306e\u9818\u57df\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u7a93\u9818\u57df\u304c\u9854\u9818\u57df\u3067\u306a\u3044\u3053\u3068\u3092\u78ba\u304b\u3081\u308b\u7c21\u5358\u306a\u65b9\u6cd5\u3092\u6301\u3064\u3068\u3044\u3046\u306e\u306f\u3088\u3044\u8003\u3048\u3067\u3059\u3002\u3082\u3057\u7a93\u9818\u57df\u304c\u9854\u9818\u57df\u3067\u306a\u3051\u308c\u3070\u3001\u3059\u3050\u3055\u307e\u306b\u6368\u3066\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3059\u3002\u305d\u308c\u306b\u3064\u3044\u3066\u518d\u5ea6\uff08\u5f37\u5224\u5225\u5668\u3067\uff09\u51e6\u7406\u3057\u307e\u305b\u3093\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001\u9854\u304b\u3082\u3057\u308c\u306a\u3044\u9818\u57df\u306b\u7740\u76ee\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3001\u3042\u308a\u3046\u308b\u9854\u9818\u57df\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306e\u306b\u3082\u3063\u3068\u6642\u9593\u3092\u3055\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nFor this they introduced the concept of Cascade of Classifiers. Instead of applying all the 6000\nfeatures on a window, group the features into different stages of classifiers and apply one-by-one.\n(Normally first few stages will contain very less number of features). If a window fails the first\nstage, discard it. We don't consider remaining features on it. If it passes, apply the second stage\nof features and continue the process. The window which passes all stages is a face region. How is\nthe plan !!!\n\u3053\u308c\u306b\u3064\u3044\u3066\u5f7c\u3089\u306f\u3001\u30ab\u30b9\u30b1\u30fc\u30c9\u578b\u8b58\u5225\u5668\u3068\u3044\u3046\u6982\u5ff5\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\uff11\u3064\u306e\u7a93\u9818\u57df\u306b6000\u500b\u306e\u7279\u5fb4\u306e\u5168\u3066\u3092\u9069\u7528\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u4e00\u9023\u306e\u7279\u5fb4\u3092\u7570\u306a\u308b\u30b9\u30c6\u30fc\u30b8\u306b\u5c5e\u3059\u308b\u8b58\u5225\u5668\u7fa4\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3001\uff11\u3064\u305a\u3064\u9069\u7528\u3059\u308b\u3002(\u901a\u5e38 \u6700\u521d\u306e\u6570\u30b9\u30c6\u30fc\u30b8\u3067\u306f\u3001\u3068\u3066\u3082\u5c11\u306a\u3044\u6570\u306e\u7279\u5fb4\u3092\u542b\u3093\u3067\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002)\u3000\n\u3042\u308b\u7a93\u9818\u57df\u3067\u6700\u521d\u306e\u30b9\u30c6\u30fc\u30b8\u3067\u5931\u6557\u3057\u305f\u3089\u3002\u305d\u306e\u7a93\u9818\u57df\u3092\u6368\u3066\u307e\u3059\u3002\u305d\u306e\u9818\u57df\u306b\u6b8b\u308a\u306e\u7279\u5fb4\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u3092\u3057\u307e\u305b\u3093\u3002\u3082\u3057\u6700\u521d\u306e\u30b9\u30c6\u30fc\u30b8\u3067\u901a\u904e\u3057\u305f\u3089\u30012\u756a\u76ee\u306e\u7279\u5fb4\u91cf\u7fa4\u3092\u9069\u7528\u3057\u3001\u51e6\u7406\u3092\u7d99\u7d9a\u3057\u307e\u3059\u3002\u5168\u3066\u306e\u30b9\u30c6\u30fc\u30b8\u3067\u901a\u904e\u3057\u305f\u7a93\u9818\u57df\u306f\u9854\u9818\u57df\u3067\u3059\u3002\nAuthors' detector had 6000+ features with 38 stages with 1, 10, 25, 25 and 50 features in first five\nstages. (Two features in the above image is actually obtained as the best two features from\nAdaboost). According to authors, on an average, 10 features out of 6000+ are evaluated per\nsub-window.\n\u8457\u8005\u306b\u3088\u308b\u691c\u51fa\u5668\u306f\u30016000\u4ee5\u4e0a\u306e\u7279\u5fb4\u3092\u3082\u306438\u30b9\u30c6\u30fc\u30b8\u304b\u3089\u306a\u308b\u8b58\u5225\u5668\u3067\u3001\u6700\u521d\u306e\uff15\u30b9\u30c6\u30fc\u30b8\u3067\u306f\u30011, 10, 25, 25, 50\u500b\u306e\u7279\u5fb4\u3092\u6301\u3064\u3082\u306e\u3067\u3059\u3002(\u4e0a\u8a18\u306e\u56f3\u306b\u3042\u308b\uff12\u3064\u306e\u7279\u5fb4\u306f\u3001Adaboost\u306b\u3088\u3063\u3066\u6700\u5584\u306e2\u3064\u306e\u7279\u5fb4\u3068\u3057\u3066\u5b9f\u969b\u306b\u5f97\u3089\u308c\u305f\u3082\u306e\u3067\u3059\u3002)\u3000\u8457\u8005\u306b\u3088\u308c\u3070\u3001\u5e73\u5747\u3067\u306f\u3001\uff11\u3064\u306esub-window\u3042\u305f\u308a6000\u500b\u4ee5\u4e0a\u4e2d\u306e10\u500b\u306e\u7279\u5fb4\u304c\u8a55\u4fa1\u3055\u308c\u3066\u3044\u307e\u3059\u30fb\nSo this is a simple intuitive explanation of how Viola-Jones face detection works. Read paper for\nmore details or check out the references in Additional Resources section.\n\u3053\u308c\u304c\u3001Viola-Jones\u306e\u9854\u691c\u51fa\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304b\u306b\u3064\u3044\u3066\u306e\u7c21\u5358\u306a\u76f4\u611f\u7684\u306a\u8aac\u660e\u3067\u3059\u3002\u8a73\u7d30\u306f\u8ad6\u6587\u3092\u8aad\u3080\u306a\u308a\u3001Additional Resources\u306e\u7bc0\u306b\u793a\u3057\u3066\u3042\u308b\u53c2\u8003\u60c5\u5831\u306b\u3042\u305f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nHaar-cascade Detection in OpenCV\n\nOpenCV\u3067\u306eHaar-cascade \u691c\u51fa\nOpenCV comes with a trainer as well as detector. If you want to train your own classifier for any\nobject like car, planes etc. you can use OpenCV to create one. Its full details are given here:\nCascade Classifier Training.\nOpenCV\u306b\u306f\u691c\u51fa\u5668\u3068\u540c\u69d8\u306b\u8a13\u7df4\u5668\u304c\u3042\u308a\u307e\u3059\u3002\u3082\u3057\u3001\u81ea\u52d5\u8eca\u3001\u98db\u884c\u6a5f\u306a\u3069\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u305f\u3081\u306e\u81ea\u4f5c\u306e\u8b58\u5225\u5668\u3092\u8a13\u7df4(=\u5b66\u7fd2)\u3057\u305f\u3044\u306a\u3089\u3001\u305d\u306e\u305f\u3081\u306bOpenCV\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u8a73\u7d30\u306f\u3001\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\n\u30ab\u30b9\u30b1\u30fc\u30c9\u578b\u691c\u51fa\u5668\u306e\u5b66\u7fd2.\nHere we will deal with detection. OpenCV already contains many pre-trained classifiers for face,\neyes, smile etc. Those XML files are stored in opencv/data/haarcascades/ folder. Let's create face\nand eye detector with OpenCV.\n\u3053\u3053\u3067\u3001\u691c\u51fa\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002OpenCV\u306f\u9854\u691c\u51fa\u3001\u76ee\u691c\u51fa\u3001\u7b11\u9854\u691c\u51fa\u306a\u3069\u306e\u5b66\u7fd2\u6e08\u307f\u306e\u691c\u51fa\u5668\u3092\u65e2\u306b\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306eXML\u306fopencv/data/haarcascades/\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3057\u3066\u3042\u308a\u307e\u3059\u3002OpenCV\u306e\u9854\u3068\u76ee\u306e\u691c\u51fa\u5668\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nFirst we need to load the required XML classifiers. Then load our input image (or video) in\ngrayscale mode.\n\u307e\u305a\u3001\u6240\u5b9a\u306eXML\u8b58\u5225\u5668\u3092\u8aad\u307f\u53d6\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6b21\u306b\u5165\u529b\u753b\u50cf(\u3042\u308b\u3044\u306f\u52d5\u753b)\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u30e2\u30fc\u30c9\u3067\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\nimport numpy as np\nimport cv2\n\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')\n\nimg = cv2.imread('sachin.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nNow we find the faces in the image. If faces are found, it returns the positions of detected faces\nas Rect(x,y,w,h). Once we get these locations, we can create a ROI for the face and apply eye\ndetection on this ROI (since eyes are always on the face !!! ).\n\u3055\u3042\u3001\u753b\u50cf\u306e\u4e2d\u306e\u9854\u3092\u898b\u3064\u3051\u307e\u3059\u3002\u3082\u3057\u9854\u304c\u898b\u3064\u304b\u308c\u3070\u3001\u691c\u51fa\u3055\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u9854\u306e\u4f4d\u7f6e\u3092Rect(x,y,w,h)\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u4f4d\u7f6e\u304c\u898b\u3064\u304b\u308a\u3057\u3060\u3044\u3001\u9854\u306b\u3064\u3044\u3066\u306eROI\u3092\u8a2d\u5b9a\u3067\u304d\u3001\u3053\u306eROI\u306b\u76ee\u691c\u51fa\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002(\u76ee\u304c\u3042\u308b\u306e\u306f\u3044\u3064\u3060\u3063\u3066\u9854\u306e\u4e0a\u306a\u3093\u3060\u304b\u3089)\nfaces = face_cascade.detectMultiScale(gray, 1.3, 5)\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n    roi_gray = gray[y:y+h, x:x+w]\n    roi_color = img[y:y+h, x:x+w]\n    eyes = eye_cascade.detectMultiScale(roi_gray)\n    for (ex,ey,ew,eh) in eyes:\n        cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)\n\ncv2.imshow('img',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\nResult looks like below:\n\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nAdditional Resources\n-#  Video Lecture on Face Detection and Tracking\n2.  An interesting interview regarding Face Detection by Adam\n    Harvey\n\nExercises\npy_face_detection.markdown\u3092\u5143\u306b\n\u300cOpenCV-Python Tutorials\u300d [\u548c\u8a33](http://qiita.com/nonbiri15/items/7e9e0bce90f04f40dd57)\u306e\u4e2d\u306e\n[Face Detection using Haar Cascades]\n(http://docs.opencv.org/3.0-beta/doc/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html#face-detection)\n\u306e\u8a33\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u539f\u6587\u306e\u82f1\u8a9e\u306e\u5f8c\u306b\u3001\u548c\u8a33\u3092\u8a18\u8f09\u3057\u307e\u3057\u305f\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u8208\u5473\u3092\u3082\u3063\u3066\u3044\u305f\u3060\u304f\u306e\u306b\u5f79\u7acb\u3066\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\n\n---------------------------------------------------\n\n\nFace Detection using Haar Cascades {#tutorial_py_face_detection}\nHaar Cascades\u3092\u7528\u3044\u305f\u9854\u691c\u51fa\n==================================\n\nGoal\n----\n\nIn this session,\n\n-   We will see the basics of face detection using Haar Feature-based Cascade Classifiers\n-   We will extend the same for eye detection etc.\n\n\u3053\u306e\u7bc0\u3067\u306f,\n\n-  Haar \u7279\u5fb4\u91cf\u306b\u3082\u3068\u3065\u304fCascade \u8b58\u5225\u5668\u3092\u7528\u3044\u305f\u9854\u691c\u51fa\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3059\u3002\n-  \u305d\u308c\u3092\u62e1\u5f35\u3057\u3066\u76ee\u691c\u51fa\u306a\u3069\u306b\u7528\u3044\u307e\u3059\u3002\n\nBasics\n------\n\nObject Detection using Haar feature-based cascade classifiers is an effective object detection\nmethod proposed by Paul Viola and Michael Jones in their paper, \"Rapid Object Detection using a\nBoosted Cascade of Simple Features\" in 2001. It is a machine learning based approach where a cascade\nfunction is trained from a lot of positive and negative images. It is then used to detect objects in\nother images.\nHaar \u7279\u5fb4\u91cf\u306b\u3082\u3068\u3065\u304fCascade \u8b58\u5225\u5668\u3092\u7528\u3044\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u691c\u51fa\u306f\u3001\u52b9\u7387\u7684\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u691c\u51fa\u65b9\u6cd5\u3067\u3001 Paul Viola \u3068 Michael Jones\u306b\u3088\u3063\u3066\"Rapid Object Detection using a\nBoosted Cascade of Simple Features\" (2001)\u306e\u8ad6\u6587\u306e\u4e2d\u3067\u63d0\u6848\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u624b\u6cd5\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u306b\u57fa\u3065\u304f\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u3042\u308a\u3001\u305d\u306e\u4e2d\u3067\u4f7f\u308f\u308c\u308b\u5404\u3005\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u8b58\u5225\u5668\u306f\u305f\u304f\u3055\u3093\u306e\u30dd\u30b8\u30c6\u30a3\u30d6\u753b\u50cf\u3068\u30cd\u30ac\u30c6\u30a3\u30d6\u753b\u50cf\u304b\u3089\u8a13\u7df4\u3055\u308c\u307e\u3059\u3002\u8a13\u7df4\u306e\u5f8c\u306b\u3001\u4ed6\u306e\u753b\u50cf\u306e\u4e2d\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u691c\u51fa\u3059\u308b\u306e\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\n\n\nHere we will work with face detection. Initially, the algorithm needs a lot of positive images\n(images of faces) and negative images (images without faces) to train the classifier. Then we need\nto extract features from it. For this, haar features shown in below image are used. They are just\nlike our convolutional kernel. Each feature is a single value obtained by subtracting sum of pixels\nunder white rectangle from sum of pixels under black rectangle.\n\n![image](http://docs.opencv.org/3.0-beta/_images/haar_features.jpg)\n\n\n\u3055\u3042\u3001\u9854\u691c\u51fa\u306b\u3064\u3044\u3066\u59cb\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u305f\u304f\u3055\u3093\u306e\u30dd\u30b8\u30c6\u30a3\u30d6\u753b\u50cf\u7fa4(\u9854\u753b\u50cf\u7fa4)\u3068\u30cd\u30ac\u30c6\u30a3\u30d6\u753b\u50cf\u7fa4(\u9854\u306e\u306a\u3044\u753b\u50cf\u7fa4)\u3092\u8b58\u5225\u5668\u3092\u8a13\u7df4\u3059\u308b\u306e\u306b\u7528\u3044\u307e\u3059\u3002\u6b21\u306b\u3001\u753b\u50cf\u304b\u3089\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u306b\u3001\u4e0b\u306e\u56f3\u306b\u793a\u3059Haar\u7279\u5fb4\u91cf\u304c\u7528\u3044\u3089\u308c\u307e\u3059\u3002Haar\u7279\u5fb4\u91cf\u306f\u3001\u7573\u307f\u8fbc\u307f\u30ab\u30fc\u30cd\u30eb\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u306f\u5358\u4e00\u306e\u6570\u5024\u3067\u3042\u308a\u3001\u9ed2\u306e\u77e9\u5f62\u306e\u4f4d\u7f6e\u306e\u753b\u7d20\u306e\u8f1d\u5ea6\u306e\u5408\u8a08\u304b\u3089\u767d\u306e\u77e9\u5f62\u306e\u4f4d\u7f6e\u306e\u753b\u7d20\u306e\u8f1d\u5ea6\u306e\u5408\u8a08\u3092\u5dee\u3057\u5f15\u3044\u305f\u3082\u306e\u3067\u3059\u3002\n\n\nNow all possible sizes and locations of each kernel is used to calculate plenty of features. (Just\nimagine how much computation it needs? Even a 24x24 window results over 160000 features). For each\nfeature calculation, we need to find sum of pixels under white and black rectangles. To solve this,\nthey introduced the integral images. It simplifies calculation of sum of pixels, how large may be\nthe number of pixels, to an operation involving just four pixels. Nice, isn't it? It makes things\nsuper-fast.\n\n\u3053\u306e\u3068\u304d\u3001\u305d\u308c\u305e\u308c\u306e\u30ab\u30fc\u30cd\u30eb\u306e\u3068\u308a\u3046\u308b\u5927\u304d\u3055\u3068\u4f4d\u7f6e\u306e\u5168\u3066\u304c\u3001\u305f\u304f\u3055\u3093\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\n(\u3069\u308c\u304f\u3089\u3044\u306e\u6570\u306e\u8a08\u7b97\u304c\u5fc5\u8981\u306a\u306e\u304b\u60f3\u50cf\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u300224x24\u753b\u7d20\u306e\u7a93\u3067\u3055\u3048\u300116000\u4ee5\u4e0a\u306e\u7279\u5fb4\u91cf\u306b\u306a\u308a\u307e\u3059\u3002) \u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u5f7c\u3089\u306f\u7a4d\u5206\u753b\u50cf\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\u7a4d\u5206\u753b\u50cf\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u753b\u7d20\u5024\u306e\u5408\u8a08\u306e\u8a08\u7b97\u3092\u7c21\u5358\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u753b\u7d20\u306e\u6570\u304c\u3069\u3093\u306a\u306b\u591a\u304f\u3066\u3082\u3001(\u7a4d\u5206\u753b\u50cf\u306e)\uff14\u3064\u306e\u753b\u7d20\u306e\u5024\u3092\u7528\u3044\u308b\u6f14\u7b97\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\u7d20\u6575\u3067\u3057\u3087\u3046\u3002\u7a4d\u5206\u753b\u50cf\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u3068\u3063\u3066\u3082\u901f\u304f\u3057\u3066\u3044\u307e\u3059\u3002\n\nBut among all these features we calculated, most of them are irrelevant. For example, consider the\nimage below. Top row shows two good features. The first feature selected seems to focus on the\nproperty that the region of the eyes is often darker than the region of the nose and cheeks. The\nsecond feature selected relies on the property that the eyes are darker than the bridge of the nose.\nBut the same windows applying on cheeks or any other place is irrelevant. So how do we select the\nbest features out of 160000+ features? It is achieved by **Adaboost**.\n\n![image](http://docs.opencv.org/3.0-beta/_images/haar.png)\n\n\u3057\u304b\u3057\u3001\u8a08\u7b97\u3057\u305f\u3053\u308c\u3089\u306e\u7279\u5fb4\u91cf\u306e\u5927\u534a\u306f\u3001(\u9854\u304b\u3069\u3046\u304b\u306e\u8b58\u5225\u306b\u306f)\u7121\u95a2\u4fc2\u3067\u3059\u3002\u4f8b\u3068\u3057\u3066\u4e0b\u306e\u56f3\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\u30c8\u30c3\u30d7\u306e\u884c\u306b\uff12\u3064\u306e\u3088\u3044\u7279\u5fb4\u91cf\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306e\u9078\u3070\u308c\u305f\u7279\u5fb4\u91cf\u306f\u3001\u76ee\u306e\u9818\u57df\u306f\u3001\u9f3b\u3068\u982c\u306e\u9818\u57df\u3088\u308a\u3082\u6697\u304f\u306a\u308a\u304c\u3061\u3067\u3042\u308b\u3068\u3044\u3046\u7279\u6027\u306b\u7740\u76ee\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u30022\u756a\u76ee\u306b\u9078\u3070\u308c\u305f\u7279\u5fb4\u91cf\u306f\u4e21\u76ee\u306e\u9818\u57df\u306f\u9f3b\u7b4b\u3088\u308a\u3082\u6697\u3044\u3068\u3044\u3046\u7279\u6027\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u3067\u3082\u3001\u540c\u3058\u7a93\u3067\u3042\u3063\u3066\u3082\u3001\u982c\u3084\u5225\u306e\u5834\u6240\u306b\u7528\u3044\u3089\u308c\u305f\u3082\u306e\u306f\u3001(\u9854\u304b\u3069\u3046\u304b\u306e\u8b58\u5225\u306b\u306f)\u7121\u95a2\u4fc2\u3067\u3059\u3002\u305d\u308c\u3067\u306f\u3001\u3069\u3046\u3084\u3063\u306616000\u4ee5\u4e0a\u306e\u7279\u5fb4\u91cf\u304b\u3089\u6700\u9069\u306a\u8907\u6570\u306e\u7279\u5fb4\u91cf\u3092\u9078\u629e\u3057\u305f\u3089\u3044\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3000\u305d\u308c\u306f**AdaBoost**\u306b\u3088\u3063\u3066\u9054\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n\n\nFor this, we apply each and every feature on all the training images. For each feature, it finds the\nbest threshold which will classify the faces to positive and negative. But obviously, there will be\nerrors or misclassifications. We select the features with minimum error rate, which means they are\nthe features that best classifies the face and non-face images. (The process is not as simple as\nthis. Each image is given an equal weight in the beginning. After each classification, weights of\nmisclassified images are increased. Then again same process is done. New error rates are calculated.\nAlso new weights. The process is continued until required accuracy or error rate is achieved or\nrequired number of features are found).\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u5168\u3066\u306e\u8a13\u7df4\u753b\u50cf\u306b\u5bfe\u3057\u3066\u5404\u3005\u306e\u7279\u5fb4\u91cf\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u3067\u3001\u9854\u5019\u88dc\u3092\u30dd\u30b8\u30c6\u30a3\u30d6\u3068\u30cd\u30ac\u30c6\u30a3\u30d6\u306b\u5206\u985e\u3059\u308b\u6700\u5584\u306e\u95be\u5024\u3092\u898b\u3064\u3051\u307e\u3059\u3002\u3057\u304b\u3057\u660e\u3089\u304b\u306a\u3088\u3046\u306b\u3001\u30a8\u30e9\u30fc\u3001\u8aa4\u5206\u985e\u304c\u751f\u3058\u307e\u3059\u3002\u6700\u5c0f\u306e\u30a8\u30e9\u30fc\u7387\u3068\u306a\u308b\u7279\u5fb4\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u9854\u3068\u975e\u9854\u753b\u50cf\u3092\u6700\u3082\u3088\u304f\u5206\u985e\u3059\u308b\u7279\u5fb4\u91cf\u3067\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002(\u5b9f\u969b\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3053\u3053\u306b\u66f8\u3044\u305f\u307b\u3069\u7c21\u5358\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6700\u521d\u306f\u5168\u3066\u306e\u753b\u50cf\u304c\u540c\u3058\u91cd\u307f\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5206\u985e\u306e\u5f8c\u3067\u3001\u8aa4\u5206\u985e\u753b\u50cf\u306e\u91cd\u307f\u304c\u5897\u3084\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u8981\u6c42\u7cbe\u5ea6\u304b\u30a8\u30e9\u30fc\u7387\u304c\u9054\u6210\u3055\u308c\u308b\u304b\u3001\u8981\u6c42\u5024\u306e\u6570\u306e\u7279\u5fb4\u91cf\u304c\u898b\u3064\u3051\u3089\u308c\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\u3002)\n\n\nFinal classifier is a weighted sum of these weak classifiers. It is called weak because it alone\ncan't classify the image, but together with others forms a strong classifier. The paper says even\n200 features provide detection with 95% accuracy. Their final setup had around 6000 features.\n(Imagine a reduction from 160000+ features to 6000 features. That is a big gain).\n\n\n\u6700\u5f8c\u306e\u8b58\u5225\u5668\u304c\u3053\u308c\u3089\u306e\u5f31\u8b58\u5225\u5668\u306e\u91cd\u307f\u4ed8\u3051\u3068\u3057\u3066\u5f97\u3089\u308c\u307e\u3059\u3002\uff08\u5f31\u8b58\u5225\u5668\u306f\uff09\u305d\u308c\u5358\u72ec\u3067\u306f\u753b\u50cf\u3092\u5206\u985e\u3067\u304d\u306a\u3044\u306e\u3067\u5f31\u8b58\u5225\u5668\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u8907\u6570\u306e\u5f31\u8b58\u5225\u5668\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u5f37\u8b58\u5225\u5668\u3092\u5f62\u6210\u3057\u307e\u3059\u3002\u305d\u306e\u8ad6\u6587\u306b\u3088\u308c\u3070\u3001200\u500b\u306e\u7279\u5fb4\u91cf\u3067\u3055\u3048\u300195%\u7cbe\u5ea6\u306e\u691c\u51fa\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u5f7c\u3089\u306e\u6700\u5f8c\u306e\u69cb\u6210\u3067\u306f\u3001\u7d046000\u500b\u306e\u7279\u5fb4\u91cf\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002(160000\u4ee5\u4e0a\u306e\u7279\u5fb4\u304b\u30896000\u306e\u7279\u5fb4\u306b\u524a\u6e1b\u3055\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u3092\u8003\u3048\u306b\u5165\u308c\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u305a\u3044\u3076\u3093\u6e1b\u3063\u305f\u3067\u3057\u3087\u3046\u3002)\n\n\nSo now you take an image. Take each 24x24 window. Apply 6000 features to it. Check if it is face or\nnot. Wow.. Wow.. Isn't it a little inefficient and time consuming? Yes, it is. Authors have a good\nsolution for that.\n\n\u305d\u308c\u3067\u4eca\uff11\u679a\u306e\u753b\u50cf\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u5404\u3005\u306e24x24\u753b\u7d20\u306e\u7a93\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u7a93\u306b6000\u500b\u306e\u7279\u5fb4\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u305d\u308c\u304c\u9854\u304b\u975e\u9854\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\u3042\u3042\u3001\u3061\u3087\u3063\u3068\u3070\u304b\u3057\u975e\u52b9\u7387\u3067\u6642\u9593\u3092\u7121\u99c4\u306b\u3057\u3066\u3044\u307e\u305b\u3093\u304b\uff1f\u305d\u3046\u3067\u3059\u3002\u8457\u8005\u305f\u3061\u306f\u305d\u308c\u306b\u3088\u3044\u89e3\u6c7a\u6cd5\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\nIn an image, most of the image region is non-face region. So it is a better idea to have a simple\nmethod to check if a window is not a face region. If it is not, discard it in a single shot. Don't\nprocess it again. Instead focus on region where there can be a face. This way, we can find more time\nto check a possible face region.\n\n1\u679a\u306e\u753b\u50cf\u3067\u306f\u3001\u753b\u50cf\u306e\u5927\u90e8\u5206\u306e\u9818\u57df\u306f\u975e\u9854\u306e\u9818\u57df\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u7a93\u9818\u57df\u304c\u9854\u9818\u57df\u3067\u306a\u3044\u3053\u3068\u3092\u78ba\u304b\u3081\u308b\u7c21\u5358\u306a\u65b9\u6cd5\u3092\u6301\u3064\u3068\u3044\u3046\u306e\u306f\u3088\u3044\u8003\u3048\u3067\u3059\u3002\u3082\u3057\u7a93\u9818\u57df\u304c\u9854\u9818\u57df\u3067\u306a\u3051\u308c\u3070\u3001\u3059\u3050\u3055\u307e\u306b\u6368\u3066\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3059\u3002\u305d\u308c\u306b\u3064\u3044\u3066\u518d\u5ea6\uff08\u5f37\u5224\u5225\u5668\u3067\uff09\u51e6\u7406\u3057\u307e\u305b\u3093\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001\u9854\u304b\u3082\u3057\u308c\u306a\u3044\u9818\u57df\u306b\u7740\u76ee\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3001\u3042\u308a\u3046\u308b\u9854\u9818\u57df\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306e\u306b\u3082\u3063\u3068\u6642\u9593\u3092\u3055\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\nFor this they introduced the concept of **Cascade of Classifiers**. Instead of applying all the 6000\nfeatures on a window, group the features into different stages of classifiers and apply one-by-one.\n(Normally first few stages will contain very less number of features). If a window fails the first\nstage, discard it. We don't consider remaining features on it. If it passes, apply the second stage\nof features and continue the process. The window which passes all stages is a face region. How is\nthe plan !!!\n\n\u3053\u308c\u306b\u3064\u3044\u3066\u5f7c\u3089\u306f\u3001**\u30ab\u30b9\u30b1\u30fc\u30c9\u578b\u8b58\u5225\u5668**\u3068\u3044\u3046\u6982\u5ff5\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\uff11\u3064\u306e\u7a93\u9818\u57df\u306b6000\u500b\u306e\u7279\u5fb4\u306e\u5168\u3066\u3092\u9069\u7528\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u4e00\u9023\u306e\u7279\u5fb4\u3092\u7570\u306a\u308b\u30b9\u30c6\u30fc\u30b8\u306b\u5c5e\u3059\u308b\u8b58\u5225\u5668\u7fa4\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3001\uff11\u3064\u305a\u3064\u9069\u7528\u3059\u308b\u3002(\u901a\u5e38 \u6700\u521d\u306e\u6570\u30b9\u30c6\u30fc\u30b8\u3067\u306f\u3001\u3068\u3066\u3082\u5c11\u306a\u3044\u6570\u306e\u7279\u5fb4\u3092\u542b\u3093\u3067\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002)\u3000\n\n\u3042\u308b\u7a93\u9818\u57df\u3067\u6700\u521d\u306e\u30b9\u30c6\u30fc\u30b8\u3067\u5931\u6557\u3057\u305f\u3089\u3002\u305d\u306e\u7a93\u9818\u57df\u3092\u6368\u3066\u307e\u3059\u3002\u305d\u306e\u9818\u57df\u306b\u6b8b\u308a\u306e\u7279\u5fb4\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u3092\u3057\u307e\u305b\u3093\u3002\u3082\u3057\u6700\u521d\u306e\u30b9\u30c6\u30fc\u30b8\u3067\u901a\u904e\u3057\u305f\u3089\u30012\u756a\u76ee\u306e\u7279\u5fb4\u91cf\u7fa4\u3092\u9069\u7528\u3057\u3001\u51e6\u7406\u3092\u7d99\u7d9a\u3057\u307e\u3059\u3002\u5168\u3066\u306e\u30b9\u30c6\u30fc\u30b8\u3067\u901a\u904e\u3057\u305f\u7a93\u9818\u57df\u306f\u9854\u9818\u57df\u3067\u3059\u3002\n\n\nAuthors' detector had 6000+ features with 38 stages with 1, 10, 25, 25 and 50 features in first five\nstages. (Two features in the above image is actually obtained as the best two features from\nAdaboost). According to authors, on an average, 10 features out of 6000+ are evaluated per\nsub-window.\n\n\u8457\u8005\u306b\u3088\u308b\u691c\u51fa\u5668\u306f\u30016000\u4ee5\u4e0a\u306e\u7279\u5fb4\u3092\u3082\u306438\u30b9\u30c6\u30fc\u30b8\u304b\u3089\u306a\u308b\u8b58\u5225\u5668\u3067\u3001\u6700\u521d\u306e\uff15\u30b9\u30c6\u30fc\u30b8\u3067\u306f\u30011, 10, 25, 25, 50\u500b\u306e\u7279\u5fb4\u3092\u6301\u3064\u3082\u306e\u3067\u3059\u3002(\u4e0a\u8a18\u306e\u56f3\u306b\u3042\u308b\uff12\u3064\u306e\u7279\u5fb4\u306f\u3001Adaboost\u306b\u3088\u3063\u3066\u6700\u5584\u306e2\u3064\u306e\u7279\u5fb4\u3068\u3057\u3066\u5b9f\u969b\u306b\u5f97\u3089\u308c\u305f\u3082\u306e\u3067\u3059\u3002)\u3000\u8457\u8005\u306b\u3088\u308c\u3070\u3001\u5e73\u5747\u3067\u306f\u3001\uff11\u3064\u306esub-window\u3042\u305f\u308a6000\u500b\u4ee5\u4e0a\u4e2d\u306e10\u500b\u306e\u7279\u5fb4\u304c\u8a55\u4fa1\u3055\u308c\u3066\u3044\u307e\u3059\u30fb\n\nSo this is a simple intuitive explanation of how Viola-Jones face detection works. Read paper for\nmore details or check out the references in Additional Resources section.\n\u3053\u308c\u304c\u3001Viola-Jones\u306e\u9854\u691c\u51fa\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304b\u306b\u3064\u3044\u3066\u306e\u7c21\u5358\u306a\u76f4\u611f\u7684\u306a\u8aac\u660e\u3067\u3059\u3002\u8a73\u7d30\u306f\u8ad6\u6587\u3092\u8aad\u3080\u306a\u308a\u3001Additional Resources\u306e\u7bc0\u306b\u793a\u3057\u3066\u3042\u308b\u53c2\u8003\u60c5\u5831\u306b\u3042\u305f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nHaar-cascade Detection in OpenCV\nOpenCV\u3067\u306eHaar-cascade \u691c\u51fa\n--------------------------------\n\nOpenCV comes with a trainer as well as detector. If you want to train your own classifier for any\nobject like car, planes etc. you can use OpenCV to create one. Its full details are given here:\n[Cascade Classifier Training](http://docs.opencv.org/2.4/doc/user_guide/ug_traincascade.html).\n\nOpenCV\u306b\u306f\u691c\u51fa\u5668\u3068\u540c\u69d8\u306b\u8a13\u7df4\u5668\u304c\u3042\u308a\u307e\u3059\u3002\u3082\u3057\u3001\u81ea\u52d5\u8eca\u3001\u98db\u884c\u6a5f\u306a\u3069\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u305f\u3081\u306e\u81ea\u4f5c\u306e\u8b58\u5225\u5668\u3092\u8a13\u7df4(=\u5b66\u7fd2)\u3057\u305f\u3044\u306a\u3089\u3001\u305d\u306e\u305f\u3081\u306bOpenCV\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u8a73\u7d30\u306f\u3001\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\n[\u30ab\u30b9\u30b1\u30fc\u30c9\u578b\u691c\u51fa\u5668\u306e\u5b66\u7fd2](http://docs.opencv.org/2.4/doc/user_guide/ug_traincascade.html).\n\n\n\nHere we will deal with detection. OpenCV already contains many pre-trained classifiers for face,\neyes, smile etc. Those XML files are stored in opencv/data/haarcascades/ folder. Let's create face\nand eye detector with OpenCV.\n\n\u3053\u3053\u3067\u3001\u691c\u51fa\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002OpenCV\u306f\u9854\u691c\u51fa\u3001\u76ee\u691c\u51fa\u3001\u7b11\u9854\u691c\u51fa\u306a\u3069\u306e\u5b66\u7fd2\u6e08\u307f\u306e\u691c\u51fa\u5668\u3092\u65e2\u306b\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306eXML\u306fopencv/data/haarcascades/\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3057\u3066\u3042\u308a\u307e\u3059\u3002OpenCV\u306e\u9854\u3068\u76ee\u306e\u691c\u51fa\u5668\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nFirst we need to load the required XML classifiers. Then load our input image (or video) in\ngrayscale mode.\n\n\u307e\u305a\u3001\u6240\u5b9a\u306eXML\u8b58\u5225\u5668\u3092\u8aad\u307f\u53d6\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6b21\u306b\u5165\u529b\u753b\u50cf(\u3042\u308b\u3044\u306f\u52d5\u753b)\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u30e2\u30fc\u30c9\u3067\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n\n\n```.py:\nimport numpy as np\nimport cv2\n\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')\n\nimg = cv2.imread('sachin.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n```\n\nNow we find the faces in the image. If faces are found, it returns the positions of detected faces\nas Rect(x,y,w,h). Once we get these locations, we can create a ROI for the face and apply eye\ndetection on this ROI (since eyes are always on the face !!! ).\n\n\u3055\u3042\u3001\u753b\u50cf\u306e\u4e2d\u306e\u9854\u3092\u898b\u3064\u3051\u307e\u3059\u3002\u3082\u3057\u9854\u304c\u898b\u3064\u304b\u308c\u3070\u3001\u691c\u51fa\u3055\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u9854\u306e\u4f4d\u7f6e\u3092Rect(x,y,w,h)\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u4f4d\u7f6e\u304c\u898b\u3064\u304b\u308a\u3057\u3060\u3044\u3001\u9854\u306b\u3064\u3044\u3066\u306eROI\u3092\u8a2d\u5b9a\u3067\u304d\u3001\u3053\u306eROI\u306b\u76ee\u691c\u51fa\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002(\u76ee\u304c\u3042\u308b\u306e\u306f\u3044\u3064\u3060\u3063\u3066\u9854\u306e\u4e0a\u306a\u3093\u3060\u304b\u3089)\n\n\n```.py:\nfaces = face_cascade.detectMultiScale(gray, 1.3, 5)\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n    roi_gray = gray[y:y+h, x:x+w]\n    roi_color = img[y:y+h, x:x+w]\n    eyes = eye_cascade.detectMultiScale(roi_gray)\n    for (ex,ey,ew,eh) in eyes:\n        cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)\n\ncv2.imshow('img',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\nResult looks like below:\n\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![image](http://docs.opencv.org/3.0-beta/_images/face.jpg)\n\nAdditional Resources\n--------------------\n\n-#  Video Lecture on [Face Detection and Tracking](http://www.youtube.com/watch?v=WfdYYNamHZ8)\n2.  An interesting interview regarding Face Detection by [Adam\n    Harvey](http://www.makematics.com/research/viola-jones/)\n\nExercises\n---------\n", "tags": ["OpenCV-Python", "OpenCV", "Python", "\u753b\u50cf\u8a8d\u8b58", "\u6a5f\u68b0\u5b66\u7fd2"]}