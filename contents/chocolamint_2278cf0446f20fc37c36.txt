{"context": " More than 1 year has passed since last update.\u8868\u984c\u306e\u8a71\u984c\u304c\u6319\u304c\u3063\u305f\u306e\u3067\u5b9f\u9a13\u7684\u306b\u3002\n\u6a19\u6e96\u3067\u3053\u3046\u3044\u3046\u306e\u306a\u3044\u2026\u3088\u306d\uff1f\n\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u4f4d\u7f6e\u3092\u3082\u3046\u5c11\u3057\u306a\u3093\u3068\u304b\u3057\u305f\u304f\u306f\u3042\u308b\u3002\n\n\u30c6\u30b9\u30c8\n\nEnumerableExTest.cs\n[TestClass]\npublic class MyTestClass\n{\n    [TestMethod]\n    public void BreakTest()\n    {\n        var count = 0;\n        foreach (var item in new[] { 1, 2, 3 }.BreakWith(() => count++))\n        {\n            Console.WriteLine(item);\n            if (item == 2) break;\n        }\n\n        count.Is(1);\n    }\n    [TestMethod]\n    public void LastBreakTest()\n    {\n        var count = 0;\n        foreach (var item in new[] { 1, 2, 3 }.BreakWith(() => count++))\n        {\n            Console.WriteLine(item);\n            if (item == 3) break;\n        }\n\n        count.Is(1);\n    }\n    [TestMethod]\n    public void NotBreakTest()\n    {\n        var count = 0;\n        foreach (var item in new[] { 1, 2, 3 }.BreakWith(() => count++))\n        {\n            Console.WriteLine(item);\n        }\n\n        count.Is(0);\n    }\n    [TestMethod, ExpectedException(typeof(ArgumentNullException))]\n    public void SourceNullTest()\n    {\n        ((IEnumerable<object>)null).BreakWith(() => { });\n    }\n    [TestMethod, ExpectedException(typeof(ArgumentNullException))]\n    public void ActionNullTest()\n    {\n        new[] { new object() }.BreakWith(null);\n    }\n}\n\n\n\n\u5b9f\u88c5\n\nEnumerableEx.cs\npublic static class EnumerableEx\n{\n    public static IEnumerable<T> BreakWith<T>(this IEnumerable<T> source, Action action)\n    {\n        if (source == null) throw new ArgumentNullException(\"source\");\n        if (action == null) throw new ArgumentNullException(\"action\");\n\n        var enumerated = false;\n        try\n        {\n            foreach (var item in source)\n            {\n                yield return item;\n            }\n            enumerated = true;\n        }\n        finally\n        {\n            if (!enumerated) action();\n        }\n    }\n}\n\n\n\u8868\u984c\u306e\u8a71\u984c\u304c\u6319\u304c\u3063\u305f\u306e\u3067\u5b9f\u9a13\u7684\u306b\u3002\n\u6a19\u6e96\u3067\u3053\u3046\u3044\u3046\u306e\u306a\u3044\u2026\u3088\u306d\uff1f\n\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u4f4d\u7f6e\u3092\u3082\u3046\u5c11\u3057\u306a\u3093\u3068\u304b\u3057\u305f\u304f\u306f\u3042\u308b\u3002\n\n#\u30c6\u30b9\u30c8\n\n```csharp:EnumerableExTest.cs\n[TestClass]\npublic class MyTestClass\n{\n    [TestMethod]\n    public void BreakTest()\n    {\n        var count = 0;\n        foreach (var item in new[] { 1, 2, 3 }.BreakWith(() => count++))\n        {\n            Console.WriteLine(item);\n            if (item == 2) break;\n        }\n\n        count.Is(1);\n    }\n    [TestMethod]\n    public void LastBreakTest()\n    {\n        var count = 0;\n        foreach (var item in new[] { 1, 2, 3 }.BreakWith(() => count++))\n        {\n            Console.WriteLine(item);\n            if (item == 3) break;\n        }\n\n        count.Is(1);\n    }\n    [TestMethod]\n    public void NotBreakTest()\n    {\n        var count = 0;\n        foreach (var item in new[] { 1, 2, 3 }.BreakWith(() => count++))\n        {\n            Console.WriteLine(item);\n        }\n\n        count.Is(0);\n    }\n    [TestMethod, ExpectedException(typeof(ArgumentNullException))]\n    public void SourceNullTest()\n    {\n        ((IEnumerable<object>)null).BreakWith(() => { });\n    }\n    [TestMethod, ExpectedException(typeof(ArgumentNullException))]\n    public void ActionNullTest()\n    {\n        new[] { new object() }.BreakWith(null);\n    }\n}\n```\n\n#\u5b9f\u88c5\n\n```csharp:EnumerableEx.cs\npublic static class EnumerableEx\n{\n    public static IEnumerable<T> BreakWith<T>(this IEnumerable<T> source, Action action)\n    {\n        if (source == null) throw new ArgumentNullException(\"source\");\n        if (action == null) throw new ArgumentNullException(\"action\");\n\n        var enumerated = false;\n        try\n        {\n            foreach (var item in source)\n            {\n                yield return item;\n            }\n            enumerated = true;\n        }\n        finally\n        {\n            if (!enumerated) action();\n        }\n    }\n}\n```", "tags": ["C#", "LINQ"]}