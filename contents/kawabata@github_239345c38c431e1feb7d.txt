{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u307e\u3082\u306a\u304f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b Emacs 25 \u306e\u65b0\u6a5f\u80fd\u306e\u4e00\u3064\u306b\u300c\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf (\u751f\u6210\u5b50 generator)\u300d\u304c\u3042\u308a\u307e\u3059\u3002 \uff08 /lisp/emacs-lisp/generator.el/ )\n\u3053\u3053\u3067\u306f\u3001\u672c\u6a5f\u80fd\u306e\u6982\u8981\u3068\u5229\u7528\u6cd5\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u306f\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\uff08\u751f\u6210\u5b50 generator\uff09\u306f\u3001\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u5ea6\u306b\u3001\u524d\u56de\u306e\u547c\u3073\u51fa\u3057\u305f\u72b6\u6cc1\u3092\u899a\u3048\u3066\u3044\u3066\u3001\u305d\u308c\u306b\u57fa\u3065\u3044\u3066\u65b0\u3057\u3044\u5024\u3092\u751f\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001Emacs 25\u306e generator.el \u3067\u306f\u3001\u6b21\u3005\u3068\u5024\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u53cd\u5fa9\u5b50 Iterator\uff09\u3068\u547c\u3070\u308c\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308a\u51fa\u3059\u95a2\u6570\u3092\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3067\u306f\u307e\u3068\u3081\u3066\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u547c\u3073\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u6307\u5b9a\u3055\u308c\u305f\u756a\u53f7\u306e\u5024\u3092\u8fd4\u3059\u95a2\u6570\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\u5358\u7d14\u306a\u95a2\u6570\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n  (defun fibonacci (n)\n    (let ((a 1) (b 1) (c 0))\n      (dotimes (_i n)\n        (setq c b)\n        (setq b a)\n        (setq a (+ a c)))\n      c))\n\n\u3053\u3053\u3067\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u5404\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001\u4f55\u3089\u304b\u306e\u51e6\u7406\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u5f53\u8a72\u95a2\u6570\u306b\u3001\u51e6\u7406\u3092\u3055\u305b\u305f\u3044\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n  (defun fibonacci (n func)\n    (let ((a 1) (b 1) (c 0))\n      (dotimes (_i n)\n        (funcall func c)\n        (setq c b)\n        (setq b a)\n        (setq a (+ a c)))))\n\n\u305f\u3060\u3001\u5f15\u6570\u3068\u306a\u308b\u95a2\u6570 func \u306b\u3001\u8272\u3005\u306a\u60c5\u5831\uff08\u305f\u3068\u3048\u3070\u547c\u3073\u51fa\u3057\u5074\u306e\u6587\u8108\u306a\u3069\uff09\u3092\u6e21\u3057\u305f\u3044\u3068\u306a\u308b\u3068\u3001\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u306f\u7c21\u5358\u306b\u306f\u3044\u304d\u307e\u305b\u3093\u3002\n\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u5b9f\u884c\u4e2d\u306b\u3001\u547c\u3073\u51fa\u3057\u5143\u306b\u9014\u4e2d\u7d50\u679c\u3092\u8fd4\u3059\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u4e0a\u8a18\u3092\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u7528\u3044\u3066\u8a18\u8ff0\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n  (setq lexical-binding t) ; \u5b57\u53e5\u675f\u7e1b\u306f\u6709\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n  (require 'generator)\n\n  (iter-defun fibonacci ()\n    \"Fibonacci Function.\"\n    (let ((a 1) (b 1) (c 0))\n      (while t\n        (iter-yield c)\n        (setq c b)\n        (setq b a)\n        (setq a (+ a c)))))\n\n\u3053\u3053\u3067\u3001 iter-yeid \u95a2\u6570\u306f\u3001\u73fe\u5728\u306e\u5024\u3092\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u3057\u3066\u51e6\u7406\u3092\u4e00\u65e6\u4e2d\u65ad\u3057\u3001\u518d\u5ea6\u3001\u547c\u3073\u51fa\u3057\u5143\u304c iter-next \u3092\u547c\u3076\u307e\u3067\u73fe\u5728\u306e\u72b6\u6cc1\u3067\u5f85\u3061\u7d9a\u3051\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u304b\u3089\uff11\uff10\u500b\u3001\u5024\u3092\u53d6\u308a\u51fa\u3059\u4f8b\u3067\u3059\u3002\n  (defun call-fibonacci ()\n    (let ((fib (fibonacci)))\n      (dotimes (_i 10)\n        (message \"%s\" (iter-next fib)))))\n\n\u4e00\u6642\u5909\u6570 fib \u306b\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u308a\u3001\u305d\u308c\u3092\u5f15\u6570\u3068\u3057\u3066 iter-next \u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e iter-yield \u3067\u8fd4\u3055\u308c\u308b\u5024\u304c\u6b21\u3005\u3068\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\u305d\u306e\u9593\u3001 fib \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u90e8\u306e\u72b6\u614b\u306f\u7dad\u6301\u3055\u308c\u307e\u3059\u3002\uff08\u4e00\u7a2e\u306e\u5358\u7d14\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3068\u3044\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\uff09\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u30eb\u30fc\u30d7\u3067\u53d6\u308a\u51fa\u3059\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b iter-do \u3084\u3001 \u5f37\u529b\u306a\u30eb\u30fc\u30d7\u30de\u30af\u30ed cl-loop \u306e\u30ad\u30fc\u30ef\u30fc\u30c9 iter-by \u3068\u3057\u3066\u3082\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\uff08\u6ce8\u610f\uff1a\u4ee5\u4e0b\u306f\u3001Emacs\u306e\u6271\u3048\u308b\u6574\u6570\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u308b\u3068\u8ca0\u6570\u3068\u6b63\u6570\u3092\u7e70\u308a\u8fd4\u3059\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308a\u307e\u3059\u3002\uff09\n  (defun call-fibonacci ()\n    (let ((fib (fibonacci)))\n      (iter-do (i fib)\n        (message \"%s\" i))))\n\n  (defun call-fibonacci ()\n    (let ((fib (fibonacci)))\n      (cl-loop\n        for i iter-by fib\n        do (message \"%s\" i))))\n\n\u4ee5\u4e0b\u306f\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u95a2\u6570\u5074\u3067\u3001\u5024\u304c\u5de8\u5927\u3059\u304e\u3066\u8ca0\u6570\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u51e6\u7406\u3092\u7d42\u4e86\u3055\u305b\u308b\uff08\u6570\u5217\u3092\u751f\u6210\u3057\u5c3d\u304f\u3059\uff09\u4f8b\u3067\u3059\u3002\n  (iter-defun fibonacci ()\n    \"Fibonacci Function.\"\n    (let ((a 1) (b 1) (c 0))\n      (while (> c -1) ;; \u8ca0\u6570\u306b\u306a\u3063\u305f\u3089\u7d42\u4e86\n        (iter-yield c)\n        (setq c b)\n        (setq b a)\n        (setq a (+ a c)))))\n\n\u3053\u306e\u5834\u5408\u3001 cl-loop \u3084\u3001 iter-do \u306f\u3001 fibonacci \u304cEmacs\u306e\u6b63\u306e\u6574\u6570\u3067\u6271\u3048\u308b\u6700\u5927\u6570\u307e\u3067\u5230\u9054\u3057\u305f\u969b\u3001\u751f\u6210\u5024\u3092\u6d88\u8cbb\u3057\u5c3d\u304f\u3057\u305f\u3068\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002\u5024\u3092\u51fa\u3057\u5c3d\u304f\u3057\u305f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u306a\u304a\u3082 iter-next \u3092\u547c\u3073\u51fa\u3059\u3068\u3001 iter-end-of-sequence \u4f8b\u5916\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3068\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3068\u3057\u3066\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f iter-yield \u306e\u5f15\u6570\u3067\u547c\u3073\u51fa\u3057\u5143\u306b\u5024\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u306f\u3001\u547c\u3073\u51fa\u3057\u5143\u3082 iter-next \u306e\u7b2c\uff12\u5f15\u6570\u306b\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u5074\u306b\u5024\u3092\u9001\u308c\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092 \u7e4b\u3052\u3066 \u66f8\u304f\u3053\u3068\u3067\u3001\u6b21\u3005\u3068\u751f\u6210\u3055\u308c\u305f\u5024\u3092\u5206\u5c90\u30fb\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3067\u6e21\u3057\u3066\u3044\u304f\u3001\u300c\u30c7\u30fc\u30bf\u51e6\u7406\u30fb\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u30b0\u30e9\u30d5\u300d\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b\u3001\u300c\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u300d\u306e\u5024\u3092\u3001\u300c\u53d7\u3051\u53d6\u3063\u305f\u5024\u3092\u305d\u306e\u307e\u307e\u8868\u793a\u3059\u308b\u95a2\u6570\u300d\u3068\u300c\u53d7\u3051\u53d6\u3063\u305f\u95a2\u6570\u3092\u4e8c\u500d\u3059\u308b\u3057\u3066\u6b21\u306b\u6e21\u3059\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u300d\u306e\uff12\u3064\u306b\u5206\u5c90\u3055\u305b\u3001\u5f8c\u8005\u3092\u3055\u3089\u306b\u3001\u300c\u53d7\u3051\u53d6\u3063\u305f\u95a2\u6570\u3092\u8868\u793a\u3059\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u300d\u306b\u7e4b\u3052\u308b\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\u5358\u7d14\u306a\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u4e2d\u9593\u51e6\u7406\u3092\u62c5\u3046\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u5024\u3092\u4e00\u65b9\u7684\u306b\u547c\u3073\u51fa\u3057\u5074\u304b\u3089\u6e21\u3059\u3060\u3051\u3067\u3001\u547c\u3073\u51fa\u3055\u308c\u305f\u5074\u304b\u3089\u306f\u8fd4\u3055\u306a\u3044\u305f\u3081\u3001 iter-yield \u306e\u5f15\u6570\u306f nil \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u5024\u3092\u4e00\u65b9\u7684\u306b\u547c\u3073\u51fa\u3057\u5143\u306b\u6e21\u3059\u3060\u3051\u3067\u306a\u304f\u3001\u5024\u3092\u4e00\u65b9\u7684\u306b\u53d7\u3051\u53d6\u308b\u3060\u3051\u3001\u3068\u3044\u3046\u4f7f\u3044\u65b9\u3082\u3067\u304d\u307e\u3059\u3002\n  (iter-defun times (num next)\n    (let (val)\n      (while t\n        (setq val (* num (iter-yield nil)))\n        (iter-next next val))))\n\n  (iter-defun message-out (format)\n    (while t\n      (message format (iter-yield nil))))\n\n  (defun pipeline-test ()\n    (let* ((fib (fibonacci))\n           (out1 (message-out \"orig=%s\"))\n           (out2 (message-out \"x2=%s\"))\n           (x2 (times 2 out2)))\n      (iter-do (i fib)\n        (iter-next out1 i)\n        (iter-next x2 i))))\n\n\u3053\u308c\u306f\u305d\u306e\u307e\u307e\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u9001\u4fe1\u30fb\u53d7\u4fe1\u3068\u3057\u3066\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30b3\u30eb\u30fc\u30c1\u30f3\u3068\u3057\u3066\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\u5f93\u6765\u3001\u518d\u5229\u7528\u3055\u308c\u308b\u51e6\u7406\u306f\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u304b\u3089\u306f\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3068\u3057\u3066\u5206\u304b\u308c\u3066\u304a\u308a\u3001\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3068\u306a\u308b\u95a2\u6570\u306f\u547c\u3073\u51fa\u3055\u308c\u308b\u6bce\u306b\u3001\u6587\u8108\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u306f\u3001\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u306e \u72b6\u614b \u304a\u3088\u3073 \u7d99\u7d9a \u304c\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\uff12\u3064\u306e\u30bf\u30b9\u30af\u3092\u4ea4\u4e92\u306b\u5207\u308a\u66ff\u3048\u306a\u304c\u3089\u3001\u304a\u4e92\u3044\u306b\u901a\u4fe1\u3067\u304d\u307e\u3059\u3002\n  (iter-defun task-b ()\n    (let (result)\n      (message \"task b-1\")\n      (setq result (iter-yield 100))\n      (message \"task b-2, result=%s\" result)\n      (iter-yield 200)))\n\n  (defun task-a ()\n    (let ((task-b (task-b)) result)\n      (message \"task a-1\")\n      (setq result (iter-next task-b))\n      (message \"task a-2, result=%s\" result)\n      (setq result (iter-next task-b 1))\n      (message \"task a-3, result=%s\" result)))\n\n\u4e0a\u8a18\u306e\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\u30d0\u30c3\u30d5\u30a1\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\uff09\n  (task-a) \u23ce\n  step a-1\n  step b-1\n  step a-2, result=100\n  step b-2, result=1\n  step a-3, result=200\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u547c\u3073\u51fa\u3057\u5143\u3068\u3001\u547c\u3073\u51fa\u3057\u5148\u3092\u4ea4\u4e92\u306b\u5207\u308a\u66ff\u3048\u308b\u5b9f\u884c\u624b\u6cd5\u306f \u30b3\u30eb\u30fc\u30c1\u30f3 \u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\n\u975e\u540c\u671f\u547c\u3073\u51fa\u3057\uff08\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0I/O\uff09\u3068\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\u30b3\u30eb\u30fc\u30c1\u30f3\u306e\u4e00\u4f8b\u3068\u3057\u3066\u3001\u5916\u90e8\u30d7\u30ed\u30bb\u30b9\u306e\u975e\u540c\u671f\u306a\u547c\u3073\u51fa\u3057\u5f8c\u306b\u3001\u4e00\u65e6\u3001\u5b9f\u884c\u72b6\u614b\u3092\u4e2d\u65ad\u3057\u3066Emacs\u306e\u30b3\u30de\u30f3\u30c9\u30eb\u30fc\u30d7\u306b\u5e30\u308a\u3064\u3064\u3082\u3001\u547c\u3073\u51fa\u3057\u304c\u7d42\u4e86\u3057\u305f\u5f8c\u3001\u518d\u3073\u3001\u4e2d\u65ad\u3057\u305f\u5834\u6240\u304b\u3089\u7d99\u7d9a\u3059\u308b\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u5916\u90e8\u30b3\u30de\u30f3\u30c9 sleep 10 \u306710\u79d2\u5f85\u3064\u51e6\u7406\u3092\u547c\u3073\u51fa\u3057\u3001\u305d\u306e\u306e\u3061\u3001\u51e6\u7406\u3092\u518d\u958b\u3057\u307e\u3059\u3002\u975e\u540c\u671f\u547c\u3073\u51fa\u3057\u306e\u5f8c\u306e\u51e6\u7406\u3092\u6307\u5b9a\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001 set-process-sentinel \u95a2\u6570\u306b\u3001\u5225\u306e\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n  (defun test-process (a)\n    (let* ((process (start-process \"sleep\" nil  \"sleep\" (number-to-string a))))\n      (set-process-sentinel process 'test-sentinel)\n      (process-put process 'a a)))\n\n  (defun test-sentinel (process state)\n    (let ((a (process-get process 'a)))\n      (message \"Process change, state=%s a=%s\" state a)))\n\n  (test-process 10) ;; 10\u79d2\u5f8c\u306b\u518d\u958b\n\n\u3053\u306e\u65b9\u5f0f\u3067\u306f\u3001 test-sentinel \u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u6642\u306b\u306f\u3001 test-process \u306f\u7d42\u4e86\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u72b6\u614b\u306f\u5931\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u975e\u540c\u671f\u5b9f\u884c\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u3082\u60c5\u5831\u3092\u6e21\u3059\u305f\u3081\u3001\u5f93\u6765\u306f\u30d7\u30ed\u30bb\u30b9\u3092\u9375\u306b\u3057\u305f\u3001\u30c7\u30fc\u30bf\u4fdd\u5b58\u5c02\u7528\u306e\u95a2\u6570 (process-put, process-get) \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f7f\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u975e\u540c\u671f\u547c\u3073\u51fa\u3057\u5f8c\u3001 iter-yield \u3067\u5f85\u6a5f\u3057\u3064\u3064\u3001\u547c\u3073\u51fa\u3057\u5f8c\u306b\u4e2d\u65ad\u3057\u305f\u5834\u6240\u304b\u3089\u7d99\u7d9a\u3067\u304d\u307e\u3059\u3002\n  (iter-defun test-process-2 (a)\n    (let* ((process (start-process \"sleep\" nil  \"sleep\" (number-to-string a)))\n           (result))\n      (set-process-sentinel process 'test-sentinel-2)\n      (setq state (iter-yield process))\n      (message \"Process change, state=%s a=%s\" state a)\n      (iter-yield nil)))\n\n  (defun test-sentinel-2 (process state)\n    (let ((gen (process-get process 'generator)))\n      (iter-next gen state)))\n\n  (let* ((gen (test-process-2 10)) (process (iter-next gen)))\n    (process-put process 'generator gen))\n\n\u5f85\u6a5f\u4e2d\u3082\u6587\u8108\u304c\u7dad\u6301\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u5fc5\u8981\u306a\u60c5\u5831\u3092\u3044\u3061\u3044\u3061 process-put \u3067\u9000\u907f\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u7ba1\u7406\u3068\u3057\u3066\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\u4e0a\u8ff0\u306e\u3088\u3046\u306b\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u300c\u547c\u3073\u51fa\u3057\u5143\u3068\u547c\u3073\u51fa\u3055\u308c\u305f\u95a2\u6570\u3068\u306e\u9593\u3067\u306e\u5b9f\u884c\u4e2d\u3067\u306e\u901a\u4fe1\u300d\u3068\u3001\u300c\u547c\u3073\u51fa\u3055\u308c\u305f\u5074\u306e\u81ea\u4e3b\u7684\u306a\u5f85\u6a5f\u300d\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u5b9f\u884c\u305d\u306e\u3082\u306e\u3092\u4e2d\u6b62\u3055\u305b\u308b\u3001 iter-close \u95a2\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u6a5f\u80fd\u304c\u3042\u308c\u3070\u3001\u5b9f\u306f\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30fb\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u4f5c\u308b\u3053\u3068\u306f\u305d\u308c\u307b\u3069\u96e3\u3057\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306f\u3001\uff12\u3064\u306e\u30bf\u30b9\u30af\u3001\u3072\u3068\u3064\u76ee\u306f \"Hello Hoge!\" \u3092 980\u56de\u8868\u793a\u3059\u308b\u30bf\u30b9\u30af\u3068\u3001\u3075\u305f\u3064\u76ee\u306f \"Hello Page!\" \u3092 1000\u56de\u8868\u793a\u3059\u308b\u30bf\u30b9\u30af\u3092\u3001\u4ea4\u4e92\u306b\u5b9f\u884c\u3059\u308b\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u4f8b\u3067\u3059\u3002\n  (iter-defun task-hoge ()\n    (dotimes (_i 980)\n      (message \"Hello Hoge!\")\n      (iter-yield nil)))\n\n  (iter-defun task-page ()\n    (dotimes (_i 1000)\n      (message \"Hello Page!\")\n      (iter-yield nil)))\n\n  (defun task-scheduling ()\n    (let ((task-table (make-hash-table :test 'equal)))\n      (puthash 1 (task-hoge) task-table)\n      (puthash 2 (task-page) task-table)\n      (while (/= 0 (hash-table-count task-table))\n        (maphash (lambda (id task)\n                   (condition-case err\n                       (iter-next task)\n                     (iter-end-of-sequence\n                      (remhash id task-table))))\n                 task-table))))\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u30bf\u30b9\u30af\u3092\u307e\u305a\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u30bf\u30b9\u30afID\u3068\u3068\u3082\u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\u30bf\u30b9\u30af\u304c\u7d42\u4e86\u3057\u3066\u3082\u3055\u3089\u306b iter-next \u3092\u547c\u3076\u3068\u3001 iter-end-of-sequence \u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u306e\u3067\u3001\u305d\u308c\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u305f\u3089\u305d\u306eID\u3067\u30bf\u30b9\u30af\u3092\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u306b\u30bf\u30b9\u30af\u304c\u4e00\u3064\u3082\u7121\u304f\u306a\u3063\u305f\u3089\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002\n(task-scheduling) \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u307e\u305a\u30bf\u30b9\u30afHoge\u3068\u30bf\u30b9\u30af Page\u304c\u4ea4\u4e92\u306b980\u56de\u5b9f\u884c\u3055\u308c\u3001\u305d\u306e\u5f8c\u3001\u30bf\u30b9\u30afPage\u3060\u3051\u304c20\u56de\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n  Hello Hoge!\n  Hello Page!\n  Hello Hoge!\n  ...\n  Hello Page!\n  Hello Hoge!\n  Hello Page! [21 times]\n\n\n\u30bf\u30b9\u30af\u9593\u540c\u671f\u3068\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3068\u3001\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u7ba1\u7406\u304c\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u30bf\u30b9\u30af\u9593\u306e\u30bb\u30de\u30d5\u30a9\u3084\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u306a\u3069\u3082\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306f\uff11\uff10\uff10\u500b\u306e\u30bf\u30b9\u30af\u304c\uff11\uff10\u306e\u30bb\u30de\u30d5\u30a9\u30921/2\u306e\u78ba\u7387\u3067\u30ed\u30c3\u30af\u30fb\u30ea\u30ea\u30fc\u30b9\u3057\u3001\uff13\u56de\u30ed\u30c3\u30af\u3067\u304d\u305f\u30bf\u30b9\u30af\u304b\u3089\u7d42\u4e86\u3059\u308b\u4f8b\u3067\u3059\u3002\n  (iter-defun semaphore (n)\n    (let ((i 0) signal task-id)\n      (while t\n        (setq task-id (iter-yield nil))\n        (setq signal (car task-id))\n        (setq task-id (cdr task-id))\n        (if (equal signal 'lock)\n            (if (< n i)\n                (progn (iter-yield nil) t)\n              (incf i)\n              (iter-yield t))\n          (if (equal signal 'release)\n              (if (< i 1)\n                  (iter-yield nil)\n                (decf i)\n                (iter-yield t))\n            (error \"signal error!\"))))))\n\n  (iter-defun task-sem (id sem)\n    (let ((count 0) lock)\n      (while (< count 3)\n        (when (= 1 (random 2))\n          (if (null lock)\n              (progn\n                (if (setq lock (iter-next sem `(lock ,id)))\n                    (message \"task %s: success to lock semaphore.\" id)\n                  (message \"task %s: failed to lock semaphore.\" id)))\n            (message \"task %s: releasing semaphore!\" id)\n            (if (setq lock (iter-next sem `(release ,id)))\n                (message \"task %s: success to release semaphore.\" id)\n              (message \"task %s: failed to release semaphre.\" id))\n            (setq lock (not lock)))\n          (iter-next sem))\n        (if lock (incf count))\n        (iter-yield nil))\n      (message \"task %s: finish task.\" id)\n      (iter-next sem `(release ,id))\n      (iter-next sem)))\n\n  (defun run-tasks ()\n    (let ((task-table (make-hash-table :test 'equal))\n          (semaphore (semaphore 10)))\n      (iter-next semaphore)\n      (dotimes (i 100)\n        (puthash i (task-sem i semaphore) task-table))\n      (while (/= 0 (hash-table-count task-table))\n        (message \"scheduler: current tasks =%s\" (hash-table-count task-table))\n        (maphash (lambda (id task)\n                   (condition-case err\n                       (iter-next task)\n                     (iter-end-of-sequence\n                      (message \"task %s finished.\" id)\n                      (remhash id task-table))))\n                 task-table))))\n\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u547c\u3073\u51fa\u3057\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u901a\u5e38\u3067\u306f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u547c\u3073\u51fa\u305b\u307e\u305b\u3093\u3002 iter-yield \u3067\u306e\u5024\u306e\u51fa\u529b\u3092\u3001\u4e0b\u4f4d\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306b\u4ee5\u4e0a\u3059\u308b\u95a2\u6570 iter-yield-from \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001\u901a\u5e38\u306e\u7af9\u5185\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n  (defun tarai (x y z)\n    (if (<= x y) y\n      (tarai\n       (tarai (1- x) y z)\n       (tarai (1- y) z x)\n       (tarai (1- z) x y))))\n\n\u3053\u308c\u3092\u3001x,y,z \u306e\u5024\u3092\u95a2\u6570\u306b\u5165\u308b\u305f\u3073\u306b\u53d6\u308a\u51fa\u3059\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u3057\u3066\u8868\u73fe\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n  (iter-defun tarai (x y z)\n    (iter-yield (list x y z))\n    (if (<= x y) y\n      (iter-yield-from (tarai\n       (iter-yield-from (tarai (1- x) y z))\n       (iter-yield-from (tarai (1- y) z x))\n       (iter-yield-from (tarai (1- z) x y))))))\n\n\u4ee5\u4e0b\u306b\u3001 condition-case \u3092\u4f7f\u3063\u305f\u5229\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u8fd4\u308a\u5024\uff08\u4e0a\u8a18\u306e y \uff09\u306f\u3001 iter-end-of-sequence \u4f8b\u5916\u306e cdr \u30bb\u30eb\u306b\u5165\u308a\u307e\u3059\u3002\n  (let ((tarai (tarai 4 2 0)))\n    (condition-case err\n        (while t (message \"%s\" (iter-next tarai)))\n      (iter-end-of-sequence\n       (cdr err))))\n\n\n\u7d99\u7d9a\u6e21\u3057\u5f62\u5f0f\uff08CPS\uff09\u5909\u63db\u3068\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u5b9f\u884c\u9014\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e2d\u65ad\u3001\u5f85\u6a5f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001Emacs\u306bScheme\u306e call-with-current-continuation (call/cc) \u306e\u3088\u3046\u306a\u3001\u73fe\u5728\u306e\u7d99\u7d9a\u72b6\u6cc1\u3092\u53d6\u308a\u51fa\u3059\u5c02\u7528\u306e\u6a5f\u80fd\u304c\u7d44\u307f\u8fbc\u307e\u308c\u305f\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u73fe\u5728\u306e generator.el \u3067\u306f\u3001 iter-defun \u3067\u5b9a\u7fa9\u3055\u308c\u305f\u95a2\u6570\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u300c\u7d99\u7d9a\u6e21\u3057\u5f62\u5f0f\uff08Continuation Passing Style, CPS\uff09\u5909\u63db\u300d\u3068\u547c\u3070\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u7d99\u7d9a\u72b6\u614b\u3092\u5f15\u6570\u3068\u3057\u3066\u53d6\u308b\u5f0f\u306b\u5909\u5f62\u3055\u308c\u3001\u305d\u308c\u3092\u30af\u30ed\u30fc\u30b8\u30e3\uff08\u9589\u5305 closure\uff09\u3068\u3057\u3066\u751f\u6210\u30fb\u8a55\u4fa1\u3059\u308b\u95a2\u6570\u3068\u3057\u3066\u3001\u6539\u3081\u3066\u5b9a\u7fa9\u3057\u306a\u304a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u3001\u5909\u6570\u7b49\u3092\u675f\u7e1b\u3057\u305f\u5f62\u3067\u30e9\u30e0\u30c0\u5f0f\u3092\u8868\u73fe\u3057\u307e\u3059\u3002Emacs \u3067\u306f\u3001\u30d0\u30fc\u30b8\u30e7\u30f324\u3088\u308a\u5b9f\u88c5\u3055\u308c\u3001 lexical-binding \u5909\u6570\u304c t \u306e\u969b\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\n  (setq plus3 (let ((a 3)) (lambda (x) (+ a x))))\n  \u2192 (closure ((a . 3) t) (x) (+ a x))\n  (funcall plus3 5)\n  \u2192 8\n\nCPS\u5909\u63db\u306f\u3001\u901a\u5e38\u306e\u5f0f\u3092\u3001\u30cd\u30b9\u30c8\u3057\u306a\u3044\u5358\u7d14\u306a\u5f0f\uff0b\u6b21\u306b\u8a55\u4fa1\u3059\u308b\u5f0f\u3078\u306e\u5f15\u304d\u6e21\u3057\u3001\u3068\u3044\u3046\u5f62\u306b\u5909\u5f62\u3057\u307e\u3059\u3002\u8a55\u4fa1\u3059\u308b\u9806\u756a\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u5834\u5408\u304c\u3042\u308b\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u5f0f\u3092\u3001\u5358\u7d14\u5f0f\u3092\u8a55\u4fa1\u3059\u308b\u9806\u756a\u306b\u4e26\u3079\u76f4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\nWikipedia \u306e \u7d99\u7d9a\u6e21\u3057\u30b9\u30bf\u30a4\u30eb \u3067\u6319\u3052\u3089\u308c\u3066\u3044\u308b\u3001\u30d4\u30bf\u30b4\u30e9\u30b9\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u95a2\u6570\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u307e\u305a\u5f15\u6570\u3092\u4e8c\u4e57\u3057\u3001\u52a0\u7b97\u3057\u3001\u305d\u3057\u3066\u5e73\u65b9\u6839\u3092\u6c42\u3081\u308b\u9806\u756a\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n  (defun pyth (x y)\n   (sqrt (+ (* x x) (* y y))))\n\n\u3053\u308c\u3092\u3001\u4e57\u7b97\u30fb\u52a0\u7b97\u30fb\u5e73\u65b9\u6839\u306e\u8a08\u7b97\u306e\u5168\u3066\u306e\u95a2\u6570\u306b\u5bfe\u3057\u3066CPS\u5909\u63db\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u5165\u308c\u5b50\u304c\u7121\u304f\u306a\u3063\u305f\u5358\u7d14\u306a\u5f0f\u304c\u3001\u8a55\u4fa1\u3059\u308b\u9806\u756a\uff08\u4e57\u7b97\u2192\u4e57\u7b97\u2192\u52a0\u7b97\u2192\u5e73\u65b9\u6839\uff09\u306e\u901a\u308a\u306b\u4e26\u3073\u307e\u3059\u3002\n  (defun pyth& (x y k)\n    (*& x x (lambda (x2)\n      (*& y y (lambda (y2)\n        (+& x2 y2 (lambda (x2py2)\n          (sqrt& x2py2 k))))))))\n\n\u3053\u3053\u3067\u3001 *&, +&, sqrt& \u306f\u3001\u3082\u3068\u306e *, +, sqrt \u95a2\u6570\u304b\u3089\u3001\u5f15\u6570\u3092\u8a55\u4fa1\u3057\u305f\u5f8c\u306b\u6700\u5f8c\u306e\u5f15\u6570\u306e\u95a2\u6570\u306b\u3001\u7d50\u679c\u3092\u6e21\u3059\u3088\u3046\u306b\u5909\u5f62\u3057\u305f\u95a2\u6570\u3067\u3059\u3002\n  (defun +& (a b k) (funcall k (+ a b)))\n  (defun *& (a b k) (funcall k (* a b)))\n  (defun sqrt& (a k) (funcall k (sqrt a)))\n\n\u7e70\u308a\u8fd4\u3057\u3084\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f0f\u306eCPS\u5909\u63db\u3082\u5b9a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002Wikipedia\u306b\u3082\u3042\u308b\u968e\u4e57\u3092\u6c42\u3081\u308b\u95a2\u6570\u306e\u4f8b\u3067\u306f\u3001\n  (defun factorial (n)\n    (if (= n 0) 1\n      (* n (factorial (- n 1)))))\n\n\u3053\u308c\u3092CPS\u5909\u63db\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff08\u5358\u7d14\u5316\u306e\u305f\u3081\u3001\u6bd4\u8f03\u30fb\u4e57\u7b97\u30fb\u6e1b\u7b97\u306eCPS\u5909\u63db\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\u5b8c\u5168\u7248\u306f\u3001Wikipedia\u306e\u9805\u76ee\u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\uff09\u3002\n  (defun factorial& (n k)\n    (if (= n 0)\n        (funcall k 1)\n      (factorial& (- n 1) (lambda (x) (funcall k (* n x))))))\n\n\u5143\u306e\u5f0f\u3067\u306f\u4e57\u7b97\u306e\u5f15\u6570\u304c\u95a2\u6570\u547c\u3073\u51fa\u3057\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5909\u63db\u5f8c\u306f\u3001\u4e57\u7b97\u306e\u5f15\u6570\u306f\u5909\u6570\u306e\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 (factorial& 4 'identity) \u3067\u8a55\u4fa1\u3059\u308b\u3068\u3001\u300c\u5f15\u6570\u30922\u500d\u306b\u3057\u3066\u3001\u300c\u5f15\u6570\u30923\u500d\u306b\u3057\u3066\u3001\u300c\u5f15\u6570\u30924\u500d\u3059\u308b\u95a2\u6570\u300d \u306b\u6e21\u3059\u95a2\u6570\u300d\u306b\u6e21\u3059\u95a2\u6570\u300d\u306b\u3001\uff11\u3092\u6e21\u3057\u307e\u3059\u3002\n\u3053\u306e factorial& \u95a2\u6570\u3092\u9014\u4e2d\u3067\u505c\u6b62\u3001\u518d\u958b\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002 factorial& \u95a2\u6570\u3092\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u72b6\u614b\u3092\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u3059\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u307f\u307e\u3059\u3002\u4e0a\u5f0f\u306e factorial& \u3092 list \u306b\u3057\u3001\u3053\u308c\u304c\u9014\u4e2d\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3001 cont \u30b7\u30f3\u30dc\u30eb\u3092\u5148\u982d\u306b\u52a0\u3048\u3066\u307f\u307e\u3059\u3002\n  (defun factorial& (n k)\n    (if (= n 0)\n        (funcall k 1)\n      (list 'cont (- n 1) (lambda (x) (funcall k (* n x))))))\n\n\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u9014\u4e2d\u306e\u4e2d\u65ad\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u308c\u3092\u518d\u958b\u3055\u305b\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u3001\u5358\u72ec\u3067\u547c\u3073\u51fa\u3059\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u304c\u8fd4\u308a\u307e\u3059\u3002\n  (factorial& 3 'identity)\n  \u2192 (cont 2 (closure ((c . identity) (n . 3) t) (x) (funcall c (* n x))))\n\n\u3053\u308c\u3092\u3001\u5148\u982d\u304c cont \u3067\u306a\u304f\u306a\u308b\u307e\u3067\u3001\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n  (let ((cont (factorial& 6 'identity)))\n    (while (equal (car-safe cont) 'cont)\n      (message \"factorial& \u306e\u7d99\u7d9a=%s\" cont)\n      ;; \u5b9f\u884c\u518d\u958b\n      (setq cont (apply 'factorial& (cdr cont))))\n    cont)\n  \u2192 720\n\n\u3059\u308b\u3068\u3001\u6bce\u56de\u3001\u968e\u4e57\u306e\u8a08\u7b97\u306f\u4e2d\u65ad\u3057\u3066\u3001\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u308a\u3001\u305d\u3053\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u305f\u5f8c\u3001\u518d\u958b\u3055\u308c\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u5f0f\u3092\u4e2d\u65ad\u30fb\u7d99\u7d9a\u3055\u305b\u305f\u3044\u90e8\u5206\u3067CPS\u5909\u63db\u3092\u3059\u308b\u3068\u3001\u5b9f\u884c\u306e\u4e2d\u65ad\uff08\u3092\u542b\u3080\u3001\u69d8\u3005\u306a\u30d5\u30ed\u30fc\u306e\u5236\u5fa1\uff09\u304c\u53ef\u80fd\u306b\u306a\u308a\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\uff08 generator.el \u3067\u306f\u3001 cps--transform-1 \u95a2\u6570\u304c\u3001\u5b9f\u969b\u306b\u5f0f\u306eCPS\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\uff09\n\n\u6700\u5f8c\u306b\n\u672c\u8a18\u4e8b\u3067\u306f\u3001Emacs 25\u306e\u65b0\u6a5f\u80fd\u3067\u3042\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u5024\u3092\u6b21\u3005\u3068\u751f\u6210\u3059\u308b\u3053\u3068\u304b\u3089\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u307e\u3057\u305f\u3002\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u5185\u90e8\u72b6\u614b\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u3001\u81ea\u4e3b\u7684\u306b\u5f85\u6a5f\u3057\u3001\u4f55\u5ea6\u3067\u3082\u547c\u3073\u51fa\u3057\u5143\u304b\u3089\u547c\u3073\u51fa\u305b\u307e\u3059\u3002\u307e\u305f\u305d\u306e\u904e\u7a0b\u3067\u76f8\u4e92\u306b\u901a\u4fe1\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u4e00\u7a2e\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6a5f\u80fd\u3084\u3001\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u306e\u7ba1\u7406\u6a5f\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u672c\u6765\u306e\u76ee\u7684\u306e\u4ed6\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7528\u9014\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n  \u30c7\u30fc\u30bf\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3084\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u51e6\u7406\n  \u5916\u90e8\u30d7\u30ed\u30bb\u30b9\u306e\u975e\u540c\u671f\u306a\u547c\u3073\u51fa\u3057\uff08\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0I/O\uff09\n  \u30ce\u30f3\u30d7\u30ea\u30a8\u30f3\u30d7\u30c6\u30a3\u30d6\u306a\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u306e\u7ba1\u7406\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001Emacs Lisp 24 \u304b\u3089\u5b9f\u88c5\u3055\u308c\u305f\u5b57\u53e5\u675f\u7e1b\u3068 pcase \u3092\u6d3b\u7528\u3057\u305f\u3001\u7d99\u7d9a\u6e21\u3057\u5f62\u5f0f\uff08CPS\uff09\u5909\u63db\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u30de\u30af\u30ed\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5f0f\u306e\u5909\u63db\u3092\u884c\u306a\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u306f\u3001Lisp\u7cfb\u8a00\u8a9e\u306e\u5927\u304d\u306a\u5229\u70b9\u306e\u4e00\u3064\u3067\u3059\u3002\n\u306f\u3058\u3081\u306b\n========\n\n\u307e\u3082\u306a\u304f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b Emacs 25 \u306e\u65b0\u6a5f\u80fd\u306e\u4e00\u3064\u306b\u300c\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf (\u751f\u6210\u5b50 generator)\u300d\u304c\u3042\u308a\u307e\u3059\u3002 \uff08 `/lisp/emacs-lisp/generator.el/` )\n\n\u3053\u3053\u3067\u306f\u3001\u672c\u6a5f\u80fd\u306e\u6982\u8981\u3068\u5229\u7528\u6cd5\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u306f\n================\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\uff08\u751f\u6210\u5b50 generator\uff09\u306f\u3001\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u5ea6\u306b\u3001\u524d\u56de\u306e\u547c\u3073\u51fa\u3057\u305f\u72b6\u6cc1\u3092\u899a\u3048\u3066\u3044\u3066\u3001\u305d\u308c\u306b\u57fa\u3065\u3044\u3066\u65b0\u3057\u3044\u5024\u3092\u751f\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n\u306a\u304a\u3001Emacs 25\u306e `generator.el` \u3067\u306f\u3001\u6b21\u3005\u3068\u5024\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u53cd\u5fa9\u5b50 Iterator\uff09\u3068\u547c\u3070\u308c\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308a\u51fa\u3059\u95a2\u6570\u3092\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3067\u306f\u307e\u3068\u3081\u3066\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u547c\u3073\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306b\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u6307\u5b9a\u3055\u308c\u305f\u756a\u53f7\u306e\u5024\u3092\u8fd4\u3059\u95a2\u6570\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u5358\u7d14\u306a\u95a2\u6570\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` common-lisp\n  (defun fibonacci (n)\n    (let ((a 1) (b 1) (c 0))\n      (dotimes (_i n)\n        (setq c b)\n        (setq b a)\n        (setq a (+ a c)))\n      c))\n```\n\n\u3053\u3053\u3067\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u5404\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001\u4f55\u3089\u304b\u306e\u51e6\u7406\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u5f53\u8a72\u95a2\u6570\u306b\u3001\u51e6\u7406\u3092\u3055\u305b\u305f\u3044\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n``` common-lisp\n  (defun fibonacci (n func)\n    (let ((a 1) (b 1) (c 0))\n      (dotimes (_i n)\n        (funcall func c)\n        (setq c b)\n        (setq b a)\n        (setq a (+ a c)))))\n```\n\n\u305f\u3060\u3001\u5f15\u6570\u3068\u306a\u308b\u95a2\u6570 `func` \u306b\u3001\u8272\u3005\u306a\u60c5\u5831\uff08\u305f\u3068\u3048\u3070\u547c\u3073\u51fa\u3057\u5074\u306e\u6587\u8108\u306a\u3069\uff09\u3092\u6e21\u3057\u305f\u3044\u3068\u306a\u308b\u3068\u3001\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u306f\u7c21\u5358\u306b\u306f\u3044\u304d\u307e\u305b\u3093\u3002\n\n\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u5b9f\u884c\u4e2d\u306b\u3001\u547c\u3073\u51fa\u3057\u5143\u306b\u9014\u4e2d\u7d50\u679c\u3092\u8fd4\u3059\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u4e0a\u8a18\u3092\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u7528\u3044\u3066\u8a18\u8ff0\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` common-lisp\n  (setq lexical-binding t) ; \u5b57\u53e5\u675f\u7e1b\u306f\u6709\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n  (require 'generator)\n\n  (iter-defun fibonacci ()\n    \"Fibonacci Function.\"\n    (let ((a 1) (b 1) (c 0))\n      (while t\n        (iter-yield c)\n        (setq c b)\n        (setq b a)\n        (setq a (+ a c)))))\n```\n\n\u3053\u3053\u3067\u3001 `iter-yeid` \u95a2\u6570\u306f\u3001\u73fe\u5728\u306e\u5024\u3092\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u3057\u3066\u51e6\u7406\u3092\u4e00\u65e6\u4e2d\u65ad\u3057\u3001\u518d\u5ea6\u3001\u547c\u3073\u51fa\u3057\u5143\u304c `iter-next` \u3092\u547c\u3076\u307e\u3067\u73fe\u5728\u306e\u72b6\u6cc1\u3067\u5f85\u3061\u7d9a\u3051\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u304b\u3089\uff11\uff10\u500b\u3001\u5024\u3092\u53d6\u308a\u51fa\u3059\u4f8b\u3067\u3059\u3002\n\n``` common-lisp\n  (defun call-fibonacci ()\n    (let ((fib (fibonacci)))\n      (dotimes (_i 10)\n        (message \"%s\" (iter-next fib)))))\n```\n\n\u4e00\u6642\u5909\u6570 `fib` \u306b\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u308a\u3001\u305d\u308c\u3092\u5f15\u6570\u3068\u3057\u3066 `iter-next` \u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e `iter-yield` \u3067\u8fd4\u3055\u308c\u308b\u5024\u304c\u6b21\u3005\u3068\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\u305d\u306e\u9593\u3001 `fib` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u90e8\u306e\u72b6\u614b\u306f\u7dad\u6301\u3055\u308c\u307e\u3059\u3002\uff08\u4e00\u7a2e\u306e\u5358\u7d14\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3068\u3044\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\uff09\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u30eb\u30fc\u30d7\u3067\u53d6\u308a\u51fa\u3059\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b `iter-do` \u3084\u3001 \u5f37\u529b\u306a\u30eb\u30fc\u30d7\u30de\u30af\u30ed `cl-loop` \u306e\u30ad\u30fc\u30ef\u30fc\u30c9 `iter-by` \u3068\u3057\u3066\u3082\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n\uff08\u6ce8\u610f\uff1a\u4ee5\u4e0b\u306f\u3001Emacs\u306e\u6271\u3048\u308b\u6574\u6570\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u308b\u3068\u8ca0\u6570\u3068\u6b63\u6570\u3092\u7e70\u308a\u8fd4\u3059\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308a\u307e\u3059\u3002\uff09\n\n``` common-lisp\n  (defun call-fibonacci ()\n    (let ((fib (fibonacci)))\n      (iter-do (i fib)\n        (message \"%s\" i))))\n```\n\n``` common-lisp\n  (defun call-fibonacci ()\n    (let ((fib (fibonacci)))\n      (cl-loop\n        for i iter-by fib\n        do (message \"%s\" i))))\n```\n\n\u4ee5\u4e0b\u306f\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u95a2\u6570\u5074\u3067\u3001\u5024\u304c\u5de8\u5927\u3059\u304e\u3066\u8ca0\u6570\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u51e6\u7406\u3092\u7d42\u4e86\u3055\u305b\u308b\uff08\u6570\u5217\u3092\u751f\u6210\u3057\u5c3d\u304f\u3059\uff09\u4f8b\u3067\u3059\u3002\n\n``` common-lisp\n  (iter-defun fibonacci ()\n    \"Fibonacci Function.\"\n    (let ((a 1) (b 1) (c 0))\n      (while (> c -1) ;; \u8ca0\u6570\u306b\u306a\u3063\u305f\u3089\u7d42\u4e86\n        (iter-yield c)\n        (setq c b)\n        (setq b a)\n        (setq a (+ a c)))))\n```\n\n\u3053\u306e\u5834\u5408\u3001 `cl-loop` \u3084\u3001 `iter-do` \u306f\u3001 `fibonacci` \u304cEmacs\u306e\u6b63\u306e\u6574\u6570\u3067\u6271\u3048\u308b\u6700\u5927\u6570\u307e\u3067\u5230\u9054\u3057\u305f\u969b\u3001\u751f\u6210\u5024\u3092\u6d88\u8cbb\u3057\u5c3d\u304f\u3057\u305f\u3068\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002\u5024\u3092\u51fa\u3057\u5c3d\u304f\u3057\u305f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u306a\u304a\u3082 `iter-next` \u3092\u547c\u3073\u51fa\u3059\u3068\u3001 `iter-end-of-sequence` \u4f8b\u5916\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3068\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3068\u3057\u3066\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n==========================================================\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f `iter-yield` \u306e\u5f15\u6570\u3067\u547c\u3073\u51fa\u3057\u5143\u306b\u5024\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u306f\u3001\u547c\u3073\u51fa\u3057\u5143\u3082 `iter-next` \u306e\u7b2c\uff12\u5f15\u6570\u306b\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u5074\u306b\u5024\u3092\u9001\u308c\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092 **\u7e4b\u3052\u3066** \u66f8\u304f\u3053\u3068\u3067\u3001\u6b21\u3005\u3068\u751f\u6210\u3055\u308c\u305f\u5024\u3092\u5206\u5c90\u30fb\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3067\u6e21\u3057\u3066\u3044\u304f\u3001\u300c\u30c7\u30fc\u30bf\u51e6\u7406\u30fb\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u30b0\u30e9\u30d5\u300d\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306b\u3001\u300c\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u300d\u306e\u5024\u3092\u3001\u300c\u53d7\u3051\u53d6\u3063\u305f\u5024\u3092\u305d\u306e\u307e\u307e\u8868\u793a\u3059\u308b\u95a2\u6570\u300d\u3068\u300c\u53d7\u3051\u53d6\u3063\u305f\u95a2\u6570\u3092\u4e8c\u500d\u3059\u308b\u3057\u3066\u6b21\u306b\u6e21\u3059\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u300d\u306e\uff12\u3064\u306b\u5206\u5c90\u3055\u305b\u3001\u5f8c\u8005\u3092\u3055\u3089\u306b\u3001\u300c\u53d7\u3051\u53d6\u3063\u305f\u95a2\u6570\u3092\u8868\u793a\u3059\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u300d\u306b\u7e4b\u3052\u308b\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\u5358\u7d14\u306a\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u4e2d\u9593\u51e6\u7406\u3092\u62c5\u3046\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u5024\u3092\u4e00\u65b9\u7684\u306b\u547c\u3073\u51fa\u3057\u5074\u304b\u3089\u6e21\u3059\u3060\u3051\u3067\u3001\u547c\u3073\u51fa\u3055\u308c\u305f\u5074\u304b\u3089\u306f\u8fd4\u3055\u306a\u3044\u305f\u3081\u3001 `iter-yield` \u306e\u5f15\u6570\u306f `nil` \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u3088\u3046\u306b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u5024\u3092\u4e00\u65b9\u7684\u306b\u547c\u3073\u51fa\u3057\u5143\u306b\u6e21\u3059\u3060\u3051\u3067\u306a\u304f\u3001\u5024\u3092\u4e00\u65b9\u7684\u306b\u53d7\u3051\u53d6\u308b\u3060\u3051\u3001\u3068\u3044\u3046\u4f7f\u3044\u65b9\u3082\u3067\u304d\u307e\u3059\u3002\n\n``` common-lisp\n  (iter-defun times (num next)\n    (let (val)\n      (while t\n        (setq val (* num (iter-yield nil)))\n        (iter-next next val))))\n\n  (iter-defun message-out (format)\n    (while t\n      (message format (iter-yield nil))))\n\n  (defun pipeline-test ()\n    (let* ((fib (fibonacci))\n           (out1 (message-out \"orig=%s\"))\n           (out2 (message-out \"x2=%s\"))\n           (x2 (times 2 out2)))\n      (iter-do (i fib)\n        (iter-next out1 i)\n        (iter-next x2 i))))\n```\n\n\u3053\u308c\u306f\u305d\u306e\u307e\u307e\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u9001\u4fe1\u30fb\u53d7\u4fe1\u3068\u3057\u3066\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30b3\u30eb\u30fc\u30c1\u30f3\u3068\u3057\u3066\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n==============================\n\n\u5f93\u6765\u3001\u518d\u5229\u7528\u3055\u308c\u308b\u51e6\u7406\u306f\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u304b\u3089\u306f\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3068\u3057\u3066\u5206\u304b\u308c\u3066\u304a\u308a\u3001\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3068\u306a\u308b\u95a2\u6570\u306f\u547c\u3073\u51fa\u3055\u308c\u308b\u6bce\u306b\u3001\u6587\u8108\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u3057\u304b\u3057\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u306f\u3001\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u306e **\u72b6\u614b** \u304a\u3088\u3073 **\u7d99\u7d9a** \u304c\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\uff12\u3064\u306e\u30bf\u30b9\u30af\u3092\u4ea4\u4e92\u306b\u5207\u308a\u66ff\u3048\u306a\u304c\u3089\u3001\u304a\u4e92\u3044\u306b\u901a\u4fe1\u3067\u304d\u307e\u3059\u3002\n\n``` common-lisp\n  (iter-defun task-b ()\n    (let (result)\n      (message \"task b-1\")\n      (setq result (iter-yield 100))\n      (message \"task b-2, result=%s\" result)\n      (iter-yield 200)))\n\n  (defun task-a ()\n    (let ((task-b (task-b)) result)\n      (message \"task a-1\")\n      (setq result (iter-next task-b))\n      (message \"task a-2, result=%s\" result)\n      (setq result (iter-next task-b 1))\n      (message \"task a-3, result=%s\" result)))\n```\n\n\u4e0a\u8a18\u306e\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\u30d0\u30c3\u30d5\u30a1\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\uff09\n\n``` text\n  (task-a) \u23ce\n  step a-1\n  step b-1\n  step a-2, result=100\n  step b-2, result=1\n  step a-3, result=200\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u547c\u3073\u51fa\u3057\u5143\u3068\u3001\u547c\u3073\u51fa\u3057\u5148\u3092\u4ea4\u4e92\u306b\u5207\u308a\u66ff\u3048\u308b\u5b9f\u884c\u624b\u6cd5\u306f **\u30b3\u30eb\u30fc\u30c1\u30f3** \u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\n\u975e\u540c\u671f\u547c\u3073\u51fa\u3057\uff08\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0I/O\uff09\u3068\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n===================================================\n\n\u30b3\u30eb\u30fc\u30c1\u30f3\u306e\u4e00\u4f8b\u3068\u3057\u3066\u3001\u5916\u90e8\u30d7\u30ed\u30bb\u30b9\u306e\u975e\u540c\u671f\u306a\u547c\u3073\u51fa\u3057\u5f8c\u306b\u3001\u4e00\u65e6\u3001\u5b9f\u884c\u72b6\u614b\u3092\u4e2d\u65ad\u3057\u3066Emacs\u306e\u30b3\u30de\u30f3\u30c9\u30eb\u30fc\u30d7\u306b\u5e30\u308a\u3064\u3064\u3082\u3001\u547c\u3073\u51fa\u3057\u304c\u7d42\u4e86\u3057\u305f\u5f8c\u3001\u518d\u3073\u3001\u4e2d\u65ad\u3057\u305f\u5834\u6240\u304b\u3089\u7d99\u7d9a\u3059\u308b\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u5916\u90e8\u30b3\u30de\u30f3\u30c9 `sleep 10` \u306710\u79d2\u5f85\u3064\u51e6\u7406\u3092\u547c\u3073\u51fa\u3057\u3001\u305d\u306e\u306e\u3061\u3001\u51e6\u7406\u3092\u518d\u958b\u3057\u307e\u3059\u3002\u975e\u540c\u671f\u547c\u3073\u51fa\u3057\u306e\u5f8c\u306e\u51e6\u7406\u3092\u6307\u5b9a\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001 `set-process-sentinel` \u95a2\u6570\u306b\u3001\u5225\u306e\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n``` common-lisp\n  (defun test-process (a)\n    (let* ((process (start-process \"sleep\" nil  \"sleep\" (number-to-string a))))\n      (set-process-sentinel process 'test-sentinel)\n      (process-put process 'a a)))\n\n  (defun test-sentinel (process state)\n    (let ((a (process-get process 'a)))\n      (message \"Process change, state=%s a=%s\" state a)))\n\n  (test-process 10) ;; 10\u79d2\u5f8c\u306b\u518d\u958b\n```\n\n\u3053\u306e\u65b9\u5f0f\u3067\u306f\u3001 `test-sentinel` \u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u6642\u306b\u306f\u3001 `test-process` \u306f\u7d42\u4e86\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u72b6\u614b\u306f\u5931\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u975e\u540c\u671f\u5b9f\u884c\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u3082\u60c5\u5831\u3092\u6e21\u3059\u305f\u3081\u3001\u5f93\u6765\u306f\u30d7\u30ed\u30bb\u30b9\u3092\u9375\u306b\u3057\u305f\u3001\u30c7\u30fc\u30bf\u4fdd\u5b58\u5c02\u7528\u306e\u95a2\u6570 (`process-put`, `process-get`) \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u3057\u304b\u3057\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f7f\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u975e\u540c\u671f\u547c\u3073\u51fa\u3057\u5f8c\u3001 `iter-yield` \u3067\u5f85\u6a5f\u3057\u3064\u3064\u3001\u547c\u3073\u51fa\u3057\u5f8c\u306b\u4e2d\u65ad\u3057\u305f\u5834\u6240\u304b\u3089\u7d99\u7d9a\u3067\u304d\u307e\u3059\u3002\n\n``` common-lisp\n  (iter-defun test-process-2 (a)\n    (let* ((process (start-process \"sleep\" nil  \"sleep\" (number-to-string a)))\n           (result))\n      (set-process-sentinel process 'test-sentinel-2)\n      (setq state (iter-yield process))\n      (message \"Process change, state=%s a=%s\" state a)\n      (iter-yield nil)))\n\n  (defun test-sentinel-2 (process state)\n    (let ((gen (process-get process 'generator)))\n      (iter-next gen state)))\n\n  (let* ((gen (test-process-2 10)) (process (iter-next gen)))\n    (process-put process 'generator gen))\n```\n\n\u5f85\u6a5f\u4e2d\u3082\u6587\u8108\u304c\u7dad\u6301\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u5fc5\u8981\u306a\u60c5\u5831\u3092\u3044\u3061\u3044\u3061 `process-put` \u3067\u9000\u907f\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u7ba1\u7406\u3068\u3057\u3066\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n====================================\n\n\u4e0a\u8ff0\u306e\u3088\u3046\u306b\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u300c\u547c\u3073\u51fa\u3057\u5143\u3068\u547c\u3073\u51fa\u3055\u308c\u305f\u95a2\u6570\u3068\u306e\u9593\u3067\u306e\u5b9f\u884c\u4e2d\u3067\u306e\u901a\u4fe1\u300d\u3068\u3001\u300c\u547c\u3073\u51fa\u3055\u308c\u305f\u5074\u306e\u81ea\u4e3b\u7684\u306a\u5f85\u6a5f\u300d\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u5b9f\u884c\u305d\u306e\u3082\u306e\u3092\u4e2d\u6b62\u3055\u305b\u308b\u3001 `iter-close` \u95a2\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u306e\u6a5f\u80fd\u304c\u3042\u308c\u3070\u3001\u5b9f\u306f\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30fb\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u4f5c\u308b\u3053\u3068\u306f\u305d\u308c\u307b\u3069\u96e3\u3057\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u4ee5\u4e0b\u306f\u3001\uff12\u3064\u306e\u30bf\u30b9\u30af\u3001\u3072\u3068\u3064\u76ee\u306f \"Hello Hoge!\" \u3092 980\u56de\u8868\u793a\u3059\u308b\u30bf\u30b9\u30af\u3068\u3001\u3075\u305f\u3064\u76ee\u306f \"Hello Page!\" \u3092 1000\u56de\u8868\u793a\u3059\u308b\u30bf\u30b9\u30af\u3092\u3001\u4ea4\u4e92\u306b\u5b9f\u884c\u3059\u308b\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u4f8b\u3067\u3059\u3002\n\n``` common-lisp\n  (iter-defun task-hoge ()\n    (dotimes (_i 980)\n      (message \"Hello Hoge!\")\n      (iter-yield nil)))\n\n  (iter-defun task-page ()\n    (dotimes (_i 1000)\n      (message \"Hello Page!\")\n      (iter-yield nil)))\n\n  (defun task-scheduling ()\n    (let ((task-table (make-hash-table :test 'equal)))\n      (puthash 1 (task-hoge) task-table)\n      (puthash 2 (task-page) task-table)\n      (while (/= 0 (hash-table-count task-table))\n        (maphash (lambda (id task)\n                   (condition-case err\n                       (iter-next task)\n                     (iter-end-of-sequence\n                      (remhash id task-table))))\n                 task-table))))\n```\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u30bf\u30b9\u30af\u3092\u307e\u305a\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306b\u30bf\u30b9\u30afID\u3068\u3068\u3082\u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\n\u30bf\u30b9\u30af\u304c\u7d42\u4e86\u3057\u3066\u3082\u3055\u3089\u306b `iter-next` \u3092\u547c\u3076\u3068\u3001 `iter-end-of-sequence` \u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u306e\u3067\u3001\u305d\u308c\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u305f\u3089\u305d\u306eID\u3067\u30bf\u30b9\u30af\u3092\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u306b\u30bf\u30b9\u30af\u304c\u4e00\u3064\u3082\u7121\u304f\u306a\u3063\u305f\u3089\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002\n\n`(task-scheduling)` \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u307e\u305a\u30bf\u30b9\u30afHoge\u3068\u30bf\u30b9\u30af Page\u304c\u4ea4\u4e92\u306b980\u56de\u5b9f\u884c\u3055\u308c\u3001\u305d\u306e\u5f8c\u3001\u30bf\u30b9\u30afPage\u3060\u3051\u304c20\u56de\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n``` text\n  Hello Hoge!\n  Hello Page!\n  Hello Hoge!\n  ...\n  Hello Page!\n  Hello Hoge!\n  Hello Page! [21 times]\n```\n\n\u30bf\u30b9\u30af\u9593\u540c\u671f\u3068\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n==========================\n\n\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3068\u3001\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u7ba1\u7406\u304c\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u30bf\u30b9\u30af\u9593\u306e\u30bb\u30de\u30d5\u30a9\u3084\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u306a\u3069\u3082\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306f\uff11\uff10\uff10\u500b\u306e\u30bf\u30b9\u30af\u304c\uff11\uff10\u306e\u30bb\u30de\u30d5\u30a9\u30921/2\u306e\u78ba\u7387\u3067\u30ed\u30c3\u30af\u30fb\u30ea\u30ea\u30fc\u30b9\u3057\u3001\uff13\u56de\u30ed\u30c3\u30af\u3067\u304d\u305f\u30bf\u30b9\u30af\u304b\u3089\u7d42\u4e86\u3059\u308b\u4f8b\u3067\u3059\u3002\n\n``` common-lisp\n  (iter-defun semaphore (n)\n    (let ((i 0) signal task-id)\n      (while t\n        (setq task-id (iter-yield nil))\n        (setq signal (car task-id))\n        (setq task-id (cdr task-id))\n        (if (equal signal 'lock)\n            (if (< n i)\n                (progn (iter-yield nil) t)\n              (incf i)\n              (iter-yield t))\n          (if (equal signal 'release)\n              (if (< i 1)\n                  (iter-yield nil)\n                (decf i)\n                (iter-yield t))\n            (error \"signal error!\"))))))\n\n  (iter-defun task-sem (id sem)\n    (let ((count 0) lock)\n      (while (< count 3)\n        (when (= 1 (random 2))\n          (if (null lock)\n              (progn\n                (if (setq lock (iter-next sem `(lock ,id)))\n                    (message \"task %s: success to lock semaphore.\" id)\n                  (message \"task %s: failed to lock semaphore.\" id)))\n            (message \"task %s: releasing semaphore!\" id)\n            (if (setq lock (iter-next sem `(release ,id)))\n                (message \"task %s: success to release semaphore.\" id)\n              (message \"task %s: failed to release semaphre.\" id))\n            (setq lock (not lock)))\n          (iter-next sem))\n        (if lock (incf count))\n        (iter-yield nil))\n      (message \"task %s: finish task.\" id)\n      (iter-next sem `(release ,id))\n      (iter-next sem)))\n\n  (defun run-tasks ()\n    (let ((task-table (make-hash-table :test 'equal))\n          (semaphore (semaphore 10)))\n      (iter-next semaphore)\n      (dotimes (i 100)\n        (puthash i (task-sem i semaphore) task-table))\n      (while (/= 0 (hash-table-count task-table))\n        (message \"scheduler: current tasks =%s\" (hash-table-count task-table))\n        (maphash (lambda (id task)\n                   (condition-case err\n                       (iter-next task)\n                     (iter-end-of-sequence\n                      (message \"task %s finished.\" id)\n                      (remhash id task-table))))\n                 task-table))))\n```\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u547c\u3073\u51fa\u3057\n======================================\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u901a\u5e38\u3067\u306f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u547c\u3073\u51fa\u305b\u307e\u305b\u3093\u3002 `iter-yield` \u3067\u306e\u5024\u306e\u51fa\u529b\u3092\u3001\u4e0b\u4f4d\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306b\u4ee5\u4e0a\u3059\u308b\u95a2\u6570 `iter-yield-from` \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n\u305f\u3068\u3048\u3070\u3001\u901a\u5e38\u306e\u7af9\u5185\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` common-lisp\n  (defun tarai (x y z)\n    (if (<= x y) y\n      (tarai\n       (tarai (1- x) y z)\n       (tarai (1- y) z x)\n       (tarai (1- z) x y))))\n```\n\n\u3053\u308c\u3092\u3001x,y,z \u306e\u5024\u3092\u95a2\u6570\u306b\u5165\u308b\u305f\u3073\u306b\u53d6\u308a\u51fa\u3059\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u3057\u3066\u8868\u73fe\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` common-lisp\n  (iter-defun tarai (x y z)\n    (iter-yield (list x y z))\n    (if (<= x y) y\n      (iter-yield-from (tarai\n       (iter-yield-from (tarai (1- x) y z))\n       (iter-yield-from (tarai (1- y) z x))\n       (iter-yield-from (tarai (1- z) x y))))))\n```\n\n\u4ee5\u4e0b\u306b\u3001 `condition-case` \u3092\u4f7f\u3063\u305f\u5229\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u8fd4\u308a\u5024\uff08\u4e0a\u8a18\u306e `y` \uff09\u306f\u3001 `iter-end-of-sequence` \u4f8b\u5916\u306e `cdr` \u30bb\u30eb\u306b\u5165\u308a\u307e\u3059\u3002\n\n``` common-lisp\n  (let ((tarai (tarai 4 2 0)))\n    (condition-case err\n        (while t (message \"%s\" (iter-next tarai)))\n      (iter-end-of-sequence\n       (cdr err))))\n```\n\n\u7d99\u7d9a\u6e21\u3057\u5f62\u5f0f\uff08CPS\uff09\u5909\u63db\u3068\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n=====================================\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u5b9f\u884c\u9014\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e2d\u65ad\u3001\u5f85\u6a5f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001Emacs\u306bScheme\u306e `call-with-current-continuation` (`call/cc`) \u306e\u3088\u3046\u306a\u3001\u73fe\u5728\u306e\u7d99\u7d9a\u72b6\u6cc1\u3092\u53d6\u308a\u51fa\u3059\u5c02\u7528\u306e\u6a5f\u80fd\u304c\u7d44\u307f\u8fbc\u307e\u308c\u305f\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u73fe\u5728\u306e `generator.el` \u3067\u306f\u3001 `iter-defun` \u3067\u5b9a\u7fa9\u3055\u308c\u305f\u95a2\u6570\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u300c\u7d99\u7d9a\u6e21\u3057\u5f62\u5f0f\uff08Continuation Passing Style, CPS\uff09\u5909\u63db\u300d\u3068\u547c\u3070\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u7d99\u7d9a\u72b6\u614b\u3092\u5f15\u6570\u3068\u3057\u3066\u53d6\u308b\u5f0f\u306b\u5909\u5f62\u3055\u308c\u3001\u305d\u308c\u3092\u30af\u30ed\u30fc\u30b8\u30e3\uff08\u9589\u5305 closure\uff09\u3068\u3057\u3066\u751f\u6210\u30fb\u8a55\u4fa1\u3059\u308b\u95a2\u6570\u3068\u3057\u3066\u3001\u6539\u3081\u3066\u5b9a\u7fa9\u3057\u306a\u304a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u3001\u5909\u6570\u7b49\u3092\u675f\u7e1b\u3057\u305f\u5f62\u3067\u30e9\u30e0\u30c0\u5f0f\u3092\u8868\u73fe\u3057\u307e\u3059\u3002Emacs \u3067\u306f\u3001\u30d0\u30fc\u30b8\u30e7\u30f324\u3088\u308a\u5b9f\u88c5\u3055\u308c\u3001 `lexical-binding` \u5909\u6570\u304c `t` \u306e\u969b\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` common-lisp\n  (setq plus3 (let ((a 3)) (lambda (x) (+ a x))))\n  \u2192 (closure ((a . 3) t) (x) (+ a x))\n  (funcall plus3 5)\n  \u2192 8\n```\n\nCPS\u5909\u63db\u306f\u3001\u901a\u5e38\u306e\u5f0f\u3092\u3001\u30cd\u30b9\u30c8\u3057\u306a\u3044\u5358\u7d14\u306a\u5f0f\uff0b\u6b21\u306b\u8a55\u4fa1\u3059\u308b\u5f0f\u3078\u306e\u5f15\u304d\u6e21\u3057\u3001\u3068\u3044\u3046\u5f62\u306b\u5909\u5f62\u3057\u307e\u3059\u3002\u8a55\u4fa1\u3059\u308b\u9806\u756a\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u5834\u5408\u304c\u3042\u308b\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u5f0f\u3092\u3001\u5358\u7d14\u5f0f\u3092\u8a55\u4fa1\u3059\u308b\u9806\u756a\u306b\u4e26\u3079\u76f4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\n\nWikipedia \u306e [\u7d99\u7d9a\u6e21\u3057\u30b9\u30bf\u30a4\u30eb](https://ja.wikipedia.org/wiki/%E7%B6%99%E7%B6%9A%E6%B8%A1%E3%81%97%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB) \u3067\u6319\u3052\u3089\u308c\u3066\u3044\u308b\u3001\u30d4\u30bf\u30b4\u30e9\u30b9\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u95a2\u6570\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u307e\u305a\u5f15\u6570\u3092\u4e8c\u4e57\u3057\u3001\u52a0\u7b97\u3057\u3001\u305d\u3057\u3066\u5e73\u65b9\u6839\u3092\u6c42\u3081\u308b\u9806\u756a\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n``` common-lisp\n  (defun pyth (x y)\n   (sqrt (+ (* x x) (* y y))))\n```\n\n\u3053\u308c\u3092\u3001\u4e57\u7b97\u30fb\u52a0\u7b97\u30fb\u5e73\u65b9\u6839\u306e\u8a08\u7b97\u306e\u5168\u3066\u306e\u95a2\u6570\u306b\u5bfe\u3057\u3066CPS\u5909\u63db\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u5165\u308c\u5b50\u304c\u7121\u304f\u306a\u3063\u305f\u5358\u7d14\u306a\u5f0f\u304c\u3001\u8a55\u4fa1\u3059\u308b\u9806\u756a\uff08\u4e57\u7b97\u2192\u4e57\u7b97\u2192\u52a0\u7b97\u2192\u5e73\u65b9\u6839\uff09\u306e\u901a\u308a\u306b\u4e26\u3073\u307e\u3059\u3002\n\n``` common-lisp\n  (defun pyth& (x y k)\n    (*& x x (lambda (x2)\n      (*& y y (lambda (y2)\n        (+& x2 y2 (lambda (x2py2)\n          (sqrt& x2py2 k))))))))\n```\n\n\u3053\u3053\u3067\u3001 `*&`, `+&`, `sqrt&` \u306f\u3001\u3082\u3068\u306e `*`, `+`, `sqrt` \u95a2\u6570\u304b\u3089\u3001\u5f15\u6570\u3092\u8a55\u4fa1\u3057\u305f\u5f8c\u306b\u6700\u5f8c\u306e\u5f15\u6570\u306e\u95a2\u6570\u306b\u3001\u7d50\u679c\u3092\u6e21\u3059\u3088\u3046\u306b\u5909\u5f62\u3057\u305f\u95a2\u6570\u3067\u3059\u3002\n\n``` common-lisp\n  (defun +& (a b k) (funcall k (+ a b)))\n  (defun *& (a b k) (funcall k (* a b)))\n  (defun sqrt& (a k) (funcall k (sqrt a)))\n```\n\n\u7e70\u308a\u8fd4\u3057\u3084\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f0f\u306eCPS\u5909\u63db\u3082\u5b9a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002Wikipedia\u306b\u3082\u3042\u308b\u968e\u4e57\u3092\u6c42\u3081\u308b\u95a2\u6570\u306e\u4f8b\u3067\u306f\u3001\n\n``` common-lisp\n  (defun factorial (n)\n    (if (= n 0) 1\n      (* n (factorial (- n 1)))))\n```\n\n\u3053\u308c\u3092CPS\u5909\u63db\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff08\u5358\u7d14\u5316\u306e\u305f\u3081\u3001\u6bd4\u8f03\u30fb\u4e57\u7b97\u30fb\u6e1b\u7b97\u306eCPS\u5909\u63db\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\u5b8c\u5168\u7248\u306f\u3001Wikipedia\u306e\u9805\u76ee\u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\uff09\u3002\n\n``` common-lisp\n  (defun factorial& (n k)\n    (if (= n 0)\n        (funcall k 1)\n      (factorial& (- n 1) (lambda (x) (funcall k (* n x))))))\n```\n\n\u5143\u306e\u5f0f\u3067\u306f\u4e57\u7b97\u306e\u5f15\u6570\u304c\u95a2\u6570\u547c\u3073\u51fa\u3057\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5909\u63db\u5f8c\u306f\u3001\u4e57\u7b97\u306e\u5f15\u6570\u306f\u5909\u6570\u306e\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 `(factorial& 4 'identity)` \u3067\u8a55\u4fa1\u3059\u308b\u3068\u3001\u300c\u5f15\u6570\u30922\u500d\u306b\u3057\u3066\u3001\u300c\u5f15\u6570\u30923\u500d\u306b\u3057\u3066\u3001\u300c\u5f15\u6570\u30924\u500d\u3059\u308b\u95a2\u6570\u300d \u306b\u6e21\u3059\u95a2\u6570\u300d\u306b\u6e21\u3059\u95a2\u6570\u300d\u306b\u3001\uff11\u3092\u6e21\u3057\u307e\u3059\u3002\n\n\u3053\u306e `factorial&` \u95a2\u6570\u3092\u9014\u4e2d\u3067\u505c\u6b62\u3001\u518d\u958b\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002 `factorial&` \u95a2\u6570\u3092\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u72b6\u614b\u3092\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u3059\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u307f\u307e\u3059\u3002\u4e0a\u5f0f\u306e `factorial&` \u3092 `list` \u306b\u3057\u3001\u3053\u308c\u304c\u9014\u4e2d\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3001 `cont` \u30b7\u30f3\u30dc\u30eb\u3092\u5148\u982d\u306b\u52a0\u3048\u3066\u307f\u307e\u3059\u3002\n\n``` common-lisp\n  (defun factorial& (n k)\n    (if (= n 0)\n        (funcall k 1)\n      (list 'cont (- n 1) (lambda (x) (funcall k (* n x))))))\n```\n\n\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u9014\u4e2d\u306e\u4e2d\u65ad\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u308c\u3092\u518d\u958b\u3055\u305b\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u3001\u5358\u72ec\u3067\u547c\u3073\u51fa\u3059\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u304c\u8fd4\u308a\u307e\u3059\u3002\n\n``` common-lisp\n  (factorial& 3 'identity)\n  \u2192 (cont 2 (closure ((c . identity) (n . 3) t) (x) (funcall c (* n x))))\n```\n\n\u3053\u308c\u3092\u3001\u5148\u982d\u304c `cont` \u3067\u306a\u304f\u306a\u308b\u307e\u3067\u3001\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n``` common-lisp\n  (let ((cont (factorial& 6 'identity)))\n    (while (equal (car-safe cont) 'cont)\n      (message \"factorial& \u306e\u7d99\u7d9a=%s\" cont)\n      ;; \u5b9f\u884c\u518d\u958b\n      (setq cont (apply 'factorial& (cdr cont))))\n    cont)\n  \u2192 720\n```\n\n\u3059\u308b\u3068\u3001\u6bce\u56de\u3001\u968e\u4e57\u306e\u8a08\u7b97\u306f\u4e2d\u65ad\u3057\u3066\u3001\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u308a\u3001\u305d\u3053\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u305f\u5f8c\u3001\u518d\u958b\u3055\u308c\u307e\u3059\u3002\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u5f0f\u3092\u4e2d\u65ad\u30fb\u7d99\u7d9a\u3055\u305b\u305f\u3044\u90e8\u5206\u3067CPS\u5909\u63db\u3092\u3059\u308b\u3068\u3001\u5b9f\u884c\u306e\u4e2d\u65ad\uff08\u3092\u542b\u3080\u3001\u69d8\u3005\u306a\u30d5\u30ed\u30fc\u306e\u5236\u5fa1\uff09\u304c\u53ef\u80fd\u306b\u306a\u308a\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\uff08 `generator.el` \u3067\u306f\u3001 `cps--transform-1` \u95a2\u6570\u304c\u3001\u5b9f\u969b\u306b\u5f0f\u306eCPS\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\uff09\n\n\u6700\u5f8c\u306b\n======\n\n\u672c\u8a18\u4e8b\u3067\u306f\u3001Emacs 25\u306e\u65b0\u6a5f\u80fd\u3067\u3042\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u5024\u3092\u6b21\u3005\u3068\u751f\u6210\u3059\u308b\u3053\u3068\u304b\u3089\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u307e\u3057\u305f\u3002\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u5185\u90e8\u72b6\u614b\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u3001\u81ea\u4e3b\u7684\u306b\u5f85\u6a5f\u3057\u3001\u4f55\u5ea6\u3067\u3082\u547c\u3073\u51fa\u3057\u5143\u304b\u3089\u547c\u3073\u51fa\u305b\u307e\u3059\u3002\u307e\u305f\u305d\u306e\u904e\u7a0b\u3067\u76f8\u4e92\u306b\u901a\u4fe1\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u4e00\u7a2e\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6a5f\u80fd\u3084\u3001\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u306e\u7ba1\u7406\u6a5f\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001\u672c\u6765\u306e\u76ee\u7684\u306e\u4ed6\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7528\u9014\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n-   \u30c7\u30fc\u30bf\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u3084\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u51e6\u7406\n-   \u5916\u90e8\u30d7\u30ed\u30bb\u30b9\u306e\u975e\u540c\u671f\u306a\u547c\u3073\u51fa\u3057\uff08\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0I/O\uff09\n-   \u30ce\u30f3\u30d7\u30ea\u30a8\u30f3\u30d7\u30c6\u30a3\u30d6\u306a\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u306e\u7ba1\u7406\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306f\u3001Emacs Lisp 24 \u304b\u3089\u5b9f\u88c5\u3055\u308c\u305f\u5b57\u53e5\u675f\u7e1b\u3068 `pcase` \u3092\u6d3b\u7528\u3057\u305f\u3001\u7d99\u7d9a\u6e21\u3057\u5f62\u5f0f\uff08CPS\uff09\u5909\u63db\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u30de\u30af\u30ed\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5f0f\u306e\u5909\u63db\u3092\u884c\u306a\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u306f\u3001Lisp\u7cfb\u8a00\u8a9e\u306e\u5927\u304d\u306a\u5229\u70b9\u306e\u4e00\u3064\u3067\u3059\u3002\n", "tags": ["emacs-lisp"]}