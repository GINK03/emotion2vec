{"context": "Padrino \u306e params \u306f String \u3067\u3082 Symbol \u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\nFoo::App.controllers :user do\n  get :show1 do\n    @user = User.find params[\"id\"] # String \u3067\u3082\u3068\u3063\u3066\u3053\u308c\u308b\n    render \"user/show\"\n  end\n\n  get :show2 do\n    @user = User.find params[:id] # Symbol \u3067\u3082\u3068\u3063\u3066\u3053\u308c\u308b\n    render \"user/show\"\n  end\nend\n\n\n\u3068\u3042\u308b\u65e5\u306e\u79c1\u306e\u5b9f\u88c5\n\u3069\u3063\u3061\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3082\u306e\u3060\u304b\u3089\u3001\u3066\u3063\u304d\u308a ActiveSupport::HashWithIndifferentAccess \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u304b\u3068\u601d\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002 1\nHoge::App.controllers :pager do\n  get :user do\n    # only_id \u30d1\u30e9\u30e1\u30fc\u30bf\u304c \"0\" or \"1\" \u3067\u6e21\u3055\u308c\u308b\u60f3\u5b9a\n    paginate User, params.merge(only_id: params[:only_id].to_i > 0) # (A)\n  end\n\n  get :hoge do\n    paginate Hoge, params\n  end\n\n  get :fuga do\n    paginate Fuga, params\n  end\n\n  define_method :paginate do |klass, params|\n    klass.paginate(target, params.symbolize_keys) # (B)\n  end\nend\n\nclass User\n  def self.paginate(only_id: false, max_id: nil)\n    # (C)\n    users = find_by_max_id max_id\n    items = only_id ? users.map(&:id) : users\n    { items: items, only_id: only_id ? 1 : 0, max_id: max_id } # (D)\n  end\nend\n\nonly_id \u30d1\u30e9\u30e1\u30fc\u30bf\u304c \"0\" \u306e\u5834\u5408\u3001 (D) \u306e items \u306b\u306f User \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u914d\u5217\u304c\u5165\u3063\u3066\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u305f\u3002 \u306e\u3060\u304c\u3001\u306a\u305c\u304b id \u306e\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n(C) \u6642\u70b9\u306e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068\nonly_id #=> \"0\"\n\n\u6587\u5b57\u5217 \"0\" \u306e\u307e\u307e\u3067\u3042\u308b\u2026\u3002 (A) \u3067 params[:only_id].to_i > 0 \u3057\u3066\u3044\u308b\u304b\u3089\u3001 false \u306b\u306a\u308b\u306f\u305a\u3068\u601d\u3044\u2026\n\u4eca\u5ea6\u306f (B) \u6642\u70b9\u306e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\nparams #=> { \"is_active\" => \"0\", :is_active => false }\n\n\u307b\u3046\uff01\nparams.symbolize_keys #=> { :is_active => \"0\" } \n\n\u307b\u3046\u30fb\u30fb\u30fb2\n\n\nSinatra::Base \u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\nPadrino \u306f Sinatra \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002 Sinatra::Base \u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u8a18\u8ff0\u304c\u3042\u3063\u305f\u3002(\u79c1\u304c\u4f7f\u3063\u3066\u3044\u305f\u3082\u306e\u306fv1.4.5)\nhttps://github.com/sinatra/sinatra/blob/v1.4.5/lib/sinatra/base.rb\nmodule Sinatra\n  # ...\n  class Base\n    # ...\n\n    def call!(env) # :nodoc:\n      # ...\n      @params   = indifferent_params(@request.params)\n      # ...\n    end\n\n    # Enable string or symbol key access to the nested params hash.\n    def indifferent_params(object)\n      case object\n      when Hash\n        new_hash = indifferent_hash\n        object.each { |key, value| new_hash[key] = indifferent_params(value) }\n        new_hash\n      when Array\n        object.map { |item| indifferent_params(item) }\n      else\n        object\n      end\n    end\n\n\n    # Creates a Hash with indifferent access.\n    def indifferent_hash\n      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }\n    end\n\n    # ...\n  end\n  # ...\nend\n\n\nSinatra::Base#indifferent_hash\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3042\u308b\nh = Hash.new { |hash,key| hash[key.to_s] if Symbol === key }\nh[\"one\"] = 1\nh[\"two\"] = 2\nh\n# => {\"one\"=>1, \"two\"=>2}\n\n# \u3082\u3061\u308d\u3093 String \u30ad\u30fc\u3067\u53d6\u3063\u3066\u3053\u308c\u308b\nh[\"one\"]\n# => 1\n\n# \u305d\u3057\u3066Symbol \u30ad\u30fc\u3067\u3082\u53d6\u3063\u3066\u3053\u308c\u308b\nh[:one]\n# => 1\n\nSymbol \u3067\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5834\u5408\u306f String \u306b\u5909\u63db\u3057\u3066\u5024\u3092\u53d6\u3063\u3066\u304d\u3066\u304f\u308c\u308b\u306e\u3067\u3042\u308b\u3002\u4fbf\u5229\uff01\n\u305f\u3060\u3057\u3001\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u304d\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\nh[:one] = 1.0\nh\n# => {\"one\"=>1, \"two\"=>2, :one=>1.0}\n\n\u5b9f\u4f53\u306f String \u30ad\u30fc\u306a\u306e\u3067\u3001 Symbol \u3067\u3082\u3046\u307e\u3044\u3053\u3068\u3084\u3063\u3066\u304f\u308c\u308b\u3084\u3058\u3083\u308d\u3068\u601d\u3063\u3066\u3082\u3001\u305d\u3053\u306f\u305d\u306e\u307e\u307eSymbol\u30ad\u30fc\u3067\u7a81\u3063\u8fbc\u307e\u308c\u308b\u3002\n\u7686\u3055\u3093\u304a\u6c17\u3065\u304d\u3060\u308d\u3046\u304b\u3002\u305d\u3046\u3001\u3068\u3042\u308b\u65e5\u306e\u79c1\u306f\u3053\u306e\u30df\u30b9\u3092\u72af\u3057\u305f\u306e\u3067\u3042\u308b\u3002\n\u66f8\u304d\u63db\u3048\u306e\u3068\u304d\u306f\u5fc5\u305a String \u30ad\u30fc\u3067\u884c\u3044\u307e\u3057\u3087\u3046\u3002\n\n\u3061\u306a\u307f\u306b ActiveSupport::HashWithIndifferentAccess \u3060\u3068\nh = { \"one\" => 1, \"two\" => 2 }.with_indifferent_access\n# => {\"one\"=>1, \"two\"=>2}\n\nh[\"one\"]\n# => 1\n\nh[:one]\n# => 1\n\n\u547c\u3073\u51fa\u3057\u306f\u57fa\u672cindifferent_params\u3068\u540c\u3058\u3002\nh[:one] = 1.0\nh\n# => {\"one\"=>1.0, \"two\"=>2}\n\n\u305f\u3060\u3057\u3001\u66f8\u304d\u63db\u3048\u306e\u5834\u5408\u306fSymbol\u30ad\u30fc\u3067\u3082\u540c\u540d\u306eString\u30ad\u30fc\u306e\u5024\u304c\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n\n\n\n\n\n\u3088\u304f\u8003\u3048\u305f\u3089 Padrino \u3067 Rails \u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u4f7f\u308f\u306a\u3044\u3067\u3059\u3088\u306d\uff08\uff08\uff08\uff08\u00a0\u21a9\n\n\nsymbolize_keys \u3067\u3082\u7f60\u306b\u30cf\u30de\u308a\u307e\u3057\u305f\u30fb\u30fb\u30fb\u3002 \u5229\u7528\u3057\u3066\u3044\u305f activesupport \u304c v3.2.2 \u3068\u53e4\u304b\u3063\u305f\u305f\u3081\u3001\u540c\u540d\u306e String \u30ad\u30fc\u3068 Symbol \u30ad\u30fc\u304c\u3042\u3063\u305f\u5834\u5408\u3001String\u30ad\u30fc\u306e\u5024\u3067\u4e0a\u66f8\u304d\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u00a0\u21a9\n\n\n\nPadrino \u306e `params` \u306f String \u3067\u3082 Symbol \u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\n\n```rb\nFoo::App.controllers :user do\n  get :show1 do\n    @user = User.find params[\"id\"] # String \u3067\u3082\u3068\u3063\u3066\u3053\u308c\u308b\n    render \"user/show\"\n  end\n\n  get :show2 do\n    @user = User.find params[:id] # Symbol \u3067\u3082\u3068\u3063\u3066\u3053\u308c\u308b\n    render \"user/show\"\n  end\nend\n```\n\n# \u3068\u3042\u308b\u65e5\u306e\u79c1\u306e\u5b9f\u88c5\n\n\u3069\u3063\u3061\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3082\u306e\u3060\u304b\u3089\u3001\u3066\u3063\u304d\u308a [`ActiveSupport::HashWithIndifferentAccess`](http://api.rubyonrails.org/classes/ActiveSupport/HashWithIndifferentAccess.html) \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u304b\u3068\u601d\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002 [^aho]\n\n```rb\nHoge::App.controllers :pager do\n  get :user do\n    # only_id \u30d1\u30e9\u30e1\u30fc\u30bf\u304c \"0\" or \"1\" \u3067\u6e21\u3055\u308c\u308b\u60f3\u5b9a\n    paginate User, params.merge(only_id: params[:only_id].to_i > 0) # (A)\n  end\n\n  get :hoge do\n    paginate Hoge, params\n  end\n\n  get :fuga do\n    paginate Fuga, params\n  end\n\n  define_method :paginate do |klass, params|\n    klass.paginate(target, params.symbolize_keys) # (B)\n  end\nend\n\nclass User\n  def self.paginate(only_id: false, max_id: nil)\n    # (C)\n    users = find_by_max_id max_id\n    items = only_id ? users.map(&:id) : users\n    { items: items, only_id: only_id ? 1 : 0, max_id: max_id } # (D)\n  end\nend\n```\n \n`only_id` \u30d1\u30e9\u30e1\u30fc\u30bf\u304c `\"0\"` \u306e\u5834\u5408\u3001 (D) \u306e items \u306b\u306f User \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u914d\u5217\u304c\u5165\u3063\u3066\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u305f\u3002 \u306e\u3060\u304c\u3001\u306a\u305c\u304b id \u306e\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n(C) \u6642\u70b9\u306e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068\n\n```rb\nonly_id #=> \"0\"\n```\n\n\u6587\u5b57\u5217 `\"0\"` \u306e\u307e\u307e\u3067\u3042\u308b\u2026\u3002 (A) \u3067 `params[:only_id].to_i > 0` \u3057\u3066\u3044\u308b\u304b\u3089\u3001 `false` \u306b\u306a\u308b\u306f\u305a\u3068\u601d\u3044\u2026\n\n\u4eca\u5ea6\u306f (B) \u6642\u70b9\u306e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\n```rb\nparams #=> { \"is_active\" => \"0\", :is_active => false }\n```\n\n\u307b\u3046\uff01\n\n```rb\nparams.symbolize_keys #=> { :is_active => \"0\" } \n```\n\n\u307b\u3046\u30fb\u30fb\u30fb[^wana]\n\n![\u3042\u30fc\u305d\u30fc\u3086\u30fc\u3053\u3068\u306d(\u308f\u304b\u3063\u3066\u306a\u3044)](http://image.itmedia.co.jp/nl/articles/1511/12/l_kk_151112popu04.jpg)\n\n# `Sinatra::Base` \u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\n\nPadrino \u306f Sinatra \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002 Sinatra::Base \u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u8a18\u8ff0\u304c\u3042\u3063\u305f\u3002(\u79c1\u304c\u4f7f\u3063\u3066\u3044\u305f\u3082\u306e\u306fv1.4.5)\n\nhttps://github.com/sinatra/sinatra/blob/v1.4.5/lib/sinatra/base.rb\n\n```rb\nmodule Sinatra\n  # ...\n  class Base\n    # ...\n\n    def call!(env) # :nodoc:\n      # ...\n      @params   = indifferent_params(@request.params)\n      # ...\n    end\n\n    # Enable string or symbol key access to the nested params hash.\n    def indifferent_params(object)\n      case object\n      when Hash\n        new_hash = indifferent_hash\n        object.each { |key, value| new_hash[key] = indifferent_params(value) }\n        new_hash\n      when Array\n        object.map { |item| indifferent_params(item) }\n      else\n        object\n      end\n    end\n\n\n    # Creates a Hash with indifferent access.\n    def indifferent_hash\n      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }\n    end\n\n    # ...\n  end\n  # ...\nend\n```\n\n\n## `Sinatra::Base#indifferent_hash` \n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3042\u308b\n\n```rb\nh = Hash.new { |hash,key| hash[key.to_s] if Symbol === key }\nh[\"one\"] = 1\nh[\"two\"] = 2\nh\n# => {\"one\"=>1, \"two\"=>2}\n\n# \u3082\u3061\u308d\u3093 String \u30ad\u30fc\u3067\u53d6\u3063\u3066\u3053\u308c\u308b\nh[\"one\"]\n# => 1\n\n# \u305d\u3057\u3066Symbol \u30ad\u30fc\u3067\u3082\u53d6\u3063\u3066\u3053\u308c\u308b\nh[:one]\n# => 1\n```\n\nSymbol \u3067\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5834\u5408\u306f String \u306b\u5909\u63db\u3057\u3066\u5024\u3092\u53d6\u3063\u3066\u304d\u3066\u304f\u308c\u308b\u306e\u3067\u3042\u308b\u3002\u4fbf\u5229\uff01\n\n\u305f\u3060\u3057\u3001\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u304d\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\n```rb\nh[:one] = 1.0\nh\n# => {\"one\"=>1, \"two\"=>2, :one=>1.0}\n```\n\n\u5b9f\u4f53\u306f String \u30ad\u30fc\u306a\u306e\u3067\u3001 Symbol \u3067\u3082\u3046\u307e\u3044\u3053\u3068\u3084\u3063\u3066\u304f\u308c\u308b\u3084\u3058\u3083\u308d\u3068\u601d\u3063\u3066\u3082\u3001\u305d\u3053\u306f\u305d\u306e\u307e\u307eSymbol\u30ad\u30fc\u3067\u7a81\u3063\u8fbc\u307e\u308c\u308b\u3002\n\n\u7686\u3055\u3093\u304a\u6c17\u3065\u304d\u3060\u308d\u3046\u304b\u3002\u305d\u3046\u3001\u3068\u3042\u308b\u65e5\u306e\u79c1\u306f\u3053\u306e\u30df\u30b9\u3092\u72af\u3057\u305f\u306e\u3067\u3042\u308b\u3002\n\n**\u66f8\u304d\u63db\u3048\u306e\u3068\u304d\u306f\u5fc5\u305a String \u30ad\u30fc\u3067\u884c\u3044\u307e\u3057\u3087\u3046\u3002**\n\n# \u3061\u306a\u307f\u306b [`ActiveSupport::HashWithIndifferentAccess`](http://api.rubyonrails.org/classes/ActiveSupport/HashWithIndifferentAccess.html) \u3060\u3068\n\n```rb\nh = { \"one\" => 1, \"two\" => 2 }.with_indifferent_access\n# => {\"one\"=>1, \"two\"=>2}\n\nh[\"one\"]\n# => 1\n\nh[:one]\n# => 1\n```\n\n\u547c\u3073\u51fa\u3057\u306f\u57fa\u672cindifferent_params\u3068\u540c\u3058\u3002\n\n```rb\nh[:one] = 1.0\nh\n# => {\"one\"=>1.0, \"two\"=>2}\n```\n\n\u305f\u3060\u3057\u3001\u66f8\u304d\u63db\u3048\u306e\u5834\u5408\u306fSymbol\u30ad\u30fc\u3067\u3082\u540c\u540d\u306eString\u30ad\u30fc\u306e\u5024\u304c\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n\n---\n\n[^aho]: \u3088\u304f\u8003\u3048\u305f\u3089 Padrino \u3067 Rails \u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u4f7f\u308f\u306a\u3044\u3067\u3059\u3088\u306d\uff08\uff08\uff08\uff08\n[^wana]: [`symbolize_keys`](https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/core_ext/hash/keys.rb#L24) \u3067\u3082\u7f60\u306b\u30cf\u30de\u308a\u307e\u3057\u305f\u30fb\u30fb\u30fb\u3002 \u5229\u7528\u3057\u3066\u3044\u305f activesupport \u304c v3.2.2 \u3068\u53e4\u304b\u3063\u305f\u305f\u3081\u3001\u540c\u540d\u306e String \u30ad\u30fc\u3068 Symbol \u30ad\u30fc\u304c\u3042\u3063\u305f\u5834\u5408\u3001String\u30ad\u30fc\u306e\u5024\u3067\u4e0a\u66f8\u304d\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n", "tags": ["Padrino", "Sinatra"]}