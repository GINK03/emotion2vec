{"context": "\n\n\u5a5a\u7d04\u6570(Betrothed Numbers)\u3068\u306f\n\u5a5a\u7d04\u6570(Betrothed Numbers)\u3068\u306f\u3001\uff12\u3064\u306e\u7570\u306a\u308b\u81ea\u7136\u6570\u306e\u7d44(\u30da\u30a2)\u306b\u306a\u3063\u3066\u3044\u3066\u3001\uff11\u3068\u81ea\u5206\u81ea\u8eab\u3092\u9664\u3044\u305f\u7d04\u6570\u306e\u548c\u304c\u3001\u3082\u3046\u7247\u65b9\u306e\u6570\u3068\u7b49\u3057\u304f\u306a\u308b\u3088\u3046\u306a\u6570\u3092\u8a00\u3044\u307e\u3059\u3002\n\u300c\u6e96\u53cb\u611b\u6570\u300d\u3068\u3082\u547c\u3070\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u53cb\u611b\u6570\u306e\u5b9a\u7fa9\u3068\u3068\u3066\u3082\u826f\u304f\u4f3c\u3066\u3044\u307e\u3059\u304b\u3089\u306d\u3002\n\u4f8b\u3048\u3070\u3001\u4e00\u756a\u5c0f\u3055\u306a\u53cb\u611b\u6570\u306e\u7d44\u306f(48,75)\u3067\u3001\n48 \u2192 2 + 3 + 4 + 6 + 8 + 12 + 16 + 24 = 75\n75 \u2192 3 + 5 + 15 + 25 = 48\n\u3068\u306a\u308a\u307e\u3059\u3002\n\nC#\u306e\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u3001\u4f5c\u6210\u3057\u305fC#\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\u6700\u521d\u306e30\u500b\u306e\u30da\u30a2\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\n\nBetrothedNumber.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Gushwell.Etude {\n    class Program {\n        static void Main(string[] args) {\n            var numbers = BetrothedNumbers.GetNumbers().Take(20);\n            foreach (var p in numbers)\n                Console.WriteLine(p);\n        }\n    }\n\n    public class Pair {\n        public long Value1 { get; set; }\n        public long Value2 { get; set; }\n        public override string ToString() {\n            return string.Format(\"({0}, {1})\", Value1, Value2);\n        }\n    }\n    public class BetrothedNumbers {\n        public static IEnumerable<Pair> GetNumbers() {\n            for (long i = 1; i < long.MaxValue; i++) {\n                long x = Divisors(i).Sum();\n                if (i >= x)\n                    continue;\n                long y = Divisors(x).Sum();\n                if (i == y)\n                    yield return new Pair { Value1 = i, Value2 = x };\n            }\n        }\n\n        public static IEnumerable<long> Divisors(long n) {\n            long m = (long)Math.Sqrt(n);\n            if (m * m == n) {\n                yield return m;\n                m--;\n            }\n            for (long i = 2; i <= m; i++) {\n                if (n % i == 0) {\n                    yield return i;\n                    yield return n / i;\n                }\n            }\n        }\n    }\n\n}\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30fc\u30c9\u306f\u3001\u53cb\u611b\u6570\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f30\u500b\u306e\u30da\u30a2\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u304c\u3001 40\u500b\u306e\u30da\u30a2\u3092\u6c42\u3081\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u7d50\u69cb\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\u901f\u304f\u3059\u308b\u306b\u306f\u3055\u3089\u306a\u308b\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u601d\u3044\u3064\u304d\u307e\u305b\u3093...\n\n\u5b9f\u884c\u7d50\u679c\n(48, 75)\n(140, 195)\n(1050, 1925)\n(1575, 1648)\n(2024, 2295)\n(5775, 6128)\n(8892, 16587)\n(9504, 20735)\n(62744, 75495)\n(186615, 206504)\n(196664, 219975)\n(199760, 309135)\n(266000, 507759)\n(312620, 549219)\n(526575, 544784)\n(573560, 817479)\n(587460, 1057595)\n(1000824, 1902215)\n(1081184, 1331967)\n(1139144, 1159095)\n\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n## \u5a5a\u7d04\u6570(Betrothed Numbers)\u3068\u306f\n\n\u5a5a\u7d04\u6570(Betrothed Numbers)\u3068\u306f\u3001\uff12\u3064\u306e\u7570\u306a\u308b\u81ea\u7136\u6570\u306e\u7d44(\u30da\u30a2)\u306b\u306a\u3063\u3066\u3044\u3066\u3001\uff11\u3068\u81ea\u5206\u81ea\u8eab\u3092\u9664\u3044\u305f\u7d04\u6570\u306e\u548c\u304c\u3001\u3082\u3046\u7247\u65b9\u306e\u6570\u3068\u7b49\u3057\u304f\u306a\u308b\u3088\u3046\u306a\u6570\u3092\u8a00\u3044\u307e\u3059\u3002\n\u300c\u6e96\u53cb\u611b\u6570\u300d\u3068\u3082\u547c\u3070\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002[\u53cb\u611b\u6570](http://qiita.com/gushwell/items/547ab7fe19bed5b87365)\u306e\u5b9a\u7fa9\u3068\u3068\u3066\u3082\u826f\u304f\u4f3c\u3066\u3044\u307e\u3059\u304b\u3089\u306d\u3002\n\n\u4f8b\u3048\u3070\u3001\u4e00\u756a\u5c0f\u3055\u306a\u53cb\u611b\u6570\u306e\u7d44\u306f(48,75)\u3067\u3001\n48 \u2192 2 + 3 + 4 + 6 + 8 + 12 + 16 + 24 = 75\n75 \u2192 3 + 5 + 15 + 25 = 48\n\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n## C#\u306e\u30b3\u30fc\u30c9\n\n\u4ee5\u4e0b\u3001\u4f5c\u6210\u3057\u305fC#\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\u6700\u521d\u306e30\u500b\u306e\u30da\u30a2\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\n\n\n```csharp:BetrothedNumber.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Gushwell.Etude {\n    class Program {\n        static void Main(string[] args) {\n            var numbers = BetrothedNumbers.GetNumbers().Take(20);\n            foreach (var p in numbers)\n                Console.WriteLine(p);\n        }\n    }\n\n    public class Pair {\n        public long Value1 { get; set; }\n        public long Value2 { get; set; }\n        public override string ToString() {\n            return string.Format(\"({0}, {1})\", Value1, Value2);\n        }\n    }\n    public class BetrothedNumbers {\n        public static IEnumerable<Pair> GetNumbers() {\n            for (long i = 1; i < long.MaxValue; i++) {\n                long x = Divisors(i).Sum();\n                if (i >= x)\n                    continue;\n                long y = Divisors(x).Sum();\n                if (i == y)\n                    yield return new Pair { Value1 = i, Value2 = x };\n            }\n        }\n\n        public static IEnumerable<long> Divisors(long n) {\n            long m = (long)Math.Sqrt(n);\n            if (m * m == n) {\n                yield return m;\n                m--;\n            }\n            for (long i = 2; i <= m; i++) {\n                if (n % i == 0) {\n                    yield return i;\n                    yield return n / i;\n                }\n            }\n        }\n    }\n\n}\n```\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30fc\u30c9\u306f\u3001\u53cb\u611b\u6570\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f30\u500b\u306e\u30da\u30a2\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u304c\u3001 40\u500b\u306e\u30da\u30a2\u3092\u6c42\u3081\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u7d50\u69cb\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\u901f\u304f\u3059\u308b\u306b\u306f\u3055\u3089\u306a\u308b\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u601d\u3044\u3064\u304d\u307e\u305b\u3093...\n\n\n\n## \u5b9f\u884c\u7d50\u679c\n\n<pre>\n(48, 75)\n(140, 195)\n(1050, 1925)\n(1575, 1648)\n(2024, 2295)\n(5775, 6128)\n(8892, 16587)\n(9504, 20735)\n(62744, 75495)\n(186615, 206504)\n(196664, 219975)\n(199760, 309135)\n(266000, 507759)\n(312620, 549219)\n(526575, 544784)\n(573560, 817479)\n(587460, 1057595)\n(1000824, 1902215)\n(1081184, 1331967)\n(1139144, 1159095)\n</pre>\n\n-------------------\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\n", "tags": ["C#", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "C#\u5c0f\u54c1\u96c6\u30b7\u30ea\u30fc\u30b9"]}