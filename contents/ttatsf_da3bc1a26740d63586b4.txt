{"context": "Python\u3067\u7d20\u6570\u3001Haskell\u3067\u7d20\u6570 2\u306e\u7d9a\u304d\u3002\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u304b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u304b\u3042\u3084\u3075\u3084\u3060\u3063\u305f\u3093\u3067\u3001\u7d20\u6570\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3057\u3066\u307f\u308b\u3002\n\n\u666e\u901a\u3088\u304f\u307f\u304b\u3051\u308b\u306e\u306f\u3053\u3093\u306a\u3084\u3064\u3002\nfrom itertools import ifilter, count, dropwhile\ndef sieve():\n  g = count(2)\n  while True:\n    prime = g.next()\n    yield prime\n    g = ifilter(lambda x, prime=prime: x % prime, g)\n\n\nfirst_prime_GE_sieve = (lambda n , ps = sieve() : \n  (dropwhile( lambda x : x < n, ps ) ).next()\n)\n\nprint first_prime_GE_sieve(52951)\n\n# \u7d50\u679c\n52951\n\n(\u7d50\u679c\u306f\u3069\u308c\u3082 paiza.io \u3067time out\u306b\u306a\u3089\u305a\u306b\u8a08\u7b97\u3067\u304d\u305f\u6700\u5927\u306e\u6570\u3002\u3044\u3064\u3082\u540c\u3058\u3067\u306f\u306a\u3044\u304c\u901f\u3055\u306e\u76ee\u5b89\u3068\u3057\u3066\u3002)\n\u306a\u308b\u307b\u3069\u3002\n\u7d20\u6570\u3092\u51fa\u529b\u3057\u3064\u3064\u3001\u7121\u9650\u9577?\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3075\u308b\u3044\u306b\u304b\u3051\u3066\u3044\u308b\u611f\u3058\u3002\n\u3088\u304f\u3067\u304d\u3066\u308b\u3002\n\u4e2d\u5473\u304c\u308f\u304b\u3063\u3066\u304d\u305f\u3089\u3001\u524d\u8a18\u4e8b\u3067\u3044\u305f\u3060\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u306e\u30b3\u30fc\u30c9\u3068\u540c\u3058\u3060\u3068\u3044\u307e\u3055\u3089\u6c17\u4ed8\u304f\u3002\n\u95a2\u6570\u304b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u306e\u9055\u3044\u3060\u3051\u3002\n\u3042\u3093\u307e\u308a\u901f\u304f\u306f\u306a\u3044\u304b\u3082?\n\nHaskell\u754c\u9688\u306e\u3084\u308a\u304b\u305f\u3002\nprimes :: Integral a => [a]\nprimes = map fromIntegral $ [2, 3] ++ primes'\n\nprimes'  = [5] ++ recursivePrimes 1 7 primes'\n\nrecursivePrimes m s (p : ps) = \n  zonedPrimes m s p ++ recursivePrimes (m * p) (p * p) ps\n\nzonedPrimes m s p = \n  [n | n <- croppedPrimables s p, gcd m n == 1] \n\ncroppedPrimables s p = \n  [x + y | x <- [s, s + 6 .. p * p - 6], y <- [0, 4]]\n\nmain = print . take 1 . dropWhile (<24684009) $ primes\n\n-- \u7d50\u679c\n[24684013]\n\n\u81ea\u5206\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u5909\u5f62\u3057\u3066\u307e\u3059\u3002\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306f\u3053\u3061\u3089\u3002\n\u3061\u3087\u3063\u3068\u305a\u3064\u8a08\u7b97\u3057\u3066\u7a4d\u307f\u4e0a\u3052\u3066\u3044\u304f\u611f\u3058\u3002\n\u3051\u3063\u3053\u3046\u901f\u3044\u3002\n\n\u305d\u3063\u3061\u306b\u5bc4\u305b\u3066\u307f\u308b\u3002\n\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3001Python\u3067\u3084\u3063\u3066\u307f\u308b\u3002\nfrom fractions import gcd\nfrom itertools import chain, tee, dropwhile\n\ncropped_primables = (lambda s, p :\n  [x + y for x in xrange(s,p * p - 5, 6) for y in [0, 4]]\n)\n\nzoned_primes = (lambda m, s, p :\n  [n for n in cropped_primables(s, p) if gcd(m, n) == 1]\n)\n\ndef primes() :\n\n  primes_list = [2, 3, 5]\n  last_prime = primes_list[-1] \n  primes_iter = iter(primes_list)\n\n  seeds_iter = iter([])\n  m = 1\n  s = 7\n  p = 5\n\n  while True :\n    prime = primes_iter.next()\n    yield prime\n\n    if prime == last_prime :\n      primes_list = zoned_primes(m, s, p)\n      last_prime = primes_list[-1]\n\n      it1, it2 = tee(primes_list)\n      primes_iter = it1\n      seeds_iter = chain(seeds_iter, it2)\n\n      m = m * p\n      s = p * p\n      p = seeds_iter.next()\n\nfirst_prime_GE = (lambda n , ps = primes() : \n  (dropwhile( lambda x : x < n, ps ) ).next()\n)\n\nprint first_prime_GE(3003079)\n\n# \u7d50\u679c\n3003079\n\nHaskell\u306e\u65b9\u306f\u9045\u5ef6\u8a55\u4fa1\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001Python\u3067\u305d\u3053\u3092\u3069\u3046\u3059\u308b\u304b?\n\u3067\u3082\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u306f\u6b21\u306e\u7d20\u6570\u304c\u308f\u304b\u308c\u3070\u3044\u3044\u3060\u3051\u306a\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u3001\u5024\u3092\u8fd4\u3059\u7528\u3068\u3001\u5185\u90e8\u3067\u7d20\u6570\u3092\u8a08\u7b97\u3059\u308b\u7528\u3068\u306b\u5206\u3051\u3066\u5de5\u592b\u3057\u3066\u307f\u305f\u3002\n\u3061\u306a\u307f\u306b\u7c21\u6613\u7684\u3060\u304c\u3001IDLE\u4e0a\u3067\u5f15\u6570100000\u3067\u4e00\u56de\u5b9f\u884c\u3057\u3066\u6642\u9593\u3092\u8a08\u3063\u3066\u307f\u305f\u3089\n>>> measure_t(first_prime_GE,100000)\n2.5987625122070312e-05\n\n\u7d040.026 \u30df\u30ea\u79d2\u3002\n\u5192\u982d\u306e\u65b9\u306f\n>>> measure_t( first_prime_GE_sieve,100000)\n16.222843885421753\n\n\u7d0416\u79d2\u3002\n\u3051\u3063\u3053\u3046\u901f\u3044\u3093\u3058\u3083\u306a\u3044?\n\n\u8ffd\u8a18\n\u4e0a\u306e\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3092\u8d77\u3055\u306a\u3044\u3088\u3046\u306b\u3084\u3063\u3066\u307f\u305f\u3051\u3069\u666e\u901a\u306f\u3053\u3046\u306a\u306e\u304b\u306a?\n# coding: utf-8\nfrom fractions import gcd\nfrom itertools import chain, tee, dropwhile\n\ncropped_primables = (lambda s, p :\n  (x + y for x in xrange(s,p * p - 5, 6) for y in [0, 4])\n)\n\nzoned_primes = (lambda m, s, p :\n  (n for n in cropped_primables(s, p) if gcd(m, n) == 1)\n)\n\ndef primes() :\n  primes_iter = iter([2, 3, 5])\n\n  seeds_iter = iter([])\n  m = 1\n  s = 7\n  p = 5\n\n  while True :\n    try :\n      prime = primes_iter.next()\n\n    except StopIteration :\n      primes_base_iter = zoned_primes(m, s, p)\n\n      it1,it2 = tee(primes_base_iter)\n      primes_iter = it1\n      seeds_iter = chain(seeds_iter, it2)\n\n      m = m * p\n      s = p * p\n      p = seeds_iter.next()\n\n    else :   \n      yield prime\n\nfirst_prime_GE = (lambda n , ps = primes() : \n  (dropwhile( lambda x : x < n, ps ) ).next()\n)\n\nprint first_prime_GE(2728100)\n\n##\u7d50\u679c\n2728129\n\nStopIteration\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3066\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3002\n \u914d\u5217\u3058\u3083\u306a\u304f\u3066\u3088\u304f\u306a\u3063\u305f\u3082\u306e\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5909\u66f4\u3002\n\u898b\u305f\u76ee\u306f\u3059\u3063\u304d\u308a\u3002\u3051\u3069\u3001\u5c11\u3057\u9045\u304f\u306a\u3063\u305f\u3088\u3046\u3002\n\u540c\u69d8\u306b\u5b9f\u884c\u6642\u9593\u3092\u6e2c\u308b\u3068\n>>> measure_t(first_prime_GE,100000)\n3.409385681152344e-05\n\n0.034\u30df\u30ea\u79d2\u3002\n[Python\u3067\u7d20\u6570](http://qiita.com/ttatsf/items/d9c22972279aac06c3c4)\u3001[Haskell\u3067\u7d20\u6570 2](http://qiita.com/ttatsf/items/db25c4f043e1e529a7e3)\u306e\u7d9a\u304d\u3002\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u304b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u304b\u3042\u3084\u3075\u3084\u3060\u3063\u305f\u3093\u3067\u3001\u7d20\u6570\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3057\u3066\u307f\u308b\u3002\n\n##\u666e\u901a\u3088\u304f\u307f\u304b\u3051\u308b\u306e\u306f\u3053\u3093\u306a\u3084\u3064\u3002\n\n```Python\nfrom itertools import ifilter, count, dropwhile\ndef sieve():\n  g = count(2)\n  while True:\n    prime = g.next()\n    yield prime\n    g = ifilter(lambda x, prime=prime: x % prime, g)\n\n\nfirst_prime_GE_sieve = (lambda n , ps = sieve() : \n  (dropwhile( lambda x : x < n, ps ) ).next()\n)\n    \nprint first_prime_GE_sieve(52951)\n```\n```Python\n# \u7d50\u679c\n52951\n```\n\n(\u7d50\u679c\u306f\u3069\u308c\u3082 paiza.io \u3067time out\u306b\u306a\u3089\u305a\u306b\u8a08\u7b97\u3067\u304d\u305f\u6700\u5927\u306e\u6570\u3002\u3044\u3064\u3082\u540c\u3058\u3067\u306f\u306a\u3044\u304c\u901f\u3055\u306e\u76ee\u5b89\u3068\u3057\u3066\u3002)\n\n\u306a\u308b\u307b\u3069\u3002\n\u7d20\u6570\u3092\u51fa\u529b\u3057\u3064\u3064\u3001\u7121\u9650\u9577?\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3075\u308b\u3044\u306b\u304b\u3051\u3066\u3044\u308b\u611f\u3058\u3002\n\u3088\u304f\u3067\u304d\u3066\u308b\u3002\n\n\u4e2d\u5473\u304c\u308f\u304b\u3063\u3066\u304d\u305f\u3089\u3001\u524d\u8a18\u4e8b\u3067\u3044\u305f\u3060\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u306e\u30b3\u30fc\u30c9\u3068\u540c\u3058\u3060\u3068\u3044\u307e\u3055\u3089\u6c17\u4ed8\u304f\u3002\n\u95a2\u6570\u304b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u306e\u9055\u3044\u3060\u3051\u3002\n\n\u3042\u3093\u307e\u308a\u901f\u304f\u306f\u306a\u3044\u304b\u3082?\n\n##Haskell\u754c\u9688\u306e\u3084\u308a\u304b\u305f\u3002\n\n```Haskell\nprimes :: Integral a => [a]\nprimes = map fromIntegral $ [2, 3] ++ primes'\n\nprimes'  = [5] ++ recursivePrimes 1 7 primes'\n\nrecursivePrimes m s (p : ps) = \n  zonedPrimes m s p ++ recursivePrimes (m * p) (p * p) ps\n\nzonedPrimes m s p = \n  [n | n <- croppedPrimables s p, gcd m n == 1] \n\ncroppedPrimables s p = \n  [x + y | x <- [s, s + 6 .. p * p - 6], y <- [0, 4]]\n  \nmain = print . take 1 . dropWhile (<24684009) $ primes\n```\n\n```Haskell\n-- \u7d50\u679c\n[24684013]\n```\n\n\u81ea\u5206\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u5909\u5f62\u3057\u3066\u307e\u3059\u3002\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306f[\u3053\u3061\u3089\u3002](http://qiita.com/little_Haskeller/items/614a3ae20a517c19bb1f)\n\n\u3061\u3087\u3063\u3068\u305a\u3064\u8a08\u7b97\u3057\u3066\u7a4d\u307f\u4e0a\u3052\u3066\u3044\u304f\u611f\u3058\u3002\n\u3051\u3063\u3053\u3046\u901f\u3044\u3002\n\n##\u305d\u3063\u3061\u306b\u5bc4\u305b\u3066\u307f\u308b\u3002\n\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3001Python\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n\n```Python\nfrom fractions import gcd\nfrom itertools import chain, tee, dropwhile\n\ncropped_primables = (lambda s, p :\n  [x + y for x in xrange(s,p * p - 5, 6) for y in [0, 4]]\n)\n\nzoned_primes = (lambda m, s, p :\n  [n for n in cropped_primables(s, p) if gcd(m, n) == 1]\n)\n\ndef primes() :\n \n  primes_list = [2, 3, 5]\n  last_prime = primes_list[-1] \n  primes_iter = iter(primes_list)\n\n  seeds_iter = iter([])\n  m = 1\n  s = 7\n  p = 5\n\n  while True :\n    prime = primes_iter.next()\n    yield prime\n\n    if prime == last_prime :\n      primes_list = zoned_primes(m, s, p)\n      last_prime = primes_list[-1]\n      \n      it1, it2 = tee(primes_list)\n      primes_iter = it1\n      seeds_iter = chain(seeds_iter, it2)\n      \n      m = m * p\n      s = p * p\n      p = seeds_iter.next()\n\nfirst_prime_GE = (lambda n , ps = primes() : \n  (dropwhile( lambda x : x < n, ps ) ).next()\n)\n    \nprint first_prime_GE(3003079)\n```\n\n```Python\n# \u7d50\u679c\n3003079\n```\n\nHaskell\u306e\u65b9\u306f\u9045\u5ef6\u8a55\u4fa1\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001Python\u3067\u305d\u3053\u3092\u3069\u3046\u3059\u308b\u304b?\n\n\u3067\u3082\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u306f\u6b21\u306e\u7d20\u6570\u304c\u308f\u304b\u308c\u3070\u3044\u3044\u3060\u3051\u306a\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u3001\u5024\u3092\u8fd4\u3059\u7528\u3068\u3001\u5185\u90e8\u3067\u7d20\u6570\u3092\u8a08\u7b97\u3059\u308b\u7528\u3068\u306b\u5206\u3051\u3066\u5de5\u592b\u3057\u3066\u307f\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u7c21\u6613\u7684\u3060\u304c\u3001IDLE\u4e0a\u3067\u5f15\u6570100000\u3067[\u4e00\u56de\u5b9f\u884c\u3057\u3066\u6642\u9593\u3092\u8a08\u3063\u3066](http://qiita.com/ttatsf/items/5f1e2e43b3f0c011acf9)\u307f\u305f\u3089\n\n```Python\n>>> measure_t(first_prime_GE,100000)\n2.5987625122070312e-05\n```\n\u7d040.026 \u30df\u30ea\u79d2\u3002\n\n\u5192\u982d\u306e\u65b9\u306f\n\n```Python\n>>> measure_t( first_prime_GE_sieve,100000)\n16.222843885421753\n```\n\u7d0416\u79d2\u3002\n\n\u3051\u3063\u3053\u3046\u901f\u3044\u3093\u3058\u3083\u306a\u3044?\n##\u8ffd\u8a18\n\u4e0a\u306e\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3092\u8d77\u3055\u306a\u3044\u3088\u3046\u306b\u3084\u3063\u3066\u307f\u305f\u3051\u3069\u666e\u901a\u306f\u3053\u3046\u306a\u306e\u304b\u306a?\n\n```Python\n# coding: utf-8\nfrom fractions import gcd\nfrom itertools import chain, tee, dropwhile\n\ncropped_primables = (lambda s, p :\n  (x + y for x in xrange(s,p * p - 5, 6) for y in [0, 4])\n)\n\nzoned_primes = (lambda m, s, p :\n  (n for n in cropped_primables(s, p) if gcd(m, n) == 1)\n)\n\ndef primes() :\n  primes_iter = iter([2, 3, 5])\n\n  seeds_iter = iter([])\n  m = 1\n  s = 7\n  p = 5\n\n  while True :\n    try :\n      prime = primes_iter.next()\n      \n    except StopIteration :\n      primes_base_iter = zoned_primes(m, s, p)\n      \n      it1,it2 = tee(primes_base_iter)\n      primes_iter = it1\n      seeds_iter = chain(seeds_iter, it2)\n      \n      m = m * p\n      s = p * p\n      p = seeds_iter.next()\n      \n    else :   \n      yield prime\n\nfirst_prime_GE = (lambda n , ps = primes() : \n  (dropwhile( lambda x : x < n, ps ) ).next()\n)\n\nprint first_prime_GE(2728100)\n```\n\n```Python\n##\u7d50\u679c\n2728129\n```\n\n\n StopIteration\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3066\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3002\n \u914d\u5217\u3058\u3083\u306a\u304f\u3066\u3088\u304f\u306a\u3063\u305f\u3082\u306e\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5909\u66f4\u3002\n \n \u898b\u305f\u76ee\u306f\u3059\u3063\u304d\u308a\u3002\u3051\u3069\u3001\u5c11\u3057\u9045\u304f\u306a\u3063\u305f\u3088\u3046\u3002\n \n \u540c\u69d8\u306b\u5b9f\u884c\u6642\u9593\u3092\u6e2c\u308b\u3068\n \n```Python\n>>> measure_t(first_prime_GE,100000)\n3.409385681152344e-05\n```\n\n0.034\u30df\u30ea\u79d2\u3002\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "Haskell", "Python"]}