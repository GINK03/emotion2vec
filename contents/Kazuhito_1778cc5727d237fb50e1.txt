{"context": "OpneCV\u306e\u7269\u4f53\u8ffd\u8de1\u306f\u3061\u3087\u304f\u3061\u3087\u304f\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u305f\u3053\u3068\u304c\u308b\u306e\u3060\u3051\u3069\u3001\ndlib\u306f\u52d5\u304b\u3057\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u3061\u3087\u3063\u3068\u304a\u8a66\u3057\u3002\n\u30e2\u30fc\u30b7\u30e7\u30f3\u30d6\u30e9\u30fc\u3068\u304b\u306b\u3082\u4ed8\u3044\u3066\u884c\u3063\u3066\u3066\u3001\u7d50\u69cb\u6027\u80fd\u826f\u3055\u305d\u3046\u306a\u611f\u3058\u3002\n\u52d5\u753b\u306f\u4ee5\u4e0b\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3002\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'''\ncorrelation_tracker.py.\n\nUsage:\n  correlation_tracker.py [<video source>] [<resize rate>]\n'''\n\n\nimport sys\nimport dlib\nimport cv2\nimport time\nimport copy\n\n# \u30de\u30a6\u30b9\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\nmouse_start_x, mouse_start_y = 0, 0\nmouse_end_x, mouse_end_y = 0, 0\nselecting = False\ntracker_start_flag = False\ntracking_flag = False\ndef select_roi(event,x,y,flags,param):\n    global selecting, tracker_start_flag\n    global mouse_start_x, mouse_start_y\n    global mouse_end_x, mouse_end_y\n    if event == cv2.EVENT_LBUTTONDOWN:\n        selecting = True\n        mouse_start_x, mouse_start_y = x,y\n\n    elif event == cv2.EVENT_MOUSEMOVE:\n        if selecting == True:\n            mouse_end_x, mouse_end_y = x, y\n        else:\n            pass\n    elif event == cv2.EVENT_LBUTTONUP:\n        mouse_end_x, mouse_end_y = x, y\n        selecting = False\n        tracker_start_flag = True\n\n# \u5f15\u6570\u89e3\u91c8\ntry:\n    fn = sys.argv[1]\n    if fn.isdigit() == True:\n        fn = int(fn)\nexcept:\n    fn = 0\ntry:\n    resize_rate = sys.argv[2]\n    resize_rate = int(resize_rate)\nexcept:\n    resize_rate = 1\n\n# \u30c8\u30e9\u30c3\u30ab\u30fc\u751f\u6210\ntracker = dlib.correlation_tracker()\n\nvideo_input = cv2.VideoCapture(fn)\nif (video_input.isOpened() == True):\n    ret, frame = video_input.read()\n    cv2.imshow('correlation tracker', frame)\n    cv2.setMouseCallback('correlation tracker', select_roi)\n\nwhile(video_input.isOpened() == True):\n    ret, frame = video_input.read()\n    temp_frame = copy.deepcopy(frame)\n\n    # \u51e6\u7406\u8ca0\u8377\u8efd\u6e1b\u306e\u305f\u3081\u306e\u5bfe\u8c61\u30d5\u30ec\u30fc\u30e0\u7e2e\u5c0f\uff08\u5f15\u6570\u6307\u5b9a\u6642\uff09\n    height, width = frame.shape[:2]\n    temp_frame = cv2.resize(frame, (int(width/resize_rate), int(height/resize_rate)))\n\n    if tracker_start_flag == True:\n        # \u8ffd\u8de1\u958b\u59cb\n        tracker.start_track(temp_frame, dlib.rectangle(mouse_start_x, mouse_start_y, mouse_end_x, mouse_end_y))\n        tracking_flag = True\n        tracker_start_flag = False\n    elif tracking_flag == True:\n        # \u8ffd\u8de1\u66f4\u65b0\n        tracker.update(temp_frame)\n\n    # \u63cf\u753b\n    if selecting == True:\n        cv2.rectangle(frame, (mouse_start_x, mouse_start_y), (mouse_end_x, mouse_end_y), (0, 0, 255), 2)\n    if tracking_flag == True:\n        tracking_point = tracker.get_position()\n        tracking_point_x1 = int(tracking_point.left())\n        tracking_point_y1 = int(tracking_point.top())\n        tracking_point_x2 = int(tracking_point.right())\n        tracking_point_y2 = int(tracking_point.bottom())\n        cv2.rectangle(frame, (tracking_point_x1, tracking_point_y1), (tracking_point_x2, tracking_point_y2), (0, 0, 255), 2)\n\n    cv2.imshow('correlation tracker', frame)\n\n    c = cv2.waitKey(50) & 0xFF\n\n    if c==27: # ESC\n        break\n\n\n\u4ee5\u4e0a\u3002\nOpneCV\u306e\u7269\u4f53\u8ffd\u8de1\u306f\u3061\u3087\u304f\u3061\u3087\u304f\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u305f\u3053\u3068\u304c\u308b\u306e\u3060\u3051\u3069\u3001\ndlib\u306f\u52d5\u304b\u3057\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u3061\u3087\u3063\u3068\u304a\u8a66\u3057\u3002\n\n\u30e2\u30fc\u30b7\u30e7\u30f3\u30d6\u30e9\u30fc\u3068\u304b\u306b\u3082\u4ed8\u3044\u3066\u884c\u3063\u3066\u3066\u3001\u7d50\u69cb\u6027\u80fd\u826f\u3055\u305d\u3046\u306a\u611f\u3058\u3002\n\n\u52d5\u753b\u306f\u4ee5\u4e0b\u3002\n[![\u3010Ubuntu\u3011\u3010Python\u3011dlib\u3092\u7528\u3044\u305f\u7269\u4f53\u8ffd\u8de1](http://img.youtube.com/vi/ORgMddcNHvU/0.jpg)](http://www.youtube.com/watch?v=ORgMddcNHvU)\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3002\n\n```py\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'''\ncorrelation_tracker.py.\n\nUsage:\n  correlation_tracker.py [<video source>] [<resize rate>]\n'''\n\n\nimport sys\nimport dlib\nimport cv2\nimport time\nimport copy\n\n# \u30de\u30a6\u30b9\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\nmouse_start_x, mouse_start_y = 0, 0\nmouse_end_x, mouse_end_y = 0, 0\nselecting = False\ntracker_start_flag = False\ntracking_flag = False\ndef select_roi(event,x,y,flags,param):\n    global selecting, tracker_start_flag\n    global mouse_start_x, mouse_start_y\n    global mouse_end_x, mouse_end_y\n    if event == cv2.EVENT_LBUTTONDOWN:\n        selecting = True\n        mouse_start_x, mouse_start_y = x,y\n\n    elif event == cv2.EVENT_MOUSEMOVE:\n        if selecting == True:\n            mouse_end_x, mouse_end_y = x, y\n        else:\n            pass\n    elif event == cv2.EVENT_LBUTTONUP:\n        mouse_end_x, mouse_end_y = x, y\n        selecting = False\n        tracker_start_flag = True\n\n# \u5f15\u6570\u89e3\u91c8\ntry:\n    fn = sys.argv[1]\n    if fn.isdigit() == True:\n        fn = int(fn)\nexcept:\n    fn = 0\ntry:\n    resize_rate = sys.argv[2]\n    resize_rate = int(resize_rate)\nexcept:\n    resize_rate = 1\n\n# \u30c8\u30e9\u30c3\u30ab\u30fc\u751f\u6210\ntracker = dlib.correlation_tracker()\n\nvideo_input = cv2.VideoCapture(fn)\nif (video_input.isOpened() == True):\n    ret, frame = video_input.read()\n    cv2.imshow('correlation tracker', frame)\n    cv2.setMouseCallback('correlation tracker', select_roi)\n\nwhile(video_input.isOpened() == True):\n    ret, frame = video_input.read()\n    temp_frame = copy.deepcopy(frame)\n\n    # \u51e6\u7406\u8ca0\u8377\u8efd\u6e1b\u306e\u305f\u3081\u306e\u5bfe\u8c61\u30d5\u30ec\u30fc\u30e0\u7e2e\u5c0f\uff08\u5f15\u6570\u6307\u5b9a\u6642\uff09\n    height, width = frame.shape[:2]\n    temp_frame = cv2.resize(frame, (int(width/resize_rate), int(height/resize_rate)))\n\n    if tracker_start_flag == True:\n        # \u8ffd\u8de1\u958b\u59cb\n        tracker.start_track(temp_frame, dlib.rectangle(mouse_start_x, mouse_start_y, mouse_end_x, mouse_end_y))\n        tracking_flag = True\n        tracker_start_flag = False\n    elif tracking_flag == True:\n        # \u8ffd\u8de1\u66f4\u65b0\n        tracker.update(temp_frame)\n\n    # \u63cf\u753b\n    if selecting == True:\n        cv2.rectangle(frame, (mouse_start_x, mouse_start_y), (mouse_end_x, mouse_end_y), (0, 0, 255), 2)\n    if tracking_flag == True:\n        tracking_point = tracker.get_position()\n        tracking_point_x1 = int(tracking_point.left())\n        tracking_point_y1 = int(tracking_point.top())\n        tracking_point_x2 = int(tracking_point.right())\n        tracking_point_y2 = int(tracking_point.bottom())\n        cv2.rectangle(frame, (tracking_point_x1, tracking_point_y1), (tracking_point_x2, tracking_point_y2), (0, 0, 255), 2)\n\n    cv2.imshow('correlation tracker', frame)\n\n    c = cv2.waitKey(50) & 0xFF\n\n    if c==27: # ESC\n        break\n\n```\n\n\u4ee5\u4e0a\u3002\n", "tags": ["dlib", "Python"]}