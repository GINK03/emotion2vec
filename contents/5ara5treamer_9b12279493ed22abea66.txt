{"tags": ["python3", "tweepy", "Twitter", "Python"], "context": "\n\n1.\u3053\u306e\u8a18\u4e8b\u3067\u5b66\u3079\u308b\u3053\u3068\u30fb\u5b66\u3079\u306a\u3044\u3053\u3068\n\u3000\u5b66\u3079\u308b\u3053\u3068\n\ntweepy\u306e\u57fa\u672c\u7684\u306a\u5229\u7528\u65b9\u6cd5\u306e\u4e00\u90e8\u3002\ntweepy\u3092\u6d3b\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f8b\u3002\n\n\u3000\u5b66\u3079\u306a\u3044\u3053\u3068\n\nPython \u306e\u304d\u308c\u3044\u306a\u8a2d\u8a08\u3002\ntweepy \u306e\u30af\u30ea\u30a8\u30a4\u30c6\u30a3\u30d6\u306a\u5229\u7528\u65b9\u6cd5\u3002\n\n\n2.\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\n\ntwiiter.py\nimport tweepy\nfrom collections import deque\nfrom threading import Thread\n\n# tweepy \u3092\u4f7f\u3046\u524d\u306e\u5fc5\u8981\u6700\u4f4e\u9650\u306e\u6e96\u5099\nCONSUMER_KEY='XXXXXXX'\nCONSUMER_SECRET='XXXXXXXX'\nACCESS_TOKEN='XXXXXXXX'\nACCESS_SECRET='XXXXXXXX'\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n# \u3053\u3053\u307e\u3067\n\nclass Format(object):\n    \"\"\"Class to provide with a variety of formats.\"\"\"\n\n    def __init__(self, tweet):\n        \"\"\"Store some data of tweets in a hash-table. \"\"\"\n        self.status = {\n                'text': tweet.text,\n                'author': tweet.author.screen_name,\n                'reply_name': tweet.in_reply_to_screen_name,\n                'created_at': tweet.created_at,\n                }\n\nclass StreamingFormat(Format):\n\n    def format(self):\n        \"\"\"Format tweet text readable with some information.\"\"\"\n        author     = self.status['author']\n        created_at = self.status['created_at']\n        string = '@\\033[33m{}\\033[0m:{}\\n'.format(author, created_at)\n        string += self.status['text']\n        string += '\\n'\n        return string\n\nclass Memory(deque):\n    \"\"\"Class to have hashed tweet contents.\"\"\"\n\n    def __init__(self, capacity):\n        \"\"\"Define max capacity of self.\"\"\"\n        super().__init__()\n        self.capacity = capacity\n\n    def append(self, item):\n        \"\"\"Append unless over capacity.\"\"\"\n        if len(self) > self.capacity:\n            self.popleft\n        super().append(item)\n\nclass Producer(Thread):\n    \"\"\"Class to get tweets and avoid duplication. \"\"\"\n\n    def __init__(self, queue, api, query):\n        \"\"\" Initialize memory to avoid duplication. \"\"\"\n        super().__init__(target=self.main)\n        self.api = api\n        self.queue = queue\n        self.query = query\n        self.memory = Memory(1000)\n\n    def main(self):\n        \"\"\" Thread to add tweets to queue. \"\"\"\n        while True:\n            for tweet in self.twigen():\n                if tweet is not None:\n                    self.queue.put(tweet)\n            \"\"\"\n            https://syncer.jp/what-is-twitter-api-limit\n            \u4e0a\u8a18\u30b5\u30a4\u30c8\u306b\u3088\u308b\u3068\uff0c Twitter \u306b\u306f Tweet \u306e\u53d6\n            \u5f97\u5236\u9650\u304c\u3042\u308a\uff0c\u305d\u308c\u4ee5\u4e0a\u306e\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u3068\uff0c\n            \u5236\u9650\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u304b\u3089\uff0c\u6c17\u3092\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n            \u5168\u3066\u306e Tweet \u304b\u3089\u691c\u7d22\u3059\u308b\u3068\u304d\u306b\u306f\uff0c15\u5206\u9593\u3067\n            180\u56de\u307e\u3067\u3068\u3044\u3046\u5236\u9650\u304c\u3042\u308b\u306e\u3067\uff0c5\u79d2\u306b\u4e00\u56de\u306e\n            \u30da\u30fc\u30b9\u304c\u6700\u5927\u3002\u30ae\u30ea\u30ae\u30ea\u3092\u653b\u3081\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\uff0c\n            10\u79d2\u304a\u304d\u3050\u3089\u3044\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n            \"\"\"\n            time.sleep(10)\n\n    def twigen(self):\n        \"\"\"Yield a tweet after hashing the tweet and memorizing it\"\"\"\n        import hashlib\n\n        tweets = self.api.search(q=self.query, count=100)\n        for tweet in tweets:\n            hashing = hashlib.md5(tweet.text.encode('utf-8'))\n            hashed_tweet = hashing.hexdigest()\n            if hashed_tweet in self.memory:\n                yield None\n            else:\n                self.memory.append(hashed_tweet)\n                yield tweet\n\nclass Consumer(Thread):\n\n    def __init__(self, queue):\n        super().__init__(target=self.main)\n        self.queue = queue\n\n    def main(self):\n        \"\"\"Take tweet from queue and print it.\"\"\"\n        while True:\n            q = self.queue.get()\n            f = StreamingFormat(q)\n            print(f.format())\n            time.sleep(1)\n\nclass TwitterStreamer(object):\n    \"\"\"Class to print formatted tweet data on console.\"\"\"\n\n    def __init__(self, api, query=None):\n        from queue import Queue\n\n        queue = Queue()\n        Producer(queue, api, query).start()\n        Consumer(queue).start()\n\nif __name__ == '__main__':\n\n    opts = {\n            \"api\":tweepy.API(auth), \n            \"query\":'\u30e9\u30fc\u30c6\u30eb' \n            }\n\n    TwitterStreamer(**opts)\n\n\n\n\u3000CONSUMER_KEY\uff0cCONSUMER_SECRET, ACCESS_TOKEN, ACCESS_SECRET \u306e\u53d6\u5f97\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3059\u308b\u3002\u5fc5\u305a\u5fc5\u8981\u306a\u306e\u3067\u7528\u610f\u3059\u308b\n@decimal1010:2016-04-02 10:36:36\n\u30df\u30c4\u30a2\u30ca\u30b0\u30de\u3063\u3066\u30e9\u30fc\u30c6\u30eb\u306e\u3053\u3068\u304b\n\n@anaguma86:2016-04-02 09:53:06\n\u30d0\u30f3\u30c9\u30a6\u30a4\u30eb\u30ab\u3058\u3083\u306a\u304f\u30cf\u30f3\u30c9\u30a6\u30a4\u30eb\u30ab\u3063\u3066\u8868\u8a18\u306b\u30c6\u30f3\u30b7\u30e7\u30f3\u4e0a\u304c\u308b\u30e9\u30fc\u30c6\u30eb\u3002\n\n@kyuurin525:2016-04-02 09:28:04\n\u306a\u3093\u304b\u958b\u3044\u30665\u30da\u30fc\u30b8\u76ee\u304f\u3089\u3044\u3067\u30e9\u30fc\u30c6\u30eb\u3061\u3083\u3093\u306e\u865c\u306b\u306a\u3063\u305f\n\n@tsube_kii:2016-04-02 08:05:31\n\u30e9\u30a4\u30aa\u30f3\u30ac\u30fc\u30c9\u3067\u30ab\u30a4\u30aa\u30f3\u3068\u4e00\u7dd2\u306b\u3044\u308b\u52d5\u7269\u306e\u7a2e\u985e\u304c\u5168\u7136\u308f\u304b\u3093\u306a\u304b\u3063\u305f\u3093\u3060\u3051\u3069\u30e9\u30fc\u30c6\u30eb\u3063\u3066\u52d5\u7269\u306a\u306e\u306d\u2026\u2026\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u308c\u7d9a\u3051\u308b\u3002\n# 1.\u3053\u306e\u8a18\u4e8b\u3067\u5b66\u3079\u308b\u3053\u3068\u30fb\u5b66\u3079\u306a\u3044\u3053\u3068\n\n\u3000\u5b66\u3079\u308b\u3053\u3068\n\n- tweepy\u306e\u57fa\u672c\u7684\u306a\u5229\u7528\u65b9\u6cd5\u306e\u4e00\u90e8\u3002\n- tweepy\u3092\u6d3b\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f8b\u3002\n\n\u3000\u5b66\u3079\u306a\u3044\u3053\u3068\n\n- Python \u306e\u304d\u308c\u3044\u306a\u8a2d\u8a08\u3002\n- tweepy \u306e\u30af\u30ea\u30a8\u30a4\u30c6\u30a3\u30d6\u306a\u5229\u7528\u65b9\u6cd5\u3002\n\n# 2.\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\n\n```py3:twiiter.py\nimport tweepy\nfrom collections import deque\nfrom threading import Thread\n\n# tweepy \u3092\u4f7f\u3046\u524d\u306e\u5fc5\u8981\u6700\u4f4e\u9650\u306e\u6e96\u5099\nCONSUMER_KEY='XXXXXXX'\nCONSUMER_SECRET='XXXXXXXX'\nACCESS_TOKEN='XXXXXXXX'\nACCESS_SECRET='XXXXXXXX'\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n# \u3053\u3053\u307e\u3067\n\nclass Format(object):\n    \"\"\"Class to provide with a variety of formats.\"\"\"\n\n    def __init__(self, tweet):\n        \"\"\"Store some data of tweets in a hash-table. \"\"\"\n        self.status = {\n                'text': tweet.text,\n                'author': tweet.author.screen_name,\n                'reply_name': tweet.in_reply_to_screen_name,\n                'created_at': tweet.created_at,\n                }\n\nclass StreamingFormat(Format):\n\n    def format(self):\n        \"\"\"Format tweet text readable with some information.\"\"\"\n        author     = self.status['author']\n        created_at = self.status['created_at']\n        string = '@\\033[33m{}\\033[0m:{}\\n'.format(author, created_at)\n        string += self.status['text']\n        string += '\\n'\n        return string\n\nclass Memory(deque):\n    \"\"\"Class to have hashed tweet contents.\"\"\"\n\n    def __init__(self, capacity):\n        \"\"\"Define max capacity of self.\"\"\"\n        super().__init__()\n        self.capacity = capacity\n\n    def append(self, item):\n        \"\"\"Append unless over capacity.\"\"\"\n        if len(self) > self.capacity:\n            self.popleft\n        super().append(item)\n\nclass Producer(Thread):\n    \"\"\"Class to get tweets and avoid duplication. \"\"\"\n\n    def __init__(self, queue, api, query):\n        \"\"\" Initialize memory to avoid duplication. \"\"\"\n        super().__init__(target=self.main)\n        self.api = api\n        self.queue = queue\n        self.query = query\n        self.memory = Memory(1000)\n    \n    def main(self):\n        \"\"\" Thread to add tweets to queue. \"\"\"\n        while True:\n            for tweet in self.twigen():\n                if tweet is not None:\n                    self.queue.put(tweet)\n            \"\"\"\n            https://syncer.jp/what-is-twitter-api-limit\n            \u4e0a\u8a18\u30b5\u30a4\u30c8\u306b\u3088\u308b\u3068\uff0c Twitter \u306b\u306f Tweet \u306e\u53d6\n            \u5f97\u5236\u9650\u304c\u3042\u308a\uff0c\u305d\u308c\u4ee5\u4e0a\u306e\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u3068\uff0c\n            \u5236\u9650\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u304b\u3089\uff0c\u6c17\u3092\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n            \u5168\u3066\u306e Tweet \u304b\u3089\u691c\u7d22\u3059\u308b\u3068\u304d\u306b\u306f\uff0c15\u5206\u9593\u3067\n            180\u56de\u307e\u3067\u3068\u3044\u3046\u5236\u9650\u304c\u3042\u308b\u306e\u3067\uff0c5\u79d2\u306b\u4e00\u56de\u306e\n            \u30da\u30fc\u30b9\u304c\u6700\u5927\u3002\u30ae\u30ea\u30ae\u30ea\u3092\u653b\u3081\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\uff0c\n            10\u79d2\u304a\u304d\u3050\u3089\u3044\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n            \"\"\"\n            time.sleep(10)\n\n    def twigen(self):\n        \"\"\"Yield a tweet after hashing the tweet and memorizing it\"\"\"\n        import hashlib\n\n        tweets = self.api.search(q=self.query, count=100)\n        for tweet in tweets:\n            hashing = hashlib.md5(tweet.text.encode('utf-8'))\n            hashed_tweet = hashing.hexdigest()\n            if hashed_tweet in self.memory:\n                yield None\n            else:\n                self.memory.append(hashed_tweet)\n                yield tweet\n\nclass Consumer(Thread):\n\n    def __init__(self, queue):\n        super().__init__(target=self.main)\n        self.queue = queue\n\n    def main(self):\n        \"\"\"Take tweet from queue and print it.\"\"\"\n        while True:\n            q = self.queue.get()\n            f = StreamingFormat(q)\n            print(f.format())\n            time.sleep(1)\n\nclass TwitterStreamer(object):\n    \"\"\"Class to print formatted tweet data on console.\"\"\"\n\n    def __init__(self, api, query=None):\n        from queue import Queue\n\n        queue = Queue()\n        Producer(queue, api, query).start()\n        Consumer(queue).start()\n\nif __name__ == '__main__':\n\n    opts = {\n            \"api\":tweepy.API(auth), \n            \"query\":'\u30e9\u30fc\u30c6\u30eb' \n            }\n\n    TwitterStreamer(**opts)\n\n```\n\n\u3000`CONSUMER_KEY\uff0cCONSUMER_SECRET, ACCESS_TOKEN, ACCESS_SECRET` \u306e\u53d6\u5f97\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3059\u308b\u3002\u5fc5\u305a\u5fc5\u8981\u306a\u306e\u3067\u7528\u610f\u3059\u308b\n\n```\n@decimal1010:2016-04-02 10:36:36\n\u30df\u30c4\u30a2\u30ca\u30b0\u30de\u3063\u3066\u30e9\u30fc\u30c6\u30eb\u306e\u3053\u3068\u304b\n\n@anaguma86:2016-04-02 09:53:06\n\u30d0\u30f3\u30c9\u30a6\u30a4\u30eb\u30ab\u3058\u3083\u306a\u304f\u30cf\u30f3\u30c9\u30a6\u30a4\u30eb\u30ab\u3063\u3066\u8868\u8a18\u306b\u30c6\u30f3\u30b7\u30e7\u30f3\u4e0a\u304c\u308b\u30e9\u30fc\u30c6\u30eb\u3002\n\n@kyuurin525:2016-04-02 09:28:04\n\u306a\u3093\u304b\u958b\u3044\u30665\u30da\u30fc\u30b8\u76ee\u304f\u3089\u3044\u3067\u30e9\u30fc\u30c6\u30eb\u3061\u3083\u3093\u306e\u865c\u306b\u306a\u3063\u305f\n\n@tsube_kii:2016-04-02 08:05:31\n\u30e9\u30a4\u30aa\u30f3\u30ac\u30fc\u30c9\u3067\u30ab\u30a4\u30aa\u30f3\u3068\u4e00\u7dd2\u306b\u3044\u308b\u52d5\u7269\u306e\u7a2e\u985e\u304c\u5168\u7136\u308f\u304b\u3093\u306a\u304b\u3063\u305f\u3093\u3060\u3051\u3069\u30e9\u30fc\u30c6\u30eb\u3063\u3066\u52d5\u7269\u306a\u306e\u306d\u2026\u2026\n\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u308c\u7d9a\u3051\u308b\u3002\n"}