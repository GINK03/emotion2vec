{"context": "\n\nUniRx\u3067UnityWebRequest\u3092\u30e9\u30c3\u30d7\u3057\u3066\u307f\u305f\n\u98df\u4e2d\u6bd2\u3067\u4f1a\u793e\u304f\u3093\u306a\u3063\u3066\u8a00\u308f\u308c\u3066\u305f\u3068\u304d\u306b\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nIssue\u306b\u306f\u306a\u3063\u3066\u308b\u3051\u3069\u30de\u30c0\u30ab\u30ca\u30fc\u3063\u3066\u3068\u3053\u3067\u3059\u30de\u30c0\u30ab\u30ca\u30de\u30c0\u30ab\u30ca\u30fc\n\u30c6\u30b9\u30c8\u307e\u3060\u4e0d\u5341\u5206\u3060\u3051\u3069\u4e00\u5fdc\u516c\u958b\u3057\u3068\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u3057\u305f\u3089git\u3068\u304b\u306b\u3048\u3044\u3057\u3068\u304d\u307e\u3059\u3002\n\u672a\u4fdd\u8a3c\u3067\u597d\u304d\u306b\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u305d\u306e\u524d\u306b\u666e\u901a\u306bUnityWebRequest\u3064\u304b\u3046\u306e\u306b\u3082\u554f\u984c\u306b\u306a\u308a\u305d\u3046\u306a\u30d0\u30b0\u306a\u3093\u3060\u304b\u4ed5\u69d8\u306a\u3093\u3060\u304b\u304c\u3042\u3063\u305f\u3093\u3067\u5171\u6709\u3002\n\nUnityWebRequest\u306eDownloadHandler.text\u304c\u7a7a(Empty)\u306b\u306a\u308b\u554f\u984c\n\u3053\u308c\u3084\u3063\u3066\u308b\u3068\u304d\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u7d42\u4e86\u5f8c\u306eDownloadHandler.text\u304c\u7a7a\u306b\u306a\u3063\u3066\u3069\u3046\u3057\u305f\u3082\u3093\u304b\u306a\u30fc\u3068\u306a\u308a\u307e\u3057\u305f\u3002\ndata\u3092\u307f\u3066\u3082\u4e2d\u8eab\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3069\u3046\u3084\u3089\u30a8\u30f3\u30b3\u30fc\u30c9\u306b\u5931\u6557\u3057\u3066\u3044\u308b\u6a21\u69d8\u3002\n\u3053\u308c\u4e00\u90e8\u306e\u30b5\u30a4\u30c8\u300c http://google.com/ \u300d\u3068\u304b\u3067\u3060\u3051\u304a\u304d\u307e\u3059\u3002\n\u3068\u3044\u3046\u304bUTF8\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3067\u304d\u306a\u3044\u3068\u304a\u304d\u307e\u3059\u3002\u65e5\u672c\u8a9e\u306f\u6b7b\u3093\u3060\u30fb\u30fb\u30fb\nexample.com\u306f\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3057\u305f\u3002\n\u3067\u3001\u5bfe\u5fdc\u65b9\u6cd5\u3067\u3059\u304c\u3001\u81ea\u524d\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\u3002\u3069\u3046\u305b\u4e00\u884c\u3067\u3059\u3057\u3002\nvar text = System.Text.Encoding.UTF8.GetString(request.downloadHandler.data);\n\n\u306a\u304a\u30a8\u30f3\u30b3\u30fc\u30c9\u306f\u3067\u304d\u3066\u306a\u3044\u6a21\u69d8\u30fb\u30fb\u30fb\u3048\u30fb\u30fb\u30fbgoogle\u3055\u3093\u6587\u5b57\u30b3\u30fc\u30c9\u306a\u3093\u306a\u306e\u30fb\u30fb\u30fb\uff1f\n\n\u4f7f\u3044\u65b9\nObservableWWW\u3068\u4e00\u7dd2\u3067\u3059\u3002\n\u30af\u30e9\u30b9\u540d\u9055\u3046\u3060\u3051\u3001\u3042\u3068header\u306e\u5f15\u6570\u304b\u3089Hash\u306f\u4ea1\u304d\u3082\u306e\u306b\u3057\u307e\u3057\u305f\u3002\n\u305f\u3060\u3001UnityWebRequest\u306e\u307b\u3046\u304c\u9ad8\u6a5f\u80fd\u306a\u306e\u3067UnityWebRequest\u3092Observable\u306b\u3059\u308b\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nToObservable,ToObservableBytes,ToObservableAssetBundle\u3063\u3066\u611f\u3058\u3067\u3059\u3002\n\u305d\u308c\u4ee5\u4e0a\u306e\u62e1\u5f35\u304c\u6b32\u3057\u3044\u5834\u5408\u306f\u3059\u3050\u3067\u304d\u308b\u3093\u3067\u62e1\u5f35\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nFetch\u30e1\u30bd\u30c3\u30c9\u3092\u62e1\u5f35\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u30c7\u30fc\u30bf\u306e\u901a\u77e5\u90e8\u5206\u3060\u3051\u5206\u96e2\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u4e00\u5207\u7121\u4fdd\u8a3c\u3067\u3059\u3002\u53c2\u8003\u307e\u3067\u306b\u3002\n\u3042\u3068\u30b3\u30ec\u3060\u3068\u591a\u5206(\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7279\u6027\u4e0a)\u3042\u3093\u307e\u308a\u4f7f\u3044\u3084\u3059\u304f\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3055\u3089\u306b\u4e00\u679a\u81ea\u524d\u306e\u901a\u4fe1\u30af\u30e9\u30b9\u304b\u4f55\u304b\u4f5c\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u5b9f\u88c5\u306f\u307b\u307c\u307b\u307cObservableWWW\u306b\u5408\u308f\u305b\u3066\u3044\u307e\u3059\u3002\n\u81ea\u5206\u3067\u8003\u3048\u308b\u3088\u308a\u5049\u3044\u4eba\u306b\u53f3\u306a\u3089\u3048\u3059\u308b\u307b\u3046\u304c\u4e8b\u6545\u3089\u306a\u3044\u3088\u306d\u3002\uff08\u3064\u307e\u308a\u5927\u90e8\u5206\u30d1\u30af\u308a\u307e\u3057\u305f\uff09\n\nObservableWebRequest\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing UniRx;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n#if !UniRxLibrary\nusing ObservableUnity = UniRx.Observable;\n#endif\n\nnamespace UniRx.WebRequest\n{\n    public static class ObservableWebRequest\n    {\n        public static IObservable<UnityWebRequest> ToRequestObservable(this UnityWebRequest request, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<UnityWebRequest>((observer, cancellation) => Fetch(request, null, observer, progress, cancellation));\n        }\n\n        public static IObservable<string> ToObservable(this UnityWebRequest request, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<string>((observer, cancellation) => FetchText(request, null, observer, progress, cancellation));\n        }\n\n        public static IObservable<byte[]> ToBytesObservable(this UnityWebRequest request, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<byte[]>((observer, cancellation) => Fetch(request, null, observer, progress, cancellation));\n        }\n\n        public static IObservable<string> Get(string url, IDictionary<string,string> headers = null, IProgress<float> progress = null)\n        {\n            return\n                ObservableUnity.FromCoroutine<string>(\n                    (observer, cancellation) =>\n                        FetchText(UnityWebRequest.Get(url), headers, observer, progress, cancellation));\n        }\n\n        public static IObservable<byte[]> GetAndGetBytes(string url, IDictionary<string, string> headers = null, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<byte[]>((observer, cancellation) => FetchBytes(UnityWebRequest.Get(url),headers, observer, progress, cancellation));\n        }\n        public static IObservable<UnityWebRequest> GetRequest(string url, IDictionary<string, string> headers = null, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<UnityWebRequest>((observer, cancellation) => Fetch(UnityWebRequest.Get(url), headers, observer, progress, cancellation));\n        }\n\n        public static IObservable<string> Post(string url, Dictionary<string, string> postData,\n            IDictionary<string, string> headers = null, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<string>((observer, cancellation) => FetchText(UnityWebRequest.Post(url, postData), headers, observer, progress, cancellation)); \n\n        }\n\n        public static IObservable<byte[]> PostAndGetBytes(string url, Dictionary<string, string> postData, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<byte[]>((observer, cancellation) => FetchBytes(UnityWebRequest.Post(url, postData),null, observer, progress, cancellation));\n        }\n\n        public static IObservable<byte[]> PostAndGetBytes(string url, Dictionary<string, string> postData, IDictionary<string, string> headers, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<byte[]>((observer, cancellation) => FetchBytes(UnityWebRequest.Post(url, postData),headers, observer, progress, cancellation));\n        }\n\n        public static IObservable<UnityWebRequest> PostRequest(string url, Dictionary<string, string> postData, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<UnityWebRequest>((observer, cancellation) => Fetch(UnityWebRequest.Post(url, postData), null, observer, progress, cancellation));\n        }\n\n        public static IObservable<UnityWebRequest> PostRequest(string url, Dictionary<string, string> postData, IDictionary<string, string> headers , IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<UnityWebRequest>((observer, cancellation) => Fetch(UnityWebRequest.Post(url, postData), headers, observer, progress, cancellation));\n        }\n\n\n        public static IObservable<AssetBundle> LoadFromCacheOrDownload(string url, uint version, uint crc, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<AssetBundle>((observer, cancellation) => FetchAssetBundle(UnityWebRequest.GetAssetBundle(url, version, crc),null, observer, progress, cancellation));\n        }\n\n\n        static IEnumerator Fetch<T>(UnityWebRequest request, IDictionary<string, string> headers, IObserver<T> observer,\n            IProgress<float> reportProgress, CancellationToken cancel)\n        {\n\n            if (headers != null)\n            {\n                foreach (var header in headers)\n                {\n                    request.SetRequestHeader(header.Key, header.Value);\n                }\n\n            }\n\n            if (reportProgress != null)\n            {\n                var operation = request.Send();\n                while (!operation.isDone && !cancel.IsCancellationRequested)\n                {\n                    try\n                    {\n                        reportProgress.Report(operation.progress);\n                    }\n                    catch (Exception ex)\n                    {\n                        observer.OnError(ex);\n                        yield break;\n                    }\n                    yield return null;\n                }\n            }\n            else\n            {\n                yield return request.Send();\n            }\n\n\n\n            if (cancel.IsCancellationRequested)\n            {\n                yield break;\n            }\n\n            if (reportProgress != null)\n            {\n                try\n                {\n                    reportProgress.Report(request.downloadProgress);\n                }\n                catch (Exception ex)\n                {\n                    observer.OnError(ex);\n                    yield break;\n                }\n            }\n        }\n\n\n\n\n\n\n\n        static IEnumerator FetchRequest(UnityWebRequest request, IDictionary<string, string> headers, IObserver<UnityWebRequest> observer,\n            IProgress<float> reportProgress, CancellationToken cancel)\n        {\n            using (request)\n            {\n\n\n                yield return Fetch(request, headers, observer, reportProgress, cancel);\n\n                if (cancel.IsCancellationRequested)\n                {\n                    yield break;\n                }\n\n                if (!string.IsNullOrEmpty(request.error))\n                {\n                    observer.OnError(new UnityWebRequestErrorException(request));\n                }\n                else\n                {\n                    observer.OnNext(request);\n                    observer.OnCompleted();\n                }\n            }\n        }\n\n        static IEnumerator FetchText(UnityWebRequest request, IDictionary<string, string> headers, IObserver<string> observer,\n    IProgress<float> reportProgress, CancellationToken cancel)\n        {\n            using (request)\n            {\n                yield return Fetch(request, headers, observer, reportProgress, cancel);\n\n                if (cancel.IsCancellationRequested)\n                {\n                    yield break;\n                }\n\n                if (!string.IsNullOrEmpty(request.error))\n                {\n                    observer.OnError(new UnityWebRequestErrorException(request));\n                }\n                else\n                {\n                    var text = System.Text.Encoding.UTF8.GetString(request.downloadHandler.data);\n                    observer.OnNext(text);\n                    observer.OnCompleted();\n                }\n            }\n        }\n\n        static IEnumerator FetchAssetBundle(UnityWebRequest request, IDictionary<string, string> headers, IObserver<AssetBundle> observer,\n    IProgress<float> reportProgress, CancellationToken cancel)\n        {\n            using (request)\n            {\n                yield return Fetch(request, headers, observer, reportProgress, cancel);\n\n                if (cancel.IsCancellationRequested)\n                {\n                    yield break;\n                }\n\n                if (!string.IsNullOrEmpty(request.error))\n                {\n                    observer.OnError(new UnityWebRequestErrorException(request));\n                }\n                else\n                {\n                    var handler = request.downloadHandler as DownloadHandlerAssetBundle;\n                    var assetBundle = (handler != null) ? handler.assetBundle : null;\n\n                    observer.OnNext(assetBundle);\n                    observer.OnCompleted();\n                }\n            }\n        }\n\n        static IEnumerator FetchBytes(UnityWebRequest request, IDictionary<string, string> headers, IObserver<byte[]> observer,\n    IProgress<float> reportProgress, CancellationToken cancel)\n        {\n            using (request)\n            {\n                yield return Fetch(request, headers, observer, reportProgress, cancel);\n\n                if (cancel.IsCancellationRequested)\n                {\n                    yield break;\n                }\n\n                if (!string.IsNullOrEmpty(request.error))\n                {\n                    observer.OnError(new UnityWebRequestErrorException(request));\n                }\n                else\n                {\n                    observer.OnNext(request.downloadHandler.data);\n                    observer.OnCompleted();\n                }\n            }\n        }\n\n\n\n\n    }\n\n    public class UnityWebRequestErrorException : Exception\n    {\n        public string RawErrorMessage { get; private set; }\n        public bool HasResponse { get; private set; }\n        public string Text { get; private set; }\n        public System.Net.HttpStatusCode StatusCode { get; private set; }\n        public System.Collections.Generic.Dictionary<string, string> ResponseHeaders { get; private set; }\n        public UnityWebRequest Request { get; private set; }\n\n        // cache the text because if www was disposed, can't access it.\n        public UnityWebRequestErrorException(UnityWebRequest request)\n        {\n            this.Request = request;\n            this.RawErrorMessage = request.error;\n            this.ResponseHeaders = request.GetResponseHeaders();\n            this.HasResponse = false;\n\n            StatusCode = (System.Net.HttpStatusCode)request.responseCode;\n\n\n            if (request.downloadHandler != null)\n            {\n                Text = request.downloadHandler.text;\n            }\n\n            if (request.responseCode != 0)\n            {\n                this.HasResponse = true;\n            }\n        }\n\n        public override string ToString()\n        {\n            var text = this.Text;\n            if (string.IsNullOrEmpty(text))\n            {\n                return RawErrorMessage;\n            }\n            else\n            {\n                return RawErrorMessage + \" \" + text;\n            }\n        }\n    }\n}\n\n\n\n\nsample\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing UniRx.WebRequest;\nusing UnityEngine;\nusing UniRx;\nusing UnityEngine.Networking;\n\nnamespace Assets.Editor\n{\n    class UnityWebRequestSample: MonoBehaviour\n    {\n\n        void Start()\n        {\n            // Basic: Download from google.\n            {\n                ObservableWebRequest.Get(\"http://example.com/\")\n                    .Subscribe(\n                        x => Debug.Log(x.Substring(0, 100)), // onSuccess\n                        ex => Debug.LogException(ex)); // onError\n            }\n\n            // Linear Pattern with LINQ Query Expressions\n            // download after google, start bing download\n            {\n                var query = from google in ObservableWebRequest.Get(\"http://google.com/\")\n                            from bing in ObservableWebRequest.Get(\"http://bing.com/\")\n                            select new { google, bing };\n\n                var cancel = query.Subscribe(x => Debug.Log(x.google.Substring(0, 100) + \":\" + x.bing.Substring(0, 100)));\n\n                // Call Dispose is cancel downloading.\n                cancel.Dispose();\n            }\n\n            // Observable.WhenAll is for parallel asynchronous operation\n            // (It's like Observable.Zip but specialized for single async operations like Task.WhenAll of .NET 4)\n            {\n                var parallel = Observable.WhenAll(\n                    ObservableWebRequest.Get(\"http://google.com/\"),\n                    ObservableWebRequest.Get(\"http://bing.com/\"),\n                    ObservableWebRequest.Get(\"http://unity3d.com/\"));\n\n                parallel.Subscribe(xs =>\n                {\n                    Debug.Log(xs[0].Substring(0, 100)); // google\n                    Debug.Log(xs[1].Substring(0, 100)); // bing\n                    Debug.Log(xs[2].Substring(0, 100)); // unity\n                });\n            }\n\n            // with Progress\n            {\n                // notifier for progress\n                var progressNotifier = new ScheduledNotifier<float>();\n                progressNotifier.Subscribe(x => Debug.Log(x)); // write www.progress\n\n                // pass notifier to WWW.Get/Post\n                ObservableWebRequest.Get(\"http://google.com/\", progress: progressNotifier).Subscribe();\n            }\n\n            // with Error\n            {\n                // If WWW has .error, ObservableWWW throws WWWErrorException to onError pipeline.\n                // WWWErrorException has RawErrorMessage, HasResponse, StatusCode, ResponseHeaders\n                ObservableWebRequest.Get(\"http://www.google.com/404\")\n                    .CatchIgnore((UnityWebRequestErrorException ex) =>\n                    {\n                        Debug.Log(ex.RawErrorMessage);\n                        if (ex.HasResponse)\n                        {\n                            Debug.Log(ex.StatusCode);\n                        }\n                        foreach (var item in ex.ResponseHeaders)\n                        {\n                            Debug.Log(item.Key + \":\" + item.Value);\n                        }\n                    })\n                    .Subscribe();\n            }\n\n            {\n                var uwq = UnityWebRequest.Get(\"http://google.com/\");\n                uwq.ToObservable().Subscribe(x =>\n                Debug.Log(x.Substring(0, 100))\n                );\n\n\n            }\n        }\n    }\n}\n\n\n\n\n\u30d1\u30af\u3063\u3066\u308b\u306e\u3067\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\nhttps://github.com/neuecc/UniRx/blob/master/LICENSE\n# UniRx\u3067UnityWebRequest\u3092\u30e9\u30c3\u30d7\u3057\u3066\u307f\u305f #\n\n\u98df\u4e2d\u6bd2\u3067\u4f1a\u793e\u304f\u3093\u306a\u3063\u3066\u8a00\u308f\u308c\u3066\u305f\u3068\u304d\u306b\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nIssue\u306b\u306f\u306a\u3063\u3066\u308b\u3051\u3069\u30de\u30c0\u30ab\u30ca\u30fc\u3063\u3066\u3068\u3053\u3067\u3059\u30de\u30c0\u30ab\u30ca\u30de\u30c0\u30ab\u30ca\u30fc\n\n\u30c6\u30b9\u30c8\u307e\u3060\u4e0d\u5341\u5206\u3060\u3051\u3069\u4e00\u5fdc\u516c\u958b\u3057\u3068\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u3057\u305f\u3089git\u3068\u304b\u306b\u3048\u3044\u3057\u3068\u304d\u307e\u3059\u3002\n\n\u672a\u4fdd\u8a3c\u3067\u597d\u304d\u306b\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u305d\u306e\u524d\u306b\u666e\u901a\u306bUnityWebRequest\u3064\u304b\u3046\u306e\u306b\u3082\u554f\u984c\u306b\u306a\u308a\u305d\u3046\u306a\u30d0\u30b0\u306a\u3093\u3060\u304b\u4ed5\u69d8\u306a\u3093\u3060\u304b\u304c\u3042\u3063\u305f\u3093\u3067\u5171\u6709\u3002\n\n# UnityWebRequest\u306eDownloadHandler.text\u304c\u7a7a(Empty)\u306b\u306a\u308b\u554f\u984c #\n\n\u3053\u308c\u3084\u3063\u3066\u308b\u3068\u304d\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u7d42\u4e86\u5f8c\u306eDownloadHandler.text\u304c\u7a7a\u306b\u306a\u3063\u3066\u3069\u3046\u3057\u305f\u3082\u3093\u304b\u306a\u30fc\u3068\u306a\u308a\u307e\u3057\u305f\u3002\ndata\u3092\u307f\u3066\u3082\u4e2d\u8eab\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3069\u3046\u3084\u3089\u30a8\u30f3\u30b3\u30fc\u30c9\u306b\u5931\u6557\u3057\u3066\u3044\u308b\u6a21\u69d8\u3002\n\n\u3053\u308c\u4e00\u90e8\u306e\u30b5\u30a4\u30c8\u300c http://google.com/ \u300d\u3068\u304b\u3067\u3060\u3051\u304a\u304d\u307e\u3059\u3002\n\u3068\u3044\u3046\u304bUTF8\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3067\u304d\u306a\u3044\u3068\u304a\u304d\u307e\u3059\u3002\u65e5\u672c\u8a9e\u306f\u6b7b\u3093\u3060\u30fb\u30fb\u30fb\nexample.com\u306f\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3057\u305f\u3002\n\n\u3067\u3001\u5bfe\u5fdc\u65b9\u6cd5\u3067\u3059\u304c\u3001\u81ea\u524d\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\u3002\u3069\u3046\u305b\u4e00\u884c\u3067\u3059\u3057\u3002\n\n```cshap\nvar text = System.Text.Encoding.UTF8.GetString(request.downloadHandler.data);\n```\n\n\u306a\u304a\u30a8\u30f3\u30b3\u30fc\u30c9\u306f\u3067\u304d\u3066\u306a\u3044\u6a21\u69d8\u30fb\u30fb\u30fb\u3048\u30fb\u30fb\u30fbgoogle\u3055\u3093\u6587\u5b57\u30b3\u30fc\u30c9\u306a\u3093\u306a\u306e\u30fb\u30fb\u30fb\uff1f\n\n# \u4f7f\u3044\u65b9 #\n\nObservableWWW\u3068\u4e00\u7dd2\u3067\u3059\u3002\n\u30af\u30e9\u30b9\u540d\u9055\u3046\u3060\u3051\u3001\u3042\u3068header\u306e\u5f15\u6570\u304b\u3089Hash\u306f\u4ea1\u304d\u3082\u306e\u306b\u3057\u307e\u3057\u305f\u3002\n\u305f\u3060\u3001UnityWebRequest\u306e\u307b\u3046\u304c\u9ad8\u6a5f\u80fd\u306a\u306e\u3067UnityWebRequest\u3092Observable\u306b\u3059\u308b\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\nToObservable,ToObservableBytes,ToObservableAssetBundle\u3063\u3066\u611f\u3058\u3067\u3059\u3002\n\u305d\u308c\u4ee5\u4e0a\u306e\u62e1\u5f35\u304c\u6b32\u3057\u3044\u5834\u5408\u306f\u3059\u3050\u3067\u304d\u308b\u3093\u3067\u62e1\u5f35\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nFetch\u30e1\u30bd\u30c3\u30c9\u3092\u62e1\u5f35\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u30c7\u30fc\u30bf\u306e\u901a\u77e5\u90e8\u5206\u3060\u3051\u5206\u96e2\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n#\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9#\n\n\u4e00\u5207\u7121\u4fdd\u8a3c\u3067\u3059\u3002\u53c2\u8003\u307e\u3067\u306b\u3002\n\u3042\u3068\u30b3\u30ec\u3060\u3068\u591a\u5206(\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7279\u6027\u4e0a)\u3042\u3093\u307e\u308a\u4f7f\u3044\u3084\u3059\u304f\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3055\u3089\u306b\u4e00\u679a\u81ea\u524d\u306e\u901a\u4fe1\u30af\u30e9\u30b9\u304b\u4f55\u304b\u4f5c\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5b9f\u88c5\u306f\u307b\u307c\u307b\u307cObservableWWW\u306b\u5408\u308f\u305b\u3066\u3044\u307e\u3059\u3002\n\u81ea\u5206\u3067\u8003\u3048\u308b\u3088\u308a\u5049\u3044\u4eba\u306b\u53f3\u306a\u3089\u3048\u3059\u308b\u307b\u3046\u304c\u4e8b\u6545\u3089\u306a\u3044\u3088\u306d\u3002\uff08\u3064\u307e\u308a\u5927\u90e8\u5206\u30d1\u30af\u308a\u307e\u3057\u305f\uff09\n\n```csharp:ObservableWebRequest\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing UniRx;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n#if !UniRxLibrary\nusing ObservableUnity = UniRx.Observable;\n#endif\n\nnamespace UniRx.WebRequest\n{\n    public static class ObservableWebRequest\n    {\n        public static IObservable<UnityWebRequest> ToRequestObservable(this UnityWebRequest request, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<UnityWebRequest>((observer, cancellation) => Fetch(request, null, observer, progress, cancellation));\n        }\n\n        public static IObservable<string> ToObservable(this UnityWebRequest request, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<string>((observer, cancellation) => FetchText(request, null, observer, progress, cancellation));\n        }\n\n        public static IObservable<byte[]> ToBytesObservable(this UnityWebRequest request, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<byte[]>((observer, cancellation) => Fetch(request, null, observer, progress, cancellation));\n        }\n\n        public static IObservable<string> Get(string url, IDictionary<string,string> headers = null, IProgress<float> progress = null)\n        {\n            return\n                ObservableUnity.FromCoroutine<string>(\n                    (observer, cancellation) =>\n                        FetchText(UnityWebRequest.Get(url), headers, observer, progress, cancellation));\n        }\n\n        public static IObservable<byte[]> GetAndGetBytes(string url, IDictionary<string, string> headers = null, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<byte[]>((observer, cancellation) => FetchBytes(UnityWebRequest.Get(url),headers, observer, progress, cancellation));\n        }\n        public static IObservable<UnityWebRequest> GetRequest(string url, IDictionary<string, string> headers = null, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<UnityWebRequest>((observer, cancellation) => Fetch(UnityWebRequest.Get(url), headers, observer, progress, cancellation));\n        }\n\n        public static IObservable<string> Post(string url, Dictionary<string, string> postData,\n            IDictionary<string, string> headers = null, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<string>((observer, cancellation) => FetchText(UnityWebRequest.Post(url, postData), headers, observer, progress, cancellation)); \n            \n        }\n\n        public static IObservable<byte[]> PostAndGetBytes(string url, Dictionary<string, string> postData, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<byte[]>((observer, cancellation) => FetchBytes(UnityWebRequest.Post(url, postData),null, observer, progress, cancellation));\n        }\n\n        public static IObservable<byte[]> PostAndGetBytes(string url, Dictionary<string, string> postData, IDictionary<string, string> headers, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<byte[]>((observer, cancellation) => FetchBytes(UnityWebRequest.Post(url, postData),headers, observer, progress, cancellation));\n        }\n\n        public static IObservable<UnityWebRequest> PostRequest(string url, Dictionary<string, string> postData, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<UnityWebRequest>((observer, cancellation) => Fetch(UnityWebRequest.Post(url, postData), null, observer, progress, cancellation));\n        }\n\n        public static IObservable<UnityWebRequest> PostRequest(string url, Dictionary<string, string> postData, IDictionary<string, string> headers , IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<UnityWebRequest>((observer, cancellation) => Fetch(UnityWebRequest.Post(url, postData), headers, observer, progress, cancellation));\n        }\n\n\n        public static IObservable<AssetBundle> LoadFromCacheOrDownload(string url, uint version, uint crc, IProgress<float> progress = null)\n        {\n            return ObservableUnity.FromCoroutine<AssetBundle>((observer, cancellation) => FetchAssetBundle(UnityWebRequest.GetAssetBundle(url, version, crc),null, observer, progress, cancellation));\n        }\n\n\n        static IEnumerator Fetch<T>(UnityWebRequest request, IDictionary<string, string> headers, IObserver<T> observer,\n            IProgress<float> reportProgress, CancellationToken cancel)\n        {\n\n            if (headers != null)\n            {\n                foreach (var header in headers)\n                {\n                    request.SetRequestHeader(header.Key, header.Value);\n                }\n\n            }\n\n            if (reportProgress != null)\n            {\n                var operation = request.Send();\n                while (!operation.isDone && !cancel.IsCancellationRequested)\n                {\n                    try\n                    {\n                        reportProgress.Report(operation.progress);\n                    }\n                    catch (Exception ex)\n                    {\n                        observer.OnError(ex);\n                        yield break;\n                    }\n                    yield return null;\n                }\n            }\n            else\n            {\n                yield return request.Send();\n            }\n\n\n\n            if (cancel.IsCancellationRequested)\n            {\n                yield break;\n            }\n\n            if (reportProgress != null)\n            {\n                try\n                {\n                    reportProgress.Report(request.downloadProgress);\n                }\n                catch (Exception ex)\n                {\n                    observer.OnError(ex);\n                    yield break;\n                }\n            }\n        }\n\n\n\n\n\n\n\n        static IEnumerator FetchRequest(UnityWebRequest request, IDictionary<string, string> headers, IObserver<UnityWebRequest> observer,\n            IProgress<float> reportProgress, CancellationToken cancel)\n        {\n            using (request)\n            {\n\n\n                yield return Fetch(request, headers, observer, reportProgress, cancel);\n\n                if (cancel.IsCancellationRequested)\n                {\n                    yield break;\n                }\n\n                if (!string.IsNullOrEmpty(request.error))\n                {\n                    observer.OnError(new UnityWebRequestErrorException(request));\n                }\n                else\n                {\n                    observer.OnNext(request);\n                    observer.OnCompleted();\n                }\n            }\n        }\n\n        static IEnumerator FetchText(UnityWebRequest request, IDictionary<string, string> headers, IObserver<string> observer,\n    IProgress<float> reportProgress, CancellationToken cancel)\n        {\n            using (request)\n            {\n                yield return Fetch(request, headers, observer, reportProgress, cancel);\n\n                if (cancel.IsCancellationRequested)\n                {\n                    yield break;\n                }\n\n                if (!string.IsNullOrEmpty(request.error))\n                {\n                    observer.OnError(new UnityWebRequestErrorException(request));\n                }\n                else\n                {\n                    var text = System.Text.Encoding.UTF8.GetString(request.downloadHandler.data);\n                    observer.OnNext(text);\n                    observer.OnCompleted();\n                }\n            }\n        }\n\n        static IEnumerator FetchAssetBundle(UnityWebRequest request, IDictionary<string, string> headers, IObserver<AssetBundle> observer,\n    IProgress<float> reportProgress, CancellationToken cancel)\n        {\n            using (request)\n            {\n                yield return Fetch(request, headers, observer, reportProgress, cancel);\n\n                if (cancel.IsCancellationRequested)\n                {\n                    yield break;\n                }\n\n                if (!string.IsNullOrEmpty(request.error))\n                {\n                    observer.OnError(new UnityWebRequestErrorException(request));\n                }\n                else\n                {\n                    var handler = request.downloadHandler as DownloadHandlerAssetBundle;\n                    var assetBundle = (handler != null) ? handler.assetBundle : null;\n\n                    observer.OnNext(assetBundle);\n                    observer.OnCompleted();\n                }\n            }\n        }\n\n        static IEnumerator FetchBytes(UnityWebRequest request, IDictionary<string, string> headers, IObserver<byte[]> observer,\n    IProgress<float> reportProgress, CancellationToken cancel)\n        {\n            using (request)\n            {\n                yield return Fetch(request, headers, observer, reportProgress, cancel);\n\n                if (cancel.IsCancellationRequested)\n                {\n                    yield break;\n                }\n\n                if (!string.IsNullOrEmpty(request.error))\n                {\n                    observer.OnError(new UnityWebRequestErrorException(request));\n                }\n                else\n                {\n                    observer.OnNext(request.downloadHandler.data);\n                    observer.OnCompleted();\n                }\n            }\n        }\n\n\n\n\n    }\n\n    public class UnityWebRequestErrorException : Exception\n    {\n        public string RawErrorMessage { get; private set; }\n        public bool HasResponse { get; private set; }\n        public string Text { get; private set; }\n        public System.Net.HttpStatusCode StatusCode { get; private set; }\n        public System.Collections.Generic.Dictionary<string, string> ResponseHeaders { get; private set; }\n        public UnityWebRequest Request { get; private set; }\n\n        // cache the text because if www was disposed, can't access it.\n        public UnityWebRequestErrorException(UnityWebRequest request)\n        {\n            this.Request = request;\n            this.RawErrorMessage = request.error;\n            this.ResponseHeaders = request.GetResponseHeaders();\n            this.HasResponse = false;\n\n            StatusCode = (System.Net.HttpStatusCode)request.responseCode;\n\n\n            if (request.downloadHandler != null)\n            {\n                Text = request.downloadHandler.text;\n            }\n\n            if (request.responseCode != 0)\n            {\n                this.HasResponse = true;\n            }\n        }\n\n        public override string ToString()\n        {\n            var text = this.Text;\n            if (string.IsNullOrEmpty(text))\n            {\n                return RawErrorMessage;\n            }\n            else\n            {\n                return RawErrorMessage + \" \" + text;\n            }\n        }\n    }\n}\n\n```\n\n\n```csharp:sample\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing UniRx.WebRequest;\nusing UnityEngine;\nusing UniRx;\nusing UnityEngine.Networking;\n\nnamespace Assets.Editor\n{\n    class UnityWebRequestSample: MonoBehaviour\n    {\n\n        void Start()\n        {\n            // Basic: Download from google.\n            {\n                ObservableWebRequest.Get(\"http://example.com/\")\n                    .Subscribe(\n                        x => Debug.Log(x.Substring(0, 100)), // onSuccess\n                        ex => Debug.LogException(ex)); // onError\n            }\n\n            // Linear Pattern with LINQ Query Expressions\n            // download after google, start bing download\n            {\n                var query = from google in ObservableWebRequest.Get(\"http://google.com/\")\n                            from bing in ObservableWebRequest.Get(\"http://bing.com/\")\n                            select new { google, bing };\n\n                var cancel = query.Subscribe(x => Debug.Log(x.google.Substring(0, 100) + \":\" + x.bing.Substring(0, 100)));\n\n                // Call Dispose is cancel downloading.\n                cancel.Dispose();\n            }\n\n            // Observable.WhenAll is for parallel asynchronous operation\n            // (It's like Observable.Zip but specialized for single async operations like Task.WhenAll of .NET 4)\n            {\n                var parallel = Observable.WhenAll(\n                    ObservableWebRequest.Get(\"http://google.com/\"),\n                    ObservableWebRequest.Get(\"http://bing.com/\"),\n                    ObservableWebRequest.Get(\"http://unity3d.com/\"));\n\n                parallel.Subscribe(xs =>\n                {\n                    Debug.Log(xs[0].Substring(0, 100)); // google\n                    Debug.Log(xs[1].Substring(0, 100)); // bing\n                    Debug.Log(xs[2].Substring(0, 100)); // unity\n                });\n            }\n\n            // with Progress\n            {\n                // notifier for progress\n                var progressNotifier = new ScheduledNotifier<float>();\n                progressNotifier.Subscribe(x => Debug.Log(x)); // write www.progress\n\n                // pass notifier to WWW.Get/Post\n                ObservableWebRequest.Get(\"http://google.com/\", progress: progressNotifier).Subscribe();\n            }\n\n            // with Error\n            {\n                // If WWW has .error, ObservableWWW throws WWWErrorException to onError pipeline.\n                // WWWErrorException has RawErrorMessage, HasResponse, StatusCode, ResponseHeaders\n                ObservableWebRequest.Get(\"http://www.google.com/404\")\n                    .CatchIgnore((UnityWebRequestErrorException ex) =>\n                    {\n                        Debug.Log(ex.RawErrorMessage);\n                        if (ex.HasResponse)\n                        {\n                            Debug.Log(ex.StatusCode);\n                        }\n                        foreach (var item in ex.ResponseHeaders)\n                        {\n                            Debug.Log(item.Key + \":\" + item.Value);\n                        }\n                    })\n                    .Subscribe();\n            }\n\n            {\n                var uwq = UnityWebRequest.Get(\"http://google.com/\");\n                uwq.ToObservable().Subscribe(x =>\n                Debug.Log(x.Substring(0, 100))\n                );\n\n\n            }\n        }\n    }\n}\n\n\n```\n\n\u30d1\u30af\u3063\u3066\u308b\u306e\u3067\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\nhttps://github.com/neuecc/UniRx/blob/master/LICENSE\n", "tags": ["Unity", "UniRx", "C#"]}