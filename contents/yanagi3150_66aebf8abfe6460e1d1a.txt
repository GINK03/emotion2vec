{"context": " More than 1 year has passed since last update.\u30cb\u30c3\u30c1\u306a\u3053\u3068\u3057\u304b\u66f8\u3044\u3066\u3044\u306a\u3044\u81ea\u5206\u306b\u3057\u3066\u306f\u53cd\u5fdc\u304c\u5927\u304d\u304b\u3063\u305f\u6c17\u304c\u3057\u305f\u306e\u3067\u3082\u3046\u5c11\u3057\u8272\u3005\u3084\u3063\u3066\u307f\u305f\u3002\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n\u6c4e\u7528\u30bf\u30b9\u30af\u3092\u4f5c\u308d\u3046\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\u524d\u56de\u3068\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u540c\u3058\u3067\u3059\u3002\nhttps://github.com/keisuke-yanagisawa/study/blob/20151205/luigi/param_tuning.py\n\u4eca\u56de\u306e\u30c6\u30fc\u30de\u306f\u3001\u6c4e\u7528\u306e\u30bf\u30b9\u30af\u3092\u4f5c\u308a\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3002\n\u3044\u308d\u3093\u306a\u30bf\u30b9\u30af\u3092\u4f5c\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u3084\u3063\u3071\u308a\u6c4e\u7528\u306e\u3082\u306e\u3092\u4f5c\u308b\u3068\u5b09\u3057\u3044\u306e\u306f\u3069\u3053\u3067\u3082\u3044\u3063\u3057\u3087\u3002\u305d\u3053\u3067\u3001\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u7d50\u679c\u3092\u96c6\u7d04\u3057\n\u6700\u826f\u5024\u3092\u51fa\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3060\u3051\u3092\u307e\u3068\u3081\u3066csv\u5f62\u5f0f\u3067\u51fa\u529b\u3059\u308b\n\n\u3068\u3044\u3046\u3053\u3068\u3092\u6c4e\u7528\u7684\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u30bf\u30b9\u30af\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nclass param_tuning(luigi.Task):\n    tasks        = luigi.Parameter()              # luigi.Task\u306e1\u6b21\u5143\u914d\u5217\n    text_format  = luigi.Parameter()              # python\u306e\u300c\u5909\u6570\u540d\u8a18\u8ff0\u4ed8\u304d\u306e\u300d\u6b63\u898f\u8868\u73fe\u3092\u6e21\u3059\n    reduce_pivot = luigi.Parameter()              # \u3069\u306e\u5909\u6570\u3092\u96c6\u7d04\u3067\u5229\u7528\u3059\u308b\u304b\n    reduce_rule  = luigi.Parameter(default=\"min\") # \u96c6\u7d04\u3059\u308b\u95a2\u6570\u3092\u6307\u5b9a, min or max\n    out_file     = luigi.Parameter()              # \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\n\n    def requires(self):\n        return self.tasks;\n    def output(self):\n        return luigi.LocalTarget(self.out_file)\n\n    def run(self):\n\n        # making pandas dataframe\n        results = []\n        for task in self.requires():\n            with task.output().open() as taskfile:\n                string = taskfile.read()\n                groupdict = re.search(self.text_format, string).groupdict()\n                results.append(groupdict)\n        df = pd.DataFrame.from_dict(results);\n        df[self.reduce_pivot] = convert2num(df[self.reduce_pivot])\n        values = df[self.reduce_pivot]\n\n        # Aggregation of parameter tuning results\n        if self.reduce_rule == \"min\":\n            best_val = min(values)\n        elif self.reduce_rule == \"max\":\n            best_val = max(values)\n        else:\n            print(\"reduce_rule must be min or max. your input is %s\" % self.reduce_rule)\n            exit(1);\n\n        # Rearrangement of column order\n        column_order = filter(lambda key: key != self.reduce_pivot, df.columns) + [self.reduce_pivot]\n        df = df[column_order]\n\n        # Outputting results as csv formatted data\n        df[df[self.reduce_pivot] == best_val].to_csv(self.output().fn, index=False);\n\n\u96c6\u7d04\u95a2\u4fc2\u306f\u8272\u3005\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u9762\u5012\u306b\u306a\u308a\u3001pandas\u306b\u4efb\u305b\u307e\u3057\u305f\u3002\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3001\n\n\u4e00\u3064\u4e00\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u8a08\u7b97\u3092requires()\u3067\u5b9f\u884c\u3057\n\u7d50\u679c\u3092\u3059\u3079\u3066pandas dataframe\u306b\u96c6\u8a08\n\u6700\u3082\u826f\u3044\u5024\u3092\u96c6\u7d04\u90e8\u5206\u3067\u6c42\u3081\n(csv\u306e\u6700\u5f8c\u306b\u96c6\u7d04\u3067\u7528\u3044\u305f\u5024\u304c\u304f\u308b\u3088\u3046\u306b\u7de8\u96c6\u3057\u3066)\n\u6700\u3082\u826f\u3044\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u3060\u3051\u3092(\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u8907\u6570\u500b)\u51fa\u529b\u3059\u308b\n\n\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002\ninput\u306f\u3061\u3087\u3063\u3068\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u306d\u3002tasks\u3084reduce\u7cfb, output\u3068\u57fa\u672c\u7684\u306b\u306f\u308f\u304b\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u6c4e\u7528\u306b\u3059\u308b\u305f\u3081\u306b\u6b63\u898f\u8868\u73fe\u3092\u3076\u3061\u8fbc\u3080\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u3057\u305f\u3089\u306a\u3093\u304b\u30ad\u30e2\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u4f7f\u3044\u65b9\ngithub\u306b\u4e0a\u3052\u3066\u3044\u308b\u30b3\u30fc\u30c9\u81ea\u4f53\u306e\u5229\u7528\u65b9\u6cd5\u306f\u3001\npython param_tuning.py main_task --local-scheduler\n\n\u3068\u304b\u3084\u3063\u3066\u304f\u308c\u308c\u3070\u52d5\u304f\u6c17\u304c\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u306e\u6c4e\u7528\u30bf\u30b9\u30af\u306e\u5229\u7528\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u3067\u3059\u304c\u3001\u5225\u9014\u300c\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u8a08\u7b97\u3092\u884c\u3046\u30bf\u30b9\u30af\u300d\u300cmain\u95a2\u6570\u3068\u306a\u308b\u30bf\u30b9\u30af\u300d\u3092\u7528\u610f\u3057\u307e\u3059\u3002\nmain\u30bf\u30b9\u30af\u306b\u8a18\u8ff0\u3059\u308b\u6b63\u898f\u8868\u73fe\u304c\u591a\u5206\u4e00\u756a\u306e\u96e3\u70b9\u3067\u3057\u3066\uff08\u79c1\u304c\u6b63\u898f\u8868\u73fe\u4f7f\u3063\u3066\u306a\u3055\u3059\u304e\uff09\u3001\u305d\u308c\u306b\u3064\u3044\u3066\u8aac\u660e\u3002\n\u4eca\u56de\u306e\u8a08\u7b97\u5b9f\u884c\u30bf\u30b9\u30aftask_param_eval\u306fcost,gamma,error\u3068\u3044\u3046\u4e00\u884c\u306ecsv\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\ns = \"[-+]?\\d*\\.\\d+|\\d+\" ## float or int expression\ntext_format  = \"(?P<cost>\"+s+\"),(?P<gamma>\"+s+\"),(?P<error>\"+s+\")\"\n\n?P<name>\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u51fa\u529bcsv\u306eheader\u3084pivot\u306e\u540d\u524d\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u306e\u3067\u3001\u3061\u3083\u3093\u3068\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u7d42\u308f\u308a\u306b\n\u79c1\u3001\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u5272\u306b\u306f\u7d76\u671b\u7684\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u304c\u4e0b\u624b\u306a\u4eba\u9593\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u3046\u3044\u3046\u5f37\u5236\u529b\u304c\u50cd\u304f\u3068\u300c\u4ed5\u65b9\u306a\u304f\u300d\u5207\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3059\u3054\u304f\u826f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u308b\u6069\u6075\u306e1\u3064\u3067\u3042\u308b\u6c4e\u7528\u7269\u54c1\u306e\u4f5c\u6210\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u2026\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u305d\u3082\u305d\u3082\u3078\u305f\u3063\u3074\u306a\u306e\u306f\u3054\u6307\u5c0e\u3054\u97ad\u64bb\u9802\u6234\u3067\u304d\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\u53c2\u8003\u8cc7\u6599\n\u6570\u5b57\u3092\u6b63\u898f\u8868\u73fe\u3067\u767a\u898b\u3059\u308b\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u4ee5\u4e0b\u306estack overflow\u304b\u3089\u62dd\u501f\u3002\nhttp://stackoverflow.com/questions/4703390/how-to-extract-a-floating-number-from-a-string-in-python\n\u30cb\u30c3\u30c1\u306a\u3053\u3068\u3057\u304b\u66f8\u3044\u3066\u3044\u306a\u3044\u81ea\u5206\u306b\u3057\u3066\u306f\u53cd\u5fdc\u304c\u5927\u304d\u304b\u3063\u305f\u6c17\u304c\u3057\u305f\u306e\u3067\u3082\u3046\u5c11\u3057\u8272\u3005\u3084\u3063\u3066\u307f\u305f\u3002\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n## \u6c4e\u7528\u30bf\u30b9\u30af\u3092\u4f5c\u308d\u3046\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\u524d\u56de\u3068\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u540c\u3058\u3067\u3059\u3002\nhttps://github.com/keisuke-yanagisawa/study/blob/20151205/luigi/param_tuning.py\n\n\u4eca\u56de\u306e\u30c6\u30fc\u30de\u306f\u3001**\u6c4e\u7528\u306e\u30bf\u30b9\u30af\u3092\u4f5c\u308a\u305f\u3044**\u3068\u3044\u3046\u3053\u3068\u3002\n\u3044\u308d\u3093\u306a\u30bf\u30b9\u30af\u3092\u4f5c\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u3084\u3063\u3071\u308a\u6c4e\u7528\u306e\u3082\u306e\u3092\u4f5c\u308b\u3068\u5b09\u3057\u3044\u306e\u306f\u3069\u3053\u3067\u3082\u3044\u3063\u3057\u3087\u3002\u305d\u3053\u3067\u3001\n\n- \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u7d50\u679c\u3092\u96c6\u7d04\u3057\n- \u6700\u826f\u5024\u3092\u51fa\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3060\u3051\u3092\u307e\u3068\u3081\u3066csv\u5f62\u5f0f\u3067\u51fa\u529b\u3059\u308b\n\n\u3068\u3044\u3046\u3053\u3068\u3092\u6c4e\u7528\u7684\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u30bf\u30b9\u30af\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```py\nclass param_tuning(luigi.Task):\n    tasks        = luigi.Parameter()              # luigi.Task\u306e1\u6b21\u5143\u914d\u5217\n    text_format  = luigi.Parameter()              # python\u306e\u300c\u5909\u6570\u540d\u8a18\u8ff0\u4ed8\u304d\u306e\u300d\u6b63\u898f\u8868\u73fe\u3092\u6e21\u3059\n    reduce_pivot = luigi.Parameter()              # \u3069\u306e\u5909\u6570\u3092\u96c6\u7d04\u3067\u5229\u7528\u3059\u308b\u304b\n    reduce_rule  = luigi.Parameter(default=\"min\") # \u96c6\u7d04\u3059\u308b\u95a2\u6570\u3092\u6307\u5b9a, min or max\n    out_file     = luigi.Parameter()              # \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\n\n    def requires(self):\n        return self.tasks;\n    def output(self):\n        return luigi.LocalTarget(self.out_file)\n\n    def run(self):\n\n        # making pandas dataframe\n        results = []\n        for task in self.requires():\n            with task.output().open() as taskfile:\n                string = taskfile.read()\n                groupdict = re.search(self.text_format, string).groupdict()\n                results.append(groupdict)\n        df = pd.DataFrame.from_dict(results);\n        df[self.reduce_pivot] = convert2num(df[self.reduce_pivot])\n        values = df[self.reduce_pivot]\n\n        # Aggregation of parameter tuning results\n        if self.reduce_rule == \"min\":\n            best_val = min(values)\n        elif self.reduce_rule == \"max\":\n            best_val = max(values)\n        else:\n            print(\"reduce_rule must be min or max. your input is %s\" % self.reduce_rule)\n            exit(1);\n\n        # Rearrangement of column order\n        column_order = filter(lambda key: key != self.reduce_pivot, df.columns) + [self.reduce_pivot]\n        df = df[column_order]\n\n        # Outputting results as csv formatted data\n        df[df[self.reduce_pivot] == best_val].to_csv(self.output().fn, index=False);\n```\n\n\u96c6\u7d04\u95a2\u4fc2\u306f\u8272\u3005\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u9762\u5012\u306b\u306a\u308a\u3001pandas\u306b\u4efb\u305b\u307e\u3057\u305f\u3002\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3001\n\n1. \u4e00\u3064\u4e00\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u8a08\u7b97\u3092``requires()``\u3067\u5b9f\u884c\u3057\n1. \u7d50\u679c\u3092\u3059\u3079\u3066pandas dataframe\u306b\u96c6\u8a08\n1. \u6700\u3082\u826f\u3044\u5024\u3092\u96c6\u7d04\u90e8\u5206\u3067\u6c42\u3081\n1. (csv\u306e\u6700\u5f8c\u306b\u96c6\u7d04\u3067\u7528\u3044\u305f\u5024\u304c\u304f\u308b\u3088\u3046\u306b\u7de8\u96c6\u3057\u3066)\n1. \u6700\u3082\u826f\u3044\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u3060\u3051\u3092(\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u8907\u6570\u500b)\u51fa\u529b\u3059\u308b\n\n\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\ninput\u306f\u3061\u3087\u3063\u3068\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u306d\u3002tasks\u3084reduce\u7cfb, output\u3068\u57fa\u672c\u7684\u306b\u306f\u308f\u304b\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u6c4e\u7528\u306b\u3059\u308b\u305f\u3081\u306b\u6b63\u898f\u8868\u73fe\u3092\u3076\u3061\u8fbc\u3080\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u3057\u305f\u3089\u306a\u3093\u304b\u30ad\u30e2\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n## \u4f7f\u3044\u65b9\ngithub\u306b\u4e0a\u3052\u3066\u3044\u308b\u30b3\u30fc\u30c9\u81ea\u4f53\u306e\u5229\u7528\u65b9\u6cd5\u306f\u3001\n\n```py\npython param_tuning.py main_task --local-scheduler\n```\n\n\u3068\u304b\u3084\u3063\u3066\u304f\u308c\u308c\u3070\u52d5\u304f\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u3053\u306e\u6c4e\u7528\u30bf\u30b9\u30af\u306e\u5229\u7528\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u3067\u3059\u304c\u3001\u5225\u9014\u300c\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u8a08\u7b97\u3092\u884c\u3046\u30bf\u30b9\u30af\u300d\u300cmain\u95a2\u6570\u3068\u306a\u308b\u30bf\u30b9\u30af\u300d\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\nmain\u30bf\u30b9\u30af\u306b\u8a18\u8ff0\u3059\u308b\u6b63\u898f\u8868\u73fe\u304c\u591a\u5206\u4e00\u756a\u306e\u96e3\u70b9\u3067\u3057\u3066\uff08\u79c1\u304c\u6b63\u898f\u8868\u73fe\u4f7f\u3063\u3066\u306a\u3055\u3059\u304e\uff09\u3001\u305d\u308c\u306b\u3064\u3044\u3066\u8aac\u660e\u3002\n\u4eca\u56de\u306e\u8a08\u7b97\u5b9f\u884c\u30bf\u30b9\u30af``task_param_eval``\u306f``cost,gamma,error``\u3068\u3044\u3046\u4e00\u884c\u306ecsv\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```py\ns = \"[-+]?\\d*\\.\\d+|\\d+\" ## float or int expression\ntext_format  = \"(?P<cost>\"+s+\"),(?P<gamma>\"+s+\"),(?P<error>\"+s+\")\"\n```\n\n``?P<name>``\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u51fa\u529bcsv\u306eheader\u3084pivot\u306e\u540d\u524d\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u306e\u3067\u3001\u3061\u3083\u3093\u3068\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u7d42\u308f\u308a\u306b\n\u79c1\u3001\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u5272\u306b\u306f\u7d76\u671b\u7684\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u304c\u4e0b\u624b\u306a\u4eba\u9593\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u3046\u3044\u3046\u5f37\u5236\u529b\u304c\u50cd\u304f\u3068\u300c\u4ed5\u65b9\u306a\u304f\u300d\u5207\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3059\u3054\u304f\u826f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u308b\u6069\u6075\u306e1\u3064\u3067\u3042\u308b\u6c4e\u7528\u7269\u54c1\u306e\u4f5c\u6210\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u2026\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u305d\u3082\u305d\u3082\u3078\u305f\u3063\u3074\u306a\u306e\u306f\u3054\u6307\u5c0e\u3054\u97ad\u64bb\u9802\u6234\u3067\u304d\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n#### \u53c2\u8003\u8cc7\u6599\n\u6570\u5b57\u3092\u6b63\u898f\u8868\u73fe\u3067\u767a\u898b\u3059\u308b\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u4ee5\u4e0b\u306estack overflow\u304b\u3089\u62dd\u501f\u3002\nhttp://stackoverflow.com/questions/4703390/how-to-extract-a-floating-number-from-a-string-in-python\n", "tags": ["Luigi", "Python", "MachineLearning", "\u6a5f\u68b0\u5b66\u7fd2"]}