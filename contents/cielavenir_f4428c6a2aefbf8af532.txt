{"context": " More than 1 year has passed since last update.\n\n\n\u8a00\u8a9e\nCodeIQ \uff12\u5468\u5e74\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n\n\n\nBrainf**k\n\nhttp://ideone.com/xwXeFphttps://github.com/cielavenir/codeiq_solutions/blob/master/q835/death2_bf.c\n\n\n\nIntercal\n\nhttp://ideone.com/JbAqfFhttp://qiita.com/cielavenir/items/0c9720f7df6d796a547a\n\n\n\nLazy K\n\nhttp://melpon.org/wandbox/permlink/kZSCbtHgnGnHxHeEhttp://qiita.com/cielavenir/items/f4428c6a2aefbf8af532\n\n\n\nUnlambda\n\nhttp://ideone.com/vQ1EQEhttps://github.com/cielavenir/codeiq_solutions/blob/master/codeiq2nd_unlambda.rb\n\n\n\nWhiteSpace\n\nhttp://ideone.com/VrQVsvhttp://qiita.com/cielavenir/items/ebca62f3e689c049ac24\n\n\n\n\n\u307e\u305a\u3001\u4ee5\u4e0b\u306eRuby\u30d7\u30ed\u30b0\u30e9\u30e0\u3067Scheme\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\ncodeiq2nd_lazy.rb\n#!/usr/bin/ruby\n#coding:utf-8\ndef compile_codepoints(a)\n    defined={0=>1,1=>1,2=>1,4=>1,256=>1}\n    a.each{|e|\n        n=e\n        while n>0\n            if n%2>0\n                if !defined[n]\n                    puts \"(lazy-def #{n} '(1+ #{n-1}))\"\n                    defined[n]=1\n                end\n                n-=1\n            end\n            if !defined[n]\n                puts \"(lazy-def #{n} '(* 2 #{n/2}))\"\n                defined[n]=1\n            end\n            n/=2\n        end\n    }\nend\n\nSTR=\"CodeIQ \uff12\u5468\u5e74\uff01\\n\"\n\nputs <<EOM\n(load \"../lazier.scm\")\n(load \"../prelude.scm\")\nEOM\n\ncompile_codepoints(STR.bytes.to_a)\n\nputs <<EOM\n(lazy-def '(ans in)\nEOM\n\nprint \"'\"\nSTR.bytes.each{|e|print \"(cons #{e} \"}\nprint 'end-of-output'\nSTR.bytes.each{|e|print \")\"}\nputs\n\nputs <<EOM\n)\n\n(print-as-unlambda (laze 'ans))\nEOM\n\n\n\u751f\u6210\u3055\u308c\u305fScheme\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3092\nhttps://github.com/msullivan/LazyK \u306eeg\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u3067\u3001gosh\u306a\u3069\u3067LazyK\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u3053\u306e\u969b\u3001lazier.scm\u306eprint-as-unlambda\u3092\"i\"\u304b\u3089\"``skk\"\u306b\u5909\u66f4\u3057\u3066\u304a\u304f\u3068\u5409\u3067\u3059\u3002\n\ncodeiq2nd_lazy.scm\n(load \"../lazier.scm\")\n(load \"../prelude.scm\")\n(lazy-def 67 '(1+ 66))\n(lazy-def 66 '(* 2 33))\n(lazy-def 33 '(1+ 32))\n(lazy-def 32 '(* 2 16))\n(lazy-def 16 '(* 2 8))\n(lazy-def 8 '(* 2 4))\n(lazy-def 111 '(1+ 110))\n(lazy-def 110 '(* 2 55))\n(lazy-def 55 '(1+ 54))\n(lazy-def 54 '(* 2 27))\n(lazy-def 27 '(1+ 26))\n(lazy-def 26 '(* 2 13))\n(lazy-def 13 '(1+ 12))\n(lazy-def 12 '(* 2 6))\n(lazy-def 6 '(* 2 3))\n(lazy-def 3 '(1+ 2))\n(lazy-def 100 '(* 2 50))\n(lazy-def 50 '(* 2 25))\n(lazy-def 25 '(1+ 24))\n(lazy-def 24 '(* 2 12))\n(lazy-def 101 '(1+ 100))\n(lazy-def 73 '(1+ 72))\n(lazy-def 72 '(* 2 36))\n(lazy-def 36 '(* 2 18))\n(lazy-def 18 '(* 2 9))\n(lazy-def 9 '(1+ 8))\n(lazy-def 81 '(1+ 80))\n(lazy-def 80 '(* 2 40))\n(lazy-def 40 '(* 2 20))\n(lazy-def 20 '(* 2 10))\n(lazy-def 10 '(* 2 5))\n(lazy-def 5 '(1+ 4))\n(lazy-def 239 '(1+ 238))\n(lazy-def 238 '(* 2 119))\n(lazy-def 119 '(1+ 118))\n(lazy-def 118 '(* 2 59))\n(lazy-def 59 '(1+ 58))\n(lazy-def 58 '(* 2 29))\n(lazy-def 29 '(1+ 28))\n(lazy-def 28 '(* 2 14))\n(lazy-def 14 '(* 2 7))\n(lazy-def 7 '(1+ 6))\n(lazy-def 188 '(* 2 94))\n(lazy-def 94 '(* 2 47))\n(lazy-def 47 '(1+ 46))\n(lazy-def 46 '(* 2 23))\n(lazy-def 23 '(1+ 22))\n(lazy-def 22 '(* 2 11))\n(lazy-def 11 '(1+ 10))\n(lazy-def 146 '(* 2 73))\n(lazy-def 229 '(1+ 228))\n(lazy-def 228 '(* 2 114))\n(lazy-def 114 '(* 2 57))\n(lazy-def 57 '(1+ 56))\n(lazy-def 56 '(* 2 28))\n(lazy-def 145 '(1+ 144))\n(lazy-def 144 '(* 2 72))\n(lazy-def 168 '(* 2 84))\n(lazy-def 84 '(* 2 42))\n(lazy-def 42 '(* 2 21))\n(lazy-def 21 '(1+ 20))\n(lazy-def 185 '(1+ 184))\n(lazy-def 184 '(* 2 92))\n(lazy-def 92 '(* 2 46))\n(lazy-def 180 '(* 2 90))\n(lazy-def 90 '(* 2 45))\n(lazy-def 45 '(1+ 44))\n(lazy-def 44 '(* 2 22))\n(lazy-def 129 '(1+ 128))\n(lazy-def 128 '(* 2 64))\n(lazy-def 64 '(* 2 32))\n(lazy-def '(ans in)\n'(cons 67 (cons 111 (cons 100 (cons 101 (cons 73 (cons 81 (cons 32 (cons 239 (cons 188 (cons 146 (cons 229 (cons 145 (cons 168 (cons 229 (cons 185 (cons 180 (cons 239 (cons 188 (cons 129 (cons 10 end-of-output))))))))))))))))))))\n)\n\n(print-as-unlambda (laze 'ans))\n\n\n\u751f\u6210\u3055\u308c\u305fLazyK\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001Haskell\u306eputChar()\u306e\u4ed5\u69d8\u306b\u3088\u308a\u3001\u65e5\u672c\u8a9e\u90e8\u5206\u304c\u3046\u307e\u304f\u51fa\u529b\u3067\u304d\u306a\u3044\u306e\u3067\u3001C++\u7248\u3092\u4f7f\u3063\u3066\u4e0b\u3055\u3044(59\u884c\u76ee\u3092unsigned\u304b\u3089size_t\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308a\u307e\u3059)\u3002\n\ncodeiq2nd_lazy.lazy\n`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k`k```s``skk``skk```s``skk``skk``s``s`ksk``skk\n\n\n\u6700\u5f8c\u306b\u3001\u6539\u3081\u3066CodeIQ2\u5468\u5e74\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n|\u8a00\u8a9e|CodeIQ \uff12\u5468\u5e74\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002|\n|:--|:--|\n|Brainf\\*\\*k|http://ideone.com/xwXeFp<br>https://github.com/cielavenir/codeiq_solutions/blob/master/q835/death2_bf.c|\n|Intercal|http://ideone.com/JbAqfF<br>http://qiita.com/cielavenir/items/0c9720f7df6d796a547a|\n|Lazy K|http://melpon.org/wandbox/permlink/kZSCbtHgnGnHxHeE<br>http://qiita.com/cielavenir/items/f4428c6a2aefbf8af532|\n|Unlambda|http://ideone.com/vQ1EQE<br>https://github.com/cielavenir/codeiq_solutions/blob/master/codeiq2nd_unlambda.rb|\n|WhiteSpace|http://ideone.com/VrQVsv<br>http://qiita.com/cielavenir/items/ebca62f3e689c049ac24|\n\n\u307e\u305a\u3001\u4ee5\u4e0b\u306eRuby\u30d7\u30ed\u30b0\u30e9\u30e0\u3067Scheme\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```rb:codeiq2nd_lazy.rb\n#!/usr/bin/ruby\n#coding:utf-8\ndef compile_codepoints(a)\n\tdefined={0=>1,1=>1,2=>1,4=>1,256=>1}\n\ta.each{|e|\n\t\tn=e\n\t\twhile n>0\n\t\t\tif n%2>0\n\t\t\t\tif !defined[n]\n\t\t\t\t\tputs \"(lazy-def #{n} '(1+ #{n-1}))\"\n\t\t\t\t\tdefined[n]=1\n\t\t\t\tend\n\t\t\t\tn-=1\n\t\t\tend\n\t\t\tif !defined[n]\n\t\t\t\tputs \"(lazy-def #{n} '(* 2 #{n/2}))\"\n\t\t\t\tdefined[n]=1\n\t\t\tend\n\t\t\tn/=2\n\t\tend\n\t}\nend\n\nSTR=\"CodeIQ \uff12\u5468\u5e74\uff01\\n\"\n\nputs <<EOM\n(load \"../lazier.scm\")\n(load \"../prelude.scm\")\nEOM\n\ncompile_codepoints(STR.bytes.to_a)\n\nputs <<EOM\n(lazy-def '(ans in)\nEOM\n\nprint \"'\"\nSTR.bytes.each{|e|print \"(cons #{e} \"}\nprint 'end-of-output'\nSTR.bytes.each{|e|print \")\"}\nputs\n\nputs <<EOM\n)\n\n(print-as-unlambda (laze 'ans))\nEOM\n```\n\n\u751f\u6210\u3055\u308c\u305fScheme\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3092\nhttps://github.com/msullivan/LazyK \u306eeg\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u3067\u3001`gosh`\u306a\u3069\u3067LazyK\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n**\u3053\u306e\u969b\u3001lazier.scm\u306eprint-as-unlambda\u3092\"i\"\u304b\u3089\"``skk\"\u306b\u5909\u66f4\u3057\u3066\u304a\u304f\u3068\u5409\u3067\u3059\u3002**\n\n```scm:codeiq2nd_lazy.scm\n(load \"../lazier.scm\")\n(load \"../prelude.scm\")\n(lazy-def 67 '(1+ 66))\n(lazy-def 66 '(* 2 33))\n(lazy-def 33 '(1+ 32))\n(lazy-def 32 '(* 2 16))\n(lazy-def 16 '(* 2 8))\n(lazy-def 8 '(* 2 4))\n(lazy-def 111 '(1+ 110))\n(lazy-def 110 '(* 2 55))\n(lazy-def 55 '(1+ 54))\n(lazy-def 54 '(* 2 27))\n(lazy-def 27 '(1+ 26))\n(lazy-def 26 '(* 2 13))\n(lazy-def 13 '(1+ 12))\n(lazy-def 12 '(* 2 6))\n(lazy-def 6 '(* 2 3))\n(lazy-def 3 '(1+ 2))\n(lazy-def 100 '(* 2 50))\n(lazy-def 50 '(* 2 25))\n(lazy-def 25 '(1+ 24))\n(lazy-def 24 '(* 2 12))\n(lazy-def 101 '(1+ 100))\n(lazy-def 73 '(1+ 72))\n(lazy-def 72 '(* 2 36))\n(lazy-def 36 '(* 2 18))\n(lazy-def 18 '(* 2 9))\n(lazy-def 9 '(1+ 8))\n(lazy-def 81 '(1+ 80))\n(lazy-def 80 '(* 2 40))\n(lazy-def 40 '(* 2 20))\n(lazy-def 20 '(* 2 10))\n(lazy-def 10 '(* 2 5))\n(lazy-def 5 '(1+ 4))\n(lazy-def 239 '(1+ 238))\n(lazy-def 238 '(* 2 119))\n(lazy-def 119 '(1+ 118))\n(lazy-def 118 '(* 2 59))\n(lazy-def 59 '(1+ 58))\n(lazy-def 58 '(* 2 29))\n(lazy-def 29 '(1+ 28))\n(lazy-def 28 '(* 2 14))\n(lazy-def 14 '(* 2 7))\n(lazy-def 7 '(1+ 6))\n(lazy-def 188 '(* 2 94))\n(lazy-def 94 '(* 2 47))\n(lazy-def 47 '(1+ 46))\n(lazy-def 46 '(* 2 23))\n(lazy-def 23 '(1+ 22))\n(lazy-def 22 '(* 2 11))\n(lazy-def 11 '(1+ 10))\n(lazy-def 146 '(* 2 73))\n(lazy-def 229 '(1+ 228))\n(lazy-def 228 '(* 2 114))\n(lazy-def 114 '(* 2 57))\n(lazy-def 57 '(1+ 56))\n(lazy-def 56 '(* 2 28))\n(lazy-def 145 '(1+ 144))\n(lazy-def 144 '(* 2 72))\n(lazy-def 168 '(* 2 84))\n(lazy-def 84 '(* 2 42))\n(lazy-def 42 '(* 2 21))\n(lazy-def 21 '(1+ 20))\n(lazy-def 185 '(1+ 184))\n(lazy-def 184 '(* 2 92))\n(lazy-def 92 '(* 2 46))\n(lazy-def 180 '(* 2 90))\n(lazy-def 90 '(* 2 45))\n(lazy-def 45 '(1+ 44))\n(lazy-def 44 '(* 2 22))\n(lazy-def 129 '(1+ 128))\n(lazy-def 128 '(* 2 64))\n(lazy-def 64 '(* 2 32))\n(lazy-def '(ans in)\n'(cons 67 (cons 111 (cons 100 (cons 101 (cons 73 (cons 81 (cons 32 (cons 239 (cons 188 (cons 146 (cons 229 (cons 145 (cons 168 (cons 229 (cons 185 (cons 180 (cons 239 (cons 188 (cons 129 (cons 10 end-of-output))))))))))))))))))))\n)\n\n(print-as-unlambda (laze 'ans))\n```\n\n\u751f\u6210\u3055\u308c\u305fLazyK\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n**\u306a\u304a\u3001Haskell\u306eputChar()\u306e\u4ed5\u69d8\u306b\u3088\u308a\u3001\u65e5\u672c\u8a9e\u90e8\u5206\u304c\u3046\u307e\u304f\u51fa\u529b\u3067\u304d\u306a\u3044\u306e\u3067\u3001C++\u7248\u3092\u4f7f\u3063\u3066\u4e0b\u3055\u3044(59\u884c\u76ee\u3092unsigned\u304b\u3089size_t\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308a\u307e\u3059)\u3002**\n\n```lazy:codeiq2nd_lazy.lazy\n`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s``s`ksk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk``s`k``s``s`ksk``skk```s``skk``skk``s``s`ksk``skk`k``s``s``skk`k``s`k``s``s`ksk``skk``s``s`ksk```s``skk``skk``s``s`ksk``skk`k`k```s``skk``skk```s``skk``skk``s``s`ksk``skk\n```\n\n\u6700\u5f8c\u306b\u3001\u6539\u3081\u3066CodeIQ2\u5468\u5e74\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n", "tags": ["Lazy_K", "Ruby", "Scheme"]}