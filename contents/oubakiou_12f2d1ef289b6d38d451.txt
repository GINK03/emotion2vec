{"context": " More than 1 year has passed since last update.\u4e8b\u306f\u3001\u767a\u30ea\u30f3\u30af\u304cSymfony2\u306e\u5916\u5074\u306b\u3042\u308b\u3068\u3067\u304d\u306a\u3044\u3089\u3057\u3044\u3002\nSymfony 2 Functional Testing external URL\nWebTestCase\u306f\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb\u30c6\u30b9\u30c8\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001\u5b9f\u969b\u306b\u306fHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044(\u4e0e\u3048\u3089\u308c\u305f\u30d1\u30b9\u60c5\u5831\u3092\u5143\u306bSymfony2\u5185\u90e8\u3067\u30c6\u30b9\u30c8\u5bfe\u8c61\u3068\u306a\u308bHTML\u3092\u751f\u6210\u3059\u308b)\u305f\u3081\n$client->request('GET', 'http://example.com/');\n\n\u3068\u304b\u3084\u3063\u3066\u3082\u3060\u3081\u306a\u306e\u3067\u3001\u81ea\u5206\u3067HTML\u3092\u53d6\u3063\u3066\u304d\u3066\u76f4\u63a5DomCrawler\u306b\u98df\u308f\u305b\u308b\u3068\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\n// http://example.com/\u5185\u306eid=fuga\u306e\u30ea\u30f3\u30af\u5148\u304chttp://example.com/hoge/\u3067\u3042\u308b\u78ba\u8a8d\n$this->assertFromToUrl('http://example.com/', 'http://example.com/hoge/', 'id(\"fuga\")');\n\nprivate function assertFromToUrl($fromUrl, $expectedToUrl, $targetLinkXpath)\n{\n    if (!$html = file_get_contents($fromUrl)) {\n        $this->fail('\u30ea\u30f3\u30af\u5143\u30da\u30fc\u30b8(' . $fromUrl . ')\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f');\n    }\n    $crawler = new Crawler($html);\n    $actualToUrl = $crawler->filterXPath($targetLinkXpath)->attr('href');\n\n    $this->assertEquals(\n        $expectedToUrl,\n        $actualToUrl,\n        '(' . $fromUrl . ')\u5185\u306e\"' . $targetLinkXpath . '\"\u306e\u30ea\u30f3\u30af\u5148\u306f(' . $expectedToUrl . ')\u306b\u306a\u3063\u3066\u3044\u308b\u3079\u304d\u3067\u3059\u304c(' . $actualToUrl . ')\u306b\u306a\u3063\u3066\u3044\u307e\u3059'\n    );\n\n    if (!file_get_contents($actualToUrl)) {\n        $this->fail('\u30ea\u30f3\u30af\u5148\u30da\u30fc\u30b8(' . $actualToUrl . ')\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f');\n    }\n}\n\n\n\u7684\u306a\u3002\u306a\u304a\u3001\u3061\u3083\u3093\u3068\u3057\u305f\u30d6\u30e9\u30a6\u30b6\u30c6\u30b9\u30c8\u3092\u3084\u308b\u306a\u3089\u6700\u521d\u304b\u3089Selenium\u3068\u304b\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\u4e8b\u306f\u3001\u767a\u30ea\u30f3\u30af\u304cSymfony2\u306e\u5916\u5074\u306b\u3042\u308b\u3068\u3067\u304d\u306a\u3044\u3089\u3057\u3044\u3002\n\n[Symfony 2 Functional Testing external URL](http://stackoverflow.com/questions/17657544/symfony-2-functional-testing-external-url)\n\nWebTestCase\u306f[\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb\u30c6\u30b9\u30c8](http://docs.symfony.gr.jp/symfony2/book/testing.html#index-2)\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001\u5b9f\u969b\u306b\u306fHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044(\u4e0e\u3048\u3089\u308c\u305f\u30d1\u30b9\u60c5\u5831\u3092\u5143\u306bSymfony2\u5185\u90e8\u3067\u30c6\u30b9\u30c8\u5bfe\u8c61\u3068\u306a\u308bHTML\u3092\u751f\u6210\u3059\u308b)\u305f\u3081\n\n```php\n$client->request('GET', 'http://example.com/');\n```\n\n\u3068\u304b\u3084\u3063\u3066\u3082\u3060\u3081\u306a\u306e\u3067\u3001\u81ea\u5206\u3067HTML\u3092\u53d6\u3063\u3066\u304d\u3066\u76f4\u63a5[DomCrawler](http://docs.symfony.gr.jp/symfony2/components/dom_crawler.html)\u306b\u98df\u308f\u305b\u308b\u3068\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\n```php\n\n// http://example.com/\u5185\u306eid=fuga\u306e\u30ea\u30f3\u30af\u5148\u304chttp://example.com/hoge/\u3067\u3042\u308b\u78ba\u8a8d\n$this->assertFromToUrl('http://example.com/', 'http://example.com/hoge/', 'id(\"fuga\")');\n\nprivate function assertFromToUrl($fromUrl, $expectedToUrl, $targetLinkXpath)\n{\n    if (!$html = file_get_contents($fromUrl)) {\n        $this->fail('\u30ea\u30f3\u30af\u5143\u30da\u30fc\u30b8(' . $fromUrl . ')\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f');\n    }\n    $crawler = new Crawler($html);\n    $actualToUrl = $crawler->filterXPath($targetLinkXpath)->attr('href');\n\n    $this->assertEquals(\n        $expectedToUrl,\n        $actualToUrl,\n        '(' . $fromUrl . ')\u5185\u306e\"' . $targetLinkXpath . '\"\u306e\u30ea\u30f3\u30af\u5148\u306f(' . $expectedToUrl . ')\u306b\u306a\u3063\u3066\u3044\u308b\u3079\u304d\u3067\u3059\u304c(' . $actualToUrl . ')\u306b\u306a\u3063\u3066\u3044\u307e\u3059'\n    );\n\n    if (!file_get_contents($actualToUrl)) {\n        $this->fail('\u30ea\u30f3\u30af\u5148\u30da\u30fc\u30b8(' . $actualToUrl . ')\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f');\n    }\n}\n\n```\n\n\u7684\u306a\u3002\u306a\u304a\u3001\u3061\u3083\u3093\u3068\u3057\u305f\u30d6\u30e9\u30a6\u30b6\u30c6\u30b9\u30c8\u3092\u3084\u308b\u306a\u3089\u6700\u521d\u304b\u3089Selenium\u3068\u304b\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n", "tags": ["Symfony2", "testing"]}