{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\nDjango \u3067\u958b\u767a\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u30d0\u30c3\u30c1\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u884c\u3046\u3002\n\nCelery \u3092\u5229\u7528\u3057\u3066\u958b\u767a\u3059\u308b\u3002\n\u203b\u8a73\u7d30\u306f\u5b66\u7fd2\u3057\u5207\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3053\u308c\u304b\u3089\u52c9\u5f37\u3002\u52d5\u304b\u3059\u3068\u3053\u308d\u307e\u3067\u30e1\u30e2\u3002\n\n\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\nDjango \u3067\u958b\u767a\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u88cf\u3067\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3092\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3059\u308b\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u4e00\u30b5\u30fc\u30d0\u4e0a\u3067\u51e6\u7406\u3092\u8d77\u52d5\u3059\u308b\n\n\n\u74b0\u5883\n\nMac OS X Yosemite 10.10.4\nPython3.4\nDjango1.8\nCelery3.1\ndjango-celery3.1\n\n\n\u53c2\u8003\u60c5\u5831\n\nCelery\n\n\nhttp://celery.readthedocs.org/en/latest/index.html\n\n\nPeriodic Tasks\n\n\nhttp://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html\n\n\n\n\n\u6e96\u5099\n\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092 pip install\n\npip install celery\npip install django-celery\n\n\n\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n\n\u69cb\u6210\n\n\nsebastian(Project)\nappmanager(Application)\n\n\n\nsebastian\n  \u2514-appmanager\n      \u2514-tasks.py\n      \u2514-\n\n  \u2514-sebastian\n      \u2514-celery.py\n      \u2514-settings.py\n\n\n\n\u30b3\u30fc\u30c9\n\n\nsebastian/settings.py\n\n# 30\u79d2\u6bce\u306b\u51e6\u7406\u8d77\u52d5(Cron\u306e\u3088\u3046\u306b\u65e5\u6642\u6307\u5b9a\u306e\u8a2d\u5b9a\u3082\u53ef\u80fd\uff09\nfrom datetime import timedelta\nCELERYBEAT_SCHEDULE = {\n    'add-every-30-seconds': {\n        'task': 'appmanager.tasks.test_celery',\n        'schedule': timedelta(seconds=30),\n        'args': (16, 16)\n    },\n}\n\nCELERY_TIMEZONE = 'UTC'\n\nBROKER_URL = 'django://'\n\n\n\n\nsebastian/celery.py\nfrom __future__ import absolute_import\n\nimport os\n\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sebastian.settings')\n\nfrom django.conf import settings\n\napp = Celery('sebastian')\n\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\napp.conf.update(\n    CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend',\n)\n\napp.conf.update(\n    CELERY_RESULT_BACKEND='djcelery.backends.cache:CacheBackend',\n)\n\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))\n\n\n\nappmanager/tasks.py\nfrom __future__ import absolute_import\n\nimport logging\nfrom celery import task\nfrom celery.utils.log import get_task_logger\nfrom appmanager import models\n\n@task\ndef test_celery(x, y):\n    logger = get_task_logger(__name__)\n    # orm \u3067\u53d6\u5f97\u3057\u305f\u7d50\u679c\u3092\u30ed\u30b0\u51fa\u529b\u3057\u7d9a\u3051\u308b(Django \u306e\u30ed\u30b0\u3067\u306a\u304f\u3001Celery\u306e\u30ed\u30b0\uff09\n    application_inf = models.ApplicationInf.objects.get(pk=8)\n    logger.info('func start  ----------------->')\n    logger.info('application:%s', application_inf.name)\n    logger.info('func end -------------------->')\n    return x + y\n\n\n\n\n\u5b9f\u884c\n\ncelery -A sebastian worker -B -l info\n\n\n\u5b9f\u884c\u7d50\u679c\n\nfunc start  ----------------->\napplication:TEST_APP\nfunc end -------------------->\n\n\n##\u6982\u8981\n\n* Django \u3067\u958b\u767a\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u30d0\u30c3\u30c1\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u884c\u3046\u3002\n* Celery \u3092\u5229\u7528\u3057\u3066\u958b\u767a\u3059\u308b\u3002\n\n\t\u203b\u8a73\u7d30\u306f\u5b66\u7fd2\u3057\u5207\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3053\u308c\u304b\u3089\u52c9\u5f37\u3002\u52d5\u304b\u3059\u3068\u3053\u308d\u307e\u3067\u30e1\u30e2\u3002\n\n##\u3084\u308a\u305f\u3044\u3053\u3068\n* Django \u3067\u958b\u767a\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u88cf\u3067\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3092\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3059\u308b\n* \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u4e00\u30b5\u30fc\u30d0\u4e0a\u3067\u51e6\u7406\u3092\u8d77\u52d5\u3059\u308b\n\n## \u74b0\u5883\n* Mac OS X Yosemite 10.10.4\n* Python3.4\n* Django1.8\n* Celery3.1\n* django-celery3.1\n\n\n## \u53c2\u8003\u60c5\u5831\n\n* Celery\n\t* http://celery.readthedocs.org/en/latest/index.html\n* Periodic Tasks\n\t* http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html\n\n\n##\u6e96\u5099\n\n* \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092 pip install\n\n```\npip install celery\npip install django-celery\n```\n\n##\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n\n* \u69cb\u6210\n\t* sebastian(Project)\n\t* appmanager(Application)\n\n```\nsebastian\n  \u2514-appmanager\n      \u2514-tasks.py\n      \u2514-\n     \n  \u2514-sebastian\n      \u2514-celery.py\n      \u2514-settings.py\n      \n```\n\n* \u30b3\u30fc\u30c9\n\n```python:sebastian/settings.py\n\n# 30\u79d2\u6bce\u306b\u51e6\u7406\u8d77\u52d5(Cron\u306e\u3088\u3046\u306b\u65e5\u6642\u6307\u5b9a\u306e\u8a2d\u5b9a\u3082\u53ef\u80fd\uff09\nfrom datetime import timedelta\nCELERYBEAT_SCHEDULE = {\n    'add-every-30-seconds': {\n        'task': 'appmanager.tasks.test_celery',\n        'schedule': timedelta(seconds=30),\n        'args': (16, 16)\n    },\n}\n\nCELERY_TIMEZONE = 'UTC'\n\nBROKER_URL = 'django://'\n\n```\n\n```python:sebastian/celery.py\nfrom __future__ import absolute_import\n\nimport os\n\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sebastian.settings')\n\nfrom django.conf import settings\n\napp = Celery('sebastian')\n\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\napp.conf.update(\n    CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend',\n)\n\napp.conf.update(\n    CELERY_RESULT_BACKEND='djcelery.backends.cache:CacheBackend',\n)\n\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))\n```\n\n```python:appmanager/tasks.py\nfrom __future__ import absolute_import\n\nimport logging\nfrom celery import task\nfrom celery.utils.log import get_task_logger\nfrom appmanager import models\n\n@task\ndef test_celery(x, y):\n    logger = get_task_logger(__name__)\n    # orm \u3067\u53d6\u5f97\u3057\u305f\u7d50\u679c\u3092\u30ed\u30b0\u51fa\u529b\u3057\u7d9a\u3051\u308b(Django \u306e\u30ed\u30b0\u3067\u306a\u304f\u3001Celery\u306e\u30ed\u30b0\uff09\n    application_inf = models.ApplicationInf.objects.get(pk=8)\n    logger.info('func start  ----------------->')\n    logger.info('application:%s', application_inf.name)\n    logger.info('func end -------------------->')\n    return x + y\n    \n```\n\n* \u5b9f\u884c\n\n```\ncelery -A sebastian worker -B -l info\n```\n\n* \u5b9f\u884c\u7d50\u679c\n\n```\nfunc start  ----------------->\napplication:TEST_APP\nfunc end -------------------->\n```\n\n\n", "tags": ["Celery", "batch", "scheduler", "Django"]}