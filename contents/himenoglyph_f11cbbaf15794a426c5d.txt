{"context": "Watson\u306ePython SDK\u3092\u4f7f\u3063\u3066API\u3092\u53e9\u3044\u3066\u307f\u305f 13\u9023\u767a (\u7d76\u8cdb\u9014\u4e2d)\nTeratail\u306e\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc 22\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff01\n\u9752\u6c41\u6b32\u3057\u3044\u306e\u3067\u3044\u3044\u306d\u4e0b\u3055\u3044\u3002\n\n\u3053\u308c\u306f\u306a\u306b\nWatson\u306ePython SDK\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4f7f\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3082\u306e\u3002\n#94 \u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u3088\u3046\u306b\u3001Python\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5c11\u306a\u3044\u3057\u3001\u65e5\u672c\u8a9e\u306e\u8a18\u4e8b\u3082\u3042\u3093\u307e\u308a\u306a\u3044\u306e\u3067\u3001\u307e\u3068\u3081\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u306e\u304c\u52d5\u6a5f\u3067\u3059\u3002\n\nwatson-developer-cloud/python-sdk\n\npip\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067SDK\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\npip install --upgrade watson-developer-cloud\n\n\u7528\u610f\u3059\u308b\u3082\u306e\n\nBluemix\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\nPython\n\n\u3053\u306e\u8a18\u4e8b\u4e2d\u306e\u30b3\u30fc\u30c9\u306f Python 3.5.2 \u3067\u691c\u8a3c\u3057\u3066\u3044\u307e\u3059\u3002\n\nIBM\u304c\u7d14\u7c8b\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308bWatson\u306eAPI\n\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u3092\u9664\u304f\u306813\u500b\u3042\u308a\u307e\u3059\u3002\n\nAlchemyAPI\nConversation\nDiscovery\nDocument Conversion\nLanguage Translator\nNatural Language Classifier\nPersonality Insights\nRetrieve and Rank\nSpeech to Text\nText to Speech\nTone Analyzer\nTradeoff Analytics\nVisual Recognition\n\n\n1. AlchemyAPI\nData News \u3068 Language \u306e2\u3064\u304c\u3042\u308b\u3002\u524d\u8005\u306f\u3042\u308b\u671f\u9593\u5185\u3001\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u3067\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n\u5f8c\u8005\u306f\u30c6\u30ad\u30b9\u30c8\u3084URL\u304b\u3089\u8a18\u4e8b\u306e\u57fa\u672c\u60c5\u5831\u3084\u30b3\u30f3\u30bb\u30d7\u30c8\u3001\u611f\u60c5\u5206\u6790\u306a\u3069\u3055\u307e\u3056\u307e\u306a\u5206\u6790\u3092\u3057\u3066\u304f\u308c\u308b\u30bf\u30a4\u30d7\u3002\nLanguage\u306e\u65b9\u306fiOS SDK \u3082\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\nAlchemyData News - API | IBM Watson Developer Cloud\nAlchemyLanguage - API | IBM Watson Developer Cloud\n\n\nAlchemyData News\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nimport json\nfrom watson_developer_cloud import AlchemyDataNewsV1\n\nalchemy_data_news = AlchemyDataNewsV1(api_key='')\n\nresults = alchemy_data_news.get_news_documents(\n    start='1453334400',\n    end='1454022000',\n    return_fields=[\n        'enriched.url.title',\n        'enriched.url.url',\n        'enriched.url.author',\n        'enriched.url.publicationDate'\n    ],\n    query_fields={\n        # \u30af\u30a8\u30ea\u30d5\u30a3\u30fc\u30eb\u30c9\n        'q.enriched.url.enrichedTitle.entities.entity': '|text=IBM, type=company|'\n    }\n)\n\nprint(json.dumps(results, indent=2))\n\n\u5b9f\u884c\u7d50\u679c\n1\u65e5\u306e\u4f7f\u7528\u4e0a\u9650\u3092\u8d85\u3048\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u307e\u3060\u8f09\u305b\u3089\u308c\u306a\u3044\u3002\n\n\u30e1\u30bd\u30c3\u30c9\nAlchemyDataNewsV1 \u306f1\u3064\u3060\u3051\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002\ndef get_news_documents(self, start, end, max_results=10, query_fields=None,\n                       return_fields=None, time_slice=None,\n                       next_page=None, dedup=None, dedup_threshold=None,\n                       rank=None):\n\nstart \u306f\u5fc5\u9808\u3067\u3001\u63a2\u7d22\u306e\u958b\u59cb\u6642\u9593\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002UNIX\u30bf\u30a4\u30e0\u3067\u3082\u53ef\u80fd\u3067\u3042\u308b\u3002\n\u4ed6\u306b\u306f\u3001 \u73fe\u6642\u523b\u3060\u3068 now \u3001\u73fe\u6642\u523b\u304b\u30891\u9031\u9593\u524d\u3060\u3068 now-7d \u3068\u8a00\u3063\u305f\u8a18\u8ff0\u3082\u53ef\u80fd\u3002\nreturn_fields \u306b\u306f\u8fd4\u3063\u3066\u304f\u308b\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nenriched.url.title\nenriched.url.url\nenriched.url.author\nenriched.url.publicationDate\n\nquery_fields \u306b\u306f\u63a2\u7d22\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002\n\nq.enriched.url.enrichedTitle.relations.relation\nq.enriched.url.enrichedTitle.entities.entity\nq.enriched.url.enrichedTitle.taxonomy.taxonomy\nq.enriched.url.enrichedTitle.docSentiment.type\nq.enriched.url.concepts.concept.text\nq.enriched.url.enrichedTitle.keywords.keyword.text\n\nentities\u3068taxonomy\u306f\u30ea\u30b9\u30c8\u304c\u3042\u308b\u306e\u3067\u3001\u30ea\u30d5\u30a1\u30ec\u30a4\u30f3\u30b9\u30da\u30fc\u30b8\u306e\u30ea\u30f3\u30af\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u9069\u5b9c\u53c2\u7167\u3059\u308b\u3068\u3088\u3044\u3002\n\u305d\u306e\u4ed6\n\u4f7f\u3063\u3066\u308b\u3068\u3059\u3050\u306b\u4e0b\u306e\u69d8\u306b\u4e00\u65e5\u306e\u4f7f\u7528\u91cf\u3092\u8d85\u904e\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u3002\nWatsonException: Error: daily-transaction-limit-exceeded\n\n\nAlchemyLanguage\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nimport json\nfrom os.path import join, dirname\nfrom watson_developer_cloud import AlchemyLanguageV1\n\nalchemy_language = AlchemyLanguageV1(api_key='')\n\nurl = ''\n\nprint(json.dumps(\n    alchemy_language.targeted_sentiment(text='I love cats! Dogs are smelly.',\n                                        targets=['cats', 'dogs'],\n                                        language='english'), indent=2))\n\ntargeted_sentiment \u306f targets \u306b\u5165\u529b\u3057\u305f\u30ef\u30fc\u30c9\u306b\u3064\u3044\u3066\u611f\u60c5\u5206\u6790\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u305f\u611f\u3058\u3001html, text, url \u306a\u3069\u304c\u6307\u5b9a\u53ef\u80fd\u3002\ndef targeted_sentiment(self, targets, html=None, text=None, url=None,\n                       language=None, constraint_query=None,\n                       xpath_query=None, show_source_text=False,\n                       source_text_type=None):\n\n\u4ed6\u306b\u3082\u5358\u4f53\u3067\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u3066\u304a\u304f\u3044\u3044\u3002\n\n2. Conversation\nConversation - API | IBM Watson Developer Cloud\nAPI\u3092\u53d6\u5f97\u5f8c\u3001Workspace\u3092\u4e00\u5ea6\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u66f8\u304d\u304b\u3051\u3067\u3059\n\n3. Discovery\n\u6307\u5b9a\u5b50\u305f\u6761\u4ef6\u4e0b\u3067\u6700\u65b0\u306e\u60c5\u5831\u3092\u62fe\u3063\u3066\u304d\u3066\u304f\u308c\u308b\u3084\u3064\u3002\u691c\u7d22\u306e\u624b\u9593\u3092\u7701\u304f\u3068\u3044\u3046\u30a4\u30e1\u30fc\u30b8\u3002\nDEMO\nDiscovery - API | IBM Watson Developer Cloud\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u308b\u9650\u308a\u3001\nsize = 0 \u3068\u3059\u308c\u3070\u3001\u7121\u6599\u67a0\u3067\u53e9\u3051\u308b\u306f\u305a\u306a\u306e\u3060\u3051\u308c\u3069\u3001\u53e9\u3051\u306a\u304b\u3063\u305f\u3002\n\u4e00\u5fdc\u3001size\u306f1,2,3\u306e\u3069\u308c\u304b\u3057\u304b\u53d6\u308c\u306a\u3044\u3002\uff08\u4e00\u5fdc\u66f8\u304d\u63db\u3048\u3066\u3084\u3063\u3066\u3082\u30a2\u30a6\u30c8\u3060\u3063\u305f\uff09\ndef create_environment(self, name=\"\", description=\"\", size=1):\n        \"\"\"\n\n        :param name: name of the environment (max 255 chars) can be empty\n        :param description: description of the environment (max 255 chars)\n        can be empty\n        :param size: size of the environment (1,2, or 3)\n        :return:\n        \"\"\"\n        self._valid_name_and_description(name=name, description=description)\n        if size not in range(1, 4):\n            raise ValueError(\"Size can be 1, 2, or 3\")\n\n\n4. Document Conversion\nDocument Conversion - API | IBM Watson Developer Cloud\nPDF\u3084MS Word\u306a\u3069\u3092HTML\u3084\u3089Plain Text\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308bAPI\u3002\nconfig \u306b\u3069\u3053\u306e\u968e\u5c64\u307e\u3067\u898b\u51fa\u3057\u3092\u3064\u3051\u308b\u304b\u306a\u3069\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\u7d76\u8cdbUnicodeDecodeError\u3067\u30b3\u30b1\u3066\u3044\u308b\u306e\u3067\u3001\u8a18\u4e8b\u306b\u66f8\u3051\u306a\u3044\u30fb\u30fb\u30fb\u3002\u3067\u304d\u305f\u3089\u8ffd\u8a18\u3057\u307e\u3059\u3002\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf0 in position 14: invalid continuation byte\n\n\n5. Language Translator\nLanguage Translator - API | IBM Watson Developer Cloud\n\u5165\u529b\u3057\u305f\u8a00\u8a9e\u3092\u6307\u5b9a\u3057\u305f\u8a00\u8a9e\u306b\u7ffb\u8a33\u3057\u3066\u304f\u308c\u308bAPI\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nimport json\nfrom watson_developer_cloud import LanguageTranslatorV2\n\nlanguage_translator = LanguageTranslatorV2(\n    username='', # \u767a\u884c\u3055\u308c\u305f username \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    password=''  # \u767a\u884c\u3055\u308c\u305f password \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n)\n\ntranslation = language_translator.translate(\n    text='Hello World!',\n    source='en', # \u7ffb\u8a33\u524d\u306e\u8a00\u8a9e\u3092\u6307\u5b9a\n    target='ja'  # \u7ffb\u8a33\u5f8c\u306e\u8a00\u8a9e\u3092\u6307\u5b9a\n)\n\n# \u7d50\u679c\u3092\u51fa\u529b\u3057\u307e\u3059\n# json.dumps\u306e\u6587\u5b57\u5316\u3051\u56de\u907f\u306b ensure_ascii=False \u3092\u6307\u5b9a\nprint(json.dumps(translation, indent=2, ensure_ascii=False))\n\n\u51fa\u529b\u7d50\u679c\n\n6. Natural Language Classifier\n\u8cea\u554f\u3092\u6295\u3052\u305f\u3089\u3001\u305d\u308c\u306b\u5bfe\u3059\u308b\u56de\u7b54\u3092\u3057\u3066\u304f\u308c\u308bAPI\u3002\nDEMO\nNatural Language Classifier  - API | IBM Watson Developer Cloud\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3042\u3089\u304b\u3058\u3081\u3001\u4f1a\u8a71\u3092\u5b66\u7fd2\u3055\u305b\u3066\u304a\u304f\u3002\u4f8b\u3048\u3070\u5929\u6c17\u4e88\u5831\u306b\u5bfe\u3059\u308b\u5fdc\u7b54\u306a\u3069\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u3042\u308bCSV\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\u307f\u308b\u3002\n\nweather_data_train.csv\n\nimport json\nfrom watson_developer_cloud import NaturalLanguageClassifierV1\n\nnatural_language_classifier = NaturalLanguageClassifierV1(\n  username='',\n  password=''\n)\n\nwith open('wheater_data_train.csv', 'rb') as training_data:\n    d = natural_language_classifier.create(training_data = training_data, name='weather')\n    c_id = d[\"classifier_id\"]\n\nstatus = natural_language_classifier.status(c_id)\nprint(status) # Training \u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u9593\u306f\u3001\u5fdc\u7b54\u3057\u306a\u3044\u3002\n\nif status['status'] == 'Available':\n    classes = natural_language_classifier.classify(c_id, 'How hot will it be tomorrow?')\n    print(json.dumps(classes, indent=2))\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3057\u305fclassifier\u3054\u3068\u306bclassifier_id\u304c\u767a\u884c\u3055\u308c\u308b\u3002\n\u3053\u308c\u3092\u306b\u5bfe\u3057\u3066\u8cea\u554f\u3092\u3057\u305f\u308a\u3059\u308b\u3002\n\u307e\u305f\u3001status\u304cTraining\u306e\u9593\u306f\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u4e2d\u306a\u306e\u3067\u3053\u306e\u9593\u306f\u5fdc\u7b54\u3057\u306a\u3044\u3002\n\u51fa\u529b\u7d50\u679c\n{\n  \"url\": \"https://gateway.watsonplatform.net/natural-language-classifier/api/v1/classifiers/xxxxxxxxxxxxx\",\n  \"classes\": [\n    {\n      \"confidence\": 0.9934488976826474,\n      \"class_name\": \"temperature\"\n    },\n    {\n      \"confidence\": 0.006551102317352602,\n      \"class_name\": \"conditions\"\n    }\n  ],\n  \"text\": \"How hot will it be tomorrow?\",\n  \"classifier_id\": \"xxxxxxxxxxxxx\",\n  \"top_class\": \"temperature\"\n}\n\nHow hot will it be tomorrow? \u306b\u5bfe\u3059\u308b\u56de\u7b54\u304c\u8fd4\u3063\u3066\u304d\u3066\u3044\u308b\u4e8b\u304c\u308f\u304b\u308b\u3002\n\n7. Personality Insights\n\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u6027\u683c\u8a3a\u65ad\u3057\u3066\u304f\u308c\u308b\u30b5\u30fc\u30d3\u30b9\u3002\uff08\u30c7\u30e2\u304c\u65e5\u672c\u8a9e\uff09\nDEMO\nPersonality Insights - API | IBM Watson Developer Cloud\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u30b5\u30f3\u30d7\u30eb\u3067\u306fjson\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002\npersonality-v3.json\nimport json\nfrom os.path import join, dirname\nfrom watson_developer_cloud import PersonalityInsightsV3\n\npersonality_insights = PersonalityInsightsV3(\n    version='2016-10-20',\n    username='',\n    password='')\n\nwith open(join(dirname(__file__), 'personality-v3.json')) as profile_json:\n    profile = personality_insights.profile(\n        profile_json.read(), content_type='application/json',\n        raw_scores=True, consumption_preferences=True)\n    print(json.dumps(profile, indent=2))\n\n\u51fa\u529b\u7d50\u679c\u306f\u9577\u3044\u306e\u3067\u5272\u611b\u3002\u307e\u305f\u3001json\u3067\u306f\u306a\u304f\u305f\u3060\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5224\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\ncontent_type \u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3044\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067text/plain\u306b\u306a\u3063\u3066\u3044\u308b\uff09\npersonality_insights.profile(\"\u30c6\u30ad\u30b9\u30c8\")\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001\u30e1\u30bd\u30c3\u30c9\u306f\u6b21\u306e1\u500b\u3057\u304b\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u3002\ndef profile(self, text, content_type='text/plain', content_language=None,\n            accept='application/json',\n            accept_language=None, raw_scores=False,\n            consumption_preferences=False, csv_headers=False):\n\n\n8. Retrieve and Rank\nApache Solr + \u6a5f\u68b0\u5b66\u7fd2\u306e\u691c\u7d22\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u308c\u308b\u3084\u3064\u3002\nDEMO\nRetrieve and Rank - API | IBM Watson Developer Cloud\n\nRerieveAndRank\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n\nretrieve_and_rank = RetrieveAndRankV1(\n    username='',\n    password='')\n\n\nApache Solr\u30af\u30e9\u30b9\u30bf\u3092\u4f5c\u6210\u3059\u308b\n\n\nApache Solr\u30af\u30e9\u30b9\u30bf\u3092\u4f5c\u6210\u3001\nApache Solr\u30af\u30e9\u30b9\u30bf\u306eid\u304c\u767a\u884c\u3055\u308c\u308b\n\ncreated_cluster = retrieve_and_rank.create_solr_cluster(cluster_name='Test Cluster', cluster_size='1')\nsolr_cluster_id = \"\"\n\n\n\u8a2d\u5b9a\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\n\nwith open('solr_config.zip', 'rb') as config:\n    config_status = retrieve_and_rank.create_config(solr_cluster_id, 'test-config', config)\n    print(json.dumps(config_status, indent=2))\n\n\nSolr\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n\n\u5fdc\u7b54\u306b\u95a2\u3057\u3066\u306fSolr\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3API\u3092\u898b\u308b\u3002\n\ncollection = retrieve_and_rank.create_collection(solr_cluster_id, 'test-collection', 'test-config')\n\n\n\u691c\u7d22\u306e\u30e9\u30f3\u30ab\u30fc\u7528\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n\nRanker\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3002\n\nwith open('source/ranker_training_data.csv', 'rb') as training_data:\n    retrieve_and_rank.create_ranker(training_data=training_data, name='Ranker Test')\n\n\n\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\n\nwith open('ranker_answer_data.csv', 'rb') as answer_data:\n    ranker_results = retrieve_and_rank.rank('766366x22-rank-1804', answer_data)\n    print(json.dumps(ranker_results, indent=2))\n\n\n9. Speech to Text\n\n\u691c\u7d22\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\n\nSpeech to Text - API | IBM Watson Developer Cloud\n\u5165\u529b\u3057\u305f\u97f3\u6e90\u3092\u6587\u5b57\u8d77\u3053\u3057\u3057\u3066\u304f\u308c\u308b\u3001\u3059\u3054\u304f\u4fbf\u5229\u306aAPI\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nfrom watson_developer_cloud import SpeechToTextV1\n\nspeech_to_text = SpeechToTextV1(\n    username='', # \u767a\u884c\u3055\u308c\u305f username \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    password='', # \u767a\u884c\u3055\u308c\u305f password \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    x_watson_learning_opt_out=False\n)\n\nwith open('source', 'rb') as audio_file: # \u97f3\u6e90\u3092\u53d6\u5f97\n    r = speech_to_text.recognize(\n        audio_file,                    # \u8aad\u307f\u8fbc\u3093\u3060\u3057\u305f\u97f3\u6e90\n        model=\"ja-JP_NarrowbandModel\", # \u8a00\u8a9e\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u306e\u6307\u5b9a\n        content_type='audio/flac',     # \u30b3\u30f3\u30c6\u30f3\u30c8\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\n        timestamps=True,               # \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\n        word_confidence=True\n)\n\nprint(r)\n\n\n\u5bfe\u5fdc\u8a00\u8a9e\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\nmodel\u5f15\u6570\u306b\u306f\u3001\u8a00\u8a9e\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\uff08Broadband, Narrowband\uff09\u304c\u6307\u5b9a\u3067\u304d\u308b\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308c\u3070\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\nar-AR_BroadbandModel\nen-UK_BroadbandModel\nen-UK_NarrowbandModel\nen-US_BroadbandModel (the default)\nen-US_NarrowbandModel\nes-ES_BroadbandModel\nes-ES_NarrowbandModel\nfr-FR_BroadbandModel\nja-JP_BroadbandModel\nja-JP_NarrowbandModel\npt-BR_BroadbandModel\npt-BR_NarrowbandModel\nzh-CN_BroadbandModel\nzh-CN_NarrowbandModel\n\nSpeechToTextV1 \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e30\u884c\u76ee\u3042\u305f\u308a\u3092\u898b\u308c\u3070\u3001\n\u7d50\u69cb\u306a\u5f15\u6570\u304c\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u307f\u306a\u304c\u3089\u9069\u5b9c\u3057\u3066\u3044\u304d\u305f\u3044\u3002\ndef recognize(self, audio, content_type, continuous=False, model=None,\n                  inactivity_timeout=None,\n                  keywords=None, keywords_threshold=None,\n                  max_alternatives=None,\n                  word_alternatives_threshold=None,\n                  word_confidence=None, timestamps=None, interim_results=None,\n                  profanity_filter=None,\n                  smart_formatting=None,\n                  speaker_labels=None):\n\n\n10. Text to Speech\nText to Speech - API | IBM Watson Developer Cloud\n\u5165\u529b\u3057\u305f\u6587\u5b57\u3092\u97f3\u58f0\u306b\u8d77\u3053\u3057\u3066\u304f\u308c\u308bAPI\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nfrom os.path import join, dirname\nfrom watson_developer_cloud import TextToSpeechV1\n\ntext_to_speech = TextToSpeechV1(\n    username='',\n    password='',\n    x_watson_learning_opt_out=True)  # Optional flag\n\nwith open(join(dirname(__file__), './output/output.wav'), 'wb') as audio_file:\n    audio_file.write(text_to_speech.synthesize('Hello world!',     # \u7b2c\u4e00\u5f15\u6570\u306b\u5165\u529b\u30c6\u30ad\u30b9\u30c8\n                                               accept='audio/wav', # \u4fdd\u5b58\u5f62\u5f0f\n                                               voice=\"en-US_AllisonVoice\")) # \u8a00\u8a9e\u3068\u97f3\u58f0\u3092\u6307\u5b9a\n\n\n\u5bfe\u5fdc\u8a00\u8a9e\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\n\nde-DE_BirgitVoice\nde-DE_DieterVoice\nen-GB_KateVoice\nen-US_AllisonVoice\nen-US_LisaVoice\nen-US_MichaelVoice (the default)\nes-ES_EnriqueVoice\nes-ES_LauraVoice\nes-LA_SofiaVoice\nes-US_SofiaVoice\nfr-FR_ReneeVoice\nit-IT_FrancescaVoice\nja-JP_EmiVoice\npt-BR_IsabelaVoice\n\n\u5408\u6210\u97f3\u58f0\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9 synthesize \u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u78ba\u8a8d\u3057\u3066\u898b\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3002\ndef synthesize(self, text, voice=None, accept=None, customization_id=None):\n\n\u307e\u305f\u3001\u30ab\u30b9\u30bf\u30e0\u30e2\u30c7\u30eb\u306f\u5c11\u3057\u3060\u3051\u89e6\u3063\u305f\u611f\u3058\u3001\u65b0\u3057\u3044\u97f3\u3092\u767b\u9332\u3059\u308b\u3001\u3068\u8a00\u3046\u3082\u306e\u3067\u306f\u306a\u3044\u3053\u3068\u3060\u3051\u306f\u306f\u3063\u304d\u308a\u3057\u305f\u3002\n\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u308b\u9650\u308a\u3001\u4f8b\u3048\u3070\u300ciPhone\u300d\u3092\u300cI Phone\u300d\u3068\u8aad\u3080\u3088\u3046\u306b\u5206\u89e3\u3057\u3066\u304a\u304f\u3068\u304b\u3001\u8868\u8a18\u3068\u767a\u97f3\u304c\u9055\u3046\u3082\u306e\u3092\u767b\u9332\u3057\u3066\u304a\u304f\u3088\u3046\u306a\u611f\u3058\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u300cIEEE\u300d\u306f\u300cI triple e\u300d\uff08\u30a2\u30a4 \u30c8\u30ea\u30d7\u30eb \u30a4\u30fc\uff09\u3068\u304b\u3002\n\u5177\u4f53\u7684\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u304a\u3044\u3066\u304a\u304f\u3002\nfrom os.path import join, dirname\nfrom watson_developer_cloud import TextToSpeechV1\n\ntext_to_speech = TextToSpeechV1(\n    username='', # \u767a\u884c\u3055\u308c\u305f username \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    password='', # \u767a\u884c\u3055\u308c\u305f password \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    x_watson_learning_opt_out=True) \n\nc_id = text_to_speech.create_customization('short-word', language=\"en-US\")[\"customization_id\"]\ntext_to_speech.add_customization_words(c_id, [{'word': 'IEEE', 'translation': 'I triple E'}])\n\nwith open(join(dirname(__file__), './ieee.wav'), 'wb') as audio_file:\n    audio_file.write(text_to_speech.synthesize('This is IEEE.',\n                                               accept='audio/wav',\n                                               customization_id=c_id))\n\n\u51fa\u529b\u3055\u308c\u305f\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u805e\u3044\u3066\u307f\u308b\u3068\u300cI triple E\u300d\u3068\u767a\u8a00\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u805e\u304d\u53d6\u308c\u308b\u3002\n\n11. Tone Analyzer\nTone Analyzer - API | IBM Watson Developer Cloud\n\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u304b\u3089\u611f\u60c5\u5206\u6790\u3092\u884c\u3046API\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nimport json\nfrom watson_developer_cloud import ToneAnalyzerV3\n\ntone_analyzer = ToneAnalyzerV3(\n    username='',\n    password='',\n    version='2016-02-11')\n\nprint(json.dumps(tone_analyzer.tone(text='I am very happy'), indent=2, ensure_ascii=False))\n\n\u51fa\u529b\u7d50\u679c\njson\u304c\u6b21\u306e\u3088\u3046\u306b\u8fd4\u3063\u3066\u304f\u308b\u3002\n\"tone_categories\": [\n      {\n        \"category_id\": \"emotion_tone\",\n        \"category_name\": \"Emotion Tone\",\n        \"tones\": [\n          {\n            \"score\": 0.006169,\n            \"tone_id\": \"anger\",\n            \"tone_name\": \"Anger\"\n          },\n          {\n            \"score\": 0.008786,\n            \"tone_id\": \"disgust\",\n            \"tone_name\": \"Disgust\"\n          },\n          {\n            \"score\": 0.007084,\n            \"tone_id\": \"fear\",\n            \"tone_name\": \"Fear\"\n          },\n          {\n            \"score\": 0.973498,\n            \"tone_id\": \"joy\",\n            \"tone_name\": \"Joy\"\n          },\n          {\n            \"score\": 0.0179,\n            \"tone_id\": \"sadness\",\n            \"tone_name\": \"Sadness\"\n          }\n        ]\n      },\n      // \u4ee5\u4e0b\u7701\u7565\n\n\n\u8a55\u4fa1\u5185\u5bb9\nScore\u306f\u3064\u304e\u306e3\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306b\u5206\u985e\u3055\u308c\u3001\u3055\u3089\u306b\u30c8\u30fc\u30f3\u3054\u3068\u306b\u63a1\u70b9\u3055\u308c\u308b\u3002\n\nEmotion Tone\n\n\nAnger : \u6012\u308a\nDisgust : \u5acc\u60aa\u611f\nFear : \u6050\u6016\nJoy : \u559c\u3073\nSadness : \u60b2\u3057\u307f\n\n\nWriting Tone\n\n\nAnalytical : \u5206\u6790\u7684\nConfident : \u81ea\u4fe1\nTentative : \u81ea\u4fe1\u306a\u3055\u3052\u306a\n\n\nSocial Tone\n\n\nOpenness : \u958b\u653e\u6027\nConscientiousness : \u8aa0\u5b9f\u3055\nExtraversion : \u5916\u4ea4\u6027\nAgreeableness : \u59a5\u5f53\u6027\nEmotional Range : \u611f\u60c5\u7684\u306a\u7bc4\u56f2\n\n\n\n\n12. Tradeoff Analytics\nTradeoff Analytics - API | IBM Watson Developer Cloud\n\u5bfe\u7acb\u6848\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u3001\u3069\u306e\u6848\u304c\u3044\u3044\u306e\u304b\u63d0\u6848\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u3082\u306e\u3002\uff08\u30a8\u30f4\u30a1\u306e\u30de\u30ae\u30b7\u30b9\u30c6\u30e0\u3066\u304d\u306a\u3084\u3064\uff09\n\u5b9f\u884c\u3059\u308bPython\u306e\u65b9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nimport json\nimport os\nfrom os.path import join, dirname\nfrom watson_developer_cloud import TradeoffAnalyticsV1\n\ntradeoff_analytics = TradeoffAnalyticsV1(\n    username='',\n    password='')\n\nwith open(os.path.join(os.path.dirname(__file__), 'problem.json')) as problem_json:\n    dilemma = tradeoff_analytics.dilemmas(json.load(problem_json),\n                                          generate_visualization=False)\n\nprint(json.dumps(dilemma, indent=2, ensure_ascii=False))\n\n\u51fa\u529b\u7d50\u679c\n\u4f8b\u3048\u3070\u3001\u6b21\u306e \"problem.json\" \u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n{\n  \"subject\": \"\u4f7f\u5f92\u8a0e\u4f10\u304b\u3001\u30a8\u30f4\u30a1\u6b8b\u5b58\u304b\",\n  \"columns\": [\n    {\n      \"key\": \"number_of_shito\",\n      \"type\": \"numeric\",\n      \"goal\": \"min\",\n      \"full_name\": \"\u4f7f\u5f92\u306e\u6570\",\n      \"is_objective\": true,\n      \"range\": {\n        \"low\": 0,\n        \"high\": 13\n      },\n      \"format\": \"number:0\"\n    },\n    {\n      \"key\": \"number_of_nerv_base\",\n      \"type\": \"numeric\",\n      \"goal\": \"max\",\n      \"full_name\": \"\u30cd\u30eb\u30d5\u306e\u672c\u90e8\u306e\u6570\",\n      \"range\": {\n        \"low\": 0,\n        \"high\": 1\n      },\n      \"format\": \"number:0\"\n    },\n    {\n      \"key\": \"number_of_eva\",\n      \"type\": \"numeric\",\n      \"goal\": \"max\",\n      \"full_name\": \"\u30a8\u30f4\u30a1\u306e\u6570\",\n      \"is_objective\": true,\n      \"range\": {\n        \"low\": 0,\n        \"high\": 3\n      },\n      \"format\": \"number:0\"\n    }\n  ],\n  \"options\": [\n    {\n      \"key\": \"1\",\n      \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u653e\u68c4\u3057\u3066\u4f7f\u5f92\u3092\u6e1b\u3089\u3059\u65b9\u304c\u826f\u3044\",\n      \"values\": {\n        \"number_of_shito\": 12,\n        \"number_of_nerv_base\": 0,\n        \"number_of_eva\": 3\n      }\n    },\n    {\n      \"key\": \"2\",\n      \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3068\u30a8\u30f4\u30a1\u3092\u6b8b\u3057\u3066\u4f7f\u5f92\u3092\u898b\u9003\u3059\",\n      \"values\": {\n        \"number_of_shito\": 13,\n        \"number_of_nerv_base\": 1,\n        \"number_of_eva\": 3\n      }\n    },\n    {\n      \"key\": \"3\",\n      \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u7834\u68c4\u3001\u30a8\u30f4\u30a1\u3092\u6483\u7834\u3055\u308c\u308b\u304c\u3001\u4f7f\u5f92\u30922\u4f53\u6483\u7834\",\n      \"values\": {\n        \"number_of_shito\": 11,\n        \"number_of_nerv_base\": 0,\n        \"number_of_eva\": 2\n      }\n    }\n  ]\n}\n\n\u51fa\u529b\u7d50\u679c\n{\n  \"resolution\": {\n    \"solutions\": [\n      {\n        \"status\": \"FRONT\",\n        \"solution_ref\": \"1\"\n      },\n      {\n        \"status\": \"EXCLUDED\",\n        \"solution_ref\": \"2\",\n        \"excluded_by\": [\n          {\n            \"objectives\": [\n              {\n                \"key\": \"number_of_shito\",\n                \"difference\": 1.0\n              }\n            ],\n            \"solution_ref\": \"1\"\n          }\n        ]\n      },\n      {\n        \"status\": \"FRONT\",\n        \"solution_ref\": \"3\"\n      }\n    ]\n  },\n  \"problem\": {\n    \"columns\": [\n      {\n        \"key\": \"number_of_shito\",\n        \"format\": \"number:0\",\n        \"type\": \"numeric\",\n        \"range\": {\n          \"low\": 0.0,\n          \"high\": 13.0\n        },\n        \"goal\": \"min\",\n        \"is_objective\": true,\n        \"full_name\": \"\u4f7f\u5f92\u306e\u6570\"\n      },\n      {\n        \"key\": \"number_of_nerv_base\",\n        \"format\": \"number:0\",\n        \"type\": \"numeric\",\n        \"range\": {\n          \"low\": 0.0,\n          \"high\": 1.0\n        },\n        \"goal\": \"max\",\n        \"is_objective\": false,\n        \"full_name\": \"\u30cd\u30eb\u30d5\u306e\u672c\u90e8\u306e\u6570\"\n      },\n      {\n        \"key\": \"number_of_eva\",\n        \"format\": \"number:0\",\n        \"type\": \"numeric\",\n        \"range\": {\n          \"low\": 0.0,\n          \"high\": 3.0\n        },\n        \"goal\": \"max\",\n        \"is_objective\": true,\n        \"full_name\": \"\u30a8\u30f4\u30a1\u306e\u6570\"\n      }\n    ],\n    \"subject\": \"\u4f7f\u5f92\u8a0e\u4f10\u304b\u3001\u30a8\u30f4\u30a1\u6b8b\u5b58\u304b\",\n    \"options\": [\n      {\n        \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u653e\u68c4\u3057\u3066\u4f7f\u5f92\u3092\u6e1b\u3089\u3059\u65b9\u304c\u826f\u3044\",\n        \"values\": {\n          \"number_of_eva\": 3,\n          \"number_of_shito\": 12,\n          \"number_of_nerv_base\": 0\n        },\n        \"key\": \"1\"\n      },\n      {\n        \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3068\u30a8\u30f4\u30a1\u3092\u6b8b\u3057\u3066\u4f7f\u5f92\u3092\u898b\u9003\u3059\",\n        \"values\": {\n          \"number_of_eva\": 3,\n          \"number_of_shito\": 13,\n          \"number_of_nerv_base\": 1\n        },\n        \"key\": \"2\"\n      },\n      {\n        \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u7834\u68c4\u3001\u30a8\u30f4\u30a1\u3092\u6483\u7834\u3055\u308c\u308b\u304c\u3001\u4f7f\u5f92\u30922\u4f53\u6483\u7834\",\n        \"values\": {\n          \"number_of_eva\": 2,\n          \"number_of_shito\": 11,\n          \"number_of_nerv_base\": 0\n        },\n        \"key\": \"3\"\n      }\n    ]\n  }\n}\n\n\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\nFRONT(\u6700\u826f)\n\n\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u653e\u68c4\u3057\u3066\u4f7f\u5f92\u3092\u6e1b\u3089\u3059\u65b9\u304c\u826f\u3044\n\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u7834\u68c4\u3001\u30a8\u30f4\u30a1\u3092\u6483\u7834\u3055\u308c\u308b\u304c\u3001\u4f7f\u5f92\u30922\u4f53\u6483\u7834\n\nEXCLUDED(\u307e\u3041\u307e\u3041)\n\n\u30cd\u30eb\u30d5\u672c\u90e8\u3068\u30a8\u30f4\u30a1\u3092\u6b8b\u3057\u3066\u4f7f\u5f92\u3092\u898b\u9003\u3059\n\n\u3089\u3057\u3044\u306e\u3067\u3001\u4f7f\u5f92\u3068\u6226\u3044\u307e\u3057\u3087\u3046\u3002\n\n13. Visual Recognition\n\nVisual Recognition - API | IBM Watson Developer Cloud\nDEMO\n\n\u300c\u9854\u300d\u300c\u6587\u5b57\u300d\u300c\u305d\u306e\u4ed6\uff1f\u300d\u306e\u7a2e\u985e\u3067\u753b\u50cf\u8a8d\u8b58\u3092\u3059\u308bAPI\u3002\n\u3053\u306eAPI\u3060\u3051\u3001\u4ed6\u306eAPI\u3068\u9055\u3063\u3066 api_key \u304c\u767a\u884c\u3055\u308c\u308b\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nimport json\nfrom os.path import join, dirname\nfrom watson_developer_cloud import VisualRecognitionV3\n\n# API Key\u3092\u5165\u529b\u3059\u308b\nvisual_recognition = VisualRecognitionV3('2016-05-20', api_key='')\n\n# \u30ed\u30fc\u30ab\u30eb\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u3046\u5834\u5408\n\n# \u4f55\u304b\u308f\u304b\u3089\u306a\u3044\u3082\u306e\u3092\u8a8d\u8b58\u3055\u305b\u305f\u3044\u6642\nwith open(join(dirname(__file__), 'nanika.png'), 'rb') as image_file:\n    print(json.dumps(visual_recognition.classify(images_file=image_file), indent=2))\n\n# \u9854\u8a8d\u8b58\nwith open('face.jpg', 'rb') as image_file:\n    print(json.dumps(visual_recognition.detect_faces(images_file=image_file), indent=2))\n\n# \u6587\u5b57\u8a8d\u8b58\nwith open('text.png', 'rb') as image_file:\n    print(json.dumps(visual_recognition.recognize_text(images_file=image_file), indent=2))\n\n# URL\u3067\u753b\u50cf\u8a8d\u8b58\u3055\u305b\u308b\u5834\u5408\nprint(json.dumps(visual_recognition.detect_faces(images_url=\"\"), indent=2))\nprint(json.dumps(visual_recognition.recognize_text(images_url=\"\"), indent=2))\n\n\u51fa\u529b\u7d50\u679c\n\u4e0b\u306e\u753b\u50cf\u3092 classify \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u8a8d\u8b58\u3055\u305b\u3066\u307f\u308b\u3002\n\n{\n  \"images\": [\n    {\n      \"image\": \"miku.jpg\",\n      \"classifiers\": [\n        {\n          \"classifier_id\": \"default\",\n          \"classes\": [\n            {\n              \"score\": 0.838,\n              \"class\": \"oxygen mask\",\n              \"type_hierarchy\": \"/device/oxygen mask\"\n            },\n            {\n              \"score\": 0.838,\n              \"class\": \"device\"\n            },\n            {\n              \"score\": 0.584,\n              \"class\": \"plush (fabric for toys)\"\n            },\n            {\n              \"score\": 0.584,\n              \"class\": \"fabric\"\n            },\n            {\n              \"score\": 0.554,\n              \"class\": \"mask\"\n            },\n            {\n              \"score\": 0.942,\n              \"class\": \"emerald color\"\n            }\n          ],\n          \"name\": \"default\"\n        }\n      ]\n    }\n  ],\n  \"images_processed\": 1,\n  \"custom_classes\": 0\n}\n\n\u30a8\u30e1\u30e9\u30eb\u30c9\u30ab\u30e9\u30fc\u306b94%\u3068\u304b\u306f\u5206\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u300c\u9178\u7d20\u30de\u30b9\u30af\u300d\u304c\u9805\u76ee\u306b\u5165\u308b\u306e\u306f\u3061\u3087\u3063\u3068\u9a5a\u3044\u305f\u3002\n\u4f7f\u7528\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u3067\u898b\u3066\u307f\u308b\u3068\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\ndef classify(self, images_file=None, images_url=None, classifier_ids=None,\n                 owners=None, threshold=None):\n\ndef recognize_text(self, images_file=None, images_url=None):\n\ndef detect_faces(self, images_file=None, images_url=None):\n\n\u304a\u6c17\u3065\u304d\u3060\u308d\u3046\u304c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f image_url \u306a\u3093\u3066\u7121\u3044\u3068\u3044\u3046\u3002\n\u304d\u3063\u3068\u308f\u3056\u3068\u3060\u308d\u3046\u3002\u305d\u3046\u4fe1\u3058\u3066\u308b\u3002\n\n\u7d42\u308f\u308a\u306b\nPython\u304b\u3089API\u3092\u4e00\u901a\u308a\u547c\u3073\u51fa\u3057\u3066\u307f\u305f\u611f\u3058\u3001\u65e5\u672c\u8a9e\u304c\u4ea4\u3058\u308b\u3068UnicodeError\u3042\u305f\u308a\u3067\u3044\u3061\u3044\u3061\u8e93\u304f\u306a\u3041\u3001\u3068\u3044\u3046\u5370\u8c61\u3002\n\u500b\u4eba\u7684\u306b\u30b5\u30af\u30c3\u3068\u4f7f\u3048\u305f\u306a\u30fc\u3068\u3044\u3046\u306e\u304c\u4ee5\u4e0b\u306e\u3082\u306e\u3002\n\nAlchemyAPI\nNatural Language Classifier\nPersonality Insights\nSpeech to Text\nText to Speech\nTone Analyzer\nTradeoff Analytics\nVisual Recognition\n\n\u305d\u308c\u305e\u308c\u306e\u30b5\u30fc\u30d3\u30b9\u3067\u5b8c\u7d50\u3057\u3066\u3044\u308b\u611f\u3058\u304c\u3042\u308b\u306e\u3067\u3001APi\u3067\u547c\u3073\u51fa\u3059\u3088\u308a\u3001WEB\u3067\u3084\u3063\u305f\u307b\u3046\u304c\u697d\u3060\u308d\u3046\u306a\u3041\u3001\u3068\u3044\u3046\u306e\u304c\u4eca\u56de\u306e\u611f\u60f3\u3002\nWatson\u306ePython SDK\u3092\u4f7f\u3063\u3066API\u3092\u53e9\u3044\u3066\u307f\u305f 13\u9023\u767a (\u7d76\u8cdb\u9014\u4e2d)\n[Teratail\u306e\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc](https://teratail.com/Bluemix) 22\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff01\n\u9752\u6c41\u6b32\u3057\u3044\u306e\u3067\u3044\u3044\u306d\u4e0b\u3055\u3044\u3002\n\n\n## \u3053\u308c\u306f\u306a\u306b\n\nWatson\u306ePython SDK\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4f7f\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3082\u306e\u3002\n\n[#94](https://github.com/watson-developer-cloud/python-sdk/issues/94) \u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u3088\u3046\u306b\u3001Python\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5c11\u306a\u3044\u3057\u3001\u65e5\u672c\u8a9e\u306e\u8a18\u4e8b\u3082\u3042\u3093\u307e\u308a\u306a\u3044\u306e\u3067\u3001\u307e\u3068\u3081\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u306e\u304c\u52d5\u6a5f\u3067\u3059\u3002\n\n- [watson-developer-cloud/python-sdk](https://github.com/watson-developer-cloud/python-sdk)\n\npip\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067SDK\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n```\npip install --upgrade watson-developer-cloud\n```\n\n**\u7528\u610f\u3059\u308b\u3082\u306e**\n\n- [Bluemix\u306e\u30a2\u30ab\u30a6\u30f3\u30c8](https://console.ng.bluemix.net/registration/)\n- [Python](https://www.python.org/)\n\n\u3053\u306e\u8a18\u4e8b\u4e2d\u306e\u30b3\u30fc\u30c9\u306f Python 3.5.2 \u3067\u691c\u8a3c\u3057\u3066\u3044\u307e\u3059\u3002\n\n## IBM\u304c\u7d14\u7c8b\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308bWatson\u306eAPI\n\n\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u3092\u9664\u304f\u306813\u500b\u3042\u308a\u307e\u3059\u3002\n\n1. AlchemyAPI\n2. Conversation\n3. Discovery\n4. Document Conversion\n5. Language Translator\n6. Natural Language Classifier\n7. Personality Insights\n8. Retrieve and Rank\n9. Speech to Text\n10. Text to Speech\n11. Tone Analyzer\n12. Tradeoff Analytics\n13. Visual Recognition\n\n### 1. AlchemyAPI\n\nData News \u3068 Language \u306e2\u3064\u304c\u3042\u308b\u3002\u524d\u8005\u306f\u3042\u308b\u671f\u9593\u5185\u3001\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u3067\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n\u5f8c\u8005\u306f\u30c6\u30ad\u30b9\u30c8\u3084URL\u304b\u3089\u8a18\u4e8b\u306e\u57fa\u672c\u60c5\u5831\u3084\u30b3\u30f3\u30bb\u30d7\u30c8\u3001\u611f\u60c5\u5206\u6790\u306a\u3069\u3055\u307e\u3056\u307e\u306a\u5206\u6790\u3092\u3057\u3066\u304f\u308c\u308b\u30bf\u30a4\u30d7\u3002\nLanguage\u306e\u65b9\u306f[iOS SDK](https://github.com/watson-developer-cloud/ios-sdk) \u3082\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\n- [AlchemyData News - API | IBM Watson Developer Cloud](http://www.ibm.com/watson/developercloud/alchemydata-news/api/v1/)\n- [AlchemyLanguage - API | IBM Watson Developer Cloud](http://www.ibm.com/watson/developercloud/alchemy-language/api/v1/)\n\n#### AlchemyData News\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n```python\nimport json\nfrom watson_developer_cloud import AlchemyDataNewsV1\n\nalchemy_data_news = AlchemyDataNewsV1(api_key='')\n\nresults = alchemy_data_news.get_news_documents(\n    start='1453334400',\n    end='1454022000',\n    return_fields=[\n        'enriched.url.title',\n        'enriched.url.url',\n        'enriched.url.author',\n        'enriched.url.publicationDate'\n    ],\n    query_fields={\n        # \u30af\u30a8\u30ea\u30d5\u30a3\u30fc\u30eb\u30c9\n        'q.enriched.url.enrichedTitle.entities.entity': '|text=IBM, type=company|'\n    }\n)\n\nprint(json.dumps(results, indent=2))\n```\n\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```\n1\u65e5\u306e\u4f7f\u7528\u4e0a\u9650\u3092\u8d85\u3048\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u307e\u3060\u8f09\u305b\u3089\u308c\u306a\u3044\u3002\n```\n\n**\u30e1\u30bd\u30c3\u30c9**\n\n`AlchemyDataNewsV1` \u306f1\u3064\u3060\u3051\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002\n\n```python\ndef get_news_documents(self, start, end, max_results=10, query_fields=None,\n                       return_fields=None, time_slice=None,\n                       next_page=None, dedup=None, dedup_threshold=None,\n                       rank=None):\n```\n\n`start` \u306f\u5fc5\u9808\u3067\u3001\u63a2\u7d22\u306e\u958b\u59cb\u6642\u9593\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002UNIX\u30bf\u30a4\u30e0\u3067\u3082\u53ef\u80fd\u3067\u3042\u308b\u3002\n\u4ed6\u306b\u306f\u3001 \u73fe\u6642\u523b\u3060\u3068 `now` \u3001\u73fe\u6642\u523b\u304b\u30891\u9031\u9593\u524d\u3060\u3068 `now-7d` \u3068\u8a00\u3063\u305f\u8a18\u8ff0\u3082\u53ef\u80fd\u3002\n\n`return_fields` \u306b\u306f\u8fd4\u3063\u3066\u304f\u308b\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n- `enriched.url.title`\n- `enriched.url.url`\n- `enriched.url.author`\n- `enriched.url.publicationDate`\n\n`query_fields` \u306b\u306f\u63a2\u7d22\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002\n\n- q.enriched.url.enrichedTitle.relations.relation\n- q.enriched.url.enrichedTitle.entities.entity\n- q.enriched.url.enrichedTitle.taxonomy.taxonomy\n- q.enriched.url.enrichedTitle.docSentiment.type\n- q.enriched.url.concepts.concept.text\n- q.enriched.url.enrichedTitle.keywords.keyword.text\n\nentities\u3068taxonomy\u306f\u30ea\u30b9\u30c8\u304c\u3042\u308b\u306e\u3067\u3001\u30ea\u30d5\u30a1\u30ec\u30a4\u30f3\u30b9\u30da\u30fc\u30b8\u306e\u30ea\u30f3\u30af\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u9069\u5b9c\u53c2\u7167\u3059\u308b\u3068\u3088\u3044\u3002\n\n**\u305d\u306e\u4ed6**\n\n\u4f7f\u3063\u3066\u308b\u3068\u3059\u3050\u306b\u4e0b\u306e\u69d8\u306b\u4e00\u65e5\u306e\u4f7f\u7528\u91cf\u3092\u8d85\u904e\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u3002\n\n```shell\nWatsonException: Error: daily-transaction-limit-exceeded\n```\n\n#### AlchemyLanguage\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n```python\nimport json\nfrom os.path import join, dirname\nfrom watson_developer_cloud import AlchemyLanguageV1\n\nalchemy_language = AlchemyLanguageV1(api_key='')\n\nurl = ''\n\nprint(json.dumps(\n    alchemy_language.targeted_sentiment(text='I love cats! Dogs are smelly.',\n                                        targets=['cats', 'dogs'],\n                                        language='english'), indent=2))\n```\n\n`targeted_sentiment` \u306f `targets` \u306b\u5165\u529b\u3057\u305f\u30ef\u30fc\u30c9\u306b\u3064\u3044\u3066\u611f\u60c5\u5206\u6790\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3002\n[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/watson-developer-cloud/python-sdk/blob/master/watson_developer_cloud/alchemy_language_v1.py)\u3092\u898b\u305f\u611f\u3058\u3001`html`, `text`, `url` \u306a\u3069\u304c\u6307\u5b9a\u53ef\u80fd\u3002\n\n```python\ndef targeted_sentiment(self, targets, html=None, text=None, url=None,\n                       language=None, constraint_query=None,\n                       xpath_query=None, show_source_text=False,\n                       source_text_type=None):\n```\n\n\u4ed6\u306b\u3082\u5358\u4f53\u3067\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u3066\u304a\u304f\u3044\u3044\u3002\n\n\n### 2. Conversation\n\n[Conversation - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/conversation/api/v1/#send_message)\n\nAPI\u3092\u53d6\u5f97\u5f8c\u3001Workspace\u3092\u4e00\u5ea6\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n**\u66f8\u304d\u304b\u3051\u3067\u3059**\n\n### 3. Discovery\n\n\u6307\u5b9a\u5b50\u305f\u6761\u4ef6\u4e0b\u3067\u6700\u65b0\u306e\u60c5\u5831\u3092\u62fe\u3063\u3066\u304d\u3066\u304f\u308c\u308b\u3084\u3064\u3002\u691c\u7d22\u306e\u624b\u9593\u3092\u7701\u304f\u3068\u3044\u3046\u30a4\u30e1\u30fc\u30b8\u3002\n\n[DEMO](https://discovery-news-demo.mybluemix.net/)\n\n[Discovery - API | IBM Watson Developer Cloud](http://www.ibm.com/watson/developercloud/discovery/api/v1/)\n\n\n\n[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://www.ibm.com/watson/developercloud/discovery/api/v1/#create_environment)\u3092\u898b\u308b\u9650\u308a\u3001\n`size = 0` \u3068\u3059\u308c\u3070\u3001\u7121\u6599\u67a0\u3067\u53e9\u3051\u308b\u306f\u305a\u306a\u306e\u3060\u3051\u308c\u3069\u3001\u53e9\u3051\u306a\u304b\u3063\u305f\u3002\n\u4e00\u5fdc\u3001`size`\u306f1,2,3\u306e\u3069\u308c\u304b\u3057\u304b\u53d6\u308c\u306a\u3044\u3002\uff08\u4e00\u5fdc\u66f8\u304d\u63db\u3048\u3066\u3084\u3063\u3066\u3082\u30a2\u30a6\u30c8\u3060\u3063\u305f\uff09\n\n```python\ndef create_environment(self, name=\"\", description=\"\", size=1):\n        \"\"\"\n\n        :param name: name of the environment (max 255 chars) can be empty\n        :param description: description of the environment (max 255 chars)\n        can be empty\n        :param size: size of the environment (1,2, or 3)\n        :return:\n        \"\"\"\n        self._valid_name_and_description(name=name, description=description)\n        if size not in range(1, 4):\n            raise ValueError(\"Size can be 1, 2, or 3\")\n```\n\n### 4. Document Conversion\n\n[Document Conversion - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/document-conversion/api/v1/)\n\nPDF\u3084MS Word\u306a\u3069\u3092HTML\u3084\u3089Plain Text\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308bAPI\u3002\n\n`config` \u306b\u3069\u3053\u306e\u968e\u5c64\u307e\u3067\u898b\u51fa\u3057\u3092\u3064\u3051\u308b\u304b\u306a\u3069\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n\u7d76\u8cdbUnicodeDecodeError\u3067\u30b3\u30b1\u3066\u3044\u308b\u306e\u3067\u3001\u8a18\u4e8b\u306b\u66f8\u3051\u306a\u3044\u30fb\u30fb\u30fb\u3002\u3067\u304d\u305f\u3089\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\n```shell\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf0 in position 14: invalid continuation byte\n```\n\n### 5. Language Translator\n\n[Language Translator - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/language-translator/api/v2/)\n\n\u5165\u529b\u3057\u305f\u8a00\u8a9e\u3092\u6307\u5b9a\u3057\u305f\u8a00\u8a9e\u306b\u7ffb\u8a33\u3057\u3066\u304f\u308c\u308bAPI\u3002\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n```python\nimport json\nfrom watson_developer_cloud import LanguageTranslatorV2\n\nlanguage_translator = LanguageTranslatorV2(\n    username='', # \u767a\u884c\u3055\u308c\u305f username \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    password=''  # \u767a\u884c\u3055\u308c\u305f password \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n)\n\ntranslation = language_translator.translate(\n    text='Hello World!',\n    source='en', # \u7ffb\u8a33\u524d\u306e\u8a00\u8a9e\u3092\u6307\u5b9a\n    target='ja'  # \u7ffb\u8a33\u5f8c\u306e\u8a00\u8a9e\u3092\u6307\u5b9a\n)\n\n# \u7d50\u679c\u3092\u51fa\u529b\u3057\u307e\u3059\n# json.dumps\u306e\u6587\u5b57\u5316\u3051\u56de\u907f\u306b ensure_ascii=False \u3092\u6307\u5b9a\nprint(json.dumps(translation, indent=2, ensure_ascii=False))\n```\n\n**\u51fa\u529b\u7d50\u679c**\n\n### 6. Natural Language Classifier\n\n\u8cea\u554f\u3092\u6295\u3052\u305f\u3089\u3001\u305d\u308c\u306b\u5bfe\u3059\u308b\u56de\u7b54\u3092\u3057\u3066\u304f\u308c\u308bAPI\u3002\n\n[**DEMO**](https://natural-language-classifier-demo.mybluemix.net/)\n\n[Natural Language Classifier  - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/natural-language-classifier/api/v1/)\n\n\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n\u3042\u3089\u304b\u3058\u3081\u3001\u4f1a\u8a71\u3092\u5b66\u7fd2\u3055\u305b\u3066\u304a\u304f\u3002\u4f8b\u3048\u3070\u5929\u6c17\u4e88\u5831\u306b\u5bfe\u3059\u308b\u5fdc\u7b54\u306a\u3069\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u3042\u308bCSV\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\u307f\u308b\u3002\n\n- [weather_data_train.csv](https://github.com/watson-developer-cloud/python-sdk/blob/master/resources/weather_data_train.csv)\n\n```python\nimport json\nfrom watson_developer_cloud import NaturalLanguageClassifierV1\n\nnatural_language_classifier = NaturalLanguageClassifierV1(\n  username='',\n  password=''\n)\n\nwith open('wheater_data_train.csv', 'rb') as training_data:\n    d = natural_language_classifier.create(training_data = training_data, name='weather')\n    c_id = d[\"classifier_id\"]\n\nstatus = natural_language_classifier.status(c_id)\nprint(status) # Training \u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u9593\u306f\u3001\u5fdc\u7b54\u3057\u306a\u3044\u3002\n\nif status['status'] == 'Available':\n    classes = natural_language_classifier.classify(c_id, 'How hot will it be tomorrow?')\n    print(json.dumps(classes, indent=2))\n```\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3057\u305fclassifier\u3054\u3068\u306b`classifier_id`\u304c\u767a\u884c\u3055\u308c\u308b\u3002\n\u3053\u308c\u3092\u306b\u5bfe\u3057\u3066\u8cea\u554f\u3092\u3057\u305f\u308a\u3059\u308b\u3002\n\u307e\u305f\u3001`status`\u304c`Training`\u306e\u9593\u306f\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u4e2d\u306a\u306e\u3067\u3053\u306e\u9593\u306f\u5fdc\u7b54\u3057\u306a\u3044\u3002\n\n**\u51fa\u529b\u7d50\u679c**\n\n```python\n{\n  \"url\": \"https://gateway.watsonplatform.net/natural-language-classifier/api/v1/classifiers/xxxxxxxxxxxxx\",\n  \"classes\": [\n    {\n      \"confidence\": 0.9934488976826474,\n      \"class_name\": \"temperature\"\n    },\n    {\n      \"confidence\": 0.006551102317352602,\n      \"class_name\": \"conditions\"\n    }\n  ],\n  \"text\": \"How hot will it be tomorrow?\",\n  \"classifier_id\": \"xxxxxxxxxxxxx\",\n  \"top_class\": \"temperature\"\n}\n```\n\n**How hot will it be tomorrow?** \u306b\u5bfe\u3059\u308b\u56de\u7b54\u304c\u8fd4\u3063\u3066\u304d\u3066\u3044\u308b\u4e8b\u304c\u308f\u304b\u308b\u3002\n\n### 7. Personality Insights\n\n\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u6027\u683c\u8a3a\u65ad\u3057\u3066\u304f\u308c\u308b\u30b5\u30fc\u30d3\u30b9\u3002\uff08\u30c7\u30e2\u304c\u65e5\u672c\u8a9e\uff09\n\n[**DEMO**](https://personality-insights-livedemo.mybluemix.net/)\n\n[Personality Insights - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/personality-insights/api/v3/)\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n\u30b5\u30f3\u30d7\u30eb\u3067\u306fjson\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002\n\n[personality-v3.json](https://github.com/watson-developer-cloud/python-sdk/blob/master/resources/personality-v3.json)\n\n```python\nimport json\nfrom os.path import join, dirname\nfrom watson_developer_cloud import PersonalityInsightsV3\n\npersonality_insights = PersonalityInsightsV3(\n    version='2016-10-20',\n    username='',\n    password='')\n\nwith open(join(dirname(__file__), 'personality-v3.json')) as profile_json:\n    profile = personality_insights.profile(\n        profile_json.read(), content_type='application/json',\n        raw_scores=True, consumption_preferences=True)\n    print(json.dumps(profile, indent=2))\n```\n\n\u51fa\u529b\u7d50\u679c\u306f\u9577\u3044\u306e\u3067\u5272\u611b\u3002\u307e\u305f\u3001json\u3067\u306f\u306a\u304f\u305f\u3060\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5224\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\n\n`content_type` \u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3044\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067`text/plain`\u306b\u306a\u3063\u3066\u3044\u308b\uff09\n\n```python\npersonality_insights.profile(\"\u30c6\u30ad\u30b9\u30c8\")\n```\n\n[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/watson-developer-cloud/python-sdk/blob/master/watson_developer_cloud/personality_insights_v3.py)\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001\u30e1\u30bd\u30c3\u30c9\u306f\u6b21\u306e1\u500b\u3057\u304b\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\n```python\ndef profile(self, text, content_type='text/plain', content_language=None,\n            accept='application/json',\n            accept_language=None, raw_scores=False,\n            consumption_preferences=False, csv_headers=False):\n```\n\n\n### 8. Retrieve and Rank\n\nApache Solr + \u6a5f\u68b0\u5b66\u7fd2\u306e\u691c\u7d22\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u308c\u308b\u3084\u3064\u3002\n\n[**DEMO**](http://retrieve-and-rank-demo.mybluemix.net/rnr-demo/dist/#/)\n\n[Retrieve and Rank - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/retrieve-and-rank/api/v1/)\n\n0. RerieveAndRank\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n\n```python\nretrieve_and_rank = RetrieveAndRankV1(\n    username='',\n    password='')\n```\n\n1. Apache Solr\u30af\u30e9\u30b9\u30bf\u3092\u4f5c\u6210\u3059\u308b\n\n- Apache Solr\u30af\u30e9\u30b9\u30bf\u3092\u4f5c\u6210\u3001\n- Apache Solr\u30af\u30e9\u30b9\u30bf\u306eid\u304c\u767a\u884c\u3055\u308c\u308b\n\n```python\ncreated_cluster = retrieve_and_rank.create_solr_cluster(cluster_name='Test Cluster', cluster_size='1')\nsolr_cluster_id = \"\"\n```\n\n- \u8a2d\u5b9a\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\n\n```python\nwith open('solr_config.zip', 'rb') as config:\n    config_status = retrieve_and_rank.create_config(solr_cluster_id, 'test-config', config)\n    print(json.dumps(config_status, indent=2))\n```\n\n2. Solr\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n- \u5fdc\u7b54\u306b\u95a2\u3057\u3066\u306f[Solr\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3API](https://cwiki.apache.org/confluence/display/solr/Collections+API)\u3092\u898b\u308b\u3002\n\n```python\ncollection = retrieve_and_rank.create_collection(solr_cluster_id, 'test-collection', 'test-config')\n```\n\n3. \u691c\u7d22\u306e\u30e9\u30f3\u30ab\u30fc\u7528\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n- Ranker\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3002\n\n```python\nwith open('source/ranker_training_data.csv', 'rb') as training_data:\n    retrieve_and_rank.create_ranker(training_data=training_data, name='Ranker Test')\n```\n\n4. \u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\n\n```python\nwith open('ranker_answer_data.csv', 'rb') as answer_data:\n    ranker_results = retrieve_and_rank.rank('766366x22-rank-1804', answer_data)\n    print(json.dumps(ranker_results, indent=2))\n```\n\n### 9. Speech to Text\n\n4. \u691c\u7d22\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\n\n[Speech to Text - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/speech-to-text/api/v1/)\n\n\u5165\u529b\u3057\u305f\u97f3\u6e90\u3092\u6587\u5b57\u8d77\u3053\u3057\u3057\u3066\u304f\u308c\u308b\u3001\u3059\u3054\u304f\u4fbf\u5229\u306aAPI\u3002\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n```python\nfrom watson_developer_cloud import SpeechToTextV1\n\nspeech_to_text = SpeechToTextV1(\n    username='', # \u767a\u884c\u3055\u308c\u305f username \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    password='', # \u767a\u884c\u3055\u308c\u305f password \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    x_watson_learning_opt_out=False\n)\n\nwith open('source', 'rb') as audio_file: # \u97f3\u6e90\u3092\u53d6\u5f97\n    r = speech_to_text.recognize(\n        audio_file,                    # \u8aad\u307f\u8fbc\u3093\u3060\u3057\u305f\u97f3\u6e90\n        model=\"ja-JP_NarrowbandModel\", # \u8a00\u8a9e\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u306e\u6307\u5b9a\n        content_type='audio/flac',     # \u30b3\u30f3\u30c6\u30f3\u30c8\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\n        timestamps=True,               # \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\n        word_confidence=True\n)\n\nprint(r)\n```\n\n#### \u5bfe\u5fdc\u8a00\u8a9e\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\n\nmodel\u5f15\u6570\u306b\u306f\u3001\u8a00\u8a9e\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\uff08Broadband, Narrowband\uff09\u304c\u6307\u5b9a\u3067\u304d\u308b\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308c\u3070\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n- ar-AR_BroadbandModel\n- en-UK_BroadbandModel\n- en-UK_NarrowbandModel\n- en-US_BroadbandModel (the default)\n- en-US_NarrowbandModel\n- es-ES_BroadbandModel\n- es-ES_NarrowbandModel\n- fr-FR_BroadbandModel\n- ja-JP_BroadbandModel\n- ja-JP_NarrowbandModel\n- pt-BR_BroadbandModel\n- pt-BR_NarrowbandModel\n- zh-CN_BroadbandModel\n- zh-CN_NarrowbandModel\n\n`SpeechToTextV1` \u306e[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e30\u884c\u76ee](https://github.com/watson-developer-cloud/python-sdk/blob/master/watson_developer_cloud/speech_to_text_v1.py)\u3042\u305f\u308a\u3092\u898b\u308c\u3070\u3001\n\u7d50\u69cb\u306a\u5f15\u6570\u304c\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://www.ibm.com/watson/developercloud/speech-to-text/api/v1/)\u3092\u8aad\u307f\u306a\u304c\u3089\u9069\u5b9c\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n\n```python\ndef recognize(self, audio, content_type, continuous=False, model=None,\n                  inactivity_timeout=None,\n                  keywords=None, keywords_threshold=None,\n                  max_alternatives=None,\n                  word_alternatives_threshold=None,\n                  word_confidence=None, timestamps=None, interim_results=None,\n                  profanity_filter=None,\n                  smart_formatting=None,\n                  speaker_labels=None):\n```\n\n### 10. Text to Speech\n\n[Text to Speech - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/text-to-speech/api/v1/)\n\n\u5165\u529b\u3057\u305f\u6587\u5b57\u3092\u97f3\u58f0\u306b\u8d77\u3053\u3057\u3066\u304f\u308c\u308bAPI\u3002\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n```python\nfrom os.path import join, dirname\nfrom watson_developer_cloud import TextToSpeechV1\n\ntext_to_speech = TextToSpeechV1(\n    username='',\n    password='',\n    x_watson_learning_opt_out=True)  # Optional flag\n\nwith open(join(dirname(__file__), './output/output.wav'), 'wb') as audio_file:\n    audio_file.write(text_to_speech.synthesize('Hello world!',     # \u7b2c\u4e00\u5f15\u6570\u306b\u5165\u529b\u30c6\u30ad\u30b9\u30c8\n                                               accept='audio/wav', # \u4fdd\u5b58\u5f62\u5f0f\n                                               voice=\"en-US_AllisonVoice\")) # \u8a00\u8a9e\u3068\u97f3\u58f0\u3092\u6307\u5b9a\n```\n\n#### \u5bfe\u5fdc\u8a00\u8a9e\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\n\n- de-DE_BirgitVoice\n- de-DE_DieterVoice\n- en-GB_KateVoice\n- en-US_AllisonVoice\n- en-US_LisaVoice\n- en-US_MichaelVoice (the default)\n- es-ES_EnriqueVoice\n- es-ES_LauraVoice\n- es-LA_SofiaVoice\n- es-US_SofiaVoice\n- fr-FR_ReneeVoice\n- it-IT_FrancescaVoice\n- ja-JP_EmiVoice\n- pt-BR_IsabelaVoice\n\n\u5408\u6210\u97f3\u58f0\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9 `synthesize` \u3092[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/watson-developer-cloud/python-sdk/blob/master/watson_developer_cloud/text_to_speech_v1.py)\u3067\u78ba\u8a8d\u3057\u3066\u898b\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```python\ndef synthesize(self, text, voice=None, accept=None, customization_id=None):\n```\n\n\u307e\u305f\u3001\u30ab\u30b9\u30bf\u30e0\u30e2\u30c7\u30eb\u306f\u5c11\u3057\u3060\u3051\u89e6\u3063\u305f\u611f\u3058\u3001\u65b0\u3057\u3044\u97f3\u3092\u767b\u9332\u3059\u308b\u3001\u3068\u8a00\u3046\u3082\u306e\u3067\u306f\u306a\u3044\u3053\u3068\u3060\u3051\u306f\u306f\u3063\u304d\u308a\u3057\u305f\u3002\n\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u308b\u9650\u308a\u3001\u4f8b\u3048\u3070\u300ciPhone\u300d\u3092\u300cI Phone\u300d\u3068\u8aad\u3080\u3088\u3046\u306b\u5206\u89e3\u3057\u3066\u304a\u304f\u3068\u304b\u3001\u8868\u8a18\u3068\u767a\u97f3\u304c\u9055\u3046\u3082\u306e\u3092\u767b\u9332\u3057\u3066\u304a\u304f\u3088\u3046\u306a\u611f\u3058\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u300cIEEE\u300d\u306f\u300cI triple e\u300d\uff08\u30a2\u30a4 \u30c8\u30ea\u30d7\u30eb \u30a4\u30fc\uff09\u3068\u304b\u3002\n\n\u5177\u4f53\u7684\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u304a\u3044\u3066\u304a\u304f\u3002\n\n```python\nfrom os.path import join, dirname\nfrom watson_developer_cloud import TextToSpeechV1\n\ntext_to_speech = TextToSpeechV1(\n    username='', # \u767a\u884c\u3055\u308c\u305f username \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    password='', # \u767a\u884c\u3055\u308c\u305f password \u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n    x_watson_learning_opt_out=True) \n\nc_id = text_to_speech.create_customization('short-word', language=\"en-US\")[\"customization_id\"]\ntext_to_speech.add_customization_words(c_id, [{'word': 'IEEE', 'translation': 'I triple E'}])\n\nwith open(join(dirname(__file__), './ieee.wav'), 'wb') as audio_file:\n    audio_file.write(text_to_speech.synthesize('This is IEEE.',\n                                               accept='audio/wav',\n                                               customization_id=c_id))\n```\n\n\u51fa\u529b\u3055\u308c\u305f\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u805e\u3044\u3066\u307f\u308b\u3068\u300cI triple E\u300d\u3068\u767a\u8a00\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u805e\u304d\u53d6\u308c\u308b\u3002\n\n### 11. Tone Analyzer\n\n[Tone Analyzer - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/tone-analyzer/api/v3/)\n\n\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u304b\u3089\u611f\u60c5\u5206\u6790\u3092\u884c\u3046API\u3002\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n```python\nimport json\nfrom watson_developer_cloud import ToneAnalyzerV3\n\ntone_analyzer = ToneAnalyzerV3(\n    username='',\n    password='',\n    version='2016-02-11')\n\nprint(json.dumps(tone_analyzer.tone(text='I am very happy'), indent=2, ensure_ascii=False))\n```\n\n**\u51fa\u529b\u7d50\u679c**\n\njson\u304c\u6b21\u306e\u3088\u3046\u306b\u8fd4\u3063\u3066\u304f\u308b\u3002\n\n```json\n\"tone_categories\": [\n      {\n        \"category_id\": \"emotion_tone\",\n        \"category_name\": \"Emotion Tone\",\n        \"tones\": [\n          {\n            \"score\": 0.006169,\n            \"tone_id\": \"anger\",\n            \"tone_name\": \"Anger\"\n          },\n          {\n            \"score\": 0.008786,\n            \"tone_id\": \"disgust\",\n            \"tone_name\": \"Disgust\"\n          },\n          {\n            \"score\": 0.007084,\n            \"tone_id\": \"fear\",\n            \"tone_name\": \"Fear\"\n          },\n          {\n            \"score\": 0.973498,\n            \"tone_id\": \"joy\",\n            \"tone_name\": \"Joy\"\n          },\n          {\n            \"score\": 0.0179,\n            \"tone_id\": \"sadness\",\n            \"tone_name\": \"Sadness\"\n          }\n        ]\n      },\n      // \u4ee5\u4e0b\u7701\u7565\n```\n\n### \u8a55\u4fa1\u5185\u5bb9\n\nScore\u306f\u3064\u304e\u306e3\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306b\u5206\u985e\u3055\u308c\u3001\u3055\u3089\u306b\u30c8\u30fc\u30f3\u3054\u3068\u306b\u63a1\u70b9\u3055\u308c\u308b\u3002\n\n- Emotion Tone\n    - Anger : \u6012\u308a\n    - Disgust : \u5acc\u60aa\u611f\n    - Fear : \u6050\u6016\n    - Joy : \u559c\u3073\n    - Sadness : \u60b2\u3057\u307f\n- Writing Tone\n    - Analytical : \u5206\u6790\u7684\n    - Confident : \u81ea\u4fe1\n    - Tentative : \u81ea\u4fe1\u306a\u3055\u3052\u306a\n- Social Tone\n    - Openness : \u958b\u653e\u6027\n    - Conscientiousness : \u8aa0\u5b9f\u3055\n    - Extraversion : \u5916\u4ea4\u6027\n    - Agreeableness : \u59a5\u5f53\u6027\n    - Emotional Range : \u611f\u60c5\u7684\u306a\u7bc4\u56f2\n\n\n### 12. Tradeoff Analytics\n\n[Tradeoff Analytics - API | IBM Watson Developer Cloud](https://www.ibm.com/watson/developercloud/tradeoff-analytics/api/v1/)\n\n\u5bfe\u7acb\u6848\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u3001\u3069\u306e\u6848\u304c\u3044\u3044\u306e\u304b\u63d0\u6848\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u3082\u306e\u3002\uff08~~\u30a8\u30f4\u30a1\u306e\u30de\u30ae\u30b7\u30b9\u30c6\u30e0\u3066\u304d\u306a\u3084\u3064~~\uff09\n\n\u5b9f\u884c\u3059\u308bPython\u306e\u65b9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3002\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n```python\nimport json\nimport os\nfrom os.path import join, dirname\nfrom watson_developer_cloud import TradeoffAnalyticsV1\n\ntradeoff_analytics = TradeoffAnalyticsV1(\n    username='',\n    password='')\n\nwith open(os.path.join(os.path.dirname(__file__), 'problem.json')) as problem_json:\n    dilemma = tradeoff_analytics.dilemmas(json.load(problem_json),\n                                          generate_visualization=False)\n\nprint(json.dumps(dilemma, indent=2, ensure_ascii=False))\n```\n\n**\u51fa\u529b\u7d50\u679c**\n\n\u4f8b\u3048\u3070\u3001\u6b21\u306e \"problem.json\" \u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\n```json\n{\n  \"subject\": \"\u4f7f\u5f92\u8a0e\u4f10\u304b\u3001\u30a8\u30f4\u30a1\u6b8b\u5b58\u304b\",\n  \"columns\": [\n    {\n      \"key\": \"number_of_shito\",\n      \"type\": \"numeric\",\n      \"goal\": \"min\",\n      \"full_name\": \"\u4f7f\u5f92\u306e\u6570\",\n      \"is_objective\": true,\n      \"range\": {\n        \"low\": 0,\n        \"high\": 13\n      },\n      \"format\": \"number:0\"\n    },\n    {\n      \"key\": \"number_of_nerv_base\",\n      \"type\": \"numeric\",\n      \"goal\": \"max\",\n      \"full_name\": \"\u30cd\u30eb\u30d5\u306e\u672c\u90e8\u306e\u6570\",\n      \"range\": {\n        \"low\": 0,\n        \"high\": 1\n      },\n      \"format\": \"number:0\"\n    },\n    {\n      \"key\": \"number_of_eva\",\n      \"type\": \"numeric\",\n      \"goal\": \"max\",\n      \"full_name\": \"\u30a8\u30f4\u30a1\u306e\u6570\",\n      \"is_objective\": true,\n      \"range\": {\n        \"low\": 0,\n        \"high\": 3\n      },\n      \"format\": \"number:0\"\n    }\n  ],\n  \"options\": [\n    {\n      \"key\": \"1\",\n      \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u653e\u68c4\u3057\u3066\u4f7f\u5f92\u3092\u6e1b\u3089\u3059\u65b9\u304c\u826f\u3044\",\n      \"values\": {\n        \"number_of_shito\": 12,\n        \"number_of_nerv_base\": 0,\n        \"number_of_eva\": 3\n      }\n    },\n    {\n      \"key\": \"2\",\n      \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3068\u30a8\u30f4\u30a1\u3092\u6b8b\u3057\u3066\u4f7f\u5f92\u3092\u898b\u9003\u3059\",\n      \"values\": {\n        \"number_of_shito\": 13,\n        \"number_of_nerv_base\": 1,\n        \"number_of_eva\": 3\n      }\n    },\n    {\n      \"key\": \"3\",\n      \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u7834\u68c4\u3001\u30a8\u30f4\u30a1\u3092\u6483\u7834\u3055\u308c\u308b\u304c\u3001\u4f7f\u5f92\u30922\u4f53\u6483\u7834\",\n      \"values\": {\n        \"number_of_shito\": 11,\n        \"number_of_nerv_base\": 0,\n        \"number_of_eva\": 2\n      }\n    }\n  ]\n}\n```\n\n**\u51fa\u529b\u7d50\u679c**\n\n```json\n{\n  \"resolution\": {\n    \"solutions\": [\n      {\n        \"status\": \"FRONT\",\n        \"solution_ref\": \"1\"\n      },\n      {\n        \"status\": \"EXCLUDED\",\n        \"solution_ref\": \"2\",\n        \"excluded_by\": [\n          {\n            \"objectives\": [\n              {\n                \"key\": \"number_of_shito\",\n                \"difference\": 1.0\n              }\n            ],\n            \"solution_ref\": \"1\"\n          }\n        ]\n      },\n      {\n        \"status\": \"FRONT\",\n        \"solution_ref\": \"3\"\n      }\n    ]\n  },\n  \"problem\": {\n    \"columns\": [\n      {\n        \"key\": \"number_of_shito\",\n        \"format\": \"number:0\",\n        \"type\": \"numeric\",\n        \"range\": {\n          \"low\": 0.0,\n          \"high\": 13.0\n        },\n        \"goal\": \"min\",\n        \"is_objective\": true,\n        \"full_name\": \"\u4f7f\u5f92\u306e\u6570\"\n      },\n      {\n        \"key\": \"number_of_nerv_base\",\n        \"format\": \"number:0\",\n        \"type\": \"numeric\",\n        \"range\": {\n          \"low\": 0.0,\n          \"high\": 1.0\n        },\n        \"goal\": \"max\",\n        \"is_objective\": false,\n        \"full_name\": \"\u30cd\u30eb\u30d5\u306e\u672c\u90e8\u306e\u6570\"\n      },\n      {\n        \"key\": \"number_of_eva\",\n        \"format\": \"number:0\",\n        \"type\": \"numeric\",\n        \"range\": {\n          \"low\": 0.0,\n          \"high\": 3.0\n        },\n        \"goal\": \"max\",\n        \"is_objective\": true,\n        \"full_name\": \"\u30a8\u30f4\u30a1\u306e\u6570\"\n      }\n    ],\n    \"subject\": \"\u4f7f\u5f92\u8a0e\u4f10\u304b\u3001\u30a8\u30f4\u30a1\u6b8b\u5b58\u304b\",\n    \"options\": [\n      {\n        \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u653e\u68c4\u3057\u3066\u4f7f\u5f92\u3092\u6e1b\u3089\u3059\u65b9\u304c\u826f\u3044\",\n        \"values\": {\n          \"number_of_eva\": 3,\n          \"number_of_shito\": 12,\n          \"number_of_nerv_base\": 0\n        },\n        \"key\": \"1\"\n      },\n      {\n        \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3068\u30a8\u30f4\u30a1\u3092\u6b8b\u3057\u3066\u4f7f\u5f92\u3092\u898b\u9003\u3059\",\n        \"values\": {\n          \"number_of_eva\": 3,\n          \"number_of_shito\": 13,\n          \"number_of_nerv_base\": 1\n        },\n        \"key\": \"2\"\n      },\n      {\n        \"name\": \"\u30cd\u30eb\u30d5\u672c\u90e8\u3092\u7834\u68c4\u3001\u30a8\u30f4\u30a1\u3092\u6483\u7834\u3055\u308c\u308b\u304c\u3001\u4f7f\u5f92\u30922\u4f53\u6483\u7834\",\n        \"values\": {\n          \"number_of_eva\": 2,\n          \"number_of_shito\": 11,\n          \"number_of_nerv_base\": 0\n        },\n        \"key\": \"3\"\n      }\n    ]\n  }\n}\n```\n\n\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\n\n**FRONT(\u6700\u826f)**\n\n- \u30cd\u30eb\u30d5\u672c\u90e8\u3092\u653e\u68c4\u3057\u3066\u4f7f\u5f92\u3092\u6e1b\u3089\u3059\u65b9\u304c\u826f\u3044\n- \u30cd\u30eb\u30d5\u672c\u90e8\u3092\u7834\u68c4\u3001\u30a8\u30f4\u30a1\u3092\u6483\u7834\u3055\u308c\u308b\u304c\u3001\u4f7f\u5f92\u30922\u4f53\u6483\u7834\n\n**EXCLUDED(\u307e\u3041\u307e\u3041)**\n\n- \u30cd\u30eb\u30d5\u672c\u90e8\u3068\u30a8\u30f4\u30a1\u3092\u6b8b\u3057\u3066\u4f7f\u5f92\u3092\u898b\u9003\u3059\n\n\u3089\u3057\u3044\u306e\u3067\u3001\u4f7f\u5f92\u3068\u6226\u3044\u307e\u3057\u3087\u3046\u3002\n\n### 13. Visual Recognition\n\n- [Visual Recognition - API | IBM Watson Developer Cloud](http://www.ibm.com/watson/developercloud/visual-recognition/api/v3/)\n- [DEMO](http://visual-recognition-demo.mybluemix.net/)\n\n\u300c\u9854\u300d\u300c\u6587\u5b57\u300d\u300c\u305d\u306e\u4ed6\uff1f\u300d\u306e\u7a2e\u985e\u3067\u753b\u50cf\u8a8d\u8b58\u3092\u3059\u308bAPI\u3002\n\u3053\u306eAPI\u3060\u3051\u3001\u4ed6\u306eAPI\u3068\u9055\u3063\u3066 `api_key` \u304c\u767a\u884c\u3055\u308c\u308b\u3002\n\n**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9**\n\n```python\nimport json\nfrom os.path import join, dirname\nfrom watson_developer_cloud import VisualRecognitionV3\n\n# API Key\u3092\u5165\u529b\u3059\u308b\nvisual_recognition = VisualRecognitionV3('2016-05-20', api_key='')\n\n# \u30ed\u30fc\u30ab\u30eb\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u3046\u5834\u5408\n\n# \u4f55\u304b\u308f\u304b\u3089\u306a\u3044\u3082\u306e\u3092\u8a8d\u8b58\u3055\u305b\u305f\u3044\u6642\nwith open(join(dirname(__file__), 'nanika.png'), 'rb') as image_file:\n    print(json.dumps(visual_recognition.classify(images_file=image_file), indent=2))\n\n# \u9854\u8a8d\u8b58\nwith open('face.jpg', 'rb') as image_file:\n    print(json.dumps(visual_recognition.detect_faces(images_file=image_file), indent=2))\n\n# \u6587\u5b57\u8a8d\u8b58\nwith open('text.png', 'rb') as image_file:\n    print(json.dumps(visual_recognition.recognize_text(images_file=image_file), indent=2))\n\n# URL\u3067\u753b\u50cf\u8a8d\u8b58\u3055\u305b\u308b\u5834\u5408\nprint(json.dumps(visual_recognition.detect_faces(images_url=\"\"), indent=2))\nprint(json.dumps(visual_recognition.recognize_text(images_url=\"\"), indent=2))\n```\n\n**\u51fa\u529b\u7d50\u679c**\n\n\u4e0b\u306e\u753b\u50cf\u3092 `classify` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u8a8d\u8b58\u3055\u305b\u3066\u307f\u308b\u3002\n\n![miku.jpg](https://qiita-image-store.s3.amazonaws.com/0/49524/298b8507-25e2-9529-bdce-e9138b36bf39.jpeg)\n\n\n```json\n{\n  \"images\": [\n    {\n      \"image\": \"miku.jpg\",\n      \"classifiers\": [\n        {\n          \"classifier_id\": \"default\",\n          \"classes\": [\n            {\n              \"score\": 0.838,\n              \"class\": \"oxygen mask\",\n              \"type_hierarchy\": \"/device/oxygen mask\"\n            },\n            {\n              \"score\": 0.838,\n              \"class\": \"device\"\n            },\n            {\n              \"score\": 0.584,\n              \"class\": \"plush (fabric for toys)\"\n            },\n            {\n              \"score\": 0.584,\n              \"class\": \"fabric\"\n            },\n            {\n              \"score\": 0.554,\n              \"class\": \"mask\"\n            },\n            {\n              \"score\": 0.942,\n              \"class\": \"emerald color\"\n            }\n          ],\n          \"name\": \"default\"\n        }\n      ]\n    }\n  ],\n  \"images_processed\": 1,\n  \"custom_classes\": 0\n}\n```\n\n\u30a8\u30e1\u30e9\u30eb\u30c9\u30ab\u30e9\u30fc\u306b94%\u3068\u304b\u306f\u5206\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u300c\u9178\u7d20\u30de\u30b9\u30af\u300d\u304c\u9805\u76ee\u306b\u5165\u308b\u306e\u306f\u3061\u3087\u3063\u3068\u9a5a\u3044\u305f\u3002\n\n\u4f7f\u7528\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/watson-developer-cloud/python-sdk/blob/master/watson_developer_cloud/visual_recognition_v3.py)\n\u3067\u898b\u3066\u307f\u308b\u3068\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```python\ndef classify(self, images_file=None, images_url=None, classifier_ids=None,\n                 owners=None, threshold=None):\n```\n\n```python\ndef recognize_text(self, images_file=None, images_url=None):\n```\n\n```python\ndef detect_faces(self, images_file=None, images_url=None):\n```\n\n\u304a\u6c17\u3065\u304d\u3060\u308d\u3046\u304c\u3001[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://www.ibm.com/watson/developercloud/visual-recognition/api/v3/?python)\u306b\u306f `image_url` \u306a\u3093\u3066\u7121\u3044\u3068\u3044\u3046\u3002\n\u304d\u3063\u3068\u308f\u3056\u3068\u3060\u308d\u3046\u3002\u305d\u3046\u4fe1\u3058\u3066\u308b\u3002\n\n## \u7d42\u308f\u308a\u306b\n\nPython\u304b\u3089API\u3092\u4e00\u901a\u308a\u547c\u3073\u51fa\u3057\u3066\u307f\u305f\u611f\u3058\u3001\u65e5\u672c\u8a9e\u304c\u4ea4\u3058\u308b\u3068UnicodeError\u3042\u305f\u308a\u3067\u3044\u3061\u3044\u3061\u8e93\u304f\u306a\u3041\u3001\u3068\u3044\u3046\u5370\u8c61\u3002\n\u500b\u4eba\u7684\u306b\u30b5\u30af\u30c3\u3068\u4f7f\u3048\u305f\u306a\u30fc\u3068\u3044\u3046\u306e\u304c\u4ee5\u4e0b\u306e\u3082\u306e\u3002\n\n1. AlchemyAPI\n6. Natural Language Classifier\n7. Personality Insights\n9. Speech to Text\n10. Text to Speech\n11. Tone Analyzer\n12. Tradeoff Analytics\n13. Visual Recognition\n\n\u305d\u308c\u305e\u308c\u306e\u30b5\u30fc\u30d3\u30b9\u3067\u5b8c\u7d50\u3057\u3066\u3044\u308b\u611f\u3058\u304c\u3042\u308b\u306e\u3067\u3001APi\u3067\u547c\u3073\u51fa\u3059\u3088\u308a\u3001WEB\u3067\u3084\u3063\u305f\u307b\u3046\u304c\u697d\u3060\u308d\u3046\u306a\u3041\u3001\u3068\u3044\u3046\u306e\u304c\u4eca\u56de\u306e\u611f\u60f3\u3002\n", "tags": ["Bluemix", "python3"]}