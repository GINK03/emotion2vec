{"context": "JMockit\u306eExpectations\u306e\u5f15\u6570\u30de\u30c3\u30c1\u30f3\u30b0\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u8abf\u3079\u308b\u3068\u7d50\u69cb\u3044\u308d\u3093\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3063\u3066\u3044\u3046\u7d39\u4ecb\u3067\u3059\u3002\n\n\u524d\u63d0\u6761\u4ef6\n\u57fa\u672c\u7684\u306a\u6a5f\u80fd\u306b\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u3059\u3054\u304f\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\nJMockit\u4f7f\u3044\u65b9\u30e1\u30e2\n\u4e0a\u8a18\u306b\u8f09\u3063\u3066\u306a\u3044\u3053\u3068\u30fb\u5909\u66f4\u3055\u308c\u305f\u3053\u3068\u304c\u30e1\u30a4\u30f3\u3067\u3059\u3002\n\n\u74b0\u5883\nJMockit1.30\n\nNonStrictExpectations\u306b\u3064\u3044\u3066\nver1.25 \u3067\u524a\u9664\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nExpectations\u3067minTimes = 0\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067NonStrictExpectations\u306e\u4ee3\u308f\u308a\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u5f15\u6570\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\nLogic.java\n/**\n * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9.\n */\npublic class Logic {\n\n    // DI\n    private Hoge hoge;\n\n    // \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\n    public void main() {\n\n        UserModel user = new UserModel(\"A123\", \"\u7530\u4e2d\", 30);\n\n        String str = hoge.method(user);\n\n        ...\n    }\n}\n\n\n\nHoge.java\n/**\n * DI\u3055\u308c\u308b\u30af\u30e9\u30b9.\n */\npublic class Hoge {\n\n    public String method(UserModel user) {\n        return \"abc\";\n    }\n\n}\n\n\n\nUserModel.java\n/**\n * User\u60c5\u5831.\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserModel {\n\n    /**\n     * \u30e6\u30fc\u30b6ID.\n     */\n    private String id;\n\n    /**\n     * \u540d\u524d.\n     */\n    private String name;\n\n    /**\n     * \u5e74\u9f62.\n     */\n    private int age;\n\n}\n\n\n\u4e0a\u8a18\u3067Logic.main()\u3092\u5b9f\u884c\u3057\u305f\u969b\u306ehoge.method(UserModel)\u306e\u5f15\u6570\u306b\u3064\u3044\u3066\u691c\u8a3c\u3092\u884c\u3046\u3002\n\n\u57fa\u672c\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\nLogicTest.java\npublic class LogicTest {\n\n    @Tested\n    private Logic target;\n\n    @Injectable\n    private Hoge hoge;\n\n    @Test\n    public void \u57fa\u672c\u306e\u30de\u30c3\u30c1\u30f3\u30b0() {\n\n        // Setup\n        UserModel assume = new UserModel() {\n            {\n                setId(\"A123\");\n                setName(\"\u7530\u4e2d\");\n                setAge(30);\n            }\n        };\n\n        new Expectations() {\n            {\n                // Verify\n                hoge.method(assume);\n                times = 1;\n            }\n        };\n\n        // Exercise\n        target.main();\n\n    }\n\n\n\n\u5b9f\u884c\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u60f3\u5b9a\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7f6e\u304f\u3053\u3068\u3067\u3001\u5b9f\u884c\u6642\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u60f3\u5b9a\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092Object.equals\u3067\u6bd4\u8f03\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nlombok\u306e@Data\u3092\u5229\u7528\u3057\u305f\u5834\u5408\u3001Object.equals\u306f\u5404\u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u306e\u6bd4\u8f03\u3068\u306a\u308b\u3002\n\u4e0a\u8a18\u306e\u4f8b\u306fhoge.method(UserModel)\u306e\u5b9f\u884c\u6642\u306e\u5f15\u6570\u306e\u30e6\u30fc\u30b6\u60c5\u5831\u304cid   = A123, name = \u7530\u4e2d, \u5e74\u9f62 = 30\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n\nMatcher\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\nLogicTest.java\npublic class LogicTest {\n\n    @Tested\n    private Logic target;\n\n    @Injectable\n    private Hoge hoge;\n\n    @Test\n    public void Matcher\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0() {\n\n        new Expectations() {\n            {\n                // Verify\n                hoge.method(withArgThat(\n                    allOf(hasProperty(\"id\", is(\"A123\")), hasProperty(\"name\", is(\"\u7530\u4e2d\")))));\n                times = 1;\n            }\n        };\n\n        // Exercise\n        target.main();\n\n    }\n\n\n\n\nwithArgThat(Matcher)\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001Hamcrest \u306e Matcher \u3092\u4f7f\u3063\u3066\u5f15\u6570\u3092\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u4e0a\u8a18\u306e\u4f8b\u306fhoge.method(UserModel)\u306e\u5b9f\u884c\u6642\u306e\u5f15\u6570\u306e\u30e6\u30fc\u30b6\u60c5\u5831\u304cid   = A123, name = \u7530\u4e2d\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n\nDelegate\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\nLogicTest.java\npublic class LogicTest {\n\n    @Tested\n    private Logic target;\n\n    @Injectable\n    private Hoge hoge;\n\n    @Test\n    public void Delegate\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0() {\n\n        new Expectations() {\n            {\n                // Verify\n                hoge.method(with(new Delegate<UserModel>() {\n                    boolean delegage(UserModel user) {\n                        return user.getAge() >= 20;\n                    }\n                }));\n                times = 1;\n            }\n        };\n\n        // Exercise\n        target.main();\n\n    }\n\n\n\n\nwith(Delegate)\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u30e1\u30bd\u30c3\u30c9\u3067\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\nDelegate\u306e\u4f7f\u3044\u65b9\u306f\u30e1\u30bd\u30c3\u30c9\u52d5\u4f5c\u6307\u5b9a\u306e\u5834\u5408\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3002JMockit\u4f7f\u3044\u65b9\u30e1\u30e2\u306e[Delegate \u3092\u4f7f\u3063\u3066\u30e2\u30c3\u30af\u5316\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u52d5\u4f5c\u3092\u6307\u5b9a\u3059\u308b]\u3092\u53c2\u7167\u3002\n\u623b\u308a\u5024\u306e\u578b\u3092boolean\u306b\u3057\u3066\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3002\n\u4e0a\u8a18\u306e\u4f8b\u306fhoge.method(UserModel)\u306e\u5b9f\u884c\u6642\u306e\u5f15\u6570\u306e\u30e6\u30fc\u30b6\u60c5\u5831\u306e\u5e74\u9f62\u304c20\u4ee5\u4e0a\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n\nwithCapture\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\u5225\u306e\u4f8b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002Hoge\u3068UserModel\u306b\u3064\u3044\u3066\u306f\u524d\u56de\u3068\u540c\u3058\u3002\n\nLogic.java\n/**\n * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9.\n */\npublic class Logic {\n\n    @Inject\n    private Hoge hoge;\n\n    public void main2() {\n\n        List<UserModel> users = Arrays.asList(\n            new UserModel(\"A123\", \"\u7530\u4e2d\", 30),\n            new UserModel(\"A124\", \"\u4f50\u85e4\", 18), \n            new UserModel(\"A125\", \"\u9234\u6728\", 25));\n\n        users.stream()\n                .map(hoge::method)\n                .forEach(System.out::println);\n    }\n\n}\n\n\n\nLogicTest.java\npublic class LogicTest {\n\n    @Tested\n    private Logic target;\n\n    @Injectable\n    private Hoge hoge;\n\n    @Test\n    public void Capture\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0() {\n\n        // SetUp\n        List<UserModel> captures = new ArrayList<>();\n\n        new Expectations() {\n            {\n                hoge.method(withCapture(captures));\n                times = 3;\n            }\n        };\n\n        // Exercise\n        target.main2();\n\n        // Verify\n        assertThat(captures, hasSize(3));\n        assertThat(captures,\n            hasItem(allOf(hasProperty(\"id\", is(\"A125\")), hasProperty(\"name\", is(\"\u9234\u6728\")))));\n\n    }\n\n\n\n\nwithCapture(List)\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u5f15\u6570\u3092\u6307\u5b9a\u3057\u305f\u30ea\u30b9\u30c8\u306b\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nList\u306e\u5b9f\u88c5\u306fArrayList\u306a\u3069mutable\u306a\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u3053\u3068\u3002\n\u4e0a\u8a18\u306e\u4f8b\u306fhoge.method(UserModel)\u304c\u4e09\u56de\u5b9f\u884c\u3055\u308c\u3001\u305d\u306e\u4e2d\u3067id = A125\u304b\u3064name = \u9234\u6728\u306e\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n\n\u53c2\u8003\nJMockit\u4f7f\u3044\u65b9\u30e1\u30e2\nJMockit\u306eExpectations\u306e\u5f15\u6570\u30de\u30c3\u30c1\u30f3\u30b0\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u8abf\u3079\u308b\u3068\u7d50\u69cb\u3044\u308d\u3093\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3063\u3066\u3044\u3046\u7d39\u4ecb\u3067\u3059\u3002\n\n# \u524d\u63d0\u6761\u4ef6\n\n\u57fa\u672c\u7684\u306a\u6a5f\u80fd\u306b\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u3059\u3054\u304f\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n[JMockit\u4f7f\u3044\u65b9\u30e1\u30e2](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6)\n\u4e0a\u8a18\u306b\u8f09\u3063\u3066\u306a\u3044\u3053\u3068\u30fb\u5909\u66f4\u3055\u308c\u305f\u3053\u3068\u304c\u30e1\u30a4\u30f3\u3067\u3059\u3002\n\n# \u74b0\u5883\nJMockit1.30\n\n# NonStrictExpectations\u306b\u3064\u3044\u3066\nver1.25 \u3067\u524a\u9664\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n`Expectations`\u3067minTimes = 0\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067NonStrictExpectations\u306e\u4ee3\u308f\u308a\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n# \u5f15\u6570\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\n```java:Logic.java\n/**\n * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9.\n */\npublic class Logic {\n\n    // DI\n    private Hoge hoge;\n\n    // \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\n    public void main() {\n\n        UserModel user = new UserModel(\"A123\", \"\u7530\u4e2d\", 30);\n\n        String str = hoge.method(user);\n        \n        ...\n    }\n}\n```\n```java:Hoge.java\n/**\n * DI\u3055\u308c\u308b\u30af\u30e9\u30b9.\n */\npublic class Hoge {\n\n    public String method(UserModel user) {\n        return \"abc\";\n    }\n\n}\n```\n```java:UserModel.java\n/**\n * User\u60c5\u5831.\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserModel {\n\n    /**\n     * \u30e6\u30fc\u30b6ID.\n     */\n    private String id;\n\n    /**\n     * \u540d\u524d.\n     */\n    private String name;\n\n    /**\n     * \u5e74\u9f62.\n     */\n    private int age;\n\n}\n```\n\n\u4e0a\u8a18\u3067` Logic.main() `\u3092\u5b9f\u884c\u3057\u305f\u969b\u306e` hoge.method(UserModel) `\u306e\u5f15\u6570\u306b\u3064\u3044\u3066\u691c\u8a3c\u3092\u884c\u3046\u3002\n\n## \u57fa\u672c\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\n```java:LogicTest.java\npublic class LogicTest {\n\n    @Tested\n    private Logic target;\n\n    @Injectable\n    private Hoge hoge;\n\n    @Test\n    public void \u57fa\u672c\u306e\u30de\u30c3\u30c1\u30f3\u30b0() {\n\n        // Setup\n        UserModel assume = new UserModel() {\n            {\n                setId(\"A123\");\n                setName(\"\u7530\u4e2d\");\n                setAge(30);\n            }\n        };\n\n        new Expectations() {\n            {\n                // Verify\n                hoge.method(assume);\n                times = 1;\n            }\n        };\n\n        // Exercise\n        target.main();\n\n    }\n```\n\n- \u5b9f\u884c\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u60f3\u5b9a\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7f6e\u304f\u3053\u3068\u3067\u3001\u5b9f\u884c\u6642\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u60f3\u5b9a\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092` Object.equals `\u3067\u6bd4\u8f03\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- lombok\u306e` @Data `\u3092\u5229\u7528\u3057\u305f\u5834\u5408\u3001` Object.equals `\u306f\u5404\u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u306e\u6bd4\u8f03\u3068\u306a\u308b\u3002\n- \u4e0a\u8a18\u306e\u4f8b\u306f` hoge.method(UserModel) `\u306e\u5b9f\u884c\u6642\u306e\u5f15\u6570\u306e\u30e6\u30fc\u30b6\u60c5\u5831\u304cid   = A123, name = \u7530\u4e2d, \u5e74\u9f62 = 30\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n\n## Matcher\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\n```java:LogicTest.java\npublic class LogicTest {\n\n    @Tested\n    private Logic target;\n\n    @Injectable\n    private Hoge hoge;\n\n    @Test\n    public void Matcher\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0() {\n\n        new Expectations() {\n            {\n                // Verify\n                hoge.method(withArgThat(\n                    allOf(hasProperty(\"id\", is(\"A123\")), hasProperty(\"name\", is(\"\u7530\u4e2d\")))));\n                times = 1;\n            }\n        };\n\n        // Exercise\n        target.main();\n\n    }\n```\n\n- ` withArgThat(Matcher) `\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001Hamcrest \u306e Matcher \u3092\u4f7f\u3063\u3066\u5f15\u6570\u3092\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- \u4e0a\u8a18\u306e\u4f8b\u306f` hoge.method(UserModel) `\u306e\u5b9f\u884c\u6642\u306e\u5f15\u6570\u306e\u30e6\u30fc\u30b6\u60c5\u5831\u304cid   = A123, name = \u7530\u4e2d\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n## Delegate\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\n```java:LogicTest.java\npublic class LogicTest {\n\n    @Tested\n    private Logic target;\n\n    @Injectable\n    private Hoge hoge;\n\n    @Test\n    public void Delegate\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0() {\n\n        new Expectations() {\n            {\n                // Verify\n                hoge.method(with(new Delegate<UserModel>() {\n                    boolean delegage(UserModel user) {\n                        return user.getAge() >= 20;\n                    }\n                }));\n                times = 1;\n            }\n        };\n\n        // Exercise\n        target.main();\n\n    }\n```\n\n- ` with(Delegate) `\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u30e1\u30bd\u30c3\u30c9\u3067\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n- Delegate\u306e\u4f7f\u3044\u65b9\u306f\u30e1\u30bd\u30c3\u30c9\u52d5\u4f5c\u6307\u5b9a\u306e\u5834\u5408\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3002[JMockit\u4f7f\u3044\u65b9\u30e1\u30e2](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6)\u306e[Delegate \u3092\u4f7f\u3063\u3066\u30e2\u30c3\u30af\u5316\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u52d5\u4f5c\u3092\u6307\u5b9a\u3059\u308b]\u3092\u53c2\u7167\u3002\n- \u623b\u308a\u5024\u306e\u578b\u3092boolean\u306b\u3057\u3066\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3002\n- \u4e0a\u8a18\u306e\u4f8b\u306f` hoge.method(UserModel) `\u306e\u5b9f\u884c\u6642\u306e\u5f15\u6570\u306e\u30e6\u30fc\u30b6\u60c5\u5831\u306e\u5e74\u9f62\u304c20\u4ee5\u4e0a\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n## withCapture\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\u5225\u306e\u4f8b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002` Hoge `\u3068` UserModel `\u306b\u3064\u3044\u3066\u306f\u524d\u56de\u3068\u540c\u3058\u3002\n\n```java:Logic.java\n/**\n * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9.\n */\npublic class Logic {\n\n    @Inject\n    private Hoge hoge;\n\n    public void main2() {\n\n        List<UserModel> users = Arrays.asList(\n            new UserModel(\"A123\", \"\u7530\u4e2d\", 30),\n            new UserModel(\"A124\", \"\u4f50\u85e4\", 18), \n            new UserModel(\"A125\", \"\u9234\u6728\", 25));\n        \n        users.stream()\n                .map(hoge::method)\n                .forEach(System.out::println);\n    }\n\n}\n```\n\n```java:LogicTest.java\npublic class LogicTest {\n\n    @Tested\n    private Logic target;\n\n    @Injectable\n    private Hoge hoge;\n\n    @Test\n    public void Capture\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0() {\n\n        // SetUp\n        List<UserModel> captures = new ArrayList<>();\n\n        new Expectations() {\n            {\n                hoge.method(withCapture(captures));\n                times = 3;\n            }\n        };\n\n        // Exercise\n        target.main2();\n\n        // Verify\n        assertThat(captures, hasSize(3));\n        assertThat(captures,\n            hasItem(allOf(hasProperty(\"id\", is(\"A125\")), hasProperty(\"name\", is(\"\u9234\u6728\")))));\n\n    }\n```\n\n- ` withCapture(List) `\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u5f15\u6570\u3092\u6307\u5b9a\u3057\u305f\u30ea\u30b9\u30c8\u306b\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- List\u306e\u5b9f\u88c5\u306f` ArrayList `\u306a\u3069mutable\u306a\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u3053\u3068\u3002\n- \u4e0a\u8a18\u306e\u4f8b\u306f` hoge.method(UserModel) `\u304c\u4e09\u56de\u5b9f\u884c\u3055\u308c\u3001\u305d\u306e\u4e2d\u3067id = A125\u304b\u3064name = \u9234\u6728\u306e\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n# \u53c2\u8003\n\n[JMockit\u4f7f\u3044\u65b9\u30e1\u30e2](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6)\n", "tags": ["Java", "jMockit"]}