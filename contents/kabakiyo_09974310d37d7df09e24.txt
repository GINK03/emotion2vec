{"context": "\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u3068\u304d\u306b\u305f\u307e\u306b\u95a2\u6570\u306e\u5f15\u6570\u306e\u578b\u304c\u3092\u77e5\u308a\u305f\u3044\u3068\u304d\u304c\u3042\u308b\u306e\u3067\u30e1\u30e2\u3002\nstd::tuple\u3068std::tuple_element\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n#include <type_traits>\n#include <tuple>\n\ntemplate <std::size_t N, class...Args>\nstruct arg_type_impl\n{\n    using type = typename std::tuple_element<N, std::tuple<Args...>>::type;\n};\n\n// \u53ef\u5909\u500b\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\ntemplate <std::size_t N, class... Args>\nstruct arg_type\n{\n    using type = typename arg_type_impl<N, Args...>::type;\n};\n\n// \u95a2\u6570\ntemplate <std::size_t N, typename R, typename ... Args>\nstruct arg_type<N, R(*)(Args...)>\n{\n    using type = typename arg_type_impl<N, Args...>::type;\n};\n\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\ntemplate <std::size_t N, typename C, typename R, typename ... Args>\nstruct arg_type<N, R(C::*)(Args...)>\n{\n    using type = typename arg_type_impl<N, Args...>::type;\n};\n\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\uff08const\uff09\ntemplate <std::size_t N, typename C, typename R, typename ... Args>\nstruct arg_type<N, R(C::*)(Args...) const>\n{\n    using type = typename arg_type_impl<N, Args...>::type;\n};\n\n\n// == \u30c6\u30b9\u30c8\u7528\u306e\u95a2\u6570\u5b9a\u7fa9 ==\n// \u95a2\u6570\nstatic void hoge(int,double,int*);\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\nstruct X {\n  void hoge(int,double,int*);\n  void hoge_const(int,double,int*) const;\n};\n\n\n\n// == Test ==\n// \u53ef\u5909\u500b\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\nstatic_assert(std::is_same<int,    arg_type<0, int,double,int*>::type>::value, \"\");\nstatic_assert(std::is_same<double, arg_type<1, int,double,int*>::type>::value, \"\");\nstatic_assert(std::is_same<int*,   arg_type<2, int,double,int*>::type>::value, \"\");\n// \u95a2\u6570\nstatic_assert(std::is_same<int,    arg_type<0, decltype(&hoge)>::type>::value, \"\");\nstatic_assert(std::is_same<double, arg_type<1, decltype(&hoge)>::type>::value, \"\");\nstatic_assert(std::is_same<int*,   arg_type<2, decltype(&hoge)>::type>::value, \"\");\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\nstatic_assert(std::is_same<int,    arg_type<0, decltype(&X::hoge)>::type>::value, \"\");\nstatic_assert(std::is_same<double, arg_type<1, decltype(&X::hoge)>::type>::value, \"\");\nstatic_assert(std::is_same<int*,   arg_type<2, decltype(&X::hoge)>::type>::value, \"\");\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\uff08const\uff09\nstatic_assert(std::is_same<int,    arg_type<0, decltype(&X::hoge_const)>::type>::value, \"\");\nstatic_assert(std::is_same<double, arg_type<1, decltype(&X::hoge_const)>::type>::value, \"\");\nstatic_assert(std::is_same<int*,   arg_type<2, decltype(&X::hoge_const)>::type>::value, \"\");\n\n\n\n\n\u53c2\u8003\uff1acppreference.com:tuple_element\n\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u3068\u304d\u306b\u305f\u307e\u306b\u95a2\u6570\u306e\u5f15\u6570\u306e\u578b\u304c\u3092\u77e5\u308a\u305f\u3044\u3068\u304d\u304c\u3042\u308b\u306e\u3067\u30e1\u30e2\u3002\nstd::tuple\u3068std::tuple_element\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```cpp\n\n#include <type_traits>\n#include <tuple>\n\ntemplate <std::size_t N, class...Args>\nstruct arg_type_impl\n{\n    using type = typename std::tuple_element<N, std::tuple<Args...>>::type;\n};\n\n// \u53ef\u5909\u500b\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\ntemplate <std::size_t N, class... Args>\nstruct arg_type\n{\n    using type = typename arg_type_impl<N, Args...>::type;\n};\n\n// \u95a2\u6570\ntemplate <std::size_t N, typename R, typename ... Args>\nstruct arg_type<N, R(*)(Args...)>\n{\n    using type = typename arg_type_impl<N, Args...>::type;\n};\n\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\ntemplate <std::size_t N, typename C, typename R, typename ... Args>\nstruct arg_type<N, R(C::*)(Args...)>\n{\n    using type = typename arg_type_impl<N, Args...>::type;\n};\n\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\uff08const\uff09\ntemplate <std::size_t N, typename C, typename R, typename ... Args>\nstruct arg_type<N, R(C::*)(Args...) const>\n{\n    using type = typename arg_type_impl<N, Args...>::type;\n};\n\n\n// == \u30c6\u30b9\u30c8\u7528\u306e\u95a2\u6570\u5b9a\u7fa9 ==\n// \u95a2\u6570\nstatic void hoge(int,double,int*);\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\nstruct X {\n  void hoge(int,double,int*);\n  void hoge_const(int,double,int*) const;\n};\n\n\n\n// == Test ==\n// \u53ef\u5909\u500b\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\nstatic_assert(std::is_same<int,    arg_type<0, int,double,int*>::type>::value, \"\");\nstatic_assert(std::is_same<double, arg_type<1, int,double,int*>::type>::value, \"\");\nstatic_assert(std::is_same<int*,   arg_type<2, int,double,int*>::type>::value, \"\");\n// \u95a2\u6570\nstatic_assert(std::is_same<int,    arg_type<0, decltype(&hoge)>::type>::value, \"\");\nstatic_assert(std::is_same<double, arg_type<1, decltype(&hoge)>::type>::value, \"\");\nstatic_assert(std::is_same<int*,   arg_type<2, decltype(&hoge)>::type>::value, \"\");\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\nstatic_assert(std::is_same<int,    arg_type<0, decltype(&X::hoge)>::type>::value, \"\");\nstatic_assert(std::is_same<double, arg_type<1, decltype(&X::hoge)>::type>::value, \"\");\nstatic_assert(std::is_same<int*,   arg_type<2, decltype(&X::hoge)>::type>::value, \"\");\n// \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\uff08const\uff09\nstatic_assert(std::is_same<int,    arg_type<0, decltype(&X::hoge_const)>::type>::value, \"\");\nstatic_assert(std::is_same<double, arg_type<1, decltype(&X::hoge_const)>::type>::value, \"\");\nstatic_assert(std::is_same<int*,   arg_type<2, decltype(&X::hoge_const)>::type>::value, \"\");\n\n\n\n```\n\n\u53c2\u8003\uff1a[cppreference.com:tuple_element](http://en.cppreference.com/w/cpp/utility/tuple/tuple_element)\n", "tags": ["C++", "C++11"]}