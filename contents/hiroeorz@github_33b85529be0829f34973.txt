{"context": "keras+tensorflow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u3053\u3053\u306b\u66f8\u3044\u305f\u901a\u308a\u3002\n\u305d\u3057\u3066keras\u3067\u6df1\u5c64\u5b66\u7fd2\u306e\u52c9\u5f37\u3092\u59cb\u3081\u305f\u3082\u306e\u306e\u3001\u3069\u3046\u3082\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u514e\u306b\u89d2\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u306a\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u3084\u3063\u3066\u307f\u305f\u3002\n\u3067\u3001\u305f\u307e\u305f\u307e\u5099\u5fd8\u9332\u3068\u304b\u65e5\u5e38\u3068\u304b\u3068\u3044\u3046\u30b5\u30a4\u30c8\u3092\u898b\u3066\u308f\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001Keras\u3067\uff08\u3066\u304b\u6df1\u5c64\u5b66\u7fd2\u5168\u822c\u306a\u306e\u304b\u306a\uff1f\uff09\u5b66\u7fd2\u6642\u306b\u4e0e\u3048\u308b\u7d50\u679c\u30e9\u30d9\u30eb\u306f\u6570\u5024\u305d\u306e\u3082\u306e\u3067\u306f\u306a\u304f0\u30681\u304b\u3089\u306a\u308bnumpy\u578b\u306e\u914d\u5217\u3068\u3057\u3066\u6e21\u3057\u3001\u4e88\u6e2c\u3057\u305f\u5834\u5408\u3082\u540c\u69d8\u306b0\u30681\u304b\u3089\u306a\u308bnumpy\u578b\u306e\u914d\u5217\u3067\u7d50\u679c\u30e9\u30d9\u30eb\u304c\u5f97\u3089\u308c\u308b\u3089\u3057\u3044\u3002\u6df1\u5c64\u5b66\u7fd2\u3084\u3063\u3066\u308b\u4eba\u306b\u306f\u5e38\u8b58\u306a\u3093\u3060\u308d\u3046\u306a\u591a\u5206...\n\u305f\u3068\u3048\u3070 \u7d50\u679c\u30e9\u30d9\u30eb\u304c0\u301c3\u306e4\u7a2e\u985e\u3067\u4e0e\u3048\u3089\u308c\u308b\u5834\u5408\u3001 \n0 \u306f [1,0,0,0]\n1 \u306f [0,1,0,0]\n2 \u306f [0,0,1,0]\n3 \u306f [0,0,0,1]\n\u3066\u306a\u611f\u3058\u306a\u306e\u304b\u306a\uff1f\n\u3067\u3001\u3053\u308c\u3089\u304b\u3089\u3053\u3093\u306a\u611f\u3058\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8003\u3048\u3066\u307f\u305f\u3002\n\nkeras_test.py\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense\nfrom keras.utils.np_utils import to_categorical\nimport numpy as np\n\n# \u5b66\u7fd2\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u3002\n# \u4eca\u56de\u3001X\u306f[0,0]\u307e\u305f\u306f[1,1]\u306e2\u7a2e\u985e\u3002\n# Y\u306f0\u307e\u305f\u306f1\u306e2\u7a2e\u985e\n# X:[0,0] => Y:0\n# X:[1,1] => Y:1\n# \u3068\u3044\u3046\u5bfe\u5fdc\u306b\u306a\u3063\u3066\u3044\u308b\nX_list = [[0, 0], [1, 1], [0, 0], [1, 1], [1, 1], [1, 1]]\nY_list = [0, 1, 0, 1, 1, 1]\n\n# keras\u306emodel\u306b\u6e21\u3059\u524d\u306bX\u3092numpy\u306earray\u306b\u5909\u63db\u3059\u308b\u3002\nX = np.array(X_list)\n\n# Y\u306e\u5404\u8981\u7d20\u30920\u30681\u304b\u3089\u306a\u308b\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3059\u308b\u3002\n# 0\u306f0\u756a\u76ee\u306e\u8981\u7d20\u306e\u307f1\u3067\u4ed6\u306f0\u306e\u914d\u5217: [1,0]\n# 1\u306f1\u756a\u76ee\u306e\u8981\u7d20\u306e\u307f1\u3067\u4ed6\u306f0\u306e\u914d\u5217: [0,1]\n# \u306b\u5909\u63db\u3055\u308c\u308b\u3002\n# \u3059\u306a\u308f\u3061\n# [0, 1, 0, 1, 1, 1] => [[1,0], [0,1], [1,0], [0,1], [0,1], [0,1]]\n# \u306b\u5909\u63db\u3055\u308c\u308b\u3002 \nY = to_categorical(Y_list)\n\n# \u5b66\u7fd2\u306e\u305f\u3081\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\nmodel = Sequential()\n# \u5168\u7d50\u5408\u5c64(2\u5c64->10\u5c64)\nmodel.add(Dense(input_dim=2, output_dim=10))\n# \u6d3b\u6027\u5316\u95a2\u6570(ReLu\u95a2\u6570)\nmodel.add(Activation(\"relu\"))\n# \u5168\u7d50\u5408\u5c64(10\u5c64->2\u5c64)\nmodel.add(Dense(output_dim=2))\n# \u6d3b\u6027\u5316\u95a2\u6570(softmax\u95a2\u6570)\nmodel.add(Activation(\"softmax\"))\n# \u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"sgd\", metrics=[\"accuracy\"])\n# \u5b66\u7fd2\u3092\u5b9f\u884c\nmodel.fit(X, Y, nb_epoch=3000, batch_size=32)\n\n# \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\u3002\n# [1,1]=> 1([0,1]) 1\u756a\u76ee\u306e\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\n# [0,0]=> 0([1,0]) 0\u756a\u76ee\u306e\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\n# \u3068\u3044\u3046\u4e88\u6e2c\u306b\u306a\u308b\u306f\u305a...\nresults = model.predict_proba(np.array([[1, 1], [0, 0]]))\n# \u7d50\u679c\u3092\u8868\u793a\nprint(\"Predict:\\n\", results)\n\n\n\n\u3082\u306f\u3084\u6df1\u5c64\u5b66\u7fd2\u3092\u4f7f\u3046\u610f\u5473\u306a\u3069\u5168\u304f\u306a\u3044\u4f8b\u3067\u3059\u304c... \u3082\u3063\u3068\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u306a\u3044\u3068\u30b5\u30c3\u30d1\u30ea\u308f\u304b\u3089\u306a\u3044\u30bf\u30c1\u306a\u306e\u3067...\n\u3067\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u306e\u51fa\u529b\u306f\nPredict:\n [[ 0.00399919  0.99600083]\n [ 0.93204987  0.06795016]]\n\n\u51fa\u529b\u3055\u308c\u305f\u4e88\u6e2c\u7d50\u679c\u3092\u56db\u6368\u4e94\u5165\u3057\u3066int\u306b\u3059\u308b\u3068\n[ 0.00399919  0.99600083] \u306f [0, 1] \u3059\u306a\u308f\u3061 1\n\n[ 0.93204987  0.06795016] \u306f [1, 0] \u3059\u306a\u308f\u3061 0\n\n\u3067\u3042\u308a\u3001\u4e88\u6e2c\u306e\u969b\u306b\u308f\u305f\u3057\u305fX\u306e\u30ea\u30b9\u30c8\nresults = model.predict_proba(np.array([[1, 1], [0, 0]]))\n\n\u3068\u6bd4\u8f03\u3059\u308b\u3068\n[1,1] -> 1\n[0,0] -> 0\n\n\u3068\u306a\u308a\u3001\u3061\u3083\u3093\u3068\u5b66\u7fd2\u3067\u304d\u305f\u3063\u307d\u3044\u3067\u3059\u3002\n\u3046\u30fc\u3093\u3001\u308f\u304b\u3063\u305f\u3088\u3046\u306a\u308f\u304b\u3089\u3093\u3088\u3046\u306a\u3002\u3053\u3046\u3044\u3046\u8003\u3048\u65b9\u3067\u3042\u3063\u3066\u308b\u306e\u3067\u3059\u304b\u306d\u3048\u3002\n\n2/6\u8ffd\u8a18:\n\u3069\u3046\u3082\u3001 \u5b66\u7fd2\u6642\u306b\u6e21\u3059\u76ee\u7684\u95a2\u6570\u304c categorical_crossentropy \u306e\u5834\u5408\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306b0\u30681\u304b\u3089\u306a\u308b\u914d\u5217\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3001 binary_crossentropy \u306e\u5834\u5408\u306f\u305d\u3093\u306a\u3053\u3068\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\u3067\u3001\u66f8\u304d\u76f4\u3057\u3066\u898b\u305f\u30b3\u30fc\u30c9\u3002\n\ntest2.py\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense\nimport numpy as np\n\n# \u5b66\u7fd2\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u3002\n# \u4eca\u56de\u3001X\u306f[0,0]\u307e\u305f\u306f[1,1]\u306e2\u7a2e\u985e\u3002\n# Y\u306f0\u307e\u305f\u306f1\u306e2\u7a2e\u985e\n# X:[0,0] => Y:0\n# X:[1,1] => Y:1\n# \u3068\u3044\u3046\u5bfe\u5fdc\u306b\u306a\u3063\u3066\u3044\u308b\nX_list = [[0, 0], [1, 1], [0, 0], [1, 1], [1, 1], [1, 1]]\nY_list = [   [0],    [1],    [0],    [1],    [1],    [1]]\n\n# keras\u306emodel\u306b\u6e21\u3059\u524d\u306bX,Y\u3092numpy\u306earray\u306b\u5909\u63db\u3059\u308b\u3002\nX = np.array(X_list)\nY = np.array(Y_list)\n\n# \u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\nmodel = Sequential()\n# \u5168\u7d50\u5408\u5c64(2\u5c64->10\u5c64)\nmodel.add(Dense(input_dim=2, output_dim=10))\n# \u6d3b\u6027\u5316\u95a2\u6570(tanh\u95a2\u6570)\nmodel.add(Activation(\"tanh\"))\n\n# \u5168\u7d50\u5408\u5c64(10\u5c64->2\u5c64)\nmodel.add(Dense(output_dim=1))\n# \u6d3b\u6027\u5316\u95a2\u6570(sigmoid\u95a2\u6570)\nmodel.add(Activation(\"sigmoid\"))\n\n# \u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"sgd\", metrics=[\"accuracy\"])\n# \u5b66\u7fd2\u3092\u5b9f\u884c\nmodel.fit(X, Y, nb_epoch=3000, batch_size=32)\n\n# \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\u3002\n# [1,1]=> 1\n# [0,0]=> 0\n# \u3068\u3044\u3046\u4e88\u6e2c\u306b\u306a\u308b\u306f\u305a...\nresults = model.predict_proba(np.array([[1, 1], [0, 0]]))\n# \u7d50\u679c\u3092\u8868\u793a\nprint(\"Predict:\\n\", results)\n\n\n\u51fa\u529b\u306f\nEpoch 3000/3000\n6/6 [==============================] - 0s - loss: 0.0156 - acc: 1.0000\n2/2 [==============================] - 0s\nPredict:\n [[ 0.99064612]\n [ 0.02768313]]\n\n\u3066\u306a\u611f\u3058\u306b\u306a\u308a\u3001\u304a\u304a\u3088\u305d\n# [1,1]=> 1\n# [0,0]=> 0\n\n\u3066\u306a\u611f\u3058\u306b\u6b63\u3057\u304f\u63a8\u6e2c\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\nkeras+tensorflow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f[\u3053\u3053](http://qiita.com/hiroeorz@github/items/9b12bdf76f0e8c705305)\u306b\u66f8\u3044\u305f\u901a\u308a\u3002\n\n\u305d\u3057\u3066keras\u3067\u6df1\u5c64\u5b66\u7fd2\u306e\u52c9\u5f37\u3092\u59cb\u3081\u305f\u3082\u306e\u306e\u3001\u3069\u3046\u3082\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u514e\u306b\u89d2\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u306a\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u3084\u3063\u3066\u307f\u305f\u3002\n\n\u3067\u3001\u305f\u307e\u305f\u307e[\u5099\u5fd8\u9332\u3068\u304b\u65e5\u5e38\u3068\u304b](http://may46onez.hatenablog.com/entry/2016/07/14/122047)\u3068\u3044\u3046\u30b5\u30a4\u30c8\u3092\u898b\u3066\u308f\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001Keras\u3067\uff08\u3066\u304b\u6df1\u5c64\u5b66\u7fd2\u5168\u822c\u306a\u306e\u304b\u306a\uff1f\uff09\u5b66\u7fd2\u6642\u306b\u4e0e\u3048\u308b\u7d50\u679c\u30e9\u30d9\u30eb\u306f\u6570\u5024\u305d\u306e\u3082\u306e\u3067\u306f\u306a\u304f0\u30681\u304b\u3089\u306a\u308bnumpy\u578b\u306e\u914d\u5217\u3068\u3057\u3066\u6e21\u3057\u3001\u4e88\u6e2c\u3057\u305f\u5834\u5408\u3082\u540c\u69d8\u306b0\u30681\u304b\u3089\u306a\u308bnumpy\u578b\u306e\u914d\u5217\u3067\u7d50\u679c\u30e9\u30d9\u30eb\u304c\u5f97\u3089\u308c\u308b\u3089\u3057\u3044\u3002\u6df1\u5c64\u5b66\u7fd2\u3084\u3063\u3066\u308b\u4eba\u306b\u306f\u5e38\u8b58\u306a\u3093\u3060\u308d\u3046\u306a\u591a\u5206...\n\n\u305f\u3068\u3048\u3070 \u7d50\u679c\u30e9\u30d9\u30eb\u304c0\u301c3\u306e4\u7a2e\u985e\u3067\u4e0e\u3048\u3089\u308c\u308b\u5834\u5408\u3001 \n\n`0 \u306f [1,0,0,0]`\n`1 \u306f [0,1,0,0]`\n`2 \u306f [0,0,1,0]`\n`3 \u306f [0,0,0,1]`\n\n\u3066\u306a\u611f\u3058\u306a\u306e\u304b\u306a\uff1f\n\n\u3067\u3001\u3053\u308c\u3089\u304b\u3089\u3053\u3093\u306a\u611f\u3058\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8003\u3048\u3066\u307f\u305f\u3002\n\n```python:keras_test.py\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense\nfrom keras.utils.np_utils import to_categorical\nimport numpy as np\n\n# \u5b66\u7fd2\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u3002\n# \u4eca\u56de\u3001X\u306f[0,0]\u307e\u305f\u306f[1,1]\u306e2\u7a2e\u985e\u3002\n# Y\u306f0\u307e\u305f\u306f1\u306e2\u7a2e\u985e\n# X:[0,0] => Y:0\n# X:[1,1] => Y:1\n# \u3068\u3044\u3046\u5bfe\u5fdc\u306b\u306a\u3063\u3066\u3044\u308b\nX_list = [[0, 0], [1, 1], [0, 0], [1, 1], [1, 1], [1, 1]]\nY_list = [0, 1, 0, 1, 1, 1]\n\n# keras\u306emodel\u306b\u6e21\u3059\u524d\u306bX\u3092numpy\u306earray\u306b\u5909\u63db\u3059\u308b\u3002\nX = np.array(X_list)\n\n# Y\u306e\u5404\u8981\u7d20\u30920\u30681\u304b\u3089\u306a\u308b\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3059\u308b\u3002\n# 0\u306f0\u756a\u76ee\u306e\u8981\u7d20\u306e\u307f1\u3067\u4ed6\u306f0\u306e\u914d\u5217: [1,0]\n# 1\u306f1\u756a\u76ee\u306e\u8981\u7d20\u306e\u307f1\u3067\u4ed6\u306f0\u306e\u914d\u5217: [0,1]\n# \u306b\u5909\u63db\u3055\u308c\u308b\u3002\n# \u3059\u306a\u308f\u3061\n# [0, 1, 0, 1, 1, 1] => [[1,0], [0,1], [1,0], [0,1], [0,1], [0,1]]\n# \u306b\u5909\u63db\u3055\u308c\u308b\u3002 \nY = to_categorical(Y_list)\n\n# \u5b66\u7fd2\u306e\u305f\u3081\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\nmodel = Sequential()\n# \u5168\u7d50\u5408\u5c64(2\u5c64->10\u5c64)\nmodel.add(Dense(input_dim=2, output_dim=10))\n# \u6d3b\u6027\u5316\u95a2\u6570(ReLu\u95a2\u6570)\nmodel.add(Activation(\"relu\"))\n# \u5168\u7d50\u5408\u5c64(10\u5c64->2\u5c64)\nmodel.add(Dense(output_dim=2))\n# \u6d3b\u6027\u5316\u95a2\u6570(softmax\u95a2\u6570)\nmodel.add(Activation(\"softmax\"))\n# \u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"sgd\", metrics=[\"accuracy\"])\n# \u5b66\u7fd2\u3092\u5b9f\u884c\nmodel.fit(X, Y, nb_epoch=3000, batch_size=32)\n\n# \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\u3002\n# [1,1]=> 1([0,1]) 1\u756a\u76ee\u306e\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\n# [0,0]=> 0([1,0]) 0\u756a\u76ee\u306e\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\n# \u3068\u3044\u3046\u4e88\u6e2c\u306b\u306a\u308b\u306f\u305a...\nresults = model.predict_proba(np.array([[1, 1], [0, 0]]))\n# \u7d50\u679c\u3092\u8868\u793a\nprint(\"Predict:\\n\", results)\n\n```\n\n\u3082\u306f\u3084\u6df1\u5c64\u5b66\u7fd2\u3092\u4f7f\u3046\u610f\u5473\u306a\u3069\u5168\u304f\u306a\u3044\u4f8b\u3067\u3059\u304c... \u3082\u3063\u3068\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u306a\u3044\u3068\u30b5\u30c3\u30d1\u30ea\u308f\u304b\u3089\u306a\u3044\u30bf\u30c1\u306a\u306e\u3067...\n\n\u3067\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u306e\u51fa\u529b\u306f\n\n```\nPredict:\n [[ 0.00399919  0.99600083]\n [ 0.93204987  0.06795016]]\n```\n\n\u51fa\u529b\u3055\u308c\u305f\u4e88\u6e2c\u7d50\u679c\u3092\u56db\u6368\u4e94\u5165\u3057\u3066int\u306b\u3059\u308b\u3068\n\n```\n[ 0.00399919  0.99600083] \u306f [0, 1] \u3059\u306a\u308f\u3061 1\n```\n\n```\n[ 0.93204987  0.06795016] \u306f [1, 0] \u3059\u306a\u308f\u3061 0\n```\n\n\u3067\u3042\u308a\u3001\u4e88\u6e2c\u306e\u969b\u306b\u308f\u305f\u3057\u305fX\u306e\u30ea\u30b9\u30c8\n\n```\nresults = model.predict_proba(np.array([[1, 1], [0, 0]]))\n```\n\n\u3068\u6bd4\u8f03\u3059\u308b\u3068\n\n```\n[1,1] -> 1\n[0,0] -> 0\n```\n\n\u3068\u306a\u308a\u3001\u3061\u3083\u3093\u3068\u5b66\u7fd2\u3067\u304d\u305f\u3063\u307d\u3044\u3067\u3059\u3002\n\u3046\u30fc\u3093\u3001\u308f\u304b\u3063\u305f\u3088\u3046\u306a\u308f\u304b\u3089\u3093\u3088\u3046\u306a\u3002\u3053\u3046\u3044\u3046\u8003\u3048\u65b9\u3067\u3042\u3063\u3066\u308b\u306e\u3067\u3059\u304b\u306d\u3048\u3002\n\n## 2/6\u8ffd\u8a18:\n\u3069\u3046\u3082\u3001 \u5b66\u7fd2\u6642\u306b\u6e21\u3059\u76ee\u7684\u95a2\u6570\u304c `categorical_crossentropy` \u306e\u5834\u5408\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306b0\u30681\u304b\u3089\u306a\u308b\u914d\u5217\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3001 `binary_crossentropy` \u306e\u5834\u5408\u306f\u305d\u3093\u306a\u3053\u3068\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u3067\u3001\u66f8\u304d\u76f4\u3057\u3066\u898b\u305f\u30b3\u30fc\u30c9\u3002\n\n```python:test2.py\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense\nimport numpy as np\n\n# \u5b66\u7fd2\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u3002\n# \u4eca\u56de\u3001X\u306f[0,0]\u307e\u305f\u306f[1,1]\u306e2\u7a2e\u985e\u3002\n# Y\u306f0\u307e\u305f\u306f1\u306e2\u7a2e\u985e\n# X:[0,0] => Y:0\n# X:[1,1] => Y:1\n# \u3068\u3044\u3046\u5bfe\u5fdc\u306b\u306a\u3063\u3066\u3044\u308b\nX_list = [[0, 0], [1, 1], [0, 0], [1, 1], [1, 1], [1, 1]]\nY_list = [   [0],    [1],    [0],    [1],    [1],    [1]]\n\n# keras\u306emodel\u306b\u6e21\u3059\u524d\u306bX,Y\u3092numpy\u306earray\u306b\u5909\u63db\u3059\u308b\u3002\nX = np.array(X_list)\nY = np.array(Y_list)\n\n# \u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\nmodel = Sequential()\n# \u5168\u7d50\u5408\u5c64(2\u5c64->10\u5c64)\nmodel.add(Dense(input_dim=2, output_dim=10))\n# \u6d3b\u6027\u5316\u95a2\u6570(tanh\u95a2\u6570)\nmodel.add(Activation(\"tanh\"))\n\n# \u5168\u7d50\u5408\u5c64(10\u5c64->2\u5c64)\nmodel.add(Dense(output_dim=1))\n# \u6d3b\u6027\u5316\u95a2\u6570(sigmoid\u95a2\u6570)\nmodel.add(Activation(\"sigmoid\"))\n\n# \u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"sgd\", metrics=[\"accuracy\"])\n# \u5b66\u7fd2\u3092\u5b9f\u884c\nmodel.fit(X, Y, nb_epoch=3000, batch_size=32)\n\n# \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\u3002\n# [1,1]=> 1\n# [0,0]=> 0\n# \u3068\u3044\u3046\u4e88\u6e2c\u306b\u306a\u308b\u306f\u305a...\nresults = model.predict_proba(np.array([[1, 1], [0, 0]]))\n# \u7d50\u679c\u3092\u8868\u793a\nprint(\"Predict:\\n\", results)\n```\n\n\u51fa\u529b\u306f\n\n```\nEpoch 3000/3000\n6/6 [==============================] - 0s - loss: 0.0156 - acc: 1.0000\n2/2 [==============================] - 0s\nPredict:\n [[ 0.99064612]\n [ 0.02768313]]\n```\n\n\u3066\u306a\u611f\u3058\u306b\u306a\u308a\u3001\u304a\u304a\u3088\u305d\n\n```\n# [1,1]=> 1\n# [0,0]=> 0\n```\n\n\u3066\u306a\u611f\u3058\u306b\u6b63\u3057\u304f\u63a8\u6e2c\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n", "tags": ["Keras", "\u6df1\u5c64\u5b66\u7fd2"]}