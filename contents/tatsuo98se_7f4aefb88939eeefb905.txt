{"tags": ["Python", "yhpg"], "context": "\u300c\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f E12 \u306e\u554f\u984c - \u7a4d\u3080\u3051\u3069\u6d88\u3048\u306a\u3044\u300d\u306e\u89e3\u7b54\nhttp://mtsmfm.github.io/2017/03/04/doukaku-e12.html\n\u601d\u800320\u5206\u3001\u5b9f\u88c51\u6642\u9593\n\u53c2\u52a0\u3057\u3066\u305f\u3089\u9593\u306b\u5408\u3063\u3066\u306a\u304b\u3063\u305f\u3002\u3002\u3002\u3002\n\nmain.py\n\n\nimport re\nimport numpy as np\n\nclass Result:\n    def __init__(self):\n        self.success = 0\n        self.fail = 0\n\nclass Block:\n    def __init__(self, left, bottom_lines, heights):\n        self.left = int(left)\n        self.bottom_lines = bottom_lines\n        self.heights = heights\n        self.height = np.max(self.heights)\n        self.width = np.size(self.heights)\n\nclass IBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [0], [4])\n\nclass LBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [0, 0], [3,1])\n\nclass OBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [0,0],[2,2])\n\nclass SBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [0,0,-1],[1,2,2])\n\nclass TBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [-1,0,-1],[2,2,2])\n\nclass Space:\n    def __init__(self):\n        self.lines = np.zeros(10)\n\n    def stack(self, block):\n        if np.size(self.lines) < (block.left + block.width):\n            self.lines.resize((block.left + block.width), refcheck=False)\n\n        self.lines[block.left : block.left + block.width] += block.bottom_lines\n        self.lines[block.left : block.left + block.width] = np.max(self.lines[block.left : block.left + block.width] )\n        self.lines[block.left : block.left + block.width] += block.heights\n\n    def get_height(self):\n        return np.max(self.lines)\n\nblocks = { 'I': IBlock,\n           'L': LBlock,\n           'O': OBlock,\n           'S': SBlock,\n           'T': TBlock,\n         }\n\ndef create_block(left, shape):\n    return blocks[shape](left)\n\ndef solve(data):\n    space = Space()\n    blockTypes = np.array([re.findall(\"[0-9]+\", data), re.findall(\"[A-Z]+\", data)])\n    blockTypes = blockTypes.transpose()\n\n    for blockType in blockTypes:\n        space.stack(create_block(blockType[0], blockType[1]))\n\n    return space.get_height()\n\nresult = Result()\nresult.success = result.fail = 0\n\ndef test(src, expected):\n    if solve(src) == int(expected):\n        result.success += 1\n    else:\n        result.fail += 1\n\ntest(\"1O3L0I0T\", \"5\")\ntest(\"0I\", \"4\")\ntest(\"0I0I\", \"8\")\ntest(\"0I1I2I3I4I\", \"4\")\ntest(\"0S0I\", \"5\")\ntest(\"0I0S\", \"6\")\ntest(\"2S0T2O3I\", \"8\")\ntest(\"4O4T1T0S4L1L3L\", \"10\")\ntest(\"0S2S4S6S8S10S12S14S\", \"16\")\ntest(\"14S12S10S8S6S4S2S0S\", \"2\")\ntest(\"5I2O10I0O4L10T9T11L8I2I10I12O7L12T12T12S11T9O10O13I12O10O7I9I7O0S1O2S0L1L\", \"23\")\ntest(\"9T14L10L8T4I1T3S5I8T12O3S7L9O7L14T2I7O3S6S2L0L13T10O4I9T7L8S0I12O9S11L11T14T\", \"27\")\ntest(\"9S9S7O11O16I2T9O12L10T9O0O13I9O1I2T14S7O9S11T5L7I14T13O0T12I3S10L10O7I15I6S2L12S8I16I3L\", \"23\")\ntest(\"11T13I16S15T7O10L12S1I5I8S5I13I15O8S9I1T12I1S5S0L14I12L16T2S2S8L2S14L16O4I13L15L13S11S9T13S9S3L6O\", \"22\")\ntest(\"12L10S7I5L14T12S9L1T14I0I5L1T2O18T9L0I15I16L10S1O15I0L17O5L18T4I18L7L7I13I3I12I2S3T5T3S16L14S14O11O15T14S\", \"17\")\ntest(\"0S18S2S19I14T7L14L2L6I9I0L4I5L13L15I8S8T2I5I7O18T3S1T7I2L8O0S20T9I14T5L5I1T4L9O8T19T5S12O16T19L4O10O10T14L\", \"24\")\ntest(\"7T5L6S4S8T6S10I19O20L14I18L21S7I11S11O1L13T20O9I7L2T8L2S20L3O14L9T17I8L8S14I6T2O11T21O18O6T15T1S3L6O19S18O20S19O16T6S14T\", \"26\")\ntest(\"18S2I4S16L13S17I21O8I17T8I14O12T20I20S19S16S13T12T20I22I15O2I2I8I2S18I9I9T6O13O13L17I2L20L2L4I9I19O11T3S10O2S18T12I5O11S19O21S6I17T17S\", \"26\")\ntest(\"11L5S0T22S18O13T2O22S15I12I21T16I3I1I22L11L11L22O13S24S15L13T15S19L10O15T7S24T19L0T13O11I12T13S4I24L15O3S19O10L19O0S20L7O11L21I22S18T19T23O8I22S24L0S\", \"21\")\ntest(\"7L7I11T7S18O17L8S15L9I3O24S3O1O5O14L9T13S2O25S22T10T8L24S18S13T1O1L6I10I4S13O3S7L10T1T4L17S20I18O15S25S23S21I19T6O24S9L2O2O15L12L8L8O18I18L0T5O\", \"31\")\ntest(\"999I999I999I999I999I999I999I999I999I999I999I\", \"44\")\n\nprint(\"Success: {0.success}, Fail: {0.fail}\".format(result))\n\n\n\u300c\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f E12 \u306e\u554f\u984c - \u7a4d\u3080\u3051\u3069\u6d88\u3048\u306a\u3044\u300d\u306e\u89e3\u7b54\nhttp://mtsmfm.github.io/2017/03/04/doukaku-e12.html\n\n\u601d\u800320\u5206\u3001\u5b9f\u88c51\u6642\u9593\n\u53c2\u52a0\u3057\u3066\u305f\u3089\u9593\u306b\u5408\u3063\u3066\u306a\u304b\u3063\u305f\u3002\u3002\u3002\u3002\n\n```python:main.py\n\n\nimport re\nimport numpy as np\n\nclass Result:\n    def __init__(self):\n        self.success = 0\n        self.fail = 0\n\nclass Block:\n    def __init__(self, left, bottom_lines, heights):\n        self.left = int(left)\n        self.bottom_lines = bottom_lines\n        self.heights = heights\n        self.height = np.max(self.heights)\n        self.width = np.size(self.heights)\n\nclass IBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [0], [4])\n\nclass LBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [0, 0], [3,1])\n\nclass OBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [0,0],[2,2])\n\nclass SBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [0,0,-1],[1,2,2])\n\nclass TBlock(Block):\n    def __init__(self, left):\n        super().__init__(left, [-1,0,-1],[2,2,2])\n\nclass Space:\n    def __init__(self):\n        self.lines = np.zeros(10)\n\n    def stack(self, block):\n        if np.size(self.lines) < (block.left + block.width):\n            self.lines.resize((block.left + block.width), refcheck=False)\n        \n        self.lines[block.left : block.left + block.width] += block.bottom_lines\n        self.lines[block.left : block.left + block.width] = np.max(self.lines[block.left : block.left + block.width] )\n        self.lines[block.left : block.left + block.width] += block.heights\n\n    def get_height(self):\n        return np.max(self.lines)\n\nblocks = { 'I': IBlock,\n           'L': LBlock,\n           'O': OBlock,\n           'S': SBlock,\n           'T': TBlock,\n         }\n\ndef create_block(left, shape):\n    return blocks[shape](left)\n\ndef solve(data):\n    space = Space()\n    blockTypes = np.array([re.findall(\"[0-9]+\", data), re.findall(\"[A-Z]+\", data)])\n    blockTypes = blockTypes.transpose()\n\n    for blockType in blockTypes:\n        space.stack(create_block(blockType[0], blockType[1]))\n\n    return space.get_height()\n\nresult = Result()\nresult.success = result.fail = 0\n\ndef test(src, expected):\n    if solve(src) == int(expected):\n        result.success += 1\n    else:\n        result.fail += 1\n\ntest(\"1O3L0I0T\", \"5\")\ntest(\"0I\", \"4\")\ntest(\"0I0I\", \"8\")\ntest(\"0I1I2I3I4I\", \"4\")\ntest(\"0S0I\", \"5\")\ntest(\"0I0S\", \"6\")\ntest(\"2S0T2O3I\", \"8\")\ntest(\"4O4T1T0S4L1L3L\", \"10\")\ntest(\"0S2S4S6S8S10S12S14S\", \"16\")\ntest(\"14S12S10S8S6S4S2S0S\", \"2\")\ntest(\"5I2O10I0O4L10T9T11L8I2I10I12O7L12T12T12S11T9O10O13I12O10O7I9I7O0S1O2S0L1L\", \"23\")\ntest(\"9T14L10L8T4I1T3S5I8T12O3S7L9O7L14T2I7O3S6S2L0L13T10O4I9T7L8S0I12O9S11L11T14T\", \"27\")\ntest(\"9S9S7O11O16I2T9O12L10T9O0O13I9O1I2T14S7O9S11T5L7I14T13O0T12I3S10L10O7I15I6S2L12S8I16I3L\", \"23\")\ntest(\"11T13I16S15T7O10L12S1I5I8S5I13I15O8S9I1T12I1S5S0L14I12L16T2S2S8L2S14L16O4I13L15L13S11S9T13S9S3L6O\", \"22\")\ntest(\"12L10S7I5L14T12S9L1T14I0I5L1T2O18T9L0I15I16L10S1O15I0L17O5L18T4I18L7L7I13I3I12I2S3T5T3S16L14S14O11O15T14S\", \"17\")\ntest(\"0S18S2S19I14T7L14L2L6I9I0L4I5L13L15I8S8T2I5I7O18T3S1T7I2L8O0S20T9I14T5L5I1T4L9O8T19T5S12O16T19L4O10O10T14L\", \"24\")\ntest(\"7T5L6S4S8T6S10I19O20L14I18L21S7I11S11O1L13T20O9I7L2T8L2S20L3O14L9T17I8L8S14I6T2O11T21O18O6T15T1S3L6O19S18O20S19O16T6S14T\", \"26\")\ntest(\"18S2I4S16L13S17I21O8I17T8I14O12T20I20S19S16S13T12T20I22I15O2I2I8I2S18I9I9T6O13O13L17I2L20L2L4I9I19O11T3S10O2S18T12I5O11S19O21S6I17T17S\", \"26\")\ntest(\"11L5S0T22S18O13T2O22S15I12I21T16I3I1I22L11L11L22O13S24S15L13T15S19L10O15T7S24T19L0T13O11I12T13S4I24L15O3S19O10L19O0S20L7O11L21I22S18T19T23O8I22S24L0S\", \"21\")\ntest(\"7L7I11T7S18O17L8S15L9I3O24S3O1O5O14L9T13S2O25S22T10T8L24S18S13T1O1L6I10I4S13O3S7L10T1T4L17S20I18O15S25S23S21I19T6O24S9L2O2O15L12L8L8O18I18L0T5O\", \"31\")\ntest(\"999I999I999I999I999I999I999I999I999I999I999I\", \"44\")\n\nprint(\"Success: {0.success}, Fail: {0.fail}\".format(result))\n```\n"}