{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\n\u300c\u30b0\u30e9\u30d5\u306e\u9023\u7d50\u6210\u5206\u300d\u3092\u6c42\u3081\u308b\u30b3\u30fc\u30c9\u3092 JavaScript \u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n$ js connected_components.js\n[ 0,1,2,3,4,6 ]\n[ 5,7 ]\n\n\nconnected_components.js\nvar graph = {\"0\": [\"1\", \"2\", \"3\"], \"1\": [\"2\"], \"2\": [], \"3\": [\"4\", \"6\"], \"4\": [], \"5\": [\"7\"], \"6\": [], \"7\": []};\n//       0\n//     / | \\\n//    1--2  3\n//          | \\\n//          4  6\n//    5--7\n\nfunction connected_components(graph) {\n  var seen = [], push = Array.prototype.push;\n  function notVisited(n) {return seen.indexOf(n) === -1;}\n  function traverse(n) {\n    seen.push(n);\n    var nodes = [n];\n    graph[n].forEach(function(m){\n      if (notVisited(m)) push.apply(nodes, traverse(m)); // recursive, depth-first\n    });\n    return nodes;\n  }\n  var components = [];\n  for (var n in graph) {\n    if (notVisited(n)) components.push(traverse(n));\n  }\n  return components;\n}\n\nvar ccs = connected_components(graph);\nfor (var i = 0, len = ccs.length; i < len; i++) {print(\"[\", ccs[i], \"]\");} \n\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n\u300c[\u30b0\u30e9\u30d5\u306e\u9023\u7d50\u6210\u5206](http://qiita.com/kkdd/items/c75d3a10bbdd1bc05b1a)\u300d\u3092\u6c42\u3081\u308b\u30b3\u30fc\u30c9\u3092 JavaScript \u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n```console\n$ js connected_components.js\n[ 0,1,2,3,4,6 ]\n[ 5,7 ]\n```\n\n```connected_components.js\nvar graph = {\"0\": [\"1\", \"2\", \"3\"], \"1\": [\"2\"], \"2\": [], \"3\": [\"4\", \"6\"], \"4\": [], \"5\": [\"7\"], \"6\": [], \"7\": []};\n//       0\n//     / | \\\n//    1--2  3\n//          | \\\n//          4  6\n//    5--7\n\nfunction connected_components(graph) {\n  var seen = [], push = Array.prototype.push;\n  function notVisited(n) {return seen.indexOf(n) === -1;}\n  function traverse(n) {\n    seen.push(n);\n    var nodes = [n];\n    graph[n].forEach(function(m){\n      if (notVisited(m)) push.apply(nodes, traverse(m)); // recursive, depth-first\n    });\n    return nodes;\n  }\n  var components = [];\n  for (var n in graph) {\n    if (notVisited(n)) components.push(traverse(n));\n  }\n  return components;\n}\n\nvar ccs = connected_components(graph);\nfor (var i = 0, len = ccs.length; i < len; i++) {print(\"[\", ccs[i], \"]\");} \n```\n", "tags": ["JavaScript", "\u30b0\u30e9\u30d5"]}