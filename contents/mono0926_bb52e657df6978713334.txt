{"context": " More than 1 year has passed since last update.\u6700\u8fd1\u3001Swift 2\u3067\u63d0\u5531\u3055\u308c\u3066\u3044\u308bProtocol Oriented Programming\u306e\u7406\u89e3\u304c\u3061\u3087\u3063\u3068\u81ea\u4fe1\u306a\u304f\u3066\u3001\u8272\u3005\u8a18\u4e8b\u898b\u3064\u3064\u3082\u4eca\u3044\u3061\u63b4\u3081\u305f\u6c17\u304c\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u539f\u5178\u3067\u3042\u308d\u3046WWDC\u3067\u305d\u308c\u3092\u63d0\u5531\u3057\u3066\u3044\u305f\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u898b\u305f\u3068\u3053\u308d\u3001\u304b\u306a\u308a\u3059\u3063\u304d\u308a\u3057\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\n\u30bb\u30c3\u30b7\u30e7\u30f3: Protocol-Oriented Programming in Swift - WWDC 2015 - Videos - Apple Developer\n\u30bb\u30c3\u30b7\u30e7\u30f3\u5192\u982d\u306f\u3001\u30af\u30e9\u30b9 vs Protocol\u306e\u8a71\u3067\u77e5\u308a\u305f\u3044\u3053\u3068\u3068\u3061\u3087\u3063\u3068\u30ba\u30ec\u3066\u3044\u305f\u306e\u3067\u305d\u308c\u306f\u30b9\u30ad\u30c3\u30d7\u3057\u3066\u307e\u3059\u3002\n\u305d\u306e\u3042\u305f\u308a\u306f\u3001Building Better Apps with Value Types in Swift - WWDC 2015 - Videos - Apple Developer \u306e\u65b9\u304c\u624b\u539a\u305d\u3046\u306a\u306e\u3067\u3001\u8fd1\u3005\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067\u7406\u89e3\u6df1\u3081\u3066\u304a\u304d\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u30a4\u30b1\u3066\u306a\u3044\u30b3\u30fc\u30c9\nclass Ordered {\n    func precedes(other: Ordered) -> Bool { fatalError(\"implement me!\") } // 1\n}\n\nclass Number: Ordered {\n    var value: Double = 0\n    override func precedes(other: Ordered) -> Bool {\n        return value < (other as! Number).value // 2\n    }\n}\n\n\n1. fatalError(\"implement me!\")\u304c\u30a4\u30b1\u3066\u306a\u3044\n\u7279\u306bSwift\u306f\u62bd\u8c61\u30af\u30e9\u30b9\u304c\u7121\u3044\u306e\u3067\u3001\u3053\u3046\u3044\u3046\u57fa\u5e95\u30af\u30e9\u30b9\u7684\u306a\u3082\u306e\u3092\u4f5c\u308b\u3068\u3001\u30a4\u30b1\u3066\u306a\u3055\u304c\u76ee\u7acb\u3061\u307e\u3059\u306d\u3002\n\n2. other as! Number\u3067\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u308b\u3002\n\u578b\u306e\u6069\u6075\u3092\u6bba\u3057\u3066\u3044\u307e\u3059(\u00b4\u30fb\ufe35\u30fb\uff40)\n\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u306f\u3001\"code smell\"\u3068\u3044\u3046\u8868\u73fe\u3067\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306e\u30a4\u30b1\u3066\u306a\u3055\u304c\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u6539\u5584\u5f8c\nprotocol Ordered { // 1\n    func precedes(other: Self) -> Bool // 2\n}\n\nstruct Number: Ordered { // 3\n    var value: Double = 0\n    func precedes(other: Number) -> Bool { // 1\n        return value < other.value // 2\n    }\n}\n\n\n1. class\u304b\u3089protocol\u306b\u5909\u66f4\n\u5b9f\u88c5\u3092\u629c\u304f\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\u3055\u3089\u306bNumber\u3067\u306e\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u3082\u3001override\u306f\u4e0d\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\n2. \u53d7\u3051\u53d6\u308b\u578b\u3092Self\u306b\nNumber\u306e\u5b9f\u88c5\u3067\u3001Number\u578b\u3067\u53d7\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u304c\u7121\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n3. struct\u306b\u5909\u66f4\n\u3053\u308c\u306f\u660e\u78ba\u306a\u7406\u7531\u304c\u8ff0\u3079\u3089\u308c\u3066\u7121\u3055\u305d\u3046\u306b\u805e\u3053\u3048\u307e\u3057\u305f\u3002\n\u5192\u982d\u3067\u3001\u53c2\u7167\u578b\u3060\u3068\u30d0\u30b0\u304c\u751f\u307e\u308c\u3084\u3059\u3044\u306a\u3069\u306e\u7406\u7531\u3067\u3001\u5024\u578b\u3092\u63a8\u3057\u3066\u3044\u305f\u306e\u3067\u305d\u306e\u4e00\u8cab\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u95a2\u6570\u306b\u4f7f\u3046\u4f8b\nfunc binarySearch(sortedKeys: [Ordered], forKey k: Ordered) -> Int { // 1\n    var lo = 0\n    var hi = sortedKeys.count\n    while hi > lo {\n        let mid = lo + (hi - lo) / 2\n        if sortedKeys[mid].precedes(k) { // 2\n            lo = mid + 1\n        } else {\n            hi = mid\n        }\n    }\n    return lo\n}\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u767a\u751f\n\u4e00\u898b\u826f\u3044\u4f8b\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u307e\u3060\u3053\u306e\u307e\u307e\u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n1: error: protocol 'Ordered' can only be used as a generic constraint because it has Self or associated type requirements\n2: error: member 'precedes' cannot be used on value of protocol type 'Ordered'; use a generic constraint instead\n\n\u898b\u3066\u306e\u901a\u308a\u3001Ordered\u30d7\u30ed\u30c8\u30b3\u30eb\u306eprecedes\u30e1\u30bd\u30c3\u30c9\u304cSelf\u3092\u53d7\u3051\u308b\u3053\u3068\u304c\u539f\u56e0\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\u306a\u305c\u3001\u3053\u308c\u304c\u30c0\u30e1\u306a\u306e\u304b\u3068\u3044\u3046\u3068\u3001Ordered\u306f\u3001Number\u4ee5\u5916\u3082\u3042\u308a\u5f97\u308b\u304b\u3089\u3067\u3059\u3002\nstruct Label: Ordered {\n    var value = \"\"\n    func precedes(other: Label) -> Bool {\n        return value < other.value\n    }\n}\n\n\u3053\u3046\u3044\u3063\u305f\u3001Label\u3068\u3044\u3046struct\u304c\u3042\u3063\u305f\u6642\u3001\u305d\u308c\u304csortedKeys\u306b\u6e21\u3055\u308c\u308b\u3068\u3001Label\u3068Number\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u89e3\u6c7a\u4e0d\u80fd\u3067\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u89e3\u6c7a\n\u3064\u307e\u308a\u3001Ordered\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3042\u308c\u3070\u3001\u4f55\u3067\u3082\u826f\u3044\u304c\u3001\u305f\u3060\u3057\u305d\u308c\u306f\u5168\u3066\u540c\u3058\u578b(\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u306fhomogenious\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b)\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u8868\u73fe\u51fa\u6765\u307e\u3059\u3002\u7121\u4e8b\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u89e3\u6c7a\u3057\u307e\u3057\u305f(\u3000\u00b4\uff65\u203f\uff65\uff40)\nfunc binarySearch<T: Ordered>(sortedKeys: [T], forKey k: T) -> Int {\n    var lo = 0\n    var hi = sortedKeys.count\n    while hi > lo {\n        let mid = lo + (hi - lo) / 2\n        if sortedKeys[mid].precedes(k) {\n            lo = mid + 1\n        } else {\n            hi = mid\n        }\n    }\n    return lo\n}\n\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u578b\u3092Self\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u9055\u3044\n\u4eca\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306f\u3001Self\u306b\u305b\u305aOrdered\u3068\u3044\u3046\u5177\u4f53\u7684\u306a\u578b\u3092\u6307\u5b9a\u3057\u3066\u3044\u305f\u3089\u767a\u751f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u305d\u308c\u304c\u826f\u3044\u3053\u3068\u304b\u3068\u3044\u3046\u8a00\u3046\u3068\u9006\u3067\u3001\u578b\u304c\u5165\u308a\u4ea4\u3058\u3063\u305f\u5834\u5408\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u306e\u3068\u3053\u308d\u3067\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\nSelf\u6307\u5b9a\u3068\u3057\u305f\u3053\u3068\u3067\u305d\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3088\u3063\u3066\u672a\u7136\u306b\u9632\u3052\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u3053\u306e\u8868\u304c\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n\n\u56f3\u5f62\u3092\u63cf\u304f\u30b3\u30fc\u30c9\u3092\u4f8b\u306b\u3068\u3063\u305f\u8aac\u660e\n\n\u307e\u305a\u521d\u3081\u306e\u30b3\u30fc\u30c9\n// \u56f3\u5f62\u306a\u3069\u306e\u5b9a\u7fa9\nstruct Renderer {\n    func moveTo(p: CGPoint) { print(\"moveTo(\\(p.x), \\(p.y))\") }\n    func lineTo(p: CGPoint) { print(\"lineTo(\\(p.x), \\(p.y))\") }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        print(\"arcAt(\\(center), radius: \\(radius), startAngle: \\(startAngle), endAngle: \\(endAngle))\")\n    }\n}\n\nprotocol Drawable {\n    func draw(renderer: Renderer)\n}\n\nstruct Polygon: Drawable {\n    func draw(renderer: Renderer) {\n        renderer.moveTo(corners.last!)\n        for p in corners {\n            renderer.lineTo(p)\n        }\n    }\n    var corners: [CGPoint] = []\n}\n\nstruct Circle: Drawable {\n    func draw(renderer: Renderer) {\n        renderer.arcAt(center, radius: radius, startAngle: 0, endAngle: CGFloat(M_PI * 2))\n    }\n    var center: CGPoint\n    var radius: CGFloat\n}\n\nstruct Diagram: Drawable {\n    func draw(renderer: Renderer) {\n        for f in elements {\n            f.draw(renderer)\n        }\n    }\n    var elements: [Drawable] = []\n}\n\n// \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nvar circle = Circle(center: CGPoint(x: 187.5, y: 333.5), radius: 93.75)\n\nvar triangle = Polygon(corners: [\n    CGPoint(x: 187.5, y: 427.25),\n    CGPoint(x: 268.69, y: 286.625),\n    CGPoint(x: 106.31, y: 286.625)\n    ])\n\nvar diagram = Diagram(elements: [circle, triangle])\n\ndiagram.draw(Renderer())\n\n\u3053\u3046\u3044\u3046\u30ed\u30b0\u304c\u5410\u304b\u308c\u3066\u3001\u5186\u3068\u4e09\u89d2\u5f62\u304c\u63cf\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u3053\u3068\u304c\u4f55\u3068\u306a\u304f\u5206\u304b\u308b\narcAt((187.5, 333.5), radius: 93.75, startAngle: 0.0, endAngle: 6.28318530717959)\nmoveTo(106.31, 286.625)\nlineTo(187.5, 427.25)\nlineTo(268.69, 286.625)\nlineTo(106.31, 286.625)\n\n\n\u5b9f\u969b\u306e\u63cf\u753b\u304c\u898b\u305f\u3044\u3001\u3068\u8a00\u308f\u308c\u3066\u5909\u66f4\n\u3068\u3044\u3046\u308f\u3051\u3067\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306f\u3001Renderer\u3092protocol\u306b\u5909\u3048\u3066\u5b9f\u88c5\u3092\u524a\u3063\u3066\u3001\u4ee3\u308f\u308a\u306bTestRenderer\u306b\u79fb\u3057\u307e\u3057\u3087\u3046\u3002\nprotocol Renderer {\n    func moveTo(p: CGPoint)\n    func lineTo(p: CGPoint)\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat)\n}\n\nstruct TestRenderer: Renderer {\n    func moveTo(p: CGPoint) { print(\"moveTo(\\(p.x), \\(p.y))\") }\n    func lineTo(p: CGPoint) { print(\"lineTo(\\(p.x), \\(p.y))\") }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        print(\"arcAt(\\(center), radius: \\(radius), startAngle: \\(startAngle), endAngle: \\(endAngle))\")\n    }\n}\n\n\u3055\u3089\u306b\u3001\u5b9f\u884c\u90e8\u5206\u306f\u3053\u3046\u3059\u308b\u3068\u3001\u3068\u308a\u3042\u3048\u305a\u5148\u307b\u3069\u306e\u6319\u52d5\u306f\u7dad\u6301\u51fa\u6765\u307e\u3057\u305f\u3002\ndiagram.draw(TestRenderer())\n\n\u3055\u3089\u306b\u3001\u5b9f\u969b\u306b\u63cf\u753b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nRenderer\u3092\u5b9f\u88c5\u3057\u305fCGContext\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u7c21\u5358\u306b\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nprotocol oriented\u306e\u5f37\u529b\u3055\u304c\u5206\u304b\u3063\u305f\u6c17\u304c\u3057\u307e\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\nextension CGContext: Renderer {\n    func moveTo(p: CGPoint) {\n        CGContextMoveToPoint(self, p.x, p.y)\n    }\n    func lineTo(p: CGPoint) {\n        CGContextAddLineToPoint(self, p.x, p.y)\n    }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        let arc = CGPathCreateMutable()\n        CGPathAddArc(arc, nil, center.x, center.y, radius, startAngle, endAngle, true)\n        CGContextAddPath(self, arc)\n    }\n}\n\n\u5b9f\u884c\u306f\u3053\u3046\u3067\u3059\u3002\nshowCoreGraphicsDiagram(\"title\", size: CGSizeMake(400, 600)) { diagram.draw($0) }\n\nPlayground\u3067\u306eCGContext\u63cf\u753b\u306e\u305f\u3081\u306b\u3001 https://developer.apple.com/sample-code/wwdc/2015/downloads/Crustacean.zip \u306e\u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3082\u5fc5\u8981\u3067\u3059\u3002\n\n\u4ed6\u306e\u306e\u56f3\u5f62\u3092\u8868\u73fe\u53ef\u80fd\u3068\u3059\u308b\u305f\u3081\u306bRenderer\u3092\u62e1\u5f35\n\n\u6307\u5b9a\u7b87\u6240\u306b\u5186\u3092\u63cf\u304fcircleAt\u306e\u5b9a\u7fa9\u3092\u8db3\u3057\u307e\u3059\u3002\nprotocol Renderer {\n    func moveTo(p: CGPoint)\n    func lineTo(p: CGPoint)\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat)\n    func circleAt(center: CGPoint, radius: CGFloat)\n}\n\nstruct TestRenderer: Renderer {\n    func moveTo(p: CGPoint) { print(\"moveTo(\\(p.x), \\(p.y))\") }\n    func lineTo(p: CGPoint) { print(\"lineTo(\\(p.x), \\(p.y))\") }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        print(\"arcAt(\\(center), radius: \\(radius), startAngle: \\(startAngle), endAngle: \\(endAngle))\")\n    }\n    func circleAt(center: CGPoint, radius: CGFloat) {\n        arcAt(center, radius: radius, startAngle: 0, endAngle: CGFloat(M_PI * 2))\n    }\n}\n\nextension CGContext: Renderer {\n    func moveTo(p: CGPoint) {\n        CGContextMoveToPoint(self, p.x, p.y)\n    }\n    func lineTo(p: CGPoint) {\n        CGContextAddLineToPoint(self, p.x, p.y)\n    }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        let arc = CGPathCreateMutable()\n        CGPathAddArc(arc, nil, center.x, center.y, radius, startAngle, endAngle, true)\n        CGContextAddPath(self, arc)\n    }\n    func circleAt(center: CGPoint, radius: CGFloat) {\n        arcAt(center, radius: radius, startAngle: 0, endAngle: CGFloat(M_PI * 2))\n    }\n}\n\nTestRenderer\u3068CGContext\u306b\u3001circleAt\u306e\u30b3\u30d4\u30da\u5b9f\u88c5\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f(\u00b4\u30fb\ufe35\u30fb\uff40)\n\n\u3053\u3053\u3067Swift 2\u306eProtocol Extensions\n\n\u3053\u306e\u3088\u3046\u306bRender\u3092\u62e1\u5f35\u3057\u3066circleAt\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\nprotocol Renderer {\n    func moveTo(p: CGPoint)\n    func lineTo(p: CGPoint)\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat)\n    func circleAt(center: CGPoint, radius: CGFloat)\n}\n\nextension Renderer {\n    func circleAt(center: CGPoint, radius: CGFloat) {\n        arcAt(center, radius: radius, startAngle: 0, endAngle: CGFloat(M_PI * 2))\n    }\n}\n\nTestRenderer\u3068CGContext\u306b\u3001circleAt\u306e\u30b3\u30d4\u30da\u5b9f\u88c5\u306f\u524a\u9664\u3057\u307e\u3057\u3087\u3046\u0295 \u00b7\u1d25\u00b7\u0294\n\u3059\u3063\u304d\u308a\u3057\u307e\u3057\u305f(\u3000\u00b4\uff65\u203f\uff65\uff40)\nSwift\u306f\u62bd\u8c61\u30af\u30e9\u30b9\u7121\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u3092protocol\u3068protocol extension\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3059\u3063\u304d\u308a\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u3068\u3001\u50d5\u306f\u611f\u3058\u3066\u3044\u307e\u3059\u3002\n\u62bd\u8c61\u30af\u30e9\u30b9\u304c\u3042\u308b\u8a00\u8a9e\u3060\u3068\u3001Interface\u4f7f\u3046\u304b\u62bd\u8c61\u30af\u30e9\u30b9\u4f7f\u3046\u3079\u304d\u304b\u8ff7\u3046\u3001\u307f\u305f\u3044\u306a\u58f0\u3092\u826f\u304f\u805e\u304d\u307e\u3059\u304c\u3001Swift\u3060\u3068\n\nProtocol\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9a\u7fa9\n\u5fc5\u8981\u306a\u3089Protocol\u3092\u62e1\u5f35\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3092\u57cb\u3081\u8fbc\u3080\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3063\u304d\u308a\u89e3\u6c7a\u51fa\u6765\u307e\u3059\u3002\n\u305d\u3053\u306e\u5f79\u5272\u304c\u8a00\u8a9e\u30ec\u30d9\u30eb\u3067\u660e\u78ba\u306b\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u306e\u304c\u7b4b\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nCollectionType\u306eindexOf\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u4f8b\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3082\u306e\nextension CollectionType {\n    public func indexOf(element: Generator.Element) -> Index? {\n        for i in indices {\n            if self[i] == element { // \u30a8\u30e9\u30fc\n                return i\n            }\n        }\n        return nil\n    }\n}\n\nerror: binary operator '==' cannot be applied to two 'Self.Generator.Element' operands\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f(\u00b4\u30fb\ufe35\u30fb\uff40)\n\n\u89e3\u6c7a(\u3000\u00b4\uff65\u203f\uff65\uff40)\nwhere Generator.Element: Equatable\u306e\u62d8\u675f\u6761\u4ef6\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001Generator.Element\u304cEquatable(==\u8a55\u4fa1\u53ef\u80fd\u306a\u3082\u306e)\u306b\u9650\u5b9a\u3067\u304d\u3001\u4e0a\u8a18\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u89e3\u6c7a\u3057\u307e\u3059\u3002\nextension CollectionType where Generator.Element: Equatable {\n    public func indexOf(element: Generator.Element) -> Index? {\n        for i in indices {\n            if self[i] == element { \n                return i\n            }\n        }\n        return nil\n    }\n}\n\n\n\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u306e\u4f8b\u306b\u623b\u3063\u3066Protocol Extensions\u3092\u6d3b\u7528\n\nbinarySearch\u3092\u547c\u3093\u3067\u307f\u308b\nlet position = binarySearch([1, 2, 3, 4], forKey: 2)\n\nexpected an argument list of type '([T], forKey: T)'\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nInt\u306fOrdered\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u5f93\u3063\u3066\u306a\u3044\u306e\u3067\u3001\u4ed5\u65b9\u306a\u3044\u3067\u3059\u306d(\u00b4\u30fb\ufe35\u30fb\uff40)\nInt\u3092\u62e1\u5f35\u3059\u308c\u3070\u89e3\u6c7a\u3057\u307e\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\nextension Int: Ordered {\n    func precedes(other: Int) -> Bool {\n        return self < other\n    }\n}\n\n\u3053\u306e\u52e2\u3044\u3067String\u3082\u62e1\u5f35\u3057\u3061\u3083\u3044\u307e\u3057\u3087\u3046(\u3000\u00b4\uff65\u203f\uff65\uff40)\nextension String: Ordered {\n    func precedes(other: String) -> Bool {\n        return self < other\n    }\n}\n\nlet position = binarySearch([\"1\", \"2\", \"3\", \"4\"], forKey: \"2\")\n\n\u306a\u3093\u304b\u3001\u30a4\u30e4\u306a\u611f\u3058\u304c\u3057\u3066\u304d\u307e\u3057\u305f\u306d(\u00b4\u30fb\ufe35\u30fb\uff40)\n\n\u91cd\u8907\u5b9f\u88c5\u3092\u7121\u304f\u3057\u307e\u3057\u3087\u3046\nInt\u3084String\u306fComparable\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u3001Int\u30fbString\u306fOrdered\u306b\u3055\u3048\u5f93\u3063\u3066\u3044\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u304b\u306a\u308a\u30de\u30b7\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\nextension Comparable {\n    func precedes(other: Self) -> Bool {\n        return self < other\n    }\n}\nextension Int: Ordered {}\nextension String: Ordered {}\n\n\nOrdered\u306b\u5f93\u3046\u5fc5\u8981\u306a\u3044\u306e\u3067\u306f\uff1f\n\u305d\u3082\u305d\u3082\u3001Comparable\u306b\u5f93\u3063\u3066\u3044\u308b\u3082\u306e\u304cfunc precedes(other: Self) -> Bool\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3070\u3001extension Int: Ordered {}\u306a\u3069\u306e\u8a18\u8ff0\u306f\u5197\u9577\u306a\u306e\u3067\u306f\uff1f\u3068\u3082\u601d\u3063\u3066\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001extension Int: Ordered {}\u3092\u524a\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\nerror: cannot invoke 'binarySearch' with an argument list of type '([Int], forKey: Int)'\n\nSwift\u306f\u3001\u69cb\u9020\u7684\u90e8\u5206\u578b(\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u306b\u8fd1\u3044\u3051\u3069\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u78ba\u5b9a\u3059\u308b\u3082\u306e\u307f\u305f\u3044\u306a\u611f\u3058)\u306e\u767a\u60f3\u306f\u53d6\u308a\u5165\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3061\u3050\u306f\u3050\u306a\u6319\u52d5\u3092\u6539\u5584\n\u4f8b\u3048\u3070\u3001Double\u3082Comparable\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308a\u307e\u3059\u3002\nlet truth = 3.14.precedes(98.6)\n\n\u4e00\u65b9\u3001\u3053\u3061\u3089\u306f\nlet position = binarySearch([1.0, 2.0, 3.0, 4.0], forKey: 2.0)\n\nerror: cannot invoke 'binarySearch' with an argument list of type '([Double], forKey: Double)'\u3068\u3044\u3046\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u3082\u305d\u3082Double\u306bprecedes\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3059\u6c17\u304c\u7121\u3044\u306a\u3089\u3001Comparable\u306e\u62e1\u5f35\u3092\u9650\u5b9a\u7684\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u3001let truth = 3.14.precedes(98.6)\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u3001Double\u306b\u610f\u56f3\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3055\u305a\u306b\u5168\u4f53\u7684\u306b\u6574\u5408\u611f\u306e\u3042\u308b\u6319\u52d5\u306b\u306a\u308a\u307e\u3059\u3002\nextension Ordered where Self: Comparable {\n    func precedes(other: Self) -> Bool {\n        return self < other\n    }\n}\n\n\n\u3088\u308a\u53b3\u5bc6\u306a\u6307\u5b9a\u306b\n\u666e\u901a\u306b\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u53b3\u5bc6\u306b\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u3053\u3046\u306a\u308b\u3088\u3046\u3067\u3059\u3002\nfunc binarySearch<\n    C: CollectionType where C.Index == RandomAccessIndexType,\n    C.Generator.Element: Ordered\n    >(sortedKeys: C, forKey k: C.Generator.Element) -> Int {\n    // ...\n}\n\n\u304b\u306a\u308a\u898b\u306b\u304f\u3044\u3067\u3059\u304c\u3001Protocol Extension\u3092\u6d3b\u7528\u3059\u308b\u3068\u3001\u5c11\u3057\u76ee\u306b\u512a\u3057\u304f\u306a\u308a\u307e\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\nextension CollectionType where Index == RandomAccessIndexType,\nGenerator.Element: Ordered {\n    func binarySearch(forKey k: C.Generator.Element) -> Int {\n        // ...\n    }\n}\n// \u547c\u3073\u51fa\u3057\u3082\u30e1\u30bd\u30c3\u30c9\u30e9\u30a4\u30af\u306b(\u3000\u00b4\uff65\u203f\uff65\uff40)\nlet position = [1, 2, 3, 4].binarySearch(2)\n\n\u304b\u306a\u308a\"Protocol Oriented\"\u306a\u96f0\u56f2\u6c17\u304c\u3057\u3066\u304d\u307e\u3057\u305f(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\u203b: \u304a\u305d\u3089\u304fWWDC\u306e\u6642\u304b\u3089\u306e\u4ed5\u69d8\u5909\u66f4\u3067RandomAccessIndexType\u90e8\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc(error: same-type constraint type 'RandomAccessIndexType' does not conform to required protocol 'ForwardIndexType')\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u539f\u56e0\u5206\u304b\u3063\u305f\u3089\u53cd\u6620\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u3068\u305f\u304f\u3055\u3093\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u304c\u304f\u3063\u3064\u3044\u3066\u304f\u308b\n\u4f8b\u3048\u3070\u3001\u3053\u306e\u3088\u3046\u306bOptionalSetType\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u3053\u3046\u3044\u3046Set\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u4ed8\u3044\u3066\u304d\u307e\u3059\u3002\n\u3053\u308c\u3089\u306fProtocol Extensions\u3067\u5b9f\u88c5\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u7fa4\u3067\u3059\u3002\nSwift\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3088\u3046\u306b\u3046\u307e\u304f\u8a2d\u8a08\u3059\u308b\u3068\u6700\u5c0f\u624b\u6570\u3067\u65e2\u5b58\u5b9f\u88c5\u306e\u6069\u6075\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001OptionSetType\u306f\u3053\u3046\u3044\u3046\u5b9a\u7fa9\u3067\u3059\u304c\u3001RawRepresentable\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9a\u7fa9\u306e\u7121\u3044public var rawValue: Self.RawValue { get }\u3092\u6e80\u305f\u3059\u305f\u3081\u306b\u3001\u4e0a\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\npublic protocol OptionSetType : SetAlgebraType, RawRepresentable {\n    /// An `OptionSet`'s `Element` type is normally `Self`.\n    typealias Element = Self\n    /// Convert from a value of `RawValue`, succeeding unconditionally.\n    public init(rawValue: Self.RawValue)\n}\n\n\nEquatable\u30b5\u30dd\u30fc\u30c8\n\u3053\u306e\u5f8c\u3001\u56f3\u5f62\u3092\u63cf\u304f\u30b3\u30fc\u30c9\u3092\u4f8b\u306b\u3068\u3063\u305f\u8aac\u660e\u3067\u5b9a\u7fa9\u3057\u305fstruct\u306e\u7b49\u4fa1\u6bd4\u8f03\u306b\u3064\u3044\u3066\u306e\u8a71\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u306f\u306a\u304b\u306a\u304b\u96e3\u3057\u3044 + \u30dc\u30ea\u30e5\u30fc\u30df\u30fc\u3067\u3084\u3084\u3053\u3057\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u529b\u5c3d\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u578b\u3092Self\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u9055\u3044\u3067\u66f8\u3044\u305f\u5185\u5bb9\u306b\u95a2\u9023\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u578b\u304c\u53b3\u5bc6\u306a\u306e\u3067\u30a4\u30b3\u30fc\u30eb\u6bd4\u8f03\u306e\u969b\u306b\u305d\u308c\u3092\u7406\u89e3\u3057\u305f\u4e0a\u3067\u3061\u3087\u3063\u3068\u3057\u305f\u56de\u907f\u7b56\u3092\u53d6\u308b\u5fc5\u8981\u306e\u3042\u308b\u5834\u9762\u304c\u3042\u308b\u3001\u3068\u3044\u3046\u3088\u3046\u306a\u5185\u5bb9\u3067\u3059\u3002\n\u8ffd\u8a18\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u30bb\u30c3\u30b7\u30e7\u30f3\u3054\u89a7\u4e0b\u3055\u3044\u3002\n\n\n\u95a2\u9023\n\n\nProtocol-Oriented Programming in Swift\n\n\u3053\u306e\u8a18\u4e8b\u66f8\u3044\u305f\u5f8c\u306b\u898b\u3064\u3051\u307e\u3057\u305f\u304c\u3001\u307b\u307c\u540c\u5185\u5bb9\u306e\u82f1\u8a9e\u8a18\u4e8b\u3067\u3059\u3002\n\n\n\n\n\u6700\u8fd1\u3001Swift 2\u3067\u63d0\u5531\u3055\u308c\u3066\u3044\u308bProtocol Oriented Programming\u306e\u7406\u89e3\u304c\u3061\u3087\u3063\u3068\u81ea\u4fe1\u306a\u304f\u3066\u3001\u8272\u3005\u8a18\u4e8b\u898b\u3064\u3064\u3082\u4eca\u3044\u3061\u63b4\u3081\u305f\u6c17\u304c\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u539f\u5178\u3067\u3042\u308d\u3046WWDC\u3067\u305d\u308c\u3092\u63d0\u5531\u3057\u3066\u3044\u305f\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u898b\u305f\u3068\u3053\u308d\u3001\u304b\u306a\u308a\u3059\u3063\u304d\u308a\u3057\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\n\u30bb\u30c3\u30b7\u30e7\u30f3: [Protocol-Oriented Programming in Swift - WWDC 2015 - Videos - Apple Developer](https://developer.apple.com/videos/wwdc/2015/?id=408)\n\n\u30bb\u30c3\u30b7\u30e7\u30f3\u5192\u982d\u306f\u3001\u30af\u30e9\u30b9 vs Protocol\u306e\u8a71\u3067\u77e5\u308a\u305f\u3044\u3053\u3068\u3068\u3061\u3087\u3063\u3068\u30ba\u30ec\u3066\u3044\u305f\u306e\u3067\u305d\u308c\u306f\u30b9\u30ad\u30c3\u30d7\u3057\u3066\u307e\u3059\u3002\n\u305d\u306e\u3042\u305f\u308a\u306f\u3001[Building Better Apps with Value Types in Swift - WWDC 2015 - Videos - Apple Developer](https://developer.apple.com/videos/wwdc/2015/?id=414) \u306e\u65b9\u304c\u624b\u539a\u305d\u3046\u306a\u306e\u3067\u3001\u8fd1\u3005\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067\u7406\u89e3\u6df1\u3081\u3066\u304a\u304d\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u307e\u305a\u306f\u30a4\u30b1\u3066\u306a\u3044\u30b3\u30fc\u30c9\n\n```swift\nclass Ordered {\n    func precedes(other: Ordered) -> Bool { fatalError(\"implement me!\") } // 1\n}\n\nclass Number: Ordered {\n    var value: Double = 0\n    override func precedes(other: Ordered) -> Bool {\n        return value < (other as! Number).value // 2\n    }\n}\n```\n\n## 1. `fatalError(\"implement me!\")`\u304c\u30a4\u30b1\u3066\u306a\u3044\n\n\u7279\u306bSwift\u306f\u62bd\u8c61\u30af\u30e9\u30b9\u304c\u7121\u3044\u306e\u3067\u3001\u3053\u3046\u3044\u3046\u57fa\u5e95\u30af\u30e9\u30b9\u7684\u306a\u3082\u306e\u3092\u4f5c\u308b\u3068\u3001\u30a4\u30b1\u3066\u306a\u3055\u304c\u76ee\u7acb\u3061\u307e\u3059\u306d\u3002\n\n## 2. `other as! Number`\u3067\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u308b\u3002\n\n\u578b\u306e\u6069\u6075\u3092\u6bba\u3057\u3066\u3044\u307e\u3059(\u00b4\u30fb\ufe35\u30fb\uff40)\n\n\n\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u306f\u3001\"code smell\"\u3068\u3044\u3046\u8868\u73fe\u3067\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306e\u30a4\u30b1\u3066\u306a\u3055\u304c\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n# \u6539\u5584\u5f8c\n\n```swift\nprotocol Ordered { // 1\n    func precedes(other: Self) -> Bool // 2\n}\n\nstruct Number: Ordered { // 3\n    var value: Double = 0\n    func precedes(other: Number) -> Bool { // 1\n        return value < other.value // 2\n    }\n}\n```\n\n## 1. class\u304b\u3089protocol\u306b\u5909\u66f4\n\n\u5b9f\u88c5\u3092\u629c\u304f\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\u3055\u3089\u306bNumber\u3067\u306e\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u3082\u3001override\u306f\u4e0d\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\n## 2. \u53d7\u3051\u53d6\u308b\u578b\u3092`Self`\u306b\n\nNumber\u306e\u5b9f\u88c5\u3067\u3001Number\u578b\u3067\u53d7\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u304c\u7121\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n## 3. struct\u306b\u5909\u66f4\n\n\u3053\u308c\u306f\u660e\u78ba\u306a\u7406\u7531\u304c\u8ff0\u3079\u3089\u308c\u3066\u7121\u3055\u305d\u3046\u306b\u805e\u3053\u3048\u307e\u3057\u305f\u3002\n\u5192\u982d\u3067\u3001\u53c2\u7167\u578b\u3060\u3068\u30d0\u30b0\u304c\u751f\u307e\u308c\u3084\u3059\u3044\u306a\u3069\u306e\u7406\u7531\u3067\u3001\u5024\u578b\u3092\u63a8\u3057\u3066\u3044\u305f\u306e\u3067\u305d\u306e\u4e00\u8cab\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n# \u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u95a2\u6570\u306b\u4f7f\u3046\u4f8b\n\n```swift\nfunc binarySearch(sortedKeys: [Ordered], forKey k: Ordered) -> Int { // 1\n    var lo = 0\n    var hi = sortedKeys.count\n    while hi > lo {\n        let mid = lo + (hi - lo) / 2\n        if sortedKeys[mid].precedes(k) { // 2\n            lo = mid + 1\n        } else {\n            hi = mid\n        }\n    }\n    return lo\n}\n```\n\n## \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u767a\u751f\n\n\u4e00\u898b\u826f\u3044\u4f8b\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u307e\u3060\u3053\u306e\u307e\u307e\u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n- `1: error: protocol 'Ordered' can only be used as a generic constraint because it has Self or associated type requirements`\n- `2: error: member 'precedes' cannot be used on value of protocol type 'Ordered'; use a generic constraint instead`\n\n\u898b\u3066\u306e\u901a\u308a\u3001Ordered\u30d7\u30ed\u30c8\u30b3\u30eb\u306eprecedes\u30e1\u30bd\u30c3\u30c9\u304cSelf\u3092\u53d7\u3051\u308b\u3053\u3068\u304c\u539f\u56e0\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\u306a\u305c\u3001\u3053\u308c\u304c\u30c0\u30e1\u306a\u306e\u304b\u3068\u3044\u3046\u3068\u3001Ordered\u306f\u3001Number\u4ee5\u5916\u3082\u3042\u308a\u5f97\u308b\u304b\u3089\u3067\u3059\u3002\n\n```swift\nstruct Label: Ordered {\n    var value = \"\"\n    func precedes(other: Label) -> Bool {\n        return value < other.value\n    }\n}\n```\n\n\u3053\u3046\u3044\u3063\u305f\u3001Label\u3068\u3044\u3046struct\u304c\u3042\u3063\u305f\u6642\u3001\u305d\u308c\u304csortedKeys\u306b\u6e21\u3055\u308c\u308b\u3068\u3001Label\u3068Number\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u89e3\u6c7a\u4e0d\u80fd\u3067\u3059\u3002\n\n## \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u89e3\u6c7a\n\n\u3064\u307e\u308a\u3001Ordered\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3042\u308c\u3070\u3001\u4f55\u3067\u3082\u826f\u3044\u304c\u3001\u305f\u3060\u3057\u305d\u308c\u306f\u5168\u3066\u540c\u3058\u578b(\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u306fhomogenious\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b)\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u8868\u73fe\u51fa\u6765\u307e\u3059\u3002\u7121\u4e8b\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u89e3\u6c7a\u3057\u307e\u3057\u305f(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n```swift\nfunc binarySearch<T: Ordered>(sortedKeys: [T], forKey k: T) -> Int {\n    var lo = 0\n    var hi = sortedKeys.count\n    while hi > lo {\n        let mid = lo + (hi - lo) / 2\n        if sortedKeys[mid].precedes(k) {\n            lo = mid + 1\n        } else {\n            hi = mid\n        }\n    }\n    return lo\n}\n```\n\n## \u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u578b\u3092Self\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u9055\u3044\n\n\u4eca\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306f\u3001Self\u306b\u305b\u305aOrdered\u3068\u3044\u3046\u5177\u4f53\u7684\u306a\u578b\u3092\u6307\u5b9a\u3057\u3066\u3044\u305f\u3089\u767a\u751f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u305d\u308c\u304c\u826f\u3044\u3053\u3068\u304b\u3068\u3044\u3046\u8a00\u3046\u3068\u9006\u3067\u3001\u578b\u304c\u5165\u308a\u4ea4\u3058\u3063\u305f\u5834\u5408\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u306e\u3068\u3053\u308d\u3067\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n`Self`\u6307\u5b9a\u3068\u3057\u305f\u3053\u3068\u3067\u305d\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3088\u3063\u3066\u672a\u7136\u306b\u9632\u3052\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n\n\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u3053\u306e\u8868\u304c\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n![Screen Shot 2015-09-19 at 4.40.49 PM.png](https://qiita-image-store.s3.amazonaws.com/0/19398/a3d11888-21ab-9121-e564-0a641a0c7bf7.png \"Screen Shot 2015-09-19 at 4.40.49 PM.png\")\n\n\n# \u56f3\u5f62\u3092\u63cf\u304f\u30b3\u30fc\u30c9\u3092\u4f8b\u306b\u3068\u3063\u305f\u8aac\u660e\n\n## \u307e\u305a\u521d\u3081\u306e\u30b3\u30fc\u30c9\n\n```swift\n// \u56f3\u5f62\u306a\u3069\u306e\u5b9a\u7fa9\nstruct Renderer {\n    func moveTo(p: CGPoint) { print(\"moveTo(\\(p.x), \\(p.y))\") }\n    func lineTo(p: CGPoint) { print(\"lineTo(\\(p.x), \\(p.y))\") }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        print(\"arcAt(\\(center), radius: \\(radius), startAngle: \\(startAngle), endAngle: \\(endAngle))\")\n    }\n}\n\nprotocol Drawable {\n    func draw(renderer: Renderer)\n}\n\nstruct Polygon: Drawable {\n    func draw(renderer: Renderer) {\n        renderer.moveTo(corners.last!)\n        for p in corners {\n            renderer.lineTo(p)\n        }\n    }\n    var corners: [CGPoint] = []\n}\n\nstruct Circle: Drawable {\n    func draw(renderer: Renderer) {\n        renderer.arcAt(center, radius: radius, startAngle: 0, endAngle: CGFloat(M_PI * 2))\n    }\n    var center: CGPoint\n    var radius: CGFloat\n}\n\nstruct Diagram: Drawable {\n    func draw(renderer: Renderer) {\n        for f in elements {\n            f.draw(renderer)\n        }\n    }\n    var elements: [Drawable] = []\n}\n\n// \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nvar circle = Circle(center: CGPoint(x: 187.5, y: 333.5), radius: 93.75)\n\nvar triangle = Polygon(corners: [\n    CGPoint(x: 187.5, y: 427.25),\n    CGPoint(x: 268.69, y: 286.625),\n    CGPoint(x: 106.31, y: 286.625)\n    ])\n\nvar diagram = Diagram(elements: [circle, triangle])\n\ndiagram.draw(Renderer())\n```\n\n\u3053\u3046\u3044\u3046\u30ed\u30b0\u304c\u5410\u304b\u308c\u3066\u3001\u5186\u3068\u4e09\u89d2\u5f62\u304c\u63cf\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u3053\u3068\u304c\u4f55\u3068\u306a\u304f\u5206\u304b\u308b\n\n```\narcAt((187.5, 333.5), radius: 93.75, startAngle: 0.0, endAngle: 6.28318530717959)\nmoveTo(106.31, 286.625)\nlineTo(187.5, 427.25)\nlineTo(268.69, 286.625)\nlineTo(106.31, 286.625)\n```\n\n## \u5b9f\u969b\u306e\u63cf\u753b\u304c\u898b\u305f\u3044\u3001\u3068\u8a00\u308f\u308c\u3066\u5909\u66f4\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306f\u3001Renderer\u3092protocol\u306b\u5909\u3048\u3066\u5b9f\u88c5\u3092\u524a\u3063\u3066\u3001\u4ee3\u308f\u308a\u306bTestRenderer\u306b\u79fb\u3057\u307e\u3057\u3087\u3046\u3002\n\n```swift\nprotocol Renderer {\n    func moveTo(p: CGPoint)\n    func lineTo(p: CGPoint)\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat)\n}\n\nstruct TestRenderer: Renderer {\n    func moveTo(p: CGPoint) { print(\"moveTo(\\(p.x), \\(p.y))\") }\n    func lineTo(p: CGPoint) { print(\"lineTo(\\(p.x), \\(p.y))\") }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        print(\"arcAt(\\(center), radius: \\(radius), startAngle: \\(startAngle), endAngle: \\(endAngle))\")\n    }\n}\n```\n\n\u3055\u3089\u306b\u3001\u5b9f\u884c\u90e8\u5206\u306f\u3053\u3046\u3059\u308b\u3068\u3001\u3068\u308a\u3042\u3048\u305a\u5148\u307b\u3069\u306e\u6319\u52d5\u306f\u7dad\u6301\u51fa\u6765\u307e\u3057\u305f\u3002\n\n```swift\ndiagram.draw(TestRenderer())\n```\n\n\u3055\u3089\u306b\u3001\u5b9f\u969b\u306b\u63cf\u753b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nRenderer\u3092\u5b9f\u88c5\u3057\u305fCGContext\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u7c21\u5358\u306b\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nprotocol oriented\u306e\u5f37\u529b\u3055\u304c\u5206\u304b\u3063\u305f\u6c17\u304c\u3057\u307e\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n```swift\nextension CGContext: Renderer {\n    func moveTo(p: CGPoint) {\n        CGContextMoveToPoint(self, p.x, p.y)\n    }\n    func lineTo(p: CGPoint) {\n        CGContextAddLineToPoint(self, p.x, p.y)\n    }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        let arc = CGPathCreateMutable()\n        CGPathAddArc(arc, nil, center.x, center.y, radius, startAngle, endAngle, true)\n        CGContextAddPath(self, arc)\n    }\n}\n```\n\n\u5b9f\u884c\u306f\u3053\u3046\u3067\u3059\u3002\n\n```\nshowCoreGraphicsDiagram(\"title\", size: CGSizeMake(400, 600)) { diagram.draw($0) }\n```\n\nPlayground\u3067\u306eCGContext\u63cf\u753b\u306e\u305f\u3081\u306b\u3001 https://developer.apple.com/sample-code/wwdc/2015/downloads/Crustacean.zip \u306e\u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3082\u5fc5\u8981\u3067\u3059\u3002\n\n# \u4ed6\u306e\u306e\u56f3\u5f62\u3092\u8868\u73fe\u53ef\u80fd\u3068\u3059\u308b\u305f\u3081\u306bRenderer\u3092\u62e1\u5f35\n\n## \u6307\u5b9a\u7b87\u6240\u306b\u5186\u3092\u63cf\u304f`circleAt`\u306e\u5b9a\u7fa9\u3092\u8db3\u3057\u307e\u3059\u3002\n\n```swift\nprotocol Renderer {\n    func moveTo(p: CGPoint)\n    func lineTo(p: CGPoint)\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat)\n    func circleAt(center: CGPoint, radius: CGFloat)\n}\n\nstruct TestRenderer: Renderer {\n    func moveTo(p: CGPoint) { print(\"moveTo(\\(p.x), \\(p.y))\") }\n    func lineTo(p: CGPoint) { print(\"lineTo(\\(p.x), \\(p.y))\") }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        print(\"arcAt(\\(center), radius: \\(radius), startAngle: \\(startAngle), endAngle: \\(endAngle))\")\n    }\n    func circleAt(center: CGPoint, radius: CGFloat) {\n        arcAt(center, radius: radius, startAngle: 0, endAngle: CGFloat(M_PI * 2))\n    }\n}\n\nextension CGContext: Renderer {\n    func moveTo(p: CGPoint) {\n        CGContextMoveToPoint(self, p.x, p.y)\n    }\n    func lineTo(p: CGPoint) {\n        CGContextAddLineToPoint(self, p.x, p.y)\n    }\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat) {\n        let arc = CGPathCreateMutable()\n        CGPathAddArc(arc, nil, center.x, center.y, radius, startAngle, endAngle, true)\n        CGContextAddPath(self, arc)\n    }\n    func circleAt(center: CGPoint, radius: CGFloat) {\n        arcAt(center, radius: radius, startAngle: 0, endAngle: CGFloat(M_PI * 2))\n    }\n}\n```\n\n`TestRenderer`\u3068`CGContext`\u306b\u3001`circleAt`\u306e\u30b3\u30d4\u30da\u5b9f\u88c5\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f(\u00b4\u30fb\ufe35\u30fb\uff40)\n\n## \u3053\u3053\u3067Swift 2\u306e`Protocol Extensions`\n\n\u3053\u306e\u3088\u3046\u306bRender\u3092\u62e1\u5f35\u3057\u3066`circleAt`\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\n\n```swift\nprotocol Renderer {\n    func moveTo(p: CGPoint)\n    func lineTo(p: CGPoint)\n    func arcAt(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat)\n    func circleAt(center: CGPoint, radius: CGFloat)\n}\n\nextension Renderer {\n    func circleAt(center: CGPoint, radius: CGFloat) {\n        arcAt(center, radius: radius, startAngle: 0, endAngle: CGFloat(M_PI * 2))\n    }\n}\n```\n\n`TestRenderer`\u3068`CGContext`\u306b\u3001`circleAt`\u306e\u30b3\u30d4\u30da\u5b9f\u88c5\u306f\u524a\u9664\u3057\u307e\u3057\u3087\u3046\u0295 \u00b7\u1d25\u00b7\u0294\n\u3059\u3063\u304d\u308a\u3057\u307e\u3057\u305f(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\nSwift\u306f\u62bd\u8c61\u30af\u30e9\u30b9\u7121\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u3092`protocol`\u3068`protocol extension`\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3059\u3063\u304d\u308a\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u3068\u3001\u50d5\u306f\u611f\u3058\u3066\u3044\u307e\u3059\u3002\n\u62bd\u8c61\u30af\u30e9\u30b9\u304c\u3042\u308b\u8a00\u8a9e\u3060\u3068\u3001Interface\u4f7f\u3046\u304b\u62bd\u8c61\u30af\u30e9\u30b9\u4f7f\u3046\u3079\u304d\u304b\u8ff7\u3046\u3001\u307f\u305f\u3044\u306a\u58f0\u3092\u826f\u304f\u805e\u304d\u307e\u3059\u304c\u3001Swift\u3060\u3068\n\n- Protocol\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9a\u7fa9\n- \u5fc5\u8981\u306a\u3089Protocol\u3092\u62e1\u5f35\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3092\u57cb\u3081\u8fbc\u3080\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3063\u304d\u308a\u89e3\u6c7a\u51fa\u6765\u307e\u3059\u3002\n\u305d\u3053\u306e\u5f79\u5272\u304c\u8a00\u8a9e\u30ec\u30d9\u30eb\u3067\u660e\u78ba\u306b\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u306e\u304c\u7b4b\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# CollectionType\u306eindexOf\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u4f8b\n\n## \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3082\u306e\n\n```swift\nextension CollectionType {\n    public func indexOf(element: Generator.Element) -> Index? {\n        for i in indices {\n            if self[i] == element { // \u30a8\u30e9\u30fc\n                return i\n            }\n        }\n        return nil\n    }\n}\n```\n\n`error: binary operator '==' cannot be applied to two 'Self.Generator.Element' operands`\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f(\u00b4\u30fb\ufe35\u30fb\uff40)\n\n## \u89e3\u6c7a(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n`where Generator.Element: Equatable`\u306e\u62d8\u675f\u6761\u4ef6\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001`Generator.Element`\u304c`Equatable`(`==`\u8a55\u4fa1\u53ef\u80fd\u306a\u3082\u306e)\u306b\u9650\u5b9a\u3067\u304d\u3001\u4e0a\u8a18\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\n```swift\nextension CollectionType where Generator.Element: Equatable {\n    public func indexOf(element: Generator.Element) -> Index? {\n        for i in indices {\n            if self[i] == element { \n                return i\n            }\n        }\n        return nil\n    }\n}\n```\n\n# \u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u306e\u4f8b\u306b\u623b\u3063\u3066Protocol Extensions\u3092\u6d3b\u7528\n\n## `binarySearch`\u3092\u547c\u3093\u3067\u307f\u308b\n\n```swift\nlet position = binarySearch([1, 2, 3, 4], forKey: 2)\n```\n\n`expected an argument list of type '([T], forKey: T)'`\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nInt\u306fOrdered\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u5f93\u3063\u3066\u306a\u3044\u306e\u3067\u3001\u4ed5\u65b9\u306a\u3044\u3067\u3059\u306d(\u00b4\u30fb\ufe35\u30fb\uff40)\n\nInt\u3092\u62e1\u5f35\u3059\u308c\u3070\u89e3\u6c7a\u3057\u307e\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n```swift\n\nextension Int: Ordered {\n    func precedes(other: Int) -> Bool {\n        return self < other\n    }\n}\n```\n\n\u3053\u306e\u52e2\u3044\u3067`String`\u3082\u62e1\u5f35\u3057\u3061\u3083\u3044\u307e\u3057\u3087\u3046(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n```swift\nextension String: Ordered {\n    func precedes(other: String) -> Bool {\n        return self < other\n    }\n}\n\nlet position = binarySearch([\"1\", \"2\", \"3\", \"4\"], forKey: \"2\")\n```\n\n\u306a\u3093\u304b\u3001\u30a4\u30e4\u306a\u611f\u3058\u304c\u3057\u3066\u304d\u307e\u3057\u305f\u306d(\u00b4\u30fb\ufe35\u30fb\uff40)\n\n## \u91cd\u8907\u5b9f\u88c5\u3092\u7121\u304f\u3057\u307e\u3057\u3087\u3046\n\nInt\u3084String\u306fComparable\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u3001Int\u30fbString\u306fOrdered\u306b\u3055\u3048\u5f93\u3063\u3066\u3044\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u304b\u306a\u308a\u30de\u30b7\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n\n```swift\nextension Comparable {\n    func precedes(other: Self) -> Bool {\n        return self < other\n    }\n}\nextension Int: Ordered {}\nextension String: Ordered {}\n```\n\n### Ordered\u306b\u5f93\u3046\u5fc5\u8981\u306a\u3044\u306e\u3067\u306f\uff1f\n\n\u305d\u3082\u305d\u3082\u3001`Comparable`\u306b\u5f93\u3063\u3066\u3044\u308b\u3082\u306e\u304c`func precedes(other: Self) -> Bool`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3070\u3001`extension Int: Ordered {}`\u306a\u3069\u306e\u8a18\u8ff0\u306f\u5197\u9577\u306a\u306e\u3067\u306f\uff1f\u3068\u3082\u601d\u3063\u3066\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001`extension Int: Ordered {}`\u3092\u524a\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\nerror: cannot invoke 'binarySearch' with an argument list of type '([Int], forKey: Int)'\n```\n\nSwift\u306f\u3001\u69cb\u9020\u7684\u90e8\u5206\u578b(\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u306b\u8fd1\u3044\u3051\u3069\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u78ba\u5b9a\u3059\u308b\u3082\u306e\u307f\u305f\u3044\u306a\u611f\u3058)\u306e\u767a\u60f3\u306f\u53d6\u308a\u5165\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u3061\u3050\u306f\u3050\u306a\u6319\u52d5\u3092\u6539\u5584\n\n\u4f8b\u3048\u3070\u3001Double\u3082Comparable\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308a\u307e\u3059\u3002\n\n```swift\nlet truth = 3.14.precedes(98.6)\n```\n\n\u4e00\u65b9\u3001\u3053\u3061\u3089\u306f\n\n```swift\nlet position = binarySearch([1.0, 2.0, 3.0, 4.0], forKey: 2.0)\n```\n\n`error: cannot invoke 'binarySearch' with an argument list of type '([Double], forKey: Double)'`\u3068\u3044\u3046\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u3082\u305d\u3082Double\u306b`precedes`\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3059\u6c17\u304c\u7121\u3044\u306a\u3089\u3001Comparable\u306e\u62e1\u5f35\u3092\u9650\u5b9a\u7684\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u3001`let truth = 3.14.precedes(98.6)`\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u3001Double\u306b\u610f\u56f3\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3055\u305a\u306b\u5168\u4f53\u7684\u306b\u6574\u5408\u611f\u306e\u3042\u308b\u6319\u52d5\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\nextension Ordered where Self: Comparable {\n    func precedes(other: Self) -> Bool {\n        return self < other\n    }\n}\n```\n\n## \u3088\u308a\u53b3\u5bc6\u306a\u6307\u5b9a\u306b\n\n\u666e\u901a\u306b\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u53b3\u5bc6\u306b\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u3053\u3046\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\n```swift\nfunc binarySearch<\n    C: CollectionType where C.Index == RandomAccessIndexType,\n    C.Generator.Element: Ordered\n    >(sortedKeys: C, forKey k: C.Generator.Element) -> Int {\n    // ...\n}\n```\n\n\u304b\u306a\u308a\u898b\u306b\u304f\u3044\u3067\u3059\u304c\u3001Protocol Extension\u3092\u6d3b\u7528\u3059\u308b\u3068\u3001\u5c11\u3057\u76ee\u306b\u512a\u3057\u304f\u306a\u308a\u307e\u3059(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n```swift\nextension CollectionType where Index == RandomAccessIndexType,\nGenerator.Element: Ordered {\n    func binarySearch(forKey k: C.Generator.Element) -> Int {\n        // ...\n    }\n}\n// \u547c\u3073\u51fa\u3057\u3082\u30e1\u30bd\u30c3\u30c9\u30e9\u30a4\u30af\u306b(\u3000\u00b4\uff65\u203f\uff65\uff40)\nlet position = [1, 2, 3, 4].binarySearch(2)\n```\n\n\u304b\u306a\u308a\"Protocol Oriented\"\u306a\u96f0\u56f2\u6c17\u304c\u3057\u3066\u304d\u307e\u3057\u305f(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n\u203b: \u304a\u305d\u3089\u304fWWDC\u306e\u6642\u304b\u3089\u306e\u4ed5\u69d8\u5909\u66f4\u3067`RandomAccessIndexType`\u90e8\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc(`error: same-type constraint type 'RandomAccessIndexType' does not conform to required protocol 'ForwardIndexType'`)\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u539f\u56e0\u5206\u304b\u3063\u305f\u3089\u53cd\u6620\u3057\u307e\u3059\u3002\n\n# \u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u3068\u305f\u304f\u3055\u3093\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u304c\u304f\u3063\u3064\u3044\u3066\u304f\u308b\n\n\u4f8b\u3048\u3070\u3001\u3053\u306e\u3088\u3046\u306bOptionalSetType\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u3053\u3046\u3044\u3046Set\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u4ed8\u3044\u3066\u304d\u307e\u3059\u3002\n\u3053\u308c\u3089\u306fProtocol Extensions\u3067\u5b9f\u88c5\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u7fa4\u3067\u3059\u3002\nSwift\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3088\u3046\u306b\u3046\u307e\u304f\u8a2d\u8a08\u3059\u308b\u3068\u6700\u5c0f\u624b\u6570\u3067\u65e2\u5b58\u5b9f\u88c5\u306e\u6069\u6075\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n![Screen Shot 2015-09-19 at 8.09.04 PM.png](https://qiita-image-store.s3.amazonaws.com/0/19398/9730f31b-729a-d77c-49bf-55b33e15c91d.png \"Screen Shot 2015-09-19 at 8.09.04 PM.png\")\n\n\u3061\u306a\u307f\u306b\u3001OptionSetType\u306f\u3053\u3046\u3044\u3046\u5b9a\u7fa9\u3067\u3059\u304c\u3001RawRepresentable\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9a\u7fa9\u306e\u7121\u3044`public var rawValue: Self.RawValue { get }`\u3092\u6e80\u305f\u3059\u305f\u3081\u306b\u3001\u4e0a\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n```\npublic protocol OptionSetType : SetAlgebraType, RawRepresentable {\n    /// An `OptionSet`'s `Element` type is normally `Self`.\n    typealias Element = Self\n    /// Convert from a value of `RawValue`, succeeding unconditionally.\n    public init(rawValue: Self.RawValue)\n}\n```\n\n\n# Equatable\u30b5\u30dd\u30fc\u30c8\n\n\u3053\u306e\u5f8c\u3001[\u56f3\u5f62\u3092\u63cf\u304f\u30b3\u30fc\u30c9\u3092\u4f8b\u306b\u3068\u3063\u305f\u8aac\u660e](http://qiita.com/mono0926/items/bb52e657df6978713334#\u56f3\u5f62\u3092\u63cf\u304f\u30b3\u30fc\u30c9\u3092\u4f8b\u306b\u3068\u3063\u305f\u8aac\u660e)\u3067\u5b9a\u7fa9\u3057\u305fstruct\u306e\u7b49\u4fa1\u6bd4\u8f03\u306b\u3064\u3044\u3066\u306e\u8a71\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u306f\u306a\u304b\u306a\u304b\u96e3\u3057\u3044 + \u30dc\u30ea\u30e5\u30fc\u30df\u30fc\u3067\u3084\u3084\u3053\u3057\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u529b\u5c3d\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n[\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u578b\u3092Self\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u9055\u3044](http://qiita.com/mono0926/items/bb52e657df6978713334#\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u578b\u3092self\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u9055\u3044)\u3067\u66f8\u3044\u305f\u5185\u5bb9\u306b\u95a2\u9023\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u578b\u304c\u53b3\u5bc6\u306a\u306e\u3067\u30a4\u30b3\u30fc\u30eb\u6bd4\u8f03\u306e\u969b\u306b\u305d\u308c\u3092\u7406\u89e3\u3057\u305f\u4e0a\u3067\u3061\u3087\u3063\u3068\u3057\u305f\u56de\u907f\u7b56\u3092\u53d6\u308b\u5fc5\u8981\u306e\u3042\u308b\u5834\u9762\u304c\u3042\u308b\u3001\u3068\u3044\u3046\u3088\u3046\u306a\u5185\u5bb9\u3067\u3059\u3002\n\n\u8ffd\u8a18\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u30bb\u30c3\u30b7\u30e7\u30f3\u3054\u89a7\u4e0b\u3055\u3044\u3002\n\n---\n\n# \u95a2\u9023\n\n- [Protocol-Oriented Programming in Swift](http://www.infoq.com/news/2015/06/protocol-oriented-swift)\n    - \u3053\u306e\u8a18\u4e8b\u66f8\u3044\u305f\u5f8c\u306b\u898b\u3064\u3051\u307e\u3057\u305f\u304c\u3001\u307b\u307c\u540c\u5185\u5bb9\u306e\u82f1\u8a9e\u8a18\u4e8b\u3067\u3059\u3002\n", "tags": ["Swift", "Protocol", "iOS", "Swift2"]}