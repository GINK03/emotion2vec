{"tags": ["Coq"], "context": "\u547d\u984c\u8ad6\u7406\u306b\u8208\u5473\u304c\u3042\u3063\u305f\u3057\uff0cCoq\u306b\u3082\u8208\u5473\u304c\u3042\u3063\u305f\uff0e\u9069\u5207\u306a\u984c\u6750\u3092\u63a2\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u3088\u3055\u305d\u3046\u306a\u3082\u306e\u3092\u898b\u3064\u3051\u305f\uff0e\u3053\u308c\u3092\u7406\u89e3\u3059\u308b\u969b\u306e\u30e1\u30e2\uff0e\n\n\u547d\u984c\u8ad6\u7406\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\n\u81ea\u7136\u6f14\u7e79\uff0c\u30b7\u30fc\u30b1\u30f3\u30c8\u8a08\u7b97\u306a\u3069\uff0c\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\uff0e\u81ea\u5206\u306e\u7406\u89e3\u3092\u5f62\u5f0f\u7684\u306b\u691c\u8a3c\u3059\u308b\u305f\u3081\u306bCoq\u3092\u4f7f\u3046\n\u547d\u984c\u8ad6\u7406\u3092\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3082\u672c\u306b\u3088\u3063\u3066\u7528\u8a9e\u7b49\u304c\u3061\u3087\u3063\u3068\u305a\u3064\u9055\u3046\n\u3053\u306e\u30e1\u30e2\u306b\u304a\u3044\u3066\u4e00\u8cab\u3057\u305f\u7528\u8a9e\u3092\u4f7f\u3046\uff0e\n\u672c\u306e\u7528\u8a9e\u3068\u306e\u5bfe\u5fdc\u3092\u660e\u78ba\u306b\u3059\u308b\nCoq\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\n\u547d\u984c\u8ad6\u7406\u3092\u984c\u6750\u306b\u3057\u3066\uff0cCoq\u306e\u6a5f\u80fd\u3092\u899a\u3048\u305f\u3044\n\n\n\u6697\u9ed9\u5f15\u6570\u3068\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u308f\u305a\u306b\u8003\u3048\u308b\nCoq\u306b\u4e0d\u6163\u308c\u306a\u305f\u3081\uff0c\u8003\u3048\u65b9\u306b\u6163\u308c\u308b\u305f\u3081\u306b\uff0c\u7701\u7565\uff0c\u30e2\u30b8\u30e5\u30fc\u30eb\uff0cNotation\u306f\u4f7f\u308f\u306a\u3044\u3067\u3057\u3070\u3089\u304f\u3084\u3063\u3066\u307f\u308b\uff0e\u305f\u3060\u3057\uff0cInit\u306f\u8aad\u307f\u8fbc\u3080\uff0e\n\nlist\u306b\u3064\u3044\u3066\n\nlist\nlist\u306fCoq.Init.Datatypes\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\nInductive list (A : Type) : Type :=\n    nil : list A | cons : A -> list A -> list A\n\n\nor\nCoq.Init.Logic\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\nInductive or (A B : Prop) : Prop :=\n    or_introl : A -> A \\/ B | or_intror : B -> A \\/ B\n\nor\u306enotation\u3082\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\n\neq\nCoq.Init.Logic\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\nInductive eq (A : Type) (x : A) : A -> Prop :=  eq_refl : x = x\n\neq\u306enotation\u3082\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\n\nIn\nCoq.Lists.List\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\nFixpoint In A (a:A) (l:list A) : Prop :=\n  match l with\n    | nil => False\n    | cons b m => b = a \\/ In A a m\n  end.\n\n\nFalse\nCoq.Init.Logic\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\nInductive False : Prop :=  \n\n\nprop\u3068SC_proves\n\n\u7c21\u6613\u7248\n\u307e\u305a\u306f\u5b9f\u969b\u306eprop\u3067\u306f\u306a\u304f\uff0c\u6700\u521d\u306ecase\u3060\u3051\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u308b\uff0e\nInductive prop1 atom : Type  : Type :=\n  | atom_prop1 : atom -> prop1 atom.\n\nInductive SC_proves1 atom : list (prop1 atom) -> prop1 atom -> Prop :=\n  | SC_init1  \u0393 P : In (prop1 atom) P \u0393 -> SC_proves1 atom \u0393 P.\n\n\u7c21\u6613\u7248\u306f\u3067\u304d\u305f\u3088\u3046\u3060\uff0e\n\nprop\n\u8ad6\u7406\u5f0f\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\nInductive prop atom : Type :=\n| atom_prop : atom -> prop atom\n| bot_prop : prop atom\n| top_prop : prop atom\n| and_prop : prop atom -> prop atom -> prop atom\n| or_prop : prop atom -> prop atom -> prop atom\n| impl_prop : prop atom -> prop atom -> prop atom.\n\n\u3059\u306a\u308f\u3061\u8ad6\u7406\u5f0f\u306f\u6b21\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\uff0e\n\n\u539f\u5b50\u8ad6\u7406\u5f0f\n\u22a5\n\u22a4\n\u304b\u3064\n\u307e\u305f\u306f\n\u306a\u3089\u3070\n\n\nnot_prop\n\u5426\u5b9a\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\nDefinition not_prop atom (P : prop atom) :=\n  impl_prop atom P (bot_prop atom).\n\n\u3053\u308c\u306f\uff0cP\u306e\u5426\u5b9a\u306f\u300cP\u2283\u22a5\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\uff0e\n\nSC_proves\n\u30b7\u30fc\u30b1\u30f3\u30c8\u8a08\u7b97\u306e\u63a8\u8ad6\u898f\u5247\u3092\u5b9a\u3081\u308b\uff0e\nInductive SC_proves atom : list (prop atom) -> prop atom -> Prop :=\n| SC_init P \u0393 : In (prop atom) P \u0393 -> SC_proves atom \u0393 P\n| SC_bot_elim P \u0393 : In (prop atom) (bot_prop atom) \u0393 -> SC_proves atom \u0393 P\n| SC_top_intro \u0393 : SC_proves atom \u0393 (top_prop atom)\n| SC_and_intro \u0393 P Q : SC_proves atom \u0393 P -> SC_proves atom \u0393 Q -> SC_proves atom \u0393 (and_prop atom P Q)\n| SC_and_elim \u0393 P Q R : In (prop atom) (and_prop atom P Q) \u0393 -> \n        SC_proves atom (cons P (cons Q \u0393)) R -> SC_proves atom \u0393 R\n| SC_or_introl \u0393 P Q : SC_proves atom \u0393 P -> SC_proves atom \u0393 (or_prop atom P Q)\n| SC_or_intror \u0393 P Q : SC_proves atom \u0393 Q -> SC_proves atom \u0393 (or_prop atom P Q)\n| SC_or_elim \u0393 P Q R : In (prop atom) (or_prop atom P Q) \u0393 -> SC_proves atom (cons P \u0393)  R ->\n        SC_proves atom (cons Q \u0393) R -> SC_proves atom \u0393 R\n| SC_impl_intro \u0393 P Q : SC_proves atom (cons P \u0393) Q -> SC_proves atom \u0393 (impl_prop atom P Q)\n| SC_impl_elim \u0393 P Q R : In (prop atom) (impl_prop atom P Q) \u0393 -> SC_proves atom \u0393 P ->\n        SC_proves atom (cons Q \u0393) R -> SC_proves atom \u0393 R.\n\n\u3053\u308c\u306f\uff0c\u30b7\u30fc\u30b1\u30f3\u30c8\u8a08\u7b97\u306e\u63a8\u8ad6\u898f\u5247\u304c\u4ee5\u4e0b\u306e10\u500b\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\uff0e\n\nP\u304c\u0393\u306b\u3042\u308b\u306a\u3089\u0393\u21d2P\n\u22a5\u304c\u0393\u306b\u3042\u308b\u306a\u3089\u4efb\u610f\u306eP\u306b\u3064\u3044\u3066\u0393\u21d2P\n\u4efb\u610f\u306e\u0393\u306b\u3064\u3044\u3066\u0393\u21d2\u22a4\n\u0393\u21d2P\u304b\u3064\u0393\u21d2Q\u306a\u3089\u0393\u21d2P\u2227Q\nP\u2227Q\u304c\u0393\u306b\u3042\u308a\uff0cP,Q,\u0393\u21d2R\u306a\u3089\u0393\u21d2R\n\u0393\u21d2P\u306a\u3089\u3070\u0393\u21d2P\u2228Q\n\u0393\u21d2Q\u306a\u3089\u3070\u0393\u21d2P\u2228Q\nP\u2228Q\u304c\u0393\u306b\u3042\u308a\uff0cP,\u0393\u21d2R\u304b\u3064Q,\u0393\u21d2R\u306a\u3089\u0393\u21d2R\nP,\u0393\u21d2Q\u306a\u3089\u0393\u21d2P\u2283Q\nP\u2283Q\u304c\u0393\u306b\u3042\u308a\uff0c\u0393\u21d2P\u304b\u3064Q,\u0393\u21d2R\u306a\u3089\u0393\u21d2R\n\n\n\u4f8b\u984c\n\u3044\u304f\u3064\u304b\u4f8b\u984c\u3092\u3084\u3063\u3066\u307f\u305f\u3044\n\nP\u2283P\nTheorem PP : forall atom P, SC_proves atom nil (impl_prop atom P P).\nProof.\nintros.\napply SC_impl_intro.\napply SC_init.\nsimpl. apply or_introl. reflexivity. Qed.\n\n\nP\u2227Q\u2283Q\u2227P\nTheorem and_comm : forall atom P Q, SC_proves atom nil \n    (impl_prop atom (and_prop atom P Q) (and_prop atom Q P)).\nProof.\n intros.\n apply SC_impl_intro.\n apply SC_and_intro.\n + apply (SC_and_elim atom _ P Q _).\n    - simpl. apply or_introl. reflexivity.\n    - apply SC_init. simpl. apply or_intror. apply or_introl. reflexivity.\n + apply (SC_and_elim atom _ P Q _).\n    - simpl. apply or_introl. reflexivity.\n    - apply SC_init. simpl. apply or_introl. reflexivity.\nQed.\n\n\nP\u2228Q\u2283Q\u2228P\nTheorem or_comm : forall atom P Q, SC_proves atom nil\n    (impl_prop atom (or_prop atom P Q) (or_prop atom Q P)).\nProof.\n  intros.\n  apply SC_impl_intro.\n  apply (SC_or_elim _ (cons (or_prop atom P Q) nil) P Q (or_prop atom Q P)).\n  + simpl. apply or_introl. reflexivity.\n  + apply SC_or_intror. apply SC_init. simpl. apply or_introl. reflexivity.\n  + apply SC_or_introl. apply SC_init. simpl. apply or_introl. reflexivity.\nQed.\n\n\nP\u2283(Q\u2283P)\nTheorem PQP : forall atom P Q, SC_proves atom nil \n    (impl_prop atom P (impl_prop atom Q P)).\nProof.\n  intros.\n  apply SC_impl_intro.\n  apply SC_impl_intro.\n  apply SC_init.\n  simpl. apply or_intror. apply or_introl. reflexivity.\nQed.\n\n\nP\u2283Q,Q\u2283R\u21d2P\u2283R\nTheorem syllogism : forall atom P Q R, SC_proves atom\n    (cons (impl_prop atom P Q) (cons (impl_prop atom Q R) nil)) (impl_prop atom P R).\nProof.\n  intros.\n  apply SC_impl_intro.\n  apply (SC_impl_elim _ _ P Q R).\n  +  simpl. apply or_intror. apply or_introl. reflexivity.\n  +  apply SC_init. simpl. apply or_introl. reflexivity.\n  +  apply (SC_impl_elim _ _ Q R R).\n      -  simpl. apply or_intror. apply or_intror. apply or_intror. apply or_introl. reflexivity.\n      -  apply SC_init. simpl. apply or_introl. reflexivity.\n      -  apply SC_init. simpl. apply or_introl. reflexivity.\nQed.\n\n\n\u22a5\u2283P\nTheorem exp : forall atom P, SC_proves atom nil \n      (impl_prop atom (bot_prop atom) P).\nProof.\n  intros.\n  apply SC_impl_intro.\n  apply SC_bot_elim.\n  simpl. apply or_introl. reflexivity.\nQed.\n\n\u3053\u306e\u8fba\u3067\u3084\u3063\u3068\u6c17\u3065\u3044\u305f\uff0e\u4eca\u307e\u3067\u3084\u3063\u3066\u305f\u306e\u306f\u76f4\u89b3\u4e3b\u7fa9\u8ad6\u7406\u3067\u3057\u305f\uff0e\n\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\uff0e\n\nCoq\u306e\u4fbf\u5229\u5316\u3092\u3084\u3063\u3066\u307f\u308b\n\u4eca\u307e\u3067\u3067\u308f\u304b\u3063\u305f\u3053\u3068\u306f\uff0c\u300cCoq\u3092\u4f7f\u3063\u3066\u547d\u984c\u8ad6\u7406\u306e\u3044\u308d\u3044\u308d\u306a\u3053\u3068\u3067\u304d\u305d\u3046\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u4e00\u65b9\u3067\u300c\u672c\u8cea\u7684\u3067\u306a\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u305f\u304f\u3055\u3093\u5165\u529b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3082\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\u3053\u3053\u3067\u306f\uff0cimplicit argument\uff0cContext\uff0cNotation\u3092\u4f7f\u3063\u3066Coq\u3092\u4f7f\u3044\u3084\u3059\u304f\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\nimplicit arguments\nimplicit arguments\u3092\u4f7f\u3046\u3068In\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nFixpoint In {A} (a:A) (l:list A) : Prop :=\n  match l with\n    | nil => False\n    | cons b m => b = a \\/ In a m\n  end.\n\nprop\u306e\u5b9a\u7fa9\u3082\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\uff0e\nInductive prop {atom} : Type :=\n| atom_prop : atom -> prop\n| bot_prop : prop\n| top_prop : prop\n| and_prop : prop -> prop  -> prop\n| or_prop : prop  -> prop  -> prop\n| impl_prop : prop  -> prop  -> prop.\n\n\u30b7\u30fc\u30b1\u30f3\u30c8\u8a08\u7b97\u306e\u63a8\u8ad6\u898f\u5247\u3082\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nInductive SC_proves {atom} : list (@prop atom) -> @prop atom -> Prop :=\n| SC_init P \u0393 : In P \u0393 -> SC_proves \u0393 P\n| SC_bot_elim P \u0393 : In bot_prop \u0393 -> SC_proves \u0393 P\n| SC_top_intro \u0393 : SC_proves \u0393 top_prop\n| SC_and_intro \u0393 P Q : SC_proves \u0393 P -> SC_proves \u0393 Q -> SC_proves \u0393 (and_prop P Q)\n| SC_and_elim \u0393 P Q R : In (and_prop P Q) \u0393 -> \n        SC_proves (cons P (cons Q \u0393)) R -> SC_proves \u0393 R\n| SC_or_introl \u0393 P Q : SC_proves \u0393 P -> SC_proves \u0393 (or_prop P Q)\n| SC_or_intror \u0393 P Q : SC_proves \u0393 Q -> SC_proves \u0393 (or_prop P Q)\n| SC_or_elim \u0393 P Q R : In (or_prop P Q) \u0393 -> SC_proves (cons P \u0393)  R ->\n        SC_proves (cons Q \u0393) R -> SC_proves \u0393 R\n| SC_impl_intro \u0393 P Q : SC_proves (cons P \u0393) Q -> SC_proves \u0393 (impl_prop P Q)\n| SC_impl_elim \u0393 P Q R : In (impl_prop P Q) \u0393 -> SC_proves \u0393 P ->\n        SC_proves (cons Q \u0393) R -> SC_proves \u0393 R.\n\n\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\uff0e\n\nContext\n\u6b21\u306bContext\u3092\u4f7f\u3063\u3066atom\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\u6b21\u306e\u884c\u3092\u5148\u982d\u306e\u65b9\u306b\u8ffd\u52a0\u3057\u307e\u3059\uff0e\nContext {atom : Type}.\n\nprop\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nInductive prop : Type :=\n| atom_prop : atom -> prop\n| bot_prop : prop\n| top_prop : prop\n| and_prop : prop -> prop  -> prop\n| or_prop : prop  -> prop  -> prop\n| impl_prop : prop  -> prop  -> prop.\n\n\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\uff0e\n\nNotation\n\u6700\u5f8c\u306bNotation\u3092\u8a2d\u5b9a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\u6b21\u306e\u3088\u3046\u306a\u884c\u3092\u8ffd\u52a0\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\nNotation \"\u22a5\" := bot_prop.\nNotation \"\u22a4\" := top_prop.\nInfix \"\u2227\" := and_prop (left associativity, at level 52).\nInfix \"\u2228\" := or_prop (left associativity, at level 53).\nInfix \"\u2283\" := impl_prop (right associativity, at level 54).\n\nNotation \"\u00ac P\" := (not_prop P) (at level 51).\n\nInfix \"\u2208\" := In (right associativity, at level 55).\nNotation \"x \u2192 y\" := (x -> y) (at level 99, y at level 200, right associativity).\n\nOpen Scope list_scope.\n\nReserved Notation \"\u0393 \u21d2 P\" (no associativity, at level 61).\n\nNotation \"\u21d2 P\" := (nil \u21d2 P) (no associativity, at level 61).\n\n\u63a8\u8ad6\u898f\u5247\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\uff0e\nInductive SC_proves : list prop -> prop -> Prop :=\n| SC_init P \u0393 : P \u2208 \u0393 \u2192 \u0393  \u21d2 P\n| SC_bot_elim P \u0393 : \u22a5 \u2208 \u0393 \u2192 \u0393 \u21d2 P\n| SC_top_intro \u0393 : \u0393 \u21d2 \u22a4\n| SC_and_intro \u0393 P Q : \u0393 \u21d2 P \u2192 \u0393 \u21d2 Q \u2192 \u0393 \u21d2 P \u2227 Q\n| SC_and_elim \u0393 P Q R : P \u2227 Q \u2208 \u0393 \u2192 P :: Q :: \u0393 \u21d2 R \u2192 \u0393 \u21d2 R\n| SC_or_introl \u0393 P Q :  \u0393 \u21d2 P \u2192 \u0393 \u21d2 P \u2228 Q\n| SC_or_intror \u0393 P Q : \u0393 \u21d2 Q \u2192 \u0393 \u21d2 P \u2228 Q\n| SC_or_elim \u0393 P Q R : P \u2228 Q \u2208 \u0393 \u2192 P :: \u0393 \u21d2 R \u2192 Q :: \u0393 \u21d2 R \u2192 \u0393 \u21d2 R\n| SC_impl_intro \u0393 P Q : P :: \u0393 \u21d2 Q \u2192 \u0393 \u21d2 P \u2283 Q\n| SC_impl_elim \u0393 P Q R : P \u2283 Q \u2208 \u0393 \u2192 \u0393 \u21d2 P \u2192 Q :: \u0393 \u21d2 R \u2192 \u0393 \u21d2 R\n  where \"\u0393 \u21d2 P\" := (SC_proves \u0393 P).\n\n\u4f8b\u984c\u306e\u4e3b\u5f35\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nTheorem PP : forall P, \u21d2 P\u2283P.\nTheorem and_comm : forall P Q, \u21d2 P\u2227Q \u2283 Q\u2227P.\nTheorem or_comm : forall P Q, \u21d2 P\u2228Q \u2283 Q\u2228P.\nTheorem PQP : forall P Q, \u21d2 P \u2283 Q\u2283P.\nTheorem syllogism : forall P Q R, P\u2283Q :: Q\u2283R :: nil \u21d2 P\u2283R.\nTheorem exp : forall P, \u21d2 \u22a5\u2283P.\n\n\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\uff0e\n\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc\u3092\u4f7f\u3063\u3066\u8a18\u53f7\u3092\u5165\u529b\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3082\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\n\n\u547d\u984c\u8ad6\u7406\u306b\u8208\u5473\u304c\u3042\u3063\u305f\u3057\uff0cCoq\u306b\u3082\u8208\u5473\u304c\u3042\u3063\u305f\uff0e\u9069\u5207\u306a\u984c\u6750\u3092\u63a2\u3057\u3066\u3044\u305f\u3068\u3053\u308d[\u3088\u3055\u305d\u3046\u306a\u3082\u306e](https://github.com/dschepler/coq-sequent-calculus)\u3092\u898b\u3064\u3051\u305f\uff0e\u3053\u308c\u3092\u7406\u89e3\u3059\u308b\u969b\u306e\u30e1\u30e2\uff0e\n\n\n+ \u547d\u984c\u8ad6\u7406\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\n+ \u81ea\u7136\u6f14\u7e79\uff0c\u30b7\u30fc\u30b1\u30f3\u30c8\u8a08\u7b97\u306a\u3069\uff0c\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\uff0e\u81ea\u5206\u306e\u7406\u89e3\u3092\u5f62\u5f0f\u7684\u306b\u691c\u8a3c\u3059\u308b\u305f\u3081\u306bCoq\u3092\u4f7f\u3046\n+ \u547d\u984c\u8ad6\u7406\u3092\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3082\u672c\u306b\u3088\u3063\u3066\u7528\u8a9e\u7b49\u304c\u3061\u3087\u3063\u3068\u305a\u3064\u9055\u3046\n+ \u3053\u306e\u30e1\u30e2\u306b\u304a\u3044\u3066\u4e00\u8cab\u3057\u305f\u7528\u8a9e\u3092\u4f7f\u3046\uff0e\n+ \u672c\u306e\u7528\u8a9e\u3068\u306e\u5bfe\u5fdc\u3092\u660e\u78ba\u306b\u3059\u308b\n+ Coq\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\n+ \u547d\u984c\u8ad6\u7406\u3092\u984c\u6750\u306b\u3057\u3066\uff0cCoq\u306e\u6a5f\u80fd\u3092\u899a\u3048\u305f\u3044\n\n# \u6697\u9ed9\u5f15\u6570\u3068\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u308f\u305a\u306b\u8003\u3048\u308b\n\nCoq\u306b\u4e0d\u6163\u308c\u306a\u305f\u3081\uff0c\u8003\u3048\u65b9\u306b\u6163\u308c\u308b\u305f\u3081\u306b\uff0c\u7701\u7565\uff0c\u30e2\u30b8\u30e5\u30fc\u30eb\uff0cNotation\u306f\u4f7f\u308f\u306a\u3044\u3067\u3057\u3070\u3089\u304f\u3084\u3063\u3066\u307f\u308b\uff0e\u305f\u3060\u3057\uff0cInit\u306f\u8aad\u307f\u8fbc\u3080\uff0e\n\n## list\u306b\u3064\u3044\u3066\n\n### list\n\nlist\u306f`Coq.Init.Datatypes`\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\n\n```\nInductive list (A : Type) : Type :=\n    nil : list A | cons : A -> list A -> list A\n```\n\n### or\n\n`Coq.Init.Logic`\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\n\n```\nInductive or (A B : Prop) : Prop :=\n    or_introl : A -> A \\/ B | or_intror : B -> A \\/ B\n```\n\nor\u306enotation\u3082\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\n\n### eq\n\n`Coq.Init.Logic`\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\n\n```\nInductive eq (A : Type) (x : A) : A -> Prop :=  eq_refl : x = x\n```\n\neq\u306enotation\u3082\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\n\n### In\n\n`Coq.Lists.List`\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\n\n```\nFixpoint In A (a:A) (l:list A) : Prop :=\n  match l with\n    | nil => False\n    | cons b m => b = a \\/ In A a m\n  end.\n```\n\n### False\n\n`Coq.Init.Logic`\u3067\u5b9a\u7fa9\u3055\u308c\u308b\uff0e\n\n```\nInductive False : Prop :=  \n```\n\n## prop\u3068SC_proves\n\n### \u7c21\u6613\u7248\n\n\u307e\u305a\u306f\u5b9f\u969b\u306eprop\u3067\u306f\u306a\u304f\uff0c\u6700\u521d\u306ecase\u3060\u3051\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u308b\uff0e\n\n```\nInductive prop1 atom : Type  : Type :=\n  | atom_prop1 : atom -> prop1 atom.\n  \nInductive SC_proves1 atom : list (prop1 atom) -> prop1 atom -> Prop :=\n  | SC_init1  \u0393 P : In (prop1 atom) P \u0393 -> SC_proves1 atom \u0393 P.\n```\n\n\u7c21\u6613\u7248\u306f\u3067\u304d\u305f\u3088\u3046\u3060\uff0e\n\n### prop\n\n\u8ad6\u7406\u5f0f\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\n\n```\nInductive prop atom : Type :=\n| atom_prop : atom -> prop atom\n| bot_prop : prop atom\n| top_prop : prop atom\n| and_prop : prop atom -> prop atom -> prop atom\n| or_prop : prop atom -> prop atom -> prop atom\n| impl_prop : prop atom -> prop atom -> prop atom.\n```\n\n\u3059\u306a\u308f\u3061\u8ad6\u7406\u5f0f\u306f\u6b21\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\uff0e\n\n+ \u539f\u5b50\u8ad6\u7406\u5f0f\n+ \u22a5\n+ \u22a4\n+ \u304b\u3064\n+ \u307e\u305f\u306f\n+ \u306a\u3089\u3070\n\n### not_prop\n\n\u5426\u5b9a\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\n\n```\nDefinition not_prop atom (P : prop atom) :=\n  impl_prop atom P (bot_prop atom).\n```\n\n\u3053\u308c\u306f\uff0cP\u306e\u5426\u5b9a\u306f\u300cP\u2283\u22a5\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\uff0e\n\n### SC_proves\n\n\u30b7\u30fc\u30b1\u30f3\u30c8\u8a08\u7b97\u306e\u63a8\u8ad6\u898f\u5247\u3092\u5b9a\u3081\u308b\uff0e\n\n```\nInductive SC_proves atom : list (prop atom) -> prop atom -> Prop :=\n| SC_init P \u0393 : In (prop atom) P \u0393 -> SC_proves atom \u0393 P\n| SC_bot_elim P \u0393 : In (prop atom) (bot_prop atom) \u0393 -> SC_proves atom \u0393 P\n| SC_top_intro \u0393 : SC_proves atom \u0393 (top_prop atom)\n| SC_and_intro \u0393 P Q : SC_proves atom \u0393 P -> SC_proves atom \u0393 Q -> SC_proves atom \u0393 (and_prop atom P Q)\n| SC_and_elim \u0393 P Q R : In (prop atom) (and_prop atom P Q) \u0393 -> \n        SC_proves atom (cons P (cons Q \u0393)) R -> SC_proves atom \u0393 R\n| SC_or_introl \u0393 P Q : SC_proves atom \u0393 P -> SC_proves atom \u0393 (or_prop atom P Q)\n| SC_or_intror \u0393 P Q : SC_proves atom \u0393 Q -> SC_proves atom \u0393 (or_prop atom P Q)\n| SC_or_elim \u0393 P Q R : In (prop atom) (or_prop atom P Q) \u0393 -> SC_proves atom (cons P \u0393)  R ->\n        SC_proves atom (cons Q \u0393) R -> SC_proves atom \u0393 R\n| SC_impl_intro \u0393 P Q : SC_proves atom (cons P \u0393) Q -> SC_proves atom \u0393 (impl_prop atom P Q)\n| SC_impl_elim \u0393 P Q R : In (prop atom) (impl_prop atom P Q) \u0393 -> SC_proves atom \u0393 P ->\n        SC_proves atom (cons Q \u0393) R -> SC_proves atom \u0393 R.\n```\n\n\u3053\u308c\u306f\uff0c\u30b7\u30fc\u30b1\u30f3\u30c8\u8a08\u7b97\u306e\u63a8\u8ad6\u898f\u5247\u304c\u4ee5\u4e0b\u306e10\u500b\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\uff0e\n\n+ P\u304c\u0393\u306b\u3042\u308b\u306a\u3089\u0393\u21d2P\n+ \u22a5\u304c\u0393\u306b\u3042\u308b\u306a\u3089\u4efb\u610f\u306eP\u306b\u3064\u3044\u3066\u0393\u21d2P\n+ \u4efb\u610f\u306e\u0393\u306b\u3064\u3044\u3066\u0393\u21d2\u22a4\n+ \u0393\u21d2P\u304b\u3064\u0393\u21d2Q\u306a\u3089\u0393\u21d2P\u2227Q\n+ P\u2227Q\u304c\u0393\u306b\u3042\u308a\uff0cP,Q,\u0393\u21d2R\u306a\u3089\u0393\u21d2R\n+ \u0393\u21d2P\u306a\u3089\u3070\u0393\u21d2P\u2228Q\n+ \u0393\u21d2Q\u306a\u3089\u3070\u0393\u21d2P\u2228Q\n+ P\u2228Q\u304c\u0393\u306b\u3042\u308a\uff0cP,\u0393\u21d2R\u304b\u3064Q,\u0393\u21d2R\u306a\u3089\u0393\u21d2R\n+ P,\u0393\u21d2Q\u306a\u3089\u0393\u21d2P\u2283Q\n+ P\u2283Q\u304c\u0393\u306b\u3042\u308a\uff0c\u0393\u21d2P\u304b\u3064Q,\u0393\u21d2R\u306a\u3089\u0393\u21d2R\n\n### \u4f8b\u984c\n\n\u3044\u304f\u3064\u304b\u4f8b\u984c\u3092\u3084\u3063\u3066\u307f\u305f\u3044\n\n#### P\u2283P\n\n```\nTheorem PP : forall atom P, SC_proves atom nil (impl_prop atom P P).\nProof.\nintros.\napply SC_impl_intro.\napply SC_init.\nsimpl. apply or_introl. reflexivity. Qed.\n```\n\n#### P\u2227Q\u2283Q\u2227P\n\n```\nTheorem and_comm : forall atom P Q, SC_proves atom nil \n    (impl_prop atom (and_prop atom P Q) (and_prop atom Q P)).\nProof.\n intros.\n apply SC_impl_intro.\n apply SC_and_intro.\n + apply (SC_and_elim atom _ P Q _).\n    - simpl. apply or_introl. reflexivity.\n    - apply SC_init. simpl. apply or_intror. apply or_introl. reflexivity.\n + apply (SC_and_elim atom _ P Q _).\n    - simpl. apply or_introl. reflexivity.\n    - apply SC_init. simpl. apply or_introl. reflexivity.\nQed.\n```\n\n#### P\u2228Q\u2283Q\u2228P\n\n```\nTheorem or_comm : forall atom P Q, SC_proves atom nil\n    (impl_prop atom (or_prop atom P Q) (or_prop atom Q P)).\nProof.\n  intros.\n  apply SC_impl_intro.\n  apply (SC_or_elim _ (cons (or_prop atom P Q) nil) P Q (or_prop atom Q P)).\n  + simpl. apply or_introl. reflexivity.\n  + apply SC_or_intror. apply SC_init. simpl. apply or_introl. reflexivity.\n  + apply SC_or_introl. apply SC_init. simpl. apply or_introl. reflexivity.\nQed.\n```\n\n#### P\u2283(Q\u2283P)\n\n```\nTheorem PQP : forall atom P Q, SC_proves atom nil \n    (impl_prop atom P (impl_prop atom Q P)).\nProof.\n  intros.\n  apply SC_impl_intro.\n  apply SC_impl_intro.\n  apply SC_init.\n  simpl. apply or_intror. apply or_introl. reflexivity.\nQed.\n```\n\n#### P\u2283Q,Q\u2283R\u21d2P\u2283R\n\n```\nTheorem syllogism : forall atom P Q R, SC_proves atom\n    (cons (impl_prop atom P Q) (cons (impl_prop atom Q R) nil)) (impl_prop atom P R).\nProof.\n  intros.\n  apply SC_impl_intro.\n  apply (SC_impl_elim _ _ P Q R).\n  +  simpl. apply or_intror. apply or_introl. reflexivity.\n  +  apply SC_init. simpl. apply or_introl. reflexivity.\n  +  apply (SC_impl_elim _ _ Q R R).\n      -  simpl. apply or_intror. apply or_intror. apply or_intror. apply or_introl. reflexivity.\n      -  apply SC_init. simpl. apply or_introl. reflexivity.\n      -  apply SC_init. simpl. apply or_introl. reflexivity.\nQed.\n```\n\n#### \u22a5\u2283P\n\n```\nTheorem exp : forall atom P, SC_proves atom nil \n      (impl_prop atom (bot_prop atom) P).\nProof.\n  intros.\n  apply SC_impl_intro.\n  apply SC_bot_elim.\n  simpl. apply or_introl. reflexivity.\nQed.\n```\n\n\u3053\u306e\u8fba\u3067\u3084\u3063\u3068\u6c17\u3065\u3044\u305f\uff0e\u4eca\u307e\u3067\u3084\u3063\u3066\u305f\u306e\u306f\u76f4\u89b3\u4e3b\u7fa9\u8ad6\u7406\u3067\u3057\u305f\uff0e\n\n\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://gist.github.com/fluiddynamics/60a4d4683dadef090a3a0685cfaa9a76/e719e6f8bb577d38953f4984c51937c34ee50d66)\u306b\u3042\u308a\u307e\u3059\uff0e\n\n# Coq\u306e\u4fbf\u5229\u5316\u3092\u3084\u3063\u3066\u307f\u308b\n\n\u4eca\u307e\u3067\u3067\u308f\u304b\u3063\u305f\u3053\u3068\u306f\uff0c\u300cCoq\u3092\u4f7f\u3063\u3066\u547d\u984c\u8ad6\u7406\u306e\u3044\u308d\u3044\u308d\u306a\u3053\u3068\u3067\u304d\u305d\u3046\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u4e00\u65b9\u3067\u300c\u672c\u8cea\u7684\u3067\u306a\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u305f\u304f\u3055\u3093\u5165\u529b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3082\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\u3053\u3053\u3067\u306f\uff0cimplicit argument\uff0cContext\uff0cNotation\u3092\u4f7f\u3063\u3066Coq\u3092\u4f7f\u3044\u3084\u3059\u304f\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n## implicit arguments\n\nimplicit arguments\u3092\u4f7f\u3046\u3068In\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```\nFixpoint In {A} (a:A) (l:list A) : Prop :=\n  match l with\n    | nil => False\n    | cons b m => b = a \\/ In a m\n  end.\n```\n\nprop\u306e\u5b9a\u7fa9\u3082\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```\nInductive prop {atom} : Type :=\n| atom_prop : atom -> prop\n| bot_prop : prop\n| top_prop : prop\n| and_prop : prop -> prop  -> prop\n| or_prop : prop  -> prop  -> prop\n| impl_prop : prop  -> prop  -> prop.\n```\n\n\u30b7\u30fc\u30b1\u30f3\u30c8\u8a08\u7b97\u306e\u63a8\u8ad6\u898f\u5247\u3082\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```\nInductive SC_proves {atom} : list (@prop atom) -> @prop atom -> Prop :=\n| SC_init P \u0393 : In P \u0393 -> SC_proves \u0393 P\n| SC_bot_elim P \u0393 : In bot_prop \u0393 -> SC_proves \u0393 P\n| SC_top_intro \u0393 : SC_proves \u0393 top_prop\n| SC_and_intro \u0393 P Q : SC_proves \u0393 P -> SC_proves \u0393 Q -> SC_proves \u0393 (and_prop P Q)\n| SC_and_elim \u0393 P Q R : In (and_prop P Q) \u0393 -> \n        SC_proves (cons P (cons Q \u0393)) R -> SC_proves \u0393 R\n| SC_or_introl \u0393 P Q : SC_proves \u0393 P -> SC_proves \u0393 (or_prop P Q)\n| SC_or_intror \u0393 P Q : SC_proves \u0393 Q -> SC_proves \u0393 (or_prop P Q)\n| SC_or_elim \u0393 P Q R : In (or_prop P Q) \u0393 -> SC_proves (cons P \u0393)  R ->\n        SC_proves (cons Q \u0393) R -> SC_proves \u0393 R\n| SC_impl_intro \u0393 P Q : SC_proves (cons P \u0393) Q -> SC_proves \u0393 (impl_prop P Q)\n| SC_impl_elim \u0393 P Q R : In (impl_prop P Q) \u0393 -> SC_proves \u0393 P ->\n        SC_proves (cons Q \u0393) R -> SC_proves \u0393 R.\n```\n\n\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://gist.github.com/fluiddynamics/60a4d4683dadef090a3a0685cfaa9a76/f935b70b522576e12a63d2d37f7fd20c562f7d83)\u306b\u3042\u308a\u307e\u3059\uff0e\n\n## Context\n\n\u6b21\u306bContext\u3092\u4f7f\u3063\u3066atom\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n\u6b21\u306e\u884c\u3092\u5148\u982d\u306e\u65b9\u306b\u8ffd\u52a0\u3057\u307e\u3059\uff0e\n\n```\nContext {atom : Type}.\n```\n\nprop\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```\nInductive prop : Type :=\n| atom_prop : atom -> prop\n| bot_prop : prop\n| top_prop : prop\n| and_prop : prop -> prop  -> prop\n| or_prop : prop  -> prop  -> prop\n| impl_prop : prop  -> prop  -> prop.\n```\n\n\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://gist.github.com/fluiddynamics/60a4d4683dadef090a3a0685cfaa9a76/3d0c9392c6a6e4f2a7c31b82211f579da26b00ea)\u306b\u3042\u308a\u307e\u3059\uff0e\n\n\n## Notation\n\n\u6700\u5f8c\u306bNotation\u3092\u8a2d\u5b9a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n\u6b21\u306e\u3088\u3046\u306a\u884c\u3092\u8ffd\u52a0\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\n```\nNotation \"\u22a5\" := bot_prop.\nNotation \"\u22a4\" := top_prop.\nInfix \"\u2227\" := and_prop (left associativity, at level 52).\nInfix \"\u2228\" := or_prop (left associativity, at level 53).\nInfix \"\u2283\" := impl_prop (right associativity, at level 54).\n\nNotation \"\u00ac P\" := (not_prop P) (at level 51).\n\nInfix \"\u2208\" := In (right associativity, at level 55).\nNotation \"x \u2192 y\" := (x -> y) (at level 99, y at level 200, right associativity).\n\nOpen Scope list_scope.\n\nReserved Notation \"\u0393 \u21d2 P\" (no associativity, at level 61).\n\nNotation \"\u21d2 P\" := (nil \u21d2 P) (no associativity, at level 61).\n```\n\n\u63a8\u8ad6\u898f\u5247\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\uff0e\n\n```\nInductive SC_proves : list prop -> prop -> Prop :=\n| SC_init P \u0393 : P \u2208 \u0393 \u2192 \u0393  \u21d2 P\n| SC_bot_elim P \u0393 : \u22a5 \u2208 \u0393 \u2192 \u0393 \u21d2 P\n| SC_top_intro \u0393 : \u0393 \u21d2 \u22a4\n| SC_and_intro \u0393 P Q : \u0393 \u21d2 P \u2192 \u0393 \u21d2 Q \u2192 \u0393 \u21d2 P \u2227 Q\n| SC_and_elim \u0393 P Q R : P \u2227 Q \u2208 \u0393 \u2192 P :: Q :: \u0393 \u21d2 R \u2192 \u0393 \u21d2 R\n| SC_or_introl \u0393 P Q :  \u0393 \u21d2 P \u2192 \u0393 \u21d2 P \u2228 Q\n| SC_or_intror \u0393 P Q : \u0393 \u21d2 Q \u2192 \u0393 \u21d2 P \u2228 Q\n| SC_or_elim \u0393 P Q R : P \u2228 Q \u2208 \u0393 \u2192 P :: \u0393 \u21d2 R \u2192 Q :: \u0393 \u21d2 R \u2192 \u0393 \u21d2 R\n| SC_impl_intro \u0393 P Q : P :: \u0393 \u21d2 Q \u2192 \u0393 \u21d2 P \u2283 Q\n| SC_impl_elim \u0393 P Q R : P \u2283 Q \u2208 \u0393 \u2192 \u0393 \u21d2 P \u2192 Q :: \u0393 \u21d2 R \u2192 \u0393 \u21d2 R\n  where \"\u0393 \u21d2 P\" := (SC_proves \u0393 P).\n```\n\n\u4f8b\u984c\u306e\u4e3b\u5f35\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```\nTheorem PP : forall P, \u21d2 P\u2283P.\nTheorem and_comm : forall P Q, \u21d2 P\u2227Q \u2283 Q\u2227P.\nTheorem or_comm : forall P Q, \u21d2 P\u2228Q \u2283 Q\u2228P.\nTheorem PQP : forall P Q, \u21d2 P \u2283 Q\u2283P.\nTheorem syllogism : forall P Q R, P\u2283Q :: Q\u2283R :: nil \u21d2 P\u2283R.\nTheorem exp : forall P, \u21d2 \u22a5\u2283P.\n```\n\n\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://gist.github.com/fluiddynamics/60a4d4683dadef090a3a0685cfaa9a76/ab6e2b74f6f4b250b29fd981807d61a9a75a9604)\u306b\u3042\u308a\u307e\u3059\uff0e\n\n\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc\u3092\u4f7f\u3063\u3066\u8a18\u53f7\u3092\u5165\u529b\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/lion/items/0735cc0db8918372834d)\u3082\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\n"}