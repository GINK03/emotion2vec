{"context": "\n\nTable of content\n\nEnvironment\n\n\n1.1. Command line\n1.2. pip\n1.3. pyenv\n1.4. virtualenv\n1.5. iPython Notebook\n\n\nModule\nFile access\nDatabase access\nPlotting with matplotlib\n\n\n1. Environment\n\n1.1. Command line\n\nTo execute a python script:\n\n$ python myscript.py\n\n\nTo open python command line:\n\n$ python\n\n\n1.2. pip\n\n\npip is a Python package manager.\n\npip is already installed for Python 2 >=2.7.9 or Python 3 >=3.4.\nIf your environment has no pip, you can install pip by the following steps:\n\n$ wget https://bootstrap.pypa.io/get-pip.py\n$ python get-pip.py\n\n\nReference: https://pip.pypa.io/en/stable/user_guide\n\n\n\n1.3. pyenv\n\nManage multiple versions of Python like rbenv in Ruby\nhttps://github.com/yyuu/pyenv\n\n\n1.4. virtualenv\n\nA tool to create multiple Python environments\nCan use virtualenv directly, or use pyenv-virtualenv, a plugin of pyenv\nvirtualenv: https://pypi.python.org/pypi/virtualenv\n\npyenv-virtualenv: https://github.com/yyuu/pyenv-virtualenv\n\n\n\n1.5. iPython Notebook\n\nAn interactive Python environment\nWrite & execute Python code, markdown, mathmatical notations in LaTex, plots & media.\nCan be used for experiment, demo, presentation & communication\n\niPython Notebook is currently renamed to Jupyter Notebook\n\nhttp://jupyter.org/\n\n\nInstall iPython Notebook with pip\n$ pip install jupyter\n\n\nNote: iPython works on Python2.7 or Python3.3 or above.\n\n\nStart iPython Notebook\n$ jupyter notebook\n\n\nUsing iPython Notebook\n\nBrowse file from directory tree\nOpen existing notebook\nCreate new notebook\nWrite python code in cell\nWrite markdown text in cell (normal text, Latex)\nNew cell above/below a current cell\nDelete a cell\n\n\n2. Module\n\nBasic on module\n\nIn mymod.py:\n\ndef mysum(a, b):\n    return a + b\n\n\nIn myscript.py:\n\nimport mymod\nprint(mymod.mysum(3, 4))\n\n\nExecute myscript.py\n\n\n> python myscript.py\n7\n\n\nUse alias to module:\n\nimport mymod as mm\nprint(mm.mysum(3, 4))\n# mm works as alias to mymod\n\n\nFunctions or variables from modules can be accessed directly by:\n\nfrom mymod import mysum\nprint(mysum(3, 4))\n\n\nImport patterns\n# Import a module and access the module's elements through it name\nimport modulename\nmodulename.func1(params)\n\n# Use alias to a module\nimport modulename as alias\nalias.func1(params)\n\n# Import specific names from a module\nfrom modulename import func1, func2\nfunc1(params)\nfunc2(params)\n\n# Import specific names and use alias\nfrom modulename import func1 as f\nf(params)\n\n# Import all names from a module except those beginning with an underscore (_)\nfrom modulename import *\nfunc1(params)\nfunc2(params)\n\n\nGlobal variable __name__\n\n\nWithin a module, global variable __name__ returns the module's name.\nThe script which is being execute has __main__ as its module name.\n\nFor example:\n\nIn mymod.py:\n\nprint(__name__)\n\n\nIn myscript.py:\n\nimport mymod\n\n\nExecute myscripts.py\n\n\n> python myscripts.py\nmymod\n\n\nExecute mymod.py\n\n\n> python mymod.py\n__main__\n\n\n\n\nModule can be executed directly\n\nWe can use __name__ to distinguish a module is called directly or not.\nIn mymod.py\n\n\ndef mysum(a, b):\n    return a + b\nif __name__ == \"__main__\":\n    print(\"Mymod is executed directly\")\n\n\nModule search path\n\nPython search module from directories listed in sys.path\n\n\nimport sys\nprint(sys.path)\n\n\n3. File access\n\nReading from file\n\nRead all data from file\nf = open('stock1.csv', 'r')\ndata = f.read()\nf.close()\nprint(data)\n\nsec_code,opn,high,low,now,time \n6702,602,610,599,608,2016-01-04 00:00:00\n6702,608,611,608,610,2016-01-04 00:10:00\n6758,2958,3000,2940,2998,2016-01-04 00:00:00\n6758,2998,3011,2992,3009,2016-01-04 00:10:00\n\nRead one line\nf = open('stock1.csv', 'r')\ndata = f.readline()\nf.close()\nprint(data)\n\nsec_code,opn,high,low,now,time \n\nRead all lines\nf = open('stock1.csv', 'r')\nfor line in f:\n    print(line)\nf.close()\n\nsec_code,opn,high,low,now,time \n6702,602,610,599,608,2016-01-04 00:00:00\n6702,608,611,608,610,2016-01-04 00:10:00\n6758,2958,3000,2940,2998,2016-01-04 00:00:00\n6758,2998,3011,2992,3009,2016-01-04 00:10:00\n\nWrite to file\nf = open('sample_out.csv', 'wb')\nf.write('Programming with Python \\n')\nf.write('Write 2 numbers: %d %f' % (5, 7.95))\nf.close()\n\n\nReading from CSV\nimport csv\nlinecount = 0\nwith open('stock1.csv', 'rb') as csvfile:\n    stockreader = csv.reader(csvfile, delimiter=',')\n    for row in stockreader:\n        print(row)\n        linecount += 1\n\nprint(\"%d lines\" % linecount)\n\n['sec_code', 'opn', 'high', 'low', 'now', 'time ']\n['6702', '602', '610', '599', '608', '2016-01-04 00:00:00']\n['6702', '608', '611', '608', '610', '2016-01-04 00:10:00']\n['6758', '2958', '3000', '2940', '2998', '2016-01-04 00:00:00']\n['6758', '2998', '3011', '2992', '3009', '2016-01-04 00:10:00']\n5 lines\n\nWriting to CSV\nimport csv\nwith open('sample_out.csv', 'wb') as csvfile:\n    csvwriter = csv.writer(csvfile, delimiter=',', lineterminator=\"\\n\")\n    csvwriter.writerow(['Product', 'Price', 'Amount'])\n    csvwriter.writerow(['Table', 12000, 5])\n    csvwriter.writerow(['Chair', 4700, 25])\n\n\nSerialization with pickle\n\nWriting data with pickle\nimport pickle\nf = open('sample_out.pkl', 'wb')\nmixed = ['abc', 1, 5, 7.39]\nstr = \"String data in pickle\"\npickle.dump(mixed, f)\npickle.dump(str, f)\nf.close()\n\n\nReading data with pickle\nf = open('sample_out.pkl', 'rb')\nnew_mixed = pickle.load(f)\nnew_str = pickle.load(f)\nf.close()\nprint(new_mixed)\nprint(new_str)\n\n['abc', 1, 5, 7.39]\nString data in pickle\n\n4. Database access with mysql-connector-python\n\nInstall mysql-connector-python package\n\nInstall manually\n\nDownload mysql-connector-python-2.1.3.zip from\n\n\nhttps://cdn.mysql.com/Downloads/Connector-Python/mysql-connector-python-2.1.3.tar.gz\n\n\nUnzip the file\nChange dir to mysql-connector-python-2.1.3\n./setup.py install\n\n\nInstall through pip\n$ echo https://cdn.mysql.com/Downloads/Connector-Python/mysql-connector-python-2.1.3.tar.gz >> requirements.txt\n$ pip install -r requirements.txt\n$ pip list | grep mysql\n\n\nConnector/Python API Reference\n\nhttps://dev.mysql.com/doc/connector-python/en/connector-python-reference.html\n\n\nConnect to DB\nimport mysql.connector\nfrom mysql.connector import errorcode\n\nconfig = {\n    'user': 'us',\n    'password': 'pwd',\n    'host': 'localhost',\n    'database': 'stocks'\n}\n\ntry:\n    mysql_cnn = mysql.connector.connect(**config)\nexcept mysql.connector.Error as err:\n    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:\n        print(\"Something is wrong with your user name or password\")\n    elif err.errno == errorcode.ER_BAD_DB_ERROR:\n        print(\"Database does not exist\")\n    else:\n        print(err)\n\n\nSELECT data\ncursor = mysql_cnn.cursor(buffered=True)\nsql = 'SELECT * FROM stocks_10minute WHERE sec_code = 9984'\ncursor.execute(sql)\n\n\nGet number of records\n\nprint('Row count: %d' % cursor.rowcount)\n\nRow count: 608\n\nExtract 1 record\n\nrec = cursor.fetchone()\nprint(rec)\n\n(26911001, 9984, 6050, 6081, 6030, 6046, datetime.datetime(2016, 1, 4, 0, 0))\n\nExtract price & time columns and save into 2 lists\n\nrecords = [rec for rec in cursor]\nprice = [rec[5] for rec in records] # now column\ntime = [rec[6] for rec in records] # time column\ncursor.close()\n\nTrue\n\nUPDATE data\n\nGet a cursor for updating\n\nupd_cursor = mysql_cnn.cursor()\n\n\nExecute UPDATE statement\n\nid = 29269249\nvalue = 5266\nupd_sql = \"UPDATE stocks_10minute SET now = %d WHERE id = %d\" % (value, id)\nupd_cursor.execute(upd_sql)\n\n\nCommit the data to DB & close cursor\n\nmysql_cnn.commit()\nupd_cursor.close()\n\nTrue\n\nINSERT data\nimport datetime\n\n\nGet a cursor for insertion\n\nins_cursor = mysql_cnn.cursor()\n\n\nExecute INSERT statement\n\nins_sql = (\n  \"INSERT INTO stocks_10minute (sec_code, open, high, low, now, time) \"\n  \"VALUES (%s, %s, %s, %s, %s, %s)\"\n)\ndata = (9984, 5245, 5288, 5243, 5265, datetime.datetime(2016, 2, 1, 0, 10))\nins_cursor.execute(ins_sql, data)\n\n\n\nGet the new ID in case the id column is auto_increment\n\nnew_id = ins_cursor.lastrowid\nnew_id\n\n29278575\n\nCommit the data to DB & close cursor\n\nmysql_cnn.commit()\nins_cursor.close()\n\nTrue\n\nDELETE data\n\nGet a cursor for deletion\n\ndel_cursor = mysql_cnn.cursor()\n\n\nExecute DELETE statement\n\ndel_sql = (\n  \"DELETE FROM stocks_10minute WHERE id = %d \" % new_id\n)\ndel_cursor.execute(del_sql)\n\n\nCommit the data to DB & close cursor\n\nmysql_cnn.commit()\ndel_cursor.close()\n\nTrue\n\nDisconnect\nmysql_cnn.close()\n\n\n5. Plotting with matplotlib\n\nIntroduction\n\nmatplotlib is a powerful library for 2D plotting in Python.\n\n\nInstall\n$ pip install matplotlib\n\n\nBasic\n\nImport required libraries\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nCommand to show plot directly on notebook\n\n%matplotlib inline\n\n\nWe can draw a plot by simply passing arrays for X & Y into plot function\nIf only 1 array is passed to plot function, it will be considered as data for the Y-axis. \nAnd the values for X-axis will be automatically generated from 0, spaced by 1.\n\nplt.plot([2, 3, 4, 5])\nplt.ylabel('some numbers')\nplt.show()\n\n\n\nIf 2 arrays are passed to plot, they will be considered as data for X & Y-axis respectively\n\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\nplt.xlabel('Some numbers')\nplt.ylabel('Their squares')\nplt.show()\n\n\n\nThe 3rd param in plot function is used to format the color & line type of the plot.\nA format string may have 3 component: color, marker style & line style.\nEX: 'ro--' indicates: RED color, circle marker & dashed line.\nFor more info on the format string: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot\n\n\n'axis' command takes [xmin, xmax, ymin, ymax] to specify the viewport of the axes. \n\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'r^--')\nplt.xlabel('Some numbers')\nplt.ylabel('Their squares')\nplt.axis([0, 6, 0, 20])\nplt.show()\n\n\n\n'plot' function may receive data for multiple line. In this example, it draws 3 lines, with 3 params per each.\n\n# Numpy's arange function receive the start, end & interval value to generate an array of evenly spaced values.\n# Here, the values range from 0 -> 5, evenly spaced by 0.2\nt = np.arange(0., 5., 0.2)\n\nplt.plot(t, t, 'r--', t, t ** 2, 'bs', t, t ** 3, 'g^')\nplt.show()\n\n\n\nControlling line properties\n\nWe can set properties for line through keyword arguments.\n\nx = np.arange(0., 5., 0.2)\ny = x ** 2\nplt.plot(x, y, linewidth=4.0)\nplt.show()\n\n\n\nplot can return multiple Line2D objects, corresponding to the input params.\nFor complex property setting, we can receive Line2D object, and call methods to set properties for the lines.\nList of properties & methods of Line2D object: http://matplotlib.org/api/lines_api.html#matplotlib.lines.Line2D\n\nBasically, a property can be accessed through keyword args with the same name, or through methods with the following patterns:\n\n\nget_[property]\nset_[property]\n\n\n\nline1, line2, line3 = plt.plot(x, x, x, x ** 2, x, x ** 3)\nline1.set_color('red')\nline2.set_color('green')\nline3.set_color('blue')\nline3.set_alpha(0.2)\nplt.show()\n\n\n\nTo get a list of settable properties & gettable properties of Line2D object, call 'setp' & 'getp'\n\n\nplt.setp(line1)\n\nplt.getp(line1)\n\n\nWorking with multiple figures and axes\n\nUse 'figure' function to set current figure. By default, figure(1) is automatically called behind the scene.\nUse 'subplot' function to set the current plot & also define the grid of the current figure. \nA figure is divided into grids of rows & columns.\nSubplot receives 3 parameters: nrows, ncols, plot_number\n\nplot_number ranges from 1 to nrows * ncols\n\n\nEX: Calling subplot(2, 1, 2) specifies that the figure has 2 rows, 1 cols, and select the lower plot as active.\n\n\nIf all of nrows, ncols, plot_number are less that 10, we can use only one 3-digit number to identify the grid system & the plot number.\n\n\nEX: Calling subplot(324) specifies that the figure has 3 rows, 2 cols & select the plot at (2, 1) as active.\n\n\n\ndef f(t):\n    return np.exp(-t) * np.cos(2 * np.pi * t)\n\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\n\n# Select the 1st figure\nplt.figure(1)\nplt.subplot(2, 1, 1)\nplt.plot(t1, f(t1), 'bo', t2, f(t2), 'r')\n\nplt.subplot(2, 1, 2)\nplt.plot(t2, np.cos(2 * np.pi * t2), 'r--')\n\n# Select the 2nd figure\nplt.figure(2)\n# 3 rows, 2 cols & set the (2, 2) as active\nplt.subplot(324)\nplt.plot(t2, np.cos(2 * np.pi * t2), 'b-')\n\n# 3 rows, 2 cols & set the (1, 1) as active\nplt.subplot(321)\nplt.plot(t2, np.cos(2 * np.pi * t2), 'g-')\n\nplt.show()\n\n\n\n\nWorking with text\n\n\nxlabel, ylabel, title are functions used to put text in specific positions.\n\ntext function is used to put text at any position.\nThe text function receives:\n\n\nx, y: as position of the text. These specify the values in X-axis & Y-axis\ns: the text content\nAnd other properties of text in form of keyword params. For more detail: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.text\n\n\n\nFor text content, we can write LaTex notation inside $..$\n\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n\nn, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ as normal distribution of $\\mu=100,\\ \\sigma=15$')\nplt.text(57, .025, r'$\\mu=100,\\ \\sigma=15$', color='r')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n\n\n\nAnnotating text\n\nUse 'annotate' function to put a text for explanation. 'annotate' receives the following params:\n\n\ns: the explanation text.\nxy: position to annotate. The position will be pointed by an arrow.\nxytext: position of the text.\narrowprops: format of the arrow.\n\n\nFor more info: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.annotate\n\n\nax = plt.subplot(111)\nt = np.arange(0.0, 5.0, 0.01)\ns = np.cos(2 * np.pi * t)\nline, = plt.plot(t, s, lw=2)\nplt.annotate('local max', xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor='k', shrink=0.05))\nplt.ylim(-2, 2)\nplt.show()\n\n\n\nWorking with legend\n\nUse legend function to draw a legend for the axes.\nEach line should be assigned a label, then call legend to draw a legend box.\nSome important params of legend function:\n\n\n\nloc: location of the legend box in plot. 1: upper right, 2: upper left, 3: lower left, 4: lower right...\n\ntitle: title of the legend box\n\n\nFor more details: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.legend\n\n\nx = np.array(range(100))\nline1, line2 = plt.plot(x, x, 'r', x, x ** 2, 'b')\nline1.set_label('$Y=x$')\nline2.set_label('$Y=x^2$')\nplt.legend(loc=2, title='Explanation')\n# plt.legend((line1, line2), ('For $Y=x$', 'For $Y=x^2$'))  # Or use legend function to set labels for lines\nplt.show()\n\n\n\nCreating artists specifically for adding to the legend (aka. Proxy artists)\nimport matplotlib.patches as mpatches\n\nred_patch = mpatches.Patch(color='r', label='The red data')\nplt.legend(handles=[red_patch])\n\nplt.show()\n\n\nimport matplotlib.lines as mlines\n\nline1, = plt.plot([1,3,4,5], label='Real line', color='r')\nblue_line = mlines.Line2D([], [], color='blue', marker='*', linestyle='',\n                          markersize=15, label='Blue stars')\nplt.legend(handles=[line1, blue_line])\nplt.show()\n\n\n\nLegend location\n\nUse bbox_to_anchor property to adjust position of the legend box, for example, to put it outside the plot.\n\nx = np.array(range(100))\nline1, = plt.plot(x, x, 'r', label='$Y=x$')\nline2, = plt.plot(x, x ** 2, 'g--', label='$Y=x^2$')\nplt.legend([line1, line2], ['For $Y=x$', 'For $Y=x^2$'], loc=2, bbox_to_anchor=(1.05, 1), borderaxespad=0.0)\nplt.show()\n\n\n\nMultiple legends on the same Axes\nline1, = plt.plot([1, 2, 3], label='Line1', linestyle='--')\nline2, = plt.plot([3, 2, 1], label='Line2', linewidth=4)\n\n# Create the legend for 1st line\nfirst_legend = plt.legend(handles=[line1], loc=1)\n\n# Add a new legend\nax = plt.gca().add_artist(first_legend)\n\n# Create another legend for the 2nd line\nplt.legend(handles=[line2], loc=2)\n\nplt.show()\n\n\n\n\nFinancial charts\n\nCandle stick chart\nfrom matplotlib.dates import DateFormatter, WeekdayLocator,\\\n    DayLocator, MONDAY\nfrom matplotlib.finance import quotes_historical_yahoo_ohlc, candlestick_ohlc\n\n\n# (Year, month, day) tuples suffice as args for quotes_historical_yahoo\ndate1 = (2004, 2, 1)\ndate2 = (2004, 4, 12)\n\n\nmondays = WeekdayLocator(MONDAY)        # major ticks on the mondays\nalldays = DayLocator()              # minor ticks on the days\nweekFormatter = DateFormatter('%b %d')  # e.g., Jan 12\ndayFormatter = DateFormatter('%d')      # e.g., 12\n\nquotes = quotes_historical_yahoo_ohlc('INTC', date1, date2)\nif len(quotes) == 0:\n    raise SystemExit\n\nfig, ax = plt.subplots()\nfig.set_size_inches(10, 5)\nfig.subplots_adjust(bottom=0.2)\nax.xaxis.set_major_locator(mondays)\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_formatter(weekFormatter)\n#ax.xaxis.set_minor_formatter(dayFormatter)\n\n#plot_day_summary(ax, quotes, ticksize=3)\ncandlestick_ohlc(ax, quotes, width=0.6)\n\nax.xaxis_date()\nax.autoscale_view()\nplt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n\nplt.show()\n\n\n\n(From http://matplotlib.org/examples/pylab_examples/finance_demo.html)\n\nStock prices with indicators\nimport datetime\nimport numpy as np\nimport matplotlib.colors as colors\nimport matplotlib.finance as finance\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as mticker\nimport matplotlib.mlab as mlab\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as font_manager\n\n\nstartdate = datetime.date(2006, 1, 1)\ntoday = enddate = datetime.date.today()\nticker = 'SPY'\n\n\nfh = finance.fetch_historical_yahoo(ticker, startdate, enddate)\n# a numpy record array with fields: date, open, high, low, close, volume, adj_close)\n\nr = mlab.csv2rec(fh)\nfh.close()\nr.sort()\n\n\ndef moving_average(x, n, type='simple'):\n    \"\"\"\n    compute an n period moving average.\n\n    type is 'simple' | 'exponential'\n\n    \"\"\"\n    x = np.asarray(x)\n    if type == 'simple':\n        weights = np.ones(n)\n    else:\n        weights = np.exp(np.linspace(-1., 0., n))\n\n    weights /= weights.sum()\n\n    a = np.convolve(x, weights, mode='full')[:len(x)]\n    a[:n] = a[n]\n    return a\n\n\ndef relative_strength(prices, n=14):\n    \"\"\"\n    compute the n period relative strength indicator\n    http://stockcharts.com/school/doku.php?id=chart_school:glossary_r#relativestrengthindex\n    http://www.investopedia.com/terms/r/rsi.asp\n    \"\"\"\n\n    deltas = np.diff(prices)\n    seed = deltas[:n+1]\n    up = seed[seed >= 0].sum()/n\n    down = -seed[seed < 0].sum()/n\n    rs = up/down\n    rsi = np.zeros_like(prices)\n    rsi[:n] = 100. - 100./(1. + rs)\n\n    for i in range(n, len(prices)):\n        delta = deltas[i - 1]  # cause the diff is 1 shorter\n\n        if delta > 0:\n            upval = delta\n            downval = 0.\n        else:\n            upval = 0.\n            downval = -delta\n\n        up = (up*(n - 1) + upval)/n\n        down = (down*(n - 1) + downval)/n\n\n        rs = up/down\n        rsi[i] = 100. - 100./(1. + rs)\n\n    return rsi\n\n\ndef moving_average_convergence(x, nslow=26, nfast=12):\n    \"\"\"\n    compute the MACD (Moving Average Convergence/Divergence) using a fast and slow exponential moving avg'\n    return value is emaslow, emafast, macd which are len(x) arrays\n    \"\"\"\n    emaslow = moving_average(x, nslow, type='exponential')\n    emafast = moving_average(x, nfast, type='exponential')\n    return emaslow, emafast, emafast - emaslow\n\n\nplt.rc('axes', grid=True)\nplt.rc('grid', color='0.75', linestyle='-', linewidth=0.5)\n\ntextsize = 9\nleft, width = 0.1, 0.8\nrect1 = [left, 0.7, width, 0.2]\nrect2 = [left, 0.3, width, 0.4]\nrect3 = [left, 0.1, width, 0.2]\n\n\nfig = plt.figure(figsize=(10, 5), facecolor='white')\naxescolor = '#f6f6f6'  # the axes background color\n\nax1 = fig.add_axes(rect1, axisbg=axescolor)  # left, bottom, width, height\nax2 = fig.add_axes(rect2, axisbg=axescolor, sharex=ax1)\nax2t = ax2.twinx()\nax3 = fig.add_axes(rect3, axisbg=axescolor, sharex=ax1)\n\n\n# plot the relative strength indicator\nprices = r.adj_close\nrsi = relative_strength(prices)\nfillcolor = 'darkgoldenrod'\n\nax1.plot(r.date, rsi, color=fillcolor)\nax1.axhline(70, color=fillcolor)\nax1.axhline(30, color=fillcolor)\nax1.fill_between(r.date, rsi, 70, where=(rsi >= 70), facecolor=fillcolor, edgecolor=fillcolor)\nax1.fill_between(r.date, rsi, 30, where=(rsi <= 30), facecolor=fillcolor, edgecolor=fillcolor)\nax1.text(0.6, 0.9, '>70 = overbought', va='top', transform=ax1.transAxes, fontsize=textsize)\nax1.text(0.6, 0.1, '<30 = oversold', transform=ax1.transAxes, fontsize=textsize)\nax1.set_ylim(0, 100)\nax1.set_yticks([30, 70])\nax1.text(0.025, 0.95, 'RSI (14)', va='top', transform=ax1.transAxes, fontsize=textsize)\nax1.set_title('%s daily' % ticker)\n\n# plot the price and volume data\ndx = r.adj_close - r.close\nlow = r.low + dx\nhigh = r.high + dx\n\ndeltas = np.zeros_like(prices)\ndeltas[1:] = np.diff(prices)\nup = deltas > 0\nax2.vlines(r.date[up], low[up], high[up], color='black', label='_nolegend_')\nax2.vlines(r.date[~up], low[~up], high[~up], color='black', label='_nolegend_')\nma20 = moving_average(prices, 20, type='simple')\nma200 = moving_average(prices, 200, type='simple')\n\nlinema20, = ax2.plot(r.date, ma20, color='blue', lw=2, label='MA (20)')\nlinema200, = ax2.plot(r.date, ma200, color='red', lw=2, label='MA (200)')\n\n\nlast = r[-1]\ns = '%s O:%1.2f H:%1.2f L:%1.2f C:%1.2f, V:%1.1fM Chg:%+1.2f' % (\n    today.strftime('%d-%b-%Y'),\n    last.open, last.high,\n    last.low, last.close,\n    last.volume*1e-6,\n    last.close - last.open)\nt4 = ax2.text(0.3, 0.9, s, transform=ax2.transAxes, fontsize=textsize)\n\nprops = font_manager.FontProperties(size=10)\nleg = ax2.legend(loc='center left', bbox_to_anchor=(1.05, 1.3), shadow=True, fancybox=True, prop=props)\nleg.get_frame().set_alpha(0.5)\n\n\nvolume = (r.close*r.volume)/1e6  # dollar volume in millions\nvmax = volume.max()\npoly = ax2t.fill_between(r.date, volume, 0, label='Volume', facecolor=fillcolor, edgecolor=fillcolor)\nax2t.set_ylim(0, 5*vmax)\nax2t.set_yticks([])\n\n\n# compute the MACD indicator\nfillcolor = 'darkslategrey'\nnslow = 26\nnfast = 12\nnema = 9\nemaslow, emafast, macd = moving_average_convergence(prices, nslow=nslow, nfast=nfast)\nema9 = moving_average(macd, nema, type='exponential')\nax3.plot(r.date, macd, color='black', lw=2)\nax3.plot(r.date, ema9, color='blue', lw=1)\nax3.fill_between(r.date, macd - ema9, 0, alpha=0.5, facecolor=fillcolor, edgecolor=fillcolor)\n\n\nax3.text(0.025, 0.95, 'MACD (%d, %d, %d)' % (nfast, nslow, nema), va='top',\n         transform=ax3.transAxes, fontsize=textsize)\n\n#ax3.set_yticks([])\n# turn off upper axis tick labels, rotate the lower ones, etc\nfor ax in ax1, ax2, ax2t, ax3:\n    if ax != ax3:\n        for label in ax.get_xticklabels():\n            label.set_visible(False)\n    else:\n        for label in ax.get_xticklabels():\n            label.set_rotation(30)\n            label.set_horizontalalignment('right')\n\n    ax.fmt_xdata = mdates.DateFormatter('%Y-%m-%d')\n\n\nclass MyLocator(mticker.MaxNLocator):\n    def __init__(self, *args, **kwargs):\n        mticker.MaxNLocator.__init__(self, *args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        return mticker.MaxNLocator.__call__(self, *args, **kwargs)\n\n# at most 5 ticks, pruning the upper and lower so they don't overlap\n# with other ticks\n#ax2.yaxis.set_major_locator(mticker.MaxNLocator(5, prune='both'))\n#ax3.yaxis.set_major_locator(mticker.MaxNLocator(5, prune='both'))\n\nax2.yaxis.set_major_locator(MyLocator(5, prune='both'))\nax3.yaxis.set_major_locator(MyLocator(5, prune='both'))\n\nplt.show()\n\n\n\n(From http://matplotlib.org/examples/pylab_examples/finance_work2.html)\n\nXKCD-style sketch plots\n\nSimply blocking our plotting code by with plt.xkcd(), we can draw plots in XKCD-style (comic-style).\nXKCD-style sketch is based on XKCD by Randall Monroe: http://xkcd.com/\n\nFor more information on xkcd function, see: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.xkcd\n\n\nwith plt.xkcd():\n    line1, = plt.plot([1, 2, 3], label='Line1', linestyle='--')\n    line2, = plt.plot([3, 2, 1], label='Line2', linewidth=4)\n\n    # Create the legend for 1st line\n    first_legend = plt.legend(handles=[line1], loc=1)\n\n    # Add a new legend\n    ax = plt.gca().add_artist(first_legend)\n\n    # Create another legend for the 2nd line\n    plt.legend(handles=[line2], loc=2)\n\n    plt.show()\n\n\nwith plt.xkcd():\n    ax = plt.subplot(111)\n    t = np.arange(0.0, 5.0, 0.01)\n    s = np.cos(2 * np.pi * t)\n    line, = plt.plot(t, s, lw=2)\n    plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor='k', shrink=0.05))\n    plt.ylim(-2, 2)\n    plt.show()\n\n\nwith plt.xkcd():\n    x = np.array(range(100))\n    line1, = plt.plot(x, x, 'r', label='$Y=x$')\n    line2, = plt.plot(x, x ** 1.5, 'g--', label='$Y=x^2$')\n    plt.legend([line1, line2], ['For $Y=x$', 'For $Y=x^{1.5}$'], loc=2, bbox_to_anchor=(1.05, 1), borderaxespad=0.0)\n    plt.show()\n\n\n\nCredit\n\nhttp://matplotlib.org/users/beginner.html\n\n\n# Table of content \n1. Environment\n    * 1.1. Command line\n    * 1.2. pip\n    * 1.3. pyenv\n    * 1.4. virtualenv\n    * 1.5. iPython Notebook\n2. Module\n3. File access\n4. Database access\n5. Plotting with matplotlib\n\n# 1. Environment\n\n# 1.1. Command line\n\n* To execute a python script:\n\n```\n$ python myscript.py\n```\n\n* To open python command line:\n\n```\n$ python\n```\n\n# 1.2. pip\n* `pip` is a Python package manager.\n* `pip` is already installed for Python 2 >=2.7.9 or Python 3 >=3.4.\n* If your environment has no `pip`, you can install `pip` by the following steps:\n\n```\n$ wget https://bootstrap.pypa.io/get-pip.py\n$ python get-pip.py\n```\n\n* Reference: https://pip.pypa.io/en/stable/user_guide\n\n# 1.3. pyenv\n* Manage multiple versions of Python like `rbenv` in Ruby\n* https://github.com/yyuu/pyenv\n\n# 1.4. virtualenv\n* A tool to create multiple Python environments\n* Can use `virtualenv` directly, or use `pyenv-virtualenv`, a plugin of pyenv\n* virtualenv: https://pypi.python.org/pypi/virtualenv\n* pyenv-virtualenv: https://github.com/yyuu/pyenv-virtualenv\n\n# 1.5. iPython Notebook\n\n* An interactive Python environment\n* Write & execute Python code, markdown, mathmatical notations in LaTex, plots & media.\n* Can be used for experiment, demo, presentation & communication\n* `iPython Notebook` is currently renamed to `Jupyter Notebook`\n* http://jupyter.org/\n\n### Install iPython Notebook with pip\n```\n$ pip install jupyter\n```\n\n* Note: iPython works on Python2.7 or Python3.3 or above.\n\n### Start iPython Notebook\n```\n$ jupyter notebook\n```\n\n### Using iPython Notebook\n* Browse file from directory tree\n* Open existing notebook\n* Create new notebook\n* Write python code in cell\n* Write markdown text in cell (normal text, Latex)\n* New cell above/below a current cell\n* Delete a cell\n\n# 2. Module\n\n## Basic on module\n\n* In `mymod.py`:\n\n```python\ndef mysum(a, b):\n    return a + b\n```\n\n* In `myscript.py`:\n\n```python\nimport mymod\nprint(mymod.mysum(3, 4))\n```\n\n* Execute `myscript.py`\n\n```python\n> python myscript.py\n7\n```\n\n* Use alias to module:\n\n```python\nimport mymod as mm\nprint(mm.mysum(3, 4))\n# mm works as alias to mymod\n```\n\n* Functions or variables from modules can be accessed directly by:\n\n```python\nfrom mymod import mysum\nprint(mysum(3, 4))\n```\n\n### Import patterns\n\n```python\n# Import a module and access the module's elements through it name\nimport modulename\nmodulename.func1(params)\n```\n\n```python\n# Use alias to a module\nimport modulename as alias\nalias.func1(params)\n```\n\n```python\n# Import specific names from a module\nfrom modulename import func1, func2\nfunc1(params)\nfunc2(params)\n```\n\n```python\n# Import specific names and use alias\nfrom modulename import func1 as f\nf(params)\n```\n\n```python\n# Import all names from a module except those beginning with an underscore (_)\nfrom modulename import *\nfunc1(params)\nfunc2(params)\n```\n\n\n## Global variable `__name__` \n* Within a module, global variable `__name__` returns the module's name.\n* The script which is being execute has `__main__` as its module name.\n* For example:\n    * In `mymod.py`:\n\n\t```python\n\tprint(__name__)\n\t```\n\n    * In `myscript.py`:\n\n\t```python\n\timport mymod\n\t```\n\n    * Execute `myscripts.py`\n\n\t```\n\t> python myscripts.py\n\tmymod\n\t```\n\n    * Execute `mymod.py`\n\n\t```\n\t> python mymod.py\n\t__main__\n\t```\n\n## Module can be executed directly\n* We can use `__name__` to distinguish a module is called directly or not.\n* In `mymod.py`\n\n```python\ndef mysum(a, b):\n    return a + b\nif __name__ == \"__main__\":\n    print(\"Mymod is executed directly\")\n```\n\n## Module search path\n* Python search module from directories listed in `sys.path`\n\n```python\nimport sys\nprint(sys.path)\n```\n\n# 3. File access\n\n## Reading from file\n\n### Read all data from file\n\n\n```python\nf = open('stock1.csv', 'r')\ndata = f.read()\nf.close()\nprint(data)\n```\n\nsec_code,opn,high,low,now,time \n6702,602,610,599,608,2016-01-04 00:00:00\n6702,608,611,608,610,2016-01-04 00:10:00\n6758,2958,3000,2940,2998,2016-01-04 00:00:00\n6758,2998,3011,2992,3009,2016-01-04 00:10:00\n\n### Read one line\n\n\n```python\nf = open('stock1.csv', 'r')\ndata = f.readline()\nf.close()\nprint(data)\n```\n\nsec_code,opn,high,low,now,time \n\n\n\n### Read all lines\n\n\n```python\nf = open('stock1.csv', 'r')\nfor line in f:\n    print(line)\nf.close()\n```\n\nsec_code,opn,high,low,now,time \n    \n6702,602,610,599,608,2016-01-04 00:00:00\n    \n6702,608,611,608,610,2016-01-04 00:10:00\n    \n6758,2958,3000,2940,2998,2016-01-04 00:00:00\n    \n6758,2998,3011,2992,3009,2016-01-04 00:10:00\n    \n\n\n## Write to file\n\n\n```python\nf = open('sample_out.csv', 'wb')\nf.write('Programming with Python \\n')\nf.write('Write 2 numbers: %d %f' % (5, 7.95))\nf.close()\n```\n\n## Reading from CSV\n\n\n```python\nimport csv\nlinecount = 0\nwith open('stock1.csv', 'rb') as csvfile:\n    stockreader = csv.reader(csvfile, delimiter=',')\n    for row in stockreader:\n        print(row)\n        linecount += 1\n\nprint(\"%d lines\" % linecount)\n```\n\n['sec_code', 'opn', 'high', 'low', 'now', 'time ']\n['6702', '602', '610', '599', '608', '2016-01-04 00:00:00']\n['6702', '608', '611', '608', '610', '2016-01-04 00:10:00']\n['6758', '2958', '3000', '2940', '2998', '2016-01-04 00:00:00']\n['6758', '2998', '3011', '2992', '3009', '2016-01-04 00:10:00']\n5 lines\n\n\n## Writing to CSV\n\n\n```python\nimport csv\nwith open('sample_out.csv', 'wb') as csvfile:\n    csvwriter = csv.writer(csvfile, delimiter=',', lineterminator=\"\\n\")\n    csvwriter.writerow(['Product', 'Price', 'Amount'])\n    csvwriter.writerow(['Table', 12000, 5])\n    csvwriter.writerow(['Chair', 4700, 25])\n```\n\n## Serialization with pickle\n\n### Writing data with pickle\n\n\n```python\nimport pickle\nf = open('sample_out.pkl', 'wb')\nmixed = ['abc', 1, 5, 7.39]\nstr = \"String data in pickle\"\npickle.dump(mixed, f)\npickle.dump(str, f)\nf.close()\n```\n\n### Reading data with pickle\n\n\n```python\nf = open('sample_out.pkl', 'rb')\nnew_mixed = pickle.load(f)\nnew_str = pickle.load(f)\nf.close()\nprint(new_mixed)\nprint(new_str)\n```\n\n['abc', 1, 5, 7.39]\nString data in pickle\n\n\n# 4. Database access with mysql-connector-python\n\n## Install mysql-connector-python package\n### Install manually\n* Download mysql-connector-python-2.1.3.zip from\n    * https://cdn.mysql.com/Downloads/Connector-Python/mysql-connector-python-2.1.3.tar.gz\n* Unzip the file\n* Change dir to mysql-connector-python-2.1.3\n* ./setup.py install\n\n### Install through pip\n```\n$ echo https://cdn.mysql.com/Downloads/Connector-Python/mysql-connector-python-2.1.3.tar.gz >> requirements.txt\n$ pip install -r requirements.txt\n$ pip list | grep mysql\n```\n\n## Connector/Python API Reference\n* https://dev.mysql.com/doc/connector-python/en/connector-python-reference.html\n\n# Connect to DB\n\n\n```python\nimport mysql.connector\nfrom mysql.connector import errorcode\n\nconfig = {\n    'user': 'us',\n    'password': 'pwd',\n    'host': 'localhost',\n    'database': 'stocks'\n}\n\ntry:\n    mysql_cnn = mysql.connector.connect(**config)\nexcept mysql.connector.Error as err:\n    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:\n        print(\"Something is wrong with your user name or password\")\n    elif err.errno == errorcode.ER_BAD_DB_ERROR:\n        print(\"Database does not exist\")\n    else:\n        print(err)\n```\n\n# SELECT data\n\n\n```python\ncursor = mysql_cnn.cursor(buffered=True)\nsql = 'SELECT * FROM stocks_10minute WHERE sec_code = 9984'\ncursor.execute(sql)\n```\n\n* Get number of records\n\n```python\nprint('Row count: %d' % cursor.rowcount)\n```\n\nRow count: 608\n\n\n* Extract 1 record\n\n```python\nrec = cursor.fetchone()\nprint(rec)\n```\n\n(26911001, 9984, 6050, 6081, 6030, 6046, datetime.datetime(2016, 1, 4, 0, 0))\n\n* Extract price & time columns and save into 2 lists\n\n```python\nrecords = [rec for rec in cursor]\nprice = [rec[5] for rec in records] # now column\ntime = [rec[6] for rec in records] # time column\ncursor.close()\n```\n\nTrue\n\n# UPDATE data\n\n* Get a cursor for updating\n\n```python\nupd_cursor = mysql_cnn.cursor()\n```\n\n* Execute UPDATE statement\n\n```python\nid = 29269249\nvalue = 5266\nupd_sql = \"UPDATE stocks_10minute SET now = %d WHERE id = %d\" % (value, id)\nupd_cursor.execute(upd_sql)\n```\n\n* Commit the data to DB & close cursor\n\n```python\nmysql_cnn.commit()\nupd_cursor.close()\n```\n\nTrue\n\n# INSERT data\n\n```python\nimport datetime\n```\n\n* Get a cursor for insertion\n\n```python\nins_cursor = mysql_cnn.cursor()\n```\n\n* Execute INSERT statement\n\n```python\nins_sql = (\n  \"INSERT INTO stocks_10minute (sec_code, open, high, low, now, time) \"\n  \"VALUES (%s, %s, %s, %s, %s, %s)\"\n)\ndata = (9984, 5245, 5288, 5243, 5265, datetime.datetime(2016, 2, 1, 0, 10))\nins_cursor.execute(ins_sql, data)\n\n```\n\n* Get the new ID in case the id column is auto_increment\n\n```python\nnew_id = ins_cursor.lastrowid\nnew_id\n```\n\n29278575\n\n* Commit the data to DB & close cursor\n\n```python\nmysql_cnn.commit()\nins_cursor.close()\n```\n\nTrue\n\n# DELETE data\n\n* Get a cursor for deletion\n\n```python\ndel_cursor = mysql_cnn.cursor()\n```\n\n* Execute DELETE statement\n\n```python\ndel_sql = (\n  \"DELETE FROM stocks_10minute WHERE id = %d \" % new_id\n)\ndel_cursor.execute(del_sql)\n```\n\n* Commit the data to DB & close cursor\n\n```python\nmysql_cnn.commit()\ndel_cursor.close()\n```\n\nTrue\n\n# Disconnect\n\n```python\nmysql_cnn.close()\n```\n\n# 5. Plotting with matplotlib\n\n## Introduction\n* matplotlib is a powerful library for 2D plotting in Python.\n\n## Install\n```\n$ pip install matplotlib\n```\n\n## Basic\n\n* Import required libraries\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n\n* Command to show plot directly on notebook\n\n```python\n%matplotlib inline\n```\n\n* We can draw a plot by simply passing arrays for X & Y into `plot` function\n* If only 1 array is passed to plot function, it will be considered as data for the Y-axis. \n* And the values for X-axis will be automatically generated from 0, spaced by 1.\n\n\n```python\nplt.plot([2, 3, 4, 5])\nplt.ylabel('some numbers')\nplt.show()\n```\n\n![output_82_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/300ba594-98ad-354a-e46c-74ad887fce5c.png \"output_82_0.png\")\n\n\n* If 2 arrays are passed to `plot`, they will be considered as data for X & Y-axis respectively\n\n```python\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\nplt.xlabel('Some numbers')\nplt.ylabel('Their squares')\nplt.show()\n```\n\n![output_84_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/0493d00e-8dbc-5532-8e97-be06ca174653.png \"output_84_0.png\")\n\n\n* The 3rd param in plot function is used to format the color & line type of the plot.\n* A format string may have 3 component: color, marker style & line style.\n* EX: `'ro--'` indicates: RED color, circle marker & dashed line.\n* For more info on the format string: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot\n* `'axis'` command takes [xmin, xmax, ymin, ymax] to specify the viewport of the axes. \n\n\n```python\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'r^--')\nplt.xlabel('Some numbers')\nplt.ylabel('Their squares')\nplt.axis([0, 6, 0, 20])\nplt.show()\n```\n\n![output_86_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/50a8aae8-1978-9d4e-aed5-1289e5576ad2.png \"output_86_0.png\")\n\n\n\n* 'plot' function may receive data for multiple line. In this example, it draws 3 lines, with 3 params per each.\n\n```python\n# Numpy's arange function receive the start, end & interval value to generate an array of evenly spaced values.\n# Here, the values range from 0 -> 5, evenly spaced by 0.2\nt = np.arange(0., 5., 0.2)\n\nplt.plot(t, t, 'r--', t, t ** 2, 'bs', t, t ** 3, 'g^')\nplt.show()\n```\n\n![output_88_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/1c711280-2ac9-7fd1-4c93-7c6e2784aea2.png \"output_88_0.png\")\n\n\n\n## Controlling line properties\n\n* We can set properties for line through keyword arguments.\n\n\n```python\nx = np.arange(0., 5., 0.2)\ny = x ** 2\nplt.plot(x, y, linewidth=4.0)\nplt.show()\n```\n\n\n![output_91_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/c8f6a136-7339-eeae-dcee-09f387748118.png \"output_91_0.png\")\n\n\n\n* plot can return multiple Line2D objects, corresponding to the input params.\n* For complex property setting, we can receive Line2D object, and call methods to set properties for the lines.\n* List of properties & methods of Line2D object: http://matplotlib.org/api/lines_api.html#matplotlib.lines.Line2D\n* Basically, a property can be accessed through keyword args with the same name, or through methods with the following patterns:\n    * get_[property]\n    * set_[property]\n\n\n```python\nline1, line2, line3 = plt.plot(x, x, x, x ** 2, x, x ** 3)\nline1.set_color('red')\nline2.set_color('green')\nline3.set_color('blue')\nline3.set_alpha(0.2)\nplt.show()\n```\n\n\n![output_93_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/de62688e-20ab-29c7-b2c9-b6c70b9647a2.png \"output_93_0.png\")\n\n\n\n* To get a list of settable properties & gettable properties of Line2D object, call `'setp'` & `'getp'`\n\n\n```python\nplt.setp(line1)\n```\n\n\n```python\nplt.getp(line1)\n```\n\n## Working with multiple figures and axes\n\n* Use `'figure'` function to set current figure. By default, `figure(1)` is automatically called behind the scene.\n* Use `'subplot'` function to set the current plot & also define the grid of the current figure. \n* A figure is divided into grids of rows & columns.\n* Subplot receives 3 parameters: `nrows`, `ncols`, `plot_number`\n* plot_number ranges from 1 to nrows * ncols\n    * EX: Calling `subplot(2, 1, 2)` specifies that the figure has 2 rows, 1 cols, and select the lower plot as active.\n* If all of nrows, ncols, plot_number are less that 10, we can use only one 3-digit number to identify the grid system & the plot number.\n    * EX: Calling `subplot(324)` specifies that the figure has 3 rows, 2 cols & select the plot at (2, 1) as active.\n\n\n```python\ndef f(t):\n    return np.exp(-t) * np.cos(2 * np.pi * t)\n\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\n\n# Select the 1st figure\nplt.figure(1)\nplt.subplot(2, 1, 1)\nplt.plot(t1, f(t1), 'bo', t2, f(t2), 'r')\n\nplt.subplot(2, 1, 2)\nplt.plot(t2, np.cos(2 * np.pi * t2), 'r--')\n\n# Select the 2nd figure\nplt.figure(2)\n# 3 rows, 2 cols & set the (2, 2) as active\nplt.subplot(324)\nplt.plot(t2, np.cos(2 * np.pi * t2), 'b-')\n\n# 3 rows, 2 cols & set the (1, 1) as active\nplt.subplot(321)\nplt.plot(t2, np.cos(2 * np.pi * t2), 'g-')\n\nplt.show()\n```\n\n\n![output_99_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/dc91bd01-9456-70b4-d1f6-b7c272cd2f83.png \"output_99_0.png\")\n\n\n\n\n![output_99_1.png](https://qiita-image-store.s3.amazonaws.com/0/85962/6d4d6399-0756-c075-af8c-25d7b6b8d4b3.png \"output_99_1.png\")\n\n\n\n## Working with text\n\n* `xlabel`, `ylabel`, `title` are functions used to put text in specific positions.\n* `text` function is used to put text at any position.\n* The `text` function receives:\n    * x, y: as position of the text. These specify the values in X-axis & Y-axis\n    * s: the text content\n    * And other properties of text in form of keyword params. For more detail: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.text\n* For text content, we can write LaTex notation inside \\$..\\$\n\n\n```python\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n\nn, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ as normal distribution of $\\mu=100,\\ \\sigma=15$')\nplt.text(57, .025, r'$\\mu=100,\\ \\sigma=15$', color='r')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n```\n\n\n![output_102_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/4073f8e6-6043-7168-53e0-e0f5b8150463.png \"output_102_0.png\")\n\n\n\n### Annotating text\n\n* Use 'annotate' function to put a text for explanation. 'annotate' receives the following params:\n    * s: the explanation text.\n    * xy: position to annotate. The position will be pointed by an arrow.\n    * xytext: position of the text.\n    * arrowprops: format of the arrow.\n* For more info: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.annotate\n\n\n```python\nax = plt.subplot(111)\nt = np.arange(0.0, 5.0, 0.01)\ns = np.cos(2 * np.pi * t)\nline, = plt.plot(t, s, lw=2)\nplt.annotate('local max', xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor='k', shrink=0.05))\nplt.ylim(-2, 2)\nplt.show()\n```\n\n\n![output_105_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/f06ea36f-1b6a-f2a5-e5db-70e3c27e8f5b.png \"output_105_0.png\")\n\n\n\n## Working with legend\n\n* Use `legend` function to draw a legend for the axes.\n* Each line should be assigned a label, then call legend to draw a legend box.\n* Some important params of `legend` function:\n    * `loc`: location of the legend box in plot. 1: upper right, 2: upper left, 3: lower left, 4: lower right...\n    * `title`: title of the legend box\n* For more details: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.legend\n\n\n```python\nx = np.array(range(100))\nline1, line2 = plt.plot(x, x, 'r', x, x ** 2, 'b')\nline1.set_label('$Y=x$')\nline2.set_label('$Y=x^2$')\nplt.legend(loc=2, title='Explanation')\n# plt.legend((line1, line2), ('For $Y=x$', 'For $Y=x^2$'))  # Or use legend function to set labels for lines\nplt.show()\n```\n\n\n![output_108_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/a7d19fec-3976-4bdd-f731-e3852b432023.png \"output_108_0.png\")\n\n\n\n### Creating artists specifically for adding to the legend (aka. Proxy artists)\n\n\n```python\nimport matplotlib.patches as mpatches\n\nred_patch = mpatches.Patch(color='r', label='The red data')\nplt.legend(handles=[red_patch])\n\nplt.show()\n```\n\n\n![output_110_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/e71a154f-37b9-3738-85e2-341ef6d858de.png \"output_110_0.png\")\n\n\n\n\n```python\nimport matplotlib.lines as mlines\n\nline1, = plt.plot([1,3,4,5], label='Real line', color='r')\nblue_line = mlines.Line2D([], [], color='blue', marker='*', linestyle='',\n                          markersize=15, label='Blue stars')\nplt.legend(handles=[line1, blue_line])\nplt.show()\n```\n\n\n![output_111_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/7e4d0096-3dba-2834-af96-46117ed365a2.png \"output_111_0.png\")\n\n\n\n### Legend location\n\n* Use `bbox_to_anchor` property to adjust position of the legend box, for example, to put it outside the plot.\n\n\n```python\nx = np.array(range(100))\nline1, = plt.plot(x, x, 'r', label='$Y=x$')\nline2, = plt.plot(x, x ** 2, 'g--', label='$Y=x^2$')\nplt.legend([line1, line2], ['For $Y=x$', 'For $Y=x^2$'], loc=2, bbox_to_anchor=(1.05, 1), borderaxespad=0.0)\nplt.show()\n```\n\n\n![output_114_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/77570a75-4fb9-a4ef-f6dc-005ff4b38b98.png \"output_114_0.png\")\n\n\n\n### Multiple legends on the same Axes\n\n\n```python\nline1, = plt.plot([1, 2, 3], label='Line1', linestyle='--')\nline2, = plt.plot([3, 2, 1], label='Line2', linewidth=4)\n\n# Create the legend for 1st line\nfirst_legend = plt.legend(handles=[line1], loc=1)\n\n# Add a new legend\nax = plt.gca().add_artist(first_legend)\n\n# Create another legend for the 2nd line\nplt.legend(handles=[line2], loc=2)\n\nplt.show()\n\n```\n\n\n![output_116_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/f46a6231-6ef4-a2ac-71db-6a4d8a483e88.png \"output_116_0.png\")\n\n\n\n## Financial charts\n\n### Candle stick chart\n\n\n```python\nfrom matplotlib.dates import DateFormatter, WeekdayLocator,\\\n    DayLocator, MONDAY\nfrom matplotlib.finance import quotes_historical_yahoo_ohlc, candlestick_ohlc\n\n\n# (Year, month, day) tuples suffice as args for quotes_historical_yahoo\ndate1 = (2004, 2, 1)\ndate2 = (2004, 4, 12)\n\n\nmondays = WeekdayLocator(MONDAY)        # major ticks on the mondays\nalldays = DayLocator()              # minor ticks on the days\nweekFormatter = DateFormatter('%b %d')  # e.g., Jan 12\ndayFormatter = DateFormatter('%d')      # e.g., 12\n\nquotes = quotes_historical_yahoo_ohlc('INTC', date1, date2)\nif len(quotes) == 0:\n    raise SystemExit\n\nfig, ax = plt.subplots()\nfig.set_size_inches(10, 5)\nfig.subplots_adjust(bottom=0.2)\nax.xaxis.set_major_locator(mondays)\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_formatter(weekFormatter)\n#ax.xaxis.set_minor_formatter(dayFormatter)\n\n#plot_day_summary(ax, quotes, ticksize=3)\ncandlestick_ohlc(ax, quotes, width=0.6)\n\nax.xaxis_date()\nax.autoscale_view()\nplt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n\nplt.show()\n```\n\n\n![output_119_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/488ef54b-f566-5526-ce5f-adefb1535a5b.png \"output_119_0.png\")\n\n\n\n#### (From http://matplotlib.org/examples/pylab_examples/finance_demo.html)\n\n## Stock prices with indicators\n\n\n```python\nimport datetime\nimport numpy as np\nimport matplotlib.colors as colors\nimport matplotlib.finance as finance\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as mticker\nimport matplotlib.mlab as mlab\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as font_manager\n\n\nstartdate = datetime.date(2006, 1, 1)\ntoday = enddate = datetime.date.today()\nticker = 'SPY'\n\n\nfh = finance.fetch_historical_yahoo(ticker, startdate, enddate)\n# a numpy record array with fields: date, open, high, low, close, volume, adj_close)\n\nr = mlab.csv2rec(fh)\nfh.close()\nr.sort()\n\n\ndef moving_average(x, n, type='simple'):\n    \"\"\"\n    compute an n period moving average.\n\n    type is 'simple' | 'exponential'\n\n    \"\"\"\n    x = np.asarray(x)\n    if type == 'simple':\n        weights = np.ones(n)\n    else:\n        weights = np.exp(np.linspace(-1., 0., n))\n\n    weights /= weights.sum()\n\n    a = np.convolve(x, weights, mode='full')[:len(x)]\n    a[:n] = a[n]\n    return a\n\n\ndef relative_strength(prices, n=14):\n    \"\"\"\n    compute the n period relative strength indicator\n    http://stockcharts.com/school/doku.php?id=chart_school:glossary_r#relativestrengthindex\n    http://www.investopedia.com/terms/r/rsi.asp\n    \"\"\"\n\n    deltas = np.diff(prices)\n    seed = deltas[:n+1]\n    up = seed[seed >= 0].sum()/n\n    down = -seed[seed < 0].sum()/n\n    rs = up/down\n    rsi = np.zeros_like(prices)\n    rsi[:n] = 100. - 100./(1. + rs)\n\n    for i in range(n, len(prices)):\n        delta = deltas[i - 1]  # cause the diff is 1 shorter\n\n        if delta > 0:\n            upval = delta\n            downval = 0.\n        else:\n            upval = 0.\n            downval = -delta\n\n        up = (up*(n - 1) + upval)/n\n        down = (down*(n - 1) + downval)/n\n\n        rs = up/down\n        rsi[i] = 100. - 100./(1. + rs)\n\n    return rsi\n\n\ndef moving_average_convergence(x, nslow=26, nfast=12):\n    \"\"\"\n    compute the MACD (Moving Average Convergence/Divergence) using a fast and slow exponential moving avg'\n    return value is emaslow, emafast, macd which are len(x) arrays\n    \"\"\"\n    emaslow = moving_average(x, nslow, type='exponential')\n    emafast = moving_average(x, nfast, type='exponential')\n    return emaslow, emafast, emafast - emaslow\n\n\nplt.rc('axes', grid=True)\nplt.rc('grid', color='0.75', linestyle='-', linewidth=0.5)\n\ntextsize = 9\nleft, width = 0.1, 0.8\nrect1 = [left, 0.7, width, 0.2]\nrect2 = [left, 0.3, width, 0.4]\nrect3 = [left, 0.1, width, 0.2]\n\n\nfig = plt.figure(figsize=(10, 5), facecolor='white')\naxescolor = '#f6f6f6'  # the axes background color\n\nax1 = fig.add_axes(rect1, axisbg=axescolor)  # left, bottom, width, height\nax2 = fig.add_axes(rect2, axisbg=axescolor, sharex=ax1)\nax2t = ax2.twinx()\nax3 = fig.add_axes(rect3, axisbg=axescolor, sharex=ax1)\n\n\n# plot the relative strength indicator\nprices = r.adj_close\nrsi = relative_strength(prices)\nfillcolor = 'darkgoldenrod'\n\nax1.plot(r.date, rsi, color=fillcolor)\nax1.axhline(70, color=fillcolor)\nax1.axhline(30, color=fillcolor)\nax1.fill_between(r.date, rsi, 70, where=(rsi >= 70), facecolor=fillcolor, edgecolor=fillcolor)\nax1.fill_between(r.date, rsi, 30, where=(rsi <= 30), facecolor=fillcolor, edgecolor=fillcolor)\nax1.text(0.6, 0.9, '>70 = overbought', va='top', transform=ax1.transAxes, fontsize=textsize)\nax1.text(0.6, 0.1, '<30 = oversold', transform=ax1.transAxes, fontsize=textsize)\nax1.set_ylim(0, 100)\nax1.set_yticks([30, 70])\nax1.text(0.025, 0.95, 'RSI (14)', va='top', transform=ax1.transAxes, fontsize=textsize)\nax1.set_title('%s daily' % ticker)\n\n# plot the price and volume data\ndx = r.adj_close - r.close\nlow = r.low + dx\nhigh = r.high + dx\n\ndeltas = np.zeros_like(prices)\ndeltas[1:] = np.diff(prices)\nup = deltas > 0\nax2.vlines(r.date[up], low[up], high[up], color='black', label='_nolegend_')\nax2.vlines(r.date[~up], low[~up], high[~up], color='black', label='_nolegend_')\nma20 = moving_average(prices, 20, type='simple')\nma200 = moving_average(prices, 200, type='simple')\n\nlinema20, = ax2.plot(r.date, ma20, color='blue', lw=2, label='MA (20)')\nlinema200, = ax2.plot(r.date, ma200, color='red', lw=2, label='MA (200)')\n\n\nlast = r[-1]\ns = '%s O:%1.2f H:%1.2f L:%1.2f C:%1.2f, V:%1.1fM Chg:%+1.2f' % (\n    today.strftime('%d-%b-%Y'),\n    last.open, last.high,\n    last.low, last.close,\n    last.volume*1e-6,\n    last.close - last.open)\nt4 = ax2.text(0.3, 0.9, s, transform=ax2.transAxes, fontsize=textsize)\n\nprops = font_manager.FontProperties(size=10)\nleg = ax2.legend(loc='center left', bbox_to_anchor=(1.05, 1.3), shadow=True, fancybox=True, prop=props)\nleg.get_frame().set_alpha(0.5)\n\n\nvolume = (r.close*r.volume)/1e6  # dollar volume in millions\nvmax = volume.max()\npoly = ax2t.fill_between(r.date, volume, 0, label='Volume', facecolor=fillcolor, edgecolor=fillcolor)\nax2t.set_ylim(0, 5*vmax)\nax2t.set_yticks([])\n\n\n# compute the MACD indicator\nfillcolor = 'darkslategrey'\nnslow = 26\nnfast = 12\nnema = 9\nemaslow, emafast, macd = moving_average_convergence(prices, nslow=nslow, nfast=nfast)\nema9 = moving_average(macd, nema, type='exponential')\nax3.plot(r.date, macd, color='black', lw=2)\nax3.plot(r.date, ema9, color='blue', lw=1)\nax3.fill_between(r.date, macd - ema9, 0, alpha=0.5, facecolor=fillcolor, edgecolor=fillcolor)\n\n\nax3.text(0.025, 0.95, 'MACD (%d, %d, %d)' % (nfast, nslow, nema), va='top',\n         transform=ax3.transAxes, fontsize=textsize)\n\n#ax3.set_yticks([])\n# turn off upper axis tick labels, rotate the lower ones, etc\nfor ax in ax1, ax2, ax2t, ax3:\n    if ax != ax3:\n        for label in ax.get_xticklabels():\n            label.set_visible(False)\n    else:\n        for label in ax.get_xticklabels():\n            label.set_rotation(30)\n            label.set_horizontalalignment('right')\n\n    ax.fmt_xdata = mdates.DateFormatter('%Y-%m-%d')\n\n\nclass MyLocator(mticker.MaxNLocator):\n    def __init__(self, *args, **kwargs):\n        mticker.MaxNLocator.__init__(self, *args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        return mticker.MaxNLocator.__call__(self, *args, **kwargs)\n\n# at most 5 ticks, pruning the upper and lower so they don't overlap\n# with other ticks\n#ax2.yaxis.set_major_locator(mticker.MaxNLocator(5, prune='both'))\n#ax3.yaxis.set_major_locator(mticker.MaxNLocator(5, prune='both'))\n\nax2.yaxis.set_major_locator(MyLocator(5, prune='both'))\nax3.yaxis.set_major_locator(MyLocator(5, prune='both'))\n\nplt.show()\n```\n\n\n![output_122_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/e174031b-c4c1-ef79-7df9-1dae7016cb1d.png \"output_122_0.png\")\n\n\n\n#### (From http://matplotlib.org/examples/pylab_examples/finance_work2.html)\n\n## XKCD-style sketch plots\n\n* Simply blocking our plotting code by `with plt.xkcd()`, we can draw plots in XKCD-style (comic-style).\n* XKCD-style sketch is based on XKCD by Randall Monroe: http://xkcd.com/\n* For more information on `xkcd` function, see: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.xkcd\n\n\n```python\nwith plt.xkcd():\n    line1, = plt.plot([1, 2, 3], label='Line1', linestyle='--')\n    line2, = plt.plot([3, 2, 1], label='Line2', linewidth=4)\n\n    # Create the legend for 1st line\n    first_legend = plt.legend(handles=[line1], loc=1)\n\n    # Add a new legend\n    ax = plt.gca().add_artist(first_legend)\n\n    # Create another legend for the 2nd line\n    plt.legend(handles=[line2], loc=2)\n\n    plt.show()\n```\n\n\n![output_126_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/b8bc20e9-7933-3b57-167c-4cae69b45ff9.png \"output_126_0.png\")\n\n\n\n\n```python\nwith plt.xkcd():\n    ax = plt.subplot(111)\n    t = np.arange(0.0, 5.0, 0.01)\n    s = np.cos(2 * np.pi * t)\n    line, = plt.plot(t, s, lw=2)\n    plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor='k', shrink=0.05))\n    plt.ylim(-2, 2)\n    plt.show()\n```\n\n\n![output_127_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/b2a7cd5c-a117-bfb7-e206-0ebffbc337de.png \"output_127_0.png\")\n\n\n\n```python\nwith plt.xkcd():\n    x = np.array(range(100))\n    line1, = plt.plot(x, x, 'r', label='$Y=x$')\n    line2, = plt.plot(x, x ** 1.5, 'g--', label='$Y=x^2$')\n    plt.legend([line1, line2], ['For $Y=x$', 'For $Y=x^{1.5}$'], loc=2, bbox_to_anchor=(1.05, 1), borderaxespad=0.0)\n    plt.show()\n```\n\n\n![output_128_0.png](https://qiita-image-store.s3.amazonaws.com/0/85962/e5c6927c-de79-ef97-8c3e-bd4e1bc1863c.png \"output_128_0.png\")\n\n\n\n## Credit\n* http://matplotlib.org/users/beginner.html\n\n", "tags": ["Python", "memo", "BASIC", "CheetSheet"]}