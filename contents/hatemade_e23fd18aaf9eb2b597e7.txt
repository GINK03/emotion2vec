{"context": " More than 1 year has passed since last update.iOS9\u3067TLS1.2\u304c\u5fc5\u9808\u306b\u306a\u3063\u305f\u305f\u3081\u3001API\u30b5\u30fc\u30d0\u30fc\u306eTLS\u30921.2\u5fc5\u9808\u306b\u5909\u66f4\u306b\u3057\u305f\u3068\u3053\u308d\u3001Android\u306b\u3066Retrofit\u3068Picasso\u304cjavax.net.ssl.SSLProtocolException\u3092\u51fa\u3057\u3066\u901a\u4fe1\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u4f55\u3068\u304b\u5bfe\u5fdc\u3057\u305f\u306e\u3067\u305d\u306e\u30e1\u30e2\u3002\niOS9\u5bfe\u5fdc\u3067\u4eca\u5f8c\u983b\u767a\u3057\u305d\u3046\u306a\u6c17\u3082\u3059\u308b\u306e\u3067\u5bfe\u51e6\u65b9\u6cd5\u3092\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u8ffd\u8a18\uff1a\u30b5\u30fc\u30d0\u30fc\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u305f\u3068\u3053\u308d\u518d\u3073javax.net.ssl.SSLProtocolException\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3001\u3069\u3046\u3084\u3089TLS1.2\u4ee5\u5916\u306b\u6709\u52b9\u306b\u3057\u3066\u3042\u3063\u305fTlsVersion\u3067\u901a\u4fe1\u304c\u3067\u304d\u3066\u3044\u305f\u6a21\u69d8\u3002\n\u30b5\u30fc\u30d0\u30fc\u5074\u304c\u5b8c\u5168\u306bTLS1.2\u4ee5\u5916\u3092\u901a\u3055\u306a\u3044\u8a2d\u5b9a\u306e\u5834\u5408Android 4.3\u4ee5\u4e0b\u306e\u5834\u5408\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u901a\u4fe1\u3067\u304d\u306a\u3055\u305d\u3046\u3002\n* Qualys SSL Labs - Projects / User Agent Capabilities\n\n\u30a8\u30e9\u30fc\u5185\u5bb9\nHTC HTL21 Android 4.1.1(API16)\u306b\u3066\u30a8\u30e9\u30fc\u3002\nASUS Nexus 7 Android 5.1.1 (API22)\u3067\u306f\u30a8\u30e9\u30fc\u306f\u767a\u751f\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u53e4\u3044\u7aef\u672b\u3067\u767a\u751f\u3059\u308b\u554f\u984c\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\nD/Retrofit: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x5d95bcd0: Failure in SSL library, usually a protocol error\nD/Retrofit: error:14077102:SSL routines:SSL23_GET_SERVER_HELLO:unsupported protocol (external/openssl/ssl/s23_clnt.c:714 0x5c685bbc:0x00000000)\nD/Retrofit:     at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:412)\nD/Retrofit:     at com.squareup.okhttp.Connection.connectTls(Connection.java:235)\nD/Retrofit:     at com.squareup.okhttp.Connection.connectSocket(Connection.java:199)\nD/Retrofit:     at com.squareup.okhttp.Connection.connect(Connection.java:172)\nD/Retrofit:     at com.squareup.okhttp.Connection.connectAndSetOwner(Connection.java:367)\nD/Retrofit:     at com.squareup.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:128)\nD/Retrofit:     at com.squareup.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:328)\nD/Retrofit:     at com.squareup.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:245)\nD/Retrofit:     at com.squareup.okhttp.Call.getResponse(Call.java:267)\n\n\n\u5bfe\u51e6\u65b9\u6cd5\nOkHttpClient\u306bTLS1.2\u3092\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u3092\u305d\u308c\u305e\u308c\u306e\u901a\u4fe1\u6642\u306b\u6e21\u3057\u3066\u3084\u308c\u3070\u3044\u3044\u3002\n\u4ee5\u4e0b\u306ftlsVersions\u306bTLS1.2\u3092\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u3002\npublic static OkHttpClient getFixTlsVersionsClient() {\n    OkHttpClient okHttpClient = new OkHttpClient();\n    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n            .tlsVersions(TlsVersion.TLS_1_2)\n            .build();\n    okHttpClient.setConnectionSpecs(Collections.singletonList(spec));\n    return okHttpClient;\n}\n\n\nRetrofit\nString URL = \"\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044URL\";\nOkHttpClient okHttpClient = getFixTlsVersionsClient();\n\nRestAdapter restAdapter = new RestAdapter.Builder()\n        .setClient(new OkClient(okHttpClient))\n        .setEndpoint(URL).build();\n\n\nPicasso\nOkHttpClient okHttpClient = getFixTlsVersionsClient();\nPicasso picasso = new Picasso.Builder(context).downloader(new OkHttpDownloader(okHttpClient)).build();\npicasso.with(context).load(\"\u753b\u50cf\u306eURL\").into(imageView);\n\n\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4e00\u5ea6\u5b9a\u7fa9\u3059\u308c\u3070\u3001\u6bce\u56de\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b\u3002\nOkHttpClient okHttpClient = getFixTlsVersionsClient();\nPicasso picasso = new Picasso.Builder(context).downloader(new OkHttpDownloader(okHttpClient)).build();\nPicasso.setSingletonInstance(picasso);\n\n\nTLS1.2\u4ee5\u5916\u3082\u5bfe\u5fdc\u3057\u305f\u3044\nTLS1.1\u3084TLS1.0\u3084(POODLE\u306e\u554f\u984c\u304c\u3042\u3063\u305f\u305f\u3081\u4f7f\u308f\u308c\u306a\u3044\u3068\u601d\u3046\u304c)SSL3.0\u3082\u540c\u6642\u306b\u6709\u52b9\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u3001TlsVersion.TLS.TLS_1_2\u306e\u5f8c\u306bTlsVersion.TLS_1_1, TlsVersion.TLS_1_0, TlsVersion.SSL_3_0\u3092\u8ffd\u52a0\u3057\u3066\u3084\u308c\u3070\u3044\u3044\u3002\npublic static OkHttpClient getFixTlsVersionsClient() {\n    OkHttpClient okHttpClient = new OkHttpClient();\n    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n            .tlsVersions(TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0, TlsVersion.SSL_3_0)\n            .build();\n    okHttpClient.setConnectionSpecs(Collections.singletonList(spec));\n    return okHttpClient;\n}\n\n\n\u53c2\u8003\n\nOkHttp\nPicasso (Picasso 2.5.2 API)\nssl - Android Enable TLSv1.2 in OKHttp - Stack Overflow\n\niOS9\u3067TLS1.2\u304c\u5fc5\u9808\u306b\u306a\u3063\u305f\u305f\u3081\u3001API\u30b5\u30fc\u30d0\u30fc\u306eTLS\u30921.2\u5fc5\u9808\u306b\u5909\u66f4\u306b\u3057\u305f\u3068\u3053\u308d\u3001Android\u306b\u3066Retrofit\u3068Picasso\u304cjavax.net.ssl.SSLProtocolException\u3092\u51fa\u3057\u3066\u901a\u4fe1\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u4f55\u3068\u304b\u5bfe\u5fdc\u3057\u305f\u306e\u3067\u305d\u306e\u30e1\u30e2\u3002\niOS9\u5bfe\u5fdc\u3067\u4eca\u5f8c\u983b\u767a\u3057\u305d\u3046\u306a\u6c17\u3082\u3059\u308b\u306e\u3067\u5bfe\u51e6\u65b9\u6cd5\u3092\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n**\u8ffd\u8a18\uff1a\u30b5\u30fc\u30d0\u30fc\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u305f\u3068\u3053\u308d\u518d\u3073javax.net.ssl.SSLProtocolException\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3001\u3069\u3046\u3084\u3089TLS1.2\u4ee5\u5916\u306b\u6709\u52b9\u306b\u3057\u3066\u3042\u3063\u305fTlsVersion\u3067\u901a\u4fe1\u304c\u3067\u304d\u3066\u3044\u305f\u6a21\u69d8\u3002\n\u30b5\u30fc\u30d0\u30fc\u5074\u304c\u5b8c\u5168\u306bTLS1.2\u4ee5\u5916\u3092\u901a\u3055\u306a\u3044\u8a2d\u5b9a\u306e\u5834\u5408Android 4.3\u4ee5\u4e0b\u306e\u5834\u5408\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u901a\u4fe1\u3067\u304d\u306a\u3055\u305d\u3046\u3002**\n* [Qualys SSL Labs - Projects / User Agent Capabilities](https://www.ssllabs.com/ssltest/clients.html)\n\n#\u30a8\u30e9\u30fc\u5185\u5bb9\nHTC HTL21 Android 4.1.1(API16)\u306b\u3066\u30a8\u30e9\u30fc\u3002\nASUS Nexus 7 Android 5.1.1 (API22)\u3067\u306f\u30a8\u30e9\u30fc\u306f\u767a\u751f\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u53e4\u3044\u7aef\u672b\u3067\u767a\u751f\u3059\u308b\u554f\u984c\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n```\nD/Retrofit: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x5d95bcd0: Failure in SSL library, usually a protocol error\nD/Retrofit: error:14077102:SSL routines:SSL23_GET_SERVER_HELLO:unsupported protocol (external/openssl/ssl/s23_clnt.c:714 0x5c685bbc:0x00000000)\nD/Retrofit:     at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:412)\nD/Retrofit:     at com.squareup.okhttp.Connection.connectTls(Connection.java:235)\nD/Retrofit:     at com.squareup.okhttp.Connection.connectSocket(Connection.java:199)\nD/Retrofit:     at com.squareup.okhttp.Connection.connect(Connection.java:172)\nD/Retrofit:     at com.squareup.okhttp.Connection.connectAndSetOwner(Connection.java:367)\nD/Retrofit:     at com.squareup.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:128)\nD/Retrofit:     at com.squareup.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:328)\nD/Retrofit:     at com.squareup.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:245)\nD/Retrofit:     at com.squareup.okhttp.Call.getResponse(Call.java:267)\n```\n\n#\u5bfe\u51e6\u65b9\u6cd5\nOkHttpClient\u306bTLS1.2\u3092\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u3092\u305d\u308c\u305e\u308c\u306e\u901a\u4fe1\u6642\u306b\u6e21\u3057\u3066\u3084\u308c\u3070\u3044\u3044\u3002\n\u4ee5\u4e0b\u306ftlsVersions\u306bTLS1.2\u3092\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u3002\n\n```java\npublic static OkHttpClient getFixTlsVersionsClient() {\n    OkHttpClient okHttpClient = new OkHttpClient();\n    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n            .tlsVersions(TlsVersion.TLS_1_2)\n            .build();\n    okHttpClient.setConnectionSpecs(Collections.singletonList(spec));\n    return okHttpClient;\n}\n```\n\n##Retrofit\n```java\nString URL = \"\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044URL\";\nOkHttpClient okHttpClient = getFixTlsVersionsClient();\n\nRestAdapter restAdapter = new RestAdapter.Builder()\n        .setClient(new OkClient(okHttpClient))\n        .setEndpoint(URL).build();\n```\n\n##Picasso\n```java\nOkHttpClient okHttpClient = getFixTlsVersionsClient();\nPicasso picasso = new Picasso.Builder(context).downloader(new OkHttpDownloader(okHttpClient)).build();\npicasso.with(context).load(\"\u753b\u50cf\u306eURL\").into(imageView);\n```\n\n\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4e00\u5ea6\u5b9a\u7fa9\u3059\u308c\u3070\u3001\u6bce\u56de\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b\u3002\n\n```java\nOkHttpClient okHttpClient = getFixTlsVersionsClient();\nPicasso picasso = new Picasso.Builder(context).downloader(new OkHttpDownloader(okHttpClient)).build();\nPicasso.setSingletonInstance(picasso);\n```\n\n##TLS1.2\u4ee5\u5916\u3082\u5bfe\u5fdc\u3057\u305f\u3044\nTLS1.1\u3084TLS1.0\u3084(POODLE\u306e\u554f\u984c\u304c\u3042\u3063\u305f\u305f\u3081\u4f7f\u308f\u308c\u306a\u3044\u3068\u601d\u3046\u304c)SSL3.0\u3082\u540c\u6642\u306b\u6709\u52b9\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u3001TlsVersion.TLS.TLS_1_2\u306e\u5f8c\u306bTlsVersion.TLS_1_1, TlsVersion.TLS_1_0, TlsVersion.SSL_3_0\u3092\u8ffd\u52a0\u3057\u3066\u3084\u308c\u3070\u3044\u3044\u3002\n\n```java\npublic static OkHttpClient getFixTlsVersionsClient() {\n    OkHttpClient okHttpClient = new OkHttpClient();\n    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n            .tlsVersions(TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0, TlsVersion.SSL_3_0)\n            .build();\n    okHttpClient.setConnectionSpecs(Collections.singletonList(spec));\n    return okHttpClient;\n}\n```\n\n#\u53c2\u8003\n* [OkHttp](http://square.github.io/okhttp/)\n* [Picasso (Picasso 2.5.2 API)](https://square.github.io/picasso/javadoc/com/squareup/picasso/Picasso.html)\n* [ssl - Android Enable TLSv1.2 in OKHttp - Stack Overflow](http://stackoverflow.com/questions/29249630/android-enable-tlsv1-2-in-okhttp)\n\n\n", "tags": ["Android", "Retrofit", "Picasso", "OkHttp", "TLS"]}