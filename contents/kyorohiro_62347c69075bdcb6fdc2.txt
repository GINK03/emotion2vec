{"tags": ["Dart", "P2P", "Torrent"], "context": " More than 1 year has passed since last update.\n\nFindNodes\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\n\n\u901a\u4fe1\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u3001hetimanet\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002API\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f\u4ed6\u306e\u901a\u4fe1\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u5927\u304d\u306a\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u306a\u306e\u3067\u3001\u304a\u4f7f\u3044\u306e\u3082\u306e\u3068\u8aad\u307f\u66ff\u3048\u3066\u8aad\u307f\u9032\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\nRootingTable\u306b\u3001FindeNode\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\n\u6240\u6301\u3057\u3066\u3044\u308bPeerInfo\u3092\u6307\u5b9a\u3055\u308c\u305fKID\u3067\u30bd\u30fc\u30c8\u3057\u3066\u63a2\u3059\u3002\u6307\u5b9a\u3055\u308c\u305fKID\u3068\u8ddd\u96e2\u304c\u8fd1\u3044Node\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002\nclass KRootingTable {\n  ...\n  ...\n  ...\n  List<KPeerInfo> findNode(KId id) {\n    List<KPeerInfo> ids = [];\n    for (KBucket b in _kBuckets) {\n      for (KPeerInfo i in b.iterable) {\n        ids.add(i);\n      }\n    }\n    ids.sort((KPeerInfo a, KPeerInfo b) {\n      return a.id.xor(id).compareTo(b.id.xor(id));\n    });\n    List<KPeerInfo> ret = [];\n     for (KPeerInfo p in ids) {\n      ret.add(p);\n       if (ret.length >= _kBucketSize) {\n         return ret;\n      }\n    }\n    return ret;\n  }\n  ...\n  ...\n}\n\n\n(1) KNode\u306fUDP\u30b5\u30fc\u30d0\u30fc\u6a5f\u80fd\u3092\u6301\u3064\u3002\n\u307e\u305a\u306f\u3001UDP\u3092\u7528\u3044\u3066\u3001\u901a\u4fe1\u90e8\u5206\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002Torrent\u306e\u4ed5\u69d8\u3067\u306f\u3001DHT\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308bPeer\u3092Node\u3068\u8aad\u3093\u3067\u3044\u307e\u3059\u3002\nDHT\u306e\u901a\u4fe1\u3092\u884c\u3046\u4e3b\u4f53\u3068\u3057\u3066\u3001KNode class \u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\nUDP server\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306fbencode\u306a\u306e\u3067\u3057\u305f\u3002\u30d1\u30fc\u30b9\u3057\u3066\u305d\u306eMessage\u3092\u4f7f\u3046class\u306b\u6e21\u3057\u307e\u3059\u3002\nclass KNode {\n  bool _isStart = false;\n  bool get isStart => _isStart;\n  HetiSocketBuilder _socketBuilder = null;\n  HetiUdpSocket _udpSocket = null;\n\n  KNode(HetiSocketBuilder socketBuilder) {\n    this._socketBuilder = socketBuilder;\n  }\n\n  Future start({String ip: \"0.0.0.0\", int port: 28080}) async {\n    (_isStart != false ? throw \"already started\" : 0);\n    _udpSocket = this._socketBuilder.createUdpClient();\n    return _udpSocket.bind(ip, port, multicast: true).then((int v) {\n      _udpSocket.onReceive().listen((HetiReceiveUdpInfo info) {\n        KrpcMessage.decode(info.data, this).then((KrpcMessage message) {\n          onReceiveMessage(info, message);\n        });\n      });\n      _isStart = true;\n    });\n  }\n\n  Future stop() async {\n    if (_isStart == false || _udpSocket == null) {\n      return null;\n    }\n    return _udpSocket.close().whenComplete(() {\n      _isStart = false;\n      _ai.stop(this);\n    });\n  }\n}\n\n\n(2) Krpc Message\u3092\u30d1\u30fc\u30b9\u3059\u308b\u6a5f\u80fd\u3092\u6301\u3064\nMainLine DHT \u3067\u306f\u3001Peer\u3068Peer\u306e\u901a\u4fe1\u306b\u306f\u3001Bencode\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\u3059\u3067\u306bBencode\u306e\u30d1\u30fc\u30b5\u30fc\u306f\u4f5c\u6210\u305a\u307f\u306a\u306e\u3067\u3001\u96e3\u3057\u3044\u3053\u3068\u306f\u306a\u3044\u306f\u305a\u3067\u3059\u3002\nclass KrpcMessage {\n  KrpcMessage.fromMap(Map map) {\n    _messageAsMap = map;\n  }\n\n  static Future<KrpcMessage> decode(List<int> data) async {\n    Map<String, Object> messageAsMap = null;\n    try {\n      Object v = Bencode.decode(data);\n      messageAsMap = v;\n    } catch (e) {\n      throw {};\n    }\n    return  new KrpcMessage.fromMap(messageAsMap);\n  }\n}\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u3042\u3068\u306f\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u3092\u8aad\u307f\u53d6\u308b\u3060\u3051\u3067\u3059\u3002\nclass KrpcMessage {\n...\n...\n  List<int> get transactionId => _messageAsMap[\"t\"]);\n  String get transactionIdAsString => UTF8.decode(transactionId);\n\n  //\n  List<int> get messageType => _messageAsMap[\"y\"];\n  String get messageTypeAsString => UTF8.decode(messageType);\n\n  //\n  List<int> get query => _messageAsMap[\"q\"];\n...\n...\n}\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002BEP5\u306e\u30b9\u30da\u30c3\u30af\u3092\u307f\u308b\u3068\u7d50\u69cb\u3042\u308a\u307e\u3059\u304c\u3082\u6c17\u9577\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u3051\u3070\u3001\u534a\u65e5\u304f\u3089\u3044\u3067\u7d42\u308f\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n(3) \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u6a5f\u80fd\u3092\u6301\u3064\nclass KNode {\n ..\n ..\n  sendMessage(KrpcMessage message, String ip, int port) {\n      return _udpSocket.send(message.messageAsBencode, ip, port);\n  }\n ..\n}\n\nclass FindNode {\n\n  static int queryID = 0;\n\n  static KrpcMessage createQuery(List<int> queryingNodesId, List<int> targetNodeId) {\n    List<int> transactionId = UTF8.encode(\"fi${queryID++}\");\n    return new KrpcMessage.fromMap({\"a\": {\"id\": queryingNodesId, \"target\": targetNodeId}, \"q\": \"find_node\", \"t\": transactionId, \"y\": \"q\"});\n  }\n\n  static KrpcMessage createResponse(List<int> compactNodeInfo, List<int> queryingNodesId, List<int> transactionId) {\n    return new KrpcMessage.fromMap({\"r\": {\"id\": queryingNodesId, \"nodes\": compactNodeInfo}, \"t\": transactionId, \"y\": \"r\"});\n  }\n}\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u306f\u3001\u53d7\u4fe1\u7528\u306b\u4f5c\u6210\u3057\u305fUDPSocket\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u53d7\u4fe1\u76f8\u624b\u306b\u3001\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u4f1d\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n(4) \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3078\u306e\u53c2\u52a0\u7528\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\nRootingTable\u306b\u6240\u6301\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e2d\u304b\u3089\u3001\u81ea\u5206\u81ea\u4fe1\u3068\u3082\u3063\u3068\u3082\u8fd1\u3044KID\u3092\u3082\u3064Peer\u3078FindNode\u30af\u30a8\u30ea\u3092\u9001\u4fe1\u3059\u308b\nclass KNodeWorkFindNode {\n  ...\n  ...\n  updateP2PNetworkWithoutClear(KNode node) {\n    node.rootingtable.findNode(node.nodeId).then((List<KPeerInfo> infos) {\n      for (KPeerInfo info in infos) {\n        if (!_findNodesInfo.rawsequential.contains(info)) {\n          _findNodesInfo.addLast(info);\n          node.sendFindNodeQuery(info.ipAsString, info.port, node.nodeId.value).catchError((_) {});\n        }\n      }\n    });\n  }\n  ...\n  ...\n}\n\n\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u3068\u3063\u305f\u3089\u3001\u3082\u3046\u4e00\u5ea6\u7e70\u308a\u8fd4\u3059\nclass KNodeWorkFindNode {\n  ...\n  ...\n  onReceiveQuery(KNode node, HetiReceiveUdpInfo info, KrpcMessage query) {\n    if (query.queryAsString == KrpcMessage.QUERY_FIND_NODE) {\n      KrpcFindNode findNode = query.toFindNode();\n      return node.rootingtable.findNode(findNode.targetAsKId).then((List<KPeerInfo> infos) {\n        return node.sendFindNodeResponse(info.remoteAddress, info.remotePort, query.transactionId, KPeerInfo.toCompactNodeInfos(infos)).catchError((_) {});\n      });\n    }\n    node.rootingtable.update(new KPeerInfo(info.remoteAddress, info.remotePort, query.nodeIdAsKId));\n    updateP2PNetworkWithoutClear(node);\n  }\n  ...\n  ..\n}\n\n\u4e00\u5b9a\u6642\u9593\u3060\u3063\u305f\u3089\u3001\u3082\u3046\u4e00\u5ea6\u30a2\u30af\u30bb\u30b9\u3059\u308b\nclass KNodeWorkFindNode {\n  ...\n  ...\n\n  onTicket(KNode node) {\n    _findNodesInfo.clear();\n    updateP2PNetworkWithoutClear(node);\n  }\n\n\n(5) FindeNode\u30af\u30a8\u30ea\u53d7\u3051\u53d6\u3063\u305f\u304b\u3089\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u305b\u308b\u3088\u3046\u306b\u3057\u3088\u3046\nclass KNodeWorkFindNode {\n  ...\n  ...\n  onReceiveResponse(KNode node, HetiReceiveUdpInfo info, KrpcMessage response) {\n    if (response.queryFromTransactionId == KrpcMessage.QUERY_FIND_NODE) {\n      KrpcFindNode findNode = response.toFindNode();\n      for (KPeerInfo info in findNode.compactNodeInfoAsKPeerInfo) {\n        node.rootingtable.update(info);\n      }\n    }\n    node.rootingtable.update(new KPeerInfo(info.remoteAddress, info.remotePort, response.nodeIdAsKId));\n    updateP2PNetworkWithoutClear(node);\n  }\n  ..\n}\n\n\n\u6b21\u56de\u3001\u6b21\u6b21\u56de\u306b\u3064\u3044\u3066\n\u6b21\u56de\u3001\u5b9f\u969b\u306bGetPeers\u30af\u30a8\u30ea\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002DHT\u4e0a\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30b7\u30a7\u30a2\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nRef\n\nhttp://www.bittorrent.org/beps/bep_0005.html\nhttp://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf\n\n\nPS\nQiita\u306b\u6295\u7a3f\u3057\u305f\u3001Torrent\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3068\u3001\u3053\u306e\u6587\u7ae0\u306f\u3001gitbook\u306e\u65b9\u3067\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nGitBook \u306a\u305c\u306a\u306bTorrent\nhttps://www.gitbook.com/book/kyorohiro/doc_hetimatorrent/details\n\n\nDart\u7528\u306e\u4f5c\u6210\u3057\u305fTorrent Library\u306f\u4ee5\u4e0b\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n- https://github.com/kyorohiro/dart_hetimatorrent\n- https://github.com/kyorohiro/dart_hetimatorrent/tree/master/example/TorrentDHT\n\nKyorohiro work\nhttp://kyorohiro.strikingly.com\n# FindNodes\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\n<hr>\n\n\n\u901a\u4fe1\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u3001hetimanet\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002API\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f\u4ed6\u306e\u901a\u4fe1\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u5927\u304d\u306a\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u306a\u306e\u3067\u3001\u304a\u4f7f\u3044\u306e\u3082\u306e\u3068\u8aad\u307f\u66ff\u3048\u3066\u8aad\u307f\u9032\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\n## RootingTable\u306b\u3001FindeNode\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\n\n\u6240\u6301\u3057\u3066\u3044\u308bPeerInfo\u3092\u6307\u5b9a\u3055\u308c\u305fKID\u3067\u30bd\u30fc\u30c8\u3057\u3066\u63a2\u3059\u3002\u6307\u5b9a\u3055\u308c\u305fKID\u3068\u8ddd\u96e2\u304c\u8fd1\u3044Node\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```\nclass KRootingTable {\n  ...\n  ...\n  ...\n  List<KPeerInfo> findNode(KId id) {\n    List<KPeerInfo> ids = [];\n    for (KBucket b in _kBuckets) {\n      for (KPeerInfo i in b.iterable) {\n        ids.add(i);\n      }\n    }\n    ids.sort((KPeerInfo a, KPeerInfo b) {\n      return a.id.xor(id).compareTo(b.id.xor(id));\n    });\n    List<KPeerInfo> ret = [];\n     for (KPeerInfo p in ids) {\n      ret.add(p);\n       if (ret.length >= _kBucketSize) {\n         return ret;\n      }\n    }\n    return ret;\n  }\n  ...\n  ...\n}\n```\n\n## (1) KNode\u306fUDP\u30b5\u30fc\u30d0\u30fc\u6a5f\u80fd\u3092\u6301\u3064\u3002\n\n\u307e\u305a\u306f\u3001UDP\u3092\u7528\u3044\u3066\u3001\u901a\u4fe1\u90e8\u5206\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002Torrent\u306e\u4ed5\u69d8\u3067\u306f\u3001DHT\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308bPeer\u3092Node\u3068\u8aad\u3093\u3067\u3044\u307e\u3059\u3002\nDHT\u306e\u901a\u4fe1\u3092\u884c\u3046\u4e3b\u4f53\u3068\u3057\u3066\u3001KNode class \u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\nUDP server\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306fbencode\u306a\u306e\u3067\u3057\u305f\u3002\u30d1\u30fc\u30b9\u3057\u3066\u305d\u306eMessage\u3092\u4f7f\u3046class\u306b\u6e21\u3057\u307e\u3059\u3002\n\n```dart\nclass KNode {\n  bool _isStart = false;\n  bool get isStart => _isStart;\n  HetiSocketBuilder _socketBuilder = null;\n  HetiUdpSocket _udpSocket = null;\n \n  KNode(HetiSocketBuilder socketBuilder) {\n    this._socketBuilder = socketBuilder;\n  }\n  \n  Future start({String ip: \"0.0.0.0\", int port: 28080}) async {\n    (_isStart != false ? throw \"already started\" : 0);\n    _udpSocket = this._socketBuilder.createUdpClient();\n    return _udpSocket.bind(ip, port, multicast: true).then((int v) {\n      _udpSocket.onReceive().listen((HetiReceiveUdpInfo info) {\n        KrpcMessage.decode(info.data, this).then((KrpcMessage message) {\n          onReceiveMessage(info, message);\n        });\n      });\n      _isStart = true;\n    });\n  }\n\n  Future stop() async {\n    if (_isStart == false || _udpSocket == null) {\n      return null;\n    }\n    return _udpSocket.close().whenComplete(() {\n      _isStart = false;\n      _ai.stop(this);\n    });\n  }\n}\n```\n\n## (2) Krpc Message\u3092\u30d1\u30fc\u30b9\u3059\u308b\u6a5f\u80fd\u3092\u6301\u3064\n\nMainLine DHT \u3067\u306f\u3001Peer\u3068Peer\u306e\u901a\u4fe1\u306b\u306f\u3001Bencode\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\u3059\u3067\u306bBencode\u306e\u30d1\u30fc\u30b5\u30fc\u306f\u4f5c\u6210\u305a\u307f\u306a\u306e\u3067\u3001\u96e3\u3057\u3044\u3053\u3068\u306f\u306a\u3044\u306f\u305a\u3067\u3059\u3002\n\n```\nclass KrpcMessage {\n  KrpcMessage.fromMap(Map map) {\n    _messageAsMap = map;\n  }\n\n  static Future<KrpcMessage> decode(List<int> data) async {\n    Map<String, Object> messageAsMap = null;\n    try {\n      Object v = Bencode.decode(data);\n      messageAsMap = v;\n    } catch (e) {\n      throw {};\n    }\n    return  new KrpcMessage.fromMap(messageAsMap);\n  }\n}\n```\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u3042\u3068\u306f\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u3092\u8aad\u307f\u53d6\u308b\u3060\u3051\u3067\u3059\u3002\n\n````\nclass KrpcMessage {\n...\n...\n  List<int> get transactionId => _messageAsMap[\"t\"]);\n  String get transactionIdAsString => UTF8.decode(transactionId);\n\n  //\n  List<int> get messageType => _messageAsMap[\"y\"];\n  String get messageTypeAsString => UTF8.decode(messageType);\n\n  //\n  List<int> get query => _messageAsMap[\"q\"];\n...\n...\n}\n````\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002BEP5\u306e\u30b9\u30da\u30c3\u30af\u3092\u307f\u308b\u3068\u7d50\u69cb\u3042\u308a\u307e\u3059\u304c\u3082\u6c17\u9577\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u3051\u3070\u3001\u534a\u65e5\u304f\u3089\u3044\u3067\u7d42\u308f\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n## (3) \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u6a5f\u80fd\u3092\u6301\u3064\n\n\n```\nclass KNode {\n ..\n ..\n  sendMessage(KrpcMessage message, String ip, int port) {\n      return _udpSocket.send(message.messageAsBencode, ip, port);\n  }\n ..\n}\n\nclass FindNode {\n\n  static int queryID = 0;\n\n  static KrpcMessage createQuery(List<int> queryingNodesId, List<int> targetNodeId) {\n    List<int> transactionId = UTF8.encode(\"fi${queryID++}\");\n    return new KrpcMessage.fromMap({\"a\": {\"id\": queryingNodesId, \"target\": targetNodeId}, \"q\": \"find_node\", \"t\": transactionId, \"y\": \"q\"});\n  }\n\n  static KrpcMessage createResponse(List<int> compactNodeInfo, List<int> queryingNodesId, List<int> transactionId) {\n    return new KrpcMessage.fromMap({\"r\": {\"id\": queryingNodesId, \"nodes\": compactNodeInfo}, \"t\": transactionId, \"y\": \"r\"});\n  }\n}\n```\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u306f\u3001\u53d7\u4fe1\u7528\u306b\u4f5c\u6210\u3057\u305fUDPSocket\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u53d7\u4fe1\u76f8\u624b\u306b\u3001\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u4f1d\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## (4) \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3078\u306e\u53c2\u52a0\u7528\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\nRootingTable\u306b\u6240\u6301\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e2d\u304b\u3089\u3001\u81ea\u5206\u81ea\u4fe1\u3068\u3082\u3063\u3068\u3082\u8fd1\u3044KID\u3092\u3082\u3064Peer\u3078FindNode\u30af\u30a8\u30ea\u3092\u9001\u4fe1\u3059\u308b\n\n```\nclass KNodeWorkFindNode {\n  ...\n  ...\n  updateP2PNetworkWithoutClear(KNode node) {\n    node.rootingtable.findNode(node.nodeId).then((List<KPeerInfo> infos) {\n      for (KPeerInfo info in infos) {\n        if (!_findNodesInfo.rawsequential.contains(info)) {\n          _findNodesInfo.addLast(info);\n          node.sendFindNodeQuery(info.ipAsString, info.port, node.nodeId.value).catchError((_) {});\n        }\n      }\n    });\n  }\n  ...\n  ...\n}\n```\n\n\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u3068\u3063\u305f\u3089\u3001\u3082\u3046\u4e00\u5ea6\u7e70\u308a\u8fd4\u3059\n\n```\nclass KNodeWorkFindNode {\n  ...\n  ...\n  onReceiveQuery(KNode node, HetiReceiveUdpInfo info, KrpcMessage query) {\n    if (query.queryAsString == KrpcMessage.QUERY_FIND_NODE) {\n      KrpcFindNode findNode = query.toFindNode();\n      return node.rootingtable.findNode(findNode.targetAsKId).then((List<KPeerInfo> infos) {\n        return node.sendFindNodeResponse(info.remoteAddress, info.remotePort, query.transactionId, KPeerInfo.toCompactNodeInfos(infos)).catchError((_) {});\n      });\n    }\n    node.rootingtable.update(new KPeerInfo(info.remoteAddress, info.remotePort, query.nodeIdAsKId));\n    updateP2PNetworkWithoutClear(node);\n  }\n  ...\n  ..\n}\n```\n\n\u4e00\u5b9a\u6642\u9593\u3060\u3063\u305f\u3089\u3001\u3082\u3046\u4e00\u5ea6\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\n```\nclass KNodeWorkFindNode {\n  ...\n  ...\n\n  onTicket(KNode node) {\n    _findNodesInfo.clear();\n    updateP2PNetworkWithoutClear(node);\n  }\n```\n\n## (5) FindeNode\u30af\u30a8\u30ea\u53d7\u3051\u53d6\u3063\u305f\u304b\u3089\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u305b\u308b\u3088\u3046\u306b\u3057\u3088\u3046\n\n\n```\nclass KNodeWorkFindNode {\n  ...\n  ...\n  onReceiveResponse(KNode node, HetiReceiveUdpInfo info, KrpcMessage response) {\n    if (response.queryFromTransactionId == KrpcMessage.QUERY_FIND_NODE) {\n      KrpcFindNode findNode = response.toFindNode();\n      for (KPeerInfo info in findNode.compactNodeInfoAsKPeerInfo) {\n        node.rootingtable.update(info);\n      }\n    }\n    node.rootingtable.update(new KPeerInfo(info.remoteAddress, info.remotePort, response.nodeIdAsKId));\n    updateP2PNetworkWithoutClear(node);\n  }\n  ..\n}\n```\n\n\n# \u6b21\u56de\u3001\u6b21\u6b21\u56de\u306b\u3064\u3044\u3066\n\u6b21\u56de\u3001\u5b9f\u969b\u306bGetPeers\u30af\u30a8\u30ea\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002DHT\u4e0a\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30b7\u30a7\u30a2\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n# Ref\n- http://www.bittorrent.org/beps/bep_0005.html\n- http://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf\n\n# PS\n\nQiita\u306b\u6295\u7a3f\u3057\u305f\u3001Torrent\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3068\u3001\u3053\u306e\u6587\u7ae0\u306f\u3001gitbook\u306e\u65b9\u3067\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n- GitBook \u306a\u305c\u306a\u306bTorrent\nhttps://www.gitbook.com/book/kyorohiro/doc_hetimatorrent/details\n\nDart\u7528\u306e\u4f5c\u6210\u3057\u305fTorrent Library\u306f\u4ee5\u4e0b\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n- https://github.com/kyorohiro/dart_hetimatorrent\n- https://github.com/kyorohiro/dart_hetimatorrent/tree/master/example/TorrentDHT\n\n-------\nKyorohiro work\n\nhttp://kyorohiro.strikingly.com\n"}