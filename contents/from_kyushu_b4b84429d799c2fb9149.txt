{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u7570\u661f\u306e\u96fb\u5149\u63b2\u793a\u677f\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f80\u5206\u7a0b\u5ea6\u306820\u5206\u30aa\u30fc\u30d0\u30fc\u3002\n\u7a7a\u767d\uff08\u70b9\u706f\u306e\u306a\u3044\u7e26\u306e\u5217\uff09\u3092\u898b\u3066\u6587\u5b57\u306e\u90e8\u5206\u3092\u629c\u304d\u51fa\u3059\u90e8\u5206\u306e\u5b9f\u88c5\u306b\u975e\u5e38\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u305f\u3002\nclass Board\n  PATTERN = {\n    \"L\" => [\"10\", \"11\"],\n    \"R\" => [\"11\", \"10\"],\n    \"J\" => [\"01\", \"11\"],\n    \"T\" => [\"111\", \"010\"],\n    \"U\" => [\"101\", \"111\"],\n    \"N\" => [\"111\", \"101\"],\n    \"S\" => [\"011\", \"110\"],\n    \"Z\" => [\"110\", \"011\"]\n  }\n\n  def initialize input\n    @chars = []\n    top, bottom = input.split(\"/\").map{|line| \"%032b\" % line.hex}\n\n    indexes = []\n    (\"%032b\" % (top.to_i(2) ^ bottom.to_i(2))).scan(/11/){ indexes << $~.begin(0) }\n    indexes.reverse.each{|i|\n      top = top[0..i] + \"0\" + top[(i+1)..(top.size - 1)]\n      bottom = bottom[0..i] + \"0\" + bottom[(i+1)..(bottom.size - 1)]\n    }\n    format(\"%0*b\", top.size, top.to_i(2) | bottom.to_i(2)).scan(/1{2,3}/){|char|\n      start = $~.begin(0)\n      last  = start + (char.size - 1)\n      @chars << [top[start..last], bottom[start..last]]\n    }\n  end\n\n  def chars\n    @chars.map{|chr|\n      PATTERN.select{|c, pattern| chr === pattern}.keys[0]\n    }.join\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"2ed8aeed/34b0ea5b\", \"LTRSUNTSJ\" );    \n/*1*/ test( \"00000200/00000300\", \"L\" );    \n/*2*/ test( \"00018000/00010000\", \"R\" );    \n/*3*/ test( \"00002000/00006000\", \"J\" );    \n/*4*/ test( \"00000700/00000200\", \"T\" );    \n/*5*/ test( \"01400000/01c00000\", \"U\" );    \n/*6*/ test( \"00003800/00002800\", \"N\" );    \n/*7*/ test( \"000c0000/00180000\", \"S\" );    \n/*8*/ test( \"00003000/00001800\", \"Z\" );    \n/*9*/ test( \"132eae6c/1a64eac6\", \"LRJTUNSZ\" );    \n/*10*/ test( \"637572d0/36572698\", \"ZSNUTJRL\" );    \n/*11*/ test( \"baddb607/d66b6c05\", \"LTJZTSSSN\" );    \n/*12*/ test( \"db74cd75/6dac6b57\", \"ZZZTJZRJNU\" );    \n/*13*/ test( \"3606c2e8/1b0d8358\", \"ZZSSLTJ\" );    \n/*14*/ test( \"ad98c306/e6cc6183\", \"UZZZZZZ\" );    \n/*15*/ test( \"4a4aaee3/db6eeaa6\", \"JJLLUUNNS\" );    \n/*16*/ test( \"ecd9bbb6/598cd124\", \"TSSZZTTRR\" );    \n/*17*/ test( \"e0000002/40000003\", \"TL\" );    \n/*18*/ test( \"a0000007/e0000005\", \"UN\" );    \n/*19*/ test( \"c0000003/80000006\", \"RS\" );    \n/*20*/ test( \"40000006/c0000003\", \"JZ\" );    \n/*21*/ test( \"01da94db/00b3b6b2\", \"TSUJLRSR\" );    \n/*22*/ test( \"76eeaaea/24aaeeae\", \"TRNNUUNU\" );    \n/*23*/ test( \"1dacaeee/1566e444\", \"NRJZUTTT\" );    \n/*24*/ test( \"26c9ac60/6c6d66c0\", \"JSZLRJZS\" );    \n/*25*/ test( \"6c977620/36da5360\", \"ZZLLTNZJ\" );    \n/*26*/ test( \"069aeae6/0db34eac\", \"SJSLTUNS\" );    \n/*27*/ test( \"06d53724/049da56c\", \"RRULRNJJ\" );    \n/*28*/ test( \"069b58b0/04d66da0\", \"RLRSLZJR\" );    \n/*29*/ test( \"1b6eced4/11b46a9c\", \"RZZTZNRU\" );    \n/*30*/ test( \"522e8b80/db6ad900\", \"JLLJNLJT\" );    \n/*31*/ test( \"6546cdd0/376c6898\", \"ZULSZRTL\" );    \n/*32*/ test( \"4e6d5b70/6ad9d620\", \"LNSSURST\" );    \n/*33*/ test( \"37367772/65635256\", \"SNSZNTNJ\" );    \n/*34*/ test( \"25535d58/377669cc\", \"LUUSLTUZ\" );    \n/*35*/ test( \"0ae6a55d/0eacedcb\", \"UNSUJUTJ\" );    \n/*36*/ test( \"76762edc/23536a88\", \"TZNZJNRT\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'EleBoard' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);\\s*$/).to_a\n    board = Board.new input\n    it input do\n      assert_equal expect, board.chars\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u7570\u661f\u306e\u96fb\u5149\u63b2\u793a\u677f](http://nabetani.sakura.ne.jp/hena/ord15elebubo/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f80\u5206\u7a0b\u5ea6\u306820\u5206\u30aa\u30fc\u30d0\u30fc\u3002\n\n\u7a7a\u767d\uff08\u70b9\u706f\u306e\u306a\u3044\u7e26\u306e\u5217\uff09\u3092\u898b\u3066\u6587\u5b57\u306e\u90e8\u5206\u3092\u629c\u304d\u51fa\u3059\u90e8\u5206\u306e\u5b9f\u88c5\u306b\u975e\u5e38\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\n```ruby\nclass Board\n  PATTERN = {\n    \"L\" => [\"10\", \"11\"],\n    \"R\" => [\"11\", \"10\"],\n    \"J\" => [\"01\", \"11\"],\n    \"T\" => [\"111\", \"010\"],\n    \"U\" => [\"101\", \"111\"],\n    \"N\" => [\"111\", \"101\"],\n    \"S\" => [\"011\", \"110\"],\n    \"Z\" => [\"110\", \"011\"]\n  }\n\n  def initialize input\n    @chars = []\n    top, bottom = input.split(\"/\").map{|line| \"%032b\" % line.hex}\n\n    indexes = []\n    (\"%032b\" % (top.to_i(2) ^ bottom.to_i(2))).scan(/11/){ indexes << $~.begin(0) }\n    indexes.reverse.each{|i|\n      top = top[0..i] + \"0\" + top[(i+1)..(top.size - 1)]\n      bottom = bottom[0..i] + \"0\" + bottom[(i+1)..(bottom.size - 1)]\n    }\n    format(\"%0*b\", top.size, top.to_i(2) | bottom.to_i(2)).scan(/1{2,3}/){|char|\n      start = $~.begin(0)\n      last  = start + (char.size - 1)\n      @chars << [top[start..last], bottom[start..last]]\n    }\n  end\n\n  def chars\n    @chars.map{|chr|\n      PATTERN.select{|c, pattern| chr === pattern}.keys[0]\n    }.join\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"2ed8aeed/34b0ea5b\", \"LTRSUNTSJ\" );    \n/*1*/ test( \"00000200/00000300\", \"L\" );    \n/*2*/ test( \"00018000/00010000\", \"R\" );    \n/*3*/ test( \"00002000/00006000\", \"J\" );    \n/*4*/ test( \"00000700/00000200\", \"T\" );    \n/*5*/ test( \"01400000/01c00000\", \"U\" );    \n/*6*/ test( \"00003800/00002800\", \"N\" );    \n/*7*/ test( \"000c0000/00180000\", \"S\" );    \n/*8*/ test( \"00003000/00001800\", \"Z\" );    \n/*9*/ test( \"132eae6c/1a64eac6\", \"LRJTUNSZ\" );    \n/*10*/ test( \"637572d0/36572698\", \"ZSNUTJRL\" );    \n/*11*/ test( \"baddb607/d66b6c05\", \"LTJZTSSSN\" );    \n/*12*/ test( \"db74cd75/6dac6b57\", \"ZZZTJZRJNU\" );    \n/*13*/ test( \"3606c2e8/1b0d8358\", \"ZZSSLTJ\" );    \n/*14*/ test( \"ad98c306/e6cc6183\", \"UZZZZZZ\" );    \n/*15*/ test( \"4a4aaee3/db6eeaa6\", \"JJLLUUNNS\" );    \n/*16*/ test( \"ecd9bbb6/598cd124\", \"TSSZZTTRR\" );    \n/*17*/ test( \"e0000002/40000003\", \"TL\" );    \n/*18*/ test( \"a0000007/e0000005\", \"UN\" );    \n/*19*/ test( \"c0000003/80000006\", \"RS\" );    \n/*20*/ test( \"40000006/c0000003\", \"JZ\" );    \n/*21*/ test( \"01da94db/00b3b6b2\", \"TSUJLRSR\" );    \n/*22*/ test( \"76eeaaea/24aaeeae\", \"TRNNUUNU\" );    \n/*23*/ test( \"1dacaeee/1566e444\", \"NRJZUTTT\" );    \n/*24*/ test( \"26c9ac60/6c6d66c0\", \"JSZLRJZS\" );    \n/*25*/ test( \"6c977620/36da5360\", \"ZZLLTNZJ\" );    \n/*26*/ test( \"069aeae6/0db34eac\", \"SJSLTUNS\" );    \n/*27*/ test( \"06d53724/049da56c\", \"RRULRNJJ\" );    \n/*28*/ test( \"069b58b0/04d66da0\", \"RLRSLZJR\" );    \n/*29*/ test( \"1b6eced4/11b46a9c\", \"RZZTZNRU\" );    \n/*30*/ test( \"522e8b80/db6ad900\", \"JLLJNLJT\" );    \n/*31*/ test( \"6546cdd0/376c6898\", \"ZULSZRTL\" );    \n/*32*/ test( \"4e6d5b70/6ad9d620\", \"LNSSURST\" );    \n/*33*/ test( \"37367772/65635256\", \"SNSZNTNJ\" );    \n/*34*/ test( \"25535d58/377669cc\", \"LUUSLTUZ\" );    \n/*35*/ test( \"0ae6a55d/0eacedcb\", \"UNSUJUTJ\" );    \n/*36*/ test( \"76762edc/23536a88\", \"TZNZJNRT\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'EleBoard' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);\\s*$/).to_a\n    board = Board.new input\n    it input do\n      assert_equal expect, board.chars\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}