{"context": "\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3092\u4f8b\u984c\u306b\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3088\u3002\n\n\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u306f\n\u30ce\u30a4\u30ba\u3068\u3044\u3046\u540d\u306e\u30da\u30eb\u30bd\u30ca\u3092\u5f15\u304d\u306f\u304c\u3057\u3001\u771f\u306e\u59ff\u3092\u63a8\u5b9a\u3059\u308b\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u3002\n\n\u7406\u8ad6\u7684\u306a\u3053\u3068\n\u5178\u578b\u7684\u306a\u8a2d\u5b9a\u3068\u3057\u3066\u3001\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\\begin{align}\nx_{t+1} &= F_t x_t + G_t w_t \\tag{1.1}\\\\\ny_t &= H_t x_t + v_t \\tag{1.2}\\\\\n\\end{align}\nxt+1=Ftxt+Gtwtyt=Htxt+vt{\\begin{align}\nx_{t+1} &= F_t x_t + G_t w_t \\tag{1.1}\\\\\ny_t &= H_t x_t + v_t \\tag{1.2}\\\\\n\\end{align}\n}\nxtx_t\u306f\u30b7\u30b9\u30c6\u30e0\u306e\u5185\u90e8\u72b6\u614b\u3092\u8868\u3057\u3001yty_t\u306f\u305d\u306e\u89b3\u6e2c\u5024\u3067\u3059\u3002\u5185\u90e8\u72b6\u614bxtx_t\u306f(1.1)(1.1)\u306b\u5f93\u3044\u6642\u9593\u767a\u5c55\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u4e00\u65b9\u3067\u3001\u89b3\u6e2c\u5024yty_t\u306f(1.2)(1.2)\u306b\u5f93\u3063\u3066\u3001\u30ce\u30a4\u30ba\u304c\u4e57\u3063\u305f\u72b6\u614b\u3067\u6383\u304d\u51fa\u3055\u308c\u307e\u3059\u3002\u89b3\u6e2c\u5024yty_t\u304b\u3089\u3001\u76f4\u63a5\u89b3\u6e2c\u3067\u304d\u306a\u3044\u5185\u90e8\u72b6\u614bxtx_t\u3092\u63a8\u6e2c\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3059\u3002\n\u8a2d\u5b9a\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u3001wtw_t \u3068vtv_t\u306f\u305d\u308c\u305e\u308c\u72ec\u7acb\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3044\u3001\u540c\u6642\u523b\u3067\u306e\u307f\u81ea\u5df1\u76f8\u95a2\u3092\u6301\u3064\u3068\u3057\u307e\u3059\u3002wtw_t\u3068vtv_t\u306e\u72ec\u7acb\u6027\u3068\u30d9\u30a4\u30ba\u5b9a\u7406\u3092\u7528\u3044\u308b\u3068\n\\begin{align}\np(x_t|Y^t) &= \\frac{p(y_t|x_t)p(x_t|Y^{t-1})}{p(y_t|Y^{t-1})} \\tag{2.1}\\\\\np(x_{t+1}|Y^t) &= \\int p(x_{t+1}|x_t)p(x_t|Y^t)dx_t \\tag{2.2}\n\\end{align}\np(xt|Yt)=p(yt|xt)p(xt|Yt\u22121)p(yt|Yt\u22121)p(xt+1|Yt)=\u222bp(xt+1|xt)p(xt|Yt)dxt{\\begin{align}\np(x_t|Y^t) &= \\frac{p(y_t|x_t)p(x_t|Y^{t-1})}{p(y_t|Y^{t-1})} \\tag{2.1}\\\\\np(x_{t+1}|Y^t) &= \\int p(x_{t+1}|x_t)p(x_t|Y^t)dx_t \\tag{2.2}\n\\end{align}\n}\n\u3068\u3044\u3046\u95a2\u4fc2\u5f0f\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u3001YtY^t\u306f\u6642\u523btt\u307e\u3067\u306eyty_t\u306e\u5024\u3001\u3064\u307e\u308a \nY^t=\\left\\{y_1, y_2, ..., y_t\\right\\}\nYt={y1,y2,...,yt}{Y^t=\\left\\{y_1, y_2, ..., y_t\\right\\}\n}\n\u3092\u8868\u3059\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\u3055\u3066\u3001(2.1)(2.1)\u304b\u3089\u306f\u3001\u6642\u523btt\u307e\u3067\u306e\u89b3\u6e2c\u5024YtY^t\u304c\u5206\u304b\u3063\u305f\u72b6\u614b\u3067\u306e\u3001xtx_t\u306e\u63a8\u5b9a\u5024\u02c6xt|t\\hat{x}_{t|t}\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001(2.1)(2.1)\u306e\u53f3\u8fba\u3092\u898b\u308b\u3068p(xt|Yt\u22121)p(x_t|Y^{t-1})\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u02c6xt|t\\hat{x}_{t|t}\u3092\u5f97\u308b\u306b\u306f\u3001\u6642\u523bt\u22121t-1\u307e\u3067\u306e\u89b3\u6e2c\u5024Yt\u22121Y^{t-1}\u304c\u5206\u304b\u3063\u305f\u72b6\u614b\u3067\u306extx_t\u306e\u63a8\u5b9a\u5024\u02c6xt|t\u22121\\hat{x}_{t|t-1}\u3092\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u02c6xt|t\u22121\\hat{x}_{t|t-1}\u306f\u3001(2.2)(2.2)\u3088\u308a\u5f97\u3089\u308c\u307e\u3059\u304c\u3001(2.2)(2.2)\u306e\u53f3\u8fba\u3092\u898b\u308b\u3068\u3001\u02c6xt|t\u22121\\hat{x}_{t|t-1}\u3092\u5f97\u308b\u306b\u306f\u3001\u3055\u3089\u306b\u02c6xt\u22121|t\u22121\\hat{x}_{t-1|t-1}\u304c\u5fc5\u8981\u3068\u306a\u3063\u3066\u304f\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002\n\u4ee5\u4e0a\u3088\u308a\u3001\u02c6xt|t\u22121\\hat{x}_{t|t-1}\u3068\u02c6xt|t\\hat{x}_{t|t}\u3092\u4ea4\u4e92\u306b\u8a08\u7b97\u3057\u306a\u304c\u3089xtx_t\u306e\u63a8\u5b9a\u3092\u884c\u3046\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u308b\u3053\u3068\u304c\u7d0d\u5f97\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\n\u4e00\u65b9\u3067\u3001\u7d42\u7aef\u6642\u523b\u307e\u3067\u306e\u89b3\u6e2c\u5024\u304c\u5f97\u3089\u308c\u3066\u3044\u308b\u306a\u3089\u3070\np(x_t|Y^N) = \\int \\frac{p(x_{t+1}|x_t)p(x_t|Y^t)p(x_{t+1}|Y^N)}{p(x_{t+1}|Y^t)}dx_{t+1} \\tag{2.3}\np(xt|YN)=\u222bp(xt+1|xt)p(xt|Yt)p(xt+1|YN)p(xt+1|Yt)dxt+1{p(x_t|Y^N) = \\int \\frac{p(x_{t+1}|x_t)p(x_t|Y^t)p(x_{t+1}|Y^N)}{p(x_{t+1}|Y^t)}dx_{t+1} \\tag{2.3}\n}\n\u3068\u3044\u3046\u5f0f\u3082\u5c0e\u3051\u307e\u3059\u3002\u3053\u3053\u3067\u3001NN\u306f\u7d42\u7aef\u6642\u523b\u3068\u3057\u307e\u3059\u3002(2.3)(2.3)\u3088\u308a\u3001\u5168\u3066\u306e\u89b3\u6e2c\u5024YNY^N\u304c\u5f97\u3089\u308c\u305f\u72b6\u614b\u3067\u306extx_t\u306e\u63a8\u5b9a\u5024\u02c6xt|N\\hat{x}_{t|N}\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u53f3\u8fba\u306e\u5206\u5b50/\u7b2c\uff13\u9805\u3092\u898b\u308b\u3068\u3001\u02c6xt+1|N\\hat{x}_{t+1|N}\u3092\u3042\u3089\u304b\u3058\u3081\u6c42\u3081\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u3002\u3088\u3063\u3066\u3001\u02c6xt|N\\hat{x}_{t|N}\u3092\u6c42\u3081\u308b\u904e\u7a0b\u306f\u3001\u6642\u9593\u306e\u9006\u9806\u306bt=Nt=N\u304b\u3089t=1t=1\u306b\u5411\u304b\u3063\u3066\u9032\u307f\u307e\u3059\u3002\u307e\u305f\u3001(2.3)(2.3)\u306e\u53f3\u8fba\u306e\u5206\u5b50/\u7b2c2\u9805\u304b\u3089\u306f\u3001\u02c6xt|t\\hat{x}_{t|t}\u3082\u6c42\u3081\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u5206\u304b\u308a\u307e\u3059\u306e\u3067\u3001\u6642\u9593\u306b\u3064\u3044\u3066\u9806\u65b9\u5411\u306e\u63a8\u5b9a\u306e\u5f8c\u306b\u9006\u65b9\u5411\u306e\u63a8\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u306e\u9006\u65b9\u5411\u306b\u9032\u3080\u904e\u7a0b\u306f\u3001\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3067\u5b9f\u9a13\n\n\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\n\u7c21\u5358\u306a\u4f8b\u984c\u3068\u3057\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002(1.1)(1.1)\u3001(1.2)(1.2)\u306e\u5f0f\u306f\n\\begin{align}\nx_{t+1} &= x_t + w_t \\tag{3.1}\\\\\ny_t &= x_t + v_t \\tag{3.2}\n\\end{align}\nxt+1=xt+wtyt=xt+vt{\\begin{align}\nx_{t+1} &= x_t + w_t \\tag{3.1}\\\\\ny_t &= x_t + v_t \\tag{3.2}\n\\end{align}\n}\n\u3068\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001wtw_t\u3068vtv_t\u306f\u305d\u308c\u305e\u308c\u72ec\u7acb\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u3082\u306e\u3068\u3057\u3001\u540c\u6642\u523b\u3067\u306e\u307f\u81ea\u5df1\u76f8\u95a2\u3092\u6301\u3064\u3068\u3057\u307e\u3059\u3002\n(3.1)(3.1)\u304c\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u771f\u306e\u52d5\u304d\u3092\u8868\u3057\u3001(3.2)(3.2)\u3067\u30ce\u30a4\u30ba\u304c\u52a0\u308f\u308a\u89b3\u6e2c\u5024\u304c\u5f97\u3089\u308c\u3066\u3044\u308b\u3068\u8003\u3048\u308b\u3068\u3044\u3044\u3067\u3057\u3087\u3046\u3002\u89b3\u6e2c\u5024\u306eyty_t\u3057\u304b\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3051\u3069\u3001\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3057\u3066\u3082\u3068\u306extx_t\u3092\u63a8\u6e2c\u3057\u305f\u3044\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3059\u3002\n\u3064\u3044\u3067\u306a\u306e\u3067\u3001python\u3067\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4f7f\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4e0b\u306e3\u3064\u3067\u5341\u5206\u3067\u3059\u3002\nimport numpy as npimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_context('poster')\n\n\u4e0a\u306e\u5f0f\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u306f\u3001(3.1)(3.1)\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3092\u4f5c\u308a\u3001\u305d\u306e\u5f8c\u3067(3.2)(3.2)\u306e\u3088\u3046\u306b\u30ce\u30a4\u30ba\u3092\u306e\u305b\u307e\u3059\u3002\ndef random_walker(start_position=0, mean=0, deviation=1, n_steps=99, seed=None):\n\n    if seed is not None:\n        np.random.seed(seed=seed)\n\n    move = np.random.normal(loc=mean, scale=deviation, size=n_steps)\n    position = np.insert(move, 0, start_position)\n    position = np.cumsum(position)\n\n    return position\n\n\n\ndef add_noise(position, mean=0, deviation=10, seed=None):\n\n    if seed is not None:\n        np.random.seed(seed=seed)\n\n    n_observation = len(position)\n    noise = np.random.normal(loc=mean, scale=deviation, size=n_observation)\n    observation = position + noise\n\n    return observation\n\n\u5b9f\u969b\u306b\u30ce\u30a4\u30ba\u304c\u306e\u3063\u305f\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u306f0\u3068\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u5b9f\u969b\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u5206\u6563\uff08wtw_t\u306e\u5206\u6563\uff09\u30921\u3001\u30ce\u30a4\u30ba\u306e\u5206\u6563\uff08vtv_t\u306e\u5206\u6563\uff09\u309210\u3068\u3057\u307e\u3059\u3002\u5e73\u5747\u306f\u3068\u3082\u306b0\u3068\u3057\u307e\u3059\u3002\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u306f1~100\u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ntrue_position = random_walker(start_position=0, mean=0, deviation=1, n_steps=99, seed=0)\nobserved_position = add_noise(true_position, mean=0, deviation=10, seed=0)\n\n\u30b0\u30e9\u30d5\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nplt.plot(true_position, 'r--', label='True Positions')\nplt.plot(observed_position, 'y', label='Observed Ppositions')\nplt.title('Random Walk')\nplt.xlabel('time step')\nplt.ylabel('position')\nplt.legend(loc='best')\n\n\n\u898b\u4e8b\u306a\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3067\u3059\u306d\u3002\nTrue Positions\u304c\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u771f\u306e\u5024xtx_t\u3001Observed Positions\u304c\u30ce\u30a4\u30ba\u306e\u306e\u3063\u305f\u89b3\u6e2c\u5024yty_t\u3067\u3059\u3002\n\u89b3\u6e2c\u5024\u304c\u6c5a\u3044\u3067\u3059\u306d\u3002\n\n\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\n\u3053\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u30e2\u30c7\u30eb\u306b\u5408\u308f\u305b\u3066\u3001\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u5f0f\u3092\u66f8\u304d\u4e0b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002wtw_t\u306f\u5e73\u57470\u3001\u5206\u6563qq\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u3001vtv_t\u306f\u5e73\u57470\u3001\u5206\u6563rr\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u3068\u3057\u307e\u3059\u3002\n\u5c0e\u51fa\u306f\u7701\u304d\u307e\u3059\u304c\u3001\u6642\u9593\u306e\u9806\u65b9\u5411\u306b\u02c6xt|t\u22121\\hat{x}_{t|t-1}\u3001\u02c6xt|t\\hat{x}_{t|t}\u3092\u6c42\u3081\u3066\u3044\u304f\u5f0f\u306f\u3001\n\\begin{align}\n&\\hat{x}_{t/t} = \\hat{x}_{t/t-1} + K_t(y_t - \\hat{x}_{t/t-1}) \\\\\n&\\hat{x}_{t+1/t} = \\hat{x}_{t/t} \\\\\n&K_t = \\frac{P_{t/t-1}}{P_{t/t-1} + r} \\\\\n&P_{t/t} = \\frac{r P_{t/t-1}}{P_{t/t-1} + r} \\\\\n&P_{t+1/t} = P_{t/t} + q \\\\\n\\end{align}\n\u02c6xt/t=\u02c6xt/t\u22121+Kt(yt\u2212\u02c6xt/t\u22121)\u02c6xt+1/t=\u02c6xt/tKt=Pt/t\u22121Pt/t\u22121+rPt/t=rPt/t\u22121Pt/t\u22121+rPt+1/t=Pt/t+q{\\begin{align}\n&\\hat{x}_{t/t} = \\hat{x}_{t/t-1} + K_t(y_t - \\hat{x}_{t/t-1}) \\\\\n&\\hat{x}_{t+1/t} = \\hat{x}_{t/t} \\\\\n&K_t = \\frac{P_{t/t-1}}{P_{t/t-1} + r} \\\\\n&P_{t/t} = \\frac{r P_{t/t-1}}{P_{t/t-1} + r} \\\\\n&P_{t+1/t} = P_{t/t} + q \\\\\n\\end{align}\n}\n\u6642\u9593\u306e\u9006\u9806\u306b\u02c6xt|N\\hat{x}_{t|N}\u3092\u6c42\u3081\u3066\u3044\u304f\u5f0f\u306f\u3001\n\\begin{align}\n&\\hat{x}_{t/N} = \\hat{x}_{t/t} + C_t(\\hat{x}_{t+1/N} - \\hat{x}_{t+1/t}) \\\\\n&C_t = \\frac{P_{t/t}}{P_{t/t} + q} \\\\\n&P_{t/N} = P_{t/t} + C^2_t(P_{t+1/N} - P_{t+1/N})\n\\end{align}\n\u02c6xt/N=\u02c6xt/t+Ct(\u02c6xt+1/N\u2212\u02c6xt+1/t)Ct=Pt/tPt/t+qPt/N=Pt/t+C2t(Pt+1/N\u2212Pt+1/N){\\begin{align}\n&\\hat{x}_{t/N} = \\hat{x}_{t/t} + C_t(\\hat{x}_{t+1/N} - \\hat{x}_{t+1/t}) \\\\\n&C_t = \\frac{P_{t/t}}{P_{t/t} + q} \\\\\n&P_{t/N} = P_{t/t} + C^2_t(P_{t+1/N} - P_{t+1/N})\n\\end{align}\n}\n\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nclass Simple_Kalman:\n\n    def __init__(self, observation, start_position, start_deviation, deviation_true, deviation_noise):\n\n        self.obs = observation\n        self.n_obs = len(observation)\n        self.start_pos = start_position\n        self.start_dev = start_deviation\n        self.dev_q = deviation_true\n        self.dev_r = deviation_noise\n\n        self._fit()\n\n\n    def _forward(self):\n\n        self.x_prev_ = [self.start_pos]\n        self.P_prev_ = [self.start_dev]\n        self.K_ = [self.P_prev_[0] / (self.P_prev_[0] + self.dev_r)]\n        self.P_ = [self.dev_r * self.P_prev_[0] / (self.P_prev_[0] + self.dev_r)]\n        self.x_ = [self.x_prev_[0] + self.K_[0] * (self.obs[0] - self.x_prev_[0])]\n\n        for t in range(1, self.n_obs):\n            self.x_prev_.append(self.x_[t-1])\n            self.P_prev_.append(self.P_[t-1] + self.dev_q)\n\n            self.K_.append(self.P_prev_[t] / (self.P_prev_[t] + self.dev_r))\n            self.x_.append(self.x_prev_[t] + self.K_[t] * (self.obs[t] - self.x_prev_[t]))\n            self.P_.append(self.dev_r * self.P_prev_[t] / (self.P_prev_[t] + self.dev_r))\n\n\n    def _backward(self):\n\n        self.x_all_ = [self.x_[-1]]\n        self.P_all_ = [self.P_[-1]]\n        self.C_ = [self.P_[-1] / (self.P_[-1] + self.dev_q)]\n\n        for t in range(2, self.n_obs + 1):\n            self.C_.append(self.P_[-t] / (self.P_[-t] + self.dev_q))\n            self.x_all_.append(self.x_[-t] + self.C_[-1] * (self.x_all_[-1] - self.x_prev_[-t+1]))\n            self.P_all_.append(self.P_[-t] + (self.C_[-1]**2) * (self.P_all_[-1] - self.P_prev_[-t+1]))\n\n        self.C_.reverse()\n        self.x_all_.reverse()\n        self.P_all_.reverse()\n\n\n    def _fit(self):\n        self._forward()\n        self._backward()\n\n\u305d\u308c\u3067\u306f\u3001\u5148\u307b\u3069\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306b\u9069\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5b9f\u969b\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3084\u30ce\u30a4\u30ba\u306e\u5206\u6563\u306e\u771f\u306e\u5024\u306f\u308f\u304b\u3089\u306a\u3044\u5834\u5408\u304c\u666e\u901a\u306a\u306e\u3067\u63a8\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u3053\u3067\u306f\u771f\u306e\u5024\u3092\u4f7f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\nkf = Simple_Kalman(observed_position, start_position=0, start_deviation=1, deviation_true=1, deviation_noise=10)\n\n\u30b0\u30e9\u30d5\u306b\u3057\u3066\u307f\u307e\u3059\u3002\nplt.plot(true_position, 'r--', label='True Positions')\nplt.plot(observed_position, 'y', label='Observed Ppositions')\nplt.plot(kf.x_, 'blue' ,label='Foward Estimation')\nplt.plot(kf.x_all_, 'black', label='Smoothed Estimation')\nplt.title('Random Walk')\nplt.xlabel('time step')\nplt.ylabel('position')\nplt.legend(loc='best')\n\n\nForward Estimation\u304c\u02c6xt|t\\hat{x}_{t|t}\u3092\u3001Smoothed Estimation\u304c\u02c6xt|N\\hat{x}_{t|N}\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\u304d\u308c\u3044\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n\n\u53c2\u8003\u6587\u732e\n\u975e\u7dda\u5f62\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\n\u671d\u5009\u66f8\u5e97\u3001\u7247\u5c71\u5fb9\n\u6570\u5f0f\u306f\u3053\u306e\u672c\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3057\u305f\u898b\u4e8b\u306a\u8868\u7d19\u3067\u3059\u306d\u3002\n### \u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3092\u4f8b\u984c\u306b\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3088\u3002\n\n# \u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u306f\n\u30ce\u30a4\u30ba\u3068\u3044\u3046\u540d\u306e\u30da\u30eb\u30bd\u30ca\u3092\u5f15\u304d\u306f\u304c\u3057\u3001\u771f\u306e\u59ff\u3092\u63a8\u5b9a\u3059\u308b\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u3002\n\n# \u7406\u8ad6\u7684\u306a\u3053\u3068\n\u5178\u578b\u7684\u306a\u8a2d\u5b9a\u3068\u3057\u3066\u3001\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```math\n\\begin{align}\nx_{t+1} &= F_t x_t + G_t w_t \\tag{1.1}\\\\\ny_t &= H_t x_t + v_t \\tag{1.2}\\\\\n\\end{align}\n```\n$x_t$\u306f\u30b7\u30b9\u30c6\u30e0\u306e\u5185\u90e8\u72b6\u614b\u3092\u8868\u3057\u3001$y_t$\u306f\u305d\u306e\u89b3\u6e2c\u5024\u3067\u3059\u3002\u5185\u90e8\u72b6\u614b$x_t$\u306f$(1.1)$\u306b\u5f93\u3044\u6642\u9593\u767a\u5c55\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u4e00\u65b9\u3067\u3001\u89b3\u6e2c\u5024$y_t$\u306f$(1.2)$\u306b\u5f93\u3063\u3066\u3001\u30ce\u30a4\u30ba\u304c\u4e57\u3063\u305f\u72b6\u614b\u3067\u6383\u304d\u51fa\u3055\u308c\u307e\u3059\u3002\u89b3\u6e2c\u5024$y_t$\u304b\u3089\u3001\u76f4\u63a5\u89b3\u6e2c\u3067\u304d\u306a\u3044\u5185\u90e8\u72b6\u614b$x_t$\u3092\u63a8\u6e2c\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3059\u3002\n\u8a2d\u5b9a\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u3001$w_t$ \u3068$v_t$\u306f\u305d\u308c\u305e\u308c\u72ec\u7acb\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3044\u3001\u540c\u6642\u523b\u3067\u306e\u307f\u81ea\u5df1\u76f8\u95a2\u3092\u6301\u3064\u3068\u3057\u307e\u3059\u3002$w_t$\u3068$v_t$\u306e\u72ec\u7acb\u6027\u3068\u30d9\u30a4\u30ba\u5b9a\u7406\u3092\u7528\u3044\u308b\u3068\n\n```math\n\\begin{align}\np(x_t|Y^t) &= \\frac{p(y_t|x_t)p(x_t|Y^{t-1})}{p(y_t|Y^{t-1})} \\tag{2.1}\\\\\np(x_{t+1}|Y^t) &= \\int p(x_{t+1}|x_t)p(x_t|Y^t)dx_t \\tag{2.2}\n\\end{align}\n```\n\n\u3068\u3044\u3046\u95a2\u4fc2\u5f0f\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u3001$Y^t$\u306f\u6642\u523b$t$\u307e\u3067\u306e$y_t$\u306e\u5024\u3001\u3064\u307e\u308a \n\n```math\nY^t=\\left\\{y_1, y_2, ..., y_t\\right\\}\n```\n\u3092\u8868\u3059\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\u3055\u3066\u3001$(2.1)$\u304b\u3089\u306f\u3001\u6642\u523b$t$\u307e\u3067\u306e\u89b3\u6e2c\u5024$Y^t$\u304c\u5206\u304b\u3063\u305f\u72b6\u614b\u3067\u306e\u3001$x_t$\u306e\u63a8\u5b9a\u5024$\\hat{x}\\_{t|t}$\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001$(2.1)$\u306e\u53f3\u8fba\u3092\u898b\u308b\u3068$p(x_t|Y^{t-1})$\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001$\\hat{x}\\_{t|t}$\u3092\u5f97\u308b\u306b\u306f\u3001\u6642\u523b$t-1$\u307e\u3067\u306e\u89b3\u6e2c\u5024$Y\\^{t-1}$\u304c\u5206\u304b\u3063\u305f\u72b6\u614b\u3067\u306e$x_t$\u306e\u63a8\u5b9a\u5024$\\hat{x}\\_{t|t-1}$\u3092\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e$\\hat{x}\\_{t|t-1}$\u306f\u3001$(2.2)$\u3088\u308a\u5f97\u3089\u308c\u307e\u3059\u304c\u3001$(2.2)$\u306e\u53f3\u8fba\u3092\u898b\u308b\u3068\u3001$\\hat{x}\\_{t|t-1}$\u3092\u5f97\u308b\u306b\u306f\u3001\u3055\u3089\u306b$\\hat{x}\\_{t-1|t-1}$\u304c\u5fc5\u8981\u3068\u306a\u3063\u3066\u304f\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002\n\u4ee5\u4e0a\u3088\u308a\u3001$\\hat{x}\\_{t|t-1}$\u3068$\\hat{x}\\_{t|t}$\u3092\u4ea4\u4e92\u306b\u8a08\u7b97\u3057\u306a\u304c\u3089$x\\_t$\u306e\u63a8\u5b9a\u3092\u884c\u3046\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u308b\u3053\u3068\u304c\u7d0d\u5f97\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u4e00\u65b9\u3067\u3001\u7d42\u7aef\u6642\u523b\u307e\u3067\u306e\u89b3\u6e2c\u5024\u304c\u5f97\u3089\u308c\u3066\u3044\u308b\u306a\u3089\u3070\n\n```math\np(x_t|Y^N) = \\int \\frac{p(x_{t+1}|x_t)p(x_t|Y^t)p(x_{t+1}|Y^N)}{p(x_{t+1}|Y^t)}dx_{t+1} \\tag{2.3}\n```\n\n\u3068\u3044\u3046\u5f0f\u3082\u5c0e\u3051\u307e\u3059\u3002\u3053\u3053\u3067\u3001$N$\u306f\u7d42\u7aef\u6642\u523b\u3068\u3057\u307e\u3059\u3002$(2.3)$\u3088\u308a\u3001\u5168\u3066\u306e\u89b3\u6e2c\u5024$Y^N$\u304c\u5f97\u3089\u308c\u305f\u72b6\u614b\u3067\u306e$x_t$\u306e\u63a8\u5b9a\u5024$\\hat{x}\\_{t|N}$\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u53f3\u8fba\u306e\u5206\u5b50/\u7b2c\uff13\u9805\u3092\u898b\u308b\u3068\u3001$\\hat{x}\\_{t+1|N}$\u3092\u3042\u3089\u304b\u3058\u3081\u6c42\u3081\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u3002\u3088\u3063\u3066\u3001$\\hat{x}\\_{t|N}$\u3092\u6c42\u3081\u308b\u904e\u7a0b\u306f\u3001\u6642\u9593\u306e\u9006\u9806\u306b$t=N$\u304b\u3089$t=1$\u306b\u5411\u304b\u3063\u3066\u9032\u307f\u307e\u3059\u3002\u307e\u305f\u3001$(2.3)$\u306e\u53f3\u8fba\u306e\u5206\u5b50/\u7b2c2\u9805\u304b\u3089\u306f\u3001$\\hat{x}\\_{t|t}$\u3082\u6c42\u3081\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u5206\u304b\u308a\u307e\u3059\u306e\u3067\u3001\u6642\u9593\u306b\u3064\u3044\u3066\u9806\u65b9\u5411\u306e\u63a8\u5b9a\u306e\u5f8c\u306b\u9006\u65b9\u5411\u306e\u63a8\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u306e\u9006\u65b9\u5411\u306b\u9032\u3080\u904e\u7a0b\u306f\u3001\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n\n# \u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3067\u5b9f\u9a13\n## \u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\n\u7c21\u5358\u306a\u4f8b\u984c\u3068\u3057\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002$(1.1)$\u3001$(1.2)$\u306e\u5f0f\u306f\n\n```math\n\\begin{align}\nx_{t+1} &= x_t + w_t \\tag{3.1}\\\\\ny_t &= x_t + v_t \\tag{3.2}\n\\end{align}\n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001$w_t$\u3068$v_t$\u306f\u305d\u308c\u305e\u308c\u72ec\u7acb\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u3082\u306e\u3068\u3057\u3001\u540c\u6642\u523b\u3067\u306e\u307f\u81ea\u5df1\u76f8\u95a2\u3092\u6301\u3064\u3068\u3057\u307e\u3059\u3002\n$(3.1)$\u304c\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u771f\u306e\u52d5\u304d\u3092\u8868\u3057\u3001$(3.2)$\u3067\u30ce\u30a4\u30ba\u304c\u52a0\u308f\u308a\u89b3\u6e2c\u5024\u304c\u5f97\u3089\u308c\u3066\u3044\u308b\u3068\u8003\u3048\u308b\u3068\u3044\u3044\u3067\u3057\u3087\u3046\u3002\u89b3\u6e2c\u5024\u306e$y_t$\u3057\u304b\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3051\u3069\u3001\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3057\u3066\u3082\u3068\u306e$x_t$\u3092\u63a8\u6e2c\u3057\u305f\u3044\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3059\u3002\n\n\u3064\u3044\u3067\u306a\u306e\u3067\u3001python\u3067\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4f7f\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4e0b\u306e3\u3064\u3067\u5341\u5206\u3067\u3059\u3002\n\n```py3\nimport numpy as npimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_context('poster')\n```\n\n\u4e0a\u306e\u5f0f\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u306f\u3001$(3.1)$\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3092\u4f5c\u308a\u3001\u305d\u306e\u5f8c\u3067$(3.2)$\u306e\u3088\u3046\u306b\u30ce\u30a4\u30ba\u3092\u306e\u305b\u307e\u3059\u3002\n\n```py3\ndef random_walker(start_position=0, mean=0, deviation=1, n_steps=99, seed=None):\n    \n    if seed is not None:\n        np.random.seed(seed=seed)\n    \n    move = np.random.normal(loc=mean, scale=deviation, size=n_steps)\n    position = np.insert(move, 0, start_position)\n    position = np.cumsum(position)\n    \n    return position\n\n\n\ndef add_noise(position, mean=0, deviation=10, seed=None):\n    \n    if seed is not None:\n        np.random.seed(seed=seed)\n    \n    n_observation = len(position)\n    noise = np.random.normal(loc=mean, scale=deviation, size=n_observation)\n    observation = position + noise\n    \n    return observation\n```\n\n\u5b9f\u969b\u306b\u30ce\u30a4\u30ba\u304c\u306e\u3063\u305f\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u306f0\u3068\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u5b9f\u969b\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u5206\u6563\uff08$w_t$\u306e\u5206\u6563\uff09\u30921\u3001\u30ce\u30a4\u30ba\u306e\u5206\u6563\uff08$v_t$\u306e\u5206\u6563\uff09\u309210\u3068\u3057\u307e\u3059\u3002\u5e73\u5747\u306f\u3068\u3082\u306b0\u3068\u3057\u307e\u3059\u3002\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u306f1~100\u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py3\ntrue_position = random_walker(start_position=0, mean=0, deviation=1, n_steps=99, seed=0)\nobserved_position = add_noise(true_position, mean=0, deviation=10, seed=0)\n```\n\n\u30b0\u30e9\u30d5\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3\nplt.plot(true_position, 'r--', label='True Positions')\nplt.plot(observed_position, 'y', label='Observed Ppositions')\nplt.title('Random Walk')\nplt.xlabel('time step')\nplt.ylabel('position')\nplt.legend(loc='best')\n```\n\n![random_walk.png](https://qiita-image-store.s3.amazonaws.com/0/132984/8c3cb150-f025-03e1-245f-70e76d4c0b0f.png)\n\n\u898b\u4e8b\u306a\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3067\u3059\u306d\u3002\nTrue Positions\u304c\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u771f\u306e\u5024$x_t$\u3001Observed Positions\u304c\u30ce\u30a4\u30ba\u306e\u306e\u3063\u305f\u89b3\u6e2c\u5024$y_t$\u3067\u3059\u3002\n\n\u89b3\u6e2c\u5024\u304c\u6c5a\u3044\u3067\u3059\u306d\u3002\n\n## \u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\n\n\u3053\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u30e2\u30c7\u30eb\u306b\u5408\u308f\u305b\u3066\u3001\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u5f0f\u3092\u66f8\u304d\u4e0b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002$w_t$\u306f\u5e73\u57470\u3001\u5206\u6563$q$\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u3001$v_t$\u306f\u5e73\u57470\u3001\u5206\u6563$r$\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u3068\u3057\u307e\u3059\u3002\n\u5c0e\u51fa\u306f\u7701\u304d\u307e\u3059\u304c\u3001\u6642\u9593\u306e\u9806\u65b9\u5411\u306b$\\hat{x}\\_{t|t-1}$\u3001$\\hat{x}\\_{t|t}$\u3092\u6c42\u3081\u3066\u3044\u304f\u5f0f\u306f\u3001\n\n```math\n\\begin{align}\n&\\hat{x}_{t/t} = \\hat{x}_{t/t-1} + K_t(y_t - \\hat{x}_{t/t-1}) \\\\\n&\\hat{x}_{t+1/t} = \\hat{x}_{t/t} \\\\\n&K_t = \\frac{P_{t/t-1}}{P_{t/t-1} + r} \\\\\n&P_{t/t} = \\frac{r P_{t/t-1}}{P_{t/t-1} + r} \\\\\n&P_{t+1/t} = P_{t/t} + q \\\\\n\\end{align}\n```\n\u6642\u9593\u306e\u9006\u9806\u306b$\\hat{x}\\_{t|N}$\u3092\u6c42\u3081\u3066\u3044\u304f\u5f0f\u306f\u3001\n\n```math\n\\begin{align}\n&\\hat{x}_{t/N} = \\hat{x}_{t/t} + C_t(\\hat{x}_{t+1/N} - \\hat{x}_{t+1/t}) \\\\\n&C_t = \\frac{P_{t/t}}{P_{t/t} + q} \\\\\n&P_{t/N} = P_{t/t} + C^2_t(P_{t+1/N} - P_{t+1/N})\n\\end{align}\n```\n\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3\nclass Simple_Kalman:\n    \n    def __init__(self, observation, start_position, start_deviation, deviation_true, deviation_noise):\n       \n        self.obs = observation\n        self.n_obs = len(observation)\n        self.start_pos = start_position\n        self.start_dev = start_deviation\n        self.dev_q = deviation_true\n        self.dev_r = deviation_noise\n        \n        self._fit()\n\n        \n    def _forward(self):\n        \n        self.x_prev_ = [self.start_pos]\n        self.P_prev_ = [self.start_dev]\n        self.K_ = [self.P_prev_[0] / (self.P_prev_[0] + self.dev_r)]\n        self.P_ = [self.dev_r * self.P_prev_[0] / (self.P_prev_[0] + self.dev_r)]\n        self.x_ = [self.x_prev_[0] + self.K_[0] * (self.obs[0] - self.x_prev_[0])]\n        \n        for t in range(1, self.n_obs):\n            self.x_prev_.append(self.x_[t-1])\n            self.P_prev_.append(self.P_[t-1] + self.dev_q)\n            \n            self.K_.append(self.P_prev_[t] / (self.P_prev_[t] + self.dev_r))\n            self.x_.append(self.x_prev_[t] + self.K_[t] * (self.obs[t] - self.x_prev_[t]))\n            self.P_.append(self.dev_r * self.P_prev_[t] / (self.P_prev_[t] + self.dev_r))\n\n            \n    def _backward(self):\n        \n        self.x_all_ = [self.x_[-1]]\n        self.P_all_ = [self.P_[-1]]\n        self.C_ = [self.P_[-1] / (self.P_[-1] + self.dev_q)]\n        \n        for t in range(2, self.n_obs + 1):\n            self.C_.append(self.P_[-t] / (self.P_[-t] + self.dev_q))\n            self.x_all_.append(self.x_[-t] + self.C_[-1] * (self.x_all_[-1] - self.x_prev_[-t+1]))\n            self.P_all_.append(self.P_[-t] + (self.C_[-1]**2) * (self.P_all_[-1] - self.P_prev_[-t+1]))\n        \n        self.C_.reverse()\n        self.x_all_.reverse()\n        self.P_all_.reverse()\n\n            \n    def _fit(self):\n        self._forward()\n        self._backward()\n```\n\u305d\u308c\u3067\u306f\u3001\u5148\u307b\u3069\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306b\u9069\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5b9f\u969b\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3084\u30ce\u30a4\u30ba\u306e\u5206\u6563\u306e\u771f\u306e\u5024\u306f\u308f\u304b\u3089\u306a\u3044\u5834\u5408\u304c\u666e\u901a\u306a\u306e\u3067\u63a8\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u3053\u3067\u306f\u771f\u306e\u5024\u3092\u4f7f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n\n```py3\nkf = Simple_Kalman(observed_position, start_position=0, start_deviation=1, deviation_true=1, deviation_noise=10)\n```\n\u30b0\u30e9\u30d5\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3\nplt.plot(true_position, 'r--', label='True Positions')\nplt.plot(observed_position, 'y', label='Observed Ppositions')\nplt.plot(kf.x_, 'blue' ,label='Foward Estimation')\nplt.plot(kf.x_all_, 'black', label='Smoothed Estimation')\nplt.title('Random Walk')\nplt.xlabel('time step')\nplt.ylabel('position')\nplt.legend(loc='best')\n```\n\n![kalman_filter.png](https://qiita-image-store.s3.amazonaws.com/0/132984/558e8f0d-d0b9-6b90-cb44-cb186038546c.png)\n\nForward Estimation\u304c$\\hat{x}\\_{t|t}$\u3092\u3001Smoothed Estimation\u304c$\\hat{x}\\_{t|N}$\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u304d\u308c\u3044\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n\n# \u53c2\u8003\u6587\u732e\n\n[\u975e\u7dda\u5f62\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf](https://www.amazon.co.jp/%E9%9D%9E%E7%B7%9A%E5%BD%A2%E3%82%AB%E3%83%AB%E3%83%9E%E3%83%B3%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF-%E7%89%87%E5%B1%B1-%E5%BE%B9/dp/4254201486/)\n\u671d\u5009\u66f8\u5e97\u3001\u7247\u5c71\u5fb9\n\n\u6570\u5f0f\u306f\u3053\u306e\u672c\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3057\u305f\u898b\u4e8b\u306a\u8868\u7d19\u3067\u3059\u306d\u3002\n", "tags": ["Python", "KalmanFilter", "\u6642\u7cfb\u5217\u89e3\u6790", "\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af"]}