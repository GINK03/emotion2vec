{"context": "\n\n\u6982\u8981\nPlay\u306f\u3001\u4ee5\u524d\u306fDI\u8981\u3089\u306a\u3044\u3068\u304b\u8a00\u3063\u3066\u3044\u305f\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3057\u305f\u304c\u30012.3~2.5\u3042\u305f\u308a\u304b\u3089Global\u4f9d\u5b58\u3092\u8f9e\u3081\u3066DI\u30d9\u30fc\u30b9\u306e\u5b9f\u88c5\u306b\u306a\u308b\u3088\u3046\u306b\u3069\u3093\u3069\u3093\u6539\u826f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u6539\u3081\u3066\u3001Play\uff08\u3068\u3044\u3046\u304bWeb\u30a2\u30d7\u30ea\u5168\u822c\uff09\u3067DI\u3092\u4f7f\u3046\u3068\u3069\u306e\u3088\u3046\u306b\u5b09\u3057\u3044\u306e\u304b\u3092\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08\u306a\u304a\u3001Scala\u3067\u306f\u9759\u7684DI\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u304c\u4e3b\u6d41\u306a\u6c17\u3082\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306fGuice\u306b\u3088\u308b\u52d5\u7684\u306aDI\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002\uff09\n\n\u74b0\u5883\n\nPlay 2.5\nscalaTest\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\nhttps://github.com/uryyyyyyy/play2sample/tree/guiceDI\n\nDI\u306e\u6e96\u5099\nJava\u754c\u9688\u3067\u306f\u5272\u3068\u6709\u540d\u306a\u8cac\u52d9\u5206\u5272\u3068\u3057\u3066\u3001\n\nController\u5c64\n\n\nMVC\u306eC\u3002\n\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u3066Service\u306b\u51e6\u7406\u3055\u305b\u3066View\u306b\u6295\u3052\u308b\u5f79\u5272\u3092\u62c5\u3046\u3002\n\u7d50\u679c\u306b\u5fdc\u3058\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u5909\u3048\u305f\u308a\u3059\u308b\u304c\u3001\u57fa\u672c\u30ed\u30b8\u30c3\u30af\u3092\u6301\u305f\u306a\u3044\u3002\n\n\nService\n\n\n\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u3092\u62c5\u3046\u3002\n\u5916\u90e8\u63a5\u7d9a\u7cfb\u306f\u5f8c\u8ff0\u306eDAO\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u3002\n\n\nDAO\n\n\n\u5916\u90e8\u30ea\u30bd\u30fc\u30b9\u306e\u30a2\u30af\u30bb\u30b9\u3092\u62c5\u3046\u3002\n\n\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u5206\u3051\u3089\u308c\u307e\u3059\u306d\u3002\n\u3053\u308c\u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002\n\nController\u5c64\n\nMyDIController.scala\nimport javax.inject.{Inject, Singleton}\n\nimport akka.actor.ActorSystem\nimport com.github.uryyyyyyy.services.MyService\nimport play.api.mvc.{Action, Controller}\n\nimport scala.concurrent.ExecutionContext\n\n@Singleton\nclass MyDIController @Inject() (myService: MyService, actorSystem: ActorSystem) extends Controller {\n\n  implicit val myExecutionContext: ExecutionContext = actorSystem.dispatcher\n\n  def message = Action.async {\n    myService.exec(\"str\").map { msg => Ok(msg) }\n  }\n}\n\n\n\u3053\u3053\u3067\u306fService\u3092DI\u3057\u3066\u3044\u307e\u3059\u3002\uff08actorSystem\u306fFuture\u306e\u305f\u3081\u306b\u4ed5\u65b9\u306a\u304f\uff09\n\u7279\u306b\u5fc5\u8981\u306a\u3044\u306e\u3067Singleton\u3067\u3059\u3002\n\nService\u5c64\n\nMyService.scala\nimport scala.concurrent.Future\n\ntrait MyService {\n  def exec(str: String): Future[String]\n}\n\n\n\n\nMyServiceImpl.scala\nimport javax.inject.{Inject, Singleton}\n\nimport akka.actor.ActorSystem\nimport com.github.uryyyyyyy.daos.MyDao\n\nimport scala.concurrent.{ExecutionContext, Future}\n\n@Singleton\nclass MyServiceImpl @Inject() (myDao: MyDao, actorSystem: ActorSystem) extends MyService {\n\n  implicit val myExecutionContext: ExecutionContext = actorSystem.dispatcher\n\n  def exec(str: String): Future[String] = {\n    Future{\n      str + \" \" + myDao.exec().getOrElse(\"null\")\n    }\n  }\n}\n\n\n\nmyService\u306f\u3042\u304f\u307e\u3067trait\u3067\u3001\u5b9f\u88c5\u306fImpl\u306e\u65b9\u306b\u66f8\u304d\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001Controller\u304c\u5b9f\u88c5\u306b\u4f9d\u5b58\u3057\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fmyDao\u3092DI\u3057\u3066\u3044\u307e\u3059\u306d\u3002\u3053\u3061\u3089\u3082Singleton\u306b\u3057\u307e\u3059\u3002\n\uff08\u4eca\u56de\u306f\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u304c\u3001RDB\u63a5\u7d9a\u3067\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001\u4e00\u822c\u7684\u306bService\u5c64\u3067\u7ba1\u7406\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\uff09\n\nDAO\u5c64\n\nMyDao.scala\ntrait MyDao {\n  def exec(): Option[String]\n}\n\n\n\nMyDaoImpl.scala\nimport javax.inject.{Inject, Singleton}\n\nimport play.api.db.{Database, NamedDatabase}\nimport scalikejdbc._\n\n@Singleton\nclass MyDaoImpl @Inject() (@NamedDatabase(\"mySample\") db: Database) extends MyDao {\n\n  def exec(): Option[String] = {\n    using(db.getConnection(autocommit = false)) { conn =>\n      val ss = DB(conn).readOnly { implicit session =>\n        sql\"select 2\".map( rs => rs.long(1)).single.apply()\n      }\n      ss.map(_.toString)\n    }\n  }\n}\n\n\n\u3053\u3053\u3067\u306fMyDao\u306e\u5b9f\u88c5\u3068\u3057\u3066Impl\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f9d\u5b58\u3059\u308b\u3082\u306e\u306fDB\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30c6\u30b9\u30c8\u6642\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5dee\u3057\u66ff\u3048\u308b\u3053\u3068\u304c\u5bb9\u6613\u306b\u306a\u308a\u307e\u3059\u3002\n\uff08DB\u306fapplication.conf\u306bmySample\u3068\u3044\u3046\u540d\u524d\u3067\u8a2d\u5b9a\u304c\u66f8\u3044\u3066\u3042\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\uff09\n\nPlay\u8d77\u52d5\u6642\u306b\u52d5\u7684DI\u3092\u884c\u3046\n\u3055\u3066\u3001\u3053\u3053\u307e\u3067\u3067\u305d\u308c\u305e\u308c\u62bd\u8c61\u30fb\u5177\u8c61\u3092\u4f5c\u308a\u3001\u62bd\u8c61\u306e\u307f\u306b\u4f9d\u5b58\u3059\u308b\u5f62\u304c\u4f5c\u308c\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u3069\u306e\u5177\u8c61\u3092\u4f7f\u3048\u3070\u3044\u3044\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001Guice\u3092\u7528\u3044\u3067\u5b9f\u884c\u6642\u306bDI\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u3001Play\u3067\u306fModule\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nImplModule.scala\nimport com.github.uryyyyyyy.daos.{MyDao, MyDaoImpl}\nimport com.github.uryyyyyyy.services.{MyService, MyServiceImpl}\nimport com.google.inject.AbstractModule\n\nclass ImplModule extends AbstractModule {\n\n  override def configure() = {\n    bind(classOf[MyService]).to(classOf[MyServiceImpl])\n    bind(classOf[MyDao]).to(classOf[MyDaoImpl])\n  }\n}\n\n\n\u3053\u308c\u3092application.conf\u3067\u8d77\u52d5\u6642\u306b\u8aad\u3080\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nplay.modules {\n  enabled += modules.ImplModule\n  #enabled += modules.MockModule\n\n  # If there are any built-in modules that you want to disable, you can list them here.\n  #disabled += \"\"\n}\n\n\u4eca\u56de\u306fImplModule\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u5225\u306eModule\u3092\u547c\u3073\u3060\u305b\u3070\u5225\u306e\u5b9f\u88c5\u3092\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u5927\u898f\u6a21\u958b\u767a\u3084\u958b\u767a\u6642\u306e\u30e2\u30c3\u30af\u30b5\u30fc\u30d0\u7528\u9014\u306b\u4f7f\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\uff08\u3061\u306a\u307f\u306b\u3001\u3053\u3053\u3092\u30df\u30b9\u308b\u3068\u8d77\u52d5\u6642\u306b\u308f\u308a\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3001\u6163\u308c\u3066\u306a\u3044\u3068\u30cf\u30de\u308b\u304b\u3082\u3067\u3059\u3002\uff09\n\u3055\u3066\u3001\u3053\u3053\u307e\u3067\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u3066\u3044\u308c\u3070\u3001\u30a2\u30af\u30bb\u30b9\u6642\u306bmySample\u306eDB\u8a2d\u5b9a\u3092\u7528\u3044\u3066SQL\u3092\u767a\u884c\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u5b9f\u88c5\u306f\u6163\u308c\u306a\u3044\u3068\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u306d\u3002\n\u306a\u305c\u3053\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u7c97\u7d50\u5408\u306b\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n\nController\u306e\u30c6\u30b9\u30c8\n\nMyDIControllerTest.scala\nimport java.util.concurrent.TimeUnit\n\nimport akka.actor.ActorSystem\nimport akka.util.Timeout\nimport com.github.uryyyyyyy.services.MyService\nimport org.mockito.Matchers.any\nimport org.mockito.Mockito._\nimport org.scalatest.mock.MockitoSugar\nimport org.scalatest.{FunSpec, MustMatchers}\nimport play.api.mvc.Result\nimport play.api.test.{FakeRequest, Helpers}\n\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.Future\n\nclass MyDIControllerTest extends FunSpec with MustMatchers with MockitoSugar  {\n\n  describe(\"MyDIControllerTest\") {\n\n    implicit val timeout = Timeout(5000, TimeUnit.MILLISECONDS)\n\n    it(\"controllerTest\"){\n      val mockService = mock[MyService]\n      when(mockService.exec(any[String])) thenReturn Future{\"str\"}\n\n      val actorSystem = ActorSystem.apply()\n      val controller = new MyDIController(mockService, actorSystem)\n\n      val result: Future[Result] = controller.message().apply(FakeRequest())\n      Helpers.contentAsString(result) mustBe \"str\"\n      Helpers.status(result) mustBe 200\n    }\n  }\n\n}\n\n\n\u3053\u3053\u3067\u306f\u3001Controller\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308bSerivce\u3092Mock\u3067DI\u3057\u3066\u3001Controller\u306e\u307f\u306e\u6319\u52d5\u3092\u78ba\u8a8d\u51fa\u6765\u308b\u3088\u3046\u306b\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001Service\u304c\u8fd4\u3057\u305f\u5024\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3001context\u3068statusCode\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001Service\u304c\u7570\u5e38\u7cfb\u3092\u8fd4\u3057\u305f\u30894XX\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3082\u5bb9\u6613\u3067\u3059\u3002\n\nService\u306e\u30c6\u30b9\u30c8\n\nMyServiceImplTest.scala\nimport akka.actor.ActorSystem\nimport com.github.uryyyyyyy.daos.MyDao\nimport org.mockito.Mockito._\nimport org.scalatest.mock.MockitoSugar\nimport org.scalatest.{FunSpec, MustMatchers}\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration.Duration\n\nclass MyServiceImplTest extends FunSpec with MustMatchers with MockitoSugar {\n\n  describe(\"MyServiceImplTest\") {\n\n    it(\"service\"){\n      val mockDao = mock[MyDao]\n      when(mockDao.exec()) thenReturn Some(\"mm\")\n\n      val actorSystem = ActorSystem.apply()\n      val service = new MyServiceImpl(mockDao, actorSystem)\n      val result = Await.result(service.exec(\"aaa\"), Duration.Inf)\n      result mustBe \"aaa mm\"\n    }\n  }\n\n}\n\n\n\nController\u306e\u30c6\u30b9\u30c8\u3068\u540c\u69d8\u306b\u3001Dao\u3092\u30e2\u30c3\u30af\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u898b\u305f\u307e\u3093\u307e\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30c6\u30b9\u30c8\u3067\u3059\u306d\u3002\n\nDao\u306e\u30c6\u30b9\u30c8\n\nMyDaoImplTest.scala\nimport org.scalatest.mock.MockitoSugar\nimport org.scalatest.{FunSpec, MustMatchers}\nimport play.api.db.Databases\n\nclass MyDaoImplTest extends FunSpec with MustMatchers with MockitoSugar {\n\n  describe(\"MyDaoImplTest\") {\n\n    it(\"dao\"){\n      val database = Databases(\n        \"org.h2.Driver\",\n        \"jdbc:h2:mem:play\"\n      )\n\n      val dao = new MyDaoImpl(database)\n      val result = dao.exec()\n      result mustBe Some(\"2\")\n\n      database.shutdown()\n    }\n  }\n}\n\n\nDAO\u306e\u30c6\u30b9\u30c8\u306f\u3001\u5916\u90e8\u30ea\u30bd\u30fc\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u306a\u3044\u3068\u3067\u304d\u306a\u3044\u3067\u3059\u304c\u3001\u672c\u756a\u3084\u958b\u767a\u3067\u4f7f\u3063\u3066\u308b\u30ea\u30bd\u30fc\u30b9\u306b\u7e4b\u3050\u308f\u3051\u306b\u3082\u3044\u304b\u306a\u3044\u306e\u3067\u3001\u3053\u3053\u3082DI\u3067\u5bfe\u8c61\u3092\u5dee\u3057\u66ff\u3048\u308b\u3084\u308a\u65b9\u304c\u52b9\u3044\u3066\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fDB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b\u3053\u3068\u3067\u5b89\u5168\u306b\u30c6\u30b9\u30c8\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nDI\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u4f55\u304b\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u304c\u306a\u304f\u306a\u308a\u3001\u30c6\u30b9\u30c8\u304c\u3068\u3066\u3082\u7c21\u5358\u306b\u304b\u3051\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\nGuice DI\u3001\u3069\u3093\u3069\u3093\u4f7f\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n## \u6982\u8981\n\nPlay\u306f\u3001\u4ee5\u524d\u306fDI\u8981\u3089\u306a\u3044\u3068\u304b\u8a00\u3063\u3066\u3044\u305f\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3057\u305f\u304c\u30012.3~2.5\u3042\u305f\u308a\u304b\u3089Global\u4f9d\u5b58\u3092\u8f9e\u3081\u3066DI\u30d9\u30fc\u30b9\u306e\u5b9f\u88c5\u306b\u306a\u308b\u3088\u3046\u306b\u3069\u3093\u3069\u3093\u6539\u826f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u6539\u3081\u3066\u3001Play\uff08\u3068\u3044\u3046\u304bWeb\u30a2\u30d7\u30ea\u5168\u822c\uff09\u3067DI\u3092\u4f7f\u3046\u3068\u3069\u306e\u3088\u3046\u306b\u5b09\u3057\u3044\u306e\u304b\u3092\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\uff08\u306a\u304a\u3001Scala\u3067\u306f\u9759\u7684DI\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u304c\u4e3b\u6d41\u306a\u6c17\u3082\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306fGuice\u306b\u3088\u308b\u52d5\u7684\u306aDI\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002\uff09\n\n## \u74b0\u5883\n\n- Play 2.5\n- scalaTest\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\nhttps://github.com/uryyyyyyy/play2sample/tree/guiceDI\n\n## DI\u306e\u6e96\u5099\n\nJava\u754c\u9688\u3067\u306f\u5272\u3068\u6709\u540d\u306a\u8cac\u52d9\u5206\u5272\u3068\u3057\u3066\u3001\n\n- Controller\u5c64\n  - MVC\u306eC\u3002\n  - \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u3066Service\u306b\u51e6\u7406\u3055\u305b\u3066View\u306b\u6295\u3052\u308b\u5f79\u5272\u3092\u62c5\u3046\u3002\n  - \u7d50\u679c\u306b\u5fdc\u3058\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u5909\u3048\u305f\u308a\u3059\u308b\u304c\u3001\u57fa\u672c\u30ed\u30b8\u30c3\u30af\u3092\u6301\u305f\u306a\u3044\u3002\n- Service\n  - \u30e1\u30a4\u30f3\u306e\u51e6\u7406\u3092\u62c5\u3046\u3002\n  - \u5916\u90e8\u63a5\u7d9a\u7cfb\u306f\u5f8c\u8ff0\u306eDAO\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u3002\n- DAO\n  - \u5916\u90e8\u30ea\u30bd\u30fc\u30b9\u306e\u30a2\u30af\u30bb\u30b9\u3092\u62c5\u3046\u3002\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u5206\u3051\u3089\u308c\u307e\u3059\u306d\u3002\n\u3053\u308c\u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002\n\n### Controller\u5c64\n\n```scala:MyDIController.scala\nimport javax.inject.{Inject, Singleton}\n\nimport akka.actor.ActorSystem\nimport com.github.uryyyyyyy.services.MyService\nimport play.api.mvc.{Action, Controller}\n\nimport scala.concurrent.ExecutionContext\n\n@Singleton\nclass MyDIController @Inject() (myService: MyService, actorSystem: ActorSystem) extends Controller {\n\n  implicit val myExecutionContext: ExecutionContext = actorSystem.dispatcher\n\n  def message = Action.async {\n    myService.exec(\"str\").map { msg => Ok(msg) }\n  }\n}\n```\n\n\u3053\u3053\u3067\u306fService\u3092DI\u3057\u3066\u3044\u307e\u3059\u3002\uff08actorSystem\u306fFuture\u306e\u305f\u3081\u306b\u4ed5\u65b9\u306a\u304f\uff09\n\u7279\u306b\u5fc5\u8981\u306a\u3044\u306e\u3067Singleton\u3067\u3059\u3002\n\n### Service\u5c64\n\n```scala:MyService.scala\nimport scala.concurrent.Future\n\ntrait MyService {\n  def exec(str: String): Future[String]\n}\n\n```\n\n```scala:MyServiceImpl.scala\nimport javax.inject.{Inject, Singleton}\n\nimport akka.actor.ActorSystem\nimport com.github.uryyyyyyy.daos.MyDao\n\nimport scala.concurrent.{ExecutionContext, Future}\n\n@Singleton\nclass MyServiceImpl @Inject() (myDao: MyDao, actorSystem: ActorSystem) extends MyService {\n\n  implicit val myExecutionContext: ExecutionContext = actorSystem.dispatcher\n\n  def exec(str: String): Future[String] = {\n    Future{\n      str + \" \" + myDao.exec().getOrElse(\"null\")\n    }\n  }\n}\n\n```\n\nmyService\u306f\u3042\u304f\u307e\u3067trait\u3067\u3001\u5b9f\u88c5\u306fImpl\u306e\u65b9\u306b\u66f8\u304d\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001Controller\u304c\u5b9f\u88c5\u306b\u4f9d\u5b58\u3057\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fmyDao\u3092DI\u3057\u3066\u3044\u307e\u3059\u306d\u3002\u3053\u3061\u3089\u3082Singleton\u306b\u3057\u307e\u3059\u3002\n\uff08\u4eca\u56de\u306f\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u304c\u3001RDB\u63a5\u7d9a\u3067\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001\u4e00\u822c\u7684\u306bService\u5c64\u3067\u7ba1\u7406\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\uff09\n\n### DAO\u5c64\n\n```scala:MyDao.scala\ntrait MyDao {\n  def exec(): Option[String]\n}\n```\n\n```scala:MyDaoImpl.scala\nimport javax.inject.{Inject, Singleton}\n\nimport play.api.db.{Database, NamedDatabase}\nimport scalikejdbc._\n\n@Singleton\nclass MyDaoImpl @Inject() (@NamedDatabase(\"mySample\") db: Database) extends MyDao {\n\n  def exec(): Option[String] = {\n    using(db.getConnection(autocommit = false)) { conn =>\n      val ss = DB(conn).readOnly { implicit session =>\n        sql\"select 2\".map( rs => rs.long(1)).single.apply()\n      }\n      ss.map(_.toString)\n    }\n  }\n}\n```\n\n\u3053\u3053\u3067\u306fMyDao\u306e\u5b9f\u88c5\u3068\u3057\u3066Impl\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f9d\u5b58\u3059\u308b\u3082\u306e\u306fDB\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30c6\u30b9\u30c8\u6642\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5dee\u3057\u66ff\u3048\u308b\u3053\u3068\u304c\u5bb9\u6613\u306b\u306a\u308a\u307e\u3059\u3002\n\uff08DB\u306fapplication.conf\u306bmySample\u3068\u3044\u3046\u540d\u524d\u3067\u8a2d\u5b9a\u304c\u66f8\u3044\u3066\u3042\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\uff09\n\n## Play\u8d77\u52d5\u6642\u306b\u52d5\u7684DI\u3092\u884c\u3046\n\n\u3055\u3066\u3001\u3053\u3053\u307e\u3067\u3067\u305d\u308c\u305e\u308c\u62bd\u8c61\u30fb\u5177\u8c61\u3092\u4f5c\u308a\u3001\u62bd\u8c61\u306e\u307f\u306b\u4f9d\u5b58\u3059\u308b\u5f62\u304c\u4f5c\u308c\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u3069\u306e\u5177\u8c61\u3092\u4f7f\u3048\u3070\u3044\u3044\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001Guice\u3092\u7528\u3044\u3067\u5b9f\u884c\u6642\u306bDI\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u3001Play\u3067\u306fModule\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```scala:ImplModule.scala\nimport com.github.uryyyyyyy.daos.{MyDao, MyDaoImpl}\nimport com.github.uryyyyyyy.services.{MyService, MyServiceImpl}\nimport com.google.inject.AbstractModule\n\nclass ImplModule extends AbstractModule {\n\n  override def configure() = {\n    bind(classOf[MyService]).to(classOf[MyServiceImpl])\n    bind(classOf[MyDao]).to(classOf[MyDaoImpl])\n  }\n}\n```\n\n\u3053\u308c\u3092application.conf\u3067\u8d77\u52d5\u6642\u306b\u8aad\u3080\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```\nplay.modules {\n  enabled += modules.ImplModule\n  #enabled += modules.MockModule\n\n  # If there are any built-in modules that you want to disable, you can list them here.\n  #disabled += \"\"\n}\n```\n\n\u4eca\u56de\u306fImplModule\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u5225\u306eModule\u3092\u547c\u3073\u3060\u305b\u3070\u5225\u306e\u5b9f\u88c5\u3092\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u5927\u898f\u6a21\u958b\u767a\u3084\u958b\u767a\u6642\u306e\u30e2\u30c3\u30af\u30b5\u30fc\u30d0\u7528\u9014\u306b\u4f7f\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\uff08\u3061\u306a\u307f\u306b\u3001\u3053\u3053\u3092\u30df\u30b9\u308b\u3068\u8d77\u52d5\u6642\u306b\u308f\u308a\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3001\u6163\u308c\u3066\u306a\u3044\u3068\u30cf\u30de\u308b\u304b\u3082\u3067\u3059\u3002\uff09\n\n\u3055\u3066\u3001\u3053\u3053\u307e\u3067\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u3066\u3044\u308c\u3070\u3001\u30a2\u30af\u30bb\u30b9\u6642\u306b`mySample`\u306eDB\u8a2d\u5b9a\u3092\u7528\u3044\u3066SQL\u3092\u767a\u884c\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n## \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u5b9f\u88c5\u306f\u6163\u308c\u306a\u3044\u3068\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u306d\u3002\n\u306a\u305c\u3053\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u7c97\u7d50\u5408\u306b\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n\n### Controller\u306e\u30c6\u30b9\u30c8\n\n```scala:MyDIControllerTest.scala\nimport java.util.concurrent.TimeUnit\n\nimport akka.actor.ActorSystem\nimport akka.util.Timeout\nimport com.github.uryyyyyyy.services.MyService\nimport org.mockito.Matchers.any\nimport org.mockito.Mockito._\nimport org.scalatest.mock.MockitoSugar\nimport org.scalatest.{FunSpec, MustMatchers}\nimport play.api.mvc.Result\nimport play.api.test.{FakeRequest, Helpers}\n\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.Future\n\nclass MyDIControllerTest extends FunSpec with MustMatchers with MockitoSugar  {\n\n  describe(\"MyDIControllerTest\") {\n\n    implicit val timeout = Timeout(5000, TimeUnit.MILLISECONDS)\n\n    it(\"controllerTest\"){\n      val mockService = mock[MyService]\n      when(mockService.exec(any[String])) thenReturn Future{\"str\"}\n\n      val actorSystem = ActorSystem.apply()\n      val controller = new MyDIController(mockService, actorSystem)\n\n      val result: Future[Result] = controller.message().apply(FakeRequest())\n      Helpers.contentAsString(result) mustBe \"str\"\n      Helpers.status(result) mustBe 200\n    }\n  }\n\n}\n```\n\n\u3053\u3053\u3067\u306f\u3001Controller\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308bSerivce\u3092Mock\u3067DI\u3057\u3066\u3001Controller\u306e\u307f\u306e\u6319\u52d5\u3092\u78ba\u8a8d\u51fa\u6765\u308b\u3088\u3046\u306b\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001Service\u304c\u8fd4\u3057\u305f\u5024\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3001context\u3068statusCode\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001Service\u304c\u7570\u5e38\u7cfb\u3092\u8fd4\u3057\u305f\u30894XX\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3082\u5bb9\u6613\u3067\u3059\u3002\n\n\n### Service\u306e\u30c6\u30b9\u30c8\n\n```scala:MyServiceImplTest.scala\nimport akka.actor.ActorSystem\nimport com.github.uryyyyyyy.daos.MyDao\nimport org.mockito.Mockito._\nimport org.scalatest.mock.MockitoSugar\nimport org.scalatest.{FunSpec, MustMatchers}\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration.Duration\n\nclass MyServiceImplTest extends FunSpec with MustMatchers with MockitoSugar {\n\n  describe(\"MyServiceImplTest\") {\n\n    it(\"service\"){\n      val mockDao = mock[MyDao]\n      when(mockDao.exec()) thenReturn Some(\"mm\")\n\n      val actorSystem = ActorSystem.apply()\n      val service = new MyServiceImpl(mockDao, actorSystem)\n      val result = Await.result(service.exec(\"aaa\"), Duration.Inf)\n      result mustBe \"aaa mm\"\n    }\n  }\n\n}\n\n```\n\nController\u306e\u30c6\u30b9\u30c8\u3068\u540c\u69d8\u306b\u3001Dao\u3092\u30e2\u30c3\u30af\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u898b\u305f\u307e\u3093\u307e\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30c6\u30b9\u30c8\u3067\u3059\u306d\u3002\n\n### Dao\u306e\u30c6\u30b9\u30c8\n\n```scala:MyDaoImplTest.scala\nimport org.scalatest.mock.MockitoSugar\nimport org.scalatest.{FunSpec, MustMatchers}\nimport play.api.db.Databases\n\nclass MyDaoImplTest extends FunSpec with MustMatchers with MockitoSugar {\n\n  describe(\"MyDaoImplTest\") {\n\n    it(\"dao\"){\n      val database = Databases(\n        \"org.h2.Driver\",\n        \"jdbc:h2:mem:play\"\n      )\n\n      val dao = new MyDaoImpl(database)\n      val result = dao.exec()\n      result mustBe Some(\"2\")\n\n      database.shutdown()\n    }\n  }\n}\n```\n\nDAO\u306e\u30c6\u30b9\u30c8\u306f\u3001\u5916\u90e8\u30ea\u30bd\u30fc\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u306a\u3044\u3068\u3067\u304d\u306a\u3044\u3067\u3059\u304c\u3001\u672c\u756a\u3084\u958b\u767a\u3067\u4f7f\u3063\u3066\u308b\u30ea\u30bd\u30fc\u30b9\u306b\u7e4b\u3050\u308f\u3051\u306b\u3082\u3044\u304b\u306a\u3044\u306e\u3067\u3001\u3053\u3053\u3082DI\u3067\u5bfe\u8c61\u3092\u5dee\u3057\u66ff\u3048\u308b\u3084\u308a\u65b9\u304c\u52b9\u3044\u3066\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fDB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b\u3053\u3068\u3067\u5b89\u5168\u306b\u30c6\u30b9\u30c8\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\n\nDI\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u4f55\u304b\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u304c\u306a\u304f\u306a\u308a\u3001\u30c6\u30b9\u30c8\u304c\u3068\u3066\u3082\u7c21\u5358\u306b\u304b\u3051\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\nGuice DI\u3001\u3069\u3093\u3069\u3093\u4f7f\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n", "tags": ["PlayFramework", "guice"]}