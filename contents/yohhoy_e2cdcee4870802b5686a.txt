{"context": " More than 1 year has passed since last update.\u6700\u8fd1\u8a71\u984c\u306e\u30cd\u30bf\u300c1\u6642\u9593\u4ee5\u5185\u306b\u89e3\u3051\u306a\u3051\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30de\u5931\u683c\u3068\u306a\u3063\u3066\u3057\u307e\u30465\u3064\u306e\u554f\u984c\u300d\u306bRust\u6b74 2\u9031\u9593\u672a\u6e80\u306e\u72b6\u614b\u3067\u30c1\u30e3\u30ec\u30f3\u30b8\u3002\n\n\u30ec\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff1aRust Playground(Stable Channel)\u5229\u7528\u3002\u554f\u984c\u306f\u5168\u90e8\u521d\u898b\uff08\u4ed6\u4eba/\u4ed6\u8a00\u8a9e\u306e\u89e3\u7b54\u4f8b\u3092\u898b\u3066\u3044\u306a\u3044\u72b6\u614b\uff09\u3002\n\u7d50\u679c\uff1a\u8a0837\u5206\u9593\u304b\u3051\u30663\u554f\u76ee\u9014\u4e2d\u3067\u672a\u5b8c\u3002Rust\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u306f\u306a\u308c\u306a\u304b\u3063\u305f\u3088\u2026\n\nTODO\uff1a\u3042\u3068\u3067\u7d9a\u304d\u3092\u3084\u308b 3\u301c5\u554f\u76ee\u306f125\u5206\u9593\u3002\u5168\u4f53\u3067\u7d04160\u5206\u9593(\uff1d2\u6642\u959340\u5206)\u3067\u304a\u3057\u307e\u3044\u3002\n\n\n\u554f\u984c1\n\nfor\u30eb\u30fc\u30d7\u3001while\u30eb\u30fc\u30d7\u3001\u304a\u3088\u3073\u518d\u5e30\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ea\u30b9\u30c8\u5185\u306e\u6570\u5b57\u306e\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b3\u3064\u306e\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\nsum2\u306f\u6700\u521dindex\u65b9\u5f0f\u3067\u66f8\u3044\u305f\u306e\u3092\u30a4\u30c6\u30ec\u30fc\u30bf\u65b9\u5f0f\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3002\u30107\u5206\u3011\nfn sum1(list: &[i32]) -> i32 {\n  let mut acc = 0;\n  for i in list {\n    acc += *i;\n  }\n  acc\n}\n\nfn sum2(list: &[i32]) -> i32 {\n  let mut itr = list.iter();\n  let mut acc = 0;\n  while let Some(e) = itr.next() {\n    acc += *e;\n  }\n  acc\n}\n\nfn sum3(list: &[i32]) -> i32 {\n  if list.is_empty() {\n    0\n  } else {\n    list[0] + sum3(&list[1..])\n  }\n}\n\nfn main() {\n  let list : Vec<i32> = (1..11).collect();\n  println!(\"sum1={}\", sum1(&list));\n  println!(\"sum2={}\", sum2(&list));\n  println!(\"sum3={}\", sum3(&list));\n}\n\n\n\u554f\u984c2\n\n\u4ea4\u4e92\u306b\u8981\u7d20\u3092\u53d6\u308b\u3053\u3068\u3067\u30012\u3064\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\u4f8b\u3048\u3070 [a, b, c]\u3068[1, 2, 3]\u3068\u3044\u30462\u3064\u306e\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u308b\u3068\u3001\u95a2\u6570\u306f [a, 1, b, 2, c, 3]\u3092\u8fd4\u3059\u3002\n\n\u7570\u306a\u308b\u9577\u3055\u306e\u30ea\u30b9\u30c8\u306b\u3082\u5bfe\u5fdc\u3002\u6587\u5b57/\u6570\u5024\u6df7\u5728\u3060\u3068\u578b\u3067\u306f\u307e\u308b\u306e\u304c\u76ee\u306b\u898b\u3048\u3066\u308b\u306e\u3067\u3001\uff08\u554f\u984c\u6587\u306b\u3082\u5236\u7d04\u304c\u306a\u3044\u3057\uff09\u5168\u90e8char\u3068\u3044\u3046\u3053\u3068\u306b\u3057\u3066\u56de\u907f\u3002\u6700\u521d\u306fif\u5f0f\u7f85\u5217\u3067\u89e3\u3044\u305f\u304c\u3001\u3042\u307e\u308a\u306b\u3072\u3069\u3044\u306e\u3067match\u5f0f1\u500b\u306b\u6574\u7406\u3002\u301015\u5206\u3011\nfn zip(l1: &[char], l2: &[char]) -> Vec<char> {\n  let mut result: Vec<char> = Vec::new();\n  let (mut i1, mut i2) = (l1.iter(), l2.iter());\n  loop {\n    match (i1.next(), i2.next()) {\n      (Some(e1), Some(e2)) => {\n        result.push(*e1);\n        result.push(*e2);\n      },\n      (Some(e1), None) => {\n        result.push(*e1);\n      },\n      (None, Some(e2)) => {\n        result.push(*e2);\n      },\n      _ => break\n    };\n  }\n  result\n}\n\nfn main() {\n  let list1 = vec!['a', 'b', 'c'];\n  let list2 = vec!['1', '2', '3'];\n  println!(\"zip={:?}\", zip(&list1, &list2));\n}\n\n\u5f8c\u65e5\u8ac7\uff1a\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306bIterator::zip()\u95a2\u6570\u3042\u308b\u3093\u3060\u304b\u3089\u3001\u305d\u3063\u3061\u4f7f\u3048\u3070\u826f\u3044\u3067\u3057\u3087\u3068\u601d\u3063\u305f\u3089rustc\u306b\u6563\u3005\u6012\u3089\u308c\u305f\u3002\u3068\u308a\u3042\u3048\u305a\u901a\u3063\u305f\u306e\u306f\u4e0b\u8a18\u3002vec!(Vec\u578b)\u306e\u3068\u3053\u308d\u3092\u914d\u5217\u578b\u306b\u51fa\u6765\u306a\u3044\u304b\u3068\u3044\u3058\u3063\u3066\u307f\u305f\u3082\u306e\u306eborrow checker\u306b\u6557\u5317\u3002\nfn zip(l1: &[char], l2: &[char]) -> Vec<char> {\n  l1.iter().zip(l2.iter())\n    .flat_map(|(&a,&b)| vec!(a,b).into_iter())\n    .collect()\n}\n\n\n\u554f\u984c3\uff08\u524d\u534a\u6226\uff09\n\n\u6700\u521d\u306e100\u500b\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\u5b9a\u7fa9\u3067\u306f\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u6700\u521d\u306e2\u3064\u306e\u6570\u5b57\u306f0\u30681\u3067\u3001\u6b21\u306e\u6570\u306f\u524d\u306e2\u3064\u306e\u5408\u8a08\u3068\u306a\u308b\u3002\u4f8b\u3048\u3070\u6700\u521d\u306e10\u500b\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306f\u30010, 1, 1, 2, 3, 5, 8, 13, 21, 34\u3068\u306a\u308b\u3002\n\n\u6700\u521d\u306fiter().take(...).map(|n| *n)\u3068\u66f8\u3044\u3066\u3044\u3066iter()\u3068into_iter()\u306e\u9055\u3044\u3092\u7406\u89e3\u3057\u3066\u306a\u3044\u3053\u3068\u3092\u7406\u89e3\u3057\u305f\u3002Rust\u3060\u3068Python\u7684\u306a(a,b) = (b,c)\u306e\u3088\u3046\u306a\u4e00\u62ec\u4ee3\u5165\u306f\u7121\u7406\uff1f100\u500b\u51fa\u3059\u306e\u306f play.rust-lang.org \u3060\u3068num\u30af\u30ec\u30fc\u30c8\uff0f\u591a\u500d\u9577\u6574\u6570\u578b\u304c\u4f7f\u3048\u305a\u306b\u8a70\u3093\u3060\u3002\u301015\u5206/\u672a\u5b8c\u3011\nfn fib(n: u32) -> Vec<u32> {\n  let mut seq = vec!(0, 1);\n  if n < 3 {\n    return seq.into_iter().take(n as usize).collect();\n  }\n  let (mut a, mut b) = (0, 1);\n  for _ in 2..n {\n    let c = a + b;\n    seq.push(c);\n    a = b;\n    b = c;\n  }\n  seq\n}\n\nfn main() {\n  println!(\"fib={:?}\", fib(2));\n  println!(\"fib={:?}\", fib(10));\n  // println!(\"fib={:?}\", fib(100));\n  // thread '<main>' panicked at 'arithmetic operation overflowed'\n}\n\n\n\u554f\u984c3\uff08\u5f8c\u534a\u6226\uff09\n\u52a0\u7b97\u3055\u3048\u3067\u304d\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u591a\u500d\u9577\u6574\u6570\u578b\u3092\u81ea\u4f5c\u3057\u305f\u3002Vec<T>\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u542b\u3080\u5834\u5408\u306fCopy\u30c8\u30ec\u30a4\u30c8\u5b9f\u88c5\u4e0d\u53ef\u3068\u304b\u6012\u3089\u308c\u305f\u3051\u3069\u7406\u7531\u304c\u308f\u304b\u3089\u306a\u3044\u3002\u3057\u304b\u305f\u306a\u3044\u306e\u3067clone()\u4e71\u767a\u3002\u30b4\u30ea\u62bc\u3057\u3060\u304c\u52d5\u3051\u3070\u3088\u304b\u308d\u3046\u3002\u301040\u5206\u3011\nuse std::ops::Add;\nuse std::fmt::{Debug, Formatter, Error};\n\nstruct MyUint(Vec<u8>);\n\nimpl Clone for MyUint {\n  fn clone(&self) -> Self { MyUint(self.0.clone()) }\n  fn clone_from(&mut self, _: &Self) { unimplemented!(); }\n}\n\nimpl Add for MyUint {\n  type Output = MyUint;\n  fn add(self, rhs: MyUint) -> MyUint {\n    let mut result = Vec::new();\n    let mut lhs = self.0.into_iter();\n    let mut rhs = rhs.0.into_iter();\n    let mut carry = 0;\n    loop {\n      match (lhs.next(), rhs.next()) {\n        (Some(l), Some(r)) => {\n          let n = l + r + carry;\n          result.push(n % 100);\n          carry = n / 100;\n        },\n        (Some(v), _) | (_, Some(v)) => {\n          let n = v + carry;\n          result.push(n % 100);\n          carry = n / 100;\n        }\n        _ => {\n          if 0 < carry { result.push(carry) }\n          break;\n        }\n      }\n    }\n    MyUint(result)\n  }\n}\n\nimpl Debug for MyUint {\n  fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n    let mut s = String::new();\n    for n in (&self.0).iter() {\n      s = format!(\"{:02}{}\", *n, s);\n    }\n    if s.starts_with(\"0\") {\n      s.remove(0);\n    }\n    write!(f, \"{}\", s)\n  }\n}\n\nfn fib(n: usize) -> Vec<MyUint> {\n  let mut seq = vec!(MyUint(vec!(0)), MyUint(vec!(1)));\n  if n < 3 {\n    return seq.into_iter().take(n as usize).collect();\n  }\n  let (mut a, mut b) = (seq[0].clone(), seq[1].clone());\n  for _ in 2..n {\n    let c = a.clone() + b.clone();\n    seq.push(c.clone());\n    a = b;\n    b = c;\n  }\n  seq\n}\n\nfn main() {\n  println!(\"fib={:?}\", fib(100));\n}\n\n\u5f8c\u65e5\u8ac7\uff1a\u4e2d\u9014\u534a\u7aef\u306aClone\u30c8\u30ec\u30a4\u30c8\u5b9f\u88c5\u3059\u308b\u304f\u3089\u3044\u306a\u3089#[derive(Clone)]\u3067\u3088\u3044\u3002result.push(...); carry=...;\u91cd\u8907\u306f\u6392\u9664\u53ef\u80fd\u3002\u5909\u6570c\u8a08\u7b97\u6642\u306ea\u3067clone()\u547c\u51fa\u306f\u30e0\u30c0\u3002\u6539\u5584\u5f8c\u30b3\u30fc\u30c9\uff20Gist\n\n\u554f\u984c4\n\n\u6b63\u306e\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u6570\u3092\u4e26\u3073\u66ff\u3048\u3066\u53ef\u80fd\u306a\u6700\u5927\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\u4f8b\u3048\u3070\u3001[50, 2, 1, 9]\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u300195021\u304c\u7b54\u3048\u3068\u306a\u308b\u3002\n\nRust\u306f\u6587\u5b57\u5217\u51e6\u7406\u304c\u3064\u3089\u3044\u3002\u30ea\u30b9\u30c8\u51e6\u7406\u3088\u308a\u3082\u3064\u3089\u3044\u3002\u3072\u306d\u304f\u308a\u56de\u305b\u30701\u8ad6\u7406\u884c\u3067\u66f8\u3051\u305d\u3046\u306a\u6c17\u304c\u3057\u305f\u3051\u3069\u8ae6\u3081\u305f\u3002format!\u30de\u30af\u30ed\u306b\u983c\u308a\u3059\u304e\u3002\u301015\u5206\u3011\nfn solve(list: &[i32]) -> String {\n  let mut list = list.iter()\n    .map(|&n| n.to_string())\n    .collect::<Vec<String>>();\n  list.sort();\n  list.reverse();\n  list.connect(\"\")\n}\n\nfn main() {\n  let list = [50, 2, 1, 9];\n  println!(\"solve={}\", solve(&list));\n}\n\n\u5f8c\u65e5\u8ac7\uff1a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u9593\u9055\u3063\u3066\u308b\u3002[420, 42, 423]\u306742342042\u3092\u8fd4\u3059\uff08\u6b63\u3057\u304f\u306f42423420\uff09\u3002sort\uff0breverse\u3059\u308b\u306a\u3089\u6700\u521d\u304b\u3089\u9006\u9806\u30bd\u30fc\u30c8\u3057\u3068\u304d\u3083\u3044\u3044\u3002\u6539\u5584\u5f8c\u30b3\u30fc\u30c9\uff20Gist\n\n\u554f\u984c5\n\n1,2,\u2026,9\u306e\u6570\u3092\u3053\u306e\u9806\u5e8f\u3067\u3001\u201d+\u201d\u3001\u201d-\u201c\u3001\u307e\u305f\u306f\u306a\u306a\u306b\u3082\u305b\u305a\u7d50\u679c\u304c100\u3068\u306a\u308b\u3042\u3089\u3086\u308b\u7d44\u5408\u305b\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8ff0\u305b\u3088\u3002\u4f8b\u3048\u3070\u30011 + 2 + 34 \u2013 5 + 67 \u2013 8 + 9 = 100\u3068\u306a\u308b\u3002\n\n\u51fa\u3060\u3057\u304b\u3089\u7d44\u5408\u305b\u7dcf\u6570\u3092 9*3 \u3068\u304b 39 \u306b\u9593\u9055\u3048\u3066\u3066\u3001\u30d1\u30bf\u30fc\u30f3\u5217\u6319\u3059\u308b\u3060\u3051\u3067\u6642\u9593\u6d6a\u8cbb\u3057\u3066\u3064\u3089\u3044\uff08\u6b63\u3057\u304f\u306f 38 \u901a\u308a\uff09\u3002\u673a\u4e0a\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7d44\u3093\u3067\u304b\u3089\u66f8\u304f\u3079\u304d\u3060\u3063\u305f\u3002Rust\u3063\u307d\u3044\u30b3\u30fc\u30c9\u306b\u306a\u3063\u305f\u304b\u306f\u4e0d\u660e\u3002\u3042\u3068C\u306e\u30ce\u30ea\u3067\u8003\u3048\u3066\u308b\u3068\u6587\u5b57/\u6587\u5b57\u5217\u306e\u6271\u3044\u304c\u3084\u3063\u3071\u308a\u3064\u3089\u3044\u3002\u301070\u5206\u3011\n#[derive(Copy,Clone)]\nenum Op {\n  Concat,\n  Plus,\n  Minus\n}\n\nimpl Op {\n  fn new(n: usize) -> Op {\n    match n {\n      0 => Op::Concat,\n      1 => Op::Plus,\n      2 => Op::Minus,\n      _ => panic!()\n    }\n  }\n}\n\nfn eval(ops: &[Op; 9], target: i64) -> bool {\n  let mut val = 0;\n  let mut acc = 1;  // digit '1'\n  let mut prev = Op::Concat;\n  for i in 0..9 {\n    let digit = (i as i64) + 2;\n    match ops[i] {\n      Op::Concat => {\n        acc = acc * 10 + digit\n      },\n      op @ _ => {\n        match prev {\n          Op::Concat => { val = acc },\n          Op::Plus => { val += acc },\n          Op::Minus => { val -= acc },\n        }\n        acc = digit;\n        prev = op;\n      }\n    }\n  }\n  target == val\n}\n\nfn dump(ops: &[Op; 9]) {\n  let mut s = \"1\".to_string();\n  for n in 0..8 {\n    match ops[n] {\n      Op::Plus => { s.push('+') },\n      Op::Minus => { s.push('-') },\n      _ => (),\n    }\n    s.push(('2' as u8 + n as u8) as char);\n  }\n  println!(\"{}\", s);\n}\n\nfn solve() {\n  let mut ops = [Op::Concat; 9];\n  ops[8] = Op::Plus;\n  for n in 0..(3usize.pow(8)) {\n    let mut m = n;\n    for i in 0..8 {\n      ops[i] = Op::new(m % 3);\n      m /= 3;\n    }\n    if eval(&ops, 100) {\n      dump(&ops);\n    }\n  }\n}\n\nfn main() {\n  solve();\n}\n\n\u5f8c\u65e5\u8ac7\uff1a\u578b\u5909\u63db\u51e6\u7406\u306a\u306e\u3067Op::new\u3088\u308a\u3082Op::from\u306e\u65b9\u304c\u9069\u5207\u304b\u3002\u30d0\u30a4\u30ca\u30ea\u30ea\u30c6\u30e9\u30ebb'2'\u306a\u3089\u6700\u521d\u304b\u3089u8\u578b\u3002\u51fa\u529b\u306e\u4e26\u3073\u306e\u826f\u3055\u304b\u3089\u30d1\u30bf\u30fc\u30f3\u5217\u6319\u9806\u3092\u53cd\u8ee2\u3002\u6539\u5584\u5f8c\u30b3\u30fc\u30c9\uff20Gist\n[\u6700\u8fd1\u8a71\u984c\u306e\u30cd\u30bf](http://www.softantenna.com/wp/software/5-programming-problems/)\u300c1\u6642\u9593\u4ee5\u5185\u306b\u89e3\u3051\u306a\u3051\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30de\u5931\u683c\u3068\u306a\u3063\u3066\u3057\u307e\u30465\u3064\u306e\u554f\u984c\u300d\u306bRust\u6b74 2\u9031\u9593\u672a\u6e80\u306e\u72b6\u614b\u3067\u30c1\u30e3\u30ec\u30f3\u30b8\u3002\n\n- \u30ec\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff1a[Rust Playground](https://play.rust-lang.org/)(Stable Channel)\u5229\u7528\u3002\u554f\u984c\u306f\u5168\u90e8\u521d\u898b\uff08\u4ed6\u4eba/\u4ed6\u8a00\u8a9e\u306e\u89e3\u7b54\u4f8b\u3092\u898b\u3066\u3044\u306a\u3044\u72b6\u614b\uff09\u3002\n- \u7d50\u679c\uff1a\u8a0837\u5206\u9593\u304b\u3051\u30663\u554f\u76ee\u9014\u4e2d\u3067\u672a\u5b8c\u3002Rust\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u306f\u306a\u308c\u306a\u304b\u3063\u305f\u3088\u2026\n- <del>TODO\uff1a\u3042\u3068\u3067\u7d9a\u304d\u3092\u3084\u308b</del> 3\u301c5\u554f\u76ee\u306f125\u5206\u9593\u3002\u5168\u4f53\u3067\u7d04160\u5206\u9593(\uff1d2\u6642\u959340\u5206)\u3067\u304a\u3057\u307e\u3044\u3002\n\n\n# \u554f\u984c1\n> for\u30eb\u30fc\u30d7\u3001while\u30eb\u30fc\u30d7\u3001\u304a\u3088\u3073\u518d\u5e30\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ea\u30b9\u30c8\u5185\u306e\u6570\u5b57\u306e\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b3\u3064\u306e\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\n`sum2`\u306f\u6700\u521dindex\u65b9\u5f0f\u3067\u66f8\u3044\u305f\u306e\u3092\u30a4\u30c6\u30ec\u30fc\u30bf\u65b9\u5f0f\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3002\u30107\u5206\u3011\n\n```rust\nfn sum1(list: &[i32]) -> i32 {\n  let mut acc = 0;\n  for i in list {\n    acc += *i;\n  }\n  acc\n}\n\nfn sum2(list: &[i32]) -> i32 {\n  let mut itr = list.iter();\n  let mut acc = 0;\n  while let Some(e) = itr.next() {\n    acc += *e;\n  }\n  acc\n}\n\nfn sum3(list: &[i32]) -> i32 {\n  if list.is_empty() {\n    0\n  } else {\n    list[0] + sum3(&list[1..])\n  }\n}\n\nfn main() {\n  let list : Vec<i32> = (1..11).collect();\n  println!(\"sum1={}\", sum1(&list));\n  println!(\"sum2={}\", sum2(&list));\n  println!(\"sum3={}\", sum3(&list));\n}\n```\n\n\n# \u554f\u984c2\n> \u4ea4\u4e92\u306b\u8981\u7d20\u3092\u53d6\u308b\u3053\u3068\u3067\u30012\u3064\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\u4f8b\u3048\u3070 [a, b, c]\u3068[1, 2, 3]\u3068\u3044\u30462\u3064\u306e\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u308b\u3068\u3001\u95a2\u6570\u306f [a, 1, b, 2, c, 3]\u3092\u8fd4\u3059\u3002\n\n\u7570\u306a\u308b\u9577\u3055\u306e\u30ea\u30b9\u30c8\u306b\u3082\u5bfe\u5fdc\u3002\u6587\u5b57/\u6570\u5024\u6df7\u5728\u3060\u3068\u578b\u3067\u306f\u307e\u308b\u306e\u304c\u76ee\u306b\u898b\u3048\u3066\u308b\u306e\u3067\u3001\uff08\u554f\u984c\u6587\u306b\u3082\u5236\u7d04\u304c\u306a\u3044\u3057\uff09\u5168\u90e8`char`\u3068\u3044\u3046\u3053\u3068\u306b\u3057\u3066\u56de\u907f\u3002\u6700\u521d\u306fif\u5f0f\u7f85\u5217\u3067\u89e3\u3044\u305f\u304c\u3001\u3042\u307e\u308a\u306b\u3072\u3069\u3044\u306e\u3067match\u5f0f1\u500b\u306b\u6574\u7406\u3002\u301015\u5206\u3011\n\n```rust\nfn zip(l1: &[char], l2: &[char]) -> Vec<char> {\n  let mut result: Vec<char> = Vec::new();\n  let (mut i1, mut i2) = (l1.iter(), l2.iter());\n  loop {\n    match (i1.next(), i2.next()) {\n      (Some(e1), Some(e2)) => {\n        result.push(*e1);\n        result.push(*e2);\n      },\n      (Some(e1), None) => {\n        result.push(*e1);\n      },\n      (None, Some(e2)) => {\n        result.push(*e2);\n      },\n      _ => break\n    };\n  }\n  result\n}\n\nfn main() {\n  let list1 = vec!['a', 'b', 'c'];\n  let list2 = vec!['1', '2', '3'];\n  println!(\"zip={:?}\", zip(&list1, &list2));\n}\n```\n\n\u5f8c\u65e5\u8ac7\uff1a\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b[`Iterator::zip()`\u95a2\u6570](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip)\u3042\u308b\u3093\u3060\u304b\u3089\u3001\u305d\u3063\u3061\u4f7f\u3048\u3070\u826f\u3044\u3067\u3057\u3087\u3068\u601d\u3063\u305f\u3089rustc\u306b\u6563\u3005\u6012\u3089\u308c\u305f\u3002\u3068\u308a\u3042\u3048\u305a\u901a\u3063\u305f\u306e\u306f\u4e0b\u8a18\u3002`vec!`(`Vec`\u578b)\u306e\u3068\u3053\u308d\u3092\u914d\u5217\u578b\u306b\u51fa\u6765\u306a\u3044\u304b\u3068\u3044\u3058\u3063\u3066\u307f\u305f\u3082\u306e\u306eborrow checker\u306b\u6557\u5317\u3002\n\n```rust\nfn zip(l1: &[char], l2: &[char]) -> Vec<char> {\n  l1.iter().zip(l2.iter())\n    .flat_map(|(&a,&b)| vec!(a,b).into_iter())\n    .collect()\n}\n```\n\n\n# \u554f\u984c3\uff08\u524d\u534a\u6226\uff09\n> \u6700\u521d\u306e100\u500b\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\u5b9a\u7fa9\u3067\u306f\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u6700\u521d\u306e2\u3064\u306e\u6570\u5b57\u306f0\u30681\u3067\u3001\u6b21\u306e\u6570\u306f\u524d\u306e2\u3064\u306e\u5408\u8a08\u3068\u306a\u308b\u3002\u4f8b\u3048\u3070\u6700\u521d\u306e10\u500b\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306f\u30010, 1, 1, 2, 3, 5, 8, 13, 21, 34\u3068\u306a\u308b\u3002\n\n\u6700\u521d\u306f`iter().take(...).map(|n| *n)`\u3068\u66f8\u3044\u3066\u3044\u3066`iter()`\u3068`into_iter()`\u306e\u9055\u3044\u3092\u7406\u89e3\u3057\u3066\u306a\u3044\u3053\u3068\u3092\u7406\u89e3\u3057\u305f\u3002Rust\u3060\u3068Python\u7684\u306a`(a,b) = (b,c)`\u306e\u3088\u3046\u306a\u4e00\u62ec\u4ee3\u5165\u306f\u7121\u7406\uff1f100\u500b\u51fa\u3059\u306e\u306f play.rust-lang.org \u3060\u3068[num\u30af\u30ec\u30fc\u30c8\uff0f\u591a\u500d\u9577\u6574\u6570\u578b](http://doc.rust-lang.org/num/num/index.html)\u304c\u4f7f\u3048\u305a\u306b<del>\u8a70\u3093\u3060</del>\u3002\u301015\u5206/\u672a\u5b8c\u3011\n\n```rust\nfn fib(n: u32) -> Vec<u32> {\n  let mut seq = vec!(0, 1);\n  if n < 3 {\n    return seq.into_iter().take(n as usize).collect();\n  }\n  let (mut a, mut b) = (0, 1);\n  for _ in 2..n {\n    let c = a + b;\n    seq.push(c);\n    a = b;\n    b = c;\n  }\n  seq\n}\n\nfn main() {\n  println!(\"fib={:?}\", fib(2));\n  println!(\"fib={:?}\", fib(10));\n  // println!(\"fib={:?}\", fib(100));\n  // thread '<main>' panicked at 'arithmetic operation overflowed'\n}\n```\n\n\n# \u554f\u984c3\uff08\u5f8c\u534a\u6226\uff09\n\u52a0\u7b97\u3055\u3048\u3067\u304d\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u591a\u500d\u9577\u6574\u6570\u578b\u3092\u81ea\u4f5c\u3057\u305f\u3002`Vec<T>`\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u542b\u3080\u5834\u5408\u306f`Copy`\u30c8\u30ec\u30a4\u30c8\u5b9f\u88c5\u4e0d\u53ef\u3068\u304b\u6012\u3089\u308c\u305f\u3051\u3069\u7406\u7531\u304c\u308f\u304b\u3089\u306a\u3044\u3002\u3057\u304b\u305f\u306a\u3044\u306e\u3067`clone()`\u4e71\u767a\u3002\u30b4\u30ea\u62bc\u3057\u3060\u304c\u52d5\u3051\u3070\u3088\u304b\u308d\u3046\u3002\u301040\u5206\u3011\n\n```rust\nuse std::ops::Add;\nuse std::fmt::{Debug, Formatter, Error};\n\nstruct MyUint(Vec<u8>);\n\nimpl Clone for MyUint {\n  fn clone(&self) -> Self { MyUint(self.0.clone()) }\n  fn clone_from(&mut self, _: &Self) { unimplemented!(); }\n}\n\nimpl Add for MyUint {\n  type Output = MyUint;\n  fn add(self, rhs: MyUint) -> MyUint {\n    let mut result = Vec::new();\n    let mut lhs = self.0.into_iter();\n    let mut rhs = rhs.0.into_iter();\n    let mut carry = 0;\n    loop {\n      match (lhs.next(), rhs.next()) {\n        (Some(l), Some(r)) => {\n          let n = l + r + carry;\n          result.push(n % 100);\n          carry = n / 100;\n        },\n        (Some(v), _) | (_, Some(v)) => {\n          let n = v + carry;\n          result.push(n % 100);\n          carry = n / 100;\n        }\n        _ => {\n          if 0 < carry { result.push(carry) }\n          break;\n        }\n      }\n    }\n    MyUint(result)\n  }\n}\n\nimpl Debug for MyUint {\n  fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n    let mut s = String::new();\n    for n in (&self.0).iter() {\n      s = format!(\"{:02}{}\", *n, s);\n    }\n    if s.starts_with(\"0\") {\n      s.remove(0);\n    }\n    write!(f, \"{}\", s)\n  }\n}\n\nfn fib(n: usize) -> Vec<MyUint> {\n  let mut seq = vec!(MyUint(vec!(0)), MyUint(vec!(1)));\n  if n < 3 {\n    return seq.into_iter().take(n as usize).collect();\n  }\n  let (mut a, mut b) = (seq[0].clone(), seq[1].clone());\n  for _ in 2..n {\n    let c = a.clone() + b.clone();\n    seq.push(c.clone());\n    a = b;\n    b = c;\n  }\n  seq\n}\n\nfn main() {\n  println!(\"fib={:?}\", fib(100));\n}\n```\n\n\u5f8c\u65e5\u8ac7\uff1a\u4e2d\u9014\u534a\u7aef\u306aClone\u30c8\u30ec\u30a4\u30c8\u5b9f\u88c5\u3059\u308b\u304f\u3089\u3044\u306a\u3089`#[derive(Clone)]`\u3067\u3088\u3044\u3002`result.push(...); carry=...;`\u91cd\u8907\u306f\u6392\u9664\u53ef\u80fd\u3002\u5909\u6570`c`\u8a08\u7b97\u6642\u306e`a`\u3067`clone()`\u547c\u51fa\u306f\u30e0\u30c0\u3002[\u6539\u5584\u5f8c\u30b3\u30fc\u30c9\uff20Gist](https://gist.github.com/yohhoy/74811f20fd8d002fb4c9)\n\n\n# \u554f\u984c4\n> \u6b63\u306e\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u6570\u3092\u4e26\u3073\u66ff\u3048\u3066\u53ef\u80fd\u306a\u6700\u5927\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\u4f8b\u3048\u3070\u3001[50, 2, 1, 9]\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u300195021\u304c\u7b54\u3048\u3068\u306a\u308b\u3002\n\nRust\u306f\u6587\u5b57\u5217\u51e6\u7406\u304c\u3064\u3089\u3044\u3002\u30ea\u30b9\u30c8\u51e6\u7406\u3088\u308a\u3082\u3064\u3089\u3044\u3002\u3072\u306d\u304f\u308a\u56de\u305b\u30701\u8ad6\u7406\u884c\u3067\u66f8\u3051\u305d\u3046\u306a\u6c17\u304c\u3057\u305f\u3051\u3069\u8ae6\u3081\u305f\u3002`format!`\u30de\u30af\u30ed\u306b\u983c\u308a\u3059\u304e\u3002\u301015\u5206\u3011\n\n```rust\nfn solve(list: &[i32]) -> String {\n  let mut list = list.iter()\n    .map(|&n| n.to_string())\n    .collect::<Vec<String>>();\n  list.sort();\n  list.reverse();\n  list.connect(\"\")\n}\n\nfn main() {\n  let list = [50, 2, 1, 9];\n  println!(\"solve={}\", solve(&list));\n}\n```\n\n\u5f8c\u65e5\u8ac7\uff1a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u9593\u9055\u3063\u3066\u308b\u3002`[420, 42, 423]`\u3067`42342042`\u3092\u8fd4\u3059\uff08\u6b63\u3057\u304f\u306f`42423420`\uff09\u3002`sort`\uff0b`reverse`\u3059\u308b\u306a\u3089\u6700\u521d\u304b\u3089\u9006\u9806\u30bd\u30fc\u30c8\u3057\u3068\u304d\u3083\u3044\u3044\u3002[\u6539\u5584\u5f8c\u30b3\u30fc\u30c9\uff20Gist](https://gist.github.com/yohhoy/0a336d935439edd8b95a)\n\n\n# \u554f\u984c5\n> 1,2,\u2026,9\u306e\u6570\u3092\u3053\u306e\u9806\u5e8f\u3067\u3001\u201d+\u201d\u3001\u201d-\u201c\u3001\u307e\u305f\u306f\u306a\u306a\u306b\u3082\u305b\u305a\u7d50\u679c\u304c100\u3068\u306a\u308b\u3042\u3089\u3086\u308b\u7d44\u5408\u305b\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8ff0\u305b\u3088\u3002\u4f8b\u3048\u3070\u30011 + 2 + 34 \u2013 5 + 67 \u2013 8 + 9 = 100\u3068\u306a\u308b\u3002\n\n\u51fa\u3060\u3057\u304b\u3089\u7d44\u5408\u305b\u7dcf\u6570\u3092 9*3 \u3068\u304b 3<sup>9</sup> \u306b\u9593\u9055\u3048\u3066\u3066\u3001\u30d1\u30bf\u30fc\u30f3\u5217\u6319\u3059\u308b\u3060\u3051\u3067\u6642\u9593\u6d6a\u8cbb\u3057\u3066\u3064\u3089\u3044\uff08\u6b63\u3057\u304f\u306f 3<sup>8</sup> \u901a\u308a\uff09\u3002\u673a\u4e0a\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7d44\u3093\u3067\u304b\u3089\u66f8\u304f\u3079\u304d\u3060\u3063\u305f\u3002Rust\u3063\u307d\u3044\u30b3\u30fc\u30c9\u306b\u306a\u3063\u305f\u304b\u306f\u4e0d\u660e\u3002\u3042\u3068C\u306e\u30ce\u30ea\u3067\u8003\u3048\u3066\u308b\u3068\u6587\u5b57/\u6587\u5b57\u5217\u306e\u6271\u3044\u304c\u3084\u3063\u3071\u308a\u3064\u3089\u3044\u3002\u301070\u5206\u3011\n\n```rust\n#[derive(Copy,Clone)]\nenum Op {\n  Concat,\n  Plus,\n  Minus\n}\n\nimpl Op {\n  fn new(n: usize) -> Op {\n    match n {\n      0 => Op::Concat,\n      1 => Op::Plus,\n      2 => Op::Minus,\n      _ => panic!()\n    }\n  }\n}\n\nfn eval(ops: &[Op; 9], target: i64) -> bool {\n  let mut val = 0;\n  let mut acc = 1;  // digit '1'\n  let mut prev = Op::Concat;\n  for i in 0..9 {\n    let digit = (i as i64) + 2;\n    match ops[i] {\n      Op::Concat => {\n        acc = acc * 10 + digit\n      },\n      op @ _ => {\n        match prev {\n          Op::Concat => { val = acc },\n          Op::Plus => { val += acc },\n          Op::Minus => { val -= acc },\n        }\n        acc = digit;\n        prev = op;\n      }\n    }\n  }\n  target == val\n}\n\nfn dump(ops: &[Op; 9]) {\n  let mut s = \"1\".to_string();\n  for n in 0..8 {\n    match ops[n] {\n      Op::Plus => { s.push('+') },\n      Op::Minus => { s.push('-') },\n      _ => (),\n    }\n    s.push(('2' as u8 + n as u8) as char);\n  }\n  println!(\"{}\", s);\n}\n\nfn solve() {\n  let mut ops = [Op::Concat; 9];\n  ops[8] = Op::Plus;\n  for n in 0..(3usize.pow(8)) {\n    let mut m = n;\n    for i in 0..8 {\n      ops[i] = Op::new(m % 3);\n      m /= 3;\n    }\n    if eval(&ops, 100) {\n      dump(&ops);\n    }\n  }\n}\n\nfn main() {\n  solve();\n}\n```\n\n\u5f8c\u65e5\u8ac7\uff1a\u578b\u5909\u63db\u51e6\u7406\u306a\u306e\u3067`Op::new`\u3088\u308a\u3082`Op::from`\u306e\u65b9\u304c\u9069\u5207\u304b\u3002\u30d0\u30a4\u30ca\u30ea\u30ea\u30c6\u30e9\u30eb`b'2'`\u306a\u3089\u6700\u521d\u304b\u3089`u8`\u578b\u3002\u51fa\u529b\u306e\u4e26\u3073\u306e\u826f\u3055\u304b\u3089\u30d1\u30bf\u30fc\u30f3\u5217\u6319\u9806\u3092\u53cd\u8ee2\u3002[\u6539\u5584\u5f8c\u30b3\u30fc\u30c9\uff20Gist](https://gist.github.com/yohhoy/ee66f51807b26f747f7a)\n", "tags": ["rust1.0"]}