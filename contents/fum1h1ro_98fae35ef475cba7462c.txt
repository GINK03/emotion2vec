{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nhttp://qiita.com/beinteractive/items/a2264048a601ee998aca\n\u4f8b\u306e(?)\u304c\u4f55\u3060\u304b\u89e3\u3089\u306a\u3044\u3093\u3067\u3059\u304c\u3001\u3053\u3046\u3044\u3046\u306e\u304c\u4e0a\u304c\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u30d1\u30fc\u30b5\u306e\u7df4\u7fd2\u304c\u3066\u3089\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f7f\u3063\u305f\u3082\u306e\nhttps://github.com/sprache/Sprache\nC# \u306e Monadic Parser \u3060\u305d\u3046\u3067\u3059\u3002Monadic \u3063\u3066 Haskell \u3067\u51fa\u3066\u304d\u305f\u30e2\u30ca\u30c9\u7684\u306a\u30e4\u30c4\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3067\u304d\u305f\u3082\u306e\n\nmain.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Sprache;\nusing System.IO;\n\npublic class ZundokoGenerator {\n  Random _random = new Random();\n  public IEnumerator<string> RandomZunDoko() {\n    for (;;) {\n      yield return _random.Next(0, 2) == 0 ? \"\u30ba\u30f3\" : \"\u30c9\u30b3\";\n    }\n  }\n}\n\npublic static class KiyoshiParser {\n  public static readonly Parser<string> zun =\n    from txt in Parse.String(\"\u30ba\u30f3\").Text()\n    select txt;\n  public static readonly Parser<string> doko =\n    from txt in Parse.String(\"\u30c9\u30b3\").Text()\n    select txt;\n  public static readonly Parser<string> zzzd =\n    from z0 in zun\n    from z1 in zun\n    from z2 in zun\n    from z3 in zun\n    from dk in doko\n    select \"\u30ad\u30e8\u30b7\";\n}\n\nclass Program {\n  static void Main() {\n    var zdg = new ZundokoGenerator().RandomZunDoko();\n    var sb = new StringBuilder();\n    int count = 0;\n    for (;;) {\n      sb.Clear();\n      for (int i = 0; i < 5; ++i) {\n        zdg.MoveNext();\n        sb.Append(zdg.Current);\n      }\n      ++count;\n      try {\n        var kys = KiyoshiParser.zzzd.Parse(sb.ToString());\n        Console.WriteLine(sb.ToString() + kys);\n        Console.WriteLine(count + \"\u56de\u30ba\u30f3\u30c9\u30b3\u3057\u307e\u3057\u305f\");\n        break;\n      }\n      catch (Sprache.ParseException) {\n        Console.WriteLine(sb.ToString());\n      }\n    }\n  }\n}\n\n\n\n\u89e3\u8aac\n\nZundokoGenerator\n\u30af\u30e9\u30b9 ZundokoGenerator \u306f\u5143\u306b\u306a\u3063\u305f\u8a18\u4e8b\u304b\u3089\u30d1\u30af\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u5b9f\u306f UnityEngine.Random \u304c\u4f7f\u308f\u308c\u3066\u3044\u305f\u306e\u3067\u3001 System.Random \u3092\u4f7f\u3046\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\nIEnumerator \u3067\u3001\u30ba\u30f3 or \u30c9\u30b3\u3092\u5ef6\u3005\u3068\u8fd4\u3059\u3060\u3051\u3067\u3059\u306d\u3002\n\nKiyoshiParser\n\u30d1\u30fc\u30b5\u672c\u4f53\u3067\u3059\u3002\n\u6587\u6cd5\u306b\u3064\u3044\u3066\u306f\u306a\u3093\u3068\u306a\u304f\u898b\u3066\u3082\u3089\u3048\u3070\u89e3\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001 LINQ \u306e\u30af\u30a8\u30ea\u69cb\u6587\u3067\u7e4b\u3044\u3067\u3044\u304f\u611f\u3058\u3067\u3059\u3002\n\u8a73\u3057\u3044\u3068\u3053\u308d\u306f Sprache \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3042\u305f\u3063\u3066\u3082\u3089\u3063\u305f\u65b9\u304c\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001 bison \u3084 yacc \u3067\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u3092 from \u306e\u7f85\u5217\u3067\u8a18\u8ff0\u3057\u3001 select \u3067\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\u3002\n\u6ce8\u610f\u3059\u308b\u70b9\u306f\u3001 Parse.String() \u306f\u8fd4\u5024\u304c IEnumerator<char> (\u3060\u3063\u3051\uff1f)\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001 string \u306b\u5909\u63db\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\nProgram\n\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u3067\u3059\u3002\n\u6b63\u3057\u304f\u306a\u3044\u30ba\u30f3\u30c9\u30b3(?)\u306e\u969b\u306f\u4f8b\u5916\u3067\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\uff06\u7d50\u679c\n% mcs main.cs -r:Sprache.dll ; mono main.exe\n\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\n\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\n\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\n\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\n\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\n\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\n\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\n\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\n\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\n\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\n\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n18\u56de\u30ba\u30f3\u30c9\u30b3\u3057\u307e\u3057\u305f\n\n\u7c21\u5358\u3067\u3059\u306d('\u03c9`)\n## \u306f\u3058\u3081\u306b\n\nhttp://qiita.com/beinteractive/items/a2264048a601ee998aca\n\n\u4f8b\u306e(?)\u304c\u4f55\u3060\u304b\u89e3\u3089\u306a\u3044\u3093\u3067\u3059\u304c\u3001\u3053\u3046\u3044\u3046\u306e\u304c\u4e0a\u304c\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u30d1\u30fc\u30b5\u306e\u7df4\u7fd2\u304c\u3066\u3089\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u4f7f\u3063\u305f\u3082\u306e\n\nhttps://github.com/sprache/Sprache\n\nC# \u306e Monadic Parser \u3060\u305d\u3046\u3067\u3059\u3002Monadic \u3063\u3066 Haskell \u3067\u51fa\u3066\u304d\u305f\u30e2\u30ca\u30c9\u7684\u306a\u30e4\u30c4\u3067\u3057\u3087\u3046\u304b\u3002\n\n## \u3067\u304d\u305f\u3082\u306e\n\n```csharp:main.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Sprache;\nusing System.IO;\n\npublic class ZundokoGenerator {\n  Random _random = new Random();\n  public IEnumerator<string> RandomZunDoko() {\n    for (;;) {\n      yield return _random.Next(0, 2) == 0 ? \"\u30ba\u30f3\" : \"\u30c9\u30b3\";\n    }\n  }\n}\n\npublic static class KiyoshiParser {\n  public static readonly Parser<string> zun =\n    from txt in Parse.String(\"\u30ba\u30f3\").Text()\n    select txt;\n  public static readonly Parser<string> doko =\n    from txt in Parse.String(\"\u30c9\u30b3\").Text()\n    select txt;\n  public static readonly Parser<string> zzzd =\n    from z0 in zun\n    from z1 in zun\n    from z2 in zun\n    from z3 in zun\n    from dk in doko\n    select \"\u30ad\u30e8\u30b7\";\n}\n\nclass Program {\n  static void Main() {\n    var zdg = new ZundokoGenerator().RandomZunDoko();\n    var sb = new StringBuilder();\n    int count = 0;\n    for (;;) {\n      sb.Clear();\n      for (int i = 0; i < 5; ++i) {\n        zdg.MoveNext();\n        sb.Append(zdg.Current);\n      }\n      ++count;\n      try {\n        var kys = KiyoshiParser.zzzd.Parse(sb.ToString());\n        Console.WriteLine(sb.ToString() + kys);\n        Console.WriteLine(count + \"\u56de\u30ba\u30f3\u30c9\u30b3\u3057\u307e\u3057\u305f\");\n        break;\n      }\n      catch (Sprache.ParseException) {\n        Console.WriteLine(sb.ToString());\n      }\n    }\n  }\n}\n```\n\n## \u89e3\u8aac\n\n### ZundokoGenerator\n\n\u30af\u30e9\u30b9 `ZundokoGenerator` \u306f\u5143\u306b\u306a\u3063\u305f\u8a18\u4e8b\u304b\u3089\u30d1\u30af\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u5b9f\u306f `UnityEngine.Random` \u304c\u4f7f\u308f\u308c\u3066\u3044\u305f\u306e\u3067\u3001 `System.Random` \u3092\u4f7f\u3046\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\n`IEnumerator` \u3067\u3001\u30ba\u30f3 or \u30c9\u30b3\u3092\u5ef6\u3005\u3068\u8fd4\u3059\u3060\u3051\u3067\u3059\u306d\u3002\n\n### KiyoshiParser\n\n\u30d1\u30fc\u30b5\u672c\u4f53\u3067\u3059\u3002\n\n\u6587\u6cd5\u306b\u3064\u3044\u3066\u306f\u306a\u3093\u3068\u306a\u304f\u898b\u3066\u3082\u3089\u3048\u3070\u89e3\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001 LINQ \u306e\u30af\u30a8\u30ea\u69cb\u6587\u3067\u7e4b\u3044\u3067\u3044\u304f\u611f\u3058\u3067\u3059\u3002\n\n\u8a73\u3057\u3044\u3068\u3053\u308d\u306f `Sprache` \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3042\u305f\u3063\u3066\u3082\u3089\u3063\u305f\u65b9\u304c\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001 `bison` \u3084 `yacc` \u3067\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u3092 `from` \u306e\u7f85\u5217\u3067\u8a18\u8ff0\u3057\u3001 `select` \u3067\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\u3002\n\n\u6ce8\u610f\u3059\u308b\u70b9\u306f\u3001 `Parse.String()` \u306f\u8fd4\u5024\u304c `IEnumerator<char>` (\u3060\u3063\u3051\uff1f)\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001 `string` \u306b\u5909\u63db\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\n\n### Program\n\n\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u3067\u3059\u3002\n\n\u6b63\u3057\u304f\u306a\u3044\u30ba\u30f3\u30c9\u30b3(?)\u306e\u969b\u306f\u4f8b\u5916\u3067\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n## \u30b3\u30f3\u30d1\u30a4\u30eb\uff06\u7d50\u679c\n\n```\n% mcs main.cs -r:Sprache.dll ; mono main.exe\n\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\n\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\n\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\n\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\n\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\n\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\n\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\n\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\n\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\n\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\u30ba\u30f3\u30c9\u30b3\n\u30c9\u30b3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\n\u30ba\u30f3\u30c9\u30b3\u30c9\u30b3\u30c9\u30b3\u30ba\u30f3\n\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n18\u56de\u30ba\u30f3\u30c9\u30b3\u3057\u307e\u3057\u305f\n```\n\n\u7c21\u5358\u3067\u3059\u306d('\u03c9`)\n", "tags": ["mono", "Sprache", "C#"]}