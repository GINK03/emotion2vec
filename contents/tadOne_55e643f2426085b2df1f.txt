{"context": " More than 1 year has passed since last update.SparkSQL\u306b\u306fSpark\u72ec\u81ea\u306eSQL\u304c\u4f7f\u3048\u308bSparkContext\u3068\u3001HiveQL\u304c\u4f7f\u7528\u3067\u304d\u308bHiveContext\u304c\u3042\u308a\u307e\u3059\u3002\nSparkSQL\u306f\u95a2\u6570\u306a\u3069\u6a5f\u80fd\u7684\u306b\u8db3\u308a\u306a\u3044\u3082\u306e(\u65e5\u4ed8\u6f14\u7b97\u7b49)\u304c\u3042\u308a\u3001HiveContext\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u304c\u201dHive\u201d\u3068\u3044\u3046\u540d\u79f0\u306b\u3061\u3087\u3063\u3068\u3060\u3051\u6027\u80fd\u306e\u4e0d\u5b89\u304c\u3042\u308b\u306e\u3067\u306f\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u975e\u5e38\u306b\u7c21\u6613\u7684\u306a\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u540c\u4e00\u30c7\u30fc\u30bf\u3001SQL\u3067Context\u306e\u307f\u3092\u5207\u308a\u66ff\u3048\u3001\u6bd4\u8f03\u3057\u3066\u307f\u305f\u306e\u3067\u5099\u5fd8\u7a0b\u5ea6\u306b\u8a18\u8f09\u3057\u307e\u3059\n\n\u5b9f\u884c\u74b0\u5883\u30fb\u65b9\u6cd5\n\u74b0\u5883\u306fMBP1\u53f0\u69cb\u6210\u3067\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u306a\u308a\u307e\u3059\n\n\u30d7\u30ed\u30bb\u30c3\u30b5\n2.4GHz Core i5\n\u30e1\u30e2\u30ea\n8GB(Heap\u306f2GB\u5272\u308a\u5f53\u3066)\n\n\u5b9f\u884c\u306b\u306f\u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092scalac\u3067Jar\u5316\u3057\u3001spark-submit\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\n\u30a4\u30f3\u30d7\u30c3\u30c8\u30c7\u30fc\u30bf\u306fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3066\u3001TRAN_A\u3001TRAN_B\u306e\u307f\u5897\u5e45\u3057\u3066\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\n\uff08\u5897\u5e45\u306ffor\u30eb\u30fc\u30d7\u3067\u5358\u7d14\u5897\u5e45\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u91cd\u8907\u30c7\u30fc\u30bf\u306e\u307f\u304c\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3068\u6bd4\u8f03\u3057\u3066\u51e6\u7406\u901f\u5ea6\u306f\u9045\u304f\u306a\u3063\u3066\u3044\u307e\u3059\uff09 \n\nperf.scala\npackage kensyou\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.sql._\n\nobject test {\n\n  def main(args: Array[String]): Unit = {\n\n    // Spark\u521d\u671f\u8a2d\u5b9a    \n    val sc = new SparkContext(new SparkConf())\n\n    // Context\u306e\u5207\u308a\u66ff\u3048\uff08\u3053\u3053\u3092\u5207\u308a\u66ff\u3048\u305f\u3082\u306e\u3092\u7528\u610f\u3057\u305d\u308c\u305e\u308c\u5b9f\u884c\u3059\u308b\uff09\n    val sqlContext = new org.apache.spark.sql.SQLContext(sc)\n    // val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)\n\n    // \u30c6\u30fc\u30d6\u30eb\u30ab\u30e9\u30e0\u6587\u5b57\u5217\n    val tranAString = \"COL_A COL_B\"\n    val masterAString = \"COL_A NAME\"\n    val tranBString = \"COL_A COL_B COL_C DATE\"\n\n    // \u6587\u5b57\u5217\u30b9\u30ad\u30fc\u30de\u4f5c\u6210\n    val tranASchema = StructType(tranAString.split(\" \").map(fieldName => StructField(fieldName, StringType, true)))\n    val masterASchema = StructType(masterAString.split(\" \").map(fieldName => StructField(fieldName, StringType, true)))\n    val tranBSchema = StructType(tranBString.split(\" \").map(fieldName => StructField(fieldName, StringType, true)))\n    // \u30c7\u30fc\u30bf\u53d6\u308a\u8fbc\u307f\n    val tranAData = sc.textFile(\"/Users/test/tranA.csv\")\n                    .map(_.split(\",\"))\n                    .map(p => Row(p(0), p(1)))\n    val masterAData = sc.textFile(\"/Users/test/masterA.csv\")\n                    .map(_.split(\",\"))\n                    .map(p => Row(p(0), p(1)))\n    val tranBData = sc.textFile(\"/Users/test/tranB.csv\")\n                    .map(_.split(\",\"))\n                    .map(p => Row(p(0), p(1), p(2)))\n\n    // SchemaRDD\u3078\u306e\u5909\u63db\n    val tranAchemaRDD = sqlContext.applySchema(tranAData, tranASchema)\n    val masterASchemaRDD = sqlContext.applySchema(masterAData, masterASchema)\n    val tranBSchemaRDD = sqlContext.applySchema(tranBData, tranBSchema)\n\n    // Table\u767b\u9332\n    tranAchemaRDD.registerTempTable(\"TRAN_A\")\n    masterASchemaRDD.registerTempTable(\"MASTER_A\")\n    tranBSchemaRDD.registerTempTable(\"TRAN_B\")\n\n    val result = sqlContext.sql(\"\"\"SELECT \n                                     TA.COL_A\n                                    ,MA.NAME\n                                    ,TA.COL_B\n                                    ,TB.COL_C\n                                    ,COUNT(*)\n                                   FROM\n                                    TRAN_A AS TA \n                                    INNER JOIN MASTER_A AS MA\n                                      ON  TA.COL_A = MA.COL_A\n                                    INNER JOIN TRAN_B AS TB\n                                      ON  TA.COL_A = TB.COL_A\n                                      AND TA.COL_B = TB.COL_B\n                                   GROUP BY\n                                     TA.COL_A\n                                    ,MA.NAME\n                                    ,TA.COL_B\n                                    ,TB.COL_C\n                                   HAVING COUNT(*) >= 2\"\"\")\n\n    result.collect().foreach(println)\n  }\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u306a\u308a\u307e\u3057\u305f\n\n\n\n\u5897\u5e45\u56de\u6570\nHiveContext(.sec)\nSQLContext(.sec)\n\n\n\n\n20(12KB\u7a0b\u5ea6)\n16\n13\n\n\n100(60KB\u7a0b\u5ea6)\n17\n13\n\n\n1000(600KB\u7a0b\u5ea6)\n20\n17\n\n\n5000(3MB\u7a0b\u5ea6)\n77\n71\n\n\n10000(6MB\u7a0b\u5ea6)\n249\n237\n\n\n\n\n\u7d50\u8ad6\n\u5b9f\u884c\u7d50\u679c\u3092\u898b\u308b\u306b\u591a\u5c11\u306fSQLContext\u306e\u65b9\u304c\u65e9\u3044\u3082\u306e\u306e\u3001\u5927\u304d\u306a\u5dee\u7570\u306f\u306a\u3044\u3088\u3046\u3067\u3059\n\u305d\u306e\u305f\u3081\u6a5f\u80fd\u7684\u306bHiveQL\u304c\u4f7f\u3044\u305f\u3051\u308c\u3070\u5b89\u5fc3\u3057\u3066\u4f7f\u3063\u3066\u3088\u3055\u305d\u3046\u3067\u3059\u306d\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u81ea\u4f53\u3082\u53c2\u7167\u3057\u307e\u3057\u305f\u304cHiveContext\u81ea\u4f53\u306fSQLContext\u3092extend\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\nParse\u3092Hive\u7528\u306e\u3082\u306e\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u884c\u81ea\u4f53\u306f\u540c\u4e00\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u306d\n\u305f\u3060Hive\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3046\u5834\u5408\u306frunHive\u95a2\u6570\u304c\u52d5\u4f5c\u3057\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u5834\u5408\u306e\u52d5\u4f5c\u306f\u3069\u3046\u306a\u308b\u3093\u3067\u3057\u3087\u3046\u304b\u306d\uff1f\uff1f\uff1f\n\u307e\u3042\u3053\u3053\u3089\u8fba\u306e\u8a73\u3057\u3044\u5185\u5bb9\u306f\u5f8c\u65e5\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u3001\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u8ffd\u8a18\u3057\u307e\u3059\nSparkSQL\u306b\u306fSpark\u72ec\u81ea\u306eSQL\u304c\u4f7f\u3048\u308bSparkContext\u3068\u3001HiveQL\u304c\u4f7f\u7528\u3067\u304d\u308bHiveContext\u304c\u3042\u308a\u307e\u3059\u3002\nSparkSQL\u306f\u95a2\u6570\u306a\u3069\u6a5f\u80fd\u7684\u306b\u8db3\u308a\u306a\u3044\u3082\u306e(\u65e5\u4ed8\u6f14\u7b97\u7b49)\u304c\u3042\u308a\u3001HiveContext\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u304c\u201dHive\u201d\u3068\u3044\u3046\u540d\u79f0\u306b\u3061\u3087\u3063\u3068\u3060\u3051\u6027\u80fd\u306e\u4e0d\u5b89\u304c\u3042\u308b\u306e\u3067\u306f\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u975e\u5e38\u306b\u7c21\u6613\u7684\u306a\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u540c\u4e00\u30c7\u30fc\u30bf\u3001SQL\u3067Context\u306e\u307f\u3092\u5207\u308a\u66ff\u3048\u3001\u6bd4\u8f03\u3057\u3066\u307f\u305f\u306e\u3067\u5099\u5fd8\u7a0b\u5ea6\u306b\u8a18\u8f09\u3057\u307e\u3059\n\n# \u5b9f\u884c\u74b0\u5883\u30fb\u65b9\u6cd5\n\n\u74b0\u5883\u306fMBP1\u53f0\u69cb\u6210\u3067\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u306a\u308a\u307e\u3059\n\n<dl>\n  <dt>\u30d7\u30ed\u30bb\u30c3\u30b5</dt>\n  <dd>2.4GHz Core i5</dd>\n  <dt>\u30e1\u30e2\u30ea</dt>\n  <dd>8GB(Heap\u306f2GB\u5272\u308a\u5f53\u3066)</dd>\n</dl>\n\n\u5b9f\u884c\u306b\u306f\u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092scalac\u3067Jar\u5316\u3057\u3001spark-submit\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\n\n\u30a4\u30f3\u30d7\u30c3\u30c8\u30c7\u30fc\u30bf\u306fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3066\u3001TRAN_A\u3001TRAN_B\u306e\u307f\u5897\u5e45\u3057\u3066\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\n\uff08\u5897\u5e45\u306ffor\u30eb\u30fc\u30d7\u3067\u5358\u7d14\u5897\u5e45\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u91cd\u8907\u30c7\u30fc\u30bf\u306e\u307f\u304c\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3068\u6bd4\u8f03\u3057\u3066\u51e6\u7406\u901f\u5ea6\u306f\u9045\u304f\u306a\u3063\u3066\u3044\u307e\u3059\uff09 \n\n```scala:perf.scala\npackage kensyou\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.sql._\n\nobject test {\n\n  def main(args: Array[String]): Unit = {\n\n    // Spark\u521d\u671f\u8a2d\u5b9a    \n    val sc = new SparkContext(new SparkConf())\n\n    // Context\u306e\u5207\u308a\u66ff\u3048\uff08\u3053\u3053\u3092\u5207\u308a\u66ff\u3048\u305f\u3082\u306e\u3092\u7528\u610f\u3057\u305d\u308c\u305e\u308c\u5b9f\u884c\u3059\u308b\uff09\n    val sqlContext = new org.apache.spark.sql.SQLContext(sc)\n    // val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)\n\n    // \u30c6\u30fc\u30d6\u30eb\u30ab\u30e9\u30e0\u6587\u5b57\u5217\n    val tranAString = \"COL_A COL_B\"\n    val masterAString = \"COL_A NAME\"\n    val tranBString = \"COL_A COL_B COL_C DATE\"\n\n    // \u6587\u5b57\u5217\u30b9\u30ad\u30fc\u30de\u4f5c\u6210\n    val tranASchema = StructType(tranAString.split(\" \").map(fieldName => StructField(fieldName, StringType, true)))\n    val masterASchema = StructType(masterAString.split(\" \").map(fieldName => StructField(fieldName, StringType, true)))\n    val tranBSchema = StructType(tranBString.split(\" \").map(fieldName => StructField(fieldName, StringType, true)))\n    // \u30c7\u30fc\u30bf\u53d6\u308a\u8fbc\u307f\n    val tranAData = sc.textFile(\"/Users/test/tranA.csv\")\n                    .map(_.split(\",\"))\n                    .map(p => Row(p(0), p(1)))\n    val masterAData = sc.textFile(\"/Users/test/masterA.csv\")\n                    .map(_.split(\",\"))\n                    .map(p => Row(p(0), p(1)))\n    val tranBData = sc.textFile(\"/Users/test/tranB.csv\")\n                    .map(_.split(\",\"))\n                    .map(p => Row(p(0), p(1), p(2)))\n\n    // SchemaRDD\u3078\u306e\u5909\u63db\n    val tranAchemaRDD = sqlContext.applySchema(tranAData, tranASchema)\n    val masterASchemaRDD = sqlContext.applySchema(masterAData, masterASchema)\n    val tranBSchemaRDD = sqlContext.applySchema(tranBData, tranBSchema)\n\n    // Table\u767b\u9332\n    tranAchemaRDD.registerTempTable(\"TRAN_A\")\n    masterASchemaRDD.registerTempTable(\"MASTER_A\")\n    tranBSchemaRDD.registerTempTable(\"TRAN_B\")\n\n    val result = sqlContext.sql(\"\"\"SELECT \n                                     TA.COL_A\n                                    ,MA.NAME\n                                    ,TA.COL_B\n                                    ,TB.COL_C\n                                    ,COUNT(*)\n                                   FROM\n                                    TRAN_A AS TA \n                                    INNER JOIN MASTER_A AS MA\n                                      ON  TA.COL_A = MA.COL_A\n                                    INNER JOIN TRAN_B AS TB\n                                      ON  TA.COL_A = TB.COL_A\n                                      AND TA.COL_B = TB.COL_B\n                                   GROUP BY\n                                     TA.COL_A\n                                    ,MA.NAME\n                                    ,TA.COL_B\n                                    ,TB.COL_C\n                                   HAVING COUNT(*) >= 2\"\"\")\n\n    result.collect().foreach(println)\n  }\n}\n```\n\n# \u5b9f\u884c\u7d50\u679c\n\n\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u306a\u308a\u307e\u3057\u305f\n\n| \u5897\u5e45\u56de\u6570 | HiveContext(.sec) |SQLContext(.sec)  |\n|:-----------|------------:|:------------:|\n| 20(12KB\u7a0b\u5ea6)       |        16 |     13     |\n| 100(60KB\u7a0b\u5ea6)     |      17 |    13    |\n| 1000(600KB\u7a0b\u5ea6)        |        20 |     17     |\n| 5000(3MB\u7a0b\u5ea6)          |          77 |      71      |\n| 10000(6MB\u7a0b\u5ea6)        |       249 |    237    |\n\n# \u7d50\u8ad6\n\n\u5b9f\u884c\u7d50\u679c\u3092\u898b\u308b\u306b\u591a\u5c11\u306fSQLContext\u306e\u65b9\u304c\u65e9\u3044\u3082\u306e\u306e\u3001\u5927\u304d\u306a\u5dee\u7570\u306f\u306a\u3044\u3088\u3046\u3067\u3059\n\u305d\u306e\u305f\u3081\u6a5f\u80fd\u7684\u306bHiveQL\u304c\u4f7f\u3044\u305f\u3051\u308c\u3070\u5b89\u5fc3\u3057\u3066\u4f7f\u3063\u3066\u3088\u3055\u305d\u3046\u3067\u3059\u306d\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u81ea\u4f53\u3082\u53c2\u7167\u3057\u307e\u3057\u305f\u304cHiveContext\u81ea\u4f53\u306fSQLContext\u3092extend\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\nParse\u3092Hive\u7528\u306e\u3082\u306e\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u884c\u81ea\u4f53\u306f\u540c\u4e00\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u306d\n\n\u305f\u3060Hive\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3046\u5834\u5408\u306frunHive\u95a2\u6570\u304c\u52d5\u4f5c\u3057\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u5834\u5408\u306e\u52d5\u4f5c\u306f\u3069\u3046\u306a\u308b\u3093\u3067\u3057\u3087\u3046\u304b\u306d\uff1f\uff1f\uff1f\n\u307e\u3042\u3053\u3053\u3089\u8fba\u306e\u8a73\u3057\u3044\u5185\u5bb9\u306f\u5f8c\u65e5\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u3001\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u8ffd\u8a18\u3057\u307e\u3059\n", "tags": ["Spark", "sparksql", "Scala"]}