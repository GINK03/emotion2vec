{"context": "\n\n\uff11\uff0e\u306f\u3058\u3081\u306b\nOpenCV\u306b\u306f\uff0c\u69d8\u3005\u306a\u51e6\u7406\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u753b\u50cf\u51e6\u7406\uff0c\u6620\u50cf\u89e3\u6790\uff0c\u30ab\u30e1\u30e9\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\uff0c\u7279\u5fb4\u70b9\u62bd\u51fa\uff0c\u7269\u4f53\u691c\u51fa\uff0c\u6a5f\u68b0\u5b66\u7fd2\uff0c\u30b3\u30f3\u30d4\u30e5\u30c6\u30fc\u30b7\u30e7\u30ca\u30eb\u30d5\u30a9\u30c8\u30b0\u30e9\u30d5\u30a3\uff0c3D\u53ef\u8996\u5316\u306a\u3069\u304c\u57fa\u672c\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3055\u3089\u306b\uff0c\u30a8\u30af\u30b9\u30c8\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\uff0c\u3088\u308a\u8c4a\u5bcc\u3046\u306a\u51e6\u7406\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002[1]\nOpenCV 3.x\u7cfb\u3092\u4e2d\u5fc3\u306b\u8a71\u3092\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\uff0cOpenCV\u306e\u5c40\u6240\u7279\u5fb4\u91cf\u304c\u3069\u306e\u7a0b\u5ea6\u7c21\u5358\u306b\u4f7f\u3048\u308b\u306e\u304b\u8208\u5473\u304c\u3042\u308a\uff0c\u5c40\u6240\u7279\u5fb4\u91cf\u3092\u5229\u7528\u3057\u305f\u7269\u4f53\u691c\u51fa\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u6700\u8fd1\u4e16\u9593\u3067\u306f\uff0c\u30c7\u30a3\u30fc\u30d7\u306a\u7269\u4f53\u8a8d\u8b58\u3067\u76db\u308a\u4e0a\u304c\u3063\u3066\u3044\u307e\u3059\u304c\u3002\n\u7279\u5fb4\u70b9\u62bd\u51fa\u306b\u95a2\u3059\u308b\u8a73\u3057\u3044\u8aac\u660e\u306f\uff0c\u691c\u7d22\u3059\u308c\u3070\u591a\u6570\u3042\u308a\u307e\u3059\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\u85e4\u5409\u5148\u751f (\u4e2d\u90e8\u5927\u5b66)\u306e\u30b9\u30e9\u30a4\u30c9\u300c\u753b\u50cf\u5c40\u6240\u7279\u5fb4\u91cfSIFT\u3068\u305d\u308c\u4ee5\u964d\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u300d\u306f\uff0c\u3068\u3066\u3082\u308f\u304b\u308a\u6613\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\uff12\uff0e\u7279\u5fb4\u70b9\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\n\u7279\u5fb4\u70b9\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\u306f\uff0cfeatures2d\u30e2\u30b8\u30e5\u30fc\u30eb\uff08\u57fa\u672c\uff09\u3068xfeatures2d\u30e2\u30b8\u30e5\u30fc\u30eb\uff08\u30a8\u30af\u30b9\u30c8\u30e9\uff09\u5185\u306b\u3042\u308a\u307e\u3059\u3002\n\u57fa\u672c\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u306f\uff0c\u6b21\u306e\u3082\u306e\u3067\u3059\u3002\n\n\n\n\u540d\u524d\n\u624b\u6cd5\n\u7279\u5fb4\u91cf\u306e\u8868\u73fe\n\n\n\n\ncv::GFTTDetector\ngoodFeaturesToTrack (\u7279\u5fb4\u70b9\u691c\u51fa)\n-\n\n\ncv::AgastFeatureDetector\nAGAST (\u7279\u5fb4\u70b9\u691c\u51fa)\n-\n\n\ncv::FastFeatureDetector\nFAST (\u7279\u5fb4\u70b9\u691c\u51fa)\n-\n\n\ncv::MSER\nMSER (\u7279\u5fb4\u70b9\u691c\u51fa)\n-\n\n\ncv::BRISK\nBRISK\n\u30d0\u30a4\u30ca\u30ea\n\n\ncv::KAZE\nKAZE\n\u30b9\u30b1\u30fc\u30eb\n\n\ncv::ORB\nORB\n\u30d0\u30a4\u30ca\u30ea\n\n\ncv::AKAZE\nA-KAZE\n\u30d0\u30a4\u30ca\u30ea\n\n\n\n\u30a8\u30af\u30b9\u30c8\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\uff0c\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\n\n\n\u540d\u524d\n\u624b\u6cd5\n\u7279\u5fb4\u91cf\u306e\u8868\u73fe\n\n\n\n\ncv::xfeatures2d::StarDetector\nStarDetector (\u7279\u5fb4\u70b9\u8a18\u8ff0)\n-\n\n\ncv::xfeatures2d::MSDDetector\nMSD (\u7279\u5fb4\u70b9\u691c\u51fa)\n-\n\n\ncv::xfeatures2d::LATCH\nLATCH (\u7279\u5fb4\u91cf\u8a18\u8ff0)\n\u30d0\u30a4\u30ca\u30ea\n\n\ncv::xfeatures2d::LUCID\nLUCID (\u7279\u5fb4\u91cf\u8a18\u8ff0)\n?\n\n\ncv::xfeatures2d::BriefDescriptorExtractor\nBRIEF (\u7279\u5fb4\u91cf\u8a18\u8ff0)\n\u30d0\u30a4\u30ca\u30ea\n\n\ncv::xfeatures2d::DAISY\nDAISY (\u7279\u5fb4\u91cf\u8a18\u8ff0)\n\u5b9f\u6570\u30d9\u30af\u30c8\u30eb\n\n\ncv::xfeatures2d::FREAK\nFREAK (\u7279\u5fb4\u91cf\u8a18\u8ff0)\n\u30d0\u30a4\u30ca\u30ea\n\n\ncv::xfeatures2d::SIFT\nSIFT\n\u5b9f\u6570\u30d9\u30af\u30c8\u30eb\n\n\ncv::xfeatures2d::SURF\nSURF\n\u5b9f\u6570\u30d9\u30af\u30c8\u30eb\n\n\n\n(\u6ce8)\u30ab\u30c3\u30b3\u66f8\u304d\u304c\u3042\u308b\u3082\u306e\u306f\uff0c\u3069\u3061\u3089\u304b\u306e\u307f\u3067\u3059\u3002\n\u4f7f\u3044\u65b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\ncv::Ptr<cv::Feature2D> features = *\u4f7f\u7528\u3057\u305f\u3044\u7279\u5fb4\u306e\u540d\u524d*::create();\n//(\u4f8b) A-KAZE\u306e\u5834\u5408\n//features = cv::AKAZE::create();\n\nstd::vector<cv::KeyPoint> keypoints; //\u7279\u5fb4\u70b9\ncv::Mat descriptors; //\u7279\u5fb4\u91cf\n\nfeature->detectAndCompute(\u753b\u50cf,cv::noArray(), keypoints, descriptors);\n\n\n\n\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u306e\u307f\nfeature->detect(\u753b\u50cf, keypoints);\n\n\n\n\u7279\u5fb4\u91cf\u8a18\u8ff0\n//\u4f55\u304b\u3057\u3089\u306e\u624b\u6cd5\u3067\u7279\u5fb4\u70b9\u3092\u53d6\u5f97\u6e08\u307f\u3067\u3042\u308b\u3053\u3068\nfeature->compute(\u753b\u50cf, keypoints, descriptors);\n\n\n\n\uff13\uff0e\u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\n\u7269\u4f53\u691c\u51fa\u306a\u3069\u3092\u884c\u3046\u305f\u3081\u306b\u306f\uff0c\u5f97\u3089\u308c\u305f\u7279\u5fb4\u91cf\u3092\u7528\u3044\u3066\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3046\u30af\u30e9\u30b9\u306f\uff0cDescriptorMatcher\u3067\u3059\u3002\ncv::DescriptorMatcher::create(\u30bf\u30a4\u30d7)\u306e\u3088\u3046\u306b\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\u3059\u308c\u3070\u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3048\u307e\u3059\u3002\n\n\n\n\u30bf\u30a4\u30d7\n\u624b\u6cd5\n\n\n\n\nBruteForce\nL2\u30ce\u30eb\u30e0\u30fb\u5168\u63a2\u7d22\n\n\nBruteForce-L1\nL1\u30ce\u30eb\u30e0\u30fb\u5168\u63a2\u7d22\n\n\nBruteForce-Hamming\n\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2\u30fb\u5168\u63a2\u7d22\n\n\nBruteForce-Hamming(2)\n\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2\u30fb\u5168\u63a2\u7d22\n\n\nFlannBased\nflann\u30fb\u6700\u8fd1\u508d\u63a2\u7d22\n\n\n\n\u30de\u30c3\u30c1\u30f3\u30b0\u306e\u30e1\u30bd\u30c3\u30c9\n\n\n\n\u30e1\u30bd\u30c3\u30c9\n\u624b\u6cd5\n\n\n\n\nmatch\n\u6700\u3082\u826f\u3044\u70b9\u3092\u63a2\u3059\n\n\nknnMatch\n\u4e0a\u4f4dk\u500b\u306e\u826f\u3044\u70b9\u3092\u63a2\u3059\n\n\nradiusMatch\n\u7279\u5fb4\u91cf\u8a18\u8ff0\u306e\u7a7a\u9593\u3067\u8ddd\u96e2\u304c\u3057\u304d\u3044\u5024\u4ee5\u4e0b\u306e\u70b9\u3092\u63a2\u3059\n\n\n\n\n\u7279\u5fb4\u91cf\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u306e\u4f8b\ncv::Ptr<cv::DescriptorMatcher> matcher = cv::DescriptorMatcher::create(\"\u30bf\u30a4\u30d7\");\n\nstd::vector<std::vector<cv::DMatch>> mathes;\nmatcher->knnMatch(descriptor-A, descriptor-B, matches, 2); //\u4e0a\u4f4d2\u4f4d\u307e\u3067\u306e\u70b9\u3092\u63a2\u3059\n//descriptor-A: query\u753b\u50cf\n//descriptor-B: train\u753b\u50cf\n\n\n\u307e\u305f\uff0c\u4ed6\u306e\u65b9\u6cd5\u3068\u3057\u3066\uff0ccv::DescriptorMatcher\u306e\u4ee3\u308f\u308a\u306b\uff0ccv::BFMatcher\u3092\u4f7f\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\uff0c\u5168\u63a2\u7d22\u3092\u884c\u3044\u307e\u3059\u3002\ncv::BFMatcher matcher(\u30bf\u30a4\u30d7);\nstd::vector<std::vector<cv::DMatch>> matches;\nmatcher.knnMatch(descriptor-A, descriptor-B, matches, 2);\n\n\u3053\u3061\u3089\u306e\u5834\u5408\u306e\uff0c\u30bf\u30a4\u30d7\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\n\u30bf\u30a4\u30d7\n\u624b\u6cd5\n\u4f7f\u3048\u308b\u7279\u5fb4\u91cf\n\n\n\n\nNORM_L1\nL1\u30ce\u30eb\u30e0\nSIFT\uff0cSURF\u306a\u3069\n\n\nNORM_L2\nL2\u30ce\u30eb\u30e0\nSIFT\uff0cSURF\u306a\u3069\n\n\nNORM_HAMMING\n\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2\nORB,BRISK,BRIEF\u306a\u3069\n\n\nNORM_HAMMIN2\n\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2\nORB\n\n\n\n\n\uff14\uff0e\u5e73\u9762\u306e\u63a8\u5b9a\n\n\uff14\uff0e\uff11\u3000\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u306e\u63a8\u5b9a\n\u7269\u4f53\u691c\u51fa\u3092\u884c\u3046\u305f\u3081\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3069\u306e\u3088\u3046\u306a\u59ff\u52e2\u3067\u30ab\u30e1\u30e9\u306b\u5199\u308a\u8fbc\u3093\u3067\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\uff0cRANSAC\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\ncv::Mat masks;\ncv::Mat H = cv::findHomography(matchPoints-A, matchPoints-B, masks, cv::RANSAC, 3.f);\n\n\u53c2\u8003:OpenCV\u306ecv::findHomography\u306b\u3064\u3044\u3066\n\n\uff14\uff0e\uff12\u3000RANSAC\u3067\u4f7f\u7528\u3057\u305f\u5bfe\u5fdc\u70b9\uff08\u30a4\u30f3\u30e9\u30a4\u30a2\uff09\u3092\u62bd\u51fa\n\u5e73\u9762\u3092\u63a8\u5b9a\u3059\u308b\u305f\u3081\u306b\uff0c\u30a2\u30a6\u30c8\u30e9\u30a4\u30a2\u3092\u9664\u5916\u3057\uff0c\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u307f\u306b\u3057\u307e\u3059\u3002\n\n\uff14\uff0e\uff13\u3000\u30ab\u30e1\u30e9\u753b\u50cf\u3078\u306e\u5c04\u5f71\u3092\u63a8\u5b9a\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u753b\u50cf\u306e\u56db\u9685\u306e\u70b9\u3068\u6c42\u3081\u305f\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u3092\u3092\u5229\u7528\u3057\u3066\uff0c\u5c04\u5f71\u3092\u63a8\u5b9a\u3057\u307e\u3059\u3002\ncv::perspectiveTransform(template_corners, scene_corners, H);\n\n\n\uff14\uff0e\uff14\u3000\u30ab\u30e1\u30e9\u753b\u50cf\u3078\u306e\u63cf\u753b\n\u691c\u51fa\u3057\u305f\u7279\u5fb4\u70b9\uff0c\u30a4\u30f3\u30e9\u30a4\u30a2\u306b\u5f15\u3044\u305f\u7dda\uff0c\u5c04\u5f71\u3057\u305f\u5e73\u9762\u3092\u30ab\u30e1\u30e9\u753b\u50cf\u306b\u63cf\u753b\u3059\u308b\u3002\n//\u7279\u5fb4\u70b9\u306e\u8868\u793a\ncv::drawMatches(template, keypoints1, scene, keypoints2, good_matches, dst);\n// keypoints1: \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7279\u5fb4\u70b9\n// keypoints2: \u30ab\u30e1\u30e9\u753b\u50cf\u306e\u7279\u5fb4\u70b9\n// good_matches: knnMatch\u5f8c\u306b\u3055\u3089\u306b\u3057\u307c\u3063\u305f\u826f\u3044\u70b9\n// dst: \u51fa\u529b\u753b\u50cf\n\n//\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u5bfe\u5fdc\u70b9\u306e\u307f\u8868\u793a\ncv::drawMatches(template, keypoints1, scene, keypoints2, inlierMatches, dst);\n// keypoints1: \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7279\u5fb4\u70b9\n// keypoints2: \u30ab\u30e1\u30e9\u753b\u50cf\u306e\u7279\u5fb4\u70b9\n// inlierMatches: \u30a4\u30f3\u30e9\u30a4\u30a2\n// dst: \u51fa\u529b\u753b\u50cf\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u67a0\u306e\u63cf\u753b\nif (!H.empty()) {\n    // \u5bfe\u8c61\u7269\u4f53\u753b\u50cf\u304b\u3089\u30b3\u30fc\u30ca\u30fc\u3092\u53d6\u5f97 ( \u5bfe\u8c61\u7269\u4f53\u304c\"\u691c\u51fa\"\u3055\u308c\u308b )\n    std::vector<cv::Point2f> obj_corners(4);\n    obj_corners[0] = cv::Point2f(.0f, .0f);\n    obj_corners[1] = cv::Point2f(static_cast<float>(target.cols), .0f);\n    obj_corners[2] = cv::Point2f(static_cast<float>(target.cols), static_cast<float>(target.rows));\n    obj_corners[3] = cv::Point2f(.0f, static_cast<float>(target.rows));\n\n    // \u30b7\u30fc\u30f3\u3078\u306e\u5c04\u5f71\u3092\u63a8\u5b9a\n    std::vector<cv::Point2f> scene_corners(4);\n    cv::perspectiveTransform(obj_corners, scene_corners, H);\n\n    // \u30b3\u30fc\u30ca\u30fc\u9593\u3092\u7dda\u3067\u7d50\u3076 ( \u30b7\u30fc\u30f3\u4e2d\u306e\u30de\u30c3\u30d7\u3055\u308c\u305f\u5bfe\u8c61\u7269\u4f53 - \u30b7\u30fc\u30f3\u753b\u50cf )\n    float w = static_cast<float>(target.cols);\n    cv::line(dst, scene_corners[0] + cv::Point2f(w, .0f), scene_corners[1] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n    cv::line(dst, scene_corners[1] + cv::Point2f(w, .0f), scene_corners[2] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n    cv::line(dst, scene_corners[2] + cv::Point2f(w, .0f), scene_corners[3] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n    cv::line(dst, scene_corners[3] + cv::Point2f(w, .0f), scene_corners[0] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n}\n\n\n\n\uff15\uff0e\u5b9f\u9a13\nAffine Convariant Regions Datasets\u306eBikes\uff0cBoat\uff0cGraffti\uff0cLeuven\uff0cUBC\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\nBikes\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u306e\u4e00\u90e8\u3092\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\nBoat\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u3092\u4f7f\u7528\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\nGraffti\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u306e\u4e00\u90e8\u3092\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\nLeuven\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u306e\u4e00\u90e8\u3092\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\nUBC\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u306e\u4e00\u90e8\u3092\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u56de\u8ee2\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u8a66\u3057\u3066\u307f\u305f\u7279\u5fb4\u70b9\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\u306f\uff0c\u4e21\u65b9\u5099\u308f\u3063\u3066\u3044\u308b\uff0cSIFT,SURF,BRISK,ORB,KAZE,A-KAZE\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b9f\u9a13\u74b0\u5883\n\nCPU: Intel(R) Core(TM) i7-6700K\n\u30e1\u30e2\u30ea: 16 GB\nOS: Windows10 Pro 64bit\n\u958b\u767a\u74b0\u5883: Visual Studio 2013\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3: \u5b9f\u884c\u901f\u5ea6\u306e\u6700\u5927\u5316(/O2)\uff0cOpenMP\u306a\u3057\nOpenCV\u306e\u30d0\u30fc\u30b8\u30e7\u30f3: 3.1.0\n\uff0a\u7279\u5fb4\u91cf\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u306f\uff0c\u5404\u7279\u5fb4\u91cf\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n\u7d50\u679c\n\n\nBikes\n\u25ef img1\n\n\n\n\u25ef img2\n\n\n\n\u25ef img3\n\n\n\n\u25ef img4\n\n\n\n\u25ef img5\n\n\n\n\u25ef img6\n\n\n\n\nBoat\n\u25ef img1\n\n\n\n\u25ef img2\n\n\n\n\u25ef img3\n\n\n\n\u25ef img4\n\n\n\n\u25ef img5\n\n\n\n\u25ef img6\n\n\n\n\nGraffti\n\u25ef img1\n\n\n\n\u25ef img2\n\n\n\n\u25ef img3\n\n\n\n\u25ef img4\n\n\n\n\u25ef img5\n\n\n\n\u25ef img6\n\n\n\n\nLeuven\n\u25ef img1\n\n\n\n\u25ef img2\n\n\n\n\u25ef img3\n\n\n\n\u25ef img4\n\n\n\n\u25ef img5\n\n\n\n\u25ef img6\n\n\n\n\nUBC\n\u25ef img1\n\n\n\n\u25ef img2\n\n\n\n\u25ef img3\n\n\n\n\u25ef img4\n\n\n\n\u25ef img5\n\n\n\n\u25ef img6\n\n\n\n\n\uff16\uff0e\u304a\u308f\u308a\u306b\n\u3069\u306e\u5c40\u6240\u7279\u5fb4\u91cf\u3082\u6c17\u8efd\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5b9f\u9a13\u3057\u307e\u3057\u305f\u304c\uff0c\u8abf\u6574\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u5c40\u6240\u7279\u5fb4\u91cf\u3054\u3068\u306b\uff0c\u3069\u3093\u306a\u3082\u306e\u306b\u5411\u3044\u3066\u3044\u308b\u306e\u304b\u306a\u3069\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u306e\u3067\uff0c\u307f\u306a\u3055\u3093\u306e\u76ee\u7684\u306b\u5fdc\u3058\u3066\u9069\u5207\u306b\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u304a\u307e\u3051\n\u7dbe\u9df9\uff0c\u3064\u304f\u3082\u305f\u3093\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u52d5\u753b\u3092\u64ae\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n\u30b3\u30fc\u30c9\n\u5c40\u6240\u7279\u5fb4\u91cf\u62bd\u51fa\uff0c\u7269\u4f53\u691c\u51fa\uff0c\u63cf\u753b\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3057\u3066\u7f6e\u304d\u307e\u3059\u3002\nvoid features(cv::Mat &target, cv::Mat &scene, cv::Mat &t_gray, cv::Mat &s_gray, cv::Mat &dst, int num)\n{\n    // \u6642\u9593\u8a08\u7b97\u306e\u305f\u3081\u306e\u5468\u6ce2\u6570\n    double f = 1000.0 / cv::getTickFrequency();\n\n    int64 time_s; //\u30b9\u30bf\u30fc\u30c8\u6642\u9593\n    double time_detect; // \u691c\u51fa\u30a8\u30f3\u30c9\u6642\u9593\n    double time_match; // \u30de\u30c3\u30c1\u30f3\u30b0\u30a8\u30f3\u30c9\u6642\u9593\n\n\n    // \u7279\u5fb4\u70b9\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a08\u7b97\n\n    cv::Ptr<cv::Feature2D> feature;\n    std::stringstream ss;\n\n    switch (num)\n    {\n    case 0:\n        feature = cv::xfeatures2d::SIFT::create();\n        ss << \"SIFT\";\n        break;\n    case 1:\n        feature = cv::xfeatures2d::SURF::create();\n        ss << \"SURF\";\n        break;\n    case 2:\n        feature = cv::ORB::create();\n        ss << \"ORB\";\n        break;\n    case 3:\n        feature = cv::AKAZE::create();\n        ss << \"A-KAZE\";\n        break;\n    case 4:\n        feature = cv::BRISK::create();\n        ss << \"BRISK\";\n        break;\n    case 5:\n        feature = cv::KAZE::create();\n        ss << \"KAZE\";\n        break;\n    default:\n        break;\n    }\n    std::cout << \"--- \u8a08\u6e2c\uff08\" << ss.str() << \"\uff09 ---\" << std::endl;\n\n\n    //******************************\n    // \u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\n    //******************************\n    std::vector<cv::KeyPoint> kpts1, kpts2;\n    cv::Mat desc1, desc2;\n\n    feature->detectAndCompute(t_gray, cv::noArray(), kpts1, desc1);\n\n    time_s = cv::getTickCount(); // \u6642\u9593\u8a08\u6e2c Start\n    feature->detectAndCompute(s_gray, cv::noArray(), kpts2, desc2);\n    time_detect = (cv::getTickCount() - time_s)*f; // \u6642\u9593\u8a08\u6e2c Stop\n\n    if (desc2.rows == 0){\n        std::cout << \"WARNING: \u7279\u5fb4\u70b9\u691c\u51fa\u3067\u304d\u305a\" << std::endl;\n        return;\n    }\n\n    //*******************\n    // \u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\n    //*******************\n    auto matchtype = feature->defaultNorm(); // SIFT, SURF: NORM_L2\n                                             // BRISK, ORB, KAZE, A-KAZE: NORM_HAMMING\n    cv::BFMatcher matcher(matchtype);\n    std::vector<std::vector<cv::DMatch >> knn_matches;\n\n\n    time_s = cv::getTickCount(); // \u6642\u9593\u8a08\u6e2c Start\n    // \u4e0a\u4f4d2\u70b9\n    matcher.knnMatch(desc1, desc2, knn_matches, 2);\n    time_match = (cv::getTickCount() - time_s)*f; // \u6642\u9593\u8a08\u6e2c Stop\n\n\n    //***************\n    // \u5bfe\u5fdc\u70b9\u3092\u7d5e\u308b\n    //***************\n    const auto match_par = .6f; //\u5bfe\u5fdc\u70b9\u306e\u3057\u304d\u3044\u5024\n    std::vector<cv::DMatch> good_matches;\n\n    std::vector<cv::Point2f> match_point1;\n    std::vector<cv::Point2f> match_point2;\n\n    for (size_t i = 0; i < knn_matches.size(); ++i) {\n        auto dist1 = knn_matches[i][0].distance;\n        auto dist2 = knn_matches[i][1].distance;\n\n        //\u826f\u3044\u70b9\u3092\u6b8b\u3059\uff08\u6700\u3082\u985e\u4f3c\u3059\u308b\u70b9\u3068\u6b21\u306b\u985e\u4f3c\u3059\u308b\u70b9\u306e\u985e\u4f3c\u5ea6\u304b\u3089\uff09\n        if (dist1 <= dist2 * match_par) {\n            good_matches.push_back(knn_matches[i][0]);\n            match_point1.push_back(kpts1[knn_matches[i][0].queryIdx].pt);\n            match_point2.push_back(kpts2[knn_matches[i][0].trainIdx].pt);\n        }\n    }\n\n    //\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u63a8\u5b9a\n    cv::Mat masks;\n    cv::Mat H;\n    if (match_point1.size() != 0 && match_point2.size() != 0) {\n        H = cv::findHomography(match_point1, match_point2, masks, cv::RANSAC, 3.f);\n    }\n\n    //RANSAC\u3067\u4f7f\u308f\u308c\u305f\u5bfe\u5fdc\u70b9\u306e\u307f\u62bd\u51fa\n    std::vector<cv::DMatch> inlierMatches;\n    for (auto i = 0; i < masks.rows; ++i) {\n        uchar *inlier = masks.ptr<uchar>(i);\n        if (inlier[0] == 1) {\n            inlierMatches.push_back(good_matches[i]);\n        }\n    }\n    //\u7279\u5fb4\u70b9\u306e\u8868\u793a\n    cv::drawMatches(target, kpts1, scene, kpts2, good_matches, dst);\n\n    //\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u5bfe\u5fdc\u70b9\u306e\u307f\u8868\u793a\n    cv::drawMatches(target, kpts1, scene, kpts2, inlierMatches, dst);\n\n    if (!H.empty()) {\n\n        //\n        // \u5bfe\u8c61\u7269\u4f53\u753b\u50cf\u304b\u3089\u30b3\u30fc\u30ca\u30fc\u3092\u53d6\u5f97 ( \u5bfe\u8c61\u7269\u4f53\u304c\"\u691c\u51fa\"\u3055\u308c\u308b )\n        std::vector<cv::Point2f> obj_corners(4);\n        obj_corners[0] = cv::Point2f(.0f, .0f);\n        obj_corners[1] = cv::Point2f(static_cast<float>(target.cols), .0f);\n        obj_corners[2] = cv::Point2f(static_cast<float>(target.cols), static_cast<float>(target.rows));\n        obj_corners[3] = cv::Point2f(.0f, static_cast<float>(target.rows));\n\n        // \u30b7\u30fc\u30f3\u3078\u306e\u5c04\u5f71\u3092\u63a8\u5b9a\n        std::vector<cv::Point2f> scene_corners(4);\n        cv::perspectiveTransform(obj_corners, scene_corners, H);\n\n        // \u30b3\u30fc\u30ca\u30fc\u9593\u3092\u7dda\u3067\u7d50\u3076 ( \u30b7\u30fc\u30f3\u4e2d\u306e\u30de\u30c3\u30d7\u3055\u308c\u305f\u5bfe\u8c61\u7269\u4f53 - \u30b7\u30fc\u30f3\u753b\u50cf )\n        float w = static_cast<float>(target.cols);\n        cv::line(dst, scene_corners[0] + cv::Point2f(w, .0f), scene_corners[1] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n        cv::line(dst, scene_corners[1] + cv::Point2f(w, .0f), scene_corners[2] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n        cv::line(dst, scene_corners[2] + cv::Point2f(w, .0f), scene_corners[3] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n        cv::line(dst, scene_corners[3] + cv::Point2f(w, .0f), scene_corners[0] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n    }\n\n\n\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 40), cv::FONT_HERSHEY_SIMPLEX, beta-.1, cv::Scalar(255, 255, 255), 1, CV_AA);\n    ss.str(\"\");\n    ss << \"Detection & Description\";\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 70), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(0, 255, 255), 1, CV_AA);\n    ss.str(\"\");\n    ss << \"Time: \" << time_detect << \" [ms]\";\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 95), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(0, 255, 255), 1, CV_AA);\n    ss.str(\"\");\n    ss << \"Matching\";\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 120), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(0, 255, 255), 1, CV_AA);\n    ss.str(\"\");\n    ss << \"Time: \" << time_match << \" [ms]\";\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 145), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(0, 255, 255), 1, CV_AA);\n\n    ss.str(\"\");\n    ss << \"--Matches--\";\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 170), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 255, 0), 1, CV_AA);\n    ss.str(\"\");\n    ss << \"Good Matches: \" << good_matches.size();\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 190), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 255, 0), 1, CV_AA);\n\n    ss.str(\"\");\n    ss << \"Inlier: \" << inlierMatches.size();\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 220), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 255, 0), 1, CV_AA);\n\n    ss.str(\"\");\n    auto ratio = .0;\n    if (good_matches.size() != .0)\n        ratio = inlierMatches.size()*1.0 / good_matches.size();\n    ss << \"Inlier ratio: \" << ratio;\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 240), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 255, 0), 1, CV_AA);\n\n\n    ss.str(\"\");\n    ss << \"Target KeyPoints: \" << kpts1.size();\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 270), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 0, 255), 1, CV_AA);\n    ss.str(\"\");\n    ss << \"Scene KeyPoints: \" << kpts2.size();\n    cv::putText(dst, ss.str(), cv::Point(10, target.rows + 290), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 0, 255), 1, CV_AA);\n\n    std::cout << \"\u691c\u51fa\u6642\u9593: \" << time_detect << \" [ms]\" << std::endl;\n    std::cout << \"\u7167\u5408\u6642\u9593: \" << time_match << \" [ms]\" << std::endl;\n    std::cout << \"Good Matches: \" << good_matches.size() << std::endl;\n    std::cout << \"Inlier: \" << inlierMatches.size() << std::endl;\n    std::cout << \"Inlier ratio: \" << ratio << std::endl;\n    std::cout << \"target Keypoints: \" << kpts1.size() << std::endl;\n    std::cout << \"scene Keypoints: \" << kpts2.size() << std::endl;\n    std::cout << \"target match_points: \" << match_point1.size() << std::endl;\n    std::cout << \"scene match_points: \" << match_point2.size() << std::endl;\n\n}\n\n\n\u53c2\u8003\n[1] OpenCV 3.1 Document\n#\uff11\uff0e\u306f\u3058\u3081\u306b\nOpenCV\u306b\u306f\uff0c\u69d8\u3005\u306a\u51e6\u7406\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u753b\u50cf\u51e6\u7406\uff0c\u6620\u50cf\u89e3\u6790\uff0c\u30ab\u30e1\u30e9\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\uff0c\u7279\u5fb4\u70b9\u62bd\u51fa\uff0c\u7269\u4f53\u691c\u51fa\uff0c\u6a5f\u68b0\u5b66\u7fd2\uff0c\u30b3\u30f3\u30d4\u30e5\u30c6\u30fc\u30b7\u30e7\u30ca\u30eb\u30d5\u30a9\u30c8\u30b0\u30e9\u30d5\u30a3\uff0c3D\u53ef\u8996\u5316\u306a\u3069\u304c\u57fa\u672c\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3055\u3089\u306b\uff0c\u30a8\u30af\u30b9\u30c8\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\uff0c\u3088\u308a\u8c4a\u5bcc\u3046\u306a\u51e6\u7406\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002[1]\n*OpenCV 3.x\u7cfb\u3092\u4e2d\u5fc3\u306b\u8a71\u3092\u3057\u307e\u3059\u3002*\n\n\u4eca\u56de\u306f\uff0cOpenCV\u306e\u5c40\u6240\u7279\u5fb4\u91cf\u304c\u3069\u306e\u7a0b\u5ea6\u7c21\u5358\u306b\u4f7f\u3048\u308b\u306e\u304b\u8208\u5473\u304c\u3042\u308a\uff0c\u5c40\u6240\u7279\u5fb4\u91cf\u3092\u5229\u7528\u3057\u305f\u7269\u4f53\u691c\u51fa\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u6700\u8fd1\u4e16\u9593\u3067\u306f\uff0c\u30c7\u30a3\u30fc\u30d7\u306a\u7269\u4f53\u8a8d\u8b58\u3067\u76db\u308a\u4e0a\u304c\u3063\u3066\u3044\u307e\u3059\u304c\u3002\n\n\u7279\u5fb4\u70b9\u62bd\u51fa\u306b\u95a2\u3059\u308b\u8a73\u3057\u3044\u8aac\u660e\u306f\uff0c\u691c\u7d22\u3059\u308c\u3070\u591a\u6570\u3042\u308a\u307e\u3059\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n[\u85e4\u5409\u5148\u751f (\u4e2d\u90e8\u5927\u5b66)\u306e\u30b9\u30e9\u30a4\u30c9\u300c\u753b\u50cf\u5c40\u6240\u7279\u5fb4\u91cfSIFT\u3068\u305d\u308c\u4ee5\u964d\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u300d](http://www.slideshare.net/hironobufujiyoshi/miru2013sift)\u306f\uff0c\u3068\u3066\u3082\u308f\u304b\u308a\u6613\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n#\uff12\uff0e\u7279\u5fb4\u70b9\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\n\u7279\u5fb4\u70b9\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\u306f\uff0cfeatures2d\u30e2\u30b8\u30e5\u30fc\u30eb\uff08\u57fa\u672c\uff09\u3068xfeatures2d\u30e2\u30b8\u30e5\u30fc\u30eb\uff08\u30a8\u30af\u30b9\u30c8\u30e9\uff09\u5185\u306b\u3042\u308a\u307e\u3059\u3002\n\u57fa\u672c\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u306f\uff0c\u6b21\u306e\u3082\u306e\u3067\u3059\u3002\n\n\n|\u540d\u524d|\u624b\u6cd5|\u7279\u5fb4\u91cf\u306e\u8868\u73fe|\n|----|----|----|\n|cv::GFTTDetector|goodFeaturesToTrack (\u7279\u5fb4\u70b9\u691c\u51fa)| - |\n|cv::AgastFeatureDetector|AGAST (\u7279\u5fb4\u70b9\u691c\u51fa)| - |\n|cv::FastFeatureDetector|FAST (\u7279\u5fb4\u70b9\u691c\u51fa)| - |\n|cv::MSER|MSER (\u7279\u5fb4\u70b9\u691c\u51fa)| - |\n|cv::BRISK|BRISK|\u30d0\u30a4\u30ca\u30ea|\n|cv::KAZE|KAZE|\u30b9\u30b1\u30fc\u30eb|\u5b9f\u6570\u30d9\u30af\u30c8\u30eb|\n|cv::ORB|ORB|\u30d0\u30a4\u30ca\u30ea|\n|cv::AKAZE|A-KAZE|\u30d0\u30a4\u30ca\u30ea|\n\n\n\u30a8\u30af\u30b9\u30c8\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\uff0c\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\n|\u540d\u524d|\u624b\u6cd5|\u7279\u5fb4\u91cf\u306e\u8868\u73fe|\n|----|----|----|\n|cv::xfeatures2d::StarDetector|StarDetector (\u7279\u5fb4\u70b9\u8a18\u8ff0)| - |\n|cv::xfeatures2d::MSDDetector|MSD (\u7279\u5fb4\u70b9\u691c\u51fa)| - |\n|cv::xfeatures2d::LATCH|LATCH (\u7279\u5fb4\u91cf\u8a18\u8ff0)|\u30d0\u30a4\u30ca\u30ea|\n|cv::xfeatures2d::LUCID|LUCID (\u7279\u5fb4\u91cf\u8a18\u8ff0)| ? |\n|cv::xfeatures2d::BriefDescriptorExtractor|BRIEF (\u7279\u5fb4\u91cf\u8a18\u8ff0)|\u30d0\u30a4\u30ca\u30ea|\n|cv::xfeatures2d::DAISY|DAISY (\u7279\u5fb4\u91cf\u8a18\u8ff0)|\u5b9f\u6570\u30d9\u30af\u30c8\u30eb|\n|cv::xfeatures2d::FREAK|FREAK (\u7279\u5fb4\u91cf\u8a18\u8ff0)|\u30d0\u30a4\u30ca\u30ea|\n|cv::xfeatures2d::SIFT|SIFT|\u5b9f\u6570\u30d9\u30af\u30c8\u30eb|\n|cv::xfeatures2d::SURF|SURF|\u5b9f\u6570\u30d9\u30af\u30c8\u30eb|\n\n(\u6ce8)\u30ab\u30c3\u30b3\u66f8\u304d\u304c\u3042\u308b\u3082\u306e\u306f\uff0c\u3069\u3061\u3089\u304b\u306e\u307f\u3067\u3059\u3002\n\n\u4f7f\u3044\u65b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```C++:\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\ncv::Ptr<cv::Feature2D> features = *\u4f7f\u7528\u3057\u305f\u3044\u7279\u5fb4\u306e\u540d\u524d*::create();\n//(\u4f8b) A-KAZE\u306e\u5834\u5408\n//features = cv::AKAZE::create();\n\nstd::vector<cv::KeyPoint> keypoints; //\u7279\u5fb4\u70b9\ncv::Mat descriptors; //\u7279\u5fb4\u91cf\n\nfeature->detectAndCompute(\u753b\u50cf,cv::noArray(), keypoints, descriptors);\n```\n\n```C++:\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u306e\u307f\nfeature->detect(\u753b\u50cf, keypoints);\n```\n\n```C++:\u7279\u5fb4\u91cf\u8a18\u8ff0\n//\u4f55\u304b\u3057\u3089\u306e\u624b\u6cd5\u3067\u7279\u5fb4\u70b9\u3092\u53d6\u5f97\u6e08\u307f\u3067\u3042\u308b\u3053\u3068\nfeature->compute(\u753b\u50cf, keypoints, descriptors);\n```\n\n\n#\uff13\uff0e\u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\n\u7269\u4f53\u691c\u51fa\u306a\u3069\u3092\u884c\u3046\u305f\u3081\u306b\u306f\uff0c\u5f97\u3089\u308c\u305f\u7279\u5fb4\u91cf\u3092\u7528\u3044\u3066\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3046\u30af\u30e9\u30b9\u306f\uff0cDescriptorMatcher\u3067\u3059\u3002\ncv::DescriptorMatcher::create(\u30bf\u30a4\u30d7)\u306e\u3088\u3046\u306b\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\u3059\u308c\u3070\u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3048\u307e\u3059\u3002\n\n|\u30bf\u30a4\u30d7|\u624b\u6cd5|\n|----|----|\n|BruteForce|L2\u30ce\u30eb\u30e0\u30fb\u5168\u63a2\u7d22|\n|BruteForce-L1|L1\u30ce\u30eb\u30e0\u30fb\u5168\u63a2\u7d22|\n|BruteForce-Hamming|\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2\u30fb\u5168\u63a2\u7d22|\n|BruteForce-Hamming(2)|\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2\u30fb\u5168\u63a2\u7d22|\n|FlannBased|flann\u30fb\u6700\u8fd1\u508d\u63a2\u7d22|\n\n\n\u30de\u30c3\u30c1\u30f3\u30b0\u306e\u30e1\u30bd\u30c3\u30c9\n\n|\u30e1\u30bd\u30c3\u30c9|\u624b\u6cd5|\n|----|----|\n|match|\u6700\u3082\u826f\u3044\u70b9\u3092\u63a2\u3059|\n|knnMatch|\u4e0a\u4f4dk\u500b\u306e\u826f\u3044\u70b9\u3092\u63a2\u3059|\n|radiusMatch|\u7279\u5fb4\u91cf\u8a18\u8ff0\u306e\u7a7a\u9593\u3067\u8ddd\u96e2\u304c\u3057\u304d\u3044\u5024\u4ee5\u4e0b\u306e\u70b9\u3092\u63a2\u3059|\n\n```C++:\u7279\u5fb4\u91cf\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u306e\u4f8b\ncv::Ptr<cv::DescriptorMatcher> matcher = cv::DescriptorMatcher::create(\"\u30bf\u30a4\u30d7\");\n\nstd::vector<std::vector<cv::DMatch>> mathes;\nmatcher->knnMatch(descriptor-A, descriptor-B, matches, 2); //\u4e0a\u4f4d2\u4f4d\u307e\u3067\u306e\u70b9\u3092\u63a2\u3059\n//descriptor-A: query\u753b\u50cf\n//descriptor-B: train\u753b\u50cf\n```\n\n\n\u307e\u305f\uff0c\u4ed6\u306e\u65b9\u6cd5\u3068\u3057\u3066\uff0c`cv::DescriptorMatcher`\u306e\u4ee3\u308f\u308a\u306b\uff0c`cv::BFMatcher`\u3092\u4f7f\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\uff0c\u5168\u63a2\u7d22\u3092\u884c\u3044\u307e\u3059\u3002\n\n```C++\ncv::BFMatcher matcher(\u30bf\u30a4\u30d7);\nstd::vector<std::vector<cv::DMatch>> matches;\nmatcher.knnMatch(descriptor-A, descriptor-B, matches, 2);\n```\n\n\u3053\u3061\u3089\u306e\u5834\u5408\u306e\uff0c\u30bf\u30a4\u30d7\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n|\u30bf\u30a4\u30d7|\u624b\u6cd5|\u4f7f\u3048\u308b\u7279\u5fb4\u91cf|\n|----|----|----|\n|NORM_L1|L1\u30ce\u30eb\u30e0|SIFT\uff0cSURF\u306a\u3069|\n|NORM_L2|L2\u30ce\u30eb\u30e0|SIFT\uff0cSURF\u306a\u3069|\n|NORM_HAMMING|\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2|ORB,BRISK,BRIEF\u306a\u3069|\n|NORM_HAMMIN2|\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2|ORB|\n\n\n#\uff14\uff0e\u5e73\u9762\u306e\u63a8\u5b9a\n##\uff14\uff0e\uff11\u3000\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u306e\u63a8\u5b9a\n\u7269\u4f53\u691c\u51fa\u3092\u884c\u3046\u305f\u3081\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3069\u306e\u3088\u3046\u306a\u59ff\u52e2\u3067\u30ab\u30e1\u30e9\u306b\u5199\u308a\u8fbc\u3093\u3067\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\uff0cRANSAC\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n```C++\ncv::Mat masks;\ncv::Mat H = cv::findHomography(matchPoints-A, matchPoints-B, masks, cv::RANSAC, 3.f);\n```\n[\u53c2\u8003:OpenCV\u306ecv::findHomography\u306b\u3064\u3044\u3066](http://qiita.com/wakaba130/items/b566f15a4f2cf1ce414f)\n\n\n##\uff14\uff0e\uff12\u3000RANSAC\u3067\u4f7f\u7528\u3057\u305f\u5bfe\u5fdc\u70b9\uff08\u30a4\u30f3\u30e9\u30a4\u30a2\uff09\u3092\u62bd\u51fa\n\u5e73\u9762\u3092\u63a8\u5b9a\u3059\u308b\u305f\u3081\u306b\uff0c\u30a2\u30a6\u30c8\u30e9\u30a4\u30a2\u3092\u9664\u5916\u3057\uff0c\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u307f\u306b\u3057\u307e\u3059\u3002\n\n\n##\uff14\uff0e\uff13\u3000\u30ab\u30e1\u30e9\u753b\u50cf\u3078\u306e\u5c04\u5f71\u3092\u63a8\u5b9a\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u753b\u50cf\u306e\u56db\u9685\u306e\u70b9\u3068\u6c42\u3081\u305f\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u3092\u3092\u5229\u7528\u3057\u3066\uff0c\u5c04\u5f71\u3092\u63a8\u5b9a\u3057\u307e\u3059\u3002\n\n```C++\ncv::perspectiveTransform(template_corners, scene_corners, H);\n```\n\n\n##\uff14\uff0e\uff14\u3000\u30ab\u30e1\u30e9\u753b\u50cf\u3078\u306e\u63cf\u753b\n\u691c\u51fa\u3057\u305f\u7279\u5fb4\u70b9\uff0c\u30a4\u30f3\u30e9\u30a4\u30a2\u306b\u5f15\u3044\u305f\u7dda\uff0c\u5c04\u5f71\u3057\u305f\u5e73\u9762\u3092\u30ab\u30e1\u30e9\u753b\u50cf\u306b\u63cf\u753b\u3059\u308b\u3002\n\n```C++\n//\u7279\u5fb4\u70b9\u306e\u8868\u793a\ncv::drawMatches(template, keypoints1, scene, keypoints2, good_matches, dst);\n// keypoints1: \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7279\u5fb4\u70b9\n// keypoints2: \u30ab\u30e1\u30e9\u753b\u50cf\u306e\u7279\u5fb4\u70b9\n// good_matches: knnMatch\u5f8c\u306b\u3055\u3089\u306b\u3057\u307c\u3063\u305f\u826f\u3044\u70b9\n// dst: \u51fa\u529b\u753b\u50cf\n\n//\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u5bfe\u5fdc\u70b9\u306e\u307f\u8868\u793a\ncv::drawMatches(template, keypoints1, scene, keypoints2, inlierMatches, dst);\n// keypoints1: \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7279\u5fb4\u70b9\n// keypoints2: \u30ab\u30e1\u30e9\u753b\u50cf\u306e\u7279\u5fb4\u70b9\n// inlierMatches: \u30a4\u30f3\u30e9\u30a4\u30a2\n// dst: \u51fa\u529b\u753b\u50cf\n```\n\n```C++:\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u67a0\u306e\u63cf\u753b\nif (!H.empty()) {\n\t// \u5bfe\u8c61\u7269\u4f53\u753b\u50cf\u304b\u3089\u30b3\u30fc\u30ca\u30fc\u3092\u53d6\u5f97 ( \u5bfe\u8c61\u7269\u4f53\u304c\"\u691c\u51fa\"\u3055\u308c\u308b )\n\tstd::vector<cv::Point2f> obj_corners(4);\n\tobj_corners[0] = cv::Point2f(.0f, .0f);\n\tobj_corners[1] = cv::Point2f(static_cast<float>(target.cols), .0f);\n\tobj_corners[2] = cv::Point2f(static_cast<float>(target.cols), static_cast<float>(target.rows));\n\tobj_corners[3] = cv::Point2f(.0f, static_cast<float>(target.rows));\n\n\t// \u30b7\u30fc\u30f3\u3078\u306e\u5c04\u5f71\u3092\u63a8\u5b9a\n\tstd::vector<cv::Point2f> scene_corners(4);\n\tcv::perspectiveTransform(obj_corners, scene_corners, H);\n\n\t// \u30b3\u30fc\u30ca\u30fc\u9593\u3092\u7dda\u3067\u7d50\u3076 ( \u30b7\u30fc\u30f3\u4e2d\u306e\u30de\u30c3\u30d7\u3055\u308c\u305f\u5bfe\u8c61\u7269\u4f53 - \u30b7\u30fc\u30f3\u753b\u50cf )\n\tfloat w = static_cast<float>(target.cols);\n\tcv::line(dst, scene_corners[0] + cv::Point2f(w, .0f), scene_corners[1] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n\tcv::line(dst, scene_corners[1] + cv::Point2f(w, .0f), scene_corners[2] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n\tcv::line(dst, scene_corners[2] + cv::Point2f(w, .0f), scene_corners[3] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n\tcv::line(dst, scene_corners[3] + cv::Point2f(w, .0f), scene_corners[0] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n}\n```\n\n\n#\uff15\uff0e\u5b9f\u9a13\n[Affine Convariant Regions Datasets](http://www.robots.ox.ac.uk/~vgg/data/data-aff.html)\u306eBikes\uff0cBoat\uff0cGraffti\uff0cLeuven\uff0cUBC\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\nBikes\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u306e\u4e00\u90e8\u3092\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/113616/2564305d-ed37-f715-add7-ce1a8035f12d.jpeg\" alt=\"Bikes\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\" width=\"25%\">\n\nBoat\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u3092\u4f7f\u7528\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/113616/482103f1-a510-f89e-dee5-2f1570250bc4.jpeg\" alt=\"Boat\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\" width=\"25%\">\n\nGraffti\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u306e\u4e00\u90e8\u3092\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/113616/0d9bd132-1433-d0b1-ca82-fa02d8d06977.jpeg\" alt=\"Graffti\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\" width=\"25%\">\n\nLeuven\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u306e\u4e00\u90e8\u3092\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/113616/bd9c0d03-18a3-24c5-d225-9280dc4dc8f7.jpeg\" alt=\"Leuven\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\" width=\"25%\">\n\nUBC\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cimg1.ppm\u306e\u4e00\u90e8\u3092\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u56de\u8ee2\u305f\u3082\u306e\u3067\u3059\u3002\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/113616/f19f9b65-fc91-513b-922e-e8bad0567c4c.jpeg\" alt=\"UBC\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\" width=\"25%\">\n\n\u8a66\u3057\u3066\u307f\u305f\u7279\u5fb4\u70b9\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\u306f\uff0c\u4e21\u65b9\u5099\u308f\u3063\u3066\u3044\u308b\uff0cSIFT,SURF,BRISK,ORB,KAZE,A-KAZE\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n##**\u5b9f\u9a13\u74b0\u5883**\nCPU: Intel(R) Core(TM) i7-6700K\n\u30e1\u30e2\u30ea: 16 GB\nOS: Windows10 Pro 64bit\n\u958b\u767a\u74b0\u5883: Visual Studio 2013\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3: \u5b9f\u884c\u901f\u5ea6\u306e\u6700\u5927\u5316(/O2)\uff0cOpenMP\u306a\u3057\nOpenCV\u306e\u30d0\u30fc\u30b8\u30e7\u30f3: 3.1.0\n\n\uff0a\u7279\u5fb4\u91cf\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u306f\uff0c\u5404\u7279\u5fb4\u91cf\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n##**\u7d50\u679c**\n\n###Bikes\n\u25ef img1\n![bikes_img1.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/f0ed4f65-69fe-cb2a-a625-acc255f2f891.jpeg)\n-\n\u25ef img2\n![bikes_img2.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/6fc68b08-6d44-c6f7-ccbc-fe5a80399ff7.jpeg)\n-\n\u25ef img3\n![bikes_img3.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/2eb0e6a6-ce3c-3329-a0b0-d96a5bc1db8d.jpeg)\n-\n\u25ef img4\n![bikes_img4.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/cbdac76a-19cc-0072-444f-314699234109.jpeg)\n-\n\u25ef img5\n![bikes_img5.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/badb4675-8b23-e67c-c6f6-94a69b9a22bd.jpeg)\n-\n\u25ef img6\n![bikes_img6.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/81a62743-4556-c6d4-0924-5483444e5869.jpeg)\n=\n### Boat\n\u25ef img1\n![boat_img1.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/6316b093-7513-9be0-4846-ee50cf0e3652.jpeg)\n-\n\u25ef img2\n![boat_img2.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/e8eb2148-4875-a4e2-0743-82d4ede94eb9.jpeg)\n-\n\u25ef img3\n![boat_img3.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/31d9579d-242c-bb35-a522-da1c53d5822d.jpeg)\n-\n\u25ef img4\n![boat_img4.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/88b5ce40-651c-9d06-989a-a8879aed1125.jpeg)\n-\n\u25ef img5\n![boat_img5.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/a012b6d9-3bdf-3ef7-0fab-8df88e25cc03.jpeg)\n-\n\u25ef img6\n![boat_img6.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/1356f585-da33-a1e1-9b9a-de52a4673102.jpeg)\n=\n### Graffti\n\u25ef img1\n![graffiti_img1.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/e3f2c316-2ba3-8ec7-c04c-5f2fa85f0d95.jpeg)\n-\n\u25ef img2\n![graffiti_img2.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/b5907add-e28d-2784-2da8-bce21dc50b0b.jpeg)\n-\n\u25ef img3\n![graffiti_img3.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/af55cfc5-4869-0912-8897-193a3c6ebf0f.jpeg)\n-\n\u25ef img4\n![graffiti_img4.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/641f2ba9-f30d-d1a2-d067-bc4c3f8aed8f.jpeg)\n-\n\u25ef img5\n![graffiti_img5.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/0bc97808-a844-8a05-3686-a73c76dc1783.jpeg)\n-\n\u25ef img6\n![graffiti_img6.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/32b226de-6bba-6eb8-5a30-4846f94fde2b.jpeg)\n=\n### Leuven\n\u25ef img1\n![leuven_img1.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/3696a4db-0b9d-d73d-a5fa-cb082c188d30.jpeg)\n-\n\u25ef img2\n![leuven_img2.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/2fac5d9b-c9dd-62e5-3f45-e5e107a3601b.jpeg)\n-\n\u25ef img3\n![leuven_img3.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/5c71388f-5d50-7885-d004-02a63a60b91e.jpeg)\n-\n\u25ef img4\n![leuven_img4.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/d127e1fa-7b74-57e9-206d-0be7a71c9d63.jpeg)\n-\n\u25ef img5\n![leuven_img5.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/af602256-42dc-536b-10dc-760a472577dd.jpeg)\n-\n\u25ef img6\n![leuven_img6.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/2472c577-1f9e-92cd-1bb8-6c25a712d0b6.jpeg)\n=\n### UBC\n\u25ef img1\n![ubc_img1.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/0fd361d8-dbb6-2746-b567-2ac3bcc03b5a.jpeg)\n-\n\u25ef img2\n![ubc_img2.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/3c3d9be1-5621-aba3-a04b-b37fe12132b2.jpeg)\n-\n\u25ef img3\n![ubc_img3.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/9a99bcf4-3a1a-2fdd-3887-87d5daa22963.jpeg)\n-\n\u25ef img4\n![ubc_img4.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/fc141d5c-2de4-e6d8-3319-238d5cb5b1f1.jpeg)\n-\n\u25ef img5\n![ubc_img5.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/3da58467-3f23-3cb8-3890-25af0bebffa2.jpeg)\n-\n\u25ef img6\n![ubc_img6.jpeg](https://qiita-image-store.s3.amazonaws.com/0/113616/1c242178-7865-7edc-e3ac-dda4f71197a6.jpeg)\n=\n\n#\uff16\uff0e\u304a\u308f\u308a\u306b\n\u3069\u306e\u5c40\u6240\u7279\u5fb4\u91cf\u3082\u6c17\u8efd\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5b9f\u9a13\u3057\u307e\u3057\u305f\u304c\uff0c\u8abf\u6574\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u5c40\u6240\u7279\u5fb4\u91cf\u3054\u3068\u306b\uff0c\u3069\u3093\u306a\u3082\u306e\u306b\u5411\u3044\u3066\u3044\u308b\u306e\u304b\u306a\u3069\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u306e\u3067\uff0c\u307f\u306a\u3055\u3093\u306e\u76ee\u7684\u306b\u5fdc\u3058\u3066\u9069\u5207\u306b\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n#\u304a\u307e\u3051\n\u7dbe\u9df9\uff0c\u3064\u304f\u3082\u305f\u3093\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u52d5\u753b\u3092\u64ae\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n[![\u7279\u5fb4\u91cf\u6bd4\u8f03\u52d5\u753b](http://img.youtube.com/vi/3fKyDknRtOY/0.jpg)](http://www.youtube.com/watch?v=3fKyDknRtOY)\n\n# \u30b3\u30fc\u30c9\n\u5c40\u6240\u7279\u5fb4\u91cf\u62bd\u51fa\uff0c\u7269\u4f53\u691c\u51fa\uff0c\u63cf\u753b\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3057\u3066\u7f6e\u304d\u307e\u3059\u3002\n\n```cpp:\nvoid features(cv::Mat &target, cv::Mat &scene, cv::Mat &t_gray, cv::Mat &s_gray, cv::Mat &dst, int num)\n{\n\t// \u6642\u9593\u8a08\u7b97\u306e\u305f\u3081\u306e\u5468\u6ce2\u6570\n\tdouble f = 1000.0 / cv::getTickFrequency();\n\n\tint64 time_s; //\u30b9\u30bf\u30fc\u30c8\u6642\u9593\n\tdouble time_detect; // \u691c\u51fa\u30a8\u30f3\u30c9\u6642\u9593\n\tdouble time_match; // \u30de\u30c3\u30c1\u30f3\u30b0\u30a8\u30f3\u30c9\u6642\u9593\n\n\n\t// \u7279\u5fb4\u70b9\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a08\u7b97\n\n\tcv::Ptr<cv::Feature2D> feature;\n\tstd::stringstream ss;\n\n\tswitch (num)\n\t{\n\tcase 0:\n\t\tfeature = cv::xfeatures2d::SIFT::create();\n\t\tss << \"SIFT\";\n\t\tbreak;\n\tcase 1:\n\t\tfeature = cv::xfeatures2d::SURF::create();\n\t\tss << \"SURF\";\n\t\tbreak;\n\tcase 2:\n\t\tfeature = cv::ORB::create();\n\t\tss << \"ORB\";\n\t\tbreak;\n\tcase 3:\n\t\tfeature = cv::AKAZE::create();\n\t\tss << \"A-KAZE\";\n\t\tbreak;\n\tcase 4:\n\t\tfeature = cv::BRISK::create();\n\t\tss << \"BRISK\";\n\t\tbreak;\n\tcase 5:\n\t\tfeature = cv::KAZE::create();\n\t\tss << \"KAZE\";\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\tstd::cout << \"--- \u8a08\u6e2c\uff08\" << ss.str() << \"\uff09 ---\" << std::endl;\n\n\n\t//******************************\n\t// \u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\n\t//******************************\n\tstd::vector<cv::KeyPoint> kpts1, kpts2;\n\tcv::Mat desc1, desc2;\n\n\tfeature->detectAndCompute(t_gray, cv::noArray(), kpts1, desc1);\n\t\n\ttime_s = cv::getTickCount(); // \u6642\u9593\u8a08\u6e2c Start\n\tfeature->detectAndCompute(s_gray, cv::noArray(), kpts2, desc2);\n\ttime_detect = (cv::getTickCount() - time_s)*f; // \u6642\u9593\u8a08\u6e2c Stop\n\n\tif (desc2.rows == 0){\n\t\tstd::cout << \"WARNING: \u7279\u5fb4\u70b9\u691c\u51fa\u3067\u304d\u305a\" << std::endl;\n\t\treturn;\n\t}\n\n\t//*******************\n\t// \u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\n\t//*******************\n\tauto matchtype = feature->defaultNorm(); // SIFT, SURF: NORM_L2\n\t\t\t\t\t\t\t\t\t\t\t // BRISK, ORB, KAZE, A-KAZE: NORM_HAMMING\n\tcv::BFMatcher matcher(matchtype);\n\tstd::vector<std::vector<cv::DMatch >> knn_matches;\n\n\t\n\ttime_s = cv::getTickCount(); // \u6642\u9593\u8a08\u6e2c Start\n\t// \u4e0a\u4f4d2\u70b9\n\tmatcher.knnMatch(desc1, desc2, knn_matches, 2);\n\ttime_match = (cv::getTickCount() - time_s)*f; // \u6642\u9593\u8a08\u6e2c Stop\n\n\n\t//***************\n\t// \u5bfe\u5fdc\u70b9\u3092\u7d5e\u308b\n\t//***************\n\tconst auto match_par = .6f; //\u5bfe\u5fdc\u70b9\u306e\u3057\u304d\u3044\u5024\n\tstd::vector<cv::DMatch> good_matches;\n\n\tstd::vector<cv::Point2f> match_point1;\n\tstd::vector<cv::Point2f> match_point2;\n\n\tfor (size_t i = 0; i < knn_matches.size(); ++i) {\n\t\tauto dist1 = knn_matches[i][0].distance;\n\t\tauto dist2 = knn_matches[i][1].distance;\n\n\t\t//\u826f\u3044\u70b9\u3092\u6b8b\u3059\uff08\u6700\u3082\u985e\u4f3c\u3059\u308b\u70b9\u3068\u6b21\u306b\u985e\u4f3c\u3059\u308b\u70b9\u306e\u985e\u4f3c\u5ea6\u304b\u3089\uff09\n\t\tif (dist1 <= dist2 * match_par) {\n\t\t\tgood_matches.push_back(knn_matches[i][0]);\n\t\t\tmatch_point1.push_back(kpts1[knn_matches[i][0].queryIdx].pt);\n\t\t\tmatch_point2.push_back(kpts2[knn_matches[i][0].trainIdx].pt);\n\t\t}\n\t}\n\n\t//\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u63a8\u5b9a\n\tcv::Mat masks;\n\tcv::Mat H;\n\tif (match_point1.size() != 0 && match_point2.size() != 0) {\n\t\tH = cv::findHomography(match_point1, match_point2, masks, cv::RANSAC, 3.f);\n\t}\n\n\t//RANSAC\u3067\u4f7f\u308f\u308c\u305f\u5bfe\u5fdc\u70b9\u306e\u307f\u62bd\u51fa\n\tstd::vector<cv::DMatch> inlierMatches;\n\tfor (auto i = 0; i < masks.rows; ++i) {\n\t\tuchar *inlier = masks.ptr<uchar>(i);\n\t\tif (inlier[0] == 1) {\n\t\t\tinlierMatches.push_back(good_matches[i]);\n\t\t}\n\t}\n\t//\u7279\u5fb4\u70b9\u306e\u8868\u793a\n\tcv::drawMatches(target, kpts1, scene, kpts2, good_matches, dst);\n\n\t//\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u5bfe\u5fdc\u70b9\u306e\u307f\u8868\u793a\n\tcv::drawMatches(target, kpts1, scene, kpts2, inlierMatches, dst);\n\n\tif (!H.empty()) {\n\n\t\t//\n\t\t// \u5bfe\u8c61\u7269\u4f53\u753b\u50cf\u304b\u3089\u30b3\u30fc\u30ca\u30fc\u3092\u53d6\u5f97 ( \u5bfe\u8c61\u7269\u4f53\u304c\"\u691c\u51fa\"\u3055\u308c\u308b )\n\t\tstd::vector<cv::Point2f> obj_corners(4);\n\t\tobj_corners[0] = cv::Point2f(.0f, .0f);\n\t\tobj_corners[1] = cv::Point2f(static_cast<float>(target.cols), .0f);\n\t\tobj_corners[2] = cv::Point2f(static_cast<float>(target.cols), static_cast<float>(target.rows));\n\t\tobj_corners[3] = cv::Point2f(.0f, static_cast<float>(target.rows));\n\n\t\t// \u30b7\u30fc\u30f3\u3078\u306e\u5c04\u5f71\u3092\u63a8\u5b9a\n\t\tstd::vector<cv::Point2f> scene_corners(4);\n\t\tcv::perspectiveTransform(obj_corners, scene_corners, H);\n\n\t\t// \u30b3\u30fc\u30ca\u30fc\u9593\u3092\u7dda\u3067\u7d50\u3076 ( \u30b7\u30fc\u30f3\u4e2d\u306e\u30de\u30c3\u30d7\u3055\u308c\u305f\u5bfe\u8c61\u7269\u4f53 - \u30b7\u30fc\u30f3\u753b\u50cf )\n\t\tfloat w = static_cast<float>(target.cols);\n\t\tcv::line(dst, scene_corners[0] + cv::Point2f(w, .0f), scene_corners[1] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n\t\tcv::line(dst, scene_corners[1] + cv::Point2f(w, .0f), scene_corners[2] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n\t\tcv::line(dst, scene_corners[2] + cv::Point2f(w, .0f), scene_corners[3] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n\t\tcv::line(dst, scene_corners[3] + cv::Point2f(w, .0f), scene_corners[0] + cv::Point2f(w, .0f), cv::Scalar(0, 255, 0), 4);\n\t}\n\n\n\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 40), cv::FONT_HERSHEY_SIMPLEX, beta-.1, cv::Scalar(255, 255, 255), 1, CV_AA);\n\tss.str(\"\");\n\tss << \"Detection & Description\";\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 70), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(0, 255, 255), 1, CV_AA);\n\tss.str(\"\");\n\tss << \"Time: \" << time_detect << \" [ms]\";\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 95), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(0, 255, 255), 1, CV_AA);\n\tss.str(\"\");\n\tss << \"Matching\";\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 120), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(0, 255, 255), 1, CV_AA);\n\tss.str(\"\");\n\tss << \"Time: \" << time_match << \" [ms]\";\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 145), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(0, 255, 255), 1, CV_AA);\n\n\tss.str(\"\");\n\tss << \"--Matches--\";\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 170), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 255, 0), 1, CV_AA);\n\tss.str(\"\");\n\tss << \"Good Matches: \" << good_matches.size();\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 190), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 255, 0), 1, CV_AA);\n\n\tss.str(\"\");\n\tss << \"Inlier: \" << inlierMatches.size();\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 220), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 255, 0), 1, CV_AA);\n\n\tss.str(\"\");\n\tauto ratio = .0;\n\tif (good_matches.size() != .0)\n\t\tratio = inlierMatches.size()*1.0 / good_matches.size();\n\tss << \"Inlier ratio: \" << ratio;\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 240), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 255, 0), 1, CV_AA);\n\n\n\tss.str(\"\");\n\tss << \"Target KeyPoints: \" << kpts1.size();\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 270), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 0, 255), 1, CV_AA);\n\tss.str(\"\");\n\tss << \"Scene KeyPoints: \" << kpts2.size();\n\tcv::putText(dst, ss.str(), cv::Point(10, target.rows + 290), cv::FONT_HERSHEY_SIMPLEX, beta - .1, cv::Scalar(255, 0, 255), 1, CV_AA);\n\t\n\tstd::cout << \"\u691c\u51fa\u6642\u9593: \" << time_detect << \" [ms]\" << std::endl;\n\tstd::cout << \"\u7167\u5408\u6642\u9593: \" << time_match << \" [ms]\" << std::endl;\n\tstd::cout << \"Good Matches: \" << good_matches.size() << std::endl;\n\tstd::cout << \"Inlier: \" << inlierMatches.size() << std::endl;\n\tstd::cout << \"Inlier ratio: \" << ratio << std::endl;\n\tstd::cout << \"target Keypoints: \" << kpts1.size() << std::endl;\n\tstd::cout << \"scene Keypoints: \" << kpts2.size() << std::endl;\n\tstd::cout << \"target match_points: \" << match_point1.size() << std::endl;\n\tstd::cout << \"scene match_points: \" << match_point2.size() << std::endl;\n\n}\n```\n\n#\u53c2\u8003\n[1] [OpenCV 3.1 Document](http://docs.opencv.org/3.1.0/)\n", "tags": ["OpenCV", "OpenCV3", "\u5c40\u6240\u7279\u5fb4\u91cf", "\u7269\u4f53\u691c\u51fa"]}