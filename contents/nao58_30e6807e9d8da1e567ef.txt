{"context": " More than 1 year has passed since last update.\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u3002\u3082\u3061\u308d\u3093\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u518d\u5229\u7528\u6027\u304c\u4f4e\u304b\u3063\u305f\u308a\u3001\u3061\u3087\u3063\u3068\u5927\u8888\u88df\u611f\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u5834\u5408\u3082\u3002\ndef foo\n  %(a b c b a d).each do |id|\n    puts sample_item(id)\n  end\nend\ndef sample_item id\n  @sample_cache[id] ||= Sample.find(id)\nend\n\n\u305d\u3093\u306a\u6642\u306b\u306f\u3001Hash\u306edefault_proc\u3092\u4f7f\u3046\u3068\u7c21\u6613\u7684\u306b\u4ee3\u66ff\u3067\u304d\u307e\u3059\u3002\ndef foo\n  sample_cache = {}\n  sample_cache.default_proc = proc do |hash, key|\n    hash[key] = Sample.find(key)\n  end\n  %(a b c b a d).each do |id|\n    puts sample_cache[id]\n  end\nend\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30d6\u30ed\u30c3\u30af\u3092\u6e21\u3059\u306e\u3067\u3082OK\u3002\ndef foo\n  sample_cache = Hash.new{|hash, key|\n    hash[key] = Sample.find(key)\n  }\n  %(a b c b a d).each do |id|\n    puts sample_cache[id]\n  end\nend\n\n\u4e00\u5fdc\u3001\u30ec\u30f3\u30b9\u30dd\u30f3\u30b9\u7684\u306b\u3082\u3053\u3061\u3089\u306e\u65b9\u304c\u901f\u3044\u3002\n\nbenchmark\nrequire 'benchmark'\n\nclass TestClass\n  def initialize keys, cycles\n    @keys = keys\n    @cycles = cycles\n    @cache = {}\n  end\n  def get_data i\n    @cache[i] ||= Time.now\n  end\n  def test1\n    ret = {}\n    (1..@keys).cycle(@cycles){|i| ret[i] = get_data(i)}\n  end\n  def test2\n    ret = {}\n    cache = Hash.new{|h,k| h[k]=Time.now}\n    (1..@keys).cycle(@cycles){|i| ret[i] = cache[i]}\n  end\nend\n\nt = TestClass.new(10000, 1000)\nBenchmark.bm do |x|\n  x.report { t.test1 }\n  x.report { t.test2 }\n  x.report { t.test2 }\n  x.report { t.test1 }\nend\n\n\n\nresult\n       user     system      total        real\n   2.860000   0.010000   2.870000 (  2.866910)\n   2.150000   0.000000   2.150000 (  2.162081)\n   2.180000   0.000000   2.180000 (  2.188632)\n   2.980000   0.000000   2.980000 (  2.983547)\n\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u3002\u3082\u3061\u308d\u3093\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u518d\u5229\u7528\u6027\u304c\u4f4e\u304b\u3063\u305f\u308a\u3001\u3061\u3087\u3063\u3068\u5927\u8888\u88df\u611f\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u5834\u5408\u3082\u3002\n\n```ruby\ndef foo\n  %(a b c b a d).each do |id|\n    puts sample_item(id)\n  end\nend\ndef sample_item id\n  @sample_cache[id] ||= Sample.find(id)\nend\n```\n\n\u305d\u3093\u306a\u6642\u306b\u306f\u3001Hash\u306edefault_proc\u3092\u4f7f\u3046\u3068\u7c21\u6613\u7684\u306b\u4ee3\u66ff\u3067\u304d\u307e\u3059\u3002\n\n```ruby\ndef foo\n  sample_cache = {}\n  sample_cache.default_proc = proc do |hash, key|\n    hash[key] = Sample.find(key)\n  end\n  %(a b c b a d).each do |id|\n    puts sample_cache[id]\n  end\nend\n```\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30d6\u30ed\u30c3\u30af\u3092\u6e21\u3059\u306e\u3067\u3082OK\u3002\n\n```ruby\ndef foo\n  sample_cache = Hash.new{|hash, key|\n    hash[key] = Sample.find(key)\n  }\n  %(a b c b a d).each do |id|\n    puts sample_cache[id]\n  end\nend\n```\n\n\u4e00\u5fdc\u3001\u30ec\u30f3\u30b9\u30dd\u30f3\u30b9\u7684\u306b\u3082\u3053\u3061\u3089\u306e\u65b9\u304c\u901f\u3044\u3002\n\n```ruby:benchmark\nrequire 'benchmark'\n\nclass TestClass\n  def initialize keys, cycles\n    @keys = keys\n    @cycles = cycles\n    @cache = {}\n  end\n  def get_data i\n    @cache[i] ||= Time.now\n  end\n  def test1\n    ret = {}\n    (1..@keys).cycle(@cycles){|i| ret[i] = get_data(i)}\n  end\n  def test2\n    ret = {}\n    cache = Hash.new{|h,k| h[k]=Time.now}\n    (1..@keys).cycle(@cycles){|i| ret[i] = cache[i]}\n  end\nend\n\nt = TestClass.new(10000, 1000)\nBenchmark.bm do |x|\n  x.report { t.test1 }\n  x.report { t.test2 }\n  x.report { t.test2 }\n  x.report { t.test1 }\nend\n```\n\n```bash:result\n       user     system      total        real\n   2.860000   0.010000   2.870000 (  2.866910)\n   2.150000   0.000000   2.150000 (  2.162081)\n   2.180000   0.000000   2.180000 (  2.188632)\n   2.980000   0.000000   2.980000 (  2.983547)\n```", "tags": ["Ruby", "hash"]}