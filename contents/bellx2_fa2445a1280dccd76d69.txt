{"context": " More than 1 year has passed since last update.\u524d\u56deSafari\u7528\u6a5f\u80fd\u62e1\u5f35\u3092\u4f5c\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3075\u3068\u601d\u3044\u7acb\u3063\u3066\u4eca\u56de\u306fRuby\u3067\u66f8\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u7d30\u304b\u3044\u90e8\u5206\u306f\u7701\u7565\u3057\u3066\u30b3\u30fc\u30c9\u3060\u3051\u3002\n\nToken\u3092\u53d6\u5f97\u3059\u308b\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306fhttp\u3067\u901a\u4fe1\u3059\u308b\u3053\u3068\u3067\u3059\u304b\u306d\u3002\nrequire 'net/https'\nrequire 'uri'\nrequire 'json'\n\n....\n\n    def GetToken(username, password, region)\n      tenantId = username.gsub(\"gncu\",\"gnct\")\n      url = \"https://identity.\" + region + \".conoha.io/v2.0/tokens\"\n      uri = URI.parse(url)\n      https = Net::HTTP.new(uri.host, uri.port)\n      https.use_ssl = true\n      #https.set_debug_output $stderr\n      req = Net::HTTP::Post.new(uri.request_uri)\n      req[\"Content-Type\"] = \"application/json\"\n      req.body = '{ \"auth\": { \"passwordCredentials\": { \"username\": \"'+ username +'\", \"password\": \"'+ password + '\"}, \"tenantName\": \"'+ tenantId +'\" } }'\n      res = https.request(req)\n      if res.code == \"200\"\n        json = JSON.parse(res.body)\n        json[\"access\"][\"token\"]\n      else\n        nil\n      end\n    end\n\n\u771f\u3093\u4e2d\u3042\u305f\u308a\u306e\u300c#https.set_debug_output $stderr\u300d\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u89e3\u9664\u3059\u308b\u3068\u901a\u4fe1\u72b6\u614b\u306e\u8a73\u7d30\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u30c7\u30d0\u30c3\u30b0\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u53c2\u8003\uff1aConoHa API \u30c8\u30fc\u30af\u30f3\u767a\u884c\n\n\u30b5\u30fc\u30d0\u30fc\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\n\u53d6\u5f97\u3057\u305fAPI\u30c8\u30fc\u30af\u30f3\u3092req[X-Auth-Token]\u306b\u3066\u5f15\u304d\u6e21\u3057\u307e\u3059\u3002\nrequire 'net/https'\nrequire 'uri'\nrequire 'json'\n\n....\n\n    def GetServers(region, token)\n      url = \"https://compute.\" + region + \".conoha.io/v2/\" + token[\"tenant\"][\"id\"] + \"/servers/detail\"\n      uri = URI.parse(url)\n      https = Net::HTTP.new(uri.host, uri.port)\n      https.use_ssl = true\n      #https.set_debug_output $stderr\n      req = Net::HTTP::Get.new(uri.request_uri)\n      req[\"Accept\"] = \"application/json\"\n      req[\"X-Auth-Token\"] = token[\"id\"]\n      res = https.request(req)\n      if res.code == \"200\"\n          json = JSON.parse(res.body)\n          json\n      else\n          nil\n      end\n    end\n\n\u53c2\u8003\uff1aConoHa API VM\u4e00\u89a7\u8a73\u7d30\u53d6\u5f97\n\n\u5fdc\u7528\u7de8\n\u4e00\u56de\u30b3\u30c4\u304c\u308f\u304b\u3063\u3066\u3057\u307e\u3048\u3070API\u3092\u3044\u3058\u3063\u3066\u4f55\u304c\u3067\u304d\u308b\u304b\u3092\u8003\u3048\u308b\u306e\u306f\u697d\u3057\u3044\u3067\u3059\u306d\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u4ee5\u5916\u306b\u4f7f\u3046\u4eba\u304c\u3044\u308b\u304b\u7591\u554f\u3067\u3059\u304c\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5fdc\u7528\u3057\u3066Alfred2\u7528\u306eWorkflow\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002Conoha\u3068\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3064\u3068\u30b5\u30fc\u30d0\u30fc\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u9078\u629e\u3059\u308b\u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30cd\u30eb\u304c\u958b\u304d\u307e\u3059\u3002\nhttps://github.com/bellx2/alfred2-conoha\n\n\u307e\u3060\u3056\u3063\u304f\u308a\u4f5c\u3063\u305f\u3060\u3051\u306e\u30c6\u30b9\u30c8\u6bb5\u968e\u3067\u3059\u304c\u3001\u8208\u5473\u306e\u3042\u308b\u4eba\u306f\u3069\u3046\u305e\u3002\n\n\u524d\u56de[Safari\u7528\u6a5f\u80fd\u62e1\u5f35](http://qiita.com/bellx2/items/09c6a17157127f2e120a)\u3092\u4f5c\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3075\u3068\u601d\u3044\u7acb\u3063\u3066\u4eca\u56de\u306fRuby\u3067\u66f8\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306f\u7d30\u304b\u3044\u90e8\u5206\u306f\u7701\u7565\u3057\u3066\u30b3\u30fc\u30c9\u3060\u3051\u3002\n\n## Token\u3092\u53d6\u5f97\u3059\u308b\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306fhttp\u3067\u901a\u4fe1\u3059\u308b\u3053\u3068\u3067\u3059\u304b\u306d\u3002\n\n```ruby:\nrequire 'net/https'\nrequire 'uri'\nrequire 'json'\n\n....\n\n    def GetToken(username, password, region)\n      tenantId = username.gsub(\"gncu\",\"gnct\")\n      url = \"https://identity.\" + region + \".conoha.io/v2.0/tokens\"\n      uri = URI.parse(url)\n      https = Net::HTTP.new(uri.host, uri.port)\n      https.use_ssl = true\n      #https.set_debug_output $stderr\n      req = Net::HTTP::Post.new(uri.request_uri)\n      req[\"Content-Type\"] = \"application/json\"\n      req.body = '{ \"auth\": { \"passwordCredentials\": { \"username\": \"'+ username +'\", \"password\": \"'+ password + '\"}, \"tenantName\": \"'+ tenantId +'\" } }'\n      res = https.request(req)\n      if res.code == \"200\"\n        json = JSON.parse(res.body)\n        json[\"access\"][\"token\"]\n      else\n        nil\n      end\n    end\n```\n\n\u771f\u3093\u4e2d\u3042\u305f\u308a\u306e\u300c#https.set_debug_output $stderr\u300d\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u89e3\u9664\u3059\u308b\u3068\u901a\u4fe1\u72b6\u614b\u306e\u8a73\u7d30\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u30c7\u30d0\u30c3\u30b0\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n\u53c2\u8003\uff1a[ConoHa API \u30c8\u30fc\u30af\u30f3\u767a\u884c](https://www.conoha.jp/docs/identity-post_tokens.html)\n\n## \u30b5\u30fc\u30d0\u30fc\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\n\n\u53d6\u5f97\u3057\u305fAPI\u30c8\u30fc\u30af\u30f3\u3092req[X-Auth-Token]\u306b\u3066\u5f15\u304d\u6e21\u3057\u307e\u3059\u3002\n\n```ruby:\nrequire 'net/https'\nrequire 'uri'\nrequire 'json'\n\n....\n\n    def GetServers(region, token)\n      url = \"https://compute.\" + region + \".conoha.io/v2/\" + token[\"tenant\"][\"id\"] + \"/servers/detail\"\n      uri = URI.parse(url)\n      https = Net::HTTP.new(uri.host, uri.port)\n      https.use_ssl = true\n      #https.set_debug_output $stderr\n      req = Net::HTTP::Get.new(uri.request_uri)\n      req[\"Accept\"] = \"application/json\"\n      req[\"X-Auth-Token\"] = token[\"id\"]\n      res = https.request(req)\n      if res.code == \"200\"\n\t      json = JSON.parse(res.body)\n\t      json\n      else\n      \t  nil\n      end\n    end\n```\n\n\u53c2\u8003\uff1a[ConoHa API VM\u4e00\u89a7\u8a73\u7d30\u53d6\u5f97](https://www.conoha.jp/docs/compute-get_vms_detail.html)\n\n\n## \u5fdc\u7528\u7de8\n\n\u4e00\u56de\u30b3\u30c4\u304c\u308f\u304b\u3063\u3066\u3057\u307e\u3048\u3070API\u3092\u3044\u3058\u3063\u3066\u4f55\u304c\u3067\u304d\u308b\u304b\u3092\u8003\u3048\u308b\u306e\u306f\u697d\u3057\u3044\u3067\u3059\u306d\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u4ee5\u5916\u306b\u4f7f\u3046\u4eba\u304c\u3044\u308b\u304b\u7591\u554f\u3067\u3059\u304c\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5fdc\u7528\u3057\u3066Alfred2\u7528\u306eWorkflow\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002Conoha\u3068\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3064\u3068\u30b5\u30fc\u30d0\u30fc\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u9078\u629e\u3059\u308b\u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30cd\u30eb\u304c\u958b\u304d\u307e\u3059\u3002\n\nhttps://github.com/bellx2/alfred2-conoha\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-07-17 23.52.34.png](https://qiita-image-store.s3.amazonaws.com/0/14768/c9e0209a-37e6-945d-0aa5-82f0782c9670.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-07-17 23.52.34.png\")\n\n\n\u307e\u3060\u3056\u3063\u304f\u308a\u4f5c\u3063\u305f\u3060\u3051\u306e\u30c6\u30b9\u30c8\u6bb5\u968e\u3067\u3059\u304c\u3001\u8208\u5473\u306e\u3042\u308b\u4eba\u306f\u3069\u3046\u305e\u3002\n\n\n", "tags": ["Conoha", "Ruby"]}