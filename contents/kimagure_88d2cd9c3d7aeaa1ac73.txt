{"context": " More than 1 year has passed since last update.I made this simple demo because all the RxJS tutorials are way too hard/dense -- it's like trying to teach someone how to use an electronic microscope without ever letting them look at pictures. I just want to see something simple on my screen!\nAlso, smarter people than me have preferred to call Rx.Observable objects \"Streams\", so you may prefer that term in the end.\nJSBin here: http://jsbin.com/wawoqe/edit?js,output\nOtherwise, content here:\n\n\"Content\"\n/*\n * RxJS tutorials are way too hard, I just want to see the simplest possible thing work!\n * There is some philosophical crap about a stream of events just being a list of values,\n * but you can drink the antifreeze on your own.\n *\n * Thus, this really crappy demo was born.\n */\n\n/*\n * Create the observable from an event, in this case, the window scroll event\n * then map each event so we can get a new value from it\n * i.e. over time, we are just dealing with a collection:\n * (map [e1, e2, e3, ...]) -> [t1, t2, t3, ...]\n */\nvar windowYOffsetObservable = Rx.Observable.fromEvent(window, 'scroll').map(function () {\n  // I don't actually care about the event, I just need to get the window offset (scroll position)\n  return window.pageYOffset;\n});\n\n// subscribe to our Observable so that for each new item, our callback runs\n// this is our event handler, except that it doesn't cost us an arm and a leg\nvar consoleOutSubscription = windowYOffsetObservable.subscribe(function (input) {\n  console.log(input);\n});\n\n// these next subscriptions manipulate the innerText of our a,b,c,d elements\nvar aBlockSubscription = windowYOffsetObservable.subscribe(function (input) {\n  a.innerText = \"The input is now \" + input;\n});\n\nvar bBlockSubscription = windowYOffsetObservable.subscribe(function (input) {\n  b.innerText = \"2 * input is now \" + 2 * input;\n});\n\nvar cBlockSubscription = windowYOffsetObservable.subscribe(function (input) {\n  c.innerText = \"3 * input is now \" + 3 * input;\n});\n\nvar dBlockSubscription = windowYOffsetObservable.subscribe(function (input) {\n  d.innerText = \"4 * input is now \" + 4 * input;\n});\n\n/*\n * and then when we're done, we would dispose of these:\n *\n *   aBlockSubscription.dispose();\n *\n * which is much cleaner and easier than trying to hold on to your callbacks\n *\n *   $(window).on('scroll', callback); // hope you got a reference to this somewhere...\n *   $(window).off('scroll', callback); // forgot to do this? start the profiler \n *                                      // and watch your resources go crazy\n *\n * Congrats, now you can go forth and write some code and read all the RxJS docs and staltz\n * tutorials later.\n */\n\n\n\"Flowchart\" for \"basic usage\"\n Rx.Observable[fromWhatever]    OurObservable[whateverTransform]    Rx.Observable.prototype.subscribe\n    Rx.Observable                     Rx.Observable                         Rx.Disposable\n---------------------    ---------------------------------------    ---------------------------\n| Create Observable | -> | Get new Observable using transforms | -> | subscribe to Observable |\n---------------------    ---------------------------------------    ---------------------------\n                                                                                 |\n                     |-----------------------------------------------------------|\n                     |\n                     |                                                 Rx.Disposable.prototype.dispose\n                     |                                                         undefined                        \n                     |     -----------------------------------------    ------------------------\n                     |---> | subscribed callbacks happen per event | -> | dispose subscription |         \n                           -----------------------------------------    ------------------------\n\nYou're probably much better off reading ball diagrams (http://reactivex.io/documentation/observable.html).\n\nBetter resources\nRxJS README: https://github.com/Reactive-Extensions/RxJS/blob/master/readme.md\nThe staltz intro to Reactive Programming: https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\nI made this simple demo because all the RxJS tutorials are way too hard/dense -- it's like trying to teach someone how to use an electronic microscope without ever letting them look at pictures. I just want to see something simple on my screen!\n\nAlso, smarter people than me have preferred to call Rx.Observable objects \"Streams\", so you may prefer that term in the end.\n\nJSBin here: http://jsbin.com/wawoqe/edit?js,output\n\nOtherwise, content here:\n\n# \"Content\"\n\n```js\n/*\n * RxJS tutorials are way too hard, I just want to see the simplest possible thing work!\n * There is some philosophical crap about a stream of events just being a list of values,\n * but you can drink the antifreeze on your own.\n *\n * Thus, this really crappy demo was born.\n */\n\n/*\n * Create the observable from an event, in this case, the window scroll event\n * then map each event so we can get a new value from it\n * i.e. over time, we are just dealing with a collection:\n * (map [e1, e2, e3, ...]) -> [t1, t2, t3, ...]\n */\nvar windowYOffsetObservable = Rx.Observable.fromEvent(window, 'scroll').map(function () {\n  // I don't actually care about the event, I just need to get the window offset (scroll position)\n  return window.pageYOffset;\n});\n\n// subscribe to our Observable so that for each new item, our callback runs\n// this is our event handler, except that it doesn't cost us an arm and a leg\nvar consoleOutSubscription = windowYOffsetObservable.subscribe(function (input) {\n  console.log(input);\n});\n\n// these next subscriptions manipulate the innerText of our a,b,c,d elements\nvar aBlockSubscription = windowYOffsetObservable.subscribe(function (input) {\n  a.innerText = \"The input is now \" + input;\n});\n\nvar bBlockSubscription = windowYOffsetObservable.subscribe(function (input) {\n  b.innerText = \"2 * input is now \" + 2 * input;\n});\n\nvar cBlockSubscription = windowYOffsetObservable.subscribe(function (input) {\n  c.innerText = \"3 * input is now \" + 3 * input;\n});\n\nvar dBlockSubscription = windowYOffsetObservable.subscribe(function (input) {\n  d.innerText = \"4 * input is now \" + 4 * input;\n});\n\n/*\n * and then when we're done, we would dispose of these:\n *\n *   aBlockSubscription.dispose();\n *\n * which is much cleaner and easier than trying to hold on to your callbacks\n *\n *   $(window).on('scroll', callback); // hope you got a reference to this somewhere...\n *   $(window).off('scroll', callback); // forgot to do this? start the profiler \n *                                      // and watch your resources go crazy\n *\n * Congrats, now you can go forth and write some code and read all the RxJS docs and staltz\n * tutorials later.\n */\n```\n\n# \"Flowchart\" for \"basic usage\"\n\n```\n Rx.Observable[fromWhatever]    OurObservable[whateverTransform]    Rx.Observable.prototype.subscribe\n    Rx.Observable                     Rx.Observable                         Rx.Disposable\n---------------------    ---------------------------------------    ---------------------------\n| Create Observable | -> | Get new Observable using transforms | -> | subscribe to Observable |\n---------------------    ---------------------------------------    ---------------------------\n                                                                                 |\n                     |-----------------------------------------------------------|\n                     |\n                     |                                                 Rx.Disposable.prototype.dispose\n                     |                                                         undefined                        \n                     |     -----------------------------------------    ------------------------\n                     |---> | subscribed callbacks happen per event | -> | dispose subscription |         \n                           -----------------------------------------    ------------------------\n```\n\nYou're probably much better off reading ball diagrams (http://reactivex.io/documentation/observable.html).\n\n# Better resources\n\nRxJS README: https://github.com/Reactive-Extensions/RxJS/blob/master/readme.md\n\nThe staltz intro to Reactive Programming: https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\n", "tags": ["ReactiveExtensions", "JavaScript"]}