{"context": " More than 1 year has passed since last update.\n\nOpenCV meets Scala\n\nOpenCV 2.4.4\u304b\u3089\u6b63\u5f0f\u306bJava API\u3092Android\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u4ee5\u5916\u3067\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3064\u307e\u308aJVM(Java Virtual Machine)\u4e0a\u3067\u52d5\u304f\u8a00\u8a9e\u306a\u3089\u3069\u3093\u306a\u8a00\u8a9e\u304b\u3089\u3067\u3082OpenCV\u304c\u4f7f\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n* OpenCV now supports desktop Java\n\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u4eca\u56de\u306fJVM\u4e0a\u3067\u52d5\u4f5c\u3059\u308bScala\u304b\u3089OpenCV\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u74b0\u5883\n\nCentOS 5.8 (x86_64, \u4eee\u60f32\u30b3\u30a2, 1GB RAM)\nScala 2.10.0 (sbt 0.12)\nJava 1.6.0 (java-1.6.0-openjdk.x86_64)\nOpenCV 2.4.4\n\nJava API\u3092\u4f7f\u3046\u969b\u306bAndroid\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u306f\u3082\u3046\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u304b\u3089\u4f7f\u3048\u308b\u3088\u3046\u306bLinux\u6a5f\u306b\u74b0\u5883\u69cb\u7bc9\u3057\u3066\u8a66\u3057\u307e\u3057\u305f\u3002OpenCV\u306eLinux\u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u306b\u3064\u3044\u3066\u306f\u6280\u8853Wiki\u306b\u30e1\u30e2\u3092\u6b8b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n* OpenCV - 2.x Tech Note\n\u516c\u5f0f\u30b5\u30a4\u30c8\u3067\u306feclipse\u3084sbt\u306a\u3069\u3067\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u7bc9\u624b\u9806\u3082\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u4ed8\u304d\u3067\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u3061\u3089\u3082\u53c2\u8003\u306b\u3002\n* Introduction to Java Development\n\nsbt (Simple Build Tool)\nbt(Simple Build Tool)\u306fScala/Java\u7528\u306e\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u81ea\u52d5\u3067\u89e3\u6c7a\u3057\u3066\u304f\u308c\u308b\u3057\u3001Scala\u3067\u66f8\u304b\u308c\u305fDSL\u3092\u4f7f\u3063\u3066\u30d3\u30eb\u30c9\u8a2d\u5b9a\u3092\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306fEclipse\u306e\u3088\u3046\u306aIDE\u306f\u4f7f\u308f\u305a\u306bemacs + sbt\u3067\u30b9\u30c8\u30ec\u30b9\u306a\u304f\u958b\u767a\u304c\u3067\u304d\u307e\u3057\u305f\u3002OpenCV\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u6210\u529f\u3057\u305f\u3089\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb(opencv-244.jar, libopencv_java244.so)\u3092sbt\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306elib\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304d\u307e\u3059\u3002sbt\u304c\u81ea\u52d5\u3067\u30af\u30e9\u30b9\u30d1\u30b9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\nHello OpenCV in Scala\n\ncore\n\u307e\u305a\u306f\u57fa\u672c\u304b\u3089\u3002JNI(Java Native Interface)\u7d4c\u7531\u3067Mat\u306e\u6a5f\u80fd\u3092\u4f7f\u3048\u308b\u304b\u8a66\u3057\u307e\u3059\u3002\nimport org.opencv.core.Core\nimport org.opencv.core.Mat\nimport org.opencv.core.CvType\nimport org.opencv.core.Scalar\n\nobject HelloOpenCV {\n  def main(args:Array[String]) {\n    println(\"Welcome to OpenCV \" + Core.VERSION)\n    // \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea(libopencv_java244.so)\u3092\u30ed\u30fc\u30c9\n    System.loadLibrary(Core.NATIVE_LIBRARY_NAME)\n\n    println(\"Welcome to OpenCV \" + Core.VERSION)\n    // 5\u884c10\u52171\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u884c\u5217(\u8981\u7d20\u306e\u578b\u306f\u7b26\u53f7\u7121\u30578\u30d3\u30c3\u30c8\u6574\u6570)\u3092\u751f\u6210\n    val m1 = new Mat(5, 10, CvType.CV_8UC1, new Scalar(0))\n    println(\"OpenCV Mat: \" + m1)\n    // 2\u884c\u76ee(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f0\u304b\u3089)\u3092\u53d6\u5f97\n    val m1r1 = m1.row(1)\n    // 2\u884c\u76ee\u306e\u8981\u7d20\u306e\u5024\u3092\u5168\u30661\u306b\u30bb\u30c3\u30c8\n    m1r1.setTo(new Scalar(1))\n    // 6\u5217\u76ee(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f0\u304b\u3089)\u3092\u53d6\u5f97\n    val m1c5 = m1.col(5)\n    // 6\u5217\u76ee\u306e\u8981\u7d20\u306e\u5024\u3092\u5168\u30665\u306b\u30bb\u30c3\u30c8\n    m1c5.setTo(new Scalar(5))\n    println(\"OpenCV Mat data:\\n\" + m1.dump())\n\n    // 3\u884c3\u52171\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u884c\u5217(\u8981\u7d20\u306e\u578b\u306f32\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u3092\u751f\u6210\n    val m2 = new Mat(3, 3, CvType.CV_32FC1)\n    // \u4e00\u69d8\u5206\u5e03\u4e71\u6570(0~25)\u3092\u4f7f\u3063\u3066\u884c\u5217\u306e\u8981\u7d20\u306b\u5024\u3092\u30bb\u30c3\u30c8\n    Core.randu(m2, 0, 25)\n    println(m2.dump())\n    val (v1, v2, v3, v4) = (new Mat, new Mat, new Mat, new Mat)\n    // \u884c\u5217\u30921\u884c\u306b\u7e2e\u5c0f (\u8981\u7d20\u306e\u5024\u306f\u5408\u8a08/\u5e73\u5747/\u6700\u5c0f/\u6700\u5927)\n    Core.reduce(m2, v1, 0, Core.REDUCE_SUM)\n    Core.reduce(m2, v2, 0, Core.REDUCE_AVG)\n    Core.reduce(m2, v3, 0, Core.REDUCE_MIN)\n    Core.reduce(m2, v4, 0, Core.REDUCE_MAX)\n    println(\"reduce sum: \" + v1.dump())\n    println(\"reduce avg: \" + v2.dump())\n    println(\"reduce min: \" + v3.dump())\n    println(\"reduce max: \" + v4.dump())\n  }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n$ sbt run\n[info] Loading project definition from /home/ryo/workspace/src/opencv/samples/project\n[info] Set current project to HelloOpenCVScala (in build file:/home/ryo/workspace/src/opencv/samples/)\n[info] Compiling 1 Scala source to /home/ryo/workspace/src/opencv/samples/target/scala-2.10/classes...\n[info] Running Main\nWelcome to OpenCV 2.4.4.0\nMat: Mat [ 5*10*CV_8UC1, isCont=true, isSubmat=false, nativeObj=0xfe61740, dataAddr=0xfe61800 ]\nMat data:\n[0, 0, 0, 0, 0, 5, 0, 0, 0, 0;\n  1, 1, 1, 1, 1, 5, 1, 1, 1, 1;\n  0, 0, 0, 0, 0, 5, 0, 0, 0, 0;\n  0, 0, 0, 0, 0, 5, 0, 0, 0, 0;\n  0, 0, 0, 0, 0, 5, 0, 0, 0, 0]\n[13.25707, 4.9814796, 10.026485;\n  20.359627, 10.928325, 6.2197423;\n  19.327625, 19.052343, 7.6948619]\nreduce sum: [52.944321, 34.962147, 23.94109]\nreduce avg: [17.648108, 11.654049, 7.9803634]\nreduce min: [13.25707, 4.9814796, 6.2197423]\nreduce max: [20.359627, 19.052343, 10.026485]\n[success] Total time: 11 s, completed 2013/03/17 17:43:34\n\n\u884c\u5217\u6f14\u7b97\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u5074\u3067\u884c\u308f\u308c\u308b\u306e\u3067\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\n\nhighgui, imgproc\n\u30d5\u30a1\u30a4\u30ebI/O\u3084\u753b\u50cf\u51e6\u7406\u3082\u8a66\u3057\u3066\u307f\u307e\u3059\u3002sbt\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e src/main/resources \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9\u3092\u53d6\u5f97\nval filePath = getClass.getResource(\"/src.png\").getPath\n// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nval src = Highgui.imread(filePath)\n// Canny\u30d5\u30a3\u30eb\u30bf\u3067\u30a8\u30c3\u30b8\u691c\u51fa\nval edge = new Mat\nImgproc.Canny(src, edge, 80, 100)\n// \u534a\u5206\u306e\u5927\u304d\u3055\u306b\u30ea\u30b5\u30a4\u30ba\nImgproc.resize(edge, edge, new Size(), 0.5, 0.5, Imgproc.INTER_AREA)\n// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\nHighgui.imwrite(\"edge.png\", edge)\n\nHighgui\u5468\u308a\u306f\u3061\u3083\u3093\u3068\u52d5\u304f\u304b\u5fc3\u914d\u3057\u3066\u305f\u306e\u3067\u3059\u304c\u3001I/O\u51e6\u7406\u306f\u7279\u306b\u554f\u984c\u306a\u3044\u3088\u3046\u3067\u3057\u305f\u3002\n\nfeatures2d\n\u7279\u5fb4\u70b9\u691c\u51fa/\u7279\u5fb4\u91cf\u8a18\u8ff0\u3001\u30de\u30c3\u30c1\u30f3\u30b0\u51e6\u7406\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u7279\u5fb4\u91cf\u306f\u30d1\u30c6\u30f3\u30c8\u30d5\u30ea\u30fc\u3067\u4f7f\u3044\u3084\u3059\u3044ORB\u7279\u5fb4\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n// ORB\u7279\u5fb4\u70b9\u691c\u51fa\nval detect = (mat:Mat) => {\n  val keypoints = new MatOfKeyPoint\n  FeatureDetector.create(FeatureDetector.ORB).detect(mat, keypoints)\n  (mat, keypoints)\n}\n// ORB\u7279\u5fb4\u91cf\u8a18\u8ff0\nval extract = (t:Tuple2[Mat, MatOfKeyPoint]) => {\n  val descriptors = new Mat\n  DescriptorExtractor.create(DescriptorExtractor.ORB).compute(t._1, t._2, descriptors)\n  (t._2, descriptors)\n}\n// \u95a2\u6570\u5408\u6210\nval detectAndExtract = extract compose detect\n\n// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\nval img1 = Highgui.imread(getClass.getResource(\"/img1.png\").getPath)\nval img2 = Highgui.imread(getClass.getResource(\"/img2.png\").getPath)\n\n// \u5408\u6210\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u7279\u5fb4\u70b9(\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8)\u691c\u51fa & \u7279\u5fb4\u91cf\u8a18\u8ff0\nval (keyPoints1, descriptors1) = detectAndExtract(img1)\nval (keyPoints2, descriptors2) = detectAndExtract(img2)\n\n// \u30de\u30c3\u30c1\u30f3\u30b0 (\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2)\nval matcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMINGLUT)\nval matches = new MatOfDMatch\n// Scala\u3067\u306f match \u306f\u4e88\u7d04\u8a9e\u306e\u305f\u3081\u30d0\u30c3\u30af\u30af\u30a9\u30fc\u30c8\u3067\u62ec\u308b\nmatcher.`match`(descriptors1, descriptors2, matches)\n// \u8ddd\u96e2\u304c\u8fd1\u3044\u4e0a\u4f4d100\u70b9\u3092\u9078\u629e\nval filtered = matches.toArray.sortBy(_.distance).reverse.take(100)\nval filteredMatches = new MatOfDMatch(filtered:_*)\n\n// \u30de\u30c3\u30c1\u30f3\u30b0\u7d50\u679c\u3092\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306b\u63cf\u753b\nval resultImg = new Mat\nFeatures2d.drawMatches(img1, keyPoints1, img2, keyPoints2, filteredMatches, resultImg)\nHighgui.imwrite(\"result.png\", resultImg)\n\n\n\u591a\u5c11\u306f\u95a2\u6570\u578b\u3063\u307d\u304f\u3057\u3066\u307f\u307e\u3057\u305f\u3051\u3069\u3001Java\u306e\u9053\u5177\u3092\u4f7f\u3063\u3066\u308b\u306e\u3067\u666e\u901a\u306eJava\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u5909\u308f\u3089\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u3066\u3057\u307e\u3046\u306e\u306f\u4ed5\u65b9\u306a\u3044\u3067\u3059\u304b\u306d\u3002\nC++ API\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b FeatureDetector/DescriptorExtractor \u30af\u30e9\u30b9\u306e\u6a5f\u80fd\u306fJava API\u3067\u3082\u307b\u307c\u305d\u306e\u307e\u307e\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\u307e\u305f\u3001\u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u5185\u3067 MatOfKeyPoint \u3084 MatOfDMatch \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u3046\u3084\u3089Java\u5074\u3067\u306f std::vector \u3092 Mat \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3068\u3057\u3066\u6271\u3044\u3001JNI\u3067\u6e21\u3059\u3068\u304d\u306b\u5185\u90e8\u3067\u30b3\u30f3\u30c6\u30ca\u5909\u63db\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3061\u306a\u307f\u306b\u305d\u306e\u5909\u63db\u90e8\u5206\u306e\u5b9f\u88c5\u306fOpenCV\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u306e modules/java/generator/src/cpp/generators.cpp \u306b\u3042\u308a\u307e\u3059\u3002\n\n\n\nC++\u30b3\u30f3\u30c6\u30ca\nJava\u30af\u30e9\u30b9\n\n\n\n\nstd::vector<{\u578b\u540d}>\norg.opencv.core.MatOf{\u578b\u540d}\n\n\n\n\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306b\u306f toArray \u3084 toList \u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u914d\u5217\u3084\u30ea\u30b9\u30c8(java.util.List)\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5909\u63db\u3067\u304d\u308b\u306e\u3067\u904b\u7528\u306f\u3057\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u4e0a\u3001\u7c21\u5358\u306b\u3067\u3059\u304cOpenCV\u306eJava API\u3092Scala\u304b\u3089\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u4ed6\u306eJVM\u8a00\u8a9e\u304b\u3089\u3067\u3082\u7c21\u5358\u306b\u4f7f\u3048\u305d\u3046\u306a\u306e\u3067\u8208\u5473\u3042\u308b\u65b9\u306f\u662f\u975e\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n# OpenCV meets Scala\n![OpenCV meets Scala](https://qiita-image-store.s3.amazonaws.com/0/3215/37c1854a-bed6-8222-c623-24c96f8c6361.png)\n\nOpenCV 2.4.4\u304b\u3089\u6b63\u5f0f\u306bJava API\u3092Android\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u4ee5\u5916\u3067\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3064\u307e\u308aJVM(Java Virtual Machine)\u4e0a\u3067\u52d5\u304f\u8a00\u8a9e\u306a\u3089\u3069\u3093\u306a\u8a00\u8a9e\u304b\u3089\u3067\u3082OpenCV\u304c\u4f7f\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n* [OpenCV now supports desktop Java](http://www.willowgarage.com/blog/2013/02/19/opencv-now-supports-desktop-java)\n\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u4eca\u56de\u306fJVM\u4e0a\u3067\u52d5\u4f5c\u3059\u308bScala\u304b\u3089OpenCV\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n## \u74b0\u5883\n* CentOS 5.8 (x86_64, \u4eee\u60f32\u30b3\u30a2, 1GB RAM)\n* Scala 2.10.0 (sbt 0.12)\n* Java 1.6.0 (java-1.6.0-openjdk.x86_64)\n* OpenCV 2.4.4\n\nJava API\u3092\u4f7f\u3046\u969b\u306bAndroid\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u306f\u3082\u3046\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u304b\u3089\u4f7f\u3048\u308b\u3088\u3046\u306bLinux\u6a5f\u306b\u74b0\u5883\u69cb\u7bc9\u3057\u3066\u8a66\u3057\u307e\u3057\u305f\u3002OpenCV\u306eLinux\u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u306b\u3064\u3044\u3066\u306f\u6280\u8853Wiki\u306b\u30e1\u30e2\u3092\u6b8b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n* [OpenCV - 2.x Tech Note](http://rest-term.com/technote/index.php/OpenCV%20-%202.x)\n\u516c\u5f0f\u30b5\u30a4\u30c8\u3067\u306feclipse\u3084sbt\u306a\u3069\u3067\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u7bc9\u624b\u9806\u3082\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u4ed8\u304d\u3067\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u3061\u3089\u3082\u53c2\u8003\u306b\u3002\n* [Introduction to Java Development](http://docs.opencv.org/2.4.4-beta/doc/tutorials/introduction/desktop_java/java_dev_intro.html)\n\n### sbt (Simple Build Tool)\nbt(Simple Build Tool)\u306fScala/Java\u7528\u306e\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u81ea\u52d5\u3067\u89e3\u6c7a\u3057\u3066\u304f\u308c\u308b\u3057\u3001Scala\u3067\u66f8\u304b\u308c\u305fDSL\u3092\u4f7f\u3063\u3066\u30d3\u30eb\u30c9\u8a2d\u5b9a\u3092\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306fEclipse\u306e\u3088\u3046\u306aIDE\u306f\u4f7f\u308f\u305a\u306bemacs + sbt\u3067\u30b9\u30c8\u30ec\u30b9\u306a\u304f\u958b\u767a\u304c\u3067\u304d\u307e\u3057\u305f\u3002OpenCV\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u6210\u529f\u3057\u305f\u3089\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb(opencv-244.jar, libopencv_java244.so)\u3092sbt\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306elib\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304d\u307e\u3059\u3002sbt\u304c\u81ea\u52d5\u3067\u30af\u30e9\u30b9\u30d1\u30b9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n## Hello OpenCV in Scala\n### core\n\u307e\u305a\u306f\u57fa\u672c\u304b\u3089\u3002JNI(Java Native Interface)\u7d4c\u7531\u3067Mat\u306e\u6a5f\u80fd\u3092\u4f7f\u3048\u308b\u304b\u8a66\u3057\u307e\u3059\u3002\n\n```scala\nimport org.opencv.core.Core\nimport org.opencv.core.Mat\nimport org.opencv.core.CvType\nimport org.opencv.core.Scalar\n \nobject HelloOpenCV {\n  def main(args:Array[String]) {\n    println(\"Welcome to OpenCV \" + Core.VERSION)\n    // \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea(libopencv_java244.so)\u3092\u30ed\u30fc\u30c9\n    System.loadLibrary(Core.NATIVE_LIBRARY_NAME)\n \n    println(\"Welcome to OpenCV \" + Core.VERSION)\n    // 5\u884c10\u52171\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u884c\u5217(\u8981\u7d20\u306e\u578b\u306f\u7b26\u53f7\u7121\u30578\u30d3\u30c3\u30c8\u6574\u6570)\u3092\u751f\u6210\n    val m1 = new Mat(5, 10, CvType.CV_8UC1, new Scalar(0))\n    println(\"OpenCV Mat: \" + m1)\n    // 2\u884c\u76ee(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f0\u304b\u3089)\u3092\u53d6\u5f97\n    val m1r1 = m1.row(1)\n    // 2\u884c\u76ee\u306e\u8981\u7d20\u306e\u5024\u3092\u5168\u30661\u306b\u30bb\u30c3\u30c8\n    m1r1.setTo(new Scalar(1))\n    // 6\u5217\u76ee(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f0\u304b\u3089)\u3092\u53d6\u5f97\n    val m1c5 = m1.col(5)\n    // 6\u5217\u76ee\u306e\u8981\u7d20\u306e\u5024\u3092\u5168\u30665\u306b\u30bb\u30c3\u30c8\n    m1c5.setTo(new Scalar(5))\n    println(\"OpenCV Mat data:\\n\" + m1.dump())\n \n    // 3\u884c3\u52171\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u884c\u5217(\u8981\u7d20\u306e\u578b\u306f32\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u3092\u751f\u6210\n    val m2 = new Mat(3, 3, CvType.CV_32FC1)\n    // \u4e00\u69d8\u5206\u5e03\u4e71\u6570(0~25)\u3092\u4f7f\u3063\u3066\u884c\u5217\u306e\u8981\u7d20\u306b\u5024\u3092\u30bb\u30c3\u30c8\n    Core.randu(m2, 0, 25)\n    println(m2.dump())\n    val (v1, v2, v3, v4) = (new Mat, new Mat, new Mat, new Mat)\n    // \u884c\u5217\u30921\u884c\u306b\u7e2e\u5c0f (\u8981\u7d20\u306e\u5024\u306f\u5408\u8a08/\u5e73\u5747/\u6700\u5c0f/\u6700\u5927)\n    Core.reduce(m2, v1, 0, Core.REDUCE_SUM)\n    Core.reduce(m2, v2, 0, Core.REDUCE_AVG)\n    Core.reduce(m2, v3, 0, Core.REDUCE_MIN)\n    Core.reduce(m2, v4, 0, Core.REDUCE_MAX)\n    println(\"reduce sum: \" + v1.dump())\n    println(\"reduce avg: \" + v2.dump())\n    println(\"reduce min: \" + v3.dump())\n    println(\"reduce max: \" + v4.dump())\n  }\n}\n```\n\n#### \u5b9f\u884c\u7d50\u679c\n\n```bash\n$ sbt run\n[info] Loading project definition from /home/ryo/workspace/src/opencv/samples/project\n[info] Set current project to HelloOpenCVScala (in build file:/home/ryo/workspace/src/opencv/samples/)\n[info] Compiling 1 Scala source to /home/ryo/workspace/src/opencv/samples/target/scala-2.10/classes...\n[info] Running Main\nWelcome to OpenCV 2.4.4.0\nMat: Mat [ 5*10*CV_8UC1, isCont=true, isSubmat=false, nativeObj=0xfe61740, dataAddr=0xfe61800 ]\nMat data:\n[0, 0, 0, 0, 0, 5, 0, 0, 0, 0;\n  1, 1, 1, 1, 1, 5, 1, 1, 1, 1;\n  0, 0, 0, 0, 0, 5, 0, 0, 0, 0;\n  0, 0, 0, 0, 0, 5, 0, 0, 0, 0;\n  0, 0, 0, 0, 0, 5, 0, 0, 0, 0]\n[13.25707, 4.9814796, 10.026485;\n  20.359627, 10.928325, 6.2197423;\n  19.327625, 19.052343, 7.6948619]\nreduce sum: [52.944321, 34.962147, 23.94109]\nreduce avg: [17.648108, 11.654049, 7.9803634]\nreduce min: [13.25707, 4.9814796, 6.2197423]\nreduce max: [20.359627, 19.052343, 10.026485]\n[success] Total time: 11 s, completed 2013/03/17 17:43:34\n```\n\n\u884c\u5217\u6f14\u7b97\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u5074\u3067\u884c\u308f\u308c\u308b\u306e\u3067\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\n\n### highgui, imgproc\n\u30d5\u30a1\u30a4\u30ebI/O\u3084\u753b\u50cf\u51e6\u7406\u3082\u8a66\u3057\u3066\u307f\u307e\u3059\u3002sbt\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e src/main/resources \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n```scala\n// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9\u3092\u53d6\u5f97\nval filePath = getClass.getResource(\"/src.png\").getPath\n// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nval src = Highgui.imread(filePath)\n// Canny\u30d5\u30a3\u30eb\u30bf\u3067\u30a8\u30c3\u30b8\u691c\u51fa\nval edge = new Mat\nImgproc.Canny(src, edge, 80, 100)\n// \u534a\u5206\u306e\u5927\u304d\u3055\u306b\u30ea\u30b5\u30a4\u30ba\nImgproc.resize(edge, edge, new Size(), 0.5, 0.5, Imgproc.INTER_AREA)\n// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u8fbc\u307f\nHighgui.imwrite(\"edge.png\", edge)\n```\n\nHighgui\u5468\u308a\u306f\u3061\u3083\u3093\u3068\u52d5\u304f\u304b\u5fc3\u914d\u3057\u3066\u305f\u306e\u3067\u3059\u304c\u3001I/O\u51e6\u7406\u306f\u7279\u306b\u554f\u984c\u306a\u3044\u3088\u3046\u3067\u3057\u305f\u3002\n\n### features2d\n\u7279\u5fb4\u70b9\u691c\u51fa/\u7279\u5fb4\u91cf\u8a18\u8ff0\u3001\u30de\u30c3\u30c1\u30f3\u30b0\u51e6\u7406\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u7279\u5fb4\u91cf\u306f\u30d1\u30c6\u30f3\u30c8\u30d5\u30ea\u30fc\u3067\u4f7f\u3044\u3084\u3059\u3044ORB\u7279\u5fb4\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```scala\n// ORB\u7279\u5fb4\u70b9\u691c\u51fa\nval detect = (mat:Mat) => {\n  val keypoints = new MatOfKeyPoint\n  FeatureDetector.create(FeatureDetector.ORB).detect(mat, keypoints)\n  (mat, keypoints)\n}\n// ORB\u7279\u5fb4\u91cf\u8a18\u8ff0\nval extract = (t:Tuple2[Mat, MatOfKeyPoint]) => {\n  val descriptors = new Mat\n  DescriptorExtractor.create(DescriptorExtractor.ORB).compute(t._1, t._2, descriptors)\n  (t._2, descriptors)\n}\n// \u95a2\u6570\u5408\u6210\nval detectAndExtract = extract compose detect\n \n// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\nval img1 = Highgui.imread(getClass.getResource(\"/img1.png\").getPath)\nval img2 = Highgui.imread(getClass.getResource(\"/img2.png\").getPath)\n \n// \u5408\u6210\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u7279\u5fb4\u70b9(\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8)\u691c\u51fa & \u7279\u5fb4\u91cf\u8a18\u8ff0\nval (keyPoints1, descriptors1) = detectAndExtract(img1)\nval (keyPoints2, descriptors2) = detectAndExtract(img2)\n \n// \u30de\u30c3\u30c1\u30f3\u30b0 (\u30cf\u30df\u30f3\u30b0\u8ddd\u96e2)\nval matcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMINGLUT)\nval matches = new MatOfDMatch\n// Scala\u3067\u306f match \u306f\u4e88\u7d04\u8a9e\u306e\u305f\u3081\u30d0\u30c3\u30af\u30af\u30a9\u30fc\u30c8\u3067\u62ec\u308b\nmatcher.`match`(descriptors1, descriptors2, matches)\n// \u8ddd\u96e2\u304c\u8fd1\u3044\u4e0a\u4f4d100\u70b9\u3092\u9078\u629e\nval filtered = matches.toArray.sortBy(_.distance).reverse.take(100)\nval filteredMatches = new MatOfDMatch(filtered:_*)\n \n// \u30de\u30c3\u30c1\u30f3\u30b0\u7d50\u679c\u3092\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306b\u63cf\u753b\nval resultImg = new Mat\nFeatures2d.drawMatches(img1, keyPoints1, img2, keyPoints2, filteredMatches, resultImg)\nHighgui.imwrite(\"result.png\", resultImg)\n```\n![Features Matching](https://qiita-image-store.s3.amazonaws.com/0/3215/0783e36c-414d-52a3-0319-0b7c15767fbf.png)\n\u591a\u5c11\u306f\u95a2\u6570\u578b\u3063\u307d\u304f\u3057\u3066\u307f\u307e\u3057\u305f\u3051\u3069\u3001Java\u306e\u9053\u5177\u3092\u4f7f\u3063\u3066\u308b\u306e\u3067\u666e\u901a\u306eJava\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u5909\u308f\u3089\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u3066\u3057\u307e\u3046\u306e\u306f\u4ed5\u65b9\u306a\u3044\u3067\u3059\u304b\u306d\u3002\n\nC++ API\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b FeatureDetector/DescriptorExtractor \u30af\u30e9\u30b9\u306e\u6a5f\u80fd\u306fJava API\u3067\u3082\u307b\u307c\u305d\u306e\u307e\u307e\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\u307e\u305f\u3001\u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u5185\u3067 MatOfKeyPoint \u3084 MatOfDMatch \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u3046\u3084\u3089Java\u5074\u3067\u306f std::vector \u3092 Mat \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3068\u3057\u3066\u6271\u3044\u3001JNI\u3067\u6e21\u3059\u3068\u304d\u306b\u5185\u90e8\u3067\u30b3\u30f3\u30c6\u30ca\u5909\u63db\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3061\u306a\u307f\u306b\u305d\u306e\u5909\u63db\u90e8\u5206\u306e\u5b9f\u88c5\u306fOpenCV\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u306e modules/java/generator/src/cpp/generators.cpp \u306b\u3042\u308a\u307e\u3059\u3002\n\n| C++\u30b3\u30f3\u30c6\u30ca | Java\u30af\u30e9\u30b9 |\n|-------------|-----------|\n| std::vector<{\u578b\u540d}> | org.opencv.core.MatOf{\u578b\u540d} |\n\n\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306b\u306f toArray \u3084 toList \u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u914d\u5217\u3084\u30ea\u30b9\u30c8(java.util.List)\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5909\u63db\u3067\u304d\u308b\u306e\u3067\u904b\u7528\u306f\u3057\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u3001\u7c21\u5358\u306b\u3067\u3059\u304cOpenCV\u306eJava API\u3092Scala\u304b\u3089\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u4ed6\u306eJVM\u8a00\u8a9e\u304b\u3089\u3067\u3082\u7c21\u5358\u306b\u4f7f\u3048\u305d\u3046\u306a\u306e\u3067\u8208\u5473\u3042\u308b\u65b9\u306f\u662f\u975e\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["OpenCV2.4.4", "Scala2.10"]}