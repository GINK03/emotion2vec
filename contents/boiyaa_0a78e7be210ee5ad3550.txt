{"context": "\n\nTL;DR\n\nAWS Lambda \u3092\u4f7f\u3046\u3068\u30b5\u30fc\u30d0\u30ec\u30b9\u306b AMI \u4f5c\u6210\u3092\u81ea\u52d5\u5316\u3067\u304d\u308b\nServerless Framework \u3092\u4f7f\u3046\u3068 Lambda \u306e\u30b3\u30fc\u30c9\u3092\u7ba1\u7406\u3067\u304d\u308b\n\u3067\u3082\u3053\u306e\u304f\u3089\u3044\u306e\u3053\u3068\u306f\u76f4\u3067 Lambda Function \u4f5c\u3063\u305f\u65b9\u304c\u65e9\u3044\u3068\u601d\u3044\u307e\u3059\u3002 Serverless Framework \u3092\u4f7f\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u3060\u3051\u3067\u3059\n\u30bd\u30fc\u30b9\n\n\n\u624b\u9806\n\n\u74b0\u5883\u69cb\u7bc9\n\nNode.js v4\u4ee5\u4e0a\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nServerless Framework\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n$ npm install -g serverless\n\n\nAWS IAM\u3067\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u306bAdministratorAccess\u3092\u6301\u3064\u30e6\u30fc\u30b6\u3092\u4f5c\u308a\u3001\u30a2\u30af\u30bb\u30b9\u30ad\u30fcID\u3068\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3092\u7528\u610f\n\u30d7\u30ed\u30d0\u30a4\u30c0\u8a3c\u660e\u66f8\u3092\u8a2d\u5b9a\n\n$ serverless config credentials --provider aws --key \u30a2\u30af\u30bb\u30b9\u30ad\u30fcID --secret \u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\n\n\n\u5b9f\u88c5\n\nservice\u3092\u4f5c\u6210\n\n$ serverless create --template aws-nodejs --name ami\n\n\n\u8a66\u3057\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u306efunction\u3092\u30ed\u30fc\u30ab\u30eb\u5b9f\u884c\u3057\u3066\u307f\u308b\n\n$ serverless invoke local --function hello\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\\"message\\\":\\\"Go Serverless v1.0! Your function executed successfully!\\\",\\\"input\\\":\\\"\\\"}\"\n}\n\n\nES2015+\u5bfe\u5fdc\u7528\u306ewebpack\u30d7\u30e9\u30b0\u30a4\u30f3\u3068babel\u3068\u4ef2\u9593\u305f\u3061\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n$ npm install babel-core babel-loader babel-preset-env serverless-webpack webpack --save-dev\n\n\naws-sdk\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n$ npm install aws-sdk\n\n\nAMI\u4f5c\u6210\u3057\u3066\u3001\u671f\u9650\u5207\u308cAMI\u524a\u9664\u3059\u308bfunction\u3092\u4f5c\u308b\n\n\nhandler.js\nimport AWS from 'aws-sdk';\n\nconst AWS_REGION = 'ap-northeast-1'; // \u30ea\u30fc\u30b8\u30e7\u30f3\nconst AMI_RETENTION_PERIOD = 7; // \u4fdd\u7ba1\u65e5\u6570\n\nAWS.config.region = AWS_REGION;\nconst ec2 = new AWS.EC2();\n\n/**\n * List EC2 instances\n * @return {Promise.<Array>} instances\n */\nconst listInstances = () => {\n  console.log('listInstances');\n\n  // describeInstances\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#describeInstances-property\n  return ec2.describeInstances({\n    Filters: [{ Name: 'tag:Backup', Values: ['yes'] }],\n  }).promise()\n  .then((data) => {\n    const instances = data.Reservations.length === 0 ? data.Reservations : data.Reservations\n    .map(reservation => reservation.Instances.map(instance => ({\n      InstanceId: instance.InstanceId,\n      Tags: instance.Tags,\n    })))\n    .reduce((previousValue, currentValue) => previousValue.concat(currentValue));\n\n    return instances;\n  });\n};\n\n/**\n * Create AMIs\n * @param {Array} instances\n * @returns {Promise.<Array>} AMIs\n */\nconst createImages = (instances) => {\n  console.log('createImages target instances =', JSON.stringify(instances));\n\n  return Promise.all(instances.map((instance) => {\n    const name = instance.Tags.some((tag) => {\n      if (tag.Key === 'Name') {\n        return true;\n      }\n      return false;\n    }) ? instance.Tags.find((tag) => {\n      if (tag.Key === 'Name') {\n        return true;\n      }\n      return false;\n    }).Value : instance.InstanceId;\n\n    // createImage\n    // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#createImage-property\n    return ec2.createImage({\n      InstanceId: instance.InstanceId,\n      Name: `${name} on ${new Date().toDateString()}`,\n      NoReboot: true,\n    }).promise();\n  }));\n};\n\n/**\n * Create Tags\n * @param {array} images - AMIs\n * @returns {Promise.<Array>} null\n */\nconst createTags = (images) => {\n  console.log('createTags target images =', JSON.stringify(images));\n\n  // createTags\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#createTags-property\n  return Promise.all(images.map(image => ec2.createTags({\n    Resources: [image.ImageId],\n    Tags: [{ Key: 'Delete', Value: 'yes' }],\n  }).promise()));\n};\n\n/**\n * List expired AMIs\n * @return {Promise.<Array>} AMIs\n */\nconst listExpiredImages = () => {\n  console.log('listExpiredImages');\n\n  // describeImages\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#describeImages-property\n  return ec2.describeImages({\n    Owners: ['self'],\n    Filters: [{ Name: 'tag:Delete', Values: ['yes'] }],\n  }).promise()\n  .then((data) => {\n    const expiredImages = data.Images\n    .filter((image) => {\n      const creationDate = new Date(image.CreationDate);\n      const expirationDate = new Date(Date.now() - (86400000 * AMI_RETENTION_PERIOD));\n\n      if (creationDate < expirationDate) {\n        return true;\n      }\n      return false;\n    })\n    .map(image => ({\n      ImageId: image.ImageId,\n      CreationDate: image.CreationDate,\n      BlockDeviceMappings: image.BlockDeviceMappings.map(mapping => ({\n        Ebs: { SnapshotId: mapping.Ebs.SnapshotId },\n      })),\n    }));\n\n    return expiredImages;\n  });\n};\n\n/**\n * Delete AMIs\n * @param {Array} images - AMIs\n * @returns {Promise.<Array>} block device mappings\n */\nconst deleteImages = (images) => {\n  console.log('deleteImages target images =', JSON.stringify(images));\n\n  // deregisterImage\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#describeImages-property\n  return Promise.all(images.map(image => ec2.deregisterImage({\n    ImageId: image.ImageId,\n  }).promise()))\n  .then(() => {\n    const mappings = images.length === 0 ? images :\n    images\n    .map(image => image.BlockDeviceMappings)\n    .reduce((previousValue, currentValue) => previousValue.concat(currentValue));\n\n    return mappings;\n  });\n};\n\n/**\n * Delete Snapshots\n * @param {Array} mappings - block device mappings\n * @returns {Promise.<Array>} null\n */\nconst deleteSnapshots = (mappings) => {\n  console.log('deleteSnapshots target mappings =', JSON.stringify(mappings));\n\n  // deleteSnapshot\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#deleteSnapshot-property\n  return Promise.all(mappings.map(mapping => ec2.deleteSnapshot({\n    SnapshotId: mapping.Ebs.SnapshotId,\n  }).promise()));\n};\n\n/**\n * Lambda function: create AMIs and delete expired AMIs\n */\nconst createAndDeleteAMI = () => {\n  listInstances()\n  .then(instances => createImages(instances))\n  .then(images => createTags(images))\n  .then(() => listExpiredImages())\n  .then(images => deleteImages(images))\n  .then(mappings => deleteSnapshots(mappings))\n  .then(() => console.log('Done'))\n  .catch(err => console.error(err));\n};\n\nexport { createAndDeleteAMI };\n\n\n\nwebpack\u8a2d\u5b9a\n\n\nwebpack.config.js\nmodule.exports = {\n  entry: './handler.js',\n  target: 'node',\n  // AWS Lambda Available Libraries\n  externals: { 'aws-sdk': 'aws-sdk' },\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      loader: 'babel',\n    }],\n  },\n};\n\n\n\nBabel\u8a2d\u5b9a\n\n\n.babelrc\n{\n  \"presets\": [\n    [\"env\", {\n      /* AWS Lambda Execution Environment */\n      \"targets\": { \"node\": \"4.3.2\" },\n      \"include\": [\"transform-es2015-destructuring\"]\n    }]\n  ]\n}\n\n\nLambda\u306eNode\u30d0\u30fc\u30b8\u30e7\u30f3\u306f4.3.2\u3060\u304c\u3001targets\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u3060\u3068\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3063\u305f\n\nServerless Framework\u8a2d\u5b9a\n\n\n\nserverless.yml\nservice: ami\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ec2:DescribeInstances\n        - ec2:CreateImage\n        - ec2:CreateTags\n        - ec2:DescribeImages\n        - ec2:DeregisterImage\n        - ec2:DeleteSnapshot\n      Resource: \"*\"\n\nfunctions:\n  createAndDeleteAMI:\n    handler: handler.createAndDeleteAMI\n    events:\n      - schedule: cron(0 0 * * ? *) # \u6bce\u65e50\u6642\u306b\u5b9f\u884c\n\n\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u69cb\u6587\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\n\n\u78ba\u8a8d\u30fb\u30c7\u30d7\u30ed\u30a4\n\n\u30ed\u30fc\u30ab\u30eb\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n$ serverless webpack invoke --function createAndDeleteAMI\n\n\n\u30c7\u30d7\u30ed\u30a4\n\n$ serverless deploy\n\n\nLambda \u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n$ serverless invoke --function createAndDeleteAMI --log\n\n\n\u53c2\u8003\nhttp://blog.powerupcloud.com/2016/10/15/serverless-automate-ami-creation-and-deletion-using-aws-lambda/\nhttps://github.com/serverless/serverless\nhttps://github.com/serverless/examples\nhttps://github.com/americansystems/serverless-es6-jest\nhttps://github.com/elastic-coders/serverless-webpack\nhttps://babeljs.io/docs/plugins/preset-env/\nhttps://github.com/apex/apex/issues/217#issuecomment-194247472\nhttp://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html\nhttps://serverless.com/framework/docs/providers/aws/guide/functions#permissions\nhttps://serverless.com/framework/docs/providers/aws/events/schedule/\n\n## TL;DR\n\n* AWS Lambda \u3092\u4f7f\u3046\u3068\u30b5\u30fc\u30d0\u30ec\u30b9\u306b AMI \u4f5c\u6210\u3092\u81ea\u52d5\u5316\u3067\u304d\u308b\n* Serverless Framework \u3092\u4f7f\u3046\u3068 Lambda \u306e\u30b3\u30fc\u30c9\u3092\u7ba1\u7406\u3067\u304d\u308b\n* \u3067\u3082\u3053\u306e\u304f\u3089\u3044\u306e\u3053\u3068\u306f\u76f4\u3067 Lambda Function \u4f5c\u3063\u305f\u65b9\u304c\u65e9\u3044\u3068\u601d\u3044\u307e\u3059\u3002 Serverless Framework \u3092\u4f7f\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u3060\u3051\u3067\u3059\n* [\u30bd\u30fc\u30b9](https://github.com/boiyaa/serverless-ami)\n\n\n## \u624b\u9806\n\n### \u74b0\u5883\u69cb\u7bc9\n* Node.js v4\u4ee5\u4e0a\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n* Serverless Framework\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```shell-session\n$ npm install -g serverless\n```\n\n* AWS IAM\u3067\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u306bAdministratorAccess\u3092\u6301\u3064\u30e6\u30fc\u30b6\u3092\u4f5c\u308a\u3001\u30a2\u30af\u30bb\u30b9\u30ad\u30fcID\u3068\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3092\u7528\u610f\n\n* \u30d7\u30ed\u30d0\u30a4\u30c0\u8a3c\u660e\u66f8\u3092\u8a2d\u5b9a\n\n```shell-session\n$ serverless config credentials --provider aws --key \u30a2\u30af\u30bb\u30b9\u30ad\u30fcID --secret \u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\n```\n\n### \u5b9f\u88c5\n* service\u3092\u4f5c\u6210\n\n```shell-session\n$ serverless create --template aws-nodejs --name ami\n```\n\n* \u8a66\u3057\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u306efunction\u3092\u30ed\u30fc\u30ab\u30eb\u5b9f\u884c\u3057\u3066\u307f\u308b\n\n```shell-session\n$ serverless invoke local --function hello\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\\"message\\\":\\\"Go Serverless v1.0! Your function executed successfully!\\\",\\\"input\\\":\\\"\\\"}\"\n}\n```\n\n* ES2015+\u5bfe\u5fdc\u7528\u306ewebpack\u30d7\u30e9\u30b0\u30a4\u30f3\u3068babel\u3068\u4ef2\u9593\u305f\u3061\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```shell-session\n$ npm install babel-core babel-loader babel-preset-env serverless-webpack webpack --save-dev\n```\n\n* aws-sdk\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```shell-session\n$ npm install aws-sdk\n```\n\n* AMI\u4f5c\u6210\u3057\u3066\u3001\u671f\u9650\u5207\u308cAMI\u524a\u9664\u3059\u308bfunction\u3092\u4f5c\u308b\n\n```js:handler.js\nimport AWS from 'aws-sdk';\n\nconst AWS_REGION = 'ap-northeast-1'; // \u30ea\u30fc\u30b8\u30e7\u30f3\nconst AMI_RETENTION_PERIOD = 7; // \u4fdd\u7ba1\u65e5\u6570\n\nAWS.config.region = AWS_REGION;\nconst ec2 = new AWS.EC2();\n\n/**\n * List EC2 instances\n * @return {Promise.<Array>} instances\n */\nconst listInstances = () => {\n  console.log('listInstances');\n\n  // describeInstances\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#describeInstances-property\n  return ec2.describeInstances({\n    Filters: [{ Name: 'tag:Backup', Values: ['yes'] }],\n  }).promise()\n  .then((data) => {\n    const instances = data.Reservations.length === 0 ? data.Reservations : data.Reservations\n    .map(reservation => reservation.Instances.map(instance => ({\n      InstanceId: instance.InstanceId,\n      Tags: instance.Tags,\n    })))\n    .reduce((previousValue, currentValue) => previousValue.concat(currentValue));\n\n    return instances;\n  });\n};\n\n/**\n * Create AMIs\n * @param {Array} instances\n * @returns {Promise.<Array>} AMIs\n */\nconst createImages = (instances) => {\n  console.log('createImages target instances =', JSON.stringify(instances));\n\n  return Promise.all(instances.map((instance) => {\n    const name = instance.Tags.some((tag) => {\n      if (tag.Key === 'Name') {\n        return true;\n      }\n      return false;\n    }) ? instance.Tags.find((tag) => {\n      if (tag.Key === 'Name') {\n        return true;\n      }\n      return false;\n    }).Value : instance.InstanceId;\n\n    // createImage\n    // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#createImage-property\n    return ec2.createImage({\n      InstanceId: instance.InstanceId,\n      Name: `${name} on ${new Date().toDateString()}`,\n      NoReboot: true,\n    }).promise();\n  }));\n};\n\n/**\n * Create Tags\n * @param {array} images - AMIs\n * @returns {Promise.<Array>} null\n */\nconst createTags = (images) => {\n  console.log('createTags target images =', JSON.stringify(images));\n\n  // createTags\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#createTags-property\n  return Promise.all(images.map(image => ec2.createTags({\n    Resources: [image.ImageId],\n    Tags: [{ Key: 'Delete', Value: 'yes' }],\n  }).promise()));\n};\n\n/**\n * List expired AMIs\n * @return {Promise.<Array>} AMIs\n */\nconst listExpiredImages = () => {\n  console.log('listExpiredImages');\n\n  // describeImages\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#describeImages-property\n  return ec2.describeImages({\n    Owners: ['self'],\n    Filters: [{ Name: 'tag:Delete', Values: ['yes'] }],\n  }).promise()\n  .then((data) => {\n    const expiredImages = data.Images\n    .filter((image) => {\n      const creationDate = new Date(image.CreationDate);\n      const expirationDate = new Date(Date.now() - (86400000 * AMI_RETENTION_PERIOD));\n\n      if (creationDate < expirationDate) {\n        return true;\n      }\n      return false;\n    })\n    .map(image => ({\n      ImageId: image.ImageId,\n      CreationDate: image.CreationDate,\n      BlockDeviceMappings: image.BlockDeviceMappings.map(mapping => ({\n        Ebs: { SnapshotId: mapping.Ebs.SnapshotId },\n      })),\n    }));\n\n    return expiredImages;\n  });\n};\n\n/**\n * Delete AMIs\n * @param {Array} images - AMIs\n * @returns {Promise.<Array>} block device mappings\n */\nconst deleteImages = (images) => {\n  console.log('deleteImages target images =', JSON.stringify(images));\n\n  // deregisterImage\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#describeImages-property\n  return Promise.all(images.map(image => ec2.deregisterImage({\n    ImageId: image.ImageId,\n  }).promise()))\n  .then(() => {\n    const mappings = images.length === 0 ? images :\n    images\n    .map(image => image.BlockDeviceMappings)\n    .reduce((previousValue, currentValue) => previousValue.concat(currentValue));\n\n    return mappings;\n  });\n};\n\n/**\n * Delete Snapshots\n * @param {Array} mappings - block device mappings\n * @returns {Promise.<Array>} null\n */\nconst deleteSnapshots = (mappings) => {\n  console.log('deleteSnapshots target mappings =', JSON.stringify(mappings));\n\n  // deleteSnapshot\n  // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#deleteSnapshot-property\n  return Promise.all(mappings.map(mapping => ec2.deleteSnapshot({\n    SnapshotId: mapping.Ebs.SnapshotId,\n  }).promise()));\n};\n\n/**\n * Lambda function: create AMIs and delete expired AMIs\n */\nconst createAndDeleteAMI = () => {\n  listInstances()\n  .then(instances => createImages(instances))\n  .then(images => createTags(images))\n  .then(() => listExpiredImages())\n  .then(images => deleteImages(images))\n  .then(mappings => deleteSnapshots(mappings))\n  .then(() => console.log('Done'))\n  .catch(err => console.error(err));\n};\n\nexport { createAndDeleteAMI };\n```\n\n* webpack\u8a2d\u5b9a\n\n```js:webpack.config.js\nmodule.exports = {\n  entry: './handler.js',\n  target: 'node',\n  // AWS Lambda Available Libraries\n  externals: { 'aws-sdk': 'aws-sdk' },\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      loader: 'babel',\n    }],\n  },\n};\n```\n\n* Babel\u8a2d\u5b9a\n\n```json:.babelrc\n{\n  \"presets\": [\n    [\"env\", {\n      /* AWS Lambda Execution Environment */\n      \"targets\": { \"node\": \"4.3.2\" },\n      \"include\": [\"transform-es2015-destructuring\"]\n    }]\n  ]\n}\n```\nLambda\u306eNode\u30d0\u30fc\u30b8\u30e7\u30f3\u306f4.3.2\u3060\u304c\u3001targets\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u3060\u3068\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3063\u305f\n\n* Serverless Framework\u8a2d\u5b9a  \n\n```yml:serverless.yml\nservice: ami\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ec2:DescribeInstances\n        - ec2:CreateImage\n        - ec2:CreateTags\n        - ec2:DescribeImages\n        - ec2:DeregisterImage\n        - ec2:DeleteSnapshot\n      Resource: \"*\"\n\nfunctions:\n  createAndDeleteAMI:\n    handler: handler.createAndDeleteAMI\n    events:\n      - schedule: cron(0 0 * * ? *) # \u6bce\u65e50\u6642\u306b\u5b9f\u884c\n```\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u69cb\u6587\u306f[\u3053\u3061\u3089](http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html)\u3092\u53c2\u8003\u306b\n\n### \u78ba\u8a8d\u30fb\u30c7\u30d7\u30ed\u30a4\n* \u30ed\u30fc\u30ab\u30eb\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n```shell-session\n$ serverless webpack invoke --function createAndDeleteAMI\n```\n\n* \u30c7\u30d7\u30ed\u30a4\n\n```shell-session\n$ serverless deploy\n```\n\n* Lambda \u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n```shell-session\n$ serverless invoke --function createAndDeleteAMI --log\n```\n\n\n## \u53c2\u8003\n\nhttp://blog.powerupcloud.com/2016/10/15/serverless-automate-ami-creation-and-deletion-using-aws-lambda/\nhttps://github.com/serverless/serverless\nhttps://github.com/serverless/examples\nhttps://github.com/americansystems/serverless-es6-jest\nhttps://github.com/elastic-coders/serverless-webpack\nhttps://babeljs.io/docs/plugins/preset-env/\nhttps://github.com/apex/apex/issues/217#issuecomment-194247472\nhttp://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html\nhttps://serverless.com/framework/docs/providers/aws/guide/functions#permissions\nhttps://serverless.com/framework/docs/providers/aws/events/schedule/\n\n", "tags": ["ami", "lambda", "serverless"]}