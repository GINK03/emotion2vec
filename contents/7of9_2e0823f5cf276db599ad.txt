{"context": "\nMy_Environment\nUbuntu 14.04 LTS Japanese Remix\non VMWare Fusion v8.5.2 (4635224)\non OS X El Captian v10.11.4\n\nGNU bash, version 4.3.11(1)-release\n\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4 \n(also for g++)\nADDA v.1.3b6\n\n\nThis article is related to ADDA (light scattering simulator based on the discrete dipole approximation).\n\niterative.c\nint IterativeSolver(const enum iter method_in,const enum incpol which)\n/* choose required iterative method; do common initialization part;\n * 'which' is used only if the initial field is read from file\n */\n{\n\n\nI am wondering whether the initial field is the one I am looking for...\nThe which is used in CalcInitField()\nstatic const char *CalcInitField(double zero_resid,const enum incpol which)\n/* Initializes the field as the starting point of the iterative solver. Assumes that pvec contains the right-hand side\n * of equations (b). At the end of this function xvec should contain initial vector for the iterative solver (x_0), rvec\n * - corresponding residual r_0, and inprodR - the norm of the latter residual. Returns string containing description of\n * the initial field used.\n */\n{\nThen, the which is used as follows:\n\niterative.c\nstatic const char *CalcInitField(double zero_resid,const enum incpol which)\n{\n    ...\n    switch (InitField) {\n        ...\n        case IF_READ: {\n            const char *fname;\n            if (which==INCPOL_Y) fname=infi_fnameY;\n            else fname=infi_fnameX; // which==INCPOL_X\n            ReadField(fname,xvec); // read electric field\n            InitFieldfromE(); // transform it into starting vector\n            return dyn_sprintf(\"x_0 = from file %s\\n\",fname);\n        }\n        ...\n\n\n```txt:My_Environment\nUbuntu 14.04 LTS Japanese Remix\non VMWare Fusion v8.5.2 (4635224)\non OS X El Captian v10.11.4\n\nGNU bash, version 4.3.11(1)-release\n\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4 \n(also for g++)\nADDA v.1.3b6\n```\n\nThis article is related to [ADDA (light scattering simulator based on the discrete dipole approximation)](https://github.com/adda-team/adda/).\n\n```iterative.c\nint IterativeSolver(const enum iter method_in,const enum incpol which)\n/* choose required iterative method; do common initialization part;\n * 'which' is used only if the initial field is read from file\n */\n{\n```\n\nI am wondering whether the `initial field` is the one I am looking for...\n\nThe `which` is used in CalcInitField()\n\n`static const char *CalcInitField(double zero_resid,const enum incpol which)\n/* Initializes the field as the starting point of the iterative solver. Assumes that pvec contains the right-hand side\n * of equations (b). At the end of this function xvec should contain initial vector for the iterative solver (x_0), rvec\n * - corresponding residual r_0, and inprodR - the norm of the latter residual. Returns string containing description of\n * the initial field used.\n */\n{`\n\nThen, the `which` is used as follows:\n\n```iterative.c\nstatic const char *CalcInitField(double zero_resid,const enum incpol which)\n{\n    ...\n    switch (InitField) {\n        ...\n        case IF_READ: {\n            const char *fname;\n            if (which==INCPOL_Y) fname=infi_fnameY;\n            else fname=infi_fnameX; // which==INCPOL_X\n            ReadField(fname,xvec); // read electric field\n            InitFieldfromE(); // transform it into starting vector\n            return dyn_sprintf(\"x_0 = from file %s\\n\",fname);\n        }\n        ...\n```\n", "tags": ["ADDA"]}