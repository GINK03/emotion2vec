{"context": "Marvell Wi-Fi driver\u306emulti port aggregation \u306b\u3064\u3044\u3066Linux\u30ab\u30fc\u30cd\u30eb\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u306e\u6a5f\u80fd\u306f\u300111n \u306e frame aggregation \u3092 SDIO\u306e\u66f8\u304d\u8fbc\u307f\u624b\u9806\u3092\u5de5\u592b\u3057\u3066\u52b9\u7387\u7684\u306b\u884c\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\n\u307e\u3068\u3081\n\nmulti port aggregation \u306f SDIO\u306eCMD53\u306e\uff11\u56de\u306e\u66f8\u304d\u8fbc\u307f\u6642\u306b\u8907\u6570\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u307e\u3068\u3081\u3066\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3067\u3001\u30c1\u30c3\u30d7\u306b\u307e\u3068\u3081\u3066\u8907\u6570\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u6e21\u3057\u3001\u30c1\u30c3\u30d7\u306711n\u306eMPDU\u30d5\u30ec\u30fc\u30e0\u30a2\u30b0\u30ea\u30b2\u30fc\u30b7\u30e7\u30f3\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u6a5f\u80fd\u3067\u3059\u3002\n\u8907\u6570\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u66f8\u304d\u8fbc\u3080\u969b\u306b\u3001CMD53\u306e\u66f8\u304d\u8fbc\u307f\u30a2\u30c9\u30ec\u30b9\u306b\u3001\u30d1\u30b1\u30c3\u30c8\u6570\u306a\u3069\u306e\u60c5\u5831\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u6e21\u3057\u3066\u3001\u30c1\u30c3\u30d7\u5185\u306eHW\u30a2\u30b7\u30b9\u30c8\u6a5f\u80fd\u3092\u6709\u52b9\u306b\u4f7f\u3044\u307e\u3059\u3002\n\u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u306f\u6700\u59278\u500b\u307e\u305f\u306f16\u500b\u3092\u307e\u3068\u3081\u3066\u66f8\u304d\u8fbc\u3080\u3002\n\u30c9\u30e9\u30a4\u30d0\u3067\u306f\u3001\u306a\u308b\u3060\u3051\u30a2\u30b0\u30ea\u30b2\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u30d1\u30b1\u30c3\u30c8\u6570\u3092\u5897\u3084\u3057\u305f\u3044\u3002\u305d\u3046\u3059\u308b\u3068\u30ec\u30a4\u30c6\u30f3\u30b7\u306f\u72a0\u7272\u306b\u306a\u308b\u304c\u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u306f\u5897\u3048\u308b\u3002\nsdio.c\u306emwifiex_host_to_card_mp_aggr()\u306b\u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u8a18\u8ff0\u3057\u3066\u3042\u308b\u3002\n\n\n\u9001\u4fe1\u30ad\u30e5\u30fc\u306e\u6b8b\u308a\u30c7\u30fc\u30bf\u306e\u6709\u7121\u3067\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5909\u3048\u308b\u3002\u3001\n\u9001\u4fe1\u30ad\u30e5\u30fc\u306b\u6b8b\u308a\u30c7\u30fc\u30bf\u304c\u7121\u3044\u306a\u3089\u3001\u30c7\u30fc\u30bf\u3092\u3059\u3050\u9001\u4fe1\u3059\u308b\u3002\n\u9001\u4fe1\u30ad\u30e5\u30fc\u306b\u6b8b\u308a\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306a\u3089\u3001\u306a\u308b\u3079\u304f\u3001\u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u306b\u3059\u308b\u3002 \u30d0\u30c3\u30d5\u30a1\u304c\u8db3\u308a\u306a\u304f\u306a\u3063\u305f\u7b49\u306e\u4e8b\u8c61\u304c\u767a\u751f\u3057\u305f\u3089\u9001\u4fe1\u3092\u884c\u3046\u3002\n\n\n\n\n\u6e96\u5099\n\nLinux kernel 4.6.2\ndrivers/net/wireless/marvell/mwiflex\n\u9001\u4fe1\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3059\u308b\u3002\n\n\nmpa \u306e\u69cb\u9020\u4f53\n\n\u9001\u4fe1\u306empa\u69cb\u9020\u4f53\u3067\u3059\u3002 mpa\u306fmulti port aggregation\u306e\u4e8b\u3067\u3059\u3002\n\n\nsdio.h\n/* data structure for SDIO MPA TX */\nstruct mwifiex_sdio_mpa_tx {\n        /* multiport tx aggregation buffer pointer */\n        u8 *buf;     //\u30d0\u30c3\u30d5\u30a1  \n        u32 buf_len; //\u30d0\u30c3\u30d5\u30a1\u306e\u4f7f\u7528\u91cf\n        u32 pkt_cnt; //\u30d1\u30b1\u30c3\u30c8\u6570\n        u32 ports;   // mpa\u306eports \u4f7f\u7528\u4e88\u5b9a\u306ebitmap\n        u16 start_port; //mpa\u306eports \u958b\u59cb\u4f4d\u7f6e\n        u8 enabled;  // 1\u306a\u3089 multiport aggregation \u6709\u52b9\u30010\u306a\u3089\u7121\u52b9\n        u32 buf_size; // \u30d0\u30c3\u30d5\u30a1buf\u306e\u30b5\u30a4\u30ba\u3000\u30c1\u30c3\u30d7\u306b\u3088\u3063\u3066\u7570\u306a\u308b 87xx \u306f16KB\n        u32 pkt_aggr_limit; // \u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u3059\u308b\u6700\u5927\u30d1\u30b1\u30c3\u30c8\u6570 \u30c1\u30c3\u30d7\u306b\u3088\u3063\u3066\u7570\u306a\u308b 87xx\u306f8\u500b\n};\n\n\n\n\u3053\u306e\u69cb\u9020\u4f53\u304c sdio_card\u306e\u30e1\u30f3\u30d0\u306b\u3042\u308a card->mpa_tx \u306e\u3088\u3046\u306b\u53c2\u7167\u3067\u304d\u307e\u3059\u3002\n\n\nmpa\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\n\nmpa\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u898b\u308b\u30de\u30af\u30ed\u306a\u3069\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u9001\u4fe1\u306empa\u3092\u4f7f\u7528\u4e2d\u304b\u3069\u3046\u304b\u3002pkt_cnt\u304c\u6b63\u306a\u3089\u4f7f\u7528\u4e2d\u3067\u3059\u3002\n\n/* SDIO Tx aggregation in progress ? */\n#define MP_TX_AGGR_IN_PROGRESS(a) (a->mpa_tx.pkt_cnt > 0)\n\n\nmpat_tx.buf\u306b\u9577\u3055len\u306e\u7a7a\u304d\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\n\n/* SDIO Tx aggregation buffer room for next packet ? */\n#define MP_TX_AGGR_BUF_HAS_ROOM(a, len) ((a->mpa_tx.buf_len+len)    \\\n                        <= a->mpa_tx.buf_size)\n\n\npayload\u304b\u3089pky_len\u3060\u3051 mpat_tx.buf\u306b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3002 pkt_cnt, start_port, ports\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n\n/* Copy current packet (SDIO Tx aggregation buffer) to SDIO buffer */\n#define MP_TX_AGGR_BUF_PUT(a, payload, pkt_len, port) do {      \\\n    memmove(&a->mpa_tx.buf[a->mpa_tx.buf_len],          \\\n            payload, pkt_len);              \\\n    a->mpa_tx.buf_len += pkt_len;                   \\\n    if (!a->mpa_tx.pkt_cnt)                     \\\n        a->mpa_tx.start_port = port;                \\\n    if (a->mpa_tx.start_port <= port)               \\\n        a->mpa_tx.ports |= (1<<(a->mpa_tx.pkt_cnt));        \\\n    else                                \\\n        a->mpa_tx.ports |= (1<<(a->mpa_tx.pkt_cnt+1+        \\\n                        (a->max_ports - \\\n                        a->mp_end_port)));  \\\n    a->mpa_tx.pkt_cnt++;                        \\\n} while (0)\n\n\n\u30a2\u30b0\u30ea\u30b2\u30fc\u30b7\u30e7\u30f3\u6700\u5927\u500b\u6570\u306b\u9054\u3057\u305f\u304b\u3069\u3046\u304b\u78ba\u8a8d\n\n/* SDIO Tx aggregation limit ? */\n#define MP_TX_AGGR_PKT_LIMIT_REACHED(a)                 \\\n            (a->mpa_tx.pkt_cnt == a->mpa_tx.pkt_aggr_limit)\n\n\n\u30a2\u30b0\u30ea\u30b2\u30fc\u30b7\u30e7\u30f3\u306e\u30ab\u30a6\u30f3\u30bf\u3068\u4f7f\u7528\u91cf\u3092\u30ea\u30bb\u30c3\u30c8\n\n/* Reset SDIO Tx aggregation buffer parameters */\n#define MP_TX_AGGR_BUF_RESET(a) do {                    \\\n    a->mpa_tx.pkt_cnt = 0;                      \\\n    a->mpa_tx.buf_len = 0;                      \\\n    a->mpa_tx.ports = 0;                        \\\n    a->mpa_tx.start_port = 0;                   \\\n} while (0)\n\n\n\u9001\u4fe1\n\nmwifiex_host_to_card\n\nsdio.c\u3067\u5b9a\u7fa9\nDATA\u304bCMD\u304b\u3067port\u3092\u9078\u629e\n\u4e0a\u4f4d\u304b\u3089\u6765\u308b\u30c7\u30fc\u30bf\u3092SDIO\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u5358\u4f4d\u306b\u306a\u308b\u3088\u3046\u306b\u9577\u3055\u3092\u8abf\u6574\u3001(CMD53\u306e\u30de\u30eb\u30c1\u30d6\u30ed\u30c3\u30af\u8ee2\u9001\u306e\u305f\u3081)\nmwifiex_host_to_card_mp_aggr()\u3092\u547c\u3076\n\u30a8\u30e9\u30fc\u3067\u5b9f\u969b\u306e\u9001\u4fe1\u306f\u306a\u304b\u3063\u305f\u3089\u3001ports\u306e\u60c5\u5831\u304b\u3089card->curr_wr_port\u3068card->mp_wr_bitmap\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n\n\nmwifiex_host_to_card_mp_aggr\n\nsdio.c\u3067\u5b9a\u7fa9\ncard\u306eport\u304ccontrol,cmd \u3060\u3063\u305f\u308a\u3001 mpa\u304c\u7121\u52b9\u306a\u5834\u5408\u306f1\u500b\u5358\u4f4d\u3067\u9001\u4fe1\n\u30d1\u30b1\u30c3\u30c8\u304c\u7d9a\u3044\u3066\u3044\u308b\u306a\u3089\n\n\nMPA\u5b9f\u65bd\u4e2d\u306a\u3089\nMPA\u30d0\u30c3\u30d5\u30a1\u306b\u7a7a\u304d\u304c\u3042\u308b\u306a\u3089 f_precopy_cur_buf \u30921\u306b\u3059\u308b\n\u6b21\u306e\u30d1\u30b1\u30c3\u30c8\u5206\u306e\u7a7a\u304d\u304c\u7121\u3044\u306a\u3089\u3001f_send_aggr_buf = 1;\u306b\u3059\u308b\n\u5b9f\u65bd\u4e2d\u3067\u306a\u3044\u306a\u3089\nMPA\u30d0\u30c3\u30d5\u30a1\u306b\u7a7a\u304d\u304c\u3042\u3063\u3066\u304b\u3064\uff1f\uff1f\u306a\u3089 f_precopy_cur_buf = 1;\n\u305d\u3046\u3067\u306a\u3044\u306a\u3089 f_send_cur_buf = 1;\n\n\n\n    if (next_pkt_len) {\n        /* More pkt in TX queue */\n        mwifiex_dbg(adapter, INFO,\n                \"info: %s: more packets in queue.\\n\",\n                __func__);\n\n        if (MP_TX_AGGR_IN_PROGRESS(card)) {\n            if (MP_TX_AGGR_BUF_HAS_ROOM(card, pkt_len)) {\n                f_precopy_cur_buf = 1;\n\n                if (!(card->mp_wr_bitmap &\n                      (1 << card->curr_wr_port)) ||\n                    !MP_TX_AGGR_BUF_HAS_ROOM(\n                        card, pkt_len + next_pkt_len))\n                    f_send_aggr_buf = 1;\n            } else {\n                /* No room in Aggr buf, send it */\n                f_send_aggr_buf = 1;\n\n                if (!(card->mp_wr_bitmap &\n                      (1 << card->curr_wr_port)))\n                    f_send_cur_buf = 1;\n                else\n                    f_postcopy_cur_buf = 1;\n            }\n        } else {\n            if (MP_TX_AGGR_BUF_HAS_ROOM(card, pkt_len) &&\n                (card->mp_wr_bitmap & (1 << card->curr_wr_port)))\n                f_precopy_cur_buf = 1;\n            else\n                f_send_cur_buf = 1;\n        }\n    } else {\n\n\n\u30d1\u30b1\u30c3\u30c8\u304c\u7d9a\u3044\u3066\u306a\u304f\u3001\u6700\u5f8c\u306e\u30d1\u30b1\u30c3\u30c8\u306a\u3089\n\n\nMPA\u5b9f\u65bd\u4e2d\u306a\u3089\nf_send_aggr_buf = 1;\nMPA\u30d0\u30c3\u30d5\u30a1\u306b\u7a7a\u304d\u304c\u3042\u308b\u306a\u3089 f_precopy_cur_buf \u30921\u306b\u3059\u308b\n\u305d\u3046\u3067\u306a\u3044\u306a\u3089\u3001f_send_cur_buf = 1;\n\n\n\n    } else {\n        /* Last pkt in TX queue */\n        mwifiex_dbg(adapter, INFO,\n                \"info: %s: Last packet in Tx Queue.\\n\",\n                __func__);\n\n        if (MP_TX_AGGR_IN_PROGRESS(card)) {\n            /* some packs in Aggr buf already */\n            f_send_aggr_buf = 1;\n\n            if (MP_TX_AGGR_BUF_HAS_ROOM(card, pkt_len))\n                f_precopy_cur_buf = 1;\n            else\n                /* No room in Aggr buf, send it */\n                f_send_cur_buf = 1;\n        } else {\n            f_send_cur_buf = 1;\n        }\n    }\n\n\nf_precopy_cur_buf \u306a\u3089 MP_TX_AGGR_BUF_PUT()\u3067\u30b3\u30d4\u30fc\nf_send_aggr_buf \u306a\u3089\n\n\nmport \u3092\u8a2d\u5b9a\nmport\u306bmwifiex_write_data_to_card()\u3067\u66f8\u304d\u8fbc\u307f\nMP_TX_AGGR_BUF_RESET(card);\u3067mpa\u306e\u30ab\u30a6\u30f3\u30bf\u3092\u30ea\u30bb\u30c3\u30c8\n\n\nf_send_cur_buf\u306a\u3089 mwifiex_write_data_to_card()\u3067\u30b7\u30f3\u30b0\u30eb\u9001\u4fe1\nf_postcopy_cur_buf \u306a\u3089 MP_TX_AGGR_BUF_PUT()\u3067\u30b3\u30d4\u30fc\n\n\nmpa \u306e port\n\nSDIO CMD52\u306e\u30dd\u30fc\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u3001mpa\u306estart port\u3068mpa\u306eports\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u30c1\u30c3\u30d7\u306b\u4f1d\u3048\u308b\u3002\u3000\u30a2\u30c9\u30ec\u30b9\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u306e\u306f\u30c1\u30c3\u30d7\u306eHW\u30a2\u30b7\u30b9\u30c8\u3092\u4f7f\u3046\u305f\u3081\u3060\u3068\u8003\u3048\u3089\u308c\u308b\u3002\nmpa \u306e port\u306eHW\u4ed5\u69d8\u306f card->supports_sdio_new_mode \u306etrue/false\u3067\u7570\u306a\u308b\u3002\n\n\n\u3053\u308c\u306f 87xx\u306ffalse\u3067 88xx, 89xx\u3067true\u3068\u306a\u308b\n\n\nfalse\u306e\u5834\u5408 mport\u306e32bit\u306e\u5272\u308a\u5f53\u3066\n\n\n32 - 25 : adapter->ioport\n24 - 17 : SDIO_MPA_ADDR_BASE\n16 - 5  : mpa ports (1\u304b\u3089\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7)\n4 - 1   : mpa start_port\n\u8a2d\u5b9a\u4f8b\n\n\n\n            mport = (adapter->ioport | SDIO_MPA_ADDR_BASE |\n                 (card->mpa_tx.ports << 4)) +\n                 card->mpa_tx.start_port;\n\n\ntrue\u306e\u5834\u5408 mport\u306e32bit\u306e\u5272\u308a\u5f53\u3066\n\n\n32 - 25 : adapter->ioport\n24 - 17 : SDIO_MPA_ADDR_BASE\n16 - 5  : mpa ports (ports\u3092\uff12\u9032\u6570\u306b\u3057\u3066\u542b\u307e\u308c\u308b1\u306e\u500b\u6570 -1)\n4 - 1   : mpa start_port\n\u8a2d\u5b9a\u4f8b\n\n\n\n            u32 port_count;\n            int i;\n\n            for (i = 0, port_count = 0; i < card->max_ports; i++)\n                if (card->mpa_tx.ports & BIT(i))\n                    port_count++;\n\n            /* Writing data from \"start_port + 0\" to \"start_port +\n             * port_count -1\", so decrease the count by 1\n             */\n            port_count--;\n            mport = (adapter->ioport | SDIO_MPA_ADDR_BASE |\n                 (port_count << 8)) + card->mpa_tx.start_port;\n\n\n\nports \u306e\u5185\u5bb9\u306e\u9077\u79fb\n\n00000000 : \u6700\u521d\n00000001 : \uff11\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0\n00000011 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0\n00000111 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0\n00000000 : \u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u9001\u4fe1\n00001000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n00011000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n00111000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n01111000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n11111000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n11111001 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n11111011 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n00000000 : \u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u9001\u4fe1\n00000100 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n\n\nmpa\u306eports\u4f7f\u7528\u72b6\u6cc1\u306f\u5272\u308a\u8fbc\u307f\u6bce\u306bmwifiex_process_int_status()\u3067card->mp_wr_bitmap\u306b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3055\u308c\u308b\u3002\ncard->max_ports \u306f\u30c1\u30c3\u30d7\u306b\u3088\u3063\u3066\u7570\u306a\u308b 16\u304b32\u304b64\u3002\n\u30c7\u30fc\u30bf\u9001\u4fe1\u306eport\u306fmpar\u306eport\u3068\u901a\u5e38\u306e\uff11\u500b\u306e\u30c7\u30fc\u30bf\u901a\u4fe1\u306e\u30dd\u30fc\u30c8\u306e\uff12\u500b\u3042\u308b\n\n\n\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\n\n\u9001\u4fe1\u5b8c\u4e86\u306e\u51e6\u7406\n\u5272\u308a\u8fbc\u307f\u306e\u51e6\u7406\nports\u306e\u66f4\u65b0\u3068\u6b21\u306e\u9001\u4fe1\u306e\u5236\u5fa1\n\n\nMarvell Wi-Fi driver\u306emulti port aggregation \u306b\u3064\u3044\u3066Linux\u30ab\u30fc\u30cd\u30eb\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u6a5f\u80fd\u306f\u300111n \u306e frame aggregation \u3092 SDIO\u306e\u66f8\u304d\u8fbc\u307f\u624b\u9806\u3092\u5de5\u592b\u3057\u3066\u52b9\u7387\u7684\u306b\u884c\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\n# \u307e\u3068\u3081\n* multi port aggregation \u306f SDIO\u306eCMD53\u306e\uff11\u56de\u306e\u66f8\u304d\u8fbc\u307f\u6642\u306b\u8907\u6570\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u307e\u3068\u3081\u3066\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3067\u3001\u30c1\u30c3\u30d7\u306b\u307e\u3068\u3081\u3066\u8907\u6570\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u6e21\u3057\u3001\u30c1\u30c3\u30d7\u306711n\u306eMPDU\u30d5\u30ec\u30fc\u30e0\u30a2\u30b0\u30ea\u30b2\u30fc\u30b7\u30e7\u30f3\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u6a5f\u80fd\u3067\u3059\u3002\n* \u8907\u6570\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u66f8\u304d\u8fbc\u3080\u969b\u306b\u3001CMD53\u306e\u66f8\u304d\u8fbc\u307f\u30a2\u30c9\u30ec\u30b9\u306b\u3001\u30d1\u30b1\u30c3\u30c8\u6570\u306a\u3069\u306e\u60c5\u5831\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u6e21\u3057\u3066\u3001\u30c1\u30c3\u30d7\u5185\u306eHW\u30a2\u30b7\u30b9\u30c8\u6a5f\u80fd\u3092\u6709\u52b9\u306b\u4f7f\u3044\u307e\u3059\u3002\n* \u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u306f\u6700\u59278\u500b\u307e\u305f\u306f16\u500b\u3092\u307e\u3068\u3081\u3066\u66f8\u304d\u8fbc\u3080\u3002\n* \u30c9\u30e9\u30a4\u30d0\u3067\u306f\u3001\u306a\u308b\u3060\u3051\u30a2\u30b0\u30ea\u30b2\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u30d1\u30b1\u30c3\u30c8\u6570\u3092\u5897\u3084\u3057\u305f\u3044\u3002\u305d\u3046\u3059\u308b\u3068\u30ec\u30a4\u30c6\u30f3\u30b7\u306f\u72a0\u7272\u306b\u306a\u308b\u304c\u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u306f\u5897\u3048\u308b\u3002\n* sdio.c\u306emwifiex_host_to_card_mp_aggr()\u306b\u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u8a18\u8ff0\u3057\u3066\u3042\u308b\u3002\n * \u9001\u4fe1\u30ad\u30e5\u30fc\u306e\u6b8b\u308a\u30c7\u30fc\u30bf\u306e\u6709\u7121\u3067\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5909\u3048\u308b\u3002\u3001\n * \u9001\u4fe1\u30ad\u30e5\u30fc\u306b\u6b8b\u308a\u30c7\u30fc\u30bf\u304c\u7121\u3044\u306a\u3089\u3001\u30c7\u30fc\u30bf\u3092\u3059\u3050\u9001\u4fe1\u3059\u308b\u3002\n * \u9001\u4fe1\u30ad\u30e5\u30fc\u306b\u6b8b\u308a\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306a\u3089\u3001\u306a\u308b\u3079\u304f\u3001\u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u306b\u3059\u308b\u3002 \u30d0\u30c3\u30d5\u30a1\u304c\u8db3\u308a\u306a\u304f\u306a\u3063\u305f\u7b49\u306e\u4e8b\u8c61\u304c\u767a\u751f\u3057\u305f\u3089\u9001\u4fe1\u3092\u884c\u3046\u3002\n\n# \u6e96\u5099\n* Linux kernel 4.6.2\n* drivers/net/wireless/marvell/mwiflex\n* \u9001\u4fe1\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3059\u308b\u3002\n\n# mpa \u306e\u69cb\u9020\u4f53\n* \u9001\u4fe1\u306empa\u69cb\u9020\u4f53\u3067\u3059\u3002 mpa\u306fmulti port aggregation\u306e\u4e8b\u3067\u3059\u3002\n\n```c:sdio.h\n/* data structure for SDIO MPA TX */\nstruct mwifiex_sdio_mpa_tx {\n        /* multiport tx aggregation buffer pointer */\n        u8 *buf;     //\u30d0\u30c3\u30d5\u30a1  \n        u32 buf_len; //\u30d0\u30c3\u30d5\u30a1\u306e\u4f7f\u7528\u91cf\n        u32 pkt_cnt; //\u30d1\u30b1\u30c3\u30c8\u6570\n        u32 ports;   // mpa\u306eports \u4f7f\u7528\u4e88\u5b9a\u306ebitmap\n        u16 start_port; //mpa\u306eports \u958b\u59cb\u4f4d\u7f6e\n        u8 enabled;  // 1\u306a\u3089 multiport aggregation \u6709\u52b9\u30010\u306a\u3089\u7121\u52b9\n        u32 buf_size; // \u30d0\u30c3\u30d5\u30a1buf\u306e\u30b5\u30a4\u30ba\u3000\u30c1\u30c3\u30d7\u306b\u3088\u3063\u3066\u7570\u306a\u308b 87xx \u306f16KB\n        u32 pkt_aggr_limit; // \u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u3059\u308b\u6700\u5927\u30d1\u30b1\u30c3\u30c8\u6570 \u30c1\u30c3\u30d7\u306b\u3088\u3063\u3066\u7570\u306a\u308b 87xx\u306f8\u500b\n};\n```\n* \u3053\u306e\u69cb\u9020\u4f53\u304c sdio_card\u306e\u30e1\u30f3\u30d0\u306b\u3042\u308a card->mpa_tx \u306e\u3088\u3046\u306b\u53c2\u7167\u3067\u304d\u307e\u3059\u3002\n\n# mpa\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\n* mpa\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u898b\u308b\u30de\u30af\u30ed\u306a\u3069\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n* \u9001\u4fe1\u306empa\u3092\u4f7f\u7528\u4e2d\u304b\u3069\u3046\u304b\u3002pkt_cnt\u304c\u6b63\u306a\u3089\u4f7f\u7528\u4e2d\u3067\u3059\u3002\n\n```c\n/* SDIO Tx aggregation in progress ? */\n#define MP_TX_AGGR_IN_PROGRESS(a) (a->mpa_tx.pkt_cnt > 0)\n```\n\n* mpat_tx.buf\u306b\u9577\u3055len\u306e\u7a7a\u304d\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\n\n```c\n/* SDIO Tx aggregation buffer room for next packet ? */\n#define MP_TX_AGGR_BUF_HAS_ROOM(a, len) ((a->mpa_tx.buf_len+len)    \\\n                        <= a->mpa_tx.buf_size)\n```\n\n* payload\u304b\u3089pky_len\u3060\u3051 mpat_tx.buf\u306b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3002 pkt_cnt, start_port, ports\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n\n```c\n/* Copy current packet (SDIO Tx aggregation buffer) to SDIO buffer */\n#define MP_TX_AGGR_BUF_PUT(a, payload, pkt_len, port) do {      \\\n    memmove(&a->mpa_tx.buf[a->mpa_tx.buf_len],          \\\n            payload, pkt_len);              \\\n    a->mpa_tx.buf_len += pkt_len;                   \\\n    if (!a->mpa_tx.pkt_cnt)                     \\\n        a->mpa_tx.start_port = port;                \\\n    if (a->mpa_tx.start_port <= port)               \\\n        a->mpa_tx.ports |= (1<<(a->mpa_tx.pkt_cnt));        \\\n    else                                \\\n        a->mpa_tx.ports |= (1<<(a->mpa_tx.pkt_cnt+1+        \\\n                        (a->max_ports - \\\n                        a->mp_end_port)));  \\\n    a->mpa_tx.pkt_cnt++;                        \\\n} while (0)\n```\n\n* \u30a2\u30b0\u30ea\u30b2\u30fc\u30b7\u30e7\u30f3\u6700\u5927\u500b\u6570\u306b\u9054\u3057\u305f\u304b\u3069\u3046\u304b\u78ba\u8a8d\n\n```c\n/* SDIO Tx aggregation limit ? */\n#define MP_TX_AGGR_PKT_LIMIT_REACHED(a)                 \\\n            (a->mpa_tx.pkt_cnt == a->mpa_tx.pkt_aggr_limit)\n````\n\n* \u30a2\u30b0\u30ea\u30b2\u30fc\u30b7\u30e7\u30f3\u306e\u30ab\u30a6\u30f3\u30bf\u3068\u4f7f\u7528\u91cf\u3092\u30ea\u30bb\u30c3\u30c8\n\n```c\n/* Reset SDIO Tx aggregation buffer parameters */\n#define MP_TX_AGGR_BUF_RESET(a) do {                    \\\n    a->mpa_tx.pkt_cnt = 0;                      \\\n    a->mpa_tx.buf_len = 0;                      \\\n    a->mpa_tx.ports = 0;                        \\\n    a->mpa_tx.start_port = 0;                   \\\n} while (0)\n```\n\n\n#\u9001\u4fe1\n## mwifiex_host_to_card\n* sdio.c\u3067\u5b9a\u7fa9\n* DATA\u304bCMD\u304b\u3067port\u3092\u9078\u629e\n* \u4e0a\u4f4d\u304b\u3089\u6765\u308b\u30c7\u30fc\u30bf\u3092SDIO\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u5358\u4f4d\u306b\u306a\u308b\u3088\u3046\u306b\u9577\u3055\u3092\u8abf\u6574\u3001(CMD53\u306e\u30de\u30eb\u30c1\u30d6\u30ed\u30c3\u30af\u8ee2\u9001\u306e\u305f\u3081)\n* mwifiex_host_to_card_mp_aggr()\u3092\u547c\u3076\n* \u30a8\u30e9\u30fc\u3067\u5b9f\u969b\u306e\u9001\u4fe1\u306f\u306a\u304b\u3063\u305f\u3089\u3001ports\u306e\u60c5\u5831\u304b\u3089card->curr_wr_port\u3068card->mp_wr_bitmap\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n\n## mwifiex_host_to_card_mp_aggr\n* sdio.c\u3067\u5b9a\u7fa9\n* card\u306eport\u304ccontrol,cmd \u3060\u3063\u305f\u308a\u3001 mpa\u304c\u7121\u52b9\u306a\u5834\u5408\u306f1\u500b\u5358\u4f4d\u3067\u9001\u4fe1\n* \u30d1\u30b1\u30c3\u30c8\u304c\u7d9a\u3044\u3066\u3044\u308b\u306a\u3089\n * MPA\u5b9f\u65bd\u4e2d\u306a\u3089\n  * MPA\u30d0\u30c3\u30d5\u30a1\u306b\u7a7a\u304d\u304c\u3042\u308b\u306a\u3089 f_precopy_cur_buf \u30921\u306b\u3059\u308b\n  * \u6b21\u306e\u30d1\u30b1\u30c3\u30c8\u5206\u306e\u7a7a\u304d\u304c\u7121\u3044\u306a\u3089\u3001f_send_aggr_buf = 1;\u306b\u3059\u308b\n * \u5b9f\u65bd\u4e2d\u3067\u306a\u3044\u306a\u3089\n  * MPA\u30d0\u30c3\u30d5\u30a1\u306b\u7a7a\u304d\u304c\u3042\u3063\u3066\u304b\u3064\uff1f\uff1f\u306a\u3089 f_precopy_cur_buf = 1;\n  * \u305d\u3046\u3067\u306a\u3044\u306a\u3089 f_send_cur_buf = 1;\n\n```c\n    if (next_pkt_len) {\n        /* More pkt in TX queue */\n        mwifiex_dbg(adapter, INFO,\n                \"info: %s: more packets in queue.\\n\",\n                __func__);\n\n        if (MP_TX_AGGR_IN_PROGRESS(card)) {\n            if (MP_TX_AGGR_BUF_HAS_ROOM(card, pkt_len)) {\n                f_precopy_cur_buf = 1;\n\n                if (!(card->mp_wr_bitmap &\n                      (1 << card->curr_wr_port)) ||\n                    !MP_TX_AGGR_BUF_HAS_ROOM(\n                        card, pkt_len + next_pkt_len))\n                    f_send_aggr_buf = 1;\n            } else {\n                /* No room in Aggr buf, send it */\n                f_send_aggr_buf = 1;\n\n                if (!(card->mp_wr_bitmap &\n                      (1 << card->curr_wr_port)))\n                    f_send_cur_buf = 1;\n                else\n                    f_postcopy_cur_buf = 1;\n            }\n        } else {\n            if (MP_TX_AGGR_BUF_HAS_ROOM(card, pkt_len) &&\n                (card->mp_wr_bitmap & (1 << card->curr_wr_port)))\n                f_precopy_cur_buf = 1;\n            else\n                f_send_cur_buf = 1;\n        }\n    } else {\n```\n\n* \u30d1\u30b1\u30c3\u30c8\u304c\u7d9a\u3044\u3066\u306a\u304f\u3001\u6700\u5f8c\u306e\u30d1\u30b1\u30c3\u30c8\u306a\u3089\n * MPA\u5b9f\u65bd\u4e2d\u306a\u3089\n  * f_send_aggr_buf = 1;\n  * MPA\u30d0\u30c3\u30d5\u30a1\u306b\u7a7a\u304d\u304c\u3042\u308b\u306a\u3089 f_precopy_cur_buf \u30921\u306b\u3059\u308b\n  * \u305d\u3046\u3067\u306a\u3044\u306a\u3089\u3001f_send_cur_buf = 1;\n\n```c\n    } else {\n        /* Last pkt in TX queue */\n        mwifiex_dbg(adapter, INFO,\n                \"info: %s: Last packet in Tx Queue.\\n\",\n                __func__);\n\n        if (MP_TX_AGGR_IN_PROGRESS(card)) {\n            /* some packs in Aggr buf already */\n            f_send_aggr_buf = 1;\n\n            if (MP_TX_AGGR_BUF_HAS_ROOM(card, pkt_len))\n                f_precopy_cur_buf = 1;\n            else\n                /* No room in Aggr buf, send it */\n                f_send_cur_buf = 1;\n        } else {\n            f_send_cur_buf = 1;\n        }\n    }\n```\n\n\n* f_precopy_cur_buf \u306a\u3089 MP_TX_AGGR_BUF_PUT()\u3067\u30b3\u30d4\u30fc\n* f_send_aggr_buf \u306a\u3089\n * mport \u3092\u8a2d\u5b9a\n * mport\u306bmwifiex_write_data_to_card()\u3067\u66f8\u304d\u8fbc\u307f\n * MP_TX_AGGR_BUF_RESET(card);\u3067mpa\u306e\u30ab\u30a6\u30f3\u30bf\u3092\u30ea\u30bb\u30c3\u30c8\n* f_send_cur_buf\u306a\u3089 mwifiex_write_data_to_card()\u3067\u30b7\u30f3\u30b0\u30eb\u9001\u4fe1\n* f_postcopy_cur_buf \u306a\u3089 MP_TX_AGGR_BUF_PUT()\u3067\u30b3\u30d4\u30fc\n\n\n\n# mpa \u306e port\n* SDIO CMD52\u306e\u30dd\u30fc\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u3001mpa\u306estart port\u3068mpa\u306eports\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u30c1\u30c3\u30d7\u306b\u4f1d\u3048\u308b\u3002\u3000\u30a2\u30c9\u30ec\u30b9\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u306e\u306f\u30c1\u30c3\u30d7\u306eHW\u30a2\u30b7\u30b9\u30c8\u3092\u4f7f\u3046\u305f\u3081\u3060\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n* mpa \u306e port\u306eHW\u4ed5\u69d8\u306f card->supports_sdio_new_mode \u306etrue/false\u3067\u7570\u306a\u308b\u3002\n * \u3053\u308c\u306f 87xx\u306ffalse\u3067 88xx, 89xx\u3067true\u3068\u306a\u308b\n* false\u306e\u5834\u5408 mport\u306e32bit\u306e\u5272\u308a\u5f53\u3066\n * 32 - 25 : adapter->ioport\n * 24 - 17 : SDIO_MPA_ADDR_BASE\n * 16 - 5  : mpa ports (1\u304b\u3089\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7)\n * 4 - 1   : mpa start_port\n * \u8a2d\u5b9a\u4f8b\n\n```\n            mport = (adapter->ioport | SDIO_MPA_ADDR_BASE |\n                 (card->mpa_tx.ports << 4)) +\n                 card->mpa_tx.start_port;\n```\n\n* true\u306e\u5834\u5408 mport\u306e32bit\u306e\u5272\u308a\u5f53\u3066\n * 32 - 25 : adapter->ioport\n * 24 - 17 : SDIO_MPA_ADDR_BASE\n * 16 - 5  : mpa ports (ports\u3092\uff12\u9032\u6570\u306b\u3057\u3066\u542b\u307e\u308c\u308b1\u306e\u500b\u6570 -1)\n * 4 - 1   : mpa start_port\n * \u8a2d\u5b9a\u4f8b\n\n```c\n            u32 port_count;\n            int i;\n\n            for (i = 0, port_count = 0; i < card->max_ports; i++)\n                if (card->mpa_tx.ports & BIT(i))\n                    port_count++;\n\n            /* Writing data from \"start_port + 0\" to \"start_port +\n             * port_count -1\", so decrease the count by 1\n             */\n            port_count--;\n            mport = (adapter->ioport | SDIO_MPA_ADDR_BASE |\n                 (port_count << 8)) + card->mpa_tx.start_port;\n```\n\n* ports \u306e\u5185\u5bb9\u306e\u9077\u79fb\n * 00000000 : \u6700\u521d\n * 00000001 : \uff11\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0\n * 00000011 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0\n * 00000111 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0\n * 00000000 : \u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u9001\u4fe1\n * 00001000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n * 00011000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n * 00111000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n * 01111000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n * 11111000 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n * 11111001 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n * 11111011 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n * 00000000 : \u30a2\u30b0\u30ea\u30b2\u30fc\u30c8\u9001\u4fe1\n * 00000100 : 1\u30d1\u30b1\u30c3\u30c8\u8ffd\u52a0 \n\n* mpa\u306eports\u4f7f\u7528\u72b6\u6cc1\u306f\u5272\u308a\u8fbc\u307f\u6bce\u306bmwifiex_process_int_status()\u3067card->mp_wr_bitmap\u306b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3055\u308c\u308b\u3002\n* card->max_ports \u306f\u30c1\u30c3\u30d7\u306b\u3088\u3063\u3066\u7570\u306a\u308b 16\u304b32\u304b64\u3002\n\n* \u30c7\u30fc\u30bf\u9001\u4fe1\u306eport\u306fmpar\u306eport\u3068\u901a\u5e38\u306e\uff11\u500b\u306e\u30c7\u30fc\u30bf\u901a\u4fe1\u306e\u30dd\u30fc\u30c8\u306e\uff12\u500b\u3042\u308b\n\n# \u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\n* \u9001\u4fe1\u5b8c\u4e86\u306e\u51e6\u7406\n* \u5272\u308a\u8fbc\u307f\u306e\u51e6\u7406\n* ports\u306e\u66f4\u65b0\u3068\u6b21\u306e\u9001\u4fe1\u306e\u5236\u5fa1\n\n\n\n\n\n\n", "tags": ["driver", "Linux", "WiFi", "sdio"]}