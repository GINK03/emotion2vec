{"context": "\u524d: \u305d\u306e5\n\u6b21: \u305d\u306e7\n\n\u4eca\u56de\u3084\u308b\u3053\u3068\n\u8996\u70b9\u79fb\u52d5\u3092\u5b9f\u88c5\u3057\u3001\u3044\u308d\u3044\u308d\u306a\u89d2\u5ea6\u30fb\u5411\u304d\u304b\u3089\u30e2\u30c7\u30eb\u3092\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9: GitHub\n\n\u8996\u70b9\u79fb\u52d5\nMMD\u3067\u306f\u3001\u8996\u70b9\u6c34\u5e73\u79fb\u52d5(XY\u8ef8\u79fb\u52d5)\u30fb\u8996\u7dda\u306e\u5148\u3092\u5bfe\u8c61\u3068\u3057\u305fXY\u8ef8\u56de\u8ee2\u30fb\u30ba\u30fc\u30e0\u3092\u30de\u30a6\u30b9\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002\n\u5ea7\u6a19\u5909\u63db\u884c\u5217View\u306b\u79fb\u52d5\u30fb\u56de\u8ee2\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\nRawInput\n\u30de\u30a6\u30b9\u306b\u3088\u308b\u8996\u70b9\u79fb\u52d5\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u30de\u30a6\u30b9\u306e\u51e6\u7406\u3092\u884c\u308f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\nSlimDX\u306b\u306f\u3001RawInput\u3068\u547c\u3070\u308c\u308b\u3001\u30c7\u30d0\u30a4\u30b9(\u30ad\u30fc\u30dc\u30fc\u30c9\u3084\u30de\u30a6\u30b9\u306a\u3069)\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u304c\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u30de\u30a6\u30b9\u3068\u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u306e\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\nCore.cs\n//using SlimDX.Multimedia;\n//using Rwin = SlimDX.RawInput;\n\nprotected virtual void MouseInput(object sender, Rwin.MouseInputEventArgs e) { }\nprotected virtual void KeyInput(object sender, Rwin.KeyboardInputEventArgs e) { }\n\nprivate void InitializeInputDevice() {\n    Rwin.Device.RegisterDevice(UsagePage.Generic, UsageId.Mouse, Rwin.DeviceFlags.None);\n    Rwin.Device.MouseInput += MouseInput;\n    Rwin.Device.RegisterDevice(UsagePage.Generic, UsageId.Keyboard, Rwin.DeviceFlags.None);\n    Rwin.Device.KeyboardInput += KeyInput;\n}\n\n\n\nDrawPmdModel.cs\nprotected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {\n}\n\nprotected override void KeyInput(object sender, Rwin.KeyboardInputEventArgs e) {\n}\n\n\nRawInput\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5de6/\u4e2d(\u30db\u30a4\u30fc\u30eb)/\u53f3\u30dc\u30bf\u30f3\u306e\u62bc\u4e0b\u30fb\u62bc\u4e0a\u3001\u30db\u30a4\u30fc\u30eb\u306e\u52d5\u304d\u3001\u30de\u30a6\u30b9\u306e\u79fb\u52d5\u91cf\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3068\u304d\u306b\u4f55\u304b\u51e6\u7406\u3092\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\nDrawPmdModel.cs\nprotected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {\n    switch(e.ButtonFlags) {\n    case Rwin.MouseButtonFlags.LeftDown:\n        //\u51e6\u7406\n        break;\n    }\n}\n\n\n\u306a\u304a\u3001RawInput\u3067\u306f\u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b(\u62bc\u3057\u3063\u3071\u306a\u3057\u3067\u3042\u308b\u304b)\u3084\u3001\u30de\u30a6\u30b9\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u6c34\u5e73\u79fb\u52d5\u30fb\u30ba\u30fc\u30e0\nMMD\u3067\u306f\u3001\u4e2d\u30af\u30ea\u30c3\u30af\u3092\u3057\u306a\u304c\u3089\u30de\u30a6\u30b9\u3092\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u3001XY\u8ef8\u65b9\u5411\u306b\u79fb\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u306f\u30ab\u30e1\u30e9(\u8996\u70b9)\u3068\u5bfe\u8c61\u306e\u70b9(\u6ce8\u8996\u70b9)\u3092\u4e00\u7dd2\u306b\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\u3055\u3089\u306bMMD\u3067\u306f\u3001\u30db\u30a4\u30fc\u30eb\u3092\u56de\u8ee2\u3055\u305b\u308b\u3053\u3068\u3067\u30ba\u30fc\u30e0\u30a4\u30f3\u30fb\u30ba\u30fc\u30e0\u30a2\u30a6\u30c8\u304c\u3067\u304d\u307e\u3059\u3002\nRawInput\u3067\u306f\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf\u3092e.WheelData\u304b\u3089\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u56de\u8ee2\u3057\u3066\u306a\u3051\u308c\u30700, \u5965\u306b\u5411\u3051\u3066\u56de\u8ee2\u3055\u305b\u308b\u3068\u6b63\u306e\u5024\u3001\u624b\u524d\u306b\u5411\u3051\u3066\u56de\u8ee2\u3055\u305b\u308b\u3068\u8ca0\u306e\u5024\u3067\u3059\u3002\n\nDrawPmdModel.cs\nstruct MovingData {\n    public int posX;\n    public int posY;\n    public int posZ;\n    public void ResetPosXY() { posX = posY = 0; }\n    public void ResetPosZ() { posZ = 0; }\n    public void ResetAll() { ResetPosXY(); ResetPosZ(); }\n}\n\nbool isMiddleMoving;\nMovingData movingNow;\n\nprivate void UpdateCamera() {\n    var world = Matrix.Identity;\n\n    float div = 10;\n    var viewEye = new Vector3(0 , 10, -10);\n    var viewTarget = new Vector3(0, 10, 0);\n    var view = Matrix.Multiply(\n        Matrix.LookAtRH(\n            viewEye, viewTarget, new Vector3(0, 1, 0)\n        ),\n        Matrix.Translation(movingNow.posX / div, -movingNow.posY / div, movingNow.posZ * 0.2f)\n    );\n    //\u7701\u7565\n}\n\nprotected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {\n    switch(e.ButtonFlags) {\n        case Rwin.MouseButtonFlags.MiddleDown:\n            isMiddleMoving = true;\n            break;\n        case Rwin.MouseButtonFlags.MiddleUp:\n            isMiddleMoving = false;\n            break;\n    }\n\n    if(isMiddleMoving) {\n        movingNow.posX += e.X;\n        movingNow.posY += e.Y;\n    }\n    if(e.WheelDelta > 0) {\n        movingNow.posZ++;\n    } else if(e.WheelDelta < 0) {\n        movingNow.posZ--;\n    }\n}\n\n\nView\u884c\u5217\u306b\u79fb\u52d5\u91cf\u3092\u8868\u3059\u884c\u5217\u3092\u639b\u3051\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u5b9f\u73fe\u3055\u305b\u3066\u3044\u307e\u3059\u3002\nX, Y, Z\u8ef8\u65b9\u5411\u306b\u79fb\u52d5\u3059\u308b\u884c\u5217\u306fMatrix.Translation(x, y, z)\u3067\u751f\u6210\u3067\u304d\u307e\u3059\u3002\n\nXY\u8ef8\u56de\u8ee2\nMMD\u3067\u306f\u53f3\u30af\u30ea\u30c3\u30af\u3057\u306a\u304c\u3089\u52d5\u304b\u3059\u3053\u3068\u3067\u3001\u56de\u8ee2\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6c34\u5e73\u79fb\u52d5\u306e\u3068\u304d\u3068\u540c\u3058\u3088\u3046\u306b\u56de\u8ee2\u3092\u8868\u3059\u884c\u5217\u3092\u751f\u6210\u3057\u3001\u639b\u3051\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u884c\u5217\u306b\u306f\u4ea4\u63db\u6cd5\u5247\u304c\u9069\u7528\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u639b\u3051\u308b\u9806\u756a\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001MMD\u3067\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u56de\u8ee2\u30fb\u79fb\u52d5\u3092\u57fa\u6e96\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n(MMD\u306e\u8868\u793a\u306b\u8fd1\u4ed8\u3051\u308b\u305f\u3081\u3001\u8996\u91ce\u89d2\u309230\u5ea6\u306b\u3001\u521d\u671f\u306e\u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\u3092\u5909\u66f4\u3057\u3066\u304a\u308a\u307e\u3059)\n\nDrawPmdModel.cs\nstruct MovingData {\n    //\u7701\u7565\n    public int rotX;\n    public int rotY;\n    //\u7701\u7565\n    public void ResetRotXY() { rotX = rotY = 0; }\n    public void ResetAll() { ResetPosXY(); ResetPosZ(); ResetRotXY(); }\n}\n\nbool isRightMoving;\n\nprotected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {\n    switch(e.ButtonFlags) {\n        //\u7701\u7565\n        case Rwin.MouseButtonFlags.RightDown:\n            isRightMoving = true;\n            break;\n        case Rwin.MouseButtonFlags.RightUp:\n            isRightMoving = false;\n            break;\n    }\n\n    //\u7701\u7565\n    if(isRightMoving) {\n        movingNow.rotX += e.X;\n        movingNow.rotY += e.Y;\n    }\n}\n\nprivate void UpdateCamera() {\n    var world = Matrix.Identity;\n\n    float div = 10;\n    var viewEye = new Vector3(0 , 10, -45);\n    var viewTarget = new Vector3(0, 10, 0);\n    var view = Matrix.Multiply(\n        Matrix.Multiply(\n            Matrix.RotationX(-movingNow.rotY / 100.0f), \n            Matrix.RotationY(movingNow.rotX / 100.0f)\n        ), Matrix.Multiply(\n            Matrix.LookAtRH(viewEye, viewTarget, new Vector3(0, 1, 0)),\n            Matrix.Translation(movingNow.posX / div, -movingNow.posY / div, movingNow.posZ * 0.2f)\n        )\n    );\n\nvar projection = Matrix.PerspectiveFovRH(\n    30 * (float)Math.PI / 180, ClientSize.Width / ClientSize.Height, 0.1f, 1000\n);\n    //\u7701\u7565\n}\n\n\n\u30de\u30a6\u30b9\u3067\u3050\u308b\u3050\u308b\u52d5\u304b\u305b\u307e\u3059\u3002\n\n\n\u304a\u307e\u3051\n\u30e2\u30c7\u30eb\u3092\u63cf\u753b\u3057\u305f\u753b\u50cf\u3092\u3044\u304f\u3064\u304b\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4f55\u304b\u304a\u304b\u3057\u3044\u3053\u3068\u306b\u6c17\u304c\u4ed8\u3044\u305f\u3067\u3057\u3087\u3046\u304b\u3002\n\u30b9\u30ab\u30fc\u30c8\u306e\u4e0b\u306e\u90e8\u5206\u304c\u9ed2\u304b\u3063\u305f\u308a\u3001\u7fbd\u304c\u900f\u3051\u3066\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002(\u53f3\u304cMMD\u3067\u306e\u8868\u793a\u3002\u7fbd\u304c\u900f\u3051\u3066\u8155\u304c\u898b\u3048\u308b\u306e\u304c\u308f\u304b\u308b)\n\n\u30a2\u30eb\u30d5\u30a1\u30d6\u30ec\u30f3\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\nCore.cs\nprivate void InitializeBlend() {\n    var blend = new Dx11.BlendStateDescription() {\n        AlphaToCoverageEnable = false, IndependentBlendEnable = false\n    };\n    for(int i = 0;i < 8; i++) {\n        blend.RenderTargets[i] = new Dx11.RenderTargetBlendDescription();\n        blend.RenderTargets[i].BlendEnable = true;\n        blend.RenderTargets[i].BlendOperation = Dx11.BlendOperation.Add;\n        blend.RenderTargets[i].BlendOperationAlpha = Dx11.BlendOperation.Add;\n        blend.RenderTargets[i].DestinationBlend = Dx11.BlendOption.InverseSourceAlpha;\n        blend.RenderTargets[i].DestinationBlendAlpha = Dx11.BlendOption.Zero;\n        blend.RenderTargets[i].RenderTargetWriteMask = Dx11.ColorWriteMaskFlags.All;\n        blend.RenderTargets[i].SourceBlend = Dx11.BlendOption.SourceAlpha;\n        blend.RenderTargets[i].SourceBlendAlpha = Dx11.BlendOption.One;\n    }\n    device.ImmediateContext.OutputMerger.BlendFactor = new Color4(1, 1, 1, 1);\n    device.ImmediateContext.OutputMerger.BlendSampleMask = 0xffffff;\n    device.ImmediateContext.OutputMerger.BlendState = Dx11.BlendState.FromDescription(device, blend);\n}\n\n\n\n\n\u3055\u3044\u3054\u306b\n\u6b21\u56de\u306f\u5149\u3092\u6271\u3046\u4e88\u5b9a\u3067\u3059\u3002\n\u524d: [\u305d\u306e5](http://qiita.com/JI1LDG/items/457e76ae15da214c8004)\n\u6b21: [\u305d\u306e7](http://qiita.com/JI1LDG/items/ff6185456138bbd35289)\n\n##\u4eca\u56de\u3084\u308b\u3053\u3068\n\u8996\u70b9\u79fb\u52d5\u3092\u5b9f\u88c5\u3057\u3001\u3044\u308d\u3044\u308d\u306a\u89d2\u5ea6\u30fb\u5411\u304d\u304b\u3089\u30e2\u30c7\u30eb\u3092\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9: [GitHub](https://github.com/JI1LDG/ModelViewer/tree/a462720190a215e5433861d28baa25552131141f)\n\n##\u8996\u70b9\u79fb\u52d5\nMMD\u3067\u306f\u3001\u8996\u70b9\u6c34\u5e73\u79fb\u52d5(XY\u8ef8\u79fb\u52d5)\u30fb\u8996\u7dda\u306e\u5148\u3092\u5bfe\u8c61\u3068\u3057\u305fXY\u8ef8\u56de\u8ee2\u30fb\u30ba\u30fc\u30e0\u3092\u30de\u30a6\u30b9\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002\n\u5ea7\u6a19\u5909\u63db\u884c\u5217`View`\u306b\u79fb\u52d5\u30fb\u56de\u8ee2\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\n###RawInput\n\u30de\u30a6\u30b9\u306b\u3088\u308b\u8996\u70b9\u79fb\u52d5\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u30de\u30a6\u30b9\u306e\u51e6\u7406\u3092\u884c\u308f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\nSlimDX\u306b\u306f\u3001RawInput\u3068\u547c\u3070\u308c\u308b\u3001\u30c7\u30d0\u30a4\u30b9(\u30ad\u30fc\u30dc\u30fc\u30c9\u3084\u30de\u30a6\u30b9\u306a\u3069)\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u304c\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u30de\u30a6\u30b9\u3068\u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u306e\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```csharp:Core.cs\n//using SlimDX.Multimedia;\n//using Rwin = SlimDX.RawInput;\n\nprotected virtual void MouseInput(object sender, Rwin.MouseInputEventArgs e) { }\nprotected virtual void KeyInput(object sender, Rwin.KeyboardInputEventArgs e) { }\n\nprivate void InitializeInputDevice() {\n\tRwin.Device.RegisterDevice(UsagePage.Generic, UsageId.Mouse, Rwin.DeviceFlags.None);\n\tRwin.Device.MouseInput += MouseInput;\n\tRwin.Device.RegisterDevice(UsagePage.Generic, UsageId.Keyboard, Rwin.DeviceFlags.None);\n\tRwin.Device.KeyboardInput += KeyInput;\n}\n```\n\n```csharp:DrawPmdModel.cs\nprotected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {\n}\n\nprotected override void KeyInput(object sender, Rwin.KeyboardInputEventArgs e) {\n}\n```\n\nRawInput\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5de6/\u4e2d(\u30db\u30a4\u30fc\u30eb)/\u53f3\u30dc\u30bf\u30f3\u306e\u62bc\u4e0b\u30fb\u62bc\u4e0a\u3001\u30db\u30a4\u30fc\u30eb\u306e\u52d5\u304d\u3001\u30de\u30a6\u30b9\u306e\u79fb\u52d5\u91cf\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3068\u304d\u306b\u4f55\u304b\u51e6\u7406\u3092\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\n```csharp:DrawPmdModel.cs\nprotected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {\n\tswitch(e.ButtonFlags) {\n\tcase Rwin.MouseButtonFlags.LeftDown:\n\t\t//\u51e6\u7406\n\t\tbreak;\n\t}\n}\n```\n\n\u306a\u304a\u3001RawInput\u3067\u306f\u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b(\u62bc\u3057\u3063\u3071\u306a\u3057\u3067\u3042\u308b\u304b)\u3084\u3001\u30de\u30a6\u30b9\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n###\u6c34\u5e73\u79fb\u52d5\u30fb\u30ba\u30fc\u30e0\nMMD\u3067\u306f\u3001\u4e2d\u30af\u30ea\u30c3\u30af\u3092\u3057\u306a\u304c\u3089\u30de\u30a6\u30b9\u3092\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u3001XY\u8ef8\u65b9\u5411\u306b\u79fb\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u306f\u30ab\u30e1\u30e9(\u8996\u70b9)\u3068\u5bfe\u8c61\u306e\u70b9(\u6ce8\u8996\u70b9)\u3092\u4e00\u7dd2\u306b\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\u3055\u3089\u306bMMD\u3067\u306f\u3001\u30db\u30a4\u30fc\u30eb\u3092\u56de\u8ee2\u3055\u305b\u308b\u3053\u3068\u3067\u30ba\u30fc\u30e0\u30a4\u30f3\u30fb\u30ba\u30fc\u30e0\u30a2\u30a6\u30c8\u304c\u3067\u304d\u307e\u3059\u3002\nRawInput\u3067\u306f\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf\u3092`e.WheelData`\u304b\u3089\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u56de\u8ee2\u3057\u3066\u306a\u3051\u308c\u3070`0`, \u5965\u306b\u5411\u3051\u3066\u56de\u8ee2\u3055\u305b\u308b\u3068\u6b63\u306e\u5024\u3001\u624b\u524d\u306b\u5411\u3051\u3066\u56de\u8ee2\u3055\u305b\u308b\u3068\u8ca0\u306e\u5024\u3067\u3059\u3002\n\n```csharp:DrawPmdModel.cs\nstruct MovingData {\n\tpublic int posX;\n\tpublic int posY;\n\tpublic int posZ;\n\tpublic void ResetPosXY() { posX = posY = 0; }\n\tpublic void ResetPosZ() { posZ = 0; }\n\tpublic void ResetAll() { ResetPosXY(); ResetPosZ(); }\n}\n\nbool isMiddleMoving;\nMovingData movingNow;\n\nprivate void UpdateCamera() {\n\tvar world = Matrix.Identity;\n\n\tfloat div = 10;\n\tvar viewEye = new Vector3(0 , 10, -10);\n\tvar viewTarget = new Vector3(0, 10, 0);\n\tvar view = Matrix.Multiply(\n\t\tMatrix.LookAtRH(\n\t\t\tviewEye, viewTarget, new Vector3(0, 1, 0)\n\t\t),\n\t\tMatrix.Translation(movingNow.posX / div, -movingNow.posY / div, movingNow.posZ * 0.2f)\n\t);\n\t//\u7701\u7565\n}\n\nprotected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {\n\tswitch(e.ButtonFlags) {\n\t\tcase Rwin.MouseButtonFlags.MiddleDown:\n\t\t\tisMiddleMoving = true;\n\t\t\tbreak;\n\t\tcase Rwin.MouseButtonFlags.MiddleUp:\n\t\t\tisMiddleMoving = false;\n\t\t\tbreak;\n\t}\n\n\tif(isMiddleMoving) {\n\t\tmovingNow.posX += e.X;\n\t\tmovingNow.posY += e.Y;\n\t}\n\tif(e.WheelDelta > 0) {\n\t\tmovingNow.posZ++;\n\t} else if(e.WheelDelta < 0) {\n\t\tmovingNow.posZ--;\n\t}\n}\n```\n\nView\u884c\u5217\u306b\u79fb\u52d5\u91cf\u3092\u8868\u3059\u884c\u5217\u3092\u639b\u3051\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u5b9f\u73fe\u3055\u305b\u3066\u3044\u307e\u3059\u3002\nX, Y, Z\u8ef8\u65b9\u5411\u306b\u79fb\u52d5\u3059\u308b\u884c\u5217\u306f`Matrix.Translation(x, y, z)`\u3067\u751f\u6210\u3067\u304d\u307e\u3059\u3002\n\n###XY\u8ef8\u56de\u8ee2\nMMD\u3067\u306f\u53f3\u30af\u30ea\u30c3\u30af\u3057\u306a\u304c\u3089\u52d5\u304b\u3059\u3053\u3068\u3067\u3001\u56de\u8ee2\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6c34\u5e73\u79fb\u52d5\u306e\u3068\u304d\u3068\u540c\u3058\u3088\u3046\u306b\u56de\u8ee2\u3092\u8868\u3059\u884c\u5217\u3092\u751f\u6210\u3057\u3001\u639b\u3051\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u884c\u5217\u306b\u306f\u4ea4\u63db\u6cd5\u5247\u304c\u9069\u7528\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u639b\u3051\u308b\u9806\u756a\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001MMD\u3067\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u56de\u8ee2\u30fb\u79fb\u52d5\u3092\u57fa\u6e96\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n(MMD\u306e\u8868\u793a\u306b\u8fd1\u4ed8\u3051\u308b\u305f\u3081\u3001\u8996\u91ce\u89d2\u309230\u5ea6\u306b\u3001\u521d\u671f\u306e\u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\u3092\u5909\u66f4\u3057\u3066\u304a\u308a\u307e\u3059)\n\n```csharp:DrawPmdModel.cs\nstruct MovingData {\n\t//\u7701\u7565\n\tpublic int rotX;\n\tpublic int rotY;\n\t//\u7701\u7565\n\tpublic void ResetRotXY() { rotX = rotY = 0; }\n\tpublic void ResetAll() { ResetPosXY(); ResetPosZ(); ResetRotXY(); }\n}\n\nbool isRightMoving;\n\nprotected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {\n\tswitch(e.ButtonFlags) {\n\t\t//\u7701\u7565\n\t\tcase Rwin.MouseButtonFlags.RightDown:\n\t\t\tisRightMoving = true;\n\t\t\tbreak;\n\t\tcase Rwin.MouseButtonFlags.RightUp:\n\t\t\tisRightMoving = false;\n\t\t\tbreak;\n\t}\n\n\t//\u7701\u7565\n\tif(isRightMoving) {\n\t\tmovingNow.rotX += e.X;\n\t\tmovingNow.rotY += e.Y;\n\t}\n}\n\nprivate void UpdateCamera() {\n\tvar world = Matrix.Identity;\n\n\tfloat div = 10;\n\tvar viewEye = new Vector3(0 , 10, -45);\n\tvar viewTarget = new Vector3(0, 10, 0);\n\tvar view = Matrix.Multiply(\n\t\tMatrix.Multiply(\n\t\t\tMatrix.RotationX(-movingNow.rotY / 100.0f), \n\t\t\tMatrix.RotationY(movingNow.rotX / 100.0f)\n\t\t), Matrix.Multiply(\n\t\t\tMatrix.LookAtRH(viewEye, viewTarget, new Vector3(0, 1, 0)),\n\t\t\tMatrix.Translation(movingNow.posX / div, -movingNow.posY / div, movingNow.posZ * 0.2f)\n\t\t)\n\t);\n\nvar projection = Matrix.PerspectiveFovRH(\n\t30 * (float)Math.PI / 180, ClientSize.Width / ClientSize.Height, 0.1f, 1000\n);\n\t//\u7701\u7565\n}\n```\n\n\u30de\u30a6\u30b9\u3067\u3050\u308b\u3050\u308b\u52d5\u304b\u305b\u307e\u3059\u3002\n![cirno_trans_rotate.png](https://qiita-image-store.s3.amazonaws.com/0/135830/0bfe39bd-30f2-cc41-736c-ce3047654fd4.png)\n\n##\u304a\u307e\u3051\n\u30e2\u30c7\u30eb\u3092\u63cf\u753b\u3057\u305f\u753b\u50cf\u3092\u3044\u304f\u3064\u304b\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4f55\u304b\u304a\u304b\u3057\u3044\u3053\u3068\u306b\u6c17\u304c\u4ed8\u3044\u305f\u3067\u3057\u3087\u3046\u304b\u3002\n\u30b9\u30ab\u30fc\u30c8\u306e\u4e0b\u306e\u90e8\u5206\u304c\u9ed2\u304b\u3063\u305f\u308a\u3001\u7fbd\u304c\u900f\u3051\u3066\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002(\u53f3\u304cMMD\u3067\u306e\u8868\u793a\u3002\u7fbd\u304c\u900f\u3051\u3066\u8155\u304c\u898b\u3048\u308b\u306e\u304c\u308f\u304b\u308b)\n![cirno_no_alpha.png](https://qiita-image-store.s3.amazonaws.com/0/135830/734692f8-318a-c558-daca-8ba4db33abfe.png)![cirno_alphaed_mmd.png](https://qiita-image-store.s3.amazonaws.com/0/135830/101b4475-f6e7-c892-417e-5ba42fbd5c62.png)\n\n\u30a2\u30eb\u30d5\u30a1\u30d6\u30ec\u30f3\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\n```csharp:Core.cs\nprivate void InitializeBlend() {\n\tvar blend = new Dx11.BlendStateDescription() {\n\t\tAlphaToCoverageEnable = false, IndependentBlendEnable = false\n\t};\n\tfor(int i = 0;i < 8; i++) {\n\t\tblend.RenderTargets[i] = new Dx11.RenderTargetBlendDescription();\n\t\tblend.RenderTargets[i].BlendEnable = true;\n\t\tblend.RenderTargets[i].BlendOperation = Dx11.BlendOperation.Add;\n\t\tblend.RenderTargets[i].BlendOperationAlpha = Dx11.BlendOperation.Add;\n\t\tblend.RenderTargets[i].DestinationBlend = Dx11.BlendOption.InverseSourceAlpha;\n\t\tblend.RenderTargets[i].DestinationBlendAlpha = Dx11.BlendOption.Zero;\n\t\tblend.RenderTargets[i].RenderTargetWriteMask = Dx11.ColorWriteMaskFlags.All;\n\t\tblend.RenderTargets[i].SourceBlend = Dx11.BlendOption.SourceAlpha;\n\t\tblend.RenderTargets[i].SourceBlendAlpha = Dx11.BlendOption.One;\n\t}\n\tdevice.ImmediateContext.OutputMerger.BlendFactor = new Color4(1, 1, 1, 1);\n\tdevice.ImmediateContext.OutputMerger.BlendSampleMask = 0xffffff;\n\tdevice.ImmediateContext.OutputMerger.BlendState = Dx11.BlendState.FromDescription(device, blend);\n}\n```\n\n![cirno_alphaed_pmv.png](https://qiita-image-store.s3.amazonaws.com/0/135830/a7a6743f-9481-10a6-b58d-6e4eddca14e1.png)\n\n##\u3055\u3044\u3054\u306b\n\u6b21\u56de\u306f\u5149\u3092\u6271\u3046\u4e88\u5b9a\u3067\u3059\u3002\n", "tags": ["C#", "MMD", "SlimDX", "DirectX11"]}