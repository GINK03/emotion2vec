{"context": " More than 1 year has passed since last update.\n\n\u5019\u88dc\u8868\u793a\u306e\u88c5\u98fe\n\u79c1\u306f\u666e\u6bb5\u3001 skk-show-candidates-always-pop-to-buffer \u3092 t \u306b\u8a2d\u5b9a\u3057\u3066\u3001\u5909\u63db\u5019\u88dc\u3092\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306b\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u5909\u6570 skk-treat-candidate-appearance-function \u3092\u9069\u5207\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306e\u8868\u793a\u306b\u88c5\u98fe\u3092\u65bd\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u5909\u6570\u306f\u6587\u66f8\u30d0\u30c3\u30d5\u30a1\u306e\u25bc\u30e2\u30fc\u30c9\u306e\u8868\u793a\u306b\u3082\u5f71\u97ff\u304c\u53ca\u3073\u307e\u3059\u3002\n\u300c\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306e\u8868\u793a\u306b\u9650\u3063\u3066\u30d5\u30a9\u30f3\u30c8\u3092\u5927\u304d\u304f\u3057\u305f\u3044\u300d\u3068\u601d\u3063\u3066 skk-treat-candidate-appearance-function \u3092\u8a2d\u5b9a\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u6587\u66f8\u30d0\u30c3\u30d5\u30a1\u306e\u8868\u793a\uff08\u4e00\u767a\u76ee\u306e SPC \u6253\u9375\uff09\u306b\u307e\u3067\u5f71\u97ff\u3057\u3066\u3057\u307e\u3044\u3001\u305d\u308c\u306f\u4f55\u3068\u306a\u304f\u3067\u3059\u304c\u5fc3\u5730\u826f\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u500b\u5225\u306b\u5b9a\u7fa9\u3059\u308b\n\u25bc\u30e2\u30fc\u30c9\u306e\u8868\u793a\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3053\u3068\u306a\u304f\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306b\u9650\u3063\u3066\u8868\u793a\u3092\u88c5\u98fe\u3059\u308b\u306b\u306f\u3001\u95a2\u6570 skk-henkan-show-candidates-buffer \u306b\u30a2\u30c9\u30d0\u30a4\u30b9\u65ad\u7247\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002\n\u3064\u3044\u3067\u306b\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u8868\u793a\u3068 tooltip \u8868\u793a\u306b\u5bfe\u3059\u308b\u30a2\u30c9\u30d0\u30a4\u30b9\u65ad\u7247\u3082\u4f5c\u6210\u3057\u3066 skk-decor.el \u3068\u3057\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306e\u8868\u793a\u4f8b\u306f DDSKK 15.2 \u306b\u5411\u3051\u3066 \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n;;; skk-decor.el --- decorate the candidate for SKK -*- mode: emacs-lisp; coding: iso-2022-jp -*-\n\n;; Copyright (C) 2014 Tsuyoshi Kitamoto  <tsuyoshi.kitamoto@gmail.com>\n\n;; Author: 2014 Tsuyoshi Kitamoto  <tsuyoshi.kitamoto@gmail.com>\n;; Maintainer: SKK Development Team <skk@ring.gr.jp>\n;; Version: $Id: skk-decor.el $\n;; Keywords: japanese, mule, input method\n;; Last Modified: $Date: 2014/03/12 21:39:22 $\n\n;; This file is part of Daredevil SKK.\n\n;; Daredevil SKK is free software; you can redistribute it and/or\n;; modify it under the terms of the GNU General Public License as\n;; published by the Free Software Foundation; either version 2, or\n;; (at your option) any later version.\n\n;; Daredevil SKK is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n;; General Public License for more details.\n\n;; You should have received a copy of the GNU General Public License\n;; along with Daredevil SKK, see the file COPYING.  If not, write to\n;; the Free Software Foundation Inc., 51 Franklin Street, Fifth Floor,\n;; Boston, MA 02110-1301, USA.\n\n;;; Commentary:\n\n;; \u6587\u66f8\u30d0\u30c3\u30d5\u30a1\u306e\u25bc\u30e2\u30fc\u30c9\u306b\u304a\u3051\u308b\u5909\u63db\u5019\u88dc\u306e\u8868\u793a\u3092\u88c5\u98fe\u3059\u308b\u306b\u306f\n;; skk-henkan-face \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n;; \n;; \u30a4\u30f3\u30e9\u30a4\u30f3\u3001tooltip \u53c8\u306f \u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306e\u5909\u63db\u5019\u88dc\u306e\u8868\u793a\u3092\u88c5\u98fe\u3059\u308b\u306b\u306f\n;; skk-treat-candidate-appearance-function \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n;; \u3057\u304b\u3057\u3001skk-treat-candidate-appearance-function \u306e\u8a2d\u5b9a\u306f\u3001\n;;   o \u6587\u66f8\u30d0\u30c3\u30d5\u30a1\u306e\u25bc\u30e2\u30fc\u30c9\u306b\u304a\u3051\u308b\u5909\u63db\u5019\u88dc\u306e\u8868\u793a\u306b\u3082\u5f71\u97ff\n;;   o \u30a4\u30f3\u30e9\u30a4\u30f3\u3001tooltip \u53c8\u306f \u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306e\uff13\u3064\u306e\u5168\u3066\u306b\u5f71\u97ff\n;; \u3068\u3044\u3046\u52b9\u679c\u3082\u3042\u308a\u307e\u3059\u3002\n;;\n;; \u305d\u306e\u305f\u3081\u3001\u4f8b\u3048\u3070\u3001\u300c\u25bc\u30e2\u30fc\u30c9\u306b\u5f71\u97ff\u305b\u305a\u3001\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306b\u9650\u3063\u305f\u8868\u793a\u306e\u88c5\u98fe\u300d\n;; \u3092\u3057\u305f\u3044\u65b9\u306e\u305f\u3081\u306b advice \u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n;; \n;;  ~/.skk \u306b\u3066\n;;      (require skk-decor)\n;;  \u3068\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n;;; Face:\n\n(defface skk-decor-cand-face\n  '((((type tty))\n     (:foreground \"light sea green\" :background \"dark sea green\"))\n    (t\n     (:foreground \"white\" :background \"gray40\"\n      :box (:line-width 3 :color \"gray40\" :style released-button) )))\n  \"\u5019\u88dc\u306b\u9069\u7528\u3059\u308b FACE\"\n  :group 'skk-visual)\n\n(defface skk-decor-anno-face\n  '((((type tty))\n     (:foreground \"DarkSeaGreen\"))\n    (t\n     (:foreground \"yellow\" :height 120)))\n  \"\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u9069\u7528\u3059\u308b FACE\"\n  :group 'skk-visual)\n\n;;; Code:\n\n(defadvice skk-inline-show-vertically (before skk-decor (string face) activate)\n  \"skk-show-inline 'vertical \u306b\u9650\u3063\u3066\u30d5\u30a7\u30a4\u30b9\u3092\u4f5c\u7528\u3055\u305b\u308b.\"\n  (set-face-attribute 'skk-decor-cand-face nil ; \u30d5\u30a7\u30a4\u30b9\u306e\u5fae\u8abf\u6574\n              :height 180)         ;\n\n  (let* ((sp    (reverse (split-string string \"\\n\")))\n     (rest  (car sp))\n     (cands (reverse (cdr sp))))\n    (setq string\n          (concat (mapconcat\n               (lambda (x)\n                 (let* ((d (skk-treat-strip-note-from-word (substring x 2)))\n                    (c (car d))\n                    (n (cdr d)))\n                   (concat (substring x 0 2)\n                       (propertize c 'face 'skk-decor-cand-face)\n                       (when n\n                     (concat \" \" (propertize n 'face 'skk-decor-anno-face))\n                     ))))\n               cands \"\\n\")\n              \"\\n\" rest))))\n\n\n(defadvice skk-tooltip-show-at-point (before skk-decor (text situation) activate)\n  \"tooltip \u306b\u9650\u3063\u3066\u30d5\u30a7\u30a4\u30b9\u3092\u4f5c\u7528\u3055\u305b\u308b.\"\n  (when (null (eq situation 'annotation))\n    (set-face-attribute 'skk-decor-cand-face nil ; \u30d5\u30a7\u30a4\u30b9\u306e\u5fae\u8abf\u6574\n            :family \"\u82b1\u5712\u660e\u671dA\"  ;\n            :height 180)         ;\n    (set-face-attribute 'skk-decor-anno-face nil ;\n            :height 100)         ;\n\n    (let* ((sp    (reverse (split-string text \"\\n\")))\n       (rest  (car sp))\n       (cands (reverse (cdr sp))))\n      (setq text\n        (concat (mapconcat\n             (lambda (x)\n               (let* ((d (skk-treat-strip-note-from-word (substring x 2)))\n                  (c (car d))\n                  (n (cdr d)))\n             (concat (substring x 0 2)\n                 (propertize c 'face 'skk-decor-cand-face)\n                 (when n\n                   (concat \" \" (propertize n 'face 'skk-decor-anno-face))\n                   ))))\n             cands \"\\n\")\n            \"\\n\" rest)))))\n\n\n(defadvice skk-henkan-show-candidates-buffer (before skk-decor (str keys) activate)\n  \"\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306b\u9650\u3063\u3066\u30d5\u30a7\u30a4\u30b9\u3092\u4f5c\u7528\u3055\u305b\u308b.\"\n  (set-face-attribute 'skk-decor-cand-face nil ; \u30d5\u30a7\u30a4\u30b9\u306e\u5fae\u8abf\u6574\n              :height 250)         ;\n\n  (let* ((cand (reverse (split-string str \"  \" t)))\n     (rest (car cand))\n     (cand (reverse (cdr cand))))\n    (setq str\n      (concat (mapconcat\n           (lambda (x)\n             (let* ((d (skk-treat-strip-note-from-word (substring x 2)))\n                (c (car d))\n                (n (cdr d)))\n               (concat (substring x 0 2) ; `A:'\n                   (propertize c 'face 'skk-decor-cand-face)\n                   (when n\n                 (concat \" \" (propertize n 'face 'skk-decor-anno-face))\n                 ))))\n           cand \"  \")\n          \"  \" rest))))\n\n(provide 'skk-decor)\n\n;;; skk-decor.el ends here\n\n# \u5019\u88dc\u8868\u793a\u306e\u88c5\u98fe\n\n\u79c1\u306f\u666e\u6bb5\u3001 skk-show-candidates-always-pop-to-buffer \u3092 t \u306b\u8a2d\u5b9a\u3057\u3066\u3001\u5909\u63db\u5019\u88dc\u3092\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306b\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5909\u6570 skk-treat-candidate-appearance-function \u3092\u9069\u5207\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306e\u8868\u793a\u306b\u88c5\u98fe\u3092\u65bd\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u5909\u6570\u306f\u6587\u66f8\u30d0\u30c3\u30d5\u30a1\u306e\u25bc\u30e2\u30fc\u30c9\u306e\u8868\u793a\u306b\u3082\u5f71\u97ff\u304c\u53ca\u3073\u307e\u3059\u3002\n\u300c\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306e\u8868\u793a\u306b\u9650\u3063\u3066\u30d5\u30a9\u30f3\u30c8\u3092\u5927\u304d\u304f\u3057\u305f\u3044\u300d\u3068\u601d\u3063\u3066 skk-treat-candidate-appearance-function \u3092\u8a2d\u5b9a\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u6587\u66f8\u30d0\u30c3\u30d5\u30a1\u306e\u8868\u793a\uff08\u4e00\u767a\u76ee\u306e SPC \u6253\u9375\uff09\u306b\u307e\u3067\u5f71\u97ff\u3057\u3066\u3057\u307e\u3044\u3001\u305d\u308c\u306f\u4f55\u3068\u306a\u304f\u3067\u3059\u304c\u5fc3\u5730\u826f\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n# \u500b\u5225\u306b\u5b9a\u7fa9\u3059\u308b\n\n\u25bc\u30e2\u30fc\u30c9\u306e\u8868\u793a\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3053\u3068\u306a\u304f\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306b\u9650\u3063\u3066\u8868\u793a\u3092\u88c5\u98fe\u3059\u308b\u306b\u306f\u3001\u95a2\u6570 skk-henkan-show-candidates-buffer \u306b\u30a2\u30c9\u30d0\u30a4\u30b9\u65ad\u7247\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002\n\u3064\u3044\u3067\u306b\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u8868\u793a\u3068 tooltip \u8868\u793a\u306b\u5bfe\u3059\u308b\u30a2\u30c9\u30d0\u30a4\u30b9\u65ad\u7247\u3082\u4f5c\u6210\u3057\u3066 skk-decor.el \u3068\u3057\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306e\u8868\u793a\u4f8b\u306f [DDSKK 15.2 \u306b\u5411\u3051\u3066](http://qiita.com/kitamoto/items/de10411f01fa69c325f0 \"DDSKK 15.2 \u306b\u5411\u3051\u3066\") \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n```el\n;;; skk-decor.el --- decorate the candidate for SKK -*- mode: emacs-lisp; coding: iso-2022-jp -*-\n\n;; Copyright (C) 2014 Tsuyoshi Kitamoto  <tsuyoshi.kitamoto@gmail.com>\n\n;; Author: 2014 Tsuyoshi Kitamoto  <tsuyoshi.kitamoto@gmail.com>\n;; Maintainer: SKK Development Team <skk@ring.gr.jp>\n;; Version: $Id: skk-decor.el $\n;; Keywords: japanese, mule, input method\n;; Last Modified: $Date: 2014/03/12 21:39:22 $\n\n;; This file is part of Daredevil SKK.\n\n;; Daredevil SKK is free software; you can redistribute it and/or\n;; modify it under the terms of the GNU General Public License as\n;; published by the Free Software Foundation; either version 2, or\n;; (at your option) any later version.\n\n;; Daredevil SKK is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n;; General Public License for more details.\n\n;; You should have received a copy of the GNU General Public License\n;; along with Daredevil SKK, see the file COPYING.  If not, write to\n;; the Free Software Foundation Inc., 51 Franklin Street, Fifth Floor,\n;; Boston, MA 02110-1301, USA.\n\n;;; Commentary:\n\n;; \u6587\u66f8\u30d0\u30c3\u30d5\u30a1\u306e\u25bc\u30e2\u30fc\u30c9\u306b\u304a\u3051\u308b\u5909\u63db\u5019\u88dc\u306e\u8868\u793a\u3092\u88c5\u98fe\u3059\u308b\u306b\u306f\n;; skk-henkan-face \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n;; \n;; \u30a4\u30f3\u30e9\u30a4\u30f3\u3001tooltip \u53c8\u306f \u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306e\u5909\u63db\u5019\u88dc\u306e\u8868\u793a\u3092\u88c5\u98fe\u3059\u308b\u306b\u306f\n;; skk-treat-candidate-appearance-function \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n;; \u3057\u304b\u3057\u3001skk-treat-candidate-appearance-function \u306e\u8a2d\u5b9a\u306f\u3001\n;;   o \u6587\u66f8\u30d0\u30c3\u30d5\u30a1\u306e\u25bc\u30e2\u30fc\u30c9\u306b\u304a\u3051\u308b\u5909\u63db\u5019\u88dc\u306e\u8868\u793a\u306b\u3082\u5f71\u97ff\n;;   o \u30a4\u30f3\u30e9\u30a4\u30f3\u3001tooltip \u53c8\u306f \u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306e\uff13\u3064\u306e\u5168\u3066\u306b\u5f71\u97ff\n;; \u3068\u3044\u3046\u52b9\u679c\u3082\u3042\u308a\u307e\u3059\u3002\n;;\n;; \u305d\u306e\u305f\u3081\u3001\u4f8b\u3048\u3070\u3001\u300c\u25bc\u30e2\u30fc\u30c9\u306b\u5f71\u97ff\u305b\u305a\u3001\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306b\u9650\u3063\u305f\u8868\u793a\u306e\u88c5\u98fe\u300d\n;; \u3092\u3057\u305f\u3044\u65b9\u306e\u305f\u3081\u306b advice \u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n;; \n;;  ~/.skk \u306b\u3066\n;;      (require skk-decor)\n;;  \u3068\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n;;; Face:\n\n(defface skk-decor-cand-face\n  '((((type tty))\n     (:foreground \"light sea green\" :background \"dark sea green\"))\n    (t\n     (:foreground \"white\" :background \"gray40\"\n      :box (:line-width 3 :color \"gray40\" :style released-button) )))\n  \"\u5019\u88dc\u306b\u9069\u7528\u3059\u308b FACE\"\n  :group 'skk-visual)\n\n(defface skk-decor-anno-face\n  '((((type tty))\n     (:foreground \"DarkSeaGreen\"))\n    (t\n     (:foreground \"yellow\" :height 120)))\n  \"\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u9069\u7528\u3059\u308b FACE\"\n  :group 'skk-visual)\n\n;;; Code:\n\n(defadvice skk-inline-show-vertically (before skk-decor (string face) activate)\n  \"skk-show-inline 'vertical \u306b\u9650\u3063\u3066\u30d5\u30a7\u30a4\u30b9\u3092\u4f5c\u7528\u3055\u305b\u308b.\"\n  (set-face-attribute 'skk-decor-cand-face nil ; \u30d5\u30a7\u30a4\u30b9\u306e\u5fae\u8abf\u6574\n\t\t      :height 180)\t       ;\n\n  (let* ((sp    (reverse (split-string string \"\\n\")))\n\t (rest  (car sp))\n\t (cands (reverse (cdr sp))))\n    (setq string\n    \t  (concat (mapconcat\n    \t\t   (lambda (x)\n    \t\t     (let* ((d (skk-treat-strip-note-from-word (substring x 2)))\n    \t\t\t    (c (car d))\n    \t\t\t    (n (cdr d)))\n    \t\t       (concat (substring x 0 2)\n    \t\t\t       (propertize c 'face 'skk-decor-cand-face)\n    \t\t\t       (when n\n    \t\t\t\t (concat \" \" (propertize n 'face 'skk-decor-anno-face))\n    \t\t\t\t ))))\n    \t\t   cands \"\\n\")\n    \t\t  \"\\n\" rest))))\n\n\n(defadvice skk-tooltip-show-at-point (before skk-decor (text situation) activate)\n  \"tooltip \u306b\u9650\u3063\u3066\u30d5\u30a7\u30a4\u30b9\u3092\u4f5c\u7528\u3055\u305b\u308b.\"\n  (when (null (eq situation 'annotation))\n    (set-face-attribute 'skk-decor-cand-face nil ; \u30d5\u30a7\u30a4\u30b9\u306e\u5fae\u8abf\u6574\n\t\t\t:family \"\u82b1\u5712\u660e\u671dA\"\t ;\n\t\t\t:height 180)\t\t ;\n    (set-face-attribute 'skk-decor-anno-face nil ;\n\t\t\t:height 100)\t\t ;\n\n    (let* ((sp    (reverse (split-string text \"\\n\")))\n\t   (rest  (car sp))\n\t   (cands (reverse (cdr sp))))\n      (setq text\n\t    (concat (mapconcat\n\t\t     (lambda (x)\n\t\t       (let* ((d (skk-treat-strip-note-from-word (substring x 2)))\n\t\t\t      (c (car d))\n\t\t\t      (n (cdr d)))\n\t\t\t (concat (substring x 0 2)\n\t\t\t\t (propertize c 'face 'skk-decor-cand-face)\n\t\t\t\t (when n\n\t\t\t\t   (concat \" \" (propertize n 'face 'skk-decor-anno-face))\n\t\t\t\t   ))))\n\t\t     cands \"\\n\")\n\t\t    \"\\n\" rest)))))\n\n\n(defadvice skk-henkan-show-candidates-buffer (before skk-decor (str keys) activate)\n  \"\u5019\u88dc\u30d0\u30c3\u30d5\u30a1\u306b\u9650\u3063\u3066\u30d5\u30a7\u30a4\u30b9\u3092\u4f5c\u7528\u3055\u305b\u308b.\"\n  (set-face-attribute 'skk-decor-cand-face nil ; \u30d5\u30a7\u30a4\u30b9\u306e\u5fae\u8abf\u6574\n\t\t      :height 250)\t       ;\n\n  (let* ((cand (reverse (split-string str \"  \" t)))\n\t (rest (car cand))\n\t (cand (reverse (cdr cand))))\n    (setq str\n\t  (concat (mapconcat\n\t\t   (lambda (x)\n\t\t     (let* ((d (skk-treat-strip-note-from-word (substring x 2)))\n\t\t\t    (c (car d))\n\t\t\t    (n (cdr d)))\n\t\t       (concat (substring x 0 2) ; `A:'\n\t\t\t       (propertize c 'face 'skk-decor-cand-face)\n\t\t\t       (when n\n\t\t\t\t (concat \" \" (propertize n 'face 'skk-decor-anno-face))\n\t\t\t\t ))))\n\t\t   cand \"  \")\n\t\t  \"  \" rest))))\n\n(provide 'skk-decor)\n\n;;; skk-decor.el ends here\n```", "tags": ["Emacs", "SKK"]}