{"context": "\u7c21\u5358\u306a\u8a2d\u5b9a\u3067 ROS \u3068 MQTT \u3092\u9023\u643a\u3067\u304d\u308b mqtt_bridge \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\nhttp://wiki.ros.org/mqtt_bridge\n\n\n\u4e3b\u306a\u6a5f\u80fd\n\nROS Message \u4e92\u63db\u306e MQTT <--> ROS \u9023\u643a\nMQTT \u306b\u304a\u3051\u308b TLS \u6a5f\u80fd\n\u30ab\u30b9\u30bf\u30e0 Bridge \u306e\u4f5c\u6210\u6a5f\u80fd\njson \u307e\u305f\u306f msgpack \u30d9\u30fc\u30b9\u306e MQTT \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3002\u30ab\u30b9\u30bf\u30e0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3082\u6307\u5b9a\u53ef\u80fd\u3002\nMQTT \u306e\u30c8\u30d4\u30c3\u30af\u30d1\u30b9\u3078\u306e\u52d5\u7684\u306a prefix \u8a2d\u5b9a\n\n\n\u6e96\u5099\nMQTT Broker \u306e mosquitto \u3068\u305d\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n# apt-get install mosquitto mosquitto-clients\n\nmqtt_bridge \u306f ROS \u306e Package Directory \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001 git clone \u3057\u3066 catkin_make, rodsep install \u3057\u3066\u304f\u3060\u3055\u3044\u3002\n$ cd ~/catkin_ws/src\n$ git clone https://github.com/groove-x/mqtt_bridge\n$ cd ~/catkin_ws\n$ catkin_make --pkg mqtt_bridge\n$ rosdep install mqtt_bridge\n\n\n\u30c7\u30e2\nROS \u30c8\u30d4\u30c3\u30af\u3067\u914d\u4fe1\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 MQTT \u3078\u8ee2\u9001\u3057\u3001\u305d\u308c\u3092\u53d7\u4fe1\u3057\u3066\u3001\u6539\u3081\u3066 ROS \u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u914d\u4fe1\u3057\u306a\u304a\u3057\u307e\u3059\u3002\n\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\nmqtt:\n  client:\n    protocol: 4      # MQTTv311\n  connection:\n    host: localhost\n    port: 1883\n    keepalive: 60\n  private_path: device/001\nselializer: msgpack:dumps\ndeselializer: msgpack:loads\nbridge:\n  # ping pong\n  - factory: mqtt_bridge.bridge:RosToMqttBridge\n    msg_type: std_msgs.msg:Bool\n    topic_from: /ping\n    topic_to: ping\n  - factory: mqtt_bridge.bridge:MqttToRosBridge\n    msg_type: std_msgs.msg:Bool\n    topic_from: ping\n    topic_to: /pong\n  # echo back\n  - factory: mqtt_bridge.bridge:RosToMqttBridge\n    msg_type: std_msgs.msg:String\n    topic_from: /echo\n    topic_to: echo\n  - factory: mqtt_bridge.bridge:MqttToRosBridge\n    msg_type: std_msgs.msg:String\n    topic_from: echo\n    topic_to: /back\n  # private path\n  - factory: mqtt_bridge.bridge:RosToMqttBridge\n    msg_type: std_msgs.msg:String\n    topic_from: /private/echo\n    topic_to: ~/echo\n  - factory: mqtt_bridge.bridge:MqttToRosBridge\n    msg_type: std_msgs.msg:String\n    topic_from: ~/echo\n    topic_to: /private/back\n\nlaunch \u30d5\u30a1\u30a4\u30eb\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n<launch>\n  <arg name=\"use_tls\" default=\"false\" />\n  <node name=\"mqtt_bridge\" pkg=\"mqtt_bridge\" type=\"mqtt_bridge_node.py\" output=\"screen\">\n    <rosparam file=\"$(find mqtt_bridge)/config/demo_params.yaml\" command=\"load\" />\n    <rosparam if=\"$(arg use_tls)\" file=\"$(find mqtt_bridge)/config/tls_params.yaml\" command=\"load\" ns=\"mqtt\" />\n  </node>\n</launch>\n\n\n\u30c7\u30e2\u30ce\u30fc\u30c9\u3092\u5b9f\u884c\n\u30c7\u30e2\u30ce\u30fc\u30c9\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n$ roslaunch mqtt_bridge demo.launch\n\n\n\u52d5\u4f5c\u78ba\u8a8d\nROS \u306e /echo \u30c8\u30d4\u30c3\u30af\u306b \"hello\" \u3092 publish \u3059\u308b\u3068\u3001\n$ rostopic pub /echo std_msgs/String \"data: 'hello'\"\n\nMQTT \u306e echo \u30c8\u30d4\u30c3\u30af\u306b \"hello\" \u304c\u8ee2\u9001\u3055\u308c\u3001\n$ mosquitto_sub -t 'echo'\n{\"data\": \"hello\"}\n\n\u305d\u308c\u304c\u3055\u3089\u306b ROS \u306e /back \u30c8\u30d4\u30c3\u30af\u306b\u914d\u4fe1\u3055\u308c\u307e\u3059\u3002\n$ rostopic echo /back\ndata: hello\n---\n\nYou can also see MQTT messages using mosquitto_sub\n\n\u307e\u3068\u3081\nROS, MQTT \u9593\u3092\u624b\u8efd\u306b\u30d6\u30ea\u30c3\u30b8\u3059\u308b\u305f\u3081\u306e mqtt_bridge \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u8a73\u3057\u304f\u306f mqtt_bridge \u306e README \u3092\u3054\u78ba\u8a8d\u4e0b\u3055\u3044\u3002\u306a\u304a\u3001ROS, MQTT \u9593\u3092\u30d6\u30ea\u30c3\u30b8\u3059\u308b\u306b\u3042\u305f\u3063\u3066 rosbridge_library \u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b ROS Message \u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u5229\u7528\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u7c21\u5358\u306a\u8a2d\u5b9a\u3067 ROS \u3068 MQTT \u3092\u9023\u643a\u3067\u304d\u308b mqtt_bridge \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n* http://wiki.ros.org/mqtt_bridge\n\n### \u4e3b\u306a\u6a5f\u80fd\n\n* ROS Message \u4e92\u63db\u306e MQTT <--> ROS \u9023\u643a\n* MQTT \u306b\u304a\u3051\u308b TLS \u6a5f\u80fd\n* \u30ab\u30b9\u30bf\u30e0 Bridge \u306e\u4f5c\u6210\u6a5f\u80fd\n* json \u307e\u305f\u306f msgpack \u30d9\u30fc\u30b9\u306e MQTT \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3002\u30ab\u30b9\u30bf\u30e0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3082\u6307\u5b9a\u53ef\u80fd\u3002\n* MQTT \u306e\u30c8\u30d4\u30c3\u30af\u30d1\u30b9\u3078\u306e\u52d5\u7684\u306a prefix \u8a2d\u5b9a\n\n## \u6e96\u5099\n\nMQTT Broker \u306e mosquitto \u3068\u305d\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n\n```\n# apt-get install mosquitto mosquitto-clients\n```\n\nmqtt_bridge \u306f ROS \u306e Package Directory \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001 git clone \u3057\u3066 catkin_make, rodsep install \u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```\n$ cd ~/catkin_ws/src\n$ git clone https://github.com/groove-x/mqtt_bridge\n$ cd ~/catkin_ws\n$ catkin_make --pkg mqtt_bridge\n$ rosdep install mqtt_bridge\n```\n\n## \u30c7\u30e2\n\nROS \u30c8\u30d4\u30c3\u30af\u3067\u914d\u4fe1\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 MQTT \u3078\u8ee2\u9001\u3057\u3001\u305d\u308c\u3092\u53d7\u4fe1\u3057\u3066\u3001\u6539\u3081\u3066 ROS \u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u914d\u4fe1\u3057\u306a\u304a\u3057\u307e\u3059\u3002\n\n### \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\n\n```\nmqtt:\n  client:\n    protocol: 4      # MQTTv311\n  connection:\n    host: localhost\n    port: 1883\n    keepalive: 60\n  private_path: device/001\nselializer: msgpack:dumps\ndeselializer: msgpack:loads\nbridge:\n  # ping pong\n  - factory: mqtt_bridge.bridge:RosToMqttBridge\n    msg_type: std_msgs.msg:Bool\n    topic_from: /ping\n    topic_to: ping\n  - factory: mqtt_bridge.bridge:MqttToRosBridge\n    msg_type: std_msgs.msg:Bool\n    topic_from: ping\n    topic_to: /pong\n  # echo back\n  - factory: mqtt_bridge.bridge:RosToMqttBridge\n    msg_type: std_msgs.msg:String\n    topic_from: /echo\n    topic_to: echo\n  - factory: mqtt_bridge.bridge:MqttToRosBridge\n    msg_type: std_msgs.msg:String\n    topic_from: echo\n    topic_to: /back\n  # private path\n  - factory: mqtt_bridge.bridge:RosToMqttBridge\n    msg_type: std_msgs.msg:String\n    topic_from: /private/echo\n    topic_to: ~/echo\n  - factory: mqtt_bridge.bridge:MqttToRosBridge\n    msg_type: std_msgs.msg:String\n    topic_from: ~/echo\n    topic_to: /private/back\n```\n\nlaunch \u30d5\u30a1\u30a4\u30eb\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```\n<launch>\n  <arg name=\"use_tls\" default=\"false\" />\n  <node name=\"mqtt_bridge\" pkg=\"mqtt_bridge\" type=\"mqtt_bridge_node.py\" output=\"screen\">\n    <rosparam file=\"$(find mqtt_bridge)/config/demo_params.yaml\" command=\"load\" />\n    <rosparam if=\"$(arg use_tls)\" file=\"$(find mqtt_bridge)/config/tls_params.yaml\" command=\"load\" ns=\"mqtt\" />\n  </node>\n</launch>\n```\n\n\n### \u30c7\u30e2\u30ce\u30fc\u30c9\u3092\u5b9f\u884c\n\n\u30c7\u30e2\u30ce\u30fc\u30c9\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n``` bash\n$ roslaunch mqtt_bridge demo.launch\n```\n\n### \u52d5\u4f5c\u78ba\u8a8d\n\nROS \u306e `/echo` \u30c8\u30d4\u30c3\u30af\u306b \"hello\" \u3092 publish \u3059\u308b\u3068\u3001\n\n```\n$ rostopic pub /echo std_msgs/String \"data: 'hello'\"\n```\n\nMQTT \u306e `echo` \u30c8\u30d4\u30c3\u30af\u306b \"hello\" \u304c\u8ee2\u9001\u3055\u308c\u3001\n\n```\n$ mosquitto_sub -t 'echo'\n{\"data\": \"hello\"}\n```\n\n\u305d\u308c\u304c\u3055\u3089\u306b ROS \u306e `/back` \u30c8\u30d4\u30c3\u30af\u306b\u914d\u4fe1\u3055\u308c\u307e\u3059\u3002\n\n```\n$ rostopic echo /back\ndata: hello\n---\n```\n\nYou can also see MQTT messages using `mosquitto_sub`\n\n## \u307e\u3068\u3081\n\nROS, MQTT \u9593\u3092\u624b\u8efd\u306b\u30d6\u30ea\u30c3\u30b8\u3059\u308b\u305f\u3081\u306e mqtt_bridge \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u8a73\u3057\u304f\u306f mqtt_bridge \u306e README \u3092\u3054\u78ba\u8a8d\u4e0b\u3055\u3044\u3002\u306a\u304a\u3001ROS, MQTT \u9593\u3092\u30d6\u30ea\u30c3\u30b8\u3059\u308b\u306b\u3042\u305f\u3063\u3066 `rosbridge_library` \u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b ROS Message \u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u5229\u7528\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n", "tags": ["mqtt", "IoT", "ROS"]}