{"context": " More than 1 year has passed since last update.Cookie \u304c\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306acURL\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u3042\u3093\u307e\u308a\u7121\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nSource\nBSD2\u6761\u9805\u30e9\u30a4\u30bb\u30f3\u30b9 \u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n<?php\n\n/**\n * cURL\n * \n * @author CertaiN\n * @github https://github.com/Certainist/cURL\n * @license BSD 2-Clause\n */\nclass cURL implements Serializable {\n\n    /**\n     * Default User-Agent.\n     * \n     * @static\n     * @access public\n     */\n    public static $defaultUserAgent = 'Chrome';\n\n    private $ch;\n    private $fp;\n    private $userAgent;\n    private $cookie;\n\n    /**\n     * You have to call parent::__construct() on your extended method.\n     * \n     * @magic\n     * @access public\n     * @param string [$user_agent = null]\n     */\n    public function __construct($user_agent = null) {\n        $list = static::getUserAgents();\n        if (!func_num_args()) {\n            $user_agent = static::$defaultUserAgent;\n        }\n        if (!is_string($user_agent)) {\n            throw new InvalidArgumentException('User-Agent value type must be string.');\n        }\n        if (!is_array($list)) {\n            throw new DomainException('static::getUserAgents() must return 1 dimentional assoc.');\n        }\n        if (!array_key_exists($user_agent, $list)) {\n            throw new InvalidArgumentException('Unknown User-Agent.');\n        }\n        if (!is_string($list[$user_agent])) {\n            throw new DomainException('static::getUserAgents() return array must contain string values.');\n        }\n        $this->userAgent = $list[$user_agent];\n        $this->init();\n    }\n\n    /**\n     * For GET requests.\n     * \n     * @access public\n     * @param string $url\n     * @param mixed [&$info = null] Set result of curl_getinfo().\n     * @return string Response body.\n     */\n    public function get($url, &$info = null) {\n        if (!is_string($url)) {\n            throw new InvalidArgumentException('URL value type must be string.');\n        }\n        if (!is_resource($this->ch)) {\n            throw new BadMethodCallException('cURL resource is not initialized');\n        }\n        curl_setopt_array($this->ch, array(\n            CURLOPT_URL => $url,\n            CURLOPT_HTTPGET => true,\n        ));\n        return $this->exec($info);\n    }\n\n    /**\n     * For POST requests.\n     * \n     * @access public\n     * @param string $url\n     * @param mixed $params Query string or associative array.\n     * @param mixed [&$info = null] Set result of curl_getinfo().\n     * @return string Response body.\n     */\n    public function post($url, $params, &$info = null) {\n        if (!is_string($url)) {\n            throw new InvalidArgumentException('URL value type must be string.');\n        }\n        if (!is_resource($this->ch)) {\n            throw new BadMethodCallException('cURL resource is not initialized');\n        }\n        curl_setopt_array($this->ch, array(\n            CURLOPT_URL => $url,\n            CURLOPT_POST => true,\n            CURLOPT_POSTFIELDS => $params,\n        ));\n        return $this->exec($info);\n    }\n\n    /**\n     * Clear cookies.\n     * \n     * @access public\n     */\n    public function clearCookies() {\n        if (!is_resource($this->ch)) {\n            throw new BadMethodCallException('cURL resource is not initialized');\n        }\n        ftruncate($this->fp, 0);\n    }\n\n    /**\n     * Return the list of User-Agents.\n     * You can extend this method.\n     * \n     * @static\n     * @access protected\n     * @return array Associative array.\n     */\n    protected static function getUserAgents() {\n        return array(\n            'Chrome' =>\n                'Mozilla/5.0 (Windows NT 6.1) ' .\n                'AppleWebKit/537.36 (KHTML, like Gecko) ' .\n                'Chrome/28.0.1500.63 Safari/537.36'\n            ,\n            'Firefox' =>\n                'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) ' .\n                'Gecko/20100101 Firefox/9.0.1'\n            ,\n            'Android' =>\n                'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03S) ' .\n                'AppleWebKit/535.19 (KHTML, like Gecko) ' .\n                'Chrome/18.0.1025.166 Safari/535.19'\n            ,\n            'iOS' =>\n                'Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) ' .\n                'AppleWebKit/536.26 (KHTML, like Gecko) ' .\n                'Version/6.0 Mobile/10A403 Safari/8536.25'\n            ,\n            'Windows Phone' =>\n                'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; ' .\n                'Trident/5.0; IEMobile/9.0; ' .\n                'FujitsuToshibaMobileCommun; IS12T; KDDI)'\n            ,\n            'Internet Explorer' =>\n                'Mozilla/5.0 (Windows NT 6.3; WOW64; ' . \n                'Trident/7.0; Touch; rv:11.0) like Gecko'\n            ,\n        );\n    }\n\n    /**\n     * Serialize your own properties.\n     * You can extend this method.\n     * \n     * @access protected\n     * @return mixed\n     */\n    protected function userSerialize() { return null; }\n\n    /**\n     * Unserialize your own properties.\n     * You can extend this method.\n     * \n     * @param anything $data\n     * @access protected\n     * @return mixed\n     */\n    protected function userUnserialize($data) { }\n\n    /**\n     * You have to call parent::__destruct() on your extended method.\n     * \n     * @magic\n     * @access public\n     */\n    public function __destruct() {\n        if (is_resource($this->ch)) {\n            curl_close($this->ch);\n        }\n        if (is_resource($this->fp)) {\n            $this->cookie = stream_get_contents($this->fp);\n            fclose($this->fp);\n        }\n    }\n\n    final public function serialize() {\n        $this->__destruct();\n        $this->init($this->cookie);\n        return serialize(array(\n            $this->userAgent,\n            $this->cookie,\n            $this->userSerialize(),\n        ));\n    }\n\n    final public function unserialize($data) {\n        if (\n            !$data = @unserialize($data) or\n            !array_key_exists(0, $data) or\n            !array_key_exists(1, $data) or\n            !array_key_exists(2, $data) or\n            !in_array($data[0], static::getUserAgents(), true) or\n            !is_string($data[1])\n        ) {\n            throw new UnexpectedValueException('Invalid serial');\n        }\n        $this->userAgent = $data[0];\n        $this->init($data[1]);\n        $this->userUnserialize($data[2]);\n    }\n\n    private function exec(&$info) {\n        $ret = curl_exec($this->ch);\n        $info = curl_getinfo($this->ch);\n        return $ret;\n    }\n\n    private function init($data = '') {\n        $this->fp = tmpfile();\n        if ($data !== '') {\n            fwrite($this->fp, $data);\n            rewind($this->fp);\n        }\n        $info = stream_get_meta_data($this->fp);\n        $cookie_uri = $info['uri'];\n        $this->ch = curl_init();\n        curl_setopt_array($this->ch, array(\n            CURLINFO_HEADER_OUT => true,\n            CURLOPT_AUTOREFERER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_CONNECTTIMEOUT => 10,\n            CURLOPT_TIMEOUT => 15,\n            CURLOPT_MAXREDIRS => 5,\n            CURLOPT_COOKIEFILE => $cookie_uri,\n            CURLOPT_COOKIEJAR => $cookie_uri,\n            CURLOPT_ENCODING => 'gzip, deflate',\n            CURLOPT_USERAGENT => $this->userAgent,\n            CURLOPT_HTTPHEADER => array(\n                'Accept: ' .\n                    'text/html,' . \n                    'application/xhtml+xml,' .\n                    'application/xml' .\n                    ';q=0.9,*/*;q=0.8'\n                ,\n                'Accept-Language: ' .\n                    'ja,en-us;q=0.7,en;q=0.3'\n                ,\n            ),\n        ));\n    }\n\n}\n\n\nExample\n\n\u30cb\u30b3\u30cb\u30b3\u52d5\u753b\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u5c65\u6b74\u3092\u53d6\u5f97\u3059\u308b\u4f8b\nclass NicoNico extends cURL {\n\n    public function __construct($mail_tel, $password) {\n        parent::__construct('Chrome');\n        $this->get('http://www.nicovideo.jp/login');\n        $this->post(\n            'https://secure.nicovideo.jp/secure/login?site=niconico',\n            array(\n                'next_url' => '',\n                'mail_tel' => $mail_tel,\n                'password' => $password,\n            ),\n            $info\n        );\n        if ($info['url'] !== 'http://www.nicovideo.jp/') {\n            throw new RuntimeException('\u30ed\u30b0\u30a4\u30f3\u306b\u5931\u6557\u3057\u307e\u3057\u305f');\n        }\n    }\n\n    public function getHistory() {\n        $regex = implode('.*?', array(\n            '<div class=\"outer\" id=\"outer_sm(\\d*+)\">',\n            '<img src=\"([^\"]*+)\" alt=\"([^\"]*+)\" class=\"video\" />',\n            '<span class=\"videoTime\">([^<]*+)</span>',\n            '<p class=\"posttime\">(\\d*+\u5e74\\d*+\u6708\\d*+\u65e5 \\d*+:\\d*+)',\n            '<span>\u8996\u8074\u56de\u6570(\\d*+)\u56de</span>',\n            '<li class=\"play\">\u518d\u751f:([^<]*+)</li>',\n            '<li class=\"comment\">\u30b3\u30e1\u30f3\u30c8:([^<]*+)</li>',\n            '<li class=\"mylist\">\u30de\u30a4\u30ea\u30b9\u30c8:<a href=\"[^\"]*+\">([^<]*+)</a></li>',\n            '<li class=\"posttime\">(\\d*+\u5e74\\d*+\u6708\\d*+\u65e5 \\d*+:\\d*+) \u6295\u7a3f</li>',\n        ));\n        $regex = \"@{$regex}@s\";\n        $str = $this->get('http://www.nicovideo.jp/my/history');\n        if (!preg_match_all($regex, $str, $matches, PREG_SET_ORDER)) {\n            throw new RuntimeException('\u5c65\u6b74\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f');\n        }\n        foreach ($matches as $match) {\n            $ret[] = array(\n                'id' => $match[1],\n                'url' => \"http://www.nicovideo.jp/watch/sm{$match[1]}\",\n                'thumb_url' => $match[2],\n                'title' => $match[3],\n                'duraction' => $match[4],\n                'watched_at' => $match[5],\n                'watched_count' => $match[6],\n                'meta_watched_count' => $match[7],\n                'meta_comment_count' => $match[8],\n                'meta_mylist_count' => $match[9],\n                'meta_created_at' => \"20{$match[10]}\", \n            );\n        }\n        return $ret;\n    }\n\n}\n\n$nico = new NicoNico('aaaaa@bbbbb.cc.jp', 'xxxxxxx');\nvar_dump($nico->getHistory());\n\narray(30) {\n  [0]=>\n  array(11) {\n    [\"id\"]=>\n    string(8) \"21280725\"\n    [\"url\"]=>\n    string(40) \"http://www.nicovideo.jp/watch/sm21280725\"\n    [\"thumb_url\"]=>\n    string(45) \"http://tn-skr2.smilevideo.jp/smile?i=21280725\"\n    [\"title\"]=>\n    string(69) \"\u3010\u30aa\u30c4\u30ad\u30df\u30ea\u30b5\u30a4\u30bf\u30eb\u3011\u6b4c\u3063\u3066\u307f\u305f\u3000\uff20\u3086\u3044\u3053\u3093\u306c\"\n    [\"duraction\"]=>\n    string(4) \"3:45\"\n    [\"watched_at\"]=>\n    string(23) \"2013\u5e7412\u670805\u65e5 14:10\"\n    [\"watched_count\"]=>\n    string(1) \"1\"\n    [\"meta_watched_count\"]=>\n    string(7) \"316,137\"\n    [\"meta_comment_count\"]=>\n    string(5) \"4,322\"\n    [\"meta_mylist_count\"]=>\n    string(6) \"14,802\"\n    [\"meta_created_at\"]=>\n    string(23) \"2013\u5e7407\u670805\u65e5 17:57\"\n  }\n  [1]=>\n  ....\n\n\n\u3053\u306e\u307e\u307e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066Cookie\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\nfile_put_contents('NicoNico.dat', serialize($nico));\n\n\n\u9593\u9055\u3063\u305f\u7d99\u627f\u306e\u3057\u304b\u305f\u3092\u3059\u308b\u3068\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\n\n\nparent::__construct() \u3092\u30b3\u30fc\u30eb\u305b\u305a\u306b\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068 BadMethodCallException \u3092\u30b9\u30ed\u30fc\n\nstatic::getUserAgents() \u304c\u6b63\u3057\u3044\u914d\u5217\u3092\u8fd4\u3055\u306a\u3044\u3068 DomainException \u3092\u30b9\u30ed\u30fc\n\n**Cookie** \u304c\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306acURL\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u3042\u3093\u307e\u308a\u7121\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# Source\n\n**BSD2\u6761\u9805\u30e9\u30a4\u30bb\u30f3\u30b9** \u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n```php\n<?php\n\n/**\n * cURL\n * \n * @author CertaiN\n * @github https://github.com/Certainist/cURL\n * @license BSD 2-Clause\n */\nclass cURL implements Serializable {\n    \n    /**\n     * Default User-Agent.\n     * \n     * @static\n     * @access public\n     */\n    public static $defaultUserAgent = 'Chrome';\n    \n    private $ch;\n    private $fp;\n    private $userAgent;\n    private $cookie;\n    \n    /**\n     * You have to call parent::__construct() on your extended method.\n     * \n     * @magic\n     * @access public\n     * @param string [$user_agent = null]\n     */\n    public function __construct($user_agent = null) {\n        $list = static::getUserAgents();\n        if (!func_num_args()) {\n            $user_agent = static::$defaultUserAgent;\n        }\n        if (!is_string($user_agent)) {\n            throw new InvalidArgumentException('User-Agent value type must be string.');\n        }\n        if (!is_array($list)) {\n            throw new DomainException('static::getUserAgents() must return 1 dimentional assoc.');\n        }\n        if (!array_key_exists($user_agent, $list)) {\n            throw new InvalidArgumentException('Unknown User-Agent.');\n        }\n        if (!is_string($list[$user_agent])) {\n            throw new DomainException('static::getUserAgents() return array must contain string values.');\n        }\n        $this->userAgent = $list[$user_agent];\n        $this->init();\n    }\n    \n    /**\n     * For GET requests.\n     * \n     * @access public\n     * @param string $url\n     * @param mixed [&$info = null] Set result of curl_getinfo().\n     * @return string Response body.\n     */\n    public function get($url, &$info = null) {\n        if (!is_string($url)) {\n            throw new InvalidArgumentException('URL value type must be string.');\n        }\n        if (!is_resource($this->ch)) {\n            throw new BadMethodCallException('cURL resource is not initialized');\n        }\n        curl_setopt_array($this->ch, array(\n            CURLOPT_URL => $url,\n            CURLOPT_HTTPGET => true,\n        ));\n        return $this->exec($info);\n    }\n    \n    /**\n     * For POST requests.\n     * \n     * @access public\n     * @param string $url\n     * @param mixed $params Query string or associative array.\n     * @param mixed [&$info = null] Set result of curl_getinfo().\n     * @return string Response body.\n     */\n    public function post($url, $params, &$info = null) {\n        if (!is_string($url)) {\n            throw new InvalidArgumentException('URL value type must be string.');\n        }\n        if (!is_resource($this->ch)) {\n            throw new BadMethodCallException('cURL resource is not initialized');\n        }\n        curl_setopt_array($this->ch, array(\n            CURLOPT_URL => $url,\n            CURLOPT_POST => true,\n            CURLOPT_POSTFIELDS => $params,\n        ));\n        return $this->exec($info);\n    }\n    \n    /**\n     * Clear cookies.\n     * \n     * @access public\n     */\n    public function clearCookies() {\n        if (!is_resource($this->ch)) {\n            throw new BadMethodCallException('cURL resource is not initialized');\n        }\n        ftruncate($this->fp, 0);\n    }\n    \n    /**\n     * Return the list of User-Agents.\n     * You can extend this method.\n     * \n     * @static\n     * @access protected\n     * @return array Associative array.\n     */\n    protected static function getUserAgents() {\n        return array(\n            'Chrome' =>\n                'Mozilla/5.0 (Windows NT 6.1) ' .\n                'AppleWebKit/537.36 (KHTML, like Gecko) ' .\n                'Chrome/28.0.1500.63 Safari/537.36'\n            ,\n            'Firefox' =>\n                'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) ' .\n                'Gecko/20100101 Firefox/9.0.1'\n            ,\n            'Android' =>\n                'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03S) ' .\n                'AppleWebKit/535.19 (KHTML, like Gecko) ' .\n                'Chrome/18.0.1025.166 Safari/535.19'\n            ,\n            'iOS' =>\n                'Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) ' .\n                'AppleWebKit/536.26 (KHTML, like Gecko) ' .\n                'Version/6.0 Mobile/10A403 Safari/8536.25'\n            ,\n            'Windows Phone' =>\n                'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; ' .\n                'Trident/5.0; IEMobile/9.0; ' .\n                'FujitsuToshibaMobileCommun; IS12T; KDDI)'\n            ,\n            'Internet Explorer' =>\n                'Mozilla/5.0 (Windows NT 6.3; WOW64; ' . \n                'Trident/7.0; Touch; rv:11.0) like Gecko'\n            ,\n        );\n    }\n    \n    /**\n     * Serialize your own properties.\n     * You can extend this method.\n     * \n     * @access protected\n     * @return mixed\n     */\n    protected function userSerialize() { return null; }\n    \n    /**\n     * Unserialize your own properties.\n     * You can extend this method.\n     * \n     * @param anything $data\n     * @access protected\n     * @return mixed\n     */\n    protected function userUnserialize($data) { }\n    \n    /**\n     * You have to call parent::__destruct() on your extended method.\n     * \n     * @magic\n     * @access public\n     */\n    public function __destruct() {\n        if (is_resource($this->ch)) {\n            curl_close($this->ch);\n        }\n        if (is_resource($this->fp)) {\n            $this->cookie = stream_get_contents($this->fp);\n            fclose($this->fp);\n        }\n    }\n    \n    final public function serialize() {\n        $this->__destruct();\n        $this->init($this->cookie);\n        return serialize(array(\n            $this->userAgent,\n            $this->cookie,\n            $this->userSerialize(),\n        ));\n    }\n    \n    final public function unserialize($data) {\n        if (\n            !$data = @unserialize($data) or\n            !array_key_exists(0, $data) or\n            !array_key_exists(1, $data) or\n            !array_key_exists(2, $data) or\n            !in_array($data[0], static::getUserAgents(), true) or\n            !is_string($data[1])\n        ) {\n            throw new UnexpectedValueException('Invalid serial');\n        }\n        $this->userAgent = $data[0];\n        $this->init($data[1]);\n        $this->userUnserialize($data[2]);\n    }\n    \n    private function exec(&$info) {\n        $ret = curl_exec($this->ch);\n        $info = curl_getinfo($this->ch);\n        return $ret;\n    }\n    \n    private function init($data = '') {\n        $this->fp = tmpfile();\n        if ($data !== '') {\n            fwrite($this->fp, $data);\n            rewind($this->fp);\n        }\n        $info = stream_get_meta_data($this->fp);\n        $cookie_uri = $info['uri'];\n        $this->ch = curl_init();\n        curl_setopt_array($this->ch, array(\n            CURLINFO_HEADER_OUT => true,\n            CURLOPT_AUTOREFERER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_CONNECTTIMEOUT => 10,\n            CURLOPT_TIMEOUT => 15,\n            CURLOPT_MAXREDIRS => 5,\n            CURLOPT_COOKIEFILE => $cookie_uri,\n            CURLOPT_COOKIEJAR => $cookie_uri,\n            CURLOPT_ENCODING => 'gzip, deflate',\n            CURLOPT_USERAGENT => $this->userAgent,\n            CURLOPT_HTTPHEADER => array(\n                'Accept: ' .\n                    'text/html,' . \n                    'application/xhtml+xml,' .\n                    'application/xml' .\n                    ';q=0.9,*/*;q=0.8'\n                ,\n                'Accept-Language: ' .\n                    'ja,en-us;q=0.7,en;q=0.3'\n                ,\n            ),\n        ));\n    }\n    \n}\n```\n\n# Example\n\n### \u30cb\u30b3\u30cb\u30b3\u52d5\u753b\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u5c65\u6b74\u3092\u53d6\u5f97\u3059\u308b\u4f8b\n\n```php\nclass NicoNico extends cURL {\n    \n    public function __construct($mail_tel, $password) {\n        parent::__construct('Chrome');\n        $this->get('http://www.nicovideo.jp/login');\n        $this->post(\n            'https://secure.nicovideo.jp/secure/login?site=niconico',\n            array(\n                'next_url' => '',\n                'mail_tel' => $mail_tel,\n                'password' => $password,\n            ),\n            $info\n        );\n        if ($info['url'] !== 'http://www.nicovideo.jp/') {\n            throw new RuntimeException('\u30ed\u30b0\u30a4\u30f3\u306b\u5931\u6557\u3057\u307e\u3057\u305f');\n        }\n    }\n    \n    public function getHistory() {\n        $regex = implode('.*?', array(\n            '<div class=\"outer\" id=\"outer_sm(\\d*+)\">',\n            '<img src=\"([^\"]*+)\" alt=\"([^\"]*+)\" class=\"video\" />',\n            '<span class=\"videoTime\">([^<]*+)</span>',\n            '<p class=\"posttime\">(\\d*+\u5e74\\d*+\u6708\\d*+\u65e5 \\d*+:\\d*+)',\n            '<span>\u8996\u8074\u56de\u6570(\\d*+)\u56de</span>',\n            '<li class=\"play\">\u518d\u751f:([^<]*+)</li>',\n            '<li class=\"comment\">\u30b3\u30e1\u30f3\u30c8:([^<]*+)</li>',\n            '<li class=\"mylist\">\u30de\u30a4\u30ea\u30b9\u30c8:<a href=\"[^\"]*+\">([^<]*+)</a></li>',\n            '<li class=\"posttime\">(\\d*+\u5e74\\d*+\u6708\\d*+\u65e5 \\d*+:\\d*+) \u6295\u7a3f</li>',\n        ));\n        $regex = \"@{$regex}@s\";\n        $str = $this->get('http://www.nicovideo.jp/my/history');\n        if (!preg_match_all($regex, $str, $matches, PREG_SET_ORDER)) {\n            throw new RuntimeException('\u5c65\u6b74\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f');\n        }\n        foreach ($matches as $match) {\n            $ret[] = array(\n                'id' => $match[1],\n                'url' => \"http://www.nicovideo.jp/watch/sm{$match[1]}\",\n                'thumb_url' => $match[2],\n                'title' => $match[3],\n                'duraction' => $match[4],\n                'watched_at' => $match[5],\n                'watched_count' => $match[6],\n                'meta_watched_count' => $match[7],\n                'meta_comment_count' => $match[8],\n                'meta_mylist_count' => $match[9],\n                'meta_created_at' => \"20{$match[10]}\", \n            );\n        }\n        return $ret;\n    }\n    \n}\n```\n\n```php\n$nico = new NicoNico('aaaaa@bbbbb.cc.jp', 'xxxxxxx');\nvar_dump($nico->getHistory());\n```\n\n```text\narray(30) {\n  [0]=>\n  array(11) {\n    [\"id\"]=>\n    string(8) \"21280725\"\n    [\"url\"]=>\n    string(40) \"http://www.nicovideo.jp/watch/sm21280725\"\n    [\"thumb_url\"]=>\n    string(45) \"http://tn-skr2.smilevideo.jp/smile?i=21280725\"\n    [\"title\"]=>\n    string(69) \"\u3010\u30aa\u30c4\u30ad\u30df\u30ea\u30b5\u30a4\u30bf\u30eb\u3011\u6b4c\u3063\u3066\u307f\u305f\u3000\uff20\u3086\u3044\u3053\u3093\u306c\"\n    [\"duraction\"]=>\n    string(4) \"3:45\"\n    [\"watched_at\"]=>\n    string(23) \"2013\u5e7412\u670805\u65e5 14:10\"\n    [\"watched_count\"]=>\n    string(1) \"1\"\n    [\"meta_watched_count\"]=>\n    string(7) \"316,137\"\n    [\"meta_comment_count\"]=>\n    string(5) \"4,322\"\n    [\"meta_mylist_count\"]=>\n    string(6) \"14,802\"\n    [\"meta_created_at\"]=>\n    string(23) \"2013\u5e7407\u670805\u65e5 17:57\"\n  }\n  [1]=>\n  ....\n```\n\n### \u3053\u306e\u307e\u307e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066Cookie\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\n\n```php\nfile_put_contents('NicoNico.dat', serialize($nico));\n```\n\n### \u9593\u9055\u3063\u305f\u7d99\u627f\u306e\u3057\u304b\u305f\u3092\u3059\u308b\u3068\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\n\n- `parent::__construct()` \u3092\u30b3\u30fc\u30eb\u305b\u305a\u306b\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068 **BadMethodCallException** \u3092\u30b9\u30ed\u30fc\n- `static::getUserAgents()` \u304c\u6b63\u3057\u3044\u914d\u5217\u3092\u8fd4\u3055\u306a\u3044\u3068 **DomainException** \u3092\u30b9\u30ed\u30fc\n", "tags": ["curl", "PHP"]}