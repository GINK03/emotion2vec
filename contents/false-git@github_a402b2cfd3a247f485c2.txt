{"context": " More than 1 year has passed since last update.\u524d\u56de\u3001QtConcurrent\u306emap\u3092\u53d6\u308a\u4e0a\u3052\u305f\u306e\u3067\u3001mappedReduced\u3082\u8a66\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u3001\u3059\u3054\u304f\u306f\u307e\u3063\u305f\u3068\u8a00\u3046\u8a71\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u3055\u3063\u3071\u308a\u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001Examples\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u63a2\u3057\u3066\u307f\u305f\u3089\u3001qtconcurrent/wordcount \u3068\u8a00\u3046\u306e\u304cmappedReduced()\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u3002\nmap-reduce\u3067\u826f\u304f\u51fa\u3066\u304f\u308bwordcound\u306e\u4f8b\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u7c21\u5358\u306e\u305f\u3081\u306b\u3001\u4eca\u56de\u3082blocking\u7248\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u3066\u3001\u30de\u30cb\u30e5\u30a2\u30eb\u306b\u3088\u308b\u3068\u4ee5\u4e0b\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306b\u306a\u3063\u3066\u3044\u308b\u3002(iterator\u7248\u3082\u3042\u308b\u3051\u3069\u3053\u3053\u3067\u306f\u5272\u611b)\nT QtConcurrent::blockingMappedReduced(const Sequence & sequence, MapFunction mapFunction, ReduceFunction reduceFunction, QtConcurrent::ReduceOptions reduceOptions = UnorderedReduce | SequentialReduce)\n\n\u3053\u306e\u95a2\u6570\u304c\u3084\u3063\u3066\u304f\u308c\u308b\u3053\u3068\u306f\u3001sequence\u306e\u4e00\u3064\u4e00\u3064\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001mapFunction\u3092\u547c\u3073\u51fa\u3057\u3001mapFunction\u306e\u7d50\u679c\u306b\u5bfe\u3057\u3066reduceFunction\u3092\u547c\u3073\u51fa\u3057\u3001\u5168\u3066\u306ereduceFunction\u306e\u547c\u3073\u51fa\u3057\u304c\u7d42\u308f\u3063\u305f\u3089\u7d50\u679c\u3092\u8fd4\u3059\u3002\nwordcount\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u3093\u3067\u7406\u89e3\u3057\u305f\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n* \u4ee5\u4e0b\u306e3\u3064\u306e\u578b\u304c\u767b\u5834\u3059\u308b\n- Sequence\u306e\u8981\u7d20\u306e\u578b(A\u3068\u3059\u308b)\n- MapFunction\u306e\u8fd4\u5024\u306e\u578b(B\u3068\u3059\u308b)\n- mappedReduced\u306e\u7d50\u679c\u306e\u578b(C\u3068\u3059\u308b)\n* MapFunction\u306f\u3001const A&\u3092\u5f15\u6570\u306b\u53d6\u308aB\u3092\u8fd4\u3059\n* ReduceFunction\u306f\u3001\u7b2c1\u5f15\u6570\u306bC&, \u7b2c2\u5f15\u6570\u306bconst B&\u3092\u53d6\u308a\u8fd4\u5024\u306fvoid\n* MapFunction\u306f\u4e26\u5217\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n* ReduceFunction\u306freduceOptions\u306b\u5f93\u3044\u547c\u3073\u51fa\u3055\u308c\u308b\u304c\u3001Qt 5.4\u306e\u6642\u70b9\u3067\u306f SequentialReduce\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u547c\u3073\u51fa\u3055\u308c\u308b(\u5c06\u6765\u7684\u306b\u306f\u4e26\u5217\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3089\u3057\u3044)\n\n\u99c4\u76ee\u306a\u4f8b\nwordcount\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3046\u3068\u30b3\u30fc\u30c9\u304c\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4f8b\u3092\u8003\u3048\u308b\u3002(\u307e\u3063\u305f\u304fMapReduce\u306e\u4f8b\u3068\u3057\u3066\u76f8\u5fdc\u3057\u304f\u306a\u3044\u304c\u3001\u8aac\u660e\u306e\u305f\u3081)\n* Sequence\u306fQList<int>\n* MapFunction\u306f\u3001\u5f15\u6570\u30922\u500d\u3057\u3066\u8fd4\u3059\n* ReduceFunction\u306f\u3001MapFunction\u306e\u7d50\u679c\u3092\u5408\u8a08\u3059\u308b\n\u524d\u56de\u3068\u540c\u3058\u3088\u3046\u306blambda\u3092\u4f7f\u3063\u3066\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3002\nQList<int> list;\nfor (int i = 1; i <= 10; i++) {\n    list.append(i);\n}\nint total = QtConcurrent::blockingMappedReduced(list,\n    [](const int &data) {return data * 2;},\n    [](int &total, const int &result) {total += result;}\n);\n\n\u3053\u308c\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3068\u3001OS X\u306eclang++\u3067\u306f\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\nmain.cpp:29:17: error: no matching function for call to 'blockingMappedReduced'\n    int total = QtConcurrent::blockingMappedReduced(list,\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:199:12: note: candidate template ignored: couldn't infer template argument 'ResultType'\nResultType blockingMappedReduced(const Sequence &sequence,\n           ^\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:213:65: note: candidate template ignored: substitution failure [with MapFunctor = <lambda at main.cpp:30:9>, ReduceFunctor = <lambda at main.cpp:31:9>, Sequence = QList<int>]: implicit instantiation of undefined template 'QtPrivate::ReduceResultType<<lambda at main.cpp:31:9> >'\ntypename QtPrivate::ReduceResultType<ReduceFunctor>::ResultType blockingMappedReduced(const Sequence &sequence,\n                    ~~~~~~~~~~~~~~~~                            ^\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:228:12: note: candidate function template not viable: requires at least 4 arguments, but 3 were provided\nResultType blockingMappedReduced(Iterator begin,\n           ^\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:243:65: note: candidate function template not viable: requires at least 4 arguments, but 3 were provided\ntypename QtPrivate::ReduceResultType<ReduceFunctor>::ResultType blockingMappedReduced(Iterator begin,\n                                                                ^\n1 error generated.\n\n\u4f55\u304c\u3044\u3051\u306a\u3044\u306e\u304b\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u3044\u3002\n\u304a\u305d\u3089\u304f\u3001couldn't infer template argument 'ResultType' \u3068\u8a00\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u3001template\u306e\u578b\u306e\u63a8\u8ad6\u306b\u5931\u6557\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u601d\u308f\u308c\u308b\u3002\n\n\u3046\u307e\u304f\u884c\u304f\u4f8b(lambda\u3092\u4f7f\u308f\u306a\u3044)\n\u305d\u3053\u3067\u3001\u307e\u305a\u306fwordcount\u306e\u4f8b\u306b\u306a\u3089\u3063\u3066\u3001lambda\u3092\u4f7f\u308f\u305a\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\nint multi(const int &data) {\n    return data * 2;\n}\n\nvoid reduce(int &total, const int &result) {\n    total += result;\n}\n\nint total = QtConcurrent::blockingMappedReduced(list, multi, reduce);\n\n\u3053\u308c\u306f\u3001\u30d3\u30eb\u30c9\u306b\u6210\u529f\u3057\u7d50\u679c\u3082\u51fa\u308b\u3002\n\nlambda\u3092\u5909\u6570\u306b\u5165\u308c\u3066\u307f\u308b\n\u305d\u3053\u3067\u3001lambda\u3092\u4e00\u5ea6auto\u306e\u5909\u6570\u306b\u5165\u308c\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\nauto mapFunc = [](const int &data) -> int {return data * 2;};\nauto reduceFunc = [](int &total, const int &result) {total += result;};\nint total = QtConcurrent::blockingMappedReduced(list, mapFunc, reduceFunc);\n\n\u3057\u304b\u3057\u3001\u540c\u3058\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3002\nmain.cpp:31:17: error: no matching function for call to 'blockingMappedReduced'\n    int total = QtConcurrent::blockingMappedReduced(list, mapFunc, reduceFunc);\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:199:12: note: candidate template ignored: couldn't infer template argument 'ResultType'\nResultType blockingMappedReduced(const Sequence &sequence,\n           ^\n\n\nauto\u3092\u4f7f\u308f\u305a\u306bfunction\u306b\u3057\u3066\u307f\u308b\u3002\nstd::function<int (const int&)> mapFunc = [](const int &data) {return data * 2;};\nstd::function<void (int &, const int&)> reduceFunc = [](int &total, const int &result) {total += result;};\nint total = QtConcurrent::blockingMappedReduced(list, mapFunc, reduceFunc);\n\nauto\u3092\u4f7f\u3046\u3068\u63a8\u8ad6\u304c\u6b63\u3057\u304f\u50cd\u304b\u306a\u3044\u306e\u304b\u3068\u601d\u3063\u3066\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u308f\u304b\u308b\u5f62\u306b\u3057\u3066\u307f\u305f\u304c\u3001\u3084\u306f\u308a\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\nmain.cpp:32:17: error: no matching function for call to 'blockingMappedReduced'\n    int total = QtConcurrent::blockingMappedReduced(list, mapFunc, reduceFunc);\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:199:12: note: candidate template ignored: couldn't infer template argument 'ResultType'\nResultType blockingMappedReduced(const Sequence &sequence,\n           ^\n\n\u3044\u3044\u52a0\u6e1b\u30c8\u30e9\u30a4\uff06\u30a8\u30e9\u30fc\u3067\u8a66\u3059\u306e\u3082\u53b3\u3057\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3001qtconcurrentmap.h\u306b\u3042\u308bblockingMappedReduced\u306e\u5ba3\u8a00\u3092\u898b\u308b\u3002\ntemplate <typename ResultType, typename Sequence, typename MapFunctor, typename ReduceFunctor>\nResultType blockingMappedReduced(const Sequence &sequence,\n                                 MapFunctor map,\n                                 ReduceFunctor reduce,\n                                 ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))\n\ntemplate <typename MapFunctor, typename ReduceFunctor, typename Sequence>\ntypename QtPrivate::ReduceResultType<ReduceFunctor>::ResultType blockingMappedReduced(const Sequence &sequence,\n                                 MapFunctor map,\n                                 ReduceFunctor reduce,\n                                 ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u5224\u65ad\u3059\u308b\u306b\u3001\u6700\u521d\u306e\u65b9\u306e\u5ba3\u8a00\u304c\u4f7f\u308f\u308c\u3066\u3044\u305d\u3046\u306a\u306e\u3067\u3001ResultType\u3092\u6559\u3048\u3066\u3084\u308b\u3053\u3068\u306b\u3059\u308b\u3002\nstd::function<int (const int&)> mapFunc = [](const int &data) {return data * 2;};\nstd::function<void (int &, const int&)> reduceFunc = [](int &total, const int &result) {total += result;};\nint total = QtConcurrent::blockingMappedReduced<int>(list, mapFunc, reduceFunc);\n\n\u3053\u308c\u3067\u3001\u3084\u3063\u3068\u30d3\u30eb\u30c9\u304c\u901a\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u3084\u308a\u65b9\u306e\u5834\u5408\u306freduceFunc\u306e\u578b\u306fauto\u3067\u3082\u5927\u4e08\u592b\u3060\u3063\u305f\u3002\n\nlambda\u3067\u66f8\u304d\u3064\u3064\u4e00\u6642\u5909\u6570\u306b\u5165\u308c\u306a\u3044\n\u3053\u3053\u307e\u3067\u308f\u304b\u308c\u3070\u3001\u6b8b\u308a\u306etemplate\u5f15\u6570\u3082\u5168\u3066\u578b\u3092\u6559\u3048\u3066\u3084\u308c\u3070\u3001\u4e00\u6642\u5909\u6570\u3092\u4f7f\u308f\u305a\u306blambda\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\nint total = QtConcurrent::blockingMappedReduced<int, QList<int>, std::function<int (const int&)>, std::function<void (int &, const int&)> >(list,\n    [](const int &data) {return data * 2;},\n    [](int &total, const int &result) {total += result;}\n);\n\nstd::function\u3092\u4f7f\u308f\u305a\u306b\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u578b\u3092\u66f8\u3044\u3066\u3082\u826f\u3044\u3002(\u3042\u3089\u304b\u3058\u3081typedef\u3057\u3066\u304a\u3044\u305f\u65b9\u304c\u898b\u3084\u3059\u3044\u3068\u601d\u3046\u3051\u3069)\nint total = QtConcurrent::blockingMappedReduced<int, QList<int>, int (*)(const int&), void (*)(int &, const int&)>(list,\n    [](const int &data) {return data * 2;},\n    [](int &total, const int &result) {total += result;}\n);\n\ntemplate\u306f\u82e6\u624b\u3067\u3001\u305a\u3063\u3068\u907f\u3051\u3066\u304d\u305f\u306e\u3060\u3051\u308c\u3069\u3001template\u304c\u3089\u307f\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3068\u306a\u304b\u306a\u304b\u539f\u56e0\u304c\u3064\u304b\u3081\u306a\u304f\u3066\u672c\u5f53\u306b\u82e6\u52b4\u3057\u3066\u3057\u307e\u3046\u3002\n\u524d\u56de\u3001QtConcurrent\u306emap\u3092\u53d6\u308a\u4e0a\u3052\u305f\u306e\u3067\u3001mappedReduced\u3082\u8a66\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u3001\u3059\u3054\u304f\u306f\u307e\u3063\u305f\u3068\u8a00\u3046\u8a71\u3002\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u3055\u3063\u3071\u308a\u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001Examples\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u63a2\u3057\u3066\u307f\u305f\u3089\u3001qtconcurrent/wordcount \u3068\u8a00\u3046\u306e\u304cmappedReduced()\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u3002\nmap-reduce\u3067\u826f\u304f\u51fa\u3066\u304f\u308bwordcound\u306e\u4f8b\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u7c21\u5358\u306e\u305f\u3081\u306b\u3001\u4eca\u56de\u3082blocking\u7248\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u3066\u3001\u30de\u30cb\u30e5\u30a2\u30eb\u306b\u3088\u308b\u3068\u4ee5\u4e0b\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306b\u306a\u3063\u3066\u3044\u308b\u3002(iterator\u7248\u3082\u3042\u308b\u3051\u3069\u3053\u3053\u3067\u306f\u5272\u611b)\n\n```cpp\nT QtConcurrent::blockingMappedReduced(const Sequence & sequence, MapFunction mapFunction, ReduceFunction reduceFunction, QtConcurrent::ReduceOptions reduceOptions = UnorderedReduce | SequentialReduce)\n```\n\n\u3053\u306e\u95a2\u6570\u304c\u3084\u3063\u3066\u304f\u308c\u308b\u3053\u3068\u306f\u3001sequence\u306e\u4e00\u3064\u4e00\u3064\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001mapFunction\u3092\u547c\u3073\u51fa\u3057\u3001mapFunction\u306e\u7d50\u679c\u306b\u5bfe\u3057\u3066reduceFunction\u3092\u547c\u3073\u51fa\u3057\u3001\u5168\u3066\u306ereduceFunction\u306e\u547c\u3073\u51fa\u3057\u304c\u7d42\u308f\u3063\u305f\u3089\u7d50\u679c\u3092\u8fd4\u3059\u3002\n\nwordcount\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u3093\u3067\u7406\u89e3\u3057\u305f\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n* \u4ee5\u4e0b\u306e3\u3064\u306e\u578b\u304c\u767b\u5834\u3059\u308b\n- Sequence\u306e\u8981\u7d20\u306e\u578b(A\u3068\u3059\u308b)\n- MapFunction\u306e\u8fd4\u5024\u306e\u578b(B\u3068\u3059\u308b)\n- mappedReduced\u306e\u7d50\u679c\u306e\u578b(C\u3068\u3059\u308b)\n* MapFunction\u306f\u3001`const A&`\u3092\u5f15\u6570\u306b\u53d6\u308a`B`\u3092\u8fd4\u3059\n* ReduceFunction\u306f\u3001\u7b2c1\u5f15\u6570\u306b`C&`, \u7b2c2\u5f15\u6570\u306b`const B&`\u3092\u53d6\u308a\u8fd4\u5024\u306fvoid\n* MapFunction\u306f\u4e26\u5217\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n* ReduceFunction\u306freduceOptions\u306b\u5f93\u3044\u547c\u3073\u51fa\u3055\u308c\u308b\u304c\u3001Qt 5.4\u306e\u6642\u70b9\u3067\u306f SequentialReduce\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u547c\u3073\u51fa\u3055\u308c\u308b(\u5c06\u6765\u7684\u306b\u306f\u4e26\u5217\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3089\u3057\u3044)\n\n# \u99c4\u76ee\u306a\u4f8b\nwordcount\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3046\u3068\u30b3\u30fc\u30c9\u304c\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4f8b\u3092\u8003\u3048\u308b\u3002(\u307e\u3063\u305f\u304fMapReduce\u306e\u4f8b\u3068\u3057\u3066\u76f8\u5fdc\u3057\u304f\u306a\u3044\u304c\u3001\u8aac\u660e\u306e\u305f\u3081)\n* Sequence\u306f`QList<int>`\n* MapFunction\u306f\u3001\u5f15\u6570\u30922\u500d\u3057\u3066\u8fd4\u3059\n* ReduceFunction\u306f\u3001MapFunction\u306e\u7d50\u679c\u3092\u5408\u8a08\u3059\u308b\n\n\u524d\u56de\u3068\u540c\u3058\u3088\u3046\u306blambda\u3092\u4f7f\u3063\u3066\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n\n```cpp\nQList<int> list;\nfor (int i = 1; i <= 10; i++) {\n    list.append(i);\n}\nint total = QtConcurrent::blockingMappedReduced(list,\n    [](const int &data) {return data * 2;},\n    [](int &total, const int &result) {total += result;}\n);\n```\n\u3053\u308c\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3068\u3001OS X\u306eclang++\u3067\u306f\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\n```shell-session\nmain.cpp:29:17: error: no matching function for call to 'blockingMappedReduced'\n    int total = QtConcurrent::blockingMappedReduced(list,\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:199:12: note: candidate template ignored: couldn't infer template argument 'ResultType'\nResultType blockingMappedReduced(const Sequence &sequence,\n           ^\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:213:65: note: candidate template ignored: substitution failure [with MapFunctor = <lambda at main.cpp:30:9>, ReduceFunctor = <lambda at main.cpp:31:9>, Sequence = QList<int>]: implicit instantiation of undefined template 'QtPrivate::ReduceResultType<<lambda at main.cpp:31:9> >'\ntypename QtPrivate::ReduceResultType<ReduceFunctor>::ResultType blockingMappedReduced(const Sequence &sequence,\n                    ~~~~~~~~~~~~~~~~                            ^\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:228:12: note: candidate function template not viable: requires at least 4 arguments, but 3 were provided\nResultType blockingMappedReduced(Iterator begin,\n           ^\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:243:65: note: candidate function template not viable: requires at least 4 arguments, but 3 were provided\ntypename QtPrivate::ReduceResultType<ReduceFunctor>::ResultType blockingMappedReduced(Iterator begin,\n                                                                ^\n1 error generated.\n```\n\n\u4f55\u304c\u3044\u3051\u306a\u3044\u306e\u304b\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u3044\u3002\n\u304a\u305d\u3089\u304f\u3001`couldn't infer template argument 'ResultType'` \u3068\u8a00\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u3001template\u306e\u578b\u306e\u63a8\u8ad6\u306b\u5931\u6557\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u601d\u308f\u308c\u308b\u3002\n\n# \u3046\u307e\u304f\u884c\u304f\u4f8b(lambda\u3092\u4f7f\u308f\u306a\u3044)\n\u305d\u3053\u3067\u3001\u307e\u305a\u306fwordcount\u306e\u4f8b\u306b\u306a\u3089\u3063\u3066\u3001lambda\u3092\u4f7f\u308f\u305a\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\n```cpp\nint multi(const int &data) {\n    return data * 2;\n}\n\nvoid reduce(int &total, const int &result) {\n    total += result;\n}\n\nint total = QtConcurrent::blockingMappedReduced(list, multi, reduce);\n```\n\n\u3053\u308c\u306f\u3001\u30d3\u30eb\u30c9\u306b\u6210\u529f\u3057\u7d50\u679c\u3082\u51fa\u308b\u3002\n\n# lambda\u3092\u5909\u6570\u306b\u5165\u308c\u3066\u307f\u308b\n\u305d\u3053\u3067\u3001lambda\u3092\u4e00\u5ea6auto\u306e\u5909\u6570\u306b\u5165\u308c\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n```cpp\nauto mapFunc = [](const int &data) -> int {return data * 2;};\nauto reduceFunc = [](int &total, const int &result) {total += result;};\nint total = QtConcurrent::blockingMappedReduced(list, mapFunc, reduceFunc);\n```\n\u3057\u304b\u3057\u3001\u540c\u3058\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3002\n\n```shell-session\nmain.cpp:31:17: error: no matching function for call to 'blockingMappedReduced'\n    int total = QtConcurrent::blockingMappedReduced(list, mapFunc, reduceFunc);\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:199:12: note: candidate template ignored: couldn't infer template argument 'ResultType'\nResultType blockingMappedReduced(const Sequence &sequence,\n           ^\n```\n\n# auto\u3092\u4f7f\u308f\u305a\u306bfunction\u306b\u3057\u3066\u307f\u308b\u3002\n\n```cpp\nstd::function<int (const int&)> mapFunc = [](const int &data) {return data * 2;};\nstd::function<void (int &, const int&)> reduceFunc = [](int &total, const int &result) {total += result;};\nint total = QtConcurrent::blockingMappedReduced(list, mapFunc, reduceFunc);\n```\nauto\u3092\u4f7f\u3046\u3068\u63a8\u8ad6\u304c\u6b63\u3057\u304f\u50cd\u304b\u306a\u3044\u306e\u304b\u3068\u601d\u3063\u3066\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u308f\u304b\u308b\u5f62\u306b\u3057\u3066\u307f\u305f\u304c\u3001\u3084\u306f\u308a\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n```shell-session\nmain.cpp:32:17: error: no matching function for call to 'blockingMappedReduced'\n    int total = QtConcurrent::blockingMappedReduced(list, mapFunc, reduceFunc);\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../qt/Qt5.4.0/5.4/clang_64/lib/QtConcurrent.framework/Versions/5/Headers/qtconcurrentmap.h:199:12: note: candidate template ignored: couldn't infer template argument 'ResultType'\nResultType blockingMappedReduced(const Sequence &sequence,\n           ^\n```\n\n\u3044\u3044\u52a0\u6e1b\u30c8\u30e9\u30a4\uff06\u30a8\u30e9\u30fc\u3067\u8a66\u3059\u306e\u3082\u53b3\u3057\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3001qtconcurrentmap.h\u306b\u3042\u308bblockingMappedReduced\u306e\u5ba3\u8a00\u3092\u898b\u308b\u3002\n\n```cpp\ntemplate <typename ResultType, typename Sequence, typename MapFunctor, typename ReduceFunctor>\nResultType blockingMappedReduced(const Sequence &sequence,\n                                 MapFunctor map,\n                                 ReduceFunctor reduce,\n                                 ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))\n```\n\n```cpp\ntemplate <typename MapFunctor, typename ReduceFunctor, typename Sequence>\ntypename QtPrivate::ReduceResultType<ReduceFunctor>::ResultType blockingMappedReduced(const Sequence &sequence,\n                                 MapFunctor map,\n                                 ReduceFunctor reduce,\n                                 ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))\n```\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u5224\u65ad\u3059\u308b\u306b\u3001\u6700\u521d\u306e\u65b9\u306e\u5ba3\u8a00\u304c\u4f7f\u308f\u308c\u3066\u3044\u305d\u3046\u306a\u306e\u3067\u3001ResultType\u3092\u6559\u3048\u3066\u3084\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n```cpp\nstd::function<int (const int&)> mapFunc = [](const int &data) {return data * 2;};\nstd::function<void (int &, const int&)> reduceFunc = [](int &total, const int &result) {total += result;};\nint total = QtConcurrent::blockingMappedReduced<int>(list, mapFunc, reduceFunc);\n```\n\u3053\u308c\u3067\u3001\u3084\u3063\u3068\u30d3\u30eb\u30c9\u304c\u901a\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u3084\u308a\u65b9\u306e\u5834\u5408\u306freduceFunc\u306e\u578b\u306fauto\u3067\u3082\u5927\u4e08\u592b\u3060\u3063\u305f\u3002\n\n# lambda\u3067\u66f8\u304d\u3064\u3064\u4e00\u6642\u5909\u6570\u306b\u5165\u308c\u306a\u3044\n\u3053\u3053\u307e\u3067\u308f\u304b\u308c\u3070\u3001\u6b8b\u308a\u306etemplate\u5f15\u6570\u3082\u5168\u3066\u578b\u3092\u6559\u3048\u3066\u3084\u308c\u3070\u3001\u4e00\u6642\u5909\u6570\u3092\u4f7f\u308f\u305a\u306blambda\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n```cpp\nint total = QtConcurrent::blockingMappedReduced<int, QList<int>, std::function<int (const int&)>, std::function<void (int &, const int&)> >(list,\n    [](const int &data) {return data * 2;},\n    [](int &total, const int &result) {total += result;}\n);\n```\nstd::function\u3092\u4f7f\u308f\u305a\u306b\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u578b\u3092\u66f8\u3044\u3066\u3082\u826f\u3044\u3002(\u3042\u3089\u304b\u3058\u3081typedef\u3057\u3066\u304a\u3044\u305f\u65b9\u304c\u898b\u3084\u3059\u3044\u3068\u601d\u3046\u3051\u3069)\n\n```cpp\nint total = QtConcurrent::blockingMappedReduced<int, QList<int>, int (*)(const int&), void (*)(int &, const int&)>(list,\n    [](const int &data) {return data * 2;},\n    [](int &total, const int &result) {total += result;}\n);\n```\n\ntemplate\u306f\u82e6\u624b\u3067\u3001\u305a\u3063\u3068\u907f\u3051\u3066\u304d\u305f\u306e\u3060\u3051\u308c\u3069\u3001template\u304c\u3089\u307f\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3068\u306a\u304b\u306a\u304b\u539f\u56e0\u304c\u3064\u304b\u3081\u306a\u304f\u3066\u672c\u5f53\u306b\u82e6\u52b4\u3057\u3066\u3057\u307e\u3046\u3002\n", "tags": ["Qt", "C++11"]}