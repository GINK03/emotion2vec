{"tags": ["C++", "boost", "XML"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\na.cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\n#include <boost/property_tree/ptree.hpp>\n#include <boost/property_tree/xml_parser.hpp>\n#include <boost/lexical_cast.hpp>\n\nstd::string Xml = \"\\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\\n<soapenv:Envelope xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\\n        <soapenv:Body>\\\n                <soapenv:Fault>\\\n                        <faultcode>ServerFaultCode</faultcode>\\\n                        <faultstring>Cannot complete login due to an incorrect user name or password.</faultstring>\\\n                        <detail>\\\n                                <InvalidLoginFault xmlns=\\\"urn:vim25\\\" xsi:type=\\\"InvalidLogin\\\"></InvalidLoginFault>\\\n                        </detail>\\\n                </soapenv:Fault>\\\n        </soapenv:Body>\\\n</soapenv:Envelope>\\\n\";\n\nvoid show_xml(boost::property_tree::ptree &pt, int indent = 0);\n\nvoid show_xml(boost::property_tree::ptree &pt, int indent) {\n    for (auto &it : pt) {\n        if (it.first == \"<xmlattr>\") {\n            continue;\n        }\n        std::string attr;\n        bool no_child = true;\n        for (auto &itt : it.second.get_child(\"\")) {\n            if (itt.first == \"<xmlattr>\") {\n                for (auto &ittt : itt.second.get_child(\"\")) {\n                    attr += \" \" + ittt.first + \"=\\\"\" + boost::lexical_cast<std::string>(ittt.second.data()) + \"\\\"\";\n                }\n                continue;\n            }\n            no_child = false;\n        }\n        for (int i = 0; i < indent; ++i) {\n            std::cout << \"\\t\";\n        }\n        std::cout << \"<\" << it.first << attr << \">\";\n        if (no_child) {\n            std::cout << it.second.data();\n        } else {\n            std::cout << std::endl;\n            show_xml(it.second, indent + 1);\n            for (int i = 0; i < indent; ++i) {\n                std::cout << \"\\t\";\n            }\n        }\n        std::cout << \"</\" << it.first << \">\" << std::endl;\n    }\n}\n\nint main(int, char **) {\n    boost::property_tree::ptree pt;\n    std::stringstream ss(Xml);\n    boost::property_tree::read_xml(ss, pt);\n\n    try {\n        show_xml(pt);\n    } catch (std::exception const &ex) {\n        std::cout << \"xml parse error.\" << std::endl;\n    }\n\n    return 0;\n}\n\n\n\n[root@localhost ~]#\n[root@localhost ~]# g++ --std=c++11 a.cpp\n[root@localhost ~]# ./a.out\n<soapenv:Envelope xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n        <soapenv:Body>\n                <soapenv:Fault>\n                        <faultcode>ServerFaultCode</faultcode>\n                        <faultstring>Cannot complete login due to an incorrect user name or password.</faultstring>\n                        <detail>\n                                <InvalidLoginFault xmlns=\"urn:vim25\" xsi:type=\"InvalidLogin\"></InvalidLoginFault>\n                        </detail>\n                </soapenv:Fault>\n        </soapenv:Body>\n</soapenv:Envelope>\n[root@localhost ~]#\n[root@localhost ~]#\n\nxmlattr\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u3066\u3001attribute\u304c\u3061\u3083\u3093\u3068\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u3064\u3082\u308a\u3002\n\uff08xmlattr\u3092\u898b\u306a\u3044\u3067\u5358\u306b\u30c4\u30ea\u30fc\u3092\u305f\u3069\u308b\u3068\u3001attribute\u304c\u5b50\u30c4\u30ea\u30fc\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3046\uff09\n\u203b\u3059\u3079\u3066\u306exml\u306e\u5185\u5bb9\u304c\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u308b\u304b\u306f\u3001\u8a66\u3057\u3066\u3044\u306a\u3044\u3002\n```cpp:a.cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\n#include <boost/property_tree/ptree.hpp>\n#include <boost/property_tree/xml_parser.hpp>\n#include <boost/lexical_cast.hpp>\n\nstd::string Xml = \"\\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\\n<soapenv:Envelope xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\\n        <soapenv:Body>\\\n                <soapenv:Fault>\\\n                        <faultcode>ServerFaultCode</faultcode>\\\n                        <faultstring>Cannot complete login due to an incorrect user name or password.</faultstring>\\\n                        <detail>\\\n                                <InvalidLoginFault xmlns=\\\"urn:vim25\\\" xsi:type=\\\"InvalidLogin\\\"></InvalidLoginFault>\\\n                        </detail>\\\n                </soapenv:Fault>\\\n        </soapenv:Body>\\\n</soapenv:Envelope>\\\n\";\n\nvoid show_xml(boost::property_tree::ptree &pt, int indent = 0);\n\nvoid show_xml(boost::property_tree::ptree &pt, int indent) {\n    for (auto &it : pt) {\n        if (it.first == \"<xmlattr>\") {\n            continue;\n        }\n        std::string attr;\n        bool no_child = true;\n        for (auto &itt : it.second.get_child(\"\")) {\n            if (itt.first == \"<xmlattr>\") {\n                for (auto &ittt : itt.second.get_child(\"\")) {\n                    attr += \" \" + ittt.first + \"=\\\"\" + boost::lexical_cast<std::string>(ittt.second.data()) + \"\\\"\";\n                }\n                continue;\n            }\n            no_child = false;\n        }\n        for (int i = 0; i < indent; ++i) {\n            std::cout << \"\\t\";\n        }\n        std::cout << \"<\" << it.first << attr << \">\";\n        if (no_child) {\n            std::cout << it.second.data();\n        } else {\n            std::cout << std::endl;\n            show_xml(it.second, indent + 1);\n            for (int i = 0; i < indent; ++i) {\n                std::cout << \"\\t\";\n            }\n        }\n        std::cout << \"</\" << it.first << \">\" << std::endl;\n    }\n}\n\nint main(int, char **) {\n    boost::property_tree::ptree pt;\n    std::stringstream ss(Xml);\n    boost::property_tree::read_xml(ss, pt);\n\n    try {\n        show_xml(pt);\n    } catch (std::exception const &ex) {\n        std::cout << \"xml parse error.\" << std::endl;\n    }\n\n    return 0;\n}\n\n```\n\n```\n[root@localhost ~]#\n[root@localhost ~]# g++ --std=c++11 a.cpp\n[root@localhost ~]# ./a.out\n<soapenv:Envelope xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n        <soapenv:Body>\n                <soapenv:Fault>\n                        <faultcode>ServerFaultCode</faultcode>\n                        <faultstring>Cannot complete login due to an incorrect user name or password.</faultstring>\n                        <detail>\n                                <InvalidLoginFault xmlns=\"urn:vim25\" xsi:type=\"InvalidLogin\"></InvalidLoginFault>\n                        </detail>\n                </soapenv:Fault>\n        </soapenv:Body>\n</soapenv:Envelope>\n[root@localhost ~]#\n[root@localhost ~]#\n```\n\nxmlattr\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u3066\u3001attribute\u304c\u3061\u3083\u3093\u3068\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u3064\u3082\u308a\u3002\n\uff08xmlattr\u3092\u898b\u306a\u3044\u3067\u5358\u306b\u30c4\u30ea\u30fc\u3092\u305f\u3069\u308b\u3068\u3001attribute\u304c\u5b50\u30c4\u30ea\u30fc\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3046\uff09\n\n\u203b\u3059\u3079\u3066\u306exml\u306e\u5185\u5bb9\u304c\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u308b\u304b\u306f\u3001\u8a66\u3057\u3066\u3044\u306a\u3044\u3002\n"}