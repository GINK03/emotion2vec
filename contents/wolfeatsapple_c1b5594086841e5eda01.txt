{"context": " More than 1 year has passed since last update.getDescribe\u3063\u3066\u305f\u307e\u306b\u4f7f\u3046\u306e\u3067\u3059\u304c\u3001\u30b3\u30fc\u30c9\u304c\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u77ed\u304f\u3067\u304d\u306a\u3044\u304b\u3068\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f7f\u3046\u3068\u304d\u306f\u3053\u3093\u306a\u611f\u3058\u3067\nString AccountNameLabel = Describer.getFieldLabel('Account', 'name');\n\n\n\u3053\u3063\u3061\u3092\u30b3\u30d4\u30fc\u3057\u3066\n\nDescriber.apxc\npublic class Describer {\n\n    public class DescriberException extends Exception {}\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u304b\u3089\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u304c\u6709\u52b9\u3067\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n    public static Boolean isValidSObjectType(String objType){ \n        Boolean ret = false;\n        if(!isNullOrEmpty(objType)){\n            ret = Schema.getGlobalDescribe().containsKey(objType);\n        }\n        o('Describer.isValidSObjectType: object type \\'' + objType + '\\' is valid? ' + ret);\n        return ret;\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6709\u52b9\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n    public static Boolean isValidFieldName(String objType, String fieldName){\n        Boolean ret = false;\n        if(isValidSObjectType(objType) && !isNullOrEmpty(fieldName)){\n            ret = Schema.getGlobalDescribe().get(objType).getDescribe().fields.getMap().containsKey(fieldName);\n        }   \n        o('Describer.isValidFieldName: field \\'' + fieldName + '\\' for object type \\'' + objType + '\\' is valid? ' + ret);\n        return ret;\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u30e9\u30d9\u30eb\u540d\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static String getFieldLabel(String objType, String fieldName){\n        return getDescribeFieldResult(objType, fieldName).getLabel();\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u30d5\u30a3\u30fc\u30eb\u30c9\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static Schema.DisplayType getFieldType(String objType, String fieldName){\n        return getDescribeFieldResult(objType, fieldName).getType();\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u95a2\u9023\u540d\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static String getRelationshipName(String objType, String fieldName){\n        Schema.DescribeFieldResult dfr = getDescribeFieldResult(objType, fieldName);\n        if(dfr.getType() != Schema.DisplayType.REFERENCE) throw new DescriberException('\\''+fieldName + '\\' of \\'' + objType + '.\\' is not a reference type.');\n        return dfr.getRelationshipName();\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u53c2\u7167\u578b\u306e\u969b\u306b\u53c2\u7167\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7(\u8907\u6570)\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static Set<String> getReferenceTo(String objType, String fieldName){\n        Schema.DescribeFieldResult dfr = getDescribeFieldResult(objType, fieldName);\n        if(dfr.getType() != Schema.DisplayType.REFERENCE) throw new DescriberException('\\''+fieldName + '\\' of \\'' + objType + '.\\' is not a reference type.');\n\n        Set<String> ret = new Set<String>();\n        List<Schema.SObjectType> objTypeList = dfr.getReferenceTo();\n        for(Schema.SObjectType t : objTypeList){\n            ret.add(t.getDescribe().getName());\n        }\n        return ret;\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u95a2\u9023\u540d\u304b\u3089\u3001\u95a2\u9023\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static String getChildObjectType(String objType, String relationshipName){\n        if(!isValidSObjectType(objType)) throw new DescriberException('\\''+objType + '\\' is not a valid sObject type.');\n        if(!isValidChildRelationshipName(objType, relationshipName)) throw new DescriberException('\\'' + relationshipName + '\\' is not a valid child relationship name for sObject \\'' + objType + '.\\'');\n\n        String ret = null;             \n        for(Schema.ChildRelationship childRelName : Schema.getGlobalDescribe().get(objType.trim()).getDescribe().getChildRelationships()){\n            if(!isNullOrEmpty(childRelName.getRelationshipName()) && childRelName.getrelationshipname().toLowerCase() == relationshipName.toLowerCase()){ \n                ret = childRelName.getChildSObject().getDescribe().getName();\n                break;\n            }\n        }\n        return ret;\n    }\n\n    // \u30ec\u30b3\u30fc\u30c9Id\u304b\u3089\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static String getObjectType(String recordId){\n        if(!isValidRecordId(recordId)) throw new DescriberException('\\'' + recordId + '\\' is not a valid record ID.');\n        Id recordIdFromString = recordId;\n        return recordIdFromString.getSObjectType().getDescribe().getName();\n    }\n\n    // \u30ec\u30b3\u30fc\u30c9Id\u304c\u3001\u6b63\u3057\u3044\u30ec\u30b3\u30fc\u30c9Id\u304b\u3092\u78ba\u8a8d\u3059\u308b\n    public static Boolean isValidRecordId(String recordId){\n        Boolean ret = false;\n        ret = !isNullOrEmpty(recordId) && recordId InstanceOf ID ;\n        o('Describer.isValidRecordId: record Id \\'' + recordId + '\\' is valid? ' + ret);\n        return ret;\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u95a2\u9023\u540d\u304b\u3089\u3001\u305d\u306e\u95a2\u9023\u540d\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6709\u52b9\u3067\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n    public static Boolean isValidChildRelationshipName(String objType, String relationshipName){\n        Boolean ret = false;\n        if(isValidSObjectType(objType) && !isNullOrEmpty(relationshipName)){    \n            for(Schema.ChildRelationship childRelName : Schema.getGlobalDescribe().get(objType).getDescribe().getChildRelationships()){\n                if(!isNullOrEmpty(childRelName.getRelationshipName()) && childRelName.getRelationshipName().toLowerCase() == relationshipName.toLowerCase()){ \n                    ret = true;\n                    break;\n                }\n            }\n        }\n        o('Describer.isValidRelationshipName: relationship name \\'' + relationshipName + '\\' for object type \\'' + objType + '\\' is valid? ' + ret);\n        return ret;\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u540d\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089 sObjectField \u3092\u53d6\u5f97\u3059\u308b\u3002\n    @testVisible\n    private static Schema.DescribeFieldResult getDescribeFieldResult(String objType, String fieldName){\n        if(!isValidSObjectType(objType))          throw new DescriberException('\\''+objType + '\\' is not a valid sObject type.');\n        if(!isValidFieldName(objType, fieldName)) throw new DescriberException('\\''+fieldName + '\\' is not a valid field name for sObject \\'' + objType + '.\\'');\n        return Schema.getGlobalDescribe().get(objType).getDescribe().fields.getMap().get(fieldName).getDescribe();\n    }\n\n    // \u30c7\u30d0\u30c3\u30b0\u7528\n    // \u3088\u304f\u308f\u304b\u3089\u306a\u3044\u6642\u306f\u3068\u308a\u3042\u3048\u305a\u3001\u30b3\u30e1\u30f3\u30c8\u3092\u6d88\u3057\u3066\u30ed\u30b0\u306b\u51fa\u3057\u3066\u307f\u308b\u3002\u30e9\u30f3\u30bf\u30a4\u30e0\u30b3\u30b9\u30c8\u306f\u30e4\u30d0\u30a4\u3002\n    private static void o(Object o){\n        //System.debug(JSON.serializePretty(o));\n    }\n\n    @testVisible\n    private static Boolean isNullOrEmpty(Object o){\n        return o == null || String.valueOf(o) == '';\n    }\n}\n\n\ngetDescribe\u3063\u3066\u305f\u307e\u306b\u4f7f\u3046\u306e\u3067\u3059\u304c\u3001\u30b3\u30fc\u30c9\u304c\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u77ed\u304f\u3067\u304d\u306a\u3044\u304b\u3068\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n###\u4f7f\u3046\u3068\u304d\u306f\u3053\u3093\u306a\u611f\u3058\u3067\n```java\nString AccountNameLabel = Describer.getFieldLabel('Account', 'name');\n```\n\n###\u3053\u3063\u3061\u3092\u30b3\u30d4\u30fc\u3057\u3066\n```java:Describer.apxc\npublic class Describer {\n    \n    public class DescriberException extends Exception {}\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u304b\u3089\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u304c\u6709\u52b9\u3067\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n    public static Boolean isValidSObjectType(String objType){ \n        Boolean ret = false;\n        if(!isNullOrEmpty(objType)){\n            ret = Schema.getGlobalDescribe().containsKey(objType);\n        }\n        o('Describer.isValidSObjectType: object type \\'' + objType + '\\' is valid? ' + ret);\n        return ret;\n    }\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6709\u52b9\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n    public static Boolean isValidFieldName(String objType, String fieldName){\n        Boolean ret = false;\n        if(isValidSObjectType(objType) && !isNullOrEmpty(fieldName)){\n            ret = Schema.getGlobalDescribe().get(objType).getDescribe().fields.getMap().containsKey(fieldName);\n        }   \n        o('Describer.isValidFieldName: field \\'' + fieldName + '\\' for object type \\'' + objType + '\\' is valid? ' + ret);\n        return ret;\n    }\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u30e9\u30d9\u30eb\u540d\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static String getFieldLabel(String objType, String fieldName){\n        return getDescribeFieldResult(objType, fieldName).getLabel();\n    }\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u30d5\u30a3\u30fc\u30eb\u30c9\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static Schema.DisplayType getFieldType(String objType, String fieldName){\n        return getDescribeFieldResult(objType, fieldName).getType();\n    }\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u95a2\u9023\u540d\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static String getRelationshipName(String objType, String fieldName){\n        Schema.DescribeFieldResult dfr = getDescribeFieldResult(objType, fieldName);\n        if(dfr.getType() != Schema.DisplayType.REFERENCE) throw new DescriberException('\\''+fieldName + '\\' of \\'' + objType + '.\\' is not a reference type.');\n        return dfr.getRelationshipName();\n    }\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u53c2\u7167\u578b\u306e\u969b\u306b\u53c2\u7167\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7(\u8907\u6570)\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static Set<String> getReferenceTo(String objType, String fieldName){\n        Schema.DescribeFieldResult dfr = getDescribeFieldResult(objType, fieldName);\n        if(dfr.getType() != Schema.DisplayType.REFERENCE) throw new DescriberException('\\''+fieldName + '\\' of \\'' + objType + '.\\' is not a reference type.');\n        \n        Set<String> ret = new Set<String>();\n        List<Schema.SObjectType> objTypeList = dfr.getReferenceTo();\n        for(Schema.SObjectType t : objTypeList){\n            ret.add(t.getDescribe().getName());\n        }\n        return ret;\n    }\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u95a2\u9023\u540d\u304b\u3089\u3001\u95a2\u9023\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static String getChildObjectType(String objType, String relationshipName){\n        if(!isValidSObjectType(objType)) throw new DescriberException('\\''+objType + '\\' is not a valid sObject type.');\n        if(!isValidChildRelationshipName(objType, relationshipName)) throw new DescriberException('\\'' + relationshipName + '\\' is not a valid child relationship name for sObject \\'' + objType + '.\\'');\n        \n        String ret = null;             \n        for(Schema.ChildRelationship childRelName : Schema.getGlobalDescribe().get(objType.trim()).getDescribe().getChildRelationships()){\n            if(!isNullOrEmpty(childRelName.getRelationshipName()) && childRelName.getrelationshipname().toLowerCase() == relationshipName.toLowerCase()){ \n                ret = childRelName.getChildSObject().getDescribe().getName();\n                break;\n            }\n        }\n        return ret;\n    }\n    \n    // \u30ec\u30b3\u30fc\u30c9Id\u304b\u3089\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\u3059\u308b\u3002\n    public static String getObjectType(String recordId){\n        if(!isValidRecordId(recordId)) throw new DescriberException('\\'' + recordId + '\\' is not a valid record ID.');\n        Id recordIdFromString = recordId;\n        return recordIdFromString.getSObjectType().getDescribe().getName();\n    }\n    \n    // \u30ec\u30b3\u30fc\u30c9Id\u304c\u3001\u6b63\u3057\u3044\u30ec\u30b3\u30fc\u30c9Id\u304b\u3092\u78ba\u8a8d\u3059\u308b\n    public static Boolean isValidRecordId(String recordId){\n        Boolean ret = false;\n        ret = !isNullOrEmpty(recordId) && recordId InstanceOf ID ;\n        o('Describer.isValidRecordId: record Id \\'' + recordId + '\\' is valid? ' + ret);\n        return ret;\n    }\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u3068\u95a2\u9023\u540d\u304b\u3089\u3001\u305d\u306e\u95a2\u9023\u540d\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6709\u52b9\u3067\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n    public static Boolean isValidChildRelationshipName(String objType, String relationshipName){\n        Boolean ret = false;\n        if(isValidSObjectType(objType) && !isNullOrEmpty(relationshipName)){    \n            for(Schema.ChildRelationship childRelName : Schema.getGlobalDescribe().get(objType).getDescribe().getChildRelationships()){\n                if(!isNullOrEmpty(childRelName.getRelationshipName()) && childRelName.getRelationshipName().toLowerCase() == relationshipName.toLowerCase()){ \n                    ret = true;\n                    break;\n                }\n            }\n        }\n        o('Describer.isValidRelationshipName: relationship name \\'' + relationshipName + '\\' for object type \\'' + objType + '\\' is valid? ' + ret);\n        return ret;\n    }\n    \n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u540d\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304b\u3089 sObjectField \u3092\u53d6\u5f97\u3059\u308b\u3002\n    @testVisible\n    private static Schema.DescribeFieldResult getDescribeFieldResult(String objType, String fieldName){\n        if(!isValidSObjectType(objType))          throw new DescriberException('\\''+objType + '\\' is not a valid sObject type.');\n        if(!isValidFieldName(objType, fieldName)) throw new DescriberException('\\''+fieldName + '\\' is not a valid field name for sObject \\'' + objType + '.\\'');\n        return Schema.getGlobalDescribe().get(objType).getDescribe().fields.getMap().get(fieldName).getDescribe();\n    }\n    \n    // \u30c7\u30d0\u30c3\u30b0\u7528\n    // \u3088\u304f\u308f\u304b\u3089\u306a\u3044\u6642\u306f\u3068\u308a\u3042\u3048\u305a\u3001\u30b3\u30e1\u30f3\u30c8\u3092\u6d88\u3057\u3066\u30ed\u30b0\u306b\u51fa\u3057\u3066\u307f\u308b\u3002\u30e9\u30f3\u30bf\u30a4\u30e0\u30b3\u30b9\u30c8\u306f\u30e4\u30d0\u30a4\u3002\n    private static void o(Object o){\n        //System.debug(JSON.serializePretty(o));\n    }\n    \n    @testVisible\n    private static Boolean isNullOrEmpty(Object o){\n        return o == null || String.valueOf(o) == '';\n    }\n}\n```\n", "tags": ["Apex", "Salesforce"]}