{"context": "http://www8.cao.go.jp/chosei/shukujitsu/gaiyou.html\n\u3053\u306e\u30cd\u7533CSV\u3092\u30d1\u30fc\u30b9\u3057\u307e\u3059\u3002\n\n$ruby -v\nruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin14]\n\nrequire 'open-uri'\nrequire 'csv'\nrequire 'pp'\n\n# http://okzk.org/blog/openuri_treat_under_10kb\n# Don't allow downloaded files to be created as StringIO.\n# Force a tempfile to be created.\nif OpenURI::Buffer.const_defined?('StringMax')\n  OpenURI::Buffer.send :remove_const, 'StringMax'\nend\nOpenURI::Buffer.const_set 'StringMax', 0\n\nURL = 'http://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv'.freeze\n\nopen(URL) do |io|\n  pp(CSV.read(io, encoding: 'CP932:UTF-8').flat_map do |row|\n    row.each_slice(2).flat_map do |name, date|\n      if date && Date._parse(date).key?(:mday)\n        [{ name: name, date: Date.parse(date) }]\n      else\n        []\n      end\n    end\n  end)\nend\n\n\n\u51fa\u529b\u7d50\u679c\u306e\u5148\u982d\n[{:name=>\"\u5143\u65e5\", :date=>#<Date: 2016-01-01 ((2457389j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5143\u65e5\", :date=>#<Date: 2017-01-01 ((2457755j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5143\u65e5\", :date=>#<Date: 2018-01-01 ((2458120j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u6210\u4eba\u306e\u65e5\", :date=>#<Date: 2016-01-11 ((2457399j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u6210\u4eba\u306e\u65e5\", :date=>#<Date: 2017-01-09 ((2457763j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u6210\u4eba\u306e\u65e5\", :date=>#<Date: 2018-01-08 ((2458127j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5efa\u56fd\u8a18\u5ff5\u306e\u65e5\", :date=>#<Date: 2016-02-11 ((2457430j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5efa\u56fd\u8a18\u5ff5\u306e\u65e5\", :date=>#<Date: 2017-02-11 ((2457796j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5efa\u56fd\u8a18\u5ff5\u306e\u65e5\", :date=>#<Date: 2018-02-11 ((2458161j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u6625\u5206\u306e\u65e5\", :date=>#<Date: 2016-03-20 ((2457468j,0s,0n),+0s,2299161j)>},\n\n\nhttp://www8.cao.go.jp/chosei/shukujitsu/gaiyou.html\n\n\u3053\u306e\u30cd\u7533CSV\u3092\u30d1\u30fc\u30b9\u3057\u307e\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-27 11.42.04.png](https://qiita-image-store.s3.amazonaws.com/0/3345/0252f675-9e77-2acb-04bd-8f6c5e817785.png)\n\n```\n$ruby -v\nruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin14]\n```\n\n```ruby\nrequire 'open-uri'\nrequire 'csv'\nrequire 'pp'\n\n# http://okzk.org/blog/openuri_treat_under_10kb\n# Don't allow downloaded files to be created as StringIO.\n# Force a tempfile to be created.\nif OpenURI::Buffer.const_defined?('StringMax')\n  OpenURI::Buffer.send :remove_const, 'StringMax'\nend\nOpenURI::Buffer.const_set 'StringMax', 0\n\nURL = 'http://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv'.freeze\n\nopen(URL) do |io|\n  pp(CSV.read(io, encoding: 'CP932:UTF-8').flat_map do |row|\n    row.each_slice(2).flat_map do |name, date|\n      if date && Date._parse(date).key?(:mday)\n        [{ name: name, date: Date.parse(date) }]\n      else\n        []\n      end\n    end\n  end)\nend\n\n```\n\n\u51fa\u529b\u7d50\u679c\u306e\u5148\u982d\n\n```\n[{:name=>\"\u5143\u65e5\", :date=>#<Date: 2016-01-01 ((2457389j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5143\u65e5\", :date=>#<Date: 2017-01-01 ((2457755j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5143\u65e5\", :date=>#<Date: 2018-01-01 ((2458120j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u6210\u4eba\u306e\u65e5\", :date=>#<Date: 2016-01-11 ((2457399j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u6210\u4eba\u306e\u65e5\", :date=>#<Date: 2017-01-09 ((2457763j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u6210\u4eba\u306e\u65e5\", :date=>#<Date: 2018-01-08 ((2458127j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5efa\u56fd\u8a18\u5ff5\u306e\u65e5\", :date=>#<Date: 2016-02-11 ((2457430j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5efa\u56fd\u8a18\u5ff5\u306e\u65e5\", :date=>#<Date: 2017-02-11 ((2457796j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u5efa\u56fd\u8a18\u5ff5\u306e\u65e5\", :date=>#<Date: 2018-02-11 ((2458161j,0s,0n),+0s,2299161j)>},\n {:name=>\"\u6625\u5206\u306e\u65e5\", :date=>#<Date: 2016-03-20 ((2457468j,0s,0n),+0s,2299161j)>},\n```\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u300c\u4f11\u65e5\u304c\u4e00\u89a7\u3067\u304d\u308bCSV\u4f5c\u3063\u305f\u3088\u30fc\u300d\u304c\u3042\u3093\u306a\u306b\u30a2\u30db\u306a\u306e\u306f\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u306a\u3044\u4eba\u304c\u610f\u601d\u6c7a\u5b9a\u3092\u3059\u308b\u304b\u3089\u3068\u63a8\u6e2c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u6559\u80b2\u306e\u5fc5\u8981\u6027\u81ea\u4f53\u306f\u611f\u3058\u308b\u306e\u3060\u304c\u3001\u5b50\u4f9b\u306e\u65b9\u3067\u306f\u306a\u304f\u610f\u601d\u6c7a\u5b9a\u3059\u308b\u5e74\u914d\u306e\u4eba\u306e\u65b9\u304c\u5148\u306b\u5b66\u3070\u306a\u3044\u3068\u3001\u4eca\u5f8c30\u5e74\u304f\u3089\u3044\u306e\u671f\u9593\u3001\u30cd\u7533Excel\u7684\u306a\u554f\u984c\u304c\u7d9a\u304f\u3068\u601d\u308f\u308c\u308b\u3002 <a href=\"https://t.co/C6bfzuH95I\">pic.twitter.com/C6bfzuH95I</a></p>&mdash; \u672a\u8b58@\ud83d\udc20\ud83c\udfed\u6280\u8853\u66f8\u51782 \u304a-03 (@mishiki) <a href=\"https://twitter.com/mishiki/status/834229573487169536\">2017\u5e742\u670822\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n", "tags": ["Ruby", "CSV"]}