{"context": " More than 1 year has passed since last update.Cocos2d-x\u3068Rx.cpp\u3067\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30eaCocosRx\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\nhttps://github.com/gamako/CocosRx\n\n\u306f\u3058\u3081\u306b\nRx.cpp\u3068\u3044\u3046C++\u7528\u306e\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u3002\nCocos2d-x\u3067\u4f7f\u3046\u306b\u306f\u3001\u5c11\u306a\u304f\u3068\u3082\u30a4\u30d9\u30f3\u30c8\u3092Observable\u3068\u3057\u3066\u6271\u3048\u306a\u3044\u3068\u59cb\u307e\u308a\u307e\u305b\u3093\u3002\u3068\u3063\u304b\u304b\u308a\u3068\u3057\u3066\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u66f4\u65b0\u306e\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3064\u304f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u308c\u3060\u3051\u3067\u3082\u3044\u304f\u3089\u304b\u904a\u3079\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001Cocos2d-x\u3067\uff08\u3068\u3044\u3046\u304bc++\u3067\uff09\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u3053\u3068\u306b\u610f\u5473\u304c\u3042\u308b\u306e\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u3082\u3057\u304b\u3057\u305f\u3089\u3001\u3068\u3066\u3082\u4e0d\u6bdb\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304cw\n\n\u5c0e\u5165\u65b9\u6cd5\nCocos2d-x\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u4e00\u7dd2\u306b/Classes\u4ee5\u4e0b\u306ecpp\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3082\u3061\u308d\u3093Rx.cpp\u3082\u5fc5\u8981\u3067\u3059\u3002Rx.cpp\u306e/Rx/v2/src/rxcpp\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6271\u3046\nCCRxTouchEvent.h\u306eCCRx::touchEventObservable\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092Observable\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5185\u90e8\u3067\u306fcocos::EventDispatcher::addEventListenerWithSceneGraphPriority\u3067\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\nnamespace CCRx {\n\n    typedef rxcpp::observable<cocos2d::Touch*> TouchEventObservable;\n\n    rxcpp::observable<std::tuple<cocos2d::Touch*, TouchEventObservable>>\n        touchEventObservable(\n            cocos2d::Node* targetNode,\n            std::function<bool(cocos2d::Touch*)> isBegan = nullptr,\n            bool isSwallow = false);\n}\n\n\u8fd4\u3059Observable\u306f\u3001\u30bf\u30c3\u30c1\u304c\u59cb\u307e\u3063\u305f\u5834\u6240\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u30af\u30e9\u30b9\u3068\u3001TouchEventObservable\u306etuple\u306eObservable\u3067\u3059\u3002\nTouchEventObservable\u306f\u3001\u4e00\u56de\u306e\u30bf\u30c3\u30c1\uff0f\u30c9\u30e9\u30c3\u30b0\u306e\u59cb\u307e\u308a\u304b\u3089\u7d42\u308f\u308a\u307e\u3067\u3092\u63d0\u4f9b\u3059\u308bObservable\u3067\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3046\u3068\u3001\u30c9\u30e9\u30c3\u30b0\uff08\u30d5\u30ea\u30c3\u30af\uff09\u64cd\u4f5c\u306b\u5f93\u3063\u3066\u5de6\u53f3\u65b9\u5411\u306b\u30ad\u30e3\u30e9\u30af\u30bf\u3092\u52d5\u304b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n#include \"CCRxTouchEvent.h\"\n\n...\n\n    auto player = Sprite::create(\"player.png\");\n    addChild(player);\n\n    auto touchObservableObservable = CCRx::touchEventObservable(this, nullptr, false);\n\n    // move player sprite according to touch and move\n    auto shared_player = RefPtr<Sprite>(player);\n\n    touchObservableObservable.subscribe(rxu::apply_to([=](Touch *t, CCRx::TouchEventObservable o) {\n\n        auto touchPointOrigin = this->getParent()->convertToNodeSpace(t->getLocation());\n        auto playerOrigin = shared_player->getPosition();\n\n        o.subscribe(\n                    [=](Touch* t){\n\n                        auto touchPoint = this->getParent()->convertToNodeSpace(t->getLocation());\n                        auto newPosition = playerOrigin + (touchPoint - touchPointOrigin);\n                        shared_player->setPosition(\n                            std::max(\n                                std::min(newPosition.x, visibleSize.width), 0.0f), playerOrigin.y);\n\n                    });\n    }));\n\n\n\u30d5\u30ec\u30fc\u30e0\u66f4\u65b0\u306e\u30a4\u30d9\u30f3\u30c8\nCCRx::interval\u3092\u4f7f\u3046\u3068\u3001\u30bf\u30a4\u30de\u30fc\u51e6\u7406\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002interval\u30920\u3068\u3057\u3066\u6271\u3046\u3068\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3070\u308c\u308b\u306e\u3067\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\u306b\u4f7f\u3048\u307e\u3059\u3002\n\u5185\u90e8\u3067cocos::Scheduler::schedule\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nnamespace CCRx {\n    rxcpp::observable<float> interval(cocos2d::Node* targetNode, float interval);\n}\n\n\u6b21\u306e\u4f8b\u3067\u306f3\u79d2\u306b\u4e00\u5ea6\u6575\u30ad\u30e3\u30e9\u3092\u914d\u7f6e\u3057\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u98db\u3070\u3057\u3066\u3044\u307e\u3059\u3002\n#include \"CCRxScheduler.h\"\n\n...\n\n    auto rnd = std::make_shared<std::mt19937>();\n\n    CCRx::interval(this, 3)\n    .start_with(0)\n    .as_dynamic()\n    .subscribe([=](float) {\n        std::uniform_real_distribution<float> xDist(0.0 ,visibleSize.width);\n        const auto fromX = xDist(*rnd);\n        const auto toX = xDist(*rnd);\n        const auto startPosition = Vec2{fromX, visibleSize.height};\n        const float speed = 100.0;\n        const auto vector = (Vec2{toX, 0} - startPosition).getNormalized() * speed;\n\n        auto enemy = RefPtr<Sprite>(Sprite::create(\"enemy.png\"));\n        addChild(enemy.get());\n\n        enemy->setPosition(startPosition);\n\n        CCRx::interval(enemy.get(), 0)\n        .scan(0.0f, [](float sum, float b) { return sum + b; })\n        .as_dynamic()\n        .subscribe([=](float delta) {\n            enemy->setPosition(startPosition + vector * delta);\n\n            if (enemy->getPosition().y < 0) {\n                enemy->removeFromParent();\n            }\n        });\n\n    });\n\n\n\n\u3055\u3089\u306b\u30b5\u30f3\u30d7\u30eb\ngithub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u306f\u3001\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30b2\u30fc\u30e0\u3063\u307d\u3044\u30b5\u30f3\u30d7\u30eb\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u5b9f\u4f8b\u304c\u6b32\u3057\u3044\u65b9\u306f\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/gamako/CocosRx\n\n\nCocos2d-x\u3068Rx.cpp\u3067\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30eaCocosRx\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n<https://github.com/gamako/CocosRx>\n\n\u306f\u3058\u3081\u306b\n-------\n\n[Rx.cpp](https://rxcpp.codeplex.com/)\u3068\u3044\u3046C++\u7528\u306e\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u3002\n\nCocos2d-x\u3067\u4f7f\u3046\u306b\u306f\u3001\u5c11\u306a\u304f\u3068\u3082\u30a4\u30d9\u30f3\u30c8\u3092Observable\u3068\u3057\u3066\u6271\u3048\u306a\u3044\u3068\u59cb\u307e\u308a\u307e\u305b\u3093\u3002\u3068\u3063\u304b\u304b\u308a\u3068\u3057\u3066\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u66f4\u65b0\u306e\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3064\u304f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u308c\u3060\u3051\u3067\u3082\u3044\u304f\u3089\u304b\u904a\u3079\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001Cocos2d-x\u3067\uff08\u3068\u3044\u3046\u304bc++\u3067\uff09\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u3053\u3068\u306b\u610f\u5473\u304c\u3042\u308b\u306e\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u3082\u3057\u304b\u3057\u305f\u3089\u3001\u3068\u3066\u3082\u4e0d\u6bdb\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304cw\n\n\u5c0e\u5165\u65b9\u6cd5\n--------\n\nCocos2d-x\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u4e00\u7dd2\u306b/Classes\u4ee5\u4e0b\u306ecpp\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3082\u3061\u308d\u3093Rx.cpp\u3082\u5fc5\u8981\u3067\u3059\u3002Rx.cpp\u306e/Rx/v2/src/rxcpp\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6271\u3046\n----------------\n\nCCRxTouchEvent.h\u306eCCRx::touchEventObservable\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092Observable\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5185\u90e8\u3067\u306fcocos::EventDispatcher::addEventListenerWithSceneGraphPriority\u3067\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n``` cpp\nnamespace CCRx {\n\n    typedef rxcpp::observable<cocos2d::Touch*> TouchEventObservable;\n\n    rxcpp::observable<std::tuple<cocos2d::Touch*, TouchEventObservable>>\n        touchEventObservable(\n            cocos2d::Node* targetNode,\n            std::function<bool(cocos2d::Touch*)> isBegan = nullptr,\n            bool isSwallow = false);\n}\n```\n\n\u8fd4\u3059Observable\u306f\u3001\u30bf\u30c3\u30c1\u304c\u59cb\u307e\u3063\u305f\u5834\u6240\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u30af\u30e9\u30b9\u3068\u3001TouchEventObservable\u306etuple\u306eObservable\u3067\u3059\u3002\nTouchEventObservable\u306f\u3001\u4e00\u56de\u306e\u30bf\u30c3\u30c1\uff0f\u30c9\u30e9\u30c3\u30b0\u306e\u59cb\u307e\u308a\u304b\u3089\u7d42\u308f\u308a\u307e\u3067\u3092\u63d0\u4f9b\u3059\u308bObservable\u3067\u3059\u3002\n\n\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3046\u3068\u3001\u30c9\u30e9\u30c3\u30b0\uff08\u30d5\u30ea\u30c3\u30af\uff09\u64cd\u4f5c\u306b\u5f93\u3063\u3066\u5de6\u53f3\u65b9\u5411\u306b\u30ad\u30e3\u30e9\u30af\u30bf\u3092\u52d5\u304b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n``` cpp\n\n#include \"CCRxTouchEvent.h\"\n\n...\n\n    auto player = Sprite::create(\"player.png\");\n    addChild(player);\n\n    auto touchObservableObservable = CCRx::touchEventObservable(this, nullptr, false);\n\n    // move player sprite according to touch and move\n    auto shared_player = RefPtr<Sprite>(player);\n\n    touchObservableObservable.subscribe(rxu::apply_to([=](Touch *t, CCRx::TouchEventObservable o) {\n        \n        auto touchPointOrigin = this->getParent()->convertToNodeSpace(t->getLocation());\n        auto playerOrigin = shared_player->getPosition();\n\n        o.subscribe(\n                    [=](Touch* t){\n\n                        auto touchPoint = this->getParent()->convertToNodeSpace(t->getLocation());\n                        auto newPosition = playerOrigin + (touchPoint - touchPointOrigin);\n                        shared_player->setPosition(\n                            std::max(\n                                std::min(newPosition.x, visibleSize.width), 0.0f), playerOrigin.y);\n\n                    });\n    }));\n```\n\n\n\u30d5\u30ec\u30fc\u30e0\u66f4\u65b0\u306e\u30a4\u30d9\u30f3\u30c8\n-----------------\n\nCCRx::interval\u3092\u4f7f\u3046\u3068\u3001\u30bf\u30a4\u30de\u30fc\u51e6\u7406\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002interval\u30920\u3068\u3057\u3066\u6271\u3046\u3068\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3070\u308c\u308b\u306e\u3067\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\u306b\u4f7f\u3048\u307e\u3059\u3002\n\u5185\u90e8\u3067cocos::Scheduler::schedule\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nnamespace CCRx {\n    rxcpp::observable<float> interval(cocos2d::Node* targetNode, float interval);\n}\n```\n\n\u6b21\u306e\u4f8b\u3067\u306f3\u79d2\u306b\u4e00\u5ea6\u6575\u30ad\u30e3\u30e9\u3092\u914d\u7f6e\u3057\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u98db\u3070\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp\n#include \"CCRxScheduler.h\"\n\n...\n\n    auto rnd = std::make_shared<std::mt19937>();\n    \n    CCRx::interval(this, 3)\n    .start_with(0)\n    .as_dynamic()\n    .subscribe([=](float) {\n        std::uniform_real_distribution<float> xDist(0.0 ,visibleSize.width);\n        const auto fromX = xDist(*rnd);\n        const auto toX = xDist(*rnd);\n        const auto startPosition = Vec2{fromX, visibleSize.height};\n        const float speed = 100.0;\n        const auto vector = (Vec2{toX, 0} - startPosition).getNormalized() * speed;\n\n        auto enemy = RefPtr<Sprite>(Sprite::create(\"enemy.png\"));\n        addChild(enemy.get());\n        \n        enemy->setPosition(startPosition);\n\n        CCRx::interval(enemy.get(), 0)\n        .scan(0.0f, [](float sum, float b) { return sum + b; })\n        .as_dynamic()\n        .subscribe([=](float delta) {\n            enemy->setPosition(startPosition + vector * delta);\n            \n            if (enemy->getPosition().y < 0) {\n                enemy->removeFromParent();\n            }\n        });\n        \n    });\n\n```\n\n\u3055\u3089\u306b\u30b5\u30f3\u30d7\u30eb\n-------------\n\ngithub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u306f\u3001\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30b2\u30fc\u30e0\u3063\u307d\u3044\u30b5\u30f3\u30d7\u30eb\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u5b9f\u4f8b\u304c\u6b32\u3057\u3044\u65b9\u306f\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n<https://github.com/gamako/CocosRx>\n\n![CCRxSample.png](https://qiita-image-store.s3.amazonaws.com/0/55599/ae3c1a5a-042c-8321-1db4-3684cb02040f.png \"CCRxSample.png\")\n\n\n", "tags": ["cocos2d-x", "Rx", "FRP"]}