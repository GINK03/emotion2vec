{"context": "    // maximum matching algorithm\n    // unweighted bipartite graph\n    // dfs hungarian algorithm\n\n    function dfs($bigraph, $u, &$path, &$matching){\n        foreach($bigraph[$u] as $v){\n            if(!isset($path[$v])){      // not in path already\n                $path[$v] = true;\n                if(!isset($matching[$v]) || dfs($bigraph, $matching[$v], $path, $matching)){\n                    // not matching node, the path is agumenting path, switch path, and return true\n                    $matching[$v] = $u;\n                    $matching[$u] = $v;\n                    return true;\n                }\n            }\n        }\n\n        return false;                   // not agumenting path\n    }\n\n    function hungarian($bigraph){\n        $matching = [];\n\n        foreach($bigraph as $u=>$x){\n            if(!isset($matching[$u])){  // not a matching node\n                $path = [];             // save the nodes in path\n                dfs($bigraph, $u, $path, $matching);\n            }\n        }\n\n        return array_intersect_key($matching, $bigraph);\n    }\n\n    // left node idx is key\n    // right nodes is value\n    // eg. left nodes: 0 - 4, right nodes = 5 - 9\n    $bigraph = [0 => [6, 9], 1 => [7], 2 => [6, 8], 3 => [8, 9], 4 => [5, 7]];\n    $r = hungarian($bigraph);\n    print_r($r);\n?>\n\n```php\n\t// maximum matching algorithm\n\t// unweighted bipartite graph\n\t// dfs hungarian algorithm\n\n\tfunction dfs($bigraph, $u, &$path, &$matching){\n\t\tforeach($bigraph[$u] as $v){\n\t\t\tif(!isset($path[$v])){\t\t// not in path already\n\t\t\t\t$path[$v] = true;\n\t\t\t\tif(!isset($matching[$v]) || dfs($bigraph, $matching[$v], $path, $matching)){\n\t\t\t\t\t// not matching node, the path is agumenting path, switch path, and return true\n\t\t\t\t\t$matching[$v] = $u;\n\t\t\t\t\t$matching[$u] = $v;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false; \t\t\t\t\t// not agumenting path\n\t}\n\t\n\tfunction hungarian($bigraph){\n\t\t$matching = [];\n\n\t\tforeach($bigraph as $u=>$x){\n\t\t\tif(!isset($matching[$u])){\t// not a matching node\n\t\t\t\t$path = []; \t\t\t// save the nodes in path\n\t\t\t\tdfs($bigraph, $u, $path, $matching);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array_intersect_key($matching, $bigraph);\n\t}\n\n\t// left node idx is key\n\t// right nodes is value\n\t// eg. left nodes: 0 - 4, right nodes = 5 - 9\n\t$bigraph = [0 => [6, 9], 1 => [7], 2 => [6, 8], 3 => [8, 9], 4 => [5, 7]];\n\t$r = hungarian($bigraph);\n\tprint_r($r);\n?>\n```\n", "tags": ["PHP", "algorithm"]}