{"tags": ["STM32", "ARM"], "context": "libopencm3\u3092\u4f7f\u3063\u3066STM32\u306b\u63a5\u7d9a\u3057\u305fLED\u3092\u30c1\u30ab\u30c1\u30ab\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nlibopencm3\u306f\u3001Cortex M\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e LGPLv3\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n\u4f7f\u7528\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\n\nNUCLEO-F103RB \n\n\nSTM32F103RBT6\u304c\u8f09\u3063\u3066\u3044\u308b\u3002\n\u30dc\u30fc\u30c9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306fMB1136 C-03\nST-LINK\u304c\u5185\u8535\u3055\u308c\u3066\u3044\u308b\u3002 ST-LINK\u306eFW\u3092\u6700\u65b0\u7248\u306b\u4e0a\u3052\u3066\u304b\u3089\u4f7f\u3044\u307e\u3057\u305f\u3002\nLED\u306fPA5\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u3002 \n\n\n\n\n\u30bd\u30d5\u30c8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nMAC homebrew\u3092\u4f7f\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u3059\u3002\n\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067stlink\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n$ brew install stlink\n$ brew tap PX4/homebrew-px4\n$ brew update\n$ brew install gcc-arm-none-eabi\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nLED\u30c1\u30ab\u30c1\u30ab\u306e\u30b5\u30f3\u30d7\u30eb\u306f https://github.com/dword1511/stm32-vserprog \u3092\u5143\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\n\nGPIO\u3092\u4f7f\u3046\u305f\u3081\u306b\u306b\u3001rcc_periph_clock_enable()\u3067\u30dd\u30fc\u30c8\u306e\u30af\u30ed\u30c3\u30af\u3092\u6709\u52b9\u306b\u3059\u308b\u3002\ngpio_set_mode()\u3067\u3001GPIO\u306e\u51fa\u529b\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\u3059\u308b\u3002\ngpio_set()\u3067\u3001GPIO\u3092High\u51fa\u529b\u3059\u308b\u3002\n\n\n\n\nlchika.c\n#include <stdio.h>\n\n#include <libopencm3/stm32/rcc.h>\n#include <libopencm3/stm32/gpio.h>\n\n#include \"board.h\"\n\n#define LED_ENABLE()  gpio_set_mode(BOARD_PORT_LED, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, BOARD_PIN_LED)\n#define LED_DISABLE() gpio_set_mode(BOARD_PORT_LED, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, BOARD_PIN_LED)\n\n#define LED_BUSY()    gpio_set(BOARD_PORT_LED, BOARD_PIN_LED)\n#define LED_IDLE()    gpio_clear(BOARD_PORT_LED, BOARD_PIN_LED)\n\nint main(void) {\n  uint32_t i;\n\n  rcc_periph_clock_enable(BOARD_RCC_LED);\n  LED_ENABLE();\n  LED_BUSY();\n\n  while (1) { \n    LED_DISABLE();\n    for (i = 0; i < rcc_ahb_frequency / 5; i ++) { \n      asm(\"nop\");\n    }\n    LED_ENABLE();\n    LED_BUSY();\n    for (i = 0; i < rcc_ahb_frequency / 5; i ++) { \n      asm(\"nop\");\n    }\n  }\n\n  return 0;\n}\n\n\n\n\nboard.h\n#ifndef __BOARD_H__\n#define __BOARD_H__\n\n#include <libopencm3/stm32/rcc.h>\n#include <libopencm3/stm32/gpio.h>\n\n#define BOARD_RCC_LED                RCC_GPIOA\n#define BOARD_PORT_LED               GPIOA\n#define BOARD_PIN_LED                GPIO5\n\n#endif /* __BOARD_H__ */\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\n\nlibopencm3\u3092git\u3067\u6301\u3063\u3066\u304f\u308b\u3002\n\n$ git clone https://github.com/libopencm3/libopencm3.git\n\n\nstm32-vserprog \u306eMakefile\u3092\u5143\u306bMakefile\u3092\u4f5c\u3063\u305f\u3002\n\n# Makefile\n\n###############################################################################\n\nPROGRAM  = stm32-lchika\nCROSS   ?= arm-none-eabi\nOBJS     = lchika.o \n\n###############################################################################\n\nARCH_FLAGS = -DSTM32F1 -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd\nLDSCRIPT   = libopencm3/lib/stm32/f1/stm32f103xb.ld\nLIBOPENCM3 = libopencm3/lib/libopencm3_stm32f1.a\nOPENCM3_MK = lib/stm32/f1\n\n###############################################################################\n\nCC       = $(CROSS)-gcc\nLD       = $(CROSS)-ld\nOBJCOPY  = $(CROSS)-objcopy\nOBJDUMP  = $(CROSS)-objdump\nSIZE     = $(CROSS)-size\n\nELF      = $(PROGRAM).elf\nBIN      = $(PROGRAM).bin\nMAP      = $(PROGRAM).map\nDMP      = $(PROGRAM).out\n\nall:\n        @make firmware\n\nCFLAGS  += -O3 -Wall -g\nCFLAGS  += -fno-common -ffunction-sections -fdata-sections\nCFLAGS  += $(ARCH_FLAGS) -Ilibopencm3/include/ $(EXTRA_CFLAGS)\n\nLIBC     = $(shell $(CC) $(CFLAGS) --print-file-name=libc.a)\nLIBNOSYS = $(shell $(CC) $(CFLAGS) --print-file-name=libnosys.a)\nLIBGCC   = $(shell $(CC) $(CFLAGS) --print-libgcc-file-name)\n\n# LDPATH is required for libopencm3 ld scripts to work.\nLDPATH   = libopencm3/lib/\nLDFLAGS += -L$(LDPATH) -T$(LDSCRIPT) -Map $(MAP) --gc-sections\nLDLIBS  += $(LIBOPENCM3) $(LIBC) $(LIBNOSYS) $(LIBGCC)\n\nfirmware: $(LIBOPENCM3) $(BIN) $(DMP) size\n\n$(ELF): $(LDSCRIPT) $(OBJS)\n        $(LD) -o $@ $(LDFLAGS) $(OBJS) $(LDLIBS)\n\n$(DMP): $(ELF)\n        $(OBJDUMP) -d $< > $@\n\n%.bin: %.elf\n        $(OBJCOPY) -S -O binary $< $@\n\n%.o: %.c board.h\n        $(CC) $(CFLAGS) -c $< -o $@\n\n$(LIBOPENCM3):\n        CFLAGS=\"$(CFLAGS)\" make -C libopencm3 $(OPENCM3_MK) V=1\n\n\n.PHONY: clean size\n\nclean:\n        rm -f $(OBJS) $(ELF) $(BIN) $(MAP) $(DMP) \n\n\nsize: $(PROGRAM).elf\n        @echo \"\"\n        @$(SIZE) $(PROGRAM).elf\n        @echo \"\"\n\n\n\nmake\u3059\u308b\u3002\u3000(make\u3059\u308b\u3068libopencm3\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u3001\u30ed\u30b0\u306f\u5272\u611b)\n\n$ make\narm-none-eabi-gcc -O3 -Wall -g -fno-common -ffunction-sections -fdata-sections -DSTM32F1 -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd -Ilibopencm3/include/  -c lchika.c -o lchika.o\narm-none-eabi-ld -o stm32-lchika.elf -Llibopencm3/lib/ -Tlibopencm3/lib/stm32/f1/stm32f103xb.ld -Map stm32-lchika.map --gc-sections lchika.o  libopencm3/lib/libopencm3_stm32f1.a /usr/local/Cellar/gcc-arm-none-eabi-49/20150609/bin/../lib/gcc/arm-none-eabi/4.9.3/../../../../arm-none-eabi/lib/armv7-m/libc.a /usr/local/Cellar/gcc-arm-none-eabi-49/20150609/bin/../lib/gcc/arm-none-eabi/4.9.3/../../../../arm-none-eabi/lib/armv7-m/libnosys.a /usr/local/Cellar/gcc-arm-none-eabi-49/20150609/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7-m/libgcc.a\narm-none-eabi-objcopy -S -O binary stm32-lchika.elf stm32-lchika.bin\narm-none-eabi-objdump -d stm32-lchika.elf > stm32-lchika.out\n\n   text    data     bss     dec     hex filename\n    808       4       0     812     32c stm32-lchika.elf\n\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\nst-flash\u3092\u4f7f\u3063\u3066stm32-lchika.bin\u3092flash\u306e\u3042\u308b0x8000000\u306b\u66f8\u304d\u8fbc\u3080\u3002\nst-flash\u306ferase\u3082\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u3001openocd\u3088\u308a\u697d\u3067\u3059\u3002\n\n$ st-flash write stm32-lchika.bin  0x8000000\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Loading device parameters....\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Device connected is: F1 Medium-density device, id 0x20036410\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: SRAM size: 0x5000 bytes (20 KiB), Flash: 0x20000 bytes (128 KiB) in pages of 1024 bytes\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Attempting to write 816 (0x330) bytes to stm32 address: 134217728 (0x8000000)\nFlash page at addr: 0x08000000 erased\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Finished erasing 1 pages of 1024 (0x400) bytes\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Starting Flash write for VL/F0/F3 core id\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Successfully loaded flash loader in sram\n  0/0 pages written\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Starting verification of write complete\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Flash written and verified! jolly good!\n\n\n\u7d50\u679c\n\nSTM32 Nucleo Board STMF32F103 \u3067 LED\u304c\u30c1\u30ab\u30c1\u30ab\u3057\u307e\u3057\u305f\u3002\nST\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u610f\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001libopencm3\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002 \nlibopencm3\u306f\u3001github\u304b\u3089\u6301\u3063\u3066\u304d\u3066\u3001\u3059\u3050\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u3067\u304d\u308b\u306e\u304c\u826f\u3044\u3067\u3059\u3002 \n\nlibopencm3\u3092\u4f7f\u3063\u3066STM32\u306b\u63a5\u7d9a\u3057\u305fLED\u3092\u30c1\u30ab\u30c1\u30ab\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n[libopencm3](http://www.libopencm3.org/)\u306f\u3001Cortex M\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e LGPLv3\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n#\u4f7f\u7528\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\n* NUCLEO-F103RB \n * STM32F103RBT6\u304c\u8f09\u3063\u3066\u3044\u308b\u3002\n * \u30dc\u30fc\u30c9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306fMB1136 C-03\n * ST-LINK\u304c\u5185\u8535\u3055\u308c\u3066\u3044\u308b\u3002 ST-LINK\u306eFW\u3092\u6700\u65b0\u7248\u306b\u4e0a\u3052\u3066\u304b\u3089\u4f7f\u3044\u307e\u3057\u305f\u3002\n * LED\u306fPA5\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u3002 \n\n#\u30bd\u30d5\u30c8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n* MAC homebrew\u3092\u4f7f\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u3059\u3002\n* \u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067stlink\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```\n$ brew install stlink\n$ brew tap PX4/homebrew-px4\n$ brew update\n$ brew install gcc-arm-none-eabi\n```\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n* LED\u30c1\u30ab\u30c1\u30ab\u306e\u30b5\u30f3\u30d7\u30eb\u306f https://github.com/dword1511/stm32-vserprog \u3092\u5143\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n* \u30b3\u30fc\u30c9\u306e\u8aac\u660e\n * GPIO\u3092\u4f7f\u3046\u305f\u3081\u306b\u306b\u3001rcc_periph_clock_enable()\u3067\u30dd\u30fc\u30c8\u306e\u30af\u30ed\u30c3\u30af\u3092\u6709\u52b9\u306b\u3059\u308b\u3002\n * gpio_set_mode()\u3067\u3001GPIO\u306e\u51fa\u529b\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\u3059\u308b\u3002\n * gpio_set()\u3067\u3001GPIO\u3092High\u51fa\u529b\u3059\u308b\u3002\n\n```c:lchika.c\n#include <stdio.h>\n\n#include <libopencm3/stm32/rcc.h>\n#include <libopencm3/stm32/gpio.h>\n\n#include \"board.h\"\n\n#define LED_ENABLE()  gpio_set_mode(BOARD_PORT_LED, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, BOARD_PIN_LED)\n#define LED_DISABLE() gpio_set_mode(BOARD_PORT_LED, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, BOARD_PIN_LED)\n\n#define LED_BUSY()    gpio_set(BOARD_PORT_LED, BOARD_PIN_LED)\n#define LED_IDLE()    gpio_clear(BOARD_PORT_LED, BOARD_PIN_LED)\n\nint main(void) {\n  uint32_t i;\n\n  rcc_periph_clock_enable(BOARD_RCC_LED);\n  LED_ENABLE();\n  LED_BUSY();\n\n  while (1) { \n    LED_DISABLE();\n    for (i = 0; i < rcc_ahb_frequency / 5; i ++) { \n      asm(\"nop\");\n    }\n    LED_ENABLE();\n    LED_BUSY();\n    for (i = 0; i < rcc_ahb_frequency / 5; i ++) { \n      asm(\"nop\");\n    }\n  }\n\n  return 0;\n}\n\n```\n\n```c:board.h\n#ifndef __BOARD_H__\n#define __BOARD_H__\n\n#include <libopencm3/stm32/rcc.h>\n#include <libopencm3/stm32/gpio.h>\n\n#define BOARD_RCC_LED                RCC_GPIOA\n#define BOARD_PORT_LED               GPIOA\n#define BOARD_PIN_LED                GPIO5\n\n#endif /* __BOARD_H__ */\n```\n\n# \u30b3\u30f3\u30d1\u30a4\u30eb\n\n* libopencm3\u3092git\u3067\u6301\u3063\u3066\u304f\u308b\u3002\n\n```\n$ git clone https://github.com/libopencm3/libopencm3.git\n```\n\n* stm32-vserprog \u306eMakefile\u3092\u5143\u306bMakefile\u3092\u4f5c\u3063\u305f\u3002\n\n```\n# Makefile\n\n###############################################################################\n\nPROGRAM  = stm32-lchika\nCROSS   ?= arm-none-eabi\nOBJS     = lchika.o \n\n###############################################################################\n\nARCH_FLAGS = -DSTM32F1 -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd\nLDSCRIPT   = libopencm3/lib/stm32/f1/stm32f103xb.ld\nLIBOPENCM3 = libopencm3/lib/libopencm3_stm32f1.a\nOPENCM3_MK = lib/stm32/f1\n\n###############################################################################\n\nCC       = $(CROSS)-gcc\nLD       = $(CROSS)-ld\nOBJCOPY  = $(CROSS)-objcopy\nOBJDUMP  = $(CROSS)-objdump\nSIZE     = $(CROSS)-size\n\nELF      = $(PROGRAM).elf\nBIN      = $(PROGRAM).bin\nMAP      = $(PROGRAM).map\nDMP      = $(PROGRAM).out\n\nall:\n        @make firmware\n\nCFLAGS  += -O3 -Wall -g\nCFLAGS  += -fno-common -ffunction-sections -fdata-sections\nCFLAGS  += $(ARCH_FLAGS) -Ilibopencm3/include/ $(EXTRA_CFLAGS)\n\nLIBC     = $(shell $(CC) $(CFLAGS) --print-file-name=libc.a)\nLIBNOSYS = $(shell $(CC) $(CFLAGS) --print-file-name=libnosys.a)\nLIBGCC   = $(shell $(CC) $(CFLAGS) --print-libgcc-file-name)\n\n# LDPATH is required for libopencm3 ld scripts to work.\nLDPATH   = libopencm3/lib/\nLDFLAGS += -L$(LDPATH) -T$(LDSCRIPT) -Map $(MAP) --gc-sections\nLDLIBS  += $(LIBOPENCM3) $(LIBC) $(LIBNOSYS) $(LIBGCC)\n\nfirmware: $(LIBOPENCM3) $(BIN) $(DMP) size\n\n$(ELF): $(LDSCRIPT) $(OBJS)\n        $(LD) -o $@ $(LDFLAGS) $(OBJS) $(LDLIBS)\n\n$(DMP): $(ELF)\n        $(OBJDUMP) -d $< > $@\n\n%.bin: %.elf\n        $(OBJCOPY) -S -O binary $< $@\n\n%.o: %.c board.h\n        $(CC) $(CFLAGS) -c $< -o $@\n\n$(LIBOPENCM3):\n        CFLAGS=\"$(CFLAGS)\" make -C libopencm3 $(OPENCM3_MK) V=1\n\n\n.PHONY: clean size\n\nclean:\n        rm -f $(OBJS) $(ELF) $(BIN) $(MAP) $(DMP) \n\n\nsize: $(PROGRAM).elf\n        @echo \"\"\n        @$(SIZE) $(PROGRAM).elf\n        @echo \"\"\n\n```\n\n* make\u3059\u308b\u3002\u3000(make\u3059\u308b\u3068libopencm3\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u3001\u30ed\u30b0\u306f\u5272\u611b)\n\n```\n$ make\narm-none-eabi-gcc -O3 -Wall -g -fno-common -ffunction-sections -fdata-sections -DSTM32F1 -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd -Ilibopencm3/include/  -c lchika.c -o lchika.o\narm-none-eabi-ld -o stm32-lchika.elf -Llibopencm3/lib/ -Tlibopencm3/lib/stm32/f1/stm32f103xb.ld -Map stm32-lchika.map --gc-sections lchika.o  libopencm3/lib/libopencm3_stm32f1.a /usr/local/Cellar/gcc-arm-none-eabi-49/20150609/bin/../lib/gcc/arm-none-eabi/4.9.3/../../../../arm-none-eabi/lib/armv7-m/libc.a /usr/local/Cellar/gcc-arm-none-eabi-49/20150609/bin/../lib/gcc/arm-none-eabi/4.9.3/../../../../arm-none-eabi/lib/armv7-m/libnosys.a /usr/local/Cellar/gcc-arm-none-eabi-49/20150609/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7-m/libgcc.a\narm-none-eabi-objcopy -S -O binary stm32-lchika.elf stm32-lchika.bin\narm-none-eabi-objdump -d stm32-lchika.elf > stm32-lchika.out\n\n   text\t   data\t    bss\t    dec\t    hex\tfilename\n    808\t      4\t      0\t    812\t    32c\tstm32-lchika.elf\n```\n\n# \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n* st-flash\u3092\u4f7f\u3063\u3066stm32-lchika.bin\u3092flash\u306e\u3042\u308b0x8000000\u306b\u66f8\u304d\u8fbc\u3080\u3002\n* st-flash\u306ferase\u3082\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u3001openocd\u3088\u308a\u697d\u3067\u3059\u3002\n\n```\n$ st-flash write stm32-lchika.bin  0x8000000\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Loading device parameters....\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Device connected is: F1 Medium-density device, id 0x20036410\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: SRAM size: 0x5000 bytes (20 KiB), Flash: 0x20000 bytes (128 KiB) in pages of 1024 bytes\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Attempting to write 816 (0x330) bytes to stm32 address: 134217728 (0x8000000)\nFlash page at addr: 0x08000000 erased\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Finished erasing 1 pages of 1024 (0x400) bytes\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Starting Flash write for VL/F0/F3 core id\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Successfully loaded flash loader in sram\n  0/0 pages written\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Starting verification of write complete\n2016-10-26T08:16:20 INFO /tmp/stlink-20160608-18806-p6zk82/stlink-1.2.0/src/stlink-common.c: Flash written and verified! jolly good!\n```\n\n# \u7d50\u679c\n* STM32 Nucleo Board STMF32F103 \u3067 LED\u304c\u30c1\u30ab\u30c1\u30ab\u3057\u307e\u3057\u305f\u3002\n* ST\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u610f\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001libopencm3\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002 \n* libopencm3\u306f\u3001github\u304b\u3089\u6301\u3063\u3066\u304d\u3066\u3001\u3059\u3050\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u3067\u304d\u308b\u306e\u304c\u826f\u3044\u3067\u3059\u3002 \n"}