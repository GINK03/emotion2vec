{"context": "\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u9aa8\u683c\n\n\u5b9f\u7fd21. Half Adder\u306e\u8a2d\u8a081\nhalfadder1.v \u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\nhalfadder1.v\n// Top-level entity: halfadder\n\n`default_nettype none\n\nmodule halfadder( // \u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3068\u30dd\u30fc\u30c8\u30ea\u30b9\u30c8\u3092\u5b9a\u3081\u308b\n  input   wire  a,\n  input   wire  b,\n  output  wire  c,\n  output  wire  s\n  );\n\n  // \u56de\u8def\u306e\u6a5f\u80fd\u3092\u8a18\u8ff0\u3059\u308b\n  assign  c = a & b;    // bitwise AND\n  assign  s = a ^ b;    // bitwise XOR\n\nendmodule\n\n\n\n\n\n\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\n\n\n\na\nSA1 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\nb\nSA0 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\nc\nDA1 (\u500b\u5225LED)\n\n\ns\nDA0 (\u500b\u5225LED)\n\n\n\n\u8a2d\u8a08\u3059\u308b\u56de\u8def\u306e\u30a4\u30e1\u30fc\u30b8\n\n\n\u89e3\u8aac\n\nVerilog HDL\u3067\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u5358\u4f4d\u3067\u56de\u8def\u8a2d\u8a08\u3092\u884c\u3046\n\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3068\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u5165\u51fa\u529b\u4fe1\u53f7\u3068\u306a\u308b\u30dd\u30fc\u30c8\u30ea\u30b9\u30c8\u3092\u5ba3\u8a00\u3059\u308b\n\u30dd\u30fc\u30c8\u30ea\u30b9\u30c8\u3067\u306f\u5165\u51fa\u529b\u306e\u65b9\u5411(input/output)\u3001\u30d3\u30c3\u30c8\u5e45\u3001\u4fe1\u53f7\u540d\u3092\u5b9a\u3081\u308b\n\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u3067\u5229\u7528\u3059\u308b\u4fe1\u53f7\u3092\u5b9a\u3081\u308b\n\u4fe1\u53f7\u306fwire\u5ba3\u8a00\u3082\u3057\u304f\u306freg\u5ba3\u8a00\u3092\u3059\u308b\n\nwire \u5ba3\u8a00 \u30cd\u30c3\u30c8\u578b\u306e\u30c7\u30fc\u30bf\u3092\u793a\u3059(\u914d\u7dda\u3068\u8003\u3048\u3066\u3088\u3044)\nreg \u5ba3\u8a00 \u30ec\u30b8\u30b9\u30bf\u578b\u306e\u30c7\u30fc\u30bf\u3092\u793a\u3059\n\n\n\n// \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u9aa8\u683c\nmodule module_name( // \u30e2\u30b8\u30e5\u30fc\u30eb\u540d\n  // \u30dd\u30fc\u30c8\u30ea\u30b9\u30c8\n \u00a0input   wire        input_signal0,    // 1bit\u306e\u5165\u529b\u4fe1\u53f7\n  input   wire  [3:0] input_signal1,    // 4bit\u306e\u5165\u529b\u4fe1\u53f7\n  output  wire  [7:0] output_signal,    // 8bit\u306e\u51fa\u529b\u4fe1\u53f7\n  ); // (\u30bb\u30df\u30b3\u30ed\u30f3\u3092\u5fd8\u308c\u305a\u306b)\n\n  // \u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u3067\u5229\u7528\u3059\u308b\u4fe1\u53f7\u306e\u5b9a\u7fa9\n  wire  [3:0] internal_signal;\n\n  // *********************\n \u00a0// \u56de\u8def\u306e\u6a5f\u80fd\u3092\u8a18\u8ff0 (\u7565)\n  // *********************\n\nendmodule // (\u3053\u3053\u306f\u30bb\u30df\u30b3\u30ed\u30f3\u5fc5\u8981\u306a\u3057)\n\n\nassign \u306b\u3088\u308b\u4fe1\u53f7\u306e\u5272\u308a\u5f53\u3066\n\n\u5b9f\u7fd22. Half Adder\u306e\u8a2d\u8a082\nhalfadder2.v \u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u5b9f\u7fd21\u3068\u540c\u69d8\u306b\u3059\u308b\u3053\u3068\u3002\n\nhalfadder2.v\n// Top-level entitiy: halfadder\n\n`default_nettype none\n\nmodule halfadder( \n  input   wire  a,\n  input   wire  b,\n  output  wire  c,\n  output  wire  s);\n  // \u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u4fe1\u53f7\u5b9a\u7fa9\n  wire  [1:0] sum;\n\n  assign sum = a + b;   // \u7b97\u8853\u548c\n  assign {c, s} = sum;  // \u30d3\u30c3\u30c8\u9023\u7d50 \n  // sum\u3092\u4f7f\u308f\u305a\u4ee5\u4e0b\u3067\u3082\u5927\u4e08\u592b\n  // assign {c, s} = a + b;\n\nendmodule\n\n\n\n\u89e3\u8aac\n\nwire \u5ba3\u8a00\u3057\u305f\u51fa\u529b\u4fe1\u53f7\u3001\u5185\u90e8\u4fe1\u53f7\u3078\u306f assign \u6587\u3067\u914d\u7dda\u306e\u5272\u5f53\u3092\u304a\u3053\u306a\u3046\n\u7b97\u8853\u6f14\u7b97\u3084\u8ad6\u7406\u6f14\u7b97\u306a\u3069\u306e\u5f0f\u3092\u8a18\u8ff0\u3067\u304d\u308b link\n\n\n\ncase \u6587\u306b\u3088\u308b\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\u306e\u8a2d\u8a08\n\n\u5b9f\u7fd23. Half Adder\u306e\u8a2d\u8a083\nhalfadder3.v \u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u5b9f\u7fd21\u3068\u540c\u69d8\u306b\u3059\u308b\u3053\u3068\u3002\n\nhalfadder3.v\n// Top-level entitiy: halfadder\n`default_nettype none\n\nmodule halfadder( \n  input   wire  a,\n  input   wire  b,\n  output  wire  c,\n  output  wire  s\n  );\n\n  reg   [1:0] sum; // always\u6587\u3067\u4ee3\u5165\u3055\u308c\u308b\u4fe1\u53f7\u306freg\u5ba3\u8a00\u3059\u308b\n\n  // always\u6587\n  always @ (*) begin // input\u306ea, b\u304c\u5909\u5316\u3057\u305f\u6642\u306e\u632f\u821e\u3044\u3092\u8a18\u8ff0\n    // case\u6587\n    case ({a, b})\n      2'b00:  sum = 2'b00;\n      2'b01:  sum = 2'b01;\n      2'b10:  sum = 2'b01;\n      2'b11:  sum = 2'b10;\n    endcase\n    // case\u6587\u7d42\u308f\u308a\n  end \n  // always\u6587\u7d42\u308f\u308a\n\n  assign {c, s} = sum;\n\nendmodule\n\n\n\n\u89e3\u8aac\n\ncase\u6587\u306falways\u6587\u306e\u4e2d\u3067\u8a18\u8ff0\u3059\u308b\ncase\u6587\u3067\u306f()\u5185\u306e\u4fe1\u53f7\u306b\u3064\u3044\u3066\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3044\u3001\u4e00\u81f4\u3059\u308b\u3068\u3053\u308d\u306e\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3092\u5b9f\u884c\u3059\u308b\n\n\n\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306f\u4e0a\u304b\u3089\u9806\u306b\u884c\u308f\u308c\u308b\n\u3069\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u3082\u4e00\u81f4\u3057\u306a\u3044\u5834\u5408\u3092\u307e\u3068\u3081\u3066\u8a18\u8ff0\u3059\u308b\u3068\u304d\u306fdefault\u3092\u3082\u3061\u3044\u308b\n\n\nalways\u6587\u5185\u3067\u306e\u4fe1\u53f7\u306e\u5272\u308a\u5f53\u3066\u306f\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165(=)\u3082\u3057\u304f\u306f\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165(<=)\u3067\u884c\u3046\n\n\nassign\u6587\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\n\n\nalways\u6587\u5185\u3067\u4ee3\u5165\u3055\u308c\u308b\u4fe1\u53f7(=, <=\u306e\u5de6\u8fba)\u306f\u3001reg\u5ba3\u8a00\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\n\u6570\u5024\u306f\u30d3\u30c3\u30c8\u5e45\u3068\u57fa\u6570\u3092\u6307\u5b9a\u3057\u3066\u8868\u793a\u3059\u308b link\n\n\n\n\u5b9f\u7fd24. \u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u8a2d\u8a08\nencoder.v \u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u4e0b\u8a18\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\nencoder.v\n// Top-level entitiy: encoder\n`default_nettype none\n\nmodule encoder( \n  input   wire  [3:0] data,\n  output  reg   [2:0] y\n  );\n\n  always @ (*) begin\n    case (data)\n      4'b0001:  y = 3'b000;\n      4'b0010:  y = 3'b001;\n      4'b0100:  y = 3'b010;\n      4'b1000:  y = 3'b011;\n      default:  y = 3'b100;\n    endcase\n  end\nendmodule\n\n\n\n\n\n\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\n\n\n\ndata[3]\nSA3 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\ndata[2]\nSA2 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\ndata[1]\nSA1 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\ndata[0]\nSA0 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\ny[2]\nDA2 (\u500b\u5225LED)\n\n\ny[1]\nDA1 (\u500b\u5225LED)\n\n\ny[0]\nDA0 (\u500b\u5225LED)\n\n\n\n\u8a2d\u8a08\u3059\u308b\u56de\u8def\u306e\u30a4\u30e1\u30fc\u30b8\n\n\n\u89e3\u8aac\n\ncase\u6587\u3067\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\u3092\u8a2d\u8a08\u3059\u308b\u969b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8ff0\u3092\u63a8\u5968\u3059\u308b\n\n\n\u51fa\u529b\u306b\u76f8\u5f53\u3059\u308b\u4fe1\u53f7\u3092reg\u5ba3\u8a00\u3059\u308b\n\nalways @ (*) begin ~ end\u5185\u306bcase\u6587\u3092\u8a18\u8ff0\u3059\u308b\ncase\u6587\u3067\u306f\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306b\u6f0f\u308c\u304c\u7121\u3044\u3088\u3046\u306b\u3059\u308b(default\u3092\u6d3b\u7528\u3059\u308b\u3068\u3088\u3044)\n\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165=\u3092\u4f7f\u3063\u3066\u51fa\u529b\u3078\u306e\u4fe1\u53f7\u306e\u5272\u308a\u5f53\u3066\u3092\u884c\u3046\n\n\n\n\n\u5b9f\u7fd25. \u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u306e\u8a2d\u8a081\nmux.v \u3092\u30ab\u30e1\u30ec\u30aa\u30f3\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u3068\u304a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\nmux1.v\n// Top-level entity: mux\n`default_nettype none\n\nmodule mux( \n  input   wire  [2:0] d0,\n  input   wire  [2:0] d1,\n  input   wire        sel,\n  output  reg   [2:0] y\n  );\n\n  always @ (*) begin\n    case (sel)\n      1'b0:  y = d0;\n      1'b1:  y = d1;\n    endcase\n  end\nendmodule\n\n\n\n\n\n\u30dd\u30fc\u30c8\nI/O \u30c7\u30d0\u30a4\u30b9\n\n\n\n\nd1[2:0]\nSA5~SA3 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\nd0[2:0]\nSA2~SA0 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\nsel\nSA7 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)\n\n\ny[2:0]\nDA2~DA0 (\u500b\u5225LED)\n\n\n\n\u8a2d\u8a08\u3059\u308b\u56de\u8def\u306e\u30a4\u30e1\u30fc\u30b8\n\n\nif \u6587\u306b\u3088\u308b\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\u306e\u8a2d\u8a08\n\n\u5b9f\u7fd26. \u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u306e\u8a2d\u8a082\nmux.v \u3092\u30ab\u30e1\u30ec\u30aa\u30f3\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u5b9f\u7fd25\u3068\u540c\u69d8\u306b\u3059\u308b\u3053\u3068\u3002\n\nmux2.v\n// Top-level entity: mux\n`default_nettype none\n\nmodule mux( \n  input   wire  [2:0] d0,\n  input   wire  [2:0] d1,\n  input   wire        sel,\n  output  reg   [2:0] y\n  );\n\n  always @ (*) begin\n    if (sel) begin // sel\u304c\u975e0\u306e\u5834\u5408\u304c\u6210\u7acb, 0\u306e\u5834\u5408\u304c\u4e0d\u6210\u7acb\n      y = d1;      //   sel\u304c\u6210\u7acb\u306e\u3068\u304d\u3001\u3053\u3061\u3089\u304c\u5b9f\u884c\u3055\u308c\u308b\n    end else begin\n      y = d0;      //   sel\u304c\u4e0d\u6210\u7acb\u306e\u3068\u304d\u3001\u3053\u3061\u3089\u304c\u5b9f\u884c\u3055\u308c\u308b\n    end\n  end\nendmodule\n\n\n\n\u89e3\u8aac\n\nif \u6587\u306falways\u6587\u306e\u4e2d\u3067\u8a18\u8ff0\u3059\u308b\nif\u6587\u3067\u306f\u6761\u4ef6\u90e8()\u5185\u306e\u4fe1\u53f7\u306b\u3064\u3044\u3066\u6210\u7acb/\u4e0d\u6210\u7acb\u3092\u5224\u5b9a\u3059\u308b\n\n\n\u6210\u7acb: \u975e0 (\u3069\u308c\u304b1\u30d3\u30c3\u30c8\u3067\u30820\u3067\u306a\u3044\u5834\u5408)\n\u4e0d\u6210\u7acb: 0 (\u5168\u3066\u306e\u30d3\u30c3\u30c8\u304c0\u306e\u5834\u5408)\n\n\nif\u6587\u3067\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\u3092\u8a2d\u8a08\u3059\u308b\u969b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8ff0\u3092\u63a8\u5968\u3059\u308b\n\n\n\u51fa\u529b\u306b\u76f8\u5f53\u3059\u308b\u4fe1\u53f7\u3092reg\u5ba3\u8a00\u3059\u308b\n\nalways @ (*) begin ~ end\u5185\u306bif\u6587\u3092\u8a18\u8ff0\u3059\u308b\nelse\u7bc0\u3092\u7701\u7565\u3057\u306a\u3044(\u6210\u7acb/\u4e0d\u6210\u7acb\u4e21\u65b9\u306e\u5834\u5408\u306e\u52d5\u4f5c\u3092\u8a18\u8ff0\u3059\u308b)\n\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165=\u3092\u4f7f\u3063\u3066\u51fa\u529b\u3078\u306e\u4fe1\u53f7\u306e\u5272\u308a\u5f53\u3066\u3092\u884c\u3046\n\n\n\n\n\u95a2\u9023\u8cc7\u6599\n\nVerilog HDL\u306b\u3088\u308b\u8ad6\u7406\u56de\u8def\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u8a2d\u8a08(\u6388\u696d\u7528)\n[Verilog HDL\u306b\u3088\u308b\u9806\u5e8f\u56de\u8def\u306e\u8a2d\u8a08(\u6388\u696d\u7528)]\nVerilog HDL\u3067\u306e\u56de\u8def\u8a18\u8ff0\u3067\u7528\u3044\u308b\u6570\u5024\u8868\u73fe\u3068\u6f14\u7b97\u5b50 (\u6388\u696d\u7528)\n\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u9aa8\u683c\n\n## \u5b9f\u7fd21. Half Adder\u306e\u8a2d\u8a081\n\nhalfadder1.v \u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n``` Verilog:halfadder1.v\n// Top-level entity: halfadder\n\n`default_nettype none\n\nmodule halfadder( // \u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3068\u30dd\u30fc\u30c8\u30ea\u30b9\u30c8\u3092\u5b9a\u3081\u308b\n  input   wire  a,\n  input   wire  b,\n  output  wire  c,\n  output  wire  s\n  );\n  \n  // \u56de\u8def\u306e\u6a5f\u80fd\u3092\u8a18\u8ff0\u3059\u308b\n  assign  c = a & b;    // bitwise AND\n  assign  s = a ^ b;    // bitwise XOR\n\nendmodule\n```\n\n|\u30dd\u30fc\u30c8|I/O \u30c7\u30d0\u30a4\u30b9|\n|---|-----|\n| a | SA1 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1) |\n| b | SA0 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)|\n| c | DA1 (\u500b\u5225LED)|\n| s | DA0 (\u500b\u5225LED)|\n\n\u8a2d\u8a08\u3059\u308b\u56de\u8def\u306e\u30a4\u30e1\u30fc\u30b8\n![halfaddr.png](https://qiita-image-store.s3.amazonaws.com/0/25656/dfec93e6-d068-8221-3cc5-369583e09e60.png)\n\n\n### \u89e3\u8aac\n\n- Verilog HDL\u3067\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u5358\u4f4d\u3067\u56de\u8def\u8a2d\u8a08\u3092\u884c\u3046\n- \u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3068\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u5165\u51fa\u529b\u4fe1\u53f7\u3068\u306a\u308b\u30dd\u30fc\u30c8\u30ea\u30b9\u30c8\u3092\u5ba3\u8a00\u3059\u308b\n- \u30dd\u30fc\u30c8\u30ea\u30b9\u30c8\u3067\u306f\u5165\u51fa\u529b\u306e\u65b9\u5411(input/output)\u3001\u30d3\u30c3\u30c8\u5e45\u3001\u4fe1\u53f7\u540d\u3092\u5b9a\u3081\u308b\n- \u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u3067\u5229\u7528\u3059\u308b\u4fe1\u53f7\u3092\u5b9a\u3081\u308b\n- \u4fe1\u53f7\u306fwire\u5ba3\u8a00\u3082\u3057\u304f\u306freg\u5ba3\u8a00\u3092\u3059\u308b  \n  - wire \u5ba3\u8a00 \u30cd\u30c3\u30c8\u578b\u306e\u30c7\u30fc\u30bf\u3092\u793a\u3059(\u914d\u7dda\u3068\u8003\u3048\u3066\u3088\u3044)\n  - reg \u5ba3\u8a00 \u30ec\u30b8\u30b9\u30bf\u578b\u306e\u30c7\u30fc\u30bf\u3092\u793a\u3059\n\n```\n// \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u9aa8\u683c\nmodule module_name( // \u30e2\u30b8\u30e5\u30fc\u30eb\u540d\n  // \u30dd\u30fc\u30c8\u30ea\u30b9\u30c8\n \u00a0input   wire        input_signal0,    // 1bit\u306e\u5165\u529b\u4fe1\u53f7\n  input   wire  [3:0] input_signal1,    // 4bit\u306e\u5165\u529b\u4fe1\u53f7\n  output  wire  [7:0] output_signal,    // 8bit\u306e\u51fa\u529b\u4fe1\u53f7\n  ); // (\u30bb\u30df\u30b3\u30ed\u30f3\u3092\u5fd8\u308c\u305a\u306b)\n  \n  // \u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u3067\u5229\u7528\u3059\u308b\u4fe1\u53f7\u306e\u5b9a\u7fa9\n  wire  [3:0] internal_signal;\n  \n  // *********************\n \u00a0// \u56de\u8def\u306e\u6a5f\u80fd\u3092\u8a18\u8ff0 (\u7565)\n  // *********************\n\nendmodule // (\u3053\u3053\u306f\u30bb\u30df\u30b3\u30ed\u30f3\u5fc5\u8981\u306a\u3057)\n```\n\n\n# assign \u306b\u3088\u308b\u4fe1\u53f7\u306e\u5272\u308a\u5f53\u3066\n\n## \u5b9f\u7fd22. Half Adder\u306e\u8a2d\u8a082\n\nhalfadder2.v \u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u5b9f\u7fd21\u3068\u540c\u69d8\u306b\u3059\u308b\u3053\u3068\u3002\n\n``` Verilog:halfadder2.v\n// Top-level entitiy: halfadder\n\n`default_nettype none\n\nmodule halfadder( \n  input   wire  a,\n  input   wire  b,\n  output  wire  c,\n  output  wire  s);\n  // \u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u4fe1\u53f7\u5b9a\u7fa9\n  wire  [1:0] sum;\n  \n  assign sum = a + b;   // \u7b97\u8853\u548c\n  assign {c, s} = sum;  // \u30d3\u30c3\u30c8\u9023\u7d50 \n  // sum\u3092\u4f7f\u308f\u305a\u4ee5\u4e0b\u3067\u3082\u5927\u4e08\u592b\n  // assign {c, s} = a + b;\n  \nendmodule\n```\n\n### \u89e3\u8aac\n- wire \u5ba3\u8a00\u3057\u305f\u51fa\u529b\u4fe1\u53f7\u3001\u5185\u90e8\u4fe1\u53f7\u3078\u306f assign \u6587\u3067\u914d\u7dda\u306e\u5272\u5f53\u3092\u304a\u3053\u306a\u3046\n- \u7b97\u8853\u6f14\u7b97\u3084\u8ad6\u7406\u6f14\u7b97\u306a\u3069\u306e\u5f0f\u3092\u8a18\u8ff0\u3067\u304d\u308b [link](http://qiita.com/rikitoro@github/items/9e93b3b9d9c7dd2bd156)\n\n# case \u6587\u306b\u3088\u308b\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\u306e\u8a2d\u8a08\n\n## \u5b9f\u7fd23. Half Adder\u306e\u8a2d\u8a083\nhalfadder3.v \u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u5b9f\u7fd21\u3068\u540c\u69d8\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:halfadder3.v\n// Top-level entitiy: halfadder\n`default_nettype none\n\nmodule halfadder( \n  input   wire  a,\n  input   wire  b,\n  output  wire  c,\n  output  wire  s\n  );\n\n  reg   [1:0] sum; // always\u6587\u3067\u4ee3\u5165\u3055\u308c\u308b\u4fe1\u53f7\u306freg\u5ba3\u8a00\u3059\u308b\n\n  // always\u6587\n  always @ (*) begin // input\u306ea, b\u304c\u5909\u5316\u3057\u305f\u6642\u306e\u632f\u821e\u3044\u3092\u8a18\u8ff0\n    // case\u6587\n    case ({a, b})\n      2'b00:  sum = 2'b00;\n      2'b01:  sum = 2'b01;\n      2'b10:  sum = 2'b01;\n      2'b11:  sum = 2'b10;\n    endcase\n    // case\u6587\u7d42\u308f\u308a\n  end \n  // always\u6587\u7d42\u308f\u308a\n\n  assign {c, s} = sum;\n\nendmodule\n```\n\n### \u89e3\u8aac\n\n- case\u6587\u306falways\u6587\u306e\u4e2d\u3067\u8a18\u8ff0\u3059\u308b\n- case\u6587\u3067\u306f()\u5185\u306e\u4fe1\u53f7\u306b\u3064\u3044\u3066\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u884c\u3044\u3001\u4e00\u81f4\u3059\u308b\u3068\u3053\u308d\u306e\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3092\u5b9f\u884c\u3059\u308b\n  - \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306f\u4e0a\u304b\u3089\u9806\u306b\u884c\u308f\u308c\u308b\n  - \u3069\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u3082\u4e00\u81f4\u3057\u306a\u3044\u5834\u5408\u3092\u307e\u3068\u3081\u3066\u8a18\u8ff0\u3059\u308b\u3068\u304d\u306f```default```\u3092\u3082\u3061\u3044\u308b\n- always\u6587\u5185\u3067\u306e\u4fe1\u53f7\u306e\u5272\u308a\u5f53\u3066\u306f\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165(```=```)\u3082\u3057\u304f\u306f\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165(```<=```)\u3067\u884c\u3046\n  - assign\u6587\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\n- always\u6587\u5185\u3067\u4ee3\u5165\u3055\u308c\u308b\u4fe1\u53f7(```=```, ```<=```\u306e\u5de6\u8fba)\u306f\u3001reg\u5ba3\u8a00\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\n- \u6570\u5024\u306f\u30d3\u30c3\u30c8\u5e45\u3068\u57fa\u6570\u3092\u6307\u5b9a\u3057\u3066\u8868\u793a\u3059\u308b [link](http://qiita.com/rikitoro@github/items/9e93b3b9d9c7dd2bd156)\n\n\n## \u5b9f\u7fd24. \u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u8a2d\u8a08\n\nencoder.v \u3092\u5b9f\u7fd2\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u4e0b\u8a18\u306e\u901a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:encoder.v\n// Top-level entitiy: encoder\n`default_nettype none\n\nmodule encoder( \n  input   wire  [3:0] data,\n  output  reg   [2:0] y\n  );\n\n  always @ (*) begin\n    case (data)\n      4'b0001:  y = 3'b000;\n      4'b0010:  y = 3'b001;\n      4'b0100:  y = 3'b010;\n      4'b1000:  y = 3'b011;\n      default:  y = 3'b100;\n    endcase\n  end\nendmodule\n```\n\n|\u30dd\u30fc\u30c8|I/O \u30c7\u30d0\u30a4\u30b9|\n|---|-----|\n| data[3] | SA3 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1) |\n| data[2] | SA2 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)|\n| data[1] | SA1 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)|\n| data[0] | SA0 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)|\n| y[2]    | DA2 (\u500b\u5225LED) |\n| y[1]    | DA1 (\u500b\u5225LED) |\n| y[0]    | DA0 (\u500b\u5225LED) |\n\n\u8a2d\u8a08\u3059\u308b\u56de\u8def\u306e\u30a4\u30e1\u30fc\u30b8\n![encoder.png](https://qiita-image-store.s3.amazonaws.com/0/25656/60ccb3a9-c222-c2e8-60f1-f3de02de4957.png)\n\n\n### \u89e3\u8aac\n\n- case\u6587\u3067\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\u3092\u8a2d\u8a08\u3059\u308b\u969b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8ff0\u3092\u63a8\u5968\u3059\u308b\n  - \u51fa\u529b\u306b\u76f8\u5f53\u3059\u308b\u4fe1\u53f7\u3092reg\u5ba3\u8a00\u3059\u308b\n  - ```always @ (*) begin ``` ~ ```end```\u5185\u306bcase\u6587\u3092\u8a18\u8ff0\u3059\u308b\n  - case\u6587\u3067\u306f\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306b\u6f0f\u308c\u304c\u7121\u3044\u3088\u3046\u306b\u3059\u308b(```default```\u3092\u6d3b\u7528\u3059\u308b\u3068\u3088\u3044)\n  - \u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165```=```\u3092\u4f7f\u3063\u3066\u51fa\u529b\u3078\u306e\u4fe1\u53f7\u306e\u5272\u308a\u5f53\u3066\u3092\u884c\u3046\n\n\n## \u5b9f\u7fd25. \u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u306e\u8a2d\u8a081\nmux.v \u3092\u30ab\u30e1\u30ec\u30aa\u30f3\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u8868\u306e\u3068\u304a\u308a\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:mux1.v\n// Top-level entity: mux\n`default_nettype none\n\nmodule mux( \n  input   wire  [2:0] d0,\n  input   wire  [2:0] d1,\n  input   wire        sel,\n  output  reg   [2:0] y\n  );\n\n  always @ (*) begin\n    case (sel)\n      1'b0:  y = d0;\n      1'b1:  y = d1;\n    endcase\n  end\nendmodule\n```\n\n|\u30dd\u30fc\u30c8|I/O \u30c7\u30d0\u30a4\u30b9|\n|---|-----|\n| d1[2:0] | SA5~SA3 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1) |\n| d0[2:0] | SA2~SA0 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1) |\n| sel     | SA7 (\u30c8\u30b0\u30eb\u30b9\u30a4\u30c3\u30c1)|\n| y[2:0]  | DA2~DA0 (\u500b\u5225LED) |\n\n\u8a2d\u8a08\u3059\u308b\u56de\u8def\u306e\u30a4\u30e1\u30fc\u30b8\n![mux.png](https://qiita-image-store.s3.amazonaws.com/0/25656/1684ade7-c6d6-07d2-f381-81d895ccd412.png)\n\n\n# if \u6587\u306b\u3088\u308b\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\u306e\u8a2d\u8a08\n\n## \u5b9f\u7fd26. \u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u306e\u8a2d\u8a082\nmux.v \u3092\u30ab\u30e1\u30ec\u30aa\u30f3\u30dc\u30fc\u30c9\u306b\u5b9f\u88c5\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u3002\n\u5165\u51fa\u529b\u306e\u5272\u308a\u5f53\u3066\u306f\u5b9f\u7fd25\u3068\u540c\u69d8\u306b\u3059\u308b\u3053\u3068\u3002\n\n```Verilog:mux2.v\n// Top-level entity: mux\n`default_nettype none\n\nmodule mux( \n  input   wire  [2:0] d0,\n  input   wire  [2:0] d1,\n  input   wire        sel,\n  output  reg   [2:0] y\n  );\n\n  always @ (*) begin\n    if (sel) begin // sel\u304c\u975e0\u306e\u5834\u5408\u304c\u6210\u7acb, 0\u306e\u5834\u5408\u304c\u4e0d\u6210\u7acb\n      y = d1;      //   sel\u304c\u6210\u7acb\u306e\u3068\u304d\u3001\u3053\u3061\u3089\u304c\u5b9f\u884c\u3055\u308c\u308b\n    end else begin\n      y = d0;      //   sel\u304c\u4e0d\u6210\u7acb\u306e\u3068\u304d\u3001\u3053\u3061\u3089\u304c\u5b9f\u884c\u3055\u308c\u308b\n    end\n  end\nendmodule\n```\n\n### \u89e3\u8aac\n\n- if \u6587\u306falways\u6587\u306e\u4e2d\u3067\u8a18\u8ff0\u3059\u308b\n- if\u6587\u3067\u306f\u6761\u4ef6\u90e8()\u5185\u306e\u4fe1\u53f7\u306b\u3064\u3044\u3066\u6210\u7acb/\u4e0d\u6210\u7acb\u3092\u5224\u5b9a\u3059\u308b\n  - \u6210\u7acb: \u975e0 (\u3069\u308c\u304b1\u30d3\u30c3\u30c8\u3067\u30820\u3067\u306a\u3044\u5834\u5408)\n  - \u4e0d\u6210\u7acb: 0 (\u5168\u3066\u306e\u30d3\u30c3\u30c8\u304c0\u306e\u5834\u5408)\n- if\u6587\u3067\u7d44\u5408\u305b\u8ad6\u7406\u56de\u8def\u3092\u8a2d\u8a08\u3059\u308b\u969b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8ff0\u3092\u63a8\u5968\u3059\u308b\n  - \u51fa\u529b\u306b\u76f8\u5f53\u3059\u308b\u4fe1\u53f7\u3092reg\u5ba3\u8a00\u3059\u308b\n  - ```always @ (*) begin ``` ~ ```end```\u5185\u306bif\u6587\u3092\u8a18\u8ff0\u3059\u308b\n  - else\u7bc0\u3092\u7701\u7565\u3057\u306a\u3044(\u6210\u7acb/\u4e0d\u6210\u7acb\u4e21\u65b9\u306e\u5834\u5408\u306e\u52d5\u4f5c\u3092\u8a18\u8ff0\u3059\u308b)\n  - \u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u4ee3\u5165```=```\u3092\u4f7f\u3063\u3066\u51fa\u529b\u3078\u306e\u4fe1\u53f7\u306e\u5272\u308a\u5f53\u3066\u3092\u884c\u3046\n\n\n## \u95a2\u9023\u8cc7\u6599\n\n- [Verilog HDL\u306b\u3088\u308b\u8ad6\u7406\u56de\u8def\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u8a2d\u8a08(\u6388\u696d\u7528)](http://qiita.com/rikitoro@github/items/a2a9c9eadfda878cce69)\n- [Verilog HDL\u306b\u3088\u308b\u9806\u5e8f\u56de\u8def\u306e\u8a2d\u8a08(\u6388\u696d\u7528)]\n- [Verilog HDL\u3067\u306e\u56de\u8def\u8a18\u8ff0\u3067\u7528\u3044\u308b\u6570\u5024\u8868\u73fe\u3068\u6f14\u7b97\u5b50 (\u6388\u696d\u7528)](http://qiita.com/rikitoro@github/items/9e93b3b9d9c7dd2bd156)\n", "tags": ["Verilog"]}