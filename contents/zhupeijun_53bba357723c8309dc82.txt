{"tags": ["sizeof", "C++11"], "context": " More than 1 year has passed since last update.We usually use the sizeof to evaluate the size of a instance (class or struct) or variable. Such as:\nclass Car {\npublic:\n    int id;\n    string name;\n    static int count;\n};\n\nint main() {\n    Car p;\n    cout << sizeof(p) << endl;           // 4\n    cout << sizeof(Car::count) << endl;  // 4\n    return 0;\n}\n\nIn C++98, we can not evaluate the size of id without creating a instance with sizeof, but we can do it with C++11.\n//C++98: error: invalid use of non-static data member 'id'\n//C++11: 4\ncout << sizeof(Car::id) << endl;\n\nIn C++98, if we do the same thing, we maybe do something like this:\ncout << sizeof(((Car*)0)->id) << endl; // 4\n\nIt's very clear to see that the way of C++11 is easier to read.\nWe usually use the `sizeof` to evaluate the size of a instance (class or struct) or variable. Such as:\n\n```cpp\nclass Car {\npublic:\n    int id;\n    string name;\n    static int count;\n};\n\nint main() {\n    Car p;\n    cout << sizeof(p) << endl;           // 4\n    cout << sizeof(Car::count) << endl;  // 4\n    return 0;\n}\n```\n\nIn C++98, we can not evaluate the size of id without creating a instance with sizeof, but we can do it with C++11.\n\n```cpp\n//C++98: error: invalid use of non-static data member 'id'\n//C++11: 4\ncout << sizeof(Car::id) << endl;\n```\n\nIn C++98, if we do the same thing, we maybe do something like this:\n\n```cpp\ncout << sizeof(((Car*)0)->id) << endl; // 4\n```\n\nIt's very clear to see that the way of C++11 is easier to read.\n \n"}