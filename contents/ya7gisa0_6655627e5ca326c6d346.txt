{"context": "\n\nUnity OSC\n\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u306f\u9593\u9055\u3063\u3066\u3044\u305f\u7b87\u6240\u3082\u3042\u3063\u305f\u306e\u3067\u3001\u3082\u3046\u4e00\u5ea6UnityOSC\u306b\u95a2\u3059\u308b\u6295\u7a3f\u3002\n\u30c8\u30ea\u30ac\u30fc\u306b\u3088\u3063\u3066\u6d41\u308c\u308b\u6620\u50cf\u3092\u4e8c\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u540c\u671f\u3059\u308b\u305f\u3081\u306bOSC\u3092\u4f7f\u3046\u3002\u540c\u6642\u306b\u97f3\u306f8ch\u3067\u51fa\u529b\u3059\u308b\u305f\u3081\u306bMAX\u306b\u3082\u4fe1\u53f7\u3092\u9001\u308b\u3002\n\n\nIP, Port\n\u53d7\u4fe1\u3059\u308b\u306a\u3089CreateServer()\u3001\u9001\u4fe1\u3059\u308b\u306a\u3089CreateClient()\n\u8907\u6570\u306e\u9001\u4fe1\u5148\u3092\u4f5c\u308c\u308b\u306e\u304coF\u306eOSCSenderSample\u306a\u3069\u3088\u308a\u4fbf\u5229\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nOSCHandler.cs\n    public void Init()\n    {\n        // this is for the receiver app\n        CreateServer(\"UnityReceiver\", 12345);\n\n        // those are for the sender app\n        //CreateClient(\"Unity\", IPAddress.Parse(\"169.254.182.100\"), 12345);\n        //CreateClient(\"MAX\", IPAddress.Parse(\"169.254.182.100\"), 12346);\n    }\n\n\n\nCode\nStart()\u3067\nOSCHandler.Instance.Init ();\n\n\u5f8c\u306fUpdate\u4e2d\u306b\u4f5c\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u5165\u308c\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u306f(\u53d7\u4fe1\u5074\u3060\u3068\u3068\u304f\u306b)\u3002\npublic class SOMECLASS : MonoBehaviour {\n    void Start() {\n        OSCHandler.Instance.Init ();\n    }\n    void Update() {\n        // if sender app..\n        CheckOSCSend();\n        // if receiver app..\n        //ListenOSC();\n    }\n}\n\n\nSender\n\u4efb\u610f\u306eMonoBehaviour\u7d99\u627f\u30af\u30e9\u30b9\u306eUpdate()\u30e1\u30bd\u30c3\u30c9\u306bListenToOSC()\u306a\u3069\u3092\u8ffd\u52a0\u3002\n\u30ad\u30fc\u304c\u4e00\u5ea6\u62bc\u3055\u308c\u305f\u3060\u3051\u3067\u3082\u8907\u6570\u306eOSC\u3092\u9001\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u306e\u3067PreventRedundantOSC()\u3068\u3044\u3046\u95a2\u6570\u3092\u8ffd\u52a0\u3002\u4e00\u5ea6OSC\u3092\u9001\u3063\u305f\u3089\u9001\u4fe1\u4e0d\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u3002\nSendReset()\u306fMAX\u5074\u3060\u3051\u306bkeydown\u304b\u3089\u4e00\u5b9a\u6642\u9593\u7d4c\u904e\u3057\u305f\u3089OSC\u3092\u9001\u308b\u51e6\u7406\u3002\n    bool isOSCReady = true;\n\n    void CheckOSCSend(){\n        if (\n            (Input.anyKey) &&\n            (isOSCReady)\n        ) {\n            string inputStr = Input.inputString;\n            Debug.Log (inputStr);\n            string allCharChunk = \"123456789\";\n            if (allCharChunk.Contains(inputStr)) {\n                Debug.Log (inputStr + \" is pressed.\");\n                int sentInt;\n                int.TryParse (inputStr, out sentInt);\n                OSCHandler.Instance.SendMessageToClient (\"Unity\", \"/Audio\", sentInt);\n                OSCHandler.Instance.SendMessageToClient (\"MAX\", \"/Audio\", sentInt);\n                // set timer\n                StartCoroutine(SendReset(sentInt));\n                StartCoroutine (PreventRedundantOSC());\n            }\n            Debug.Log (inputStr);\n        }\n    }\n\n    // prevent sending OSC multiple times with just one keydown\n    IEnumerator PreventRedundantOSC() {\n        isOSCReady = false;\n        yield return new WaitForSeconds (2.0f);\n        isOSCReady = true;\n    }\n\n    IEnumerator SendReset(int movieType) {\n        float[] waitTimes = new float[9] {4.7f, 4.0f, 5.2f, 5.55f, 4.3f, 9.0f, 4.6f, 4.5f, 4.5f};\n        int targetNum = movieType - 1;\n        yield return new WaitForSeconds (waitTimes [targetNum]);\n        OSCHandler.Instance.SendMessageToClient (\"MAX\", \"/Audio\", 0);\n    }\n\n\n\nReceiver\n\u4efb\u610f\u306eMonoBehaviour\u7d99\u627f\u30af\u30e9\u30b9\u306eUpdate()\u30e1\u30bd\u30c3\u30c9\u306bListenToOSC()\u306a\u3069\u3092\u8ffd\u52a0\u3002\n\u4ed6\u306e\u30af\u30e9\u30b9\u306b\u6e21\u3059\u51e6\u7406\u3092\u8003\u3048\u305f\u308a\u3059\u308b\u3068OSCController.cs\u306a\u3069\u3092\u4f5c\u308b\u3088\u308a\u3082\u3001OSC\u3092\u9001\u308b\u30fb\u53d7\u3051\u308b\u51e6\u7406\u304c\u5fc5\u8981\u306a\u30af\u30e9\u30b9\u306b\u305d\u306e\u307e\u307e\u8ffd\u52a0\u3057\u3066\u3082\u3044\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u4eca\u56de\u306f\u30ad\u30fc\u30dc\u30fc\u30c9\u306e1~9\u3092\u62bc\u3055\u308c\u305f\u3089\u305d\u306e\u5024\u3092\u9001\u308b\u3068\u3044\u3046\u3082\u306e\u3060\u3063\u305f\u3002\u305d\u306e\u5024\u306b\u3088\u3063\u3066\u6d41\u308c\u308b\u6620\u50cf\u304c\u5909\u308f\u308b\u3068\u3044\u3046\u3082\u306e\u3002(\u6620\u50cf\u51e6\u7406\u306fRenderPitcher()\u304c\u5b9f\u884c\u3057\u3066\u3044\u308b)\n    // methods related to osc goes from here.\n    void listenToOSC(){\n        OSCHandler.Instance.UpdateLogs ();\n        Dictionary<string, ServerLog> servers = new Dictionary<string, ServerLog>();\n        servers = OSCHandler.Instance.Servers;\n\n        foreach (KeyValuePair<string, ServerLog> item in servers) {\n            Debug.Log (item.Value.log.Count);\n            if (item.Value.log.Count > 0) {\n                Debug.Log (\"count is more than zero\");\n                int lastPacketIndex = item.Value.packets.Count - 1;\n\n                string s1 = \"123456789\";\n                string s2 = item.Value.packets [lastPacketIndex].Data [0].ToString ();\n                if (\n                    (s1.Contains(s2)) &&\n                    (item.Value.packets[lastPacketIndex].Address == \"/Audio\")\n                ) {\n                    RenderPitcher(s2);\n                    // reset\n                    item.Value.packets[lastPacketIndex].Address = \"/reset\";\n                    Debug.Log (\"change view\");\n                }\n            }\n        }\n        OSCHandler.Instance.UpdateLogs ();\n    }\n\n\nTips\n\nWifi\n\u3053\u3053\u304c\u4e00\u756a\u610f\u5473\u304c\u3042\u308a\u305d\u3046\u3060\u304c\u3001Wifi\u7d4c\u7531\u3060\u3068MAX\u306b\u306fOSC\u53d7\u3051\u308c\u308b\u304cUnity\u3067\u306f\u53d7\u4fe1\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u3063\u305f\u3002\u6709\u7dda\u306b\u3057\u305f\u3089\u89e3\u6c7a\u3057\u305f\u3002UE4\u3067\u3082OSC\u4f7f\u3063\u3066\u3044\u305f\u308a\u3059\u308b\u306e\u3060\u304c\u666e\u901a\u306b\u7121\u7dda\u901a\u4fe1\u3067\u6a5f\u80fd\u3057\u3066\u3044\u305f\u3002Unity\u3088\u308a\u3082Plugin(UnityOSC)\u306e\u554f\u984c\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nVersion\nUnityVersion\u6700\u65b0(\u305f\u3057\u304b5.34)\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4ed6PC\u306eUnityEditor(ver5.0)\u3067rebuild\u3057\u305f\u3089OSC\u901a\u4fe1\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u3063\u305f\u3002\u8907\u6570PC\u4f7f\u3046\u30b7\u30b9\u30c6\u30e0\u306a\u3093\u304b\u3067\u306f\u3068\u304f\u306bversion\u6c17\u306b\u3057\u3066\u3044\u306a\u3044\u3068\u7121\u99c4\u306b\u6642\u9593\u3092\u304b\u3051\u3066\u3057\u307e\u3044\u305d\u3046\u3002\n#Unity OSC\n[\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b](http://qiita.com/ya7gisa0/items/0bcad395f9e8e8935f71)\u306f\u9593\u9055\u3063\u3066\u3044\u305f\u7b87\u6240\u3082\u3042\u3063\u305f\u306e\u3067\u3001\u3082\u3046\u4e00\u5ea6[UnityOSC](https://github.com/jorgegarcia/UnityOSC)\u306b\u95a2\u3059\u308b\u6295\u7a3f\u3002\n\u30c8\u30ea\u30ac\u30fc\u306b\u3088\u3063\u3066\u6d41\u308c\u308b\u6620\u50cf\u3092\u4e8c\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u540c\u671f\u3059\u308b\u305f\u3081\u306bOSC\u3092\u4f7f\u3046\u3002\u540c\u6642\u306b\u97f3\u306f8ch\u3067\u51fa\u529b\u3059\u308b\u305f\u3081\u306bMAX\u306b\u3082\u4fe1\u53f7\u3092\u9001\u308b\u3002\n\n![VR_System.png](https://qiita-image-store.s3.amazonaws.com/0/53282/71558011-94c3-c006-54cc-606fb08d93fd.png)\n\n##IP, Port\n\u53d7\u4fe1\u3059\u308b\u306a\u3089CreateServer()\u3001\u9001\u4fe1\u3059\u308b\u306a\u3089CreateClient()\n\u8907\u6570\u306e\u9001\u4fe1\u5148\u3092\u4f5c\u308c\u308b\u306e\u304coF\u306eOSCSenderSample\u306a\u3069\u3088\u308a\u4fbf\u5229\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n```csharp:OSCHandler.cs\n\tpublic void Init()\n\t{\n\t\t// this is for the receiver app\n        CreateServer(\"UnityReceiver\", 12345);\n\n\t\t// those are for the sender app\n\t\t//CreateClient(\"Unity\", IPAddress.Parse(\"169.254.182.100\"), 12345);\n\t\t//CreateClient(\"MAX\", IPAddress.Parse(\"169.254.182.100\"), 12346);\n\t}\n```\n##Code\nStart()\u3067\n\n```\nOSCHandler.Instance.Init ();\n```\n\u5f8c\u306fUpdate\u4e2d\u306b\u4f5c\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u5165\u308c\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u306f(\u53d7\u4fe1\u5074\u3060\u3068\u3068\u304f\u306b)\u3002\n\n```csharp\npublic class SOMECLASS : MonoBehaviour {\n    void Start() {\n\t\tOSCHandler.Instance.Init ();\n    }\n    void Update() {\n\t\t// if sender app..\n\t\tCheckOSCSend();\n\t\t// if receiver app..\n\t\t//ListenOSC();\n    }\n}\n```\n###Sender\n\u4efb\u610f\u306eMonoBehaviour\u7d99\u627f\u30af\u30e9\u30b9\u306eUpdate()\u30e1\u30bd\u30c3\u30c9\u306bListenToOSC()\u306a\u3069\u3092\u8ffd\u52a0\u3002\n\u30ad\u30fc\u304c\u4e00\u5ea6\u62bc\u3055\u308c\u305f\u3060\u3051\u3067\u3082\u8907\u6570\u306eOSC\u3092\u9001\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u306e\u3067PreventRedundantOSC()\u3068\u3044\u3046\u95a2\u6570\u3092\u8ffd\u52a0\u3002\u4e00\u5ea6OSC\u3092\u9001\u3063\u305f\u3089\u9001\u4fe1\u4e0d\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u3002\nSendReset()\u306fMAX\u5074\u3060\u3051\u306bkeydown\u304b\u3089\u4e00\u5b9a\u6642\u9593\u7d4c\u904e\u3057\u305f\u3089OSC\u3092\u9001\u308b\u51e6\u7406\u3002\n\n```csharp\n\tbool isOSCReady = true;\n\n\tvoid CheckOSCSend(){\n\t\tif (\n\t\t\t(Input.anyKey) &&\n\t\t\t(isOSCReady)\n\t\t) {\n\t\t\tstring inputStr = Input.inputString;\n\t\t\tDebug.Log (inputStr);\n\t\t\tstring allCharChunk = \"123456789\";\n\t\t\tif (allCharChunk.Contains(inputStr)) {\n\t\t\t\tDebug.Log (inputStr + \" is pressed.\");\n\t\t\t\tint sentInt;\n\t\t\t\tint.TryParse (inputStr, out sentInt);\n\t\t\t\tOSCHandler.Instance.SendMessageToClient (\"Unity\", \"/Audio\", sentInt);\n\t\t\t\tOSCHandler.Instance.SendMessageToClient (\"MAX\", \"/Audio\", sentInt);\n\t\t\t\t// set timer\n\t\t\t\tStartCoroutine(SendReset(sentInt));\n\t\t\t\tStartCoroutine (PreventRedundantOSC());\n\t\t\t}\n\t\t\tDebug.Log (inputStr);\n\t\t}\n\t}\n\n\t// prevent sending OSC multiple times with just one keydown\n\tIEnumerator PreventRedundantOSC() {\n\t\tisOSCReady = false;\n\t\tyield return new WaitForSeconds (2.0f);\n\t\tisOSCReady = true;\n\t}\n\n\tIEnumerator SendReset(int movieType) {\n\t\tfloat[] waitTimes = new float[9] {4.7f, 4.0f, 5.2f, 5.55f, 4.3f, 9.0f, 4.6f, 4.5f, 4.5f};\n\t\tint targetNum = movieType - 1;\n\t\tyield return new WaitForSeconds (waitTimes [targetNum]);\n\t\tOSCHandler.Instance.SendMessageToClient (\"MAX\", \"/Audio\", 0);\n\t}\n\n```\n\n###Receiver\n\u4efb\u610f\u306eMonoBehaviour\u7d99\u627f\u30af\u30e9\u30b9\u306eUpdate()\u30e1\u30bd\u30c3\u30c9\u306bListenToOSC()\u306a\u3069\u3092\u8ffd\u52a0\u3002\n\u4ed6\u306e\u30af\u30e9\u30b9\u306b\u6e21\u3059\u51e6\u7406\u3092\u8003\u3048\u305f\u308a\u3059\u308b\u3068OSCController.cs\u306a\u3069\u3092\u4f5c\u308b\u3088\u308a\u3082\u3001OSC\u3092\u9001\u308b\u30fb\u53d7\u3051\u308b\u51e6\u7406\u304c\u5fc5\u8981\u306a\u30af\u30e9\u30b9\u306b\u305d\u306e\u307e\u307e\u8ffd\u52a0\u3057\u3066\u3082\u3044\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u4eca\u56de\u306f\u30ad\u30fc\u30dc\u30fc\u30c9\u306e1~9\u3092\u62bc\u3055\u308c\u305f\u3089\u305d\u306e\u5024\u3092\u9001\u308b\u3068\u3044\u3046\u3082\u306e\u3060\u3063\u305f\u3002\u305d\u306e\u5024\u306b\u3088\u3063\u3066\u6d41\u308c\u308b\u6620\u50cf\u304c\u5909\u308f\u308b\u3068\u3044\u3046\u3082\u306e\u3002(\u6620\u50cf\u51e6\u7406\u306fRenderPitcher()\u304c\u5b9f\u884c\u3057\u3066\u3044\u308b)\n\n```csharp\n\t// methods related to osc goes from here.\n\tvoid listenToOSC(){\n\t\tOSCHandler.Instance.UpdateLogs ();\n\t\tDictionary<string, ServerLog> servers = new Dictionary<string, ServerLog>();\n\t\tservers = OSCHandler.Instance.Servers;\n\n\t\tforeach (KeyValuePair<string, ServerLog> item in servers) {\n\t\t\tDebug.Log (item.Value.log.Count);\n\t\t\tif (item.Value.log.Count > 0) {\n\t\t\t\tDebug.Log (\"count is more than zero\");\n\t\t\t\tint lastPacketIndex = item.Value.packets.Count - 1;\n\n\t\t\t\tstring s1 = \"123456789\";\n\t\t\t\tstring s2 = item.Value.packets [lastPacketIndex].Data [0].ToString ();\n\t\t\t\tif (\n\t\t\t\t\t(s1.Contains(s2)) &&\n\t\t\t\t\t(item.Value.packets[lastPacketIndex].Address == \"/Audio\")\n\t\t\t\t) {\n\t\t\t\t\tRenderPitcher(s2);\n\t\t\t\t\t// reset\n\t\t\t\t\titem.Value.packets[lastPacketIndex].Address = \"/reset\";\n\t\t\t\t\tDebug.Log (\"change view\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tOSCHandler.Instance.UpdateLogs ();\n\t}\n```\n\n##Tips\n###Wifi\n\u3053\u3053\u304c\u4e00\u756a\u610f\u5473\u304c\u3042\u308a\u305d\u3046\u3060\u304c\u3001Wifi\u7d4c\u7531\u3060\u3068MAX\u306b\u306fOSC\u53d7\u3051\u308c\u308b\u304cUnity\u3067\u306f\u53d7\u4fe1\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u3063\u305f\u3002\u6709\u7dda\u306b\u3057\u305f\u3089\u89e3\u6c7a\u3057\u305f\u3002UE4\u3067\u3082OSC\u4f7f\u3063\u3066\u3044\u305f\u308a\u3059\u308b\u306e\u3060\u304c\u666e\u901a\u306b\u7121\u7dda\u901a\u4fe1\u3067\u6a5f\u80fd\u3057\u3066\u3044\u305f\u3002Unity\u3088\u308a\u3082Plugin(UnityOSC)\u306e\u554f\u984c\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n###Version\nUnityVersion\u6700\u65b0(\u305f\u3057\u304b5.34)\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4ed6PC\u306eUnityEditor(ver5.0)\u3067rebuild\u3057\u305f\u3089OSC\u901a\u4fe1\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u3063\u305f\u3002\u8907\u6570PC\u4f7f\u3046\u30b7\u30b9\u30c6\u30e0\u306a\u3093\u304b\u3067\u306f\u3068\u304f\u306bversion\u6c17\u306b\u3057\u3066\u3044\u306a\u3044\u3068\u7121\u99c4\u306b\u6642\u9593\u3092\u304b\u3051\u3066\u3057\u307e\u3044\u305d\u3046\u3002\n", "tags": ["Unity", "OSC"]}