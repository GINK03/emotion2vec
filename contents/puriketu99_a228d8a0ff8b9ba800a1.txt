{"context": " More than 1 year has passed since last update.\n\u3053\u308c\u3060\u3051\u3067memcached\u306b\u623b\u308a\u5024\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3067\u304d\u308b\n@cached(time=1200)\ndef functionToCache(arguments):\n  return arguments\n\n\n\n\u3069\u3093\u306a\u3068\u304d\u306b\u4fbf\u5229\uff1f\n\u7279\u306b\u3001\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3084\u5916\u90e8\u306e\u30c7\u30fc\u30bf\u3092\u7d61\u3081\u305f\u958b\u767a\u3092\u3059\u308b\u3068\u304d\u306b\u5229\u4fbf\u6027\u3092\u611f\u3058\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\n1.\u3000pip install python-memcached\u3092\u3059\u308b\n2. \u4e0b\u8a18\u306epython\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5f53\u306a\u3068\u3053\u308d\u306b\u4fdd\u5b58\u3057\u3066cached\u306e\u95a2\u6570\u3092import\u3059\u308b\n3.  \u95a2\u6570\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u306b@cached(time=1000)\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u30c7\u30b3\u30ec\u30fc\u30c8\u3059\u308b\n\n\u30b9\u30cb\u30da\u30c3\u30c8\n\nmemcached-decorater.py\ndef decorator_with_args(decorator_to_enhance):\n  \"\"\" \n  \u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u5f15\u6570\u3092\u4e0e\u3048\u3066\u8fd4\u3059\u95a2\u6570\n  \"\"\"\n  def decorator_maker(*args, **kwargs) :\n    def decorator_wrapper(func) :\n      return decorator_to_enhance(func, *args, **kwargs)\n    return decorator_wrapper\n  return decorator_maker\n\n@decorator_with_args\ndef cached(func, *args, **kwargs):\n  \"\"\"\n  \u95a2\u6570\u306e\u540d\u524d\u3001\u5f15\u6570\u3092\u30ad\u30fc\u306b\u3057\u3066\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\n  \u4f7f\u3044\u65b9\n    @cached(time=1200)\n    def functionToCache(arguments):\n  \"\"\"\n  def wrapper(*pars):\n    key = func.__name__ + '_' + '_'.join([str(par) for par in pars])\n    print key\n    client = memcache.Client(['127.0.0.1:11211'])\n    val = client.get(key)\n    if not val:\n      val = func(*pars)\n      try:\n        client.set(key, val, time=kwargs['time'])\n      except:\n        pass #\u9069\u5f53\u306b\u3069\u3046\u305e\n    return val\n  return wrapper\n\n\n\n\n\n\u53c2\u8003\ngae-memcache-decorator.py\nhttps://gist.github.com/abahgat/1395810\n\n```python:\u3053\u308c\u3060\u3051\u3067memcached\u306b\u623b\u308a\u5024\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3067\u304d\u308b\n@cached(time=1200)\ndef functionToCache(arguments):\n  return arguments\n```\n##\u3069\u3093\u306a\u3068\u304d\u306b\u4fbf\u5229\uff1f\n\u7279\u306b\u3001\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3084\u5916\u90e8\u306e\u30c7\u30fc\u30bf\u3092\u7d61\u3081\u305f\u958b\u767a\u3092\u3059\u308b\u3068\u304d\u306b\u5229\u4fbf\u6027\u3092\u611f\u3058\u307e\u3059\u3002\n\n##\u4f7f\u3044\u65b9\n1.\u3000`pip install python-memcached`\u3092\u3059\u308b\n2. \u4e0b\u8a18\u306epython\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5f53\u306a\u3068\u3053\u308d\u306b\u4fdd\u5b58\u3057\u3066cached\u306e\u95a2\u6570\u3092import\u3059\u308b\n3.\t\u95a2\u6570\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u306b@cached(time=1000)\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u30c7\u30b3\u30ec\u30fc\u30c8\u3059\u308b\n\n\n\n##\u30b9\u30cb\u30da\u30c3\u30c8\n\n```python:memcached-decorater.py\ndef decorator_with_args(decorator_to_enhance):\n  \"\"\" \n  \u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u5f15\u6570\u3092\u4e0e\u3048\u3066\u8fd4\u3059\u95a2\u6570\n  \"\"\"\n  def decorator_maker(*args, **kwargs) :\n    def decorator_wrapper(func) :\n      return decorator_to_enhance(func, *args, **kwargs)\n    return decorator_wrapper\n  return decorator_maker\n\n@decorator_with_args\ndef cached(func, *args, **kwargs):\n  \"\"\"\n  \u95a2\u6570\u306e\u540d\u524d\u3001\u5f15\u6570\u3092\u30ad\u30fc\u306b\u3057\u3066\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\n  \u4f7f\u3044\u65b9\n    @cached(time=1200)\n    def functionToCache(arguments):\n  \"\"\"\n  def wrapper(*pars):\n    key = func.__name__ + '_' + '_'.join([str(par) for par in pars])\n    print key\n    client = memcache.Client(['127.0.0.1:11211'])\n    val = client.get(key)\n    if not val:\n      val = func(*pars)\n      try:\n        client.set(key, val, time=kwargs['time'])\n      except:\n        pass #\u9069\u5f53\u306b\u3069\u3046\u305e\n    return val\n  return wrapper\n\n\n```\n##\u53c2\u8003\ngae-memcache-decorator.py\nhttps://gist.github.com/abahgat/1395810\n", "tags": ["Memcached", "Python", "1\u5206\u30b7\u30ea\u30fc\u30ba"]}