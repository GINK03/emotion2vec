{"tags": ["GoogleAppEngine", "Java", "GAE"], "context": " More than 1 year has passed since last update.\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u69cb\u6210\n\nRestAPI: Jersey\nData Binding: MOXy\nDataStoreAPI: Objectify\n\n\nDataStore Service\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3002BigTable\u304c\u30d9\u30fc\u30b9\u3068\u306a\u3063\u305f\u3082\u306e\u3002\n\n\u30ab\u30a4\u30f3\u30c9(kind)\n\n\nRDB\u306etable\u306b\u76f8\u5f53\n\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3(entity)\n\n\nRDB\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u76f8\u5f53\n\n\n\u30d7\u30ed\u30d1\u30c6\u30a3(property)\n\n\nRDB\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u76f8\u5f53 \n\n\n\n\u30c7\u30fc\u30bf\u306eCRUD\u306e\u64cd\u4f5c\u306f\u3001Java\u3067\u3042\u308c\u3070google\u8b39\u88fd\u306eObjectify\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u3001\u305d\u308c\u3092\u5229\u7528\u3059\u308b\u3068\u3060\u3044\u3076\u697d\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u5b9a\u7fa9\nimport com.googlecode.objectify.annotation.Entity;\nimport com.googlecode.objectify.annotation.Id;\nimport com.googlecode.objectify.annotation.Index;\n\n@Entity\npublic class Car {\n    @Id Long id;\n    @Index String license;\n    int color;\n}\n\n\nPUT(\u4fdd\u5b58)\n    public Car create() {\n        Car car = new Car(\"toyoya\", 1234);\n        ofy().save().entity(car).now();\n    }\n\n\nGET\nResult<Car> result = ofy().load().key(Key.create(Car.class, id));\n\n\nLIST\nResult<Car> result = ofy().load().key(Key.create(Car.class, id));\n\n\nQuery\n// Operators are >, >=, <, <=, in, !=, <>, =, ==\nList<Car> cars = ofy().load().type(Car.class).filter(\"year >\", 1999).list();\nList<Car> cars = ofy().load().type(Car.class).filter(\"year >=\", 1999).list();\nList<Car> cars = ofy().load().type(Car.class).filter(\"year !=\", 1999).list();\nList<Car> cars = ofy().load().type(Car.class).filter(\"year in\", yearList).list();\n\n// The Query itself is Iterable\nQuery<Car> q = ofy().load().type(Car.class).filter(\"vin >\", \"123456789\");\nfor (Car car: q) {\n    System.out.println(car.toString());\n}\n\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\u57fa\u672c@Index\u3067\u8a2d\u5b9a\u3057\u3066\u304a\u3051\u3070Index\u306f\u8a2d\u5b9a\u3055\u308c\u308b\u3002\n\u305f\u3060\u3057\u3001\u30ab\u30b9\u30bf\u30e0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8907\u6570\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\uff09\u306f\u3001datastore-indexes.xml \u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\n\u4f8b\uff09\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<datastore-indexes\n  autoGenerate=\"true\">\n    <datastore-index kind=\"Employee\" ancestor=\"false\">\n        <property name=\"lastName\" direction=\"asc\" />\n        <property name=\"hireDate\" direction=\"desc\" />\n    </datastore-index>\n    <datastore-index kind=\"Project\" ancestor=\"false\">\n        <property name=\"dueDate\" direction=\"asc\" />\n        <property name=\"cost\" direction=\"desc\" />\n    </datastore-index>\n</datastore-indexes>\n\n\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\n\u3061\u3087\u3063\u3068\u7656\u304c\u3042\u3063\u3066\u5236\u9650\u306f\u3042\u308b\u304c\u53ef\u80fd\u3002\u4f7f\u3048\u306a\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u3002\nimport static com.googlecode.objectify.ObjectifyService.ofy;\nimport com.googlecode.objectify.Work;\n\n// If you don't need to return a value, you can use VoidWork\nThing th = ofy().transact(new Work<Thing>() {\n    public Thing run() {\n        Thing thing = ofy().load().key(thingKey).now();\n        thing.modify();\n        ofy().save().entity(thing);\n        return thing;\n    }\n});\n\n\nUsers Service\nGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u30e6\u30fc\u30b6\u8a8d\u8a3c\u3059\u308b\u4ed5\u7d44\u307f\u306a\u3069\u3092\u7c21\u5358\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u3002\n\u4f8b\u3048\u3070\u3068\u3042\u308bURL\u306e\u307fGoogle\u8a8d\u8a3c\u306b\u3059\u308b\u3068\u304b\u3001\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u306e\u307f\u8a8d\u8a3c\u8a31\u53ef\u4e0e\u3048\u308b\u3068\u304b\u3002\n\u30aa\u30da\u30ec\u30fc\u30bf\u5411\u3051\u306e\u753b\u9762\u3060\u3063\u305f\u308a\u3001\u30ea\u30ea\u30fc\u30b9\u524d\u306b\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u306e\u307f\u95b2\u89a7\u3067\u304d\u308b\u3088\u3046\u306bGoogle\u8a8d\u8a3c\u3044\u308c\u305f\u308a\u3068\u304b\u3002\nWebXML\u306e\u307f\u3067\u8a2d\u5b9a\u53ef\u80fd\u3002\n\nMemcache Service\nGoogle Cloud Datastore \u3084\u3001Cloud SQL\u306e\u3088\u3046\u306a\u6c38\u7d9a\u7684\u306a\u30c7\u30fc\u30bf\u4fdd\u5b58\u306e\u4ed5\u7d44\u307f\u3067\u306f\u306a\u304f\u3001\u30a4\u30f3\u30e1\u30e2\u30ea\u3067\u9ad8\u901f\u306b\u3001\u304b\u3064\u4e00\u6642\u7684\u306b\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306b\u5229\u7528\u3067\u304d\u308b\u3002Objectify\u3067\u306f\u3001\u6c38\u7d9a\u5316\u3068\u540c\u6642\u306bMemcache\u306b\u4fdd\u5b58\u3059\u308b\u4ed5\u7d44\u307f\u306a\u3069\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\nTask Queue Service\n\u3044\u308f\u3086\u308b\u30ad\u30e5\u30fc\u3002\uff12\u7a2e\u985e\u306e\u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u3002\n\nPush Queue\n\n\nenqueue\u3057\u305f\u3089\u5373\u5ea7\u306bdequeue\u51e6\u7406\u3055\u308c\u308b\u3002\n\n\nPull Queue\n\n\n\u7279\u5b9a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067dequeue\u3057\u305f\u3044\u5834\u5408\u306b\u5229\u7528\u3067\u304d\u308b\u3002\n\n\n\nenqueue\npublic class Enqueue extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        String key = request.getParameter(\"key\");\n\n        // Add the task to the default queue.\n        Queue queue = QueueFactory.getDefaultQueue();\n        queue.add(TaskOptions.Builder.withUrl(\"/worker\").param(\"key\", key));\n\n        response.sendRedirect(\"/\");\n    }\n}\n\ndequeue\n// The Worker servlet should be mapped to the \"/worker\" URL.\npublic class Worker extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        String key = request.getParameter(\"key\");\n        // Do something with key.\n    }\n}\n\ndequeue\u306f\u3001enqueue\u6642\u306b\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306b\u5bfe\u3057\u3066http\u3067\u51e6\u7406\u8981\u6c42\u304c\u98db\u3093\u3067\u6765\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nScheduled Tasks Serivice (Cron)\n\u3044\u308f\u3086\u308bcron\u3002cron.xml \u8a2d\u5b9a\u3059\u308b\u3002\n\u5404cron\u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8(Servlet)\u3092\u7528\u610f\u3057\u3001\u51e6\u7406\u306fServlet\u3067\u66f8\u304f\u3002\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<cronentries>\n  <cron>\n    <url>/recache</url>\n    <description>Repopulate the cache every 2 minutes</description>\n    <schedule>every 2 minutes</schedule>\n  </cron>\n  <cron>\n    <url>/weeklyreport</url>\n    <description>Mail out a weekly report</description>\n    <schedule>every monday 08:30</schedule>\n    <timezone>America/New_York</timezone>\n  </cron>\n  <cron>\n    <url>/weeklyreport</url>\n    <description>Mail out a weekly report</description>\n    <schedule>every monday 08:30</schedule>\n    <timezone>America/New_York</timezone>\n    <target>version-2</target>\n  </cron>\n</cronentries>\n\n\nChannel Service\n\u3044\u308f\u3086\u308bPubSub\u307f\u305f\u3044\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u30b5\u30fc\u30d3\u30b9\u3002\u30c1\u30e3\u30c3\u30c8\u307f\u305f\u3044\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u308f\u308c\u308b\u3002\u8a73\u7d30\u306f\u304a\u3063\u3066\u8abf\u3079\u308b\u3002\n\nImages Service\n\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u308acrop\u3057\u305f\u308a\u30ed\u30fc\u30c6\u30fc\u30c8\u3057\u305f\u308a\u3092\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u30b5\u30fc\u30d3\u30b9\u3002\nimport com.google.appengine.api.images.Image;\nimport com.google.appengine.api.images.ImagesService;\nimport com.google.appengine.api.images.ImagesServiceFactory;\nimport com.google.appengine.api.images.Transform;\n\n// ...\n        byte[] oldImageData;  // ...\n\n        ImagesService imagesService = ImagesServiceFactory.getImagesService();\n\n        Image oldImage = ImagesServiceFactory.makeImage(oldImageData);\n        Transform resize = ImagesServiceFactory.makeResize(200, 300);\n\n        Image newImage = imagesService.applyTransform(resize, oldImage);\n\n        byte[] newImageData = newImage.getImageData();\n\nBlobstore\uff08\u30d0\u30a4\u30ca\u30ea\u3092\u4fdd\u5b58\u3059\u308b\u4ed5\u7d44\u307f\uff09\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u753b\u50cf\u306a\u3069\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bURL\u306b\u30af\u30a8\u30ea\u3092\u4ed8\u4e0e\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001\u81ea\u52d5\u7684\u306b\u30b9\u30b1\u30fc\u30eb\u3084crop\u3092\u3057\u3066\u304f\u308c\u308b\u3002\n# Resize the image to 32 pixels (aspect-ratio preserved)\nhttp://lhx.ggpht.com/randomStringImageId=s32\n\n# Crop the image to 32 pixels\nhttp://lhx.ggpht.com/randomStringImageId=s32-c\n\n\nModule\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d10\u3065\u304f\u30b5\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u307f\u305f\u3044\u306a\u6982\u5ff5\u3002\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<dispatch-entries>\n  <dispatch>\n      <!-- Default module serves the typical web resources and all static resources. -->\n      <url>*/favicon.ico</url>\n      <module>default</module>\n  </dispatch>\n  <dispatch>\n      <!-- Default module serves simple hostname request. -->\n      <url>simple-sample.appspot.com/</url>\n      <module>default</module>\n  </dispatch>\n  <dispatch>\n      <!-- Send all mobile traffic to the mobile frontend. -->\n      <url>*/mobile/*</url>\n      <module>mobile-frontend</module>\n  </dispatch>\n  <dispatch>\n      <!-- Send all work to the one static backend. -->\n      <url>*/work/*</url>\n      <module>static-backend</module>\n  </dispatch>\n</dispatch-entries>\n\nMicroServices\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u306b\u4f7f\u3048\u308b\u3002\u307e\u305f\u3001dispatch.xml \u3092\u66f8\u304f\u3053\u3068\u3067\u3001URL\u306e\u30d1\u30b9\u3054\u3068\u306b\u6307\u5b9a\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u51e6\u7406\u3092\u59d4\u8b72\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nCloud Debugging\n\u8d85\u3059\u3054\u3044\u3002\u672c\u756a\u74b0\u5883\u3067\u52d5\u3044\u3066\u3044\u308b\u30b5\u30fc\u30d3\u30b9\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u30c7\u30d0\u30c3\u30ab\u304a\u3044\u3066\u30c7\u30d0\u30c3\u30b0\u3067\u304d\u308b\u3002\u73fe\u5728\u306fJava\u306e\u307f\u5229\u7528\u53ef\u80fd\u3002\n\u30c7\u30d0\u30c3\u30ac\u3092\u8a2d\u7f6e\u3059\u308b\u3068\u300120ms\u3050\u3089\u3044\u505c\u6b62\u3057\u3001\u305d\u306e\u9593\u306bsnapshot\u3092\u3068\u3063\u3066\u304f\u308c\u308b\u3002\u5909\u6570\u306e\u5024\u3084\u30e1\u30e2\u30ea\u306a\u3069\u306e\u60c5\u5831\u3092\u30c0\u30f3\u30d7\u3057\u3066\u304f\u308c\u308b\u3002\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u69cb\u6210\n- RestAPI: Jersey\n- Data Binding: MOXy\n- DataStoreAPI: Objectify\n\n# DataStore Service\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3002BigTable\u304c\u30d9\u30fc\u30b9\u3068\u306a\u3063\u305f\u3082\u306e\u3002\n\n- \u30ab\u30a4\u30f3\u30c9(kind)\n - RDB\u306etable\u306b\u76f8\u5f53\n- \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3(entity)\n - RDB\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u76f8\u5f53\n- \u30d7\u30ed\u30d1\u30c6\u30a3(property)\n - RDB\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u76f8\u5f53 \n\n\u30c7\u30fc\u30bf\u306eCRUD\u306e\u64cd\u4f5c\u306f\u3001Java\u3067\u3042\u308c\u3070google\u8b39\u88fd\u306eObjectify\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u3001\u305d\u308c\u3092\u5229\u7528\u3059\u308b\u3068\u3060\u3044\u3076\u697d\n\n## \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u5b9a\u7fa9\n\n```Java\nimport com.googlecode.objectify.annotation.Entity;\nimport com.googlecode.objectify.annotation.Id;\nimport com.googlecode.objectify.annotation.Index;\n\n@Entity\npublic class Car {\n    @Id Long id;\n    @Index String license;\n    int color;\n}\n```\n\n## PUT(\u4fdd\u5b58)\n```\n    public Car create() {\n        Car car = new Car(\"toyoya\", 1234);\n        ofy().save().entity(car).now();\n    }\n```\n\n## GET\n```\nResult<Car> result = ofy().load().key(Key.create(Car.class, id));\n```\n\n## LIST\n```\nResult<Car> result = ofy().load().key(Key.create(Car.class, id));\n```\n\n## Query\n```\n// Operators are >, >=, <, <=, in, !=, <>, =, ==\nList<Car> cars = ofy().load().type(Car.class).filter(\"year >\", 1999).list();\nList<Car> cars = ofy().load().type(Car.class).filter(\"year >=\", 1999).list();\nList<Car> cars = ofy().load().type(Car.class).filter(\"year !=\", 1999).list();\nList<Car> cars = ofy().load().type(Car.class).filter(\"year in\", yearList).list();\n\n// The Query itself is Iterable\nQuery<Car> q = ofy().load().type(Car.class).filter(\"vin >\", \"123456789\");\nfor (Car car: q) {\n    System.out.println(car.toString());\n}\n\n```\n\n\n## \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\u57fa\u672c@Index\u3067\u8a2d\u5b9a\u3057\u3066\u304a\u3051\u3070Index\u306f\u8a2d\u5b9a\u3055\u308c\u308b\u3002\n\u305f\u3060\u3057\u3001\u30ab\u30b9\u30bf\u30e0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u8907\u6570\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\uff09\u306f\u3001datastore-indexes.xml \u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\n\n\u4f8b\uff09\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<datastore-indexes\n  autoGenerate=\"true\">\n    <datastore-index kind=\"Employee\" ancestor=\"false\">\n        <property name=\"lastName\" direction=\"asc\" />\n        <property name=\"hireDate\" direction=\"desc\" />\n    </datastore-index>\n    <datastore-index kind=\"Project\" ancestor=\"false\">\n        <property name=\"dueDate\" direction=\"asc\" />\n        <property name=\"cost\" direction=\"desc\" />\n    </datastore-index>\n</datastore-indexes>\n```\n\n## \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\n\u3061\u3087\u3063\u3068\u7656\u304c\u3042\u3063\u3066\u5236\u9650\u306f\u3042\u308b\u304c\u53ef\u80fd\u3002\u4f7f\u3048\u306a\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n\n```\nimport static com.googlecode.objectify.ObjectifyService.ofy;\nimport com.googlecode.objectify.Work;\n\n// If you don't need to return a value, you can use VoidWork\nThing th = ofy().transact(new Work<Thing>() {\n    public Thing run() {\n        Thing thing = ofy().load().key(thingKey).now();\n        thing.modify();\n        ofy().save().entity(thing);\n        return thing;\n    }\n});\n```\n\n# Users Service\nGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u30e6\u30fc\u30b6\u8a8d\u8a3c\u3059\u308b\u4ed5\u7d44\u307f\u306a\u3069\u3092\u7c21\u5358\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u3002\n\u4f8b\u3048\u3070\u3068\u3042\u308bURL\u306e\u307fGoogle\u8a8d\u8a3c\u306b\u3059\u308b\u3068\u304b\u3001\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u306e\u307f\u8a8d\u8a3c\u8a31\u53ef\u4e0e\u3048\u308b\u3068\u304b\u3002\n\u30aa\u30da\u30ec\u30fc\u30bf\u5411\u3051\u306e\u753b\u9762\u3060\u3063\u305f\u308a\u3001\u30ea\u30ea\u30fc\u30b9\u524d\u306b\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u306e\u307f\u95b2\u89a7\u3067\u304d\u308b\u3088\u3046\u306bGoogle\u8a8d\u8a3c\u3044\u308c\u305f\u308a\u3068\u304b\u3002\nWebXML\u306e\u307f\u3067\u8a2d\u5b9a\u53ef\u80fd\u3002\n\n\n# Memcache Service\nGoogle Cloud Datastore \u3084\u3001Cloud SQL\u306e\u3088\u3046\u306a\u6c38\u7d9a\u7684\u306a\u30c7\u30fc\u30bf\u4fdd\u5b58\u306e\u4ed5\u7d44\u307f\u3067\u306f\u306a\u304f\u3001\u30a4\u30f3\u30e1\u30e2\u30ea\u3067\u9ad8\u901f\u306b\u3001\u304b\u3064\u4e00\u6642\u7684\u306b\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306b\u5229\u7528\u3067\u304d\u308b\u3002Objectify\u3067\u306f\u3001\u6c38\u7d9a\u5316\u3068\u540c\u6642\u306bMemcache\u306b\u4fdd\u5b58\u3059\u308b\u4ed5\u7d44\u307f\u306a\u3069\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n# Task Queue Service\n\u3044\u308f\u3086\u308b\u30ad\u30e5\u30fc\u3002\uff12\u7a2e\u985e\u306e\u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u3002\n\n- Push Queue\n - enqueue\u3057\u305f\u3089\u5373\u5ea7\u306bdequeue\u51e6\u7406\u3055\u308c\u308b\u3002\n- Pull Queue\n - \u7279\u5b9a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067dequeue\u3057\u305f\u3044\u5834\u5408\u306b\u5229\u7528\u3067\u304d\u308b\u3002\n\nenqueue\n\n```Java\npublic class Enqueue extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        String key = request.getParameter(\"key\");\n\n        // Add the task to the default queue.\n        Queue queue = QueueFactory.getDefaultQueue();\n        queue.add(TaskOptions.Builder.withUrl(\"/worker\").param(\"key\", key));\n\n        response.sendRedirect(\"/\");\n    }\n}\n```\n\ndequeue\n\n```Java\n// The Worker servlet should be mapped to the \"/worker\" URL.\npublic class Worker extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        String key = request.getParameter(\"key\");\n        // Do something with key.\n    }\n}\n```\n\ndequeue\u306f\u3001enqueue\u6642\u306b\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306b\u5bfe\u3057\u3066http\u3067\u51e6\u7406\u8981\u6c42\u304c\u98db\u3093\u3067\u6765\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n# Scheduled Tasks Serivice (Cron)\n\u3044\u308f\u3086\u308bcron\u3002cron.xml \u8a2d\u5b9a\u3059\u308b\u3002\n\u5404cron\u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8(Servlet)\u3092\u7528\u610f\u3057\u3001\u51e6\u7406\u306fServlet\u3067\u66f8\u304f\u3002\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<cronentries>\n  <cron>\n    <url>/recache</url>\n    <description>Repopulate the cache every 2 minutes</description>\n    <schedule>every 2 minutes</schedule>\n  </cron>\n  <cron>\n    <url>/weeklyreport</url>\n    <description>Mail out a weekly report</description>\n    <schedule>every monday 08:30</schedule>\n    <timezone>America/New_York</timezone>\n  </cron>\n  <cron>\n    <url>/weeklyreport</url>\n    <description>Mail out a weekly report</description>\n    <schedule>every monday 08:30</schedule>\n    <timezone>America/New_York</timezone>\n    <target>version-2</target>\n  </cron>\n</cronentries>\n```\n\n\n# Channel Service\n\u3044\u308f\u3086\u308bPubSub\u307f\u305f\u3044\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u30b5\u30fc\u30d3\u30b9\u3002\u30c1\u30e3\u30c3\u30c8\u307f\u305f\u3044\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u308f\u308c\u308b\u3002\u8a73\u7d30\u306f\u304a\u3063\u3066\u8abf\u3079\u308b\u3002\n\n\n# Images Service\n\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u308acrop\u3057\u305f\u308a\u30ed\u30fc\u30c6\u30fc\u30c8\u3057\u305f\u308a\u3092\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u30b5\u30fc\u30d3\u30b9\u3002\n\n```\nimport com.google.appengine.api.images.Image;\nimport com.google.appengine.api.images.ImagesService;\nimport com.google.appengine.api.images.ImagesServiceFactory;\nimport com.google.appengine.api.images.Transform;\n\n// ...\n        byte[] oldImageData;  // ...\n\n        ImagesService imagesService = ImagesServiceFactory.getImagesService();\n\n        Image oldImage = ImagesServiceFactory.makeImage(oldImageData);\n        Transform resize = ImagesServiceFactory.makeResize(200, 300);\n\n        Image newImage = imagesService.applyTransform(resize, oldImage);\n\n        byte[] newImageData = newImage.getImageData();\n```\n\nBlobstore\uff08\u30d0\u30a4\u30ca\u30ea\u3092\u4fdd\u5b58\u3059\u308b\u4ed5\u7d44\u307f\uff09\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u753b\u50cf\u306a\u3069\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bURL\u306b\u30af\u30a8\u30ea\u3092\u4ed8\u4e0e\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001\u81ea\u52d5\u7684\u306b\u30b9\u30b1\u30fc\u30eb\u3084crop\u3092\u3057\u3066\u304f\u308c\u308b\u3002\n\n```\n# Resize the image to 32 pixels (aspect-ratio preserved)\nhttp://lhx.ggpht.com/randomStringImageId=s32\n\n# Crop the image to 32 pixels\nhttp://lhx.ggpht.com/randomStringImageId=s32-c\n```\n\n\n# Module\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d10\u3065\u304f\u30b5\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u307f\u305f\u3044\u306a\u6982\u5ff5\u3002\n\n![modules_hierarchy.png](https://qiita-image-store.s3.amazonaws.com/0/20486/3165281b-dfca-7400-1934-96374e8a0e8a.png \"modules_hierarchy.png\")\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<dispatch-entries>\n  <dispatch>\n      <!-- Default module serves the typical web resources and all static resources. -->\n      <url>*/favicon.ico</url>\n      <module>default</module>\n  </dispatch>\n  <dispatch>\n      <!-- Default module serves simple hostname request. -->\n      <url>simple-sample.appspot.com/</url>\n      <module>default</module>\n  </dispatch>\n  <dispatch>\n      <!-- Send all mobile traffic to the mobile frontend. -->\n      <url>*/mobile/*</url>\n      <module>mobile-frontend</module>\n  </dispatch>\n  <dispatch>\n      <!-- Send all work to the one static backend. -->\n      <url>*/work/*</url>\n      <module>static-backend</module>\n  </dispatch>\n</dispatch-entries>\n```\n\nMicroServices\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u306b\u4f7f\u3048\u308b\u3002\u307e\u305f\u3001dispatch.xml \u3092\u66f8\u304f\u3053\u3068\u3067\u3001URL\u306e\u30d1\u30b9\u3054\u3068\u306b\u6307\u5b9a\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u51e6\u7406\u3092\u59d4\u8b72\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n# Cloud Debugging\n\u8d85\u3059\u3054\u3044\u3002\u672c\u756a\u74b0\u5883\u3067\u52d5\u3044\u3066\u3044\u308b\u30b5\u30fc\u30d3\u30b9\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u30c7\u30d0\u30c3\u30ab\u304a\u3044\u3066\u30c7\u30d0\u30c3\u30b0\u3067\u304d\u308b\u3002\u73fe\u5728\u306fJava\u306e\u307f\u5229\u7528\u53ef\u80fd\u3002\n\u30c7\u30d0\u30c3\u30ac\u3092\u8a2d\u7f6e\u3059\u308b\u3068\u300120ms\u3050\u3089\u3044\u505c\u6b62\u3057\u3001\u305d\u306e\u9593\u306bsnapshot\u3092\u3068\u3063\u3066\u304f\u308c\u308b\u3002\u5909\u6570\u306e\u5024\u3084\u30e1\u30e2\u30ea\u306a\u3069\u306e\u60c5\u5831\u3092\u30c0\u30f3\u30d7\u3057\u3066\u304f\u308c\u308b\u3002\n\n"}