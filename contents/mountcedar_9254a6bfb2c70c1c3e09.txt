{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\napache.commons.dbutils\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001Java\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u6271\u3046\u3068\u304d\u306b\u8efd\u91cf\u306eO/R\u30de\u30c3\u30d1\u30fc\u306b\u8fd1\u3044\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u304b\u3089\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nhttp://d.hatena.ne.jp/Kishi/20081212/1229076102\n\n\u666e\u901a\u306bJava\u306eO/R\u30de\u30c3\u30d1\u30fc\u3092\u4f7f\u304a\u3046\u3068\u601d\u3046\u3068\u3001\u304b\u306a\u308a\u5bb9\u91cf\u306e\u5927\u304d\u3044Jar\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u304b\u3064xml\u306e\u8a2d\u5b9a\u306a\u3069\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3068\u3044\u308d\u3044\u308d\u3068\u9762\u5012\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306edbutils\u306f\u6bd4\u8f03\u7684\u8584\u3044\u30e9\u30c3\u30d1\u30fc\u3092\u63d0\u4f9b\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306a\u306e\u3067\u3001\u5bb9\u91cf\u304c\u5c11\u306a\u304f\u3001\u624b\u8efd\u306b\u4f7f\u3048\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002\n\u305f\u3060\u3001sql\u6587\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u305f\u3081\u306bO/R\u30de\u30c3\u30d1\u30fc\u3068\u3044\u3046\u306b\u306f\u5c11\u3057\u3082\u306e\u8db3\u308a\u306a\u3044\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u305d\u306e\u4f7f\u3044\u65b9\u3092\u3082\u3046\u5c11\u3057O/R\u30de\u30c3\u30d1\u30fc\u306b\u8fd1\u3065\u3051\u308b\u305f\u3081\u3001\u30e9\u30c3\u30d4\u30f3\u30b0\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u306e\u30ea\u30de\u30a4\u30f3\u30c0\u3092\u517c\u306d\u3066\u30bd\u30fc\u30b9\u3092\u3055\u3089\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u6ce8\u610f\uff1aProcessing\u7528\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3063\u305f\u306e\u3067\u3001eclipse\u3067\u4f7f\u304a\u3046\u3068\u601d\u3046\u3068\u8272\u3005\u3068Warning\u304c\u51fa\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u9069\u5f53\u306b\u89e3\u6c7a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff0f\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nsqlite-jdbc-3.7.2.jar\ncommons-dbutils-1.5.jar\n\n\u4e0a\u306e\uff12\u3064\u306f\u3001apache.commons.dbutils\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3046\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nhttps://bitbucket.org/xerial/sqlite-jdbc/downloads\nhttp://commons.apache.org/proper/commons-dbutils/download_dbutils.cgi\n\n\u305d\u308c\u4ee5\u5916\u306b\u3082\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\nlogback-classic-0.9.30.jar\nlogback-core-0.9.30.jar\nslf4j-api-1.6.3.jar \n\n\u4e0a\u8a18\u306e\u306e3\u3064\u306f\u30ed\u30b0\u7528\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u304b\u3089\u53d6\u5f97\u3067\u304d\u307e\u3059\u304c\u3001\u9762\u5012\u306a\u3089\u3001\u30b3\u30fc\u30c9\u306e\u4e2d\u306elogger.error()\u3068\u3044\u3046\u95a2\u6570\u3092System.err.println()\u306b\u7f6e\u304d\u63db\u3048\u308c\u3070\u4f7f\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nhttp://logback.qos.ch/download.html\nhttp://www.slf4j.org/download.html\n\n\u203b\u306a\u304a\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u306f\u6700\u65b0\u306e\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u305a\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u306e\u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3067\u3059\u3002\n\nstatic\u306acreateTable\u30e1\u30bd\u30c3\u30c9\n\u5404\u7a2einsert, select, update, delete\u30e1\u30bd\u30c3\u30c9\n\ncreateTable\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u306a\u305c\u666e\u901a\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u304b\u8b0e\u3067\u3059\u304c\u3001\u30af\u30e9\u30b9\u5b9a\u7fa9\u3092\u4e0e\u3048\u308b\u3068\u305d\u306epublic\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u540d\u306f\u3001\u30af\u30e9\u30b9\u540d\u306b\u306a\u308a\u307e\u3059\u3002insert,select,update,delete\u306f\u30e1\u30b8\u30e3\u30fc\u306a\u6a5f\u80fd\u3092\u305d\u308c\u305e\u308csql\u6587\u306a\u3057\u3067\u5b9f\u73fe\u3059\u308b\u3068\u3044\u3046\u8a66\u307f\u3067\u3059\u3002\n\nDBConnection.java\nimport java.sql.Connection;\nimport java.sql.Statement;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\nimport org.apache.commons.dbutils.QueryRunner;\nimport org.apache.commons.dbutils.ResultSetHandler;\nimport org.apache.commons.dbutils.handlers.BeanListHandler;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Arrays;\n\nimport java.lang.Class;\nimport java.lang.reflect.Field;\n\npublic class DBConnection {\n    protected static Logger logger = LoggerFactory.getLogger(DBConnection.class);\n\n    public static DBConnection connection = null;\n\n    public static boolean init (String dbpath) {\n        try {\n            if (DBConnection.connection == null) {\n                DBConnection.connection = new DBConnection (dbpath);\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    protected static Map<String, String> fieldTypeMap = new HashMap <String, String> () {{\n        put (\"int\", \"INT\");\n        put (\"long\", \"INT\");\n        put (\"double\", \"DOUBLE\");\n        put (\"float\", \"FLOAT\");\n        put (\"boolean\", \"BOOLEAN\"); \n\n        put (\"java.lang.Integer\", \"INT\");\n        put (\"java.lang.Long\", \"INT\");\n        put (\"java.lang.Double\", \"DOUBLE\");\n        put (\"java.lang.Float\", \"FLOAT\");       \n        put (\"java.lang.Boolean\", \"BOOLEAN\");\n\n        put (\"java.lang.String\", \"varchar(255)\");\n    }};\n\n    protected static String dropTableStatement = \"drop table %s;\";\n    protected static String createTableStatement = \"create TABLE %s (%s);\";\n\n    public static boolean createTable(Class<?> clazz, boolean forceDrop) {\n        if (forceDrop) {\n            try {\n                Statement statement = connection.con.createStatement();\n                statement.setQueryTimeout(30);\n                statement.executeUpdate(String.format(dropTableStatement, clazz.getName().toLowerCase()));\n                statement.close();\n            } catch (Exception e) {\n                logger.error(\"Error: \" + e.getMessage());\n            }\n        }\n        return createTable(clazz);\n    }\n\n    public static boolean createTable (Class<?> clazz) {\n        try {\n            Field[] fields = clazz.getFields();\n            // StringBuffer buf = new StringBuffer();\n            List<String> declarations = new ArrayList<String>();\n            for (Field f : fields) {\n                String fieldType = fieldTypeMap.get(f.getType().getName());\n                if (fieldType == null) continue;\n                declarations.add(f.getName() + \" \" + fieldType);\n            }\n            String fieldDeclaration = concatWithCommas(declarations);\n            //logger.debug(fieldDeclaration);\n            String query = String.format(\n                createTableStatement, \n                clazz.getName().toLowerCase(), \n                fieldDeclaration\n                );\n            //logger.debug(\"query: {}\", query);\n            DBConnection connection = getInstance();\n\n            Statement statement = connection.con.createStatement();\n            statement.setQueryTimeout(30);\n            statement.executeUpdate(query);\n\n            statement.close();\n\n            return true;\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n            return false;\n        }\n    }\n\n    public static DBConnection getInstance () {\n        return DBConnection.connection;\n    }\n\n    public Connection con = null;\n    public String dbpath = null;\n    public QueryRunner qr = null;\n    protected Map<Class<?>, Map<String, String>> queryStatementMap = null;\n\n\n    public DBConnection (String dbpath) throws Exception {\n        this.dbpath = dbpath;\n        this.qr = new QueryRunner();\n        this.queryStatementMap = new HashMap<Class<?>, Map<String, String>>();\n        if (!this.connect()) {\n            throw new Exception(\"failed to connect db.\");\n        }\n    }\n\n    public boolean registerTable (Class<?> clazz) {\n        try {\n            Field[] fields = clazz.getFields();\n            List<String> fieldNames = new ArrayList<String>();\n            List<String> insertions = new ArrayList<String>();\n            List<String> fieldEquations = new ArrayList<String>();\n\n            for (Field f: fields) {\n                fieldNames.add(f.getName());\n                insertions.add(\"?\");\n                fieldEquations.add(String.format(\"%s = ?\", f.getName()));\n            }\n\n            String insertStatement = String.format(\n                \"insert into %s(%s) values(%s)\",\n                clazz.getName().toLowerCase(),\n                concatWithCommas(fieldNames),\n                concatWithCommas(insertions)\n                );\n\n            String selectStatement = String.format(\n                \"select * from %s\",\n                clazz.getName().toLowerCase()\n                );\n\n            String updateStatement = String.format(\n                \"update %s set %s\",\n                clazz.getName().toLowerCase(),\n                concatWithCommas(fieldEquations)\n                );\n\n            String deleteStatement = String.format(\n                \"delete from %s\",\n                clazz.getName().toLowerCase()\n                );\n\n            Map<String, String> queryStatements = new HashMap<String, String> ();\n            queryStatements.put (\"insert\", insertStatement);\n            queryStatements.put (\"select\", selectStatement);\n            queryStatements.put (\"update\", updateStatement);\n            queryStatements.put (\"delete\", deleteStatement);\n            this.queryStatementMap.put (clazz, queryStatements);\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    public synchronized boolean connect () {\n        try {\n            Class.forName(\"org.sqlite.JDBC\");\n            this.close();\n            con = DriverManager.getConnection(this.dbpath);\n            return true;\n        } catch (ClassNotFoundException e) {\n            logger.error(\"class not found: \" + e.getMessage());\n            return false;\n        } catch (SQLException e) {\n            logger.error(\"SQL Exception: \" + e.getMessage());\n            return false;\n        } catch (Exception e) {\n            logger.error(\"Exception: \" + e.getMessage());\n            return false;\n        } \n    }\n\n    public synchronized void close () {\n        try {\n            if (this.con != null) {\n                this.con.close();\n                this.con = null;\n            }\n        } catch (SQLException e) {\n            logger.error(\"SQL Exception: \" + e.getMessage());\n            return;\n        } catch (Exception e) {\n            logger.error(\"Exception: \" + e.getMessage());           \n            return;\n        }\n    }\n\n    public boolean insert (Object obj) {\n        try {\n            Class<?> clazz = obj.getClass();\n            Map<String, String> queryStatements = this.queryStatementMap.get(clazz);\n            String insertStatement = queryStatements.get(\"insert\");\n            List<Object> fieldValues = new ArrayList<Object>();\n            for (Field f: clazz.getFields()) fieldValues.add(f.get(obj));\n            this.qr.update(this.con, insertStatement, fieldValues.toArray());\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    public List select (Class<?> clazz, String whereStatement, Object param) {\n        try {\n            ResultSetHandler h = new BeanListHandler(clazz);\n            Map<String, String> queryStatements = this.queryStatementMap.get(clazz);\n            String selectStatement = queryStatements.get(\"select\") + \" \" + whereStatement;\n            return (List)this.qr.query(this.con, selectStatement, param, h);\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return null;\n        }\n    }\n\n    public List select (Class<?> clazz, String whereStatement, Object[] params) {\n        try {\n            ResultSetHandler h = new BeanListHandler(clazz);\n            Map<String, String> queryStatements = this.queryStatementMap.get(clazz);\n            String selectStatement = queryStatements.get(\"select\") + \" \" + whereStatement;\n            return (List)this.qr.query(this.con, selectStatement, params, h);\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return null;\n        }\n    }\n\n    public List all (Class<?> clazz) {\n        try {\n            ResultSetHandler h = new BeanListHandler(clazz);\n            Map<String, String> queryStatements = this.queryStatementMap.get(clazz);\n            String selectStatement = queryStatements.get(\"select\");\n            return (List)this.qr.query(this.con, selectStatement, h);\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return null;\n        }\n    }\n\n    public boolean update (Object obj, String whereStatement, Object param) {\n        try {\n            Class<?> clazz = obj.getClass();\n            Map<String, String> queryStatements = this.queryStatementMap.get(clazz);\n            List<Object> params = new ArrayList<Object>();\n            for (Field f: clazz.getFields()) params.add(f.get(obj));\n            params.add(param);\n            String updateStatement = queryStatements.get(\"update\") + \" \" + whereStatement;\n            this.qr.update(this.con, updateStatement, params.toArray());\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    public boolean update (Object obj, String whereStatement, Object[] params) {\n        try {\n            Class<?> clazz = obj.getClass();\n            Map<String, String> queryStatements = this.queryStatementMap.get(clazz);\n            List<Object> params_ = new ArrayList<Object>();\n            for (Field f: clazz.getFields()) params_.add(f.get(obj));\n            params_.addAll(Arrays.asList(params));\n            String updateStatement = queryStatements.get(\"update\") + \" \" + whereStatement;\n            this.qr.update(this.con, updateStatement, params_.toArray());\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    public boolean delete (Class<?> clazz, String whereStatement, Object param) {\n        try {\n            Map<String,String> queryStatements = this.queryStatementMap.get(clazz);\n            String deleteStatement = queryStatements.get(\"delete\") + \" \" + whereStatement;\n            this.qr.update(this.con, deleteStatement, param);\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    public boolean delete (Class<?> clazz, String whereStatement, Object[] params) {\n        try {\n            Map<String,String> queryStatements = this.queryStatementMap.get(clazz);\n            String deleteStatement = queryStatements.get(\"delete\") + \" \" + whereStatement;\n            this.qr.update(this.con, deleteStatement, params);\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    protected static String concatWithCommas(List<String> words) {\n       StringBuffer wordList = new StringBuffer();\n        for (String word : words) wordList.append(word + \",\");\n        return new String(wordList.deleteCharAt(wordList.length() - 1));\n    }\n}\n\n\n\u3053\u306e\u30af\u30e9\u30b9\u306fProcessing\u3067\u4f7f\u3046\u305f\u3081\u306b\u4f5c\u3063\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u306bProcessing\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6dfb\u4ed8\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001pure Java\u3067\u3082\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306e\u6307\u5b9a\u306a\u3069\u304c\u5fc5\u8981\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\nDBUtil.pde\nimport java.util.List;\n\nDBConnection connection = null;\n\npublic void setup () {\n    String dbpath = \"jdbc:sqlite://\" + sketchPath + \"/data.db\";\n    print (\"dbpath: \" + dbpath);\n    connection.init(dbpath);\n\n    connection = DBConnection.getInstance();\n    try {\n        test_run();\n        } catch (Exception e) {\n            System.out.println(\"test failed: \" + e.getMessage());\n        }\n}\n\npublic void draw () {\n}\n\npublic void test_run () throws Exception {\n    DBConnection.createTable(User.class, true);\n    DBConnection db = DBConnection.getInstance();\n    db.registerTable(User.class);\n\n    //\u633f\u5165\n    println (\"#############################################################\");\n    println (\"insertion\");\n    println (\"#############################################################\");\n\n    println (\"\");\n    println (\"inserting (1, Kishi) ...\");\n    User user = new User();\n    user.setId(1);\n    user.setName(\"Kishi\");\n    db.insert(user);\n\n    println (\"\");\n    println (\"inserting (2, Kawa) ...\");\n    User user1 = new User();\n    user1.setId(2);\n    user1.setName(\"Kawa\");\n    db.insert(user1);\n\n    println (\"\");\n    println (\"confirmation\");\n    println (\"--------------\");\n    for(User u : (List<User>)db.all(User.class)) println (u.getId() + \":\" + u.getName());\n\n    println (\"\");\n    println (\"#############################################################\");\n    println (\"selection\");\n    println (\"#############################################################\");\n\n    //\u691c\u7d22\n    println(\"selecting\");\n    println (\"select with name = Kishi ...\");\n    List<User> users = db.select(User.class, \"where name=?\", \"Kishi\");\n\n    println (\"\");\n    println (\"confirmation\");\n    println (\"--------------\");\n    for(User u : users) println (u.getId() + \":\" + u.getName());\n\n    println (\"select with name = Kishi and id = 1 ...\");\n    users = db.select(User.class, \"where name=? and id=?\", new Object [] {\"Kishi\", 1});\n\n    println (\"\");\n    println (\"confirmation\");\n    println (\"--------------\");\n    for(User u : users) println (u.getId() + \":\" + u.getName());\n\n\n    println (\"select all ...\");\n    users = db.all(User.class);\n    println (\"\");\n    println (\"confirmation\");\n    println (\"--------------\");\n    for(User u : users) println (u.getId() + \":\" + u.getName());\n\n    println (\"\");\n    println (\"#############################################################\");\n    println (\"update\");\n    println (\"#############################################################\");\n\n    user = users.get(0);\n\n    println(\"updating the row with id = 1\");\n    User user_ = new User();\n    user_.setName(\"Shiki\");\n    user_.setId(2);\n    db.update(user_, \"where id = ?\", user.getId());\n\n    println (\"\");\n    println (\"confirmation\");\n    println (\"--------------\");\n    for(User u : (List<User>)db.all(User.class)) System.out.println(u.getId() + \":\" + u.getName());\n\n    println(\"updating the row with id = 2 and name = Shiki\");\n    User user__ = new User();\n    user__.setName(\"Hoge\");\n    user__.setId(10);\n    db.update(user__, \"where id = ? and name = ?\", new Object [] {user_.getId(), user_.getName()});\n\n    println (\"\");\n    println (\"confirmation\");\n    println (\"--------------\");\n    for(User u : (List<User>)db.all(User.class)) System.out.println(u.getId() + \":\" + u.getName());\n\n    println (\"\");\n    println (\"#############################################################\");\n    println (\"delete\");\n    println (\"#############################################################\");\n\n    println (\"delete with id = 10 ...\");\n    db.delete(User.class, \"where id=?\", 10);\n\n    println (\"\");\n    println (\"confirmation\");\n    println (\"--------------\");\n    for(User u : (List<User>)db.all(User.class)) System.out.println(u.getId() + \":\" + u.getName());\n\n    println (\"\");\n    println (\"delete with id = 2 and name = Kawa ...\");\n    db.delete(User.class, \"where id=? and name=?\", new Object [] {2, \"Kawa\"});\n\n    println (\"\");\n    println (\"confirmation\");\n    println (\"--------------\");\n    for(User u : (List<User>)db.all(User.class)) System.out.println(u.getId() + \":\" + u.getName());\n\n    println (\"\");\n    println (\"#############################################################\");\n    println (\"\");\n    println (\"all process completed ...\");\n\n    db.close();\n}\n\n\n\u5927\u62b5\u304c\u3001println\u3067\u3059\u304c\u3001\u6d41\u308c\u3092\u8ffd\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u4eca\u56de\u4f7f\u7528\u3057\u3066\u3044\u308bUser\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u306fpublic\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nUser.java\npublic class User {\n    private static final long serialVersionUID = 1L;\n    public int id;\n    public String name;\n\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n\n\n## \u306f\u3058\u3081\u306b\n\napache.commons.dbutils\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001Java\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u6271\u3046\u3068\u304d\u306b\u8efd\u91cf\u306eO/R\u30de\u30c3\u30d1\u30fc\u306b\u8fd1\u3044\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u304b\u3089\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n* http://d.hatena.ne.jp/Kishi/20081212/1229076102\n\n\u666e\u901a\u306bJava\u306eO/R\u30de\u30c3\u30d1\u30fc\u3092\u4f7f\u304a\u3046\u3068\u601d\u3046\u3068\u3001\u304b\u306a\u308a\u5bb9\u91cf\u306e\u5927\u304d\u3044Jar\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u304b\u3064xml\u306e\u8a2d\u5b9a\u306a\u3069\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3068\u3044\u308d\u3044\u308d\u3068\u9762\u5012\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306edbutils\u306f\u6bd4\u8f03\u7684\u8584\u3044\u30e9\u30c3\u30d1\u30fc\u3092\u63d0\u4f9b\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306a\u306e\u3067\u3001\u5bb9\u91cf\u304c\u5c11\u306a\u304f\u3001\u624b\u8efd\u306b\u4f7f\u3048\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002\n\n\u305f\u3060\u3001sql\u6587\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u305f\u3081\u306bO/R\u30de\u30c3\u30d1\u30fc\u3068\u3044\u3046\u306b\u306f\u5c11\u3057\u3082\u306e\u8db3\u308a\u306a\u3044\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u305d\u306e\u4f7f\u3044\u65b9\u3092\u3082\u3046\u5c11\u3057O/R\u30de\u30c3\u30d1\u30fc\u306b\u8fd1\u3065\u3051\u308b\u305f\u3081\u3001\u30e9\u30c3\u30d4\u30f3\u30b0\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u306e\u30ea\u30de\u30a4\u30f3\u30c0\u3092\u517c\u306d\u3066\u30bd\u30fc\u30b9\u3092\u3055\u3089\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u6ce8\u610f\uff1aProcessing\u7528\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u3063\u305f\u306e\u3067\u3001eclipse\u3067\u4f7f\u304a\u3046\u3068\u601d\u3046\u3068\u8272\u3005\u3068Warning\u304c\u51fa\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u9069\u5f53\u306b\u89e3\u6c7a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff0f\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n* sqlite-jdbc-3.7.2.jar\n* commons-dbutils-1.5.jar\n\n\u4e0a\u306e\uff12\u3064\u306f\u3001apache.commons.dbutils\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3046\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n* https://bitbucket.org/xerial/sqlite-jdbc/downloads\n* http://commons.apache.org/proper/commons-dbutils/download_dbutils.cgi\n\n\u305d\u308c\u4ee5\u5916\u306b\u3082\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n* logback-classic-0.9.30.jar\n* logback-core-0.9.30.jar\n* slf4j-api-1.6.3.jar \n\n\u4e0a\u8a18\u306e\u306e3\u3064\u306f\u30ed\u30b0\u7528\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u304b\u3089\u53d6\u5f97\u3067\u304d\u307e\u3059\u304c\u3001\u9762\u5012\u306a\u3089\u3001\u30b3\u30fc\u30c9\u306e\u4e2d\u306elogger.error()\u3068\u3044\u3046\u95a2\u6570\u3092System.err.println()\u306b\u7f6e\u304d\u63db\u3048\u308c\u3070\u4f7f\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n* http://logback.qos.ch/download.html\n* http://www.slf4j.org/download.html\n\n\u203b\u306a\u304a\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u306f\u6700\u65b0\u306e\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u305a\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n## \u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\n\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u306e\u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3067\u3059\u3002\n\n* static\u306acreateTable\u30e1\u30bd\u30c3\u30c9\n* \u5404\u7a2einsert, select, update, delete\u30e1\u30bd\u30c3\u30c9\n\ncreateTable\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u306a\u305c\u666e\u901a\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u304b\u8b0e\u3067\u3059\u304c\u3001\u30af\u30e9\u30b9\u5b9a\u7fa9\u3092\u4e0e\u3048\u308b\u3068\u305d\u306epublic\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u540d\u306f\u3001\u30af\u30e9\u30b9\u540d\u306b\u306a\u308a\u307e\u3059\u3002insert,select,update,delete\u306f\u30e1\u30b8\u30e3\u30fc\u306a\u6a5f\u80fd\u3092\u305d\u308c\u305e\u308csql\u6587\u306a\u3057\u3067\u5b9f\u73fe\u3059\u308b\u3068\u3044\u3046\u8a66\u307f\u3067\u3059\u3002\n\n```DBConnection.java\nimport java.sql.Connection;\nimport java.sql.Statement;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\nimport org.apache.commons.dbutils.QueryRunner;\nimport org.apache.commons.dbutils.ResultSetHandler;\nimport org.apache.commons.dbutils.handlers.BeanListHandler;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Arrays;\n\nimport java.lang.Class;\nimport java.lang.reflect.Field;\n\npublic class DBConnection {\n\tprotected static Logger logger = LoggerFactory.getLogger(DBConnection.class);\n\n\tpublic static DBConnection connection = null;\n\n\tpublic static boolean init (String dbpath) {\n\t\ttry {\n\t\t\tif (DBConnection.connection == null) {\n\t\t\t\tDBConnection.connection = new DBConnection (dbpath);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprotected static Map<String, String> fieldTypeMap = new HashMap <String, String> () {{\n\t\tput (\"int\", \"INT\");\n\t\tput (\"long\", \"INT\");\n\t\tput (\"double\", \"DOUBLE\");\n\t\tput (\"float\", \"FLOAT\");\n\t\tput (\"boolean\", \"BOOLEAN\");\t\n\t\n\t\tput (\"java.lang.Integer\", \"INT\");\n\t\tput (\"java.lang.Long\", \"INT\");\n\t\tput (\"java.lang.Double\", \"DOUBLE\");\n\t\tput (\"java.lang.Float\", \"FLOAT\");\t\t\n\t\tput (\"java.lang.Boolean\", \"BOOLEAN\");\n\n\t\tput (\"java.lang.String\", \"varchar(255)\");\n\t}};\n\n\tprotected static String dropTableStatement = \"drop table %s;\";\n\tprotected static String createTableStatement = \"create TABLE %s (%s);\";\n\n\tpublic static boolean createTable(Class<?> clazz, boolean forceDrop) {\n\t\tif (forceDrop) {\n\t\t\ttry {\n\t\t\t    Statement statement = connection.con.createStatement();\n\t\t\t\tstatement.setQueryTimeout(30);\n\t\t\t\tstatement.executeUpdate(String.format(dropTableStatement, clazz.getName().toLowerCase()));\n\t\t\t\tstatement.close();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Error: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\treturn createTable(clazz);\n\t}\n\n\tpublic static boolean createTable (Class<?> clazz) {\n\t\ttry {\n\t\t\tField[] fields = clazz.getFields();\n\t\t\t// StringBuffer buf = new StringBuffer();\n\t\t\tList<String> declarations = new ArrayList<String>();\n\t\t\tfor (Field f : fields) {\n\t\t\t\tString fieldType = fieldTypeMap.get(f.getType().getName());\n\t\t\t\tif (fieldType == null) continue;\n\t\t\t\tdeclarations.add(f.getName() + \" \" + fieldType);\n\t\t\t}\n\t\t\tString fieldDeclaration = concatWithCommas(declarations);\n\t\t\t//logger.debug(fieldDeclaration);\n\t\t\tString query = String.format(\n\t\t\t\tcreateTableStatement, \n\t\t\t\tclazz.getName().toLowerCase(), \n\t\t\t\tfieldDeclaration\n\t\t\t\t);\n\t\t\t//logger.debug(\"query: {}\", query);\n\t\t\tDBConnection connection = getInstance();\n\n\t\t    Statement statement = connection.con.createStatement();\n    \t\tstatement.setQueryTimeout(30);\n    \t\tstatement.executeUpdate(query);\n\n    \t\tstatement.close();\n\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic static DBConnection getInstance () {\n\t\treturn DBConnection.connection;\n\t}\n\n    public Connection con = null;\n    public String dbpath = null;\n\tpublic QueryRunner qr = null;\n\tprotected Map<Class<?>, Map<String, String>> queryStatementMap = null;\n\n\n\tpublic DBConnection (String dbpath) throws Exception {\n\t\tthis.dbpath = dbpath;\n        this.qr = new QueryRunner();\n        this.queryStatementMap = new HashMap<Class<?>, Map<String, String>>();\n\t\tif (!this.connect()) {\n\t\t\tthrow new Exception(\"failed to connect db.\");\n\t\t}\n\t}\n\n\tpublic boolean registerTable (Class<?> clazz) {\n\t\ttry {\n\t\t\tField[] fields = clazz.getFields();\n\t\t\tList<String> fieldNames = new ArrayList<String>();\n\t\t\tList<String> insertions = new ArrayList<String>();\n\t\t\tList<String> fieldEquations = new ArrayList<String>();\n\n\t\t\tfor (Field f: fields) {\n\t\t\t\tfieldNames.add(f.getName());\n\t\t\t\tinsertions.add(\"?\");\n\t\t\t\tfieldEquations.add(String.format(\"%s = ?\", f.getName()));\n\t\t\t}\n\n\t\t\tString insertStatement = String.format(\n\t\t\t\t\"insert into %s(%s) values(%s)\",\n\t\t\t\tclazz.getName().toLowerCase(),\n\t\t\t\tconcatWithCommas(fieldNames),\n\t\t\t\tconcatWithCommas(insertions)\n\t\t\t\t);\n\n\t\t\tString selectStatement = String.format(\n\t\t\t\t\"select * from %s\",\n\t\t\t\tclazz.getName().toLowerCase()\n\t\t\t\t);\n\n\t\t\tString updateStatement = String.format(\n\t\t\t\t\"update %s set %s\",\n\t\t\t\tclazz.getName().toLowerCase(),\n\t\t\t\tconcatWithCommas(fieldEquations)\n\t\t\t\t);\n\n\t\t\tString deleteStatement = String.format(\n\t\t\t\t\"delete from %s\",\n\t\t\t\tclazz.getName().toLowerCase()\n\t\t\t\t);\n\n\t\t\tMap<String, String> queryStatements = new HashMap<String, String> ();\n\t\t\tqueryStatements.put (\"insert\", insertStatement);\n\t\t\tqueryStatements.put (\"select\", selectStatement);\n\t\t\tqueryStatements.put (\"update\", updateStatement);\n\t\t\tqueryStatements.put (\"delete\", deleteStatement);\n\t\t\tthis.queryStatementMap.put (clazz, queryStatements);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic synchronized boolean connect () {\n\t\ttry {\n\t        Class.forName(\"org.sqlite.JDBC\");\n\t     \tthis.close();\n\t        con = DriverManager.getConnection(this.dbpath);\n\t        return true;\n\t    } catch (ClassNotFoundException e) {\n\t    \tlogger.error(\"class not found: \" + e.getMessage());\n\t    \treturn false;\n\t    } catch (SQLException e) {\n\t    \tlogger.error(\"SQL Exception: \" + e.getMessage());\n\t    \treturn false;\n\t    } catch (Exception e) {\n\t    \tlogger.error(\"Exception: \" + e.getMessage());\n\t    \treturn false;\n\t    } \n\t}\n\n\tpublic synchronized void close () {\n\t\ttry {\n\t        if (this.con != null) {\n\t        \tthis.con.close();\n\t        \tthis.con = null;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t    \tlogger.error(\"SQL Exception: \" + e.getMessage());\n\t\t\treturn;\n\t\t} catch (Exception e) {\n\t    \tlogger.error(\"Exception: \" + e.getMessage());\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tpublic boolean insert (Object obj) {\n\t\ttry {\n\t\t\tClass<?> clazz = obj.getClass();\n\t\t\tMap<String, String> queryStatements = this.queryStatementMap.get(clazz);\n\t\t\tString insertStatement = queryStatements.get(\"insert\");\n\t\t\tList<Object> fieldValues = new ArrayList<Object>();\n\t\t\tfor (Field f: clazz.getFields()) fieldValues.add(f.get(obj));\n\t\t\tthis.qr.update(this.con, insertStatement, fieldValues.toArray());\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic List select (Class<?> clazz, String whereStatement, Object param) {\n\t\ttry {\n\t\t\tResultSetHandler h = new BeanListHandler(clazz);\n\t\t\tMap<String, String> queryStatements = this.queryStatementMap.get(clazz);\n\t\t\tString selectStatement = queryStatements.get(\"select\") + \" \" + whereStatement;\n\t\t\treturn (List)this.qr.query(this.con, selectStatement, param, h);\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic List select (Class<?> clazz, String whereStatement, Object[] params) {\n\t\ttry {\n\t\t\tResultSetHandler h = new BeanListHandler(clazz);\n\t\t\tMap<String, String> queryStatements = this.queryStatementMap.get(clazz);\n\t\t\tString selectStatement = queryStatements.get(\"select\") + \" \" + whereStatement;\n\t\t\treturn (List)this.qr.query(this.con, selectStatement, params, h);\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic List all (Class<?> clazz) {\n\t\ttry {\n\t\t\tResultSetHandler h = new BeanListHandler(clazz);\n\t\t\tMap<String, String> queryStatements = this.queryStatementMap.get(clazz);\n\t\t\tString selectStatement = queryStatements.get(\"select\");\n\t\t\treturn (List)this.qr.query(this.con, selectStatement, h);\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic boolean update (Object obj, String whereStatement, Object param) {\n\t\ttry {\n\t\t\tClass<?> clazz = obj.getClass();\n\t\t\tMap<String, String> queryStatements = this.queryStatementMap.get(clazz);\n\t\t\tList<Object> params = new ArrayList<Object>();\n\t\t\tfor (Field f: clazz.getFields()) params.add(f.get(obj));\n\t\t\tparams.add(param);\n\t\t\tString updateStatement = queryStatements.get(\"update\") + \" \" + whereStatement;\n\t\t\tthis.qr.update(this.con, updateStatement, params.toArray());\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic boolean update (Object obj, String whereStatement, Object[] params) {\n\t\ttry {\n\t\t\tClass<?> clazz = obj.getClass();\n\t\t\tMap<String, String> queryStatements = this.queryStatementMap.get(clazz);\n\t\t\tList<Object> params_ = new ArrayList<Object>();\n\t\t\tfor (Field f: clazz.getFields()) params_.add(f.get(obj));\n\t\t\tparams_.addAll(Arrays.asList(params));\n\t\t\tString updateStatement = queryStatements.get(\"update\") + \" \" + whereStatement;\n\t\t\tthis.qr.update(this.con, updateStatement, params_.toArray());\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic boolean delete (Class<?> clazz, String whereStatement, Object param) {\n\t\ttry {\n\t\t\tMap<String,String> queryStatements = this.queryStatementMap.get(clazz);\n\t\t\tString deleteStatement = queryStatements.get(\"delete\") + \" \" + whereStatement;\n\t\t\tthis.qr.update(this.con, deleteStatement, param);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic boolean delete (Class<?> clazz, String whereStatement, Object[] params) {\n\t\ttry {\n\t\t\tMap<String,String> queryStatements = this.queryStatementMap.get(clazz);\n\t\t\tString deleteStatement = queryStatements.get(\"delete\") + \" \" + whereStatement;\n\t\t\tthis.qr.update(this.con, deleteStatement, params);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprotected static String concatWithCommas(List<String> words) {\n \t   StringBuffer wordList = new StringBuffer();\n    \tfor (String word : words) wordList.append(word + \",\");\n    \treturn new String(wordList.deleteCharAt(wordList.length() - 1));\n\t}\n}\n```\n\n\u3053\u306e\u30af\u30e9\u30b9\u306fProcessing\u3067\u4f7f\u3046\u305f\u3081\u306b\u4f5c\u3063\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u306bProcessing\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6dfb\u4ed8\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001pure Java\u3067\u3082\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306e\u6307\u5b9a\u306a\u3069\u304c\u5fc5\u8981\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n```DBUtil.pde\nimport java.util.List;\n\nDBConnection connection = null;\n\npublic void setup () {\n\tString dbpath = \"jdbc:sqlite://\" + sketchPath + \"/data.db\";\n\tprint (\"dbpath: \" + dbpath);\n\tconnection.init(dbpath);\n\n\tconnection = DBConnection.getInstance();\n\ttry {\n\t\ttest_run();\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"test failed: \" + e.getMessage());\n\t\t}\n}\n\npublic void draw () {\n}\n\npublic void test_run () throws Exception {\n\tDBConnection.createTable(User.class, true);\n\tDBConnection db = DBConnection.getInstance();\n\tdb.registerTable(User.class);\n\n\t//\u633f\u5165\n\tprintln (\"#############################################################\");\n\tprintln (\"insertion\");\n\tprintln (\"#############################################################\");\n\n\tprintln (\"\");\n\tprintln (\"inserting (1, Kishi) ...\");\n\tUser user = new User();\n\tuser.setId(1);\n\tuser.setName(\"Kishi\");\n\tdb.insert(user);\n\n\tprintln (\"\");\n\tprintln (\"inserting (2, Kawa) ...\");\n\tUser user1 = new User();\n\tuser1.setId(2);\n\tuser1.setName(\"Kawa\");\n\tdb.insert(user1);\n\n\tprintln (\"\");\n\tprintln (\"confirmation\");\n\tprintln (\"--------------\");\n\tfor(User u : (List<User>)db.all(User.class)) println (u.getId() + \":\" + u.getName());\n\n\tprintln (\"\");\n\tprintln (\"#############################################################\");\n\tprintln (\"selection\");\n\tprintln (\"#############################################################\");\n\t\n\t//\u691c\u7d22\n\tprintln(\"selecting\");\n\tprintln (\"select with name = Kishi ...\");\n\tList<User> users = db.select(User.class, \"where name=?\", \"Kishi\");\n\n\tprintln (\"\");\n\tprintln (\"confirmation\");\n\tprintln (\"--------------\");\n\tfor(User u : users) println (u.getId() + \":\" + u.getName());\n\n\tprintln (\"select with name = Kishi and id = 1 ...\");\n\tusers = db.select(User.class, \"where name=? and id=?\", new Object [] {\"Kishi\", 1});\n\n\tprintln (\"\");\n\tprintln (\"confirmation\");\n\tprintln (\"--------------\");\n\tfor(User u : users) println (u.getId() + \":\" + u.getName());\n\n\n\tprintln (\"select all ...\");\n\tusers = db.all(User.class);\n\tprintln (\"\");\n\tprintln (\"confirmation\");\n\tprintln (\"--------------\");\n\tfor(User u : users) println (u.getId() + \":\" + u.getName());\n\n\tprintln (\"\");\n\tprintln (\"#############################################################\");\n\tprintln (\"update\");\n\tprintln (\"#############################################################\");\n\n\tuser = users.get(0);\n\n\tprintln(\"updating the row with id = 1\");\n\tUser user_ = new User();\n\tuser_.setName(\"Shiki\");\n\tuser_.setId(2);\n\tdb.update(user_, \"where id = ?\", user.getId());\n\n\tprintln (\"\");\n\tprintln (\"confirmation\");\n\tprintln (\"--------------\");\n\tfor(User u : (List<User>)db.all(User.class)) System.out.println(u.getId() + \":\" + u.getName());\n\n\tprintln(\"updating the row with id = 2 and name = Shiki\");\n\tUser user__ = new User();\n\tuser__.setName(\"Hoge\");\n\tuser__.setId(10);\n\tdb.update(user__, \"where id = ? and name = ?\", new Object [] {user_.getId(), user_.getName()});\n\n\tprintln (\"\");\n\tprintln (\"confirmation\");\n\tprintln (\"--------------\");\n\tfor(User u : (List<User>)db.all(User.class)) System.out.println(u.getId() + \":\" + u.getName());\n\n\tprintln (\"\");\n\tprintln (\"#############################################################\");\n\tprintln (\"delete\");\n\tprintln (\"#############################################################\");\n\n\tprintln (\"delete with id = 10 ...\");\n\tdb.delete(User.class, \"where id=?\", 10);\n\n\tprintln (\"\");\n\tprintln (\"confirmation\");\n\tprintln (\"--------------\");\n\tfor(User u : (List<User>)db.all(User.class)) System.out.println(u.getId() + \":\" + u.getName());\n\n\tprintln (\"\");\n\tprintln (\"delete with id = 2 and name = Kawa ...\");\n\tdb.delete(User.class, \"where id=? and name=?\", new Object [] {2, \"Kawa\"});\n\n\tprintln (\"\");\n\tprintln (\"confirmation\");\n\tprintln (\"--------------\");\n\tfor(User u : (List<User>)db.all(User.class)) System.out.println(u.getId() + \":\" + u.getName());\n\n\tprintln (\"\");\n\tprintln (\"#############################################################\");\n\tprintln (\"\");\n\tprintln (\"all process completed ...\");\n\n\tdb.close();\n}\n```\n\u5927\u62b5\u304c\u3001println\u3067\u3059\u304c\u3001\u6d41\u308c\u3092\u8ffd\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u4eca\u56de\u4f7f\u7528\u3057\u3066\u3044\u308bUser\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u306fpublic\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```java:User.java\npublic class User {\n\tprivate static final long serialVersionUID = 1L;\n\tpublic int id;\n\tpublic String name;\n\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}\n```\n", "tags": ["SQLite3", "sqlite", "processing", "Java", "dbutils"]}