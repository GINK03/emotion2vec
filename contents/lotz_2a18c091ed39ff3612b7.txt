{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f\u30d6\u30ed\u30b0\u306b\u3082\u8f09\u305b\u3066\u3044\u307e\u3059\nhttp://lotz84.github.io/posts/draw-lotka-volterra-equation-using-haskell-and-opengl\n\n\u5148\u65e5\u300c\u30ed\u30c8\u30ab\uff1d\u30f4\u30a9\u30eb\u30c6\u30e9\u65b9\u7a0b\u5f0f\u77e5\u3063\u3066\u308b\uff1f\u300d\u3068\u805e\u304b\u308c\u3066\u4eba\u5de5\u751f\u547d\u306a\u3069\u306b\u71b1\u4e2d\u3057\u3066\u3044\u305f\u61d0\u304b\u3057\u3044\u8a18\u61b6\u304c\u8607\u308a\u307e\u3057\u305f\u3002\u305d\u3046\u8a00\u3048\u3070\u6614\u306fPython\u3067\u76f8\u56f3\u3092\u66f8\u3044\u305f\u8a18\u61b6\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u4eca\u3060\u3063\u305f\u3089\u3068Haskell\u3092\u4f7f\u3063\u3066\u30ed\u30c8\u30ab\uff1d\u30f4\u30a9\u30eb\u30c6\u30e9\u65b9\u7a0b\u5f0f\u306e\u6642\u9593\u767a\u5c55\u3092\u63cf\u753b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u63cf\u753b\u306b\u306fOpenGL\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\nOpenGL\u3092\u4f7f\u3063\u3066\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3059\u308b\u306e\u306bGLUT\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002OpenGL Utility Toolkit\u306eHaskell\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3067\u3059\u3002\u4e88\u3081\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n$ cabal install GLUT\n\n\u30ed\u30c8\u30ab\uff1d\u30f4\u30a9\u30eb\u30c6\u30e9\u65b9\u7a0b\u5f0f\u306fwiki\u306e\u3082\u306e\u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u3042\u3068Haskell\u3067OpenGL\u3092\u4f7f\u3046\u3068\u304d\u306frunhaskell\u3067\u306f\u306a\u304fghc\u3067\u3061\u3083\u3093\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304b\u3089\u5b9f\u884c\u3057\u306a\u3044\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306a\u3093\u3067\u4f55\u3067\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u5b8c\u5168\u306a\u30b3\u30fc\u30c9\u306a\u306e\u3067\u30b3\u30d4\u30da\u3057\u3066\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nimport Data.IORef\nimport Graphics.UI.GLUT\n\ntype Line = [(GLfloat, GLfloat)]\n\n-- \u8a08\u7b97\u7528\u30d1\u30e9\u30e1\u30fc\u30bf\ndt    = 0.01\nalpha = 5.0\nbeta  = 3.0\ngamma = 2.0\ndelta = 2.0\n\nstart = (1.0, 1.0)\n\nmain :: IO ()\nmain = do\n    (_progName, _args) <- getArgsAndInitialize\n    initialDisplayMode $= [DoubleBuffered]\n    _window <- createWindow \"Lotka-Volterra Equation\"\n    orbit <- newIORef [start]\n    idleCallback $= Just (idle orbit)\n    displayCallback $= display orbit\n    mainLoop\n\nidle :: IORef Line -> IdleCallback\nidle orbit = do\n    ps <- get orbit\n    let (x, y) = head ps\n    let nx = (\\x' -> x + x' * dt) $ x * (alpha - beta * y)\n    let ny = (\\y' -> y + y' * dt) $ (negate y) * (gamma - delta * x)\n    orbit $= ((nx, ny) : take 500 ps)\n    postRedisplay Nothing\n\ndisplay :: IORef Line -> DisplayCallback\ndisplay orbit = do \n    clear [ColorBuffer]\n    ps <- get orbit\n    let scale = 0.5\n    let (ox, oy) = (1.2, 2.1)\n    renderPrimitive Lines $\n        mapM_ (\\(x, y) -> vertex $ Vertex3 ((x - ox) * scale) ((y - oy) * scale) 0) ps\n    swapBuffers\n\n\u7c21\u5358\u306b\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nmain :: IO ()\nmain = do\n    (_progName, _args) <- getArgsAndInitialize\n    initialDisplayMode $= [DoubleBuffered]\n    _window <- createWindow \"Lotka-Volterra Equation\"\n    orbit <- newIORef [start]\n    idleCallback $= Just (idle orbit)\n    displayCallback $= display orbit\n    mainLoop\n\n\u6700\u521d\u306e\u65b9\u306f\u307b\u3068\u3093\u3069\u304a\u6c7a\u307e\u308a\u306e\u51e6\u7406\u3067\u3059\u3002\u5927\u4e8b\u306a\u306e\u306fidleCallback\u3068displayCallback\u3067\u305d\u308c\u305e\u308c\u5f85\u6a5f\u6642\u3001\u63cf\u753b\u6642\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u307e\u305a\u5f85\u6a5f\u6642\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\u3092\u898b\u3066\u884c\u304d\u307e\u3057\u3087\u3046\u3002\nidle :: IORef Line -> IdleCallback\nidle orbit = do\n    ps <- get orbit\n    let (x, y) = head ps\n    let nx = (\\x' -> x + x' * dt) $ x * (alpha - beta * y)\n    let ny = (\\y' -> y + y' * dt) $ (negate y) * (gamma - delta * x)\n    orbit $= ((nx, ny) : take 500 ps)\n    postRedisplay Nothing\n\n\u3053\u306e\u95a2\u6570\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3070\u308c\u308b\u306e\u3067\u3053\u3053\u3067\u30ed\u30c8\u30ab\uff1d\u30f4\u30a9\u30eb\u30c6\u30e9\u65b9\u7a0b\u5f0f\u306e\u8a08\u7b97\u3092\u3057\u3066\u3044\u307e\u3059\u3002orbit\u3068\u3044\u3046IORef\u3092\u7528\u610f\u3057\u3066\u3053\u3053\u306b\u8a08\u7b97\u3057\u305f\u8ecc\u9053\u3092\u8caf\u3081\u3066\u3044\u3063\u3066\u3044\u307e\u3059\u3002postRedisplay\u3092\u547c\u3076\u3068displayCallback\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\ndisplay :: IORef Line -> DisplayCallback\ndisplay orbit = do \n    clear [ColorBuffer]\n    ps <- get orbit\n    let scale = 0.5\n    let (ox, oy) = (1.2, 2.1)\n    renderPrimitive Lines $\n        mapM_ (\\(x, y) -> vertex $ Vertex3 ((x - ox) * scale) ((y - oy) * scale) 0) ps\n    swapBuffers\n\n\u3053\u3053\u3067\u306forbit\u306e\u8ecc\u9053\u3092\u5b9f\u969b\u306b\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\u5b9f\u306fmain\u3067DisplayMode\u306bDoubleBuffered\u3092\u6307\u5b9a\u3057\u3066\u3044\u305f\u306e\u3067\u30c0\u30d6\u30eb\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5834\u5408swapBuffers\u3092\u547c\u3079\u3070\u30d0\u30c3\u30d5\u30a1\u306e\u5185\u5bb9\u304c\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\n\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u4f55\u3082\u96e3\u3057\u3044\u3053\u3068\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u5b9f\u969b\u306b\u5b9f\u884c\u3059\u308b\u3068\u8ecc\u9053\u304c\u3050\u308b\u3050\u308b\u52d5\u304f\u306e\u304c\u898b\u308c\u3066\u697d\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u767a\u6563\u3059\u308b\u306e\u306f\u8a08\u7b97\u8aa4\u5dee\u304b\u3089\u3067\u3057\u3087\u3046\u304b\u30fb\u30fb\u30fb\n\u3053\u306e\u8a18\u4e8b\u306f\u30d6\u30ed\u30b0\u306b\u3082\u8f09\u305b\u3066\u3044\u307e\u3059\nhttp://lotz84.github.io/posts/draw-lotka-volterra-equation-using-haskell-and-opengl\n\n----\n\n\u5148\u65e5\u300c\u30ed\u30c8\u30ab\uff1d\u30f4\u30a9\u30eb\u30c6\u30e9\u65b9\u7a0b\u5f0f\u77e5\u3063\u3066\u308b\uff1f\u300d\u3068\u805e\u304b\u308c\u3066\u4eba\u5de5\u751f\u547d\u306a\u3069\u306b\u71b1\u4e2d\u3057\u3066\u3044\u305f\u61d0\u304b\u3057\u3044\u8a18\u61b6\u304c\u8607\u308a\u307e\u3057\u305f\u3002\u305d\u3046\u8a00\u3048\u3070\u6614\u306fPython\u3067\u76f8\u56f3\u3092\u66f8\u3044\u305f\u8a18\u61b6\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u4eca\u3060\u3063\u305f\u3089\u3068Haskell\u3092\u4f7f\u3063\u3066\u30ed\u30c8\u30ab\uff1d\u30f4\u30a9\u30eb\u30c6\u30e9\u65b9\u7a0b\u5f0f\u306e\u6642\u9593\u767a\u5c55\u3092\u63cf\u753b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u63cf\u753b\u306b\u306fOpenGL\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n![](http://i.gyazo.com/5095d0a1b2e6a73925272fe3944650a4.png)\n\nOpenGL\u3092\u4f7f\u3063\u3066\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3059\u308b\u306e\u306b[GLUT](https://hackage.haskell.org/package/GLUT)\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002OpenGL Utility Toolkit\u306eHaskell\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3067\u3059\u3002\u4e88\u3081\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```bash\n$ cabal install GLUT\n```\n\n\u30ed\u30c8\u30ab\uff1d\u30f4\u30a9\u30eb\u30c6\u30e9\u65b9\u7a0b\u5f0f\u306f[wiki](https://www.wikiwand.com/ja/%E3%83%AD%E3%83%88%E3%82%AB%EF%BC%9D%E3%83%B4%E3%82%A9%E3%83%AB%E3%83%86%E3%83%A9%E3%81%AE%E6%96%B9%E7%A8%8B%E5%BC%8F)\u306e\u3082\u306e\u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u3042\u3068Haskell\u3067OpenGL\u3092\u4f7f\u3046\u3068\u304d\u306f`runhaskell`\u3067\u306f\u306a\u304f`ghc`\u3067\u3061\u3083\u3093\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304b\u3089\u5b9f\u884c\u3057\u306a\u3044\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306a\u3093\u3067\u4f55\u3067\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u5b8c\u5168\u306a\u30b3\u30fc\u30c9\u306a\u306e\u3067\u30b3\u30d4\u30da\u3057\u3066\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```haskell\nimport Data.IORef\nimport Graphics.UI.GLUT\n\ntype Line = [(GLfloat, GLfloat)]\n\n-- \u8a08\u7b97\u7528\u30d1\u30e9\u30e1\u30fc\u30bf\ndt    = 0.01\nalpha = 5.0\nbeta  = 3.0\ngamma = 2.0\ndelta = 2.0\n\nstart = (1.0, 1.0)\n\nmain :: IO ()\nmain = do\n    (_progName, _args) <- getArgsAndInitialize\n    initialDisplayMode $= [DoubleBuffered]\n    _window <- createWindow \"Lotka-Volterra Equation\"\n    orbit <- newIORef [start]\n    idleCallback $= Just (idle orbit)\n    displayCallback $= display orbit\n    mainLoop\n\nidle :: IORef Line -> IdleCallback\nidle orbit = do\n    ps <- get orbit\n    let (x, y) = head ps\n    let nx = (\\x' -> x + x' * dt) $ x * (alpha - beta * y)\n    let ny = (\\y' -> y + y' * dt) $ (negate y) * (gamma - delta * x)\n    orbit $= ((nx, ny) : take 500 ps)\n    postRedisplay Nothing\n\ndisplay :: IORef Line -> DisplayCallback\ndisplay orbit = do \n    clear [ColorBuffer]\n    ps <- get orbit\n    let scale = 0.5\n    let (ox, oy) = (1.2, 2.1)\n    renderPrimitive Lines $\n        mapM_ (\\(x, y) -> vertex $ Vertex3 ((x - ox) * scale) ((y - oy) * scale) 0) ps\n    swapBuffers\n```\n\n\u7c21\u5358\u306b\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```haskell\nmain :: IO ()\nmain = do\n    (_progName, _args) <- getArgsAndInitialize\n    initialDisplayMode $= [DoubleBuffered]\n    _window <- createWindow \"Lotka-Volterra Equation\"\n    orbit <- newIORef [start]\n    idleCallback $= Just (idle orbit)\n    displayCallback $= display orbit\n    mainLoop\n```\n\n\u6700\u521d\u306e\u65b9\u306f\u307b\u3068\u3093\u3069\u304a\u6c7a\u307e\u308a\u306e\u51e6\u7406\u3067\u3059\u3002\u5927\u4e8b\u306a\u306e\u306f`idleCallback`\u3068`displayCallback`\u3067\u305d\u308c\u305e\u308c\u5f85\u6a5f\u6642\u3001\u63cf\u753b\u6642\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u307e\u305a\u5f85\u6a5f\u6642\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\u3092\u898b\u3066\u884c\u304d\u307e\u3057\u3087\u3046\u3002\n\n```haskell\nidle :: IORef Line -> IdleCallback\nidle orbit = do\n    ps <- get orbit\n    let (x, y) = head ps\n    let nx = (\\x' -> x + x' * dt) $ x * (alpha - beta * y)\n    let ny = (\\y' -> y + y' * dt) $ (negate y) * (gamma - delta * x)\n    orbit $= ((nx, ny) : take 500 ps)\n    postRedisplay Nothing\n```\n\n\u3053\u306e\u95a2\u6570\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3070\u308c\u308b\u306e\u3067\u3053\u3053\u3067\u30ed\u30c8\u30ab\uff1d\u30f4\u30a9\u30eb\u30c6\u30e9\u65b9\u7a0b\u5f0f\u306e\u8a08\u7b97\u3092\u3057\u3066\u3044\u307e\u3059\u3002orbit\u3068\u3044\u3046IORef\u3092\u7528\u610f\u3057\u3066\u3053\u3053\u306b\u8a08\u7b97\u3057\u305f\u8ecc\u9053\u3092\u8caf\u3081\u3066\u3044\u3063\u3066\u3044\u307e\u3059\u3002`postRedisplay`\u3092\u547c\u3076\u3068`displayCallback`\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n```haskell\ndisplay :: IORef Line -> DisplayCallback\ndisplay orbit = do \n    clear [ColorBuffer]\n    ps <- get orbit\n    let scale = 0.5\n    let (ox, oy) = (1.2, 2.1)\n    renderPrimitive Lines $\n        mapM_ (\\(x, y) -> vertex $ Vertex3 ((x - ox) * scale) ((y - oy) * scale) 0) ps\n    swapBuffers\n```\n\n\u3053\u3053\u3067\u306forbit\u306e\u8ecc\u9053\u3092\u5b9f\u969b\u306b\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\u5b9f\u306f`main`\u3067DisplayMode\u306bDoubleBuffered\u3092\u6307\u5b9a\u3057\u3066\u3044\u305f\u306e\u3067\u30c0\u30d6\u30eb\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5834\u5408`swapBuffers`\u3092\u547c\u3079\u3070\u30d0\u30c3\u30d5\u30a1\u306e\u5185\u5bb9\u304c\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\n\n\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u4f55\u3082\u96e3\u3057\u3044\u3053\u3068\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u5b9f\u969b\u306b\u5b9f\u884c\u3059\u308b\u3068\u8ecc\u9053\u304c\u3050\u308b\u3050\u308b\u52d5\u304f\u306e\u304c\u898b\u308c\u3066\u697d\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u767a\u6563\u3059\u308b\u306e\u306f\u8a08\u7b97\u8aa4\u5dee\u304b\u3089\u3067\u3057\u3087\u3046\u304b\u30fb\u30fb\u30fb\n", "tags": ["Haskell", "OpenGL"]}