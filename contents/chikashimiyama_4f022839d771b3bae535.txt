{"context": " More than 1 year has passed since last update.\n\n\u52d5\u6a5f\n\u4f8b\u3048\u3070\u6709\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u3064\u3044\u3066\u60c5\u5831\u3092\u5168\u3066\u63e1\u3063\u3066\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u300c\u30e1\u30e2\u30ea\u306e\u91cf\u306f\uff1f\u300d\u3066\u304d\u3044\u305f\u3089unsigned int\u3067\u8fd4\u3063\u3066\u304f\u308b\u3051\u3069\u3001\u300cIP\u30a2\u30c9\u30ec\u30b9\u306f\uff1f\u300d\u3066\u304d\u3044\u305f\u3089string\u3067\u8fd4\u3063\u3066\u304f\u308b\u307f\u305f\u3044\u306a\u4e8b\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3067\u304d\u306a\u3044\u304b\u306a\u3068\u601d\u3063\u3066\u305f\u3089\u3001OpenCL\u3067\u904a\u3093\u3067\u3044\u308b\u3068\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306bENUM\u5165\u308c\u3066\u623b\u308a\u5024\u306e\u578b\u3092\u5909\u3048\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u3042\u3063\u3066\u3001\u4fbf\u5229\u3060\u306a\u3068\u601d\u3063\u305f\u3002\ntemplate <cl_int name> typename\u3000detail::param_traits<detail::cl_device_info, name>::param_type cl::Device::getInfo(void)\n\n\u4fbf\u5229\u306a\u3060\u3051\u306b\u3001\u96e3\u89e3\u306a\u30c6\u30f3\u30d7\u30ec\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u521d\u5fc3\u8005\u3068\u3057\u3066\u306f\u8f9b\u3044\u3002\u3053\u308c\u3063\u307d\u3044\u306e\u3092\u4f5c\u308b\u306e\u304c\u3053\u306e\u8a18\u4e8b\u306e\u76ee\u7684\u3002\n\ntemplate <cl_int name> \u306e\u610f\u5473\n\u307e\u305a\u3001\ntemplate <cl_int name> ...\n\n\u3068\u3044\u3046\u90e8\u5206\ntemplate <typename T>\n\n\u3068\u3044\u3046\u304a\u306a\u3058\u307f\u306e\u5b9f\u88c5\u304b\u3089\u306f\u7a0b\u9060\u3044\u3002\n\u305d\u3082\u305d\u3082\u3053\u308c\u304c\u4f55\u3092\u3084\u3063\u3066\u308b\u304b\u304c\u610f\u5473\u308f\u304b\u3089\u3093\u3068\u601d\u3063\u3066\u305f\u3089\u3001\u3053\u3046\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\u3059\u3052\u3048\u7c21\u5358\u3060\u3063\u305f\u3002\n#include <iostream>\nusing namespace std;\n\ntemplate <int NUMBER>\nvoid printParameter(){\n    cout << NUMBER << endl;\n};\n\nint main(){\n    printParameter<30>();\n    return 0;\n}\n\n\u3066\u306a\u611f\u3058\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u95a2\u6570\u5185\u306enumber \u309230\u3067\u7f6e\u304d\u63db\u3048\u3066\u304f\u308c\u308b\u3002\n\u3060\u304b\u3089\u3001\u3053\u308c\u3092\u5fdc\u7528\u3059\u308c\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u30d9\u30fc\u30b9\u306b\u95a2\u6570\u5185\u3067switch\u5206\u5c90\u304c\u51fa\u6765\u308b\u3002\n#include <iostream>\nusing namespace std;\n\nenum class Query{\n    MEMORY_SIZE,\n    IP_ADDRESS\n};\n\ntemplate <Query query>\nvoid printParameter(){\n    switch(query) {\n        case Query::MEMORY_SIZE:\n            cout << \"memory size was asked\" << endl;\n            break;\n        case Query::IP_ADDRESS:\n            cout << \"IP address was asked\" << endl;\n            break;\n    }\n};\n\nint main(){\n    printParameter<Query::MEMORY_SIZE>();\n    printParameter<Query::IP_ADDRESS>();\n    return 0;\n}\n\n\u3053\u308c\u3067\u7d50\u679c\u306f\u3001\nmemory size was asked\nIP address was asked\n\n\u3057\u3063\u304b\u308a\u5206\u5c90\u3067\u304d\u3066\u3044\u308b\u3002\n\u3053\u3053\u307e\u3067\u306fOK\u3060\u304c\u3001\u623b\u308a\u5024\u3092\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u3063\u3066\u5909\u5316\u3055\u305b\u308b\u306e\u304c\u307e\u3060\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\ntypename\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e2d\u306b\u51fa\u3066\u304f\u308b\u6642\u306e\u610f\u5473\n\u8aad\u89e3\u76ee\u6a19\u306eOpenCL\u306e\u95a2\u6570\u306e\u5ba3\u8a00\u306e\ntypename\u3000detail::param_traits<detail::cl_device_info, name>::param_type \n\n\u304c\u304a\u305d\u3089\u304f\u623b\u308a\u5024\u306e\u5ba3\u8a00\u3067\u3001\u52d5\u7684\u306b\u623b\u308a\u5024\u304c\u5909\u308f\u308b\u30c8\u30ea\u30c3\u30af\u304c\u3053\u3053\u306b\u3042\u308b\u3068\u601d\u308f\u308c\u308b\u3002\nparam_traits\u306fcl.hpp\u4e2d\u3067\ntemplate <typename enum_type, cl_int Name>\nstruct param_traits {};\n\n\u3068\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u7a7a\u3063\u307d\u306e\u30af\u30e9\u30b9\u3001traits\u306f\u300c\u7279\u5fb4\u300d\u3068\u3044\u3046\u610f\u5473\u3002\u3053\u306e\u30c0\u30df\u30fc\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5ba3\u8a00\u306b\u5bfe\u3057\u3066\u3001\u660e\u793a\u7684\u7279\u6b8a\u5316\u3092\u52a0\u3048\u307e\u304f\u308b\u65b9\u6cd5\u3067\u3001\u8fd4\u308a\u5024\u306e\u578b\u306e\u5909\u5316\u3092\u5b9f\u88c5\u3057\u3066\u308b\u3063\u307d\u3044\u3002\u305d\u306e\u5f8c\u306b\u3053\u3093\u306a\u306e\u304c\u7d9a\u304f\n#define __CL_DECLARE_PARAM_TRAITS(token, param_name, T) \\\nstruct token;                                          \\\ntemplate<>                                             \\\nstruct param_traits<detail:: token, param_name>         \\\n{                                                      \\\n    enum { value = param_name };                       \\\n    typedef T param_type;                              \\\n};\n\n\uff08\u4e2d\u7565\uff09\n\n#ifdef CL_DEVICE_PROFILING_TIMER_OFFSET_AMD\n__CL_DECLARE_PARAM_TRAITS(cl_device_info, CL_DEVICE_PROFILING_TIMER_OFFSET_AMD, cl_ulong)\n#endif\n\n\n\u3053\u306e\u30de\u30af\u30ed\u306f\u3082\u3057\u3001CL_DEVICE_PROFILING_TIMER_OFFSET_AMD\u304c\u5ba3\u8a00\u3055\u308c\u3066\u3044\u305f\u5834\u5408\nstruct param_traits{                                                      \n    enum { value = CL_DEVICE_PROFILING_TIMER_OFFSET_AMD };                       \n    typedef cl_ulong param_type;                              \n};\n\n\u3068\u5c55\u958b\u3055\u308c\u308b\u3002\u306a\u308b\u307b\u3069\u3002\u3002\u3002\u3053\u3093\u306a\u3053\u3068\u3088\u304f\u8003\u3048\u308b\u3002\n\u7c21\u7565\u5316\u3057\u305f\u30b3\u30fc\u30c9\u3067\u66f8\u3044\u3066\u898b\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\ntemplate <Query query>\nstruct Test_Traits{}; // empty class\n\ntemplate<>\nstruct Test_Traits<Query::MEMORY_SIZE>{\n    typedef unsigned int type;\n};\n\ntemplate<>\nstruct Test_Traits<Query::IP_ADDRESS>{\n    typedef string type;\n};\n\n\n\u305d\u308c\u3067\u3053\u308c\u3089\uff12\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u623b\u308a\u5024\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u3063\u3066\u5909\u3048\u308b\u4e8b\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n#include <iostream>\n\nusing namespace std;\nenum class Query{\n    MEMORY_SIZE,\n    IP_ADDRESS\n};\n\ntemplate <Query query>\nstruct Test_Traits{}; // empty class\n\ntemplate<>\nstruct Test_Traits<Query::MEMORY_SIZE>{\n    typedef unsigned int type;\n};\n\ntemplate<>\nstruct Test_Traits<Query::IP_ADDRESS>{\n    typedef string type;\n};\n\ntemplate <Query query>\ntypename Test_Traits<query>::type printParameter(){\n    typename Test_Traits<query>::type returnValue;\n    switch(query) {\n        case Query::MEMORY_SIZE:\n            cout << \"return value is unsgined int\" << ends;\n            // returnValue = 100;\n            return returnValue;\n            break;\n        case Query::IP_ADDRESS:\n            cout << \"return value is string\" << ends;\n            // returnValue = \"192.168.2.3\";\n            return returnValue;\n            break;\n    }\n};\n\nint main(){\n    cout << printParameter<Query::MEMORY_SIZE>() << endl;\n    cout << printParameter<Query::IP_ADDRESS>() << endl;\n    return 0;\n}\n\n\u305f\u3060\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u308b\u304c\u3001printParameter\u95a2\u6570\u306e\u4e2d\u3067returnValue \u306b\u4f55\u304b\u3092\u4ee3\u5165\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u591a\u5206\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u578b\u304c\u78ba\u5b9a\u3057\u3066\u306a\u3044\u306e\u306b\u3001\u30ea\u30c6\u30e9\u30eb\u5024\u3092\u5165\u308c\u308b\u306a\u3063\u3066\u3053\u3068\u3060\u3068\u601d\u3046\u3002\u6b6f\u304c\u3086\u3044\u3002\n\u306a\u306e\u3067\u3001struct\u5074\u306bstatic\u95a2\u6570\u3067\u5024\u3092\u8fd4\u3059\u65b9\u6cd5\u3067\u5bfe\u51e6\u3002\n#include <iostream>\n\nusing namespace std;\nenum class Query{\n    MEMORY_SIZE,\n    IP_ADDRESS\n};\n\ntemplate <Query query>\nstruct Test_Traits{}; // empty class\n\ntemplate<>\nstruct Test_Traits<Query::MEMORY_SIZE>{\n    typedef unsigned int type;\n    const static unsigned int getValue(){\n        return 64;\n    }};\n\ntemplate<>\nstruct Test_Traits<Query::IP_ADDRESS>{\n    typedef string type;\n    const static string getValue(){\n        return string(\"192.168.0.1\");\n    }\n};\n\ntemplate <Query query>\ntypename Test_Traits<query>::type printParameter(){\n    return Test_Traits<query>::getValue();\n};\n\n\nint main(){\n    unsigned int memorySize =  printParameter<Query::MEMORY_SIZE>();\n    string ip_address = printParameter<Query::IP_ADDRESS>();\n    cout << \"the memory size is \" << memorySize << \" and ip address is \" << ip_address << endl;\n    return 0;\n}\n\n\u3053\u308c\u3067\u4e00\u5fdc\u3001\n1.\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306bENUM\u3092\u6e21\u3059\n2.\u305d\u308c\u3092\u5143\u306b\u623b\u308a\u5024\u306e\u5f62\u3092\u5909\u3048\u308b\n\u3053\u308c\u304c\u3067\u304d\u308b\u95a2\u6570\u306f\u3067\u304d\u305f\u3002\nOpenCL\u306e\u30d8\u30c3\u30c0\u306e\u3088\u3046\u306b\u30e9\u30a4\u30d6\u30e9\u30eaAPI\u3068\u3057\u3066\u306f\u53ef\u8aad\u6027\u304c\u9ad8\u3044\u3082\u306e\u306b\u306a\u308a\u305d\u3046\u3060\u304c...\u5371\u967a\u6027\u3082\u9ad8\u305d\u3046\u306a..\n\n#\u52d5\u6a5f\n\n\u4f8b\u3048\u3070\u6709\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u3064\u3044\u3066\u60c5\u5831\u3092\u5168\u3066\u63e1\u3063\u3066\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u300c\u30e1\u30e2\u30ea\u306e\u91cf\u306f\uff1f\u300d\u3066\u304d\u3044\u305f\u3089unsigned int\u3067\u8fd4\u3063\u3066\u304f\u308b\u3051\u3069\u3001\u300cIP\u30a2\u30c9\u30ec\u30b9\u306f\uff1f\u300d\u3066\u304d\u3044\u305f\u3089string\u3067\u8fd4\u3063\u3066\u304f\u308b\u307f\u305f\u3044\u306a\u4e8b\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3067\u304d\u306a\u3044\u304b\u306a\u3068\u601d\u3063\u3066\u305f\u3089\u3001OpenCL\u3067\u904a\u3093\u3067\u3044\u308b\u3068\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306bENUM\u5165\u308c\u3066\u623b\u308a\u5024\u306e\u578b\u3092\u5909\u3048\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u3042\u3063\u3066\u3001\u4fbf\u5229\u3060\u306a\u3068\u601d\u3063\u305f\u3002\n\n```\ntemplate <cl_int name> typename\u3000detail::param_traits<detail::cl_device_info, name>::param_type cl::Device::getInfo(void)\n```\n\n\u4fbf\u5229\u306a\u3060\u3051\u306b\u3001\u96e3\u89e3\u306a\u30c6\u30f3\u30d7\u30ec\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u521d\u5fc3\u8005\u3068\u3057\u3066\u306f\u8f9b\u3044\u3002\u3053\u308c\u3063\u307d\u3044\u306e\u3092\u4f5c\u308b\u306e\u304c\u3053\u306e\u8a18\u4e8b\u306e\u76ee\u7684\u3002\n\n#template \\<cl_int name\\> \u306e\u610f\u5473\n\n\u307e\u305a\u3001\n\n```\ntemplate <cl_int name> ...\n```\n\u3068\u3044\u3046\u90e8\u5206\n\n```\ntemplate <typename T>\n```\n\n\u3068\u3044\u3046\u304a\u306a\u3058\u307f\u306e\u5b9f\u88c5\u304b\u3089\u306f\u7a0b\u9060\u3044\u3002\n\u305d\u3082\u305d\u3082\u3053\u308c\u304c\u4f55\u3092\u3084\u3063\u3066\u308b\u304b\u304c\u610f\u5473\u308f\u304b\u3089\u3093\u3068\u601d\u3063\u3066\u305f\u3089\u3001[\u3053\u3046\u3044\u3046\u3053\u3068](http://stackoverflow.com/questions/499106/what-does-template-unsigned-int-n-mean)\u3089\u3057\u3044\u3002\u3059\u3052\u3048\u7c21\u5358\u3060\u3063\u305f\u3002\n\n```\n#include <iostream>\nusing namespace std;\n\ntemplate <int NUMBER>\nvoid printParameter(){\n    cout << NUMBER << endl;\n};\n\nint main(){\n    printParameter<30>();\n    return 0;\n}\n```\n\n\u3066\u306a\u611f\u3058\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u95a2\u6570\u5185\u306enumber \u309230\u3067\u7f6e\u304d\u63db\u3048\u3066\u304f\u308c\u308b\u3002\n\n\u3060\u304b\u3089\u3001\u3053\u308c\u3092\u5fdc\u7528\u3059\u308c\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u30d9\u30fc\u30b9\u306b\u95a2\u6570\u5185\u3067switch\u5206\u5c90\u304c\u51fa\u6765\u308b\u3002\n\n```\n#include <iostream>\nusing namespace std;\n\nenum class Query{\n    MEMORY_SIZE,\n    IP_ADDRESS\n};\n\ntemplate <Query query>\nvoid printParameter(){\n    switch(query) {\n        case Query::MEMORY_SIZE:\n            cout << \"memory size was asked\" << endl;\n            break;\n        case Query::IP_ADDRESS:\n            cout << \"IP address was asked\" << endl;\n            break;\n    }\n};\n\nint main(){\n    printParameter<Query::MEMORY_SIZE>();\n    printParameter<Query::IP_ADDRESS>();\n    return 0;\n}\n```\n\u3053\u308c\u3067\u7d50\u679c\u306f\u3001\n\n```\nmemory size was asked\nIP address was asked\n```\n\u3057\u3063\u304b\u308a\u5206\u5c90\u3067\u304d\u3066\u3044\u308b\u3002\n\u3053\u3053\u307e\u3067\u306fOK\u3060\u304c\u3001\u623b\u308a\u5024\u3092\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u3063\u3066\u5909\u5316\u3055\u305b\u308b\u306e\u304c\u307e\u3060\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\n# typename\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e2d\u306b\u51fa\u3066\u304f\u308b\u6642\u306e\u610f\u5473\n\n\u8aad\u89e3\u76ee\u6a19\u306eOpenCL\u306e\u95a2\u6570\u306e\u5ba3\u8a00\u306e\n\n```\ntypename\u3000detail::param_traits<detail::cl_device_info, name>::param_type \n```\n\n\u304c\u304a\u305d\u3089\u304f\u623b\u308a\u5024\u306e\u5ba3\u8a00\u3067\u3001\u52d5\u7684\u306b\u623b\u308a\u5024\u304c\u5909\u308f\u308b\u30c8\u30ea\u30c3\u30af\u304c\u3053\u3053\u306b\u3042\u308b\u3068\u601d\u308f\u308c\u308b\u3002\n\n\nparam_traits\u306fcl.hpp\u4e2d\u3067\n\n```\ntemplate <typename enum_type, cl_int Name>\nstruct param_traits {};\n```\n\n\u3068\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u7a7a\u3063\u307d\u306e\u30af\u30e9\u30b9\u3001traits\u306f\u300c\u7279\u5fb4\u300d\u3068\u3044\u3046\u610f\u5473\u3002\u3053\u306e\u30c0\u30df\u30fc\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5ba3\u8a00\u306b\u5bfe\u3057\u3066\u3001\u660e\u793a\u7684\u7279\u6b8a\u5316\u3092\u52a0\u3048\u307e\u304f\u308b\u65b9\u6cd5\u3067\u3001\u8fd4\u308a\u5024\u306e\u578b\u306e\u5909\u5316\u3092\u5b9f\u88c5\u3057\u3066\u308b\u3063\u307d\u3044\u3002\u305d\u306e\u5f8c\u306b\u3053\u3093\u306a\u306e\u304c\u7d9a\u304f\n\n```\n#define __CL_DECLARE_PARAM_TRAITS(token, param_name, T) \\\nstruct token;                                          \\\ntemplate<>                                             \\\nstruct param_traits<detail:: token, param_name>         \\\n{                                                      \\\n    enum { value = param_name };                       \\\n    typedef T param_type;                              \\\n};\n\n\uff08\u4e2d\u7565\uff09\n\n#ifdef CL_DEVICE_PROFILING_TIMER_OFFSET_AMD\n__CL_DECLARE_PARAM_TRAITS(cl_device_info, CL_DEVICE_PROFILING_TIMER_OFFSET_AMD, cl_ulong)\n#endif\n\n```\n\n\u3053\u306e\u30de\u30af\u30ed\u306f\u3082\u3057\u3001CL_DEVICE_PROFILING_TIMER_OFFSET_AMD\u304c\u5ba3\u8a00\u3055\u308c\u3066\u3044\u305f\u5834\u5408\n\n```\nstruct param_traits{                                                      \n    enum { value = CL_DEVICE_PROFILING_TIMER_OFFSET_AMD };                       \n    typedef cl_ulong param_type;                              \n};\n```\n\n\u3068\u5c55\u958b\u3055\u308c\u308b\u3002\u306a\u308b\u307b\u3069\u3002\u3002\u3002\u3053\u3093\u306a\u3053\u3068\u3088\u304f\u8003\u3048\u308b\u3002\n\u7c21\u7565\u5316\u3057\u305f\u30b3\u30fc\u30c9\u3067\u66f8\u3044\u3066\u898b\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```\n\ntemplate <Query query>\nstruct Test_Traits{}; // empty class\n\ntemplate<>\nstruct Test_Traits<Query::MEMORY_SIZE>{\n    typedef unsigned int type;\n};\n\ntemplate<>\nstruct Test_Traits<Query::IP_ADDRESS>{\n    typedef string type;\n};\n\n```\n\n\u305d\u308c\u3067\u3053\u308c\u3089\uff12\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u623b\u308a\u5024\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u3063\u3066\u5909\u3048\u308b\u4e8b\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\n\n```\n#include <iostream>\n\nusing namespace std;\nenum class Query{\n    MEMORY_SIZE,\n    IP_ADDRESS\n};\n\ntemplate <Query query>\nstruct Test_Traits{}; // empty class\n\ntemplate<>\nstruct Test_Traits<Query::MEMORY_SIZE>{\n    typedef unsigned int type;\n};\n\ntemplate<>\nstruct Test_Traits<Query::IP_ADDRESS>{\n    typedef string type;\n};\n\ntemplate <Query query>\ntypename Test_Traits<query>::type printParameter(){\n    typename Test_Traits<query>::type returnValue;\n    switch(query) {\n        case Query::MEMORY_SIZE:\n            cout << \"return value is unsgined int\" << ends;\n            // returnValue = 100;\n            return returnValue;\n            break;\n        case Query::IP_ADDRESS:\n            cout << \"return value is string\" << ends;\n            // returnValue = \"192.168.2.3\";\n            return returnValue;\n            break;\n    }\n};\n\nint main(){\n    cout << printParameter<Query::MEMORY_SIZE>() << endl;\n    cout << printParameter<Query::IP_ADDRESS>() << endl;\n    return 0;\n}\n```\n\n\u305f\u3060\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u308b\u304c\u3001printParameter\u95a2\u6570\u306e\u4e2d\u3067returnValue \u306b\u4f55\u304b\u3092\u4ee3\u5165\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u591a\u5206\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u578b\u304c\u78ba\u5b9a\u3057\u3066\u306a\u3044\u306e\u306b\u3001\u30ea\u30c6\u30e9\u30eb\u5024\u3092\u5165\u308c\u308b\u306a\u3063\u3066\u3053\u3068\u3060\u3068\u601d\u3046\u3002\u6b6f\u304c\u3086\u3044\u3002\n\n\u306a\u306e\u3067\u3001struct\u5074\u306bstatic\u95a2\u6570\u3067\u5024\u3092\u8fd4\u3059\u65b9\u6cd5\u3067\u5bfe\u51e6\u3002\n\n```\n#include <iostream>\n\nusing namespace std;\nenum class Query{\n    MEMORY_SIZE,\n    IP_ADDRESS\n};\n\ntemplate <Query query>\nstruct Test_Traits{}; // empty class\n\ntemplate<>\nstruct Test_Traits<Query::MEMORY_SIZE>{\n    typedef unsigned int type;\n    const static unsigned int getValue(){\n        return 64;\n    }};\n\ntemplate<>\nstruct Test_Traits<Query::IP_ADDRESS>{\n    typedef string type;\n    const static string getValue(){\n        return string(\"192.168.0.1\");\n    }\n};\n\ntemplate <Query query>\ntypename Test_Traits<query>::type printParameter(){\n    return Test_Traits<query>::getValue();\n};\n\n\nint main(){\n    unsigned int memorySize =  printParameter<Query::MEMORY_SIZE>();\n    string ip_address = printParameter<Query::IP_ADDRESS>();\n    cout << \"the memory size is \" << memorySize << \" and ip address is \" << ip_address << endl;\n    return 0;\n}\n```\n\n\u3053\u308c\u3067\u4e00\u5fdc\u3001\n1.\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306bENUM\u3092\u6e21\u3059\n2.\u305d\u308c\u3092\u5143\u306b\u623b\u308a\u5024\u306e\u5f62\u3092\u5909\u3048\u308b\n\u3053\u308c\u304c\u3067\u304d\u308b\u95a2\u6570\u306f\u3067\u304d\u305f\u3002\n\nOpenCL\u306e\u30d8\u30c3\u30c0\u306e\u3088\u3046\u306b\u30e9\u30a4\u30d6\u30e9\u30eaAPI\u3068\u3057\u3066\u306f\u53ef\u8aad\u6027\u304c\u9ad8\u3044\u3082\u306e\u306b\u306a\u308a\u305d\u3046\u3060\u304c...\u5371\u967a\u6027\u3082\u9ad8\u305d\u3046\u306a..\n", "tags": ["C++", "template", "typename"]}