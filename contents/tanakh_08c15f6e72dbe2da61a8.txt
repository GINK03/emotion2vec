{"context": " More than 1 year has passed since last update.\n\nHaskell\u306b\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30ea\n\u5148\u65e5 inline-c \u3068\u3044\u3046\u3001Haskell\u306e\u30bd\u30fc\u30b9\u306e\u4e2d\u306b\u30a4\u30f3\u30e9\u30a4\u30f3\u3067C\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u307e\u3067\u306e\u985e\u4f3c\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3088\u308a\u3082\u4f7f\u3044\u3084\u3059\u3044\u611f\u3058\u3067\u3001\u611a\u76f4\u306bFFI\u3092\u66f8\u3044\u305f\u308a\u3001\u30d6\u30ea\u30c3\u30b8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u305f\u308a\u4f7f\u3063\u305f\u308a\u3059\u308b\u3088\u308a\u3084\u3063\u3071\u308a\u697d\u306a\u3082\u3093\u3060\u306a\u3042\u3068\u611f\u5fc3\u3057\u3066\u3044\u305f\u3093\u3067\u3059\u304c\u3001\u3053\u308c\u3063\u3066\u3082\u3057\u304b\u3057\u305f\u3089\u30a4\u30f3\u30e9\u30a4\u30f3\u306eC\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u306b\u30a2\u30bb\u30f3\u30d6\u30ea\u66f8\u3051\u3070\u3001Haskell\u306b\u76f4\u63a5\u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\u3068\u3001\u3075\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u3084\u3063\u3066\u307f\u305f\u3089\u666e\u901a\u306b\u3067\u304d\u307e\u3057\u305f\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\ninline-c\ninline-c \u306b\u95a2\u3057\u3066\u306f\u3001GitHub\u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u4e01\u5be7\u306a README.md \u304c\u3042\u308b\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3068\u3044\u3046\u3068\u3053\u308d\u306a\u3093\u3067\u3059\u304c\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u5c11\u3057\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u304b\u3002\n\nTest.hs\n{-# LANGUAGE QuasiQuotes #-}\n\nimport qualified Language.C.Inline as C\n\nsigma :: C.CInt -> IO C.CInt\nsigma x = [C.block| int {\n  int i, ret = 0;\n  for (i = 1; i <= $(int x); i++)\n    ret += i;\n  return ret;\n}|]\n\nmain :: IO ()\nmain = print =<< sigma 10\n\n\ninline-c\u3067\u306f\u3001QuasiQuote\u3067C\u306e\u30b3\u30fc\u30c9\u3092Haskell\u306b\u57cb\u3081\u8fbc\u3080\u306e\u3067\u3001LANGUAGE\u30d7\u30e9\u30b0\u30de\u3067\u3053\u308c\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002sigma\u3068\u3044\u3046\u95a2\u6570\u306f\u3001\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u5f15\u6570x\u306b\u5bfe\u3057\u3066\u30011\u304b\u3089x\u307e\u3067\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u57fa\u672c\u7684\u306bC\u3067\u666e\u901a\u306b\u66f8\u3051\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001$(<\u578b\u540d> <\u5909\u6570\u540d>)\u306a\u3069\u306eunquote\u306b\u3088\u3063\u3066\u3001Haskell\u5074\u306e\u5024\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002unquote\u306f\u5358\u306b\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u3060\u3051\u3067\u306f\u306a\u304f\u3066\u3001\u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u3067\u304d\u3066\u3001\u3057\u304b\u3082\u62e1\u5f35\u53ef\u80fd\u306a\u8a2d\u8a08\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u305d\u3053\u306b\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\nC\u306e\u95a2\u6570\u3092Haskell\u306b\u57cb\u3081\u8fbc\u3081\u305f\u306e\u306f\u3044\u3044\u3051\u3069\u3001\u3053\u308c\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u306e\u304b\uff1f\u3063\u3066\u3044\u3046\u8a71\u3067\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u304c\u3089\u5168\u304f\u666e\u901a\u306b\u3068\u3044\u3046\u308f\u3051\u306b\u306f\u3044\u304b\u306a\u304f\u3066\u3001\u307e\u305aTest.hs\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642IO\u306b\u3088\u3063\u3066\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bTest.c\u3068\u3044\u3046\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u4e2d\u306b\u5fc5\u8981\u306aC\u306e\u30b3\u30fc\u30c9\u304c\u3067\u304d\u4e0a\u304c\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4e00\u7dd2\u306b\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n$ ghc -c Test.hs\n$ ls\nTest.c  Test.hi  Test.hs  Test.o\n\n\u666e\u6bb5\u306eHaskell\u30b3\u30fc\u30c9\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u3067\u304d\u308b.hi\u30d5\u30a1\u30a4\u30eb\u3068\u3001.o\u30d5\u30a1\u30a4\u30eb\u306e\u4ed6\u306b\u3001Test.c\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nTest.c\n$ cat Test.c\n\nint inline_c_0_7f1539fa51c0ab8bf8eb3554152827d72733b9bd(int x_inline_c_0) {\n\n  int i, ret = 0;\n  for (i = 1; i <= x_inline_c_0; i++)\n    ret += i;\n  return ret;\n\n}\n\n\n\u3042\u3068\u306f\u3053\u308c\u3092\u4e00\u7dd2\u306b\u30ea\u30f3\u30af\u3057\u3066\u3084\u308c\u3070OK\u3067\u3059\u3002\n$ gcc -c Test.c -o Test.c.o\n$ ghc Test.o Test.c.o -o Test\n$ ./Test\n55\n\nQuasiQuote\u306f\u3001C.block\u306e\u4ed6\u306b\u3082\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3001\u4f8b\u3048\u3070\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u306eC\u306e\u30b3\u30fc\u30c9\u304c\u5358\u4e00\u306e\u5f0f\u304b\u3089\u306a\u308b\u306e\u3067\u3042\u308c\u3070\u3001\nadd :: C.CInt -> C.CInt -> IO C.CInt\nadd x y = [C.exp| int{ $(int x) + $(int y) } |]\n\n\u306e\u3088\u3046\u306breturn\u3092\u7701\u7565\u3067\u304d\u308bC.exp\u304c\u4f7f\u3048\u307e\u3059\u3057\u3001\u3055\u3089\u306b\u3053\u306e\u5f0f\u304c\u300c\u7d14\u7c8b\u300d\u3067\u3042\u308b\u306a\u3089\u3001\nadd' :: C.CInt -> C.CInt -> C.CInt\nadd' x y = [C.pure| int{ $(int x) + $(int y) } |]\n\nC.pure\u3068\u3044\u3046\u306e\u3092\u7528\u3044\u3066\u3001IO\u3092\u542b\u307e\u306a\u3044\u7d14\u7c8b\u306a\u95a2\u6570\u3092\u5f97\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\u4ee5\u4e0a\u304c\u7c21\u5358\u306ainline-c\u306e\u4f7f\u3044\u65b9\u3067\u3059\u3002\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u57cb\u3081\u8fbc\u3080\n\u3055\u3066\u3001\u3067\u306f\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u57cb\u3081\u8fbc\u3093\u3067\u307f\u307e\u3059\u3002\u3068\u8a00\u3063\u3066\u3082\u3001\u5225\u306b\u7279\u5225\u306a\u3053\u3068\u306f\u306a\u304f\u3066\u3001gcc\u5f62\u5f0f\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3084\u308b\u3060\u3051\u3067\u3059\u3002gcc\u5f62\u5f0f\u3060\u3068\u74b0\u5883\u306b\u5236\u9650\u3092\u4e0e\u3048\u305d\u3046\u3067\u3059\u304c\u3001\u73fe\u5728\u306eghc\u306fgcc\u306b\u4f9d\u5b58\u3057\u3066\u3044\u3066\u3001Windows\u7248\u306eGHC\u3082gcc\u3092\u540c\u68b1\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u591a\u5206\u3069\u3053\u3067\u3082\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\npopcnt :: C.CInt -> IO C.CInt\npopcnt x = [C.block| int{\n  int ret;\n  asm(\"popcnt %1, %0\": \"=r\"(ret): \"r\"($(int x)));\n  return ret;\n}|]\n\nmain :: IO ()\nmain = print =<< popcnt 123\n\n\u3042\u307e\u308a\u304a\u3082\u3057\u308d\u3044\u4f8b\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001popcnt\u3092\u547c\u3073\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u30aa\u30da\u30e9\u30f3\u30c9\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u306e\u6570\u3092\u6570\u3048\u308b\u547d\u4ee4\u3067\u3059\u3002\n$ ghc -c Test.hs -o Test.o\n$ gcc -c Test.c -o Test.c.o\n$ ghc Test.o Test.c.o -o Test\n$ ./Test\n6\n\n\u7279\u306b\u4ee5\u5916\u3067\u3082\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3075\u3064\u3046\u306b\u52d5\u304d\u307e\u3057\u305f\u3002\u591a\u5206\u3053\u308c\u306finline-c\u304c\u4e2d\u8eab\u306eC\u30b3\u30fc\u30c9\u306b\u306f\u3042\u307e\u308a\u6df1\u5165\u308a\u305b\u305a\u306b\u3001\u305d\u306e\u307e\u307eC\u306e\u30b3\u30fc\u30c9\u306b\u5410\u304d\u51fa\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u304b\u3089\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n$ cat Test.c\n\nint inline_c_3_3833d7deec70767d5514934fe8e980fdad611620(int x_inline_c_0) {\n\n  int ret;\n  asm(\"popcnt %1, %0\": \"=r\"(ret): \"r\"(x_inline_c_0));\n  return ret;\n\n}\n\n\n\u4f7f\u7528\u4f8b\n\u30a2\u30bb\u30f3\u30d6\u30ea\u57cb\u3081\u8fbc\u3081\u3066\u4f55\u304b\u5b09\u3057\u3044\u3093\u304b\uff1f\u3063\u3066\u3044\u3046\u8a71\u306a\u3093\u3067\u3059\u304c\u3001\u4eca\u306e\u5fa1\u6642\u4e16\u3001\u901f\u5ea6\u306e\u305f\u3081\u306b\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u66f8\u304f\u306a\u3093\u3066\u3044\u3046\u6a5f\u4f1a\u3082\u3068\u3093\u3068\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3042\u307e\u308a\u601d\u3044\u3064\u304b\u306a\u3044\u3093\u3067\u3059\u304c\u3001C\u304b\u3089\u3067\u306f\u30a2\u30af\u30bb\u30b9\u3057\u3065\u3089\u3044\u3088\u3046\u306a\u3082\u306e\u306b\u4f7f\u3048\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\nRDRAND\n\u4f8b\u3048\u3070\u3001\u6700\u8fd1\u306eIntel CPU\u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4e71\u6570\u547d\u4ee4RDRAND\u306a\u3093\u3066\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\nrdrand :: IO C.CInt\nrdrand = [C.block| int{\n  int ret;\n  asm(\"rdrand %0\": \"=r\"(ret));\n  return ret;\n}|]\n\nmain :: IO ()\nmain = do\n  print =<< rdrand\n  print =<< rdrand\n  print =<< rdrand\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\n$ ./Test\n-1932382952\n1751702702\n-1731380647\n\n\u305d\u308c\u3063\u307d\u304f\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\u307e\u3042\u3067\u3082\u3001gcc\u306eintrinsic\u95a2\u6570\u3067\u3082\u3044\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n{-# LANGUAGE QuasiQuotes     #-}\n{-# LANGUAGE TemplateHaskell #-}\n\nimport qualified Language.C.Inline as C\n\nC.include \"<immintrin.h>\"\n\nrdrand' :: IO C.CInt\nrdrand' = [C.block| int {\n  unsigned int ret;\n  _rdrand32_step(&ret);\n  return ret;\n}|]\n\nC.include \u3067\u751f\u6210\u3059\u308bC\u306e\u30b3\u30fc\u30c9\u306e\u5148\u982d\u306binclude\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3092\u633f\u5165\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u3092\u4f7f\u3046\u305f\u3081\u306b{-# LANGUAGE TemplateHaskell #-}\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nCPUID\n\u3082\u3046\u4e00\u3064\u4f8b\u3068\u3057\u3066\u3001CPUID\u547d\u4ee4\u3092\u547c\u3073\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\u3053\u306e\u547d\u4ee4\u306f\u3001CPU\u306e\u7a2e\u985e\u3084\u3001\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u547d\u4ee4\u30bb\u30c3\u30c8\u306a\u3069\u3092\u554f\u3044\u5408\u308f\u305b\u305f\u308a\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\neax\u30ec\u30b8\u30b9\u30bf\u306b0\u3092\u5165\u308c\u3066\u547c\u3073\u51fa\u3059\u3068\u3001\u305d\u306eCPU\u306e\u30d9\u30f3\u30c0\u30fcID\u304c12\u30d0\u30a4\u30c8\u3067\u3001ebx, edx, ecx\u30ec\u30b8\u30b9\u30bf\u306e\u9806\u306b\u683c\u7d0d\u3055\u308c\u3066\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\u3055\u3066\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u306fCPUID\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u8fd4\u3063\u3066\u304d\u305f\u5024\u3092\u53d6\u5f97\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3059\u304c\u30013\u3064\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u9762\u5012\u3067\u3059\u3002\u3068\u3044\u3046\u306e\u3082\u3001C\u8a00\u8a9e\u306f\u30bf\u30d7\u30eb\u3092\u76f4\u63a5\u8fd4\u305b\u306a\u3044\u306e\u3067\u3001\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3068\u3057\u3066\u306f\u30de\u30fc\u30b7\u30e3\u30ea\u30f3\u30b0\u3067\u304d\u307e\u305b\u3093\u3002\u666e\u901aC\u8a00\u8a9e\u3060\u3068\u3001\u3053\u3046\u3044\u3046\u5834\u5408\u30e1\u30e2\u30ea\u3092\u547c\u3073\u51fa\u3057\u5074\u3067\u78ba\u4fdd\u3057\u3066\u3001\u95a2\u6570\u306b\u306f\u30dd\u30a4\u30f3\u30bf\u3092\u308f\u305f\u3057\u3066\u3084\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3044\u3046\u3053\u3068\u3092Haskell\u3067\u3084\u308a\u307e\u3059\u3002\nwithPtr\u304a\u3088\u3073\u305d\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u306e\u95a2\u6570\u3068\u3057\u3066\u305d\u3046\u3044\u3046\u306e\u304cinline-c\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8907\u6570\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3064\u3064\u3001\u305d\u3053\u306b\u66f8\u304d\u8fbc\u3093\u3060\u5024\u304c\u5168\u4f53\u306e\u8fd4\u308a\u5024\u306b\u306a\u308bwithPtrs_\u3068\u3044\u3046\u95a2\u6570\u304c\u4fbf\u5229\u305d\u3046\u3067\u3059\u3002\n{-# LANGUAGE QuasiQuotes     #-}\n\nimport           Data.Bits\nimport           Data.Char\nimport qualified Language.C.Inline as C\n\ncpuid :: C.CInt -> IO (C.CUInt, C.CUInt, C.CUInt)\ncpuid a =\n  C.withPtrs_ $ \\(b, d, c) -> [C.block| void{\n    asm(\"movl %0, %%eax;\"\n        \"cpuid;\"\n        \"movl %%ebx, (%1);\"\n        \"movl %%edx, (%2);\"\n        \"movl %%ecx, (%3);\"\n        :\n        : \"r\"($(int a))\n        , \"r\"($(unsigned int *b)), \"r\"($(unsigned int *d)), \"r\"($(unsigned int *c))\n        : \"%rax\", \"%rbx\", \"%rcx\", \"%rdx\"\n        );\n  }|]\n\n\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u305f\u3057\u304b\u306b\u30dd\u30a4\u30f3\u30bf\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nvoid inline_c_6_44e2d905032613613a62d5703d30b021155a7f78(int a_inline_c_0, unsigned * b_inline_c_1, unsigned * d_inline_c_2, unsigned * c_inline_c_3) {\n\n    asm(\"movl %0, %%eax;\"\n        \"cpuid;\"\n        \"movl %%ebx, (%1);\"\n        \"movl %%edx, (%2);\"\n        \"movl %%ecx, (%3);\"\n        :\n        : \"r\"(a_inline_c_0), \"r\"(b_inline_c_1), \"r\"(d_inline_c_2), \"r\"(c_inline_c_3)\n        : \"%rax\", \"%rbx\", \"%rcx\", \"%rdx\"\n        );\n\n}\n\n\u3042\u3068\u306f\u3053\u308c\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3059\u3002\nmain :: IO ()\nmain = do\n  (ebx, edx, ecx) <- cpuid 0\n  let f n = [ chr $ fromIntegral $ n `shiftR` (8*i) .&. 0xff | i <- [0..3]]\n  putStrLn $ f ebx ++ f edx ++ f ecx\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ ./Test\nGenuineIntel\n\n\u3046\u307e\u304f\u52d5\u3044\u305f\u3088\u3046\u3067\u3059\u3002\n\n# Haskell\u306b\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30ea\n\n\u5148\u65e5 [inline-c](https://hackage.haskell.org/package/inline-c) \u3068\u3044\u3046\u3001Haskell\u306e\u30bd\u30fc\u30b9\u306e\u4e2d\u306b\u30a4\u30f3\u30e9\u30a4\u30f3\u3067C\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u307e\u3067\u306e\u985e\u4f3c\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3088\u308a\u3082\u4f7f\u3044\u3084\u3059\u3044\u611f\u3058\u3067\u3001\u611a\u76f4\u306bFFI\u3092\u66f8\u3044\u305f\u308a\u3001\u30d6\u30ea\u30c3\u30b8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u305f\u308a\u4f7f\u3063\u305f\u308a\u3059\u308b\u3088\u308a\u3084\u3063\u3071\u308a\u697d\u306a\u3082\u3093\u3060\u306a\u3042\u3068\u611f\u5fc3\u3057\u3066\u3044\u305f\u3093\u3067\u3059\u304c\u3001\u3053\u308c\u3063\u3066\u3082\u3057\u304b\u3057\u305f\u3089\u30a4\u30f3\u30e9\u30a4\u30f3\u306eC\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u306b\u30a2\u30bb\u30f3\u30d6\u30ea\u66f8\u3051\u3070\u3001Haskell\u306b\u76f4\u63a5\u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\u3068\u3001\u3075\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u3084\u3063\u3066\u307f\u305f\u3089\u666e\u901a\u306b\u3067\u304d\u307e\u3057\u305f\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n# inline-c\n\ninline-c \u306b\u95a2\u3057\u3066\u306f\u3001GitHub\u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u4e01\u5be7\u306a [README.md](https://github.com/fpco/inline-c) \u304c\u3042\u308b\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3068\u3044\u3046\u3068\u3053\u308d\u306a\u3093\u3067\u3059\u304c\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u5c11\u3057\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u304b\u3002\n\n```hs:Test.hs\n{-# LANGUAGE QuasiQuotes #-}\n\nimport qualified Language.C.Inline as C\n\nsigma :: C.CInt -> IO C.CInt\nsigma x = [C.block| int {\n  int i, ret = 0;\n  for (i = 1; i <= $(int x); i++)\n    ret += i;\n  return ret;\n}|]\n\nmain :: IO ()\nmain = print =<< sigma 10\n```\n\ninline-c\u3067\u306f\u3001`QuasiQuote`\u3067C\u306e\u30b3\u30fc\u30c9\u3092Haskell\u306b\u57cb\u3081\u8fbc\u3080\u306e\u3067\u3001LANGUAGE\u30d7\u30e9\u30b0\u30de\u3067\u3053\u308c\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002`sigma`\u3068\u3044\u3046\u95a2\u6570\u306f\u3001\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u5f15\u6570`x`\u306b\u5bfe\u3057\u3066\u30011\u304b\u3089x\u307e\u3067\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u57fa\u672c\u7684\u306bC\u3067\u666e\u901a\u306b\u66f8\u3051\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001$(<\u578b\u540d> <\u5909\u6570\u540d>)\u306a\u3069\u306eunquote\u306b\u3088\u3063\u3066\u3001Haskell\u5074\u306e\u5024\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002unquote\u306f\u5358\u306b\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u3060\u3051\u3067\u306f\u306a\u304f\u3066\u3001\u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u3067\u304d\u3066\u3001\u3057\u304b\u3082\u62e1\u5f35\u53ef\u80fd\u306a\u8a2d\u8a08\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u305d\u3053\u306b\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\nC\u306e\u95a2\u6570\u3092Haskell\u306b\u57cb\u3081\u8fbc\u3081\u305f\u306e\u306f\u3044\u3044\u3051\u3069\u3001\u3053\u308c\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u306e\u304b\uff1f\u3063\u3066\u3044\u3046\u8a71\u3067\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u304c\u3089\u5168\u304f\u666e\u901a\u306b\u3068\u3044\u3046\u308f\u3051\u306b\u306f\u3044\u304b\u306a\u304f\u3066\u3001\u307e\u305a`Test.hs`\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642IO\u306b\u3088\u3063\u3066\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bTest.c\u3068\u3044\u3046\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u4e2d\u306b\u5fc5\u8981\u306aC\u306e\u30b3\u30fc\u30c9\u304c\u3067\u304d\u4e0a\u304c\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4e00\u7dd2\u306b\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n```bash\n$ ghc -c Test.hs\n$ ls\nTest.c  Test.hi  Test.hs  Test.o\n```\n\n\u666e\u6bb5\u306eHaskell\u30b3\u30fc\u30c9\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u3067\u304d\u308b`.hi`\u30d5\u30a1\u30a4\u30eb\u3068\u3001`.o`\u30d5\u30a1\u30a4\u30eb\u306e\u4ed6\u306b\u3001`Test.c`\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```cpp:Test.c\n$ cat Test.c\n\nint inline_c_0_7f1539fa51c0ab8bf8eb3554152827d72733b9bd(int x_inline_c_0) {\n\n  int i, ret = 0;\n  for (i = 1; i <= x_inline_c_0; i++)\n    ret += i;\n  return ret;\n\n}\n```\n\n\u3042\u3068\u306f\u3053\u308c\u3092\u4e00\u7dd2\u306b\u30ea\u30f3\u30af\u3057\u3066\u3084\u308c\u3070OK\u3067\u3059\u3002\n\n```bash\n$ gcc -c Test.c -o Test.c.o\n$ ghc Test.o Test.c.o -o Test\n$ ./Test\n55\n```\n\nQuasiQuote\u306f\u3001`C.block`\u306e\u4ed6\u306b\u3082\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3001\u4f8b\u3048\u3070\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u306eC\u306e\u30b3\u30fc\u30c9\u304c\u5358\u4e00\u306e\u5f0f\u304b\u3089\u306a\u308b\u306e\u3067\u3042\u308c\u3070\u3001\n\n```hs\nadd :: C.CInt -> C.CInt -> IO C.CInt\nadd x y = [C.exp| int{ $(int x) + $(int y) } |]\n```\n\n\u306e\u3088\u3046\u306breturn\u3092\u7701\u7565\u3067\u304d\u308b`C.exp`\u304c\u4f7f\u3048\u307e\u3059\u3057\u3001\u3055\u3089\u306b\u3053\u306e\u5f0f\u304c\u300c\u7d14\u7c8b\u300d\u3067\u3042\u308b\u306a\u3089\u3001\n\n```hs\nadd' :: C.CInt -> C.CInt -> C.CInt\nadd' x y = [C.pure| int{ $(int x) + $(int y) } |]\n```\n\n`C.pure`\u3068\u3044\u3046\u306e\u3092\u7528\u3044\u3066\u3001IO\u3092\u542b\u307e\u306a\u3044\u7d14\u7c8b\u306a\u95a2\u6570\u3092\u5f97\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u304c\u7c21\u5358\u306a`inline-c`\u306e\u4f7f\u3044\u65b9\u3067\u3059\u3002\n\n# \u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u57cb\u3081\u8fbc\u3080\n\n\u3055\u3066\u3001\u3067\u306f\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u57cb\u3081\u8fbc\u3093\u3067\u307f\u307e\u3059\u3002\u3068\u8a00\u3063\u3066\u3082\u3001\u5225\u306b\u7279\u5225\u306a\u3053\u3068\u306f\u306a\u304f\u3066\u3001`gcc`\u5f62\u5f0f\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3084\u308b\u3060\u3051\u3067\u3059\u3002`gcc`\u5f62\u5f0f\u3060\u3068\u74b0\u5883\u306b\u5236\u9650\u3092\u4e0e\u3048\u305d\u3046\u3067\u3059\u304c\u3001\u73fe\u5728\u306eghc\u306fgcc\u306b\u4f9d\u5b58\u3057\u3066\u3044\u3066\u3001Windows\u7248\u306eGHC\u3082gcc\u3092\u540c\u68b1\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u591a\u5206\u3069\u3053\u3067\u3082\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n```hs\npopcnt :: C.CInt -> IO C.CInt\npopcnt x = [C.block| int{\n  int ret;\n  asm(\"popcnt %1, %0\": \"=r\"(ret): \"r\"($(int x)));\n  return ret;\n}|]\n\nmain :: IO ()\nmain = print =<< popcnt 123\n```\n\n\u3042\u307e\u308a\u304a\u3082\u3057\u308d\u3044\u4f8b\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001`popcnt`\u3092\u547c\u3073\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u30aa\u30da\u30e9\u30f3\u30c9\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u306e\u6570\u3092\u6570\u3048\u308b\u547d\u4ee4\u3067\u3059\u3002\n\n```bash\n$ ghc -c Test.hs -o Test.o\n$ gcc -c Test.c -o Test.c.o\n$ ghc Test.o Test.c.o -o Test\n$ ./Test\n6\n```\n\n\u7279\u306b\u4ee5\u5916\u3067\u3082\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3075\u3064\u3046\u306b\u52d5\u304d\u307e\u3057\u305f\u3002\u591a\u5206\u3053\u308c\u306f`inline-c`\u304c\u4e2d\u8eab\u306eC\u30b3\u30fc\u30c9\u306b\u306f\u3042\u307e\u308a\u6df1\u5165\u308a\u305b\u305a\u306b\u3001\u305d\u306e\u307e\u307eC\u306e\u30b3\u30fc\u30c9\u306b\u5410\u304d\u51fa\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u304b\u3089\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n```c\n$ cat Test.c\n\nint inline_c_3_3833d7deec70767d5514934fe8e980fdad611620(int x_inline_c_0) {\n\n  int ret;\n  asm(\"popcnt %1, %0\": \"=r\"(ret): \"r\"(x_inline_c_0));\n  return ret;\n\n}\n```\n\n# \u4f7f\u7528\u4f8b\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u57cb\u3081\u8fbc\u3081\u3066\u4f55\u304b\u5b09\u3057\u3044\u3093\u304b\uff1f\u3063\u3066\u3044\u3046\u8a71\u306a\u3093\u3067\u3059\u304c\u3001\u4eca\u306e\u5fa1\u6642\u4e16\u3001\u901f\u5ea6\u306e\u305f\u3081\u306b\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u66f8\u304f\u306a\u3093\u3066\u3044\u3046\u6a5f\u4f1a\u3082\u3068\u3093\u3068\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3042\u307e\u308a\u601d\u3044\u3064\u304b\u306a\u3044\u3093\u3067\u3059\u304c\u3001C\u304b\u3089\u3067\u306f\u30a2\u30af\u30bb\u30b9\u3057\u3065\u3089\u3044\u3088\u3046\u306a\u3082\u306e\u306b\u4f7f\u3048\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n## RDRAND\n\n\u4f8b\u3048\u3070\u3001\u6700\u8fd1\u306eIntel CPU\u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4e71\u6570\u547d\u4ee4`RDRAND`\u306a\u3093\u3066\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n```hs\nrdrand :: IO C.CInt\nrdrand = [C.block| int{\n  int ret;\n  asm(\"rdrand %0\": \"=r\"(ret));\n  return ret;\n}|]\n\nmain :: IO ()\nmain = do\n  print =<< rdrand\n  print =<< rdrand\n  print =<< rdrand\n```\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\n\n```bash\n$ ./Test\n-1932382952\n1751702702\n-1731380647\n```\n\n\u305d\u308c\u3063\u307d\u304f\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\u307e\u3042\u3067\u3082\u3001gcc\u306eintrinsic\u95a2\u6570\u3067\u3082\u3044\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n```hs\n{-# LANGUAGE QuasiQuotes     #-}\n{-# LANGUAGE TemplateHaskell #-}\n\nimport qualified Language.C.Inline as C\n\nC.include \"<immintrin.h>\"\n\nrdrand' :: IO C.CInt\nrdrand' = [C.block| int {\n  unsigned int ret;\n  _rdrand32_step(&ret);\n  return ret;\n}|]\n```\n\n`C.include` \u3067\u751f\u6210\u3059\u308bC\u306e\u30b3\u30fc\u30c9\u306e\u5148\u982d\u306binclude\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3092\u633f\u5165\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u3092\u4f7f\u3046\u305f\u3081\u306b`{-# LANGUAGE TemplateHaskell #-}`\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n## CPUID\n\n\u3082\u3046\u4e00\u3064\u4f8b\u3068\u3057\u3066\u3001`CPUID`\u547d\u4ee4\u3092\u547c\u3073\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\u3053\u306e\u547d\u4ee4\u306f\u3001CPU\u306e\u7a2e\u985e\u3084\u3001\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u547d\u4ee4\u30bb\u30c3\u30c8\u306a\u3069\u3092\u554f\u3044\u5408\u308f\u305b\u305f\u308a\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n`eax`\u30ec\u30b8\u30b9\u30bf\u306b0\u3092\u5165\u308c\u3066\u547c\u3073\u51fa\u3059\u3068\u3001\u305d\u306eCPU\u306e\u30d9\u30f3\u30c0\u30fcID\u304c12\u30d0\u30a4\u30c8\u3067\u3001`ebx`, `edx`, `ecx`\u30ec\u30b8\u30b9\u30bf\u306e\u9806\u306b\u683c\u7d0d\u3055\u308c\u3066\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u306f`CPUID`\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u8fd4\u3063\u3066\u304d\u305f\u5024\u3092\u53d6\u5f97\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3059\u304c\u30013\u3064\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u9762\u5012\u3067\u3059\u3002\u3068\u3044\u3046\u306e\u3082\u3001C\u8a00\u8a9e\u306f\u30bf\u30d7\u30eb\u3092\u76f4\u63a5\u8fd4\u305b\u306a\u3044\u306e\u3067\u3001\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3068\u3057\u3066\u306f\u30de\u30fc\u30b7\u30e3\u30ea\u30f3\u30b0\u3067\u304d\u307e\u305b\u3093\u3002\u666e\u901aC\u8a00\u8a9e\u3060\u3068\u3001\u3053\u3046\u3044\u3046\u5834\u5408\u30e1\u30e2\u30ea\u3092\u547c\u3073\u51fa\u3057\u5074\u3067\u78ba\u4fdd\u3057\u3066\u3001\u95a2\u6570\u306b\u306f\u30dd\u30a4\u30f3\u30bf\u3092\u308f\u305f\u3057\u3066\u3084\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3044\u3046\u3053\u3068\u3092Haskell\u3067\u3084\u308a\u307e\u3059\u3002\n\n`withPtr`\u304a\u3088\u3073\u305d\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u306e\u95a2\u6570\u3068\u3057\u3066\u305d\u3046\u3044\u3046\u306e\u304c`inline-c`\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8907\u6570\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3064\u3064\u3001\u305d\u3053\u306b\u66f8\u304d\u8fbc\u3093\u3060\u5024\u304c\u5168\u4f53\u306e\u8fd4\u308a\u5024\u306b\u306a\u308b`withPtrs_`\u3068\u3044\u3046\u95a2\u6570\u304c\u4fbf\u5229\u305d\u3046\u3067\u3059\u3002\n\n```hs\n{-# LANGUAGE QuasiQuotes     #-}\n\nimport           Data.Bits\nimport           Data.Char\nimport qualified Language.C.Inline as C\n\ncpuid :: C.CInt -> IO (C.CUInt, C.CUInt, C.CUInt)\ncpuid a =\n  C.withPtrs_ $ \\(b, d, c) -> [C.block| void{\n    asm(\"movl %0, %%eax;\"\n        \"cpuid;\"\n        \"movl %%ebx, (%1);\"\n        \"movl %%edx, (%2);\"\n        \"movl %%ecx, (%3);\"\n        :\n        : \"r\"($(int a))\n        , \"r\"($(unsigned int *b)), \"r\"($(unsigned int *d)), \"r\"($(unsigned int *c))\n        : \"%rax\", \"%rbx\", \"%rcx\", \"%rdx\"\n        );\n  }|]\n```\n\n\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u305f\u3057\u304b\u306b\u30dd\u30a4\u30f3\u30bf\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n```cpp\nvoid inline_c_6_44e2d905032613613a62d5703d30b021155a7f78(int a_inline_c_0, unsigned * b_inline_c_1, unsigned * d_inline_c_2, unsigned * c_inline_c_3) {\n\n    asm(\"movl %0, %%eax;\"\n        \"cpuid;\"\n        \"movl %%ebx, (%1);\"\n        \"movl %%edx, (%2);\"\n        \"movl %%ecx, (%3);\"\n        :\n        : \"r\"(a_inline_c_0), \"r\"(b_inline_c_1), \"r\"(d_inline_c_2), \"r\"(c_inline_c_3)\n        : \"%rax\", \"%rbx\", \"%rcx\", \"%rdx\"\n        );\n\n}\n```\n\n\u3042\u3068\u306f\u3053\u308c\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3059\u3002\n\n```hs\nmain :: IO ()\nmain = do\n  (ebx, edx, ecx) <- cpuid 0\n  let f n = [ chr $ fromIntegral $ n `shiftR` (8*i) .&. 0xff | i <- [0..3]]\n  putStrLn $ f ebx ++ f edx ++ f ecx\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```bash\n$ ./Test\nGenuineIntel\n```\n\n\u3046\u307e\u304f\u52d5\u3044\u305f\u3088\u3046\u3067\u3059\u3002\n", "tags": ["Haskell", "C", "assembly"]}