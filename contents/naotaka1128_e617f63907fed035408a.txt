{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306f\u3010\u8ee2\u8077\u4f1a\u8b70\u3011\u30af\u30c1\u30b3\u30df\u3092word2vec\u3067\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3057\u3066\u4f1a\u793e\u3092\u5206\u985e\u3057\u3066\u307f\u308b\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u524d\u56de\u306f\u8ee2\u8077\u4f1a\u8b70\u306e\u30af\u30c1\u30b3\u30df\u3092word2vec\u3067\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u3057\u305f\u7d50\u679c\u3001\u4f3c\u3066\u3044\u308b\u4f1a\u793e\u3084\u5358\u8a9e\u3092\u8abf\u3079\u308b\u3053\u3068\u304c\u51fa\u6765\u305f\u3068\u3044\u3046\u5185\u5bb9\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u305d\u306e\u7d50\u679c\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u6ce8\u610f\n\u524d\u56de\u306e\u8a18\u4e8b\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306e\u624b\u6cd5\u3067\u306f\u300c\u30af\u30c1\u30b3\u30df\u304c\u6b8b\u696d\u306e\u8a71\u3092\u3057\u3066\u3044\u308b\u306e\u306f\u7406\u89e3\u3067\u304d\u308b\u3051\u3069\u305d\u308c\u304c\u591a\u3044\u304b\u5c11\u306a\u3044\u304b\u5206\u304b\u3089\u306a\u3044\u300d\u3068\u3044\u3046\u6b20\u9665\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u53ef\u8996\u5316\u3067\u306f\u305d\u306e\u6b20\u9665\u3092\u76f4\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u304f\u307e\u3067\u53ef\u8996\u5316\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u307e\u305f\u3001\u524d\u56de\u306f\u4f1a\u793e\u306e\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u66f8\u304d\u307e\u3057\u305f\u304c\u4eca\u56de\u306f\u500b\u4eba\u3068\u3057\u3066\u66f8\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u672c\u7a3f\u306e\u5185\u5bb9\u306f\u6240\u5c5e\u3059\u308b\u7d44\u7e54\u306e\u898b\u89e3\u3068\u306f\u4e00\u5207\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3082\u304f\u3058\n\n\u524d\u56de\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n\u5358\u8a9e\u3068\u904a\u3076\n\n\n\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\u6a39\u5f62\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\n\n\u4f1a\u793e\u3068\u904a\u3076\n\n\n\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u3092\u8003\u616e\u3057\u305f\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\n\n\n\n\u4f7f\u7528\u3059\u308b\u3082\u306e\n\nPython\nGensim\nScikit-learn\nSciPy\n\n\n\u524d\u56de\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n\u524d\u56de\u306e\u8a18\u4e8b\u306e\u3053\u3053\u3067\u30bb\u30fc\u30d6\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u51fa\u3057\u307e\u3059\u3002\nmodel = models.Doc2Vec.load('./data/doc2vec.model')\n\n\n\u5358\u8a9e\u3068\u904a\u3076\u2460 \u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\u5206\u5e03\u56f3\u3092\u66f8\u304f\u30e1\u30bd\u30c3\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u901a\u5e38\u3001\u5358\u8a9e\u306e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u306f100\u6b21\u5143\u3068\u304b300\u6b21\u5143\u3068\u304b\u3067\u30e2\u30c7\u30eb\u306b\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\n\u305d\u308c\u3092\u6b21\u5143\u5727\u7e2e\u3057\u30662\u6b21\u5143\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u5f8c\u306b\u53ef\u8996\u5316\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\ndef draw_word_scatter(word, topn=30):\n    \"\"\" \u5165\u529b\u3055\u308c\u305fword\u306b\u4f3c\u3066\u3044\u308b\u5358\u8a9e\u306e\u5206\u5e03\u56f3\u3092\u63cf\u304f\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9 \"\"\"\n\n    # \u4f3c\u3066\u3044\u308b\u5358\u8a9e\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306fGensim word2vec\u306e\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u5229\u7528\n    # model.most_similar(word, topn=topn)\n    words = [x[0] for x in sorted(model.most_similar(word, topn=topn))]\n    words.append(word)\n\n    # \u5404\u5358\u8a9e\u306e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3092\u6c42\u3081\u307e\u3059\u3002Gensim\u306emost_similar\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066\n    # \u5358\u8a9e\u306e\u30d9\u30af\u30c8\u30eb\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9(model.calc_vec)\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\n    # \u9577\u304f\u306a\u308b\u306e\u3067\u5b9f\u88c5\u306f\u672c\u7a3f\u306e\u672b\u5c3e\u306b\u8a18\u8f09\u3057\u307e\u3057\u305f\u3002\n    vecs = [model.calc_vec(word) for word in words]\n\n    # \u5206\u5e03\u56f3\n    draw_scatter_plot(vecs, words)\n\ndef draw_scatter_plot(vecs, tags, clusters)\n    \"\"\" \u5165\u529b\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u306b\u57fa\u3065\u304d\u6563\u5e03\u56f3(\u30e9\u30d9\u30eb\u4ed8\u304d)\u3092\u63cf\u304f\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9 \"\"\"\n\n    # Scikit-learn\u306ePCA\u306b\u3088\u308b\u6b21\u5143\u524a\u6e1b\u3068\u305d\u306e\u53ef\u8996\u5316\n    pca = PCA(n_components=2)\n    coords = pca.fit_transform(vecs)\n\n    # matplotlib\u306b\u3088\u308b\u53ef\u8996\u5316\n    fig, ax = plt.subplots()\n    x = [v[0] for v in coords]\n    y = [v[1] for v in coords]\n\n    # \u5404\u70b9\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070\u30af\u30e9\u30b9\u30bf\u3092\u8003\u616e\n    # \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u9069\u5f53\n    if clusters:\n        ax.scatter(x, y, c=clusters)\n    else:\n        ax.scatter(x, y)\n\n    for i, txt in enumerate(tags):\n        ax.annotate(txt, (coords[i][0], coords[i][1]))\n    plt.show()\n\n\u6e96\u5099\u304c\u3067\u304d\u305f\u3068\u3053\u308d\u3067\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n# \"\u6b8b\u696d\"\u306b\u4f3c\u3066\u308b\u5358\u8a9e\u3092\u53ef\u8996\u5316\ndraw_word_scatter('\u6b8b\u696d', topn=40)\n\n\n\u6d99\u306a\u3057\u3067\u306f\u898b\u3089\u308c\u306a\u3044\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u771f\u3093\u4e2d\u3084\u3084\u4e0a\u3042\u305f\u308a\u306e \u671d\u5e30\u308a, \u5348\u524d\u69d8, \u7d42\u96fb, \u30b5\u30fc\u30d3\u30b9\u6b8b\u696d\u304c\u96c6\u307e\u3063\u3066\u3044\u308b\u30a8\u30ea\u30a2\u304c\u7279\u306b\u60b2\u60e8\u3067\u3059\u3002\u3055\u3089\u306b\u6050\u308d\u3057\u3044\u306e\u306f\u3001\u305d\u306e\u30a8\u30ea\u30a2\u304b\u3089\u4e00\u756a\u9060\u3044\u5834\u6240\u306b\"\u7761\u7720\"\u304c\u30d7\u30ed\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b5\u30e9\u30ea\u30fc\u30de\u30f3\u306e\u54c0\u6101\u3068\u904e\u52b4\u6b7b\u306e\u5371\u967a\u6027\u3092\u611f\u3058\u3056\u308b\u3092\u3048\u307e\u305b\u3093\u2026\u3002\n\u3061\u3087\u3063\u3068\u5bc2\u3057\u3044\u306e\u3067\u3001\u30dd\u30b8\u30c6\u30a3\u30d6\u306a\u8a00\u8449\u3067\u3082\u30c8\u30e9\u30a4\u3057\u3066\u307f\u307e\u3059\u3002\n# \"\u3084\u308a\u304c\u3044\"\u306b\u4f3c\u3066\u308b\u5358\u8a9e\u3092\u53ef\u8996\u5316\ndraw_word_scatter('\u3084\u308a\u304c\u3044')\n\n\n\u3055\u3063\u304d\u306e\u5206\u5e03\u56f3\u3068\u306f\u5927\u9055\u3044\u2026\uff01\u8a87\u308a\u3001\u3084\u308a\u304c\u3044\u3001\u5922\u3092\u4e0e\u3048\u308b\u3001\u3044\u3044\u3067\u3059\u306d\u3002\n\u3061\u306a\u307f\u306b\u5f53\u793e\u3067\u306f\u5171\u306b\u3084\u308a\u304c\u3044\u306e\u3042\u308b\u4ed5\u4e8b\u3092\u6210\u3057\u9042\u3052\u308b\u540c\u5fd7\u3092\u7d76\u8cdb\u52df\u96c6\u4e2d\u3067\u3059\u3002\n\n\u5358\u8a9e\u3068\u904a\u3076\u2461 \u6a39\u5f62\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\nWEB\u30b5\u30a4\u30c8\u3092\u904b\u55b6\u3057\u3066\u3044\u308b\u3068\u3001\u5358\u8a9e\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u3044\u3053\u3068\u3082\u7d50\u69cb\u3042\u308a\u307e\u3059\u3002\n\u500b\u4eba\u7684\u306b\u306f\u3001WELQ\u3084MERY\u304cSEO\u3067\u5727\u5012\u7684\u306a\u5f37\u3055\u3092\u8a87\u3063\u305f\u7406\u7531\u306e\u4e00\u3064\u306b\u306f\u3001\u30bf\u30b0\u306e\u9069\u5207\u306a\u968e\u5c64\u5316\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u306e\u5f71\u97ff\u3082\u5408\u3063\u305f\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u3053\u3068\u306b\u3082\u4f7f\u3048\u308b\u3057\u3001\u3042\u3068\u306f\u3001\u30ea\u30b9\u30c6\u30a3\u30f3\u30b0\u5e83\u544a\u3067\u306e\u6d41\u5165\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u81ea\u52d5\u3067\u5206\u985e\u3057\u3066\u30e9\u30f3\u30c7\u30a3\u30f3\u30b0\u30da\u30fc\u30b8\u4f5c\u308b\u3068\u304b\u3082\u3044\u3044\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067\u306f\u3001\u9069\u5207\u306a\u968e\u5c64\u5316\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3092\u3059\u308b\u305f\u3081\u306b\u6a39\u5f62\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nimport pandas as pd\nfrom scipy.spatial.distance import pdist\nfrom scipy.cluster.hierarchy import linkage, dendrogram\n\ndef draw_similar_word_dendrogram(word, topn=30):\n    \"\"\" \u5165\u529b\u3055\u308c\u305fword\u306b\u4f3c\u3066\u3044\u308b\u5358\u8a9e\u306e\u6a39\u5f62\u56f3\u3092\u63cf\u304f\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9 \"\"\"\n\n    # draw_word_scatter\u3068\u540c\u3058(qiita\u8a18\u4e8b\u7528\u306b\u5197\u9577\u306b\u66f8\u3044\u3066\u307e\u3059)\n    words = [x[0] for x in sorted(model.most_similar(word, topn=topn))]\n    words.append(word)\n    vecs = [model.calc_vec(word) for word in words]\n\n    # SciPy\u306e\u6a5f\u80fd\u3092\u7528\u3044\u3066\u53ef\u8996\u5316\n    # Python\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\n    df = pd.DataFrame(vecs, index=words)\n    row_clusters = linkage(pdist(df, metric='euclidean'), method='complete')\n    dendrogram(row_clusters, labels=words)\n    plt.show()\n\n\u66f8\u3044\u3066\u307f\u308b\u3002\n# \"\u6b8b\u696d\"\u3068\u4f3c\u305f\u5358\u8a9e\u306e\u6a39\u5f62\u56f3\u3092\u66f8\u304f\ndraw_similar_word_dendrogram('\u6b8b\u696d')\n\n\n\u5358\u8a9e\u306e\u6587\u5b57\u304c\u5c0f\u3055\u304f\u3066\u6050\u7e2e\u3067\u3059\u304c\u3001\u305d\u308c\u306a\u308a\u306b\u4e0a\u624b\u304f\u6a39\u5f62\u56f3\u304c\u66f8\u3051\u307e\u3057\u305f\u3002\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\u30b3\u30b3\u3067\u3082\u671d\u5e30\u308a\u3001\u5348\u524d\u69d8\u3001\u7d42\u96fb\u3001\u306f\u4ef2\u826f\u304f\u4e26\u3093\u3067\u3044\u307e\u3059\u3002\u65e9\u304f\u5e30\u3063\u3066\u2026\u3002\n\u3053\u306e\u6a39\u5f62\u56f3\u3092\u9069\u5207\u306a\u9ad8\u3055\u306e\u90e8\u5206\u3067\u30ab\u30c3\u30c8\u3059\u308c\u3070\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u4f1a\u793e\u3068\u904a\u3076\u2460 \u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\u6b21\u306b\u3001\u4f1a\u793e\u306e\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u5404\u793e\u306e\u793e\u98a8\u95a2\u4fc2\u306e\u307f\u306e\u30af\u30c1\u30b3\u30df\u304b\u3089\u5404\u793e\u306e\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4f3c\u3066\u308b\u793e\u98a8\u306e\u4f1a\u793e\u898b\u3064\u304b\u3063\u305f\u3089\u826f\u3044\u306a\u3001\u3068\u3044\u3046\u72d9\u3044\u3067\u3059\u3002\n\u65e2\u306b\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u306e\u7b97\u51fa\u3059\u308b\u969b\u306bGensim Doc2Vec \u306e infer_vector \u3068\u3044\u3046\u6a5f\u80fd\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3053\u306e\u6a5f\u80fd\u306f\u5148\u65e5\u306e\u8a18\u4e8b\u3067\u3082\u30b3\u30e1\u30f3\u30c8\u9802\u304d\u307e\u3057\u305f\u304c\u3001\u6b63\u76f4\u3042\u307e\u308a\u7cbe\u5ea6\u304c\u9ad8\u3044\u3082\u306e\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\u304c\u3001\u305d\u3082\u305d\u3082\u4f1a\u793e\u30af\u30c1\u30b3\u30df\u3092\u51e6\u7406\u3059\u308b\u969b\u306bword2vec\u304c\u306f\u3089\u3080\u554f\u984c\u306b\u6bd4\u3079\u308b\u3068\u3042\u307e\u308a\u5927\u304d\u306a\u554f\u984c\u3067\u306f\u306a\u3044\u3068\u601d\u3063\u305f\u305f\u3081\u3001\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305a\u306f\u4f1a\u793e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u306e\u7b97\u51fa\u3057\u307e\u3059\u3002\n\u5bfe\u8c61\u306f\u4e00\u5b9a\u306e\u53e3\u30b3\u30df\u6570\u4ee5\u4e0a\u3092\u6301\u3064Web\u7cfb\u4f01\u696d\u3068\u3057\u307e\u3057\u305f\u3002\n# model\u306e\u8aad\u307f\u51fa\u3057\nmodel = models.Doc2Vec.load('./data/doc2vec.model')\n\n# \u4f1a\u793e, \u30af\u30c1\u30b3\u30df\u30c7\u30fc\u30bf\u306eDB\u304b\u3089\u306e\u8aad\u307f\u51fa\u3057\ncompanies = connect_mysql(QUERY_COMPANIES, DB_NAME)\nreviews = connect_mysql(QUERY_COMPANY_CULTURE, DB_NAME)\n\n# \u30af\u30c1\u30b3\u30df\u30c7\u30fc\u30bf\u306e\u5f62\u614b\u7d20\u89e3\u6790\n# utils.stem \u306bMeCab\u306b\u3088\u308b\u5f62\u614b\u7d20\u89e3\u6790\u306e\u51e6\u7406\u304c\u5165\u3063\u3066\u3044\u308b\nwords = [utils.stems(review) for review in reviews]\n\n# \u30af\u30c1\u30b3\u30df\u30c7\u30fc\u30bf\u304b\u3089\u5404\u4f1a\u793e\u306e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3092\u7b97\u51fa\nvecs = [models.Doc2Vec.infer_vector(model, word) for word in words]\n\n\u203b utils.stems\u306f\u30e9\u30fc\u30e1\u30f3\u5c4b\u306e\u5206\u985e\u306e\u8a18\u4e8b\u3068\u307b\u307c\u540c\u3058\n\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u304c\u7b97\u51fa\u3067\u304d\u305f\u306e\u3067\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n# \u4e0a\u8a18\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066\u53ef\u8996\u5316\ndraw_scatter_plot(vecs, companies)\n\n\n\u3054\u3061\u3083\u3063\u3068\u3057\u3066\u3066\u898b\u306b\u304f\u3044\u306e\u3067\u3059\u304c\u3001\u30ea\u30af\u30eb\u30fc\u30c8\u7cfb\u5217\u304c\u4e0a\u306e\u65b9\u306b\u56fa\u307e\u3063\u3066\u305f\u308a\u3001\u4e0b\u306e\u65b9\u306b\u30b2\u30fc\u30e0\u7cfb\u306e\u4f1a\u793e\u304c\u96c6\u307e\u3063\u3066\u305f\u308a\u3057\u307e\u3059\u3002\n\u305f\u3060\u3001\u30b0\u30ea\u30fc\u3068\u30df\u30af\u30b7\u30a3\u304c\u4f3c\u3066\u308b\u4f4d\u7f6e\u306b\u3042\u3063\u305f\u308a\u3057\u3066\u3001\u672c\u5f53\uff1f\u3063\u3066\u3068\u3053\u308d\u3082\u3042\u308b\u306e\u3067\u3001word2vec\u304a\u3088\u3073infer_vector\u306e\u7cbe\u5ea6\u554f\u984c\u3084\u3001100\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3092\u7121\u7406\u3084\u308a2\u6b21\u5143\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u6b6a\u307f\u304c\u51fa\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u4f1a\u793e\u3068\u904a\u3076\u2461 \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u8003\u616e\u3057\u3066\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\u4e0a\u306b\u793a\u3057\u305f\u5206\u5e03\u56f3\u306f\u3054\u3061\u3083\u3063\u3068\u3057\u3066\u3066\u898b\u3065\u3089\u3044\u3082\u306e\u3067\u3057\u305f\u3002\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u30d7\u30ed\u30c3\u30c8\u3092\u8272\u4ed8\u3051\u3059\u308c\u3070\u5c11\u3057\u306f\u898b\u3084\u3059\u304f\u306a\u308b\u306e\u3067\u3001\u5404\u4f1a\u793e\u306e\u30af\u30e9\u30b9\u30bf\u3092\u6c42\u3081\u305f\u4e0a\u3067\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\ndef kmeans_clustering(tags, vecs, n_clusters):\n    \"\"\" K\u5e73\u5747\u6cd5\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9 \"\"\"\n    km = KMeans(n_clusters=n_clusters,\n                init='k-means++',\n                n_init=20,\n                max_iter=1000,\n                tol=1e-04,\n                random_state=0)\n    clusters = km.fit_predict(vecs)\n    return pd.DataFrame(clusters, index=tags)\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u884c\u3068\u305d\u308c\u3092\u8003\u616e\u3057\u305f\u53ef\u8996\u5316\n# \u30af\u30e9\u30b9\u30bf\u6570\u306f\u9069\u5f53(\u3044\u3061\u304a\u3046\u30a8\u30eb\u30dc\u30fc\u6cd5\u3067\u305d\u308c\u306a\u308a\u306e\u6570\u306f\u63a2\u3057\u305f)\nclusters = kmeans_clustering(companies, vecs, 10)\n\n# \u30af\u30e9\u30b9\u30bf\u60c5\u5831\u3092\u4ed8\u4e0e\u3057\u3066\u5206\u5e03\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\ndraw_scatter_plot(vecs, companies, clusters)\n\n\n\u3042\u3093\u307e\u308a\u5909\u308f\u3089\u306a\u3044\u304b\u306a\u2026\u3002\u305f\u3060\u3001\u7121\u7406\u3084\u308a2\u6b21\u5143\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u6b6a\u307f\u3082\u3042\u308b\u7a0b\u5ea6\u8003\u616e\u3057\u3066\u898b\u308c\u308b\u306e\u304c\u30e1\u30ea\u30c3\u30c8\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3042\u3068\u3001\u30af\u30c3\u30af\u30d1\u30c3\u30c9\u3055\u3093\u3068DMM\u3055\u3093\u304c\u4f3c\u305f\u4f4d\u7f6e\u306b\u3042\u3063\u3066\u6ce2\u7d0b\u3092\u547c\u3073\u305d\u3046\u3067\u3059\u304c\u3001\u304d\u3063\u3068\u6075\u6bd4\u5bff\u30ac\u30fc\u30c7\u30f3\u30d7\u30ec\u30a4\u30b9\u306b\u540c\u5c45\u3057\u3066\u308b\u304b\u3089\u98ef\u3092\u98df\u3044\u306b\u884c\u304f\u5e97\u3068\u304b\u3082\u4f3c\u3066\u3066\u3001\u4f3c\u305f\u793e\u98a8\u306b\u306a\u308b\u3093\u3060\u3068\u601d\u3044\u3001\u307e\u3059\u2026(\u82e6\u3057\u3044\u8a00\u3044\u8a33)\n\u4eca\u56de\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u53ef\u8996\u5316\u304c\u3044\u307e\u3044\u3061\u3067\u3057\u305f\u304c\u3001\u6b21\u5143\u5727\u7e2e\u306e\u65b9\u6cd5\u3092\u5909\u66f4\u3057\u3066\u5b9f\u65bd\u3059\u308b\u3053\u3068\u3067\u591a\u5c11\u306f\u6539\u5584\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002PCA\u306e\u90e8\u5206\u3092Scikit-learn\u306emanifold.TSNE\u306b\u5909\u66f4\u3059\u308b\u3068\u304b\u8272\u3005\u6539\u5584\u306e\u5de5\u592b\u3057\u304c\u3044\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n## \u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306f[\u3010\u8ee2\u8077\u4f1a\u8b70\u3011\u30af\u30c1\u30b3\u30df\u3092word2vec\u3067\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3057\u3066\u4f1a\u793e\u3092\u5206\u985e\u3057\u3066\u307f\u308b](http://qiita.com/naotaka1128/items/2c4551abfd40e43b0146)\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n\u524d\u56de\u306f\u8ee2\u8077\u4f1a\u8b70\u306e\u30af\u30c1\u30b3\u30df\u3092word2vec\u3067\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u3057\u305f\u7d50\u679c\u3001\u4f3c\u3066\u3044\u308b\u4f1a\u793e\u3084\u5358\u8a9e\u3092\u8abf\u3079\u308b\u3053\u3068\u304c\u51fa\u6765\u305f\u3068\u3044\u3046\u5185\u5bb9\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u305d\u306e\u7d50\u679c\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\n## \u6ce8\u610f\n\u524d\u56de\u306e\u8a18\u4e8b\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306e\u624b\u6cd5\u3067\u306f\u300c\u30af\u30c1\u30b3\u30df\u304c\u6b8b\u696d\u306e\u8a71\u3092\u3057\u3066\u3044\u308b\u306e\u306f\u7406\u89e3\u3067\u304d\u308b\u3051\u3069\u305d\u308c\u304c\u591a\u3044\u304b\u5c11\u306a\u3044\u304b\u5206\u304b\u3089\u306a\u3044\u300d\u3068\u3044\u3046\u6b20\u9665\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306e\u53ef\u8996\u5316\u3067\u306f\u305d\u306e\u6b20\u9665\u3092\u76f4\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u304f\u307e\u3067\u53ef\u8996\u5316\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u524d\u56de\u306f\u4f1a\u793e\u306e\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u66f8\u304d\u307e\u3057\u305f\u304c\u4eca\u56de\u306f\u500b\u4eba\u3068\u3057\u3066\u66f8\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u672c\u7a3f\u306e\u5185\u5bb9\u306f\u6240\u5c5e\u3059\u308b\u7d44\u7e54\u306e\u898b\u89e3\u3068\u306f\u4e00\u5207\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n\n## \u3082\u304f\u3058\n* \u524d\u56de\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n* \u5358\u8a9e\u3068\u904a\u3076\n  * \u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n  * \u6a39\u5f62\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n* \u4f1a\u793e\u3068\u904a\u3076\n  * \u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n  * \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u3092\u8003\u616e\u3057\u305f\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\n## \u4f7f\u7528\u3059\u308b\u3082\u306e\n* Python\n* Gensim\n* Scikit-learn\n* SciPy\n\n## \u524d\u56de\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n[\u524d\u56de\u306e\u8a18\u4e8b\u306e\u3053\u3053](http://qiita.com/naotaka1128/items/2c4551abfd40e43b0146#2-gensim-%E3%81%A7-doc2vec-%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB%E6%A7%8B%E7%AF%89)\u3067\u30bb\u30fc\u30d6\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u51fa\u3057\u307e\u3059\u3002\n\n```py3\nmodel = models.Doc2Vec.load('./data/doc2vec.model')\n```\n\n## \u5358\u8a9e\u3068\u904a\u3076\u2460 \u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\u5206\u5e03\u56f3\u3092\u66f8\u304f\u30e1\u30bd\u30c3\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n\u901a\u5e38\u3001\u5358\u8a9e\u306e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u306f100\u6b21\u5143\u3068\u304b300\u6b21\u5143\u3068\u304b\u3067\u30e2\u30c7\u30eb\u306b\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\n\u305d\u308c\u3092\u6b21\u5143\u5727\u7e2e\u3057\u30662\u6b21\u5143\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u5f8c\u306b\u53ef\u8996\u5316\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```py3\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\ndef draw_word_scatter(word, topn=30):\n    \"\"\" \u5165\u529b\u3055\u308c\u305fword\u306b\u4f3c\u3066\u3044\u308b\u5358\u8a9e\u306e\u5206\u5e03\u56f3\u3092\u63cf\u304f\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9 \"\"\"\n\n    # \u4f3c\u3066\u3044\u308b\u5358\u8a9e\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306fGensim word2vec\u306e\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u5229\u7528\n    # model.most_similar(word, topn=topn)\n    words = [x[0] for x in sorted(model.most_similar(word, topn=topn))]\n    words.append(word)\n\n    # \u5404\u5358\u8a9e\u306e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3092\u6c42\u3081\u307e\u3059\u3002Gensim\u306emost_similar\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066\n    # \u5358\u8a9e\u306e\u30d9\u30af\u30c8\u30eb\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9(model.calc_vec)\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\n    # \u9577\u304f\u306a\u308b\u306e\u3067\u5b9f\u88c5\u306f\u672c\u7a3f\u306e\u672b\u5c3e\u306b\u8a18\u8f09\u3057\u307e\u3057\u305f\u3002\n    vecs = [model.calc_vec(word) for word in words]\n\n    # \u5206\u5e03\u56f3\n    draw_scatter_plot(vecs, words)\n\ndef draw_scatter_plot(vecs, tags, clusters)\n    \"\"\" \u5165\u529b\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u306b\u57fa\u3065\u304d\u6563\u5e03\u56f3(\u30e9\u30d9\u30eb\u4ed8\u304d)\u3092\u63cf\u304f\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9 \"\"\"\n\n    # Scikit-learn\u306ePCA\u306b\u3088\u308b\u6b21\u5143\u524a\u6e1b\u3068\u305d\u306e\u53ef\u8996\u5316\n    pca = PCA(n_components=2)\n    coords = pca.fit_transform(vecs)\n\n    # matplotlib\u306b\u3088\u308b\u53ef\u8996\u5316\n    fig, ax = plt.subplots()\n    x = [v[0] for v in coords]\n    y = [v[1] for v in coords]\n\n    # \u5404\u70b9\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070\u30af\u30e9\u30b9\u30bf\u3092\u8003\u616e\n    # \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u9069\u5f53\n    if clusters:\n        ax.scatter(x, y, c=clusters)\n    else:\n        ax.scatter(x, y)\n\n    for i, txt in enumerate(tags):\n        ax.annotate(txt, (coords[i][0], coords[i][1]))\n    plt.show()\n```\n\n\n\u6e96\u5099\u304c\u3067\u304d\u305f\u3068\u3053\u308d\u3067\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n```py3\n# \"\u6b8b\u696d\"\u306b\u4f3c\u3066\u308b\u5358\u8a9e\u3092\u53ef\u8996\u5316\ndraw_word_scatter('\u6b8b\u696d', topn=40)\n```\n\n<img width=\"709\" alt=\"\u6b8b\u696d.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/99986/6bfc081a-b920-4976-0d96-14ede18b57eb.png\">\n\n\u6d99\u306a\u3057\u3067\u306f\u898b\u3089\u308c\u306a\u3044\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u771f\u3093\u4e2d\u3084\u3084\u4e0a\u3042\u305f\u308a\u306e \u671d\u5e30\u308a, \u5348\u524d\u69d8, \u7d42\u96fb, \u30b5\u30fc\u30d3\u30b9\u6b8b\u696d\u304c\u96c6\u307e\u3063\u3066\u3044\u308b\u30a8\u30ea\u30a2\u304c\u7279\u306b\u60b2\u60e8\u3067\u3059\u3002\u3055\u3089\u306b\u6050\u308d\u3057\u3044\u306e\u306f\u3001\u305d\u306e\u30a8\u30ea\u30a2\u304b\u3089\u4e00\u756a\u9060\u3044\u5834\u6240\u306b\"\u7761\u7720\"\u304c\u30d7\u30ed\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b5\u30e9\u30ea\u30fc\u30de\u30f3\u306e\u54c0\u6101\u3068\u904e\u52b4\u6b7b\u306e\u5371\u967a\u6027\u3092\u611f\u3058\u3056\u308b\u3092\u3048\u307e\u305b\u3093\u2026\u3002\n\n\u3061\u3087\u3063\u3068\u5bc2\u3057\u3044\u306e\u3067\u3001\u30dd\u30b8\u30c6\u30a3\u30d6\u306a\u8a00\u8449\u3067\u3082\u30c8\u30e9\u30a4\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3\n# \"\u3084\u308a\u304c\u3044\"\u306b\u4f3c\u3066\u308b\u5358\u8a9e\u3092\u53ef\u8996\u5316\ndraw_word_scatter('\u3084\u308a\u304c\u3044')\n```\n\n<img width=\"576\" alt=\"\u3084\u308a\u304b\u3099\u3044.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/99986/ddb88797-078f-047a-321a-9d16078a79c2.png\">\n\n\u3055\u3063\u304d\u306e\u5206\u5e03\u56f3\u3068\u306f\u5927\u9055\u3044\u2026\uff01\u8a87\u308a\u3001\u3084\u308a\u304c\u3044\u3001\u5922\u3092\u4e0e\u3048\u308b\u3001\u3044\u3044\u3067\u3059\u306d\u3002\n\u3061\u306a\u307f\u306b\u5f53\u793e\u3067\u306f\u5171\u306b\u3084\u308a\u304c\u3044\u306e\u3042\u308b\u4ed5\u4e8b\u3092\u6210\u3057\u9042\u3052\u308b\u540c\u5fd7\u3092\u7d76\u8cdb\u52df\u96c6\u4e2d\u3067\u3059\u3002\n\n## \u5358\u8a9e\u3068\u904a\u3076\u2461 \u6a39\u5f62\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\nWEB\u30b5\u30a4\u30c8\u3092\u904b\u55b6\u3057\u3066\u3044\u308b\u3068\u3001\u5358\u8a9e\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u3044\u3053\u3068\u3082\u7d50\u69cb\u3042\u308a\u307e\u3059\u3002\n\n\u500b\u4eba\u7684\u306b\u306f\u3001WELQ\u3084MERY\u304cSEO\u3067\u5727\u5012\u7684\u306a\u5f37\u3055\u3092\u8a87\u3063\u305f\u7406\u7531\u306e\u4e00\u3064\u306b\u306f\u3001\u30bf\u30b0\u306e\u9069\u5207\u306a\u968e\u5c64\u5316\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u306e\u5f71\u97ff\u3082\u5408\u3063\u305f\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u3053\u3068\u306b\u3082\u4f7f\u3048\u308b\u3057\u3001\u3042\u3068\u306f\u3001\u30ea\u30b9\u30c6\u30a3\u30f3\u30b0\u5e83\u544a\u3067\u306e\u6d41\u5165\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u81ea\u52d5\u3067\u5206\u985e\u3057\u3066\u30e9\u30f3\u30c7\u30a3\u30f3\u30b0\u30da\u30fc\u30b8\u4f5c\u308b\u3068\u304b\u3082\u3044\u3044\u3067\u3059\u306d\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u9069\u5207\u306a\u968e\u5c64\u5316\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3092\u3059\u308b\u305f\u3081\u306b\u6a39\u5f62\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3\nimport pandas as pd\nfrom scipy.spatial.distance import pdist\nfrom scipy.cluster.hierarchy import linkage, dendrogram\n\ndef draw_similar_word_dendrogram(word, topn=30):\n    \"\"\" \u5165\u529b\u3055\u308c\u305fword\u306b\u4f3c\u3066\u3044\u308b\u5358\u8a9e\u306e\u6a39\u5f62\u56f3\u3092\u63cf\u304f\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9 \"\"\"\n\n    # draw_word_scatter\u3068\u540c\u3058(qiita\u8a18\u4e8b\u7528\u306b\u5197\u9577\u306b\u66f8\u3044\u3066\u307e\u3059)\n    words = [x[0] for x in sorted(model.most_similar(word, topn=topn))]\n    words.append(word)\n    vecs = [model.calc_vec(word) for word in words]\n\n    # SciPy\u306e\u6a5f\u80fd\u3092\u7528\u3044\u3066\u53ef\u8996\u5316\n    # Python\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\n    df = pd.DataFrame(vecs, index=words)\n    row_clusters = linkage(pdist(df, metric='euclidean'), method='complete')\n    dendrogram(row_clusters, labels=words)\n    plt.show()\n```\n\n\u66f8\u3044\u3066\u307f\u308b\u3002\n\n```py3\n# \"\u6b8b\u696d\"\u3068\u4f3c\u305f\u5358\u8a9e\u306e\u6a39\u5f62\u56f3\u3092\u66f8\u304f\ndraw_similar_word_dendrogram('\u6b8b\u696d')\n```\n\n<img width=\"652\" alt=\"\u6b8b\u696d\u6a39\u5f62\u56f3.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/99986/5a6a476f-9c94-5196-4027-7dcfee22e758.png\">\n\n\u5358\u8a9e\u306e\u6587\u5b57\u304c\u5c0f\u3055\u304f\u3066\u6050\u7e2e\u3067\u3059\u304c\u3001\u305d\u308c\u306a\u308a\u306b\u4e0a\u624b\u304f\u6a39\u5f62\u56f3\u304c\u66f8\u3051\u307e\u3057\u305f\u3002\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\u30b3\u30b3\u3067\u3082\u671d\u5e30\u308a\u3001\u5348\u524d\u69d8\u3001\u7d42\u96fb\u3001\u306f\u4ef2\u826f\u304f\u4e26\u3093\u3067\u3044\u307e\u3059\u3002\u65e9\u304f\u5e30\u3063\u3066\u2026\u3002\n\n\u3053\u306e\u6a39\u5f62\u56f3\u3092\u9069\u5207\u306a\u9ad8\u3055\u306e\u90e8\u5206\u3067\u30ab\u30c3\u30c8\u3059\u308c\u3070\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\n## \u4f1a\u793e\u3068\u904a\u3076\u2460 \u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\u6b21\u306b\u3001\u4f1a\u793e\u306e\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u5404\u793e\u306e**\u793e\u98a8\u95a2\u4fc2\u306e\u307f**\u306e\u30af\u30c1\u30b3\u30df\u304b\u3089\u5404\u793e\u306e\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4f3c\u3066\u308b\u793e\u98a8\u306e\u4f1a\u793e\u898b\u3064\u304b\u3063\u305f\u3089\u826f\u3044\u306a\u3001\u3068\u3044\u3046\u72d9\u3044\u3067\u3059\u3002\n\n\u65e2\u306b\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u306e\u7b97\u51fa\u3059\u308b\u969b\u306bGensim Doc2Vec \u306e infer_vector \u3068\u3044\u3046\u6a5f\u80fd\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3053\u306e\u6a5f\u80fd\u306f\u5148\u65e5\u306e\u8a18\u4e8b\u3067\u3082\u30b3\u30e1\u30f3\u30c8\u9802\u304d\u307e\u3057\u305f\u304c\u3001\u6b63\u76f4\u3042\u307e\u308a\u7cbe\u5ea6\u304c\u9ad8\u3044\u3082\u306e\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n\u304c\u3001\u305d\u3082\u305d\u3082\u4f1a\u793e\u30af\u30c1\u30b3\u30df\u3092\u51e6\u7406\u3059\u308b\u969b\u306bword2vec\u304c\u306f\u3089\u3080\u554f\u984c\u306b\u6bd4\u3079\u308b\u3068\u3042\u307e\u308a\u5927\u304d\u306a\u554f\u984c\u3067\u306f\u306a\u3044\u3068\u601d\u3063\u305f\u305f\u3081\u3001\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u4f1a\u793e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u306e\u7b97\u51fa\u3057\u307e\u3059\u3002\n\u5bfe\u8c61\u306f\u4e00\u5b9a\u306e\u53e3\u30b3\u30df\u6570\u4ee5\u4e0a\u3092\u6301\u3064Web\u7cfb\u4f01\u696d\u3068\u3057\u307e\u3057\u305f\u3002\n\n```py3\n# model\u306e\u8aad\u307f\u51fa\u3057\nmodel = models.Doc2Vec.load('./data/doc2vec.model')\n\n# \u4f1a\u793e, \u30af\u30c1\u30b3\u30df\u30c7\u30fc\u30bf\u306eDB\u304b\u3089\u306e\u8aad\u307f\u51fa\u3057\ncompanies = connect_mysql(QUERY_COMPANIES, DB_NAME)\nreviews = connect_mysql(QUERY_COMPANY_CULTURE, DB_NAME)\n\n# \u30af\u30c1\u30b3\u30df\u30c7\u30fc\u30bf\u306e\u5f62\u614b\u7d20\u89e3\u6790\n# utils.stem \u306bMeCab\u306b\u3088\u308b\u5f62\u614b\u7d20\u89e3\u6790\u306e\u51e6\u7406\u304c\u5165\u3063\u3066\u3044\u308b\nwords = [utils.stems(review) for review in reviews]\n\n# \u30af\u30c1\u30b3\u30df\u30c7\u30fc\u30bf\u304b\u3089\u5404\u4f1a\u793e\u306e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3092\u7b97\u51fa\nvecs = [models.Doc2Vec.infer_vector(model, word) for word in words]\n```\n\n\u203b utils.stems\u306f[\u30e9\u30fc\u30e1\u30f3\u5c4b\u306e\u5206\u985e\u306e\u8a18\u4e8b](http://qiita.com/naotaka1128/items/87d717961bd0c34e7a64)\u3068\u307b\u307c\u540c\u3058\n\n\n\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u304c\u7b97\u51fa\u3067\u304d\u305f\u306e\u3067\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3\n# \u4e0a\u8a18\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066\u53ef\u8996\u5316\ndraw_scatter_plot(vecs, companies)\n```\n\n<img width=\"1138\" alt=\"companies_without_clusters.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/99986/0aa7eefa-7aed-744a-0d12-a0da38661c28.png\">\n\n\u3054\u3061\u3083\u3063\u3068\u3057\u3066\u3066\u898b\u306b\u304f\u3044\u306e\u3067\u3059\u304c\u3001\u30ea\u30af\u30eb\u30fc\u30c8\u7cfb\u5217\u304c\u4e0a\u306e\u65b9\u306b\u56fa\u307e\u3063\u3066\u305f\u308a\u3001\u4e0b\u306e\u65b9\u306b\u30b2\u30fc\u30e0\u7cfb\u306e\u4f1a\u793e\u304c\u96c6\u307e\u3063\u3066\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u305f\u3060\u3001\u30b0\u30ea\u30fc\u3068\u30df\u30af\u30b7\u30a3\u304c\u4f3c\u3066\u308b\u4f4d\u7f6e\u306b\u3042\u3063\u305f\u308a\u3057\u3066\u3001\u672c\u5f53\uff1f\u3063\u3066\u3068\u3053\u308d\u3082\u3042\u308b\u306e\u3067\u3001word2vec\u304a\u3088\u3073infer_vector\u306e\u7cbe\u5ea6\u554f\u984c\u3084\u3001100\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3092\u7121\u7406\u3084\u308a2\u6b21\u5143\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u6b6a\u307f\u304c\u51fa\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\n## \u4f1a\u793e\u3068\u904a\u3076\u2461 \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u8003\u616e\u3057\u3066\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\n\u4e0a\u306b\u793a\u3057\u305f\u5206\u5e03\u56f3\u306f\u3054\u3061\u3083\u3063\u3068\u3057\u3066\u3066\u898b\u3065\u3089\u3044\u3082\u306e\u3067\u3057\u305f\u3002\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u30d7\u30ed\u30c3\u30c8\u3092\u8272\u4ed8\u3051\u3059\u308c\u3070\u5c11\u3057\u306f\u898b\u3084\u3059\u304f\u306a\u308b\u306e\u3067\u3001\u5404\u4f1a\u793e\u306e\u30af\u30e9\u30b9\u30bf\u3092\u6c42\u3081\u305f\u4e0a\u3067\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\ndef kmeans_clustering(tags, vecs, n_clusters):\n    \"\"\" K\u5e73\u5747\u6cd5\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9 \"\"\"\n    km = KMeans(n_clusters=n_clusters,\n                init='k-means++',\n                n_init=20,\n                max_iter=1000,\n                tol=1e-04,\n                random_state=0)\n    clusters = km.fit_predict(vecs)\n    return pd.DataFrame(clusters, index=tags)\n```\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u884c\u3068\u305d\u308c\u3092\u8003\u616e\u3057\u305f\u53ef\u8996\u5316\n\n```py3\n# \u30af\u30e9\u30b9\u30bf\u6570\u306f\u9069\u5f53(\u3044\u3061\u304a\u3046\u30a8\u30eb\u30dc\u30fc\u6cd5\u3067\u305d\u308c\u306a\u308a\u306e\u6570\u306f\u63a2\u3057\u305f)\nclusters = kmeans_clustering(companies, vecs, 10)\n\n# \u30af\u30e9\u30b9\u30bf\u60c5\u5831\u3092\u4ed8\u4e0e\u3057\u3066\u5206\u5e03\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\ndraw_scatter_plot(vecs, companies, clusters)\n```\n\n<img width=\"1185\" alt=\"companies_with_clusters.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/99986/92973d30-4f84-df3f-b27d-ef1492813cb6.png\">\n\n\u3042\u3093\u307e\u308a\u5909\u308f\u3089\u306a\u3044\u304b\u306a\u2026\u3002\u305f\u3060\u3001\u7121\u7406\u3084\u308a2\u6b21\u5143\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u6b6a\u307f\u3082\u3042\u308b\u7a0b\u5ea6\u8003\u616e\u3057\u3066\u898b\u308c\u308b\u306e\u304c\u30e1\u30ea\u30c3\u30c8\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3042\u3068\u3001\u30af\u30c3\u30af\u30d1\u30c3\u30c9\u3055\u3093\u3068DMM\u3055\u3093\u304c\u4f3c\u305f\u4f4d\u7f6e\u306b\u3042\u3063\u3066\u6ce2\u7d0b\u3092\u547c\u3073\u305d\u3046\u3067\u3059\u304c\u3001\u304d\u3063\u3068\u6075\u6bd4\u5bff\u30ac\u30fc\u30c7\u30f3\u30d7\u30ec\u30a4\u30b9\u306b\u540c\u5c45\u3057\u3066\u308b\u304b\u3089\u98ef\u3092\u98df\u3044\u306b\u884c\u304f\u5e97\u3068\u304b\u3082\u4f3c\u3066\u3066\u3001\u4f3c\u305f\u793e\u98a8\u306b\u306a\u308b\u3093\u3060\u3068\u601d\u3044\u3001\u307e\u3059\u2026(\u82e6\u3057\u3044\u8a00\u3044\u8a33)\n\n\u4eca\u56de\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u53ef\u8996\u5316\u304c\u3044\u307e\u3044\u3061\u3067\u3057\u305f\u304c\u3001\u6b21\u5143\u5727\u7e2e\u306e\u65b9\u6cd5\u3092\u5909\u66f4\u3057\u3066\u5b9f\u65bd\u3059\u308b\u3053\u3068\u3067\u591a\u5c11\u306f\u6539\u5584\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002PCA\u306e\u90e8\u5206\u3092Scikit-learn\u306emanifold.TSNE\u306b\u5909\u66f4\u3059\u308b\u3068\u304b\u8272\u3005\u6539\u5584\u306e\u5de5\u592b\u3057\u304c\u3044\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\n", "tags": ["Python", "scikit-learn", "gensim", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u6a5f\u68b0\u5b66\u7fd2"]}