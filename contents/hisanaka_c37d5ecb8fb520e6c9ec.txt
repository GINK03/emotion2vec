{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nAndroid6.0(Marshmallow)\u304b\u3089\u3001BLE\u3092\u4f7f\u3046\u30a2\u30d7\u30ea\u306b\u306fandroid.permission.BLUETOOTH\u3001android.permission.BLUETOOTH_ADMIN\u306b\u52a0\u3048\u3066\u3001android.permission.ACCESS_COARSE_LOCATION\u307e\u305f\u306fandroid.permission.ACCESS_FINE_LOCATION\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3057\u305f\u30021,2\n\u7686\u3055\u3093\u3001\u3054\u5b58\u77e5\u3067\u3057\u305f\u304b? \n\u79c1\u306f\u77e5\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u77e5\u3089\u305a\u306bNexus5\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3057\u305f\u3089\u3001\u81ea\u4f5c\u30a2\u30d7\u30ea\u3067BLE\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u5e74\u59cb\u65e9\u3005\u614c\u3066\u307e\u3057\u305f\u3002\n\u3067\u3001\u6094\u3057\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u30bd\u30fc\u30b9\u773a\u3081\u3066\u307f\u305f\u3088\u3001\u3068\u3044\u3046\u8a18\u9332\u3067\u3059\u3002\n\u306a\u304a\u3001\u3053\u3053\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u5185\u5bb9\u306e\u6b63\u78ba\u6027\u306f\u4fdd\u8a3c\u3067\u304d\u307e\u305b\u3093\u3002\u9593\u9055\u3044\u7b49\u306b\u6c17\u304c\u3064\u304b\u308c\u305f\u5834\u5408\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u3067\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n\n\u7d50\u8ad6\n\u9577\u3044\u306e\u3067\u5148\u306b\u7d50\u8ad6\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\nGattService.java\u306estartScan\u306b\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306e\u6709\u7121\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30b3\u30fc\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u3066\u304a\u308a\u3001\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e8\u30f3\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306fSecurityException\u304c\u6295\u3052\u3089\u308c\u3066\u30b9\u30ad\u30e3\u30f3\u306b\u5931\u6557\u3059\u308b\u3002\n\n\n\u4e8b\u8c61\nAndroid6.0\u3067BLE\u306e\u30b9\u30ad\u30e3\u30f3\u3092\u884c\u3046\u969b\u306b\u3001ACCESS_COARSE_LOCATION\u307e\u305f\u306fACCESS_FINE_LOCAITON\u306e\u3044\u305a\u308c\u304b\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068\u3001\u30c7\u30d0\u30a4\u30b9\u304c\u691c\u51fa\u3055\u308c\u307e\u305b\u3093\u3002\n\u30a2\u30d7\u30ea\u304c\u7570\u5e38\u7d42\u4e86\u3057\u305f\u308a\u3001\u7aef\u672b\u306b\u4f55\u304b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u305f\u308a\u306f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u306a\u306e\u3067\u3001\u975e\u5e38\u306b\u308f\u304b\u308a\u3065\u3089\u3044\u3002\u3061\u3087\u3046\u3069\u30c7\u30d0\u30a4\u30b9\u5074\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u5909\u3048\u3066\u3044\u305f\u3068\u3053\u308d\u3060\u3063\u305f\u306e\u3067\u3001\u3066\u3063\u304d\u308aBLE\u30c7\u30d0\u30a4\u30b9\u3092\u30c0\u30e1\u306b\u3057\u305f\u304b\u3068\u7126\u308a\u307e\u304f\u308a\u3067\u3059\u3002\n\nlogcat\n\u3068\u306f\u3044\u3048\u3001logcat\u306b\u306f\u3061\u3083\u3093\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u8a18\u9332\u3055\u308c\u307e\u3059\u3002\u3068\u3044\u3046\u304b\u3001logcat\u306b\u3057\u304b\u51fa\u307e\u305b\u3093\u3002\nW/Binder: Caught a RuntimeException from the binder stub implementation.\n    java.lang.SecurityException: Need ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission to get scan results\n    at android.os.Parcel.readException(Parcel.java:1620)\n    at android.os.Parcel.readException(Parcel.java:1573)\n    at android.bluetooth.IBluetoothGatt$Stub$Proxy.startScan(IBluetoothGatt.java:772)\n    at android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper.onClientRegistered(BluetoothLeScanner.java:324)\n    at android.bluetooth.IBluetoothGattCallback$Stub.onTransact(IBluetoothGattCallback.java:56)\n    at android.os.Binder.execTransact(Binder.java:453)\n\n\u3068\u308a\u3042\u3048\u305a\u3001Bluetooth\u5468\u308a\u3068\u3044\u3046\u3053\u3068\u3067\u3001BluetoothLeScanner.java\u304b\u3089\u5f53\u305f\u3063\u3066\u307f\u307e\u3059\u3002\n\nBluetoothLeScanner.java\n\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nprivate class BleScanCallbackWrapper extends BluetoothGattCallbackWrapper {\n    private IBluetoothGatt mBluetoothGatt;\n\n    (snip)\n\n    /**\n     * Application interface registered - app is ready to go\n     */\n    @Override\n    public void onClientRegistered(int status, int clientIf) {\n        Log.d(TAG, \"onClientRegistered() - status=\" + status + \" clientIf=\" + clientIf);\n        synchronized (this) {\n            if (mClientIf == -1) {\n                if (DBG) Log.d(TAG, \"onClientRegistered LE scan canceled\");\n            }\n\n            if (status == BluetoothGatt.GATT_SUCCESS) {\n                mClientIf = clientIf;\n                try {\n                    mBluetoothGatt.startScan(mClientIf, false, mSettings, mFilters,\n                        mResultStorages, ActivityThread.currentOpPackageName());\n                } catch (RemoteException e) {\n                    Log.e(TAG, \"fail to start le scan: \" + e);\n                    mClientIf = -1;\n                }\n            } else {\n                // registration failed\n                mClientIf = -1;\n            }\n            notifyAll();\n        }\n    }\n    (snip)\n}\n\n\u5b9f\u969b\u306b\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001mBluetoothGatt.startScan(mClientIf, false, mSettings, mFilters, mResultStorages, ActivityThread.currentOpPackageName());\u306e\u90e8\u5206\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u7279\u306b\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306b\u9650\u3063\u305f\u8a18\u8f09\u306f\u306a\u3044\u3067\u3059\u306d\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u3053\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u306b\u306f\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306bACCESS_COARSE_LOCATION\u304b\u3001ACCESS_FINE_LOCATION\u304c\u5fc5\u8981\u3068\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4f4d\u7f6e\u60c5\u5831\u95a2\u9023\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n/**\n\u3000* Start Bluetooth LE scan with default parameters and no filters. The scan results will be\n\u3000* delivered through {@code callback}.\n\u3000* <p>\n\u3000* Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n\u3000* An app must hold\n\u3000* {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION} or\n\u3000* {@link android.Manifest.permission#ACCESS_FINE_LOCATION ACCESS_FINE_LOCATION} permission\n\u3000* in order to get results.\n\u3000*\n\u3000* @param callback Callback used to deliver scan results.\n\u3000* @throws IllegalArgumentException If {@code callback} is null.\n\u3000*/\n@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)\npublic void startScan(final ScanCallback callback) {\n    (snip)\n    startScan(null, new ScanSettings.Builder().build(), callback);\n}\n\nprivate void startScan(List<ScanFilter> filters, ScanSettings settings,\n        final ScanCallback callback, List<List<ResultStorageDescriptor>> resultStorages) {\n    BluetoothLeUtils.checkAdapterStateOn(mBluetoothAdapter);\n        if (settings == null || callback == null) {\n            throw new IllegalArgumentException(\"settings or callback is null\");\n        }\n        synchronized (mLeScanClients) {\n            if (mLeScanClients.containsKey(callback)) {\n                postCallbackError(callback, ScanCallback.SCAN_FAILED_ALREADY_STARTED);\n                return;\n            }\n            IBluetoothGatt gatt;\n            try {\n                gatt = mBluetoothManager.getBluetoothGatt();\n            } catch (RemoteException e) {\n                gatt = null;\n            }\n            if (gatt == null) {\n                postCallbackError(callback, ScanCallback.SCAN_FAILED_INTERNAL_ERROR);\n                return;\n            }\n            if (!isSettingsConfigAllowedForScan(settings)) {\n                postCallbackError(callback,\n                        ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED);\n                return;\n            }\n            if (!isHardwareResourcesAvailableForScan(settings)) {\n                postCallbackError(callback,\n                        ScanCallback.SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES);\n                return;\n            }\n            if (!isSettingsAndFilterComboAllowed(settings, filters)) {\n                postCallbackError(callback,\n                        ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED);\n                return;\n            }\n            BleScanCallbackWrapper wrapper = new BleScanCallbackWrapper(gatt, filters,\n                    settings, callback, resultStorages);\n            wrapper.startRegisteration();\n        }\n    }\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6b21\u306fIBluetoothGatt\u3092\u8abf\u3079\u3066\u307f\u307e\u3059\u3002\n\nIBluetoothGatt.aidl / GattService.java\nI\u301c\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u4e88\u60f3\u3067\u304d\u308b\u3088\u3046\u306b\u3001IBluetoothGatt\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3001IBluetoothGatt.aidl\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nIBluetoothGatt.aidl\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u306f?\u3068\u3044\u3046\u3053\u3068\u3067\u3001AndroidManifest.xml\u3092\u898b\u308b\u3068\u3001\u4e0b\u8a18\u306e\u8a18\u8f09\u304c\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n<service\n    android:process=\"@string/process\"\n    android:name = \".gatt.GattService\"\n    android:enabled=\"@bool/profile_supported_gatt\">\n    <intent-filter>\n        <action android:name=\"android.bluetooth.IBluetoothGatt\" />\n    </intent-filter>\n</service>\n\n\u3068\u8a00\u3046\u3053\u3068\u3067\u3001\u65e9\u901fstartScan()\u3092\u898b\u3066\u307f\u307e\u3059\u3002\nprivate static class BluetoothGattBinder extends IBluetoothGatt.Stub implements IProfileServiceBinder {\n    private GattService mService;\n\n    (snip)\n\n    @Override\n    public void startScan(int appIf, boolean isServer, ScanSettings settings,\n            List<ScanFilter> filters, List storages, String callingPackage) {\n        GattService service = getService();\n        if (service == null) return;\n        service.startScan(appIf, isServer, settings, filters, storages, callingPackage);\n    }\n}\n\nservice\u306fGattService\u81ea\u4f53\u306a\u306e\u3067\u3001\u305d\u306e\u4e2d\u306estartScan\u306f?\u3068\u3044\u3046\u3068\u3001\u3001\u3001\nvoid startScan(int appIf, boolean isServer, ScanSettings settings,\n    List<ScanFilter> filters, List<List<ResultStorageDescriptor>> storages,\n    String callingPackage) {\n    if (DBG) Log.d(TAG, \"start scan with filters\");\n    enforceAdminPermission();\n    if (needsPrivilegedPermissionForScan(settings)) {\n        enforcePrivilegedPermission();\n    }\n    boolean hasLocationPermission = Utils.checkCallerHasLocationPermission(this,\n        mAppOps, callingPackage);\n    final ScanClient scanClient = new ScanClient(appIf, isServer, settings, filters, storages);\n    scanClient.hasLocationPermission = hasLocationPermission;\n    scanClient.hasPeersMacAddressPermission = Utils.checkCallerHasPeersMacAddressPermission(\n    this);\n    mScanManager.startScan(scanClient);\n}\n\n\u306f\u3044\u3001\u3053\u3053\u306b\u5c45\u307e\u3057\u305f\u3002Utils.checkCallerHasLocationPermission\u3002\n\nUtils.java\nUtils.checkCallerHasLocationPermission\u3067\u306f\u3001Android M\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068SecurityException\u304c\u6295\u3052\u3089\u308c\u307e\u3059\u3002\n/**\n * Checks that calling process has android.Manifest.permission.ACCESS_COARSE_LOCATION or\n * android.Manifest.permission.ACCESS_FINE_LOCATION and a corresponding app op is allowed\n */\npublic static boolean checkCallerHasLocationPermission(Context context, AppOpsManager appOps,\n            String callingPackage) {\n        if (context.checkCallingOrSelfPermission(android.Manifest.permission.\n                ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED\n                && isAppOppAllowed(appOps, AppOpsManager.OP_FINE_LOCATION, callingPackage)) {\n            return true;\n        }\n        if (context.checkCallingOrSelfPermission(android.Manifest.permission.\n                ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED\n                && isAppOppAllowed(appOps, AppOpsManager.OP_COARSE_LOCATION, callingPackage)) {\n            return true;\n        }\n        // Enforce location permission for apps targeting M and later versions\n        if (isMApp(context, callingPackage)) {\n            throw new SecurityException(\"Need ACCESS_COARSE_LOCATION or \"\n                    + \"ACCESS_FINE_LOCATION permission to get scan results\");\n        } else {\n            // Pre-M apps running in the foreground should continue getting scan results\n            if (isForegroundApp(context, callingPackage)) {\n                return true;\n            }\n            Log.e(TAG, \"Permission denial: Need ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION \"\n                    + \"permission to get scan results\");\n        }\n        return false;\n    }\n\n\u3053\u308c\u3067\u30b9\u30ad\u30e3\u30f3\u304c\u5931\u6557\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u96d1\u611f\nAndroid 6.0(\u591a\u5206)\u304b\u3089[\u8a2d\u5b9a] > [\u4f4d\u7f6e\u60c5\u5831]\u306e\u30e1\u30cb\u30e5\u30fc\u5185\u306b\u3042\u308b[\u30b9\u30ad\u30e3\u30f3]\u306b\u300cBleutooth\u306e\u30b9\u30ad\u30e3\u30f3\u300d\u3068\u3044\u3046\u306e\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nACCESS_COARSE_LOCAITON / ACCESS_FINE_LOCATION\u3068\u3044\u3046\u3068\u3001GPS/Wi-Fi/\u30e2\u30d0\u30a4\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u4f7f\u3046\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u304c\u3001Bluetooth\u3067\u3082\u4f4d\u7f6e\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u308d\u3001\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u306d\u3002\n\u305f\u3060\u3001Bluetooth\u306b\u52a0\u3048\u3066\u3001GPS(\u3092\u30a4\u30e1\u30fc\u30b8\u3055\u305b\u308b\u3088\u3046\u306a\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3)\u304c\u4ed8\u3044\u3066\u3044\u308b\u3068\u306a\u308b\u3068\u3001\u96fb\u6c60\u3092\u55b0\u3044\u305d\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u304c\u5f37\u304f\u306a\u308b\u306e\u304c\u6c17\u306b\u306f\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u6a29\u9650\u3092\u6c17\u306b\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u8aac\u660e\u3082\u9762\u5012\u305d\u3046\u3067\u3001\u6b63\u76f4\u3042\u307e\u308a\u5b09\u3057\u304f\u306f\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\u3002\u3002\n\n\u8ffd\u8a18(2016/01/06)\n\u30b3\u30e1\u30f3\u30c8\u3067\u3054\u6307\u6458\u3044\u305f\u3060\u3044\u305f\u300c\u30da\u30a2\u30ea\u30f3\u30b0\u6e08\u307f\u306e\u30c7\u30d0\u30a4\u30b9\u300d\u306e\u5834\u5408\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e0a\u3067\u78ba\u8a8d\u3057\u305f\u3068\u306e\u9055\u3044\u306f\u3001\n\n\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u524a\u9664\u3059\u308b\u3002 \n\nBluetoothLeScanner.startScan()\u3067\u30c7\u30d0\u30a4\u30b9\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001BluetoothAdapter.getBondedDevices()\u3067\u30da\u30a2\u30ea\u30f3\u30b0\u6e08\u307f\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\u306e2\u70b9\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u63a5\u7d9a\u3084Characteristic\u306e\u66f8\u304d\u8fbc\u307f\u306b\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u7d50\u679c\u7684\u306b\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u306a\u304f\u3066\u3082\u3001\u63a5\u7d9a\u3084\u66f8\u304d\u8fbc\u307f\u306b\u306f\u554f\u984c\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u306a\u306e\u3067\u3001\u672c\u8a18\u4e8b\u306e\u30bf\u30a4\u30c8\u30eb\u306f\u3001\u6b63\u78ba\u306b\u306f\u3001\u300c\u3069\u3046\u3057\u3066Android 6.0\u3067BLE\u306e \"\u30b9\u30ad\u30e3\u30f3\u3092\u3059\u308b\" \u306e\u306b\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306a\u30ef\u30b1?\u300d\u3067\u3057\u305f\u3002\n\n\u8ffd\u8a18(2016/01/12)\n\u4e0a\u8a18\u4ee5\u5916\u306b\u3082\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3068\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\u304c\u5f71\u97ff\u3059\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u30d5\u30a9\u30ed\u30fc\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\nAndroid 6.0\u3067BLE\u30c7\u30d0\u30a4\u30b9\u306e\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u306b\u306f\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u3092\u30aa\u30f3\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n\n\n\ntargetSDK\u309223\u4ee5\u4e0a\u306b\u3057\u305f\u5834\u5408\u00a0\u21a9\n\n\n\u516c\u5f0f\u30b5\u30a4\u30c8\u00a0\u21a9\n\n\n\n\n# \u306f\u3058\u3081\u306b\n\nAndroid6.0(Marshmallow)\u304b\u3089\u3001BLE\u3092\u4f7f\u3046\u30a2\u30d7\u30ea\u306b\u306f`android.permission.BLUETOOTH`\u3001`android.permission.BLUETOOTH_ADMIN`\u306b\u52a0\u3048\u3066\u3001`android.permission.ACCESS_COARSE_LOCATION`\u307e\u305f\u306f`android.permission.ACCESS_FINE_LOCATION`\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3057\u305f\u3002[^1],[^2]\n\n\u7686\u3055\u3093\u3001\u3054\u5b58\u77e5\u3067\u3057\u305f\u304b? \n\n\u79c1\u306f\u77e5\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u77e5\u3089\u305a\u306bNexus5\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3057\u305f\u3089\u3001\u81ea\u4f5c\u30a2\u30d7\u30ea\u3067BLE\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u5e74\u59cb\u65e9\u3005\u614c\u3066\u307e\u3057\u305f\u3002\n\n\u3067\u3001\u6094\u3057\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u30bd\u30fc\u30b9\u773a\u3081\u3066\u307f\u305f\u3088\u3001\u3068\u3044\u3046\u8a18\u9332\u3067\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u3053\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u5185\u5bb9\u306e\u6b63\u78ba\u6027\u306f\u4fdd\u8a3c\u3067\u304d\u307e\u305b\u3093\u3002\u9593\u9055\u3044\u7b49\u306b\u6c17\u304c\u3064\u304b\u308c\u305f\u5834\u5408\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u3067\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n\n\n[^1]: targetSDK\u309223\u4ee5\u4e0a\u306b\u3057\u305f\u5834\u5408\n[^2]: [\u516c\u5f0f\u30b5\u30a4\u30c8](http://developer.android.com/intl/ja/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(android.bluetooth.le.ScanCallback))\n\n# \u7d50\u8ad6\n\n\u9577\u3044\u306e\u3067\u5148\u306b\u7d50\u8ad6\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n---\n\n**`GattService.java`\u306e`startScan`\u306b\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306e\u6709\u7121\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30b3\u30fc\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u3066\u304a\u308a\u3001\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e8\u30f3\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306fSecurityException\u304c\u6295\u3052\u3089\u308c\u3066\u30b9\u30ad\u30e3\u30f3\u306b\u5931\u6557\u3059\u308b\u3002**\n\n---\n\n# \u4e8b\u8c61\n\nAndroid6.0\u3067BLE\u306e\u30b9\u30ad\u30e3\u30f3\u3092\u884c\u3046\u969b\u306b\u3001`ACCESS_COARSE_LOCATION`\u307e\u305f\u306f`ACCESS_FINE_LOCAITON`\u306e\u3044\u305a\u308c\u304b\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068\u3001\u30c7\u30d0\u30a4\u30b9\u304c\u691c\u51fa\u3055\u308c\u307e\u305b\u3093\u3002\n\n\u30a2\u30d7\u30ea\u304c\u7570\u5e38\u7d42\u4e86\u3057\u305f\u308a\u3001\u7aef\u672b\u306b\u4f55\u304b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u305f\u308a\u306f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u306a\u306e\u3067\u3001\u975e\u5e38\u306b\u308f\u304b\u308a\u3065\u3089\u3044\u3002\u3061\u3087\u3046\u3069\u30c7\u30d0\u30a4\u30b9\u5074\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u5909\u3048\u3066\u3044\u305f\u3068\u3053\u308d\u3060\u3063\u305f\u306e\u3067\u3001\u3066\u3063\u304d\u308aBLE\u30c7\u30d0\u30a4\u30b9\u3092\u30c0\u30e1\u306b\u3057\u305f\u304b\u3068\u7126\u308a\u307e\u304f\u308a\u3067\u3059\u3002\n\n# logcat\n\n\n\u3068\u306f\u3044\u3048\u3001logcat\u306b\u306f\u3061\u3083\u3093\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u8a18\u9332\u3055\u308c\u307e\u3059\u3002\u3068\u3044\u3046\u304b\u3001logcat\u306b\u3057\u304b\u51fa\u307e\u305b\u3093\u3002\n\n```\nW/Binder: Caught a RuntimeException from the binder stub implementation.\n\tjava.lang.SecurityException: Need ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission to get scan results\n\tat android.os.Parcel.readException(Parcel.java:1620)\n\tat android.os.Parcel.readException(Parcel.java:1573)\n\tat android.bluetooth.IBluetoothGatt$Stub$Proxy.startScan(IBluetoothGatt.java:772)\n\tat android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper.onClientRegistered(BluetoothLeScanner.java:324)\n\tat android.bluetooth.IBluetoothGattCallback$Stub.onTransact(IBluetoothGattCallback.java:56)\n\tat android.os.Binder.execTransact(Binder.java:453)\n```\n\n\u3068\u308a\u3042\u3048\u305a\u3001Bluetooth\u5468\u308a\u3068\u3044\u3046\u3053\u3068\u3067\u3001BluetoothLeScanner.java\u304b\u3089\u5f53\u305f\u3063\u3066\u307f\u307e\u3059\u3002\n\n# BluetoothLeScanner.java\n\n\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\nprivate class BleScanCallbackWrapper extends BluetoothGattCallbackWrapper {\n\tprivate IBluetoothGatt mBluetoothGatt;\n\t\n\t(snip)\n\t\n\t/**\n\t * Application interface registered - app is ready to go\n\t */\n\t@Override\n\tpublic void onClientRegistered(int status, int clientIf) {\n\t\tLog.d(TAG, \"onClientRegistered() - status=\" + status + \" clientIf=\" + clientIf);\n\t\tsynchronized (this) {\n\t\t\tif (mClientIf == -1) {\n\t\t\t\tif (DBG) Log.d(TAG, \"onClientRegistered LE scan canceled\");\n\t\t\t}\n\n\t\t\tif (status == BluetoothGatt.GATT_SUCCESS) {\n\t\t\t\tmClientIf = clientIf;\n\t\t\t\ttry {\n\t\t\t\t\tmBluetoothGatt.startScan(mClientIf, false, mSettings, mFilters,\n\t\t\t\t\t\tmResultStorages, ActivityThread.currentOpPackageName());\n\t\t\t\t} catch (RemoteException e) {\n\t\t\t\t\tLog.e(TAG, \"fail to start le scan: \" + e);\n\t\t\t\t\tmClientIf = -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// registration failed\n\t\t\t\tmClientIf = -1;\n\t\t\t}\n\t\t\tnotifyAll();\n\t\t}\n\t}\n\t(snip)\n}\n```\n\n\u5b9f\u969b\u306b\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001`mBluetoothGatt.startScan(mClientIf, false, mSettings, mFilters, mResultStorages, ActivityThread.currentOpPackageName());`\u306e\u90e8\u5206\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u7279\u306b\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306b\u9650\u3063\u305f\u8a18\u8f09\u306f\u306a\u3044\u3067\u3059\u306d\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u3053\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u306b\u306f\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b`ACCESS_COARSE_LOCATION`\u304b\u3001`ACCESS_FINE_LOCATION`\u304c\u5fc5\u8981\u3068\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4f4d\u7f6e\u60c5\u5831\u95a2\u9023\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```\n/**\n\u3000* Start Bluetooth LE scan with default parameters and no filters. The scan results will be\n\u3000* delivered through {@code callback}.\n\u3000* <p>\n\u3000* Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n\u3000* An app must hold\n\u3000* {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION} or\n\u3000* {@link android.Manifest.permission#ACCESS_FINE_LOCATION ACCESS_FINE_LOCATION} permission\n\u3000* in order to get results.\n\u3000*\n\u3000* @param callback Callback used to deliver scan results.\n\u3000* @throws IllegalArgumentException If {@code callback} is null.\n\u3000*/\n@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)\npublic void startScan(final ScanCallback callback) {\n\t(snip)\n\tstartScan(null, new ScanSettings.Builder().build(), callback);\n}\n\nprivate void startScan(List<ScanFilter> filters, ScanSettings settings,\n\t\tfinal ScanCallback callback, List<List<ResultStorageDescriptor>> resultStorages) {\n\tBluetoothLeUtils.checkAdapterStateOn(mBluetoothAdapter);\n        if (settings == null || callback == null) {\n            throw new IllegalArgumentException(\"settings or callback is null\");\n        }\n        synchronized (mLeScanClients) {\n            if (mLeScanClients.containsKey(callback)) {\n                postCallbackError(callback, ScanCallback.SCAN_FAILED_ALREADY_STARTED);\n                return;\n            }\n            IBluetoothGatt gatt;\n            try {\n                gatt = mBluetoothManager.getBluetoothGatt();\n            } catch (RemoteException e) {\n                gatt = null;\n            }\n            if (gatt == null) {\n                postCallbackError(callback, ScanCallback.SCAN_FAILED_INTERNAL_ERROR);\n                return;\n            }\n            if (!isSettingsConfigAllowedForScan(settings)) {\n                postCallbackError(callback,\n                        ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED);\n                return;\n            }\n            if (!isHardwareResourcesAvailableForScan(settings)) {\n                postCallbackError(callback,\n                        ScanCallback.SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES);\n                return;\n            }\n            if (!isSettingsAndFilterComboAllowed(settings, filters)) {\n                postCallbackError(callback,\n                        ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED);\n                return;\n            }\n            BleScanCallbackWrapper wrapper = new BleScanCallbackWrapper(gatt, filters,\n                    settings, callback, resultStorages);\n            wrapper.startRegisteration();\n        }\n    }\n\n```\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6b21\u306f`IBluetoothGatt`\u3092\u8abf\u3079\u3066\u307f\u307e\u3059\u3002\n\n#IBluetoothGatt.aidl / GattService.java\n\nI\u301c\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u4e88\u60f3\u3067\u304d\u308b\u3088\u3046\u306b\u3001IBluetoothGatt\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3001IBluetoothGatt.aidl\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nIBluetoothGatt.aidl\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u306f?\u3068\u3044\u3046\u3053\u3068\u3067\u3001AndroidManifest.xml\u3092\u898b\u308b\u3068\u3001\u4e0b\u8a18\u306e\u8a18\u8f09\u304c\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n\n```\n<service\n\tandroid:process=\"@string/process\"\n\tandroid:name = \".gatt.GattService\"\n\tandroid:enabled=\"@bool/profile_supported_gatt\">\n\t<intent-filter>\n\t\t<action android:name=\"android.bluetooth.IBluetoothGatt\" />\n\t</intent-filter>\n</service>\n```\n\n\u3068\u8a00\u3046\u3053\u3068\u3067\u3001\u65e9\u901f`startScan()`\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```\nprivate static class BluetoothGattBinder extends IBluetoothGatt.Stub implements IProfileServiceBinder {\n\tprivate GattService mService;\n\t\n\t(snip)\n\t\n\t@Override\n\tpublic void startScan(int appIf, boolean isServer, ScanSettings settings,\n\t\t\tList<ScanFilter> filters, List storages, String callingPackage) {\n\t\tGattService service = getService();\n\t\tif (service == null) return;\n\t\tservice.startScan(appIf, isServer, settings, filters, storages, callingPackage);\n\t}\n}\n```\n\nservice\u306fGattService\u81ea\u4f53\u306a\u306e\u3067\u3001\u305d\u306e\u4e2d\u306estartScan\u306f?\u3068\u3044\u3046\u3068\u3001\u3001\u3001\n\n```\nvoid startScan(int appIf, boolean isServer, ScanSettings settings,\n\tList<ScanFilter> filters, List<List<ResultStorageDescriptor>> storages,\n\tString callingPackage) {\n\tif (DBG) Log.d(TAG, \"start scan with filters\");\n\tenforceAdminPermission();\n\tif (needsPrivilegedPermissionForScan(settings)) {\n\t\tenforcePrivilegedPermission();\n\t}\n\tboolean hasLocationPermission = Utils.checkCallerHasLocationPermission(this,\n\t\tmAppOps, callingPackage);\n\tfinal ScanClient scanClient = new ScanClient(appIf, isServer, settings, filters, storages);\n\tscanClient.hasLocationPermission = hasLocationPermission;\n\tscanClient.hasPeersMacAddressPermission = Utils.checkCallerHasPeersMacAddressPermission(\n\tthis);\n\tmScanManager.startScan(scanClient);\n}\n```\n\n\u306f\u3044\u3001\u3053\u3053\u306b\u5c45\u307e\u3057\u305f\u3002`Utils.checkCallerHasLocationPermission`\u3002\n\n# Utils.java\n\n`Utils.checkCallerHasLocationPermission`\u3067\u306f\u3001Android M\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068SecurityException\u304c\u6295\u3052\u3089\u308c\u307e\u3059\u3002\n\n```\n/**\n * Checks that calling process has android.Manifest.permission.ACCESS_COARSE_LOCATION or\n * android.Manifest.permission.ACCESS_FINE_LOCATION and a corresponding app op is allowed\n */\npublic static boolean checkCallerHasLocationPermission(Context context, AppOpsManager appOps,\n            String callingPackage) {\n        if (context.checkCallingOrSelfPermission(android.Manifest.permission.\n                ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED\n                && isAppOppAllowed(appOps, AppOpsManager.OP_FINE_LOCATION, callingPackage)) {\n            return true;\n        }\n        if (context.checkCallingOrSelfPermission(android.Manifest.permission.\n                ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED\n                && isAppOppAllowed(appOps, AppOpsManager.OP_COARSE_LOCATION, callingPackage)) {\n            return true;\n        }\n        // Enforce location permission for apps targeting M and later versions\n        if (isMApp(context, callingPackage)) {\n            throw new SecurityException(\"Need ACCESS_COARSE_LOCATION or \"\n                    + \"ACCESS_FINE_LOCATION permission to get scan results\");\n        } else {\n            // Pre-M apps running in the foreground should continue getting scan results\n            if (isForegroundApp(context, callingPackage)) {\n                return true;\n            }\n            Log.e(TAG, \"Permission denial: Need ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION \"\n                    + \"permission to get scan results\");\n        }\n        return false;\n    }\n```\n\n\u3053\u308c\u3067\u30b9\u30ad\u30e3\u30f3\u304c\u5931\u6557\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\n# \u96d1\u611f\n\nAndroid 6.0(\u591a\u5206)\u304b\u3089[\u8a2d\u5b9a] > [\u4f4d\u7f6e\u60c5\u5831]\u306e\u30e1\u30cb\u30e5\u30fc\u5185\u306b\u3042\u308b[\u30b9\u30ad\u30e3\u30f3]\u306b\u300cBleutooth\u306e\u30b9\u30ad\u30e3\u30f3\u300d\u3068\u3044\u3046\u306e\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n`ACCESS_COARSE_LOCAITON / ACCESS_FINE_LOCATION`\u3068\u3044\u3046\u3068\u3001GPS/Wi-Fi/\u30e2\u30d0\u30a4\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u4f7f\u3046\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u304c\u3001Bluetooth\u3067\u3082\u4f4d\u7f6e\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u308d\u3001\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u306d\u3002\n\n\u305f\u3060\u3001Bluetooth\u306b\u52a0\u3048\u3066\u3001GPS(\u3092\u30a4\u30e1\u30fc\u30b8\u3055\u305b\u308b\u3088\u3046\u306a\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3)\u304c\u4ed8\u3044\u3066\u3044\u308b\u3068\u306a\u308b\u3068\u3001\u96fb\u6c60\u3092\u55b0\u3044\u305d\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u304c\u5f37\u304f\u306a\u308b\u306e\u304c\u6c17\u306b\u306f\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u6a29\u9650\u3092\u6c17\u306b\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u8aac\u660e\u3082\u9762\u5012\u305d\u3046\u3067\u3001\u6b63\u76f4\u3042\u307e\u308a\u5b09\u3057\u304f\u306f\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\u3002\u3002\n\n\n# \u8ffd\u8a18(2016/01/06)\n\n\u30b3\u30e1\u30f3\u30c8\u3067\u3054\u6307\u6458\u3044\u305f\u3060\u3044\u305f\u300c\u30da\u30a2\u30ea\u30f3\u30b0\u6e08\u307f\u306e\u30c7\u30d0\u30a4\u30b9\u300d\u306e\u5834\u5408\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4e0a\u3067\u78ba\u8a8d\u3057\u305f\u3068\u306e\u9055\u3044\u306f\u3001\n\n+ \u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u524a\u9664\u3059\u308b\u3002 \n+ `BluetoothLeScanner.startScan()`\u3067\u30c7\u30d0\u30a4\u30b9\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001`BluetoothAdapter.getBondedDevices()`\u3067\u30da\u30a2\u30ea\u30f3\u30b0\u6e08\u307f\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\u306e2\u70b9\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u63a5\u7d9a\u3084Characteristic\u306e\u66f8\u304d\u8fbc\u307f\u306b\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u7d50\u679c\u7684\u306b\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u306a\u304f\u3066\u3082\u3001\u63a5\u7d9a\u3084\u66f8\u304d\u8fbc\u307f\u306b\u306f\u554f\u984c\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u306a\u306e\u3067\u3001\u672c\u8a18\u4e8b\u306e\u30bf\u30a4\u30c8\u30eb\u306f\u3001\u6b63\u78ba\u306b\u306f\u3001\u300c\u3069\u3046\u3057\u3066Android 6.0\u3067BLE\u306e **\"\u30b9\u30ad\u30e3\u30f3\u3092\u3059\u308b\"** \u306e\u306b\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306a\u30ef\u30b1?\u300d\u3067\u3057\u305f\u3002\n\n# \u8ffd\u8a18(2016/01/12)\n\n\u4e0a\u8a18\u4ee5\u5916\u306b\u3082\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3068\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\u304c\u5f71\u97ff\u3059\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u30d5\u30a9\u30ed\u30fc\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n[Android 6.0\u3067BLE\u30c7\u30d0\u30a4\u30b9\u306e\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u306b\u306f\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u3092\u30aa\u30f3\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b](http://qiita.com/hisanaka/items/518db08d4a700247ec69)\n", "tags": ["Android", "\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3", "permission", "bluetooth"]}