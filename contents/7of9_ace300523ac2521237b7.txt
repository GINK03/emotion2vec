{"tags": ["zybo", "TTC", "todo"], "context": "\n\u52d5\u4f5c\u78ba\u8a8d\nVivado 2015.4 on Windows 8.1 pro\n\n\nTTC (Triple Timer Counter)\u3092\u4f7f\u3063\u3066\u307f\u308b\n\u53c2\u8003 https://forums.xilinx.com/t5/Xcell-Daily-Blog/Introduction-to-the-Zynq-Triple-Timer-Counter-Part-Two-Adam/ba-p/410361\n\nVivado\u3067\u306e\u4f5c\u696d\n\nTTC\u3092\u6709\u52b9\u5316\n\nBlock Design\u306eDiagram\u753b\u9762\u306b\u304a\u3044\u3066processing_system7_0\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\n\u4e2d\u592e\u4e0a\u90e8\u306eTTC\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\nApplication Processor Unit > Timer 0 \u3092\u30c1\u30a7\u30c3\u30af\n\n\nIO: EMIO\u306e\u307e\u307e\n\n\n\n\nClock Configuration\u8a2d\u5b9a\n\nBlock Design\u306eDiagram\u753b\u9762\u306b\u304a\u3044\u3066processing_system7_0\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\nPage Navigator\u306eClock Configuration\u3092\u30af\u30ea\u30c3\u30af\nTimers > TTC0 \u3092\u5c55\u958b\n\n\n\u3057\u304b\u3057\u8a2d\u5b9a\u306f\u5909\u66f4\u305b\u305a (Clock Source: CPU 1X\u306a\u3069)\n\n\n\n\nCreate Port\n\n\u4ee5\u4e0b\u3067\u624b\u9806\u3067\u4f5c\u6210\u3057\u305f\u30dd\u30fc\u30c8\u95a2\u9023\u3067bitstream\u751f\u6210\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\u5bfe\u51e6\u65b9\u6cd5\u304c\u4e0d\u660e\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u30dd\u30fc\u30c8\u4f5c\u6210\u306f\u3084\u3081\u305f\u3002\n\nBlock Design\u306eDiagram\u753b\u9762\u306b\u304a\u3044\u3066processing_system7_0\u4e0a\u3067\u53f3\u30af\u30ea\u30c3\u30af\nCreate Port\u9078\u629e\nCreate Port\u753b\u9762\u3067\u8a2d\u5b9a\n\n\nPort name: EMIO_WaveOut (\u3068\u3057\u3066\u307f\u305f)\nDirection: Output (\u51fa\u529b\u3092\u898b\u308b\u305f\u3081)\n\u305d\u306e\u4ed6\u5909\u66f4\u306a\u3057\n\n\n\n\n\u4f5c\u6210\u3057\u305f\u30dd\u30fc\u30c8\u3092\u914d\u7dda\n\u4ee5\u4e0b\u3067\u624b\u9806\u3067\u4f5c\u6210\u3057\u305f\u30dd\u30fc\u30c8\u95a2\u9023\u3067bitstream\u751f\u6210\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\u5bfe\u51e6\u65b9\u6cd5\u304c\u4e0d\u660e\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u30dd\u30fc\u30c8\u4f5c\u6210\u306f\u3084\u3081\u305f\u3002\n\nTTC0_WAVE0_OUT \u3068 EMIO_WaveOut \u3092\u914d\u7dda\n\n\n\u4e0d\u660e\nConstraints\u3092\u4f5c\u308b\u3088\u3046\u3060\u304c\u3001\u307e\u3060\u305d\u306e\u6982\u5ff5\u3092\u628a\u63e1\u3057\u3066\u306a\u3044\u3002\nConstraints\u306f\u672a\u8a2d\u5b9a\u3002\n\nXSDK\u3078Export\nbistream\u3092\u751f\u6210\u3057\u3001XSDK\u3078Export\u3057\u305f\u3002\n\nXSDK\u3067\u306e\u4f5c\u696d\nNew -> Application Project\u306b\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\nadam Taylor\u30d6\u30ed\u30b0\u306e\nhelloworld - Adam taylor Part 19.docx \u200f16 KB\n\u306e\u30bd\u30fc\u30b9\u306b\u5909\u66f4\u3002\nTickHandler\u306e\u51e6\u7406\u3067event\u6587\u5b57\u5217\u306e\u524d\u306b\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u8868\u793a\u3059\u308b\u7528\u306b\u5909\u66f4\u3057\u305f\u3002\nstatic void TickHandler(void *CallBackRef)\n{\n    u32 StatusEvent;\n    static u32 cnt = 0;\n\n    StatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);\n    XTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);\n\n    printf(\"%d,\",cnt);\n    printf(\"event\\n\\r\");\n    cnt++;\n\n}\n\nProgram FPGA\u3092\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u3063\u305f\u3002\n\n\n\u30bd\u30fc\u30b9\n\u6539\u5909\u5f8c\u306e\u30bd\u30fc\u30b9\n\u5909\u6570\u540d\u306e\u5909\u66f4\u306a\u3069\u3082\u3057\u3066\u3044\u308b\u3002\n\nhelloworld.c\n#include <stdio.h>\n#include \"platform.h\"\n#include \"Xscugic.h\"\n#include \"Xil_exception.h\"\n#include \"xttcps.h\"\n\n#define TTC_DEVICE_ID       XPAR_XTTCPS_0_DEVICE_ID\n#define TTC_INTR_ID         XPAR_XTTCPS_0_INTR\n#define INTC_DEVICE_ID      XPAR_SCUGIC_SINGLE_DEVICE_ID\n\ntypedef struct {\n    u32 OutputHz;   /* Output frequency */\n    u16 Interval;   /* Interval value */\n    u8 Prescaler;   /* Prescaler value */\n    u16 Options;    /* Option settings */\n} TmrCntrSetup;\n\nstatic TmrCntrSetup SettingsTable = {\n    {10, 0, 0, 0},  /* Ticker timer counter initial setup, only output freq */\n};\n\nstatic XScuGic GicInst;\n\nstatic void SetupInterruptSystem(XScuGic *GicInstancePtr, XTtcPs *TtcPsInt);\nstatic void TickHandler(void *CallBackRef);\n\nint main()\n{\n    XTtcPs_Config *ttcCfg;\n    XTtcPs tmrInst;\n    TmrCntrSetup *tmrSetup;\n\n    init_platform();\n\n    tmrSetup = &SettingsTable;\n\n    XTtcPs_Stop(&tmrInst);\n\n    printf(\"\\n\\rAdam Edition MicroZed Using Vivado \\n\\r\");\n\n    //initialise the timer\n    ttcCfg = XTtcPs_LookupConfig(TTC_DEVICE_ID);\n    XTtcPs_CfgInitialize(&tmrInst, ttcCfg, ttcCfg->BaseAddress);\n\n    tmrSetup->Options |= (XTTCPS_OPTION_INTERVAL_MODE |\n                              XTTCPS_OPTION_WAVE_DISABLE);\n\n    XTtcPs_SetOptions(&tmrInst, tmrSetup->Options);\n    XTtcPs_CalcIntervalFromFreq(&tmrInst, tmrSetup->OutputHz,&(tmrSetup->Interval), \n        &(tmrSetup->Prescaler));\n\n    XTtcPs_SetInterval(&tmrInst, tmrSetup->Interval);\n    XTtcPs_SetPrescaler(&tmrInst, tmrSetup->Prescaler);\n\n    SetupInterruptSystem(&GicInst, &tmrInst);\n\n    while(1)\n        ;\n\n    return 0;\n}\n\nstatic void SetupInterruptSystem(XScuGic *GicPtr, XTtcPs *TtcPsInt)\n{\n    XScuGic_Config *gicCfg;\n\n    Xil_ExceptionInit();\n\n    //initialise\n    gicCfg = XScuGic_LookupConfig(INTC_DEVICE_ID);\n    XScuGic_CfgInitialize(GicPtr, gicCfg, gicCfg->CpuBaseAddress);\n\n    //connect to the hardware\n    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,\n                (Xil_ExceptionHandler)XScuGic_InterruptHandler, GicPtr);\n    XScuGic_Connect(GicPtr, TTC_INTR_ID,\n            (Xil_ExceptionHandler)TickHandler, (void *)TtcPsInt);\n    XScuGic_Enable(GicPtr, TTC_INTR_ID);\n    XTtcPs_EnableInterrupts(TtcPsInt, XTTCPS_IXR_INTERVAL_MASK);\n\n    XTtcPs_Start(TtcPsInt);\n\n    // Enable interrupts\n    Xil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);\n}\n\nstatic void TickHandler(void *CallBackRef)\n{\n    u32 StatusEvent;\n    static u32 cnt = 0;\n\n    StatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);\n    XTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);\n\n    printf(\"%d,\",cnt);\n    printf(\"event\\n\\r\");\n    cnt++;\n}\n\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u505c\u6b62\n\u4e0a\u8a18\u3067\u5b9f\u884c\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u505c\u6b62\u65b9\u6cd5\nhttp://qiita.com/7of9/items/d2b17fcd6f63aa185d73\n\nCreate Port\u306e\u6210\u529f\n(\u8ffd\u8a18 2016/06/30)\nXDC\u30d5\u30a1\u30a4\u30eb\u306e\u8a18\u8f09\u306b\u3064\u3044\u3066\nhttps://forums.xilinx.com/t5/Xcell-Daily-Blog/Introduction-to-the-Zynq-Triple-Timer-Counter-Part-Two-Adam/ba-p/410361\n\u306b\u304a\u3044\u3066\u306f[EMIO_Wave_out]\u3068\u3044\u3046\u8a18\u8f09\u3067\u3042\u3063\u305f\u304c\u3001Vivado\u306eBlock Design\u3092\u898b\u308b\u3068[EMIO_WaveOut]\u3068\u3044\u3046\u540d\u524d\u306b\u306a\u3063\u3066\u3044\u305f\u3002\n\u4e0a\u8a18\u4fee\u6b63\u3092\u3059\u308b\u3053\u3068\u3067bitstream\u4f5c\u6210\u307e\u3067\u6210\u529f\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nVivado 2015.4 on Windows 8.1 pro\n```\n\nTTC (Triple Timer Counter)\u3092\u4f7f\u3063\u3066\u307f\u308b\n\n\u53c2\u8003 https://forums.xilinx.com/t5/Xcell-Daily-Blog/Introduction-to-the-Zynq-Triple-Timer-Counter-Part-Two-Adam/ba-p/410361\n\n## Vivado\u3067\u306e\u4f5c\u696d\n\n### TTC\u3092\u6709\u52b9\u5316\n\n- Block Design\u306eDiagram\u753b\u9762\u306b\u304a\u3044\u3066processing_system7_0\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\n- \u4e2d\u592e\u4e0a\u90e8\u306eTTC\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\n- Application Processor Unit > Timer 0 \u3092\u30c1\u30a7\u30c3\u30af\n  - IO: EMIO\u306e\u307e\u307e\n\n### Clock Configuration\u8a2d\u5b9a\n\n- Block Design\u306eDiagram\u753b\u9762\u306b\u304a\u3044\u3066processing_system7_0\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\n- Page Navigator\u306eClock Configuration\u3092\u30af\u30ea\u30c3\u30af\n- Timers > TTC0 \u3092\u5c55\u958b\n  - \u3057\u304b\u3057\u8a2d\u5b9a\u306f\u5909\u66f4\u305b\u305a (Clock Source: CPU 1X\u306a\u3069)\n\n### ~~Create Port~~\n\n<font color=red>\u4ee5\u4e0b\u3067\u624b\u9806\u3067\u4f5c\u6210\u3057\u305f\u30dd\u30fc\u30c8\u95a2\u9023\u3067bitstream\u751f\u6210\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\u5bfe\u51e6\u65b9\u6cd5\u304c\u4e0d\u660e\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u30dd\u30fc\u30c8\u4f5c\u6210\u306f\u3084\u3081\u305f\u3002</font>\n\n- Block Design\u306eDiagram\u753b\u9762\u306b\u304a\u3044\u3066processing_system7_0\u4e0a\u3067\u53f3\u30af\u30ea\u30c3\u30af\n- Create Port\u9078\u629e\n- Create Port\u753b\u9762\u3067\u8a2d\u5b9a\n  - Port name: EMIO_WaveOut (\u3068\u3057\u3066\u307f\u305f)\n  - Direction: Output (\u51fa\u529b\u3092\u898b\u308b\u305f\u3081)\n  - \u305d\u306e\u4ed6\u5909\u66f4\u306a\u3057\n\n### \u4f5c\u6210\u3057\u305f\u30dd\u30fc\u30c8\u3092\u914d\u7dda\n\n<font color=red>\u4ee5\u4e0b\u3067\u624b\u9806\u3067\u4f5c\u6210\u3057\u305f\u30dd\u30fc\u30c8\u95a2\u9023\u3067bitstream\u751f\u6210\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\u5bfe\u51e6\u65b9\u6cd5\u304c\u4e0d\u660e\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u30dd\u30fc\u30c8\u4f5c\u6210\u306f\u3084\u3081\u305f\u3002</font>\n\n- TTC0_WAVE0_OUT \u3068 EMIO_WaveOut \u3092\u914d\u7dda\n\n\n### \u4e0d\u660e\n\nConstraints\u3092\u4f5c\u308b\u3088\u3046\u3060\u304c\u3001\u307e\u3060\u305d\u306e\u6982\u5ff5\u3092\u628a\u63e1\u3057\u3066\u306a\u3044\u3002\n\nConstraints\u306f\u672a\u8a2d\u5b9a\u3002\n\n### XSDK\u3078Export\n\nbistream\u3092\u751f\u6210\u3057\u3001XSDK\u3078Export\u3057\u305f\u3002\n\n## XSDK\u3067\u306e\u4f5c\u696d\n\nNew -> Application Project\u306b\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n\n[adam Taylor\u30d6\u30ed\u30b0](https://forums.xilinx.com/t5/Xcell-Daily-Blog/Introduction-to-the-Zynq-Triple-Timer-Counter-Part-Three-Adam/ba-p/413105)\u306e\n`helloworld - Adam taylor Part 19.docx \u200f16 KB`\n\u306e\u30bd\u30fc\u30b9\u306b\u5909\u66f4\u3002\n\n\nTickHandler\u306e\u51e6\u7406\u3067event\u6587\u5b57\u5217\u306e\u524d\u306b\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u8868\u793a\u3059\u308b\u7528\u306b\u5909\u66f4\u3057\u305f\u3002\n\n```\nstatic void TickHandler(void *CallBackRef)\n{\n\tu32 StatusEvent;\n\tstatic u32 cnt = 0;\n\n\tStatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);\n\tXTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);\n\n\tprintf(\"%d,\",cnt);\n\tprintf(\"event\\n\\r\");\n\tcnt++;\n\n}\n```\n\nProgram FPGA\u3092\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u3063\u305f\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/57251c03-b411-d6d3-a4ca-c3d5b44a95a0.png)\n\n\n## \u30bd\u30fc\u30b9\n\n\u6539\u5909\u5f8c\u306e\u30bd\u30fc\u30b9\n\u5909\u6570\u540d\u306e\u5909\u66f4\u306a\u3069\u3082\u3057\u3066\u3044\u308b\u3002\n\n```helloworld.c\n#include <stdio.h>\n#include \"platform.h\"\n#include \"Xscugic.h\"\n#include \"Xil_exception.h\"\n#include \"xttcps.h\"\n\n#define TTC_DEVICE_ID\t    XPAR_XTTCPS_0_DEVICE_ID\n#define TTC_INTR_ID\t\t    XPAR_XTTCPS_0_INTR\n#define INTC_DEVICE_ID\t\tXPAR_SCUGIC_SINGLE_DEVICE_ID\n\ntypedef struct {\n\tu32 OutputHz;\t/* Output frequency */\n\tu16 Interval;\t/* Interval value */\n\tu8 Prescaler;\t/* Prescaler value */\n\tu16 Options;\t/* Option settings */\n} TmrCntrSetup;\n\nstatic TmrCntrSetup SettingsTable = {\n\t{10, 0, 0, 0},\t/* Ticker timer counter initial setup, only output freq */\n};\n\nstatic XScuGic GicInst;\n\nstatic void SetupInterruptSystem(XScuGic *GicInstancePtr, XTtcPs *TtcPsInt);\nstatic void TickHandler(void *CallBackRef);\n\nint main()\n{\n\tXTtcPs_Config *ttcCfg;\n\tXTtcPs tmrInst;\n\tTmrCntrSetup *tmrSetup;\n\n\tinit_platform();\n\n\ttmrSetup = &SettingsTable;\n\n\tXTtcPs_Stop(&tmrInst);\n\n \tprintf(\"\\n\\rAdam Edition MicroZed Using Vivado \\n\\r\");\n\n \t//initialise the timer\n \tttcCfg = XTtcPs_LookupConfig(TTC_DEVICE_ID);\n \tXTtcPs_CfgInitialize(&tmrInst, ttcCfg, ttcCfg->BaseAddress);\n\n \ttmrSetup->Options |= (XTTCPS_OPTION_INTERVAL_MODE |\n \t\t\t\t\t\t      XTTCPS_OPTION_WAVE_DISABLE);\n\n \tXTtcPs_SetOptions(&tmrInst, tmrSetup->Options);\n \tXTtcPs_CalcIntervalFromFreq(&tmrInst, tmrSetup->OutputHz,&(tmrSetup->Interval), \n \t\t&(tmrSetup->Prescaler));\n\n    XTtcPs_SetInterval(&tmrInst, tmrSetup->Interval);\n    XTtcPs_SetPrescaler(&tmrInst, tmrSetup->Prescaler);\n\n    SetupInterruptSystem(&GicInst, &tmrInst);\n\n\twhile(1)\n\t\t;\n\n\treturn 0;\n}\n\nstatic void SetupInterruptSystem(XScuGic *GicPtr, XTtcPs *TtcPsInt)\n{\n\tXScuGic_Config *gicCfg;\n\n\tXil_ExceptionInit();\n\n\t//initialise\n\tgicCfg = XScuGic_LookupConfig(INTC_DEVICE_ID);\n\tXScuGic_CfgInitialize(GicPtr, gicCfg, gicCfg->CpuBaseAddress);\n\n\t//connect to the hardware\n\tXil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,\n\t\t\t\t(Xil_ExceptionHandler)XScuGic_InterruptHandler, GicPtr);\n\tXScuGic_Connect(GicPtr, TTC_INTR_ID,\n\t\t\t(Xil_ExceptionHandler)TickHandler, (void *)TtcPsInt);\n\tXScuGic_Enable(GicPtr, TTC_INTR_ID);\n\tXTtcPs_EnableInterrupts(TtcPsInt, XTTCPS_IXR_INTERVAL_MASK);\n\n\tXTtcPs_Start(TtcPsInt);\n\n\t// Enable interrupts\n\tXil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);\n}\n\nstatic void TickHandler(void *CallBackRef)\n{\n\tu32 StatusEvent;\n\tstatic u32 cnt = 0;\n\n\tStatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);\n\tXTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);\n\n\tprintf(\"%d,\",cnt);\n\tprintf(\"event\\n\\r\");\n\tcnt++;\n}\n```\n\n### \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u505c\u6b62\n\n\u4e0a\u8a18\u3067\u5b9f\u884c\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u505c\u6b62\u65b9\u6cd5\nhttp://qiita.com/7of9/items/d2b17fcd6f63aa185d73\n\n## Create Port\u306e\u6210\u529f\n\n(\u8ffd\u8a18 2016/06/30)\nXDC\u30d5\u30a1\u30a4\u30eb\u306e\u8a18\u8f09\u306b\u3064\u3044\u3066\nhttps://forums.xilinx.com/t5/Xcell-Daily-Blog/Introduction-to-the-Zynq-Triple-Timer-Counter-Part-Two-Adam/ba-p/410361\n\u306b\u304a\u3044\u3066\u306f[EMIO_Wave_out]\u3068\u3044\u3046\u8a18\u8f09\u3067\u3042\u3063\u305f\u304c\u3001Vivado\u306eBlock Design\u3092\u898b\u308b\u3068[EMIO_WaveOut]\u3068\u3044\u3046\u540d\u524d\u306b\u306a\u3063\u3066\u3044\u305f\u3002\n\u4e0a\u8a18\u4fee\u6b63\u3092\u3059\u308b\u3053\u3068\u3067bitstream\u4f5c\u6210\u307e\u3067\u6210\u529f\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n"}