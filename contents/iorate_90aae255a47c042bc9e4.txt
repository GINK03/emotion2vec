{"tags": ["C++", "C++14"], "context": "C++14\u3067\u4f7f\u3048\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30fc\u30b5nonsugar\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u305b\u3063\u304b\u304f\u66f8\u3044\u305f\u306e\u3067\u6652\u3057\u307e\u3059\u3002\n\n\u52d5\u6a5f\nC++\u3067\u4f7f\u3048\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30fc\u30b5\u3068\u3057\u3066\u6709\u540d\u3069\u3053\u308d\u306bBoost.Program_options\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d3\u30eb\u30c9\u30fb\u30ea\u30f3\u30af\u304c\u5fc5\u8981\u306a\u306e\u304c\u9762\u5012\u3067\u3059\u3002\n\u30d8\u30c3\u30c0\u30aa\u30f3\u30ea\u30fc\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u63a2\u305b\u3070\u3042\u308a\u307e\u3059\u304c(\u3053\u306e\u3078\u3093\u3068\u304b)\u3001\u500b\u4eba\u7684\u306a\u597d\u307f\u3068\u3057\u3066\u3055\u3089\u306b\u6b21\u306e2\u70b9\u3092\u6c42\u3081\u305f\u3044\u3067\u3059\u3002\n\n\u30e6\u30fc\u30b6\u30fc\u304c\u975econst\u306a\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u306a\u304f\u3066\u3088\u3044\n\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5f15\u6570\u3092\u53d6\u308b\u5834\u5408\u3001\u5f15\u6570\u306e\u578b\u306e\u6307\u5b9a\u306f1\u56de\u3060\u3051\u3067\u3088\u3044(\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5b9a\u7fa9\u6642\u3068\u3001\u5f15\u6570\u306e\u53d6\u5f97\u6642\u306e\u4e21\u65b9\u3067\u578b\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044)\n\n\u305d\u3093\u306a\u308f\u3051\u3067\u81ea\u5206\u3067\u66f8\u304d\u307e\u3057\u305f\u3002\u3042\u3068optparse-declarative\u3068\u304b\u898b\u3066\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u306e\u304b\u3063\u3053\u3044\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u771f\u4f3c\u3057\u307e\u3057\u305f\u3002\n\n\u7279\u5fb4\n\n\u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\n\nchar\u4ee5\u5916\u306e\u6587\u5b57\u578b\u3092\u30b5\u30dd\u30fc\u30c8\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\n\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5f15\u6570\u3068\u3057\u3066\u4efb\u610f\u306e\u578b\u3092\u6307\u5b9a\u53ef\u80fd\n\u30d8\u30eb\u30d7\u306e\u751f\u6210\n\n\n\u4f8b\nBoost.Program_options\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u518d\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3082\u306e\u3067\u3059\u3002\n// compiler.cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <nonsugar.hpp>\nusing namespace nonsugar;\n\nint main(int argc, char *argv[])\ntry {\n    auto const cmd = command<char>(\"compiler\", \"nonsugar example\")\n        .flag<'h'>({}, {\"help\"}, \"produce help message\")\n        .flag<'v'>({'v'}, {\"version\"}, \"print version string\")\n        .flag<'o', int>({}, {\"optimization\"}, \"N\", \"optimization level\")\n        .flag<'I', std::vector<std::string>>({'I'}, {\"include-path\"}, \"PATH\", \"include path\")\n        .argument<'i', std::vector<std::string>>(\"INPUT-FILE\")\n        ;\n    auto const opts = parse(argc, argv, cmd);\n    if (opts.has<'h'>()) {\n        std::cout << usage(cmd);\n        return 0;\n    }\n    if (opts.has<'v'>()) {\n        std::cout << \"compiler, version 1.0\\n\";\n        return 0;\n    }\n    if (opts.has<'o'>()) {\n        std::cout << \"optimization level: \" << opts.get<'o'>() << \"\\n\";\n    }\n    if (opts.has<'I'>()) {\n        std::cout << \"include paths:\";\n        for (auto const &path : opts.get<'I'>()) std::cout << \" \" << path;\n        std::cout << \"\\n\";\n    }\n    std::cout << \"input files:\";\n    for (auto const &file : opts.get<'i'>()) std::cout << \" \" << file;\n    std::cout << \"\\n\";\n} catch (error const &e) {\n    std::cerr << e.message() << \"\\n\";\n    return 1;\n}\n\n$ g++ -std=c++14 -o compiler compiler.cpp\n\n$ ./compiler --help\nUsage: compiler [OPTION...] [INPUT-FILE...]\n  nonsugar example\n\nOptions:\n           --help               produce help message\n  -v       --version            print version string\n           --optimization=N     optimization level\n  -I PATH  --include-path=PATH  include path\n\n$ ./compiler --optimization=4 -I foo a.cpp b.cpp\noptimization level: 4\ninclude paths: foo\ninput files: a.cpp b.cpp\n\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nnonsugar.hpp\u3092\u9069\u5f53\u306a\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4e0b\u3055\u3044\u3002C++14\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u305f\u30b3\u30f3\u30d1\u30a4\u30e9\u306a\u3089\u52d5\u4f5c\u3059\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u4f7f\u3044\u65b9\n1. \u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n// command\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nauto const cmd = command<char>(\"compiler\", \"nonsugar example\")\n  // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u306b\u4f7f\u3046\u578b\u3067\u3059\u3002char\u304c\u7c21\u4fbf\u3067\u3057\u3087\u3046\u3002\n  // \u7b2c1\u5f15\u6570\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u540d\u524d\u3001\u7b2c2\u5f15\u6570\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8aac\u660e\u3067\u3059(\u30aa\u30d7\u30b7\u30e7\u30f3)\u3002\n\n    // flag()\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059(\u65b0\u3057\u3044command\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u8fd4\u308a\u307e\u3059)\u3002\n    // \u5f15\u6570\u3092\u53d6\u3089\u306a\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5834\u5408:\n    .flag<'h'>({'h'}, {\"help\"}, \"produce help message\", true)\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u3067\u3059\u3002\n      // \u7b2c1\u5f15\u6570\u306f\u77ed\u3044\u540d\u524d(-h\u306a\u3069)\u306e\u30ea\u30b9\u30c8\u3001\u7b2c2\u5f15\u6570\u306f\u9577\u3044\u540d\u524d(--help\u306a\u3069)\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002\n      // \u7b2c3\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8aac\u660e\u3067\u3059\u3002\n      // \u7b2c4\u5f15\u6570\u306btrue\u3092\u4e0e\u3048\u308b\u3068\u3001\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u305f\u3068\u304d\u306b\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3084\u5f15\u6570\u3092\u89e3\u6790\u3057\u307e\u305b\u3093\n      // (\u30aa\u30d7\u30b7\u30e7\u30f3)\u3002\n      //   --help\u306a\u3069\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3084\u5f15\u6570\u3092\u4e0d\u8981\u3068\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5834\u5408\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n    // \u5f15\u6570\u3092\u53d6\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5834\u5408:\n    .flag<'o', int>({}, {\"optimization\",\"optimisation\"}, \"N\", \"optimization level\", 10)\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7b2c2\u5f15\u6570\u306b\u3001\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n      //   boost::optional<T>\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u5f15\u6570\u3092\u53d6\u3063\u3066\u3082\u53d6\u3089\u306a\u304f\u3066\u3082\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n      //   std::vector<T>\u306a\u3069\u30b3\u30f3\u30c6\u30ca\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8907\u6570\u56de\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n      // \u7b2c3\u5f15\u6570\u306f\u3001\u5f15\u6570\u306e\u540d\u524d\u3092\u8868\u3059\u6587\u5b57\u5217\u3067\u3059\u3002\n      // \u7b2c5\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059(\u30aa\u30d7\u30b7\u30e7\u30f3)\u3002\n\n    // argument()\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n    .argument<'i', std::vector<std::string>>(\"INPUT-FILE\")\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7b2c1\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u3067\u3059\u3002\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7b2c2\u5f15\u6570\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u306e\u578b\u3067\u3059\u3002\n      //   boost::optional<T>\u3084\u30b3\u30f3\u30c6\u30ca\u578b\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n      // \u7b2c1\u5f15\u6570\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u306e\u540d\u524d\u3092\u8868\u3059\u6587\u5b57\u5217\u3067\u3059\u3002\n    ;\n\n2. \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u89e3\u6790\u3057\u307e\u3059\u3002\ntry {\n    // parse()\u95a2\u6570\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u89e3\u6790\u3057\u307e\u3059\u3002\n    // \u623b\u308a\u5024\u306f\u3001\u89e3\u6790\u3055\u308c\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30de\u30c3\u30d7\u3067\u3059\u3002\n    auto const opts = parse(argc, argv, cmd);\n\n} catch (error const &e) {\n  // \u89e3\u6790\u306b\u5931\u6557\u3059\u308b\u3068\u4f8b\u5916\u304c\u98db\u3073\u307e\u3059\u3002\n\n    // message()\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3001\u30a8\u30e9\u30fc\u306e\u5185\u5bb9\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n    std::cerr << e.message() << \"\\n\";\n}\n\n3. \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30de\u30c3\u30d7\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n// has()\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nif (opts.has<'h'>()) {\n  // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u3067\u3059\u3002\n\n    // usage()\u3067\u30b3\u30de\u30f3\u30c9\u304b\u3089\u30d8\u30eb\u30d7\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n    std::cout << usage(cmd);\n    return 0;\n}\n\nif (opts.has<'o'>()) {\n    // get()\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5f15\u6570\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n    // \u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u304b\u3089\u5f15\u6570\u3092\u53d6\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u672a\u5b9a\u7fa9\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n    int const n = opts.get<'o'>();\n\n    std::cout << \"optimization level: \" << n << \"\\n\";\n}\n\n\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\n1. \u666e\u901a\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n// hello\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\nauto const helloCmd = command<char>(\"subcmd hello\")\n    .argument<'n', std::string>(\"NAME\")\n    ;\n// add\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\nauto const addCmd = command<char>(\"subcmd add\")\n    .argument<'l', int>(\"LHS\")\n    .argument<'r', int>(\"RHS\")\n    ;\n\n2. \u30e1\u30a4\u30f3\u30b3\u30de\u30f3\u30c9\u306b\u4f5c\u6210\u3057\u305f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n// \u30e1\u30a4\u30f3\u30b3\u30de\u30f3\u30c9\nauto const cmd = command<char>(\"subcmd\")\n\n    // subcommand()\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n    .subcommand<'H'>(\"hello\", \"hello command\", helloCmd)\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u3067\u3059\u3002\n      // \u7b2c1\u5f15\u6570\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u540d\u524d\u3001\u7b2c2\u5f15\u6570\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u8aac\u660e\u3067\u3059\u3002\n      // \u7b2c3\u5f15\u6570\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u305d\u306e\u3082\u306e\u3067\u3059\u3002\n\n    .subcommand<'A'>(\"add\", \"add command\", addCmd)\n\n    .flag<'h'>({'h'}, {\"help\"}, \"produce help message\", true)\n    ;\n\n3. \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u30d1\u30fc\u30b9\u3057\u3001\u7d50\u679c\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\nauto const opts = parse(argc, argv, cmd);\n\nif (opts.has<'h'>()) {\n    std::cout << usage(cmd);\n    return 0;\n}\n\n// has()\u3067\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u304c\u6307\u5b9a\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5f97\u307e\u3059\u3002\nif (opts.has<'H'>()) {\n    // get()\u3067\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u30de\u30c3\u30d7\u3092\u5f97\u307e\u3059\u3002\n    auto const helloOpts = opts.get<'H'>();\n\n    std::cout << \"Hello, \" << helloOpts.get<'n'>() << \"!\\n\";\n}\nelse if (opts.has<'A'>()) {\n    auto const addOpts = opts.get<'A'>();\n    std::cout << addOpts.get<'l'>() + addOpts.get<'r'>() << \"\\n\";\n}\n\n4. \u5b9f\u884c\u7d50\u679c\n$ g++ -std=c++14 -o subcmd subcmd.cpp\n\n$ ./subcmd\nsubcmd: command required\n\n$ ./subcmd --help\nUsage: subcmd [OPTION...] COMMAND [ARG...]\n\nOptions:\n  -h  --help  produce help message\n\nCommands:\n  hello  hello command\n  add    add command\n\n$ ./subcmd hello world\nHello, world!\n\n$ ./subcmd add 3 4\n7\n\n\n\u305d\u306e\u4ed6\u306e\u4f7f\u3044\u65b9\nREADME\u3092\u53c2\u7167\u4e0b\u3055\u3044\u3002\n\n\u88dc\u8db3\n\u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u3092\u3059\u308b\u3068\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5730\u7344\u306b\u306a\u308a\u307e\u3059\u3002\nC++14\u3067\u4f7f\u3048\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30fc\u30b5[nonsugar](https://github.com/iorate/nonsugar)\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u305b\u3063\u304b\u304f\u66f8\u3044\u305f\u306e\u3067\u6652\u3057\u307e\u3059\u3002\n\n# \u52d5\u6a5f\nC++\u3067\u4f7f\u3048\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30fc\u30b5\u3068\u3057\u3066\u6709\u540d\u3069\u3053\u308d\u306b[Boost.Program\\_options](http://www.boost.org/doc/libs/1_62_0/doc/html/program_options/tutorial.html)\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d3\u30eb\u30c9\u30fb\u30ea\u30f3\u30af\u304c\u5fc5\u8981\u306a\u306e\u304c\u9762\u5012\u3067\u3059\u3002\n\u30d8\u30c3\u30c0\u30aa\u30f3\u30ea\u30fc\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u63a2\u305b\u3070\u3042\u308a\u307e\u3059\u304c([\u3053\u306e\u3078\u3093](https://gist.github.com/udif/9a14fa6920bde6dfcb196779dc432bcc)\u3068\u304b)\u3001\u500b\u4eba\u7684\u306a\u597d\u307f\u3068\u3057\u3066\u3055\u3089\u306b\u6b21\u306e2\u70b9\u3092\u6c42\u3081\u305f\u3044\u3067\u3059\u3002\n\n- \u30e6\u30fc\u30b6\u30fc\u304c\u975e`const`\u306a\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u306a\u304f\u3066\u3088\u3044\n- \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5f15\u6570\u3092\u53d6\u308b\u5834\u5408\u3001\u5f15\u6570\u306e\u578b\u306e\u6307\u5b9a\u306f1\u56de\u3060\u3051\u3067\u3088\u3044(\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5b9a\u7fa9\u6642\u3068\u3001\u5f15\u6570\u306e\u53d6\u5f97\u6642\u306e\u4e21\u65b9\u3067\u578b\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044)\n\n\u305d\u3093\u306a\u308f\u3051\u3067\u81ea\u5206\u3067\u66f8\u304d\u307e\u3057\u305f\u3002\u3042\u3068[optparse-declarative](http://qiita.com/tanakh/items/b6ea4c65d8ed511ac98d)\u3068\u304b\u898b\u3066\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u306e\u304b\u3063\u3053\u3044\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u771f\u4f3c\u3057\u307e\u3057\u305f\u3002\n\n# \u7279\u5fb4\n- \u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\n- `char`\u4ee5\u5916\u306e\u6587\u5b57\u578b\u3092\u30b5\u30dd\u30fc\u30c8\n- \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\n- \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5f15\u6570\u3068\u3057\u3066\u4efb\u610f\u306e\u578b\u3092\u6307\u5b9a\u53ef\u80fd\n- \u30d8\u30eb\u30d7\u306e\u751f\u6210\n\n# \u4f8b\n[Boost.Program\\_options\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://www.boost.org/doc/libs/1_62_0/doc/html/program_options/tutorial.html)\u3092\u518d\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3082\u306e\u3067\u3059\u3002\n\n```cpp\n// compiler.cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <nonsugar.hpp>\nusing namespace nonsugar;\n\nint main(int argc, char *argv[])\ntry {\n    auto const cmd = command<char>(\"compiler\", \"nonsugar example\")\n        .flag<'h'>({}, {\"help\"}, \"produce help message\")\n        .flag<'v'>({'v'}, {\"version\"}, \"print version string\")\n        .flag<'o', int>({}, {\"optimization\"}, \"N\", \"optimization level\")\n        .flag<'I', std::vector<std::string>>({'I'}, {\"include-path\"}, \"PATH\", \"include path\")\n        .argument<'i', std::vector<std::string>>(\"INPUT-FILE\")\n        ;\n    auto const opts = parse(argc, argv, cmd);\n    if (opts.has<'h'>()) {\n        std::cout << usage(cmd);\n        return 0;\n    }\n    if (opts.has<'v'>()) {\n        std::cout << \"compiler, version 1.0\\n\";\n        return 0;\n    }\n    if (opts.has<'o'>()) {\n        std::cout << \"optimization level: \" << opts.get<'o'>() << \"\\n\";\n    }\n    if (opts.has<'I'>()) {\n        std::cout << \"include paths:\";\n        for (auto const &path : opts.get<'I'>()) std::cout << \" \" << path;\n        std::cout << \"\\n\";\n    }\n    std::cout << \"input files:\";\n    for (auto const &file : opts.get<'i'>()) std::cout << \" \" << file;\n    std::cout << \"\\n\";\n} catch (error const &e) {\n    std::cerr << e.message() << \"\\n\";\n    return 1;\n}\n```\n``` shell\n$ g++ -std=c++14 -o compiler compiler.cpp\n\n$ ./compiler --help\nUsage: compiler [OPTION...] [INPUT-FILE...]\n  nonsugar example\n\nOptions:\n           --help               produce help message\n  -v       --version            print version string\n           --optimization=N     optimization level\n  -I PATH  --include-path=PATH  include path\n\n$ ./compiler --optimization=4 -I foo a.cpp b.cpp\noptimization level: 4\ninclude paths: foo\ninput files: a.cpp b.cpp\n```\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n`nonsugar.hpp`\u3092\u9069\u5f53\u306a\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4e0b\u3055\u3044\u3002C++14\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u305f\u30b3\u30f3\u30d1\u30a4\u30e9\u306a\u3089\u52d5\u4f5c\u3059\u308b\u306f\u305a\u3067\u3059\u3002\n\n# \u4f7f\u3044\u65b9\n1\\. \u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```cpp\n// command\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nauto const cmd = command<char>(\"compiler\", \"nonsugar example\")\n  // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u306b\u4f7f\u3046\u578b\u3067\u3059\u3002char\u304c\u7c21\u4fbf\u3067\u3057\u3087\u3046\u3002\n  // \u7b2c1\u5f15\u6570\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u540d\u524d\u3001\u7b2c2\u5f15\u6570\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8aac\u660e\u3067\u3059(\u30aa\u30d7\u30b7\u30e7\u30f3)\u3002\n\n    // flag()\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059(\u65b0\u3057\u3044command\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u8fd4\u308a\u307e\u3059)\u3002\n    // \u5f15\u6570\u3092\u53d6\u3089\u306a\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5834\u5408:\n    .flag<'h'>({'h'}, {\"help\"}, \"produce help message\", true)\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u3067\u3059\u3002\n      // \u7b2c1\u5f15\u6570\u306f\u77ed\u3044\u540d\u524d(-h\u306a\u3069)\u306e\u30ea\u30b9\u30c8\u3001\u7b2c2\u5f15\u6570\u306f\u9577\u3044\u540d\u524d(--help\u306a\u3069)\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002\n      // \u7b2c3\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8aac\u660e\u3067\u3059\u3002\n      // \u7b2c4\u5f15\u6570\u306btrue\u3092\u4e0e\u3048\u308b\u3068\u3001\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u305f\u3068\u304d\u306b\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3084\u5f15\u6570\u3092\u89e3\u6790\u3057\u307e\u305b\u3093\n      // (\u30aa\u30d7\u30b7\u30e7\u30f3)\u3002\n      //   --help\u306a\u3069\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3084\u5f15\u6570\u3092\u4e0d\u8981\u3068\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5834\u5408\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n    // \u5f15\u6570\u3092\u53d6\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5834\u5408:\n    .flag<'o', int>({}, {\"optimization\",\"optimisation\"}, \"N\", \"optimization level\", 10)\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7b2c2\u5f15\u6570\u306b\u3001\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n      //   boost::optional<T>\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u5f15\u6570\u3092\u53d6\u3063\u3066\u3082\u53d6\u3089\u306a\u304f\u3066\u3082\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n      //   std::vector<T>\u306a\u3069\u30b3\u30f3\u30c6\u30ca\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8907\u6570\u56de\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n      // \u7b2c3\u5f15\u6570\u306f\u3001\u5f15\u6570\u306e\u540d\u524d\u3092\u8868\u3059\u6587\u5b57\u5217\u3067\u3059\u3002\n      // \u7b2c5\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059(\u30aa\u30d7\u30b7\u30e7\u30f3)\u3002\n\n    // argument()\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n    .argument<'i', std::vector<std::string>>(\"INPUT-FILE\")\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7b2c1\u5f15\u6570\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u3067\u3059\u3002\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7b2c2\u5f15\u6570\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u306e\u578b\u3067\u3059\u3002\n      //   boost::optional<T>\u3084\u30b3\u30f3\u30c6\u30ca\u578b\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n      // \u7b2c1\u5f15\u6570\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5f15\u6570\u306e\u540d\u524d\u3092\u8868\u3059\u6587\u5b57\u5217\u3067\u3059\u3002\n    ;\n```\n2\\. \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u89e3\u6790\u3057\u307e\u3059\u3002\n\n```cpp\ntry {\n    // parse()\u95a2\u6570\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u89e3\u6790\u3057\u307e\u3059\u3002\n    // \u623b\u308a\u5024\u306f\u3001\u89e3\u6790\u3055\u308c\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30de\u30c3\u30d7\u3067\u3059\u3002\n    auto const opts = parse(argc, argv, cmd);\n\n} catch (error const &e) {\n  // \u89e3\u6790\u306b\u5931\u6557\u3059\u308b\u3068\u4f8b\u5916\u304c\u98db\u3073\u307e\u3059\u3002\n\n    // message()\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3001\u30a8\u30e9\u30fc\u306e\u5185\u5bb9\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n    std::cerr << e.message() << \"\\n\";\n}\n```\n3\\. \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30de\u30c3\u30d7\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n\n```cpp\n// has()\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nif (opts.has<'h'>()) {\n  // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u3067\u3059\u3002\n\n    // usage()\u3067\u30b3\u30de\u30f3\u30c9\u304b\u3089\u30d8\u30eb\u30d7\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n    std::cout << usage(cmd);\n    return 0;\n}\n\nif (opts.has<'o'>()) {\n    // get()\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5f15\u6570\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n    // \u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u304b\u3089\u5f15\u6570\u3092\u53d6\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u672a\u5b9a\u7fa9\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n    int const n = opts.get<'o'>();\n\n    std::cout << \"optimization level: \" << n << \"\\n\";\n}\n```\n\n# \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\n1\\. \u666e\u901a\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```cpp\n// hello\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\nauto const helloCmd = command<char>(\"subcmd hello\")\n    .argument<'n', std::string>(\"NAME\")\n    ;\n// add\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\nauto const addCmd = command<char>(\"subcmd add\")\n    .argument<'l', int>(\"LHS\")\n    .argument<'r', int>(\"RHS\")\n    ;\n```\n2\\. \u30e1\u30a4\u30f3\u30b3\u30de\u30f3\u30c9\u306b\u4f5c\u6210\u3057\u305f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```cpp\n// \u30e1\u30a4\u30f3\u30b3\u30de\u30f3\u30c9\nauto const cmd = command<char>(\"subcmd\")\n\n    // subcommand()\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n    .subcommand<'H'>(\"hello\", \"hello command\", helloCmd)\n      // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8b58\u5225\u5b50\u3067\u3059\u3002\n      // \u7b2c1\u5f15\u6570\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u540d\u524d\u3001\u7b2c2\u5f15\u6570\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u8aac\u660e\u3067\u3059\u3002\n      // \u7b2c3\u5f15\u6570\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u305d\u306e\u3082\u306e\u3067\u3059\u3002\n\n    .subcommand<'A'>(\"add\", \"add command\", addCmd)\n\n    .flag<'h'>({'h'}, {\"help\"}, \"produce help message\", true)\n    ;\n```\n3\\. \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u30d1\u30fc\u30b9\u3057\u3001\u7d50\u679c\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n\n```cpp\nauto const opts = parse(argc, argv, cmd);\n\nif (opts.has<'h'>()) {\n    std::cout << usage(cmd);\n    return 0;\n}\n\n// has()\u3067\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u304c\u6307\u5b9a\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5f97\u307e\u3059\u3002\nif (opts.has<'H'>()) {\n    // get()\u3067\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u30de\u30c3\u30d7\u3092\u5f97\u307e\u3059\u3002\n    auto const helloOpts = opts.get<'H'>();\n\n    std::cout << \"Hello, \" << helloOpts.get<'n'>() << \"!\\n\";\n}\nelse if (opts.has<'A'>()) {\n    auto const addOpts = opts.get<'A'>();\n    std::cout << addOpts.get<'l'>() + addOpts.get<'r'>() << \"\\n\";\n}\n```\n4\\. \u5b9f\u884c\u7d50\u679c\n\n``` shell\n$ g++ -std=c++14 -o subcmd subcmd.cpp\n\n$ ./subcmd\nsubcmd: command required\n\n$ ./subcmd --help\nUsage: subcmd [OPTION...] COMMAND [ARG...]\n\nOptions:\n  -h  --help  produce help message\n\nCommands:\n  hello  hello command\n  add    add command\n\n$ ./subcmd hello world\nHello, world!\n\n$ ./subcmd add 3 4\n7\n```\n\n# \u305d\u306e\u4ed6\u306e\u4f7f\u3044\u65b9\n[README](https://github.com/iorate/nonsugar/blob/master/README.md)\u3092\u53c2\u7167\u4e0b\u3055\u3044\u3002\n\n# \u88dc\u8db3\n\u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u3092\u3059\u308b\u3068\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5730\u7344\u306b\u306a\u308a\u307e\u3059\u3002\n"}