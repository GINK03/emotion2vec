{"tags": ["OpenFOAM", "foam-extend", "Parallel", "\u4e26\u5217\u8a08\u7b97"], "context": "\n\nPstream\n\n\u53c2\u8003\u30ea\u30f3\u30af\nOpenFOAM C++ Documentation : Pstream\n\n\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\n\nPstream::nProcs() : \u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u6570\nPstream::myProcNo() : \u81ea\u8eab\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fcID\nPstream::blocking, scheduled, nonBlocking : \u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u9593\u306e\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u65b9\u6cd5\nPstream::parRun() : \u4e26\u5217\u8a08\u7b97\u306a\u3089\u3070true\u3092\u8fd4\u3059\u3002\n\n\u306a\u3069\n\nOPstream\u3068IPstream\n\n\u53c2\u8003\u30ea\u30f3\u30af\nOpenFOAM C++ Documentation : OPstream\nOpenFOAM C++ Documentation : IPstream\n\n\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\nOPstream(const commsType, const int toProcNo, const label bufSize, ...)\nIPstream(const commsType, const int fromProcNo, const label bufSize, ...)\n\n\n\u4f7f\u3044\u65b9\u306e\u4f8b\nOpenFOAM\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u308c\u3070application/test/parallel\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ngithub: OpenFOAM-2.1.x/applications/test/parallel/Test-parallel.C\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u4f7f\u3044\u65b9\u3002\nlabelList sizes(Pstream::nProcs(), 0);             // \u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u6570\u3068\u540c\u30b5\u30a4\u30ba\u306elabelList\u3092\u4f5c\u6210\u30570\u3067\u521d\u671f\u5316\nsizes[Pstream::myProcNo()] = Pstream::myProcNo();  // \u81ea\u8eab\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u756a\u53f7\u3092\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u756a\u53f7\u3068\u540c\u3058\u756a\u5730\u306b\u4ee3\u5165\n\nif (Pstream::parRun())\n{\n    // \u30c7\u30fc\u30bf\u9001\u4fe1\n    for (label procI = 0; procI < Pstream::nProcs(); procI++)\n    {\n        if (procI != Pstream::myProcNo()\n        {\n            OPstream toProc(Pstream::blocking, procI);\n            toProc << sizes[Pstream::myProcNo()];   // \u81ea\u8eab\u306e\u30c7\u30fc\u30bf\u3092\u4ed6\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u306b\u9001\u308b\n        }\n    }\n\n\n    // \u30c7\u30fc\u30bf\u53d7\u4fe1\n    for (label procI = 0; procI < Pstream::nProcs(); procI++)\n    {\n        if (procI != Pstream::myProcNo()\n        {\n            IPstream fromProc(Pstream::blocking, procI);\n            fromProc >> sizes[procI];              // \u4ed6\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1 \n        }\n    }\n}\n\n\nReduce Operation\n\n\u53c2\u8003\u30ea\u30f3\u30af\nOpenFOAM C++ Documentation : PstreamReduceOps\nOpenFOAM C++ Documentation : PstreamCombineReduceOps\n\nvoid reduce(T& value, const BinaryOp& bop, ...)\nvoid returnReduce(T& value, const BinaryOp& bop, ...)\nvoid combineReduce(T& value, const CombineOp& cop, ...)\n\n\u306a\u3069\u3002\nBinaryOp\u306fOpenFOAM\u304c\u7528\u610f\u3057\u3066\u3044\u308b\u4e26\u5217\u8a08\u7b97\u7528\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\nOpenFOAM C++ Documentation : ops.H\n\u3092\u4f7f\u7528\u3059\u308b\u3002\n\nsumOp<T>()\nmaxOp<T>()\nminOp<T>()\nandEqOp<T>()\n\n\u306a\u3069\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\ncombineReduce\u306fList\u5c02\u7528\u306ereduce\u95a2\u6570\u3067\u3001combineOp\u306fUPstream::listEq()\u306e\u307f\u4f7f\u7528\u3067\u304d\u308b\u3002List >\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3002\u305f\u3060\u3057foam-extend\u306b\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u3002\nOpenFOAM C++ Documentation : UPstream.H\n\nsyncTools\n\n\u53c2\u8003\u30ea\u30f3\u30af\nOpenFOAM C++ Documentation: syncTools Class Reference\n\n\u8aac\u660e\nsyncTools\u306f\u5404\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u306e\u30e1\u30c3\u30b7\u30e5\u306epoint, edge, face, cell\u306e\u3046\u3061\u3001processorPolyPatch\u4e0a\u306e\u3082\u306e\u3092\u540c\u671f\u3055\u305b\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u30c4\u30fc\u30eb\u3067\u3059\u3002\n# Pstream\n\n## \u53c2\u8003\u30ea\u30f3\u30af\n\n[OpenFOAM C++ Documentation : Pstream](http://www.openfoam.com/documentation/cpp-guide/html/a02100.html)\n\n## \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\n\n- Pstream::nProcs() : \u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u6570\n- Pstream::myProcNo() : \u81ea\u8eab\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fcID\n- Pstream::blocking, scheduled, nonBlocking : \u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u9593\u306e\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u65b9\u6cd5\n- Pstream::parRun() : \u4e26\u5217\u8a08\u7b97\u306a\u3089\u3070true\u3092\u8fd4\u3059\u3002\n\n\u306a\u3069\n\n# OPstream\u3068IPstream\n\n## \u53c2\u8003\u30ea\u30f3\u30af\n\n[OpenFOAM C++ Documentation : OPstream](http://www.openfoam.com/documentation/cpp-guide/html/a01785.html)\n[OpenFOAM C++ Documentation : IPstream](http://www.openfoam.com/documentation/cpp-guide/html/a01240.html)\n\n## \u30e1\u30f3\u30d0\u30fc\u95a2\u6570\n\n### \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n- OPstream(const commsType, const int toProcNo, const label bufSize, ...)\n- IPstream(const commsType, const int fromProcNo, const label bufSize, ...)\n\n### \u4f7f\u3044\u65b9\u306e\u4f8b\n\nOpenFOAM\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u308c\u3070application/test/parallel\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n[github: OpenFOAM-2.1.x/applications/test/parallel/Test-parallel.C](https://github.com/OpenFOAM/OpenFOAM-2.1.x/blob/master/applications/test/parallel/Test-parallel.C)\n\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u4f7f\u3044\u65b9\u3002\n\n```cpp\nlabelList sizes(Pstream::nProcs(), 0);             // \u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u6570\u3068\u540c\u30b5\u30a4\u30ba\u306elabelList\u3092\u4f5c\u6210\u30570\u3067\u521d\u671f\u5316\nsizes[Pstream::myProcNo()] = Pstream::myProcNo();  // \u81ea\u8eab\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u756a\u53f7\u3092\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u756a\u53f7\u3068\u540c\u3058\u756a\u5730\u306b\u4ee3\u5165\n\nif (Pstream::parRun())\n{\n    // \u30c7\u30fc\u30bf\u9001\u4fe1\n    for (label procI = 0; procI < Pstream::nProcs(); procI++)\n    {\n        if (procI != Pstream::myProcNo()\n        {\n            OPstream toProc(Pstream::blocking, procI);\n            toProc << sizes[Pstream::myProcNo()];   // \u81ea\u8eab\u306e\u30c7\u30fc\u30bf\u3092\u4ed6\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u306b\u9001\u308b\n        }\n    }\n\n\n    // \u30c7\u30fc\u30bf\u53d7\u4fe1\n    for (label procI = 0; procI < Pstream::nProcs(); procI++)\n    {\n        if (procI != Pstream::myProcNo()\n        {\n            IPstream fromProc(Pstream::blocking, procI);\n            fromProc >> sizes[procI];              // \u4ed6\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1 \n        }\n    }\n}\n```\n\n# Reduce Operation\n\n## \u53c2\u8003\u30ea\u30f3\u30af\n\n[OpenFOAM C++ Documentation : PstreamReduceOps](http://www.openfoam.com/documentation/cpp-guide/html/a08023.html)\n[OpenFOAM C++ Documentation : PstreamCombineReduceOps](http://www.openfoam.com/documentation/cpp-guide/html/a08246_source.html)\n\n- void reduce(T& value, const BinaryOp& bop, ...)\n- void returnReduce(T& value, const BinaryOp& bop, ...)\n- void combineReduce(T& value, const CombineOp& cop, ...)\n\n\n\u306a\u3069\u3002\n\nBinaryOp\u306fOpenFOAM\u304c\u7528\u610f\u3057\u3066\u3044\u308b\u4e26\u5217\u8a08\u7b97\u7528\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\n[OpenFOAM C++ Documentation : ops.H](http://www.openfoam.com/documentation/cpp-guide/html/a09141.html)\n\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n- sumOp\\<T>()\n- maxOp\\<T>()\n- minOp\\<T>()\n- andEqOp\\<T>()\n\n\u306a\u3069\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\ncombineReduce\u306fList\u5c02\u7528\u306ereduce\u95a2\u6570\u3067\u3001combineOp\u306fUPstream::listEq()\u306e\u307f\u4f7f\u7528\u3067\u304d\u308b\u3002List<List<T> >\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3002\u305f\u3060\u3057foam-extend\u306b\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n[OpenFOAM C++ Documentation : UPstream.H](http://www.openfoam.com/documentation/cpp-guide/html/a08255_source.html)\n\n\n# syncTools\n\n## \u53c2\u8003\u30ea\u30f3\u30af\n\n[OpenFOAM C++ Documentation: syncTools Class Reference](http://cpp.openfoam.org/v4/a02631.html)\n\n## \u8aac\u660e\n\nsyncTools\u306f\u5404\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u306e\u30e1\u30c3\u30b7\u30e5\u306epoint, edge, face, cell\u306e\u3046\u3061\u3001processorPolyPatch\u4e0a\u306e\u3082\u306e\u3092\u540c\u671f\u3055\u305b\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u30c4\u30fc\u30eb\u3067\u3059\u3002\n"}