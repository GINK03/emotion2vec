{"context": "\u5e7e\u4f55\u306f\u304d\u3064\u3044\u306e\u3067\u3059\u3088>_<\n\u307e\u3042\u3001\u5e73\u9762\u56f3\u5f62\u306f\u7a7a\u9593\u56f3\u5f62\u3088\u308a\u306f\u307e\u3057\u3067\u3059\u304c\u3002\n\n\u524d\u63d0\n\n\u307e\u305a\u3001\u67a0\u3054\u3068\u306b\u8fba\u3092\u5272\u308a\u632f\u308b(mapping)\u3002\u3053\u306e\u3068\u304d\u3001\u53cd\u6642\u8a08\u56de\u308a\u306b\u7e4b\u304c\u308b\u3088\u3046\u306b\u6ce8\u610f\u3059\u308b\u3002\n1a\u306f[[0,0],[1,0],[2,0],[3,0],[2,19],[1,19],[0,0]].each_cons(2).to_a\u3068\u306a\u308b\u3002\n\n\n\u6700\u521d\u306e\u65b9\u91dd\n\n\u91cd\u8907\u3057\u3066\u3044\u308b\u8fba\u3092\u53d6\u308a\u9664\u304f\u3002\n\u6b8b\u3063\u305f\u8fba\u306b\u3064\u3044\u3066\u9589\u8def\u3092\u691c\u51fa\u3059\u308b\u3002\u8fba\u81ea\u4f53\u304c\u53cd\u6642\u8a08\u56de\u308a\u3068\u3044\u3046\u60c5\u5831\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8fba\u306e\u96c6\u5408\u306e\u524d\u5074(edges[i][0])\u3060\u3051\u898b\u308c\u3070\u826f\u3044\u3002\n\u305d\u308c\u305e\u308c\u306e\u9589\u8def\u306b\u3064\u3044\u3066\u3001x,y\u5ea7\u6a19\u3092\u7b97\u51fa\u3057\u3001\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3001\u96a3\u63a5\u3057\u305f\u30d9\u30af\u30c8\u30eb\u306e\u5916\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u3002\u5916\u7a4d\u304c\u6b63\u306a\u3089180\u00b0\u672a\u6e80\u306e\u9802\u70b9\u3067\u3042\u308b\u3002\n\n\n\u920d\u89d2\u30fb\u92ed\u89d2\u3067\u306f\u306a\u304f\u51f8\u304b\u51f9\u304b\u306a\u306e\u3067\u5185\u7a4d\u3067\u306f\u306a\u304f\u5916\u7a4d\u3002\n\n\n\u30c9\u30fc\u30ca\u30c4\u578b\u306e\u5834\u5408\u3001\u5185\u5074\u306e\u9589\u8def\u304c\u691c\u51fa\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308b\u3002\u3057\u304b\u3057\u3001 \u3053\u306e\u9589\u8def\u306f\u6642\u8a08\u56de\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u5916\u7a4d\u306e\u7b26\u53f7\u306f\u9006\u306b\u306a\u308b\u3002\u5916\u7a4d\u304c\u6b63\u306e\u500b\u6570\u3092\u6570\u3048\u308c\u3070\u3088\u3044\u306e\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3042\u308b\u3002\n\n\n\u65b0\u3057\u3044\u65b9\u91dd\n\n\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3051\u306e\u3082\u306e\u309260\u5206\u3067\u305d\u306e\u5834\u3067\u5b9f\u88c5\u3067\u304d\u308b\u306f\u305a\u306f\u306a\u3044\u3002\u3042\u304f\u307e\u3067\u5e30\u5b85\u5f8c\u306e\u6e05\u66f8\u3067\u3042\u308b\u3002\n\u30ed\u30b9\u30bf\u30a4\u30e0\u4e2d\u306b\u3001 \u9802\u70b9\u6570\u304c1\u500b\u306a\u3089\u3070\u63a1\u7528\u3059\u3079\u304d\u9802\u70b9\u3067\u3042\u308b \u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\u8a00\u3044\u63db\u3048\u308c\u3070\u3001\u4f38\u3073\u3066\u3044\u308b\u8fba\u304c2\u672c\u3001\u3067\u3042\u308b\u3002\n\u305f\u3060\u3057\u300100\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u4e00\u756a\u5185\u5074\u306e\u9802\u70b9\u3092\u9664\u3051\u3070\u826f\u3044\u3002\n\n\n\u30b3\u30fc\u30c9\n\u6e05\u66f8\u542b\u307f\u307e\u3059\u3002\u5909\u6570\u540d\u3082\u591a\u5c11\u307e\u3068\u3082\u306b\u3002\n\ntyama_henae03.rb\n#!/usr/bin/ruby\n#http://qiita.com/Nabetani/items/b8bf742d278c6cf501aa\n#http://nabetani.sakura.ne.jp/hena/orde03nofconv/\n\nD=[0,1,1,0,0,1,1,0,0,1]\nVertex=D.each.with_index(1).map{|e,r|\n    20.times.map{|i|Complex(r*Math.cos(-(2*i+e)*Math::PI/20),r*Math.sin(-(2*i+e)*Math::PI/20))}\n}\ndef mapping(s)\n    if s=='00'\n        (20.times.flat_map{|i|[[0,i],[1,i]]}+[[0,0]]).each_cons(2).map(&:reverse)\n    else\n        n,m=s[0].to_i-1,s[1].ord-97\n        f=n%2\n        [\n            [n*2,(m+n/2)%20],\n            [n*2+1,(m+n/2+f)%20],\n            [n*2+2,(m+n/2+f)%20],\n            [n*2+3,(m+n/2)%20],\n            [n*2+2,(m+n/2-(f^1))%20],\n            [n*2+1,(m+n/2-(f^1))%20],\n            [n*2,(m+n/2)%20]\n        ].each_cons(2).to_a\n    end\nend\n\nSTDOUT.sync=true\nwhile gets\n    data=$_.chomp.scan(/../)\n    if false #\u3069\u3061\u3089\u3067\u3082\u901a\u308a\u307e\u3059\n        h=Hash.new(0)\n        edges=data.flat_map{|e|mapping(e)}\n        edges.map(&:sort).each{|e|e.each{|f|h[f]+=1}}\n        r=h.select{|k,v|v==2}.map(&:first)\n        if data.include?('00')\n            r.reject!{|x,y|x==0}\n        end\n        p r.size\n    else\n        h=Hash.new{|h,k|h[k]=[]}\n        data.flat_map{|e|mapping(e)}.each{|e|h[e.sort]<< e}\n        edges=h.select{|k,v|v.size==1}.flat_map(&:last)\n        r=0\n        while !edges.empty?\n            cycle=[edges.shift]\n            while cycle.last[1]!=cycle.first[0]\n                edges.size.times{|i|\n                    if edges[i][0]==cycle.last[1]\n                        cycle<<edges[i]\n                        edges.delete_at(i)\n                        break\n                    end\n                }\n            end\n            cycle=cycle.map{|e|e.map{|n,m|Vertex[n][m]}}.map{|e,f|\n                f-e\n            }\n            r+=cycle.size.times.count{|i|\n                # \u5916\u7a4d\u3092\u624b\u65e9\u304f\u8a08\u7b97\u3057\u305f\u304f\u3066Complex\u306b\u3057\u305f\n                (cycle[i].conj*cycle[(i+1)%cycle.size]).imag>0\n            }\n        end\n        p r\n    end\nend\n\n\n\n\u5e7e\u4f55\u306f\u304d\u3064\u3044\u306e\u3067\u3059\u3088>_<\n\u307e\u3042\u3001\u5e73\u9762\u56f3\u5f62\u306f\u7a7a\u9593\u56f3\u5f62\u3088\u308a\u306f\u307e\u3057\u3067\u3059\u304c\u3002\n\n## \u524d\u63d0\n- \u307e\u305a\u3001\u67a0\u3054\u3068\u306b\u8fba\u3092\u5272\u308a\u632f\u308b(mapping)\u3002\u3053\u306e\u3068\u304d\u3001\u53cd\u6642\u8a08\u56de\u308a\u306b\u7e4b\u304c\u308b\u3088\u3046\u306b\u6ce8\u610f\u3059\u308b\u3002\n- 1a\u306f`[[0,0],[1,0],[2,0],[3,0],[2,19],[1,19],[0,0]].each_cons(2).to_a`\u3068\u306a\u308b\u3002\n\n## \u6700\u521d\u306e\u65b9\u91dd\n- \u91cd\u8907\u3057\u3066\u3044\u308b\u8fba\u3092\u53d6\u308a\u9664\u304f\u3002\n- \u6b8b\u3063\u305f\u8fba\u306b\u3064\u3044\u3066\u9589\u8def\u3092\u691c\u51fa\u3059\u308b\u3002\u8fba\u81ea\u4f53\u304c\u53cd\u6642\u8a08\u56de\u308a\u3068\u3044\u3046\u60c5\u5831\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8fba\u306e\u96c6\u5408\u306e\u524d\u5074(edges[i][0])\u3060\u3051\u898b\u308c\u3070\u826f\u3044\u3002\n- \u305d\u308c\u305e\u308c\u306e\u9589\u8def\u306b\u3064\u3044\u3066\u3001x,y\u5ea7\u6a19\u3092\u7b97\u51fa\u3057\u3001\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3001\u96a3\u63a5\u3057\u305f\u30d9\u30af\u30c8\u30eb\u306e\u5916\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u3002\u5916\u7a4d\u304c\u6b63\u306a\u3089180\u00b0\u672a\u6e80\u306e\u9802\u70b9\u3067\u3042\u308b\u3002\n  - \u920d\u89d2\u30fb\u92ed\u89d2\u3067\u306f\u306a\u304f\u51f8\u304b\u51f9\u304b\u306a\u306e\u3067\u5185\u7a4d\u3067\u306f\u306a\u304f\u5916\u7a4d\u3002\n- \u30c9\u30fc\u30ca\u30c4\u578b\u306e\u5834\u5408\u3001\u5185\u5074\u306e\u9589\u8def\u304c\u691c\u51fa\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308b\u3002\u3057\u304b\u3057\u3001 **\u3053\u306e\u9589\u8def\u306f\u6642\u8a08\u56de\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3002** \u3057\u305f\u304c\u3063\u3066\u3001\u5916\u7a4d\u306e\u7b26\u53f7\u306f\u9006\u306b\u306a\u308b\u3002\u5916\u7a4d\u304c\u6b63\u306e\u500b\u6570\u3092\u6570\u3048\u308c\u3070\u3088\u3044\u306e\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3042\u308b\u3002\n\n## \u65b0\u3057\u3044\u65b9\u91dd\n- \u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3051\u306e\u3082\u306e\u309260\u5206\u3067\u305d\u306e\u5834\u3067\u5b9f\u88c5\u3067\u304d\u308b\u306f\u305a\u306f\u306a\u3044\u3002\u3042\u304f\u307e\u3067\u5e30\u5b85\u5f8c\u306e\u6e05\u66f8\u3067\u3042\u308b\u3002\n- \u30ed\u30b9\u30bf\u30a4\u30e0\u4e2d\u306b\u3001 **\u9802\u70b9\u6570\u304c1\u500b\u306a\u3089\u3070\u63a1\u7528\u3059\u3079\u304d\u9802\u70b9\u3067\u3042\u308b** \u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\u8a00\u3044\u63db\u3048\u308c\u3070\u3001\u4f38\u3073\u3066\u3044\u308b\u8fba\u304c2\u672c\u3001\u3067\u3042\u308b\u3002\n- \u305f\u3060\u3057\u300100\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u4e00\u756a\u5185\u5074\u306e\u9802\u70b9\u3092\u9664\u3051\u3070\u826f\u3044\u3002\n\n## \u30b3\u30fc\u30c9\n\u6e05\u66f8\u542b\u307f\u307e\u3059\u3002\u5909\u6570\u540d\u3082\u591a\u5c11\u307e\u3068\u3082\u306b\u3002\n\n```rb:tyama_henae03.rb\n#!/usr/bin/ruby\n#http://qiita.com/Nabetani/items/b8bf742d278c6cf501aa\n#http://nabetani.sakura.ne.jp/hena/orde03nofconv/\n\nD=[0,1,1,0,0,1,1,0,0,1]\nVertex=D.each.with_index(1).map{|e,r|\n\t20.times.map{|i|Complex(r*Math.cos(-(2*i+e)*Math::PI/20),r*Math.sin(-(2*i+e)*Math::PI/20))}\n}\ndef mapping(s)\n\tif s=='00'\n\t\t(20.times.flat_map{|i|[[0,i],[1,i]]}+[[0,0]]).each_cons(2).map(&:reverse)\n\telse\n\t\tn,m=s[0].to_i-1,s[1].ord-97\n\t\tf=n%2\n\t\t[\n\t\t\t[n*2,(m+n/2)%20],\n\t\t\t[n*2+1,(m+n/2+f)%20],\n\t\t\t[n*2+2,(m+n/2+f)%20],\n\t\t\t[n*2+3,(m+n/2)%20],\n\t\t\t[n*2+2,(m+n/2-(f^1))%20],\n\t\t\t[n*2+1,(m+n/2-(f^1))%20],\n\t\t\t[n*2,(m+n/2)%20]\n\t\t].each_cons(2).to_a\n\tend\nend\n\nSTDOUT.sync=true\nwhile gets\n\tdata=$_.chomp.scan(/../)\n\tif false #\u3069\u3061\u3089\u3067\u3082\u901a\u308a\u307e\u3059\n\t\th=Hash.new(0)\n\t\tedges=data.flat_map{|e|mapping(e)}\n\t\tedges.map(&:sort).each{|e|e.each{|f|h[f]+=1}}\n\t\tr=h.select{|k,v|v==2}.map(&:first)\n\t\tif data.include?('00')\n\t\t\tr.reject!{|x,y|x==0}\n\t\tend\n\t\tp r.size\n\telse\n\t\th=Hash.new{|h,k|h[k]=[]}\n\t\tdata.flat_map{|e|mapping(e)}.each{|e|h[e.sort]<< e}\n\t\tedges=h.select{|k,v|v.size==1}.flat_map(&:last)\n\t\tr=0\n\t\twhile !edges.empty?\n\t\t\tcycle=[edges.shift]\n\t\t\twhile cycle.last[1]!=cycle.first[0]\n\t\t\t\tedges.size.times{|i|\n\t\t\t\t\tif edges[i][0]==cycle.last[1]\n\t\t\t\t\t\tcycle<<edges[i]\n\t\t\t\t\t\tedges.delete_at(i)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\t}\n\t\t\tend\n\t\t\tcycle=cycle.map{|e|e.map{|n,m|Vertex[n][m]}}.map{|e,f|\n\t\t\t\tf-e\n\t\t\t}\n\t\t\tr+=cycle.size.times.count{|i|\n\t\t\t\t# \u5916\u7a4d\u3092\u624b\u65e9\u304f\u8a08\u7b97\u3057\u305f\u304f\u3066Complex\u306b\u3057\u305f\n\t\t\t\t(cycle[i].conj*cycle[(i+1)%cycle.size]).imag>0\n\t\t\t}\n\t\tend\n\t\tp r\n\tend\nend\n```\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Ruby"]}