{"context": " More than 1 year has passed since last update.git push \u7b49\u306b\u3088\u308b GitHub \u304b\u3089\u306e HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3059\u308b\u305f\u3081\u306b\u306f\u3001GitHub WebHooks \u3092\u5229\u7528\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f GitHub \u304b\u3089\u898b\u3048\u308b\u30b5\u30fc\u30d0\u4e0a\u306b\u8a2d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u4eca\u56de\u306f\u3001GitHub \u304b\u3089\u76f4\u63a5 HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3067\u304d\u306a\u3044 LAN \u5185\u306e Drone \u306b\u3001GitHub \u304b\u3089\u9001\u4fe1\u3055\u308c\u305f HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3055\u305b\u3066\u307f\u307e\u3057\u305f\n\n\u69cb\u6210\n\nGitHub \u304b\u3089\u306e POST \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3001EC2 \u4e0a\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u53d7\u4fe1\u3057\u3066\u3001\nMQTT as a Service sango \u306b POST \u30ea\u30af\u30a8\u30b9\u30c8\u3092 PUBLISH \u3059\u308b\u3053\u3068\u3067\u3001\nLAN \u5185\u306e MQTT Subscriber \u306b GitHub \u304b\u3089\u306e POST \u30ea\u30af\u30a8\u30b9\u30c8\u304c\u9001\u3089\u308c\u3001\n\u3055\u3089\u306b\u3001MQTT Subscriber \u306f\u53d7\u4fe1\u3057\u305f POST \u30ea\u30af\u30a8\u30b9\u30c8\u3092 Drone \u306b\u9001\u308a\u307e\u3059\n\nEC2\nGitHub \u304b\u3089\u306e POST \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3057\u3066\u3001\u305d\u306e\u307e\u307e sango \u306b PUBLISH \u3057\u307e\u3059\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u9069\u5f53\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u6e96\u5099\u3057\u307e\u3059\nrequire 'socket'\nrequire 'mqtt'\n\nsango_host = ''\nsango_port = 1883\nusername = ''\npassword = ''\ntopic = [username, 'github'].join('/')\n\nSocket.tcp_server_loop('0.0.0.0', 80) do |sock, addr|\n  payload = ''\n  length = nil\n\n  loop do\n    buffer = sock.recv(1024)\n    break if buffer == 0\n\n    payload += buffer\n\n    if length\n       body = payload.split(\"\\r\\n\\r\\n\")[1]\n       if body\n         break if body.length == length.to_i\n       end\n    else\n      if payload =~ /content-length:\\s(\\d+)\\r\\n/i\n        length = $1\n      end\n    end\n  end\n\n  client = MQTT::Client.connect(\n    :host => sango_host,\n    :port => sango_port,\n    :ssl => false,\n    :username => username,\n    :password => password\n  )\n  client.publish(topic, payload)\n\n  sock.write(\"HTTP/1.1 200 OK\\r\\n\\r\\n\")\n  sock.close\nend\n\n\nLAN\n\nMQTT Subscriber\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3001\u3042\u3089\u304b\u3058\u3081 sango \u306b SUBSCRIBE \u3057\u3066\u304a\u304d\u307e\u3059\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001\u305d\u306e\u307e\u307e Drone \u306b\u9001\u4fe1\u3055\u308c\u307e\u3059\nrequire 'socket'\nrequire 'mqtt'\n\ndrone_host = '127.0.0.1'\ndrone port = 80\nsango_host = ''\nsango_port = 1883\nusername = ''\npassword = ''\nTopic = [username, 'github'].join('/')\n\nclient = MQTT::Client.connect(\n  :host => sango_host,\n  :port => sango_port,\n  :ssl => false,\n  :username => username,\n  :password => password\n)\nclient.get(Topic) do |topic, msg|\n  sock = TCPSocket.open(drone_host, drone_port)\n  sock.write(msg)\n  sock.close\nend\n\n\n\u8ffd\u8a18\n\u76f4\u63a5 sango \u306b PUBLISH \u3059\u308b\u5834\u5408\u306f\u4e0b\u8a18\u3092\u53c2\u7167\nGitHub \u304b\u3089 MQTT PUBLISH \u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3057\u3066\u3001POST \u30ea\u30af\u30a8\u30b9\u30c8\u3067\u9001\u4fe1\u3059\u308b - Qiita\ngit push \u7b49\u306b\u3088\u308b GitHub \u304b\u3089\u306e HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3059\u308b\u305f\u3081\u306b\u306f\u3001GitHub WebHooks \u3092\u5229\u7528\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f GitHub \u304b\u3089\u898b\u3048\u308b\u30b5\u30fc\u30d0\u4e0a\u306b\u8a2d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\n\u4eca\u56de\u306f\u3001GitHub \u304b\u3089\u76f4\u63a5 HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3067\u304d\u306a\u3044 LAN \u5185\u306e Drone \u306b\u3001GitHub \u304b\u3089\u9001\u4fe1\u3055\u308c\u305f HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3055\u305b\u3066\u307f\u307e\u3057\u305f\n\n## \u69cb\u6210\n\n![drone.png](https://qiita-image-store.s3.amazonaws.com/0/36202/96ba94a3-9503-6918-92e2-90fe741986d7.png)\n\nGitHub \u304b\u3089\u306e POST \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3001EC2 \u4e0a\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u53d7\u4fe1\u3057\u3066\u3001\n[MQTT as a Service sango](https://sango.shiguredo.jp/) \u306b POST \u30ea\u30af\u30a8\u30b9\u30c8\u3092 PUBLISH \u3059\u308b\u3053\u3068\u3067\u3001\nLAN \u5185\u306e MQTT Subscriber \u306b GitHub \u304b\u3089\u306e POST \u30ea\u30af\u30a8\u30b9\u30c8\u304c\u9001\u3089\u308c\u3001\n\u3055\u3089\u306b\u3001MQTT Subscriber \u306f\u53d7\u4fe1\u3057\u305f POST \u30ea\u30af\u30a8\u30b9\u30c8\u3092 Drone \u306b\u9001\u308a\u307e\u3059\n\n\n## EC2\n\nGitHub \u304b\u3089\u306e POST \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3057\u3066\u3001\u305d\u306e\u307e\u307e sango \u306b PUBLISH \u3057\u307e\u3059\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u9069\u5f53\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u6e96\u5099\u3057\u307e\u3059\n\n```rb\nrequire 'socket'\nrequire 'mqtt'\n\nsango_host = ''\nsango_port = 1883\nusername = ''\npassword = ''\ntopic = [username, 'github'].join('/')\n\nSocket.tcp_server_loop('0.0.0.0', 80) do |sock, addr|\n  payload = ''\n  length = nil\n\n  loop do\n    buffer = sock.recv(1024)\n    break if buffer == 0\n\n    payload += buffer\n\n    if length\n       body = payload.split(\"\\r\\n\\r\\n\")[1]\n       if body\n         break if body.length == length.to_i\n       end\n    else\n      if payload =~ /content-length:\\s(\\d+)\\r\\n/i\n        length = $1\n      end\n    end\n  end\n\n  client = MQTT::Client.connect(\n    :host => sango_host,\n    :port => sango_port,\n    :ssl => false,\n    :username => username,\n    :password => password\n  )\n  client.publish(topic, payload)\n\n  sock.write(\"HTTP/1.1 200 OK\\r\\n\\r\\n\")\n  sock.close\nend\n```\n\n## LAN\n\n### MQTT Subscriber\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3001\u3042\u3089\u304b\u3058\u3081 sango \u306b SUBSCRIBE \u3057\u3066\u304a\u304d\u307e\u3059\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001\u305d\u306e\u307e\u307e Drone \u306b\u9001\u4fe1\u3055\u308c\u307e\u3059\n\n```rb\nrequire 'socket'\nrequire 'mqtt'\n\ndrone_host = '127.0.0.1'\ndrone port = 80\nsango_host = ''\nsango_port = 1883\nusername = ''\npassword = ''\nTopic = [username, 'github'].join('/')\n\nclient = MQTT::Client.connect(\n  :host => sango_host,\n  :port => sango_port,\n  :ssl => false,\n  :username => username,\n  :password => password\n)\nclient.get(Topic) do |topic, msg|\n  sock = TCPSocket.open(drone_host, drone_port)\n  sock.write(msg)\n  sock.close\nend\n```\n\n## \u8ffd\u8a18\n\n\u76f4\u63a5 sango \u306b PUBLISH \u3059\u308b\u5834\u5408\u306f\u4e0b\u8a18\u3092\u53c2\u7167\n\n[GitHub \u304b\u3089 MQTT PUBLISH \u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3057\u3066\u3001POST \u30ea\u30af\u30a8\u30b9\u30c8\u3067\u9001\u4fe1\u3059\u308b - Qiita](http://qiita.com/Hexa/items/78b977014726e8c6af7e)\n", "tags": ["drone", "mqtt", "GitHub", "sango"]}