{"tags": ["PHPUnit"], "context": " More than 1 year has passed since last update.Hands-On Unit Testing With PHPUnit\n\nTips\nTo run all test in a folder tests\nphpunit tests\n\nIf it is a normal project, not laravel, add the following to all test files.\nrequire __DIR__ . '/../vendor/autoload.php';\n\n\nFiles: Sites/laravel321\nInstall laravel, use the following for unit test from laravel root\ncd ~/Sites/laravel321\nphp artisan test\n// or create a alias\nalias t='php artisan test'\nt\n\nOr add alias to .bash_profile or .zshrc\nThis fetch can be used as followings.\nphp artisan fetch jquery\nphp artisan fetch normalize\nphp artisan fetch backbone\nphp artisan fetch underscore\n\nt will clean afer testing with phpunit's tearDown() method\nSpeed up by not downloading actual files. Using mock class in phpunit.\nIt took 6 sec, but after this it takes 0 sec.\npublic function setUp()//phpunit method\n{\n    $assetPath = $this->getMock('Asset');// phpunit method getMock()\n    $assetPath->expects($this->any())\n        ->method('fetch')\n        ->will($this->returnValue('pseudo content'));// this will modk Asset class\n        // and not download the file\n    // $this->fetch = new Fetch_Task;   // original\n    $this->fetch = new Fetch_Task($assetPath);// for mock   \n\n}\n\nIf you comment \n    public function tearDown()//phpUnit method\n{\n    // File::cleandir(static::$cssDir);         \n    // File::cleandir(static::$jsDir);\n}   \n\nAnd run a test, by t. It will put a psedo content.\nIf you run php artisan fetch jquery, it will fetch jquery.\nFinal code \n//application/tasks/fetch.php\n\n<?php\n\nclass Asset {\npublic function fetch($assetPath)\n{\n    return file_get_contents($assetPath);\n}\n}\n\nclass Fetch_Task {\n\npublic static $paths = array(\n    'jquery' => 'http://code.jquery.com/jquery.js',\n    'backbone' => 'http://backbonejs.org/backbone.js',\n    'underscore' => 'http://underscorejs.org/underscore.js',\n    'normalize' => 'https://raw.github.com/necolas/normalize.css/master/normalize.css'\n);\npublic static $cssDir = 'public/css/vendors/';\npublic static $jsDir = 'public/js/vendors/';\n\npublic function __construct(Asset $file = null)// need to be class of Asset\n{\n    // this is simplified under this\n    // if( ! is_null($file)){\n    //  $this->file = $file;\n    // }\n    // else\n    // {\n    //  $this->file = new Asset;\n    // }\n\n    $this->file = is_null($file) ? ( new Asset ) : $file;\n}\n\npublic function run($query = null)\n{\n    if( !$query ){\n        throw new InvalidArgumentException('Please pass an asset to download.');\n    }\n\n    $this->asset = strtolower($query[0]);\n\n    // if recognized, \n    if( $this->recognizesAsset($this->asset) )\n    {\n        //then fetch it an creat the file\n        // $content = $this->fetch(static::$paths[$this->asset]);\n        $content = $this->file->fetch(static::$paths[$this->asset]);\n        $this->createFile($this->asset, $content);\n        echo 'Your asset has been generated.' . PHP_EOL;\n    }\n    else\n    {\n        // echo not found to the user\n        echo \"The {$query[0]} key was not recognized.\"  . PHP_EOL;\n    }\n\n}\n\n\npublic function recognizesAsset($asset)\n{\n    return array_key_exists($asset, static::$paths);\n}\n\n/*\n// this one is factored out at the top\npublic function fetch($assetPath)\n{\n    return file_get_contents($assetPath);\n}\n*/\npublic function createFile($asset, $content)\n{\n// this will be improved under this\n// $fileExtension = pathinfo(static::$paths[$asset], PATHINFO_EXTENSION);\n\n//  if( $fileExtension === 'js')\n//  {\n//      $path = static::$jsDir . \"{$asset}.{$fileExtension}\";\n//  } elseif ($fileExtension === 'css')\n//  {\n//      $path = static::$cssDir . \"{$asset}.{$fileExtension}\";\n//  }\n\n    $file = pathinfo(static::$paths[$asset]);\n\n    switch ($file['extension']) \n    {\n        case 'js':\n            $path = static::$jsDir . $file['basename'];\n            break;\n\n        case 'css':\n        default:\n            $path = static::$cssDir . $file['basename'];\n    }\n\n    File::mkdir(dirname($path));\n\n    File::put($path, $content);\n}\n\n}\n\napplication/test/fetch.test.php\n<?php\n\nrequire path('app') . 'tasks/fetch.php';\n\nclass Fetch_test extends PHPUnit_Framework_TestCase \n{\n\npublic static $cssDir = 'public/css/vendors/';\npublic static $jsDir = 'public/js/vendors/';\n\npublic function setUp()//phpunit method\n{\n    $assetPath = $this->getMock('Asset');// phpunit method getMock()\n    $assetPath->expects($this->any())\n        ->method('fetch')\n        ->will($this->returnValue('pseudo content'));// this will modk Asset class\n        // and not download the file\n    // $this->fetch = new Fetch_Task;   // original\n    $this->fetch = new Fetch_Task($assetPath);// for mock   \n\n}\n\npublic function tearDown()//phpUnit method\n{\n    File::cleandir(static::$cssDir);            \n    File::cleandir(static::$jsDir);\n}\n\n\npublic function testStoresListOfAssets()\n{\n    $this->assertClassHasStaticAttribute('paths', 'Fetch_Task');\n    $this->assertArrayHasKey('jquery', Fetch_Task::$paths);\n}\n\n/** \n * @expectedException InvalidArgumentException\n */\npublic function testThrowsExceptionIfNoAssetIsProvided()\n{\n    $this->fetch->run();\n}\n\npublic function testDownloadsAssetIfFound()\n{\n    $this->fetch->run(array('jquery'));\n    $this->assertFileExists(static::$jsDir . 'jquery.js');\n}\n\npublic function testSavesAssetsToProperDirectory()\n{\n    $this->fetch->run(array('jquery'));\n    $this->assertFileExists(static::$jsDir . 'jquery.js');\n\n    $this->fetch->run(array('normalize'));\n    $this->assertFileExists(static::$cssDir . 'normalize.css');\n}\n\npublic function testNotifiesUserUponCompletion()\n{\n    $this->fetch->run(array('jquery'));\n    $this->expectOutputString('Your asset has been generated.'. PHP_EOL);       \n}\n\npublic function testNotifiesUserIfAssetIsNotRecongized()\n{\n    $this->fetch->run(array('blabla'));\n    $this->expectOutputString('The blabla key was not recognized.'. PHP_EOL);               \n}\n}\n\n[Hands-On Unit Testing With PHPUnit][id]\n[id]:http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/?search_index=1\n## Tips\n\nTo run all test in a folder tests\n\n    phpunit tests\n   \nIf it is a normal project, not laravel, add the following to all test files.\n\n    require __DIR__ . '/../vendor/autoload.php';\n\n\n\n## Files: Sites/laravel321\n\n\n\nInstall laravel, use the following for unit test from laravel root\n\n\tcd ~/Sites/laravel321\n\tphp artisan test\n\t// or create a alias\n\talias t='php artisan test'\n\tt\n\t\nOr add alias to .bash_profile or .zshrc\n\nThis fetch can be used as followings.\n\n\tphp artisan fetch jquery\n\tphp artisan fetch normalize\n\tphp artisan fetch backbone\n\tphp artisan fetch underscore\n\t\nt will clean afer testing with phpunit's tearDown() method\n\nSpeed up by not downloading actual files. Using mock class in phpunit.\n\nIt took 6 sec, but after this it takes 0 sec.\n\n\n\tpublic function setUp()//phpunit method\n\t{\n\t\t$assetPath = $this->getMock('Asset');// phpunit method getMock()\n\t\t$assetPath->expects($this->any())\n\t\t\t->method('fetch')\n\t\t\t->will($this->returnValue('pseudo content'));// this will modk Asset class\n\t\t\t// and not download the file\n\t\t// $this->fetch = new Fetch_Task;\t// original\n\t\t$this->fetch = new Fetch_Task($assetPath);// for mock\t\n\n\t}\n\t\nIf you comment \n\n\t\tpublic function tearDown()//phpUnit method\n\t{\n\t\t// File::cleandir(static::$cssDir);\t\t\t\n\t\t// File::cleandir(static::$jsDir);\n\t}\t\n\t\nAnd run a test, by t. It will put a psedo content.\nIf you run php artisan fetch jquery, it will fetch jquery.\n\nFinal code \n\n\t//application/tasks/fetch.php\n\t\n\t<?php\n\n\tclass Asset {\n\tpublic function fetch($assetPath)\n\t{\n\t\treturn file_get_contents($assetPath);\n\t}\n\t}\n\n\tclass Fetch_Task {\n\n\tpublic static $paths = array(\n\t\t'jquery' => 'http://code.jquery.com/jquery.js',\n\t\t'backbone' => 'http://backbonejs.org/backbone.js',\n\t\t'underscore' => 'http://underscorejs.org/underscore.js',\n\t\t'normalize' => 'https://raw.github.com/necolas/normalize.css/master/normalize.css'\n\t);\n\tpublic static $cssDir = 'public/css/vendors/';\n\tpublic static $jsDir = 'public/js/vendors/';\n\n\tpublic function __construct(Asset $file = null)// need to be class of Asset\n\t{\n\t\t// this is simplified under this\n\t\t// if( ! is_null($file)){\n\t\t// \t$this->file = $file;\n\t\t// }\n\t\t// else\n\t\t// {\n\t\t// \t$this->file = new Asset;\n\t\t// }\n\n\t\t$this->file = is_null($file) ? ( new Asset ) : $file;\n\t}\n\n\tpublic function run($query = null)\n\t{\n\t\tif( !$query ){\n\t\t\tthrow new InvalidArgumentException('Please pass an asset to download.');\n\t\t}\n\t\t\n\t\t$this->asset = strtolower($query[0]);\n\n\t\t// if recognized, \n\t\tif( $this->recognizesAsset($this->asset) )\n\t\t{\n\t\t\t//then fetch it an creat the file\n\t\t\t// $content = $this->fetch(static::$paths[$this->asset]);\n\t\t\t$content = $this->file->fetch(static::$paths[$this->asset]);\n\t\t\t$this->createFile($this->asset, $content);\n\t\t\techo 'Your asset has been generated.' . PHP_EOL;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// echo not found to the user\n\t\t\techo \"The {$query[0]} key was not recognized.\"  . PHP_EOL;\n\t\t}\n\n\t}\n\n\n\tpublic function recognizesAsset($asset)\n\t{\n\t\treturn array_key_exists($asset, static::$paths);\n\t}\n\n\t/*\n\t// this one is factored out at the top\n \tpublic function fetch($assetPath)\n\t{\n\t\treturn file_get_contents($assetPath);\n\t}\n\t*/\n\tpublic function createFile($asset, $content)\n\t{\n\t// this will be improved under this\n\t// $fileExtension = pathinfo(static::$paths[$asset], PATHINFO_EXTENSION);\n\n\t// \tif( $fileExtension === 'js')\n\t// \t{\n\t// \t\t$path = static::$jsDir . \"{$asset}.{$fileExtension}\";\n\t// \t} elseif ($fileExtension === 'css')\n\t// \t{\n\t// \t\t$path = static::$cssDir . \"{$asset}.{$fileExtension}\";\n\t// \t}\n\n\t\t$file = pathinfo(static::$paths[$asset]);\n\t\t\n\t\tswitch ($file['extension']) \n\t\t{\n\t\t\tcase 'js':\n\t\t\t\t$path = static::$jsDir . $file['basename'];\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'css':\n\t\t\tdefault:\n\t\t\t\t$path = static::$cssDir . $file['basename'];\n\t\t}\n\n\t\tFile::mkdir(dirname($path));\n\n\t\tFile::put($path, $content);\n\t}\n\n    }\n\t\n\t\n\t\napplication/test/fetch.test.php\n\n\t<?php\n\n\trequire path('app') . 'tasks/fetch.php';\n\n\tclass Fetch_test extends PHPUnit_Framework_TestCase \n\t{\n\n\tpublic static $cssDir = 'public/css/vendors/';\n\tpublic static $jsDir = 'public/js/vendors/';\n\n\tpublic function setUp()//phpunit method\n\t{\n\t\t$assetPath = $this->getMock('Asset');// phpunit method getMock()\n\t\t$assetPath->expects($this->any())\n\t\t\t->method('fetch')\n\t\t\t->will($this->returnValue('pseudo content'));// this will modk Asset class\n\t\t\t// and not download the file\n\t\t// $this->fetch = new Fetch_Task;\t// original\n\t\t$this->fetch = new Fetch_Task($assetPath);// for mock\t\n\n\t}\n\n\tpublic function tearDown()//phpUnit method\n\t{\n\t\tFile::cleandir(static::$cssDir);\t\t\t\n\t\tFile::cleandir(static::$jsDir);\n\t}\n\n\n\tpublic function testStoresListOfAssets()\n\t{\n\t\t$this->assertClassHasStaticAttribute('paths', 'Fetch_Task');\n\t\t$this->assertArrayHasKey('jquery', Fetch_Task::$paths);\n\t}\n\n\t/** \n\t * @expectedException InvalidArgumentException\n\t */\n\tpublic function testThrowsExceptionIfNoAssetIsProvided()\n\t{\n\t\t$this->fetch->run();\n\t}\n\n\tpublic function testDownloadsAssetIfFound()\n\t{\n\t\t$this->fetch->run(array('jquery'));\n\t\t$this->assertFileExists(static::$jsDir . 'jquery.js');\n\t}\n\n\tpublic function testSavesAssetsToProperDirectory()\n\t{\n\t\t$this->fetch->run(array('jquery'));\n\t\t$this->assertFileExists(static::$jsDir . 'jquery.js');\n\n\t\t$this->fetch->run(array('normalize'));\n\t\t$this->assertFileExists(static::$cssDir . 'normalize.css');\n\t}\n\n\tpublic function testNotifiesUserUponCompletion()\n\t{\n\t\t$this->fetch->run(array('jquery'));\n\t\t$this->expectOutputString('Your asset has been generated.'. PHP_EOL);\t\t\n\t}\n\n\tpublic function testNotifiesUserIfAssetIsNotRecongized()\n\t{\n\t\t$this->fetch->run(array('blabla'));\n\t\t$this->expectOutputString('The blabla key was not recognized.'. PHP_EOL);\t\t\t\t\n\t}\n\t}\n\n\n"}