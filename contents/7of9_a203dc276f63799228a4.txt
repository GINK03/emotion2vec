{"context": " More than 1 year has passed since last update.http://tips.hecomi.com/entry/2014/06/23/222805\n\u3092\u53c2\u8003\u306b\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3057\u3066\u307f\u308b\u3002\n\uff13\u3064\u306e\u65b9\u6cd5\u306e\u3046\u3061\u3001DrawLine.cs\u3092\u4f7f\u7528\u3002\n\nDrawLine.cs\u306f\u30ea\u30f3\u30af\u5148\u306e\u60c5\u5831\u304b\u3089 yoyo\u3055\u3093\u306e\u66f8\u8fbc\u307f\u3092\u30b3\u30d4\u30da\nEmptyGameObject\u3092\u4f5c\u6210\nOriginalInspector.cs\u3092\u4f5c\u6210\u3057\u3001EmptyGameObject\u306b\u95a2\u9023\u4ed8\u3051\u308b\u3002\u4e2d\u8eab\u306f\u4f55\u3082\u5909\u66f4\u305b\u305a\u3002\nAssets\u4ee5\u4e0b\u306bEditor\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3066 OriginalInspectorEditor.cs \u3092\u65b0\u898f\u4f5c\u6210\u3057\u3001\u30ea\u30f3\u30af\u5148\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3059\u308b\u3002\n\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u30a8\u30e9\u304c\u3067\u305f\u3002\nAddData( (target as CustomInspector).random );\n\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\nThe type of namespace name 'CustomInspector' could not be found. ...\n\n\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u3001CustomInspector\u3068\u3044\u3046\u306e\u3092\u7528\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304c\u3001\u305d\u306e\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u3044\u3002\n\u30c0\u30e1\u5143\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u305f\u3002\nAddData (Random.Range(0.0f, 5.0f));\n\n\u3059\u308b\u3068\u30b0\u30e9\u30d5\u304c\u51fa\u305f\u3002\n\n\u3053\u306e\u30b0\u30e9\u30d5\u8868\u793a\u3067\u306f(0.0, 5.0)\u306e\u7bc4\u56f2\u306e\u70b9\u3092\u63cf\u753b\u3057\u3066\u3044\u308b\u3002\n\u306f\u307e\u3063\u305f\u306e\u306f(-5.0, 5.0)\u3068\u3044\u3046\u30de\u30a4\u30ca\u30b9\u3092\u5165\u308c\u305f\u6642\u306b\u30b0\u30e9\u30d5\u304c\u63cf\u753b\u9818\u57df\u306b\u304a\u3055\u307e\u3089\u306a\u304f\u306a\u3063\u305f\u3053\u3068\u3002\u30de\u30a4\u30ca\u30b9\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u3002\n\ncode\n\nOriginalInspector.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class OriginalInspector : MonoBehaviour {\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n\n    }\n}\n\n\n\u5909\u66f4\u5f8c\u306eOriginalInspectorEditor.cs\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u3000\uff08AddData\u306e\uff11\u884c\u3057\u304b\u5909\u3048\u3066\u306a\u3044)\n\nOriginalInspectorEditor.cs\nusing UnityEditor;\nusing UnityEngine;\nusing System.Collections.Generic;\nusing System.Linq;\n\n[CustomEditor(typeof(OriginalInspector))]\npublic class OriginalInspectorEditor : Editor\n{\n    private List<float> data_ = new List<float>();\n\n    override public void OnInspectorGUI()\n    {\n        EditorGUILayout.Space();\n\n        if (Application.isPlaying) {\n//          AddData( (target as CustomInspector).random );\n            AddData (Random.Range(0.0f, 5.0f));\n        }\n\n        var area = GUILayoutUtility.GetRect(Screen.width, 200f);\n\n        // Grid\n        const int div = 10;\n        for (int i = 0; i <= div; ++i) {\n            var lineColor = (i == 0 || i == div) ? Color.white : Color.gray;\n            var lineWidth = (i == 0 || i == div) ? 2f : 1f;\n            var x = (area.width  / div) * i;\n            var y = (area.height / div) * i;\n            Drawing.DrawLine (\n                new Vector2(area.x + x, area.y),\n                new Vector2(area.x + x, area.yMax), lineColor, lineWidth, true);\n            Drawing.DrawLine (\n                new Vector2(area.x,    area.y + y),\n                new Vector2(area.xMax, area.y + y), lineColor, lineWidth, true);\n        }\n\n        // Data\n        if (data_.Count > 0) {\n            var max = data_.Max();\n            var dx  = area.width / data_.Count; \n            var dy  = area.height / max;\n            Vector2 previousPos = new Vector2(area.x, area.yMax); \n            for (var i = 0; i < data_.Count; ++i) {\n                var x = area.x + dx * i;\n                var y = area.yMax - dy * data_[i];\n                var currentPos = new Vector2(x, y);\n                Drawing.DrawLine(previousPos, currentPos, Color.red, 3f, true);\n                previousPos = currentPos;\n            }\n        }\n\n        EditorGUILayout.Space();\n    }\n\n    private void AddData(float value)\n    {\n        data_.Add(value);\n        if (data_.Count > 100) {\n            data_.RemoveAt(0);\n        }\n    }\n}\n\n\nplaymode\u306b\u3057\u3066EmptyGameObject\u3092\u9078\u629e\u3059\u308b\u3068\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u306b\u30b0\u30e9\u30d5\u304c\u63cf\u753b\u3055\u308c\u308b\u3002\n\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3054\u3068\u306b\u30b0\u30e9\u30d5\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u304f\u3002\nhttp://tips.hecomi.com/entry/2014/06/23/222805\n\u3092\u53c2\u8003\u306b\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3057\u3066\u307f\u308b\u3002\n\n\uff13\u3064\u306e\u65b9\u6cd5\u306e\u3046\u3061\u3001DrawLine.cs\u3092\u4f7f\u7528\u3002\n\n1. DrawLine.cs\u306f\u30ea\u30f3\u30af\u5148\u306e\u60c5\u5831\u304b\u3089 yoyo\u3055\u3093\u306e\u66f8\u8fbc\u307f\u3092\u30b3\u30d4\u30da\n2. EmptyGameObject\u3092\u4f5c\u6210\n3. OriginalInspector.cs\u3092\u4f5c\u6210\u3057\u3001EmptyGameObject\u306b\u95a2\u9023\u4ed8\u3051\u308b\u3002\u4e2d\u8eab\u306f\u4f55\u3082\u5909\u66f4\u305b\u305a\u3002\n4. Assets\u4ee5\u4e0b\u306bEditor\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3066 OriginalInspectorEditor.cs \u3092\u65b0\u898f\u4f5c\u6210\u3057\u3001\u30ea\u30f3\u30af\u5148\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3059\u308b\u3002\n\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u30a8\u30e9\u304c\u3067\u305f\u3002\n\n```csharp\nAddData( (target as CustomInspector).random );\n```\n\n```txt:\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\nThe type of namespace name 'CustomInspector' could not be found. ...\n```\n\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u3001CustomInspector\u3068\u3044\u3046\u306e\u3092\u7528\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304c\u3001\u305d\u306e\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u3044\u3002\n\n\u30c0\u30e1\u5143\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u305f\u3002\n\n```csharp\nAddData (Random.Range(0.0f, 5.0f));\n```\n\n\u3059\u308b\u3068\u30b0\u30e9\u30d5\u304c\u51fa\u305f\u3002\n\n![Scence_unity_-_150801_graph_-_PC__Mac___Linux_Standalone__Personal_.jpg](https://qiita-image-store.s3.amazonaws.com/0/32870/bb575ed6-05b6-111e-e626-61a656b8a98d.jpeg)\n\n\u3053\u306e\u30b0\u30e9\u30d5\u8868\u793a\u3067\u306f(0.0, 5.0)\u306e\u7bc4\u56f2\u306e\u70b9\u3092\u63cf\u753b\u3057\u3066\u3044\u308b\u3002\n\n\u306f\u307e\u3063\u305f\u306e\u306f(-5.0, 5.0)\u3068\u3044\u3046\u30de\u30a4\u30ca\u30b9\u3092\u5165\u308c\u305f\u6642\u306b\u30b0\u30e9\u30d5\u304c\u63cf\u753b\u9818\u57df\u306b\u304a\u3055\u307e\u3089\u306a\u304f\u306a\u3063\u305f\u3053\u3068\u3002\u30de\u30a4\u30ca\u30b9\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u3002\n\n\n#code\n\n```csharp:OriginalInspector.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class OriginalInspector : MonoBehaviour {\n\n\t// Use this for initialization\n\tvoid Start () {\n\t\n\t}\n\t\n\t// Update is called once per frame\n\tvoid Update () {\n\t\n\t}\n}\n```\n\n\u5909\u66f4\u5f8c\u306eOriginalInspectorEditor.cs\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u3000\uff08AddData\u306e\uff11\u884c\u3057\u304b\u5909\u3048\u3066\u306a\u3044)\n\n```OriginalInspectorEditor.cs\nusing UnityEditor;\nusing UnityEngine;\nusing System.Collections.Generic;\nusing System.Linq;\n\n[CustomEditor(typeof(OriginalInspector))]\npublic class OriginalInspectorEditor : Editor\n{\n\tprivate List<float> data_ = new List<float>();\n\t\n\toverride public void OnInspectorGUI()\n\t{\n\t\tEditorGUILayout.Space();\n\t\t\n\t\tif (Application.isPlaying) {\n//\t\t\tAddData( (target as CustomInspector).random );\n\t\t\tAddData (Random.Range(0.0f, 5.0f));\n\t\t}\n\t\t\n\t\tvar area = GUILayoutUtility.GetRect(Screen.width, 200f);\n\t\t\n\t\t// Grid\n\t\tconst int div = 10;\n\t\tfor (int i = 0; i <= div; ++i) {\n\t\t\tvar lineColor = (i == 0 || i == div) ? Color.white : Color.gray;\n\t\t\tvar lineWidth = (i == 0 || i == div) ? 2f : 1f;\n\t\t\tvar x = (area.width  / div) * i;\n\t\t\tvar y = (area.height / div) * i;\n\t\t\tDrawing.DrawLine (\n\t\t\t\tnew Vector2(area.x + x, area.y),\n\t\t\t\tnew Vector2(area.x + x, area.yMax), lineColor, lineWidth, true);\n\t\t\tDrawing.DrawLine (\n\t\t\t\tnew Vector2(area.x,    area.y + y),\n\t\t\t\tnew Vector2(area.xMax, area.y + y), lineColor, lineWidth, true);\n\t\t}\n\t\t\n\t\t// Data\n\t\tif (data_.Count > 0) {\n\t\t\tvar max = data_.Max();\n\t\t\tvar dx  = area.width / data_.Count; \n\t\t\tvar dy  = area.height / max;\n\t\t\tVector2 previousPos = new Vector2(area.x, area.yMax); \n\t\t\tfor (var i = 0; i < data_.Count; ++i) {\n\t\t\t\tvar x = area.x + dx * i;\n\t\t\t\tvar y = area.yMax - dy * data_[i];\n\t\t\t\tvar currentPos = new Vector2(x, y);\n\t\t\t\tDrawing.DrawLine(previousPos, currentPos, Color.red, 3f, true);\n\t\t\t\tpreviousPos = currentPos;\n\t\t\t}\n\t\t}\n\t\t\n\t\tEditorGUILayout.Space();\n\t}\n\t\n\tprivate void AddData(float value)\n\t{\n\t\tdata_.Add(value);\n\t\tif (data_.Count > 100) {\n\t\t\tdata_.RemoveAt(0);\n\t\t}\n\t}\n}\n```\n\nplaymode\u306b\u3057\u3066EmptyGameObject\u3092\u9078\u629e\u3059\u308b\u3068\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u306b\u30b0\u30e9\u30d5\u304c\u63cf\u753b\u3055\u308c\u308b\u3002\n\n\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3054\u3068\u306b\u30b0\u30e9\u30d5\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u304f\u3002\n\n\n", "tags": ["MyUnity"]}