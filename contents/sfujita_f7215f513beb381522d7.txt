{"context": "\n\n\u25a1DMD vs LDC \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c6\u30b9\u30c8(Windows\u7de8)\nDMD \u3068 LDC \u3069\u306e\u7a0b\u5ea6\u306e\u9055\u3044\u304c\u3042\u308b\u304b\u8a66\u3057\u307e\u3057\u305f\u3002LDC \u306f LLVM \u3068\u3044\u3046\u6c4e\u7528\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u9ad8\u901f\u306b\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306e\u751f\u6210\u3092\u884c\u3046\u306e\u304c\u7279\u5fb4\u3067\u3059\u306e\u3067\u3001DMD \u3088\u308a\u3069\u308c\u307b\u3069\u65e9\u304f\u306a\u308b\u306e\u304b\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\u4eca\u56de\u3001LDC \u306f\u6b8b\u5ff5\u306a\u304c\u3089 \u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3 -O \u3092\u4ed8\u3051\u308b\u3068\u30bf\u30a4\u30e0\u8a08\u6e2c\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u6700\u9069\u5316\u306f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u306a\u304a\u3001\u6bd4\u8f03\u3067 Clang \u3067\u3082\u8a08\u6e2c\u3057\u307e\u3057\u305f\u304c\u3053\u3061\u3089\u3082\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3 -O \u3092\u4ed8\u3051\u308b\u3068\u30bf\u30a4\u30e0\u8a08\u6e2c\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u25a1\u4eca\u56de\u306e\u6750\u6599\n\ndmd.2.071.1\nldc2-1.0.0\nclang version 3.8.1 x86_64-pc-windows-msvc\nWindows 10 Home ver 1511 / build 10586.545\n\n\n\u25a1\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u65b9\u6cd5\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3001\u305f\u3089\u3044\u307e\u308f\u3057\u95a2\u65701\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u3057\u3066\u306f\u6570\u5024\u306e\u6bd4\u8f03\u3068\u518d\u5e30\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306e\u901f\u5ea6\u8a08\u6e2c\u3092\u884c\u3044\u307e\u3059\u3002\n\ntarai.d\nint tarai(int x, int y, int z)\n{\n    if (x <= y) {\n        return z;\n    } else {\n        return tarai( tarai(x - 1, y, z), tarai(y - 1, z, x), tarai(z - 1, x, y) );\n    }\n}\ndouble tarai_double(double x, double y, double z)\n{\n    if (x <= y) {\n        return z;\n    } else {\n        return tarai_double( tarai_double(x - 1.0, y, z), tarai_double(y - 1.0, z, x), tarai_double(z - 1.0, x, y) );\n    }\n}\n\n\n\u305f\u3089\u3044\u307e\u308f\u3057\u95a2\u6570/\u7af9\u5185\u95a2\u6570 https://ja.wikipedia.org/wiki/%E7%AB%B9%E5%86%85%E9%96%A2%E6%95%B0\n\n\u25a1\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7d50\u679c\n\u305f\u3089\u3044\u307e\u308f\u3057\u95a2\u6570\u3092\uff11\uff10\u56de\u8a08\u6e2c\u3057\u305f\u5e73\u5747\u5024\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002Bold\u306f\u6700\u901f\u5024\u3067\u6570\u5024\u306e\u5358\u4f4d\u306f\u30df\u30ea\u79d2(ms)\nDMD\u30b3\u30f3\u30d1\u30a4\u30e9\u306f tarai_int \u306f\u601d\u3063\u305f\u3088\u308a\u65e9\u3044\u3067\u3059\u304c double \u306e\u6f14\u7b97\u306f w64\u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u306d\u3002\nLDC \u306f w64 \u306f\u65e9\u3044\u3082\u306e\u306e w32 \u306f\u305d\u308c\u307b\u3069\u65e9\u304f\u306a\u304f\u3066\u610f\u5916\u3067\u3059\u3002\n\u306a\u304a LDC \u306e\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3 -O \u3092\u4ed8\u3051\u308b\u3068\u3001\u305f\u3089\u3044\u307e\u308f\u3057\u95a2\u6570\u306e\u6642\u9593\u8a08\u6e2c\u304c 0\u79d2\u3067\u8a08\u6e2c\u51fa\u6765\u306a\u3044\u306e\u3067\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u4ed8\u3051\u307e\u305b\u3093\u3002\n\n\n\nCompiler-32/64\ntarai_int\ntarai_double\n\n\n\n\nDMD/w32/DigitalMars runtime\n1497\n5084\n\n\nDMD/w32/Microsoft runtime\n1445\n5122\n\n\nDMD/w64/Microsoft runtime\n1618\n1959\n\n\nLDC/w32\n2185\n2947\n\n\nLDC/w64\n1475\n1897\n\n\nClang/w64\n1670\n1640\n\n\n\n\n\u6570\u5024\u306e\u5358\u4f4d\u306fmsec\n\n\n\u25a1\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nBuild.bat\n@echo off\nrem ---- DMD\npath=C:\\D\\dmd.2.071.1\\windows\\bin;\n\ndmd -O -inline -release -boundscheck=off -m32 -ofbenchmark32.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark32.exe\n\ndmd -O -inline -release -boundscheck=off -m32mscoff -ofbenchmark32mscoff.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark32mscoff.exe\n\ndmd -O -inline -release -boundscheck=off -m64 -ofbenchmark64.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark64.exe\n\nrem ---- LDC\npath=C:\\D\\ldc2-1.0.0-win32-msvc\\bin;c:\\windows\\system32;\nldc2 -release -boundscheck=off -m32 -ofbenchmark32_ldc.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark32_ldc.exe\n\npath=C:\\D\\ldc2-1.0.0-win64-msvc\\bin;c:\\windows\\system32;\nldc2 -release -boundscheck=off -m64 -ofbenchmark64_ldc.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark64_ldc.exe\n\nrem ---- Clang\npath=C:\\D\\Clang\\bin;\nclang -o benchmark_clang.exe benchmark.c\n@if ERRORLEVEL 1 goto :eof\nbenchmark_clang.exe\n\necho done...\npause \n\n\n\n\nbenchmark.d\n// Written in the D programming language.\n// dmd 2.071.1\n\n/*\n tarai\n \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u3057\u3066\u306f\u518d\u5e30\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057(\u623b\u308a)\u306e\u901f\u5ea6\u8a08\u6e2c\n https://ja.wikipedia.org/wiki/%E7%AB%B9%E5%86%85%E9%96%A2%E6%95%B0\n\n tak(22, 11, 0);\n*/\nint tarai(int x, int y, int z)\n{\n    if (x <= y) {\n        return z;\n    } else {\n        return tarai( tarai(x - 1, y, z), tarai(y - 1, z, x), tarai(z - 1, x, y) );\n    }\n}\ndouble tarai_double(double x, double y, double z)\n{\n    if (x <= y) {\n        return z;\n    } else {\n        return tarai_double( tarai_double(x - 1.0, y, z), tarai_double(y - 1.0, z, x), tarai_double(z - 1.0, x, y) );\n    }\n}\n\nstruct xStopWatch\n{\n    import std.conv;\n    import core.time;\n    import std.datetime : StopWatch;\n\nprivate:\n    StopWatch timer;\n    long[] array;\n\n    void start() {\n        timer.start();\n    }\n    auto stop() {\n        timer.stop();\n        long result = timer.peek().to!(\"msecs\", long)();\n        array ~= result;\n        timer.reset();\n        return result;\n    }\n\n    void sort() {\n        import std.algorithm.sorting : sort, isSorted;\n        if (!isSorted(array))\n            sort(array);\n    }\n    auto fastest() {\n        sort();\n        return array[0];\n    }\n    auto worst() {\n        sort();\n        return array[$-1];\n    }\n    auto average() {\n        long total;\n        foreach (v; array)\n            total += v;\n        return total / array.length;\n    }\n\n    public void benchMark(string title, int loop, void delegate() dg) {\n        import std.stdio : writeln;\n\n        writeln(\"# \", title, \" \", buildID(), \" bench ----\");\n        foreach (i; 0 .. loop) {\n            start();\n            dg();\n            version (ProgressView) {\n                writeln(i, \": \", stop());\n            } else {\n                stop();\n            }\n        }\n        writeln(\"fastest: \", fastest(), \"ms\");\n        writeln(\"worst  : \", worst(), \"ms\");\n        writeln(\"average: \", average(), \"ms\");\n        array.length = 0;\n    }\n}\n\nstring buildID()\n{\n    string s;\n\n    version(DigitalMars) {\n        s ~= \"DMD\";\n    } else version (LDC) {\n        s ~= \"LDC\";\n    } else version(GDC) {\n        s ~= \"GDC\";\n    } else {\n        s ~= \"n/a\";\n    }\n    s ~= \"/\";\n    version(Win32) {\n        s ~= \"Win32\";\n    } else version(Win64) {\n        s ~= \"Win64\";\n    } else {\n        s ~= \"Win??\";\n    }\n    s ~= \"/\";\n    version(CRuntime_DigitalMars) {\n        s ~= \"CRuntime_DigitalMars\";\n    } \n    version(CRuntime_Microsoft) {\n        s ~= \"CRuntime_Microsoft\";\n    }\n    return s;\n}\n\nint main()\n{\n    enum int BENCHMARK_LOOP = 10;\n    void taki() {\n        tarai(22, 11, 0);\n    }\n    void takd() {\n        tarai_double(22.0, 11.0, 0.0);\n    }\n    xStopWatch s;\n    s.benchMark(\"tarai int\", BENCHMARK_LOOP, &taki);\n    s.benchMark(\"tarai duble\", BENCHMARK_LOOP, &takd);\n    return 0;\n}\n\n\n\n\nbenchmark.c\n/**\n * Written in the C programming language.\n * clang version 3.8.1 (branches/release_38)\n * Target: x86_64-pc-windows-msvc\n * Thread model: posix\n * InstalledDir: C:\\D\\Clang\\bin\n *\n * http://llvm.org/releases/download.html\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n/*\n tarai\n \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u3057\u3066\u306f\u518d\u5e30\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057(\u623b\u308a)\u306e\u901f\u5ea6\u8a08\u6e2c\n\n https://ja.wikipedia.org/wiki/%E7%AB%B9%E5%86%85%E9%96%A2%E6%95%B0\n\n tak(22, 11, 0);\n*/\nint tarai(int x, int y, int z)\n{\n    if (x <= y) {\n        return z;\n    } else {\n        return tarai( tarai(x - 1, y, z), tarai(y - 1, z, x), tarai(z - 1, x, y) );\n    }\n}\ndouble tarai_double(double x, double y, double z)\n{\n    if (x <= y) {\n        return z;\n    } else {\n        return tarai_double( tarai_double(x - 1.0, y, z), tarai_double(y - 1.0, z, x), tarai_double(z - 1.0, x, y) );\n    }\n}\n\nint lcomp(const void *c1, const void *c2)\n{\n    long tmp1 = *(long *)c1;\n    long tmp2 = *(long *)c2;\n\n    if (tmp1 < tmp2) {\n        return -1;\n    }\n    if (tmp1 == tmp2) {\n        return  0;\n    }\n    if (tmp1 > tmp2) {\n        return  1;\n    }\n    return 0;\n}\n\n/*\nhttp://www.mm2d.net/main/prog/c/time-03.html\n\nstruct timespec {\n  time_t tv_sec; // Seconds.\n  long tv_nsec;  // Nanoseconds.\n};\n\n// 1sec = 1_000 msec = 1_000_000 usec = 1_000_000_000 nsec\n\n*/\n\nlong long getTimeSpec()\n{\n    struct timespec ts;\n    long long result;\n\n    timespec_get(&ts, TIME_UTC);\n    // clock_gettime(CLOCK_REALTIME, &ts1);\n    result = (ts.tv_sec * 1000000000) + ts.tv_nsec;\n    return result;\n}\n\nlong getElapsed(long long start)\n{\n    long long result, end = getTimeSpec();\n\n    result = end - start;\n/*  printf(\"start : %lld\\n\", start);\n    printf(\"end   : %lld\\n\", end);\n    printf(\"result: %lld ns\\n\", result);\n    printf(\"result: %lld ms\\n\", result / 1000000);\n*/\n    return result / 1000000; // to msec\n}\n\n\n#define BENCHMARK_LOOP 10\n\nvoid benchMark_int(void)\n{\n    long sw[BENCHMARK_LOOP];\n    printf(\"# tarai bench ----\\n\");\n\n    for (int i = 0; i < BENCHMARK_LOOP; i++) {\n        long long start = getTimeSpec();\n        tarai(22, 11, 0);\n        sw[i] = getElapsed(start);\n        // printf(\"%d: %ld\\n\", i, sw[i]);\n    }\n    qsort((void *)&sw, BENCHMARK_LOOP, sizeof(long), lcomp);\n    printf(\"fastest: %ldms\\n\", sw[0]);\n    printf(\"worst  : %ldms\\n\", sw[BENCHMARK_LOOP - 1]);\n\n    long total = 0;\n    for (int i = 0; i < BENCHMARK_LOOP; i++) {\n        total += sw[i];\n    }\n    printf(\"average: %ldms\\n\", total / BENCHMARK_LOOP);\n}\nvoid benchMark_double(void)\n{\n    long sw[BENCHMARK_LOOP];\n    printf(\"# taraid bench ----\\n\");\n\n    for (int i = 0; i < BENCHMARK_LOOP; i++) {\n        long long start = getTimeSpec();\n        tarai_double(22, 11, 0);\n        sw[i] = getElapsed(start);\n        // printf(\"%d: %ld\\n\", i, sw[i]);\n    }\n    qsort((void *)&sw, BENCHMARK_LOOP, sizeof(long), lcomp);\n    printf(\"fastest: %ldms\\n\", sw[0]);\n    printf(\"worst  : %ldms\\n\", sw[BENCHMARK_LOOP - 1]);\n\n    long total = 0;\n    for (int i = 0; i < BENCHMARK_LOOP; i++) {\n        total += sw[i];\n    }\n    printf(\"average: %ldms\\n\", total / BENCHMARK_LOOP);\n}\n\nint main()\n{\n    benchMark_int();\n    benchMark_double();\n    return 0;\n}\n\n\n\n\n\n\u25a1\u53c2\u8003\u30ea\u30f3\u30af\n-20\u306e\u8a00\u8a9e/\u74b0\u5883\u3067\u3066\u304d\u3068\u3046\u306b\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3057\u3066\u307f\u305f http://safx-dev.blogspot.jp/2015/11/20-rust-go-crystal-nim-swift.html\n\n-location https://github.com/SeijiFujita/quiita_works/tree/master/benchmark_dmd_ldc\ntag: dlang, tarai\nfilename: using_m64.md\nlast update: 2016/09/17\n\n\n\n\n\n\n\n\n## \u25a1DMD vs LDC \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c6\u30b9\u30c8(Windows\u7de8)\n\nDMD \u3068 LDC \u3069\u306e\u7a0b\u5ea6\u306e\u9055\u3044\u304c\u3042\u308b\u304b\u8a66\u3057\u307e\u3057\u305f\u3002LDC \u306f LLVM \u3068\u3044\u3046\u6c4e\u7528\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u9ad8\u901f\u306b\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306e\u751f\u6210\u3092\u884c\u3046\u306e\u304c\u7279\u5fb4\u3067\u3059\u306e\u3067\u3001DMD \u3088\u308a\u3069\u308c\u307b\u3069\u65e9\u304f\u306a\u308b\u306e\u304b\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\u4eca\u56de\u3001LDC \u306f\u6b8b\u5ff5\u306a\u304c\u3089 \u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3 -O \u3092\u4ed8\u3051\u308b\u3068\u30bf\u30a4\u30e0\u8a08\u6e2c\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u6700\u9069\u5316\u306f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u306a\u304a\u3001\u6bd4\u8f03\u3067 Clang \u3067\u3082\u8a08\u6e2c\u3057\u307e\u3057\u305f\u304c\u3053\u3061\u3089\u3082\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3 -O \u3092\u4ed8\u3051\u308b\u3068\u30bf\u30a4\u30e0\u8a08\u6e2c\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\n## \u25a1\u4eca\u56de\u306e\u6750\u6599\n\n1. dmd.2.071.1\n1. ldc2-1.0.0\n1. clang version 3.8.1 x86_64-pc-windows-msvc\n1. Windows 10 Home ver 1511 / build 10586.545\n\n\n## \u25a1\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u65b9\u6cd5\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3001\u305f\u3089\u3044\u307e\u308f\u3057\u95a2\u6570[^1]\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u3057\u3066\u306f\u6570\u5024\u306e\u6bd4\u8f03\u3068\u518d\u5e30\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306e\u901f\u5ea6\u8a08\u6e2c\u3092\u884c\u3044\u307e\u3059\u3002\n\n\n```d:tarai.d\nint tarai(int x, int y, int z)\n{\n\tif (x <= y) {\n\t\treturn z;\n\t} else {\n\t\treturn tarai( tarai(x - 1, y, z), tarai(y - 1, z, x), tarai(z - 1, x, y) );\n\t}\n}\ndouble tarai_double(double x, double y, double z)\n{\n\tif (x <= y) {\n\t\treturn z;\n\t} else {\n\t\treturn tarai_double( tarai_double(x - 1.0, y, z), tarai_double(y - 1.0, z, x), tarai_double(z - 1.0, x, y) );\n\t}\n}\n```\n\n\n\n[^1]:\u305f\u3089\u3044\u307e\u308f\u3057\u95a2\u6570/\u7af9\u5185\u95a2\u6570 https://ja.wikipedia.org/wiki/%E7%AB%B9%E5%86%85%E9%96%A2%E6%95%B0\n\n\n\n## \u25a1\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7d50\u679c\n\n\u305f\u3089\u3044\u307e\u308f\u3057\u95a2\u6570\u3092\uff11\uff10\u56de\u8a08\u6e2c\u3057\u305f\u5e73\u5747\u5024\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002Bold\u306f\u6700\u901f\u5024\u3067\u6570\u5024\u306e\u5358\u4f4d\u306f\u30df\u30ea\u79d2(ms)\n\nDMD\u30b3\u30f3\u30d1\u30a4\u30e9\u306f tarai_int \u306f\u601d\u3063\u305f\u3088\u308a\u65e9\u3044\u3067\u3059\u304c double \u306e\u6f14\u7b97\u306f w64\u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u306d\u3002\nLDC \u306f w64 \u306f\u65e9\u3044\u3082\u306e\u306e w32 \u306f\u305d\u308c\u307b\u3069\u65e9\u304f\u306a\u304f\u3066\u610f\u5916\u3067\u3059\u3002\n\u306a\u304a LDC \u306e\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3 -O \u3092\u4ed8\u3051\u308b\u3068\u3001\u305f\u3089\u3044\u307e\u308f\u3057\u95a2\u6570\u306e\u6642\u9593\u8a08\u6e2c\u304c 0\u79d2\u3067\u8a08\u6e2c\u51fa\u6765\u306a\u3044\u306e\u3067\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u4ed8\u3051\u307e\u305b\u3093\u3002\n\n\n\n| Compiler-32/64             | tarai_int   | tarai_double |\n|:---------------------------|:-----------:|:------------:|\n|DMD/w32/DigitalMars runtime |1497         |5084          |\n|DMD/w32/Microsoft runtime   |**1445**     |5122          |\n|DMD/w64/Microsoft runtime   |1618         |1959          |\n|LDC/w32                     |2185         |2947          |\n|LDC/w64                     |1475         |**1897**      |\n|*Clang/w64*                 |1670         |1640          |\n\n- \u6570\u5024\u306e\u5358\u4f4d\u306fmsec\n\n\n\n## \u25a1\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```bat:Build.bat\n@echo off\nrem ---- DMD\npath=C:\\D\\dmd.2.071.1\\windows\\bin;\n\ndmd -O -inline -release -boundscheck=off -m32 -ofbenchmark32.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark32.exe\n\ndmd -O -inline -release -boundscheck=off -m32mscoff -ofbenchmark32mscoff.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark32mscoff.exe\n\ndmd -O -inline -release -boundscheck=off -m64 -ofbenchmark64.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark64.exe\n\nrem ---- LDC\npath=C:\\D\\ldc2-1.0.0-win32-msvc\\bin;c:\\windows\\system32;\nldc2 -release -boundscheck=off -m32 -ofbenchmark32_ldc.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark32_ldc.exe\n\npath=C:\\D\\ldc2-1.0.0-win64-msvc\\bin;c:\\windows\\system32;\nldc2 -release -boundscheck=off -m64 -ofbenchmark64_ldc.exe benchmark.d\n@if ERRORLEVEL 1 goto :eof\nbenchmark64_ldc.exe\n\nrem ---- Clang\npath=C:\\D\\Clang\\bin;\nclang -o benchmark_clang.exe benchmark.c\n@if ERRORLEVEL 1 goto :eof\nbenchmark_clang.exe\n\necho done...\npause \n\n```\n\n\n```d:benchmark.d\n// Written in the D programming language.\n// dmd 2.071.1\n\n/*\n tarai\n \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u3057\u3066\u306f\u518d\u5e30\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057(\u623b\u308a)\u306e\u901f\u5ea6\u8a08\u6e2c\n https://ja.wikipedia.org/wiki/%E7%AB%B9%E5%86%85%E9%96%A2%E6%95%B0\n\n tak(22, 11, 0);\n*/\nint tarai(int x, int y, int z)\n{\n\tif (x <= y) {\n\t\treturn z;\n\t} else {\n\t\treturn tarai( tarai(x - 1, y, z), tarai(y - 1, z, x), tarai(z - 1, x, y) );\n\t}\n}\ndouble tarai_double(double x, double y, double z)\n{\n\tif (x <= y) {\n\t\treturn z;\n\t} else {\n\t\treturn tarai_double( tarai_double(x - 1.0, y, z), tarai_double(y - 1.0, z, x), tarai_double(z - 1.0, x, y) );\n\t}\n}\n\nstruct xStopWatch\n{\n\timport std.conv;\n\timport core.time;\n\timport std.datetime : StopWatch;\n\t\nprivate:\n\tStopWatch timer;\n\tlong[] array;\n\n\tvoid start() {\n\t\ttimer.start();\n\t}\n\tauto stop() {\n\t\ttimer.stop();\n\t\tlong result = timer.peek().to!(\"msecs\", long)();\n\t\tarray ~= result;\n\t\ttimer.reset();\n\t\treturn result;\n\t}\n\t\n\tvoid sort() {\n\t\timport std.algorithm.sorting : sort, isSorted;\n\t\tif (!isSorted(array))\n\t\t\tsort(array);\n\t}\n\tauto fastest() {\n\t\tsort();\n\t\treturn array[0];\n\t}\n\tauto worst() {\n\t\tsort();\n\t\treturn array[$-1];\n\t}\n\tauto average() {\n\t\tlong total;\n\t\tforeach (v; array)\n\t\t\ttotal += v;\n\t\treturn total / array.length;\n\t}\n\t\n\tpublic void benchMark(string title, int loop, void delegate() dg) {\n\t\timport std.stdio : writeln;\n\t\t\n\t\twriteln(\"# \", title, \" \", buildID(), \" bench ----\");\n\t\tforeach (i; 0 .. loop) {\n\t\t\tstart();\n\t\t\tdg();\n\t\t\tversion (ProgressView) {\n\t\t\t\twriteln(i, \": \", stop());\n\t\t\t} else {\n\t\t\t\tstop();\n\t\t\t}\n\t\t}\n\t\twriteln(\"fastest: \", fastest(), \"ms\");\n\t\twriteln(\"worst  : \", worst(), \"ms\");\n\t\twriteln(\"average: \", average(), \"ms\");\n\t\tarray.length = 0;\n\t}\n}\n\nstring buildID()\n{\n\tstring s;\n\t\n\tversion(DigitalMars) {\n\t\ts ~= \"DMD\";\n\t} else version (LDC) {\n\t\ts ~= \"LDC\";\n\t} else version(GDC) {\n\t\ts ~= \"GDC\";\n\t} else {\n\t\ts ~= \"n/a\";\n\t}\n\ts ~= \"/\";\n\tversion(Win32) {\n\t\ts ~= \"Win32\";\n\t} else version(Win64) {\n\t\ts ~= \"Win64\";\n\t} else {\n\t\ts ~= \"Win??\";\n\t}\n\ts ~= \"/\";\n\tversion(CRuntime_DigitalMars) {\n\t\ts ~= \"CRuntime_DigitalMars\";\n\t} \n\tversion(CRuntime_Microsoft) {\n\t\ts ~= \"CRuntime_Microsoft\";\n\t}\n\treturn s;\n}\n\nint main()\n{\n\tenum int BENCHMARK_LOOP = 10;\n\tvoid taki() {\n\t\ttarai(22, 11, 0);\n\t}\n\tvoid takd() {\n\t\ttarai_double(22.0, 11.0, 0.0);\n\t}\n\txStopWatch s;\n\ts.benchMark(\"tarai int\", BENCHMARK_LOOP, &taki);\n\ts.benchMark(\"tarai duble\", BENCHMARK_LOOP, &takd);\n\treturn 0;\n}\n\n```\n\n\n```c:benchmark.c\n/**\n * Written in the C programming language.\n * clang version 3.8.1 (branches/release_38)\n * Target: x86_64-pc-windows-msvc\n * Thread model: posix\n * InstalledDir: C:\\D\\Clang\\bin\n *\n * http://llvm.org/releases/download.html\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n/*\n tarai\n \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u3057\u3066\u306f\u518d\u5e30\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057(\u623b\u308a)\u306e\u901f\u5ea6\u8a08\u6e2c\n\n https://ja.wikipedia.org/wiki/%E7%AB%B9%E5%86%85%E9%96%A2%E6%95%B0\n\n tak(22, 11, 0);\n*/\nint tarai(int x, int y, int z)\n{\n\tif (x <= y) {\n\t\treturn z;\n\t} else {\n\t\treturn tarai( tarai(x - 1, y, z), tarai(y - 1, z, x), tarai(z - 1, x, y) );\n\t}\n}\ndouble tarai_double(double x, double y, double z)\n{\n\tif (x <= y) {\n\t\treturn z;\n\t} else {\n\t\treturn tarai_double( tarai_double(x - 1.0, y, z), tarai_double(y - 1.0, z, x), tarai_double(z - 1.0, x, y) );\n\t}\n}\n\nint lcomp(const void *c1, const void *c2)\n{\n\tlong tmp1 = *(long *)c1;\n\tlong tmp2 = *(long *)c2;\n\t\n\tif (tmp1 < tmp2) {\n\t  \treturn -1;\n\t}\n\tif (tmp1 == tmp2) {\n\t  \treturn  0;\n\t}\n\tif (tmp1 > tmp2) {\n\t  \treturn  1;\n\t}\n\treturn 0;\n}\n\n/*\nhttp://www.mm2d.net/main/prog/c/time-03.html\n\nstruct timespec {\n  time_t tv_sec; // Seconds.\n  long tv_nsec;  // Nanoseconds.\n};\n\n// 1sec = 1_000 msec = 1_000_000 usec = 1_000_000_000 nsec\n\n*/\n\nlong long getTimeSpec()\n{\n\tstruct timespec ts;\n\tlong long result;\n\t\n\ttimespec_get(&ts, TIME_UTC);\n\t// clock_gettime(CLOCK_REALTIME, &ts1);\n\tresult = (ts.tv_sec * 1000000000) + ts.tv_nsec;\n\treturn result;\n}\n\nlong getElapsed(long long start)\n{\n\tlong long result, end = getTimeSpec();\n\t\n\tresult = end - start;\n/*\tprintf(\"start : %lld\\n\", start);\n\tprintf(\"end   : %lld\\n\", end);\n\tprintf(\"result: %lld ns\\n\", result);\n\tprintf(\"result: %lld ms\\n\", result / 1000000);\n*/\n\treturn result / 1000000; // to msec\n}\n\n\n#define BENCHMARK_LOOP 10\n\nvoid benchMark_int(void)\n{\n\tlong sw[BENCHMARK_LOOP];\n\tprintf(\"# tarai bench ----\\n\");\n\t\n\tfor (int i = 0; i < BENCHMARK_LOOP; i++) {\n\t\tlong long start = getTimeSpec();\n\t\ttarai(22, 11, 0);\n\t\tsw[i] = getElapsed(start);\n\t\t// printf(\"%d: %ld\\n\", i, sw[i]);\n\t}\n\tqsort((void *)&sw, BENCHMARK_LOOP, sizeof(long), lcomp);\n\tprintf(\"fastest: %ldms\\n\", sw[0]);\n\tprintf(\"worst  : %ldms\\n\", sw[BENCHMARK_LOOP - 1]);\n\t\n\tlong total = 0;\n\tfor (int i = 0; i < BENCHMARK_LOOP; i++) {\n\t\ttotal += sw[i];\n\t}\n\tprintf(\"average: %ldms\\n\", total / BENCHMARK_LOOP);\n}\nvoid benchMark_double(void)\n{\n\tlong sw[BENCHMARK_LOOP];\n\tprintf(\"# taraid bench ----\\n\");\n\t\n\tfor (int i = 0; i < BENCHMARK_LOOP; i++) {\n\t\tlong long start = getTimeSpec();\n\t\ttarai_double(22, 11, 0);\n\t\tsw[i] = getElapsed(start);\n\t\t// printf(\"%d: %ld\\n\", i, sw[i]);\n\t}\n\tqsort((void *)&sw, BENCHMARK_LOOP, sizeof(long), lcomp);\n\tprintf(\"fastest: %ldms\\n\", sw[0]);\n\tprintf(\"worst  : %ldms\\n\", sw[BENCHMARK_LOOP - 1]);\n\t\n\tlong total = 0;\n\tfor (int i = 0; i < BENCHMARK_LOOP; i++) {\n\t\ttotal += sw[i];\n\t}\n\tprintf(\"average: %ldms\\n\", total / BENCHMARK_LOOP);\n}\n\nint main()\n{\n\tbenchMark_int();\n\tbenchMark_double();\n\treturn 0;\n}\n\n\n```\n\n\n## \u25a1\u53c2\u8003\u30ea\u30f3\u30af\n\n-20\u306e\u8a00\u8a9e/\u74b0\u5883\u3067\u3066\u304d\u3068\u3046\u306b\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3057\u3066\u307f\u305f http://safx-dev.blogspot.jp/2015/11/20-rust-go-crystal-nim-swift.html\n\n\n-------\n\n-location https://github.com/SeijiFujita/quiita_works/tree/master/benchmark_dmd_ldc\n\ntag: dlang, tarai\nfilename: using_m64.md\nlast update: 2016/09/17\n\n", "tags": ["dlang"]}