{"context": " More than 1 year has passed since last update.Swift\u306f6\u6708\u306b\u4e00\u5ea6\u624b\u3092\u51fa\u3057\u305f\u3093\u3067\u3059\u304c\u30012\u30f6\u6708\u4ee5\u4e0a\u653e\u7f6e\u3057\u3066\u305f\u3089\u3059\u3063\u304b\u308a\u5fd8\u308c\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u518d\u52c9\u5f37\u4e2d\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001\u4ee5\u524d\u304b\u3089\u8208\u5473\u306e\u3042\u3063\u305fBoid\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306fSprite Kit\u3092\u5229\u7528\u3002\n\uff08\u4f7f\u3063\u305f\u3053\u3068\u306a\u3044\u65b9\u306fSpriteKit.jp\u3092\u3069\u3046\u305e\u3002\uff09\n\n\u5b8c\u6210\u30a4\u30e1\u30fc\u30b8\n\n\u3053\u306e\u8a18\u4e8b\u306e\u5143\u306b\u306a\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\ntnantoka/boid\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f Game\u3001Game Technology\u306f SpriteKit \u3092\u9078\u629e\u3057\u307e\u3059\u3002\nGameScene.sks\u306eSKNode inspector\u3067Color\u3092 Black \u306b\u5909\u66f4\u3057\u3001Size\u306fW\u3092 640\u3001H\u3092 1136 \u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001GameScene.swift\u3092\u7de8\u96c6\u3057\u3066didMoveToView\u306e\u4e2d\u8eab\u3001touchesBegan\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\u3053\u306e\u72b6\u614b\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u771f\u3063\u9ed2\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u9ce5\uff08\uff1f\uff09\u306e\u8868\u793a\nBridNode\u3092\u8ffd\u52a0\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306b\u8868\u793a\u3057\u307e\u3059\u3002\n\u4e09\u89d2\u5f62\u3068\u304b\u3067\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u3001Sprite Kit\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u7c21\u5358\u306b\u8868\u793a\u3067\u304d\u308b\u306e\u304c\u9b45\u529b\u306a\u306e\u3067\u3001\u708e\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u52d5\u304b\u3057\u3066\u307f\u308b\u3068\u9b5a\u306b\u898b\u3048\u306a\u304f\u3082\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nResource\u304b\u3089 SpriteKit Particle File\u3001Particle template\u306f Fire \u3092\u9078\u629e\u3057\u3066\u3001fire.sks\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u203b Particle Emitter Editor\u3092\u958b\u304f\u3068Xcode\u304c\u843d\u3061\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4f5c\u6210\u3057\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u89d2\u5ea6\u3084\u30b5\u30a4\u30ba\u306a\u3069\u3092\u8abf\u6574\u3057\u3001BirdNode\u306e\u5b50\u30ce\u30fc\u30c9\u3068\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nBirdNode.swift\nimport SpriteKit\n\nclass BirdNode: SKNode {\n    override init() {\n        super.init()\n\n        self.addFireNode()\n    }\n\n    private func addFireNode() {\n        guard let fireNode = NSKeyedUnarchiver.unarchiveObjectWithFile(NSBundle.mainBundle().pathForResource(\"fire\", ofType: \"sks\")!) as? SKEmitterNode else { return }\n        fireNode.particleScale = 0.15\n        fireNode.xScale = 0.7\n        fireNode.yScale = 0.9\n\n        fireNode.particleLifetime = 0.3\n        fireNode.emissionAngle = -CGFloat(90.0 * M_PI / 180.0)\n        fireNode.emissionAngleRange = 0.0\n        fireNode.particlePositionRange = CGVector(dx: 0.0, dy: 0.1)\n\n        fireNode.particleColor = SKColor.orangeColor()\n\n        self.addChild(fireNode)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n    }\n}\n\n\n\u3053\u308c\u3092GameScene\u3067\u8868\u793a\u3057\u307e\u3059\u3002\n\nGameScene.swift\n    let numberOfBirds = 10\n\n    var birdNodes = [BirdNode]()\n\n    override func didMoveToView(view: SKView) {\n        let degree: Double = 360.0 / Double(self.numberOfBirds)\n        let radius = 120.0\n        for i in 0..<self.numberOfBirds {\n            let birdNode = BirdNode()\n            let radian = degree * Double(i) * M_PI / 180.0\n            let x = Double(CGRectGetMidX(self.frame)) + cos(radian) * radius\n            let y = Double(CGRectGetMidY(self.frame)) + sin(radian) * radius\n            birdNode.position = CGPoint(x: x, y: y)\n\n            self.addChild(birdNode)\n            self.birdNodes.append(birdNode)\n        }\n    }\n\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u30eb\u30fc\u30eb\u306e\u5b9f\u88c5\nBoids\u306f\u7c21\u5358\u306a3\u3064\u306e\u30eb\u30fc\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3001\u7fa4\u308c\u306b\u307f\u3048\u308b\u306e\u304c\u304a\u3082\u3057\u308d\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u4eba\u5de5 \u7121 \u547d\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\n\u305d\u308c\u3067\u306f\u3001\u30eb\u30fc\u30eb\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u30d9\u30fc\u30b9\u30af\u30e9\u30b9\n\u5404\u30eb\u30fc\u30eb\u306b\u5171\u901a\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nRule.swift\nimport UIKit\n\nclass Rule: NSObject {\n    var velocity: CGPoint!\n    var weight: CGFloat\n\n    var weighted: CGPoint {\n        return CGPoint(x: self.velocity.x * self.weight, y: self.velocity.y * self.weight)\n    }\n\n    init(weight: CGFloat) {\n        self.weight = weight\n        super.init()\n        self.clear()\n    }\n\n    func clear() {\n        self.velocity = CGPoint(x: 0.0, y: 0.0)\n    }\n\n    func evaluate(targetNode targetNode: BirdNode, birdNodes: [BirdNode]) {\n        self.clear()\n    }\n}\n\n\n\n\u30eb\u30fc\u30eb1\uff1a\u7d50\u5408\uff08Cohesion\uff09\n\u7fa4\u308c\u306e\u4e2d\u5fc3\u306b\u5411\u304b\u308f\u305b\u307e\u3059\u3002\n\nCohesionRule.swift\nimport UIKit\n\nclass CohesionRule: Rule {\n    let factor: CGFloat = 300.0\n\n    override func evaluate(targetNode targetNode: BirdNode, birdNodes: [BirdNode]) {\n        super.evaluate(targetNode: targetNode, birdNodes: birdNodes)\n\n        for birdNode in birdNodes {\n            if birdNode != targetNode {\n                self.velocity.x += birdNode.position.x\n                self.velocity.y += birdNode.position.y\n            }\n        }\n\n        self.velocity.x /= CGFloat(birdNodes.count - 1)\n        self.velocity.y /= CGFloat(birdNodes.count - 1)\n\n        self.velocity.x = (self.velocity.x - targetNode.position.x) / self.factor\n        self.velocity.y = (self.velocity.y - targetNode.position.y) / self.factor\n    }\n}\n\n\n\n\u30eb\u30fc\u30eb2\uff1a\u5206\u96e2\uff08Separation\uff09\n\u4ed6\u306eBirdNode\u3068\u3076\u3064\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nSeparationRule.swift\nimport UIKit\n\nclass SeparationRule: Rule {\n    let threshold = 30.0\n\n    override func evaluate(targetNode targetNode: BirdNode, birdNodes: [BirdNode]) {\n        super.evaluate(targetNode: targetNode, birdNodes: birdNodes)\n\n        for birdNode in birdNodes {\n            if birdNode != targetNode {\n                if self.distanceBetween(targetNode.position, birdNode.position) < self.threshold {\n                    self.velocity.x -= birdNode.position.x - targetNode.position.x\n                    self.velocity.y -= birdNode.position.y - targetNode.position.y\n                }\n            }\n        }\n    }\n\n    private func distanceBetween(pointA: CGPoint, _ pointB: CGPoint) -> Double {\n        let x = Double(pointA.x - pointB.x)\n        let y = Double(pointA.y - pointB.y)\n        return sqrt(x * x  + y * y)\n    }\n}\n\n\n\n\u30eb\u30fc\u30eb3\uff1a\u6574\u5217\uff08Alignment\uff09\n\u4ed6\u306eBirdNode\u3068\u901f\u5ea6\u30fb\u65b9\u5411\u3092\u5408\u308f\u305b\u307e\u3059\u3002\n\nAlignmentRule.swift\nimport UIKit\n\nclass AlignmentRule: Rule {\n    let factor: CGFloat = 2.0\n\n    override func evaluate(targetNode targetNode: BirdNode, birdNodes: [BirdNode]) {\n        super.evaluate(targetNode: targetNode, birdNodes: birdNodes)\n\n        for birdNode in birdNodes {\n            if birdNode != targetNode {\n                self.velocity.x += birdNode.velocity.x\n                self.velocity.y += birdNode.velocity.y\n            }\n        }\n\n        self.velocity.x /= CGFloat(birdNodes.count - 1)\n        self.velocity.y /= CGFloat(birdNodes.count - 1)\n\n        self.velocity.x = (self.velocity.x - targetNode.velocity.x) / self.factor\n        self.velocity.y = (self.velocity.y - targetNode.velocity.y) / self.factor\n    }\n}\n\n\n\n\u30eb\u30fc\u30eb\u306e\u8a55\u4fa1\nBirdNode\u304b\u3089\u5404\u30eb\u30fc\u30eb\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\n\u306a\u304a\u3001\u5404\u30eb\u30fc\u30eb\u306b\u306f\u91cd\u307f\u3092\u3064\u3051\u3066\u3044\u307e\u3059\u3002\uff08\u30eb\u30fc\u30eb1\u30012\u30013\u306e\u9806\u306b\u91cd\u304f\u3057\u3066\u3042\u308b\uff09\n\u307e\u305f\u3001\u30eb\u30fc\u30eb\u306e\u8a55\u4fa1\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u3001\u753b\u9762\u304b\u3089\u306f\u307f\u51fa\u3057\u3066\u3044\u306a\u3044\u304b\u3001maxSpeed\u3092\u8d85\u3048\u3066\u3044\u306a\u3044\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u306a\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u6700\u5f8c\u306b\u3001\u79fb\u52d5\u65b9\u5411\u306b\u56de\u8ee2\u3055\u305b\u308b\u51e6\u7406\u3082\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\n\nBirdNode.swift\n    let maxSpeed: CGFloat = 4.0\n    let size: CGFloat = 20.0\n\n    var velocity = CGPoint(x: 0.0, y: 0.0)\n    var rules: [Rule]!\n\n\n\n\u521d\u671f\u5316\n\nBirdNode.swift\n    override init() {\n        super.init()\n\n        self.rules = [\n            CohesionRule(weight: 1.0),\n            SeparationRule(weight: 0.8),\n            AlignmentRule(weight: 0.1)\n        ]\n\n        self.addFireNode()\n    }\n\n\n\n\u79fb\u52d5\u51e6\u7406\n\nBirdNode.swift\n    func update(birdNodes birdNodes: [BirdNode], frame: CGRect) {\n        for rule in self.rules {\n            rule.evaluate(targetNode: self, birdNodes: birdNodes)\n        }\n        self.move(frame)\n        self.rotate()\n    }\n\n    private func move(frame: CGRect) {\n        self.velocity.x += rules.reduce(0.0, combine: { sum, r in sum + r.weighted.x })\n        self.velocity.y += rules.reduce(0.0, combine: { sum, r in sum + r.weighted.y })\n\n        let vector = sqrt(self.velocity.x * self.velocity.x + self.velocity.y * self.velocity.y)\n        if (vector > self.maxSpeed) {\n            self.velocity.x = (self.velocity.x / vector) * self.maxSpeed\n            self.velocity.y = (self.velocity.y / vector) * self.maxSpeed\n        }\n\n        self.position.x += self.velocity.x\n        self.position.y += self.velocity.y\n\n        if (self.position.x - self.size <= 0) {\n            self.position.x = self.size\n            self.velocity.x *= -1\n        }\n        if (self.position.x + self.size >= CGRectGetWidth(frame)) {\n            self.position.x = CGRectGetWidth(frame) - self.size\n            self.velocity.x *= -1\n        }\n\n        if (self.position.y - self.size <= 0) {\n            self.position.y = self.size\n            self.velocity.y *= -1\n        }\n        if (self.position.y + self.size >= CGRectGetHeight(frame)) {\n            self.position.y = CGRectGetHeight(frame) - self.size\n            self.velocity.y *= -1\n        }\n    }\n\n    private func rotate() {\n        let radian = -atan2(Double(velocity.x), Double(velocity.y))\n        self.zRotation = CGFloat(radian)\n    }\n\n\n\n\u4ed5\u4e0a\u3052\nBirdNode\u306eupdate\u3092\u3001GameScene\u306eupdate\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\u3002\n\uff08\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\uff09\n\nGameScene.swift\n    override func update(currentTime: CFTimeInterval) {\n        for birdNode in self.birdNodes {\n            birdNode.update(birdNodes: self.birdNodes, frame: self.frame)\n        }\n    }\n}\n\n\n\u3053\u308c\u3067\u5b8c\u6210\u3067\u3059\u3002\n\nSwift \u00d7 Sprite Kit\u306e\u611f\u60f3\nCGFloat\u3068Double\u30fbFloat\u306eConversion\u3092\u5fd8\u308c\u3066\u3088\u304f\u6012\u3089\u308c\u307e\u3057\u305f\u3002\nObjective-C\u306e\u6642\u306f\u3001CGFloat\u3070\u3063\u304b\u308a\u4f7f\u3063\u3066\u3066\u3042\u3093\u307e\u308a\u610f\u8b58\u3057\u3066\u306a\u304b\u3063\u305f\u3067\u3059\u3002\n\n\u8ab2\u984c\n\u3053\u306e\u307e\u307e\u3060\u3068\u3001\u4f8b\u3048\u3070 \u30a8\u30b5\u306b\u53cd\u5fdc\u3059\u308b \u306e\u3088\u3046\u306b\u3001 \u4ed6\u306eBirdNode\u4ee5\u5916\u306b\u53cd\u5fdc\u3059\u308b\u30eb\u30fc\u30eb \u304c\u66f8\u304d\u3065\u3089\u3044\u306e\u3067\u4f55\u3068\u304b\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u53c2\u8003\u6587\u732e\n\n\u307b\u307c\u65e5\u520a\u30a4\u30c8\u30a4\u65b0\u805e - \u304c\u3093\u3070\u308c\u68ee\u5ddd\u304f\u3093\u306e\u907a\u4f1d\u5b50\u304f\u3093\nProcessing.js\u57fa\u790e\u6700\u901f\u5165\u9580 - catch.jp-wiki\n\u3010\u30dc\u30a4\u30c9\u3011JavaScript\u3068HTML5\u3067\u300e\u7fa4\u308c\u300f\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u307f\u3088\u3046\u3010\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3011 - \u3042\u306e\u306d\u30ce\u30fc\u30c8\u3002\n\u5feb\u6280\u5eb5\u306e\u96fb\u5b50\u66f8\u7c4d - Swift\u96e2\u9678\u30ac\u30a4\u30c9\n\n\nSwift\u306f6\u6708\u306b\u4e00\u5ea6\u624b\u3092\u51fa\u3057\u305f\u3093\u3067\u3059\u304c\u30012\u30f6\u6708\u4ee5\u4e0a\u653e\u7f6e\u3057\u3066\u305f\u3089\u3059\u3063\u304b\u308a\u5fd8\u308c\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u518d\u52c9\u5f37\u4e2d\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001\u4ee5\u524d\u304b\u3089\u8208\u5473\u306e\u3042\u3063\u305f[Boid](http://ja.wikipedia.org/wiki/%E3%83%9C%E3%82%A4%E3%83%89_(%E4%BA%BA%E5%B7%A5%E7%94%9F%E5%91%BD))\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306fSprite Kit\u3092\u5229\u7528\u3002\n\uff08\u4f7f\u3063\u305f\u3053\u3068\u306a\u3044\u65b9\u306f[SpriteKit.jp](http://spritekit.jp/)\u3092\u3069\u3046\u305e\u3002\uff09\n\n# \u5b8c\u6210\u30a4\u30e1\u30fc\u30b8\n\n![boid.gif](https://qiita-image-store.s3.amazonaws.com/0/2191/1760acf6-6d79-9394-edc5-8ab3e1e26079.gif \"boid.gif\")\n\n\u3053\u306e\u8a18\u4e8b\u306e\u5143\u306b\u306a\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n[tnantoka/boid](https://github.com/tnantoka/boid)\n\n# \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f **Game**\u3001`Game Technology`\u306f **SpriteKit** \u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n`GameScene.sks`\u306e`SKNode inspector`\u3067`Color`\u3092 **Black** \u306b\u5909\u66f4\u3057\u3001`Size`\u306f`W`\u3092 **640**\u3001`H`\u3092 **1136** \u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u307e\u305f\u3001`GameScene.swift`\u3092\u7de8\u96c6\u3057\u3066`didMoveToView`\u306e\u4e2d\u8eab\u3001`touchesBegan`\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u72b6\u614b\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u771f\u3063\u9ed2\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u9ce5\uff08\uff1f\uff09\u306e\u8868\u793a\n\n`BridNode`\u3092\u8ffd\u52a0\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306b\u8868\u793a\u3057\u307e\u3059\u3002\n\n\u4e09\u89d2\u5f62\u3068\u304b\u3067\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u3001Sprite Kit\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u7c21\u5358\u306b\u8868\u793a\u3067\u304d\u308b\u306e\u304c\u9b45\u529b\u306a\u306e\u3067\u3001\u708e\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u52d5\u304b\u3057\u3066\u307f\u308b\u3068\u9b5a\u306b\u898b\u3048\u306a\u304f\u3082\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n`Resource`\u304b\u3089 **SpriteKit Particle File**\u3001`Particle template`\u306f **Fire** \u3092\u9078\u629e\u3057\u3066\u3001`fire.sks`\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u203b `Particle Emitter Editor`\u3092\u958b\u304f\u3068Xcode\u304c\u843d\u3061\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4f5c\u6210\u3057\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u89d2\u5ea6\u3084\u30b5\u30a4\u30ba\u306a\u3069\u3092\u8abf\u6574\u3057\u3001BirdNode\u306e\u5b50\u30ce\u30fc\u30c9\u3068\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```swift:BirdNode.swift\nimport SpriteKit\n\nclass BirdNode: SKNode {\n    override init() {\n        super.init()\n        \n        self.addFireNode()\n    }\n    \n    private func addFireNode() {\n        guard let fireNode = NSKeyedUnarchiver.unarchiveObjectWithFile(NSBundle.mainBundle().pathForResource(\"fire\", ofType: \"sks\")!) as? SKEmitterNode else { return }\n        fireNode.particleScale = 0.15\n        fireNode.xScale = 0.7\n        fireNode.yScale = 0.9\n        \n        fireNode.particleLifetime = 0.3\n        fireNode.emissionAngle = -CGFloat(90.0 * M_PI / 180.0)\n        fireNode.emissionAngleRange = 0.0\n        fireNode.particlePositionRange = CGVector(dx: 0.0, dy: 0.1)\n        \n        fireNode.particleColor = SKColor.orangeColor()\n        \n        self.addChild(fireNode)\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n    }\n}\n```\n\n\u3053\u308c\u3092`GameScene`\u3067\u8868\u793a\u3057\u307e\u3059\u3002\n\n```swift:GameScene.swift\n    let numberOfBirds = 10\n\n    var birdNodes = [BirdNode]()\n\n    override func didMoveToView(view: SKView) {\n        let degree: Double = 360.0 / Double(self.numberOfBirds)\n        let radius = 120.0\n        for i in 0..<self.numberOfBirds {\n            let birdNode = BirdNode()\n            let radian = degree * Double(i) * M_PI / 180.0\n            let x = Double(CGRectGetMidX(self.frame)) + cos(radian) * radius\n            let y = Double(CGRectGetMidY(self.frame)) + sin(radian) * radius\n            birdNode.position = CGPoint(x: x, y: y)\n            \n            self.addChild(birdNode)\n            self.birdNodes.append(birdNode)\n        }\n    }\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n![boid.png](https://qiita-image-store.s3.amazonaws.com/0/2191/ca00f701-0f98-956a-dc65-d124241150b7.png \"boid.png\")\n\n\n# \u30eb\u30fc\u30eb\u306e\u5b9f\u88c5\n\nBoids\u306f\u7c21\u5358\u306a3\u3064\u306e\u30eb\u30fc\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3001\u7fa4\u308c\u306b\u307f\u3048\u308b\u306e\u304c\u304a\u3082\u3057\u308d\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u4eba\u5de5 **\u7121** \u547d\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u305d\u308c\u3067\u306f\u3001\u30eb\u30fc\u30eb\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n## \u30d9\u30fc\u30b9\u30af\u30e9\u30b9\n\n\u5404\u30eb\u30fc\u30eb\u306b\u5171\u901a\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```swift:Rule.swift\nimport UIKit\n\nclass Rule: NSObject {\n    var velocity: CGPoint!\n    var weight: CGFloat\n    \n    var weighted: CGPoint {\n        return CGPoint(x: self.velocity.x * self.weight, y: self.velocity.y * self.weight)\n    }\n    \n    init(weight: CGFloat) {\n        self.weight = weight\n        super.init()\n        self.clear()\n    }\n    \n    func clear() {\n        self.velocity = CGPoint(x: 0.0, y: 0.0)\n    }\n    \n    func evaluate(targetNode targetNode: BirdNode, birdNodes: [BirdNode]) {\n        self.clear()\n    }\n}\n```\n\n\n## \u30eb\u30fc\u30eb1\uff1a\u7d50\u5408\uff08Cohesion\uff09\n \n\u7fa4\u308c\u306e\u4e2d\u5fc3\u306b\u5411\u304b\u308f\u305b\u307e\u3059\u3002\n\n```swift:CohesionRule.swift\nimport UIKit\n\nclass CohesionRule: Rule {\n    let factor: CGFloat = 300.0\n    \n    override func evaluate(targetNode targetNode: BirdNode, birdNodes: [BirdNode]) {\n        super.evaluate(targetNode: targetNode, birdNodes: birdNodes)\n        \n        for birdNode in birdNodes {\n            if birdNode != targetNode {\n                self.velocity.x += birdNode.position.x\n                self.velocity.y += birdNode.position.y\n            }\n        }\n        \n        self.velocity.x /= CGFloat(birdNodes.count - 1)\n        self.velocity.y /= CGFloat(birdNodes.count - 1)\n        \n        self.velocity.x = (self.velocity.x - targetNode.position.x) / self.factor\n        self.velocity.y = (self.velocity.y - targetNode.position.y) / self.factor\n    }\n}\n```\n\n## \u30eb\u30fc\u30eb2\uff1a\u5206\u96e2\uff08Separation\uff09\n\n\u4ed6\u306e`BirdNode`\u3068\u3076\u3064\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```swift:SeparationRule.swift\nimport UIKit\n\nclass SeparationRule: Rule {\n    let threshold = 30.0\n    \n    override func evaluate(targetNode targetNode: BirdNode, birdNodes: [BirdNode]) {\n        super.evaluate(targetNode: targetNode, birdNodes: birdNodes)\n        \n        for birdNode in birdNodes {\n            if birdNode != targetNode {\n                if self.distanceBetween(targetNode.position, birdNode.position) < self.threshold {\n                    self.velocity.x -= birdNode.position.x - targetNode.position.x\n                    self.velocity.y -= birdNode.position.y - targetNode.position.y\n                }\n            }\n        }\n    }\n    \n    private func distanceBetween(pointA: CGPoint, _ pointB: CGPoint) -> Double {\n        let x = Double(pointA.x - pointB.x)\n        let y = Double(pointA.y - pointB.y)\n        return sqrt(x * x  + y * y)\n    }\n}\n```\n\n## \u30eb\u30fc\u30eb3\uff1a\u6574\u5217\uff08Alignment\uff09\n\n\u4ed6\u306e`BirdNode`\u3068\u901f\u5ea6\u30fb\u65b9\u5411\u3092\u5408\u308f\u305b\u307e\u3059\u3002\n\n```swift:AlignmentRule.swift\nimport UIKit\n\nclass AlignmentRule: Rule {\n    let factor: CGFloat = 2.0\n    \n    override func evaluate(targetNode targetNode: BirdNode, birdNodes: [BirdNode]) {\n        super.evaluate(targetNode: targetNode, birdNodes: birdNodes)\n        \n        for birdNode in birdNodes {\n            if birdNode != targetNode {\n                self.velocity.x += birdNode.velocity.x\n                self.velocity.y += birdNode.velocity.y\n            }\n        }\n        \n        self.velocity.x /= CGFloat(birdNodes.count - 1)\n        self.velocity.y /= CGFloat(birdNodes.count - 1)\n        \n        self.velocity.x = (self.velocity.x - targetNode.velocity.x) / self.factor\n        self.velocity.y = (self.velocity.y - targetNode.velocity.y) / self.factor\n    }\n}\n```\n\n# \u30eb\u30fc\u30eb\u306e\u8a55\u4fa1\n\n`BirdNode`\u304b\u3089\u5404\u30eb\u30fc\u30eb\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u5404\u30eb\u30fc\u30eb\u306b\u306f\u91cd\u307f\u3092\u3064\u3051\u3066\u3044\u307e\u3059\u3002\uff08\u30eb\u30fc\u30eb1\u30012\u30013\u306e\u9806\u306b\u91cd\u304f\u3057\u3066\u3042\u308b\uff09\n\n\u307e\u305f\u3001\u30eb\u30fc\u30eb\u306e\u8a55\u4fa1\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u3001\u753b\u9762\u304b\u3089\u306f\u307f\u51fa\u3057\u3066\u3044\u306a\u3044\u304b\u3001`maxSpeed`\u3092\u8d85\u3048\u3066\u3044\u306a\u3044\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u306a\u3044\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u6700\u5f8c\u306b\u3001\u79fb\u52d5\u65b9\u5411\u306b\u56de\u8ee2\u3055\u305b\u308b\u51e6\u7406\u3082\u3057\u307e\u3059\u3002\n\n## \u30d7\u30ed\u30d1\u30c6\u30a3\n\n```swift:BirdNode.swift\n    let maxSpeed: CGFloat = 4.0\n    let size: CGFloat = 20.0\n    \n    var velocity = CGPoint(x: 0.0, y: 0.0)\n    var rules: [Rule]!\n```\n\n## \u521d\u671f\u5316\n\n```swift:BirdNode.swift\n    override init() {\n        super.init()\n    \n        self.rules = [\n            CohesionRule(weight: 1.0),\n            SeparationRule(weight: 0.8),\n            AlignmentRule(weight: 0.1)\n        ]\n        \n        self.addFireNode()\n    }\n```\n\n## \u79fb\u52d5\u51e6\u7406\n\n```swift:BirdNode.swift\n    func update(birdNodes birdNodes: [BirdNode], frame: CGRect) {\n        for rule in self.rules {\n            rule.evaluate(targetNode: self, birdNodes: birdNodes)\n        }\n        self.move(frame)\n        self.rotate()\n    }\n    \n    private func move(frame: CGRect) {\n        self.velocity.x += rules.reduce(0.0, combine: { sum, r in sum + r.weighted.x })\n        self.velocity.y += rules.reduce(0.0, combine: { sum, r in sum + r.weighted.y })\n        \n        let vector = sqrt(self.velocity.x * self.velocity.x + self.velocity.y * self.velocity.y)\n        if (vector > self.maxSpeed) {\n            self.velocity.x = (self.velocity.x / vector) * self.maxSpeed\n            self.velocity.y = (self.velocity.y / vector) * self.maxSpeed\n        }\n        \n        self.position.x += self.velocity.x\n        self.position.y += self.velocity.y\n        \n        if (self.position.x - self.size <= 0) {\n            self.position.x = self.size\n            self.velocity.x *= -1\n        }\n        if (self.position.x + self.size >= CGRectGetWidth(frame)) {\n            self.position.x = CGRectGetWidth(frame) - self.size\n            self.velocity.x *= -1\n        }\n        \n        if (self.position.y - self.size <= 0) {\n            self.position.y = self.size\n            self.velocity.y *= -1\n        }\n        if (self.position.y + self.size >= CGRectGetHeight(frame)) {\n            self.position.y = CGRectGetHeight(frame) - self.size\n            self.velocity.y *= -1\n        }\n    }\n    \n    private func rotate() {\n        let radian = -atan2(Double(velocity.x), Double(velocity.y))\n        self.zRotation = CGFloat(radian)\n    }\n```\n\n# \u4ed5\u4e0a\u3052\n\n`BirdNode`\u306e`update`\u3092\u3001`GameScene`\u306e`update`\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\u3002\n\uff08\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\uff09\n\n```swift:GameScene.swift\n    override func update(currentTime: CFTimeInterval) {\n        for birdNode in self.birdNodes {\n            birdNode.update(birdNodes: self.birdNodes, frame: self.frame)\n        }\n    }\n}\n```\n\n\u3053\u308c\u3067\u5b8c\u6210\u3067\u3059\u3002\n\n# Swift \u00d7 Sprite Kit\u306e\u611f\u60f3\n\nCGFloat\u3068Double\u30fbFloat\u306eConversion\u3092\u5fd8\u308c\u3066\u3088\u304f\u6012\u3089\u308c\u307e\u3057\u305f\u3002\nObjective-C\u306e\u6642\u306f\u3001CGFloat\u3070\u3063\u304b\u308a\u4f7f\u3063\u3066\u3066\u3042\u3093\u307e\u308a\u610f\u8b58\u3057\u3066\u306a\u304b\u3063\u305f\u3067\u3059\u3002\n\n# \u8ab2\u984c\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u3001\u4f8b\u3048\u3070 **\u30a8\u30b5\u306b\u53cd\u5fdc\u3059\u308b** \u306e\u3088\u3046\u306b\u3001 **\u4ed6\u306e`BirdNode`\u4ee5\u5916\u306b\u53cd\u5fdc\u3059\u308b\u30eb\u30fc\u30eb** \u304c\u66f8\u304d\u3065\u3089\u3044\u306e\u3067\u4f55\u3068\u304b\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n# \u53c2\u8003\u6587\u732e\n\n* [\u307b\u307c\u65e5\u520a\u30a4\u30c8\u30a4\u65b0\u805e - \u304c\u3093\u3070\u308c\u68ee\u5ddd\u304f\u3093\u306e\u907a\u4f1d\u5b50\u304f\u3093](https://www.1101.com/morikawa/2001-06-25.html)\n* [Processing.js\u57fa\u790e\u6700\u901f\u5165\u9580 - catch.jp-wiki](http://www.catch.jp/wiki/?Processing.js%B4%F0%C1%C3%BA%C7%C2%AE%C6%FE%CC%E7#l538b340)\n* [\u3010\u30dc\u30a4\u30c9\u3011JavaScript\u3068HTML5\u3067\u300e\u7fa4\u308c\u300f\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u307f\u3088\u3046\u3010\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3011 - \u3042\u306e\u306d\u30ce\u30fc\u30c8\u3002](http://ottati.hatenablog.com/entry/2013/09/28/125953)\n* [\u5feb\u6280\u5eb5\u306e\u96fb\u5b50\u66f8\u7c4d - Swift\u96e2\u9678\u30ac\u30a4\u30c9](http://kaigian.co.jp/books/)\n", "tags": ["SpriteKit", "iOS", "Swift"]}