{"tags": ["Python", "python2.7"], "context": " More than 1 year has passed since last update.(\u305d\u306e\uff12\uff09\n\uff08\u6587\u4e2d\u306b\u51fa\u3066\u304f\u308b\u30da\u30fc\u30b8\u53c2\u7167\u306f \u7d71\u8a08\u5b66\u304c\u6700\u5f37\u306e\u5b66\u554f\u3067\u3042\u308b\uff3b\u5b9f\u8df5\u7de8\uff3d\u30c7\u30fc\u30bf\u5206\u6790\u306e\u305f\u3081\u306e\u601d\u60f3\u3068\u65b9\u6cd5 - \u897f\u5185\u5553 \u8457 \u3068\u3044\u3046\u672c\u306e\u30da\u30fc\u30b8\u3067\u3059\u3002\uff09\n\n\u30b3\u30a4\u30f3\u30922\u56de\u6295\u3052\u308b\u30921\u30bb\u30c3\u30c8\u3068\u3057\u30662\u30bb\u30c3\u30c8\u6295\u3052\u305f\u6642\u306e\u78ba\u7387\n\u305d\u306e\uff12\u3067\u306f\u3001P61\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u300c2\u56de\u6295\u3052\u308b\u300d\uff1d\u300c1\u30bb\u30c3\u30c8\u300d\u3068\u3057\u3066\u30012\u30bb\u30c3\u30c8\u6295\u3052\u305f\u5834\u5408\uff08\u3064\u307e\u308a\u30b3\u30a4\u30f3\u306f4\u56de\u6295\u3052\u308b\uff09\u306e\u7d50\u679c\u3092\u8003\u3048\u308b\u3002\n\u30b3\u30a4\u30f3\u306f4\u56de\u6295\u3052\u3089\u308c\u308b\u304b\u3089\u3001\u8868\u304c\u51fa\u308b\u30d1\u30bf\u30fc\u30f3\u306f\n\n\u8868\u304c0\u56de\n\u8868\u304c1\u56de\n\u8868\u304c2\u56de\n\u8868\u304c3\u56de\n\u8868\u304c4\u56de\n\n\u306e5\u901a\u308a\u3002\n\n\u30b3\u30fc\u30c9\n\nfrom random import randint\nfrom decimal import Decimal\nfrom prettytable import PrettyTable\nimport numpy as np\n\ndef tossBiasedCoin():\n    \"\"\" Returns 0 or 1 with 0 having 2/3 chance \"\"\"\n    return randint(0,2) % 2\n\n# Make a 3x3 array\ncounts = [[0 for j in range(3)] for i in range(3)]\n\n# Toss a coin many times to get counts\nsampleCount = 50000\nfor num in range(sampleCount):    \n    firstSet = [tossBiasedCoin(),tossBiasedCoin()]\n    secondSet = [tossBiasedCoin(),tossBiasedCoin()]\n    counts[sum(secondSet)][sum(firstSet)] += 1\n\n# Conert all counts to perentage\nTWOPLACES = Decimal(10) ** -2 \nfor i in range(3):\n    for j in range(3):\n        value = counts[i][j]        \n        counts[i][j] = (100 * Decimal(counts[i][j])/Decimal(sampleCount)).quantize(TWOPLACES)\n        print(\"Converted the value {} to percentage {}\".format(value, counts[i][j]))\n\n# Make summaries of number of heads.\nkeys = np.arange(5)\nvalues = [counts[0][0], # 0\n          counts[0][1]+counts[1][0], # 1\n          counts[0][2]+counts[2][0]+counts[1][1],\n          counts[1][2]+counts[2][1],\n          counts[2][2]]\n\n# Add row descriptions\ncounts[0].insert(0, '2nd set 0 head')\ncounts[1].insert(0, '2nd set 1 head')\ncounts[2].insert(0, '2nd set 2 heads')\n\n# Create table with column descriptions, add rows, then show it.\ntable = PrettyTable([\"\", \"1st set 0 head\", \"1st set 1 head\", \"1st set 2 heads\"])\ntable.padding_width = 1\ntable.add_row(counts[0])\ntable.add_row(counts[1])\ntable.add_row(counts[2])\nprint table\n\n# Draw a bar chart\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nrects = plt.bar(keys,\n                 values, \n                 0.5,\n                 alpha=0.4,\n                 align=\"center\", \n                 color='b')\n\nplt.xlabel('Number of heads with two sets')\nplt.ylabel('Probability (%)')\nplt.title('Probabilities heads with a biased coin')\nplt.xticks(keys, np.arange(5))\n\nplt.tight_layout()\nplt.show()\n\n\u57fa\u672c\u7684\u306b\u306f\u524d\u56de\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u9020\u3002\n\n\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\u304c\u5897\u3048\u305f\n\u56f31-19\u3068\u540c\u3058\u306b\u3059\u308b\u305f\u3081\u306b3x3\u306e list \u3092\u4f5c\u308b\u3002\n# Make a 3x3 array\ncounts = [[0 for j in range(3)] for i in range(3)]\n\n\n\u30b3\u30a4\u30f3\u30922\u30bb\u30c3\u30c8\uff081\u30bb\u30c3\u30c8=2\u56de\uff09\u6295\u3052\u308b\n50\u4e07\u56de\u30eb\u30fc\u30d7\u3055\u305b\u3001\u6bce\u56de\u5408\u8a084\u56de\u30b3\u30a4\u30f3\u3092\u6295\u3052\u308b\u3002\n# Toss a coin many times to get counts\nsampleCount = 50000\nfor num in range(sampleCount):    \n    firstSet = [tossBiasedCoin(),tossBiasedCoin()]\n    secondSet = [tossBiasedCoin(),tossBiasedCoin()]\n    counts[sum(secondSet)][sum(firstSet)] += 1\n\n\n\u68d2\u30b0\u30e9\u30d5\u306e\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u3061\u3087\u3063\u3068\u9762\u5012\u306b\u306a\u3063\u3066\u304d\u305f\u3002\u300c\u8868\u304c2\u56de\uff08\u679a\uff09\u300d\u3067\u308b\u30d1\u30bf\u30fc\u30f3\u306f\u30012\u30bb\u30c3\u30c8\u306e\u5185\u3001\n1\u30bb\u30c3\u30c8\u76ee\u304c2\u679a\u30012\u30bb\u30c3\u30c8\u76ee\u304c0\u679a\n1\u30bb\u30c3\u30c8\u76ee\u304c0\u679a\u30012\u30bb\u30c3\u30c8\u76ee\u304c2\u679a\n1\u30bb\u30c3\u30c8\u76ee\u304c1\u679a\u30012\u30bb\u30c3\u30c8\u76ee\u304c1\u679a\n\u306e3\u901a\u308a\u3042\u308b\u304b\u3089\u3001\u305d\u308c\u3092\u3059\u3079\u3066\u8db3\u3059\u3002\n# Make summaries of number of heads.\nkeys = np.arange(5)\nvalues = [counts[0][0], # 0\n          counts[0][1]+counts[1][0], # 1\n          counts[0][2]+counts[2][0]+counts[1][1],\n          counts[1][2]+counts[2][1],\n          counts[2][2]]\n\n\n\u8868\u306e\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n2x2\u69cb\u9020\u304b\u30893x3\u69cb\u9020\u306b\u5909\u3048\u308b\u305f\u3081\u306b\u30013\u884c\u76ee\u3092\u52a0\u3048\u308b\u3002\n# Add row descriptions\ncounts[0].insert(0, '2nd set 0 head')\ncounts[1].insert(0, '2nd set 1 head')\ncounts[2].insert(0, '2nd set 2 heads')\n\n\n\u8868\u3068\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n\u57fa\u672c\u7684\u306b\u306f\u5897\u3048\u305f\u5206\u306b\u5bfe\u5fdc\u3057\u3066\u5909\u66f4\u3092\u52a0\u3048\u3066\u3044\u308b\u3002\n# Create table with column descriptions, add rows, then show it.\ntable = PrettyTable([\"\", \"1st set 0 head\", \"1st set 1 head\", \"1st set 2 heads\"])\ntable.padding_width = 1\ntable.add_row(counts[0])\ntable.add_row(counts[1])\ntable.add_row(counts[2])\nprint table\n\n# Draw a bar chart\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nrects = plt.bar(keys,\n                 values, \n                 0.5,\n                 alpha=0.4,\n                 align=\"center\", \n                 color='b')\n\nplt.xlabel('Number of heads with two sets')\nplt.ylabel('Probability (%)')\nplt.title('Probabilities heads with a biased coin')\nplt.xticks(keys, np.arange(5))\n\nplt.tight_layout()\nplt.show()\n\n\n\u7d50\u679c\n\n\u306a\u3093\u3060\u304b\u300c\u6a19\u6e96\u504f\u5dee\u300d\u306e\u30b0\u30e9\u30d5\u3063\u307d\u304f\u898b\u3048\u3066\u6765\u305f\u305e\uff01\u3063\u3068\u3044\u3046\u306e\u304c\u3053\u306e\u672c\u306e\u3001\u3053\u306e\u7ae0\u304c\u30c7\u30e2\u30f3\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u305d\u3082\u305d\u3082\u306e\u5185\u5bb9\u3002\n\u3055\u3089\u306b\u300c\u8868\u304c1\u679a\u300d\u306b\u306a\u308b\u78ba\u7387\u304c\u4e00\u756a\u9ad8\u3044\u306e\u304c\u5206\u304b\u308b\u3002\u3053\u308c\u306f\u300c4\u56de\u6295\u3052\u3066\u8868\u304c\u51fa\u308b\u78ba\u7387\uff081/3\uff09\u300d\u306f\u3059\u306a\u308f\u3061\u300c4 x 1/3\u300d\uff1d 1.333\u3002\u3064\u307e\u308a\u300c4\u679a\u6295\u3052\u308a\u3083\u3041\u3060\u3044\u305f\u3044\u8868\u304c1\u679a\u3067\u308b\u305e\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\uff08\u305d\u306e\uff13\uff09\u306b\u3064\u3065\u304f\u3002\n(\u305d\u306e\uff12\uff09\n\n\uff08\u6587\u4e2d\u306b\u51fa\u3066\u304f\u308b\u30da\u30fc\u30b8\u53c2\u7167\u306f [\u7d71\u8a08\u5b66\u304c\u6700\u5f37\u306e\u5b66\u554f\u3067\u3042\u308b\uff3b\u5b9f\u8df5\u7de8\uff3d\u30c7\u30fc\u30bf\u5206\u6790\u306e\u305f\u3081\u306e\u601d\u60f3\u3068\u65b9\u6cd5 - \u897f\u5185\u5553 \u8457](http://www.diamond.co.jp/book/9784478028230.html) \u3068\u3044\u3046\u672c\u306e\u30da\u30fc\u30b8\u3067\u3059\u3002\uff09\n\n#\u30b3\u30a4\u30f3\u30922\u56de\u6295\u3052\u308b\u30921\u30bb\u30c3\u30c8\u3068\u3057\u30662\u30bb\u30c3\u30c8\u6295\u3052\u305f\u6642\u306e\u78ba\u7387\n\n\u305d\u306e\uff12\u3067\u306f\u3001P61\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u300c2\u56de\u6295\u3052\u308b\u300d\uff1d\u300c1\u30bb\u30c3\u30c8\u300d\u3068\u3057\u3066\u30012\u30bb\u30c3\u30c8\u6295\u3052\u305f\u5834\u5408\uff08\u3064\u307e\u308a\u30b3\u30a4\u30f3\u306f4\u56de\u6295\u3052\u308b\uff09\u306e\u7d50\u679c\u3092\u8003\u3048\u308b\u3002\n\u30b3\u30a4\u30f3\u306f4\u56de\u6295\u3052\u3089\u308c\u308b\u304b\u3089\u3001\u8868\u304c\u51fa\u308b\u30d1\u30bf\u30fc\u30f3\u306f\n\n- \u8868\u304c0\u56de\n- \u8868\u304c1\u56de\n- \u8868\u304c2\u56de\n- \u8868\u304c3\u56de\n- \u8868\u304c4\u56de\n\n\u306e5\u901a\u308a\u3002\n\n#\u30b3\u30fc\u30c9\n\n``` python\n\nfrom random import randint\nfrom decimal import Decimal\nfrom prettytable import PrettyTable\nimport numpy as np\n\ndef tossBiasedCoin():\n    \"\"\" Returns 0 or 1 with 0 having 2/3 chance \"\"\"\n    return randint(0,2) % 2\n\n# Make a 3x3 array\ncounts = [[0 for j in range(3)] for i in range(3)]\n\n# Toss a coin many times to get counts\nsampleCount = 50000\nfor num in range(sampleCount):    \n    firstSet = [tossBiasedCoin(),tossBiasedCoin()]\n    secondSet = [tossBiasedCoin(),tossBiasedCoin()]\n    counts[sum(secondSet)][sum(firstSet)] += 1\n\n# Conert all counts to perentage\nTWOPLACES = Decimal(10) ** -2 \nfor i in range(3):\n    for j in range(3):\n        value = counts[i][j]        \n        counts[i][j] = (100 * Decimal(counts[i][j])/Decimal(sampleCount)).quantize(TWOPLACES)\n        print(\"Converted the value {} to percentage {}\".format(value, counts[i][j]))\n\n# Make summaries of number of heads.\nkeys = np.arange(5)\nvalues = [counts[0][0], # 0\n          counts[0][1]+counts[1][0], # 1\n          counts[0][2]+counts[2][0]+counts[1][1],\n          counts[1][2]+counts[2][1],\n          counts[2][2]]\n          \n# Add row descriptions\ncounts[0].insert(0, '2nd set 0 head')\ncounts[1].insert(0, '2nd set 1 head')\ncounts[2].insert(0, '2nd set 2 heads')\n\n# Create table with column descriptions, add rows, then show it.\ntable = PrettyTable([\"\", \"1st set 0 head\", \"1st set 1 head\", \"1st set 2 heads\"])\ntable.padding_width = 1\ntable.add_row(counts[0])\ntable.add_row(counts[1])\ntable.add_row(counts[2])\nprint table\n\n# Draw a bar chart\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nrects = plt.bar(keys,\n                 values, \n                 0.5,\n                 alpha=0.4,\n                 align=\"center\", \n                 color='b')\n\nplt.xlabel('Number of heads with two sets')\nplt.ylabel('Probability (%)')\nplt.title('Probabilities heads with a biased coin')\nplt.xticks(keys, np.arange(5))\n\nplt.tight_layout()\nplt.show()\n```\n\n\u57fa\u672c\u7684\u306b\u306f\u524d\u56de\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u9020\u3002\n\n##\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\u304c\u5897\u3048\u305f\n\u56f31-19\u3068\u540c\u3058\u306b\u3059\u308b\u305f\u3081\u306b3x3\u306e list \u3092\u4f5c\u308b\u3002\n\n```py\n# Make a 3x3 array\ncounts = [[0 for j in range(3)] for i in range(3)]\n```\n\n##\u30b3\u30a4\u30f3\u30922\u30bb\u30c3\u30c8\uff081\u30bb\u30c3\u30c8=2\u56de\uff09\u6295\u3052\u308b\n\n50\u4e07\u56de\u30eb\u30fc\u30d7\u3055\u305b\u3001\u6bce\u56de\u5408\u8a084\u56de\u30b3\u30a4\u30f3\u3092\u6295\u3052\u308b\u3002\n\n```py\n# Toss a coin many times to get counts\nsampleCount = 50000\nfor num in range(sampleCount):    \n    firstSet = [tossBiasedCoin(),tossBiasedCoin()]\n    secondSet = [tossBiasedCoin(),tossBiasedCoin()]\n    counts[sum(secondSet)][sum(firstSet)] += 1\n```\n\n##\u68d2\u30b0\u30e9\u30d5\u306e\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n\u3061\u3087\u3063\u3068\u9762\u5012\u306b\u306a\u3063\u3066\u304d\u305f\u3002\u300c\u8868\u304c2\u56de\uff08\u679a\uff09\u300d\u3067\u308b\u30d1\u30bf\u30fc\u30f3\u306f\u30012\u30bb\u30c3\u30c8\u306e\u5185\u3001\n1\u30bb\u30c3\u30c8\u76ee\u304c2\u679a\u30012\u30bb\u30c3\u30c8\u76ee\u304c0\u679a\n1\u30bb\u30c3\u30c8\u76ee\u304c0\u679a\u30012\u30bb\u30c3\u30c8\u76ee\u304c2\u679a\n1\u30bb\u30c3\u30c8\u76ee\u304c1\u679a\u30012\u30bb\u30c3\u30c8\u76ee\u304c1\u679a\n\u306e3\u901a\u308a\u3042\u308b\u304b\u3089\u3001\u305d\u308c\u3092\u3059\u3079\u3066\u8db3\u3059\u3002\n\n```py\n# Make summaries of number of heads.\nkeys = np.arange(5)\nvalues = [counts[0][0], # 0\n          counts[0][1]+counts[1][0], # 1\n          counts[0][2]+counts[2][0]+counts[1][1],\n          counts[1][2]+counts[2][1],\n          counts[2][2]]\n```\n\n##\u8868\u306e\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n2x2\u69cb\u9020\u304b\u30893x3\u69cb\u9020\u306b\u5909\u3048\u308b\u305f\u3081\u306b\u30013\u884c\u76ee\u3092\u52a0\u3048\u308b\u3002\n\n```py\n# Add row descriptions\ncounts[0].insert(0, '2nd set 0 head')\ncounts[1].insert(0, '2nd set 1 head')\ncounts[2].insert(0, '2nd set 2 heads')\n```\n\n##\u8868\u3068\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n\n\u57fa\u672c\u7684\u306b\u306f\u5897\u3048\u305f\u5206\u306b\u5bfe\u5fdc\u3057\u3066\u5909\u66f4\u3092\u52a0\u3048\u3066\u3044\u308b\u3002\n\n```py\n# Create table with column descriptions, add rows, then show it.\ntable = PrettyTable([\"\", \"1st set 0 head\", \"1st set 1 head\", \"1st set 2 heads\"])\ntable.padding_width = 1\ntable.add_row(counts[0])\ntable.add_row(counts[1])\ntable.add_row(counts[2])\nprint table\n\n# Draw a bar chart\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nrects = plt.bar(keys,\n                 values, \n                 0.5,\n                 alpha=0.4,\n                 align=\"center\", \n                 color='b')\n\nplt.xlabel('Number of heads with two sets')\nplt.ylabel('Probability (%)')\nplt.title('Probabilities heads with a biased coin')\nplt.xticks(keys, np.arange(5))\n\nplt.tight_layout()\nplt.show()\n```\n\n#\u7d50\u679c\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/103139/abf7feaf-85ef-ee07-2882-a34c1d85de3a.png)\n\n\u306a\u3093\u3060\u304b\u300c\u6a19\u6e96\u504f\u5dee\u300d\u306e\u30b0\u30e9\u30d5\u3063\u307d\u304f\u898b\u3048\u3066\u6765\u305f\u305e\uff01\u3063\u3068\u3044\u3046\u306e\u304c\u3053\u306e\u672c\u306e\u3001\u3053\u306e\u7ae0\u304c\u30c7\u30e2\u30f3\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u305d\u3082\u305d\u3082\u306e\u5185\u5bb9\u3002\n\n\u3055\u3089\u306b\u300c\u8868\u304c1\u679a\u300d\u306b\u306a\u308b\u78ba\u7387\u304c\u4e00\u756a\u9ad8\u3044\u306e\u304c\u5206\u304b\u308b\u3002\u3053\u308c\u306f\u300c4\u56de\u6295\u3052\u3066\u8868\u304c\u51fa\u308b\u78ba\u7387\uff081/3\uff09\u300d\u306f\u3059\u306a\u308f\u3061\u300c4 x 1/3\u300d\uff1d 1.333\u3002\u3064\u307e\u308a\u300c4\u679a\u6295\u3052\u308a\u3083\u3041\u3060\u3044\u305f\u3044\u8868\u304c1\u679a\u3067\u308b\u305e\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\n[\uff08\u305d\u306e\uff13\uff09](http://qiita.com/yoshiwatanabe/items/09cd9814f1abc7c18c93)\u306b\u3064\u3065\u304f\u3002\n"}