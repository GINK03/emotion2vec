{"context": " More than 1 year has passed since last update.\u4f8b\u3048\u3070\u3001\u6628\u65e5\u306e\u7403\u4f53\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u3092\u767a\u5c55\u3055\u305b\u3066\u3001150BPM\u3067\u81a8\u5f35->\u53ce\u7e2e\u3092\u7e70\u308a\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u307f\u308b\u3002\n\u307e\u305a\u306f\u3001\u666e\u901a\u306bframeCount\u3092\u4f7f\u3063\u3066BPM\u306b\u63db\u7b97\u3059\u308b\u611f\u3058\u3067\u3002\n\nBeatSphere.pde\nprivate static final int PLOTS_COUNT = 7500;\nprivate static final int RADIUS = 100;\n\nprivate Plot[] plots = new Plot[PLOTS_COUNT];\n\nvoid setup() {\n  size(300, 300, P3D);\n  frameRate(60);\n\n  for (int i = 0; i < PLOTS_COUNT; i++) {\n    plots[i] = new Plot();\n  }\n\n  // \u30d7\u30ed\u30c3\u30c8\u306e\u8272\u3068\u5927\u304d\u3055\n  stroke(0, 192, 255, 180);\n  strokeWeight(4);\n}\n\nvoid draw() {\n\n  if (frameCount % 100 == 0) {\n    println(frameRate);\n  }\n\n  background(0);\n\n  // \u4e2d\u5fc3\u70b9\u3092\u79fb\u52d5\n  translate(width/2, height/2, 0);\n  rotateY(frameCount*0.005);\n  rotateZ(frameCount*0.005);\n\n  for (Plot p : plots) {\n    p.beat();\n    point(p.x, p.y, p.z);\n  }\n}\n\nprivate class Plot {\n\n  final float a, b, c;\n  float x, y, z;\n\n  Plot() {\n    // \u7403\u9762\u4e0a\u306e\u5ea7\u6a19\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u8a08\u7b97\n    float unitZ = random(-1, 1);\n    float radianT = radians(random(360));\n    float sinS = sq(unitZ);\n    a = sqrt(1 - sinS) * cos(radianT);\n    b = sqrt(1 - sinS) * sin(radianT);\n    c = unitZ;\n  }\n\n  // 60fps -> 3600fpm -> 3600fpm / 150bpm -> 24frame/beat\n  void beat() {\n    int state = frameCount % 24;\n    int r = RADIUS;\n    if (state < 6) {\n      r += (state + 1) * 3;\n    } else {\n      r += (18 - state);\n    }\n\n    x = r * a;\n    y = r * b;\n    z = r * c;\n  }\n}\n\n\nPlot\u30af\u30e9\u30b9\u306bbeat\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u3002\n60fps\u3060\u304b\u3089150bpm\u306b\u3059\u308b\u305f\u3081\u306b\u306f\u30011\u62cd24\u30d5\u30ec\u30fc\u30e0\u4e2d6\u30d5\u30ec\u30fc\u30e0\u3067\u81a8\u5f35\u3001\u6b8b\u308a18\u30d5\u30ec\u30fc\u30e0\u3067\u53ce\u7e2e\u3068\u3044\u3046\u8a08\u7b97\u3092\u3057\u3066\u3044\u308b\u3002\n\u3053\u3053\u3067\u554f\u984c\u306b\u306a\u308b\u306e\u304c\u3001PC\u30b9\u30da\u30c3\u30af\u304c\u4f4e\u304b\u3063\u305f\u308a\u30d7\u30ed\u30c3\u30c8\u306e\u63cf\u753b\u306a\u3069\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u308a\u3059\u308b\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u843d\u3061\u3066BPM\u304c\u72c2\u3063\u3066\u3057\u307e\u3046\u3002\u5b9f\u969b\u3001\u624b\u5143\u306ePC\u3060\u3068\u3001\u30d7\u30ed\u30c3\u30c8\u6570\u30927500\u3050\u3089\u3044\u306b\u5897\u3084\u3059\u3068\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c56\u524d\u5f8c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001150BPM\u306b\u306a\u3089\u306a\u3044\u3002\n\u305d\u3053\u3067\u3001\u7403\u4f53\u534a\u5f84\u306e\u8a08\u7b97\u3092\u5225\u30b9\u30ec\u30c3\u30c9\u306b\u5207\u308a\u96e2\u3057\u3066\u3001\u63cf\u753b\u30b9\u30ec\u30c3\u30c9\u306f\u8a08\u7b97\u6e08\u307f\u306e\u5024\u3092\u4f7f\u7528\u3057\u3066\u8868\u793a\u3059\u308b\u51e6\u7406\u306e\u307f\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u975e\u4f9d\u5b58\u3068\u306a\u308b\u3088\u3046\u306b\u5909\u66f4\u3057\u305f\u3002\n\nBeatSphere.pde\nimport java.util.concurrent.*;\n\nprivate static final int PLOTS_COUNT = 7500;\nprivate static final int RADIUS = 100;\n\nprivate Plot[] plots = new Plot[PLOTS_COUNT];\n\nvoid setup() {\n  size(300, 300, P3D);\n  frameRate(30);\n\n  for (int i = 0; i < PLOTS_COUNT; i++) {\n    plots[i] = new Plot();\n  }\n\n  // \u30d7\u30ed\u30c3\u30c8\u306e\u8272\u3068\u5927\u304d\u3055\n  stroke(0, 192, 255, 180);\n  strokeWeight(4);\n\n  // \u8a08\u7b97\u7528\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u958b\u59cb(25ms\u3054\u306816\u56de\u30671\u62cd)\n  // 150beat/min -> 2.5beat/sec -> 400msec/beat -> 25msec * 16times\n  ScheduledExecutorService schedule = Executors.newSingleThreadScheduledExecutor();\n  schedule.scheduleAtFixedRate(new Calculator(), 0, 25, TimeUnit.MILLISECONDS);\n}\n\nvoid draw() {\n  background(0);\n\n  // \u4e2d\u5fc3\u70b9\u3092\u79fb\u52d5\n  translate(width/2, height/2, 0);\n  rotateY(frameCount*0.01); // \u56de\u8ee2\u901f\u5ea6\u306f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\n  rotateZ(frameCount*0.01);\n\n  // \u8a08\u7b97\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u3084\u3063\u3066\u3044\u308b\u306e\u3067\u3001x,y,z\u5ea7\u6a19\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3059\u308b\u3060\u3051\u3002\n  for (Plot p : plots) {\n    point(p.x, p.y, p.z);\n  }\n}\n\nprivate class Plot {\n\n  final float a, b, c;\n  float x, y, z;\n  int state;\n\n  Plot() {\n    // \u7403\u9762\u4e0a\u306e\u5ea7\u6a19\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u8a08\u7b97\n    float unitZ = random(-1, 1);\n    float radianT = radians(random(360));\n    float sinS = sq(unitZ);\n    a = sqrt(1 - sinS) * cos(radianT);\n    b = sqrt(1 - sinS) * sin(radianT);\n    c = unitZ;\n\n    state = 0;\n  }\n\n  void beat() {\n    int r = RADIUS;\n    if (state < 4) {\n      r += (state + 1) * 3;\n    } else {\n      r += (12 - state);\n    }\n\n    x = r * a;\n    y = r * b;\n    z = r * c;\n\n    state = (state + 1) % 16;\n  }\n}\n\nclass Calculator implements Runnable {\n  void run() {\n    for (Plot p : plots) {\n      p.beat();\n    }\n  }\n}\n\n\n\u5143\u306e1\u62cd24\u30d5\u30ec\u30fc\u30e0\u306b\u5408\u308f\u305b\u308b\u3068\u8a08\u7b97\u30b9\u30ec\u30c3\u30c9\u306e\u8d77\u52d5\u5468\u671f\u304c\u30ad\u30ea\u304c\u60aa\u3044\u611f\u3058\u3060\u3063\u305f\u306e\u30671\u62cd16\u56de\u306e\u51e6\u7406\u3067\u52d5\u4f5c\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u3002\nScheduledExecutorService\u3092\u4f7f\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u30d7\u30ed\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u3001\u81ea\u5206\u306ex,y,z\u5ea7\u6a19\u3092\u8a08\u7b97\u3059\u308b\u51e6\u7406\u309225ms\u306b1\u56de\u547c\u3073\u51fa\u3059\u3002\u63cf\u753b\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u30d7\u30ed\u30c3\u30c8\u304b\u3089x,y,z\u5ea7\u6a19\u306e\u5024\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3059\u308b\u3060\u3051\u3002\n\u30d7\u30ed\u30c3\u30c8\u306e\u63cf\u753b\u4e2d\u306b25ms\u5468\u671f\u304c\u88ab\u3063\u305f\u3068\u3057\u3066\u3082\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u8a08\u7b97\u3055\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u6b21\u56de\u63cf\u753b\u6642\u306b\u305d\u306e\u8a08\u7b97\u6e08\u307f\u306e\u5024\u304c\u4f7f\u7528\u3055\u308c\u308b\u3002\u63cf\u753b\u3067\u30ab\u30af\u3064\u304d\u306f\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u81a8\u5f35\u30fb\u53ce\u7e2e\u81ea\u4f53\u306f150BPM\u306e\u307e\u307e\u5909\u308f\u3089\u306a\u3044\u3002\u3068\u3044\u3046\u611f\u3058\u3002\n\u5f53\u7136\u3060\u3051\u3069\u3001\u8a08\u7b97\u51e6\u7406\u306e\u8d77\u52d5\u5468\u671f\u304c1\u56de\u306e\u8a08\u7b97\u51e6\u7406\u306b\u304b\u304b\u308b\u6642\u9593\u3092\u8d85\u3048\u3066\u3057\u307e\u3046\u3068\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u306e\u3067\u3001\u305d\u3053\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\n\u4f8b\u3048\u3070\u3001\u6628\u65e5\u306e\u7403\u4f53\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u3092\u767a\u5c55\u3055\u305b\u3066\u3001150BPM\u3067\u81a8\u5f35->\u53ce\u7e2e\u3092\u7e70\u308a\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u307f\u308b\u3002\n\u307e\u305a\u306f\u3001\u666e\u901a\u306bframeCount\u3092\u4f7f\u3063\u3066BPM\u306b\u63db\u7b97\u3059\u308b\u611f\u3058\u3067\u3002\n\n```java:BeatSphere.pde\nprivate static final int PLOTS_COUNT = 7500;\nprivate static final int RADIUS = 100;\n\nprivate Plot[] plots = new Plot[PLOTS_COUNT];\n\nvoid setup() {\n  size(300, 300, P3D);\n  frameRate(60);\n\n  for (int i = 0; i < PLOTS_COUNT; i++) {\n    plots[i] = new Plot();\n  }\n\n  // \u30d7\u30ed\u30c3\u30c8\u306e\u8272\u3068\u5927\u304d\u3055\n  stroke(0, 192, 255, 180);\n  strokeWeight(4);\n}\n\nvoid draw() {\n\n  if (frameCount % 100 == 0) {\n    println(frameRate);\n  }\n\n  background(0);\n\n  // \u4e2d\u5fc3\u70b9\u3092\u79fb\u52d5\n  translate(width/2, height/2, 0);\n  rotateY(frameCount*0.005);\n  rotateZ(frameCount*0.005);\n\n  for (Plot p : plots) {\n    p.beat();\n    point(p.x, p.y, p.z);\n  }\n}\n\nprivate class Plot {\n\n  final float a, b, c;\n  float x, y, z;\n\n  Plot() {\n    // \u7403\u9762\u4e0a\u306e\u5ea7\u6a19\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u8a08\u7b97\n    float unitZ = random(-1, 1);\n    float radianT = radians(random(360));\n    float sinS = sq(unitZ);\n    a = sqrt(1 - sinS) * cos(radianT);\n    b = sqrt(1 - sinS) * sin(radianT);\n    c = unitZ;\n  }\n\n  // 60fps -> 3600fpm -> 3600fpm / 150bpm -> 24frame/beat\n  void beat() {\n    int state = frameCount % 24;\n    int r = RADIUS;\n    if (state < 6) {\n      r += (state + 1) * 3;\n    } else {\n      r += (18 - state);\n    }\n\n    x = r * a;\n    y = r * b;\n    z = r * c;\n  }\n}\n```\n\nPlot\u30af\u30e9\u30b9\u306bbeat\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u3002\n60fps\u3060\u304b\u3089150bpm\u306b\u3059\u308b\u305f\u3081\u306b\u306f\u30011\u62cd24\u30d5\u30ec\u30fc\u30e0\u4e2d6\u30d5\u30ec\u30fc\u30e0\u3067\u81a8\u5f35\u3001\u6b8b\u308a18\u30d5\u30ec\u30fc\u30e0\u3067\u53ce\u7e2e\u3068\u3044\u3046\u8a08\u7b97\u3092\u3057\u3066\u3044\u308b\u3002\n\n\u3053\u3053\u3067\u554f\u984c\u306b\u306a\u308b\u306e\u304c\u3001PC\u30b9\u30da\u30c3\u30af\u304c\u4f4e\u304b\u3063\u305f\u308a\u30d7\u30ed\u30c3\u30c8\u306e\u63cf\u753b\u306a\u3069\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u308a\u3059\u308b\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u843d\u3061\u3066BPM\u304c\u72c2\u3063\u3066\u3057\u307e\u3046\u3002\u5b9f\u969b\u3001\u624b\u5143\u306ePC\u3060\u3068\u3001\u30d7\u30ed\u30c3\u30c8\u6570\u30927500\u3050\u3089\u3044\u306b\u5897\u3084\u3059\u3068\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c56\u524d\u5f8c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001150BPM\u306b\u306a\u3089\u306a\u3044\u3002\n\n\u305d\u3053\u3067\u3001\u7403\u4f53\u534a\u5f84\u306e\u8a08\u7b97\u3092\u5225\u30b9\u30ec\u30c3\u30c9\u306b\u5207\u308a\u96e2\u3057\u3066\u3001\u63cf\u753b\u30b9\u30ec\u30c3\u30c9\u306f\u8a08\u7b97\u6e08\u307f\u306e\u5024\u3092\u4f7f\u7528\u3057\u3066\u8868\u793a\u3059\u308b\u51e6\u7406\u306e\u307f\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u975e\u4f9d\u5b58\u3068\u306a\u308b\u3088\u3046\u306b\u5909\u66f4\u3057\u305f\u3002\n\n```java:BeatSphere.pde\nimport java.util.concurrent.*;\n\nprivate static final int PLOTS_COUNT = 7500;\nprivate static final int RADIUS = 100;\n\nprivate Plot[] plots = new Plot[PLOTS_COUNT];\n\nvoid setup() {\n  size(300, 300, P3D);\n  frameRate(30);\n\n  for (int i = 0; i < PLOTS_COUNT; i++) {\n    plots[i] = new Plot();\n  }\n\n  // \u30d7\u30ed\u30c3\u30c8\u306e\u8272\u3068\u5927\u304d\u3055\n  stroke(0, 192, 255, 180);\n  strokeWeight(4);\n\n  // \u8a08\u7b97\u7528\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u958b\u59cb(25ms\u3054\u306816\u56de\u30671\u62cd)\n  // 150beat/min -> 2.5beat/sec -> 400msec/beat -> 25msec * 16times\n  ScheduledExecutorService schedule = Executors.newSingleThreadScheduledExecutor();\n  schedule.scheduleAtFixedRate(new Calculator(), 0, 25, TimeUnit.MILLISECONDS);\n}\n\nvoid draw() {\n  background(0);\n\n  // \u4e2d\u5fc3\u70b9\u3092\u79fb\u52d5\n  translate(width/2, height/2, 0);\n  rotateY(frameCount*0.01); // \u56de\u8ee2\u901f\u5ea6\u306f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\n  rotateZ(frameCount*0.01);\n\n  // \u8a08\u7b97\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u3084\u3063\u3066\u3044\u308b\u306e\u3067\u3001x,y,z\u5ea7\u6a19\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3059\u308b\u3060\u3051\u3002\n  for (Plot p : plots) {\n    point(p.x, p.y, p.z);\n  }\n}\n\nprivate class Plot {\n\n  final float a, b, c;\n  float x, y, z;\n  int state;\n\n  Plot() {\n    // \u7403\u9762\u4e0a\u306e\u5ea7\u6a19\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u8a08\u7b97\n    float unitZ = random(-1, 1);\n    float radianT = radians(random(360));\n    float sinS = sq(unitZ);\n    a = sqrt(1 - sinS) * cos(radianT);\n    b = sqrt(1 - sinS) * sin(radianT);\n    c = unitZ;\n\n    state = 0;\n  }\n\n  void beat() {\n    int r = RADIUS;\n    if (state < 4) {\n      r += (state + 1) * 3;\n    } else {\n      r += (12 - state);\n    }\n\n    x = r * a;\n    y = r * b;\n    z = r * c;\n\n    state = (state + 1) % 16;\n  }\n}\n\nclass Calculator implements Runnable {\n  void run() {\n    for (Plot p : plots) {\n      p.beat();\n    }\n  }\n}\n```\n\n\u5143\u306e1\u62cd24\u30d5\u30ec\u30fc\u30e0\u306b\u5408\u308f\u305b\u308b\u3068\u8a08\u7b97\u30b9\u30ec\u30c3\u30c9\u306e\u8d77\u52d5\u5468\u671f\u304c\u30ad\u30ea\u304c\u60aa\u3044\u611f\u3058\u3060\u3063\u305f\u306e\u30671\u62cd16\u56de\u306e\u51e6\u7406\u3067\u52d5\u4f5c\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\nScheduledExecutorService\u3092\u4f7f\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u30d7\u30ed\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u3001\u81ea\u5206\u306ex,y,z\u5ea7\u6a19\u3092\u8a08\u7b97\u3059\u308b\u51e6\u7406\u309225ms\u306b1\u56de\u547c\u3073\u51fa\u3059\u3002\u63cf\u753b\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u30d7\u30ed\u30c3\u30c8\u304b\u3089x,y,z\u5ea7\u6a19\u306e\u5024\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3059\u308b\u3060\u3051\u3002\n\u30d7\u30ed\u30c3\u30c8\u306e\u63cf\u753b\u4e2d\u306b25ms\u5468\u671f\u304c\u88ab\u3063\u305f\u3068\u3057\u3066\u3082\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u8a08\u7b97\u3055\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u6b21\u56de\u63cf\u753b\u6642\u306b\u305d\u306e\u8a08\u7b97\u6e08\u307f\u306e\u5024\u304c\u4f7f\u7528\u3055\u308c\u308b\u3002\u63cf\u753b\u3067\u30ab\u30af\u3064\u304d\u306f\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u81a8\u5f35\u30fb\u53ce\u7e2e\u81ea\u4f53\u306f150BPM\u306e\u307e\u307e\u5909\u308f\u3089\u306a\u3044\u3002\u3068\u3044\u3046\u611f\u3058\u3002\n\n\u5f53\u7136\u3060\u3051\u3069\u3001\u8a08\u7b97\u51e6\u7406\u306e\u8d77\u52d5\u5468\u671f\u304c1\u56de\u306e\u8a08\u7b97\u51e6\u7406\u306b\u304b\u304b\u308b\u6642\u9593\u3092\u8d85\u3048\u3066\u3057\u307e\u3046\u3068\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u306e\u3067\u3001\u305d\u3053\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n", "tags": ["processing"]}