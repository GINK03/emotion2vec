{"context": "Nordic\u793e\u306eBLE\u30e2\u30b8\u30e5\u30fc\u30ebnRF51822\u306eSPI\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u305f\u304f\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fSPI\u306f\u30de\u30b9\u30bf\u30fc\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\u8aad\u8005\u69d8\u306fSPI\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u65e2\u306b\u77e5\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u524d\u63d0\u3067\u4ee5\u4e0b\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u6a5f\u80fd\u306e\u30a2\u30c9\u30ec\u30b9\u5272\u308a\u5f53\u3066\nnRF51822\u306eSPI\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u3001\u30de\u30b9\u30bf\u30fc\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308bSPI0\u3068SPI1\u3068\u30b9\u30ec\u30fc\u30d6\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308bSPIS1\u304c\u3042\u308a\u307e\u3059\u3002\n\nSPI Slave\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u3068SPI Master 1ch\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u3068I2C 1ch\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u306f\u540c\u3058\u30a2\u30c9\u30ec\u30b90x40004000\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3053\u306e3\u3064\u306e\u6a5f\u80fd\u3092\u540c\u6642\u306b\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001SPI Master 0ch\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u3068I2C 0ch\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u306f\u540c\u3058\u30a2\u30c9\u30ec\u30b90x40003000\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3053\u306e2\u3064\u306e\u6a5f\u80fd\u3092\u540c\u6642\u306b\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u3067\u3059\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u6a5f\u80fd\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u3067\u30011\u3064\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3067\u4e21\u65b9\u306e\u6a5f\u80fd\u304c\u4f7f\u3048\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08\u5207\u308a\u66ff\u3048\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u5225\u9014\u8a18\u4e8b\u306b\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\uff09\n\n\u8a2d\u5b9a\u30ec\u30b8\u30b9\u30bf\n\n\n\u30b7\u30fc\u30b1\u30f3\u30b9\nSPI\u30de\u30b9\u30bf\u30fc\u6a5f\u80fd\u306f\u3001MISO\u4fe1\u53f7\u3001MOSI\u4fe1\u53f7\u3001SCLK\u4fe1\u53f7\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\nSPI\u5236\u5fa1\u306b\u5fc5\u8981\u306a\u30c1\u30c3\u30d7\u30bb\u30ec\u30af\u30c8\u4fe1\u53f7\u306f\u30e6\u30fc\u30b6\u30fc\u304c\u3069\u306e\u30b9\u30ec\u30fc\u30d6\u30c7\u30d0\u30a4\u30b9\u3092\u4f7f\u3046\u304b\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u306a\u306e\u3067\u3001SPI\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u81ea\u52d5\u5236\u5fa1\u3057\u307e\u305b\u3093\u3002\n\u30e6\u30fc\u30b6\u30fc\u304cGPIO\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7528\u3044\u3066ON/OFF\u5236\u5fa1\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nSPI\u901a\u4fe1\u306f\u4ee5\u4e0b\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n\u2460TXD\u30ec\u30b8\u30b9\u30bf\u306b1byte\u76ee\u3092\u66f8\u304d\u8fbc\u3080\u3068\u3001\u76f4\u5f8c\u306b2byte\u76ee\u3082TXD\u30ec\u30b8\u30b9\u30bf\u306b\u66f8\u304d\u8fbc\u307e\u308c\u30011byte\u76ee\u306e\u9001\u4fe1\u304c\u59cb\u307e\u308b\u3002\n\u2461\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u3068\u540c\u6642\u306b\u3001RXD\u30ec\u30b8\u30b9\u30bf\u306b\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3059\u308b\u3002\n\u3000RXD\u30ec\u30b8\u30b9\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u304cRXD\u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u3055\u308c\u308b\u3002\n\u2462READY\u30a4\u30d9\u30f3\u30c8\u304cRXD\u30ec\u30b8\u30b9\u30bf\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u305f\u3073\u306b\u767a\u751f\u3059\u308b\u3002\n\u3000RXD\u30ec\u30b8\u30b9\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u306a\u3051\u308c\u3070\u3001\u3044\u3064\u307e\u3067\u5f85\u3063\u3066\u3082READY\u30a4\u30d9\u30f3\u30c8\u306f\u767a\u751f\u305b\u305a\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u9001\u53d7\u4fe1\u306f\u958b\u59cb\u3055\u308c\u306a\u3044\u3002\n\u2463TXD\u30ec\u30b8\u30b9\u30bf\u306b\u9001\u4fe1\u30c7\u30fc\u30bf\u304c\u306a\u304f\u306a\u308b\u3068\u52d5\u4f5c\u306f\u5b8c\u4e86\u3059\u308b\u3002\n\n\n\u6ce2\u5f62\n\u5b9f\u969b\u306bSPI\u901a\u4fe1\u3092\u884c\u3063\u305f\u6642\u306e\u6ce2\u5f62\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\uff1aSPI\u9001\u53d7\u4fe1\u51e6\u7406\n\u4ee5\u4e0b\u306fNordic\u793e\u304c\u516c\u958b\u3057\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u306e\u629c\u7c8b\u3067\u3059\u3002\nhttps://devzone.nordicsemi.com/attachment/f3b250dd5a8d462aca54b23d4a4d2b2c\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067SPI\u9001\u53d7\u4fe1\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\nuint32_t spi_master_send_recv(const spi_master_hw_instance_t spi_master_hw_instance,                                            \n                              uint8_t * const p_tx_buf, const uint16_t tx_buf_len,                                          \n                              uint8_t * const p_rx_buf, const uint16_t rx_buf_len)                                          \n{                                           \n    #if defined(SPI_MASTER_0_ENABLE) || defined(SPI_MASTER_1_ENABLE)                                            \n\n    volatile spi_master_instance_t * p_spi_instance = spi_master_get_instance(                                          \n        spi_master_hw_instance);                                            \n    APP_ERROR_CHECK_BOOL(p_spi_instance != NULL);                                           \n\n    uint32_t err_code   = NRF_SUCCESS;                                          \n    uint16_t max_length = 0;                                            \n\n    uint8_t nested_critical_region = 0;                                         \n\n    //Check if disable all IRQs flag is set //\u5272\u8fbc\u307f\u7121\u52b9\u51e6\u7406             \n    if (p_spi_instance->disable_all_irq)                                            \n    {                                           \n        //Disable interrupts.                                           \n        APP_ERROR_CHECK(sd_nvic_critical_region_enter(&nested_critical_region));                                            \n    }                                           \n    else                                            \n    {                                           \n        //Disable interrupt SPI.                                            \n        APP_ERROR_CHECK(sd_nvic_DisableIRQ(p_spi_instance->irq_type));                                          \n    }                                           \n\n    //Initialize and perform data transfer                                          \n    if (p_spi_instance->state == SPI_MASTER_STATE_IDLE) //IDLE\u72b6\u614b\u304b\u306e\u78ba\u8a8d                \n    {                                           \n        max_length = (rx_buf_len > tx_buf_len) ? rx_buf_len : tx_buf_len; //\u6700\u5927\u9001\u53d7\u4fe1\u30d0\u30a4\u30c8\u6570\u78ba\u8a8d\uff08\u9001\u4fe1\u30c7\u30fc\u30bf\u3068\u53d7\u4fe1\u30c7\u30fc\u30bf\u306e\u3069\u3061\u3089\u304c\u591a\u3044\u304b\u3092\u78ba\u8a8d\u3057\u3066\u3001\u591a\u3044\u307b\u3046\u306b\u5408\u308f\u305b\u308b\u3002\uff09        \n\n        if (max_length > 0)                                         \n        {                                           \n            p_spi_instance->state        = SPI_MASTER_STATE_BUSY; //IDLE\u72b6\u614b\u304b\u3089BUSY\u72b6\u614b\u3078\u9077\u79fb         \n            p_spi_instance->bytes_count  = 0; //\u9001\u53d7\u4fe1\u30ab\u30a6\u30f3\u30bf\u30af\u30ea\u30a2          \n            p_spi_instance->started_flag = false; //\u958b\u59cb\u30d5\u30e9\u30b0\u30af\u30ea\u30a2            \n            p_spi_instance->max_length   = max_length; //\u6700\u5927\u9001\u53d7\u4fe1\u30d0\u30a4\u30c8\u6570\u8a2d\u5b9a          \n\n            /* Initialize buffers */                                            \n            spi_master_buffer_init(p_tx_buf, //\u9001\u4fe1\u30d0\u30c3\u30d5\u30a1\u521d\u671f\u5316          \n                                   tx_buf_len,                                          \n                                   &(p_spi_instance->p_tx_buffer),                                          \n                                   &(p_spi_instance->tx_length),                                            \n                                   &(p_spi_instance->tx_index));                                            \n            spi_master_buffer_init(p_rx_buf, //\u53d7\u4fe1\u30d0\u30c3\u30d5\u30a1\u521d\u671f\u5316          \n                                   rx_buf_len,                                          \n                                   &(p_spi_instance->p_rx_buffer),                                          \n                                   &(p_spi_instance->rx_length),                                            \n                                   &(p_spi_instance->rx_index));                                            \n\n            nrf_gpio_pin_clear(p_spi_instance->pin_slave_select); //CS\u4fe1\u53f7\u30a2\u30b5\u30fc\u30c8            \n            spi_master_send_initial_bytes(p_spi_instance); //1byte\u76ee\u9001\u4fe1\u958b\u59cb           \n        }                                           \n        else //\u6700\u5927\u9001\u53d7\u4fe1\u30d0\u30a4\u30c8\u6570\u304c\u8ca0\u306a\u3089\u30a8\u30e9\u30fc                                 \n        {                                           \n            err_code = NRF_ERROR_INVALID_PARAM;                                         \n        }                                           \n    }                                           \n    else //IDLE\u72b6\u614b\u3067\u306a\u3044\u306a\u3089\u3070\u5225\u306e\u9001\u53d7\u4fe1\u51e6\u7406\u5b9f\u884c\u4e2d\u306a\u306e\u3067BUSY\u30a8\u30e9\u30fc                                 \n    {                                           \n        err_code = NRF_ERROR_BUSY;                                          \n    }                                           \n\n    //Check if disable all IRQs flag is set. //\u5272\u8fbc\u307f\u6709\u52b9\u51e6\u7406                \n    if (p_spi_instance->disable_all_irq)                                            \n    {                                               \n        //Enable interrupts.                                            \n        APP_ERROR_CHECK(sd_nvic_critical_region_exit(nested_critical_region));                                          \n    }                                           \n    else                                            \n    {                                           \n        //Enable SPI interrupt.                                         \n        APP_ERROR_CHECK(sd_nvic_EnableIRQ(p_spi_instance->irq_type));                                           \n    }                                           \n\n    return err_code;                                            \n    #else                                           \n    return NRF_ERROR_NOT_SUPPORTED;                                         \n    #endif                                          \n}           \n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\uff1aREADY\u30a4\u30d9\u30f3\u30c8\u5272\u8fbc\u307f\u51e6\u7406\nvoid SPI0_TWI0_IRQHandler(void)                                         \n{                                           \n    if ((NRF_SPI0->EVENTS_READY == 1) && (NRF_SPI0->INTENSET & SPI_INTENSET_READY_Msk))                                         \n    {                                           \n        NRF_SPI0->EVENTS_READY = 0; //\u30a4\u30d9\u30f3\u30c8\u30af\u30ea\u30a2                         \n\n        volatile spi_master_instance_t * p_spi_instance = spi_master_get_instance(SPI_MASTER_0); //\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c0\u304b1\u304b\u3092\u78ba\u8a8d\n\n        spi_master_send_recv_irq(p_spi_instance); //\u9001\u53d7\u4fe1\u5272\u8fbc\u307f\u51e6\u7406                    \n    }                                           \n}\n\nstatic __INLINE void spi_master_send_recv_irq(volatile spi_master_instance_t * const p_spi_instance)                                            \n{                                           \n    APP_ERROR_CHECK_BOOL(p_spi_instance != NULL); //\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7121\u52b9\u3067\u306a\u3044\u3053\u3068\u306e\u78ba\u8a8d                 \n\n    p_spi_instance->bytes_count++; //\u9001\u53d7\u4fe1\u30ab\u30a6\u30f3\u30bf\u7d2f\u7a4d                    \n\n//\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3\u306eA\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\uff1a\u521d\u56deREADY\u30a4\u30d9\u30f3\u30c8\u767a\u751f\u51e6\u7406                      \n    if (!p_spi_instance->started_flag) //\u30b9\u30bf\u30fc\u30c8\u30d5\u30e9\u30b0\u304c0\u306e\u5834\u5408                 \n    {                                           \n        p_spi_instance->started_flag = true; //\u30b9\u30bf\u30fc\u30c8\u30d5\u30e9\u30b0 \u30a2\u30b5\u30fc\u30c8                   \n        spi_master_signal_evt(p_spi_instance,                                           \n                              SPI_MASTER_EVT_TRANSFER_STARTED,                                          \n                              p_spi_instance->bytes_count);                                         \n    }                                           \n\n    uint8_t rx_byte = p_spi_instance->p_nrf_spi->RXD; //RXD\u30ec\u30b8\u30b9\u30bf\u7528\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u4f5c\u6210                  \n\n//\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3\u306eB\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\uff1aRXD\u30ec\u30b8\u30b9\u30bf\u53d7\u4fe1\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\u51e6\u7406                                     \n    if ((p_spi_instance->p_rx_buffer != NULL) && //RXD\u30ec\u30b8\u30b9\u30bf\u306b\u53d7\u4fe1\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408                 \n        (p_spi_instance->rx_index < p_spi_instance->rx_length))                                         \n    {                                           \n        p_spi_instance->p_rx_buffer[p_spi_instance->rx_index++] = rx_byte; //RXD\u30ec\u30b8\u30b9\u30bf\u8aad\u307f\u8fbc\u307f\uff06\u53d7\u4fe1\u30ab\u30a6\u30f3\u30bf\u7d2f\u7a4d     \n    }                                           \n\n//\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3\u306eC\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\uff1aTXD\u30ec\u30b8\u30b9\u30bf\u9001\u4fe1\u30c7\u30fc\u30bf\u683c\u7d0d\u51e6\u7406                                           \n    if (p_spi_instance->tx_index < p_spi_instance->max_length) //\u9001\u4fe1\u30c7\u30fc\u30bf\u304c\u307e\u3060\u3042\u308b\u5834\u5408               \n    {                                           \n        p_spi_instance->p_nrf_spi->TXD = ((p_spi_instance->p_tx_buffer != NULL) &&                                          \n                                          (p_spi_instance->tx_index < p_spi_instance->tx_length)) ?                                         \n                                         p_spi_instance->p_tx_buffer[p_spi_instance->tx_index] :                                            \n                                         SPI_DEFAULT_TX_BYTE; //\u9001\u4fe1\u30c7\u30fc\u30bfor\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u9001\u4fe1               \n        (p_spi_instance->tx_index)++; //\u9001\u4fe1\u30ab\u30a6\u30f3\u30bf\u7d2f\u7a4d                        \n    }                                           \n\n//\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3\u306eD\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\uff1a\u6700\u7d42READY\u30a4\u30d9\u30f3\u30c8\u51e6\u7406                                            \n    if (p_spi_instance->bytes_count >= p_spi_instance->max_length)                                          \n    {                                           \n        nrf_gpio_pin_set(p_spi_instance->pin_slave_select); //CS\u4fe1\u53f7\u30cd\u30b2\u30fc\u30c8              \n\n        uint16_t transmited_bytes = p_spi_instance->tx_index;                                           \n\n        spi_master_buffer_release(&(p_spi_instance->p_tx_buffer), &(p_spi_instance->tx_length)); //\u9001\u4fe1\u30d0\u30c3\u30d5\u30a1\u30af\u30ea\u30a2\n        spi_master_buffer_release(&(p_spi_instance->p_rx_buffer), &(p_spi_instance->rx_length)); //\u53d7\u4fe1\u30d0\u30c3\u30d5\u30a1\u30af\u30ea\u30a2\n\n        p_spi_instance->state = SPI_MASTER_STATE_IDLE;                                          \n\n        spi_master_signal_evt(p_spi_instance, SPI_MASTER_EVT_TRANSFER_COMPLETED, transmited_bytes); //\u9001\u53d7\u4fe1\u5b8c\u4e86\u51e6\u7406\n\n    }                                           \n}\n\nNordic\u793e\u306eBLE\u30e2\u30b8\u30e5\u30fc\u30ebnRF51822\u306eSPI\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u305f\u304f\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fSPI\u306f\u30de\u30b9\u30bf\u30fc\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\u8aad\u8005\u69d8\u306fSPI\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u65e2\u306b\u77e5\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u524d\u63d0\u3067\u4ee5\u4e0b\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002\n\n#\u30e2\u30b8\u30e5\u30fc\u30eb\u6a5f\u80fd\u306e\u30a2\u30c9\u30ec\u30b9\u5272\u308a\u5f53\u3066\n\nnRF51822\u306eSPI\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u3001\u30de\u30b9\u30bf\u30fc\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308bSPI0\u3068SPI1\u3068\u30b9\u30ec\u30fc\u30d6\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308bSPIS1\u304c\u3042\u308a\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/150620/a354bf9a-7ba6-eeb2-edb1-5a5a9bf32607.png)\n\n\nSPI Slave\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u3068SPI Master 1ch\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u3068I2C 1ch\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u306f\u540c\u3058\u30a2\u30c9\u30ec\u30b90x40004000\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3053\u306e3\u3064\u306e\u6a5f\u80fd\u3092\u540c\u6642\u306b\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u307e\u305f\u3001SPI Master 0ch\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u3068I2C 0ch\u6a5f\u80fd\u306e\u30ec\u30b8\u30b9\u30bf\u306f\u540c\u3058\u30a2\u30c9\u30ec\u30b90x40003000\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3053\u306e2\u3064\u306e\u6a5f\u80fd\u3092\u540c\u6642\u306b\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u3067\u3059\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u6a5f\u80fd\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u3067\u30011\u3064\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3067\u4e21\u65b9\u306e\u6a5f\u80fd\u304c\u4f7f\u3048\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08\u5207\u308a\u66ff\u3048\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u5225\u9014\u8a18\u4e8b\u306b\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\uff09\n\n#\u8a2d\u5b9a\u30ec\u30b8\u30b9\u30bf\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/150620/8407fd18-ba31-4bdf-f7ff-cd782421f04d.png)\n\n\n#\u30b7\u30fc\u30b1\u30f3\u30b9\n\nSPI\u30de\u30b9\u30bf\u30fc\u6a5f\u80fd\u306f\u3001MISO\u4fe1\u53f7\u3001MOSI\u4fe1\u53f7\u3001SCLK\u4fe1\u53f7\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\nSPI\u5236\u5fa1\u306b\u5fc5\u8981\u306a\u30c1\u30c3\u30d7\u30bb\u30ec\u30af\u30c8\u4fe1\u53f7\u306f\u30e6\u30fc\u30b6\u30fc\u304c\u3069\u306e\u30b9\u30ec\u30fc\u30d6\u30c7\u30d0\u30a4\u30b9\u3092\u4f7f\u3046\u304b\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u306a\u306e\u3067\u3001SPI\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u81ea\u52d5\u5236\u5fa1\u3057\u307e\u305b\u3093\u3002\n\u30e6\u30fc\u30b6\u30fc\u304cGPIO\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7528\u3044\u3066ON/OFF\u5236\u5fa1\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nSPI\u901a\u4fe1\u306f\u4ee5\u4e0b\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/150620/36b17071-7196-90e7-adc8-c55688f60d2f.png)\n\n\n\u2460TXD\u30ec\u30b8\u30b9\u30bf\u306b1byte\u76ee\u3092\u66f8\u304d\u8fbc\u3080\u3068\u3001\u76f4\u5f8c\u306b2byte\u76ee\u3082TXD\u30ec\u30b8\u30b9\u30bf\u306b\u66f8\u304d\u8fbc\u307e\u308c\u30011byte\u76ee\u306e\u9001\u4fe1\u304c\u59cb\u307e\u308b\u3002\n\n\u2461\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u3068\u540c\u6642\u306b\u3001RXD\u30ec\u30b8\u30b9\u30bf\u306b\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3059\u308b\u3002\n\u3000RXD\u30ec\u30b8\u30b9\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u304cRXD\u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u3055\u308c\u308b\u3002\n\n\u2462READY\u30a4\u30d9\u30f3\u30c8\u304cRXD\u30ec\u30b8\u30b9\u30bf\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u305f\u3073\u306b\u767a\u751f\u3059\u308b\u3002\n\u3000RXD\u30ec\u30b8\u30b9\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u306a\u3051\u308c\u3070\u3001\u3044\u3064\u307e\u3067\u5f85\u3063\u3066\u3082READY\u30a4\u30d9\u30f3\u30c8\u306f\u767a\u751f\u305b\u305a\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u9001\u53d7\u4fe1\u306f\u958b\u59cb\u3055\u308c\u306a\u3044\u3002\n\n\u2463TXD\u30ec\u30b8\u30b9\u30bf\u306b\u9001\u4fe1\u30c7\u30fc\u30bf\u304c\u306a\u304f\u306a\u308b\u3068\u52d5\u4f5c\u306f\u5b8c\u4e86\u3059\u308b\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/150620/d1dae362-1178-6f75-b070-100def00faef.png)\n\n#\u6ce2\u5f62\n\u5b9f\u969b\u306bSPI\u901a\u4fe1\u3092\u884c\u3063\u305f\u6642\u306e\u6ce2\u5f62\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/150620/95c9220a-5ae8-f129-54d6-1a9eb74a8761.png)\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0\uff1aSPI\u9001\u53d7\u4fe1\u51e6\u7406\n\n\u4ee5\u4e0b\u306fNordic\u793e\u304c\u516c\u958b\u3057\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u306e\u629c\u7c8b\u3067\u3059\u3002\nhttps://devzone.nordicsemi.com/attachment/f3b250dd5a8d462aca54b23d4a4d2b2c\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067SPI\u9001\u53d7\u4fe1\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```c\nuint32_t spi_master_send_recv(const spi_master_hw_instance_t spi_master_hw_instance,\t\t\t\t\t\t\t\t\t\t\t\n                              uint8_t * const p_tx_buf, const uint16_t tx_buf_len,\t\t\t\t\t\t\t\t\t\t\t\n                              uint8_t * const p_rx_buf, const uint16_t rx_buf_len)\t\t\t\t\t\t\t\t\t\t\t\n{\t\t\t\t\t\t\t\t\t\t\t\n    #if defined(SPI_MASTER_0_ENABLE) || defined(SPI_MASTER_1_ENABLE)\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n    volatile spi_master_instance_t * p_spi_instance = spi_master_get_instance(\t\t\t\t\t\t\t\t\t\t\t\n        spi_master_hw_instance);\t\t\t\t\t\t\t\t\t\t\t\n    APP_ERROR_CHECK_BOOL(p_spi_instance != NULL);\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n    uint32_t err_code   = NRF_SUCCESS;\t\t\t\t\t\t\t\t\t\t\t\n    uint16_t max_length = 0;\t\t\t\t\t\t\t\t\t\t\t\n    \t\t\t\t\t\t\t\t\t\t\t\n    uint8_t nested_critical_region = 0;\t\t\t\t\t\t\t\t\t\t\t\n    \t\t\t\t\t\t\t\t\t\t\t\n    //Check if disable all IRQs flag is set //\u5272\u8fbc\u307f\u7121\u52b9\u51e6\u7406\t\t\t\t\n    if (p_spi_instance->disable_all_irq)\t\t\t\t\t\t\t\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        //Disable interrupts.\t\t\t\t\t\t\t\t\t\t\t\n        APP_ERROR_CHECK(sd_nvic_critical_region_enter(&nested_critical_region));\t\t\t\t\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n    else\t\t\t\t\t\t\t\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        //Disable interrupt SPI.\t\t\t\t\t\t\t\t\t\t\t\n        APP_ERROR_CHECK(sd_nvic_DisableIRQ(p_spi_instance->irq_type));\t\t\t\t\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n    //Initialize and perform data transfer\t\t\t\t\t\t\t\t\t\t\t\n    if (p_spi_instance->state == SPI_MASTER_STATE_IDLE) //IDLE\u72b6\u614b\u304b\u306e\u78ba\u8a8d\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        max_length = (rx_buf_len > tx_buf_len) ? rx_buf_len : tx_buf_len; //\u6700\u5927\u9001\u53d7\u4fe1\u30d0\u30a4\u30c8\u6570\u78ba\u8a8d\uff08\u9001\u4fe1\u30c7\u30fc\u30bf\u3068\u53d7\u4fe1\u30c7\u30fc\u30bf\u306e\u3069\u3061\u3089\u304c\u591a\u3044\u304b\u3092\u78ba\u8a8d\u3057\u3066\u3001\u591a\u3044\u307b\u3046\u306b\u5408\u308f\u305b\u308b\u3002\uff09\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n        if (max_length > 0)\t\t\t\t\t\t\t\t\t\t\t\n        {\t\t\t\t\t\t\t\t\t\t\t\n            p_spi_instance->state        = SPI_MASTER_STATE_BUSY; //IDLE\u72b6\u614b\u304b\u3089BUSY\u72b6\u614b\u3078\u9077\u79fb\t\t\t\n            p_spi_instance->bytes_count  = 0; //\u9001\u53d7\u4fe1\u30ab\u30a6\u30f3\u30bf\u30af\u30ea\u30a2\t\t\t\n            p_spi_instance->started_flag = false; //\u958b\u59cb\u30d5\u30e9\u30b0\u30af\u30ea\u30a2\t\t\t\n            p_spi_instance->max_length   = max_length; //\u6700\u5927\u9001\u53d7\u4fe1\u30d0\u30a4\u30c8\u6570\u8a2d\u5b9a\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n            /* Initialize buffers */\t\t\t\t\t\t\t\t\t\t\t\n            spi_master_buffer_init(p_tx_buf, //\u9001\u4fe1\u30d0\u30c3\u30d5\u30a1\u521d\u671f\u5316\t\t\t\n                                   tx_buf_len,\t\t\t\t\t\t\t\t\t\t\t\n                                   &(p_spi_instance->p_tx_buffer),\t\t\t\t\t\t\t\t\t\t\t\n                                   &(p_spi_instance->tx_length),\t\t\t\t\t\t\t\t\t\t\t\n                                   &(p_spi_instance->tx_index));\t\t\t\t\t\t\t\t\t\t\t\n            spi_master_buffer_init(p_rx_buf, //\u53d7\u4fe1\u30d0\u30c3\u30d5\u30a1\u521d\u671f\u5316\t\t\t\n                                   rx_buf_len,\t\t\t\t\t\t\t\t\t\t\t\n                                   &(p_spi_instance->p_rx_buffer),\t\t\t\t\t\t\t\t\t\t\t\n                                   &(p_spi_instance->rx_length),\t\t\t\t\t\t\t\t\t\t\t\n                                   &(p_spi_instance->rx_index));\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n            nrf_gpio_pin_clear(p_spi_instance->pin_slave_select); //CS\u4fe1\u53f7\u30a2\u30b5\u30fc\u30c8\t\t\t\n            spi_master_send_initial_bytes(p_spi_instance); //1byte\u76ee\u9001\u4fe1\u958b\u59cb\t\t\t\n        }\t\t\t\t\t\t\t\t\t\t\t\n        else //\u6700\u5927\u9001\u53d7\u4fe1\u30d0\u30a4\u30c8\u6570\u304c\u8ca0\u306a\u3089\u30a8\u30e9\u30fc\t\t\t\t\t\t\t\t\t\n        {\t\t\t\t\t\t\t\t\t\t\t\n            err_code = NRF_ERROR_INVALID_PARAM;\t\t\t\t\t\t\t\t\t\t\t\n        }\t\t\t\t\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n    else //IDLE\u72b6\u614b\u3067\u306a\u3044\u306a\u3089\u3070\u5225\u306e\u9001\u53d7\u4fe1\u51e6\u7406\u5b9f\u884c\u4e2d\u306a\u306e\u3067BUSY\u30a8\u30e9\u30fc\t\t\t\t\t\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        err_code = NRF_ERROR_BUSY;\t\t\t\t\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n    \t\t\t\t\t\t\t\t\t\t\t\n    //Check if disable all IRQs flag is set. //\u5272\u8fbc\u307f\u6709\u52b9\u51e6\u7406\t\t\t\t\n    if (p_spi_instance->disable_all_irq)\t\t\t\t\t\t\t\t\t\t\t\n    {   \t\t\t\t\t\t\t\t\t\t\t\n        //Enable interrupts.\t\t\t\t\t\t\t\t\t\t\t\n        APP_ERROR_CHECK(sd_nvic_critical_region_exit(nested_critical_region));\t\t\t\t\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n    else\t\t\t\t\t\t\t\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        //Enable SPI interrupt.\t\t\t\t\t\t\t\t\t\t\t\n        APP_ERROR_CHECK(sd_nvic_EnableIRQ(p_spi_instance->irq_type));\t\t\t\t\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n    return err_code;\t\t\t\t\t\t\t\t\t\t\t\n    #else\t\t\t\t\t\t\t\t\t\t\t\n    return NRF_ERROR_NOT_SUPPORTED;\t\t\t\t\t\t\t\t\t\t\t\n    #endif\t\t\t\t\t\t\t\t\t\t\t\n}\t\t\t\n```\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0\uff1aREADY\u30a4\u30d9\u30f3\u30c8\u5272\u8fbc\u307f\u51e6\u7406\n\n```c\nvoid SPI0_TWI0_IRQHandler(void)\t\t\t\t\t\t\t\t\t\t\t\n{\t\t\t\t\t\t\t\t\t\t\t\n    if ((NRF_SPI0->EVENTS_READY == 1) && (NRF_SPI0->INTENSET & SPI_INTENSET_READY_Msk))\t\t\t\t\t\t\t\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        NRF_SPI0->EVENTS_READY = 0; //\u30a4\u30d9\u30f3\u30c8\u30af\u30ea\u30a2\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n        volatile spi_master_instance_t * p_spi_instance = spi_master_get_instance(SPI_MASTER_0); //\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c0\u304b1\u304b\u3092\u78ba\u8a8d\n\t\t\t\t\t\t\t\t\t\t\t\n        spi_master_send_recv_irq(p_spi_instance); //\u9001\u53d7\u4fe1\u5272\u8fbc\u307f\u51e6\u7406\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n}\n```\n\n```c\nstatic __INLINE void spi_master_send_recv_irq(volatile spi_master_instance_t * const p_spi_instance)\t\t\t\t\t\t\t\t\t\t\t\n{\t\t\t\t\t\t\t\t\t\t\t\n    APP_ERROR_CHECK_BOOL(p_spi_instance != NULL); //\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7121\u52b9\u3067\u306a\u3044\u3053\u3068\u306e\u78ba\u8a8d\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n    p_spi_instance->bytes_count++; //\u9001\u53d7\u4fe1\u30ab\u30a6\u30f3\u30bf\u7d2f\u7a4d\t\t\t\t\t\n\t\n//\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3\u306eA\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\uff1a\u521d\u56deREADY\u30a4\u30d9\u30f3\u30c8\u767a\u751f\u51e6\u7406\t\t\t\t\t\t\n    if (!p_spi_instance->started_flag) //\u30b9\u30bf\u30fc\u30c8\u30d5\u30e9\u30b0\u304c0\u306e\u5834\u5408\t\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        p_spi_instance->started_flag = true; //\u30b9\u30bf\u30fc\u30c8\u30d5\u30e9\u30b0 \u30a2\u30b5\u30fc\u30c8\t\t\t\t\t\n        spi_master_signal_evt(p_spi_instance,\t\t\t\t\t\t\t\t\t\t\t\n                              SPI_MASTER_EVT_TRANSFER_STARTED,\t\t\t\t\t\t\t\t\t\t\t\n                              p_spi_instance->bytes_count);\t\t\t\t\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n    uint8_t rx_byte = p_spi_instance->p_nrf_spi->RXD; //RXD\u30ec\u30b8\u30b9\u30bf\u7528\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u4f5c\u6210\t\t\t\t\t\n\t\n//\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3\u306eB\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\uff1aRXD\u30ec\u30b8\u30b9\u30bf\u53d7\u4fe1\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\u51e6\u7406\t\t\t\t\t\t\t\t\t\t\n    if ((p_spi_instance->p_rx_buffer != NULL) && //RXD\u30ec\u30b8\u30b9\u30bf\u306b\u53d7\u4fe1\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\t\t\t\t\t\n        (p_spi_instance->rx_index < p_spi_instance->rx_length))\t\t\t\t\t\t\t\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        p_spi_instance->p_rx_buffer[p_spi_instance->rx_index++] = rx_byte; //RXD\u30ec\u30b8\u30b9\u30bf\u8aad\u307f\u8fbc\u307f\uff06\u53d7\u4fe1\u30ab\u30a6\u30f3\u30bf\u7d2f\u7a4d\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n\n//\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3\u306eC\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\uff1aTXD\u30ec\u30b8\u30b9\u30bf\u9001\u4fe1\u30c7\u30fc\u30bf\u683c\u7d0d\u51e6\u7406\t\t\t\t\t\t\t\t\t\t\t\n    if (p_spi_instance->tx_index < p_spi_instance->max_length) //\u9001\u4fe1\u30c7\u30fc\u30bf\u304c\u307e\u3060\u3042\u308b\u5834\u5408\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        p_spi_instance->p_nrf_spi->TXD = ((p_spi_instance->p_tx_buffer != NULL) &&\t\t\t\t\t\t\t\t\t\t\t\n                                          (p_spi_instance->tx_index < p_spi_instance->tx_length)) ?\t\t\t\t\t\t\t\t\t\t\t\n                                         p_spi_instance->p_tx_buffer[p_spi_instance->tx_index] :\t\t\t\t\t\t\t\t\t\t\t\n                                         SPI_DEFAULT_TX_BYTE; //\u9001\u4fe1\u30c7\u30fc\u30bfor\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u9001\u4fe1\t\t\t\t\n        (p_spi_instance->tx_index)++; //\u9001\u4fe1\u30ab\u30a6\u30f3\u30bf\u7d2f\u7a4d\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n\n//\u30b7\u30fc\u30b1\u30f3\u30b9\u56f3\u306eD\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\uff1a\u6700\u7d42READY\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\t\t\t\t\t\t\t\t\t\t\t\n    if (p_spi_instance->bytes_count >= p_spi_instance->max_length)\t\t\t\t\t\t\t\t\t\t\t\n    {\t\t\t\t\t\t\t\t\t\t\t\n        nrf_gpio_pin_set(p_spi_instance->pin_slave_select); //CS\u4fe1\u53f7\u30cd\u30b2\u30fc\u30c8\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n        uint16_t transmited_bytes = p_spi_instance->tx_index;\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n        spi_master_buffer_release(&(p_spi_instance->p_tx_buffer), &(p_spi_instance->tx_length)); //\u9001\u4fe1\u30d0\u30c3\u30d5\u30a1\u30af\u30ea\u30a2\n        spi_master_buffer_release(&(p_spi_instance->p_rx_buffer), &(p_spi_instance->rx_length)); //\u53d7\u4fe1\u30d0\u30c3\u30d5\u30a1\u30af\u30ea\u30a2\n\t\t\t\t\t\t\t\t\t\t\t\n        p_spi_instance->state = SPI_MASTER_STATE_IDLE;\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n        spi_master_signal_evt(p_spi_instance, SPI_MASTER_EVT_TRANSFER_COMPLETED, transmited_bytes); //\u9001\u53d7\u4fe1\u5b8c\u4e86\u51e6\u7406\n\t\t\t\t\t\t\t\t\t\t\t\n    }\t\t\t\t\t\t\t\t\t\t\t\n}\n```\n", "tags": ["nRF51822", "BLE", "nRF51"]}