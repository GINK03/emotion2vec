{"tags": ["C++", "\u30ab\u30e1\u30e9", "ComputerVision"], "context": " More than 1 year has passed since last update.\u30ab\u30e1\u30e9\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u304a\u3044\u3066\u5916\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b\u56de\u8ee2\u884c\u5217(Rotation Matrix)\u3092\u6271\u3046\u6642\uff0c\n3 * 3\u306e\u884c\u5217\u3067\u8868\u3057\u305f\u3044\u6642\u3068\uff0c\u5404\u8ef8(x\u8ef8\uff0cy\u8ef8\uff0cz\u8ef8)\u306b\u5bfe\u3059\u308b\u89d2\u5ea6\u3067\u8868\u3057\u305f\u3044\u6642\u304c\u3042\u308b\uff0e\n\u3053\u306e\u6642\u306e\u76f8\u4e92\u5909\u63db\u884c\u5217\u306e\u30e1\u30e2\uff0e\u9593\u9055\u3063\u3066\u3044\u3066\u3082\u8cac\u3081\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff0e\n\uff08\u56de\u8ee2\u884c\u5217\u21d2\u89d2\u5ea6\u306e\u5834\u5408\u306f\u4e00\u610f\u306b\u6c42\u307e\u3089\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\uff0c\u591a\u5c11\u306e\u6ce8\u610f\u306f\u5fc5\u8981\uff0e\uff09\n\u305f\u3060\u3057\uff0c\u4eca\u56de\u306f\u53f3\u624b\u5ea7\u6a19\u7cfb\u306b\u304a\u3044\u3066\uff0c\u5404\u8ef8\u306b\u5bfe\u3059\u308b\u5909\u63db\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u3081\u3066\u304a\u308a\uff0c\n\u56de\u8ee2\u884c\u5217R = Rz * Rx * Ry\u3068\u3059\u308b\uff0e\uff08\u639b\u3051\u5408\u308f\u305b\u308b\u9806\u5e8f\u304c\u5909\u308f\u308b\u3068\u5f0f\u304c\u5909\u308f\u308b\uff0e\uff09\nx, y, z\u306f\u5404\u8ef8\u306e\u56de\u8ee2\u89d2\uff08\u30e9\u30b8\u30a2\u30f3\uff09\u3068\u3059\u308b\uff0e\n\nx\u8ef8\u5468\u308a\u306e\u56de\u8ee2\u884c\u5217\n\nRx = ( 1, 0, 0,\n     0, cos(x), -sin(x),\n     0, sin(x), cos(x) )\n\n\ny\u8ef8\u5468\u308a\u306e\u56de\u8ee2\u884c\u5217\n\nRy = ( cos(y), 0, sin(y),\n     0, 1, 0,\n     -sin(y), 0, cos(y) )\n\n\nz\u8ef8\u5468\u308a\u306e\u56de\u8ee2\u884c\u5217\n\nRz = ( cos(z), -sin(z), 0,\n     sin(z), cos(z), 0,\n     0, 0, 1 )\n\n\n\u56de\u8ee2\u884c\u5217\uff08Rz * Rx * Ry\uff09\n\nR = cos(y)cos(z) - sin(x)sin(y)sin(z), -cos(x)sin(z), sin(y)cos(z) + sin(x)cos(y)sin(z),\n      cos(y)sin(z) + sin(x)sin(y)cos(z), cos(x)cos(z), sin(z)sin(y) - sin(z)cos(y)cos(z),\n      -cos(x)sin(y), sin(x), cos(x)cos(y)\n\n\u306a\u306e\u3067\uff0c\n\u89d2\u5ea6\u21d2\u56de\u8ee2\u884c\u5217\nvoid computeMatrixFromAngles(\n     cv::Mat & R,\n     double x,\n     double y,\n     double z){\n\n  R.row(0).col(0) = cos(y)*cos(z) - sin(x)*sin(y)*sin(z);\n  R.row(0).col(1) = -cos(x)*sin(z);\n  R.row(0).col(2) = sin(y)*cos(z) + sin(x)*cos(y)*sin(z);\n  R.row(1).col(0) = cos(y)*sin(z) + sin(x)*sin(y)*cos(z);\n  R.row(1).col(1) = cos(x)*cos(z);\n  R.row(1).col(2) = sin(y)*sin(z) - sin(x)*cos(y)*cos(z);\n  R.row(2).col(0) = - cos(x)*sin(y);\n  R.row(2).col(1) = sin(x);\n  R.row(2).col(2) = cos(x)*cos(y);\n}\n\n\u56de\u8ee2\u884c\u5217\u21d2\u89d2\u5ea6\nvoid computeAnglesFromMatrix(\n                 cv::Mat R,\n                 double & angle_x,\n                 double & angle_y,\n                 double & angle_z\n                 ){\n\n  double threshold = 0.001;\n\n  if(abs(R.at<double>(2,1) - 1.0) < threshold){ // R(2,1) = sin(x) = 1\u306e\u6642\n    angle_x = PI / 2;\n    angle_y = 0;\n    angle_z = atan2(R.at<double>(1,0), R.at<double>(0,0));\n  }else if(abs(R.at<double>(2,1) + 1.0) < threshold){ // R(2,1) = sin(x) = -1\u306e\u6642\n    angle_x = - PI / 2;\n    angle_y = 0;\n    angle_z = atan2(R.at<double>(1,0), R.at<double>(0,0));\n  }else{\n    angle_x = asin(R.at<double>(2,1));\n    angle_y = atan2(-R.at<double>(2,0), R.at<double>(2,2));\n    angle_z = atan2(-R.at<double>(0,1), R.at<double>(1,1));\n  }\n}\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n+ http://d.hatena.ne.jp/It_lives_vainly/20070829/1188384519\n\uff08\u2191\u306e\u30b5\u30a4\u30c8\u306f\u56de\u8ee2\u884c\u5217\u306e\u8868\u73fe\u304c\u3061\u3087\u3063\u3068\u9593\u9055\u3063\u3066\u308b\uff1f\uff09\n\u30ab\u30e1\u30e9\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u304a\u3044\u3066\u5916\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b\u56de\u8ee2\u884c\u5217(Rotation Matrix)\u3092\u6271\u3046\u6642\uff0c\n3 * 3\u306e\u884c\u5217\u3067\u8868\u3057\u305f\u3044\u6642\u3068\uff0c\u5404\u8ef8(x\u8ef8\uff0cy\u8ef8\uff0cz\u8ef8)\u306b\u5bfe\u3059\u308b\u89d2\u5ea6\u3067\u8868\u3057\u305f\u3044\u6642\u304c\u3042\u308b\uff0e\n\n\u3053\u306e\u6642\u306e\u76f8\u4e92\u5909\u63db\u884c\u5217\u306e\u30e1\u30e2\uff0e\u9593\u9055\u3063\u3066\u3044\u3066\u3082\u8cac\u3081\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff0e\n\uff08\u56de\u8ee2\u884c\u5217\u21d2\u89d2\u5ea6\u306e\u5834\u5408\u306f\u4e00\u610f\u306b\u6c42\u307e\u3089\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\uff0c\u591a\u5c11\u306e\u6ce8\u610f\u306f\u5fc5\u8981\uff0e\uff09\n\n\u305f\u3060\u3057\uff0c\u4eca\u56de\u306f\u53f3\u624b\u5ea7\u6a19\u7cfb\u306b\u304a\u3044\u3066\uff0c\u5404\u8ef8\u306b\u5bfe\u3059\u308b\u5909\u63db\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u3081\u3066\u304a\u308a\uff0c\n\u56de\u8ee2\u884c\u5217R = Rz * Rx * Ry\u3068\u3059\u308b\uff0e\uff08\u639b\u3051\u5408\u308f\u305b\u308b\u9806\u5e8f\u304c\u5909\u308f\u308b\u3068\u5f0f\u304c\u5909\u308f\u308b\uff0e\uff09\nx, y, z\u306f\u5404\u8ef8\u306e\u56de\u8ee2\u89d2\uff08\u30e9\u30b8\u30a2\u30f3\uff09\u3068\u3059\u308b\uff0e\n\n+ x\u8ef8\u5468\u308a\u306e\u56de\u8ee2\u884c\u5217\n\n```cpp\nRx = ( 1, 0, 0,\n     0, cos(x), -sin(x),\n     0, sin(x), cos(x) )\n```\n\n+ y\u8ef8\u5468\u308a\u306e\u56de\u8ee2\u884c\u5217\n\n```cpp\nRy = ( cos(y), 0, sin(y),\n     0, 1, 0,\n     -sin(y), 0, cos(y) )\n```\n\n+ z\u8ef8\u5468\u308a\u306e\u56de\u8ee2\u884c\u5217\n\n```cpp\nRz = ( cos(z), -sin(z), 0,\n     sin(z), cos(z), 0,\n     0, 0, 1 )\n```\n\n+ \u56de\u8ee2\u884c\u5217\uff08Rz * Rx * Ry\uff09\n\n```cpp\nR = cos(y)cos(z) - sin(x)sin(y)sin(z), -cos(x)sin(z), sin(y)cos(z) + sin(x)cos(y)sin(z),\n      cos(y)sin(z) + sin(x)sin(y)cos(z), cos(x)cos(z), sin(z)sin(y) - sin(z)cos(y)cos(z),\n      -cos(x)sin(y), sin(x), cos(x)cos(y)\n```\n\n\u306a\u306e\u3067\uff0c\n\u89d2\u5ea6\u21d2\u56de\u8ee2\u884c\u5217\n\n```cpp\nvoid computeMatrixFromAngles(\n     cv::Mat & R,\n     double x,\n     double y,\n     double z){\n\n  R.row(0).col(0) = cos(y)*cos(z) - sin(x)*sin(y)*sin(z);\n  R.row(0).col(1) = -cos(x)*sin(z);\n  R.row(0).col(2) = sin(y)*cos(z) + sin(x)*cos(y)*sin(z);\n  R.row(1).col(0) = cos(y)*sin(z) + sin(x)*sin(y)*cos(z);\n  R.row(1).col(1) = cos(x)*cos(z);\n  R.row(1).col(2) = sin(y)*sin(z) - sin(x)*cos(y)*cos(z);\n  R.row(2).col(0) = - cos(x)*sin(y);\n  R.row(2).col(1) = sin(x);\n  R.row(2).col(2) = cos(x)*cos(y);\n}\n```\n\n\u56de\u8ee2\u884c\u5217\u21d2\u89d2\u5ea6\n\n```cpp\nvoid computeAnglesFromMatrix(\n\t\t\t     cv::Mat R,\n\t\t\t     double & angle_x,\n\t\t\t     double & angle_y,\n\t\t\t     double & angle_z\n\t\t\t     ){\n \n  double threshold = 0.001;\n\n  if(abs(R.at<double>(2,1) - 1.0) < threshold){ // R(2,1) = sin(x) = 1\u306e\u6642\n    angle_x = PI / 2;\n    angle_y = 0;\n    angle_z = atan2(R.at<double>(1,0), R.at<double>(0,0));\n  }else if(abs(R.at<double>(2,1) + 1.0) < threshold){ // R(2,1) = sin(x) = -1\u306e\u6642\n    angle_x = - PI / 2;\n    angle_y = 0;\n    angle_z = atan2(R.at<double>(1,0), R.at<double>(0,0));\n  }else{\n    angle_x = asin(R.at<double>(2,1));\n    angle_y = atan2(-R.at<double>(2,0), R.at<double>(2,2));\n    angle_z = atan2(-R.at<double>(0,1), R.at<double>(1,1));\n  }\n}\n```\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n+ http://d.hatena.ne.jp/It_lives_vainly/20070829/1188384519\n\uff08\u2191\u306e\u30b5\u30a4\u30c8\u306f\u56de\u8ee2\u884c\u5217\u306e\u8868\u73fe\u304c\u3061\u3087\u3063\u3068\u9593\u9055\u3063\u3066\u308b\uff1f\uff09"}