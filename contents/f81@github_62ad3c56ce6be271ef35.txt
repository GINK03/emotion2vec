{"context": " More than 1 year has passed since last update.\u4eca\u56de\u306fCollection \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u300cTraversable\u300d\u3064\u3044\u3066\u3001\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u98a8\u306b\u7d39\u4ecb\u3059\u308b\u3088\u3002\n\nscala.collection.Traversable\n\n\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u306f\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4e2d\u3067\u3082\u4e0a\u4f4d\u30c8\u30ec\u30a4\u30c8\u3067\u91cd\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u308b\u3093\u3060\u3002\n\u3069\u3093\u306a\u64cd\u4f5c\u304c\u5b58\u5728\u3059\u308b\u304b\u5b9f\u969b\u306b\u5b9f\u884c\u3057\u3066\u611f\u3058\u3066\u307f\u3066\u306d\uff01\n\u5165\u9580\u7de8\u3068\u3057\u3066\u3053\u3061\u3089\u3082\u5fc5\u8aad(^^)v\n \u7b2c8\u7ae0\uff1aScala\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3(Seq, Set, Map)\u5165\u9580\n\nscala.collection.Traversable\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u968e\u5c64\u306e\u57fa\u672c\u3068\u306a\u308b\u30c8\u30ec\u30a4\u30c8\u3002Seq\u3060\u3051\u3067\u306f\u306a\u304f\u3001Set\u30fbMap\u3082\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u3066\u3044\u308b\u3002\nforeach\u30e1\u30bd\u30c3\u30c9\u306e\u307f\u304c\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u4ee5\u5916\u306fTraversableLike\u306b\u5b9f\u88c5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u4ee3\u8868\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u307f\u305f\u3088\u3002\n\n\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\n\nforeach\n\u5168\u8d70\u67fb\u3057\u3066\u8981\u7d20\u30921\u56de\u305a\u3064\u51e6\u7406\u3059\u308b\nscala> Seq(1, 2, 3).foreach(print(_))\n123\n\n\n\u52a0\u7b97\u30fb\u8ffd\u52a0\n\n++\n2\u3064\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u30891\u3064\u306e\u65b0\u3057\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) ++ Seq(4, 5)\nres1: Seq[Int] = List(1, 2, 3, 4, 5)\n\n\n\u30de\u30c3\u30d7\n\nmap\n\u5168\u3066\u306e\u8981\u7d20\u306b\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\nscala> Seq(\"a\", \"b\", \"c\") map (_.toUpperCase())\nres2: Seq[java.lang.String] = List(A, B, C)\n\n\nflatMap\n\u5168\u3066\u306e\u8981\u7d20\u306b\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u8fd4\u3063\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u3001\u66f4\u306b\u4e00\u3064\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8fd4\u3059\nscala> Seq(\"red\", \"blue\", \"yellow\") flatMap (_.toList)\nres3: Seq[Char] = List(r, e, d, b, l, u, e, y, e, l, l, o, w)\n\n\ncollect\nfilter\u3068map\u3092\u7d44\u307f\u308f\u305b\u3088\u3046\u306a\u611f\u3058\nscala> Seq(1, 2, 3) collect { case (i) if (i % 2 == 1) => i + 1 }\nres4: Seq[Int] = List(2, 4)\n\n\ntoArray\n\u914d\u5217\u306b\u5909\u63db\u3059\u308b\nscala> Seq(1, 2, 3) toArray\nres5: Array[Int] = Array(1, 2, 3)\n\n\ntoIterable\n\u30a4\u30c6\u30e9\u30d6\u30eb\u306b\u5909\u63db\u3059\u308b\nscala> Seq(1, 2, 3) toIterable\nres6: Iterable[Int] = List(1, 2, 3)\n\n\ntoList\nList\u306b\u5909\u63db\u3059\u308b\nscala> Seq(1, 2, 3) toList\nres7: List[Int] = List(1, 2, 3)\n\n\ntoMap\nMap\u306b\u5909\u63db\u3059\u308b\n\nscala> Seq((1,\"Moses\"), (2,\"Lucas\"), (3,\"Henderson\")) toMap\nres8: scala.collection.immutable.Map[Int,java.lang.String] = Map(1 -> Moses, 2 -\n> Lucas, 3 -> Henderson)\n\n\ntoSeq\nSeq\u306b\u5909\u63db\u3059\u308b\nscala> Map(1 -> \"Moses\", 2 -> \"Lucas\", 3 -> \"Henderson\").toSeq\nres9: Seq[(Int, java.lang.String)] = ArrayBuffer((1,Moses), (2,Lucas), (3,Hender\nson))\n\n\ntoSet\nSet\u306b\u5909\u63db\u3059\u308b\nscala> Seq(1, 2, 3, 1) toSet\nres10: scala.collection.immutable.Set[Int] = Set(1, 2, 3)\n\n\ntoStream\nStream\u306b\u5909\u63db\u3059\u308b\nscala> Seq(1, 2, 3, 1) toStream\nres11: scala.collection.immutable.Stream[Int] = Stream(1, ?)\n\n\ncopyToArray\n\u914d\u5217\u306b\u8981\u7d20\u3092\u30b3\u30d4\u30fc\u3059\u308b\nscala>     var array = Array(4, 5, 6, 7, 8)\narray: Array[Int] = Array(4, 5, 6, 7, 8)\n\nscala>     Seq(1, 2, 3) copyToArray (array)\n\nscala>     array\nres12: Array[Int] = Array(1, 2, 3, 7, 8)\n\n\ncopyToBuffer\nBuffer\u306b\u8981\u7d20\u3092\u30b3\u30d4\u30fc\u3059\u308b\nscala>     var buffer = scala.collection.mutable.Buffer(4, 5, 6, 7, 8)\nbuffer: scala.collection.mutable.Buffer[Int] = ArrayBuffer(4, 5, 6, 7, 8)\n\nscala>     Seq(1, 2, 3) copyToBuffer (buffer)\n\nscala>     buffer\nres13: scala.collection.mutable.Buffer[Int] = ArrayBuffer(4, 5, 6, 7, 8, 1, 2, 3)\n\n\nisEmpty\n\u8981\u7d20\u304c\u7a7a\u304b\u5224\u5b9a\u3059\u308b\nscala> Seq(1, 2, 3) isEmpty\nres14: Boolean = false\n\nscala> Seq() isEmpty\nres15: Boolean = true\n\n\nnonEmpty\n\u8981\u7d20\u304c\u3042\u308b\u304b\u5224\u5b9a\u3059\u308b\nscala> Seq(1, 2, 3) nonEmpty\nres16: Boolean = true\n\nscala> Seq() nonEmpty\nres17: Boolean = false\n\n\nsize\n\u8981\u7d20\u6570\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) size\nres18: Int = 3\n\n\nfind\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u30d5\u30a1\u30fc\u30b9\u30c8\u30d2\u30c3\u30c8\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) find (_ > 1)\nres19: Option[Int] = Some(2)\n\n\nhead\n\u5148\u982d\u8981\u7d20\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) head\nres20: Int = 1\n\n\nheadOption\n\u5148\u982d\u8981\u7d20\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u5024\u3068\u3057\u3066\u8fd4\u3059\nscala> Seq(1, 2, 3) headOption\nres21: Option[Int] = Some(1)\n\n\nlast\n\u672b\u5c3e\u8981\u7d20\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) last\nres22: Int = 3\n\n\nlastOption\n\u672b\u5c3e\u8981\u7d20\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u5024\u3068\u3057\u3066\u8fd4\u3059\nscala> Seq(1, 2, 3) lastOption\nres23: Option[Int] = Some(3)\n\n\ninit\nlast\u3092\u9664\u3044\u305f\u6b8b\u308a\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) init\nres24: Seq[Int] = List(1, 2)\n\n\ntake\n\u6700\u521d\u306en\u500b\u306e\u8981\u7d20\u304b\u3089\u6210\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3, 4, 5) take(2)\nres25: Seq[Int] = List(1, 2)\n\n\ndrop\ntake\u3092\u9664\u3044\u305f\u6b8b\u308a\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) drop(2)\nres26: Seq[Int] = List(3)\n\n\nfilter\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u304b\u3089\u6210\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) filter (_ % 2 == 1)\nres27: Seq[Int] = List(1, 3)\n\n\nfilterNot\n\u95a2\u6570\u3092\u6e80\u305f\u3055\u306a\u3044\u8981\u7d20\u304b\u3089\u6210\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) filterNot(_ % 2 == 1)\nres28: Seq[Int] = List(2)\n\n\nslice\nfrom\u304b\u3089to\u307e\u3067\u306e\u8981\u7d20\u304b\u3089\u6210\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3, 4, 5) slice(2, 4)\nres29: Seq[Int] = List(3, 4)\n\n\ntail\nhead\u3092\u9664\u3044\u305f\u6b8b\u308a\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3, 4, 5) tail\nres30: Seq[Int] = List(2, 3, 4, 5)\n\n\ncount\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3, 4, 5) count (_ % 2 == 0)\nres31: Int = 2\n\n\nexists\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u304c\u3042\u308b\u304b\u5224\u5b9a\u3059\u308b\nscala> Seq(1, 2, 3, 4, 5) exists (_ > 4)\nres32: Boolean = true\n\nscala> Seq(1, 2, 3, 4, 5) exists (_ > 5)\nres33: Boolean = false\n\n\ngroupBy\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u30fb\u6e80\u305f\u3055\u306a\u3044\u8981\u7d20\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u542b\u3093\u3060\u30de\u30c3\u30d7\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3, 4, 5) groupBy(_ > 3)\nres34: scala.collection.immutable.Map[Boolean,Seq[Int]] = Map(false -> List(1, 2, 3), true -> List(4, 5))\n\n\npartition\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u30fb\u6e80\u305f\u3055\u306a\u3044\u8981\u7d20\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u542b\u3093\u3060\u30de\u30c3\u30d7\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3, 4, 5) partition(_ > 3)\nres35: (Seq[Int], Seq[Int]) = (List(4, 5),List(1, 2, 3))\n\n\nspan\n\u5148\u982d\u304b\u3089\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u30fb\u6e80\u305f\u3055\u306a\u304f\u306a\u3063\u3066\u304b\u3089\u6700\u5f8c\u307e\u3067\u306e\u8981\u7d20\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u542b\u3093\u3060\u30de\u30c3\u30d7\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3, 4, 5) span(_ % 2 == 1)\nres36: (Seq[Int], Seq[Int]) = (List(1),List(2, 3, 4, 5))\n\n\nsplitAt\nn\u756a\u76ee\u3067\u5206\u5272\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3, 4, 5) splitAt (3)\nres37: (Seq[Int], Seq[Int]) = (List(1, 2, 3),List(4, 5))\n\n\nfoldLeft\n\u5f15\u6570\u3068\u5148\u982d\u306e\u8981\u7d20\u304b\u3089\u9806\u756a\u306b\u6f14\u7b97\u3092\u3059\u308b\nscala> Seq(1, 2, 3).foldLeft(10)(_ - _)\nres38: Int = 4\n\n\nfoldRight\n\u5f15\u6570\u3068\u672b\u5c3e\u306e\u8981\u7d20\u304b\u3089\u9806\u756a\u306b\u6f14\u7b97\u3092\u3059\u308b\nscala> Seq(1, 2, 3).foldRight(10)(_ - _)\nres39: Int = -8\n\n\nreduceLeft\n\u5148\u982d\u306e\u8981\u7d20\u304b\u3089\u9806\u756a\u306b\u6f14\u7b97\u3092\u3059\u308b\nscala> Seq(1, 2, 3).reduceLeft(_ - _)\nres40: Int = -4\n\n\nreduceRight\n\u672b\u5c3e\u306e\u8981\u7d20\u304b\u3089\u9806\u756a\u306b\u6f14\u7b97\u3092\u3059\u308b\nscala> Seq(1, 2, 3).reduceRight(_ - _)\nres41: Int = 2\n\n\nsum\n\u8981\u7d20\u306e\u5024\u306e\u5408\u8a08\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3).sum\nres42: Int = 6\n\n\nproduct\n\u8981\u7d20\u306e\u5024\u306e\u7a4d\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3).product\nres43: Int = 6\n\n\nmin\n\u6700\u5c0f\u5024\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) min\nres44: Int = 1\n\n\nmax\n\u6700\u5927\u5024\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) max\nres45: Int = 3\n\n\naddString\n\u8981\u7d20\u3092\u6587\u5b57\u5217\u3068\u3057\u3066StringBuilder\u306b\u8ffd\u52a0\u3059\u308b\nscala> var builder = new StringBuilder\nbuilder: StringBuilder =\n\nscala> Seq(1, 2, 3) addString(builder)\nres46: StringBuilder = 123\n\n\nmkString\n\u8981\u7d20\u3092\u533a\u5207\u308a\u6587\u5b57\u3067\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\nscala> Seq(1, 2, 3) mkString (\"a\")\nres47: String = 1a2a3\n\n\nview\n\u30d3\u30e5\u30fc\u3092\u751f\u6210\u3059\u308b\u3002\nscala> Seq(1, 2, 3) view\nres48: java.lang.Object with scala.collection.SeqView[Int,Seq[Int]] = SeqView(..)\n\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306f\u3001 \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306eTraversable\u30c8\u30ec\u30a4\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u3066\u307f\u305f\u3051\u3069\u3069\u3046\u3060\u3063\u305f\uff1f\n\u3084\u3063\u3071\u308a\u3053\u306e\u8fba\u306f\u4f53\u3092\u52d5\u304b\u3055\u306a\u3044\u3068\u308f\u304b\u3089\u306a\u3044\u306d\u3002\n\u305c\u3072\u305c\u3072\u30bd\u30fc\u30b9\u3092\u66f8\u3044\u3066\u52d5\u304b\u3057\u3066\u307f\u3066\u306d\u3002\n\u4eca\u56de\u3082\n\u4f53\u3067\u611f\u3058\u3066\u304f\u308c\u305f\u304b\u306a\uff1f\n\u4eca\u56de\u306fCollection \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u300cTraversable\u300d\u3064\u3044\u3066\u3001\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u98a8\u306b\u7d39\u4ecb\u3059\u308b\u3088\u3002\n\n- scala.collection.Traversable\n\n\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u306f\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4e2d\u3067\u3082\u4e0a\u4f4d\u30c8\u30ec\u30a4\u30c8\u3067\u91cd\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u308b\u3093\u3060\u3002\n\u3069\u3093\u306a\u64cd\u4f5c\u304c\u5b58\u5728\u3059\u308b\u304b\u5b9f\u969b\u306b\u5b9f\u884c\u3057\u3066\u611f\u3058\u3066\u307f\u3066\u306d\uff01\n\n\u5165\u9580\u7de8\u3068\u3057\u3066\u3053\u3061\u3089\u3082\u5fc5\u8aad(^^)v\n[ \u7b2c8\u7ae0\uff1aScala\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3(Seq, Set, Map)\u5165\u9580](http://qiita.com/f81@github/items/dc79819d23ce4889d552)\n\n# scala.collection.Traversable\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u968e\u5c64\u306e\u57fa\u672c\u3068\u306a\u308b\u30c8\u30ec\u30a4\u30c8\u3002Seq\u3060\u3051\u3067\u306f\u306a\u304f\u3001Set\u30fbMap\u3082\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u3066\u3044\u308b\u3002\n`foreach`\u30e1\u30bd\u30c3\u30c9\u306e\u307f\u304c\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u4ee5\u5916\u306fTraversableLike\u306b\u5b9f\u88c5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u4ee3\u8868\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u307f\u305f\u3088\u3002\n\n## \u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\n### foreach\n\u5168\u8d70\u67fb\u3057\u3066\u8981\u7d20\u30921\u56de\u305a\u3064\u51e6\u7406\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3).foreach(print(_))\n123\n```\n\n## \u52a0\u7b97\u30fb\u8ffd\u52a0\n### ++\n2\u3064\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u30891\u3064\u306e\u65b0\u3057\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) ++ Seq(4, 5)\nres1: Seq[Int] = List(1, 2, 3, 4, 5)\n```\n\n## \u30de\u30c3\u30d7\n### map\n\u5168\u3066\u306e\u8981\u7d20\u306b\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(\"a\", \"b\", \"c\") map (_.toUpperCase())\nres2: Seq[java.lang.String] = List(A, B, C)\n```\n### flatMap\n\u5168\u3066\u306e\u8981\u7d20\u306b\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u8fd4\u3063\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u3001\u66f4\u306b\u4e00\u3064\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8fd4\u3059\n\n```scala\nscala> Seq(\"red\", \"blue\", \"yellow\") flatMap (_.toList)\nres3: Seq[Char] = List(r, e, d, b, l, u, e, y, e, l, l, o, w)\n```\n\n### collect\nfilter\u3068map\u3092\u7d44\u307f\u308f\u305b\u3088\u3046\u306a\u611f\u3058\n\n```scala\nscala> Seq(1, 2, 3) collect { case (i) if (i % 2 == 1) => i + 1 }\nres4: Seq[Int] = List(2, 4)\n```\n\n### toArray\n\u914d\u5217\u306b\u5909\u63db\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3) toArray\nres5: Array[Int] = Array(1, 2, 3)\n```\n\n### toIterable\n\u30a4\u30c6\u30e9\u30d6\u30eb\u306b\u5909\u63db\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3) toIterable\nres6: Iterable[Int] = List(1, 2, 3)\n```\n\n### toList\nList\u306b\u5909\u63db\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3) toList\nres7: List[Int] = List(1, 2, 3)\n```\n\n### toMap\nMap\u306b\u5909\u63db\u3059\u308b\n\n```scala\n\nscala> Seq((1,\"Moses\"), (2,\"Lucas\"), (3,\"Henderson\")) toMap\nres8: scala.collection.immutable.Map[Int,java.lang.String] = Map(1 -> Moses, 2 -\n> Lucas, 3 -> Henderson)\n```\n\n### toSeq\nSeq\u306b\u5909\u63db\u3059\u308b\n\n```scala\nscala> Map(1 -> \"Moses\", 2 -> \"Lucas\", 3 -> \"Henderson\").toSeq\nres9: Seq[(Int, java.lang.String)] = ArrayBuffer((1,Moses), (2,Lucas), (3,Hender\nson))\n```\n\n### toSet\nSet\u306b\u5909\u63db\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3, 1) toSet\nres10: scala.collection.immutable.Set[Int] = Set(1, 2, 3)\n```\n\n### toStream\nStream\u306b\u5909\u63db\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3, 1) toStream\nres11: scala.collection.immutable.Stream[Int] = Stream(1, ?)\n```\n\n### copyToArray\n\u914d\u5217\u306b\u8981\u7d20\u3092\u30b3\u30d4\u30fc\u3059\u308b\n\n```scala\nscala>     var array = Array(4, 5, 6, 7, 8)\narray: Array[Int] = Array(4, 5, 6, 7, 8)\n\nscala>     Seq(1, 2, 3) copyToArray (array)\n\nscala>     array\nres12: Array[Int] = Array(1, 2, 3, 7, 8)\n```\n\n### copyToBuffer\nBuffer\u306b\u8981\u7d20\u3092\u30b3\u30d4\u30fc\u3059\u308b\n\n```scala\nscala>     var buffer = scala.collection.mutable.Buffer(4, 5, 6, 7, 8)\nbuffer: scala.collection.mutable.Buffer[Int] = ArrayBuffer(4, 5, 6, 7, 8)\n\nscala>     Seq(1, 2, 3) copyToBuffer (buffer)\n\nscala>     buffer\nres13: scala.collection.mutable.Buffer[Int] = ArrayBuffer(4, 5, 6, 7, 8, 1, 2, 3)\n```\n\n### isEmpty\n\u8981\u7d20\u304c\u7a7a\u304b\u5224\u5b9a\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3) isEmpty\nres14: Boolean = false\n\nscala> Seq() isEmpty\nres15: Boolean = true\n```\n\n### nonEmpty\n\u8981\u7d20\u304c\u3042\u308b\u304b\u5224\u5b9a\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3) nonEmpty\nres16: Boolean = true\n\nscala> Seq() nonEmpty\nres17: Boolean = false\n```\n\n### size\n\u8981\u7d20\u6570\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) size\nres18: Int = 3\n```\n\n### find\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u30d5\u30a1\u30fc\u30b9\u30c8\u30d2\u30c3\u30c8\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) find (_ > 1)\nres19: Option[Int] = Some(2)\n```\n\n### head\n\u5148\u982d\u8981\u7d20\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) head\nres20: Int = 1\n```\n\n### headOption\n\u5148\u982d\u8981\u7d20\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u5024\u3068\u3057\u3066\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) headOption\nres21: Option[Int] = Some(1)\n```\n\n### last\n\u672b\u5c3e\u8981\u7d20\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) last\nres22: Int = 3\n```\n\n### lastOption\n\u672b\u5c3e\u8981\u7d20\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u5024\u3068\u3057\u3066\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) lastOption\nres23: Option[Int] = Some(3)\n```\n\n### init\n`last`\u3092\u9664\u3044\u305f\u6b8b\u308a\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) init\nres24: Seq[Int] = List(1, 2)\n```\n\n### take\n\u6700\u521d\u306en\u500b\u306e\u8981\u7d20\u304b\u3089\u6210\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) take(2)\nres25: Seq[Int] = List(1, 2)\n```\n\n### drop\n`take`\u3092\u9664\u3044\u305f\u6b8b\u308a\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) drop(2)\nres26: Seq[Int] = List(3)\n```\n\n### filter\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u304b\u3089\u6210\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) filter (_ % 2 == 1)\nres27: Seq[Int] = List(1, 3)\n```\n\n### filterNot\n\u95a2\u6570\u3092\u6e80\u305f\u3055\u306a\u3044\u8981\u7d20\u304b\u3089\u6210\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) filterNot(_ % 2 == 1)\nres28: Seq[Int] = List(2)\n```\n\n### slice\nfrom\u304b\u3089to\u307e\u3067\u306e\u8981\u7d20\u304b\u3089\u6210\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) slice(2, 4)\nres29: Seq[Int] = List(3, 4)\n```\n\n### tail\n`head`\u3092\u9664\u3044\u305f\u6b8b\u308a\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) tail\nres30: Seq[Int] = List(2, 3, 4, 5)\n```\n\n### count\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) count (_ % 2 == 0)\nres31: Int = 2\n```\n\n### exists\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u304c\u3042\u308b\u304b\u5224\u5b9a\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) exists (_ > 4)\nres32: Boolean = true\n\nscala> Seq(1, 2, 3, 4, 5) exists (_ > 5)\nres33: Boolean = false\n```\n\n### groupBy\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u30fb\u6e80\u305f\u3055\u306a\u3044\u8981\u7d20\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u542b\u3093\u3060\u30de\u30c3\u30d7\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) groupBy(_ > 3)\nres34: scala.collection.immutable.Map[Boolean,Seq[Int]] = Map(false -> List(1, 2, 3), true -> List(4, 5))\n```\n\n### partition\n\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u30fb\u6e80\u305f\u3055\u306a\u3044\u8981\u7d20\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u542b\u3093\u3060\u30de\u30c3\u30d7\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) partition(_ > 3)\nres35: (Seq[Int], Seq[Int]) = (List(4, 5),List(1, 2, 3))\n```\n\n### span\n\u5148\u982d\u304b\u3089\u95a2\u6570\u3092\u6e80\u305f\u3059\u8981\u7d20\u30fb\u6e80\u305f\u3055\u306a\u304f\u306a\u3063\u3066\u304b\u3089\u6700\u5f8c\u307e\u3067\u306e\u8981\u7d20\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u542b\u3093\u3060\u30de\u30c3\u30d7\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) span(_ % 2 == 1)\nres36: (Seq[Int], Seq[Int]) = (List(1),List(2, 3, 4, 5))\n```\n\n### splitAt\nn\u756a\u76ee\u3067\u5206\u5272\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3, 4, 5) splitAt (3)\nres37: (Seq[Int], Seq[Int]) = (List(1, 2, 3),List(4, 5))\n```\n\n### foldLeft\n\u5f15\u6570\u3068\u5148\u982d\u306e\u8981\u7d20\u304b\u3089\u9806\u756a\u306b\u6f14\u7b97\u3092\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3).foldLeft(10)(_ - _)\nres38: Int = 4\n```\n\n### foldRight\n\u5f15\u6570\u3068\u672b\u5c3e\u306e\u8981\u7d20\u304b\u3089\u9806\u756a\u306b\u6f14\u7b97\u3092\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3).foldRight(10)(_ - _)\nres39: Int = -8\n```\n\n### reduceLeft\n\u5148\u982d\u306e\u8981\u7d20\u304b\u3089\u9806\u756a\u306b\u6f14\u7b97\u3092\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3).reduceLeft(_ - _)\nres40: Int = -4\n```\n\n### reduceRight\n\u672b\u5c3e\u306e\u8981\u7d20\u304b\u3089\u9806\u756a\u306b\u6f14\u7b97\u3092\u3059\u308b\n\n```scala\nscala> Seq(1, 2, 3).reduceRight(_ - _)\nres41: Int = 2\n```\n\n### sum\n\u8981\u7d20\u306e\u5024\u306e\u5408\u8a08\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3).sum\nres42: Int = 6\n```\n\n### product\n\u8981\u7d20\u306e\u5024\u306e\u7a4d\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3).product\nres43: Int = 6\n```\n\n### min\n\u6700\u5c0f\u5024\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) min\nres44: Int = 1\n```\n\n### max\n\u6700\u5927\u5024\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) max\nres45: Int = 3\n```\n\n### addString\n\u8981\u7d20\u3092\u6587\u5b57\u5217\u3068\u3057\u3066StringBuilder\u306b\u8ffd\u52a0\u3059\u308b\n\n```scala\nscala> var builder = new StringBuilder\nbuilder: StringBuilder =\n\nscala> Seq(1, 2, 3) addString(builder)\nres46: StringBuilder = 123\n```\n\n### mkString\n\u8981\u7d20\u3092\u533a\u5207\u308a\u6587\u5b57\u3067\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\n\n```scala\nscala> Seq(1, 2, 3) mkString (\"a\")\nres47: String = 1a2a3\n```\n\n### view\n\u30d3\u30e5\u30fc\u3092\u751f\u6210\u3059\u308b\u3002\n\n```scala\nscala> Seq(1, 2, 3) view\nres48: java.lang.Object with scala.collection.SeqView[Int,Seq[Int]] = SeqView(..)\n```\n\n# \u307e\u3068\u3081\n\u4eca\u56de\u306f\u3001 \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306eTraversable\u30c8\u30ec\u30a4\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u3066\u307f\u305f\u3051\u3069\u3069\u3046\u3060\u3063\u305f\uff1f\n\n\u3084\u3063\u3071\u308a\u3053\u306e\u8fba\u306f\u4f53\u3092\u52d5\u304b\u3055\u306a\u3044\u3068\u308f\u304b\u3089\u306a\u3044\u306d\u3002\n\u305c\u3072\u305c\u3072\u30bd\u30fc\u30b9\u3092\u66f8\u3044\u3066\u52d5\u304b\u3057\u3066\u307f\u3066\u306d\u3002\n\n\u4eca\u56de\u3082\n__\u4f53\u3067\u611f\u3058\u3066\u304f\u308c\u305f\u304b\u306a\uff1f__", "tags": ["Scala 2.10.1", "\u95a2\u6570\u578b\u8a00\u8a9e", "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411"]}