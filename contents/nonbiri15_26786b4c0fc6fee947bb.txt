{"context": "OpenCV+Python\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4eba\u7269\u691c\u51fa\u5668\u3092\u52d5\u4f5c\u3055\u305b\u305f\u3068\u304d\u306b\u3001\n\u30af\u30ed\u30c3\u30af\u901f\u5ea6\u304b\u3089\u4e88\u60f3\u3055\u308c\u308b\u51e6\u7406\u901f\u5ea6\u3088\u308a\u3082\u3001\u683c\u6bb5\u51e6\u7406\u304c\u9045\u3044\u306e\u3092\nRaspberry Pi B+\u3067\u611f\u3058\u307e\u3057\u305f\u3002\n\u305d\u306e\u7406\u7531\u3092\u30e1\u30e2\u3057\u307e\u3059\u3002\nhog=cv2.HOGDescriptor()\nhog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())\nhogParams = {'winStride': (8, 8), 'padding': (32, 32), 'scale': 1.05}\nhuman, r = hog.detectMultiScale(im, **hogParams)\ndetectMultiScale()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30a4\u30f3\u30c6\u30eb\u306e\u30de\u30eb\u30c1\u30b3\u30a2\u306eCPU\u3067\u306f\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u691c\u51fa\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001ARM\u306e\u30b7\u30f3\u30b0\u30eb\u30b3\u30a2\u306eRaspberryPi B+\u3067\u306f\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u306f\u52d5\u4f5c\u3057\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\u5b9f\u969b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u65b9\u306ehog.cpp\u306e\u8a18\u8ff0\u3092\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3054\u3068\u306b\u4e26\u5217\u306b\u691c\u51fa\u51e6\u7406\u3057\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\nvoid HOGDescriptor::detectMultiScale(\n    const Mat& img, vector& foundLocations, vector& foundWeights,\n    double hitThreshold, Size winStride, Size padding,\n    double scale0, double finalThreshold, bool useMeanshiftGrouping) const\n{\n//\u4e2d\u7565\n    parallel_for_(Range(0, (int)levelScale.size()),\n                 HOGInvoker(this, img, hitThreshold, winStride, padding, &levelScale[0], &allCandidates, &mtx, &tempWeights, &tempScales));\n//\u5f8c\u7565\n}\n\u5b9f\u969b\u3001Windows\u306e[\u30bf\u30b9\u30af\u30de\u30cd\u30b8\u30e3\u30fc]\u3067[\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9]\n\u3067\u5404\u30b3\u30a2\u306e\u52d5\u4f5c\u72b6\u6cc1\u3092\u898b\u3066\u3044\u308b\u3068\u3001\n detectMultiScale()\u6642\u306b\u306f\u3001\u8907\u6570\u306e\u30b3\u30a2\u304c\u52d5\u4f5c\u3057\u3066\u3044\u308b\u306e\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002\n\u305d\u308c\u306b\u5bfe\u3057\u3001detect()\u3067\u306f\u3001\u305d\u306e\u3088\u3046\u306a\u52d5\u4f5c\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u3001C++\u306e\u3068\u304d\u3082Python\u306e\u3068\u304d\u3082\u540c\u3058\u3067\u3059\u3002\nIntel Threading Building Blocks\uff08TBB\uff09\u3092\u7528\u3044\u305f\u5b9f\u88c5\u306a\u306e\u3067\nRaspberr\uff59Pi2\u306e\u30af\u30a2\u30c3\u30c9\u30b3\u30a2\u3067\u306f\u3001\u5225\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u3057\u306a\u3044\u9650\u308a\n\u30af\u30a2\u30c3\u30c9\u30b3\u30a2\u306e\u6069\u6075\u306b\u306f\u3042\u305a\u304b\u308c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u8ffd\u8a18\uff1a\ncv::parallel_for_\n\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8ffd\u52a0\u3057\u305f\u53c2\u8003\u8cc7\u6599\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ncv::parallel_for_\n \u306fIntel TBB\u304c\u4f7f\u3048\u306a\u3044\u74b0\u5883\u3067\u306f\u3001\u5225\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3001thread\u3092\u7ba1\u7406\u3059\u308b\u3088\u3046\u3067\u3059\u3002\nTBB\u3067\u306f\u3001\u660e\u793a\u7684\u306bthread\u306e\u4f5c\u6210\u3084\u7d42\u4e86\u3092\u8a18\u8ff0\u3057\u306a\u3044\u3082\u306e\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\u8ffd\u8a18\uff1a\nOpenCV\u3000TBB\u306b\u3088\u308b\u4e26\u5217\u51e6\u7406\u306b\nTBB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3001OpenCV\u306eCMake\u6642\u306e\u5909\u66f4\u70b9\u304c\u8a18\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nThreading Building Blocks\n\u3092\u5165\u624b\u3057\u3066\u304b\u3089\u3001CMake\u3059\u308b\u306e\u306f\u5fc5\u9808\u3067\u3059\u306d\u3002\nOpenCV\u5099\u5fd8\u9332\nRaspberry Pi 2\u3067OpenCV 2.4.11\u3092\u30d3\u30eb\u30c9\u3057\u305f\nRaspberry Pi 2 \u3067 OpenCV 2.4.10 \u3092\u30d3\u30eb\u30c9\u3057\u305f\n\u306b\u3088\u308b\u3068\u3001Raspberry Pi 2\u3067TBB\u3092\u30bd\u30fc\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\u5f8c\u8005\u306e\u8a18\u4e8b\u3067\u306fCMake\u306e\u8a2d\u5b9a\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\u53c2\u8003\u8cc7\u6599\n\u300cTBB\u306b\u3088\u308b\u51e6\u7406\u306e\u4e26\u5217\u5316\u3068\u9ad8\u901f\u5316\u300d\nhttp://opencv.jp/opencv2-x-tips/opencv_performance_with_tbb\n\u300ccv::parallel_for_\u3092\u4f7f\u3063\u3066\u307f\u308b\u300dhttps://github.com/atinfinity/lab/wiki/cv::parallel_for_%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\nOpenCV+Python\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4eba\u7269\u691c\u51fa\u5668\u3092\u52d5\u4f5c\u3055\u305b\u305f\u3068\u304d\u306b\u3001\n\u30af\u30ed\u30c3\u30af\u901f\u5ea6\u304b\u3089\u4e88\u60f3\u3055\u308c\u308b\u51e6\u7406\u901f\u5ea6\u3088\u308a\u3082\u3001\u683c\u6bb5\u51e6\u7406\u304c\u9045\u3044\u306e\u3092\nRaspberry Pi B+\u3067\u611f\u3058\u307e\u3057\u305f\u3002\n\u305d\u306e\u7406\u7531\u3092\u30e1\u30e2\u3057\u307e\u3059\u3002\n\nhog=cv2.HOGDescriptor()\nhog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())\nhogParams = {'winStride': (8, 8), 'padding': (32, 32), 'scale': 1.05}\nhuman, r = hog.detectMultiScale(im, **hogParams)\n\ndetectMultiScale()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30a4\u30f3\u30c6\u30eb\u306e\u30de\u30eb\u30c1\u30b3\u30a2\u306eCPU\u3067\u306f\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u691c\u51fa\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001ARM\u306e\u30b7\u30f3\u30b0\u30eb\u30b3\u30a2\u306eRaspberryPi B+\u3067\u306f\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u306f\u52d5\u4f5c\u3057\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n\u5b9f\u969b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u65b9\u306ehog.cpp\u306e\u8a18\u8ff0\u3092\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3054\u3068\u306b\u4e26\u5217\u306b\u691c\u51fa\u51e6\u7406\u3057\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\nvoid HOGDescriptor::detectMultiScale(\n    const Mat& img, vector<Rect>& foundLocations, vector<double>& foundWeights,\n    double hitThreshold, Size winStride, Size padding,\n    double scale0, double finalThreshold, bool useMeanshiftGrouping) const\n{\n//\u4e2d\u7565\n    parallel_for_(Range(0, (int)levelScale.size()),\n                 HOGInvoker(this, img, hitThreshold, winStride, padding, &levelScale[0], &allCandidates, &mtx, &tempWeights, &tempScales));\n//\u5f8c\u7565\n}\n\n\u5b9f\u969b\u3001Windows\u306e[\u30bf\u30b9\u30af\u30de\u30cd\u30b8\u30e3\u30fc]\u3067[\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9]\n\u3067\u5404\u30b3\u30a2\u306e\u52d5\u4f5c\u72b6\u6cc1\u3092\u898b\u3066\u3044\u308b\u3068\u3001\n detectMultiScale()\u6642\u306b\u306f\u3001\u8907\u6570\u306e\u30b3\u30a2\u304c\u52d5\u4f5c\u3057\u3066\u3044\u308b\u306e\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002\n\u305d\u308c\u306b\u5bfe\u3057\u3001detect()\u3067\u306f\u3001\u305d\u306e\u3088\u3046\u306a\u52d5\u4f5c\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u306f\u3001C++\u306e\u3068\u304d\u3082Python\u306e\u3068\u304d\u3082\u540c\u3058\u3067\u3059\u3002\n\nIntel Threading Building Blocks\uff08TBB\uff09\u3092\u7528\u3044\u305f\u5b9f\u88c5\u306a\u306e\u3067\nRaspberr\uff59Pi2\u306e\u30af\u30a2\u30c3\u30c9\u30b3\u30a2\u3067\u306f\u3001\u5225\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u3057\u306a\u3044\u9650\u308a\n\u30af\u30a2\u30c3\u30c9\u30b3\u30a2\u306e\u6069\u6075\u306b\u306f\u3042\u305a\u304b\u308c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n\n\u8ffd\u8a18\uff1a\ncv::parallel_for_\n\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8ffd\u52a0\u3057\u305f\u53c2\u8003\u8cc7\u6599\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ncv::parallel_for_\n \u306fIntel TBB\u304c\u4f7f\u3048\u306a\u3044\u74b0\u5883\u3067\u306f\u3001\u5225\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3001thread\u3092\u7ba1\u7406\u3059\u308b\u3088\u3046\u3067\u3059\u3002\nTBB\u3067\u306f\u3001\u660e\u793a\u7684\u306bthread\u306e\u4f5c\u6210\u3084\u7d42\u4e86\u3092\u8a18\u8ff0\u3057\u306a\u3044\u3082\u306e\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\n\u8ffd\u8a18\uff1a\n[OpenCV\u3000TBB\u306b\u3088\u308b\u4e26\u5217\u51e6\u7406](http://mibc.blog.fc2.com/blog-entry-113.html)\u306b\nTBB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3001OpenCV\u306eCMake\u6642\u306e\u5909\u66f4\u70b9\u304c\u8a18\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n[Threading Building Blocks](https://www.threadingbuildingblocks.org/download#stable-releases)\n\u3092\u5165\u624b\u3057\u3066\u304b\u3089\u3001CMake\u3059\u308b\u306e\u306f\u5fc5\u9808\u3067\u3059\u306d\u3002\n\n\nOpenCV\u5099\u5fd8\u9332\n[Raspberry Pi 2\u3067OpenCV 2.4.11\u3092\u30d3\u30eb\u30c9\u3057\u305f](http://iwaki2009.blogspot.jp/2015/03/raspberry-pi-2opencv-2411.html)\n[Raspberry Pi 2 \u3067 OpenCV 2.4.10 \u3092\u30d3\u30eb\u30c9\u3057\u305f]\n(http://iwaki2009.blogspot.jp/2015/02/raspberry-pi-2-opencv-2410.html)\n\u306b\u3088\u308b\u3068\u3001Raspberry Pi 2\u3067TBB\u3092\u30bd\u30fc\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\u5f8c\u8005\u306e\u8a18\u4e8b\u3067\u306fCMake\u306e\u8a2d\u5b9a\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n\n**\u53c2\u8003\u8cc7\u6599**\n\u300cTBB\u306b\u3088\u308b\u51e6\u7406\u306e\u4e26\u5217\u5316\u3068\u9ad8\u901f\u5316\u300d\nhttp://opencv.jp/opencv2-x-tips/opencv_performance_with_tbb\n\n\u300ccv::parallel_for_\u3092\u4f7f\u3063\u3066\u307f\u308b\u300dhttps://github.com/atinfinity/lab/wiki/cv::parallel_for_%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\n", "tags": ["OpenCV", "Python", "RaspberryPi"]}