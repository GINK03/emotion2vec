{"context": "\n\n\u6982\u8981\n\u4efb\u610f\u306e\u5217\u3092base64\u3067encode/decode\u3059\u308bembulk\u306efilter plugin\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\nGithub\nRubyGems\n\n\n\u4f7f\u3044\u65b9\nfilters:\n  - type: base64\n    columns:\n      - {name: string to decode, decode: true}\n      - {name: string to encode, encode: true}\n\nencode: true\u3068\u3059\u308b\u3068\u5165\u529b\u30ab\u30e9\u30e0\u3092encode\u3057\u3001decode: true\u3068\u3059\u308b\u3068decode\u3057\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306fREADME\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4f8b\n\nexample.yml\nin:\n  type: file\n  path_prefix: ./example.csv\n  parser:\n    type: csv\n    columns:\n      - {name: id, type: long}\n      - {name: column to encode, type: string}\n      - {name: column to decode, type: string}\nfilters:\n  - type: base64\n    columns:\n      - {name: column to encode, encode: true}\n      - {name: column to decode, decode: true}\nout:\n  type: stdout\n\n\n\nexample.csv\n100,1234,MTIzNA==\n101,4567,NDU2Nw==\n\n\n$ embulk run example.yml\n2016-11-19 17:57:34.247 +0900: Embulk v0.8.15\n2016-11-19 17:57:39.937 +0900 [INFO] (0001:transaction): Loaded plugin embulk-filter-base64 (0.1.0)\n2016-11-19 17:57:39.999 +0900 [INFO] (0001:transaction): Listing local files at directory '.' filtering filename by prefix 'example.csv'\n2016-11-19 17:57:40.018 +0900 [INFO] (0001:transaction): Loading files [example.csv]\n2016-11-19 17:57:40.152 +0900 [INFO] (0001:transaction): Using local thread executor with max_threads=8 / output tasks 4 = input tasks 1 * 4\n2016-11-19 17:57:40.167 +0900 [INFO] (0001:transaction): {done:  0 / 1, running: 0}\n100,MTIzNA==,1234\n101,NDU2Nw==,4567\n2016-11-19 17:57:40.292 +0900 [INFO] (0001:transaction): {done:  1 / 1, running: 0}\n2016-11-19 17:57:40.301 +0900 [INFO] (main): Committed.\n2016-11-19 17:57:40.301 +0900 [INFO] (main): Next config diff: {\"in\":{\"last_path\":\"example.csv\"},\"out\":{}}\n\n\u3053\u3061\u3089\u3082\u8a73\u3057\u304f\u306fREADME\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6ce8\u610f\u70b9\n\n\nJava8\u306ejava.util.Base64\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001Java8\u4ee5\u5916\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\n\n\nJava7\u4ee5\u524d\u3067\u306fapache commons codec\u306ebase64\u304c\u4f7f\u3048\u308b\u305d\u3046\u306a\u306e\u3067\u3001\u305d\u3061\u3089\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\nencode\u3059\u308b\u30ab\u30e9\u30e0\u306e\u578b\u306fstring\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nencode\u3057\u305f\u6587\u5b57\u5217\u3092\u540c\u3058\u30ab\u30e9\u30e0\u306e\u5024\u3068\u3057\u3066\u7f6e\u304d\u63db\u3048\u308b\u305f\u3081\u3067\u3059\u3002\ne.g. 1234(input) -> MTIzNA==(output) \u306e\u3088\u3046\u306b\u3001input\u306e1234\u306flong\u3067\u306f\u306a\u304fstring\u3067\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\ndecode\u3057\u305f\u5f8c\u306e\u5024\u306fstring\u306e\u307e\u307e\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u3053\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u578b\u5909\u63db\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\ne.g. MTIzNA==(input) -> 1234(output) \u306e\u3088\u3046\u306b\u3001output\u306e1234\u306flong\u3067\u306f\u306a\u304fstring\u306b\u306a\u308a\u307e\u3059\u3002\n\u578b\u5909\u63db\u3055\u305b\u305f\u3044\u5834\u5408\u306fembulk-filter-typecast\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u6587\u5b57\u30b3\u30fc\u30c9\u306f\u7279\u306b\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n\n\u540c\u3058\u6587\u5b57\u5217\u3067\u3082\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u9055\u3048\u3070encode\u7d50\u679c\u3082\u9055\u3046\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u3002\u3002\u6587\u5b57\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f\u4e0d\u52c9\u5f37\u306a\u306e\u3067\u3001\u78ba\u8a8d\u6b21\u7b2c\u5bfe\u5fdc\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n# \u6982\u8981\n\n\u4efb\u610f\u306e\u5217\u3092base64\u3067encode/decode\u3059\u308bembulk\u306efilter plugin\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n* [Github](https://github.com/ysk24ok/embulk-filter-base64)\n* [RubyGems](https://rubygems.org/gems/embulk-filter-base64)\n\n# \u4f7f\u3044\u65b9\n\n```yaml\nfilters:\n  - type: base64\n    columns:\n      - {name: string to decode, decode: true}\n      - {name: string to encode, encode: true}\n```\n\n`encode: true`\u3068\u3059\u308b\u3068\u5165\u529b\u30ab\u30e9\u30e0\u3092encode\u3057\u3001`decode: true`\u3068\u3059\u308b\u3068decode\u3057\u307e\u3059\u3002\n\n\u8a73\u3057\u304f\u306f[README](https://github.com/ysk24ok/embulk-filter-base64)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u4f8b\n\n```yaml:example.yml\nin:\n  type: file\n  path_prefix: ./example.csv\n  parser:\n    type: csv\n    columns:\n      - {name: id, type: long}\n      - {name: column to encode, type: string}\n      - {name: column to decode, type: string}\nfilters:\n  - type: base64\n    columns:\n      - {name: column to encode, encode: true}\n      - {name: column to decode, decode: true}\nout:\n  type: stdout\n```\n\n```example.csv\n100,1234,MTIzNA==\n101,4567,NDU2Nw==\n```\n\n```bash\n$ embulk run example.yml\n2016-11-19 17:57:34.247 +0900: Embulk v0.8.15\n2016-11-19 17:57:39.937 +0900 [INFO] (0001:transaction): Loaded plugin embulk-filter-base64 (0.1.0)\n2016-11-19 17:57:39.999 +0900 [INFO] (0001:transaction): Listing local files at directory '.' filtering filename by prefix 'example.csv'\n2016-11-19 17:57:40.018 +0900 [INFO] (0001:transaction): Loading files [example.csv]\n2016-11-19 17:57:40.152 +0900 [INFO] (0001:transaction): Using local thread executor with max_threads=8 / output tasks 4 = input tasks 1 * 4\n2016-11-19 17:57:40.167 +0900 [INFO] (0001:transaction): {done:  0 / 1, running: 0}\n100,MTIzNA==,1234\n101,NDU2Nw==,4567\n2016-11-19 17:57:40.292 +0900 [INFO] (0001:transaction): {done:  1 / 1, running: 0}\n2016-11-19 17:57:40.301 +0900 [INFO] (main): Committed.\n2016-11-19 17:57:40.301 +0900 [INFO] (main): Next config diff: {\"in\":{\"last_path\":\"example.csv\"},\"out\":{}}\n```\n\n\n\u3053\u3061\u3089\u3082\u8a73\u3057\u304f\u306f[README](https://github.com/ysk24ok/embulk-filter-base64)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u6ce8\u610f\u70b9\n\n* [Java8\u306ejava.util.Base64](https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html)\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001Java8\u4ee5\u5916\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\n  - Java7\u4ee5\u524d\u3067\u306f[apache commons codec\u306ebase64](https://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/binary/Base64.html)\u304c\u4f7f\u3048\u308b\u305d\u3046\u306a\u306e\u3067\u3001\u305d\u3061\u3089\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n* encode\u3059\u308b\u30ab\u30e9\u30e0\u306e\u578b\u306f`string`\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n  - encode\u3057\u305f\u6587\u5b57\u5217\u3092\u540c\u3058\u30ab\u30e9\u30e0\u306e\u5024\u3068\u3057\u3066\u7f6e\u304d\u63db\u3048\u308b\u305f\u3081\u3067\u3059\u3002\n  - e.g. `1234(input) -> MTIzNA==(output)` \u306e\u3088\u3046\u306b\u3001input\u306e1234\u306f`long`\u3067\u306f\u306a\u304f`string`\u3067\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n* decode\u3057\u305f\u5f8c\u306e\u5024\u306f`string`\u306e\u307e\u307e\u306b\u306a\u308a\u307e\u3059\u3002\n  - \u3053\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u578b\u5909\u63db\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n  - e.g. `MTIzNA==(input) -> 1234(output)` \u306e\u3088\u3046\u306b\u3001output\u306e1234\u306f`long`\u3067\u306f\u306a\u304f`string`\u306b\u306a\u308a\u307e\u3059\u3002\n  - \u578b\u5909\u63db\u3055\u305b\u305f\u3044\u5834\u5408\u306f[embulk-filter-typecast](https://github.com/sonots/embulk-filter-typecast)\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n* \u6587\u5b57\u30b3\u30fc\u30c9\u306f\u7279\u306b\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n  - \u540c\u3058\u6587\u5b57\u5217\u3067\u3082\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u9055\u3048\u3070encode\u7d50\u679c\u3082\u9055\u3046\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u3002\u3002\u6587\u5b57\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f\u4e0d\u52c9\u5f37\u306a\u306e\u3067\u3001\u78ba\u8a8d\u6b21\u7b2c\u5bfe\u5fdc\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Embulk"]}