{"context": "\u958b\u5e97\u65e5\u3068\u9589\u5e97\u65e5\u306e\u30ab\u30e9\u30e0\u304c\u3042\u3063\u305f\u6642\u306b\u3001\nopen_at > closed_at\n\n\u306a\u3069\u3092\u691c\u8a3c\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u52d5\u7684\u306b\u8ffd\u52a0\u3059\u308bTips\n\n\u30b3\u30fc\u30c9\n\u5168\u6587\u3067\u3059\n\napp/models/concerns/active_comparison_validator.rb\nmodule ActiveComparisonValidator\n  module ClassMethods\n    # Verified: that A is greater than B.\n    # @param [String] field_a_<_field_b This string is field_name, operator_name and field_name\n    # @return Define a custom validator in the context of the model.\n    # @example open_at < close_at\n    #     class Shop < ActiveRecord::Base\n    #       include OriginValidator\n    #       comparison_validator 'open_at < close_at'\n    #     end\n    # @note\n    #   You can use their operator.\n    #     - '<'\n    #     - '<='\n    #     - '>'\n    #     - '>='\n    #     - '=='\n    #     - '!='\n    # @note\n    #   And localization.\n    #     - Dedault is used errors.messages\n    #       - greater_than\n    #       - less_than\n    #       - greater_than_or_equal_to\n    #       - less_than_or_equal_to\n    #       - confirmation\n    #       - other_than\n    def comparison_validator(a_operator_b)\n      a_attr, operator, b_attr = *a_operator_b.split(/\\s/).map(&:to_sym)\n      method_name = \"comparison_validator_for_#{a_attr}_and_#{b_attr}\"\n      define_method(method_name) do\n        a_value = send(a_attr)\n        to_value = send(b_attr)\n        return unless a_value && to_value\n        locals = {\n          :<  => [:greater_than,             :less_than,                :count],\n          :<= => [:greater_than_or_equal_to, :less_than_or_equal_to,    :count],\n          :>  => [:less_than,                :greater_than,             :count],\n          :>= => [:less_than_or_equal_to,    :greater_than_or_equal_to, :count],\n          :== => [:confirmation,             :confirmation,             :attribute],\n          :!= => [:other_than,               :other_than,               :attribute]\n        }\n        return unless locals.key?(operator)\n        return if a_value.send(operator, to_value)\n        a_value_human = { locals[operator].last => self.class.human_attribute_name(a_attr) }\n        b_value_human = { locals[operator].last => self.class.human_attribute_name(b_attr) }\n\n        I18n.with_options scope: 'errors.messages' do |locale|\n          errors.add(b_attr, locale.t(locals[operator].first,  a_value_human))\n          errors.add(a_attr, locale.t(locals[operator].second, b_value_human))\n        end\n      end\n      config = %(validate :#{method_name})\n      class_eval(config)\n    end\n  end\nend\n\n\n\n\u65e5\u672c\u8a9e\u5316\nI18n\u306e\u3092\u3064\u304b\u3063\u3066\u3044\u307e\u3059\u3002\nconfig/locals/ja.yml\u306e\u3001errors.messages.less_than\u3092\u7de8\u96c6\u3059\u308b\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\n\n\u4f7f\u3044\u65b9\nShop\u30e2\u30c7\u30eb\uff08\u5e97\u8217\uff09\u304c\nopen_at\uff08\u958b\u5e97\uff09 < close_at\uff08\u9589\u5e97\uff09 \u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\n\nshop.rb\n\nclass Shop < ActiveRecord::Base\n  include ActiveComparisonValidator\n  comparison_validator 'open_at < close_at'\nend\n\n\n\n\u6f14\u7b97\u5b50\n\n'<'\n'<='\n'>'\n'>='\n'=='\n'!='\n\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u3061\u3089\u3067Gem\u306b\u3057\u3066\u307f\u307e\u3057\u305f\nactive_comparison_validator\n\u958b\u5e97\u65e5\u3068\u9589\u5e97\u65e5\u306e\u30ab\u30e9\u30e0\u304c\u3042\u3063\u305f\u6642\u306b\u3001\n\n```rb\nopen_at > closed_at\n```\n\n\u306a\u3069\u3092\u691c\u8a3c\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u52d5\u7684\u306b\u8ffd\u52a0\u3059\u308bTips\n\n# \u30b3\u30fc\u30c9\n\u5168\u6587\u3067\u3059\n\n```rb:app/models/concerns/active_comparison_validator.rb\nmodule ActiveComparisonValidator\n  module ClassMethods\n    # Verified: that A is greater than B.\n    # @param [String] field_a_<_field_b This string is field_name, operator_name and field_name\n    # @return Define a custom validator in the context of the model.\n    # @example open_at < close_at\n    #     class Shop < ActiveRecord::Base\n    #       include OriginValidator\n    #       comparison_validator 'open_at < close_at'\n    #     end\n    # @note\n    #   You can use their operator.\n    #     - '<'\n    #     - '<='\n    #     - '>'\n    #     - '>='\n    #     - '=='\n    #     - '!='\n    # @note\n    #   And localization.\n    #     - Dedault is used errors.messages\n    #       - greater_than\n    #       - less_than\n    #       - greater_than_or_equal_to\n    #       - less_than_or_equal_to\n    #       - confirmation\n    #       - other_than\n    def comparison_validator(a_operator_b)\n      a_attr, operator, b_attr = *a_operator_b.split(/\\s/).map(&:to_sym)\n      method_name = \"comparison_validator_for_#{a_attr}_and_#{b_attr}\"\n      define_method(method_name) do\n        a_value = send(a_attr)\n        to_value = send(b_attr)\n        return unless a_value && to_value\n        locals = {\n          :<  => [:greater_than,             :less_than,                :count],\n          :<= => [:greater_than_or_equal_to, :less_than_or_equal_to,    :count],\n          :>  => [:less_than,                :greater_than,             :count],\n          :>= => [:less_than_or_equal_to,    :greater_than_or_equal_to, :count],\n          :== => [:confirmation,             :confirmation,             :attribute],\n          :!= => [:other_than,               :other_than,               :attribute]\n        }\n        return unless locals.key?(operator)\n        return if a_value.send(operator, to_value)\n        a_value_human = { locals[operator].last => self.class.human_attribute_name(a_attr) }\n        b_value_human = { locals[operator].last => self.class.human_attribute_name(b_attr) }\n\n        I18n.with_options scope: 'errors.messages' do |locale|\n          errors.add(b_attr, locale.t(locals[operator].first,  a_value_human))\n          errors.add(a_attr, locale.t(locals[operator].second, b_value_human))\n        end\n      end\n      config = %(validate :#{method_name})\n      class_eval(config)\n    end\n  end\nend\n```\n\n## \u65e5\u672c\u8a9e\u5316\nI18n\u306e\u3092\u3064\u304b\u3063\u3066\u3044\u307e\u3059\u3002\nconfig/locals/ja.yml\u306e\u3001errors.messages.less_than\u3092\u7de8\u96c6\u3059\u308b\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\n\n# \u4f7f\u3044\u65b9\n\nShop\u30e2\u30c7\u30eb\uff08\u5e97\u8217\uff09\u304c\nopen_at\uff08\u958b\u5e97\uff09 < close_at\uff08\u9589\u5e97\uff09 \u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\n\n```rb:shop.rb\n\nclass Shop < ActiveRecord::Base\n  include ActiveComparisonValidator\n  comparison_validator 'open_at < close_at'\nend\n```\n\n## \u6f14\u7b97\u5b50\n\n- '<'\n- '<='\n- '>'\n- '>='\n- '=='\n- '!='\n\n\n# \u3061\u306a\u307f\u306b\u3001\u3053\u3061\u3089\u3067Gem\u306b\u3057\u3066\u307f\u307e\u3057\u305f\n\n[active_comparison_validator](https://github.com/s1160054/active_comparison_validator)\n", "tags": ["Rails", "ActiveRecord"]}