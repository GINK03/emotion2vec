{"context": " More than 1 year has passed since last update.\u7b2c\uff16\u56de\u76ee Prototype\u30d1\u30bf\u30fc\u30f3\n\n\u6982\u8981\nPrototype\u30d1\u30bf\u30fc\u30f3\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3057\u3066\u304a\u3044\u305f\u300c\u539f\u578b\u300d\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\nnew \u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308c\u3070 Abstract Factory./ Factory Method.\nclone \u3092\u3064\u304b\u3046\u5834\u5408\u306e Prototype.\n\n\n\u30b5\u30f3\u30d7\u30eb\n\nClient.java\n    private HashMap<String,Prototype> hash = new HashMap<String,Prototype>();\n    public void putObject(String key, Prototype proto) {\n        hash.put(key, proto);\n    }\n    public Prototype create(String key) {\n        return hash.get(key).createClone();\n    }\n\n\n\nPrototype.java\ninterface Prototype extends Cloneable {\n    public abstract void message(String s);\n    public abstract Prototype createClone();\n}\n\n\n\nPrototype.java\nclass ConcretePrototype implements Prototype {\n    private String key;\n\n    public ConcretePrototype(String key) {\n        this.key = key;\n    }\n\n    public void message(String s) {\n        System.out.println(s);\n    }\n\n    public Prototype createClone() {\n        Prototype p = null;\n        try {p = (Prototype)clone();}\n        catch(CloneNotSupportedException e) {e.printStackTrace();}\n        return p;\n    }\n}\n\n\n\nMain.java\npublic class Main {\n    public static void main(String[] args){\n        Client client = new Client();\n\n        client.putObject(\"typeA\", new ConcretePrototype('A'));\n        client.putObject(\"typeB\", new ConcretePrototype('B'));\n        client.putObject(\"typeC\", new ConcretePrototype('C'));\n\n        Prototype prototype1 = client.create(\"typeA\");\n        Prototype prototype2 = client.create(\"typeB\");\n        Prototype prototype3 = client.create(\"typeC\");\n\n        prototype1.message(\"message1\");\n        prototype2.message(\"message2\");\n        prototype3.message(\"message3\");\n\n    }\n}\n\n\n\n\u7d50\u679c\nmessage1\nmessage2\nmessage3\n\n\u7b2c\uff16\u56de\u76ee **Prototype\u30d1\u30bf\u30fc\u30f3**\n# \u6982\u8981\nPrototype\u30d1\u30bf\u30fc\u30f3\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3057\u3066\u304a\u3044\u305f\u300c\u539f\u578b\u300d\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n- new \u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308c\u3070 Abstract Factory./ Factory Method.\n- clone \u3092\u3064\u304b\u3046\u5834\u5408\u306e Prototype.\n\n# \u30b5\u30f3\u30d7\u30eb\n```Client.java\n    private HashMap<String,Prototype> hash = new HashMap<String,Prototype>();\n    public void putObject(String key, Prototype proto) {\n        hash.put(key, proto);\n    }\n    public Prototype create(String key) {\n        return hash.get(key).createClone();\n    }\n```\n```Prototype.java\ninterface Prototype extends Cloneable {\n    public abstract void message(String s);\n    public abstract Prototype createClone();\n}\n```\n```Prototype.java\nclass ConcretePrototype implements Prototype {\n    private String key;\n\n    public ConcretePrototype(String key) {\n        this.key = key;\n    }\n\n    public void message(String s) {\n        System.out.println(s);\n    }\n\n    public Prototype createClone() {\n        Prototype p = null;\n        try {p = (Prototype)clone();}\n        catch(CloneNotSupportedException e) {e.printStackTrace();}\n        return p;\n    }\n}\n```\n```Main.java\npublic class Main {\n    public static void main(String[] args){\n        Client client = new Client();\n\n        client.putObject(\"typeA\", new ConcretePrototype('A'));\n        client.putObject(\"typeB\", new ConcretePrototype('B'));\n        client.putObject(\"typeC\", new ConcretePrototype('C'));\n\n        Prototype prototype1 = client.create(\"typeA\");\n        Prototype prototype2 = client.create(\"typeB\");\n        Prototype prototype3 = client.create(\"typeC\");\n\n        prototype1.message(\"message1\");\n        prototype2.message(\"message2\");\n        prototype3.message(\"message3\");\n\n    }\n}\n```\n# \u7d50\u679c\n```\nmessage1\nmessage2\nmessage3\n```\n", "tags": ["Java", "\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3"]}