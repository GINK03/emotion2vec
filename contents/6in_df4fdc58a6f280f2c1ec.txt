{"context": "\n\n\u6982\u8981\nnim\u306e\u6b63\u898f\u8868\u73fe\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u64cd\u4f5c\u30b3\u30c4\u30b3\u30c4\u3068\u3002\nre\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u306a\u304f\u3001nre\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nnre\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001options\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3063\u307d\u304f\u3001\u3061\u3087\u3063\u3068\u30e2\u30c0\u30f3\u306a\u96f0\u56f2\u6c17\u304c\u3059\u308b\u6b63\u898f\u8868\u73fe\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u30e1\u30e2\n\n\u30de\u30c3\u30c1\nimport nre,options,strutils\nblock:\n  echo \"1.match=>\",\"abc\".match(re\"abc\")\n  echo \"2.match=>\",\"abcdef\".match(re\"^abc\")\n  echo \"3.unmatch=>\",\"abcdef\".match(re\"def$\")\n  echo \"4.match=>\",\"abcdef\".match(re\".+def$\")\n\n(stdout)\n1.match=>Some(abc)\n2.match=>Some(abc)\n3.unmatch=>None[RegexMatch]\n4.match=>Some(abcdef)\n\n\n\u691c\u7d22\nimport nre,options,strutils\nblock:\n  echo \"1.find=>\",\"abc\".find(re\"abc\")\n  echo \"2.find=>\",\"abcdef\".find(re\"^abc\")\n  echo \"3.find=>\",\"abcdef\".find(re\"def$\")\n  echo \"4.find=>\",\"abcdef\".find(re\".+def$\")\n\n(stdout)\n1.find=>Some(abc)\n2.find=>Some(abc)\n3.find=>Some(def)\n4.find=>Some(abcdef)\n\n\n\u5206\u5272(split)\nimport nre,options,strutils\nblock:\n  let s1 = \"Test,test; test. Test.\"\n  echo s1.split(re\"[,;.] ?\")   == @[\"Test\", \"test\", \"test\", \"Test\", \"\"]\n  echo s1.split(re\"([,;.]) ?\") == @[\"Test\", \",\", \"test\", \";\", \"test\", \".\", \"Test\", \".\", \"\"]\n\n(stdout)\ntrue\ntrue\n\n\n\u7f6e\u63db(\u7f6e\u63db\u6307\u5b9a\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3088)\nimport nre,options,strutils\nblock:\n  # proc\u3067\u7f6e\u63db\n  echo \"1.replace=>\",\"abc\".replace( re\"(\\w)\", proc (m: RegexMatch) : string =\n    #var s:string = m.match\n    #m.str.toUpper\n    m.match.toUpper\n  )\n  # proc\u3067\u7f6e\u63db\n  echo \"2.replace=>\",\"abc\".replace( re\"(abc)\", proc (m: string) : string =\n    m & \"HELLO\"\n  )\n  # \u6587\u5b57\u5217\u3067\u7f6e\u63db\n  echo \"3.replace=>\",\"abcdef\".replace( re\"(?<word1>abc)(?<word2>def)\", \"[[$word1][$word2]]\")\n  # do\u3067\u7f6e\u63db\n  echo \"4.replace=>\", \"abc\".replace(re\"(abc)\")\n    do (m: string) -> string :\n      m & \"HELLO\"\n\n(stdout)\n1.replace=>ABC\n2.replace=>abcHELLO\n3.replace=>[[abc][def]]\n4.replace=>abcHELLO\n\n\n\u30aa\u30d7\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8(\u30de\u30c3\u30c1\u5f8c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\nimport nre,options,strutils\nblock:\n  var m = \"abc123DEF\".match(re\"([a-z]+)\\d+([A-Z]+)\").get\n  echo \"str=>\",m.str\n  echo \"match=>\",m.match\n  echo \"matchBounds=>\",m.matchBounds\n  echo \"captures[0]=>\",m.captures[0]\n  echo \"captures[1]=>\",m.captures[1]\n\n(stdout)\nstr=>abc123DEF\nmatch=>abc123DEF\nmatchBounds=>(a: 0, b: 8)\ncaptures[0]=>abc\ncaptures[1]=>DEF\n\n\niterator\u30b5\u30f3\u30d7\u30eb\nimport nre,options,strutils\nblock:\n  let line = \"123 456 789\"\n  for m in line.findIter(re\"\\d+\") :\n    echo m.match\n\n(stdout)\n123\n456\n789\n\n# \u6982\u8981\nnim\u306e\u6b63\u898f\u8868\u73fe\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u64cd\u4f5c\u30b3\u30c4\u30b3\u30c4\u3068\u3002\nre\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u306a\u304f\u3001nre\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nnre\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001options\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3063\u307d\u304f\u3001\u3061\u3087\u3063\u3068\u30e2\u30c0\u30f3\u306a\u96f0\u56f2\u6c17\u304c\u3059\u308b\u6b63\u898f\u8868\u73fe\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n## \u4ee5\u4e0b\u30e1\u30e2\n### \u30de\u30c3\u30c1\n```nim\nimport nre,options,strutils\nblock:\n  echo \"1.match=>\",\"abc\".match(re\"abc\")\n  echo \"2.match=>\",\"abcdef\".match(re\"^abc\")\n  echo \"3.unmatch=>\",\"abcdef\".match(re\"def$\")\n  echo \"4.match=>\",\"abcdef\".match(re\".+def$\")\n```\n```\n(stdout)\n1.match=>Some(abc)\n2.match=>Some(abc)\n3.unmatch=>None[RegexMatch]\n4.match=>Some(abcdef)\n```\n### \u691c\u7d22\n```nim\nimport nre,options,strutils\nblock:\n  echo \"1.find=>\",\"abc\".find(re\"abc\")\n  echo \"2.find=>\",\"abcdef\".find(re\"^abc\")\n  echo \"3.find=>\",\"abcdef\".find(re\"def$\")\n  echo \"4.find=>\",\"abcdef\".find(re\".+def$\")\n```\n```\n(stdout)\n1.find=>Some(abc)\n2.find=>Some(abc)\n3.find=>Some(def)\n4.find=>Some(abcdef)\n```\n### \u5206\u5272(split)\n```nim\nimport nre,options,strutils\nblock:\n  let s1 = \"Test,test; test. Test.\"\n  echo s1.split(re\"[,;.] ?\")   == @[\"Test\", \"test\", \"test\", \"Test\", \"\"]\n  echo s1.split(re\"([,;.]) ?\") == @[\"Test\", \",\", \"test\", \";\", \"test\", \".\", \"Test\", \".\", \"\"]\n```\n```\n(stdout)\ntrue\ntrue\n```\n### \u7f6e\u63db(\u7f6e\u63db\u6307\u5b9a\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3088)\n```nim\nimport nre,options,strutils\nblock:\n  # proc\u3067\u7f6e\u63db\n  echo \"1.replace=>\",\"abc\".replace( re\"(\\w)\", proc (m: RegexMatch) : string =\n    #var s:string = m.match\n    #m.str.toUpper\n    m.match.toUpper\n  )\n  # proc\u3067\u7f6e\u63db\n  echo \"2.replace=>\",\"abc\".replace( re\"(abc)\", proc (m: string) : string =\n    m & \"HELLO\"\n  )\n  # \u6587\u5b57\u5217\u3067\u7f6e\u63db\n  echo \"3.replace=>\",\"abcdef\".replace( re\"(?<word1>abc)(?<word2>def)\", \"[[$word1][$word2]]\")\n  # do\u3067\u7f6e\u63db\n  echo \"4.replace=>\", \"abc\".replace(re\"(abc)\")\n    do (m: string) -> string :\n      m & \"HELLO\"\n```\n```\n(stdout)\n1.replace=>ABC\n2.replace=>abcHELLO\n3.replace=>[[abc][def]]\n4.replace=>abcHELLO\n```\n### \u30aa\u30d7\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8(\u30de\u30c3\u30c1\u5f8c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\n```nim\nimport nre,options,strutils\nblock:\n  var m = \"abc123DEF\".match(re\"([a-z]+)\\d+([A-Z]+)\").get\n  echo \"str=>\",m.str\n  echo \"match=>\",m.match\n  echo \"matchBounds=>\",m.matchBounds\n  echo \"captures[0]=>\",m.captures[0]\n  echo \"captures[1]=>\",m.captures[1]\n```\n```\n(stdout)\nstr=>abc123DEF\nmatch=>abc123DEF\nmatchBounds=>(a: 0, b: 8)\ncaptures[0]=>abc\ncaptures[1]=>DEF\n```\n### iterator\u30b5\u30f3\u30d7\u30eb\n```nim\nimport nre,options,strutils\nblock:\n  let line = \"123 456 789\"\n  for m in line.findIter(re\"\\d+\") :\n    echo m.match\n```\n```\n(stdout)\n123\n456\n789\n```\n", "tags": ["Nim"]}