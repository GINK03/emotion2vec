{"tags": ["C\u8a00\u8a9e", "macro"], "context": " More than 1 year has passed since last update.C\u8a00\u8a9e\u3078\u306e\u611f\u8b1d\u306e\u6b63\u62f3\u7a81\u304d 3\u65e5\u76ee\u3067\u3059\u3002\n\u305d\u308d\u305d\u308d\u5b9f\u7528\u7684\u306a\u30de\u30af\u30ed\u30cd\u30bf\u3082\u5c3d\u304d\u3001\u82e6\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u6982\u8981\n\u5b9f\u7528\u7684\u3067Modern\u306aC++\u306etemplate\u3092\u307f\u306a\u3089\u3044\u3001C\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066\u4f3c\u305f\u3088\u3046\u306a\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u8003\u3048\u308b\u4eba\u306f\u305d\u3053\u305d\u3053\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nhttp://stackoverflow.com/questions/10950828/simulation-of-templates-in-c\n\u79c1\u3082\u6ec5\u591a\u306a\u3053\u3068\u3067\u306fC\u30de\u30af\u30ed\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3082\u3069\u304d\u307f\u305f\u3044\u306a\u3053\u3068\u306f\u3084\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001\n\u6642\u3005\u4f7f\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3092\u3042\u3052\u308b\u3068\u3001C++\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u304d\u3067\u3059\u3002\n\nC++\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u53c2\u8003\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fflatbuffers\u304b\u3089\u6301\u3063\u3066\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/google/flatbuffers\nbuffer\u306bendian\u5909\u63db\u3057\u3066write/read\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u306d\u3002\n\u4e0d\u8981\u306a\u30de\u30af\u30ed\u306f\u9664\u53bb\u3063\u3066\u307e\u3059\u3002\n\nflatbuffers/include/flatbuffers/flatbuffers.h\ntemplate<typename T> T EndianScalar(T t) {\n    // If you're on the few remaining big endian platforms, we make the bold\n    // assumption you're also on gcc/clang, and thus have bswap intrinsics:\n    if (sizeof(T) == 1) {   // Compile-time if-then's.\n      return t;\n    } else if (sizeof(T) == 2) {\n      auto r = __builtin_bswap16(*reinterpret_cast<uint16_t *>(&t));\n      return *reinterpret_cast<T *>(&r);\n    } else if (sizeof(T) == 4) {\n      auto r = __builtin_bswap32(*reinterpret_cast<uint32_t *>(&t));\n      return *reinterpret_cast<T *>(&r);\n    } else if (sizeof(T) == 8) {\n      auto r = __builtin_bswap64(*reinterpret_cast<uint64_t *>(&t));\n      return *reinterpret_cast<T *>(&r);\n    } else {\n      assert(0);\n    }\n}\ntemplate<typename T> T ReadScalar(const void *p) {\n  return EndianScalar(*reinterpret_cast<const T *>(p));\n}\ntemplate<typename T> void WriteScalar(void *p, T t) {\n  *reinterpret_cast<T *>(p) = EndianScalar(t);\n}\n\n\n\n\nC\u30de\u30af\u30ed\u306b\u3088\u308b\u4f3c\u975e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u3053\u306e\u304f\u3089\u3044\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3042\u308c\u3070\u3001C\u30de\u30af\u30ed\u4f7f\u3063\u3066\u305d\u306e\u307e\u307e\u79fb\u690d\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\ntemplate.h\n#include <stdint.h>\n#include <assert.h>\n\n#ifndef Def\n#define Def(T) \\\n  T EndianScalar##T(T t) {\\\n  if (sizeof(T) == 1) { \\\n    return t; \\\n  } else if (sizeof(T) == 2) { \\\n    T r = __builtin_bswap16(*(uint16_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else if (sizeof(T) == 4) { \\\n    T r = __builtin_bswap32(*(uint32_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else if (sizeof(T) == 8) { \\\n    T r = __builtin_bswap64(*(uint64_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else { \\\n    assert(0); \\\n  } \\\n} \\\nT ReadScalar_##T(const void *p) { \\\n  return EndianScalar##T(*(const T *)(p)); \\\n} \\\nvoid WriteScalar_##T(void *p, T t) { \\\n  *(T *)(p) = EndianScalar##T(t); \\\n}\n\nDef(uint8_t)\nDef(uint16_t)\nDef(uint32_t)\nDef(uint64_t)\nDef(int8_t)\nDef(int16_t)\nDef(int32_t)\nDef(int64_t)\nDef(float)\nDef(double)\n\n#undef Def\n#endif\n\n\n\nDef\u304c\u9023\u7d9a\u3057\u3061\u3083\u3046\u3068\u3053\u308d\u304c\u3042\u308c\u3067\u3059\u3051\u3069\u3001Def\u306e\u5f15\u6570\u306bC\u306e\u578b\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u6587\u5b57\u5217\u5316\u3057\u3066\u5c55\u958b\u3057\u3061\u3083\u3046\u3002\n\u3061\u3087\u308d\u3044\u3001\u3068\u601d\u3063\u3066\u30c6\u30b9\u30c8\u3057\u3066\u307f\u305f\u3089\u3001float\u3068double\u304c\u601d\u3063\u305f\u3068\u304a\u308a\u306b\u52d5\u304b\u306a\u3044\u3002\u3002\n\u306a\u305c\u3060\u3001\u3068\u304a\u3082\u3063\u3066\u30c7\u30a3\u30b9\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u3053\u3053\u304c\u8150\u3063\u3066\u3044\u305f\u3002\n\ntemplate.h\n#ifndef Def\n#define Def(T) \\\n  T EndianScalar##T(T t) {\\\n  if (sizeof(T) == 1) { \\\n    return t; \\\n  } else if (sizeof(T) == 2) { \\\n    uint16_t r = __builtin_bswap16(*(uint16_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else if (sizeof(T) == 4) { \\\n    uint32_t r = __builtin_bswap32(*(uint32_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else if (sizeof(T) == 8) { \\\n    uint64_t r = __builtin_bswap64(*(uint64_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else { \\\n    assert(0); \\\n  } \\\n} \\\nT ReadScalar_##T(const void *p) { \\\n  return EndianScalar##T(*(const T *)(p)); \\\n} \\\nvoid WriteScalar_##T(void *p, T t) { \\\n  *(T *)(p) = EndianScalar##T(t); \\\n}\n\n\n\n\u305f\u3060\u3057\u304f\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\u8003\u3048\u306a\u3057\u306bC++\u306eauto\u3092\u30de\u30af\u30edT\u3067\u7f6e\u304d\u63db\u3048\u3061\u3083\u3063\u3066\u305f\u306e\u304c\u60aa\u304b\u3063\u305f\u3067\u3059\u3002\nC\u30de\u30af\u30ed\u3067\u4f3c\u975etemplate\u3059\u308b\u5834\u5408\u3001struct\u3084method\u306e\u672b\u5c3e\u306b\u578b\u540d\u3064\u3051\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u540d\u79f0\u306f\u975e\u5e38\u306b\u91cd\u8981\u3067\u3059\u3002\n\n\u6ce8\u610f\u70b9\n(1) C\u30de\u30af\u30ed\u306b\u3088\u308b\u4f3c\u975etemplate\u3092\u591a\u7528\u3059\u308b\u306e\u306f\u3084\u3081\u3088\u3046\u3002\n(2) \u601d\u3063\u305f\u3068\u304a\u308a\u306b\u5c55\u958b\u3057\u3066\u308b\u3051\u3069\u52d5\u304b\u306a\u3044\u306a\u30fc\u3068\u601d\u3063\u305f\u3089\u30c7\u30a3\u30b9\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u3066\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n(3) \u30de\u30af\u30ed\u3092\u4f7f\u3063\u305f\u5c0f\u624b\u5148\u306e\u5171\u901a\u5316\u3084\u62bd\u8c61\u5316\u3088\u308a\u3001C++\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u307b\u3046\u304c\u826f\u3044\u5834\u5408\u304c\u591a\u3044\u305f\u3081\u3001Modern\u306aC++\u306e\u4f7f\u7528\u3092\u691c\u8a0e\u3057\u307e\u3057\u3087\u3046\u3002\n\u4ee5\u4e0a\nC\u8a00\u8a9e\u3078\u306e\u611f\u8b1d\u306e\u6b63\u62f3\u7a81\u304d 3\u65e5\u76ee\u3067\u3059\u3002\n\u305d\u308d\u305d\u308d\u5b9f\u7528\u7684\u306a\u30de\u30af\u30ed\u30cd\u30bf\u3082\u5c3d\u304d\u3001\u82e6\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n# \u6982\u8981\n\u5b9f\u7528\u7684\u3067Modern\u306aC++\u306etemplate\u3092\u307f\u306a\u3089\u3044\u3001C\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066\u4f3c\u305f\u3088\u3046\u306a\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u8003\u3048\u308b\u4eba\u306f\u305d\u3053\u305d\u3053\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nhttp://stackoverflow.com/questions/10950828/simulation-of-templates-in-c\n\n\u79c1\u3082\u6ec5\u591a\u306a\u3053\u3068\u3067\u306fC\u30de\u30af\u30ed\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3082\u3069\u304d\u307f\u305f\u3044\u306a\u3053\u3068\u306f\u3084\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001\n\u6642\u3005\u4f7f\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3092\u3042\u3052\u308b\u3068\u3001C++\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u304d\u3067\u3059\u3002\n\n# C++\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u53c2\u8003\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fflatbuffers\u304b\u3089\u6301\u3063\u3066\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/google/flatbuffers\n\nbuffer\u306bendian\u5909\u63db\u3057\u3066write/read\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u306d\u3002\n\u4e0d\u8981\u306a\u30de\u30af\u30ed\u306f\u9664\u53bb\u3063\u3066\u307e\u3059\u3002\n\n```cpp:flatbuffers/include/flatbuffers/flatbuffers.h\ntemplate<typename T> T EndianScalar(T t) {\n    // If you're on the few remaining big endian platforms, we make the bold\n    // assumption you're also on gcc/clang, and thus have bswap intrinsics:\n    if (sizeof(T) == 1) {   // Compile-time if-then's.\n      return t;\n    } else if (sizeof(T) == 2) {\n      auto r = __builtin_bswap16(*reinterpret_cast<uint16_t *>(&t));\n      return *reinterpret_cast<T *>(&r);\n    } else if (sizeof(T) == 4) {\n      auto r = __builtin_bswap32(*reinterpret_cast<uint32_t *>(&t));\n      return *reinterpret_cast<T *>(&r);\n    } else if (sizeof(T) == 8) {\n      auto r = __builtin_bswap64(*reinterpret_cast<uint64_t *>(&t));\n      return *reinterpret_cast<T *>(&r);\n    } else {\n      assert(0);\n    }\n}\ntemplate<typename T> T ReadScalar(const void *p) {\n  return EndianScalar(*reinterpret_cast<const T *>(p));\n}\ntemplate<typename T> void WriteScalar(void *p, T t) {\n  *reinterpret_cast<T *>(p) = EndianScalar(t);\n}\n\n```\n\n# C\u30de\u30af\u30ed\u306b\u3088\u308b\u4f3c\u975e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n\u3053\u306e\u304f\u3089\u3044\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3042\u308c\u3070\u3001C\u30de\u30af\u30ed\u4f7f\u3063\u3066\u305d\u306e\u307e\u307e\u79fb\u690d\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n```C:template.h\n#include <stdint.h>\n#include <assert.h>\n\n#ifndef Def\n#define Def(T) \\\n  T EndianScalar##T(T t) {\\\n  if (sizeof(T) == 1) { \\\n    return t; \\\n  } else if (sizeof(T) == 2) { \\\n    T r = __builtin_bswap16(*(uint16_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else if (sizeof(T) == 4) { \\\n    T r = __builtin_bswap32(*(uint32_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else if (sizeof(T) == 8) { \\\n    T r = __builtin_bswap64(*(uint64_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else { \\\n    assert(0); \\\n  } \\\n} \\\nT ReadScalar_##T(const void *p) { \\\n  return EndianScalar##T(*(const T *)(p)); \\\n} \\\nvoid WriteScalar_##T(void *p, T t) { \\\n  *(T *)(p) = EndianScalar##T(t); \\\n}\n\nDef(uint8_t)\nDef(uint16_t)\nDef(uint32_t)\nDef(uint64_t)\nDef(int8_t)\nDef(int16_t)\nDef(int32_t)\nDef(int64_t)\nDef(float)\nDef(double)\n\n#undef Def\n#endif\n\n```\nDef\u304c\u9023\u7d9a\u3057\u3061\u3083\u3046\u3068\u3053\u308d\u304c\u3042\u308c\u3067\u3059\u3051\u3069\u3001Def\u306e\u5f15\u6570\u306bC\u306e\u578b\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u6587\u5b57\u5217\u5316\u3057\u3066\u5c55\u958b\u3057\u3061\u3083\u3046\u3002\n\u3061\u3087\u308d\u3044\u3001\u3068\u601d\u3063\u3066\u30c6\u30b9\u30c8\u3057\u3066\u307f\u305f\u3089\u3001float\u3068double\u304c\u601d\u3063\u305f\u3068\u304a\u308a\u306b\u52d5\u304b\u306a\u3044\u3002\u3002\n\u306a\u305c\u3060\u3001\u3068\u304a\u3082\u3063\u3066\u30c7\u30a3\u30b9\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u3053\u3053\u304c\u8150\u3063\u3066\u3044\u305f\u3002\n\n```C:template.h\n#ifndef Def\n#define Def(T) \\\n  T EndianScalar##T(T t) {\\\n  if (sizeof(T) == 1) { \\\n    return t; \\\n  } else if (sizeof(T) == 2) { \\\n    uint16_t r = __builtin_bswap16(*(uint16_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else if (sizeof(T) == 4) { \\\n    uint32_t r = __builtin_bswap32(*(uint32_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else if (sizeof(T) == 8) { \\\n    uint64_t r = __builtin_bswap64(*(uint64_t *)(&t)); \\\n    return *(T *)(&r); \\\n  } else { \\\n    assert(0); \\\n  } \\\n} \\\nT ReadScalar_##T(const void *p) { \\\n  return EndianScalar##T(*(const T *)(p)); \\\n} \\\nvoid WriteScalar_##T(void *p, T t) { \\\n  *(T *)(p) = EndianScalar##T(t); \\\n}\n\n```\n\n\u305f\u3060\u3057\u304f\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\u8003\u3048\u306a\u3057\u306bC++\u306eauto\u3092\u30de\u30af\u30edT\u3067\u7f6e\u304d\u63db\u3048\u3061\u3083\u3063\u3066\u305f\u306e\u304c\u60aa\u304b\u3063\u305f\u3067\u3059\u3002\nC\u30de\u30af\u30ed\u3067\u4f3c\u975etemplate\u3059\u308b\u5834\u5408\u3001struct\u3084method\u306e\u672b\u5c3e\u306b\u578b\u540d\u3064\u3051\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u540d\u79f0\u306f\u975e\u5e38\u306b\u91cd\u8981\u3067\u3059\u3002\n\n# \u6ce8\u610f\u70b9\n\n(1) C\u30de\u30af\u30ed\u306b\u3088\u308b\u4f3c\u975etemplate\u3092\u591a\u7528\u3059\u308b\u306e\u306f\u3084\u3081\u3088\u3046\u3002\n(2) \u601d\u3063\u305f\u3068\u304a\u308a\u306b\u5c55\u958b\u3057\u3066\u308b\u3051\u3069\u52d5\u304b\u306a\u3044\u306a\u30fc\u3068\u601d\u3063\u305f\u3089\u30c7\u30a3\u30b9\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u3066\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n(3) \u30de\u30af\u30ed\u3092\u4f7f\u3063\u305f\u5c0f\u624b\u5148\u306e\u5171\u901a\u5316\u3084\u62bd\u8c61\u5316\u3088\u308a\u3001C++\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u307b\u3046\u304c\u826f\u3044\u5834\u5408\u304c\u591a\u3044\u305f\u3081\u3001Modern\u306aC++\u306e\u4f7f\u7528\u3092\u691c\u8a0e\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u4ee5\u4e0a\n"}