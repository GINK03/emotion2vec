{"context": " More than 1 year has passed since last update.\u3042\u308b\u30b3\u30de\u30f3\u30c9 foo \u3067\u3001\u3053\u3093\u306a\u51fa\u529b\u304c\u3042\u308b\n$ ./foo\n\"EB80\"\n\"EB81\"\n\"EB82\"\n\"EB83\"\n\"EB84\"\n\"EB85\"\n\"EB87\"\n\"EB88\"\n\"EB89\"\n\"EB8A\"\n\"EB8B\"\n\"EB8D\"\n\nUnicode\u306e\u7f85\u5217\u306a\u308f\u3051\u3060\u3051\u3069\u3001\u3053\u308c\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3002\n\u666e\u901a\u306b\u3001Unix\u306e\u30b3\u30de\u30f3\u30c9\u3067\u9811\u5f35\u3063\u3066\u307f\u308b\u3068\n$ ./foo | tr -d '\"' | (echo ibase=16; cat) | bc | awk 'last+1 == $0{last=$0; print \"...\"; next} {print last; last=$0; print $0} END {print last}' | uniq\n\n60288\n...\n60293\n60295\n...\n60299\n60301\n\n\u306a\u3093\u3068\u304b\u3053\u3053\u307e\u3067\u6765\u305f\u304c\u3001\u3053\u306e10\u9032\u6570\u309216\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u304c\u3044\u307e\u3044\u3061\u3067\u3042\u308b\u3002bc\u3067\u3084\u3063\u3066\u307f\u308b\u3068\u3001\"...\"\u306e\u51fa\u529b\u306e\u305b\u3044\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b(\u307e\u3042\u3001\u76ee\u7684\u306f\u9054\u6210\u3057\u3066\u3044\u308b)\n$ ./foo   | tr -d '\"' | (echo ibase=16; cat) | bc | awk 'last+1 == $0{last=$0; print \"...\"; next} {print last; last=$0; print $0} END {print last}\n' | uniq | (echo ibase=10; echo obase=16; cat) | bc\n\nEB80\n(standard_in) 5: syntax error\nEB85\nEB87\n(standard_in) 8: syntax error\nEB8B\nEB8D\n\nruby \u3067\u9811\u5f35\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\u307e\u305a\u306f\u3001\u9023\u7d9a\u5024\u3092\u3046\u307e\u304f\u6271\u3046\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u65b9\u304c\u3044\u308d\u3044\u308d\u3068\u3046\u308c\u3057\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u3002\n(\u7d50\u69cb\u3001\u5927\u304d\u304f\u306a\u3063\u305f\u306e\u3067\u4fdd\u5b58\u306e\u305f\u3081\u306b\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u305f)\n\ndiscrete_range.rb\n#!/usr/bin/env ruby\n\nclass DiscreteRange\n  include Enumerable\n\n  def initialize(*arg)\n    @ranges = []\n    arg.each {|v| add v}\n  end\n\n  def add(v)\n    entry = @ranges[-1]\n    case entry\n    when Range\n      if !entry.exclude_end? && entry.last.succ == v\n        @ranges[-1] = Range.new(entry.first, v)\n      elsif entry.exclude_end? && entry.last == v\n        @ranges[-1] = Range.new(entry.first, v)\n      else\n        @ranges.push v\n      end\n    else\n      if entry.respond_to?(:succ) && entry.succ == v\n        @ranges[-1] = Range.new(entry, v)\n      else\n        @ranges.push v\n      end\n    end\n  end\n\n  def each\n    @ranges.each {|e|\n      case e\n      when Range\n        e.each {|v|\n          yield v\n        }\n      else\n        yield e\n      end\n    }\n  end\n\n  def to_s\n    @ranges.to_s\n  end\nend\n\nif $0 == __FILE__\n  dr = DiscreteRange.new(1,2,3,5)\n  p dr      # => #<DiscreteRange:0x0000060042f5f8 @ranges=[1..3, 5]>\n  p dr.to_a # => [1, 2, 3, 5]\n  dr.add 6\n  p dr      # => #<DiscreteRange:0x0000060042f238 @ranges=[1..3, 5..6]>\nend\n\n\n./foo | tr -d '\"' | ruby -r./discrete_range.rb -e 'args = ARGF.readlines.map(&:chomp)' -e 'dr = DiscreteRange.new(*args)' -e 'puts dr'\n[\"EB80\"..\"EB85\", \"EB87\"..\"EB89\", \"EB8A\"..\"EB8B\", \"EB8D\"]\n\n\u305f\u307e\u305f\u307e\u3044\u3044\u30b5\u30f3\u30d7\u30eb\u3092\u9078\u3093\u3060\u304c\u3001EB89, EB8A \u306f16\u9032\u6570\u3067\u9023\u7d9a\u3057\u3066\u3044\u308b\u306e\u306b\u305d\u3046\u898b\u306a\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u3084\u3063\u3071\u308a10\u9032\u6570\u21d416\u9032\u6570\u3092\u76f8\u4e92\u5909\u63db\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306f\u6b32\u3057\u3044\u3002\n\u3068\u308a\u3042\u3048\u305aruby\u3067\u4ee3\u7528\u3059\u308b\n$ ./foo | tr -d '\"' | ruby -ne 'puts $_.hex' | ruby -r./discrete_range.rb -e 'args = ARGF.readlines.map(&:chomp)' -e 'dr = DiscreteRange.new(*args)' -e 'puts dr' | ruby -pe '$_.gsub!(/\\d+/) { $&.to_i.to_s(16).upcase }'\n[\"EB80\"..\"EB85\", \"EB87\"..\"EB8B\", \"EB8D\"]\n\n\u3082\u3061\u308d\u3093\u30d1\u30a4\u30d7\u3092\u4f7f\u308f\u305a\u306b\u5168\u90e8\u4e00\u3064\u306eruby\u3067\u3084\u3063\u3066\u3082\u3044\u3044\u304c\u3001Unix\u7684\u54f2\u5b66\u306b\u53cd\u3059\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u5f79\u5272\u5206\u62c5\u306e\u610f\u5473\u3067\u30b3\u30de\u30f3\u30c9\u3092\u5206\u3051\u3066\u3044\u308b\u3002\n\u4e00\u5fdc\u3001ruby\u3067\u3084\u3063\u3066\u307f\u305f\u304c\u3084\u306f\u308a\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067\u306f\u9069\u6750\u9069\u6240\u304c\u3042\u308b\u3068\u601d\u3046\u3002\n$ ./foo | ruby -r./discrete_range.rb -e 'args = ARGF.readlines.map {|v| v.delete(\"\\\"\")}.map(&:hex)' -e 'dr = DiscreteRange.new(*args)' -e 'puts dr.to_s.gsub(/\\d+/) { $&.to_i.to_s(16).upcase }'\n[EB80..EB85, EB87..EB8B, EB8D]\n\n\u3042\u308b\u30b3\u30de\u30f3\u30c9 foo \u3067\u3001\u3053\u3093\u306a\u51fa\u529b\u304c\u3042\u308b\n\n```bash\n$ ./foo\n\"EB80\"\n\"EB81\"\n\"EB82\"\n\"EB83\"\n\"EB84\"\n\"EB85\"\n\"EB87\"\n\"EB88\"\n\"EB89\"\n\"EB8A\"\n\"EB8B\"\n\"EB8D\"\n```\n\nUnicode\u306e\u7f85\u5217\u306a\u308f\u3051\u3060\u3051\u3069\u3001\u3053\u308c\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3002\n\u666e\u901a\u306b\u3001Unix\u306e\u30b3\u30de\u30f3\u30c9\u3067\u9811\u5f35\u3063\u3066\u307f\u308b\u3068\n\n```bash\n$ ./foo | tr -d '\"' | (echo ibase=16; cat) | bc | awk 'last+1 == $0{last=$0; print \"...\"; next} {print last; last=$0; print $0} END {print last}' | uniq\n\n60288\n...\n60293\n60295\n...\n60299\n60301\n```\n\n\u306a\u3093\u3068\u304b\u3053\u3053\u307e\u3067\u6765\u305f\u304c\u3001\u3053\u306e10\u9032\u6570\u309216\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u304c\u3044\u307e\u3044\u3061\u3067\u3042\u308b\u3002bc\u3067\u3084\u3063\u3066\u307f\u308b\u3068\u3001\"...\"\u306e\u51fa\u529b\u306e\u305b\u3044\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b(\u307e\u3042\u3001\u76ee\u7684\u306f\u9054\u6210\u3057\u3066\u3044\u308b)\n\n```bash\n$ ./foo   | tr -d '\"' | (echo ibase=16; cat) | bc | awk 'last+1 == $0{last=$0; print \"...\"; next} {print last; last=$0; print $0} END {print last}\n' | uniq | (echo ibase=10; echo obase=16; cat) | bc\n\nEB80\n(standard_in) 5: syntax error\nEB85\nEB87\n(standard_in) 8: syntax error\nEB8B\nEB8D\n```\n\nruby \u3067\u9811\u5f35\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n\u307e\u305a\u306f\u3001\u9023\u7d9a\u5024\u3092\u3046\u307e\u304f\u6271\u3046\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u65b9\u304c\u3044\u308d\u3044\u308d\u3068\u3046\u308c\u3057\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u3002\n(\u7d50\u69cb\u3001\u5927\u304d\u304f\u306a\u3063\u305f\u306e\u3067\u4fdd\u5b58\u306e\u305f\u3081\u306b\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u305f)\n\n```ruby:discrete_range.rb \n#!/usr/bin/env ruby\n\nclass DiscreteRange\n  include Enumerable\n\n  def initialize(*arg)\n    @ranges = []\n    arg.each {|v| add v}\n  end\n\n  def add(v)\n    entry = @ranges[-1]\n    case entry\n    when Range\n      if !entry.exclude_end? && entry.last.succ == v\n        @ranges[-1] = Range.new(entry.first, v)\n      elsif entry.exclude_end? && entry.last == v\n        @ranges[-1] = Range.new(entry.first, v)\n      else\n        @ranges.push v\n      end\n    else\n      if entry.respond_to?(:succ) && entry.succ == v\n        @ranges[-1] = Range.new(entry, v)\n      else\n        @ranges.push v\n      end\n    end\n  end\n\n  def each\n    @ranges.each {|e|\n      case e\n      when Range\n        e.each {|v|\n          yield v\n        }\n      else\n        yield e\n      end\n    }\n  end\n\n  def to_s\n    @ranges.to_s\n  end\nend\n\nif $0 == __FILE__\n  dr = DiscreteRange.new(1,2,3,5)\n  p dr      # => #<DiscreteRange:0x0000060042f5f8 @ranges=[1..3, 5]>\n  p dr.to_a # => [1, 2, 3, 5]\n  dr.add 6\n  p dr      # => #<DiscreteRange:0x0000060042f238 @ranges=[1..3, 5..6]>\nend\n```\n\n```bash\n./foo | tr -d '\"' | ruby -r./discrete_range.rb -e 'args = ARGF.readlines.map(&:chomp)' -e 'dr = DiscreteRange.new(*args)' -e 'puts dr'\n[\"EB80\"..\"EB85\", \"EB87\"..\"EB89\", \"EB8A\"..\"EB8B\", \"EB8D\"]\n```\n\n\u305f\u307e\u305f\u307e\u3044\u3044\u30b5\u30f3\u30d7\u30eb\u3092\u9078\u3093\u3060\u304c\u3001EB89, EB8A \u306f16\u9032\u6570\u3067\u9023\u7d9a\u3057\u3066\u3044\u308b\u306e\u306b\u305d\u3046\u898b\u306a\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u3084\u3063\u3071\u308a10\u9032\u6570\u21d416\u9032\u6570\u3092\u76f8\u4e92\u5909\u63db\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306f\u6b32\u3057\u3044\u3002\n\n\u3068\u308a\u3042\u3048\u305aruby\u3067\u4ee3\u7528\u3059\u308b\n\n```bash\n$ ./foo | tr -d '\"' | ruby -ne 'puts $_.hex' | ruby -r./discrete_range.rb -e 'args = ARGF.readlines.map(&:chomp)' -e 'dr = DiscreteRange.new(*args)' -e 'puts dr' | ruby -pe '$_.gsub!(/\\d+/) { $&.to_i.to_s(16).upcase }'\n[\"EB80\"..\"EB85\", \"EB87\"..\"EB8B\", \"EB8D\"]\n```\n\n\u3082\u3061\u308d\u3093\u30d1\u30a4\u30d7\u3092\u4f7f\u308f\u305a\u306b\u5168\u90e8\u4e00\u3064\u306eruby\u3067\u3084\u3063\u3066\u3082\u3044\u3044\u304c\u3001Unix\u7684\u54f2\u5b66\u306b\u53cd\u3059\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u5f79\u5272\u5206\u62c5\u306e\u610f\u5473\u3067\u30b3\u30de\u30f3\u30c9\u3092\u5206\u3051\u3066\u3044\u308b\u3002\n\n\u4e00\u5fdc\u3001ruby\u3067\u3084\u3063\u3066\u307f\u305f\u304c\u3084\u306f\u308a\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067\u306f\u9069\u6750\u9069\u6240\u304c\u3042\u308b\u3068\u601d\u3046\u3002\n\n```bash\n$ ./foo | ruby -r./discrete_range.rb -e 'args = ARGF.readlines.map {|v| v.delete(\"\\\"\")}.map(&:hex)' -e 'dr = DiscreteRange.new(*args)' -e 'puts dr.to_s.gsub(/\\d+/) { $&.to_i.to_s(16).upcase }'\n[EB80..EB85, EB87..EB8B, EB8D]\n```\n", "tags": ["Ruby", "\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc", "shell", "awk", "Perl"]}