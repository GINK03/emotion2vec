{"tags": ["flow", "flowtype", "redux", "redux-thunk", "JavaScript"], "context": "redux\u3068flowtype\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30b5\u30f3\u30d7\u30eb\u306fredux\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308b\u304c\u3001redux-thunk\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u4f8b\u306f\u306a\u3044\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001redux\u3068flowtype\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u305f\u3042\u3068\u3001redux-thunk\u3067\u578b\u306e\u6069\u6075\u3092\u53d7\u3051\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3059\u308b\u3002\n\nredux\u516c\u5f0f\u306eflowtype\u30b5\u30f3\u30d7\u30eb\nredux/examples/todos-flow at bc3f2aeb669f4ad5e424f6a711fd588e9bd3462e \u00b7 reactjs/redux\ntypes\u4ee5\u4e0b\u306f\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n// @flow\nimport type { Store as ReduxStore, Dispatch as ReduxDispatch } from 'redux'\n\nexport type Id = number;\n\nexport type Text = string;\n\nexport type Todo = {\n  id: Id,\n  text: Text,\n  completed: boolean\n};\n\nexport type VisibilityFilter =\n    'SHOW_ALL'\n  | 'SHOW_ACTIVE'\n  | 'SHOW_COMPLETED'\n  ;\n\nexport type Todos = Array<Todo>;\n\nexport type State = {\n  todos: Todos,\n  visibilityFilter: VisibilityFilter\n};\n\nexport type Action =\n    { type: 'ADD_TODO', id: Id, text: Text }\n  | { type: 'TOGGLE_TODO', id: Id }\n  | { type: 'SET_VISIBILITY_FILTER', filter: VisibilityFilter }\n  ;\n\nexport type Store = ReduxStore<State, Action>;\n\nexport type Dispatch = ReduxDispatch<Action>;\n\nredux\u306estore\u3068dispatch\u306e\u5b9a\u7fa9\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u3067\u578b\u5b9a\u7fa9\u306e\u6069\u6075\u3092\u5f97\u3089\u308c\u308b\u3002\naction\u3084reducer\u3067\u306e\u4f7f\u3044\u65b9\u306f\u30b5\u30f3\u30d7\u30eb\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u3092\u898b\u3066\u307b\u3057\u3044\u3002\n\u3053\u3053\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u578b\u5b9a\u7fa9\u306fflow-typed\u3068\u540c\u7b49\u3067\u3042\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u578b\u5b9a\u7fa9\u3067\u3042\u308b\u3002\nflow-typed/react-redux_v4.x.x.js at c4bbd91cfc455a5e061baf9e36a0e0a631eeb4b6 \u00b7 flowtype/flow-typed\ndeclare module 'redux' {\n\n  /*\n    S = State\n    A = Action\n  */\n\n  declare type Dispatch<A: { type: $Subtype<string> }> = (action: A) => A;\n\n  declare type MiddlewareAPI<S, A> = {\n    dispatch: Dispatch<A>;\n    getState(): S;\n  };\n\n  declare type Store<S, A> = {\n    // rewrite MiddlewareAPI members in order to get nicer error messages (intersections produce long messages)\n    dispatch: Dispatch<A>;\n    getState(): S;\n    subscribe(listener: () => void): () => void;\n    replaceReducer(nextReducer: Reducer<S, A>): void\n  };\n\n  declare type Reducer<S, A> = (state: S, action: A) => S;\n\n  declare type Middleware<S, A> =\n    (api: MiddlewareAPI<S, A>) =>\n      (next: Dispatch<A>) => Dispatch<A>;\n\n  declare type StoreCreator<S, A> = {\n    (reducer: Reducer<S, A>, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n    (reducer: Reducer<S, A>, preloadedState: S, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n  };\n\n  declare type StoreEnhancer<S, A> = (next: StoreCreator<S, A>) => StoreCreator<S, A>;\n\n  declare function createStore<S, A>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n  declare function createStore<S, A>(reducer: Reducer<S, A>, preloadedState: S, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n\n  declare function applyMiddleware<S, A>(...middlewares: Array<Middleware<S, A>>): StoreEnhancer<S, A>;\n\n  declare type ActionCreator<A, B> = (...args: Array<B>) => A;\n  declare type ActionCreators<K, A> = { [key: K]: ActionCreator<A, any> };\n\n  declare function bindActionCreators<A, C: ActionCreator<A, any>>(actionCreator: C, dispatch: Dispatch<A>): C;\n  declare function bindActionCreators<A, K, C: ActionCreators<K, A>>(actionCreators: C, dispatch: Dispatch<A>): C;\n\n  declare function combineReducers<O: Object, A>(reducers: O): Reducer<$ObjMap<O, <S>(r: Reducer<S, any>) => S>, A>;\n\n  declare function compose<S, A>(...fns: Array<StoreEnhancer<S, A>>): Function;\n\n}\n\n\n\u3057\u304b\u3057\u3001redux-thunk\u3092\u5c0e\u5165\u3059\u308b\u3068\u6574\u5408\u6027\u304c\u53d6\u308c\u306a\u304f\u306a\u308b\u3002\n\u898b\u3066\u308f\u304b\u308b\u3068\u601d\u3046\u304c\u3001Dispatch\u304cAction\u3057\u304b\u53d6\u3089\u306a\u3044\u304b\u3089\u3060\u3002\n\nredux-thunk\u4f7f\u7528\u6642\u306e\u578b\u5b9a\u7fa9\nredux-thunk\u3068flowtype\u74b0\u5883\u3067\u4f7f\u3046\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u578b\u5b9a\u7fa9\u3092\u4f7f\u3046\u3068\u3044\u3044\u3002\ndeclare module 'redux' {\n\n  /*\n    S = State\n    A = Action\n  */\n\n  declare type ThunkAction<S, R> = (dispatch: Dispatch<S, any>, getState: () => S) => R;\n  declare type ThunkDispatch<S> = <R>(action: ThunkAction<S, R>) => R;\n  declare type PlainDispatch<A: {type: $Subtype<string>}> = (action: A) => A;\n  declare type Dispatch<S, A> = PlainDispatch<A> & ThunkDispatch<S>\n\n  declare type MiddlewareAPI<S, A> = {\n    dispatch: Dispatch<S, A>;\n    getState(): S;\n  };\n\n  declare type Store<S, A> = {\n    // rewrite MiddlewareAPI members in order to get nicer error messages (intersections produce long messages)\n    dispatch: Dispatch<S, A>;\n    getState(): S;\n    subscribe(listener: () => void): () => void;\n    replaceReducer(nextReducer: Reducer<S, A>): void\n  };\n\n  declare type Reducer<S, A> = (state: S, action: A) => S;\n\n  declare type Middleware<S, A> =\n    (api: MiddlewareAPI<S, A>) =>\n      (next: Dispatch<S, A>) => Dispatch<S, A>;\n\n  declare type StoreCreator<S, A> = {\n    (reducer: Reducer<S, A>, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n    (reducer: Reducer<S, A>, preloadedState: S, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n  };\n\n  declare type StoreEnhancer<S, A> = (next: StoreCreator<S, A>) => StoreCreator<S, A>;\n\n  declare function createStore<S, A>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n  declare function createStore<S, A>(reducer: Reducer<S, A>, preloadedState: S, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n\n  declare function applyMiddleware<S, A>(...middlewares: Array<Middleware<S, A>>): StoreEnhancer<S, A>;\n\n  declare type ActionCreator<A, B> = (...args: Array<B>) => A;\n  declare type ActionCreators<K, A> = { [key: K]: ActionCreator<A, any> };\n\n  declare function bindActionCreators<S, A, C: ActionCreator<A, any>>(actionCreator: C, dispatch: Dispatch<S, A>): C;\n  declare function bindActionCreators<S, A, K, C: ActionCreators<K, A>>(actionCreators: C, dispatch: Dispatch<S, A>): C;\n\n  declare function combineReducers<O: Object, A>(reducers: O): Reducer<$ObjMap<O, <S>(r: Reducer<S, any>) => S>, A>;\n\n  declare function compose<S, A>(...fns: Array<StoreEnhancer<S, A>>): Function;\n\n}\n\n\u4e0a\u66f8\u304d\u306e\u4ed5\u65b9\u304c\u3061\u3087\u3063\u3068\u5909\u308f\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nimport type {Store as ReduxStore, Dispatch as ReduxDispatch} from 'redux';\n\n// \u7565\n\nexport type Dispatch = ReduxDispatch<State, Action>;\nexport type Store = ReduxStore<State, Action>;\n\n\u3053\u308c\u3067redux-thunk\u74b0\u5883\u3067\u3082flowtype\u306e\u6069\u6075\u3092\u53d7\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u53c2\u8003\nredux/examples/todos-flow at bc3f2aeb669f4ad5e424f6a711fd588e9bd3462e \u00b7 reactjs/redux\nflow-typed/react-redux_v4.x.x.js at c4bbd91cfc455a5e061baf9e36a0e0a631eeb4b6 \u00b7 flowtype/flow-typed\nThis gist shows how to add support for redux-thunk and redux-promise-middleware to the flowtype libdefs for redux\n`redux`\u3068`flowtype`\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30b5\u30f3\u30d7\u30eb\u306f`redux`\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308b\u304c\u3001`redux-thunk`\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u4f8b\u306f\u306a\u3044\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001`redux`\u3068`flowtype`\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u305f\u3042\u3068\u3001`redux-thunk`\u3067\u578b\u306e\u6069\u6075\u3092\u53d7\u3051\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3059\u308b\u3002\n\n\n## redux\u516c\u5f0f\u306eflowtype\u30b5\u30f3\u30d7\u30eb\n[redux/examples/todos-flow at bc3f2aeb669f4ad5e424f6a711fd588e9bd3462e \u00b7 reactjs/redux](https://github.com/reactjs/redux/tree/bc3f2aeb669f4ad5e424f6a711fd588e9bd3462e/examples/todos-flow)\n\n`types`\u4ee5\u4e0b\u306f\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n\n```js\n// @flow\nimport type { Store as ReduxStore, Dispatch as ReduxDispatch } from 'redux'\n\nexport type Id = number;\n\nexport type Text = string;\n\nexport type Todo = {\n  id: Id,\n  text: Text,\n  completed: boolean\n};\n\nexport type VisibilityFilter =\n    'SHOW_ALL'\n  | 'SHOW_ACTIVE'\n  | 'SHOW_COMPLETED'\n  ;\n\nexport type Todos = Array<Todo>;\n\nexport type State = {\n  todos: Todos,\n  visibilityFilter: VisibilityFilter\n};\n\nexport type Action =\n    { type: 'ADD_TODO', id: Id, text: Text }\n  | { type: 'TOGGLE_TODO', id: Id }\n  | { type: 'SET_VISIBILITY_FILTER', filter: VisibilityFilter }\n  ;\n\nexport type Store = ReduxStore<State, Action>;\n\nexport type Dispatch = ReduxDispatch<Action>;\n```\n\nredux\u306e`store`\u3068`dispatch`\u306e\u5b9a\u7fa9\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u3067\u578b\u5b9a\u7fa9\u306e\u6069\u6075\u3092\u5f97\u3089\u308c\u308b\u3002\naction\u3084reducer\u3067\u306e\u4f7f\u3044\u65b9\u306f\u30b5\u30f3\u30d7\u30eb\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u3092\u898b\u3066\u307b\u3057\u3044\u3002\n\n\u3053\u3053\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u578b\u5b9a\u7fa9\u306fflow-typed\u3068\u540c\u7b49\u3067\u3042\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u578b\u5b9a\u7fa9\u3067\u3042\u308b\u3002\n\n[flow-typed/react-redux_v4.x.x.js at c4bbd91cfc455a5e061baf9e36a0e0a631eeb4b6 \u00b7 flowtype/flow-typed](https://github.com/flowtype/flow-typed/blob/c4bbd91cfc455a5e061baf9e36a0e0a631eeb4b6/definitions/npm/react-redux_v4.x.x/flow_v0.30.x-/react-redux_v4.x.x.js)\n\n```js\ndeclare module 'redux' {\n\n  /*\n    S = State\n    A = Action\n  */\n\n  declare type Dispatch<A: { type: $Subtype<string> }> = (action: A) => A;\n\n  declare type MiddlewareAPI<S, A> = {\n    dispatch: Dispatch<A>;\n    getState(): S;\n  };\n\n  declare type Store<S, A> = {\n    // rewrite MiddlewareAPI members in order to get nicer error messages (intersections produce long messages)\n    dispatch: Dispatch<A>;\n    getState(): S;\n    subscribe(listener: () => void): () => void;\n    replaceReducer(nextReducer: Reducer<S, A>): void\n  };\n\n  declare type Reducer<S, A> = (state: S, action: A) => S;\n\n  declare type Middleware<S, A> =\n    (api: MiddlewareAPI<S, A>) =>\n      (next: Dispatch<A>) => Dispatch<A>;\n\n  declare type StoreCreator<S, A> = {\n    (reducer: Reducer<S, A>, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n    (reducer: Reducer<S, A>, preloadedState: S, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n  };\n\n  declare type StoreEnhancer<S, A> = (next: StoreCreator<S, A>) => StoreCreator<S, A>;\n\n  declare function createStore<S, A>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n  declare function createStore<S, A>(reducer: Reducer<S, A>, preloadedState: S, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n\n  declare function applyMiddleware<S, A>(...middlewares: Array<Middleware<S, A>>): StoreEnhancer<S, A>;\n\n  declare type ActionCreator<A, B> = (...args: Array<B>) => A;\n  declare type ActionCreators<K, A> = { [key: K]: ActionCreator<A, any> };\n\n  declare function bindActionCreators<A, C: ActionCreator<A, any>>(actionCreator: C, dispatch: Dispatch<A>): C;\n  declare function bindActionCreators<A, K, C: ActionCreators<K, A>>(actionCreators: C, dispatch: Dispatch<A>): C;\n\n  declare function combineReducers<O: Object, A>(reducers: O): Reducer<$ObjMap<O, <S>(r: Reducer<S, any>) => S>, A>;\n\n  declare function compose<S, A>(...fns: Array<StoreEnhancer<S, A>>): Function;\n\n}\n\n```\n\n\u3057\u304b\u3057\u3001redux-thunk\u3092\u5c0e\u5165\u3059\u308b\u3068\u6574\u5408\u6027\u304c\u53d6\u308c\u306a\u304f\u306a\u308b\u3002\n\u898b\u3066\u308f\u304b\u308b\u3068\u601d\u3046\u304c\u3001Dispatch\u304cAction\u3057\u304b\u53d6\u3089\u306a\u3044\u304b\u3089\u3060\u3002\n\n\n## redux-thunk\u4f7f\u7528\u6642\u306e\u578b\u5b9a\u7fa9\nredux-thunk\u3068flowtype\u74b0\u5883\u3067\u4f7f\u3046\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u578b\u5b9a\u7fa9\u3092\u4f7f\u3046\u3068\u3044\u3044\u3002\n\n```js\ndeclare module 'redux' {\n\n  /*\n    S = State\n    A = Action\n  */\n\n  declare type ThunkAction<S, R> = (dispatch: Dispatch<S, any>, getState: () => S) => R;\n  declare type ThunkDispatch<S> = <R>(action: ThunkAction<S, R>) => R;\n  declare type PlainDispatch<A: {type: $Subtype<string>}> = (action: A) => A;\n  declare type Dispatch<S, A> = PlainDispatch<A> & ThunkDispatch<S>\n\n  declare type MiddlewareAPI<S, A> = {\n    dispatch: Dispatch<S, A>;\n    getState(): S;\n  };\n\n  declare type Store<S, A> = {\n    // rewrite MiddlewareAPI members in order to get nicer error messages (intersections produce long messages)\n    dispatch: Dispatch<S, A>;\n    getState(): S;\n    subscribe(listener: () => void): () => void;\n    replaceReducer(nextReducer: Reducer<S, A>): void\n  };\n\n  declare type Reducer<S, A> = (state: S, action: A) => S;\n\n  declare type Middleware<S, A> =\n    (api: MiddlewareAPI<S, A>) =>\n      (next: Dispatch<S, A>) => Dispatch<S, A>;\n\n  declare type StoreCreator<S, A> = {\n    (reducer: Reducer<S, A>, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n    (reducer: Reducer<S, A>, preloadedState: S, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n  };\n\n  declare type StoreEnhancer<S, A> = (next: StoreCreator<S, A>) => StoreCreator<S, A>;\n\n  declare function createStore<S, A>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n  declare function createStore<S, A>(reducer: Reducer<S, A>, preloadedState: S, enhancer?: StoreEnhancer<S, A>): Store<S, A>;\n\n  declare function applyMiddleware<S, A>(...middlewares: Array<Middleware<S, A>>): StoreEnhancer<S, A>;\n\n  declare type ActionCreator<A, B> = (...args: Array<B>) => A;\n  declare type ActionCreators<K, A> = { [key: K]: ActionCreator<A, any> };\n\n  declare function bindActionCreators<S, A, C: ActionCreator<A, any>>(actionCreator: C, dispatch: Dispatch<S, A>): C;\n  declare function bindActionCreators<S, A, K, C: ActionCreators<K, A>>(actionCreators: C, dispatch: Dispatch<S, A>): C;\n\n  declare function combineReducers<O: Object, A>(reducers: O): Reducer<$ObjMap<O, <S>(r: Reducer<S, any>) => S>, A>;\n\n  declare function compose<S, A>(...fns: Array<StoreEnhancer<S, A>>): Function;\n\n}\n```\n\n\u4e0a\u66f8\u304d\u306e\u4ed5\u65b9\u304c\u3061\u3087\u3063\u3068\u5909\u308f\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```js\nimport type {Store as ReduxStore, Dispatch as ReduxDispatch} from 'redux';\n\n// \u7565\n\nexport type Dispatch = ReduxDispatch<State, Action>;\nexport type Store = ReduxStore<State, Action>;\n```\n\n\u3053\u308c\u3067`redux-thunk`\u74b0\u5883\u3067\u3082flowtype\u306e\u6069\u6075\u3092\u53d7\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n## \u53c2\u8003\n\n[redux/examples/todos-flow at bc3f2aeb669f4ad5e424f6a711fd588e9bd3462e \u00b7 reactjs/redux](https://github.com/reactjs/redux/tree/bc3f2aeb669f4ad5e424f6a711fd588e9bd3462e/examples/todos-flow)\n[flow-typed/react-redux_v4.x.x.js at c4bbd91cfc455a5e061baf9e36a0e0a631eeb4b6 \u00b7 flowtype/flow-typed](https://github.com/flowtype/flow-typed/blob/c4bbd91cfc455a5e061baf9e36a0e0a631eeb4b6/definitions/npm/react-redux_v4.x.x/flow_v0.30.x-/react-redux_v4.x.x.js)\n[This gist shows how to add support for redux-thunk and redux-promise-middleware to the flowtype libdefs for redux](https://gist.github.com/pcardune/db6b4494a0c37e0c2ed5677d53dbd17d)\n"}