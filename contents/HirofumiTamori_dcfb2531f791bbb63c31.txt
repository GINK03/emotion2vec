{"tags": ["Elixir", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"], "context": " More than 1 year has passed since last update.Micha\u0142 Muska\u0142a\u3055\u3093\u306e2015\u5e748\u670810\u65e5\u4ed8\u306e\u30d6\u30ed\u30b0\u8a18\u4e8bFunctional FizzBuzz in Elixir\u306e\u7ffb\u8a33\u3067\u3059\u3002\n\u6587\u4e2d\u306b\u3082\u3042\u308a\u307e\u3059\u304c\u3001Erlang\u3067\u3061\u3087\u3063\u3068\u5909\u308f\u3063\u305fFizzBuzz\u306e\u66f8\u304d\u65b9\u3092\u3057\u305f\u4eba\u304c\u3044\u3066\u305d\u308c\u3092Elixir\u306b\u79fb\u690d\u3057\u305f\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\u9762\u767d\u304b\u3063\u305f\u3093\u3067\u7ffb\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u666e\u901a\u306f3\u307e\u305f\u306f5\u307e\u305f\u306f\u305d\u306e\u4e21\u65b9\u3067\u5272\u308a\u5207\u308c\u308b\u304b\u5270\u4f59\u6f14\u7b97\u5b50\u3067\u8abf\u3079\u3066 Fizz/Buzz/FizzBuzz \u3092\u51fa\u3057\u5206\u3051\u308b\u3093\u3067\u3001\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3068\u518d\u5e30(\u305d\u3082\u305d\u3082\u30eb\u30fc\u30d7\u304c\u306a\u3044\u304b\u3089)\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3057\u304b\u306a\u3089\u306a\u3044\u3093\u3067\u3059\u3051\u3069\u306d\u3001FizzBuzz\u3002\u95a2\u6570\u578b\u306e\u4f8b\u306a\u306e\u304b\u3088\uff01\u3068\u8a00\u308f\u308c\u308b\u3068\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\u304b(\u7b11)\n\u3042\u3068\u3001\u3053\u308c\u3001Clojure\u3067\u3082\u540c\u3058\u3088\u3046\u306b\u66f8\u3051\u305d\u3046\u3060\u306a\u3042\u2026\u3068\u601d\u3063\u305f\u3089\u305d\u306e\u901a\u308a\u3067\u66f8\u3051\u307e\u3057\u305f(\u304a\u307e\u3051\u53c2\u7167)\n\n\u524d\u56de\u306eSteven Proctor\u3055\u3093\u306eErlang Thursday - \u95a2\u6570\u578b fizzbuzz\u304b\u3089\u30a4\u30f3\u30b9\u30d1\u30a4\u30a2\u3055\u308c\u305f\u3093\u3067\u3069\u3046\u3084\u3063\u305f\u3089\u5270\u4f59\u6f14\u7b97\u5b50\u3092\u4f7f\u308f\u306a\u3044\u3067FizzBuzz\u3092Elixir\u3063\u307d\u304f\u5b9f\u88c5\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3093\u306a\u611f\u3058\u304b\u306a\uff1a\ndefmodule FizzBuzz do\n  def print(n) do\n    generate\n    |> Stream.take(n)\n    |> Stream.each(&IO.puts/1)\n    |> Stream.run\n  end\n\n  def generate do\n    fizzes = Stream.cycle([\"Fizz\", \"\", \"\"])\n    buzzes = Stream.cycle([\"Buzz\", \"\", \"\", \"\", \"\"])\n\n    Stream.zip(fizzes, buzzes)\n    |> Stream.map(&concat/1)\n    |> Stream.with_index\n    |> Stream.map(&translate/1)\n    |> Stream.drop(1)\n  end\n\n  defp concat({f, b}), do: f <> b\n\n  defp translate({\"\",   n}), do: to_string(n)\n  defp translate({str, _n}), do: str\nend\n\n\u304a\u304a\u3088\u305d\u306e\u3068\u3053\u308d\u306f\u898b\u3066\u306e\u901a\u308a\u3067\u3059\u3051\u3069\u3001\u72ec\u81ea\u6027\u3082\u3042\u308b\u306e\u3067\u305d\u3053\u3092\u8aac\u660e\u3057\u307e\u3059\u3002Erlang\u3067\u306e\u5b9f\u88c5\u306e\u554f\u984c\u70b9\u306e\u3072\u3068\u3064\u3068\u3057\u3066\u306fcycle\u306e\u3088\u3046\u306a\u9045\u5ef6\u8a55\u4fa1\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u53ca\u3073\u95a2\u6570\u304c\u306a\u3044\u3053\u3068\u3060\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u304c\u2015Elixir\u3067\u306fStream\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u306f\u554f\u984c\u306b\u306a\u308a\u307e\u305b\u3093\u3002\u4e00\u65b9\u3067Erlang\u3067\u306flists:zipwith/31\u304c\u4f7f\u3048\u308b\u306e\u3067\u9805\u76ee\u3092\u5408\u6210\u3057\u3066\u7d50\u5408\u3059\u308b\u306e\u3092\u3044\u3061\u3069\u304d\u306b\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002Elixir\u3067\u306f2\u30b9\u30c6\u30c3\u30d7\u304c\u5fc5\u8981\u3067\u3059\u2015\u307e\u305aStream.zip/2(\u307e\u305f\u306fStream.with_index/1)\u3092\u4f7f\u3044\u3001\u76f4\u5f8c\u306b\u7d50\u679c\u306e\u30bf\u30d7\u30eb\u3092\u30de\u30c3\u30d7\u3057\u3066\u5fc5\u8981\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3057\u307e\u3059\u3002\nStream.drop/2\u306e\u547c\u3073\u51fa\u3057\u306fElixir\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c0\u304b\u3089\u59cb\u307e\u308b\u306e\u306bfizzbuzz\u306e\u7d50\u679c\u306e\u6700\u521d\u306e\u9805\u76ee\u306f1\u304b\u3089\u59cb\u307e\u3063\u3066\u6b32\u3057\u3044\u305f\u3081\u306b\u5fc5\u8981\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u308b\u306b\u306f\u7b2c\uff13\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3057\u3066\u305d\u308c\u304c1\u304b\u3089\u59cb\u307e\u308b\u756a\u53f7\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3001\u305d\u308c\u3092\u5408\u6210\u3059\u308b\u306e\u3082\u624b\u3067\u3059\u306d\uff1a\ndef generate2 do\n  fizzes  = Stream.cycle([\"\", \"\", \"Fizz\"])\n  buzzes  = Stream.cycle([\"\", \"\", \"\", \"\", \"Buzz\"])\n  indexes = Stream.iterate(1, &(&1 + 1))\n\n  Stream.zip(fizzes, buzzes)\n  |> Stream.map(&concat/1)\n  |> Stream.zip(indexes)\n  |> Stream.map(&translate/1)\nend\n\n\u3069\u3063\u3061\u304c\u3088\u308a\u660e\u5feb\u3067\u7406\u89e3\u3057\u3084\u3059\u3044\u304b\u306f\u79c1\u306b\u306f\u308f\u304b\u308a\u304b\u306d\u307e\u3059\u304c\u2026\u3002\n\n\u304a\u307e\u3051\uff1aClojure\u3067\u66f8\u3044\u3066\u307f\u305f\n\u5272\u3068\u7c21\u5358\u306b\u66f8\u3051\u307e\u3057\u305f\u3002\u3068\u306f\u3044\u3048\u3057\u3070\u3089\u304fClojure\u66f8\u3044\u3066\u306a\u304b\u3063\u305f\u304b\u3089\u3082\u3063\u3068\u3044\u3044\u3084\u308a\u65b9\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u304c\u2026\n(def fizzes (cycle [\"\" \"\" \"Fizz\"]))\n(def buzzes (cycle [\"\" \"\" \"\" \"\" \"Buzz\"]))\n(def indexes (iterate inc 1))\n(defn translate [x,n]\n  (cond (= x \"\") (str n)\n        :else x\n        )\n  )\n\n(defn print-fb [n]\n  (take n (map #(translate %1 %2) (map #(str %1 %2) fizzes buzzes) indexes))\n  )\n\n\n\n\n\n\n\u4f8b\uff1alists:zipwith(fun(X,Y) -> X+Y end, [1,2,3], [4,5,6]).\u306f\u30ea\u30b9\u30c8[5,7,9]\u3092\u8fd4\u3057\u307e\u3059\u3002lists:zip([1,2,3],[4,5,6]).\u304c[{1,4},{2,5},{3,6}]\u3068\u3044\u3046\uff12\u9805\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3093\u3067\u305d\u306e\u30bf\u30d7\u30eb\u306e2\u3064\u306e\u8981\u7d20\u3092\u7b2c\uff11\u5f15\u6570\u306e\u7121\u540d\u95a2\u6570\u3067\u6f14\u7b97\u3059\u308b\u611f\u3058\u3067\u3059\u3002\u00a0\u21a9\n\n\n\nMicha\u0142 Muska\u0142a\u3055\u3093\u306e2015\u5e748\u670810\u65e5\u4ed8\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b[Functional FizzBuzz in Elixir](http://michal.muskala.eu/2015/08/10/functional-fizzbuzz-in-elixir.html)\u306e\u7ffb\u8a33\u3067\u3059\u3002\n\n\u6587\u4e2d\u306b\u3082\u3042\u308a\u307e\u3059\u304c\u3001Erlang\u3067\u3061\u3087\u3063\u3068\u5909\u308f\u3063\u305fFizzBuzz\u306e\u66f8\u304d\u65b9\u3092\u3057\u305f\u4eba\u304c\u3044\u3066\u305d\u308c\u3092Elixir\u306b\u79fb\u690d\u3057\u305f\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\u9762\u767d\u304b\u3063\u305f\u3093\u3067\u7ffb\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u666e\u901a\u306f3\u307e\u305f\u306f5\u307e\u305f\u306f\u305d\u306e\u4e21\u65b9\u3067\u5272\u308a\u5207\u308c\u308b\u304b\u5270\u4f59\u6f14\u7b97\u5b50\u3067\u8abf\u3079\u3066 Fizz/Buzz/FizzBuzz \u3092\u51fa\u3057\u5206\u3051\u308b\u3093\u3067\u3001\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3068\u518d\u5e30(\u305d\u3082\u305d\u3082\u30eb\u30fc\u30d7\u304c\u306a\u3044\u304b\u3089)\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3057\u304b\u306a\u3089\u306a\u3044\u3093\u3067\u3059\u3051\u3069\u306d\u3001FizzBuzz\u3002\u95a2\u6570\u578b\u306e\u4f8b\u306a\u306e\u304b\u3088\uff01\u3068\u8a00\u308f\u308c\u308b\u3068\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\u304b(\u7b11)\n\n\u3042\u3068\u3001\u3053\u308c\u3001Clojure\u3067\u3082\u540c\u3058\u3088\u3046\u306b\u66f8\u3051\u305d\u3046\u3060\u306a\u3042\u2026\u3068\u601d\u3063\u305f\u3089\u305d\u306e\u901a\u308a\u3067\u66f8\u3051\u307e\u3057\u305f(\u304a\u307e\u3051\u53c2\u7167)\n\n-----\n\n\u524d\u56de\u306eSteven Proctor\u3055\u3093\u306eErlang Thursday - [\u95a2\u6570\u578b fizzbuzz](http://www.proctor-it.com/erlang-thursday-bonus-functional-fizzbuzz/)\u304b\u3089\u30a4\u30f3\u30b9\u30d1\u30a4\u30a2\u3055\u308c\u305f\u3093\u3067\u3069\u3046\u3084\u3063\u305f\u3089\u5270\u4f59\u6f14\u7b97\u5b50\u3092\u4f7f\u308f\u306a\u3044\u3067FizzBuzz\u3092Elixir\u3063\u307d\u304f\u5b9f\u88c5\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3053\u3093\u306a\u611f\u3058\u304b\u306a\uff1a\n\n```ex\ndefmodule FizzBuzz do\n  def print(n) do\n    generate\n    |> Stream.take(n)\n    |> Stream.each(&IO.puts/1)\n    |> Stream.run\n  end\n\n  def generate do\n    fizzes = Stream.cycle([\"Fizz\", \"\", \"\"])\n    buzzes = Stream.cycle([\"Buzz\", \"\", \"\", \"\", \"\"])\n\n    Stream.zip(fizzes, buzzes)\n    |> Stream.map(&concat/1)\n    |> Stream.with_index\n    |> Stream.map(&translate/1)\n    |> Stream.drop(1)\n  end\n\n  defp concat({f, b}), do: f <> b\n\n  defp translate({\"\",   n}), do: to_string(n)\n  defp translate({str, _n}), do: str\nend\n```\n\n\u304a\u304a\u3088\u305d\u306e\u3068\u3053\u308d\u306f\u898b\u3066\u306e\u901a\u308a\u3067\u3059\u3051\u3069\u3001\u72ec\u81ea\u6027\u3082\u3042\u308b\u306e\u3067\u305d\u3053\u3092\u8aac\u660e\u3057\u307e\u3059\u3002Erlang\u3067\u306e\u5b9f\u88c5\u306e\u554f\u984c\u70b9\u306e\u3072\u3068\u3064\u3068\u3057\u3066\u306f`cycle`\u306e\u3088\u3046\u306a\u9045\u5ef6\u8a55\u4fa1\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u53ca\u3073\u95a2\u6570\u304c\u306a\u3044\u3053\u3068\u3060\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u304c\u2015Elixir\u3067\u306f`Stream`\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u306f\u554f\u984c\u306b\u306a\u308a\u307e\u305b\u3093\u3002\u4e00\u65b9\u3067Erlang\u3067\u306f`lists:zipwith/3`[^1]\u304c\u4f7f\u3048\u308b\u306e\u3067\u9805\u76ee\u3092\u5408\u6210\u3057\u3066\u7d50\u5408\u3059\u308b\u306e\u3092\u3044\u3061\u3069\u304d\u306b\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002Elixir\u3067\u306f2\u30b9\u30c6\u30c3\u30d7\u304c\u5fc5\u8981\u3067\u3059\u2015\u307e\u305a`Stream.zip/2`(\u307e\u305f\u306f`Stream.with_index/1`)\u3092\u4f7f\u3044\u3001\u76f4\u5f8c\u306b\u7d50\u679c\u306e\u30bf\u30d7\u30eb\u3092\u30de\u30c3\u30d7\u3057\u3066\u5fc5\u8981\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3057\u307e\u3059\u3002\n[^1]: \u4f8b\uff1alists:zipwith(fun(X,Y) -> X+Y end, [1,2,3], [4,5,6]).\u306f\u30ea\u30b9\u30c8[5,7,9]\u3092\u8fd4\u3057\u307e\u3059\u3002lists:zip([1,2,3],[4,5,6]).\u304c[{1,4},{2,5},{3,6}]\u3068\u3044\u3046\uff12\u9805\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3093\u3067\u305d\u306e\u30bf\u30d7\u30eb\u306e2\u3064\u306e\u8981\u7d20\u3092\u7b2c\uff11\u5f15\u6570\u306e\u7121\u540d\u95a2\u6570\u3067\u6f14\u7b97\u3059\u308b\u611f\u3058\u3067\u3059\u3002\n\n`Stream.drop/2`\u306e\u547c\u3073\u51fa\u3057\u306fElixir\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c`0`\u304b\u3089\u59cb\u307e\u308b\u306e\u306b*fizzbuzz*\u306e\u7d50\u679c\u306e\u6700\u521d\u306e\u9805\u76ee\u306f`1`\u304b\u3089\u59cb\u307e\u3063\u3066\u6b32\u3057\u3044\u305f\u3081\u306b\u5fc5\u8981\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u308b\u306b\u306f\u7b2c\uff13\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3057\u3066\u305d\u308c\u304c`1`\u304b\u3089\u59cb\u307e\u308b\u756a\u53f7\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3001\u305d\u308c\u3092\u5408\u6210\u3059\u308b\u306e\u3082\u624b\u3067\u3059\u306d\uff1a\n\n```ex\ndef generate2 do\n  fizzes  = Stream.cycle([\"\", \"\", \"Fizz\"])\n  buzzes  = Stream.cycle([\"\", \"\", \"\", \"\", \"Buzz\"])\n  indexes = Stream.iterate(1, &(&1 + 1))\n\n  Stream.zip(fizzes, buzzes)\n  |> Stream.map(&concat/1)\n  |> Stream.zip(indexes)\n  |> Stream.map(&translate/1)\nend\n```\n\n\u3069\u3063\u3061\u304c\u3088\u308a\u660e\u5feb\u3067\u7406\u89e3\u3057\u3084\u3059\u3044\u304b\u306f\u79c1\u306b\u306f\u308f\u304b\u308a\u304b\u306d\u307e\u3059\u304c\u2026\u3002\n\n---\n\u304a\u307e\u3051\uff1aClojure\u3067\u66f8\u3044\u3066\u307f\u305f\n\n\u5272\u3068\u7c21\u5358\u306b\u66f8\u3051\u307e\u3057\u305f\u3002\u3068\u306f\u3044\u3048\u3057\u3070\u3089\u304fClojure\u66f8\u3044\u3066\u306a\u304b\u3063\u305f\u304b\u3089\u3082\u3063\u3068\u3044\u3044\u3084\u308a\u65b9\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u304c\u2026\n\n```clj\n(def fizzes (cycle [\"\" \"\" \"Fizz\"]))\n(def buzzes (cycle [\"\" \"\" \"\" \"\" \"Buzz\"]))\n(def indexes (iterate inc 1))\n(defn translate [x,n]\n  (cond (= x \"\") (str n)\n        :else x\n        )\n  )\n\n(defn print-fb [n]\n  (take n (map #(translate %1 %2) (map #(str %1 %2) fizzes buzzes) indexes))\n  )\n\n````\n"}