{"context": " More than 1 year has passed since last update.\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u3044\u3044\uff01\u3068\u3044\u3046\u6307\u6458\u5927\u6b53\u8fce\u3067\u3059\n\n\u30b3\u30e1\u30f3\u30c8\u3067\u6307\u6458\u306e\u3042\u3063\u305fhub\u7248\n\n\u30ea\u30f3\u30b0\u3092\u56de\u308a\u304d\u308a\u6b21\u306e\u5468\u56de\u306b\u79fb\u308b\u3068\u304d\u306e\u305f\u3081\u306b\u3001Ring\u3092\u5f15\u304d\u56de\u3057\u3066\u308b\u306e\u30ab\u30c3\u30b3\u60aa\u3044\nnode\u540c\u58eb\u304c\u76f4\u63a5\u3084\u308a\u3068\u308a\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\n\n\nnode\u540c\u58eb\u304c\u76f4\u63a5\u3084\u308a\u3068\u308a\u3057\u3066\u3044\u308bloop\u7248\n\n\u6307\u6458\u3055\u308c\u305f\u90e8\u5206(\u3082\u3068\u3044\u3001\u554f\u984c\u306e\u672c\u8cea\u90e8\u5206)\u306f\u89e3\u6c7a\u3067\u304d\u305f\u3068\u601d\u3046\nring\u306ehead\u306b\u76f8\u5f53\u3059\u308bnode\u306e\u6b21\u306enode\u3092\u6307\u5b9a\u3059\u308b\u3068\u3053\u308d\u306b\u9055\u548c\u611f\u2026\n\n\n\u305d\u306e\u4ed6\n\nbench\u90e8\u5206\u306f\u4eca\u5f8c\u3082\u4f7f\u3046\u3068\u601d\u3046\u306e\u3067module\u306b\u3057\u305f\u3044\n\u3057\u304b\u3057\u3001\u975e\u540c\u671f\u7528\u306a\u306e\u3067\u540c\u671f\u7528\u306e\u3088\u3046\u306b\u95a2\u6570\u3068\u5f15\u6570\u3092\u6e21\u3057\u3066(Erlang\u3060\u3068apply?)\u3067\u304d\u306a\u3044\n\n%%%-------------------------------------------------------------------\n%%% @author ksomemo\n%%% @copyright (C) 2014, <COMPANY>\n%%% @doc\n%%% 8\u7ae0\u306e\u7df4\u7fd2\u554f\u984c\n%%% @end\n%%% Created : 25. 6 2014 3:21\n%%%-------------------------------------------------------------------\n-module(exercise).\n-author(\"ksomemo\").\n\n%% API\n-export([\n  ring_bench_hub/2\n  , ring_bench_loop/ 2\n  , loop/3\n]).\n\nring_bench_hub(N, M) ->\n  Ring = create_ring(N),\n\n  io:format(\"ring_bench(N=~p, M=~p) start.~n\", [N, M]),\n  statistics(runtime),\n  statistics(wall_clock),\n\n  register(bench, self()),\n  message(M, Ring, Ring),\n  receive\n    finish ->\n      {_, Time1} = statistics(runtime),\n      {_, Time2} = statistics(wall_clock),\n      io:format(\"ring_bench time=~p (~p) microseconds.~n\", [Time1 * 1000, Time2 * 1000]),\n\n      unregister(bench)\n  end.\n\ncreate_ring(N) ->\n  lists:map(fun(_) -> spawn(fun() -> loop() end) end, lists:seq(1, N)).\n\nloop() ->\n  receive\n    _Any ->\n%      io:format(\"Pid is ~p, Request is ~w.~n\", [self(), _Any]),\n      loop()\n  end.\n\nmessage(0, _, _) ->\n  bench ! finish;\nmessage(M, [Pid|T], Ring) ->\n  Pid ! {M},\n  message(M, T, Ring);\nmessage(M, [], Ring) ->\n  message(M - 1, Ring, Ring).\n\n%% \u3053\u3053\u304b\u3089loop\u7248\nusage() ->\n  io:format(\"ring_bench_loop(N, M) N >= 1, M >= 1\").\nring_bench_loop(N, M) when N =< 0 orelse M =< 0 ->\n  usage();\nring_bench_loop(N, M) ->\n  Main = self(),\n  Head = create_ring_loop(Main, N),\n\n  io:format(\"ring_bench(N=~p, M=~p) start.~n\", [N, M]),\n  statistics(runtime),\n  statistics(wall_clock),\n\n  Head ! {Main, M, msg},\n  receive\n    {_from, finish} ->\n      {_, Time1} = statistics(runtime),\n      {_, Time2} = statistics(wall_clock),\n      io:format(\"ring_bench time=~p (~p) milli seconds.~n\", [Time1, Time2]),\n      Head ! {Main, kill}\n  end.\n\ncreate_ring_loop(Main, N) ->\n  IsLastNode    = N =:= 1,\n  Head          = create_ring_head(IsLastNode),\n  TailFirstNode = create_ring_tail(Main, Head, N - 1),\n\n  Head ! {Main, TailFirstNode},\n  Head.\n\ncreate_ring_head(IsLastNode) ->\n  spawn(fun() -> set_head_next(IsLastNode) end).\nset_head_next(IsLastNode) ->\n  receive\n    {Main, NextNode} ->\n      loop(Main, NextNode, IsLastNode)\n  end.\n\ncreate_ring_tail(_Main, FirstNode, _Rest) when _Rest =< 0 ->\n  FirstNode;\ncreate_ring_tail(Main, FirstNode, Rest) ->\n  IsLastNode = Rest =< 1,\n  spawn(exercise, loop, [Main, create_ring_tail(Main, FirstNode, Rest - 1), IsLastNode]).\n\nloop(Main, NextNode, IsLastNode) ->\n  receive\n    {_From, kill} ->\n      NextNode ! {self(), kill};\n    {_From, Round, Response} ->\n%%       io:format(\n%%         \"From is ~p, self() is ~p, Next is ~p, IsLastNode(~p), Round is ~p.~n\"\n%%         , [_From, self(), NextNode, IsLastNode, Round]),\n\n      IsLastMessage = Round =< 1 andalso IsLastNode,\n      FixRound = if\n        IsLastNode -> Round - 1;\n        true       -> Round\n      end,\n\n      if\n        not IsLastMessage ->\n          NextNode ! {self(), FixRound, Response},\n          loop(Main, NextNode, IsLastNode);\n        true ->\n          Main ! {self(), finish}\n      end\n  end.\n\n\n\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u3044\u3044\uff01\u3068\u3044\u3046\u6307\u6458\u5927\u6b53\u8fce\u3067\u3059\n\n## \u30b3\u30e1\u30f3\u30c8\u3067\u6307\u6458\u306e\u3042\u3063\u305fhub\u7248\n* \u30ea\u30f3\u30b0\u3092\u56de\u308a\u304d\u308a\u6b21\u306e\u5468\u56de\u306b\u79fb\u308b\u3068\u304d\u306e\u305f\u3081\u306b\u3001Ring\u3092\u5f15\u304d\u56de\u3057\u3066\u308b\u306e\u30ab\u30c3\u30b3\u60aa\u3044\n* node\u540c\u58eb\u304c\u76f4\u63a5\u3084\u308a\u3068\u308a\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\n\n## node\u540c\u58eb\u304c\u76f4\u63a5\u3084\u308a\u3068\u308a\u3057\u3066\u3044\u308bloop\u7248\n* \u6307\u6458\u3055\u308c\u305f\u90e8\u5206(\u3082\u3068\u3044\u3001\u554f\u984c\u306e\u672c\u8cea\u90e8\u5206)\u306f\u89e3\u6c7a\u3067\u304d\u305f\u3068\u601d\u3046\n* ring\u306ehead\u306b\u76f8\u5f53\u3059\u308bnode\u306e\u6b21\u306enode\u3092\u6307\u5b9a\u3059\u308b\u3068\u3053\u308d\u306b\u9055\u548c\u611f\u2026\n\n## \u305d\u306e\u4ed6\n* bench\u90e8\u5206\u306f\u4eca\u5f8c\u3082\u4f7f\u3046\u3068\u601d\u3046\u306e\u3067module\u306b\u3057\u305f\u3044\n* \u3057\u304b\u3057\u3001\u975e\u540c\u671f\u7528\u306a\u306e\u3067\u540c\u671f\u7528\u306e\u3088\u3046\u306b\u95a2\u6570\u3068\u5f15\u6570\u3092\u6e21\u3057\u3066(Erlang\u3060\u3068apply?)\u3067\u304d\u306a\u3044\n\n```erlang\n%%%-------------------------------------------------------------------\n%%% @author ksomemo\n%%% @copyright (C) 2014, <COMPANY>\n%%% @doc\n%%% 8\u7ae0\u306e\u7df4\u7fd2\u554f\u984c\n%%% @end\n%%% Created : 25. 6 2014 3:21\n%%%-------------------------------------------------------------------\n-module(exercise).\n-author(\"ksomemo\").\n\n%% API\n-export([\n  ring_bench_hub/2\n  , ring_bench_loop/ 2\n  , loop/3\n]).\n\nring_bench_hub(N, M) ->\n  Ring = create_ring(N),\n\n  io:format(\"ring_bench(N=~p, M=~p) start.~n\", [N, M]),\n  statistics(runtime),\n  statistics(wall_clock),\n\n  register(bench, self()),\n  message(M, Ring, Ring),\n  receive\n    finish ->\n      {_, Time1} = statistics(runtime),\n      {_, Time2} = statistics(wall_clock),\n      io:format(\"ring_bench time=~p (~p) microseconds.~n\", [Time1 * 1000, Time2 * 1000]),\n\n      unregister(bench)\n  end.\n\ncreate_ring(N) ->\n  lists:map(fun(_) -> spawn(fun() -> loop() end) end, lists:seq(1, N)).\n\nloop() ->\n  receive\n    _Any ->\n%      io:format(\"Pid is ~p, Request is ~w.~n\", [self(), _Any]),\n      loop()\n  end.\n\nmessage(0, _, _) ->\n  bench ! finish;\nmessage(M, [Pid|T], Ring) ->\n  Pid ! {M},\n  message(M, T, Ring);\nmessage(M, [], Ring) ->\n  message(M - 1, Ring, Ring).\n\n%% \u3053\u3053\u304b\u3089loop\u7248\nusage() ->\n  io:format(\"ring_bench_loop(N, M) N >= 1, M >= 1\").\nring_bench_loop(N, M) when N =< 0 orelse M =< 0 ->\n  usage();\nring_bench_loop(N, M) ->\n  Main = self(),\n  Head = create_ring_loop(Main, N),\n\n  io:format(\"ring_bench(N=~p, M=~p) start.~n\", [N, M]),\n  statistics(runtime),\n  statistics(wall_clock),\n\n  Head ! {Main, M, msg},\n  receive\n    {_from, finish} ->\n      {_, Time1} = statistics(runtime),\n      {_, Time2} = statistics(wall_clock),\n      io:format(\"ring_bench time=~p (~p) milli seconds.~n\", [Time1, Time2]),\n      Head ! {Main, kill}\n  end.\n\ncreate_ring_loop(Main, N) ->\n  IsLastNode    = N =:= 1,\n  Head          = create_ring_head(IsLastNode),\n  TailFirstNode = create_ring_tail(Main, Head, N - 1),\n\n  Head ! {Main, TailFirstNode},\n  Head.\n\ncreate_ring_head(IsLastNode) ->\n  spawn(fun() -> set_head_next(IsLastNode) end).\nset_head_next(IsLastNode) ->\n  receive\n    {Main, NextNode} ->\n      loop(Main, NextNode, IsLastNode)\n  end.\n\ncreate_ring_tail(_Main, FirstNode, _Rest) when _Rest =< 0 ->\n  FirstNode;\ncreate_ring_tail(Main, FirstNode, Rest) ->\n  IsLastNode = Rest =< 1,\n  spawn(exercise, loop, [Main, create_ring_tail(Main, FirstNode, Rest - 1), IsLastNode]).\n\nloop(Main, NextNode, IsLastNode) ->\n  receive\n    {_From, kill} ->\n      NextNode ! {self(), kill};\n    {_From, Round, Response} ->\n%%       io:format(\n%%         \"From is ~p, self() is ~p, Next is ~p, IsLastNode(~p), Round is ~p.~n\"\n%%         , [_From, self(), NextNode, IsLastNode, Round]),\n\n      IsLastMessage = Round =< 1 andalso IsLastNode,\n      FixRound = if\n        IsLastNode -> Round - 1;\n        true       -> Round\n      end,\n\n      if\n        not IsLastMessage ->\n          NextNode ! {self(), FixRound, Response},\n          loop(Main, NextNode, IsLastNode);\n        true ->\n          Main ! {self(), finish}\n      end\n  end.\n```\n", "tags": ["Erlang"]}