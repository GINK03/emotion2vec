{"context": " More than 1 year has passed since last update.\n\n\u4eca\u56de\u3084\u308b\u3053\u3068\n\u524d\u56de\u306f\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u3044\u308bdo_page_fault()\u306e\u524d\u534a\u90e8\u5206\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u5f15\u304d\u7d9a\u304ddo_page_fault()\u3092\u8aad\u307f\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u65e9\u304f\u3082\u8db3\u6b62\u3081\uff1f\n\u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002\n\u30b3\u30e1\u30f3\u30c8\u304b\u3089\u60f3\u50cf\u3059\u308b\u306b\u3001\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u5185\u3067\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u30b1\u30fc\u30b9\u3092\u634c\u304f\u51e6\u7406\u306e\u3088\u3046\u3067\u3059\u3002\n\narch/x86/mm/fault.c\n  /*\n   * If we're in an interrupt, have no user context or are running\n   * in an atomic region then we must not take the fault:\n   */\n  if (unlikely(in_atomic() || !mm)) {\n    bad_area_nosemaphore(regs, error_code, address);\n    return;\n  }\n\n\nin_atomic()\u306b\u3064\u3044\u3066\u306f\u3001Appendix\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002(\u3068\u3044\u3046\u3088\u308a\u3001Appendix\u304c\u30e1\u30a4\u30f3\u3060\u3063\u305f\u308a\u3082\u3057\u307e\u3059...\u3002)\n\u5358\u7d14\u306a\u3088\u3046\u3067\u306a\u304b\u306a\u304b\u9762\u767d\u3044\u5b9f\u88c5\u304c\u898b\u3048\u307e\u3059\u3002\u3053\u3046\u3044\u3046\u6a2a\u9053\u306b\u9038\u308c\u3066\u3044\u304f\u306e\u304c\u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u9762\u767d\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001bad_area_nosemaphore()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\narch/x86/mm/fault.c\nstatic noinline void \nbad_area_nosemaphore(struct pt_regs *regs, unsigned long error_code,\n         unsigned long address)\n{\n  __bad_area_nosemaphore(regs, error_code, address, SEGV_MAPERR);\n}\n\n\n\u7d9a\u304f\u95a2\u6570\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\n\narch/x86/mm/fault.c\nstatic void\n__bad_area_nosemaphore(struct pt_regs *regs, unsigned long error_code,\n           unsigned long address, int si_code)\n{\n  struct task_struct *tsk = current;\n\n  /* User mode accesses just cause a SIGSEGV */\n  if (error_code & PF_USER) {\n  /* SEGV\u3092\u6295\u3052\u308b\u51e6\u7406\u3002\u7565 */\n    return;\n  }\n\n  if (is_f00f_bug(regs, address))\n    return;\n\n  no_context(regs, error_code, address, SIGSEGV, si_code);\n}\n\n\n\nerror_code\u306f\u524d\u56de\u7d39\u4ecb\u3057\u305fdo_page_fault()\u306e\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u3066\u304f\u308b\u5024\u3067\u3059\u3002\n\u5b9f\u306f\u3001error_code\u306f\u4f8b\u5916\u767a\u751f\u6642\u306b\u30b9\u30bf\u30c3\u30af\u306b\u7a4d\u307e\u308c\u308b\u5024\u306e\u4e00\u3064\u3067\u3059\u3002\nIntel SDM Vol3.\u300c6.15 EXCEPTION AND INTERRUPT REFERENCE\u300d\u306e\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u306e\u8aac\u660e\u306e\u3068\u3053\u308d\u306b\u4ee5\u4e0b\u306e\u56f3\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\n\nerror_code\u306ebit2\u3092\u898b\u308c\u3070\u3001\u30e6\u30fc\u30b6\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u3066\u3044\u305f\u3068\u304d\u304b\u30ab\u30fc\u30cd\u30eb\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u3066\u3044\u305f\u3068\u304d\u304b\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\u203b\u300cIntel SDM Vol3 6.13 ERROR CODE\u300d\u306b\u8f09\u3063\u3066\u3044\u308berror_code\u306f\u3053\u306e\u5834\u5408\u5f53\u3066\u306f\u307e\u308a\u307e\u305b\u3093\u3002\u3054\u6ce8\u610f\u3092\u3002\n\nThe format of the error code is different for page-fault exceptions (#PF). See the \u201cInterrupt 14\u2014Page-Fault Exception (#PF)\u201d section in this chapter.\n\n\u6b21\u306b\u547c\u3070\u308c\u3066\u3044\u308b\u95a2\u6570\u540d\u306b\u542b\u307e\u308c\u308b\u300cf00f_bug\u300d\u3068\u3044\u3046\u306e\u306f\u3001Intel CPU(Pentium)\u306eerrata\u3067\u3059\u3002\u8a73\u7d30\u306fIntel\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u306e\u95a2\u6570\u306f\u4eca\u56de\u306e\u5bfe\u8c61\u5916\u3068\u3057\u307e\u3059\u304c\u3001\u8208\u5473\u306e\u3042\u308b\u65b9\u306farch/x86/mm/fault.c\u3068\u5148\u306e\u53c2\u8003\u8cc7\u6599\u306eWorkaround\u3092\u3082\u3068\u306b\u8aad\u307f\u89e3\u3044\u3066\u307f\u308b\u306e\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nno_context()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\narch/x86/mm/fault.c\nstatic noinline void\nno_context(struct pt_regs *regs, unsigned long error_code,\n     unsigned long address)\n{\n  /* Are we prepared to handle this kernel fault?  */\n  if (fixup_exception(regs))\n    return;\n\n  if (handle_trapped_io(regs, address))\n    return;\n\n  /*\n   * Oops. The kernel tried to access some bad page. We'll have to\n   * terminate things with extreme prejudice.\n   */\n  bust_spinlocks(1);\n\n  show_fault_oops(regs, address);\n\n  die(\"Oops\", regs, error_code);\n  bust_spinlocks(0);\n  do_exit(SIGKILL);\n}\n\n\nOops!\u3068\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n(fixup_exception()\u3082\u8ffd\u3063\u3066\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u7d30\u304b\u304f\u306a\u308a\u3059\u304e\u308b\u306e\u3067\u3053\u3053\u306f\u98db\u3070\u3057\u307e\u3059\u3002)\n\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u3068\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\n\u30b3\u30e1\u30f3\u30c8\u3092\u4fe1\u3058\u308b\u306a\u3089\u3001\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u5185\u3067\u306e\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u306e\u30b1\u30fc\u30b9\u306e\u51e6\u7406\u3067\u306f\u3001\u539f\u5247\u3068\u3057\u3066Oops\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u306f\u3001\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u5185\u3067\u306f\u3001\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u3092\u5f15\u304d\u8d77\u3053\u3059\u3088\u3046\u306a\u5371\u967a\u306a\u30e1\u30e2\u30ea\u7a7a\u9593\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u305f\u3081\u3067\u3059\u3002\n\u306a\u305c\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u308c\u306f\u3001\u5272\u308a\u8fbc\u307f\u5185\u3067sleep\u3059\u308b\u3053\u3068\u304c\u8a31\u3055\u308c\u306a\u3044\u305f\u3081\u3067\u3059\u3002\n\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u304c\u8d77\u304d\u3066\u3001\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u8d77\u304d\u308b\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u306f\u5927\u62b5\u306e\u5834\u5408\u3001\u4e8c\u6b21\u8a18\u61b6\u88c5\u7f6e\u3067\u3059\u3002\n\u3059\u308b\u3068\u3001I/O\u5f85\u3061\u306e\u305f\u3081\u306bsleep\u3067CPU\u306e\u5b9f\u884c\u6a29\u3092\u653e\u68c4\u3059\u308b\u53ef\u80fd\u6027\u304c\u6975\u3081\u3066\u9ad8\u3044\u306e\u3067\u3059\u3002\n\u5272\u308a\u8fbc\u307f\u306f\u3069\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u3082\u5c5e\u3055\u306a\u3044\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u52d5\u304f\u306e\u3067\u3001\u300c\u30d7\u30ed\u30bb\u30b9\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30b9\u30a4\u30c3\u30c1\u3057\u3066\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u5b9f\u884c\u72b6\u614b\u306b\u3059\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3002\n\u305d\u3082\u305d\u3082\u3001\u5272\u308a\u8fbc\u307f\u306f\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u51e6\u7406\u306b\u5272\u308a\u8fbc\u3093\u3067\u3044\u308b\u306e\u3067\u3001\u5c11\u3057\u3067\u3082\u65e9\u304f\u51e6\u7406\u3092\u5b8c\u4e86\u3055\u305b\u308b\u306e\u304c\u7b4b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u304c\u8d77\u304d\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30e1\u30e2\u30ea\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u81ea\u4f53\u304c\u3042\u307e\u308a\u3088\u308d\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\narch/x86/mm/fault.c\n  /*\n   * It's safe to allow irq's after cr2 has been saved and the\n   * vmalloc fault has been handled.\n   *\n   * User-mode registers count as a user access even for any\n   * potential system fault or CPU buglet:\n   */\n  if (user_mode_vm(regs)) {\n    local_irq_enable();\n    error_code |= PF_USER;\n    flags |= FAULT_FLAG_USER;\n  } else {\n    if (regs->flags & X86_EFLAGS_IF)\n      local_irq_enable();\n  }\n\n\nuser_mode_vm()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\narch/x86/mm/fault.c\nstatic inline int user_mode_vm(struct pt_regs *regs)\n{\n#ifdef CONFIG_X86_32\n  return ((regs->cs & SEGMENT_RPL_MASK) | (regs->flags & X86_VM_MASK)) >=\n    USER_RPL;\n#else\n  return user_mode(regs);\n#endif\n}\n\n\nRPL(Requested Privilege Level)\u3092\u898b\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002Privilege Level\u306f\u3044\u308f\u3086\u308b\u4ee5\u4e0b\u306e\u30ea\u30f3\u30b0\u3067\u8aac\u660e\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3084\u3064\u3067\u3059\u306d\u3002(Intel SDM\u3088\u308a\u629c\u7c8b)\n\nerror_code\u3067\u306a\u304f\u308f\u3056\u308f\u3056Privilege Level\u3092\u898b\u3066\u3044\u308b\u306e\u306f\u4f55\u304b\u7406\u7531\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f(\u3053\u3053\u306f\u8b0e\u306a\u306e\u3067\u3001\u7406\u7531\u306f\u3082\u3046\u5c11\u3057\u8abf\u3079\u3066\u307f\u305f\u3044\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u4eca\u306f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u5148\u306b\u9032\u307f\u307e\u3059\u3002)\n\narch/x86/mm/fault.c\n  perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, regs, address);\n\n  if (error_code & PF_WRITE)\n    flags |= FAULT_FLAG_WRITE;\n\n\n\u66f8\u304d\u8fbc\u307f\u3067\u30d5\u30a9\u30eb\u30c8\u304c\u8d77\u304d\u305f\u5834\u5408\u3001\u66f8\u304d\u8fbc\u307f\u30a2\u30af\u30bb\u30b9\u3092\u793a\u3059\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u5148\u306b\u9032\u307f\u307e\u3059\u3002\n\u307e\u3060\u5148\u306f\u9577\u3044...\u3002\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u306b\u3057\u307e\u3059\u3002\n\n\u6b21\u56de\u306e\u4e88\u5b9a\n\u6b21\u56de\u306f\u307e\u305f\u7d9a\u304d\u304b\u3089\u8aad\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\nAppendix\n\nin_atomic?\n\ninclude/linux/preempt_mask.h\n/*\n * Are we running in atomic context?  WARNING: this macro cannot\n * always detect atomic context; in particular, it cannot know about\n * held spinlocks in non-preemptible kernels.  Thus it should not be\n * used in the general case to determine whether sleeping is possible.\n * Do not use in_atomic() in driver code.\n */\n#define in_atomic() ((preempt_count() & ~PREEMPT_ACTIVE) != 0)\n\n\n\n\u3053\u306e\u30b3\u30e1\u30f3\u30c8\u3060\u3051\u3092\u8aad\u3080\u3068\u3001\u51e6\u7406\u304c\u30d7\u30ea\u30a8\u30f3\u30d7\u30c8(\u5b9f\u884c\u6a29\u306e\u6a2a\u53d6\u308a)\u3055\u308c\u305f\u5834\u5408\u306btrue\u306b\u306a\u308b\u3088\u3046\u306b\u601d\u308f\u308c\u307e\u3059\u3002\npreempt_count()\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\narch/x86/include/asm/preempt.h\nDECLARE_PER_CPU(int, __preempt_count);\n/* \u7565 */\n/*\n * We mask the PREEMPT_NEED_RESCHED bit so as not to confuse all current users\n * that think a non-zero value indicates we cannot preempt.\n */\nstatic __always_inline int preempt_count(void)\n{\n  return raw_cpu_read_4(__preempt_count) & ~PREEMPT_NEED_RESCHED;\n}\n\n\n\u500b\u4eba\u7684\u306b\u306fraw_cpu_read_4()\u306e\u5b9f\u88c5\u3001\u306a\u304b\u306a\u304b\u304a\u3082\u3057\u308d\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u305d\u308c\u306f\u63aa\u3044\u3066\u3001__preempt_count\u306e\u6271\u3044\u65b9\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n__preempt_count\n\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u30d8\u30c3\u30c0\u3092\u8aad\u307e\u308c\u308b\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\narch/x86/include/asm/preempt.h\ninclude/linux/preempt.h\n\n\u3057\u304b\u3057\u3001\u30e1\u30e2\u3082\u517c\u306d\u3066\u8a18\u9332\u3092\u6b8b\u3059\u3068...\n__preempt_count\u306ebit31 ... need reschedule flag\u3002\n\u3053\u306e\u30d3\u30c3\u30c8\u304c0\u306e\u5834\u5408\u3001\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092 \u5fc5\u8981\u3068\u3057\u307e\u3059\u30021\u3060\u3068\u5fc5\u8981\u3068\u3057\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002(\u4e00\u898b\u76f4\u611f\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002)\nneed reschedule flag\u3068\u306f\u300c\u6b21\u306b\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u3089\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3092\u8a66\u307f\u308b\u65e8\u3092\u4f9d\u983c\u3059\u308b\u300d\u305f\u3081\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\n\u305d\u3057\u3066\u3001\u6b8b\u308a\u306e\u30d3\u30c3\u30c8\u306f\u300c\u30ab\u30fc\u30cd\u30eb\u30d7\u30ea\u30a8\u30f3\u30d7\u30c8\u3055\u308c\u305f\u56de\u6570\u300d\u3092\u8868\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u624b\u304c\u304b\u308a\u306b\u4e0a\u8a18\u30d8\u30c3\u30c0\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30ab\u30fc\u30cd\u30eb\u30d7\u30ea\u30a8\u30f3\u30d7\u30b7\u30e7\u30f3\n\u4e00\u6614\u524d\u306e\u591a\u304f\u306eOS\u3067\u306f\u300c\u30ab\u30fc\u30cd\u30eb\u30e2\u30fc\u30c9\u3067\u51e6\u7406\u4e2d\u306b\u306fsleep()\u306a\u3069\u306b\u3088\u3063\u3066\u660e\u793a\u7684\u306bCPU\u5b9f\u884c\u6a29\u3092\u624b\u653e\u3055\u306a\u3044\u9650\u308a\u3001\u5b9f\u884c\u6a29\u3092\u53d6\u5f97\u3057\u305f\u307e\u307e\u300d\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u6392\u4ed6\u306a\u3069\u3092\u7c21\u6f54\u306b\u3059\u308b\u3053\u3068\u306a\u3069\u304c\u76ee\u7684\u306a\u306e\u3067\u3059\u304c\u3001\u6642\u9593\u306e\u304b\u304b\u308b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306a\u3069\u3092\u5b9f\u884c\u3059\u308b\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u60aa\u304f\u306a\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\u3053\u306e\u3042\u305f\u308a\u306e\u30da\u30fc\u30b8\u304c\u30d7\u30ea\u30a8\u30f3\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u7c21\u6f54\u306b\u66f8\u3044\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\nLinux\u3067\u306fpreempt_disable()\u3057\u306a\u3044\u9650\u308a\u3001\u30d7\u30ea\u30a8\u30f3\u30d7\u30c8\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u30d7\u30ea\u30a8\u30f3\u30d7\u30c8\u304c\u8d77\u304d\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u306f\u4ee5\u4e0b\u306e\u7b87\u6240\u3067\u3059\u3002(Linux Kerkel Development 3rd ed P64\u3088\u308a)\n\nKernel preemption can occur\n - When an interrupt handler exits, before returning to kernel-space\n - When kernel code becomes preemptive again\n - If a task in the kernel explicitly calls schedule()\n - If a task in the kernel blocks(Which results in a call to schedule()\n\n\u3042\u3089\u304b\u3058\u3081need reschedule flag\u304c\u7acb\u3063\u3066\u3044\u3066\u3001\u4e0a\u8a18\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u8d77\u304d\u305f\u3068\u304d\u3001\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3055\u308c\u3001\u30d7\u30ea\u30a8\u30f3\u30d7\u30b7\u30e7\u30f3\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n## \u4eca\u56de\u3084\u308b\u3053\u3068\n[\u524d\u56de](http://qiita.com/akachochin/item/e5fcefbd27f6c9fd711c)\u306f\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u3044\u308b__do_page_fault()\u306e\u524d\u534a\u90e8\u5206\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u5f15\u304d\u7d9a\u304d__do_page_fault()\u3092\u8aad\u307f\u307e\u3059\u3002\n\n## \u3055\u3066\u3001\u65e9\u304f\u3082\u8db3\u6b62\u3081\uff1f\n\u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002\n\u30b3\u30e1\u30f3\u30c8\u304b\u3089\u60f3\u50cf\u3059\u308b\u306b\u3001\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u5185\u3067\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u30b1\u30fc\u30b9\u3092\u634c\u304f\u51e6\u7406\u306e\u3088\u3046\u3067\u3059\u3002\n\n```c:arch/x86/mm/fault.c\n  /*\n   * If we're in an interrupt, have no user context or are running\n   * in an atomic region then we must not take the fault:\n   */\n  if (unlikely(in_atomic() || !mm)) {\n    bad_area_nosemaphore(regs, error_code, address);\n    return;\n  }\n```\nin_atomic()\u306b\u3064\u3044\u3066\u306f\u3001Appendix\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002(\u3068\u3044\u3046\u3088\u308a\u3001Appendix\u304c\u30e1\u30a4\u30f3\u3060\u3063\u305f\u308a\u3082\u3057\u307e\u3059...\u3002)\n\u5358\u7d14\u306a\u3088\u3046\u3067\u306a\u304b\u306a\u304b\u9762\u767d\u3044\u5b9f\u88c5\u304c\u898b\u3048\u307e\u3059\u3002\u3053\u3046\u3044\u3046\u6a2a\u9053\u306b\u9038\u308c\u3066\u3044\u304f\u306e\u304c\u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u9762\u767d\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001bad_area_nosemaphore()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:arch/x86/mm/fault.c\nstatic noinline void \nbad_area_nosemaphore(struct pt_regs *regs, unsigned long error_code,\n         unsigned long address)\n{\n  __bad_area_nosemaphore(regs, error_code, address, SEGV_MAPERR);\n}\n```\n\n\u7d9a\u304f\u95a2\u6570\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:arch/x86/mm/fault.c\nstatic void\n__bad_area_nosemaphore(struct pt_regs *regs, unsigned long error_code,\n           unsigned long address, int si_code)\n{\n  struct task_struct *tsk = current;\n\n  /* User mode accesses just cause a SIGSEGV */\n  if (error_code & PF_USER) {\n  /* SEGV\u3092\u6295\u3052\u308b\u51e6\u7406\u3002\u7565 */\n    return;\n  }\n\n  if (is_f00f_bug(regs, address))\n    return;\n\n  no_context(regs, error_code, address, SIGSEGV, si_code);\n}\n\n```\n\nerror_code\u306f\u524d\u56de\u7d39\u4ecb\u3057\u305fdo_page_fault()\u306e\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u3066\u304f\u308b\u5024\u3067\u3059\u3002\n\u5b9f\u306f\u3001error_code\u306f\u4f8b\u5916\u767a\u751f\u6642\u306b\u30b9\u30bf\u30c3\u30af\u306b\u7a4d\u307e\u308c\u308b\u5024\u306e\u4e00\u3064\u3067\u3059\u3002\nIntel SDM Vol3.\u300c6.15 EXCEPTION AND INTERRUPT REFERENCE\u300d\u306e\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u306e\u8aac\u660e\u306e\u3068\u3053\u308d\u306b\u4ee5\u4e0b\u306e\u56f3\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\n\n![sdm_errorcode.png](https://qiita-image-store.s3.amazonaws.com/0/19975/95af2ade-41f7-5a8f-b80b-24aaa5de394c.png)\n\nerror_code\u306ebit2\u3092\u898b\u308c\u3070\u3001\u30e6\u30fc\u30b6\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u3066\u3044\u305f\u3068\u304d\u304b\u30ab\u30fc\u30cd\u30eb\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u3066\u3044\u305f\u3068\u304d\u304b\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\n\u203b\u300cIntel SDM Vol3 6.13 ERROR CODE\u300d\u306b\u8f09\u3063\u3066\u3044\u308berror_code\u306f\u3053\u306e\u5834\u5408\u5f53\u3066\u306f\u307e\u308a\u307e\u305b\u3093\u3002\u3054\u6ce8\u610f\u3092\u3002\n\n>The format of the error code is different for page-fault exceptions (#PF). See the \u201cInterrupt 14\u2014Page-Fault Exception (#PF)\u201d section in this chapter.\n\n\u6b21\u306b\u547c\u3070\u308c\u3066\u3044\u308b\u95a2\u6570\u540d\u306b\u542b\u307e\u308c\u308b\u300cf00f_bug\u300d\u3068\u3044\u3046\u306e\u306f\u3001Intel CPU(Pentium)\u306eerrata\u3067\u3059\u3002\u8a73\u7d30\u306f[Intel\u306e\u30da\u30fc\u30b8](http://www.intel.com/support/processors/pentium/sb/CS-013148.htm)\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u306e\u95a2\u6570\u306f\u4eca\u56de\u306e\u5bfe\u8c61\u5916\u3068\u3057\u307e\u3059\u304c\u3001\u8208\u5473\u306e\u3042\u308b\u65b9\u306farch/x86/mm/fault.c\u3068\u5148\u306e\u53c2\u8003\u8cc7\u6599\u306eWorkaround\u3092\u3082\u3068\u306b\u8aad\u307f\u89e3\u3044\u3066\u307f\u308b\u306e\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nno_context()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n```c:arch/x86/mm/fault.c\nstatic noinline void\nno_context(struct pt_regs *regs, unsigned long error_code,\n     unsigned long address)\n{\n  /* Are we prepared to handle this kernel fault?  */\n  if (fixup_exception(regs))\n    return;\n\n  if (handle_trapped_io(regs, address))\n    return;\n\n  /*\n   * Oops. The kernel tried to access some bad page. We'll have to\n   * terminate things with extreme prejudice.\n   */\n  bust_spinlocks(1);\n\n  show_fault_oops(regs, address);\n\n  die(\"Oops\", regs, error_code);\n  bust_spinlocks(0);\n  do_exit(SIGKILL);\n}\n```\n\nOops!\u3068\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n(fixup_exception()\u3082\u8ffd\u3063\u3066\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u7d30\u304b\u304f\u306a\u308a\u3059\u304e\u308b\u306e\u3067\u3053\u3053\u306f\u98db\u3070\u3057\u307e\u3059\u3002)\n\n## \u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u3068\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\n\u30b3\u30e1\u30f3\u30c8\u3092\u4fe1\u3058\u308b\u306a\u3089\u3001\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u5185\u3067\u306e\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u306e\u30b1\u30fc\u30b9\u306e\u51e6\u7406\u3067\u306f\u3001\u539f\u5247\u3068\u3057\u3066Oops\u306b\u306a\u308a\u307e\u3059\u3002\n**\u305d\u308c\u306f\u3001\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u5185\u3067\u306f\u3001\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u3092\u5f15\u304d\u8d77\u3053\u3059\u3088\u3046\u306a\u5371\u967a\u306a\u30e1\u30e2\u30ea\u7a7a\u9593\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u305f\u3081\u3067\u3059\u3002**\n\u306a\u305c\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u305d\u308c\u306f\u3001\u5272\u308a\u8fbc\u307f\u5185\u3067sleep\u3059\u308b\u3053\u3068\u304c\u8a31\u3055\u308c\u306a\u3044\u305f\u3081\u3067\u3059\u3002\n\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u304c\u8d77\u304d\u3066\u3001\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u8d77\u304d\u308b\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u306f\u5927\u62b5\u306e\u5834\u5408\u3001\u4e8c\u6b21\u8a18\u61b6\u88c5\u7f6e\u3067\u3059\u3002\n\u3059\u308b\u3068\u3001I/O\u5f85\u3061\u306e\u305f\u3081\u306bsleep\u3067CPU\u306e\u5b9f\u884c\u6a29\u3092\u653e\u68c4\u3059\u308b\u53ef\u80fd\u6027\u304c\u6975\u3081\u3066\u9ad8\u3044\u306e\u3067\u3059\u3002\n\n\u5272\u308a\u8fbc\u307f\u306f\u3069\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u3082\u5c5e\u3055\u306a\u3044\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u52d5\u304f\u306e\u3067\u3001\u300c\u30d7\u30ed\u30bb\u30b9\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30b9\u30a4\u30c3\u30c1\u3057\u3066\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u5b9f\u884c\u72b6\u614b\u306b\u3059\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3002\n\n\u305d\u3082\u305d\u3082\u3001\u5272\u308a\u8fbc\u307f\u306f\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u51e6\u7406\u306b\u5272\u308a\u8fbc\u3093\u3067\u3044\u308b\u306e\u3067\u3001\u5c11\u3057\u3067\u3082\u65e9\u304f\u51e6\u7406\u3092\u5b8c\u4e86\u3055\u305b\u308b\u306e\u304c\u7b4b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u304c\u8d77\u304d\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30e1\u30e2\u30ea\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u81ea\u4f53\u304c\u3042\u307e\u308a\u3088\u308d\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```c:arch/x86/mm/fault.c\n  /*\n   * It's safe to allow irq's after cr2 has been saved and the\n   * vmalloc fault has been handled.\n   *\n   * User-mode registers count as a user access even for any\n   * potential system fault or CPU buglet:\n   */\n  if (user_mode_vm(regs)) {\n    local_irq_enable();\n    error_code |= PF_USER;\n    flags |= FAULT_FLAG_USER;\n  } else {\n    if (regs->flags & X86_EFLAGS_IF)\n      local_irq_enable();\n  }\n```\nuser_mode_vm()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c:arch/x86/mm/fault.c\nstatic inline int user_mode_vm(struct pt_regs *regs)\n{\n#ifdef CONFIG_X86_32\n  return ((regs->cs & SEGMENT_RPL_MASK) | (regs->flags & X86_VM_MASK)) >=\n    USER_RPL;\n#else\n  return user_mode(regs);\n#endif\n}\n```\nRPL(Requested Privilege Level)\u3092\u898b\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002Privilege Level\u306f\u3044\u308f\u3086\u308b\u4ee5\u4e0b\u306e\u30ea\u30f3\u30b0\u3067\u8aac\u660e\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3084\u3064\u3067\u3059\u306d\u3002(Intel SDM\u3088\u308a\u629c\u7c8b)\n\n![protection_ring.png](https://qiita-image-store.s3.amazonaws.com/0/19975/6ffb5143-6644-469e-44f9-ffb0b5ed303f.png)\n\nerror_code\u3067\u306a\u304f\u308f\u3056\u308f\u3056Privilege Level\u3092\u898b\u3066\u3044\u308b\u306e\u306f\u4f55\u304b\u7406\u7531\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f(\u3053\u3053\u306f\u8b0e\u306a\u306e\u3067\u3001\u7406\u7531\u306f\u3082\u3046\u5c11\u3057\u8abf\u3079\u3066\u307f\u305f\u3044\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u4eca\u306f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u5148\u306b\u9032\u307f\u307e\u3059\u3002)\n\n```c:arch/x86/mm/fault.c\n  perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, regs, address);\n\n  if (error_code & PF_WRITE)\n    flags |= FAULT_FLAG_WRITE;\n```\n\n\u66f8\u304d\u8fbc\u307f\u3067\u30d5\u30a9\u30eb\u30c8\u304c\u8d77\u304d\u305f\u5834\u5408\u3001\u66f8\u304d\u8fbc\u307f\u30a2\u30af\u30bb\u30b9\u3092\u793a\u3059\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u5148\u306b\u9032\u307f\u307e\u3059\u3002\n\n\u307e\u3060\u5148\u306f\u9577\u3044...\u3002\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u306b\u3057\u307e\u3059\u3002\n\n## \u6b21\u56de\u306e\u4e88\u5b9a\n\u6b21\u56de\u306f\u307e\u305f\u7d9a\u304d\u304b\u3089\u8aad\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\n## Appendix\n### in_atomic?\n\n```c:include/linux/preempt_mask.h\n/*\n * Are we running in atomic context?  WARNING: this macro cannot\n * always detect atomic context; in particular, it cannot know about\n * held spinlocks in non-preemptible kernels.  Thus it should not be\n * used in the general case to determine whether sleeping is possible.\n * Do not use in_atomic() in driver code.\n */\n#define in_atomic() ((preempt_count() & ~PREEMPT_ACTIVE) != 0)\n\n```\n\n\u3053\u306e\u30b3\u30e1\u30f3\u30c8\u3060\u3051\u3092\u8aad\u3080\u3068\u3001\u51e6\u7406\u304c\u30d7\u30ea\u30a8\u30f3\u30d7\u30c8(\u5b9f\u884c\u6a29\u306e\u6a2a\u53d6\u308a)\u3055\u308c\u305f\u5834\u5408\u306btrue\u306b\u306a\u308b\u3088\u3046\u306b\u601d\u308f\u308c\u307e\u3059\u3002\npreempt_count()\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:arch/x86/include/asm/preempt.h\nDECLARE_PER_CPU(int, __preempt_count);\n/* \u7565 */\n/*\n * We mask the PREEMPT_NEED_RESCHED bit so as not to confuse all current users\n * that think a non-zero value indicates we cannot preempt.\n */\nstatic __always_inline int preempt_count(void)\n{\n  return raw_cpu_read_4(__preempt_count) & ~PREEMPT_NEED_RESCHED;\n}\n```\n\n\u500b\u4eba\u7684\u306b\u306fraw_cpu_read_4()\u306e\u5b9f\u88c5\u3001\u306a\u304b\u306a\u304b\u304a\u3082\u3057\u308d\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u305d\u308c\u306f\u63aa\u3044\u3066\u3001__preempt_count\u306e\u6271\u3044\u65b9\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n### \\_\\_preempt_count\n\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u30d8\u30c3\u30c0\u3092\u8aad\u307e\u308c\u308b\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n>arch/x86/include/asm/preempt.h\n>include/linux/preempt.h\n\n\u3057\u304b\u3057\u3001\u30e1\u30e2\u3082\u517c\u306d\u3066\u8a18\u9332\u3092\u6b8b\u3059\u3068...\n\n__preempt_count\u306ebit31 ... need reschedule flag\u3002\n\u3053\u306e\u30d3\u30c3\u30c8\u304c0\u306e\u5834\u5408\u3001\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092 **\u5fc5\u8981\u3068\u3057\u307e\u3059**\u30021\u3060\u3068**\u5fc5\u8981\u3068\u3057\u306a\u3044**\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002(\u4e00\u898b\u76f4\u611f\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002)\nneed reschedule flag\u3068\u306f\u300c\u6b21\u306b\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u3089\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3092\u8a66\u307f\u308b\u65e8\u3092\u4f9d\u983c\u3059\u308b\u300d\u305f\u3081\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u6b8b\u308a\u306e\u30d3\u30c3\u30c8\u306f\u300c\u30ab\u30fc\u30cd\u30eb\u30d7\u30ea\u30a8\u30f3\u30d7\u30c8\u3055\u308c\u305f\u56de\u6570\u300d\u3092\u8868\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u624b\u304c\u304b\u308a\u306b\u4e0a\u8a18\u30d8\u30c3\u30c0\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n### \u30ab\u30fc\u30cd\u30eb\u30d7\u30ea\u30a8\u30f3\u30d7\u30b7\u30e7\u30f3\n\u4e00\u6614\u524d\u306e\u591a\u304f\u306eOS\u3067\u306f\u300c\u30ab\u30fc\u30cd\u30eb\u30e2\u30fc\u30c9\u3067\u51e6\u7406\u4e2d\u306b\u306fsleep()\u306a\u3069\u306b\u3088\u3063\u3066\u660e\u793a\u7684\u306bCPU\u5b9f\u884c\u6a29\u3092\u624b\u653e\u3055\u306a\u3044\u9650\u308a\u3001\u5b9f\u884c\u6a29\u3092\u53d6\u5f97\u3057\u305f\u307e\u307e\u300d\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u6392\u4ed6\u306a\u3069\u3092\u7c21\u6f54\u306b\u3059\u308b\u3053\u3068\u306a\u3069\u304c\u76ee\u7684\u306a\u306e\u3067\u3059\u304c\u3001\u6642\u9593\u306e\u304b\u304b\u308b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306a\u3069\u3092\u5b9f\u884c\u3059\u308b\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u60aa\u304f\u306a\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n[\u3053\u306e\u3042\u305f\u308a](http://kernelnewbies.org/FAQ/Preemption)\u306e\u30da\u30fc\u30b8\u304c\u30d7\u30ea\u30a8\u30f3\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u7c21\u6f54\u306b\u66f8\u3044\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\nLinux\u3067\u306fpreempt_disable()\u3057\u306a\u3044\u9650\u308a\u3001\u30d7\u30ea\u30a8\u30f3\u30d7\u30c8\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u30d7\u30ea\u30a8\u30f3\u30d7\u30c8\u304c\u8d77\u304d\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u306f\u4ee5\u4e0b\u306e\u7b87\u6240\u3067\u3059\u3002(Linux Kerkel Development 3rd ed P64\u3088\u308a)\n\n> Kernel preemption can occur\n>  - When an interrupt handler exits, before returning to kernel-space\n>  - When kernel code becomes preemptive again\n>  - If a task in the kernel explicitly calls schedule()\n>  - If a task in the kernel blocks(Which results in a call to schedule()\n\n\u3042\u3089\u304b\u3058\u3081need reschedule flag\u304c\u7acb\u3063\u3066\u3044\u3066\u3001\u4e0a\u8a18\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u8d77\u304d\u305f\u3068\u304d\u3001\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3055\u308c\u3001\u30d7\u30ea\u30a8\u30f3\u30d7\u30b7\u30e7\u30f3\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n", "tags": ["Linux", "\u4eee\u60f3\u8a18\u61b6", "kernel", "kernelvm"]}