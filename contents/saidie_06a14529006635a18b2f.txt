{"context": "\u3064\u3044\u306b Redis \u304c\u30ed\u30fc\u30c0\u30d6\u30eb\u30fb\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u5146\u3057\u3092\u898b\u305b\u3066\u3044\u307e\u3059\u3002Redis \u306e\u958b\u767a\u8005\u3067\u3042\u308b antirez \u6c0f\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b Redis Loadable Modules System \u3067 4 \u30f6\u6708\u307b\u3069\u524d\u306b\u7d39\u4ecb\u3055\u308c\u3001antirez/redis \u306e unstable \u30d6\u30e9\u30f3\u30c1\u3067\u7cbe\u529b\u7684\u306b(??)\u958b\u767a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u904a\u3093\u3067\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u304b\u3089\u65e9 4 \u30f6\u6708\u3001\u3044\u3044\u52a0\u6e1b\u91cd\u3044\u8170\u3092\u4e0a\u3052\u3066\u4eca\u56de\u89e6\u3063\u3066\u307f\u305f\u306e\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\ntl; dr\n\nRedis \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u72ec\u81ea\u30c7\u30fc\u30bf\u578b\u4f5c\u308c\u308b\n\u4eca\u56de\u306f\u30c8\u30e9\u30a4\u6728\u4f5c\u3063\u3066\u5358\u8a9e\u306e\u30aa\u30fc\u30c8\u30b3\u30f3\u30d7\u30ea\u30fc\u30c8\u3084\u3063\u3066\u307f\u305f\n\n\n\u6c38\u7d9a\u5316\u3084\u30ec\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3082\u7c21\u5358\u306b\u5bfe\u5fdc\u3067\u304d\u305f\n\n\n\u5922\u304c\u5e83\u304c\u308b\n\n\nRedis \u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u306f\nRedis \u306e\u52d5\u4f5c\u3092\u62e1\u5f35\u3059\u308b\u305f\u3081\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3001\u52d5\u7684\u306b\u30ed\u30fc\u30c9/\u30a2\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30d0\u30fc\u30b8\u30e7\u30f3\u9055\u3044\u306e Redis \u306b\u5bfe\u3057\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u4e92\u63db\u6027\u3092\u4fdd\u3066\u308b\u3088\u3046\u306b\u3001\u305d\u3057\u3066\u3001\u5f8c\u65b9\u4e92\u63db\u6027\u306e\u305f\u3081 Redis \u30b3\u30a2\u306e\u958b\u767a\u304c\u8db3\u3092\u5f15\u3063\u5f35\u3089\u308c\u306a\u3044\u3088\u3046\u306b\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306f Redis \u30b3\u30a2\u3068\u300c\u30e2\u30b8\u30e5\u30fc\u30eb API\u300d\u3092\u4ecb\u3057\u3066\u30c7\u30fc\u30bf\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b antirez \u6c0f\u306f API \u306e\u4e92\u63db\u6027\u3092\u6700\u91cd\u8981\u8996\u3057\u3066\u3044\u3066\u3001\u4eca\u65e5\u66f8\u3044\u305f\u30e2\u30b8\u30e5\u30fc\u30eb/\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u304c 4 \u5e74\u5f8c\u3082\u305d\u306e\u307e\u307e\u52d5\u304f/\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3001\u3068\u8a9e\u3063\u3066\u3044\u307e\u3059\u3002\u80cc\u666f\u3084\u601d\u60f3\u306a\u3069\u306b\u3064\u3044\u3066\u3001\u3055\u3089\u306b\u8a73\u3057\u3044\u3053\u3068\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u3001\u524d\u8ff0\u306e antirez \u6c0f\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3084 antirez/redis \u30ec\u30dd\u30b8\u30c8\u30ea\u306e\u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3 (\u305f\u3060\u3057\u3042\u307e\u308a\u30e1\u30f3\u30c6\u3055\u308c\u3066\u306a\u3044) \u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u3082\u3089\u3048\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u30e2\u30b8\u30e5\u30fc\u30eb API \u306b\u3064\u3044\u3066\u3082\u307e\u3060\u307e\u3060\u767a\u5c55\u9014\u4e0a\u3067\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u307e\u3068\u3082\u306b\u30e1\u30f3\u30c6\u3055\u308c\u3066\u306a\u3044\u306e\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u306e\u304c\u78ba\u5b9f\u3067\u3059\u3002\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f src/redismodule.h \u306b\u3042\u308b\u3001RedisModule_ \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3067\u59cb\u307e\u308b\u4e00\u898b\u95a2\u6570\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u306b\u898b\u3048\u308b\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u9054\u3067\u3059\u3002\u305d\u306e\u672c\u4f53\u306f src/module.c \u306b\u3042\u308b\u3001RM_ \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3067\u59cb\u307e\u308b\u3001\u540c\u4e00\u306e\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u3082\u3064\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306f Redis \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u6642\u306b\u547c\u3070\u308c\u308b RedisModule_Init (\u307e\u305f\u5f8c\u3067\u89e6\u308c\u307e\u3059) \u306b\u3066\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u3053\u3046\u3044\u3046\u8a2d\u8a08\u306b\u3057\u305f\u306e\u306f RedisModule_Init \u95a2\u6570\u306b\u6e21\u3059\u30e2\u30b8\u30e5\u30fc\u30eb API \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5fdc\u3058\u3066\u95a2\u6570\u672c\u4f53\u3092\u5207\u308a\u66ff\u3048\u308b\u305f\u3081\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u305f\u3076\u3093\u3002\u3056\u30fc\u3063\u3068\u773a\u3081\u3066\u307f\u308b\u3068\u3001RedisModule_ListPush\u3001RedisModule_ZsetFirstInScoreRange \u3068\u304b RedisModule_ReplyWithArray \u307f\u305f\u3044\u306a\u305d\u308c\u3063\u307d\u3044\u95a2\u6570(\u30dd\u30a4\u30f3\u30bf)\u540d\u304c\u3042\u3063\u305f\u308a\u3001RedisModule_CreateDataType \u307f\u305f\u3044\u306a\u5fc3\u3068\u304d\u3081\u304f\u3082\u306e\u3082\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u7c21\u5358\u306a Redis \u30e2\u30b8\u30e5\u30fc\u30eb\n\u3068\u308a\u3042\u3048\u305a\u3001\u3042\u308b\u30ea\u30b9\u30c8\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3060\u3051\u306e hello.hoge \u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u52d5\u304d\u307e\u3059\u3002\n127.0.0.1:6379> get list\n(nil)\n127.0.0.1:6379> hello.hoge list\no\n127.0.0.1:6379> hello.hoge list\nm\n127.0.0.1:6379> lrange list 0 -1\n1) \"o\"\n2) \"m\"\n\n\u4f55\u306e\u5f79\u306b\u3082\u7acb\u305f\u306a\u305d\u3046\u306a\u30b3\u30de\u30f3\u30c9\u3067\u3059\u304c\u3001\u30ad\u30fc\u3092\u4f7f\u3063\u305f Redis \u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8aad\u307f\u66f8\u304d\u3092\u3059\u308b\u7c21\u5358\u306a\u4f8b\u3068\u3057\u3066\u306f\u3042\u308a\u304b\u306a\u3001\u3068\u601d\u3063\u3066\u3053\u308c\u306b\u3057\u307e\u3057\u305f\u3002\n\nhello.hoge \u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u88c5\n\u65e9\u901f\u3067\u3059\u304c\u3001\u30b3\u30de\u30f3\u30c9\u672c\u4f53\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\nsample.c(\u524d\u534a)\n#include <stdlib.h>\n#include \"redismodule.h\"  // \u304a\u307e\u3058\u306a\u3044\n\n// hello.hoge \u30b3\u30de\u30f3\u30c9\u306e\u672c\u4f53\nint HelloHoge_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    // \u30a2\u30ea\u30c6\u30a3\u306e\u30c1\u30a7\u30c3\u30af\n    if (argc != 2) return RedisModule_WrongArity(ctx);\n\n    // \u30ad\u30fc\u3092 read/write \u3067\u958b\u304f\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ | REDISMODULE_WRITE);\n\n    // \u30e9\u30f3\u30c0\u30e0\u6587\u5b57\u4f5c\u308b\n    char string[] = \"a\";\n    string[0] += rand() % 26;\n\n    // lpush \u3067\u6587\u5b57\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u308b\n    if (RedisModule_ListPush(key, REDISMODULE_LIST_TAIL, RedisModule_CreateString(ctx, string, 1)) == REDISMODULE_ERR)\n      return REDISMODULE_ERR;\n\n    // \u751f\u6210\u3057\u305f\u30e9\u30f3\u30c0\u30e0\u6587\u5b57\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3059\n    if (RedisModule_ReplyWithSimpleString(ctx, string) == REDISMODULE_ERR)\n      return REDISMODULE_ERR;\n\n    // \u30ad\u30fc\u3092\u9589\u3058\u308b\n    RedisModule_CloseKey(key);\n\n    return REDISMODULE_OK;\n}\n\n\n\u3056\u3063\u304f\u308a\u3057\u305f\u51e6\u7406\u306e\u6d41\u308c\u306f\u30a4\u30f3\u30e9\u30a4\u30f3\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304f\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u3001\u7d30\u304b\u3044\u90e8\u5206\u306e\u8aac\u660e\u306a\u3069\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u95a2\u6570\u540d\u306f #{\u30b3\u30de\u30f3\u30c9\u540d}_RedisCommand \u306e\u3088\u3046\u306b\u547d\u540d\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u305d\u3057\u3066\u3001\u5f15\u6570\u306f\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\n\u3053\u308c\u306f Redis \u30b5\u30fc\u30d0\u304c\u547c\u3073\u51fa\u3057\u6642\u306b\u52dd\u624b\u306b\u6e21\u3057\u3066\u304f\u308c\u308b\n\n\n\u4efb\u610f\u306e\u500b\u6570 (argc \u500b) \u306e\u6587\u5b57\u5217\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u767a\u884c\u3057\u305f\u30b3\u30de\u30f3\u30c9\u3068\u305d\u306e\u5f15\u6570\u6587\u5b57\u5217\n\n\n\n\u3068\u3044\u3046\u5f62\u5f0f\u306b\u7d71\u4e00\u3055\u308c\u3066\u3044\u307e\u3059\u3002hello.hoge \u30b3\u30de\u30f3\u30c9\u306f\u5f15\u6570\u3092 1 \u500b (\u30ea\u30b9\u30c8\u306e\u30ad\u30fc) \u53d6\u308b\u306e\u3067\u3001\u30b3\u30de\u30f3\u30c9\u540d\u3092\u542b\u3081\u3066 argc \u304c 2 \u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\nRedis \u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u306f\u3001\u6700\u521d\u306b RedisModule_OpenKey \u3068\u3044\u3046\u95a2\u6570\u3067\u30ad\u30fc\u3092 open \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u4e3b\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5468\u308a\u306e\u53d6\u308a\u6271\u3044\u306e\u305f\u3081\u307f\u305f\u3044\u3067\u3059 (\u8a73\u3057\u3044\u6240\u307e\u3067\u8aad\u3081\u3066\u306a\u3044\u3067\u3059\u304c)\u3002\u307e\u305f\u3001\u30ad\u30fc\u540d\u304b\u3089 Redis \u306e\u5185\u90e8\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u304c\u4e00\u56de\u3067\u3059\u3080\u3068\u3044\u3046\u5229\u70b9\u3082\u3042\u3063\u305f\u308a\u3057\u305d\u3046\u3067\u3059\u3002\u305d\u3057\u3066\u3001open \u3057\u305f\u30ad\u30fc\u306f RedisModule_CloseKey \u3067\u9589\u3058\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u81ea\u52d5\u30e1\u30e2\u30ea\u7ba1\u7406\u6a5f\u80fd\u3068\u3044\u3046\u3082\u306e\u3092 ON \u306b\u3057\u3066\u304a\u304f\u3068\u52dd\u624b\u306b\u9589\u3058\u305f\u308a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059 (\u304c\u307e\u3060\u3061\u3083\u3093\u3068\u8abf\u3079\u3066\u306a\u3044)\u3002\nRedisModule_ListPush \u306f lpush \u3067\u3059\u3002\u7b2c\u4e8c\u5f15\u6570\u3067\u30ea\u30b9\u30c8\u306e\u5148\u982d\u3068\u672b\u5c3e\u3069\u3061\u3089\u306b\u8ffd\u52a0\u3059\u308b\u304b\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001RedisModule_ReplyWith* \u7cfb\u306e\u95a2\u6570\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u306e\u8fd4\u308a\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\u6587\u5b57\u5217\u4ee5\u5916\u306b\u3082\u3001NULL\u3001\u6574\u6570\u3001\u914d\u5217 (\u591a\u6b21\u5143\u3082\u53ef)\u3001\u5c11\u6570\u306a\u3069\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0a\u304c\u3001hello.hoge \u30b3\u30de\u30f3\u30c9\u672c\u4f53\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\nhello.hoge \u30b3\u30de\u30f3\u30c9\u306e\u767b\u9332\n\u30b3\u30de\u30f3\u30c9\u672c\u4f53\u304c\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3001\u5f8c\u306f\u3053\u308c\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30ed\u30fc\u30c9\u3055\u308c\u305f\u6642\u306b Redis \u306b\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u30ed\u30fc\u30c9\u6642\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8 RedisModule_OnLoad \u3067\u884c\u3044\u307e\u3059\u3002\n\nsample.c(\u5f8c\u534a)\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    // \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u521d\u671f\u5316\n    if (RedisModule_Init(ctx, \"hello\", 1, REDISMODULE_APIVER_1) == REDISMODULE_ERR)\n      return REDISMODULE_ERR;\n\n    // hello.hoge \u30b3\u30de\u30f3\u30c9\u306e\u767b\u9332\n    if (RedisModule_CreateCommand(ctx, \"hello.hoge\", HelloHoge_RedisCommand, \"write deny-oom random fast\", 1, 1, 1) == REDISMODULE_ERR)\n      return REDISMODULE_ERR;\n\n    return REDISMODULE_OK;\n}\n\n\n\u6700\u521d\u306b\u3001\u5192\u982d\u3067\u3061\u3087\u3063\u3068\u89e6\u308c\u305f RedisModule_Init \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u5f15\u6570\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3001\u30e2\u30b8\u30e5\u30fc\u30eb API \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001RedisModule_CreateCommand \u3067 hello.hoge \u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u540d\u306b\u5bfe\u3057\u3066\u30b3\u30de\u30f3\u30c9\u672c\u4f53 HelloHoge_RedisCommand \u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u7b2c 4 \u5f15\u6570\u4ee5\u964d\u306f\u305d\u308c\u305e\u308c\u3001\u30b3\u30de\u30f3\u30c9\u306e\u30d5\u30e9\u30b0\u3001\u5f15\u6570\u306e\u30ad\u30fc\u306e\u958b\u59cb\u4f4d\u7f6e\u3001\u7d42\u4e86\u4f4d\u7f6e\u3001\u30ad\u30fc\u306e\u9593\u9694\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306f\u591a\u5c90\u306b\u308f\u305f\u308b\u306e\u3067\u3001\u8a73\u3057\u304f\u306f src/module.c \u306e RM_CreateCommand \u306e\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002hello.hoge \u3067\u306f\u30ad\u30fc\u306f\u6700\u521d\u306e\u5f15\u6570\u4e00\u3064\u3060\u3051\u306a\u306e\u3067\u3001\u30ad\u30fc\u306e\u958b\u59cb\u4f4d\u7f6e\u3068\u7d42\u4e86\u4f4d\u7f6e\u306f\u5171\u306b 1 \u3067\u3001\u9593\u9694\u3082 1 \u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30ad\u30fc\u3092\u5f15\u6570\u3068\u3057\u3066\u4e00\u5207\u53d6\u3089\u306a\u3044\u5834\u5408\u306f\u958b\u59cb\u4f4d\u7f6e\u3092 0 \u3068\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9 sample.c \u3092\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002redismodule.h\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306e\u3042\u308b\u5834\u6240\u306b\u304a\u3044\u3066\u3001\ngcc -O2 -shared -fPIC sample.c -o libsample.so\n\n\u3067\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001Redis \u30b5\u30fc\u30d0\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3068\u5f53\u7136\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001antirez/redis \u306e unstable \u30d6\u30e9\u30f3\u30c1\u3067 Redis \u3092\u30d3\u30eb\u30c9\u3057\u3066\u30b5\u30fc\u30d0\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\u305d\u3057\u3066\u3001redis-cli \u304b\u3089 module load \u30b3\u30de\u30f3\u30c9\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3001\u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n127.0.0.1:6379> module load \"/path/to/libsample.so\"\nOK\n127.0.0.1:6379> hello.hoge list\nx\n\n\u307e\u305f\u3001\u6bce\u56de\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u5834\u5408\u306f\u3001redis.conf \u306b loadmodule \"/path/to/libsample.so\" \u3068\u66f8\u304f\u3068\u30b5\u30fc\u30d0\u8d77\u52d5\u6642\u306b\u81ea\u52d5\u7684\u306b\u8aad\u307f\u8fbc\u307e\u308c\u307e\u3059\u3002\n\n\u3053\u3053\u304b\u3089\u304c\u672c\u7de8\n\u3055\u3066\u3001\u300cRedis \u30e2\u30b8\u30e5\u30fc\u30eb\u300d\u3068\u3044\u3046\u8a00\u8449\u3092\u805e\u3044\u305f\u6642\u3001\u304d\u3063\u3068\u8a00\u8449\u3067\u306f\u8a00\u3044\u8868\u305b\u306a\u3044\u300c\u3068\u304d\u3081\u304d\u300d\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u611f\u3058\u305f\u65b9\u304c\u591a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u578b\u3092\u3082\u3064\u3001\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3068\u3057\u3066\u306f\u3084\u3084\u7279\u6b8a\u306a Redis \u306b\u65b0\u305f\u306a\u72ec\u81ea\u30c7\u30fc\u30bf\u578b (\u30c4\u30ea\u30fc\u3001\u30b0\u30e9\u30d5\u3001\u8ee2\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306a\u3069\u306a\u3069) \u3092\u8ffd\u52a0\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3044\u3046\u3068\u304d\u3081\u304d\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3053\u306e\u7ae0\u3067\u306f\u5b9f\u969b\u306b\u65b0\u305f\u306a\u30c7\u30fc\u30bf\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u72ec\u81ea\u30c7\u30fc\u30bf\u578b\u3092\u6271\u3046\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb API\n\u307e\u305a\u3001\u72ec\u81ea\u30c7\u30fc\u30bf\u578b\u3092\u6271\u3046\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb API \u306b\u3064\u3044\u3066\u4e00\u901a\u308a\u7c21\u5358\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\nRedisModule_CreateDataType\n\n\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u95a2\u6570\u3067\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8 RedisModule_OnLoad \u3067\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u3092\u5f15\u6570\u306b\u53d6\u308a\u307e\u3059\u3002\n\n\u578b\u306e\u8b58\u5225\u5b50 (\u4f55\u6545\u304b 9 \u6587\u5b57\u56fa\u5b9a)\u3002TYPE \u30b3\u30de\u30f3\u30c9\u3067\u8fd4\u3063\u3066\u304d\u305f\u308a\u3059\u308b\u5024\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\nRDB \u304b\u3089\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570\n\u30c7\u30fc\u30bf\u3092 RDB \u306b\u30bb\u30fc\u30d6\u3059\u308b\u95a2\u6570\n\u30c7\u30fc\u30bf\u3092 AOF \u306b\u66f8\u304d\u51fa\u3059\u95a2\u6570\n\nDEBUG DIGEST \u30b3\u30de\u30f3\u30c9\u7528\u306e\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u95a2\u6570\n\u30c7\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u958b\u653e\u3059\u308b\u95a2\u6570\n\n\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3068\u3057\u3066\u3001RedisModuleType \u3092\u8fd4\u3057\u3066\u304d\u307e\u3059\u3002\u3053\u306e\u8fd4\u308a\u5024\u306f\u30ad\u30fc\u306e\u578b\u30c1\u30a7\u30c3\u30af\u3084\u3001\u30ad\u30fc\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3059\u308b\u969b\u306b\u4f7f\u3046\u305f\u3081\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306a\u3069\u306b\u683c\u7d0d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nRedisModule_ModuleTypeGetType\n\n\u3042\u308b\u30ad\u30fc\u306e RedisModuleType \u3092\u8fd4\u3057\u307e\u3059\u3002\u524d\u8ff0\u306e\u30ad\u30fc\u306e\u578b\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u3044\u307e\u3059\u3002\n\nRedisModule_ModuleTypeSetValue, RedisModule_ModuleTypeGetValue\n\n\u3042\u308b\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u3001\u5b9a\u7fa9\u3057\u305f\u578b\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u305f\u308a\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\n\n\u30c8\u30e9\u30a4\u6728\n\u4eca\u56de\u5b9f\u88c5\u3057\u3066\u307f\u308b\u30c7\u30fc\u30bf\u578b\u306f\u30c8\u30e9\u30a4\u6728\u3067\u3001\u3072\u3068\u307e\u305a\u5358\u8a9e\u306e\u30aa\u30fc\u30c8\u30b3\u30f3\u30d7\u30ea\u30fc\u30c8\u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u307e\u3059\u3002\u30c8\u30e9\u30a4\u6728\u306b\u3064\u3044\u3066\u306f\u8aac\u660e\u3057\u306a\u3044\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u30ea\u30f3\u30af\u5148\u306e Wikipedia \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306e\u305f\u3081\u3001\u30c8\u30e9\u30a4\u6728\u306e\u30ad\u30fc (\u683c\u7d0d\u3059\u308b\u5358\u8a9e) \u306f\u82f1\u5c0f\u6587\u5b57\u3060\u3051\u3067\u69cb\u6210\u3055\u308c\u3001\u30ad\u30fc\u306b\u7d10\u4ed8\u3044\u305f\u5024\u306f\u7279\u306b\u306a\u3044\u3082\u306e\u3068\u3057\u307e\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30c8\u30e9\u30a4\u6728\u306e\u30ce\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u69cb\u9020\u4f53\u306b\u306a\u308a\u307e\u3059\u3002\n\nhello_trie.c\ntypedef struct TrieTypeNode {\n    uint8_t terminal;\n    struct TrieTypeNode* children[26];\n} TrieTypeNode;\n\n\nterminal \u304c\u30ad\u30fc\u306e\u7d42\u7aef\u3092\u8868\u3057\u3001children \u304c\u5404\u82f1\u5c0f\u6587\u5b57\u306e\u5bfe\u5fdc\u3059\u308b\u679d\u306b\u7e4b\u304c\u3063\u305f\u5b50\u30ce\u30fc\u30c9\u3067\u3059\u3002\n\u3053\u306e\u69cb\u9020\u4f53\u306b\u5bfe\u3057\u3066\u3001RedisModule_CreateDataType \u306b\u6e21\u3059\u5404\u7a2e\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u306f\u3001RDB \u304b\u3089\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\nhello_trie.c\n// \u518d\u5e30\u7684\u306b\u30c8\u30e9\u30a4\u6728\u3092 RDB \u304b\u3089\u8aad\u307f\u8fbc\u3080\nvoid HelloTrieType_LoadRecursive(RedisModuleIO *rdb, TrieTypeNode *n) {\n    // \u7d42\u7aef\u60c5\u5831\u3001\u3069\u306e\u679d\u306b\u5b50\u30ce\u30fc\u30c9\u304c\u3042\u308b\u304b\u306e\u60c5\u5831\u3092\u542b\u3093\u3060\u6574\u6570\u3092\u30ed\u30fc\u30c9\n    uint64_t u = RedisModule_LoadUnsigned(rdb);\n    n->terminal = u & 1;\n\n    TrieTypeNode** cursor = n->children;\n    while (u >>= 1) {\n        if (u & 1) {\n            // \u5b50\u30ce\u30fc\u30c9\u306e\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3068\u5b50\u30ce\u30fc\u30c9\u3092 RDB \u304b\u3089\u8aad\u307f\u8fbc\u3080\n            *cursor = RedisModule_Calloc(1, sizeof(**cursor));\n            HelloTrieType_LoadRecursive(rdb, *cursor);\n        }\n        ++cursor;\n    }\n}\n\nvoid *HelloTrieType_Load(RedisModuleIO *rdb, int encver) {\n    if (encver != 0) return NULL;\n\n    // \u30eb\u30fc\u30c8\u30ce\u30fc\u30c9\u306e\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3068 RDB \u304b\u3089\u8aad\u307f\u8fbc\u307f\n    TrieTypeNode *n = RedisModule_Calloc(1, sizeof(*n));\n    HelloTrieType_LoadRecursive(rdb, n);\n    return n;\n}\n\n\nRedisModule_Load* \u7cfb\u306e\u95a2\u6570\u3067\u3001RDB \u304b\u3089\u6574\u6570\u3001\u6587\u5b57\u5217\u3001\u6d6e\u52d5\u5c0f\u6570\u306a\u3069\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3001\u5f8c\u306f\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u5fa9\u53f7\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u3002\u307e\u305f\u3001\u305d\u306e\u969b\u306e\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u306b\u306f Redis \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b RedisModule_Alloc \u306a\u3069\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u4e00\u3064\u306e\u30ce\u30fc\u30c9\u304c\u7d42\u7aef\u304b\u3069\u3046\u304b\u3068\u3069\u306e 26 \u500b\u306e\u679d\u304c\u3042\u308b\u304b\u3068\u3044\u3046 27bit \u306e\u60c5\u5831\u3057\u304b\u6301\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u7b26\u53f7\u306a\u3057\u6574\u6570\u3067\u7b26\u53f7\u5316\u3057\u3066\u3044\u307e\u3059\u3002\nRDB \u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3001\u6b21\u306f RDB \u3078\u306e\u66f8\u304d\u8fbc\u307f\u95a2\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nhello_trie.c\nvoid HelloTrieType_Save(RedisModuleIO *rdb, void *value) {\n    TrieTypeNode *n = value;\n\n    // \u7d42\u7aef\u60c5\u5831\u3001\u5b50\u30ce\u30fc\u30c9\u60c5\u5831\u3092\u7b26\u53f7\u5316\n    uint64_t u = 0;\n    TrieTypeNode** cursor = n->children + 26;\n    while (cursor-- != n->children) {\n        if (*cursor) u |= 1;\n        u <<= 1;\n    }\n    u |= n->terminal;\n\n    // RDB \u306b\u66f8\u304d\u8fbc\u3080\n    RedisModule_SaveUnsigned(rdb, u);\n\n    // \u5b50\u30ce\u30fc\u30c9\u3082\u518d\u5e30\u7684\u306b\u66f8\u304d\u8fbc\u3080\n    while(u >>= 1) {\n        ++cursor;\n        if (u & 1) HelloTrieType_Save(rdb, *cursor);\n    }\n}\n\n\nRedisModule_Load* \u7cfb\u306e\u95a2\u6570\u3068\u5bfe\u306b\u306a\u308b RedisModule_Save* \u7cfb\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066 RDB \u306b\u66f8\u304d\u8fbc\u3080\u3060\u3051\u3067\u3059\u3002\n\u7d9a\u3044\u3066\u306f\u3001\u30c7\u30fc\u30bf\u3092 AOF \u306b\u66f8\u304d\u51fa\u3059\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\u3053\u3061\u3089\u306f\u3001\u66f8\u304d\u51fa\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u518d\u69cb\u7bc9\u3059\u308b\u3053\u3068\u306e\u3067\u304d\u308b Redis \u306e\u30b3\u30de\u30f3\u30c9\u5217\u3092\u5410\u304d\u51fa\u305b\u3070\u3088\u3044\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u5f8c\u3067\u5b9a\u7fa9\u3059\u308b\u30c8\u30e9\u30a4\u6728\u306b\u5358\u8a9e\u3092\u8ffd\u52a0\u3059\u308b\u30b3\u30de\u30f3\u30c9 hello.trie.insert \u3092\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\nhello_trie.c\nchar *HelloTrieType_RewriteRecursive(RedisModuleIO *aof, RedisModuleString *key, TrieTypeNode *n, char *buffer, int depth) {\n    // \u5358\u8a9e\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092\u5897\u3084\u3059\n    buffer = RedisModule_Realloc(buffer, sizeof(char) * (depth + 1));\n\n    // \u7d42\u7aef\u3060\u3063\u305f\u3089\u5358\u8a9e\u3092\u30c8\u30e9\u30a4\u6728\u306b\u8ffd\u52a0\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5410\u304f\n    if (n->terminal && depth > 0) {\n        buffer[depth] = '\\0';\n        RedisModule_EmitAOF(aof, \"hello.trie.insert\", \"sc\", key, buffer);\n    }\n\n    // \u5b50\u30ce\u30fc\u30c9\u3092\u518d\u5e30\u7684\u306b\u51e6\u7406\u3059\u308b\n    TrieTypeNode** cursor = n->children;\n    char ch = 'a';\n    while (cursor != n->children + 26) {\n        if (*cursor) {\n            buffer[depth] = ch;\n            buffer = HelloTrieType_RewriteRecursive(aof, key, *cursor, buffer, depth+1);\n        }\n        ++cursor;\n        ++ch;\n    }\n\n    return buffer;\n}\n\nvoid HelloTrieType_Rewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {\n    // \u5358\u8a9e\u7528\u306e\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u78ba\u4fdd\n    char *buffer = RedisModule_Calloc(1, sizeof(char));\n\n    buffer = HelloTrieType_RewriteRecursive(aof, key, value, buffer, 0);\n\n    // \u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3089\u3061\u3083\u3093\u3068\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092\u89e3\u653e\n    RedisModule_Free(buffer);\n}\n\n\n\u30c8\u30e9\u30a4\u6728\u306b\u8ffd\u52a0\u3059\u308b\u5358\u8a9e\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u6587\u5b57\u5217\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3066\u3001\u9069\u5b9c realloc \u3057\u3064\u3064\u51e6\u7406\u3092\u9032\u3081\u3066\u3044\u307e\u3059\u3002RedisModule_EmitAOF \u304c\u30b3\u30de\u30f3\u30c9\u3092\u66f8\u304d\u51fa\u3059\u95a2\u6570\u3067\u3001\u7b2c 2 \u5f15\u6570\u304c\u30b3\u30de\u30f3\u30c9\u540d\u3001\u7b2c 4 \u5f15\u6570\u4ee5\u964d\u304c\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u5f15\u6570\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 3 \u5f15\u6570\u306e\u8b0e\u306e \"sc\" \u304c\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u5f15\u6570\u5217\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3082\u306e\u3067\u3059\u3002s \u304c RedisModuleString \u3067\u3001c \u304c\u30cc\u30eb\u6587\u5b57\u3067\u7d42\u308f\u308b\u3044\u308f\u3086\u308b C \u306e\u6587\u5b57\u5217\u3067\u3059\u3002\u4ed6\u306b\u3082\u6574\u6570 l\u3001\u6587\u5b57\u5217\u306e\u914d\u5217 v \u306a\u3069\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u7d9a\u3044\u3066\u306f DEBUG DIGEST \u7528\u306e\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u95a2\u6570\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u3082\u305d\u3082 DEBUG DIGEST \u304c\u307e\u3060\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u4eca\u56de\u306f\u30b9\u30ad\u30c3\u30d7\u3067\uff01\n\nhello_trie.c\nvoid HelloTrieType_Digest(RedisModuleDigest *digest, void *value) {\n}\n\n\n\u305d\u3057\u3066\u3001\u6700\u5f8c\u304c\u30c8\u30e9\u30a4\u6728\u306e\u30e1\u30e2\u30ea\u3092\u958b\u653e\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\nhello_trie.c\nvoid HelloTrieType_Free(void *value) {\n    TrieTypeNode *n = value;\n\n    TrieTypeNode** cursor = n->children;\n    while (cursor != n->children + 26) {\n        if (*cursor) HelloTrieType_Free(*cursor);\n        ++cursor;\n    }\n    RedisModule_Free(n->children);\n    RedisModule_Free(n);\n}\n\n\n\u4ee5\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u3001RedisModule_CreateDataType \u3092 RedisModule_OnLoad \u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u6674\u308c\u3066\u72ec\u81ea\u30c7\u30fc\u30bf\u578b\u3092 Redis \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff01\n\nhello_trie.c\nstatic RedisModuleType *TrieType;\n\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    if (RedisModule_Init(ctx, \"hello\", 1, REDISMODULE_APIVER_1) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n\n    TrieType = RedisModule_CreateDataType(ctx, \"hellotrie\", 0, HelloTrieType_Load, HelloTrieType_Save,\n        HelloTrieType_Rewrite, HelloTrieType_Digest, HelloTrieType_Free);\n    if (TrieType == NULL)\n        return REDISMODULE_ERR;\n\n    // ...\n}\n\n\n\n\u30c8\u30e9\u30a4\u6728\u3092\u64cd\u4f5c\u3059\u308b\u30b3\u30de\u30f3\u30c9\n\u4ee5\u4e0a\u3067\u72ec\u81ea\u306e\u30c8\u30e9\u30a4\u6728\u306e\u30c7\u30fc\u30bf\u578b\u3092 Redis \u306e\u30e1\u30e2\u30ea\u3001RDB\u3001AOF \u3067\u53d6\u308a\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u5177\u4f53\u7684\u306b\u30c8\u30e9\u30a4\u6728\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u305d\u308d\u305d\u308d\u9577\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u30c8\u30e9\u30a4\u6728\u306b\u5358\u8a9e\u3092\u8ffd\u52a0\u3059\u308b hello.trie.insert \u3068\u5358\u8a9e\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u88dc\u5b8c\u3059\u308b hello.trie.complete \u306e\u4e8c\u3064\u3060\u3051\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u305d\u306e\u524d\u306b\u3001\u30c8\u30e9\u30a4\u6728\u3092\u64cd\u4f5c\u3059\u308b\u57fa\u672c\u7684\u306a\u95a2\u6570\u3092\u3044\u304f\u3064\u304b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nhello_trie.c\n// \u30c8\u30e9\u30a4\u6728\u306b\u5358\u8a9e\u3092\u8ffd\u52a0\u3059\u308b\nvoid TrieTypeInsert(TrieTypeNode *n, const char *word) {\n    while (*word) {\n        uint8_t i = *word - 'a';\n        if (!n->children[i])\n            n->children[i] = RedisModule_Calloc(1, sizeof(TrieTypeNode));\n        n = n->children[i];\n        ++word;\n    }\n    n->terminal = 1;\n}\n\n// \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u542b\u3080\u3001\u8f9e\u66f8\u9806\u3067\u6700\u521d\u306b\u898b\u3064\u304b\u308b\u5358\u8a9e\u3092\u8fd4\u3059\nchar *TrieTypeComplete(TrieTypeNode *n, const char *prefix, size_t len, char *result, size_t *newlen) {\n    *newlen = 0;\n    result = RedisModule_Realloc(result, sizeof(char) * (len + 1));\n\n    while (*prefix) {\n        n = n->children[*prefix - 'a'];\n        if (!n) return NULL;\n        result[(*newlen)++] = *(prefix++);\n    }\n\n    while (!n->terminal) {\n        result[*newlen] = 'a';\n\n        TrieTypeNode** cursor = n->children;\n        while (!*cursor) ++cursor, ++result[*newlen];\n\n        n = *cursor;\n        ++*newlen;\n        result = RedisModule_Realloc(result, sizeof(char) * (*newlen + 1));\n    }\n    result[*newlen] = '\\0';\n\n    return result;\n}\n\n\n\u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u30c8\u30e9\u30a4\u6728\u306e\u8a71\u3067\u3042\u3063\u3066\u3001Redis \u3042\u307e\u308a\u95a2\u4fc2\u306a\u3044\u306e\u3067\u8a73\u3057\u304f\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\u5f8c\u306f\u3001\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u4f7f\u3063\u305f Redis \u30b3\u30de\u30f3\u30c9\u306e\u672c\u4f53\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nhello.trie.insert\n\nhello_trie.c\n// hello.trie.insert KEY WORD\nint HelloTrieInsert_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    if (argc != 3) return RedisModule_WrongArity(ctx);\n\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ | REDISMODULE_WRITE);\n\n    // TYPE \u30b3\u30de\u30f3\u30c9\u3067 key \u306e\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\n    int type = RedisModule_KeyType(key);\n\n    // \u30ad\u30fc\u306e\u578b\u304c TrieType \u3058\u3083\u306a\u304b\u3063\u305f\u3089\u30a8\u30e9\u30fc\n    if (type != REDISMODULE_KEYTYPE_EMPTY && RedisModule_ModuleTypeGetType(key) != TrieType)\n        return RedisModule_ReplyWithError(ctx, REDISMODULE_ERRORMSG_WRONGTYPE);\n\n    TrieTypeNode *n;\n    if (type == REDISMODULE_KEYTYPE_EMPTY) {\n        // \u30ad\u30fc\u304c\u7a7a\u3060\u3063\u305f\u3089\u3001\u7a7a\u306e\u6728\u3092\u4f5c\u308b\n        n = RedisModule_Calloc(1, sizeof(*n));\n        RedisModule_ModuleTypeSetValue(key, TrieType, n);\n    } else {\n        // \u30ad\u30fc\u306b\u683c\u7d0d\u3055\u308c\u305f\u30c8\u30e9\u30a4\u6728\u3092\u53d6\u5f97\u3059\u308b\n        n = RedisModule_ModuleTypeGetValue(key);\n    }\n\n    // RedisModuleString \u304b\u3089 char* \u306b\u5909\u63db\n    size_t len;\n    const char *word = RedisModule_StringPtrLen(argv[2], &len);\n\n    // \u30c8\u30e9\u30a4\u6728\u306b\u5358\u8a9e\u3092\u8ffd\u52a0\n    TrieTypeInsert(n, word);\n\n    // \u8fd4\u308a\u5024\u306f\u3068\u308a\u3042\u3048\u305a NULL\n    RedisModule_ReplyWithNull(ctx);\n    RedisModule_CloseKey(key);\n\n    // \u30b3\u30de\u30f3\u30c9\u3092\u30b9\u30ec\u30fc\u30d6\u306b\u3082\u4f1d\u3048\u308b\n    RedisModule_ReplicateVerbatim(ctx);\n\n    return REDISMODULE_OK;\n}\n\n\n\u3053\u3053\u3067 RedisModule_ModuleTypeSetValue \u3084 RedisModule_ModuleTypeGetValue \u3092\u4f7f\u3063\u3066\u3001\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u30c8\u30e9\u30a4\u6728\u578b\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u305f\u308a\u3001\u53d6\u5f97\u3057\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001RedisModule_ReplicateVerbatim \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u30b3\u30de\u30f3\u30c9\u3092\u30b9\u30ec\u30fc\u30d6\u3067\u3082\u5b9f\u884c\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\nhello.trie.complete\n\nhello_trie.c\n// hello.trie.insert KEY PREFIX\nint HelloTrieComplete_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    if (argc != 3) return RedisModule_WrongArity(ctx);\n\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ);\n\n    int type = RedisModule_KeyType(key);\n    if (type != REDISMODULE_KEYTYPE_EMPTY && RedisModule_ModuleTypeGetType(key) != TrieType)\n        return RedisModule_ReplyWithError(ctx, REDISMODULE_ERRORMSG_WRONGTYPE);\n\n    TrieTypeNode *n;\n    if (type == REDISMODULE_KEYTYPE_EMPTY) {\n        // \u7a7a\u3060\u3063\u305f\u3089 NULL \u3092\u8fd4\u3059\n        RedisModule_ReplyWithNull(ctx);\n    } else {\n        n = RedisModule_ModuleTypeGetValue(key);\n\n        size_t len;\n        const char *prefix = RedisModule_StringPtrLen(argv[2], &len);\n\n        // \u88dc\u5b8c\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u9818\u57df\u306e\u78ba\u4fdd\n        char *result = RedisModule_Alloc(sizeof(char) * (len + 1));\n\n        if (result = TrieTypeComplete(n, prefix, len, result, &len)) {\n            // \u88dc\u5b8c\u306b\u6210\u529f\u3057\u305f\u3089\u305d\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3059\n            RedisModuleString *s = RedisModule_CreateString(ctx, result, len);\n            RedisModule_ReplyWithString(ctx, s);\n            RedisModule_Free(s);\n        } else {\n            // \u88dc\u5b8c\u3067\u304d\u306a\u304b\u3063\u305f\u3089 NULL \u3092\u8fd4\u3059\n            RedisModule_ReplyWithNull(ctx);\n        }\n\n        RedisModule_Free(result);\n    }\n\n    RedisModule_CloseKey(key);\n\n    return REDISMODULE_OK;\n}\n\n\n\u3053\u3061\u3089\u306f\u4eca\u307e\u3067\u898b\u3066\u304d\u305f\u95a2\u6570\u3092\u4f7f\u3063\u3066\u308b\u3060\u3051\u306a\u306e\u3067\u7279\u7b46\u3059\u3079\u304d\u3053\u3068\u306f\u306a\u3044\u3067\u3059\u3002\n\u3053\u308c\u3067\u3001\u30b3\u30de\u30f3\u30c9\u306e\u672c\u4f53\u3092\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3001\u5f8c\u306f\u3053\u308c\u3092\u30b3\u30de\u30f3\u30c9\u540d\u3068\u7d10\u4ed8\u3051\u308b\u3060\u3051\u3067\u3059\u3002\n\nhello_trie.c\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    // ...\n\n    if (RedisModule_CreateCommand(ctx, \"hello.trie.insert\",\n            HelloTrieInsert_RedisCommand, \"write deny-oom\", 1, 1, 1) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n\n    if (RedisModule_CreateCommand(ctx, \"hello.trie.complete\",\n            HelloTrieComplete_RedisCommand, \"readonly\", 1, 1, 1) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n\n    return REDISMODULE_OK;\n}\n\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n127.0.0.1:6379> hello.trie.insert trie hello\n(nil)\n127.0.0.1:6379> hello.trie.insert trie helloworld\n(nil)\n127.0.0.1:6379> hello.trie.complete trie he\n\"hello\"\n127.0.0.1:6379> hello.trie.complete trie helo\n(nil)\n127.0.0.1:6379> hello.trie.complete trie hello\n\"hello\"\n127.0.0.1:6379> hello.trie.complete trie hellow\n\"helloworld\"\n127.0.0.1:6379> hello.trie.complete trie world\n(nil)\n\n\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u308b\uff01RDB\u3001AOF\u3001\u30ec\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5468\u308a\u3082\u5168\u90e8\u3046\u307e\u304f\u884c\u3063\u3066\u3044\u308b(\u5b8c)\uff01\n\n\u307e\u3068\u3081\n\u4eca\u5f8c\u3069\u3046\u306a\u3063\u3066\u3044\u304f\u306e\u304b\u5168\u7136\u5206\u304b\u3089\u306a\u3044\u3067\u3059\u304c\u3001Redis \u30e2\u30b8\u30e5\u30fc\u30eb\u66f8\u304f\u306e\u697d\u3057\u304b\u3063\u305f\u3067\u3059\uff01\n\u4eca\u306a\u3089\u958b\u767a\u3057\u3066\u308b\u4eba\u3082\u5c11\u306a\u3044\u305d\u3046\u3060\u3057\u3001\u5c06\u6765\u30e1\u30b8\u30e3\u30fc\u306b\u306a\u308a\u3046\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308b\u3044\u3044\u30c1\u30e3\u30f3\u30b9\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30c8\u30e9\u30a4\u6728\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f hello/trie.c \u306b\u3042\u308a\u307e\u3059 (\u30b3\u30de\u30f3\u30c9\u304c\u591a\u304b\u3063\u305f\u308a\u5fae\u5999\u306b\u9055\u3044\u307e\u3059\u304c)\u3002\n\u3064\u3044\u306b Redis \u304c\u30ed\u30fc\u30c0\u30d6\u30eb\u30fb\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u5146\u3057\u3092\u898b\u305b\u3066\u3044\u307e\u3059\u3002Redis \u306e\u958b\u767a\u8005\u3067\u3042\u308b antirez \u6c0f\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b [Redis Loadable Modules System](http://antirez.com/news/106) \u3067 4 \u30f6\u6708\u307b\u3069\u524d\u306b\u7d39\u4ecb\u3055\u308c\u3001[antirez/redis](https://github.com/antirez/redis) \u306e `unstable` \u30d6\u30e9\u30f3\u30c1\u3067\u7cbe\u529b\u7684\u306b(??)\u958b\u767a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u904a\u3093\u3067\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u304b\u3089\u65e9 4 \u30f6\u6708\u3001\u3044\u3044\u52a0\u6e1b\u91cd\u3044\u8170\u3092\u4e0a\u3052\u3066\u4eca\u56de\u89e6\u3063\u3066\u307f\u305f\u306e\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## tl; dr\n\n- Redis \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u72ec\u81ea\u30c7\u30fc\u30bf\u578b\u4f5c\u308c\u308b\n- \u4eca\u56de\u306f\u30c8\u30e9\u30a4\u6728\u4f5c\u3063\u3066\u5358\u8a9e\u306e\u30aa\u30fc\u30c8\u30b3\u30f3\u30d7\u30ea\u30fc\u30c8\u3084\u3063\u3066\u307f\u305f\n    - \u6c38\u7d9a\u5316\u3084\u30ec\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3082\u7c21\u5358\u306b\u5bfe\u5fdc\u3067\u304d\u305f\n- \u5922\u304c\u5e83\u304c\u308b\n\n## Redis \u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u306f\n\nRedis \u306e\u52d5\u4f5c\u3092\u62e1\u5f35\u3059\u308b\u305f\u3081\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3001\u52d5\u7684\u306b\u30ed\u30fc\u30c9/\u30a2\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u9055\u3044\u306e Redis \u306b\u5bfe\u3057\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u4e92\u63db\u6027\u3092\u4fdd\u3066\u308b\u3088\u3046\u306b\u3001\u305d\u3057\u3066\u3001\u5f8c\u65b9\u4e92\u63db\u6027\u306e\u305f\u3081 Redis \u30b3\u30a2\u306e\u958b\u767a\u304c\u8db3\u3092\u5f15\u3063\u5f35\u3089\u308c\u306a\u3044\u3088\u3046\u306b\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306f Redis \u30b3\u30a2\u3068\u300c\u30e2\u30b8\u30e5\u30fc\u30eb API\u300d\u3092\u4ecb\u3057\u3066\u30c7\u30fc\u30bf\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b antirez \u6c0f\u306f API \u306e\u4e92\u63db\u6027\u3092\u6700\u91cd\u8981\u8996\u3057\u3066\u3044\u3066\u3001\u4eca\u65e5\u66f8\u3044\u305f\u30e2\u30b8\u30e5\u30fc\u30eb/\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u304c 4 \u5e74\u5f8c\u3082\u305d\u306e\u307e\u307e\u52d5\u304f/\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3001\u3068\u8a9e\u3063\u3066\u3044\u307e\u3059\u3002\u80cc\u666f\u3084\u601d\u60f3\u306a\u3069\u306b\u3064\u3044\u3066\u3001\u3055\u3089\u306b\u8a73\u3057\u3044\u3053\u3068\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u3001\u524d\u8ff0\u306e antirez \u6c0f\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3084 [antirez/redis \u30ec\u30dd\u30b8\u30c8\u30ea\u306e\u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3](https://github.com/antirez/redis/blob/unstable/src/modules/INTRO.md) (\u305f\u3060\u3057\u3042\u307e\u308a\u30e1\u30f3\u30c6\u3055\u308c\u3066\u306a\u3044) \u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u3082\u3089\u3048\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb API \u306b\u3064\u3044\u3066\u3082\u307e\u3060\u307e\u3060\u767a\u5c55\u9014\u4e0a\u3067\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u307e\u3068\u3082\u306b\u30e1\u30f3\u30c6\u3055\u308c\u3066\u306a\u3044\u306e\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u306e\u304c\u78ba\u5b9f\u3067\u3059\u3002\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f [src/redismodule.h](https://github.com/antirez/redis/blob/unstable/src/redismodule.h) \u306b\u3042\u308b\u3001`RedisModule_` \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3067\u59cb\u307e\u308b\u4e00\u898b\u95a2\u6570\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u306b\u898b\u3048\u308b\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u9054\u3067\u3059\u3002\u305d\u306e\u672c\u4f53\u306f [src/module.c](https://github.com/antirez/redis/blob/unstable/src/module.c) \u306b\u3042\u308b\u3001`RM_` \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3067\u59cb\u307e\u308b\u3001\u540c\u4e00\u306e\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u3082\u3064\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306f Redis \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u6642\u306b\u547c\u3070\u308c\u308b `RedisModule_Init` (\u307e\u305f\u5f8c\u3067\u89e6\u308c\u307e\u3059) \u306b\u3066\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u3053\u3046\u3044\u3046\u8a2d\u8a08\u306b\u3057\u305f\u306e\u306f `RedisModule_Init` \u95a2\u6570\u306b\u6e21\u3059\u30e2\u30b8\u30e5\u30fc\u30eb API \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5fdc\u3058\u3066\u95a2\u6570\u672c\u4f53\u3092\u5207\u308a\u66ff\u3048\u308b\u305f\u3081\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u305f\u3076\u3093\u3002\u3056\u30fc\u3063\u3068\u773a\u3081\u3066\u307f\u308b\u3068\u3001`RedisModule_ListPush`\u3001`RedisModule_ZsetFirstInScoreRange` \u3068\u304b `RedisModule_ReplyWithArray` \u307f\u305f\u3044\u306a\u305d\u308c\u3063\u307d\u3044\u95a2\u6570(\u30dd\u30a4\u30f3\u30bf)\u540d\u304c\u3042\u3063\u305f\u308a\u3001`RedisModule_CreateDataType` \u307f\u305f\u3044\u306a\u5fc3\u3068\u304d\u3081\u304f\u3082\u306e\u3082\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u7c21\u5358\u306a Redis \u30e2\u30b8\u30e5\u30fc\u30eb\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u3042\u308b\u30ea\u30b9\u30c8\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3060\u3051\u306e `hello.hoge` \u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u52d5\u304d\u307e\u3059\u3002\n\n```redis\n127.0.0.1:6379> get list\n(nil)\n127.0.0.1:6379> hello.hoge list\no\n127.0.0.1:6379> hello.hoge list\nm\n127.0.0.1:6379> lrange list 0 -1\n1) \"o\"\n2) \"m\"\n```\n\n\u4f55\u306e\u5f79\u306b\u3082\u7acb\u305f\u306a\u305d\u3046\u306a\u30b3\u30de\u30f3\u30c9\u3067\u3059\u304c\u3001\u30ad\u30fc\u3092\u4f7f\u3063\u305f Redis \u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8aad\u307f\u66f8\u304d\u3092\u3059\u308b\u7c21\u5358\u306a\u4f8b\u3068\u3057\u3066\u306f\u3042\u308a\u304b\u306a\u3001\u3068\u601d\u3063\u3066\u3053\u308c\u306b\u3057\u307e\u3057\u305f\u3002\n\n### hello.hoge \u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u88c5\n\n\u65e9\u901f\u3067\u3059\u304c\u3001\u30b3\u30de\u30f3\u30c9\u672c\u4f53\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\n```c:sample.c(\u524d\u534a)\n#include <stdlib.h>\n#include \"redismodule.h\"  // \u304a\u307e\u3058\u306a\u3044\n\n// hello.hoge \u30b3\u30de\u30f3\u30c9\u306e\u672c\u4f53\nint HelloHoge_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    // \u30a2\u30ea\u30c6\u30a3\u306e\u30c1\u30a7\u30c3\u30af\n    if (argc != 2) return RedisModule_WrongArity(ctx);\n\n    // \u30ad\u30fc\u3092 read/write \u3067\u958b\u304f\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ | REDISMODULE_WRITE);\n\n    // \u30e9\u30f3\u30c0\u30e0\u6587\u5b57\u4f5c\u308b\n    char string[] = \"a\";\n    string[0] += rand() % 26;\n\n    // lpush \u3067\u6587\u5b57\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u308b\n    if (RedisModule_ListPush(key, REDISMODULE_LIST_TAIL, RedisModule_CreateString(ctx, string, 1)) == REDISMODULE_ERR)\n      return REDISMODULE_ERR;\n\n    // \u751f\u6210\u3057\u305f\u30e9\u30f3\u30c0\u30e0\u6587\u5b57\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3059\n    if (RedisModule_ReplyWithSimpleString(ctx, string) == REDISMODULE_ERR)\n      return REDISMODULE_ERR;\n\n    // \u30ad\u30fc\u3092\u9589\u3058\u308b\n    RedisModule_CloseKey(key);\n\n    return REDISMODULE_OK;\n}\n```\n\n\u3056\u3063\u304f\u308a\u3057\u305f\u51e6\u7406\u306e\u6d41\u308c\u306f\u30a4\u30f3\u30e9\u30a4\u30f3\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304f\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u3001\u7d30\u304b\u3044\u90e8\u5206\u306e\u8aac\u660e\u306a\u3069\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\u95a2\u6570\u540d\u306f `#{\u30b3\u30de\u30f3\u30c9\u540d}_RedisCommand` \u306e\u3088\u3046\u306b\u547d\u540d\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u305d\u3057\u3066\u3001\u5f15\u6570\u306f\n\n- \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n  - \u3053\u308c\u306f Redis \u30b5\u30fc\u30d0\u304c\u547c\u3073\u51fa\u3057\u6642\u306b\u52dd\u624b\u306b\u6e21\u3057\u3066\u304f\u308c\u308b\n- \u4efb\u610f\u306e\u500b\u6570 (`argc` \u500b) \u306e\u6587\u5b57\u5217\n  - \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u767a\u884c\u3057\u305f\u30b3\u30de\u30f3\u30c9\u3068\u305d\u306e\u5f15\u6570\u6587\u5b57\u5217\n\n\u3068\u3044\u3046\u5f62\u5f0f\u306b\u7d71\u4e00\u3055\u308c\u3066\u3044\u307e\u3059\u3002`hello.hoge` \u30b3\u30de\u30f3\u30c9\u306f\u5f15\u6570\u3092 1 \u500b (\u30ea\u30b9\u30c8\u306e\u30ad\u30fc) \u53d6\u308b\u306e\u3067\u3001\u30b3\u30de\u30f3\u30c9\u540d\u3092\u542b\u3081\u3066 `argc` \u304c `2` \u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\n\nRedis \u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u306f\u3001\u6700\u521d\u306b `RedisModule_OpenKey` \u3068\u3044\u3046\u95a2\u6570\u3067\u30ad\u30fc\u3092 `open` \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u4e3b\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5468\u308a\u306e\u53d6\u308a\u6271\u3044\u306e\u305f\u3081\u307f\u305f\u3044\u3067\u3059 (\u8a73\u3057\u3044\u6240\u307e\u3067\u8aad\u3081\u3066\u306a\u3044\u3067\u3059\u304c)\u3002\u307e\u305f\u3001\u30ad\u30fc\u540d\u304b\u3089 Redis \u306e\u5185\u90e8\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u304c\u4e00\u56de\u3067\u3059\u3080\u3068\u3044\u3046\u5229\u70b9\u3082\u3042\u3063\u305f\u308a\u3057\u305d\u3046\u3067\u3059\u3002\u305d\u3057\u3066\u3001`open` \u3057\u305f\u30ad\u30fc\u306f `RedisModule_CloseKey` \u3067\u9589\u3058\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u81ea\u52d5\u30e1\u30e2\u30ea\u7ba1\u7406\u6a5f\u80fd\u3068\u3044\u3046\u3082\u306e\u3092 ON \u306b\u3057\u3066\u304a\u304f\u3068\u52dd\u624b\u306b\u9589\u3058\u305f\u308a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059 (\u304c\u307e\u3060\u3061\u3083\u3093\u3068\u8abf\u3079\u3066\u306a\u3044)\u3002\n\n`RedisModule_ListPush` \u306f `lpush` \u3067\u3059\u3002\u7b2c\u4e8c\u5f15\u6570\u3067\u30ea\u30b9\u30c8\u306e\u5148\u982d\u3068\u672b\u5c3e\u3069\u3061\u3089\u306b\u8ffd\u52a0\u3059\u308b\u304b\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001`RedisModule_ReplyWith*` \u7cfb\u306e\u95a2\u6570\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u306e\u8fd4\u308a\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\u6587\u5b57\u5217\u4ee5\u5916\u306b\u3082\u3001NULL\u3001\u6574\u6570\u3001\u914d\u5217 (\u591a\u6b21\u5143\u3082\u53ef)\u3001\u5c11\u6570\u306a\u3069\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u304c\u3001`hello.hoge` \u30b3\u30de\u30f3\u30c9\u672c\u4f53\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n### `hello.hoge` \u30b3\u30de\u30f3\u30c9\u306e\u767b\u9332\n\n\u30b3\u30de\u30f3\u30c9\u672c\u4f53\u304c\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3001\u5f8c\u306f\u3053\u308c\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30ed\u30fc\u30c9\u3055\u308c\u305f\u6642\u306b Redis \u306b\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u30ed\u30fc\u30c9\u6642\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8 `RedisModule_OnLoad` \u3067\u884c\u3044\u307e\u3059\u3002\n\n```c:sample.c(\u5f8c\u534a)\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    // \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u521d\u671f\u5316\n    if (RedisModule_Init(ctx, \"hello\", 1, REDISMODULE_APIVER_1) == REDISMODULE_ERR)\n      return REDISMODULE_ERR;\n\n    // hello.hoge \u30b3\u30de\u30f3\u30c9\u306e\u767b\u9332\n    if (RedisModule_CreateCommand(ctx, \"hello.hoge\", HelloHoge_RedisCommand, \"write deny-oom random fast\", 1, 1, 1) == REDISMODULE_ERR)\n      return REDISMODULE_ERR;\n\n    return REDISMODULE_OK;\n}\n```\n\n\u6700\u521d\u306b\u3001\u5192\u982d\u3067\u3061\u3087\u3063\u3068\u89e6\u308c\u305f `RedisModule_Init` \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u5f15\u6570\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3001\u30e2\u30b8\u30e5\u30fc\u30eb API \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001`RedisModule_CreateCommand` \u3067 `hello.hoge` \u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u540d\u306b\u5bfe\u3057\u3066\u30b3\u30de\u30f3\u30c9\u672c\u4f53 `HelloHoge_RedisCommand` \u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u7b2c 4 \u5f15\u6570\u4ee5\u964d\u306f\u305d\u308c\u305e\u308c\u3001\u30b3\u30de\u30f3\u30c9\u306e\u30d5\u30e9\u30b0\u3001\u5f15\u6570\u306e\u30ad\u30fc\u306e\u958b\u59cb\u4f4d\u7f6e\u3001\u7d42\u4e86\u4f4d\u7f6e\u3001\u30ad\u30fc\u306e\u9593\u9694\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306f\u591a\u5c90\u306b\u308f\u305f\u308b\u306e\u3067\u3001\u8a73\u3057\u304f\u306f [src/module.c](https://github.com/antirez/redis/blob/unstable/src/module.c) \u306e `RM_CreateCommand` \u306e\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002`hello.hoge` \u3067\u306f\u30ad\u30fc\u306f\u6700\u521d\u306e\u5f15\u6570\u4e00\u3064\u3060\u3051\u306a\u306e\u3067\u3001\u30ad\u30fc\u306e\u958b\u59cb\u4f4d\u7f6e\u3068\u7d42\u4e86\u4f4d\u7f6e\u306f\u5171\u306b `1` \u3067\u3001\u9593\u9694\u3082 `1` \u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30ad\u30fc\u3092\u5f15\u6570\u3068\u3057\u3066\u4e00\u5207\u53d6\u3089\u306a\u3044\u5834\u5408\u306f\u958b\u59cb\u4f4d\u7f6e\u3092 `0` \u3068\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n### \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\n\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9 `sample.c` \u3092\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002[redismodule.h](https://github.com/antirez/redis/blob/unstable/src/redismodule.h)\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306e\u3042\u308b\u5834\u6240\u306b\u304a\u3044\u3066\u3001\n\n```sh\ngcc -O2 -shared -fPIC sample.c -o libsample.so\n```\n\n\u3067\u30d3\u30eb\u30c9\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u305f\u3001Redis \u30b5\u30fc\u30d0\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3068\u5f53\u7136\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001[antirez/redis](https://github.com/antirez/redis) \u306e unstable \u30d6\u30e9\u30f3\u30c1\u3067 Redis \u3092\u30d3\u30eb\u30c9\u3057\u3066\u30b5\u30fc\u30d0\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\u305d\u3057\u3066\u3001`redis-cli` \u304b\u3089 `module load` \u30b3\u30de\u30f3\u30c9\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3001\u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```redis\n127.0.0.1:6379> module load \"/path/to/libsample.so\"\nOK\n127.0.0.1:6379> hello.hoge list\nx\n```\n\n\u307e\u305f\u3001\u6bce\u56de\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u5834\u5408\u306f\u3001`redis.conf` \u306b `loadmodule \"/path/to/libsample.so\"` \u3068\u66f8\u304f\u3068\u30b5\u30fc\u30d0\u8d77\u52d5\u6642\u306b\u81ea\u52d5\u7684\u306b\u8aad\u307f\u8fbc\u307e\u308c\u307e\u3059\u3002\n\n## \u3053\u3053\u304b\u3089\u304c\u672c\u7de8\n\n\u3055\u3066\u3001\u300cRedis \u30e2\u30b8\u30e5\u30fc\u30eb\u300d\u3068\u3044\u3046\u8a00\u8449\u3092\u805e\u3044\u305f\u6642\u3001\u304d\u3063\u3068\u8a00\u8449\u3067\u306f\u8a00\u3044\u8868\u305b\u306a\u3044\u300c\u3068\u304d\u3081\u304d\u300d\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u611f\u3058\u305f\u65b9\u304c\u591a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u578b\u3092\u3082\u3064\u3001\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3068\u3057\u3066\u306f\u3084\u3084\u7279\u6b8a\u306a Redis \u306b\u65b0\u305f\u306a\u72ec\u81ea\u30c7\u30fc\u30bf\u578b (\u30c4\u30ea\u30fc\u3001\u30b0\u30e9\u30d5\u3001\u8ee2\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306a\u3069\u306a\u3069) \u3092\u8ffd\u52a0\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3044\u3046\u3068\u304d\u3081\u304d\uff01\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3053\u306e\u7ae0\u3067\u306f\u5b9f\u969b\u306b\u65b0\u305f\u306a\u30c7\u30fc\u30bf\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n### \u72ec\u81ea\u30c7\u30fc\u30bf\u578b\u3092\u6271\u3046\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb API\n\n\u307e\u305a\u3001\u72ec\u81ea\u30c7\u30fc\u30bf\u578b\u3092\u6271\u3046\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb API \u306b\u3064\u3044\u3066\u4e00\u901a\u308a\u7c21\u5358\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\n#### `RedisModule_CreateDataType`\n\n\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u95a2\u6570\u3067\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8 `RedisModule_OnLoad` \u3067\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u3092\u5f15\u6570\u306b\u53d6\u308a\u307e\u3059\u3002\n\n- \u578b\u306e\u8b58\u5225\u5b50 (\u4f55\u6545\u304b 9 \u6587\u5b57\u56fa\u5b9a)\u3002`TYPE` \u30b3\u30de\u30f3\u30c9\u3067\u8fd4\u3063\u3066\u304d\u305f\u308a\u3059\u308b\u5024\n- \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n- RDB \u304b\u3089\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570\n- \u30c7\u30fc\u30bf\u3092 RDB \u306b\u30bb\u30fc\u30d6\u3059\u308b\u95a2\u6570\n- \u30c7\u30fc\u30bf\u3092 AOF \u306b\u66f8\u304d\u51fa\u3059\u95a2\u6570\n- `DEBUG DIGEST` \u30b3\u30de\u30f3\u30c9\u7528\u306e\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u95a2\u6570\n- \u30c7\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u958b\u653e\u3059\u308b\u95a2\u6570\n\n\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3068\u3057\u3066\u3001`RedisModuleType` \u3092\u8fd4\u3057\u3066\u304d\u307e\u3059\u3002\u3053\u306e\u8fd4\u308a\u5024\u306f\u30ad\u30fc\u306e\u578b\u30c1\u30a7\u30c3\u30af\u3084\u3001\u30ad\u30fc\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3059\u308b\u969b\u306b\u4f7f\u3046\u305f\u3081\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306a\u3069\u306b\u683c\u7d0d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n#### `RedisModule_ModuleTypeGetType`\n\n\u3042\u308b\u30ad\u30fc\u306e `RedisModuleType` \u3092\u8fd4\u3057\u307e\u3059\u3002\u524d\u8ff0\u306e\u30ad\u30fc\u306e\u578b\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n#### `RedisModule_ModuleTypeSetValue`, `RedisModule_ModuleTypeGetValue`\n\n\u3042\u308b\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u3001\u5b9a\u7fa9\u3057\u305f\u578b\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u305f\u308a\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\n\n### \u30c8\u30e9\u30a4\u6728\n\n\u4eca\u56de\u5b9f\u88c5\u3057\u3066\u307f\u308b\u30c7\u30fc\u30bf\u578b\u306f[\u30c8\u30e9\u30a4\u6728](https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%82%A4%E6%9C%A8)\u3067\u3001\u3072\u3068\u307e\u305a\u5358\u8a9e\u306e\u30aa\u30fc\u30c8\u30b3\u30f3\u30d7\u30ea\u30fc\u30c8\u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u307e\u3059\u3002\u30c8\u30e9\u30a4\u6728\u306b\u3064\u3044\u3066\u306f\u8aac\u660e\u3057\u306a\u3044\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u30ea\u30f3\u30af\u5148\u306e Wikipedia \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306e\u305f\u3081\u3001\u30c8\u30e9\u30a4\u6728\u306e\u30ad\u30fc (\u683c\u7d0d\u3059\u308b\u5358\u8a9e) \u306f\u82f1\u5c0f\u6587\u5b57\u3060\u3051\u3067\u69cb\u6210\u3055\u308c\u3001\u30ad\u30fc\u306b\u7d10\u4ed8\u3044\u305f\u5024\u306f\u7279\u306b\u306a\u3044\u3082\u306e\u3068\u3057\u307e\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30c8\u30e9\u30a4\u6728\u306e\u30ce\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u69cb\u9020\u4f53\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c:hello_trie.c\ntypedef struct TrieTypeNode {\n    uint8_t terminal;\n    struct TrieTypeNode* children[26];\n} TrieTypeNode;\n```\n\n`terminal` \u304c\u30ad\u30fc\u306e\u7d42\u7aef\u3092\u8868\u3057\u3001`children` \u304c\u5404\u82f1\u5c0f\u6587\u5b57\u306e\u5bfe\u5fdc\u3059\u308b\u679d\u306b\u7e4b\u304c\u3063\u305f\u5b50\u30ce\u30fc\u30c9\u3067\u3059\u3002\n\n\u3053\u306e\u69cb\u9020\u4f53\u306b\u5bfe\u3057\u3066\u3001`RedisModule_CreateDataType` \u306b\u6e21\u3059\u5404\u7a2e\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u306f\u3001RDB \u304b\u3089\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n```c:hello_trie.c\n// \u518d\u5e30\u7684\u306b\u30c8\u30e9\u30a4\u6728\u3092 RDB \u304b\u3089\u8aad\u307f\u8fbc\u3080\nvoid HelloTrieType_LoadRecursive(RedisModuleIO *rdb, TrieTypeNode *n) {\n    // \u7d42\u7aef\u60c5\u5831\u3001\u3069\u306e\u679d\u306b\u5b50\u30ce\u30fc\u30c9\u304c\u3042\u308b\u304b\u306e\u60c5\u5831\u3092\u542b\u3093\u3060\u6574\u6570\u3092\u30ed\u30fc\u30c9\n    uint64_t u = RedisModule_LoadUnsigned(rdb);\n    n->terminal = u & 1;\n\n    TrieTypeNode** cursor = n->children;\n    while (u >>= 1) {\n        if (u & 1) {\n            // \u5b50\u30ce\u30fc\u30c9\u306e\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3068\u5b50\u30ce\u30fc\u30c9\u3092 RDB \u304b\u3089\u8aad\u307f\u8fbc\u3080\n            *cursor = RedisModule_Calloc(1, sizeof(**cursor));\n            HelloTrieType_LoadRecursive(rdb, *cursor);\n        }\n        ++cursor;\n    }\n}\n\nvoid *HelloTrieType_Load(RedisModuleIO *rdb, int encver) {\n    if (encver != 0) return NULL;\n\n    // \u30eb\u30fc\u30c8\u30ce\u30fc\u30c9\u306e\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3068 RDB \u304b\u3089\u8aad\u307f\u8fbc\u307f\n    TrieTypeNode *n = RedisModule_Calloc(1, sizeof(*n));\n    HelloTrieType_LoadRecursive(rdb, n);\n    return n;\n}\n```\n\n`RedisModule_Load*` \u7cfb\u306e\u95a2\u6570\u3067\u3001RDB \u304b\u3089\u6574\u6570\u3001\u6587\u5b57\u5217\u3001\u6d6e\u52d5\u5c0f\u6570\u306a\u3069\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3001\u5f8c\u306f\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u5fa9\u53f7\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u3002\u307e\u305f\u3001\u305d\u306e\u969b\u306e\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u306b\u306f Redis \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b `RedisModule_Alloc` \u306a\u3069\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u4e00\u3064\u306e\u30ce\u30fc\u30c9\u304c\u7d42\u7aef\u304b\u3069\u3046\u304b\u3068\u3069\u306e 26 \u500b\u306e\u679d\u304c\u3042\u308b\u304b\u3068\u3044\u3046 27bit \u306e\u60c5\u5831\u3057\u304b\u6301\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u7b26\u53f7\u306a\u3057\u6574\u6570\u3067\u7b26\u53f7\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\nRDB \u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3001\u6b21\u306f RDB \u3078\u306e\u66f8\u304d\u8fbc\u307f\u95a2\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:hello_trie.c\nvoid HelloTrieType_Save(RedisModuleIO *rdb, void *value) {\n    TrieTypeNode *n = value;\n\n    // \u7d42\u7aef\u60c5\u5831\u3001\u5b50\u30ce\u30fc\u30c9\u60c5\u5831\u3092\u7b26\u53f7\u5316\n    uint64_t u = 0;\n    TrieTypeNode** cursor = n->children + 26;\n    while (cursor-- != n->children) {\n        if (*cursor) u |= 1;\n        u <<= 1;\n    }\n    u |= n->terminal;\n\n    // RDB \u306b\u66f8\u304d\u8fbc\u3080\n    RedisModule_SaveUnsigned(rdb, u);\n\n    // \u5b50\u30ce\u30fc\u30c9\u3082\u518d\u5e30\u7684\u306b\u66f8\u304d\u8fbc\u3080\n    while(u >>= 1) {\n        ++cursor;\n        if (u & 1) HelloTrieType_Save(rdb, *cursor);\n    }\n}\n```\n\n`RedisModule_Load*` \u7cfb\u306e\u95a2\u6570\u3068\u5bfe\u306b\u306a\u308b `RedisModule_Save*` \u7cfb\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066 RDB \u306b\u66f8\u304d\u8fbc\u3080\u3060\u3051\u3067\u3059\u3002\n\n\u7d9a\u3044\u3066\u306f\u3001\u30c7\u30fc\u30bf\u3092 AOF \u306b\u66f8\u304d\u51fa\u3059\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\u3053\u3061\u3089\u306f\u3001\u66f8\u304d\u51fa\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u518d\u69cb\u7bc9\u3059\u308b\u3053\u3068\u306e\u3067\u304d\u308b Redis \u306e\u30b3\u30de\u30f3\u30c9\u5217\u3092\u5410\u304d\u51fa\u305b\u3070\u3088\u3044\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u5f8c\u3067\u5b9a\u7fa9\u3059\u308b\u30c8\u30e9\u30a4\u6728\u306b\u5358\u8a9e\u3092\u8ffd\u52a0\u3059\u308b\u30b3\u30de\u30f3\u30c9 `hello.trie.insert` \u3092\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c:hello_trie.c\nchar *HelloTrieType_RewriteRecursive(RedisModuleIO *aof, RedisModuleString *key, TrieTypeNode *n, char *buffer, int depth) {\n    // \u5358\u8a9e\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092\u5897\u3084\u3059\n    buffer = RedisModule_Realloc(buffer, sizeof(char) * (depth + 1));\n\n    // \u7d42\u7aef\u3060\u3063\u305f\u3089\u5358\u8a9e\u3092\u30c8\u30e9\u30a4\u6728\u306b\u8ffd\u52a0\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5410\u304f\n    if (n->terminal && depth > 0) {\n        buffer[depth] = '\\0';\n        RedisModule_EmitAOF(aof, \"hello.trie.insert\", \"sc\", key, buffer);\n    }\n\n    // \u5b50\u30ce\u30fc\u30c9\u3092\u518d\u5e30\u7684\u306b\u51e6\u7406\u3059\u308b\n    TrieTypeNode** cursor = n->children;\n    char ch = 'a';\n    while (cursor != n->children + 26) {\n        if (*cursor) {\n            buffer[depth] = ch;\n            buffer = HelloTrieType_RewriteRecursive(aof, key, *cursor, buffer, depth+1);\n        }\n        ++cursor;\n        ++ch;\n    }\n\n    return buffer;\n}\n\nvoid HelloTrieType_Rewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {\n    // \u5358\u8a9e\u7528\u306e\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u78ba\u4fdd\n    char *buffer = RedisModule_Calloc(1, sizeof(char));\n\n    buffer = HelloTrieType_RewriteRecursive(aof, key, value, buffer, 0);\n\n    // \u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3089\u3061\u3083\u3093\u3068\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092\u89e3\u653e\n    RedisModule_Free(buffer);\n}\n```\n\n\u30c8\u30e9\u30a4\u6728\u306b\u8ffd\u52a0\u3059\u308b\u5358\u8a9e\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u6587\u5b57\u5217\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3066\u3001\u9069\u5b9c `realloc` \u3057\u3064\u3064\u51e6\u7406\u3092\u9032\u3081\u3066\u3044\u307e\u3059\u3002`RedisModule_EmitAOF` \u304c\u30b3\u30de\u30f3\u30c9\u3092\u66f8\u304d\u51fa\u3059\u95a2\u6570\u3067\u3001\u7b2c 2 \u5f15\u6570\u304c\u30b3\u30de\u30f3\u30c9\u540d\u3001\u7b2c 4 \u5f15\u6570\u4ee5\u964d\u304c\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u5f15\u6570\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 3 \u5f15\u6570\u306e\u8b0e\u306e `\"sc\"` \u304c\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u5f15\u6570\u5217\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3082\u306e\u3067\u3059\u3002`s` \u304c `RedisModuleString` \u3067\u3001`c` \u304c\u30cc\u30eb\u6587\u5b57\u3067\u7d42\u308f\u308b\u3044\u308f\u3086\u308b C \u306e\u6587\u5b57\u5217\u3067\u3059\u3002\u4ed6\u306b\u3082\u6574\u6570 `l`\u3001\u6587\u5b57\u5217\u306e\u914d\u5217 `v` \u306a\u3069\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u7d9a\u3044\u3066\u306f `DEBUG DIGEST` \u7528\u306e\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u95a2\u6570\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u3082\u305d\u3082 `DEBUG DIGEST` \u304c\u307e\u3060\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u4eca\u56de\u306f\u30b9\u30ad\u30c3\u30d7\u3067\uff01\n\n```c:hello_trie.c\nvoid HelloTrieType_Digest(RedisModuleDigest *digest, void *value) {\n}\n```\n\n\u305d\u3057\u3066\u3001\u6700\u5f8c\u304c\u30c8\u30e9\u30a4\u6728\u306e\u30e1\u30e2\u30ea\u3092\u958b\u653e\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n```c:hello_trie.c\nvoid HelloTrieType_Free(void *value) {\n    TrieTypeNode *n = value;\n\n    TrieTypeNode** cursor = n->children;\n    while (cursor != n->children + 26) {\n        if (*cursor) HelloTrieType_Free(*cursor);\n        ++cursor;\n    }\n    RedisModule_Free(n->children);\n    RedisModule_Free(n);\n}\n```\n\n\u4ee5\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u3001`RedisModule_CreateDataType` \u3092 `RedisModule_OnLoad` \u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u6674\u308c\u3066\u72ec\u81ea\u30c7\u30fc\u30bf\u578b\u3092 Redis \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff01\n\n```c:hello_trie.c\nstatic RedisModuleType *TrieType;\n\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    if (RedisModule_Init(ctx, \"hello\", 1, REDISMODULE_APIVER_1) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n\n    TrieType = RedisModule_CreateDataType(ctx, \"hellotrie\", 0, HelloTrieType_Load, HelloTrieType_Save,\n        HelloTrieType_Rewrite, HelloTrieType_Digest, HelloTrieType_Free);\n    if (TrieType == NULL)\n        return REDISMODULE_ERR;\n\n    // ...\n}\n```\n\n### \u30c8\u30e9\u30a4\u6728\u3092\u64cd\u4f5c\u3059\u308b\u30b3\u30de\u30f3\u30c9\n\n\u4ee5\u4e0a\u3067\u72ec\u81ea\u306e\u30c8\u30e9\u30a4\u6728\u306e\u30c7\u30fc\u30bf\u578b\u3092 Redis \u306e\u30e1\u30e2\u30ea\u3001RDB\u3001AOF \u3067\u53d6\u308a\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u5177\u4f53\u7684\u306b\u30c8\u30e9\u30a4\u6728\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u305d\u308d\u305d\u308d\u9577\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u30c8\u30e9\u30a4\u6728\u306b\u5358\u8a9e\u3092\u8ffd\u52a0\u3059\u308b `hello.trie.insert` \u3068\u5358\u8a9e\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u88dc\u5b8c\u3059\u308b `hello.trie.complete` \u306e\u4e8c\u3064\u3060\u3051\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u305d\u306e\u524d\u306b\u3001\u30c8\u30e9\u30a4\u6728\u3092\u64cd\u4f5c\u3059\u308b\u57fa\u672c\u7684\u306a\u95a2\u6570\u3092\u3044\u304f\u3064\u304b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```c:hello_trie.c\n// \u30c8\u30e9\u30a4\u6728\u306b\u5358\u8a9e\u3092\u8ffd\u52a0\u3059\u308b\nvoid TrieTypeInsert(TrieTypeNode *n, const char *word) {\n    while (*word) {\n        uint8_t i = *word - 'a';\n        if (!n->children[i])\n            n->children[i] = RedisModule_Calloc(1, sizeof(TrieTypeNode));\n        n = n->children[i];\n        ++word;\n    }\n    n->terminal = 1;\n}\n\n// \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u542b\u3080\u3001\u8f9e\u66f8\u9806\u3067\u6700\u521d\u306b\u898b\u3064\u304b\u308b\u5358\u8a9e\u3092\u8fd4\u3059\nchar *TrieTypeComplete(TrieTypeNode *n, const char *prefix, size_t len, char *result, size_t *newlen) {\n    *newlen = 0;\n    result = RedisModule_Realloc(result, sizeof(char) * (len + 1));\n\n    while (*prefix) {\n        n = n->children[*prefix - 'a'];\n        if (!n) return NULL;\n        result[(*newlen)++] = *(prefix++);\n    }\n\n    while (!n->terminal) {\n        result[*newlen] = 'a';\n\n        TrieTypeNode** cursor = n->children;\n        while (!*cursor) ++cursor, ++result[*newlen];\n\n        n = *cursor;\n        ++*newlen;\n        result = RedisModule_Realloc(result, sizeof(char) * (*newlen + 1));\n    }\n    result[*newlen] = '\\0';\n\n    return result;\n}\n```\n\n\u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u30c8\u30e9\u30a4\u6728\u306e\u8a71\u3067\u3042\u3063\u3066\u3001Redis \u3042\u307e\u308a\u95a2\u4fc2\u306a\u3044\u306e\u3067\u8a73\u3057\u304f\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\u5f8c\u306f\u3001\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u4f7f\u3063\u305f Redis \u30b3\u30de\u30f3\u30c9\u306e\u672c\u4f53\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n#### hello.trie.insert\n\n```c:hello_trie.c\n// hello.trie.insert KEY WORD\nint HelloTrieInsert_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    if (argc != 3) return RedisModule_WrongArity(ctx);\n\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ | REDISMODULE_WRITE);\n\n    // TYPE \u30b3\u30de\u30f3\u30c9\u3067 key \u306e\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\n    int type = RedisModule_KeyType(key);\n\n    // \u30ad\u30fc\u306e\u578b\u304c TrieType \u3058\u3083\u306a\u304b\u3063\u305f\u3089\u30a8\u30e9\u30fc\n    if (type != REDISMODULE_KEYTYPE_EMPTY && RedisModule_ModuleTypeGetType(key) != TrieType)\n        return RedisModule_ReplyWithError(ctx, REDISMODULE_ERRORMSG_WRONGTYPE);\n\n    TrieTypeNode *n;\n    if (type == REDISMODULE_KEYTYPE_EMPTY) {\n        // \u30ad\u30fc\u304c\u7a7a\u3060\u3063\u305f\u3089\u3001\u7a7a\u306e\u6728\u3092\u4f5c\u308b\n        n = RedisModule_Calloc(1, sizeof(*n));\n        RedisModule_ModuleTypeSetValue(key, TrieType, n);\n    } else {\n        // \u30ad\u30fc\u306b\u683c\u7d0d\u3055\u308c\u305f\u30c8\u30e9\u30a4\u6728\u3092\u53d6\u5f97\u3059\u308b\n        n = RedisModule_ModuleTypeGetValue(key);\n    }\n\n    // RedisModuleString \u304b\u3089 char* \u306b\u5909\u63db\n    size_t len;\n    const char *word = RedisModule_StringPtrLen(argv[2], &len);\n\n    // \u30c8\u30e9\u30a4\u6728\u306b\u5358\u8a9e\u3092\u8ffd\u52a0\n    TrieTypeInsert(n, word);\n\n    // \u8fd4\u308a\u5024\u306f\u3068\u308a\u3042\u3048\u305a NULL\n    RedisModule_ReplyWithNull(ctx);\n    RedisModule_CloseKey(key);\n\n    // \u30b3\u30de\u30f3\u30c9\u3092\u30b9\u30ec\u30fc\u30d6\u306b\u3082\u4f1d\u3048\u308b\n    RedisModule_ReplicateVerbatim(ctx);\n\n    return REDISMODULE_OK;\n}\n```\n\n\u3053\u3053\u3067 `RedisModule_ModuleTypeSetValue` \u3084 `RedisModule_ModuleTypeGetValue` \u3092\u4f7f\u3063\u3066\u3001\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u30c8\u30e9\u30a4\u6728\u578b\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u305f\u308a\u3001\u53d6\u5f97\u3057\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001`RedisModule_ReplicateVerbatim` \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u30b3\u30de\u30f3\u30c9\u3092\u30b9\u30ec\u30fc\u30d6\u3067\u3082\u5b9f\u884c\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n#### hello.trie.complete\n\n```c:hello_trie.c\n// hello.trie.insert KEY PREFIX\nint HelloTrieComplete_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    if (argc != 3) return RedisModule_WrongArity(ctx);\n\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ);\n\n    int type = RedisModule_KeyType(key);\n    if (type != REDISMODULE_KEYTYPE_EMPTY && RedisModule_ModuleTypeGetType(key) != TrieType)\n        return RedisModule_ReplyWithError(ctx, REDISMODULE_ERRORMSG_WRONGTYPE);\n\n    TrieTypeNode *n;\n    if (type == REDISMODULE_KEYTYPE_EMPTY) {\n        // \u7a7a\u3060\u3063\u305f\u3089 NULL \u3092\u8fd4\u3059\n        RedisModule_ReplyWithNull(ctx);\n    } else {\n        n = RedisModule_ModuleTypeGetValue(key);\n\n        size_t len;\n        const char *prefix = RedisModule_StringPtrLen(argv[2], &len);\n\n        // \u88dc\u5b8c\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u9818\u57df\u306e\u78ba\u4fdd\n        char *result = RedisModule_Alloc(sizeof(char) * (len + 1));\n\n        if (result = TrieTypeComplete(n, prefix, len, result, &len)) {\n            // \u88dc\u5b8c\u306b\u6210\u529f\u3057\u305f\u3089\u305d\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3059\n            RedisModuleString *s = RedisModule_CreateString(ctx, result, len);\n            RedisModule_ReplyWithString(ctx, s);\n            RedisModule_Free(s);\n        } else {\n            // \u88dc\u5b8c\u3067\u304d\u306a\u304b\u3063\u305f\u3089 NULL \u3092\u8fd4\u3059\n            RedisModule_ReplyWithNull(ctx);\n        }\n\n        RedisModule_Free(result);\n    }\n\n    RedisModule_CloseKey(key);\n\n    return REDISMODULE_OK;\n}\n```\n\n\u3053\u3061\u3089\u306f\u4eca\u307e\u3067\u898b\u3066\u304d\u305f\u95a2\u6570\u3092\u4f7f\u3063\u3066\u308b\u3060\u3051\u306a\u306e\u3067\u7279\u7b46\u3059\u3079\u304d\u3053\u3068\u306f\u306a\u3044\u3067\u3059\u3002\n\n\u3053\u308c\u3067\u3001\u30b3\u30de\u30f3\u30c9\u306e\u672c\u4f53\u3092\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3001\u5f8c\u306f\u3053\u308c\u3092\u30b3\u30de\u30f3\u30c9\u540d\u3068\u7d10\u4ed8\u3051\u308b\u3060\u3051\u3067\u3059\u3002\n\n```c:hello_trie.c\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    // ...\n\n    if (RedisModule_CreateCommand(ctx, \"hello.trie.insert\",\n            HelloTrieInsert_RedisCommand, \"write deny-oom\", 1, 1, 1) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n  \n    if (RedisModule_CreateCommand(ctx, \"hello.trie.complete\",\n            HelloTrieComplete_RedisCommand, \"readonly\", 1, 1, 1) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n\n    return REDISMODULE_OK;\n}\n```\n\n### \u52d5\u4f5c\u78ba\u8a8d\n\n```redis\n127.0.0.1:6379> hello.trie.insert trie hello\n(nil)\n127.0.0.1:6379> hello.trie.insert trie helloworld\n(nil)\n127.0.0.1:6379> hello.trie.complete trie he\n\"hello\"\n127.0.0.1:6379> hello.trie.complete trie helo\n(nil)\n127.0.0.1:6379> hello.trie.complete trie hello\n\"hello\"\n127.0.0.1:6379> hello.trie.complete trie hellow\n\"helloworld\"\n127.0.0.1:6379> hello.trie.complete trie world\n(nil)\n```\n\n\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u308b\uff01RDB\u3001AOF\u3001\u30ec\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5468\u308a\u3082\u5168\u90e8\u3046\u307e\u304f\u884c\u3063\u3066\u3044\u308b(\u5b8c)\uff01\n\n## \u307e\u3068\u3081\n\n\u4eca\u5f8c\u3069\u3046\u306a\u3063\u3066\u3044\u304f\u306e\u304b\u5168\u7136\u5206\u304b\u3089\u306a\u3044\u3067\u3059\u304c\u3001Redis \u30e2\u30b8\u30e5\u30fc\u30eb\u66f8\u304f\u306e\u697d\u3057\u304b\u3063\u305f\u3067\u3059\uff01\n\u4eca\u306a\u3089\u958b\u767a\u3057\u3066\u308b\u4eba\u3082\u5c11\u306a\u3044\u305d\u3046\u3060\u3057\u3001\u5c06\u6765\u30e1\u30b8\u30e3\u30fc\u306b\u306a\u308a\u3046\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308b\u3044\u3044\u30c1\u30e3\u30f3\u30b9\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30c8\u30e9\u30a4\u6728\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f [hello/trie.c](https://github.com/saidie/redis_modules/blob/b96ffdfef96f3a0067149b762194ec1be88db076/hello/trie.c) \u306b\u3042\u308a\u307e\u3059 (\u30b3\u30de\u30f3\u30c9\u304c\u591a\u304b\u3063\u305f\u308a\u5fae\u5999\u306b\u9055\u3044\u307e\u3059\u304c)\u3002\n", "tags": ["Redis", "\u30c7\u30fc\u30bf\u69cb\u9020", "nosql", "C"]}