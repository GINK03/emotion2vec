{"tags": ["openssl", "RSA", "C#"], "context": "OpenSSL\u3067\u4f5c\u6210\u3057\u305fRSA\u6697\u53f7\u9375(.pem)\u3092\u3001C#\u3067\u8aad\u307f\u8fbc\u3080\u306b\u306f\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u305d\u306e\u307e\u307e\u306e\u5185\u5bb9\u3067\u8aad\u307f\u8fbc\u3080\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002\n\u539f\u56e0\u306f\u308f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u30b9\u30de\u30fc\u30c8\u306a\u89e3\u6c7a\u7b56\u304c\u898b\u3064\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u5185\u5bb9\u3092\u898b\u3066\u3001\u3082\u3057\u52a9\u8a00\u3044\u305f\u3060\u3051\u308c\u3070\u3001\u3082\u308c\u306a\u304f\u79c1\u306e\u4e0a\u53f8\u304c\u30a2\u30a4\u30b9\u3092\u30d7\u30ec\u30bc\u30f3\u30c8\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001\u8abf\u67fb\u7d50\u679c\u3067\u3059\u3002\n\n1. \u307e\u305a\u79d8\u5bc6\u9375\u3092\u4f5c\u6210\nopenssl genrsa > private-key.pem\n\n-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC7Np2qTFhnZD0meg7OqzPMLzQjZLhCjLpmVoeTPAaeTpvQij0r\nEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsAmd+WRsbCowGfpmukG7X0bEp7\nXIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRuvJhvsf4kmadrHIGXuQIDAQAB\nAoGACJHfdcQ458K26eP8eYlsvZQLlvMtXB6FCdo8Kok85FJE3670Tdxau5zfiA/T\n2JIBzhtHbRCV3JLmp6NS1EHgwiOVgohrzLj2QME+pN05Kxs+d8snfyl+izmuluV/\n4qfOEcq1q3BiKI5jjrF78vVJzkRJNN/xLDxfk+duXYxnHeECQQDoQCcVGRKThyDp\ncD/flayKf0ejtfKFZieTkOcKmU5zNdACDu7QgvcgwA2emu/cH/yFIExzPcg6vAXc\ncXAg6CLTAkEAzlt6zfaLfGGeWrp+2W+J9svrc060ckeFRzDHiwWA/T3c/F1fjCDs\nB2qouZuRWxSQJ5XTro4uKRvd+GjBZxALwwJAC5+qVRP8KgYJT6WejMIg8I2OOFNS\n3/pM4MXPymgB1SJMVs4IhccIN0tlYxq+BnZTXRZQvTPKYaYnZPEIe50ioQJBALe0\nmrvWu1BsexPcKOcbM+Ago6gQLfX6k7zPwSSTLsTDmQKVgWT3PghQPIqX4qwJv1du\nO3ePHar9IvttDpfYog8CQAMy9RiFqJ3K/St4iVZizsoeG/GAa+o/kKiTjK4+wnox\nUdkJEZh/7lkKbw9h2CVURIjUitmKDrfjkeJ7GsdKvAM=\n-----END RSA PRIVATE KEY-----\n\n\u4e2d\u3092\u8997\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nPrivate-Key: (1024 bit)\nmodulus:\n    00:bb:36:9d:aa:4c:58:67:64:3d:26:7a:0e:ce:ab:\n    33:cc:2f:34:23:64:b8:42:8c:ba:66:56:87:93:3c:\n    06:9e:4e:9b:d0:8a:3d:2b:10:6f:45:99:2f:86:6e:\n    3e:28:18:18:95:f0:16:8e:ad:a5:a5:45:39:8f:87:\n    60:e7:24:9b:ff:5a:6b:00:99:df:96:46:c6:c2:a3:\n    01:9f:a6:6b:a4:1b:b5:f4:6c:4a:7b:5c:84:6f:6f:\n    0c:d3:1d:5d:f8:5f:72:72:59:da:bd:78:6c:ab:e8:\n    58:e2:77:28:8c:3e:70:3e:b0:14:6e:bc:98:6f:b1:\n    fe:24:99:a7:6b:1c:81:97:b9\npublicExponent: 65537 (0x10001)\nprivateExponent:\n    08:91:df:75:c4:38:e7:c2:b6:e9:e3:fc:79:89:6c:\n    bd:94:0b:96:f3:2d:5c:1e:85:09:da:3c:2a:89:3c:\n    e4:52:44:df:ae:f4:4d:dc:5a:bb:9c:df:88:0f:d3:\n    d8:92:01:ce:1b:47:6d:10:95:dc:92:e6:a7:a3:52:\n    d4:41:e0:c2:23:95:82:88:6b:cc:b8:f6:40:c1:3e:\n    a4:dd:39:2b:1b:3e:77:cb:27:7f:29:7e:8b:39:ae:\n    96:e5:7f:e2:a7:ce:11:ca:b5:ab:70:62:28:8e:63:\n    8e:b1:7b:f2:f5:49:ce:44:49:34:df:f1:2c:3c:5f:\n    93:e7:6e:5d:8c:67:1d:e1\nprime1:\n    00:e8:40:27:15:19:12:93:87:20:e9:70:3f:df:95:\n    ac:8a:7f:47:a3:b5:f2:85:66:27:93:90:e7:0a:99:\n    4e:73:35:d0:02:0e:ee:d0:82:f7:20:c0:0d:9e:9a:\n    ef:dc:1f:fc:85:20:4c:73:3d:c8:3a:bc:05:dc:71:\n    70:20:e8:22:d3\nprime2:\n    00:ce:5b:7a:cd:f6:8b:7c:61:9e:5a:ba:7e:d9:6f:\n    89:f6:cb:eb:73:4e:b4:72:47:85:47:30:c7:8b:05:\n    80:fd:3d:dc:fc:5d:5f:8c:20:ec:07:6a:a8:b9:9b:\n    91:5b:14:90:27:95:d3:ae:8e:2e:29:1b:dd:f8:68:\n    c1:67:10:0b:c3\nexponent1:\n    0b:9f:aa:55:13:fc:2a:06:09:4f:a5:9e:8c:c2:20:\n    f0:8d:8e:38:53:52:df:fa:4c:e0:c5:cf:ca:68:01:\n    d5:22:4c:56:ce:08:85:c7:08:37:4b:65:63:1a:be:\n    06:76:53:5d:16:50:bd:33:ca:61:a6:27:64:f1:08:\n    7b:9d:22:a1\nexponent2:\n    00:b7:b4:9a:bb:d6:bb:50:6c:7b:13:dc:28:e7:1b:\n    33:e0:20:a3:a8:10:2d:f5:fa:93:bc:cf:c1:24:93:\n    2e:c4:c3:99:02:95:81:64:f7:3e:08:50:3c:8a:97:\n    e2:ac:09:bf:57:6e:3b:77:8f:1d:aa:fd:22:fb:6d:\n    0e:97:d8:a2:0f\ncoefficient:\n    03:32:f5:18:85:a8:9d:ca:fd:2b:78:89:56:62:ce:\n    ca:1e:1b:f1:80:6b:ea:3f:90:a8:93:8c:ae:3e:c2:\n    7a:31:51:d9:09:11:98:7f:ee:59:0a:6f:0f:61:d8:\n    25:54:44:88:d4:8a:d9:8a:0e:b7:e3:91:e2:7b:1a:\n    c7:4a:bc:03\n\n\n2. \u3064\u3065\u3051\u3066\u516c\u958b\u9375\u3092\u4f5c\u6210\nopenssl rsa -pubout < private-key.pem > public-key.pem\n\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7Np2qTFhnZD0meg7OqzPMLzQj\nZLhCjLpmVoeTPAaeTpvQij0rEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsA\nmd+WRsbCowGfpmukG7X0bEp7XIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRu\nvJhvsf4kmadrHIGXuQIDAQAB\n-----END PUBLIC KEY-----\n\n\u4e2d\u8eab\u306f\u4ee5\u4e0b\u306e\u901a\u308a\nPublic-Key: (1024 bit)\nModulus:\n    00:bb:36:9d:aa:4c:58:67:64:3d:26:7a:0e:ce:ab:\n    33:cc:2f:34:23:64:b8:42:8c:ba:66:56:87:93:3c:\n    06:9e:4e:9b:d0:8a:3d:2b:10:6f:45:99:2f:86:6e:\n    3e:28:18:18:95:f0:16:8e:ad:a5:a5:45:39:8f:87:\n    60:e7:24:9b:ff:5a:6b:00:99:df:96:46:c6:c2:a3:\n    01:9f:a6:6b:a4:1b:b5:f4:6c:4a:7b:5c:84:6f:6f:\n    0c:d3:1d:5d:f8:5f:72:72:59:da:bd:78:6c:ab:e8:\n    58:e2:77:28:8c:3e:70:3e:b0:14:6e:bc:98:6f:b1:\n    fe:24:99:a7:6b:1c:81:97:b9\nExponent: 65537 (0x10001)\n\n\n3. \u6697\u53f7\u5316\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3092\u7528\u610f\n\u203b\u9375\u306e\u8aad\u307f\u8fbc\u307f\u306b\u306fBouncyCastle\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\nerror.cs\nvoid Main()\n{\n    //\u6697\u53f7\u5316\n    var publicParameters = CreatePublicKeyParameters(PublicKey);\n    var cipherText = Encrypt(publicParameters, \"topsecret\");\n\n    //\u5fa9\u53f7\u5316\n    var privateParameters = CreatePrivateKeyParameters(PrivateKey);\n    var plainText = Decrypt(privateParameters, cipherText);\n}\n\nstring Encrypt(RSAParameters parameters, string plainText)\n{\n    using (var rsa = new RSACryptoServiceProvider())\n    {\n        rsa.ImportParameters(parameters);\n        var plainBytes = Encoding.UTF8.GetBytes(plainText);\n        var cipherBytes = rsa.Encrypt(plainBytes, RSAEncryptionPadding.Pkcs1);\n\n        return Convert.ToBase64String(cipherBytes);\n    }\n}\n\nstring Decrypt(RSAParameters parameters, string cipherText)\n{\n    using (var rsa = new RSACryptoServiceProvider())\n    {\n        rsa.ImportParameters(parameters);\n        var cipherBytes = Convert.FromBase64String(cipherText);\n        var plainBytes = rsa.Decrypt(cipherBytes, RSAEncryptionPadding.Pkcs1);\n\n        return Encoding.UTF8.GetString(plainBytes);\n    }\n}\n\nRSAParameters CreatePublicKeyParameters(string publicKey)\n{\n    using (var reader = new StringReader(publicKey))\n    {\n        var pem = new Org.BouncyCastle.Utilities.IO.Pem.PemReader(reader).ReadPemObject();\n\n        using (var stream = new MemoryStream(pem.Content, false))\n        {\n            var asn1 = new Asn1InputStream(stream, pem.Content.Length).ReadObject();\n            var info = SubjectPublicKeyInfo.GetInstance(asn1);\n            var parameters = PublicKeyFactory.CreateKey(pem.Content) as RsaKeyParameters;\n\n            return new RSAParameters\n            {\n                Exponent = parameters?.Exponent?.ToByteArray(),\n                Modulus = parameters?.Modulus?.ToByteArray(),\n            };\n        }\n    }\n}\n\nRSAParameters CreatePrivateKeyParameters(string privateKey)\n{\n    using (var reader = new StringReader(privateKey))\n    {\n        var pem = new Org.BouncyCastle.OpenSsl.PemReader(reader);\n        var keyPair = pem.ReadObject() as AsymmetricCipherKeyPair;\n        var parameters = keyPair?.Private as RsaPrivateCrtKeyParameters;\n\n        return new RSAParameters\n        {\n            D = parameters?.Exponent?.ToByteArray(),\n            DP = parameters?.DP?.ToByteArray(),\n            DQ = parameters?.DQ?.ToByteArray(),\n            Exponent = parameters?.PublicExponent?.ToByteArray(),\n            InverseQ = parameters?.QInv?.ToByteArray(),\n            Modulus = parameters?.Modulus?.ToByteArray(),\n            P = parameters?.P?.ToByteArray(),\n            Q = arameters?.Q?.ToByteArray(),\n        };\n    }\n}\n\nconst string PrivateKey = @\"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC7Np2qTFhnZD0meg7OqzPMLzQjZLhCjLpmVoeTPAaeTpvQij0r\nEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsAmd+WRsbCowGfpmukG7X0bEp7\nXIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRuvJhvsf4kmadrHIGXuQIDAQAB\nAoGACJHfdcQ458K26eP8eYlsvZQLlvMtXB6FCdo8Kok85FJE3670Tdxau5zfiA/T\n2JIBzhtHbRCV3JLmp6NS1EHgwiOVgohrzLj2QME+pN05Kxs+d8snfyl+izmuluV/\n4qfOEcq1q3BiKI5jjrF78vVJzkRJNN/xLDxfk+duXYxnHeECQQDoQCcVGRKThyDp\ncD/flayKf0ejtfKFZieTkOcKmU5zNdACDu7QgvcgwA2emu/cH/yFIExzPcg6vAXc\ncXAg6CLTAkEAzlt6zfaLfGGeWrp+2W+J9svrc060ckeFRzDHiwWA/T3c/F1fjCDs\nB2qouZuRWxSQJ5XTro4uKRvd+GjBZxALwwJAC5+qVRP8KgYJT6WejMIg8I2OOFNS\n3/pM4MXPymgB1SJMVs4IhccIN0tlYxq+BnZTXRZQvTPKYaYnZPEIe50ioQJBALe0\nmrvWu1BsexPcKOcbM+Ago6gQLfX6k7zPwSSTLsTDmQKVgWT3PghQPIqX4qwJv1du\nO3ePHar9IvttDpfYog8CQAMy9RiFqJ3K/St4iVZizsoeG/GAa+o/kKiTjK4+wnox\nUdkJEZh/7lkKbw9h2CVURIjUitmKDrfjkeJ7GsdKvAM=\n-----END RSA PRIVATE KEY-----\";\n\nconst string PublicKey = @\"-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7Np2qTFhnZD0meg7OqzPMLzQj\nZLhCjLpmVoeTPAaeTpvQij0rEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsA\nmd+WRsbCowGfpmukG7X0bEp7XIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRu\nvJhvsf4kmadrHIGXuQIDAQAB\n-----END PUBLIC KEY-----\";\n\n\n\n4. \u5b9f\u884c\u7d50\u679c\n\u5fa9\u53f7\u5316\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u9375\u306e\u8aad\u307f\u8fbc\u307f\u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n5. \u539f\u56e0\u3092\u63a2\u308b\n\u30b3\u30c1\u30e9\u3092\u4f7f\u3063\u3066CryptoAPI\u3067\u9375\u3092\u8aad\u307f\u8fbc\u3093\u3067\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068modulus\u304c128byte\u306a\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002(CryptoAPI\u3067\u8aad\u307f\u8fbc\u3093\u3060\u9375\u306e\u6697\u53f7\u5316\u5fa9\u53f7\u5316\u306f\u52d5\u4f5cOK\u3067\u3057\u305f)\n\n\u5148\u307b\u3069\u306e\u5b9f\u884c\u7d50\u679c\u3068\u6bd4\u3079\u308b\u3068\n\nmodullus\u304c1byte\u591a\u3044\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u4ed6\u306b\u30821byte\u591a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u3092\u6bd4\u8f03\u3059\u308b\u3068\u982d1byte\u306b0x00\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u304c\u5dee\u7570\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u8a66\u3057\u306b\u30b3\u30ec\u3092\u524a\u3063\u305f\u3089\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nstack overflow\u306b\u4f3c\u305f\u3088\u3046\u306a\u30b1\u30fc\u30b9\u306e\u5bfe\u5fdc\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u3084\u306f\u308amodulus\u30921byte\u524a\u3063\u3066\u304a\u308a\u3001\u79c1\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u540c\u3058\u3067\u3059\u3002\n\n5. \u6574\u7406\u3059\u308b\u3068\n\nOpenSSL\u306e\u9375\u306e\u4e00\u90e8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u982d1byte\u306b0x00\u304c\u5165\u3063\u3066\u3044\u308b\nRSACryptoServiceProvider\u306f0x00\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f\nCryptoAPI\u3067\u9375\u3092\u8aad\u307f\u8fbc\u3080\u30680x00\u304c\u9664\u53bb\u3055\u308c\u3066\u3044\u308b\nBouncyCastle\u3067\u9375\u3092\u8aad\u307f\u8fbc\u3080\u30680x00\u304c\u542b\u307e\u308c\u305f\u307e\u307e\n\n\u4eca\u56de\u4f7f\u7528\u3057\u305fOpenSSL\u306e\u9375\u306f\u8ca0\u5024\u306e\u5834\u5408\u3001\u982d\u306b0x00\u306e\u8ffd\u52a0\u304c\u5fc5\u8981\u3067\u3001\u3053\u308c\u306f\u30d0\u30a4\u30ca\u30ea\u5909\u63db\u898f\u5247ASN.1\u306e\u4ed5\u69d8\u306e\u3088\u3046\u3067\u3059\u3002\n\u4fee\u6b63\u3057\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3001first byte\u3092\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u3002\n\u73fe\u5728\u306e.NET Framework\u306f\u3001CryptoAPI\u306e\u3088\u3046\u306aASN.1\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u6a5f\u80fd\u304c\u5b58\u5728\u3057\u306a\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u306d\uff1f\n\nsuccess.cs\nvoid Main()\n{\n        //\u6697\u53f7\u5316\n    var publicParameters = CreatePublicKeyParameters(PublicKey);\n    var cipherText = Encrypt(publicParameters, \"topsecret\");\n    $\"encrypted:{cipherText}\".Dump();\n\n        //\u5fa9\u53f7\u5316\n    var privateParameters = CreatePrivateKeyParameters(PrivateKey);\n    var plainText = Decrypt(privateParameters, cipherText);\n    $\"decrypted:{plainText}\".Dump();\n}\n\nbool RSA\u6697\u53f7\u9375\u306e\u5404\u7a2e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u982d1\u30d0\u30a4\u30c8\u304c0x00\u3060\u3063\u305f\u3089\u9664\u5916\u3059\u308b { get; set; } = true;\n\nstring Encrypt(RSAParameters parameters, string plainText)\n{\n    using (var rsa = new RSACryptoServiceProvider())\n    {\n        rsa.ImportParameters(parameters);\n        var plainBytes = Encoding.UTF8.GetBytes(plainText);\n        var cipherBytes = rsa.Encrypt(plainBytes, RSAEncryptionPadding.Pkcs1);\n\n        return Convert.ToBase64String(cipherBytes);\n    }\n}\n\nstring Decrypt(RSAParameters parameters, string cipherText)\n{\n    using (var rsa = new RSACryptoServiceProvider())\n    {\n        rsa.ImportParameters(parameters);\n        var cipherBytes = Convert.FromBase64String(cipherText);\n        var plainBytes = rsa.Decrypt(cipherBytes, RSAEncryptionPadding.Pkcs1);\n\n        return Encoding.UTF8.GetString(plainBytes);\n    }\n}\n\nRSAParameters CreatePublicKeyParameters(string publicKey)\n{\n    using (var reader = new StringReader(publicKey))\n    {\n        var pem = new Org.BouncyCastle.Utilities.IO.Pem.PemReader(reader).ReadPemObject();\n\n        using (var stream = new MemoryStream(pem.Content, false))\n        {\n            var asn1 = new Asn1InputStream(stream, pem.Content.Length).ReadObject();\n            var info = SubjectPublicKeyInfo.GetInstance(asn1);\n            var parameters = PublicKeyFactory.CreateKey(pem.Content) as RsaKeyParameters;\n\n            //$\"OID:{info.AlgorithmID.Algorithm.Id}\".Dump();\n\n            return new RSAParameters\n            {\n                Exponent = Adjustment(parameters?.Exponent?.ToByteArray()),\n                Modulus = Adjustment(parameters?.Modulus?.ToByteArray())\n            };\n        }\n    }\n}\n\nRSAParameters CreatePrivateKeyParameters(string privateKey)\n{\n    using (var reader = new StringReader(privateKey))\n    {\n        var pem = new Org.BouncyCastle.OpenSsl.PemReader(reader);\n        var keyPair = pem.ReadObject() as AsymmetricCipherKeyPair;\n        var parameters = keyPair?.Private as RsaPrivateCrtKeyParameters;\n\n        return new RSAParameters\n        {\n            D = Adjustment(parameters?.Exponent?.ToByteArray()),\n            DP = Adjustment(parameters?.DP?.ToByteArray()),\n            DQ = Adjustment(parameters?.DQ?.ToByteArray()),\n            Exponent = Adjustment(parameters?.PublicExponent?.ToByteArray()),\n            InverseQ = Adjustment(parameters?.QInv?.ToByteArray()),\n            Modulus = Adjustment(parameters?.Modulus?.ToByteArray()),\n            P = Adjustment(parameters?.P?.ToByteArray()),\n            Q = Adjustment(parameters?.Q?.ToByteArray()),\n        };\n    }\n}\n\nbyte[] Adjustment(byte[] bytes)\n{\n    if (!RSA\u6697\u53f7\u9375\u306e\u5404\u7a2e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u982d1\u30d0\u30a4\u30c8\u304c0x00\u3060\u3063\u305f\u3089\u9664\u5916\u3059\u308b)\n    {\n        return bytes;\n    }\n\n    if (bytes == null) return bytes;\n\n    if (bytes.Length > 0 && bytes[0] == 0x00)\n    {\n        var offset = 1;\n        var size = bytes.Length - offset;\n        var buffer = new byte[size];\n        Buffer.BlockCopy(bytes, offset, buffer, 0, size);\n        return buffer;\n    }\n\n    return bytes;\n}\n\n//CMD:openssl genrsa > private-key.pem\nconst string PrivateKey = @\"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC7Np2qTFhnZD0meg7OqzPMLzQjZLhCjLpmVoeTPAaeTpvQij0r\nEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsAmd+WRsbCowGfpmukG7X0bEp7\nXIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRuvJhvsf4kmadrHIGXuQIDAQAB\nAoGACJHfdcQ458K26eP8eYlsvZQLlvMtXB6FCdo8Kok85FJE3670Tdxau5zfiA/T\n2JIBzhtHbRCV3JLmp6NS1EHgwiOVgohrzLj2QME+pN05Kxs+d8snfyl+izmuluV/\n4qfOEcq1q3BiKI5jjrF78vVJzkRJNN/xLDxfk+duXYxnHeECQQDoQCcVGRKThyDp\ncD/flayKf0ejtfKFZieTkOcKmU5zNdACDu7QgvcgwA2emu/cH/yFIExzPcg6vAXc\ncXAg6CLTAkEAzlt6zfaLfGGeWrp+2W+J9svrc060ckeFRzDHiwWA/T3c/F1fjCDs\nB2qouZuRWxSQJ5XTro4uKRvd+GjBZxALwwJAC5+qVRP8KgYJT6WejMIg8I2OOFNS\n3/pM4MXPymgB1SJMVs4IhccIN0tlYxq+BnZTXRZQvTPKYaYnZPEIe50ioQJBALe0\nmrvWu1BsexPcKOcbM+Ago6gQLfX6k7zPwSSTLsTDmQKVgWT3PghQPIqX4qwJv1du\nO3ePHar9IvttDpfYog8CQAMy9RiFqJ3K/St4iVZizsoeG/GAa+o/kKiTjK4+wnox\nUdkJEZh/7lkKbw9h2CVURIjUitmKDrfjkeJ7GsdKvAM=\n-----END RSA PRIVATE KEY-----\";\n\n//CMD:openssl rsa -pubout < private-key.pem > public-key.pem\nconst string PublicKey = @\"-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7Np2qTFhnZD0meg7OqzPMLzQj\nZLhCjLpmVoeTPAaeTpvQij0rEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsA\nmd+WRsbCowGfpmukG7X0bEp7XIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRu\nvJhvsf4kmadrHIGXuQIDAQAB\n-----END PUBLIC KEY-----\";\n\n\nOpenSSL\u3067\u4f5c\u6210\u3057\u305fRSA\u6697\u53f7\u9375(.pem)\u3092\u3001C#\u3067\u8aad\u307f\u8fbc\u3080\u306b\u306f\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u305d\u306e\u307e\u307e\u306e\u5185\u5bb9\u3067\u8aad\u307f\u8fbc\u3080\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002\n\u539f\u56e0\u306f\u308f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u30b9\u30de\u30fc\u30c8\u306a\u89e3\u6c7a\u7b56\u304c\u898b\u3064\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u5185\u5bb9\u3092\u898b\u3066\u3001~~\u3082\u3057\u52a9\u8a00\u3044\u305f\u3060\u3051\u308c\u3070\u3001\u3082\u308c\u306a\u304f\u79c1\u306e\u4e0a\u53f8\u304c\u30a2\u30a4\u30b9\u3092\u30d7\u30ec\u30bc\u30f3\u30c8\u3057\u307e\u3059\u3002~~\n\n\n\u4ee5\u4e0b\u3001\u8abf\u67fb\u7d50\u679c\u3067\u3059\u3002\n\n# 1. \u307e\u305a\u79d8\u5bc6\u9375\u3092\u4f5c\u6210\n```\nopenssl genrsa > private-key.pem\n```\n\n```\n-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC7Np2qTFhnZD0meg7OqzPMLzQjZLhCjLpmVoeTPAaeTpvQij0r\nEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsAmd+WRsbCowGfpmukG7X0bEp7\nXIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRuvJhvsf4kmadrHIGXuQIDAQAB\nAoGACJHfdcQ458K26eP8eYlsvZQLlvMtXB6FCdo8Kok85FJE3670Tdxau5zfiA/T\n2JIBzhtHbRCV3JLmp6NS1EHgwiOVgohrzLj2QME+pN05Kxs+d8snfyl+izmuluV/\n4qfOEcq1q3BiKI5jjrF78vVJzkRJNN/xLDxfk+duXYxnHeECQQDoQCcVGRKThyDp\ncD/flayKf0ejtfKFZieTkOcKmU5zNdACDu7QgvcgwA2emu/cH/yFIExzPcg6vAXc\ncXAg6CLTAkEAzlt6zfaLfGGeWrp+2W+J9svrc060ckeFRzDHiwWA/T3c/F1fjCDs\nB2qouZuRWxSQJ5XTro4uKRvd+GjBZxALwwJAC5+qVRP8KgYJT6WejMIg8I2OOFNS\n3/pM4MXPymgB1SJMVs4IhccIN0tlYxq+BnZTXRZQvTPKYaYnZPEIe50ioQJBALe0\nmrvWu1BsexPcKOcbM+Ago6gQLfX6k7zPwSSTLsTDmQKVgWT3PghQPIqX4qwJv1du\nO3ePHar9IvttDpfYog8CQAMy9RiFqJ3K/St4iVZizsoeG/GAa+o/kKiTjK4+wnox\nUdkJEZh/7lkKbw9h2CVURIjUitmKDrfjkeJ7GsdKvAM=\n-----END RSA PRIVATE KEY-----\n```\n\n\u4e2d\u3092\u8997\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\nPrivate-Key: (1024 bit)\nmodulus:\n    00:bb:36:9d:aa:4c:58:67:64:3d:26:7a:0e:ce:ab:\n    33:cc:2f:34:23:64:b8:42:8c:ba:66:56:87:93:3c:\n    06:9e:4e:9b:d0:8a:3d:2b:10:6f:45:99:2f:86:6e:\n    3e:28:18:18:95:f0:16:8e:ad:a5:a5:45:39:8f:87:\n    60:e7:24:9b:ff:5a:6b:00:99:df:96:46:c6:c2:a3:\n    01:9f:a6:6b:a4:1b:b5:f4:6c:4a:7b:5c:84:6f:6f:\n    0c:d3:1d:5d:f8:5f:72:72:59:da:bd:78:6c:ab:e8:\n    58:e2:77:28:8c:3e:70:3e:b0:14:6e:bc:98:6f:b1:\n    fe:24:99:a7:6b:1c:81:97:b9\npublicExponent: 65537 (0x10001)\nprivateExponent:\n    08:91:df:75:c4:38:e7:c2:b6:e9:e3:fc:79:89:6c:\n    bd:94:0b:96:f3:2d:5c:1e:85:09:da:3c:2a:89:3c:\n    e4:52:44:df:ae:f4:4d:dc:5a:bb:9c:df:88:0f:d3:\n    d8:92:01:ce:1b:47:6d:10:95:dc:92:e6:a7:a3:52:\n    d4:41:e0:c2:23:95:82:88:6b:cc:b8:f6:40:c1:3e:\n    a4:dd:39:2b:1b:3e:77:cb:27:7f:29:7e:8b:39:ae:\n    96:e5:7f:e2:a7:ce:11:ca:b5:ab:70:62:28:8e:63:\n    8e:b1:7b:f2:f5:49:ce:44:49:34:df:f1:2c:3c:5f:\n    93:e7:6e:5d:8c:67:1d:e1\nprime1:\n    00:e8:40:27:15:19:12:93:87:20:e9:70:3f:df:95:\n    ac:8a:7f:47:a3:b5:f2:85:66:27:93:90:e7:0a:99:\n    4e:73:35:d0:02:0e:ee:d0:82:f7:20:c0:0d:9e:9a:\n    ef:dc:1f:fc:85:20:4c:73:3d:c8:3a:bc:05:dc:71:\n    70:20:e8:22:d3\nprime2:\n    00:ce:5b:7a:cd:f6:8b:7c:61:9e:5a:ba:7e:d9:6f:\n    89:f6:cb:eb:73:4e:b4:72:47:85:47:30:c7:8b:05:\n    80:fd:3d:dc:fc:5d:5f:8c:20:ec:07:6a:a8:b9:9b:\n    91:5b:14:90:27:95:d3:ae:8e:2e:29:1b:dd:f8:68:\n    c1:67:10:0b:c3\nexponent1:\n    0b:9f:aa:55:13:fc:2a:06:09:4f:a5:9e:8c:c2:20:\n    f0:8d:8e:38:53:52:df:fa:4c:e0:c5:cf:ca:68:01:\n    d5:22:4c:56:ce:08:85:c7:08:37:4b:65:63:1a:be:\n    06:76:53:5d:16:50:bd:33:ca:61:a6:27:64:f1:08:\n    7b:9d:22:a1\nexponent2:\n    00:b7:b4:9a:bb:d6:bb:50:6c:7b:13:dc:28:e7:1b:\n    33:e0:20:a3:a8:10:2d:f5:fa:93:bc:cf:c1:24:93:\n    2e:c4:c3:99:02:95:81:64:f7:3e:08:50:3c:8a:97:\n    e2:ac:09:bf:57:6e:3b:77:8f:1d:aa:fd:22:fb:6d:\n    0e:97:d8:a2:0f\ncoefficient:\n    03:32:f5:18:85:a8:9d:ca:fd:2b:78:89:56:62:ce:\n    ca:1e:1b:f1:80:6b:ea:3f:90:a8:93:8c:ae:3e:c2:\n    7a:31:51:d9:09:11:98:7f:ee:59:0a:6f:0f:61:d8:\n    25:54:44:88:d4:8a:d9:8a:0e:b7:e3:91:e2:7b:1a:\n    c7:4a:bc:03\n```\n\n# 2. \u3064\u3065\u3051\u3066\u516c\u958b\u9375\u3092\u4f5c\u6210\n```\nopenssl rsa -pubout < private-key.pem > public-key.pem\n```\n\n```\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7Np2qTFhnZD0meg7OqzPMLzQj\nZLhCjLpmVoeTPAaeTpvQij0rEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsA\nmd+WRsbCowGfpmukG7X0bEp7XIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRu\nvJhvsf4kmadrHIGXuQIDAQAB\n-----END PUBLIC KEY-----\n```\n\n\u4e2d\u8eab\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n```\nPublic-Key: (1024 bit)\nModulus:\n    00:bb:36:9d:aa:4c:58:67:64:3d:26:7a:0e:ce:ab:\n    33:cc:2f:34:23:64:b8:42:8c:ba:66:56:87:93:3c:\n    06:9e:4e:9b:d0:8a:3d:2b:10:6f:45:99:2f:86:6e:\n    3e:28:18:18:95:f0:16:8e:ad:a5:a5:45:39:8f:87:\n    60:e7:24:9b:ff:5a:6b:00:99:df:96:46:c6:c2:a3:\n    01:9f:a6:6b:a4:1b:b5:f4:6c:4a:7b:5c:84:6f:6f:\n    0c:d3:1d:5d:f8:5f:72:72:59:da:bd:78:6c:ab:e8:\n    58:e2:77:28:8c:3e:70:3e:b0:14:6e:bc:98:6f:b1:\n    fe:24:99:a7:6b:1c:81:97:b9\nExponent: 65537 (0x10001)\n```\n\n# 3. \u6697\u53f7\u5316\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3092\u7528\u610f\n\u203b\u9375\u306e\u8aad\u307f\u8fbc\u307f\u306b\u306f[BouncyCastle](https://www.bouncycastle.org/csharp/index.html)\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```error.cs\nvoid Main()\n{\n\t//\u6697\u53f7\u5316\n\tvar publicParameters = CreatePublicKeyParameters(PublicKey);\n\tvar cipherText = Encrypt(publicParameters, \"topsecret\");\n\n\t//\u5fa9\u53f7\u5316\n\tvar privateParameters = CreatePrivateKeyParameters(PrivateKey);\n\tvar plainText = Decrypt(privateParameters, cipherText);\n}\n\nstring Encrypt(RSAParameters parameters, string plainText)\n{\n\tusing (var rsa = new RSACryptoServiceProvider())\n\t{\n\t\trsa.ImportParameters(parameters);\n\t\tvar plainBytes = Encoding.UTF8.GetBytes(plainText);\n\t\tvar cipherBytes = rsa.Encrypt(plainBytes, RSAEncryptionPadding.Pkcs1);\n\n\t\treturn Convert.ToBase64String(cipherBytes);\n\t}\n}\n\nstring Decrypt(RSAParameters parameters, string cipherText)\n{\n\tusing (var rsa = new RSACryptoServiceProvider())\n\t{\n\t\trsa.ImportParameters(parameters);\n\t\tvar cipherBytes = Convert.FromBase64String(cipherText);\n\t\tvar plainBytes = rsa.Decrypt(cipherBytes, RSAEncryptionPadding.Pkcs1);\n\n\t\treturn Encoding.UTF8.GetString(plainBytes);\n\t}\n}\n\nRSAParameters CreatePublicKeyParameters(string publicKey)\n{\n\tusing (var reader = new StringReader(publicKey))\n\t{\n\t\tvar pem = new Org.BouncyCastle.Utilities.IO.Pem.PemReader(reader).ReadPemObject();\n\n\t\tusing (var stream = new MemoryStream(pem.Content, false))\n\t\t{\n\t\t\tvar asn1 = new Asn1InputStream(stream, pem.Content.Length).ReadObject();\n\t\t\tvar info = SubjectPublicKeyInfo.GetInstance(asn1);\n\t\t\tvar parameters = PublicKeyFactory.CreateKey(pem.Content) as RsaKeyParameters;\n\n\t\t\treturn new RSAParameters\n\t\t\t{\n\t\t\t\tExponent = parameters?.Exponent?.ToByteArray(),\n\t\t\t\tModulus = parameters?.Modulus?.ToByteArray(),\n\t\t\t};\n\t\t}\n\t}\n}\n\nRSAParameters CreatePrivateKeyParameters(string privateKey)\n{\n\tusing (var reader = new StringReader(privateKey))\n\t{\n\t\tvar pem = new Org.BouncyCastle.OpenSsl.PemReader(reader);\n\t\tvar keyPair = pem.ReadObject() as AsymmetricCipherKeyPair;\n\t\tvar parameters = keyPair?.Private as RsaPrivateCrtKeyParameters;\n\n\t\treturn new RSAParameters\n\t\t{\n\t\t\tD = parameters?.Exponent?.ToByteArray(),\n\t\t\tDP = parameters?.DP?.ToByteArray(),\n\t\t\tDQ = parameters?.DQ?.ToByteArray(),\n\t\t\tExponent = parameters?.PublicExponent?.ToByteArray(),\n\t\t\tInverseQ = parameters?.QInv?.ToByteArray(),\n\t\t\tModulus = parameters?.Modulus?.ToByteArray(),\n\t\t\tP = parameters?.P?.ToByteArray(),\n\t\t\tQ = arameters?.Q?.ToByteArray(),\n\t\t};\n\t}\n}\n\nconst string PrivateKey = @\"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC7Np2qTFhnZD0meg7OqzPMLzQjZLhCjLpmVoeTPAaeTpvQij0r\nEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsAmd+WRsbCowGfpmukG7X0bEp7\nXIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRuvJhvsf4kmadrHIGXuQIDAQAB\nAoGACJHfdcQ458K26eP8eYlsvZQLlvMtXB6FCdo8Kok85FJE3670Tdxau5zfiA/T\n2JIBzhtHbRCV3JLmp6NS1EHgwiOVgohrzLj2QME+pN05Kxs+d8snfyl+izmuluV/\n4qfOEcq1q3BiKI5jjrF78vVJzkRJNN/xLDxfk+duXYxnHeECQQDoQCcVGRKThyDp\ncD/flayKf0ejtfKFZieTkOcKmU5zNdACDu7QgvcgwA2emu/cH/yFIExzPcg6vAXc\ncXAg6CLTAkEAzlt6zfaLfGGeWrp+2W+J9svrc060ckeFRzDHiwWA/T3c/F1fjCDs\nB2qouZuRWxSQJ5XTro4uKRvd+GjBZxALwwJAC5+qVRP8KgYJT6WejMIg8I2OOFNS\n3/pM4MXPymgB1SJMVs4IhccIN0tlYxq+BnZTXRZQvTPKYaYnZPEIe50ioQJBALe0\nmrvWu1BsexPcKOcbM+Ago6gQLfX6k7zPwSSTLsTDmQKVgWT3PghQPIqX4qwJv1du\nO3ePHar9IvttDpfYog8CQAMy9RiFqJ3K/St4iVZizsoeG/GAa+o/kKiTjK4+wnox\nUdkJEZh/7lkKbw9h2CVURIjUitmKDrfjkeJ7GsdKvAM=\n-----END RSA PRIVATE KEY-----\";\n\nconst string PublicKey = @\"-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7Np2qTFhnZD0meg7OqzPMLzQj\nZLhCjLpmVoeTPAaeTpvQij0rEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsA\nmd+WRsbCowGfpmukG7X0bEp7XIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRu\nvJhvsf4kmadrHIGXuQIDAQAB\n-----END PUBLIC KEY-----\";\n```\n\n# 4. \u5b9f\u884c\u7d50\u679c\n\u5fa9\u53f7\u5316\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u9375\u306e\u8aad\u307f\u8fbc\u307f\u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n![err.PNG](https://qiita-image-store.s3.amazonaws.com/0/51666/3ac67cce-c220-4823-2b9d-a0a36289e658.png)\n\n# 5. \u539f\u56e0\u3092\u63a2\u308b\n\n[\u30b3\u30c1\u30e9](https://github.com/PingPlusPlus/pingpp-csharp/blob/master/Demo/RSACryptoServiceProviderExtension.cs)\u3092\u4f7f\u3063\u3066CryptoAPI\u3067\u9375\u3092\u8aad\u307f\u8fbc\u3093\u3067\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068modulus\u304c128byte\u306a\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002(CryptoAPI\u3067\u8aad\u307f\u8fbc\u3093\u3060\u9375\u306e\u6697\u53f7\u5316\u5fa9\u53f7\u5316\u306f\u52d5\u4f5cOK\u3067\u3057\u305f)\n\n![check3.PNG](https://qiita-image-store.s3.amazonaws.com/0/51666/5ab68f97-0297-9039-e3fc-007e0f7de1f1.png)\n\n\u5148\u307b\u3069\u306e\u5b9f\u884c\u7d50\u679c\u3068\u6bd4\u3079\u308b\u3068\n\n![check1.PNG](https://qiita-image-store.s3.amazonaws.com/0/51666/0f4f4384-69f2-cd04-0725-240e07a34724.png)\n\nmodullus\u304c1byte\u591a\u3044\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u4ed6\u306b\u30821byte\u591a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u305d\u308c\u305e\u308c\u3092\u6bd4\u8f03\u3059\u308b\u3068\u982d1byte\u306b0x00\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u304c\u5dee\u7570\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u8a66\u3057\u306b\u30b3\u30ec\u3092\u524a\u3063\u305f\u3089**\u52d5\u4f5c**\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n![success.PNG](https://qiita-image-store.s3.amazonaws.com/0/51666/3f0fe6e2-03a0-5203-4d00-1763cdce5d77.png)\n\n[stack overflow](http://stackoverflow.com/questions/11506891/how-to-load-the-rsa-public-key-from-file-in-c-sharp)\u306b\u4f3c\u305f\u3088\u3046\u306a\u30b1\u30fc\u30b9\u306e\u5bfe\u5fdc\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u3084\u306f\u308amodulus\u30921byte\u524a\u3063\u3066\u304a\u308a\u3001\u79c1\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u540c\u3058\u3067\u3059\u3002\n\n\n# 5. \u6574\u7406\u3059\u308b\u3068\n1. OpenSSL\u306e\u9375\u306e\u4e00\u90e8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u982d1byte\u306b0x00\u304c\u5165\u3063\u3066\u3044\u308b\n2. RSACryptoServiceProvider\u306f0x00\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f\n3. CryptoAPI\u3067\u9375\u3092\u8aad\u307f\u8fbc\u3080\u30680x00\u304c\u9664\u53bb\u3055\u308c\u3066\u3044\u308b\n4. BouncyCastle\u3067\u9375\u3092\u8aad\u307f\u8fbc\u3080\u30680x00\u304c\u542b\u307e\u308c\u305f\u307e\u307e\n\n\u4eca\u56de\u4f7f\u7528\u3057\u305fOpenSSL\u306e\u9375\u306f\u8ca0\u5024\u306e\u5834\u5408\u3001\u982d\u306b0x00\u306e\u8ffd\u52a0\u304c\u5fc5\u8981\u3067\u3001\u3053\u308c\u306f\u30d0\u30a4\u30ca\u30ea\u5909\u63db\u898f\u5247ASN.1\u306e\u4ed5\u69d8\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u4fee\u6b63\u3057\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3001first byte\u3092\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u3002\n\u73fe\u5728\u306e.NET Framework\u306f\u3001CryptoAPI\u306e\u3088\u3046\u306aASN.1\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u6a5f\u80fd\u304c\u5b58\u5728\u3057\u306a\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u306d\uff1f\n\n```success.cs\nvoid Main()\n{\n        //\u6697\u53f7\u5316\n\tvar publicParameters = CreatePublicKeyParameters(PublicKey);\n\tvar cipherText = Encrypt(publicParameters, \"topsecret\");\n\t$\"encrypted:{cipherText}\".Dump();\n\n        //\u5fa9\u53f7\u5316\n\tvar privateParameters = CreatePrivateKeyParameters(PrivateKey);\n\tvar plainText = Decrypt(privateParameters, cipherText);\n\t$\"decrypted:{plainText}\".Dump();\n}\n\nbool RSA\u6697\u53f7\u9375\u306e\u5404\u7a2e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u982d1\u30d0\u30a4\u30c8\u304c0x00\u3060\u3063\u305f\u3089\u9664\u5916\u3059\u308b { get; set; } = true;\n\nstring Encrypt(RSAParameters parameters, string plainText)\n{\n\tusing (var rsa = new RSACryptoServiceProvider())\n\t{\n\t\trsa.ImportParameters(parameters);\n\t\tvar plainBytes = Encoding.UTF8.GetBytes(plainText);\n\t\tvar cipherBytes = rsa.Encrypt(plainBytes, RSAEncryptionPadding.Pkcs1);\n\n\t\treturn Convert.ToBase64String(cipherBytes);\n\t}\n}\n\nstring Decrypt(RSAParameters parameters, string cipherText)\n{\n\tusing (var rsa = new RSACryptoServiceProvider())\n\t{\n\t\trsa.ImportParameters(parameters);\n\t\tvar cipherBytes = Convert.FromBase64String(cipherText);\n\t\tvar plainBytes = rsa.Decrypt(cipherBytes, RSAEncryptionPadding.Pkcs1);\n\n\t\treturn Encoding.UTF8.GetString(plainBytes);\n\t}\n}\n\nRSAParameters CreatePublicKeyParameters(string publicKey)\n{\n\tusing (var reader = new StringReader(publicKey))\n\t{\n\t\tvar pem = new Org.BouncyCastle.Utilities.IO.Pem.PemReader(reader).ReadPemObject();\n\n\t\tusing (var stream = new MemoryStream(pem.Content, false))\n\t\t{\n\t\t\tvar asn1 = new Asn1InputStream(stream, pem.Content.Length).ReadObject();\n\t\t\tvar info = SubjectPublicKeyInfo.GetInstance(asn1);\n\t\t\tvar parameters = PublicKeyFactory.CreateKey(pem.Content) as RsaKeyParameters;\n\n\t\t\t//$\"OID:{info.AlgorithmID.Algorithm.Id}\".Dump();\n\n\t\t\treturn new RSAParameters\n\t\t\t{\n\t\t\t\tExponent = Adjustment(parameters?.Exponent?.ToByteArray()),\n\t\t\t\tModulus = Adjustment(parameters?.Modulus?.ToByteArray())\n\t\t\t};\n\t\t}\n\t}\n}\n\nRSAParameters CreatePrivateKeyParameters(string privateKey)\n{\n\tusing (var reader = new StringReader(privateKey))\n\t{\n\t\tvar pem = new Org.BouncyCastle.OpenSsl.PemReader(reader);\n\t\tvar keyPair = pem.ReadObject() as AsymmetricCipherKeyPair;\n\t\tvar parameters = keyPair?.Private as RsaPrivateCrtKeyParameters;\n\n\t\treturn new RSAParameters\n\t\t{\n\t\t\tD = Adjustment(parameters?.Exponent?.ToByteArray()),\n\t\t\tDP = Adjustment(parameters?.DP?.ToByteArray()),\n\t\t\tDQ = Adjustment(parameters?.DQ?.ToByteArray()),\n\t\t\tExponent = Adjustment(parameters?.PublicExponent?.ToByteArray()),\n\t\t\tInverseQ = Adjustment(parameters?.QInv?.ToByteArray()),\n\t\t\tModulus = Adjustment(parameters?.Modulus?.ToByteArray()),\n\t\t\tP = Adjustment(parameters?.P?.ToByteArray()),\n\t\t\tQ = Adjustment(parameters?.Q?.ToByteArray()),\n\t\t};\n\t}\n}\n\nbyte[] Adjustment(byte[] bytes)\n{\n\tif (!RSA\u6697\u53f7\u9375\u306e\u5404\u7a2e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u982d1\u30d0\u30a4\u30c8\u304c0x00\u3060\u3063\u305f\u3089\u9664\u5916\u3059\u308b)\n\t{\n\t\treturn bytes;\n\t}\n\n\tif (bytes == null) return bytes;\n\n\tif (bytes.Length > 0 && bytes[0] == 0x00)\n\t{\n\t\tvar offset = 1;\n\t\tvar size = bytes.Length - offset;\n\t\tvar buffer = new byte[size];\n\t\tBuffer.BlockCopy(bytes, offset, buffer, 0, size);\n\t\treturn buffer;\n\t}\n\n\treturn bytes;\n}\n\n//CMD:openssl genrsa > private-key.pem\nconst string PrivateKey = @\"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC7Np2qTFhnZD0meg7OqzPMLzQjZLhCjLpmVoeTPAaeTpvQij0r\nEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsAmd+WRsbCowGfpmukG7X0bEp7\nXIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRuvJhvsf4kmadrHIGXuQIDAQAB\nAoGACJHfdcQ458K26eP8eYlsvZQLlvMtXB6FCdo8Kok85FJE3670Tdxau5zfiA/T\n2JIBzhtHbRCV3JLmp6NS1EHgwiOVgohrzLj2QME+pN05Kxs+d8snfyl+izmuluV/\n4qfOEcq1q3BiKI5jjrF78vVJzkRJNN/xLDxfk+duXYxnHeECQQDoQCcVGRKThyDp\ncD/flayKf0ejtfKFZieTkOcKmU5zNdACDu7QgvcgwA2emu/cH/yFIExzPcg6vAXc\ncXAg6CLTAkEAzlt6zfaLfGGeWrp+2W+J9svrc060ckeFRzDHiwWA/T3c/F1fjCDs\nB2qouZuRWxSQJ5XTro4uKRvd+GjBZxALwwJAC5+qVRP8KgYJT6WejMIg8I2OOFNS\n3/pM4MXPymgB1SJMVs4IhccIN0tlYxq+BnZTXRZQvTPKYaYnZPEIe50ioQJBALe0\nmrvWu1BsexPcKOcbM+Ago6gQLfX6k7zPwSSTLsTDmQKVgWT3PghQPIqX4qwJv1du\nO3ePHar9IvttDpfYog8CQAMy9RiFqJ3K/St4iVZizsoeG/GAa+o/kKiTjK4+wnox\nUdkJEZh/7lkKbw9h2CVURIjUitmKDrfjkeJ7GsdKvAM=\n-----END RSA PRIVATE KEY-----\";\n\n//CMD:openssl rsa -pubout < private-key.pem > public-key.pem\nconst string PublicKey = @\"-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7Np2qTFhnZD0meg7OqzPMLzQj\nZLhCjLpmVoeTPAaeTpvQij0rEG9FmS+Gbj4oGBiV8BaOraWlRTmPh2DnJJv/WmsA\nmd+WRsbCowGfpmukG7X0bEp7XIRvbwzTHV34X3JyWdq9eGyr6FjidyiMPnA+sBRu\nvJhvsf4kmadrHIGXuQIDAQAB\n-----END PUBLIC KEY-----\";\n```\n"}