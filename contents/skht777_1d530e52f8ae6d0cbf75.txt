{"context": "\u5f8c\u8f29\u304cPython\u3067\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3084\u3063\u3066\u305f\u306e\u3067\u305d\u306e\u30aa\u30de\u30fc\u30b8\u30e5\u3067\u3059\u3002\nPOH!7(paiza Online Hackathon 7)\u306e\u554f\u984c\u3092\u5168\u3066Java8\u306eStream API\u3067\u89e3\u3044\u3066\u3001\n\u597d\u611f\u5ea6\u306e\u4e0a\u304c\u308b\u554f\u984c\u306f\u307b\u307c\u5168\u3066\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067\u66f8\u3044\u305f\u306e\u3067\u305d\u306e\u307e\u3068\u3081\u3067\u3059\u3002\n\u3081\u304c\u306d\u3068\u30b5\u30f3\u30bf\u670d\u3068\u6c34\u7740\u3082\u8f09\u305b\u3066\u3044\u307e\u3059\u3002\n\u30de\u30b5\u30ab\u30ea\u3092\u6295\u3052\u3089\u308c\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\n(12\u670814\u65e5\u8ffd\u8a18) \u773c\u5e2f\u3068\u7e1e\u30cb\u30fc\u30bd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n(3\u670829\u65e5\u8ffd\u8a18) \u732b\u8033\u3001\u732b\u30bb\u30c3\u30c8\u3001\u30e1\u30a4\u30c9\u670d\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n\u306f\u3058\u3081\u306b\nJava\u3063\u3066\u30b3\u30fc\u30c9\u304c\u5197\u9577\u306b\u306a\u308a\u304c\u3061\u3063\u3066\u601d\u3063\u3066\u307e\u305b\u3093\u304b\uff1f \u307e\u3042\u305d\u3046\u306a\u3093\u3067\u3059\u3051\u3069\u3002\n\u305d\u3046\u3044\u3046\u65e2\u5b58\u306e\u6982\u5ff5\u3092\u58ca\u3057\u305f\u304f\u3066\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3076\u3063\u3061\u3083\u3051\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u306e\u5165\u529b\u306e\u53d6\u5f97\u8fbc\u307f\u30671\u884c\u3067\u66f8\u3051\u308b\u4ed5\u69d8\u306bJava\u304c\u306a\u3063\u3066\u3044\u306a\u3093\u3058\u3083\u306a\u304b\u306a\u3063\u3066\u66f8\u304d\u306a\u304c\u3089\u601d\u3063\u3066\u307e\u3057\u305f\u3002\n\u59cb\u3081\u306b\u8a00\u3063\u3066\u304a\u304f\u3068\u3001\u3061\u3087\u3063\u3068\u30ba\u30eb\u3057\u3066\u307e\u3059\u3002Java\u30de\u30b9\u30bf\u30fc\u52a9\u3051\u3066\u304f\u3060\u3055\u3044\u3002\n\u8a18\u4e8b\u66f8\u3044\u305f\u5f8c\u306b\u601d\u3044\u3064\u3044\u3066\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\n\n\u76ee\n\n\u3064\u308a\u76ee\n\nMain.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(1)\n.flatMap(s->IntStream.range(0, Integer.valueOf(s)).mapToObj(i->\"Ann\")).map(String::valueOf)\n.collect(Collectors.joining()));\n\n\n\u3069\u3063\u304b\u306e\u554f\u984c\u3067\u5225\u306e\u66f8\u304d\u65b9\u3057\u3066\u305f\u304b\u3082\u77e5\u308c\u306a\u3044\u3067\u3059\u304c\u3053\u3053\u3067\u306f\u8aad\u307f\u8fbc\u3093\u3060\u6570\u3067range\u4f5c\u3063\u3066Ann\u306eList\u306b\u3057\u3066flatMap\u3067\u8ffd\u52a0\u3059\u308b\u65b9\u5f0f\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u773c\u5e2f\n\nMain.java\nSystem.out.println(Stream.of(Stream.of(\n                new BufferedReader(new InputStreamReader(System.in)).lines().limit(5)\n                .collect(Collectors.joining(\"/\"))).map(s->s.split(\"/\")).flatMap(s->Arrays.stream(s[4].split(\" \"))\n                        .filter(n->Arrays.stream(s[2].split(\" \")).noneMatch(m->m.equals(n))))\n                        .mapToInt(o->Integer.valueOf(o.toString())).sorted().mapToObj(String::valueOf)\n                        .collect(Collectors.joining(\" \"))).filter(s->!s.isEmpty()).findFirst().orElse(\"None\"));\n\n\nStream\u306e\u51e6\u7406\u306f\u4e00\u90e8\u3060\u3051\u51e6\u7406\u3059\u308b\u3068\u304b\u9806\u756a\u3092\u8003\u616e\u3059\u308b\u3068\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u6b7b\u306c\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u58f2\u3063\u3066\u308b\u672c\u304b\u3089\u6301\u3063\u3066\u308b\u672c\u306e\u5dee\u5206\u3092\u53d6\u3063\u3066\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u672c\u8cea\u7684\u306a\u90e8\u5206\u306ffilter\u3060\u3051\u3067\u3059\u3002\n\u3082\u3046\u3061\u3087\u3063\u3068\u307e\u308f\u308a\u304f\u3069\u304f\u306a\u3044\u65b9\u6cd5\u306a\u3044\u3093\u3060\u308d\u3046\u304b\u3002\n\n\u30a2\u30af\u30bb\u30b5\u30ea\u30fc\n\n\u732b\u8033\n\nMain.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(1)\n.flatMap(s->Arrays.stream(s.replaceAll(\"cat\", \"/_/\").split(\"_\"))).count() - 1);\n\n\ncat\u3067split\u3057\u305f\u3068\u304dcatcatcat\u3060\u3068(\u7f6e\u63db\u3057\u306a\u3044\u3068)count\u304c0\u306b\u306a\u308b\u3045\u30fc\u3063\u3066\u601d\u3063\u3066\u307e\u3057\u305f\u3002\n\u3042\u3068\u3069\u3046\u3067\u3082\u3044\u3044\u8eab\u5185\u30cd\u30bf\u3060\u3051\u3069yukicoder\u3067\u4f3c\u305f\u554f\u984c\u898b\u305f\u3002\n\n\u732b\u30bb\u30c3\u30c8\n\nMain.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(1)\n                .map(s->s.chars().mapToObj(c->Character.toString((char)c)).collect(Collectors.joining(\" \")))\n                .map(s->Stream.of(\n                        Arrays.stream(s.split(\" \")).filter(c->c.equals(\"c\")).count(),\n                        Arrays.stream(s.split(\" \")).filter(c->c.equals(\"a\")).count(),\n                        Arrays.stream(s.split(\" \")).filter(c->c.equals(\"t\")).count()).map(l->l.toString()).collect(Collectors.joining(\" \")))\n                .flatMapToInt(s->IntStream.concat(\n                        IntStream.of(Arrays.stream(s.split(\" \")).mapToInt(Integer::valueOf).min().getAsInt()),\n                        Arrays.stream(Arrays.stream(s.split(\" \")).mapToInt(Integer::valueOf)\n                                .map(i->Arrays.stream(s.split(\" \")).mapToInt(Integer::valueOf).max().getAsInt() - i).toArray()))\n                        ).mapToObj(String::valueOf).collect(Collectors.joining(\"\\n\")));\n\n\n\u3053\u3093\u306a\u3093\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067\u3084\u3089\u305b\u3093\u306a\u3088\u6b7b\u306c\u308f(\u672c\u97f3)\u3002\n\u306f\u3044\u3001\u304b\u306a\u308a\u30ba\u30eb\u3063\u307d\u3044\u3053\u3068\u3057\u307e\u3057\u305f\u3002Collectors.joining\u6700\u9ad8\u3067\u3059\u3002\n'c','a','t'\u306e\u305d\u308c\u305e\u308c\u306e\u6570\u3092\u51fa\u3059\u305f\u3081\u306bchar\u306b\u30d0\u30e9\u3057\u3066\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u307e\u3059\u3002\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u3082\u306e\u3092\u7a7a\u767d\u3067\u7d50\u5408\u3057\u3066\u308b\u306e\u306fmin,max\u3092\u51fa\u3057\u305f\u3044\u304b\u3089\u3067\u3059\u304c\u30af\u30bd\u56de\u308a\u304f\u3069\u3044\u306e\u304c\u30af\u30bd&\u30af\u30bd\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u3042\u3068\u3053\u308c\u3082yukicoder\u3067\u4f3c\u305f\u3088\u3046\u306a\u306e\u898b\u305f\u3002\n\n\u9aea\n\n\u30b7\u30e7\u30fc\u30c8\u30d8\u30a2\n\nMain.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(2)\n.mapToInt(Integer::valueOf).sum());\n\n\nIntStream\u5f37\u3044\u4ee5\u5916\u306e\u611f\u60f3\u304c\u306a\u3044\u3002\n\n\u30ed\u30f3\u30b0\u30d8\u30a2\u30fc\n\nMain.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(5)\n                .collect(Collectors.groupingBy(s->s, Collectors.mapping(s->s, Collectors.toList()))).entrySet().stream()\n                .max((e1,e2)->Integer.compare(e1.getValue().size(), e2.getValue().size())).get().getKey());\n\n\n\u578bint\u306b\u5909\u3048\u3061\u3083\u3046\u3068yes\u304bno\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067Map>\u306b\u3057\u3066\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30dd\u30cb\u30fc\u30c6\u30fc\u30eb\n\nMain.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(1)\n        .flatMap(s->IntStream.rangeClosed(1, Integer.valueOf(s))\n        .boxed().sorted(Comparator.reverseOrder())).map(String::valueOf).collect(Collectors.joining(\"\\n\")) + \"\\n0!!\");\n\n\nIntStream\u5f37\u3044\u3063\u3066\u3055\u3063\u304d\u8a00\u3044\u307e\u3057\u305f\u304c\u3001\u6607\u9806\u306b\u3057\u304b\u3067\u304d\u306d\u3047\u306e\u304b\u3088\u3049\uff01\u3063\u3066\u601d\u3063\u305f\u306e\u3067\u3084\u3063\u3071\u5f37\u304f\u306a\u3044\u3067\u3059\u3002\n\u3069\u3046\u3084\u3089(IntStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8).boxed().sorted(Comparator.reverseOrder())\u3059\u308b\u3057\u304b\u306a\u3044\u3063\u3066stackoverflow\u3067\u3082\u8a00\u308f\u308c\u3066\u307e\u3057\u305f\u3002\n\n\u30c4\u30a4\u30f3\u30c6\u30fc\u30eb\n\nMain.java\nSystem.out.println(Arrays.stream(new BufferedReader(new InputStreamReader(System.in)).lines().limit(2)\n                .collect(Collectors.joining(\"_2 \", \"1 \", \"\")).split(\"_\"))\n                .map(s->Arrays.stream(s.toString().split(\" \")).mapToDouble(Double::valueOf).toArray())\n                .max((n1,n2)->Double.compare(n1[1] / n1[2], n2[1] / n2[2])).map(d->(int)d[0]).get());\n\n\n\u3069\u3063\u3061\u304c1\u3067\u3069\u3063\u3061\u304c2\u306a\u306e\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u30c9\u30ea\u30f3\u30af\u304c2\u3064\u3057\u304b\u306a\u3044\u3053\u3068\u3092\u3044\u3044\u3053\u3068\u306bjoining\u82b8(\u30c7\u30ea\u30df\u30bf, \u6700\u521d\u306b\u4ed8\u3051\u308b\u6587\u5b57, \u6700\u5f8c\u306b\u4ed8\u3051\u308b\u6587\u5b57)\u304b\u307e\u3057\u307e\u3057\u305f\u3002\n\n\u670d\n\n\u30bb\u30fc\u30e9\u30fc\u670d\n\nMain.java\nSystem.out.println(Stream.of(new BufferedReader(new InputStreamReader(System.in)))\n                .flatMap(br->Stream.of(br.lines().limit(1).findFirst().get()).flatMap(s->br.lines().limit(Integer.valueOf(s))))\n                .map(o->o.toString()).collect(Collectors.joining(\"_\")));\n\n\n\u6700\u5927\u306e\u9b3c\u95801\u884c\u76ee\u306b\u4f55\u884c\u8aad\u307f\u8fbc\u3080\u304b\u66f8\u3044\u3066\u3042\u308b\u3084\u3064\u3002\nbr\u306f\u3069\u3053\u306b\u3042\u308b\u304b\u3063\u3066\uff1fprivate static\u306aMain\u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u4e00\u756a\u306e\u30de\u30b5\u30ab\u30ea\u3069\u3053\u308d\u3067\u3059\uff01\uff01\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u308a\u306a\u304a\u3059\u3068\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5185\u5bb9\u4fdd\u6301\u3067\u304d\u306a\u3044\u306e\u3067\u8a31\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u5618\u3067\u3059\u3002BufferedReader\u3092Stream\u306b\u3057\u305f\u3089\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30ab\u30fc\u30c7\u30a3\u30ac\u30f3\n\nMain.java\nSystem.out.println(IntStream.rangeClosed(2, Integer.valueOf(\nnew BufferedReader(new InputStreamReader(System.in)).readLine())).reduce(1, (i,j)->i*j));\n\n\nIntStream\u306bsum()\u3063\u3066\u3042\u308b\u306a\u3089multi()\u3063\u3066\u3042\u3063\u3066\u3082\u3044\u3044\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\n\u307e\u3042\u3001\u306a\u3044\u304b\u3089reduce\u3067\u4f5c\u3063\u305f\u3093\u3067\u3059\u3051\u3069\u3002\nreduce\u4f7f\u3048\u3070\u639b\u3051\u7b97\u3068\u8db3\u3057\u7b97\u306f\u4f55\u3068\u3067\u3082\u3067\u304d\u308b\u6c17\u306f\u3057\u307e\u3059\u3051\u3069\u305d\u308c\u3067\u3082reduce(1, (i,j)->i*j))\u3092\u7f6e\u304d\u63db\u3048\u308bmulti()\u306f\u307b\u3057\u3044\u3002\n\n\u7e1e\u30cb\u30fc\u30bd\n\nMain.java\nSystem.out.println(Stream.of(new BufferedReader(new InputStreamReader(System.in)).lines().limit(2)\n            .collect(Collectors.joining(\"/\"))).map(s->Arrays.stream(s.split(\"/\")).mapToInt(Integer::valueOf).toArray())\n            .map(n->Arrays.stream(IntStream.range(0, n[1] / (n[0] * 2) + 1).mapToObj(i->\"R W\")\n                    .collect(Collectors.joining(\" \")).split(\" \")).flatMap(s->IntStream.range(0, n[0]).mapToObj(i->s))\n                    .map(o->o.toString()).limit(n[1]).collect(Collectors.joining())).findFirst().get());\n\n\n\u773c\u5e2f\u3068\u540c\u3058\u624b\u6cd5\u4f7f\u3044\u307e\u3057\u305f\u30022\u884c\u306e\u5f15\u6570\u30921\u3064\u306e\u914d\u5217\u3067\u6271\u3048\u308c\u3070\u52dd\u3063\u305f\u3082\u540c\u7136\u3067\u3059\u3002\n\"R W\"\u3092m/(n*2)+1\u3060\u3051\u7528\u610f\u3057\u3066\u305d\u308c\u305e\u308cn\u500d\u306b\u5897\u3084\u3057\u3066m\u500b\u3067\u5207\u308a\u307e\u3057\u305f\u3002\n\n\u30e1\u30a4\u30c9\u670d\n\nMain.java\nSystem.out.println(Stream.of(new BufferedReader(new InputStreamReader(System.in)))\n                .flatMap(br->Stream.of(br.lines().limit(1).findFirst().get()).flatMap(s->br.lines().limit(Integer.valueOf(s))))\n                .mapToInt(o->Integer.valueOf(o.toString())).map(i-> i / 3).map(i->i > 60 ? 60 * 25 - i : 60 - i)\n                .mapToObj(i->String.format(\"%02d:%02d\", i / 60, i % 60)).collect(Collectors.joining(\"\\n\")));\n\n\n\u30bb\u30fc\u30e9\u30fc\u670d\u3068\u540c\u3058\u3088\u3046\u306a\u624b\u3092\u4f7f\u3063\u305f\u4ee5\u5916\u306b\u6539\u3081\u3066\u7279\u306b\u4f55\u304b\u8a00\u3046\u3053\u3068\u306f\u306a\u3044\u3067\u3059\u3002\n\u3069\u3046\u3067\u3082\u3044\u3044\u3051\u3069\u30017\u6642\u306b\u8d77\u304d\u305f\u6642\u70b9\u3067\u4ed5\u4e8b\u59cb\u307e\u3063\u3066\u308b\u306e\u30e4\u30d0\u304f\u306a\u3044\u3067\u3059\u304b\uff1f\n\n\u304a\u307e\u3051\n\u3053\u3053\u304b\u3089\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3092\u3084\u3081\u3066\u9ed2\u6b74\u53f2\u9ed2\u9b54\u8853\u3092\u884c\u4f7f\u3057\u307e\u3057\u305f\u3002\n\n\u3081\u304c\u306d\n\nMain.java\nprivate static List<String> trimReadLine(BufferedReader br, int limit) {\n    return br.lines().limit(limit).map(s->Arrays.stream(s.split(\" \")).collect(Collectors.joining())).collect(Collectors.toList());\n}\n\nprivate static List<String> reverseList(List<String> list) {\n    return IntStream.range(0, list.size()).mapToObj(i->list.stream().map(s->s.substring(i, i + 1)).collect(Collectors.joining()))\n                .collect(Collectors.toList());\n}\n\nprivate static List<String> guess(List<String> l1, List<String> l2) {\n    return IntStream.range(0, l1.size()).filter(i->l1.get(i).contains(l2.get(0)))\n                .filter(i->i + l2.size() <= l1.size()).boxed().map(i->i.toString()).collect(Collectors.toList());\n}\n\n\n\nMain.java\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        List<String> l1 = trimReadLine(br, Integer.valueOf(br.readLine()));\n        List<String> l2 = trimReadLine(br, Integer.valueOf(br.readLine()));\n        guess(l1, l2).stream().flatMap(y->guess(reverseList(l1), reverseList(l2)).stream().map(x->y + \" \" + x))\n                .map(s->Arrays.stream(s.toString().split(\" \")).mapToInt(Integer::valueOf).toArray()).filter(n->\n        IntStream.range(n[0], n[0] + l2.size()).allMatch(i->l2.get(i - n[0]).equals(l1.get(i).substring(n[1], n[1] + l2.size()))))\n        .map(n->n[0] + \" \" + n[1]).forEach(System.out::println);\n\n\nString.contains\u82b8\u3067\u5f53\u3066\u306f\u307e\u308a\u305d\u3046\u306ax,y\u306e\u5ea7\u6a19\u3092\u305d\u308c\u305e\u308c\u51fa\u3057\u3066\u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u4f5c\u3063\u3066\u5b9f\u969b\u306b\u7167\u5408\u3057\u3066\u307f\u308b\u611f\u3058\u3067\u3059\u306d\u3002\n\u3088\u304f\u898b\u305f\u3089\u3053\u308c\u3060\u3051\u5909\u306a\u51fa\u529b\u306e\u4ed5\u65b9\u3057\u3066\u307e\u3059\u306d\u3002\n\n\u30b5\u30f3\u30bf\u670d\n\nMain.java\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] arg0 = br.readLine().split(\" \");\n        System.out.println(Stream.concat(Stream.of(\"0 \" + arg0[0], \"0 0\", \"1 \" + arg0[1], \"1 0\"), \n                br.lines().limit(Integer.valueOf(arg0[3]))).map(s->s.split(\" \"))\n                .collect(Collectors.groupingBy(s->s[0], Collectors.mapping(s->s[1], Collectors.toList()))).entrySet().stream()\n                .map(e->e.getValue().stream().mapToInt(Integer::valueOf).sorted().boxed().collect(Collectors.toList()))\n                .mapToInt(values->IntStream.range(1, values.size()).map(i->values.get(i) - values.get(i - 1)).min().getAsInt())\n                .reduce(Integer.valueOf(arg0[2]), (i,j)->i*j));\n\n\n\u7e26\u3068\u6a2a\u3067\u540c\u3058\u64cd\u4f5c\u3067\u304d\u308b\u304b\u306a\u3063\u3066\u601d\u3063\u305f\u306e\u3067\u3001d_i\u3092\u30ad\u30fc\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u30bd\u30fc\u30c8\u3057\u3066\u5207\u308c\u76ee\u6bce\u306e\u9577\u3055\u304c\u4e00\u756a\u77ed\u3044\u3082\u306e\u3092\u51fa\u3057\u3066\u304d\u3066reduce\u82b8\u304b\u307e\u3057\u307e\u3057\u305f\u3002\n\u3084\u3063\u3071IntStream\u5f37\u304f\u306a\u3044\u3067\u3059\u304b\uff1f\n\n\u6c34\u7740\n\nMain.java\nprivate static long cutNum(String n, int lim) {\n    return n.length() < lim ? Long.valueOf(n) : Long.valueOf(n.substring(n.length() - lim));\n}\n\nprivate static long calc(long n) {\n    long c = n;\n    while(c % 10 == 0) c /= 10;\n    return cutNum(String.valueOf(c), 11);\n}\n\n\n\nMain.java\nSystem.out.println((int) cutNum(String.valueOf(new BufferedReader(new InputStreamReader(System.in))\n        .lines().limit(1).mapToLong(Long::valueOf).flatMap(n->IntStream.rangeClosed(2, (int)n).mapToLong(i->(long)i))\n        .reduce(1, (i,j)->calc(i*j))), 9));\n\n\n\u5b9f\u306f\u3053\u308c\u4e00\u756a\u6700\u521d\u306b\u3084\u308a\u307e\u3057\u305f\u3002\u3057\u304b\u3082python\u3067\u3002\n\u30c4\u30a4\u30f3\u30c6\u30fc\u30eb\u306e\u5fdc\u7528\u7248\u307f\u305f\u3044\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\nwhile\u3092Stream\u3067\u66f8\u304f\u65b9\u6cd5\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n\n\u3055\u3044\u3054\u306b\nJava\u3067\u30e0\u30c0\u306b\u9577\u3044\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3092\u66f8\u304f\u3068\u95c7\u304c\u751f\u307e\u308c\u308b\u306e\u3067\u7a0b\u3005\u306b\u3059\u308b\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u5f8c\u8f29\u304c[Python\u3067\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc](http://qiita.com/neglect_yp/items/f76eb0c2d1ea29282f3d)\u3084\u3063\u3066\u305f\u306e\u3067\u305d\u306e\u30aa\u30de\u30fc\u30b8\u30e5\u3067\u3059\u3002\n[POH!7](https://paiza.jp/poh/ando?read=true)(paiza Online Hackathon 7)\u306e\u554f\u984c\u3092\u5168\u3066Java8\u306eStream API\u3067\u89e3\u3044\u3066\u3001\n\u597d\u611f\u5ea6\u306e\u4e0a\u304c\u308b\u554f\u984c\u306f~~\u307b\u307c~~\u5168\u3066\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067\u66f8\u3044\u305f\u306e\u3067\u305d\u306e\u307e\u3068\u3081\u3067\u3059\u3002\n\u3081\u304c\u306d\u3068\u30b5\u30f3\u30bf\u670d\u3068\u6c34\u7740\u3082\u8f09\u305b\u3066\u3044\u307e\u3059\u3002\n\u30de\u30b5\u30ab\u30ea\u3092\u6295\u3052\u3089\u308c\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\n\n(12\u670814\u65e5\u8ffd\u8a18) \u773c\u5e2f\u3068\u7e1e\u30cb\u30fc\u30bd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n(3\u670829\u65e5\u8ffd\u8a18) \u732b\u8033\u3001\u732b\u30bb\u30c3\u30c8\u3001\u30e1\u30a4\u30c9\u670d\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n#\u306f\u3058\u3081\u306b\nJava\u3063\u3066\u30b3\u30fc\u30c9\u304c\u5197\u9577\u306b\u306a\u308a\u304c\u3061\u3063\u3066\u601d\u3063\u3066\u307e\u305b\u3093\u304b\uff1f ~~\u307e\u3042\u305d\u3046\u306a\u3093\u3067\u3059\u3051\u3069\u3002~~\n\u305d\u3046\u3044\u3046\u65e2\u5b58\u306e\u6982\u5ff5\u3092\u58ca\u3057\u305f\u304f\u3066\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3076\u3063\u3061\u3083\u3051\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u306e\u5165\u529b\u306e\u53d6\u5f97\u8fbc\u307f\u30671\u884c\u3067\u66f8\u3051\u308b\u4ed5\u69d8\u306bJava\u304c\u306a\u3063\u3066\u3044\u306a\u3093\u3058\u3083\u306a\u304b\u306a\u3063\u3066\u66f8\u304d\u306a\u304c\u3089\u601d\u3063\u3066\u307e\u3057\u305f\u3002\n~~\u59cb\u3081\u306b\u8a00\u3063\u3066\u304a\u304f\u3068\u3001\u3061\u3087\u3063\u3068\u30ba\u30eb\u3057\u3066\u307e\u3059\u3002Java\u30de\u30b9\u30bf\u30fc\u52a9\u3051\u3066\u304f\u3060\u3055\u3044\u3002~~\n\u8a18\u4e8b\u66f8\u3044\u305f\u5f8c\u306b\u601d\u3044\u3064\u3044\u3066\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\n\n#\u76ee\n##\u3064\u308a\u76ee\n\n```Main.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(1)\n.flatMap(s->IntStream.range(0, Integer.valueOf(s)).mapToObj(i->\"Ann\")).map(String::valueOf)\n.collect(Collectors.joining()));\n```\n\n\u3069\u3063\u304b\u306e\u554f\u984c\u3067\u5225\u306e\u66f8\u304d\u65b9\u3057\u3066\u305f\u304b\u3082\u77e5\u308c\u306a\u3044\u3067\u3059\u304c\u3053\u3053\u3067\u306f\u8aad\u307f\u8fbc\u3093\u3060\u6570\u3067range\u4f5c\u3063\u3066Ann\u306eList\u306b\u3057\u3066flatMap\u3067\u8ffd\u52a0\u3059\u308b\u65b9\u5f0f\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n##\u773c\u5e2f\n\n```Main.java\nSystem.out.println(Stream.of(Stream.of(\n\t\t\t\tnew BufferedReader(new InputStreamReader(System.in)).lines().limit(5)\n\t\t\t\t.collect(Collectors.joining(\"/\"))).map(s->s.split(\"/\")).flatMap(s->Arrays.stream(s[4].split(\" \"))\n\t\t\t\t\t\t.filter(n->Arrays.stream(s[2].split(\" \")).noneMatch(m->m.equals(n))))\n\t\t\t\t\t\t.mapToInt(o->Integer.valueOf(o.toString())).sorted().mapToObj(String::valueOf)\n\t\t\t\t\t\t.collect(Collectors.joining(\" \"))).filter(s->!s.isEmpty()).findFirst().orElse(\"None\"));\n```\n\nStream\u306e\u51e6\u7406\u306f\u4e00\u90e8\u3060\u3051\u51e6\u7406\u3059\u308b\u3068\u304b\u9806\u756a\u3092\u8003\u616e\u3059\u308b\u3068\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u6b7b\u306c\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u58f2\u3063\u3066\u308b\u672c\u304b\u3089\u6301\u3063\u3066\u308b\u672c\u306e\u5dee\u5206\u3092\u53d6\u3063\u3066\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u672c\u8cea\u7684\u306a\u90e8\u5206\u306ffilter\u3060\u3051\u3067\u3059\u3002\n\u3082\u3046\u3061\u3087\u3063\u3068\u307e\u308f\u308a\u304f\u3069\u304f\u306a\u3044\u65b9\u6cd5\u306a\u3044\u3093\u3060\u308d\u3046\u304b\u3002\n\n#\u30a2\u30af\u30bb\u30b5\u30ea\u30fc\n##\u732b\u8033\n```Main.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(1)\n.flatMap(s->Arrays.stream(s.replaceAll(\"cat\", \"/_/\").split(\"_\"))).count() - 1);\n```\n\ncat\u3067split\u3057\u305f\u3068\u304dcatcatcat\u3060\u3068(\u7f6e\u63db\u3057\u306a\u3044\u3068)count\u304c0\u306b\u306a\u308b\u3045\u30fc\u3063\u3066\u601d\u3063\u3066\u307e\u3057\u305f\u3002\n\u3042\u3068\u3069\u3046\u3067\u3082\u3044\u3044\u8eab\u5185\u30cd\u30bf\u3060\u3051\u3069yukicoder\u3067\u4f3c\u305f\u554f\u984c\u898b\u305f\u3002\n\n## \u732b\u30bb\u30c3\u30c8\n\n```Main.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(1)\n\t\t\t\t.map(s->s.chars().mapToObj(c->Character.toString((char)c)).collect(Collectors.joining(\" \")))\n\t\t\t\t.map(s->Stream.of(\n\t\t\t\t\t\tArrays.stream(s.split(\" \")).filter(c->c.equals(\"c\")).count(),\n\t\t\t\t\t\tArrays.stream(s.split(\" \")).filter(c->c.equals(\"a\")).count(),\n\t\t\t\t\t\tArrays.stream(s.split(\" \")).filter(c->c.equals(\"t\")).count()).map(l->l.toString()).collect(Collectors.joining(\" \")))\n\t\t\t\t.flatMapToInt(s->IntStream.concat(\n\t\t\t\t\t\tIntStream.of(Arrays.stream(s.split(\" \")).mapToInt(Integer::valueOf).min().getAsInt()),\n\t\t\t\t\t\tArrays.stream(Arrays.stream(s.split(\" \")).mapToInt(Integer::valueOf)\n\t\t\t\t\t\t\t\t.map(i->Arrays.stream(s.split(\" \")).mapToInt(Integer::valueOf).max().getAsInt() - i).toArray()))\n\t\t\t\t\t\t).mapToObj(String::valueOf).collect(Collectors.joining(\"\\n\")));\n```\n\n\u3053\u3093\u306a\u3093\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067\u3084\u3089\u305b\u3093\u306a\u3088\u6b7b\u306c\u308f(\u672c\u97f3)\u3002\n\u306f\u3044\u3001\u304b\u306a\u308a\u30ba\u30eb\u3063\u307d\u3044\u3053\u3068\u3057\u307e\u3057\u305f\u3002Collectors.joining\u6700\u9ad8\u3067\u3059\u3002\n'c','a','t'\u306e\u305d\u308c\u305e\u308c\u306e\u6570\u3092\u51fa\u3059\u305f\u3081\u306bchar\u306b\u30d0\u30e9\u3057\u3066\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u307e\u3059\u3002\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u3082\u306e\u3092\u7a7a\u767d\u3067\u7d50\u5408\u3057\u3066\u308b\u306e\u306fmin,max\u3092\u51fa\u3057\u305f\u3044\u304b\u3089\u3067\u3059\u304c\u30af\u30bd\u56de\u308a\u304f\u3069\u3044\u306e\u304c\u30af\u30bd&\u30af\u30bd\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u3042\u3068\u3053\u308c\u3082yukicoder\u3067\u4f3c\u305f\u3088\u3046\u306a\u306e\u898b\u305f\u3002\n\n#\u9aea\n##\u30b7\u30e7\u30fc\u30c8\u30d8\u30a2\n\n```Main.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(2)\n.mapToInt(Integer::valueOf).sum());\n```\n\nIntStream\u5f37\u3044\u4ee5\u5916\u306e\u611f\u60f3\u304c\u306a\u3044\u3002\n\n##\u30ed\u30f3\u30b0\u30d8\u30a2\u30fc\n\n```Main.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(5)\n\t\t\t\t.collect(Collectors.groupingBy(s->s, Collectors.mapping(s->s, Collectors.toList()))).entrySet().stream()\n\t\t\t\t.max((e1,e2)->Integer.compare(e1.getValue().size(), e2.getValue().size())).get().getKey());\n```\n\n\u578bint\u306b\u5909\u3048\u3061\u3083\u3046\u3068yes\u304bno\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067Map<String, List<String>>\u306b\u3057\u3066\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\u3002\n\n##\u30dd\u30cb\u30fc\u30c6\u30fc\u30eb\n\n```Main.java\nSystem.out.println(new BufferedReader(new InputStreamReader(System.in)).lines().limit(1)\n\t\t.flatMap(s->IntStream.rangeClosed(1, Integer.valueOf(s))\n\t\t.boxed().sorted(Comparator.reverseOrder())).map(String::valueOf).collect(Collectors.joining(\"\\n\")) + \"\\n0!!\");\n```\n\nIntStream\u5f37\u3044\u3063\u3066\u3055\u3063\u304d\u8a00\u3044\u307e\u3057\u305f\u304c\u3001\u6607\u9806\u306b\u3057\u304b\u3067\u304d\u306d\u3047\u306e\u304b\u3088\u3049\uff01\u3063\u3066\u601d\u3063\u305f\u306e\u3067\u3084\u3063\u3071\u5f37\u304f\u306a\u3044\u3067\u3059\u3002\n\u3069\u3046\u3084\u3089(IntStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8).boxed().sorted(Comparator.reverseOrder())\u3059\u308b\u3057\u304b\u306a\u3044\u3063\u3066[stackoverflow](http://stackoverflow.com/questions/30740471/how-to-sort-an-intstream-in-reverse-order)\u3067\u3082\u8a00\u308f\u308c\u3066\u307e\u3057\u305f\u3002\n\n##\u30c4\u30a4\u30f3\u30c6\u30fc\u30eb\n\n```Main.java\nSystem.out.println(Arrays.stream(new BufferedReader(new InputStreamReader(System.in)).lines().limit(2)\n\t\t\t\t.collect(Collectors.joining(\"_2 \", \"1 \", \"\")).split(\"_\"))\n\t\t\t\t.map(s->Arrays.stream(s.toString().split(\" \")).mapToDouble(Double::valueOf).toArray())\n\t\t\t\t.max((n1,n2)->Double.compare(n1[1] / n1[2], n2[1] / n2[2])).map(d->(int)d[0]).get());\n```\n\n\u3069\u3063\u3061\u304c1\u3067\u3069\u3063\u3061\u304c2\u306a\u306e\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u30c9\u30ea\u30f3\u30af\u304c2\u3064\u3057\u304b\u306a\u3044\u3053\u3068\u3092\u3044\u3044\u3053\u3068\u306bjoining\u82b8(\u30c7\u30ea\u30df\u30bf, \u6700\u521d\u306b\u4ed8\u3051\u308b\u6587\u5b57, \u6700\u5f8c\u306b\u4ed8\u3051\u308b\u6587\u5b57)\u304b\u307e\u3057\u307e\u3057\u305f\u3002\n\n#\u670d\n##\u30bb\u30fc\u30e9\u30fc\u670d\n\n```Main.java\nSystem.out.println(Stream.of(new BufferedReader(new InputStreamReader(System.in)))\n\t\t\t\t.flatMap(br->Stream.of(br.lines().limit(1).findFirst().get()).flatMap(s->br.lines().limit(Integer.valueOf(s))))\n\t\t\t\t.map(o->o.toString()).collect(Collectors.joining(\"_\")));\n```\n\n\u6700\u5927\u306e\u9b3c\u95801\u884c\u76ee\u306b\u4f55\u884c\u8aad\u307f\u8fbc\u3080\u304b\u66f8\u3044\u3066\u3042\u308b\u3084\u3064\u3002\n~~br\u306f\u3069\u3053\u306b\u3042\u308b\u304b\u3063\u3066\uff1fprivate static\u306aMain\u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3059\u3002**\u3053\u306e\u8a18\u4e8b\u3067\u4e00\u756a\u306e\u30de\u30b5\u30ab\u30ea\u3069\u3053\u308d\u3067\u3059\uff01\uff01**\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u308a\u306a\u304a\u3059\u3068\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5185\u5bb9\u4fdd\u6301\u3067\u304d\u306a\u3044\u306e\u3067\u8a31\u3057\u3066\u304f\u3060\u3055\u3044\u3002~~\n\u5618\u3067\u3059\u3002BufferedReader\u3092Stream\u306b\u3057\u305f\u3089\u3067\u304d\u307e\u3057\u305f\u3002\n\n##\u30ab\u30fc\u30c7\u30a3\u30ac\u30f3\n\n```Main.java\nSystem.out.println(IntStream.rangeClosed(2, Integer.valueOf(\nnew BufferedReader(new InputStreamReader(System.in)).readLine())).reduce(1, (i,j)->i*j));\n```\n\nIntStream\u306bsum()\u3063\u3066\u3042\u308b\u306a\u3089multi()\u3063\u3066\u3042\u3063\u3066\u3082\u3044\u3044\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\n\u307e\u3042\u3001\u306a\u3044\u304b\u3089reduce\u3067\u4f5c\u3063\u305f\u3093\u3067\u3059\u3051\u3069\u3002\nreduce\u4f7f\u3048\u3070\u639b\u3051\u7b97\u3068\u8db3\u3057\u7b97\u306f\u4f55\u3068\u3067\u3082\u3067\u304d\u308b\u6c17\u306f\u3057\u307e\u3059\u3051\u3069\u305d\u308c\u3067\u3082reduce(1, (i,j)->i*j))\u3092\u7f6e\u304d\u63db\u3048\u308bmulti()\u306f\u307b\u3057\u3044\u3002\n\n##\u7e1e\u30cb\u30fc\u30bd\n\n```Main.java\nSystem.out.println(Stream.of(new BufferedReader(new InputStreamReader(System.in)).lines().limit(2)\n\t\t\t.collect(Collectors.joining(\"/\"))).map(s->Arrays.stream(s.split(\"/\")).mapToInt(Integer::valueOf).toArray())\n\t\t\t.map(n->Arrays.stream(IntStream.range(0, n[1] / (n[0] * 2) + 1).mapToObj(i->\"R W\")\n\t\t\t\t\t.collect(Collectors.joining(\" \")).split(\" \")).flatMap(s->IntStream.range(0, n[0]).mapToObj(i->s))\n\t\t\t\t\t.map(o->o.toString()).limit(n[1]).collect(Collectors.joining())).findFirst().get());\n```\n\n\u773c\u5e2f\u3068\u540c\u3058\u624b\u6cd5\u4f7f\u3044\u307e\u3057\u305f\u30022\u884c\u306e\u5f15\u6570\u30921\u3064\u306e\u914d\u5217\u3067\u6271\u3048\u308c\u3070\u52dd\u3063\u305f\u3082\u540c\u7136\u3067\u3059\u3002\n\"R W\"\u3092m/(n*2)+1\u3060\u3051\u7528\u610f\u3057\u3066\u305d\u308c\u305e\u308cn\u500d\u306b\u5897\u3084\u3057\u3066m\u500b\u3067\u5207\u308a\u307e\u3057\u305f\u3002\n\n##\u30e1\u30a4\u30c9\u670d\n\n```Main.java\nSystem.out.println(Stream.of(new BufferedReader(new InputStreamReader(System.in)))\n                .flatMap(br->Stream.of(br.lines().limit(1).findFirst().get()).flatMap(s->br.lines().limit(Integer.valueOf(s))))\n                .mapToInt(o->Integer.valueOf(o.toString())).map(i-> i / 3).map(i->i > 60 ? 60 * 25 - i : 60 - i)\n                .mapToObj(i->String.format(\"%02d:%02d\", i / 60, i % 60)).collect(Collectors.joining(\"\\n\")));\n```\n\n\u30bb\u30fc\u30e9\u30fc\u670d\u3068\u540c\u3058\u3088\u3046\u306a\u624b\u3092\u4f7f\u3063\u305f\u4ee5\u5916\u306b\u6539\u3081\u3066\u7279\u306b\u4f55\u304b\u8a00\u3046\u3053\u3068\u306f\u306a\u3044\u3067\u3059\u3002\n\u3069\u3046\u3067\u3082\u3044\u3044\u3051\u3069\u30017\u6642\u306b\u8d77\u304d\u305f\u6642\u70b9\u3067\u4ed5\u4e8b\u59cb\u307e\u3063\u3066\u308b\u306e\u30e4\u30d0\u304f\u306a\u3044\u3067\u3059\u304b\uff1f\n\n#\u304a\u307e\u3051\n\u3053\u3053\u304b\u3089\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3092\u3084\u3081\u3066~~\u9ed2\u6b74\u53f2~~\u9ed2\u9b54\u8853\u3092\u884c\u4f7f\u3057\u307e\u3057\u305f\u3002\n\n##\u3081\u304c\u306d\n\n```Main.java\nprivate static List<String> trimReadLine(BufferedReader br, int limit) {\n\treturn br.lines().limit(limit).map(s->Arrays.stream(s.split(\" \")).collect(Collectors.joining())).collect(Collectors.toList());\n}\n\t\nprivate static List<String> reverseList(List<String> list) {\n\treturn IntStream.range(0, list.size()).mapToObj(i->list.stream().map(s->s.substring(i, i + 1)).collect(Collectors.joining()))\n\t\t\t\t.collect(Collectors.toList());\n}\n\t\nprivate static List<String> guess(List<String> l1, List<String> l2) {\n\treturn IntStream.range(0, l1.size()).filter(i->l1.get(i).contains(l2.get(0)))\n\t\t\t\t.filter(i->i + l2.size() <= l1.size()).boxed().map(i->i.toString()).collect(Collectors.toList());\n}\n```\n\n```Main.java\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tList<String> l1 = trimReadLine(br, Integer.valueOf(br.readLine()));\n\t\tList<String> l2 = trimReadLine(br, Integer.valueOf(br.readLine()));\n\t\tguess(l1, l2).stream().flatMap(y->guess(reverseList(l1), reverseList(l2)).stream().map(x->y + \" \" + x))\n\t\t\t\t.map(s->Arrays.stream(s.toString().split(\" \")).mapToInt(Integer::valueOf).toArray()).filter(n->\n\t\tIntStream.range(n[0], n[0] + l2.size()).allMatch(i->l2.get(i - n[0]).equals(l1.get(i).substring(n[1], n[1] + l2.size()))))\n\t\t.map(n->n[0] + \" \" + n[1]).forEach(System.out::println);\n```\n\nString.contains\u82b8\u3067\u5f53\u3066\u306f\u307e\u308a\u305d\u3046\u306ax,y\u306e\u5ea7\u6a19\u3092\u305d\u308c\u305e\u308c\u51fa\u3057\u3066\u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u4f5c\u3063\u3066\u5b9f\u969b\u306b\u7167\u5408\u3057\u3066\u307f\u308b\u611f\u3058\u3067\u3059\u306d\u3002\n\u3088\u304f\u898b\u305f\u3089\u3053\u308c\u3060\u3051\u5909\u306a\u51fa\u529b\u306e\u4ed5\u65b9\u3057\u3066\u307e\u3059\u306d\u3002\n\n##\u30b5\u30f3\u30bf\u670d\n\n```Main.java\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] arg0 = br.readLine().split(\" \");\n\t\tSystem.out.println(Stream.concat(Stream.of(\"0 \" + arg0[0], \"0 0\", \"1 \" + arg0[1], \"1 0\"), \n\t\t\t\tbr.lines().limit(Integer.valueOf(arg0[3]))).map(s->s.split(\" \"))\n\t\t\t\t.collect(Collectors.groupingBy(s->s[0], Collectors.mapping(s->s[1], Collectors.toList()))).entrySet().stream()\n\t\t\t\t.map(e->e.getValue().stream().mapToInt(Integer::valueOf).sorted().boxed().collect(Collectors.toList()))\n\t\t\t\t.mapToInt(values->IntStream.range(1, values.size()).map(i->values.get(i) - values.get(i - 1)).min().getAsInt())\n\t\t\t\t.reduce(Integer.valueOf(arg0[2]), (i,j)->i*j));\n```\n\n\u7e26\u3068\u6a2a\u3067\u540c\u3058\u64cd\u4f5c\u3067\u304d\u308b\u304b\u306a\u3063\u3066\u601d\u3063\u305f\u306e\u3067\u3001d_i\u3092\u30ad\u30fc\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u30bd\u30fc\u30c8\u3057\u3066\u5207\u308c\u76ee\u6bce\u306e\u9577\u3055\u304c\u4e00\u756a\u77ed\u3044\u3082\u306e\u3092\u51fa\u3057\u3066\u304d\u3066reduce\u82b8\u304b\u307e\u3057\u307e\u3057\u305f\u3002\n\u3084\u3063\u3071IntStream\u5f37\u304f\u306a\u3044\u3067\u3059\u304b\uff1f\n\n##\u6c34\u7740\n\n```Main.java\nprivate static long cutNum(String n, int lim) {\n\treturn n.length() < lim ? Long.valueOf(n) : Long.valueOf(n.substring(n.length() - lim));\n}\n\t\nprivate static long calc(long n) {\n\tlong c = n;\n\twhile(c % 10 == 0) c /= 10;\n\treturn cutNum(String.valueOf(c), 11);\n}\n```\n\n```Main.java\nSystem.out.println((int) cutNum(String.valueOf(new BufferedReader(new InputStreamReader(System.in))\n\t\t.lines().limit(1).mapToLong(Long::valueOf).flatMap(n->IntStream.rangeClosed(2, (int)n).mapToLong(i->(long)i))\n\t\t.reduce(1, (i,j)->calc(i*j))), 9));\n```\n\n\u5b9f\u306f\u3053\u308c\u4e00\u756a\u6700\u521d\u306b\u3084\u308a\u307e\u3057\u305f\u3002\u3057\u304b\u3082python\u3067\u3002\n\u30c4\u30a4\u30f3\u30c6\u30fc\u30eb\u306e\u5fdc\u7528\u7248\u307f\u305f\u3044\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\n**while\u3092Stream\u3067\u66f8\u304f\u65b9\u6cd5\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002**\n\n#\u3055\u3044\u3054\u306b\nJava\u3067\u30e0\u30c0\u306b\u9577\u3044\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3092\u66f8\u304f\u3068\u95c7\u304c\u751f\u307e\u308c\u308b\u306e\u3067\u7a0b\u3005\u306b\u3059\u308b\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Java", "java8", "paiza"]}