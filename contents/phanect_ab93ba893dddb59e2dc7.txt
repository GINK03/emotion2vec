{"context": " More than 1 year has passed since last update.This is the mathematical evidence that it is significantly efficient to create automated tests in web services projects.\nAt first, I define constants.\na = (Hours to create 1 auto-test)\nm = (Hours for 1 manual test)\nIn this case, I define that it takes 10 times as long to create automated test than manual test. (Actually I don't think it takes so long to create automated tests, but I define so here.)\na = 10 \u00d7 m ... (1)\nI also define:\nt = (total times to run test for the software)\nThen you need (t \u00d7 m) hours for manual test at the total. ... (2)\nYou need almost no additional time to run automated test.\nSo derived from (2), you should create automated test if\na < (t \u00d7 m) ... (3)\nDerived from (1), (3) can be transformed as:\n(10 \u00d7 m) < (t \u00d7 m)\nSo you should create automated test if:\n10 < t\nSo in this definition, it is efficient to create if you have to test for more than 10 times.\nIn web service / mobile service projects, many projects introduces continuous integration. So you release so frequently. In large scale company such as Github, I hear they release several times in a day.\nAs a principle, you have to test all functions before the releases.\nOur project is run with small number of people, so maybe we don't release everyday. Let's consider the case that you release once in a week. If so, it will be efficient if your project runs more than 10 weeks.\nThere is no web services which is closed in 10 weeks (except for the failure), so it is significantly efficient to create automated tests.\nThis suppose project which will be maintained for long term such as web services, so it might be inefficient if your project is entrusted one, which you may release only for once.\nThis is the mathematical evidence that it is significantly efficient to create automated tests in web services projects.\n\nAt first, I define constants.\n\n`a = (Hours to create 1 auto-test)`\n`m = (Hours for 1 manual test)`\n\nIn this case, I define that it takes 10 times as long to create automated test than manual test. (Actually I don't think it takes so long to create automated tests, but I define so here.)\n\n`a = 10 \u00d7 m` ... (1)\n\nI also define:\n\n`t = (total times to run test for the software)`\n\nThen you need `(t \u00d7 m)` hours for manual test at the total. ... (2)\n\nYou need almost no additional time to run automated test.\nSo derived from (2), you should create automated test if\n`a < (t \u00d7 m)` ... (3)\n\nDerived from (1), (3) can be transformed as:\n\n`(10 \u00d7 m) < (t \u00d7 m)`\n\nSo you should create automated test if:\n\n`10 < t`\n\nSo in this definition, it is efficient to create if you have to test for more than 10 times.\n\nIn web service / mobile service projects, many projects introduces continuous integration. So you release so frequently. In large scale company such as Github, I hear they release several times in a day.\nAs a principle, you have to test all functions before the releases.\n\nOur project is run with small number of people, so maybe we don't release everyday. Let's consider the case that you release once in a week. If so, it will be efficient if your project runs more than 10 weeks.\nThere is no web services which is closed in 10 weeks (except for the failure), so it is significantly efficient to create automated tests.\n\nThis suppose project which will be maintained for long term such as web services, so it might be inefficient if your project is entrusted one, which you may release only for once.\n", "tags": ["agile", "CI"]}