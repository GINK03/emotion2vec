{"context": "\n\nWhat's this?\nhttps://developer.android.com/things/sdk/pio/gpio.html\n\u306e\u7ffb\u8a33\n\n\u6c4e\u7528\u5165\u51fa\u529b\uff08GPIO\uff09\n\u6c4e\u7528\u5165\u51fa\u529b\u30d4\u30f3\uff08GPIO\u30d4\u30f3\uff09\u306f\u30d7\u30c3\u30b7\u30e5\u30dc\u30bf\u30f3\u30b9\u30a4\u30c3\u30c1\u306e\u3088\u3046\u306aOn/Off\u3092\u53d6\u5f97\u3059\u308b\u5165\u529b\u3084\u3001LED\u306e\u3088\u3046\u306aOn/Off\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u30c7\u30d0\u30a4\u30b9\u5411\u3051\u306e\u51fa\u529b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u5404GPIO\u30d4\u30f3\u306f\u5165\u529b\u7528\u3001\u51fa\u529b\u7528\u305d\u308c\u305e\u308c\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u3001HIGH\u3068LOW\u306e\u72b6\u614b\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u5165\u529b\u30e2\u30fc\u30c9\u306e\u3068\u304d\u306f\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u304cOn\u304bOff\u304b\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u51fa\u529b\u30e2\u30fc\u30c9\u306e\u3068\u304d\u306f\u30d4\u30f3\u306e\u72b6\u614b\u3092On\u304bOff\u306e\u3069\u3061\u3089\u304b\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u6ce8\u610f\nGPIO\u30d4\u30f3\u3092\u58ca\u3055\u306a\u3044\u305f\u3081\u306b\u3001\u30ea\u30fc\u30c9\u7dda\u3092\u63a5\u7d9a\u3059\u308b\u524d\u306b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u5165\u51fa\u529b\u5236\u9650\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u3061\u3089\u300cHardware 101\u300d\u304b\u3089\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n\u63a5\u7d9a\u7ba1\u7406\nGPIO\u30dd\u30fc\u30c8\u3068\u306e\u63a5\u7d9a\u3092\u78ba\u7acb\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30dd\u30fc\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u958b\u767a\u3059\u308b\u306b\u3042\u305f\u308a\u3001PeripheralManagerService.getGpioList()\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306a\u30dd\u30fc\u30c8\u540d\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\nPeripheralManagerService manager = new PeripheralManagerService();\nList<String> portList = manager.getGpioList();\nif (portList.isEmpty()) {\n    Log.i(TAG, \"No GPIO port available on this device.\");\n} else {\n    Log.i(TAG, \"List of available ports: \" + portList);\n}\n\n\u63a5\u7d9a\u3059\u3079\u304d\u30dd\u30fc\u30c8\u540d\u304c\u5206\u304b\u308c\u3070\u3001PeripheralManagerService\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\u63a5\u7d9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u30dd\u30fc\u30c8\u306e\u5229\u7528\u304c\u5b8c\u4e86\u3057\u305f\u3089\u63a5\u7d9a\u3092\u9589\u3058\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u958b\u653e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u63a5\u7d9a\u6e08\u307f\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u9589\u3058\u308b\u307e\u3067\u540c\u3058\u30dd\u30fc\u30c8\u3067\u65b0\u305f\u306a\u63a5\u7d9a\u3092\u958b\u59cb\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\u63a5\u7d9a\u3092\u9589\u3058\u308b\u306b\u306fclose()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\npublic class HomeActivity extends Activity {\n    // GPIO Pin Name\n    private static final String GPIO_NAME = ...;\n\n    private Gpio mGpio;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Attempt to access the GPIO\n        try {\n            PeripheralManagerService manager = new PeripheralManagerService();\n            mGpio = manager.openGpio(GPIO_NAME);\n        } catch (IOException e) {\n             Log.w(TAG, \"Unable to access GPIO\", e);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        if (mGpio != null) {\n            try {\n                mGpio.close();\n                mGpio = null;\n            } catch (IOException e) {\n                Log.w(TAG, \"Unable to close GPIO\", e);\n            }\n        }\n    }\n}\n\n\n\u5165\u529b\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\nGPIO\u30dd\u30fc\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u624b\u9806\n\n\nsetDirection()\u30e1\u30bd\u30c3\u30c9\u306bDIRECTION_IN\u3092\u30bb\u30c3\u30c8\u3057\u3066\u5165\u529b\u30e2\u30fc\u30c9\u306b\u3059\u308b\n\nsetActiveType()\u30e1\u30bd\u30c3\u30c9\u306bACTIVE_HIGH \u304b ACTIVE_LOW\u3092\u30bb\u30c3\u30c8\u3057\u3066 HIGH\uff08IOREF\u306b\u8fd1\u4f3c\uff09\u3068LOW\uff080\u306b\u8fd1\u4f3c\uff09\u306e\u3069\u3061\u3089\u304ctrue\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u304b\u3092\u8a2d\u5b9a\u3059\u308b\n\ngetValue()\u30e1\u30bd\u30c3\u30c9\u3067\u73fe\u5728\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n\u4ee5\u4e0b\u304cHIGH\u306e\u6642\u306btrue\u3092\u8fd4\u3059\u5165\u529b\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\u4f8b\u3067\u3059\npublic void configureInput(Gpio gpio) throws IOException {\n    // Initialize the pin as an input\n    gpio.setDirection(Gpio.DIRECTION_IN);\n    // High voltage is considered active\n    gpio.setActiveType(Gpio.ACTIVE_HIGH);\n\n    ...\n\n    // Read the active high pin state\n    if (gpio.getValue()) {\n        // Pin is HIGH\n    } else {\n        // Pin is LOW\n    }\n}\n\n\n\u72b6\u614b\u306e\u5909\u5316\u3092\u5f85\u3061\u53d7\u3051\u308b\n\u5165\u529b\u30e2\u30fc\u30c9\u306b\u30bb\u30c3\u30c8\u3057\u305fGPIO\u306fHIGH\u304bLOW\u306b\u72b6\u614b\u304c\u5909\u5316\u3057\u305f\u306e\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n1 . GpioCallback\u3092\u30dd\u30fc\u30c8\u306b\u767b\u9332\n2 . setEdgeTriggerType()\u30e1\u30bd\u30c3\u30c9\u3067\u4f55\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u3059\u308b\u304b\u30bb\u30c3\u30c8\u3057\u307e\u3059\n\n\n\n\u5024\n\u610f\u5473\n\n\n\n\nGpio.EDGE_NONE\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff08\u5024\u306e\u5909\u5316\u3092\u691c\u77e5\u3057\u306a\u3044\uff09\n\n\nGpio.EDGE_BOTH\nHIGH\u3082\u3057\u304f\u306fLOW\u306b\u5024\u304c\u5909\u5316\u3057\u305f\u6642\n\n\nGpio.EDGE_RISING\nLOW\u304b\u3089HIGH\u306b\u5024\u304c\u5909\u5316\u3057\u305f\u6642\n\n\nGpio.EDGE_FALLING\nHIGH\u304b\u3089LOW\u306b\u5024\u304c\u5909\u5316\u3057\u305f\u6642\n\n\n\n3 . onGpioEdge()\u30e1\u30bd\u30c3\u30c9\u3067true\u3092\u8fd4\u3059\u3053\u3068\u3067\u6b21\u306e\u72b6\u614b\u5909\u5316\u3092\u5f85\u6a5f\u3057\u307e\u3059\n\u4ee5\u4e0b\u304c\u3059\u3079\u3066\u306e\u72b6\u614b\u3092\u5f85\u6a5f\u3059\u308b\u4f8b\u3067\u3059\npublic void configureInput(Gpio gpio) throws IOException {\n    // Initialize the pin as an input\n    gpio.setDirection(Gpio.DIRECTION_IN);\n    // Low voltage is considered active\n    gpio.setActiveType(Gpio.ACTIVE_LOW);\n\n    // Register for all state changes\n    gpio.setEdgeTriggerType(Gpio.EDGE_BOTH);\n    gpio.registerGpioCallback(mGpioCallback);\n}\n\nprivate GpioCallback mGpioCallback = new GpioCallback() {\n    @Override\n    public boolean onGpioEdge(Gpio gpio) {\n        // Read the active low pin state\n        if (mDevice.getValue()) {\n            // Pin is LOW\n        } else {\n            // Pin is HIGH\n        }\n\n        // Continue listening for more interrupts\n        return true;\n    }\n\n    @Override\n    public void onGpioError(Gpio gpio, int error) {\n        Log.w(TAG, gpio + \": Error event \" + error);\n    }\n};\n\n4 . \u5165\u529b\u30a4\u30d9\u30f3\u30c8\u306e\u691c\u77e5\u304c\u4e0d\u8981\u306b\u306a\u3063\u305f\u5834\u5408\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u89e3\u9664\u3057\u3066\u304f\u3060\u3055\u3044\npublic class HomeActivity extends Activity {\n    private Gpio mGpio;\n    ...\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n\n        // Begin listening for interrupt events\n        mGpio.registerGpioCallback(mGpioCallback);\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        // Interrupt events no longer necessary\n        mGpio.unregisterGpioCallback(mGpioCallback);\n    }\n}\n\n\n\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f\n\nGPIO\u306e\u72b6\u614b\u3092\u5909\u66f4\u3059\u308b\u624b\u9806\n\n\nsetDirection()\u30e1\u30bd\u30c3\u30c9\u306bDIRECTION_OUT_INITIALLY_HIGH\u304bDIRECTION_OUT_INITIALLY_LOW\u306e\u3069\u3061\u3089\u304b\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\u8a72\u5f53\u30dd\u30fc\u30c8\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306e\u6b63\u3057\u3044\u72b6\u614b\u3092\u521d\u671f\u5316\u6642\u306b\u30bb\u30c3\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\n\nsetActiveType()\u30e1\u30bd\u30c3\u30c9\u306bACTIVE_HIGH \u304b ACTIVE_LOW\u3092\u30bb\u30c3\u30c8\u3057\u3066 HIGH\uff08IOREF\u306b\u8fd1\u4f3c\uff09\u3068LOW\uff080\u306b\u8fd1\u4f3c\uff09\u306e\u3069\u3061\u3089\u304ctrue\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u304b\u3092\u8a2d\u5b9a\u3059\u308b\n\nsetValue()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u72b6\u614b\u3092\u5909\u66f4\u3057\u307e\u3059\n\n\u4ee5\u4e0b\u3067\u521d\u671f\u5024\u3092HIGH\u3068\u3057\u3066setValue()\u3067\u72b6\u614b\u3092LOW\u306b\u5909\u5316\u3055\u305b\u307e\u3059\npublic void configureOutput(Gpio gpio) throws IOException {\n    // Initialize the pin as a high output\n    gpio.setDirection(Gpio.DIRECTION_OUT_INITIALLY_HIGH);\n    // Low voltage is considered active\n    gpio.setActiveType(Gpio.ACTIVE_LOW);\n\n    ...\n\n    // Toggle the value to be LOW\n    gpio.setValue(true);\n}\n\n# What's this?\nhttps://developer.android.com/things/sdk/pio/gpio.html\n\u306e\u7ffb\u8a33\n\n# \u6c4e\u7528\u5165\u51fa\u529b\uff08GPIO\uff09\n[\u6c4e\u7528\u5165\u51fa\u529b](https://ja.wikipedia.org/wiki/GPIO)\u30d4\u30f3\uff08GPIO\u30d4\u30f3\uff09\u306f\u30d7\u30c3\u30b7\u30e5\u30dc\u30bf\u30f3\u30b9\u30a4\u30c3\u30c1\u306e\u3088\u3046\u306aOn/Off\u3092\u53d6\u5f97\u3059\u308b\u5165\u529b\u3084\u3001LED\u306e\u3088\u3046\u306aOn/Off\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u30c7\u30d0\u30a4\u30b9\u5411\u3051\u306e\u51fa\u529b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u5404GPIO\u30d4\u30f3\u306f\u5165\u529b\u7528\u3001\u51fa\u529b\u7528\u305d\u308c\u305e\u308c\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u3001HIGH\u3068LOW\u306e\u72b6\u614b\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u5165\u529b\u30e2\u30fc\u30c9\u306e\u3068\u304d\u306f\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u304cOn\u304bOff\u304b\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u51fa\u529b\u30e2\u30fc\u30c9\u306e\u3068\u304d\u306f\u30d4\u30f3\u306e\u72b6\u614b\u3092On\u304bOff\u306e\u3069\u3061\u3089\u304b\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n## \u6ce8\u610f\nGPIO\u30d4\u30f3\u3092\u58ca\u3055\u306a\u3044\u305f\u3081\u306b\u3001\u30ea\u30fc\u30c9\u7dda\u3092\u63a5\u7d9a\u3059\u308b\u524d\u306b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u5165\u51fa\u529b\u5236\u9650\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u3061\u3089\u300c[Hardware 101](https://developer.android.com/things/hardware/hardware-101.html#analog_and_digital_io)\u300d\u304b\u3089\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n# \u63a5\u7d9a\u7ba1\u7406\nGPIO\u30dd\u30fc\u30c8\u3068\u306e\u63a5\u7d9a\u3092\u78ba\u7acb\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30dd\u30fc\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u958b\u767a\u3059\u308b\u306b\u3042\u305f\u308a\u3001**PeripheralManagerService.getGpioList()**\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306a\u30dd\u30fc\u30c8\u540d\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n```\nPeripheralManagerService manager = new PeripheralManagerService();\nList<String> portList = manager.getGpioList();\nif (portList.isEmpty()) {\n    Log.i(TAG, \"No GPIO port available on this device.\");\n} else {\n    Log.i(TAG, \"List of available ports: \" + portList);\n}\n```\n\n\u63a5\u7d9a\u3059\u3079\u304d\u30dd\u30fc\u30c8\u540d\u304c\u5206\u304b\u308c\u3070\u3001**PeripheralManagerService**\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\u63a5\u7d9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u30dd\u30fc\u30c8\u306e\u5229\u7528\u304c\u5b8c\u4e86\u3057\u305f\u3089\u63a5\u7d9a\u3092\u9589\u3058\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u958b\u653e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u63a5\u7d9a\u6e08\u307f\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u9589\u3058\u308b\u307e\u3067\u540c\u3058\u30dd\u30fc\u30c8\u3067\u65b0\u305f\u306a\u63a5\u7d9a\u3092\u958b\u59cb\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\u63a5\u7d9a\u3092\u9589\u3058\u308b\u306b\u306f**close()**\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```\npublic class HomeActivity extends Activity {\n    // GPIO Pin Name\n    private static final String GPIO_NAME = ...;\n\n    private Gpio mGpio;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Attempt to access the GPIO\n        try {\n            PeripheralManagerService manager = new PeripheralManagerService();\n            mGpio = manager.openGpio(GPIO_NAME);\n        } catch (IOException e) {\n             Log.w(TAG, \"Unable to access GPIO\", e);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        if (mGpio != null) {\n            try {\n                mGpio.close();\n                mGpio = null;\n            } catch (IOException e) {\n                Log.w(TAG, \"Unable to close GPIO\", e);\n            }\n        }\n    }\n}\n```\n\n# \u5165\u529b\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n## GPIO\u30dd\u30fc\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u624b\u9806\n1. **setDirection()**\u30e1\u30bd\u30c3\u30c9\u306b**DIRECTION_IN**\u3092\u30bb\u30c3\u30c8\u3057\u3066\u5165\u529b\u30e2\u30fc\u30c9\u306b\u3059\u308b\n2. **setActiveType()\u30e1\u30bd\u30c3\u30c9**\u306b**ACTIVE_HIGH** \u304b **ACTIVE_LOW**\u3092\u30bb\u30c3\u30c8\u3057\u3066 HIGH\uff08IOREF\u306b\u8fd1\u4f3c\uff09\u3068LOW\uff080\u306b\u8fd1\u4f3c\uff09\u306e\u3069\u3061\u3089\u304ctrue\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u304b\u3092\u8a2d\u5b9a\u3059\u308b\n3. **getValue()**\u30e1\u30bd\u30c3\u30c9\u3067\u73fe\u5728\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n\u4ee5\u4e0b\u304cHIGH\u306e\u6642\u306btrue\u3092\u8fd4\u3059\u5165\u529b\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\u4f8b\u3067\u3059\n\n```\npublic void configureInput(Gpio gpio) throws IOException {\n    // Initialize the pin as an input\n    gpio.setDirection(Gpio.DIRECTION_IN);\n    // High voltage is considered active\n    gpio.setActiveType(Gpio.ACTIVE_HIGH);\n\n    ...\n\n    // Read the active high pin state\n    if (gpio.getValue()) {\n        // Pin is HIGH\n    } else {\n        // Pin is LOW\n    }\n}\n```\n\n## \u72b6\u614b\u306e\u5909\u5316\u3092\u5f85\u3061\u53d7\u3051\u308b\n\u5165\u529b\u30e2\u30fc\u30c9\u306b\u30bb\u30c3\u30c8\u3057\u305fGPIO\u306fHIGH\u304bLOW\u306b\u72b6\u614b\u304c\u5909\u5316\u3057\u305f\u306e\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n1 . **GpioCallback**\u3092\u30dd\u30fc\u30c8\u306b\u767b\u9332\n2 . **setEdgeTriggerType()**\u30e1\u30bd\u30c3\u30c9\u3067\u4f55\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u3059\u308b\u304b\u30bb\u30c3\u30c8\u3057\u307e\u3059\n\n| \u5024 | \u610f\u5473 |\n|:-:|:-:|\n| Gpio.EDGE_NONE  | \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff08\u5024\u306e\u5909\u5316\u3092\u691c\u77e5\u3057\u306a\u3044\uff09  |\n| Gpio.EDGE_BOTH  | HIGH\u3082\u3057\u304f\u306fLOW\u306b\u5024\u304c\u5909\u5316\u3057\u305f\u6642  |\n| Gpio.EDGE_RISING  | LOW\u304b\u3089HIGH\u306b\u5024\u304c\u5909\u5316\u3057\u305f\u6642  |\n| Gpio.EDGE_FALLING  | HIGH\u304b\u3089LOW\u306b\u5024\u304c\u5909\u5316\u3057\u305f\u6642  |\n\n3 . **onGpioEdge()**\u30e1\u30bd\u30c3\u30c9\u3067true\u3092\u8fd4\u3059\u3053\u3068\u3067\u6b21\u306e\u72b6\u614b\u5909\u5316\u3092\u5f85\u6a5f\u3057\u307e\u3059\n\n\n\u4ee5\u4e0b\u304c\u3059\u3079\u3066\u306e\u72b6\u614b\u3092\u5f85\u6a5f\u3059\u308b\u4f8b\u3067\u3059\n\n```\npublic void configureInput(Gpio gpio) throws IOException {\n    // Initialize the pin as an input\n    gpio.setDirection(Gpio.DIRECTION_IN);\n    // Low voltage is considered active\n    gpio.setActiveType(Gpio.ACTIVE_LOW);\n\n    // Register for all state changes\n    gpio.setEdgeTriggerType(Gpio.EDGE_BOTH);\n    gpio.registerGpioCallback(mGpioCallback);\n}\n\nprivate GpioCallback mGpioCallback = new GpioCallback() {\n    @Override\n    public boolean onGpioEdge(Gpio gpio) {\n        // Read the active low pin state\n        if (mDevice.getValue()) {\n            // Pin is LOW\n        } else {\n            // Pin is HIGH\n        }\n\n        // Continue listening for more interrupts\n        return true;\n    }\n\n    @Override\n    public void onGpioError(Gpio gpio, int error) {\n        Log.w(TAG, gpio + \": Error event \" + error);\n    }\n};\n```\n\n4 . \u5165\u529b\u30a4\u30d9\u30f3\u30c8\u306e\u691c\u77e5\u304c\u4e0d\u8981\u306b\u306a\u3063\u305f\u5834\u5408\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u89e3\u9664\u3057\u3066\u304f\u3060\u3055\u3044\n\n```\npublic class HomeActivity extends Activity {\n    private Gpio mGpio;\n    ...\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n\n        // Begin listening for interrupt events\n        mGpio.registerGpioCallback(mGpioCallback);\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        // Interrupt events no longer necessary\n        mGpio.unregisterGpioCallback(mGpioCallback);\n    }\n}\n```\n\n# \u51fa\u529b\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f\n## GPIO\u306e\u72b6\u614b\u3092\u5909\u66f4\u3059\u308b\u624b\u9806\n\n1. **setDirection()**\u30e1\u30bd\u30c3\u30c9\u306b**DIRECTION_OUT_INITIALLY_HIGH**\u304b**DIRECTION_OUT_INITIALLY_LOW**\u306e\u3069\u3061\u3089\u304b\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\u8a72\u5f53\u30dd\u30fc\u30c8\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306e\u6b63\u3057\u3044\u72b6\u614b\u3092\u521d\u671f\u5316\u6642\u306b\u30bb\u30c3\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\n2. **setActiveType()\u30e1\u30bd\u30c3\u30c9**\u306b**ACTIVE_HIGH** \u304b **ACTIVE_LOW**\u3092\u30bb\u30c3\u30c8\u3057\u3066 HIGH\uff08IOREF\u306b\u8fd1\u4f3c\uff09\u3068LOW\uff080\u306b\u8fd1\u4f3c\uff09\u306e\u3069\u3061\u3089\u304ctrue\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u304b\u3092\u8a2d\u5b9a\u3059\u308b\n3. **setValue()**\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u72b6\u614b\u3092\u5909\u66f4\u3057\u307e\u3059\n\n\u4ee5\u4e0b\u3067\u521d\u671f\u5024\u3092HIGH\u3068\u3057\u3066**setValue()**\u3067\u72b6\u614b\u3092LOW\u306b\u5909\u5316\u3055\u305b\u307e\u3059\n\n```\npublic void configureOutput(Gpio gpio) throws IOException {\n    // Initialize the pin as a high output\n    gpio.setDirection(Gpio.DIRECTION_OUT_INITIALLY_HIGH);\n    // Low voltage is considered active\n    gpio.setActiveType(Gpio.ACTIVE_LOW);\n\n    ...\n\n    // Toggle the value to be LOW\n    gpio.setValue(true);\n}\n```\n", "tags": ["AndroidThings", "Android", "RaspberryPi", "Raspberrypi3", "Things"]}