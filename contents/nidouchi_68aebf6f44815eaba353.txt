{"context": " More than 1 year has passed since last update.Scala\u52c9\u5f37\u306e\u305f\u3081\u306b\u300c\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u300d\u306e\u554f\u984c\u306fScala\u3067\u3082\u89e3\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u65b0\u3057\u3044\u89e3\u6cd5\u304c\u601d\u3044\u6d6e\u304b\u3070\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u300c\u3069\u3046\u66f8\u304f\u300d\u4e3b\u50ac\u8005\u306e\u934b\u8c37\u3055\u3093\u306e\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u89e3\u6cd5http://qiita.com/items/0a9fbd1d33ccfd533dc6 \u3092scala\u306b\u79fb\u690d\u3057\u3088\u3046\u3068\u3057\u3066\u8272\u3005\u30cf\u30de\u308a\u307e\u3057\u305f\u3002\n[\u30cf\u30de\u308a\u305d\u306e\uff11]16\u9032\u6587\u5b57\u5217Int\u5909\u63db\n\u304a\u984c\u304c16\u9032\u6587\u5b57\u5217\u306a\u306e\u3067Int\u306b\u5909\u63db\u3057\u305f\u3044\u3002\u57fa\u6570\u6307\u5b9a\u3067\u304d\u308b\u5909\u63db\u30e1\u30bd\u30c3\u30c9\u3002\nInteger.parseInt(\u6587\u5b57\u5217,\u57fa\u6570)\n\u6587\u5b57\u5217\u306b[0-9]\u4ee5\u5916\u304c\u3042\u308b\u3068\u4f8b\u5916\u3092\u5410\u304f\u300216\u9032\u5909\u63db\u306b\u306f\u4f7f\u3048\u306a\u3044\u30fb\u30fb\u3002\nInteger.valueOf(\u6587\u5b57\u5217,\u57fa\u6570)\n\u666e\u901a\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3001\u304c\"80000000\"\u306e\u3088\u3046\u306b\u7b26\u53f7bit\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u4f8b\u5916\u306b\u30fb\u30fb\u3002\nLong.valueOf(\u6587\u5b57\u5217,\u57fa\u6570)\n\u305d\u3093\u306a\u30e1\u30bd\u30c3\u30c9\u7121\u3044\u3068\u3044\u308f\u308c\u308b\u3002\nscala\u306eLong\u3082java\u306eLong\u306e\u6a5f\u80fd\u3092\u3001\u305d\u306e\u307e\u307e\u4f7f\u3048\u308c\u3070\u3044\u3044\u306e\u306b\u30fb\u30fb\u3002\n\u3067\u3001\ndef toInt(base:Int):Int = java.lang.Long.valueOf(self, base).intValue\n\n\u3053\u3093\u306a\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n[\u30cf\u30de\u308a\u305d\u306e2]\u30d3\u30c3\u30c8\u6f14\u7b97\n\u4e0a\u8a18\u3067\u554f\u984c\u89e3\u6c7a\u3068\u601d\u3063\u3066\u5b9f\u884c\u3059\u308b\u3068\u89e3\u3051\u308b\u554f\u984c\u3082\u3042\u308b\u304c\u3001\u305d\u306e\u5f8c\u505c\u6b62\u3002\u660e\u3089\u304b\u306b\u30eb\u30fc\u30d7\u3002\n\u30eb\u30fc\u30d7\u3057\u305d\u3046\u306a\u7b87\u6240\u3092\u8ffd\u3063\u305f\u3089\u30d3\u30c3\u30c8\u30b7\u30d5\u30c8\u304c\u602a\u3057\u3044\u3002\nREPL\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\nscala> \"%x\".format(0x80000000>>1)\nres1: String = c0000000\n\n\u671f\u5f85\u3057\u305f\u7d50\u679c\u306f\nres1: String = 40000000\n\n\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7b26\u53f7\u30d3\u30c3\u30c8\u30aa\u30f3\u306e\u307e\u307e\u30b7\u30d5\u30c8\u3057\u3066\u304f\u308b\u3088\u3046\u3067\u3059\u3002\n\u56de\u907f\u30b3\u30fc\u30c9\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u30b7\u30d5\u30c8\u6f14\u7b97\u5b50\u3092>>>\u306b\u3059\u308b\u3060\u3051\u3067\u3001\u3044\u3044\u3088\u3046\u3067\u30fb\u30fb\u3002\n\u3067\u3001\u4ee5\u4e0b\u30bd\u30fc\u30b9\u3067\u3059\u3002\nimplicit class NumString(self:String) {\n  def toInt(base:Int):Int = java.lang.Long.valueOf(self, base).intValue\n}\nimplicit class FormatInt(self:Int) {\n  def toString(format:String):String = format.format(self)\n}\n\ndef solve(src:String):String = {\n  val divSrc = src.split(\"/\").toList.map{_.toInt(16)}\n  val w = divSrc.head\n  val b = divSrc.last\n  val field = ((0xffffffff) & ~3) & ~w\n\n  List(\n    (1, (\"111110\"*5+\"00\").toInt(2)),\n    (-1, (\"011111\"*5+\"00\").toInt(2)),\n    (6, -1),\n    (-6, -1)\n  ).map{sm =>\n    sm match {\n      case (shift:Int, mask:Int) => {\n        var r, fire = b;\n        while(fire != 0) {\n          r |= fire\n          if (shift > 0)\n            fire = ((fire&mask) >>> shift) & field\n          else\n            fire = ((fire&mask) << (-shift)) & field\n        }\n        r\n      }\n    }\n  }.foldLeft(0){_|_}.toString(\"%08x\")\n}\n\nprobs.split(\"\\n\").foreach(line => line.split(\",\").toList match {\n  case List(no,q,a) => {\n    var ans = solve(q)\n    println(no + \"\\t\" + ans + \"\\t\" + (if (ans==a) \"o\" else \"x\"))\n  }\n  case _ =>\n})\n\ndef probs =\n\"\"\"\n0,802b1200/01400c20,53c40cfc\n1,28301068/84080504,d64fef94\n2,100a4010/80010004,e241850c\n3,81020400/000000fc,0e3cfbfc\n4,80225020/7e082080,7fdd24d0\n5,01201200/40102008,fe1861fc\n6,00201000/01000200,43c48f08\n7,00891220/81020408,ff060c1c\n8,410033c0/0c300000,3cf0c000\n9,00000000/01400a00,7bf7bf78\n10,00000000/20000a00,fca2bf28\n11,00000000/00000000,00000000\n12,00cafe00/00000000,00000000\n13,aaabaaaa/50000000,51441040\n14,a95a95a8/56a56a54,56a56a54\n15,104fc820/80201010,ea30345c\n16,4a940214/05000008,05000008\n17,00908000/05000200,ff043f48\n18,00c48c00/fe1861fc,ff3873fc\n19,00000004/81020400,fffffff0\n20,111028b0/40021100,e08fd744\n21,6808490c/01959000,17f7b650\n22,30821004/81014040,c75de5f8\n23,0004c810/10003100,fe4937c4\n24,12022020/88200000,edf08208\n25,2aa92098/01160000,45165964\n26,00242940/10010004,fc43c43c\n27,483c2120/11004c00,33c3de10\n28,10140140/44004a04,eda3fe3c\n29,0c901d38/72602200,f36da280\n\"\"\"\n\nScala\u52c9\u5f37\u306e\u305f\u3081\u306b\u300c\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u300d\u306e\u554f\u984c\u306fScala\u3067\u3082\u89e3\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u65b0\u3057\u3044\u89e3\u6cd5\u304c\u601d\u3044\u6d6e\u304b\u3070\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u300c\u3069\u3046\u66f8\u304f\u300d\u4e3b\u50ac\u8005\u306e\u934b\u8c37\u3055\u3093\u306e\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u89e3\u6cd5http://qiita.com/items/0a9fbd1d33ccfd533dc6 \u3092scala\u306b\u79fb\u690d\u3057\u3088\u3046\u3068\u3057\u3066\u8272\u3005\u30cf\u30de\u308a\u307e\u3057\u305f\u3002\n\n[\u30cf\u30de\u308a\u305d\u306e\uff11]16\u9032\u6587\u5b57\u5217Int\u5909\u63db\n\u304a\u984c\u304c16\u9032\u6587\u5b57\u5217\u306a\u306e\u3067Int\u306b\u5909\u63db\u3057\u305f\u3044\u3002\u57fa\u6570\u6307\u5b9a\u3067\u304d\u308b\u5909\u63db\u30e1\u30bd\u30c3\u30c9\u3002\nInteger.parseInt(\u6587\u5b57\u5217,\u57fa\u6570)\n\u6587\u5b57\u5217\u306b[0-9]\u4ee5\u5916\u304c\u3042\u308b\u3068\u4f8b\u5916\u3092\u5410\u304f\u300216\u9032\u5909\u63db\u306b\u306f\u4f7f\u3048\u306a\u3044\u30fb\u30fb\u3002\nInteger.valueOf(\u6587\u5b57\u5217,\u57fa\u6570)\n\u666e\u901a\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3001\u304c\"80000000\"\u306e\u3088\u3046\u306b\u7b26\u53f7bit\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u4f8b\u5916\u306b\u30fb\u30fb\u3002\nLong.valueOf(\u6587\u5b57\u5217,\u57fa\u6570)\n\u305d\u3093\u306a\u30e1\u30bd\u30c3\u30c9\u7121\u3044\u3068\u3044\u308f\u308c\u308b\u3002\nscala\u306eLong\u3082java\u306eLong\u306e\u6a5f\u80fd\u3092\u3001\u305d\u306e\u307e\u307e\u4f7f\u3048\u308c\u3070\u3044\u3044\u306e\u306b\u30fb\u30fb\u3002\n\u3067\u3001\n\n```scala\ndef toInt(base:Int):Int = java.lang.Long.valueOf(self, base).intValue\n```\n\n\u3053\u3093\u306a\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n[\u30cf\u30de\u308a\u305d\u306e2]\u30d3\u30c3\u30c8\u6f14\u7b97\n\u4e0a\u8a18\u3067\u554f\u984c\u89e3\u6c7a\u3068\u601d\u3063\u3066\u5b9f\u884c\u3059\u308b\u3068\u89e3\u3051\u308b\u554f\u984c\u3082\u3042\u308b\u304c\u3001\u305d\u306e\u5f8c\u505c\u6b62\u3002\u660e\u3089\u304b\u306b\u30eb\u30fc\u30d7\u3002\n\u30eb\u30fc\u30d7\u3057\u305d\u3046\u306a\u7b87\u6240\u3092\u8ffd\u3063\u305f\u3089\u30d3\u30c3\u30c8\u30b7\u30d5\u30c8\u304c\u602a\u3057\u3044\u3002\nREPL\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\n```\nscala> \"%x\".format(0x80000000>>1)\nres1: String = c0000000\n```\n\n\u671f\u5f85\u3057\u305f\u7d50\u679c\u306f\n\n```\nres1: String = 40000000\n```\n\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7b26\u53f7\u30d3\u30c3\u30c8\u30aa\u30f3\u306e\u307e\u307e\u30b7\u30d5\u30c8\u3057\u3066\u304f\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u56de\u907f\u30b3\u30fc\u30c9\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u30b7\u30d5\u30c8\u6f14\u7b97\u5b50\u3092>>>\u306b\u3059\u308b\u3060\u3051\u3067\u3001\u3044\u3044\u3088\u3046\u3067\u30fb\u30fb\u3002\n\u3067\u3001\u4ee5\u4e0b\u30bd\u30fc\u30b9\u3067\u3059\u3002\n\n```scala\nimplicit class NumString(self:String) {\n  def toInt(base:Int):Int = java.lang.Long.valueOf(self, base).intValue\n}\nimplicit class FormatInt(self:Int) {\n  def toString(format:String):String = format.format(self)\n}\n\ndef solve(src:String):String = {\n  val divSrc = src.split(\"/\").toList.map{_.toInt(16)}\n  val w = divSrc.head\n  val b = divSrc.last\n  val field = ((0xffffffff) & ~3) & ~w\n\n  List(\n    (1, (\"111110\"*5+\"00\").toInt(2)),\n    (-1, (\"011111\"*5+\"00\").toInt(2)),\n    (6, -1),\n    (-6, -1)\n  ).map{sm =>\n    sm match {\n      case (shift:Int, mask:Int) => {\n        var r, fire = b;\n        while(fire != 0) {\n          r |= fire\n          if (shift > 0)\n            fire = ((fire&mask) >>> shift) & field\n          else\n            fire = ((fire&mask) << (-shift)) & field\n        }\n        r\n      }\n    }\n  }.foldLeft(0){_|_}.toString(\"%08x\")\n}\n\nprobs.split(\"\\n\").foreach(line => line.split(\",\").toList match {\n  case List(no,q,a) => {\n    var ans = solve(q)\n    println(no + \"\\t\" + ans + \"\\t\" + (if (ans==a) \"o\" else \"x\"))\n  }\n  case _ =>\n})\n\ndef probs =\n\"\"\"\n0,802b1200/01400c20,53c40cfc\n1,28301068/84080504,d64fef94\n2,100a4010/80010004,e241850c\n3,81020400/000000fc,0e3cfbfc\n4,80225020/7e082080,7fdd24d0\n5,01201200/40102008,fe1861fc\n6,00201000/01000200,43c48f08\n7,00891220/81020408,ff060c1c\n8,410033c0/0c300000,3cf0c000\n9,00000000/01400a00,7bf7bf78\n10,00000000/20000a00,fca2bf28\n11,00000000/00000000,00000000\n12,00cafe00/00000000,00000000\n13,aaabaaaa/50000000,51441040\n14,a95a95a8/56a56a54,56a56a54\n15,104fc820/80201010,ea30345c\n16,4a940214/05000008,05000008\n17,00908000/05000200,ff043f48\n18,00c48c00/fe1861fc,ff3873fc\n19,00000004/81020400,fffffff0\n20,111028b0/40021100,e08fd744\n21,6808490c/01959000,17f7b650\n22,30821004/81014040,c75de5f8\n23,0004c810/10003100,fe4937c4\n24,12022020/88200000,edf08208\n25,2aa92098/01160000,45165964\n26,00242940/10010004,fc43c43c\n27,483c2120/11004c00,33c3de10\n28,10140140/44004a04,eda3fe3c\n29,0c901d38/72602200,f36da280\n\"\"\"\n```\n", "tags": ["Scala", "\u3069\u3046\u66f8\u304f", "\u52c9\u5f37\u4f1a", "Ruby"]}