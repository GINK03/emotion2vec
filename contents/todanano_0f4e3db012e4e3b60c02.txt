{"context": " More than 1 year has passed since last update.\nmyreg.cpp\n\n#include <sys/types.h>\n#include <regex.h>\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n#include <string>\n#include <map>\n\ntypedef std::string Str;\ntypedef std::map< int, Str > Mis;\ntypedef std::map< int, Mis > Mimis;\nint myreg( Str input_string, Str pattern, Mimis &ret, size_t back_ref_size = 42 );\n\nint myreg( Str input_string, Str pattern, Mimis &result, size_t back_ref_size ) {\n\n    int ret = 0;\n    regex_t rg;\n\n    // cflag\u306f\u3001\u3068\u308a\u3042\u3048\u305aREG_EXTENDED\u3067\u3002\u52d5\u4f5c\u304c\u3069\u3046\u5909\u5316\u3059\u308b\u304b\u306f\u3001regcomp\u306emanpage\u3092\u53c2\u7167\u3002\n    ret = regcomp( &rg, pattern.c_str(), REG_EXTENDED );\n\n    if( ret ) {\n\n        char buf[1024] = \"\";\n        regerror( ret, &rg, buf, 1024 );\n\n        fprintf( stderr, \"regcomp failed. %s\\n\", buf );\n\n        regfree( &rg );\n        return( 1 );\n\n    }\n\n    int match_count = 0;\n\n    while( 1 ) {\n\n        regmatch_t *matching = new regmatch_t[back_ref_size];\n\n        // eflag\u306f\u3001\u3068\u308a\u3042\u3048\u305a0\u3067\u3002\u52d5\u4f5c\u304c\u3069\u3046\u5909\u5316\u3059\u308b\u304b\u306f\u3001regexec\u306emanpage\u3092\u53c2\u7167\u3002\n        ret = regexec( &rg, input_string.c_str(), back_ref_size, matching, 0 );\n\n        if( ret ) {\n\n            // \u3053\u308c\u306f\u30a8\u30e9\u30fc\u3067\u306f\u306a\u304f\u3001\u5358\u306b\u30de\u30c3\u30c1\u3059\u308b\u3082\u306e\u304c\u7121\u304f\u306a\u3063\u305f\u3060\u3051\n            delete [] matching;\n            break;\n\n        }\n\n        int first_end_index = -1; // \u6700\u521d\u306e\u672b\u5c3e\u306e\u4f4d\u7f6e\u3092\u53d6\u308a\u51fa\u3059\u3002\n        int back_ref_count = 0;\n\n        for( size_t i = 0; i < back_ref_size; ++i, ++back_ref_count ) {\n\n            int start_index = matching[i].rm_so;\n            int end_index = matching[i].rm_eo;\n\n            if( start_index == -1 || end_index == -1 ) {\n\n                break;\n\n            }\n\n            if( i == 0 ) {\n\n                first_end_index = end_index;\n\n                // \u7a7a\u30de\u30c3\u30c1\u5bfe\u7b56\u3002\n                if( start_index == end_index ) {\n\n                    ++first_end_index;\n\n                }\n\n            }\n\n            int len = end_index - start_index;\n\n            if( len ) {\n\n                result[match_count][back_ref_count] = input_string.substr( start_index, len );\n\n            } else {\n\n                result[match_count][back_ref_count] = \"\";\n\n            }\n\n        }\n\n        if( first_end_index == -1 ) {\n\n            delete [] matching;\n            break;\n\n        }\n\n        input_string = input_string.substr( first_end_index );\n\n        if( input_string.empty() ) {\n\n            delete [] matching;\n            break;\n\n        }\n\n        ++match_count;\n\n    }\n\n    regfree( &rg );\n    return( 0 );\n\n}\n\nint main( int argc, char **argv ) {\n\n    if( argc != 3 ) {\n\n        printf( \"./myreg input_string pattern\\n\\n\" );\n        return( 1 );\n\n    }\n\n    printf( \"input_string:\\n%s\\n\", argv[1] );\n    printf( \"\\n\" );\n    printf( \"pattern:\\n%s\\n\", argv[2] );\n    printf( \"\\n\" );\n\n    Mimis result;\n\n    if( myreg( argv[1], argv[2], result ) ) {\n\n        return( 1 );\n\n    }\n\n    printf( \"result:\\n\" );\n\n    for( Mimis::iterator it = result.begin(), eit = result.end(); it != eit; ++it ) {\n\n        for( Mis::iterator itt = it->second.begin(), eitt = it->second.end(); itt != eitt; ++itt ) {\n\n            printf( \"%d %d %s\\n\", it->first, itt->first, itt->second.c_str() );\n\n        }\n\n    }\n\n    return( 0 );\n\n}\n\n\n\n\nC\u3084C++\u3067\u6b63\u898f\u8868\u73fe\u3063\u3066\u3001\u306a\u3093\u3060\u304b\u3055\u304f\u3063\u3068\u4f7f\u3048\u308b\u306e\u304c\u7121\u3044\u3088\u3046\u306a\u3002\n\u305d\u3093\u306a\u3053\u3093\u306a\u3067\u3001POSIX regex \u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306b\u3002\n\u305d\u3057\u3066\u3001\u4f5c\u3063\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u5168\u4f53\u30de\u30c3\u30c1\uff0b\u5f8c\u65b9\u53c2\u7167\u3082\u53d6\u308a\u51fa\u305b\u307e\u3059\u3002\n\uff08\u5f8c\u65b9\u53c2\u7167\u306e\u51e6\u7406\u3068\u304b\u3082\u3001\u81ea\u5206\u3067\u5168\u90e8\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u304b\u3001\u5927\u5909\u3067\u3059\u3088\u306d\uff09\n\u4ee5\u4e0b\u5b9f\u884c\u7d50\u679c\n\n[todanano@localhost samba]$ ./myreg 'abc123def' '(abc).*(def)'\ninput_string:\nabc123def\n\npattern:\n(abc).*(def)\n\nresult:\n0 0 abc123def\n0 1 abc\n0 2 def\n[todanano@localhost samba]$\n[todanano@localhost samba]$ ./myreg '192.168.0.1-192.168.0.254' '([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})'\ninput_string:\n192.168.0.1-192.168.0.254\n\npattern:\n([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\n\nresult:\n0 0 192.168.0.1\n0 1 192\n0 2 168\n0 3 0\n0 4 1\n1 0 192.168.0.254\n1 1 192\n1 2 168\n1 3 0\n1 4 254\n[todanano@localhost samba]$\n[todanano@localhost samba]$\n\n\n\n```c++:myreg.cpp\n\n#include <sys/types.h>\n#include <regex.h>\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n#include <string>\n#include <map>\n\ntypedef std::string Str;\ntypedef std::map< int, Str > Mis;\ntypedef std::map< int, Mis > Mimis;\nint myreg( Str input_string, Str pattern, Mimis &ret, size_t back_ref_size = 42 );\n\nint myreg( Str input_string, Str pattern, Mimis &result, size_t back_ref_size ) {\n\t\n\tint ret = 0;\n\tregex_t rg;\n\t\n\t// cflag\u306f\u3001\u3068\u308a\u3042\u3048\u305aREG_EXTENDED\u3067\u3002\u52d5\u4f5c\u304c\u3069\u3046\u5909\u5316\u3059\u308b\u304b\u306f\u3001regcomp\u306emanpage\u3092\u53c2\u7167\u3002\n\tret = regcomp( &rg, pattern.c_str(), REG_EXTENDED );\n\t\n\tif( ret ) {\n\t\t\n\t\tchar buf[1024] = \"\";\n\t\tregerror( ret, &rg, buf, 1024 );\n\t\t\n\t\tfprintf( stderr, \"regcomp failed. %s\\n\", buf );\n\t\t\n\t\tregfree( &rg );\n\t\treturn( 1 );\n\t\t\n\t}\n\t\n\tint match_count = 0;\n\t\n\twhile( 1 ) {\n\t\t\n\t\tregmatch_t *matching = new regmatch_t[back_ref_size];\n\t\t\n\t\t// eflag\u306f\u3001\u3068\u308a\u3042\u3048\u305a0\u3067\u3002\u52d5\u4f5c\u304c\u3069\u3046\u5909\u5316\u3059\u308b\u304b\u306f\u3001regexec\u306emanpage\u3092\u53c2\u7167\u3002\n\t\tret = regexec( &rg, input_string.c_str(), back_ref_size, matching, 0 );\n\t\t\n\t\tif( ret ) {\n\t\t\t\n\t\t\t// \u3053\u308c\u306f\u30a8\u30e9\u30fc\u3067\u306f\u306a\u304f\u3001\u5358\u306b\u30de\u30c3\u30c1\u3059\u308b\u3082\u306e\u304c\u7121\u304f\u306a\u3063\u305f\u3060\u3051\n\t\t\tdelete [] matching;\n\t\t\tbreak;\n\t\t\t\n\t\t}\n\t\t\n\t\tint first_end_index = -1; // \u6700\u521d\u306e\u672b\u5c3e\u306e\u4f4d\u7f6e\u3092\u53d6\u308a\u51fa\u3059\u3002\n\t\tint back_ref_count = 0;\n\t\t\n\t\tfor( size_t i = 0; i < back_ref_size; ++i, ++back_ref_count ) {\n\t\t\t\n\t\t\tint start_index = matching[i].rm_so;\n\t\t\tint end_index = matching[i].rm_eo;\n\t\t\t\n\t\t\tif( start_index == -1 || end_index == -1 ) {\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif( i == 0 ) {\n\t\t\t\t\n\t\t\t\tfirst_end_index = end_index;\n\t\t\t\t\n\t\t\t\t// \u7a7a\u30de\u30c3\u30c1\u5bfe\u7b56\u3002\n\t\t\t\tif( start_index == end_index ) {\n\t\t\t\t\t\n\t\t\t\t\t++first_end_index;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tint len = end_index - start_index;\n\t\t\t\n\t\t\tif( len ) {\n\t\t\t\t\n\t\t\t\tresult[match_count][back_ref_count] = input_string.substr( start_index, len );\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tresult[match_count][back_ref_count] = \"\";\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tif( first_end_index == -1 ) {\n\t\t\t\n\t\t\tdelete [] matching;\n\t\t\tbreak;\n\t\t\t\n\t\t}\n\t\t\n\t\tinput_string = input_string.substr( first_end_index );\n\t\t\n\t\tif( input_string.empty() ) {\n\t\t\t\n\t\t\tdelete [] matching;\n\t\t\tbreak;\n\t\t\t\n\t\t}\n\t\t\n\t\t++match_count;\n\t\t\n\t}\n\t\n\tregfree( &rg );\n\treturn( 0 );\n\t\n}\n\nint main( int argc, char **argv ) {\n\t\n\tif( argc != 3 ) {\n\t\t\n\t\tprintf( \"./myreg input_string pattern\\n\\n\" );\n\t\treturn( 1 );\n\t\t\n\t}\n\t\n\tprintf( \"input_string:\\n%s\\n\", argv[1] );\n\tprintf( \"\\n\" );\n\tprintf( \"pattern:\\n%s\\n\", argv[2] );\n\tprintf( \"\\n\" );\n\t\n\tMimis result;\n\t\n\tif( myreg( argv[1], argv[2], result ) ) {\n\t\t\n\t\treturn( 1 );\n\t\t\n\t}\n\t\n\tprintf( \"result:\\n\" );\n\t\n\tfor( Mimis::iterator it = result.begin(), eit = result.end(); it != eit; ++it ) {\n\t\t\n\t\tfor( Mis::iterator itt = it->second.begin(), eitt = it->second.end(); itt != eitt; ++itt ) {\n\t\t\t\n\t\t\tprintf( \"%d %d %s\\n\", it->first, itt->first, itt->second.c_str() );\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn( 0 );\n\t\n}\n\n\n```\n\nC\u3084C++\u3067\u6b63\u898f\u8868\u73fe\u3063\u3066\u3001\u306a\u3093\u3060\u304b\u3055\u304f\u3063\u3068\u4f7f\u3048\u308b\u306e\u304c\u7121\u3044\u3088\u3046\u306a\u3002\n\n\u305d\u3093\u306a\u3053\u3093\u306a\u3067\u3001POSIX regex \u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306b\u3002\n\n\u305d\u3057\u3066\u3001\u4f5c\u3063\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n\u5168\u4f53\u30de\u30c3\u30c1\uff0b\u5f8c\u65b9\u53c2\u7167\u3082\u53d6\u308a\u51fa\u305b\u307e\u3059\u3002\n\uff08\u5f8c\u65b9\u53c2\u7167\u306e\u51e6\u7406\u3068\u304b\u3082\u3001\u81ea\u5206\u3067\u5168\u90e8\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u304b\u3001\u5927\u5909\u3067\u3059\u3088\u306d\uff09\n\n\u4ee5\u4e0b\u5b9f\u884c\u7d50\u679c\n\n<pre>\n\n[todanano@localhost samba]$ ./myreg 'abc123def' '(abc).*(def)'\ninput_string:\nabc123def\n\npattern:\n(abc).*(def)\n\nresult:\n0 0 abc123def\n0 1 abc\n0 2 def\n[todanano@localhost samba]$\n[todanano@localhost samba]$ ./myreg '192.168.0.1-192.168.0.254' '([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})'\ninput_string:\n192.168.0.1-192.168.0.254\n\npattern:\n([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\n\nresult:\n0 0 192.168.0.1\n0 1 192\n0 2 168\n0 3 0\n0 4 1\n1 0 192.168.0.254\n1 1 192\n1 2 168\n1 3 0\n1 4 254\n[todanano@localhost samba]$\n[todanano@localhost samba]$\n\n</pre>\n", "tags": ["C\u8a00\u8a9e", "C", "C++", "Linux"]}