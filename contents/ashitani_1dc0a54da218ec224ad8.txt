{"tags": ["DeepLearning", "Chainer", "Python", "\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0", "\u6a5f\u68b0\u5b66\u7fd2"], "context": " More than 1 year has passed since last update.y=exy=exy=e^x \u3068\u3044\u3046\u95a2\u6570\u3092\u3044\u308f\u3086\u308b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067\u5b66\u7fd2\u3059\u308b\u3001\u3068\u3044\u3046\u304a\u984c\u3092\u901a\u3058\u3066\u3001chainer\u3092\u5b66\u3093\u3067\u307f\u307e\u3059\u3002\u4e0b\u8a18\u306fchainer1.6.2.1\u3067\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\u540c\u3058\u5185\u5bb9\u3092Jupyter notebook\u5f62\u5f0f\u3067\u3053\u3061\u3089\u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u52d5\u304b\u3057\u306a\u304c\u3089\u78ba\u8a8d\u3057\u305f\u3044\u65b9\u306f\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305a\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u985e\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\nimport numpy as np\nimport chainer\nfrom chainer import cuda, Function, gradient_check, Variable, optimizers, serializers, utils\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\n\n\u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n\u307e\u305a\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\u4eca\u56de\u306f0\u304b\u30891.0\u307e\u3067\u306e\u6d6e\u52d5\u5c0f\u6570xxx\u306b\u5bfe\u3057\u3066exexe^x\u304c\u671f\u5f85\u5024\u3067\u3059\u3002\n\u30d0\u30c3\u30c1\u5b66\u7fd2\u3068\u3044\u3046\u624b\u6cd5\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u969b\u306bnnn \u500b\u306e\u554f\u984c\u30fb\u89e3\u7b54\u306e\u30bb\u30c3\u30c8\u3092\u8fd4\u3059\u95a2\u6570\u304c\u3042\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\ndef get_batch(n):\n    x = np.random.random(n)\n    y = np.exp(x)\n    return x,y\n\nprint get_batch(2)\n\n(array([ 0.25425583,  0.87356596]), array([ 1.28950165,  2.39543768]))\n\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u8a2d\u8a08\n\u6b21\u306b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u8a2d\u8a08\u3057\u307e\u3059\u3002\ny=exy=exy=e^x \u306f\u975e\u7dda\u5f62\u95a2\u6570\u306a\u306e\u3067\u3001\u7dda\u5f62\u95a2\u6570\u3060\u3051\u3067\u306e\u8fd1\u4f3c\u3067\u306f\u5341\u5206\u306a\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u5165\u529b\u3092xxx\u3068\u3057\u305f\u3068\u304d\u3001y=Wx+by=Wx+by=Wx+b\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u7dda\u5f62\u95a2\u6570\u3068\u547c\u3073\u307e\u3059\u3002WWW\u3092\u91cd\u307f\u3001bbb\u3092\u30d0\u30a4\u30a2\u30b9\u3068\u547c\u3073\u307e\u3059\u304c\u3001\u3069\u3061\u3089\u3082\u305f\u3060\u306e\u884c\u5217\u3067\u3059\u3002\u3064\u307e\u308a\u76f4\u7dda\uff08\u307f\u305f\u3044\u306a\u3082\u306e\uff09\u3067\u3059\u306d\u3002\n\u3055\u3066\u3001\u3053\u306e\u7dda\u5f62\u6f14\u7b97\u306b\u5bfe\u3057\u3066\u3001\u975e\u7dda\u5f62\u95a2\u6570\u306b\u3088\u308b\u6d3b\u6027\u5316\u5c64\u304c\u5165\u308b\u3060\u3051\u3067\u3082\u3046\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3068\u547c\u3093\u3067\u3044\u3044\u3089\u3057\u3044\u3067\u3059\u3002\u305d\u308c\u3092\u591a\u5c64\u306b\u3057\u305f\u3082\u306e\u304c\u30c7\u30a3\u30fc\u30d7\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3001\u3044\u308f\u3086\u308b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067\u4f7f\u308f\u308c\u308b\u975e\u7dda\u5f62\u95a2\u6570\u3067\u3059\u3002\u3069\u308c\u3050\u3089\u3044\u6df1\u3051\u308c\u3070\u30c7\u30a3\u30fc\u30d7\u3068\u547c\u3093\u3067\u3044\u3044\u306e\u304b\u4e0d\u660e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f3\u6bb5\u3050\u3089\u3044\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306a\u5206\u985e\u554f\u984c\u3060\u3068relu\u3068\u3044\u3046\u975e\u7dda\u5f62\u95a2\u6570\u304c\u975e\u5e38\u306b\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u304c\u3001relu\u3060\u3068\u5fae\u5206\u6d88\u5931\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u4eca\u56de\u306fleaky_relu\u3092\u4f7f\u3044\u307e\u3059\uff08\u3053\u306e\u554f\u984c\u306e\u5834\u5408\u306frelu\u3060\u3068\u53ce\u675f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\uff09\u3002leaky_relu\u306f\u5165\u529b\u304c\u8ca0\u306a\u30890.2\u3092\u304b\u3051\u308b\u3001\u3068\u3044\u3046\u3060\u3051\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u95a2\u6570\u3067\u3059\u3002\n\u305d\u308c\u305e\u308c\u306e\u7dda\u5f62\u5c64\u306e\u3082\u3064W,bW,bW,b\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3059\u308b\u3053\u3068\u3067\u3001y=exy=exy=e^x\u306b\u76f8\u5f53\u3059\u308b\u3088\u3046\u306a\u95a2\u6570\u3092\u8868\u73fe\u3057\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u69cb\u6210\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002L1,L2,L3\u306f\u305d\u308c\u305e\u308c\u7dda\u5f62\u95a2\u6570\u3067\u3001\u3044\u3063\u305f\u3093\u4e2d\u9593\u5c64h1,h2h1,h2h1,h2\u306e\u6b21\u5143\u309216\u300132\u3068\u5897\u3084\u3057\u305f\u3042\u3068\u306b\u3001\u6700\u5f8c\u306b1\u6b21\u5143\u306b\u843d\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u3067\u306fLnLnL_n\u306e\u30d1\u30e9\u30e1\u30fc\u30bfW,bW,bW,b\u3092Wn,bnWn,bnW_n,b_n\u306e\u3088\u3046\u306b\u8868\u8a18\u3057\u307e\u3059\u3002\n\u4e2d\u9593\u5c64(\u96a0\u308c\u5c64\uff09\u3067\u3042\u308bh1,h2h1,h2h1,h2\u3067\u30c1\u30e3\u30cd\u30eb\u3092\u305f\u304f\u3055\u3093\u6301\u3066\u308b\uff08\u3064\u307e\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bfWn,bnWn,bnW_n,b_n\u306e\u884c\u5217\u304c\u5de8\u5927\u3067\u3042\u308b\uff09\u3068\u3044\u3046\u3053\u3068\u304c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8868\u73fe\u529b\u3092\u8868\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\u9014\u4e2d\u306b\u975e\u7dda\u5f62\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u3001\n\\begin{eqnarray*}\n h_3 &=& W_3 (W_2(W_1x+b_1)+b_2)+b_3 \\\\\n     &=& W_3 W_2 W_1 x + W_3W_2b_1 + W_3b_2 + b_3 \\\\\n     &=& W x + b\n\\end{eqnarray*}\nh3=W3(W2(W1x+b1)+b2)+b3=W3W2W1x+W3W2b1+W3b2+b3=Wx+bh3===W3(W2(W1x+b1)+b2)+b3W3W2W1x+W3W2b1+W3b2+b3Wx+b{\\begin{eqnarray*}\n h_3 &=& W_3 (W_2(W_1x+b_1)+b_2)+b_3 \\\\\n     &=& W_3 W_2 W_1 x + W_3W_2b_1 + W_3b_2 + b_3 \\\\\n     &=& W x + b\n\\end{eqnarray*}\n}\n\u3068\u306a\u308a\u307e\u3059\u3002W=W3W2W1,b=W3W2b1+W3b2+b3W=W_3 W_2 W_1, b=W_3 W_2b_1+W_3b_2+b_3 \u3067\u3059\u304c\u3001W1,W2,W3W_1,W_2,W_3\u306a\u3069\u306e\u884c\u5217\u304c\u3069\u3093\u306a\u306b\u5927\u304d\u3044\u884c\u5217\u3060\u3063\u305f\u3068\u3057\u3066\u3082\u5408\u6210\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308bW,bW,b\u306f\u3068\u3082\u306b\u30b9\u30ab\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002x,W,bx,W,b\u304c\u3059\u3079\u3066\u30b9\u30ab\u30e9\u30fc\u3068\u3044\u3046\u3053\u3068\u306f\u3001y=Wx+by=Wx+b\u306f\u3064\u307e\u308a\u50be\u304d\u3068\u5207\u7247\u3060\u3051\u3092\u5909\u3048\u3089\u308c\u308b\u76f4\u7dda\u3067\u3001\u3053\u308c\u3092exe^x\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u308d\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u307e\u3042\u7121\u7406\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u3068\u3053\u308d\u304c\u975e\u7dda\u5f62\u8981\u7d20\u304c\u5165\u308b\u3060\u3051\u3067W1,W2,W3W_1,W_2,W_3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3059\u3079\u3066\u751f\u304d\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u6700\u521d\u306e\u65b9\u3067\u8ff0\u3079\u305f\u300c\u975e\u7dda\u5f62\u8981\u7d20\u304c\u3042\u308c\u3070\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3068\u547c\u3093\u3067\u3044\u3044\u300d\u3068\u3044\u3046\u306e\u306f\u3053\u3046\u3044\u3046\u7406\u7531\u306a\u308f\u3051\u3067\u3059\u3002\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u5b9f\u88c5\n\u3053\u308c\u3092chainer\u3067\u66f8\u304d\u4e0b\u3057\u307e\u3059\u3002\nchainer\u3067\u306f\u3001\u6700\u9069\u5316\u3055\u308c\u308b\u3079\u304d\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u95a2\u6570\u3092L(\u30ea\u30f3\u30af)\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3057\u306e\u95a2\u6570\u3092F(\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3)\u3068\u547c\u3093\u3067\u533a\u5225\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306fver1.5\u3042\u305f\u308a\u304b\u3089\u5c0e\u5165\u3055\u308c\u305f\u6982\u5ff5\u3060\u305d\u3046\u3067\u3001\u30ea\u30f3\u30af\u3092\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3067\u66f8\u3044\u305f\u308a\u3057\u3066\u3044\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u3088\u304f\u898b\u304b\u3051\u307e\u3059\u3002\u30ea\u30f3\u30af\u306fL.Linear(\u5165\u529b\u30b5\u30a4\u30ba,\u51fa\u529b\u30b5\u30a4\u30ba)\u306e\u3088\u3046\u306b\u5927\u6587\u5b57\u59cb\u307e\u308a\u3067\u3001\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u306fF.linear(x,W,b)\u306e\u3088\u3046\u306b\u5c0f\u6587\u5b57\u59cb\u307e\u308a\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5927\u6587\u5b57\u59cb\u307e\u308a\u306e\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u304c\u4f7f\u308f\u308c\u3066\u3044\u305f\u3088\u3046\u3067\u3001F.Linear()\u3068L.Linear()\u3068F.linear()\u304c\u3042\u308a\u307e\u3059\u3002\u524d\u8005\uff12\u3064\u306f\u7b49\u4fa1\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3063\u305f\u95a2\u6570\u3001\u6700\u5f8c\u306e\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u305f\u3060\u306e\u95a2\u6570\u3001\u3067\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u7406\u89e3\u3059\u308b\u307e\u3067\u306b\u3060\u3044\u3076\u6df7\u4e71\u3057\u307e\u3057\u305f\u3002\n\u3059\u3053\u3057\u8a71\u304c\u305d\u308c\u307e\u3057\u305f\u3002\u6b21\u306b\u30ea\u30f3\u30af\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3092\u6e21\u3057\u3066\u30c1\u30a7\u30a4\u30f3\u3068\u547c\u3070\u308c\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002Python\u306e\u30af\u30e9\u30b9\u306e\u66f8\u304d\u65b9\u306b\u6163\u308c\u3066\u3044\u306a\u3044\u3068\u9762\u98df\u3089\u3044\u307e\u3059\u304c\u3001\u30ea\u30f3\u30af\u4e00\u89a7\u3092\u5b9a\u7fa9\u3059\u308b__init__()\u3068\u51fa\u529b\u307e\u3067\u306e\u8a08\u7b97\u30b0\u30e9\u30d5\u3092\u8fd4\u3059\u95a2\u6570\u3060\u3051\u304c\u3042\u308c\u3070\u826f\u3044\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u30ed\u30b9\u3092__cal__()\u3067\u8fd4\u3059\u3053\u3068\u306b\u3057\u307e\u3059\u3002__call__()\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u306f \nm=MyChain()\nloss=m(x,t)\n\n\u306e\u3088\u3046\u306b\u547c\u3079\u307e\u3059\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u542b\u3080\u95a2\u6570\u306f__init__()\u306b\u3001\u305d\u308c\u4ee5\u5916\u306f__call()__\u3084\u4ed6\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u4f7f\u3046\u3088\u3046\u306b\u5207\u308a\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u306d\u3002L.Linear()\u306f\u5165\u529b\u30c1\u30e3\u30cd\u30eb\u3001\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u3001\u306e\u6570\u3060\u3051\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6e21\u305b\u3070\u3044\u3044\u306e\u3067TensorFlow\u3088\u308a\u306f\u308b\u304b\u306b\u8a18\u8ff0\u306f\u7c21\u5358\u3067\u3059\u3002\nclass MyChain(Chain):\n    def __init__(self):\n        super(MyChain, self).__init__(\n             l1=L.Linear(1, 16),  # \u5165\u529b1\u30c1\u30e3\u30cd\u30eb\u3001\u51fa\u529b16\u30c1\u30e3\u30cd\u30eb\n             l2=L.Linear(16, 32),\n             l3=L.Linear(32, 1),\n        )\n\n    def __call__(self,x,t):\n        # x\u3092\u5165\u529b\u3057\u305f\u969b\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u51fa\u529b\u3068\u3001\u56de\u7b54t \u3068\u306e\u5dee\u5206\u3092\u8fd4\u3057\u307e\u3059\u3002\n        # \u4eca\u56de\u306f\u81ea\u4e57\u8aa4\u5dee\u3092\u4f7f\u3044\u307e\u3059\u3002\n        return F.mean_squared_error(self.predict(x),t)\n\n    def  predict(self,x):\n        # x\u3092\u5165\u529b\u3057\u305f\u969b\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u51fa\u529b\u3092\u8fd4\u3057\u307e\u3059\u3002\n        h1 = F.leaky_relu(self.l1(x))\n        h2 = F.leaky_relu(self.l2(h1))\n        h3 = F.leaky_relu(self.l3(h2))\n        return h3\n\n    def get(self,x):\n        # x\u3092\u5b9f\u6570\u3067\u5165\u529b\u3057\u305f\u3089\u51fa\u529b\u3092\u5b9f\u6570\u3067\u8fd4\u3059\u3068\u3044\u3046\u4fbf\u5229\u95a2\u6570\u3067\u3059\u3002\n        # numpy.ndarray\u3068Valiable\u3092\u7d4c\u7531\u3059\u308b\u306e\u3067\u5c11\u3005\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u3002\n        return self.predict(Variable(np.array([x]).astype(np.float32).reshape(1,1))).data[0][0]\n\n\u3053\u306e\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u3001\u7279\u5b9a\u306e\u6226\u7565\u306b\u3057\u305f\u304c\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\u4eca\u56de\u306fAdam()\u3068\u3044\u3046\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\nmodel = MyChain()\noptimizer = optimizers.Adam()\noptimizer.setup(model)\n\n\n\u5b66\u7fd2\n\u3044\u3088\u3044\u3088\u5b66\u7fd2\u30eb\u30fc\u30d7\u3092\u56de\u3057\u307e\u3059\u3002\nchainer\u306e\u4f5c\u6cd5\u3068\u3057\u3066\u3001(\u30d0\u30c3\u30c1\u8ef8, \u30c7\u30fc\u30bf\u8ef81,(\u30c7\u30fc\u30bf\u8ef82),..)\u3068\u3044\u3046\u6b21\u5143\u69cb\u9020\u3092\u6301\u3064 np.float32 \u306e\u591a\u6b21\u5143\u914d\u5217\uff08\u30c6\u30f3\u30bd\u30eb\uff09\u3092Variable\u30af\u30e9\u30b9\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u3067\u3084\u308a\u3068\u308a\u3057\u307e\u3059\u3002Variable\u30af\u30e9\u30b9\u304b\u3089\u6570\u5024\u306e\u5b9f\u4f53\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f data\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\u3002...\u6587\u5b57\u306b\u3059\u308b\u3068\u3055\u3063\u3071\u308a\u308f\u304b\u308a\u307e\u305b\u3093\u306d\u3002\n\u30d0\u30c3\u30c1\u3068\u3044\u3046\u306e\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u304b\u3089\u3044\u304f\u3064\u304b\u629c\u304d\u53d6\u308b\u3053\u3068\u3092\u6307\u3057\u307e\u3059\u3002\u30d0\u30c3\u30c1\u6570\u3068\u3044\u3046\u306e\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3068\u3044\u3046\u8868\u73fe\u3092\u3068\u3063\u305f\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u3064\u306d\u306b\u8907\u6570\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u306b\u5bfe\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\u3059\u308f\u3051\u3067\u3059\u304c\u3001\u3053\u308c\u306b\u3055\u3089\u306b\u30c7\u30fc\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3068\u3044\u3046\u6b21\u5143\u304c\u52a0\u308f\u308a\u3001\u3064\u304e\u306b\u30c7\u30fc\u30bf\u306e\u8868\u73fe\u306b\u5fc5\u8981\u306a\u6b21\u5143\u304c\u8db3\u3055\u308c\u305f\u3001\u591a\u6b21\u5143\u914d\u5217\uff08\u30c6\u30f3\u30bd\u30eb\uff09\u3092\u6271\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u5165\u529b\u30c7\u30fc\u30bf\u304c1\u6b21\u5143\u306a\u306e\u3067\u3001\n  (\u30d0\u30c3\u30c1\u8ef8\u3001\u30c7\u30fc\u30bf\u8ef8\uff09\n\u3067\u826f\u3044\u3067\u3059\u304c\u30012\u6b21\u5143\u753b\u50cf\u306eRGB\uff13\u30c1\u30e3\u30cd\u30eb\u3067\u69cb\u6210\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306f\n  (\u30d0\u30c3\u30c1\u8ef8\u3001\u30c1\u30e3\u30cd\u30eb\u8ef8\uff1d\u8272\u8ef8\u3001\u7e26\u8ef8\u3001\u6a2a\u8ef8\uff09\n\u306e\u3088\u3046\u306b\u6e21\u3057\u307e\u3059\u3002\u6163\u308c\u306a\u3044\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u306d\u3002\u79c1\u306f\u4e0b\u306e\u3088\u3046\u306a\u56f3\u3092\u30a4\u30e1\u30fc\u30b8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b66\u7fd2\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306f\n\n\u5fae\u5206\u306e\u521d\u671f\u5316\n\u30d5\u30a9\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\uff08\u30cd\u30c3\u30c8\u3092\u9806\u65b9\u5411\u306b\u8fbf\u3063\u3066\u51fa\u529b\u3092\u8a08\u7b97\u3059\u308b\u3002\u3053\u306e\u5834\u5408\u306f model(x_,t_) ) \n\u30d0\u30c3\u30af\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\uff08\u30cd\u30c3\u30c8\u3092\u9006\u5411\u304d\u306b\u8fbf\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5fae\u5206\u3092\u8a08\u7b97\u3059\u308b\uff09\n\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 \uff08\u5fae\u5206\u3092\u7528\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\u3059\u308b\uff09\n\n\u304c\u4e00\u9023\u306e\u6d41\u308c\u3067\u3059\u3002optimizer.update(model) \u3067\u3053\u306e\u6d41\u308c\u3092\u4e00\u6c17\u306b\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u3069\u3046\u305bforward\u306e\u9014\u4e2d\u7d4c\u904e\u3092\u8997\u304d\u305f\u304f\u306a\u308b\u306e\u3067\u3001\u79c1\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u3079\u3066\u66f8\u304f\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\nlosses =[]\nfor i in range(10000):\n    x,y = get_batch(100)\n    x_ = Variable(x.astype(np.float32).reshape(100,1))\n    t_ = Variable(y.astype(np.float32).reshape(100,1))\n\n    model.zerograds()\n    loss=model(x_,t_)\n    loss.backward()\n    optimizer.update()\n\n    losses.append(loss.data)\n\nplt.plot(losses)\nplt.yscale('log')\n\n\n\n\u6a2a\u8ef8\u306f\u30eb\u30fc\u30d7\u56de\u6570\u3001\u7e26\u8ef8\u306floss\u3092log\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u3044\u3044\u611f\u3058\u306b\u6e1b\u3063\u3066\u307e\u3059\u306d\u3002\n\n\u7d50\u679c\u306e\u78ba\u8a8d\n\u3067\u306f\u3001\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u30020.2\u3092\u5165\u308c\u305f\u3089exp(0.2)\u306b\u8fd1\u3044\u5024\u304c\u51fa\u308b\u3067\u3057\u3087\u3046\u304b\u3002\nprint model.get(0.2)\nprint np.exp(0.2)\n\n1.22299\n1.22140275816\n\n\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\u3067\u306f0\u304b\u30891\u306e\u7bc4\u56f2\u3067\u3069\u308c\u4f4d\u95a2\u6570\u30d5\u30a3\u30c3\u30c8\u3067\u304d\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\u3002\nx=np.linspace(0,1,100)\nplt.plot(x,np.exp(x))\nplt.hold(True)\np=model.predict(Variable(x.astype(np.float32).reshape(100,1))).data\n_=plt.plot(x, p,\"r\")\n\n\n\u9752\u304c\u6b63\u89e3\u3067\u3001\u8d64\u304c\u5b66\u7fd2\u7d50\u679c\u3067\u3059\u3002\n\u3044\u3044\u611f\u3058\u3067\u3059\u3002\u7dda\u5f62\u95a2\u6570\u3060\u3051\u3067\u306f\u3053\u306e\u30d5\u30a3\u30c3\u30c8\u6027\u80fd\u306f\u51fa\u307e\u305b\u3093\u3088\u306d\u3002\u30cd\u30c3\u30c8\u306e\u6df1\u3055\u3001\u5e45\uff08\u6b21\u5143\u6570\uff09\u3001\u306a\u3069\u3092\u3044\u308d\u3044\u308d\u5909\u3048\u3066\u307f\u308b\u3068\u9762\u767d\u3044\u3067\u3059\u304c\u3001\u3088\u304f\u8a00\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u5e45\u3088\u308a\u3082\u975e\u7dda\u5f62\u8981\u7d20\u3068\u6df1\u3055\u304c\u91cd\u8981\u3001\u3068\u3044\u3046\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u5b66\u7fd2\u7d50\u679c\u30e2\u30c7\u30eb\u306e\u89b3\u5bdf\n\u3055\u3066\u3001\u7d50\u679c\u5b66\u7fd2\u5f8c\u306e\u30e2\u30c7\u30eb\u306f\u3069\u3046\u3044\u3046\u4fc2\u6570\u3067\u3067\u304d\u3066\u3044\u308b\u306e\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u305f\u3068\u3048\u3070\u6700\u521d\u306e\u30ec\u30a4\u30e4l1\u306e\u91cd\u307fWW\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\nmodel.l1.W.data\n\narray([[ 0.31513408],\n       [ 0.75111604],\n       [ 0.48637491],\n       [-1.34837043],\n       [ 0.0388922 ],\n       [-1.29884255],\n       [-0.49960354],\n       [ 0.35992688],\n       [ 0.25262424],\n       [-2.14205575],\n       [ 0.83558381],\n       [-0.61535668],\n       [ 2.15679836],\n       [-0.17658199],\n       [-1.36228967],\n       [-0.5751065 ]], dtype=float32)\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u3001\u305f\u3068\u3048\u3070\u4e0b\u8a18\u306e\u3088\u3046\u306anumpy\u3067\u540c\u3058\u51fa\u529b\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u308c\u307e\u3059\u3002\ndef leaky_relu(x):\n    # \u8981\u7d20\u3054\u3068\u306e\u6f14\u7b97\u306b\u3059\u308b\u305f\u3081\u306b\u4e00\u5ea6ndarray\u3092\u7d4c\u7531\u3059\u308b\n    m = np.array((x<0))\n    x = np.array(x)\n    return np.matrix((x*0.2)*m + x*(~m)) \n\ndef pseudo_exp(x):\n    x = np.matrix(x)\n    W1 = np.matrix(model.l1.W.data)\n    b1 = np.matrix(model.l1.b.data)\n    W2 = np.matrix(model.l2.W.data)\n    b2 = np.matrix(model.l2.b.data)\n    W3 = np.matrix(model.l3.W.data)\n    b3 = np.matrix(model.l3.b.data)\n\n    h1 = leaky_relu(W1*x+b1.T)\n    h2 = leaky_relu(W2*h1+b2.T)\n    y = leaky_relu(W3*h2+b3.T)\n    return y\n\nprint pseudo_exp(0.2)\nprint np.exp(0.2)\n\n[[ 1.22299392]]\n1.22140275816\n\nx=np.linspace(0,1,100)\nplt.plot(x,np.exp(x))\nplt.hold(True)\np=pseudo_exp(x.T)\n_=plt.plot(x, p.T,\"r\")\n\n\nmodel.l1.W.data\u306a\u3069\u306e\u4fc2\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u66f8\u304d\u4e0b\u305b\u3070\u3001\u5b8c\u5168\u306bnumpy\u3060\u3051\u3067\u5b66\u7fd2\u7d50\u679c\u30e2\u30c7\u30eb\u3092\u66f8\u3051\u307e\u3059\u3002C\u3084Go\u306a\u3069\u306e\u8a00\u8a9e\u3078\u5909\u63db\u3059\u308b\u306e\u3082\u96e3\u3057\u304f\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u307e\u3042\u3001chainer\u3084numpy\u306f\u5229\u4fbf\u6027\u306e\u5272\u306b\u306f\u5341\u5206\u901f\u3044\u306e\u3067\u3001\u901f\u5ea6\u3060\u3051\u306e\u7406\u7531\u3067\u4ed6\u306e\u8a00\u8a9e\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5b66\u7fd2\u5f8c\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\u3060\u3051\u3067\u3042\u308c\u3070\u3001\u3053\u306e\u624b\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3067chainer\u306a\u3069\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u4f9d\u5b58\u3057\u306a\u3044\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u306e\u306f\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u6709\u7528\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u9014\u4e2d\u7d4c\u904e\u306e\u89b3\u5bdf\u3068\u30bb\u30fc\u30d6\n\u3055\u3066\u3001Jupyter\u4e0a\u3067\u8a66\u884c\u932f\u8aa4\u3059\u308b\u969b\u306b\u3001\u9014\u4e2d\u7d4c\u904e\u3092\u773a\u3081\u305f\u304f\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u9014\u4e2d\u7d4c\u904e\u306e\u30d7\u30ed\u30c3\u30c8\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\u53ce\u675f\u901f\u5ea6\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u300110\u56de\u306b1\u56de\u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001\u30bb\u30fc\u30d6\u91cd\u8981\u3067\u3059\u3002100\u56de\u306b1\u56de\u30bb\u30fc\u30d6\u3057\u307e\u3059\u3002\nlosses =[]\nfrom IPython import display\n\nmodel = MyChain()\noptimizer = optimizers.Adam()\noptimizer.setup(model)\n\nplt.hold(False)\n\nfor i in range(500):\n    x,y = get_batch(100)\n    x_ = Variable(x.astype(np.float32).reshape(100,1))\n    t_ = Variable(y.astype(np.float32).reshape(100,1))\n\n    model.zerograds()\n    loss=model(x_,t_)\n    loss.backward()\n    optimizer.update()\n\n    losses.append(loss.data)\n\n    if i%10==0:\n        plt.plot(losses,\"b\")\n        plt.yscale('log')\n        display.clear_output(wait=True)\n        display.display(plt.gcf())\n    if i%100==0:\n        serializers.save_npz('my.model', model)\n\ndisplay.clear_output(wait=True)\n\n\n\u30bb\u30fc\u30d6\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u51fa\u529b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\nserializers.load_npz('my.model',model)\nmodel.get(0.2)\n\n1.1877015\n\n\n\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3068\u306f\n\u3055\u3066\u3001\u5c11\u3057\u539f\u7406\u7684\u306a\u3068\u3053\u308d\u306b\u8e0f\u307f\u8fbc\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\u305d\u3082\u305d\u3082\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6700\u9069\u5316\u3055\u308c\u308b\u3001\u3068\u3044\u3046\u306e\u306f\u3069\u3046\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\n\u7c21\u5358\u306e\u305f\u3081\u306b\u4e00\u5ea6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7dda\u5f62\u95a2\u6570\uff08y=Wx+by=Wx+b\u3067W,bW,b\u304c\u30b9\u30ab\u30e9\u30fc\u3068\u3044\u3046\u305f\u3060\u306e\u4e00\u6b21\u5f0f\uff09\u306b\u623b\u3057\u3066\u3001\u304b\u3064\u3001\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u30b7\u30f3\u30d7\u30eb\u306aSGD\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u623b\u3057\u307e\u3059\u3002\u30d0\u30c3\u30c1\u30821\u3064\u3060\u3051\u306b\u3057\u307e\u3059\u3002\nW,bW,b \u306e\u521d\u671f\u5024\u3067\u3059\u304c\u3001chainer\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001WW\u304c\u4e71\u6570\u3001bb\u304c00\u306b\u9078\u3070\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u308f\u304b\u308a\u3084\u3059\u3055\u306e\u305f\u3081\u306b\u3001W=0,b=0W=0, b=0\u3092\u521d\u671f\u5024\u3068\u3057\u307e\u3059\u3002\ndef get_batch(n):\n    x=np.random.random(n)\n    y= np.exp(x)\n    return x,y\n\nclass LinearChain(Chain):\n    def __init__(self):\n        super(LinearChain, self).__init__(\n             l1=L.Linear(1, 1,initialW=0.0),\n        )\n\n    def __call__(self,x,t):\n        return F.mean_squared_error(self.predict(x),t)\n\n    def  predict(self,x):\n        return self.l1(x)\n\n    def get(self,x):\n        return self.predict(Variable(np.array([x]).astype(np.float32).reshape(1,1))).data[0][0]\n\ny=Wx+by=Wx+b \u3068\u3044\u3046\u7dda\u5f62\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3001E=(y\u2212t)2E=(y-t)^2 \u3068\u3044\u3046\u81ea\u4e57\u8aa4\u5dee\u3092\u8aa4\u5dee\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u81ea\u4e57\u8aa4\u5dee\u30920\u306b\u8fd1\u3065\u3051\u308b\u305f\u3081\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308bWW\u3068bb\u3092\u66f4\u65b0\u3057\u3066\u3044\u304f\u308f\u3051\u3067\u3059\u304c\u3001\u66f4\u65b0\u306e\u65b9\u5411\u306f\u8aa4\u5deeEE\u3092\u305d\u308c\u305e\u308c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u504f\u5fae\u5206\u3057\u305f\u3082\u306e\u3067\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\n\\varDelta W = \\frac{\\partial E}{\\partial W},\\quad\n\\varDelta b =  \\frac{\\partial E}{\\partial b} \n\u0394W=\u2202E\u2202W,\u0394b=\u2202E\u2202b{\\varDelta W = \\frac{\\partial E}{\\partial W},\\quad\n\\varDelta b =  \\frac{\\partial E}{\\partial b} \n}\n\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5fae\u5206\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u306e\u5f0f\u3092\u5c55\u958b\u3059\u308b\u3068\u3001\n\\begin{eqnarray*}\n\\varDelta W &=& \\frac{\\partial E}{\\partial y} \\frac{\\partial y}{\\partial W} &=& 2 \\left(y-t \\right) x \\\\\n\\varDelta b &=& \\frac{\\partial E}{\\partial y} \\frac{\\partial y}{\\partial b} &=& 2 \\left( y-t \\right) \\\\\n\\end{eqnarray*}\n\u0394W=\u2202E\u2202y\u2202y\u2202W=2(y\u2212t)x\u0394b=\u2202E\u2202y\u2202y\u2202b=2(y\u2212t){\\begin{eqnarray*}\n\\varDelta W &=& \\frac{\\partial E}{\\partial y} \\frac{\\partial y}{\\partial W} &=& 2 \\left(y-t \\right) x \\\\\n\\varDelta b &=& \\frac{\\partial E}{\\partial y} \\frac{\\partial y}{\\partial b} &=& 2 \\left( y-t \\right) \\\\\n\\end{eqnarray*}\n}\n\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u5909\u5f62\u3059\u308b\u3053\u3068\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5fae\u5206\u304c\u3001\u8aa4\u5dee\u306e\u5dee\u5206\u3067\u3042\u308by\u2212ty-t \u3001\u65e2\u77e5\u306e\u5165\u529bxx\u3001\u3067\u8868\u305b\u305f\u308f\u3051\u3067\u3059\u3002\u6f14\u7b97\u306e\u904e\u7a0b\u3067\u3001\u4e0b\u6d41\u3067\u3042\u308b\u8aa4\u5dee\u306e\u5dee\u5206\u304b\u3089\u4e0a\u6d41\u306e\u5f0f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5dee\u5206\u306b\u623b\u3063\u3066\u304f\u308b\u308f\u3051\u306a\u306e\u3067\u3001\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3068\u547c\u3073\u307e\u3059\u3002t,xt,x \u306f\u65e2\u77e5\u3067\u3059\u304c\u3001yy\u306f\u3001\u30d5\u30a9\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3001\u3064\u307e\u308a Wx+bWx+b \u3092\u8a08\u7b97\u3057\u306a\u3044\u3068\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30d5\u30a9\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u306e\u306e\u3061\u306b\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3001\u3068\u3044\u3046\u6f14\u7b97\u3092\u3059\u308c\u3070\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5dee\u5206\u304c\u5f97\u3089\u308c\u308b\u308f\u3051\u3067\u3059\u3002\n\u56f3\u306b\u3057\u3066\u307f\u308b\u3068\u3053\u3046\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\n\u3053\u3046\u3084\u3063\u3066\u8a08\u7b97\u3055\u308c\u305f\u0394W,\u0394b\\varDelta W, \\varDelta b \u3092\u4f7f\u3063\u3066W,bW,b \u3092\u66f4\u65b0\u3057\u307e\u3059\u3002SGD\u306f\u5358\u7d14\u306b\u50be\u304d\u306b\u4e00\u5b9a\u306e\u5b66\u7fd2\u7387\u03b1\\alpha\u3092\u304b\u3051\u305f\u3076\u3093\u3060\u3051\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u3064\u307e\u308a\nW \\leftarrow W-\\alpha \\varDelta W , \\quad b \\leftarrow b-\\alpha\\varDelta b\nW\u2190W\u2212\u03b1\u0394W,b\u2190b\u2212\u03b1\u0394b{W \\leftarrow W-\\alpha \\varDelta W , \\quad b \\leftarrow b-\\alpha\\varDelta b\n}\n\u3068\u3044\u3046\u98a8\u306b\u66f4\u65b0\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\u306a\u304a\u3001chainer\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u03b1=0.01\\alpha=0.01\u3067\u3059\u3002\n\u3053\u306e\u52d5\u304d\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nmodel2 = LinearChain()\noptimizer2 = optimizers.SGD()\noptimizer2.setup(model2)\n\nlosses=[]\ntrace=[]\n\ndef scalar(v):\n    # Valiable\u3092\u30b9\u30ab\u30e9\u30fc\u5024\u306b\u623b\u3059\n    return v.data.ravel()[0]\n\nfor i in range(5):\n    x,y = get_batch(1)\n    x_ = Variable(x.astype(np.float32).reshape(1,1))\n    t_ = Variable(y.astype(np.float32).reshape(1,1))\n\n    model2.zerograds()\n    loss=model2(x_,t_)        \n    loss.backward(retain_grad=True)\n\n    y = scalar(model2.predict(x_))\n    t=scalar(t_)\n    x=scalar(x_)\n    W=scalar(model2.l1.W)\n    b=scalar(model2.l1.b)\n\n    #\u624b\u52d5\u3067\u8a08\u7b97\u3057\u305fdelta_W,delta_b\n    dW_hand = 2*((y-t)*x)\n    db_hand = 2*((y-t))\n\n    #chainer\u304c\u8a08\u7b97\u3057\u305fdelta_W, delta_b\n    dW=model2.l1.W.grad.ravel()[0]\n    db=model2.l1.b.grad.ravel()[0]\n\n    print \"======  step %d  ======\" % i\n    print \"W,b  \\t\\t\\t\\t%2.8f, %2.8f\" % (W,b)\n    print \"2(y-t)x,2(y-t)\\t\\t%2.8f, %2.8f\" % (2*((y-t)*x), 2*((y-t)))\n    print \"\u22bfW,\u22bfb\\t\\t\\t\\t%2.8f, %2.8f\" % (dW,db)   #chainer\u306e\u51fa\u3059delta_W, delta_b\n    print \"W-\u03b1\u22bfW,b-\u03b1\u22bfb \\t\\t%2.8f, %2.8f\" % (W-0.01*dW,b-0.01*db)\n    optimizer2.update()\n\n\n======  step 0  ======\nW,b                 0.00000000, 0.00000000\n2(y-t)x,2(y-t)      -3.58069563, -4.46209097\n\u22bfW,\u22bfb               -3.58069563, -4.46209097\nW-\u03b1\u22bfW,b-\u03b1\u22bfb       0.03580696, 0.04462091\n======  step 1  ======\nW,b                 0.03580695, 0.04462091\n2(y-t)x,2(y-t)      -0.08072093, -1.99062216\n\u22bfW,\u22bfb               -0.08072093, -1.99062216\nW-\u03b1\u22bfW,b-\u03b1\u22bfb       0.03661416, 0.06452713\n======  step 2  ======\nW,b                 0.03661416, 0.06452713\n2(y-t)x,2(y-t)      -1.16285205, -2.84911036\n\u22bfW,\u22bfb               -1.16285205, -2.84911036\nW-\u03b1\u22bfW,b-\u03b1\u22bfb       0.04824269, 0.09301824\n======  step 3  ======\nW,b                 0.04824268, 0.09301823\n2(y-t)x,2(y-t)      -0.44180280, -2.23253369\n\u22bfW,\u22bfb               -0.44180280, -2.23253369\nW-\u03b1\u22bfW,b-\u03b1\u22bfb       0.05266071, 0.11534357\n======  step 4  ======\nW,b                 0.05266071, 0.11534357\n2(y-t)x,2(y-t)      -1.07976472, -2.70742726\n\u22bfW,\u22bfb               -1.07976472, -2.70742726\nW-\u03b1\u22bfW,b-\u03b1\u22bfb       0.06345836, 0.14241784\n\n\u4ee5\u4e0b\uff12\u70b9\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n2(y\u2212t)x,2(y\u2212t)2(y-t)x, 2(y-t)\u3068\u3044\u3046\u624b\u52d5\u8a08\u7b97\u3068\u540c\u3058\u5024\u3092chainer\u306egrad\u304c\u8fd4\u3057\u3066\u3044\u308b\nSGD\u306b\u3088\u3063\u30660.01grad\u3076\u3093\u305a\u3064W,bW,b \u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\n\nchainer\u306eLinear\u306e\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u3001\u591a\u5165\u51fa\u529b\u3067\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u5c11\u3005\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001forward()\u306b\u306fWx+bWx+b\u3001backword()\u306b\u306f\u3001\u5f8c\u6bb5\u306e\u5fae\u5206 grad_outputs\u306bxx\u3092\u304b\u3051\u305f\u3082\u306e\u304cWW\u306e\u5fae\u5206\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002backward()\u306e\u51fa\u529b\u306fx,W,bx,W,b\u306e\u5fae\u5206\u304c\u3059\u3079\u3066\u8fd4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001SGD\u306e\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u3001update()\u3092\u547c\u3070\u308c\u305f\u3068\u304d\u306bgrad\u306blr=0.01(lr\u306flearning rate\u306e\u7565\u3067\u3057\u3087\u3046)\u3092\u304b\u3051\u305f\u3082\u306e\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001\u66f4\u65b0\u306e\u7d50\u679c\u3001\u6700\u9069\u5024\u306b\u8fd1\u3065\u3044\u3066\u3044\u304f\u69d8\u5b50\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nimport matplotlib.path as mpath\nimport matplotlib.patches as patches\n\n# \u30ed\u30b9\u306e\u7b49\u9ad8\u7dda\u3092\u66f8\u304f\npsize=40\n\nW=np.linspace(-1,3,psize)\nB=np.linspace(-1,3,psize)\nWm, Bm = np.meshgrid(W, B)\n\nZ=np.zeros((psize,psize))\nfor w in range(psize):\n    for b in range(psize):\n        Z[b,w]=0.0\n        for x in np.linspace(0,1,10):\n            Z[b,w] += (W[w]*x+B[b]-np.exp(x))**2\n\nplt.contourf(Wm,Bm, Z, 100,vmax=80,vmin=0)\nplt.colorbar()\nplt.hold(True)\n\nmodel2 = LinearChain()\noptimizer2 = optimizers.SGD()\noptimizer2.setup(model2)\n\nlosses=[]\nverts = [ ]\nbatchsize=20\n\nfor i in range(1000):\n\n    x,y = get_batch(batchsize)\n    x_ = Variable(x.astype(np.float32).reshape(batchsize,1))\n    t_ = Variable(y.astype(np.float32).reshape(batchsize,1))\n\n    # 10\u56de\u306b\u4e00\u56de\u3001\u9014\u4e2d\u7d4c\u904e\u3092\u4fdd\u5b58\n    if i%10==0:\n        w= model2.l1.W.data[0][0]\n        b = model2.l1.b.data[0]\n        verts.append((w,b))\n\n    model2.zerograds()\n    loss=model2(x_,t_)\n    loss.backward()\n    optimizer2.update(retain_grad=True)\n\n# \u9014\u4e2d\u7d4c\u904e\u3092\u30d7\u30ed\u30c3\u30c8\nxs, ys = zip(*verts)\n_=plt.plot(xs, ys, 'o', lw=1, color='white') #, ms=10)\n\n\n\u6a2a\u8ef8\u304cWW, \u7e26\u8ef8\u304c bb \u3067\u3059\u3002\u7b49\u9ad8\u7dda\u306f\u30ed\u30b9\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u5e95\u306b\u5411\u304b\u3063\u3066\u9032\u3093\u3067\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093\u3001\u5358\u7d14\u5316\u3057\u305f\u306e\u3067\u6700\u9069\u70b9\u3067\u3082\u30d5\u30a3\u30c3\u30c8\u7d50\u679c\u306f\u76f4\u7dda\u3067\u3059\u3002\u6700\u5c0f\u4e8c\u4e57\u8fd1\u76f4\u7dda\u3067\u3059\u306d\u3002\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\nx=np.linspace(0,1,100)\nplt.plot(x,np.exp(x))\nplt.hold(True)\np=model2.predict(Variable(x.astype(np.float32).reshape(100,1))).data\n_=plt.plot(x, p,\"r\")\n\n\n\u4ee5\u4e0a\u3067\u3001y=exy=e^x \u3068\u3044\u3046\u95a2\u6570\u3092\u8fd1\u4f3c\u3059\u308b\u3088\u3046\u306a\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u6700\u9069\u5316\u3059\u308b\u3053\u3068\u3092\u901a\u3058\u3066chainer\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u3001\n\u307b\u3093\u306e\u3055\u308f\u308a\u3060\u3051\u3067\u3059\u304c\u3001\u6700\u9069\u5316\u304c\u3069\u3046\u3044\u3046\u539f\u7406\u3067\u3001\u3069\u306e\u3088\u3046\u306b\u9032\u3093\u3067\u3044\u304f\u306e\u304b\u3001\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u306b\u89e6\u308c\u3066\u307f\u307e\u3057\u305f\u3002\n\n$y=e^x$ \u3068\u3044\u3046\u95a2\u6570\u3092\u3044\u308f\u3086\u308b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067\u5b66\u7fd2\u3059\u308b\u3001\u3068\u3044\u3046\u304a\u984c\u3092\u901a\u3058\u3066\u3001chainer\u3092\u5b66\u3093\u3067\u307f\u307e\u3059\u3002\u4e0b\u8a18\u306fchainer1.6.2.1\u3067\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u540c\u3058\u5185\u5bb9\u3092Jupyter notebook\u5f62\u5f0f\u3067[\u3053\u3061\u3089](https://github.com/ashitani/jupyter_examples/blob/master/chainer.ipynb)\u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u52d5\u304b\u3057\u306a\u304c\u3089\u78ba\u8a8d\u3057\u305f\u3044\u65b9\u306f\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u307e\u305a\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u985e\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n\n```python\nimport numpy as np\nimport chainer\nfrom chainer import cuda, Function, gradient_check, Variable, optimizers, serializers, utils\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n```\n\n## \u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n\n\u307e\u305a\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\u4eca\u56de\u306f0\u304b\u30891.0\u307e\u3067\u306e\u6d6e\u52d5\u5c0f\u6570$x$\u306b\u5bfe\u3057\u3066$e^x$\u304c\u671f\u5f85\u5024\u3067\u3059\u3002\n\n\u30d0\u30c3\u30c1\u5b66\u7fd2\u3068\u3044\u3046\u624b\u6cd5\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u969b\u306b$n$ \u500b\u306e\u554f\u984c\u30fb\u89e3\u7b54\u306e\u30bb\u30c3\u30c8\u3092\u8fd4\u3059\u95a2\u6570\u304c\u3042\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\n\n\n```python\ndef get_batch(n):\n    x = np.random.random(n)\n    y = np.exp(x)\n    return x,y\n```\n\n\n```python\nprint get_batch(2)\n```\n\n    (array([ 0.25425583,  0.87356596]), array([ 1.28950165,  2.39543768]))\n\n\n## \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u8a2d\u8a08\n\n\u6b21\u306b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u8a2d\u8a08\u3057\u307e\u3059\u3002\n\n$y=e^x$ \u306f\u975e\u7dda\u5f62\u95a2\u6570\u306a\u306e\u3067\u3001\u7dda\u5f62\u95a2\u6570\u3060\u3051\u3067\u306e\u8fd1\u4f3c\u3067\u306f\u5341\u5206\u306a\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u5165\u529b\u3092$x$\u3068\u3057\u305f\u3068\u304d\u3001$y=Wx+b$\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u7dda\u5f62\u95a2\u6570\u3068\u547c\u3073\u307e\u3059\u3002$W$\u3092\u91cd\u307f\u3001$b$\u3092\u30d0\u30a4\u30a2\u30b9\u3068\u547c\u3073\u307e\u3059\u304c\u3001\u3069\u3061\u3089\u3082\u305f\u3060\u306e\u884c\u5217\u3067\u3059\u3002\u3064\u307e\u308a\u76f4\u7dda\uff08\u307f\u305f\u3044\u306a\u3082\u306e\uff09\u3067\u3059\u306d\u3002\n\n\u3055\u3066\u3001\u3053\u306e\u7dda\u5f62\u6f14\u7b97\u306b\u5bfe\u3057\u3066\u3001\u975e\u7dda\u5f62\u95a2\u6570\u306b\u3088\u308b\u6d3b\u6027\u5316\u5c64\u304c\u5165\u308b\u3060\u3051\u3067\u3082\u3046\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3068\u547c\u3093\u3067\u3044\u3044\u3089\u3057\u3044\u3067\u3059\u3002\u305d\u308c\u3092\u591a\u5c64\u306b\u3057\u305f\u3082\u306e\u304c\u30c7\u30a3\u30fc\u30d7\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3001\u3044\u308f\u3086\u308b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067\u4f7f\u308f\u308c\u308b\u975e\u7dda\u5f62\u95a2\u6570\u3067\u3059\u3002\u3069\u308c\u3050\u3089\u3044\u6df1\u3051\u308c\u3070\u30c7\u30a3\u30fc\u30d7\u3068\u547c\u3093\u3067\u3044\u3044\u306e\u304b\u4e0d\u660e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f3\u6bb5\u3050\u3089\u3044\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u4e00\u822c\u7684\u306a\u5206\u985e\u554f\u984c\u3060\u3068relu\u3068\u3044\u3046\u975e\u7dda\u5f62\u95a2\u6570\u304c\u975e\u5e38\u306b\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u304c\u3001relu\u3060\u3068\u5fae\u5206\u6d88\u5931\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u4eca\u56de\u306fleaky_relu\u3092\u4f7f\u3044\u307e\u3059\uff08\u3053\u306e\u554f\u984c\u306e\u5834\u5408\u306frelu\u3060\u3068\u53ce\u675f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\uff09\u3002leaky_relu\u306f\u5165\u529b\u304c\u8ca0\u306a\u30890.2\u3092\u304b\u3051\u308b\u3001\u3068\u3044\u3046\u3060\u3051\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u95a2\u6570\u3067\u3059\u3002\n\n\u305d\u308c\u305e\u308c\u306e\u7dda\u5f62\u5c64\u306e\u3082\u3064$W,b$\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3059\u308b\u3053\u3068\u3067\u3001$y=e^x$\u306b\u76f8\u5f53\u3059\u308b\u3088\u3046\u306a\u95a2\u6570\u3092\u8868\u73fe\u3057\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u69cb\u6210\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002L1,L2,L3\u306f\u305d\u308c\u305e\u308c\u7dda\u5f62\u95a2\u6570\u3067\u3001\u3044\u3063\u305f\u3093\u4e2d\u9593\u5c64$h1,h2$\u306e\u6b21\u5143\u309216\u300132\u3068\u5897\u3084\u3057\u305f\u3042\u3068\u306b\u3001\u6700\u5f8c\u306b1\u6b21\u5143\u306b\u843d\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n![chainer_00.png](https://qiita-image-store.s3.amazonaws.com/0/30340/2e99e225-dd48-f4da-ac52-9bbc1e1076ed.png \"chainer_00.png\")\n\n\n\u4ee5\u4e0b\u3067\u306f$L_n$\u306e\u30d1\u30e9\u30e1\u30fc\u30bf$W,b$\u3092$W_n,b_n$\u306e\u3088\u3046\u306b\u8868\u8a18\u3057\u307e\u3059\u3002\n\n\u4e2d\u9593\u5c64(\u96a0\u308c\u5c64\uff09\u3067\u3042\u308b$h1,h2$\u3067\u30c1\u30e3\u30cd\u30eb\u3092\u305f\u304f\u3055\u3093\u6301\u3066\u308b\uff08\u3064\u307e\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf$W_n,b_n$\u306e\u884c\u5217\u304c\u5de8\u5927\u3067\u3042\u308b\uff09\u3068\u3044\u3046\u3053\u3068\u304c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8868\u73fe\u529b\u3092\u8868\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\u9014\u4e2d\u306b\u975e\u7dda\u5f62\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u3001\n\n```math\n\\begin{eqnarray*}\n h_3 &=& W_3 (W_2(W_1x+b_1)+b_2)+b_3 \\\\\n     &=& W_3 W_2 W_1 x + W_3W_2b_1 + W_3b_2 + b_3 \\\\\n     &=& W x + b\n\\end{eqnarray*}\n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002$W=W_3 W_2 W_1, b=W_3 W_2b_1+W_3b_2+b_3$ \u3067\u3059\u304c\u3001$W_1,W_2,W_3$\u306a\u3069\u306e\u884c\u5217\u304c\u3069\u3093\u306a\u306b\u5927\u304d\u3044\u884c\u5217\u3060\u3063\u305f\u3068\u3057\u3066\u3082\u5408\u6210\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b$W,b$\u306f\u3068\u3082\u306b\u30b9\u30ab\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002$x,W,b$\u304c\u3059\u3079\u3066\u30b9\u30ab\u30e9\u30fc\u3068\u3044\u3046\u3053\u3068\u306f\u3001$y=Wx+b$\u306f\u3064\u307e\u308a\u50be\u304d\u3068\u5207\u7247\u3060\u3051\u3092\u5909\u3048\u3089\u308c\u308b\u76f4\u7dda\u3067\u3001\u3053\u308c\u3092$e^x$\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u308d\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u307e\u3042\u7121\u7406\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u3068\u3053\u308d\u304c\u975e\u7dda\u5f62\u8981\u7d20\u304c\u5165\u308b\u3060\u3051\u3067$W_1,W_2,W_3$\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3059\u3079\u3066\u751f\u304d\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u6700\u521d\u306e\u65b9\u3067\u8ff0\u3079\u305f\u300c\u975e\u7dda\u5f62\u8981\u7d20\u304c\u3042\u308c\u3070\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3068\u547c\u3093\u3067\u3044\u3044\u300d\u3068\u3044\u3046\u306e\u306f\u3053\u3046\u3044\u3046\u7406\u7531\u306a\u308f\u3051\u3067\u3059\u3002\n\n## \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u5b9f\u88c5\n\n\u3053\u308c\u3092chainer\u3067\u66f8\u304d\u4e0b\u3057\u307e\u3059\u3002\n\nchainer\u3067\u306f\u3001\u6700\u9069\u5316\u3055\u308c\u308b\u3079\u304d\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u95a2\u6570\u3092L(\u30ea\u30f3\u30af)\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3057\u306e\u95a2\u6570\u3092F(\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3)\u3068\u547c\u3093\u3067\u533a\u5225\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306fver1.5\u3042\u305f\u308a\u304b\u3089\u5c0e\u5165\u3055\u308c\u305f\u6982\u5ff5\u3060\u305d\u3046\u3067\u3001\u30ea\u30f3\u30af\u3092\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3067\u66f8\u3044\u305f\u308a\u3057\u3066\u3044\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u3088\u304f\u898b\u304b\u3051\u307e\u3059\u3002\u30ea\u30f3\u30af\u306fL.Linear(\u5165\u529b\u30b5\u30a4\u30ba,\u51fa\u529b\u30b5\u30a4\u30ba)\u306e\u3088\u3046\u306b\u5927\u6587\u5b57\u59cb\u307e\u308a\u3067\u3001\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u306fF.linear(x,W,b)\u306e\u3088\u3046\u306b\u5c0f\u6587\u5b57\u59cb\u307e\u308a\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5927\u6587\u5b57\u59cb\u307e\u308a\u306e\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u304c\u4f7f\u308f\u308c\u3066\u3044\u305f\u3088\u3046\u3067\u3001F.Linear()\u3068L.Linear()\u3068F.linear()\u304c\u3042\u308a\u307e\u3059\u3002\u524d\u8005\uff12\u3064\u306f\u7b49\u4fa1\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3063\u305f\u95a2\u6570\u3001\u6700\u5f8c\u306e\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u305f\u3060\u306e\u95a2\u6570\u3001\u3067\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u7406\u89e3\u3059\u308b\u307e\u3067\u306b\u3060\u3044\u3076\u6df7\u4e71\u3057\u307e\u3057\u305f\u3002\n\n\u3059\u3053\u3057\u8a71\u304c\u305d\u308c\u307e\u3057\u305f\u3002\u6b21\u306b\u30ea\u30f3\u30af\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3092\u6e21\u3057\u3066\u30c1\u30a7\u30a4\u30f3\u3068\u547c\u3070\u308c\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002Python\u306e\u30af\u30e9\u30b9\u306e\u66f8\u304d\u65b9\u306b\u6163\u308c\u3066\u3044\u306a\u3044\u3068\u9762\u98df\u3089\u3044\u307e\u3059\u304c\u3001\u30ea\u30f3\u30af\u4e00\u89a7\u3092\u5b9a\u7fa9\u3059\u308b\\_\\_init\\_\\_()\u3068\u51fa\u529b\u307e\u3067\u306e\u8a08\u7b97\u30b0\u30e9\u30d5\u3092\u8fd4\u3059\u95a2\u6570\u3060\u3051\u304c\u3042\u308c\u3070\u826f\u3044\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u30ed\u30b9\u3092\\_\\_cal\\_\\_()\u3067\u8fd4\u3059\u3053\u3068\u306b\u3057\u307e\u3059\u3002\\_\\_call\\_\\_()\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u306f \n\n```\nm=MyChain()\nloss=m(x,t)\n```\n\u306e\u3088\u3046\u306b\u547c\u3079\u307e\u3059\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u542b\u3080\u95a2\u6570\u306f\\_\\_init\\_\\_()\u306b\u3001\u305d\u308c\u4ee5\u5916\u306f\\_\\_call()\\_\\_\u3084\u4ed6\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u4f7f\u3046\u3088\u3046\u306b\u5207\u308a\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u306d\u3002L.Linear()\u306f\u5165\u529b\u30c1\u30e3\u30cd\u30eb\u3001\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u3001\u306e\u6570\u3060\u3051\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6e21\u305b\u3070\u3044\u3044\u306e\u3067TensorFlow\u3088\u308a\u306f\u308b\u304b\u306b\u8a18\u8ff0\u306f\u7c21\u5358\u3067\u3059\u3002\n\n\n```python\nclass MyChain(Chain):\n    def __init__(self):\n        super(MyChain, self).__init__(\n             l1=L.Linear(1, 16),  # \u5165\u529b1\u30c1\u30e3\u30cd\u30eb\u3001\u51fa\u529b16\u30c1\u30e3\u30cd\u30eb\n             l2=L.Linear(16, 32),\n             l3=L.Linear(32, 1),\n        )\n\n    def __call__(self,x,t):\n        # x\u3092\u5165\u529b\u3057\u305f\u969b\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u51fa\u529b\u3068\u3001\u56de\u7b54t \u3068\u306e\u5dee\u5206\u3092\u8fd4\u3057\u307e\u3059\u3002\n        # \u4eca\u56de\u306f\u81ea\u4e57\u8aa4\u5dee\u3092\u4f7f\u3044\u307e\u3059\u3002\n        return F.mean_squared_error(self.predict(x),t)\n\n    def  predict(self,x):\n        # x\u3092\u5165\u529b\u3057\u305f\u969b\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u51fa\u529b\u3092\u8fd4\u3057\u307e\u3059\u3002\n        h1 = F.leaky_relu(self.l1(x))\n        h2 = F.leaky_relu(self.l2(h1))\n        h3 = F.leaky_relu(self.l3(h2))\n        return h3\n\n    def get(self,x):\n        # x\u3092\u5b9f\u6570\u3067\u5165\u529b\u3057\u305f\u3089\u51fa\u529b\u3092\u5b9f\u6570\u3067\u8fd4\u3059\u3068\u3044\u3046\u4fbf\u5229\u95a2\u6570\u3067\u3059\u3002\n        # numpy.ndarray\u3068Valiable\u3092\u7d4c\u7531\u3059\u308b\u306e\u3067\u5c11\u3005\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u3002\n        return self.predict(Variable(np.array([x]).astype(np.float32).reshape(1,1))).data[0][0]\n```\n\n\u3053\u306e\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u3001\u7279\u5b9a\u306e\u6226\u7565\u306b\u3057\u305f\u304c\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\u4eca\u56de\u306fAdam()\u3068\u3044\u3046\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\n```python\nmodel = MyChain()\noptimizer = optimizers.Adam()\noptimizer.setup(model)\n```\n\n## \u5b66\u7fd2\n\n\u3044\u3088\u3044\u3088\u5b66\u7fd2\u30eb\u30fc\u30d7\u3092\u56de\u3057\u307e\u3059\u3002\n\nchainer\u306e\u4f5c\u6cd5\u3068\u3057\u3066\u3001(\u30d0\u30c3\u30c1\u8ef8, \u30c7\u30fc\u30bf\u8ef81,(\u30c7\u30fc\u30bf\u8ef82),..)\u3068\u3044\u3046\u6b21\u5143\u69cb\u9020\u3092\u6301\u3064 np.float32 \u306e\u591a\u6b21\u5143\u914d\u5217\uff08\u30c6\u30f3\u30bd\u30eb\uff09\u3092Variable\u30af\u30e9\u30b9\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u3067\u3084\u308a\u3068\u308a\u3057\u307e\u3059\u3002Variable\u30af\u30e9\u30b9\u304b\u3089\u6570\u5024\u306e\u5b9f\u4f53\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f data\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\u3002...\u6587\u5b57\u306b\u3059\u308b\u3068\u3055\u3063\u3071\u308a\u308f\u304b\u308a\u307e\u305b\u3093\u306d\u3002\n\n\u30d0\u30c3\u30c1\u3068\u3044\u3046\u306e\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u304b\u3089\u3044\u304f\u3064\u304b\u629c\u304d\u53d6\u308b\u3053\u3068\u3092\u6307\u3057\u307e\u3059\u3002\u30d0\u30c3\u30c1\u6570\u3068\u3044\u3046\u306e\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3068\u3044\u3046\u8868\u73fe\u3092\u3068\u3063\u305f\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u3064\u306d\u306b\u8907\u6570\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u306b\u5bfe\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\u3059\u308f\u3051\u3067\u3059\u304c\u3001\u3053\u308c\u306b\u3055\u3089\u306b\u30c7\u30fc\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3068\u3044\u3046\u6b21\u5143\u304c\u52a0\u308f\u308a\u3001\u3064\u304e\u306b\u30c7\u30fc\u30bf\u306e\u8868\u73fe\u306b\u5fc5\u8981\u306a\u6b21\u5143\u304c\u8db3\u3055\u308c\u305f\u3001\u591a\u6b21\u5143\u914d\u5217\uff08\u30c6\u30f3\u30bd\u30eb\uff09\u3092\u6271\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u5165\u529b\u30c7\u30fc\u30bf\u304c1\u6b21\u5143\u306a\u306e\u3067\u3001\n  (\u30d0\u30c3\u30c1\u8ef8\u3001\u30c7\u30fc\u30bf\u8ef8\uff09\n\u3067\u826f\u3044\u3067\u3059\u304c\u30012\u6b21\u5143\u753b\u50cf\u306eRGB\uff13\u30c1\u30e3\u30cd\u30eb\u3067\u69cb\u6210\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306f\n  (\u30d0\u30c3\u30c1\u8ef8\u3001\u30c1\u30e3\u30cd\u30eb\u8ef8\uff1d\u8272\u8ef8\u3001\u7e26\u8ef8\u3001\u6a2a\u8ef8\uff09\n\u306e\u3088\u3046\u306b\u6e21\u3057\u307e\u3059\u3002\u6163\u308c\u306a\u3044\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u306d\u3002\u79c1\u306f\u4e0b\u306e\u3088\u3046\u306a\u56f3\u3092\u30a4\u30e1\u30fc\u30b8\u3057\u3066\u3044\u307e\u3059\u3002\n\n![chainer_02.png](https://qiita-image-store.s3.amazonaws.com/0/30340/0559ece1-6d0d-90ed-e56f-02acb46391b2.png \"chainer_02.png\")\n\n\n\u5b66\u7fd2\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306f\n \n 1. \u5fae\u5206\u306e\u521d\u671f\u5316\n 2. \u30d5\u30a9\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\uff08\u30cd\u30c3\u30c8\u3092\u9806\u65b9\u5411\u306b\u8fbf\u3063\u3066\u51fa\u529b\u3092\u8a08\u7b97\u3059\u308b\u3002\u3053\u306e\u5834\u5408\u306f model(x\\_,t\\_) ) \n 3. \u30d0\u30c3\u30af\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\uff08\u30cd\u30c3\u30c8\u3092\u9006\u5411\u304d\u306b\u8fbf\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5fae\u5206\u3092\u8a08\u7b97\u3059\u308b\uff09\n 4. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 \uff08\u5fae\u5206\u3092\u7528\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\u3059\u308b\uff09\n \n\u304c\u4e00\u9023\u306e\u6d41\u308c\u3067\u3059\u3002optimizer.update(model) \u3067\u3053\u306e\u6d41\u308c\u3092\u4e00\u6c17\u306b\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u3069\u3046\u305bforward\u306e\u9014\u4e2d\u7d4c\u904e\u3092\u8997\u304d\u305f\u304f\u306a\u308b\u306e\u3067\u3001\u79c1\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u3079\u3066\u66f8\u304f\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\n\n\n```python\nlosses =[]\nfor i in range(10000):\n    x,y = get_batch(100)\n    x_ = Variable(x.astype(np.float32).reshape(100,1))\n    t_ = Variable(y.astype(np.float32).reshape(100,1))\n    \n    model.zerograds()\n    loss=model(x_,t_)\n    loss.backward()\n    optimizer.update()\n\n    losses.append(loss.data)\n\nplt.plot(losses)\nplt.yscale('log')\n\n```\n\n![chainer_13_0.png](https://qiita-image-store.s3.amazonaws.com/0/30340/4ba700fe-0a5d-105e-8890-24de4aff1c28.png \"chainer_13_0.png\")\n\n\n\u6a2a\u8ef8\u306f\u30eb\u30fc\u30d7\u56de\u6570\u3001\u7e26\u8ef8\u306floss\u3092log\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u3044\u3044\u611f\u3058\u306b\u6e1b\u3063\u3066\u307e\u3059\u306d\u3002\n\n## \u7d50\u679c\u306e\u78ba\u8a8d\n\n\u3067\u306f\u3001\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u30020.2\u3092\u5165\u308c\u305f\u3089exp(0.2)\u306b\u8fd1\u3044\u5024\u304c\u51fa\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\n\n```python\nprint model.get(0.2)\nprint np.exp(0.2)\n```\n\n    1.22299\n    1.22140275816\n\n\n\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\u3067\u306f0\u304b\u30891\u306e\u7bc4\u56f2\u3067\u3069\u308c\u4f4d\u95a2\u6570\u30d5\u30a3\u30c3\u30c8\u3067\u304d\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\n\n```python\nx=np.linspace(0,1,100)\nplt.plot(x,np.exp(x))\nplt.hold(True)\np=model.predict(Variable(x.astype(np.float32).reshape(100,1))).data\n_=plt.plot(x, p,\"r\")\n```\n\n![chainer_17_0.png](https://qiita-image-store.s3.amazonaws.com/0/30340/5f607f8b-50f2-3b7a-ddf9-8a65d12d2ee1.png \"chainer_17_0.png\")\n\n\n\u9752\u304c\u6b63\u89e3\u3067\u3001\u8d64\u304c\u5b66\u7fd2\u7d50\u679c\u3067\u3059\u3002\n\n\u3044\u3044\u611f\u3058\u3067\u3059\u3002\u7dda\u5f62\u95a2\u6570\u3060\u3051\u3067\u306f\u3053\u306e\u30d5\u30a3\u30c3\u30c8\u6027\u80fd\u306f\u51fa\u307e\u305b\u3093\u3088\u306d\u3002\u30cd\u30c3\u30c8\u306e\u6df1\u3055\u3001\u5e45\uff08\u6b21\u5143\u6570\uff09\u3001\u306a\u3069\u3092\u3044\u308d\u3044\u308d\u5909\u3048\u3066\u307f\u308b\u3068\u9762\u767d\u3044\u3067\u3059\u304c\u3001\u3088\u304f\u8a00\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u5e45\u3088\u308a\u3082\u975e\u7dda\u5f62\u8981\u7d20\u3068\u6df1\u3055\u304c\u91cd\u8981\u3001\u3068\u3044\u3046\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n## \u5b66\u7fd2\u7d50\u679c\u30e2\u30c7\u30eb\u306e\u89b3\u5bdf\n\n\u3055\u3066\u3001\u7d50\u679c\u5b66\u7fd2\u5f8c\u306e\u30e2\u30c7\u30eb\u306f\u3069\u3046\u3044\u3046\u4fc2\u6570\u3067\u3067\u304d\u3066\u3044\u308b\u306e\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u305f\u3068\u3048\u3070\u6700\u521d\u306e\u30ec\u30a4\u30e4l1\u306e\u91cd\u307f$W$\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\n\n```python\nmodel.l1.W.data\n```\n\n\n\n\n    array([[ 0.31513408],\n           [ 0.75111604],\n           [ 0.48637491],\n           [-1.34837043],\n           [ 0.0388922 ],\n           [-1.29884255],\n           [-0.49960354],\n           [ 0.35992688],\n           [ 0.25262424],\n           [-2.14205575],\n           [ 0.83558381],\n           [-0.61535668],\n           [ 2.15679836],\n           [-0.17658199],\n           [-1.36228967],\n           [-0.5751065 ]], dtype=float32)\n\n\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u3001\u305f\u3068\u3048\u3070\u4e0b\u8a18\u306e\u3088\u3046\u306anumpy\u3067\u540c\u3058\u51fa\u529b\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u308c\u307e\u3059\u3002\n\n\n```python\ndef leaky_relu(x):\n    # \u8981\u7d20\u3054\u3068\u306e\u6f14\u7b97\u306b\u3059\u308b\u305f\u3081\u306b\u4e00\u5ea6ndarray\u3092\u7d4c\u7531\u3059\u308b\n    m = np.array((x<0))\n    x = np.array(x)\n    return np.matrix((x*0.2)*m + x*(~m)) \n\ndef pseudo_exp(x):\n    x = np.matrix(x)\n    W1 = np.matrix(model.l1.W.data)\n    b1 = np.matrix(model.l1.b.data)\n    W2 = np.matrix(model.l2.W.data)\n    b2 = np.matrix(model.l2.b.data)\n    W3 = np.matrix(model.l3.W.data)\n    b3 = np.matrix(model.l3.b.data)\n    \n    h1 = leaky_relu(W1*x+b1.T)\n    h2 = leaky_relu(W2*h1+b2.T)\n    y = leaky_relu(W3*h2+b3.T)\n    return y\n```\n\n\n```python\nprint pseudo_exp(0.2)\nprint np.exp(0.2)\n```\n\n    [[ 1.22299392]]\n    1.22140275816\n\n\n\n```python\nx=np.linspace(0,1,100)\nplt.plot(x,np.exp(x))\nplt.hold(True)\np=pseudo_exp(x.T)\n_=plt.plot(x, p.T,\"r\")\n```\n\n![chainer_24_0.png](https://qiita-image-store.s3.amazonaws.com/0/30340/77d0422b-3b3a-b25d-ce66-9459bf408f57.png \"chainer_24_0.png\")\n\n\nmodel.l1.W.data\u306a\u3069\u306e\u4fc2\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u66f8\u304d\u4e0b\u305b\u3070\u3001\u5b8c\u5168\u306bnumpy\u3060\u3051\u3067\u5b66\u7fd2\u7d50\u679c\u30e2\u30c7\u30eb\u3092\u66f8\u3051\u307e\u3059\u3002C\u3084Go\u306a\u3069\u306e\u8a00\u8a9e\u3078\u5909\u63db\u3059\u308b\u306e\u3082\u96e3\u3057\u304f\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u307e\u3042\u3001chainer\u3084numpy\u306f\u5229\u4fbf\u6027\u306e\u5272\u306b\u306f\u5341\u5206\u901f\u3044\u306e\u3067\u3001\u901f\u5ea6\u3060\u3051\u306e\u7406\u7531\u3067\u4ed6\u306e\u8a00\u8a9e\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5b66\u7fd2\u5f8c\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\u3060\u3051\u3067\u3042\u308c\u3070\u3001\u3053\u306e\u624b\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3067chainer\u306a\u3069\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u4f9d\u5b58\u3057\u306a\u3044\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u306e\u306f\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u6709\u7528\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n## \u9014\u4e2d\u7d4c\u904e\u306e\u89b3\u5bdf\u3068\u30bb\u30fc\u30d6\n\n\u3055\u3066\u3001Jupyter\u4e0a\u3067\u8a66\u884c\u932f\u8aa4\u3059\u308b\u969b\u306b\u3001\u9014\u4e2d\u7d4c\u904e\u3092\u773a\u3081\u305f\u304f\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u9014\u4e2d\u7d4c\u904e\u306e\u30d7\u30ed\u30c3\u30c8\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\u53ce\u675f\u901f\u5ea6\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u300110\u56de\u306b1\u56de\u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3055\u3089\u306b\u3001\u30bb\u30fc\u30d6\u91cd\u8981\u3067\u3059\u3002100\u56de\u306b1\u56de\u30bb\u30fc\u30d6\u3057\u307e\u3059\u3002\n\n\n```python\nlosses =[]\nfrom IPython import display\n\nmodel = MyChain()\noptimizer = optimizers.Adam()\noptimizer.setup(model)\n\nplt.hold(False)\n\nfor i in range(500):\n    x,y = get_batch(100)\n    x_ = Variable(x.astype(np.float32).reshape(100,1))\n    t_ = Variable(y.astype(np.float32).reshape(100,1))\n    \n    model.zerograds()\n    loss=model(x_,t_)\n    loss.backward()\n    optimizer.update()\n\n    losses.append(loss.data)\n\n    if i%10==0:\n        plt.plot(losses,\"b\")\n        plt.yscale('log')\n        display.clear_output(wait=True)\n        display.display(plt.gcf())\n    if i%100==0:\n        serializers.save_npz('my.model', model)\n\ndisplay.clear_output(wait=True)\n```\n\n![chainer_27_0.png](https://qiita-image-store.s3.amazonaws.com/0/30340/cc2801bc-7a26-dc33-c2fe-5551ee74789f.png \"chainer_27_0.png\")\n\n\n\u30bb\u30fc\u30d6\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u51fa\u529b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n\n```python\nserializers.load_npz('my.model',model)\nmodel.get(0.2)\n```\n\n\n\n\n    1.1877015\n\n\n\n## \u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3068\u306f\n\n\u3055\u3066\u3001\u5c11\u3057\u539f\u7406\u7684\u306a\u3068\u3053\u308d\u306b\u8e0f\u307f\u8fbc\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\u305d\u3082\u305d\u3082\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6700\u9069\u5316\u3055\u308c\u308b\u3001\u3068\u3044\u3046\u306e\u306f\u3069\u3046\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u7c21\u5358\u306e\u305f\u3081\u306b\u4e00\u5ea6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7dda\u5f62\u95a2\u6570\uff08$y=Wx+b$\u3067$W,b$\u304c\u30b9\u30ab\u30e9\u30fc\u3068\u3044\u3046\u305f\u3060\u306e\u4e00\u6b21\u5f0f\uff09\u306b\u623b\u3057\u3066\u3001\u304b\u3064\u3001\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u30b7\u30f3\u30d7\u30eb\u306aSGD\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u623b\u3057\u307e\u3059\u3002\u30d0\u30c3\u30c1\u30821\u3064\u3060\u3051\u306b\u3057\u307e\u3059\u3002\n\n$W,b$ \u306e\u521d\u671f\u5024\u3067\u3059\u304c\u3001chainer\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001$W$\u304c\u4e71\u6570\u3001$b$\u304c$0$\u306b\u9078\u3070\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u308f\u304b\u308a\u3084\u3059\u3055\u306e\u305f\u3081\u306b\u3001$W=0, b=0$\u3092\u521d\u671f\u5024\u3068\u3057\u307e\u3059\u3002\n\n\n```python\ndef get_batch(n):\n    x=np.random.random(n)\n    y= np.exp(x)\n    return x,y\n\nclass LinearChain(Chain):\n    def __init__(self):\n        super(LinearChain, self).__init__(\n             l1=L.Linear(1, 1,initialW=0.0),\n        )\n\n    def __call__(self,x,t):\n        return F.mean_squared_error(self.predict(x),t)\n\n    def  predict(self,x):\n        return self.l1(x)\n\n    def get(self,x):\n        return self.predict(Variable(np.array([x]).astype(np.float32).reshape(1,1))).data[0][0]\n```\n\n$y=Wx+b$ \u3068\u3044\u3046\u7dda\u5f62\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3001$E=(y-t)^2$ \u3068\u3044\u3046\u81ea\u4e57\u8aa4\u5dee\u3092\u8aa4\u5dee\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u81ea\u4e57\u8aa4\u5dee\u30920\u306b\u8fd1\u3065\u3051\u308b\u305f\u3081\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b$W$\u3068$b$\u3092\u66f4\u65b0\u3057\u3066\u3044\u304f\u308f\u3051\u3067\u3059\u304c\u3001\u66f4\u65b0\u306e\u65b9\u5411\u306f\u8aa4\u5dee$E$\u3092\u305d\u308c\u305e\u308c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u504f\u5fae\u5206\u3057\u305f\u3082\u306e\u3067\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\n\n```math\n\\varDelta W = \\frac{\\partial E}{\\partial W},\\quad\n\\varDelta b =  \\frac{\\partial E}{\\partial b} \n```\n\n\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5fae\u5206\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u306e\u5f0f\u3092\u5c55\u958b\u3059\u308b\u3068\u3001\n\n```math\n\\begin{eqnarray*}\n\\varDelta W &=& \\frac{\\partial E}{\\partial y} \\frac{\\partial y}{\\partial W} &=& 2 \\left(y-t \\right) x \\\\\n\\varDelta b &=& \\frac{\\partial E}{\\partial y} \\frac{\\partial y}{\\partial b} &=& 2 \\left( y-t \\right) \\\\\n\\end{eqnarray*}\n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u5909\u5f62\u3059\u308b\u3053\u3068\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5fae\u5206\u304c\u3001\u8aa4\u5dee\u306e\u5dee\u5206\u3067\u3042\u308b$y-t$ \u3001\u65e2\u77e5\u306e\u5165\u529b$x$\u3001\u3067\u8868\u305b\u305f\u308f\u3051\u3067\u3059\u3002\u6f14\u7b97\u306e\u904e\u7a0b\u3067\u3001\u4e0b\u6d41\u3067\u3042\u308b\u8aa4\u5dee\u306e\u5dee\u5206\u304b\u3089\u4e0a\u6d41\u306e\u5f0f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5dee\u5206\u306b\u623b\u3063\u3066\u304f\u308b\u308f\u3051\u306a\u306e\u3067\u3001\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3068\u547c\u3073\u307e\u3059\u3002$t,x$ \u306f\u65e2\u77e5\u3067\u3059\u304c\u3001$y$\u306f\u3001\u30d5\u30a9\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3001\u3064\u307e\u308a $Wx+b$ \u3092\u8a08\u7b97\u3057\u306a\u3044\u3068\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30d5\u30a9\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u306e\u306e\u3061\u306b\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3001\u3068\u3044\u3046\u6f14\u7b97\u3092\u3059\u308c\u3070\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5dee\u5206\u304c\u5f97\u3089\u308c\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u56f3\u306b\u3057\u3066\u307f\u308b\u3068\u3053\u3046\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\n![chainer_01.png](https://qiita-image-store.s3.amazonaws.com/0/30340/21951567-3014-c5f4-6260-c70fc5880a3b.png \"chainer_01.png\")\n\n\n\u3053\u3046\u3084\u3063\u3066\u8a08\u7b97\u3055\u308c\u305f$\\varDelta W, \\varDelta b$ \u3092\u4f7f\u3063\u3066$W,b$ \u3092\u66f4\u65b0\u3057\u307e\u3059\u3002SGD\u306f\u5358\u7d14\u306b\u50be\u304d\u306b\u4e00\u5b9a\u306e\u5b66\u7fd2\u7387$\\alpha$\u3092\u304b\u3051\u305f\u3076\u3093\u3060\u3051\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u3064\u307e\u308a\n\n```math\nW \\leftarrow W-\\alpha \\varDelta W , \\quad b \\leftarrow b-\\alpha\\varDelta b\n``` \n\u3068\u3044\u3046\u98a8\u306b\u66f4\u65b0\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\u306a\u304a\u3001chainer\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f$\\alpha=0.01$\u3067\u3059\u3002\n\n\u3053\u306e\u52d5\u304d\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\n```python\nmodel2 = LinearChain()\noptimizer2 = optimizers.SGD()\noptimizer2.setup(model2)\n\nlosses=[]\ntrace=[]\n\ndef scalar(v):\n    # Valiable\u3092\u30b9\u30ab\u30e9\u30fc\u5024\u306b\u623b\u3059\n    return v.data.ravel()[0]\n\nfor i in range(5):\n    x,y = get_batch(1)\n    x_ = Variable(x.astype(np.float32).reshape(1,1))\n    t_ = Variable(y.astype(np.float32).reshape(1,1))\n    \n    model2.zerograds()\n    loss=model2(x_,t_)        \n    loss.backward(retain_grad=True)\n\n    y = scalar(model2.predict(x_))\n    t=scalar(t_)\n    x=scalar(x_)\n    W=scalar(model2.l1.W)\n    b=scalar(model2.l1.b)\n\n    #\u624b\u52d5\u3067\u8a08\u7b97\u3057\u305fdelta_W,delta_b\n    dW_hand = 2*((y-t)*x)\n    db_hand = 2*((y-t))\n    \n    #chainer\u304c\u8a08\u7b97\u3057\u305fdelta_W, delta_b\n    dW=model2.l1.W.grad.ravel()[0]\n    db=model2.l1.b.grad.ravel()[0]\n\n  \tprint \"======  step %d  ======\" % i\n    print \"W,b  \\t\\t\\t\\t%2.8f, %2.8f\" % (W,b)\n    print \"2(y-t)x,2(y-t)\\t\\t%2.8f, %2.8f\" % (2*((y-t)*x), 2*((y-t)))\n    print \"\u22bfW,\u22bfb\\t\\t\\t\\t%2.8f, %2.8f\" % (dW,db)   #chainer\u306e\u51fa\u3059delta_W, delta_b\n    print \"W-\u03b1\u22bfW,b-\u03b1\u22bfb \\t\\t%2.8f, %2.8f\" % (W-0.01*dW,b-0.01*db)\n    optimizer2.update()\n\n```\n\n\t======  step 0  ======\n\tW,b  \t\t\t\t0.00000000, 0.00000000\n\t2(y-t)x,2(y-t)\t\t-3.58069563, -4.46209097\n\t\u22bfW,\u22bfb\t\t\t\t-3.58069563, -4.46209097\n\tW-\u03b1\u22bfW,b-\u03b1\u22bfb \t\t0.03580696, 0.04462091\n\t======  step 1  ======\n\tW,b  \t\t\t\t0.03580695, 0.04462091\n\t2(y-t)x,2(y-t)\t\t-0.08072093, -1.99062216\n\t\u22bfW,\u22bfb\t\t\t\t-0.08072093, -1.99062216\n\tW-\u03b1\u22bfW,b-\u03b1\u22bfb \t\t0.03661416, 0.06452713\n\t======  step 2  ======\n\tW,b  \t\t\t\t0.03661416, 0.06452713\n\t2(y-t)x,2(y-t)\t\t-1.16285205, -2.84911036\n\t\u22bfW,\u22bfb\t\t\t\t-1.16285205, -2.84911036\n\tW-\u03b1\u22bfW,b-\u03b1\u22bfb \t\t0.04824269, 0.09301824\n\t======  step 3  ======\n\tW,b  \t\t\t\t0.04824268, 0.09301823\n\t2(y-t)x,2(y-t)\t\t-0.44180280, -2.23253369\n\t\u22bfW,\u22bfb\t\t\t\t-0.44180280, -2.23253369\n\tW-\u03b1\u22bfW,b-\u03b1\u22bfb \t\t0.05266071, 0.11534357\n\t======  step 4  ======\n\tW,b  \t\t\t\t0.05266071, 0.11534357\n\t2(y-t)x,2(y-t)\t\t-1.07976472, -2.70742726\n\t\u22bfW,\u22bfb\t\t\t\t-1.07976472, -2.70742726\n\tW-\u03b1\u22bfW,b-\u03b1\u22bfb \t\t0.06345836, 0.14241784\n\n\n\u4ee5\u4e0b\uff12\u70b9\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n- $2(y-t)x, 2(y-t)$\u3068\u3044\u3046\u624b\u52d5\u8a08\u7b97\u3068\u540c\u3058\u5024\u3092chainer\u306egrad\u304c\u8fd4\u3057\u3066\u3044\u308b\n- SGD\u306b\u3088\u3063\u30660.01grad\u3076\u3093\u305a\u3064$W,b$ \u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\n\n[chainer\u306eLinear\u306e\u30bd\u30fc\u30b9](http://docs.chainer.org/en/stable/_modules/chainer/functions/connection/linear.html#linear)\u3092\u898b\u308b\u3068\u3001\u591a\u5165\u51fa\u529b\u3067\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u5c11\u3005\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001forward()\u306b\u306f$Wx+b$\u3001backword()\u306b\u306f\u3001\u5f8c\u6bb5\u306e\u5fae\u5206 grad_outputs\u306b$x$\u3092\u304b\u3051\u305f\u3082\u306e\u304c$W$\u306e\u5fae\u5206\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002backward()\u306e\u51fa\u529b\u306f$x,W,b$\u306e\u5fae\u5206\u304c\u3059\u3079\u3066\u8fd4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001[SGD\u306e\u30bd\u30fc\u30b9](http://docs.chainer.org/en/stable/_modules/chainer/optimizers/sgd.html)\u3092\u898b\u308b\u3068\u3001update()\u3092\u547c\u3070\u308c\u305f\u3068\u304d\u306bgrad\u306blr=0.01(lr\u306flearning rate\u306e\u7565\u3067\u3057\u3087\u3046)\u3092\u304b\u3051\u305f\u3082\u306e\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u66f4\u65b0\u306e\u7d50\u679c\u3001\u6700\u9069\u5024\u306b\u8fd1\u3065\u3044\u3066\u3044\u304f\u69d8\u5b50\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\n```python\nimport matplotlib.path as mpath\nimport matplotlib.patches as patches\n\n# \u30ed\u30b9\u306e\u7b49\u9ad8\u7dda\u3092\u66f8\u304f\npsize=40\n\nW=np.linspace(-1,3,psize)\nB=np.linspace(-1,3,psize)\nWm, Bm = np.meshgrid(W, B)\n\nZ=np.zeros((psize,psize))\nfor w in range(psize):\n    for b in range(psize):\n        Z[b,w]=0.0\n        for x in np.linspace(0,1,10):\n            Z[b,w] += (W[w]*x+B[b]-np.exp(x))**2\n\nplt.contourf(Wm,Bm, Z, 100,vmax=80,vmin=0)\nplt.colorbar()\nplt.hold(True)\n    \nmodel2 = LinearChain()\noptimizer2 = optimizers.SGD()\noptimizer2.setup(model2)\n\nlosses=[]\nverts = [ ]\nbatchsize=20\n\nfor i in range(1000):\n\n    x,y = get_batch(batchsize)\n    x_ = Variable(x.astype(np.float32).reshape(batchsize,1))\n    t_ = Variable(y.astype(np.float32).reshape(batchsize,1))\n\n    # 10\u56de\u306b\u4e00\u56de\u3001\u9014\u4e2d\u7d4c\u904e\u3092\u4fdd\u5b58\n    if i%10==0:\n        w= model2.l1.W.data[0][0]\n        b = model2.l1.b.data[0]\n        verts.append((w,b))\n    \n    model2.zerograds()\n    loss=model2(x_,t_)\n    loss.backward()\n    optimizer2.update(retain_grad=True)\n\n# \u9014\u4e2d\u7d4c\u904e\u3092\u30d7\u30ed\u30c3\u30c8\nxs, ys = zip(*verts)\n_=plt.plot(xs, ys, 'o', lw=1, color='white') #, ms=10)\n```\n\n![chainer_36_0.png](https://qiita-image-store.s3.amazonaws.com/0/30340/e146814a-4f77-7fa6-bcaf-9ec388802f0d.png \"chainer_36_0.png\")\n\n\n\u6a2a\u8ef8\u304c$W$, \u7e26\u8ef8\u304c $b$ \u3067\u3059\u3002\u7b49\u9ad8\u7dda\u306f\u30ed\u30b9\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u5e95\u306b\u5411\u304b\u3063\u3066\u9032\u3093\u3067\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3082\u3061\u308d\u3093\u3001\u5358\u7d14\u5316\u3057\u305f\u306e\u3067\u6700\u9069\u70b9\u3067\u3082\u30d5\u30a3\u30c3\u30c8\u7d50\u679c\u306f\u76f4\u7dda\u3067\u3059\u3002\u6700\u5c0f\u4e8c\u4e57\u8fd1\u76f4\u7dda\u3067\u3059\u306d\u3002\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n\n```python\nx=np.linspace(0,1,100)\nplt.plot(x,np.exp(x))\nplt.hold(True)\np=model2.predict(Variable(x.astype(np.float32).reshape(100,1))).data\n_=plt.plot(x, p,\"r\")\n```\n\n![chainer_38_0.png](https://qiita-image-store.s3.amazonaws.com/0/30340/e0db074e-7d5e-6902-6142-9de9619ca333.png \"chainer_38_0.png\")\n\n\n\u4ee5\u4e0a\u3067\u3001$y=e^x$ \u3068\u3044\u3046\u95a2\u6570\u3092\u8fd1\u4f3c\u3059\u308b\u3088\u3046\u306a\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u6700\u9069\u5316\u3059\u308b\u3053\u3068\u3092\u901a\u3058\u3066chainer\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u3001\n\u307b\u3093\u306e\u3055\u308f\u308a\u3060\u3051\u3067\u3059\u304c\u3001\u6700\u9069\u5316\u304c\u3069\u3046\u3044\u3046\u539f\u7406\u3067\u3001\u3069\u306e\u3088\u3046\u306b\u9032\u3093\u3067\u3044\u304f\u306e\u304b\u3001\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u306b\u89e6\u308c\u3066\u307f\u307e\u3057\u305f\u3002\n\n"}