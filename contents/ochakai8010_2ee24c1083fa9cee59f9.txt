{"context": " More than 1 year has passed since last update.\nSource.cpp\n#include \"Header.h\"\n\nRailsOnTiles::RailsOnTiles()\n{\n    m_direction = NORTH;\n    m_tile = B;\n}\n\nvoid RailsOnTiles::placeInfoChange(TILENUMBER outside1, TILENUMBER outside2, TILENUMBER outside3, DIRECTIONS direction, TILEMOVE tilemove)\n{\n    if(m_tile == outside1 || m_tile == outside2 || m_tile == outside3){\n        m_direction = OutSide;\n        return;\n    }\n    m_direction = direction;\n    m_tile = (TILENUMBER)((int)m_tile + tilemove);\n}\n\nvoid RailsOnTiles::moveUpper()\n{\n    placeInfoChange(A, B, C, SOUTH, UPPER);\n}\n\nvoid RailsOnTiles::moveLeft()\n{\n    placeInfoChange(A, D, G, EAST, LEFT);\n}\n\nvoid RailsOnTiles::moveRight()\n{\n    placeInfoChange(C, F, I, WEST, RIGHT);\n}\n\nvoid RailsOnTiles::moveUnder()\n{\n    placeInfoChange(G, H, I, NORTH, UNDER);\n}\n\nvoid RailsOnTiles::tile0Course()\n{\n    switch(m_direction){\n        case EAST   :   moveLeft(); break;\n        case SOUTH  :   moveUpper();break;\n        case WEST   :   moveRight();break;\n        case NORTH  :   moveUnder();\n    }\n}\n\nvoid RailsOnTiles::tile1Course()\n{\n    switch(m_direction){\n        case EAST   :   moveUpper();break;\n        case SOUTH  :   moveLeft(); break;\n        case WEST   :   moveUnder();break;\n        case NORTH  :   moveRight();\n    }\n}\n\nvoid RailsOnTiles::tile2Course()\n{   \n    switch(m_direction){\n        case EAST   :   moveUnder();break;\n        case SOUTH  :   moveRight();break;\n        case WEST   :   moveUpper();break;\n        case NORTH  :   moveLeft();\n    }\n}\n\nconst char RailsOnTiles::moveTile(int& tileType)\n{\n    switch(tileType){\n        case 0  :   tile0Course(); break;\n        case 1  :   tile1Course(); break;\n        case 2  :   tile2Course();\n    }\n    return m_tile + 'A';\n}\n\nconst std::string RailsOnTiles::solve(const std::string& input)\n{\n    std::string result = \"B\";\n    while(m_direction != OutSide){\n        int tileType = input.at(m_tile) - '0';\n        result += moveTile(tileType);\n    }\n    result.erase(--result.end());\n    return result;\n}\n\n\nvoid test(const std::string& input, const std::string& output)\n{\n    static int testNumber = 1;\n    RailsOnTiles ROT;\n    std::string result = ROT.solve(input);\n    std::cout << testNumber << \":\" << result << \" \u6b63\u89e3\u306f \" << output << std::endl;\n    if(result != output){\n        std::cout << \"test is NG!\" << std::endl;\n    }\n    testNumber++;\n}\n\nint main()\n{\n    test(\"101221102\",\"BEDGHIFEH\");\n    return 0;\n}\n\n\n\nHeader.h\n#ifndef _HEADER_H\n#define _HEADER_H\n\n#include<iostream>\n#include<string>\n\nclass RailsOnTiles\n{\npublic:\n    RailsOnTiles();\n    const std::string solve(const std::string& input);\n\nprivate:\n    enum DIRECTIONS{ EAST, SOUTH, WEST, NORTH ,OutSide};\n    enum TILEMOVE{UPPER = -3, LEFT = -1, RIGHT = 1, UNDER = 3};\n    enum TILENUMBER{A, B, C, D, E, F, G, H, I};\n    DIRECTIONS m_direction;\n    TILENUMBER m_tile;\n\n    const char moveTile(int& tileType);\n    void moveUpper();\n    void moveLeft();\n    void moveRight();\n    void moveUnder();\n    void tile0Course();\n    void tile1Course();\n    void tile2Course();\n    void placeInfoChange(TILENUMBER outside1, TILENUMBER outside2, TILENUMBER outside3, DIRECTIONS direction, TILEMOVE tilemove);\n};\n\n#endif\n\n\n\n```Source.cpp\n#include \"Header.h\"\n\nRailsOnTiles::RailsOnTiles()\n{\n\tm_direction = NORTH;\n\tm_tile = B;\n}\n\nvoid RailsOnTiles::placeInfoChange(TILENUMBER outside1, TILENUMBER outside2, TILENUMBER outside3, DIRECTIONS direction, TILEMOVE tilemove)\n{\n\tif(m_tile == outside1 || m_tile == outside2 || m_tile == outside3){\n\t\tm_direction = OutSide;\n\t\treturn;\n\t}\n\tm_direction = direction;\n\tm_tile = (TILENUMBER)((int)m_tile + tilemove);\n}\n\nvoid RailsOnTiles::moveUpper()\n{\n\tplaceInfoChange(A, B, C, SOUTH, UPPER);\n}\n\nvoid RailsOnTiles::moveLeft()\n{\n\tplaceInfoChange(A, D, G, EAST, LEFT);\n}\n\nvoid RailsOnTiles::moveRight()\n{\n\tplaceInfoChange(C, F, I, WEST, RIGHT);\n}\n\nvoid RailsOnTiles::moveUnder()\n{\n\tplaceInfoChange(G, H, I, NORTH, UNDER);\n}\n\nvoid RailsOnTiles::tile0Course()\n{\n\tswitch(m_direction){\n\t\tcase EAST\t:\tmoveLeft();\tbreak;\n\t\tcase SOUTH\t:\tmoveUpper();break;\n\t\tcase WEST\t:\tmoveRight();break;\n\t\tcase NORTH\t:\tmoveUnder();\n\t}\n}\n\nvoid RailsOnTiles::tile1Course()\n{\n\tswitch(m_direction){\n\t\tcase EAST\t:\tmoveUpper();break;\n\t\tcase SOUTH\t:\tmoveLeft(); break;\n\t\tcase WEST\t:\tmoveUnder();break;\n\t\tcase NORTH\t:\tmoveRight();\n\t}\n}\n\nvoid RailsOnTiles::tile2Course()\n{\t\n\tswitch(m_direction){\n\t\tcase EAST\t:\tmoveUnder();break;\n\t\tcase SOUTH\t:\tmoveRight();break;\n\t\tcase WEST\t:\tmoveUpper();break;\n\t\tcase NORTH\t:\tmoveLeft();\n\t}\n}\n\nconst char RailsOnTiles::moveTile(int& tileType)\n{\n\tswitch(tileType){\n\t\tcase 0\t:\ttile0Course(); break;\n\t\tcase 1\t:\ttile1Course(); break;\n\t\tcase 2\t:\ttile2Course();\n\t}\n\treturn m_tile + 'A';\n}\n\nconst std::string RailsOnTiles::solve(const std::string& input)\n{\n\tstd::string result = \"B\";\n\twhile(m_direction != OutSide){\n\t\tint tileType = input.at(m_tile) - '0';\n\t\tresult += moveTile(tileType);\n\t}\n\tresult.erase(--result.end());\n\treturn result;\n}\n\n\nvoid test(const std::string& input, const std::string& output)\n{\n\tstatic int testNumber = 1;\n\tRailsOnTiles ROT;\n\tstd::string result = ROT.solve(input);\n\tstd::cout << testNumber << \":\" << result << \" \u6b63\u89e3\u306f \" << output << std::endl;\n\tif(result != output){\n\t\tstd::cout << \"test is NG!\" << std::endl;\n\t}\n\ttestNumber++;\n}\n\nint main()\n{\n\ttest(\"101221102\",\"BEDGHIFEH\");\n\treturn 0;\n}\n```\n\n```Header.h\n#ifndef _HEADER_H\n#define _HEADER_H\n\n#include<iostream>\n#include<string>\n\nclass RailsOnTiles\n{\npublic:\n\tRailsOnTiles();\n\tconst std::string solve(const std::string& input);\n\nprivate:\n\tenum DIRECTIONS{ EAST, SOUTH, WEST, NORTH ,OutSide};\n\tenum TILEMOVE{UPPER = -3, LEFT = -1, RIGHT = 1, UNDER = 3};\n\tenum TILENUMBER{A, B, C, D, E, F, G, H, I};\n\tDIRECTIONS m_direction;\n\tTILENUMBER m_tile;\n\n\tconst char moveTile(int& tileType);\n\tvoid moveUpper();\n\tvoid moveLeft();\n\tvoid moveRight();\n\tvoid moveUnder();\n\tvoid tile0Course();\n\tvoid tile1Course();\n\tvoid tile2Course();\n\tvoid placeInfoChange(TILENUMBER outside1, TILENUMBER outside2, TILENUMBER outside3, DIRECTIONS direction, TILEMOVE tilemove);\n};\n\n#endif\n\n```\n", "tags": ["yhpg1.0"]}