{"context": " More than 1 year has passed since last update.\n\n\u7d4c\u7def\n\u4f1a\u793e\u3067\u67d0\u30b3\u30fc\u30d2\u30fc\u30b5\u30fc\u30d0\u30fc\u3092\u5c0e\u5165\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u969b\u306b\u5229\u7528\u8005\u304b\u3089\u3001\u3069\u3046\u3084\u3063\u3066\u96c6\u91d1\u3059\u308b\u304b\u304c\u554f\u984c\u306b\u3002\n\u6bce\u6708\u5b9a\u984d\u3092\u5229\u7528\u4e88\u5b9a\u8005\u306b\u6255\u3063\u3066\u3082\u3089\u3046\u3068\u3044\u3046\u3053\u3068\u3082\u8003\u3048\u307e\u3057\u305f\u304c\u3001\u3084\u3063\u3071\u308a\u5229\u7528\u3057\u305f\u3060\u3051\u96c6\u91d1\u3057\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001NFC\u3092\u5229\u7528\u3057\u305f\u5c02\u7528\u7aef\u672b\u3092\u4f5c\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u500b\u3005\u306e\u5229\u7528\u8005\u306e\u8b58\u5225\u65b9\u6cd5\n\u5229\u7528\u8005\u306e\u8b58\u5225\u306f\u3001\u65b0\u305f\u306b\u30ab\u30fc\u30c9\u306a\u3069\u3092\u767a\u884c\u3059\u308b\u3053\u3068\u306f\u3057\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u500b\u3005\u4eba\u304c\u6240\u6709\u3057\u3066\u3044\u308b\u4efb\u610f\u306eFeliCa\u30ab\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3002\n\n\u4ed5\u7d44\u307f\n\n\u7aef\u672b\u306bFeliCa\u30ab\u30fc\u30c9\u3092\u30bf\u30c3\u30c1\n1\u30bf\u30c3\u30c1\u6bce\u306b\u6c7a\u3081\u3089\u308c\u305f\u5b9a\u984d\u304c\u30b5\u30fc\u30d0\u4e0a\u306e\u6b8b\u9ad8\u3088\u308a\u5f15\u304b\u308c\u308b\n\u96fb\u6e90\u6295\u5165\u6642\u3001Wi-Fi\u63a5\u7d9a\u6642\u3001\u30bf\u30c3\u30c1\u6642\u306b\u306f\u7aef\u672b\u4e0a\u306eLCD\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u305d\u306e\u60c5\u5831\u3092\u8868\u793a\n\n\n\u5c02\u7528\u7aef\u672b\n\u5c02\u7528\u7aef\u672b\u306f\u3001\u6b21\u306e\u3082\u306e\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u308a\u307e\u3057\u305f\u3002\n\nFeliCa \u30ea\u30fc\u30c0\u30fc \u30e2\u30b8\u30e5\u30fc\u30eb\nWi-Fi\u5185\u8535 mbed \u30e2\u30b8\u30e5\u30fc\u30eb \nLCD \u30e2\u30b8\u30e5\u30fc\u30eb\n\u81ea\u4f5c\u30b1\u30fc\u30b9\n\n\nFeliCa \u30ea\u30fc\u30c0\u30fc \u30e2\u30b8\u30e5\u30fc\u30eb\n\u7d44\u8fbc\u7528\u306eFeliCa\u30ea\u30fc\u30c0\u30fc\u30fb\u30e9\u30a4\u30bf\u30fc\u3067\u3042\u308bRC-S620S\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\nWi-Fi\u5185\u8535 mbed \u30e2\u30b8\u30e5\u30fc\u30eb\n\u30ea\u30fc\u30c0\u30fc\u306e\u5236\u5fa1\u3068\u901a\u4fe1\u306b\u3064\u3044\u3066\u306f\u3001Wi-Fi\u5185\u8535 mbed \u30e2\u30b8\u30e5\u30fc\u30ebWiFi DipCortex\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\uff08\u3061\u306a\u307f\u306b\u3001\u73fe\u5728\u306f\u8ca9\u58f2\u505c\u6b62\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\uff09\n\nLCD \u30e2\u30b8\u30e5\u30fc\u30eb\n\u8868\u793a\u306e\u305f\u3081\u306eLCD\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u79cb\u6708\u96fb\u5b50\u3067\u8ca9\u58f2\u3057\u3066\u3044\u308b\u3001I2C\u63a5\u7d9a\u5c0f\u578b\u30ad\u30e3\u30e9\u30af\u30bfLCD\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n\u81ea\u4f5c\u30b1\u30fc\u30b9\n\u30b1\u30fc\u30b9\u306f\u3001iMac\u3067Fusion360\u3092\u4f7f\u3063\u30663D\u30e2\u30c7\u30eb\u3092\u8a2d\u8a08\u3057\u3001\u4f1a\u793e\u306b\u3042\u308b3D\u30d7\u30ea\u30f3\u30bf\u30fc\u30c0\u30f4\u30a3\u30f3\u30c1 1.0 AiO\u3067\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\n\n3D\u30e2\u30c7\u30eb(\u8a2d\u8a08\u4e2d)\n\n\uff13D\u30e2\u30c7\u30eb(\u5b8c\u6210)\n\n\u914d\u7dda\nFeliCa\u30ea\u30fc\u30c0\u3068Wi-Fi\u5185\u8535mbed\u30e2\u30b8\u30e5\u30fc\u30eb\u3001LCD\u30e2\u30b8\u30e5\u30fc\u30eb\u3068Wi-Fi\u5185\u8535mbed\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u96fb\u6e90\u306fWi-Fi\u5185\u8535mbed\u30e2\u30b8\u30e5\u30fc\u30eb\u4e0a\u306emicroUSB\u30b3\u30cd\u30af\u30bf\u304b\u3089\u7d66\u96fb\u3057\u307e\u3059\u3002\n\n\n\u7d44\u307f\u7acb\u3066\n\u307e\u305a\u3001FeliCa\u30ea\u30fc\u30c0\u3068LCD\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30b1\u30fc\u30b9\u306b\u306f\u3081\u8fbc\u307f\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001Wi-Fi\u5185\u8535mbed\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u306f\u3081\u8fbc\u307f\u3001\u5e95\u84cb\u3092\u3057\u3081\u307e\u3059\u3002\n\n\n\u5b8c\u6210\uff01\n\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\n\n\u7aef\u672b\nARM\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3001mbed\u3067\u958b\u767a\u3057\u307e\u3057\u305f\u3002\n\n\u30b5\u30fc\u30d0\n\u30bf\u30c3\u30c1\u5f8c\u306e\u30e6\u30fc\u30b6\u8a8d\u8a3c\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u69cb\u6210\u306b\u3057\u307e\u3057\u305f\u3002\n * \u30d7\u30ed\u30b0\u30e9\u30e0 Scala\n * \u7aef\u672b\u3068\u306eHTTP\u901a\u4fe1 Akka HTTP\n * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9 PostgreSQL\n * \u30b5\u30fc\u30d0 heroku\n\u30c6\u30b9\u30c8\u6642\u306b\u306f\u3001REST\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3057\u3066\u3001Postman\u3092\u5229\u7528\u3002\u3053\u308c\u3001\u4fbf\u5229\u3067\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nServer.scala\nimport java.net.URI\nimport java.nio.ByteBuffer\nimport java.security.AlgorithmParameters\nimport java.util.{Base64, Date}\nimport javax.crypto.spec.{PBEKeySpec, IvParameterSpec, SecretKeySpec}\nimport javax.crypto.{Cipher, SecretKeyFactory}\nimport java.security.SecureRandom\n\nimport akka.actor.ActorSystem\nimport akka.http.scaladsl.Http\nimport akka.http.scaladsl.marshallers.xml.ScalaXmlSupport._\nimport akka.http.scaladsl.marshalling.Marshal\nimport akka.http.scaladsl.model.ResponseEntity\nimport akka.http.scaladsl.unmarshalling.Unmarshal\nimport akka.http.scaladsl.server.Directives._\nimport akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._\nimport akka.http.scaladsl.util.FastFuture.EnhancedFuture\n\nimport akka.stream.ActorMaterializer\nimport akka.util.Timeout\nimport spray.json.DefaultJsonProtocol\n\nimport scala.util.Properties\n\nimport slick.driver.PostgresDriver.api._\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration._\n\ncase class UpdateRequest(encryptedMessage: String)\n\n\nobject Main extends App {\n  val keyPassword = \"...\"\n  val dPassword = \"...\"\n  val repeat = ...\n\n  val port = Properties.envOrElse(\"PORT\", \"...\").toInt\n  implicit val system = ActorSystem(\"...\")\n  implicit val materializer = ActorMaterializer()\n  implicit val timeout = Timeout(20 seconds)\n\n  val dbUri = new URI(System.getenv(\"DATABASE_URL\"))\n  val username = dbUri.getUserInfo.split(\":\")(0)\n  val password = dbUri.getUserInfo.split(\":\")(1)\n  var dbUrl = s\"jdbc:postgresql://${dbUri.getHost}:${dbUri.getPort}${dbUri.getPath}\"\n  if (System.getenv(\"STACK\") == null) {\n    dbUrl = s\"${dbUrl}?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory\"\n  }\n  val db = Database.forURL(dbUrl, driver = \"org.postgresql.Driver\", user = username, password = password)\n  val balances = TableQuery[Balances]\n  val transactions = TableQuery[Transactions]\n  val permissions = TableQuery[Permissions]\n\n  import system.dispatcher\n\n  val route = {\n    path(\"a\") {\n      post {\n        formFields('encryptedRequest) { encryptedRequest => {\n          complete {\n            val decrypted = decodeToken(encryptedRequest)\n            val q = balances.filter(_.token === decrypted._2)\n            val select = q.result.headOption\n            val f = db.run(select)\n            val result = Await.result(f, Duration.Inf)\n            result match {\n              case Some(someone) => <r>NG</r>\n              case None =>\n                db.run(balances += Balance(decrypted._1, decrypted._2, decrypted._3))\n                <r>OK</r>\n            }\n          }\n        }\n        }\n      }\n    } ~ path(\"v\") {\n      post {\n        formFields('encryptedRequest) { encryptedRequest => {\n          complete {\n            val decrypted = decodeToken(encryptedRequest)\n            val select = balances.filter(_.token === decrypted._2).result.headOption\n            val f = db.run(select)\n            val result = Await.result(f, Duration.Inf)\n            result match {\n              case Some(someone) => {\n                <r>OK</r>\n              }\n              case None => <r>NG</r>\n            }\n          }\n        }\n        }\n      }\n    } ~ path(\"w\") {\n      post {\n        formFields('encryptedRequest) {\n          encryptedRequest => {\n            complete {\n              val decrypted = decodeToken(encryptedRequest)\n              val q = balances.filter(_.token === decrypted._2)\n              val select = q.result.headOption\n              val f2 = db.run(select)\n              val result2 = Await.result(f2, Duration.Inf)\n              result2 match {\n                case Some(someone) => {\n                  val newBalance = someone.balance + decrypted._3\n                  if (newBalance >= 0) {\n                    db.run(q.update(someone.copy(timeStamp = decrypted._1, balance = newBalance)))\n                    val transaction = Transaction(decrypted._1, decrypted._2, decrypted._3)\n                    val f = db.run(transactions += transaction)\n                    val result = Await.result(f, Duration.Inf)\n                    <r>OK:Withdraw,{newBalance}</r>\n                  } else\n                    <r>NG:Overdraw,{someone.balance}</r>\n                }\n                case None =>\n                  <r>NG:Invalid,-1</r>\n              }\n            }\n          }\n        }\n      }\n    }\n    ...\n  }\n\n  val bindingFuture = Http().bindAndHandle(route, \"0.0.0.0\", port)\n\n  println(\"Starting on port: \" + port)\n\n  def decodeToken(message: String): (Int, String, Int) = {\n    ...\n    (timeStamp, token, amount)\n  }\n\n  def hex2byte(hex: String): Array[Byte] = {\n    hex.sliding(2,2).toArray.map(Integer.parseInt(_, 16).toByte)\n  }\n\n  def getHashedToken(token :Array[Byte]): Array[Byte] = {\n    val salt = createSalt()\n    val keySpec = new PBEKeySpec(token.map(_.toChar), salt, ...)\n    val factory = SecretKeyFactory.getInstance(...)\n    factory.generateSecret(keySpec).getEncoded()\n  }\n\n  def createSalt(): Array[Byte] = {\n      ...\n  }\n  ...\n\n\n# \u7d4c\u7def\n\u4f1a\u793e\u3067\u67d0\u30b3\u30fc\u30d2\u30fc\u30b5\u30fc\u30d0\u30fc\u3092\u5c0e\u5165\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u969b\u306b\u5229\u7528\u8005\u304b\u3089\u3001\u3069\u3046\u3084\u3063\u3066\u96c6\u91d1\u3059\u308b\u304b\u304c\u554f\u984c\u306b\u3002\n\u6bce\u6708\u5b9a\u984d\u3092\u5229\u7528\u4e88\u5b9a\u8005\u306b\u6255\u3063\u3066\u3082\u3089\u3046\u3068\u3044\u3046\u3053\u3068\u3082\u8003\u3048\u307e\u3057\u305f\u304c\u3001\u3084\u3063\u3071\u308a\u5229\u7528\u3057\u305f\u3060\u3051\u96c6\u91d1\u3057\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001NFC\u3092\u5229\u7528\u3057\u305f\u5c02\u7528\u7aef\u672b\u3092\u4f5c\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n# \u500b\u3005\u306e\u5229\u7528\u8005\u306e\u8b58\u5225\u65b9\u6cd5\n\u5229\u7528\u8005\u306e\u8b58\u5225\u306f\u3001\u65b0\u305f\u306b\u30ab\u30fc\u30c9\u306a\u3069\u3092\u767a\u884c\u3059\u308b\u3053\u3068\u306f\u3057\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u500b\u3005\u4eba\u304c\u6240\u6709\u3057\u3066\u3044\u308b\u4efb\u610f\u306eFeliCa\u30ab\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3002\n\n# \u4ed5\u7d44\u307f\n1. \u7aef\u672b\u306bFeliCa\u30ab\u30fc\u30c9\u3092\u30bf\u30c3\u30c1\n2. 1\u30bf\u30c3\u30c1\u6bce\u306b\u6c7a\u3081\u3089\u308c\u305f\u5b9a\u984d\u304c\u30b5\u30fc\u30d0\u4e0a\u306e\u6b8b\u9ad8\u3088\u308a\u5f15\u304b\u308c\u308b\n3. \u96fb\u6e90\u6295\u5165\u6642\u3001Wi-Fi\u63a5\u7d9a\u6642\u3001\u30bf\u30c3\u30c1\u6642\u306b\u306f\u7aef\u672b\u4e0a\u306eLCD\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u305d\u306e\u60c5\u5831\u3092\u8868\u793a\n\n# \u5c02\u7528\u7aef\u672b\n\u5c02\u7528\u7aef\u672b\u306f\u3001\u6b21\u306e\u3082\u306e\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n* FeliCa \u30ea\u30fc\u30c0\u30fc \u30e2\u30b8\u30e5\u30fc\u30eb\n* Wi-Fi\u5185\u8535 mbed \u30e2\u30b8\u30e5\u30fc\u30eb \n* LCD \u30e2\u30b8\u30e5\u30fc\u30eb\n* \u81ea\u4f5c\u30b1\u30fc\u30b9\n\n# FeliCa \u30ea\u30fc\u30c0\u30fc \u30e2\u30b8\u30e5\u30fc\u30eb\n\u7d44\u8fbc\u7528\u306eFeliCa\u30ea\u30fc\u30c0\u30fc\u30fb\u30e9\u30a4\u30bf\u30fc\u3067\u3042\u308b[RC-S620S](https://www.switch-science.com/catalog/353/)\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n# Wi-Fi\u5185\u8535 mbed \u30e2\u30b8\u30e5\u30fc\u30eb\n\u30ea\u30fc\u30c0\u30fc\u306e\u5236\u5fa1\u3068\u901a\u4fe1\u306b\u3064\u3044\u3066\u306f\u3001Wi-Fi\u5185\u8535 mbed \u30e2\u30b8\u30e5\u30fc\u30eb[WiFi DipCortex](https://developer.mbed.org/platforms/WiFi-DipCortex/)\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\uff08\u3061\u306a\u307f\u306b\u3001\u73fe\u5728\u306f\u8ca9\u58f2\u505c\u6b62\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\uff09\n\n# LCD \u30e2\u30b8\u30e5\u30fc\u30eb\n\u8868\u793a\u306e\u305f\u3081\u306eLCD\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u79cb\u6708\u96fb\u5b50\u3067\u8ca9\u58f2\u3057\u3066\u3044\u308b\u3001[I2C\u63a5\u7d9a\u5c0f\u578b\u30ad\u30e3\u30e9\u30af\u30bfLCD\u30e2\u30b8\u30e5\u30fc\u30eb](http://akizukidenshi.com/catalog/g/gK-08896/)\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n# \u81ea\u4f5c\u30b1\u30fc\u30b9\n\u30b1\u30fc\u30b9\u306f\u3001iMac\u3067[Fusion360](http://www.autodesk.co.jp/products/fusion-360/)\u3092\u4f7f\u3063\u30663D\u30e2\u30c7\u30eb\u3092\u8a2d\u8a08\u3057\u3001\u4f1a\u793e\u306b\u3042\u308b3D\u30d7\u30ea\u30f3\u30bf\u30fc[\u30c0\u30f4\u30a3\u30f3\u30c1 1.0 AiO](https://jp.xyzprinting.com/product/da-Vinci-1.0-AiO)\u3067\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\n\n![150710-0002.png](https://qiita-image-store.s3.amazonaws.com/0/21380/857f58fb-32d3-f8d1-faee-028ddcec992a.png)\n3D\u30e2\u30c7\u30eb(\u8a2d\u8a08\u4e2d)\n\n![aa35be61-6a50-c730-2aeb-3e7132950540.png](https://qiita-image-store.s3.amazonaws.com/0/21380/a7eacb23-33db-61c2-668a-8f30be1a8845.png)\n\uff13D\u30e2\u30c7\u30eb(\u5b8c\u6210)\n\n# \u914d\u7dda\nFeliCa\u30ea\u30fc\u30c0\u3068Wi-Fi\u5185\u8535mbed\u30e2\u30b8\u30e5\u30fc\u30eb\u3001LCD\u30e2\u30b8\u30e5\u30fc\u30eb\u3068Wi-Fi\u5185\u8535mbed\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u96fb\u6e90\u306fWi-Fi\u5185\u8535mbed\u30e2\u30b8\u30e5\u30fc\u30eb\u4e0a\u306emicroUSB\u30b3\u30cd\u30af\u30bf\u304b\u3089\u7d66\u96fb\u3057\u307e\u3059\u3002\n![aEg0vDLUgRr5.jpg](https://qiita-image-store.s3.amazonaws.com/0/21380/dcaed4d1-3bc0-d210-69db-4c93625014c3.jpeg)\n\n# \u7d44\u307f\u7acb\u3066\n\u307e\u305a\u3001FeliCa\u30ea\u30fc\u30c0\u3068LCD\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30b1\u30fc\u30b9\u306b\u306f\u3081\u8fbc\u307f\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001Wi-Fi\u5185\u8535mbed\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u306f\u3081\u8fbc\u307f\u3001\u5e95\u84cb\u3092\u3057\u3081\u307e\u3059\u3002\n\n![jyXMaIN2Vi15.jpg](https://qiita-image-store.s3.amazonaws.com/0/21380/3c3aa466-4869-0456-289c-e6e84daa3c00.jpeg)\n\n# \u5b8c\u6210\uff01\n![i7x6VRMYwNz6.jpg](https://qiita-image-store.s3.amazonaws.com/0/21380/bfc606d9-23af-f9e5-775e-95e7f0d3c91d.jpeg)\n\n# \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\n## \u7aef\u672b\nARM\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3001[mbed](https://developer.mbed.org/)\u3067\u958b\u767a\u3057\u307e\u3057\u305f\u3002\n## \u30b5\u30fc\u30d0\n\u30bf\u30c3\u30c1\u5f8c\u306e\u30e6\u30fc\u30b6\u8a8d\u8a3c\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u69cb\u6210\u306b\u3057\u307e\u3057\u305f\u3002\n * \u30d7\u30ed\u30b0\u30e9\u30e0 [Scala](http://www.scala-lang.org/)\n * \u7aef\u672b\u3068\u306eHTTP\u901a\u4fe1 [Akka HTTP](http://doc.akka.io/docs/akka-stream-and-http-experimental/current/scala/http/)\n * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9 [PostgreSQL](http://www.postgresql.org/)\n * \u30b5\u30fc\u30d0 [heroku](https://www.heroku.com/)\n\u30c6\u30b9\u30c8\u6642\u306b\u306f\u3001REST\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3057\u3066\u3001[Postman](http://www.getpostman.com/)\u3092\u5229\u7528\u3002\u3053\u308c\u3001\u4fbf\u5229\u3067\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```scala:Server.scala\nimport java.net.URI\nimport java.nio.ByteBuffer\nimport java.security.AlgorithmParameters\nimport java.util.{Base64, Date}\nimport javax.crypto.spec.{PBEKeySpec, IvParameterSpec, SecretKeySpec}\nimport javax.crypto.{Cipher, SecretKeyFactory}\nimport java.security.SecureRandom\n\nimport akka.actor.ActorSystem\nimport akka.http.scaladsl.Http\nimport akka.http.scaladsl.marshallers.xml.ScalaXmlSupport._\nimport akka.http.scaladsl.marshalling.Marshal\nimport akka.http.scaladsl.model.ResponseEntity\nimport akka.http.scaladsl.unmarshalling.Unmarshal\nimport akka.http.scaladsl.server.Directives._\nimport akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._\nimport akka.http.scaladsl.util.FastFuture.EnhancedFuture\n\nimport akka.stream.ActorMaterializer\nimport akka.util.Timeout\nimport spray.json.DefaultJsonProtocol\n\nimport scala.util.Properties\n\nimport slick.driver.PostgresDriver.api._\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration._\n\ncase class UpdateRequest(encryptedMessage: String)\n\n\nobject Main extends App {\n  val keyPassword = \"...\"\n  val dPassword = \"...\"\n  val repeat = ...\n\n  val port = Properties.envOrElse(\"PORT\", \"...\").toInt\n  implicit val system = ActorSystem(\"...\")\n  implicit val materializer = ActorMaterializer()\n  implicit val timeout = Timeout(20 seconds)\n\n  val dbUri = new URI(System.getenv(\"DATABASE_URL\"))\n  val username = dbUri.getUserInfo.split(\":\")(0)\n  val password = dbUri.getUserInfo.split(\":\")(1)\n  var dbUrl = s\"jdbc:postgresql://${dbUri.getHost}:${dbUri.getPort}${dbUri.getPath}\"\n  if (System.getenv(\"STACK\") == null) {\n    dbUrl = s\"${dbUrl}?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory\"\n  }\n  val db = Database.forURL(dbUrl, driver = \"org.postgresql.Driver\", user = username, password = password)\n  val balances = TableQuery[Balances]\n  val transactions = TableQuery[Transactions]\n  val permissions = TableQuery[Permissions]\n\n  import system.dispatcher\n\n  val route = {\n    path(\"a\") {\n      post {\n        formFields('encryptedRequest) { encryptedRequest => {\n          complete {\n            val decrypted = decodeToken(encryptedRequest)\n            val q = balances.filter(_.token === decrypted._2)\n            val select = q.result.headOption\n            val f = db.run(select)\n            val result = Await.result(f, Duration.Inf)\n            result match {\n              case Some(someone) => <r>NG</r>\n              case None =>\n                db.run(balances += Balance(decrypted._1, decrypted._2, decrypted._3))\n                <r>OK</r>\n            }\n          }\n        }\n        }\n      }\n    } ~ path(\"v\") {\n      post {\n        formFields('encryptedRequest) { encryptedRequest => {\n          complete {\n            val decrypted = decodeToken(encryptedRequest)\n            val select = balances.filter(_.token === decrypted._2).result.headOption\n            val f = db.run(select)\n            val result = Await.result(f, Duration.Inf)\n            result match {\n              case Some(someone) => {\n                <r>OK</r>\n              }\n              case None => <r>NG</r>\n            }\n          }\n        }\n        }\n      }\n    } ~ path(\"w\") {\n      post {\n        formFields('encryptedRequest) {\n          encryptedRequest => {\n            complete {\n              val decrypted = decodeToken(encryptedRequest)\n              val q = balances.filter(_.token === decrypted._2)\n              val select = q.result.headOption\n              val f2 = db.run(select)\n              val result2 = Await.result(f2, Duration.Inf)\n              result2 match {\n                case Some(someone) => {\n                  val newBalance = someone.balance + decrypted._3\n                  if (newBalance >= 0) {\n                    db.run(q.update(someone.copy(timeStamp = decrypted._1, balance = newBalance)))\n                    val transaction = Transaction(decrypted._1, decrypted._2, decrypted._3)\n                    val f = db.run(transactions += transaction)\n                    val result = Await.result(f, Duration.Inf)\n                    <r>OK:Withdraw,{newBalance}</r>\n                  } else\n                    <r>NG:Overdraw,{someone.balance}</r>\n                }\n                case None =>\n                  <r>NG:Invalid,-1</r>\n              }\n            }\n          }\n        }\n      }\n    }\n    ...\n  }\n\n  val bindingFuture = Http().bindAndHandle(route, \"0.0.0.0\", port)\n\n  println(\"Starting on port: \" + port)\n\n  def decodeToken(message: String): (Int, String, Int) = {\n    ...\n    (timeStamp, token, amount)\n  }\n\n  def hex2byte(hex: String): Array[Byte] = {\n    hex.sliding(2,2).toArray.map(Integer.parseInt(_, 16).toByte)\n  }\n\n  def getHashedToken(token :Array[Byte]): Array[Byte] = {\n    val salt = createSalt()\n    val keySpec = new PBEKeySpec(token.map(_.toChar), salt, ...)\n    val factory = SecretKeyFactory.getInstance(...)\n    factory.generateSecret(keySpec).getEncoded()\n  }\n\n  def createSalt(): Array[Byte] = {\n      ...\n  }\n  ...\n```\n\n", "tags": ["3D\u30d7\u30ea\u30f3\u30bf", "mbed", "Scala", "Akka", "FeliCa"]}