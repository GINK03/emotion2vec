{"tags": ["iOS", "OSX", "C++", "C++11", "OpenAL"], "context": " More than 1 year has passed since last update.\n\n\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\n\nkanon\n\nOpenAL\u306e \u6271\u3044\u3084\u3059\u3044 \u30e9\u30c3\u30d1\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u81ea\u753b\u81ea\u8cdb\uff09\n\n\n\u30ec\u30dd\u30b8\u30c8\u30ea\n\nkanon@github\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n#include <iostream>\n#include <thread>\n#include <kanon.hpp>\n\nint main(int argc, const char * argv[])\n{\n    // \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30ba\n    kanon::system_manager::initialize();\n\n    if (kanon::system_manager::is_ready()) {\n\n        // \u540d\u66f2\u300eLOVE KANON\u300f\u3092\u8aad\u307f\u8fbc\u307f\n        std::string path(\"LOVE_KANON.wav\");\n        auto data = read_from_wave_file(path);\n\n        // audio\u30af\u30e9\u30b9\n        kanon::audio audio(data);\n\n        //\u518d\u751f\n        audio.play();\n\n        // \u518d\u751f\u3057\u3066\u3044\u308b\u9593\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u5b9f\u884c\u3055\u308c\u308b\n        audio.while_playing([&](bool& stop) {\n\n            std::cout << \"\u30e8\u30ed\u30b7\u30af\u30cd\";\n\n            // CPU\u306e\u7bc0\u7d04\u3092\u3059\u308b\n            std::this_thread::sleep_for(std::chrono::milliseconds(500));\n\n        });\n\n    }\n\n    // \u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30ba\n    kanon::system_manager::finalize();\n\n    return 0;\n}\n\n\n\u7d50\u679c\n\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd...\n\n\n\u7d50\u8ad6\n\n\n\u304b\u306e\u3093\u3061\u3083\u3093\u304b\u308f\u3044\u3044\n\nkanon\u306f\u4f7f\u3044\u3084\u3059\u3044\uff08\u81ea\u753b\u81ea\u8cdb\uff09\n\n## \u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\n\n### kanon\n\n- OpenAL\u306e **\u6271\u3044\u3084\u3059\u3044** \u30e9\u30c3\u30d1\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u81ea\u753b\u81ea\u8cdb\uff09\n\n#### \u30ec\u30dd\u30b8\u30c8\u30ea\n\n- [kanon@github](https://github.com/moriturus/kanon)\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```cpp\n#include <iostream>\n#include <thread>\n#include <kanon.hpp>\n\nint main(int argc, const char * argv[])\n{\n    // \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30ba\n    kanon::system_manager::initialize();\n    \n    if (kanon::system_manager::is_ready()) {\n        \n        // \u540d\u66f2\u300eLOVE KANON\u300f\u3092\u8aad\u307f\u8fbc\u307f\n        std::string path(\"LOVE_KANON.wav\");\n        auto data = read_from_wave_file(path);\n        \n        // audio\u30af\u30e9\u30b9\n        kanon::audio audio(data);\n        \n        //\u518d\u751f\n        audio.play();\n        \n        // \u518d\u751f\u3057\u3066\u3044\u308b\u9593\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u5b9f\u884c\u3055\u308c\u308b\n        audio.while_playing([&](bool& stop) {\n           \n            std::cout << \"\u30e8\u30ed\u30b7\u30af\u30cd\";\n            \n            // CPU\u306e\u7bc0\u7d04\u3092\u3059\u308b\n            std::this_thread::sleep_for(std::chrono::milliseconds(500));\n            \n        });\n        \n    }\n    \n    // \u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30ba\n    kanon::system_manager::finalize();\n    \n    return 0;\n}\n```\n\n## \u7d50\u679c\n\n```\n\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd\u30e8\u30ed\u30b7\u30af\u30cd...\n```\n\n## \u7d50\u8ad6\n\n- [\u304b\u306e\u3093\u3061\u3083\u3093](http://kaminomi.jp/kanon/)\u304b\u308f\u3044\u3044\n- [kanon](https://github.com/moriturus/kanon)\u306f\u4f7f\u3044\u3084\u3059\u3044\uff08\u81ea\u753b\u81ea\u8cdb\uff09"}