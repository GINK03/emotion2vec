{"context": "Amazon.com\u306e\uff15\uff10\uff10\u30a2\u30a4\u30c6\u30e0\u3092Amazon.co.jp\u306b\u3042\u308b\u540c\u3058ASIN\u30b3\u30fc\u30c9\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u4fa1\u683c\u3092\u6bd4\u8f03\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u30d1\u30fc\u30c8\uff11\u3067\u3001\uff15\uff10\uff10\u30a2\u30a4\u30c6\u30e0\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\n\u30d1\u30fc\u30c8\uff12\u3067\u3001Amazon.com\u3068Amazon.co.jp\u306e\u4fa1\u683c\u306e\u6bd4\u8f03\u3092\u3057\u307e\u3059\u3002\n\u30d1\u30fc\u30c8\uff13\u3067\u3001\u4fa1\u683c\u30ea\u30b9\u30c8\u3092\u898b\u3084\u3059\u304f\u52a0\u5de5\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u4eca\u56de\u306e\u30d1\u30fc\u30c8\uff11\u306e\u89e3\u8aac\u3067\u3059\u3002\n\u307e\u305a\u306f\u3001Amazon.com\u306eAWS\u306eID\u3068\u79d8\u5bc6\u9375\u304c\u5fc5\u8981\u3067\u3059\u3002ID\u306a\u3069\u306e\u53d6\u5f97\u65b9\u6cd5\u306f\u3001\u300cAmazon\u6d77\u5916\u8f38\u51fa\u300d\u306e\u985e\u306e\u672c\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u81ea\u5206\u3067\u63a2\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n@Keywords\u306b\u3001\u9069\u5f53\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\u3002\uff08\uff11\uff10\u500b\uff09\n\u5b9f\u884c\u3059\u308b\u3068\u691c\u7d22\u3057\u305fASIN\u304c\uff15\uff10\uff10\u500b\u3000STDOUT\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u4eca\u65e5\u306f\u3053\u3053\u307e\u3067\u3002\n\nama.pl\n#!/usr/bin/perl -w\nuse strict;\nuse warnings;\n\nuse Data::Dumper;\n\nuse RequestSignatureHelper;\nuse LWP::UserAgent;\nuse XML::Simple;\n\nuse constant myAWSId        => ''; // AWS\u306eID\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\nuse constant myAWSSecret    => ''; // AWS\u306e\u79d8\u5bc6\u9375\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\nuse constant myEndPoint     => 'ecs.amazonaws.com';\n\n# see if user provided ItemId on command-line\nmy $itemId = shift @ARGV || 'B00006JNN7';\n\n# Set up the helper\nmy $helper = new RequestSignatureHelper (\n    +RequestSignatureHelper::kAWSAccessKeyId => myAWSId,\n    +RequestSignatureHelper::kAWSSecretKey => myAWSSecret,\n    +RequestSignatureHelper::kEndPoint => myEndPoint,\n);\nmy @SearchIndexs = ( 'All' );\nmy @Keywords = ( 'japan import u' , 'japan import v' , 'japan import w' , 'japan import x' , 'japan import y' , 'japan import z' , 'dragonball' , 'test' , 'vanhalen' , 'japan trust' );\n\nfor (my $k=0; $k <=  9; $k++) {\n        for (my $i=1; $i <= 5; $i++) {\n                my $request = {\n                        Service => 'AWSECommerceService',\n                        Operation => 'ItemSearch',\n                        AssociateTag  => '', // amazon.com\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n                        SearchIndex => $SearchIndexs[0],\n                        Keywords => $Keywords[$k],\n                        ResponseGroup => 'ItemIds,SalesRank,OfferSummary',\n                        ItemPage => $i . '' ,\n                };\n\n                # Sign the request\n                my $signedRequest = $helper->sign($request);\n\n                # We can use the helper's canonicalize() function to construct the query string too.\n                my $queryString = $helper->canonicalize($signedRequest);\n                my $url = \"http://\" . myEndPoint . \"/onca/xml?\" . $queryString;\n\n                my $ua = new LWP::UserAgent();\n                my $response = $ua->get($url);\n                my $content = $response->content();\n                #print \"Recieved Response: $content \\n\";\n\n                my $xmlParser = new XML::Simple();\n                my $xml = $xmlParser->XMLin($content,ForceArray=>['Item']);\n\n                #print Dumper($xml) ;\n\n                foreach ( @{ $xml->{Items}{Item} } )\n                {\n                        print $_->{ASIN} . \"\\n\" ;\n                }\n\n                if ($response->is_success()) {\n                } else {\n                        my $error = findError($xml);\n                        if (defined $error) {\n                                print \"Error: \" . $error->{Code} . \": \" . $error->{Message} . \"\\n\";\n                        } else {\n                                print \"Unknown Error!\\n\";\n                        }\n                }\n                sleep 1;\n        }\n}\nsub findError {\n    my $xml = shift;\n\n    return undef unless ref($xml) eq 'HASH';\n\n    if (exists $xml->{Error}) { return $xml->{Error}; };\n\n    for (keys %$xml) {\n        my $error = findError($xml->{$_});\n        return $error if defined $error;\n    }\n\n    return undef;\n}\n\n\nperl\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7d42\u308f\u308a\nAmazon.com\u306e\uff15\uff10\uff10\u30a2\u30a4\u30c6\u30e0\u3092Amazon.co.jp\u306b\u3042\u308b\u540c\u3058ASIN\u30b3\u30fc\u30c9\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u4fa1\u683c\u3092\u6bd4\u8f03\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n\u30d1\u30fc\u30c8\uff11\u3067\u3001\uff15\uff10\uff10\u30a2\u30a4\u30c6\u30e0\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\n\u30d1\u30fc\u30c8\uff12\u3067\u3001Amazon.com\u3068Amazon.co.jp\u306e\u4fa1\u683c\u306e\u6bd4\u8f03\u3092\u3057\u307e\u3059\u3002\n\u30d1\u30fc\u30c8\uff13\u3067\u3001\u4fa1\u683c\u30ea\u30b9\u30c8\u3092\u898b\u3084\u3059\u304f\u52a0\u5de5\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u3001\u4eca\u56de\u306e\u30d1\u30fc\u30c8\uff11\u306e\u89e3\u8aac\u3067\u3059\u3002\n\u307e\u305a\u306f\u3001Amazon.com\u306eAWS\u306eID\u3068\u79d8\u5bc6\u9375\u304c\u5fc5\u8981\u3067\u3059\u3002ID\u306a\u3069\u306e\u53d6\u5f97\u65b9\u6cd5\u306f\u3001\u300cAmazon\u6d77\u5916\u8f38\u51fa\u300d\u306e\u985e\u306e\u672c\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u81ea\u5206\u3067\u63a2\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n```@Keywords```\u306b\u3001\u9069\u5f53\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\u3002\uff08\uff11\uff10\u500b\uff09\n\u5b9f\u884c\u3059\u308b\u3068\u691c\u7d22\u3057\u305fASIN\u304c\uff15\uff10\uff10\u500b\u3000STDOUT\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u4eca\u65e5\u306f\u3053\u3053\u307e\u3067\u3002\n\n\n\n```perl:ama.pl\n#!/usr/bin/perl -w\nuse strict;\nuse warnings;\n\nuse Data::Dumper;\n\nuse RequestSignatureHelper;\nuse LWP::UserAgent;\nuse XML::Simple;\n\nuse constant myAWSId        => ''; // AWS\u306eID\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\nuse constant myAWSSecret    => ''; // AWS\u306e\u79d8\u5bc6\u9375\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\nuse constant myEndPoint     => 'ecs.amazonaws.com';\n\n# see if user provided ItemId on command-line\nmy $itemId = shift @ARGV || 'B00006JNN7';\n\n# Set up the helper\nmy $helper = new RequestSignatureHelper (\n    +RequestSignatureHelper::kAWSAccessKeyId => myAWSId,\n    +RequestSignatureHelper::kAWSSecretKey => myAWSSecret,\n    +RequestSignatureHelper::kEndPoint => myEndPoint,\n);\nmy @SearchIndexs = ( 'All' );\nmy @Keywords = ( 'japan import u' , 'japan import v' , 'japan import w' , 'japan import x' , 'japan import y' , 'japan import z' , 'dragonball' , 'test' , 'vanhalen' , 'japan trust' );\n\nfor (my $k=0; $k <=  9; $k++) {\n        for (my $i=1; $i <= 5; $i++) {\n                my $request = {\n                        Service => 'AWSECommerceService',\n                        Operation => 'ItemSearch',\n                        AssociateTag  => '', // amazon.com\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n                        SearchIndex => $SearchIndexs[0],\n                        Keywords => $Keywords[$k],\n                        ResponseGroup => 'ItemIds,SalesRank,OfferSummary',\n                        ItemPage => $i . '' ,\n                };\n\n                # Sign the request\n                my $signedRequest = $helper->sign($request);\n\n                # We can use the helper's canonicalize() function to construct the query string too.\n                my $queryString = $helper->canonicalize($signedRequest);\n                my $url = \"http://\" . myEndPoint . \"/onca/xml?\" . $queryString;\n\n                my $ua = new LWP::UserAgent();\n                my $response = $ua->get($url);\n                my $content = $response->content();\n                #print \"Recieved Response: $content \\n\";\n\n                my $xmlParser = new XML::Simple();\n                my $xml = $xmlParser->XMLin($content,ForceArray=>['Item']);\n\n                #print Dumper($xml) ;\n\n                foreach ( @{ $xml->{Items}{Item} } )\n                {\n                        print $_->{ASIN} . \"\\n\" ;\n                }\n\n                if ($response->is_success()) {\n                } else {\n                        my $error = findError($xml);\n                        if (defined $error) {\n                                print \"Error: \" . $error->{Code} . \": \" . $error->{Message} . \"\\n\";\n                        } else {\n                                print \"Unknown Error!\\n\";\n                        }\n                }\n                sleep 1;\n        }\n}\nsub findError {\n    my $xml = shift;\n\n    return undef unless ref($xml) eq 'HASH';\n\n    if (exists $xml->{Error}) { return $xml->{Error}; };\n\n    for (keys %$xml) {\n        my $error = findError($xml->{$_});\n        return $error if defined $error;\n    }\n\n    return undef;\n}\n```\n\nperl\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7d42\u308f\u308a\n", "tags": ["Perl", "AWS", "Amazon", "XML"]}