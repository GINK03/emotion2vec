{"context": "\n\n\u6982\u8981\n@hyuki \u5148\u751f\u8457\u306e\u300eJava\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u300f\uff082004\u5e74\u3001SB Creative\uff09\u306e1\u7ae0\u305a\u3064\u3092\u30d9\u30fc\u30b9\u306b\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092C#\u3067\u7f6e\u304d\u63db\u3048\u306a\u304c\u3089\u52c9\u5f37\u3057\u3066\u3044\u304f\u8a18\u4e8b\u3067\u3059\u3002\n\u203b\u8457\u8005\u306e @hyuki \u5148\u751f\u306b\u306f\u9069\u5207\u306b\u66f8\u7c4d\u3078\u306e\u53c2\u7167\u3092\u5165\u308c\u308c\u3070\u554f\u984c\u306a\u3044\u65e8\u3054\u78ba\u8a8d\u3044\u305f\u3060\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u672c\u984c\nStrategy\u30d1\u30bf\u30fc\u30f3\n\u7b2c9\u56de\u306fStrategy Pattern\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002Strategy Pattern\u30d1\u30bf\u30fc\u30f3\u306f\u300c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3054\u3063\u305d\u308a\u5207\u308a\u66ff\u3048\u3001\u540c\u3058\u554f\u984c\u3092\u5225\u306e\u65b9\u6cd5\u3067\u89e3\u304f\u306e\u3092\u5bb9\u6613\u306b\u3059\u308b\u300d\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u65e9\u901f\u5177\u4f53\u7684\u306a\u4e8b\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u300eJava\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u300f\uff082004\u5e74\u3001SB Creative\uff09\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092C#\u3067\uff08\u5927\u4f53\uff09\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace StrategyPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length != 2)\n            {\n                Console.WriteLine(\"Usage: Input  two args as radomeseed1 ane randomeseed2\");\n                Console.WriteLine(\"Example: 314 15\");\n                Environment.Exit(0);\n            }\n            int seed1 = int.Parse(args[0]);\n            int seed2 = int.Parse(args[1]);\n            Player player1 = new Player(\"Taro\", new WinningStrategy(seed1));\n            Player player2 = new Player(\"Hanako\", new ProbStrategy(seed2));\n            for (int i = 0; i < 10000; i++)\n            {\n                Hand nextHand1 = player1.NextHand();\n                Hand nextHand2 = player2.NextHand();\n                if (nextHand1.IsStrongerThan(nextHand2))\n                {\n                    Console.WriteLine($\"Winner: {player1}\");\n                    player1.Win();\n                    player2.Lose();\n                }\n                else if (nextHand2.IsStrongerThan(nextHand1))\n                {\n                    Console.WriteLine($\"Winner: {player2}\");\n                    player1.Lose();\n                    player2.Win();\n                }\n                else\n                {\n                    Console.WriteLine(\"Even...\");\n                    player1.Even();\n                    player2.Even();\n                }\n\n                Console.WriteLine(\"Total result:\");\n                Console.WriteLine(player1.ToString());\n                Console.WriteLine(player2.ToString());\n            }\n            // \u5b9f\u884c\u304c\u4e00\u77ac\u3067\u7d42\u308f\u3063\u3066\u78ba\u8a8d\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u30ad\u30fc\u306e\u5165\u529b\u3092\u5f85\u3061\u307e\u3059\n            Console.ReadLine();\n        }\n    }\n\n    public class Hand\n    {\n        public static readonly int HANDVALUE_GUU = 0; // \u30b0 \u30fc\u3092\u8868\u3059\u5024\n        public static readonly int HANDVALUE_CHO = 1; // \u30c1\u30e7\u30ad\u3092\u8868\u3059\u5024\n        public static readonly int HANDVALUE_PAA = 2; // \u30d1\u30fc\u3092\u8868\u3059\u5024\n        public static Hand[] hand = {\n            new Hand(HANDVALUE_GUU),\n            new Hand(HANDVALUE_CHO),\n            new Hand(HANDVALUE_PAA),\n        };\n        private static readonly string[] name = {\n            \"\u30b0\u30fc\", \"\u30c1\u30e7\u30ad\", \"\u30d1\u30fc\"\n        };\n        private int handvalue;\n        public static Hand GetHand(int handvalue)\n        {\n            return hand[handvalue];\n        }\n        private Hand(int handvalue)\n        {\n            this.handvalue = handvalue;\n        }\n\n        public bool IsStrongerThan(Hand h)\n        {\n            return Fight(h) == 1;\n        }\n\n        public bool IsWeakerThan(Hand h)\n        {\n            return Fight(h) == -1;\n        }\n\n        private int Fight(Hand h)\n        {\n            if (this == h)\n            {\n                return 0;\n            }\n            else if ((this.handvalue + 1) % 3 == h.handvalue)\n            {\n                return 1;\n            }\n            else\n            {\n                return -1;\n            }\n        }\n\n        public override string ToString()\n        {\n            return name[handvalue];\n        }\n    }\n\n    // Strategy\n    // \u30fb\u6226\u7565\u3092\u5b9a\u3081\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08API\uff09\u3092\u5b9a\u3081\u308b\n    public interface Strategy\n    {\n        Hand NextHand();\n        void Study(bool win); \n    }\n\n    // ConcreteStrategy\n    // \u30fbStrategy\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08API\uff09\u3092\u5b9f\u88c5\u3059\u308b\n    public class WinningStrategy : Strategy\n    {\n        private Random random;\n        private bool won = false;\n        private Hand prevHand;\n        public WinningStrategy(int seed)\n        {\n            random = new Random(seed);\n        }\n\n        public Hand NextHand()\n        {\n            if (!won)\n            {\n                prevHand = Hand.GetHand(random.Next(3));\n            }\n            return prevHand;\n        }\n\n        public void Study(bool win)\n        {\n            won = win;\n        }\n    }\n\n    // ConcreteStrategy\n    public class ProbStrategy : Strategy\n    {\n        private Random random;\n        private int prevHandValue = 0;\n        private int currentHandValue = 0;\n        private int[][] history =\n        {\n            new int[] { 1, 1, 1, },\n            new int[] { 1, 1, 1, },\n            new int[] { 1, 1, 1, },\n        };\n        public ProbStrategy(int seed)\n        {\n            random = new Random(seed);\n        }\n\n\n        public Hand NextHand()\n        {\n            int bet = random.Next(GetSum(currentHandValue));\n            int handvalue = 0;\n            if (bet < history[currentHandValue][0])\n            {\n                handvalue = 0;\n            }\n            else if (bet < history[currentHandValue][0] + history[currentHandValue][1])\n            {\n                handvalue = 1;\n            }\n            else\n            {\n                handvalue = 2;\n            }\n            prevHandValue = currentHandValue;\n            currentHandValue = handvalue;\n            return Hand.GetHand(handvalue);\n        }\n\n        private int GetSum(int hv)\n        {\n            int sum = 0;\n            for (int i = 0; i < 3; i++)\n            {\n                sum += history[hv][i];\n            }\n            return sum;\n        }\n\n        public void Study(bool win)\n        {\n            if (win)\n            {\n                history[prevHandValue][currentHandValue]++;\n            }\n            else\n            {\n                history[prevHandValue][(currentHandValue + 1) % 3]++;\n                history[prevHandValue][(currentHandValue + 2) % 3]++;\n            }\n        }\n    }\n\n    // Context\n    // \u30fbStrategy\u3092\u5229\u7528\u3059\u308b\n    // \u30fbConcreteStrategy\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6301\u3063\u3066\u3044\u3066\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5229\u7528\u3059\u308b\n    // \u30fb\u547c\u3073\u51fa\u3059\u306e\u306fStrategy\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n    public class Player\n    {\n        private string name;\n        private Strategy strategy;\n        private int wincount;\n        private int losecount;\n        private int gamecount;\n        public Player(string name, Strategy strategy)\n        {\n            this.name = name;\n            this.strategy = strategy;\n        }\n\n        public Hand NextHand()\n        {\n            return strategy.NextHand();\n        }\n\n        public void Win()\n        {\n            strategy.Study(true);\n            wincount++;\n            gamecount++;\n        }\n\n        public void Lose()\n        {\n            strategy.Study(false);\n            losecount++;\n            gamecount++;\n        }\n\n        public void Even()\n        {\n            gamecount++;\n        }\n\n        public override string ToString()\n        {\n            return $\"[{name}:{gamecount} games, {wincount} win, {losecount} lose]\";\n        }\n    }\n}\n\n\n\u52b9\u80fd\n\nStrategy\uff08\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff09\u306e\u5207\u308a\u66ff\u3048\u304c\u5bb9\u6613\u306a\u305f\u3081\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6027\u80fd\u6bd4\u8f03\u304c\u3057\u3084\u3059\u3044\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u304b\u3089\u5206\u96e2\u3057\u3001\u59d4\u8b72\u306b\u3088\u308a\u3086\u308b\u3084\u304b\u306b\u7d50\u3073\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\u540c\u4e00\u306e\u7d50\u679c\u3092\u5f97\u308b\u305f\u3081\u306b\u5225\u3005\u306e\u65b9\u6cd5\u3092\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u308b\uff08\u8a08\u7b97\u306e\u691c\u7b97\u3092\u3057\u3084\u3059\u3044\uff09\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u74b0\u5883\u306e\u72b6\u6cc1\u306b\u4f9d\u3063\u3066\u3082Strategy\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\n\u30e1\u30e2\u30ea\u304c\u5c11\u306a\u3044\u74b0\u5883\u3067\u7701\u30e1\u30e2\u30ea\uff08\u3060\u304c\u6642\u9593\u306f\u304b\u304b\u308b\uff09\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\n\n\n\n\n\u95a2\u9023\u3057\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\n\nFlyweight\u30d1\u30bf\u30fc\u30f3\nAbstract Factory\u30d1\u30bf\u30fc\u30f3\nState\u30d1\u30bf\u30fc\u30f3\n\n\n\u611f\u60f3\u3001\u7591\u554f\u3001\u30e1\u30e2\n\nStrategy\u306e\u6e21\u3057\u65b9\u306f\u5e7e\u3064\u304b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u305d\u3046\n\n\nStrategy\u3092Enum\u306b\u6301\u305f\u305b\u3066\u306f\u3044\u3051\u306a\u3044\u7406\u7531\n\n\n\u958b\u653e/\u9589\u9396\u539f\u5247\u304c\u9069\u7528\u3055\u308c\u305f\u72b6\u614b\u306b\u306a\u308b\u3088\u3046\u306b\u2026\u3067\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u304c\u6d3b\u304d\u305f\u8a3c\u3068\u8003\u3048\u3089\u308c\u305d\u3046\n\n\nStrategy\u30d1\u30bf\u30fc\u30f3\u3068\u958b\u653e/\u9589\u9396\u539f\u5247\u306b\u898b\u308b\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u306e\u6709\u7528\u6027\n\n\n\n\nC#\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\n\u2460Iterator\n\u2461Adapter\n\u2462Template Method\n\u2463Factory Method\n\u2464Singleton\n\u2465Prototype\n\u2466Builder\n\u2467AbstractFactory\n\u2468Bridge\n\u2469Strategy Pattern\n\u246aComposite Pattern\n\u246bDecorator Pattern\n## \u6982\u8981\n@hyuki \u5148\u751f\u8457\u306e[\u300eJava\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u300f\uff082004\u5e74\u3001SB Creative\uff09](http://www.hyuki.com/dp/)\u306e1\u7ae0\u305a\u3064\u3092\u30d9\u30fc\u30b9\u306b\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092C#\u3067\u7f6e\u304d\u63db\u3048\u306a\u304c\u3089\u52c9\u5f37\u3057\u3066\u3044\u304f\u8a18\u4e8b\u3067\u3059\u3002\n\n\u203b\u8457\u8005\u306e @hyuki \u5148\u751f\u306b\u306f\u9069\u5207\u306b\u66f8\u7c4d\u3078\u306e\u53c2\u7167\u3092\u5165\u308c\u308c\u3070\u554f\u984c\u306a\u3044\u65e8\u3054\u78ba\u8a8d\u3044\u305f\u3060\u3044\u3066\u3044\u307e\u3059\u3002\n\n\n## \u672c\u984c\n<b>Strategy\u30d1\u30bf\u30fc\u30f3</b>\n\u7b2c9\u56de\u306fStrategy Pattern\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002Strategy Pattern\u30d1\u30bf\u30fc\u30f3\u306f\u300c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3054\u3063\u305d\u308a\u5207\u308a\u66ff\u3048\u3001\u540c\u3058\u554f\u984c\u3092\u5225\u306e\u65b9\u6cd5\u3067\u89e3\u304f\u306e\u3092\u5bb9\u6613\u306b\u3059\u308b\u300d\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n### \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u65e9\u901f\u5177\u4f53\u7684\u306a\u4e8b\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002[\u300eJava\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u300f\uff082004\u5e74\u3001SB Creative\uff09](http://www.hyuki.com/dp/)\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092C#\u3067\uff08\u5927\u4f53\uff09\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```C#\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace StrategyPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length != 2)\n            {\n                Console.WriteLine(\"Usage: Input  two args as radomeseed1 ane randomeseed2\");\n                Console.WriteLine(\"Example: 314 15\");\n                Environment.Exit(0);\n            }\n            int seed1 = int.Parse(args[0]);\n            int seed2 = int.Parse(args[1]);\n            Player player1 = new Player(\"Taro\", new WinningStrategy(seed1));\n            Player player2 = new Player(\"Hanako\", new ProbStrategy(seed2));\n            for (int i = 0; i < 10000; i++)\n            {\n                Hand nextHand1 = player1.NextHand();\n                Hand nextHand2 = player2.NextHand();\n                if (nextHand1.IsStrongerThan(nextHand2))\n                {\n                    Console.WriteLine($\"Winner: {player1}\");\n                    player1.Win();\n                    player2.Lose();\n                }\n                else if (nextHand2.IsStrongerThan(nextHand1))\n                {\n                    Console.WriteLine($\"Winner: {player2}\");\n                    player1.Lose();\n                    player2.Win();\n                }\n                else\n                {\n                    Console.WriteLine(\"Even...\");\n                    player1.Even();\n                    player2.Even();\n                }\n\n                Console.WriteLine(\"Total result:\");\n                Console.WriteLine(player1.ToString());\n                Console.WriteLine(player2.ToString());\n            }\n            // \u5b9f\u884c\u304c\u4e00\u77ac\u3067\u7d42\u308f\u3063\u3066\u78ba\u8a8d\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u30ad\u30fc\u306e\u5165\u529b\u3092\u5f85\u3061\u307e\u3059\n            Console.ReadLine();\n        }\n    }\n\n    public class Hand\n    {\n        public static readonly int HANDVALUE_GUU = 0; // \u30b0 \u30fc\u3092\u8868\u3059\u5024\n        public static readonly int HANDVALUE_CHO = 1; // \u30c1\u30e7\u30ad\u3092\u8868\u3059\u5024\n        public static readonly int HANDVALUE_PAA = 2; // \u30d1\u30fc\u3092\u8868\u3059\u5024\n        public static Hand[] hand = {\n            new Hand(HANDVALUE_GUU),\n            new Hand(HANDVALUE_CHO),\n            new Hand(HANDVALUE_PAA),\n        };\n        private static readonly string[] name = {\n            \"\u30b0\u30fc\", \"\u30c1\u30e7\u30ad\", \"\u30d1\u30fc\"\n        };\n        private int handvalue;\n        public static Hand GetHand(int handvalue)\n        {\n            return hand[handvalue];\n        }\n        private Hand(int handvalue)\n        {\n            this.handvalue = handvalue;\n        }\n\n        public bool IsStrongerThan(Hand h)\n        {\n            return Fight(h) == 1;\n        }\n\n        public bool IsWeakerThan(Hand h)\n        {\n            return Fight(h) == -1;\n        }\n\n        private int Fight(Hand h)\n        {\n            if (this == h)\n            {\n                return 0;\n            }\n            else if ((this.handvalue + 1) % 3 == h.handvalue)\n            {\n                return 1;\n            }\n            else\n            {\n                return -1;\n            }\n        }\n\n        public override string ToString()\n        {\n            return name[handvalue];\n        }\n    }\n\n    // Strategy\n    // \u30fb\u6226\u7565\u3092\u5b9a\u3081\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08API\uff09\u3092\u5b9a\u3081\u308b\n    public interface Strategy\n    {\n        Hand NextHand();\n        void Study(bool win); \n    }\n\n    // ConcreteStrategy\n    // \u30fbStrategy\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08API\uff09\u3092\u5b9f\u88c5\u3059\u308b\n    public class WinningStrategy : Strategy\n    {\n        private Random random;\n        private bool won = false;\n        private Hand prevHand;\n        public WinningStrategy(int seed)\n        {\n            random = new Random(seed);\n        }\n\n        public Hand NextHand()\n        {\n            if (!won)\n            {\n                prevHand = Hand.GetHand(random.Next(3));\n            }\n            return prevHand;\n        }\n\n        public void Study(bool win)\n        {\n            won = win;\n        }\n    }\n\n    // ConcreteStrategy\n    public class ProbStrategy : Strategy\n    {\n        private Random random;\n        private int prevHandValue = 0;\n        private int currentHandValue = 0;\n        private int[][] history =\n        {\n            new int[] { 1, 1, 1, },\n            new int[] { 1, 1, 1, },\n            new int[] { 1, 1, 1, },\n        };\n        public ProbStrategy(int seed)\n        {\n            random = new Random(seed);\n        }\n\n\n        public Hand NextHand()\n        {\n            int bet = random.Next(GetSum(currentHandValue));\n            int handvalue = 0;\n            if (bet < history[currentHandValue][0])\n            {\n                handvalue = 0;\n            }\n            else if (bet < history[currentHandValue][0] + history[currentHandValue][1])\n            {\n                handvalue = 1;\n            }\n            else\n            {\n                handvalue = 2;\n            }\n            prevHandValue = currentHandValue;\n            currentHandValue = handvalue;\n            return Hand.GetHand(handvalue);\n        }\n\n        private int GetSum(int hv)\n        {\n            int sum = 0;\n            for (int i = 0; i < 3; i++)\n            {\n                sum += history[hv][i];\n            }\n            return sum;\n        }\n\n        public void Study(bool win)\n        {\n            if (win)\n            {\n                history[prevHandValue][currentHandValue]++;\n            }\n            else\n            {\n                history[prevHandValue][(currentHandValue + 1) % 3]++;\n                history[prevHandValue][(currentHandValue + 2) % 3]++;\n            }\n        }\n    }\n\n    // Context\n    // \u30fbStrategy\u3092\u5229\u7528\u3059\u308b\n    // \u30fbConcreteStrategy\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6301\u3063\u3066\u3044\u3066\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5229\u7528\u3059\u308b\n    // \u30fb\u547c\u3073\u51fa\u3059\u306e\u306fStrategy\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n    public class Player\n    {\n        private string name;\n        private Strategy strategy;\n        private int wincount;\n        private int losecount;\n        private int gamecount;\n        public Player(string name, Strategy strategy)\n        {\n            this.name = name;\n            this.strategy = strategy;\n        }\n\n        public Hand NextHand()\n        {\n            return strategy.NextHand();\n        }\n\n        public void Win()\n        {\n            strategy.Study(true);\n            wincount++;\n            gamecount++;\n        }\n\n        public void Lose()\n        {\n            strategy.Study(false);\n            losecount++;\n            gamecount++;\n        }\n\n        public void Even()\n        {\n            gamecount++;\n        }\n\n        public override string ToString()\n        {\n            return $\"[{name}:{gamecount} games, {wincount} win, {losecount} lose]\";\n        }\n    }\n}\n```\n\n### \u52b9\u80fd\n* Strategy\uff08\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff09\u306e\u5207\u308a\u66ff\u3048\u304c\u5bb9\u6613\u306a\u305f\u3081\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6027\u80fd\u6bd4\u8f03\u304c\u3057\u3084\u3059\u3044\n* \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u304b\u3089\u5206\u96e2\u3057\u3001\u59d4\u8b72\u306b\u3088\u308a\u3086\u308b\u3084\u304b\u306b\u7d50\u3073\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n* \u540c\u4e00\u306e\u7d50\u679c\u3092\u5f97\u308b\u305f\u3081\u306b\u5225\u3005\u306e\u65b9\u6cd5\u3092\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u308b\uff08\u8a08\u7b97\u306e\u691c\u7b97\u3092\u3057\u3084\u3059\u3044\uff09\n* \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u74b0\u5883\u306e\u72b6\u6cc1\u306b\u4f9d\u3063\u3066\u3082Strategy\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n * \u30e1\u30e2\u30ea\u304c\u5c11\u306a\u3044\u74b0\u5883\u3067\u7701\u30e1\u30e2\u30ea\uff08\u3060\u304c\u6642\u9593\u306f\u304b\u304b\u308b\uff09\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\n \n\n### \u95a2\u9023\u3057\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\n\n* Flyweight\u30d1\u30bf\u30fc\u30f3\n* [Abstract Factory\u30d1\u30bf\u30fc\u30f3](http://qiita.com/toshi0607/items/b8a19a4328849cdf1d99)\n* State\u30d1\u30bf\u30fc\u30f3\n\n### \u611f\u60f3\u3001\u7591\u554f\u3001\u30e1\u30e2\n* Strategy\u306e\u6e21\u3057\u65b9\u306f\u5e7e\u3064\u304b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u305d\u3046\n * [Strategy\u3092Enum\u306b\u6301\u305f\u305b\u3066\u306f\u3044\u3051\u306a\u3044\u7406\u7531](http://aoking.hatenablog.jp/entry/20100118/1263814842)\n* \u958b\u653e/\u9589\u9396\u539f\u5247\u304c\u9069\u7528\u3055\u308c\u305f\u72b6\u614b\u306b\u306a\u308b\u3088\u3046\u306b\u2026\u3067\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u304c\u6d3b\u304d\u305f\u8a3c\u3068\u8003\u3048\u3089\u308c\u305d\u3046\n * [Strategy\u30d1\u30bf\u30fc\u30f3\u3068\u958b\u653e/\u9589\u9396\u539f\u5247\u306b\u898b\u308b\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u306e\u6709\u7528\u6027](http://www.slideshare.net/tomo_masakura/strategy-53281454)\n\n### C#\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\n[\u2460Iterator](http://qiita.com/toshi0607/items/cdc589c58f21c0fc513d)\n[\u2461Adapter](http://qiita.com/toshi0607/items/374373a8bd656f7188d4)\n[\u2462Template Method](http://qiita.com/toshi0607/items/cc8a87a3049bd7af52df)\n[\u2463Factory Method](http://qiita.com/toshi0607/items/d95bdd31da363e0f04a9)\n[\u2464Singleton](http://qiita.com/toshi0607/items/c172bb4478e72ae6ced7)\n[\u2465Prototype](http://qiita.com/toshi0607/items/f4358020befca048d2e0)\n[\u2466Builder](http://qiita.com/toshi0607/items/13e37d54e04b61bc69b5)\n[\u2467AbstractFactory](http://qiita.com/toshi0607/items/b8a19a4328849cdf1d99)\n[\u2468Bridge](http://qiita.com/toshi0607/items/580988e25f25fea9216e)\n[\u2469Strategy Pattern](http://qiita.com/toshi0607/items/72829d34ef9595f5b3b0)\n\u246aComposite Pattern\n[\u246bDecorator Pattern](http://qiita.com/toshi0607/items/a65d1abb95a97970ab8c)\n", "tags": ["C#", "\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3"]}