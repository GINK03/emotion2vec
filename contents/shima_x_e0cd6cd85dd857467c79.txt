{"context": " More than 1 year has passed since last update.Nekopuni\u3055\u3093\u306e\u30d6\u30ed\u30b0\u306b\u89e6\u767a\u3055\u308c\u3066\u8da3\u5473\u3068\u5b9f\u76ca\u3092\u517c\u306d\u3066\u5f37\u5316\u5b66\u7fd2\u3092\u7528\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u66f8\u3044\u3066\u3044\u308b\u5185\u5bb9\u306b\u306f\u5168\u304f\u81ea\u4fe1\u304c\u3042\u308a\u307e\u305b\u3093\uff08\u7279\u306b\u30b3\u30fc\u30c9\uff09\u3002\u81ea\u5206\u7528\u306e\u30e1\u30e2\u304c\u4e3b\u306a\u7528\u9014\u3067\u3059\u304c\u3001\u3057\u3087\u307c\u3044\u30b5\u30fc\u30d9\u30a4\u8cc7\u6599\u3068\u3057\u3066\u53c2\u8003\u306b\u306a\u308c\u3070\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n\u53c2\u8003\u8cc7\u6599\n\n\nAn Automated FX Trading System Using Adaptive Reinforcement Learning[\u53c2\u8003\u6587\u732e1]\u3000\u2190 RRL\u306b\u3088\u308b\u6700\u9069\u5316\n\nDesign of an FX trading system using Adaptive Reinforcement Learning[\u53c2\u8003\u6587\u732e2]\n\u3000\u2190 \u4e0a\u306e\u8ad6\u6587\u306e\u8981\u7d04\u30d1\u30ef\u30dd\n\nAlgorithm Trading using Q-Learning and Recurrent Reinforcement Learning[\u53c2\u8003\u6587\u732e3]\u3000\u2190 Q-learning\u3092\u4f7f\u7528\u3057\u305f\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa\u306b\u3088\u308b\u30ea\u30b9\u30af\u7ba1\u7406\u3092\u542b\u3081\u305f\u6700\u9069\u5316\u306e\u81ea\u52d5\u5316\n\nA Multi-agent Q-learning Framework for Optimizing Stock Trading Systems[\u53c2\u8003\u6587\u732e4]\u3000\u2190 NN\u306b\u3088\u308b\u682a\u4fa1\u306e\u4e88\u6e2c\u3082\u542b\u3093\u3067\u3044\u308b\uff08Q-learning\u4f7f\u7528\uff09\n\n\u5f37\u5316\u5b66\u7fd2[\u53c2\u8003\u6587\u732e5]\n\nPERFORMANCE FUNCTIONS AND REINFORCEMENT LEARNING FOR TRADING SYSTEMS AND PORTFOLIOS[\u53c2\u8003\u6587\u732e6]\n\n\u5b66\u7fd2\u3068\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af (\u96fb\u5b50\u60c5\u5831\u901a\u4fe1\u5de5\u5b66\u30b7\u30ea\u30fc\u30ba)[\u53c2\u8003\u6587\u732e7]\n\n\n\u8abf\u67fb\u6982\u8981\n\n\u5f37\u5316\u5b66\u7fd2\u3092\u4f7f\u7528\u3059\u308b\u610f\u5473\uff08\u53c2\u8003\u6587\u732e4\u53c2\u7167\uff09\n\u5f37\u5316\u5b66\u7fd2\u3068\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306e\u9055\u3044\u306f\u30b6\u30c3\u30af\u30ea\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n\u5f37\u5316\u5b66\u7fd2\u306f\u653f\u7b56\u306e\u6700\u9069\u5316\u306b\u3088\u308a\u74b0\u5883\u304b\u3089\u7372\u5f97\u3059\u308b\u671f\u5f85\u5831\u916c\u306e\u6700\u5927\u5316\u304c\u76ee\u7684\n\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u8aa4\u5dee\u3092\u5c0f\u3055\u304f\u3059\u308b\u306e\u304c\u76ee\u7684\n\n\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3067\u306f\u7d71\u4e00\u7684\u306a\u30c8\u30ec\u30fc\u30c7\u30a3\u30f3\u30b0\u30dd\u30ea\u30b7\u30fc\u7121\u3057\u306b\u3001\u6761\u4ef6\u3092\u6700\u9069\u5316\u3057\u3066\u3057\u307e\u3046\u3002\n\u4e00\u65b9\u3001\u5f37\u5316\u5b66\u7fd2\u3067\u306f\u74b0\u5883\u3084\u653f\u7b56\u3068\u3044\u3063\u305f\u90e8\u5206\u3092\u542b\u3081\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u69cb\u7bc9\u304c\u53ef\u80fd\u3068\u306a\u308b\u305f\u3081\u5f37\u5316\u5b66\u7fd2\u3092\u4f7f\u7528\u3059\u308b\u4e8b\u306b\u3088\u308b\u6709\u52b9\u6027\u304c\u9ad8\u3044\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\nValue Function RL\u3068Direct RL\u306e\u9055\u3044\n\u25a0Value Function RL\n\u72b6\u614b\u307e\u305f\u306f\u72b6\u614b\u884c\u52d5\u5bfe\u306b\u3088\u308a\u884c\u52d5\u4fa1\u5024\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u3002\u3053\u306e\u4fa1\u5024\u3092\u3082\u3068\u306b\u653f\u7b56(\u3042\u308b\u72b6\u614b\u304c\u5f97\u3089\u308c\u305f\u6642\u306b\u3068\u308b\u884c\u52d5\u306e\u65b9\u91dd)\u306e\u6700\u9069\u5316\u3092\u884c\u3046\u3002\u3053\u308c\u306b\u3088\u308a\u9577\u671f\u7684\u306a\u671f\u5f85\u5831\u916c\u306e\u6700\u5927\u5316\u3092\u884c\u3046\u3002\nQ-learning\u306f\u3053\u3061\u3089\u306b\u5206\u985e\u3055\u308c\u308b\u3002Q-learning\u306e\u8a73\u7d30\u306f\u53c2\u8003\u6587\u732e5\u3092\u898b\u3066\u3044\u305f\u3060\u304d\u305f\u304f\u3002\n\u25a0Direct RL\n\u74b0\u5883\u304b\u3089\u5f97\u3089\u308c\u305f\u7d4c\u9a13\uff08\u89b3\u6e2c\u5024\uff09\u3092\u3082\u3068\u306b\u76f4\u63a5\u7684\u306b\u5831\u916c\u95a2\u6570\uff08\u4fa1\u5024\u89b3\u6570\uff09\u306e\u8abf\u6574\u3092\u884c\u3063\u3066\u3044\u304f\u3002Q-learning\u3068\u306f\u7570\u306a\u308aQ-table\u304c\u5fc5\u8981\u306a\u3044\u305f\u3081\u3001\u6642\u9593\u7684/\u7a7a\u9593\u7684\u8a08\u7b97\u91cf\u306f\u5c0f\u3055\u304f\u306a\u308b\u3002\u305f\u3060\u3057\u3001\u671f\u5f85\u5831\u916c\u306e\u6700\u5927\u5316\u306f\u77ed\u671f\u7684\u306a\u3082\u306e\u3068\u306a\u308b\u3002\nRecurrent Reinforcement Learning(RRL)\u306f\u3053\u3061\u3089\u306b\u5206\u985e\u3055\u308c\u308b\u3002RRL\u306e\u8a73\u7d30\u306b\u3064\u304d\u307e\u3057\u3066\u3082\u53c2\u8003\u6587\u732e5\u3092\u53c2\u7167\u3057\u3066\u305f\u3060\u304d\u305f\u304f\u3002\n(\u4eca\u56de\u306f\u3053\u3061\u3089\u306eRRL\u3092\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002)\n\nRRL Financial Trading Framework\n\nAgent: RRL-trader\nState: \u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u307e\u305f\u306f\u904e\u53bb\u306e\u30ea\u30bf\u30fc\u30f3\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u5e02\u5834\u306e\u72b6\u614b\nReward: t\u304b\u3089t+1\u306e\u9593\u306e\u30ea\u30b9\u30af\u3068\u624b\u6570\u6599\u3092\u52a0\u5473\u3057\u305f\u7372\u5f97\u5831\u916c\nAction: trading signal(buy/sell/short/long/neutral/hold)\n\n\n\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u8a55\u4fa1\u5024\nDifferential Sharpe Ratio(DSR)\u3092\u4f7f\u7528\u3002weight\u306e\u66f4\u65b0\u6642\u306b\u4f7f\u7528\u3002\n\n\u5b9f\u904b\u7528\u3059\u308b\u5834\u5408\u306e\u6ce8\u610f\u70b9\n\n\u640d\u5207\u308a\n\u30ea\u30b9\u30af\u306b\u5bfe\u3059\u308b\u55dc\u597d\u6027\n\u7570\u5e38\u306a\u6319\u52d5\u304c\u78ba\u8a8d\u3055\u308c\u305f\u6642\u306e\u30b7\u30b9\u30c6\u30e0\u30c0\u30a6\u30f3\u51e6\u7406\n\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(\u53c2\u8003\u6587\u732e1\u53c2\u7167)\n\n\u3010\u6642\u523bt\u6642\u70b9\u3067\u306e\u30dd\u30b8\u30b7\u30e7\u30f3\u6c7a\u5b9a(long or short)\u3011\nFt=sign(\u2211Mi=0wi,trt\u2212i+wM+1,tFt\u22121+vt)Ft=sign(\u2211Mi=0wi,trt\u2212i+wM+1,tFt\u22121+vt)F_t=sign(\\sum_{i=0}^{M}w_{i,t}r_{t-i}+w_{M+1,t}F_{t-1}+v_t)\nFt\u2208[\u22121,1];(short=\u22121,long=1)Ft\u2208[\u22121,1];(short=\u22121,long=1)F_t \u2208 [-1,1]; (short=-1, long=1)\nwtw_t: weight vector\nvtv_t: threshold of the neural network\nrtr_t: pt\u2212pt\u22121p_t - p_{t-1}(\u6642\u7cfb\u5217\u306b\u304a\u3051\u308b\u30ea\u30bf\u30fc\u30f3)\n\u6570\u5f0f\u306e\u5f62\u306f\u5358\u7d14\u306a1\u5c64\u3060\u3051\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u540c\u3058\u3002\n\u5b9f\u969b\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u624b\u6cd5\u3092\u9069\u7528\u3057\u3001\u95be\u5024vtv_t\u3082weight vector\u306b\u542b\u307e\u305b\u3066\u6700\u9069\u5316\u3059\u308b\u3002\n\n\u3010\u6642\u70b9T\u3067\u306e\u5229\u76ca(profit)\u3011\nPt=\u2211Tt=0RtP_t=\\sum_{t=0}^{T}R_t\nRt:=Ft\u22121rt\u2212\u03b4|Ft\u2212Ft\u22121|R_t:=F_{t-1}r_t-\u03b4|F_t-F_{t-1}|\n\u03b4: transaction cost(\u624b\u6570\u6599)\n\u203b\u5404\u53d6\u5f15\u306b\u304a\u3044\u30661\u5358\u4f4d\u306e\u307f\u306e\u53d6\u5f15\u304c\u3055\u308c\u308b\u4e8b\u304c\u524d\u63d0\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3010\u6700\u9069\u5316\u8a55\u4fa1\u5024\u3011\n\u25a0sharpe ratio\n\u02c6S(t):=AtBt\\hat{S}(t):=\\frac{A_t}{B_t}\nAt=At\u22121+\u03b7(Rt\u2212At\u22121),A0=0A_t=A_{t-1}+\u03b7(R_t-A_{t-1}), A_0=0\nBt=Bt\u22121+\u03b7(R2t\u2212Bt\u22121),B0=0B_t=B_{t-1}+\u03b7(R_t^2-B_{t-1}), B_0=0\n\u03b7: adaptation parameter\n\u25a0Differential Sharpe Ratio(DSR)\nsharpe ratio\u306e\u79fb\u52d5\u5e73\u5747\u7248\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u5b66\u7fd2\u7528\u306b\u6539\u5584\u3057\u305f\u3082\u306e\u3002\nDSR\u306e\u65b9\u304c\u8a08\u7b97\u304c\u8efd\u304f\u3001\u53ce\u675f\u3082\u65e9\u3044\uff08\u3089\u3057\u3044\uff09\u3002\n\u4e0a\u306e\u02c6S\\hat{S}\u3092\u03b7=0\u5468\u308a\u3067\u30c6\u30a4\u30e9\u30fc\u5c55\u958b\u3057\u7b2c\u4e00\u9805\u307e\u3067\u3092\u53d6\u5f97\u3002\nDt:=d\u02c6Sd\u03b7|\u03b7=0D_t:=\\frac{d\\hat{S}}{d\u03b7}|_{\u03b7=0}\n\u3000\u3000=Bt\u22121\u0394At\u221212At\u22121\u0394Bt(Bt\u22121\u2212A2t\u22121)32=\\frac{B_{t-1}\\Delta A_t-\\frac{1}{2}A_{t-1}\\Delta B_t}{(B_{t-1}-A_{t-1}^2)^\\frac{3}{2}}\n\u0394At=Rt\u2212At\u22121\\Delta A_t=R_t-A_{t-1}\n\u0394Bt=R2t\u2212Bt\u22121\\Delta B_t=R_t^2-B_{t-1}\nDtD_t\u3092\u5373\u6642\u7684\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5c3a\u5ea6\u3068\u307f\u306a\u3057\u3001\u3053\u308c\u3092\u6700\u5927\u5316\u3059\u308b\u3088\u3046\u306bweight\u306e\u66f4\u65b0\u3092\u884c\u3046\u3002\n\n\u3010weight\u306e\u66f4\u65b0\u3011\nwi,t=wi,t\u22121+\u03c1\u0394wi,tw_{i,t}=w_{i,t-1}+\\rho \\Delta w_{i,t}\n\u0394wi,t=dDtdwi\\Delta w_{i,t}=\\frac{dD_t}{dw_i}\n\u3000 \u3000\u3000\u2248dDtdRt\\approx \\frac{dD_t}{dR_t}{ dRtdFtdFtdwi,t+dRtdFt\u22121dFt\u22121dwi,t\u22121\\frac{dR_t}{dF_t}\\frac{dF_t}{dw_{i,t}} + \\frac{dR_t}{dF_{t-1}}\\frac{dF_{t-1}}{dw_{i,t-1}}}\ndFtdwi,t\u2248\u2202Ft\u2202wi,t+\u2202Ft\u2202Ft\u22121dFt\u22121dwi,t\u22121\\frac{dF_t}{dw_{i,t}}\\approx\\frac{\\partial F_t}{\\partial w_{i,t}}+\\frac{\\partial F_t}{\\partial F_{t-1}}\\frac{dF_{t-1}}{dw_{i,t-1}}\ndDtdRt=Bt\u22121\u2212At\u22121Rt(Bt\u22121\u2212A2t\u22121)3/2\\frac{dD_t}{dR_t}=\\frac{B_{t-1}-A_{t-1}R_t}{(B_{t-1}-A_{t-1}^2)^{3/2}}\ndRtdFt=\u2212\u03b4\\frac{dR_t}{dF_t}=-\\delta\ndRtdFt\u22121=rt\u2212\u03b4\\frac{dR_t}{dF_{t-1}}=r_t-\\delta\n\n\u3010\u640d\u5207\u308a\u3001signal\u8a2d\u5b9a\u306e\u95be\u5024\u3001\u30b7\u30b9\u30c6\u30e0\u7570\u5e38\u306e\u5224\u5b9a\u3011\n\u30d1\u30e9\u30e1\u30bf\u3068\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3001\u3068\u3042\u308b\u304c\u5177\u4f53\u7684\u306a\u8a18\u8f09\u306f\u306a\u3044\u3002\u7d4c\u9a13\u7684\u306a\u5024\u3067\u8a2d\u5b9a\u3059\u308b\u3057\u304b\u306a\u3055\u305d\u3046\u3002\u3002\n\n\u53c2\u8003\u30b3\u30fc\u30c9\nsign\u95a2\u6570\u306f\u4e00\u65e6tanh\u3068\u3057\u3066\u8a08\u7b97\u3057\u3001FtF_t\u304c0\u3088\u308a\u5927\u304d\u3044\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u3067signal\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\u640d\u5207\u308a\u306a\u3069\u306e\u6a5f\u80fd\u306f\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\u3002\n\u81ea\u5206\u3067\u3044\u3046\u306e\u3082\u306a\u3093\u3067\u3059\u304c\u76f8\u5f53\u602a\u3057\u3044\u30b3\u30fc\u30c9\u3067\u3059\u3002\u53c2\u8003\u3068\u3057\u3066\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n# coding: utf-8\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom math import tanh, copysign\n\nclass RRLAgentForFX:\n    TRADING_COST = 0.003\n    EPS = 1e-6\n\n    def __init__(self,M,rho=0.01,eta=0.1,bias=1.0):\n        np.random.seed(555)\n        self.M = M # number of lags\n        self.weights = np.zeros(self.M+3,dtype=np.float64)\n        self.bias = bias # bias term\n        self.rho = rho\n        self.eta = eta\n        self.price_diff = np.zeros(self.M+1) # r_t\n\n        self.pre_price = None\n        self.pre_signal = 0\n\n        self.pre_A = 0.0\n        self.pre_B = 0.0\n        self.pre_gradient_F = 0.0\n\n        # result store\n        self.signal_store = []\n        self.profit_store = []\n        self.dsr_store = []\n        self.sr_store = []\n        self.cumulative_profit = 0.0\n\n    def train_online(self, price):\n        self.calculate_price_diff(price)\n        signal, self.F_t_value = self.select_signal()\n        print \"signal\",signal\n        self.calculate_return(signal)\n        self.update_parameters()\n        self.pre_price = price\n        self.pre_signal = signal\n\n        # store result\n        self.signal_store.append(signal)\n\n    def calculate_price_diff(self,price):\n        r = price - self.pre_price if self.pre_price is not None else 0\n        self.price_diff[:self.M] = self.price_diff[1:]\n        self.price_diff[self.M] = r\n\n    def calculate_return(self,signal):\n        R_t = self.pre_signal*self.price_diff[-1]\n        R_t -= self.TRADING_COST*abs(signal - self.pre_signal)\n        self.return_t = R_t\n\n        self.cumulative_profit += R_t\n        self.profit_store.append(self.cumulative_profit)\n\n    def select_signal(self):\n        values_sum = (self.weights[:self.M+1]*self.price_diff).sum()\n        values_sum += self.weights[-2]*self.pre_signal\n        values_sum += self.bias*self.weights[-1]\n\n        F_t_value = tanh(values_sum)\n        return copysign(1, F_t_value ), F_t_value\n\n    def update_parameters(self):\n        # update weight\n        self.weights += self.rho*self.calculate_gradient_weights()\n        print \"weight\",self.weights\n\n        # update moment R_t\n        self.update_R_moment()\n\n    def calculate_gradient_weights(self):\n        \"\"\" differentiate between D_t and w_t \"\"\"\n        denominator = self.pre_B-self.pre_A**2\n        if denominator!=0:\n            diff_D_R = self.pre_B-self.pre_A*self.return_t\n            diff_D_R /= (denominator)**1.5\n        else:\n            diff_D_R = 0\n\n        gradient_F = self.calculate_gradient_F()\n        print \"gradient_F\",gradient_F\n\n        #diff_R_F = -self.TRADING_COST\n        #diff_R_F_{t-1} = self.price_diff[-1] - self.TRADING_COST\n        delta_weights = -self.TRADING_COST*gradient_F\n        delta_weights += ( self.price_diff[-1] - self.TRADING_COST) \\\n                                                    *self.pre_gradient_F\n        delta_weights *= diff_D_R\n        self.pre_gradient_F = gradient_F\n        return delta_weights\n\n    def calculate_gradient_F(self):\n        \"\"\" differentiate between F_t and w_t \"\"\"\n        diff_tnah = 1-self.F_t_value**2\n\n        diff_F_w = diff_tnah*( np.r_[ self.price_diff, self.pre_signal, self.bias ] )\n        diff_F_F = diff_tnah*self.weights[-2]\n\n        return diff_F_w + diff_F_F*self.pre_gradient_F\n\n    def update_R_moment(self):\n        delta_A = self.return_t - self.pre_A\n        delta_B = self.return_t**2 - self.pre_B\n        A_t = self.pre_A + self.eta*delta_A # A_t. first moment of R_t.\n        B_t = self.pre_B + self.eta*delta_B # B_t. second moment of R_t.\n        self.sr_store.append(A_t/B_t)\n        self.calculate_dsr(delta_A, delta_B)\n\n        self.pre_A = A_t\n        self.pre_B = B_t\n\n    def calculate_dsr(self,delta_A,delta_B):\n        dsr = self.pre_B*delta_A - 0.5*self.pre_A*delta_B\n        dsr /= (self.pre_B-self.pre_A**2)**1.5\n        self.dsr_store.append(dsr)\n\nif __name__=='__main__':\n    M = 8\n    fx_agent = RRLAgentForFX(M,rho=0.01,eta=0.01,bias=0.25)\n\n    ifname = os.getcwd()+'/input/quote.csv'\n    data = pd.read_csv(ifname)\n    train_data = data.ix[:3000,'USD']\n\n    for price in train_data.values:\n        fx_agent.train_online(price)\n\n\n\n\u5b9f\u9a13\n\u307f\u305a\u307b\u9280\u884c\u30d2\u30b9\u30c8\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u306e\u30da\u30fc\u30b8\u304b\u3089\u5916\u56fd\u70ba\u66ff\u76f8\u5834(/\u5186)\u306e\u65e5\u6642\u30c7\u30fc\u30bf\u306ecsv\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u4f7f\u7528\u3057\u305f\u306e\u306fUSD/\u5186\u306e2002\u5e744\u67081\u65e5\u304b\u30893,000\u500b\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002\n\n\u5b9f\u9a13\u7d50\u679c\n\nUSD/\u5186\u30ec\u30fc\u30c8\n\n\n\u7d2f\u7a4d\u5229\u76ca(1\u65e51\u5358\u4f4d\u306e\u307f\u8cfc\u5165\u6642)\n\n\nDSR\n\n\nSR\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u03c1\u3068\u03b7\u306e\u5024\u306b\u3088\u3063\u3066\u5168\u7136\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\u4e0d\u5b89\u5b9a\u904e\u304e\u307e\u3059\u3002\u3002\u9593\u9055\u3044\u306b\u6c17\u4ed8\u304d\u6b21\u7b2c\u30b3\u30fc\u30c9\u306e\u66f4\u65b0\u3092\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u304a\u304b\u3057\u306a\u70b9\u306b\u304a\u6c17\u3065\u304d\u306e\u65b9\u304c\u304a\u3089\u308c\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u9802\u3051\u307e\u3059\u3068\u5927\u5909\u52a9\u304b\u308a\u307e\u3059\u3002\n[Nekopuni\u3055\u3093\u306e\u30d6\u30ed\u30b0](http://nekopuni.holy.jp/2014/09/python%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92%EF%BC%8B%E7%82%BA%E6%9B%BF%E3%83%88%E3%83%AC%E3%83%BC%E3%83%89%E6%88%A6%E7%95%A5%E3%81%9D%E3%81%AE2/)\u306b\u89e6\u767a\u3055\u308c\u3066\u8da3\u5473\u3068\u5b9f\u76ca\u3092\u517c\u306d\u3066\u5f37\u5316\u5b66\u7fd2\u3092\u7528\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30c8\u30ec\u30fc\u30c9\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u66f8\u3044\u3066\u3044\u308b\u5185\u5bb9\u306b\u306f\u5168\u304f\u81ea\u4fe1\u304c\u3042\u308a\u307e\u305b\u3093\uff08\u7279\u306b\u30b3\u30fc\u30c9\uff09\u3002\u81ea\u5206\u7528\u306e\u30e1\u30e2\u304c\u4e3b\u306a\u7528\u9014\u3067\u3059\u304c\u3001\u3057\u3087\u307c\u3044\u30b5\u30fc\u30d9\u30a4\u8cc7\u6599\u3068\u3057\u3066\u53c2\u8003\u306b\u306a\u308c\u3070\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n# \u53c2\u8003\u8cc7\u6599\n* [\u001eAn Automated FX Trading System Using Adaptive Reinforcement Learning](http://www.jbs.cam.ac.uk/fileadmin/user_upload/research/workingpapers/wp0418.pdf)[\u53c2\u8003\u6587\u732e1]\u3000\u2190 RRL\u306b\u3088\u308b\u6700\u9069\u5316\n* [Design of an FX trading system using Adaptive Reinforcement Learning](http://www.optirisk-systems.com/events/carisma2007_files/dayone3.pdf)[\u53c2\u8003\u6587\u732e2]\n\u3000\u2190 \u4e0a\u306e\u8ad6\u6587\u306e\u8981\u7d04\u30d1\u30ef\u30dd\n* [Algorithm Trading using Q-Learning and Recurrent Reinforcement Learning](http://cs229.stanford.edu/proj2009/LvDuZhai.pdf)[\u53c2\u8003\u6587\u732e3]\u3000\u2190 Q-learning\u3092\u4f7f\u7528\u3057\u305f\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa\u306b\u3088\u308b\u30ea\u30b9\u30af\u7ba1\u7406\u3092\u542b\u3081\u305f\u6700\u9069\u5316\u306e\u81ea\u52d5\u5316\n* [A Multi-agent Q-learning Framework for Optimizing Stock Trading Systems](http://dl.acm.org/citation.cfm?id=756168)[\u53c2\u8003\u6587\u732e4]\u3000\u2190 NN\u306b\u3088\u308b\u682a\u4fa1\u306e\u4e88\u6e2c\u3082\u542b\u3093\u3067\u3044\u308b\uff08Q-learning\u4f7f\u7528\uff09\n* [\u5f37\u5316\u5b66\u7fd2](http://www.amazon.co.jp/gp/product/4627826613/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4627826613&linkCode=as2&tag=shimashimao06-22)<img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=shimashimao06-22&l=as2&o=9&a=4627826613\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />[\u53c2\u8003\u6587\u732e5]\n* [PERFORMANCE FUNCTIONS AND REINFORCEMENT LEARNING FOR TRADING SYSTEMS AND PORTFOLIOS](http://www1.icsi.berkeley.edu/~moody/JForecastMoodyWu.pdf)[\u53c2\u8003\u6587\u732e6]\n* [\u5b66\u7fd2\u3068\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af (\u96fb\u5b50\u60c5\u5831\u901a\u4fe1\u5de5\u5b66\u30b7\u30ea\u30fc\u30ba)](http://www.amazon.co.jp/gp/product/4627702914/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4627702914&linkCode=as2&tag=shimashimao06-22)<img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=shimashimao06-22&l=as2&o=9&a=4627702914\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />[\u53c2\u8003\u6587\u732e7]\n\n# \u8abf\u67fb\u6982\u8981\n#### \u5f37\u5316\u5b66\u7fd2\u3092\u4f7f\u7528\u3059\u308b\u610f\u5473\uff08\u53c2\u8003\u6587\u732e4\u53c2\u7167\uff09\n\u5f37\u5316\u5b66\u7fd2\u3068\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306e\u9055\u3044\u306f\u30b6\u30c3\u30af\u30ea\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n* \u5f37\u5316\u5b66\u7fd2\u306f\u653f\u7b56\u306e\u6700\u9069\u5316\u306b\u3088\u308a\u74b0\u5883\u304b\u3089\u7372\u5f97\u3059\u308b\u671f\u5f85\u5831\u916c\u306e\u6700\u5927\u5316\u304c\u76ee\u7684\n* \u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u8aa4\u5dee\u3092\u5c0f\u3055\u304f\u3059\u308b\u306e\u304c\u76ee\u7684\n\n\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3067\u306f\u7d71\u4e00\u7684\u306a\u30c8\u30ec\u30fc\u30c7\u30a3\u30f3\u30b0\u30dd\u30ea\u30b7\u30fc\u7121\u3057\u306b\u3001\u6761\u4ef6\u3092\u6700\u9069\u5316\u3057\u3066\u3057\u307e\u3046\u3002\n\u4e00\u65b9\u3001\u5f37\u5316\u5b66\u7fd2\u3067\u306f\u74b0\u5883\u3084\u653f\u7b56\u3068\u3044\u3063\u305f\u90e8\u5206\u3092\u542b\u3081\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u69cb\u7bc9\u304c\u53ef\u80fd\u3068\u306a\u308b\u305f\u3081\u5f37\u5316\u5b66\u7fd2\u3092\u4f7f\u7528\u3059\u308b\u4e8b\u306b\u3088\u308b\u6709\u52b9\u6027\u304c\u9ad8\u3044\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n#### Value Function RL\u3068Direct RL\u306e\u9055\u3044\n\u25a0Value Function RL\n\u72b6\u614b\u307e\u305f\u306f\u72b6\u614b\u884c\u52d5\u5bfe\u306b\u3088\u308a\u884c\u52d5\u4fa1\u5024\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u3002\u3053\u306e\u4fa1\u5024\u3092\u3082\u3068\u306b\u653f\u7b56(\u3042\u308b\u72b6\u614b\u304c\u5f97\u3089\u308c\u305f\u6642\u306b\u3068\u308b\u884c\u52d5\u306e\u65b9\u91dd)\u306e\u6700\u9069\u5316\u3092\u884c\u3046\u3002\u3053\u308c\u306b\u3088\u308a\u9577\u671f\u7684\u306a\u671f\u5f85\u5831\u916c\u306e\u6700\u5927\u5316\u3092\u884c\u3046\u3002\nQ-learning\u306f\u3053\u3061\u3089\u306b\u5206\u985e\u3055\u308c\u308b\u3002Q-learning\u306e\u8a73\u7d30\u306f[\u53c2\u8003\u6587\u732e5](http://www.amazon.co.jp/gp/product/4627826613/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4627826613&linkCode=as2&tag=shimashimao06-22)<img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=shimashimao06-22&l=as2&o=9&a=4627826613\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\u3092\u898b\u3066\u3044\u305f\u3060\u304d\u305f\u304f\u3002\n\n\u25a0Direct RL\n\u74b0\u5883\u304b\u3089\u5f97\u3089\u308c\u305f\u7d4c\u9a13\uff08\u89b3\u6e2c\u5024\uff09\u3092\u3082\u3068\u306b\u76f4\u63a5\u7684\u306b\u5831\u916c\u95a2\u6570\uff08\u4fa1\u5024\u89b3\u6570\uff09\u306e\u8abf\u6574\u3092\u884c\u3063\u3066\u3044\u304f\u3002Q-learning\u3068\u306f\u7570\u306a\u308aQ-table\u304c\u5fc5\u8981\u306a\u3044\u305f\u3081\u3001\u6642\u9593\u7684/\u7a7a\u9593\u7684\u8a08\u7b97\u91cf\u306f\u5c0f\u3055\u304f\u306a\u308b\u3002\u305f\u3060\u3057\u3001\u671f\u5f85\u5831\u916c\u306e\u6700\u5927\u5316\u306f\u77ed\u671f\u7684\u306a\u3082\u306e\u3068\u306a\u308b\u3002\nRecurrent Reinforcement Learning(RRL)\u306f\u3053\u3061\u3089\u306b\u5206\u985e\u3055\u308c\u308b\u3002RRL\u306e\u8a73\u7d30\u306b\u3064\u304d\u307e\u3057\u3066\u3082[\u53c2\u8003\u6587\u732e5](http://www.amazon.co.jp/gp/product/4627826613/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4627826613&linkCode=as2&tag=shimashimao06-22)<img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=shimashimao06-22&l=as2&o=9&a=4627826613\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\u3092\u53c2\u7167\u3057\u3066\u305f\u3060\u304d\u305f\u304f\u3002\n(\u4eca\u56de\u306f\u3053\u3061\u3089\u306eRRL\u3092\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002)\n\n#### RRL Financial Trading Framework\n* Agent: RRL-trader\n* State: \u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u307e\u305f\u306f\u904e\u53bb\u306e\u30ea\u30bf\u30fc\u30f3\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u5e02\u5834\u306e\u72b6\u614b\n* Reward: t\u304b\u3089t+1\u306e\u9593\u306e\u30ea\u30b9\u30af\u3068\u624b\u6570\u6599\u3092\u52a0\u5473\u3057\u305f\u7372\u5f97\u5831\u916c\n* Action: trading signal(buy/sell/short/long/neutral/hold)\n\n#### \u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u8a55\u4fa1\u5024\nDifferential Sharpe Ratio(DSR)\u3092\u4f7f\u7528\u3002weight\u306e\u66f4\u65b0\u6642\u306b\u4f7f\u7528\u3002\n\n#### \u5b9f\u904b\u7528\u3059\u308b\u5834\u5408\u306e\u6ce8\u610f\u70b9\n* \u640d\u5207\u308a\n* \u30ea\u30b9\u30af\u306b\u5bfe\u3059\u308b\u55dc\u597d\u6027\n* \u7570\u5e38\u306a\u6319\u52d5\u304c\u78ba\u8a8d\u3055\u308c\u305f\u6642\u306e\u30b7\u30b9\u30c6\u30e0\u30c0\u30a6\u30f3\u51e6\u7406\n\n#### \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(\u53c2\u8003\u6587\u732e1\u53c2\u7167)\n##### \u3010\u6642\u523bt\u6642\u70b9\u3067\u306e\u30dd\u30b8\u30b7\u30e7\u30f3\u6c7a\u5b9a(long or short)\u3011\n$F_t=sign(\\sum_{i=0}^{M}w_{i,t}r_{t-i}+w_{M+1,t}F_{t-1}+v_t)$\n$F_t \u2208 [-1,1]; (short=-1, long=1)$\n$w_t$: weight vector\n$v_t$: threshold of the neural network\n$r_t$: $p_t - p_{t-1}$(\u6642\u7cfb\u5217\u306b\u304a\u3051\u308b\u30ea\u30bf\u30fc\u30f3)\n\n\u6570\u5f0f\u306e\u5f62\u306f\u5358\u7d14\u306a1\u5c64\u3060\u3051\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u540c\u3058\u3002\n\u5b9f\u969b\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u624b\u6cd5\u3092\u9069\u7528\u3057\u3001\u95be\u5024$v_t$\u3082weight vector\u306b\u542b\u307e\u305b\u3066\u6700\u9069\u5316\u3059\u308b\u3002\n\n##### \u3010\u6642\u70b9T\u3067\u306e\u5229\u76ca(profit)\u3011\n$P_t=\\sum_{t=0}^{T}R_t$\n$R_t:=F_{t-1}r_t-\u03b4|F_t-F_{t-1}|$\n\u03b4: transaction cost(\u624b\u6570\u6599)\n\u203b\u5404\u53d6\u5f15\u306b\u304a\u3044\u30661\u5358\u4f4d\u306e\u307f\u306e\u53d6\u5f15\u304c\u3055\u308c\u308b\u4e8b\u304c\u524d\u63d0\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n##### \u3010\u6700\u9069\u5316\u8a55\u4fa1\u5024\u3011\n\u25a0sharpe ratio\n$\\hat{S}(t):=\\frac{A_t}{B_t}$\n$A_t=A_{t-1}+\u03b7(R_t-A_{t-1}), A_0=0$\n$B_t=B_{t-1}+\u03b7(R_t^2-B_{t-1}), B_0=0$\n\u03b7: adaptation parameter\n\n\u25a0Differential Sharpe Ratio(DSR)\nsharpe ratio\u306e\u79fb\u52d5\u5e73\u5747\u7248\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u5b66\u7fd2\u7528\u306b\u6539\u5584\u3057\u305f\u3082\u306e\u3002\nDSR\u306e\u65b9\u304c\u8a08\u7b97\u304c\u8efd\u304f\u3001\u53ce\u675f\u3082\u65e9\u3044\uff08\u3089\u3057\u3044\uff09\u3002\n\u4e0a\u306e$\\hat{S}$\u3092\u03b7=0\u5468\u308a\u3067\u30c6\u30a4\u30e9\u30fc\u5c55\u958b\u3057\u7b2c\u4e00\u9805\u307e\u3067\u3092\u53d6\u5f97\u3002\n$D_t:=\\frac{d\\hat{S}}{d\u03b7}|_{\u03b7=0}$\n\n\u3000\u3000$=\\frac{B_{t-1}\\Delta A_t-\\frac{1}{2}A_{t-1}\\Delta B_t}{(B_{t-1}-A_{t-1}^2)^\\frac{3}{2}}$\n$\\Delta A_t=R_t-A_{t-1}$\n$\\Delta B_t=R_t^2-B_{t-1}$\n\n$D_t$\u3092\u5373\u6642\u7684\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5c3a\u5ea6\u3068\u307f\u306a\u3057\u3001\u3053\u308c\u3092\u6700\u5927\u5316\u3059\u308b\u3088\u3046\u306bweight\u306e\u66f4\u65b0\u3092\u884c\u3046\u3002\n\n##### \u3010weight\u306e\u66f4\u65b0\u3011\n$w_{i,t}=w_{i,t-1}+\\rho \\Delta w_{i,t}$\n$\\Delta w_{i,t}=\\frac{dD_t}{dw_i}$\n\u3000 \u3000\u3000$\\approx \\frac{dD_t}{dR_t}${ $\\frac{dR_t}{dF_t}\\frac{dF_t}{dw_{i,t}} + \\frac{dR_t}{dF_{t-1}}\\frac{dF_{t-1}}{dw_{i,t-1}}$}\n\n$\\frac{dF_t}{dw_{i,t}}\\approx\\frac{\\partial F_t}{\\partial w_{i,t}}+\\frac{\\partial F_t}{\\partial F_{t-1}}\\frac{dF_{t-1}}{dw_{i,t-1}}$\n\n$\\frac{dD_t}{dR_t}=\\frac{B_{t-1}-A_{t-1}R_t}{(B_{t-1}-A_{t-1}^2)^{3/2}}$\n$\\frac{dR_t}{dF_t}=-\\delta$\n$\\frac{dR_t}{dF_{t-1}}=r_t-\\delta$\n\n\n##### \u3010\u640d\u5207\u308a\u3001signal\u8a2d\u5b9a\u306e\u95be\u5024\u3001\u30b7\u30b9\u30c6\u30e0\u7570\u5e38\u306e\u5224\u5b9a\u3011\n\u30d1\u30e9\u30e1\u30bf\u3068\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3001\u3068\u3042\u308b\u304c\u5177\u4f53\u7684\u306a\u8a18\u8f09\u306f\u306a\u3044\u3002\u7d4c\u9a13\u7684\u306a\u5024\u3067\u8a2d\u5b9a\u3059\u308b\u3057\u304b\u306a\u3055\u305d\u3046\u3002\u3002\n\n# \u53c2\u8003\u30b3\u30fc\u30c9\nsign\u95a2\u6570\u306f\u4e00\u65e6tanh\u3068\u3057\u3066\u8a08\u7b97\u3057\u3001$F_t$\u304c0\u3088\u308a\u5927\u304d\u3044\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u3067signal\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\u640d\u5207\u308a\u306a\u3069\u306e\u6a5f\u80fd\u306f\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\u3002\n\u81ea\u5206\u3067\u3044\u3046\u306e\u3082\u306a\u3093\u3067\u3059\u304c\u76f8\u5f53\u602a\u3057\u3044\u30b3\u30fc\u30c9\u3067\u3059\u3002\u53c2\u8003\u3068\u3057\u3066\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n```py:\n# coding: utf-8\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom math import tanh, copysign\n\nclass RRLAgentForFX:\n    TRADING_COST = 0.003\n    EPS = 1e-6\n        \n    def __init__(self,M,rho=0.01,eta=0.1,bias=1.0):\n        np.random.seed(555)\n        self.M = M # number of lags\n        self.weights = np.zeros(self.M+3,dtype=np.float64)\n        self.bias = bias # bias term\n        self.rho = rho\n        self.eta = eta\n        self.price_diff = np.zeros(self.M+1) # r_t\n        \n        self.pre_price = None\n        self.pre_signal = 0\n        \n        self.pre_A = 0.0\n        self.pre_B = 0.0\n        self.pre_gradient_F = 0.0\n        \n        # result store\n        self.signal_store = []\n        self.profit_store = []\n        self.dsr_store = []\n        self.sr_store = []\n        self.cumulative_profit = 0.0\n        \n    def train_online(self, price):\n        self.calculate_price_diff(price)\n        signal, self.F_t_value = self.select_signal()\n        print \"signal\",signal\n        self.calculate_return(signal)\n        self.update_parameters()\n        self.pre_price = price\n        self.pre_signal = signal\n        \n        # store result\n        self.signal_store.append(signal)\n                    \n    def calculate_price_diff(self,price):\n        r = price - self.pre_price if self.pre_price is not None else 0\n        self.price_diff[:self.M] = self.price_diff[1:]\n        self.price_diff[self.M] = r\n        \n    def calculate_return(self,signal):\n        R_t = self.pre_signal*self.price_diff[-1]\n        R_t -= self.TRADING_COST*abs(signal - self.pre_signal)\n        self.return_t = R_t\n        \n        self.cumulative_profit += R_t\n        self.profit_store.append(self.cumulative_profit)\n            \n    def select_signal(self):\n        values_sum = (self.weights[:self.M+1]*self.price_diff).sum()\n        values_sum += self.weights[-2]*self.pre_signal\n        values_sum += self.bias*self.weights[-1]\n        \n        F_t_value = tanh(values_sum)\n        return copysign(1, F_t_value ), F_t_value\n                                            \n    def update_parameters(self):\n        # update weight\n        self.weights += self.rho*self.calculate_gradient_weights()\n        print \"weight\",self.weights\n\n        # update moment R_t\n        self.update_R_moment()\n\n    def calculate_gradient_weights(self):\n        \"\"\" differentiate between D_t and w_t \"\"\"\n        denominator = self.pre_B-self.pre_A**2\n        if denominator!=0:\n            diff_D_R = self.pre_B-self.pre_A*self.return_t\n            diff_D_R /= (denominator)**1.5\n        else:\n            diff_D_R = 0\n        \n        gradient_F = self.calculate_gradient_F()\n        print \"gradient_F\",gradient_F\n\n        #diff_R_F = -self.TRADING_COST\n        #diff_R_F_{t-1} = self.price_diff[-1] - self.TRADING_COST\n        delta_weights = -self.TRADING_COST*gradient_F\n        delta_weights += ( self.price_diff[-1] - self.TRADING_COST) \\\n                                                    *self.pre_gradient_F\n        delta_weights *= diff_D_R\n        self.pre_gradient_F = gradient_F\n        return delta_weights\n        \n    def calculate_gradient_F(self):\n        \"\"\" differentiate between F_t and w_t \"\"\"\n        diff_tnah = 1-self.F_t_value**2\n\n        diff_F_w = diff_tnah*( np.r_[ self.price_diff, self.pre_signal, self.bias ] )\n        diff_F_F = diff_tnah*self.weights[-2]\n\n        return diff_F_w + diff_F_F*self.pre_gradient_F\n\n    def update_R_moment(self):\n        delta_A = self.return_t - self.pre_A\n        delta_B = self.return_t**2 - self.pre_B\n        A_t = self.pre_A + self.eta*delta_A # A_t. first moment of R_t.\n        B_t = self.pre_B + self.eta*delta_B # B_t. second moment of R_t.\n        self.sr_store.append(A_t/B_t)\n        self.calculate_dsr(delta_A, delta_B)\n        \n        self.pre_A = A_t\n        self.pre_B = B_t\n\n    def calculate_dsr(self,delta_A,delta_B):\n        dsr = self.pre_B*delta_A - 0.5*self.pre_A*delta_B\n        dsr /= (self.pre_B-self.pre_A**2)**1.5\n        self.dsr_store.append(dsr)\n\nif __name__=='__main__':\n    M = 8\n    fx_agent = RRLAgentForFX(M,rho=0.01,eta=0.01,bias=0.25)\n    \n    ifname = os.getcwd()+'/input/quote.csv'\n    data = pd.read_csv(ifname)\n    train_data = data.ix[:3000,'USD']\n    \n    for price in train_data.values:\n        fx_agent.train_online(price)\n    \n```\n\n# \u5b9f\u9a13\n[\u307f\u305a\u307b\u9280\u884c\u30d2\u30b9\u30c8\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf](http://www.mizuhobank.co.jp/rate/market/historical.html)\u306e\u30da\u30fc\u30b8\u304b\u3089\u5916\u56fd\u70ba\u66ff\u76f8\u5834(/\u5186)\u306e\u65e5\u6642\u30c7\u30fc\u30bf\u306ecsv\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u4f7f\u7528\u3057\u305f\u306e\u306fUSD/\u5186\u306e2002\u5e744\u67081\u65e5\u304b\u30893,000\u500b\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002\n\n# \u5b9f\u9a13\u7d50\u679c\n## USD/\u5186\u30ec\u30fc\u30c8\n![USD.png](https://qiita-image-store.s3.amazonaws.com/0/12767/c704dfc0-1767-6ccf-c68a-464a8f54cc3b.png)\n\n## \u7d2f\u7a4d\u5229\u76ca(1\u65e51\u5358\u4f4d\u306e\u307f\u8cfc\u5165\u6642)\n![profit.png](https://qiita-image-store.s3.amazonaws.com/0/12767/eaff706f-c5b1-76f0-da84-a13006710d8c.png)\n\n## DSR\n![DSR_.png](https://qiita-image-store.s3.amazonaws.com/0/12767/f37b4515-9e95-e31d-e8f2-d39f78836abc.png)\n\n## SR\n![SR.png](https://qiita-image-store.s3.amazonaws.com/0/12767/4bc924e3-632b-8ddd-e4b8-465d475f0e4e.png)\n\n# \u30b3\u30e1\u30f3\u30c8\n\u03c1\u3068\u03b7\u306e\u5024\u306b\u3088\u3063\u3066\u5168\u7136\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\u4e0d\u5b89\u5b9a\u904e\u304e\u307e\u3059\u3002\u3002\u9593\u9055\u3044\u306b\u6c17\u4ed8\u304d\u6b21\u7b2c\u30b3\u30fc\u30c9\u306e\u66f4\u65b0\u3092\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u304a\u304b\u3057\u306a\u70b9\u306b\u304a\u6c17\u3065\u304d\u306e\u65b9\u304c\u304a\u3089\u308c\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u9802\u3051\u307e\u3059\u3068\u5927\u5909\u52a9\u304b\u308a\u307e\u3059\u3002\n", "tags": ["Python2.7", "\u5f37\u5316\u5b66\u7fd2"]}