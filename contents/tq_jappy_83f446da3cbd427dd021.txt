{"context": " More than 1 year has passed since last update.\u4ee5\u524d\u3001JBoss Seam\u3067\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u305f\u3093\u3067\u3059\u304c\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u30af\u30a8\u30ea\u30b9\u30c8\u30ea\u30f3\u30b0\uff09\u306b\u5bfe\u3057\u3066\u4f55\u304b\u51e6\u7406\u3059\u308b\u3001\u307f\u305f\u3044\u306a\u3088\u304f\u3042\u308b\u51e6\u7406\u304c\u3042\u3063\u305f\u6642\u306b\u3001Seam\u3067\u306f\u3001 @org.jboss.seam.annotations.web.RequestParameter \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u3068\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092Seam\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8(Java EE\u3067\u3044\u3046\u3068\u3053\u308d\u306eCDI\u307f\u305f\u3044\u306a\u3082\u306e)\u306bDI\u3067\u304d\u307e\u3057\u305f\u3002\n\u3053\u308c\u3092Java EE 7\u3067\u5b9f\u73fe\u3059\u308b\u5834\u5408\u3001Java EE 7\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff08\u591a\u5206\uff09\u305d\u306e\u3082\u306e\u30ba\u30d0\u30ea\u306e\u4ed5\u7d44\u307f\u306f\u306a\u3044\u306e\u3067\u3001\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u304b\u8003\u3048\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u3084\u306f\u308aStack Overflow\u306f\u5049\u5927\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u3059\u308c\u3070\u57fa\u672c\u7684\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\nhttp://stackoverflow.com/questions/13239975/depedency-inject-request-parameter-with-cdi-and-jsf2\n\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u306f\u3001\u4e0a\u8a18\u306e\u8a18\u4e8b\u3092\u306a\u305e\u3063\u3066\u307f\u305f\u4e0a\u3067\u3001\u5c11\u3057\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u5185\u5bb9\u306b\u3064\u3044\u3066\u306e\u7d39\u4ecb\u3067\u3059\u3002\n\n\u7d20\u76f4\u306b\u66f8\u304f\u5834\u5408\n\u305d\u3082\u305d\u3082CDI\u3092\u8003\u3048\u305a\u306b\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\uff08\u4ed6\u306b\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5\u304c\u3042\u308b\u304b\u3082\u2026\uff09\u3002\nFacesContext context = FacesContext.getCurrentInstance();\nString value = context.getExternalContext().getRequestParameterMap().get(\"param1\");\n\n\nCDI\u3092\u4f7f\u3063\u3066\u66f8\u304f\u5834\u5408\n\u4e0a\u8a18\u306e\u66f8\u304d\u65b9\u306f\u7d50\u69cb\u5197\u9577\u306a\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u30b9\u30de\u30fc\u30c8\u306b\u3001CDI\u3092\u4f7f\u3063\u3066\u758e\u7d50\u5408\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u9806\u756a\u306b\u5fc5\u8981\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u9650\u5b9a\u5b50(Qualifier)\u3092\u4f5c\u308b\n\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5148\u306e\u578b\u306fint\u3068\u304bInteger\u3068\u304bString\u3068\u304b\u3001\u305d\u306e\u8fba\u308a\u306e\u57fa\u672c\u578b\u3084\u6a19\u6e96\u30af\u30e9\u30b9\u306a\u306e\u3067\u3001\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5bfe\u8c61\u3092\u5b9a\u3081\u308b\u305f\u3081\u306e\u9650\u5b9a\u5b50\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u540d\u524d\u306fSeam\u3068\u540c\u3058\u3067RequestParameter\u3068\u3057\u307e\u3057\u305f\u3002\n\nRequestParameter.java\nimport static java.lang.annotation.ElementType.*;\nimport static java.lang.annotation.RetentionPolicy.*;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport javax.inject.Qualifier;\n\n@Qualifier\n@Retention(RUNTIME)\n@Target({ TYPE, METHOD, FIELD, PARAMETER })\npublic @interface RequestParameter {\n\n    /** \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5bfe\u8c61\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u540c\u3058 */\n    public String name() default \"\";\n}\n\n\n\n\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u3092\u4f5c\u308b\n@Produces\u3092\u3064\u3051\u3066\u623b\u308a\u5024\u3092DI\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u623b\u308a\u5024\u306fInteger\u3068\u3057\u3066\u3001Integer\u578b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306bDI\u53ef\u80fd\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u8a66\u3057\u307e\u3057\u305f\u3002\n\nRequestParameterProducer.java\nimport java.io.Serializable;\n\nimport javax.enterprise.context.Dependent;\nimport javax.enterprise.inject.Produces;\nimport javax.enterprise.inject.spi.InjectionPoint;\nimport javax.faces.context.FacesContext;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport org.slf4j.Logger;\n\n@Named\n@Dependent\npublic class RequestParameterProducer implements Serializable {\n\n    private static final long serialVersionUID = 1424981643941504251L;\n\n    @Inject\n    private Logger logger;\n\n    @Inject\n    private FacesContext facesContext;\n\n    @Produces\n    @RequestParameter\n    public Integer getRequestParameter(InjectionPoint ip) {\n        RequestParameter annotation = ip.getAnnotated().getAnnotation(\n                RequestParameter.class);\n        if (annotation == null) {\n            logger.warn(\"annotation not given.\");\n            return null;\n        }\n\n        String name = annotation.name();\n        if (\"\".equals(name)) {\n            name = ip.getMember().getName();\n        }\n\n        String value = facesContext.getExternalContext()\n                .getRequestParameterMap().get(name);\n\n        logger.debug(\"produce RequestParameter ({} = {})\", name, value);\n        return (value == null) ? null : Integer.valueOf(value);\n    }\n}\n\n\n\u88dc\u8db3\uff09Logger\u3068FacesContext\u306b\u3064\u3044\u3066\u3082\u305d\u308c\u305e\u308c\u72ec\u81ea\u306e\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u3092\u4f5c\u308a\u3001\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u305d\u308c\u3089\u3092DI\u3057\u3066\u3044\u307e\u3059\u3002\u6b21\u671fJSF\u3067\u306fFacesContext\u3082\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3067\u304d\u308b\u307f\u305f\u3044\u2026\uff1f\n\n\u30d0\u30c3\u30ad\u30f3\u30b0Bean\u306b\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3057\u3066\u307f\u308b\n\nSampleBean.java\npackage examples.jsf;\n\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.faces.view.ViewScoped;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport org.slf4j.Logger;\n\nimport examples.cdi.RequestParameter;\n\n@Named\n@ViewScoped\npublic class HomeBean implements Serializable {\n\n    private static final long serialVersionUID = 4788702779412422887L;\n\n    @Inject\n    private Logger logger;\n\n    @Inject\n    @RequestParameter\n    private Integer hoge;\n\n    @Inject\n    @RequestParameter\n    private Integer fuga;\n\n    @PostConstruct\n    public void load() {\n        logger.debug(\"parameter hoge = {}, fuga = {}\", hoge, fuga);\n    }\n}\n\n\n\u3053\u308c\u3067\u30a2\u30d7\u30ea\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u3001http://localhost:8080/home.jsf?hoge=123&fuga=456 \u306e\u3088\u3046\u306aURL\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001\u30ed\u30b0\u3068\u3057\u3066\n23:27:49,960 DEBUG [examples.jsf.HomeBean] (default task-6) hoge = 123, fuga = 456\n\n\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u78ba\u8a8d\u306f WildFly 8.1.0.Final \u3067\u884c\u3044\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3068\u3057\u3066\u6570\u5b57\u4ee5\u5916\u3092\u6e21\u3057\u305f\u5834\u5408\u3001 NumberFormatException \u304c\u8d77\u304d\u308b\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\uff08\u305d\u306e\u8fba\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u5272\u611b\u3057\u307e\u3059\uff09\u3002\n\nInteger\u3092OptionalInt\u306b\u3057\u3066\u307f\u308b\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6e21\u3063\u3066\u304d\u305f\u304b\u3069\u3046\u304b\u306f\u3001Integer\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u304c null \u304b\u3069\u3046\u304b\u306b\u3088\u3063\u3066\u5224\u65ad\u3057\u307e\u3059\u3002\u3057\u304b\u3057Java 8\u304b\u3089\u306fOptional\u3068\u3044\u3046\u3053\u3068\u3067\u3001Optional\uff08\u4eca\u56de\u306fint\u306b\u76f8\u5f53\u3059\u308bOptionalInt\uff09\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30e1\u30bd\u30c3\u30c9\u306e\u90e8\u5206\u3060\u3051\u629c\u7c8b\uff08\u3068\u8a00\u3063\u3066\u3082\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u3067\u3059\u304c\uff09\u3002\n\nRequestParameterProducer.java\n    @Produces\n    @RequestParameter\n    public OptionalInt getRequestParameter(InjectionPoint ip) {\n        RequestParameter annotation = ip.getAnnotated().getAnnotation(\n                RequestParameter.class);\n        if (annotation == null) {\n            logger.warn(\"annotation not given.\");\n            return OptionalInt.empty();\n        }\n\n        String name = annotation.name();\n        if (\"\".equals(name)) {\n            name = ip.getMember().getName();\n        }\n\n        String value = facesContext.getExternalContext()\n                .getRequestParameterMap().get(name);\n\n        logger.debug(\"produce RequestParameter ({} = {})\", name, value);\n        return (value == null) ? OptionalInt.empty() : OptionalInt.of(Integer\n                .valueOf(value));\n    }\n\n\n\u5f8c\u306f\u30d0\u30c3\u30ad\u30f3\u30b0Bean\u5074\u306e\u5909\u66f4\u3067\u3059\u304c\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u3092 OptionalInt \u306b\u5909\u3048\u307e\u3059\u3002\n    @Inject\n    @RequestParameter\n    private OptionalInt hoge;\n\nInteger\u3092OptionalInt\u306b\u5909\u3048\u306a\u3044\u3068DI\u5bfe\u8c61\u306e\u578b\u304c\u5408\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u306b\u306a\u308a\u3001\u30c7\u30d7\u30ed\u30a4\u306b\u5931\u6557\u3057\u307e\u3059\u3002\nCaused by: org.jboss.weld.exceptions.DeploymentException: WELD-001408: Unsatisfied dependencies for type Integer with qualifiers @RequestParameter\n  at injection point [BackedAnnotatedField] @Inject @RequestParameter private examples.jsf.HomeBean.hoge\n\n\u7d9a\u3044\u3066\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u3044\u308b\u5074\u306e\u30b3\u30fc\u30c9\u3082\u4fee\u6b63\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u3068\u306f\u8a00\u3048\u3001\u4e0a\u8a18\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u305d\u306e\u307e\u307e\u30ed\u30b0\u51fa\u529b\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3067\u3042\u308c\u3070\u4e0d\u8981\u3067\u3059\u304c\u3002\n@Inject\nprivate HogeDao hogeDao;\n\n@Inject\n@RequestParameter\nprivate OptionalInt hogeId;\n\n@Getter // Lombok\nprivate Hoge hoge;\n\n@PostConstruct\npublic void create() {\n    hoge = hogeDao.findById(hogeId.orElseThrow(() -> new IllegalArgumentException(\"param 'hogeId' is null\"));\n}\n\n\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u3067Seam 2.2\u304b\u3089Java EE 7\u3078\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u3057\u3066\u3044\u3066\u3001\u3053\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3063\u3066\u30d0\u30c3\u30ad\u30f3\u30b0Bean\u3092\u4f5c\u308b\u5834\u5408\u3001\u57fa\u672c\u7684\u306b\u306f\u4e0a\u8a18\u306e\u4f8b\u306e\u3088\u3046\u306b\u4f7f\u3044\u65b9\u306b\u843d\u3061\u7740\u304d\u307e\u3057\u305f\u3002\u306a\u308b\u3079\u304f\u30d0\u30c3\u30ad\u30f3\u30b0Bean\u304c\u8584\u304f\u306a\u308b\u3088\u3046\u306b\u4f5c\u308b\u3068\u3088\u3044\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n@PostConstruct \u3092\u4f7f\u3063\u305f\u521d\u671f\u5316\u30e1\u30bd\u30c3\u30c9\u306a\u3044\u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u51e6\u7406\u3092\u884c\u3046\u3002\n\n\nSeam\u306e\u5834\u5408\u306f @Create \u3068\u3044\u3046\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u7f6e\u304d\u63db\u3048\u3067\u3059\u3002\n\n\n\nOptionalInt#orElseThrow \u3092\u4f7f\u3063\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u7121\u3044\u3068\u304d\u306f\u30ab\u30b9\u30bf\u30e0\u4f8b\u5916( IllegalArgumentException )\u3092\u30b9\u30ed\u30fc\u3057\u3066\u307e\u3059\u3002\n\n\n\u5f93\u6765\u306fInteger\u30d5\u30a3\u30fc\u30eb\u30c9\u306enull\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u305f\u90e8\u5206\u306e\u7f6e\u304d\u63db\u3048\u3067\u3059\u3002\n\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6570\u5024\u3060\u3051\u306a\u3089\u3001\u3053\u308c\u3067\u5927\u4f53\u8db3\u308a\u308b\u306e\u304b\u306a\u3041\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n\u305f\u3060\u3001\u5024\u3068\u3057\u3066\u6587\u5b57\u5217\u3092\u53d6\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u5b9f\u7528\u7684\u3068\u306f\u8a00\u3048\u306a\u3044\u306e\u3067\u3001\u5f8c\u307b\u3069\u8ffd\u8a18\u4e88\u5b9a\u3067\u3059\u3002\n\u4ee5\u524d\u3001[JBoss Seam](http://seamframework.org/)\u3067\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u305f\u3093\u3067\u3059\u304c\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u30af\u30a8\u30ea\u30b9\u30c8\u30ea\u30f3\u30b0\uff09\u306b\u5bfe\u3057\u3066\u4f55\u304b\u51e6\u7406\u3059\u308b\u3001\u307f\u305f\u3044\u306a\u3088\u304f\u3042\u308b\u51e6\u7406\u304c\u3042\u3063\u305f\u6642\u306b\u3001Seam\u3067\u306f\u3001 ``@org.jboss.seam.annotations.web.RequestParameter`` \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u3068\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092Seam\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8(Java EE\u3067\u3044\u3046\u3068\u3053\u308d\u306eCDI\u307f\u305f\u3044\u306a\u3082\u306e)\u306bDI\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3092Java EE 7\u3067\u5b9f\u73fe\u3059\u308b\u5834\u5408\u3001Java EE 7\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff08\u591a\u5206\uff09\u305d\u306e\u3082\u306e\u30ba\u30d0\u30ea\u306e\u4ed5\u7d44\u307f\u306f\u306a\u3044\u306e\u3067\u3001\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u304b\u8003\u3048\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u3084\u306f\u308aStack Overflow\u306f\u5049\u5927\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u3059\u308c\u3070\u57fa\u672c\u7684\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\n\nhttp://stackoverflow.com/questions/13239975/depedency-inject-request-parameter-with-cdi-and-jsf2\n\n\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u306f\u3001\u4e0a\u8a18\u306e\u8a18\u4e8b\u3092\u306a\u305e\u3063\u3066\u307f\u305f\u4e0a\u3067\u3001\u5c11\u3057\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u5185\u5bb9\u306b\u3064\u3044\u3066\u306e\u7d39\u4ecb\u3067\u3059\u3002\n\n## \u7d20\u76f4\u306b\u66f8\u304f\u5834\u5408\n\n\u305d\u3082\u305d\u3082CDI\u3092\u8003\u3048\u305a\u306b\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\uff08\u4ed6\u306b\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5\u304c\u3042\u308b\u304b\u3082\u2026\uff09\u3002\n\n```java\nFacesContext context = FacesContext.getCurrentInstance();\nString value = context.getExternalContext().getRequestParameterMap().get(\"param1\");\n```\n\n## CDI\u3092\u4f7f\u3063\u3066\u66f8\u304f\u5834\u5408\n\n\u4e0a\u8a18\u306e\u66f8\u304d\u65b9\u306f\u7d50\u69cb\u5197\u9577\u306a\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u30b9\u30de\u30fc\u30c8\u306b\u3001CDI\u3092\u4f7f\u3063\u3066\u758e\u7d50\u5408\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u9806\u756a\u306b\u5fc5\u8981\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n### \u9650\u5b9a\u5b50(Qualifier)\u3092\u4f5c\u308b\n\n\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5148\u306e\u578b\u306fint\u3068\u304bInteger\u3068\u304bString\u3068\u304b\u3001\u305d\u306e\u8fba\u308a\u306e\u57fa\u672c\u578b\u3084\u6a19\u6e96\u30af\u30e9\u30b9\u306a\u306e\u3067\u3001\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5bfe\u8c61\u3092\u5b9a\u3081\u308b\u305f\u3081\u306e\u9650\u5b9a\u5b50\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u540d\u524d\u306fSeam\u3068\u540c\u3058\u3067RequestParameter\u3068\u3057\u307e\u3057\u305f\u3002\n\n```java:RequestParameter.java\nimport static java.lang.annotation.ElementType.*;\nimport static java.lang.annotation.RetentionPolicy.*;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport javax.inject.Qualifier;\n\n@Qualifier\n@Retention(RUNTIME)\n@Target({ TYPE, METHOD, FIELD, PARAMETER })\npublic @interface RequestParameter {\n\n    /** \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5bfe\u8c61\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u540c\u3058 */\n    public String name() default \"\";\n}\n```\n\n### \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u3092\u4f5c\u308b\n\n``@Produces``\u3092\u3064\u3051\u3066\u623b\u308a\u5024\u3092DI\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u623b\u308a\u5024\u306fInteger\u3068\u3057\u3066\u3001Integer\u578b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306bDI\u53ef\u80fd\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u8a66\u3057\u307e\u3057\u305f\u3002\n\n```java:RequestParameterProducer.java\nimport java.io.Serializable;\n\nimport javax.enterprise.context.Dependent;\nimport javax.enterprise.inject.Produces;\nimport javax.enterprise.inject.spi.InjectionPoint;\nimport javax.faces.context.FacesContext;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport org.slf4j.Logger;\n\n@Named\n@Dependent\npublic class RequestParameterProducer implements Serializable {\n\n    private static final long serialVersionUID = 1424981643941504251L;\n\n    @Inject\n    private Logger logger;\n\n    @Inject\n    private FacesContext facesContext;\n\n    @Produces\n    @RequestParameter\n    public Integer getRequestParameter(InjectionPoint ip) {\n        RequestParameter annotation = ip.getAnnotated().getAnnotation(\n                RequestParameter.class);\n        if (annotation == null) {\n            logger.warn(\"annotation not given.\");\n            return null;\n        }\n\n        String name = annotation.name();\n        if (\"\".equals(name)) {\n            name = ip.getMember().getName();\n        }\n\n        String value = facesContext.getExternalContext()\n                .getRequestParameterMap().get(name);\n\n        logger.debug(\"produce RequestParameter ({} = {})\", name, value);\n        return (value == null) ? null : Integer.valueOf(value);\n    }\n}\n```\n\n\u88dc\u8db3\uff09Logger\u3068FacesContext\u306b\u3064\u3044\u3066\u3082\u305d\u308c\u305e\u308c\u72ec\u81ea\u306e\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u3092\u4f5c\u308a\u3001\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u305d\u308c\u3089\u3092DI\u3057\u3066\u3044\u307e\u3059\u3002\u6b21\u671fJSF\u3067\u306fFacesContext\u3082\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3067\u304d\u308b\u307f\u305f\u3044\u2026\uff1f\n\n### \u30d0\u30c3\u30ad\u30f3\u30b0Bean\u306b\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3057\u3066\u307f\u308b\n\n```java:SampleBean.java\npackage examples.jsf;\n\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.faces.view.ViewScoped;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport org.slf4j.Logger;\n\nimport examples.cdi.RequestParameter;\n\n@Named\n@ViewScoped\npublic class HomeBean implements Serializable {\n\n    private static final long serialVersionUID = 4788702779412422887L;\n\n    @Inject\n    private Logger logger;\n\n    @Inject\n    @RequestParameter\n    private Integer hoge;\n\n    @Inject\n    @RequestParameter\n    private Integer fuga;\n\n    @PostConstruct\n    public void load() {\n        logger.debug(\"parameter hoge = {}, fuga = {}\", hoge, fuga);\n    }\n}\n```\n\n\u3053\u308c\u3067\u30a2\u30d7\u30ea\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u3001http://localhost:8080/home.jsf?hoge=123&fuga=456 \u306e\u3088\u3046\u306aURL\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001\u30ed\u30b0\u3068\u3057\u3066\n\n```\n23:27:49,960 DEBUG [examples.jsf.HomeBean] (default task-6) hoge = 123, fuga = 456\n```\n\n\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u78ba\u8a8d\u306f WildFly 8.1.0.Final \u3067\u884c\u3044\u307e\u3057\u305f\u3002\n\n\u306a\u304a\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3068\u3057\u3066\u6570\u5b57\u4ee5\u5916\u3092\u6e21\u3057\u305f\u5834\u5408\u3001 ``NumberFormatException`` \u304c\u8d77\u304d\u308b\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\uff08\u305d\u306e\u8fba\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u5272\u611b\u3057\u307e\u3059\uff09\u3002\n\n### Integer\u3092OptionalInt\u306b\u3057\u3066\u307f\u308b\n\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6e21\u3063\u3066\u304d\u305f\u304b\u3069\u3046\u304b\u306f\u3001Integer\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u304c ``null`` \u304b\u3069\u3046\u304b\u306b\u3088\u3063\u3066\u5224\u65ad\u3057\u307e\u3059\u3002\u3057\u304b\u3057Java 8\u304b\u3089\u306fOptional\u3068\u3044\u3046\u3053\u3068\u3067\u3001Optional\uff08\u4eca\u56de\u306fint\u306b\u76f8\u5f53\u3059\u308bOptionalInt\uff09\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30e1\u30bd\u30c3\u30c9\u306e\u90e8\u5206\u3060\u3051\u629c\u7c8b\uff08\u3068\u8a00\u3063\u3066\u3082\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u3067\u3059\u304c\uff09\u3002\n\n```java:RequestParameterProducer.java\n    @Produces\n    @RequestParameter\n    public OptionalInt getRequestParameter(InjectionPoint ip) {\n        RequestParameter annotation = ip.getAnnotated().getAnnotation(\n                RequestParameter.class);\n        if (annotation == null) {\n            logger.warn(\"annotation not given.\");\n            return OptionalInt.empty();\n        }\n\n        String name = annotation.name();\n        if (\"\".equals(name)) {\n            name = ip.getMember().getName();\n        }\n\n        String value = facesContext.getExternalContext()\n                .getRequestParameterMap().get(name);\n\n        logger.debug(\"produce RequestParameter ({} = {})\", name, value);\n        return (value == null) ? OptionalInt.empty() : OptionalInt.of(Integer\n                .valueOf(value));\n    }\n```\n\n\u5f8c\u306f\u30d0\u30c3\u30ad\u30f3\u30b0Bean\u5074\u306e\u5909\u66f4\u3067\u3059\u304c\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u3092 ``OptionalInt`` \u306b\u5909\u3048\u307e\u3059\u3002\n\n```java\n    @Inject\n    @RequestParameter\n    private OptionalInt hoge;\n```\n\nInteger\u3092OptionalInt\u306b\u5909\u3048\u306a\u3044\u3068DI\u5bfe\u8c61\u306e\u578b\u304c\u5408\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u306b\u306a\u308a\u3001\u30c7\u30d7\u30ed\u30a4\u306b\u5931\u6557\u3057\u307e\u3059\u3002\n\n```\nCaused by: org.jboss.weld.exceptions.DeploymentException: WELD-001408: Unsatisfied dependencies for type Integer with qualifiers @RequestParameter\n  at injection point [BackedAnnotatedField] @Inject @RequestParameter private examples.jsf.HomeBean.hoge\n```\n\n\u7d9a\u3044\u3066\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u3044\u308b\u5074\u306e\u30b3\u30fc\u30c9\u3082\u4fee\u6b63\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u3068\u306f\u8a00\u3048\u3001\u4e0a\u8a18\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u305d\u306e\u307e\u307e\u30ed\u30b0\u51fa\u529b\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3067\u3042\u308c\u3070\u4e0d\u8981\u3067\u3059\u304c\u3002\n\n```java\n@Inject\nprivate HogeDao hogeDao;\n\n@Inject\n@RequestParameter\nprivate OptionalInt hogeId;\n\n@Getter // Lombok\nprivate Hoge hoge;\n\n@PostConstruct\npublic void create() {\n    hoge = hogeDao.findById(hogeId.orElseThrow(() -> new IllegalArgumentException(\"param 'hogeId' is null\"));\n}\n```\n\n\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u3067Seam 2.2\u304b\u3089Java EE 7\u3078\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u3057\u3066\u3044\u3066\u3001\u3053\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3063\u3066\u30d0\u30c3\u30ad\u30f3\u30b0Bean\u3092\u4f5c\u308b\u5834\u5408\u3001\u57fa\u672c\u7684\u306b\u306f\u4e0a\u8a18\u306e\u4f8b\u306e\u3088\u3046\u306b\u4f7f\u3044\u65b9\u306b\u843d\u3061\u7740\u304d\u307e\u3057\u305f\u3002\u306a\u308b\u3079\u304f\u30d0\u30c3\u30ad\u30f3\u30b0Bean\u304c\u8584\u304f\u306a\u308b\u3088\u3046\u306b\u4f5c\u308b\u3068\u3088\u3044\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n- ``@PostConstruct`` \u3092\u4f7f\u3063\u305f\u521d\u671f\u5316\u30e1\u30bd\u30c3\u30c9\u306a\u3044\u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u51e6\u7406\u3092\u884c\u3046\u3002\n - Seam\u306e\u5834\u5408\u306f ``@Create`` \u3068\u3044\u3046\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u7f6e\u304d\u63db\u3048\u3067\u3059\u3002\n- ``OptionalInt#orElseThrow`` \u3092\u4f7f\u3063\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u7121\u3044\u3068\u304d\u306f\u30ab\u30b9\u30bf\u30e0\u4f8b\u5916( ``IllegalArgumentException`` )\u3092\u30b9\u30ed\u30fc\u3057\u3066\u307e\u3059\u3002\n - \u5f93\u6765\u306fInteger\u30d5\u30a3\u30fc\u30eb\u30c9\u306enull\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u305f\u90e8\u5206\u306e\u7f6e\u304d\u63db\u3048\u3067\u3059\u3002\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6570\u5024\u3060\u3051\u306a\u3089\u3001\u3053\u308c\u3067\u5927\u4f53\u8db3\u308a\u308b\u306e\u304b\u306a\u3041\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n\u305f\u3060\u3001\u5024\u3068\u3057\u3066\u6587\u5b57\u5217\u3092\u53d6\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u5b9f\u7528\u7684\u3068\u306f\u8a00\u3048\u306a\u3044\u306e\u3067\u3001\u5f8c\u307b\u3069\u8ffd\u8a18\u4e88\u5b9a\u3067\u3059\u3002\n", "tags": ["Java8", "JavaEE7", "CDI"]}