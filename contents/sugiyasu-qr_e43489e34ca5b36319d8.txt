{"tags": ["Slick3.1", "Play2.5", "Play2"], "context": "\n\n\u6982\u8981\nslick \u3067\u65e5\u4ed8\u578b\u3092\u53d6\u5f97\u3059\u308b\u3068\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f java.sql.Timestamp \u578b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3067\u306f sql.* \u3068\u304b\u3063\u3066\u3044\u3046\u578b\u306f\u4f7f\u3044\u305f\u304f\u306a\u3044\u3067\u3059\u3088\u306d\u3002\njava.util.Date \u3082\u6271\u3044\u306b\u304f\u3044\u306e\u3067\u3001 joda.time.DateTime \u306b\u3057\u305f\u3044\u3067\u3059\u3088\u306d\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059\u3002\n\u203bplay2.5 scala \u74b0\u5883\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u88c5\n\u30c6\u30fc\u30d6\u30eb\u306f\u4ee5\u4e0b\u3068\u3057\u307e\u3059\u3002\n\nschema.sql\nCREATE TABLE IF NOT EXISTS SAMPLE (\n    SAMPLE_DAY timestamp NOT NULL\n);\n\n\n\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u5fdc\u3059\u308b case class \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\ncase class Sample(sampleDay:DateTime)\n\nTables.scala \u306b\u30c6\u30fc\u30d6\u30eb\u3068\u30e2\u30c7\u30eb\u306e\u5bfe\u5fdc\u95a2\u4fc2\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\njava.sql.Timestamp \u21d2 joda.time.DateTime \u306e\u5909\u63db\u51e6\u7406\u3082\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u203b\u3053\u306e\u8a18\u4e8b\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3053\u3053\u3060\u3051\u3067\u3059\u30fb\u30fb\u30fb\n\nTables.scala\nclass Tables @Inject()(dbConfigProvider: DatabaseConfigProvider) {\n  val dbConfig = dbConfigProvider.get[JdbcProfile]\n  import dbConfig.driver.api._\n\n  /**\n    * java.sql.Timestamp \u21d4 joda.time.DateTime\n    */\n  implicit val jodatimeColumnType = MappedColumnType.base[DateTime, Timestamp](\n    { jodatime => new Timestamp(jodatime.getMillis()) },\n    { sqltime => new DateTime(sqltime.getTime) }\n  )\n\n  class SampleTable(tag: Tag) extends Table[Sample] (tag, \"SAMPLE\") {\n    def sampleDay = column[DateTime](\"SAMPLE_DAY\")\n\n    def * = (sampleDay) <> (Sample.tupled, Sample.unapply)\n  }\n  val samples = TableQuery[SampleTable]\n\n\n\u4f7f\u3046\u5074\u3067\u3059\u3002\nclass DBDAO @Inject() (dbConfigProvider:DatabaseConfigProvider, tables:Tables) extends DAO {\n  val dbConfig = dbConfigProvider.get[JdbcProfile]\n\n  import dbConfig.driver.api._\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  override def getSampleDay:DateTime = {\n    val f = dbConfig.db.run(tables.samples.result.head)\n    Await.result(f, Duration(1, SECONDS)).sampleDay\n  }\n}\n\n\u4ee5\u4e0a\u3002\n\n\u304a\u307e\u3051\nDB \u306e Int \u578b\u3092 Scala \u306e Boolean \u578b\u306b\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u5909\u63db\u306e\u5b9a\u7fa9\u3002\n  /**\n    * DB Int \u21d4 Scala Boolean\n    */\n  implicit val booleanColumnType = MappedColumnType.base[Boolean, Int](\n    { b => if(b) 1 else 0 },    // map Boolean to Int\n    { i => if(i == 0) false else true } // map Int to Boolean\n  )\n\nTable \u306e\u30ab\u30e9\u30e0\u6307\u5b9a\u3002\uff08isDisp \u3068\u3044\u3046\u30ab\u30e9\u30e0\u3060\u3068\u3057\u307e\u3059\u3002\uff09\ndef isDisp         = column[Boolean](\"ISDISP\")\n\n# \u6982\u8981\n\nslick \u3067\u65e5\u4ed8\u578b\u3092\u53d6\u5f97\u3059\u308b\u3068\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f java.sql.Timestamp \u578b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3067\u306f sql.* \u3068\u304b\u3063\u3066\u3044\u3046\u578b\u306f\u4f7f\u3044\u305f\u304f\u306a\u3044\u3067\u3059\u3088\u306d\u3002\njava.util.Date \u3082\u6271\u3044\u306b\u304f\u3044\u306e\u3067\u3001 joda.time.DateTime \u306b\u3057\u305f\u3044\u3067\u3059\u3088\u306d\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059\u3002\n\n\u203bplay2.5 scala \u74b0\u5883\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u5b9f\u88c5\n\n\u30c6\u30fc\u30d6\u30eb\u306f\u4ee5\u4e0b\u3068\u3057\u307e\u3059\u3002\n\n```schema.sql\nCREATE TABLE IF NOT EXISTS SAMPLE (\n    SAMPLE_DAY timestamp NOT NULL\n);\n```\n\n\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u5fdc\u3059\u308b case class \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```\ncase class Sample(sampleDay:DateTime)\n```\n\nTables.scala \u306b\u30c6\u30fc\u30d6\u30eb\u3068\u30e2\u30c7\u30eb\u306e\u5bfe\u5fdc\u95a2\u4fc2\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\njava.sql.Timestamp \u21d2 joda.time.DateTime \u306e\u5909\u63db\u51e6\u7406\u3082\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u203b\u3053\u306e\u8a18\u4e8b\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3053\u3053\u3060\u3051\u3067\u3059\u30fb\u30fb\u30fb\n\n```Tables.scala\nclass Tables @Inject()(dbConfigProvider: DatabaseConfigProvider) {\n  val dbConfig = dbConfigProvider.get[JdbcProfile]\n  import dbConfig.driver.api._\n\n  /**\n    * java.sql.Timestamp \u21d4 joda.time.DateTime\n    */\n  implicit val jodatimeColumnType = MappedColumnType.base[DateTime, Timestamp](\n    { jodatime => new Timestamp(jodatime.getMillis()) },\n    { sqltime => new DateTime(sqltime.getTime) }\n  )\n\n  class SampleTable(tag: Tag) extends Table[Sample] (tag, \"SAMPLE\") {\n    def sampleDay = column[DateTime](\"SAMPLE_DAY\")\n\n    def * = (sampleDay) <> (Sample.tupled, Sample.unapply)\n  }\n  val samples = TableQuery[SampleTable]\n```\n\n\u4f7f\u3046\u5074\u3067\u3059\u3002\n\n```\nclass DBDAO @Inject() (dbConfigProvider:DatabaseConfigProvider, tables:Tables) extends DAO {\n  val dbConfig = dbConfigProvider.get[JdbcProfile]\n\n  import dbConfig.driver.api._\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  override def getSampleDay:DateTime = {\n    val f = dbConfig.db.run(tables.samples.result.head)\n    Await.result(f, Duration(1, SECONDS)).sampleDay\n  }\n}\n```\n\n\u4ee5\u4e0a\u3002\n\n# \u304a\u307e\u3051\n\nDB \u306e Int \u578b\u3092 Scala \u306e Boolean \u578b\u306b\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u5909\u63db\u306e\u5b9a\u7fa9\u3002\n\n```\n  /**\n    * DB Int \u21d4 Scala Boolean\n    */\n  implicit val booleanColumnType = MappedColumnType.base[Boolean, Int](\n    { b => if(b) 1 else 0 },    // map Boolean to Int\n    { i => if(i == 0) false else true } // map Int to Boolean\n  )\n```\n\nTable \u306e\u30ab\u30e9\u30e0\u6307\u5b9a\u3002\uff08isDisp \u3068\u3044\u3046\u30ab\u30e9\u30e0\u3060\u3068\u3057\u307e\u3059\u3002\uff09\n\n```\ndef isDisp         = column[Boolean](\"ISDISP\")\n```\n"}