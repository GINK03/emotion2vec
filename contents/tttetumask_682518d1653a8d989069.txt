{"tags": ["cocos2d-x", "C++"], "context": " More than 1 year has passed since last update.cocos2d-x\u3067ETC\u306e\u30a2\u30eb\u30d5\u30a1\u30de\u30b9\u30af\u3092\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3059\u308b\u969b\u306bArmature\u3067\u82e6\u6226\u3057\u305f\u306e\u3067\u6b8b\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u8abf\u3079\u305f\u9650\u308a\u306f\u65e5\u672c\u8a9e\u306b\u3088\u308b\u8a18\u4e8b\u306f\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u4f55\u304b\u5f79\u306b\u7acb\u3066\u3070\u5b09\u3057\u3044\u3002\n(\u306a\u304a\u4e2d\u56fd\u8a9e\u306e\u8a18\u4e8b\u306f\u3042\u3063\u305f\u6a21\u69d8\u3002\u3068\u3044\u3046\u304b\u305d\u308c\u3092\u53c2\u8003\u306b\u3057\u305f\u3002)\n\n\u3068\u308a\u3042\u3048\u305a\u66f8\u3044\u3066\u307f\u305f\n\nhoge.cpp\n// \u521d\u671f\u5316\u7cfb\u7d71\u306e\u51e6\u7406\u5185\u306b\u3076\u3061\u8fbc\u3080\nvoid onEnter()\n{\n   // \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3068\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3063\u3066\u30b7\u30a7\u30fc\u30c0\u3092\u4f5c\u6210\n   auto shader = GLProgram::creatWithByteArrays();\n   auto shader_state = GLProgramState::getOrCreateWithGLProgram(shader);\n\n   // \u81ea\u524d\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u30bb\u30c3\u30c8\n   setCustomShader(shader_state, getChildren());\n}\n\n// \u30b7\u30a7\u30fc\u30c0\u30bb\u30c3\u30c8\nvoid setCustomShader(GLProgramState *glpstate, Vector<Node*>& childrens)\n{\n   if(chidrens.empty()) return;\n\n   for(auto& child : childrens)\n   {\n       // \u518d\u5e30\n       setCustomShader(glpstate, dhild->getChildren());\n\n       // dynamic_cast\u3067Sprite\u306b\n       auto sp = dynamic_cast<Sprite*>(child);\n\n       // nullptr\u3058\u3083\u306a\u3051\u308c\u3070\u30b7\u30a7\u30fc\u30c0\u7a81\u3063\u8fbc\u3080\n       if(sp != nullptr){\n         sp->setGLProgramState(glpstate);\n       }\n   }\n}\n\n\n\u3068\u4e0a\u8a18\u306e\u66f8\u304d\u65b9\u3067\u57fa\u672c\u7684\u306b\u306f\u5bfe\u5fdc\u51fa\u6765\u305f\u3051\u3069\u3001Armature\u3060\u3051\u898b\u4e8b\u306b\u30de\u30b9\u30af\u52b9\u3044\u3066\u306a\u3044\u3002\n\u3069\u3046\u3084\u3089Armature\u306f\u9055\u3046\u3089\u3057\u3044\u3002\n\nArmature\u306e\u4e2d\u3092\u6f5c\u3063\u3066\u3044\u304f\u3068...\n\u3044\u305f\u3002\nArmature -> Bone -> DecorativeDisplay -> Node \u306b\u5bfe\u3057\u3066\u30b7\u30a7\u30fc\u30c0\u7a81\u3063\u8fbc\u307e\u306a\u3044\u3068\u99c4\u76ee\u3089\u3057\u3044\u3002\n\u306a\u306e\u3067\nauto arm = dynamic_cast<Armature*>(child);\n\nauto& map = arm->getBoneDic();\nfor(auto& entry : map){\n   auto bone = entry.second;\n   if(bone != nullptr){\n      auto list = bone->getDisplayManager()->getDecortaiveDisplayList();\n      for(auto dd : list){\n         dd->getDisplay()->setGLProgramState(glpstate);\n      }\n   }\n}\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u5bfe\u5fdc\u3059\u308b\u3068\u3001Armature\u306b\u5bfe\u3057\u3066\u30b7\u30a7\u30fc\u30c0\u304c\u53cd\u5fdc\u3057\u307e\u3057\u305f\u3002\n\u3082\u3063\u3068\u826f\u3044\u8a18\u8ff0\u306b\u51fa\u6765\u308b\u3068\u601d\u3046\u3051\u3069\u3001\u307e\u3041\u591a\u5c11\u306f\u306d\uff1f\n\u8a18\u4e8b\u6295\u7a3f\u521d\u3081\u3066\u306a\u306e\u3067\u3053\u3046\u3044\u3046\u66f8\u304d\u65b9\u3067\u3044\u3044\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001\n\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3002\ncocos2d-x\u3067ETC\u306e\u30a2\u30eb\u30d5\u30a1\u30de\u30b9\u30af\u3092\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3059\u308b\u969b\u306bArmature\u3067\u82e6\u6226\u3057\u305f\u306e\u3067\u6b8b\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u8abf\u3079\u305f\u9650\u308a\u306f\u65e5\u672c\u8a9e\u306b\u3088\u308b\u8a18\u4e8b\u306f\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u4f55\u304b\u5f79\u306b\u7acb\u3066\u3070\u5b09\u3057\u3044\u3002\n(\u306a\u304a\u4e2d\u56fd\u8a9e\u306e\u8a18\u4e8b\u306f\u3042\u3063\u305f\u6a21\u69d8\u3002\u3068\u3044\u3046\u304b\u305d\u308c\u3092\u53c2\u8003\u306b\u3057\u305f\u3002)\n\n# \u3068\u308a\u3042\u3048\u305a\u66f8\u3044\u3066\u307f\u305f #\n```hoge.cpp\n// \u521d\u671f\u5316\u7cfb\u7d71\u306e\u51e6\u7406\u5185\u306b\u3076\u3061\u8fbc\u3080\nvoid onEnter()\n{\n   // \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3068\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3063\u3066\u30b7\u30a7\u30fc\u30c0\u3092\u4f5c\u6210\n   auto shader = GLProgram::creatWithByteArrays();\n   auto shader_state = GLProgramState::getOrCreateWithGLProgram(shader);\n\n   // \u81ea\u524d\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u30bb\u30c3\u30c8\n   setCustomShader(shader_state, getChildren());\n}\n\n// \u30b7\u30a7\u30fc\u30c0\u30bb\u30c3\u30c8\nvoid setCustomShader(GLProgramState *glpstate, Vector<Node*>& childrens)\n{\n   if(chidrens.empty()) return;\n\n   for(auto& child : childrens)\n   {\n       // \u518d\u5e30\n       setCustomShader(glpstate, dhild->getChildren());\n\n       // dynamic_cast\u3067Sprite\u306b\n       auto sp = dynamic_cast<Sprite*>(child);\n\n       // nullptr\u3058\u3083\u306a\u3051\u308c\u3070\u30b7\u30a7\u30fc\u30c0\u7a81\u3063\u8fbc\u3080\n       if(sp != nullptr){\n         sp->setGLProgramState(glpstate);\n       }\n   }\n}\n```\n\u3068\u4e0a\u8a18\u306e\u66f8\u304d\u65b9\u3067\u57fa\u672c\u7684\u306b\u306f\u5bfe\u5fdc\u51fa\u6765\u305f\u3051\u3069\u3001Armature\u3060\u3051\u898b\u4e8b\u306b\u30de\u30b9\u30af\u52b9\u3044\u3066\u306a\u3044\u3002\n\u3069\u3046\u3084\u3089Armature\u306f\u9055\u3046\u3089\u3057\u3044\u3002\n\n# Armature\u306e\u4e2d\u3092\u6f5c\u3063\u3066\u3044\u304f\u3068... #\n\u3044\u305f\u3002\n**Armature -> Bone -> DecorativeDisplay -> Node** \u306b\u5bfe\u3057\u3066\u30b7\u30a7\u30fc\u30c0\u7a81\u3063\u8fbc\u307e\u306a\u3044\u3068\u99c4\u76ee\u3089\u3057\u3044\u3002\n\u306a\u306e\u3067\n\n```\nauto arm = dynamic_cast<Armature*>(child);\n\nauto& map = arm->getBoneDic();\nfor(auto& entry : map){\n   auto bone = entry.second;\n   if(bone != nullptr){\n      auto list = bone->getDisplayManager()->getDecortaiveDisplayList();\n      for(auto dd : list){\n         dd->getDisplay()->setGLProgramState(glpstate);\n      }\n   }\n}\n```\n\u3068\u3044\u3046\u611f\u3058\u3067\u5bfe\u5fdc\u3059\u308b\u3068\u3001Armature\u306b\u5bfe\u3057\u3066\u30b7\u30a7\u30fc\u30c0\u304c\u53cd\u5fdc\u3057\u307e\u3057\u305f\u3002\n\u3082\u3063\u3068\u826f\u3044\u8a18\u8ff0\u306b\u51fa\u6765\u308b\u3068\u601d\u3046\u3051\u3069\u3001\u307e\u3041\u591a\u5c11\u306f\u306d\uff1f\n\n\n\u8a18\u4e8b\u6295\u7a3f\u521d\u3081\u3066\u306a\u306e\u3067\u3053\u3046\u3044\u3046\u66f8\u304d\u65b9\u3067\u3044\u3044\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001\n\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n"}