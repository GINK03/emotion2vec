{"context": " More than 1 year has passed since last update.\u7b2c\u56db\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u89e3\u7b54\u4f8b\u3002\n\u554f\u984c\u306f\nhttp://nabetani.sakura.ne.jp/hena/ord4tetroid/\n\u7d9a\u3005\u96c6\u307e\u3063\u3066\u3044\u308b\u56de\u7b54\u3092\u773a\u3081\u3066\u3044\u305f\u3089\u3001\nhttp://d.hatena.ne.jp/y_sumida/\n\u304c\u76ee\u306b\u6b62\u307e\u308a\u3001Spock \u3044\u3044\u306a\u3041\u3068\u601d\u3044\u3001\u30c6\u30b9\u30c8\u306f spock \u3067\u3002\n\u307e\u305a\u306f\u672c\u4f53\u3002\n\nTetroid.java\nimport java.util.Collection;\nimport java.util.TreeSet;\nimport java.util.Arrays;\n\npublic class Tetroid\n{\n  static abstract class Identifier\n  {\n    abstract char getName();\n    abstract boolean match(TreeSet<String> items);\n    static String dec( String a, String b )\n    {\n      StringBuilder r = new StringBuilder();\n      for( int i=0 ; i<a.length() ; ++i ){\n        r.append( (char)( a.charAt(i) - b.charAt(i) + '3') );\n      }\n      return r.toString();\n    }\n    static String[] normalize( Collection<String> v )\n    {\n      String[] result = new String[v.size()];\n      int ix=0;\n      for( String s : v ){\n        result[ix] = dec( s, v.iterator().next() );\n        ++ix;\n      }\n      return result;\n    }\n    TreeSet<String> exchange_xy( TreeSet<String> items )\n    {\n      TreeSet<String> result = new TreeSet<String>();\n      for( String s : items ){\n        StringBuilder b = new StringBuilder( s );\n        result.add( b.reverse().toString() );\n      }\n      return result;\n    }\n  }\n  static class TetroidI extends Identifier\n  {\n    char getName(){  return 'I'; }\n    boolean match(TreeSet<String> items)\n    {\n      String first = items.first();\n      String last = items.last();\n      System.err.flush();\n      if ( first.charAt(0)==last.charAt(0) ){\n        return (first.charAt(1) + 3) == last.charAt(1);\n      } else if ( first.charAt(1)==last.charAt(1) ){\n        return (first.charAt(0) + 3) == last.charAt(0);\n      }\n      return false;\n    }\n  }\n  static class TetroidO extends Identifier\n  {\n    char getName(){  return 'O'; }\n    boolean match(TreeSet<String> items)\n    {\n      String[] normalized = normalize(items);\n      return Arrays.deepEquals(normalized, new String[]{ \"33\", \"34\", \"43\", \"44\" } );\n    }\n  }\n  static abstract class TetriodLTS extends Identifier\n  {\n    abstract String[][] getCandidates();\n    boolean match(TreeSet<String> items)\n    {\n      String[] normalized = normalize( items );\n      for( String[] candidate : getCandidates() ){\n        if ( Arrays.deepEquals( normalized, candidate )){\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n  static class TetriodT extends TetriodLTS\n  {\n    char getName(){  return 'T'; }\n    static final String[][] candidates = {\n        new String[]{ \"33\", \"43\", \"44\", \"53\" },\n        new String[]{ \"33\", \"42\", \"43\", \"53\" },\n    };\n    String[][] getCandidates(){  return candidates; }\n    boolean match(TreeSet<String> items)\n    {\n      return super.match( items ) || super.match( exchange_xy( items) );\n    }\n  }\n  static class TetriodS extends TetriodLTS\n  {\n    char getName(){  return 'S'; }\n    static final String[][] candidates = {\n        new String[]{ \"33\", \"34\", \"44\", \"45\" },\n        new String[]{ \"33\", \"42\", \"43\", \"52\" },\n    };\n    String[][] getCandidates(){  return candidates; }\n    boolean match(TreeSet<String> items)\n    {\n      return super.match( items ) || super.match( exchange_xy( items) );\n    }\n  }\n  static class TetriodL extends TetriodLTS\n  {\n    char getName(){  return 'L'; }\n    static final String[][] candidates = {\n        new String[]{ \"33\", \"34\", \"35\", \"45\" },\n        new String[]{ \"33\", \"43\", \"52\", \"53\" },\n        new String[]{ \"33\", \"43\", \"44\", \"45\" },\n        new String[]{ \"33\", \"34\", \"43\", \"53\" },\n    };\n    String[][] getCandidates(){  return candidates; }\n    boolean match(TreeSet<String> items)\n    {\n      return super.match( items ) || super.match( exchange_xy( items) );\n    }\n  }\n  static final Identifier[] identifiers={\n      new TetroidI(),\n      new TetroidO(),\n      new TetriodT(),\n      new TetriodS(),\n      new TetriodL(),\n  };\n  char getName( String input )\n  {\n    TreeSet<String> items = new TreeSet<String>(Arrays.asList(input.split(\",\")));\n    if ( items.size() == 4 ){\n      for( Identifier i : identifiers){\n        if ( i.match( items)){\n          return i.getName();\n        }\n      }\n    }\n    return '-';\n  }\n}\n\n\n\u7d9a\u3044\u3066 groovy + spock \u306b\u3088\u308b\u30c6\u30b9\u30c8\n\nTetroidSpec.groovy\n@Grab('org.spockframework:spock-core:0.7-groovy-2.0')\n\nimport spock.lang.*\n\nclass TetroidSpec extends Specification {\n  @Unroll\n  def \"#input should be #expected-type tetromino.\"() {\n   given:\n    Tetroid m = new Tetroid()\n   expect:\n    m.getName(input) == expected\n   where:\n    input         | expected\n    \"12,10,21,11\" | 'T'\n    \"89,99,79,88\" | 'T'\n    \"32,41,43,42\" | 'T'\n    \"27,16,36,26\" | 'T'\n    \"07,17,06,05\" | 'L'\n    \"21,41,31,40\" | 'L'\n    \"62,74,73,72\" | 'L'\n    \"84,94,74,75\" | 'L'\n    \"48,49,57,47\" | 'L'\n    \"69,89,79,68\" | 'L'\n    \"90,82,91,92\" | 'L'\n    \"13,23,03,24\" | 'L'\n    \"43,54,53,42\" | 'S'\n    \"95,86,76,85\" | 'S'\n    \"72,73,84,83\" | 'S'\n    \"42,33,32,23\" | 'S'\n    \"66,57,67,58\" | 'S'\n    \"63,73,52,62\" | 'S'\n    \"76,68,77,67\" | 'S'\n    \"12,11,22,01\" | 'S'\n    \"00,01,10,11\" | 'O'\n    \"68,57,58,67\" | 'O'\n    \"72,62,61,71\" | 'O'\n    \"25,24,15,14\" | 'O'\n    \"24,22,25,23\" | 'I'\n    \"51,41,21,31\" | 'I'\n    \"64,63,62,65\" | 'I'\n    \"49,69,59,79\" | 'I'\n  }\n  @Unroll\n  def \"#input should not be a tetromino.\"() {\n   given:\n    Tetroid m = new Tetroid()\n   expect:\n    m.getName(input) == expected\n   where:\n    input         | expected\n    \"55,55,55,55\" | '-'\n    \"05,26,06,25\" | '-'\n    \"03,11,13,01\" | '-'\n    \"11,20,00,21\" | '-'\n    \"84,95,94,86\" | '-'\n    \"36,56,45,35\" | '-'\n    \"41,33,32,43\" | '-'\n    \"75,94,84,95\" | '-'\n    \"27,39,28,37\" | '-'\n    \"45,34,54,35\" | '-'\n    \"24,36,35,26\" | '-'\n    \"27,27,27,27\" | '-'\n    \"55,44,44,45\" | '-'\n    \"70,73,71,71\" | '-'\n    \"67,37,47,47\" | '-'\n    \"43,45,41,42\" | '-'\n    \"87,57,97,67\" | '-'\n    \"49,45,46,48\" | '-'\n    \"63,63,52,72\" | '-'\n    \"84,86,84,95\" | '-'\n    \"61,60,62,73\" | '-'\n    \"59,79,69,48\" | '-'\n    \"55,57,77,75\" | '-'\n  }\n}\n\n\n\u5b9f\u88c5\u306e\u65b9\u91dd\u306f\u3001\u4eca\u307e\u3067\u51fa\u3066\u3044\u308b\u3082\u306e\u3068\u591a\u5c11\u306a\u308a\u3068\u3082\u5909\u3048\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u9069\u5f53\u306b\u30bd\u30fc\u30c8\u3057\u3066\u6700\u521d\u306b\u6765\u305f\u3082\u306e\u3092 (3, 3) \u306b\u3059\u308b\u3068\u3044\u3046\u6b63\u898f\u5316\u3092\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3002\n(0,0) \u306b\u3059\u308b\u3068\u8ca0\u306e\u5024\u304c\u51fa\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u305d\u308c\u3092\u907f\u3051\u308b\u305f\u3081\u306b (3, 3) \u3067\u3002\n\u56de\u8ee2\u306f\u3084\u3081\u3066\u3001xy\u306e\u5165\u308c\u66ff\u3048\u3060\u3051\u3092\u5b9f\u88c5\u3002\n\u3042\u3068\u3001\u305b\u3063\u304b\u304f java \u306a\u306e\u3067\u30af\u30e9\u30b9\u3068\u304b\u7d99\u627f\u3068\u304b\u4f7f\u3063\u305f\u308a\u3002\uff08\u3068\u306f\u3001ruby \u306e\u6642\u306b\u306f\u601d\u308f\u306a\u3044\u4e0d\u601d\u8b70\uff09\njava \u5074\u306f 138\u884c\u3002\n\u3053\u306e\u65b9\u91dd\u3067\u3082\u3082\u3046\u5c11\u3057\u77ed\u304f\u306a\u308b\u6c17\u304c\u3057\u3066\u306a\u3089\u306a\u3044\u3002\nspock \u306e\u65b9\u306f\u4f7f\u3044\u3084\u3059\u304f\u3066\u7d20\u6674\u3089\u3057\u3044\u3093\u3060\u304c\u3001\u4f55\u3092\u3069\u3046\u3057\u305f\u3089\u3053\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u5b9f\u73fe\u3067\u304d\u308b\u306e\u304b\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u3044\u3002\u3053\u3046\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u306b\u306f\u4f55\u3092\u8aad\u3081\u3070\u3044\u3044\u3093\u3060\u308d\u3046\u3002\n\u3057\u304b\u3057\u3002\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u53ef\u80fd\u306a\u8a00\u8a9e\u306b groovy \u304c\u5165\u3063\u3066\u306a\u3044\u306e\u4f55\u3068\u304b\u306a\u308a\u307e\u305b\u3093\u304b\uff1f\uff1e\u4e2d\u306e\u4eba\n\n\u8ffd\u8a18\uff1a\u4e0a\u8a18\u306e\u3088\u3046\u306b\u66f8\u3044\u305f\u3068\u3053\u308d\u3001\u4e0b\u8a18\u30b3\u30e1\u30f3\u30c8\u306e\u3068\u304a\u308a\u3001\u5bfe\u5fdc\u3057\u3066\u304f\u3060\u3055\u3044\u307e\u3057\u305f\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4e0a\u306b\u3042\u308b\u30bd\u30fc\u30b9\u3082 \"groovy:\" \u306b\u5909\u66f4\u3002\n\u7b2c\u56db\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u89e3\u7b54\u4f8b\u3002\n\u554f\u984c\u306f\nhttp://nabetani.sakura.ne.jp/hena/ord4tetroid/\n\u7d9a\u3005\u96c6\u307e\u3063\u3066\u3044\u308b\u56de\u7b54\u3092\u773a\u3081\u3066\u3044\u305f\u3089\u3001\nhttp://d.hatena.ne.jp/y_sumida/\n\u304c\u76ee\u306b\u6b62\u307e\u308a\u3001Spock \u3044\u3044\u306a\u3041\u3068\u601d\u3044\u3001\u30c6\u30b9\u30c8\u306f spock \u3067\u3002\n\n\u307e\u305a\u306f\u672c\u4f53\u3002\n\n```java:Tetroid.java\nimport java.util.Collection;\nimport java.util.TreeSet;\nimport java.util.Arrays;\n\npublic class Tetroid\n{\n  static abstract class Identifier\n  {\n    abstract char getName();\n    abstract boolean match(TreeSet<String> items);\n    static String dec( String a, String b )\n    {\n      StringBuilder r = new StringBuilder();\n      for( int i=0 ; i<a.length() ; ++i ){\n        r.append( (char)( a.charAt(i) - b.charAt(i) + '3') );\n      }\n      return r.toString();\n    }\n    static String[] normalize( Collection<String> v )\n    {\n      String[] result = new String[v.size()];\n      int ix=0;\n      for( String s : v ){\n        result[ix] = dec( s, v.iterator().next() );\n        ++ix;\n      }\n      return result;\n    }\n    TreeSet<String> exchange_xy( TreeSet<String> items )\n    {\n      TreeSet<String> result = new TreeSet<String>();\n      for( String s : items ){\n        StringBuilder b = new StringBuilder( s );\n        result.add( b.reverse().toString() );\n      }\n      return result;\n    }\n  }\n  static class TetroidI extends Identifier\n  {\n    char getName(){  return 'I'; }\n    boolean match(TreeSet<String> items)\n    {\n      String first = items.first();\n      String last = items.last();\n      System.err.flush();\n      if ( first.charAt(0)==last.charAt(0) ){\n        return (first.charAt(1) + 3) == last.charAt(1);\n      } else if ( first.charAt(1)==last.charAt(1) ){\n        return (first.charAt(0) + 3) == last.charAt(0);\n      }\n      return false;\n    }\n  }\n  static class TetroidO extends Identifier\n  {\n    char getName(){  return 'O'; }\n    boolean match(TreeSet<String> items)\n    {\n      String[] normalized = normalize(items);\n      return Arrays.deepEquals(normalized, new String[]{ \"33\", \"34\", \"43\", \"44\" } );\n    }\n  }\n  static abstract class TetriodLTS extends Identifier\n  {\n    abstract String[][] getCandidates();\n    boolean match(TreeSet<String> items)\n    {\n      String[] normalized = normalize( items );\n      for( String[] candidate : getCandidates() ){\n        if ( Arrays.deepEquals( normalized, candidate )){\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n  static class TetriodT extends TetriodLTS\n  {\n    char getName(){  return 'T'; }\n    static final String[][] candidates = {\n        new String[]{ \"33\", \"43\", \"44\", \"53\" },\n        new String[]{ \"33\", \"42\", \"43\", \"53\" },\n    };\n    String[][] getCandidates(){  return candidates; }\n    boolean match(TreeSet<String> items)\n    {\n      return super.match( items ) || super.match( exchange_xy( items) );\n    }\n  }\n  static class TetriodS extends TetriodLTS\n  {\n    char getName(){  return 'S'; }\n    static final String[][] candidates = {\n        new String[]{ \"33\", \"34\", \"44\", \"45\" },\n        new String[]{ \"33\", \"42\", \"43\", \"52\" },\n    };\n    String[][] getCandidates(){  return candidates; }\n    boolean match(TreeSet<String> items)\n    {\n      return super.match( items ) || super.match( exchange_xy( items) );\n    }\n  }\n  static class TetriodL extends TetriodLTS\n  {\n    char getName(){  return 'L'; }\n    static final String[][] candidates = {\n        new String[]{ \"33\", \"34\", \"35\", \"45\" },\n        new String[]{ \"33\", \"43\", \"52\", \"53\" },\n        new String[]{ \"33\", \"43\", \"44\", \"45\" },\n        new String[]{ \"33\", \"34\", \"43\", \"53\" },\n    };\n    String[][] getCandidates(){  return candidates; }\n    boolean match(TreeSet<String> items)\n    {\n      return super.match( items ) || super.match( exchange_xy( items) );\n    }\n  }\n  static final Identifier[] identifiers={\n      new TetroidI(),\n      new TetroidO(),\n      new TetriodT(),\n      new TetriodS(),\n      new TetriodL(),\n  };\n  char getName( String input )\n  {\n    TreeSet<String> items = new TreeSet<String>(Arrays.asList(input.split(\",\")));\n    if ( items.size() == 4 ){\n      for( Identifier i : identifiers){\n        if ( i.match( items)){\n          return i.getName();\n        }\n      }\n    }\n    return '-';\n  }\n}\n```\n\n\u7d9a\u3044\u3066 groovy + spock \u306b\u3088\u308b\u30c6\u30b9\u30c8\n\n```groovy:TetroidSpec.groovy\n@Grab('org.spockframework:spock-core:0.7-groovy-2.0')\n\nimport spock.lang.*\n\nclass TetroidSpec extends Specification {\n  @Unroll\n  def \"#input should be #expected-type tetromino.\"() {\n   given:\n    Tetroid m = new Tetroid()\n   expect:\n    m.getName(input) == expected\n   where:\n    input         | expected\n    \"12,10,21,11\" | 'T'\n    \"89,99,79,88\" | 'T'\n    \"32,41,43,42\" | 'T'\n    \"27,16,36,26\" | 'T'\n    \"07,17,06,05\" | 'L'\n    \"21,41,31,40\" | 'L'\n    \"62,74,73,72\" | 'L'\n    \"84,94,74,75\" | 'L'\n    \"48,49,57,47\" | 'L'\n    \"69,89,79,68\" | 'L'\n    \"90,82,91,92\" | 'L'\n    \"13,23,03,24\" | 'L'\n    \"43,54,53,42\" | 'S'\n    \"95,86,76,85\" | 'S'\n    \"72,73,84,83\" | 'S'\n    \"42,33,32,23\" | 'S'\n    \"66,57,67,58\" | 'S'\n    \"63,73,52,62\" | 'S'\n    \"76,68,77,67\" | 'S'\n    \"12,11,22,01\" | 'S'\n    \"00,01,10,11\" | 'O'\n    \"68,57,58,67\" | 'O'\n    \"72,62,61,71\" | 'O'\n    \"25,24,15,14\" | 'O'\n    \"24,22,25,23\" | 'I'\n    \"51,41,21,31\" | 'I'\n    \"64,63,62,65\" | 'I'\n    \"49,69,59,79\" | 'I'\n  }\n  @Unroll\n  def \"#input should not be a tetromino.\"() {\n   given:\n    Tetroid m = new Tetroid()\n   expect:\n    m.getName(input) == expected\n   where:\n    input         | expected\n    \"55,55,55,55\" | '-'\n    \"05,26,06,25\" | '-'\n    \"03,11,13,01\" | '-'\n    \"11,20,00,21\" | '-'\n    \"84,95,94,86\" | '-'\n    \"36,56,45,35\" | '-'\n    \"41,33,32,43\" | '-'\n    \"75,94,84,95\" | '-'\n    \"27,39,28,37\" | '-'\n    \"45,34,54,35\" | '-'\n    \"24,36,35,26\" | '-'\n    \"27,27,27,27\" | '-'\n    \"55,44,44,45\" | '-'\n    \"70,73,71,71\" | '-'\n    \"67,37,47,47\" | '-'\n    \"43,45,41,42\" | '-'\n    \"87,57,97,67\" | '-'\n    \"49,45,46,48\" | '-'\n    \"63,63,52,72\" | '-'\n    \"84,86,84,95\" | '-'\n    \"61,60,62,73\" | '-'\n    \"59,79,69,48\" | '-'\n    \"55,57,77,75\" | '-'\n  }\n}\n```\n\n\u5b9f\u88c5\u306e\u65b9\u91dd\u306f\u3001\u4eca\u307e\u3067\u51fa\u3066\u3044\u308b\u3082\u306e\u3068\u591a\u5c11\u306a\u308a\u3068\u3082\u5909\u3048\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u9069\u5f53\u306b\u30bd\u30fc\u30c8\u3057\u3066\u6700\u521d\u306b\u6765\u305f\u3082\u306e\u3092 (3, 3) \u306b\u3059\u308b\u3068\u3044\u3046\u6b63\u898f\u5316\u3092\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3002\n(0,0) \u306b\u3059\u308b\u3068\u8ca0\u306e\u5024\u304c\u51fa\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u305d\u308c\u3092\u907f\u3051\u308b\u305f\u3081\u306b (3, 3) \u3067\u3002\n\u56de\u8ee2\u306f\u3084\u3081\u3066\u3001xy\u306e\u5165\u308c\u66ff\u3048\u3060\u3051\u3092\u5b9f\u88c5\u3002\n\u3042\u3068\u3001\u305b\u3063\u304b\u304f java \u306a\u306e\u3067\u30af\u30e9\u30b9\u3068\u304b\u7d99\u627f\u3068\u304b\u4f7f\u3063\u305f\u308a\u3002\uff08\u3068\u306f\u3001ruby \u306e\u6642\u306b\u306f\u601d\u308f\u306a\u3044\u4e0d\u601d\u8b70\uff09\njava \u5074\u306f 138\u884c\u3002\n\u3053\u306e\u65b9\u91dd\u3067\u3082\u3082\u3046\u5c11\u3057\u77ed\u304f\u306a\u308b\u6c17\u304c\u3057\u3066\u306a\u3089\u306a\u3044\u3002\n\nspock \u306e\u65b9\u306f\u4f7f\u3044\u3084\u3059\u304f\u3066\u7d20\u6674\u3089\u3057\u3044\u3093\u3060\u304c\u3001\u4f55\u3092\u3069\u3046\u3057\u305f\u3089\u3053\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u5b9f\u73fe\u3067\u304d\u308b\u306e\u304b\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u3044\u3002\u3053\u3046\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u306b\u306f\u4f55\u3092\u8aad\u3081\u3070\u3044\u3044\u3093\u3060\u308d\u3046\u3002\n\n\u3057\u304b\u3057\u3002\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u53ef\u80fd\u306a\u8a00\u8a9e\u306b groovy \u304c\u5165\u3063\u3066\u306a\u3044\u306e\u4f55\u3068\u304b\u306a\u308a\u307e\u305b\u3093\u304b\uff1f\uff1e\u4e2d\u306e\u4eba\n\n---\n\n\u8ffd\u8a18\uff1a\u4e0a\u8a18\u306e\u3088\u3046\u306b\u66f8\u3044\u305f\u3068\u3053\u308d\u3001\u4e0b\u8a18\u30b3\u30e1\u30f3\u30c8\u306e\u3068\u304a\u308a\u3001\u5bfe\u5fdc\u3057\u3066\u304f\u3060\u3055\u3044\u307e\u3057\u305f\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4e0a\u306b\u3042\u308b\u30bd\u30fc\u30b9\u3082 \"groovy:\" \u306b\u5909\u66f4\u3002\n", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg", "Java", "Groovy2.0", "spock0.7"]}