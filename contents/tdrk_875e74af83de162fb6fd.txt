{"context": " More than 1 year has passed since last update.\u7b2c3\u7ae0\u306e\u5f8c\u534a\u306e\u554f\u984c\u3092\u89e3\u3044\u305f\u8a18\u9332\u3002\n\n 25. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u62bd\u51fa\n\n\u8a18\u4e8b\u4e2d\u306b\u542b\u307e\u308c\u308b\u300c\u57fa\u790e\u60c5\u5831\u300d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u5024\u3092\u62bd\u51fa\u3057\uff0c\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u683c\u7d0d\u305b\u3088\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport re\nimport json\n\ndef pass_string(string):\n    return string\n\ndef fundamental_data(file, func):\n    response = []\n    data = {}\n    start = re.compile(r\"\\{\\{\u57fa\u790e\u60c5\u5831\")\n    end = re.compile(r\"\\}\\}\")\n    row = re.compile(r\"^\\s?\\|?\\s?(.+?)\\s?=(.*)\\|?\")\n    flag = False\n\n    pre_key = None\n    for line in file:\n        if start.match(line):\n            flag = True\n            continue\n\n        if end.match(line):\n            flag = False\n\n        if flag:\n            l = row.match(line)\n\n            if l:\n                data[l.group(1).strip()] = func(l.group(2).strip())\n                pre_key = l.group(1).strip()\n\n            else:\n                m = re.match(r\"(.*)\\}\\}$\", line)\n\n                if m:\n                    data[pre_key] += func(m.group(1).strip())\n                    flag = False\n\n                else:\n                    data[pre_key] += func(line.strip())\n        else:\n            if len(data) > 0:\n                response.append(data.copy())\n                data.clear()\n\n    return response\n\nif __name__ == \"__main__\":\n    inputfile = 'jawiki-england.txt'\n    outputfile = 'jawiki-england_fundamental.json'\n    f = open(inputfile)\n    res = fundamental_data(f, pass_string)\n    with open(outputfile, 'w') as g:\n        json.dump(res, g, ensure_ascii=False)\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_fundamental.json\u306b\u51fa\u529b)\n\n\u57fa\u790e\u60c5\u5831\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f {{\u57fa\u790e\u60c5\u5831 \u304b\u3089\u3001}} \u307e\u3067\u3067\u3042\u308b\u3002\n \u4e00\u90e8\u4f8b\u5916\u304c\u3042\u308a\u3001}} \u304c\u6539\u884c\u3055\u308c\u305a\u884c\u672b\u306b\u3042\u308b\u5834\u5408\u304c\u898b\u3089\u308c\u305f\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u306b\u5bfe\u3057\u3066\u4f8b\u5916\u51e6\u7406\u3092\u304b\u3051\u3066\u3044\u308b\u3002\n(\u3053\u306e\u5f8c\u306e\u554f\u984c\u306e\u305f\u3081\u306bfundamental_data\u95a2\u6570\u306e2\u3064\u76ee\u306e\u5f15\u6570\u306b\u95a2\u6570\u3092\u6e21\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u308b)\n\n 26. \u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u306e\u9664\u53bb\n\n25\u306e\u51e6\u7406\u6642\u306b\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u306e\u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\uff08\u5f31\u3044\u5f37\u8abf\uff0c\u5f37\u8abf\uff0c\u5f37\u3044\u5f37\u8abf\u306e\u3059\u3079\u3066\uff09\u3092\u9664\u53bb\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u305b\u3088\uff08\u53c2\u8003: \u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868\uff09\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport re\nimport json\nimport problem25\n\ndef remove_emphasis(string):\n    emphasis = re.compile(r\"''('*)(.+)''\\1\")\n    return emphasis.sub(r\"\\2\", string)\n\nif __name__ == \"__main__\":\n    inputfile = 'jawiki-england.txt'\n    outputfile = 'jawiki-england_fundamental-rmEmpha.json'\n    f = open(inputfile)\n    res = problem25.fundamental_data(f, remove_emphasis)\n    with open(outputfile, 'w') as g:\n        json.dump(res, g, ensure_ascii=False)\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_fundamental-rmEmpha.json\u306b\u51fa\u529b)\n\n\u524d\u554f\u984c\u3067\u4f5c\u6210\u3057\u305ffundamental_data\u95a2\u6570\u306b\u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u53d6\u308a\u9664\u304f\u95a2\u6570\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\n\u6b63\u898f\u8868\u73fe\u5185\u306e \\number \u306f group \u30e1\u30bd\u30c3\u30c9\u3068\u540c\u69d8\u306b number\u756a\u76ee\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u8868\u3059\u3002\n\n 27. \u5185\u90e8\u30ea\u30f3\u30af\u306e\u9664\u53bb\n\n26\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u306e\u5185\u90e8\u30ea\u30f3\u30af\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u9664\u53bb\u3057\uff0c\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u305b\u3088\uff08\u53c2\u8003: \u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868\uff09\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport re\nimport json\nimport problem25\nimport problem26\n\ndef remove_internalLink(string):\n    internallink = re.compile(r\"\\[\\[((.+?)\\|)?(.+?)\\]\\]\")\n    emphasis_removed = problem26.remove_emphasis(string)\n    return internallink.sub(r\"\\3\", emphasis_removed)\n\nif __name__ == \"__main__\":\n    inputfile = 'jawiki-england.txt'\n    outputfile = 'jawiki-england_fundamental-rmEmpha-rmLink.json'\n    f = open(inputfile)\n    res = problem25.fundamental_data(f, remove_internalLink)\n    with open(outputfile, 'w') as g:\n        json.dump(res, g, ensure_ascii=False)\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_fundamental-rmEmpha-rmLink.json\u306b\u51fa\u529b)\n\n\u524d\u554f\u984c\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\u3001\u5185\u90e8\u30ea\u30f3\u30af\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3082\u9664\u53bb\u3059\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3002\n\n 28. MediaWiki\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u306e\u9664\u53bb\n\n27\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u53ef\u80fd\u306a\u9650\u308a\u9664\u53bb\u3057\uff0c\u56fd\u306e\u57fa\u672c\u60c5\u5831\u3092\u6574\u5f62\u305b\u3088\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport re\nimport json\nimport problem25\nimport problem26\nimport problem27\n\ndef remove_markup(string):\n    markups = [\n        re.compile(r\"\\[https?://[a-zA-Z0-9\\./]+\\s(.+)?\\]\"),\n        re.compile(r\"#REDIRECT\\s?(.+)\"),\n        re.compile(r\"<!--\\s?(.+)\\s?-->\"),\n        re.compile(r\"\\{\\{.*[Ll]ang\\|[a-zA-Z\\-]+\\|(.+)\\}\\}\"),\n        re.compile(r\"(.*)<ref.+(</ref>)?>\"),\n        re.compile(r\"(.*?)<br\\s?/?>\"),\n        re.compile(r\"<[a-z]+.*>(.*?)</[a-z]+>\")\n    ]\n    removed_string = problem27.remove_internalLink(string)\n    for m in markups:\n        removed_string = m.sub(r\"\\1\", removed_string)\n    return removed_string\n\nif __name__ == \"__main__\":\n    inputfile = 'jawiki-england.txt'\n    outputfile = 'jawiki-england_fundamental-rmMUs.json'\n    f = open(inputfile)\n    res = problem25.fundamental_data(f, remove_markup)\n    with open(outputfile, 'w') as g:\n        json.dump(res, g, ensure_ascii=False)\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_fundamental-rmMUs.json\u306b\u51fa\u529b)\n\n\u898b\u3064\u3051\u3089\u308c\u305f\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3068\u3057\u3066\u306f\u3001\u5916\u90e8\u30ea\u30f3\u30af\u3001\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3001\u30b3\u30e1\u30f3\u30c8\u3001\u8a00\u8a9e\u60c5\u5831\u3001HTML\u6587\u3067\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u9664\u53bb\u3059\u308b\u3088\u3046\u306b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3002\n\n 29. \u56fd\u65d7\u753b\u50cf\u306eURL\u3092\u53d6\u5f97\u3059\u308b\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5185\u5bb9\u3092\u5229\u7528\u3057\uff0c\u56fd\u65d7\u753b\u50cf\u306eURL\u3092\u53d6\u5f97\u305b\u3088\uff0e\uff08\u30d2\u30f3\u30c8: MediaWiki API\u306eimageinfo\u3092\u547c\u3073\u51fa\u3057\u3066\uff0c\u30d5\u30a1\u30a4\u30eb\u53c2\u7167\u3092URL\u306b\u5909\u63db\u3059\u308c\u3070\u3088\u3044\uff09\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport requests\nimport json\n\ninputfile = 'jawiki-england_fundamental-rmMUs.json'\noutputfile = 'jawiki-england_nationalflags.txt'\n\nwith open(inputfile, 'r') as f:\n    template = json.load(f)\n\nwikipedia_api = \"http://ja.wikipedia.org/w/api.php?\"\nprop = {\n    'action': \"query\",\n    'prop': \"imageinfo\",\n    'iiprop': \"url\",\n    'format': \"json\",\n    'formatversion': '2',\n    'utf8': '',\n    'continue': ''\n}\n\ng = open(outputfile, \"w\")\n\nfor country in template:\n    if u'\u56fd\u65d7\u753b\u50cf' in country:\n        countryname = country[u'\u7565\u540d']\n        filename = country[u'\u56fd\u65d7\u753b\u50cf']\n        prop['titles'] = \"Image:\" + filename\n        res = requests.get(url=wikipedia_api, params=prop)\n        datum = json.loads(res.text)\n        try:\n            file_url = datum['query']['pages'][0]['imageinfo'][0]['url']\n        except:\n            print(datum)\n            break\n        print(filename, file_url)\n        g.write(countryname.encode('utf8').replace('|', ''))\n        g.write(\", %s\\n\" % file_url)\ng.close()\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_nationalflags.txt\u306b\u51fa\u529b)\n\nrequests\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3057\u3066API\u3092\u53e9\u304f\u3002\n\n\n\u7b2c3\u7ae0\u306e\u5f8c\u534a\u306e\u554f\u984c\u3092\u89e3\u3044\u305f\u8a18\u9332\u3002\n\n## <i class=\"fa fa-leaf\"></i> 25. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u62bd\u51fa\n> \u8a18\u4e8b\u4e2d\u306b\u542b\u307e\u308c\u308b\u300c\u57fa\u790e\u60c5\u5831\u300d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u5024\u3092\u62bd\u51fa\u3057\uff0c\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u683c\u7d0d\u305b\u3088\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport re\nimport json\n\ndef pass_string(string):\n    return string\n\ndef fundamental_data(file, func):\n    response = []\n    data = {}\n    start = re.compile(r\"\\{\\{\u57fa\u790e\u60c5\u5831\")\n    end = re.compile(r\"\\}\\}\")\n    row = re.compile(r\"^\\s?\\|?\\s?(.+?)\\s?=(.*)\\|?\")\n    flag = False\n\n    pre_key = None\n    for line in file:\n        if start.match(line):\n            flag = True\n            continue\n\n        if end.match(line):\n            flag = False\n\n        if flag:\n            l = row.match(line)\n\n            if l:\n                data[l.group(1).strip()] = func(l.group(2).strip())\n                pre_key = l.group(1).strip()\n\n            else:\n                m = re.match(r\"(.*)\\}\\}$\", line)\n\n                if m:\n                    data[pre_key] += func(m.group(1).strip())\n                    flag = False\n\n                else:\n                    data[pre_key] += func(line.strip())\n        else:\n            if len(data) > 0:\n                response.append(data.copy())\n                data.clear()\n\n    return response\n\nif __name__ == \"__main__\":\n    inputfile = 'jawiki-england.txt'\n    outputfile = 'jawiki-england_fundamental.json'\n    f = open(inputfile)\n    res = fundamental_data(f, pass_string)\n    with open(outputfile, 'w') as g:\n        json.dump(res, g, ensure_ascii=False)\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_fundamental.json\u306b\u51fa\u529b)\n```\n\n\u57fa\u790e\u60c5\u5831\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f ``{{\u57fa\u790e\u60c5\u5831`` \u304b\u3089\u3001``}}`` \u307e\u3067\u3067\u3042\u308b\u3002\n<i class=\"fa fa-exclamation-triangle\"></i> \u4e00\u90e8\u4f8b\u5916\u304c\u3042\u308a\u3001``}}`` \u304c\u6539\u884c\u3055\u308c\u305a\u884c\u672b\u306b\u3042\u308b\u5834\u5408\u304c\u898b\u3089\u308c\u305f\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u306b\u5bfe\u3057\u3066\u4f8b\u5916\u51e6\u7406\u3092\u304b\u3051\u3066\u3044\u308b\u3002\n(\u3053\u306e\u5f8c\u306e\u554f\u984c\u306e\u305f\u3081\u306bfundamental_data\u95a2\u6570\u306e2\u3064\u76ee\u306e\u5f15\u6570\u306b\u95a2\u6570\u3092\u6e21\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u308b)\n\n\n\n## <i class=\"fa fa-leaf\"></i> 26. \u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u306e\u9664\u53bb\n> 25\u306e\u51e6\u7406\u6642\u306b\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u306e\u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\uff08\u5f31\u3044\u5f37\u8abf\uff0c\u5f37\u8abf\uff0c\u5f37\u3044\u5f37\u8abf\u306e\u3059\u3079\u3066\uff09\u3092\u9664\u53bb\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u305b\u3088\uff08\u53c2\u8003: \u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868\uff09\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport re\nimport json\nimport problem25\n\ndef remove_emphasis(string):\n    emphasis = re.compile(r\"''('*)(.+)''\\1\")\n    return emphasis.sub(r\"\\2\", string)\n\nif __name__ == \"__main__\":\n    inputfile = 'jawiki-england.txt'\n    outputfile = 'jawiki-england_fundamental-rmEmpha.json'\n    f = open(inputfile)\n    res = problem25.fundamental_data(f, remove_emphasis)\n    with open(outputfile, 'w') as g:\n        json.dump(res, g, ensure_ascii=False)\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_fundamental-rmEmpha.json\u306b\u51fa\u529b)\n```\n\n\u524d\u554f\u984c\u3067\u4f5c\u6210\u3057\u305ffundamental_data\u95a2\u6570\u306b\u5f37\u8abf\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u53d6\u308a\u9664\u304f\u95a2\u6570\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\n\u6b63\u898f\u8868\u73fe\u5185\u306e `\\number` \u306f `group` \u30e1\u30bd\u30c3\u30c9\u3068\u540c\u69d8\u306b `number`\u756a\u76ee\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u8868\u3059\u3002\n\n\n## <i class=\"fa fa-leaf\"></i> 27. \u5185\u90e8\u30ea\u30f3\u30af\u306e\u9664\u53bb\n> 26\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u306e\u5185\u90e8\u30ea\u30f3\u30af\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u9664\u53bb\u3057\uff0c\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u305b\u3088\uff08\u53c2\u8003: \u30de\u30fc\u30af\u30a2\u30c3\u30d7\u65e9\u898b\u8868\uff09\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport re\nimport json\nimport problem25\nimport problem26\n\ndef remove_internalLink(string):\n    internallink = re.compile(r\"\\[\\[((.+?)\\|)?(.+?)\\]\\]\")\n    emphasis_removed = problem26.remove_emphasis(string)\n    return internallink.sub(r\"\\3\", emphasis_removed)\n\nif __name__ == \"__main__\":\n    inputfile = 'jawiki-england.txt'\n    outputfile = 'jawiki-england_fundamental-rmEmpha-rmLink.json'\n    f = open(inputfile)\n    res = problem25.fundamental_data(f, remove_internalLink)\n    with open(outputfile, 'w') as g:\n        json.dump(res, g, ensure_ascii=False)\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_fundamental-rmEmpha-rmLink.json\u306b\u51fa\u529b)\n```\n\n\u524d\u554f\u984c\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\u3001\u5185\u90e8\u30ea\u30f3\u30af\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3082\u9664\u53bb\u3059\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3002\n\n\n## <i class=\"fa fa-leaf\"></i> 28. MediaWiki\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u306e\u9664\u53bb\n> 27\u306e\u51e6\u7406\u306b\u52a0\u3048\u3066\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5024\u304b\u3089MediaWiki\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u53ef\u80fd\u306a\u9650\u308a\u9664\u53bb\u3057\uff0c\u56fd\u306e\u57fa\u672c\u60c5\u5831\u3092\u6574\u5f62\u305b\u3088\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport re\nimport json\nimport problem25\nimport problem26\nimport problem27\n\ndef remove_markup(string):\n    markups = [\n        re.compile(r\"\\[https?://[a-zA-Z0-9\\./]+\\s(.+)?\\]\"),\n        re.compile(r\"#REDIRECT\\s?(.+)\"),\n        re.compile(r\"<!--\\s?(.+)\\s?-->\"),\n        re.compile(r\"\\{\\{.*[Ll]ang\\|[a-zA-Z\\-]+\\|(.+)\\}\\}\"),\n        re.compile(r\"(.*)<ref.+(</ref>)?>\"),\n        re.compile(r\"(.*?)<br\\s?/?>\"),\n        re.compile(r\"<[a-z]+.*>(.*?)</[a-z]+>\")\n    ]\n    removed_string = problem27.remove_internalLink(string)\n    for m in markups:\n        removed_string = m.sub(r\"\\1\", removed_string)\n    return removed_string\n\nif __name__ == \"__main__\":\n    inputfile = 'jawiki-england.txt'\n    outputfile = 'jawiki-england_fundamental-rmMUs.json'\n    f = open(inputfile)\n    res = problem25.fundamental_data(f, remove_markup)\n    with open(outputfile, 'w') as g:\n        json.dump(res, g, ensure_ascii=False)\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_fundamental-rmMUs.json\u306b\u51fa\u529b)\n```\n\n\u898b\u3064\u3051\u3089\u308c\u305f\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3068\u3057\u3066\u306f\u3001\u5916\u90e8\u30ea\u30f3\u30af\u3001\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3001\u30b3\u30e1\u30f3\u30c8\u3001\u8a00\u8a9e\u60c5\u5831\u3001HTML\u6587\u3067\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u9664\u53bb\u3059\u308b\u3088\u3046\u306b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3002\n\n\n## <i class=\"fa fa-leaf\"></i> 29. \u56fd\u65d7\u753b\u50cf\u306eURL\u3092\u53d6\u5f97\u3059\u308b\n> \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5185\u5bb9\u3092\u5229\u7528\u3057\uff0c\u56fd\u65d7\u753b\u50cf\u306eURL\u3092\u53d6\u5f97\u305b\u3088\uff0e\uff08\u30d2\u30f3\u30c8: MediaWiki API\u306eimageinfo\u3092\u547c\u3073\u51fa\u3057\u3066\uff0c\u30d5\u30a1\u30a4\u30eb\u53c2\u7167\u3092URL\u306b\u5909\u63db\u3059\u308c\u3070\u3088\u3044\uff09\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport requests\nimport json\n\ninputfile = 'jawiki-england_fundamental-rmMUs.json'\noutputfile = 'jawiki-england_nationalflags.txt'\n\nwith open(inputfile, 'r') as f:\n    template = json.load(f)\n\nwikipedia_api = \"http://ja.wikipedia.org/w/api.php?\"\nprop = {\n    'action': \"query\",\n    'prop': \"imageinfo\",\n    'iiprop': \"url\",\n    'format': \"json\",\n    'formatversion': '2',\n    'utf8': '',\n    'continue': ''\n}\n\ng = open(outputfile, \"w\")\n\nfor country in template:\n    if u'\u56fd\u65d7\u753b\u50cf' in country:\n        countryname = country[u'\u7565\u540d']\n        filename = country[u'\u56fd\u65d7\u753b\u50cf']\n        prop['titles'] = \"Image:\" + filename\n        res = requests.get(url=wikipedia_api, params=prop)\n        datum = json.loads(res.text)\n        try:\n            file_url = datum['query']['pages'][0]['imageinfo'][0]['url']\n        except:\n            print(datum)\n            break\n        print(filename, file_url)\n        g.write(countryname.encode('utf8').replace('|', ''))\n        g.write(\", %s\\n\" % file_url)\ng.close()\n\n#=> (\u30d5\u30a1\u30a4\u30ebjawiki-england_nationalflags.txt\u306b\u51fa\u529b)\n```\n\nrequests\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3057\u3066API\u3092\u53e9\u304f\u3002\n\n\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n", "tags": ["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "NLP", "Python"]}