{"context": " More than 1 year has passed since last update.\n\n\u52d5\u6a5f\n\u4ed5\u4e8b\u3067\u3068\u3042\u308bDSL\u304b\u3089\u5225\u306eDSL\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u306b\u8feb\u3089\u308c\u3001pyparsing\u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u307e\u305a\u306fpyparsing\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306bPL/0\u3092\u4f8b\u984c\u306b\u3057\u3066\u30d1\u30fc\u30b5\u30fc\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\nPL/0\u3063\u3066\u3069\u3093\u306a\u8a00\u8a9e?\nPL/0\u306fPascal\u306b\u4f3c\u305f\u6587\u6cd5\u306e\u8a00\u8a9e\u3067\u3059\u3002\u6559\u80b2\u7528\u306e\u305f\u3081\u6975\u5c0f\u306e\u8a00\u8a9e\u4ed5\u69d8\u3067\u3059\u3002\u5b9f\u306f\u50d5\u3082\u5927\u5b66\u4e09\u5e74\u306e\u6642\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5b9f\u7fd2\u306e\u6559\u6750\u3068\u3057\u3066\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\nWikipedia\u306b\u3042\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\nex1.pl0\nVAR x, squ;\n\nPROCEDURE square;\nBEGIN\n   squ := x * x\nEND;\n\nBEGIN\n   x := 1;\n   WHILE x <= 10 DO\n   BEGIN\n      CALL square;\n      ! squ;\n      x := x + 1;\n   END\nEND.\n\n\n\n\u6587\u6cd5\n\u30d1\u30fc\u30b5\u30fc\u3092\u66f8\u304f\u305f\u3081\u306b\u306f\u6587\u6cd5\u306e\u5b9a\u7fa9\u304c\u5fc5\u8981\u3067\u3059\u3002\u6587\u6cd5\u306e\u8868\u8a18\u6cd5\u306e\u4e00\u3064\u306bBNF\u304c\u3042\u308a\u307e\u3059\u3002\u4e0b\u306ePL/0\u306e(E)BNF\u306f\u30ea\u30f3\u30af\u5148\u306eWikipedia\u304b\u3089\u9802\u3044\u3066\u304d\u307e\u3057\u305f\u3002BNF\u306f\u7d42\u7aef\u8a18\u53f7\u3068\u751f\u6210\u898f\u5247\u304b\u3089\u6210\u308a\u7acb\u3063\u3066\u3044\u307e\u3059\u3002\nWikipedia\u306b\u3042\u3063\u305fPL/0\u306eBNF\u306b\u306fident(\u8b58\u5225\u5b50)\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u4e88\u7d04\u8a9e\u306f\u5c0f\u6587\u5b57\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5148\u307b\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u30d1\u30fc\u30b9\u3059\u308b\u306b\u306f\u5927\u6587\u5b57\u306e\u5bfe\u5fdc\u304c\u5fc5\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\npl0_bnf.txt\nident = alpha { alpha | number | '_' } .\n\nprogram = block \".\" .\n\nblock = [ \"const\" ident \"=\" number {\",\" ident \"=\" number} \";\"]\n        [ \"var\" ident {\",\" ident} \";\"]\n        { \"procedure\" ident \";\" block \";\" } statement .\nstatement = [ ident \":=\" expression | \"call\" ident |\n            \"begin\" statement {\";\" statement } \"end\" |\n            \"if\" condition \"then\" statement |\n            \"while\" condition \"do\" statement ].\ncondition = \"odd\" expression |\n            expression (\"=\"|\"#\"|\"<\"|\"<=\"|\">\"|\">=\") expression .\nexpression = [ \"+\"|\"-\"] term { (\"+\"|\"-\") term}.\nterm = factor {(\"*\"|\"/\") factor}.\nfactor = ident | number | \"(\" expression \")\".\n\n\n\n\u30d1\u30fc\u30b5\u30fc\n\u6587\u6cd5\u3092\u5b8c\u5168\u306b\u6e80\u305f\u3059\u30d1\u30fc\u30b5\u30fc\u3092\u3044\u304d\u306a\u308a\u66f8\u3053\u3046\u3068\u3059\u308b\u3068\u5927\u5909\u3067\u3059\u3002\u3069\u3046\u3057\u305f\u3089\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\u7d42\u7aef\u8a18\u53f7\u306b\u8fd1\u3044\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u3001\u6700\u5c0f\u69cb\u6210\u5358\u4f4d\u6bce\u306b\u5b9f\u88c5\u3068\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u3001\u3042\u3068\u306f\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u7a4d\u307f\u4e0a\u3052\u308b\u65b9\u91dd\u304c\u826f\u3044\u3067\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u4e88\u7d04\u8a9e(reserved keyword)\u3001\u8b58\u5225\u5b50(identifier)\u3001\u5f0f(expression), \u6587(statement)\u3001\u30d6\u30ed\u30c3\u30af\u3001\u5ba3\u8a00\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3044\u3046\u9806\u306b\u306a\u308a\u307e\u3059\u3002\u610f\u5916\u306a\u3053\u3068\u306b\u5909\u6570\u306e\u5ba3\u8a00\u306a\u3069\u306e\u57fa\u672c\u306f\u6700\u5f8c\u306e\u65b9\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5148\u306b\u65b9\u91dd\u3092\u7acb\u3066\u308b\u306e\u306f\u3068\u3066\u3082\u5927\u5207\u3067\u3059\u3002 \u3042\u308b\u751f\u6210\u898f\u5247\u3092\u5b9f\u88c5\n\u3057\u3066\u3044\u308b\u3068\u304d\u672a\u5b9f\u88c5\u306e\u751f\u6210\u898f\u5247\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u3001\u305d\u308c\u3092\u5b9f\u88c5\u3057\u3066\u307e\u305f\u5143\u306b\u623b\u3063\u3066\u3068\u3084\u3063\u3066\u3044\u308b\u3068\u3001\u5165\u308c\u5b50\u3084\u518d\u5e30\u7684\u53c2\u7167\u306e\u5965\u6df1\u304f\u306b\u30cf\u30de\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u6b21\u306e\u9806\u3067\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nkeyword\nident\nterm, factor, expression\ncondition\nassignment (ident := expression\u306e\u3053\u3068)\ncall\nif, then\nwhile, do\nstatement, begin-end\nconst\nvar\nprocedure\nblock\nprogram\n\n\nreserved keyword - \u4e88\u7d04\u8a9e\nPL/0\u306e\u4e88\u7d04\u8a9e\u306fBNF\u304b\u3089\u8aad\u307f\u53d6\u308b\u9650\u308a\u3001const, var, procedure, call, begin, end, if, then, while, do, odd\u3067\u3059\u3002pyparsing\u3067\u306fKeyword()\u3067\u4e88\u7d04\u8a9e\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3092\u533a\u5225\u3057\u306a\u3044\u4e88\u7d04\u8a9e\u306fCaselessKeyword()\u3067\u5ba3\u8a00\u3057\u307e\u3059\u3002\nCONST = CaselessKeyword('CONST')\nVAR = CaselessKeyword('VAR')\n :\n\n\u3068\u66f8\u304f\u4ee3\u308f\u308a\u306b\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u306e\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3082\u3046\u3061\u3087\u3063\u3068DRY\u306a\u66f8\u304d\u65b9\u306f\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b...\nfrom pyparsing import CaselessKeyword, MatchFirst\n(CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD) = map(CaselessKeyword,\n\"CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD\".replace(\",\",\"\").split())\n\nkeyword = MatchFirst((CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD))\n\n\u7d50\u679c\u306f\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306b\u95a2\u4fc2\u306a\u304f\u3001CONST\u3068\u8a8d\u8b58\u3057\u307e\u3057\u305f\u3002\n>>> print keyword.parseString('CONST')\n['CONST']\n>>> print keyword.parseString('const')\n['CONST']\n\n\nidentifier - \u8b58\u5225\u5b50\n\u8b58\u5225\u5b50\u306e\u5b9a\u7fa9\u306f\u3001\u5148\u982d\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u7d9a\u3044\u3066\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u307e\u305f\u306f\u6570\u5b57\u3068_\u304c\u7e70\u308a\u8fd4\u3055\u308c\u308b\u3068\u3044\u3046\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u306e\u3067\u3001\u305d\u308c\u306b\u5f93\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u307e\u305f\u4e88\u7d04\u8a9e\u306f\u8b58\u5225\u5b50\u306b\u306a\u308c\u306a\u3044\u306e\u3067~keyword\u3092\u5148\u982d\u306b\u66f8\u304d\u307e\u3059\u3002\nfrom pyparsing import Word, alphas, alphanums\nident = ~keyword + Word(alphas, alphanums+\"_\")\n\n\u6709\u52b9\u306a\u8b58\u5225\u5b50\u3001\u7121\u52b9\u306a\u8b58\u5225\u5b50\u3001\u4e88\u7d04\u8a9e\u3092\u305d\u308c\u305e\u308c\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u3001\u6709\u52b9\u306a\u8b58\u5225\u5b50\u3060\u3051\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n>>> print repr(ident.parseString('valid_id'))\n(['valid_id'], {})\n>>> print repr(ident.parseString('0123bad_id'))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/dist-packages/pyparsing.py\", line 1041, in parseString\n    raise exc\npyparsing.ParseException: Expected W:(abcd...,abcd...) (at char 0), (line:1, col:1)\n>>> print repr(ident.parseString('CONST'))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/dist-packages/pyparsing.py\", line 1041, in parseString\n    raise exc\npyparsing.ParseException: Found unwanted token, {\"CONST\" | \"VAR\" | \"PROCEDURE\" | \"CALL\" | \"BEGIN\" | \"END\" | \"IF\" | \"THEN\" | \"WHILE\" | \"DO\" | \"ODD\"} (at char 0), (line:1, col:1)\n\n\nexpression - \u5f0f\nPL/0\u306e\u5f0f\u306f\u6b21\u306eBNF\u3067\u5b8c\u7d50\u3057\u3066\u3044\u307e\u3059\u3002\nexpression = [ \"+\"|\"-\"] term { (\"+\"|\"-\") term}.\nterm = factor {(\"*\"|\"/\") factor}.\nfactor = ident | number | \"(\" expression \")\"\n\npyparsing\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u751f\u6210\u898f\u5247\u304c\u518d\u5e30\u7684\u306b\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306fForward\u3092\u4f7f\u3063\u3066\u307e\u305a\u7bb1\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3042\u3068\u304b\u3089\u751f\u6210\u898f\u5247\u3092\u30bb\u30c3\u30c8\u3059\u308b\u306b\u306f<<\u3092\u4f7f\u3044\u307e\u3059\u3002oneOf\u3092\u3064\u304b\u3063\u3066\u3044\u308b\u306e\u306f\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u304c\u540c\u3058\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\n<<\u3068\u305b\u305a\u306b\u3001\u3044\u3064\u3082\u306e\u30ce\u30ea\u3067\u3046\u3063\u304b\u308a=\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u4e00\u898b\u539f\u56e0\u4e0d\u660e\u306e\u30a8\u30e9\u30fc\u3068\u306a\u308a\u30c7\u30d0\u30c3\u30b0\u306b\u60a9\u307e\u3055\u308c\u307e\u3059\u3002\u307e\u305f<<\u3092\u4f7f\u3046\u3068\u304d\u306f\u53f3\u8fba\u3092()\u3067\u62ec\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002x << y | z\u3068x << (y | z)\u306f\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u306b\u8d77\u56e0\u3057\u3066\u8a08\u7b97\u7d50\u679c\u304c\u3053\u3068\u306a\u306a\u308b\u305f\u3081\u3002\u5f53\u7136\u5229\u7528\u3057\u305f\u3044\u306e\u306f\u5f8c\u8005\u3067\u3059\u3002\u3053\u308c\u3082\u30d1\u30fc\u30b9\u6642\u306b\u539f\u56e0\u4e0d\u660e\u306e\u30a8\u30e9\u30fc\u3068\u306a\u308a\u3001\u30c7\u30d0\u30c3\u30b0\u306b\u60a9\u307e\u3055\u308c\u307e\u3059\u3002pyparsing\u306e\u4ed5\u69d8\u306a\u306e\u3067\u3001\u305d\u3046\u3044\u3046\u3082\u306e\u3060\u3068\u601d\u3063\u3066\u6c17\u3092\u3064\u3051\u308b\u3057\u304b\u306a\u3044\u3067\u3059\u3002\nnumber = Regex(r\"\\d+(\\.\\d*)?([eE][+-]?\\d+)?\")\nterm = Forward()\nfactor = Forward()\nexpression = Optional(oneOf(\"+ -\")) + term + ZeroOrMore( oneOf(\"+ -\") + term)\nterm << factor + ZeroOrMore(oneOf(\"* /\") + factor)\nfactor << ident | number | \"(\" + expression + \")\"\n\n\u3067\u306f\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u6b63\u3057\u304f\u30d1\u30fc\u30b9\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n>>> expression.parseString('123')\n(['123'], {})\n>>> expression.parseString('123+456')\n(['123', '+', '456'], {})\n>>> expression.parseString('(x+y)*z')\n(['(', 'x', '+', 'y', ')', '*', 'z'], {})\n\n\ncondition - \u6761\u4ef6\u5f0f\nPL/0\u306f\u306a\u305c\u304b\"odd\"\u306a\u308b\u5358\u9805\u6f14\u7b97\u5b50\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306f\u666e\u901a\u306e\u4e8c\u9805\u6f14\u7b97\u5b50\u3070\u304b\u308a\u3067\u3059\u3002pyparsing\u306b\u306finfixNotation\u3068\u3044\u3046\u6761\u4ef6\u5f0f\u30d1\u30fc\u30b5\u30fc\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306fBNF\u306b\u5fe0\u5b9f\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\ncondition = \"odd\" expression |\n            expression (\"=\"|\"#\"|\"<\"|\"<=\"|\">\"|\">=\") expression .\n\n\u5b9f\u88c5\u306f\u6b21\u306e\u3068\u304a\u308a\u3002\ncondition = ODD + expression | expression + oneOf('= # < <= > >=') + expression\n\n\u30c6\u30b9\u30c8\n>>> condition.parseString('odd 1')\n(['ODD', '1'], {})\n>>> condition.parseString('3 <= 1')\n(['3', '<=', '1'], {})\n\n\nassign - \u4ee3\u5165\u6587\n\u4ee3\u5165\u306eBNF\u306fident \":=\" expression\u3067\u3059\u3002ident\u3082expression\u3082\u5b9f\u88c5\u6e08\u307f\u306a\u306e\u3067\u7c21\u5358\u3067\u3059\u306d\u3002\nassign_statement = ident + \":=\" + expression\n\n\ncall - \u624b\u7d9a\u304d\u547c\u3073\u51fa\u3057\u6587\n\u540c\u3058\u3053\u3068\u306e\u7e70\u308a\u8fd4\u3057\u306a\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u306f\u5b9f\u88c5\u306e\u307f\u3067\u884c\u304d\u307e\u3059\u3002\ncall_statement = CALL + ident\n\n\nif-then - IF\u6587\nIF\u6587\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u6587\u5168\u4f53\u3092\u8868\u3059statement\u306f\u307e\u3060\u51fa\u3066\u304d\u3066\u3044\u306a\u3044\u306e\u3067Forward\u3067\u5ba3\u8a00\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nstatement = Forward()\nif_statement = IF + condition + THEN + statement\n\n\nwhile-do - WHILE\u6587\nwhile_statement = WHILE + condition + DO + statement\n\n\nstatement - \u6587\n\u3084\u3063\u3068\u30d1\u30fc\u30c4\u304c\u305d\u308d\u3063\u305f\u306e\u3067\u3001\u6700\u5f8c\u306b\u6587\u751f\u6210\u898f\u5247\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002BNF\u306f\u6b21\u306e\u3068\u304a\u308a\u3002\nstatement = [ ident \":=\" expression | \"call\" ident |\n            \"begin\" statement {\";\" statement } \"end\" |\n            \"if\" condition \"then\" statement |\n            \"while\" condition \"do\" statement ].\n\n\u305d\u306e\u307e\u307epyparsing\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\nstatement = Optional(assign_statement\n                   | call_statement\n                   | BEGIN + statement + ZeroOrMore(\";\" + statement) + END\n                   | if_statement\n                   | while_statement\n                   )\n\n\nconst - \u5b9a\u6570\u5ba3\u8a00\n\u75b2\u308c\u3066\u304d\u305f\u306e\u3067\u5b9f\u88c5\u3060\u3051\u3002\nconst = CONST + ident + \"=\" + number + ZeroOrMore(\",\" + ident + \"=\" + number) + \";\"\n\n\nvar - \u5909\u6570\u5ba3\u8a00\nvar = VAR + ident + ZeroOrMore(\",\" + ident) + \";\"\n\n\nprocedure -  \u624b\u7d9a\u304d\u5ba3\u8a00\nBNF\u306e\u3053\u306e\u90e8\u5206\"procedure\" ident \";\" block \";\"\u3060\u3051\u306b\u6ce8\u76ee\u3057\u307e\u3059\u3002\u5916\u5074\u306e\u7e70\u308a\u8fd4\u3057\u306a\u3069\u306f\u30d6\u30ed\u30c3\u30af\u306e\u5b9f\u88c5\u6642\u306b\u884c\u3044\u307e\u3059\u3002\nblock = Forward()\nprocedure = PROCEDURE + ident + \";\" + block + \";\"\n\n\nblock\nblock << Optional(const) + Optional(var) + ZeroOrMore(procedure) + statement\n\n\nprogram\n\u3053\u308c\u304c\u6700\u4e0a\u4f4d\u306e\u751f\u6210\u898f\u5247\u3067\u3059\u3002\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\nprogram = block + \".\"\n\n\n\u30c6\u30b9\u30c8\n\u5192\u982d\u306b\u63b2\u8f09\u3057\u305f\u3001\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n$ python pl0_parser.py ex1.pl0\nTraceback (most recent call last):\n  File \"pl0_parser.py\", line 64, in <module>\n    print program.parseString(txt)\n  File \"/usr/lib/python2.7/dist-packages/pyparsing.py\", line 1041, in parseString\n    raise exc\npyparsing.ParseException: Expected \".\" (at char 59), (line:8, col:1)\n\n\u901a\u308a\u307e\u305b\u3093\u306d\u3002\u306a\u3093\u3067\u3067\u3057\u3087\u3046\u3002line:8, col:1\u3068\u8a00\u3063\u3066\u3044\u308b\u306e\u3067BEGIN-END\u306e\u30d1\u30fc\u30b9\u304c\u51fa\u6765\u305a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u306e\".\"\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u8fba\u308a\u3082\u3046\u5c11\u3057\u89aa\u5207\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u305b\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u78ba\u8a8d\u306e\u305f\u3081statement\u30d1\u30fc\u30b5\u30fc\u3060\u3051\u3067\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\n>>> statement.parseString('''\\\n... BEGIN\n...    x := 1;\n...    WHILE x <= 10 DO\n...    BEGIN\n...       CALL square;\n...       ! squ;\n...       x := x + 1;\n...    END\n... END\n... ''')\n([], {})\n\n\u7d50\u679c\u304c\u7a7a\u3067\u78ba\u304b\u306b\u5931\u6557\u3057\u3066\u3044\u307e\u3059\u3002\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u306a\u3044\u5931\u6557\u306f\u30c7\u30d0\u30c3\u30b0\u304c\u9762\u5012\u3067\u3059\u3002\u3088\u304f\u898b\u308b\u3068! squ;\u3068\u3044\u3046\u898b\u6163\u308c\u306a\u3044\u6587\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u62e1\u5f35PL/0\u306e\u6587\u6cd5\u3067\u3001\u4eca\u56de\u306e\u5b9f\u88c5\u306eBNF\u3067\u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u524a\u9664\u3057\u3066\u3082\u3046\u4e00\u5ea6\u8d70\u3089\u305b\u307e\u3059\u3002\n$ python pl0_parser.py ex1.pl0\n['VAR', 'x', ',', 'squ', ';', 'PROCEDURE', 'square', ';', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', ';', 'BEGIN', 'x', ':=', '1', ';', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', ';', 'x', ':=', 'x', '+', '1', ';', 'END', 'END', '.']\n\n\u3046\u307e\u304f\u884c\u304d\u307e\u3057\u305f\uff01\n\u6b21\u56de\u306f\u672c\u683c\u7684\u306b\u69cb\u6587\u6728(AST)\u3092\u4f5c\u3063\u3066\u30b3\u30fc\u30c9\u751f\u6210\u3092\u3084\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u6700\u5f8c\u306b\u4eca\u307e\u3067\u5b9f\u88c5\u3057\u3066\u304d\u305f\u30d1\u30fc\u30b5\u30fc\u306e\u30bd\u30fc\u30b9\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\n\npl0_parser.py\nfrom pyparsing import CaselessKeyword, MatchFirst, Word, alphas, alphanums, Forward, Optional, oneOf, ZeroOrMore, Regex\n\n\n# 1. reserved keyword\n(CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD) = map(CaselessKeyword,\n\"CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD\".replace(\",\", \"\").split())\nkeyword = MatchFirst((CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD))\n\n# 2. identifier\nident = ~keyword + Word(alphas, alphanums + \"_\")\n\n# 3. expression\nnumber = Regex(r\"\\d+(\\.\\d*)?([eE][+-]?\\d+)?\")\nterm = Forward()\nfactor = Forward()\nexpression = Optional(oneOf(\"+ -\")) + term + ZeroOrMore(oneOf(\"+ -\") + term)\nterm << (factor + ZeroOrMore(oneOf(\"* /\") + factor))\nfactor << (ident | number | \"(\" + expression + \")\")\n\n# 4. condition\ncondition = ODD + expression | expression + oneOf('= # < <= > >=') + expression\n\n# 5. assignment\nassign_statement = ident + \":=\" + expression\n\n# 6. call\ncall_statement = CALL + ident\n\n# 7. if-then\nstatement = Forward()\nif_statement = IF + condition + THEN + statement\n\n# 8. while-do\nwhile_statement = WHILE + condition + DO + statement\n\n# 9. statement\nstatement << Optional(assign_statement\n                      | call_statement\n                      | BEGIN + statement + ZeroOrMore(\";\" + statement) + END\n                      | if_statement\n                      | while_statement\n)\n\n# 10. const\nconst = CONST + ident + \"=\" + number + ZeroOrMore(\",\" + ident + \"=\" + number) + \";\"\n\n# 11. var\nvar = VAR + ident + ZeroOrMore(\",\" + ident) + \";\"\n\n# 12. procedure\nblock = Forward()\nprocedure = PROCEDURE + ident + \";\" + block + \";\"\n\n# 13. block\nblock << Optional(const) + Optional(var) + ZeroOrMore(procedure) + statement\n\n# 14. program\nprogram = block + \".\"\n\nif __name__ == '__main__':\n    import sys\n    with open(sys.argv[1], 'r') as fp:\n        txt = fp.read()\n        print program.parseString(txt)\n\n\n# \u52d5\u6a5f\n\n\u4ed5\u4e8b\u3067\u3068\u3042\u308bDSL\u304b\u3089\u5225\u306eDSL\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u306b\u8feb\u3089\u308c\u3001[pyparsing](http://pyparsing.wikispaces.com/)\u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u307e\u305a\u306fpyparsing\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b[PL/0](http://ja.wikipedia.org/wiki/PL/0)\u3092\u4f8b\u984c\u306b\u3057\u3066\u30d1\u30fc\u30b5\u30fc\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n# PL/0\u3063\u3066\u3069\u3093\u306a\u8a00\u8a9e?\n\nPL/0\u306fPascal\u306b\u4f3c\u305f\u6587\u6cd5\u306e\u8a00\u8a9e\u3067\u3059\u3002\u6559\u80b2\u7528\u306e\u305f\u3081\u6975\u5c0f\u306e\u8a00\u8a9e\u4ed5\u69d8\u3067\u3059\u3002\u5b9f\u306f\u50d5\u3082\u5927\u5b66\u4e09\u5e74\u306e\u6642\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5b9f\u7fd2\u306e\u6559\u6750\u3068\u3057\u3066\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\nWikipedia\u306b\u3042\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n```pascal:ex1.pl0\nVAR x, squ;\n\nPROCEDURE square;\nBEGIN\n   squ := x * x\nEND;\n\nBEGIN\n   x := 1;\n   WHILE x <= 10 DO\n   BEGIN\n      CALL square;\n      ! squ;\n      x := x + 1;\n   END\nEND.\n```\n\n# \u6587\u6cd5\n\u30d1\u30fc\u30b5\u30fc\u3092\u66f8\u304f\u305f\u3081\u306b\u306f\u6587\u6cd5\u306e\u5b9a\u7fa9\u304c\u5fc5\u8981\u3067\u3059\u3002\u6587\u6cd5\u306e\u8868\u8a18\u6cd5\u306e\u4e00\u3064\u306b[BNF](http://ja.wikipedia.org/wiki/%E3%83%90%E3%83%83%E3%82%AB%E3%82%B9%E3%83%BB%E3%83%8A%E3%82%A6%E3%82%A2%E8%A8%98%E6%B3%95)\u304c\u3042\u308a\u307e\u3059\u3002\u4e0b\u306ePL/0\u306e(E)BNF\u306f\u30ea\u30f3\u30af\u5148\u306eWikipedia\u304b\u3089\u9802\u3044\u3066\u304d\u307e\u3057\u305f\u3002BNF\u306f\u7d42\u7aef\u8a18\u53f7\u3068\u751f\u6210\u898f\u5247\u304b\u3089\u6210\u308a\u7acb\u3063\u3066\u3044\u307e\u3059\u3002\n\nWikipedia\u306b\u3042\u3063\u305fPL/0\u306eBNF\u306b\u306fident(\u8b58\u5225\u5b50)\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n\u4e88\u7d04\u8a9e\u306f\u5c0f\u6587\u5b57\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5148\u307b\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u30d1\u30fc\u30b9\u3059\u308b\u306b\u306f\u5927\u6587\u5b57\u306e\u5bfe\u5fdc\u304c\u5fc5\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n```bnf:pl0_bnf.txt\nident = alpha { alpha | number | '_' } .\n\nprogram = block \".\" .\n\nblock = [ \"const\" ident \"=\" number {\",\" ident \"=\" number} \";\"]\n        [ \"var\" ident {\",\" ident} \";\"]\n        { \"procedure\" ident \";\" block \";\" } statement .\nstatement = [ ident \":=\" expression | \"call\" ident |\n            \"begin\" statement {\";\" statement } \"end\" |\n            \"if\" condition \"then\" statement |\n            \"while\" condition \"do\" statement ].\ncondition = \"odd\" expression |\n            expression (\"=\"|\"#\"|\"<\"|\"<=\"|\">\"|\">=\") expression .\nexpression = [ \"+\"|\"-\"] term { (\"+\"|\"-\") term}.\nterm = factor {(\"*\"|\"/\") factor}.\nfactor = ident | number | \"(\" expression \")\".\n```\n\n# \u30d1\u30fc\u30b5\u30fc\n\n\u6587\u6cd5\u3092\u5b8c\u5168\u306b\u6e80\u305f\u3059\u30d1\u30fc\u30b5\u30fc\u3092\u3044\u304d\u306a\u308a\u66f8\u3053\u3046\u3068\u3059\u308b\u3068\u5927\u5909\u3067\u3059\u3002\u3069\u3046\u3057\u305f\u3089\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\u7d42\u7aef\u8a18\u53f7\u306b\u8fd1\u3044\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u3001\u6700\u5c0f\u69cb\u6210\u5358\u4f4d\u6bce\u306b\u5b9f\u88c5\u3068\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u3001\u3042\u3068\u306f\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u7a4d\u307f\u4e0a\u3052\u308b\u65b9\u91dd\u304c\u826f\u3044\u3067\u3059\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u4e88\u7d04\u8a9e(reserved keyword)\u3001\u8b58\u5225\u5b50(identifier)\u3001\u5f0f(expression), \u6587(statement)\u3001\u30d6\u30ed\u30c3\u30af\u3001\u5ba3\u8a00\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3044\u3046\u9806\u306b\u306a\u308a\u307e\u3059\u3002\u610f\u5916\u306a\u3053\u3068\u306b\u5909\u6570\u306e\u5ba3\u8a00\u306a\u3069\u306e\u57fa\u672c\u306f\u6700\u5f8c\u306e\u65b9\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n**\u5148\u306b\u65b9\u91dd\u3092\u7acb\u3066\u308b\u306e\u306f\u3068\u3066\u3082\u5927\u5207\u3067\u3059\u3002** \u3042\u308b\u751f\u6210\u898f\u5247\u3092\u5b9f\u88c5\n\u3057\u3066\u3044\u308b\u3068\u304d\u672a\u5b9f\u88c5\u306e\u751f\u6210\u898f\u5247\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u3001\u305d\u308c\u3092\u5b9f\u88c5\u3057\u3066\u307e\u305f\u5143\u306b\u623b\u3063\u3066\u3068\u3084\u3063\u3066\u3044\u308b\u3068\u3001\u5165\u308c\u5b50\u3084\u518d\u5e30\u7684\u53c2\u7167\u306e\u5965\u6df1\u304f\u306b\u30cf\u30de\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u6b21\u306e\u9806\u3067\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n1. keyword\n2. ident\n3. term, factor, expression\n4. condition\n5. assignment (ident := expression\u306e\u3053\u3068)\n6. call\n7. if, then\n8. while, do\n9. statement, begin-end\n10. const\n11. var\n12. procedure\n13. block\n14. program\n\n## reserved keyword - \u4e88\u7d04\u8a9e\nPL/0\u306e\u4e88\u7d04\u8a9e\u306fBNF\u304b\u3089\u8aad\u307f\u53d6\u308b\u9650\u308a\u3001const, var, procedure, call, begin, end, if, then, while, do, odd\u3067\u3059\u3002pyparsing\u3067\u306f`Keyword()`\u3067\u4e88\u7d04\u8a9e\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3092\u533a\u5225\u3057\u306a\u3044\u4e88\u7d04\u8a9e\u306fCaselessKeyword()\u3067\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\n```py\nCONST = CaselessKeyword('CONST')\nVAR = CaselessKeyword('VAR')\n :\n```\n\n\u3068\u66f8\u304f\u4ee3\u308f\u308a\u306b\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u306e\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3082\u3046\u3061\u3087\u3063\u3068DRY\u306a\u66f8\u304d\u65b9\u306f\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b...\n\n```py\nfrom pyparsing import CaselessKeyword, MatchFirst\n(CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD) = map(CaselessKeyword,\n\"CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD\".replace(\",\",\"\").split())\n\nkeyword = MatchFirst((CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD))\n```\n\n\u7d50\u679c\u306f\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306b\u95a2\u4fc2\u306a\u304f\u3001CONST\u3068\u8a8d\u8b58\u3057\u307e\u3057\u305f\u3002\n\n```\n>>> print keyword.parseString('CONST')\n['CONST']\n>>> print keyword.parseString('const')\n['CONST']\n```\n\n## identifier - \u8b58\u5225\u5b50\n\u8b58\u5225\u5b50\u306e\u5b9a\u7fa9\u306f\u3001\u5148\u982d\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u7d9a\u3044\u3066\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u307e\u305f\u306f\u6570\u5b57\u3068_\u304c\u7e70\u308a\u8fd4\u3055\u308c\u308b\u3068\u3044\u3046\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u306e\u3067\u3001\u305d\u308c\u306b\u5f93\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u307e\u305f\u4e88\u7d04\u8a9e\u306f\u8b58\u5225\u5b50\u306b\u306a\u308c\u306a\u3044\u306e\u3067`~keyword`\u3092\u5148\u982d\u306b\u66f8\u304d\u307e\u3059\u3002\n\n```\nfrom pyparsing import Word, alphas, alphanums\nident = ~keyword + Word(alphas, alphanums+\"_\")\n```\n\n\u6709\u52b9\u306a\u8b58\u5225\u5b50\u3001\u7121\u52b9\u306a\u8b58\u5225\u5b50\u3001\u4e88\u7d04\u8a9e\u3092\u305d\u308c\u305e\u308c\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u3001\u6709\u52b9\u306a\u8b58\u5225\u5b50\u3060\u3051\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n```\n>>> print repr(ident.parseString('valid_id'))\n(['valid_id'], {})\n>>> print repr(ident.parseString('0123bad_id'))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/dist-packages/pyparsing.py\", line 1041, in parseString\n    raise exc\npyparsing.ParseException: Expected W:(abcd...,abcd...) (at char 0), (line:1, col:1)\n>>> print repr(ident.parseString('CONST'))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/dist-packages/pyparsing.py\", line 1041, in parseString\n    raise exc\npyparsing.ParseException: Found unwanted token, {\"CONST\" | \"VAR\" | \"PROCEDURE\" | \"CALL\" | \"BEGIN\" | \"END\" | \"IF\" | \"THEN\" | \"WHILE\" | \"DO\" | \"ODD\"} (at char 0), (line:1, col:1)\n```\n\n## expression - \u5f0f\n\nPL/0\u306e\u5f0f\u306f\u6b21\u306eBNF\u3067\u5b8c\u7d50\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\nexpression = [ \"+\"|\"-\"] term { (\"+\"|\"-\") term}.\nterm = factor {(\"*\"|\"/\") factor}.\nfactor = ident | number | \"(\" expression \")\"\n```\n\npyparsing\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u751f\u6210\u898f\u5247\u304c\u518d\u5e30\u7684\u306b\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306f`Forward`\u3092\u4f7f\u3063\u3066\u307e\u305a\u7bb1\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3042\u3068\u304b\u3089\u751f\u6210\u898f\u5247\u3092\u30bb\u30c3\u30c8\u3059\u308b\u306b\u306f`<<`\u3092\u4f7f\u3044\u307e\u3059\u3002oneOf\u3092\u3064\u304b\u3063\u3066\u3044\u308b\u306e\u306f\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u304c\u540c\u3058\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\n\n<<\u3068\u305b\u305a\u306b\u3001\u3044\u3064\u3082\u306e\u30ce\u30ea\u3067\u3046\u3063\u304b\u308a=\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u4e00\u898b\u539f\u56e0\u4e0d\u660e\u306e\u30a8\u30e9\u30fc\u3068\u306a\u308a\u30c7\u30d0\u30c3\u30b0\u306b\u60a9\u307e\u3055\u308c\u307e\u3059\u3002\u307e\u305f<<\u3092\u4f7f\u3046\u3068\u304d\u306f\u53f3\u8fba\u3092()\u3067\u62ec\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002`x << y | z`\u3068`x << (y | z)`\u306f\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u306b\u8d77\u56e0\u3057\u3066\u8a08\u7b97\u7d50\u679c\u304c\u3053\u3068\u306a\u306a\u308b\u305f\u3081\u3002\u5f53\u7136\u5229\u7528\u3057\u305f\u3044\u306e\u306f\u5f8c\u8005\u3067\u3059\u3002\u3053\u308c\u3082\u30d1\u30fc\u30b9\u6642\u306b\u539f\u56e0\u4e0d\u660e\u306e\u30a8\u30e9\u30fc\u3068\u306a\u308a\u3001\u30c7\u30d0\u30c3\u30b0\u306b\u60a9\u307e\u3055\u308c\u307e\u3059\u3002pyparsing\u306e\u4ed5\u69d8\u306a\u306e\u3067\u3001\u305d\u3046\u3044\u3046\u3082\u306e\u3060\u3068\u601d\u3063\u3066\u6c17\u3092\u3064\u3051\u308b\u3057\u304b\u306a\u3044\u3067\u3059\u3002\n\n```py\nnumber = Regex(r\"\\d+(\\.\\d*)?([eE][+-]?\\d+)?\")\nterm = Forward()\nfactor = Forward()\nexpression = Optional(oneOf(\"+ -\")) + term + ZeroOrMore( oneOf(\"+ -\") + term)\nterm << factor + ZeroOrMore(oneOf(\"* /\") + factor)\nfactor << ident | number | \"(\" + expression + \")\"\n```\n\n\u3067\u306f\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u6b63\u3057\u304f\u30d1\u30fc\u30b9\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n```\n>>> expression.parseString('123')\n(['123'], {})\n>>> expression.parseString('123+456')\n(['123', '+', '456'], {})\n>>> expression.parseString('(x+y)*z')\n(['(', 'x', '+', 'y', ')', '*', 'z'], {})\n```\n\n## condition - \u6761\u4ef6\u5f0f\nPL/0\u306f\u306a\u305c\u304b\"odd\"\u306a\u308b\u5358\u9805\u6f14\u7b97\u5b50\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306f\u666e\u901a\u306e\u4e8c\u9805\u6f14\u7b97\u5b50\u3070\u304b\u308a\u3067\u3059\u3002pyparsing\u306b\u306finfixNotation\u3068\u3044\u3046\u6761\u4ef6\u5f0f\u30d1\u30fc\u30b5\u30fc\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306fBNF\u306b\u5fe0\u5b9f\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```\ncondition = \"odd\" expression |\n            expression (\"=\"|\"#\"|\"<\"|\"<=\"|\">\"|\">=\") expression .\n```\n\n\u5b9f\u88c5\u306f\u6b21\u306e\u3068\u304a\u308a\u3002\n\n```py\ncondition = ODD + expression | expression + oneOf('= # < <= > >=') + expression\n```\n\n\u30c6\u30b9\u30c8\n\n```\n>>> condition.parseString('odd 1')\n(['ODD', '1'], {})\n>>> condition.parseString('3 <= 1')\n(['3', '<=', '1'], {})\n```\n\n## assign - \u4ee3\u5165\u6587\n\u4ee3\u5165\u306eBNF\u306f`ident \":=\" expression`\u3067\u3059\u3002ident\u3082expression\u3082\u5b9f\u88c5\u6e08\u307f\u306a\u306e\u3067\u7c21\u5358\u3067\u3059\u306d\u3002\n\n```py\nassign_statement = ident + \":=\" + expression\n```\n\n## call - \u624b\u7d9a\u304d\u547c\u3073\u51fa\u3057\u6587\n\u540c\u3058\u3053\u3068\u306e\u7e70\u308a\u8fd4\u3057\u306a\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u306f\u5b9f\u88c5\u306e\u307f\u3067\u884c\u304d\u307e\u3059\u3002\n\n```py\ncall_statement = CALL + ident\n```\n\n## if-then - IF\u6587\n\nIF\u6587\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u6587\u5168\u4f53\u3092\u8868\u3059statement\u306f\u307e\u3060\u51fa\u3066\u304d\u3066\u3044\u306a\u3044\u306e\u3067Forward\u3067\u5ba3\u8a00\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py\nstatement = Forward()\nif_statement = IF + condition + THEN + statement\n```\n\n## while-do - WHILE\u6587\n\n```py\nwhile_statement = WHILE + condition + DO + statement\n```\n\n## statement - \u6587\n\u3084\u3063\u3068\u30d1\u30fc\u30c4\u304c\u305d\u308d\u3063\u305f\u306e\u3067\u3001\u6700\u5f8c\u306b\u6587\u751f\u6210\u898f\u5247\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002BNF\u306f\u6b21\u306e\u3068\u304a\u308a\u3002\n\n```\nstatement = [ ident \":=\" expression | \"call\" ident |\n            \"begin\" statement {\";\" statement } \"end\" |\n            \"if\" condition \"then\" statement |\n            \"while\" condition \"do\" statement ].\n```\n\n\u305d\u306e\u307e\u307epyparsing\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```py\nstatement = Optional(assign_statement\n                   | call_statement\n                   | BEGIN + statement + ZeroOrMore(\";\" + statement) + END\n                   | if_statement\n                   | while_statement\n                   )\n```\n\n## const - \u5b9a\u6570\u5ba3\u8a00\n\u75b2\u308c\u3066\u304d\u305f\u306e\u3067\u5b9f\u88c5\u3060\u3051\u3002\n\n```py\nconst = CONST + ident + \"=\" + number + ZeroOrMore(\",\" + ident + \"=\" + number) + \";\"\n```\n\n## var - \u5909\u6570\u5ba3\u8a00\n\n```py\nvar = VAR + ident + ZeroOrMore(\",\" + ident) + \";\"\n```\n\n## procedure -  \u624b\u7d9a\u304d\u5ba3\u8a00\n\nBNF\u306e\u3053\u306e\u90e8\u5206`\"procedure\" ident \";\" block \";\" `\u3060\u3051\u306b\u6ce8\u76ee\u3057\u307e\u3059\u3002\u5916\u5074\u306e\u7e70\u308a\u8fd4\u3057\u306a\u3069\u306f\u30d6\u30ed\u30c3\u30af\u306e\u5b9f\u88c5\u6642\u306b\u884c\u3044\u307e\u3059\u3002\n\n```py\nblock = Forward()\nprocedure = PROCEDURE + ident + \";\" + block + \";\"\n```\n\n## block\n```py\nblock << Optional(const) + Optional(var) + ZeroOrMore(procedure) + statement\n```\n\n## program\n\u3053\u308c\u304c\u6700\u4e0a\u4f4d\u306e\u751f\u6210\u898f\u5247\u3067\u3059\u3002\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\n\n```\nprogram = block + \".\"\n```\n\n# \u30c6\u30b9\u30c8\n\u5192\u982d\u306b\u63b2\u8f09\u3057\u305f\u3001\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n$ python pl0_parser.py ex1.pl0\nTraceback (most recent call last):\n  File \"pl0_parser.py\", line 64, in <module>\n    print program.parseString(txt)\n  File \"/usr/lib/python2.7/dist-packages/pyparsing.py\", line 1041, in parseString\n    raise exc\npyparsing.ParseException: Expected \".\" (at char 59), (line:8, col:1)\n```\n\n\u901a\u308a\u307e\u305b\u3093\u306d\u3002\u306a\u3093\u3067\u3067\u3057\u3087\u3046\u3002line:8, col:1\u3068\u8a00\u3063\u3066\u3044\u308b\u306e\u3067BEGIN-END\u306e\u30d1\u30fc\u30b9\u304c\u51fa\u6765\u305a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u306e\".\"\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u8fba\u308a\u3082\u3046\u5c11\u3057\u89aa\u5207\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u305b\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u78ba\u8a8d\u306e\u305f\u3081statement\u30d1\u30fc\u30b5\u30fc\u3060\u3051\u3067\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n>>> statement.parseString('''\\\n... BEGIN\n...    x := 1;\n...    WHILE x <= 10 DO\n...    BEGIN\n...       CALL square;\n...       ! squ;\n...       x := x + 1;\n...    END\n... END\n... ''')\n([], {})\n```\n\n\u7d50\u679c\u304c\u7a7a\u3067\u78ba\u304b\u306b\u5931\u6557\u3057\u3066\u3044\u307e\u3059\u3002\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u306a\u3044\u5931\u6557\u306f\u30c7\u30d0\u30c3\u30b0\u304c\u9762\u5012\u3067\u3059\u3002\u3088\u304f\u898b\u308b\u3068`! squ;`\u3068\u3044\u3046\u898b\u6163\u308c\u306a\u3044\u6587\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u62e1\u5f35PL/0\u306e\u6587\u6cd5\u3067\u3001\u4eca\u56de\u306e\u5b9f\u88c5\u306eBNF\u3067\u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u524a\u9664\u3057\u3066\u3082\u3046\u4e00\u5ea6\u8d70\u3089\u305b\u307e\u3059\u3002\n\n```\n$ python pl0_parser.py ex1.pl0\n['VAR', 'x', ',', 'squ', ';', 'PROCEDURE', 'square', ';', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', ';', 'BEGIN', 'x', ':=', '1', ';', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', ';', 'x', ':=', 'x', '+', '1', ';', 'END', 'END', '.']\n```\n\n\u3046\u307e\u304f\u884c\u304d\u307e\u3057\u305f\uff01\n\n\u6b21\u56de\u306f\u672c\u683c\u7684\u306b\u69cb\u6587\u6728(AST)\u3092\u4f5c\u3063\u3066\u30b3\u30fc\u30c9\u751f\u6210\u3092\u3084\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u6700\u5f8c\u306b\u4eca\u307e\u3067\u5b9f\u88c5\u3057\u3066\u304d\u305f\u30d1\u30fc\u30b5\u30fc\u306e\u30bd\u30fc\u30b9\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n```py:pl0_parser.py\nfrom pyparsing import CaselessKeyword, MatchFirst, Word, alphas, alphanums, Forward, Optional, oneOf, ZeroOrMore, Regex\n\n\n# 1. reserved keyword\n(CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD) = map(CaselessKeyword,\n\"CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD\".replace(\",\", \"\").split())\nkeyword = MatchFirst((CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD))\n\n# 2. identifier\nident = ~keyword + Word(alphas, alphanums + \"_\")\n\n# 3. expression\nnumber = Regex(r\"\\d+(\\.\\d*)?([eE][+-]?\\d+)?\")\nterm = Forward()\nfactor = Forward()\nexpression = Optional(oneOf(\"+ -\")) + term + ZeroOrMore(oneOf(\"+ -\") + term)\nterm << (factor + ZeroOrMore(oneOf(\"* /\") + factor))\nfactor << (ident | number | \"(\" + expression + \")\")\n\n# 4. condition\ncondition = ODD + expression | expression + oneOf('= # < <= > >=') + expression\n\n# 5. assignment\nassign_statement = ident + \":=\" + expression\n\n# 6. call\ncall_statement = CALL + ident\n\n# 7. if-then\nstatement = Forward()\nif_statement = IF + condition + THEN + statement\n\n# 8. while-do\nwhile_statement = WHILE + condition + DO + statement\n\n# 9. statement\nstatement << Optional(assign_statement\n                      | call_statement\n                      | BEGIN + statement + ZeroOrMore(\";\" + statement) + END\n                      | if_statement\n                      | while_statement\n)\n\n# 10. const\nconst = CONST + ident + \"=\" + number + ZeroOrMore(\",\" + ident + \"=\" + number) + \";\"\n\n# 11. var\nvar = VAR + ident + ZeroOrMore(\",\" + ident) + \";\"\n\n# 12. procedure\nblock = Forward()\nprocedure = PROCEDURE + ident + \";\" + block + \";\"\n\n# 13. block\nblock << Optional(const) + Optional(var) + ZeroOrMore(procedure) + statement\n\n# 14. program\nprogram = block + \".\"\n\nif __name__ == '__main__':\n    import sys\n    with open(sys.argv[1], 'r') as fp:\n        txt = fp.read()\n        print program.parseString(txt)\n```\n", "tags": ["Python", "\u30b3\u30f3\u30d1\u30a4\u30e9", "\u30d1\u30fc\u30b5\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf", "\u5b57\u53e5\u89e3\u6790"]}